1
00:00:00,960 --> 00:00:04,160
all right we're reporting now so

2
00:00:04,160 --> 00:00:05,920
all right i'm gonna share my screen real

3
00:00:05,920 --> 00:00:08,240
quick um

4
00:00:08,240 --> 00:00:11,120
yeah i will send you as a presenter when

5
00:00:11,120 --> 00:00:13,200
i'm done with the

6
00:00:13,200 --> 00:00:14,719
with the with the introduction then you

7
00:00:14,719 --> 00:00:18,240
take the floor and ah awesome

8
00:00:18,240 --> 00:00:20,080
you decide when you want to take

9
00:00:20,080 --> 00:00:22,240
questions you can take questions

10
00:00:22,240 --> 00:00:24,880
usually it's better if we if we take it

11
00:00:24,880 --> 00:00:26,000
at the end

12
00:00:26,000 --> 00:00:27,680
because that way it doesn't interrupt

13
00:00:27,680 --> 00:00:29,359
that much for all of you

14
00:00:29,359 --> 00:00:32,159
i muted you because if i don't beat you

15
00:00:32,159 --> 00:00:34,320
then people forgets to mute and then we

16
00:00:34,320 --> 00:00:37,440
hear the dogs and the kids and

17
00:00:37,440 --> 00:00:40,320
everything so so if you if you really

18
00:00:40,320 --> 00:00:41,200
need to talk

19
00:00:41,200 --> 00:00:44,399
then just put it in the chat and uh

20
00:00:44,399 --> 00:00:46,239
and if you have a question put it in the

21
00:00:46,239 --> 00:00:47,680
chat

22
00:00:47,680 --> 00:00:51,199
we'll address it so uh guys this is

23
00:00:51,199 --> 00:00:51,920
probably

24
00:00:51,920 --> 00:00:55,199
our last meetup uh where we're gonna

25
00:00:55,199 --> 00:00:55,520
have

26
00:00:55,520 --> 00:00:58,640
uh some sort of a formal presentation uh

27
00:00:58,640 --> 00:01:00,960
we have one month more in december

28
00:01:00,960 --> 00:01:03,120
i hope all of you guys are safe and

29
00:01:03,120 --> 00:01:04,559
things are

30
00:01:04,559 --> 00:01:07,520
probably looking up i hope so truly um

31
00:01:07,520 --> 00:01:08,720
and uh

32
00:01:08,720 --> 00:01:10,080
if you were here before i was just

33
00:01:10,080 --> 00:01:12,000
talking to uh

34
00:01:12,000 --> 00:01:14,400
prospero about the the outlook it

35
00:01:14,400 --> 00:01:16,880
doesn't look like um

36
00:01:16,880 --> 00:01:18,720
things are gonna get better anytime soon

37
00:01:18,720 --> 00:01:21,759
for going back into personal meetings so

38
00:01:21,759 --> 00:01:24,880
uh you can you can check this year out

39
00:01:24,880 --> 00:01:27,040
uh we're not going to go back to

40
00:01:27,040 --> 00:01:28,080
in-person meetings

41
00:01:28,080 --> 00:01:31,759
in fact there is closings again

42
00:01:31,759 --> 00:01:33,840
and we'll have to see what's going to

43
00:01:33,840 --> 00:01:35,360
happen

44
00:01:35,360 --> 00:01:38,640
we do intend to have a online

45
00:01:38,640 --> 00:01:41,680
sort of a meeting or event that will

46
00:01:41,680 --> 00:01:42,159
have

47
00:01:42,159 --> 00:01:45,840
competitions and this will be done for

48
00:01:45,840 --> 00:01:49,920
our last uh event of the year

49
00:01:49,920 --> 00:01:52,159
and hopefully this will be something you

50
00:01:52,159 --> 00:01:53,040
can have fun

51
00:01:53,040 --> 00:01:56,240
and we make it interactive making i was

52
00:01:56,240 --> 00:01:57,040
thinking

53
00:01:57,040 --> 00:01:59,280
maybe doing like a combination of a

54
00:01:59,280 --> 00:02:01,360
discord and a twitch channel

55
00:02:01,360 --> 00:02:05,040
um for those who are not in discord

56
00:02:05,040 --> 00:02:07,200
uh i will post the discord invite in the

57
00:02:07,200 --> 00:02:08,399
chat

58
00:02:08,399 --> 00:02:13,200
today we had eviatar from the akamai

59
00:02:13,200 --> 00:02:15,520
security research team and he's going to

60
00:02:15,520 --> 00:02:18,000
talk to us about an introduction to eok

61
00:02:18,000 --> 00:02:22,400
eok is the most popular open source um

62
00:02:22,400 --> 00:02:25,040
framework for log analytics and many

63
00:02:25,040 --> 00:02:26,239
other stuff

64
00:02:26,239 --> 00:02:29,599
um so uh keep in touch

65
00:02:29,599 --> 00:02:31,599
uh join the discord and we'll be

66
00:02:31,599 --> 00:02:33,280
announcing soon

67
00:02:33,280 --> 00:02:36,640
um what we're gonna do so with with that

68
00:02:36,640 --> 00:02:40,000
i'm gonna make a video presenter

69
00:02:40,000 --> 00:02:43,360
and you can take it away

70
00:02:47,440 --> 00:02:50,640
awesome uh thank you uh rod

71
00:02:50,640 --> 00:02:52,319
uh so yeah uh let me just share my

72
00:02:52,319 --> 00:02:53,760
screen real quick

73
00:02:53,760 --> 00:02:56,000
uh

74
00:02:58,319 --> 00:03:00,560
there we go can you can you guys see my

75
00:03:00,560 --> 00:03:02,879
screen okay

76
00:03:02,879 --> 00:03:07,760
i don't see it yet no okay

77
00:03:08,640 --> 00:03:13,040
how about now excellent

78
00:03:13,040 --> 00:03:14,959
awesome and uh can you guys also hear me

79
00:03:14,959 --> 00:03:17,519
okay yeah you're good to go man

80
00:03:17,519 --> 00:03:20,879
great um so yeah uh hello everyone

81
00:03:20,879 --> 00:03:22,720
uh like i say it's very good to be here

82
00:03:22,720 --> 00:03:24,879
today uh thank you for having me

83
00:03:24,879 --> 00:03:28,000
uh my name is evitor cyas like rod said

84
00:03:28,000 --> 00:03:29,920
i'm a security researcher and a software

85
00:03:29,920 --> 00:03:31,840
engineer

86
00:03:31,840 --> 00:03:33,760
today we're going to talk about

87
00:03:33,760 --> 00:03:36,080
technology stack called the elk stack

88
00:03:36,080 --> 00:03:38,000
which is a very popular tech stack for

89
00:03:38,000 --> 00:03:39,599
handling all kinds of

90
00:03:39,599 --> 00:03:43,680
log data like honeypot logs pcaps

91
00:03:43,680 --> 00:03:46,159
malware signatures all kinds of analysis

92
00:03:46,159 --> 00:03:46,959
reports

93
00:03:46,959 --> 00:03:49,280
and many more types of logs that we

94
00:03:49,280 --> 00:03:50,000
often

95
00:03:50,000 --> 00:03:53,519
use i want to start off by looking at

96
00:03:53,519 --> 00:03:56,560
the agenda for today

97
00:03:57,200 --> 00:04:00,400
this is the first part of the agenda uh

98
00:04:00,400 --> 00:04:02,720
so first we are going to briefly talk

99
00:04:02,720 --> 00:04:04,560
about the classic elk stack

100
00:04:04,560 --> 00:04:07,760
and what it is uh then i will introduce

101
00:04:07,760 --> 00:04:09,120
the custom elf stack

102
00:04:09,120 --> 00:04:10,560
uh that we're going to be setting up

103
00:04:10,560 --> 00:04:12,319
here today um

104
00:04:12,319 --> 00:04:14,239
so what do i mean by a custom elk stack

105
00:04:14,239 --> 00:04:15,599
uh basically uh

106
00:04:15,599 --> 00:04:17,358
we are going to be replacing the log

107
00:04:17,358 --> 00:04:18,639
stash component

108
00:04:18,639 --> 00:04:20,798
uh with a different technology but we're

109
00:04:20,798 --> 00:04:22,479
going to get more into that uh

110
00:04:22,479 --> 00:04:26,160
soon uh then i will briefly talk about

111
00:04:26,160 --> 00:04:28,880
docker and docker compose

112
00:04:28,880 --> 00:04:30,800
i want to just briefly touch on these uh

113
00:04:30,800 --> 00:04:32,800
since we will be using docker compose in

114
00:04:32,800 --> 00:04:35,840
order to set up our elk stack

115
00:04:35,840 --> 00:04:37,600
i want this to be more of a practical

116
00:04:37,600 --> 00:04:39,919
presentation so we're going to actually

117
00:04:39,919 --> 00:04:41,520
set up the elk stack together and

118
00:04:41,520 --> 00:04:43,360
interact with it and explore

119
00:04:43,360 --> 00:04:47,280
some of its uh most popular features

120
00:04:47,280 --> 00:04:50,400
uh after we finish setting up our

121
00:04:50,400 --> 00:04:53,440
our elk stack our custom elk stack um

122
00:04:53,440 --> 00:04:55,440
we're gonna explore each component of

123
00:04:55,440 --> 00:04:58,400
our custom elk stack individually

124
00:04:58,400 --> 00:05:00,880
these are the components that will make

125
00:05:00,880 --> 00:05:02,400
up our stack

126
00:05:02,400 --> 00:05:05,680
elastic search cabana celery and rabbit

127
00:05:05,680 --> 00:05:06,880
mq

128
00:05:06,880 --> 00:05:08,840
which we're going to talk about very

129
00:05:08,840 --> 00:05:10,880
soon

130
00:05:10,880 --> 00:05:13,360
and then uh we're going to push some

131
00:05:13,360 --> 00:05:15,520
data into our functional pipeline

132
00:05:15,520 --> 00:05:17,600
and see how all these components work

133
00:05:17,600 --> 00:05:18,720
together and

134
00:05:18,720 --> 00:05:20,960
how this type of setup can be very

135
00:05:20,960 --> 00:05:22,320
useful and effective

136
00:05:22,320 --> 00:05:24,560
for security professional as far as

137
00:05:24,560 --> 00:05:26,639
analysis and handling large

138
00:05:26,639 --> 00:05:29,600
volumes of data um and then finally at

139
00:05:29,600 --> 00:05:31,520
the end we're going to have some

140
00:05:31,520 --> 00:05:35,680
some q a time okay

141
00:05:35,680 --> 00:05:37,759
all right so uh so let's dive right into

142
00:05:37,759 --> 00:05:39,199
it um

143
00:05:39,199 --> 00:05:42,000
what is the classic elk so elk is the

144
00:05:42,000 --> 00:05:44,000
acronym for three open source uh

145
00:05:44,000 --> 00:05:44,639
projects

146
00:05:44,639 --> 00:05:48,479
um elasticsearch logstash and cabana

147
00:05:48,479 --> 00:05:51,199
elasticsearch is a search analytics

148
00:05:51,199 --> 00:05:52,880
engine

149
00:05:52,880 --> 00:05:55,199
you can also think of it as a full text

150
00:05:55,199 --> 00:05:58,720
distributed nosql database

151
00:05:58,720 --> 00:06:01,919
that scales very well

152
00:06:02,000 --> 00:06:04,000
logstash is a server-side data

153
00:06:04,000 --> 00:06:06,319
processing pipeline that ingests data

154
00:06:06,319 --> 00:06:09,039
from multiple sources simultaneously

155
00:06:09,039 --> 00:06:10,400
transforms it

156
00:06:10,400 --> 00:06:12,720
and then sends it to a stash like

157
00:06:12,720 --> 00:06:14,880
elasticsearch

158
00:06:14,880 --> 00:06:17,199
log sash is usually used for data

159
00:06:17,199 --> 00:06:18,560
enrichment

160
00:06:18,560 --> 00:06:20,880
and usually access the middleman between

161
00:06:20,880 --> 00:06:21,919
elasticsearch

162
00:06:21,919 --> 00:06:25,120
and uh an input source

163
00:06:25,120 --> 00:06:27,680
uh and then finally we have kibana that

164
00:06:27,680 --> 00:06:28,479
lets users

165
00:06:28,479 --> 00:06:30,800
uh visualize the data with charts and

166
00:06:30,800 --> 00:06:31,919
graphs and

167
00:06:31,919 --> 00:06:34,240
that kind of stuff you can think of

168
00:06:34,240 --> 00:06:35,759
cabana as basically

169
00:06:35,759 --> 00:06:39,120
a front end for your elastic search data

170
00:06:39,120 --> 00:06:41,360
uh it can also be used to create custom

171
00:06:41,360 --> 00:06:43,360
dashboards and some cool

172
00:06:43,360 --> 00:06:46,639
visuals it makes analyzing large

173
00:06:46,639 --> 00:06:49,039
amounts of data much easier and more

174
00:06:49,039 --> 00:06:49,840
effective

175
00:06:49,840 --> 00:06:51,120
and we're going to look at all the

176
00:06:51,120 --> 00:06:54,160
features uh very soon

177
00:06:54,160 --> 00:06:57,759
so that's the classic of stack

178
00:06:57,759 --> 00:06:59,520
i want to quickly also talk about the

179
00:06:59,520 --> 00:07:01,599
need for elking security

180
00:07:01,599 --> 00:07:04,800
so security professionals often find

181
00:07:04,800 --> 00:07:05,520
themselves

182
00:07:05,520 --> 00:07:07,919
needing to work with high volumes of log

183
00:07:07,919 --> 00:07:09,039
data

184
00:07:09,039 --> 00:07:11,360
and the ability to quickly search store

185
00:07:11,360 --> 00:07:12,479
and visualize

186
00:07:12,479 --> 00:07:15,120
logs at scale and the key here is really

187
00:07:15,120 --> 00:07:16,160
at scale

188
00:07:16,160 --> 00:07:18,960
uh because it's usually a lot of logs um

189
00:07:18,960 --> 00:07:20,880
can make analysis easier and more

190
00:07:20,880 --> 00:07:22,720
effective

191
00:07:22,720 --> 00:07:25,039
uh just to list a few examples of common

192
00:07:25,039 --> 00:07:26,560
logs that we might want to ingest

193
00:07:26,560 --> 00:07:29,520
into this pipeline um logs from a

194
00:07:29,520 --> 00:07:30,080
compromise

195
00:07:30,080 --> 00:07:31,520
machine if we're doing any type of

196
00:07:31,520 --> 00:07:33,360
analysis or trying to find any

197
00:07:33,360 --> 00:07:36,639
type of uh exploit that was used uh

198
00:07:36,639 --> 00:07:39,759
pcaps uh make them searchable um

199
00:07:39,759 --> 00:07:43,840
honeypot logs uh analysis reports

200
00:07:43,840 --> 00:07:46,639
malware signatures any types of uh

201
00:07:46,639 --> 00:07:47,599
usually in

202
00:07:47,599 --> 00:07:49,360
in the security world we use a lot of

203
00:07:49,360 --> 00:07:50,960
different tools and stuff

204
00:07:50,960 --> 00:07:53,280
it's very useful to have all those tools

205
00:07:53,280 --> 00:07:54,960
fit into that same

206
00:07:54,960 --> 00:07:57,360
dashboard keep them in a centralized

207
00:07:57,360 --> 00:07:58,319
place

208
00:07:58,319 --> 00:08:01,199
um also maybe some some system

209
00:08:01,199 --> 00:08:03,360
performance data like cpu spikes

210
00:08:03,360 --> 00:08:06,639
uh memory consumption data all kinds of

211
00:08:06,639 --> 00:08:09,759
logs like that

212
00:08:10,840 --> 00:08:13,919
um so i mentioned briefly before

213
00:08:13,919 --> 00:08:15,840
uh that we're going to be using a custom

214
00:08:15,840 --> 00:08:16,960
out stack

215
00:08:16,960 --> 00:08:20,000
uh in our in in our case uh we will not

216
00:08:20,000 --> 00:08:22,000
be using logs like i said

217
00:08:22,000 --> 00:08:24,160
instead we'll be replacing log sash with

218
00:08:24,160 --> 00:08:25,680
two other technologies

219
00:08:25,680 --> 00:08:28,400
called celery and rabbit and q for data

220
00:08:28,400 --> 00:08:29,520
enrichment

221
00:08:29,520 --> 00:08:31,280
basically we want to make this scale

222
00:08:31,280 --> 00:08:32,719
this is going to help us out

223
00:08:32,719 --> 00:08:36,559
a lot this will allow us to scale better

224
00:08:36,559 --> 00:08:39,440
using a distributed worker queue which

225
00:08:39,440 --> 00:08:41,120
is what salary is

226
00:08:41,120 --> 00:08:42,640
it will also provide us with more

227
00:08:42,640 --> 00:08:45,200
visibility and greater control over our

228
00:08:45,200 --> 00:08:46,880
pipeline

229
00:08:46,880 --> 00:08:50,160
so a bit more about scaling um

230
00:08:50,160 --> 00:08:54,000
salary is a distributed task queue

231
00:08:54,000 --> 00:08:58,000
for python it uses distributed workers

232
00:08:58,000 --> 00:09:00,160
in order to consume tasks from a

233
00:09:00,160 --> 00:09:02,720
queue and just a little bit about what i

234
00:09:02,720 --> 00:09:05,120
mean by distributed workers

235
00:09:05,120 --> 00:09:07,200
basically you can have an entire server

236
00:09:07,200 --> 00:09:09,600
and all of its resources just dedicated

237
00:09:09,600 --> 00:09:10,320
to

238
00:09:10,320 --> 00:09:12,320
running workers you can have multiple

239
00:09:12,320 --> 00:09:13,440
services

240
00:09:13,440 --> 00:09:17,440
servers sorry servers boxes you can run

241
00:09:17,440 --> 00:09:20,880
workers on on many of those at once

242
00:09:20,880 --> 00:09:24,000
just have all those um consume from the

243
00:09:24,000 --> 00:09:25,760
same queue so they can work together so

244
00:09:25,760 --> 00:09:27,200
you can kind of see where the spelling

245
00:09:27,200 --> 00:09:29,519
aspect comes in

246
00:09:29,519 --> 00:09:33,440
um so like i said in our case uh

247
00:09:33,440 --> 00:09:34,880
we're going to be using celery and

248
00:09:34,880 --> 00:09:37,279
rabbit mq rabbit mq is actually a

249
00:09:37,279 --> 00:09:38,320
message broker

250
00:09:38,320 --> 00:09:40,720
it's going to be maintaining our cue

251
00:09:40,720 --> 00:09:42,560
it's a very popular message broker and

252
00:09:42,560 --> 00:09:43,839
actually celery

253
00:09:43,839 --> 00:09:45,920
was originally designed to use this

254
00:09:45,920 --> 00:09:49,040
specific message broker

255
00:09:49,040 --> 00:09:50,720
uh it can also now of course support

256
00:09:50,720 --> 00:09:52,399
other other ones like another popular

257
00:09:52,399 --> 00:09:53,360
one is redis

258
00:09:53,360 --> 00:09:55,279
but we're going to be using our rabbit

259
00:09:55,279 --> 00:09:56,640
mq

260
00:09:56,640 --> 00:09:59,279
so um this type of setup is going to

261
00:09:59,279 --> 00:10:00,480
allow us to uh

262
00:10:00,480 --> 00:10:02,720
scale nicely since celery can also

263
00:10:02,720 --> 00:10:04,399
increase or decrease

264
00:10:04,399 --> 00:10:06,880
the number of workers that it uses uh

265
00:10:06,880 --> 00:10:08,720
based on the load dynamically

266
00:10:08,720 --> 00:10:11,760
so that's pretty cool um and rabbitmq

267
00:10:11,760 --> 00:10:13,839
can also act as a buffer so for example

268
00:10:13,839 --> 00:10:15,600
if our elasticsearch goes down

269
00:10:15,600 --> 00:10:19,279
or whatever is feeding uh the logs

270
00:10:19,279 --> 00:10:20,959
to our pipeline in our case we're going

271
00:10:20,959 --> 00:10:23,200
to stop a little custom honey pot but

272
00:10:23,200 --> 00:10:26,640
whatever is fitting the um

273
00:10:26,640 --> 00:10:29,120
the pipeline goes down or any of that

274
00:10:29,120 --> 00:10:30,079
stuff

275
00:10:30,079 --> 00:10:32,000
basically those message messages are not

276
00:10:32,000 --> 00:10:33,600
going anywhere they're going to be on

277
00:10:33,600 --> 00:10:34,800
rabbits mq

278
00:10:34,800 --> 00:10:37,040
uh and once everything is back in up and

279
00:10:37,040 --> 00:10:38,399
running it will be

280
00:10:38,399 --> 00:10:42,880
consumed so that's a nice thing as well

281
00:10:42,880 --> 00:10:46,399
um so yeah

282
00:10:46,399 --> 00:10:48,320
um this kind of setup is also going to

283
00:10:48,320 --> 00:10:50,320
provide us with more visibility into our

284
00:10:50,320 --> 00:10:51,040
pipeline

285
00:10:51,040 --> 00:10:54,399
um since celery enables us to use a tool

286
00:10:54,399 --> 00:10:55,519
called flour

287
00:10:55,519 --> 00:10:58,720
as well uh it works with celery uh it's

288
00:10:58,720 --> 00:11:00,240
just a simple web ui

289
00:11:00,240 --> 00:11:03,200
basically uh that helps us monitor our

290
00:11:03,200 --> 00:11:03,920
seller

291
00:11:03,920 --> 00:11:07,279
salary workers um so

292
00:11:07,279 --> 00:11:09,360
flower is gonna allow us to see if

293
00:11:09,360 --> 00:11:11,600
workers failed or succeeded

294
00:11:11,600 --> 00:11:13,200
how long it took workers to complete

295
00:11:13,200 --> 00:11:15,120
their tasks maybe we can debug

296
00:11:15,120 --> 00:11:17,920
or optimize uh and we'll be able to

297
00:11:17,920 --> 00:11:20,160
identify any issues with our pipeline uh

298
00:11:20,160 --> 00:11:22,079
if logs do not make it all the way to

299
00:11:22,079 --> 00:11:23,600
elasticsearch in the end

300
00:11:23,600 --> 00:11:25,040
uh we're gonna have a lot of visibility

301
00:11:25,040 --> 00:11:28,640
to errors and stuff like that um

302
00:11:28,640 --> 00:11:30,160
i'm going to talk about celery and

303
00:11:30,160 --> 00:11:32,079
rabbit and q more in depth

304
00:11:32,079 --> 00:11:35,680
very soon uh but that's rabbit and q

305
00:11:35,680 --> 00:11:37,360
and celery for now and that's the reason

306
00:11:37,360 --> 00:11:39,040
we're going to replace log stash with

307
00:11:39,040 --> 00:11:40,959
those

308
00:11:40,959 --> 00:11:43,839
um all right so just to summarize this

309
00:11:43,839 --> 00:11:45,279
is the custom extract that we're gonna

310
00:11:45,279 --> 00:11:46,800
be building here today

311
00:11:46,800 --> 00:11:50,320
um it's it's gonna have uh elasticsearch

312
00:11:50,320 --> 00:11:54,320
cabana celery and rabbit mq

313
00:11:54,399 --> 00:11:57,600
all right so um before we start setting

314
00:11:57,600 --> 00:11:58,639
up our elk stack

315
00:11:58,639 --> 00:12:00,560
i briefly want to talk about what docker

316
00:12:00,560 --> 00:12:02,079
is for those who are not familiar with

317
00:12:02,079 --> 00:12:03,519
it already

318
00:12:03,519 --> 00:12:05,279
um i want to go over it because we're

319
00:12:05,279 --> 00:12:07,120
going to be using docker compose

320
00:12:07,120 --> 00:12:09,920
to set up our stack so um here on the

321
00:12:09,920 --> 00:12:11,519
slide i have the formal definition from

322
00:12:11,519 --> 00:12:12,480
wikipedia

323
00:12:12,480 --> 00:12:15,040
i read it very quickly um docker is a

324
00:12:15,040 --> 00:12:17,440
set of platform as a service products

325
00:12:17,440 --> 00:12:17,920
they use

326
00:12:17,920 --> 00:12:20,480
os level virtualization to deliver

327
00:12:20,480 --> 00:12:23,680
software packages called containers

328
00:12:23,680 --> 00:12:25,680
containers are isolated from one another

329
00:12:25,680 --> 00:12:27,600
and bundle their own software libraries

330
00:12:27,600 --> 00:12:29,200
and configuration files

331
00:12:29,200 --> 00:12:30,480
they can communicate with each other

332
00:12:30,480 --> 00:12:32,000
with each other through a well-defined

333
00:12:32,000 --> 00:12:32,880
channels

334
00:12:32,880 --> 00:12:34,240
and here is the place where you would

335
00:12:34,240 --> 00:12:36,839
install docker from

336
00:12:36,839 --> 00:12:40,399
um so i'm going to highly oversimplify

337
00:12:40,399 --> 00:12:41,360
this definition

338
00:12:41,360 --> 00:12:43,200
and maybe butcher it uh just a little

339
00:12:43,200 --> 00:12:46,000
bit um docker has many benefits

340
00:12:46,000 --> 00:12:47,600
uh but to keep it simple what you

341
00:12:47,600 --> 00:12:49,120
basically need to know for the spec of

342
00:12:49,120 --> 00:12:50,720
our example

343
00:12:50,720 --> 00:12:52,800
um is the docker is a tool that allows

344
00:12:52,800 --> 00:12:55,120
you to run services in sandbox-like

345
00:12:55,120 --> 00:12:56,240
environments called

346
00:12:56,240 --> 00:12:59,200
containers so you can pre-configure

347
00:12:59,200 --> 00:13:00,880
these containers like for example

348
00:13:00,880 --> 00:13:03,760
setting up environmental variables or

349
00:13:03,760 --> 00:13:05,519
installing any dependencies that your

350
00:13:05,519 --> 00:13:06,320
server

351
00:13:06,320 --> 00:13:08,399
that your service uh might need to run

352
00:13:08,399 --> 00:13:10,240
in order to uh

353
00:13:10,240 --> 00:13:13,600
to function properly um this basically

354
00:13:13,600 --> 00:13:15,279
ensures that

355
00:13:15,279 --> 00:13:17,600
your service has all the configurations

356
00:13:17,600 --> 00:13:19,760
it needs in order to run properly on any

357
00:13:19,760 --> 00:13:22,160
system

358
00:13:22,160 --> 00:13:24,959
there are many more benefits to docker

359
00:13:24,959 --> 00:13:28,639
and the concepts of isolating services

360
00:13:28,639 --> 00:13:31,120
isolating services from one another

361
00:13:31,120 --> 00:13:33,040
provides a lot of value

362
00:13:33,040 --> 00:13:35,040
um i can basically go on and on about

363
00:13:35,040 --> 00:13:36,160
docker uh

364
00:13:36,160 --> 00:13:38,800
and how beneficial uh service isolation

365
00:13:38,800 --> 00:13:39,360
is

366
00:13:39,360 --> 00:13:40,800
but for the sake of our example that's

367
00:13:40,800 --> 00:13:43,360
all you really need to know

368
00:13:43,360 --> 00:13:45,920
it's also worth mentioning uh the docker

369
00:13:45,920 --> 00:13:46,800
containers

370
00:13:46,800 --> 00:13:48,160
are created from something called an

371
00:13:48,160 --> 00:13:51,199
image an image can be created from

372
00:13:51,199 --> 00:13:53,040
something called a docker file

373
00:13:53,040 --> 00:13:56,240
or it can be pulsed from the docker hub

374
00:13:56,240 --> 00:13:59,120
the docker hub is basically just a big

375
00:13:59,120 --> 00:14:01,199
image repository

376
00:14:01,199 --> 00:14:03,920
um i'm going to quickly show how to pull

377
00:14:03,920 --> 00:14:05,519
an image from docker hub for those who

378
00:14:05,519 --> 00:14:06,480
don't know

379
00:14:06,480 --> 00:14:07,279
we're going to be using the

380
00:14:07,279 --> 00:14:10,560
elasticsearch image as an example

381
00:14:10,560 --> 00:14:15,120
so let me just uh open up a new tab here

382
00:14:15,120 --> 00:14:18,399
i'll go to google real quick and

383
00:14:18,399 --> 00:14:21,519
i'll search uh docker hub it should be

384
00:14:21,519 --> 00:14:22,480
the first thing

385
00:14:22,480 --> 00:14:27,199
uh that comes up uh hub.com

386
00:14:27,199 --> 00:14:29,440
finding your images on here is very

387
00:14:29,440 --> 00:14:31,440
simple uh it's very intuitive

388
00:14:31,440 --> 00:14:33,199
you just type in the name of the service

389
00:14:33,199 --> 00:14:34,880
that you're interested in into the

390
00:14:34,880 --> 00:14:36,320
search box

391
00:14:36,320 --> 00:14:38,720
and there's more most likely an image

392
00:14:38,720 --> 00:14:40,480
for it so for example if i

393
00:14:40,480 --> 00:14:43,600
very quickly just want to test some bugs

394
00:14:43,600 --> 00:14:44,320
on the

395
00:14:44,320 --> 00:14:46,880
latest version of nginx or if i just

396
00:14:46,880 --> 00:14:48,240
want to

397
00:14:48,240 --> 00:14:51,279
spin up a a web server very quickly just

398
00:14:51,279 --> 00:14:52,959
to test some features

399
00:14:52,959 --> 00:14:56,959
um i can find the nginx

400
00:14:56,959 --> 00:14:59,760
container just like that uh sorry uh

401
00:14:59,760 --> 00:15:00,399
image

402
00:15:00,399 --> 00:15:02,880
just like that and i will basically use

403
00:15:02,880 --> 00:15:03,600
this uh

404
00:15:03,600 --> 00:15:06,320
image in order to create containers from

405
00:15:06,320 --> 00:15:07,199
so

406
00:15:07,199 --> 00:15:09,519
uh they have a bunch of cool um images

407
00:15:09,519 --> 00:15:11,440
here nginx is just one of them if you're

408
00:15:11,440 --> 00:15:12,000
interested

409
00:15:12,000 --> 00:15:15,120
interested in uh arch linux for example

410
00:15:15,120 --> 00:15:17,360
you can type arch in here there it is

411
00:15:17,360 --> 00:15:18,639
arch linux

412
00:15:18,639 --> 00:15:22,000
i bet they also have the kali one uh

413
00:15:22,000 --> 00:15:24,720
yeah uh you're interested in any any

414
00:15:24,720 --> 00:15:25,760
database

415
00:15:25,760 --> 00:15:28,639
sql you want to test some features on

416
00:15:28,639 --> 00:15:29,279
it's all

417
00:15:29,279 --> 00:15:31,279
in here we're going to be looking at

418
00:15:31,279 --> 00:15:34,240
elasticsearch so let's search for that

419
00:15:34,240 --> 00:15:36,639
and there it is we can see it has over

420
00:15:36,639 --> 00:15:38,639
let's see the actual amount uh

421
00:15:38,639 --> 00:15:40,880
100 million download so you can see how

422
00:15:40,880 --> 00:15:42,320
popular this service

423
00:15:42,320 --> 00:15:45,839
uh is um and when you click on that

424
00:15:45,839 --> 00:15:47,759
the nice thing is that it gives you a

425
00:15:47,759 --> 00:15:49,120
little more information

426
00:15:49,120 --> 00:15:51,120
you can actually specify which version

427
00:15:51,120 --> 00:15:52,560
of the elasticsearch you're interested

428
00:15:52,560 --> 00:15:53,759
in so if you know there's a

429
00:15:53,759 --> 00:15:55,360
vulnerability

430
00:15:55,360 --> 00:15:56,800
in this particular version but not the

431
00:15:56,800 --> 00:15:58,560
latest one you want to mess with it

432
00:15:58,560 --> 00:16:00,480
you can pull down the image start

433
00:16:00,480 --> 00:16:02,000
playing with it if you

434
00:16:02,000 --> 00:16:05,600
um if if you if and if the new version

435
00:16:05,600 --> 00:16:07,440
comes out and breaks the application you

436
00:16:07,440 --> 00:16:09,759
can always go back and pull the previous

437
00:16:09,759 --> 00:16:10,560
one

438
00:16:10,560 --> 00:16:13,199
so that's nice um they give you a little

439
00:16:13,199 --> 00:16:14,320
example as well

440
00:16:14,320 --> 00:16:16,880
uh how to actually create a container

441
00:16:16,880 --> 00:16:18,399
from this image

442
00:16:18,399 --> 00:16:21,519
so you see here um their mapping ports

443
00:16:21,519 --> 00:16:23,680
they're studying environmental variables

444
00:16:23,680 --> 00:16:25,839
they're putting uh their container on

445
00:16:25,839 --> 00:16:27,440
their virtual network called some

446
00:16:27,440 --> 00:16:28,160
network

447
00:16:28,160 --> 00:16:30,320
but we're gonna get more into that later

448
00:16:30,320 --> 00:16:32,639
uh the the real interesting part is this

449
00:16:32,639 --> 00:16:33,440
right here

450
00:16:33,440 --> 00:16:35,759
docker pool elasticsearch you can copy

451
00:16:35,759 --> 00:16:37,440
that onto your terminal

452
00:16:37,440 --> 00:16:40,639
once you install docker and docker will

453
00:16:40,639 --> 00:16:40,959
just

454
00:16:40,959 --> 00:16:43,199
pull this image from the docker hub and

455
00:16:43,199 --> 00:16:44,480
you'll be ready to go you're going to

456
00:16:44,480 --> 00:16:45,759
have elasticsearch image

457
00:16:45,759 --> 00:16:48,800
on your host machine and you can start

458
00:16:48,800 --> 00:16:50,000
working with it so

459
00:16:50,000 --> 00:16:52,720
very simple super awesome i just wanted

460
00:16:52,720 --> 00:16:54,000
to show that real quickly

461
00:16:54,000 --> 00:16:56,320
so that's it for docker hub uh let's go

462
00:16:56,320 --> 00:16:58,560
back to our slides

463
00:16:58,560 --> 00:17:02,638
okay just gonna get a sip of water real

464
00:17:02,839 --> 00:17:05,039
quick all right so

465
00:17:05,039 --> 00:17:08,880
uh next the only reason i even brought

466
00:17:08,880 --> 00:17:09,679
up docker up

467
00:17:09,679 --> 00:17:11,839
is because i wanna set the stage for

468
00:17:11,839 --> 00:17:12,880
docker compose

469
00:17:12,880 --> 00:17:15,119
so we are going to be using docker

470
00:17:15,119 --> 00:17:16,799
compose uh to set up

471
00:17:16,799 --> 00:17:20,720
our elf stack today um docker compose is

472
00:17:20,720 --> 00:17:21,280
awesome

473
00:17:21,280 --> 00:17:24,640
uh what is it it's a docker compose is a

474
00:17:24,640 --> 00:17:25,119
tool

475
00:17:25,119 --> 00:17:27,119
for defining and running multi-container

476
00:17:27,119 --> 00:17:28,720
docker applications

477
00:17:28,720 --> 00:17:30,720
uh with docker compose you can use a

478
00:17:30,720 --> 00:17:33,039
yaml file to configure your application

479
00:17:33,039 --> 00:17:34,320
services

480
00:17:34,320 --> 00:17:36,960
then with a single command which is the

481
00:17:36,960 --> 00:17:37,840
best part

482
00:17:37,840 --> 00:17:39,919
you create and start all your services

483
00:17:39,919 --> 00:17:42,559
from your configuration

484
00:17:42,559 --> 00:17:46,320
so it's very convenient to use docker

485
00:17:46,320 --> 00:17:47,760
compose instead of having to run

486
00:17:47,760 --> 00:17:49,600
multiple containers using the docker run

487
00:17:49,600 --> 00:17:51,200
commands like we saw in the example in

488
00:17:51,200 --> 00:17:53,440
docker hub with the elastic search

489
00:17:53,440 --> 00:17:56,880
uh our elk stack uses about four

490
00:17:56,880 --> 00:17:59,679
services uh it's not really that great

491
00:17:59,679 --> 00:18:00,240
to

492
00:18:00,240 --> 00:18:02,400
so have four different commands to run

493
00:18:02,400 --> 00:18:04,080
those individual containers and keep

494
00:18:04,080 --> 00:18:04,880
track of them

495
00:18:04,880 --> 00:18:06,960
we want to somehow link them together

496
00:18:06,960 --> 00:18:07,919
also

497
00:18:07,919 --> 00:18:09,760
uh when you run them individually you

498
00:18:09,760 --> 00:18:10,960
have to make sure that they're in the

499
00:18:10,960 --> 00:18:12,799
same virtual network so they can talk to

500
00:18:12,799 --> 00:18:13,440
each other

501
00:18:13,440 --> 00:18:15,600
docker compose takes care of that for

502
00:18:15,600 --> 00:18:17,360
you if you put a service and docker

503
00:18:17,360 --> 00:18:18,240
compose

504
00:18:18,240 --> 00:18:20,000
it's by default going to be on the same

505
00:18:20,000 --> 00:18:22,240
virtual network docker virtual network

506
00:18:22,240 --> 00:18:25,440
as your other services so

507
00:18:25,440 --> 00:18:26,880
it takes care of a lot of the

508
00:18:26,880 --> 00:18:28,640
configuration parts

509
00:18:28,640 --> 00:18:32,559
so we're going to be using uh that

510
00:18:32,559 --> 00:18:35,280
so uh let's have a look actually uh on

511
00:18:35,280 --> 00:18:35,840
uh

512
00:18:35,840 --> 00:18:37,600
at the yaml file that i created for

513
00:18:37,600 --> 00:18:39,440
docker for our project dhaka compose

514
00:18:39,440 --> 00:18:40,400
diamo

515
00:18:40,400 --> 00:18:43,919
that we just talked about um it looks

516
00:18:43,919 --> 00:18:47,840
like this so it's called docker composed

517
00:18:47,840 --> 00:18:49,120
iamo

518
00:18:49,120 --> 00:18:51,120
uh i know it can look a little bit

519
00:18:51,120 --> 00:18:52,720
intimidating if you never worked with

520
00:18:52,720 --> 00:18:54,480
this type of stuff before uh there's a

521
00:18:54,480 --> 00:18:56,480
lot going on a lot of services

522
00:18:56,480 --> 00:18:58,720
but i promise you it's really easy it's

523
00:18:58,720 --> 00:19:00,160
a lot more simple

524
00:19:00,160 --> 00:19:02,559
than it looks uh once you understand the

525
00:19:02,559 --> 00:19:04,880
basic structure and just a few key words

526
00:19:04,880 --> 00:19:05,679
and syntax

527
00:19:05,679 --> 00:19:07,600
uh you'll be good to go to create your

528
00:19:07,600 --> 00:19:10,240
own very easily um

529
00:19:10,240 --> 00:19:14,480
so i'm just gonna quickly go over the

530
00:19:14,480 --> 00:19:18,480
um um

531
00:19:18,480 --> 00:19:20,240
i'm just quickly gonna go over the

532
00:19:20,240 --> 00:19:22,559
syntax here and the structure

533
00:19:22,559 --> 00:19:25,520
so just like python in the indentation

534
00:19:25,520 --> 00:19:26,000
matter

535
00:19:26,000 --> 00:19:29,280
for yamo files in general so as you can

536
00:19:29,280 --> 00:19:29,760
see

537
00:19:29,760 --> 00:19:32,000
this engine x keyword here is kind of

538
00:19:32,000 --> 00:19:33,600
indented inwards

539
00:19:33,600 --> 00:19:36,720
so it's a child of services so

540
00:19:36,720 --> 00:19:39,760
basically all of uh all of uh

541
00:19:39,760 --> 00:19:42,240
uh this is our service tag and

542
00:19:42,240 --> 00:19:43,440
everything inside of it

543
00:19:43,440 --> 00:19:45,919
is a service uh aka it's gonna be our

544
00:19:45,919 --> 00:19:47,440
containers

545
00:19:47,440 --> 00:19:50,720
so um let's look at the common uh fields

546
00:19:50,720 --> 00:19:52,960
that they share all of our services

547
00:19:52,960 --> 00:19:54,799
they all have an image they have ports

548
00:19:54,799 --> 00:19:56,480
they have volumes

549
00:19:56,480 --> 00:19:58,559
um let's take a look at the image so

550
00:19:58,559 --> 00:20:00,160
first of all this tag right here

551
00:20:00,160 --> 00:20:02,640
you can name it whatever you want um it

552
00:20:02,640 --> 00:20:04,320
doesn't really matter it's just the name

553
00:20:04,320 --> 00:20:08,640
for your image for your container sorry

554
00:20:08,640 --> 00:20:11,440
image here is the name of the image that

555
00:20:11,440 --> 00:20:11,840
you

556
00:20:11,840 --> 00:20:15,440
want docker to pull from docker hub so

557
00:20:15,440 --> 00:20:19,120
there's two ways to i guess

558
00:20:19,120 --> 00:20:21,679
create containers from images you can

559
00:20:21,679 --> 00:20:23,360
have images from the docker hub like i

560
00:20:23,360 --> 00:20:23,840
said

561
00:20:23,840 --> 00:20:26,640
or you can have images create images

562
00:20:26,640 --> 00:20:28,240
from docker files

563
00:20:28,240 --> 00:20:29,679
so another alternative would be to

564
00:20:29,679 --> 00:20:32,640
specify here a path to a docker file

565
00:20:32,640 --> 00:20:35,200
if we want to customize this image uh

566
00:20:35,200 --> 00:20:36,240
but we're not doing that

567
00:20:36,240 --> 00:20:37,840
in this example we're taking the app

568
00:20:37,840 --> 00:20:39,360
just the the

569
00:20:39,360 --> 00:20:42,960
the image on the docker files uh on the

570
00:20:42,960 --> 00:20:47,039
docker hub sorry um on all of these

571
00:20:47,039 --> 00:20:49,200
containers so that would be the name of

572
00:20:49,200 --> 00:20:50,240
your image

573
00:20:50,240 --> 00:20:53,280
uh ports so this is port mapping this is

574
00:20:53,280 --> 00:20:54,640
really handy

575
00:20:54,640 --> 00:20:57,919
uh it basically is saying map the port

576
00:20:57,919 --> 00:20:59,440
on my local machine

577
00:20:59,440 --> 00:21:01,440
to the port inside my container so why

578
00:21:01,440 --> 00:21:02,880
is it so handy

579
00:21:02,880 --> 00:21:05,280
because for in this example i'm running

580
00:21:05,280 --> 00:21:07,840
engine x in this container

581
00:21:07,840 --> 00:21:11,360
this uh nginx is uh listening on port 80

582
00:21:11,360 --> 00:21:13,039
inside the container so in order for me

583
00:21:13,039 --> 00:21:15,280
to actually hit this

584
00:21:15,280 --> 00:21:18,000
web web server i would have to specify

585
00:21:18,000 --> 00:21:19,760
the ip of the container

586
00:21:19,760 --> 00:21:22,159
and make a get request to it and stuff

587
00:21:22,159 --> 00:21:24,080
and it gets kind of annoying because

588
00:21:24,080 --> 00:21:26,640
as you spin up your containers bringing

589
00:21:26,640 --> 00:21:27,520
down and up

590
00:21:27,520 --> 00:21:30,000
the ip may not always be the same it's

591
00:21:30,000 --> 00:21:31,679
kind of annoying if you have many many

592
00:21:31,679 --> 00:21:32,640
services to keep

593
00:21:32,640 --> 00:21:35,679
to remember all the ips of your

594
00:21:35,679 --> 00:21:37,039
containers running your different

595
00:21:37,039 --> 00:21:38,000
services

596
00:21:38,000 --> 00:21:39,919
so it's very convenient if i can just

597
00:21:39,919 --> 00:21:41,039
make a get request

598
00:21:41,039 --> 00:21:43,360
to some port on my local machine

599
00:21:43,360 --> 00:21:44,480
localhost

600
00:21:44,480 --> 00:21:47,520
and then have that just hit my

601
00:21:47,520 --> 00:21:50,400
web server on my container so what i'm

602
00:21:50,400 --> 00:21:51,280
doing here

603
00:21:51,280 --> 00:21:55,440
i'm just mapping port 5001 on my machine

604
00:21:55,440 --> 00:21:58,960
to port 80 on the container so that's

605
00:21:58,960 --> 00:22:00,400
pretty cool you can do you can have

606
00:22:00,400 --> 00:22:03,200
multiple chords mapping by the way

607
00:22:03,200 --> 00:22:06,480
uh next is volumes um you can think of

608
00:22:06,480 --> 00:22:08,880
volumes as synced folders

609
00:22:08,880 --> 00:22:11,600
basically uh to keep it simple a volume

610
00:22:11,600 --> 00:22:13,200
is basically just a sync folder syncing

611
00:22:13,200 --> 00:22:14,320
between your host

612
00:22:14,320 --> 00:22:16,880
and your container it's very useful if

613
00:22:16,880 --> 00:22:17,919
you want to copy

614
00:22:17,919 --> 00:22:20,320
files from your host to the container

615
00:22:20,320 --> 00:22:21,200
and and

616
00:22:21,200 --> 00:22:23,280
from your container to your host uh just

617
00:22:23,280 --> 00:22:24,799
transfer files

618
00:22:24,799 --> 00:22:26,640
uh if you are if you're writing things

619
00:22:26,640 --> 00:22:28,799
for a script that you want to

620
00:22:28,799 --> 00:22:31,200
actually execute inside the container

621
00:22:31,200 --> 00:22:32,240
but you don't feel like

622
00:22:32,240 --> 00:22:35,520
ssh-ing into the container uh using them

623
00:22:35,520 --> 00:22:36,400
to write your

624
00:22:36,400 --> 00:22:39,200
your script uh it's kind of a pain you

625
00:22:39,200 --> 00:22:40,000
want to just write

626
00:22:40,000 --> 00:22:41,440
the script on your machine in your

627
00:22:41,440 --> 00:22:43,440
favorite editor but you want it to

628
00:22:43,440 --> 00:22:46,799
just run inside the container

629
00:22:46,799 --> 00:22:49,840
you can just use this volume to have all

630
00:22:49,840 --> 00:22:51,200
of the scripts that you write in that

631
00:22:51,200 --> 00:22:52,640
syncs folder

632
00:22:52,640 --> 00:22:55,600
available for your container uh to use

633
00:22:55,600 --> 00:22:56,240
as well

634
00:22:56,240 --> 00:22:58,159
this is actually a neat example because

635
00:22:58,159 --> 00:23:00,480
um i want to overwrite here the

636
00:23:00,480 --> 00:23:02,240
the default configuration file for my

637
00:23:02,240 --> 00:23:04,080
engine x so

638
00:23:04,080 --> 00:23:06,559
like i said again before you can ssh

639
00:23:06,559 --> 00:23:08,000
into it find the nginx

640
00:23:08,000 --> 00:23:11,919
config manipulate it but i can just

641
00:23:11,919 --> 00:23:14,559
map the folder inside the container here

642
00:23:14,559 --> 00:23:16,159
to another folder here

643
00:23:16,159 --> 00:23:18,880
and it will copy that config file to my

644
00:23:18,880 --> 00:23:21,360
host machine so i can just override it

645
00:23:21,360 --> 00:23:23,600
like just like that so that's pretty

646
00:23:23,600 --> 00:23:25,039
cool

647
00:23:25,039 --> 00:23:28,400
uh notice that uh phpfpm

648
00:23:28,400 --> 00:23:31,520
also has a command

649
00:23:31,919 --> 00:23:36,080
field basically you can also have

650
00:23:36,080 --> 00:23:39,200
uh it's optional but you can also have a

651
00:23:39,200 --> 00:23:41,679
docker run any sort of command once the

652
00:23:41,679 --> 00:23:42,400
container

653
00:23:42,400 --> 00:23:45,120
uh is up and running for you uh this is

654
00:23:45,120 --> 00:23:45,840
not actually

655
00:23:45,840 --> 00:23:47,279
the best way to do this this should

656
00:23:47,279 --> 00:23:49,440
really be happening in your docker file

657
00:23:49,440 --> 00:23:50,880
but let me just show you i'm running

658
00:23:50,880 --> 00:23:52,640
here setup.sh

659
00:23:52,640 --> 00:23:55,600
um it is right here under a honeypot

660
00:23:55,600 --> 00:23:56,559
i'll go i'll go

661
00:23:56,559 --> 00:23:59,200
more into detail why how like what this

662
00:23:59,200 --> 00:24:00,799
we're going to be using the services for

663
00:24:00,799 --> 00:24:01,919
we're going to be using this for our

664
00:24:01,919 --> 00:24:04,159
honeypot to generate some logs for us

665
00:24:04,159 --> 00:24:06,000
i'll get more into that later but this

666
00:24:06,000 --> 00:24:08,240
is the setup file you see i'm just uh

667
00:24:08,240 --> 00:24:10,080
once the container is up and running

668
00:24:10,080 --> 00:24:11,919
i'm installing composer i'm changing

669
00:24:11,919 --> 00:24:14,000
permission doing all that kind of stuff

670
00:24:14,000 --> 00:24:16,400
i could do all that in a docker file

671
00:24:16,400 --> 00:24:17,279
instead

672
00:24:17,279 --> 00:24:18,960
it would be better but it's just a quick

673
00:24:18,960 --> 00:24:21,760
example that i put together

674
00:24:21,760 --> 00:24:24,960
um yeah in that case you would just put

675
00:24:24,960 --> 00:24:26,880
pretty much in your docker file set from

676
00:24:26,880 --> 00:24:30,080
say from php image

677
00:24:30,080 --> 00:24:32,559
and then you know do everything you need

678
00:24:32,559 --> 00:24:34,480
to do in that docker file and specify

679
00:24:34,480 --> 00:24:35,440
the path

680
00:24:35,440 --> 00:24:38,960
here to it all right so that's the basic

681
00:24:38,960 --> 00:24:39,760
structure

682
00:24:39,760 --> 00:24:41,760
uh you see that we have many services so

683
00:24:41,760 --> 00:24:44,080
let me just very quickly explain

684
00:24:44,080 --> 00:24:45,120
what we're going to be using the

685
00:24:45,120 --> 00:24:47,440
services for you guys might be surprised

686
00:24:47,440 --> 00:24:48,320
to see

687
00:24:48,320 --> 00:24:51,200
php fpm and nginx here because that was

688
00:24:51,200 --> 00:24:52,480
not originally a part of

689
00:24:52,480 --> 00:24:55,360
our elk stack but i thought it would be

690
00:24:55,360 --> 00:24:56,960
fun

691
00:24:56,960 --> 00:24:59,200
to basically have something generate

692
00:24:59,200 --> 00:25:00,080
some logs for

693
00:25:00,080 --> 00:25:03,120
us for us to actually analyze uh using

694
00:25:03,120 --> 00:25:03,919
our

695
00:25:03,919 --> 00:25:06,880
elk stack so i thought a honeypot might

696
00:25:06,880 --> 00:25:07,600
be cool

697
00:25:07,600 --> 00:25:09,120
it's just going to be a simple web

698
00:25:09,120 --> 00:25:11,360
server you can use any web server you

699
00:25:11,360 --> 00:25:12,799
like you don't have to use engine x

700
00:25:12,799 --> 00:25:16,559
or php fpm you can use apache

701
00:25:16,559 --> 00:25:19,840
node.js flask django whatever framework

702
00:25:19,840 --> 00:25:20,320
you like

703
00:25:20,320 --> 00:25:23,360
for you know to imitate

704
00:25:23,360 --> 00:25:26,960
uh mimika a simple honeypot its only job

705
00:25:26,960 --> 00:25:29,440
will be to log requests it receives

706
00:25:29,440 --> 00:25:30,720
we're going to make some malicious

707
00:25:30,720 --> 00:25:32,799
requests into that web server it's going

708
00:25:32,799 --> 00:25:34,320
to basically log them

709
00:25:34,320 --> 00:25:36,559
and then send them off to our pipeline

710
00:25:36,559 --> 00:25:37,600
so we can just

711
00:25:37,600 --> 00:25:40,640
see how everything comes together so

712
00:25:40,640 --> 00:25:43,760
this is the role of the nginx and flight

713
00:25:43,760 --> 00:25:48,080
uh php fpm it's gonna be our honeypot

714
00:25:48,080 --> 00:25:49,840
celery is not it doesn't have a

715
00:25:49,840 --> 00:25:51,200
designated image

716
00:25:51,200 --> 00:25:52,720
that it's gonna use it's not gonna if

717
00:25:52,720 --> 00:25:54,400
you look for celery in

718
00:25:54,400 --> 00:25:56,000
the docker hub you're not gonna find an

719
00:25:56,000 --> 00:25:57,760
image for that and the reason for that

720
00:25:57,760 --> 00:25:59,120
is because celery is just a simple

721
00:25:59,120 --> 00:26:00,880
library you install it with the

722
00:26:00,880 --> 00:26:03,840
kip you can say pip install salary uh

723
00:26:03,840 --> 00:26:05,520
you start off with a basic

724
00:26:05,520 --> 00:26:08,720
python image you you install celery

725
00:26:08,720 --> 00:26:11,760
um you install flower i'll when we get

726
00:26:11,760 --> 00:26:12,880
to the salary part

727
00:26:12,880 --> 00:26:16,080
uh in more detail i'll show like the

728
00:26:16,080 --> 00:26:17,760
the setup scripts and stuff like that

729
00:26:17,760 --> 00:26:18,880
what you need to do to get up and

730
00:26:18,880 --> 00:26:20,000
running

731
00:26:20,000 --> 00:26:23,840
um elasticsearch uh like we talked about

732
00:26:23,840 --> 00:26:24,080
it's

733
00:26:24,080 --> 00:26:25,760
setting an environmental variable here

734
00:26:25,760 --> 00:26:27,600
specifying this is a single node this is

735
00:26:27,600 --> 00:26:29,360
just a little test

736
00:26:29,360 --> 00:26:30,720
we're just going to use a single node

737
00:26:30,720 --> 00:26:32,880
here um

738
00:26:32,880 --> 00:26:36,080
uh uh we're gonna expose it on

739
00:26:36,080 --> 00:26:39,120
on port uh 5601

740
00:26:39,120 --> 00:26:40,480
and you can see i even commented out

741
00:26:40,480 --> 00:26:42,799
logstash uh you can use lockstash if you

742
00:26:42,799 --> 00:26:43,360
like

743
00:26:43,360 --> 00:26:46,000
the image is available in fact you can

744
00:26:46,000 --> 00:26:46,640
make this

745
00:26:46,640 --> 00:26:48,799
docker compose your own you can add any

746
00:26:48,799 --> 00:26:50,000
service you like

747
00:26:50,000 --> 00:26:52,159
to this it's very easy it's a matter of

748
00:26:52,159 --> 00:26:53,360
just copy and pasting

749
00:26:53,360 --> 00:26:55,440
it's in the same format grabbing the

750
00:26:55,440 --> 00:26:57,600
image and it's all going to work nicely

751
00:26:57,600 --> 00:26:58,480
on the same

752
00:26:58,480 --> 00:27:03,279
docker network uh it's pretty awesome

753
00:27:03,279 --> 00:27:07,039
so that's the docker compose file

754
00:27:07,039 --> 00:27:09,600
uh i think we are ready to start running

755
00:27:09,600 --> 00:27:11,600
this so let's set this up and this is

756
00:27:11,600 --> 00:27:12,799
actually really cool

757
00:27:12,799 --> 00:27:15,039
you're gonna see this is relatively a

758
00:27:15,039 --> 00:27:17,200
complicated system i mean it has many

759
00:27:17,200 --> 00:27:18,399
services

760
00:27:18,399 --> 00:27:20,399
but just with a single command we'll be

761
00:27:20,399 --> 00:27:21,679
up and running in

762
00:27:21,679 --> 00:27:23,919
less than a minute it's it's really cool

763
00:27:23,919 --> 00:27:24,720
so

764
00:27:24,720 --> 00:27:28,240
let's go to a terminal real quick

765
00:27:28,240 --> 00:27:31,200
get a terminal open here i'm already in

766
00:27:31,200 --> 00:27:33,360
the directory where my docker compose

767
00:27:33,360 --> 00:27:34,240
file is

768
00:27:34,240 --> 00:27:36,720
it's right here um you need to be in

769
00:27:36,720 --> 00:27:39,039
that same directory uh to access this

770
00:27:39,039 --> 00:27:40,240
docker compose

771
00:27:40,240 --> 00:27:42,080
and we're gonna run the simple command

772
00:27:42,080 --> 00:27:43,360
um by the way

773
00:27:43,360 --> 00:27:47,200
um docker has many

774
00:27:47,200 --> 00:27:49,919
i want to show you if you ever curious

775
00:27:49,919 --> 00:27:51,360
about the stuff you can do docker

776
00:27:51,360 --> 00:27:52,880
there's many many many features and

777
00:27:52,880 --> 00:27:54,080
stuff commands

778
00:27:54,080 --> 00:27:55,840
you can just run docker it will display

779
00:27:55,840 --> 00:27:57,520
all the commands for you

780
00:27:57,520 --> 00:28:00,840
so let's run docker compose backer

781
00:28:00,840 --> 00:28:02,159
compose

782
00:28:02,159 --> 00:28:07,039
up to start up our custom up stack

783
00:28:07,039 --> 00:28:08,640
and there it is you can see that it's

784
00:28:08,640 --> 00:28:10,399
trying to pull all the images from the

785
00:28:10,399 --> 00:28:11,120
docker hub

786
00:28:11,120 --> 00:28:13,120
it's super fast in my case because i

787
00:28:13,120 --> 00:28:14,960
already have those images pulled onto my

788
00:28:14,960 --> 00:28:16,240
machine so it was almost

789
00:28:16,240 --> 00:28:19,919
instant but you see it's uh configuring

790
00:28:19,919 --> 00:28:21,360
all the services it's doing

791
00:28:21,360 --> 00:28:23,200
everything it needs to do configuration

792
00:28:23,200 --> 00:28:25,840
setting up users for rabbit

793
00:28:25,840 --> 00:28:28,159
the user is going to be guest password

794
00:28:28,159 --> 00:28:29,120
is also going to be

795
00:28:29,120 --> 00:28:32,399
uh it tells you in the docker hub

796
00:28:32,399 --> 00:28:34,559
page where you got the image from the

797
00:28:34,559 --> 00:28:35,679
defaults

798
00:28:35,679 --> 00:28:38,640
uh it's doing all kinds of uh tedious

799
00:28:38,640 --> 00:28:42,320
stuff that we don't have to do ourselves

800
00:28:42,320 --> 00:28:43,440
so we're just going to give it a second

801
00:28:43,440 --> 00:28:46,880
to finish running should be very quick

802
00:28:53,039 --> 00:28:56,480
all right so

803
00:28:56,480 --> 00:29:00,080
it is almost done uh it seems like

804
00:29:00,080 --> 00:29:04,159
let's see this is our php fpm working

805
00:29:04,159 --> 00:29:06,080
and it's ready to handle connections

806
00:29:06,080 --> 00:29:08,640
that's gonna be our honeypot like i said

807
00:29:08,640 --> 00:29:10,960
so that's cool right and just like that

808
00:29:10,960 --> 00:29:12,000
we're ready to go let's

809
00:29:12,000 --> 00:29:14,880
confirm this let me actually um open a

810
00:29:14,880 --> 00:29:18,240
new tab in my terminal

811
00:29:18,240 --> 00:29:21,120
and um one command you can run with

812
00:29:21,120 --> 00:29:23,120
docker is the ps command to list

813
00:29:23,120 --> 00:29:25,200
all running containers let's see if all

814
00:29:25,200 --> 00:29:27,440
four containers are currently running

815
00:29:27,440 --> 00:29:29,919
and there it is they're all ready to go

816
00:29:29,919 --> 00:29:31,840
we got a unique id for them this is for

817
00:29:31,840 --> 00:29:34,320
example our elasticsearch one we got

818
00:29:34,320 --> 00:29:35,520
some id

819
00:29:35,520 --> 00:29:37,840
uh we can see the port mapping

820
00:29:37,840 --> 00:29:39,039
everything looks great

821
00:29:39,039 --> 00:29:40,480
another little thing that i want to show

822
00:29:40,480 --> 00:29:42,480
you if you're working on a mac uh when

823
00:29:42,480 --> 00:29:43,919
you install docker it comes with a

824
00:29:43,919 --> 00:29:44,640
really cool

825
00:29:44,640 --> 00:29:48,000
um it's called docker um

826
00:29:48,000 --> 00:29:51,520
desktop i believe um

827
00:29:51,520 --> 00:29:54,480
docker desktop it looks like actually

828
00:29:54,480 --> 00:29:55,520
our engine x

829
00:29:55,520 --> 00:29:58,559
failed to start

830
00:29:58,559 --> 00:30:01,679
there it is going to fail

831
00:30:01,679 --> 00:30:05,200
now looks good anyways um with this tool

832
00:30:05,200 --> 00:30:07,120
because we use docker compose it's put

833
00:30:07,120 --> 00:30:08,799
all of our containers under a single

834
00:30:08,799 --> 00:30:09,840
project

835
00:30:09,840 --> 00:30:15,039
um green here is uh indicating that our

836
00:30:15,039 --> 00:30:16,799
individual containers are up and running

837
00:30:16,799 --> 00:30:19,200
you can see which port they're exposing

838
00:30:19,200 --> 00:30:21,520
it's just uh i usually use the command

839
00:30:21,520 --> 00:30:22,480
line for more

840
00:30:22,480 --> 00:30:24,960
um complicated stuff with docker but

841
00:30:24,960 --> 00:30:25,600
just to

842
00:30:25,600 --> 00:30:28,799
start a container restart it delete it

843
00:30:28,799 --> 00:30:31,840
uh see what ports it's really sending on

844
00:30:31,840 --> 00:30:32,080
i

845
00:30:32,080 --> 00:30:33,919
i like to use this little little front

846
00:30:33,919 --> 00:30:35,600
end uh for the mac os

847
00:30:35,600 --> 00:30:38,080
um you can you can even click on the

848
00:30:38,080 --> 00:30:39,120
individual

849
00:30:39,120 --> 00:30:41,760
individual containers you're going to

850
00:30:41,760 --> 00:30:44,320
get specific logs for that one

851
00:30:44,320 --> 00:30:47,600
um you can like i said you can you can

852
00:30:47,600 --> 00:30:48,799
even ssh

853
00:30:48,799 --> 00:30:50,559
into it from here i don't recommend it

854
00:30:50,559 --> 00:30:52,640
though you should use the execute

855
00:30:52,640 --> 00:30:53,200
command

856
00:30:53,200 --> 00:30:56,399
um to get a better terminal it gives you

857
00:30:56,399 --> 00:30:57,840
kind of an ugly terminal

858
00:30:57,840 --> 00:30:59,679
but you can you can open this in a

859
00:30:59,679 --> 00:31:02,080
browser if this is exposing any ports

860
00:31:02,080 --> 00:31:04,399
you can open it in a browser from here

861
00:31:04,399 --> 00:31:06,399
you can delete it restart it stop it all

862
00:31:06,399 --> 00:31:07,760
that kind of stuff you can see more

863
00:31:07,760 --> 00:31:08,880
details about it

864
00:31:08,880 --> 00:31:12,159
the path we can see all kinds of

865
00:31:12,159 --> 00:31:15,440
mounts ports you can see stats so

866
00:31:15,440 --> 00:31:18,799
cpu usage memory usage network

867
00:31:18,799 --> 00:31:21,360
input and output disk read and write

868
00:31:21,360 --> 00:31:22,720
like all kind of really

869
00:31:22,720 --> 00:31:24,720
cool stuff so i i like to use this

870
00:31:24,720 --> 00:31:26,080
little thing

871
00:31:26,080 --> 00:31:28,000
um but anyways it looks like we're good

872
00:31:28,000 --> 00:31:29,600
to go it looks like all of our services

873
00:31:29,600 --> 00:31:30,240
are

874
00:31:30,240 --> 00:31:34,000
running so uh we have a fully functional

875
00:31:34,000 --> 00:31:37,600
outside so let's start off by exploring

876
00:31:37,600 --> 00:31:41,120
uh let's go back to our slides here

877
00:31:41,120 --> 00:31:44,880
slides right here okay

878
00:31:44,880 --> 00:31:46,799
uh let's start exploring all the

879
00:31:46,799 --> 00:31:48,880
individual services

880
00:31:48,880 --> 00:31:50,799
um we're gonna start off with

881
00:31:50,799 --> 00:31:52,559
elasticsearch

882
00:31:52,559 --> 00:31:55,840
um uh

883
00:31:55,840 --> 00:31:57,039
let's start with some general

884
00:31:57,039 --> 00:31:59,519
information about elasticsearch

885
00:31:59,519 --> 00:32:02,320
so like i previously mentioned before

886
00:32:02,320 --> 00:32:04,159
elasticsearch is a highly scalable

887
00:32:04,159 --> 00:32:06,080
search and analytics engine you can also

888
00:32:06,080 --> 00:32:08,000
think of it as a distributed nosql

889
00:32:08,000 --> 00:32:09,120
database

890
00:32:09,120 --> 00:32:12,399
for holding all your logs it is super

891
00:32:12,399 --> 00:32:14,000
fast it can handle really

892
00:32:14,000 --> 00:32:15,919
large amounts of data you can have many

893
00:32:15,919 --> 00:32:17,919
nodes running elastic search

894
00:32:17,919 --> 00:32:21,600
to scale this out you can specifically

895
00:32:21,600 --> 00:32:24,320
assign some nodes to be just pure purely

896
00:32:24,320 --> 00:32:25,440
data nodes

897
00:32:25,440 --> 00:32:27,679
and nodes and thumbnails to just purely

898
00:32:27,679 --> 00:32:28,559
handle search

899
00:32:28,559 --> 00:32:31,360
uh requests and queries really optimize

900
00:32:31,360 --> 00:32:31,919
this

901
00:32:31,919 --> 00:32:33,600
uh you can scale all those nodes with

902
00:32:33,600 --> 00:32:35,200
kubernetes as well

903
00:32:35,200 --> 00:32:38,159
and bring them up and down with ansible

904
00:32:38,159 --> 00:32:39,919
you can really play around with this

905
00:32:39,919 --> 00:32:42,399
uh there are many things uh like like

906
00:32:42,399 --> 00:32:43,360
that you can do

907
00:32:43,360 --> 00:32:45,919
to making a really good uh have a really

908
00:32:45,919 --> 00:32:46,640
good setup

909
00:32:46,640 --> 00:32:50,320
uh going uh just a little bit about the

910
00:32:50,320 --> 00:32:53,600
endpoints uh so api endpoints um you can

911
00:32:53,600 --> 00:32:55,760
interact with elasticsearch using an

912
00:32:55,760 --> 00:32:58,880
api it makes it really easy and

913
00:32:58,880 --> 00:33:00,080
accessible to interact with

914
00:33:00,080 --> 00:33:01,200
elasticsearch

915
00:33:01,200 --> 00:33:04,159
so that's really awesome you could use

916
00:33:04,159 --> 00:33:04,720
curl

917
00:33:04,720 --> 00:33:08,559
you could use any http client

918
00:33:08,559 --> 00:33:10,960
i personally like to use postman uh of

919
00:33:10,960 --> 00:33:12,720
course it makes it easy to interact with

920
00:33:12,720 --> 00:33:14,720
through code because almost any language

921
00:33:14,720 --> 00:33:17,039
out there has some sort of a

922
00:33:17,039 --> 00:33:21,760
http library um

923
00:33:21,760 --> 00:33:23,519
and also another thing is that

924
00:33:23,519 --> 00:33:26,320
elasticsearch uses a nosql like

925
00:33:26,320 --> 00:33:29,120
like architecture if anyone here used

926
00:33:29,120 --> 00:33:30,240
mongodb

927
00:33:30,240 --> 00:33:33,360
before or any other nosql database it is

928
00:33:33,360 --> 00:33:34,880
a very similar in that way

929
00:33:34,880 --> 00:33:37,519
um elasticsearch stores what's called

930
00:33:37,519 --> 00:33:38,799
documents

931
00:33:38,799 --> 00:33:41,919
into another thing uh called index and

932
00:33:41,919 --> 00:33:45,039
if we compare it to an sql syntax an

933
00:33:45,039 --> 00:33:46,640
index will be similar to

934
00:33:46,640 --> 00:33:50,799
a table in as in the sql world

935
00:33:50,799 --> 00:33:52,559
and a document will be very similar to

936
00:33:52,559 --> 00:33:54,559
like a row in a table

937
00:33:54,559 --> 00:33:57,679
uh which is basically an entry so in

938
00:33:57,679 --> 00:33:58,320
addition

939
00:33:58,320 --> 00:34:02,159
um uh in addition to that um

940
00:34:02,159 --> 00:34:04,720
the documents have fields as well which

941
00:34:04,720 --> 00:34:05,279
can be

942
00:34:05,279 --> 00:34:08,800
compared to um sql columns

943
00:34:08,800 --> 00:34:11,760
so every row in sql has some columns

944
00:34:11,760 --> 00:34:13,359
some fields

945
00:34:13,359 --> 00:34:15,839
uh so that's kind of like the same the

946
00:34:15,839 --> 00:34:17,119
same concept here

947
00:34:17,119 --> 00:34:19,918
um also ha also uh documents have

948
00:34:19,918 --> 00:34:21,359
json-like structure

949
00:34:21,359 --> 00:34:24,000
uh which makes it uh very convenient to

950
00:34:24,000 --> 00:34:26,159
to interact with elasticsearch

951
00:34:26,159 --> 00:34:29,440
since it's an api a restful api

952
00:34:29,440 --> 00:34:32,839
uh so that's some general info about um

953
00:34:32,839 --> 00:34:35,280
elasticsearch um so let's let's see how

954
00:34:35,280 --> 00:34:36,719
it works so we have a

955
00:34:36,719 --> 00:34:38,560
we have an elasticsearch setup so let's

956
00:34:38,560 --> 00:34:40,000
let's play around with a little bit

957
00:34:40,000 --> 00:34:43,440
um uh first thing

958
00:34:43,440 --> 00:34:47,040
uh first um what i like to do

959
00:34:47,040 --> 00:34:48,719
since you can interact with

960
00:34:48,719 --> 00:34:50,879
elasticsearch through just basically any

961
00:34:50,879 --> 00:34:51,839
http

962
00:34:51,839 --> 00:34:54,960
client also a browser uh just basically

963
00:34:54,960 --> 00:34:56,719
is making a get request

964
00:34:56,719 --> 00:34:59,359
uh let's uh let's see for elasticsearch

965
00:34:59,359 --> 00:35:00,720
is even up and running

966
00:35:00,720 --> 00:35:04,240
uh with that so if you remember in

967
00:35:04,240 --> 00:35:07,359
my uh docker compose file i

968
00:35:07,359 --> 00:35:10,640
exposed i mapped port 9200

969
00:35:10,640 --> 00:35:14,000
on my machine to port 9200 on the

970
00:35:14,000 --> 00:35:16,079
container that's running elasticsearch

971
00:35:16,079 --> 00:35:17,359
so i should be able to

972
00:35:17,359 --> 00:35:20,720
to hit with a get request on that port

973
00:35:20,720 --> 00:35:23,440
the elasticsearch uh instance so let's

974
00:35:23,440 --> 00:35:25,440
let's do that for my local machine

975
00:35:25,440 --> 00:35:29,200
so local host uh

976
00:35:29,200 --> 00:35:32,560
host on this port right here

977
00:35:32,560 --> 00:35:34,400
so our browser again is just making a

978
00:35:34,400 --> 00:35:36,880
simple get request

979
00:35:36,880 --> 00:35:39,040
and there it is i also have a neat

980
00:35:39,040 --> 00:35:40,160
little add-on

981
00:35:40,160 --> 00:35:42,839
on my google chrome to make this like a

982
00:35:42,839 --> 00:35:45,520
json color-coded thing so that's kind of

983
00:35:45,520 --> 00:35:46,160
fun let me

984
00:35:46,160 --> 00:35:47,839
increase the font so you guys can see

985
00:35:47,839 --> 00:35:50,160
this let me

986
00:35:50,160 --> 00:35:53,200
do this all right so if you see this

987
00:35:53,200 --> 00:35:54,000
tagline

988
00:35:54,000 --> 00:35:56,079
you know for search it means your

989
00:35:56,079 --> 00:35:58,320
elasticsearch is up and running

990
00:35:58,320 --> 00:36:00,400
it's working good we are ready to start

991
00:36:00,400 --> 00:36:02,640
playing around with it so that's awesome

992
00:36:02,640 --> 00:36:04,880
um i'm not going to be using just the

993
00:36:04,880 --> 00:36:06,640
browser for all of my

994
00:36:06,640 --> 00:36:10,079
http requests and hitting the npi

995
00:36:10,079 --> 00:36:12,400
api endpoints of elastic because i want

996
00:36:12,400 --> 00:36:14,000
to make some post requests and some put

997
00:36:14,000 --> 00:36:16,000
requests and stuff like that and it just

998
00:36:16,000 --> 00:36:18,079
i really like to use a tool called

999
00:36:18,079 --> 00:36:20,560
postman so you're going to be using that

1000
00:36:20,560 --> 00:36:23,839
right now this is postman

1001
00:36:23,839 --> 00:36:26,960
for those who never used it before it's

1002
00:36:26,960 --> 00:36:27,920
a very awesome tool

1003
00:36:27,920 --> 00:36:31,040
just helps you make http um requests you

1004
00:36:31,040 --> 00:36:32,480
can also use curl but i like to have a

1005
00:36:32,480 --> 00:36:34,000
nice ui

1006
00:36:34,000 --> 00:36:37,200
um postman also allows me to i guess uh

1007
00:36:37,200 --> 00:36:38,880
kind of save my requests

1008
00:36:38,880 --> 00:36:42,160
also so i prepared a few um postman is

1009
00:36:42,160 --> 00:36:42,640
pretty cool

1010
00:36:42,640 --> 00:36:45,440
i like it a lot so the first thing that

1011
00:36:45,440 --> 00:36:47,359
we're going to be doing with the lasted

1012
00:36:47,359 --> 00:36:47,920
search

1013
00:36:47,920 --> 00:36:51,839
is um we're going to hit the

1014
00:36:51,839 --> 00:36:54,560
uh we're going to use a put request uh

1015
00:36:54,560 --> 00:36:56,079
here let me make it bigger so you guys

1016
00:36:56,079 --> 00:36:57,440
can see

1017
00:36:57,440 --> 00:37:00,320
i think that's good okay uh so i'm using

1018
00:37:00,320 --> 00:37:01,359
a put request

1019
00:37:01,359 --> 00:37:04,000
i'm hitting here the elastic search

1020
00:37:04,000 --> 00:37:05,119
endpoint

1021
00:37:05,119 --> 00:37:07,599
and i'm just gonna put a random name of

1022
00:37:07,599 --> 00:37:09,680
an index because my goal is to create an

1023
00:37:09,680 --> 00:37:10,560
index right now

1024
00:37:10,560 --> 00:37:14,000
in the sql world i'm

1025
00:37:14,000 --> 00:37:15,520
making a table that's the first thing

1026
00:37:15,520 --> 00:37:17,119
you do you want a table to store all

1027
00:37:17,119 --> 00:37:17,760
your data

1028
00:37:17,760 --> 00:37:19,839
so that's what i'm doing i'm creating an

1029
00:37:19,839 --> 00:37:21,359
index i'm going to call it test

1030
00:37:21,359 --> 00:37:23,440
index the way it's done is with a put

1031
00:37:23,440 --> 00:37:25,200
request name of your index

1032
00:37:25,200 --> 00:37:28,400
and that's really all there is to it so

1033
00:37:28,400 --> 00:37:30,960
let's uh send this request i'm going to

1034
00:37:30,960 --> 00:37:32,320
click send

1035
00:37:32,320 --> 00:37:35,200
and get a response it's in json

1036
00:37:35,200 --> 00:37:36,160
acknowledged

1037
00:37:36,160 --> 00:37:38,880
true this is the name of the index so we

1038
00:37:38,880 --> 00:37:39,920
officially made an

1039
00:37:39,920 --> 00:37:43,839
index in on our elasticsearch

1040
00:37:43,839 --> 00:37:47,760
so that's pretty cool um

1041
00:37:47,760 --> 00:37:50,320
next the second request that i have

1042
00:37:50,320 --> 00:37:51,520
prepared here

1043
00:37:51,520 --> 00:37:53,920
uh we're gonna create mapping something

1044
00:37:53,920 --> 00:37:55,520
called mappings

1045
00:37:55,520 --> 00:37:57,520
to our index and what do i mean by that

1046
00:37:57,520 --> 00:37:59,839
so you know how in sql for example

1047
00:37:59,839 --> 00:38:02,000
we specify that this particular field is

1048
00:38:02,000 --> 00:38:03,040
type uh

1049
00:38:03,040 --> 00:38:06,079
text or type love or type

1050
00:38:06,079 --> 00:38:09,599
of character or whatever

1051
00:38:09,599 --> 00:38:11,599
in elasticsearch we don't have to

1052
00:38:11,599 --> 00:38:14,560
specify the mappings but

1053
00:38:14,560 --> 00:38:16,640
it is nice to do so because if we don't

1054
00:38:16,640 --> 00:38:18,320
elasticsearch will guess

1055
00:38:18,320 --> 00:38:21,599
what type of um

1056
00:38:21,599 --> 00:38:23,440
what the type that this field should be

1057
00:38:23,440 --> 00:38:24,800
it can assign a

1058
00:38:24,800 --> 00:38:26,720
type string where you really want it to

1059
00:38:26,720 --> 00:38:28,079
be like a number

1060
00:38:28,079 --> 00:38:29,839
yeah it's always a good practice to

1061
00:38:29,839 --> 00:38:31,920
assign mappings first and also in order

1062
00:38:31,920 --> 00:38:33,760
to view the data and discover

1063
00:38:33,760 --> 00:38:35,119
which is in kibana we're going to get

1064
00:38:35,119 --> 00:38:37,119
into that later you would need to have

1065
00:38:37,119 --> 00:38:37,680
at least

1066
00:38:37,680 --> 00:38:40,240
one date type field so we're going to do

1067
00:38:40,240 --> 00:38:43,279
that through our mapping

1068
00:38:43,599 --> 00:38:46,320
mapping is again it's a put request the

1069
00:38:46,320 --> 00:38:47,200
syntax is

1070
00:38:47,200 --> 00:38:49,200
you would specify the index number that

1071
00:38:49,200 --> 00:38:50,960
you would want to put your mappings on

1072
00:38:50,960 --> 00:38:53,839
basically specifying the types that this

1073
00:38:53,839 --> 00:38:54,720
uh

1074
00:38:54,720 --> 00:38:57,200
book the h document inside the index

1075
00:38:57,200 --> 00:38:58,400
will contain

1076
00:38:58,400 --> 00:39:01,920
and in a json uh body um

1077
00:39:01,920 --> 00:39:03,680
you would just specify the types and the

1078
00:39:03,680 --> 00:39:05,680
fields that you're interested in

1079
00:39:05,680 --> 00:39:08,320
so in our case i want to set a timestamp

1080
00:39:08,320 --> 00:39:10,079
it's gonna be typed date

1081
00:39:10,079 --> 00:39:12,800
uh i'm gonna i want an age an email and

1082
00:39:12,800 --> 00:39:13,359
a name

1083
00:39:13,359 --> 00:39:15,599
the age will be an integer the email and

1084
00:39:15,599 --> 00:39:16,800
name are going to be text

1085
00:39:16,800 --> 00:39:18,960
so this way elasticsearch is going to

1086
00:39:18,960 --> 00:39:20,240
know store those

1087
00:39:20,240 --> 00:39:24,400
as this type so let's

1088
00:39:24,400 --> 00:39:27,359
let's send the request and acknowledge

1089
00:39:27,359 --> 00:39:28,400
true

1090
00:39:28,400 --> 00:39:30,320
so that's cool so we officially have

1091
00:39:30,320 --> 00:39:31,599
mappings in our new

1092
00:39:31,599 --> 00:39:34,640
created index now uh the next thing we

1093
00:39:34,640 --> 00:39:36,640
want to do is confirm that the mappings

1094
00:39:36,640 --> 00:39:37,359
works

1095
00:39:37,359 --> 00:39:39,280
and we can hit the same endpoint just

1096
00:39:39,280 --> 00:39:41,280
with a get request instead of a put with

1097
00:39:41,280 --> 00:39:42,240
an empty body

1098
00:39:42,240 --> 00:39:44,880
to receive uh the mappings that the

1099
00:39:44,880 --> 00:39:45,839
index currently

1100
00:39:45,839 --> 00:39:48,079
is using so let's confirm that our

1101
00:39:48,079 --> 00:39:49,920
mappings are set up properly

1102
00:39:49,920 --> 00:39:52,240
i clicked on send and there it is those

1103
00:39:52,240 --> 00:39:54,160
are the end this is the mapping for our

1104
00:39:54,160 --> 00:39:56,000
index so as you can see everything looks

1105
00:39:56,000 --> 00:40:00,720
great okay we can move on and actually

1106
00:40:00,720 --> 00:40:04,160
uh create some data for this table aka

1107
00:40:04,160 --> 00:40:07,200
index to hold now right

1108
00:40:07,200 --> 00:40:09,599
uh we would need to create a new

1109
00:40:09,599 --> 00:40:10,640
document

1110
00:40:10,640 --> 00:40:13,680
so i'm going to use a post request this

1111
00:40:13,680 --> 00:40:14,319
time

1112
00:40:14,319 --> 00:40:16,160
you can see how nice it is to interact

1113
00:40:16,160 --> 00:40:17,599
with elastic just to our

1114
00:40:17,599 --> 00:40:20,960
api it's very easy um you spell

1115
00:40:20,960 --> 00:40:23,119
i'm specifying here the name of the

1116
00:40:23,119 --> 00:40:24,079
index i would like

1117
00:40:24,079 --> 00:40:28,000
to create this document uh for

1118
00:40:28,000 --> 00:40:31,280
and i'm gonna hit the doc endpoint

1119
00:40:31,280 --> 00:40:33,520
i can also specify an id for the

1120
00:40:33,520 --> 00:40:34,880
document like

1121
00:40:34,880 --> 00:40:36,960
but i'm not gonna do that because i want

1122
00:40:36,960 --> 00:40:38,960
elasticsearch to automatically

1123
00:40:38,960 --> 00:40:42,880
assign an id for my uh document

1124
00:40:42,880 --> 00:40:44,560
in the body of course you will put your

1125
00:40:44,560 --> 00:40:47,520
actual data for your document to hold

1126
00:40:47,520 --> 00:40:50,880
so you see timestamp name age and email

1127
00:40:50,880 --> 00:40:54,160
like our mapping is expecting um

1128
00:40:54,160 --> 00:40:56,079
this is in milliseconds this is actually

1129
00:40:56,079 --> 00:40:57,760
all that updated

1130
00:40:57,760 --> 00:41:00,319
i want this to be current so a little

1131
00:41:00,319 --> 00:41:01,760
website that i like to use

1132
00:41:01,760 --> 00:41:04,880
for converting current time into

1133
00:41:04,880 --> 00:41:08,000
milliseconds is this i would save up

1134
00:41:08,000 --> 00:41:09,520
here

1135
00:41:09,520 --> 00:41:11,680
it's a cool website uh just for the sake

1136
00:41:11,680 --> 00:41:12,720
of our example

1137
00:41:12,720 --> 00:41:16,800
uh let's convert human date to timestamp

1138
00:41:16,800 --> 00:41:18,240
there it is i even have it in

1139
00:41:18,240 --> 00:41:20,720
milliseconds and it's ready to go for me

1140
00:41:20,720 --> 00:41:22,880
so i'm just going to copy this

1141
00:41:22,880 --> 00:41:26,319
i'll exit this website go back to

1142
00:41:26,319 --> 00:41:27,119
postman

1143
00:41:27,119 --> 00:41:30,720
close my little notes here

1144
00:41:30,720 --> 00:41:34,480
and i'll copy this timestamp that should

1145
00:41:34,480 --> 00:41:35,280
be

1146
00:41:35,280 --> 00:41:38,000
the current time in milliseconds all

1147
00:41:38,000 --> 00:41:39,119
right

1148
00:41:39,119 --> 00:41:41,839
so we're ready to create this uh

1149
00:41:41,839 --> 00:41:42,880
document

1150
00:41:42,880 --> 00:41:45,680
let's click send make the post request

1151
00:41:45,680 --> 00:41:47,520
we get some messages back

1152
00:41:47,520 --> 00:41:50,560
so where was this uh

1153
00:41:50,560 --> 00:41:53,599
document created on this index this is

1154
00:41:53,599 --> 00:41:55,520
the unique id that was generated for us

1155
00:41:55,520 --> 00:41:57,839
since we didn't specify one

1156
00:41:57,839 --> 00:42:00,240
results created it was successful

1157
00:42:00,240 --> 00:42:02,960
everything looks great in fact

1158
00:42:02,960 --> 00:42:05,359
let's go back to our browser real quick

1159
00:42:05,359 --> 00:42:06,400
and

1160
00:42:06,400 --> 00:42:09,599
just hit this the the index name

1161
00:42:09,599 --> 00:42:11,119
first of all we have to specify i want

1162
00:42:11,119 --> 00:42:13,119
to view the document in here

1163
00:42:13,119 --> 00:42:15,200
so just to prove that like you can you

1164
00:42:15,200 --> 00:42:18,160
can use any http client that you want

1165
00:42:18,160 --> 00:42:21,520
so uh we called it i believe test index

1166
00:42:21,520 --> 00:42:22,480
and i'm gonna hit

1167
00:42:22,480 --> 00:42:25,119
the search endpoint again our browser is

1168
00:42:25,119 --> 00:42:27,440
just making a get request

1169
00:42:27,440 --> 00:42:30,720
and there it is we can see here um

1170
00:42:30,720 --> 00:42:34,720
our document it's inside our index so

1171
00:42:34,720 --> 00:42:38,240
very cool we created a document

1172
00:42:38,240 --> 00:42:41,839
um awesome while we're at it

1173
00:42:41,839 --> 00:42:44,880
let's create another um and

1174
00:42:44,880 --> 00:42:46,400
uh i made a little example to show that

1175
00:42:46,400 --> 00:42:48,480
you can search and get the index here

1176
00:42:48,480 --> 00:42:50,400
and the same thing from our browser get

1177
00:42:50,400 --> 00:42:52,560
request to our search endpoint

1178
00:42:52,560 --> 00:42:55,839
here it is all right so uh if we already

1179
00:42:55,839 --> 00:42:56,839
here

1180
00:42:56,839 --> 00:43:00,480
um if you're already here

1181
00:43:00,480 --> 00:43:02,720
uh let's also create the index our

1182
00:43:02,720 --> 00:43:04,800
honeypot example is gonna be using since

1183
00:43:04,800 --> 00:43:06,640
we are gonna actually

1184
00:43:06,640 --> 00:43:10,240
um be using this this index let's call

1185
00:43:10,240 --> 00:43:11,920
uh let's create a new index let's call

1186
00:43:11,920 --> 00:43:12,800
it honeypot

1187
00:43:12,800 --> 00:43:15,280
this time it's again a quick request

1188
00:43:15,280 --> 00:43:16,560
with the honeypot

1189
00:43:16,560 --> 00:43:20,880
name name of our index let's create

1190
00:43:20,880 --> 00:43:23,680
there it is we created a honeypot index

1191
00:43:23,680 --> 00:43:25,520
let's add the mappings again

1192
00:43:25,520 --> 00:43:27,520
i'm not going to add every field that

1193
00:43:27,520 --> 00:43:29,520
we're going to be login but i do want to

1194
00:43:29,520 --> 00:43:30,319
add

1195
00:43:30,319 --> 00:43:33,440
a date field so we can make this uh

1196
00:43:33,440 --> 00:43:36,160
viewable on kibana later on so you'll

1197
00:43:36,160 --> 00:43:37,040
see why

1198
00:43:37,040 --> 00:43:40,400
when we get to that to that kibana part

1199
00:43:40,400 --> 00:43:42,400
so i'm going to specify that it's going

1200
00:43:42,400 --> 00:43:44,000
to have a timestamp called

1201
00:43:44,000 --> 00:43:46,960
date and again i'm making a put request

1202
00:43:46,960 --> 00:43:49,680
to the mapping endpoint

1203
00:43:49,680 --> 00:43:52,640
there it is we have our mappings all

1204
00:43:52,640 --> 00:43:53,119
right

1205
00:43:53,119 --> 00:43:55,839
so this is the basics uh that we're

1206
00:43:55,839 --> 00:43:57,680
gonna be looking at with elastic

1207
00:43:57,680 --> 00:44:00,960
let's go back to our slides and next i

1208
00:44:00,960 --> 00:44:02,800
would like to talk about

1209
00:44:02,800 --> 00:44:04,640
the fake honey pot that we're gonna be

1210
00:44:04,640 --> 00:44:08,960
setting up

1211
00:44:08,960 --> 00:44:12,640
all right so uh that's that's the one

1212
00:44:12,640 --> 00:44:14,160
that we looked at on the dot com compose

1213
00:44:14,160 --> 00:44:16,800
the nginx and the flight and the php fpm

1214
00:44:16,800 --> 00:44:18,800
again you can use whichever framework

1215
00:44:18,800 --> 00:44:20,720
you like for your web server

1216
00:44:20,720 --> 00:44:23,200
so we previously set up a simple web

1217
00:44:23,200 --> 00:44:23,760
server

1218
00:44:23,760 --> 00:44:27,520
using our docker compose

1219
00:44:28,079 --> 00:44:31,119
file this web this web server is going

1220
00:44:31,119 --> 00:44:32,480
to act as our honeypot

1221
00:44:32,480 --> 00:44:34,319
the honeypot is going to generate some

1222
00:44:34,319 --> 00:44:35,520
logs for us to use

1223
00:44:35,520 --> 00:44:37,599
so we can feed those into our elk uh

1224
00:44:37,599 --> 00:44:38,720
pipeline

1225
00:44:38,720 --> 00:44:41,040
we're going to mimic an attacker and

1226
00:44:41,040 --> 00:44:42,960
make some malicious requests

1227
00:44:42,960 --> 00:44:44,720
to our web server in the hopes of

1228
00:44:44,720 --> 00:44:46,079
infecting it

1229
00:44:46,079 --> 00:44:48,000
our web server also known as our

1230
00:44:48,000 --> 00:44:49,200
honeypot we log

1231
00:44:49,200 --> 00:44:51,440
all the incoming requests as logs which

1232
00:44:51,440 --> 00:44:53,680
we will then analyze uh with our elk

1233
00:44:53,680 --> 00:44:54,720
stack

1234
00:44:54,720 --> 00:44:57,359
so this is what we're going to be using

1235
00:44:57,359 --> 00:44:58,400
engine x for

1236
00:44:58,400 --> 00:45:01,440
and yeah so um

1237
00:45:01,440 --> 00:45:03,680
before i talk about rabbit mq and celery

1238
00:45:03,680 --> 00:45:05,200
i actually want to briefly show you the

1239
00:45:05,200 --> 00:45:05,760
code

1240
00:45:05,760 --> 00:45:08,240
uh just a snippet of how the honeypot is

1241
00:45:08,240 --> 00:45:10,240
going to work it's very simple

1242
00:45:10,240 --> 00:45:14,400
uh let me go to atom real quick

1243
00:45:14,400 --> 00:45:17,680
there it is let's go to honeypot and

1244
00:45:17,680 --> 00:45:19,839
index.php all requests are going to be

1245
00:45:19,839 --> 00:45:22,319
forwarded by nginx into this

1246
00:45:22,319 --> 00:45:25,200
little function right here on any route

1247
00:45:25,200 --> 00:45:26,160
all we're doing

1248
00:45:26,160 --> 00:45:29,520
is right here receiving the request

1249
00:45:29,520 --> 00:45:32,640
logging it and then sending it off right

1250
00:45:32,640 --> 00:45:33,520
here

1251
00:45:33,520 --> 00:45:36,720
to our rabbit mq

1252
00:45:36,720 --> 00:45:40,240
so very simple um

1253
00:45:40,240 --> 00:45:42,160
we'll we'll take a look at that soon uh

1254
00:45:42,160 --> 00:45:43,760
again once we start talking about it in

1255
00:45:43,760 --> 00:45:44,319
q

1256
00:45:44,319 --> 00:45:48,400
um so yeah let's go back to our slides

1257
00:45:48,400 --> 00:45:51,440
slides rabbit mq and uh

1258
00:45:51,440 --> 00:45:55,359
celery so first of all after you

1259
00:45:55,359 --> 00:45:57,680
start the code you saw in on our

1260
00:45:57,680 --> 00:45:59,920
honeypot uh you might be wondering why

1261
00:45:59,920 --> 00:46:02,400
are we even using rabbitmq

1262
00:46:02,400 --> 00:46:03,760
why are we sending those logs from our

1263
00:46:03,760 --> 00:46:05,599
honeypot to a rabbit and queue rather

1264
00:46:05,599 --> 00:46:06,560
than

1265
00:46:06,560 --> 00:46:08,319
just sending the logs straight from our

1266
00:46:08,319 --> 00:46:10,480
honeypot to elasticsearch directly

1267
00:46:10,480 --> 00:46:13,839
using http um

1268
00:46:13,839 --> 00:46:16,560
well you definitely can send the logs

1269
00:46:16,560 --> 00:46:18,240
directly to elasticsearch and not use

1270
00:46:18,240 --> 00:46:19,760
rabbitmq

1271
00:46:19,760 --> 00:46:22,160
but the benefits of sending the logs to

1272
00:46:22,160 --> 00:46:23,839
rabbitmq first

1273
00:46:23,839 --> 00:46:25,520
is that rabbit enqueue can act as a

1274
00:46:25,520 --> 00:46:27,200
buffer

1275
00:46:27,200 --> 00:46:30,000
um so let's say that your web server is

1276
00:46:30,000 --> 00:46:31,280
under a lot of load

1277
00:46:31,280 --> 00:46:34,400
and maybe even uh crashes um

1278
00:46:34,400 --> 00:46:36,240
these logs are going to stay in rabbitmq

1279
00:46:36,240 --> 00:46:38,480
and won't be lost also you can consume

1280
00:46:38,480 --> 00:46:40,480
from rabbit mq

1281
00:46:40,480 --> 00:46:42,560
at your own pace using multiple uh

1282
00:46:42,560 --> 00:46:44,079
salary workers

1283
00:46:44,079 --> 00:46:46,240
uh the salary workers uh like i said

1284
00:46:46,240 --> 00:46:48,400
before uh can then out of scale the

1285
00:46:48,400 --> 00:46:50,240
number of workers that they're gonna be

1286
00:46:50,240 --> 00:46:52,319
using at any given point based on the

1287
00:46:52,319 --> 00:46:53,280
load

1288
00:46:53,280 --> 00:46:55,839
uh so this way you have great control

1289
00:46:55,839 --> 00:46:57,839
over the consumption rate and handling

1290
00:46:57,839 --> 00:46:58,960
large bursts

1291
00:46:58,960 --> 00:47:01,119
of incoming uh requests so let's say

1292
00:47:01,119 --> 00:47:02,319
some attacker

1293
00:47:02,319 --> 00:47:04,560
is spamming our honeypot with like a

1294
00:47:04,560 --> 00:47:06,319
bunch of metasploits

1295
00:47:06,319 --> 00:47:09,920
attempts um it might be a lot uh for us

1296
00:47:09,920 --> 00:47:10,960
to just

1297
00:47:10,960 --> 00:47:13,280
send off like that to elastic uh it's

1298
00:47:13,280 --> 00:47:14,880
it's better to have a middleman

1299
00:47:14,880 --> 00:47:16,720
to manage all that force it takes a lot

1300
00:47:16,720 --> 00:47:19,200
of load of our actual honeypot

1301
00:47:19,200 --> 00:47:23,280
it's a load off of it um

1302
00:47:23,280 --> 00:47:27,200
so um yeah uh so uh it really helps our

1303
00:47:27,200 --> 00:47:28,079
system scale

1304
00:47:28,079 --> 00:47:31,520
basically um in the rabbitmq and celery

1305
00:47:31,520 --> 00:47:32,079
setup

1306
00:47:32,079 --> 00:47:34,400
um we can also basically treat each log

1307
00:47:34,400 --> 00:47:35,680
as its own task

1308
00:47:35,680 --> 00:47:38,079
and track each individual task using the

1309
00:47:38,079 --> 00:47:39,440
celery flower

1310
00:47:39,440 --> 00:47:41,200
uh web ui that i talked about i'm going

1311
00:47:41,200 --> 00:47:45,040
to show it soon it's super handy

1312
00:47:46,559 --> 00:47:48,559
and another great thing is that if a

1313
00:47:48,559 --> 00:47:50,240
worker crashes in the middle of handling

1314
00:47:50,240 --> 00:47:51,040
a task

1315
00:47:51,040 --> 00:47:53,760
uh it's not popped off the queue so

1316
00:47:53,760 --> 00:47:55,680
another worker would just come come in

1317
00:47:55,680 --> 00:47:58,720
and and take that task uh workers uh

1318
00:47:58,720 --> 00:48:00,319
generally speaking they should send an

1319
00:48:00,319 --> 00:48:01,599
app back to rabbitmq

1320
00:48:01,599 --> 00:48:04,079
before getting rid of the tasks so if it

1321
00:48:04,079 --> 00:48:04,640
crashed

1322
00:48:04,640 --> 00:48:06,880
no act was received technically it

1323
00:48:06,880 --> 00:48:08,319
should be picked up

1324
00:48:08,319 --> 00:48:10,319
by a different worker there's different

1325
00:48:10,319 --> 00:48:11,599
settings you can play with in order to

1326
00:48:11,599 --> 00:48:13,119
make that happen but

1327
00:48:13,119 --> 00:48:15,760
uh it provides us a lot more i guess

1328
00:48:15,760 --> 00:48:17,680
options to to

1329
00:48:17,680 --> 00:48:21,119
into our pipeline um

1330
00:48:21,119 --> 00:48:24,160
cool so now let's show how it works uh

1331
00:48:24,160 --> 00:48:26,400
let's look at rabbitmq

1332
00:48:26,400 --> 00:48:27,599
let's start off by looking at the

1333
00:48:27,599 --> 00:48:29,760
rabbitmq management tool

1334
00:48:29,760 --> 00:48:31,359
and let's create what's called an

1335
00:48:31,359 --> 00:48:33,760
exchange and bind it to a queue

1336
00:48:33,760 --> 00:48:36,640
so the way rabbitmq works uh which is

1337
00:48:36,640 --> 00:48:38,079
again a message broker it's going to

1338
00:48:38,079 --> 00:48:39,359
hold our cue

1339
00:48:39,359 --> 00:48:42,640
um it it kind of works in a way that

1340
00:48:42,640 --> 00:48:45,760
um it has like a consumer

1341
00:48:45,760 --> 00:48:48,880
and producer kind of like set up where

1342
00:48:48,880 --> 00:48:51,200
the person that the application sending

1343
00:48:51,200 --> 00:48:51,920
the message

1344
00:48:51,920 --> 00:48:54,800
is going to be the producer and the one

1345
00:48:54,800 --> 00:48:56,559
reading the message will kind of act as

1346
00:48:56,559 --> 00:48:57,760
your consumer

1347
00:48:57,760 --> 00:49:00,240
so let me expand on that a little bit

1348
00:49:00,240 --> 00:49:03,759
more let's go to a rabbit mq

1349
00:49:04,960 --> 00:49:07,920
rabbit mq container we map the ports

1350
00:49:07,920 --> 00:49:09,520
again from the container

1351
00:49:09,520 --> 00:49:12,720
to the local host the password is guest

1352
00:49:12,720 --> 00:49:15,760
guest is specified on docker hub when

1353
00:49:15,760 --> 00:49:16,079
you

1354
00:49:16,079 --> 00:49:18,400
pull the image you can take a look there

1355
00:49:18,400 --> 00:49:20,400
let's log in

1356
00:49:20,400 --> 00:49:23,280
and you see we have this awesome uh web

1357
00:49:23,280 --> 00:49:26,240
tool here that we can monitor

1358
00:49:26,240 --> 00:49:29,440
our cues our connections channels i'll

1359
00:49:29,440 --> 00:49:30,640
get more into all that

1360
00:49:30,640 --> 00:49:33,839
uh soon but uh just the basics the

1361
00:49:33,839 --> 00:49:34,480
important

1362
00:49:34,480 --> 00:49:38,079
part is that um you

1363
00:49:38,079 --> 00:49:40,640
as a producer you would publish messages

1364
00:49:40,640 --> 00:49:42,400
uh to an exchange

1365
00:49:42,400 --> 00:49:44,880
this exchange is then binded to some

1366
00:49:44,880 --> 00:49:46,720
cues it can be many cues

1367
00:49:46,720 --> 00:49:48,640
and it will just basically pass those

1368
00:49:48,640 --> 00:49:50,000
messages to a queue

1369
00:49:50,000 --> 00:49:53,599
which your consumer is then grabbing

1370
00:49:53,599 --> 00:49:58,240
basically consuming um that's really um

1371
00:49:58,240 --> 00:50:01,440
uh what you need to know um

1372
00:50:01,440 --> 00:50:04,480
it's uh it's it's it's super fast it's

1373
00:50:04,480 --> 00:50:05,119
awesome

1374
00:50:05,119 --> 00:50:07,920
it can handle tons of messages in near

1375
00:50:07,920 --> 00:50:09,760
real time it's really powerful

1376
00:50:09,760 --> 00:50:12,960
so um let's create uh

1377
00:50:12,960 --> 00:50:15,599
our first exchange are we gonna be post

1378
00:50:15,599 --> 00:50:17,040
that our honeypot

1379
00:50:17,040 --> 00:50:20,160
sorry yeah our honeypot aka web server

1380
00:50:20,160 --> 00:50:23,680
will uh publish messages

1381
00:50:23,680 --> 00:50:26,720
too right so we can click here on add

1382
00:50:26,720 --> 00:50:28,559
new exchange

1383
00:50:28,559 --> 00:50:31,920
we'll call it honeypot right there

1384
00:50:31,920 --> 00:50:33,280
we can play with the settings there's

1385
00:50:33,280 --> 00:50:34,640
tons of things you can do it's very

1386
00:50:34,640 --> 00:50:36,240
powerful but let's just keep it simple

1387
00:50:36,240 --> 00:50:38,079
for now let's just create a basic

1388
00:50:38,079 --> 00:50:39,040
exchange

1389
00:50:39,040 --> 00:50:42,079
it's called honeypot ad exchange you can

1390
00:50:42,079 --> 00:50:43,920
see here that i have a new exchange

1391
00:50:43,920 --> 00:50:45,200
added

1392
00:50:45,200 --> 00:50:47,280
but this looks this exchange is not

1393
00:50:47,280 --> 00:50:49,200
mapped it's not binded to any queue

1394
00:50:49,200 --> 00:50:50,720
right now so let's go ahead and create a

1395
00:50:50,720 --> 00:50:52,839
queue for it we'll go to the queue tab

1396
00:50:52,839 --> 00:50:54,240
here

1397
00:50:54,240 --> 00:50:57,920
um and we'll just create

1398
00:50:57,920 --> 00:51:00,720
uh add a new queue so let's do that

1399
00:51:00,720 --> 00:51:02,400
let's call it honeypot as well just to

1400
00:51:02,400 --> 00:51:03,760
keep things simple

1401
00:51:03,760 --> 00:51:05,680
you can see all the cool features i'll

1402
00:51:05,680 --> 00:51:09,280
expire messages time to live uh

1403
00:51:09,280 --> 00:51:11,359
durable not durable all kinds of stuff

1404
00:51:11,359 --> 00:51:12,720
you can we can do here but

1405
00:51:12,720 --> 00:51:14,559
let's keep it simple for now we're going

1406
00:51:14,559 --> 00:51:16,640
to add the cue

1407
00:51:16,640 --> 00:51:19,040
there it is a new cuco honeypot let's

1408
00:51:19,040 --> 00:51:20,160
click on it

1409
00:51:20,160 --> 00:51:21,920
we can see here a nice visual of

1410
00:51:21,920 --> 00:51:24,319
messages coming in and out um

1411
00:51:24,319 --> 00:51:26,400
if they're ready to go if they're not we

1412
00:51:26,400 --> 00:51:28,160
can even see how many consumers are

1413
00:51:28,160 --> 00:51:29,920
consuming from the queue it's currently

1414
00:51:29,920 --> 00:51:30,960
zero

1415
00:51:30,960 --> 00:51:32,960
no consumers but i want to take a look

1416
00:51:32,960 --> 00:51:35,040
at this section called binding

1417
00:51:35,040 --> 00:51:38,000
so this is where we would bind our

1418
00:51:38,000 --> 00:51:38,720
exchange

1419
00:51:38,720 --> 00:51:41,439
to over here

1420
00:51:42,720 --> 00:51:46,000
so let's do that right now um

1421
00:51:46,000 --> 00:51:48,160
let's add let's uh let's add the

1422
00:51:48,160 --> 00:51:49,760
exchange that we want this cue to be

1423
00:51:49,760 --> 00:51:50,480
binded to

1424
00:51:50,480 --> 00:51:52,720
we call the honeypot if you remember

1425
00:51:52,720 --> 00:51:54,160
let's add some routing key

1426
00:51:54,160 --> 00:51:56,400
it can be anything i'm just going to use

1427
00:51:56,400 --> 00:51:57,520
test key

1428
00:51:57,520 --> 00:52:00,079
that's going to bind our exchange to our

1429
00:52:00,079 --> 00:52:00,720
queue

1430
00:52:00,720 --> 00:52:03,280
and click on bind and just like that

1431
00:52:03,280 --> 00:52:04,319
every message

1432
00:52:04,319 --> 00:52:06,000
is going to hit or exchange will be

1433
00:52:06,000 --> 00:52:07,839
forwarded to our queue

1434
00:52:07,839 --> 00:52:11,520
and we'll be able to consume it now um

1435
00:52:11,520 --> 00:52:15,040
just like that so let's test it out

1436
00:52:15,040 --> 00:52:19,359
uh let's let's look at our queue

1437
00:52:19,359 --> 00:52:22,000
right here we see in our queue that we

1438
00:52:22,000 --> 00:52:24,240
have zero messages right now nothing is

1439
00:52:24,240 --> 00:52:25,119
coming in

1440
00:52:25,119 --> 00:52:27,040
because nothing is currently publishing

1441
00:52:27,040 --> 00:52:28,400
to this queue

1442
00:52:28,400 --> 00:52:31,280
but if we actually hit our honeypot

1443
00:52:31,280 --> 00:52:32,880
let's take a look at the code again real

1444
00:52:32,880 --> 00:52:34,000
quick for our

1445
00:52:34,000 --> 00:52:37,520
for our honeypot let's go to atom we see

1446
00:52:37,520 --> 00:52:39,760
that we basically are gonna our every

1447
00:52:39,760 --> 00:52:41,520
time we hit this this route

1448
00:52:41,520 --> 00:52:44,400
uh we're gonna basically send this

1449
00:52:44,400 --> 00:52:45,200
request

1450
00:52:45,200 --> 00:52:48,880
into rabbitmq so with the name

1451
00:52:48,880 --> 00:52:50,480
to our exchange called honeypot that we

1452
00:52:50,480 --> 00:52:52,160
just created with the binding key that

1453
00:52:52,160 --> 00:52:53,359
we just made

1454
00:52:53,359 --> 00:52:55,680
so it should it should technically work

1455
00:52:55,680 --> 00:52:56,559
now if we

1456
00:52:56,559 --> 00:53:00,079
go to postman and hit this honeypot

1457
00:53:00,079 --> 00:53:01,680
it should we should it should uh create

1458
00:53:01,680 --> 00:53:03,760
some messages for rabbitmq

1459
00:53:03,760 --> 00:53:06,880
let's do that let's go to postman

1460
00:53:06,880 --> 00:53:11,200
uh let's hit our fake honeypot

1461
00:53:11,200 --> 00:53:12,960
and remember our fake honeypot is

1462
00:53:12,960 --> 00:53:14,640
listening on localhost

1463
00:53:14,640 --> 00:53:17,760
501 and i'm not going to do anything

1464
00:53:17,760 --> 00:53:19,520
fancy it's just going to be a simple get

1465
00:53:19,520 --> 00:53:20,480
request

1466
00:53:20,480 --> 00:53:24,319
nothing else and let's stand

1467
00:53:24,319 --> 00:53:26,000
and there it is we get a message back

1468
00:53:26,000 --> 00:53:27,760
obviously a real honeypot is not i'm

1469
00:53:27,760 --> 00:53:30,319
gonna reply back request logged with a

1470
00:53:30,319 --> 00:53:31,920
little smiley face

1471
00:53:31,920 --> 00:53:34,960
um but i wanted to do that for us so we

1472
00:53:34,960 --> 00:53:35,280
can

1473
00:53:35,280 --> 00:53:37,119
see that everything's working properly

1474
00:53:37,119 --> 00:53:38,400
but uh

1475
00:53:38,400 --> 00:53:40,640
it should have logged the message and

1476
00:53:40,640 --> 00:53:42,160
sent it off to our cue so

1477
00:53:42,160 --> 00:53:44,480
let's check it out going back to our

1478
00:53:44,480 --> 00:53:45,359
rabbit and queue

1479
00:53:45,359 --> 00:53:47,200
we can already see we have one message

1480
00:53:47,200 --> 00:53:48,720
ready here 12

1481
00:53:48,720 --> 00:53:50,800
one messages nothing isn't coming right

1482
00:53:50,800 --> 00:53:52,079
now because it's already finished

1483
00:53:52,079 --> 00:53:53,200
processing

1484
00:53:53,200 --> 00:53:55,839
but we do have a message in here and we

1485
00:53:55,839 --> 00:53:57,520
can see the graphs we have already

1486
00:53:57,520 --> 00:53:58,800
message

1487
00:53:58,800 --> 00:54:02,079
um so that's cool uh we still have no

1488
00:54:02,079 --> 00:54:04,319
consumers so this message will remain in

1489
00:54:04,319 --> 00:54:04,960
here

1490
00:54:04,960 --> 00:54:06,720
so that's how you can kind of see that

1491
00:54:06,720 --> 00:54:08,960
rabbitmq can be a buffer

1492
00:54:08,960 --> 00:54:10,800
if for example our consumer is currently

1493
00:54:10,800 --> 00:54:13,359
down um

1494
00:54:13,359 --> 00:54:14,880
but yeah let's get our message let's see

1495
00:54:14,880 --> 00:54:16,480
if it works uh we can even get our

1496
00:54:16,480 --> 00:54:18,079
message straight from here just click on

1497
00:54:18,079 --> 00:54:18,960
get message

1498
00:54:18,960 --> 00:54:20,480
this is the message that we got from our

1499
00:54:20,480 --> 00:54:23,119
honeypot it's everything we need to know

1500
00:54:23,119 --> 00:54:26,160
about our request

1501
00:54:26,480 --> 00:54:28,640
there it is a bunch of information about

1502
00:54:28,640 --> 00:54:31,119
our request so that's fantastic

1503
00:54:31,119 --> 00:54:34,160
um now what we need to do is create some

1504
00:54:34,160 --> 00:54:34,720
sort of

1505
00:54:34,720 --> 00:54:37,119
worker to consume this message from the

1506
00:54:37,119 --> 00:54:38,319
queue and

1507
00:54:38,319 --> 00:54:42,000
do stuff with it aka maybe

1508
00:54:42,000 --> 00:54:44,960
it can add fields remove some fields put

1509
00:54:44,960 --> 00:54:46,559
a special tag on it and then

1510
00:54:46,559 --> 00:54:49,440
it can just ship it off to elastic for

1511
00:54:49,440 --> 00:54:51,680
storage where we can query it

1512
00:54:51,680 --> 00:54:53,280
and do all kinds of cool things with

1513
00:54:53,280 --> 00:54:55,839
this data

1514
00:54:55,839 --> 00:54:58,640
so yeah i think we are ready to do that

1515
00:54:58,640 --> 00:55:00,559
now let's consume this message using

1516
00:55:00,559 --> 00:55:02,559
salary

1517
00:55:02,559 --> 00:55:05,920
so let's go back to our slides and this

1518
00:55:05,920 --> 00:55:07,839
is the celery slide

1519
00:55:07,839 --> 00:55:11,440
um yeah we are going to create a salary

1520
00:55:11,440 --> 00:55:13,599
task and consume from that queue that we

1521
00:55:13,599 --> 00:55:15,520
just made with our worker

1522
00:55:15,520 --> 00:55:17,920
i'm gonna show how they can scale in

1523
00:55:17,920 --> 00:55:19,280
numbers dynamically

1524
00:55:19,280 --> 00:55:20,960
and we're going to look at flour to kind

1525
00:55:20,960 --> 00:55:22,880
of monitor our workers and

1526
00:55:22,880 --> 00:55:24,720
you guys are going to see how how

1527
00:55:24,720 --> 00:55:26,079
awesome it is

1528
00:55:26,079 --> 00:55:29,440
so um and by the way i got to give

1529
00:55:29,440 --> 00:55:31,520
jonathan all the credit here he taught

1530
00:55:31,520 --> 00:55:33,359
me everything i know about this entire

1531
00:55:33,359 --> 00:55:35,280
system so he's in here um

1532
00:55:35,280 --> 00:55:38,960
thank you jonathan uh so

1533
00:55:38,960 --> 00:55:41,280
um yeah let's take a look at how we can

1534
00:55:41,280 --> 00:55:42,960
do that uh let's go to

1535
00:55:42,960 --> 00:55:45,440
atom real quick and look at the celery

1536
00:55:45,440 --> 00:55:46,480
code

1537
00:55:46,480 --> 00:55:51,200
it's very simple uh

1538
00:55:51,200 --> 00:55:53,440
salary there it is so let's see what it

1539
00:55:53,440 --> 00:55:55,680
takes to get salary up and running

1540
00:55:55,680 --> 00:55:57,760
celery requires like i said a message

1541
00:55:57,760 --> 00:55:58,960
broker in our case

1542
00:55:58,960 --> 00:56:01,599
it is rabbitmq so you see when we create

1543
00:56:01,599 --> 00:56:02,480
a new salary

1544
00:56:02,480 --> 00:56:04,799
application we specify where is our

1545
00:56:04,799 --> 00:56:05,599
broker

1546
00:56:05,599 --> 00:56:07,280
and check this out this is why i love

1547
00:56:07,280 --> 00:56:08,960
docker compose because

1548
00:56:08,960 --> 00:56:11,680
usually you would put here like an ip or

1549
00:56:11,680 --> 00:56:12,480
uh

1550
00:56:12,480 --> 00:56:15,599
or some store so some sort of a url

1551
00:56:15,599 --> 00:56:18,079
but um the problem with that is our

1552
00:56:18,079 --> 00:56:19,440
rabbit mq is running

1553
00:56:19,440 --> 00:56:21,680
on a container that ip might change very

1554
00:56:21,680 --> 00:56:22,559
frequently

1555
00:56:22,559 --> 00:56:25,280
so automatically uh rabbit and q because

1556
00:56:25,280 --> 00:56:26,400
we

1557
00:56:26,400 --> 00:56:28,319
automatically docker compose because we

1558
00:56:28,319 --> 00:56:29,760
put we used

1559
00:56:29,760 --> 00:56:31,040
docker compose and put all of our

1560
00:56:31,040 --> 00:56:33,040
services on there every time we write

1561
00:56:33,040 --> 00:56:34,960
rabbitmq which was the name of

1562
00:56:34,960 --> 00:56:37,040
our container check it out the name of

1563
00:56:37,040 --> 00:56:39,040
our container it automatically translate

1564
00:56:39,040 --> 00:56:40,160
that into the

1565
00:56:40,160 --> 00:56:42,400
the current ip address so this container

1566
00:56:42,400 --> 00:56:44,000
has so

1567
00:56:44,000 --> 00:56:46,799
really really neat um so as you can see

1568
00:56:46,799 --> 00:56:47,440
we

1569
00:56:47,440 --> 00:56:49,200
specified the broker you can also

1570
00:56:49,200 --> 00:56:51,680
specify a back end i'm using rabbitmq as

1571
00:56:51,680 --> 00:56:53,119
a back end as well

1572
00:56:53,119 --> 00:56:54,720
there's tons of backend available to

1573
00:56:54,720 --> 00:56:57,359
store your results from the workers or

1574
00:56:57,359 --> 00:56:58,000
the state

1575
00:56:58,000 --> 00:57:00,160
that the workers are in you can use

1576
00:57:00,160 --> 00:57:01,520
memcache you can use

1577
00:57:01,520 --> 00:57:05,119
squ sql can use uh the list goes on and

1578
00:57:05,119 --> 00:57:05,359
on

1579
00:57:05,359 --> 00:57:07,200
uh most likely if you want to use some

1580
00:57:07,200 --> 00:57:08,640
sort of a back end

1581
00:57:08,640 --> 00:57:12,319
uh salary supports it so uh

1582
00:57:12,319 --> 00:57:15,359
that's pretty cool um so

1583
00:57:15,359 --> 00:57:18,720
this is just a function to send our um

1584
00:57:18,720 --> 00:57:20,960
in the end after we finish enriching the

1585
00:57:20,960 --> 00:57:22,960
data that we got from the queue

1586
00:57:22,960 --> 00:57:25,680
uh we'll use this function to send off

1587
00:57:25,680 --> 00:57:26,240
the

1588
00:57:26,240 --> 00:57:30,000
new all improved log into elasticsearch

1589
00:57:30,000 --> 00:57:31,760
uh you can take a look here it's very

1590
00:57:31,760 --> 00:57:33,920
simple it just makes a

1591
00:57:33,920 --> 00:57:37,359
http request and that's it

1592
00:57:37,359 --> 00:57:40,880
okay um so yeah this is pretty much

1593
00:57:40,880 --> 00:57:43,520
uh the function that we want the worker

1594
00:57:43,520 --> 00:57:44,319
to

1595
00:57:44,319 --> 00:57:48,160
use on our data from rabbit so

1596
00:57:48,160 --> 00:57:50,319
uh the data from rabbit is gonna be

1597
00:57:50,319 --> 00:57:51,839
inside of this

1598
00:57:51,839 --> 00:57:54,640
argument uh which is our request from

1599
00:57:54,640 --> 00:57:56,079
our honeypot i know it's a little it's a

1600
00:57:56,079 --> 00:57:57,839
little much but uh

1601
00:57:57,839 --> 00:58:00,000
try to uh bear with me here so so the

1602
00:58:00,000 --> 00:58:01,359
honey this is a request from the

1603
00:58:01,359 --> 00:58:02,000
honeypot

1604
00:58:02,000 --> 00:58:05,119
that was uh pushed into rabbit

1605
00:58:05,119 --> 00:58:08,400
and then this uh salary worker is about

1606
00:58:08,400 --> 00:58:09,920
is gonna consume

1607
00:58:09,920 --> 00:58:12,240
that message from rabbit and it's gonna

1608
00:58:12,240 --> 00:58:14,559
be in here in this argument

1609
00:58:14,559 --> 00:58:17,440
so uh we wanna take uh this request we

1610
00:58:17,440 --> 00:58:19,839
wanna add stuff to it in my case i want

1611
00:58:19,839 --> 00:58:21,599
my salary worker to add

1612
00:58:21,599 --> 00:58:26,160
a a timestamp i wanted to add more

1613
00:58:26,160 --> 00:58:26,880
fields

1614
00:58:26,880 --> 00:58:28,720
i wanted to randomize the port just so

1615
00:58:28,720 --> 00:58:30,319
we can have nice something nice to look

1616
00:58:30,319 --> 00:58:32,240
at in cabana later on

1617
00:58:32,240 --> 00:58:34,640
um and all that kind of stuff so yeah so

1618
00:58:34,640 --> 00:58:35,760
let's let's do that

1619
00:58:35,760 --> 00:58:39,040
i want to set the queue from the

1620
00:58:39,040 --> 00:58:40,559
salary test queue that i'm using to the

1621
00:58:40,559 --> 00:58:42,799
new one that we made called

1622
00:58:42,799 --> 00:58:44,480
honeypot i'm going to give it the

1623
00:58:44,480 --> 00:58:46,400
binding key that it needs

1624
00:58:46,400 --> 00:58:48,000
i'm going to save and then i'm just

1625
00:58:48,000 --> 00:58:50,000
going to restart that specific container

1626
00:58:50,000 --> 00:58:52,880
using my little tool here so let's

1627
00:58:52,880 --> 00:58:53,520
restart

1628
00:58:53,520 --> 00:58:56,319
salary actually let's go into the logs

1629
00:58:56,319 --> 00:58:56,880
here

1630
00:58:56,880 --> 00:58:59,040
we start salary i can also do that from

1631
00:58:59,040 --> 00:59:01,359
the command line if i want to

1632
00:59:01,359 --> 00:59:03,760
but this should uh restart it should

1633
00:59:03,760 --> 00:59:06,799
take like a second

1634
00:59:07,200 --> 00:59:08,640
i'll make sure that i clicked it there

1635
00:59:08,640 --> 00:59:10,480
it is all right celery should be

1636
00:59:10,480 --> 00:59:12,160
restarted there it is you see some logs

1637
00:59:12,160 --> 00:59:13,359
it's updating

1638
00:59:13,359 --> 00:59:15,359
there it is it should not be using the

1639
00:59:15,359 --> 00:59:16,880
new honeypot hue

1640
00:59:16,880 --> 00:59:19,040
um that we made with the right binding

1641
00:59:19,040 --> 00:59:20,079
key and

1642
00:59:20,079 --> 00:59:24,240
if we go to our rabbit mq now

1643
00:59:24,240 --> 00:59:26,799
rabbit mq which is right here we should

1644
00:59:26,799 --> 00:59:28,319
see zero messages remember

1645
00:59:28,319 --> 00:59:30,400
there was there was one message here but

1646
00:59:30,400 --> 00:59:32,079
now that we have a consumer

1647
00:59:32,079 --> 00:59:35,280
it consumed that message so let's take a

1648
00:59:35,280 --> 00:59:36,240
look

1649
00:59:36,240 --> 00:59:40,240
um yeah zero messages and if we go to

1650
00:59:40,240 --> 00:59:41,119
the consumer

1651
00:59:41,119 --> 00:59:43,599
we can see that we have now one consumer

1652
00:59:43,599 --> 00:59:44,160
so

1653
00:59:44,160 --> 00:59:45,680
the salary worker is officially

1654
00:59:45,680 --> 00:59:47,280
consuming from our queue

1655
00:59:47,280 --> 00:59:50,240
this is fantastic we can make uh we can

1656
00:59:50,240 --> 00:59:51,359
hit the honeypot

1657
00:59:51,359 --> 00:59:53,280
have it send off to rabbit and our

1658
00:59:53,280 --> 00:59:54,960
celery is gonna pick that up

1659
00:59:54,960 --> 00:59:57,599
and um add stuff to it and send it right

1660
00:59:57,599 --> 00:59:59,280
to elastic

1661
00:59:59,280 --> 01:00:02,400
so you might be wondering

1662
01:00:02,400 --> 01:00:05,680
uh let me go back to adam here this is

1663
01:00:05,680 --> 01:00:06,400
the code

1664
01:00:06,400 --> 01:00:09,440
for our honeypot so

1665
01:00:09,440 --> 01:00:12,839
honeypot uh

1666
01:00:12,839 --> 01:00:15,680
index.php there it is so you might be

1667
01:00:15,680 --> 01:00:17,599
wondering okay how did celery know to

1668
01:00:17,599 --> 01:00:18,000
run

1669
01:00:18,000 --> 01:00:21,680
that specific function on the data

1670
01:00:21,680 --> 01:00:24,559
there can be many functions right so if

1671
01:00:24,559 --> 01:00:25,040
you want

1672
01:00:25,040 --> 01:00:28,079
salary to work with rabbitmq and and

1673
01:00:28,079 --> 01:00:29,119
work correctly

1674
01:00:29,119 --> 01:00:31,440
like that you can push uh data to

1675
01:00:31,440 --> 01:00:33,200
rabbitmq in any format that you like but

1676
01:00:33,200 --> 01:00:34,799
if you want salary to understand that

1677
01:00:34,799 --> 01:00:35,599
format

1678
01:00:35,599 --> 01:00:38,160
you need to uh follow this this little

1679
01:00:38,160 --> 01:00:40,079
format you need to specify an id

1680
01:00:40,079 --> 01:00:42,000
for your task in your message and the

1681
01:00:42,000 --> 01:00:43,119
name of the function

1682
01:00:43,119 --> 01:00:45,200
in our case it's called enriched data

1683
01:00:45,200 --> 01:00:47,040
it's a function that exists in celery

1684
01:00:47,040 --> 01:00:48,799
that we just looked at

1685
01:00:48,799 --> 01:00:51,839
that you want the worker to use on this

1686
01:00:51,839 --> 01:00:52,720
message

1687
01:00:52,720 --> 01:00:55,680
so that's how he knows um about running

1688
01:00:55,680 --> 01:00:57,359
that specific function

1689
01:00:57,359 --> 01:01:00,480
so that's cool um let's go back to our

1690
01:01:00,480 --> 01:01:02,400
celery here you see what we're doing

1691
01:01:02,400 --> 01:01:05,119
here after we finish enriching the data

1692
01:01:05,119 --> 01:01:07,280
we're just sending it to elastic so

1693
01:01:07,280 --> 01:01:08,559
elastic should now have

1694
01:01:08,559 --> 01:01:12,000
our request in uh in an index that we

1695
01:01:12,000 --> 01:01:13,920
previously created called honeypot if

1696
01:01:13,920 --> 01:01:15,119
you remember

1697
01:01:15,119 --> 01:01:18,480
uh postman right here we created our

1698
01:01:18,480 --> 01:01:21,599
um with this right here we created the

1699
01:01:21,599 --> 01:01:22,799
honeypot index

1700
01:01:22,799 --> 01:01:24,880
so that's where we send it off to

1701
01:01:24,880 --> 01:01:26,400
because

1702
01:01:26,400 --> 01:01:27,839
and the reason for that is because we

1703
01:01:27,839 --> 01:01:29,599
specified that

1704
01:01:29,599 --> 01:01:32,640
index um here

1705
01:01:32,640 --> 01:01:36,559
well i should have uncommented it but

1706
01:01:36,559 --> 01:01:39,359
we should have specified it here and now

1707
01:01:39,359 --> 01:01:39,839
any

1708
01:01:39,839 --> 01:01:42,400
additional requests will will be sent to

1709
01:01:42,400 --> 01:01:43,760
this index honeypot

1710
01:01:43,760 --> 01:01:45,359
you see that this is the url that we're

1711
01:01:45,359 --> 01:01:47,920
hitting handypot will be here

1712
01:01:47,920 --> 01:01:51,440
um so yeah so that's pretty cool

1713
01:01:51,440 --> 01:01:53,040
uh another thing about celery i want to

1714
01:01:53,040 --> 01:01:56,000
show you like the scaling capabilities

1715
01:01:56,000 --> 01:02:00,079
i have a script here called setup

1716
01:02:00,079 --> 01:02:03,119
right um setup worker

1717
01:02:03,119 --> 01:02:05,760
there it is and look at that uh this is

1718
01:02:05,760 --> 01:02:06,799
what it's doing

1719
01:02:06,799 --> 01:02:08,720
just uh from the command it's just a

1720
01:02:08,720 --> 01:02:10,079
command line uh it can work on the

1721
01:02:10,079 --> 01:02:11,200
command line as well you can just

1722
01:02:11,200 --> 01:02:13,119
accelerate that command it will work

1723
01:02:13,119 --> 01:02:15,440
uh i i have a script that does that here

1724
01:02:15,440 --> 01:02:16,720
but basically we can

1725
01:02:16,720 --> 01:02:19,680
specify here out of scale we're saying

1726
01:02:19,680 --> 01:02:20,480
basically

1727
01:02:20,480 --> 01:02:23,359
uh you can bring it up or down between

1728
01:02:23,359 --> 01:02:25,359
ten and three workers based on the scale

1729
01:02:25,359 --> 01:02:27,280
it's up to you based on usage

1730
01:02:27,280 --> 01:02:30,240
so you wanna there's a lot of burst

1731
01:02:30,240 --> 01:02:30,720
loads

1732
01:02:30,720 --> 01:02:33,520
uh create like a couple more workers to

1733
01:02:33,520 --> 01:02:34,720
handle that

1734
01:02:34,720 --> 01:02:36,160
if there's no load we don't need to have

1735
01:02:36,160 --> 01:02:37,760
them all

1736
01:02:37,760 --> 01:02:40,480
running uh bring them down so it's it's

1737
01:02:40,480 --> 01:02:41,119
it's really

1738
01:02:41,119 --> 01:02:44,880
really awesome all right next

1739
01:02:44,880 --> 01:02:48,160
let's go back to our slides i'm going to

1740
01:02:48,160 --> 01:02:49,839
bring this all together very soon it's

1741
01:02:49,839 --> 01:02:51,200
going to be really cool once we can look

1742
01:02:51,200 --> 01:02:53,280
at all this in cabana

1743
01:02:53,280 --> 01:02:56,640
so um

1744
01:02:56,640 --> 01:03:00,640
all right cool uh next

1745
01:03:00,640 --> 01:03:03,280
we are going to look at this uh in

1746
01:03:03,280 --> 01:03:03,839
cabana

1747
01:03:03,839 --> 01:03:05,680
so just a little bit about what cabana

1748
01:03:05,680 --> 01:03:07,599
is we talked about the front end tool

1749
01:03:07,599 --> 01:03:10,960
a little bit of information um

1750
01:03:10,960 --> 01:03:14,319
um cabana uh comes with a lot of

1751
01:03:14,319 --> 01:03:15,119
features

1752
01:03:15,119 --> 01:03:17,119
it makes analyzing the data actually

1753
01:03:17,119 --> 01:03:19,280
much easier if you use a tons of it

1754
01:03:19,280 --> 01:03:20,799
uh you can create your own dashboards

1755
01:03:20,799 --> 01:03:22,559
there we're gonna do that uh

1756
01:03:22,559 --> 01:03:24,640
graphs all that kind of stuff will do

1757
01:03:24,640 --> 01:03:25,920
that so

1758
01:03:25,920 --> 01:03:27,920
let's jump right into it actually

1759
01:03:27,920 --> 01:03:29,039
because i think i'm running out of time

1760
01:03:29,039 --> 01:03:30,640
here a little bit so let's let's

1761
01:03:30,640 --> 01:03:34,640
jump right into this uh we have cabana

1762
01:03:34,640 --> 01:03:39,280
on our local host it's mapped in here

1763
01:03:39,280 --> 01:03:41,839
it's gonna be very it's gonna be like

1764
01:03:41,839 --> 01:03:44,480
this at first i i like the dark mode

1765
01:03:44,480 --> 01:03:47,200
so i'm going to uh just change that real

1766
01:03:47,200 --> 01:03:48,240
quickly

1767
01:03:48,240 --> 01:03:52,720
uh uh settings advanced settings here

1768
01:03:52,720 --> 01:03:55,920
uh just let them burn your eyes out uh

1769
01:03:55,920 --> 01:03:58,160
dark mode let's enable that real quick

1770
01:03:58,160 --> 01:03:59,359
save

1771
01:03:59,359 --> 01:04:02,000
and reload and that's it it should work

1772
01:04:02,000 --> 01:04:04,079
okay cool much better

1773
01:04:04,079 --> 01:04:07,920
all right awesome so uh cabana this is

1774
01:04:07,920 --> 01:04:09,680
kibana this is how it looks like

1775
01:04:09,680 --> 01:04:13,599
it allows us to search our our

1776
01:04:13,599 --> 01:04:17,280
our indexes um it has many cool features

1777
01:04:17,280 --> 01:04:17,680
this

1778
01:04:17,680 --> 01:04:19,680
also the dev tools here which is cool

1779
01:04:19,680 --> 01:04:22,319
you can make the same http request you

1780
01:04:22,319 --> 01:04:22,960
can make

1781
01:04:22,960 --> 01:04:25,680
put get post you can interact with it

1782
01:04:25,680 --> 01:04:26,000
from

1783
01:04:26,000 --> 01:04:29,359
here with your elastic cluster

1784
01:04:29,359 --> 01:04:30,640
it's very convenient if you don't want

1785
01:04:30,640 --> 01:04:32,799
to mess with stuff like authentication

1786
01:04:32,799 --> 01:04:34,079
and all that kind of stuff it's right

1787
01:04:34,079 --> 01:04:34,880
here

1788
01:04:34,880 --> 01:04:38,000
uh on the uh it's it's i use it a lot as

1789
01:04:38,000 --> 01:04:40,880
you can see it's pretty cool um

1790
01:04:40,880 --> 01:04:44,960
so um what i want to do now i want to

1791
01:04:44,960 --> 01:04:47,440
create something called an index pattern

1792
01:04:47,440 --> 01:04:49,599
because we want to be able to actually

1793
01:04:49,599 --> 01:04:50,640
view our

1794
01:04:50,640 --> 01:04:53,119
data in our index in discover and we

1795
01:04:53,119 --> 01:04:54,079
can't do that without

1796
01:04:54,079 --> 01:04:57,039
without an index header uh what is an

1797
01:04:57,039 --> 01:04:59,359
index pattern i'm just gonna go to here

1798
01:04:59,359 --> 01:05:03,119
uh create a new index pattern

1799
01:05:03,119 --> 01:05:07,520
under our index pattern right here

1800
01:05:07,520 --> 01:05:09,680
there it is why is an index pattern all

1801
01:05:09,680 --> 01:05:12,240
it is it's a rejects

1802
01:05:12,240 --> 01:05:14,559
where you can specify which indexes you

1803
01:05:14,559 --> 01:05:15,920
want to include

1804
01:05:15,920 --> 01:05:19,359
uh in uh you want to basically look at

1805
01:05:19,359 --> 01:05:23,359
so um if we want to look at that test

1806
01:05:23,359 --> 01:05:26,960
that test um rejects that we have

1807
01:05:26,960 --> 01:05:29,760
the text index that we had previously

1808
01:05:29,760 --> 01:05:31,760
you see this is already matching

1809
01:05:31,760 --> 01:05:34,960
uh the index right here so i'm actually

1810
01:05:34,960 --> 01:05:35,440
gonna

1811
01:05:35,440 --> 01:05:38,640
put the full name though there it is

1812
01:05:38,640 --> 01:05:41,920
uh you will click next and then

1813
01:05:41,920 --> 01:05:43,599
uh you would the reason we added

1814
01:05:43,599 --> 01:05:45,280
timestamp is because discover needs a

1815
01:05:45,280 --> 01:05:47,200
timestamp so you can know how to order

1816
01:05:47,200 --> 01:05:48,400
the data

1817
01:05:48,400 --> 01:05:51,520
so uh we're gonna tell to use timestamp

1818
01:05:51,520 --> 01:05:53,599
as the date field

1819
01:05:53,599 --> 01:05:57,280
we're gonna create this index pattern so

1820
01:05:57,280 --> 01:06:00,400
we officially created this index pattern

1821
01:06:00,400 --> 01:06:01,920
and look at that it has a little clock

1822
01:06:01,920 --> 01:06:03,680
here next to timestamp so it's going to

1823
01:06:03,680 --> 01:06:04,079
be

1824
01:06:04,079 --> 01:06:07,920
organized using that as our date

1825
01:06:07,920 --> 01:06:10,480
um so that's pretty cool another thing

1826
01:06:10,480 --> 01:06:11,680
you can do in here is

1827
01:06:11,680 --> 01:06:13,359
with index management you see we have

1828
01:06:13,359 --> 01:06:14,799
our indexes here you can look at how

1829
01:06:14,799 --> 01:06:16,160
many documents you're currently having

1830
01:06:16,160 --> 01:06:17,359
there you can see

1831
01:06:17,359 --> 01:06:19,680
the health status of of it mine is

1832
01:06:19,680 --> 01:06:22,079
yellow because it's only on localhost

1833
01:06:22,079 --> 01:06:23,920
but if you click on it you can take a

1834
01:06:23,920 --> 01:06:25,839
look at the mappings that we set up

1835
01:06:25,839 --> 01:06:28,880
previously uh you can edit

1836
01:06:28,880 --> 01:06:30,400
you can delete the index you can do a

1837
01:06:30,400 --> 01:06:31,920
lot of things from here it's very

1838
01:06:31,920 --> 01:06:32,880
convenient

1839
01:06:32,880 --> 01:06:34,640
let's go to discover now that we have an

1840
01:06:34,640 --> 01:06:36,240
index pattern we're going to use that

1841
01:06:36,240 --> 01:06:37,440
index pattern

1842
01:06:37,440 --> 01:06:40,960
you see and uh let's uh see if we can

1843
01:06:40,960 --> 01:06:44,160
you can play around with like uh how how

1844
01:06:44,160 --> 01:06:45,920
many how much data you want to see from

1845
01:06:45,920 --> 01:06:47,680
where what time frame

1846
01:06:47,680 --> 01:06:49,119
there's a lot of options here let me

1847
01:06:49,119 --> 01:06:51,039
just get rid of this

1848
01:06:51,039 --> 01:06:54,000
okay there's a lot of options here uh

1849
01:06:54,000 --> 01:06:54,400
let's

1850
01:06:54,400 --> 01:06:55,839
let's let's look at all the data let's

1851
01:06:55,839 --> 01:06:57,599
look at years worth of data

1852
01:06:57,599 --> 01:06:59,920
we only have one document but like you

1853
01:06:59,920 --> 01:07:01,280
can also do that

1854
01:07:01,280 --> 01:07:02,880
um this is the document that we

1855
01:07:02,880 --> 01:07:04,400
previously inserted uh

1856
01:07:04,400 --> 01:07:07,520
check this out you see the age the email

1857
01:07:07,520 --> 01:07:09,440
if you expand it you can fully see it

1858
01:07:09,440 --> 01:07:10,960
you can see it in json

1859
01:07:10,960 --> 01:07:13,119
it's pretty cool but we want to actually

1860
01:07:13,119 --> 01:07:14,880
see the

1861
01:07:14,880 --> 01:07:18,319
the honeypot uh logs right

1862
01:07:18,319 --> 01:07:22,640
let's just uh quickly um

1863
01:07:22,640 --> 01:07:25,839
um let's just quickly uh insert more

1864
01:07:25,839 --> 01:07:27,280
data into our honeypot

1865
01:07:27,280 --> 01:07:30,799
let me go to the slide real quick

1866
01:07:30,799 --> 01:07:33,920
let's put it all together now wrong

1867
01:07:33,920 --> 01:07:34,960
slide

1868
01:07:34,960 --> 01:07:37,599
all right let's put it all together now

1869
01:07:37,599 --> 01:07:39,119
um

1870
01:07:39,119 --> 01:07:42,640
and insert some more entries into our

1871
01:07:42,640 --> 01:07:45,839
honeypot let's hear our honeypot um

1872
01:07:45,839 --> 01:07:47,839
the way i'm gonna do it i'm gonna i made

1873
01:07:47,839 --> 01:07:49,599
a little uh shell script

1874
01:07:49,599 --> 01:07:51,280
uh that makes a bunch of malicious

1875
01:07:51,280 --> 01:07:52,799
requests to our honeypot because i want

1876
01:07:52,799 --> 01:07:54,240
to have a lot of data in there for us to

1877
01:07:54,240 --> 01:07:58,000
play around with um

1878
01:07:58,240 --> 01:07:59,760
basically we're gonna run this shell

1879
01:07:59,760 --> 01:08:00,960
script it's gonna make a bunch of

1880
01:08:00,960 --> 01:08:01,839
requests

1881
01:08:01,839 --> 01:08:04,000
to our honeypot uh and we're gonna be

1882
01:08:04,000 --> 01:08:05,599
able to to look at

1883
01:08:05,599 --> 01:08:08,799
that all right so um

1884
01:08:08,799 --> 01:08:11,200
how am i doing on time yeah i'm okay on

1885
01:08:11,200 --> 01:08:12,880
time all right

1886
01:08:12,880 --> 01:08:16,080
so um uh

1887
01:08:16,080 --> 01:08:19,040
let me quickly show you this script this

1888
01:08:19,040 --> 01:08:21,198
is the spam request that sh

1889
01:08:21,198 --> 01:08:24,000
that i made nothing fancy i wonder i

1890
01:08:24,000 --> 01:08:25,759
want to be kind of randomized i want to

1891
01:08:25,759 --> 01:08:26,960
put a few different

1892
01:08:26,960 --> 01:08:28,880
requests for us to look at it's just a

1893
01:08:28,880 --> 01:08:30,560
bunch of like uh

1894
01:08:30,560 --> 01:08:33,120
requests that would mimic an injection w

1895
01:08:33,120 --> 01:08:34,238
get requests

1896
01:08:34,238 --> 01:08:38,000
uh some noise all kind of stuff um

1897
01:08:38,000 --> 01:08:39,359
it takes an argument to how many

1898
01:08:39,359 --> 01:08:41,679
requests we want to do we'll do like 400

1899
01:08:41,679 --> 01:08:45,120
just to have a lot of data um

1900
01:08:45,120 --> 01:08:47,120
and yeah so let's do that right now

1901
01:08:47,120 --> 01:08:49,198
let's go to the terminal

1902
01:08:49,198 --> 01:08:52,719
um let's go to a terminal

1903
01:08:52,719 --> 01:08:56,238
let's open this yeah there it is

1904
01:08:56,238 --> 01:08:59,279
let's clear this um

1905
01:08:59,279 --> 01:09:03,839
let me go to the right directory

1906
01:09:03,839 --> 01:09:07,359
there it is uh it's in my presentation

1907
01:09:07,359 --> 01:09:09,439
folder

1908
01:09:09,439 --> 01:09:13,198
and yeah spam request that

1909
01:09:13,198 --> 01:09:16,238
sh let's just run that

1910
01:09:16,238 --> 01:09:20,158
stomach press sh i'm gonna put like 400

1911
01:09:20,158 --> 01:09:23,120
requests that will make hopefully

1912
01:09:23,120 --> 01:09:24,560
everything works great

1913
01:09:24,560 --> 01:09:26,560
see making a bunch of requests this is

1914
01:09:26,560 --> 01:09:28,640
our honeypot responding request log

1915
01:09:28,640 --> 01:09:32,640
request log let's actually see this uh

1916
01:09:32,640 --> 01:09:34,158
let's actually look at rabbit and here

1917
01:09:34,158 --> 01:09:35,920
real quick you see we should be getting

1918
01:09:35,920 --> 01:09:36,479
a bunch

1919
01:09:36,479 --> 01:09:41,599
of uh of hits on there so

1920
01:09:42,000 --> 01:09:45,520
uh is it already done

1921
01:09:45,520 --> 01:09:47,198
i think it's consuming them so fast that

1922
01:09:47,198 --> 01:09:50,080
we can't really see it you see like uh

1923
01:09:50,080 --> 01:09:52,158
the incoming speed uh we can't really

1924
01:09:52,158 --> 01:09:53,359
see that it's really it's consuming so

1925
01:09:53,359 --> 01:09:54,880
fast that we can't see it

1926
01:09:54,880 --> 01:09:56,880
um another thing as we wait for this

1927
01:09:56,880 --> 01:09:58,320
request to finish i want to show you

1928
01:09:58,320 --> 01:09:58,960
flour

1929
01:09:58,960 --> 01:10:02,880
the celery flour so uh it's on localhost

1930
01:10:02,880 --> 01:10:04,320
class we mapped it to port

1931
01:10:04,320 --> 01:10:08,000
five five five five uh

1932
01:10:08,000 --> 01:10:10,480
there it is and this is it this is cool

1933
01:10:10,480 --> 01:10:11,040
because

1934
01:10:11,040 --> 01:10:14,640
um check this out um this is basically

1935
01:10:14,640 --> 01:10:15,199
well

1936
01:10:15,199 --> 01:10:16,400
everything's failed we're going to see

1937
01:10:16,400 --> 01:10:18,880
why but this is a good thing uh because

1938
01:10:18,880 --> 01:10:20,960
uh now i know that everything felt it's

1939
01:10:20,960 --> 01:10:22,159
easy for me to look at

1940
01:10:22,159 --> 01:10:25,360
through salary it showed me all of the

1941
01:10:25,360 --> 01:10:26,719
tasks

1942
01:10:26,719 --> 01:10:28,800
that the workers are running you see

1943
01:10:28,800 --> 01:10:31,120
that we um

1944
01:10:31,120 --> 01:10:34,640
um processed 400

1945
01:10:34,640 --> 01:10:37,440
failed 400 and we'll be able to see why

1946
01:10:37,440 --> 01:10:37,920
uh

1947
01:10:37,920 --> 01:10:40,800
we'll go to tasks let's order them by

1948
01:10:40,800 --> 01:10:41,600
time stamp

1949
01:10:41,600 --> 01:10:43,840
if i click on one there's a lot of cool

1950
01:10:43,840 --> 01:10:46,640
features we can see actual errors

1951
01:10:46,640 --> 01:10:49,679
uh yeah i need to comment this

1952
01:10:49,679 --> 01:10:51,440
it's not i forgot to uncomment this it's

1953
01:10:51,440 --> 01:10:52,880
a very simple fix we'll do that right

1954
01:10:52,880 --> 01:10:53,360
now

1955
01:10:53,360 --> 01:10:55,120
but look how cool this is we actually

1956
01:10:55,120 --> 01:10:56,480
have uh visibility

1957
01:10:56,480 --> 01:11:00,080
into weight failed why it felt um

1958
01:11:00,080 --> 01:11:02,640
uh the arguments uh how long it took you

1959
01:11:02,640 --> 01:11:04,719
see run time receive started it's

1960
01:11:04,719 --> 01:11:06,560
it gives us a lot of visibility into our

1961
01:11:06,560 --> 01:11:08,320
pipeline let me just fix that that

1962
01:11:08,320 --> 01:11:10,840
little area here so we can get going

1963
01:11:10,840 --> 01:11:15,199
um there it is uh

1964
01:11:15,199 --> 01:11:18,719
yeah okay

1965
01:11:18,719 --> 01:11:22,159
so this is the index right here let me

1966
01:11:22,159 --> 01:11:25,199
save that uh

1967
01:11:25,199 --> 01:11:28,239
and let me restart so we can send it to

1968
01:11:28,239 --> 01:11:30,400
the right

1969
01:11:30,400 --> 01:11:33,520
index okay everything looks good to me

1970
01:11:33,520 --> 01:11:36,719
let's restart salary all right

1971
01:11:36,719 --> 01:11:39,840
seller is right here click to

1972
01:11:39,840 --> 01:11:42,159
start it see saturday test is not

1973
01:11:42,159 --> 01:11:44,639
defined

1974
01:11:44,800 --> 01:11:46,480
you can see errors in here as well which

1975
01:11:46,480 --> 01:11:47,920
is awesome

1976
01:11:47,920 --> 01:11:51,280
uh that should fix everything

1977
01:11:51,280 --> 01:11:54,800
we don't have cellular tests

1978
01:11:59,280 --> 01:12:02,640
okay it's how we start

1979
01:12:02,640 --> 01:12:05,110
i think it did let me just make sure

1980
01:12:05,110 --> 01:12:06,840
[Music]

1981
01:12:06,840 --> 01:12:09,840
again

1982
01:12:10,480 --> 01:12:13,760
okay uh we should be good uh

1983
01:12:13,760 --> 01:12:16,080
now everything is up and running there

1984
01:12:16,080 --> 01:12:18,080
we go we set a little restart

1985
01:12:18,080 --> 01:12:21,360
orange going back to uh yellow let me do

1986
01:12:21,360 --> 01:12:22,560
this and let's run

1987
01:12:22,560 --> 01:12:24,960
our script again let's spam our honeypot

1988
01:12:24,960 --> 01:12:26,719
with a bunch of malicious requests

1989
01:12:26,719 --> 01:12:30,080
once again all right let's take a look

1990
01:12:30,080 --> 01:12:32,560
at salary

1991
01:12:32,560 --> 01:12:37,920
uh unlucky uh

1992
01:12:38,800 --> 01:12:41,920
no actually it it's fine uh it did work

1993
01:12:41,920 --> 01:12:45,920
uh i'm just i just have it set up

1994
01:12:45,920 --> 01:12:49,120
weird that's right all right last

1995
01:12:49,120 --> 01:12:52,400
last chance uh for this uh let me

1996
01:12:52,400 --> 01:12:53,520
restart so

1997
01:12:53,520 --> 01:12:57,280
real quick um

1998
01:12:57,600 --> 01:13:00,320
seller sorry about that guys this is how

1999
01:13:00,320 --> 01:13:00,960
demos

2000
01:13:00,960 --> 01:13:04,239
are all right let me stop it

2001
01:13:04,239 --> 01:13:07,920
make sure it completely stops and

2002
01:13:07,920 --> 01:13:12,239
i'll restart it all right we exited

2003
01:13:12,239 --> 01:13:16,000
running stop it

2004
01:13:16,159 --> 01:13:20,879
take a second here and we're ready to go

2005
01:13:22,640 --> 01:13:25,760
all right it stopped now

2006
01:13:25,760 --> 01:13:28,480
let's start there it is we'll give it a

2007
01:13:28,480 --> 01:13:29,679
second

2008
01:13:29,679 --> 01:13:33,199
and we will make requests

2009
01:13:33,199 --> 01:13:36,960
again let's see

2010
01:13:36,960 --> 01:13:40,000
uh all right give it a second

2011
01:13:40,000 --> 01:13:43,280
we're ready it is let's do it slam our

2012
01:13:43,280 --> 01:13:45,120
honeypot

2013
01:13:45,120 --> 01:13:47,199
i'll see my fingers here let's hope that

2014
01:13:47,199 --> 01:13:49,360
it works and we got a bunch of success

2015
01:13:49,360 --> 01:13:52,480
um messages there it is celery was able

2016
01:13:52,480 --> 01:13:52,880
to

2017
01:13:52,880 --> 01:13:54,800
pick up each individual log from

2018
01:13:54,800 --> 01:13:56,239
rabbitmq

2019
01:13:56,239 --> 01:13:58,480
enrich it appends a bunch of fields to

2020
01:13:58,480 --> 01:14:01,199
it ports

2021
01:14:01,199 --> 01:14:04,239
and was able to send it off to

2022
01:14:04,239 --> 01:14:07,920
elasticsearch so now that we have

2023
01:14:07,920 --> 01:14:10,480
our data supposedly in to our

2024
01:14:10,480 --> 01:14:11,679
elasticsearch

2025
01:14:11,679 --> 01:14:14,960
we need to make another uh pattern index

2026
01:14:14,960 --> 01:14:17,600
to search the honeypot index that we

2027
01:14:17,600 --> 01:14:19,440
insert all that into

2028
01:14:19,440 --> 01:14:22,960
so let's create an index

2029
01:14:22,960 --> 01:14:25,520
index pattern we'll call it honeypot as

2030
01:14:25,520 --> 01:14:26,840
well

2031
01:14:26,840 --> 01:14:30,480
on the part all right awesome

2032
01:14:30,480 --> 01:14:33,600
and we'll create

2033
01:14:33,600 --> 01:14:35,440
uh we'll choose timestamp remember we

2034
01:14:35,440 --> 01:14:37,120
set the mapping before we have a

2035
01:14:37,120 --> 01:14:38,719
timestamp field and in fact

2036
01:14:38,719 --> 01:14:42,960
our salary worker enriches the data

2037
01:14:42,960 --> 01:14:46,000
by adding that time sound

2038
01:14:46,000 --> 01:14:50,719
updating it so create an index pattern

2039
01:14:50,719 --> 01:14:53,120
there we go it's ready we are ready to

2040
01:14:53,120 --> 01:14:54,480
search

2041
01:14:54,480 --> 01:14:57,840
habana let's go to the honeypot

2042
01:14:57,840 --> 01:15:00,640
let's hope right in here and they are

2043
01:15:00,640 --> 01:15:01,760
awesome

2044
01:15:01,760 --> 01:15:05,760
okay so we have a bunch of

2045
01:15:05,760 --> 01:15:09,040
malicious logs from our honeypot

2046
01:15:09,040 --> 01:15:12,080
okay so um

2047
01:15:12,080 --> 01:15:14,159
cabana like i said it's awesome here

2048
01:15:14,159 --> 01:15:15,679
let's take a look at all the fields

2049
01:15:15,679 --> 01:15:17,199
of the request that we're able to get

2050
01:15:17,199 --> 01:15:20,320
content all that type of stuff ports

2051
01:15:20,320 --> 01:15:23,040
any types of uh everything that our

2052
01:15:23,040 --> 01:15:24,080
server was able to

2053
01:15:24,080 --> 01:15:27,360
get from that request is in here this is

2054
01:15:27,360 --> 01:15:27,920
just

2055
01:15:27,920 --> 01:15:30,400
noise uh that i put in but check this

2056
01:15:30,400 --> 01:15:31,440
out for example

2057
01:15:31,440 --> 01:15:34,400
this is supposed to supposedly uh a

2058
01:15:34,400 --> 01:15:35,760
malicious request

2059
01:15:35,760 --> 01:15:38,719
uh example wordpress plugin vulnerable

2060
01:15:38,719 --> 01:15:39,040
and

2061
01:15:39,040 --> 01:15:41,440
let's take a look here we see that the

2062
01:15:41,440 --> 01:15:43,040
body arrives at wget

2063
01:15:43,040 --> 01:15:46,159
some malicious dot com so some attempt

2064
01:15:46,159 --> 01:15:49,840
to inject um

2065
01:15:49,840 --> 01:15:51,440
we can do some cool search queries on

2066
01:15:51,440 --> 01:15:52,880
this data imagine there's like

2067
01:15:52,880 --> 01:15:55,440
millions of documents in here like tons

2068
01:15:55,440 --> 01:15:56,719
of documents you're not going to go one

2069
01:15:56,719 --> 01:15:58,560
by one you want to see hey

2070
01:15:58,560 --> 01:16:01,040
where where are all of my injection

2071
01:16:01,040 --> 01:16:01,920
attempts

2072
01:16:01,920 --> 01:16:05,040
for you so so you you would say search

2073
01:16:05,040 --> 01:16:08,080
w guess is anybody trying to use wv gets

2074
01:16:08,080 --> 01:16:11,120
inside the requests to inject stuff

2075
01:16:11,120 --> 01:16:13,440
have us download stuff yeah we see we

2076
01:16:13,440 --> 01:16:14,880
have a bunch of documents that we've got

2077
01:16:14,880 --> 01:16:15,199
there

2078
01:16:15,199 --> 01:16:17,760
this is all the injections attempts uh

2079
01:16:17,760 --> 01:16:18,400
to make this

2080
01:16:18,400 --> 01:16:21,120
nicer to look at let's add some fields

2081
01:16:21,120 --> 01:16:21,520
uh

2082
01:16:21,520 --> 01:16:25,280
we i'm just interested in the timestamp

2083
01:16:25,280 --> 01:16:28,000
i want to see

2084
01:16:28,719 --> 01:16:32,840
i want to see the body raw i want to see

2085
01:16:32,840 --> 01:16:36,400
some i want to see the url

2086
01:16:36,400 --> 01:16:39,600
uh i can see the user engine the port uh

2087
01:16:39,600 --> 01:16:42,080
so yeah that's nice to look at i can

2088
01:16:42,080 --> 01:16:43,600
also say hey

2089
01:16:43,600 --> 01:16:46,640
inside the url field uh was there

2090
01:16:46,640 --> 01:16:49,040
mbw gets only in the url not in the body

2091
01:16:49,040 --> 01:16:50,880
wrong and there it is

2092
01:16:50,880 --> 01:16:53,199
uh on a specific port maybe i can say

2093
01:16:53,199 --> 01:16:54,719
and uh

2094
01:16:54,719 --> 01:16:58,000
port equals to like 500 or

2095
01:16:58,000 --> 01:17:00,480
you know it makes analyzing the data

2096
01:17:00,480 --> 01:17:01,040
much

2097
01:17:01,040 --> 01:17:04,719
uh much easier

2098
01:17:05,520 --> 01:17:09,280
uh so uh

2099
01:17:09,280 --> 01:17:12,480
all right uh so yeah um

2100
01:17:12,480 --> 01:17:14,719
another cool thing uh with cabana is of

2101
01:17:14,719 --> 01:17:17,199
course dashboards uh

2102
01:17:17,199 --> 01:17:18,719
usually when you make a front end for

2103
01:17:18,719 --> 01:17:20,640
this type of data you uh

2104
01:17:20,640 --> 01:17:22,800
usually it has it's gonna have very

2105
01:17:22,800 --> 01:17:24,239
similar features all the time

2106
01:17:24,239 --> 01:17:26,560
uh you can spend a lot of time creating

2107
01:17:26,560 --> 01:17:28,159
your front end but kibana

2108
01:17:28,159 --> 01:17:30,159
is ready to go it will most likely have

2109
01:17:30,159 --> 01:17:32,320
anything you need anymore honestly

2110
01:17:32,320 --> 01:17:33,600
so rather than spending months

2111
01:17:33,600 --> 01:17:35,120
developing something you can just use

2112
01:17:35,120 --> 01:17:35,520
this

2113
01:17:35,520 --> 01:17:38,400
it's fantastic it's very uh customizable

2114
01:17:38,400 --> 01:17:39,360
so let me just show you

2115
01:17:39,360 --> 01:17:42,719
real quick let me go to the visual

2116
01:17:42,719 --> 01:17:46,320
uh tab here so you see i can create my

2117
01:17:46,320 --> 01:17:47,360
first

2118
01:17:47,360 --> 01:17:49,360
visual and if i go back to my code very

2119
01:17:49,360 --> 01:17:50,400
quickly uh

2120
01:17:50,400 --> 01:17:53,280
for a moment with celery i see that i'm

2121
01:17:53,280 --> 01:17:54,159
adding a random

2122
01:17:54,159 --> 01:17:56,400
fake port for us to use i'm interested

2123
01:17:56,400 --> 01:17:58,159
in making a pie chart i want to see

2124
01:17:58,159 --> 01:18:00,320
popular ports i want to see what are the

2125
01:18:00,320 --> 01:18:01,520
current trends

2126
01:18:01,520 --> 01:18:04,159
who's hitting what what services if

2127
01:18:04,159 --> 01:18:06,600
somebody hit port some random port like

2128
01:18:06,600 --> 01:18:09,199
7006 and there's a bunch of requests to

2129
01:18:09,199 --> 01:18:10,800
it it's probably like a vulnerable

2130
01:18:10,800 --> 01:18:12,239
version of something

2131
01:18:12,239 --> 01:18:16,560
using that board i want to find out so

2132
01:18:16,560 --> 01:18:19,280
let's make a little visual to easily be

2133
01:18:19,280 --> 01:18:21,120
able to see that and share that

2134
01:18:21,120 --> 01:18:24,080
with others so you can create a new

2135
01:18:24,080 --> 01:18:25,440
visual

2136
01:18:25,440 --> 01:18:28,800
click on that uh

2137
01:18:28,800 --> 01:18:30,320
look at all the options there's tons of

2138
01:18:30,320 --> 01:18:32,480
options you can make heat maps

2139
01:18:32,480 --> 01:18:36,159
charts line graphs just that

2140
01:18:36,159 --> 01:18:37,920
you you have to play around with this uh

2141
01:18:37,920 --> 01:18:40,000
it's there's a lot of options here uh

2142
01:18:40,000 --> 01:18:42,640
but i'm gonna make a pie chart right now

2143
01:18:42,640 --> 01:18:44,640
it tells you which index fan to use

2144
01:18:44,640 --> 01:18:47,360
aka which data do you want into this pie

2145
01:18:47,360 --> 01:18:49,199
chart you can specify but

2146
01:18:49,199 --> 01:18:50,560
you know you can be very creative with

2147
01:18:50,560 --> 01:18:52,840
this uh we're gonna use the honeypot

2148
01:18:52,840 --> 01:18:55,120
stuff uh you see i get like a random

2149
01:18:55,120 --> 01:18:56,080
donut

2150
01:18:56,080 --> 01:18:58,159
right now you can also specify the range

2151
01:18:58,159 --> 01:18:59,440
again in here as well

2152
01:18:59,440 --> 01:19:01,520
i'm gonna use 15 years worth of data

2153
01:19:01,520 --> 01:19:03,040
just because i can because i have very

2154
01:19:03,040 --> 01:19:04,719
little amount of data in here

2155
01:19:04,719 --> 01:19:08,640
uh i have like 400 we put 400 entries

2156
01:19:08,640 --> 01:19:10,880
so um yeah you can start playing with it

2157
01:19:10,880 --> 01:19:12,000
so let me show you

2158
01:19:12,000 --> 01:19:15,120
um let's add here uh

2159
01:19:15,120 --> 01:19:17,840
a bucket uh bucket is like aggregation

2160
01:19:17,840 --> 01:19:19,040
of data

2161
01:19:19,040 --> 01:19:22,159
um we'll split the slice here um

2162
01:19:22,159 --> 01:19:24,719
we'll choose a term we'll choose a term

2163
01:19:24,719 --> 01:19:25,840
that we want to

2164
01:19:25,840 --> 01:19:28,400
uh display here and the term looking for

2165
01:19:28,400 --> 01:19:29,679
is something that celery

2166
01:19:29,679 --> 01:19:32,800
added for me while enriching the data we

2167
01:19:32,800 --> 01:19:34,080
call it the fake port

2168
01:19:34,080 --> 01:19:37,600
right yeah there it is fake forward okay

2169
01:19:37,600 --> 01:19:39,600
and look at that that's that that was

2170
01:19:39,600 --> 01:19:40,640
super easy

2171
01:19:40,640 --> 01:19:43,840
you see all the popular reports here uh

2172
01:19:43,840 --> 01:19:45,679
there's more though that i can i can do

2173
01:19:45,679 --> 01:19:46,960
here there's there's a lot more that i

2174
01:19:46,960 --> 01:19:48,640
can do here but i'm gonna keep it simple

2175
01:19:48,640 --> 01:19:50,880
i do want to show labels though let's

2176
01:19:50,880 --> 01:19:51,760
let's do that

2177
01:19:51,760 --> 01:19:53,760
so that looks cool all right so you can

2178
01:19:53,760 --> 01:19:55,120
see that like

2179
01:19:55,120 --> 01:19:59,040
to uh 18.71 of my

2180
01:19:59,040 --> 01:20:02,400
malicious hits or on poor 23

2181
01:20:02,400 --> 01:20:05,520
uh yeah you can click on it

2182
01:20:05,520 --> 01:20:07,600
you can do that and if i change by the

2183
01:20:07,600 --> 01:20:09,440
way let me add a little bit uh

2184
01:20:09,440 --> 01:20:11,360
all right i'll do that later but i want

2185
01:20:11,360 --> 01:20:12,800
to show you this first uh

2186
01:20:12,800 --> 01:20:14,560
in order to add this to a dashboard for

2187
01:20:14,560 --> 01:20:16,159
example

2188
01:20:16,159 --> 01:20:19,679
i'm going to save this visual let's call

2189
01:20:19,679 --> 01:20:19,920
it

2190
01:20:19,920 --> 01:20:22,639
our pie all right it's at least a

2191
01:20:22,639 --> 01:20:23,760
doughnut in this case but i don't feel

2192
01:20:23,760 --> 01:20:25,120
like typing our bonus

2193
01:20:25,120 --> 01:20:28,719
let's go to pie uh confirm save

2194
01:20:28,719 --> 01:20:31,199
okay now this is saved we can also share

2195
01:20:31,199 --> 01:20:32,000
this very easily

2196
01:20:32,000 --> 01:20:33,760
with other people permalinks you can

2197
01:20:33,760 --> 01:20:35,199
even shorten the url

2198
01:20:35,199 --> 01:20:36,480
it's pretty cool but we're not going to

2199
01:20:36,480 --> 01:20:38,239
share this just yet we're going to

2200
01:20:38,239 --> 01:20:40,480
put this in a dashboard put more visuals

2201
01:20:40,480 --> 01:20:41,920
on the dashboard as well and share the

2202
01:20:41,920 --> 01:20:43,120
entire dashboard

2203
01:20:43,120 --> 01:20:45,280
so let's do that let's let's create

2204
01:20:45,280 --> 01:20:46,560
another visual

2205
01:20:46,560 --> 01:20:48,080
uh we have a pie chart right here let's

2206
01:20:48,080 --> 01:20:50,159
look at another one let's just create

2207
01:20:50,159 --> 01:20:52,960
um i don't know this is many options

2208
01:20:52,960 --> 01:20:54,560
here let's create a metric

2209
01:20:54,560 --> 01:20:57,679
uh on the same data uh

2210
01:20:57,679 --> 01:21:01,199
you see we have 800 um 800

2211
01:21:01,199 --> 01:21:03,440
logs in this index let's just let's just

2212
01:21:03,440 --> 01:21:04,719
take that for a second time let's not

2213
01:21:04,719 --> 01:21:06,480
mess with it too much so just keep that

2214
01:21:06,480 --> 01:21:09,600
like that i'll save this one as well we

2215
01:21:09,600 --> 01:21:10,400
will call this

2216
01:21:10,400 --> 01:21:14,480
a count log count right love

2217
01:21:14,480 --> 01:21:17,760
uh count there it is

2218
01:21:17,760 --> 01:21:20,880
and let's make one last visual just

2219
01:21:20,880 --> 01:21:23,600
just for fun uh let's let's let's put

2220
01:21:23,600 --> 01:21:24,320
some text

2221
01:21:24,320 --> 01:21:27,520
let's uh this is

2222
01:21:27,520 --> 01:21:31,280
a cool title all right or yeah

2223
01:21:31,280 --> 01:21:34,239
well actually let's let's say uh this

2224
01:21:34,239 --> 01:21:35,520
these are

2225
01:21:35,520 --> 01:21:38,880
uh popular ports all right

2226
01:21:38,880 --> 01:21:40,840
make sense you can play with the size

2227
01:21:40,840 --> 01:21:42,239
here uh

2228
01:21:42,239 --> 01:21:44,960
all kinds of stuff let's do that this is

2229
01:21:44,960 --> 01:21:45,679
just uh

2230
01:21:45,679 --> 01:21:49,199
just a quick little title save

2231
01:21:49,199 --> 01:21:52,639
i'm gonna call it port title

2232
01:21:52,639 --> 01:21:54,400
all right confirm save let's bring this

2233
01:21:54,400 --> 01:21:56,239
all together now all these visuals

2234
01:21:56,239 --> 01:21:58,080
onto a dashboard let's create a new

2235
01:21:58,080 --> 01:21:59,280
dashboard i clicked on this little

2236
01:21:59,280 --> 01:22:00,719
dashboard icon

2237
01:22:00,719 --> 01:22:04,239
create new dashboard all right um

2238
01:22:04,239 --> 01:22:06,159
and yeah let's add you see you can you

2239
01:22:06,159 --> 01:22:07,600
can add here visuals

2240
01:22:07,600 --> 01:22:09,199
and i have all these visuals i can add

2241
01:22:09,199 --> 01:22:10,719
let's start with the title

2242
01:22:10,719 --> 01:22:13,760
so let's add all this uh in fact

2243
01:22:13,760 --> 01:22:16,480
uh that's it let's add i made a nice

2244
01:22:16,480 --> 01:22:17,520
dashboard

2245
01:22:17,520 --> 01:22:19,440
so you can play around with the placing

2246
01:22:19,440 --> 01:22:21,520
with the size you can move this around

2247
01:22:21,520 --> 01:22:22,560
you can

2248
01:22:22,560 --> 01:22:25,760
you can do whatever you want in here um

2249
01:22:25,760 --> 01:22:29,040
in my visual i just put five uh

2250
01:22:29,040 --> 01:22:30,480
let's uh let me let me show you

2251
01:22:30,480 --> 01:22:32,080
something real quick uh let's go back to

2252
01:22:32,080 --> 01:22:33,600
our pie chart

2253
01:22:33,600 --> 01:22:37,440
all right uh pie chart in my query here

2254
01:22:37,440 --> 01:22:38,159
i

2255
01:22:38,159 --> 01:22:39,840
put five but i didn't realize i want to

2256
01:22:39,840 --> 01:22:41,280
show everything so

2257
01:22:41,280 --> 01:22:44,960
let's put a max of 500 popular ports to

2258
01:22:44,960 --> 01:22:46,000
show

2259
01:22:46,000 --> 01:22:48,480
and click play there it is now i can see

2260
01:22:48,480 --> 01:22:50,159
all the ports i'm actually using

2261
01:22:50,159 --> 01:22:53,600
all right let's go back to our dashboard

2262
01:22:53,600 --> 01:22:57,920
uh cool uh

2263
01:22:57,920 --> 01:23:01,920
let's delete let's add

2264
01:23:01,920 --> 01:23:04,400
did i save that i don't think i saved it

2265
01:23:04,400 --> 01:23:05,120
that's why

2266
01:23:05,120 --> 01:23:08,639
okay so again real quick

2267
01:23:08,639 --> 01:23:12,480
all right let's uh let's say

2268
01:23:12,480 --> 01:23:16,159
save confirm save there it is it should

2269
01:23:16,159 --> 01:23:18,000
actually update automatically here

2270
01:23:18,000 --> 01:23:21,280
and make changes uh oh i didn't say my

2271
01:23:21,280 --> 01:23:23,679
dash okay let's start over dashboard

2272
01:23:23,679 --> 01:23:27,360
add i want to add everything all right

2273
01:23:27,360 --> 01:23:30,480
everything is added uh that's cool i

2274
01:23:30,480 --> 01:23:31,440
want the title

2275
01:23:31,440 --> 01:23:35,679
to kind of be here instead of

2276
01:23:35,679 --> 01:23:38,719
instead of there uh

2277
01:23:38,719 --> 01:23:42,239
see it automatically puts it down and

2278
01:23:42,239 --> 01:23:44,960
let's replace that let's make this

2279
01:23:44,960 --> 01:23:45,520
smaller

2280
01:23:45,520 --> 01:23:46,960
so you see you can really customize this

2281
01:23:46,960 --> 01:23:48,800
with a bunch of heat maps and you can

2282
01:23:48,800 --> 01:23:52,000
append visuals together it's really

2283
01:23:52,000 --> 01:23:55,520
really cool count and the fun thing is

2284
01:23:55,520 --> 01:23:57,920
if i add more data so check this out

2285
01:23:57,920 --> 01:24:00,159
let's let's let's hit our honeypot again

2286
01:24:00,159 --> 01:24:02,960
if i add more data this is gonna uh

2287
01:24:02,960 --> 01:24:03,440
change

2288
01:24:03,440 --> 01:24:04,560
look at that it's gonna take into

2289
01:24:04,560 --> 01:24:06,080
account how many counts you see that

2290
01:24:06,080 --> 01:24:07,040
count down there

2291
01:24:07,040 --> 01:24:10,080
changing popular port ports so

2292
01:24:10,080 --> 01:24:13,520
uh this this is awesome you can then

2293
01:24:13,520 --> 01:24:17,040
uh share this with anyone that has

2294
01:24:17,040 --> 01:24:18,560
access to kibana of course you can

2295
01:24:18,560 --> 01:24:20,080
configure users and permissions

2296
01:24:20,080 --> 01:24:23,120
all that good stuff but there is um

2297
01:24:23,120 --> 01:24:26,159
just to wrap it up i um

2298
01:24:26,159 --> 01:24:28,320
uh there it is uh this is obviously a

2299
01:24:28,320 --> 01:24:30,080
lot more that you can do uh

2300
01:24:30,080 --> 01:24:32,239
elasticsearch is awesome you can look at

2301
01:24:32,239 --> 01:24:33,760
the if i had like a

2302
01:24:33,760 --> 01:24:35,600
full cluster i don't it's just a little

2303
01:24:35,600 --> 01:24:37,760
demo if i had a full cluster with a

2304
01:24:37,760 --> 01:24:39,199
bunch of nodes i can look at their

2305
01:24:39,199 --> 01:24:41,120
health status i can

2306
01:24:41,120 --> 01:24:43,920
see which ones are up or down i can i

2307
01:24:43,920 --> 01:24:44,320
can

2308
01:24:44,320 --> 01:24:46,400
look at the rate of requests that

2309
01:24:46,400 --> 01:24:47,520
clients are actually

2310
01:24:47,520 --> 01:24:51,199
getting our elastic search uh rules

2311
01:24:51,199 --> 01:24:52,800
there's tons of things you can do it's

2312
01:24:52,800 --> 01:24:55,199
very powerful it's open source it's

2313
01:24:55,199 --> 01:24:58,239
it's incredible so um

2314
01:24:58,239 --> 01:24:59,760
yeah that's that's really the main

2315
01:24:59,760 --> 01:25:01,280
features um

2316
01:25:01,280 --> 01:25:03,280
you're gonna find yourself using this a

2317
01:25:03,280 --> 01:25:04,960
lot the dev tools

2318
01:25:04,960 --> 01:25:06,960
i can't just say enough it's it's really

2319
01:25:06,960 --> 01:25:08,320
it's really convenient to just

2320
01:25:08,320 --> 01:25:11,840
write uh your your request to this to

2321
01:25:11,840 --> 01:25:14,080
the elastic and you see them right here

2322
01:25:14,080 --> 01:25:17,120
that's awesome as well

2323
01:25:17,120 --> 01:25:20,639
um and uh

2324
01:25:20,639 --> 01:25:23,920
and yeah uh so just to just to recap to

2325
01:25:23,920 --> 01:25:24,560
summarize

2326
01:25:24,560 --> 01:25:27,199
um we have our honeypot we're making

2327
01:25:27,199 --> 01:25:28,320
requests to it

2328
01:25:28,320 --> 01:25:30,400
uh let's actually look at our doctor

2329
01:25:30,400 --> 01:25:31,360
compose

2330
01:25:31,360 --> 01:25:34,320
that's a good uh all right cool so just

2331
01:25:34,320 --> 01:25:36,320
to recap we have our honeypot

2332
01:25:36,320 --> 01:25:38,480
we're making some malicious requests to

2333
01:25:38,480 --> 01:25:40,960
it using a script pretend for a second

2334
01:25:40,960 --> 01:25:43,440
this is like metasploit or anything

2335
01:25:43,440 --> 01:25:44,880
hitting your honeypot

2336
01:25:44,880 --> 01:25:48,320
instead of my little script um

2337
01:25:48,320 --> 01:25:51,360
and then uh the honeypot automatically

2338
01:25:51,360 --> 01:25:52,400
pushes

2339
01:25:52,400 --> 01:25:54,880
all those logs like receives uh to the

2340
01:25:54,880 --> 01:25:56,239
rabbit mq

2341
01:25:56,239 --> 01:25:58,880
where the celery workers consume from

2342
01:25:58,880 --> 01:25:59,679
that queue

2343
01:25:59,679 --> 01:26:01,920
manipulate the data in some sort of way

2344
01:26:01,920 --> 01:26:03,520
push it to elastic and then

2345
01:26:03,520 --> 01:26:06,000
you as the researcher or the analyzer

2346
01:26:06,000 --> 01:26:08,239
would have this awesome kibana tool

2347
01:26:08,239 --> 01:26:11,120
you can just quickly filter out finding

2348
01:26:11,120 --> 01:26:12,080
cool information

2349
01:26:12,080 --> 01:26:14,800
in your data if it's massive you see i

2350
01:26:14,800 --> 01:26:16,719
was able to just find injections from

2351
01:26:16,719 --> 01:26:18,400
the url if i'm looking for a specific

2352
01:26:18,400 --> 01:26:20,840
cve or something

2353
01:26:20,840 --> 01:26:23,600
um yeah you'll be you can store p caps

2354
01:26:23,600 --> 01:26:24,400
and you can you can do

2355
01:26:24,400 --> 01:26:25,920
you can get very creative with this it's

2356
01:26:25,920 --> 01:26:27,679
a very helpful tool so that's really the

2357
01:26:27,679 --> 01:26:28,800
recap

2358
01:26:28,800 --> 01:26:31,360
um that's it for me uh this is the

2359
01:26:31,360 --> 01:26:32,960
introduction to elk

2360
01:26:32,960 --> 01:26:35,920
i hope uh this was beneficial to you in

2361
01:26:35,920 --> 01:26:37,600
some sort of way

2362
01:26:37,600 --> 01:26:39,679
and uh thank you very much for listening

2363
01:26:39,679 --> 01:26:41,120
i know this was long there was a lot of

2364
01:26:41,120 --> 01:26:42,159
services

2365
01:26:42,159 --> 01:26:43,520
it's a little hard to follow so i

2366
01:26:43,520 --> 01:26:45,920
appreciate your patience and thank you

2367
01:26:45,920 --> 01:26:48,159
uh very much and special thank you to

2368
01:26:48,159 --> 01:26:49,600
jonathan again

2369
01:26:49,600 --> 01:26:51,920
taught me everything i know is an

2370
01:26:51,920 --> 01:26:52,800
elasticsearch

2371
01:26:52,800 --> 01:26:56,400
ninja so um thank you to you jonathan as

2372
01:26:56,400 --> 01:26:56,600
well

2373
01:26:56,600 --> 01:26:57,760
[Music]

2374
01:26:57,760 --> 01:26:59,920
all right and that's it for me uh you

2375
01:26:59,920 --> 01:27:01,600
can take it away uh

2376
01:27:01,600 --> 01:27:07,040
uh uh rod thank you very much

2377
01:27:12,800 --> 01:27:14,960
unless of course uh we have some

2378
01:27:14,960 --> 01:27:19,840
questions and stuff

2379
01:27:21,199 --> 01:27:24,320
great job avatar if there's any

2380
01:27:24,320 --> 01:27:28,560
questions that we anyone want to type in

2381
01:27:28,560 --> 01:27:33,840
the chat

2382
01:27:41,520 --> 01:27:43,679
one second robert is giving me some

2383
01:27:43,679 --> 01:27:45,199
issues

2384
01:27:45,199 --> 01:27:47,120
all right how does this type of setup

2385
01:27:47,120 --> 01:27:49,120
compared to a gener

2386
01:27:49,120 --> 01:27:53,040
in general to splunk set up

2387
01:27:54,400 --> 01:27:56,638
uh

2388
01:27:58,639 --> 01:28:01,840
one second

2389
01:28:02,159 --> 01:28:05,440
a little bit about what splunk compared

2390
01:28:05,440 --> 01:28:06,080
to

2391
01:28:06,080 --> 01:28:09,840
elastic i know splunk is not open

2392
01:28:09,840 --> 01:28:13,120
it is free for up to a certain amount of

2393
01:28:13,120 --> 01:28:14,080
ingested data

2394
01:28:14,080 --> 01:28:15,760
and searchable data and then you have to

2395
01:28:15,760 --> 01:28:17,679
pay for or elastic

2396
01:28:17,679 --> 01:28:19,920
you're mostly paying if you're paying

2397
01:28:19,920 --> 01:28:21,679
for enterprise uh

2398
01:28:21,679 --> 01:28:24,800
licenses it's mostly for not on the

2399
01:28:24,800 --> 01:28:25,520
actual

2400
01:28:25,520 --> 01:28:28,320
amount of data but more the additional

2401
01:28:28,320 --> 01:28:29,679
features that you could do

2402
01:28:29,679 --> 01:28:33,679
to the data like uh ai and

2403
01:28:33,679 --> 01:28:37,199
sso integration and stuff

2404
01:28:37,199 --> 01:28:40,400
i don't know what features

2405
01:28:40,400 --> 01:28:42,880
are unlocked with uh paid services for

2406
01:28:42,880 --> 01:28:45,360
splunk

2407
01:28:51,040 --> 01:28:53,679
was that a question for me jonathan well

2408
01:28:53,679 --> 01:28:54,719
there's a

2409
01:28:54,719 --> 01:28:56,320
question in the channel about how does

2410
01:28:56,320 --> 01:28:58,880
it compare in general to splunk

2411
01:28:58,880 --> 01:29:01,679
uh splunk setup i know splunk is

2412
01:29:01,679 --> 01:29:03,679
probably a little bit more of a turnkey

2413
01:29:03,679 --> 01:29:06,080
installation installation i don't know

2414
01:29:06,080 --> 01:29:10,000
how the installation of splunk is

2415
01:29:10,000 --> 01:29:13,760
it's easier splunk is way easier

2416
01:29:18,800 --> 01:29:22,480
but it costs more though yeah

2417
01:29:22,719 --> 01:29:25,280
yeah sorry i had some webex issues um is

2418
01:29:25,280 --> 01:29:27,360
there any questions

2419
01:29:27,360 --> 01:29:29,280
yes if you can if you want to answer

2420
01:29:29,280 --> 01:29:32,159
that question too uh

2421
01:29:32,159 --> 01:29:35,199
setup compares with uh

2422
01:29:35,199 --> 01:29:38,719
splunk oh i see uh to be honest i'm not

2423
01:29:38,719 --> 01:29:40,560
too familiar with splunk so i

2424
01:29:40,560 --> 01:29:42,480
apologize uh if anybody else knows the

2425
01:29:42,480 --> 01:29:44,320
answer to that um

2426
01:29:44,320 --> 01:29:48,960
feel free to jump in and answer that

2427
01:29:49,520 --> 01:29:53,600
uh i can i can go ahead awesome

2428
01:29:53,600 --> 01:29:57,120
yeah uh so splunk is easy to set up uh

2429
01:29:57,120 --> 01:29:59,600
it's just the same similar concepts with

2430
01:29:59,600 --> 01:30:00,239
the

2431
01:30:00,239 --> 01:30:03,760
uh how you do it with the wind lobbies

2432
01:30:03,760 --> 01:30:04,480
and go to

2433
01:30:04,480 --> 01:30:06,639
slogstash and directly go to the

2434
01:30:06,639 --> 01:30:07,600
elasticsearch

2435
01:30:07,600 --> 01:30:09,679
and stuff that you cut up the middle

2436
01:30:09,679 --> 01:30:10,960
ground process

2437
01:30:10,960 --> 01:30:13,679
uh where you go from uh their forwarders

2438
01:30:13,679 --> 01:30:15,600
which you have to install on the

2439
01:30:15,600 --> 01:30:18,239
assets and then it goes to directly to

2440
01:30:18,239 --> 01:30:21,839
splunk uh

2441
01:30:22,159 --> 01:30:24,880
the the mac and database of them uh so

2442
01:30:24,880 --> 01:30:26,719
the good part about splunk is there are

2443
01:30:26,719 --> 01:30:28,639
many features which you don't have in

2444
01:30:28,639 --> 01:30:29,840
elasticsearch

2445
01:30:29,840 --> 01:30:33,760
uh like you know joining tables and uh

2446
01:30:33,760 --> 01:30:35,600
pivoting through one data source to

2447
01:30:35,600 --> 01:30:36,880
other data source

2448
01:30:36,880 --> 01:30:39,520
uh where lastly likes a little bit on

2449
01:30:39,520 --> 01:30:40,239
that

2450
01:30:40,239 --> 01:30:41,920
but you can you can compensate that with

2451
01:30:41,920 --> 01:30:43,280
the new elastic search with

2452
01:30:43,280 --> 01:30:45,760
uh drill downs and all uh drill down

2453
01:30:45,760 --> 01:30:48,000
dashboards which they have newly

2454
01:30:48,000 --> 01:30:52,159
uh introduced in 7.10 version i guess

2455
01:30:52,159 --> 01:30:56,000
so uh yeah that that still

2456
01:30:56,000 --> 01:30:59,679
uh is there that point is there where

2457
01:30:59,679 --> 01:31:00,800
elastic is

2458
01:31:00,800 --> 01:31:04,400
kindly a little bit behind the splunk

2459
01:31:04,400 --> 01:31:08,239
usage wise setup wise it's easy

2460
01:31:08,239 --> 01:31:10,880
but still if you don't know how to what

2461
01:31:10,880 --> 01:31:12,159
locks you're ingesting and

2462
01:31:12,159 --> 01:31:13,760
if splunk doesn't know how to parse

2463
01:31:13,760 --> 01:31:16,159
those off then you have to perform

2464
01:31:16,159 --> 01:31:19,600
uh regular expressions in the splunk

2465
01:31:19,600 --> 01:31:22,960
and split the data out to different

2466
01:31:22,960 --> 01:31:25,920
different uh data types uh which creates

2467
01:31:25,920 --> 01:31:28,480
a overhead on splunk and

2468
01:31:28,480 --> 01:31:32,320
will reduce your search speed so

2469
01:31:32,320 --> 01:31:35,120
i hope that helps

2470
01:31:35,440 --> 01:31:38,480
yeah that's just it's very accurate um

2471
01:31:38,480 --> 01:31:45,839
any other questions

2472
01:31:46,560 --> 01:31:49,840
okay well like to thank evatar for his

2473
01:31:49,840 --> 01:31:50,560
time

2474
01:31:50,560 --> 01:31:53,679
and uh in this excellent presentation

2475
01:31:53,679 --> 01:31:58,080
and um i believe uh

2476
01:31:58,080 --> 01:32:00,239
somebody wants to download your demo do

2477
01:32:00,239 --> 01:32:01,920
you have a github or somewhere

2478
01:32:01,920 --> 01:32:04,800
where oh cool uh apparently i don't back

2479
01:32:04,800 --> 01:32:06,320
him i can push it to github i can put it

2480
01:32:06,320 --> 01:32:07,120
on discord

2481
01:32:07,120 --> 01:32:10,159
okay we can share it in

2482
01:32:10,159 --> 01:32:13,199
um the slack and discord we put the

2483
01:32:13,199 --> 01:32:14,800
discord invite

2484
01:32:14,800 --> 01:32:18,000
and uh stay tuned we will be announcing

2485
01:32:18,000 --> 01:32:19,199
our

2486
01:32:19,199 --> 01:32:22,320
our uh next meeting

2487
01:32:22,320 --> 01:32:24,080
probably the last one of the year so

2488
01:32:24,080 --> 01:32:25,360
stay um

2489
01:32:25,360 --> 01:32:28,719
stay safe thanks again to avatar

2490
01:32:28,719 --> 01:32:31,440
and i'll see you guys soon thanks for

2491
01:32:31,440 --> 01:32:38,320
having me

