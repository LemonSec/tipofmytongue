1
00:00:34,780 --> 00:01:04,790
and I'd go with it right now

2
00:00:40,960 --> 00:01:06,590
this is a 13th right now okay so so ha

3
00:01:04,790 --> 00:01:08,630
stay here Gerald's career is focused on

4
00:01:06,590 --> 00:01:11,450
security research security assessment

5
00:01:08,630 --> 00:01:14,060
pentesting consulting for corporations

6
00:01:11,450 --> 00:01:16,070
and government agencies conduct its fury

7
00:01:14,060 --> 00:01:18,110
research on numerous technical subjects

8
00:01:16,070 --> 00:01:19,399
release and wiping through security

9
00:01:18,110 --> 00:01:21,679
advisories that presented the

10
00:01:19,400 --> 00:01:23,570
information at numerous national and

11
00:01:21,680 --> 00:01:25,869
international security conferences

12
00:01:23,570 --> 00:01:28,070
including like that that posh Bhutan

13
00:01:25,869 --> 00:01:52,100
Derby con RSAC

14
00:01:28,070 --> 00:01:54,770
and hacking Paris okay so Darryl has

15
00:01:52,100 --> 00:01:59,809
been interviewed and quoted by several

16
00:01:54,770 --> 00:02:03,289
media outlets of locations MIT over done

17
00:01:59,810 --> 00:02:06,020
BC C Magazine threat posts and the

18
00:02:03,289 --> 00:02:06,890
register so anything you want to add to

19
00:02:06,020 --> 00:02:09,228
that there Darryl

20
00:02:06,890 --> 00:02:12,410
oh and he he doesn't really admit to

21
00:02:09,229 --> 00:02:14,840
this either but past but he is part

22
00:02:12,410 --> 00:02:16,490
maybe so we have a little connection

23
00:02:14,840 --> 00:02:19,250
there even though he was a submariner

24
00:02:16,490 --> 00:02:20,770
how are ya first that was on the target

25
00:02:19,250 --> 00:02:24,310
according to you right

26
00:02:20,770 --> 00:02:28,690
but you were targets to us so we would

27
00:02:24,310 --> 00:02:30,100
hunt you down right so anyways yeah we

28
00:02:28,690 --> 00:02:32,230
thought yeah and you guys are hiding

29
00:02:30,100 --> 00:02:34,420
somewhere yeah so but you know that's

30
00:02:32,230 --> 00:02:36,220
that's an inner service driver here

31
00:02:34,420 --> 00:02:36,790
between an avi speaking the surface and

32
00:02:36,220 --> 00:02:39,400
subsurface

33
00:02:36,790 --> 00:02:42,340
then we got the service rivalries that

34
00:02:39,400 --> 00:02:44,350
are between the Navy and the Air Force

35
00:02:42,340 --> 00:02:46,150
being here right bad so I like picking

36
00:02:44,350 --> 00:03:04,359
on the Air Force too so I might throw a

37
00:02:46,150 --> 00:03:07,270
few jabs out there as well okay here you

38
00:03:04,360 --> 00:03:09,750
have the house one that's why I got

39
00:03:07,270 --> 00:03:09,750
pockets

40
00:03:14,890 --> 00:03:22,040
so it's great to be here which I always

41
00:03:18,950 --> 00:03:23,569
enjoy 13 years kind of amazing I never

42
00:03:22,040 --> 00:03:27,890
thought this would happen we started to

43
00:03:23,569 --> 00:03:30,319
13 years ago so that's pretty good so in

44
00:03:27,890 --> 00:03:33,349
today's presentation we're gonna be

45
00:03:30,319 --> 00:03:35,660
going over some huge stuff we're gonna

46
00:03:33,349 --> 00:03:38,260
be covering a couple other simple things

47
00:03:35,660 --> 00:03:41,840
but generally you want to be looking at

48
00:03:38,260 --> 00:03:43,790
some various attacks against devices

49
00:03:41,840 --> 00:03:47,810
that can be used now if you've gone to

50
00:03:43,790 --> 00:03:49,340
the monthly all I ask some F meetings

51
00:03:47,810 --> 00:03:51,620
you may have seen fragments of some of

52
00:03:49,340 --> 00:03:55,340
the stuff I'm going to actually show and

53
00:03:51,620 --> 00:03:57,500
talk about today let's go ahead get

54
00:03:55,340 --> 00:04:01,720
started so we're not gonna have a lot of

55
00:03:57,500 --> 00:04:01,720
slides here this is very much

56
00:04:02,079 --> 00:04:09,410
demo intensive the say the least so what

57
00:04:06,170 --> 00:04:11,480
is you boot universal boot loader it's

58
00:04:09,410 --> 00:04:15,739
basically what it is what does it do it

59
00:04:11,480 --> 00:04:17,329
loads data from flash memory it makes

60
00:04:15,739 --> 00:04:20,000
the system come up run it loads the

61
00:04:17,329 --> 00:04:22,039
kernel and it executes sit it passes

62
00:04:20,000 --> 00:04:24,470
various arguments or commands to the

63
00:04:22,039 --> 00:04:26,000
kernel during the boot process to get it

64
00:04:24,470 --> 00:04:28,910
to do certain things that you want to

65
00:04:26,000 --> 00:04:32,120
define it's accessible via serial

66
00:04:28,910 --> 00:04:34,639
console in a lot of cases unless they've

67
00:04:32,120 --> 00:04:36,349
actually shut that off and it has

68
00:04:34,639 --> 00:04:37,789
minimal commands and we're gonna

69
00:04:36,349 --> 00:04:39,409
actually look at some of those command

70
00:04:37,789 --> 00:04:44,900
structures of you boot here in a little

71
00:04:39,410 --> 00:04:46,880
bit so why attack you boot other than

72
00:04:44,900 --> 00:04:49,030
because you just you can you know I

73
00:04:46,880 --> 00:04:52,070
think the thing is the gate root access

74
00:04:49,030 --> 00:04:54,500
often if there's any level of security

75
00:04:52,070 --> 00:04:57,289
been added to the device the vendor

76
00:04:54,500 --> 00:05:00,650
would have actually put a root password

77
00:04:57,289 --> 00:05:02,419
on there made it fairly complex or set

78
00:05:00,650 --> 00:05:06,020
it up that you can never actually log on

79
00:05:02,419 --> 00:05:08,630
with root itself seen cases like that

80
00:05:06,020 --> 00:05:10,250
add these levels of complexity so the go

81
00:05:08,630 --> 00:05:11,810
often is hey if I have a piece of

82
00:05:10,250 --> 00:05:13,880
hardware and I want to get root level

83
00:05:11,810 --> 00:05:16,190
access there's a number of reasons why I

84
00:05:13,880 --> 00:05:18,169
want to get root level access one may be

85
00:05:16,190 --> 00:05:20,090
hey I want to be able to pull the

86
00:05:18,169 --> 00:05:22,580
firmware off this is one method

87
00:05:20,090 --> 00:05:24,169
if I can log on I can easily transfer

88
00:05:22,580 --> 00:05:27,409
the firmware out of the flash memory

89
00:05:24,169 --> 00:05:29,539
either across the network to a USB or

90
00:05:27,410 --> 00:05:31,730
some other means to actually extract it

91
00:05:29,540 --> 00:05:34,840
off there versus having to get onto the

92
00:05:31,730 --> 00:05:37,880
device with you know JTAG or cor debug

93
00:05:34,840 --> 00:05:40,609
or some other debugger or physical

94
00:05:37,880 --> 00:05:42,260
taking chips off the board by getting

95
00:05:40,610 --> 00:05:44,090
this level of access it makes it

96
00:05:42,260 --> 00:05:47,150
possible for us to do that and we're

97
00:05:44,090 --> 00:05:49,219
actually going to be doing an example of

98
00:05:47,150 --> 00:05:52,159
that today also pulling some of the

99
00:05:49,220 --> 00:05:54,020
firmware off over to USB and one of the

100
00:05:52,160 --> 00:05:57,290
issues I ran into one of these devices

101
00:05:54,020 --> 00:06:06,830
this particular device when referencing

102
00:05:57,290 --> 00:06:07,940
the USB memory stick so one of the first

103
00:06:06,830 --> 00:06:09,710
things you want to do when you're

104
00:06:07,940 --> 00:06:11,719
actually looking at any device if I

105
00:06:09,710 --> 00:06:14,180
don't break my neck here is you want to

106
00:06:11,720 --> 00:06:15,229
actually dig into the actual hardware

107
00:06:14,180 --> 00:06:16,970
and really understand what you're

108
00:06:15,229 --> 00:06:19,820
looking at so I get a number of things

109
00:06:16,970 --> 00:06:23,680
marked out here and this happens to be

110
00:06:19,820 --> 00:06:27,080
my luma which is a mesh Wi-Fi device

111
00:06:23,680 --> 00:06:29,450
that's another typical current IOT

112
00:06:27,080 --> 00:06:32,030
technology but in this case is for

113
00:06:29,450 --> 00:06:33,710
creating a mesh Wi-Fi in your home so

114
00:06:32,030 --> 00:06:36,169
that your entire house is covered with

115
00:06:33,710 --> 00:06:37,880
Wi-Fi evenly and you transition from

116
00:06:36,169 --> 00:06:39,650
device to device to device

117
00:06:37,880 --> 00:06:41,650
seamlessly as you move through your

118
00:06:39,650 --> 00:06:43,969
house with whatever technology you have

119
00:06:41,650 --> 00:06:45,229
so in this case here there's a number of

120
00:06:43,970 --> 00:06:50,120
things I don't know if this thing has a

121
00:06:45,229 --> 00:06:51,740
laser pointer or not won't work on this

122
00:06:50,120 --> 00:06:53,730
should've brought my green one and

123
00:06:51,740 --> 00:06:56,250
everyone be like

124
00:06:53,730 --> 00:06:57,720
I don't know if anyone's ever seen that

125
00:06:56,250 --> 00:07:01,380
had a green I had a green laser pointer

126
00:06:57,720 --> 00:07:03,060
huh and and I would whenever I used that

127
00:07:01,380 --> 00:07:05,280
turnaround point of the screen it didn't

128
00:07:03,060 --> 00:07:06,900
know that the first three rows of every

129
00:07:05,280 --> 00:07:10,500
time I did this everyone would go up

130
00:07:06,900 --> 00:07:12,750
because it was so bright and then one

131
00:07:10,500 --> 00:07:15,270
time I was passing through us I was a

132
00:07:12,750 --> 00:07:17,040
sweeten with it turns out the laser

133
00:07:15,270 --> 00:07:18,479
pointers are illegal in that country so

134
00:07:17,040 --> 00:07:20,760
I was just traveling through the airport

135
00:07:18,480 --> 00:07:23,070
so they actually pulled me and put me in

136
00:07:20,760 --> 00:07:25,050
a holding room and had to call the cops

137
00:07:23,070 --> 00:07:28,260
in because I had this laser pointer that

138
00:07:25,050 --> 00:07:30,510
was like 50 milliwatts I think that the

139
00:07:28,260 --> 00:07:33,180
highest level you can have there is like

140
00:07:30,510 --> 00:07:34,159
5 millivolts so it was 10 times above

141
00:07:33,180 --> 00:07:36,600
legal limit

142
00:07:34,160 --> 00:07:37,950
so it's great but it's a little bright

143
00:07:36,600 --> 00:07:39,690
you can use it instead of a flashlight

144
00:07:37,950 --> 00:07:42,390
and go into the darkroom just shine it a

145
00:07:39,690 --> 00:07:44,700
whole room the light up but that's

146
00:07:42,390 --> 00:07:47,820
another story so this is a typical

147
00:07:44,700 --> 00:07:49,650
breakdown we have we have a number of

148
00:07:47,820 --> 00:07:51,270
pieces here and I think you can see most

149
00:07:49,650 --> 00:07:54,179
of these underneath this shield here is

150
00:07:51,270 --> 00:07:56,070
the RAM I should have taken this picture

151
00:07:54,180 --> 00:07:57,720
without the shield so one of the cool

152
00:07:56,070 --> 00:08:00,599
things with identifying Ram when you're

153
00:07:57,720 --> 00:08:02,970
looking at a device is you find a chip

154
00:08:00,600 --> 00:08:04,920
on there and you see the lines the

155
00:08:02,970 --> 00:08:06,900
circuit board runs going to it and these

156
00:08:04,920 --> 00:08:09,470
will little zigzag when you see the

157
00:08:06,900 --> 00:08:12,030
zigzag lines showing up to Aden ship

158
00:08:09,470 --> 00:08:13,830
often that means Ram Rams usually

159
00:08:12,030 --> 00:08:16,260
interface in a parallel fashion and

160
00:08:13,830 --> 00:08:18,719
these function is delay lines so all the

161
00:08:16,260 --> 00:08:20,730
circuit lines on the board are the even

162
00:08:18,720 --> 00:08:22,770
length so they'll squiggle them around

163
00:08:20,730 --> 00:08:24,930
it's a good indicator and then ARM

164
00:08:22,770 --> 00:08:28,080
processor then underneath these shields

165
00:08:24,930 --> 00:08:30,390
are typical various RF type devices and

166
00:08:28,080 --> 00:08:33,090
there's also a number of header on these

167
00:08:30,390 --> 00:08:34,439
devices here's one right here this is

168
00:08:33,090 --> 00:08:36,150
the header we're actually going to use

169
00:08:34,440 --> 00:08:38,310
these don't typically come on the board

170
00:08:36,150 --> 00:08:43,079
so you have to solder them on to be able

171
00:08:38,309 --> 00:08:46,560
to access and connect into it and this

172
00:08:43,080 --> 00:08:48,000
right here happens to be a flash chip in

173
00:08:46,560 --> 00:08:49,829
this particular board there's actually

174
00:08:48,000 --> 00:08:52,080
two flash chips there's one on the back

175
00:08:49,830 --> 00:08:55,380
side of it right below this one that is

176
00:08:52,080 --> 00:08:57,240
a smaller SOI see 8 foot print and it

177
00:08:55,380 --> 00:09:01,050
actually contains Ubin

178
00:08:57,240 --> 00:09:02,639
this one contains the kernel which makes

179
00:09:01,050 --> 00:09:04,349
the attack that we're going to show a

180
00:09:02,639 --> 00:09:06,329
little bit to get into you but a little

181
00:09:04,350 --> 00:09:08,850
more easier because there's a lot more

182
00:09:06,329 --> 00:09:14,339
delay within there because there are two

183
00:09:08,850 --> 00:09:16,920
chips so one of the first things we want

184
00:09:14,339 --> 00:09:19,050
to do is as I mentioned for you but you

185
00:09:16,920 --> 00:09:21,529
want to get access to a serial console

186
00:09:19,050 --> 00:09:23,819
so how do you identify a serial console

187
00:09:21,529 --> 00:09:25,860
there's a number of tools for doing it

188
00:09:23,819 --> 00:09:28,410
you through the jtagulator is one

189
00:09:25,860 --> 00:09:30,899
example it has the ability to hook up to

190
00:09:28,410 --> 00:09:33,449
all the pins on a device and you run the

191
00:09:30,899 --> 00:09:35,879
jtagulator for the UART function

192
00:09:33,449 --> 00:09:36,839
Universal async receive transmit and it

193
00:09:35,879 --> 00:09:40,259
will go through all the different

194
00:09:36,839 --> 00:09:42,119
permutations of the pins feeding data in

195
00:09:40,259 --> 00:09:44,759
and out and it'll denta Phi which ones

196
00:09:42,119 --> 00:09:47,069
receive which ones transmit and it also

197
00:09:44,759 --> 00:09:49,439
identified the balled array or the bits

198
00:09:47,069 --> 00:09:52,889
per second functionality of the actual

199
00:09:49,439 --> 00:09:55,019
transmit and receive you can also use a

200
00:09:52,889 --> 00:09:56,220
multimeter in multimeters you're

201
00:09:55,019 --> 00:09:58,529
actually gonna measure voltage

202
00:09:56,220 --> 00:10:00,600
variations I think that method like

203
00:09:58,529 --> 00:10:03,179
totally sucks and I'm thinking why the

204
00:10:00,600 --> 00:10:05,639
hell would you do that there's pretty

205
00:10:03,179 --> 00:10:08,540
much easier ways of doing it one of the

206
00:10:05,639 --> 00:10:11,879
ways I like to use is a logic analyzer

207
00:10:08,540 --> 00:10:13,889
so I use a say light logic analyzer and

208
00:10:11,879 --> 00:10:15,809
I've probably showed this and monthly

209
00:10:13,889 --> 00:10:17,939
meetings quite a bit it's a great little

210
00:10:15,809 --> 00:10:20,670
device you can buy them really dirt

211
00:10:17,939 --> 00:10:23,730
cheap and then pick them up for 10 15

212
00:10:20,670 --> 00:10:25,790
bucks I've never used a 10 15 dollar one

213
00:10:23,730 --> 00:10:27,839
but apparently they work for most

214
00:10:25,790 --> 00:10:30,509
technology because the most stuff

215
00:10:27,839 --> 00:10:33,240
doesn't have that fast of a bus this one

216
00:10:30,509 --> 00:10:35,819
here is about a $700 one so it's a

217
00:10:33,240 --> 00:10:38,699
little pricier this one's high-speed and

218
00:10:35,819 --> 00:10:40,110
it has eight channels so one of the

219
00:10:38,699 --> 00:10:41,579
things we want to do is go ahead and

220
00:10:40,110 --> 00:10:45,089
test for that so we're actually going to

221
00:10:41,579 --> 00:10:48,920
do a demo so we're gonna move over do

222
00:10:45,089 --> 00:10:48,920
quick logic analyzer demo here

223
00:11:16,399 --> 00:11:26,700
these PGA's they changed my screen size

224
00:11:20,190 --> 00:11:28,080
so dad yeah well if we go sometimes so

225
00:11:26,700 --> 00:11:33,120
what we're gonna do is we're gonna

226
00:11:28,080 --> 00:11:35,040
actually hook everything up here on

227
00:11:33,120 --> 00:11:37,680
these logic analyzers you have these

228
00:11:35,040 --> 00:11:39,360
cables here the top so we have two

229
00:11:37,680 --> 00:11:42,180
channels on here in this particular case

230
00:11:39,360 --> 00:11:43,800
the top wires are the actual channels

231
00:11:42,180 --> 00:11:46,349
there's four of them they run from black

232
00:11:43,800 --> 00:11:48,209
to orange the bottom ones are actually

233
00:11:46,350 --> 00:11:50,640
ground and they're all the same so

234
00:11:48,209 --> 00:11:53,219
they're all equal in this particular

235
00:11:50,640 --> 00:11:54,920
case I dunno which is ground on these

236
00:11:53,220 --> 00:11:57,139
pins

237
00:11:54,920 --> 00:12:03,889
because I like cheated and read my head

238
00:11:57,139 --> 00:12:08,420
redhead in my presentation our source is

239
00:12:03,889 --> 00:12:10,249
USB for this and then I'm just gonna

240
00:12:08,420 --> 00:12:13,399
hook a couple up here so we can get a

241
00:12:10,249 --> 00:12:16,609
general idea of using this but if you

242
00:12:13,399 --> 00:12:18,259
had let's say you had eight pins or

243
00:12:16,609 --> 00:12:19,639
eight pins you wanted to check you could

244
00:12:18,259 --> 00:12:22,399
hook all of them up with the logic

245
00:12:19,639 --> 00:12:25,459
analyzer and then I would use a

246
00:12:22,399 --> 00:12:34,009
multimeter and trace out looking for

247
00:12:25,459 --> 00:12:36,799
ground off the ground would be off the

248
00:12:34,009 --> 00:12:38,749
ground would be tied to the main

249
00:12:36,799 --> 00:12:40,459
backplane board or some kind of

250
00:12:38,749 --> 00:12:42,379
shielding the she odias would be ground

251
00:12:40,459 --> 00:12:44,479
so you taking one of the shielding as a

252
00:12:42,379 --> 00:12:47,959
measure from it to one of the pins and

253
00:12:44,480 --> 00:12:51,829
identify ground that way it's one method

254
00:12:47,959 --> 00:12:58,399
for doing that so let's come over here

255
00:12:51,829 --> 00:13:02,029
to so here's a sale a logic analyzer let

256
00:12:58,399 --> 00:13:03,499
me go ahead and clean this up a little

257
00:13:02,029 --> 00:13:05,029
bit it's gonna be a little hard to see

258
00:13:03,499 --> 00:13:08,259
because this thing changed the screen

259
00:13:05,029 --> 00:13:12,139
but I don't know how it looks behind you

260
00:13:08,259 --> 00:13:13,970
so right now we actually have three

261
00:13:12,139 --> 00:13:16,999
channels on this we're going to owe them

262
00:13:13,970 --> 00:13:18,619
up we can go ahead and run start on this

263
00:13:16,999 --> 00:13:21,259
what its gonna do it's gonna take

264
00:13:18,619 --> 00:13:23,089
samples and you set the sampling rate

265
00:13:21,259 --> 00:13:26,749
and how long you want it to run here we

266
00:13:23,089 --> 00:13:29,660
got it run set it for 20 seconds 20

267
00:13:26,749 --> 00:13:32,269
milliseconds sampling rate runs for 20

268
00:13:29,660 --> 00:13:35,400
seconds we're gonna look at these first

269
00:13:32,269 --> 00:13:37,440
three channels to start with

270
00:13:35,400 --> 00:13:39,600
and then what we want to do is we're

271
00:13:37,440 --> 00:13:40,890
gonna go ahead and start and then we're

272
00:13:39,600 --> 00:13:43,770
gonna plug this thing yeah so we're

273
00:13:40,890 --> 00:13:51,060
gonna capture the device during power so

274
00:13:43,770 --> 00:13:56,970
if we hit start let that run for 20

275
00:13:51,060 --> 00:13:58,890
seconds there's blue lights at the

276
00:13:56,970 --> 00:14:01,170
bottom so you know it's spinning around

277
00:13:58,890 --> 00:14:03,900
so at this point the device would go

278
00:14:01,170 --> 00:14:06,329
through and would go through the boot

279
00:14:03,900 --> 00:14:09,120
process good things up so here we are

280
00:14:06,330 --> 00:14:10,500
and if we shrink this down we can see we

281
00:14:09,120 --> 00:14:24,779
actually have data on one of these

282
00:14:10,500 --> 00:14:26,339
channels on channel one okay fairly

283
00:14:24,779 --> 00:14:28,950
straightforward but we want to decode

284
00:14:26,339 --> 00:14:30,690
watching analyzers have a number of

285
00:14:28,950 --> 00:14:32,610
different decoders let's show more all

286
00:14:30,690 --> 00:14:35,330
the analyzer so you can see hopefully

287
00:14:32,610 --> 00:14:35,330
you can see that

288
00:14:35,930 --> 00:14:42,599
so you have all these different

289
00:14:37,800 --> 00:14:44,910
analyzers spi can bus JTAG Manchester

290
00:14:42,600 --> 00:14:47,040
and codeine so there's all kinds of

291
00:14:44,910 --> 00:14:49,259
stuff here but we're gonna rested a sec

292
00:14:47,040 --> 00:14:51,779
that's what we're looking for and I can

293
00:14:49,259 --> 00:14:55,019
quickly think of this as being a sink

294
00:14:51,779 --> 00:14:57,480
mainly because one we don't see all

295
00:14:55,019 --> 00:15:01,019
these channels with data form if you get

296
00:14:57,480 --> 00:15:03,990
a bus or a header and all the channels

297
00:15:01,019 --> 00:15:05,610
have data on it it's probably going to

298
00:15:03,990 --> 00:15:09,360
be some other type of communication

299
00:15:05,610 --> 00:15:11,190
protocol often when I see that I can go

300
00:15:09,360 --> 00:15:14,420
look at that and find out and I've seen

301
00:15:11,190 --> 00:15:17,069
this in some cases where it would be SPI

302
00:15:14,420 --> 00:15:20,069
where you have data in date out between

303
00:15:17,069 --> 00:15:21,810
two devices that'll show multiple

304
00:15:20,069 --> 00:15:24,120
channels where you have a clock channel

305
00:15:21,810 --> 00:15:25,529
you'll have a data channel you'll have

306
00:15:24,120 --> 00:15:27,779
it on an off Channel and then you'll

307
00:15:25,529 --> 00:15:31,589
have another data channel typically

308
00:15:27,779 --> 00:15:33,810
that's not going to be P York but in

309
00:15:31,589 --> 00:15:35,850
this case where the channel the pin

310
00:15:33,810 --> 00:15:38,758
before and the pin after blank for the

311
00:15:35,850 --> 00:15:41,490
most part so we knows more likely that

312
00:15:38,759 --> 00:15:43,889
this probably asynchronous communication

313
00:15:41,490 --> 00:15:46,829
but the best way to tell is you want to

314
00:15:43,889 --> 00:15:48,149
be able to use asynchronous decoder on

315
00:15:46,829 --> 00:15:51,800
it and that's what we're getting ready

316
00:15:48,149 --> 00:15:54,089
to do here so we know it's channel 1

317
00:15:51,800 --> 00:15:56,160
there's the channel next thing is

318
00:15:54,089 --> 00:15:58,800
figuring out the bold rate and that's

319
00:15:56,160 --> 00:16:00,750
kind of interesting there's a whole

320
00:15:58,800 --> 00:16:02,189
series of standard bulb rates most

321
00:16:00,750 --> 00:16:04,680
vendors will use one of the standard

322
00:16:02,190 --> 00:16:07,620
bold rates they'll want to use 8 bits

323
00:16:04,680 --> 00:16:09,689
one stop bit no parity it's very common

324
00:16:07,620 --> 00:16:12,060
it's typically what you see I've only

325
00:16:09,690 --> 00:16:14,730
seen something different one other time

326
00:16:12,060 --> 00:16:17,099
I was doing a test on the device here a

327
00:16:14,730 --> 00:16:18,750
number of months ago and it would boot

328
00:16:17,100 --> 00:16:20,339
up and you could actually see the data

329
00:16:18,750 --> 00:16:23,279
flowing and then all at once it would

330
00:16:20,339 --> 00:16:25,319
just scrambled soon as the kernel loaded

331
00:16:23,279 --> 00:16:27,810
it was scrambled turned out they were

332
00:16:25,319 --> 00:16:29,880
actually changing the parity bit in the

333
00:16:27,810 --> 00:16:31,439
middle of the flow so soon as the kernel

334
00:16:29,880 --> 00:16:32,439
loaded up they changed the parity bit

335
00:16:31,439 --> 00:16:34,750
only communication

336
00:16:32,440 --> 00:16:35,740
totally messed it all up and it took me

337
00:16:34,750 --> 00:16:38,950
a while to figure that out

338
00:16:35,740 --> 00:16:41,250
it drove me crazy but you need to pick

339
00:16:38,950 --> 00:16:44,110
one of the standard baud rates and often

340
00:16:41,250 --> 00:16:47,950
usually see I think it's about three

341
00:16:44,110 --> 00:16:50,440
eight four five six seven zero zero or

342
00:16:47,950 --> 00:16:51,880
one one five two hundred one one five

343
00:16:50,440 --> 00:16:54,010
two hundred this seems to be the most

344
00:16:51,880 --> 00:16:58,630
common so I'm really easy I just guess

345
00:16:54,010 --> 00:17:00,520
it if you decide it's not one of these

346
00:16:58,630 --> 00:17:02,230
there's the automated function that was

347
00:17:00,520 --> 00:17:04,869
there so you could actually do the

348
00:17:02,230 --> 00:17:07,510
automate it that's if he it works maybe

349
00:17:04,869 --> 00:17:09,188
20% of the time rest of time doesn't

350
00:17:07,510 --> 00:17:11,260
work with a

351
00:17:09,189 --> 00:17:13,930
and then also you can actually measure

352
00:17:11,260 --> 00:17:17,589
it so if you take one of the right here

353
00:17:13,930 --> 00:17:19,329
the narrowest pulse and you take that

354
00:17:17,589 --> 00:17:22,899
measurement and divide that into one

355
00:17:19,329 --> 00:17:24,609
second you're gonna get the bit rate so

356
00:17:22,900 --> 00:17:29,020
if you like doing math I don't I prefer

357
00:17:24,609 --> 00:17:31,149
just gessie way much easier so as you

358
00:17:29,020 --> 00:17:32,470
see here not only if you see that over

359
00:17:31,150 --> 00:17:37,360
to the right of the screen up here you

360
00:17:32,470 --> 00:17:40,210
see it says format log what we're seeing

361
00:17:37,360 --> 00:17:46,060
here is a device Buddha we can also see

362
00:17:40,210 --> 00:17:49,810
it at the top see you across the top

363
00:17:46,060 --> 00:17:52,750
there serial if you go down through here

364
00:17:49,810 --> 00:17:54,629
eventually see boots so you can see so

365
00:17:52,750 --> 00:17:57,900
now we know that we're looking at

366
00:17:54,630 --> 00:17:57,900
asynchronous communication

367
00:18:00,660 --> 00:18:16,330
any questions yes mam anyone care okay

368
00:18:13,050 --> 00:18:18,430
so okay we're making good time I don't

369
00:18:16,330 --> 00:18:20,379
want to run out of time so the next

370
00:18:18,430 --> 00:18:22,540
thing we want to do is break into u-boot

371
00:18:20,380 --> 00:18:24,220
now we have a serial connection on the

372
00:18:22,540 --> 00:18:25,450
device we can watch the device boot up

373
00:18:24,220 --> 00:18:26,830
and we'll do that in a minute we'll go

374
00:18:25,450 --> 00:18:28,930
through a watchman device boot up

375
00:18:26,830 --> 00:18:31,360
because in the boot up process you see a

376
00:18:28,930 --> 00:18:34,480
lot of interesting data you can identify

377
00:18:31,360 --> 00:18:37,300
in this case you can identify often the

378
00:18:34,480 --> 00:18:39,550
chipsets that are actually used you can

379
00:18:37,300 --> 00:18:41,800
identify where it's loading stuff into

380
00:18:39,550 --> 00:18:44,230
memory where it's executing data in

381
00:18:41,800 --> 00:18:46,930
memory it'll actually layout the

382
00:18:44,230 --> 00:18:48,520
partitions a lot of times as the system

383
00:18:46,930 --> 00:18:50,230
boots up so you can define the various

384
00:18:48,520 --> 00:18:52,120
partitions that are defined on the flash

385
00:18:50,230 --> 00:18:54,160
chip so it's a lot of useful information

386
00:18:52,120 --> 00:18:59,409
that you can use later on for attacking

387
00:18:54,160 --> 00:19:03,040
the device so one of the things with

388
00:18:59,410 --> 00:19:06,640
with boot when a device boots there's

389
00:19:03,040 --> 00:19:09,010
this functionality called boot delay you

390
00:19:06,640 --> 00:19:12,310
know right here boot delay the second

391
00:19:09,010 --> 00:19:16,650
one down there so most devices have boot

392
00:19:12,310 --> 00:19:20,290
delay is set to zero or turned off okay

393
00:19:16,650 --> 00:19:22,360
and when they do that you don't have you

394
00:19:20,290 --> 00:19:24,760
can't hit a key if it's set to anything

395
00:19:22,360 --> 00:19:26,830
other than zero it'll come to that spot

396
00:19:24,760 --> 00:19:28,990
during the boot and it'll start counting

397
00:19:26,830 --> 00:19:30,520
down and during that countdown you can

398
00:19:28,990 --> 00:19:32,830
just hit any key and you can break out

399
00:19:30,520 --> 00:19:34,629
into human console so the protection

400
00:19:32,830 --> 00:19:37,060
routine for most you boots is to set

401
00:19:34,630 --> 00:19:39,340
this to zero or not set it at all if

402
00:19:37,060 --> 00:19:43,360
it's set at zero the interesting thing

403
00:19:39,340 --> 00:19:46,520
is and and this may work in rare cases

404
00:19:43,360 --> 00:19:49,790
you can like control C

405
00:19:46,520 --> 00:19:52,730
or control-d as the system is booting up

406
00:19:49,790 --> 00:19:54,379
as fast as you can and cause an air

407
00:19:52,730 --> 00:19:57,110
conditioner don't cause it to drop into

408
00:19:54,380 --> 00:20:01,190
you but if it's set to a boot delay of

409
00:19:57,110 --> 00:20:02,899
zero but as the system is fast and boots

410
00:20:01,190 --> 00:20:05,750
fast you're not gonna pull it off

411
00:20:02,900 --> 00:20:08,300
because the response and the reading of

412
00:20:05,750 --> 00:20:10,850
the keyboard on the UART is so delayed

413
00:20:08,300 --> 00:20:17,419
it probably wouldn't work in most cases

414
00:20:10,850 --> 00:20:19,459
it won't work on this one here you

415
00:20:17,420 --> 00:20:21,250
probably could yeah I mean there's a

416
00:20:19,460 --> 00:20:26,170
number of ways of doing that yeah so

417
00:20:21,250 --> 00:20:26,170
yeah what's that

418
00:20:27,490 --> 00:20:32,440
well the never who designed the

419
00:20:29,630 --> 00:20:34,820
equipment this is defined on you Bootsy

420
00:20:32,440 --> 00:20:37,490
that's a you boot environment variable

421
00:20:34,820 --> 00:20:39,620
that's set in here a boot delay of 0

422
00:20:37,490 --> 00:20:41,270
it's all comes down in the manufacturer

423
00:20:39,620 --> 00:20:43,309
I've seen them set at 3 I've seen him

424
00:20:41,270 --> 00:20:45,910
said at 5 I seem set is zero

425
00:20:43,309 --> 00:20:51,200
I've seen them not in there at all ok

426
00:20:45,910 --> 00:20:54,140
boot delay I'm sorry au boot also is not

427
00:20:51,200 --> 00:20:56,990
a standard package every install on

428
00:20:54,140 --> 00:20:59,330
every device I've looked at almost

429
00:20:56,990 --> 00:21:01,429
inevitably you boot they compile it with

430
00:20:59,330 --> 00:21:04,040
the functionality and the command set

431
00:21:01,429 --> 00:21:06,350
that they want to use so I've seen them

432
00:21:04,040 --> 00:21:09,230
compiled with everything and I've seen

433
00:21:06,350 --> 00:21:11,330
them compiled with very little so every

434
00:21:09,230 --> 00:21:12,740
manufacturer device will define what

435
00:21:11,330 --> 00:21:14,510
they want their you boot to look like

436
00:21:12,740 --> 00:21:18,250
and they'll define what they want their

437
00:21:14,510 --> 00:21:18,250
boot delay to be set at

438
00:21:20,309 --> 00:21:26,830
okay I'm assuming here okay so one of

439
00:21:23,950 --> 00:21:28,690
the attacks and I think a number of you

440
00:21:26,830 --> 00:21:30,879
see me do this on a number different

441
00:21:28,690 --> 00:21:33,549
device on a Hugh but this ones were is

442
00:21:30,880 --> 00:21:36,250
very similar and the way to break out of

443
00:21:33,549 --> 00:21:41,259
a boot sequence when boot delays set to

444
00:21:36,250 --> 00:21:44,230
zero is you boot if it airs out loading

445
00:21:41,259 --> 00:21:48,340
the kernel will actually fail into its

446
00:21:44,230 --> 00:21:51,909
console the exceptions to that I think

447
00:21:48,340 --> 00:21:54,000
the latest version of you boo actually

448
00:21:51,909 --> 00:21:56,980
will just cause the device to keep booty

449
00:21:54,000 --> 00:21:58,690
okay I have yet to find a vendor

450
00:21:56,980 --> 00:22:01,600
actually using the latest version you

451
00:21:58,690 --> 00:22:05,049
but and I probably tear apart 4050

452
00:22:01,600 --> 00:22:07,149
devices a year no one's doing it the

453
00:22:05,049 --> 00:22:10,480
other thing is if they're using secure

454
00:22:07,149 --> 00:22:12,370
boot or a secure version of you boot

455
00:22:10,480 --> 00:22:14,080
there's kind of an add-on functionality

456
00:22:12,370 --> 00:22:16,689
can be compiled into it that gives it a

457
00:22:14,080 --> 00:22:18,730
level of security those cases will not

458
00:22:16,690 --> 00:22:22,590
allow you to drop into the actual

459
00:22:18,730 --> 00:22:25,000
console but the way we get in there is

460
00:22:22,590 --> 00:22:26,379
if we look at this wind bond chip up

461
00:22:25,000 --> 00:22:28,629
here this happens to be the memory chip

462
00:22:26,379 --> 00:22:31,330
in this particular case that contains

463
00:22:28,629 --> 00:22:34,389
the kernel what I'm pointing at is pin 2

464
00:22:31,330 --> 00:22:36,340
which is data out so it's data being

465
00:22:34,389 --> 00:22:39,158
read out of the flash chip at that point

466
00:22:36,340 --> 00:22:41,340
there so the way the attack works is

467
00:22:39,159 --> 00:22:43,929
when the device boots up you boot loads

468
00:22:41,340 --> 00:22:45,580
and then once you boots load it makes a

469
00:22:43,929 --> 00:22:47,769
call to the kernel which happens to be

470
00:22:45,580 --> 00:22:50,649
this particular flash chip and at that

471
00:22:47,769 --> 00:22:53,379
point if you short that pin out pin 0 to

472
00:22:50,649 --> 00:22:55,299
ground no data can get out at that point

473
00:22:53,379 --> 00:22:59,459
it can load kernel to force the device

474
00:22:55,299 --> 00:22:59,460
to fail into a yubu console

475
00:22:59,630 --> 00:23:03,630
that doesn't mean you can go into one of

476
00:23:02,010 --> 00:23:07,980
these devices and just start shorting

477
00:23:03,630 --> 00:23:12,540
 out okay know what you're shorting

478
00:23:07,980 --> 00:23:15,140
out that philosophy will most often end

479
00:23:12,540 --> 00:23:18,120
up with a brick device or smoke device

480
00:23:15,140 --> 00:23:21,630
now I've used this attack before and

481
00:23:18,120 --> 00:23:24,629
avid fail I was doing an assessment here

482
00:23:21,630 --> 00:23:26,160
probably about six months ago and we had

483
00:23:24,630 --> 00:23:28,770
a device and I was trying to force it

484
00:23:26,160 --> 00:23:33,210
into yubu and I went through this

485
00:23:28,770 --> 00:23:35,160
process the exact same chip and it was

486
00:23:33,210 --> 00:23:38,340
all coming off the same chip so it

487
00:23:35,160 --> 00:23:40,260
wasn't like I was at a separate u-boot

488
00:23:38,340 --> 00:23:42,720
ship and then the kernel chip is all one

489
00:23:40,260 --> 00:23:44,129
chip so timing is everything so you

490
00:23:42,720 --> 00:23:47,550
could easily do it a hundred times

491
00:23:44,130 --> 00:23:49,980
before you get it to work I made it

492
00:23:47,550 --> 00:23:52,909
about sixty times before I totally wiped

493
00:23:49,980 --> 00:23:55,920
the Hebrew down it just went away

494
00:23:52,910 --> 00:23:58,110
at that point it wouldn't do nothing it

495
00:23:55,920 --> 00:24:00,360
would just come up to a point and fail

496
00:23:58,110 --> 00:24:02,969
you're loading boot image and didn't go

497
00:24:00,360 --> 00:24:04,560
any further we solved the problem by

498
00:24:02,970 --> 00:24:06,720
pulling the chip and then reading the

499
00:24:04,560 --> 00:24:09,780
memory because apparently I didn't

500
00:24:06,720 --> 00:24:11,910
destroy the chip well I may have totally

501
00:24:09,780 --> 00:24:13,710
must had chip up pretty bad we pulled

502
00:24:11,910 --> 00:24:17,280
the chip dropped it into a really

503
00:24:13,710 --> 00:24:19,920
high-end reader and it said I have no

504
00:24:17,280 --> 00:24:22,110
idea what this chip is I told it what

505
00:24:19,920 --> 00:24:24,210
the chip is and it said it's ID doesn't

506
00:24:22,110 --> 00:24:26,250
validate incorrectly I said we'll just

507
00:24:24,210 --> 00:24:28,050
ignore it anyways and it still dumped

508
00:24:26,250 --> 00:24:30,390
all the memory out so that's a

509
00:24:28,050 --> 00:24:35,040
difference between a cheap $100 chip

510
00:24:30,390 --> 00:24:37,330
reader in a $4,000 cheaper here

511
00:24:35,040 --> 00:24:39,450
so I think the next phase is we're

512
00:24:37,330 --> 00:24:50,699
actually going to get into demo stuff I

513
00:24:39,450 --> 00:24:58,440
can't run out of time here just power

514
00:24:50,700 --> 00:25:02,290
plug here so what we're gonna do now is

515
00:24:58,440 --> 00:25:05,950
we're gonna go ahead and hook a FTDI

516
00:25:02,290 --> 00:25:10,770
device this is a shipra you are FTDI

517
00:25:05,950 --> 00:25:10,770
device happens to be one I like to use

518
00:25:13,650 --> 00:25:18,360
now let's see this thing boot up the

519
00:25:22,560 --> 00:25:28,270
interesting thing when hooking you are

520
00:25:25,750 --> 00:25:29,560
it up you have transmit and receive so

521
00:25:28,270 --> 00:25:32,490
when you hook into a device it's

522
00:25:29,560 --> 00:25:35,139
important you hook transmit to receive

523
00:25:32,490 --> 00:25:37,870
receive the transmit so they're crossed

524
00:25:35,140 --> 00:25:41,100
over if you hook it up and you're

525
00:25:37,870 --> 00:25:44,760
turning on and nothing happens swallow

526
00:25:41,100 --> 00:25:44,760
it's usually the fix

527
00:25:56,020 --> 00:26:01,040
okay we got to pick the serial port 1 1

528
00:25:59,030 --> 00:26:04,100
5 200 which is what we determine when we

529
00:26:01,040 --> 00:26:07,090
use a logic analyzer and we're going to

530
00:26:04,100 --> 00:26:07,090
have connected device

531
00:26:08,080 --> 00:26:23,899
okay we need to refresh this okay there

532
00:26:20,450 --> 00:26:30,710
we go let's go ahead and put power to it

533
00:26:23,900 --> 00:26:32,090
and see what happens so this boots up

534
00:26:30,710 --> 00:26:35,360
we're gonna see a lot of interesting

535
00:26:32,090 --> 00:26:41,449
things come through here sorry about

536
00:26:35,360 --> 00:26:44,149
that that was the first one with a bunch

537
00:26:41,450 --> 00:26:52,100
of zeros there happened to be the new

538
00:26:44,150 --> 00:26:54,760
boot ship and its structure they went

539
00:26:52,100 --> 00:26:54,760
through pretty quick

540
00:26:55,380 --> 00:26:59,850
there's an interesting field right there

541
00:26:57,270 --> 00:27:01,980
where it says press use f1 key to hit

542
00:26:59,850 --> 00:27:04,860
enter we're going to look at that you'll

543
00:27:01,980 --> 00:27:07,410
often see this show up on int type

544
00:27:04,860 --> 00:27:09,959
devices and if we have time we're going

545
00:27:07,410 --> 00:27:11,990
to jump over and look at that because it

546
00:27:09,960 --> 00:27:14,250
actually puts it in a single user mode

547
00:27:11,990 --> 00:27:16,320
which basically gives you route level

548
00:27:14,250 --> 00:27:20,340
access to a device which is cool but

549
00:27:16,320 --> 00:27:23,549
remember it's it's running it net1 so

550
00:27:20,340 --> 00:27:24,720
there's no functionality there's no

551
00:27:23,549 --> 00:27:29,990
network there's none of that type of

552
00:27:24,720 --> 00:27:34,490
stuff so it's still going at it

553
00:27:29,990 --> 00:27:37,500
so the attack we're gonna do today so

554
00:27:34,490 --> 00:27:39,179
this thing's booted up we'll go back to

555
00:27:37,500 --> 00:27:40,770
it is we're going to do the ping glitch

556
00:27:39,179 --> 00:27:43,409
we're gonna get it in the console take a

557
00:27:40,770 --> 00:27:45,179
look at that type of stuff there if you

558
00:27:43,409 --> 00:27:46,799
see me do the attack on the Hugh the

559
00:27:45,179 --> 00:27:48,840
Hugh device actually had the root

560
00:27:46,799 --> 00:27:52,440
password in the environment variables on

561
00:27:48,840 --> 00:27:55,889
you big really unusual but it was just

562
00:27:52,440 --> 00:27:57,630
funny from a stupid standpoint in this

563
00:27:55,890 --> 00:27:59,669
particular case that's not it so how do

564
00:27:57,630 --> 00:28:02,669
we get access you can't crack these

565
00:27:59,669 --> 00:28:05,010
passwords we've tried that we've put fed

566
00:28:02,669 --> 00:28:06,750
them into pretty good crackers so you

567
00:28:05,010 --> 00:28:08,730
know we go I've gone in and I pulled the

568
00:28:06,750 --> 00:28:10,890
actual hashes off of it weren't able to

569
00:28:08,730 --> 00:28:13,409
crack them so what we're gonna do from

570
00:28:10,890 --> 00:28:15,780
this is I started thinking well hey can

571
00:28:13,409 --> 00:28:18,510
I actually do a TFTP call from this

572
00:28:15,780 --> 00:28:20,700
device from u-boot and actually call a

573
00:28:18,510 --> 00:28:22,650
kernel from another image that will load

574
00:28:20,700 --> 00:28:24,480
up give me root access with the goal to

575
00:28:22,650 --> 00:28:26,909
be able to get access to the actual

576
00:28:24,480 --> 00:28:29,580
memory chips so what I'm gonna demo

577
00:28:26,909 --> 00:28:31,890
about forks is get right at half works

578
00:28:29,580 --> 00:28:33,689
because we have two chips and I still

579
00:28:31,890 --> 00:28:37,169
haven't had time to go back around and

580
00:28:33,690 --> 00:28:39,630
define some settings and recompile my

581
00:28:37,169 --> 00:28:42,419
kernel image because you have to define

582
00:28:39,630 --> 00:28:44,850
the actual chip and the device tree

583
00:28:42,419 --> 00:28:47,130
correctly here and there's a lot of

584
00:28:44,850 --> 00:28:48,780
methods for pulling that data which we

585
00:28:47,130 --> 00:28:52,169
pulled the data we just haven't gone in

586
00:28:48,780 --> 00:28:54,059
we have to rewrite some HD files I can't

587
00:28:52,169 --> 00:28:56,970
remember I think they're HD files to

588
00:28:54,059 --> 00:28:58,710
actually build that chip into the image

589
00:28:56,970 --> 00:28:59,490
for compiling which is something we're

590
00:28:58,710 --> 00:29:01,590
gonna work on

591
00:28:59,490 --> 00:29:03,960
we haven't done that yet but we're still

592
00:29:01,590 --> 00:29:05,159
gonna show the process so see we get a

593
00:29:03,960 --> 00:29:07,020
root log on we don't know what the

594
00:29:05,160 --> 00:29:20,000
password is we want to get a level of

595
00:29:07,020 --> 00:29:20,000
access so let's go ahead plug the power

596
00:29:24,110 --> 00:29:40,770
switch over to another microscope speed

597
00:29:28,320 --> 00:29:48,450
microscope so here happens to be that

598
00:29:40,770 --> 00:29:51,960
flash chip and here we have a grounding

599
00:29:48,450 --> 00:29:54,179
probe it's all hooked up the ground and

600
00:29:51,960 --> 00:29:57,240
what we would do is when the sink boots

601
00:29:54,179 --> 00:30:02,370
up we would short this pin out right

602
00:29:57,240 --> 00:30:05,880
there so that's the goal but we have to

603
00:30:02,370 --> 00:30:08,729
know where we're at so we're gonna look

604
00:30:05,880 --> 00:30:12,410
out of the corner eye and see whether

605
00:30:08,730 --> 00:30:12,410
data starting to slow here or not

606
00:30:16,390 --> 00:30:19,250
let's see if we can get it right the

607
00:30:18,380 --> 00:30:24,460
first time

608
00:30:19,250 --> 00:30:24,460
I usually don't want people to watch it

609
00:30:32,050 --> 00:30:40,370
so here we've dropped out to the u-boot

610
00:30:37,190 --> 00:30:43,760
console as you can see air in it air air

611
00:30:40,370 --> 00:30:46,489
air so empty and detection so basically

612
00:30:43,760 --> 00:30:49,250
failed trying to gain access to the

613
00:30:46,490 --> 00:30:53,420
Colonel's show here we have a lot of

614
00:30:49,250 --> 00:30:55,310
environment variables so we look at the

615
00:30:53,420 --> 00:31:00,800
environment variables in this particular

616
00:30:55,310 --> 00:31:03,500
case that set up a number of different

617
00:31:00,800 --> 00:31:06,520
things here is the Boonton command when

618
00:31:03,500 --> 00:31:08,990
boot delay would boot delay is activated

619
00:31:06,520 --> 00:31:11,870
that's the only time boot command will

620
00:31:08,990 --> 00:31:14,810
actually work so if there's no boot

621
00:31:11,870 --> 00:31:17,689
delay on the system boot the boot

622
00:31:14,810 --> 00:31:20,419
command does not work you have the bald

623
00:31:17,690 --> 00:31:23,210
rate here we also have environment

624
00:31:20,420 --> 00:31:25,340
variables you see some of the most

625
00:31:23,210 --> 00:31:26,840
interesting environment variables and I

626
00:31:25,340 --> 00:31:28,959
don't see them anywhere now where the

627
00:31:26,840 --> 00:31:28,959
yet

628
00:31:33,480 --> 00:31:47,440
now can you scroll past that product

629
00:31:37,600 --> 00:31:51,699
test and be parts okay boo tardes right

630
00:31:47,440 --> 00:31:54,549
here boo darks these are arguments are

631
00:31:51,700 --> 00:31:56,890
going to be passed to the colonel or

632
00:31:54,549 --> 00:31:58,480
during the boot process in this bit of

633
00:31:56,890 --> 00:32:01,540
your case it's just to finding the root

634
00:31:58,480 --> 00:32:03,190
filesystem here what you can do if you

635
00:32:01,540 --> 00:32:05,290
gain access to you but and this will

636
00:32:03,190 --> 00:32:07,600
work on a number of devices at the end

637
00:32:05,290 --> 00:32:11,080
of the boot arcs at the very end if you

638
00:32:07,600 --> 00:32:13,510
put a number one some you boots will

639
00:32:11,080 --> 00:32:15,960
cause that to be read as the knit level

640
00:32:13,510 --> 00:32:20,650
and will boot up in single user mode

641
00:32:15,960 --> 00:32:25,780
other options are s you put an S in

642
00:32:20,650 --> 00:32:28,690
there lowercase or uppercase and E or

643
00:32:25,780 --> 00:32:30,700
the word emergency or the word single it

644
00:32:28,690 --> 00:32:34,059
varies from different you boots this

645
00:32:30,700 --> 00:32:36,070
particular case none of those worked we

646
00:32:34,059 --> 00:32:36,910
did get a certain thing to work and I

647
00:32:36,070 --> 00:32:40,780
don't know if I'm gonna have time to

648
00:32:36,910 --> 00:32:43,360
show it but hopefully it will and it put

649
00:32:40,780 --> 00:32:46,059
it into a weird state where you really

650
00:32:43,360 --> 00:32:50,260
have access to anything other than the

651
00:32:46,059 --> 00:32:53,260
password hashes I think okay so now

652
00:32:50,260 --> 00:32:54,520
we're in here we can set boot delay I

653
00:32:53,260 --> 00:32:58,030
want to go ahead and do that in this

654
00:32:54,520 --> 00:33:05,590
case here so we're gonna get set boot

655
00:32:58,030 --> 00:33:09,639
delay to five getting it right commander

656
00:33:05,590 --> 00:33:19,350
set env set environment variable boot

657
00:33:09,640 --> 00:33:19,350
delay five we do print env

658
00:33:21,830 --> 00:33:28,199
we can see our boot delay is now set to

659
00:33:24,630 --> 00:33:30,390
five at that point we want to save env

660
00:33:28,200 --> 00:33:32,490
which is save the environment variables

661
00:33:30,390 --> 00:33:34,980
so here we can see we're actually wrote

662
00:33:32,490 --> 00:33:38,040
back to the chip at that point we should

663
00:33:34,980 --> 00:33:45,270
be able to hit reset cause this device

664
00:33:38,040 --> 00:33:47,460
to reboot and then we can hit enter and

665
00:33:45,270 --> 00:33:49,080
break out of it that way if you're

666
00:33:47,460 --> 00:33:52,650
actually keep you from having to keep

667
00:33:49,080 --> 00:33:53,939
glitch in the pen just set boot delay at

668
00:33:52,650 --> 00:33:57,230
that point though you're gonna have to

669
00:33:53,940 --> 00:33:57,230
set the boot arguments

670
00:33:57,620 --> 00:34:02,520
you'd have to you where I said the boot

671
00:34:00,300 --> 00:34:04,230
command you want the thing to boot up it

672
00:34:02,520 --> 00:34:05,639
will work now because it has IP queue

673
00:34:04,230 --> 00:34:08,250
and their boot I Picchu which is the

674
00:34:05,640 --> 00:34:10,470
correct boot image so one of the other

675
00:34:08,250 --> 00:34:13,590
things let me see where my Hana stuff is

676
00:34:10,469 --> 00:34:19,139
all right here it is okay since I don't

677
00:34:13,590 --> 00:34:28,140
like what we want to do is we want to

678
00:34:19,139 --> 00:34:29,940
ping print E&V so if we come over here

679
00:34:28,139 --> 00:34:33,540
to print env we can see right here

680
00:34:29,940 --> 00:34:38,040
server IP this is actually a TFTP server

681
00:34:33,540 --> 00:34:40,469
setting and this device is IP address is

682
00:34:38,040 --> 00:34:42,779
actually set here in this environment so

683
00:34:40,469 --> 00:34:45,540
it will actually work so I want to

684
00:34:42,780 --> 00:34:54,929
actually ping because it won't work if I

685
00:34:45,540 --> 00:34:57,720
can't get to my server is alive okay so

686
00:34:54,929 --> 00:34:59,610
what we're gonna do is we're gonna put

687
00:34:57,720 --> 00:35:04,399
this TFTP in there it's going to call

688
00:34:59,610 --> 00:35:08,650
from my TFTP server which is right here

689
00:35:04,400 --> 00:35:20,780
you can see the boot ID be right there

690
00:35:08,650 --> 00:35:23,090
config so let's see if this works and

691
00:35:20,780 --> 00:35:24,920
it's going to load all this into the

692
00:35:23,090 --> 00:35:27,920
memory at eight eight zero zero zero

693
00:35:24,920 --> 00:35:31,490
zero zero and then it's going to the and

694
00:35:27,920 --> 00:35:34,880
command and boot em at that memory

695
00:35:31,490 --> 00:35:38,620
location if it works and I hate when

696
00:35:34,880 --> 00:35:38,620
this thing does that it's really weird

697
00:35:39,280 --> 00:35:47,150
so now it's loading so it's calling

698
00:35:44,120 --> 00:35:50,870
everything from the TFTP server and this

699
00:35:47,150 --> 00:35:53,810
is open wrt it happened to be we're

700
00:35:50,870 --> 00:35:55,460
using IP key 40 processor on here which

701
00:35:53,810 --> 00:35:59,240
if you watched the boot image come up

702
00:35:55,460 --> 00:36:01,190
you can see that defined an IP q 40

703
00:35:59,240 --> 00:36:03,589
something i can't remember a number

704
00:36:01,190 --> 00:36:06,130
after that that happens to be a kernel

705
00:36:03,590 --> 00:36:08,930
image available out there for open wrt

706
00:36:06,130 --> 00:36:11,060
like i said is not fully functional i

707
00:36:08,930 --> 00:36:12,859
worked with a whole bunch of what had

708
00:36:11,060 --> 00:36:15,440
already been built seeing how they were

709
00:36:12,860 --> 00:36:17,030
structured I only found one other that

710
00:36:15,440 --> 00:36:19,700
actually called more than one flash

711
00:36:17,030 --> 00:36:21,560
chips so the sad thing is is everything

712
00:36:19,700 --> 00:36:23,480
I found out there was really poor

713
00:36:21,560 --> 00:36:27,890
example for trying to figure it out and

714
00:36:23,480 --> 00:36:29,960
for defining secondary chipsets their

715
00:36:27,890 --> 00:36:32,120
secondary flash chip on the device

716
00:36:29,960 --> 00:36:35,360
there's even less documentation out

717
00:36:32,120 --> 00:36:37,970
there on doing that but I did contact a

718
00:36:35,360 --> 00:36:40,130
few people I know got access to some

719
00:36:37,970 --> 00:36:41,870
documentation on possibly building that

720
00:36:40,130 --> 00:36:43,790
even though none of them had ever done

721
00:36:41,870 --> 00:36:45,529
it they happen to know where the

722
00:36:43,790 --> 00:36:47,480
documentation were they understood it

723
00:36:45,530 --> 00:36:50,650
conceptually so I have that at home

724
00:36:47,480 --> 00:36:53,120
right now with the next goal is to

725
00:36:50,650 --> 00:36:55,490
recompile this image so that we can get

726
00:36:53,120 --> 00:36:57,589
access to that second NAND flash chip

727
00:36:55,490 --> 00:37:00,109
after boot up right now we'll have

728
00:36:57,590 --> 00:37:02,300
access to the boots yet the you big ship

729
00:37:00,110 --> 00:37:07,480
and we'll share that here in a second

730
00:37:02,300 --> 00:37:11,360
if it comes up though there we are

731
00:37:07,480 --> 00:37:13,130
so now so now for the most part we root

732
00:37:11,360 --> 00:37:15,500
on the device but we don't have access

733
00:37:13,130 --> 00:37:18,680
to all the data we want but typically

734
00:37:15,500 --> 00:37:23,750
you would gain access through procs lash

735
00:37:18,680 --> 00:37:25,819
MTD and this will actually show all of

736
00:37:23,750 --> 00:37:28,310
these structures that we have access

737
00:37:25,820 --> 00:37:30,710
this particular flash chip really runs

738
00:37:28,310 --> 00:37:33,250
up to number seven even though we're

739
00:37:30,710 --> 00:37:35,540
defining a kernel and a root filesystem

740
00:37:33,250 --> 00:37:36,950
the kernel load up happened to be this

741
00:37:35,540 --> 00:37:39,140
one let's see if we look at the root

742
00:37:36,950 --> 00:37:41,779
filesystem see the size of it zero zero

743
00:37:39,140 --> 00:37:47,350
zero zero zero zero that's because that

744
00:37:41,780 --> 00:37:47,350
secondary ship that we had over here

745
00:37:48,820 --> 00:37:54,380
that ship right there which happens to

746
00:37:51,620 --> 00:37:58,160
be I don't know if we get this show show

747
00:37:54,380 --> 00:38:01,250
up there we go you see the number on it

748
00:37:58,160 --> 00:38:04,609
right there that five F 1 G zero there's

749
00:38:01,250 --> 00:38:06,440
actually no build structures for that

750
00:38:04,610 --> 00:38:08,630
ship out there so I have to define them

751
00:38:06,440 --> 00:38:11,000
into the device tree which is be the

752
00:38:08,630 --> 00:38:12,700
next step for doing this so any

753
00:38:11,000 --> 00:38:15,440
questions on that

754
00:38:12,700 --> 00:38:17,509
so the general aspect of the attack is

755
00:38:15,440 --> 00:38:19,160
is we want to be able to get some kind

756
00:38:17,510 --> 00:38:20,780
of root level control on the actual

757
00:38:19,160 --> 00:38:23,950
device to possibly get access to

758
00:38:20,780 --> 00:38:27,650
firmware data manipulate the device

759
00:38:23,950 --> 00:38:29,689
maybe get maybe once we get access to

760
00:38:27,650 --> 00:38:31,910
the file structure that would be part of

761
00:38:29,690 --> 00:38:33,590
this device we'd be able to get system

762
00:38:31,910 --> 00:38:35,899
calls that this device you use is called

763
00:38:33,590 --> 00:38:38,120
back home to the clouds be able to

764
00:38:35,900 --> 00:38:40,640
gather that data be able to do replay

765
00:38:38,120 --> 00:38:43,370
attacks so it'd be in memory access

766
00:38:40,640 --> 00:38:46,009
control of a device within its ecosystem

767
00:38:43,370 --> 00:38:48,230
I know guys have done similar stuff to

768
00:38:46,010 --> 00:38:49,910
this on engagements where they were able

769
00:38:48,230 --> 00:38:51,560
to get root level access through these

770
00:38:49,910 --> 00:38:55,640
methods to get the passwords and stuff

771
00:38:51,560 --> 00:38:57,650
to gain access to the high-end IOT

772
00:38:55,640 --> 00:38:59,569
technology where they're able to use

773
00:38:57,650 --> 00:39:01,100
that to pivot back into the cloud and

774
00:38:59,570 --> 00:39:03,680
take over every device on the face of

775
00:39:01,100 --> 00:39:05,930
the earth that this manufacturer had

776
00:39:03,680 --> 00:39:08,180
produced or at least gain level of

777
00:39:05,930 --> 00:39:10,609
access to do such a thing so there's a

778
00:39:08,180 --> 00:39:13,850
lot of valuable tests capabilities in

779
00:39:10,610 --> 00:39:15,720
here so if I was this was this was not

780
00:39:13,850 --> 00:39:17,220
just a mesh Wi-Fi but really

781
00:39:15,720 --> 00:39:19,919
into the cloud is some kind of IOT

782
00:39:17,220 --> 00:39:22,140
technology one of the benefits I'd have

783
00:39:19,920 --> 00:39:24,750
at this point here is I could also

784
00:39:22,140 --> 00:39:27,359
possibly modify the data that's on the

785
00:39:24,750 --> 00:39:29,490
chip putting my own keys on there as an

786
00:39:27,359 --> 00:39:31,890
example SSL keys so I can instruct your

787
00:39:29,490 --> 00:39:33,270
man in the middle tax so that I can see

788
00:39:31,890 --> 00:39:35,000
all the communication between this

789
00:39:33,270 --> 00:39:37,050
device and the cloud and decode it

790
00:39:35,000 --> 00:39:37,980
because typically this can be encrypted

791
00:39:37,050 --> 00:39:40,920
and you're not going to be able to

792
00:39:37,980 --> 00:39:42,540
capture at least unencrypted without

793
00:39:40,920 --> 00:39:43,920
putting certificates on it and forcing

794
00:39:42,540 --> 00:39:46,109
it through something like Bert or some

795
00:39:43,920 --> 00:39:49,410
other proxy service to gain certain

796
00:39:46,109 --> 00:39:51,660
levels of access so this is typically

797
00:39:49,410 --> 00:39:54,270
some of the attack vectors we want to go

798
00:39:51,660 --> 00:39:55,710
after the bad thing often when you're

799
00:39:54,270 --> 00:39:57,509
dealing with these devices and we have

800
00:39:55,710 --> 00:39:59,940
that memory on the chip and you get to

801
00:39:57,510 --> 00:40:01,560
this level of access most of those file

802
00:39:59,940 --> 00:40:03,780
systems especially if they're squash

803
00:40:01,560 --> 00:40:06,990
file systems are not writable on the

804
00:40:03,780 --> 00:40:08,940
flash chip so in those cases they're

805
00:40:06,990 --> 00:40:11,399
what you have to do is extract the

806
00:40:08,940 --> 00:40:14,099
squash file system explode it out

807
00:40:11,400 --> 00:40:16,470
modify it squash it back up and then DD

808
00:40:14,099 --> 00:40:20,490
it back onto the ship and then boot out

809
00:40:16,470 --> 00:40:23,790
the system which we've which we've done

810
00:40:20,490 --> 00:40:25,830
a number of times the game various

811
00:40:23,790 --> 00:40:28,290
levels of attack on a particular device

812
00:40:25,830 --> 00:40:30,509
so some examples on how we would

813
00:40:28,290 --> 00:40:33,119
leverage these type of things to gain

814
00:40:30,510 --> 00:40:35,400
some level of root access the next one

815
00:40:33,119 --> 00:40:39,359
on this show is the one dealing with the

816
00:40:35,400 --> 00:40:41,430
eff switch that we pointed out any

817
00:40:39,359 --> 00:40:47,490
questions

818
00:40:41,430 --> 00:40:49,290
my pistons quite an advantage to ya what

819
00:40:47,490 --> 00:40:50,939
at this point you know what you want you

820
00:40:49,290 --> 00:40:53,580
once you get to this level here you get

821
00:40:50,940 --> 00:40:55,050
access to the firmware the big thing is

822
00:40:53,580 --> 00:40:56,310
get access to the firmware because once

823
00:40:55,050 --> 00:40:57,870
you have that then you can pull it off

824
00:40:56,310 --> 00:41:00,000
you can modify you can put it back when

825
00:40:57,870 --> 00:41:01,770
you have all this level of control once

826
00:41:00,000 --> 00:41:04,140
it's back on there you can actually set

827
00:41:01,770 --> 00:41:06,210
up things like SSH and set up your own

828
00:41:04,140 --> 00:41:08,339
keys on the device and set up best to

829
00:41:06,210 --> 00:41:10,470
sell TLS keys you have all these

830
00:41:08,340 --> 00:41:11,010
capabilities once you have this level of

831
00:41:10,470 --> 00:41:13,200
access

832
00:41:11,010 --> 00:41:14,790
once that's done you've modified the

833
00:41:13,200 --> 00:41:16,470
system at that point you can come in

834
00:41:14,790 --> 00:41:18,779
externally you set your own accounts

835
00:41:16,470 --> 00:41:20,759
passwords which is things we've actually

836
00:41:18,780 --> 00:41:23,550
done on devices to get that level of

837
00:41:20,760 --> 00:41:25,020
access at that point you are part of the

838
00:41:23,550 --> 00:41:26,570
system and you have full control of

839
00:41:25,020 --> 00:41:29,070
what's going on in the backend

840
00:41:26,570 --> 00:41:30,210
most of these type of technologies when

841
00:41:29,070 --> 00:41:32,460
you get into the hardware especially

842
00:41:30,210 --> 00:41:33,720
with IOT it's machine to machine

843
00:41:32,460 --> 00:41:36,540
communication

844
00:41:33,720 --> 00:41:38,490
you as a user often don't always

845
00:41:36,540 --> 00:41:40,259
interact with your technology directly

846
00:41:38,490 --> 00:41:41,669
you interact through the cloud so it's

847
00:41:40,260 --> 00:41:43,260
all machine the machine and you're

848
00:41:41,670 --> 00:41:45,090
interacting with api's in the cloud

849
00:41:43,260 --> 00:41:46,830
they're interacting with the backend

850
00:41:45,090 --> 00:41:48,870
machine in this machine to machine

851
00:41:46,830 --> 00:41:50,670
communication of device which then uses

852
00:41:48,870 --> 00:41:52,440
the control various since there's

853
00:41:50,670 --> 00:41:55,500
detectors lights things like that on

854
00:41:52,440 --> 00:41:57,720
your actual network so actually own and

855
00:41:55,500 --> 00:41:59,550
that machine gives you immense

856
00:41:57,720 --> 00:42:01,319
capability of looking like what all the

857
00:41:59,550 --> 00:42:04,290
communications going back and forth from

858
00:42:01,320 --> 00:42:06,960
machine the machine which often have

859
00:42:04,290 --> 00:42:08,759
really bad security problems because no

860
00:42:06,960 --> 00:42:11,370
one's thinking that hey you know they're

861
00:42:08,760 --> 00:42:13,260
gonna screw with user interactions they

862
00:42:11,370 --> 00:42:15,870
think machine the Machine communications

863
00:42:13,260 --> 00:42:17,400
secure because it's in the background

864
00:42:15,870 --> 00:42:19,529
it's back there no one can figure it out

865
00:42:17,400 --> 00:42:20,850
but once you're in the system once you

866
00:42:19,530 --> 00:42:22,140
control the system and you can

867
00:42:20,850 --> 00:42:23,790
manipulate the machine to machine

868
00:42:22,140 --> 00:42:28,500
communication you captured you can

869
00:42:23,790 --> 00:42:30,930
decode it at that point it's game on

870
00:42:28,500 --> 00:42:32,430
exactly game on at that point you can

871
00:42:30,930 --> 00:42:34,890
figure out what's going on and you can

872
00:42:32,430 --> 00:42:36,930
build an entire attack scenario because

873
00:42:34,890 --> 00:42:39,390
often what that machine is connecting to

874
00:42:36,930 --> 00:42:39,960
in the background isn't hidden on the

875
00:42:39,390 --> 00:42:42,180
Internet

876
00:42:39,960 --> 00:42:44,190
that only allows that device once you

877
00:42:42,180 --> 00:42:47,190
have that data and concepts out now I

878
00:42:44,190 --> 00:42:52,250
can engage those API structures and

879
00:42:47,190 --> 00:42:52,250
systems directly as if I was the machine

880
00:42:56,630 --> 00:43:19,260
okay let's go ahead and reboot this any

881
00:42:58,740 --> 00:43:21,089
questions now it's a lot of people think

882
00:43:19,260 --> 00:43:28,950
that here let me let me capture this

883
00:43:21,089 --> 00:43:36,990
real quick see if I can get this now my

884
00:43:28,950 --> 00:43:38,460
question is about practice yeah just

885
00:43:36,990 --> 00:43:40,439
second I want to make sure I capture

886
00:43:38,460 --> 00:43:40,589
this I don't have to reboot it there we

887
00:43:40,440 --> 00:43:43,920
are

888
00:43:40,589 --> 00:43:46,078
now we're in okay the practical nature

889
00:43:43,920 --> 00:43:47,970
is everyone assumes that and your

890
00:43:46,079 --> 00:43:52,530
question is perfect question and I get

891
00:43:47,970 --> 00:43:54,779
it all the time I'm going to hack you by

892
00:43:52,530 --> 00:43:58,049
physically attacking your system and the

893
00:43:54,780 --> 00:44:00,270
answer is no what I'm gonna do is I'm

894
00:43:58,049 --> 00:44:02,788
gonna set my own system up I'm gonna

895
00:44:00,270 --> 00:44:04,829
gain access I'm gonna map out all those

896
00:44:02,789 --> 00:44:06,059
communications all the structures and I

897
00:44:04,829 --> 00:44:08,970
want to test them for various

898
00:44:06,059 --> 00:44:11,760
vulnerabilities once I've done testing

899
00:44:08,970 --> 00:44:14,220
those for vulnerabilities at that point

900
00:44:11,760 --> 00:44:15,869
I gained enough information about how

901
00:44:14,220 --> 00:44:19,230
that whole system works all the backend

902
00:44:15,869 --> 00:44:21,960
system works how the api's work that and

903
00:44:19,230 --> 00:44:24,180
typically find many vulnerabilities now

904
00:44:21,960 --> 00:44:26,579
I can attack anyone using that product

905
00:44:24,180 --> 00:44:28,470
on the face of the earth but the goal is

906
00:44:26,579 --> 00:44:30,510
not the attack all these people the goal

907
00:44:28,470 --> 00:44:32,250
is to work with the vendor get them to

908
00:44:30,510 --> 00:44:34,319
fix these problems which which we do

909
00:44:32,250 --> 00:44:37,140
quite a bit I have I have an advisor

910
00:44:34,319 --> 00:44:38,369
coming out later this month that I think

911
00:44:37,140 --> 00:44:40,259
it's kind of cool it's dealing with a

912
00:44:38,369 --> 00:44:43,200
home security lock on the Bluetooth

913
00:44:40,260 --> 00:44:47,730
locks where we actually found issues in

914
00:44:43,200 --> 00:44:49,770
the api's where where let's say you want

915
00:44:47,730 --> 00:44:52,529
to grant access to your house for an

916
00:44:49,770 --> 00:44:55,470
hour so you send somebody to key and

917
00:44:52,529 --> 00:44:57,569
they have that key that person can now

918
00:44:55,470 --> 00:44:58,250
make an API call to the cloud and pull

919
00:44:57,569 --> 00:45:01,000
down the

920
00:44:58,250 --> 00:45:04,730
for everybody you've given permission to

921
00:45:01,000 --> 00:45:07,970
and if you lock his account he can still

922
00:45:04,730 --> 00:45:09,860
make all the API calls uninhibited the

923
00:45:07,970 --> 00:45:11,959
only way to stop him is leading all

924
00:45:09,860 --> 00:45:14,540
together the problem is the way the

925
00:45:11,960 --> 00:45:16,910
whole system works is keys are all based

926
00:45:14,540 --> 00:45:18,980
on the UID that's generated as part of

927
00:45:16,910 --> 00:45:21,859
the application install on your mobile

928
00:45:18,980 --> 00:45:27,380
device and that is your function key

929
00:45:21,860 --> 00:45:28,790
forever once it's compromised you can

930
00:45:27,380 --> 00:45:30,590
take the app off your phone and

931
00:45:28,790 --> 00:45:32,390
reinstall it and kick you the same damn

932
00:45:30,590 --> 00:45:35,060
key because it's based off something on

933
00:45:32,390 --> 00:45:40,759
your phone so once it's compromised game

934
00:45:35,060 --> 00:45:42,770
over you're not getting over it so and

935
00:45:40,760 --> 00:45:44,720
that was just one of the things but

936
00:45:42,770 --> 00:45:46,610
another example was a lighting system I

937
00:45:44,720 --> 00:45:48,350
was looking at the lighting system

938
00:45:46,610 --> 00:45:50,600
turned out when we started looking at

939
00:45:48,350 --> 00:45:52,850
all this communication we found out data

940
00:45:50,600 --> 00:45:55,670
was being passed to a system in the

941
00:45:52,850 --> 00:45:56,029
cloud about the device was just posting

942
00:45:55,670 --> 00:45:59,270
data

943
00:45:56,030 --> 00:46:01,700
it was totally unattended it was a post

944
00:45:59,270 --> 00:46:03,860
process so what I did was I took that

945
00:46:01,700 --> 00:46:06,319
post process changed it to a GIMP

946
00:46:03,860 --> 00:46:09,410
process inquiry the same functionality

947
00:46:06,320 --> 00:46:11,470
with the UID of the device and it came

948
00:46:09,410 --> 00:46:14,750
back with information about that device

949
00:46:11,470 --> 00:46:17,990
unauthenticated then I truncated the API

950
00:46:14,750 --> 00:46:19,940
call and removed the UID request next

951
00:46:17,990 --> 00:46:22,939
thing you do it came back with 25

952
00:46:19,940 --> 00:46:25,040
responses of data from the last 25

953
00:46:22,940 --> 00:46:28,510
people that engaged that system

954
00:46:25,040 --> 00:46:32,320
including device numbers device you IDs

955
00:46:28,510 --> 00:46:32,320
email addresses

956
00:46:33,100 --> 00:46:37,990
so by analyzing these structures this

957
00:46:36,040 --> 00:46:39,730
data you get a bigger understanding of

958
00:46:37,990 --> 00:46:44,439
issues and vulnerabilities that impact

959
00:46:39,730 --> 00:46:48,580
everybody okay so now we're here and

960
00:46:44,440 --> 00:46:51,280
we're route on this device now we're

961
00:46:48,580 --> 00:46:57,580
gonna go ahead and we're gonna plug this

962
00:46:51,280 --> 00:47:00,700
USB in here see if we have time so this

963
00:46:57,580 --> 00:47:02,590
is where I was and see it comes up for

964
00:47:00,700 --> 00:47:07,450
the USB it tells me all this stuff about

965
00:47:02,590 --> 00:47:11,220
USB there's one little problem so if we

966
00:47:07,450 --> 00:47:15,960
LS sale that's the spot

967
00:47:11,220 --> 00:47:15,959
there's no devices oh I'll get right

968
00:47:22,110 --> 00:47:27,400
there's no SD devices so even though it

969
00:47:25,630 --> 00:47:28,420
amounted it supposedly said it

970
00:47:27,400 --> 00:47:30,520
understands this

971
00:47:28,420 --> 00:47:31,960
I still can't address it or talk to it

972
00:47:30,520 --> 00:47:34,870
because there's no frickin device out

973
00:47:31,960 --> 00:47:36,970
there so I was at this pace here and I'm

974
00:47:34,870 --> 00:47:39,279
like okay I want to be able to pull the

975
00:47:36,970 --> 00:47:41,770
firmware off this device I have a USB I

976
00:47:39,280 --> 00:47:44,070
having Ethernet I could not get none of

977
00:47:41,770 --> 00:47:46,390
the ethernet functionality work period

978
00:47:44,070 --> 00:47:48,520
you know because none of its build none

979
00:47:46,390 --> 00:47:49,930
of its structured if I raise the anit

980
00:47:48,520 --> 00:47:50,440
level it's going to challenge me for a

981
00:47:49,930 --> 00:47:52,419
password

982
00:47:50,440 --> 00:47:55,030
it's a squatch filesystem I can't

983
00:47:52,420 --> 00:47:56,830
overwrite the password from here and I

984
00:47:55,030 --> 00:47:57,340
can't crack the password so how do we do

985
00:47:56,830 --> 00:48:00,299
this

986
00:47:57,340 --> 00:48:02,710
so I started digging and I found out

987
00:48:00,300 --> 00:48:06,370
after learning how to understand some of

988
00:48:02,710 --> 00:48:09,760
this stuff pretty good let me see the

989
00:48:06,370 --> 00:48:13,480
first step is we actually have to define

990
00:48:09,760 --> 00:48:15,300
a device we have to define it by a

991
00:48:13,480 --> 00:48:18,510
primary and a secondary identifier

992
00:48:15,300 --> 00:48:20,980
primary eight means it's an SD device

993
00:48:18,510 --> 00:48:23,920
secondary the one actually defines in

994
00:48:20,980 --> 00:48:28,850
the number one device in the string we

995
00:48:23,920 --> 00:48:31,930
sets the right 666 to the device

996
00:48:28,850 --> 00:48:34,460
pretty much okay so once we've done that

997
00:48:31,930 --> 00:48:37,750
we've actually created the device and

998
00:48:34,460 --> 00:48:39,920
then we can actually do a quick check

999
00:48:37,750 --> 00:48:43,610
I'm just speeding things up by not

1000
00:48:39,920 --> 00:48:45,110
typing all this crap so at that point we

1001
00:48:43,610 --> 00:48:48,650
can see hey there's a device there

1002
00:48:45,110 --> 00:48:54,020
device name is dev SS da one so now

1003
00:48:48,650 --> 00:48:58,670
we've actually created a device to make

1004
00:48:54,020 --> 00:49:00,440
things better we need to go ahead and

1005
00:48:58,670 --> 00:49:06,550
format the device so we're going to

1006
00:49:00,440 --> 00:49:11,000
format the USB on here that was quick I

1007
00:49:06,550 --> 00:49:12,440
don't trust it no no no it's creating

1008
00:49:11,000 --> 00:49:25,700
narratives okay it's still working

1009
00:49:12,440 --> 00:49:29,870
it says creating journal so take a

1010
00:49:25,700 --> 00:49:31,490
minute to do that so did it finish no

1011
00:49:29,870 --> 00:49:33,500
it's doing super blocks now so it's

1012
00:49:31,490 --> 00:49:35,839
building all that structure based on the

1013
00:49:33,500 --> 00:49:37,970
file system I requested and then now

1014
00:49:35,840 --> 00:49:41,750
we've created this device our next step

1015
00:49:37,970 --> 00:49:43,850
is we'll create in embedded devices

1016
00:49:41,750 --> 00:49:46,010
there's only certain places you can put

1017
00:49:43,850 --> 00:49:48,950
writable structures and that's under

1018
00:49:46,010 --> 00:49:50,990
temp none of the other file systems are

1019
00:49:48,950 --> 00:49:53,419
typically going to be writable temp is

1020
00:49:50,990 --> 00:49:55,399
an in-memory structure so that's where

1021
00:49:53,420 --> 00:49:57,140
you would do our external mouse and that

1022
00:49:55,400 --> 00:49:59,510
way they're readable and writable and

1023
00:49:57,140 --> 00:50:02,870
then once we do that then we can go

1024
00:49:59,510 --> 00:50:06,830
ahead and actually copy a copy of the

1025
00:50:02,870 --> 00:50:09,580
kernel image off this device okay

1026
00:50:06,830 --> 00:50:09,580
they're finished up

1027
00:50:11,680 --> 00:50:16,788
Society

1028
00:50:13,910 --> 00:50:20,359
thank you equation what's that you've

1029
00:50:16,789 --> 00:50:26,900
already devices using butter OS

1030
00:50:20,359 --> 00:50:28,460
muckety-mucks other other OS yeah yeah

1031
00:50:26,900 --> 00:50:30,680
you're gonna run into devices the

1032
00:50:28,460 --> 00:50:32,809
various flavors of Linux you're gonna

1033
00:50:30,680 --> 00:50:36,379
see androids a big one

1034
00:50:32,809 --> 00:50:38,510
I run into a number of these devices IOT

1035
00:50:36,380 --> 00:50:41,480
devices they're purely Android operating

1036
00:50:38,510 --> 00:50:44,329
system those definitely add a little

1037
00:50:41,480 --> 00:50:47,930
complexity to things the saving grace is

1038
00:50:44,329 --> 00:50:49,730
they don't use the current full file

1039
00:50:47,930 --> 00:50:51,950
system encryption structure that phones

1040
00:50:49,730 --> 00:50:55,150
use which is a good thing because if it

1041
00:50:51,950 --> 00:50:55,149
did it would like totally screwed over

1042
00:50:55,180 --> 00:51:00,399
yet trust me yet it's going to change

1043
00:51:01,000 --> 00:51:12,260
and let's come out here and then we

1044
00:51:09,529 --> 00:51:13,940
mount it up it mounts up did a couple

1045
00:51:12,260 --> 00:51:17,779
test it failed and then it mounted

1046
00:51:13,940 --> 00:51:22,940
correctly and then what we want to do is

1047
00:51:17,779 --> 00:51:25,640
let's go ahead you can't slash slash MTD

1048
00:51:22,940 --> 00:51:27,890
now here since we booted up in full mode

1049
00:51:25,640 --> 00:51:32,509
we're actually going to see everything

1050
00:51:27,890 --> 00:51:38,839
here and as an example we'll go ahead

1051
00:51:32,509 --> 00:51:42,740
and the structure of or the method for

1052
00:51:38,839 --> 00:51:45,558
it is always DD reason why DD I can't

1053
00:51:42,740 --> 00:51:49,250
say it's always a reason but DD is used

1054
00:51:45,559 --> 00:51:51,140
on every device I've ever opened up and

1055
00:51:49,250 --> 00:51:54,109
this is how mobile for more updates come

1056
00:51:51,140 --> 00:51:57,230
in you actually if you look at this if

1057
00:51:54,109 --> 00:52:00,019
you look up here you will actually see

1058
00:51:57,230 --> 00:52:02,210
that there is a ubi root filesystem root

1059
00:52:00,019 --> 00:52:03,500
filesystem data there's a kernel one

1060
00:52:02,210 --> 00:52:05,690
there's a kernel in the root filesystem

1061
00:52:03,500 --> 00:52:09,109
so everything's duplicate as you can see

1062
00:52:05,690 --> 00:52:10,700
and the purpose of that is so you can do

1063
00:52:09,109 --> 00:52:13,130
firmware upgrades without breaking the

1064
00:52:10,700 --> 00:52:14,899
device so what happened is every time

1065
00:52:13,130 --> 00:52:17,779
the system boots up you boot will load

1066
00:52:14,900 --> 00:52:20,140
one of the structured systems primary or

1067
00:52:17,779 --> 00:52:22,630
secondary whatever one's not

1068
00:52:20,140 --> 00:52:25,120
loaded up is taken offline has always

1069
00:52:22,630 --> 00:52:27,820
offline the incoming firmware update

1070
00:52:25,120 --> 00:52:29,859
will overwrite that the new boot

1071
00:52:27,820 --> 00:52:31,570
environment variables update it to tell

1072
00:52:29,860 --> 00:52:33,130
it to switch over and then when the

1073
00:52:31,570 --> 00:52:37,240
device is done with the update it

1074
00:52:33,130 --> 00:52:39,700
reboots to the new kernel image ok the

1075
00:52:37,240 --> 00:52:42,310
new fossils new structure image if that

1076
00:52:39,700 --> 00:52:43,990
fails you boot will crash drop back over

1077
00:52:42,310 --> 00:52:49,870
the other one and come back up that way

1078
00:52:43,990 --> 00:52:53,649
you don't brick your device so to

1079
00:52:49,870 --> 00:52:56,830
actually DD and image on and off a flash

1080
00:52:53,650 --> 00:53:00,870
chip or partition it can't be mounted as

1081
00:52:56,830 --> 00:53:00,870
unmounted and then in partition and yes

1082
00:53:06,210 --> 00:53:12,850
it'll usually automatically do it if you

1083
00:53:10,000 --> 00:53:15,490
if it's a normal firmware update process

1084
00:53:12,850 --> 00:53:17,200
and it kills that and messes and it

1085
00:53:15,490 --> 00:53:19,990
tries to boot into it it's corrupted

1086
00:53:17,200 --> 00:53:29,529
it'll normally crash out and fail into

1087
00:53:19,990 --> 00:53:31,479
the other one sometimes you can win the

1088
00:53:29,530 --> 00:53:33,100
environment variables so if you go into

1089
00:53:31,480 --> 00:53:36,310
environment variables and look for

1090
00:53:33,100 --> 00:53:39,670
environment variables that defines which

1091
00:53:36,310 --> 00:53:42,160
is the it's either mark zero or one so

1092
00:53:39,670 --> 00:53:45,640
it's one of the two boot images it's

1093
00:53:42,160 --> 00:53:47,290
going to use kernel boot images and that

1094
00:53:45,640 --> 00:53:48,790
may vary to on how some of these systems

1095
00:53:47,290 --> 00:53:50,290
call it a name and all that type of

1096
00:53:48,790 --> 00:53:55,509
stuff but I've seen some of their very

1097
00:53:50,290 --> 00:53:56,980
specific image one image zero but

1098
00:53:55,510 --> 00:53:58,870
they're not always like that sometimes

1099
00:53:56,980 --> 00:54:00,220
they are scripted because environment

1100
00:53:58,870 --> 00:54:02,850
variables can be called anything you

1101
00:54:00,220 --> 00:54:08,080
want for the most part

1102
00:54:02,850 --> 00:54:13,750
okay so now we've actually over so let's

1103
00:54:08,080 --> 00:54:23,650
go ahead and go over to temp and you can

1104
00:54:13,750 --> 00:54:30,220
see that there is that it yeah I guess

1105
00:54:23,650 --> 00:54:33,940
it was yeah oh okay Dempsey okay there

1106
00:54:30,220 --> 00:54:36,759
you see MTD MTD den which is the root

1107
00:54:33,940 --> 00:54:38,200
file system that we actually are able to

1108
00:54:36,760 --> 00:54:39,790
copy over so that's one way you can

1109
00:54:38,200 --> 00:54:41,919
actually get all the firmware off on to

1110
00:54:39,790 --> 00:54:45,130
USB but in this case we're literally

1111
00:54:41,920 --> 00:54:49,180
forced to actually rebuild the entire

1112
00:54:45,130 --> 00:54:50,950
device structure for the device to be

1113
00:54:49,180 --> 00:54:52,899
able to be usable and then we had to

1114
00:54:50,950 --> 00:54:54,009
mount it up because typically you plug

1115
00:54:52,900 --> 00:54:55,750
this in it's going to mount

1116
00:54:54,010 --> 00:54:57,580
automatically under media okay

1117
00:54:55,750 --> 00:55:00,100
it's gonna mount automatically under

1118
00:54:57,580 --> 00:55:01,830
media but there is no new media file

1119
00:55:00,100 --> 00:55:04,450
structure okay

1120
00:55:01,830 --> 00:55:06,340
so there's nothing for it to mount up on

1121
00:55:04,450 --> 00:55:09,009
there so we had to actually create the

1122
00:55:06,340 --> 00:55:11,410
device we had to create format to drive

1123
00:55:09,010 --> 00:55:13,390
mount the device up under temp because

1124
00:55:11,410 --> 00:55:15,910
that's the only rewritable structure on

1125
00:55:13,390 --> 00:55:17,680
typical embedded devices is it always

1126
00:55:15,910 --> 00:55:20,500
the case I've seen exceptions to that

1127
00:55:17,680 --> 00:55:23,319
but typically that is the case in some

1128
00:55:20,500 --> 00:55:26,590
rare cases based on the operating system

1129
00:55:23,320 --> 00:55:31,060
structure there is a way to remount some

1130
00:55:26,590 --> 00:55:34,030
of these partitions writable I've only

1131
00:55:31,060 --> 00:55:36,340
come across maybe one or two devices

1132
00:55:34,030 --> 00:55:37,960
that had actually worked on but it came

1133
00:55:36,340 --> 00:55:40,780
in handy because it was like hey will

1134
00:55:37,960 --> 00:55:43,600
this work and remount part of the key

1135
00:55:40,780 --> 00:55:45,250
file system structure in a writable mode

1136
00:55:43,600 --> 00:55:46,960
and was actually able to alter things on

1137
00:55:45,250 --> 00:55:47,800
it so it's kind of cool but that's not

1138
00:55:46,960 --> 00:55:49,510
always the case

1139
00:55:47,800 --> 00:55:52,390
often you have to deal with the fact

1140
00:55:49,510 --> 00:55:55,410
that it's not writable any questions

1141
00:55:52,390 --> 00:55:55,410
before we finish up

