1
00:00:01,070 --> 00:00:04,149
[Music]

2
00:00:08,880 --> 00:00:12,000
all right

3
00:00:09,360 --> 00:00:14,399
thank you very much let me go ahead and

4
00:00:12,000 --> 00:00:17,759
pop up

5
00:00:14,400 --> 00:00:19,680
my presentation and maybe even share it

6
00:00:17,760 --> 00:00:23,039
with the rest of you

7
00:00:19,680 --> 00:00:25,759
that's probably a good idea

8
00:00:23,039 --> 00:00:28,480
so good morning everyone or you know

9
00:00:25,760 --> 00:00:33,439
maybe it's not morning where you're at

10
00:00:28,480 --> 00:00:33,439
but uh you know thanks for that intro

11
00:00:33,840 --> 00:00:37,760
and yeah so what do what are we gonna

12
00:00:36,480 --> 00:00:40,879
talk about a little bit today

13
00:00:37,760 --> 00:00:42,239
so today i just wanted to do kind of a

14
00:00:40,879 --> 00:00:45,680
little bit

15
00:00:42,239 --> 00:00:49,919
of introduction to

16
00:00:45,680 --> 00:00:52,480
extended file systems on linux

17
00:00:49,920 --> 00:00:53,760
so when it comes to extended file

18
00:00:52,480 --> 00:00:57,279
systems

19
00:00:53,760 --> 00:01:00,399
we have you know

20
00:00:57,280 --> 00:01:02,879
a lot of stuff we can talk about

21
00:01:00,399 --> 00:01:03,440
but real quick uh i know i got a little

22
00:01:02,879 --> 00:01:07,200
intro

23
00:01:03,440 --> 00:01:10,399
from rice rocket here

24
00:01:07,200 --> 00:01:10,960
and um a little bit about me i've i've

25
00:01:10,400 --> 00:01:12,880
spoke at

26
00:01:10,960 --> 00:01:14,399
horncon before i've spoken a few other

27
00:01:12,880 --> 00:01:14,798
things like i don't know some little

28
00:01:14,400 --> 00:01:16,479
cons

29
00:01:14,799 --> 00:01:18,000
you've probably heard of like defcon and

30
00:01:16,479 --> 00:01:21,360
black hat

31
00:01:18,000 --> 00:01:24,560
girkon b-sides

32
00:01:21,360 --> 00:01:26,640
a few others so um

33
00:01:24,560 --> 00:01:28,479
written a few books including hacking

34
00:01:26,640 --> 00:01:30,079
and penetration testing with low power

35
00:01:28,479 --> 00:01:32,560
devices

36
00:01:30,079 --> 00:01:33,600
linux forensics and that's what this

37
00:01:32,560 --> 00:01:35,040
stuff that we're going to talk about

38
00:01:33,600 --> 00:01:37,759
today comes from and

39
00:01:35,040 --> 00:01:39,360
windows forensics and usb forensics

40
00:01:37,759 --> 00:01:41,040
professor of digital forensics at

41
00:01:39,360 --> 00:01:44,240
bloomsburg university

42
00:01:41,040 --> 00:01:46,000
of pennsylvania you know they like it if

43
00:01:44,240 --> 00:01:47,360
i say of pennsylvania even though

44
00:01:46,000 --> 00:01:50,000
there's only one

45
00:01:47,360 --> 00:01:51,520
bloomsburg university in the entire

46
00:01:50,000 --> 00:01:56,799
universe

47
00:01:51,520 --> 00:02:00,079
in the entire empire we're one of six

48
00:01:56,799 --> 00:02:03,680
that have the nsa dhs

49
00:02:00,079 --> 00:02:05,679
center of academic excellence labels

50
00:02:03,680 --> 00:02:08,399
whatever you want to call it

51
00:02:05,680 --> 00:02:09,360
that's doing forensics been programming

52
00:02:08,399 --> 00:02:12,239
since i was

53
00:02:09,360 --> 00:02:13,200
eight in an assembly since i was 10

54
00:02:12,239 --> 00:02:15,920
hacking hardware

55
00:02:13,200 --> 00:02:16,799
since i was about 12. you know i'm an

56
00:02:15,920 --> 00:02:19,519
aviator

57
00:02:16,800 --> 00:02:20,239
plane builder i have 17 aviation ratings

58
00:02:19,520 --> 00:02:23,680
so that's

59
00:02:20,239 --> 00:02:26,879
also what i like to do for fun okay

60
00:02:23,680 --> 00:02:27,920
so as i said material from what i'm

61
00:02:26,879 --> 00:02:30,879
going to talk about today

62
00:02:27,920 --> 00:02:32,799
comes from a chapter in this book on

63
00:02:30,879 --> 00:02:36,319
linux forensics

64
00:02:32,800 --> 00:02:38,000
that i put out there it's pretty well

65
00:02:36,319 --> 00:02:41,280
regarded i mean you can go

66
00:02:38,000 --> 00:02:43,120
read the reviews and all that um it's

67
00:02:41,280 --> 00:02:44,879
essentially the only book on linux

68
00:02:43,120 --> 00:02:48,840
forensics that's available

69
00:02:44,879 --> 00:02:50,239
and it's the best one of course and most

70
00:02:48,840 --> 00:02:54,640
complete

71
00:02:50,239 --> 00:02:56,080
okay so today in about 50 minutes or so

72
00:02:54,640 --> 00:02:59,599
i want to try

73
00:02:56,080 --> 00:03:02,560
to kind of give you a feel

74
00:02:59,599 --> 00:03:03,518
for extended file systems and how they

75
00:03:02,560 --> 00:03:04,959
work

76
00:03:03,519 --> 00:03:07,120
so this is going to be kind of a

77
00:03:04,959 --> 00:03:10,879
whirlwind tour

78
00:03:07,120 --> 00:03:12,319
you know i wish i wish we were in person

79
00:03:10,879 --> 00:03:13,920
and you know if we were in person i

80
00:03:12,319 --> 00:03:15,920
might you know

81
00:03:13,920 --> 00:03:17,760
stretch this out to a lot more than 50

82
00:03:15,920 --> 00:03:18,720
minutes and you know have some fun

83
00:03:17,760 --> 00:03:22,159
exercises

84
00:03:18,720 --> 00:03:24,080
for you guys to do so

85
00:03:22,159 --> 00:03:25,359
extended file systems what are they all

86
00:03:24,080 --> 00:03:28,319
about

87
00:03:25,360 --> 00:03:29,200
these are actually based on the unix

88
00:03:28,319 --> 00:03:34,079
file system

89
00:03:29,200 --> 00:03:37,119
ufs now even though it's based on this

90
00:03:34,080 --> 00:03:39,840
and it's you know newer

91
00:03:37,120 --> 00:03:40,319
it's actually simpler than ufs and why

92
00:03:39,840 --> 00:03:43,280
is that

93
00:03:40,319 --> 00:03:46,798
well there's a lot of baggage in ufs

94
00:03:43,280 --> 00:03:48,159
it's really old and

95
00:03:46,799 --> 00:03:50,799
you know there's stuff that we don't

96
00:03:48,159 --> 00:03:52,239
need anymore you know if you if you say

97
00:03:50,799 --> 00:03:52,560
well what kind of stuff are you talking

98
00:03:52,239 --> 00:03:55,200
about

99
00:03:52,560 --> 00:03:56,799
even if you look at let's say just hard

100
00:03:55,200 --> 00:03:58,720
drives

101
00:03:56,799 --> 00:04:01,280
you know long time ago you had to worry

102
00:03:58,720 --> 00:04:02,879
about how many cylinders and heads and

103
00:04:01,280 --> 00:04:04,959
sectors are on this hard drive and you

104
00:04:02,879 --> 00:04:06,480
had to tell your bias all about that

105
00:04:04,959 --> 00:04:08,000
you don't have to do any of that stuff

106
00:04:06,480 --> 00:04:11,280
anymore

107
00:04:08,000 --> 00:04:14,319
so you know a lot of that kind

108
00:04:11,280 --> 00:04:16,720
of stuff has been removed from ufs to

109
00:04:14,319 --> 00:04:18,560
make the extended file system

110
00:04:16,720 --> 00:04:21,040
it's meant to be really robust with good

111
00:04:18,560 --> 00:04:23,759
performance it's the most common file

112
00:04:21,040 --> 00:04:27,199
system on linux

113
00:04:23,759 --> 00:04:30,800
you have extended two which is common

114
00:04:27,199 --> 00:04:33,759
for partitions that don't change much

115
00:04:30,800 --> 00:04:35,280
it is a non-journaling file system and

116
00:04:33,759 --> 00:04:36,320
that's why it's good for things don't

117
00:04:35,280 --> 00:04:39,440
change a lot like

118
00:04:36,320 --> 00:04:41,280
you know i've got my operating system

119
00:04:39,440 --> 00:04:43,360
it doesn't really change a lot so

120
00:04:41,280 --> 00:04:46,719
depending on how i partition my system

121
00:04:43,360 --> 00:04:47,360
i might see x 2 being used and then we

122
00:04:46,720 --> 00:04:50,639
have x

123
00:04:47,360 --> 00:04:54,000
3 and 4. and these are

124
00:04:50,639 --> 00:04:56,000
journaling file systems so

125
00:04:54,000 --> 00:04:58,080
these are the ones that you see use most

126
00:04:56,000 --> 00:05:01,759
often and i would say today

127
00:04:58,080 --> 00:05:05,440
you probably see x4 as the most common

128
00:05:01,759 --> 00:05:06,320
file system out there so how does this

129
00:05:05,440 --> 00:05:09,600
stuff work

130
00:05:06,320 --> 00:05:12,639
well if you look

131
00:05:09,600 --> 00:05:15,759
at an x file system

132
00:05:12,639 --> 00:05:16,960
you're gonna see that things are

133
00:05:15,759 --> 00:05:20,240
arranged in

134
00:05:16,960 --> 00:05:22,719
block groups

135
00:05:20,240 --> 00:05:24,240
and you start with this boot block which

136
00:05:22,720 --> 00:05:28,240
is the first

137
00:05:24,240 --> 00:05:30,479
1k normally which is two sectors

138
00:05:28,240 --> 00:05:32,320
if you didn't know this almost

139
00:05:30,479 --> 00:05:35,919
universally

140
00:05:32,320 --> 00:05:40,000
a sector is 512 bytes

141
00:05:35,919 --> 00:05:42,479
so this is going to be uh

142
00:05:40,000 --> 00:05:44,800
two two sectors long and it's pretty

143
00:05:42,479 --> 00:05:47,840
much not used today

144
00:05:44,800 --> 00:05:49,280
but anyway so each block group

145
00:05:47,840 --> 00:05:51,679
is going to start with something called

146
00:05:49,280 --> 00:05:55,359
a super block so a super block

147
00:05:51,680 --> 00:05:59,120
is basically like a volume boot record

148
00:05:55,360 --> 00:06:02,639
if you're a windows person it tells you

149
00:05:59,120 --> 00:06:05,039
about the partition

150
00:06:02,639 --> 00:06:06,880
then we have group to stick descriptors

151
00:06:05,039 --> 00:06:08,960
that tell you about the different groups

152
00:06:06,880 --> 00:06:09,919
the different block groups we have a

153
00:06:08,960 --> 00:06:12,960
data block

154
00:06:09,919 --> 00:06:15,280
bitmap and inode bitmap

155
00:06:12,960 --> 00:06:16,080
i know table and then we have data

156
00:06:15,280 --> 00:06:17,679
blocks

157
00:06:16,080 --> 00:06:19,680
so of course this isn't really just

158
00:06:17,680 --> 00:06:22,639
scale because hopefully

159
00:06:19,680 --> 00:06:24,160
your data blocks are the biggest chunk

160
00:06:22,639 --> 00:06:26,240
of the block group

161
00:06:24,160 --> 00:06:27,440
because everything else is just overhead

162
00:06:26,240 --> 00:06:31,360
right

163
00:06:27,440 --> 00:06:33,039
if the overhead is most of your blocks

164
00:06:31,360 --> 00:06:34,960
well i don't know it must be a

165
00:06:33,039 --> 00:06:38,400
government system or something

166
00:06:34,960 --> 00:06:40,560
or you know who knows some state

167
00:06:38,400 --> 00:06:42,400
university systems are about that bad

168
00:06:40,560 --> 00:06:44,000
like california you know they got two

169
00:06:42,400 --> 00:06:46,799
administrators

170
00:06:44,000 --> 00:06:50,400
per faculty member it's not an

171
00:06:46,800 --> 00:06:50,400
exaggeration it's actually true

172
00:06:50,720 --> 00:06:56,080
so that's kind of the overall structure

173
00:06:53,199 --> 00:06:56,080
what does it look like

174
00:06:56,800 --> 00:07:05,599
now if you look at

175
00:07:02,000 --> 00:07:07,759
an extended file system

176
00:07:05,599 --> 00:07:08,880
you have these things called i notes you

177
00:07:07,759 --> 00:07:11,919
might say well what's an

178
00:07:08,880 --> 00:07:15,680
i node an inode is

179
00:07:11,919 --> 00:07:18,880
everything about that file

180
00:07:15,680 --> 00:07:18,880
except for its name

181
00:07:19,440 --> 00:07:23,759
so if you're familiar with windows stuff

182
00:07:22,319 --> 00:07:27,599
and ntfs

183
00:07:23,759 --> 00:07:31,199
it's kind of like a

184
00:07:27,599 --> 00:07:33,039
master file table entry

185
00:07:31,199 --> 00:07:34,240
except it doesn't have the actual file

186
00:07:33,039 --> 00:07:37,840
name

187
00:07:34,240 --> 00:07:41,599
so if you look at how

188
00:07:37,840 --> 00:07:42,960
a file is referred to on an extended

189
00:07:41,599 --> 00:07:46,159
file system

190
00:07:42,960 --> 00:07:49,440
it's simply a matter of

191
00:07:46,160 --> 00:07:52,319
saying hey here's the inode

192
00:07:49,440 --> 00:07:52,319
for this file

193
00:07:52,960 --> 00:07:56,878
so each inode again everything you

194
00:07:55,520 --> 00:07:58,240
wanted to know about the file all the

195
00:07:56,879 --> 00:08:01,680
metadata

196
00:07:58,240 --> 00:08:03,440
minus the actual name of the file

197
00:08:01,680 --> 00:08:05,280
so we'll talk a little bit about you

198
00:08:03,440 --> 00:08:06,240
know how do you get the name of the file

199
00:08:05,280 --> 00:08:09,359
out there

200
00:08:06,240 --> 00:08:10,160
and that's in a mapping between inodes

201
00:08:09,360 --> 00:08:12,400
and file names

202
00:08:10,160 --> 00:08:13,840
and that's hey guess what that is it's a

203
00:08:12,400 --> 00:08:17,359
directory entry

204
00:08:13,840 --> 00:08:20,960
not surprising now

205
00:08:17,360 --> 00:08:25,280
if you look at an inode it has a way

206
00:08:20,960 --> 00:08:29,520
of storing your

207
00:08:25,280 --> 00:08:29,520
file right so it has a list

208
00:08:29,599 --> 00:08:36,958
of locations or blocks

209
00:08:33,679 --> 00:08:38,319
for your files so if you look kind of

210
00:08:36,958 --> 00:08:40,239
here at this picture

211
00:08:38,320 --> 00:08:42,560
you'll see that we have what we call

212
00:08:40,240 --> 00:08:46,399
direct blocks

213
00:08:42,559 --> 00:08:49,119
so this will list the first several

214
00:08:46,399 --> 00:08:49,680
blocks that are used to store this file

215
00:08:49,120 --> 00:08:51,680
so

216
00:08:49,680 --> 00:08:53,359
you know let's say your file is only

217
00:08:51,680 --> 00:08:57,439
eight blocks long

218
00:08:53,360 --> 00:08:59,600
it's a short file okay

219
00:08:57,440 --> 00:09:03,279
you can store that just by listing the

220
00:08:59,600 --> 00:09:03,279
blocks which are used

221
00:09:03,839 --> 00:09:07,120
and why is that a good thing well if you

222
00:09:06,080 --> 00:09:09,839
have a lot of small

223
00:09:07,120 --> 00:09:12,320
files which is pretty common on some

224
00:09:09,839 --> 00:09:15,680
unix and linux systems

225
00:09:12,320 --> 00:09:18,080
this works just great well

226
00:09:15,680 --> 00:09:19,680
what if you have a file that's longer

227
00:09:18,080 --> 00:09:23,920
than the number of direct

228
00:09:19,680 --> 00:09:27,199
block spots that you have well now

229
00:09:23,920 --> 00:09:30,240
you have to use an indirect block

230
00:09:27,200 --> 00:09:31,040
so what's an indirect block an indirect

231
00:09:30,240 --> 00:09:35,200
block

232
00:09:31,040 --> 00:09:37,839
points to a block that has a list of

233
00:09:35,200 --> 00:09:37,839
blocks

234
00:09:38,480 --> 00:09:47,600
and if that's still not big enough

235
00:09:43,839 --> 00:09:51,120
then you can go to a doubly

236
00:09:47,600 --> 00:09:52,800
indirect block and guess how that works

237
00:09:51,120 --> 00:09:56,000
you have a

238
00:09:52,800 --> 00:09:59,040
pointer to a block that has a

239
00:09:56,000 --> 00:10:02,000
list of blocks that contain

240
00:09:59,040 --> 00:10:02,000
lists of blocks

241
00:10:02,240 --> 00:10:06,160
and if that's still not enough then we

242
00:10:05,200 --> 00:10:09,519
actually have

243
00:10:06,160 --> 00:10:12,800
triply indirect blocks so this is the

244
00:10:09,519 --> 00:10:17,040
the normal way if you will at least with

245
00:10:12,800 --> 00:10:20,240
x2 and x3 file systems

246
00:10:17,040 --> 00:10:23,599
of storing the list of blocks that a

247
00:10:20,240 --> 00:10:25,680
file is contained in

248
00:10:23,600 --> 00:10:27,360
and of course in unix and linux

249
00:10:25,680 --> 00:10:32,800
everything's a file

250
00:10:27,360 --> 00:10:36,079
so all right

251
00:10:32,800 --> 00:10:39,120
now if you look

252
00:10:36,079 --> 00:10:41,920
at an extended file system they have

253
00:10:39,120 --> 00:10:41,920
some features

254
00:10:43,600 --> 00:10:48,320
and these features

255
00:10:46,640 --> 00:10:50,640
are broken up into three different

256
00:10:48,320 --> 00:10:54,000
categories we have compatible

257
00:10:50,640 --> 00:10:55,760
incompatible and compatible read only

258
00:10:54,000 --> 00:10:57,440
now when i teach this stuff at the

259
00:10:55,760 --> 00:10:58,880
university sometimes people get a little

260
00:10:57,440 --> 00:11:02,640
bit confused

261
00:10:58,880 --> 00:11:06,800
about these things this is compatible

262
00:11:02,640 --> 00:11:09,760
as in what is your os doing

263
00:11:06,800 --> 00:11:11,920
it's not as in what's the file system

264
00:11:09,760 --> 00:11:13,680
doing right the file system is just data

265
00:11:11,920 --> 00:11:16,719
it just sits there

266
00:11:13,680 --> 00:11:20,079
so if your os

267
00:11:16,720 --> 00:11:22,399
doesn't support a compatible feature

268
00:11:20,079 --> 00:11:24,479
you can still safely mount this file

269
00:11:22,399 --> 00:11:27,120
system

270
00:11:24,480 --> 00:11:29,440
and just say okay i don't support this

271
00:11:27,120 --> 00:11:33,839
feature i don't even know what it does

272
00:11:29,440 --> 00:11:37,200
but that's okay if it's incompatible

273
00:11:33,839 --> 00:11:37,200
you shouldn't even mount it

274
00:11:37,519 --> 00:11:47,680
if it's compatible and read only

275
00:11:42,240 --> 00:11:51,440
that means if your os doesn't support it

276
00:11:47,680 --> 00:11:54,000
you can mount that file system but only

277
00:11:51,440 --> 00:11:57,760
read only in other words if you write to

278
00:11:54,000 --> 00:11:59,839
it you're going to mess it up

279
00:11:57,760 --> 00:12:02,319
so you might say why why would i learn

280
00:11:59,839 --> 00:12:05,600
this stuff i was doing forensics

281
00:12:02,320 --> 00:12:07,839
you know you might have an attacker

282
00:12:05,600 --> 00:12:09,279
that has some non-standard extensions

283
00:12:07,839 --> 00:12:11,839
and it's good to know about these

284
00:12:09,279 --> 00:12:11,839
extensions

285
00:12:12,560 --> 00:12:20,319
okay superblocks

286
00:12:15,839 --> 00:12:24,800
superblock as i said is just

287
00:12:20,320 --> 00:12:26,720
a description of this file system

288
00:12:24,800 --> 00:12:28,719
and it tells you things like what's the

289
00:12:26,720 --> 00:12:29,440
block size how many total blocks are

290
00:12:28,720 --> 00:12:32,959
there

291
00:12:29,440 --> 00:12:35,279
how many blocks are there in each group

292
00:12:32,959 --> 00:12:37,279
are there reserved blocks before the

293
00:12:35,279 --> 00:12:40,560
first block group

294
00:12:37,279 --> 00:12:42,880
how many inodes are there so

295
00:12:40,560 --> 00:12:44,800
you can actually run into a situation on

296
00:12:42,880 --> 00:12:46,560
a linux file system

297
00:12:44,800 --> 00:12:48,000
where you have so many files you've run

298
00:12:46,560 --> 00:12:50,239
out of inodes

299
00:12:48,000 --> 00:12:53,120
and you can't store any more files even

300
00:12:50,240 --> 00:12:54,639
though the disk isn't full

301
00:12:53,120 --> 00:12:57,839
it doesn't happen a lot but it could

302
00:12:54,639 --> 00:13:00,240
happen the volume name

303
00:12:57,839 --> 00:13:02,320
and things like the last right time and

304
00:13:00,240 --> 00:13:05,920
the last mount time

305
00:13:02,320 --> 00:13:09,200
and where was it last mounted

306
00:13:05,920 --> 00:13:12,479
also things like is it clean now

307
00:13:09,200 --> 00:13:13,040
here's the important bit from the super

308
00:13:12,480 --> 00:13:14,639
block

309
00:13:13,040 --> 00:13:16,160
you know if you're looking at this in

310
00:13:14,639 --> 00:13:17,360
terms of you know if you're trying to do

311
00:13:16,160 --> 00:13:19,600
forensics

312
00:13:17,360 --> 00:13:21,040
an extended file system you got to be

313
00:13:19,600 --> 00:13:24,399
careful

314
00:13:21,040 --> 00:13:24,880
because if i mount an extended file

315
00:13:24,399 --> 00:13:28,079
system

316
00:13:24,880 --> 00:13:29,519
and i don't have the correct flags guess

317
00:13:28,079 --> 00:13:33,120
what it's going to do

318
00:13:29,519 --> 00:13:35,120
it's going to write into the superblocks

319
00:13:33,120 --> 00:13:37,120
it's going to say here's the last time

320
00:13:35,120 --> 00:13:40,480
that this thing was mounted

321
00:13:37,120 --> 00:13:43,360
and here's where it was mounted

322
00:13:40,480 --> 00:13:43,920
what's going to happen to my evidence

323
00:13:43,360 --> 00:13:45,360
right

324
00:13:43,920 --> 00:13:47,120
you know i'm going to take a hash of

325
00:13:45,360 --> 00:13:48,399
this thing when i make an image of

326
00:13:47,120 --> 00:13:51,440
course

327
00:13:48,399 --> 00:13:53,519
and boom if i rehash it it's going to

328
00:13:51,440 --> 00:13:56,399
change

329
00:13:53,519 --> 00:13:57,760
so you got to be careful when you're

330
00:13:56,399 --> 00:13:59,360
dealing with

331
00:13:57,760 --> 00:14:01,360
an extended file system if you're trying

332
00:13:59,360 --> 00:14:03,040
to do forensics on it

333
00:14:01,360 --> 00:14:04,880
you know if you have say a windows

334
00:14:03,040 --> 00:14:06,639
system

335
00:14:04,880 --> 00:14:08,560
and you take like a thumb drive and you

336
00:14:06,639 --> 00:14:11,519
plug it into your windows box

337
00:14:08,560 --> 00:14:12,719
it will instantly destroy all evidence

338
00:14:11,519 --> 00:14:16,240
because

339
00:14:12,720 --> 00:14:19,199
windows will write to that thing

340
00:14:16,240 --> 00:14:21,040
just to find out about it and find out

341
00:14:19,199 --> 00:14:23,120
about it speed and some other stuff

342
00:14:21,040 --> 00:14:25,439
it actually will create a file and if

343
00:14:23,120 --> 00:14:28,240
you look at it quick enough

344
00:14:25,440 --> 00:14:30,160
in your file browser in windows you can

345
00:14:28,240 --> 00:14:33,040
actually see this file get written

346
00:14:30,160 --> 00:14:36,399
and then delete it which again would

347
00:14:33,040 --> 00:14:36,399
completely destroy your data

348
00:14:36,560 --> 00:14:44,719
okay so if you want to get information

349
00:14:40,720 --> 00:14:46,240
on an extended file system

350
00:14:44,720 --> 00:14:49,120
you can actually use some built-in

351
00:14:46,240 --> 00:14:54,000
commands on your linux box

352
00:14:49,120 --> 00:14:59,360
such as stat stats for statistics

353
00:14:54,000 --> 00:15:03,680
so you can stat a mount point or

354
00:14:59,360 --> 00:15:07,519
you can do the file command

355
00:15:03,680 --> 00:15:07,519
on the device itself

356
00:15:09,839 --> 00:15:15,760
so let me let me do something dangerous

357
00:15:13,839 --> 00:15:17,839
here

358
00:15:15,760 --> 00:15:19,760
it's always dangerous to do this kind of

359
00:15:17,839 --> 00:15:22,639
stuff isn't it

360
00:15:19,760 --> 00:15:22,639
let me just try

361
00:15:24,560 --> 00:15:28,160
let me do a stat

362
00:15:28,560 --> 00:15:34,479
f and i want to do this on my mount

363
00:15:31,440 --> 00:15:37,600
point well i'm going to try

364
00:15:34,480 --> 00:15:39,360
my root directory all right so this is

365
00:15:37,600 --> 00:15:41,680
telling me hey

366
00:15:39,360 --> 00:15:42,959
what is this what kind of file system is

367
00:15:41,680 --> 00:15:46,160
it

368
00:15:42,959 --> 00:15:49,518
block size is 4k

369
00:15:46,160 --> 00:15:51,680
or eight sectors

370
00:15:49,519 --> 00:15:54,480
how many blocks how many inodes how many

371
00:15:51,680 --> 00:15:58,239
of them are free

372
00:15:54,480 --> 00:16:01,600
i can also do the file

373
00:15:58,240 --> 00:16:08,000
command dash s capital

374
00:16:01,600 --> 00:16:11,600
l on dev sda1

375
00:16:08,000 --> 00:16:14,800
and it's going to tell me what is this

376
00:16:11,600 --> 00:16:15,600
it's an mbr based master boot record

377
00:16:14,800 --> 00:16:19,599
based

378
00:16:15,600 --> 00:16:23,839
system in other words it's not using

379
00:16:19,600 --> 00:16:26,480
guid partitions

380
00:16:23,839 --> 00:16:28,160
and it's telling me a little bit about

381
00:16:26,480 --> 00:16:31,600
it

382
00:16:28,160 --> 00:16:36,319
so here are my different partitions

383
00:16:31,600 --> 00:16:38,639
on this disk on my little

384
00:16:36,320 --> 00:16:40,079
wimpy linux workstation with its five

385
00:16:38,639 --> 00:16:43,839
screens etc that i'm

386
00:16:40,079 --> 00:16:43,839
presenting this on okay

387
00:16:44,959 --> 00:16:50,079
so a little bit more about some of these

388
00:16:46,480 --> 00:16:53,920
features compatible features

389
00:16:50,079 --> 00:16:55,920
again you can mount this file system

390
00:16:53,920 --> 00:16:56,959
even if you don't support these features

391
00:16:55,920 --> 00:17:00,639
and you can mount it

392
00:16:56,959 --> 00:17:04,000
read write you should never run fs check

393
00:17:00,639 --> 00:17:05,039
on a file system if it has features that

394
00:17:04,000 --> 00:17:08,880
you don't support

395
00:17:05,039 --> 00:17:08,879
that's kind of a universal given

396
00:17:08,959 --> 00:17:12,480
and you know why would you care it

397
00:17:10,959 --> 00:17:13,120
affects the structure of the block

398
00:17:12,480 --> 00:17:16,720
groups

399
00:17:13,119 --> 00:17:16,719
again if you were doing forensics

400
00:17:17,520 --> 00:17:23,599
so some compatible features uh

401
00:17:20,559 --> 00:17:26,319
directory pre-allocation

402
00:17:23,599 --> 00:17:27,760
or i'll pre-allocate space okay well

403
00:17:26,319 --> 00:17:30,480
maybe that doesn't happen

404
00:17:27,760 --> 00:17:30,480
not a big deal

405
00:17:31,280 --> 00:17:38,080
we have journaling

406
00:17:34,559 --> 00:17:42,480
so if i have a journal x3

407
00:17:38,080 --> 00:17:45,600
next four systems can't have a journal

408
00:17:42,480 --> 00:17:46,000
it's okay if i don't use the journal i

409
00:17:45,600 --> 00:17:48,879
can read

410
00:17:46,000 --> 00:17:50,480
and write directly i should back up for

411
00:17:48,880 --> 00:17:50,960
a second if you don't know what a

412
00:17:50,480 --> 00:17:54,080
journal

413
00:17:50,960 --> 00:17:54,960
is it's basically like a buffer if you

414
00:17:54,080 --> 00:17:58,080
will

415
00:17:54,960 --> 00:18:00,720
where changes are written

416
00:17:58,080 --> 00:18:01,199
to the journal first and then they're

417
00:18:00,720 --> 00:18:05,039
kind of

418
00:18:01,200 --> 00:18:06,960
batched and written to the actual device

419
00:18:05,039 --> 00:18:09,039
and this improves performance and it

420
00:18:06,960 --> 00:18:12,080
also gives you a consistent

421
00:18:09,039 --> 00:18:15,360
state so if you know

422
00:18:12,080 --> 00:18:16,399
file system is possibly corrupted

423
00:18:15,360 --> 00:18:18,639
because

424
00:18:16,400 --> 00:18:20,160
the power was lost to the computer for

425
00:18:18,640 --> 00:18:21,840
example

426
00:18:20,160 --> 00:18:23,679
then it'll look in the journal and go

427
00:18:21,840 --> 00:18:24,159
hey i had some operations i didn't

428
00:18:23,679 --> 00:18:27,760
finish

429
00:18:24,160 --> 00:18:29,200
let me finish that extended attribute

430
00:18:27,760 --> 00:18:32,640
support

431
00:18:29,200 --> 00:18:34,559
having directory indexes

432
00:18:32,640 --> 00:18:35,760
things like that all right so these are

433
00:18:34,559 --> 00:18:38,399
compatible features

434
00:18:35,760 --> 00:18:42,799
so again if i don't have these features

435
00:18:38,400 --> 00:18:45,039
i can just say yeah that's all right

436
00:18:42,799 --> 00:18:47,600
you know some of the features affect the

437
00:18:45,039 --> 00:18:50,640
layout like the resize inode

438
00:18:47,600 --> 00:18:53,918
that's extra space for future expansion

439
00:18:50,640 --> 00:18:57,760
in that group descriptor table

440
00:18:53,919 --> 00:19:00,640
and the sparse super 2 where

441
00:18:57,760 --> 00:19:02,559
super blocks by default are in every

442
00:19:00,640 --> 00:19:06,080
block group

443
00:19:02,559 --> 00:19:09,840
it's very redundant if you look

444
00:19:06,080 --> 00:19:13,760
at a windows file system like let's say

445
00:19:09,840 --> 00:19:18,000
fat well fat32

446
00:19:13,760 --> 00:19:19,679
does have a backup volume boot record

447
00:19:18,000 --> 00:19:21,039
which is essentially what a super block

448
00:19:19,679 --> 00:19:25,520
is

449
00:19:21,039 --> 00:19:29,280
and ntfs also has one

450
00:19:25,520 --> 00:19:31,280
well by default on your x file system

451
00:19:29,280 --> 00:19:32,879
it's going to be in every group so

452
00:19:31,280 --> 00:19:35,840
sparse super 2 says

453
00:19:32,880 --> 00:19:36,480
hey i'm going to have the main super

454
00:19:35,840 --> 00:19:38,720
block

455
00:19:36,480 --> 00:19:40,559
at the beginning of the file system and

456
00:19:38,720 --> 00:19:43,679
then i'm going to have two

457
00:19:40,559 --> 00:19:47,280
and that's it so can that affect the

458
00:19:43,679 --> 00:19:47,280
layout a little bit all right

459
00:19:49,039 --> 00:19:55,039
so now incompatible features

460
00:19:55,520 --> 00:20:01,679
so these are features that

461
00:19:58,720 --> 00:20:03,840
you shouldn't mount not even read only

462
00:20:01,679 --> 00:20:05,280
if you don't support them and of course

463
00:20:03,840 --> 00:20:08,959
if you can't mount it you probably

464
00:20:05,280 --> 00:20:08,960
shouldn't be running fs check on it

465
00:20:09,840 --> 00:20:14,720
so a couple of example incompatible

466
00:20:12,559 --> 00:20:16,480
features compression

467
00:20:14,720 --> 00:20:18,799
if it's a compressed file system you're

468
00:20:16,480 --> 00:20:21,679
not going to be able to read it

469
00:20:18,799 --> 00:20:23,520
you know file type so with the file type

470
00:20:21,679 --> 00:20:24,000
feature directory entries include the

471
00:20:23,520 --> 00:20:27,120
file

472
00:20:24,000 --> 00:20:30,000
type in a field

473
00:20:27,120 --> 00:20:31,678
that has been repurposed so if you don't

474
00:20:30,000 --> 00:20:34,559
support that

475
00:20:31,679 --> 00:20:35,520
then you probably shouldn't be mounting

476
00:20:34,559 --> 00:20:38,799
this

477
00:20:35,520 --> 00:20:39,600
if the file system needs recovery or if

478
00:20:38,799 --> 00:20:42,799
the journal

479
00:20:39,600 --> 00:20:44,320
is stored on an external device

480
00:20:42,799 --> 00:20:46,960
and you don't have access to that

481
00:20:44,320 --> 00:20:50,399
obviously you shouldn't

482
00:20:46,960 --> 00:20:53,840
the mounting it or touching it

483
00:20:50,400 --> 00:20:56,880
uh something called metablock groups

484
00:20:53,840 --> 00:20:58,080
or if the file system uses extents which

485
00:20:56,880 --> 00:21:00,080
is something we're going to talk about

486
00:20:58,080 --> 00:21:03,439
in a little bit

487
00:21:00,080 --> 00:21:06,480
or if it's 64-bit normally it's

488
00:21:03,440 --> 00:21:10,080
32-bit there are

489
00:21:06,480 --> 00:21:12,080
64-bit file systems that you can have

490
00:21:10,080 --> 00:21:13,199
i have never really seen anyone that

491
00:21:12,080 --> 00:21:15,840
needed one

492
00:21:13,200 --> 00:21:17,320
i mean this is a huge file system if

493
00:21:15,840 --> 00:21:22,399
you're going to need

494
00:21:17,320 --> 00:21:22,399
64-bit block numbers

495
00:21:23,039 --> 00:21:26,960
and there's a multi-mod protection

496
00:21:25,120 --> 00:21:29,199
basically it prevents

497
00:21:26,960 --> 00:21:30,159
you from mounting something multiple

498
00:21:29,200 --> 00:21:31,600
times

499
00:21:30,159 --> 00:21:34,960
and then there's another thing called

500
00:21:31,600 --> 00:21:34,959
flexible block groups

501
00:21:35,840 --> 00:21:44,158
some more we have inodes

502
00:21:40,000 --> 00:21:48,720
that can be used for extended attributes

503
00:21:44,159 --> 00:21:51,039
we have data in directory entries

504
00:21:48,720 --> 00:21:53,120
so in the directory itself you might

505
00:21:51,039 --> 00:21:55,360
have part of the file

506
00:21:53,120 --> 00:21:56,399
you have large directories inline data

507
00:21:55,360 --> 00:21:58,479
and encrypted

508
00:21:56,400 --> 00:21:59,760
stuff so if you got encryption and you

509
00:21:58,480 --> 00:22:04,240
don't support it

510
00:21:59,760 --> 00:22:05,840
obviously you can't load that right

511
00:22:04,240 --> 00:22:07,520
so a little bit about some of these

512
00:22:05,840 --> 00:22:09,600
flexible block groups you take

513
00:22:07,520 --> 00:22:11,440
multiple block routes and you treat them

514
00:22:09,600 --> 00:22:15,678
as one logical block

515
00:22:11,440 --> 00:22:17,919
group so the bitmaps and the inodes

516
00:22:15,679 --> 00:22:19,440
table for the whole logical group is in

517
00:22:17,919 --> 00:22:21,600
the first block group and you might say

518
00:22:19,440 --> 00:22:24,240
why would i want to do that

519
00:22:21,600 --> 00:22:24,639
let's say i have a lot of large files

520
00:22:24,240 --> 00:22:27,760
this

521
00:22:24,640 --> 00:22:31,440
allows me to store those large

522
00:22:27,760 --> 00:22:33,360
files and contiguous blocks

523
00:22:31,440 --> 00:22:34,880
right so it's not going to be fragmented

524
00:22:33,360 --> 00:22:37,360
if you will

525
00:22:34,880 --> 00:22:39,120
because if it's a really big file it

526
00:22:37,360 --> 00:22:40,320
might have to get split between

527
00:22:39,120 --> 00:22:42,719
different block groups

528
00:22:40,320 --> 00:22:45,120
and i don't like that we have meta block

529
00:22:42,720 --> 00:22:45,120
groups

530
00:22:46,320 --> 00:22:50,559
and if you have meta block groups your

531
00:22:48,640 --> 00:22:53,360
group descriptors

532
00:22:50,559 --> 00:22:55,360
are in the first second and last block

533
00:22:53,360 --> 00:22:58,479
group

534
00:22:55,360 --> 00:23:00,000
and then of course 64-bit mode it's

535
00:22:58,480 --> 00:23:01,360
really going to change things because it

536
00:23:00,000 --> 00:23:05,600
changes the size

537
00:23:01,360 --> 00:23:08,399
of stuff okay

538
00:23:05,600 --> 00:23:09,280
read-only compatible features your file

539
00:23:08,400 --> 00:23:11,520
system

540
00:23:09,280 --> 00:23:13,440
can be mounted but only read only if you

541
00:23:11,520 --> 00:23:15,600
don't support these features and again

542
00:23:13,440 --> 00:23:17,600
don't run fs check if you don't support

543
00:23:15,600 --> 00:23:21,760
all the features

544
00:23:17,600 --> 00:23:24,959
alright so read only compatible features

545
00:23:21,760 --> 00:23:28,080
you have things like sparse super

546
00:23:24,960 --> 00:23:31,919
you have sparse super blocks you only

547
00:23:28,080 --> 00:23:35,600
have super blocks in block group zero

548
00:23:31,919 --> 00:23:38,640
or powers of three five or seven

549
00:23:35,600 --> 00:23:41,918
we have large files which means that you

550
00:23:38,640 --> 00:23:44,559
have files larger than 2 gigabytes

551
00:23:41,919 --> 00:23:46,080
we have btree directories it's not very

552
00:23:44,559 --> 00:23:49,760
common

553
00:23:46,080 --> 00:23:53,120
but you have a binary tree that is used

554
00:23:49,760 --> 00:23:56,080
in storing the directories

555
00:23:53,120 --> 00:23:57,918
you can also have huge files where the

556
00:23:56,080 --> 00:24:02,080
file sizes are represented

557
00:23:57,919 --> 00:24:04,640
in logical blocks instead of sectors

558
00:24:02,080 --> 00:24:07,199
we have group descriptor tables which

559
00:24:04,640 --> 00:24:09,520
have checksums

560
00:24:07,200 --> 00:24:10,240
we have subdirectories are not limited

561
00:24:09,520 --> 00:24:13,679
to

562
00:24:10,240 --> 00:24:18,559
32k entries so we have really big

563
00:24:13,679 --> 00:24:20,799
subdirectories we have extra inode size

564
00:24:18,559 --> 00:24:22,559
so we have large eye nodes on the system

565
00:24:20,799 --> 00:24:23,679
he's like what's that

566
00:24:22,559 --> 00:24:26,639
we'll talk about that in a little bit

567
00:24:23,679 --> 00:24:30,159
here has a snapshot

568
00:24:26,640 --> 00:24:32,640
or if you have quotas if you

569
00:24:30,159 --> 00:24:34,880
have quotas but you're not able to do

570
00:24:32,640 --> 00:24:34,880
that

571
00:24:35,120 --> 00:24:39,360
you know what am i going to do well

572
00:24:39,679 --> 00:24:45,360
i'm going to just not enforce those

573
00:24:42,960 --> 00:24:45,360
quotas

574
00:24:45,600 --> 00:24:48,719
it's that simple uh we have big alec

575
00:24:48,159 --> 00:24:52,640
mega

576
00:24:48,720 --> 00:24:56,480
metadata checksums if it's a replica

577
00:24:52,640 --> 00:24:59,200
or my favorite if it's read only

578
00:24:56,480 --> 00:25:00,080
if it's marked as read only please only

579
00:24:59,200 --> 00:25:02,720
mount it as

580
00:25:00,080 --> 00:25:02,720
read only

581
00:25:04,000 --> 00:25:08,960
all right so sparse super blocks again

582
00:25:07,039 --> 00:25:10,640
your backup super blocks are only in the

583
00:25:08,960 --> 00:25:14,480
groups that are a power of

584
00:25:10,640 --> 00:25:17,279
three five and seven and the extra eye

585
00:25:14,480 --> 00:25:18,799
size indirectly affects the layout by

586
00:25:17,279 --> 00:25:21,760
changing the size

587
00:25:18,799 --> 00:25:21,760
of the inode

588
00:25:22,320 --> 00:25:26,720
okay so we're going to kind of bang

589
00:25:24,559 --> 00:25:28,559
through these different parts so we kind

590
00:25:26,720 --> 00:25:30,320
of give you the high level view talked a

591
00:25:28,559 --> 00:25:32,720
little bit about features

592
00:25:30,320 --> 00:25:34,639
both compatible features and

593
00:25:32,720 --> 00:25:37,600
incompatible features and read-only

594
00:25:34,640 --> 00:25:37,600
compatible features

595
00:25:37,679 --> 00:25:41,279
so what's a block group well it

596
00:25:39,600 --> 00:25:43,199
describes

597
00:25:41,279 --> 00:25:44,880
the layout of each block group the

598
00:25:43,200 --> 00:25:47,039
descriptor does at least

599
00:25:44,880 --> 00:25:48,640
duh a descriptor describes who would

600
00:25:47,039 --> 00:25:50,640
have thought right

601
00:25:48,640 --> 00:25:52,640
so only the super block and the block

602
00:25:50,640 --> 00:25:55,120
group descriptors are in fixed

603
00:25:52,640 --> 00:25:57,440
positions all the other fields can be

604
00:25:55,120 --> 00:26:00,399
moved around

605
00:25:57,440 --> 00:26:02,400
so descriptors are 32 bytes unless

606
00:26:00,400 --> 00:26:06,000
you're doing a 64-bit

607
00:26:02,400 --> 00:26:11,120
feature then they're 64 bytes

608
00:26:06,000 --> 00:26:14,080
they're twice as long not surprising

609
00:26:11,120 --> 00:26:14,080
looks kind of like this

610
00:26:14,240 --> 00:26:19,520
so you have where is my bitmap

611
00:26:19,760 --> 00:26:24,720
where's my inodes you know where's my

612
00:26:22,640 --> 00:26:26,720
block bitmap my i know bitmap

613
00:26:24,720 --> 00:26:29,440
where's my i know table where do my

614
00:26:26,720 --> 00:26:32,559
inodes begin

615
00:26:29,440 --> 00:26:35,840
how many free blocks do i have how many

616
00:26:32,559 --> 00:26:39,440
free inodes do i have

617
00:26:35,840 --> 00:26:42,399
now some of these values are split

618
00:26:39,440 --> 00:26:43,520
right so you see it says the lower 16

619
00:26:42,400 --> 00:26:47,600
bits

620
00:26:43,520 --> 00:26:50,879
the lower 16 bits the free inode count

621
00:26:47,600 --> 00:26:54,158
any flags that i have

622
00:26:50,880 --> 00:26:57,600
exclude bitmaps block

623
00:26:54,159 --> 00:27:00,240
bitmap checksums which is

624
00:26:57,600 --> 00:27:01,439
rarely used honestly i know bitmap

625
00:27:00,240 --> 00:27:04,840
checksums

626
00:27:01,440 --> 00:27:08,400
i know table that are

627
00:27:04,840 --> 00:27:10,720
unused so

628
00:27:08,400 --> 00:27:12,000
how many i know tables do i have and

629
00:27:10,720 --> 00:27:14,640
then check some

630
00:27:12,000 --> 00:27:14,640
possibly

631
00:27:15,039 --> 00:27:19,200
and if it's 64-bit then i have these

632
00:27:17,440 --> 00:27:21,840
additional

633
00:27:19,200 --> 00:27:21,840
fields

634
00:27:24,640 --> 00:27:31,440
all right so inodes they said an

635
00:27:27,840 --> 00:27:34,158
inode describes a file

636
00:27:31,440 --> 00:27:35,120
the standard size for an inode is 128

637
00:27:34,159 --> 00:27:38,559
bytes

638
00:27:35,120 --> 00:27:42,479
for extended two and three

639
00:27:38,559 --> 00:27:42,480
so you say 128 bytes

640
00:27:46,960 --> 00:27:56,000
if i have a 1k block

641
00:27:50,320 --> 00:28:00,399
so extended 4 currently uses 156 bytes

642
00:27:56,000 --> 00:28:02,480
but it will allocate 256 bytes

643
00:28:00,399 --> 00:28:04,479
on the disk to allow for future

644
00:28:02,480 --> 00:28:07,039
expansion

645
00:28:04,480 --> 00:28:08,799
so here's the tub math problem for the

646
00:28:07,039 --> 00:28:10,879
day

647
00:28:08,799 --> 00:28:12,879
how much extra space do i have well

648
00:28:10,880 --> 00:28:16,880
what's 256 divided

649
00:28:12,880 --> 00:28:19,919
or subtracting 156 from that

650
00:28:16,880 --> 00:28:23,039
that would be a hundred it's a hundred

651
00:28:19,919 --> 00:28:23,039
bytes extra space

652
00:28:23,279 --> 00:28:28,559
so how do you know where an inode is

653
00:28:26,799 --> 00:28:31,600
first you have to figure out the block

654
00:28:28,559 --> 00:28:35,520
group so you take the inode number

655
00:28:31,600 --> 00:28:40,000
minus one and then you take

656
00:28:35,520 --> 00:28:45,200
the i nodes per group and you divide

657
00:28:40,000 --> 00:28:46,880
that inode number by that number

658
00:28:45,200 --> 00:28:48,640
then i'll tell you which block group

659
00:28:46,880 --> 00:28:51,600
you're in

660
00:28:48,640 --> 00:28:53,919
within that block group you need to find

661
00:28:51,600 --> 00:28:55,678
where am i what's the index if you will

662
00:28:53,919 --> 00:28:58,640
the offset

663
00:28:55,679 --> 00:29:02,399
into the table it's going to be that

664
00:28:58,640 --> 00:29:06,880
inode number again -1

665
00:29:02,399 --> 00:29:09,439
and the modulus of the inodes

666
00:29:06,880 --> 00:29:09,440
per group

667
00:29:10,399 --> 00:29:14,399
and if you want to find the offset at

668
00:29:12,159 --> 00:29:15,840
the ino table you just take that index

669
00:29:14,399 --> 00:29:20,879
times the inode size

670
00:29:15,840 --> 00:29:20,879
which we just said is probably 256.

671
00:29:21,279 --> 00:29:27,120
at least for x4 okay so what does it

672
00:29:23,919 --> 00:29:29,360
look like well we have a bunch of stuff

673
00:29:27,120 --> 00:29:33,120
in there we have the file mode

674
00:29:29,360 --> 00:29:38,000
and type we have the

675
00:29:33,120 --> 00:29:41,199
user id who owns the file

676
00:29:38,000 --> 00:29:44,000
what's the size of the file

677
00:29:41,200 --> 00:29:44,960
then we have the access time change time

678
00:29:44,000 --> 00:29:48,559
modify time

679
00:29:44,960 --> 00:29:51,200
and delete time if it's been deleted

680
00:29:48,559 --> 00:29:53,200
and this is stored in seconds from the

681
00:29:51,200 --> 00:29:56,320
epoch

682
00:29:53,200 --> 00:29:59,760
january 1st 1970

683
00:29:56,320 --> 00:29:59,760
universal coordinated time

684
00:30:00,159 --> 00:30:04,720
then we have the group id then the hard

685
00:30:02,559 --> 00:30:07,840
link count

686
00:30:04,720 --> 00:30:11,039
now if you're familiar with ntfs it also

687
00:30:07,840 --> 00:30:13,520
will have a hard link count

688
00:30:11,039 --> 00:30:14,640
and basically that says how many names

689
00:30:13,520 --> 00:30:18,720
do i have

690
00:30:14,640 --> 00:30:18,720
if you will then any flags

691
00:30:19,520 --> 00:30:25,520
the version

692
00:30:22,640 --> 00:30:27,120
some of this stuff is kind of esoteric

693
00:30:25,520 --> 00:30:28,320
and you don't really need to know about

694
00:30:27,120 --> 00:30:30,959
it

695
00:30:28,320 --> 00:30:32,240
you know if the file size the upper 32

696
00:30:30,960 --> 00:30:36,240
bits

697
00:30:32,240 --> 00:30:40,240
and you know upper bits of things like

698
00:30:36,240 --> 00:30:43,520
your user id

699
00:30:40,240 --> 00:30:43,520
group ids etc

700
00:30:44,159 --> 00:30:50,559
okay now we said these are 128 bytes

701
00:30:48,240 --> 00:30:52,159
but if you have an x4 file system

702
00:30:50,559 --> 00:30:55,918
they're going to be bigger

703
00:30:52,159 --> 00:30:58,960
so how much bigger well

704
00:30:55,919 --> 00:30:59,440
these are the extra fields and we have a

705
00:30:58,960 --> 00:31:04,720
couple

706
00:30:59,440 --> 00:31:07,840
of things such as

707
00:31:04,720 --> 00:31:11,600
extra precision

708
00:31:07,840 --> 00:31:11,600
on some of these time stamps

709
00:31:11,840 --> 00:31:17,199
and why is that well there was a problem

710
00:31:15,519 --> 00:31:19,519
you know like 20 years in the future

711
00:31:17,200 --> 00:31:21,840
from now or something like that

712
00:31:19,519 --> 00:31:22,559
there was going to be a rollover of

713
00:31:21,840 --> 00:31:25,840
those

714
00:31:22,559 --> 00:31:26,240
file stamps that are stored as offsets

715
00:31:25,840 --> 00:31:29,600
from

716
00:31:26,240 --> 00:31:30,000
january 1st 1970. so what are they going

717
00:31:29,600 --> 00:31:32,959
to do

718
00:31:30,000 --> 00:31:33,840
well they said we've already fixed that

719
00:31:32,960 --> 00:31:36,960
problem

720
00:31:33,840 --> 00:31:38,879
years and years in advance we added two

721
00:31:36,960 --> 00:31:42,159
extra bits

722
00:31:38,880 --> 00:31:45,279
and we added precision so the timestamps

723
00:31:42,159 --> 00:31:46,320
on an extended file system are actually

724
00:31:45,279 --> 00:31:49,120
to the nearest

725
00:31:46,320 --> 00:31:49,120
nanosecond

726
00:31:49,600 --> 00:31:53,439
just so you know if you compare this to

727
00:31:52,320 --> 00:31:57,600
let's say

728
00:31:53,440 --> 00:32:01,600
a windows file system

729
00:31:57,600 --> 00:32:03,760
like ntfs this is 100 times better

730
00:32:01,600 --> 00:32:04,799
because they only go to hundreds of

731
00:32:03,760 --> 00:32:08,559
nanoseconds

732
00:32:04,799 --> 00:32:12,480
is the precision there so there is

733
00:32:08,559 --> 00:32:16,320
you know objective proof

734
00:32:12,480 --> 00:32:16,880
that windows is at least a hundred times

735
00:32:16,320 --> 00:32:20,080
worse

736
00:32:16,880 --> 00:32:22,880
than linux right there

737
00:32:20,080 --> 00:32:23,600
okay now we have some special inodes if

738
00:32:22,880 --> 00:32:26,480
those was

739
00:32:23,600 --> 00:32:27,600
again ntfs we call these metadata files

740
00:32:26,480 --> 00:32:30,559
but

741
00:32:27,600 --> 00:32:31,039
i know zero there is no such inode we

742
00:32:30,559 --> 00:32:34,480
start at

743
00:32:31,039 --> 00:32:38,320
one and in inode one

744
00:32:34,480 --> 00:32:40,480
we put our defective block list twos

745
00:32:38,320 --> 00:32:41,600
root directory and then there are some

746
00:32:40,480 --> 00:32:44,960
others as well

747
00:32:41,600 --> 00:32:44,959
like where's my journal

748
00:32:45,120 --> 00:32:50,959
and there you have it so these are

749
00:32:48,240 --> 00:32:53,919
like the early inodes and they all have

750
00:32:50,960 --> 00:32:53,919
a special meaning

751
00:32:55,679 --> 00:32:59,679
so if i look at the file mode there's

752
00:32:57,919 --> 00:33:02,640
just a bitmap

753
00:32:59,679 --> 00:33:03,279
of things like you know do i have set

754
00:33:02,640 --> 00:33:07,600
uid

755
00:33:03,279 --> 00:33:10,720
or set g id do i have the sticky bit set

756
00:33:07,600 --> 00:33:13,360
and then we have our read

757
00:33:10,720 --> 00:33:14,080
write execute permissions for the owner

758
00:33:13,360 --> 00:33:16,799
the group

759
00:33:14,080 --> 00:33:16,799
and others

760
00:33:20,399 --> 00:33:24,879
then we have some of these flags they're

761
00:33:24,000 --> 00:33:27,519
a little bit

762
00:33:24,880 --> 00:33:28,159
weird some of them like you know file

763
00:33:27,519 --> 00:33:31,679
tail not

764
00:33:28,159 --> 00:33:34,480
merged or data written through journal

765
00:33:31,679 --> 00:33:34,799
or you know directory has hash indexes

766
00:33:34,480 --> 00:33:38,000
so

767
00:33:34,799 --> 00:33:41,840
some special cases here

768
00:33:38,000 --> 00:33:43,519
and some more flags as well

769
00:33:41,840 --> 00:33:45,600
again you know we don't have time in

770
00:33:43,519 --> 00:33:49,679
this kind of quick

771
00:33:45,600 --> 00:33:49,678
introduction to go through all of these

772
00:33:50,559 --> 00:33:57,600
all right so i know time stamps

773
00:33:53,840 --> 00:34:00,639
again we have these time stamps

774
00:33:57,600 --> 00:34:05,360
in the lower 128 bytes and

775
00:34:00,640 --> 00:34:09,200
once again as i just said we have

776
00:34:05,360 --> 00:34:12,960
two bits used to extend

777
00:34:09,199 --> 00:34:14,399
the timestamp to a 34-bit value instead

778
00:34:12,960 --> 00:34:17,440
of a 32-bit value

779
00:34:14,399 --> 00:34:19,839
to prevent this rollover problem

780
00:34:17,440 --> 00:34:20,879
and if i remember correctly that'll get

781
00:34:19,839 --> 00:34:25,520
us to like

782
00:34:20,879 --> 00:34:28,639
2 400 and something in terms of the year

783
00:34:25,520 --> 00:34:30,719
and i'm pretty sure

784
00:34:28,639 --> 00:34:32,480
that we'll be using something different

785
00:34:30,719 --> 00:34:36,319
by that right

786
00:34:32,480 --> 00:34:36,879
and the upper 30 bits of the extra 32

787
00:34:36,320 --> 00:34:39,200
bits

788
00:34:36,879 --> 00:34:41,359
gives you the nanosecond accuracy for

789
00:34:39,199 --> 00:34:44,879
timestamps which is pretty cool

790
00:34:41,359 --> 00:34:48,319
especially if you like to do forensics

791
00:34:44,879 --> 00:34:51,598
okay we need to go from an

792
00:34:48,320 --> 00:34:51,599
inode to a file

793
00:34:52,639 --> 00:34:58,640
so how do we do that well that's

794
00:34:55,839 --> 00:34:59,920
directories right so we have regular

795
00:34:58,640 --> 00:35:03,839
files and directories

796
00:34:59,920 --> 00:35:03,839
direct and indirect blocks

797
00:35:04,240 --> 00:35:09,040
we have symbolic links

798
00:35:07,280 --> 00:35:10,720
symbolic links will be stored in an

799
00:35:09,040 --> 00:35:14,320
inode block if

800
00:35:10,720 --> 00:35:17,439
the target is less than 60 bytes long

801
00:35:14,320 --> 00:35:20,079
and if inline data flag is set

802
00:35:17,440 --> 00:35:21,119
the first 60 bytes of a file can be

803
00:35:20,079 --> 00:35:24,240
stored

804
00:35:21,119 --> 00:35:24,240
in the inode itself

805
00:35:25,839 --> 00:35:31,680
now if you're running x4

806
00:35:30,000 --> 00:35:34,560
you could have something called an

807
00:35:31,680 --> 00:35:38,480
extent tree

808
00:35:34,560 --> 00:35:39,839
that is stored in your inode

809
00:35:38,480 --> 00:35:42,400
and that's kind of where i got this

810
00:35:39,839 --> 00:35:44,720
title from i said what is the extent

811
00:35:42,400 --> 00:35:45,520
of your extended file system knowledge

812
00:35:44,720 --> 00:35:48,640
well

813
00:35:45,520 --> 00:35:50,960
okay i know it was a bad joke but that's

814
00:35:48,640 --> 00:35:53,040
where i got it from

815
00:35:50,960 --> 00:35:55,280
so a little bit more about direct and

816
00:35:53,040 --> 00:35:57,520
indirect blocks

817
00:35:55,280 --> 00:35:58,640
so he said before i had a little picture

818
00:35:57,520 --> 00:36:03,599
and i said the first

819
00:35:58,640 --> 00:36:06,720
12 blocks 0.2 data blocks

820
00:36:03,599 --> 00:36:09,760
so if you have a file that's

821
00:36:06,720 --> 00:36:11,839
48k or less which is a lot of files

822
00:36:09,760 --> 00:36:13,359
actually especially on unix and linux

823
00:36:11,839 --> 00:36:16,720
again

824
00:36:13,359 --> 00:36:18,400
you can just say oh here's it's 12

825
00:36:16,720 --> 00:36:21,839
blocks

826
00:36:18,400 --> 00:36:24,880
now the 13th block pointer

827
00:36:21,839 --> 00:36:28,320
points to an indirect block

828
00:36:24,880 --> 00:36:31,440
that contains pointers to blots

829
00:36:28,320 --> 00:36:35,520
so if i have

830
00:36:31,440 --> 00:36:42,079
a pointer to this block that has

831
00:36:35,520 --> 00:36:45,440
other blocks i have a thousand pointers

832
00:36:42,079 --> 00:36:45,440
in my 4k block

833
00:36:46,240 --> 00:36:54,879
because i have 32-bit

834
00:36:51,760 --> 00:36:57,280
block ids if you will

835
00:36:54,880 --> 00:36:59,440
that's a 32-bit number it says this

836
00:36:57,280 --> 00:37:02,480
block

837
00:36:59,440 --> 00:37:06,560
so i have 1k times 4k and doing some

838
00:37:02,480 --> 00:37:08,160
advanced mathematics that's 4 megabytes

839
00:37:06,560 --> 00:37:10,078
so if i have something that's four

840
00:37:08,160 --> 00:37:13,520
megabytes plus 48k

841
00:37:10,079 --> 00:37:16,560
or less i can store it

842
00:37:13,520 --> 00:37:19,599
in the first 13 blocks right

843
00:37:16,560 --> 00:37:22,078
because the one is an indirect block

844
00:37:19,599 --> 00:37:22,880
well what if i get larger than that well

845
00:37:22,079 --> 00:37:26,480
now

846
00:37:22,880 --> 00:37:28,400
the 14th block is a doubly indirect

847
00:37:26,480 --> 00:37:29,920
block that points to a block containing

848
00:37:28,400 --> 00:37:34,839
blocked pointers

849
00:37:29,920 --> 00:37:36,160
so now i have 1k times 1 k times 4k or 4

850
00:37:34,839 --> 00:37:39,040
gigabytes

851
00:37:36,160 --> 00:37:40,799
and what if i get larger than that now i

852
00:37:39,040 --> 00:37:44,240
have the ability

853
00:37:40,800 --> 00:37:44,880
to point to a block that points to

854
00:37:44,240 --> 00:37:48,479
blocks

855
00:37:44,880 --> 00:37:51,520
containing double indirect blocks

856
00:37:48,480 --> 00:37:53,040
and if i once again do the math i can

857
00:37:51,520 --> 00:37:57,280
store something that's four

858
00:37:53,040 --> 00:38:00,160
terabytes using that system

859
00:37:57,280 --> 00:38:02,160
so i can store things that are really

860
00:38:00,160 --> 00:38:02,960
really large i can have very very large

861
00:38:02,160 --> 00:38:05,839
files

862
00:38:02,960 --> 00:38:05,839
on my file system

863
00:38:07,119 --> 00:38:15,119
but how efficient is that well

864
00:38:11,599 --> 00:38:15,119
maybe not terribly efficient

865
00:38:15,280 --> 00:38:22,079
so x4 has these things called extents

866
00:38:18,880 --> 00:38:23,599
where they use a tree structure so there

867
00:38:22,079 --> 00:38:27,520
are three kinds of entries

868
00:38:23,599 --> 00:38:30,160
in the tree we have a header

869
00:38:27,520 --> 00:38:31,119
an index which is kind of a middle node

870
00:38:30,160 --> 00:38:35,359
in this tree

871
00:38:31,119 --> 00:38:35,359
and an extent that's the leaf node

872
00:38:37,040 --> 00:38:40,480
so here's the extent header so what do

873
00:38:40,000 --> 00:38:43,680
they do

874
00:38:40,480 --> 00:38:44,000
they repurpose those 60 bytes right so i

875
00:38:43,680 --> 00:38:47,520
have

876
00:38:44,000 --> 00:38:49,920
15 entries times 4 bytes 60 bytes

877
00:38:47,520 --> 00:38:51,280
and they repurpose it instead of listing

878
00:38:49,920 --> 00:38:54,320
data blocks they say

879
00:38:51,280 --> 00:38:57,280
hey we're using extents

880
00:38:54,320 --> 00:38:58,400
so if you look back in this presentation

881
00:38:57,280 --> 00:39:01,119
to where i talked about

882
00:38:58,400 --> 00:39:02,640
incompatible features if you don't

883
00:39:01,119 --> 00:39:05,680
support extents

884
00:39:02,640 --> 00:39:07,520
and this file system uses them you're

885
00:39:05,680 --> 00:39:09,919
not going to be able to read this

886
00:39:07,520 --> 00:39:11,280
i actually had a couple of folks contact

887
00:39:09,920 --> 00:39:15,440
me

888
00:39:11,280 --> 00:39:18,160
and they said hey i'm trying to do

889
00:39:15,440 --> 00:39:20,480
some forensics on extended file systems

890
00:39:18,160 --> 00:39:22,560
i'm like oh okay that's interesting

891
00:39:20,480 --> 00:39:24,480
and then then they said something crazy

892
00:39:22,560 --> 00:39:25,920
like yeah i'm using windows i'm like

893
00:39:24,480 --> 00:39:28,000
what

894
00:39:25,920 --> 00:39:30,000
what are you doing that for but or you

895
00:39:28,000 --> 00:39:34,560
know i'm using

896
00:39:30,000 --> 00:39:38,160
my windows uh scripting language

897
00:39:34,560 --> 00:39:40,160
to do that powershell

898
00:39:38,160 --> 00:39:42,319
and like i keep getting sent to these

899
00:39:40,160 --> 00:39:45,200
really funny places

900
00:39:42,320 --> 00:39:46,480
like blocks that don't exist well the

901
00:39:45,200 --> 00:39:50,399
reason for that

902
00:39:46,480 --> 00:39:53,920
is they kept looking at this block

903
00:39:50,400 --> 00:39:53,920
at f30a

904
00:39:54,000 --> 00:39:59,119
and it's like uh there is no such block

905
00:39:59,680 --> 00:40:04,240
so it has a magic number that's just a

906
00:40:02,880 --> 00:40:07,280
marker that says hey

907
00:40:04,240 --> 00:40:10,240
it's not a real block here this

908
00:40:07,280 --> 00:40:12,240
is using extents because that is not

909
00:40:10,240 --> 00:40:14,560
going to be a legal

910
00:40:12,240 --> 00:40:16,479
block that combined with the next two

911
00:40:14,560 --> 00:40:18,400
bytes

912
00:40:16,480 --> 00:40:19,760
then we have the entries that follow the

913
00:40:18,400 --> 00:40:22,880
header

914
00:40:19,760 --> 00:40:25,599
maximum number of entries

915
00:40:22,880 --> 00:40:28,240
then we have the depth you know how deep

916
00:40:25,599 --> 00:40:30,319
is this tree

917
00:40:28,240 --> 00:40:33,759
if it the depth is zero then i'm

918
00:40:30,319 --> 00:40:33,759
pointing at data blocks

919
00:40:34,079 --> 00:40:38,880
if it's one to five this node points to

920
00:40:36,319 --> 00:40:42,880
other extents

921
00:40:38,880 --> 00:40:42,880
and then we have a tree generation

922
00:40:44,640 --> 00:40:49,118
then we have an index again this is the

923
00:40:47,839 --> 00:40:52,319
middle

924
00:40:49,119 --> 00:40:55,359
node if you will so this

925
00:40:52,319 --> 00:40:58,400
node covers which blocks block x

926
00:40:55,359 --> 00:40:59,119
and following then we have the lower 32

927
00:40:58,400 --> 00:41:02,240
bits

928
00:40:59,119 --> 00:41:04,319
of the block containing the node

929
00:41:02,240 --> 00:41:07,680
one level lower in the tree and we have

930
00:41:04,319 --> 00:41:12,160
the upper 16 bits of the block

931
00:41:07,680 --> 00:41:15,200
described above so we have 48 bits

932
00:41:12,160 --> 00:41:15,200
and then we have padding

933
00:41:17,599 --> 00:41:20,800
now if it's the node you know it's in a

934
00:41:20,319 --> 00:41:24,640
leaf

935
00:41:20,800 --> 00:41:27,520
node i have the first block

936
00:41:24,640 --> 00:41:27,520
and then the length

937
00:41:28,160 --> 00:41:31,920
and then we have the starting block

938
00:41:33,680 --> 00:41:36,640
and then we have

939
00:41:38,480 --> 00:41:46,720
um well we had the block

940
00:41:42,400 --> 00:41:46,720
count right so

941
00:41:47,280 --> 00:41:53,680
it's kind of like data runs in

942
00:41:51,440 --> 00:41:56,000
ntfs if you're familiar with that i mean

943
00:41:53,680 --> 00:41:58,319
it's not stored the exact same way

944
00:41:56,000 --> 00:41:59,440
but it's kind of similar so if we go

945
00:41:58,319 --> 00:42:03,680
back

946
00:41:59,440 --> 00:42:07,839
a step and we say all right

947
00:42:03,680 --> 00:42:11,839
i have my

948
00:42:07,839 --> 00:42:14,640
data blocks and

949
00:42:11,839 --> 00:42:15,440
i had block groups where i said i got a

950
00:42:14,640 --> 00:42:18,560
large

951
00:42:15,440 --> 00:42:20,400
large files and i want to make some of

952
00:42:18,560 --> 00:42:23,759
those files contiguous

953
00:42:20,400 --> 00:42:26,480
well if i'm using extents i can possibly

954
00:42:23,760 --> 00:42:31,839
store a very large file

955
00:42:26,480 --> 00:42:31,839
using one extent

956
00:42:32,400 --> 00:42:36,560
and if you think about that and how

957
00:42:34,240 --> 00:42:37,118
would that compare to using the older

958
00:42:36,560 --> 00:42:39,279
system

959
00:42:37,119 --> 00:42:40,319
where i'm going to go to it you know

960
00:42:39,280 --> 00:42:42,319
direct block

961
00:42:40,319 --> 00:42:45,119
indirect block doubly indirect and

962
00:42:42,319 --> 00:42:47,440
possibly triply indirect blocks

963
00:42:45,119 --> 00:42:48,960
you know that is going to be really

964
00:42:47,440 --> 00:42:52,720
really complicated

965
00:42:48,960 --> 00:42:55,520
and how many blocks am i going to use

966
00:42:52,720 --> 00:42:57,200
just to store all of these stinking

967
00:42:55,520 --> 00:42:59,119
blocks

968
00:42:57,200 --> 00:43:00,960
right so i have blocks that are being

969
00:42:59,119 --> 00:43:05,119
consumed to list

970
00:43:00,960 --> 00:43:08,079
lists of blocks so you can see

971
00:43:05,119 --> 00:43:09,280
where in terms of performance this is

972
00:43:08,079 --> 00:43:11,200
going to be bad

973
00:43:09,280 --> 00:43:14,400
right if you don't have extents enabled

974
00:43:11,200 --> 00:43:16,399
and you have a lot of large files

975
00:43:14,400 --> 00:43:18,079
it's going to take a while to retrieve

976
00:43:16,400 --> 00:43:20,319
all that because you have to go through

977
00:43:18,079 --> 00:43:23,839
so much information

978
00:43:20,319 --> 00:43:26,480
and also in terms of efficiency you're

979
00:43:23,839 --> 00:43:28,480
taking up a lot of space to store the

980
00:43:26,480 --> 00:43:29,119
list of blocks that contain your files

981
00:43:28,480 --> 00:43:30,560
and now

982
00:43:29,119 --> 00:43:34,160
things are definitely not in the same

983
00:43:30,560 --> 00:43:37,920
block groups which is not as efficient

984
00:43:34,160 --> 00:43:40,078
you know it turns out

985
00:43:37,920 --> 00:43:41,040
that the operating system will try its

986
00:43:40,079 --> 00:43:43,520
best

987
00:43:41,040 --> 00:43:44,880
where it can to keep things in the same

988
00:43:43,520 --> 00:43:47,839
directory

989
00:43:44,880 --> 00:43:48,319
in the same block groups so if i were to

990
00:43:47,839 --> 00:43:51,359
look

991
00:43:48,319 --> 00:43:52,880
at inode numbers of

992
00:43:51,359 --> 00:43:55,759
things in a directory they're going to

993
00:43:52,880 --> 00:43:57,200
look very similar

994
00:43:55,760 --> 00:43:59,280
and that's something i talk about in the

995
00:43:57,200 --> 00:44:01,118
book when he talks when i talk about

996
00:43:59,280 --> 00:44:05,920
doing forensics on this stuff

997
00:44:01,119 --> 00:44:08,160
okay going from inodes to file names

998
00:44:05,920 --> 00:44:10,480
that's what a directory is it just maps

999
00:44:08,160 --> 00:44:12,799
the names to the inodes

1000
00:44:10,480 --> 00:44:13,599
so each directory is treated like a file

1001
00:44:12,800 --> 00:44:15,359
duh

1002
00:44:13,599 --> 00:44:17,520
it's linux of course everything's

1003
00:44:15,359 --> 00:44:19,200
treated like a file

1004
00:44:17,520 --> 00:44:20,640
and how does this work so you have an

1005
00:44:19,200 --> 00:44:23,040
entry

1006
00:44:20,640 --> 00:44:24,879
and you have an offset you know it

1007
00:44:23,040 --> 00:44:28,000
starts at zero and then of course you

1008
00:44:24,880 --> 00:44:28,000
have your inode

1009
00:44:28,720 --> 00:44:33,520
so that's four bytes you know how long

1010
00:44:31,280 --> 00:44:35,839
is this record

1011
00:44:33,520 --> 00:44:36,960
what is the name length and then we have

1012
00:44:35,839 --> 00:44:40,078
the name

1013
00:44:36,960 --> 00:44:42,720
so you can have up to 255 characters

1014
00:44:40,079 --> 00:44:42,720
for a name

1015
00:44:43,839 --> 00:44:49,040
now you might notice

1016
00:44:47,200 --> 00:44:50,640
i have two bytes to store the name

1017
00:44:49,040 --> 00:44:55,200
length and i just told you

1018
00:44:50,640 --> 00:44:55,200
the maximum length is 255 characters

1019
00:44:56,560 --> 00:45:04,319
so it seems to me like

1020
00:45:00,079 --> 00:45:08,480
i wasted a bite

1021
00:45:04,319 --> 00:45:11,359
well if i have the file type

1022
00:45:08,480 --> 00:45:12,800
feature enabled guess what i'm going to

1023
00:45:11,359 --> 00:45:16,480
do now

1024
00:45:12,800 --> 00:45:19,839
now i have

1025
00:45:16,480 --> 00:45:20,720
a one byte name length and i use the

1026
00:45:19,839 --> 00:45:24,319
extra byte

1027
00:45:20,720 --> 00:45:26,399
to say what kind of file is this

1028
00:45:24,319 --> 00:45:27,759
this is another incompatible feature if

1029
00:45:26,400 --> 00:45:29,760
i don't support it i'm going to be

1030
00:45:27,760 --> 00:45:32,000
confused

1031
00:45:29,760 --> 00:45:32,960
is it an unknown file type is it regular

1032
00:45:32,000 --> 00:45:35,440
file directory

1033
00:45:32,960 --> 00:45:37,040
character block or character device

1034
00:45:35,440 --> 00:45:40,079
block device

1035
00:45:37,040 --> 00:45:43,359
fifo or named pipe if you will

1036
00:45:40,079 --> 00:45:45,520
socket sim link so now

1037
00:45:43,359 --> 00:45:46,640
i can store this information in the

1038
00:45:45,520 --> 00:45:48,640
directory entry

1039
00:45:46,640 --> 00:45:51,040
and i don't have to actually go to the

1040
00:45:48,640 --> 00:45:53,279
inode itself so this is an efficiency

1041
00:45:51,040 --> 00:45:53,279
thing

1042
00:45:56,319 --> 00:46:02,720
and then we have a directory tail

1043
00:45:59,599 --> 00:46:06,160
so what's this it's a phony entry

1044
00:46:02,720 --> 00:46:09,118
at the end of each directory block

1045
00:46:06,160 --> 00:46:11,359
and it's used to pretty much say hey on

1046
00:46:09,119 --> 00:46:15,440
the end

1047
00:46:11,359 --> 00:46:18,319
and it has a checksum

1048
00:46:15,440 --> 00:46:18,319
for this block

1049
00:46:21,359 --> 00:46:28,078
now earlier we talked a little bit about

1050
00:46:26,560 --> 00:46:29,599
some of these things like hash

1051
00:46:28,079 --> 00:46:32,720
directories

1052
00:46:29,599 --> 00:46:35,200
so how does that work

1053
00:46:32,720 --> 00:46:35,759
they use hashes so that you can more

1054
00:46:35,200 --> 00:46:38,480
quickly

1055
00:46:35,760 --> 00:46:39,839
search through directory entries and

1056
00:46:38,480 --> 00:46:42,800
what they do

1057
00:46:39,839 --> 00:46:46,799
is they kind of fool the old systems by

1058
00:46:42,800 --> 00:46:46,800
putting them after this directory tail

1059
00:46:47,119 --> 00:46:51,040
so if you have a system that doesn't

1060
00:46:48,960 --> 00:46:53,280
support hash directories it just ignores

1061
00:46:51,040 --> 00:46:53,279
these

1062
00:46:53,839 --> 00:46:59,200
so it's okay you can still load this

1063
00:46:55,760 --> 00:46:59,200
file system you can mount it

1064
00:46:59,680 --> 00:47:03,440
so they're stored in a hashed balanced

1065
00:47:01,760 --> 00:47:06,480
tree

1066
00:47:03,440 --> 00:47:06,480
or an h tree

1067
00:47:08,839 --> 00:47:12,720
and

1068
00:47:10,480 --> 00:47:14,560
it stores things like the dot and dot

1069
00:47:12,720 --> 00:47:17,118
dot entries

1070
00:47:14,560 --> 00:47:18,960
at the start of the block you know dot

1071
00:47:17,119 --> 00:47:22,079
is a pointer to this thing

1072
00:47:18,960 --> 00:47:24,960
dot dot to my parent

1073
00:47:22,079 --> 00:47:26,720
which if again if you look at like a lot

1074
00:47:24,960 --> 00:47:31,359
of the windows file systems like

1075
00:47:26,720 --> 00:47:35,118
fat they actually do that

1076
00:47:31,359 --> 00:47:38,000
all right we can do

1077
00:47:35,119 --> 00:47:41,040
you know a root hash directory block you

1078
00:47:38,000 --> 00:47:41,040
know what does it look like

1079
00:47:41,280 --> 00:47:48,319
and you know what's the actual

1080
00:47:44,480 --> 00:47:48,319
directory block look like

1081
00:47:50,720 --> 00:47:55,200
and this is just a little more detail

1082
00:47:52,400 --> 00:47:55,200
there right

1083
00:47:57,280 --> 00:48:05,599
okay inodes and extended attributes

1084
00:48:01,680 --> 00:48:09,040
so linux supports extended attributes

1085
00:48:05,599 --> 00:48:11,680
and where can you store these things

1086
00:48:09,040 --> 00:48:13,440
you can store it in that extra space

1087
00:48:11,680 --> 00:48:17,200
between the inodes

1088
00:48:13,440 --> 00:48:19,760
so you got 256 minus the inode size

1089
00:48:17,200 --> 00:48:21,279
which is usually 156. so you got 100

1090
00:48:19,760 --> 00:48:24,319
bytes

1091
00:48:21,280 --> 00:48:24,960
or you can put them in data block that's

1092
00:48:24,319 --> 00:48:29,359
pointed to

1093
00:48:24,960 --> 00:48:32,559
by file acl in the inode there's a field

1094
00:48:29,359 --> 00:48:34,720
there so first use

1095
00:48:32,559 --> 00:48:36,640
for this stuff was in access control

1096
00:48:34,720 --> 00:48:38,399
lists or acls

1097
00:48:36,640 --> 00:48:40,240
so there are a lot of commands out there

1098
00:48:38,400 --> 00:48:43,680
that you can use the command line

1099
00:48:40,240 --> 00:48:45,759
that might start with the acl but

1100
00:48:43,680 --> 00:48:47,279
you can store pretty much anything you

1101
00:48:45,760 --> 00:48:50,480
want in there

1102
00:48:47,280 --> 00:48:56,000
you can start it with a user dot

1103
00:48:50,480 --> 00:48:56,000
sort of a name space if you will

1104
00:48:56,960 --> 00:49:02,079
so if you're using acls

1105
00:49:00,480 --> 00:49:03,680
you have to make sure that you have the

1106
00:49:02,079 --> 00:49:04,160
right kernel options if you're running

1107
00:49:03,680 --> 00:49:06,879
like an

1108
00:49:04,160 --> 00:49:06,879
older system

1109
00:49:07,520 --> 00:49:14,800
so how does it work if

1110
00:49:10,960 --> 00:49:17,040
you're storing this in an inode

1111
00:49:14,800 --> 00:49:19,359
you have to start with a magic number

1112
00:49:17,040 --> 00:49:22,400
and again why a magic number

1113
00:49:19,359 --> 00:49:24,720
so that you know it's not going to get

1114
00:49:22,400 --> 00:49:26,480
confused

1115
00:49:24,720 --> 00:49:28,399
and then you have a reference count how

1116
00:49:26,480 --> 00:49:29,440
many people are you know pointing at

1117
00:49:28,400 --> 00:49:32,800
this

1118
00:49:29,440 --> 00:49:36,480
the blocks used to store it

1119
00:49:32,800 --> 00:49:36,480
a hash value checksum

1120
00:49:37,520 --> 00:49:42,319
and your actual attribute

1121
00:49:42,839 --> 00:49:50,160
now if i look

1122
00:49:46,880 --> 00:49:51,359
at my extended attributes there's this

1123
00:49:50,160 --> 00:49:53,920
name prefix

1124
00:49:51,359 --> 00:49:55,520
and i said you know user dot and why did

1125
00:49:53,920 --> 00:49:58,160
they do this

1126
00:49:55,520 --> 00:49:59,440
it would be super inefficient if i

1127
00:49:58,160 --> 00:50:02,480
wanted something like

1128
00:49:59,440 --> 00:50:06,000
especially this system posix acl

1129
00:50:02,480 --> 00:50:08,240
access as my prefix and i

1130
00:50:06,000 --> 00:50:09,839
had to store that stinking string all

1131
00:50:08,240 --> 00:50:13,118
the time

1132
00:50:09,839 --> 00:50:17,520
it would be very annoying so instead

1133
00:50:13,119 --> 00:50:20,160
what i do here is i will store

1134
00:50:17,520 --> 00:50:22,880
the prefix and i have some standard

1135
00:50:20,160 --> 00:50:22,879
prefixes

1136
00:50:25,280 --> 00:50:29,599
so i can store all kinds of stuff in

1137
00:50:28,240 --> 00:50:31,919
these attributes

1138
00:50:29,599 --> 00:50:32,960
um what kinds of things have i seen

1139
00:50:31,920 --> 00:50:36,559
stored there

1140
00:50:32,960 --> 00:50:37,440
uh attribution right let's say i

1141
00:50:36,559 --> 00:50:41,200
download an

1142
00:50:37,440 --> 00:50:44,079
image off the internet it can store

1143
00:50:41,200 --> 00:50:44,078
where i got it

1144
00:50:44,720 --> 00:50:48,240
so if i take that same image i don't

1145
00:50:46,880 --> 00:50:51,760
know let's say

1146
00:50:48,240 --> 00:50:56,000
i downloaded a bunch of images from

1147
00:50:51,760 --> 00:50:58,160
one of my websites and you went out and

1148
00:50:56,000 --> 00:51:00,559
wrote your own book on linux forensics

1149
00:50:58,160 --> 00:51:04,720
or something like that

1150
00:51:00,559 --> 00:51:08,319
these images would potentially be tagged

1151
00:51:04,720 --> 00:51:11,598
as coming from me and that

1152
00:51:08,319 --> 00:51:13,520
might be something that could be used

1153
00:51:11,599 --> 00:51:15,760
if you try to claim oh no i made this

1154
00:51:13,520 --> 00:51:17,520
image all by myself

1155
00:51:15,760 --> 00:51:20,160
you know i could probably go back and go

1156
00:51:17,520 --> 00:51:22,880
uh actually no you didn't

1157
00:51:20,160 --> 00:51:23,200
and i can prove that you didn't all

1158
00:51:22,880 --> 00:51:27,200
right

1159
00:51:23,200 --> 00:51:31,919
so that is our kind of quick whirlwind

1160
00:51:27,200 --> 00:51:33,759
tour of extended file systems

1161
00:51:31,920 --> 00:51:35,920
including some of the newer features

1162
00:51:33,760 --> 00:51:38,240
like extents

1163
00:51:35,920 --> 00:51:39,520
i realize this is a pretty short

1164
00:51:38,240 --> 00:51:42,240
presentation

1165
00:51:39,520 --> 00:51:44,160
so feel free if you want to ask me any

1166
00:51:42,240 --> 00:51:46,640
questions about it later

1167
00:51:44,160 --> 00:51:48,000
you can always email me at pollster

1168
00:51:46,640 --> 00:51:51,359
gmail.com

1169
00:51:48,000 --> 00:51:55,119
you can also hit me up on twitter

1170
00:51:51,359 --> 00:51:58,720
and as i said this is just

1171
00:51:55,119 --> 00:52:00,880
an overview of one of the chapters in my

1172
00:51:58,720 --> 00:52:03,759
linux forensics books

1173
00:52:00,880 --> 00:52:05,520
um you can also get some more videos and

1174
00:52:03,760 --> 00:52:10,960
the files

1175
00:52:05,520 --> 00:52:12,640
for this at linuxforensicsbook.com

1176
00:52:10,960 --> 00:52:14,800
you can download all the scripts from

1177
00:52:12,640 --> 00:52:17,200
the book

1178
00:52:14,800 --> 00:52:18,240
and there are a couple of videos for

1179
00:52:17,200 --> 00:52:20,720
each chapter

1180
00:52:18,240 --> 00:52:21,839
as well just to kind of give you an

1181
00:52:20,720 --> 00:52:25,200
overview

1182
00:52:21,839 --> 00:52:30,640
of some of this process so

1183
00:52:25,200 --> 00:52:30,640
with that i will relinquish

1184
00:52:31,359 --> 00:52:47,839
my screen

1185
00:52:50,640 --> 00:52:56,000
and let me go ahead

1186
00:52:56,559 --> 00:53:15,839
and real quick just kind of show you

1187
00:53:00,160 --> 00:53:15,839
that website

1188
00:53:18,800 --> 00:53:23,520
i've become very adept at

1189
00:53:23,680 --> 00:53:31,520
using zoom because

1190
00:53:27,680 --> 00:53:34,640
bloomsburg university has once again

1191
00:53:31,520 --> 00:53:35,599
gone back to online only instruction for

1192
00:53:34,640 --> 00:53:38,799
almost everything

1193
00:53:35,599 --> 00:53:39,359
so some of the students now refer to it

1194
00:53:38,800 --> 00:53:42,720
as

1195
00:53:39,359 --> 00:53:46,160
zoomsburg university

1196
00:53:42,720 --> 00:53:49,040
so anyway here is

1197
00:53:46,160 --> 00:53:49,040
the website

1198
00:53:49,280 --> 00:53:54,480
and if you look

1199
00:53:52,319 --> 00:53:56,160
under downloads you'll see things like

1200
00:53:54,480 --> 00:53:59,119
code and you can download

1201
00:53:56,160 --> 00:54:01,118
all the scripts from that and then there

1202
00:53:59,119 --> 00:54:05,200
are some videos

1203
00:54:01,119 --> 00:54:08,240
as well from the book

1204
00:54:05,200 --> 00:54:11,839
so hopefully this was useful and

1205
00:54:08,240 --> 00:54:11,839
thanks for coming

1206
00:54:13,440 --> 00:54:20,400
thank you phil great presentation

1207
00:54:16,800 --> 00:54:23,760
um so we are going to

1208
00:54:20,400 --> 00:54:25,839
have a short intermission and

1209
00:54:23,760 --> 00:54:27,280
i might play some family guy on this

1210
00:54:25,839 --> 00:54:30,400
track

1211
00:54:27,280 --> 00:54:31,839
so feel free to stay or hop on any other

1212
00:54:30,400 --> 00:54:34,559
tracks

1213
00:54:31,839 --> 00:54:34,558
get your learn on

1214
00:54:35,040 --> 00:54:39,119
hey nice to see you guys back at 12 30.

1215
00:54:38,000 --> 00:54:53,040
yep

1216
00:54:39,119 --> 00:54:55,119
thanks phil see you good day

1217
00:54:53,040 --> 00:54:55,119
you

