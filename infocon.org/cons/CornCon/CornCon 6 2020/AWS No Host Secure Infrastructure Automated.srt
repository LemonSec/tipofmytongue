1
00:00:00,399 --> 00:00:04,160
um i work at queen phase as a staff

2
00:00:02,080 --> 00:00:05,040
devops engineer and i also am president

3
00:00:04,160 --> 00:00:07,839
of a

4
00:00:05,040 --> 00:00:08,720
mass cyber corporation um let's real

5
00:00:07,839 --> 00:00:11,840
quick with some

6
00:00:08,720 --> 00:00:13,759
housekeeping uh disclaimer my opinions

7
00:00:11,840 --> 00:00:14,559
express are mine of mine alone and not

8
00:00:13,759 --> 00:00:16,080
necessarily

9
00:00:14,559 --> 00:00:18,400
those of any of the corporations i work

10
00:00:16,079 --> 00:00:20,560
for um that being said

11
00:00:18,400 --> 00:00:22,080
um give you a little back welcome to

12
00:00:20,560 --> 00:00:23,359
corncon um

13
00:00:22,080 --> 00:00:24,880
one thing as being one of the people

14
00:00:23,359 --> 00:00:26,240
that run corncon uh we want you to

15
00:00:24,880 --> 00:00:28,160
support kung kong if you could buy some

16
00:00:26,240 --> 00:00:29,840
merch that'd be awesome

17
00:00:28,160 --> 00:00:32,159
um and then a little bit more about me

18
00:00:29,840 --> 00:00:34,320
um lisa my name is sean martin i'm a

19
00:00:32,159 --> 00:00:35,599
very old-school linux admin uh i kind of

20
00:00:34,320 --> 00:00:38,239
went through all the transitions of

21
00:00:35,600 --> 00:00:40,559
physical the hybrid the cloud

22
00:00:38,239 --> 00:00:42,320
software as a service type of solution

23
00:00:40,559 --> 00:00:43,519
um and this talk here is mainly focused

24
00:00:42,320 --> 00:00:47,039
on a software type of

25
00:00:43,520 --> 00:00:48,800
solution uh infrastructure essentially

26
00:00:47,039 --> 00:00:51,840
not where you're just getting basically

27
00:00:48,800 --> 00:00:53,440
everything from a no host perspective

28
00:00:51,840 --> 00:00:55,760
um so in this presentation i'm going to

29
00:00:53,440 --> 00:00:56,320
quickly go over the end tier application

30
00:00:55,760 --> 00:00:57,760
the

31
00:00:56,320 --> 00:01:00,079
three layers and some of the common

32
00:00:57,760 --> 00:01:02,079
products uh then i'm gonna go over

33
00:01:00,079 --> 00:01:03,520
what i consider a software as a service

34
00:01:02,079 --> 00:01:04,080
infrastructure and what i consider for

35
00:01:03,520 --> 00:01:06,479
this

36
00:01:04,080 --> 00:01:08,798
talk to be one um and then i'm gonna go

37
00:01:06,479 --> 00:01:10,479
over some basic automation concepts

38
00:01:08,799 --> 00:01:12,799
um and then uh yeah we'll finish up with

39
00:01:10,479 --> 00:01:14,400
some q a um

40
00:01:12,799 --> 00:01:15,920
since there's no audience feedback and

41
00:01:14,400 --> 00:01:16,960
i'm doing this virtue for the first time

42
00:01:15,920 --> 00:01:19,600
it's kind of interesting so i'm just

43
00:01:16,960 --> 00:01:21,520
going to keep on talking and go through

44
00:01:19,600 --> 00:01:23,600
so first we have ntr applications that's

45
00:01:21,520 --> 00:01:25,679
a standard three layer approach

46
00:01:23,600 --> 00:01:27,759
we have a presentation an application

47
00:01:25,680 --> 00:01:28,880
logic also called service logic or

48
00:01:27,759 --> 00:01:31,600
business logic

49
00:01:28,880 --> 00:01:33,360
in a data layer uh the presentation

50
00:01:31,600 --> 00:01:34,960
layer is essentially your user interface

51
00:01:33,360 --> 00:01:37,040
it's your web server it's the

52
00:01:34,960 --> 00:01:39,199
that serves out the final content to

53
00:01:37,040 --> 00:01:40,479
your thing you know apache nginx is

54
00:01:39,200 --> 00:01:42,240
cloud front

55
00:01:40,479 --> 00:01:43,600
um you have your application logic layer

56
00:01:42,240 --> 00:01:45,199
this is probably the most interesting of

57
00:01:43,600 --> 00:01:46,479
layers because it can kind of be like a

58
00:01:45,200 --> 00:01:48,399
multi-layer layer

59
00:01:46,479 --> 00:01:49,600
uh depending but it basically it's

60
00:01:48,399 --> 00:01:50,799
supposed to provide and coordinate the

61
00:01:49,600 --> 00:01:52,240
operation the business logic for the

62
00:01:50,799 --> 00:01:54,320
presentation layer so it's supposed to

63
00:01:52,240 --> 00:01:56,640
do all the in-betweens it's only a

64
00:01:54,320 --> 00:01:59,039
temporary data only so local file system

65
00:01:56,640 --> 00:02:01,840
write us as a cache not as a database

66
00:01:59,040 --> 00:02:04,560
memcache as a cache we can't have an app

67
00:02:01,840 --> 00:02:05,119
an api layer where you have tomcat jboss

68
00:02:04,560 --> 00:02:08,000
and

69
00:02:05,119 --> 00:02:10,000
you know websphere and api gateway you

70
00:02:08,000 --> 00:02:11,520
can also other services like message

71
00:02:10,000 --> 00:02:13,120
queuing or anything else

72
00:02:11,520 --> 00:02:15,360
anything in that middle layer that you

73
00:02:13,120 --> 00:02:17,200
need to handle and manage and

74
00:02:15,360 --> 00:02:18,400
finish your data on demand for that

75
00:02:17,200 --> 00:02:20,079
presentation layer

76
00:02:18,400 --> 00:02:21,200
um and i said this layer can sometimes

77
00:02:20,080 --> 00:02:22,959
be like two approaches sometimes you

78
00:02:21,200 --> 00:02:24,399
might have a logic layer that

79
00:02:22,959 --> 00:02:25,920
is private and a logic layer that is

80
00:02:24,400 --> 00:02:27,599
public and that's where it almost

81
00:02:25,920 --> 00:02:28,879
becomes like two layers from a network

82
00:02:27,599 --> 00:02:30,399
perspective

83
00:02:28,879 --> 00:02:31,760
um and then finally you have your data

84
00:02:30,400 --> 00:02:33,360
layer um everyone should know what

85
00:02:31,760 --> 00:02:34,959
everyone's doing with these

86
00:02:33,360 --> 00:02:36,959
um it's where your persistent data store

87
00:02:34,959 --> 00:02:38,480
it's where all your data from your

88
00:02:36,959 --> 00:02:41,680
application lives so you know i think

89
00:02:38,480 --> 00:02:43,599
relational mysql msc goal express

90
00:02:41,680 --> 00:02:46,920
uh oracle postquest maria and then you

91
00:02:43,599 --> 00:02:49,280
got your newer databases and nosqls and

92
00:02:46,920 --> 00:02:50,799
documentdbs and whatnots like

93
00:02:49,280 --> 00:02:52,160
dynamo and the rest

94
00:02:50,800 --> 00:02:55,040
um then also another place where you

95
00:02:52,160 --> 00:02:57,920
have your data store is s3 or sftp or a

96
00:02:55,040 --> 00:02:59,120
dropbox kind of scenario

97
00:02:57,920 --> 00:03:01,200
so yeah those are basically the three

98
00:02:59,120 --> 00:03:02,720
main layers i'm going to cover what we

99
00:03:01,200 --> 00:03:03,839
consider software i'm considering

100
00:03:02,720 --> 00:03:07,680
software as a service

101
00:03:03,840 --> 00:03:09,920
infrastructure on this meeting um so

102
00:03:07,680 --> 00:03:11,519
cloud service versus host and service

103
00:03:09,920 --> 00:03:12,480
what do i mean by host and server for

104
00:03:11,519 --> 00:03:14,720
this presentation

105
00:03:12,480 --> 00:03:15,518
um it's basically a server provided a

106
00:03:14,720 --> 00:03:17,840
hosted

107
00:03:15,519 --> 00:03:21,200
server provided by a provider so like

108
00:03:17,840 --> 00:03:24,480
ec2 is a hosted service ecs eks

109
00:03:21,200 --> 00:03:26,000
they're all virtual services um you know

110
00:03:24,480 --> 00:03:28,319
also the same is true with like some of

111
00:03:26,000 --> 00:03:30,000
the database offerings that aws offers

112
00:03:28,319 --> 00:03:31,839
and stuff like that

113
00:03:30,000 --> 00:03:33,360
they help you set up and manage but you

114
00:03:31,840 --> 00:03:34,560
still have hosts and physical

115
00:03:33,360 --> 00:03:36,159
infrastructure that

116
00:03:34,560 --> 00:03:37,440
online physical virtual infrastructure

117
00:03:36,159 --> 00:03:38,640
you have to manage and upgrade and

118
00:03:37,440 --> 00:03:40,480
maintain

119
00:03:38,640 --> 00:03:42,159
um so for cloud services we mean

120
00:03:40,480 --> 00:03:43,200
something that's truly software as a

121
00:03:42,159 --> 00:03:45,040
service that

122
00:03:43,200 --> 00:03:48,000
you just throw in the cloud and it goes

123
00:03:45,040 --> 00:03:50,640
off so ecs fire gate eks vargate

124
00:03:48,000 --> 00:03:51,519
rds is this weird hybrid um really

125
00:03:50,640 --> 00:03:52,798
shouldn't

126
00:03:51,519 --> 00:03:55,200
because you do have to manage some

127
00:03:52,799 --> 00:03:58,080
layers but it is just hosting the cloud

128
00:03:55,200 --> 00:03:59,599
and s3 dynamodb is another great example

129
00:03:58,080 --> 00:04:02,080
of a host of service

130
00:03:59,599 --> 00:04:03,359
where literally you just have a ecs fire

131
00:04:02,080 --> 00:04:05,040
you just throw a container in the cloud

132
00:04:03,360 --> 00:04:06,879
you're not managing cluster

133
00:04:05,040 --> 00:04:08,720
you're not managing nodes it can auto

134
00:04:06,879 --> 00:04:09,359
scale auto go and everything else like

135
00:04:08,720 --> 00:04:11,040
that

136
00:04:09,360 --> 00:04:12,480
and we'll get more on that but that's

137
00:04:11,040 --> 00:04:14,480
kind of what we mean for

138
00:04:12,480 --> 00:04:16,238
cloud service versus host and services

139
00:04:14,480 --> 00:04:18,478
presentation even though it might have

140
00:04:16,238 --> 00:04:19,358
service in the name like ucs and eks

141
00:04:18,478 --> 00:04:21,279
it's not

142
00:04:19,358 --> 00:04:22,479
it's not a full service that you can

143
00:04:21,279 --> 00:04:25,359
serve from without

144
00:04:22,479 --> 00:04:27,039
managing infrastructure um so the the

145
00:04:25,360 --> 00:04:29,040
main categories i try to break it down

146
00:04:27,040 --> 00:04:30,960
and do is maintenance scaling security

147
00:04:29,040 --> 00:04:33,759
high availability disaster recovery

148
00:04:30,960 --> 00:04:34,159
costs obviously with cloud services

149
00:04:33,759 --> 00:04:36,479
there

150
00:04:34,160 --> 00:04:37,840
isn't none it's one time setup is more

151
00:04:36,479 --> 00:04:39,280
accurate but there's no ongoing

152
00:04:37,840 --> 00:04:41,679
maintenance that you have to do

153
00:04:39,280 --> 00:04:42,880
you don't do os upgrades and patches and

154
00:04:41,680 --> 00:04:44,080
stuff like that

155
00:04:42,880 --> 00:04:45,919
uh you have to plan out if you're

156
00:04:44,080 --> 00:04:47,359
deploying a new app but the planning is

157
00:04:45,919 --> 00:04:48,400
quick and easy because you have no

158
00:04:47,360 --> 00:04:49,360
infrastructure demand you're just

159
00:04:48,400 --> 00:04:51,120
deciding

160
00:04:49,360 --> 00:04:52,800
what load balancer you want it behind

161
00:04:51,120 --> 00:04:55,360
and that kind of stuff

162
00:04:52,800 --> 00:04:56,800
most cloud services by design scale you

163
00:04:55,360 --> 00:04:58,400
don't have to do anything

164
00:04:56,800 --> 00:05:00,479
um some of them you might have some

165
00:04:58,400 --> 00:05:02,320
tuning plans and stuff like that to

166
00:05:00,479 --> 00:05:04,479
make it scale differently for your

167
00:05:02,320 --> 00:05:06,159
workloads but besides that that's mainly

168
00:05:04,479 --> 00:05:07,840
one time set up and you're done

169
00:05:06,160 --> 00:05:09,039
we're hosted you have to do auto

170
00:05:07,840 --> 00:05:09,758
planning you know if you're taking the

171
00:05:09,039 --> 00:05:11,759
ecs

172
00:05:09,759 --> 00:05:12,880
nodes you can have auto increase

173
00:05:11,759 --> 00:05:15,199
something or you might

174
00:05:12,880 --> 00:05:17,199
mainly auto increase your nodes i need

175
00:05:15,199 --> 00:05:19,039
to plan and you're all spending money on

176
00:05:17,199 --> 00:05:21,280
infrastructure you're not being used

177
00:05:19,039 --> 00:05:22,800
whereas software as a service uh

178
00:05:21,280 --> 00:05:23,198
sometimes it's more costly but you're

179
00:05:22,800 --> 00:05:24,560
just

180
00:05:23,199 --> 00:05:26,400
getting what you paid for and you have

181
00:05:24,560 --> 00:05:28,400
nothing else to manage

182
00:05:26,400 --> 00:05:30,638
um also cloud services they have limited

183
00:05:28,400 --> 00:05:32,320
access security by design uh compared to

184
00:05:30,639 --> 00:05:33,440
host which is more access available

185
00:05:32,320 --> 00:05:34,560
and this is just because of what it's

186
00:05:33,440 --> 00:05:36,160
running on like if you think about a

187
00:05:34,560 --> 00:05:38,080
host you have all these other protocols

188
00:05:36,160 --> 00:05:38,720
ssh for access and everything else like

189
00:05:38,080 --> 00:05:40,159
that

190
00:05:38,720 --> 00:05:42,240
or if you think of just a docker in the

191
00:05:40,160 --> 00:05:42,960
cloud it's just one port on your docker

192
00:05:42,240 --> 00:05:45,280
container

193
00:05:42,960 --> 00:05:47,440
uh there's no nodes or hosts behind it

194
00:05:45,280 --> 00:05:48,400
um but if you did docker on ecs

195
00:05:47,440 --> 00:05:49,759
you'd have your one pointing dock

196
00:05:48,400 --> 00:05:52,000
container you have all these hosts

197
00:05:49,759 --> 00:05:53,360
underneath it that have ssh and root

198
00:05:52,000 --> 00:05:55,199
layer access it's just

199
00:05:53,360 --> 00:05:57,440
more access available to an attacker get

200
00:05:55,199 --> 00:05:58,960
into your app or through your network

201
00:05:57,440 --> 00:06:00,639
and also security groups which will go

202
00:05:58,960 --> 00:06:02,880
and do an aws security

203
00:06:00,639 --> 00:06:04,000
design with a security group by security

204
00:06:02,880 --> 00:06:05,919
group

205
00:06:04,000 --> 00:06:07,520
relationship can really secure your

206
00:06:05,919 --> 00:06:09,758
infrastructure really well

207
00:06:07,520 --> 00:06:11,440
um next a high availability downtime in

208
00:06:09,759 --> 00:06:12,319
the cloud services i call it the knotted

209
00:06:11,440 --> 00:06:13,520
scenario

210
00:06:12,319 --> 00:06:15,199
you know it's the same thing when you

211
00:06:13,520 --> 00:06:16,799
got enterprise services for your linux

212
00:06:15,199 --> 00:06:17,759
distribution you know it's not it when

213
00:06:16,800 --> 00:06:19,199
it fails

214
00:06:17,759 --> 00:06:20,800
um because it's a cloud service it's

215
00:06:19,199 --> 00:06:21,759
software as a service that the service

216
00:06:20,800 --> 00:06:24,400
goes down

217
00:06:21,759 --> 00:06:25,919
i mean yes your app's down but it's not

218
00:06:24,400 --> 00:06:26,719
you're you're not running around going

219
00:06:25,919 --> 00:06:28,479
crazy

220
00:06:26,720 --> 00:06:29,520
um and hosted even if you're cloud

221
00:06:28,479 --> 00:06:30,318
service you still have to do it's

222
00:06:29,520 --> 00:06:32,560
usually been

223
00:06:30,319 --> 00:06:34,319
uh some finessing and massaging to get

224
00:06:32,560 --> 00:06:35,520
your infrastructure back up and you're

225
00:06:34,319 --> 00:06:36,880
it you know you've got to make sure your

226
00:06:35,520 --> 00:06:37,758
instances come back up and everything

227
00:06:36,880 --> 00:06:39,919
else

228
00:06:37,759 --> 00:06:41,360
um disaster recovery um and cloud

229
00:06:39,919 --> 00:06:43,198
services almost always have auto

230
00:06:41,360 --> 00:06:45,039
failover and backup design

231
00:06:43,199 --> 00:06:47,199
uh most of them are also high multiple

232
00:06:45,039 --> 00:06:49,039
availability zones if not global

233
00:06:47,199 --> 00:06:50,639
and then for hosting services failover

234
00:06:49,039 --> 00:06:52,318
and backups all manual

235
00:06:50,639 --> 00:06:53,919
um they can be automated without a

236
00:06:52,319 --> 00:06:55,759
scaling groups and stuff like that but

237
00:06:53,919 --> 00:06:57,280
it's all a lot more manual set up

238
00:06:55,759 --> 00:06:58,880
where the cloud services like i said

239
00:06:57,280 --> 00:07:00,719
it's just kind of by design you do a

240
00:06:58,880 --> 00:07:02,319
couple clicks and you're done

241
00:07:00,720 --> 00:07:03,840
the software as a service usually does

242
00:07:02,319 --> 00:07:05,759
cost more for hosting

243
00:07:03,840 --> 00:07:06,799
um but considering all the maintenance

244
00:07:05,759 --> 00:07:07,759
and all the rest of stuff you don't have

245
00:07:06,800 --> 00:07:10,000
to worry about

246
00:07:07,759 --> 00:07:11,280
i personally think it's a negated cost

247
00:07:10,000 --> 00:07:12,960
uh by far

248
00:07:11,280 --> 00:07:14,479
um you're not worrying about os upgrades

249
00:07:12,960 --> 00:07:16,159
it's offered uh you know developing life

250
00:07:14,479 --> 00:07:17,840
cycles for your packages

251
00:07:16,160 --> 00:07:19,199
uh and your repos and stuff like that

252
00:07:17,840 --> 00:07:19,520
you're just worrying about your app and

253
00:07:19,199 --> 00:07:21,840
that's

254
00:07:19,520 --> 00:07:23,120
it um and the ecs eks you're just

255
00:07:21,840 --> 00:07:24,799
updating your docker container to the

256
00:07:23,120 --> 00:07:28,080
latest version and you got all your

257
00:07:24,800 --> 00:07:29,599
security packages and you're good to go

258
00:07:28,080 --> 00:07:30,960
um so the next thing i kind of talked

259
00:07:29,599 --> 00:07:32,719
about mostly is about maintenance like i

260
00:07:30,960 --> 00:07:34,479
said it's cloud os upgrades patches

261
00:07:32,720 --> 00:07:36,160
fixed automatically no downtime or

262
00:07:34,479 --> 00:07:37,280
resource planning needed for most cloud

263
00:07:36,160 --> 00:07:38,720
services

264
00:07:37,280 --> 00:07:40,159
um if you're hosted it's complete

265
00:07:38,720 --> 00:07:40,800
opposite you got to do all that you

266
00:07:40,160 --> 00:07:42,639
gotta

267
00:07:40,800 --> 00:07:44,080
have planned down time or temporary

268
00:07:42,639 --> 00:07:45,599
resource switch over

269
00:07:44,080 --> 00:07:47,840
so while this one's down this one's

270
00:07:45,599 --> 00:07:49,919
running and kind of planning that out

271
00:07:47,840 --> 00:07:51,520
uh same with scaling almost sales

272
00:07:49,919 --> 00:07:54,080
service design

273
00:07:51,520 --> 00:07:54,799
once time setup rules um the complete

274
00:07:54,080 --> 00:07:57,758
opposite

275
00:07:54,800 --> 00:07:58,479
for auto scaling groups and etc cloud

276
00:07:57,759 --> 00:08:00,800
services

277
00:07:58,479 --> 00:08:02,560
um the security and what they do want to

278
00:08:00,800 --> 00:08:03,199
cover is one of my favorite things about

279
00:08:02,560 --> 00:08:04,720
aws

280
00:08:03,199 --> 00:08:06,560
is the security group of security group

281
00:08:04,720 --> 00:08:08,720
relationship um so when you have a load

282
00:08:06,560 --> 00:08:10,879
balancer and a target end

283
00:08:08,720 --> 00:08:12,879
you can literally relate the two so that

284
00:08:10,879 --> 00:08:14,240
only those two things from that security

285
00:08:12,879 --> 00:08:15,840
room talk so you're not even

286
00:08:14,240 --> 00:08:17,520
working with ips you're talking of

287
00:08:15,840 --> 00:08:20,000
objects of security groups that

288
00:08:17,520 --> 00:08:21,198
define and with no host you think

289
00:08:20,000 --> 00:08:22,960
there's even if you put a

290
00:08:21,199 --> 00:08:24,479
host on infrastructure because it's not

291
00:08:22,960 --> 00:08:28,400
in the security group of the

292
00:08:24,479 --> 00:08:29,840
load api aob or the rds or your data

293
00:08:28,400 --> 00:08:30,960
instance it's not going to get access to

294
00:08:29,840 --> 00:08:32,559
anything

295
00:08:30,960 --> 00:08:35,199
um again the host server is your

296
00:08:32,559 --> 00:08:36,880
responsibility um probably downtime

297
00:08:35,200 --> 00:08:38,959
aws services most of them provide at

298
00:08:36,880 --> 00:08:40,320
least four nines are better

299
00:08:38,958 --> 00:08:41,760
and like i said it's offered by design

300
00:08:40,320 --> 00:08:42,880
for multiple religious zone if not

301
00:08:41,760 --> 00:08:44,000
global

302
00:08:42,880 --> 00:08:45,600
hosts and servers you kind of have to

303
00:08:44,000 --> 00:08:46,959
determine your own um obviously using

304
00:08:45,600 --> 00:08:48,560
some other servers like

305
00:08:46,959 --> 00:08:50,560
ecs and eks you got a little bit

306
00:08:48,560 --> 00:08:52,079
reliability on the nodes but if the

307
00:08:50,560 --> 00:08:54,399
docker server something fails it's still

308
00:08:52,080 --> 00:08:56,399
kind of up to you to bring it back up

309
00:08:54,399 --> 00:08:58,959
and then disaster recovery um same kind

310
00:08:56,399 --> 00:09:00,480
of thing aws offers snapshots backups

311
00:08:58,959 --> 00:09:02,239
and versioning for data recovery for

312
00:09:00,480 --> 00:09:03,920
most services

313
00:09:02,240 --> 00:09:05,920
and that's also true even for some of

314
00:09:03,920 --> 00:09:08,079
the manual ones as well

315
00:09:05,920 --> 00:09:09,360
but uh most of the time you're all that

316
00:09:08,080 --> 00:09:10,480
stuff in a host of scenario you're doing

317
00:09:09,360 --> 00:09:11,760
manually

318
00:09:10,480 --> 00:09:14,640
and then like i said they're either

319
00:09:11,760 --> 00:09:16,000
global or multiple zelda zone and then

320
00:09:14,640 --> 00:09:17,760
we were talking about the cost fan the

321
00:09:16,000 --> 00:09:19,519
service and cost more than the instance

322
00:09:17,760 --> 00:09:21,920
um but it usually said you're not

323
00:09:19,519 --> 00:09:23,760
dealing with any infrastructure no hosts

324
00:09:21,920 --> 00:09:26,240
no maintenance it's the cost kind of

325
00:09:23,760 --> 00:09:28,240
outweigh themselves in my own time

326
00:09:26,240 --> 00:09:30,720
so i'm going to cover aws services for

327
00:09:28,240 --> 00:09:32,800
our application or an application that

328
00:09:30,720 --> 00:09:34,480
you can use that will just leverage full

329
00:09:32,800 --> 00:09:35,599
web services and you don't have to any

330
00:09:34,480 --> 00:09:37,519
hoses

331
00:09:35,600 --> 00:09:39,120
or in the different sales so not all

332
00:09:37,519 --> 00:09:41,040
services meet all enterprise needs for a

333
00:09:39,120 --> 00:09:42,800
software as a service solution

334
00:09:41,040 --> 00:09:44,880
um did you know these are the questions

335
00:09:42,800 --> 00:09:45,760
you should ask um for your aws service

336
00:09:44,880 --> 00:09:47,279
revolution

337
00:09:45,760 --> 00:09:49,519
do they scale the way you need them to

338
00:09:47,279 --> 00:09:50,560
um like rds can't horizontally scale so

339
00:09:49,519 --> 00:09:51,680
you got to make sure you're aware of

340
00:09:50,560 --> 00:09:52,560
that and when you do your vertical

341
00:09:51,680 --> 00:09:54,319
scaling

342
00:09:52,560 --> 00:09:55,680
you have downtime and read only and make

343
00:09:54,320 --> 00:09:57,440
sure you know there's a limit

344
00:09:55,680 --> 00:09:58,800
um do they have multi-az options for

345
00:09:57,440 --> 00:10:00,240
highlightability does it have health

346
00:09:58,800 --> 00:10:01,359
checks and auto recovery for high

347
00:10:00,240 --> 00:10:03,279
availability

348
00:10:01,360 --> 00:10:05,040
do they have snapshots backup restore

349
00:10:03,279 --> 00:10:06,720
functions for disaster recovery

350
00:10:05,040 --> 00:10:08,079
do they have security by zion and can it

351
00:10:06,720 --> 00:10:10,000
be locked down and is this service

352
00:10:08,079 --> 00:10:11,439
automatable cloud formation or another

353
00:10:10,000 --> 00:10:14,160
terraform or whatever

354
00:10:11,440 --> 00:10:15,680
you'd like to use um so here's some

355
00:10:14,160 --> 00:10:18,000
recommended services that

356
00:10:15,680 --> 00:10:18,959
i that kind of meet most of these things

357
00:10:18,000 --> 00:10:20,800
um

358
00:10:18,959 --> 00:10:22,479
provided by aws and they meet these

359
00:10:20,800 --> 00:10:24,399
needs i'm using a presentation layer

360
00:10:22,480 --> 00:10:27,200
with s3 and a cloud front

361
00:10:24,399 --> 00:10:28,399
um for your cdn is a fantastic solution

362
00:10:27,200 --> 00:10:29,920
s3 has everything you need from

363
00:10:28,399 --> 00:10:30,640
enterprise solution and cloudfront is a

364
00:10:29,920 --> 00:10:33,839
great cd

365
00:10:30,640 --> 00:10:36,000
and then you have ecs and eks fargate um

366
00:10:33,839 --> 00:10:36,880
those like i said are not ecs or eks

367
00:10:36,000 --> 00:10:39,360
they're just

368
00:10:36,880 --> 00:10:40,959
deploying the cloud container services

369
00:10:39,360 --> 00:10:42,320
um and then you if you needed

370
00:10:40,959 --> 00:10:44,000
you know you had web apps and stuff that

371
00:10:42,320 --> 00:10:45,360
are presentation layer and the same one

372
00:10:44,000 --> 00:10:47,920
logically you can kind of do that and

373
00:10:45,360 --> 00:10:49,920
there's lambda api gateways coming out

374
00:10:47,920 --> 00:10:50,719
that's a very popular way to make api

375
00:10:49,920 --> 00:10:53,120
layers

376
00:10:50,720 --> 00:10:53,839
um you get your data layer um i put rds

377
00:10:53,120 --> 00:10:56,800
in there

378
00:10:53,839 --> 00:10:58,000
just because it's so thin it's not truly

379
00:10:56,800 --> 00:10:59,599
software as a service because it's

380
00:10:58,000 --> 00:11:00,560
scalability and stuff like that and some

381
00:10:59,600 --> 00:11:03,360
limitations

382
00:11:00,560 --> 00:11:04,560
but it's so popular but no sql databases

383
00:11:03,360 --> 00:11:06,720
like dynamo and stuff

384
00:11:04,560 --> 00:11:09,199
brutally get you this true software as a

385
00:11:06,720 --> 00:11:10,640
service you got s3 for storing data and

386
00:11:09,200 --> 00:11:13,360
then they even have the sftp

387
00:11:10,640 --> 00:11:14,880
or the transfer service for your thing

388
00:11:13,360 --> 00:11:16,480
and then the stuff that kind of makes it

389
00:11:14,880 --> 00:11:18,160
all kind of happen in the back end

390
00:11:16,480 --> 00:11:20,240
is the application load balancers the

391
00:11:18,160 --> 00:11:22,959
cloud mounts the route 53s

392
00:11:20,240 --> 00:11:24,480
and aws is kind of proprietary target

393
00:11:22,959 --> 00:11:26,160
groups and weights and stuff like that

394
00:11:24,480 --> 00:11:28,640
that interact with all this for the auto

395
00:11:26,160 --> 00:11:30,399
scaling and stuff like that to work

396
00:11:28,640 --> 00:11:31,839
um so the first thing i said is s3

397
00:11:30,399 --> 00:11:34,160
cloudfront you know there's no host to

398
00:11:31,839 --> 00:11:36,560
manage it does everything for you

399
00:11:34,160 --> 00:11:39,439
cloudfront provides cdn for load if

400
00:11:36,560 --> 00:11:40,000
using npm there's even great npm modules

401
00:11:39,440 --> 00:11:41,839
that

402
00:11:40,000 --> 00:11:43,839
will auto deploy just the changes of

403
00:11:41,839 --> 00:11:46,800
your static content to s3

404
00:11:43,839 --> 00:11:49,040
and only the uh only uh recast the cloud

405
00:11:46,800 --> 00:11:50,560
front entries for those entries as well

406
00:11:49,040 --> 00:11:52,160
so you're really just deploying only the

407
00:11:50,560 --> 00:11:55,359
new and not you know

408
00:11:52,160 --> 00:11:57,040
uncaching a bunch of other stuff um

409
00:11:55,360 --> 00:11:58,800
you know there's no host in this that's

410
00:11:57,040 --> 00:12:00,480
only static content so once you set up

411
00:11:58,800 --> 00:12:02,160
your s3 if it's public it's probably

412
00:12:00,480 --> 00:12:04,079
going to be global anyways and

413
00:12:02,160 --> 00:12:05,519
i mean public anyways and therefore you

414
00:12:04,079 --> 00:12:07,040
know you don't have many rules

415
00:12:05,519 --> 00:12:09,680
and then you get full version back on

416
00:12:07,040 --> 00:12:11,760
this data recovery so it's kind of

417
00:12:09,680 --> 00:12:12,880
set up once build a csd pipeline for

418
00:12:11,760 --> 00:12:16,240
when you're done

419
00:12:12,880 --> 00:12:18,240
um ecs fargate um kind of similar thing

420
00:12:16,240 --> 00:12:20,560
you have uh you know basically docker

421
00:12:18,240 --> 00:12:22,560
service on demand just goes right in

422
00:12:20,560 --> 00:12:24,959
uh full disaster recovery no host to

423
00:12:22,560 --> 00:12:26,800
manage um this has a cool thing with aws

424
00:12:24,959 --> 00:12:29,359
cloud map and route 53

425
00:12:26,800 --> 00:12:31,120
where you can have an internal host uh

426
00:12:29,360 --> 00:12:31,600
private domain and they use service

427
00:12:31,120 --> 00:12:32,959
there

428
00:12:31,600 --> 00:12:34,880
used to be called service name discovery

429
00:12:32,959 --> 00:12:36,800
now it's their cloud map and basically

430
00:12:34,880 --> 00:12:39,200
the instances in your ecs so

431
00:12:36,800 --> 00:12:40,399
like you deploy a container you want 10

432
00:12:39,200 --> 00:12:42,399
uh replicas

433
00:12:40,399 --> 00:12:44,240
to start with and it can build on load

434
00:12:42,399 --> 00:12:46,320
it'll auto add the 10 replicas into a

435
00:12:44,240 --> 00:12:47,680
route 53 private dns entry and that's

436
00:12:46,320 --> 00:12:49,200
you can access internally

437
00:12:47,680 --> 00:12:50,560
i mean at the same thing it'll also put

438
00:12:49,200 --> 00:12:52,240
in a target group and that's how the

439
00:12:50,560 --> 00:12:54,638
application load balancer

440
00:12:52,240 --> 00:12:56,079
knows to auto scale to those instances

441
00:12:54,639 --> 00:12:57,760
as those instances come up

442
00:12:56,079 --> 00:12:59,120
it's kind of one of the magics of ecs

443
00:12:57,760 --> 00:13:01,200
and eks fire gate

444
00:12:59,120 --> 00:13:02,560
um one thing here i always say no staple

445
00:13:01,200 --> 00:13:04,079
data to back up and i still don't

446
00:13:02,560 --> 00:13:06,239
believe it should be there

447
00:13:04,079 --> 00:13:07,839
but ecs and eks fargate a couple months

448
00:13:06,240 --> 00:13:09,040
ago did release stateful data features

449
00:13:07,839 --> 00:13:11,680
for efs

450
00:13:09,040 --> 00:13:14,959
in ebs so if you did need stateful data

451
00:13:11,680 --> 00:13:14,959
or had volumes that you need to

452
00:13:19,120 --> 00:13:23,279
the next lamb accommos it's very similar

453
00:13:21,440 --> 00:13:25,120
uh to alb for lambda

454
00:13:23,279 --> 00:13:26,560
um you kind of set it up you put your

455
00:13:25,120 --> 00:13:27,680
lambda functions you put your api

456
00:13:26,560 --> 00:13:29,040
gateways to it

457
00:13:27,680 --> 00:13:30,399
and you're good again there's no host

458
00:13:29,040 --> 00:13:31,199
demand you just publish your code and

459
00:13:30,399 --> 00:13:32,959
run

460
00:13:31,200 --> 00:13:35,279
scales on load by requests and your

461
00:13:32,959 --> 00:13:37,119
lambda functions and you have nothing

462
00:13:35,279 --> 00:13:38,800
there's not even in hosting for trade

463
00:13:37,120 --> 00:13:40,399
there you can infiltrate your scripts

464
00:13:38,800 --> 00:13:42,160
but then they have no footprint from

465
00:13:40,399 --> 00:13:43,600
that point forward

466
00:13:42,160 --> 00:13:46,079
and then high availability and downtime

467
00:13:43,600 --> 00:13:48,240
is kind of all handled by aws

468
00:13:46,079 --> 00:13:50,959
next is rds everyone probably knows this

469
00:13:48,240 --> 00:13:52,880
the most from aws one of their first big

470
00:13:50,959 --> 00:13:54,319
wins with software as a service like

471
00:13:52,880 --> 00:13:55,760
products um

472
00:13:54,320 --> 00:13:57,519
there's no host to manage in this you do

473
00:13:55,760 --> 00:13:58,480
major databases you need to upgrade them

474
00:13:57,519 --> 00:13:59,920
you do have to

475
00:13:58,480 --> 00:14:01,920
do a little bit of stuff but most of

476
00:13:59,920 --> 00:14:02,719
it's one time set up the ability for

477
00:14:01,920 --> 00:14:04,959
real

478
00:14:02,720 --> 00:14:06,959
replicas one of the biggest things i

479
00:14:04,959 --> 00:14:08,479
find is a scaling of vertical limits

480
00:14:06,959 --> 00:14:10,079
um you know you're gonna eventually hit

481
00:14:08,480 --> 00:14:11,279
that cap and there's nothing you can

482
00:14:10,079 --> 00:14:13,040
kind of do

483
00:14:11,279 --> 00:14:14,720
where no sql in your databases have

484
00:14:13,040 --> 00:14:15,519
vertical scaling i mean horizontal

485
00:14:14,720 --> 00:14:18,240
scaling

486
00:14:15,519 --> 00:14:20,320
and don't have that issue um security

487
00:14:18,240 --> 00:14:22,639
i'm getting no host number in footprint

488
00:14:20,320 --> 00:14:24,079
and again uh he knows all high available

489
00:14:22,639 --> 00:14:25,440
downtime once you have a couple replicas

490
00:14:24,079 --> 00:14:27,760
and a read-only replica

491
00:14:25,440 --> 00:14:29,519
you can do global deployments um they've

492
00:14:27,760 --> 00:14:31,439
done a lot of stuff with rds they have

493
00:14:29,519 --> 00:14:32,160
serverless that auto scales and stuff

494
00:14:31,440 --> 00:14:34,399
like that

495
00:14:32,160 --> 00:14:36,560
depending on your need um again the copy

496
00:14:34,399 --> 00:14:38,160
down cloudformation has backups and

497
00:14:36,560 --> 00:14:40,000
this particular feature has point in

498
00:14:38,160 --> 00:14:43,199
time recovery as well

499
00:14:40,000 --> 00:14:44,480
i think i know sql and others i wouldn't

500
00:14:43,199 --> 00:14:47,120
consider all them the same

501
00:14:44,480 --> 00:14:48,079
um you know not all of them uh meet

502
00:14:47,120 --> 00:14:50,720
these offerings

503
00:14:48,079 --> 00:14:53,120
um so like the two main ones that i

504
00:14:50,720 --> 00:14:56,240
would say for this are dynamo dv

505
00:14:53,120 --> 00:14:58,000
and cassandra come closest to meeting uh

506
00:14:56,240 --> 00:14:59,600
the software as a service maintains

507
00:14:58,000 --> 00:15:00,880
where that know you just create a table

508
00:14:59,600 --> 00:15:02,959
in the cloud and you're done

509
00:15:00,880 --> 00:15:05,120
all the rest are more uh maintenance

510
00:15:02,959 --> 00:15:06,399
hosts kind of the rds model but since

511
00:15:05,120 --> 00:15:07,839
the rds model is

512
00:15:06,399 --> 00:15:09,920
popular i still thought it was

513
00:15:07,839 --> 00:15:11,199
mentioning so because of that the main

514
00:15:09,920 --> 00:15:12,639
service ones need a little more

515
00:15:11,199 --> 00:15:13,120
maintenance versus the ones that are

516
00:15:12,639 --> 00:15:15,839
kind of

517
00:15:13,120 --> 00:15:17,440
like dynamo you just on the cloud most

518
00:15:15,839 --> 00:15:18,399
of them can auto scale by load some

519
00:15:17,440 --> 00:15:20,160
require

520
00:15:18,399 --> 00:15:23,279
manual horizontal scaling but most can

521
00:15:20,160 --> 00:15:25,360
do it the service ones just auto scale

522
00:15:23,279 --> 00:15:26,560
um they do have smaller footprints they

523
00:15:25,360 --> 00:15:27,760
they are kind of host list you don't

524
00:15:26,560 --> 00:15:28,880
have access to the host it's just a

525
00:15:27,760 --> 00:15:30,959
service

526
00:15:28,880 --> 00:15:33,279
um and you do security groups and all

527
00:15:30,959 --> 00:15:34,638
that other fun stuff from aws

528
00:15:33,279 --> 00:15:37,519
um they keep most of them can all be

529
00:15:34,639 --> 00:15:40,320
done with azs regions redo

530
00:15:37,519 --> 00:15:43,279
dynamos global on some cases and then

531
00:15:40,320 --> 00:15:45,440
you get disaster recovery

532
00:15:43,279 --> 00:15:46,880
finally sftp it's probably just an easy

533
00:15:45,440 --> 00:15:49,040
transfer service it's basically just an

534
00:15:46,880 --> 00:15:50,480
fxsftp server in the cloud

535
00:15:49,040 --> 00:15:52,480
um you can be identity provider

536
00:15:50,480 --> 00:15:54,720
integrated or not

537
00:15:52,480 --> 00:15:56,880
and then you auto scale by default um

538
00:15:54,720 --> 00:15:59,519
you have notes host again so it's just a

539
00:15:56,880 --> 00:16:01,199
global uh footprint um it can be it can

540
00:15:59,519 --> 00:16:03,120
be within your vpc too if you want

541
00:16:01,199 --> 00:16:04,639
internal sftp for data transfer between

542
00:16:03,120 --> 00:16:06,320
layers and stuff like that

543
00:16:04,639 --> 00:16:08,560
um and the best part and they now have

544
00:16:06,320 --> 00:16:09,519
full fip support for the compliant

545
00:16:08,560 --> 00:16:10,959
people for

546
00:16:09,519 --> 00:16:12,560
the regulatory you can get full fip

547
00:16:10,959 --> 00:16:15,680
support on your s3 bucket

548
00:16:12,560 --> 00:16:17,599
for the sftp service that backs it

549
00:16:15,680 --> 00:16:18,959
um and again it uses s3s get all the

550
00:16:17,600 --> 00:16:22,000
high billability features and

551
00:16:18,959 --> 00:16:23,439
uptime of s3 so the network

552
00:16:22,000 --> 00:16:25,120
infrastructure i think i already talked

553
00:16:23,440 --> 00:16:26,639
about the cloud map and the mod 53

554
00:16:25,120 --> 00:16:28,959
that's kind of the glue that

555
00:16:26,639 --> 00:16:30,320
that kind of holds a lot of the newer

556
00:16:28,959 --> 00:16:31,599
software as a service deployed

557
00:16:30,320 --> 00:16:33,759
infrastructure together

558
00:16:31,600 --> 00:16:35,360
um it's something that holds ecs and eks

559
00:16:33,759 --> 00:16:37,600
forever together especially

560
00:16:35,360 --> 00:16:38,880
do private and public clusters private

561
00:16:37,600 --> 00:16:40,320
cluster can have one hosted zone

562
00:16:38,880 --> 00:16:42,000
although another hosted zone

563
00:16:40,320 --> 00:16:43,680
the reptiles get automatically added to

564
00:16:42,000 --> 00:16:45,040
the route 53 record

565
00:16:43,680 --> 00:16:46,399
and they automatically get thrown over

566
00:16:45,040 --> 00:16:48,000
the application load balancer target

567
00:16:46,399 --> 00:16:50,800
group all through the cloud map and map

568
00:16:48,000 --> 00:16:52,240
53 integration um

569
00:16:50,800 --> 00:16:54,319
you know api gateway and all that other

570
00:16:52,240 --> 00:16:56,160
fun stuff and most of this this is all

571
00:16:54,320 --> 00:16:57,920
network infrastructure as a service if

572
00:16:56,160 --> 00:16:59,120
you will by aws you got a whole high

573
00:16:57,920 --> 00:17:01,759
availability

574
00:16:59,120 --> 00:17:03,120
you kind of set it up once right you

575
00:17:01,759 --> 00:17:04,559
know besides you know having internet

576
00:17:03,120 --> 00:17:05,119
gaming limits or something like that

577
00:17:04,559 --> 00:17:06,959
you're

578
00:17:05,119 --> 00:17:08,319
you're pretty much just set up once and

579
00:17:06,959 --> 00:17:09,760
everything goes it can all be down to

580
00:17:08,319 --> 00:17:11,760
cloudformation template

581
00:17:09,760 --> 00:17:13,599
and of course it's just no data layer

582
00:17:11,760 --> 00:17:15,439
obviously

583
00:17:13,599 --> 00:17:16,719
finally i want to cover some automation

584
00:17:15,439 --> 00:17:18,400
how people automate

585
00:17:16,720 --> 00:17:20,959
um at the end of this i have a little

586
00:17:18,400 --> 00:17:22,959
demo that people can take online and go

587
00:17:20,959 --> 00:17:24,000
um but i probably wouldn't be the exact

588
00:17:22,959 --> 00:17:25,919
demo i would do

589
00:17:24,000 --> 00:17:26,959
my favorite is jenkins but i'm just

590
00:17:25,919 --> 00:17:29,120
going to cover the concepts of

591
00:17:26,959 --> 00:17:31,280
automation and let you guys kind of you

592
00:17:29,120 --> 00:17:32,959
know learn on your own discover

593
00:17:31,280 --> 00:17:34,480
so there's basically uh two parts of

594
00:17:32,960 --> 00:17:35,520
automation continuous integration

595
00:17:34,480 --> 00:17:37,840
continuous

596
00:17:35,520 --> 00:17:39,360
deployment uh continuous integration is

597
00:17:37,840 --> 00:17:40,639
really the ability to build scan test

598
00:17:39,360 --> 00:17:43,918
and publish your code

599
00:17:40,640 --> 00:17:46,640
um so it has three basic build steps

600
00:17:43,919 --> 00:17:48,000
for sorry four basic steps um a build

601
00:17:46,640 --> 00:17:50,320
step where you compile your code

602
00:17:48,000 --> 00:17:52,640
um that could be nv uh it should be nvn

603
00:17:50,320 --> 00:17:55,678
install not nvn sorry about the typo

604
00:17:52,640 --> 00:17:57,760
uh mp install uh you can scan your code

605
00:17:55,679 --> 00:17:58,799
with sony rq on github and you

606
00:17:57,760 --> 00:18:00,799
you can have different things some

607
00:17:58,799 --> 00:18:03,280
people just most companies just scan

608
00:18:00,799 --> 00:18:04,400
for results some people scan i send the

609
00:18:03,280 --> 00:18:06,559
results wait for this

610
00:18:04,400 --> 00:18:08,400
analysis to be done and have blocking

611
00:18:06,559 --> 00:18:09,918
actions in the continuous integration

612
00:18:08,400 --> 00:18:11,360
like if you increase my security

613
00:18:09,919 --> 00:18:13,360
footprint i don't want your commit to go

614
00:18:11,360 --> 00:18:15,199
through you to go back and fix your code

615
00:18:13,360 --> 00:18:16,559
then it should do all testing phases

616
00:18:15,200 --> 00:18:17,919
possible without your code deployed to

617
00:18:16,559 --> 00:18:18,799
real environment unit functional

618
00:18:17,919 --> 00:18:20,400
whatever you got

619
00:18:18,799 --> 00:18:22,240
if you have mock databases and whatnot

620
00:18:20,400 --> 00:18:24,559
that shall be done and then

621
00:18:22,240 --> 00:18:26,880
finally publish your code artifact so

622
00:18:24,559 --> 00:18:28,879
that would be the artifactory nexus

623
00:18:26,880 --> 00:18:30,400
also if your artifact repository has

624
00:18:28,880 --> 00:18:31,919
scanning capabilities you can even do

625
00:18:30,400 --> 00:18:32,559
that same thing with artifactory x-ray

626
00:18:31,919 --> 00:18:34,080
and stuff

627
00:18:32,559 --> 00:18:35,280
or you can have a block in action or

628
00:18:34,080 --> 00:18:36,879
just you know make sure you're making

629
00:18:35,280 --> 00:18:38,160
sure the scan commits

630
00:18:36,880 --> 00:18:39,440
um and then you have continuous

631
00:18:38,160 --> 00:18:40,840
employment uh this is the billion

632
00:18:39,440 --> 00:18:42,080
automatically build and publish your

633
00:18:40,840 --> 00:18:43,280
deployment uh

634
00:18:42,080 --> 00:18:45,039
artifact and deploy to your

635
00:18:43,280 --> 00:18:46,639
infrastructure so build here i mean the

636
00:18:45,039 --> 00:18:47,520
actual deployment artifact so you take

637
00:18:46,640 --> 00:18:49,520
your

638
00:18:47,520 --> 00:18:50,960
your you know your actual application

639
00:18:49,520 --> 00:18:52,559
and you do a darker build

640
00:18:50,960 --> 00:18:53,919
um it becomes a little you know less

641
00:18:52,559 --> 00:18:54,960
relevant to angular because you built it

642
00:18:53,919 --> 00:18:56,480
that is you know your

643
00:18:54,960 --> 00:18:59,039
your fod files are your deployment

644
00:18:56,480 --> 00:19:00,480
artifact uh you push that s3 but

645
00:18:59,039 --> 00:19:02,000
if you're you know building an app like

646
00:19:00,480 --> 00:19:02,960
a job app or something you know your

647
00:19:02,000 --> 00:19:04,240
docker

648
00:19:02,960 --> 00:19:05,840
build would actually be what i would

649
00:19:04,240 --> 00:19:06,880
consider your deployment artifact in

650
00:19:05,840 --> 00:19:08,240
this scenario

651
00:19:06,880 --> 00:19:09,679
and then you publish your deployment

652
00:19:08,240 --> 00:19:11,200
artifact like i said if it's docker you

653
00:19:09,679 --> 00:19:13,360
push the container registry

654
00:19:11,200 --> 00:19:14,640
if it's s3 files you push to the s3 file

655
00:19:13,360 --> 00:19:15,600
version bucket for the artifact

656
00:19:14,640 --> 00:19:17,840
retention

657
00:19:15,600 --> 00:19:18,959
or deploy it and then finally you do

658
00:19:17,840 --> 00:19:21,840
some switch up

659
00:19:18,960 --> 00:19:22,799
um like i said uh the ecs fargate it's

660
00:19:21,840 --> 00:19:24,399
just a simple

661
00:19:22,799 --> 00:19:25,840
force update and it grabs the newest

662
00:19:24,400 --> 00:19:27,200
image from your task definition there's

663
00:19:25,840 --> 00:19:29,199
nothing else to do that

664
00:19:27,200 --> 00:19:30,799
um it has great auto load balancing

665
00:19:29,200 --> 00:19:32,799
handling over the way it works is once

666
00:19:30,799 --> 00:19:35,360
you send it to do an update service

667
00:19:32,799 --> 00:19:36,559
it starts a new one and pulls the newest

668
00:19:35,360 --> 00:19:38,080
image

669
00:19:36,559 --> 00:19:39,840
and once it pulls the image it boots it

670
00:19:38,080 --> 00:19:41,439
up make sure it passes the health check

671
00:19:39,840 --> 00:19:43,600
once it passes the health check it puts

672
00:19:41,440 --> 00:19:45,520
it behind the application load balancer

673
00:19:43,600 --> 00:19:47,280
the application load balancer then waits

674
00:19:45,520 --> 00:19:48,799
for the old ones to finish

675
00:19:47,280 --> 00:19:50,240
their request and then take some out of

676
00:19:48,799 --> 00:19:51,280
the application load balancer you have a

677
00:19:50,240 --> 00:19:53,360
flawless

678
00:19:51,280 --> 00:19:55,600
uh upgrade with no downtime as long as

679
00:19:53,360 --> 00:19:57,600
your code works

680
00:19:55,600 --> 00:19:59,360
and then finally s3 um it's simply to

681
00:19:57,600 --> 00:20:01,120
upload new content to a public book and

682
00:19:59,360 --> 00:20:03,360
inform cd and invalidate old

683
00:20:01,120 --> 00:20:04,399
um there's i should say npn start with

684
00:20:03,360 --> 00:20:06,719
the spelling error again

685
00:20:04,400 --> 00:20:08,799
but there's like three or four great npm

686
00:20:06,720 --> 00:20:11,280
modules out there that you can look up

687
00:20:08,799 --> 00:20:12,080
um they all kind of do s3 and cd

688
00:20:11,280 --> 00:20:15,200
invalidation

689
00:20:12,080 --> 00:20:17,280
based on your build of uh your your

690
00:20:15,200 --> 00:20:19,440
static code so it kind of makes it just

691
00:20:17,280 --> 00:20:21,120
seamless and you're only targeting the

692
00:20:19,440 --> 00:20:22,400
pass and files change rather than you

693
00:20:21,120 --> 00:20:23,760
know maybe doing all directory or

694
00:20:22,400 --> 00:20:25,200
whatnot

695
00:20:23,760 --> 00:20:27,039
um then finally like i said because my

696
00:20:25,200 --> 00:20:28,880
time is about up um

697
00:20:27,039 --> 00:20:32,080
try it out um i was about to go make

698
00:20:28,880 --> 00:20:34,000
this a whole entire thing and

699
00:20:32,080 --> 00:20:35,360
i had a cloud formation i was on use and

700
00:20:34,000 --> 00:20:37,360
do a github

701
00:20:35,360 --> 00:20:38,959
and i went googling for an app online

702
00:20:37,360 --> 00:20:42,080
and i found this great

703
00:20:38,960 --> 00:20:43,120
aws uh getting started hands-on building

704
00:20:42,080 --> 00:20:44,879
a modern app

705
00:20:43,120 --> 00:20:46,799
it pretty much has everything i talked

706
00:20:44,880 --> 00:20:48,559
about for the most part using all

707
00:20:46,799 --> 00:20:51,600
software as a service

708
00:20:48,559 --> 00:20:52,960
um with a little twist they do have a

709
00:20:51,600 --> 00:20:55,760
couple extra services

710
00:20:52,960 --> 00:20:57,840
and uh they're actually using uh ci cd

711
00:20:55,760 --> 00:20:59,440
and aws which is kind of cool

712
00:20:57,840 --> 00:21:00,959
like i said i'm more of a jenkins guy

713
00:20:59,440 --> 00:21:01,840
and i do auto scaling groups stuff like

714
00:21:00,960 --> 00:21:03,600
that

715
00:21:01,840 --> 00:21:05,280
but this is kind of their thing the only

716
00:21:03,600 --> 00:21:06,959
thing that they don't do that i kind of

717
00:21:05,280 --> 00:21:08,720
covered is they didn't put cloudfront in

718
00:21:06,960 --> 00:21:10,799
front of their s3 buckets

719
00:21:08,720 --> 00:21:12,159
um that are doing the presentation layer

720
00:21:10,799 --> 00:21:13,760
but besides that it

721
00:21:12,159 --> 00:21:16,000
pretty much has everything i covered in

722
00:21:13,760 --> 00:21:17,840
a few extra little things

723
00:21:16,000 --> 00:21:19,679
but this is this will build you a no

724
00:21:17,840 --> 00:21:20,320
host infrastructure and show you a demo

725
00:21:19,679 --> 00:21:22,480
app

726
00:21:20,320 --> 00:21:24,639
of it so if anyone that wants to learn

727
00:21:22,480 --> 00:21:28,400
more please try it out

728
00:21:24,640 --> 00:21:31,039
finally uh any q a i will be on discord

729
00:21:28,400 --> 00:21:32,559
my username is world scavenger

730
00:21:31,039 --> 00:21:34,480
and i'll be happy to talk to anyone

731
00:21:32,559 --> 00:21:35,360
anyone wants to ask how i uh make

732
00:21:34,480 --> 00:21:37,919
jenkins

733
00:21:35,360 --> 00:21:39,120
uh pretty solid in aws and almost no

734
00:21:37,919 --> 00:21:41,280
hosti as well

735
00:21:39,120 --> 00:21:42,879
please let me know and uh thank you for

736
00:21:41,280 --> 00:21:45,039
your time uh

737
00:21:42,880 --> 00:21:46,000
enjoy con con and uh again please buy

738
00:21:45,039 --> 00:21:48,480
some merch

739
00:21:46,000 --> 00:21:50,240
uh and i have to uh go back to the rebel

740
00:21:48,480 --> 00:21:59,840
face because i hope from the show

741
00:21:50,240 --> 00:21:59,840
have a good one and take care

742
00:22:14,080 --> 00:22:16,559
i'm done

743
00:22:20,400 --> 00:22:23,120
all right

744
00:22:24,320 --> 00:22:28,240
i only have 30 minutes i did my third

745
00:22:26,080 --> 00:22:31,280
month i'm on one time

746
00:22:28,240 --> 00:22:31,280
i'm gonna mute you

747
00:22:35,039 --> 00:22:42,799
okay uh

748
00:22:40,320 --> 00:22:44,720
thank you sean for your presentation i

749
00:22:42,799 --> 00:22:47,360
don't see

750
00:22:44,720 --> 00:22:48,880
any questions left in the q a uh

751
00:22:47,360 --> 00:22:52,000
hopefully

752
00:22:48,880 --> 00:22:55,120
everything worked well on your end uh

753
00:22:52,000 --> 00:22:56,000
we're building as we go on our end so uh

754
00:22:55,120 --> 00:22:59,039
hang tight for

755
00:22:56,000 --> 00:22:59,520
track uh the second panel um starts at 9

756
00:22:59,039 --> 00:23:09,840
30

757
00:22:59,520 --> 00:23:09,840
for track two thank you

758
00:24:06,640 --> 00:24:08,720
you

