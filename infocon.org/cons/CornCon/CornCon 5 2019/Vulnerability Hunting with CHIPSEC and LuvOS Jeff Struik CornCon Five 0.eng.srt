1
00:00:03,319 --> 00:00:15,570
Solutions and mobility non-singing

2
00:00:08,519 --> 00:00:17,730
sub-second one of us all right I usually

3
00:00:15,570 --> 00:00:24,380
like to start off with a really lame

4
00:00:17,730 --> 00:00:36,180
joke so you compare not to life who made

5
00:00:24,380 --> 00:00:38,670
markers table rotting sir cumference so

6
00:00:36,180 --> 00:00:41,760
today we're going to talk about chip

7
00:00:38,670 --> 00:00:44,250
second-level s so we're going to talk a

8
00:00:41,760 --> 00:00:47,550
little bit about what each of those are

9
00:00:44,250 --> 00:00:52,309
going to provide demonstration was

10
00:00:47,550 --> 00:00:52,309
opposing life but I had this dream and

11
00:00:53,329 --> 00:00:59,730
so the first question is why do we need

12
00:00:58,079 --> 00:01:03,120
something like sugars the chip second

13
00:00:59,730 --> 00:01:06,479
and level s well obviously having a

14
00:01:03,120 --> 00:01:10,770
low-level hardware level breach is

15
00:01:06,479 --> 00:01:11,970
nearly impossible to detect and it will

16
00:01:10,770 --> 00:01:14,520
allow the attackers

17
00:01:11,970 --> 00:01:17,700
basically gain irrevocable persistence

18
00:01:14,520 --> 00:01:19,440
to the machine it could obviously cause

19
00:01:17,700 --> 00:01:23,300
the device to become useless

20
00:01:19,440 --> 00:01:26,009
and there's devices everywhere now and

21
00:01:23,300 --> 00:01:29,640
it just continues to expand

22
00:01:26,010 --> 00:01:31,950
thanks to they promoted things and last

23
00:01:29,640 --> 00:01:33,650
but not least it's a lot of fun to be

24
00:01:31,950 --> 00:01:37,670
honest death

25
00:01:33,650 --> 00:01:41,880
so first we'll talk about second place

26
00:01:37,670 --> 00:01:46,180
so trip SEC is basically a a Python and

27
00:01:41,880 --> 00:01:49,039
C based tool that was developed by Intel

28
00:01:46,180 --> 00:01:54,420
[Music]

29
00:01:49,040 --> 00:01:58,560
and so what it does is checks low level

30
00:01:54,420 --> 00:02:01,710
settings the chip level and different

31
00:01:58,560 --> 00:02:03,720
flash memory settings it can be used

32
00:02:01,710 --> 00:02:06,990
there's multiple ways that you can use

33
00:02:03,720 --> 00:02:11,600
chipset chip ii think they can be either

34
00:02:06,990 --> 00:02:14,910
installed on Windows or Linux it is

35
00:02:11,600 --> 00:02:19,250
available and can be put onto a Mac but

36
00:02:14,910 --> 00:02:19,250
there's a lot of additional risk

37
00:02:19,580 --> 00:02:25,069
and they can just also be used as a

38
00:02:22,550 --> 00:02:27,650
sting you can just build the Python

39
00:02:25,069 --> 00:02:31,849
library as a standalone Python

40
00:02:27,650 --> 00:02:36,800
executable and probably the best option

41
00:02:31,849 --> 00:02:40,940
is the executable UEFI shell version

42
00:02:36,800 --> 00:02:43,850
where it's basically in a pre boot

43
00:02:40,940 --> 00:02:47,239
environment and it prevents the

44
00:02:43,850 --> 00:02:55,329
possibility of damaging your lifetime

45
00:02:47,239 --> 00:02:58,100
system but we'll talk more about that so

46
00:02:55,330 --> 00:03:01,569
the basic structure of chip second is

47
00:02:58,100 --> 00:03:04,910
that there are there are two primary

48
00:03:01,569 --> 00:03:08,060
excuse one has the chips at main and

49
00:03:04,910 --> 00:03:10,430
then the others the chipset utilities so

50
00:03:08,060 --> 00:03:14,470
each of those have specific functions

51
00:03:10,430 --> 00:03:18,880
that can be used there's whenever you do

52
00:03:14,470 --> 00:03:21,650
make the compiled of the the chipset

53
00:03:18,880 --> 00:03:26,390
program you have to build out the the

54
00:03:21,650 --> 00:03:29,890
drivers for the OS helper and and that

55
00:03:26,390 --> 00:03:31,269
is something that has to be done

56
00:03:29,890 --> 00:03:35,619
specifically

57
00:03:31,270 --> 00:03:38,800
for Windows and Linux or Mac as well and

58
00:03:35,620 --> 00:03:43,810
it's important to note that when doing

59
00:03:38,800 --> 00:03:46,690
that it will fail if you try to if you

60
00:03:43,810 --> 00:03:48,940
try to run it within Windows initially

61
00:03:46,690 --> 00:03:51,250
it will fail because it will not pass it

62
00:03:48,940 --> 00:03:54,670
the signature check for that drive link

63
00:03:51,250 --> 00:03:57,820
so if you want to test on a system on a

64
00:03:54,670 --> 00:04:02,890
live system without doing the USB you

65
00:03:57,820 --> 00:04:06,190
need to set the configurations do not do

66
00:04:02,890 --> 00:04:08,170
the integrity checking and and then

67
00:04:06,190 --> 00:04:10,600
there's one other setting in there that

68
00:04:08,170 --> 00:04:15,429
you have to say so that way it will

69
00:04:10,600 --> 00:04:20,469
allow you to run unsigned drivers on

70
00:04:15,430 --> 00:04:22,840
there and then there's the specific test

71
00:04:20,470 --> 00:04:29,620
modules so you can see you appeared at

72
00:04:22,840 --> 00:04:33,969
the i/o PCI SPI CMOS there's also three

73
00:04:29,620 --> 00:04:36,100
EFI the BIOS secure boot all of those

74
00:04:33,970 --> 00:04:40,680
are different modules on there

75
00:04:36,100 --> 00:04:40,680
we'll see that during the demonstration

76
00:04:42,000 --> 00:04:52,600
so the chipset main module is obviously

77
00:04:48,610 --> 00:04:55,270
the the primary test used to to run and

78
00:04:52,600 --> 00:04:57,010
and so what the main module does is it

79
00:04:55,270 --> 00:05:02,039
basically will run through every single

80
00:04:57,010 --> 00:05:04,960
one of the tests that comes with chipset

81
00:05:02,040 --> 00:05:08,500
it is a pretty comprehensive test suite

82
00:05:04,960 --> 00:05:10,539
it runs very quickly but it does also

83
00:05:08,500 --> 00:05:13,570
provide you the capability to run a

84
00:05:10,540 --> 00:05:16,570
module by itself if you're not wanting

85
00:05:13,570 --> 00:05:19,240
to test everything or say you have

86
00:05:16,570 --> 00:05:21,580
multiple failures that you come across

87
00:05:19,240 --> 00:05:24,580
and you want to be able to investigate

88
00:05:21,580 --> 00:05:27,969
those further you can then run that for

89
00:05:24,580 --> 00:05:31,630
mostly against those single modules to

90
00:05:27,970 --> 00:05:35,790
get a little bit more information and it

91
00:05:31,630 --> 00:05:38,620
does allow for multiple output formats

92
00:05:35,790 --> 00:05:43,540
specifically the two that it comes

93
00:05:38,620 --> 00:05:48,250
native as Jason and then Matt XML and

94
00:05:43,540 --> 00:05:51,160
and the JSON format can be just the

95
00:05:48,250 --> 00:05:53,560
basic pass/fail information or you can

96
00:05:51,160 --> 00:05:56,830
also record the chipset session and

97
00:05:53,560 --> 00:05:59,140
it'll dump basically the entire test

98
00:05:56,830 --> 00:06:03,400
into the adjacent file and that's that

99
00:05:59,140 --> 00:06:04,900
way you can run that test again to see

100
00:06:03,400 --> 00:06:07,888
if you have

101
00:06:04,900 --> 00:06:07,888
changes to platform

102
00:06:11,229 --> 00:06:17,710
so it does provide a lot of valuable

103
00:06:13,569 --> 00:06:21,189
information about any possible chip

104
00:06:17,710 --> 00:06:26,770
level or abilities like I said Jason and

105
00:06:21,189 --> 00:06:29,979
XML and the probably the most common

106
00:06:26,770 --> 00:06:31,808
thing that you'll see with the any

107
00:06:29,979 --> 00:06:36,938
misconfigurations and the board level

108
00:06:31,809 --> 00:06:40,900
memories so it checks for like if you're

109
00:06:36,939 --> 00:06:46,360
if you have the ability to write to like

110
00:06:40,900 --> 00:06:50,229
the ethernet area or if the flash hasn't

111
00:06:46,360 --> 00:06:54,610
been properly overwritten and leaves up

112
00:06:50,229 --> 00:06:59,589
in the memory space so right here is

113
00:06:54,610 --> 00:07:02,409
just a real quick example by us keith

114
00:06:59,589 --> 00:07:10,229
warren buffett test so you can see here

115
00:07:02,409 --> 00:07:13,180
that it's empty all zeros basically that

116
00:07:10,229 --> 00:07:18,610
demonstrates that there's nothing left

117
00:07:13,180 --> 00:07:24,750
but there are so my demonstration system

118
00:07:18,610 --> 00:07:27,750
which I am unable were plugged up it had

119
00:07:24,750 --> 00:07:30,190
some stuff in the buffer and so if you

120
00:07:27,750 --> 00:07:32,800
take the time and dig in and you can

121
00:07:30,190 --> 00:07:35,070
obviously export that can see what was

122
00:07:32,800 --> 00:07:38,410
in the buffer and and so this would be

123
00:07:35,070 --> 00:07:40,180
important obviously if you're trying to

124
00:07:38,410 --> 00:07:42,450
discover like the bios password or

125
00:07:40,180 --> 00:07:49,270
something all those lines to be able to

126
00:07:42,450 --> 00:07:51,099
execute attack or they also holds like

127
00:07:49,270 --> 00:07:53,710
the secure boot passwords where if you

128
00:07:51,100 --> 00:07:55,810
have if you're using password

129
00:07:53,710 --> 00:08:04,900
authentication for a bit longer stuff

130
00:07:55,810 --> 00:08:07,720
like that so this was just a real quick

131
00:08:04,900 --> 00:08:13,210
from a demo system the s3 boot script

132
00:08:07,720 --> 00:08:16,000
basically the resume from sleep and it

133
00:08:13,210 --> 00:08:20,890
shows there that the memory is

134
00:08:16,000 --> 00:08:22,660
unprotected and so it's also out there

135
00:08:20,890 --> 00:08:24,789
what their body feels and that's

136
00:08:22,660 --> 00:08:28,390
valuable whenever you want to go and

137
00:08:24,790 --> 00:08:31,400
take an additional step into the testing

138
00:08:28,390 --> 00:08:34,400
and discover if you

139
00:08:31,400 --> 00:08:38,900
actually modify the memory at that

140
00:08:34,400 --> 00:08:40,939
location and in this case we'll get a

141
00:08:38,900 --> 00:08:43,728
movement further into it there's a

142
00:08:40,940 --> 00:08:46,190
utility script that you can run and

143
00:08:43,729 --> 00:08:48,440
prove that you are able to write to it

144
00:08:46,190 --> 00:08:52,339
and so that's that's important because

145
00:08:48,440 --> 00:08:55,339
you could then modify something during

146
00:08:52,339 --> 00:09:01,010
the resume where you could again capture

147
00:08:55,339 --> 00:09:06,980
credentials or additional information so

148
00:09:01,010 --> 00:09:09,650
this was the kind of explanation of what

149
00:09:06,980 --> 00:09:12,920
happens whenever he Revathy the

150
00:09:09,650 --> 00:09:19,220
modification test group so you can see

151
00:09:12,920 --> 00:09:22,910
that it moved the termini code to

152
00:09:19,220 --> 00:09:26,420
different memory locations just as a

153
00:09:22,910 --> 00:09:28,610
demonstration that you were able to move

154
00:09:26,420 --> 00:09:32,150
stuff around the memory and and write to

155
00:09:28,610 --> 00:09:35,510
the memory to show that it actually was

156
00:09:32,150 --> 00:09:39,470
not protected and you do that obviously

157
00:09:35,510 --> 00:09:42,110
because in the case of that test it

158
00:09:39,470 --> 00:09:44,870
showing that failed initially but it is

159
00:09:42,110 --> 00:09:47,150
possible that it detects a failure and

160
00:09:44,870 --> 00:09:49,080
when you go to test it further it will

161
00:09:47,150 --> 00:09:52,050
not be able to prove

162
00:09:49,080 --> 00:09:58,380
because just a different different set

163
00:09:52,050 --> 00:10:02,579
up in the system so next is the chipset

164
00:09:58,380 --> 00:10:04,860
utility the chip size utility is a lot

165
00:10:02,580 --> 00:10:10,100
of fun you can do a lot of really neat

166
00:10:04,860 --> 00:10:12,240
things with it but it is very dangerous

167
00:10:10,100 --> 00:10:15,149
primarily because it gives you direct

168
00:10:12,240 --> 00:10:16,800
access to the hardware not just read

169
00:10:15,149 --> 00:10:20,850
access so you can go in and modify

170
00:10:16,800 --> 00:10:23,040
things and obviously you don't want to

171
00:10:20,850 --> 00:10:25,560
go and modify things that you're not

172
00:10:23,040 --> 00:10:29,550
100% sure what they do or you may end up

173
00:10:25,560 --> 00:10:31,920
with a really big paperweight so you can

174
00:10:29,550 --> 00:10:36,420
do things specifically like dumping the

175
00:10:31,920 --> 00:10:40,229
memory into binary files or log files

176
00:10:36,420 --> 00:10:44,130
and you can also dump the variables for

177
00:10:40,230 --> 00:10:47,339
like the UEFI settings and and similarly

178
00:10:44,130 --> 00:10:53,189
you can dump the the key for the secure

179
00:10:47,339 --> 00:10:54,339
good stuff and get your primary key your

180
00:10:53,190 --> 00:10:57,689
CAC

181
00:10:54,339 --> 00:10:57,689
some additional information

182
00:10:59,970 --> 00:11:07,320
so one of the commands of the PCI

183
00:11:04,800 --> 00:11:10,140
command and the PCI command it will

184
00:11:07,320 --> 00:11:12,540
allow you to basically have direct

185
00:11:10,140 --> 00:11:14,910
access to the PCI configuration

186
00:11:12,540 --> 00:11:16,520
registers and through that you can

187
00:11:14,910 --> 00:11:22,290
obviously gain additional information

188
00:11:16,520 --> 00:11:27,329
and and you can modify memory if it's

189
00:11:22,290 --> 00:11:31,469
not properly written the TPM command

190
00:11:27,330 --> 00:11:34,590
will allow you to make various TPM

191
00:11:31,470 --> 00:11:37,590
variables and you can dump that

192
00:11:34,590 --> 00:11:45,510
obviously as well and you use it use

193
00:11:37,590 --> 00:11:48,270
that additional forensic analysis given

194
00:11:45,510 --> 00:11:51,810
some of the recent Hardware attacks it

195
00:11:48,270 --> 00:11:55,079
it is valuable because it can provide

196
00:11:51,810 --> 00:11:58,650
you with the microcode ID for that cpu

197
00:11:55,080 --> 00:12:01,770
and if it's been updated stuff like

198
00:11:58,650 --> 00:12:05,699
that's that way you know if certain

199
00:12:01,770 --> 00:12:09,329
possibilities may apply to it

200
00:12:05,700 --> 00:12:11,630
all right chipset fiddle see if it

201
00:12:09,330 --> 00:12:11,630
starts

202
00:12:20,360 --> 00:12:27,399
all right so I put some delays in there

203
00:12:23,209 --> 00:12:28,758
so I'm basically dumping everything that

204
00:12:27,399 --> 00:12:30,559
Jason Klaus

205
00:12:28,759 --> 00:12:32,059
so that's how fast it actually it runs

206
00:12:30,559 --> 00:12:37,449
crazy fasting you can't see anything

207
00:12:32,059 --> 00:12:37,449
here but it failed the specter v2

208
00:12:50,830 --> 00:12:53,880
that's one

209
00:12:59,690 --> 00:13:02,690
sorry

210
00:13:06,000 --> 00:13:16,319
all right so so when I ran the common

211
00:13:12,779 --> 00:13:18,360
dot CP you got spectrum V 2 module by

212
00:13:16,319 --> 00:13:21,628
itself then I was able to get more

213
00:13:18,360 --> 00:13:24,329
information specifically it provided the

214
00:13:21,629 --> 00:13:26,060
information that Nicorette very

215
00:13:24,329 --> 00:13:29,370
interesting speculation

216
00:13:26,060 --> 00:13:32,250
it's not a capability that was on that

217
00:13:29,370 --> 00:13:33,930
processor and then it also tested at the

218
00:13:32,250 --> 00:13:36,720
OS level asleep server to any

219
00:13:33,930 --> 00:13:45,709
medications in place which they did not

220
00:13:36,720 --> 00:13:45,709
have any I can't really see them read so

221
00:13:46,029 --> 00:13:57,490
it does you know it does say that there

222
00:13:48,660 --> 00:13:59,459
that there may be additional solutions

223
00:13:57,490 --> 00:14:03,269
available but it doesn't give you any

224
00:13:59,459 --> 00:14:03,268
initiative to help with that

225
00:14:05,400 --> 00:14:16,709
and so this was that SP I have a flash

226
00:14:11,420 --> 00:14:19,860
memory access so you can see here that

227
00:14:16,710 --> 00:14:25,170
it says that you know access to the

228
00:14:19,860 --> 00:14:28,350
image and so you can see a thinner that

229
00:14:25,170 --> 00:14:30,329
it does show that was having the reading

230
00:14:28,350 --> 00:14:32,970
access but it also shows it was having

231
00:14:30,330 --> 00:14:35,820
the right access and so so something

232
00:14:32,970 --> 00:14:38,250
like that is kind of important to pay

233
00:14:35,820 --> 00:14:41,580
attention to because you know it is

234
00:14:38,250 --> 00:14:44,310
possible then that arbitrary code could

235
00:14:41,580 --> 00:14:46,890
be loaded into that area of the flash

236
00:14:44,310 --> 00:14:51,109
and executed and you'd be able to gain

237
00:14:46,890 --> 00:14:51,110
some very low-level persistence

238
00:14:53,060 --> 00:15:00,969
sorry five seconds timing was enough to

239
00:14:57,380 --> 00:15:00,970
talk through it

240
00:15:07,180 --> 00:15:10,309
[Music]

241
00:15:15,750 --> 00:15:24,060
so this is the that Sakura booth

242
00:15:20,370 --> 00:15:27,720
variables access controls one of the

243
00:15:24,060 --> 00:15:30,628
test systems that I had did not have

244
00:15:27,720 --> 00:15:37,829
that configured correctly specifically

245
00:15:30,629 --> 00:15:39,509
it was a variable and and so it's the

246
00:15:37,829 --> 00:15:41,459
biggest thing is it's checking to make

247
00:15:39,509 --> 00:15:43,980
sure that some sort of authentication is

248
00:15:41,459 --> 00:15:47,040
required before you can write anything

249
00:15:43,980 --> 00:15:50,370
to a secure but variables and that's

250
00:15:47,040 --> 00:15:52,019
important for obvious reasons and in

251
00:15:50,370 --> 00:15:54,389
this case it has the time based

252
00:15:52,019 --> 00:15:58,529
authentication and so whenever you dig

253
00:15:54,389 --> 00:16:01,259
into that module it basically will allow

254
00:15:58,529 --> 00:16:04,649
a trivial warning if it's not time-based

255
00:16:01,259 --> 00:16:07,500
authentication but it still basically

256
00:16:04,649 --> 00:16:10,379
says say you're ok but the best is the

257
00:16:07,500 --> 00:16:12,829
time based authentication for the right

258
00:16:10,379 --> 00:16:12,829
access

259
00:16:22,670 --> 00:16:31,000
or is it in its source of time is a real

260
00:16:26,600 --> 00:16:31,000
time clock battery dies a ruin

261
00:16:34,250 --> 00:16:40,580
for are you talking about time based

262
00:16:36,530 --> 00:16:44,720
authentication so that would be yeah I'd

263
00:16:40,580 --> 00:16:46,580
be at the source of time so I'm you know

264
00:16:44,720 --> 00:16:49,040
I honestly don't know the answer to my

265
00:16:46,580 --> 00:16:55,850
question that's very good question that

266
00:16:49,040 --> 00:16:59,120
had not been easy so again this is just

267
00:16:55,850 --> 00:17:03,560
showing that the keyboard buffer was was

268
00:16:59,120 --> 00:17:06,319
empty and does not necessarily mean that

269
00:17:03,560 --> 00:17:10,089
it is but it definitely indicates there

270
00:17:06,319 --> 00:17:10,089
that it was more likely

271
00:17:23,829 --> 00:17:26,730
the resume

272
00:17:33,550 --> 00:17:44,030
so I write here with UEFI variables

273
00:17:40,670 --> 00:17:47,960
it basically is looking at the efi

274
00:17:44,030 --> 00:17:50,620
specification and it has basically the

275
00:17:47,960 --> 00:17:53,330
date ways of what that should look like

276
00:17:50,620 --> 00:17:56,179
stored and then it's testing each of the

277
00:17:53,330 --> 00:17:59,570
variables to make sure that access

278
00:17:56,180 --> 00:18:05,810
controls are convenient correctly so the

279
00:17:59,570 --> 00:18:10,250
enemy is non-volatile the vs is moved

280
00:18:05,810 --> 00:18:12,580
time access and then RT is runtime

281
00:18:10,250 --> 00:18:15,850
access and then time based

282
00:18:12,580 --> 00:18:20,320
authentication and then just

283
00:18:15,850 --> 00:18:22,850
authenticated right so so each of those

284
00:18:20,320 --> 00:18:24,980
tests each of us to make sure that they

285
00:18:22,850 --> 00:18:28,639
are configured in accordance with the

286
00:18:24,980 --> 00:18:31,340
efi specification so that way you know

287
00:18:28,640 --> 00:18:32,440
that someone doesn't have access to

288
00:18:31,340 --> 00:18:33,790
certain variables

289
00:18:32,440 --> 00:18:38,590
that the ability to modify those

290
00:18:33,790 --> 00:18:40,840
variables and for obvious reasons you

291
00:18:38,590 --> 00:18:42,909
want to make sure that they are set

292
00:18:40,840 --> 00:18:46,560
correctly otherwise someone could

293
00:18:42,910 --> 00:18:46,560
definitely do some damage to the system

294
00:19:01,980 --> 00:19:10,049
all right and then this next so that

295
00:19:07,740 --> 00:19:12,929
what what's possible right is the firm

296
00:19:10,049 --> 00:19:14,730
our test suite and I just have that in

297
00:19:12,929 --> 00:19:16,320
there because we're going to be talking

298
00:19:14,730 --> 00:19:18,450
about a little bit later so I'll go

299
00:19:16,320 --> 00:19:20,668
ahead and run through that little

300
00:19:18,450 --> 00:19:27,090
segment but then well expound on that

301
00:19:20,669 --> 00:19:31,320
one for later as far as what it does and

302
00:19:27,090 --> 00:19:33,480
so the the firm our test suite you can't

303
00:19:31,320 --> 00:19:35,700
see it but the technique come in

304
00:19:33,480 --> 00:19:40,440
episodes of batch so it's running in the

305
00:19:35,700 --> 00:19:44,909
preset bunch of tests and this is also a

306
00:19:40,440 --> 00:19:48,690
similar to chip SEC but it does Ted do

307
00:19:44,909 --> 00:19:53,370
some additional testing and it will you

308
00:19:48,690 --> 00:19:57,539
know check things like fans and and all

309
00:19:53,370 --> 00:20:01,559
of that different stuff and the firmer

310
00:19:57,539 --> 00:20:06,809
test suite was developed by canonical

311
00:20:01,559 --> 00:20:10,289
Ubuntu and they they have it also has a

312
00:20:06,809 --> 00:20:12,629
standalone live operating system but

313
00:20:10,289 --> 00:20:15,690
we'll talk a little bit later that it's

314
00:20:12,630 --> 00:20:18,630
also included in the planning to do if I

315
00:20:15,690 --> 00:20:22,190
validation on this so you can see here

316
00:20:18,630 --> 00:20:24,710
it does take quite a while to run

317
00:20:22,190 --> 00:20:27,680
and specifically when it gets to things

318
00:20:24,710 --> 00:20:30,800
like checking your computer

319
00:20:27,680 --> 00:20:32,870
wake up scripts and stuff like that the

320
00:20:30,800 --> 00:20:36,139
only thing and when you're doing it on

321
00:20:32,870 --> 00:20:38,120
all the machines you definitely think

322
00:20:36,140 --> 00:20:40,750
that it's reasons because it takes quite

323
00:20:38,120 --> 00:20:40,750
a while is

324
00:20:49,790 --> 00:20:56,260
and you can similarly with this one he

325
00:20:52,190 --> 00:20:59,720
didn't have it dump out the output to a

326
00:20:56,260 --> 00:21:08,060
log file so that way you can take it

327
00:20:59,720 --> 00:21:10,520
offline so just as a quick recap for the

328
00:21:08,060 --> 00:21:13,190
chipset side of it it does have a wide

329
00:21:10,520 --> 00:21:17,090
range of pre-configured vulnerability

330
00:21:13,190 --> 00:21:21,460
checks one thing to note is that you can

331
00:21:17,090 --> 00:21:25,250
make your own configuration files and

332
00:21:21,460 --> 00:21:28,070
develop your own scripts to check if if

333
00:21:25,250 --> 00:21:30,140
you have that understanding that's

334
00:21:28,070 --> 00:21:34,419
something that you want to do like

335
00:21:30,140 --> 00:21:37,330
whenever you know through the main

336
00:21:34,420 --> 00:21:39,910
of the chipset it does show some

337
00:21:37,330 --> 00:21:41,980
additional modules that they don't

338
00:21:39,910 --> 00:21:43,840
include but it was modules basically to

339
00:21:41,980 --> 00:21:50,950
prove out some of the vulnerabilities

340
00:21:43,840 --> 00:21:53,620
and it was showing how you could steal

341
00:21:50,950 --> 00:21:55,240
passwords and different things like that

342
00:21:53,620 --> 00:21:57,699
so so they have written their own

343
00:21:55,240 --> 00:22:00,490
modules kind of and for their own

344
00:21:57,700 --> 00:22:03,960
demonstration purposes I have not taken

345
00:22:00,490 --> 00:22:08,980
the time to do that yet

346
00:22:03,960 --> 00:22:11,710
so I guess more with back legs and

347
00:22:08,980 --> 00:22:14,860
windows as we talked about but obviously

348
00:22:11,710 --> 00:22:19,150
the in my opinion the best is doing the

349
00:22:14,860 --> 00:22:23,649
custom EFI shop because it reduces the

350
00:22:19,150 --> 00:22:35,460
overall complexity and the risk to the

351
00:22:23,650 --> 00:22:35,460
system because you're able to yep so

352
00:22:36,150 --> 00:22:48,150
there's that the short answer is there's

353
00:22:40,000 --> 00:22:52,150
is no however the so I had to make this

354
00:22:48,150 --> 00:22:56,230
for someone and they had the restriction

355
00:22:52,150 --> 00:22:59,560
that it had to be able to be both you

356
00:22:56,230 --> 00:23:03,040
know legacy a me if I boo and it had to

357
00:22:59,560 --> 00:23:07,290
be compatible with their current Windows

358
00:23:03,040 --> 00:23:12,430
system so I just took a Windows PE and

359
00:23:07,290 --> 00:23:15,070
then loaded it in there which doing it

360
00:23:12,430 --> 00:23:16,450
that way is kind of a pain in the butt

361
00:23:15,070 --> 00:23:17,730
but it worked

362
00:23:16,450 --> 00:23:20,730
and

363
00:23:17,730 --> 00:23:23,519
was something that's easier for like if

364
00:23:20,730 --> 00:23:26,760
you're doing this in large-scale right

365
00:23:23,519 --> 00:23:29,940
if you're trying to do this on a network

366
00:23:26,760 --> 00:23:32,730
of devices and you just set it up pixie

367
00:23:29,940 --> 00:23:34,710
with all of them you know it can run all

368
00:23:32,730 --> 00:23:36,330
of those you can make your script it'll

369
00:23:34,710 --> 00:23:38,909
run all of those and then if you wanted

370
00:23:36,330 --> 00:23:41,460
to set up to have how to push back to a

371
00:23:38,909 --> 00:23:43,919
shed or something like that in the case

372
00:23:41,460 --> 00:23:46,549
of I why I did that that's what I had to

373
00:23:43,919 --> 00:23:48,690
do it so it would just run the script

374
00:23:46,549 --> 00:23:52,710
collect everything and then pull it back

375
00:23:48,690 --> 00:23:55,799
off and dump it onto they does one

376
00:23:52,710 --> 00:24:00,029
central computer so that way the goal

377
00:23:55,799 --> 00:24:02,158
was to check all of these identical

378
00:24:00,029 --> 00:24:04,279
pieces of hardware that all came from

379
00:24:02,159 --> 00:24:07,260
the same manufacturer to make sure that

380
00:24:04,279 --> 00:24:10,500
that there that what they were saying

381
00:24:07,260 --> 00:24:14,460
was actually true regarding the memory

382
00:24:10,500 --> 00:24:15,990
configuration yeah how compatible is

383
00:24:14,460 --> 00:24:19,080
this what Intel SGX

384
00:24:15,990 --> 00:24:23,220
so you mentioned yes

385
00:24:19,080 --> 00:24:27,240
so it does it does check for the

386
00:24:23,220 --> 00:24:31,380
presence of SGS so I know it works with

387
00:24:27,240 --> 00:24:34,440
it I haven't done much with the SGS side

388
00:24:31,380 --> 00:24:36,480
of the house but but I know it does do

389
00:24:34,440 --> 00:24:39,840
the detection and and there are some

390
00:24:36,480 --> 00:24:43,250
additional utility scripts that that you

391
00:24:39,840 --> 00:24:43,250
can do some additional

392
00:24:43,860 --> 00:24:50,519
and last it is very powerful you

393
00:24:48,309 --> 00:24:56,559
definitely want to use in this car

394
00:24:50,519 --> 00:24:57,279
specifically the chipset utility so next

395
00:24:56,559 --> 00:25:02,799
is the

396
00:24:57,279 --> 00:25:06,610
Linux unified validation list so kind of

397
00:25:02,799 --> 00:25:10,600
similar to chipset it is also an open

398
00:25:06,610 --> 00:25:13,389
source project it's backed by Intel

399
00:25:10,600 --> 00:25:15,490
it is a live operating system and it

400
00:25:13,389 --> 00:25:18,580
really is kind of what I would consider

401
00:25:15,490 --> 00:25:23,409
a Swiss Army knife of doing the

402
00:25:18,580 --> 00:25:26,408
low-level testing and one of the big

403
00:25:23,409 --> 00:25:30,129
benefits is that it does provide a nice

404
00:25:26,409 --> 00:25:32,110
package full foot as opposed to ship set

405
00:25:30,129 --> 00:25:35,350
where you know it just dumps like an XML

406
00:25:32,110 --> 00:25:40,330
or JSON file whatever whenever you run

407
00:25:35,350 --> 00:25:42,370
this it makes it creates a HTML and has

408
00:25:40,330 --> 00:25:44,820
a direct review of all the results so

409
00:25:42,370 --> 00:25:47,719
it's just easy to navigate

410
00:25:44,820 --> 00:25:47,720
through the results

411
00:25:49,900 --> 00:25:59,559
so level s has several more tools that a

412
00:25:56,680 --> 00:26:04,000
BIOS implementation test suite so that

413
00:25:59,559 --> 00:26:10,559
one is kind of the structure of level s

414
00:26:04,000 --> 00:26:14,500
is and that one is also defined only

415
00:26:10,559 --> 00:26:17,559
it'll run bits first when it's loading

416
00:26:14,500 --> 00:26:21,580
and then it'll has the script in that

417
00:26:17,559 --> 00:26:24,820
bits UEFI or that bits get my file and

418
00:26:21,580 --> 00:26:30,070
at once to the level s if I file to

419
00:26:24,820 --> 00:26:33,820
continue that's how they eat up for more

420
00:26:30,070 --> 00:26:39,189
tests week we talked about it also has

421
00:26:33,820 --> 00:26:45,510
the NACDL so that tool by itself is also

422
00:26:39,190 --> 00:26:49,570
a very powerful tool for managing memory

423
00:26:45,510 --> 00:26:52,480
for the kernel subsystem and and so by

424
00:26:49,570 --> 00:26:55,750
itself you can recur do things like

425
00:26:52,480 --> 00:26:56,770
erase create memory space so it's

426
00:26:55,750 --> 00:27:00,429
something that you want to be very

427
00:26:56,770 --> 00:27:04,960
careful with I've never been brave

428
00:27:00,429 --> 00:27:08,170
enough to try to do anything with it as

429
00:27:04,960 --> 00:27:12,130
far as doing any creating or destroying

430
00:27:08,170 --> 00:27:13,610
of the space because I don't have a big

431
00:27:12,130 --> 00:27:18,320
enough budget to be able

432
00:27:13,610 --> 00:27:21,020
or braking megameters and then there's

433
00:27:18,320 --> 00:27:23,929
the the colonel yet I want so that

434
00:27:21,020 --> 00:27:27,080
Colonel EFI warnings is basically a

435
00:27:23,930 --> 00:27:30,860
shell script that that that looks at

436
00:27:27,080 --> 00:27:33,199
Intel made and it will check your

437
00:27:30,860 --> 00:27:36,879
message bus to see if there's anything

438
00:27:33,200 --> 00:27:42,280
that any kernel messages that might

439
00:27:36,880 --> 00:27:44,990
provide indication of compromised or

440
00:27:42,280 --> 00:27:47,990
vulnerabilities within the unified water

441
00:27:44,990 --> 00:27:51,680
system and then the peace tour test

442
00:27:47,990 --> 00:28:02,210
that's specific obviously the Linux and

443
00:27:51,680 --> 00:28:05,710
it's just designed to record so it is

444
00:28:02,210 --> 00:28:09,770
developed as our end of it basically

445
00:28:05,710 --> 00:28:12,140
leverages the project there are the

446
00:28:09,770 --> 00:28:18,290
three basic configurations and it does

447
00:28:12,140 --> 00:28:21,620
support both 32 and 64-bit the USB boot

448
00:28:18,290 --> 00:28:24,139
is the easiest that boot is very nice

449
00:28:21,620 --> 00:28:27,800
for the situation of if you wanting to

450
00:28:24,140 --> 00:28:30,590
do a you know network based pixie

451
00:28:27,800 --> 00:28:34,960
testing the challenge I will tell you

452
00:28:30,590 --> 00:28:41,179
with with met who is you have to do some

453
00:28:34,960 --> 00:28:44,090
customizations to the OS itself and they

454
00:28:41,180 --> 00:28:46,060
provide you with instructions and saying

455
00:28:44,090 --> 00:28:49,120
that I have not been able to

456
00:28:46,060 --> 00:28:53,260
get their instructions to work as they

457
00:28:49,120 --> 00:28:55,989
have suggested so it's it's there

458
00:28:53,260 --> 00:28:59,379
I'm sure it's due I just haven't been

459
00:28:55,990 --> 00:29:02,110
able to dedicate the time to figure out

460
00:28:59,380 --> 00:29:04,510
what I'm doing wrong and and so

461
00:29:02,110 --> 00:29:06,760
basically the netboot is nice obviously

462
00:29:04,510 --> 00:29:09,760
for that pixie and it'll basically write

463
00:29:06,760 --> 00:29:11,200
results if you have a web server you

464
00:29:09,760 --> 00:29:13,300
could just create this little upload

465
00:29:11,200 --> 00:29:17,230
page profile and it points to that and

466
00:29:13,300 --> 00:29:23,889
pulls everything down that's that's the

467
00:29:17,230 --> 00:29:27,100
idea behind so talking through the tools

468
00:29:23,890 --> 00:29:29,400
a little bit the bits and louse we're

469
00:29:27,100 --> 00:29:31,719
checking of micro code that does support

470
00:29:29,400 --> 00:29:37,560
Python scripting if you want to add

471
00:29:31,720 --> 00:29:43,140
additional testing and level s uses

472
00:29:37,560 --> 00:29:46,870
scarcity of executable test and you can

473
00:29:43,140 --> 00:29:49,650
run it from grub as well so you're not

474
00:29:46,870 --> 00:29:49,649
just limited to

475
00:29:50,070 --> 00:29:59,250
less and it uses Python towards that

476
00:29:54,360 --> 00:30:03,679
exclusion so this is just a screen

477
00:29:59,250 --> 00:30:07,350
capture or picture on the screen rather

478
00:30:03,680 --> 00:30:08,640
showing bits in execution and this is

479
00:30:07,350 --> 00:30:11,310
what it would look like if you ran it

480
00:30:08,640 --> 00:30:14,820
initially whenever you were moving out

481
00:30:11,310 --> 00:30:16,470
less it would give this screen you spit

482
00:30:14,820 --> 00:30:19,980
out all the information about the tests

483
00:30:16,470 --> 00:30:26,700
and then it would carry on to the finish

484
00:30:19,980 --> 00:30:29,850
moving level bus firm our test suite you

485
00:30:26,700 --> 00:30:32,790
know we had run that during the video

486
00:30:29,850 --> 00:30:38,270
there and this is this is an example of

487
00:30:32,790 --> 00:30:41,670
the firmer test viable s by itself and

488
00:30:38,270 --> 00:30:42,420
that level when he run for more to test

489
00:30:41,670 --> 00:30:44,070
me by itself

490
00:30:42,420 --> 00:30:48,930
you can select individual tests to run

491
00:30:44,070 --> 00:30:52,530
or run all of them one of the one of the

492
00:30:48,930 --> 00:30:53,830
challenges especially with one modern

493
00:30:52,530 --> 00:30:55,480
analysis and

494
00:30:53,830 --> 00:30:58,600
depending on how you know the system you

495
00:30:55,480 --> 00:31:00,970
bigger is it wants to do a reboot test

496
00:30:58,600 --> 00:31:04,980
if you tell it to run all tests so it

497
00:31:00,970 --> 00:31:06,759
takes a very long time and if you

498
00:31:04,980 --> 00:31:11,289
obviously don't have the error system

499
00:31:06,759 --> 00:31:12,850
said to the order that that you want if

500
00:31:11,289 --> 00:31:14,529
you just do it one time override then

501
00:31:12,850 --> 00:31:16,809
it's not going to be able to continue on

502
00:31:14,529 --> 00:31:18,759
the test it will twist it or remove it

503
00:31:16,809 --> 00:31:22,779
if you don't catch it I'll just carry on

504
00:31:18,759 --> 00:31:25,119
loading the OS so it's so there are a

505
00:31:22,779 --> 00:31:29,049
bunch of tests that you can't on with

506
00:31:25,119 --> 00:31:32,408
the foot board test week and honestly

507
00:31:29,049 --> 00:31:36,399
how eat you also within the SS that you

508
00:31:32,409 --> 00:31:41,739
decided to build it yourself you can it

509
00:31:36,399 --> 00:31:44,908
uses bitbake since it is Yocto and and

510
00:31:41,739 --> 00:31:47,619
you can go in and modify the recipes for

511
00:31:44,909 --> 00:31:50,499
lamar test suite that he wanted to have

512
00:31:47,619 --> 00:31:52,480
it run different tests and that just

513
00:31:50,499 --> 00:31:56,230
would require you to then compile

514
00:31:52,480 --> 00:32:01,480
everything yourself and it does support

515
00:31:56,230 --> 00:32:04,269
or a it does identify bios PDF i

516
00:32:01,480 --> 00:32:08,350
the errors there's over 50 different

517
00:32:04,269 --> 00:32:13,419
tests and it can execute either with

518
00:32:08,350 --> 00:32:17,260
analytics the libel s by itself or and

519
00:32:13,419 --> 00:32:20,710
and there are some integers of Avoyelles

520
00:32:17,260 --> 00:32:23,470
with chipset which from the verification

521
00:32:20,710 --> 00:32:27,039
standpoint is very nice because instead

522
00:32:23,470 --> 00:32:31,120
of relying just on your chip SEC or just

523
00:32:27,039 --> 00:32:32,649
on just on for more tests week that you

524
00:32:31,120 --> 00:32:36,969
are able to then you know do that

525
00:32:32,649 --> 00:32:38,709
comparison and it's that all you don't

526
00:32:36,970 --> 00:32:42,659
even have to a Warner ability or just

527
00:32:38,710 --> 00:32:42,659
one that popped up as a false positive

528
00:32:43,110 --> 00:32:50,189
so the kernel efi warnings like I said

529
00:32:46,330 --> 00:32:54,639
it's a shell script I just analyzes the

530
00:32:50,190 --> 00:32:58,769
message buffer and it will look for

531
00:32:54,639 --> 00:32:58,769
kernel messages that may indicate

532
00:33:02,670 --> 00:33:12,990
so any CTL I couldn't talk about you you

533
00:33:09,810 --> 00:33:16,350
can create destroying namespace and do

534
00:33:12,990 --> 00:33:18,030
other reconfiguration obviously it is a

535
00:33:16,350 --> 00:33:20,669
very powerful tool if you run it by

536
00:33:18,030 --> 00:33:22,860
yourself or by itself

537
00:33:20,670 --> 00:33:25,890
aim and start to turn around with that

538
00:33:22,860 --> 00:33:29,520
stuff but the the level s basically is

539
00:33:25,890 --> 00:33:31,620
just using it they have scripts built-in

540
00:33:29,520 --> 00:33:36,840
that that check the security

541
00:33:31,620 --> 00:33:41,070
configuration of the non-volatile dim

542
00:33:36,840 --> 00:33:44,449
and so that's like I said I've not been

543
00:33:41,070 --> 00:33:46,560
brave enough to try to do any and

544
00:33:44,450 --> 00:33:51,510
creating and destroying the namespaces

545
00:33:46,560 --> 00:33:56,480
myself but it definitely it seems like

546
00:33:51,510 --> 00:34:00,450
it's a great tool to check configuration

547
00:33:56,480 --> 00:34:03,000
okay so this is just basically the

548
00:34:00,450 --> 00:34:07,110
screen that pops up when it's executing

549
00:34:03,000 --> 00:34:09,469
and just gives you a very basic screen

550
00:34:07,110 --> 00:34:12,929
and it tells you what test is running

551
00:34:09,469 --> 00:34:15,719
and then when it's finished it'll tell

552
00:34:12,929 --> 00:34:19,040
you basically how many tests rain so in

553
00:34:15,719 --> 00:34:19,040
this case it reckons seven

554
00:34:19,699 --> 00:34:27,770
tests of which 97 past 28054 worst gift

555
00:34:25,159 --> 00:34:32,569
and there were also 11 mornings and so

556
00:34:27,770 --> 00:34:36,409
so in this case this was from the from

557
00:34:32,569 --> 00:34:40,839
the USB boot and so whenever you write

558
00:34:36,409 --> 00:34:42,980
the level s it will have the level s

559
00:34:40,839 --> 00:34:45,319
partition on us being that then it'll

560
00:34:42,980 --> 00:34:54,159
also write a persistent partition to

561
00:34:45,319 --> 00:34:58,790
write every all the information yes yes

562
00:34:54,159 --> 00:35:01,160
yep yep and and that's one thing that I

563
00:34:58,790 --> 00:35:04,869
didn't mention about the net boot you

564
00:35:01,160 --> 00:35:08,720
can set it up so that way you can

565
00:35:04,869 --> 00:35:12,619
basically do a net camp when it's

566
00:35:08,720 --> 00:35:15,770
running and get the outputs that way as

567
00:35:12,619 --> 00:35:18,079
well again it's something that is

568
00:35:15,770 --> 00:35:21,910
possible I have not been fortunate

569
00:35:18,079 --> 00:35:21,910
enough to do so

570
00:35:25,300 --> 00:35:31,590
all right so I went a little bit faster

571
00:35:28,420 --> 00:35:31,590
than I should have like this

572
00:35:32,710 --> 00:35:38,740
kind of wrapping things up there's

573
00:35:35,730 --> 00:35:41,500
obviously we we have computer ships and

574
00:35:38,740 --> 00:35:44,919
everything even though even though this

575
00:35:41,500 --> 00:35:48,010
set of tests is really specific to

576
00:35:44,920 --> 00:35:50,830
intelligent there's obviously importance

577
00:35:48,010 --> 00:35:54,160
in testing firmware famine and testing

578
00:35:50,830 --> 00:35:58,569
that low level memory of devices since

579
00:35:54,160 --> 00:36:03,609
it's not being incorrectly gained a

580
00:35:58,570 --> 00:36:06,220
great deal ship second we first talked

581
00:36:03,610 --> 00:36:13,060
cloud was very very very powerful tool

582
00:36:06,220 --> 00:36:14,919
you can break your advice and and you

583
00:36:13,060 --> 00:36:17,380
can leverage those utilities groups to

584
00:36:14,920 --> 00:36:19,539
dig deeper if

585
00:36:17,380 --> 00:36:22,479
if I would've known I had a little extra

586
00:36:19,539 --> 00:36:24,940
time I would have gone through some of

587
00:36:22,479 --> 00:36:28,689
those utility scripts to show how you

588
00:36:24,940 --> 00:36:30,039
can dump that information and just gain

589
00:36:28,690 --> 00:36:37,959
a little bit more information about

590
00:36:30,039 --> 00:36:40,569
systems and then level s it does provide

591
00:36:37,959 --> 00:36:42,879
a great deal of tools to test your

592
00:36:40,569 --> 00:36:46,509
system at the hardware level and can't

593
00:36:42,880 --> 00:36:48,849
be used to fix loop which is very nice

594
00:36:46,509 --> 00:36:50,019
if you're doing it obviously on like a

595
00:36:48,849 --> 00:36:54,190
production line or something like that

596
00:36:50,019 --> 00:36:55,868
or you're just trying to do the testing

597
00:36:54,190 --> 00:36:57,160
at a more efficient manner so that way

598
00:36:55,869 --> 00:36:59,739
you don't have to draw to plug a USB

599
00:36:57,160 --> 00:37:02,920
stick to every computer that you're

600
00:36:59,739 --> 00:37:06,959
testing and it does provide a very nice

601
00:37:02,920 --> 00:37:06,959
report of the findings

602
00:37:08,820 --> 00:37:15,200
any questions going once

603
00:37:15,560 --> 00:37:18,730
thank you guys

604
00:37:21,080 --> 00:37:24,210
[Applause]

