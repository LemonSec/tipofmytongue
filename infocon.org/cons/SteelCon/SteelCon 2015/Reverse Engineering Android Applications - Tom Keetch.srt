1
00:00:09,230 --> 00:00:14,190
that we're ready to start

2
00:00:14,190 --> 00:00:16,669
ok

3
00:00:16,670 --> 00:00:22,430
quick beginning in terms of
understanding whether you're coming from

4
00:00:22,430 --> 00:00:32,070
so who has got a full-time job in
security ok but half and how many are

5
00:00:32,070 --> 00:00:42,820
students and hobbyists for that society
groups ok ok ok you got a fairly even

6
00:00:42,820 --> 00:00:49,110
split in terms of people's backgrounds
and hopefully this to kind of have

7
00:00:49,110 --> 00:00:55,739
something for a change so few thing some
bitter taste like fourth gets more

8
00:00:55,739 --> 00:00:59,599
complex to later on okay so this
presentation is about reverse

9
00:00:59,600 --> 00:01:05,339
engineering Android applications and
deliberately reverse engineering opus

10
00:01:05,339 --> 00:01:11,170
cases applications so applications where
the author of the distributor explicite

11
00:01:11,170 --> 00:01:16,830
doesn't want us to understand the
internal workings of the application I

12
00:01:16,830 --> 00:01:21,390
just couldn't stay for self so I'ma
independent software security consultant

13
00:01:21,390 --> 00:01:30,430
from London and provides a range of
software security services from my SDLC

14
00:01:30,430 --> 00:01:36,640
consulting and locked in design reviews
32 lot one black folks assessments and

15
00:01:36,640 --> 00:01:47,009
as part of that I do reverse engineering
presentation can be broken into three

16
00:01:47,009 --> 00:01:50,920
areas so I go to a quick introduction to
talk

17
00:01:50,920 --> 00:01:55,109
touch on the topic of you know what is
reverse engineering was the person look

18
00:01:55,109 --> 00:02:01,079
like and a very quick primer on Android
application execution

19
00:02:01,079 --> 00:02:06,139
runtime the second part will talk about
the standard

20
00:02:06,140 --> 00:02:12,520
Android vs engineering tools and my
standard techniques that people use and

21
00:02:12,520 --> 00:02:15,790
if you've done many Android app reverse
engineering before them that will be

22
00:02:15,790 --> 00:02:21,150
fairly straightforward than with third
party going to reverse engineer

23
00:02:21,150 --> 00:02:26,920
obfuscated applications and you know
what kinds of analysis so we can do on

24
00:02:26,920 --> 00:02:34,589
those applications and with conclusions
reverse engineer reverse engineering

25
00:02:34,590 --> 00:02:39,239
building something want to go through
that process in essentially in reverse

26
00:02:39,239 --> 00:02:44,709
its name reverse engineering but
specific we want to decompose a complex

27
00:02:44,709 --> 00:02:51,560
system into its constituent parts and
understand how the whole health system

28
00:02:51,560 --> 00:02:57,510
as a whole works and also how individual
parts work and we might also want to

29
00:02:57,510 --> 00:03:04,910
understand how that product wireless
systems constructed in the case of

30
00:03:04,910 --> 00:03:12,290
software unlike some other things we
might want to reverse engineer we've got

31
00:03:12,290 --> 00:03:17,980
a full description and how that program
operates which is the object code or

32
00:03:17,980 --> 00:03:22,470
that the compiled code and we want to go
from that compiled code to

33
00:03:22,470 --> 00:03:28,920
understandable you know and understand
the description of the program and this

34
00:03:28,920 --> 00:03:33,690
there are two groups of techniques
static analysis we're looking at the

35
00:03:33,690 --> 00:03:37,890
operation on desk without running out
and run some analysis where we're

36
00:03:37,890 --> 00:03:44,048
running in may be modified execution
environment since we're talking about

37
00:03:44,049 --> 00:03:48,670
obfuscate and applications are going to
focus on the former retraction static

38
00:03:48,670 --> 00:03:55,109
analysis reverse engineering the whole
variety of things that we can take as

39
00:03:55,110 --> 00:04:00,490
input into the process the first and
most obvious from Kampala doctor

40
00:04:00,490 --> 00:04:08,770
and program behavior would become the
main impact but lots of other things

41
00:04:08,770 --> 00:04:14,500
that we can use to give us clues to help
us live form hypotheses about how the

42
00:04:14,500 --> 00:04:20,110
system works by includes things like
configuration files any static resources

43
00:04:20,110 --> 00:04:25,740
if we're reverse engineering a client
which is a normal case for Android

44
00:04:25,740 --> 00:04:30,640
application then the server will also
give us ideas as to how the Klein

45
00:04:30,640 --> 00:04:38,930
operates as public docking station
stands are we can look at similar

46
00:04:38,930 --> 00:04:43,720
systems so we're looking at this and
end-to-end encryption client we might

47
00:04:43,720 --> 00:04:47,940
look at so I open source implementations
look at the design patterns that they

48
00:04:47,940 --> 00:04:52,670
use and try and spot the same you sleep
patterns in the system that we're

49
00:04:52,670 --> 00:04:55,540
actually trying to reverse engineer

50
00:04:55,540 --> 00:05:02,640
open source code and pattern and the
week we can use to 30 and give us give

51
00:05:02,640 --> 00:05:10,000
more clues probably less of this kind of
clue less obvious clues we can either

52
00:05:10,000 --> 00:05:14,760
things like company structures and
history if we look at a large company in

53
00:05:14,760 --> 00:05:19,140
the history of acquisitions and mergers
that can actually give us clues how the

54
00:05:19,140 --> 00:05:26,330
software has been constructed and how
it's evolved over time and also things

55
00:05:26,330 --> 00:05:34,050
like documents and develop a LinkedIn
pages so static and dynamic analysis

56
00:05:34,050 --> 00:05:39,400
with you want to combine both of these
approaches static that's especially

57
00:05:39,400 --> 00:05:43,739
useful if there is any mechanism which
is trying to prevent dynamic analysis

58
00:05:43,740 --> 00:05:49,670
you might start with that analysis
modify the application so that we can

59
00:05:49,670 --> 00:05:55,600
analyze and runtime

60
00:05:55,600 --> 00:06:00,860
and likewise dynamic analysis might be
better if the application is heavily

61
00:06:00,860 --> 00:06:07,760
obfuscated

62
00:06:07,760 --> 00:06:12,750
so when applying the switch with typical
looking at now which has been heavily

63
00:06:12,750 --> 00:06:16,450
office stated but we are where we need
to know the specific implementation

64
00:06:16,450 --> 00:06:24,450
details of all the protocol of something
and we can't get the knowledge that we

65
00:06:24,450 --> 00:06:31,960
need through dynamic analysis to give a
very quick 34 on the legal aspects

66
00:06:31,960 --> 00:06:33,289
reverse engineering

67
00:06:33,290 --> 00:06:39,030
touch knees with enormous claims that I
am not a lawyer but ultimately reverse

68
00:06:39,030 --> 00:06:43,159
engineering is not illegal but there are
a whole variety of things that could

69
00:06:43,160 --> 00:06:49,250
curtail your ability to conduct reverse
engineering the most common ones

70
00:06:49,250 --> 00:06:53,750
especially for hobbyists might be like
10 G's license agreement but there is a

71
00:06:53,750 --> 00:07:05,130
whole raft of relevant typically I don't
say too much because this is an area I

72
00:07:05,130 --> 00:07:12,710
specialize in but I think things are
copyright protected expression of of a

73
00:07:12,710 --> 00:07:16,330
computer program typically things like
source code and if you have compiled

74
00:07:16,330 --> 00:07:23,340
object code then that's typically not
covered by copyright and also this is

75
00:07:23,340 --> 00:07:27,820
also a changing field so even though
people are worried about the Western

76
00:07:27,820 --> 00:07:30,469
arrangement in terms of like

77
00:07:30,470 --> 00:07:33,600
distribution of exploits and
exploitation techniques

78
00:07:33,600 --> 00:07:37,840
there's a lot of overlap prove us and
you know as his country implements the

79
00:07:37,840 --> 00:07:43,200
law differently you could see the
reverse engineering is the fact that but

80
00:07:43,200 --> 00:07:45,890
there's a there's a long well
established history of reverse

81
00:07:45,890 --> 00:07:49,440
engineering people reverse-engineer
physical products and trying to make

82
00:07:49,440 --> 00:07:54,010
competitors and you have the right
through the engineer something is seen

83
00:07:54,010 --> 00:08:06,730
as spurring innovation talk about the
201 times when you think of anger that

84
00:08:06,730 --> 00:08:12,300
patients you think of the open-source
Android project but there are whole

85
00:08:12,300 --> 00:08:17,140
their number of variations on this so
i've seen

86
00:08:17,140 --> 00:08:22,909
Google players got a lot more lockdown
and controlled ecosystem you have to

87
00:08:22,910 --> 00:08:29,570
agree to certain things in order to use
the caissons new platform be able to

88
00:08:29,570 --> 00:08:35,500
access Google Play services but then
other occasions with fewer native

89
00:08:35,500 --> 00:08:42,020
applications of have implemented and i
angry players based on the open source

90
00:08:42,020 --> 00:08:46,500
code so they can run they can take
advantage of that she's number of

91
00:08:46,500 --> 00:08:49,960
occasions in the Google Play Store and
run them on their own

92
00:08:49,960 --> 00:08:56,710
applications includes operations like
black return and it's selfish and I

93
00:08:56,710 --> 00:09:03,000
heard some recent talk about Windows 10
swing Android apps on the desktop more

94
00:09:03,000 --> 00:09:07,800
details about that for the first time
during runtime chip for the first

95
00:09:07,800 --> 00:09:13,760
Android is cool down heck named after a
small fishing town in in Iceland and

96
00:09:13,760 --> 00:09:20,410
it's essentially very very similar to
turn our rules and Java Virtual Machine

97
00:09:20,410 --> 00:09:28,240
so users and applications virtual
machine that will take like cars for a

98
00:09:28,240 --> 00:09:35,470
virtual CPU and compile them out wrong
time on the fly into into code for the

99
00:09:35,470 --> 00:09:43,420
actual native process of whether that be
on x86 MIPS so what what the dow from

100
00:09:43,420 --> 00:09:50,030
time does is it optimizes this virtual
machine rather changes the configuration

101
00:09:50,030 --> 00:09:56,189
of the controversial ICP makes it into
something that's more appropriate for

102
00:09:56,190 --> 00:10:02,410
mobile devices because I enjoy his own
only targeting mobile devices at this

103
00:10:02,410 --> 00:10:09,589
point and so when you install an Android
application creation package will be a

104
00:10:09,590 --> 00:10:10,950
text file or down

105
00:10:10,950 --> 00:10:16,030
excusable I when you install the
application that can be optimized for

106
00:10:16,030 --> 00:10:21,230
your specific device for your particular
version of the operating system and this

107
00:10:21,230 --> 00:10:28,200
allows you to maintain compatibility
across a wide range of devices but still

108
00:10:28,200 --> 00:10:35,840
be added per device optimization more
recently the shipping

109
00:10:35,840 --> 00:10:41,350
chipped in urging the kick but it's now
the default runtime

110
00:10:41,350 --> 00:10:45,740
in lollipop instead of taking the jet
approached when you install the

111
00:10:45,740 --> 00:10:51,700
application actually gets compiled into
native code so it's a very different

112
00:10:51,700 --> 00:10:56,700
very different very different
architecture but common to both

113
00:10:56,700 --> 00:11:03,450
approaches you've got a sexy Java source
code you know noted modules compiled

114
00:11:03,450 --> 00:11:09,100
into an application package and the
composer Java code is taken from the

115
00:11:09,100 --> 00:11:14,270
converted into a text into the decks far
and the different runtimes winter that

116
00:11:14,270 --> 00:11:17,819
text differently so down Vick will
optimize it but it will still be

117
00:11:17,820 --> 00:11:24,260
essentially the same thing on the other
hand who converted into a native

118
00:11:24,260 --> 00:11:32,130
executable typically in that format ok
so I'm now gonna kind of lessor the

119
00:11:32,130 --> 00:11:37,340
basic process that you would follow in
order to take apart an Android

120
00:11:37,340 --> 00:11:44,960
application and see how it works so
first we need and they became we need we

121
00:11:44,960 --> 00:11:52,810
need that static code to decompile can
do this using their online web

122
00:11:52,810 --> 00:11:58,630
applications that will download the apk
from Google Play for you browser

123
00:11:58,630 --> 00:12:05,210
plug-ins for attending this might be
better you can actually just copy the

124
00:12:05,210 --> 00:12:11,470
apk off of the device the advantages of
that is that you can you can be sure

125
00:12:11,470 --> 00:12:15,880
that the statute the statute announces
that you're doing is the same as that

126
00:12:15,880 --> 00:12:21,830
are you looking out on the device turned
him down at the OK from a dodgy Chinese

127
00:12:21,830 --> 00:12:24,870
UPS Store but that's maybe not

128
00:12:24,870 --> 00:12:29,980
advisable for the obvious reasons

129
00:12:29,980 --> 00:12:36,980
Sony apk files the distribution unit for
Android is essentially an inside the zip

130
00:12:36,980 --> 00:12:44,390
file number of folders so the assets are
specific files which are referenced by

131
00:12:44,390 --> 00:12:52,650
the developer like sicily olin's open
hello doc txt you gotta live with which

132
00:12:52,650 --> 00:12:59,910
can live which contains any like native
code is loaded by the operation that

133
00:12:59,910 --> 00:13:08,040
could maybe you implement functionality
that is appropriate for Java the matter

134
00:13:08,040 --> 00:13:13,969
in boulder is essentially a folder
containing the digital signatures for

135
00:13:13,970 --> 00:13:20,560
application this is what you need to
verify the tampered with deals signed by

136
00:13:20,560 --> 00:13:26,859
the expected author and so on and then
there's a resourceful witches again

137
00:13:26,860 --> 00:13:32,300
assets but there aren't explicitly been
referenced by the application then they

138
00:13:32,300 --> 00:13:38,170
generated as part of the alleged that
Android like you I generation so

139
00:13:38,170 --> 00:13:47,240
powerful so the SDK kind of a ranges
these files in your path to explain how

140
00:13:47,240 --> 00:13:52,839
the screen is laid out and into bed
organs and then there's through the

141
00:13:52,839 --> 00:13:59,570
normally three files in a thriller fast
the annual benefit to the contract

142
00:13:59,570 --> 00:14:04,209
between the application of the operating
system that says you know how you expect

143
00:14:04,209 --> 00:14:10,050
about to be used and how it interacts
with the operating system I classes the

144
00:14:10,050 --> 00:14:17,209
object code so that's what we need to
compile if you wanna get back to

145
00:14:17,209 --> 00:14:23,670
understanding the individual operations
that their presence doing and there was

146
00:14:23,670 --> 00:14:30,199
also a file that's kind of a single
conglomerate of smaller resources like

147
00:14:30,199 --> 00:14:37,240
strings that you don't have put in their
individual individual files and so when

148
00:14:37,240 --> 00:14:41,279
we got when we reverse engineering to
follow to get back also we want to get

149
00:14:41,279 --> 00:14:47,639
back to sue under style or some other
understand representation of the program

150
00:14:47,639 --> 00:14:54,829
to start of an apk we extracted expired
code we can then disassembled that code

151
00:14:54,829 --> 00:15:00,368
for something called smalley disassembly
you can see that on the right and then

152
00:15:00,369 --> 00:15:05,069
from small you can decompile introduced
Java source code you can see that in the

153
00:15:05,069 --> 00:15:13,759
left of the song that completely
different code and then and then we need

154
00:15:13,759 --> 00:15:23,759
like human analysis to get from that too
on this line of code so 11 so that you

155
00:15:23,759 --> 00:15:31,369
may have heard of which is extremely
easy scored a PK 'til allows you to do

156
00:15:31,369 --> 00:15:38,410
is lay between your APK and smiley
disassembling and so it kind of packages

157
00:15:38,410 --> 00:15:42,889
a few different operations together and
because of that hired some of what's

158
00:15:42,889 --> 00:15:45,020
happening under

159
00:15:45,020 --> 00:15:51,290
under the covers which means that if
you're trying to reverse engineer a more

160
00:15:51,290 --> 00:16:00,180
complicated and that may be why doesn't
want apk 'til to get unpacking then you

161
00:16:00,180 --> 00:16:05,229
know this process model work so it's
better to break the process down into

162
00:16:05,230 --> 00:16:15,430
smaller sub stages so with one operation
we can be fatal to decode and then pull

163
00:16:15,430 --> 00:16:21,390
up the next byte code and then
separately use backs Mali which is like

164
00:16:21,390 --> 00:16:27,100
a smiley disassembler to go from the
computer readable die by code into the

165
00:16:27,100 --> 00:16:35,830
human readable but not yet human
understandable smalley disassembly back

166
00:16:35,830 --> 00:16:45,130
so instead of Max Mara you smiling and
then there's sort of a PK to decode we

167
00:16:45,130 --> 00:16:51,230
can use apk field

168
00:16:51,230 --> 00:16:59,210
however because because of the machine
is so closely race the Java Virtual

169
00:16:59,210 --> 00:17:04,930
Machine what someone realized is that if
you can try and translate your text code

170
00:17:04,930 --> 00:17:13,310
into essentially code for the JVM Java
archive then we can use existing Java

171
00:17:13,310 --> 00:17:18,819
reverse engineering tools to today
compile the code and so by using text to

172
00:17:18,819 --> 00:17:24,300
jar and JAD doing which is a popular
free java Decompiler we can actually

173
00:17:24,300 --> 00:17:27,730
produce Java source code

174
00:17:27,730 --> 00:17:35,840
up until now the Israel Winfrey Souls is
actually a commercial tool which kind of

175
00:17:35,840 --> 00:17:42,230
interests whole process could agenda
compiler but she quite expensive

176
00:17:42,230 --> 00:17:47,800
commercial and they recently changed the
licensing so if you had bought as a few

177
00:17:47,800 --> 00:17:56,659
weeks ago then it's gonna be a lot more
expensive going forward too much this

178
00:17:56,660 --> 00:18:03,200
presentation but quickly or modify the
apk then the best the best way to do

179
00:18:03,200 --> 00:18:08,480
that is to modify the smiley disassembly
and then you can use the Android SDK

180
00:18:08,480 --> 00:18:17,870
tools to re-sign the application and if
your phone is in development mode you

181
00:18:17,870 --> 00:18:24,939
can use like a developer signing Glee
which again ships of the apk and then

182
00:18:24,940 --> 00:18:28,370
the modified code within successfully
run on

183
00:18:28,370 --> 00:18:39,620
on a device installed using ADB so this
point hopefully we've got a complete

184
00:18:39,620 --> 00:18:44,189
Java listing of the code with like
essentially the same code that the

185
00:18:44,190 --> 00:18:50,240
developer roads and you know this is a
serious risk for software development

186
00:18:50,240 --> 00:18:54,900
companies because if you spend months of
developer time all the years of the

187
00:18:54,900 --> 00:19:00,110
Labour time in a writing code you don't
seem interested gotta take your and

188
00:19:00,110 --> 00:19:03,979
deliverable and then converted back in
the source code and maybe still your

189
00:19:03,980 --> 00:19:10,679
ideas are still your implementation so
this is where Java APIs cases companies

190
00:19:10,679 --> 00:19:18,220
room so we weren't obviously we want to
the river but some people want to

191
00:19:18,220 --> 00:19:26,490
reverse some people hired the
implementation of the applications and

192
00:19:26,490 --> 00:19:34,500
so the obvious cases this is a logo of a
Finnish metal band called obfuscation I

193
00:19:34,500 --> 00:19:42,870
don't know if anyone can read that other
back and so we can look at office cases

194
00:19:42,870 --> 00:19:48,209
application much lying I metal band logo
is if you can read the Java code

195
00:19:48,210 --> 00:20:02,110
obfuscator is not good enough questions
questions are now going to get into the

196
00:20:02,110 --> 00:20:05,750
meat of things how do we go about
analyzing applications which have been

197
00:20:05,750 --> 00:20:16,040
obfuscated what techniques used than
what we're used to overcome this came

198
00:20:16,040 --> 00:20:18,759
from an application that was looking

199
00:20:18,759 --> 00:20:25,479
IntelliJ degree and I think she again
totally all seemingly totally unreadable

200
00:20:25,479 --> 00:20:31,429
code every every every class variable
every field has been raining into a

201
00:20:31,429 --> 00:20:38,089
single character unique code name so
we've got classes you know like Hindi

202
00:20:38,089 --> 00:20:45,158
characters and all sorts of semantically
meaningless so if you want to do static

203
00:20:45,159 --> 00:20:52,449
analysis we need to come up with some
techniques to go to translate large

204
00:20:52,449 --> 00:20:58,709
amounts of however it's not it's not all
bad and things that just can't be

205
00:20:58,709 --> 00:21:04,469
overstated said you got a primitive type
that is used by the down for sale I can

206
00:21:04,469 --> 00:21:10,779
in or or a string or you've got an API
function which being provided by the OS

207
00:21:10,779 --> 00:21:16,489
those things can easily be overstated
could be trying renal function that

208
00:21:16,489 --> 00:21:22,779
you're calling his path Android SDK then
your your application is no longer

209
00:21:22,779 --> 00:21:29,359
compatible with that version of Android
likewise any API's which are exporting

210
00:21:29,359 --> 00:21:34,079
they can't be understated alloys you
break integrations with other people's

211
00:21:34,079 --> 00:21:40,709
code and any code that relies on Java
reflections a code that makes decisions

212
00:21:40,709 --> 00:21:49,049
based on the structure of other Java
code so even though the code has been

213
00:21:49,049 --> 00:21:53,609
obvious cases we can still make some
very expensive some parts of the

214
00:21:53,609 --> 00:22:01,218
application so we can see the encryption
and then it's forming a string based on

215
00:22:01,219 --> 00:22:07,520
the encrypt to balance but for example
don't have any very well

216
00:22:07,520 --> 00:22:13,590
so we have to go from API calls and kind
of work backwards and figure out what

217
00:22:13,590 --> 00:22:22,360
does this variable action do what you
know how does it change the system so 11

218
00:22:22,360 --> 00:22:27,820
one thing that really doesn't change
when you open sky and application is the

219
00:22:27,820 --> 00:22:34,889
structure of classes in Java each each
class can only inherit from a single

220
00:22:34,890 --> 00:22:44,580
parent class on my things and C++ with
support multiple inheritance and as a

221
00:22:44,580 --> 00:22:50,800
result we can kind of the inheritance
graph and make reasoned like the

222
00:22:50,800 --> 00:22:58,040
doctrines about specific classes so from
this class is an object is not derived

223
00:22:58,040 --> 00:23:03,850
from the more complex class and then
we've got to supply us with that so that

224
00:23:03,850 --> 00:23:13,689
tells a little bit but not very much
about what those classes actually if

225
00:23:13,690 --> 00:23:18,920
class if instead of class A or instead
of having a hand-operated name is

226
00:23:18,920 --> 00:23:25,820
actually a social class which is part of
the Android SDK satellite service then

227
00:23:25,820 --> 00:23:32,200
we can reason that Class B and Class C
of both types of Android service we can

228
00:23:32,200 --> 00:23:34,290
apply this same

229
00:23:34,290 --> 00:23:39,490
instead of looking inheritance reluctant
can look at the information of

230
00:23:39,490 --> 00:23:46,140
interfaces so in this case class
implements Serializable in defense so we

231
00:23:46,140 --> 00:23:52,170
can reason classes ab&c rule
serializable objects may be some kind of

232
00:23:52,170 --> 00:24:02,270
application data storage it can start
getting very harry's you got in a lot of

233
00:24:02,270 --> 00:24:08,720
interfaces you know lots of subclasses
so we may want to prioritize which

234
00:24:08,720 --> 00:24:14,120
interfaces which parent classes we're
most interested in as reverse engineer

235
00:24:14,120 --> 00:24:29,520
so we can say say is some object and
Class B is some other some other type of

236
00:24:29,520 --> 00:24:36,530
you but we're maybe we care more about
Andover interface and read the more

237
00:24:36,530 --> 00:24:42,840
generic interface at the top of the more
specific a classroom spirit and

238
00:24:42,840 --> 00:24:47,879
interface is the more tells us about the
function of the specialization of an

239
00:24:47,880 --> 00:24:54,390
object and the other thing is you can't
really escape and angered manifest

240
00:24:54,390 --> 00:24:59,050
because it's a contract for any
application and the rest of the system

241
00:24:59,050 --> 00:25:05,970
it has to be readable by the source file
format and that was a fine form as the

242
00:25:05,970 --> 00:25:13,630
Android XML formats like a bidirectional
former senior issues the SDK tools to

243
00:25:13,630 --> 00:25:20,850
unpack their and inside the essentially
defines a lot of the attack surface of

244
00:25:20,850 --> 00:25:26,639
the application so we'll tell you which
system events the application is in a

245
00:25:26,640 --> 00:25:32,200
listening out for in terms of registered
broadcast bocinas it can tell you bounce

246
00:25:32,200 --> 00:25:37,149
activities and if these are public then
the essentially attack surface exposed

247
00:25:37,149 --> 00:25:39,110
to other applications on the device

248
00:25:39,110 --> 00:25:46,549
tells about content stores in terms of
which I'm going through which Android

249
00:25:46,549 --> 00:25:48,860
called content providers

250
00:25:48,860 --> 00:25:54,969
whether or not be publicly exposed or
not if they define amount of rest then

251
00:25:54,970 --> 00:26:00,389
you know that information is is kind of
disclose the reverse engineer and

252
00:26:00,389 --> 00:26:03,219
likewise we can know about the
Commission's

253
00:26:03,220 --> 00:26:09,360
defiant there's no way to get that kind
of information and lasting services

254
00:26:09,360 --> 00:26:14,850
which are essentially portions of code
which can run in the background so even

255
00:26:14,850 --> 00:26:20,090
when applications main UI isn't running
coach can still run the device if you

256
00:26:20,090 --> 00:26:29,720
got soul like a VoIP client service will
listen out for incoming calls

257
00:26:29,720 --> 00:26:36,850
yes if we tried manually go through and
understand the code will focus on the

258
00:26:36,850 --> 00:26:41,449
areas that shit which are most of
interest to us she trying to a security

259
00:26:41,450 --> 00:26:47,270
assessment than any classes which
related to external inputs and I become

260
00:26:47,270 --> 00:26:50,400
kind of candidate points for us to start
to do some reverse engineering

261
00:26:50,400 --> 00:26:57,220
especially when a patient is heavily
office cases look for other things so

262
00:26:57,220 --> 00:27:03,630
many references to virtually any kind of
light large arrays of random looking

263
00:27:03,630 --> 00:27:10,520
data or reason become obvious later any
kind of use of the reflection API

264
00:27:10,520 --> 00:27:19,379
just get this method or very close and
so there are some common of the stations

265
00:27:19,380 --> 00:27:23,550
use of CH office cases to do things
slightly differently is gonna come from

266
00:27:23,550 --> 00:27:28,970
a different features and its gonna
infamous treats and different ways these

267
00:27:28,970 --> 00:27:35,540
are some common and really they they
split into two groups so those other

268
00:27:35,540 --> 00:27:41,060
improve improved performance or in a
basic don't degrade performance and I

269
00:27:41,060 --> 00:27:45,090
wasn't a great performance so the ones
that maintains a little before the

270
00:27:45,090 --> 00:27:49,570
likely to enabled by default and then
whether or not you use the more invasive

271
00:27:49,570 --> 00:27:57,689
of discussions depend on how important
application performance is so scary

272
00:27:57,690 --> 00:28:03,530
things are removed at cave which is very
simple optimization as we saw you can

273
00:28:03,530 --> 00:28:09,820
use arena in classes so methods and
fields and variables so they no longer

274
00:28:09,820 --> 00:28:16,179
have semantically useful names not going
kind which can only because eliminating

275
00:28:16,180 --> 00:28:20,960
is also removed and then its sale to any
kind of life peephole optimization

276
00:28:20,960 --> 00:28:22,970
optimizations in the same way

277
00:28:22,970 --> 00:28:29,679
optimized expertise does so if you
multiply and divide by power of to you

278
00:28:29,679 --> 00:28:35,419
then you can tell that to shift or those
kind of things that makes the coast

279
00:28:35,419 --> 00:28:40,980
romantically more difficult to
understand more interesting of the

280
00:28:40,980 --> 00:28:46,610
discussions that degrade performance of
things i stream corruption reverse aging

281
00:28:46,610 --> 00:28:52,590
11 is like runs strings on the
application and ensuring corruption

282
00:28:52,590 --> 00:28:58,289
which you remove any human readable
strings from from the application we can

283
00:28:58,289 --> 00:29:02,809
use both harding reflection and I
thought about those two methods in more

284
00:29:02,809 --> 00:29:11,580
detail those assets which are loaded
from NASA photo in the apk we can choose

285
00:29:11,580 --> 00:29:19,168
to encrypt close so that they can
actually read the contents you control

286
00:29:19,169 --> 00:29:26,760
flow operations so change the order and
the kind of arrangement of how

287
00:29:26,760 --> 00:29:33,780
instructions executed well as
maintaining an equivalent an equivalent

288
00:29:33,780 --> 00:29:40,710
program we can also throwing junk junk
code that maybe has completely

289
00:29:40,710 --> 00:29:47,270
superfluous are references 22 encryption
or other things that might miss leader

290
00:29:47,270 --> 00:29:56,770
of a data flow operations so instead of
maybe moving on from one region to

291
00:29:56,770 --> 00:30:02,110
another we can use most operations to to
swap the two registers

292
00:30:02,110 --> 00:30:08,209
just anything makes it harder to reason
about what what the code is really doing

293
00:30:08,210 --> 00:30:16,700
or why it's doing sorry first song and
talk about Dex cards string corruption

294
00:30:16,700 --> 00:30:20,789
quickly and shoes proton disco

295
00:30:20,789 --> 00:30:23,539
ProGuard ships for FREE with Angela K

296
00:30:23,539 --> 00:30:33,850
and it's kind of both standards apk
optimizing and so it's the one is

297
00:30:33,850 --> 00:30:41,959
recommended by Google and this is very
that's got her mother say more but as

298
00:30:41,960 --> 00:30:50,700
you know has some of those more advanced
application features so the same code so

299
00:30:50,700 --> 00:30:55,559
I can see that it's opening up on that
as i said i cant see the name of the

300
00:30:55,559 --> 00:30:59,178
country the following the acid which
would be normal for this type of code

301
00:30:59,179 --> 00:31:05,039
instead it's doing some references and
somehow lookup table and it's kind of

302
00:31:05,039 --> 00:31:10,509
taking three of these arguments from
then presumably that returns a string so

303
00:31:10,509 --> 00:31:18,139
this this lookup function is 2003 values
into a strength so-called understand the

304
00:31:18,139 --> 00:31:23,488
strengths quickly we dive into the
specifics of this particular function

305
00:31:23,489 --> 00:31:30,539
and on reversing understand what it's
doing what it's doing and why it's doing

306
00:31:30,539 --> 00:31:42,070
exercises gonna be the code itself isn't
particularly important but what is

307
00:31:42,070 --> 00:31:45,590
important is kind of the logic that you
go through to reason about what the code

308
00:31:45,590 --> 00:31:52,389
does I can do that step by step and take
what appears to be a reasonably hard to

309
00:31:52,389 --> 00:31:57,928
understand code to make turned into
something useful but we can avoid all of

310
00:31:57,929 --> 00:32:02,979
this by just copying the code
understanding and then you know in

311
00:32:02,979 --> 00:32:07,830
putting the the arguments from the code
and now just had us back to decrypt

312
00:32:07,830 --> 00:32:14,178
strings so this is more of a useful
exercise if you want to automate the

313
00:32:14,179 --> 00:32:23,070
process do not copy and pasting code so
we have a lookup function and it takes

314
00:32:23,070 --> 00:32:34,289
three art three instruments and returns
the first thing we can reasonably is

315
00:32:34,289 --> 00:32:39,749
returning a string so you know that's
the values that we actually care about

316
00:32:39,749 --> 00:32:45,619
where does it come from well it comes
from the alcohol is like a but just

317
00:32:45,619 --> 00:32:52,379
arrived by ok so we can rename that by
through a two-out so it's not as clear

318
00:32:52,379 --> 00:32:56,809
as to what the purpose of that is and we
can see the way we're copying bally's

319
00:32:56,809 --> 00:33:04,099
into this buffer in some kind of the
loop in this loop were referencing in an

320
00:33:04,099 --> 00:33:06,779
integer

321
00:33:06,779 --> 00:33:14,169
incremental in every iteration and its
compared to some other number before it

322
00:33:14,169 --> 00:33:24,340
exits the new patterns and say that
ensures I salute counter to I had

323
00:33:24,340 --> 00:33:27,889
reached that we're adding semantic
information about what the Kodak she

324
00:33:27,889 --> 00:33:34,789
does it's not an integer its counter
likewise we compare this loop counter to

325
00:33:34,789 --> 00:33:42,029
some other value before we return
strength so you can say well we can also

326
00:33:42,029 --> 00:33:47,169
see that she's done by an allocation of
ITER 83 say well this is this is a

327
00:33:47,169 --> 00:33:53,840
length to Karina bring rename that

328
00:33:53,840 --> 00:33:58,709
then we can see that we've got this
second or so sorry that the first

329
00:33:58,710 --> 00:34:05,799
argument is being hostile by input into
this despite the rain which we know is

330
00:34:05,799 --> 00:34:10,109
it later turned to a strange so all this
by that was actually be a character

331
00:34:10,109 --> 00:34:20,799
that's an argument so like is another
one of Iraq and then we have another

332
00:34:20,800 --> 00:34:27,119
index which is being increment on every
three of the loop but it isn't it doesnt

333
00:34:27,119 --> 00:34:32,409
bear any relation to the length of the
Dubai to write if you see the bottom

334
00:34:32,409 --> 00:34:38,200
line is actually being used as an index
into how lookup table so it is a table

335
00:34:38,199 --> 00:34:43,830
of seemingly random later K

336
00:34:43,830 --> 00:34:56,879
just for the sake of argument so slowly
building up so we we have renamed a free

337
00:34:56,879 --> 00:35:03,529
variables three arguments and when a
position to say what this function

338
00:35:03,530 --> 00:35:10,640
actually does so in each iteration of
the of the new this character values

339
00:35:10,640 --> 00:35:16,549
being updated and it's being updated by
subtracting from constant value in this

340
00:35:16,550 --> 00:35:28,530
case 29 and then you're adding your new
character so this is really a

341
00:35:28,530 --> 00:35:33,520
differential key value

342
00:35:33,520 --> 00:35:40,009
in in summer we go we have arrived by
what it really describes is the

343
00:35:40,010 --> 00:35:46,650
differences between consecutive
characters in a string our first

344
00:35:46,650 --> 00:35:51,230
argument says a starting characters not
necessarily first correction strength

345
00:35:51,230 --> 00:35:57,830
the second one is where we start looking
ok so how are taking us up K from this

346
00:35:57,830 --> 00:36:04,690
disarray and the third one is is the
length so if you have stopped by UCB a

347
00:36:04,690 --> 00:36:11,250
stock index of 103 we can come over and
say well being plus you know that

348
00:36:11,250 --> 00:36:16,960
difference is see we've got saying the
next difference monastery we get my

349
00:36:16,960 --> 00:36:22,400
classes next difference gives us a take-
so we turned these three inches and

350
00:36:22,400 --> 00:36:30,510
around array into a strength so an
interesting puzzle be well if you can

351
00:36:30,510 --> 00:36:38,560
see these big blocks of of random bytes
Camille I it's kinda like brute force

352
00:36:38,560 --> 00:36:45,270
the key and work out and actually I
think you probably can't do that without

353
00:36:45,270 --> 00:36:51,530
the compiling the code as a result
constants that change I think with with

354
00:36:51,530 --> 00:36:55,870
each successive compilation of the code
you need to extract those other

355
00:36:55,870 --> 00:37:09,580
constants maybe the next to talk about
was causing so if you make a call to an

356
00:37:09,580 --> 00:37:10,299
API

357
00:37:10,300 --> 00:37:16,610
encryption API allows reverse engineer
focusing on that big codes I will look

358
00:37:16,610 --> 00:37:22,100
at how the appt goes encryption but if
you do that then you can statically

359
00:37:22,100 --> 00:37:23,799
two-time very easily

360
00:37:23,800 --> 00:37:28,600
you know those encryption API's are
being used so we're around this is to

361
00:37:28,600 --> 00:37:34,700
encrypt and I wanna funk encrypt the
name of the function you want to call

362
00:37:34,700 --> 00:37:41,230
and then used and then use it back and
then use reflection API is to do the

363
00:37:41,230 --> 00:37:56,330
actual AP article statically you don't
know that is being cold so everything

364
00:37:56,330 --> 00:38:03,470
around her now has opened based around
Java bytecode but its own a quick

365
00:38:03,470 --> 00:38:11,970
because you can have both inside an
Android application so inside your your

366
00:38:11,970 --> 00:38:17,100
lip directory there were further stoked
arches which referred to the different

367
00:38:17,100 --> 00:38:26,940
hardware platforms so like x-ray to see
the different variants of arms and then

368
00:38:26,940 --> 00:38:32,770
you would use the Java JNI or the Java
native interface to send you marshall

369
00:38:32,770 --> 00:38:34,570
calls between the two

370
00:38:34,570 --> 00:38:38,990
between the two between the two
languages and so this will typically

371
00:38:38,990 --> 00:38:45,330
start with a system that load load
library call and the no-load delivery

372
00:38:45,330 --> 00:38:45,990
from the

373
00:38:45,990 --> 00:38:55,930
the from the lib directory if you ever
use idea a pro Scott pretty good support

374
00:38:55,930 --> 00:39:02,819
from the sinus stuff it can understand
when when nicole is being exposed J&I

375
00:39:02,820 --> 00:39:10,170
J&I call has a couple of I standard
arguments that helps helps in the

376
00:39:10,170 --> 00:39:14,369
martian between the two languages to the
first argument is the JNI end

377
00:39:14,369 --> 00:39:20,010
essentially an object that allowed to do
things like make calls and Java p.m. and

378
00:39:20,010 --> 00:39:27,170
I i like a Java object like a Java
objects and it's kind of a kind of

379
00:39:27,170 --> 00:39:33,740
doesn't have a list of kind of all the
the cooler translation for second

380
00:39:33,740 --> 00:39:40,339
argument is as essential points to OJ
object so if you call a method on a

381
00:39:40,340 --> 00:39:45,340
class then this will give your pointing
to the instance of that class inside the

382
00:39:45,340 --> 00:39:49,480
JVM which otherwise you will have access
to from native code and Visual Studio

383
00:39:49,480 --> 00:40:01,400
crazy passing of a runtime state
following irony or any arguments

384
00:40:01,400 --> 00:40:07,070
so lead with some quick conclusions

385
00:40:07,070 --> 00:40:11,180
office craters are really good at
slowing down there is there such

386
00:40:11,180 --> 00:40:16,819
tradeoffs that you make in terms of kind
of applications speed and a number of

387
00:40:16,820 --> 00:40:23,310
other stations that you want but you
have a situation similar TV where

388
00:40:23,310 --> 00:40:29,110
there's kind of an arms race happening
with real people that want to stop the

389
00:40:29,110 --> 00:40:34,560
account of being read by people who want
to read and this applies not only to

390
00:40:34,560 --> 00:40:41,190
legitimate applications from the App
Store but also also empowered to the

391
00:40:41,190 --> 00:40:49,960
these these tactics so these techniques
are applicable for me the most important

392
00:40:49,960 --> 00:40:56,630
thing to point out line on non-security
people is the office cases don't don't

393
00:40:56,630 --> 00:41:01,190
on the whole don't fix vulnerabilities
they just make them hard and refined

394
00:41:01,190 --> 00:41:09,020
using static analysis techniques so if
you doing an assessment of a financial

395
00:41:09,020 --> 00:41:13,820
application I would highly recommend you
you try and do the assessment with

396
00:41:13,820 --> 00:41:18,850
source code if your end goal is to try
and secure the application as best we

397
00:41:18,850 --> 00:41:26,730
can in this presentation I'll just try
to give you some jumping off point so if

398
00:41:26,730 --> 00:41:30,310
you're interested in this topic you can
go and learn some more is only so much

399
00:41:30,310 --> 00:41:36,480
you can cover an hour presentation to
hear some books I recommend the mobile

400
00:41:36,480 --> 00:41:42,360
workers handbook is like a good
introduction Android security internals

401
00:41:42,360 --> 00:41:48,580
you know it's a great book if you wanna
go a lot deeper into it describes how

402
00:41:48,580 --> 00:41:54,779
kind of the platform security mechanisms
well yeah and the sites and very very

403
00:41:54,780 --> 00:42:01,270
in-depth discussion about those things
like hard really hard way back key

404
00:42:01,270 --> 00:42:07,550
storage and then finally work which is
nothing whatsoever at school reverse

405
00:42:07,550 --> 00:42:13,440
engineering by priests time and this is
just a great results in general if you

406
00:42:13,440 --> 00:42:19,470
like just in reverse engineering the
focus is definitely on Thursday I love

407
00:42:19,470 --> 00:42:30,029
the principles and the ideas are
applicable everyone thinks all the tools

408
00:42:30,030 --> 00:42:34,050
and stuff I mentioned that there are a
couple of tools which I i didnt

409
00:42:34,050 --> 00:42:39,140
company's presentation by Sri tools so
he was already is like a general reverse

410
00:42:39,140 --> 00:42:47,129
engineering framework the house Android
function on three and regards it's also

411
00:42:47,130 --> 00:43:05,590
free and working on the the compiler so
yeah if anyone has any questions

412
00:43:05,590 --> 00:43:41,100
reverse engineering is useful in both
situations questions okay great well as

413
00:43:41,100 --> 00:43:43,870
smaller government the bar later on but
thank you very much

