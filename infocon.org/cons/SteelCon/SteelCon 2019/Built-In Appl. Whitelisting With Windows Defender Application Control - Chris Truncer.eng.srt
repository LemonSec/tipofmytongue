1
00:00:03,699 --> 00:00:08,349
this talk is about built-in application

2
00:00:06,700 --> 00:00:10,660
whitelisting with Windows Defender

3
00:00:08,349 --> 00:00:11,799
application control Cheers

4
00:00:10,660 --> 00:00:13,030
do a lot of people here how many people

5
00:00:11,799 --> 00:00:16,209
have like application whitelisting

6
00:00:13,030 --> 00:00:18,610
deployed in your environment anyone one

7
00:00:16,209 --> 00:00:20,920
is that the raise your hand to sweet

8
00:00:18,610 --> 00:00:21,550
have you guys played with defender or

9
00:00:20,920 --> 00:00:23,260
excuse me

10
00:00:21,550 --> 00:00:25,300
device guard or Windows Defender

11
00:00:23,260 --> 00:00:27,400
application control

12
00:00:25,300 --> 00:00:31,960
do you guys regret having half

13
00:00:27,400 --> 00:00:33,579
whitelisting deploy no well main reason

14
00:00:31,960 --> 00:00:36,760
I always like to ask that before the

15
00:00:33,579 --> 00:00:37,870
soft or I talked about this because if

16
00:00:36,760 --> 00:00:39,370
you're in my workshop can heard this

17
00:00:37,870 --> 00:00:40,928
feely I said I love app while listening

18
00:00:39,370 --> 00:00:42,730
I think it's probably the best defensive

19
00:00:40,929 --> 00:00:45,339
technologies out there that can be used

20
00:00:42,730 --> 00:00:47,140
in environment and it's a lot of work up

21
00:00:45,339 --> 00:00:49,300
front clearly designing policies

22
00:00:47,140 --> 00:00:50,649
creating effective rules making sure

23
00:00:49,300 --> 00:00:53,078
people can still do their job

24
00:00:50,649 --> 00:00:55,839
but I've never met an organization as

25
00:00:53,079 --> 00:00:58,120
after they spent that time to deploy it

26
00:00:55,839 --> 00:01:01,899
that that's hated or regretted doing so

27
00:00:58,120 --> 00:01:03,909
there's always curious my name is Chris

28
00:01:01,899 --> 00:01:05,860
hunter I'm the co-founder of the

29
00:01:03,909 --> 00:01:08,560
security company called 14 North out of

30
00:01:05,860 --> 00:01:11,530
Colorado in the US I am our offensive

31
00:01:08,560 --> 00:01:13,030
security and Red Team Lead and I work on

32
00:01:11,530 --> 00:01:15,100
a variety of different open-source

33
00:01:13,030 --> 00:01:17,350
projects there's like bail eyewitness

34
00:01:15,100 --> 00:01:21,360
and one of the tools of will demo today

35
00:01:17,350 --> 00:01:24,850
is lynnium so what's this talk about

36
00:01:21,360 --> 00:01:27,430
this talk is about a w doc what is it so

37
00:01:24,850 --> 00:01:29,439
w doc is a Windows Defender application

38
00:01:27,430 --> 00:01:31,659
controlled if you've heard about this

39
00:01:29,439 --> 00:01:33,850
referred to before it used to go by

40
00:01:31,659 --> 00:01:35,200
another name called device guard which

41
00:01:33,850 --> 00:01:36,759
is what you'll probably still hear me

42
00:01:35,200 --> 00:01:38,649
refer to it throughout here because I'm

43
00:01:36,759 --> 00:01:40,780
so used to saying that we'll talk about

44
00:01:38,649 --> 00:01:42,130
code integrity policies these are

45
00:01:40,780 --> 00:01:44,350
basically the rules that are going to be

46
00:01:42,130 --> 00:01:46,630
enforced on within your environment on

47
00:01:44,350 --> 00:01:48,820
computers that either just that make a

48
00:01:46,630 --> 00:01:51,189
decision if an application is trusted

49
00:01:48,820 --> 00:01:54,008
and allowed to run or not and look at

50
00:01:51,189 --> 00:01:55,839
how W dot can be deployed we're gonna

51
00:01:54,009 --> 00:01:57,579
talk about modifying and enforcing

52
00:01:55,840 --> 00:01:58,869
different code integrity policy so how

53
00:01:57,579 --> 00:02:01,210
do we change the rules let's have been

54
00:01:58,869 --> 00:02:03,520
deployed we're to look at how an

55
00:02:01,210 --> 00:02:05,499
attacker could target Windows Defender

56
00:02:03,520 --> 00:02:07,658
application control of them happy to

57
00:02:05,499 --> 00:02:10,030
answer any questions I really love

58
00:02:07,659 --> 00:02:11,860
giving this talk because my I'm more of

59
00:02:10,030 --> 00:02:13,000
an attacker by just background and

60
00:02:11,860 --> 00:02:15,849
everything that I've done and this is

61
00:02:13,000 --> 00:02:16,360
really kind of my first or only semi

62
00:02:15,849 --> 00:02:18,190
depends

63
00:02:16,360 --> 00:02:20,260
talk but I like talking about the salaah

64
00:02:18,190 --> 00:02:23,440
because I believe in this sort of

65
00:02:20,260 --> 00:02:26,109
technology all right so Windows Defender

66
00:02:23,440 --> 00:02:28,210
application control what is it well it's

67
00:02:26,110 --> 00:02:31,480
a defensive technology that's built into

68
00:02:28,210 --> 00:02:35,260
Windows 10 and Server 2016 by default

69
00:02:31,480 --> 00:02:37,660
it's Windows 10 enterprise but it's

70
00:02:35,260 --> 00:02:39,820
there and the nicest part about it is it

71
00:02:37,660 --> 00:02:42,370
is completely free so if you already

72
00:02:39,820 --> 00:02:45,250
have 10 and Server 2016 in your

73
00:02:42,370 --> 00:02:48,940
environment you can utilize W DAC and

74
00:02:45,250 --> 00:02:50,590
have it start protecting your systems it

75
00:02:48,940 --> 00:02:52,540
can be thought of as as an application

76
00:02:50,590 --> 00:02:54,670
whitelisting solution plus some

77
00:02:52,540 --> 00:02:56,920
additional benefits and it's a move away

78
00:02:54,670 --> 00:02:59,109
from antivirus where we don't have this

79
00:02:56,920 --> 00:03:01,420
antivirus that just scans for bad stuff

80
00:02:59,110 --> 00:03:04,840
and if it doesn't find it it's good with

81
00:03:01,420 --> 00:03:06,970
this we only trust what we I'll say that

82
00:03:04,840 --> 00:03:09,340
we trust and if it's not an application

83
00:03:06,970 --> 00:03:11,350
that is trusted or a digital signature

84
00:03:09,340 --> 00:03:12,790
possibly that we don't trust that that

85
00:03:11,350 --> 00:03:17,109
is trusted then it's not allowed to

86
00:03:12,790 --> 00:03:19,630
execute so W doc is more than just a

87
00:03:17,110 --> 00:03:21,250
plotter it can really so AppLocker

88
00:03:19,630 --> 00:03:23,549
generally people usually usually think

89
00:03:21,250 --> 00:03:25,540
within like user land different

90
00:03:23,550 --> 00:03:27,670
directories that rules are enforced upon

91
00:03:25,540 --> 00:03:30,239
that allow either applications or

92
00:03:27,670 --> 00:03:32,890
different libraries possibly loaded

93
00:03:30,239 --> 00:03:35,350
Windows Defender application control can

94
00:03:32,890 --> 00:03:37,420
do all of that plus it also hooks into

95
00:03:35,350 --> 00:03:40,620
like what we call kernel mode code

96
00:03:37,420 --> 00:03:43,089
integrity where you can enforce

97
00:03:40,620 --> 00:03:45,160
different rules that either allow or

98
00:03:43,090 --> 00:03:47,950
denying drivers on your system to be

99
00:03:45,160 --> 00:03:50,700
loaded as well and I'll show an example

100
00:03:47,950 --> 00:03:54,220
of when that's gone bad on the important

101
00:03:50,700 --> 00:03:56,260
the biggest thing about w DAC is almost

102
00:03:54,220 --> 00:03:58,989
all of its rules that in forces on a

103
00:03:56,260 --> 00:04:01,720
system are based on digital signatures

104
00:03:58,989 --> 00:04:04,269
so digital signatures are really

105
00:04:01,720 --> 00:04:06,220
important but Windows 10 everything's

106
00:04:04,269 --> 00:04:08,220
supposed to be digitally signed at least

107
00:04:06,220 --> 00:04:11,890
at the kernel level currently drivers

108
00:04:08,220 --> 00:04:14,799
like I mentioned it is heavily relied

109
00:04:11,890 --> 00:04:16,120
heavily relies on digital signatures but

110
00:04:14,799 --> 00:04:18,608
will haven't if you're an environment

111
00:04:16,120 --> 00:04:19,810
where you can't digitally sign or like

112
00:04:18,608 --> 00:04:22,900
an application is running that's

113
00:04:19,810 --> 00:04:24,550
required by your employees that is not

114
00:04:22,900 --> 00:04:25,989
signed at all well you can create

115
00:04:24,550 --> 00:04:28,060
something that's called a catalog file

116
00:04:25,990 --> 00:04:29,550
and the only difference for the issue is

117
00:04:28,060 --> 00:04:31,530
catalog file is

118
00:04:29,550 --> 00:04:33,210
every time that application is updated

119
00:04:31,530 --> 00:04:35,179
in the future down the road you have to

120
00:04:33,210 --> 00:04:37,739
regenerate a new catalog file and

121
00:04:35,180 --> 00:04:40,530
regenerate a new set of rules to allow

122
00:04:37,740 --> 00:04:42,840
that program to run so the nice thing

123
00:04:40,530 --> 00:04:45,239
with this though is if you do your trust

124
00:04:42,840 --> 00:04:47,729
decisions and your rules based on

125
00:04:45,240 --> 00:04:49,020
digital signatures let's say you trust

126
00:04:47,730 --> 00:04:52,890
everything signed by Google

127
00:04:49,020 --> 00:04:55,349
anytime chrome let's say is updated your

128
00:04:52,890 --> 00:04:57,870
rules account for that and automatically

129
00:04:55,350 --> 00:05:00,780
trust it assuming that Google Chrome is

130
00:04:57,870 --> 00:05:05,010
still being signed by Google's root CA

131
00:05:00,780 --> 00:05:07,229
that you that you trust so code

132
00:05:05,010 --> 00:05:10,320
integrity policies like I mentioned are

133
00:05:07,230 --> 00:05:13,050
contained the rules that are enforced on

134
00:05:10,320 --> 00:05:16,349
your system the operating system so

135
00:05:13,050 --> 00:05:19,320
Windows itself enforces these rules to

136
00:05:16,350 --> 00:05:21,630
make or to allow an application to run

137
00:05:19,320 --> 00:05:24,930
or a driver or a diol to be loaded or

138
00:05:21,630 --> 00:05:26,190
not because it's not trusted so it the

139
00:05:24,930 --> 00:05:27,540
other thing that it can do is if you

140
00:05:26,190 --> 00:05:29,640
don't have this in what's called

141
00:05:27,540 --> 00:05:32,670
enforcement mode it can just silently

142
00:05:29,640 --> 00:05:36,539
sit there and log and audit what's being

143
00:05:32,670 --> 00:05:38,100
loaded so you may have rules that you

144
00:05:36,540 --> 00:05:39,870
want to deploy within your environment

145
00:05:38,100 --> 00:05:42,030
but you don't know how mature the Aria

146
00:05:39,870 --> 00:05:43,980
and you want to see how well do these

147
00:05:42,030 --> 00:05:45,960
work in this current configuration if I

148
00:05:43,980 --> 00:05:47,790
were to deploy it domain-wide well you

149
00:05:45,960 --> 00:05:50,580
can just deploy something your your

150
00:05:47,790 --> 00:05:52,710
rules in an audit mode and it'll create

151
00:05:50,580 --> 00:05:54,300
event log events that you can monitor to

152
00:05:52,710 --> 00:05:56,099
see okay maybe I did miss something that

153
00:05:54,300 --> 00:05:59,100
I need to update my rule set before I

154
00:05:56,100 --> 00:06:02,400
allow and this like rules to be enforced

155
00:05:59,100 --> 00:06:04,470
to meanwhile code integrity policies you

156
00:06:02,400 --> 00:06:05,400
can kind of think of are not really a

157
00:06:04,470 --> 00:06:08,670
blacklist

158
00:06:05,400 --> 00:06:11,880
it's a whitelist only but that's kind of

159
00:06:08,670 --> 00:06:16,020
a lie where it yeah we can actually kind

160
00:06:11,880 --> 00:06:18,960
of get around stating I don't want this

161
00:06:16,020 --> 00:06:20,370
to run by making a rule in a very

162
00:06:18,960 --> 00:06:21,840
specific way which we'll show in just a

163
00:06:20,370 --> 00:06:23,220
second you can kind of think this though

164
00:06:21,840 --> 00:06:24,359
is more of a whitelist plus plus if

165
00:06:23,220 --> 00:06:26,550
that's really what it's designed for

166
00:06:24,360 --> 00:06:30,570
where you only state what's trusted

167
00:06:26,550 --> 00:06:32,280
versus don't trust something so the

168
00:06:30,570 --> 00:06:34,800
other thing that Windows Defender

169
00:06:32,280 --> 00:06:36,510
application control does is it enforces

170
00:06:34,800 --> 00:06:38,430
something called PowerShell constrained

171
00:06:36,510 --> 00:06:40,560
language mode here my workshop yesterday

172
00:06:38,430 --> 00:06:42,750
and you heard me talking about this but

173
00:06:40,560 --> 00:06:43,449
it people heard with her like play with

174
00:06:42,750 --> 00:06:45,370
or enforce

175
00:06:43,449 --> 00:06:47,919
I tried to code or do anything in

176
00:06:45,370 --> 00:06:51,599
constraint language mode it's a very

177
00:06:47,919 --> 00:06:54,758
locked down version of PowerShell if you

178
00:06:51,599 --> 00:06:56,080
if you remember like Windows RT like the

179
00:06:54,759 --> 00:06:58,360
operating system that was designed to go

180
00:06:56,080 --> 00:06:59,889
like the original Windows tablet that

181
00:06:58,360 --> 00:07:02,889
was the version of PowerShell that was

182
00:06:59,889 --> 00:07:05,559
coupled with it those designed to run on

183
00:07:02,889 --> 00:07:08,589
that tablet and what it is is supposed

184
00:07:05,559 --> 00:07:10,629
to be an administration only version of

185
00:07:08,589 --> 00:07:12,159
PowerShell where you can run different

186
00:07:10,629 --> 00:07:15,550
powershell commandlets that lets you

187
00:07:12,159 --> 00:07:18,520
administer systems such as modifying AV

188
00:07:15,550 --> 00:07:20,650
configurations just basic system

189
00:07:18,520 --> 00:07:21,818
administration tasks the other thing

190
00:07:20,650 --> 00:07:25,029
though the constraint language mode

191
00:07:21,819 --> 00:07:28,330
enforces is it only allows you to use a

192
00:07:25,029 --> 00:07:30,009
very specific data types and it has a

193
00:07:28,330 --> 00:07:34,060
whitelist of the data types that are

194
00:07:30,009 --> 00:07:35,680
allowed if then if let's say some

195
00:07:34,060 --> 00:07:39,189
PowerShell kamini are trying to run in

196
00:07:35,680 --> 00:07:43,149
any way operates with a non allowed or

197
00:07:39,189 --> 00:07:45,789
non trusted data type then it will fail

198
00:07:43,149 --> 00:07:48,370
so what does that look like so here's

199
00:07:45,789 --> 00:07:50,498
like some basic examples in this case

200
00:07:48,370 --> 00:07:52,599
we're just trying to perform a base64

201
00:07:50,499 --> 00:07:55,029
encoding of a string which seems very

202
00:07:52,599 --> 00:07:56,589
benign in this case we're just trying to

203
00:07:55,029 --> 00:07:59,529
do the square root of the number nine

204
00:07:56,589 --> 00:08:02,889
but it uses data types that aren't

205
00:07:59,529 --> 00:08:05,080
allowed and we cannot actually run these

206
00:08:02,889 --> 00:08:06,610
commands within a PowerShell constrain

207
00:08:05,080 --> 00:08:14,948
language mode it's just gonna be block

208
00:08:06,610 --> 00:08:16,689
yes now if you trust your scripts and

209
00:08:14,949 --> 00:08:20,589
you build it into your rule set you are

210
00:08:16,689 --> 00:08:22,060
allowed to do that yep sorry the

211
00:08:20,589 --> 00:08:24,520
question was can you sign a script and

212
00:08:22,060 --> 00:08:28,569
then use it and have full power shell

213
00:08:24,520 --> 00:08:30,909
access all right so I mentioned code

214
00:08:28,569 --> 00:08:32,139
integrity policies a couple times I know

215
00:08:30,909 --> 00:08:33,159
it's a little abstract without to show

216
00:08:32,139 --> 00:08:35,948
you like an image of what these look

217
00:08:33,159 --> 00:08:37,299
like the big thing is that code

218
00:08:35,948 --> 00:08:39,218
integrity policies like I mentioned are

219
00:08:37,299 --> 00:08:40,929
the rules that are actually enforced in

220
00:08:39,219 --> 00:08:42,849
your environment so you can kind of

221
00:08:40,929 --> 00:08:45,099
build your set of rules or your code

222
00:08:42,849 --> 00:08:46,209
integrity policy on a system and we'll

223
00:08:45,100 --> 00:08:48,910
talk about a couple different techniques

224
00:08:46,209 --> 00:08:51,910
do so and then deploy it within your

225
00:08:48,910 --> 00:08:54,430
environment the nicely the code

226
00:08:51,910 --> 00:08:56,589
integrity policies start as an XML file

227
00:08:54,430 --> 00:08:57,640
that's the easiest way it's kind of the

228
00:08:56,589 --> 00:08:59,920
semi-human read

229
00:08:57,640 --> 00:09:01,810
format where you can look at it see how

230
00:08:59,920 --> 00:09:03,579
it works what it looks like but then in

231
00:09:01,810 --> 00:09:05,560
order for Windows to actually use your

232
00:09:03,580 --> 00:09:07,270
code integrity policy like everything

233
00:09:05,560 --> 00:09:08,800
Windows it doesn't it wants it like some

234
00:09:07,270 --> 00:09:12,250
sort of a binary format that's easier

235
00:09:08,800 --> 00:09:15,760
for it to ingest so here's an example of

236
00:09:12,250 --> 00:09:17,740
what these rules look like so this is

237
00:09:15,760 --> 00:09:19,900
just at the very beginning but in this

238
00:09:17,740 --> 00:09:22,300
case we're have different rule sets so

239
00:09:19,900 --> 00:09:23,650
right now audit mode is actually enabled

240
00:09:22,300 --> 00:09:25,750
in this environment which means it's not

241
00:09:23,650 --> 00:09:27,870
actually enforcing the rules it's just

242
00:09:25,750 --> 00:09:30,520
going to be logging any sort of

243
00:09:27,870 --> 00:09:32,440
application that tries to run that

244
00:09:30,520 --> 00:09:34,600
wouldn't meet the rule set there's

245
00:09:32,440 --> 00:09:36,670
different advanced menus this is saying

246
00:09:34,600 --> 00:09:38,560
that user mode code integrity is on so

247
00:09:36,670 --> 00:09:41,410
it's monitoring user level applications

248
00:09:38,560 --> 00:09:44,020
that are running here's where I was

249
00:09:41,410 --> 00:09:46,420
talking about a way that you can kind of

250
00:09:44,020 --> 00:09:48,640
get around a blacklist so this is

251
00:09:46,420 --> 00:09:51,339
actually from Matt gray vers a github he

252
00:09:48,640 --> 00:09:54,280
has a list here's a github that contains

253
00:09:51,340 --> 00:09:55,930
rules to prevent applications that are

254
00:09:54,280 --> 00:09:58,569
known to allow application whitelisting

255
00:09:55,930 --> 00:10:01,630
bypasses from running on your system and

256
00:09:58,570 --> 00:10:03,310
the way that he does this is or you can

257
00:10:01,630 --> 00:10:04,930
see like so here's ms bill like this is

258
00:10:03,310 --> 00:10:08,560
an own application whitelisting bypass

259
00:10:04,930 --> 00:10:10,420
tool via windbag right here c DB b g

260
00:10:08,560 --> 00:10:12,819
info is actually susceptible to an

261
00:10:10,420 --> 00:10:15,160
application whitelisting bypass until a

262
00:10:12,820 --> 00:10:17,770
few versions ago and the way that these

263
00:10:15,160 --> 00:10:20,079
rules are set up is you can see right

264
00:10:17,770 --> 00:10:21,730
here this minimum file version is

265
00:10:20,080 --> 00:10:23,860
massive right six five five dot three

266
00:10:21,730 --> 00:10:26,260
five six at 5.30 five six five five dot

267
00:10:23,860 --> 00:10:28,420
three five and six five 5.35 and all of

268
00:10:26,260 --> 00:10:31,420
these are actually the same until we get

269
00:10:28,420 --> 00:10:33,790
down here into VG info and the way that

270
00:10:31,420 --> 00:10:36,339
these rules and what this basically says

271
00:10:33,790 --> 00:10:37,930
is you are not this is you're supposed

272
00:10:36,340 --> 00:10:41,140
to deny msbuild

273
00:10:37,930 --> 00:10:43,540
from running until it is surpassed this

274
00:10:41,140 --> 00:10:46,930
this six five 5.35 and so forth

275
00:10:43,540 --> 00:10:48,880
version well six this is the maximum

276
00:10:46,930 --> 00:10:51,189
file version that is allowable on a

277
00:10:48,880 --> 00:10:53,740
Windows system so this will never

278
00:10:51,190 --> 00:10:55,630
surpass this version therefore msbuild

279
00:10:53,740 --> 00:10:58,180
is always blocked so that that's kind of

280
00:10:55,630 --> 00:11:00,370
how we're getting around allowing or not

281
00:10:58,180 --> 00:11:02,680
allowing creating a blacklist of rules

282
00:11:00,370 --> 00:11:04,990
if you notice down here though BG info

283
00:11:02,680 --> 00:11:06,939
does not have that same version that is

284
00:11:04,990 --> 00:11:10,600
because it is after this version where

285
00:11:06,940 --> 00:11:11,550
the the patch was applied and they are

286
00:11:10,600 --> 00:11:14,430
no longer so

287
00:11:11,550 --> 00:11:16,589
to an application whitelisting bypass so

288
00:11:14,430 --> 00:11:18,329
this is actually allowing VG info

289
00:11:16,590 --> 00:11:20,460
assuming you are not running a version

290
00:11:18,330 --> 00:11:25,650
that is susceptible to an application

291
00:11:20,460 --> 00:11:27,900
whitelisting bypass here's kind of what

292
00:11:25,650 --> 00:11:30,930
I talked about again another image of an

293
00:11:27,900 --> 00:11:32,670
XML version of this code integrity

294
00:11:30,930 --> 00:11:35,040
policy again here showing like audit

295
00:11:32,670 --> 00:11:37,079
mode is enabled this doesn't have the

296
00:11:35,040 --> 00:11:39,990
different file rules in here that we

297
00:11:37,080 --> 00:11:41,760
just showed for this screenshot however

298
00:11:39,990 --> 00:11:43,200
it down here is where you can start to

299
00:11:41,760 --> 00:11:48,630
see it as unfortunately cut off a little

300
00:11:43,200 --> 00:11:50,640
bit the kodan the powershell commandlets

301
00:11:48,630 --> 00:11:54,390
are picking up the digital certificates

302
00:11:50,640 --> 00:11:56,550
that are allowed and trusted by you and

303
00:11:54,390 --> 00:11:58,770
this is creating a rule saying hey this

304
00:11:56,550 --> 00:12:01,890
specific pca certificate which is in

305
00:11:58,770 --> 00:12:03,600
Microsoft Windows production PC a 2011

306
00:12:01,890 --> 00:12:05,460
certificate is allowed to be on the

307
00:12:03,600 --> 00:12:08,040
system so what this means is basically

308
00:12:05,460 --> 00:12:13,560
any single application that's signed by

309
00:12:08,040 --> 00:12:15,750
this certificate is allowed to run so

310
00:12:13,560 --> 00:12:18,209
now that we kind of have an idea of what

311
00:12:15,750 --> 00:12:20,250
a code integrity policy is and what it

312
00:12:18,210 --> 00:12:23,100
looks like how do you go about creating

313
00:12:20,250 --> 00:12:25,040
one well the nice thing is that it's

314
00:12:23,100 --> 00:12:27,030
fairly easy to do so with PowerShell

315
00:12:25,040 --> 00:12:29,160
PowerShell has a couple different

316
00:12:27,030 --> 00:12:31,680
Commandant's that we can use to create

317
00:12:29,160 --> 00:12:33,420
this code integrity policy and basically

318
00:12:31,680 --> 00:12:36,540
a four of these will get us exactly what

319
00:12:33,420 --> 00:12:38,490
we need so the main one is going to be

320
00:12:36,540 --> 00:12:41,069
this on new CI policy or new code

321
00:12:38,490 --> 00:12:43,170
integrity policy this is go figure it

322
00:12:41,070 --> 00:12:46,910
scans your system increase a code

323
00:12:43,170 --> 00:12:48,990
integrity policy based on the different

324
00:12:46,910 --> 00:12:50,430
attributes and what you tell it to run

325
00:12:48,990 --> 00:12:54,480
different flag to your face is gonna

326
00:12:50,430 --> 00:12:57,930
provide it the convert from CI policy is

327
00:12:54,480 --> 00:12:59,760
a commandment that takes the XML rule

328
00:12:57,930 --> 00:13:01,890
set that I just showed you and it

329
00:12:59,760 --> 00:13:05,930
converts it into a binary format that

330
00:13:01,890 --> 00:13:09,030
windows can use set rule option

331
00:13:05,930 --> 00:13:10,739
specifies that allows you to change and

332
00:13:09,030 --> 00:13:13,890
set different rules within your code

333
00:13:10,740 --> 00:13:16,080
integrity policy so for example like

334
00:13:13,890 --> 00:13:19,560
back here we have audit mode is being

335
00:13:16,080 --> 00:13:23,640
enabled you can use and that's a rule we

336
00:13:19,560 --> 00:13:25,290
can use this set rule option to change

337
00:13:23,640 --> 00:13:27,029
that and do not allow

338
00:13:25,290 --> 00:13:31,230
which would mean that it's actually

339
00:13:27,029 --> 00:13:33,990
enforcing the rule set and finally we

340
00:13:31,230 --> 00:13:35,699
have merged CI policy merge CI policy is

341
00:13:33,990 --> 00:13:37,620
let's say you have two different rules

342
00:13:35,699 --> 00:13:39,149
like you have your initial one and then

343
00:13:37,620 --> 00:13:40,350
you have one that you have updated rules

344
00:13:39,149 --> 00:13:43,199
based off of what you may have missed

345
00:13:40,350 --> 00:13:45,329
you can use this command to merge these

346
00:13:43,199 --> 00:13:47,550
two different code integrity policies

347
00:13:45,329 --> 00:13:51,989
together so your rules and create one

348
00:13:47,550 --> 00:13:53,550
master one that's enforced so when it

349
00:13:51,990 --> 00:13:55,139
comes to creating code integrity

350
00:13:53,550 --> 00:13:56,939
policies there are two primary

351
00:13:55,139 --> 00:13:59,459
strategies that people seem to kind of

352
00:13:56,940 --> 00:14:02,130
fall out it could be to build a code

353
00:13:59,459 --> 00:14:04,560
integrity policy based on a gold image

354
00:14:02,130 --> 00:14:05,759
system so this is usually what will see

355
00:14:04,560 --> 00:14:07,680
an environment where application

356
00:14:05,759 --> 00:14:08,970
whitelisting is deployed and what people

357
00:14:07,680 --> 00:14:11,160
will do is you'll take a normal

358
00:14:08,970 --> 00:14:13,560
workstation you'll install the

359
00:14:11,160 --> 00:14:16,139
applications that an employee normally

360
00:14:13,560 --> 00:14:17,459
needs to run to do their job and then

361
00:14:16,139 --> 00:14:19,139
once they have everything installed that

362
00:14:17,459 --> 00:14:21,420
they need they'll perform some sort of

363
00:14:19,139 --> 00:14:24,209
scan or some sort of sweet and on that

364
00:14:21,420 --> 00:14:26,279
system and they'll base rules on what's

365
00:14:24,209 --> 00:14:28,550
allowed to run based on the applications

366
00:14:26,279 --> 00:14:31,740
that are currently on that system

367
00:14:28,550 --> 00:14:33,810
another method of doing it in matt

368
00:14:31,740 --> 00:14:35,250
graver kind of really talked about this

369
00:14:33,810 --> 00:14:36,420
and made blog post about it before

370
00:14:35,250 --> 00:14:39,120
seeing anyone else doing is kind of

371
00:14:36,420 --> 00:14:42,810
create a default deny all policy where

372
00:14:39,120 --> 00:14:44,220
he basically trusts he's installed I

373
00:14:42,810 --> 00:14:46,949
believe the applications that he needs

374
00:14:44,220 --> 00:14:49,350
on a system but trusts nothing on it and

375
00:14:46,949 --> 00:14:52,709
then will only run the applications that

376
00:14:49,350 --> 00:14:54,690
he needs and then as his programs run

377
00:14:52,709 --> 00:14:57,660
and everything's blocked he slowly adds

378
00:14:54,690 --> 00:14:59,220
rules in until everything is needed so

379
00:14:57,660 --> 00:15:03,329
let's dive into both of these strategies

380
00:14:59,220 --> 00:15:05,190
to can learn a little bit more so look

381
00:15:03,329 --> 00:15:07,380
at gold image policies well the first

382
00:15:05,190 --> 00:15:09,959
step on this is to install off all

383
00:15:07,380 --> 00:15:11,790
software that's needed to further system

384
00:15:09,959 --> 00:15:13,768
to create the rule set that you want

385
00:15:11,790 --> 00:15:15,930
right when you're creating the code

386
00:15:13,769 --> 00:15:17,939
integrity policy since all software is

387
00:15:15,930 --> 00:15:19,709
installed all of its going to be allowed

388
00:15:17,939 --> 00:15:21,540
to be trusted and allowed to run and

389
00:15:19,709 --> 00:15:23,670
that's again unless it's not signed in

390
00:15:21,540 --> 00:15:25,860
which case you need to create a catalog

391
00:15:23,670 --> 00:15:27,899
file and assuming that that's not an

392
00:15:25,860 --> 00:15:29,970
issue and everything in a perfect world

393
00:15:27,899 --> 00:15:32,339
is digitally signed if you run this

394
00:15:29,970 --> 00:15:34,230
command a new CI policy it will pick up

395
00:15:32,339 --> 00:15:36,000
everything that you need and you will be

396
00:15:34,230 --> 00:15:38,250
able to have like your rule set based

397
00:15:36,000 --> 00:15:39,150
off of your gold and your system let's

398
00:15:38,250 --> 00:15:46,160
take a look at

399
00:15:39,150 --> 00:15:46,160
how that one was like dude essential

400
00:15:58,700 --> 00:16:02,960
so basically all you're doing this is

401
00:16:00,140 --> 00:16:04,720
really the first card is very fast is

402
00:16:02,960 --> 00:16:07,670
we're starting PowerShell in

403
00:16:04,720 --> 00:16:10,250
administrative context and all you need

404
00:16:07,670 --> 00:16:12,229
to do is call this new CI policy so in

405
00:16:10,250 --> 00:16:14,150
this case I'm assuming but if everything

406
00:16:12,230 --> 00:16:16,610
that I need and want on this system and

407
00:16:14,150 --> 00:16:19,430
I want to scan this and create my rules

408
00:16:16,610 --> 00:16:21,830
again this will actually go ahead and

409
00:16:19,430 --> 00:16:23,150
create the rule set for me so they don't

410
00:16:21,830 --> 00:16:25,820
need to do it makes the type a lot

411
00:16:23,150 --> 00:16:28,160
easier I'll talk about what these are

412
00:16:25,820 --> 00:16:29,930
from flagging you'll click ok so when

413
00:16:28,160 --> 00:16:31,670
you create your code integrity policy

414
00:16:29,930 --> 00:16:32,689
this is probably the big this level it's

415
00:16:31,670 --> 00:16:35,599
probably one of the biggest decisions

416
00:16:32,690 --> 00:16:37,520
you'll need to make this is insane at

417
00:16:35,600 --> 00:16:40,010
what level do you want your rules to be

418
00:16:37,520 --> 00:16:41,930
created device device card Windows

419
00:16:40,010 --> 00:16:43,760
Defender application control has

420
00:16:41,930 --> 00:16:46,130
multiple different levels that you can

421
00:16:43,760 --> 00:16:48,830
enforce rules on you can enforce rules

422
00:16:46,130 --> 00:16:50,720
by a file hatch a lot of people usually

423
00:16:48,830 --> 00:16:54,020
will think that that's the most secure

424
00:16:50,720 --> 00:16:55,970
that it's an easy way to just only allow

425
00:16:54,020 --> 00:16:57,410
what's allowed to run the issue with

426
00:16:55,970 --> 00:16:59,990
that as I'm sure as everyone here knows

427
00:16:57,410 --> 00:17:01,730
it's the second that any application is

428
00:16:59,990 --> 00:17:04,370
updated in any way the hash is going to

429
00:17:01,730 --> 00:17:06,560
change once I have changes your rule set

430
00:17:04,369 --> 00:17:09,169
no longer applies and it would be not

431
00:17:06,560 --> 00:17:12,109
allowed to run in that case you need to

432
00:17:09,170 --> 00:17:13,940
create a new policy well that's easy for

433
00:17:12,109 --> 00:17:15,199
one office it scenarios when you're

434
00:17:13,940 --> 00:17:17,690
doing this in a lab but if you think in

435
00:17:15,200 --> 00:17:19,340
a domain or enterprise environment the

436
00:17:17,690 --> 00:17:22,160
management overhead that that would

437
00:17:19,339 --> 00:17:24,919
require is just not acceptable it would

438
00:17:22,160 --> 00:17:27,050
be a little bit too much so this is a

439
00:17:24,920 --> 00:17:27,920
the PC a certificate level so you can

440
00:17:27,050 --> 00:17:29,510
think of this is kind of like the

441
00:17:27,920 --> 00:17:31,850
highest certificate or a higher

442
00:17:29,510 --> 00:17:33,680
certificate and a certificate chain it's

443
00:17:31,850 --> 00:17:36,110
not the lowest level certificate and and

444
00:17:33,680 --> 00:17:38,030
when it comes to digital signatures this

445
00:17:36,110 --> 00:17:39,469
will go ahead and go through and pick up

446
00:17:38,030 --> 00:17:42,050
the digital signatures of any

447
00:17:39,470 --> 00:17:44,630
application that it can and it will

448
00:17:42,050 --> 00:17:48,200
create a rule allowing the signatures

449
00:17:44,630 --> 00:17:50,330
that it identifies so this is where the

450
00:17:48,200 --> 00:17:52,850
flexibility of device guard comes in as

451
00:17:50,330 --> 00:17:55,280
a little bit nice as a nice thing to be

452
00:17:52,850 --> 00:17:57,860
able to use because any time any

453
00:17:55,280 --> 00:17:59,540
application like I mentioned before is

454
00:17:57,860 --> 00:18:02,510
updated as long as it's digitally signed

455
00:17:59,540 --> 00:18:05,629
it's just trusted CC and you don't have

456
00:18:02,510 --> 00:18:08,030
to do anything else beyond that the user

457
00:18:05,630 --> 00:18:10,550
pease what this means is this going to

458
00:18:08,030 --> 00:18:12,320
scan user level applications if you

459
00:18:10,550 --> 00:18:14,570
don't have something like this set

460
00:18:12,320 --> 00:18:17,510
but it is only going to look at like

461
00:18:14,570 --> 00:18:19,189
kernel drivers and allow the drivers you

462
00:18:17,510 --> 00:18:20,780
already have installed on your system so

463
00:18:19,190 --> 00:18:22,790
if you want to actually enforce this in

464
00:18:20,780 --> 00:18:24,830
your environment and make sure like user

465
00:18:22,790 --> 00:18:26,899
land applications are have rules created

466
00:18:24,830 --> 00:18:31,909
for them then you need to specify this

467
00:18:26,900 --> 00:18:33,230
user pease flag after this I believe

468
00:18:31,910 --> 00:18:35,900
this is going to be the file path is

469
00:18:33,230 --> 00:18:39,020
just setting the output of where we want

470
00:18:35,900 --> 00:18:41,570
the XML file to go to yep so here we

471
00:18:39,020 --> 00:18:42,889
have like the initial scan dot XML this

472
00:18:41,570 --> 00:18:44,720
is pretty much if you want to start like

473
00:18:42,890 --> 00:18:46,340
a bare-bones like base if you're first

474
00:18:44,720 --> 00:18:48,560
learning how to create this like this is

475
00:18:46,340 --> 00:18:51,620
what I would do because it'll do a scan

476
00:18:48,560 --> 00:18:53,629
now this part this is it actually going

477
00:18:51,620 --> 00:18:55,550
through and scanning and your entire

478
00:18:53,630 --> 00:18:57,680
system it's looking at every single file

479
00:18:55,550 --> 00:18:59,570
and it's doing a lookup in this case to

480
00:18:57,680 --> 00:19:02,660
find the certificate that should be

481
00:18:59,570 --> 00:19:05,480
trusted the only issue with this is I've

482
00:19:02,660 --> 00:19:07,700
had to scan like on almost a clean

483
00:19:05,480 --> 00:19:10,250
system with with minimal applications

484
00:19:07,700 --> 00:19:13,400
installed doing this and it's taken like

485
00:19:10,250 --> 00:19:15,710
three days it is a ridiculous amount of

486
00:19:13,400 --> 00:19:17,150
time and it's because it's I actually

487
00:19:15,710 --> 00:19:18,440
talked to my graver about this why you

488
00:19:17,150 --> 00:19:20,780
thought this happening and he believes

489
00:19:18,440 --> 00:19:23,000
because and it makes sense that it's

490
00:19:20,780 --> 00:19:25,790
expensive from a computational like

491
00:19:23,000 --> 00:19:26,990
standpoint to consistently do lookups on

492
00:19:25,790 --> 00:19:29,750
signatures for every single application

493
00:19:26,990 --> 00:19:31,670
DLL driver that's on a system to make

494
00:19:29,750 --> 00:19:34,760
sure you have a certificate required to

495
00:19:31,670 --> 00:19:36,980
create the rule set so this could take a

496
00:19:34,760 --> 00:19:39,580
little bit of time just be aware of that

497
00:19:36,980 --> 00:19:39,580
if you're doing this

498
00:19:49,110 --> 00:19:54,729
so the only issue with this is if we're

499
00:19:52,629 --> 00:19:56,379
trying to create this gold image policy

500
00:19:54,730 --> 00:20:00,309
kind of like what we were just demoing

501
00:19:56,379 --> 00:20:02,408
there's an issue this gold image policy

502
00:20:00,309 --> 00:20:05,139
is gonna pick up all of these different

503
00:20:02,409 --> 00:20:06,610
windows application or Windows binaries

504
00:20:05,139 --> 00:20:08,439
that are susceptible to application

505
00:20:06,610 --> 00:20:10,449
whitelisting bypasses when everyone

506
00:20:08,440 --> 00:20:13,600
remembers like red just VR 30 to school

507
00:20:10,450 --> 00:20:15,549
they do from JC Smith well he actually

508
00:20:13,600 --> 00:20:18,279
found all of these msbuild install

509
00:20:15,549 --> 00:20:21,429
detail because we're doing that Godin

510
00:20:18,279 --> 00:20:23,289
gold image scan if we were to create our

511
00:20:21,429 --> 00:20:25,840
rules and of course it just like I just

512
00:20:23,289 --> 00:20:27,789
demoed then that's actually going to

513
00:20:25,840 --> 00:20:29,559
trust all these applications and you can

514
00:20:27,789 --> 00:20:32,200
just subvert your application

515
00:20:29,559 --> 00:20:36,269
whitelisting rules by leveraging one of

516
00:20:32,200 --> 00:20:39,279
these applications that for a bypass and

517
00:20:36,269 --> 00:20:42,370
that's what I just said let's get a

518
00:20:39,279 --> 00:20:43,990
default deny all policy this is

519
00:20:42,370 --> 00:20:45,758
basically like the polar opposite of

520
00:20:43,990 --> 00:20:48,580
what we just talked about this is going

521
00:20:45,759 --> 00:20:50,980
to just default deny everything running

522
00:20:48,580 --> 00:20:52,509
on a system there's the best way to kind

523
00:20:50,980 --> 00:20:54,669
of go this route if you wanted to test

524
00:20:52,509 --> 00:20:57,279
this is to use Windows Defender

525
00:20:54,669 --> 00:20:58,750
application control in audit mode and

526
00:20:57,279 --> 00:21:00,549
that's because when something's in audit

527
00:20:58,750 --> 00:21:02,649
mode like I mentioned before it's not

528
00:21:00,549 --> 00:21:04,870
going to actually enforce your rule set

529
00:21:02,649 --> 00:21:06,639
it's going to let every single thing run

530
00:21:04,870 --> 00:21:09,070
but if there is an application that

531
00:21:06,639 --> 00:21:10,629
would have been blocked that isn't

532
00:21:09,070 --> 00:21:13,450
because of an auto mode it'll generate

533
00:21:10,629 --> 00:21:16,240
an event log event and you can use that

534
00:21:13,450 --> 00:21:19,480
to create new rules based off of what

535
00:21:16,240 --> 00:21:20,740
you missed you're still going to install

536
00:21:19,480 --> 00:21:22,539
the programs that are needed for your

537
00:21:20,740 --> 00:21:25,179
work for your workstation to do your job

538
00:21:22,539 --> 00:21:27,460
because you want to generate rules for

539
00:21:25,179 --> 00:21:28,509
any application that's needed in order

540
00:21:27,460 --> 00:21:30,279
to get your work done because if you

541
00:21:28,509 --> 00:21:31,750
don't generate that event log offense

542
00:21:30,279 --> 00:21:34,779
for it then it would still be missed

543
00:21:31,750 --> 00:21:36,730
blocks so the nice thing is rather than

544
00:21:34,779 --> 00:21:38,769
blindly trust everything we're only

545
00:21:36,730 --> 00:21:40,570
going to trust what we absolutely need

546
00:21:38,769 --> 00:21:42,549
to get our work done if we're not

547
00:21:40,570 --> 00:21:43,178
running msbuild if you don't need to run

548
00:21:42,549 --> 00:21:46,389
msbuild

549
00:21:43,179 --> 00:21:48,220
or install YouTube or register VR 32 or

550
00:21:46,389 --> 00:21:51,158
any other susceptible application

551
00:21:48,220 --> 00:21:52,389
whitelisting binary error a binder

552
00:21:51,159 --> 00:21:54,490
that's susceptible to application

553
00:21:52,389 --> 00:21:55,840
whitelisting bypasses then don't run it

554
00:21:54,490 --> 00:21:59,539
and it's not going to be ever trusted in

555
00:21:55,840 --> 00:22:00,918
the first place so again

556
00:21:59,539 --> 00:22:02,570
it just comes down to why allow

557
00:22:00,919 --> 00:22:03,799
untrusted code to run and we can just

558
00:22:02,570 --> 00:22:05,299
block it from the beginning so let's

559
00:22:03,799 --> 00:22:09,009
take a quick look at how you could do a

560
00:22:05,299 --> 00:22:09,009
policy like this

561
00:22:21,330 --> 00:22:25,500
okay so in this place up in the first

562
00:22:23,490 --> 00:22:27,240
case I'm just apparently I believe in

563
00:22:25,500 --> 00:22:29,040
creating a directory where the policies

564
00:22:27,240 --> 00:22:31,170
are going to be stored so it's just

565
00:22:29,040 --> 00:22:34,020
going to be under C under a DG policy

566
00:22:31,170 --> 00:22:39,420
file I'm seeing I'm storing that as a

567
00:22:34,020 --> 00:22:41,310
variable next up I'm going to going to

568
00:22:39,420 --> 00:22:44,280
be creating the path where I want the

569
00:22:41,310 --> 00:22:46,679
XML file of the empty device card policy

570
00:22:44,280 --> 00:22:48,570
to be stored this is going to be just

571
00:22:46,680 --> 00:22:50,280
creating it just creating just a file

572
00:22:48,570 --> 00:22:54,240
path essentially that's going to be

573
00:22:50,280 --> 00:22:56,070
passed into the new CI policy and so

574
00:22:54,240 --> 00:22:58,380
it's within this policy directory so so

575
00:22:56,070 --> 00:23:02,600
within DG policy files and then we're

576
00:22:58,380 --> 00:23:02,600
creating this file at MP policy to XML

577
00:23:04,580 --> 00:23:15,300
and then right here is going to be

578
00:23:07,650 --> 00:23:18,740
building out and pal like Neil said you

579
00:23:15,300 --> 00:23:18,740
do take a little slow on these videos

580
00:23:23,240 --> 00:23:27,960
all right so now what I'm going to be

581
00:23:26,100 --> 00:23:30,929
doing is creating a new directory that's

582
00:23:27,960 --> 00:23:33,390
going to store the path to my empty code

583
00:23:30,930 --> 00:23:34,320
integrity policy and so you can see that

584
00:23:33,390 --> 00:23:36,810
it's just created right now there's

585
00:23:34,320 --> 00:23:38,429
nothing inside of it and now we're gonna

586
00:23:36,810 --> 00:23:40,260
go ahead and build the policy of the new

587
00:23:38,430 --> 00:23:42,330
CI policy we're gonna give it a scan

588
00:23:40,260 --> 00:23:43,370
path of an empty directory the point

589
00:23:42,330 --> 00:23:45,389
being is I don't want it to actually

590
00:23:43,370 --> 00:23:47,070
scan any files right because I'm

591
00:23:45,390 --> 00:23:49,560
creating a policy that's completely

592
00:23:47,070 --> 00:23:51,750
empty this is not going to pick up any

593
00:23:49,560 --> 00:23:54,000
any sort of rules so by default block

594
00:23:51,750 --> 00:23:56,070
everything and so again I'm telling it

595
00:23:54,000 --> 00:23:57,960
to do it at the peace a certificate

596
00:23:56,070 --> 00:23:59,580
level but it should find nothing the

597
00:23:57,960 --> 00:24:04,260
scan path this is where it's actually

598
00:23:59,580 --> 00:24:05,790
scanning to make the rules and the file

599
00:24:04,260 --> 00:24:10,500
path is where it's outputting the file

600
00:24:05,790 --> 00:24:12,720
and this is gonna take probably three

601
00:24:10,500 --> 00:24:15,030
seconds versus your three days sort of

602
00:24:12,720 --> 00:24:19,020
to scan and it's just going to find

603
00:24:15,030 --> 00:24:21,629
nothing and the rules will be empty and

604
00:24:19,020 --> 00:24:23,070
so that's super basic but at least we're

605
00:24:21,630 --> 00:24:26,130
starting with now at this point with an

606
00:24:23,070 --> 00:24:27,899
empty code integrity policy if this were

607
00:24:26,130 --> 00:24:30,750
to be applied right now on a device card

608
00:24:27,900 --> 00:24:32,520
protected system it would nothing would

609
00:24:30,750 --> 00:24:35,420
be allowed to run at all including like

610
00:24:32,520 --> 00:24:35,420
your operating system

611
00:24:37,790 --> 00:24:42,450
so the problem with this approach is it

612
00:24:40,590 --> 00:24:44,159
actually doesn't pick up all device

613
00:24:42,450 --> 00:24:46,440
drivers so this is really weird right

614
00:24:44,160 --> 00:24:48,060
it actually it's not it makes some sense

615
00:24:46,440 --> 00:24:50,130
because if we're only scanning an empty

616
00:24:48,060 --> 00:24:51,210
directory it's not gonna find any of the

617
00:24:50,130 --> 00:24:53,790
drivers because they're not installed

618
00:24:51,210 --> 00:24:56,160
there so in order to do this we actually

619
00:24:53,790 --> 00:24:58,920
need to go through multiple log files

620
00:24:56,160 --> 00:25:01,830
where drivers are being blocked to find

621
00:24:58,920 --> 00:25:04,410
and allow specific drivers Matt graver

622
00:25:01,830 --> 00:25:06,929
did a blog post on this as is super

623
00:25:04,410 --> 00:25:09,210
interesting because even if you do scan

624
00:25:06,930 --> 00:25:12,300
like from the root directory or from a

625
00:25:09,210 --> 00:25:14,940
specific directory this command at the

626
00:25:12,300 --> 00:25:17,190
new CI policy for some unknown reason

627
00:25:14,940 --> 00:25:19,050
will actually miss certain device

628
00:25:17,190 --> 00:25:20,580
drivers and will prevent your computer

629
00:25:19,050 --> 00:25:22,860
for running if you do it you're gonna

630
00:25:20,580 --> 00:25:25,649
see something like this where I

631
00:25:22,860 --> 00:25:28,649
basically just sat here and watched for

632
00:25:25,650 --> 00:25:29,970
like 20 minutes Windows continuously

633
00:25:28,650 --> 00:25:32,280
rebooting saying is preparing to

634
00:25:29,970 --> 00:25:33,750
automatic repair but because the device

635
00:25:32,280 --> 00:25:35,850
guard rules that were being enforced

636
00:25:33,750 --> 00:25:38,160
didn't pick up all the drivers on the

637
00:25:35,850 --> 00:25:40,290
system it just continuously boot loop

638
00:25:38,160 --> 00:25:42,780
until you got into like a recovery mode

639
00:25:40,290 --> 00:25:43,740
to disable a device guard and then you

640
00:25:42,780 --> 00:25:46,260
could try to figure out what was going

641
00:25:43,740 --> 00:25:47,700
on so these path has their own like

642
00:25:46,260 --> 00:25:50,040
strengths and weaknesses like it's

643
00:25:47,700 --> 00:25:52,530
really the common fight of usability

644
00:25:50,040 --> 00:25:54,300
versus security in order to create like

645
00:25:52,530 --> 00:25:56,940
there's no right way to create a code

646
00:25:54,300 --> 00:25:57,840
integrity policy it's - you really have

647
00:25:56,940 --> 00:26:00,030
to kind of figure out what works best

648
00:25:57,840 --> 00:26:03,000
for yourself if you want to go with the

649
00:26:00,030 --> 00:26:04,350
gold image scan or not the nice thing

650
00:26:03,000 --> 00:26:06,630
that you can do though is you could

651
00:26:04,350 --> 00:26:08,370
create a gold image scan you're going to

652
00:26:06,630 --> 00:26:09,930
potentially pick up some unknown

653
00:26:08,370 --> 00:26:12,330
binaries that may be susceptible to

654
00:26:09,930 --> 00:26:13,860
application whitelisting bypasses but

655
00:26:12,330 --> 00:26:16,649
like I mentioned earlier and showed the

656
00:26:13,860 --> 00:26:18,780
image matt graver curates that rule set

657
00:26:16,650 --> 00:26:21,510
of applications that should be blocked

658
00:26:18,780 --> 00:26:23,639
and that is actually a device guard code

659
00:26:21,510 --> 00:26:25,860
integrity policy so you could use

660
00:26:23,640 --> 00:26:28,980
something like the merged CI policies to

661
00:26:25,860 --> 00:26:30,570
merge your rule set with his rule set

662
00:26:28,980 --> 00:26:32,460
containing an application that should be

663
00:26:30,570 --> 00:26:34,470
blocked and you'll at least be protected

664
00:26:32,460 --> 00:26:38,970
at that point to stop the major ones

665
00:26:34,470 --> 00:26:41,070
from being used against you so

666
00:26:38,970 --> 00:26:43,350
converting the binary so now we have

667
00:26:41,070 --> 00:26:45,330
this app code integrity policy we've

668
00:26:43,350 --> 00:26:47,070
done this scan now we actually once you

669
00:26:45,330 --> 00:26:48,779
convert into a binary format

670
00:26:47,070 --> 00:26:51,059
windows can use so how you do that

671
00:26:48,779 --> 00:26:53,130
what's super simple it's just as convert

672
00:26:51,059 --> 00:26:54,870
CI policy as the command that we're

673
00:26:53,130 --> 00:26:56,070
going to use and this is exactly what it

674
00:26:54,870 --> 00:26:57,418
looks like I actually have a video but I

675
00:26:56,070 --> 00:26:59,279
think it's like thirty seconds so and

676
00:26:57,419 --> 00:27:01,380
all I do is this on it's not really a

677
00:26:59,279 --> 00:27:03,539
point to doing it but so all in running

678
00:27:01,380 --> 00:27:05,759
is convert CI policy we're giving it the

679
00:27:03,539 --> 00:27:08,730
path to the XML file that we created

680
00:27:05,759 --> 00:27:10,110
with your new CI policy scan and then

681
00:27:08,730 --> 00:27:12,240
all you just say is hey this is where I

682
00:27:10,110 --> 00:27:14,250
want the binary file to go and it just

683
00:27:12,240 --> 00:27:16,860
does the conversion right there from XML

684
00:27:14,250 --> 00:27:17,970
to this p7v format and now you're good

685
00:27:16,860 --> 00:27:22,590
and you can apply that in your

686
00:27:17,970 --> 00:27:24,720
environment so now that we have a binary

687
00:27:22,590 --> 00:27:27,139
format how can we go ahead and deploy

688
00:27:24,720 --> 00:27:29,759
this in the in your environment

689
00:27:27,139 --> 00:27:31,709
Microsoft says online that you could use

690
00:27:29,759 --> 00:27:33,570
SCCM I believe and I've actually never

691
00:27:31,710 --> 00:27:36,870
seen an example of that being deployed

692
00:27:33,570 --> 00:27:38,789
of it being deployed via SSE n the

693
00:27:36,870 --> 00:27:41,668
method that I have tested in my lab and

694
00:27:38,789 --> 00:27:43,830
again I'm no I'm not a solid system

695
00:27:41,669 --> 00:27:45,750
administrator so there might be other

696
00:27:43,830 --> 00:27:49,049
better methods is used something like

697
00:27:45,750 --> 00:27:50,700
Group Policy and create a share in your

698
00:27:49,049 --> 00:27:53,250
environment that's it only needs to be

699
00:27:50,700 --> 00:27:55,500
readable by the domain computers objects

700
00:27:53,250 --> 00:27:57,330
they don't need to have right access to

701
00:27:55,500 --> 00:27:59,460
it but then that allow them to read it

702
00:27:57,330 --> 00:28:00,860
and you can just they can pick that up

703
00:27:59,460 --> 00:28:03,690
from anywhere in their environment so

704
00:28:00,860 --> 00:28:11,260
let's take a look at how you could do

705
00:28:03,690 --> 00:28:15,610
something like that so so require

706
00:28:11,260 --> 00:28:16,960
again Server 2016 because it needs to be

707
00:28:15,610 --> 00:28:19,719
able to see that as a group policy

708
00:28:16,960 --> 00:28:22,390
option so I have in this case is CDG

709
00:28:19,720 --> 00:28:24,880
files is I have like there's my initial

710
00:28:22,390 --> 00:28:27,660
scan right here's my si policy that's

711
00:28:24,880 --> 00:28:30,669
the binary format of my device guard

712
00:28:27,660 --> 00:28:33,040
rules if we look I'm gonna create a

713
00:28:30,669 --> 00:28:34,720
share well I guess maybe it's not

714
00:28:33,040 --> 00:28:36,850
committed yet but I have domain

715
00:28:34,720 --> 00:28:39,190
controllers listed here and they just

716
00:28:36,850 --> 00:28:41,709
start using domain computers and they

717
00:28:39,190 --> 00:28:42,669
have read & execute rights they had can

718
00:28:41,710 --> 00:28:45,070
breathe they can list folder contents

719
00:28:42,669 --> 00:28:46,870
they don't have modification rights and

720
00:28:45,070 --> 00:28:49,780
but all they need to do is just be able

721
00:28:46,870 --> 00:28:51,820
to read this file so we can go within

722
00:28:49,780 --> 00:28:54,090
group policy management and we can just

723
00:28:51,820 --> 00:28:56,290
edit whatever group policy that we want

724
00:28:54,090 --> 00:28:57,879
issues mean whichever policy and

725
00:28:56,290 --> 00:28:59,860
creative whether it be your default

726
00:28:57,880 --> 00:29:02,080
domain group policy or however you

727
00:28:59,860 --> 00:29:04,059
configured it if you look within system

728
00:29:02,080 --> 00:29:05,439
oh there's give me an option right up

729
00:29:04,059 --> 00:29:08,620
here which I'll scoot over for device

730
00:29:05,440 --> 00:29:11,740
card this is all we need to do is access

731
00:29:08,620 --> 00:29:14,199
this policy and if we don't look at you

732
00:29:11,740 --> 00:29:17,110
can see right here we say we are

733
00:29:14,200 --> 00:29:19,330
enabling device guard only do so we have

734
00:29:17,110 --> 00:29:20,918
to specify the path of the scan policy

735
00:29:19,330 --> 00:29:22,600
that we're going to use and so that's

736
00:29:20,919 --> 00:29:25,480
within that share that I just created

737
00:29:22,600 --> 00:29:27,939
and so this will be deployed domain wide

738
00:29:25,480 --> 00:29:30,610
to every obviously any system joins in

739
00:29:27,940 --> 00:29:32,620
the domain that that policy applies to

740
00:29:30,610 --> 00:29:36,850
and it's gonna start enforcing group

741
00:29:32,620 --> 00:29:38,949
group policy device guard on the

742
00:29:36,850 --> 00:29:40,570
different windows and systems with that

743
00:29:38,950 --> 00:29:42,840
policy that we just created that path

744
00:29:40,570 --> 00:29:42,840
here

745
00:29:52,580 --> 00:29:54,610
Oh

746
00:30:00,279 --> 00:30:04,519
so then here's just a screenshot of it

747
00:30:02,599 --> 00:30:07,129
walking through the same path or seen

748
00:30:04,519 --> 00:30:10,339
steps it's just a device guard we're

749
00:30:07,129 --> 00:30:12,049
turning it on and setting it up well now

750
00:30:10,339 --> 00:30:13,219
that we've created the policy we reboot

751
00:30:12,049 --> 00:30:15,320
our system like how do we actually make

752
00:30:13,219 --> 00:30:17,599
sure that it is being enforced within

753
00:30:15,320 --> 00:30:20,269
the environment that it's actually being

754
00:30:17,599 --> 00:30:22,158
applied well eat one easy way to check

755
00:30:20,269 --> 00:30:25,219
is on a system where you didn't create

756
00:30:22,159 --> 00:30:27,169
it windows always stores your code

757
00:30:25,219 --> 00:30:29,450
integrity policy in the binary format

758
00:30:27,169 --> 00:30:32,179
specifically at this path see windows

759
00:30:29,450 --> 00:30:34,460
system32 code integrity directory and

760
00:30:32,179 --> 00:30:37,909
it's always in this file called SI

761
00:30:34,460 --> 00:30:40,190
policy p7b so we can check on any single

762
00:30:37,909 --> 00:30:43,099
system where that group policy should

763
00:30:40,190 --> 00:30:44,749
apply and you should see this if you see

764
00:30:43,099 --> 00:30:47,599
this and that mean that it actually is

765
00:30:44,749 --> 00:30:49,729
applied it's highly likely that is being

766
00:30:47,599 --> 00:30:51,349
applied to your system and that those

767
00:30:49,729 --> 00:30:53,989
rules are either being enforced or it's

768
00:30:51,349 --> 00:30:55,820
at least auditing rules the better

769
00:30:53,989 --> 00:30:58,190
method is probably to review your event

770
00:30:55,820 --> 00:31:01,099
log you can look under Microsoft Windows

771
00:30:58,190 --> 00:31:03,710
device guard the operational log and you

772
00:31:01,099 --> 00:31:05,869
should hopefully see this event ID 7010

773
00:31:03,710 --> 00:31:08,059
and what it stays is that hey a device

774
00:31:05,869 --> 00:31:09,978
guard successfully processed the group

775
00:31:08,059 --> 00:31:12,918
policy configurable code integrity

776
00:31:09,979 --> 00:31:15,799
policy it was shown that it's pulling it

777
00:31:12,919 --> 00:31:17,869
from this path and that cerebral reboot

778
00:31:15,799 --> 00:31:19,849
was required but it actually just

779
00:31:17,869 --> 00:31:21,619
successfully process it and so these

780
00:31:19,849 --> 00:31:24,109
rules are either being auditing or

781
00:31:21,619 --> 00:31:27,908
either auditing executions or are

782
00:31:24,109 --> 00:31:27,908
enforcing rules within your environment

783
00:31:28,359 --> 00:31:32,779
great so now we have these rules we've

784
00:31:31,190 --> 00:31:34,789
created rule set we've converted it to a

785
00:31:32,779 --> 00:31:36,799
binary format we've now deployed this

786
00:31:34,789 --> 00:31:39,019
into our environment what if we need to

787
00:31:36,799 --> 00:31:41,299
make changes to the rules because would

788
00:31:39,019 --> 00:31:42,710
otherwise be blocking users from just

789
00:31:41,299 --> 00:31:44,479
running programs that they need to get

790
00:31:42,710 --> 00:31:47,239
their job done well let's look at how we

791
00:31:44,479 --> 00:31:49,729
can modify our policy we might have

792
00:31:47,239 --> 00:31:52,489
missed an application a library or a

793
00:31:49,729 --> 00:31:53,960
driver specifically to see what we may

794
00:31:52,489 --> 00:31:55,339
have missed we're looking in this

795
00:31:53,960 --> 00:31:59,029
applications and services microsoft

796
00:31:55,339 --> 00:32:00,678
windows code integrity Event log and so

797
00:31:59,029 --> 00:32:05,119
what we may see is something like this

798
00:32:00,679 --> 00:32:07,039
where it says in this case Microsoft vs

799
00:32:05,119 --> 00:32:09,139
code I tried to run but I did not have

800
00:32:07,039 --> 00:32:11,320
installed on my system when I created my

801
00:32:09,139 --> 00:32:13,389
rule set however

802
00:32:11,320 --> 00:32:16,389
this would normally be blocked but

803
00:32:13,390 --> 00:32:17,860
because my rules are not enforcing it

804
00:32:16,390 --> 00:32:19,600
because they are auditing what's

805
00:32:17,860 --> 00:32:21,550
actually running it says that the image

806
00:32:19,600 --> 00:32:25,389
was allowed to load it did however

807
00:32:21,550 --> 00:32:27,280
create this event log events same thing

808
00:32:25,390 --> 00:32:29,320
down here with Chrome apparently I

809
00:32:27,280 --> 00:32:32,200
installed Chrome after I created my

810
00:32:29,320 --> 00:32:34,179
rules for my system so chrome would not

811
00:32:32,200 --> 00:32:36,640
normally be allowed to execute on this

812
00:32:34,180 --> 00:32:40,360
box but because it's an auditing mode it

813
00:32:36,640 --> 00:32:42,280
was allowed to run so thankfully again

814
00:32:40,360 --> 00:32:45,250
we can easily parse the Windows Event

815
00:32:42,280 --> 00:32:46,540
log with PowerShell the new CI policy

816
00:32:45,250 --> 00:32:48,100
command that command like that we

817
00:32:46,540 --> 00:32:50,050
already ran to create our original code

818
00:32:48,100 --> 00:32:52,480
integrity policy has what's called an

819
00:32:50,050 --> 00:32:54,280
audit flag and what this does is it will

820
00:32:52,480 --> 00:32:56,650
go ahead and parse your event Windows

821
00:32:54,280 --> 00:32:58,270
event logs and look for any single file

822
00:32:56,650 --> 00:33:02,050
that there was an event was created for

823
00:32:58,270 --> 00:33:03,940
if it finds events where that file what

824
00:33:02,050 --> 00:33:06,399
should have been blocked but wasn't it

825
00:33:03,940 --> 00:33:08,800
will then go to that file and generate a

826
00:33:06,400 --> 00:33:10,510
new rule for it creating a new code

827
00:33:08,800 --> 00:33:11,919
integrity policy that contains

828
00:33:10,510 --> 00:33:15,490
everything that you missed the first

829
00:33:11,920 --> 00:33:16,930
time ideally at all and so once we've

830
00:33:15,490 --> 00:33:19,540
created the new code integrity policy

831
00:33:16,930 --> 00:33:21,340
with our audit log all we need to do is

832
00:33:19,540 --> 00:33:23,470
then merge the two rules together your

833
00:33:21,340 --> 00:33:25,530
original rule set and your rule that you

834
00:33:23,470 --> 00:33:27,910
contain everything that you missed

835
00:33:25,530 --> 00:33:29,379
within two one and that's we're using

836
00:33:27,910 --> 00:33:31,930
the merge CI policy

837
00:33:29,380 --> 00:33:35,130
kamil it so it's going to look i'll show

838
00:33:31,930 --> 00:33:35,130
quick video of that

839
00:33:45,420 --> 00:33:48,960
so here's what I'm doing is I'm creating

840
00:33:46,440 --> 00:33:51,690
the new CI bar using the new CI policy

841
00:33:48,960 --> 00:33:53,700
commandant I'm specifying the audit flag

842
00:33:51,690 --> 00:33:55,410
here and again that's going to check the

843
00:33:53,700 --> 00:33:57,450
audit log for every single application

844
00:33:55,410 --> 00:33:59,490
that I might have missed we're going to

845
00:33:57,450 --> 00:34:01,170
create rules at the PCA certificate

846
00:33:59,490 --> 00:34:02,880
level technically you could create at a

847
00:34:01,170 --> 00:34:04,890
different level but I don't see why

848
00:34:02,880 --> 00:34:07,500
you'd want to do that we're specifying

849
00:34:04,890 --> 00:34:09,780
the user pease to say we want to pick up

850
00:34:07,500 --> 00:34:12,600
applications that might be used by users

851
00:34:09,780 --> 00:34:14,730
and then we are specifying now the path

852
00:34:12,600 --> 00:34:17,190
to the output where should create those

853
00:34:14,730 --> 00:34:18,840
rules so we enter this is gonna be

854
00:34:17,190 --> 00:34:21,600
significantly faster than three days

855
00:34:18,840 --> 00:34:23,760
this is going to take maybe n seconds

856
00:34:21,600 --> 00:34:24,960
right here and so it's looking at all

857
00:34:23,760 --> 00:34:27,690
the different applications that we

858
00:34:24,960 --> 00:34:30,389
missed generating the rules and at this

859
00:34:27,690 --> 00:34:32,190
point it's now complete and I think it

860
00:34:30,389 --> 00:34:33,779
takes me a second figure out so it'll

861
00:34:32,190 --> 00:34:35,550
sometimes come back with something like

862
00:34:33,780 --> 00:34:37,290
this where it says may not be able to

863
00:34:35,550 --> 00:34:39,540
find rules for everything that was

864
00:34:37,290 --> 00:34:41,219
scanned this possibly could be because

865
00:34:39,540 --> 00:34:43,440
an application is not digitally signed

866
00:34:41,219 --> 00:34:44,819
it's also possible because you move the

867
00:34:43,440 --> 00:34:47,310
location of the file from when it

868
00:34:44,820 --> 00:34:48,810
created an audit law so now that we have

869
00:34:47,310 --> 00:34:50,639
you can see we have the audit sweep here

870
00:34:48,810 --> 00:34:52,560
we have our initial scan right here

871
00:34:50,639 --> 00:34:54,989
we're gonna merge these two together

872
00:34:52,560 --> 00:34:56,850
into one larger rule set that hopefully

873
00:34:54,989 --> 00:34:58,979
would contain everything I need so here

874
00:34:56,850 --> 00:35:00,900
calling mercier policy we're specifying

875
00:34:58,980 --> 00:35:02,700
the path of the first one which is that

876
00:35:00,900 --> 00:35:05,850
audit sweep and then we're also

877
00:35:02,700 --> 00:35:07,169
specifying the path to the issues at

878
00:35:05,850 --> 00:35:08,759
your source where the path to the audit

879
00:35:07,170 --> 00:35:11,250
log and they're also specifying the path

880
00:35:08,760 --> 00:35:13,890
that initial scan which is this initial

881
00:35:11,250 --> 00:35:15,390
XML and now all it's going to do is

882
00:35:13,890 --> 00:35:17,970
we're going to tell it to output to a

883
00:35:15,390 --> 00:35:21,390
specific path after I fixed light space

884
00:35:17,970 --> 00:35:23,759
here and we just specify where we wanted

885
00:35:21,390 --> 00:35:25,109
to store it here so it's going to go

886
00:35:23,760 --> 00:35:26,900
probably the same directory and some

887
00:35:25,110 --> 00:35:33,960
demerged

888
00:35:26,900 --> 00:35:36,330
files say you know this again this is

889
00:35:33,960 --> 00:35:38,610
now in this XML format and these are now

890
00:35:36,330 --> 00:35:41,759
all the rules that are within the

891
00:35:38,610 --> 00:35:43,920
updated code integrity policy and all

892
00:35:41,760 --> 00:35:46,980
you need to do at this point is use that

893
00:35:43,920 --> 00:35:51,230
convert from CI policy to change it from

894
00:35:46,980 --> 00:35:51,230
this XML format into a binary format

895
00:36:01,680 --> 00:36:06,430
okay and finally so now that we've done

896
00:36:04,569 --> 00:36:08,829
that our testing or all of our rules

897
00:36:06,430 --> 00:36:11,348
were deployed in audit mode we created

898
00:36:08,829 --> 00:36:12,849
all these event logs now we have what we

899
00:36:11,349 --> 00:36:14,440
believe is our rule set that's needed

900
00:36:12,849 --> 00:36:15,970
that we actually want to enforce an

901
00:36:14,440 --> 00:36:18,369
environment and start testing

902
00:36:15,970 --> 00:36:20,049
application whitelisting by enforcing

903
00:36:18,369 --> 00:36:24,009
these rules and not allowing anything to

904
00:36:20,049 --> 00:36:26,109
run how do we do that well we we just

905
00:36:24,009 --> 00:36:27,519
basically set that one rule that it

906
00:36:26,109 --> 00:36:30,190
changes it from audit mode to

907
00:36:27,519 --> 00:36:32,258
enforcement mode the best place to start

908
00:36:30,190 --> 00:36:34,359
with doing this now and this is what I

909
00:36:32,259 --> 00:36:35,979
firmly believe when we talk to people or

910
00:36:34,359 --> 00:36:38,109
organizations about deploying app white

911
00:36:35,979 --> 00:36:39,970
listing is targeting fixed functionality

912
00:36:38,109 --> 00:36:41,769
systems first I mean there's no reason

913
00:36:39,970 --> 00:36:43,598
for a domain controller to have slack

914
00:36:41,769 --> 00:36:47,049
installed on it like there's no reason

915
00:36:43,599 --> 00:36:49,749
for an ATM to have like at the Steam

916
00:36:47,049 --> 00:36:51,729
game store like we can target fixed

917
00:36:49,749 --> 00:36:54,819
functionality systems where users aren't

918
00:36:51,729 --> 00:36:56,109
that only need to run basically one

919
00:36:54,819 --> 00:36:58,599
thing whatever it is to do their job

920
00:36:56,109 --> 00:37:00,339
that's a prime candidate for application

921
00:36:58,599 --> 00:37:03,069
whitelisting because you don't have to

922
00:37:00,339 --> 00:37:04,690
worry about users needing to install

923
00:37:03,069 --> 00:37:06,519
different applications at any point in

924
00:37:04,690 --> 00:37:09,009
the future in order for them to do their

925
00:37:06,519 --> 00:37:10,598
job it that the ATM just needs to run

926
00:37:09,009 --> 00:37:14,229
the one application that allows you to

927
00:37:10,599 --> 00:37:17,739
deploy deploy give money to whoever

928
00:37:14,229 --> 00:37:19,149
using it so like I mentioned the set

929
00:37:17,739 --> 00:37:21,369
rule option is the command line that

930
00:37:19,150 --> 00:37:23,170
allows you to enable or disable audit

931
00:37:21,369 --> 00:37:27,190
mode all you need to do is run that

932
00:37:23,170 --> 00:37:29,079
against t-rex and the XML format of your

933
00:37:27,190 --> 00:37:33,549
code integrity policy and it would work

934
00:37:29,079 --> 00:37:35,499
and it would then start enforcing the

935
00:37:33,549 --> 00:37:37,809
rule set once you convert it into a

936
00:37:35,499 --> 00:37:41,200
binary format so this is what it

937
00:37:37,809 --> 00:37:43,180
actually looks like if you have your

938
00:37:41,200 --> 00:37:44,618
rules and enforcement mode and you are

939
00:37:43,180 --> 00:37:46,479
testing to see if something should be

940
00:37:44,619 --> 00:37:48,960
allowed to run so you can't really see

941
00:37:46,479 --> 00:37:51,910
it but behind this is putty and so I

942
00:37:48,960 --> 00:37:53,769
created a rules created rule set for my

943
00:37:51,910 --> 00:37:56,979
Windows system did not have putty on to

944
00:37:53,769 --> 00:37:58,859
begin with turned on enforcement mode of

945
00:37:56,979 --> 00:38:01,538
Windows Defender application control

946
00:37:58,859 --> 00:38:03,788
downloaded putty attempted to run it and

947
00:38:01,539 --> 00:38:05,859
this is what you or your users would see

948
00:38:03,789 --> 00:38:07,809
if they try to run something that's not

949
00:38:05,859 --> 00:38:09,279
trusted it's just saying that we are

950
00:38:07,809 --> 00:38:11,710
using Windows kind of application

951
00:38:09,279 --> 00:38:14,680
control and it's going to be blocked and

952
00:38:11,710 --> 00:38:17,140
there's no way in this case for user to

953
00:38:14,680 --> 00:38:19,120
say like allow anyways it's it's not

954
00:38:17,140 --> 00:38:21,009
possible the only way that you can get a

955
00:38:19,120 --> 00:38:23,920
change is to have a new coat integrity

956
00:38:21,010 --> 00:38:25,800
policy created oh this is actually what

957
00:38:23,920 --> 00:38:28,750
I see is kind of one of the most common

958
00:38:25,800 --> 00:38:30,160
complaints about device guard and it

959
00:38:28,750 --> 00:38:32,320
makes some sense where it's a little bit

960
00:38:30,160 --> 00:38:34,899
harder to manage at times

961
00:38:32,320 --> 00:38:36,460
enterprise-wide because there's

962
00:38:34,900 --> 00:38:38,170
obviously a need for exceptions from

963
00:38:36,460 --> 00:38:40,960
time to time like users need to do your

964
00:38:38,170 --> 00:38:43,270
employees need to be able to have the

965
00:38:40,960 --> 00:38:44,800
ability to make an easy request for

966
00:38:43,270 --> 00:38:48,100
something that's needed for their job in

967
00:38:44,800 --> 00:38:49,900
order to to do their work well the

968
00:38:48,100 --> 00:38:52,569
easiest way the easiest way to do that

969
00:38:49,900 --> 00:38:54,340
with device guard is unfortunately to

970
00:38:52,570 --> 00:38:56,320
you have to create a new code integrity

971
00:38:54,340 --> 00:38:57,490
policy like we can basically follow

972
00:38:56,320 --> 00:39:00,280
those steps that we just went through

973
00:38:57,490 --> 00:39:03,609
but somehow also pick up the file that

974
00:39:00,280 --> 00:39:05,530
they need to run so that can be a little

975
00:39:03,610 --> 00:39:07,360
bit of an issue so it's something to be

976
00:39:05,530 --> 00:39:09,160
aware of of a Congrats

977
00:39:07,360 --> 00:39:11,470
basically that you've done this you've

978
00:39:09,160 --> 00:39:13,750
created a code integrity policy and you

979
00:39:11,470 --> 00:39:15,129
have been forcing it and hopefully it's

980
00:39:13,750 --> 00:39:16,840
helping to protect your environment I

981
00:39:15,130 --> 00:39:21,130
know a bunch of friends that have worked

982
00:39:16,840 --> 00:39:23,170
at banks that have deployed not

983
00:39:21,130 --> 00:39:25,060
necessarily device guard but other

984
00:39:23,170 --> 00:39:27,030
application whitelisting solutions and

985
00:39:25,060 --> 00:39:29,910
the second that they start seeing

986
00:39:27,030 --> 00:39:32,470
applications that are are blocked that

987
00:39:29,910 --> 00:39:35,020
were attempted to run on a system that

988
00:39:32,470 --> 00:39:37,120
had this protection but it's an easy win

989
00:39:35,020 --> 00:39:38,500
for them and it's a show it's a way that

990
00:39:37,120 --> 00:39:40,270
they can show return on investment of

991
00:39:38,500 --> 00:39:41,560
the time that they spent to deploy this

992
00:39:40,270 --> 00:39:43,240
because they're now preventing an

993
00:39:41,560 --> 00:39:46,090
incident from ever happening in the

994
00:39:43,240 --> 00:39:47,439
first place so I firmly believe in this

995
00:39:46,090 --> 00:39:50,170
technology I really think it's good and

996
00:39:47,440 --> 00:39:51,670
you can use this to show wins and if you

997
00:39:50,170 --> 00:39:53,710
get enough wins on your fixed

998
00:39:51,670 --> 00:39:56,170
functionality systems maybe you can have

999
00:39:53,710 --> 00:39:59,320
the ability to start deploying it in

1000
00:39:56,170 --> 00:40:00,820
your environment to domain-wide one

1001
00:39:59,320 --> 00:40:03,370
other thing is let's say you're an

1002
00:40:00,820 --> 00:40:05,800
environment where you have no ability to

1003
00:40:03,370 --> 00:40:06,880
make change right like or maybe you just

1004
00:40:05,800 --> 00:40:08,410
know from a management perspective

1005
00:40:06,880 --> 00:40:11,260
they're never going to allow you to

1006
00:40:08,410 --> 00:40:13,569
deploy application whitelisting well one

1007
00:40:11,260 --> 00:40:15,160
thing that you can do is you can still

1008
00:40:13,570 --> 00:40:17,530
use device or Windows Defender

1009
00:40:15,160 --> 00:40:19,270
application control and you can create

1010
00:40:17,530 --> 00:40:21,490
your rule set exactly how you would want

1011
00:40:19,270 --> 00:40:22,960
to have it create great so you can any

1012
00:40:21,490 --> 00:40:24,250
applications that you think that people

1013
00:40:22,960 --> 00:40:27,589
need to have installed just throw it all

1014
00:40:24,250 --> 00:40:29,660
and create a rudimentary coding

1015
00:40:27,589 --> 00:40:30,828
policy or if you want spend the time to

1016
00:40:29,660 --> 00:40:33,680
really really make it a pretty solid

1017
00:40:30,829 --> 00:40:35,200
rule set and then deploy it domain wide

1018
00:40:33,680 --> 00:40:37,519
but the only thing is instead of

1019
00:40:35,200 --> 00:40:40,279
enforcing it just leave it purely in

1020
00:40:37,519 --> 00:40:42,229
auto mode the nice thing about doing

1021
00:40:40,279 --> 00:40:43,880
that is you're gonna get telemetry on

1022
00:40:42,229 --> 00:40:45,769
the different applications that are

1023
00:40:43,880 --> 00:40:48,109
running within your environments that

1024
00:40:45,769 --> 00:40:50,988
would you you would have normally blocks

1025
00:40:48,109 --> 00:40:52,578
based off your rules that and the good

1026
00:40:50,989 --> 00:40:53,930
thing is that this has no impact at all

1027
00:40:52,579 --> 00:40:56,059
in users there you're still going to be

1028
00:40:53,930 --> 00:40:57,469
able to run any single application that

1029
00:40:56,059 --> 00:40:59,930
they want but you as an administrator

1030
00:40:57,469 --> 00:41:01,759
are seeing what would have been blocked

1031
00:40:59,930 --> 00:41:03,649
otherwise and you can start figuring out

1032
00:41:01,759 --> 00:41:05,719
okay maybe that's an application that's

1033
00:41:03,650 --> 00:41:07,009
actually needed or this is a little bit

1034
00:41:05,719 --> 00:41:07,969
weird why are people running this I

1035
00:41:07,009 --> 00:41:10,519
might want to look into this a little

1036
00:41:07,969 --> 00:41:12,589
more so we see a free Windows Event log

1037
00:41:10,519 --> 00:41:15,499
generator that you can use it to see

1038
00:41:12,589 --> 00:41:17,479
what potentially untrusted apps could be

1039
00:41:15,499 --> 00:41:18,979
running so I I know Matt graver has

1040
00:41:17,479 --> 00:41:20,868
talked about indecent malice like this

1041
00:41:18,979 --> 00:41:22,390
is a way to test to try to help gain

1042
00:41:20,869 --> 00:41:24,859
some insight

1043
00:41:22,390 --> 00:41:28,219
all right so subverting Windows Defender

1044
00:41:24,859 --> 00:41:30,499
application control I like every like

1045
00:41:28,219 --> 00:41:33,200
offensive talk probably should have some

1046
00:41:30,499 --> 00:41:35,029
form of a couple different slides on how

1047
00:41:33,200 --> 00:41:36,950
you can defend against whatever you just

1048
00:41:35,029 --> 00:41:39,049
talked about I also believe in the

1049
00:41:36,950 --> 00:41:40,519
opposite a defensive talk should have a

1050
00:41:39,049 --> 00:41:42,109
couple different ways or at least a

1051
00:41:40,519 --> 00:41:43,308
method that you can talk to you about

1052
00:41:42,109 --> 00:41:47,598
how you could try to subvert that

1053
00:41:43,309 --> 00:41:48,979
technology defensive capability so there

1054
00:41:47,599 --> 00:41:50,809
are a couple different ways you can try

1055
00:41:48,979 --> 00:41:53,180
to subvert Windows Defender application

1056
00:41:50,809 --> 00:41:54,319
control they're the two primary ones are

1057
00:41:53,180 --> 00:41:56,989
probably to develop an application

1058
00:41:54,319 --> 00:41:59,538
whitelisting bypass or follow more of a

1059
00:41:56,989 --> 00:42:01,789
living off the land approach so what do

1060
00:41:59,539 --> 00:42:04,219
i mean by this well you can develop an

1061
00:42:01,789 --> 00:42:07,729
app whitelisting bypass and those are

1062
00:42:04,219 --> 00:42:09,710
incredibly effective and i hesitate to

1063
00:42:07,729 --> 00:42:11,808
use it it's definitely not a zero-day in

1064
00:42:09,710 --> 00:42:13,729
in the true nature of the term what how

1065
00:42:11,809 --> 00:42:15,700
people commonly refer to it but you can

1066
00:42:13,729 --> 00:42:18,348
think of if you can find a brand new

1067
00:42:15,700 --> 00:42:20,149
Windows application that no one has

1068
00:42:18,349 --> 00:42:23,479
found before that you can use the

1069
00:42:20,150 --> 00:42:26,239
subvert and like run malicious code it's

1070
00:42:23,479 --> 00:42:29,269
it's Semih is kind of similar to one

1071
00:42:26,239 --> 00:42:31,249
because any sort of everything about

1072
00:42:29,269 --> 00:42:33,258
like most people trust Microsoft signed

1073
00:42:31,249 --> 00:42:34,160
applications right like they created

1074
00:42:33,259 --> 00:42:35,539
your operates

1075
00:42:34,160 --> 00:42:38,029
you're probably gonna trust most of the

1076
00:42:35,539 --> 00:42:40,009
binaries that they also create in are

1077
00:42:38,029 --> 00:42:40,869
also installed on your system unless you

1078
00:42:40,009 --> 00:42:43,450
were to follow this too

1079
00:42:40,869 --> 00:42:45,640
denial policy well if that's the case

1080
00:42:43,450 --> 00:42:47,618
and if you find something brand-new then

1081
00:42:45,640 --> 00:42:49,420
you're gonna be bypassing everyone's

1082
00:42:47,619 --> 00:42:52,390
rules right now because your application

1083
00:42:49,420 --> 00:42:53,769
is likely Microsoft signed the big thing

1084
00:42:52,390 --> 00:42:55,720
with going this route though is this

1085
00:42:53,769 --> 00:42:58,808
takes research and development this is

1086
00:42:55,720 --> 00:43:00,038
time a KA is some money so it's

1087
00:42:58,809 --> 00:43:01,599
something that you have to be aware of

1088
00:43:00,039 --> 00:43:03,039
it ain't not necessarily guaranteed to

1089
00:43:01,599 --> 00:43:05,920
find something there within any time

1090
00:43:03,039 --> 00:43:08,349
period but the nice thing is if you do

1091
00:43:05,920 --> 00:43:09,999
find an application whitelisting bypass

1092
00:43:08,349 --> 00:43:12,569
its gonna be a hundred percent effective

1093
00:43:09,999 --> 00:43:14,740
in his first use however similar to how

1094
00:43:12,569 --> 00:43:16,660
developers patch applications if

1095
00:43:14,740 --> 00:43:18,879
Microsoft even if Microsoft doesn't want

1096
00:43:16,660 --> 00:43:20,740
to service and fix whatever application

1097
00:43:18,880 --> 00:43:23,170
whitelisting bypass you found all

1098
00:43:20,740 --> 00:43:24,819
someone needs to do is create a code

1099
00:43:23,170 --> 00:43:27,009
integrity rule just like what matt

1100
00:43:24,819 --> 00:43:28,749
graver does and block that application

1101
00:43:27,009 --> 00:43:32,650
from running and it's no longer

1102
00:43:28,749 --> 00:43:35,919
effective another method of doing this

1103
00:43:32,650 --> 00:43:38,559
is to live off the land so when I was

1104
00:43:35,920 --> 00:43:40,119
this is the approach that I took is I

1105
00:43:38,559 --> 00:43:42,490
wanted to look at Windows Defender

1106
00:43:40,119 --> 00:43:44,589
application control and figure out okay

1107
00:43:42,490 --> 00:43:46,959
this is a good defensive technology if I

1108
00:43:44,589 --> 00:43:48,759
land on the system as an attacker how

1109
00:43:46,960 --> 00:43:50,769
can I attack this and right now it was a

1110
00:43:48,759 --> 00:43:53,619
lot there's not a lot of tools out there

1111
00:43:50,769 --> 00:43:55,720
that allow you to survive or survive or

1112
00:43:53,619 --> 00:43:57,640
operate on an application while you're

1113
00:43:55,720 --> 00:43:58,959
listening protected system so it's

1114
00:43:57,640 --> 00:44:00,670
trying to go through and figure out okay

1115
00:43:58,960 --> 00:44:02,589
what is probably always going to be

1116
00:44:00,670 --> 00:44:04,329
allowed and running well PowerShell

1117
00:44:02,589 --> 00:44:06,430
although this is going to be constrained

1118
00:44:04,329 --> 00:44:09,849
language motive PowerShell PowerShell is

1119
00:44:06,430 --> 00:44:11,859
still on it I can also assume that WI is

1120
00:44:09,849 --> 00:44:13,509
going to be operational and running it's

1121
00:44:11,859 --> 00:44:16,089
a service that's been installed and

1122
00:44:13,509 --> 00:44:18,910
enabled by default on Windows since

1123
00:44:16,089 --> 00:44:21,400
Server 2000 so it is still operational

1124
00:44:18,910 --> 00:44:23,109
and running there also potentially other

1125
00:44:21,400 --> 00:44:25,989
Microsoft service and binaries but these

1126
00:44:23,109 --> 00:44:27,759
are kind of the two that I focus on so I

1127
00:44:25,989 --> 00:44:30,849
want to figure out it can i leverage

1128
00:44:27,759 --> 00:44:33,069
these to attack a Windows Defender

1129
00:44:30,849 --> 00:44:35,319
application control protected system and

1130
00:44:33,069 --> 00:44:37,019
I did so I created this tool called

1131
00:44:35,319 --> 00:44:40,089
women in plan will show video real quick

1132
00:44:37,019 --> 00:44:43,299
where it's a tool that is designed to

1133
00:44:40,089 --> 00:44:45,700
allow you to attack these systems it is

1134
00:44:43,299 --> 00:44:47,859
completely written very unfortunately in

1135
00:44:45,700 --> 00:44:49,149
constrained language mode because if

1136
00:44:47,859 --> 00:44:51,880
you've written in it you know the

1137
00:44:49,150 --> 00:44:54,520
headaches that it causes but it uses WMI

1138
00:44:51,880 --> 00:44:56,260
for everything so it uses WMI 2x

1139
00:44:54,520 --> 00:44:58,180
in action we can start process and can

1140
00:44:56,260 --> 00:45:00,910
kill process we can run different

1141
00:44:58,180 --> 00:45:04,600
applications we can modify the registry

1142
00:45:00,910 --> 00:45:06,940
you can do so much with W my it also

1143
00:45:04,600 --> 00:45:08,740
uses it for comms but see two columns

1144
00:45:06,940 --> 00:45:11,110
between one computer and another and it

1145
00:45:08,740 --> 00:45:14,200
uses it for storage for like a temporary

1146
00:45:11,110 --> 00:45:16,300
data storage area the only thing is a

1147
00:45:14,200 --> 00:45:18,669
way that you can prevent

1148
00:45:16,300 --> 00:45:22,110
lynnium plan from working is by just

1149
00:45:18,670 --> 00:45:25,660
blocking W mine with that said I've only

1150
00:45:22,110 --> 00:45:27,550
seen that maybe a handful of times over

1151
00:45:25,660 --> 00:45:29,319
the past few years and in environments

1152
00:45:27,550 --> 00:45:30,970
that I passive where wmii is not

1153
00:45:29,320 --> 00:45:32,440
actually allowed from one environment to

1154
00:45:30,970 --> 00:45:34,450
another that may be because

1155
00:45:32,440 --> 00:45:36,550
administrators want to use W my to poll

1156
00:45:34,450 --> 00:45:38,890
and like gather health of different

1157
00:45:36,550 --> 00:45:40,480
devices in their environment it could be

1158
00:45:38,890 --> 00:45:42,069
I don't know it could be a lot of

1159
00:45:40,480 --> 00:45:45,130
different reasons but typically W my is

1160
00:45:42,070 --> 00:45:47,620
enable so that's why we again we chose

1161
00:45:45,130 --> 00:45:50,020
it the only thing with doing this so

1162
00:45:47,620 --> 00:45:54,370
with even if someone has women implant

1163
00:45:50,020 --> 00:45:56,320
it requires a much more enabled attacker

1164
00:45:54,370 --> 00:45:57,609
and much more prepared attacker to be

1165
00:45:56,320 --> 00:45:59,320
able to effectively use it in an

1166
00:45:57,610 --> 00:46:01,780
environment because when you first land

1167
00:45:59,320 --> 00:46:04,030
on systems you may not be expecting

1168
00:46:01,780 --> 00:46:05,290
device Carter you may not be assuming

1169
00:46:04,030 --> 00:46:08,020
that all these different rules are going

1170
00:46:05,290 --> 00:46:10,330
to be enforced on the system so even

1171
00:46:08,020 --> 00:46:13,290
though W DAC can still be kind of

1172
00:46:10,330 --> 00:46:16,270
bypassed you can have the ability to

1173
00:46:13,290 --> 00:46:17,290
operate in that environment and I still

1174
00:46:16,270 --> 00:46:19,690
think that it's important to actually

1175
00:46:17,290 --> 00:46:22,200
have in use because again you notice by

1176
00:46:19,690 --> 00:46:25,750
passable it's something that it requires

1177
00:46:22,200 --> 00:46:27,250
an attacker to maybe make mistakes

1178
00:46:25,750 --> 00:46:29,470
before they figure out what they can do

1179
00:46:27,250 --> 00:46:31,210
to survive on that system and those

1180
00:46:29,470 --> 00:46:33,790
mistakes are what you're looking at

1181
00:46:31,210 --> 00:46:36,220
trigger on and alert upon so let's look

1182
00:46:33,790 --> 00:46:38,400
at women implant and kind of in how it

1183
00:46:36,220 --> 00:46:38,399
works

1184
00:46:45,799 --> 00:46:50,609
so I believe I'm going to show I hope

1185
00:46:49,079 --> 00:46:52,859
that I'm in constrained language mode

1186
00:46:50,609 --> 00:46:54,058
yes I am so this is validating that it

1187
00:46:52,859 --> 00:46:55,859
is actually operating constrained

1188
00:46:54,059 --> 00:46:57,930
language mode that I said restricted

1189
00:46:55,859 --> 00:46:59,880
version of PowerShell and we're gonna go

1190
00:46:57,930 --> 00:47:02,549
ahead and run will name pain right now

1191
00:46:59,880 --> 00:47:03,869
and so again because this is constrained

1192
00:47:02,549 --> 00:47:05,880
language mode compliant we have all

1193
00:47:03,869 --> 00:47:08,640
these different capabilities and this

1194
00:47:05,880 --> 00:47:11,099
can run and be allowed to run on a

1195
00:47:08,640 --> 00:47:14,219
device are protected system so this is

1196
00:47:11,099 --> 00:47:17,009
designed to be semi like a rat where you

1197
00:47:14,219 --> 00:47:18,839
have the ability to read files so you

1198
00:47:17,009 --> 00:47:21,119
can upload and download files you can

1199
00:47:18,839 --> 00:47:23,430
execute power shell scripts on systems

1200
00:47:21,119 --> 00:47:24,989
and get the results back all in memory

1201
00:47:23,430 --> 00:47:27,629
without ever dropping anything to disk

1202
00:47:24,989 --> 00:47:30,239
you can power off an on a system you can

1203
00:47:27,630 --> 00:47:33,420
run shell commands and actually get

1204
00:47:30,239 --> 00:47:35,279
output back all using W my click in this

1205
00:47:33,420 --> 00:47:37,859
case running LS we're trying to do like

1206
00:47:35,279 --> 00:47:39,359
a directory listing on the local system

1207
00:47:37,859 --> 00:47:43,109
and we're saying we just want to return

1208
00:47:39,359 --> 00:47:44,400
stuff from the c drive so here you can

1209
00:47:43,109 --> 00:47:47,670
see these are different files you got

1210
00:47:44,400 --> 00:47:49,019
like c window c users different c

1211
00:47:47,670 --> 00:47:51,660
scanner all these are different

1212
00:47:49,019 --> 00:47:53,038
directories that are in here the next

1213
00:47:51,660 --> 00:47:55,019
we'll look at a different command that

1214
00:47:53,039 --> 00:47:57,390
we can run what's going on like i of can

1215
00:47:55,019 --> 00:48:00,118
fix this again super basic this is

1216
00:47:57,390 --> 00:48:02,759
running against my local system and it's

1217
00:48:00,119 --> 00:48:05,969
returning every single NIC that is

1218
00:48:02,759 --> 00:48:07,709
active on the system so right now it's

1219
00:48:05,969 --> 00:48:08,999
again super basic stuff but this is kind

1220
00:48:07,709 --> 00:48:11,279
of like the information gathering phase

1221
00:48:08,999 --> 00:48:12,180
well let's look at installed programs we

1222
00:48:11,279 --> 00:48:14,130
can see there's anything that's

1223
00:48:12,180 --> 00:48:16,618
interesting that's on the system that we

1224
00:48:14,130 --> 00:48:18,569
can use to maybe attack or or do

1225
00:48:16,619 --> 00:48:20,069
something with and so it's pulling back

1226
00:48:18,569 --> 00:48:22,019
the different applications that are

1227
00:48:20,069 --> 00:48:24,029
installed this system apparently when

1228
00:48:22,019 --> 00:48:25,769
this ran I had very little programs

1229
00:48:24,029 --> 00:48:28,440
installed on it but we can see we have

1230
00:48:25,769 --> 00:48:34,919
google chrome like a c++ redistributable

1231
00:48:28,440 --> 00:48:36,150
and other minimal stuff next up we're

1232
00:48:34,920 --> 00:48:39,569
going to I guess ANSI we're gonna look

1233
00:48:36,150 --> 00:48:46,380
at okay I think we're going to start a

1234
00:48:39,569 --> 00:48:48,690
process yeah so we're going to start a

1235
00:48:46,380 --> 00:48:51,059
process so this is how we can do basic

1236
00:48:48,690 --> 00:48:52,890
process creation one thing to note is in

1237
00:48:51,059 --> 00:48:55,229
this case I'm doing everything on

1238
00:48:52,890 --> 00:48:56,040
localhost so that the local system that

1239
00:48:55,229 --> 00:48:57,919
I'm on

1240
00:48:56,040 --> 00:49:00,210
this will completely work remotely

1241
00:48:57,920 --> 00:49:01,920
assuming that you have admin rights on

1242
00:49:00,210 --> 00:49:04,350
the system that you're targeting you can

1243
00:49:01,920 --> 00:49:06,990
run every single application or run all

1244
00:49:04,350 --> 00:49:09,540
of these commands against any system and

1245
00:49:06,990 --> 00:49:12,240
get all these results so I actually

1246
00:49:09,540 --> 00:49:13,710
commonly do this before I compromise

1247
00:49:12,240 --> 00:49:15,839
from jump from one system to another

1248
00:49:13,710 --> 00:49:17,310
that I'm compromising one of the things

1249
00:49:15,840 --> 00:49:19,260
that I look at is out you going to

1250
00:49:17,310 --> 00:49:20,610
perform like a process listing and so

1251
00:49:19,260 --> 00:49:23,010
you can see what applications are

1252
00:49:20,610 --> 00:49:24,510
running before you attack it and it's

1253
00:49:23,010 --> 00:49:25,950
kind of nice as you can see are there

1254
00:49:24,510 --> 00:49:28,920
any defensive products that are actually

1255
00:49:25,950 --> 00:49:30,899
deployed on here and how can I possibly

1256
00:49:28,920 --> 00:49:32,820
circumvent them or just know what I'm

1257
00:49:30,900 --> 00:49:35,880
getting myself into before I get on the

1258
00:49:32,820 --> 00:49:37,950
box so in this case I'm starting notepad

1259
00:49:35,880 --> 00:49:39,510
it's said it's successful with eternal

1260
00:49:37,950 --> 00:49:41,730
value zero and you can see notepad was

1261
00:49:39,510 --> 00:49:43,410
started so you can use this to run any

1262
00:49:41,730 --> 00:49:46,560
application such as PowerShell or

1263
00:49:43,410 --> 00:49:48,509
anything else on a remote system if you

1264
00:49:46,560 --> 00:49:50,549
really wanted to right now I'm just

1265
00:49:48,510 --> 00:49:52,920
going to probably kill the same process

1266
00:49:50,550 --> 00:49:54,660
so this is stopping notepad which you

1267
00:49:52,920 --> 00:49:56,640
can't see but I was returning value of

1268
00:49:54,660 --> 00:49:59,190
zero said that it was successful so it

1269
00:49:56,640 --> 00:50:01,770
actually did stop it and finally this is

1270
00:49:59,190 --> 00:50:03,990
the other thing that you can do is this

1271
00:50:01,770 --> 00:50:06,330
command exec command allows you to run a

1272
00:50:03,990 --> 00:50:10,229
command it also allows you to actually

1273
00:50:06,330 --> 00:50:12,660
get output so like I was explaining this

1274
00:50:10,230 --> 00:50:14,040
in my workshop I like to think of like

1275
00:50:12,660 --> 00:50:16,049
starting processes on a system

1276
00:50:14,040 --> 00:50:18,570
especially where most systems as blind

1277
00:50:16,050 --> 00:50:20,880
process creation what I mean by that is

1278
00:50:18,570 --> 00:50:23,400
if you we normally run a command like IP

1279
00:50:20,880 --> 00:50:25,500
config or any other binary on a Windows

1280
00:50:23,400 --> 00:50:27,750
system you get the output right like you

1281
00:50:25,500 --> 00:50:29,280
can see what your IP address is or

1282
00:50:27,750 --> 00:50:31,710
whatever it is it out that you're

1283
00:50:29,280 --> 00:50:34,140
expecting however when you do so over WI

1284
00:50:31,710 --> 00:50:36,210
you don't get any sort of output at all

1285
00:50:34,140 --> 00:50:38,100
what you'll see or what you just saw

1286
00:50:36,210 --> 00:50:40,170
like when we started notepad is all you

1287
00:50:38,100 --> 00:50:42,299
get so you see if you have a return code

1288
00:50:40,170 --> 00:50:44,070
of zero the process idea that process

1289
00:50:42,300 --> 00:50:45,450
that you started but if you ran off you

1290
00:50:44,070 --> 00:50:47,610
can fig on a remote system you're not

1291
00:50:45,450 --> 00:50:50,100
getting its IP address information back

1292
00:50:47,610 --> 00:50:52,440
you're just saying yes it was run so

1293
00:50:50,100 --> 00:50:55,470
what I wanted to solve was how can I run

1294
00:50:52,440 --> 00:50:57,930
commands on a remote system and still

1295
00:50:55,470 --> 00:51:00,629
get the output back from it and this is

1296
00:50:57,930 --> 00:51:03,330
solved by shoving long story short

1297
00:51:00,630 --> 00:51:05,190
taking that data story and specific WMI

1298
00:51:03,330 --> 00:51:07,290
property and then retrieving it and you

1299
00:51:05,190 --> 00:51:09,119
can do this all remotely or locally and

1300
00:51:07,290 --> 00:51:11,009
so here's an example of

1301
00:51:09,119 --> 00:51:12,990
running this ipconfig command and we

1302
00:51:11,009 --> 00:51:15,539
were actually in this case going to get

1303
00:51:12,990 --> 00:51:17,999
the output from it so you can use this

1304
00:51:15,539 --> 00:51:20,880
to execute any sort of command at all on

1305
00:51:17,999 --> 00:51:23,328
any system locally or remotely and get

1306
00:51:20,880 --> 00:51:23,329
output

1307
00:51:34,180 --> 00:51:39,830
and that's that's actually really it I

1308
00:51:36,890 --> 00:51:41,900
hope that this kind of helped explain

1309
00:51:39,830 --> 00:51:45,020
what the Vice card is it's a free

1310
00:51:41,900 --> 00:51:48,230
application whitelisting software that's

1311
00:51:45,020 --> 00:51:50,210
available on Windows 10 Server 2016 and

1312
00:51:48,230 --> 00:51:52,280
I wanted to kind of just walk through

1313
00:51:50,210 --> 00:51:54,950
how you actually create rules how you

1314
00:51:52,280 --> 00:51:56,780
can apply them to a system how you can

1315
00:51:54,950 --> 00:51:59,210
start enforcing them and how you can

1316
00:51:56,780 --> 00:52:00,590
also bypass this we actually have a

1317
00:51:59,210 --> 00:52:02,420
couple different blog posts on our

1318
00:52:00,590 --> 00:52:04,220
website if you want something more than

1319
00:52:02,420 --> 00:52:05,810
just a video or this talk that walks

1320
00:52:04,220 --> 00:52:08,120
through the different steps again of

1321
00:52:05,810 --> 00:52:10,759
creating an application or creating a

1322
00:52:08,120 --> 00:52:12,740
Windows Device guard protected lab

1323
00:52:10,760 --> 00:52:15,200
environment and how to create code

1324
00:52:12,740 --> 00:52:16,910
integrity policies and basically apply

1325
00:52:15,200 --> 00:52:19,250
them to your environment so I hope this

1326
00:52:16,910 --> 00:52:20,569
helps thank you for taking the time to

1327
00:52:19,250 --> 00:52:22,370
attend my talk and if you have any

1328
00:52:20,570 --> 00:52:23,420
questions feel free to talk to me

1329
00:52:22,370 --> 00:52:24,759
throughout the day I'm happy to help

1330
00:52:23,420 --> 00:52:27,859
answer thank you

1331
00:52:24,760 --> 00:52:27,859
[Applause]

