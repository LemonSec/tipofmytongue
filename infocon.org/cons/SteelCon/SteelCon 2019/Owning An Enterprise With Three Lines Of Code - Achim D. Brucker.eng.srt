1
00:00:03,029 --> 00:00:07,930
welcome quick question how many of you

2
00:00:05,590 --> 00:00:09,639
we're in the top that just happened in

3
00:00:07,930 --> 00:00:12,190
the same room a couple of minutes ago

4
00:00:09,639 --> 00:00:15,370
Oh actually not so many that's good

5
00:00:12,190 --> 00:00:17,140
because my previous speaker said he

6
00:00:15,370 --> 00:00:18,698
thinks that we are not talking enough

7
00:00:17,140 --> 00:00:21,670
about issues in the software supply

8
00:00:18,699 --> 00:00:26,109
chain and it's rarely ever discussed the

9
00:00:21,670 --> 00:00:28,599
conference's still can't decided to push

10
00:00:26,109 --> 00:00:31,300
that topic and accept the post or talks

11
00:00:28,599 --> 00:00:33,280
and there's quite some overlap but also

12
00:00:31,300 --> 00:00:36,280
for those of you that we're in the last

13
00:00:33,280 --> 00:00:39,160
talk I hope that there's no some new

14
00:00:36,280 --> 00:00:41,020
aspects in my presentation as well even

15
00:00:39,160 --> 00:00:43,870
so a couple of examples you will

16
00:00:41,020 --> 00:00:45,190
recognize are actually the same and a

17
00:00:43,870 --> 00:00:51,070
couple of things

18
00:00:45,190 --> 00:00:52,030
oops will be not new to you quick about

19
00:00:51,070 --> 00:00:55,510
my background

20
00:00:52,030 --> 00:00:57,309
I recently charging University of Exeter

21
00:00:55,510 --> 00:00:59,769
as a professor in cyber security

22
00:00:57,309 --> 00:01:02,468
before that I was a couple of years here

23
00:00:59,770 --> 00:01:04,360
in Sheffield at the University and

24
00:01:02,469 --> 00:01:06,700
before that I was working in the sample

25
00:01:04,360 --> 00:01:10,600
security team of sa P and among that

26
00:01:06,700 --> 00:01:12,880
being involved in solving or trying to

27
00:01:10,600 --> 00:01:15,548
solve the issues of sa P software supply

28
00:01:12,880 --> 00:01:18,100
chain as a peace consumption of open

29
00:01:15,549 --> 00:01:20,740
source so tackling those type of

30
00:01:18,100 --> 00:01:22,720
problems for a development organization

31
00:01:20,740 --> 00:01:25,509
was something like twenty seven thousand

32
00:01:22,720 --> 00:01:27,090
people offers worldwide and you can

33
00:01:25,509 --> 00:01:29,200
guess if you have twenty thousand

34
00:01:27,090 --> 00:01:31,630
developer it's maybe a seven thousand

35
00:01:29,200 --> 00:01:34,950
developers worldwide there's a lot of

36
00:01:31,630 --> 00:01:37,960
external libraries that are consumed

37
00:01:34,950 --> 00:01:40,570
that our potential threat to the

38
00:01:37,960 --> 00:01:44,679
security of the software that is offered

39
00:01:40,570 --> 00:01:47,908
by the company so just this week we've

40
00:01:44,680 --> 00:01:51,610
seen this headlines in the news be a

41
00:01:47,909 --> 00:01:54,759
potentially find q2 GDP our violation

42
00:01:51,610 --> 00:02:00,158
based on a data breach they had last

43
00:01:54,759 --> 00:02:03,729
year um we had two years ago I think it

44
00:02:00,159 --> 00:02:07,329
was Amy Fox also a massive data breach

45
00:02:03,729 --> 00:02:10,209
and what would those two preachers have

46
00:02:07,329 --> 00:02:13,319
in common if we look at the actual root

47
00:02:10,209 --> 00:02:13,319
cause of the preach

48
00:02:14,260 --> 00:02:19,880
we are talking about software

49
00:02:16,760 --> 00:02:22,899
vulnerabilities box the allowed an

50
00:02:19,880 --> 00:02:25,820
attacker to do something malicious in

51
00:02:22,900 --> 00:02:26,630
libraries used by the companies in the

52
00:02:25,820 --> 00:02:28,609
case of BIA

53
00:02:26,630 --> 00:02:31,400
it was a JavaScript library they

54
00:02:28,610 --> 00:02:34,060
included in their website in case of

55
00:02:31,400 --> 00:02:36,710
hickory fox it was a pen she struts

56
00:02:34,060 --> 00:02:39,200
trouble library they used that had a

57
00:02:36,710 --> 00:02:43,910
known vulnerability in there it wasn't

58
00:02:39,200 --> 00:02:48,170
fixed in time by a fox and enabled the

59
00:02:43,910 --> 00:02:51,710
attacker actually to obtain data you

60
00:02:48,170 --> 00:02:53,660
shouldn't be able to obtain so what they

61
00:02:51,710 --> 00:02:56,810
have all in common is that at gum

62
00:02:53,660 --> 00:02:58,910
attacks exploited a non vulnerability we

63
00:02:56,810 --> 00:03:00,170
are not talking about the zero day we

64
00:02:58,910 --> 00:03:04,060
are talking about vulnerabilities that

65
00:03:00,170 --> 00:03:06,260
have been published already as CVEs

66
00:03:04,060 --> 00:03:08,570
fixes where at least for the Apache

67
00:03:06,260 --> 00:03:11,060
struts mom already available at the time

68
00:03:08,570 --> 00:03:13,390
of the attack potentially also exploits

69
00:03:11,060 --> 00:03:16,700
were available publicly freely available

70
00:03:13,390 --> 00:03:20,239
so exploiting those vulnerabilities not

71
00:03:16,700 --> 00:03:20,920
very difficult there in an external

72
00:03:20,240 --> 00:03:23,810
library

73
00:03:20,920 --> 00:03:25,579
neither of them software packs that have

74
00:03:23,810 --> 00:03:30,100
been exploited we're developed by

75
00:03:25,580 --> 00:03:35,030
developers of VA or Equifax but still

76
00:03:30,100 --> 00:03:38,329
most companies are liable for the data

77
00:03:35,030 --> 00:03:41,780
breaches that were enabled by those

78
00:03:38,330 --> 00:03:44,090
vulnerabilities so the first lesson that

79
00:03:41,780 --> 00:03:46,610
we are learning here if you ship a piece

80
00:03:44,090 --> 00:03:48,709
of software here offer the software's a

81
00:03:46,610 --> 00:03:51,050
cloud solution that includes external

82
00:03:48,709 --> 00:03:53,209
libraries you are liable for everything

83
00:03:51,050 --> 00:03:54,410
that you are shipping including the

84
00:03:53,209 --> 00:03:58,340
stuff that you haven't developed

85
00:03:54,410 --> 00:03:59,870
yourself and things are changing let's

86
00:03:58,340 --> 00:04:03,590
have a look how we develop software

87
00:03:59,870 --> 00:04:05,959
today so when I started programming I'm

88
00:04:03,590 --> 00:04:09,050
an old guy that specialized on the

89
00:04:05,959 --> 00:04:11,420
left-hand side I still still needed to

90
00:04:09,050 --> 00:04:14,660
go to a library these big halls with

91
00:04:11,420 --> 00:04:16,399
sparks and started to look for a book

92
00:04:14,660 --> 00:04:17,899
that taught me how to program hello

93
00:04:16,399 --> 00:04:20,179
world

94
00:04:17,899 --> 00:04:23,330
most likely it was a Cebu kanakam Richie

95
00:04:20,180 --> 00:04:25,150
and I had to ride something like 10

96
00:04:23,330 --> 00:04:29,020
lines of C code I could

97
00:04:25,150 --> 00:04:33,460
pilot edit printed hello world I did the

98
00:04:29,020 --> 00:04:36,729
same exercise rather recently I googled

99
00:04:33,460 --> 00:04:39,520
for hello world program how do I do that

100
00:04:36,729 --> 00:04:44,880
and incidentally the first link that I

101
00:04:39,520 --> 00:04:48,789
got was a solution using NPM nodejs

102
00:04:44,880 --> 00:04:51,039
Express libraries actually the amount of

103
00:04:48,789 --> 00:04:54,969
code that I need to type into the system

104
00:04:51,039 --> 00:04:56,259
is roughly the same not all problem code

105
00:04:54,970 --> 00:04:58,660
I have to type a little bit more

106
00:04:56,259 --> 00:05:01,780
configuration it works also pretty

107
00:04:58,660 --> 00:05:06,100
nicely but if I look at what the system

108
00:05:01,780 --> 00:05:08,409
is doing when I'm compiling or they are

109
00:05:06,100 --> 00:05:11,470
configuring the program it's downloading

110
00:05:08,410 --> 00:05:15,070
over 20 external libraries where have no

111
00:05:11,470 --> 00:05:18,250
idea who implemented them nor about

112
00:05:15,070 --> 00:05:19,949
quality they have and honestly not even

113
00:05:18,250 --> 00:05:24,250
what the purpose of those libraries is

114
00:05:19,949 --> 00:05:27,009
so while 20 years ago we were developing

115
00:05:24,250 --> 00:05:28,690
software where most of the software that

116
00:05:27,009 --> 00:05:31,780
we were shipping to customers are

117
00:05:28,690 --> 00:05:33,940
offering it to customers was our own I

118
00:05:31,780 --> 00:05:36,489
visualized that was the red legal clocks

119
00:05:33,940 --> 00:05:37,870
here in that wall which visualizes this

120
00:05:36,490 --> 00:05:41,800
piece of software that we are developing

121
00:05:37,870 --> 00:05:45,220
today it more looks like this much more

122
00:05:41,800 --> 00:05:47,289
colorful only a small fraction of the

123
00:05:45,220 --> 00:05:48,669
code that we are shipping is actually

124
00:05:47,289 --> 00:05:51,789
developed by ourselves

125
00:05:48,669 --> 00:05:55,409
the rest are libraries developed by

126
00:05:51,789 --> 00:05:58,659
anybody on the internet more or less and

127
00:05:55,409 --> 00:06:02,620
that's the second learning that we need

128
00:05:58,659 --> 00:06:04,360
to take keep in mind today most likely

129
00:06:02,620 --> 00:06:06,669
the software the code that you are

130
00:06:04,360 --> 00:06:09,159
writing as a software developer is only

131
00:06:06,669 --> 00:06:13,389
a fraction of the software that you are

132
00:06:09,159 --> 00:06:16,419
offering to customer see I found a nice

133
00:06:13,389 --> 00:06:18,400
comic scrub that visualized that has

134
00:06:16,419 --> 00:06:20,680
fallen I needed to put it into the

135
00:06:18,400 --> 00:06:23,440
presentation because it is so nice so we

136
00:06:20,680 --> 00:06:26,099
have heroes - guys this is the code base

137
00:06:23,440 --> 00:06:31,030
it's amazing how such small things can

138
00:06:26,099 --> 00:06:35,650
do so much and then yeah look what is

139
00:06:31,030 --> 00:06:37,570
underneath a lot of dependencies and it

140
00:06:35,650 --> 00:06:38,409
visualizes nicely at least from my

141
00:06:37,570 --> 00:06:41,320
perspective

142
00:06:38,410 --> 00:06:44,470
that as developers we often do not know

143
00:06:41,320 --> 00:06:46,480
what all those amenities actually do and

144
00:06:44,470 --> 00:06:48,940
we don't know the dependencies of

145
00:06:46,480 --> 00:06:51,000
dependencies of dependencies why they

146
00:06:48,940 --> 00:06:54,400
are actually included in our project

147
00:06:51,000 --> 00:06:58,870
they are just lying there and doing

148
00:06:54,400 --> 00:07:00,940
something while shirt clarification that

149
00:06:58,870 --> 00:07:05,050
I want to add here while I will talk

150
00:07:00,940 --> 00:07:08,580
today mostly about free or open source

151
00:07:05,050 --> 00:07:11,320
software everything what I'm discussing

152
00:07:08,580 --> 00:07:14,400
applies to all types of external

153
00:07:11,320 --> 00:07:16,930
libraries that you can work with

154
00:07:14,400 --> 00:07:19,239
starting from proprietary libraries are

155
00:07:16,930 --> 00:07:21,070
outsourcing where you ask a company to

156
00:07:19,240 --> 00:07:23,290
develop a library that you then are

157
00:07:21,070 --> 00:07:25,360
using or a component that you didn't are

158
00:07:23,290 --> 00:07:28,300
reusing for your actual implementation

159
00:07:25,360 --> 00:07:30,040
over freeware so practice software that

160
00:07:28,300 --> 00:07:32,740
you are not paying for but you don't get

161
00:07:30,040 --> 00:07:36,190
the source code over to open-source

162
00:07:32,740 --> 00:07:39,010
libraries the main reason we are

163
00:07:36,190 --> 00:07:41,890
discussing the topic of software supply

164
00:07:39,010 --> 00:07:46,840
chain issues mostly in the open source

165
00:07:41,890 --> 00:07:50,140
world is twofold firstly they are very

166
00:07:46,840 --> 00:07:54,340
very easy to access for developers if I

167
00:07:50,140 --> 00:07:56,680
have proprietor libraries I need to pay

168
00:07:54,340 --> 00:07:59,320
somebody and that means if a software

169
00:07:56,680 --> 00:08:00,760
developer wants to use such a library he

170
00:07:59,320 --> 00:08:02,830
or she needs to go we are the

171
00:08:00,760 --> 00:08:05,230
procurement department of your company

172
00:08:02,830 --> 00:08:06,810
and that will trigger a couple of bells

173
00:08:05,230 --> 00:08:09,700
and there will be a contract negotiation

174
00:08:06,810 --> 00:08:12,160
where as for the free stuff that is

175
00:08:09,700 --> 00:08:16,330
offered on the Internet a developer can

176
00:08:12,160 --> 00:08:18,880
just downloaded it included so it's the

177
00:08:16,330 --> 00:08:20,380
easy availability that makes this the

178
00:08:18,880 --> 00:08:23,409
area where people are discussing the

179
00:08:20,380 --> 00:08:26,860
supply chain issues more and free where

180
00:08:23,410 --> 00:08:27,340
honestly nowadays is not that important

181
00:08:26,860 --> 00:08:29,800
anymore

182
00:08:27,340 --> 00:08:32,140
most of the freeware that I have seen in

183
00:08:29,800 --> 00:08:36,580
my professional development life we're

184
00:08:32,140 --> 00:08:38,740
actually drivers for hardware so you

185
00:08:36,580 --> 00:08:41,020
have already a support contract with the

186
00:08:38,740 --> 00:08:43,030
company because that company for example

187
00:08:41,020 --> 00:08:45,460
was selling Bluetooth headsets and

188
00:08:43,030 --> 00:08:47,500
you've got some free web driver from

189
00:08:45,460 --> 00:08:49,690
them to talk to that Bluetooth headset

190
00:08:47,500 --> 00:08:52,210
so they are more kind in that

191
00:08:49,690 --> 00:08:56,800
proprietary library side the

192
00:08:52,210 --> 00:08:59,589
in the open source side there's also

193
00:08:56,800 --> 00:09:01,420
licensing issues and open source

194
00:08:59,589 --> 00:09:04,060
software has different licenses and of

195
00:09:01,420 --> 00:09:08,529
course we need to comply to them I will

196
00:09:04,060 --> 00:09:13,739
not discuss that part at all in the next

197
00:09:08,529 --> 00:09:16,480
40 minutes or so who recalls hotplate

198
00:09:13,740 --> 00:09:19,240
big vulnerability in an open and

199
00:09:16,480 --> 00:09:22,750
optimises L of masses Alice a library

200
00:09:19,240 --> 00:09:25,540
that implements TLS that so to speak the

201
00:09:22,750 --> 00:09:27,910
s in HTTP so the core library that

202
00:09:25,540 --> 00:09:29,410
provides the transport encryption for

203
00:09:27,910 --> 00:09:33,939
the websites for most of the websites

204
00:09:29,410 --> 00:09:38,350
that we are accessing in 2014 that

205
00:09:33,940 --> 00:09:39,850
library had a vulnerability while at the

206
00:09:38,350 --> 00:09:40,870
beginning we thought that it's actually

207
00:09:39,850 --> 00:09:43,630
pretty hard to exploit that

208
00:09:40,870 --> 00:09:45,160
vulnerability later on we learned it

209
00:09:43,630 --> 00:09:47,740
it's not that hard and it allowed an

210
00:09:45,160 --> 00:09:50,020
attacker to obtain the private key of a

211
00:09:47,740 --> 00:09:55,270
server so it was actually a rather

212
00:09:50,020 --> 00:09:57,550
severe vulnerability and moreover for

213
00:09:55,270 --> 00:09:59,770
every customer it was easily detectable

214
00:09:57,550 --> 00:10:02,589
which version of open SSL you were using

215
00:09:59,770 --> 00:10:04,540
because that was a library that offered

216
00:10:02,589 --> 00:10:06,490
so to speak and port that your

217
00:10:04,540 --> 00:10:09,370
application offered to the outside world

218
00:10:06,490 --> 00:10:12,700
you only needed to look at the details

219
00:10:09,370 --> 00:10:14,890
of the port configuration Khloe the

220
00:10:12,700 --> 00:10:18,430
hello message and you could kind of see

221
00:10:14,890 --> 00:10:20,740
what version you we're using and the

222
00:10:18,430 --> 00:10:23,319
customers started to call in you are

223
00:10:20,740 --> 00:10:25,930
using a version of open SSL that is

224
00:10:23,320 --> 00:10:28,270
potentially vulnerable are we affected

225
00:10:25,930 --> 00:10:30,880
by that or not and if yes what should we

226
00:10:28,270 --> 00:10:32,890
do and if you are now in the position of

227
00:10:30,880 --> 00:10:34,480
being a security expert or a product

228
00:10:32,890 --> 00:10:37,060
security officer the software

229
00:10:34,480 --> 00:10:39,010
development team you suddenly need to

230
00:10:37,060 --> 00:10:42,119
know which of the products I'm

231
00:10:39,010 --> 00:10:45,360
responsible for is using that library

232
00:10:42,120 --> 00:10:48,310
because they are potentially vulnerable

233
00:10:45,360 --> 00:10:50,050
secondly which of those products are

234
00:10:48,310 --> 00:10:52,540
actually vulnerable because the

235
00:10:50,050 --> 00:10:54,969
vulnerability might lie it in an area of

236
00:10:52,540 --> 00:10:56,829
the library that you are not using it

237
00:10:54,970 --> 00:11:00,730
might be in a feature that you are not

238
00:10:56,829 --> 00:11:02,410
using and then you also want to know if

239
00:11:00,730 --> 00:11:04,570
customers actually already using that

240
00:11:02,410 --> 00:11:07,660
product so there's a lot of questions

241
00:11:04,570 --> 00:11:10,360
that you need to answer very quickly to

242
00:11:07,660 --> 00:11:12,010
satisfy your customers and in parallel

243
00:11:10,360 --> 00:11:15,100
you need to start the process of

244
00:11:12,010 --> 00:11:17,319
deciding if the products that you're

245
00:11:15,100 --> 00:11:19,120
developing can be upgraded to a later

246
00:11:17,320 --> 00:11:22,209
version of that library that includes

247
00:11:19,120 --> 00:11:24,459
already a fix or if that is not

248
00:11:22,209 --> 00:11:27,040
available if there are other methods for

249
00:11:24,459 --> 00:11:30,670
protecting your application against that

250
00:11:27,040 --> 00:11:32,819
vulnerability implement that can go

251
00:11:30,670 --> 00:11:35,620
through your usual testing process and

252
00:11:32,820 --> 00:11:38,079
three to six months later ship a new

253
00:11:35,620 --> 00:11:41,230
version to your customers hopefully not

254
00:11:38,079 --> 00:11:43,359
free to six months later but that's

255
00:11:41,230 --> 00:11:46,900
roughly how commercial software

256
00:11:43,360 --> 00:11:49,779
development works so the initial idea

257
00:11:46,900 --> 00:11:51,939
that people have as yen the open source

258
00:11:49,779 --> 00:11:53,470
guys they are always updating their

259
00:11:51,940 --> 00:11:55,020
libraries and they're fixing

260
00:11:53,470 --> 00:11:58,720
vulnerabilities if they are known so

261
00:11:55,020 --> 00:12:01,600
let's solve that issue but we are always

262
00:11:58,720 --> 00:12:04,260
using the latest version and the update

263
00:12:01,600 --> 00:12:08,560
dependencies as quickly as we can

264
00:12:04,260 --> 00:12:12,520
that seems like a good idea at least on

265
00:12:08,560 --> 00:12:15,130
the first look at it and it works for

266
00:12:12,520 --> 00:12:17,980
certain development or cultures and

267
00:12:15,130 --> 00:12:21,010
certain products if you are for example

268
00:12:17,980 --> 00:12:22,870
a company like this one and if you look

269
00:12:21,010 --> 00:12:26,140
closer to them on those pictures you

270
00:12:22,870 --> 00:12:27,790
will see here those are all people

271
00:12:26,140 --> 00:12:31,089
waiting in line for Apple stores for a

272
00:12:27,790 --> 00:12:33,130
new Apple product Apple at least for

273
00:12:31,089 --> 00:12:35,980
quite a while had that advantage that

274
00:12:33,130 --> 00:12:38,140
people were very keen to upgrade they

275
00:12:35,980 --> 00:12:39,970
had another reason I found a new one

276
00:12:38,140 --> 00:12:43,240
came out they wanted the latest version

277
00:12:39,970 --> 00:12:44,529
if you are in that market it's no

278
00:12:43,240 --> 00:12:46,959
problem you upgrade all your

279
00:12:44,529 --> 00:12:48,790
dependencies in your latest product your

280
00:12:46,959 --> 00:12:51,550
customers will switch immediately to the

281
00:12:48,790 --> 00:12:54,130
latest version and you don't need to

282
00:12:51,550 --> 00:12:56,140
support the old ones anymore that's kind

283
00:12:54,130 --> 00:13:00,339
of what I sketched over here with the

284
00:12:56,140 --> 00:13:02,819
cream bars on the y-axis i sketching the

285
00:13:00,339 --> 00:13:07,420
numbers of customers a product has and

286
00:13:02,820 --> 00:13:10,329
on the x-axis when was the product

287
00:13:07,420 --> 00:13:12,430
originally released and we see here the

288
00:13:10,329 --> 00:13:15,430
green part most customers are kind of

289
00:13:12,430 --> 00:13:18,099
using the latest or the version prior to

290
00:13:15,430 --> 00:13:18,550
the latest release if you're in that

291
00:13:18,100 --> 00:13:20,920
kind

292
00:13:18,550 --> 00:13:23,229
of business that process more days are

293
00:13:20,920 --> 00:13:26,410
in that kind of scenario they are doing

294
00:13:23,230 --> 00:13:28,930
auto-updates themselves Adobe Acrobat

295
00:13:26,410 --> 00:13:32,469
Reader switched to that model a couple

296
00:13:28,930 --> 00:13:34,870
of years ago then the idea of upgrading

297
00:13:32,470 --> 00:13:38,339
your dependencies as quickly as possible

298
00:13:34,870 --> 00:13:41,920
works nicely if you are more in a

299
00:13:38,339 --> 00:13:43,990
conservative business environment let's

300
00:13:41,920 --> 00:13:47,529
say you're producing enterprise resource

301
00:13:43,990 --> 00:13:49,329
planning systems like se PD does or

302
00:13:47,529 --> 00:13:52,390
you're developing systems that are hard

303
00:13:49,329 --> 00:13:55,000
to upgrade IO teen and then have a long

304
00:13:52,390 --> 00:13:57,970
lifespan your smart car that you want to

305
00:13:55,000 --> 00:14:00,579
use in 15 20 years still then you are

306
00:13:57,970 --> 00:14:03,100
suddenly in the business where most of

307
00:14:00,579 --> 00:14:06,579
your customers are using systems that

308
00:14:03,100 --> 00:14:08,079
you release 10 years ago and then of

309
00:14:06,579 --> 00:14:10,239
course all the dependencies they are

310
00:14:08,079 --> 00:14:15,310
using in the systems they have in the

311
00:14:10,240 --> 00:14:17,620
field are also 10 years old and there

312
00:14:15,310 --> 00:14:19,930
are open source projects like for

313
00:14:17,620 --> 00:14:22,390
example a number of the Apache projects

314
00:14:19,930 --> 00:14:26,319
that have maintenance life cycles of 8

315
00:14:22,390 --> 00:14:29,199
years a lot do not have and then that

316
00:14:26,320 --> 00:14:32,560
leads your application tools update that

317
00:14:29,200 --> 00:14:36,100
library to fix bugs in them to decide if

318
00:14:32,560 --> 00:14:40,300
you can down create something so always

319
00:14:36,100 --> 00:14:43,570
being very fast doesn't work and there's

320
00:14:40,300 --> 00:14:47,949
actually another risk in upgrading your

321
00:14:43,570 --> 00:14:53,200
dependencies as quickly as you can that

322
00:14:47,950 --> 00:14:57,970
wasn't used two years ago and that was

323
00:14:53,200 --> 00:14:59,890
literally a developer who retracted note

324
00:14:57,970 --> 00:15:01,540
packages that he diamond that he

325
00:14:59,890 --> 00:15:05,040
developed and they were down to three

326
00:15:01,540 --> 00:15:07,959
lines of code and that then goes also

327
00:15:05,040 --> 00:15:09,579
opens up the question does it make sense

328
00:15:07,959 --> 00:15:12,069
to use an external library if the

329
00:15:09,579 --> 00:15:13,989
complexity of that library there's three

330
00:15:12,070 --> 00:15:16,839
simple lines of code and effectively in

331
00:15:13,990 --> 00:15:17,820
addition of two integers that is

332
00:15:16,839 --> 00:15:20,920
debatable

333
00:15:17,820 --> 00:15:24,279
anyway he pulled them off node and

334
00:15:20,920 --> 00:15:26,589
suddenly a hell out of Bill processes

335
00:15:24,279 --> 00:15:28,570
from companies didn't work anymore

336
00:15:26,589 --> 00:15:31,060
because they were automatically pulling

337
00:15:28,570 --> 00:15:32,270
the packages from the and VM repository

338
00:15:31,060 --> 00:15:37,780
the package was

339
00:15:32,270 --> 00:15:41,000
there and yeah the boat stopped and

340
00:15:37,780 --> 00:15:43,610
partly cloud systems software service

341
00:15:41,000 --> 00:15:47,300
offerings will no longer be available to

342
00:15:43,610 --> 00:15:49,610
companies mmm not a good idea but hey

343
00:15:47,300 --> 00:15:51,290
that's more of a safety issue that's not

344
00:15:49,610 --> 00:15:54,470
really a security issue

345
00:15:51,290 --> 00:15:57,620
hey it's affect availability but there's

346
00:15:54,470 --> 00:16:00,620
no data breach involved hmm when I'm

347
00:15:57,620 --> 00:16:03,830
reading a rat that also what I've seen

348
00:16:00,620 --> 00:16:06,460
in my industrial life I thought that's

349
00:16:03,830 --> 00:16:10,040
actually the quick way of getting rich

350
00:16:06,460 --> 00:16:11,840
you publish a small module that's sane

351
00:16:10,040 --> 00:16:14,240
and p.m. module for checking the

352
00:16:11,840 --> 00:16:16,430
validity of credit card numbers if the

353
00:16:14,240 --> 00:16:18,410
number a user entered is actually a

354
00:16:16,430 --> 00:16:21,140
credit card number that's a useful tool

355
00:16:18,410 --> 00:16:24,319
it's not unlikely that if you publish

356
00:16:21,140 --> 00:16:26,480
that that after a while some large

357
00:16:24,320 --> 00:16:29,360
companies are using those modules in

358
00:16:26,480 --> 00:16:31,520
their website and then you start adding

359
00:16:29,360 --> 00:16:33,890
some code to it that since the credit

360
00:16:31,520 --> 00:16:35,780
card numbers the credit card data in

361
00:16:33,890 --> 00:16:39,350
addition to their servers also to your

362
00:16:35,780 --> 00:16:41,569
server and you push an update and you

363
00:16:39,350 --> 00:16:42,920
just wait you make it a minor update

364
00:16:41,570 --> 00:16:44,420
there's a high likelihood they

365
00:16:42,920 --> 00:16:46,520
automatically switch to the latest

366
00:16:44,420 --> 00:16:48,380
version and then you just sit there and

367
00:16:46,520 --> 00:16:51,410
collect credit card numbers and do

368
00:16:48,380 --> 00:16:53,930
whatever you want to do with them and of

369
00:16:51,410 --> 00:16:57,290
course the same scheme can be applied to

370
00:16:53,930 --> 00:17:00,349
web services JavaScript libraries that

371
00:16:57,290 --> 00:17:04,879
are offered we are Syrians so it's not

372
00:17:00,350 --> 00:17:07,490
bound to package managers as such wait

373
00:17:04,880 --> 00:17:11,380
that will never work who would be stupid

374
00:17:07,490 --> 00:17:14,270
enough to do that hmm

375
00:17:11,380 --> 00:17:18,589
recall everybody can publish NPM

376
00:17:14,270 --> 00:17:22,790
packages and one reason why there are so

377
00:17:18,589 --> 00:17:25,639
many packages for NPM or tighten on the

378
00:17:22,790 --> 00:17:28,369
PIP repository is actually that it is so

379
00:17:25,640 --> 00:17:31,310
easy to publish packages and there is no

380
00:17:28,369 --> 00:17:35,540
heavyweight process in validation code

381
00:17:31,310 --> 00:17:37,909
reviews and the like it's an open market

382
00:17:35,540 --> 00:17:40,340
everybody can offer something and it's

383
00:17:37,910 --> 00:17:42,290
the responsibility of the consuming

384
00:17:40,340 --> 00:17:46,330
party to check that whatever I'm

385
00:17:42,290 --> 00:17:49,840
consuming fits the purpose so let's

386
00:17:46,330 --> 00:17:54,908
you see they are not checked so it might

387
00:17:49,840 --> 00:17:57,760
actually work and indeed there are

388
00:17:54,909 --> 00:17:59,320
attacks like type scoring so which one

389
00:17:57,760 --> 00:18:02,980
of the three packages is actually

390
00:17:59,320 --> 00:18:06,789
CoffeeScript CoffeeScript with and

391
00:18:02,980 --> 00:18:10,750
without - we have camelcase um actually

392
00:18:06,789 --> 00:18:16,090
none of them ah it's CoffeeScript with

393
00:18:10,750 --> 00:18:19,210
too easy and without an - if I publish

394
00:18:16,090 --> 00:18:21,428
one of those packages for sure with the

395
00:18:19,210 --> 00:18:24,399
wrong names there is also a likelihood

396
00:18:21,429 --> 00:18:26,200
that somebody will use them and that's

397
00:18:24,399 --> 00:18:27,518
the type of attack and then of course

398
00:18:26,200 --> 00:18:29,080
there are all those type of attacks

399
00:18:27,519 --> 00:18:32,500
while attacking the developer of a

400
00:18:29,080 --> 00:18:35,820
benign library compromising accounts to

401
00:18:32,500 --> 00:18:39,309
social engineering try to commit a patch

402
00:18:35,820 --> 00:18:43,899
to a repository that fixes some issue

403
00:18:39,309 --> 00:18:45,970
and Nick Peggy pick back something that

404
00:18:43,899 --> 00:18:52,570
that's something that is to my advantage

405
00:18:45,970 --> 00:18:56,740
so there are ways and one example does a

406
00:18:52,570 --> 00:18:58,928
case where somebody included cryptic

407
00:18:56,740 --> 00:19:00,580
warning mining whore but mining code

408
00:18:58,929 --> 00:19:03,159
actually code for stealing

409
00:19:00,580 --> 00:19:05,320
cryptocurrencies from a wallet into a

410
00:19:03,159 --> 00:19:09,789
JavaScript library and that got

411
00:19:05,320 --> 00:19:12,510
published on NPM and that is also that

412
00:19:09,789 --> 00:19:17,408
was actually a targeted attack and

413
00:19:12,510 --> 00:19:20,019
several yeah inconveniences came

414
00:19:17,409 --> 00:19:25,809
together it started with that one

415
00:19:20,019 --> 00:19:28,269
library that is widely used event stream

416
00:19:25,809 --> 00:19:30,090
got in your maintainer that you maintain

417
00:19:28,269 --> 00:19:33,580
are started to refactor the code

418
00:19:30,090 --> 00:19:35,889
improved the library by doing that he

419
00:19:33,580 --> 00:19:39,010
added the dependency to a javascript

420
00:19:35,889 --> 00:19:43,389
library called flatmap stream nothing

421
00:19:39,010 --> 00:19:48,240
bad there that change in maintainer was

422
00:19:43,389 --> 00:19:51,299
of a regular maintenance which happens

423
00:19:48,240 --> 00:19:55,690
he published that as a major version

424
00:19:51,299 --> 00:19:57,760
which means that users of the event

425
00:19:55,690 --> 00:19:59,960
stream library did not automatically

426
00:19:57,760 --> 00:20:02,539
upgrade their systems and menu

427
00:19:59,960 --> 00:20:09,350
upgrade was required for moving to that

428
00:20:02,539 --> 00:20:10,730
new version having no sorry that was

429
00:20:09,350 --> 00:20:12,289
still a minor update so the people

430
00:20:10,730 --> 00:20:14,360
automatically upgrade to the version

431
00:20:12,289 --> 00:20:17,809
that suddenly required that additional

432
00:20:14,360 --> 00:20:19,729
library then actually he reverted that

433
00:20:17,809 --> 00:20:22,340
change but published that as a major

434
00:20:19,730 --> 00:20:25,070
version which meant that people would

435
00:20:22,340 --> 00:20:28,428
need it wouldn't have to new upgrade

436
00:20:25,070 --> 00:20:30,830
manually so a lot of people were still

437
00:20:28,429 --> 00:20:36,070
on that version requiring flat map

438
00:20:30,830 --> 00:20:38,869
stream and then somebody was able to add

439
00:20:36,070 --> 00:20:40,999
through a new release of that midstream

440
00:20:38,869 --> 00:20:44,178
and it's unclear if that was

441
00:20:40,999 --> 00:20:46,159
intentionally if that was a bad guy I'm

442
00:20:44,179 --> 00:20:49,279
also removed or the github accounts here

443
00:20:46,159 --> 00:20:51,409
for that reason a minor release to the

444
00:20:49,279 --> 00:20:56,210
flat map stream library that contains

445
00:20:51,409 --> 00:21:00,200
some payload for stealing currencies

446
00:20:56,210 --> 00:21:02,779
money from a crypto wallet and that was

447
00:21:00,200 --> 00:21:05,119
a minor update so all people using this

448
00:21:02,779 --> 00:21:07,519
version of event stream automatically

449
00:21:05,119 --> 00:21:12,189
pulled that update and potentially we're

450
00:21:07,519 --> 00:21:15,830
under attack so we see that in real life

451
00:21:12,190 --> 00:21:18,110
okay that is attacking the users of a

452
00:21:15,830 --> 00:21:21,830
library in the unit actually the users

453
00:21:18,110 --> 00:21:24,678
of a system that uses a library now

454
00:21:21,830 --> 00:21:27,289
let's come to something different not

455
00:21:24,679 --> 00:21:30,490
completely slightly different there are

456
00:21:27,289 --> 00:21:34,279
also a text that we are seeing like

457
00:21:30,490 --> 00:21:36,950
Rimmer I followed that's a small not

458
00:21:34,279 --> 00:21:39,740
module that somebody published just to

459
00:21:36,950 --> 00:21:43,669
demonstrate the impact and if we look

460
00:21:39,740 --> 00:21:46,429
closely at the package Jason of that

461
00:21:43,669 --> 00:21:49,490
module we see in line seven an

462
00:21:46,429 --> 00:21:54,289
interesting command being executed as a

463
00:21:49,490 --> 00:21:56,840
pre-installed command that's the attempt

464
00:21:54,289 --> 00:22:01,730
on a unique system or Linux system to

465
00:21:56,840 --> 00:22:05,840
delete all files luckily the effect is

466
00:22:01,730 --> 00:22:07,940
not as bad at the sound attempts of

467
00:22:05,840 --> 00:22:10,279
doing that on a Linux system you should

468
00:22:07,940 --> 00:22:12,019
be reveal that the system this rather

469
00:22:10,279 --> 00:22:13,370
quickly in a state where it can't delete

470
00:22:12,019 --> 00:22:15,590
any forever files

471
00:22:13,370 --> 00:22:18,159
before it actually deletes a lot of user

472
00:22:15,590 --> 00:22:21,169
data but don't try that at home

473
00:22:18,160 --> 00:22:25,790
um this is an attack against your boot

474
00:22:21,170 --> 00:22:28,130
system you are using the library you

475
00:22:25,790 --> 00:22:30,920
consume that library and wherever you

476
00:22:28,130 --> 00:22:33,590
built software that consumes that

477
00:22:30,920 --> 00:22:37,130
library there's a potential risk that it

478
00:22:33,590 --> 00:22:40,370
deletes all your files and this is not

479
00:22:37,130 --> 00:22:42,920
the only type of such an attack that was

480
00:22:40,370 --> 00:22:44,929
also that's a nice real attack where

481
00:22:42,920 --> 00:22:48,650
somebody published a package called

482
00:22:44,930 --> 00:22:51,770
cross n and there is actually a package

483
00:22:48,650 --> 00:22:55,010
which has a very similar name which is

484
00:22:51,770 --> 00:22:59,690
benign but that benign package is

485
00:22:55,010 --> 00:23:02,450
written with a hyphen and we see that in

486
00:22:59,690 --> 00:23:05,450
line 15 over in the script that

487
00:23:02,450 --> 00:23:08,390
malicious code depends on the benign

488
00:23:05,450 --> 00:23:11,450
version and by that easily provides the

489
00:23:08,390 --> 00:23:13,540
same functionality so people using that

490
00:23:11,450 --> 00:23:18,800
malicious version get actually the

491
00:23:13,540 --> 00:23:22,370
functionality they want and but it's

492
00:23:18,800 --> 00:23:24,460
also a pre post install script and if we

493
00:23:22,370 --> 00:23:29,870
look at the post install script and

494
00:23:24,460 --> 00:23:31,880
inspect that closely we see that it

495
00:23:29,870 --> 00:23:34,669
sends data to a remote house that's

496
00:23:31,880 --> 00:23:38,890
configured in line y line one

497
00:23:34,670 --> 00:23:44,000
I only just simplified that to evil comm

498
00:23:38,890 --> 00:23:45,740
there is some option going on in sense

499
00:23:44,000 --> 00:23:48,860
of that data is being converted to

500
00:23:45,740 --> 00:23:50,690
base64 so that it's firstly isn't the

501
00:23:48,860 --> 00:23:52,699
structure in transport and secondly it's

502
00:23:50,690 --> 00:23:56,630
not that obvious what the system is

503
00:23:52,700 --> 00:23:59,780
transmitting and that data is actually

504
00:23:56,630 --> 00:24:03,680
sent to the server controlled by the

505
00:23:59,780 --> 00:24:06,200
attacker and the data being sent that is

506
00:24:03,680 --> 00:24:07,670
specified in line three is all the

507
00:24:06,200 --> 00:24:11,870
environment variables on your build

508
00:24:07,670 --> 00:24:15,470
system this is a very hard to detect

509
00:24:11,870 --> 00:24:16,909
attack because you get the functionality

510
00:24:15,470 --> 00:24:22,510
that you wanted you get the

511
00:24:16,910 --> 00:24:24,800
functionality of cross and nothing is

512
00:24:22,510 --> 00:24:27,050
changed in the actual functionality

513
00:24:24,800 --> 00:24:28,520
being expected the only side effect as

514
00:24:27,050 --> 00:24:31,669
whenever you build something with that

515
00:24:28,520 --> 00:24:33,740
library the environment variables of

516
00:24:31,670 --> 00:24:37,160
your blood server are being exported to

517
00:24:33,740 --> 00:24:38,950
the outside and if you consider what you

518
00:24:37,160 --> 00:24:41,240
often do were curing development

519
00:24:38,950 --> 00:24:45,110
environment variables in the boots about

520
00:24:41,240 --> 00:24:48,110
often contain information about database

521
00:24:45,110 --> 00:24:54,429
servers account names and often

522
00:24:48,110 --> 00:24:57,229
passwords to some legacy systems some

523
00:24:54,430 --> 00:25:01,630
database systems whatsoever so that

524
00:24:57,230 --> 00:25:04,310
isn't interesting information the

525
00:25:01,630 --> 00:25:07,520
question now is how actually did we

526
00:25:04,310 --> 00:25:10,970
detect that issue and that was detected

527
00:25:07,520 --> 00:25:13,400
by a developer so no security team found

528
00:25:10,970 --> 00:25:16,700
that issue most likely no security team

529
00:25:13,400 --> 00:25:18,530
looked at that they might have looked at

530
00:25:16,700 --> 00:25:21,320
the original cross and package and that

531
00:25:18,530 --> 00:25:25,190
is fine but not at that type squatting

532
00:25:21,320 --> 00:25:27,560
attempt one that was actually developer

533
00:25:25,190 --> 00:25:29,690
user of that library who then said hey

534
00:25:27,560 --> 00:25:33,950
there's actually a similar package and

535
00:25:29,690 --> 00:25:36,820
it does something strange that doesn't

536
00:25:33,950 --> 00:25:39,110
look good so lucky me that person

537
00:25:36,820 --> 00:25:40,939
detected that and made the original

538
00:25:39,110 --> 00:25:46,540
author aware of that and in the meantime

539
00:25:40,940 --> 00:25:49,970
a note is installing safety packages on

540
00:25:46,540 --> 00:25:52,580
NPM that plucked those names so that

541
00:25:49,970 --> 00:25:54,320
other people cannot upload similar

542
00:25:52,580 --> 00:25:56,870
packages but of course that only works

543
00:25:54,320 --> 00:25:58,370
for trap spreading spotting a text where

544
00:25:56,870 --> 00:26:02,320
somebody already tried to attack the

545
00:25:58,370 --> 00:26:04,760
system note can of course not

546
00:26:02,320 --> 00:26:06,950
overpopulate the complete namespace for

547
00:26:04,760 --> 00:26:10,480
packages of all type of misspellings of

548
00:26:06,950 --> 00:26:14,360
benign node packages that's impossible

549
00:26:10,480 --> 00:26:16,970
so the rest of my talk I would like to

550
00:26:14,360 --> 00:26:18,889
look at how to minimize that risk I'm

551
00:26:16,970 --> 00:26:21,920
not claiming that I can solve those

552
00:26:18,890 --> 00:26:24,650
problems and I can say all righty now

553
00:26:21,920 --> 00:26:27,830
there is no silver bullet that works for

554
00:26:24,650 --> 00:26:29,990
everybody in every situation but there

555
00:26:27,830 --> 00:26:32,870
are a couple of things that have proven

556
00:26:29,990 --> 00:26:35,480
to work nicely and at least help to

557
00:26:32,870 --> 00:26:37,100
minimize the risk and again you need to

558
00:26:35,480 --> 00:26:39,230
pick those that work for your

559
00:26:37,100 --> 00:26:42,879
organization for your style of

560
00:26:39,230 --> 00:26:42,880
programming for your product

561
00:26:43,460 --> 00:26:50,280
so let's look the first initial idea of

562
00:26:47,550 --> 00:26:52,200
courses we have an stl CB have a

563
00:26:50,280 --> 00:26:55,290
security development lifecycle that we

564
00:26:52,200 --> 00:26:58,410
use for developing our own software

565
00:26:55,290 --> 00:27:00,920
right and we have coding styles and we

566
00:26:58,410 --> 00:27:04,080
have security testing to aesthetic tools

567
00:27:00,920 --> 00:27:05,370
why not use them to check all the open

568
00:27:04,080 --> 00:27:09,360
source that we are including in our

569
00:27:05,370 --> 00:27:16,379
product sounds like a good idea being

570
00:27:09,360 --> 00:27:18,750
there done that doesn't work you have no

571
00:27:16,380 --> 00:27:20,760
chance of reviewing the code of open

572
00:27:18,750 --> 00:27:25,110
source products that quickly as

573
00:27:20,760 --> 00:27:28,740
developers request them and often you

574
00:27:25,110 --> 00:27:31,439
have no idea how those open source tools

575
00:27:28,740 --> 00:27:36,150
work and you don't have the expertise to

576
00:27:31,440 --> 00:27:37,830
do a security review on them even if

577
00:27:36,150 --> 00:27:40,320
you're only a mid-sized company I would

578
00:27:37,830 --> 00:27:43,649
expect that you're consuming open source

579
00:27:40,320 --> 00:27:46,320
in at least five programming languages

580
00:27:43,650 --> 00:27:48,840
that none of your developer is using on

581
00:27:46,320 --> 00:27:52,310
a daily basis being that you are

582
00:27:48,840 --> 00:27:57,360
suddenly using haskell implementations

583
00:27:52,310 --> 00:27:59,490
being aligned scala whatever you will

584
00:27:57,360 --> 00:28:01,199
use open source libraries where you

585
00:27:59,490 --> 00:28:03,300
don't have expertise in the programming

586
00:28:01,200 --> 00:28:08,520
language being used or in the boat

587
00:28:03,300 --> 00:28:11,399
system um so that isn't working and I

588
00:28:08,520 --> 00:28:15,060
wasted quite some time in my life doing

589
00:28:11,400 --> 00:28:17,550
that I wouldn't recommend it what I

590
00:28:15,060 --> 00:28:20,340
would recommend if you are assigning a

591
00:28:17,550 --> 00:28:22,230
new application think about how you

592
00:28:20,340 --> 00:28:26,510
handle and process data in your

593
00:28:22,230 --> 00:28:30,450
application and try to minimize the

594
00:28:26,510 --> 00:28:36,540
amount of exposures critical data to

595
00:28:30,450 --> 00:28:39,420
external libraries um if your system is

596
00:28:36,540 --> 00:28:41,460
having credit card data think which

597
00:28:39,420 --> 00:28:44,070
parts of the system actually need to see

598
00:28:41,460 --> 00:28:45,810
that credit card data and don't pass it

599
00:28:44,070 --> 00:28:48,149
without a good reason

600
00:28:45,810 --> 00:28:51,300
we are a third party library that you

601
00:28:48,150 --> 00:28:53,700
are not controlling minimize the number

602
00:28:51,300 --> 00:28:54,980
of libraries or software components that

603
00:28:53,700 --> 00:28:57,350
see critical data

604
00:28:54,980 --> 00:29:01,580
that's in general a good recommendation

605
00:28:57,350 --> 00:29:03,769
for building secure systems minimize the

606
00:29:01,580 --> 00:29:08,029
amount of source source code or

607
00:29:03,769 --> 00:29:10,669
components that you need to trust it's a

608
00:29:08,029 --> 00:29:13,820
form of trusted computing with the goal

609
00:29:10,669 --> 00:29:17,149
of minimizing the trusted core and then

610
00:29:13,820 --> 00:29:19,600
you can invest all effort or most of

611
00:29:17,149 --> 00:29:22,969
your security efforts on that hopefully

612
00:29:19,600 --> 00:29:26,269
comparatively small trusted core because

613
00:29:22,970 --> 00:29:28,669
you know that the big part outside of

614
00:29:26,269 --> 00:29:32,630
the trusted core is not processing

615
00:29:28,669 --> 00:29:35,960
critical data so it helps you to focus

616
00:29:32,630 --> 00:29:38,809
your security efforts that's clearly a

617
00:29:35,960 --> 00:29:43,130
good recommendation second select your

618
00:29:38,809 --> 00:29:45,740
dependencies wisely um yeah by not only

619
00:29:43,130 --> 00:29:50,000
in select open source dependencies that

620
00:29:45,740 --> 00:29:52,639
are secure one idea that we looked at is

621
00:29:50,000 --> 00:29:54,909
let's look how many CVS where have been

622
00:29:52,639 --> 00:29:57,139
published for an open source library

623
00:29:54,909 --> 00:30:01,820
secure library shouldn't have a lot of

624
00:29:57,139 --> 00:30:04,639
CVS right hmm doesn't work either our

625
00:30:01,820 --> 00:30:08,210
research showed that number of CVS that

626
00:30:04,639 --> 00:30:10,340
are published for open source library

627
00:30:08,210 --> 00:30:12,620
mostly correlates with the numbers of

628
00:30:10,340 --> 00:30:18,379
users of that library and the age of the

629
00:30:12,620 --> 00:30:19,789
library kind of understandable if you

630
00:30:18,380 --> 00:30:22,070
have more users there's a higher

631
00:30:19,789 --> 00:30:24,289
likelihood of security issues being

632
00:30:22,070 --> 00:30:25,129
detected and if something is used for a

633
00:30:24,289 --> 00:30:27,980
very long time

634
00:30:25,130 --> 00:30:30,019
people also have more time to find

635
00:30:27,980 --> 00:30:33,200
issues there's also higher likelihood so

636
00:30:30,019 --> 00:30:35,210
it's kind of not at least in hindsight

637
00:30:33,200 --> 00:30:39,350
not so surprising that these are

638
00:30:35,210 --> 00:30:41,559
important factors um actually one can

639
00:30:39,350 --> 00:30:44,178
find an argument the other way around

640
00:30:41,559 --> 00:30:45,918
libraries that have a lot of CVE values

641
00:30:44,179 --> 00:30:48,470
that showed that the issues have been

642
00:30:45,919 --> 00:30:51,080
fixed have actually a good security

643
00:30:48,470 --> 00:30:52,669
culture they are aware of the problem

644
00:30:51,080 --> 00:30:54,889
and in particular if we are talking

645
00:30:52,669 --> 00:30:58,190
about libraries with made or 10 years

646
00:30:54,889 --> 00:31:01,428
maintenance life cycle the number can be

647
00:30:58,190 --> 00:31:03,289
pretty large and there are still eight

648
00:31:01,429 --> 00:31:06,740
years maintenance life cycle means they

649
00:31:03,289 --> 00:31:08,500
have been released in 2011 that were

650
00:31:06,740 --> 00:31:10,960
still times were secure

651
00:31:08,500 --> 00:31:13,540
he wasn't that important or that much on

652
00:31:10,960 --> 00:31:17,200
our plate than it is today so there are

653
00:31:13,540 --> 00:31:18,970
still legacy bugs in there so just

654
00:31:17,200 --> 00:31:23,200
looking at CV numbers doesn't work

655
00:31:18,970 --> 00:31:25,090
either but there are factors that help

656
00:31:23,200 --> 00:31:27,460
you to decide is there an active

657
00:31:25,090 --> 00:31:29,320
development community with the acumen if

658
00:31:27,460 --> 00:31:30,850
they're active developers there's a

659
00:31:29,320 --> 00:31:34,060
higher likelihood that somebody will

660
00:31:30,850 --> 00:31:35,620
find issues and fix them the other

661
00:31:34,060 --> 00:31:37,929
extremists of the library has no

662
00:31:35,620 --> 00:31:39,280
development community then clearly if

663
00:31:37,930 --> 00:31:40,840
you are using that library

664
00:31:39,280 --> 00:31:42,370
you're becoming a maintainer of that

665
00:31:40,840 --> 00:31:44,620
library and taking over the

666
00:31:42,370 --> 00:31:46,899
responsibility if not for the public

667
00:31:44,620 --> 00:31:51,820
then at least for your own development

668
00:31:46,900 --> 00:31:53,500
teams nobody around that if you have

669
00:31:51,820 --> 00:31:56,679
libraries that offer the same sound

670
00:31:53,500 --> 00:31:59,320
functionality it's usually a good idea

671
00:31:56,680 --> 00:32:01,000
to use the library that is implemented

672
00:31:59,320 --> 00:32:03,520
in a programming language that you feel

673
00:32:01,000 --> 00:32:05,740
confident in that uses in the Erb the

674
00:32:03,520 --> 00:32:07,150
build system that you know and not

675
00:32:05,740 --> 00:32:09,640
something that uses from your

676
00:32:07,150 --> 00:32:12,030
perspective and I'm not touching any

677
00:32:09,640 --> 00:32:15,430
programming language here an exotic

678
00:32:12,030 --> 00:32:17,470
system if you are has the programming

679
00:32:15,430 --> 00:32:19,900
shop then choose the haskell library

680
00:32:17,470 --> 00:32:20,500
over the java version if you are a chav

681
00:32:19,900 --> 00:32:22,300
our shop

682
00:32:20,500 --> 00:32:24,430
then the chava version might is the

683
00:32:22,300 --> 00:32:26,830
better solution because you don't have x

684
00:32:24,430 --> 00:32:28,450
haskell expertise it's not a statement

685
00:32:26,830 --> 00:32:32,919
that one language is better than the

686
00:32:28,450 --> 00:32:36,130
other check that it fits your support

687
00:32:32,920 --> 00:32:38,860
release strategy a lot of the

688
00:32:36,130 --> 00:32:40,960
enterprise-ready apache software like

689
00:32:38,860 --> 00:32:42,879
Tomcat they have an eight year

690
00:32:40,960 --> 00:32:45,550
maintenance lifecycle so if you're on

691
00:32:42,880 --> 00:32:47,080
the business of offering yourself five

692
00:32:45,550 --> 00:32:51,250
six years of maintenance to your

693
00:32:47,080 --> 00:32:53,620
customers that's a good choice a lot of

694
00:32:51,250 --> 00:32:55,900
JavaScript libraries they only support

695
00:32:53,620 --> 00:32:58,479
the latest release and maybe one release

696
00:32:55,900 --> 00:33:00,910
version earlier today more have a

697
00:32:58,480 --> 00:33:04,170
maintenance lifecycle of a year or maybe

698
00:33:00,910 --> 00:33:06,280
even shorter that might not be the right

699
00:33:04,170 --> 00:33:08,500
dependency for a product with a long

700
00:33:06,280 --> 00:33:11,260
maintenance life cycle if you are

701
00:33:08,500 --> 00:33:13,390
yourself offering only half a year of

702
00:33:11,260 --> 00:33:15,760
maintenance life cycle or your pure

703
00:33:13,390 --> 00:33:17,290
cloud-based product where you can't

704
00:33:15,760 --> 00:33:19,480
change the versions whenever you like

705
00:33:17,290 --> 00:33:22,550
then let us know this is not an

706
00:33:19,480 --> 00:33:25,730
important criteria for you

707
00:33:22,550 --> 00:33:27,919
there are indicators light if the open

708
00:33:25,730 --> 00:33:30,890
source projects publish one abilities

709
00:33:27,920 --> 00:33:33,470
not necessarily in the CVE it's not

710
00:33:30,890 --> 00:33:36,050
mandatory to publish vulnerabilities in

711
00:33:33,470 --> 00:33:38,420
the CVE so it's completely fine if they

712
00:33:36,050 --> 00:33:42,320
do it on a dedicated website on their

713
00:33:38,420 --> 00:33:44,810
project webpage but if they communicate

714
00:33:42,320 --> 00:33:48,530
clearly the security vulnerabilities

715
00:33:44,810 --> 00:33:50,600
they have they fix them in time if they

716
00:33:48,530 --> 00:33:52,580
have for example a communication channel

717
00:33:50,600 --> 00:33:55,820
where you can notify them about security

718
00:33:52,580 --> 00:33:57,710
issues in a secretive in a private

719
00:33:55,820 --> 00:33:59,300
manner so that you are not creating a

720
00:33:57,710 --> 00:34:01,640
similar day when notifying them about

721
00:33:59,300 --> 00:34:05,000
security issues that are all indicators

722
00:34:01,640 --> 00:34:07,100
of a good security culture and the Linux

723
00:34:05,000 --> 00:34:08,540
Foundation actually has an initiative

724
00:34:07,100 --> 00:34:10,880
called the core infrastructure

725
00:34:08,540 --> 00:34:14,330
initiative that looks at these kind

726
00:34:10,880 --> 00:34:18,860
effectors and hands out patches to the

727
00:34:14,330 --> 00:34:21,679
projects the initiative is now four

728
00:34:18,860 --> 00:34:25,100
years old and we are seeing more and

729
00:34:21,679 --> 00:34:28,399
more projects getting poor silver or

730
00:34:25,100 --> 00:34:30,469
gold patches they are not yet they're

731
00:34:28,399 --> 00:34:34,219
shown that prominently on websites at

732
00:34:30,469 --> 00:34:35,959
least I haven't seen them but that is of

733
00:34:34,219 --> 00:34:40,279
course another indicator that helps you

734
00:34:35,960 --> 00:34:44,270
in deciding and then also smaller

735
00:34:40,280 --> 00:34:47,899
components might have the smaller attack

736
00:34:44,270 --> 00:34:50,330
surface I've seen usages of Apache

737
00:34:47,899 --> 00:34:54,109
common which is already a pretty large

738
00:34:50,330 --> 00:34:56,239
Java library and the people are only

739
00:34:54,110 --> 00:34:59,960
using one small function of three lines

740
00:34:56,239 --> 00:35:02,870
of code then one good question by using

741
00:34:59,960 --> 00:35:07,220
mixture library but not only implement

742
00:35:02,870 --> 00:35:08,930
off.we lines yourself because also

743
00:35:07,220 --> 00:35:10,370
vulnerabilities that are in

744
00:35:08,930 --> 00:35:13,100
functionalities that you are not

745
00:35:10,370 --> 00:35:14,839
actively using might endanger your

746
00:35:13,100 --> 00:35:17,000
product and might require you to update

747
00:35:14,840 --> 00:35:19,880
the component and ship an update for

748
00:35:17,000 --> 00:35:23,180
your product which means you need to

749
00:35:19,880 --> 00:35:24,590
issue a security message to your

750
00:35:23,180 --> 00:35:26,930
customers and your customers need to

751
00:35:24,590 --> 00:35:30,040
upgrade their systems something that you

752
00:35:26,930 --> 00:35:34,990
would like to avoid of course as well

753
00:35:30,040 --> 00:35:37,560
then that cannot be sad often enough

754
00:35:34,990 --> 00:35:40,629
document and monitor your dependencies

755
00:35:37,560 --> 00:35:42,970
so be aware what open-source components

756
00:35:40,630 --> 00:35:46,480
you're using and which versions of them

757
00:35:42,970 --> 00:35:49,509
and in which products and it's not only

758
00:35:46,480 --> 00:35:51,660
a one-time issue I'm writing down which

759
00:35:49,510 --> 00:35:55,000
dependencies I'm using I'm fine with it

760
00:35:51,660 --> 00:35:56,740
you need to monitor continuously and

761
00:35:55,000 --> 00:35:59,020
there's one thing where open-source

762
00:35:56,740 --> 00:36:01,839
components are significantly different

763
00:35:59,020 --> 00:36:04,780
to third-party libraries offered by

764
00:36:01,839 --> 00:36:06,640
commercial vendors whereas by a

765
00:36:04,780 --> 00:36:10,150
commercial library you will have in the

766
00:36:06,640 --> 00:36:12,819
support contract that the the supplier

767
00:36:10,150 --> 00:36:16,080
of the library is modifying you in case

768
00:36:12,820 --> 00:36:18,640
of security issues so you have a push

769
00:36:16,080 --> 00:36:21,609
for your source libraries you need to do

770
00:36:18,640 --> 00:36:25,410
a pull you need to check whatever source

771
00:36:21,609 --> 00:36:28,839
they are using for publishing security

772
00:36:25,410 --> 00:36:30,490
vulnerabilities and fixes and check them

773
00:36:28,839 --> 00:36:33,099
regularly yourself that means you need

774
00:36:30,490 --> 00:36:36,459
to look into the CBE or whatever other

775
00:36:33,099 --> 00:36:40,630
website or technology they are using for

776
00:36:36,460 --> 00:36:43,359
that for those thoughts there are tools

777
00:36:40,630 --> 00:36:46,150
available that help you so for building

778
00:36:43,359 --> 00:36:48,040
up the software inventory you can of

779
00:36:46,150 --> 00:36:49,690
course use the built systems of your

780
00:36:48,040 --> 00:36:52,029
programming language of choice if you

781
00:36:49,690 --> 00:36:55,510
have them so Packard for the dotnet

782
00:36:52,030 --> 00:36:58,200
world maven for the Java world or NPM

783
00:36:55,510 --> 00:37:01,450
for example they are able to produce a

784
00:36:58,200 --> 00:37:02,770
list of all dependencies and also the

785
00:37:01,450 --> 00:37:05,649
recursive dependencies of the

786
00:37:02,770 --> 00:37:07,509
dependencies of the dependencies there

787
00:37:05,650 --> 00:37:09,490
are tools like the OVAs dependency

788
00:37:07,510 --> 00:37:12,970
checker that then takes that information

789
00:37:09,490 --> 00:37:16,240
and tries to find CVEs in the CVE

790
00:37:12,970 --> 00:37:19,359
database and informs you you're using a

791
00:37:16,240 --> 00:37:22,868
version of a library that has a known CV

792
00:37:19,359 --> 00:37:26,380
you might want to upgrade and there are

793
00:37:22,869 --> 00:37:28,420
packaged artifactory soak local copies

794
00:37:26,380 --> 00:37:32,140
local clones or package repositories

795
00:37:28,420 --> 00:37:34,750
that you can use for controlling the

796
00:37:32,140 --> 00:37:37,029
excess of outside world package

797
00:37:34,750 --> 00:37:40,180
repositories to your developers and that

798
00:37:37,030 --> 00:37:43,359
also allow you to set up multiple

799
00:37:40,180 --> 00:37:45,040
streams or configurations so that you

800
00:37:43,359 --> 00:37:47,160
have a configuration Vista versions that

801
00:37:45,040 --> 00:37:49,049
you consider stable

802
00:37:47,160 --> 00:37:51,720
and the ones that you kind of have in a

803
00:37:49,049 --> 00:37:53,130
staging setup that you are still going

804
00:37:51,720 --> 00:37:56,999
to evaluate before they go into

805
00:37:53,130 --> 00:38:01,109
production for example so those are all

806
00:37:56,999 --> 00:38:02,519
good tools but you need to plan the

807
00:38:01,109 --> 00:38:04,890
effort for working with them and of

808
00:38:02,519 --> 00:38:07,470
course you need to learn how to use them

809
00:38:04,890 --> 00:38:10,348
and similarly there are tools for

810
00:38:07,470 --> 00:38:13,019
carrying the CBE so again there's the OS

811
00:38:10,349 --> 00:38:16,140
dependency checker for Java there's also

812
00:38:13,019 --> 00:38:19,160
retired che s NPM in the meantime has

813
00:38:16,140 --> 00:38:23,180
the NPM audit security tool integrated

814
00:38:19,160 --> 00:38:26,058
so tools are available but it's still

815
00:38:23,180 --> 00:38:29,489
the third at least manual effort and

816
00:38:26,059 --> 00:38:31,920
only two slabs or so can be automated

817
00:38:29,489 --> 00:38:33,599
and automation is not available for all

818
00:38:31,920 --> 00:38:38,460
programming languages and all build

819
00:38:33,599 --> 00:38:43,109
systems then again maintain those

820
00:38:38,460 --> 00:38:44,640
dependencies it's for sure a good idea

821
00:38:43,109 --> 00:38:46,950
if you have longer development life

822
00:38:44,640 --> 00:38:49,229
cycles that you check the versions of

823
00:38:46,950 --> 00:38:52,288
the components before you ship a new

824
00:38:49,229 --> 00:38:54,299
version to customers my experience is

825
00:38:52,289 --> 00:38:56,160
that development teams request new

826
00:38:54,299 --> 00:38:58,049
open-source libraries when they start

827
00:38:56,160 --> 00:38:59,519
development then they develop for half a

828
00:38:58,049 --> 00:39:02,279
year if you had the traditional

829
00:38:59,519 --> 00:39:04,410
development lifecycle and then they ship

830
00:39:02,279 --> 00:39:07,380
to customers a brand new version of your

831
00:39:04,410 --> 00:39:09,719
product containing already all

832
00:39:07,380 --> 00:39:12,660
dependencies so it might be good idea to

833
00:39:09,719 --> 00:39:13,950
take the last quality gate or whatever

834
00:39:12,660 --> 00:39:16,319
it is called in your development

835
00:39:13,950 --> 00:39:18,808
organization before handing over the

836
00:39:16,319 --> 00:39:21,808
product to the final integration tests

837
00:39:18,809 --> 00:39:23,430
to check that other dependencies are up

838
00:39:21,809 --> 00:39:25,999
to be up to date

839
00:39:23,430 --> 00:39:28,469
you need to plan a port for either

840
00:39:25,999 --> 00:39:31,259
upgrading your software to the latest

841
00:39:28,469 --> 00:39:34,469
open source components or if necessary

842
00:39:31,259 --> 00:39:37,170
to down port fixes to an old version of

843
00:39:34,469 --> 00:39:40,640
noting source component if you don't or

844
00:39:37,170 --> 00:39:45,420
want or can cannot upgrade your software

845
00:39:40,640 --> 00:39:47,190
because the API changed for example this

846
00:39:45,420 --> 00:39:51,390
that also requires not only planning

847
00:39:47,190 --> 00:39:53,009
effort but also giving responsibilities

848
00:39:51,390 --> 00:39:55,920
to people that are actually responsible

849
00:39:53,009 --> 00:39:59,869
for looking after the open source

850
00:39:55,920 --> 00:39:59,869
components that you are using

851
00:40:00,130 --> 00:40:03,640
there's of course commercial support

852
00:40:01,690 --> 00:40:06,340
available there are quite a number of

853
00:40:03,640 --> 00:40:10,259
companies that offer commercial support

854
00:40:06,340 --> 00:40:14,740
contracts for open source libraries and

855
00:40:10,260 --> 00:40:16,660
that's a viable option um make the

856
00:40:14,740 --> 00:40:18,970
assessment yourself depending on how

857
00:40:16,660 --> 00:40:22,240
much open source you use and what your

858
00:40:18,970 --> 00:40:24,149
risk appetite is and how what the HOD

859
00:40:22,240 --> 00:40:26,890
come up with risk assessment is

860
00:40:24,150 --> 00:40:30,760
outsourcing that work and kind of the

861
00:40:26,890 --> 00:40:35,170
risk to a support company might be the

862
00:40:30,760 --> 00:40:39,180
cheaper option for you not true in all

863
00:40:35,170 --> 00:40:41,560
cases but it is not cheap um

864
00:40:39,180 --> 00:40:45,089
lastly hot in your development

865
00:40:41,560 --> 00:40:47,770
environment we've seen a text against

866
00:40:45,090 --> 00:40:49,600
the actual development environment ever

867
00:40:47,770 --> 00:40:52,720
in the wheel world that were actually

868
00:40:49,600 --> 00:40:55,380
quite a few because that seems to be

869
00:40:52,720 --> 00:40:55,379
easier

870
00:40:55,770 --> 00:41:01,570
whatever you install is installed under

871
00:40:58,270 --> 00:41:04,690
the permissions the authority of your

872
00:41:01,570 --> 00:41:06,340
installation user so if a developer is

873
00:41:04,690 --> 00:41:08,290
using the regular development account

874
00:41:06,340 --> 00:41:10,930
that he or she is also using for

875
00:41:08,290 --> 00:41:14,050
accessing internal systems like the HR

876
00:41:10,930 --> 00:41:16,450
system or whatsoever actually an attack

877
00:41:14,050 --> 00:41:19,540
against the development system can be a

878
00:41:16,450 --> 00:41:22,600
serious attack against the intellectual

879
00:41:19,540 --> 00:41:25,210
property of your company not only

880
00:41:22,600 --> 00:41:27,009
sending out environment variables or

881
00:41:25,210 --> 00:41:29,470
values of an environment variables to a

882
00:41:27,010 --> 00:41:34,290
third-party server but also your

883
00:41:29,470 --> 00:41:40,810
financial report or your sales pipeline

884
00:41:34,290 --> 00:41:43,150
so keep that in mind so check that we

885
00:41:40,810 --> 00:41:45,190
downloaded write component that you

886
00:41:43,150 --> 00:41:48,040
actually want to use not one with a

887
00:41:45,190 --> 00:41:50,380
similar name it's more and more common

888
00:41:48,040 --> 00:41:52,300
instead of using package managers

889
00:41:50,380 --> 00:41:55,420
traffic installation scripts with just

890
00:41:52,300 --> 00:41:58,900
clone arbitrary github repositories and

891
00:41:55,420 --> 00:42:01,900
as much as I like github the one thing I

892
00:41:58,900 --> 00:42:03,940
really really hate us forking is so easy

893
00:42:01,900 --> 00:42:07,120
and you never know which is actually the

894
00:42:03,940 --> 00:42:08,560
master repository you never know which

895
00:42:07,120 --> 00:42:11,200
is the repository which actually

896
00:42:08,560 --> 00:42:12,810
contains the latest bug fixes and also

897
00:42:11,200 --> 00:42:15,870
keep in mind if you're working with

898
00:42:12,810 --> 00:42:17,520
posit Ori what you clown now can be

899
00:42:15,870 --> 00:42:19,470
something different that you clone in

900
00:42:17,520 --> 00:42:23,850
five minutes or what you clone five

901
00:42:19,470 --> 00:42:27,299
minutes ago using secure connections for

902
00:42:23,850 --> 00:42:29,819
downloads that is all so hopefully no

903
00:42:27,300 --> 00:42:34,520
issue now hopefully everybody switch to

904
00:42:29,820 --> 00:42:37,620
HTTPS not only for package downloads

905
00:42:34,520 --> 00:42:39,540
ensure that signatures of package start

906
00:42:37,620 --> 00:42:44,040
check if you are using a package manager

907
00:42:39,540 --> 00:42:46,529
that supports signed packages use an all

908
00:42:44,040 --> 00:42:50,009
on the factory package server I said

909
00:42:46,530 --> 00:42:52,470
that already I personally also consider

910
00:42:50,010 --> 00:42:56,550
container eyes in your built environment

911
00:42:52,470 --> 00:42:58,859
for a good idea I'm always a little bit

912
00:42:56,550 --> 00:43:01,290
frightened if I'm just cloning some

913
00:42:58,860 --> 00:43:03,810
repository if it's only a repository of

914
00:43:01,290 --> 00:43:06,240
one of my students and execute the code

915
00:43:03,810 --> 00:43:08,490
of my machine not that I'm believing

916
00:43:06,240 --> 00:43:11,669
that my students intentionally are doing

917
00:43:08,490 --> 00:43:12,299
something bad just because some stupid

918
00:43:11,670 --> 00:43:15,330
puppy

919
00:43:12,300 --> 00:43:18,720
they somebody brought shell struck with

920
00:43:15,330 --> 00:43:21,720
an installation routine deleting some

921
00:43:18,720 --> 00:43:24,839
repositories forgot that some people

922
00:43:21,720 --> 00:43:27,299
have spaces in directory names resulting

923
00:43:24,840 --> 00:43:29,580
in problems deleting something different

924
00:43:27,300 --> 00:43:34,290
adding a space where no space should be

925
00:43:29,580 --> 00:43:37,259
I guess some of you might have already

926
00:43:34,290 --> 00:43:39,450
done in RM started something and had a

927
00:43:37,260 --> 00:43:40,980
space between the star and the extension

928
00:43:39,450 --> 00:43:43,859
and suddenly a lot of files were lost

929
00:43:40,980 --> 00:43:46,800
said there's not necessarily bad

930
00:43:43,860 --> 00:43:48,360
intention behind but still there's a

931
00:43:46,800 --> 00:43:50,640
certain risk so thinking about

932
00:43:48,360 --> 00:43:54,300
containers virtual machines dedicated

933
00:43:50,640 --> 00:43:59,730
setups for both environments is a good

934
00:43:54,300 --> 00:44:02,180
idea um finally just one slide what I'm

935
00:43:59,730 --> 00:44:05,460
doing besides working with companies

936
00:44:02,180 --> 00:44:06,930
helping them to avoid some of the

937
00:44:05,460 --> 00:44:09,120
mistakes and improving their software

938
00:44:06,930 --> 00:44:12,120
security I'm also doing some academic

939
00:44:09,120 --> 00:44:14,930
research in that area so more on the

940
00:44:12,120 --> 00:44:17,839
economical side we are looking into

941
00:44:14,930 --> 00:44:22,470
finding indicators if it's for a company

942
00:44:17,840 --> 00:44:25,770
more or less effort to maintain open

943
00:44:22,470 --> 00:44:26,740
source packages centrally versus locally

944
00:44:25,770 --> 00:44:29,650
in development

945
00:44:26,740 --> 00:44:32,709
there are also simple convincing example

946
00:44:29,650 --> 00:44:34,990
if you have 50 development teams that

947
00:44:32,710 --> 00:44:36,580
use Tomcat in a specific version then

948
00:44:34,990 --> 00:44:39,970
clearly it doesn't make sense that each

949
00:44:36,580 --> 00:44:43,060
of those 50 teams is maintaining Tomcat

950
00:44:39,970 --> 00:44:44,680
in that version themself they're a

951
00:44:43,060 --> 00:44:48,610
central maintenance approach it is

952
00:44:44,680 --> 00:44:50,649
obviously the cheaper one if you have a

953
00:44:48,610 --> 00:44:53,890
small library that only one development

954
00:44:50,650 --> 00:44:55,540
team uses then most likely it's cheaper

955
00:44:53,890 --> 00:44:57,960
that that local development team takes

956
00:44:55,540 --> 00:45:00,820
over responsibility for that library

957
00:44:57,960 --> 00:45:03,010
because they know what the library needs

958
00:45:00,820 --> 00:45:05,200
to do they most likely know the

959
00:45:03,010 --> 00:45:08,650
development environment of that library

960
00:45:05,200 --> 00:45:13,180
which the central team would need first

961
00:45:08,650 --> 00:45:15,190
to acquire new knowledge then we are

962
00:45:13,180 --> 00:45:18,669
looking into static and dynamic testing

963
00:45:15,190 --> 00:45:21,430
approaches to understand better which

964
00:45:18,670 --> 00:45:24,190
api's are actually used from components

965
00:45:21,430 --> 00:45:26,350
to estimate the effort of upgrading

966
00:45:24,190 --> 00:45:29,170
components and also for developing

967
00:45:26,350 --> 00:45:31,210
automated fixes of components and those

968
00:45:29,170 --> 00:45:34,090
automated fixes can either be in the

969
00:45:31,210 --> 00:45:36,750
component that is consumed or we are

970
00:45:34,090 --> 00:45:40,210
also trying to come up with ideas in

971
00:45:36,750 --> 00:45:42,280
changing the code of your application so

972
00:45:40,210 --> 00:45:45,400
that the overall application if scene is

973
00:45:42,280 --> 00:45:48,010
secure even so the potentially insecure

974
00:45:45,400 --> 00:45:50,350
library is being consumed so a simple

975
00:45:48,010 --> 00:45:52,120
way of that is for example if you know

976
00:45:50,350 --> 00:45:54,390
that the library has a sequel injection

977
00:45:52,120 --> 00:45:56,920
problem or a cross-site scripting

978
00:45:54,390 --> 00:45:59,080
injection problem you might be able to

979
00:45:56,920 --> 00:46:03,330
do white listing on the application

980
00:45:59,080 --> 00:46:06,190
level instead of in the library itself

981
00:46:03,330 --> 00:46:09,100
so those are kind of research work I'm

982
00:46:06,190 --> 00:46:11,110
doing in that area and I'm closing my

983
00:46:09,100 --> 00:46:13,420
talk note was the standard think your

984
00:46:11,110 --> 00:46:16,750
slide just wanted to reiterate on the

985
00:46:13,420 --> 00:46:18,850
last slide key takeaways if you are

986
00:46:16,750 --> 00:46:23,320
developing software you are responsible

987
00:46:18,850 --> 00:46:25,360
for all your dependencies for me the key

988
00:46:23,320 --> 00:46:28,030
weighting factors really minimize the

989
00:46:25,360 --> 00:46:30,100
attack surface of the application that's

990
00:46:28,030 --> 00:46:32,590
not only good for minimizing the risk of

991
00:46:30,100 --> 00:46:35,190
the party components it's in general a

992
00:46:32,590 --> 00:46:37,810
good approach of minimizing the

993
00:46:35,190 --> 00:46:40,780
likelihood that a vulnerability has a

994
00:46:37,810 --> 00:46:42,850
severe impact on your application if you

995
00:46:40,780 --> 00:46:44,500
are using open source libraries in

996
00:46:42,850 --> 00:46:46,690
particular for resource libraries

997
00:46:44,500 --> 00:46:48,250
because many people always believe they

998
00:46:46,690 --> 00:46:50,770
are free I'm only downloading them

999
00:46:48,250 --> 00:46:54,190
indoors that's it

1000
00:46:50,770 --> 00:46:56,380
plan efforts for maintaining them do

1001
00:46:54,190 --> 00:47:00,070
some estimates and your development team

1002
00:46:56,380 --> 00:47:02,740
how much time do I need to assign to

1003
00:47:00,070 --> 00:47:05,020
somebody that incase of a vulnerability

1004
00:47:02,740 --> 00:47:06,990
needs to upgrate the library needs to

1005
00:47:05,020 --> 00:47:10,330
check that the new version actually

1006
00:47:06,990 --> 00:47:11,709
satisfies our needs does not harm the

1007
00:47:10,330 --> 00:47:14,920
business functionality of our

1008
00:47:11,710 --> 00:47:18,790
application there are no unwanted

1009
00:47:14,920 --> 00:47:20,830
side-effects from an update so you get a

1010
00:47:18,790 --> 00:47:24,460
lot of software for free and a big fan

1011
00:47:20,830 --> 00:47:27,509
of open source but if you use it there

1012
00:47:24,460 --> 00:47:29,950
is something that you need to plan for

1013
00:47:27,510 --> 00:47:32,620
money tour the vulnerabilities in your

1014
00:47:29,950 --> 00:47:37,149
dependencies and act on them in a timely

1015
00:47:32,620 --> 00:47:40,480
manner keep in mind your customers will

1016
00:47:37,150 --> 00:47:42,700
monitor the CVE database as well and

1017
00:47:40,480 --> 00:47:46,570
they might spot that you are using a

1018
00:47:42,700 --> 00:47:48,279
component that has CVE published and

1019
00:47:46,570 --> 00:47:49,840
they might contact you and then you

1020
00:47:48,280 --> 00:47:52,720
would like to have an answer immediately

1021
00:47:49,840 --> 00:47:55,450
right away there where can either say

1022
00:47:52,720 --> 00:47:57,669
yes we looked at that issue for this and

1023
00:47:55,450 --> 00:48:00,250
that reason that one ability doesn't

1024
00:47:57,670 --> 00:48:03,760
affect our application in you are secure

1025
00:48:00,250 --> 00:48:06,940
or you might answer yes we are aware of

1026
00:48:03,760 --> 00:48:11,250
that new update our application will be

1027
00:48:06,940 --> 00:48:15,100
available in the next 10 days weeks

1028
00:48:11,250 --> 00:48:20,020
whatever the expected time frames in

1029
00:48:15,100 --> 00:48:22,750
your business area are controlled your

1030
00:48:20,020 --> 00:48:25,590
dependency sources so check that you're

1031
00:48:22,750 --> 00:48:29,200
really using dependencies from either

1032
00:48:25,590 --> 00:48:31,810
trusted repositories and that could be

1033
00:48:29,200 --> 00:48:34,990
package manager repositories that could

1034
00:48:31,810 --> 00:48:38,320
be operating system repository so if you

1035
00:48:34,990 --> 00:48:40,450
are if your system is mostly running

1036
00:48:38,320 --> 00:48:42,280
let's say on an Ubuntu version of Linux

1037
00:48:40,450 --> 00:48:45,100
then of course the Ubuntu package

1038
00:48:42,280 --> 00:48:47,490
manager is a trustworthy way of

1039
00:48:45,100 --> 00:48:48,630
including also development

1040
00:48:47,490 --> 00:48:51,839
dependence

1041
00:48:48,630 --> 00:48:54,510
is Linux distributions like Ubuntu a

1042
00:48:51,840 --> 00:48:58,260
redhead have long-term support releases

1043
00:48:54,510 --> 00:49:01,980
that get security fixes for all included

1044
00:48:58,260 --> 00:49:03,800
libraries over multiple years again

1045
00:49:01,980 --> 00:49:06,420
check what the accept durations

1046
00:49:03,800 --> 00:49:11,610
accelerations are for whatever Linux

1047
00:49:06,420 --> 00:49:14,430
version you are using and that applies

1048
00:49:11,610 --> 00:49:17,160
again to all type of dependencies with

1049
00:49:14,430 --> 00:49:18,830
slightly different priorities so also

1050
00:49:17,160 --> 00:49:24,089
think about your proprietary

1051
00:49:18,830 --> 00:49:25,940
dependencies and the final thing always

1052
00:49:24,090 --> 00:49:29,580
important for security guys to remember

1053
00:49:25,940 --> 00:49:32,220
building a how to break system is much

1054
00:49:29,580 --> 00:49:34,290
much harder than finding problems in a

1055
00:49:32,220 --> 00:49:36,180
system so don't believe that the

1056
00:49:34,290 --> 00:49:38,160
developers are stupid and doing those

1057
00:49:36,180 --> 00:49:41,190
stuff because they don't want to learn

1058
00:49:38,160 --> 00:49:43,859
security it's just tremendously hard to

1059
00:49:41,190 --> 00:49:48,030
build secure systems it's much easier to

1060
00:49:43,860 --> 00:49:50,100
break a system it's implementing

1061
00:49:48,030 --> 00:49:55,350
avoiding all vulnerabilities versus

1062
00:49:50,100 --> 00:49:58,430
finding one thank you very much I hope

1063
00:49:55,350 --> 00:49:58,430
for interesting questions

