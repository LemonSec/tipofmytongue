1
00:00:03,480 --> 00:00:08,490
welcome to my thought the talk title is

2
00:00:06,149 --> 00:00:11,400
pouring salt into the crypto wound how

3
00:00:08,490 --> 00:00:14,879
to not be a stupid advance my workers my

4
00:00:11,400 --> 00:00:17,699
name is sarah w by more often LIGO as

5
00:00:14,879 --> 00:00:20,400
potahto fee on twitter or taki i'm a

6
00:00:17,699 --> 00:00:22,050
malware researcher and soft and I've

7
00:00:20,400 --> 00:00:24,360
been flying rats where for about seven

8
00:00:22,050 --> 00:00:28,350
years now this is also my first talk so

9
00:00:24,360 --> 00:00:30,480
be kinder so quickly I'll go through the

10
00:00:28,350 --> 00:00:31,860
agenda I don't know how he will the

11
00:00:30,480 --> 00:00:35,130
aunts are familiar with basic

12
00:00:31,860 --> 00:00:38,280
cryptography tons braisepants if

13
00:00:35,130 --> 00:00:41,010
anyone's familiar okay so about good

14
00:00:38,280 --> 00:00:43,260
number so those of you who are these

15
00:00:41,010 --> 00:00:45,629
this like first section probably won't

16
00:00:43,260 --> 00:00:50,309
be like nothing live in YouTube but if

17
00:00:45,630 --> 00:00:51,540
not the people who are familiar it will

18
00:00:50,309 --> 00:00:53,699
kind of catch you up with the rest of

19
00:00:51,540 --> 00:00:55,920
talk as it's kind of important the

20
00:00:53,700 --> 00:00:58,440
majority of the talk will be focusing on

21
00:00:55,920 --> 00:01:00,510
mistakes made them run to where all the

22
00:00:58,440 --> 00:01:02,370
routes and where families I'm talking

23
00:01:00,510 --> 00:01:04,319
about today have long since stopped

24
00:01:02,370 --> 00:01:07,408
operating however their mistakes a

25
00:01:04,319 --> 00:01:09,689
universal and they even applies solve

26
00:01:07,409 --> 00:01:12,270
them like just ransomware to general

27
00:01:09,689 --> 00:01:15,329
cryptography finally I'm gonna provide

28
00:01:12,270 --> 00:01:17,429
some basic pointers about look like when

29
00:01:15,329 --> 00:01:19,439
using cryptography in your own projects

30
00:01:17,429 --> 00:01:21,149
like what mistakes not to make so you

31
00:01:19,439 --> 00:01:25,130
don't look as stupid as some of the

32
00:01:21,149 --> 00:01:25,130
rights and where offers in this talk so

33
00:01:26,749 --> 00:01:31,619
moving on to the commonly used terms and

34
00:01:29,219 --> 00:01:33,538
their meanings in cryptography whenever

35
00:01:31,619 --> 00:01:35,149
we talk about a message we are referring

36
00:01:33,539 --> 00:01:38,509
to the data that we want to encrypt

37
00:01:35,149 --> 00:01:41,999
usually it's either some text or a file

38
00:01:38,509 --> 00:01:44,729
plain text is the unencrypted version

39
00:01:41,999 --> 00:01:47,399
the message and side-effect text is the

40
00:01:44,729 --> 00:01:49,889
encrypted version of message the

41
00:01:47,399 --> 00:01:53,700
encryption algorithm turns the plaintext

42
00:01:49,889 --> 00:01:57,139
into ciphertext and vice versa you and

43
00:01:53,700 --> 00:01:59,459
this is known as the cipher ciphers take

44
00:01:57,139 --> 00:02:00,988
plaintext and ciphertext and your keys

45
00:01:59,459 --> 00:02:04,079
turn on to its relative

46
00:02:00,989 --> 00:02:07,679
counterparts broadly speaking there are

47
00:02:04,079 --> 00:02:10,590
two major types of ciphers symmetric or

48
00:02:07,679 --> 00:02:13,890
secret key encryption uses a single T a

49
00:02:10,590 --> 00:02:15,120
single key to both encrypt and decrypt a

50
00:02:13,890 --> 00:02:16,410
message

51
00:02:15,120 --> 00:02:20,160
kourin example

52
00:02:16,410 --> 00:02:23,640
ra es and asking for the other major

53
00:02:20,160 --> 00:02:25,410
cipher is a symmetric or public key

54
00:02:23,640 --> 00:02:27,510
encryption and the difference is it uses

55
00:02:25,410 --> 00:02:30,950
two different keys a public key that it

56
00:02:27,510 --> 00:02:35,209
is used to encrypt messages and a

57
00:02:30,950 --> 00:02:35,209
private key is used to decrypt messages

58
00:02:35,990 --> 00:02:42,990
so moving on

59
00:02:37,770 --> 00:02:45,990
the first so symmetric ciphers are

60
00:02:42,990 --> 00:02:49,140
divided up into two major groups the

61
00:02:45,990 --> 00:02:51,240
first group is called stream ciphers the

62
00:02:49,140 --> 00:02:53,790
basic idea of a stream cipher is that a

63
00:02:51,240 --> 00:02:55,380
key will then seed a random number

64
00:02:53,790 --> 00:02:57,840
generator and this random number

65
00:02:55,380 --> 00:03:00,720
generator learns about a long stream of

66
00:02:57,840 --> 00:03:04,980
values which is terminus t'k which is

67
00:03:00,720 --> 00:03:08,340
based on the key this stream of random

68
00:03:04,980 --> 00:03:10,049
values is known as the key story each

69
00:03:08,340 --> 00:03:12,480
pair the key stream is then combined

70
00:03:10,050 --> 00:03:15,060
with its corresponding value in the

71
00:03:12,480 --> 00:03:18,810
plaintext to tie it into the subtext and

72
00:03:15,060 --> 00:03:20,460
vice versa when times and decryption the

73
00:03:18,810 --> 00:03:23,250
operation that is commonly used combine

74
00:03:20,460 --> 00:03:25,680
these bits is known as XOR the most

75
00:03:23,250 --> 00:03:27,360
commonly used stream ciphers are r34 and

76
00:03:25,680 --> 00:03:29,070
salsa

77
00:03:27,360 --> 00:03:30,870
so stream ciphers have one golden rule

78
00:03:29,070 --> 00:03:35,250
and this will become important later on

79
00:03:30,870 --> 00:03:37,050
hogs never reuse the same key twice the

80
00:03:35,250 --> 00:03:39,810
reason for this is relatively simple if

81
00:03:37,050 --> 00:03:41,250
you have a single plain kicks as

82
00:03:39,810 --> 00:03:45,470
corresponding ciphertext

83
00:03:41,250 --> 00:03:47,610
is possible to get the whole key stream

84
00:03:45,470 --> 00:03:50,459
returned to the key stream by just

85
00:03:47,610 --> 00:03:52,560
ignoring the cipher text and the

86
00:03:50,459 --> 00:03:55,590
plaintext together and then this if you

87
00:03:52,560 --> 00:03:58,050
reuse the key then you can then use this

88
00:03:55,590 --> 00:03:59,370
key stream to decrypt all other keys

89
00:03:58,050 --> 00:04:03,860
they've been used for the same key

90
00:03:59,370 --> 00:04:07,050
stream they have a large group of

91
00:04:03,860 --> 00:04:08,850
symmetric ciphers our block ciphers as

92
00:04:07,050 --> 00:04:12,060
the name implies these ciphers work on

93
00:04:08,850 --> 00:04:17,459
blocks of Zetas often the block sizes

94
00:04:12,060 --> 00:04:21,630
are 8 to 8 or 16 points block ciphers

95
00:04:17,459 --> 00:04:24,570
use key to transform the plain text box

96
00:04:21,630 --> 00:04:27,180
through various rounds of substitution

97
00:04:24,570 --> 00:04:29,460
and permutation there are a couple of

98
00:04:27,180 --> 00:04:30,410
different block ciphers out there triple

99
00:04:29,460 --> 00:04:33,260
deaths

100
00:04:30,410 --> 00:04:40,100
Blowfish tea and a yes are the most

101
00:04:33,260 --> 00:04:43,039
common however block cyphers have one

102
00:04:40,100 --> 00:04:46,070
problem if you encrypt each block using

103
00:04:43,040 --> 00:04:49,520
the same key then identical content in

104
00:04:46,070 --> 00:04:52,670
the plaintext or result in the same

105
00:04:49,520 --> 00:04:55,760
encrypted same be identical in the

106
00:04:52,670 --> 00:04:59,170
ciphertext this then reveals structural

107
00:04:55,760 --> 00:05:01,880
information about the encrypted message

108
00:04:59,170 --> 00:05:04,670
the picture you can see on the slides

109
00:05:01,880 --> 00:05:06,110
here is the known as the ECB penguin IM

110
00:05:04,670 --> 00:05:10,640
instructs this problem white

111
00:05:06,110 --> 00:05:13,400
well the left image was then encrypted

112
00:05:10,640 --> 00:05:15,140
just using a block cipher li and you can

113
00:05:13,400 --> 00:05:17,380
see that the image it produces on the

114
00:05:15,140 --> 00:05:20,150
right whilst missing some of the

115
00:05:17,380 --> 00:05:23,450
important details and colors it still

116
00:05:20,150 --> 00:05:25,219
has the outline of the penguin

117
00:05:23,450 --> 00:05:27,469
so this is where block most comments by

118
00:05:25,220 --> 00:05:29,990
block modes are additional steps that

119
00:05:27,470 --> 00:05:32,150
are performed between two blocks so they

120
00:05:29,990 --> 00:05:33,800
end up appearing random and you don't

121
00:05:32,150 --> 00:05:36,049
get struck from information like this at

122
00:05:33,800 --> 00:05:39,470
there but what do we do with the first

123
00:05:36,050 --> 00:05:41,210
block the solution is to use a random

124
00:05:39,470 --> 00:05:45,290
block at the beginning known as the

125
00:05:41,210 --> 00:05:47,150
issued initialization vector or IV and

126
00:05:45,290 --> 00:05:50,410
then that is then used perform the

127
00:05:47,150 --> 00:05:53,539
transformation on the first block of the

128
00:05:50,410 --> 00:05:59,180
plaintext there are few common block

129
00:05:53,540 --> 00:06:01,760
modes ECB which is no problem at all CBC

130
00:05:59,180 --> 00:06:03,890
which is a each flocks of plaintext

131
00:06:01,760 --> 00:06:10,370
Azure is exhort with the previous

132
00:06:03,890 --> 00:06:12,409
ciphertext block CFB ofb and CTR turn

133
00:06:10,370 --> 00:06:14,270
block ciphers into stream ciphers and

134
00:06:12,410 --> 00:06:18,170
this comes with all the disadvantages

135
00:06:14,270 --> 00:06:20,510
and advantages of stream ciphers there

136
00:06:18,170 --> 00:06:23,930
are a few specialized block modes such

137
00:06:20,510 --> 00:06:28,670
as XPS which is specifically used for

138
00:06:23,930 --> 00:06:31,420
disk encryption so moving on to random

139
00:06:28,670 --> 00:06:35,330
number generators there are two types

140
00:06:31,420 --> 00:06:38,390
pseudo-random number generators PR NGS

141
00:06:35,330 --> 00:06:42,680
and true num run number generators CRN

142
00:06:38,390 --> 00:06:44,260
G's TR n G's are based on physical

143
00:06:42,680 --> 00:06:48,640
phenomena which is believed to

144
00:06:44,260 --> 00:06:50,380
be truly random one example that people

145
00:06:48,640 --> 00:06:53,050
may have heard of is that CloudFlare

146
00:06:50,380 --> 00:06:57,280
uses a bunch of lava lamps on a wall to

147
00:06:53,050 --> 00:06:58,990
generate random data as lava lamps the

148
00:06:57,280 --> 00:07:01,419
physical properties of the movement of

149
00:06:58,990 --> 00:07:05,710
the lava lamps they take photos of them

150
00:07:01,420 --> 00:07:09,150
and that photo then transformed into

151
00:07:05,710 --> 00:07:11,919
random data and used to seed the

152
00:07:09,150 --> 00:07:13,690
pseudo-random generators they use for

153
00:07:11,920 --> 00:07:17,650
cryptography and that's believed to be

154
00:07:13,690 --> 00:07:20,680
truly random the serial number random

155
00:07:17,650 --> 00:07:23,500
generators are use an algorithm to

156
00:07:20,680 --> 00:07:26,080
produce long sequences of values and

157
00:07:23,500 --> 00:07:29,950
they appear to be random but in actual

158
00:07:26,080 --> 00:07:32,200
fact usually on so a pseudo-random

159
00:07:29,950 --> 00:07:34,750
number generator is fed an initial value

160
00:07:32,200 --> 00:07:37,120
known as the C value and then it will

161
00:07:34,750 --> 00:07:39,940
spit out a specific sequence of numbers

162
00:07:37,120 --> 00:07:41,800
if you use the same seed value multiple

163
00:07:39,940 --> 00:07:45,219
times you always get the same sequence

164
00:07:41,800 --> 00:07:49,440
of values using the same pseudo-random

165
00:07:45,220 --> 00:07:52,870
number generator so why don't we use

166
00:07:49,440 --> 00:07:53,650
true random number out there to oranjee

167
00:07:52,870 --> 00:07:56,050
is all the time

168
00:07:53,650 --> 00:07:58,770
the issue with that is TR energies are

169
00:07:56,050 --> 00:08:01,900
time limited so there's only so much

170
00:07:58,770 --> 00:08:04,330
random data generate data that you can

171
00:08:01,900 --> 00:08:07,710
generate within a specific period of

172
00:08:04,330 --> 00:08:11,800
time to get around this we then use a

173
00:08:07,710 --> 00:08:14,169
true random number generator to seed the

174
00:08:11,800 --> 00:08:16,330
pursuit of round number generator and

175
00:08:14,170 --> 00:08:19,510
this can be used to create as much

176
00:08:16,330 --> 00:08:23,229
random data as needed

177
00:08:19,510 --> 00:08:25,420
pure pseudo-random number generators can

178
00:08:23,230 --> 00:08:28,570
be separated out into cryptographically

179
00:08:25,420 --> 00:08:30,670
secure and cryptographically integer and

180
00:08:28,570 --> 00:08:34,470
this was me as whether they can be used

181
00:08:30,670 --> 00:08:38,909
for safely first cryptography or not

182
00:08:34,470 --> 00:08:41,590
most of all random number generators in

183
00:08:38,909 --> 00:08:44,110
the programming languages are considered

184
00:08:41,590 --> 00:08:48,600
insecure and should never ever be used

185
00:08:44,110 --> 00:08:51,010
in like proper cryptography situations

186
00:08:48,600 --> 00:08:54,310
one thing to know is that secure

187
00:08:51,010 --> 00:08:57,930
pseudo-random number generators can be

188
00:08:54,310 --> 00:08:57,930
made insecure if not seeded

189
00:08:58,230 --> 00:09:05,890
so moving on to moving on to the first

190
00:09:03,850 --> 00:09:09,910
category of mistakes in ransomware

191
00:09:05,890 --> 00:09:15,040
hoaxes in diversions in reality these

192
00:09:09,910 --> 00:09:18,100
are very low effort ransomware they so

193
00:09:15,040 --> 00:09:19,900
the first two examples are the top one

194
00:09:18,100 --> 00:09:22,900
refers to an Emmy code and the second

195
00:09:19,900 --> 00:09:25,449
one refers to Creek Monza in the first

196
00:09:22,900 --> 00:09:26,860
name you code version they use the batch

197
00:09:25,450 --> 00:09:29,350
first so you can see how much effort

198
00:09:26,860 --> 00:09:31,210
they put into their run to where the

199
00:09:29,350 --> 00:09:34,180
batch script basically just enumerates

200
00:09:31,210 --> 00:09:37,060
through all files that have a specific

201
00:09:34,180 --> 00:09:39,069
extension that they listed on your CMD

202
00:09:37,060 --> 00:09:42,369
drives and then just rename some of the

203
00:09:39,070 --> 00:09:44,890
dots encrypted extension in the second

204
00:09:42,370 --> 00:09:47,650
example crip console does a little bit

205
00:09:44,890 --> 00:09:50,590
more but again it's not much difference

206
00:09:47,650 --> 00:09:53,620
so in this case they just encrypt the

207
00:09:50,590 --> 00:09:57,100
file name using AES with a hard-coded

208
00:09:53,620 --> 00:09:59,530
key and IV which is Institute of course

209
00:09:57,100 --> 00:10:02,680
and then they've renamed the file name

210
00:09:59,530 --> 00:10:06,689
to the you encrypt name in both cases

211
00:10:02,680 --> 00:10:10,089
the file content is never touched

212
00:10:06,690 --> 00:10:12,720
so simply renaming a file is not at all

213
00:10:10,090 --> 00:10:15,850
cryptographically secure I don't imagine

214
00:10:12,720 --> 00:10:17,980
the file content is is not touched it's

215
00:10:15,850 --> 00:10:21,040
never encrypted so it's possible to just

216
00:10:17,980 --> 00:10:24,190
rename the files back to fix the issue

217
00:10:21,040 --> 00:10:25,810
so lazy effort ransomware it was often

218
00:10:24,190 --> 00:10:28,300
paired with the extremely low ransom

219
00:10:25,810 --> 00:10:30,910
demand in the hopes that people would

220
00:10:28,300 --> 00:10:33,699
rather pay the $35 that Nemec odd for

221
00:10:30,910 --> 00:10:40,000
example asked for rather than trying to

222
00:10:33,700 --> 00:10:44,980
rename the Thals manly okay moving on to

223
00:10:40,000 --> 00:10:46,540
customer grooms so we didn't take people

224
00:10:44,980 --> 00:10:48,190
long to figure out that nemi code just

225
00:10:46,540 --> 00:10:50,079
renamed files and didn't actually

226
00:10:48,190 --> 00:10:51,850
encrypt them and there are some authors

227
00:10:50,080 --> 00:10:52,900
eventually caught on and figured out

228
00:10:51,850 --> 00:10:55,060
that they would have to do something

229
00:10:52,900 --> 00:10:58,360
different to get people to pay so this

230
00:10:55,060 --> 00:11:00,130
is the second version that they tried in

231
00:10:58,360 --> 00:11:04,120
this case they just check if the file

232
00:11:00,130 --> 00:11:07,090
size is bigger than 2048 and if so limit

233
00:11:04,120 --> 00:11:09,400
the bytes to encrypt to 2048 then they

234
00:11:07,090 --> 00:11:11,770
check if the encrypted if they

235
00:11:09,400 --> 00:11:14,500
have been crib already encrypted 2048

236
00:11:11,770 --> 00:11:18,010
bytes and if so then just move on to

237
00:11:14,500 --> 00:11:19,840
displaying the ransom note if not then

238
00:11:18,010 --> 00:11:21,840
they will read the next byte from the

239
00:11:19,840 --> 00:11:25,660
file and then XOR it with the

240
00:11:21,840 --> 00:11:27,280
corresponding value by other key and

241
00:11:25,660 --> 00:11:30,969
then they will seek back one byte in the

242
00:11:27,280 --> 00:11:34,420
file to overwrite the byte and then just

243
00:11:30,970 --> 00:11:37,750
read do then increment the encrypted

244
00:11:34,420 --> 00:11:39,130
bytes counter the ransomware will then

245
00:11:37,750 --> 00:11:41,140
continue looping through this algorithm

246
00:11:39,130 --> 00:11:48,040
and towards even reach the end of the

247
00:11:41,140 --> 00:11:50,140
file or encrypted up to 2048 bytes very

248
00:11:48,040 --> 00:11:52,630
merry xmas was a nova ransomware that

249
00:11:50,140 --> 00:11:54,189
tried the whole custom encryption in

250
00:11:52,630 --> 00:11:56,380
this case as you can see it's a bit more

251
00:11:54,190 --> 00:12:00,550
complicated but the principle was still

252
00:11:56,380 --> 00:12:02,770
relatively similar the algorithm is that

253
00:12:00,550 --> 00:12:05,349
each byte in the buffer that holds the

254
00:12:02,770 --> 00:12:08,199
plane craft plaintext is being encrypted

255
00:12:05,350 --> 00:12:10,780
by adding the corresponding byte in the

256
00:12:08,200 --> 00:12:13,180
buffer with the key multiplied by a

257
00:12:10,780 --> 00:12:15,610
couple couple variables such as wearing

258
00:12:13,180 --> 00:12:17,349
the buffer the but the key is the length

259
00:12:15,610 --> 00:12:20,230
of their row buffer and the length of

260
00:12:17,350 --> 00:12:21,960
the key they then pick a new key index

261
00:12:20,230 --> 00:12:25,030
and move on to next byte in the buffer

262
00:12:21,960 --> 00:12:28,180
the way they coded the ransomware

263
00:12:25,030 --> 00:12:29,410
was a little bit flawed in the they

264
00:12:28,180 --> 00:12:31,870
always end up skipping the next

265
00:12:29,410 --> 00:12:33,490
character and the key this means that

266
00:12:31,870 --> 00:12:35,320
the first bite is always encrypted using

267
00:12:33,490 --> 00:12:38,590
the first character and the key but when

268
00:12:35,320 --> 00:12:40,630
they moved on to the second byte that

269
00:12:38,590 --> 00:12:43,810
they tried to encrypt they then use the

270
00:12:40,630 --> 00:12:45,850
third character in the key the key never

271
00:12:43,810 --> 00:12:48,219
changed there were changes so it's

272
00:12:45,850 --> 00:12:50,230
possible to attack this algorithm one

273
00:12:48,220 --> 00:12:51,880
character at a time as I mentioned

274
00:12:50,230 --> 00:12:55,140
before half the key is never used

275
00:12:51,880 --> 00:12:57,700
so the key index is all is is never even

276
00:12:55,140 --> 00:13:02,050
this means that each character in the

277
00:12:57,700 --> 00:13:04,240
keone has 128 possibilities and so for

278
00:13:02,050 --> 00:13:07,780
example for a 12 character key there's

279
00:13:04,240 --> 00:13:09,730
only 6 times 256 different combinations

280
00:13:07,780 --> 00:13:14,310
which is laughably easy to brute-force

281
00:13:09,730 --> 00:13:16,860
within seconds so to sum things up

282
00:13:14,310 --> 00:13:19,449
custom algorithms and custom

283
00:13:16,860 --> 00:13:23,200
implementations of existing our rooms

284
00:13:19,450 --> 00:13:24,820
rarely turn out secure in mu quads k

285
00:13:23,200 --> 00:13:27,250
they just ignore the file data with a

286
00:13:24,820 --> 00:13:30,390
fixed sanctity so it's very easy to

287
00:13:27,250 --> 00:13:32,830
calculate the key by ignoring a known

288
00:13:30,390 --> 00:13:36,880
encrypted file with its original version

289
00:13:32,830 --> 00:13:40,870
and this then can be used to decrypt all

290
00:13:36,880 --> 00:13:42,810
of us the merry xmas ransomware performs

291
00:13:40,870 --> 00:13:46,570
some basic reversible arithmetic

292
00:13:42,810 --> 00:13:49,119
operation to encrypt each byte using a

293
00:13:46,570 --> 00:13:51,370
corresponding byte in leaky so a single

294
00:13:49,120 --> 00:13:53,920
known plaintext and ciphertext pair can

295
00:13:51,370 --> 00:13:57,250
be then be used to attack each character

296
00:13:53,920 --> 00:13:58,839
in the key separately and you can

297
00:13:57,250 --> 00:14:03,160
recover the key in seconds like I

298
00:13:58,840 --> 00:14:08,860
mentioned before moving on to static or

299
00:14:03,160 --> 00:14:10,540
semi statuses so beat DMA logger you may

300
00:14:08,860 --> 00:14:12,190
locker is a run to where family there's

301
00:14:10,540 --> 00:14:14,560
gonna come up a few different times

302
00:14:12,190 --> 00:14:16,570
because they they add a few different

303
00:14:14,560 --> 00:14:21,130
goes of cryptography before they call it

304
00:14:16,570 --> 00:14:23,860
mostly right so dear may look up i had a

305
00:14:21,130 --> 00:14:27,070
relatively good first iteration they use

306
00:14:23,860 --> 00:14:29,770
them AES to encrypt files and they used

307
00:14:27,070 --> 00:14:31,030
a commonly well reviewed implementation

308
00:14:29,770 --> 00:14:34,439
of it that was fine

309
00:14:31,030 --> 00:14:36,880
however where do they get the key from

310
00:14:34,440 --> 00:14:39,520
if you don't get the function they

311
00:14:36,880 --> 00:14:41,680
actually just open the XP exe that

312
00:14:39,520 --> 00:14:43,510
corresponds to the process and then seep

313
00:14:41,680 --> 00:14:48,609
to the end of the file really the last

314
00:14:43,510 --> 00:14:50,170
32 bytes if we look at the second

315
00:14:48,610 --> 00:14:52,600
screenshot you can see what looks like

316
00:14:50,170 --> 00:14:54,550
the key in the last verse of two bytes

317
00:14:52,600 --> 00:15:00,100
and that is exactly where the key is

318
00:14:54,550 --> 00:15:01,990
located sometimes ran through our offers

319
00:15:00,100 --> 00:15:04,000
think it's a good idea to generate the

320
00:15:01,990 --> 00:15:06,790
key based on system configuration and

321
00:15:04,000 --> 00:15:09,730
like I see why they think that Kratos

322
00:15:06,790 --> 00:15:12,339
was one such example of this

323
00:15:09,730 --> 00:15:14,850
they take the processor ID the volume

324
00:15:12,340 --> 00:15:18,640
idea of the C Drive and the motherboard

325
00:15:14,850 --> 00:15:20,980
UID and then generate a sha-1 hash with

326
00:15:18,640 --> 00:15:23,260
it they then concatenate the sha-1 hash

327
00:15:20,980 --> 00:15:27,370
and the current username and use this as

328
00:15:23,260 --> 00:15:30,340
the key so what can we learn from these

329
00:15:27,370 --> 00:15:32,980
examples well strong ciphers are useless

330
00:15:30,340 --> 00:15:35,740
if the key isn't kept secret in DMA

331
00:15:32,980 --> 00:15:36,860
lockers case they use a static key that

332
00:15:35,740 --> 00:15:38,960
the author switches out

333
00:15:36,860 --> 00:15:41,360
which campaign so as long as at least

334
00:15:38,960 --> 00:15:44,990
one user per campaign is able to recover

335
00:15:41,360 --> 00:15:46,340
the exe file it's trivial to just take

336
00:15:44,990 --> 00:15:50,150
the key from the end of the file and

337
00:15:46,340 --> 00:15:53,150
then use that to decrypt or victims that

338
00:15:50,150 --> 00:15:57,170
were hit by the same campaign encrypt

339
00:15:53,150 --> 00:15:58,579
our hosts case it's possible to derive

340
00:15:57,170 --> 00:16:00,469
the key based on the system's

341
00:15:58,580 --> 00:16:02,810
configuration so it's very easy to

342
00:16:00,470 --> 00:16:05,030
really implement their same algorithm

343
00:16:02,810 --> 00:16:06,199
and then you can run as a crypto on the

344
00:16:05,030 --> 00:16:08,270
same system that was hit by the

345
00:16:06,200 --> 00:16:11,390
ransomware in order to generate the key

346
00:16:08,270 --> 00:16:14,360
a lot of people think they can get away

347
00:16:11,390 --> 00:16:18,170
with shortcuts such as these by office

348
00:16:14,360 --> 00:16:20,150
caching the code however in reality even

349
00:16:18,170 --> 00:16:24,579
the most complicated obfuscation is not

350
00:16:20,150 --> 00:16:24,579
enough to stop the most dedicated person

351
00:16:25,960 --> 00:16:32,480
so key generation mistakes key

352
00:16:30,860 --> 00:16:33,860
generation mistakes are one of the most

353
00:16:32,480 --> 00:16:34,750
common mistakes that we've seen them

354
00:16:33,860 --> 00:16:38,000
ransomware

355
00:16:34,750 --> 00:16:39,980
so this is the ma locker version 2 they

356
00:16:38,000 --> 00:16:43,400
tried again and they decided to use

357
00:16:39,980 --> 00:16:45,380
random keys so in this case they decided

358
00:16:43,400 --> 00:16:47,660
to use the round function to try and

359
00:16:45,380 --> 00:16:49,880
generate the random they to use the key

360
00:16:47,660 --> 00:16:51,829
so they use round to generate a random

361
00:16:49,880 --> 00:16:54,710
number and then map it to a value

362
00:16:51,830 --> 00:16:57,230
between 1/100 if the random index is

363
00:16:54,710 --> 00:16:59,240
less than 25 then they'll generate a set

364
00:16:57,230 --> 00:17:02,000
from random number again using Rand and

365
00:16:59,240 --> 00:17:05,329
then map it to a corresponding character

366
00:17:02,000 --> 00:17:08,180
between lowercase a and lowercase Y if

367
00:17:05,329 --> 00:17:10,939
the random index is less or equal to 50

368
00:17:08,180 --> 00:17:13,040
but bigger than or equal to 25 they do

369
00:17:10,940 --> 00:17:16,910
the same thing except they trip they map

370
00:17:13,040 --> 00:17:20,060
it to the characters between 0 to 9

371
00:17:16,910 --> 00:17:22,550
in other cases they'll generate a random

372
00:17:20,060 --> 00:17:24,919
number and then map it to a

373
00:17:22,550 --> 00:17:28,760
corresponding character between upper

374
00:17:24,920 --> 00:17:31,180
case a and upper case Y this is the

375
00:17:28,760 --> 00:17:35,420
repeated 32 times to generate the

376
00:17:31,180 --> 00:17:39,230
furniture via aes-256 key that they then

377
00:17:35,420 --> 00:17:41,840
used to incorrect each farm they sure

378
00:17:39,230 --> 00:17:45,200
this is as I mentioned previously before

379
00:17:41,840 --> 00:17:48,620
the round function is a insecure pseudo

380
00:17:45,200 --> 00:17:50,900
rap number random number generator and

381
00:17:48,620 --> 00:17:53,000
it uses the 4 by

382
00:17:50,900 --> 00:17:55,400
Institute of time of execution and seed

383
00:17:53,000 --> 00:17:57,140
this means that there is only slightly

384
00:17:55,400 --> 00:18:01,010
more than four billion different

385
00:17:57,140 --> 00:18:03,110
combinations that rank and produce and

386
00:18:01,010 --> 00:18:05,150
this means the key number of keys is

387
00:18:03,110 --> 00:18:08,929
only limited to slightly more than four

388
00:18:05,150 --> 00:18:12,620
billion that the algorithm can ever

389
00:18:08,930 --> 00:18:15,830
produce so the bottom line is that key

390
00:18:12,620 --> 00:18:18,229
generation is not as easy as it looks

391
00:18:15,830 --> 00:18:21,500
for example random you would think would

392
00:18:18,230 --> 00:18:22,970
be random but it all isn't always the

393
00:18:21,500 --> 00:18:24,830
office for that they could they migrated

394
00:18:22,970 --> 00:18:27,260
to a random key but as I mentioned

395
00:18:24,830 --> 00:18:29,750
before they actually didn't instead of

396
00:18:27,260 --> 00:18:31,940
ending up with two to the power of 256

397
00:18:29,750 --> 00:18:34,370
different possible keys then you end up

398
00:18:31,940 --> 00:18:36,920
with two to the power of 32 different

399
00:18:34,370 --> 00:18:39,379
muscle keys and this is brute possible

400
00:18:36,920 --> 00:18:42,440
with within half an hour on most modern

401
00:18:39,380 --> 00:18:49,730
systems so relatively easy for users to

402
00:18:42,440 --> 00:18:51,440
get their cars back key reuse it's

403
00:18:49,730 --> 00:18:55,010
dangerous to reuse the same key for

404
00:18:51,440 --> 00:18:57,320
everything crimped get crypto as one

405
00:18:55,010 --> 00:19:00,230
example a ransom family which decided to

406
00:18:57,320 --> 00:19:02,240
do this in get crypt they generate a

407
00:19:00,230 --> 00:19:05,990
single key which is used to encrypt all

408
00:19:02,240 --> 00:19:08,240
files using this specific algorithm they

409
00:19:05,990 --> 00:19:10,190
read eight bytes from a file and then

410
00:19:08,240 --> 00:19:12,980
encrypt these eight bytes using Sauser

411
00:19:10,190 --> 00:19:15,320
20 and then they move the file pointer

412
00:19:12,980 --> 00:19:18,260
back eight bytes and then write these

413
00:19:15,320 --> 00:19:21,770
encrypted bytes into the previously

414
00:19:18,260 --> 00:19:23,390
generated read bytes and they repeat

415
00:19:21,770 --> 00:19:26,540
this until they even reach the end of

416
00:19:23,390 --> 00:19:29,650
the file or a preps is 128 kilobytes

417
00:19:26,540 --> 00:19:29,649
whichever comes first

418
00:19:29,750 --> 00:19:34,070
the problem here is south of 20 as a

419
00:19:31,850 --> 00:19:37,070
stream cipher I remember what I said

420
00:19:34,070 --> 00:19:40,520
about stream ciphers never reuse the

421
00:19:37,070 --> 00:19:42,820
same key twice this makes it so you all

422
00:19:40,520 --> 00:19:46,129
you need is a single plaintext and

423
00:19:42,820 --> 00:19:49,310
encrypted cipher text which are at least

424
00:19:46,130 --> 00:19:51,680
128 kilobytes in size and then you can

425
00:19:49,310 --> 00:19:54,590
ignore these use all these files

426
00:19:51,680 --> 00:19:56,450
together is all the the first 128

427
00:19:54,590 --> 00:19:58,850
kilobytes of these parts together to

428
00:19:56,450 --> 00:20:00,530
recover the key stream and then you can

429
00:19:58,850 --> 00:20:01,969
apply this key stream to it by every

430
00:20:00,530 --> 00:20:02,510
single file that was encrypted by the

431
00:20:01,970 --> 00:20:06,070
ransomware

432
00:20:02,510 --> 00:20:06,070
to recover all your buffers

433
00:20:07,190 --> 00:20:11,980
dear me locker again had a third try it

434
00:20:10,160 --> 00:20:15,320
around somewhere

435
00:20:11,980 --> 00:20:17,030
they fix the key generation floor in the

436
00:20:15,320 --> 00:20:19,639
photo returned the runts where but

437
00:20:17,030 --> 00:20:23,649
however they still made a mistake they

438
00:20:19,640 --> 00:20:26,060
didn't get it completely right each per

439
00:20:23,650 --> 00:20:28,520
file key is encrypted using the same

440
00:20:26,060 --> 00:20:31,310
public static key that is shared between

441
00:20:28,520 --> 00:20:34,370
each campaign and this is then installed

442
00:20:31,310 --> 00:20:36,200
in the crypt afar so this means that for

443
00:20:34,370 --> 00:20:39,379
the victim to be able to decrypt the

444
00:20:36,200 --> 00:20:42,880
files they do have to pay the right to

445
00:20:39,380 --> 00:20:45,590
where offer to get their private key

446
00:20:42,880 --> 00:20:48,260
however this private key will not match

447
00:20:45,590 --> 00:20:50,300
just the one victim system they will

448
00:20:48,260 --> 00:20:53,690
match every single victim that was hit

449
00:20:50,300 --> 00:20:55,669
by the same campaign so instead of a

450
00:20:53,690 --> 00:20:58,210
single victim instead of every single

451
00:20:55,670 --> 00:21:03,320
victim you use pay only one victim

452
00:20:58,210 --> 00:21:08,660
newspaper didn't think of that was gonna

453
00:21:03,320 --> 00:21:10,700
happen so the bottom line here is always

454
00:21:08,660 --> 00:21:13,130
be careful about kiri use when dealing

455
00:21:10,700 --> 00:21:25,760
with asymmetric encryption or stream

456
00:21:13,130 --> 00:21:27,380
sizes not reading the manual so

457
00:21:25,760 --> 00:21:30,230
crypto defense did everything by the

458
00:21:27,380 --> 00:21:32,120
book they generated keys securely they

459
00:21:30,230 --> 00:21:34,430
didn't reuse the same public key and

460
00:21:32,120 --> 00:21:36,429
they generate a new key pair for each

461
00:21:34,430 --> 00:21:38,720
system I think you see in the code here

462
00:21:36,430 --> 00:21:41,150
however they still made a small mistake

463
00:21:38,720 --> 00:21:43,550
and that small mistake turned into quite

464
00:21:41,150 --> 00:21:46,430
a big mistake for them they didn't read

465
00:21:43,550 --> 00:21:50,180
the documented documentation properly so

466
00:21:46,430 --> 00:21:54,020
what does the documentation zone it says

467
00:21:50,180 --> 00:21:55,580
this look like it's big enough but you

468
00:21:54,020 --> 00:21:57,290
might be able to it's long text

469
00:21:55,580 --> 00:21:59,240
unfortunately maybe you'll be able to

470
00:21:57,290 --> 00:22:00,340
spot the mistake they made or if you're

471
00:21:59,240 --> 00:22:05,290
familiar with

472
00:22:00,340 --> 00:22:05,290
get verify crypt context

473
00:22:12,059 --> 00:22:17,170
so krepner defense copied the code for

474
00:22:15,100 --> 00:22:19,300
the Microsoft example that they have on

475
00:22:17,170 --> 00:22:22,150
their website and in this case the

476
00:22:19,300 --> 00:22:25,809
example didn't have the crypt verify

477
00:22:22,150 --> 00:22:29,230
context like set so reading from the

478
00:22:25,809 --> 00:22:31,780
documentation in terms of what this is

479
00:22:29,230 --> 00:22:33,670
about crypt verify context it means that

480
00:22:31,780 --> 00:22:35,800
when this flag is set the temporary

481
00:22:33,670 --> 00:22:39,760
public and private key pairs can be

482
00:22:35,800 --> 00:22:41,649
created but they are not present so if

483
00:22:39,760 --> 00:22:43,890
the flag is not set they are actually

484
00:22:41,650 --> 00:22:47,050
persisted and then saved on the system

485
00:22:43,890 --> 00:22:48,880
double negatives Thor will win so this

486
00:22:47,050 --> 00:22:51,520
is actually what happened in the case of

487
00:22:48,880 --> 00:22:53,860
cryptid events all crypto defense

488
00:22:51,520 --> 00:22:56,500
victims had the RSA key pair still left

489
00:22:53,860 --> 00:22:59,620
on the system I know as a result it was

490
00:22:56,500 --> 00:23:01,570
trivial to find the known location of

491
00:22:59,620 --> 00:23:04,780
the keys and then use this to restore

492
00:23:01,570 --> 00:23:06,159
the files the credited offense authors

493
00:23:04,780 --> 00:23:08,620
would have never know that they've made

494
00:23:06,160 --> 00:23:11,350
the missed this mistake if a serfs and

495
00:23:08,620 --> 00:23:14,260
AV vendor didn't release a public blog

496
00:23:11,350 --> 00:23:17,139
post detailing the floor a few days

497
00:23:14,260 --> 00:23:18,910
after a Duke retros made it's never

498
00:23:17,140 --> 00:23:20,920
detail the flaws of an active route to

499
00:23:18,910 --> 00:23:23,920
my campaign publicly because they will

500
00:23:20,920 --> 00:23:26,650
take advantage of you tell you them

501
00:23:23,920 --> 00:23:28,660
where their mistake is one fun fact is

502
00:23:26,650 --> 00:23:30,970
that the crypto defense authors were so

503
00:23:28,660 --> 00:23:32,980
embarrassed by the mistake and so upset

504
00:23:30,970 --> 00:23:34,929
by the bad publicity that the free

505
00:23:32,980 --> 00:23:36,640
decrypt of course is that they decide to

506
00:23:34,929 --> 00:23:39,700
rebrand their round somewhere as crypto

507
00:23:36,640 --> 00:23:42,550
wall crypto wall was on the most

508
00:23:39,700 --> 00:23:45,370
prevalent ransom wears in 2014 and it's

509
00:23:42,550 --> 00:23:47,139
still the one the most prevalent ransom

510
00:23:45,370 --> 00:23:49,270
wears that we've had to do it to date I

511
00:23:47,140 --> 00:23:51,370
believe they made over a hundred million

512
00:23:49,270 --> 00:23:54,990
u.s. dollars but that figure may have

513
00:23:51,370 --> 00:23:58,790
been way more that was just an estimate

514
00:23:54,990 --> 00:23:59,940
attacks in the command control servers

515
00:23:58,790 --> 00:24:02,678
[Music]

516
00:23:59,940 --> 00:24:04,330
non-stop but not least let's have a look

517
00:24:02,679 --> 00:24:08,110
at the most

518
00:24:04,330 --> 00:24:10,510
the last commonly mistake of runs away

519
00:24:08,110 --> 00:24:12,280
so some ransom might do everything right

520
00:24:10,510 --> 00:24:13,870
in terms of cryptography but they

521
00:24:12,280 --> 00:24:17,800
managed to do everything wrong in terms

522
00:24:13,870 --> 00:24:20,168
of the server that stores the keys one

523
00:24:17,800 --> 00:24:22,690
example of this was mega Locker

524
00:24:20,169 --> 00:24:25,240
mega locker approaches did no

525
00:24:22,690 --> 00:24:27,010
how to manage MySQL without help so they

526
00:24:25,240 --> 00:24:30,700
decided they were going to use PHP

527
00:24:27,010 --> 00:24:33,390
myadmin which is fine they fought the

528
00:24:30,700 --> 00:24:35,620
just using a random directory with no

529
00:24:33,390 --> 00:24:39,130
with no affluent occasion would be

530
00:24:35,620 --> 00:24:42,100
enough security of course they should

531
00:24:39,130 --> 00:24:45,460
have fought again we were a few clicks

532
00:24:42,100 --> 00:24:48,699
it was very easy to find and dump all of

533
00:24:45,460 --> 00:24:50,530
their victims and keys gang crap is

534
00:24:48,700 --> 00:24:53,920
another example ransomware that was

535
00:24:50,530 --> 00:24:58,870
owned in the same way one thing to note

536
00:24:53,920 --> 00:25:01,890
is also old versions of like PHP MySQL I

537
00:24:58,870 --> 00:25:04,179
know of our website managed platforms

538
00:25:01,890 --> 00:25:06,370
tend to have vulnerabilities and that's

539
00:25:04,180 --> 00:25:10,690
no way to get pwned I previous our

540
00:25:06,370 --> 00:25:12,399
ransomware I've got kind of that way but

541
00:25:10,690 --> 00:25:15,250
sometimes it's not always as an easier

542
00:25:12,400 --> 00:25:16,840
simple as this store is one example of a

543
00:25:15,250 --> 00:25:19,600
ransomware which is quite unique

544
00:25:16,840 --> 00:25:22,030
they had a portal where you could like

545
00:25:19,600 --> 00:25:24,070
track to their operators which was

546
00:25:22,030 --> 00:25:26,860
interesting but it also worked out quite

547
00:25:24,070 --> 00:25:28,409
well for them they also gave discounts

548
00:25:26,860 --> 00:25:31,300
if you wrote a good review on a

549
00:25:28,410 --> 00:25:34,170
believing theaters I think it was like

550
00:25:31,300 --> 00:25:36,639
ten percent off or something interesting

551
00:25:34,170 --> 00:25:38,710
so this forward is basically everything

552
00:25:36,640 --> 00:25:42,370
right they generate a new RSA key pair

553
00:25:38,710 --> 00:25:44,590
fee system they create a block of

554
00:25:42,370 --> 00:25:46,179
information that contains the key pair

555
00:25:44,590 --> 00:25:49,330
as well as some metadata about the

556
00:25:46,180 --> 00:25:51,700
system they then encrypt this

557
00:25:49,330 --> 00:25:54,460
information block using a randomly

558
00:25:51,700 --> 00:25:56,560
generated AES key and use that key in

559
00:25:54,460 --> 00:26:00,550
EBC mode to encrypt the information

560
00:25:56,560 --> 00:26:03,580
block the S key is then encrypted using

561
00:26:00,550 --> 00:26:05,350
a public hard coded key and both the

562
00:26:03,580 --> 00:26:07,330
encrypted AES key and encrypted

563
00:26:05,350 --> 00:26:12,399
information block are stored in what

564
00:26:07,330 --> 00:26:14,230
they know as a dot keifa so the victim

565
00:26:12,400 --> 00:26:17,940
we wanted to try and decrypt their

566
00:26:14,230 --> 00:26:20,950
ransomware would have to upload the

567
00:26:17,940 --> 00:26:24,070
document all to crime get there fast

568
00:26:20,950 --> 00:26:27,490
back the portal would then decrypt the

569
00:26:24,070 --> 00:26:30,129
AES key in the key file using the office

570
00:26:27,490 --> 00:26:31,930
private key they would then use the AES

571
00:26:30,130 --> 00:26:34,030
key to decrypt the information block and

572
00:26:31,930 --> 00:26:36,120
then extract some information from there

573
00:26:34,030 --> 00:26:39,059
and display some of this all

574
00:26:36,120 --> 00:26:40,949
portal as you can see the block date is

575
00:26:39,059 --> 00:26:43,260
the infection day and the username is

576
00:26:40,950 --> 00:26:45,539
from the system that's some of the

577
00:26:43,260 --> 00:26:49,110
information that was stored in the

578
00:26:45,539 --> 00:26:52,020
information block upon payment of the

579
00:26:49,110 --> 00:26:55,350
ransomware a decrypter would be created

580
00:26:52,020 --> 00:26:56,970
using the system's private key pair so

581
00:26:55,350 --> 00:26:59,520
you might be wondering what mistake do

582
00:26:56,970 --> 00:27:01,289
they make here well just because

583
00:26:59,520 --> 00:27:02,100
something is encrypted doesn't mean it

584
00:27:01,289 --> 00:27:05,549
can't be messed with

585
00:27:02,100 --> 00:27:07,320
since the authors use ECB it's possible

586
00:27:05,549 --> 00:27:10,830
for us to move the blocks in the

587
00:27:07,320 --> 00:27:14,100
ciphertext freely without messing up the

588
00:27:10,830 --> 00:27:17,070
cipher text so what happens when we move

589
00:27:14,100 --> 00:27:21,539
the blocks that contain the private key

590
00:27:17,070 --> 00:27:24,330
the in two areas that were stored the

591
00:27:21,539 --> 00:27:27,059
user name and infection day in the third

592
00:27:24,330 --> 00:27:29,120
the fourth of the space well it then

593
00:27:27,059 --> 00:27:32,549
displays part of the private key instead

594
00:27:29,120 --> 00:27:35,309
so within about 10 to 15 different

595
00:27:32,549 --> 00:27:36,960
minute played key files it was possible

596
00:27:35,309 --> 00:27:39,029
to get the whole private key back and

597
00:27:36,960 --> 00:27:43,049
then this could be used to decrypt the

598
00:27:39,029 --> 00:27:45,510
user spot so what is the lesson to be

599
00:27:43,049 --> 00:27:48,539
learned here it's not necessarily the

600
00:27:45,510 --> 00:27:51,029
encryption that can be tacked just love

601
00:27:48,539 --> 00:27:53,309
and it can be your infrastructure so

602
00:27:51,029 --> 00:27:57,000
your crypto is only as secure as your

603
00:27:53,309 --> 00:27:59,070
operational security is also beware the

604
00:27:57,000 --> 00:28:00,390
encryption doesn't guarantee the work of

605
00:27:59,070 --> 00:28:06,000
trying to decrypt hasn't been messed

606
00:28:00,390 --> 00:28:08,159
with or warming mess with so how to not

607
00:28:06,000 --> 00:28:10,140
be like back to my office this is where

608
00:28:08,159 --> 00:28:14,460
I'll give you some tips on what not to

609
00:28:10,140 --> 00:28:16,799
do first of all never roll your own

610
00:28:14,460 --> 00:28:18,809
cryptography as Bruce Schneier puts it

611
00:28:16,799 --> 00:28:20,668
nicely anyone for the most Kulick

612
00:28:18,809 --> 00:28:22,559
clueless amateur so the best

613
00:28:20,669 --> 00:28:25,620
cryptographer can create an algorithm

614
00:28:22,559 --> 00:28:27,120
that he himself can't break coming up

615
00:28:25,620 --> 00:28:29,939
with your own cipher and also

616
00:28:27,120 --> 00:28:33,870
implementing an own cipher so yourself

617
00:28:29,940 --> 00:28:35,700
securely well is quite difficult it's

618
00:28:33,870 --> 00:28:39,330
better to use establish and reviewed

619
00:28:35,700 --> 00:28:41,460
libraries it's I would suggest using

620
00:28:39,330 --> 00:28:44,730
libraries that are easy to use and that

621
00:28:41,460 --> 00:28:47,039
make a lot of decisions for you also

622
00:28:44,730 --> 00:28:49,710
don't copy and paste code that you do

623
00:28:47,039 --> 00:28:51,360
not understand for example the person

624
00:28:49,710 --> 00:28:53,640
use cryptography code that you copied

625
00:28:51,360 --> 00:28:57,120
from Stack Overflow it's probably about

626
00:28:53,640 --> 00:28:59,520
as clueless as you are on this so

627
00:28:57,120 --> 00:29:01,289
another thing to know is don't copy code

628
00:28:59,520 --> 00:29:02,429
from the documentation unless it

629
00:29:01,289 --> 00:29:04,559
specifically states that is

630
00:29:02,429 --> 00:29:07,950
cryptographically secure and should be

631
00:29:04,559 --> 00:29:09,389
used as point a if in the example API

632
00:29:07,950 --> 00:29:10,169
that you're trying to use is too

633
00:29:09,390 --> 00:29:14,309
complicated

634
00:29:10,169 --> 00:29:16,950
who's a different library be aware of

635
00:29:14,309 --> 00:29:19,799
the limitations of algorithms that use

636
00:29:16,950 --> 00:29:22,380
if you're using a stream cipher don't

637
00:29:19,799 --> 00:29:25,168
reuse the thing keys or your end up with

638
00:29:22,380 --> 00:29:27,470
big issues using a block cipher make

639
00:29:25,169 --> 00:29:29,880
sure you're using appropriate block mode

640
00:29:27,470 --> 00:29:32,549
generating your own keys make sure you

641
00:29:29,880 --> 00:29:35,010
use a good source of randomness and

642
00:29:32,549 --> 00:29:37,289
finally try and break systems that you

643
00:29:35,010 --> 00:29:38,549
come up with and encourage others to as

644
00:29:37,289 --> 00:29:40,890
well

645
00:29:38,549 --> 00:29:43,080
look at similar systems to yours see

646
00:29:40,890 --> 00:29:44,960
what they use and see what security

647
00:29:43,080 --> 00:29:47,850
issues they care they encountered and

648
00:29:44,960 --> 00:29:49,409
try and learn from that it's cheaper to

649
00:29:47,850 --> 00:29:52,320
learn from other people's mistakes than

650
00:29:49,409 --> 00:29:57,270
to have to deal with the issues when

651
00:29:52,320 --> 00:29:59,760
you've made your own few shaft outs to

652
00:29:57,270 --> 00:30:01,950
Fabian worse are he's my boss but he

653
00:29:59,760 --> 00:30:06,720
also helps massively with the content of

654
00:30:01,950 --> 00:30:08,970
this demon slay malwa hunter team and

655
00:30:06,720 --> 00:30:12,419
leaving a buta all great sources for

656
00:30:08,970 --> 00:30:16,260
rant to my news and like in general

657
00:30:12,419 --> 00:30:25,169
amazing people for fresh intel any

658
00:30:16,260 --> 00:30:31,260
questions else one bar with the lights

659
00:30:25,169 --> 00:30:32,730
the case of the City of Buffalo they say

660
00:30:31,260 --> 00:30:35,390
above all has been have I advanced

661
00:30:32,730 --> 00:30:39,330
awareness can't stills can't seem to

662
00:30:35,390 --> 00:30:42,960
record so there's a lot of ransomware

663
00:30:39,330 --> 00:30:46,949
able to do everything right there's it's

664
00:30:42,960 --> 00:30:51,149
like a lot would like integral if you

665
00:30:46,950 --> 00:30:54,630
use a well-known encryption algorithm

666
00:30:51,149 --> 00:30:56,158
and that and you generate your keys

667
00:30:54,630 --> 00:30:58,169
properly there's nothing we can do

668
00:30:56,159 --> 00:31:02,460
unfortunately you end up having to pay

669
00:30:58,169 --> 00:31:03,800
the ransom some plenty of the like city

670
00:31:02,460 --> 00:31:06,470
council

671
00:31:03,800 --> 00:31:08,090
police I think even the FBI at one point

672
00:31:06,470 --> 00:31:10,090
recommended that you do pay the

673
00:31:08,090 --> 00:31:13,399
ransomware and then they changed their

674
00:31:10,090 --> 00:31:17,360
kind of statement on that so

675
00:31:13,400 --> 00:31:20,240
unfortunately if your backups are not in

676
00:31:17,360 --> 00:31:24,110
good state either they're outdated don't

677
00:31:20,240 --> 00:31:25,700
work or they're even exist then if you

678
00:31:24,110 --> 00:31:29,030
need that data you're gonna have to end

679
00:31:25,700 --> 00:31:31,280
up paying the ransom ransomware I'm

680
00:31:29,030 --> 00:31:33,649
hoping that the criminals will give you

681
00:31:31,280 --> 00:31:35,990
a working Decrypter and they propagate

682
00:31:33,650 --> 00:31:37,850
him because there's plenty of times

683
00:31:35,990 --> 00:31:39,860
where they've even made off with the

684
00:31:37,850 --> 00:31:43,459
money or they provided a crypto which is

685
00:31:39,860 --> 00:31:46,879
folk teeth doesn't work so sometimes it

686
00:31:43,460 --> 00:31:49,210
happens the some of the white hats that

687
00:31:46,880 --> 00:31:52,070
work on this end up having to make a

688
00:31:49,210 --> 00:32:00,620
decrypt oh that fixes the ransomware

689
00:31:52,070 --> 00:32:02,389
offers problems faces where they do

690
00:32:00,620 --> 00:32:04,399
everything right in terms of the crypto

691
00:32:02,390 --> 00:32:07,400
but they do heat generation locally and

692
00:32:04,400 --> 00:32:12,590
leave the material on something like

693
00:32:07,400 --> 00:32:15,860
that um that's a good question um not

694
00:32:12,590 --> 00:32:18,260
very often actually most of them there's

695
00:32:15,860 --> 00:32:21,110
there's a little cut like if you're if

696
00:32:18,260 --> 00:32:22,790
you have like logging systems in the for

697
00:32:21,110 --> 00:32:25,399
example some ransomware send out their

698
00:32:22,790 --> 00:32:26,930
keys the server or the keys are

699
00:32:25,400 --> 00:32:28,820
generated on the server and then sent to

700
00:32:26,930 --> 00:32:30,680
their elsewhere server on pool you had

701
00:32:28,820 --> 00:32:32,419
something like my shock running and you

702
00:32:30,680 --> 00:32:33,920
captured the packets as long as it

703
00:32:32,420 --> 00:32:36,440
wasn't encrypted you could they grab the

704
00:32:33,920 --> 00:32:39,230
key but in most cases most people don't

705
00:32:36,440 --> 00:32:41,990
have that kind of capability running or

706
00:32:39,230 --> 00:32:42,910
just don't think about it I love

707
00:32:41,990 --> 00:32:45,200
ransomware

708
00:32:42,910 --> 00:32:47,270
they're happy cases where they have live

709
00:32:45,200 --> 00:32:49,250
had left the keys on the system but it

710
00:32:47,270 --> 00:32:52,190
they tend to usually think to delete

711
00:32:49,250 --> 00:32:54,110
them that's one of a few things more

712
00:32:52,190 --> 00:32:56,510
often it's they make a mistake in either

713
00:32:54,110 --> 00:33:03,469
we're using keys or how they generate

714
00:32:56,510 --> 00:33:05,750
the keys I guess there's no more

715
00:33:03,470 --> 00:33:08,920
questions thank you very much for coming

716
00:33:05,750 --> 00:33:08,920
I hope you enjoyed the talk

