1
00:00:03,290 --> 00:00:08,160
well good morning everyone welcome if

2
00:00:06,899 --> 00:00:11,009
you if you're looking for the Great

3
00:00:08,160 --> 00:00:14,820
Expectations obviously that's not this

4
00:00:11,009 --> 00:00:16,500
presentation I am Molly I'm a threat

5
00:00:14,820 --> 00:00:18,900
hunter we've concepts and I'm gonna be

6
00:00:16,500 --> 00:00:22,710
talking today about kill sue which is

7
00:00:18,900 --> 00:00:24,869
part of the equation groups exploitation

8
00:00:22,710 --> 00:00:27,090
framework from dander spirits my

9
00:00:24,869 --> 00:00:28,589
colleague Lacey who did her research

10
00:00:27,090 --> 00:00:31,980
with me can be here today so I'll be

11
00:00:28,589 --> 00:00:33,000
doing this so so first of all let's

12
00:00:31,980 --> 00:00:35,880
quickly go over what we're gonna be

13
00:00:33,000 --> 00:00:38,180
covering today we're going to break

14
00:00:35,880 --> 00:00:42,210
through that we're gonna break down into

15
00:00:38,180 --> 00:00:44,100
what you'll see is how it works and how

16
00:00:42,210 --> 00:00:46,830
it behaves and the actions that you can

17
00:00:44,100 --> 00:00:48,750
do and then we're going to do the cracks

18
00:00:46,830 --> 00:00:51,300
the research which is what happens when

19
00:00:48,750 --> 00:00:54,180
it's installed how it cysts on on an app

20
00:00:51,300 --> 00:00:57,000
on a host and equally how you can detect

21
00:00:54,180 --> 00:00:58,620
and remediate these infections so

22
00:00:57,000 --> 00:01:03,570
obviously this breaks down to the first

23
00:00:58,620 --> 00:01:06,750
question is what is kill sue so kill sue

24
00:01:03,570 --> 00:01:09,119
is a post exploitation infinity marginal

25
00:01:06,750 --> 00:01:12,570
mechanism it was developed by the

26
00:01:09,119 --> 00:01:14,670
equation group as far back as 2013 it

27
00:01:12,570 --> 00:01:20,070
was then leaked by the shadow brokers in

28
00:01:14,670 --> 00:01:22,560
2017 in the Lost in Translation leaf the

29
00:01:20,070 --> 00:01:24,359
equation group are although it's not

30
00:01:22,560 --> 00:01:27,030
confirmed they're strongly to just be

31
00:01:24,359 --> 00:01:32,509
associated with the MSA this makes this

32
00:01:27,030 --> 00:01:36,210
a state actor exploitation mechanism

33
00:01:32,509 --> 00:01:39,869
which is object makes exceedingly

34
00:01:36,210 --> 00:01:41,788
sophisticated if the association between

35
00:01:39,869 --> 00:01:44,130
the original USA actually does Crennel

36
00:01:41,789 --> 00:01:48,389
that's equally interesting because at

37
00:01:44,130 --> 00:01:53,130
the time back in 2013 the NSA had an

38
00:01:48,389 --> 00:01:57,350
agreement the prism program which was

39
00:01:53,130 --> 00:01:57,350
bring one between the NSA and several

40
00:01:58,340 --> 00:02:02,069
companies within the eating industry

41
00:02:00,600 --> 00:02:04,318
that access to things I can cryptid

42
00:02:02,069 --> 00:02:05,340
emails and communications but a parallel

43
00:02:04,319 --> 00:02:07,139
to this they've developed this

44
00:02:05,340 --> 00:02:09,929
exploitation framework to have

45
00:02:07,139 --> 00:02:14,250
unauthorized access to Windows systems

46
00:02:09,929 --> 00:02:16,230
and also other such framework

47
00:02:14,250 --> 00:02:17,640
kill suit is included as far as we know

48
00:02:16,230 --> 00:02:19,260
if within the dense bits and the United

49
00:02:17,640 --> 00:02:20,820
rate framework the database frame will

50
00:02:19,260 --> 00:02:23,340
be no because that was inside the week

51
00:02:20,820 --> 00:02:24,780
the United rates framework includes it

52
00:02:23,340 --> 00:02:26,400
as the instruction manual that has it

53
00:02:24,780 --> 00:02:29,610
has direct references to kill suit

54
00:02:26,400 --> 00:02:34,050
installations so that's just a basic

55
00:02:29,610 --> 00:02:36,410
overview about what kill suit is but

56
00:02:34,050 --> 00:02:40,850
more interesting is what kills suit does

57
00:02:36,410 --> 00:02:44,400
so kill soup is the post exploitation

58
00:02:40,850 --> 00:02:46,980
paper tea mechanism so a bit of a

59
00:02:44,400 --> 00:02:49,790
mouthful but what that exactly means is

60
00:02:46,980 --> 00:02:52,140
quite important so we we drew a diagram

61
00:02:49,790 --> 00:02:55,980
to try and illustrate what exactly that

62
00:02:52,140 --> 00:02:59,339
means so where the pedal chief agent is

63
00:02:55,980 --> 00:03:02,940
the malware that is deployed by the by

64
00:02:59,340 --> 00:03:05,210
the fuzzy bunch can be used by first

65
00:03:02,940 --> 00:03:07,560
plants to exploit and the dance bricks

66
00:03:05,210 --> 00:03:10,230
framework communicates with the poaching

67
00:03:07,560 --> 00:03:11,250
agents on a infected host to then

68
00:03:10,230 --> 00:03:14,090
install kill suit

69
00:03:11,250 --> 00:03:16,940
so kill suit is installed after the fact

70
00:03:14,090 --> 00:03:19,980
Mosu allows for lots of different

71
00:03:16,940 --> 00:03:21,359
malicious capabilities and equally it

72
00:03:19,980 --> 00:03:23,250
allows for additional modules to be

73
00:03:21,360 --> 00:03:25,410
stored underneath instances so corrosive

74
00:03:23,250 --> 00:03:28,860
breaks down into instance types and

75
00:03:25,410 --> 00:03:30,799
modules items and kills to that some

76
00:03:28,860 --> 00:03:33,209
kills to instance types have particular

77
00:03:30,800 --> 00:03:35,430
messages capabilities whereas module

78
00:03:33,209 --> 00:03:36,720
capabilities tend to be capacitive in

79
00:03:35,430 --> 00:03:38,790
the nature the each of those instance

80
00:03:36,720 --> 00:03:40,470
types one of the instances actually

81
00:03:38,790 --> 00:03:42,780
allows for a penalty

82
00:03:40,470 --> 00:03:45,120
agent to persist through reboots using

83
00:03:42,780 --> 00:03:47,340
the advanced bootloader so time or so T

84
00:03:45,120 --> 00:03:47,780
which we'll cover in a lot more detail

85
00:03:47,340 --> 00:03:51,239
later

86
00:03:47,780 --> 00:03:54,930
so each things in someone your as I said

87
00:03:51,239 --> 00:03:57,930
has a difficulty this is a list of some

88
00:03:54,930 --> 00:04:00,150
of the instance and module names that we

89
00:03:57,930 --> 00:04:01,860
know of as you can see in the top left

90
00:04:00,150 --> 00:04:04,110
there's a publishing instance type which

91
00:04:01,860 --> 00:04:07,769
is specifically for systems on pearl

92
00:04:04,110 --> 00:04:11,670
cheap agent and these all have very

93
00:04:07,769 --> 00:04:13,560
unique functionalities but as I said

94
00:04:11,670 --> 00:04:15,030
these incidences and modules and knowing

95
00:04:13,560 --> 00:04:18,168
how they fit together

96
00:04:15,030 --> 00:04:18,168
is quite important

97
00:04:18,329 --> 00:04:25,930
so instance types like maybes magic

98
00:04:22,990 --> 00:04:28,030
being so it's service slow behave and

99
00:04:25,930 --> 00:04:30,730
brief raff they all have different

100
00:04:28,030 --> 00:04:32,919
malicious capabilities or which I'll go

101
00:04:30,730 --> 00:04:34,720
over in a moment and each instance type

102
00:04:32,920 --> 00:04:36,970
can have multiple modules installed

103
00:04:34,720 --> 00:04:39,400
underneath them these modules tend to

104
00:04:36,970 --> 00:04:42,370
facilitate additional functionalities

105
00:04:39,400 --> 00:04:43,900
for those insolence types one of the

106
00:04:42,370 --> 00:04:46,410
things there's actually worth noting is

107
00:04:43,900 --> 00:04:48,909
that hill suit has the capability for

108
00:04:46,410 --> 00:04:51,850
operators to inject their own customized

109
00:04:48,910 --> 00:04:54,880
modules which aren't necessarily already

110
00:04:51,850 --> 00:04:57,100
within the framework as we found it we

111
00:04:54,880 --> 00:04:59,710
couldn't find a way to actually how

112
00:04:57,100 --> 00:05:01,030
these modules are created but it's

113
00:04:59,710 --> 00:05:05,710
definitely something worth looking into

114
00:05:01,030 --> 00:05:11,109
as I'll see that that wines over to so

115
00:05:05,710 --> 00:05:12,460
many other malicious nasty methods well

116
00:05:11,110 --> 00:05:13,419
what we want to some of the code names

117
00:05:12,460 --> 00:05:15,130
as I said we're going to quickly run

118
00:05:13,419 --> 00:05:16,419
through some of it abilities it wasn't

119
00:05:15,130 --> 00:05:18,100
the focus of research so I'm just into a

120
00:05:16,419 --> 00:05:20,590
basic review of some of the ones that we

121
00:05:18,100 --> 00:05:24,310
know about so as we said about magic

122
00:05:20,590 --> 00:05:26,890
bean magic bean is a wife on in the

123
00:05:24,310 --> 00:05:29,470
middle wife I'm and middle-distance type

124
00:05:26,890 --> 00:05:31,659
basically it allows the infected host

125
00:05:29,470 --> 00:05:35,740
and act as a man and little operator the

126
00:05:31,660 --> 00:05:38,260
instance type installs driver drivers

127
00:05:35,740 --> 00:05:42,010
necessary and injection tools to allow

128
00:05:38,260 --> 00:05:43,810
for the operation to take place and

129
00:05:42,010 --> 00:05:47,080
basically it does this cover do so

130
00:05:43,810 --> 00:05:49,060
highly effective host sunny can redirect

131
00:05:47,080 --> 00:05:50,919
traffic you can inject things it can

132
00:05:49,060 --> 00:05:55,419
capture that sassy set which is quite

133
00:05:50,919 --> 00:05:57,130
cool next one is dark skyline that's

134
00:05:55,419 --> 00:05:58,810
darling is not instant type it's a

135
00:05:57,130 --> 00:06:01,290
module so this can actually installed

136
00:05:58,810 --> 00:06:03,700
under any instance type that Cusick has

137
00:06:01,290 --> 00:06:06,669
and this basically allows for complete

138
00:06:03,700 --> 00:06:08,260
network network packet capture the

139
00:06:06,669 --> 00:06:09,549
interesting about this is that packet

140
00:06:08,260 --> 00:06:11,409
captured his Buddhist of disconnection

141
00:06:09,550 --> 00:06:14,740
quite tailored so you can do for

142
00:06:11,410 --> 00:06:18,790
specific web services or anything like

143
00:06:14,740 --> 00:06:19,870
that once the operator has decided that

144
00:06:18,790 --> 00:06:22,900
you know they want to get their stuff

145
00:06:19,870 --> 00:06:24,190
back it actually formats the capture

146
00:06:22,900 --> 00:06:25,539
package into a pickup file before

147
00:06:24,190 --> 00:06:28,740
transferring it back to the operator

148
00:06:25,540 --> 00:06:30,110
through kill Susan cryptid traffic's

149
00:06:28,740 --> 00:06:32,460
thing to do a killer suit is encrypted

150
00:06:30,110 --> 00:06:34,770
so everything is I the operation is

151
00:06:32,460 --> 00:06:36,780
effective them inside the insta cycle is

152
00:06:34,770 --> 00:06:40,409
encrypted and all the communications are

153
00:06:36,780 --> 00:06:42,869
encrypted using instance type specific

154
00:06:40,410 --> 00:06:44,099
keys so each instance will have its own

155
00:06:42,870 --> 00:06:47,250
different encryption for each

156
00:06:44,099 --> 00:06:48,870
installation next one is so Barnea I

157
00:06:47,250 --> 00:06:51,960
actually really like this one

158
00:06:48,870 --> 00:06:54,300
although it doesn't it's a bit rare to

159
00:06:51,960 --> 00:06:57,479
use so if you have an air gap machine

160
00:06:54,300 --> 00:06:59,970
and you're somehow effective you can

161
00:06:57,479 --> 00:07:01,020
actually this enables the Wi-Fi if

162
00:06:59,970 --> 00:07:02,810
there's a Wi-Fi card installed that's

163
00:07:01,020 --> 00:07:07,859
just disabled it reenable

164
00:07:02,810 --> 00:07:09,449
to allow for exfiltration using their it

165
00:07:07,860 --> 00:07:12,030
groups of channels back to the operator

166
00:07:09,449 --> 00:07:13,650
so effectively bypassing design the

167
00:07:12,030 --> 00:07:17,758
earth net you can then have another

168
00:07:13,650 --> 00:07:19,770
traffic for exfiltration that's what I'm

169
00:07:17,759 --> 00:07:22,050
quickening over is a flew Avenue now

170
00:07:19,770 --> 00:07:25,889
Japanese really cool flew avenue and

171
00:07:22,050 --> 00:07:29,370
doorman calls are the two custom tcp/ip

172
00:07:25,889 --> 00:07:33,240
stacks that the equation group built for

173
00:07:29,370 --> 00:07:35,430
kill soup and basically they avoid

174
00:07:33,240 --> 00:07:37,259
detection by not touching the windsock

175
00:07:35,430 --> 00:07:40,080
api they completely wrote their own

176
00:07:37,259 --> 00:07:42,659
stack so this are on a lot occasions

177
00:07:40,080 --> 00:07:43,979
avoids things like meta analysis or any

178
00:07:42,659 --> 00:07:47,250
logging that would be to do with that

179
00:07:43,979 --> 00:07:49,830
API in practice he also intended to

180
00:07:47,250 --> 00:07:52,320
circumvent a lot of network packet

181
00:07:49,830 --> 00:07:54,599
capture tools during operation we did

182
00:07:52,320 --> 00:07:56,099
have a couple of like Wireshark

183
00:07:54,599 --> 00:07:57,509
instances on there but the traffic

184
00:07:56,099 --> 00:07:58,650
seemed to be very isolated for the

185
00:07:57,509 --> 00:08:01,469
amount of traffic that we knew was going

186
00:07:58,650 --> 00:08:03,840
through so how it actually got around

187
00:08:01,469 --> 00:08:06,000
using that was was really cool it also

188
00:08:03,840 --> 00:08:07,198
has the capacity to do dns redirects and

189
00:08:06,000 --> 00:08:09,060
things like that so it allows you to

190
00:08:07,199 --> 00:08:11,130
basically pivot and create your own sub

191
00:08:09,060 --> 00:08:14,969
network through infected hosts which was

192
00:08:11,130 --> 00:08:16,289
really cool so I said so we've just very

193
00:08:14,969 --> 00:08:19,169
quickly gone over a few of these his

194
00:08:16,289 --> 00:08:20,969
abilities the capabilities were actually

195
00:08:19,169 --> 00:08:22,318
the main research 'fuck bilities was

196
00:08:20,969 --> 00:08:24,030
actually done by God called Francisco

197
00:08:22,319 --> 00:08:26,130
DiNozzo so if I don't really wants to

198
00:08:24,030 --> 00:08:27,349
look more into this do look his work as

199
00:08:26,130 --> 00:08:29,880
his stuff you've really good of this

200
00:08:27,349 --> 00:08:31,740
there's a lot of that list of the

201
00:08:29,880 --> 00:08:33,419
instance types that we have most than we

202
00:08:31,740 --> 00:08:36,990
still don't know what they do so if I

203
00:08:33,419 --> 00:08:38,338
was interested dude so now we're going

204
00:08:36,990 --> 00:08:41,970
to move on to the crux of our research

205
00:08:38,339 --> 00:08:44,460
which is what happens we kill seasons

206
00:08:41,970 --> 00:08:47,390
so our research was to find indicators

207
00:08:44,460 --> 00:08:50,850
of compromise for killed suit on a host

208
00:08:47,390 --> 00:08:53,100
based on active installation legacy

209
00:08:50,850 --> 00:08:57,300
installation and their persistence

210
00:08:53,100 --> 00:08:59,940
mechanism so what exactly happens when

211
00:08:57,300 --> 00:09:03,089
they burrow into a system so to do this

212
00:08:59,940 --> 00:09:06,360
we use these criteria the attack machine

213
00:09:03,090 --> 00:09:07,160
was based on a Windows 10 with the lost

214
00:09:06,360 --> 00:09:10,590
in translation

215
00:09:07,160 --> 00:09:12,300
leak basically deployed and enables each

216
00:09:10,590 --> 00:09:15,420
victim host was when a certain probe

217
00:09:12,300 --> 00:09:17,069
which was freshly installed each time we

218
00:09:15,420 --> 00:09:19,500
used on our message API reg shot you

219
00:09:17,070 --> 00:09:23,580
know the standards statin axis we used

220
00:09:19,500 --> 00:09:25,320
radar to fill both the binaries for the

221
00:09:23,580 --> 00:09:27,420
framework itself and for the memory

222
00:09:25,320 --> 00:09:30,660
dumps of subtly injected into so we can

223
00:09:27,420 --> 00:09:32,729
see what's going on we also actively

224
00:09:30,660 --> 00:09:34,650
adapted scripts inside the framework so

225
00:09:32,730 --> 00:09:36,210
obviously get a specific output for

226
00:09:34,650 --> 00:09:40,199
different variables to see exactly

227
00:09:36,210 --> 00:09:41,430
what's going on we're going to focus on

228
00:09:40,200 --> 00:09:43,020
kill suits so we're not exactly gonna

229
00:09:41,430 --> 00:09:44,280
focus on how you compromised house using

230
00:09:43,020 --> 00:09:46,890
as I fuzzy bunch because that's been

231
00:09:44,280 --> 00:09:49,589
investigated to death we're going to

232
00:09:46,890 --> 00:09:52,050
quickly go over how we did compromise so

233
00:09:49,590 --> 00:09:54,230
we've built this little table so the

234
00:09:52,050 --> 00:09:56,219
attacker we use and one of those punches

235
00:09:54,230 --> 00:09:58,020
exportations eternal blue bandit one

236
00:09:56,220 --> 00:10:00,300
knows who turn a romance and so forth to

237
00:09:58,020 --> 00:10:02,990
get foothold on the victim it will then

238
00:10:00,300 --> 00:10:05,870
use double Polestar to inject the DLL

239
00:10:02,990 --> 00:10:08,970
publicly payload into an active process

240
00:10:05,870 --> 00:10:11,220
standardly this is alpha however the

241
00:10:08,970 --> 00:10:13,500
operator can decide which process they

242
00:10:11,220 --> 00:10:15,450
want to inject into we use calculator

243
00:10:13,500 --> 00:10:17,430
because it was much easier to filter

244
00:10:15,450 --> 00:10:19,980
through on that one once we start

245
00:10:17,430 --> 00:10:22,290
running it runs it then calls back or it

246
00:10:19,980 --> 00:10:25,230
can be listening we got it to be active

247
00:10:22,290 --> 00:10:27,870
after about 93 seconds which allows the

248
00:10:25,230 --> 00:10:29,760
denseness operator things to connect to

249
00:10:27,870 --> 00:10:31,920
the pedal chip instance on the host and

250
00:10:29,760 --> 00:10:33,750
that thing gives an active agent which

251
00:10:31,920 --> 00:10:37,410
gives bi-directional

252
00:10:33,750 --> 00:10:39,740
seater connection then kamala control so

253
00:10:37,410 --> 00:10:42,030
now we know how we've got it was set up

254
00:10:39,740 --> 00:10:43,920
what is the weird stuff that happens

255
00:10:42,030 --> 00:10:47,189
when you kill su is installed by

256
00:10:43,920 --> 00:10:48,599
paratroop on on on a on a victim so one

257
00:10:47,190 --> 00:10:49,980
of the first things that we notice that

258
00:10:48,600 --> 00:10:52,170
so we try to fight some things that

259
00:10:49,980 --> 00:10:53,790
happened repeatedly in each installation

260
00:10:52,170 --> 00:10:55,740
so we could find

261
00:10:53,790 --> 00:10:57,510
I'm consistent four indicators are

262
00:10:55,740 --> 00:11:02,280
compromised the first thing we saw is

263
00:10:57,510 --> 00:11:04,200
that it kept checking the system setup

264
00:11:02,280 --> 00:11:05,819
in progress registry key now this is

265
00:11:04,200 --> 00:11:08,960
used for the Auris running state between

266
00:11:05,820 --> 00:11:11,370
setup and regular running running states

267
00:11:08,960 --> 00:11:13,200
this happened at the beginning and the

268
00:11:11,370 --> 00:11:14,910
end of every installation for kill sue

269
00:11:13,200 --> 00:11:17,400
now this isn't this check isn't exactly

270
00:11:14,910 --> 00:11:20,040
super abnormal I mean this is a bit but

271
00:11:17,400 --> 00:11:22,620
it's not out there we did what we did do

272
00:11:20,040 --> 00:11:25,890
is we try to configure the value to two

273
00:11:22,620 --> 00:11:28,350
is equal to zero one and it made no

274
00:11:25,890 --> 00:11:29,730
difference what the value was which was

275
00:11:28,350 --> 00:11:31,530
quite interesting so we stand by the

276
00:11:29,730 --> 00:11:33,060
speculation one was it looking for all I

277
00:11:31,530 --> 00:11:36,270
customized by the value that wasn't

278
00:11:33,060 --> 00:11:39,209
meant to be where we tried loads of

279
00:11:36,270 --> 00:11:40,740
different variables inside there but we

280
00:11:39,210 --> 00:11:42,720
couldn't actually get it behavior any

281
00:11:40,740 --> 00:11:44,280
differently so we began to speculate

282
00:11:42,720 --> 00:11:45,930
that instead there must be another

283
00:11:44,280 --> 00:11:47,819
component to the framework the once its

284
00:11:45,930 --> 00:11:50,370
installed must inject something in there

285
00:11:47,820 --> 00:11:52,650
if the value is then corresponding to it

286
00:11:50,370 --> 00:11:54,150
acts differently but we tried every tool

287
00:11:52,650 --> 00:11:56,400
that we could find and we can go to

288
00:11:54,150 --> 00:11:59,280
misbehave so although it was consistent

289
00:11:56,400 --> 00:12:02,250
it's not the greatest indicator

290
00:11:59,280 --> 00:12:05,010
compromise on that one so instead we

291
00:12:02,250 --> 00:12:07,140
looked at we look for something a bit a

292
00:12:05,010 --> 00:12:11,100
little more odd to ingest and the Auris

293
00:12:07,140 --> 00:12:12,180
running type and we came across what I

294
00:12:11,100 --> 00:12:15,780
like to call that the James Bond

295
00:12:12,180 --> 00:12:18,089
function system function wi7 which is an

296
00:12:15,780 --> 00:12:19,680
advanced API called the kernel and it's

297
00:12:18,090 --> 00:12:22,200
used for interim our hash generation

298
00:12:19,680 --> 00:12:24,060
using md4 now this was obviously found

299
00:12:22,200 --> 00:12:27,720
in calculator so there's no reason--

300
00:12:24,060 --> 00:12:29,189
calculator should be doing this so

301
00:12:27,720 --> 00:12:30,540
that's two thou anomalous for that

302
00:12:29,190 --> 00:12:31,980
particular process but I said because it

303
00:12:30,540 --> 00:12:34,709
can you typically ingesting into things

304
00:12:31,980 --> 00:12:37,530
like elf ass that depending on the

305
00:12:34,710 --> 00:12:39,030
process can be a typical operation so if

306
00:12:37,530 --> 00:12:41,310
an operator scre up observe the one pin

307
00:12:39,030 --> 00:12:43,530
to calculate so this although anomalous

308
00:12:41,310 --> 00:12:46,920
in some aspects isn't consistently

309
00:12:43,530 --> 00:12:49,110
enormous but what was interesting is

310
00:12:46,920 --> 00:12:51,780
that when it called this the hash that

311
00:12:49,110 --> 00:12:54,720
was generated was then stored in a

312
00:12:51,780 --> 00:12:59,370
registry value now the registry value is

313
00:12:54,720 --> 00:13:04,290
OEM management or earlier MGMT with

314
00:12:59,370 --> 00:13:07,140
these two 32 character randomized

315
00:13:04,290 --> 00:13:11,130
directories when we looked into that

316
00:13:07,140 --> 00:13:12,990
we saw that this on each installation we

317
00:13:11,130 --> 00:13:15,779
inject into a different registry

318
00:13:12,990 --> 00:13:16,709
location there's a taller than the frame

319
00:13:15,779 --> 00:13:18,930
double feature

320
00:13:16,709 --> 00:13:21,719
no double feature is used by the

321
00:13:18,930 --> 00:13:23,279
framework in order to basically build up

322
00:13:21,720 --> 00:13:26,190
a summary of what has already been done

323
00:13:23,279 --> 00:13:29,339
to that victim and you can find down

324
00:13:26,190 --> 00:13:32,940
here locate KS module store root matched

325
00:13:29,339 --> 00:13:36,240
up to the registry that was dictor's

326
00:13:32,940 --> 00:13:38,160
into now keen eyes might notice that the

327
00:13:36,240 --> 00:13:41,390
OEM management and drive management are

328
00:13:38,160 --> 00:13:44,130
actually different that's because

329
00:13:41,390 --> 00:13:45,899
there's quite a few of them this is just

330
00:13:44,130 --> 00:13:49,170
some of the ones that we observed during

331
00:13:45,899 --> 00:13:51,540
our research and our examination of the

332
00:13:49,170 --> 00:13:53,729
tool but what you might notice is that

333
00:13:51,540 --> 00:13:55,290
there's that it seems to be broken up

334
00:13:53,730 --> 00:13:57,149
into two bits so you've got the

335
00:13:55,290 --> 00:14:00,120
capitalist which income left so you've

336
00:13:57,149 --> 00:14:02,820
got drift and then you've got cash and

337
00:14:00,120 --> 00:14:05,430
you'll see that they're repeated and we

338
00:14:02,820 --> 00:14:06,450
found that these would then constantly

339
00:14:05,430 --> 00:14:08,339
be repeated and different for

340
00:14:06,450 --> 00:14:10,800
figurations depending on how many times

341
00:14:08,339 --> 00:14:13,350
we installed it and so we thought we're

342
00:14:10,800 --> 00:14:15,630
onto something here we then had the

343
00:14:13,350 --> 00:14:17,579
hypothesis that this is two separate

344
00:14:15,630 --> 00:14:19,350
lists being concatenated together in a

345
00:14:17,579 --> 00:14:21,779
randomized function in order to make it

346
00:14:19,350 --> 00:14:24,930
as as difficult as possible to print it

347
00:14:21,779 --> 00:14:27,029
so we stayed on that premise and we had

348
00:14:24,930 --> 00:14:29,189
it confirmed when we found the

349
00:14:27,029 --> 00:14:31,050
concatenation operation or two different

350
00:14:29,190 --> 00:14:33,480
string values in order to make this

351
00:14:31,050 --> 00:14:35,699
directory so once we had this and how to

352
00:14:33,480 --> 00:14:38,130
confirm that this is two separate bits

353
00:14:35,699 --> 00:14:40,019
being spliced together we knew if we can

354
00:14:38,130 --> 00:14:42,750
find these lists we can find every

355
00:14:40,019 --> 00:14:46,019
combination but he also used to install

356
00:14:42,750 --> 00:14:47,730
this modular encrypted database into

357
00:14:46,019 --> 00:14:51,540
systems and lofty that would make it

358
00:14:47,730 --> 00:14:52,649
easy for legacies detection so we start

359
00:14:51,540 --> 00:14:55,380
focusing on finding this lesson we're

360
00:14:52,649 --> 00:14:57,570
break it down to three areas we break it

361
00:14:55,380 --> 00:15:00,029
down into whether the list is the

362
00:14:57,570 --> 00:15:02,310
directory was communicated from the

363
00:15:00,029 --> 00:15:05,430
attacker from the operator to the agent

364
00:15:02,310 --> 00:15:09,540
whether the directory was decided when

365
00:15:05,430 --> 00:15:11,790
the payload was first configured and

366
00:15:09,540 --> 00:15:13,829
built before being transferred over or

367
00:15:11,790 --> 00:15:17,550
whether the payload itself would decide

368
00:15:13,829 --> 00:15:18,870
where to put it dependant on variables

369
00:15:17,550 --> 00:15:20,930
to do with that individual system so the

370
00:15:18,870 --> 00:15:25,080
list would be stored in the

371
00:15:20,930 --> 00:15:27,479
payload and then Jesus variables it

372
00:15:25,080 --> 00:15:29,610
would then decide from those lists we

373
00:15:27,480 --> 00:15:31,680
quickly eliminated the idea that it was

374
00:15:29,610 --> 00:15:34,080
a hard-coded into the parachute agent

375
00:15:31,680 --> 00:15:35,969
because reuse of the payload didn't

376
00:15:34,080 --> 00:15:39,780
generate the same results so we knew it

377
00:15:35,970 --> 00:15:41,430
wasn't hard-coded into the pail and so

378
00:15:39,780 --> 00:15:45,810
we then moved on to whether it was

379
00:15:41,430 --> 00:15:48,359
decided from the attacker and to do this

380
00:15:45,810 --> 00:15:49,800
we had to break down how exactly the

381
00:15:48,360 --> 00:15:51,720
dancers framework communicated with a

382
00:15:49,800 --> 00:15:54,359
pail of cheap Cajun when it was doing

383
00:15:51,720 --> 00:15:56,970
TOC operations and that breaks down into

384
00:15:54,360 --> 00:16:00,360
this sort of fly so the dense spritz UI

385
00:15:56,970 --> 00:16:02,700
with trend within translate the user

386
00:16:00,360 --> 00:16:05,850
input through various internal libraries

387
00:16:02,700 --> 00:16:07,320
before handing it off to the core binary

388
00:16:05,850 --> 00:16:08,850
which we've been communicate with

389
00:16:07,320 --> 00:16:11,220
penalty page in which in turn within

390
00:16:08,850 --> 00:16:14,460
acts with the kill zoo instance and The

391
00:16:11,220 --> 00:16:20,250
Associated database so we began looking

392
00:16:14,460 --> 00:16:22,620
at how the user impact interacted with

393
00:16:20,250 --> 00:16:25,650
libraries so the deme library on the

394
00:16:22,620 --> 00:16:27,690
desk or my new library we concludes very

395
00:16:25,650 --> 00:16:30,780
quickly was specific for kill suit

396
00:16:27,690 --> 00:16:33,410
interaction every single functionality

397
00:16:30,780 --> 00:16:36,829
to kill soup goes through this library

398
00:16:33,410 --> 00:16:42,300
and we found that this particular one so

399
00:16:36,830 --> 00:16:44,010
connect is used for dynamically load and

400
00:16:42,300 --> 00:16:44,910
unload different modules within a

401
00:16:44,010 --> 00:16:47,010
corrosive instance

402
00:16:44,910 --> 00:16:48,990
so once we've isolated this we start

403
00:16:47,010 --> 00:16:51,810
breaking down how this how this worked

404
00:16:48,990 --> 00:16:54,180
so it seems to basically configure a

405
00:16:51,810 --> 00:16:59,130
message structure which is then sent to

406
00:16:54,180 --> 00:17:01,530
the mcl tasking an RPC perform call so

407
00:16:59,130 --> 00:17:04,160
we followed that functionality and that

408
00:17:01,530 --> 00:17:07,800
borders to a separately the DFC library

409
00:17:04,160 --> 00:17:10,380
now the DRC library performs action but

410
00:17:07,800 --> 00:17:13,589
it does so by imposing a private library

411
00:17:10,380 --> 00:17:16,380
from elsewhere the underscore DSC

412
00:17:13,589 --> 00:17:18,750
library now this is important because

413
00:17:16,380 --> 00:17:20,610
all interactions with the pedal chief

414
00:17:18,750 --> 00:17:23,190
agent seem to go through this private

415
00:17:20,609 --> 00:17:25,229
library and we could find no reference

416
00:17:23,190 --> 00:17:27,329
to it in any of the library files that

417
00:17:25,230 --> 00:17:28,980
we could find now let's create a problem

418
00:17:27,329 --> 00:17:30,419
because if we wants to understand how

419
00:17:28,980 --> 00:17:32,730
this works how it communicated and

420
00:17:30,420 --> 00:17:34,080
ideally where these this restore we had

421
00:17:32,730 --> 00:17:36,450
to get we thought we had to go access

422
00:17:34,080 --> 00:17:38,809
this private library so we actually

423
00:17:36,450 --> 00:17:41,639
started looking into the the core binary

424
00:17:38,809 --> 00:17:43,799
by analyzing astatically to find any

425
00:17:41,639 --> 00:17:48,269
references to see if we can understand

426
00:17:43,799 --> 00:17:50,220
how this was done analysis of the binary

427
00:17:48,269 --> 00:17:53,759
show there were references to several

428
00:17:50,220 --> 00:17:56,850
functions within the private library but

429
00:17:53,759 --> 00:17:58,889
we found that it was actually a external

430
00:17:56,850 --> 00:18:02,730
cpython module library that was injected

431
00:17:58,889 --> 00:18:05,039
at runtime so doing astatically all the

432
00:18:02,730 --> 00:18:06,450
associated address were empty although

433
00:18:05,039 --> 00:18:09,239
we defined reference is an error

434
00:18:06,450 --> 00:18:10,919
capturing for the functions the actual

435
00:18:09,239 --> 00:18:13,200
commands themselves were not stored in

436
00:18:10,919 --> 00:18:15,299
the binary as it was so we still moved

437
00:18:13,200 --> 00:18:17,039
on to dynamic analysis of the binary but

438
00:18:15,299 --> 00:18:21,210
that in itself had a number of other

439
00:18:17,039 --> 00:18:23,700
issues so the guys who built this the

440
00:18:21,210 --> 00:18:25,980
greater group had obviously put into

441
00:18:23,700 --> 00:18:27,389
mind about people doing this and there

442
00:18:25,980 --> 00:18:30,450
were a lot of countermeasures for

443
00:18:27,389 --> 00:18:32,369
analysis one of most basic was that it

444
00:18:30,450 --> 00:18:34,379
actually detected hooks the debuggers

445
00:18:32,369 --> 00:18:37,499
and would instantly terminate if it's on

446
00:18:34,379 --> 00:18:40,109
so that instant will red flag of they've

447
00:18:37,499 --> 00:18:41,580
done this to avoid analysis we were

448
00:18:40,109 --> 00:18:43,619
actually able to disguise the debugger

449
00:18:41,580 --> 00:18:45,960
and still get it to work but even then

450
00:18:43,619 --> 00:18:47,699
all of the addresses where data was

451
00:18:45,960 --> 00:18:49,470
loaded for this library were loaded and

452
00:18:47,700 --> 00:18:52,289
unloaded as soon as they were acquired

453
00:18:49,470 --> 00:18:54,450
and the index table for different

454
00:18:52,289 --> 00:18:56,908
functionalities had multiple references

455
00:18:54,450 --> 00:18:58,649
to the same function but a lot of them

456
00:18:56,909 --> 00:19:01,200
were dummies and it seemed to move about

457
00:18:58,649 --> 00:19:03,119
which seemed very very difficult and

458
00:19:01,200 --> 00:19:06,359
because of that we were actually unable

459
00:19:03,119 --> 00:19:09,480
to find this hid this private library

460
00:19:06,359 --> 00:19:13,139
within the runtime and debugging of the

461
00:19:09,480 --> 00:19:15,359
runtime binary which was disappointing

462
00:19:13,139 --> 00:19:18,479
to say the least but we concluded that

463
00:19:15,359 --> 00:19:20,158
if we couldn't clarify if it was there

464
00:19:18,480 --> 00:19:22,830
we could at least try and clarify that

465
00:19:20,159 --> 00:19:24,570
it wasn't decided of the payload level

466
00:19:22,830 --> 00:19:27,658
so then we could focus our research even

467
00:19:24,570 --> 00:19:30,960
further so to that we then moved on to

468
00:19:27,659 --> 00:19:32,639
analyzing the penalty payload as it was

469
00:19:30,960 --> 00:19:34,980
run and then when he tried to kill C

470
00:19:32,639 --> 00:19:37,590
operations on a victim but this had a

471
00:19:34,980 --> 00:19:40,350
number of other problems so looking at

472
00:19:37,590 --> 00:19:42,330
the stack of where the Fellowship agent

473
00:19:40,350 --> 00:19:44,879
was injected into we found that the

474
00:19:42,330 --> 00:19:47,419
values and the functionality of the

475
00:19:44,879 --> 00:19:49,790
agent well instead of being

476
00:19:47,420 --> 00:19:51,200
injected into the process as we would

477
00:19:49,790 --> 00:19:53,750
expect it was actually injected into the

478
00:19:51,200 --> 00:19:56,390
kernel and we couldn't exactly figure

479
00:19:53,750 --> 00:19:58,040
out how they've done it so it was

480
00:19:56,390 --> 00:19:59,420
injected in a way that we can actually

481
00:19:58,040 --> 00:19:59,990
retrieve the values that we were looking

482
00:19:59,420 --> 00:20:01,580
for

483
00:19:59,990 --> 00:20:03,800
so although we knew the pochi version

484
00:20:01,580 --> 00:20:05,540
was injected into a specific process we

485
00:20:03,800 --> 00:20:08,990
were unable to actually extract the data

486
00:20:05,540 --> 00:20:11,570
we were looking for so because of this

487
00:20:08,990 --> 00:20:13,340
we actually got to our last resort where

488
00:20:11,570 --> 00:20:16,070
we reverted back to trying to use their

489
00:20:13,340 --> 00:20:17,899
own code against them so inside the

490
00:20:16,070 --> 00:20:20,450
framework there was a pedal cheap

491
00:20:17,900 --> 00:20:23,330
analysis tool PPC crap that you could

492
00:20:20,450 --> 00:20:26,870
use to display internal that values of

493
00:20:23,330 --> 00:20:28,220
the payload and although this provided a

494
00:20:26,870 --> 00:20:30,139
lot of information about how a payload

495
00:20:28,220 --> 00:20:31,430
is meant to behave and was communicating

496
00:20:30,140 --> 00:20:32,240
to you so if you could find one you

497
00:20:31,430 --> 00:20:33,950
could obviously find out a lot of

498
00:20:32,240 --> 00:20:36,080
information about how it was designed to

499
00:20:33,950 --> 00:20:37,430
behave it didn't include the values you

500
00:20:36,080 --> 00:20:40,580
were looking for and through the tables

501
00:20:37,430 --> 00:20:42,080
or valuable values or anything to do

502
00:20:40,580 --> 00:20:44,840
with the registry Varrick ship we were

503
00:20:42,080 --> 00:20:47,330
looking for so again we had conclude

504
00:20:44,840 --> 00:20:49,550
that this is eluded us in this point as

505
00:20:47,330 --> 00:20:51,290
well we weren't exactly happy at this

506
00:20:49,550 --> 00:20:52,820
point because these two lists we knew

507
00:20:51,290 --> 00:20:55,129
they were in here but we were unable to

508
00:20:52,820 --> 00:20:56,600
find them and really exhausted our level

509
00:20:55,130 --> 00:20:58,730
of people to you for a reversal in these

510
00:20:56,600 --> 00:21:00,320
tools basically due to the level of

511
00:20:58,730 --> 00:21:02,870
sophistication that could interface to

512
00:21:00,320 --> 00:21:04,850
prevent us from looking at them if

513
00:21:02,870 --> 00:21:05,989
everyone has an expertise on novice Eve

514
00:21:04,850 --> 00:21:07,790
looking at this or he's interested

515
00:21:05,990 --> 00:21:09,620
please talk to me after because I'd love

516
00:21:07,790 --> 00:21:11,990
to get like other people working on this

517
00:21:09,620 --> 00:21:15,560
because that list is that part is really

518
00:21:11,990 --> 00:21:17,600
annoying there but although we couldn't

519
00:21:15,560 --> 00:21:19,220
find it here we didn't give up so you

520
00:21:17,600 --> 00:21:21,530
know you learned how to fail in your

521
00:21:19,220 --> 00:21:23,870
carry on anyway so we went back to the

522
00:21:21,530 --> 00:21:26,450
installation and we began analyzing in

523
00:21:23,870 --> 00:21:29,860
my new detail all of the different

524
00:21:26,450 --> 00:21:31,790
operations that happen and we decide to

525
00:21:29,860 --> 00:21:33,080
cross-reference all the different

526
00:21:31,790 --> 00:21:35,360
installations to see if there was

527
00:21:33,080 --> 00:21:40,100
anything that promoted a pattern and

528
00:21:35,360 --> 00:21:44,719
eventually we came across this which is

529
00:21:40,100 --> 00:21:47,480
a cryptographic provider type which was

530
00:21:44,720 --> 00:21:49,580
referenced at each fresh kill suit

531
00:21:47,480 --> 00:21:52,600
installation for a fresh pedal cheap

532
00:21:49,580 --> 00:21:54,830
agent but only on the first installation

533
00:21:52,600 --> 00:21:56,419
now the reason this stood out was is

534
00:21:54,830 --> 00:21:59,210
because it occurred each time so we

535
00:21:56,420 --> 00:22:00,350
investigate is type 0 2 3 and the

536
00:21:59,210 --> 00:22:02,570
provider type

537
00:22:00,350 --> 00:22:04,969
the first thing to note is what is a

538
00:22:02,570 --> 00:22:06,889
cryptographic provider type so a

539
00:22:04,970 --> 00:22:09,110
cryptographic provider type is basically

540
00:22:06,889 --> 00:22:11,000
a description on how an encryption

541
00:22:09,110 --> 00:22:12,860
algorithm is TP use and what values

542
00:22:11,000 --> 00:22:15,409
there - to do in order to get the

543
00:22:12,860 --> 00:22:17,750
outputs they require so Microsoft

544
00:22:15,409 --> 00:22:20,659
includes a number of them by default for

545
00:22:17,750 --> 00:22:24,080
RSA a yes so and so forth so that it's

546
00:22:20,659 --> 00:22:28,580
uniform across all the fed machines and

547
00:22:24,080 --> 00:22:31,070
it has types 1 3 5 12 13 18 24 it does

548
00:22:28,580 --> 00:22:34,399
not have a default value provider type

549
00:22:31,070 --> 00:22:37,070
of 23 so this provider type is actually

550
00:22:34,399 --> 00:22:39,620
an abnormality from the default values

551
00:22:37,070 --> 00:22:42,110
of Microsoft provides this is this was

552
00:22:39,620 --> 00:22:44,330
further proven by looking at the

553
00:22:42,110 --> 00:22:45,740
provider type table that Microsoft

554
00:22:44,330 --> 00:22:47,809
provides although the documentation

555
00:22:45,740 --> 00:22:49,340
isn't always full this from all the

556
00:22:47,809 --> 00:22:50,870
instances that we saw nothing seemed to

557
00:22:49,340 --> 00:22:52,459
deviate from this from any system with

558
00:22:50,870 --> 00:22:54,408
that we looked at there's also no

559
00:22:52,460 --> 00:22:57,529
reference to a type 0 TV provider type

560
00:22:54,409 --> 00:23:00,379
any way that we could find historically

561
00:22:57,529 --> 00:23:02,360
speaking there happinesses of type 0 TV

562
00:23:00,379 --> 00:23:06,320
being in systems but this is typically

563
00:23:02,360 --> 00:23:09,830
been because of sort of so bit of

564
00:23:06,320 --> 00:23:13,100
history back when Windows NT 4 was out

565
00:23:09,830 --> 00:23:17,539
it was a commissioner to be used by UK

566
00:23:13,100 --> 00:23:19,939
government but GCHQ mandated that it had

567
00:23:17,539 --> 00:23:22,519
to have a customized cryptographic

568
00:23:19,940 --> 00:23:25,100
system in place so they actually built a

569
00:23:22,519 --> 00:23:27,169
customized version of Windows NT 4 with

570
00:23:25,100 --> 00:23:27,918
a customized provider type inside that

571
00:23:27,169 --> 00:23:30,620
would then be used for their

572
00:23:27,919 --> 00:23:32,570
communications so you could speculate

573
00:23:30,620 --> 00:23:34,789
from that that this tool might be trying

574
00:23:32,570 --> 00:23:36,950
to detect whether this is a custom build

575
00:23:34,789 --> 00:23:40,970
of Windows to try and find specific

576
00:23:36,950 --> 00:23:43,100
targets but that is just speculation so

577
00:23:40,970 --> 00:23:45,710
from this we did find that type 0 to 3

578
00:23:43,100 --> 00:23:49,580
was a consistent installation point

579
00:23:45,710 --> 00:23:52,970
across all instances and from that

580
00:23:49,580 --> 00:23:57,080
there's some success so we had a mixture

581
00:23:52,970 --> 00:23:58,309
of a semi conclusive list of registry

582
00:23:57,080 --> 00:24:00,230
directories that we got through our

583
00:23:58,309 --> 00:24:03,100
experimentation although we didn't have

584
00:24:00,230 --> 00:24:05,000
the list themselves we found that the

585
00:24:03,100 --> 00:24:06,649
registries that we were seeing starts to

586
00:24:05,000 --> 00:24:07,820
repeat each other I don't see if you

587
00:24:06,649 --> 00:24:09,439
then splice them and see that each

588
00:24:07,820 --> 00:24:11,000
section of them was being repeated in

589
00:24:09,440 --> 00:24:13,400
different configurations you can

590
00:24:11,000 --> 00:24:15,470
therefore get every combination

591
00:24:13,400 --> 00:24:17,780
from the list that we have to generate

592
00:24:15,470 --> 00:24:19,460
quite extensive list of places where it

593
00:24:17,780 --> 00:24:21,110
could be stored although unfortunately

594
00:24:19,460 --> 00:24:21,890
we can't say for sure that it was

595
00:24:21,110 --> 00:24:23,510
conclusive

596
00:24:21,890 --> 00:24:25,950
we also found that the type 0 2 3

597
00:24:23,510 --> 00:24:27,040
because it was uniform allowed for a

598
00:24:25,950 --> 00:24:29,360
[Music]

599
00:24:27,040 --> 00:24:31,850
active installation detection by

600
00:24:29,360 --> 00:24:33,740
basically examining registry queries so

601
00:24:31,850 --> 00:24:35,689
from those 2 points we had both a legacy

602
00:24:33,740 --> 00:24:38,930
installation and an active installation

603
00:24:35,690 --> 00:24:41,630
detection point to focus on which is

604
00:24:38,930 --> 00:24:43,190
quite cool but although this is the

605
00:24:41,630 --> 00:24:46,310
active installation what about

606
00:24:43,190 --> 00:24:49,730
persistence so I talked earlier about so

607
00:24:46,310 --> 00:24:51,679
T so it persists using the stoller time

608
00:24:49,730 --> 00:24:53,690
boot kit which is built by the equation

609
00:24:51,680 --> 00:24:59,140
proved now this is an extremely advanced

610
00:24:53,690 --> 00:24:59,140
food clip at the time it works by

611
00:25:00,250 --> 00:25:04,610
basically injecting well into Bukit so

612
00:25:03,110 --> 00:25:08,240
injects into the bootloader of the

613
00:25:04,610 --> 00:25:10,969
system and it allows for all kill two

614
00:25:08,240 --> 00:25:12,920
instances to be rebooted at each boot

615
00:25:10,970 --> 00:25:15,080
and as I said earlier kill sick

616
00:25:12,920 --> 00:25:16,370
incidents can be configured in order to

617
00:25:15,080 --> 00:25:18,350
reboot the penalty view in students

618
00:25:16,370 --> 00:25:21,739
allowing and control a command control

619
00:25:18,350 --> 00:25:23,540
of an infected host this is the only one

620
00:25:21,740 --> 00:25:25,280
that we know to work up to supported

621
00:25:23,540 --> 00:25:28,430
Window System so works up to Windows 7

622
00:25:25,280 --> 00:25:30,080
on legacy vu he doesn't work past

623
00:25:28,430 --> 00:25:32,720
Windows 7 but I'll see where something's

624
00:25:30,080 --> 00:25:36,800
still supported and widely used so this

625
00:25:32,720 --> 00:25:38,030
is something of interest but first of

626
00:25:36,800 --> 00:25:40,310
all how does Windows 7 boot

627
00:25:38,030 --> 00:25:42,020
so to understand how so defects machine

628
00:25:40,310 --> 00:25:45,290
you need to understand how a system

629
00:25:42,020 --> 00:25:47,480
boots itself up so a system works by

630
00:25:45,290 --> 00:25:48,980
obviously powering on initiatives the

631
00:25:47,480 --> 00:25:50,000
BIOS which communicates for Hardware

632
00:25:48,980 --> 00:25:52,160
does Hardware checks

633
00:25:50,000 --> 00:25:54,110
this in turn loads the Master Boot

634
00:25:52,160 --> 00:25:57,020
Record which then loads the active

635
00:25:54,110 --> 00:25:58,729
partitions which in turn knows where the

636
00:25:57,020 --> 00:26:01,090
operators to files are and then loads

637
00:25:58,730 --> 00:26:04,730
the bootloader for that operating system

638
00:26:01,090 --> 00:26:07,459
so to folks so timing focuses on this

639
00:26:04,730 --> 00:26:09,890
error so the transition between the

640
00:26:07,460 --> 00:26:11,410
Master Boot Record and the acts of

641
00:26:09,890 --> 00:26:14,570
partitions hanging off to the bootloader

642
00:26:11,410 --> 00:26:15,950
and in this section the system looks

643
00:26:14,570 --> 00:26:17,780
something like this so the master

644
00:26:15,950 --> 00:26:20,750
pre-record will load the volume Boot

645
00:26:17,780 --> 00:26:23,300
Record into its own memory location

646
00:26:20,750 --> 00:26:25,520
rated over itself in light memory

647
00:26:23,300 --> 00:26:28,490
in turn within start the initial program

648
00:26:25,520 --> 00:26:32,540
loader which does a number at all which

649
00:26:28,490 --> 00:26:34,310
lays the filesystem and the boot manager

650
00:26:32,540 --> 00:26:35,690
location and then hands off the control

651
00:26:34,310 --> 00:26:38,659
to the boot manager which then loads the

652
00:26:35,690 --> 00:26:40,910
operating system so let's get down to

653
00:26:38,660 --> 00:26:45,020
what summertime does how does certain

654
00:26:40,910 --> 00:26:46,130
bug so its first as worth noting that so

655
00:26:45,020 --> 00:26:49,280
the time has been encountered before

656
00:26:46,130 --> 00:26:53,300
under the name of gray fish by our

657
00:26:49,280 --> 00:26:56,240
friends over SK labs and they basically

658
00:26:53,300 --> 00:27:00,260
did an overview about how it acts within

659
00:26:56,240 --> 00:27:01,280
the system and the sequence of events

660
00:27:00,260 --> 00:27:03,200
that happens but they didn't give a lot

661
00:27:01,280 --> 00:27:05,180
of technical detail about what exactly

662
00:27:03,200 --> 00:27:07,280
what changes were made in the system in

663
00:27:05,180 --> 00:27:08,630
order to allow this to happen or how to

664
00:27:07,280 --> 00:27:09,860
remediate or detect it

665
00:27:08,630 --> 00:27:13,340
so that's where our research came into

666
00:27:09,860 --> 00:27:17,990
it the subset that we used for our

667
00:27:13,340 --> 00:27:20,720
research was Windows 7 sp1 using a I Pro

668
00:27:17,990 --> 00:27:22,640
GT debugger and infection was the same

669
00:27:20,720 --> 00:27:24,320
as the previous one so using fuzzy bunch

670
00:27:22,640 --> 00:27:27,590
with a vinden spritz

671
00:27:24,320 --> 00:27:29,629
and the persistence was kill su

672
00:27:27,590 --> 00:27:31,370
persistence you apparently persistence

673
00:27:29,630 --> 00:27:33,860
using kill suit in order to analyze

674
00:27:31,370 --> 00:27:39,290
safety in great detail so let's get

675
00:27:33,860 --> 00:27:47,149
right into the crux of it so what you do

676
00:27:39,290 --> 00:27:49,690
to be back so this is so the first thing

677
00:27:47,150 --> 00:27:51,500
it does is actually it prevents disk

678
00:27:49,690 --> 00:27:55,190
prevents boot harinama

679
00:27:51,500 --> 00:27:57,950
and by changing this this value inside

680
00:27:55,190 --> 00:28:00,080
the MBR so instead of using a whole

681
00:27:57,950 --> 00:28:02,210
command which would then cause a system

682
00:28:00,080 --> 00:28:04,939
arrow and then cause error recording and

683
00:28:02,210 --> 00:28:06,440
instead makes this jump command back to

684
00:28:04,940 --> 00:28:08,480
its own location so we're just loop

685
00:28:06,440 --> 00:28:11,480
indefinitely preventing it from error

686
00:28:08,480 --> 00:28:15,110
reporting so if certain time ever fails

687
00:28:11,480 --> 00:28:16,700
to boot or for whatever reason there are

688
00:28:15,110 --> 00:28:19,010
subjective later but caused it to crash

689
00:28:16,700 --> 00:28:20,840
it will never tell the operator about

690
00:28:19,010 --> 00:28:22,850
why it's happened and will never give

691
00:28:20,840 --> 00:28:23,720
any information which is quite an

692
00:28:22,850 --> 00:28:27,949
elusive method

693
00:28:23,720 --> 00:28:31,130
I don't we thought those people the next

694
00:28:27,950 --> 00:28:34,970
thing is that the initial program mode

695
00:28:31,130 --> 00:28:36,500
our location is typically 7 7 a but son

696
00:28:34,970 --> 00:28:38,570
of Time Machine changes

697
00:28:36,500 --> 00:28:41,030
the reason it does this is that 77a

698
00:28:38,570 --> 00:28:43,429
instead of having the initial program

699
00:28:41,030 --> 00:28:46,160
motor it injects a number of subtle

700
00:28:43,430 --> 00:28:47,330
times specific datasets and it does this

701
00:28:46,160 --> 00:28:49,910
for operations that I'm going to have a

702
00:28:47,330 --> 00:28:51,679
later which is really funky but because

703
00:28:49,910 --> 00:28:58,720
it injects it at this location it has to

704
00:28:51,680 --> 00:29:04,460
move where it and then lose the IPL so

705
00:28:58,720 --> 00:29:06,530
within the IPL it will do these flag

706
00:29:04,460 --> 00:29:10,460
checks which are under which are again

707
00:29:06,530 --> 00:29:11,870
not normal so rather than just loading

708
00:29:10,460 --> 00:29:14,090
the index route before handing off to

709
00:29:11,870 --> 00:29:17,060
the boot manager instead it will do an e

710
00:29:14,090 --> 00:29:19,310
CX register check to see if it's set and

711
00:29:17,060 --> 00:29:21,860
if so it will load a customized index

712
00:29:19,310 --> 00:29:23,300
route which will contain the boot

713
00:29:21,860 --> 00:29:26,360
manager the malicious boot manager

714
00:29:23,300 --> 00:29:28,129
location now although this checks

715
00:29:26,360 --> 00:29:30,500
whether it's set web site I'm using stop

716
00:29:28,130 --> 00:29:34,010
we didn't find any instance or method

717
00:29:30,500 --> 00:29:36,890
shoot unset inside the configuration so

718
00:29:34,010 --> 00:29:39,260
we're not sure why checks this registry

719
00:29:36,890 --> 00:29:41,510
flag or we know is that it does and this

720
00:29:39,260 --> 00:29:45,879
can be seen more clearly here so it

721
00:29:41,510 --> 00:29:49,310
injects this check and if the check is

722
00:29:45,880 --> 00:29:52,370
unsuccessful it still loads the original

723
00:29:49,310 --> 00:29:54,560
uncustomary index route so it has the

724
00:29:52,370 --> 00:29:56,689
capacity to load normally without some

725
00:29:54,560 --> 00:30:00,409
time even though it's injected solar

726
00:29:56,690 --> 00:30:02,480
phone which is a bit on so although

727
00:30:00,410 --> 00:30:04,880
these changes odd where exactly does it

728
00:30:02,480 --> 00:30:09,110
handoff to malicious code so this can be

729
00:30:04,880 --> 00:30:11,180
seen in the IPL where at the bottom here

730
00:30:09,110 --> 00:30:15,949
ad actually injects a jump to his

731
00:30:11,180 --> 00:30:17,450
malicious code 9 3 ie this is basically

732
00:30:15,950 --> 00:30:20,030
this attempt to change the control flow

733
00:30:17,450 --> 00:30:23,750
and allow it to start doing its nasty

734
00:30:20,030 --> 00:30:27,740
work once he jumps to this location

735
00:30:23,750 --> 00:30:29,870
what exactly does solar time do so first

736
00:30:27,740 --> 00:30:32,600
of all it does a BIOS interrupt 15 this

737
00:30:29,870 --> 00:30:34,010
basically gives it a information on how

738
00:30:32,600 --> 00:30:37,459
the signals configured what type of

739
00:30:34,010 --> 00:30:39,590
memory it has what memory length it has

740
00:30:37,460 --> 00:30:42,050
over 1 megabyte and other system

741
00:30:39,590 --> 00:30:45,470
information if the memory type is what

742
00:30:42,050 --> 00:30:47,120
it requires it then enables enables

743
00:30:45,470 --> 00:30:47,680
access to memory over 1 megabyte by X

744
00:30:47,120 --> 00:30:51,129
rating

745
00:30:47,680 --> 00:30:53,770
at the a20 bus line and once it's done

746
00:30:51,130 --> 00:30:56,260
once it's enabled this extra memory it

747
00:30:53,770 --> 00:30:58,840
loads the MFT tape MFT table records in

748
00:30:56,260 --> 00:31:01,900
order to find a object ID file within

749
00:30:58,840 --> 00:31:05,010
the MFT records within this object file

750
00:31:01,900 --> 00:31:11,080
it inserts the index root of that file

751
00:31:05,010 --> 00:31:14,980
for for the location of the hidden boot

752
00:31:11,080 --> 00:31:16,929
back now the object the index root of an

753
00:31:14,980 --> 00:31:19,450
object ID file is not called in decree

754
00:31:16,930 --> 00:31:22,260
it's actually called dollar o now IPL

755
00:31:19,450 --> 00:31:25,390
programs don't typically look for it so

756
00:31:22,260 --> 00:31:28,179
how does solar time know what it's

757
00:31:25,390 --> 00:31:29,740
looking for so earlier I mentioned that

758
00:31:28,179 --> 00:31:32,530
sort of time had to change where it

759
00:31:29,740 --> 00:31:34,750
jumped to for the IPL that's because in

760
00:31:32,530 --> 00:31:37,629
the same location it actually injects

761
00:31:34,750 --> 00:31:39,340
the definition for the index root of an

762
00:31:37,630 --> 00:31:42,120
object ID file so it knows what to

763
00:31:39,340 --> 00:31:46,209
search for but it also injects

764
00:31:42,120 --> 00:31:48,459
decryption and keys and methodologies

765
00:31:46,210 --> 00:31:51,130
and methods for its payload that will be

766
00:31:48,460 --> 00:31:52,870
used later on so it has to move the IPL

767
00:31:51,130 --> 00:31:59,220
reference follow these two bits of key

768
00:31:52,870 --> 00:32:02,649
data so using that that defined dollar 0

769
00:31:59,220 --> 00:32:04,809
is now able to extract the index row of

770
00:32:02,650 --> 00:32:06,460
the object ID file in order to search

771
00:32:04,809 --> 00:32:08,620
for it's malicious food lighter that's

772
00:32:06,460 --> 00:32:13,870
hidden inside one of the references but

773
00:32:08,620 --> 00:32:16,239
how does solar time know which in what

774
00:32:13,870 --> 00:32:19,570
what value is written into and whether

775
00:32:16,240 --> 00:32:22,150
malicious is well to do that we have to

776
00:32:19,570 --> 00:32:25,389
look at how a index entries out is

777
00:32:22,150 --> 00:32:28,059
actually created so these extra entries

778
00:32:25,390 --> 00:32:29,620
formed up of these individual parts but

779
00:32:28,059 --> 00:32:32,710
you might find that between our line 8

780
00:32:29,620 --> 00:32:39,939
and vcn there's no defined length and

781
00:32:32,710 --> 00:32:42,820
that's where so design injects the it's

782
00:32:39,940 --> 00:32:43,360
the offset from the start and class of

783
00:32:42,820 --> 00:32:45,850
the MFT

784
00:32:43,360 --> 00:32:47,830
so it basically installs the offset from

785
00:32:45,850 --> 00:32:50,080
the being of the MIT file to where the

786
00:32:47,830 --> 00:32:53,500
malicious file is stored within the file

787
00:32:50,080 --> 00:32:55,090
system itself now so it can search

788
00:32:53,500 --> 00:32:56,560
through for any value in there and find

789
00:32:55,090 --> 00:32:58,060
the buddy was looking for anybody else

790
00:32:56,560 --> 00:32:59,940
and Jaclyn's at that point and extract

791
00:32:58,060 --> 00:33:02,070
it and then look for the file

792
00:32:59,940 --> 00:33:04,830
we found corresponding to a TrueType

793
00:33:02,070 --> 00:33:07,830
font file which is where it actually

794
00:33:04,830 --> 00:33:09,449
stores it's malicious kernel which is

795
00:33:07,830 --> 00:33:11,309
Michener's kernel driver which is in

796
00:33:09,450 --> 00:33:15,419
uses with which has been used for the

797
00:33:11,309 --> 00:33:17,129
bootloader using the check so T script

798
00:33:15,419 --> 00:33:19,110
within the framework itself once you've

799
00:33:17,129 --> 00:33:20,908
compromised a host you can run this

800
00:33:19,110 --> 00:33:22,949
script to see what service time files

801
00:33:20,909 --> 00:33:26,669
have been injected so in this instance

802
00:33:22,950 --> 00:33:28,740
we found that david p i dot t TF was it

803
00:33:26,669 --> 00:33:29,970
was injected but following that scope

804
00:33:28,740 --> 00:33:32,850
you actually found that list of all of

805
00:33:29,970 --> 00:33:34,320
the TTF files that can be used in order

806
00:33:32,850 --> 00:33:38,908
to store this malicious kernel driver

807
00:33:34,320 --> 00:33:41,730
which was which is pretty cool so once

808
00:33:38,909 --> 00:33:44,190
the boot pack is loaded into memory so

809
00:33:41,730 --> 00:33:46,110
once it's found this malicious kernel

810
00:33:44,190 --> 00:33:47,730
driver what does it do with it well it

811
00:33:46,110 --> 00:33:50,879
loads the mist-covered rabbit into

812
00:33:47,730 --> 00:33:54,570
memory and then using the functionality

813
00:33:50,879 --> 00:33:56,610
that was stored in the IPL location it

814
00:33:54,570 --> 00:33:58,470
then decrypts the packet using the keys

815
00:33:56,610 --> 00:34:00,449
the key that was stored over location

816
00:33:58,470 --> 00:34:02,639
the key that's injected into the

817
00:34:00,450 --> 00:34:05,879
original IP allocation is generated

818
00:34:02,639 --> 00:34:07,110
using crc to hash which is based out of

819
00:34:05,879 --> 00:34:13,440
the malware which is just about a

820
00:34:07,110 --> 00:34:17,399
thousand times I mean it then uses that

821
00:34:13,440 --> 00:34:19,020
hash generated by that to decrypt it it

822
00:34:17,399 --> 00:34:20,460
then calculates the hash of the internal

823
00:34:19,020 --> 00:34:22,859
malware against the hash that's

824
00:34:20,460 --> 00:34:24,389
installed in the decrypted malware to

825
00:34:22,859 --> 00:34:26,699
see if they correspond for an integrity

826
00:34:24,389 --> 00:34:28,169
check if the integrity check passes they

827
00:34:26,699 --> 00:34:30,658
then hands-off controller to the boot

828
00:34:28,168 --> 00:34:32,638
back and after that all of the kills two

829
00:34:30,659 --> 00:34:34,919
instances will be loaded can achieve

830
00:34:32,639 --> 00:34:38,129
instant scan reinitialize and so on so

831
00:34:34,918 --> 00:34:43,560
forth so that's that's how solar time

832
00:34:38,129 --> 00:34:45,690
functions but the crux of matter is how

833
00:34:43,560 --> 00:34:48,029
do we detect an immediate if kill series

834
00:34:45,690 --> 00:34:49,918
on a system so we've gone over how we

835
00:34:48,030 --> 00:34:50,399
can see if he's still what it does when

836
00:34:49,918 --> 00:34:52,049
it's installed

837
00:34:50,399 --> 00:34:54,659
what sort of time does once it gets on

838
00:34:52,050 --> 00:34:58,619
to us how it sits but how do we detect

839
00:34:54,659 --> 00:35:00,930
and remediate these points so for

840
00:34:58,619 --> 00:35:02,069
installation it breaks down into the

841
00:35:00,930 --> 00:35:05,368
type zero to three cryptographic

842
00:35:02,069 --> 00:35:07,470
prototype which is done at each first

843
00:35:05,369 --> 00:35:09,569
installation by paratroop agent this is

844
00:35:07,470 --> 00:35:12,240
some function number seven

845
00:35:09,569 --> 00:35:13,470
conical which although can be

846
00:35:12,240 --> 00:35:15,509
depending on the process is not

847
00:35:13,470 --> 00:35:18,600
conclusive as depending on what the

848
00:35:15,510 --> 00:35:20,220
operators injected into presence of any

849
00:35:18,600 --> 00:35:21,299
of the permutations of the British

850
00:35:20,220 --> 00:35:23,160
characters that we talked about earlier

851
00:35:21,300 --> 00:35:25,770
the lists we have a fullness that

852
00:35:23,160 --> 00:35:28,230
obviously you buyers can access bar can

853
00:35:25,770 --> 00:35:31,080
give references to and you and there's

854
00:35:28,230 --> 00:35:32,340
also this this blank box so at the end

855
00:35:31,080 --> 00:35:34,380
of our when we were coming to the

856
00:35:32,340 --> 00:35:35,760
conclusion we re scanned through the

857
00:35:34,380 --> 00:35:36,450
framework itself and we came across a

858
00:35:35,760 --> 00:35:39,600
driver list

859
00:35:36,450 --> 00:35:41,069
now the driver list couldn't say the mo

860
00:35:39,600 --> 00:35:43,470
drivers that were relate directly to

861
00:35:41,070 --> 00:35:45,270
kill sue their field suit loaded drivers

862
00:35:43,470 --> 00:35:47,879
now the load drivers are used when

863
00:35:45,270 --> 00:35:49,830
instances our first initialized although

864
00:35:47,880 --> 00:35:52,110
we found this journalist we couldn't

865
00:35:49,830 --> 00:35:54,660
find anything instance of these drivers

866
00:35:52,110 --> 00:35:56,640
being loaded during our research however

867
00:35:54,660 --> 00:35:58,140
we speculated that they were installed

868
00:35:56,640 --> 00:35:59,520
and then onion stored as fast as they

869
00:35:58,140 --> 00:36:02,790
were physically possible or they were

870
00:35:59,520 --> 00:36:05,400
used at solar time use this with solar

871
00:36:02,790 --> 00:36:06,779
time in order to create assistance but

872
00:36:05,400 --> 00:36:08,790
we were actually unable to find any

873
00:36:06,780 --> 00:36:11,310
reference of them so although this is a

874
00:36:08,790 --> 00:36:13,350
point of interest we snot are conclusive

875
00:36:11,310 --> 00:36:14,549
methods of detection but it is something

876
00:36:13,350 --> 00:36:16,020
that you could easily plug in

877
00:36:14,550 --> 00:36:18,480
transduction system in order to

878
00:36:16,020 --> 00:36:20,700
speculate if any of these large list of

879
00:36:18,480 --> 00:36:23,640
drivers independent than the present so

880
00:36:20,700 --> 00:36:26,189
this gives a method for legacy

881
00:36:23,640 --> 00:36:29,910
installation and operational

882
00:36:26,190 --> 00:36:31,680
installation so although we know we can

883
00:36:29,910 --> 00:36:33,480
now detect whether it is being a solder

884
00:36:31,680 --> 00:36:35,669
has been installed how do you get rid of

885
00:36:33,480 --> 00:36:38,460
killed soot if it is almost so Kelso

886
00:36:35,670 --> 00:36:40,350
operates in this fashion so the boot

887
00:36:38,460 --> 00:36:42,810
pack the poetry of instance and the

888
00:36:40,350 --> 00:36:44,460
running instances all communicate with

889
00:36:42,810 --> 00:36:47,250
the encrypted database within the

890
00:36:44,460 --> 00:36:50,490
registry so if you remove of the

891
00:36:47,250 --> 00:36:53,520
registry all of those functions ceased

892
00:36:50,490 --> 00:36:55,589
activates so the solar time has no kill

893
00:36:53,520 --> 00:36:57,119
sue data in order to boot the running

894
00:36:55,590 --> 00:36:58,410
instances don't have their module stores

895
00:36:57,119 --> 00:37:01,770
so they don't know how to act and the

896
00:36:58,410 --> 00:37:03,720
penalty Beijing has no index reference

897
00:37:01,770 --> 00:37:05,790
for the registry in order to know where

898
00:37:03,720 --> 00:37:08,520
the kill su modules are installed so it

899
00:37:05,790 --> 00:37:10,650
can't it can't communicate or perform

900
00:37:08,520 --> 00:37:12,960
any actions so moved in the database is

901
00:37:10,650 --> 00:37:15,660
the most effective way of neutering kill

902
00:37:12,960 --> 00:37:17,130
su the location that the database has

903
00:37:15,660 --> 00:37:19,529
I've gone over several times is

904
00:37:17,130 --> 00:37:22,260
obviously within one of those registry

905
00:37:19,530 --> 00:37:24,940
locations and but there are others that

906
00:37:22,260 --> 00:37:28,329
we may have not seen

907
00:37:24,940 --> 00:37:30,430
but if pursuit is installed with so

908
00:37:28,329 --> 00:37:31,810
totemism we put in the system we dope

909
00:37:30,430 --> 00:37:33,310
this is all bunny enacted memory he

910
00:37:31,810 --> 00:37:35,710
doesn't drop the disk unless you

911
00:37:33,310 --> 00:37:38,049
installed so no time so how do you

912
00:37:35,710 --> 00:37:41,770
notice other times installed so earlier

913
00:37:38,050 --> 00:37:43,720
on we quickly grazed over some of the

914
00:37:41,770 --> 00:37:48,060
changes it makes and one of the things

915
00:37:43,720 --> 00:37:51,819
that it does is it changes this section

916
00:37:48,060 --> 00:37:57,790
to use to not jump not operations before

917
00:37:51,819 --> 00:38:00,310
I jump to the IPL control so we focused

918
00:37:57,790 --> 00:38:01,060
on searching for those to knock commands

919
00:38:00,310 --> 00:38:07,150
where they shouldn't be

920
00:38:01,060 --> 00:38:10,660
to do this we actually adapted pi MBR

921
00:38:07,150 --> 00:38:13,810
which is a open source script for

922
00:38:10,660 --> 00:38:16,420
analyzing MBR files and instead injected

923
00:38:13,810 --> 00:38:19,569
this debt and VBR by with a saudi

924
00:38:16,420 --> 00:38:21,480
detection for bytes to six seven and two

925
00:38:19,569 --> 00:38:24,130
six eight for the not operations and

926
00:38:21,480 --> 00:38:25,540
essentially saying if these two values

927
00:38:24,130 --> 00:38:27,250
are found within this Turkish way

928
00:38:25,540 --> 00:38:30,759
they're not meant to be so no time is

929
00:38:27,250 --> 00:38:33,369
installed which on all the instances of

930
00:38:30,760 --> 00:38:35,829
testing we found to be accurate so every

931
00:38:33,369 --> 00:38:38,560
time we installed so the time running

932
00:38:35,829 --> 00:38:39,940
the script identified it correctly so

933
00:38:38,560 --> 00:38:42,970
this was the conclusive method for

934
00:38:39,940 --> 00:38:45,190
detecting it which is super awesome but

935
00:38:42,970 --> 00:38:46,810
although we know we can now see if solar

936
00:38:45,190 --> 00:38:49,270
time is installed using this method by

937
00:38:46,810 --> 00:38:51,910
analyzing the VBR records how do you

938
00:38:49,270 --> 00:38:53,170
stop or remove solar time and that's

939
00:38:51,910 --> 00:38:54,609
more tricky because start a time

940
00:38:53,170 --> 00:38:57,550
installs itself at multiple levels

941
00:38:54,609 --> 00:39:01,828
including the firmware so the firmware

942
00:38:57,550 --> 00:39:05,140
level shows they they had access to

943
00:39:01,829 --> 00:39:07,810
production sort of level access in order

944
00:39:05,140 --> 00:39:10,000
to change the phone my code equally

945
00:39:07,810 --> 00:39:13,150
sometime is heavily encrypted as we said

946
00:39:10,000 --> 00:39:15,520
it uses this well injected a decryption

947
00:39:13,150 --> 00:39:18,250
system in order to actually access the

948
00:39:15,520 --> 00:39:21,630
malware so a bypass there's a lot of AV

949
00:39:18,250 --> 00:39:24,310
systems that look into this sort of data

950
00:39:21,630 --> 00:39:25,920
and basically in order to prevent sort

951
00:39:24,310 --> 00:39:28,540
of function you need to sign

952
00:39:25,920 --> 00:39:30,250
manufactures need to sign that the MPR's

953
00:39:28,540 --> 00:39:32,440
the VBR all of their sort of firmware in

954
00:39:30,250 --> 00:39:34,119
order to prevent alterations now as we

955
00:39:32,440 --> 00:39:35,440
said this works on Windows service

956
00:39:34,119 --> 00:39:37,390
windows over the off the Lexy poo

957
00:39:35,440 --> 00:39:38,410
however UEFI and Windows eight forward

958
00:39:37,390 --> 00:39:40,540
using secure boot

959
00:39:38,410 --> 00:39:41,890
Vence s because the checks are put in

960
00:39:40,540 --> 00:39:43,690
place all the time can note on a

961
00:39:41,890 --> 00:39:45,850
function because the checks detect it

962
00:39:43,690 --> 00:39:47,230
and I'll see prevented from making

963
00:39:45,850 --> 00:39:52,930
alterations in the first place all

964
00:39:47,230 --> 00:40:05,700
preventing the mower from functioning so

965
00:39:52,930 --> 00:40:05,700
yeah big quick any questions okay yeah

966
00:40:09,300 --> 00:40:14,920
the registering of surveys yeah so all

967
00:40:12,580 --> 00:40:17,110
the kills two instances created their

968
00:40:14,920 --> 00:40:19,150
own instance within the register

969
00:40:17,110 --> 00:40:21,330
database so that REM management

970
00:40:19,150 --> 00:40:24,520
reference all those different conquered

971
00:40:21,330 --> 00:40:27,460
configurations each instance would have

972
00:40:24,520 --> 00:40:30,340
its own injection into the into the

973
00:40:27,460 --> 00:40:32,740
registry and under that each module the

974
00:40:30,340 --> 00:40:35,080
32 bit randomized counter after that

975
00:40:32,740 --> 00:40:38,589
would be each module installed under

976
00:40:35,080 --> 00:40:40,630
that so some instances have by default I

977
00:40:38,590 --> 00:40:42,850
think three modules installed where some

978
00:40:40,630 --> 00:40:44,320
of the money have to so depending on the

979
00:40:42,850 --> 00:40:45,580
instance type you can see which modules

980
00:40:44,320 --> 00:40:47,380
are installed an equally if you then

981
00:40:45,580 --> 00:40:51,160
installed a custom module underneath

982
00:40:47,380 --> 00:40:53,140
that instance all say darkstar like for

983
00:40:51,160 --> 00:40:55,060
example for packet capture that we been

984
00:40:53,140 --> 00:40:57,839
injected under that richly location as

985
00:40:55,060 --> 00:40:57,840
well but it's all good

986
00:41:02,560 --> 00:41:06,520
we did look into making custom modules

987
00:41:04,720 --> 00:41:09,430
we couldn't actually figure out how the

988
00:41:06,520 --> 00:41:13,000
hell they built them so we found

989
00:41:09,430 --> 00:41:14,290
references to obviously how it works we

990
00:41:13,000 --> 00:41:16,090
found the scripts that obviously

991
00:41:14,290 --> 00:41:17,290
references the data but we couldn't find

992
00:41:16,090 --> 00:41:19,420
when the bodies themselves are actually

993
00:41:17,290 --> 00:41:22,240
stored so we can figure out how they

994
00:41:19,420 --> 00:41:23,800
were coded or whether they also use they

995
00:41:22,240 --> 00:41:26,020
used to use a custom scripting language

996
00:41:23,800 --> 00:41:27,940
which is specifically the dance scripts

997
00:41:26,020 --> 00:41:29,200
framework so we suspect that because

998
00:41:27,940 --> 00:41:30,820
these original modules were built back

999
00:41:29,200 --> 00:41:32,470
then they may use the same scripting

1000
00:41:30,820 --> 00:41:36,240
language but we were unsure at the time

1001
00:41:32,470 --> 00:41:36,240
but that wasn't thing we did look into

1002
00:41:42,150 --> 00:41:46,530
I'm listening

