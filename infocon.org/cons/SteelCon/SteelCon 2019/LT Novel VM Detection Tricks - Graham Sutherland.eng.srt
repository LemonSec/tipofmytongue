1
00:00:02,580 --> 00:00:16,320
I must stop now hello I wrote this talk

2
00:00:10,190 --> 00:00:18,060
today but a few years back I did a talk

3
00:00:16,320 --> 00:00:19,800
called am am i living in a box talking

4
00:00:18,060 --> 00:00:21,360
about virtual machine detection so today

5
00:00:19,800 --> 00:00:24,540
is I'm living in a box to Virgil

6
00:00:21,360 --> 00:00:28,380
Boogaloo draft addition I also while

7
00:00:24,540 --> 00:00:31,860
writing this on the default presentation

8
00:00:28,380 --> 00:00:34,320
mode for whatever the hell this piece of

9
00:00:31,860 --> 00:00:39,140
keynote realize that first dates are

10
00:00:34,320 --> 00:00:39,140
really lazy and that's just their logo

11
00:00:42,320 --> 00:00:46,170
this has nothing to do with the talk I

12
00:00:44,370 --> 00:00:49,320
just thought it was funny

13
00:00:46,170 --> 00:00:51,899
so as a background I'm a security

14
00:00:49,320 --> 00:00:54,780
researcher at net to Dar and I are an AI

15
00:00:51,899 --> 00:00:56,640
is research and innovation we we chose

16
00:00:54,780 --> 00:00:59,579
to use our and I rather than R&D because

17
00:00:56,640 --> 00:01:00,960
we're special snowflakes I'm the

18
00:00:59,579 --> 00:01:02,520
security researcher which is basically

19
00:01:00,960 --> 00:01:04,649
the unicorn role it means I get to sit

20
00:01:02,520 --> 00:01:05,790
at home all day and break things and

21
00:01:04,649 --> 00:01:09,209
never have to go and talk to clients

22
00:01:05,790 --> 00:01:13,409
it's awesome as I said this boy cotton

23
00:01:09,209 --> 00:01:16,049
VM detection in 2016 and I did a sort of

24
00:01:13,409 --> 00:01:17,959
small talk at DC 44:20 in 2015 when I

25
00:01:16,049 --> 00:01:20,189
first started looking at this stuff and

26
00:01:17,959 --> 00:01:23,850
I'm a contributor to a tool called

27
00:01:20,189 --> 00:01:27,449
al-qasr which is Arabic and it means the

28
00:01:23,850 --> 00:01:29,548
loser it's written primarily by a guy i

29
00:01:27,450 --> 00:01:32,459
only know by the handle lord no note

30
00:01:29,549 --> 00:01:35,249
that lord noteworthy it's on github it's

31
00:01:32,459 --> 00:01:38,399
open source the idea is is a tool for a

32
00:01:35,249 --> 00:01:39,839
virtual machine sandboxing debug

33
00:01:38,399 --> 00:01:41,429
detection that kind of stuff but it's

34
00:01:39,840 --> 00:01:42,959
kind of like a stress test for those

35
00:01:41,429 --> 00:01:44,700
kinds of things so if you've got a

36
00:01:42,959 --> 00:01:47,579
malware analysis environment and you

37
00:01:44,700 --> 00:01:50,520
want to check whether malware that looks

38
00:01:47,579 --> 00:01:52,408
for the MS is likely to detect your

39
00:01:50,520 --> 00:01:53,429
thing as a VM you can throw this in it

40
00:01:52,409 --> 00:01:55,289
and see what detections

41
00:01:53,429 --> 00:01:56,609
pass and fail and whatever if you've got

42
00:01:55,289 --> 00:01:58,709
a sandbox environment and you're trying

43
00:01:56,609 --> 00:02:00,238
to do API hooking to fake some of these

44
00:01:58,709 --> 00:02:02,999
things about how that you use for that

45
00:02:00,239 --> 00:02:05,249
you can use it to test a V heuristics so

46
00:02:02,999 --> 00:02:08,399
if you're an AV vendor and you want to

47
00:02:05,249 --> 00:02:10,288
see if your VM protection and heuristics

48
00:02:08,399 --> 00:02:11,570
so is this piece of malware looking to

49
00:02:10,288 --> 00:02:13,010
see if it's innovate

50
00:02:11,570 --> 00:02:15,350
see which one's it picks up you can just

51
00:02:13,010 --> 00:02:19,130
prefer that throw that's all right it's

52
00:02:15,350 --> 00:02:21,530
quite nice we do have some scope with

53
00:02:19,130 --> 00:02:23,750
the tool oh I should point out that this

54
00:02:21,530 --> 00:02:25,430
other guy wrote most of this tool and I

55
00:02:23,750 --> 00:02:28,370
just contributed a bunch of weird and

56
00:02:25,430 --> 00:02:29,660
new things to it recently sent recently

57
00:02:28,370 --> 00:02:31,580
it's been like several years I've been

58
00:02:29,660 --> 00:02:32,540
throwing weird things in it there is

59
00:02:31,580 --> 00:02:34,310
some scope with it

60
00:02:32,540 --> 00:02:36,260
we don't do camera modules so we don't

61
00:02:34,310 --> 00:02:37,970
write our own drivers mostly because

62
00:02:36,260 --> 00:02:39,200
driver signing is a pain in the ass and

63
00:02:37,970 --> 00:02:40,760
we can't be bothered to write really

64
00:02:39,200 --> 00:02:41,958
secure drivers because we don't want to

65
00:02:40,760 --> 00:02:43,579
ship this thing and then find out that

66
00:02:41,959 --> 00:02:45,830
we're basically just making people's

67
00:02:43,580 --> 00:02:47,209
boxes insecure for that same reason we

68
00:02:45,830 --> 00:02:49,510
don't use vulnerable drivers so we don't

69
00:02:47,209 --> 00:02:51,860
think use things like rewrite everything

70
00:02:49,510 --> 00:02:54,230
because the idea replaces shipping this

71
00:02:51,860 --> 00:02:56,810
thing and then turning that the the PM

72
00:02:54,230 --> 00:03:00,290
our VM platform into an easily potable

73
00:02:56,810 --> 00:03:01,100
boxes there's no great idea and again

74
00:03:00,290 --> 00:03:02,600
for the same reason we don't use

75
00:03:01,100 --> 00:03:05,480
exploits on anything so even if we've

76
00:03:02,600 --> 00:03:07,609
got some sort of crazy VM outbreak thing

77
00:03:05,480 --> 00:03:09,350
that we'd like break out on the bility

78
00:03:07,610 --> 00:03:10,250
we don't use it just because it's it

79
00:03:09,350 --> 00:03:11,739
generally does make the platform

80
00:03:10,250 --> 00:03:14,150
unstable it's a bit of a pain in the ass

81
00:03:11,739 --> 00:03:15,290
we don't modify system settings we just

82
00:03:14,150 --> 00:03:16,640
leave them as whatever they are so if

83
00:03:15,290 --> 00:03:18,500
somebody's already modified something

84
00:03:16,640 --> 00:03:21,738
somebody's changed their setting to a

85
00:03:18,500 --> 00:03:23,360
specific value because of how they want

86
00:03:21,739 --> 00:03:25,160
to set up that environment we don't

87
00:03:23,360 --> 00:03:26,420
change anything with that we only run on

88
00:03:25,160 --> 00:03:28,160
Windows because it's a it's a Windows

89
00:03:26,420 --> 00:03:29,780
talk it's written in C++ if I had a

90
00:03:28,160 --> 00:03:35,090
choice I wouldn't write it in C++ but it

91
00:03:29,780 --> 00:03:37,430
is so virtual hardware the thing about

92
00:03:35,090 --> 00:03:38,750
virtual machines is they have to pretend

93
00:03:37,430 --> 00:03:42,040
that they've got all this hot

94
00:03:38,750 --> 00:03:45,640
so disks network controllers PCI roots

95
00:03:42,040 --> 00:03:48,920
or the ACPI stuff like power management

96
00:03:45,640 --> 00:03:52,100
a lot of this is not passed directly

97
00:03:48,920 --> 00:03:54,679
through almost none of its directly

98
00:03:52,100 --> 00:03:57,650
passed through there's an intermediate

99
00:03:54,680 --> 00:04:00,440
layer so either that's faking a device

100
00:03:57,650 --> 00:04:02,420
for example virtual hard disks so you

101
00:04:00,440 --> 00:04:03,620
pretend that your ask is e device but

102
00:04:02,420 --> 00:04:06,828
really you're just waiting to a file on

103
00:04:03,620 --> 00:04:08,870
the host platform or some sort of

104
00:04:06,829 --> 00:04:10,250
translation there are some things out

105
00:04:08,870 --> 00:04:13,810
there so for example the video drivers

106
00:04:10,250 --> 00:04:18,829
on on most things on most

107
00:04:13,810 --> 00:04:21,680
VM platforms are either entirely fake or

108
00:04:18,829 --> 00:04:24,289
they do things like passing through open

109
00:04:21,680 --> 00:04:25,880
commands onto the host which can be

110
00:04:24,289 --> 00:04:26,840
somewhat problematic in some cases and I

111
00:04:25,880 --> 00:04:28,130
think that have actually been a few

112
00:04:26,840 --> 00:04:29,690
breakouts from doing things like that

113
00:04:28,130 --> 00:04:32,690
but yeah it's not the same as real

114
00:04:29,690 --> 00:04:34,039
hardware and because of that reason we

115
00:04:32,690 --> 00:04:35,990
can detect that hardware

116
00:04:34,039 --> 00:04:37,550
now remember that I said that we don't

117
00:04:35,990 --> 00:04:39,800
go in the kernel so all this has to be

118
00:04:37,550 --> 00:04:40,210
done from user mode but we can still do

119
00:04:39,800 --> 00:04:43,970
it

120
00:04:40,210 --> 00:04:46,419
um this first one is the trick that I

121
00:04:43,970 --> 00:04:49,070
spoke about in 2015

122
00:04:46,419 --> 00:04:50,780
Windows has an API called enum system

123
00:04:49,070 --> 00:04:53,270
firmware tables it allows you to look at

124
00:04:50,780 --> 00:04:54,799
the a CPI tables on the system the a CPI

125
00:04:53,270 --> 00:04:58,159
tables are basically a block of memory

126
00:04:54,800 --> 00:05:02,210
that's in a fixed physical position that

127
00:04:58,160 --> 00:05:06,430
explains how the system is sort of glued

128
00:05:02,210 --> 00:05:09,948
together like where the SM BIOS data is

129
00:05:06,430 --> 00:05:14,900
what individual Hardware extensions I

130
00:05:09,949 --> 00:05:17,990
think a Segoe extensions exist and also

131
00:05:14,900 --> 00:05:20,780
the actual while source code is actually

132
00:05:17,990 --> 00:05:22,210
in memory it's in physical memory and

133
00:05:20,780 --> 00:05:24,258
you can read that out byah

134
00:05:22,210 --> 00:05:26,989
there's another API that actually lets

135
00:05:24,259 --> 00:05:29,930
you get the data out of these tables so

136
00:05:26,990 --> 00:05:31,880
you can enumerate the tables look for

137
00:05:29,930 --> 00:05:33,139
the SM bar some things like that you can

138
00:05:31,880 --> 00:05:34,550
look at the names of them and you can

139
00:05:33,139 --> 00:05:35,750
look up what's there so for example on

140
00:05:34,550 --> 00:05:37,250
the VM you're not going to find windows

141
00:05:35,750 --> 00:05:39,199
platform binary table because nobody

142
00:05:37,250 --> 00:05:41,180
implements that on PM's this was that

143
00:05:39,199 --> 00:05:43,159
was the thing if you remember Lenovo

144
00:05:41,180 --> 00:05:44,750
superfish that we're shipping drivers

145
00:05:43,159 --> 00:05:46,969
when you first install windows windows

146
00:05:44,750 --> 00:05:49,880
looks for this term you could be a PBT

147
00:05:46,970 --> 00:05:52,699
thing and then the idea is it's so that

148
00:05:49,880 --> 00:05:54,740
you can install drivers into Windows

149
00:05:52,699 --> 00:05:56,479
even if you format the disk and when you

150
00:05:54,740 --> 00:05:57,590
soft up again the idea is that obviously

151
00:05:56,479 --> 00:05:59,240
if you've got some hardware driver that

152
00:05:57,590 --> 00:06:00,770
windows requires to boot that's specific

153
00:05:59,240 --> 00:06:02,509
to this laptop well that's nothing be

154
00:06:00,770 --> 00:06:04,789
great if you try and boot for the first

155
00:06:02,509 --> 00:06:06,169
time on a wet white image so what they

156
00:06:04,789 --> 00:06:08,060
were doing is sticking drives in there

157
00:06:06,169 --> 00:06:09,229
unfortunately their driver had a ssl

158
00:06:08,060 --> 00:06:13,460
man-in-the-middle thing that was just

159
00:06:09,229 --> 00:06:14,599
like super grim slic is hardware

160
00:06:13,460 --> 00:06:16,310
licensing so if you've got a laptop

161
00:06:14,599 --> 00:06:20,360
that's come out windows license is tied

162
00:06:16,310 --> 00:06:22,490
to it slic table is in there HP is high

163
00:06:20,360 --> 00:06:24,500
performance event timer well I don't

164
00:06:22,490 --> 00:06:26,240
actually think any of the VMS implement

165
00:06:24,500 --> 00:06:29,750
HP but if you've got a motherboard

166
00:06:26,240 --> 00:06:31,580
that's newer than about 1999 it'll have

167
00:06:29,750 --> 00:06:35,199
a pet so it counts off you don't have a

168
00:06:31,580 --> 00:06:37,469
page entry in your ACPR tables

169
00:06:35,199 --> 00:06:40,830
you can guess that it's probably a VM

170
00:06:37,470 --> 00:06:43,689
and the binary data if you pull out the

171
00:06:40,830 --> 00:06:45,758
the binary data of say for example the

172
00:06:43,689 --> 00:06:50,590
SM bias which is the BIOS implementation

173
00:06:45,759 --> 00:06:52,150
so by the standard efi or UEFI it

174
00:06:50,590 --> 00:06:55,780
contains copyright strings like

175
00:06:52,150 --> 00:06:58,030
copyright VMware 2006 which is like hm I

176
00:06:55,780 --> 00:06:59,888
wonder if I'm gonna get a VM they are

177
00:06:58,030 --> 00:07:01,960
actually replaceable it's rarely

178
00:06:59,889 --> 00:07:04,389
documented it's not supported then it's

179
00:07:01,960 --> 00:07:06,489
really hard to fathom out and do because

180
00:07:04,389 --> 00:07:09,759
you're effectively replacing it with a

181
00:07:06,490 --> 00:07:10,990
fake bios which is super weird but you

182
00:07:09,759 --> 00:07:15,849
can scrub out a lot in the strings

183
00:07:10,990 --> 00:07:17,560
things like that but yeah it's a bit of

184
00:07:15,849 --> 00:07:19,509
a painter to get around so this was

185
00:07:17,560 --> 00:07:21,009
discovered and used by me at least

186
00:07:19,509 --> 00:07:22,990
somebody else may have come up with this

187
00:07:21,009 --> 00:07:25,330
before but this was in 2015 and I've

188
00:07:22,990 --> 00:07:26,319
already given a thought about that one

189
00:07:25,330 --> 00:07:30,419
of the newer things I've been playing

190
00:07:26,319 --> 00:07:34,060
with is hotness so Windows supports

191
00:07:30,419 --> 00:07:35,889
direct a TV at Rp I'm just call it that

192
00:07:34,060 --> 00:07:37,659
company that lets out at Rp command so

193
00:07:35,889 --> 00:07:39,639
that RP commands are what off

194
00:07:37,659 --> 00:07:41,889
effectively physically sent over the

195
00:07:39,639 --> 00:07:43,900
wire when you're talking to a hard disk

196
00:07:41,889 --> 00:07:46,300
to say I want to write something on a

197
00:07:43,900 --> 00:07:48,690
recently that I want to see what you

198
00:07:46,300 --> 00:07:51,310
support in terms of X Y Z configuration

199
00:07:48,690 --> 00:07:52,930
there's a command called a CI you can

200
00:07:51,310 --> 00:07:55,180
send this send these direct commands

201
00:07:52,930 --> 00:07:56,800
using the device auto control API so you

202
00:07:55,180 --> 00:07:58,319
have to open a handle to the physical

203
00:07:56,800 --> 00:08:01,990
disk which means you have to be an admin

204
00:07:58,319 --> 00:08:04,270
and then you can send these commands the

205
00:08:01,990 --> 00:08:05,830
idea APA identify command is basically

206
00:08:04,270 --> 00:08:07,359
hello disk I would like to know

207
00:08:05,830 --> 00:08:09,940
everything about you and what you

208
00:08:07,360 --> 00:08:10,960
support what sided disk you are so it

209
00:08:09,940 --> 00:08:12,069
turns out there's a bunch of data in

210
00:08:10,960 --> 00:08:16,750
there that you can use for identifying

211
00:08:12,069 --> 00:08:18,669
whether it's a VM or not so for examples

212
00:08:16,750 --> 00:08:20,650
so some of the values that it gives you

213
00:08:18,669 --> 00:08:24,698
make absolutely no sense VirtualBox for

214
00:08:20,650 --> 00:08:26,349
example under the support flags a lot of

215
00:08:24,699 --> 00:08:27,969
the features say that it doesn't support

216
00:08:26,349 --> 00:08:30,400
them but they are enabled which is like

217
00:08:27,969 --> 00:08:32,169
hmm how does that work

218
00:08:30,400 --> 00:08:34,838
and some of them are like hard-coded

219
00:08:32,169 --> 00:08:37,448
values that are used by the VM so if you

220
00:08:34,839 --> 00:08:38,829
go OK is this value this this value this

221
00:08:37,448 --> 00:08:42,478
this value this and this value this

222
00:08:38,828 --> 00:08:44,890
probably a VM all of this stuff is

223
00:08:42,479 --> 00:08:46,120
hard-coded into the virtual machine

224
00:08:44,890 --> 00:08:47,649
platform so if you actually go to look

225
00:08:46,120 --> 00:08:48,310
up the source code for say VirtualBox

226
00:08:47,649 --> 00:08:49,870
you can actually

227
00:08:48,310 --> 00:08:52,180
go and find the virtual device driver

228
00:08:49,870 --> 00:08:54,160
and see where it implements the AGI ata

229
00:08:52,180 --> 00:08:55,719
identified command and see what result

230
00:08:54,160 --> 00:08:57,219
results actually throws back to you so

231
00:08:55,720 --> 00:08:59,110
you can match on those that easy of

232
00:08:57,220 --> 00:09:02,380
course you don't want to do something

233
00:08:59,110 --> 00:09:04,120
like say take the entire blob of data

234
00:09:02,380 --> 00:09:06,430
and say does it match exactly because it

235
00:09:04,120 --> 00:09:08,500
means as soon as somebody patches some

236
00:09:06,430 --> 00:09:10,569
new thing into the disk driver for it

237
00:09:08,500 --> 00:09:11,860
suddenly my detection stops working so

238
00:09:10,570 --> 00:09:15,130
what you generally do is you pick out

239
00:09:11,860 --> 00:09:16,960
some key things and say you like free

240
00:09:15,130 --> 00:09:19,120
checks and if two out of three pass then

241
00:09:16,960 --> 00:09:22,750
you guess that your honor the M and stop

242
00:09:19,120 --> 00:09:25,480
executing and some of the values that

243
00:09:22,750 --> 00:09:28,630
are sent are never ever seen in real

244
00:09:25,480 --> 00:09:30,130
modern hardware or hardware that you I

245
00:09:28,630 --> 00:09:31,180
mean for example one of the big things

246
00:09:30,130 --> 00:09:33,279
is crypto Mon that's right people

247
00:09:31,180 --> 00:09:34,569
dropping crypto miners on boxes and they

248
00:09:33,279 --> 00:09:36,880
want to know that their content miner

249
00:09:34,570 --> 00:09:44,560
isn't being run on a VM platform that's

250
00:09:36,880 --> 00:09:47,050
like being used for malware analysis so

251
00:09:44,560 --> 00:09:49,510
if you've got a system that's using

252
00:09:47,050 --> 00:09:50,740
scuzzy devices from 1993 you're probably

253
00:09:49,510 --> 00:09:52,600
going to guess you're not making much

254
00:09:50,740 --> 00:09:54,839
about you out of foreign trips a minor

255
00:09:52,600 --> 00:09:57,280
on it so yeah some of the things like

256
00:09:54,839 --> 00:09:59,320
scuzzy interface versions for example

257
00:09:57,280 --> 00:10:02,740
give away dead easy that you're on at

258
00:09:59,320 --> 00:10:04,480
the end so I wrote a tool called a TR

259
00:10:02,740 --> 00:10:06,490
identify them and basically all it does

260
00:10:04,480 --> 00:10:08,650
is it opens a handle to each individual

261
00:10:06,490 --> 00:10:10,990
physical disk and it sends an 80-hour HT

262
00:10:08,650 --> 00:10:13,060
a identified command takes the results

263
00:10:10,990 --> 00:10:15,880
passed them out dump them into a big

264
00:10:13,060 --> 00:10:17,589
text bar so what I do is then I take

265
00:10:15,880 --> 00:10:21,310
this tool run it on a bunch of boxes

266
00:10:17,589 --> 00:10:22,660
bring on the different VM platforms as

267
00:10:21,310 --> 00:10:23,920
many as I can find send it off to my

268
00:10:22,660 --> 00:10:25,390
friends and say hey can you run it on

269
00:10:23,920 --> 00:10:26,890
this box only because people trust me

270
00:10:25,390 --> 00:10:28,600
and just run arbitrary executables that

271
00:10:26,890 --> 00:10:30,730
I send them look the source codes right

272
00:10:28,600 --> 00:10:33,490
here trust that this binary is the same

273
00:10:30,730 --> 00:10:36,310
thing and then I take all of that date

274
00:10:33,490 --> 00:10:37,990
data and go okay well these are all vm's

275
00:10:36,310 --> 00:10:40,869
these are all physical real machines

276
00:10:37,990 --> 00:10:43,089
what's the difference what was obviously

277
00:10:40,870 --> 00:10:46,690
the same across all the VMS and

278
00:10:43,089 --> 00:10:49,300
different for physical Hardware this was

279
00:10:46,690 --> 00:10:52,029
really low effort and in a day I think I

280
00:10:49,300 --> 00:10:55,479
found about 11 different ways to detect

281
00:10:52,029 --> 00:10:58,660
the m's just out of that so it turns out

282
00:10:55,480 --> 00:11:02,080
is actually really easy to do this the

283
00:10:58,660 --> 00:11:07,540
next thing is PCI controllers so

284
00:11:02,080 --> 00:11:09,010
if you're not familiar PCI is there are

285
00:11:07,540 --> 00:11:12,430
many words I could use to describe PCI

286
00:11:09,010 --> 00:11:15,550
PCI devices are sort of go in there like

287
00:11:12,430 --> 00:11:18,310
a tree and they're attached all the way

288
00:11:15,550 --> 00:11:20,709
back up to effectively like the PCI

289
00:11:18,310 --> 00:11:22,540
group which is on the processor there

290
00:11:20,709 --> 00:11:25,268
may be multiple routes there may be

291
00:11:22,540 --> 00:11:28,029
multiple PCI controllers the idea is

292
00:11:25,269 --> 00:11:30,850
that the lanes are then allocated in his

293
00:11:28,029 --> 00:11:33,760
specific slots which then can be given

294
00:11:30,850 --> 00:11:36,399
to a specific piece of hardware yet

295
00:11:33,760 --> 00:11:37,750
these things like PCI multiplexers so if

296
00:11:36,399 --> 00:11:40,089
you've ever had the thing with like

297
00:11:37,750 --> 00:11:41,920
installing an you know the new nvme m

298
00:11:40,089 --> 00:11:43,779
dot two drives and they're like if you

299
00:11:41,920 --> 00:11:45,939
put you can put one in but if you put a

300
00:11:43,779 --> 00:11:47,970
little one in your top slot now only

301
00:11:45,940 --> 00:11:51,100
runs up 4x or something weird like that

302
00:11:47,970 --> 00:11:54,070
and the reason that that happens is that

303
00:11:51,100 --> 00:11:56,200
actually these lanes are being

304
00:11:54,070 --> 00:11:58,180
multiplexed across different things so

305
00:11:56,200 --> 00:11:59,800
it basically says once you put this

306
00:11:58,180 --> 00:12:00,910
thing in here it's which is all of the

307
00:11:59,800 --> 00:12:03,040
lanes over here and you can no longer

308
00:12:00,910 --> 00:12:04,750
use them down here each of these things

309
00:12:03,040 --> 00:12:07,779
appears in the AC Pai

310
00:12:04,750 --> 00:12:09,399
Hardware like hard by table stuff I

311
00:12:07,779 --> 00:12:12,939
can't read that because I'm in user mode

312
00:12:09,399 --> 00:12:14,380
however turns out there's like setup API

313
00:12:12,940 --> 00:12:17,170
so that let you dump all the stuff in

314
00:12:14,380 --> 00:12:18,579
fact if you go into device manager just

315
00:12:17,170 --> 00:12:20,140
go into like system devices and you'll

316
00:12:18,579 --> 00:12:21,550
see all of these like PCI Brutes and

317
00:12:20,140 --> 00:12:25,480
multiplexers and all sorts crazy stuff

318
00:12:21,550 --> 00:12:27,279
in that and the exact same PCI have a

319
00:12:25,480 --> 00:12:29,950
configuration just happens to exist on

320
00:12:27,279 --> 00:12:32,140
like every VirtualBox and every VMware

321
00:12:29,950 --> 00:12:33,760
and every hyper-v and it's like well

322
00:12:32,140 --> 00:12:35,709
that's a dead giveaway so you can

323
00:12:33,760 --> 00:12:37,450
enumerate all the back with setup api's

324
00:12:35,709 --> 00:12:43,089
or just used to be a Mike has to be a my

325
00:12:37,450 --> 00:12:44,680
that's all out there and yeah using that

326
00:12:43,089 --> 00:12:47,350
you can either take for example the

327
00:12:44,680 --> 00:12:52,349
vendor IDs because all of them have so

328
00:12:47,350 --> 00:12:54,970
each PCI device or has a vendor ID and a

329
00:12:52,350 --> 00:12:56,350
device ID and you can just match on

330
00:12:54,970 --> 00:12:57,490
those basically say if you've got this

331
00:12:56,350 --> 00:13:00,880
one and this one and this one this one

332
00:12:57,490 --> 00:13:02,290
it's a VM and you can do the same couple

333
00:13:00,880 --> 00:13:03,670
the hardware as well but PCI controllers

334
00:13:02,290 --> 00:13:06,219
are pretty hilarious facts it means that

335
00:13:03,670 --> 00:13:08,949
if you want to get around this you've

336
00:13:06,220 --> 00:13:10,779
basically got to like start rewriting

337
00:13:08,949 --> 00:13:12,520
your vm platform so even if it's

338
00:13:10,779 --> 00:13:13,930
different stores like VirtualBox got

339
00:13:12,520 --> 00:13:15,600
down that's a pain in the ass to try and

340
00:13:13,930 --> 00:13:18,880
fix

341
00:13:15,600 --> 00:13:20,740
power management RVM platforms don't

342
00:13:18,880 --> 00:13:22,570
support sleep states and surprisingly

343
00:13:20,740 --> 00:13:27,310
because you can't really Hardware sleep

344
00:13:22,570 --> 00:13:29,200
but VM most of this comes down to why

345
00:13:27,310 --> 00:13:30,910
implement it like we want to get a

346
00:13:29,200 --> 00:13:32,500
minimum of our product out the door

347
00:13:30,910 --> 00:13:34,240
while I try and support all of these

348
00:13:32,500 --> 00:13:35,980
wigs like sleep state so you can

349
00:13:34,240 --> 00:13:37,900
enumerate this with a user mode API call

350
00:13:35,980 --> 00:13:40,870
it get PWR capability so get power

351
00:13:37,900 --> 00:13:43,959
capabilities that just returns you a

352
00:13:40,870 --> 00:13:46,960
struct with a bunch of flags for yes/no

353
00:13:43,960 --> 00:13:49,390
for each of the power states and if s1

354
00:13:46,960 --> 00:13:52,270
s2 s3 and s4 states are not supported

355
00:13:49,390 --> 00:13:54,819
it's a VM and that caches I think

356
00:13:52,270 --> 00:13:58,120
literally every virtualization platform

357
00:13:54,820 --> 00:14:05,920
that exists at the moment so that's

358
00:13:58,120 --> 00:14:08,020
pretty fun random crap from WMI so WMI

359
00:14:05,920 --> 00:14:10,479
has a huge amount of information about

360
00:14:08,020 --> 00:14:14,920
the hardware setup you can get similar

361
00:14:10,480 --> 00:14:16,180
information out of the setup api's which

362
00:14:14,920 --> 00:14:18,969
is basically like the same stuff that

363
00:14:16,180 --> 00:14:22,359
you would find out there device manager

364
00:14:18,970 --> 00:14:24,840
but things like for example so the

365
00:14:22,360 --> 00:14:26,920
memory arrays and memory slots and stuff

366
00:14:24,840 --> 00:14:28,810
cache memory for example is a pretty

367
00:14:26,920 --> 00:14:30,250
funny one because if you look in device

368
00:14:28,810 --> 00:14:32,050
manager you will never see cache memory

369
00:14:30,250 --> 00:14:34,750
in there however WMI will tell you about

370
00:14:32,050 --> 00:14:36,339
how much cash that your CPU has it turns

371
00:14:34,750 --> 00:14:38,320
out that all the ends lie about this and

372
00:14:36,340 --> 00:14:40,570
just put some arbitrary random number in

373
00:14:38,320 --> 00:14:43,360
there I think it's like they just put

374
00:14:40,570 --> 00:14:45,820
enough to satisfy that most operating

375
00:14:43,360 --> 00:14:48,370
systems or bloob that complaining and

376
00:14:45,820 --> 00:14:49,750
it's usually hard-coded so these like

377
00:14:48,370 --> 00:14:51,910
memory arrays for example you wouldn't

378
00:14:49,750 --> 00:14:53,980
find the memory array in device manager

379
00:14:51,910 --> 00:14:55,530
but this is also an individual

380
00:14:53,980 --> 00:14:59,080
employment way piece of hardware that's

381
00:14:55,530 --> 00:15:01,209
presented over good BMI temperature

382
00:14:59,080 --> 00:15:02,470
sensors VMs don't need temperature

383
00:15:01,210 --> 00:15:06,250
sensors because there's no temperature

384
00:15:02,470 --> 00:15:07,720
on the VMS it's a VM then a thermal

385
00:15:06,250 --> 00:15:10,600
zones that have fast so if you look for

386
00:15:07,720 --> 00:15:12,910
W am I and you find no no thermal zones

387
00:15:10,600 --> 00:15:15,400
no fans no temperature sensors on the

388
00:15:12,910 --> 00:15:17,199
LEM voltage sensors and voltage probes

389
00:15:15,400 --> 00:15:19,500
there's no voltage probes on the VM

390
00:15:17,200 --> 00:15:24,160
because it's software there's no voltage

391
00:15:19,500 --> 00:15:27,030
moving that plate devices are WMI does a

392
00:15:24,160 --> 00:15:28,630
bunch of information about those as well

393
00:15:27,030 --> 00:15:29,980
what my devices

394
00:15:28,630 --> 00:15:32,080
being literally pretty much everything

395
00:15:29,980 --> 00:15:33,610
on your on your box and you can use

396
00:15:32,080 --> 00:15:36,100
Julia my to dump all that stuff out as

397
00:15:33,610 --> 00:15:38,260
well and check whether it either match

398
00:15:36,100 --> 00:15:40,600
of stuff that you know to be built into

399
00:15:38,260 --> 00:15:42,490
most VMs or whether there's certain

400
00:15:40,600 --> 00:15:46,330
things missing that you would expect to

401
00:15:42,490 --> 00:15:48,700
be there another good one is using the

402
00:15:46,330 --> 00:15:49,900
PNP stuff to look for network adapters

403
00:15:48,700 --> 00:15:51,490
because if you've ever used any

404
00:15:49,900 --> 00:15:53,470
virtualization platform you know that

405
00:15:51,490 --> 00:15:55,980
they support like three virtual adapter

406
00:15:53,470 --> 00:15:58,540
types and you can just look at the

407
00:15:55,980 --> 00:16:02,040
vendor IDs for those in this match

408
00:15:58,540 --> 00:16:02,040
and it's that easy to set up and that

409
00:16:02,520 --> 00:16:09,220
I've gone through that really quickly

410
00:16:04,830 --> 00:16:11,440
that's it there's a github address there

411
00:16:09,220 --> 00:16:12,880
if you're interested in the project it's

412
00:16:11,440 --> 00:16:16,860
quite amusing to me

413
00:16:12,880 --> 00:16:16,860
yes questions Sam is raising his hand

414
00:16:18,720 --> 00:16:23,290
figure out whether or not you're gonna

415
00:16:20,470 --> 00:16:25,930
be a do you have you thought about doing

416
00:16:23,290 --> 00:16:28,810
any kind of fingerprinting in terms of

417
00:16:25,930 --> 00:16:33,310
I'm in at the end and it is good or I'm

418
00:16:28,810 --> 00:16:36,489
going to be so our the the tool when it

419
00:16:33,310 --> 00:16:38,199
dumps output is split into category the

420
00:16:36,490 --> 00:16:40,360
outputs cousin Bella Beach so we've got

421
00:16:38,200 --> 00:16:42,940
tests so for example if I just go back

422
00:16:40,360 --> 00:16:45,400
one slide one of the tests is called W

423
00:16:42,940 --> 00:16:47,950
my underscore voltage sensor underscore

424
00:16:45,400 --> 00:16:50,079
check or something like that but for the

425
00:16:47,950 --> 00:16:51,910
individual for the ones say for example

426
00:16:50,080 --> 00:16:54,100
the plugin plate so that would be like a

427
00:16:51,910 --> 00:16:55,839
generic one for the water sensors for

428
00:16:54,100 --> 00:16:58,860
the blue gunplay ones it might be

429
00:16:55,840 --> 00:17:01,150
something like VirtualBox underscore

430
00:16:58,860 --> 00:17:03,910
network card or something who never got

431
00:17:01,150 --> 00:17:07,089
checked so in the output if it's us if

432
00:17:03,910 --> 00:17:09,399
it's a vendor specific vm thing yeah you

433
00:17:07,089 --> 00:17:10,990
can tell straight away off that and so

434
00:17:09,400 --> 00:17:12,579
if you know that your target

435
00:17:10,990 --> 00:17:14,140
organization that you're going to try

436
00:17:12,579 --> 00:17:16,688
and throw if you if you're on the bad

437
00:17:14,140 --> 00:17:22,240
bad side or if you're a Bettina and you

438
00:17:16,689 --> 00:17:27,160
know that your target was only running

439
00:17:22,240 --> 00:17:29,290
say Zen and then suddenly you're in a

440
00:17:27,160 --> 00:17:30,490
different virtualization environment

441
00:17:29,290 --> 00:17:31,720
well you know that probably somebody's

442
00:17:30,490 --> 00:17:36,600
pulled that down and start putting it in

443
00:17:31,720 --> 00:17:36,600
a in a sandbox environment or whatever

444
00:17:39,450 --> 00:17:44,830
yeah and many case

445
00:17:41,770 --> 00:17:46,330
you can get around like wmi stuff you

446
00:17:44,830 --> 00:17:47,500
can just if you're talking about user

447
00:17:46,330 --> 00:17:50,970
mode or King and things like that you

448
00:17:47,500 --> 00:17:53,500
could hook the WMI results and just lie

449
00:17:50,970 --> 00:17:59,860
as part that we also do like anti debug

450
00:17:53,500 --> 00:18:01,990
and hooking checks in the inital yeah

451
00:17:59,860 --> 00:18:03,639
like it's always chicken-and-egg with

452
00:18:01,990 --> 00:18:05,950
like you put these tricks in somebody

453
00:18:03,640 --> 00:18:08,440
finds a way around if you do all of this

454
00:18:05,950 --> 00:18:11,410
stuff into user mode like the kernel can

455
00:18:08,440 --> 00:18:15,450
lie you just have to write the things in

456
00:18:11,410 --> 00:18:15,450
to make it lie which again checking out

457
00:18:18,090 --> 00:18:24,250
exactly it's more of a case of automated

458
00:18:22,060 --> 00:18:26,440
sandbox analysis so like if you were if

459
00:18:24,250 --> 00:18:32,440
you were running something like what's

460
00:18:26,440 --> 00:18:33,280
the Cisco one yeah um if you are really

461
00:18:32,440 --> 00:18:35,560
something like that or you're running

462
00:18:33,280 --> 00:18:38,110
virustotal for example the barstool vm's

463
00:18:35,560 --> 00:18:40,330
they probably want to not look like the

464
00:18:38,110 --> 00:18:45,750
end it was a great tool by Holly

465
00:18:40,330 --> 00:18:49,030
graceful who achieve fingerprinted the

466
00:18:45,750 --> 00:18:51,430
the virustotal vm's down so which VM it

467
00:18:49,030 --> 00:18:54,850
was running on and you like the uptime

468
00:18:51,430 --> 00:18:57,010
of each box like which people who were

469
00:18:54,850 --> 00:18:58,600
working there had been working on

470
00:18:57,010 --> 00:18:59,770
patching different things because of

471
00:18:58,600 --> 00:19:03,730
like all of the cash they are out of

472
00:18:59,770 --> 00:19:07,290
them so it was pretty funny so yeah that

473
00:19:03,730 --> 00:19:07,290
kind of stuff can very trivially them

474
00:19:18,570 --> 00:19:24,399
some of the tests don't work if you're

475
00:19:22,180 --> 00:19:25,960
not an admin so for example the atl

476
00:19:24,400 --> 00:19:30,040
identify stuff because you have to

477
00:19:25,960 --> 00:19:32,500
create a read handle to the query handle

478
00:19:30,040 --> 00:19:36,190
to the physical disk device you have to

479
00:19:32,500 --> 00:19:37,570
be an admin for that for because you're

480
00:19:36,190 --> 00:19:40,390
sending a block command which means you

481
00:19:37,570 --> 00:19:42,520
can bypass like everything you can

482
00:19:40,390 --> 00:19:46,000
actually do broad rights to the desk of

483
00:19:42,520 --> 00:19:49,090
that one for a lot of the stuff like the

484
00:19:46,000 --> 00:19:50,530
WMI stuff nug WMI you never have to be

485
00:19:49,090 --> 00:19:54,419
admin to read anything out of it you can

486
00:19:50,530 --> 00:19:55,899
just pull all the way around yeah

487
00:19:54,420 --> 00:20:01,100
[Music]

488
00:19:55,900 --> 00:20:03,650
yeah absolutely yeah yeah exactly and if

489
00:20:01,100 --> 00:20:06,049
you're if you're building implants and

490
00:20:03,650 --> 00:20:07,640
stuff for your red team stuff to do a PC

491
00:20:06,049 --> 00:20:09,740
simulation or things like that you can

492
00:20:07,640 --> 00:20:11,299
just pull the code straight out of out

493
00:20:09,740 --> 00:20:13,640
of this and stop playing with it and

494
00:20:11,299 --> 00:20:15,770
just like hey we want to check using

495
00:20:13,640 --> 00:20:19,250
this particular trick whether we're in a

496
00:20:15,770 --> 00:20:20,750
VM or not and chances are most abs will

497
00:20:19,250 --> 00:20:22,580
not have the heuristic in there of

498
00:20:20,750 --> 00:20:23,570
course there is a bit of a battle of

499
00:20:22,580 --> 00:20:25,699
everything that we put in there

500
00:20:23,570 --> 00:20:28,100
immediately gets picked up by a load of

501
00:20:25,700 --> 00:20:29,750
80 vendors start hot in red gauges which

502
00:20:28,100 --> 00:20:31,280
is good because it means you know the

503
00:20:29,750 --> 00:20:35,110
bad guys can't use the tricks that we

504
00:20:31,280 --> 00:20:35,110
come up with to actually use them

505
00:20:37,659 --> 00:20:50,990
separate we don't do panel so there's no

506
00:20:44,600 --> 00:20:52,969
there's no commentary you know but it's

507
00:20:50,990 --> 00:20:54,049
dead trivial to go to an individual chat

508
00:20:52,970 --> 00:20:57,490
and look at the source code and see

509
00:20:54,049 --> 00:20:57,490
whether it uses api's that record

510
00:21:00,159 --> 00:21:18,559
requests a welcome song you would not

511
00:21:11,900 --> 00:21:21,650
want to deploy this on everything I'm

512
00:21:18,559 --> 00:21:24,350
going to be likely to use one way to do

513
00:21:21,650 --> 00:21:26,900
it is to just run the run it without

514
00:21:24,350 --> 00:21:30,649
admin and anything that fails because it

515
00:21:26,900 --> 00:21:32,690
you get a pass/fail yeah pass/fail or it

516
00:21:30,650 --> 00:21:40,159
didn't work and anything there's a it

517
00:21:32,690 --> 00:21:42,610
didn't work probably needed admin cool

518
00:21:40,159 --> 00:21:42,610
thank you

