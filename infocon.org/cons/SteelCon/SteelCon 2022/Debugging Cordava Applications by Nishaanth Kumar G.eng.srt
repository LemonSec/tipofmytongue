1
00:00:03,199 --> 00:00:05,359
uh my talk is going to be on pretesting

2
00:00:05,359 --> 00:00:07,200
cordova applications

3
00:00:07,200 --> 00:00:09,120
and

4
00:00:09,120 --> 00:00:11,200
i'm nishant i've

5
00:00:11,200 --> 00:00:13,679
been working in security for the last

6
00:00:13,679 --> 00:00:14,920
seven

7
00:00:14,920 --> 00:00:17,199
years consulting

8
00:00:17,199 --> 00:00:19,840
and the last uh right now i'm working

9
00:00:19,840 --> 00:00:23,519
with empty set as a upset consultant and

10
00:00:23,519 --> 00:00:25,199
the previous uh

11
00:00:25,199 --> 00:00:26,960
job of restoring obviously mobile

12
00:00:26,960 --> 00:00:29,199
application security

13
00:00:29,199 --> 00:00:31,359
uh presented in few other conferences

14
00:00:31,359 --> 00:00:33,520
most of all all of them there

15
00:00:33,520 --> 00:00:35,920
online and this would be the first

16
00:00:35,920 --> 00:00:38,399
offering

17
00:00:38,640 --> 00:00:40,879
and uh so the asynchronous for the talk

18
00:00:40,879 --> 00:00:43,520
is uh we are gonna touch upon

19
00:00:43,520 --> 00:00:45,600
basics of cordova what's the cordova

20
00:00:45,600 --> 00:00:47,039
application and

21
00:00:47,039 --> 00:00:49,760
some of the vulnerabilities which are

22
00:00:49,760 --> 00:00:51,600
which were present in cordova earlier

23
00:00:51,600 --> 00:00:53,199
than perhaps right now

24
00:00:53,199 --> 00:00:56,079
and also some of the security features

25
00:00:56,079 --> 00:00:58,640
provided by cordova and also some of the

26
00:00:58,640 --> 00:01:01,039
security measures uh which you can take

27
00:01:01,039 --> 00:01:03,359
to provide

28
00:01:03,359 --> 00:01:04,799
common vulnerabilities in accordance

29
00:01:04,799 --> 00:01:07,360
application

30
00:01:07,520 --> 00:01:10,479
so uh why mobile interesting like the

31
00:01:10,479 --> 00:01:12,880
use of mobile applications have

32
00:01:12,880 --> 00:01:14,400
exponentially increased in the last

33
00:01:14,400 --> 00:01:15,759
couple of years

34
00:01:15,759 --> 00:01:16,960
and

35
00:01:16,960 --> 00:01:18,960
also if you see the research which comes

36
00:01:18,960 --> 00:01:21,439
out for mobile application security it's

37
00:01:21,439 --> 00:01:23,040
usually uh

38
00:01:23,040 --> 00:01:25,119
android or ios

39
00:01:25,119 --> 00:01:27,280
and most of the research focus on

40
00:01:27,280 --> 00:01:29,520
android and ios and not on hybrid

41
00:01:29,520 --> 00:01:31,920
applications like cordova cordova being

42
00:01:31,920 --> 00:01:33,840
just one of them there are multiple

43
00:01:33,840 --> 00:01:36,479
other platforms like uh flutter and

44
00:01:36,479 --> 00:01:41,439
there's xamarin reactions and so on

45
00:01:41,439 --> 00:01:43,119
and also if you see a lot of companies

46
00:01:43,119 --> 00:01:44,880
have started moving towards hybrid

47
00:01:44,880 --> 00:01:46,079
applications

48
00:01:46,079 --> 00:01:48,560
in terms of mobile because of the ease

49
00:01:48,560 --> 00:01:50,880
of developing the application and you

50
00:01:50,880 --> 00:01:53,200
also develop the application once uh you

51
00:01:53,200 --> 00:01:56,000
can deploy for both ios and

52
00:01:56,000 --> 00:01:59,200
ios and android as well

53
00:01:59,280 --> 00:02:01,600
[Music]

54
00:02:01,600 --> 00:02:04,479
and so before we uh start with uh

55
00:02:04,479 --> 00:02:06,840
cordova like i just wanted to

56
00:02:06,840 --> 00:02:09,119
highlight some of the developer

57
00:02:09,119 --> 00:02:10,239
assumptions

58
00:02:10,239 --> 00:02:13,360
in terms of mobile applications so when

59
00:02:13,360 --> 00:02:15,280
most of the application developers

60
00:02:15,280 --> 00:02:17,360
mobile application developers

61
00:02:17,360 --> 00:02:19,680
like they usually have a lot of inbuilt

62
00:02:19,680 --> 00:02:22,959
protections with supply side for example

63
00:02:22,959 --> 00:02:24,879
mostly think that if

64
00:02:24,879 --> 00:02:27,599
my application is written for uh like if

65
00:02:27,599 --> 00:02:29,440
i have protections towards

66
00:02:29,440 --> 00:02:31,760
jailbreak uh jailbreak the application

67
00:02:31,760 --> 00:02:33,200
is not going to run out of jailbroken

68
00:02:33,200 --> 00:02:35,680
phone or the user is not going to use a

69
00:02:35,680 --> 00:02:38,400
rooted or a generic broken phone to you

70
00:02:38,400 --> 00:02:39,519
know

71
00:02:39,519 --> 00:02:41,840
install and use the application and also

72
00:02:41,840 --> 00:02:44,000
with apart from jailbreak there are

73
00:02:44,000 --> 00:02:45,760
various other protections like ssl

74
00:02:45,760 --> 00:02:47,760
printing where you fit the certificate

75
00:02:47,760 --> 00:02:50,400
towards the inside the application so

76
00:02:50,400 --> 00:02:51,760
that uh

77
00:02:51,760 --> 00:02:54,000
someone was testing the application they

78
00:02:54,000 --> 00:02:55,760
won't be able to see the traffic

79
00:02:55,760 --> 00:02:58,400
involved and also

80
00:02:58,400 --> 00:03:00,560
the integrity checks which are there in

81
00:03:00,560 --> 00:03:02,720
the mobile mobile site

82
00:03:02,720 --> 00:03:03,680
so

83
00:03:03,680 --> 00:03:05,760
no adversity would be able to reverse

84
00:03:05,760 --> 00:03:08,159
insane by up and change the code so

85
00:03:08,159 --> 00:03:10,080
these are all some of the assumptions

86
00:03:10,080 --> 00:03:11,680
but

87
00:03:11,680 --> 00:03:13,280
all these client set protections should

88
00:03:13,280 --> 00:03:15,040
they really protect the application i

89
00:03:15,040 --> 00:03:16,000
would say

90
00:03:16,000 --> 00:03:17,200
yes and no

91
00:03:17,200 --> 00:03:19,680
for a very mature organization it makes

92
00:03:19,680 --> 00:03:21,040
sense for them to

93
00:03:21,040 --> 00:03:23,760
build or incorporate all these uh

94
00:03:23,760 --> 00:03:26,720
additional security measures but for any

95
00:03:26,720 --> 00:03:29,040
application uh which is right this does

96
00:03:29,040 --> 00:03:32,239
not have any protection

97
00:03:43,660 --> 00:03:45,280
[Music]

98
00:03:45,280 --> 00:03:48,239
and yeah so with cordova basically

99
00:03:48,239 --> 00:03:50,159
cordova is a hybrid

100
00:03:50,159 --> 00:03:52,480
development platform uh written on his

101
00:03:52,480 --> 00:03:54,319
table and javascript using html and

102
00:03:54,319 --> 00:03:56,000
javascript

103
00:03:56,000 --> 00:03:56,959
and

104
00:03:56,959 --> 00:03:58,799
one of the main features of

105
00:03:58,799 --> 00:04:00,720
applications being written on cordova's

106
00:04:00,720 --> 00:04:03,760
it's the whole environment of cordova is

107
00:04:03,760 --> 00:04:05,680
sandboxed so

108
00:04:05,680 --> 00:04:07,920
it should not be able to access the file

109
00:04:07,920 --> 00:04:10,080
system or camera or zero location and so

110
00:04:10,080 --> 00:04:13,120
on but most of the

111
00:04:13,120 --> 00:04:14,000
all of the applications

112
00:04:14,000 --> 00:04:15,200
which we use in

113
00:04:15,200 --> 00:04:17,600
uh day to day needs access to

114
00:04:17,600 --> 00:04:20,160
geolocation and what about clients

115
00:04:20,160 --> 00:04:22,560
camera and so on so how does cordova

116
00:04:22,560 --> 00:04:24,880
still manage to get access to the nato

117
00:04:24,880 --> 00:04:27,280
operating system apis is that

118
00:04:27,280 --> 00:04:30,000
even though the webview is sandboxed

119
00:04:30,000 --> 00:04:32,000
cordura basically exports this component

120
00:04:32,000 --> 00:04:33,600
called glass

121
00:04:33,600 --> 00:04:36,639
this javascript bridge or an interface

122
00:04:36,639 --> 00:04:38,080
and

123
00:04:38,080 --> 00:04:40,639
that interface can talk to both cordova

124
00:04:40,639 --> 00:04:42,639
and it can talk to the nato operating

125
00:04:42,639 --> 00:04:45,040
system and it might be for the couple of

126
00:04:45,040 --> 00:04:48,240
apis which are exported and

127
00:04:48,240 --> 00:04:50,320
using the bridge a cordova application

128
00:04:50,320 --> 00:04:54,720
can you know uh get access to photos or

129
00:04:54,720 --> 00:04:58,080
zero location and so on and again uh the

130
00:04:58,080 --> 00:04:59,440
permission should be declared in the

131
00:04:59,440 --> 00:05:01,840
manifesto or inferno key list for for

132
00:05:01,840 --> 00:05:05,199
the functionality to work properly and

133
00:05:05,199 --> 00:05:05,960
the

134
00:05:05,960 --> 00:05:08,080
config.xml which we'll be looking at is

135
00:05:08,080 --> 00:05:09,120
one of the

136
00:05:09,120 --> 00:05:11,840
uh one of the key uh

137
00:05:11,840 --> 00:05:14,320
key fights in cordova which

138
00:05:14,320 --> 00:05:17,199
in terms of audit

139
00:05:18,160 --> 00:05:20,560
and yeah this is the first one is the

140
00:05:20,560 --> 00:05:22,320
implementation of the bridge so you're

141
00:05:22,320 --> 00:05:24,479
just enabling javascript using said

142
00:05:24,479 --> 00:05:26,880
javascript enabled and you create an

143
00:05:26,880 --> 00:05:29,440
interface and i just called it ambriz

144
00:05:29,440 --> 00:05:30,960
and you can

145
00:05:30,960 --> 00:05:32,960
load a url this can be using a file

146
00:05:32,960 --> 00:05:37,039
protocol or this can be a direct html xs

147
00:05:37,039 --> 00:05:39,039
external url

148
00:05:39,039 --> 00:05:41,600
and with ios you can

149
00:05:41,600 --> 00:05:44,160
initialize review and call evaluate

150
00:05:44,160 --> 00:05:47,600
javascript and using this the

151
00:05:47,600 --> 00:05:49,840
ios javascript engine will understand

152
00:05:49,840 --> 00:05:52,240
that okay this is a javascript object or

153
00:05:52,240 --> 00:05:55,120
a javascript file and it is given

154
00:05:55,120 --> 00:05:57,280
and in terms of the plugins which we

155
00:05:57,280 --> 00:05:59,280
talked about or plugins and

156
00:05:59,280 --> 00:06:00,639
functionalities

157
00:06:00,639 --> 00:06:01,680
so

158
00:06:01,680 --> 00:06:03,759
basically you create a listener for

159
00:06:03,759 --> 00:06:05,039
device ready

160
00:06:05,039 --> 00:06:08,319
uh device ready is the apac on device

161
00:06:08,319 --> 00:06:09,440
ready

162
00:06:09,440 --> 00:06:11,600
on device ready make sure that the whole

163
00:06:11,600 --> 00:06:13,840
corner environment is up and running and

164
00:06:13,840 --> 00:06:15,680
all the apes are

165
00:06:15,680 --> 00:06:17,600
ready to be accessible

166
00:06:17,600 --> 00:06:20,160
and so you just wait for the uh listen

167
00:06:20,160 --> 00:06:23,919
for the event and once that starts and

168
00:06:23,919 --> 00:06:25,680
uh the navigator like if you see online

169
00:06:25,680 --> 00:06:27,280
number four that is console.blog

170
00:06:27,280 --> 00:06:29,199
navigated or contacts navigator is

171
00:06:29,199 --> 00:06:31,840
nothing but a global object provided by

172
00:06:31,840 --> 00:06:35,680
cordova and using navigator you can

173
00:06:35,680 --> 00:06:37,919
uh you can basically access all the apis

174
00:06:37,919 --> 00:06:39,680
provided with the operating system into

175
00:06:39,680 --> 00:06:41,600
like contacts and so on

176
00:06:41,600 --> 00:06:44,240
and this is how you uh

177
00:06:44,240 --> 00:06:45,840
for example access the contact station

178
00:06:45,840 --> 00:06:49,840
cordova that's in android

179
00:06:57,840 --> 00:07:00,239
location

180
00:07:00,560 --> 00:07:02,720
and these are some of the availabilities

181
00:07:02,720 --> 00:07:04,639
which were already discussed

182
00:07:04,639 --> 00:07:06,560
and discovered in cordova

183
00:07:06,560 --> 00:07:09,759
uh earlier and all of these are passed

184
00:07:09,759 --> 00:07:11,840
the two interesting uh vulnerabilities

185
00:07:11,840 --> 00:07:14,000
along these electrode one which is which

186
00:07:14,000 --> 00:07:16,639
was information disclosure basically the

187
00:07:16,639 --> 00:07:18,639
cordova's official camera plug-in which

188
00:07:18,639 --> 00:07:20,080
was

189
00:07:20,080 --> 00:07:21,360
being used

190
00:07:21,360 --> 00:07:22,400
uh

191
00:07:22,400 --> 00:07:24,080
they were storing the data they're

192
00:07:24,080 --> 00:07:25,599
showing all the photos which were taken

193
00:07:25,599 --> 00:07:27,840
with the application in the external

194
00:07:27,840 --> 00:07:30,479
storage so that any application of

195
00:07:30,479 --> 00:07:32,800
android so any application who gets this

196
00:07:32,800 --> 00:07:33,680
gets

197
00:07:33,680 --> 00:07:36,160
installed in the phone gets access to sd

198
00:07:36,160 --> 00:07:38,400
card so they can still focus that's one

199
00:07:38,400 --> 00:07:41,120
and the second one is the universal xss

200
00:07:41,120 --> 00:07:44,000
which was found in the webview and this

201
00:07:44,000 --> 00:07:46,960
basically allowed crossovers to you know

202
00:07:46,960 --> 00:07:49,199
execute javascript from the top domain

203
00:07:49,199 --> 00:07:49,919
and

204
00:07:49,919 --> 00:07:53,359
basically escape the sandbox

205
00:07:53,440 --> 00:07:57,120
and this is the configuration file it's

206
00:07:57,120 --> 00:07:59,919
uh basically presenting config.xml in

207
00:07:59,919 --> 00:08:03,440
the xml folder and this is under a

208
00:08:03,440 --> 00:08:06,479
application uh folder of ios so

209
00:08:06,479 --> 00:08:08,400
config.xml you can configure all the

210
00:08:08,400 --> 00:08:11,440
apis plugins you can configure some

211
00:08:11,440 --> 00:08:14,560
security features and so on

212
00:08:14,560 --> 00:08:17,840
so the first uh critical feature of

213
00:08:17,840 --> 00:08:21,440
configure xml is basically access origin

214
00:08:21,440 --> 00:08:24,240
access original access origin is pretty

215
00:08:24,240 --> 00:08:26,479
similar to you know content security

216
00:08:26,479 --> 00:08:29,759
policy so if we say uh set the access

217
00:08:29,759 --> 00:08:32,559
origin to start that means that

218
00:08:32,559 --> 00:08:33,519
the

219
00:08:33,519 --> 00:08:36,799
mobile application can basically

220
00:08:36,799 --> 00:08:39,919
talk to or send requests to any any app

221
00:08:39,919 --> 00:08:42,240
server any domain basically but if you

222
00:08:42,240 --> 00:08:44,720
set it to say that steelheart.com the

223
00:08:44,720 --> 00:08:46,399
mobile application can just talk to

224
00:08:46,399 --> 00:08:48,160
student.com and

225
00:08:48,160 --> 00:08:50,560
any other domain it tries to talk to if

226
00:08:50,560 --> 00:08:52,800
the recorder will just physically first

227
00:08:52,800 --> 00:08:55,519
this is very helpful to improve uh

228
00:08:55,519 --> 00:08:57,519
not preventing too it is an additional

229
00:08:57,519 --> 00:08:59,200
feature which you can

230
00:08:59,200 --> 00:09:01,920
you know use to prevent excesses so that

231
00:09:01,920 --> 00:09:03,360
people cannot load scripts from

232
00:09:03,360 --> 00:09:05,440
different website and you know send data

233
00:09:05,440 --> 00:09:08,000
to a different part of party websites

234
00:09:08,000 --> 00:09:10,160
and the next one is allow intents so

235
00:09:10,160 --> 00:09:12,320
intents are nothing but uh

236
00:09:12,320 --> 00:09:14,640
deep links or like

237
00:09:14,640 --> 00:09:16,480
it's like sms

238
00:09:16,480 --> 00:09:18,240
slash slash four slash or something like

239
00:09:18,240 --> 00:09:20,320
that you can also consider what index

240
00:09:20,320 --> 00:09:22,720
can be used what you use and so on and

241
00:09:22,720 --> 00:09:24,240
the next one is the content security

242
00:09:24,240 --> 00:09:27,040
policy which is basically the csp of

243
00:09:27,040 --> 00:09:29,680
applications the last one is aps or app

244
00:09:29,680 --> 00:09:31,279
transport security

245
00:09:31,279 --> 00:09:36,560
which is a ios specific security feature

246
00:09:49,279 --> 00:09:51,680
transport layer security protection it

247
00:09:51,680 --> 00:09:53,760
just enhances the transport layer making

248
00:09:53,760 --> 00:09:56,720
sure that the site is so secure it's not

249
00:09:56,720 --> 00:10:00,080
using http and so on

250
00:10:00,399 --> 00:10:01,920
and some other things which we need to

251
00:10:01,920 --> 00:10:04,480
consider while

252
00:10:04,480 --> 00:10:06,480
while using web views or while writing

253
00:10:06,480 --> 00:10:09,680
applications for web views is that the

254
00:10:09,680 --> 00:10:11,760
in-app browser there is this api called

255
00:10:11,760 --> 00:10:14,079
in our browser which should always be

256
00:10:14,079 --> 00:10:16,240
used for opening links which you don't

257
00:10:16,240 --> 00:10:18,959
trust or for example third party links

258
00:10:18,959 --> 00:10:20,720
or advertisement links

259
00:10:20,720 --> 00:10:22,720
if you want to load that in your

260
00:10:22,720 --> 00:10:24,640
corridor application it's always better

261
00:10:24,640 --> 00:10:26,800
to use in our browser because it's

262
00:10:26,800 --> 00:10:30,000
isolated from the cordova environment so

263
00:10:30,000 --> 00:10:32,880
you cannot access the contacts or

264
00:10:32,880 --> 00:10:34,399
and so on

265
00:10:34,399 --> 00:10:36,480
location and so on the next thing is

266
00:10:36,480 --> 00:10:39,200
that what one another security

267
00:10:39,200 --> 00:10:40,800
law when you

268
00:10:40,800 --> 00:10:42,320
see in particular applications very

269
00:10:42,320 --> 00:10:44,959
commonly is that the domain which is

270
00:10:44,959 --> 00:10:46,880
there is this random domain it's not

271
00:10:46,880 --> 00:10:48,000
even

272
00:10:48,000 --> 00:10:49,600
not even the servers

273
00:10:49,600 --> 00:10:51,360
made

274
00:10:51,360 --> 00:10:53,839
made domain it's declared in the

275
00:10:53,839 --> 00:10:55,519
config.xml

276
00:10:55,519 --> 00:10:57,040
and even though

277
00:10:57,040 --> 00:10:58,959
the application developers may think

278
00:10:58,959 --> 00:11:01,120
that okay it's loaded in an iframe the

279
00:11:01,120 --> 00:11:04,320
iframe still gets access to the contours

280
00:11:04,320 --> 00:11:06,240
apis and environment so that they can

281
00:11:06,240 --> 00:11:08,880
excel create data so this is again

282
00:11:08,880 --> 00:11:10,399
one thing that you

283
00:11:10,399 --> 00:11:12,399
should be

284
00:11:12,399 --> 00:11:14,160
looking for in cordoba applications when

285
00:11:14,160 --> 00:11:17,439
it comes to web

286
00:11:17,600 --> 00:11:20,640
and so when we talk about xss

287
00:11:20,640 --> 00:11:23,200
uh it's usually with uh

288
00:11:23,200 --> 00:11:25,839
css in drug applications but in mobile

289
00:11:25,839 --> 00:11:28,320
applications excesses are very hard to

290
00:11:28,320 --> 00:11:32,000
find because the uh mobile native ios

291
00:11:32,000 --> 00:11:34,320
and android engines do not pass his

292
00:11:34,320 --> 00:11:36,640
similar javascript just like how he

293
00:11:36,640 --> 00:11:39,279
browses to but since quarter was like in

294
00:11:39,279 --> 00:11:41,920
his table in javascript any excesses

295
00:11:41,920 --> 00:11:44,079
which is there in the application

296
00:11:44,079 --> 00:11:46,959
is going to have a very severe impact

297
00:11:46,959 --> 00:11:49,200
due to the fact not not only that you

298
00:11:49,200 --> 00:11:50,320
can uh

299
00:11:50,320 --> 00:11:52,480
you know steal the cookies from a

300
00:11:52,480 --> 00:11:55,440
specific user or from the specific app

301
00:11:55,440 --> 00:11:58,000
due to the cordova's api being already

302
00:11:58,000 --> 00:12:01,200
initialized you can load the cordova's

303
00:12:01,200 --> 00:12:03,680
apis and you know get contacts or you

304
00:12:03,680 --> 00:12:06,639
can exfiltrate the photos you can

305
00:12:06,639 --> 00:12:09,200
exclude the location of the current

306
00:12:09,200 --> 00:12:12,959
device and so on and the second one is a

307
00:12:12,959 --> 00:12:16,959
cv which was found in webview itself not

308
00:12:16,959 --> 00:12:18,720
not on the application but it was sort

309
00:12:18,720 --> 00:12:20,959
of the review itself

310
00:12:20,959 --> 00:12:23,839
when you invoke an intent to start a

311
00:12:23,839 --> 00:12:25,440
cordova application

312
00:12:25,440 --> 00:12:26,320
the

313
00:12:26,320 --> 00:12:27,200
uh

314
00:12:27,200 --> 00:12:29,920
whitelisting was not done securely so

315
00:12:29,920 --> 00:12:32,160
that it could populate any

316
00:12:32,160 --> 00:12:35,399
url to exploit directly or

317
00:12:35,399 --> 00:12:39,120
to go further

318
00:12:39,120 --> 00:12:41,440
so how do we uh

319
00:12:41,440 --> 00:12:43,680
how do we access the native apis is that

320
00:12:43,680 --> 00:12:46,399
say we have a nexus is all an attacker

321
00:12:46,399 --> 00:12:48,399
has to do is host this specific

322
00:12:48,399 --> 00:12:51,200
javascript very similar to this

323
00:12:51,200 --> 00:12:52,959
as we saw earlier you

324
00:12:52,959 --> 00:12:55,279
wait for the on device ready even

325
00:12:55,279 --> 00:12:56,160
and

326
00:12:56,160 --> 00:12:57,920
once that is done

327
00:12:57,920 --> 00:12:59,120
so

328
00:12:59,120 --> 00:13:02,160
you start without i mean you

329
00:13:02,160 --> 00:13:04,880
talk to navigator object navigating or

330
00:13:04,880 --> 00:13:07,680
connects or location and so on

331
00:13:07,680 --> 00:13:08,560
and

332
00:13:08,560 --> 00:13:10,560
and you can do exact sort of external

333
00:13:10,560 --> 00:13:12,560
history if you request to you know send

334
00:13:12,560 --> 00:13:14,560
back the server to send out the data to

335
00:13:14,560 --> 00:13:17,040
your server

336
00:13:17,440 --> 00:13:19,600
and this is pretty similar for this is

337
00:13:19,600 --> 00:13:22,720
for ios the second example is for ios

338
00:13:22,720 --> 00:13:24,399
it's it's very similar you visualize the

339
00:13:24,399 --> 00:13:27,040
navigator object you call the apis and

340
00:13:27,040 --> 00:13:29,600
you can send it back to this if chp and

341
00:13:29,600 --> 00:13:32,240
access control

342
00:13:32,839 --> 00:13:36,560
is one another interesting feature or

343
00:13:36,560 --> 00:13:38,639
functionality which i discovered while

344
00:13:38,639 --> 00:13:40,560
testing cordova was

345
00:13:40,560 --> 00:13:41,360
the

346
00:13:41,360 --> 00:13:43,360
way in which you can use

347
00:13:43,360 --> 00:13:46,079
the inbuilt browser the main browser to

348
00:13:46,079 --> 00:13:49,279
debug the applications but why i was

349
00:13:49,279 --> 00:13:51,199
looking forward to debug the application

350
00:13:51,199 --> 00:13:52,000
was

351
00:13:52,000 --> 00:13:52,959
like

352
00:13:52,959 --> 00:13:53,760
uh

353
00:13:53,760 --> 00:13:55,760
if you if you see banking applications

354
00:13:55,760 --> 00:13:57,680
most of them have a lot of predictions

355
00:13:57,680 --> 00:13:59,920
and one of the predictions one of the

356
00:13:59,920 --> 00:14:02,880
additional client set protection is that

357
00:14:02,880 --> 00:14:04,959
the whole network request and response

358
00:14:04,959 --> 00:14:06,880
which is sent to the server

359
00:14:06,880 --> 00:14:09,440
is being encrypted apart like apart from

360
00:14:09,440 --> 00:14:10,560
tls

361
00:14:10,560 --> 00:14:12,880
or https the

362
00:14:12,880 --> 00:14:15,839
request body and the response body are

363
00:14:15,839 --> 00:14:18,240
encrypted with the static or dynamic key

364
00:14:18,240 --> 00:14:20,639
so if it is a static say consider this

365
00:14:20,639 --> 00:14:23,360
example it is written in java and say it

366
00:14:23,360 --> 00:14:25,360
is a static key you can reverse instead

367
00:14:25,360 --> 00:14:27,600
of the java application and you can

368
00:14:27,600 --> 00:14:30,079
basically get the key and you can use

369
00:14:30,079 --> 00:14:31,440
online tools to

370
00:14:31,440 --> 00:14:33,440
get back to network uh body and

371
00:14:33,440 --> 00:14:36,959
plaintext which is encrypted

372
00:14:36,959 --> 00:14:38,480
so something it looks something like

373
00:14:38,480 --> 00:14:40,240
this like it's basically a normal

374
00:14:40,240 --> 00:14:42,079
request but the whole body is encrypted

375
00:14:42,079 --> 00:14:43,839
like we do not know what's being sent

376
00:14:43,839 --> 00:14:46,720
and what's being received so

377
00:14:46,720 --> 00:14:48,320
if this is a

378
00:14:48,320 --> 00:14:50,079
this is an application written in native

379
00:14:50,079 --> 00:14:52,399
i use uh android

380
00:14:52,399 --> 00:14:54,399
it's uh it's pretty straightforward

381
00:14:54,399 --> 00:14:56,240
nowadays due to

382
00:14:56,240 --> 00:14:58,720
a lot of tools being available and frida

383
00:14:58,720 --> 00:15:00,639
being available and there are already a

384
00:15:00,639 --> 00:15:03,040
lot of free desktops which hook into the

385
00:15:03,040 --> 00:15:05,040
crypto live versions of both android and

386
00:15:05,040 --> 00:15:08,240
ios and print out the key or iv

387
00:15:08,240 --> 00:15:10,320
the whole data and so on

388
00:15:10,320 --> 00:15:12,240
so if this was the case of a native

389
00:15:12,240 --> 00:15:14,639
application you can basically use

390
00:15:14,639 --> 00:15:17,519
freedom call the specific api secret key

391
00:15:17,519 --> 00:15:20,160
specification and hook into the specific

392
00:15:20,160 --> 00:15:22,560
argument to print out the print on the

393
00:15:22,560 --> 00:15:24,720
key and id and so on but since our

394
00:15:24,720 --> 00:15:27,360
application is written in cordova and

395
00:15:27,360 --> 00:15:28,959
like i was while was testing this

396
00:15:28,959 --> 00:15:30,959
application i was i saw that it was

397
00:15:30,959 --> 00:15:32,959
written in cordova and it was using

398
00:15:32,959 --> 00:15:34,320
additional layer of encryption for the

399
00:15:34,320 --> 00:15:36,880
liquid body and response body

400
00:15:36,880 --> 00:15:40,720
and while uh digging in further like i

401
00:15:40,720 --> 00:15:43,920
saw that the javascript files had

402
00:15:43,920 --> 00:15:46,000
code for encryption and description

403
00:15:46,000 --> 00:15:48,079
routines but it was very heavily

404
00:15:48,079 --> 00:15:49,839
obfuscated and

405
00:15:49,839 --> 00:15:50,720
like

406
00:15:50,720 --> 00:15:52,480
for you to reverse engineer that and

407
00:15:52,480 --> 00:15:54,000
read it properly it's going to take

408
00:15:54,000 --> 00:15:55,360
pages

409
00:15:55,360 --> 00:15:58,160
just to get where's the ways will also

410
00:15:58,160 --> 00:16:00,639
get the key and so on

411
00:16:00,639 --> 00:16:01,920
and

412
00:16:01,920 --> 00:16:05,120
so while i was looking into uh webview

413
00:16:05,120 --> 00:16:07,120
like figured out that

414
00:16:07,120 --> 00:16:09,279
there is there was an also basically

415
00:16:09,279 --> 00:16:12,480
since android's webview is

416
00:16:12,480 --> 00:16:15,600
chromium browser it uses chrome and ios

417
00:16:15,600 --> 00:16:18,079
webview is basically safari which uses

418
00:16:18,079 --> 00:16:20,880
lipkit so since the

419
00:16:20,880 --> 00:16:22,560
since chrome has a developer option

420
00:16:22,560 --> 00:16:25,279
since chrome has a way of remotely

421
00:16:25,279 --> 00:16:27,360
debugging your applications

422
00:16:27,360 --> 00:16:29,440
there should there should it should be

423
00:16:29,440 --> 00:16:30,800
possible to

424
00:16:30,800 --> 00:16:32,079
you know

425
00:16:32,079 --> 00:16:33,759
make the application running in your

426
00:16:33,759 --> 00:16:36,480
phone to talk to the browser writing on

427
00:16:36,480 --> 00:16:38,399
your system and use the developer

428
00:16:38,399 --> 00:16:40,480
options or console people whereas you

429
00:16:40,480 --> 00:16:43,199
want to hit the key

430
00:16:43,199 --> 00:16:45,359
so

431
00:16:45,920 --> 00:16:47,680
like while looking into the webview like

432
00:16:47,680 --> 00:16:48,959
i figured out this

433
00:16:48,959 --> 00:16:51,120
was this set that contains debugging

434
00:16:51,120 --> 00:16:53,680
enabled api and looking further into

435
00:16:53,680 --> 00:16:55,680
this like figured out that like if we

436
00:16:55,680 --> 00:16:57,680
see in like 246 it

437
00:16:57,680 --> 00:17:00,560
starts that m devtool server so devtool

438
00:17:00,560 --> 00:17:03,279
serves basically chrome's uh you know

439
00:17:03,279 --> 00:17:04,959
developer options you can start the

440
00:17:04,959 --> 00:17:07,280
developer options one if and only if

441
00:17:07,280 --> 00:17:11,119
this set web content will be selected so

442
00:17:11,119 --> 00:17:13,039
but this is not enabled in prediction by

443
00:17:13,039 --> 00:17:15,760
default but on debug builds it's always

444
00:17:15,760 --> 00:17:17,199
enabled so if you have if you're testing

445
00:17:17,199 --> 00:17:19,199
a debugger application you can just

446
00:17:19,199 --> 00:17:21,280
connect your phone go to chrome string

447
00:17:21,280 --> 00:17:23,439
you will be able to see the review but

448
00:17:23,439 --> 00:17:26,240
since this was not the case

449
00:17:26,240 --> 00:17:29,120
uh like you can just create a writer

450
00:17:29,120 --> 00:17:31,120
free desktop to hook into the

451
00:17:31,120 --> 00:17:34,000
red view and we know that this is the

452
00:17:34,000 --> 00:17:35,760
api or this is the

453
00:17:35,760 --> 00:17:37,360
module which we need to hook center

454
00:17:37,360 --> 00:17:39,200
contains keyboarding enabled you

455
00:17:39,200 --> 00:17:41,840
overwrite the function to always set it

456
00:17:41,840 --> 00:17:44,000
to true so the

457
00:17:44,000 --> 00:17:45,600
operating system thinks that okay this

458
00:17:45,600 --> 00:17:48,559
is a debug application and from now on

459
00:17:48,559 --> 00:17:52,240
so on on the left is

460
00:17:52,240 --> 00:17:54,000
a protection application where we cannot

461
00:17:54,000 --> 00:17:55,120
see

462
00:17:55,120 --> 00:17:57,520
no or no review

463
00:17:57,520 --> 00:17:59,919
endpoints and after running the script

464
00:17:59,919 --> 00:18:02,240
like we can see on the end

465
00:18:02,240 --> 00:18:05,200
that uh set web content

466
00:18:05,200 --> 00:18:07,440
is set to true and slowly every time the

467
00:18:07,440 --> 00:18:09,919
view is getting called the

468
00:18:09,919 --> 00:18:12,400
this will overwrite it to true

469
00:18:12,400 --> 00:18:15,360
and now we can see that view for uh

470
00:18:15,360 --> 00:18:17,440
that you can see multiple review uh

471
00:18:17,440 --> 00:18:19,840
instances one is one the main one is the

472
00:18:19,840 --> 00:18:21,679
condo application and the next one is

473
00:18:21,679 --> 00:18:24,720
the uh google ads which is loaded and so

474
00:18:24,720 --> 00:18:27,039
on from here on you can just click on

475
00:18:27,039 --> 00:18:28,400
inspector and

476
00:18:28,400 --> 00:18:29,760
you know set breakpoints from the

477
00:18:29,760 --> 00:18:31,679
debugger to

478
00:18:31,679 --> 00:18:33,679
in our case you can look at the

479
00:18:33,679 --> 00:18:37,280
definition of efficiencies

480
00:18:40,240 --> 00:18:43,039
ios is pretty similar uh all you have to

481
00:18:43,039 --> 00:18:44,640
do is resign the application with the

482
00:18:44,640 --> 00:18:47,120
developer certificate enable the options

483
00:18:47,120 --> 00:18:50,240
in both safari and your phone so that

484
00:18:50,240 --> 00:18:52,559
they both can talk to you on top

485
00:18:52,559 --> 00:18:54,160
and you resend the application to the

486
00:18:54,160 --> 00:18:57,440
developers certificate

487
00:19:03,230 --> 00:19:06,160
[Music]

488
00:19:06,160 --> 00:19:07,440
and

489
00:19:07,440 --> 00:19:10,320
in ios there are like two main apis ui

490
00:19:10,320 --> 00:19:12,880
review and wk review and

491
00:19:12,880 --> 00:19:15,200
ui preview is replicated right now

492
00:19:15,200 --> 00:19:16,480
because

493
00:19:16,480 --> 00:19:19,039
by default it has a lot of insecure

494
00:19:19,039 --> 00:19:22,480
uh insecure defaults the file protocol

495
00:19:22,480 --> 00:19:24,400
handler is enabled by default the

496
00:19:24,400 --> 00:19:27,039
javascript is enabled by default

497
00:19:27,039 --> 00:19:28,080
and

498
00:19:28,080 --> 00:19:30,240
uav does not support out of the process

499
00:19:30,240 --> 00:19:32,240
rendering so basically

500
00:19:32,240 --> 00:19:34,320
the web view and the update like issue

501
00:19:34,320 --> 00:19:36,799
can compromise the web group because

502
00:19:36,799 --> 00:19:39,120
application also gets affected

503
00:19:39,120 --> 00:19:41,360
so this this was one such availability

504
00:19:41,360 --> 00:19:43,840
where the attacker was able to you know

505
00:19:43,840 --> 00:19:46,640
explore the ui reviews api and since

506
00:19:46,640 --> 00:19:49,039
file protocol is always

507
00:19:49,039 --> 00:19:50,960
enabled it was able to send the adc

508
00:19:50,960 --> 00:19:53,039
password button so

509
00:19:53,039 --> 00:19:54,880
that's this piece

510
00:19:54,880 --> 00:19:57,679
while uh wk reviews

511
00:19:57,679 --> 00:19:59,520
the new one now please enforcing

512
00:19:59,520 --> 00:20:01,520
everyone to use this

513
00:20:01,520 --> 00:20:04,720
uh this version of webview it's

514
00:20:04,720 --> 00:20:07,039
it has options to you know disable

515
00:20:07,039 --> 00:20:08,799
javascript disable file protocol

516
00:20:08,799 --> 00:20:10,880
handlers and so on which the ui will do

517
00:20:10,880 --> 00:20:13,679
this entire so

518
00:20:13,679 --> 00:20:14,480
if

519
00:20:14,480 --> 00:20:16,799
you're using wkm view and if you're not

520
00:20:16,799 --> 00:20:21,840
using javascript or if you're not using

521
00:20:25,520 --> 00:20:28,320
and i was really surprised to see uh

522
00:20:28,320 --> 00:20:30,400
malwares which were written in cordova i

523
00:20:30,400 --> 00:20:32,720
was just i just found out like one of

524
00:20:32,720 --> 00:20:33,600
them

525
00:20:33,600 --> 00:20:36,320
was the encrypted horse malware and

526
00:20:36,320 --> 00:20:38,960
surprisingly it uses the same uh

527
00:20:38,960 --> 00:20:40,720
it uses the encryption

528
00:20:40,720 --> 00:20:43,200
technique to you know pack and unpack

529
00:20:43,200 --> 00:20:45,600
uh but uh and also to encrypt the

530
00:20:45,600 --> 00:20:47,440
request body and responsibility and so

531
00:20:47,440 --> 00:20:49,840
on

532
00:20:49,919 --> 00:20:52,880
and uh for future research uh these

533
00:20:52,880 --> 00:20:54,960
these were the things which were in my

534
00:20:54,960 --> 00:20:56,159
mind

535
00:20:56,159 --> 00:20:58,480
but i'm sure there are more uh added to

536
00:20:58,480 --> 00:20:59,280
these

537
00:20:59,280 --> 00:21:01,600
first the review libraries and the

538
00:21:01,600 --> 00:21:03,840
javascript interface

539
00:21:03,840 --> 00:21:05,679
for passing issues

540
00:21:05,679 --> 00:21:08,240
how how it passes different or malicious

541
00:21:08,240 --> 00:21:10,240
confidence and

542
00:21:10,240 --> 00:21:11,520
find more vulnerabilities in the

543
00:21:11,520 --> 00:21:14,640
official cordova plugins try to create a

544
00:21:14,640 --> 00:21:16,960
malicious cargo plug-in and so on and

545
00:21:16,960 --> 00:21:18,480
also the whitelist model which we

546
00:21:18,480 --> 00:21:20,400
discussed the access origin

547
00:21:20,400 --> 00:21:22,640
it was earlier possible to

548
00:21:22,640 --> 00:21:25,039
bypass it if you if the access origin

549
00:21:25,039 --> 00:21:27,080
was set to say

550
00:21:27,080 --> 00:21:30,159
steelcon.com any website that has a

551
00:21:30,159 --> 00:21:32,280
domain name of steelcom

552
00:21:32,280 --> 00:21:35,840
steelcoin.com dot email.com bypasses the

553
00:21:35,840 --> 00:21:37,760
right software but this this is scratch

554
00:21:37,760 --> 00:21:39,280
now so

555
00:21:39,280 --> 00:21:41,200
i don't know maybe there are more issues

556
00:21:41,200 --> 00:21:43,120
with the whole whitelisting model and

557
00:21:43,120 --> 00:21:45,280
you can fuzz and find out malicious

558
00:21:45,280 --> 00:21:46,960
behind this

559
00:21:46,960 --> 00:21:49,520
so basically references and that's

560
00:21:49,520 --> 00:21:51,840
that's that doesn't talk if anyone has

561
00:21:51,840 --> 00:21:55,678
any questions you should know

562
00:21:56,480 --> 00:21:58,640
so apple released that likes weird

563
00:21:58,640 --> 00:22:01,120
paranoid mode which as i understand it

564
00:22:01,120 --> 00:22:03,440
starts to lock down from the javascript

565
00:22:03,440 --> 00:22:06,400
huh do you know how that affects cordova

566
00:22:06,400 --> 00:22:09,280
so basically uh with wkw view you have

567
00:22:09,280 --> 00:22:12,320
the option to disable javascript but

568
00:22:12,320 --> 00:22:14,880
with ui you don't have the option to

569
00:22:14,880 --> 00:22:17,520
disable all together so if you choose to

570
00:22:17,520 --> 00:22:19,840
say for according to applications you

571
00:22:19,840 --> 00:22:22,240
choose to disable it altogether you

572
00:22:22,240 --> 00:22:23,840
won't be able to use javascript in your

573
00:22:23,840 --> 00:22:26,000
application basically it should be a

574
00:22:26,000 --> 00:22:28,880
static histogram

575
00:22:28,960 --> 00:22:29,840
and

576
00:22:29,840 --> 00:22:31,520
when we see a lot of

577
00:22:31,520 --> 00:22:34,400
websites or google applications

578
00:22:34,400 --> 00:22:36,240
they do not really need javascript

579
00:22:36,240 --> 00:22:38,559
because it says display data so if you

580
00:22:38,559 --> 00:22:40,640
can generate the histogram and then

581
00:22:40,640 --> 00:22:44,240
disable dashboard that that should be

582
00:22:44,240 --> 00:22:46,559
improved

583
00:22:47,200 --> 00:22:48,720
so this

584
00:22:48,720 --> 00:22:51,200
is used

585
00:22:51,919 --> 00:22:54,400
now so basically cardona for android

586
00:22:54,400 --> 00:22:57,360
uses v8 engine

587
00:22:57,360 --> 00:22:58,480
supports

588
00:22:58,480 --> 00:23:01,799
and if

589
00:23:02,880 --> 00:23:05,880
okay

590
00:23:07,760 --> 00:23:10,760
sure

