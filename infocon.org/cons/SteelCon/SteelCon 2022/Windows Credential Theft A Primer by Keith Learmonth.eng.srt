1
00:00:02,879 --> 00:00:04,960
still filtering afterwards uh so thanks

2
00:00:04,960 --> 00:00:06,480
everyone for coming into a very small

3
00:00:06,480 --> 00:00:08,880
very hot room to see my talk

4
00:00:08,880 --> 00:00:11,200
um we'll go through the the interesting

5
00:00:11,200 --> 00:00:13,840
part first so this is me i'm keith

6
00:00:13,840 --> 00:00:16,000
lerman i've got creative twitter name

7
00:00:16,000 --> 00:00:19,039
that is easy to remember

8
00:00:19,039 --> 00:00:21,279
i graduated from abertay a few years ago

9
00:00:21,279 --> 00:00:23,119
now

10
00:00:23,119 --> 00:00:25,840
um i was only a bachelor's student as

11
00:00:25,840 --> 00:00:27,359
we've learned over the past two weeks on

12
00:00:27,359 --> 00:00:28,880
twitter if you're not phd student in

13
00:00:28,880 --> 00:00:31,359
security it's literally worthless so

14
00:00:31,359 --> 00:00:33,920
thank you for all arriving anyway

15
00:00:33,920 --> 00:00:36,399
um i spent the last six years at the

16
00:00:36,399 --> 00:00:39,200
same mssp in a number of different roles

17
00:00:39,200 --> 00:00:42,480
um started off as a stock analyst

18
00:00:42,480 --> 00:00:45,360
doing analysis work and helping build

19
00:00:45,360 --> 00:00:46,079
the

20
00:00:46,079 --> 00:00:48,160
blog ingestion

21
00:00:48,160 --> 00:00:50,000
um

22
00:00:50,000 --> 00:00:52,480
with 4 000 clients that's you know

23
00:00:52,480 --> 00:00:54,559
petabytes worth of logs

24
00:00:54,559 --> 00:00:56,640
so you had to learn fast

25
00:00:56,640 --> 00:00:59,520
and at the moment i am an ir first

26
00:00:59,520 --> 00:01:03,039
responder with the same uh mssp

27
00:01:03,039 --> 00:01:05,360
what i tell my mom i do is i'm a speed

28
00:01:05,360 --> 00:01:07,439
googler it's my

29
00:01:07,439 --> 00:01:10,000
um credence that as long as you can

30
00:01:10,000 --> 00:01:12,320
google faster than your client can ask

31
00:01:12,320 --> 00:01:13,520
questions

32
00:01:13,520 --> 00:01:16,320
you're set for life

33
00:01:18,240 --> 00:01:19,840
uh this

34
00:01:19,840 --> 00:01:21,840
this presentation was previously at

35
00:01:21,840 --> 00:01:23,680
luther hack

36
00:01:23,680 --> 00:01:25,520
this year in edinburgh it's a

37
00:01:25,520 --> 00:01:26,960
student-led conference by the napier

38
00:01:26,960 --> 00:01:28,080
university

39
00:01:28,080 --> 00:01:29,119
um

40
00:01:29,119 --> 00:01:31,040
if you were there and saw it thanks for

41
00:01:31,040 --> 00:01:32,640
coming back for some reason

42
00:01:32,640 --> 00:01:35,360
but that was a much shorter version of

43
00:01:35,360 --> 00:01:39,360
the talk this is a more expanded one

44
00:01:39,360 --> 00:01:41,600
i've got a powerpoint license now so i

45
00:01:41,600 --> 00:01:43,680
can do that

46
00:01:43,680 --> 00:01:46,159
so why um have i decided to talk about

47
00:01:46,159 --> 00:01:48,000
windows credential theft

48
00:01:48,000 --> 00:01:50,399
so for people who are new to security or

49
00:01:50,399 --> 00:01:52,720
not in security and hopefully

50
00:01:52,720 --> 00:01:54,320
a number of people in the room fit that

51
00:01:54,320 --> 00:01:56,960
bill um it's kind of an opaque

52
00:01:56,960 --> 00:01:58,079
wall

53
00:01:58,079 --> 00:02:00,560
in your ti reports that are commonly out

54
00:02:00,560 --> 00:02:01,520
you get

55
00:02:01,520 --> 00:02:03,119
you know a detailed paragraph on how

56
00:02:03,119 --> 00:02:06,960
they got in a huge run-down paragraph on

57
00:02:06,960 --> 00:02:09,919
the you know polymorphically encrypted

58
00:02:09,919 --> 00:02:13,360
modular malware that they have and then

59
00:02:13,360 --> 00:02:14,879
there's a bit that says then they did a

60
00:02:14,879 --> 00:02:16,239
mimikatz

61
00:02:16,239 --> 00:02:18,319
and

62
00:02:18,319 --> 00:02:19,680
then they go into the details of what

63
00:02:19,680 --> 00:02:20,879
they did with all the credentials they

64
00:02:20,879 --> 00:02:23,120
have so i wanted to give some people a

65
00:02:23,120 --> 00:02:24,480
whirlwind tour

66
00:02:24,480 --> 00:02:26,640
on some of the details so they can fill

67
00:02:26,640 --> 00:02:29,040
in the blanks

68
00:02:29,040 --> 00:02:31,360
so windows credential theft

69
00:02:31,360 --> 00:02:33,280
it's basically the first priority for

70
00:02:33,280 --> 00:02:35,360
any major attacker

71
00:02:35,360 --> 00:02:39,040
landing on on infrastructure

72
00:02:39,040 --> 00:02:41,200
you will tend to enter without the

73
00:02:41,200 --> 00:02:43,280
privileges you need to

74
00:02:43,280 --> 00:02:45,760
um do what it is you want to do your

75
00:02:45,760 --> 00:02:47,280
actions and objectives for anyone who

76
00:02:47,280 --> 00:02:48,879
was in peter's talk just before he

77
00:02:48,879 --> 00:02:51,040
talked about this it was very good and i

78
00:02:51,040 --> 00:02:52,560
may repeat some of the things that he

79
00:02:52,560 --> 00:02:54,720
said

80
00:02:54,720 --> 00:02:57,040
in windows and this is a

81
00:02:57,040 --> 00:02:59,280
sort of key rule to remember throughout

82
00:02:59,280 --> 00:03:01,519
this entire presentation is basically

83
00:03:01,519 --> 00:03:04,080
everything that happens in windows is

84
00:03:04,080 --> 00:03:06,560
tied to a user account in active

85
00:03:06,560 --> 00:03:07,920
directory

86
00:03:07,920 --> 00:03:10,800
every user has an account every service

87
00:03:10,800 --> 00:03:12,000
that's running

88
00:03:12,000 --> 00:03:14,080
there's an account tied to that

89
00:03:14,080 --> 00:03:16,319
even every individual machine has its

90
00:03:16,319 --> 00:03:17,440
own

91
00:03:17,440 --> 00:03:19,920
stripped-down accounts they all have

92
00:03:19,920 --> 00:03:22,319
domain accounts

93
00:03:22,319 --> 00:03:24,959
uh so why do we need high privilege

94
00:03:24,959 --> 00:03:25,680
so

95
00:03:25,680 --> 00:03:27,760
let's say you have got onto a network

96
00:03:27,760 --> 00:03:30,000
through phishing you'll have a user

97
00:03:30,000 --> 00:03:32,159
account most likely whether that's local

98
00:03:32,159 --> 00:03:34,000
admin or not it's not something that you

99
00:03:34,000 --> 00:03:35,840
can then use to pivot across the

100
00:03:35,840 --> 00:03:37,440
environment into

101
00:03:37,440 --> 00:03:39,680
every file server and retrieve what you

102
00:03:39,680 --> 00:03:42,000
want or to execute something like

103
00:03:42,000 --> 00:03:43,280
ransomware

104
00:03:43,280 --> 00:03:45,840
so lateral movements is one of the key

105
00:03:45,840 --> 00:03:47,680
things that you need the easiest way to

106
00:03:47,680 --> 00:03:49,840
move across a network is to have

107
00:03:49,840 --> 00:03:52,080
credentials to accounts that can travel

108
00:03:52,080 --> 00:03:53,680
across the network

109
00:03:53,680 --> 00:03:55,599
privilege escalation you want to find

110
00:03:55,599 --> 00:03:57,120
accounts that have a higher privilege

111
00:03:57,120 --> 00:03:59,280
than where you've landed

112
00:03:59,280 --> 00:04:00,720
and one that's talked about less is

113
00:04:00,720 --> 00:04:02,799
persistence you know what what better

114
00:04:02,799 --> 00:04:05,280
persistence is there a network than

115
00:04:05,280 --> 00:04:08,480
having a username you can just log into

116
00:04:08,480 --> 00:04:09,439
um

117
00:04:09,439 --> 00:04:11,200
so with all these things why not just

118
00:04:11,200 --> 00:04:12,640
make a new account instead of fussing

119
00:04:12,640 --> 00:04:15,439
about trying to steal some

120
00:04:15,439 --> 00:04:16,959
you you need the access to create an

121
00:04:16,959 --> 00:04:18,798
account first so you need to do theft

122
00:04:18,798 --> 00:04:21,839
anyway and also for the most for the

123
00:04:21,839 --> 00:04:25,040
most part account creation is logged by

124
00:04:25,040 --> 00:04:28,000
people a lot more than account usage you

125
00:04:28,000 --> 00:04:30,639
know you can see um people with a syslog

126
00:04:30,639 --> 00:04:34,720
configs where you know our logins

127
00:04:34,720 --> 00:04:37,199
looked at more thoroughly than account

128
00:04:37,199 --> 00:04:39,759
created accounts added to the main admin

129
00:04:39,759 --> 00:04:42,560
whichever

130
00:04:42,560 --> 00:04:43,680
so

131
00:04:43,680 --> 00:04:46,400
just a brief rundown on these accounts

132
00:04:46,400 --> 00:04:48,960
um i'm going to split them into two

133
00:04:48,960 --> 00:04:50,960
firstly local accounts and secondly

134
00:04:50,960 --> 00:04:52,400
domain accounts

135
00:04:52,400 --> 00:04:54,479
so the local accounts are

136
00:04:54,479 --> 00:04:57,199
for a single machine and are stored on a

137
00:04:57,199 --> 00:04:59,360
single machine so your work laptop for

138
00:04:59,360 --> 00:05:01,120
example

139
00:05:01,120 --> 00:05:02,720
i say ostensibly i'll go into a little

140
00:05:02,720 --> 00:05:03,840
bit

141
00:05:03,840 --> 00:05:06,720
of detail and why i say that later

142
00:05:06,720 --> 00:05:09,440
the details are all stored locally

143
00:05:09,440 --> 00:05:11,759
it's hash based authentications for a

144
00:05:11,759 --> 00:05:13,680
local logon

145
00:05:13,680 --> 00:05:16,560
um before the nt kernels so before i was

146
00:05:16,560 --> 00:05:17,759
born

147
00:05:17,759 --> 00:05:19,680
they used lm hashes

148
00:05:19,680 --> 00:05:22,840
now it's pretty much um

149
00:05:22,840 --> 00:05:24,960
ntlm um after the nt kernel which i

150
00:05:24,960 --> 00:05:28,320
think was windows 3 or 95 or

151
00:05:28,320 --> 00:05:30,400
one of the ones from way back

152
00:05:30,400 --> 00:05:31,120
um

153
00:05:31,120 --> 00:05:34,080
these hashes are stored in the sam

154
00:05:34,080 --> 00:05:36,560
registry hive so that is security

155
00:05:36,560 --> 00:05:37,759
account map

156
00:05:37,759 --> 00:05:40,160
yeah security account manager

157
00:05:40,160 --> 00:05:42,000
um everyone just calls it sam so i

158
00:05:42,000 --> 00:05:43,759
forget what the acronym stands for

159
00:05:43,759 --> 00:05:44,880
sometimes

160
00:05:44,880 --> 00:05:46,880
and that is encrypted with a value

161
00:05:46,880 --> 00:05:48,720
called syskey

162
00:05:48,720 --> 00:05:52,400
now syskey is just a rc4 encryption key

163
00:05:52,400 --> 00:05:54,880
that encrypts a number of different

164
00:05:54,880 --> 00:05:57,199
credential things in windows but it's

165
00:05:57,199 --> 00:05:59,919
also stored locally machine

166
00:05:59,919 --> 00:06:01,919
um when i was researching this before

167
00:06:01,919 --> 00:06:04,240
microsoft said that they are

168
00:06:04,240 --> 00:06:05,919
deprecating it but in all of the

169
00:06:05,919 --> 00:06:07,440
official communications about

170
00:06:07,440 --> 00:06:09,280
deprecating it they haven't really

171
00:06:09,280 --> 00:06:12,560
said what it's being replaced with but

172
00:06:12,560 --> 00:06:14,880
the official communications line says

173
00:06:14,880 --> 00:06:16,960
you know do full drive encryption with

174
00:06:16,960 --> 00:06:19,680
bitlocker but that doesn't really

175
00:06:19,680 --> 00:06:21,759
solve the problem and if your

176
00:06:21,759 --> 00:06:24,880
response is go use a third party tool

177
00:06:24,880 --> 00:06:28,719
that it's a bit defeatist really

178
00:06:28,800 --> 00:06:30,240
and

179
00:06:30,240 --> 00:06:32,720
there are a few built-in local accounts

180
00:06:32,720 --> 00:06:34,880
that are on every windows machine so

181
00:06:34,880 --> 00:06:38,960
those are administrator and guest

182
00:06:38,960 --> 00:06:39,759
so

183
00:06:39,759 --> 00:06:40,960
guest

184
00:06:40,960 --> 00:06:45,039
is off by default since either windows 7

185
00:06:45,039 --> 00:06:47,440
or 8 i can't remember which anyone who

186
00:06:47,440 --> 00:06:49,840
uses xp will remember the little guest

187
00:06:49,840 --> 00:06:51,520
account at the bottom that nobody ever

188
00:06:51,520 --> 00:06:53,919
used it's just a heavily stripped down

189
00:06:53,919 --> 00:06:57,360
account there's very limited um access

190
00:06:57,360 --> 00:06:59,039
and the default password is blank

191
00:06:59,039 --> 00:07:01,919
because the idea is anyone can use it

192
00:07:01,919 --> 00:07:03,360
administrator

193
00:07:03,360 --> 00:07:05,520
has full control of the local resources

194
00:07:05,520 --> 00:07:08,479
and accounts and since windows 10 the

195
00:07:08,479 --> 00:07:11,360
actual administrator account is disabled

196
00:07:11,360 --> 00:07:14,720
by default once you um

197
00:07:14,720 --> 00:07:17,520
once you set up your machine

198
00:07:17,520 --> 00:07:19,520
your initial commands run under

199
00:07:19,520 --> 00:07:21,919
administrator in order to get your user

200
00:07:21,919 --> 00:07:24,160
account created then windows disables

201
00:07:24,160 --> 00:07:26,800
its the default account and creates a

202
00:07:26,800 --> 00:07:28,440
new local

203
00:07:28,440 --> 00:07:32,160
admin um local admins can be restricted

204
00:07:32,160 --> 00:07:34,479
from domain and network access

205
00:07:34,479 --> 00:07:37,440
um since windows 8.1 but

206
00:07:37,440 --> 00:07:38,319
um

207
00:07:38,319 --> 00:07:40,400
you need to do that so

208
00:07:40,400 --> 00:07:43,120
it often isn't

209
00:07:43,120 --> 00:07:44,960
so just a little rundown on the hash

210
00:07:44,960 --> 00:07:46,960
authentication i don't have any pens for

211
00:07:46,960 --> 00:07:49,280
the whiteboard so i won't go into

212
00:07:49,280 --> 00:07:52,080
the explanation on why lm hashing is bad

213
00:07:52,080 --> 00:07:54,080
if you are starting out in

214
00:07:54,080 --> 00:07:57,280
um understanding hashing protocols i

215
00:07:57,280 --> 00:08:01,360
would look at lm hashing for examples of

216
00:08:01,360 --> 00:08:04,000
bad things it's a good case study it's

217
00:08:04,000 --> 00:08:05,840
not really used anywhere anymore since

218
00:08:05,840 --> 00:08:07,520
about 1993

219
00:08:07,520 --> 00:08:08,479
but

220
00:08:08,479 --> 00:08:10,560
it's just a good case study to look at

221
00:08:10,560 --> 00:08:13,840
issues you can encounter

222
00:08:14,080 --> 00:08:15,360
um

223
00:08:15,360 --> 00:08:16,800
and yeah since

224
00:08:16,800 --> 00:08:20,160
let's say 1998 where the current

225
00:08:20,160 --> 00:08:23,840
nt values have come in there's um an md4

226
00:08:23,840 --> 00:08:25,440
algorithm to create a hash of the

227
00:08:25,440 --> 00:08:27,199
account

228
00:08:27,199 --> 00:08:29,520
and these are also partially encrypted

229
00:08:29,520 --> 00:08:33,598
with the sysq value i mentioned before

230
00:08:33,839 --> 00:08:36,958
if you are looking at an ntlm hash in

231
00:08:36,958 --> 00:08:39,200
windows you will notice that there still

232
00:08:39,200 --> 00:08:41,200
is a slot for lm

233
00:08:41,200 --> 00:08:43,279
but it's the same for everyone because

234
00:08:43,279 --> 00:08:46,000
it's disabled but because of

235
00:08:46,000 --> 00:08:48,320
you know in classic windows fashion

236
00:08:48,320 --> 00:08:50,240
uh to keep

237
00:08:50,240 --> 00:08:52,480
backwards compatibility with 1993 they

238
00:08:52,480 --> 00:08:54,959
still have the value in

239
00:08:54,959 --> 00:08:58,160
um neither of these hash protocols um

240
00:08:58,160 --> 00:08:59,680
have salts

241
00:08:59,680 --> 00:09:00,640
now

242
00:09:00,640 --> 00:09:03,920
i know the theoretical

243
00:09:03,920 --> 00:09:06,560
idea is that any hashing without salting

244
00:09:06,560 --> 00:09:09,360
is useless and while i can kind of agree

245
00:09:09,360 --> 00:09:11,839
these are local accounts so the salt

246
00:09:11,839 --> 00:09:15,440
would have to be stored locally and

247
00:09:15,440 --> 00:09:17,120
if the salt's right next to the password

248
00:09:17,120 --> 00:09:18,720
hash is it really an extra layer of

249
00:09:18,720 --> 00:09:21,279
security

250
00:09:21,360 --> 00:09:23,760
so when i am on my login screen i type

251
00:09:23,760 --> 00:09:25,519
in um

252
00:09:25,519 --> 00:09:28,320
my password or an input windows takes

253
00:09:28,320 --> 00:09:30,320
that converts it with the same hashing

254
00:09:30,320 --> 00:09:33,120
protocol and then compares it with what

255
00:09:33,120 --> 00:09:37,680
it has stored in the sam hive

256
00:09:37,680 --> 00:09:41,120
now elsas which is another acronym that

257
00:09:41,120 --> 00:09:43,600
i forget local security authority

258
00:09:43,600 --> 00:09:47,600
subsystem service uh elsas.exe it's part

259
00:09:47,600 --> 00:09:49,680
of the authentication

260
00:09:49,680 --> 00:09:51,839
process in windows

261
00:09:51,839 --> 00:09:54,000
for this purpose the main thing is that

262
00:09:54,000 --> 00:09:57,839
it is the interface with um sam

263
00:09:57,839 --> 00:09:59,600
the sam hive

264
00:09:59,600 --> 00:10:01,360
what that means is the hash ends up

265
00:10:01,360 --> 00:10:04,640
stored in the memory of lsas i'll come

266
00:10:04,640 --> 00:10:08,959
on to why that is an issue later on

267
00:10:08,959 --> 00:10:11,920
uh locally as i said a win log on to xe

268
00:10:11,920 --> 00:10:13,839
is the process that actually does the

269
00:10:13,839 --> 00:10:16,240
comparison but the

270
00:10:16,240 --> 00:10:19,600
hash is stored in lsas instead

271
00:10:19,600 --> 00:10:22,320
other hashes do exist these are

272
00:10:22,320 --> 00:10:24,399
weird niche things because windows loves

273
00:10:24,399 --> 00:10:27,600
weird niche things from years past um

274
00:10:27,600 --> 00:10:31,440
for example tspkg is authentication

275
00:10:31,440 --> 00:10:33,600
single sign-on authentication for the

276
00:10:33,600 --> 00:10:35,360
terminal services

277
00:10:35,360 --> 00:10:36,560
um

278
00:10:36,560 --> 00:10:38,880
live ssp is

279
00:10:38,880 --> 00:10:40,320
stuff i could barely find any

280
00:10:40,320 --> 00:10:42,160
documentation for for

281
00:10:42,160 --> 00:10:44,720
windows live rip

282
00:10:44,720 --> 00:10:45,760
and

283
00:10:45,760 --> 00:10:48,160
w digest for some reason is still around

284
00:10:48,160 --> 00:10:53,440
it's ldap authentication for server 2003

285
00:10:53,440 --> 00:10:56,399
so a lot of old stuff

286
00:10:56,399 --> 00:10:59,519
now we come on to um domain or remote

287
00:10:59,519 --> 00:11:01,120
accounts these are the ones that are

288
00:11:01,120 --> 00:11:03,360
part of your active directory i know i

289
00:11:03,360 --> 00:11:05,760
said to beginners um are we familiar

290
00:11:05,760 --> 00:11:07,200
with what active directory is in the

291
00:11:07,200 --> 00:11:09,440
room

292
00:11:11,040 --> 00:11:13,680
okay so active directory uh there were

293
00:11:13,680 --> 00:11:15,519
some shakes of the head there active

294
00:11:15,519 --> 00:11:17,760
directory is basically

295
00:11:17,760 --> 00:11:19,920
a number of services and a big database

296
00:11:19,920 --> 00:11:23,279
of all of the um

297
00:11:23,839 --> 00:11:27,600
stuff within a windows environment so

298
00:11:27,600 --> 00:11:29,360
all your different computers in a work

299
00:11:29,360 --> 00:11:32,160
environment are all interconnect in some

300
00:11:32,160 --> 00:11:34,399
way active directory is a database that

301
00:11:34,399 --> 00:11:36,800
manages the interactions and the

302
00:11:36,800 --> 00:11:39,279
services

303
00:11:39,839 --> 00:11:41,680
yes so all authentication and permission

304
00:11:41,680 --> 00:11:43,920
handling domain controllers are remote

305
00:11:43,920 --> 00:11:45,600
servers that handle all this

306
00:11:45,600 --> 00:11:47,680
authentication services i mentioned are

307
00:11:47,680 --> 00:11:50,079
going to be interacting with these

308
00:11:50,079 --> 00:11:53,040
particular servers

309
00:11:53,040 --> 00:11:55,519
it prefers the kerberos protocol which

310
00:11:55,519 --> 00:11:57,279
is another thing i'll get into in a

311
00:11:57,279 --> 00:11:58,480
little bit more detail when i'm talking

312
00:11:58,480 --> 00:11:59,760
about tickets

313
00:11:59,760 --> 00:12:02,000
but there are cases where remote

314
00:12:02,000 --> 00:12:05,200
accounts will use um nt hash as

315
00:12:05,200 --> 00:12:06,639
authentication

316
00:12:06,639 --> 00:12:08,880
that is if the server isn't in a domain

317
00:12:08,880 --> 00:12:11,519
or doesn't have active directory set up

318
00:12:11,519 --> 00:12:13,440
which you know is going to be less

319
00:12:13,440 --> 00:12:15,200
useful for an attacker because if there

320
00:12:15,200 --> 00:12:16,720
isn't a domain

321
00:12:16,720 --> 00:12:18,720
what are you attacking

322
00:12:18,720 --> 00:12:20,480
and if a client connects to a server

323
00:12:20,480 --> 00:12:23,600
using an ip and no reverse dns is

324
00:12:23,600 --> 00:12:24,639
available

325
00:12:24,639 --> 00:12:27,440
it's not going to be able to find the

326
00:12:27,440 --> 00:12:29,600
domain controller so it will attempt to

327
00:12:29,600 --> 00:12:32,720
use the hashes as a sort of fill fail

328
00:12:32,720 --> 00:12:34,480
safe

329
00:12:34,480 --> 00:12:36,959
the hash doesn't directly get sent over

330
00:12:36,959 --> 00:12:40,719
the wire it uses some

331
00:12:42,000 --> 00:12:44,000
some math that's above my head so i

332
00:12:44,000 --> 00:12:45,920
won't go into details but essentially a

333
00:12:45,920 --> 00:12:47,440
random number that sent the hash doesn't

334
00:12:47,440 --> 00:12:48,639
go over

335
00:12:48,639 --> 00:12:51,279
but the hash still gets loaded into lsas

336
00:12:51,279 --> 00:12:54,160
if you're doing a interactive or login

337
00:12:54,160 --> 00:12:56,399
through rdp

338
00:12:56,399 --> 00:12:58,480
not for most network logins though since

339
00:12:58,480 --> 00:13:01,600
it doesn't go over the wire

340
00:13:01,600 --> 00:13:03,600
now what other hashes are there on a

341
00:13:03,600 --> 00:13:05,040
machine we've gone through some of the

342
00:13:05,040 --> 00:13:08,320
niche things and nt hashes

343
00:13:08,320 --> 00:13:10,959
the other main ubiquitous ones are

344
00:13:10,959 --> 00:13:12,880
cached credentials

345
00:13:12,880 --> 00:13:14,639
so computers aren't always connected to

346
00:13:14,639 --> 00:13:15,680
your domain

347
00:13:15,680 --> 00:13:18,639
every year i go to my mums for christmas

348
00:13:18,639 --> 00:13:19,920
and i have to work a couple of shifts

349
00:13:19,920 --> 00:13:21,680
there

350
00:13:21,680 --> 00:13:23,279
that's not connect when i first switch

351
00:13:23,279 --> 00:13:25,440
my computer on there i'm not connected

352
00:13:25,440 --> 00:13:28,160
to my company's active directory but my

353
00:13:28,160 --> 00:13:30,240
logon still works

354
00:13:30,240 --> 00:13:32,639
that's because the last

355
00:13:32,639 --> 00:13:35,600
end user's details are cached locally on

356
00:13:35,600 --> 00:13:37,200
the machine itself

357
00:13:37,200 --> 00:13:40,880
and by default in local security options

358
00:13:40,880 --> 00:13:43,600
10 is the default so the last 10 users

359
00:13:43,600 --> 00:13:47,120
logins are cached in the registry of

360
00:13:47,120 --> 00:13:48,560
your laptop

361
00:13:48,560 --> 00:13:50,800
and

362
00:13:50,880 --> 00:13:52,639
when you think about it how many people

363
00:13:52,639 --> 00:13:54,959
are going to be logging into the average

364
00:13:54,959 --> 00:13:56,800
work laptop

365
00:13:56,800 --> 00:13:58,800
the person who runs it

366
00:13:58,800 --> 00:14:01,360
the admin who set it up

367
00:14:01,360 --> 00:14:03,760
maybe a couple of help desk accounts so

368
00:14:03,760 --> 00:14:05,519
for most places

369
00:14:05,519 --> 00:14:07,760
you're never going to reach that 10. so

370
00:14:07,760 --> 00:14:09,040
you can think of it as everyone that

371
00:14:09,040 --> 00:14:11,600
logs into a work laptop likely has their

372
00:14:11,600 --> 00:14:14,639
credentials cached

373
00:14:14,880 --> 00:14:16,880
these are stored in the security hive

374
00:14:16,880 --> 00:14:19,519
not sam on and they are stored as ms

375
00:14:19,519 --> 00:14:22,399
cache2 it also is called dcc2 so it's

376
00:14:22,399 --> 00:14:24,880
not an nt hash it's a different

377
00:14:24,880 --> 00:14:28,160
thing they can't be used interchangeably

378
00:14:28,160 --> 00:14:30,320
uh this one is salted but it's salted

379
00:14:30,320 --> 00:14:32,880
with the account username so again it's

380
00:14:32,880 --> 00:14:34,880
not really something that's

381
00:14:34,880 --> 00:14:39,360
an extra layer of security

382
00:14:42,320 --> 00:14:43,920
and these are all encrypted with assist

383
00:14:43,920 --> 00:14:46,160
key it's a recurring theme of credential

384
00:14:46,160 --> 00:14:48,800
hashes being encrypted with cisc value

385
00:14:48,800 --> 00:14:50,320
even though you can just

386
00:14:50,320 --> 00:14:53,360
pull that out the registry

387
00:14:53,360 --> 00:14:55,440
yeah and those hashes as i said can't be

388
00:14:55,440 --> 00:14:57,360
used like anti hashes these ones the

389
00:14:57,360 --> 00:14:59,120
only thing you can do with them is to

390
00:14:59,120 --> 00:15:01,600
crack them

391
00:15:01,760 --> 00:15:03,360
ntds.date

392
00:15:03,360 --> 00:15:06,560
this is a big one

393
00:15:06,560 --> 00:15:08,480
so this is coming down to kerberos

394
00:15:08,480 --> 00:15:11,680
authentication this is the database file

395
00:15:11,680 --> 00:15:13,360
that's stored on the domain controllers

396
00:15:13,360 --> 00:15:15,839
i mentioned it's the keys to the kingdom

397
00:15:15,839 --> 00:15:18,000
essentially that's active directory

398
00:15:18,000 --> 00:15:20,399
all of the users and all of the hashes

399
00:15:20,399 --> 00:15:22,560
for that domain are stored in this

400
00:15:22,560 --> 00:15:24,720
database file because that's what the

401
00:15:24,720 --> 00:15:27,279
domain controller uses to compare your

402
00:15:27,279 --> 00:15:29,360
hash to ensure that

403
00:15:29,360 --> 00:15:33,120
you're you are who you say you are

404
00:15:33,920 --> 00:15:35,519
um

405
00:15:35,519 --> 00:15:37,839
yeah so it's it's just a file on the

406
00:15:37,839 --> 00:15:39,120
machine

407
00:15:39,120 --> 00:15:42,160
stored in windows slash ntds slash

408
00:15:42,160 --> 00:15:43,920
ntds.dit

409
00:15:43,920 --> 00:15:46,959
and it is both locked and protected by

410
00:15:46,959 --> 00:15:49,519
default every protection in the windows

411
00:15:49,519 --> 00:15:52,399
security api is applied to this and it's

412
00:15:52,399 --> 00:15:54,880
constantly locked as in use so you can't

413
00:15:54,880 --> 00:15:58,079
just control see it

414
00:15:58,480 --> 00:16:01,040
and again also encrypted with the sysq

415
00:16:01,040 --> 00:16:03,439
values

416
00:16:04,160 --> 00:16:05,920
so those are the hashes

417
00:16:05,920 --> 00:16:08,240
now we're going to talk about how people

418
00:16:08,240 --> 00:16:10,560
actually steal them or retrieve them so

419
00:16:10,560 --> 00:16:12,639
just a quick summary of the hashes and

420
00:16:12,639 --> 00:16:14,079
where they can be found

421
00:16:14,079 --> 00:16:17,279
the sam registry hive has the nt hashes

422
00:16:17,279 --> 00:16:19,680
of all your local users

423
00:16:19,680 --> 00:16:22,079
system registry hive has the cis key

424
00:16:22,079 --> 00:16:23,680
value that you're going to need to

425
00:16:23,680 --> 00:16:25,199
unstitch

426
00:16:25,199 --> 00:16:26,959
the hashes

427
00:16:26,959 --> 00:16:27,759
um

428
00:16:27,759 --> 00:16:30,079
security slash cache hive

429
00:16:30,079 --> 00:16:32,720
has the ms cache 2 for cached

430
00:16:32,720 --> 00:16:35,040
credentials

431
00:16:35,040 --> 00:16:36,639
and

432
00:16:36,639 --> 00:16:38,959
you've got ntds.d i just mentioned and

433
00:16:38,959 --> 00:16:41,759
then you've got the memory of the lsas

434
00:16:41,759 --> 00:16:45,360
process which has

435
00:16:45,360 --> 00:16:47,120
those things

436
00:16:47,120 --> 00:16:49,519
the nt hashes of all the users who

437
00:16:49,519 --> 00:16:51,440
logged in which includes the remote

438
00:16:51,440 --> 00:16:53,759
accounts through interactive variety or

439
00:16:53,759 --> 00:16:55,920
rdp logins as i mentioned

440
00:16:55,920 --> 00:16:57,680
um is this key value because it's

441
00:16:57,680 --> 00:17:00,560
loading this key in to unstitch or

442
00:17:00,560 --> 00:17:03,120
unencrypt the hashes

443
00:17:03,120 --> 00:17:05,919
and for some other of the niche hashes i

444
00:17:05,919 --> 00:17:08,880
mentioned um it can store the plaintext

445
00:17:08,880 --> 00:17:11,359
passwords which is really bad

446
00:17:11,359 --> 00:17:15,359
but is lessee nowadays

447
00:17:15,359 --> 00:17:16,640
so

448
00:17:16,640 --> 00:17:18,480
sam

449
00:17:18,480 --> 00:17:20,559
hash is partially encrypted with cis key

450
00:17:20,559 --> 00:17:21,760
so

451
00:17:21,760 --> 00:17:24,880
stealing the sam file alone doesn't help

452
00:17:24,880 --> 00:17:27,359
you need to also take the system hive to

453
00:17:27,359 --> 00:17:30,640
have the sys key to then work with it

454
00:17:30,640 --> 00:17:32,720
the easiest way to do this is register

455
00:17:32,720 --> 00:17:34,880
exe vito mentioned it before as a common

456
00:17:34,880 --> 00:17:36,799
thing attackers use it's built into

457
00:17:36,799 --> 00:17:38,880
windows every single windows machine has

458
00:17:38,880 --> 00:17:41,600
it it's used legitimately for all

459
00:17:41,600 --> 00:17:42,720
registry

460
00:17:42,720 --> 00:17:46,240
um manipulations essentially

461
00:17:46,240 --> 00:17:47,760
yeah default windows executable for

462
00:17:47,760 --> 00:17:50,000
manipulating the registry

463
00:17:50,000 --> 00:17:52,080
so this is

464
00:17:52,080 --> 00:17:53,760
i'm just going to take a step back so i

465
00:17:53,760 --> 00:17:56,080
can see how big these pictures are on

466
00:17:56,080 --> 00:18:00,280
the screen yeah they're perfectly

467
00:18:01,120 --> 00:18:02,160
so

468
00:18:02,160 --> 00:18:03,840
there's some recon here you can see

469
00:18:03,840 --> 00:18:04,960
where the

470
00:18:04,960 --> 00:18:07,280
sam and the system hives are being

471
00:18:07,280 --> 00:18:10,400
stolen and the laser pointers just died

472
00:18:10,400 --> 00:18:11,440
so i'm gonna

473
00:18:11,440 --> 00:18:14,240
point with my finger

474
00:18:14,320 --> 00:18:16,720
we can see before they've stolen it

475
00:18:16,720 --> 00:18:19,679
they've done two pretty standard recon

476
00:18:19,679 --> 00:18:22,480
attacks or refund steps there's host

477
00:18:22,480 --> 00:18:23,919
name which says what is the name of the

478
00:18:23,919 --> 00:18:25,360
host you're on

479
00:18:25,360 --> 00:18:27,360
and you've got net user which is

480
00:18:27,360 --> 00:18:29,440
essentially some details about what user

481
00:18:29,440 --> 00:18:33,039
you're logged in as at the moment

482
00:18:33,039 --> 00:18:35,919
then they steal with the sam and system

483
00:18:35,919 --> 00:18:38,240
files

484
00:18:38,240 --> 00:18:39,919
then if you notice

485
00:18:39,919 --> 00:18:42,320
that's a 1017

486
00:18:42,320 --> 00:18:44,799
an hour and a quarter later at 11 32

487
00:18:44,799 --> 00:18:47,520
they do net user test admin which brings

488
00:18:47,520 --> 00:18:49,600
back some details about

489
00:18:49,600 --> 00:18:51,440
the test admin accounts

490
00:18:51,440 --> 00:18:53,120
now they're not logged in as test admin

491
00:18:53,120 --> 00:18:54,960
so they've found that account name out

492
00:18:54,960 --> 00:18:57,280
somehow

493
00:18:57,280 --> 00:19:00,639
most likely from the sam file

494
00:19:01,039 --> 00:19:02,400
and then once you've got the system the

495
00:19:02,400 --> 00:19:04,799
sam file there are plenty of tools out

496
00:19:04,799 --> 00:19:07,200
there that will

497
00:19:07,200 --> 00:19:09,440
unpack it unencrypt it and dump all the

498
00:19:09,440 --> 00:19:12,240
hashes out for you pw dump is the most

499
00:19:12,240 --> 00:19:14,960
common one because it's built into cali

500
00:19:14,960 --> 00:19:16,559
so this was

501
00:19:16,559 --> 00:19:18,879
um

502
00:19:22,640 --> 00:19:24,640
i a bit of credit for this picture i

503
00:19:24,640 --> 00:19:27,200
think this was from ultimate windows

504
00:19:27,200 --> 00:19:29,360
security which is a very good website

505
00:19:29,360 --> 00:19:31,679
for windows security things and if you

506
00:19:31,679 --> 00:19:34,080
are sock analyst it's an absolute life

507
00:19:34,080 --> 00:19:37,440
saver when it comes to windows event ids

508
00:19:37,440 --> 00:19:39,600
um

509
00:19:39,600 --> 00:19:43,280
if you notice that the first

510
00:19:43,280 --> 00:19:44,559
hash value

511
00:19:44,559 --> 00:19:47,919
is the same for every account there

512
00:19:47,919 --> 00:19:49,520
that's what i mentioned before about the

513
00:19:49,520 --> 00:19:50,960
lm

514
00:19:50,960 --> 00:19:52,799
section always being present but not

515
00:19:52,799 --> 00:19:55,120
used

516
00:19:56,240 --> 00:19:59,520
cash credentials it's much the same as

517
00:19:59,520 --> 00:20:02,400
stealing the sam hive except for me

518
00:20:02,400 --> 00:20:05,039
stealing security hive instead

519
00:20:05,039 --> 00:20:08,720
um and the system height same as before

520
00:20:08,720 --> 00:20:10,720
but instead of pw dump there are other

521
00:20:10,720 --> 00:20:13,919
tools such as cachedump.pi that's on

522
00:20:13,919 --> 00:20:16,080
github somewhere mimikatz also allows

523
00:20:16,080 --> 00:20:17,280
you to do this

524
00:20:17,280 --> 00:20:18,799
and

525
00:20:18,799 --> 00:20:21,120
generally everything i see in this talk

526
00:20:21,120 --> 00:20:24,080
you can basically append mimikatz also

527
00:20:24,080 --> 00:20:26,159
does this at the end because at this

528
00:20:26,159 --> 00:20:28,880
point in time it does everything

529
00:20:28,880 --> 00:20:31,840
um so this one was shamelessly taken

530
00:20:31,840 --> 00:20:34,400
from one of the um

531
00:20:34,400 --> 00:20:37,360
open sans pages because i couldn't find

532
00:20:37,360 --> 00:20:39,440
any live examples of cache credentials

533
00:20:39,440 --> 00:20:41,200
being stolen because

534
00:20:41,200 --> 00:20:42,480
the majority of the time in instance

535
00:20:42,480 --> 00:20:43,600
i've seen

536
00:20:43,600 --> 00:20:45,760
there they've been able to steal the

537
00:20:45,760 --> 00:20:47,440
credentials through much easier means

538
00:20:47,440 --> 00:20:49,120
than this

539
00:20:49,120 --> 00:20:51,440
but it's good to still know about

540
00:20:51,440 --> 00:20:52,320
um

541
00:20:52,320 --> 00:20:54,720
but as with the sam you're just taking

542
00:20:54,720 --> 00:20:56,880
system security you stick the things

543
00:20:56,880 --> 00:20:59,280
you've exported into the python tool it

544
00:20:59,280 --> 00:21:02,679
spits it out for you

545
00:21:02,679 --> 00:21:04,320
ntds.dit

546
00:21:04,320 --> 00:21:06,320
keys to the kingdom

547
00:21:06,320 --> 00:21:08,000
as i said before

548
00:21:08,000 --> 00:21:10,480
every windows security api function is

549
00:21:10,480 --> 00:21:12,000
applying to this

550
00:21:12,000 --> 00:21:14,240
it's locked as constantly in use so you

551
00:21:14,240 --> 00:21:16,320
can't just copy it you can't just move

552
00:21:16,320 --> 00:21:18,480
it or delete it or

553
00:21:18,480 --> 00:21:21,200
whatever you want with it

554
00:21:21,200 --> 00:21:23,440
um you need both the sam and the system

555
00:21:23,440 --> 00:21:26,159
hives to decrypt the file even if you do

556
00:21:26,159 --> 00:21:28,400
manage to steal it

557
00:21:28,400 --> 00:21:30,320
and you can't just copy it normally as i

558
00:21:30,320 --> 00:21:31,679
said

559
00:21:31,679 --> 00:21:33,679
one way to do it is with a malicious

560
00:21:33,679 --> 00:21:35,600
driver so

561
00:21:35,600 --> 00:21:36,400
um

562
00:21:36,400 --> 00:21:39,200
windows security api is running at sort

563
00:21:39,200 --> 00:21:41,039
of operating system level

564
00:21:41,039 --> 00:21:43,200
when you're using a driver that's

565
00:21:43,200 --> 00:21:46,159
one ring below essentially or multiple

566
00:21:46,159 --> 00:21:49,039
rings below even so you can use direct

567
00:21:49,039 --> 00:21:49,840
disk

568
00:21:49,840 --> 00:21:52,559
disk access to bypass all of these api

569
00:21:52,559 --> 00:21:53,760
protections

570
00:21:53,760 --> 00:21:55,520
uh powersports the one that's most

571
00:21:55,520 --> 00:21:56,880
common for this

572
00:21:56,880 --> 00:21:59,120
um but

573
00:21:59,120 --> 00:22:00,480
i'm pretty sure most other post

574
00:22:00,480 --> 00:22:02,320
exploitation frameworks are gonna have a

575
00:22:02,320 --> 00:22:04,080
way of doing this as well

576
00:22:04,080 --> 00:22:06,000
i don't actually see that very often

577
00:22:06,000 --> 00:22:08,960
because um it's nowhere near as popular

578
00:22:08,960 --> 00:22:10,080
as

579
00:22:10,080 --> 00:22:12,960
ntds.u ntds

580
00:22:12,960 --> 00:22:15,120
which is a windows built-in sysadmin

581
00:22:15,120 --> 00:22:17,840
tool that allows you to access this file

582
00:22:17,840 --> 00:22:19,120
past the

583
00:22:19,120 --> 00:22:21,200
security protections

584
00:22:21,200 --> 00:22:23,360
another recurring theme is that if

585
00:22:23,360 --> 00:22:25,440
windows have put in a protection

586
00:22:25,440 --> 00:22:27,440
then there's a significant chance that

587
00:22:27,440 --> 00:22:29,360
they'll have also created an admin tool

588
00:22:29,360 --> 00:22:30,799
to bypass all the protections that

589
00:22:30,799 --> 00:22:33,760
they've just implemented

590
00:22:33,840 --> 00:22:35,919
so

591
00:22:35,919 --> 00:22:37,280
i put this in

592
00:22:37,280 --> 00:22:39,280
as an example of a real world case where

593
00:22:39,280 --> 00:22:41,520
the ntds file was stolen

594
00:22:41,520 --> 00:22:43,120
unfortunately i can't remember what the

595
00:22:43,120 --> 00:22:44,960
arguments mean

596
00:22:44,960 --> 00:22:49,120
but that the aci ntds and the ifm are

597
00:22:49,120 --> 00:22:51,039
the way the attack are the options that

598
00:22:51,039 --> 00:22:53,440
the attacker uses to take it out i just

599
00:22:53,440 --> 00:22:56,799
can't remember what they stand for

600
00:22:57,360 --> 00:23:00,720
um the other way is volume shadows

601
00:23:00,720 --> 00:23:03,520
so if you've ever restored a machine

602
00:23:03,520 --> 00:23:04,480
from

603
00:23:04,480 --> 00:23:06,480
say you've messed up a windows update or

604
00:23:06,480 --> 00:23:08,720
windows has messed up windows update and

605
00:23:08,720 --> 00:23:11,679
you're refreshing from before the update

606
00:23:11,679 --> 00:23:14,559
that's a volume shadow copy

607
00:23:14,559 --> 00:23:16,159
it's just a backup of your machine from

608
00:23:16,159 --> 00:23:18,559
a previous point in time

609
00:23:18,559 --> 00:23:21,760
so if your ntds file is locked as always

610
00:23:21,760 --> 00:23:23,679
in use

611
00:23:23,679 --> 00:23:26,960
why not just steal one of the

612
00:23:26,960 --> 00:23:29,600
backups and take it from there where it

613
00:23:29,600 --> 00:23:31,520
isn't in use

614
00:23:31,520 --> 00:23:32,960
and this is probably the second most

615
00:23:32,960 --> 00:23:35,120
common i've seen you've got here where

616
00:23:35,120 --> 00:23:38,480
they have just taken the latest shadow

617
00:23:38,480 --> 00:23:40,559
copy shadow copy one

618
00:23:40,559 --> 00:23:43,360
taken and just copied the ntds file out

619
00:23:43,360 --> 00:23:45,440
of it into windows 10 and then you've

620
00:23:45,440 --> 00:23:48,240
got a copy of it you can export to your

621
00:23:48,240 --> 00:23:50,080
own machine and do whatever cracking you

622
00:23:50,080 --> 00:23:52,399
want

623
00:23:52,880 --> 00:23:56,080
and elsasas.exe this is one of the very

624
00:23:56,080 --> 00:24:00,240
common credential theft methods

625
00:24:00,480 --> 00:24:01,440
so

626
00:24:01,440 --> 00:24:02,799
i mentioned a number of things that are

627
00:24:02,799 --> 00:24:05,440
stored in memory of this process

628
00:24:05,440 --> 00:24:06,960
um

629
00:24:06,960 --> 00:24:09,440
one way to get at that is to dump the

630
00:24:09,440 --> 00:24:11,520
memory of that process through various

631
00:24:11,520 --> 00:24:13,440
debugging methods then you've just got a

632
00:24:13,440 --> 00:24:16,080
big chunk of memory that has your hashes

633
00:24:16,080 --> 00:24:18,080
stored in it or even plain text

634
00:24:18,080 --> 00:24:20,960
passwords sometimes

635
00:24:20,960 --> 00:24:22,799
there's many tools to do this um open

636
00:24:22,799 --> 00:24:25,279
source ones there's about four or five

637
00:24:25,279 --> 00:24:27,279
in cali i think proc dumps the most

638
00:24:27,279 --> 00:24:29,039
common it was

639
00:24:29,039 --> 00:24:30,880
a lot of people say it was built by

640
00:24:30,880 --> 00:24:32,480
microsoft but

641
00:24:32,480 --> 00:24:34,559
um another classic microsoft trick

642
00:24:34,559 --> 00:24:36,720
someone else built it so they hired that

643
00:24:36,720 --> 00:24:39,919
person now it's microsoft's

644
00:24:39,919 --> 00:24:40,960
um

645
00:24:40,960 --> 00:24:43,279
that goes for the entire sysinternal

646
00:24:43,279 --> 00:24:45,600
suite

647
00:24:45,600 --> 00:24:48,480
it's very simple you say proc dump your

648
00:24:48,480 --> 00:24:50,559
point at lsas

649
00:24:50,559 --> 00:24:53,200
you give it a file name and then you

650
00:24:53,200 --> 00:24:57,440
accept the healer because we're all good

651
00:24:57,440 --> 00:24:59,360
we're all good threat actors who accept

652
00:24:59,360 --> 00:25:02,159
the terms and conditions

653
00:25:02,159 --> 00:25:04,400
but there are other methods that are

654
00:25:04,400 --> 00:25:07,760
coming into use because

655
00:25:07,760 --> 00:25:10,799
pointing sysinternals tools and lsas

656
00:25:10,799 --> 00:25:13,600
even if you rename them it's getting

657
00:25:13,600 --> 00:25:16,279
very easy to detect really um com

658
00:25:16,279 --> 00:25:18,640
services.dll is another built-in thing

659
00:25:18,640 --> 00:25:19,919
into windows

660
00:25:19,919 --> 00:25:23,120
this is a dll that contains various

661
00:25:23,120 --> 00:25:25,760
functions for running com objects

662
00:25:25,760 --> 00:25:28,640
usually custom com objects

663
00:25:28,640 --> 00:25:29,520
there's

664
00:25:29,520 --> 00:25:32,320
basically no documentation about this in

665
00:25:32,320 --> 00:25:35,200
any microsoft site anywhere so when it

666
00:25:35,200 --> 00:25:37,440
turned out to have a

667
00:25:37,440 --> 00:25:40,400
function in it called minidump that just

668
00:25:40,400 --> 00:25:42,559
dumped the memory of any process

669
00:25:42,559 --> 00:25:43,440
with

670
00:25:43,440 --> 00:25:44,799
and you don't even need to install

671
00:25:44,799 --> 00:25:47,440
sysinternals tools to get it on every

672
00:25:47,440 --> 00:25:49,200
machine by default

673
00:25:49,200 --> 00:25:50,240
um

674
00:25:50,240 --> 00:25:52,159
it became very common

675
00:25:52,159 --> 00:25:54,640
starting the end i first saw it start

676
00:25:54,640 --> 00:25:58,480
the end of 2019 around september

677
00:25:58,480 --> 00:26:00,559
then it was kind of quiet for a few

678
00:26:00,559 --> 00:26:03,919
months and then starting 2020 basically

679
00:26:03,919 --> 00:26:07,120
every x every compromise was using this

680
00:26:07,120 --> 00:26:10,320
instead of proc dump

681
00:26:10,320 --> 00:26:12,480
um there are actually other

682
00:26:12,480 --> 00:26:13,840
things that are built into windows as

683
00:26:13,840 --> 00:26:15,760
well it seems every few weeks somebody

684
00:26:15,760 --> 00:26:18,799
finds a new debugging tool for

685
00:26:18,799 --> 00:26:20,240
net or

686
00:26:20,240 --> 00:26:21,840
something that's built into windows that

687
00:26:21,840 --> 00:26:24,480
has the functionality to dump memory so

688
00:26:24,480 --> 00:26:26,080
there's a lot of different ways to do it

689
00:26:26,080 --> 00:26:27,679
now those are just the two most common

690
00:26:27,679 --> 00:26:29,520
at moment

691
00:26:29,520 --> 00:26:30,799
but if you don't want to dump the

692
00:26:30,799 --> 00:26:32,000
process memory and you have the

693
00:26:32,000 --> 00:26:33,919
privilege to do so you can just read it

694
00:26:33,919 --> 00:26:35,840
live from the process

695
00:26:35,840 --> 00:26:38,720
this is what mimikatz traditionally does

696
00:26:38,720 --> 00:26:41,200
so in your reports where it says

697
00:26:41,200 --> 00:26:43,520
you know they did a mimikatz it's most

698
00:26:43,520 --> 00:26:46,080
likely them talking about

699
00:26:46,080 --> 00:26:49,679
reading the credentials out of lsas

700
00:26:49,679 --> 00:26:50,840
while it's running

701
00:26:50,840 --> 00:26:54,720
live but there are some other cases um

702
00:26:54,720 --> 00:26:59,600
wce windows credential editor and um

703
00:26:59,600 --> 00:27:01,360
if you're listening to this presentation

704
00:27:01,360 --> 00:27:07,039
in 2008 there's pwdump 6 as well

705
00:27:07,039 --> 00:27:08,480
so the two

706
00:27:08,480 --> 00:27:10,400
places you can read it live from

707
00:27:10,400 --> 00:27:13,600
at ring three sort of regular user level

708
00:27:13,600 --> 00:27:16,559
if you have the se debug privilege in

709
00:27:16,559 --> 00:27:19,039
your security token or in your logon

710
00:27:19,039 --> 00:27:22,159
then your admin account can grant you

711
00:27:22,159 --> 00:27:25,039
that then you can just open the process

712
00:27:25,039 --> 00:27:27,919
as a debugger

713
00:27:28,240 --> 00:27:32,000
and as ring zero you can use a driver to

714
00:27:32,000 --> 00:27:34,080
directly access the memory and that's

715
00:27:34,080 --> 00:27:35,840
similar to the ntds thing where it gets

716
00:27:35,840 --> 00:27:38,000
around a lot of the security api

717
00:27:38,000 --> 00:27:40,720
functionality

718
00:27:41,679 --> 00:27:45,520
and here's an example from

719
00:27:47,279 --> 00:27:48,640
as you can see it's been two years since

720
00:27:48,640 --> 00:27:50,559
i took this two and a half years

721
00:27:50,559 --> 00:27:53,120
but it's one dll-32 so i'm almost 100

722
00:27:53,120 --> 00:27:55,679
sure that's cobalt strike because they

723
00:27:55,679 --> 00:27:58,000
love injecting into a new copy of run

724
00:27:58,000 --> 00:28:01,360
dll32 and that's

725
00:28:01,360 --> 00:28:03,360
um an injection

726
00:28:03,360 --> 00:28:05,679
live into lsas that's the ring three

727
00:28:05,679 --> 00:28:07,279
thing i was talking about they've opened

728
00:28:07,279 --> 00:28:09,279
it up as a debugger and you can see that

729
00:28:09,279 --> 00:28:12,480
it's reading memory from um injecting

730
00:28:12,480 --> 00:28:14,399
memory into it that just

731
00:28:14,399 --> 00:28:16,480
has a little memory reader that they're

732
00:28:16,480 --> 00:28:18,880
sticking in

733
00:28:19,440 --> 00:28:21,600
uh

734
00:28:21,600 --> 00:28:23,120
now i mentioned that some other

735
00:28:23,120 --> 00:28:26,000
authentication types are storing stuff

736
00:28:26,000 --> 00:28:28,720
as plain text in lsas i mentioned the

737
00:28:28,720 --> 00:28:31,440
three things and three other hashtags at

738
00:28:31,440 --> 00:28:34,640
the start w digest terminal services and

739
00:28:34,640 --> 00:28:37,600
live ssp because those are the

740
00:28:37,600 --> 00:28:40,080
culprits in this case

741
00:28:40,080 --> 00:28:42,880
you'll notice that um they say pre 2017

742
00:28:42,880 --> 00:28:47,520
there that's because in that kb patch

743
00:28:47,520 --> 00:28:49,600
in september 2017

744
00:28:49,600 --> 00:28:51,760
all those clear texts

745
00:28:51,760 --> 00:28:55,279
things were removed from lsas except w

746
00:28:55,279 --> 00:28:57,440
digest because people still use server

747
00:28:57,440 --> 00:28:59,440
2003

748
00:28:59,440 --> 00:29:01,679
but the same patch introduced a

749
00:29:01,679 --> 00:29:03,919
registered value that says do you want

750
00:29:03,919 --> 00:29:06,720
to use w digest which is good

751
00:29:06,720 --> 00:29:08,880
it's zero by default so by default

752
00:29:08,880 --> 00:29:11,440
nobody's using w digest

753
00:29:11,440 --> 00:29:12,640
unfortunately

754
00:29:12,640 --> 00:29:14,799
attackers realize they can just

755
00:29:14,799 --> 00:29:16,880
flick that zero to a one and everyone

756
00:29:16,880 --> 00:29:18,559
starts using w digest again so you've

757
00:29:18,559 --> 00:29:20,480
got all the plain text in

758
00:29:20,480 --> 00:29:22,159
lsas once more

759
00:29:22,159 --> 00:29:23,679
that's a bit of an inconvenience for the

760
00:29:23,679 --> 00:29:26,080
attacker because once they do that they

761
00:29:26,080 --> 00:29:27,919
then need to wait for people to log in

762
00:29:27,919 --> 00:29:31,840
to get those things put into alsace but

763
00:29:31,840 --> 00:29:33,360
really for most attackers they've got

764
00:29:33,360 --> 00:29:35,120
nothing but time once they're in the

765
00:29:35,120 --> 00:29:37,600
environment

766
00:29:37,919 --> 00:29:40,559
now i do want to apologize to whoever

767
00:29:40,559 --> 00:29:42,480
made this because

768
00:29:42,480 --> 00:29:44,799
i did have credit for it before but when

769
00:29:44,799 --> 00:29:46,000
moving

770
00:29:46,000 --> 00:29:48,799
from one computer to another computer

771
00:29:48,799 --> 00:29:50,320
it doesn't have the

772
00:29:50,320 --> 00:29:51,840
credit on it anymore but this is

773
00:29:51,840 --> 00:29:55,279
essentially a summary in table format of

774
00:29:55,279 --> 00:29:56,320
what

775
00:29:56,320 --> 00:29:59,840
things are stored in elsa's memory

776
00:29:59,840 --> 00:30:02,080
in which operating system

777
00:30:02,080 --> 00:30:04,960
um so yeah apologies to whoever it was i

778
00:30:04,960 --> 00:30:06,799
accidentally cut the bottom of the qr

779
00:30:06,799 --> 00:30:09,840
code off

780
00:30:10,240 --> 00:30:11,360
and

781
00:30:11,360 --> 00:30:13,679
i'll move on

782
00:30:13,679 --> 00:30:16,000
so what now we have i've talked about

783
00:30:16,000 --> 00:30:18,240
taking the hashes but what do we

784
00:30:18,240 --> 00:30:20,840
actually do with them once we have

785
00:30:20,840 --> 00:30:23,120
them we have the hashes we don't have

786
00:30:23,120 --> 00:30:24,880
the clear text password so what can we

787
00:30:24,880 --> 00:30:26,320
do

788
00:30:26,320 --> 00:30:27,559
there's a

789
00:30:27,559 --> 00:30:30,720
smorgasbord i like that word of various

790
00:30:30,720 --> 00:30:32,960
hash cracking tools out there there's at

791
00:30:32,960 --> 00:30:35,520
least three in cali alone

792
00:30:35,520 --> 00:30:37,919
github probably has

793
00:30:37,919 --> 00:30:40,320
infinite war

794
00:30:40,320 --> 00:30:43,120
john the ripper hashgat king and abel

795
00:30:43,120 --> 00:30:44,000
are

796
00:30:44,000 --> 00:30:46,960
classics from various points in history

797
00:30:46,960 --> 00:30:48,960
they all still work because nt hasn't

798
00:30:48,960 --> 00:30:51,279
really changed that much

799
00:30:51,279 --> 00:30:52,559
um

800
00:30:52,559 --> 00:30:54,960
it's mostly rainbow table based cracking

801
00:30:54,960 --> 00:30:57,519
because that's the quickest way to deal

802
00:30:57,519 --> 00:30:59,679
with um unsalted

803
00:30:59,679 --> 00:31:01,519
hashes

804
00:31:01,519 --> 00:31:03,760
uh but yeah that won't work on ms cash

805
00:31:03,760 --> 00:31:05,519
too

806
00:31:05,519 --> 00:31:06,399
but

807
00:31:06,399 --> 00:31:10,240
cracking hashes is a lot of effort and

808
00:31:10,240 --> 00:31:13,039
chances are you're relying on

809
00:31:13,039 --> 00:31:15,679
privileged accounts having bad passwords

810
00:31:15,679 --> 00:31:17,039
to get your

811
00:31:17,039 --> 00:31:20,320
hash cracked nice and quickly

812
00:31:20,320 --> 00:31:22,399
it is a lot of effort

813
00:31:22,399 --> 00:31:24,000
but if you think about how hash based

814
00:31:24,000 --> 00:31:25,919
authentication works

815
00:31:25,919 --> 00:31:28,799
you put your input into the logon screen

816
00:31:28,799 --> 00:31:32,960
it hashes that and sends it to samhive

817
00:31:32,960 --> 00:31:35,279
which has the hash in it

818
00:31:35,279 --> 00:31:37,840
neither side of this equation is using

819
00:31:37,840 --> 00:31:40,720
clear text passwords in any way

820
00:31:40,720 --> 00:31:43,200
and it's just verifying the hash

821
00:31:43,200 --> 00:31:46,880
and we have the hash so do we really

822
00:31:46,880 --> 00:31:48,880
need to get clear text password out

823
00:31:48,880 --> 00:31:49,919
there

824
00:31:49,919 --> 00:31:52,159
uh the answer is no with the pretty

825
00:31:52,159 --> 00:31:54,399
common attack called pass the hash

826
00:31:54,399 --> 00:31:56,320
now this takes advantage of single

827
00:31:56,320 --> 00:31:58,799
sign-on authentication um if i am

828
00:31:58,799 --> 00:32:02,159
logging into a machine

829
00:32:02,159 --> 00:32:04,320
i don't want to have to log in again for

830
00:32:04,320 --> 00:32:06,640
every action i take on that machine

831
00:32:06,640 --> 00:32:08,880
remotely

832
00:32:08,880 --> 00:32:11,120
so you enter the password once and then

833
00:32:11,120 --> 00:32:12,960
for every new interaction you don't need

834
00:32:12,960 --> 00:32:14,880
to reauthenticate

835
00:32:14,880 --> 00:32:16,240
that's because

836
00:32:16,240 --> 00:32:19,679
every logon and every process has a

837
00:32:19,679 --> 00:32:22,720
access token assigned to it so when you

838
00:32:22,720 --> 00:32:23,919
log in

839
00:32:23,919 --> 00:32:26,320
it gives you a token that says

840
00:32:26,320 --> 00:32:28,240
this person has already authenticated

841
00:32:28,240 --> 00:32:31,120
that's who they are

842
00:32:31,200 --> 00:32:33,200
so if we have the hash

843
00:32:33,200 --> 00:32:35,919
the token has the username and the hash

844
00:32:35,919 --> 00:32:38,159
in it to say this is who they say they

845
00:32:38,159 --> 00:32:39,039
are

846
00:32:39,039 --> 00:32:41,200
if we have the hash and we know the

847
00:32:41,200 --> 00:32:42,559
username

848
00:32:42,559 --> 00:32:44,799
then we can create a new process

849
00:32:44,799 --> 00:32:46,960
and then just forge an authentication

850
00:32:46,960 --> 00:32:48,880
token

851
00:32:48,880 --> 00:32:51,120
to say this is the username stick the

852
00:32:51,120 --> 00:32:52,640
hash in we don't know what password is

853
00:32:52,640 --> 00:32:53,760
but we don't need it because we've made

854
00:32:53,760 --> 00:32:55,760
the token that says we've already

855
00:32:55,760 --> 00:32:58,000
authenticated so you just map this

856
00:32:58,000 --> 00:32:59,360
forged token

857
00:32:59,360 --> 00:33:00,960
to the

858
00:33:00,960 --> 00:33:03,440
new process you've created

859
00:33:03,440 --> 00:33:04,720
so

860
00:33:04,720 --> 00:33:06,960
it's small on my screen and take a step

861
00:33:06,960 --> 00:33:08,799
out to point at it

862
00:33:08,799 --> 00:33:11,919
um this is invoke mimikatz which is kind

863
00:33:11,919 --> 00:33:14,799
of just running them cats in

864
00:33:14,799 --> 00:33:17,679
memory from the powerline

865
00:33:17,679 --> 00:33:20,559
post exploitation framework

866
00:33:20,559 --> 00:33:21,679
we can see

867
00:33:21,679 --> 00:33:24,480
that it is doing pth which is past the

868
00:33:24,480 --> 00:33:25,360
hash

869
00:33:25,360 --> 00:33:26,799
all you're doing is pointing the

870
00:33:26,799 --> 00:33:28,559
username pointing the domain you're

871
00:33:28,559 --> 00:33:29,679
attacking

872
00:33:29,679 --> 00:33:35,120
and this is the already stolen ntlt hash

873
00:33:35,120 --> 00:33:36,720
and

874
00:33:36,720 --> 00:33:37,760
really

875
00:33:37,760 --> 00:33:41,279
after that you have the token that says

876
00:33:41,279 --> 00:33:43,360
i have um

877
00:33:43,360 --> 00:33:46,399
access to be this user

878
00:33:46,399 --> 00:33:48,799
um and there's some privileged debug

879
00:33:48,799 --> 00:33:50,480
stuff there that

880
00:33:50,480 --> 00:33:51,760
probably doesn't make sense until the

881
00:33:51,760 --> 00:33:53,679
slides after this

882
00:33:53,679 --> 00:33:55,840
so i'll go back in a second

883
00:33:55,840 --> 00:33:56,720
um

884
00:33:56,720 --> 00:33:59,120
so tokens which i mentioned every login

885
00:33:59,120 --> 00:34:02,080
and process gets a security token saying

886
00:34:02,080 --> 00:34:04,090
who they are what um

887
00:34:04,090 --> 00:34:05,840
[Music]

888
00:34:05,840 --> 00:34:08,560
context they have and what privileges

889
00:34:08,560 --> 00:34:10,960
they have so that happens when you log

890
00:34:10,960 --> 00:34:13,199
in and then other privileges can be

891
00:34:13,199 --> 00:34:15,599
assigned to you afterwards that will

892
00:34:15,599 --> 00:34:17,760
update your token

893
00:34:17,760 --> 00:34:19,280
there are two

894
00:34:19,280 --> 00:34:21,280
important types of token to think about

895
00:34:21,280 --> 00:34:22,879
as well as just the ones that say who

896
00:34:22,879 --> 00:34:26,480
you are impersonate and delegate

897
00:34:26,480 --> 00:34:28,639
um to have either of these

898
00:34:28,639 --> 00:34:31,359
assigned to you you need to have this

899
00:34:31,359 --> 00:34:33,918
privilege but any admin account can do

900
00:34:33,918 --> 00:34:36,480
it and any admin account can also add

901
00:34:36,480 --> 00:34:38,239
this privilege to your normal account as

902
00:34:38,239 --> 00:34:40,239
well so if you already have the access

903
00:34:40,239 --> 00:34:41,520
you can just

904
00:34:41,520 --> 00:34:43,599
give it to yourself so it's not a huge

905
00:34:43,599 --> 00:34:45,440
roadblock

906
00:34:45,440 --> 00:34:49,199
the impersonate token allows you to

907
00:34:49,199 --> 00:34:51,839
essentially shift your token locally it

908
00:34:51,839 --> 00:34:54,000
allows you to impersonate another

909
00:34:54,000 --> 00:34:55,119
account

910
00:34:55,119 --> 00:34:57,440
on your local machine

911
00:34:57,440 --> 00:34:59,280
delegate is

912
00:34:59,280 --> 00:35:01,599
basically the same thing but across the

913
00:35:01,599 --> 00:35:04,000
network not just on your

914
00:35:04,000 --> 00:35:06,640
one host

915
00:35:07,119 --> 00:35:08,560
um one important thing to know about

916
00:35:08,560 --> 00:35:11,040
tokens is they only exist during your

917
00:35:11,040 --> 00:35:13,440
login session once you log out

918
00:35:13,440 --> 00:35:14,720
they get

919
00:35:14,720 --> 00:35:17,839
cleaned away by the operating system

920
00:35:17,839 --> 00:35:20,800
which is

921
00:35:20,800 --> 00:35:22,800
again not a huge roadblock for a an

922
00:35:22,800 --> 00:35:26,560
attacker but it will put some um

923
00:35:26,560 --> 00:35:28,960
time into their

924
00:35:28,960 --> 00:35:31,280
playbook because they may need to once

925
00:35:31,280 --> 00:35:32,720
they get onto a host

926
00:35:32,720 --> 00:35:34,720
and have the ability to steal tokens

927
00:35:34,720 --> 00:35:36,800
they may have to wait for whoever they

928
00:35:36,800 --> 00:35:39,040
want to steal the token from to log in

929
00:35:39,040 --> 00:35:40,880
for it to appear

930
00:35:40,880 --> 00:35:42,560
um i didn't put it in the slide but one

931
00:35:42,560 --> 00:35:44,880
of the most common things problems i see

932
00:35:44,880 --> 00:35:48,240
with tokens is rdp logons so if you

933
00:35:48,240 --> 00:35:50,079
remotely log into

934
00:35:50,079 --> 00:35:52,480
a machine with rdp

935
00:35:52,480 --> 00:35:54,560
and you press the x button when you're

936
00:35:54,560 --> 00:35:55,680
done

937
00:35:55,680 --> 00:35:56,880
that doesn't

938
00:35:56,880 --> 00:35:58,480
that doesn't log you out that doesn't

939
00:35:58,480 --> 00:36:01,760
close your connection that just shuts

940
00:36:01,760 --> 00:36:03,599
the screen you're still logged in on the

941
00:36:03,599 --> 00:36:04,480
machine

942
00:36:04,480 --> 00:36:06,400
which means your token still exists so

943
00:36:06,400 --> 00:36:08,079
if you're an admin and you don't log out

944
00:36:08,079 --> 00:36:10,160
when you're done you just close it that

945
00:36:10,160 --> 00:36:11,839
admin token is still sitting on the

946
00:36:11,839 --> 00:36:13,200
machine for

947
00:36:13,200 --> 00:36:14,800
however long

948
00:36:14,800 --> 00:36:16,000
um

949
00:36:16,000 --> 00:36:18,160
microsoft kind of wised up to how many

950
00:36:18,160 --> 00:36:20,400
people were forgetting to log out so

951
00:36:20,400 --> 00:36:23,359
there's now a default expiry time so if

952
00:36:23,359 --> 00:36:24,160
you

953
00:36:24,160 --> 00:36:26,720
your rdp session hasn't been used in x

954
00:36:26,720 --> 00:36:28,400
amount of time it logs you out by

955
00:36:28,400 --> 00:36:29,359
default

956
00:36:29,359 --> 00:36:31,040
pretty much

957
00:36:31,040 --> 00:36:34,880
pretty much solely to avoid this issue

958
00:36:35,440 --> 00:36:37,440
um

959
00:36:37,440 --> 00:36:38,839
yeah so that's just

960
00:36:38,839 --> 00:36:41,520
a picture of it i'll go back to this

961
00:36:41,520 --> 00:36:45,040
because we have privilege debug this is

962
00:36:45,040 --> 00:36:46,960
the um

963
00:36:46,960 --> 00:36:49,200
essentially giving you the access after

964
00:36:49,200 --> 00:36:49,920
you've

965
00:36:49,920 --> 00:36:53,119
done past the hash to

966
00:36:53,440 --> 00:36:55,599
assigning the debug privilege to the

967
00:36:55,599 --> 00:36:57,920
token that they've just created

968
00:36:57,920 --> 00:37:00,240
so that's then what they're going to use

969
00:37:00,240 --> 00:37:01,839
for

970
00:37:01,839 --> 00:37:03,680
it

971
00:37:03,680 --> 00:37:05,760
it's a bit mind-boggling if this is your

972
00:37:05,760 --> 00:37:08,160
first step into it but think of it as a

973
00:37:08,160 --> 00:37:10,160
chain of actions they've passed the hash

974
00:37:10,160 --> 00:37:11,280
to

975
00:37:11,280 --> 00:37:14,240
get into a user account and then they

976
00:37:14,240 --> 00:37:16,240
are assigning new

977
00:37:16,240 --> 00:37:19,119
um privileges to the token they just

978
00:37:19,119 --> 00:37:22,119
created

979
00:37:26,400 --> 00:37:29,359
um now tickets kerberos

980
00:37:29,359 --> 00:37:32,320
the other authentication method so

981
00:37:32,320 --> 00:37:33,920
this is going to be a whirlwind tour

982
00:37:33,920 --> 00:37:35,359
through kerberos because about three

983
00:37:35,359 --> 00:37:36,880
people in the world fully understand

984
00:37:36,880 --> 00:37:40,640
kerberos and two of them are retired so

985
00:37:40,640 --> 00:37:43,200
the idea is that your red bit at the

986
00:37:43,200 --> 00:37:45,680
start is first i want to access services

987
00:37:45,680 --> 00:37:47,280
on server b

988
00:37:47,280 --> 00:37:49,599
i reach out the domain controller for an

989
00:37:49,599 --> 00:37:52,560
authentication request to say i am keith

990
00:37:52,560 --> 00:37:55,839
it then verifies me with the tgs it's

991
00:37:55,839 --> 00:37:57,200
sort of hash based authentication

992
00:37:57,200 --> 00:37:59,680
between you and the domain controller

993
00:37:59,680 --> 00:38:02,320
if all is good it gives you a ticket

994
00:38:02,320 --> 00:38:05,200
granting tickets the tgt from here on

995
00:38:05,200 --> 00:38:06,079
out

996
00:38:06,079 --> 00:38:08,640
then i send ddt

997
00:38:08,640 --> 00:38:10,640
off to the domain controller saying i

998
00:38:10,640 --> 00:38:13,280
want this service from server b

999
00:38:13,280 --> 00:38:15,520
the domain controller then

1000
00:38:15,520 --> 00:38:17,440
works out whether you have the

1001
00:38:17,440 --> 00:38:21,280
permissions to access that service

1002
00:38:21,280 --> 00:38:24,240
once it approves you it gives you the

1003
00:38:24,240 --> 00:38:26,400
approval back and you can then use that

1004
00:38:26,400 --> 00:38:29,760
approval with server b and do whatever

1005
00:38:29,760 --> 00:38:33,359
it is you want to do

1006
00:38:33,359 --> 00:38:33,700
um

1007
00:38:33,700 --> 00:38:35,520
[Music]

1008
00:38:35,520 --> 00:38:36,480
yeah i'm not going to go into the

1009
00:38:36,480 --> 00:38:38,000
details of the encryption behind it

1010
00:38:38,000 --> 00:38:40,000
because

1011
00:38:40,000 --> 00:38:41,520
i'm already 40 minutes in and i don't

1012
00:38:41,520 --> 00:38:43,680
want to do maths

1013
00:38:43,680 --> 00:38:45,359
so your tgt that you've just been

1014
00:38:45,359 --> 00:38:47,920
assigned by the domain controller

1015
00:38:47,920 --> 00:38:50,800
lives for 10 hours by default that's the

1016
00:38:50,800 --> 00:38:52,560
default group policy

1017
00:38:52,560 --> 00:38:54,800
thing so for 10 hours after you have

1018
00:38:54,800 --> 00:38:56,480
been authenticated by the domain

1019
00:38:56,480 --> 00:38:58,720
controller it's going to allow you to

1020
00:38:58,720 --> 00:39:01,440
request access to services from the

1021
00:39:01,440 --> 00:39:03,440
domain controller

1022
00:39:03,440 --> 00:39:05,359
access yeah access to the ticket means

1023
00:39:05,359 --> 00:39:10,078
you are pre-authenticated as that user

1024
00:39:10,960 --> 00:39:13,680
so these tickets are stored in elsa's

1025
00:39:13,680 --> 00:39:16,079
memory until that ticket expires at

1026
00:39:16,079 --> 00:39:18,400
which point they're cleaned away and

1027
00:39:18,400 --> 00:39:20,000
even if you could steal them you don't

1028
00:39:20,000 --> 00:39:23,040
want to you can't use them

1029
00:39:23,119 --> 00:39:26,800
you have a similar attack to

1030
00:39:26,800 --> 00:39:29,200
pass the hash which is pass the ticket

1031
00:39:29,200 --> 00:39:30,000
where

1032
00:39:30,000 --> 00:39:33,119
you know you can steal the um kerberos

1033
00:39:33,119 --> 00:39:36,240
ticket out of lsas and since you're

1034
00:39:36,240 --> 00:39:37,920
pre-authenticated you can just use that

1035
00:39:37,920 --> 00:39:40,320
ticket you've taken to say i'm already

1036
00:39:40,320 --> 00:39:42,720
authenticated don't bother asking me any

1037
00:39:42,720 --> 00:39:44,560
questions

1038
00:39:44,560 --> 00:39:45,760
but

1039
00:39:45,760 --> 00:39:48,480
that means you can impersonate one user

1040
00:39:48,480 --> 00:39:49,839
for 10 hours

1041
00:39:49,839 --> 00:39:51,280
which

1042
00:39:51,280 --> 00:39:53,040
it isn't really that impressive i'm sure

1043
00:39:53,040 --> 00:39:56,759
we can do better than that

1044
00:39:59,280 --> 00:40:01,920
so kerberos sting

1045
00:40:01,920 --> 00:40:04,400
any domain user can request access to a

1046
00:40:04,400 --> 00:40:06,960
server essentially because that yellow

1047
00:40:06,960 --> 00:40:08,960
chunk of the authentication process is

1048
00:40:08,960 --> 00:40:10,480
where the permissions were actually

1049
00:40:10,480 --> 00:40:12,480
verified whether you should have access

1050
00:40:12,480 --> 00:40:14,160
to that service you're still requesting

1051
00:40:14,160 --> 00:40:16,640
the tgt first

1052
00:40:16,640 --> 00:40:20,720
so any user can request any service

1053
00:40:20,960 --> 00:40:24,880
the tgt has a non-salted password hash

1054
00:40:24,880 --> 00:40:27,040
for the service accounts in it that

1055
00:40:27,040 --> 00:40:29,760
you're trying to request

1056
00:40:29,760 --> 00:40:30,800
so

1057
00:40:30,800 --> 00:40:33,119
you are getting back a hash for the

1058
00:40:33,119 --> 00:40:35,839
server service account

1059
00:40:35,839 --> 00:40:37,119
um

1060
00:40:37,119 --> 00:40:39,280
when requesting the tickets

1061
00:40:39,280 --> 00:40:41,119
there is an option in it that allows you

1062
00:40:41,119 --> 00:40:45,680
to request which cipher that hash is

1063
00:40:45,839 --> 00:40:47,920
basically encrypted with which includes

1064
00:40:47,920 --> 00:40:49,680
rc4 which is

1065
00:40:49,680 --> 00:40:52,720
pretty well broken at this time

1066
00:40:52,720 --> 00:40:53,760
so

1067
00:40:53,760 --> 00:40:55,280
if you can take that ticket and you can

1068
00:40:55,280 --> 00:40:57,839
take the details out of the ticket

1069
00:40:57,839 --> 00:40:59,760
onto your own machine

1070
00:40:59,760 --> 00:41:01,119
you can essentially perform a brute

1071
00:41:01,119 --> 00:41:03,920
force on the accounts because you're

1072
00:41:03,920 --> 00:41:07,040
offline there's no restrictions on how

1073
00:41:07,040 --> 00:41:09,440
many attempts you can have if i was

1074
00:41:09,440 --> 00:41:10,960
trying to do a login screen it would

1075
00:41:10,960 --> 00:41:13,200
lock me out after five attempts if i

1076
00:41:13,200 --> 00:41:15,440
take it from here i can stick whatever

1077
00:41:15,440 --> 00:41:18,960
rig i want to blitz through it

1078
00:41:18,960 --> 00:41:21,280
and service accounts remember at the

1079
00:41:21,280 --> 00:41:23,520
start i said every action windows is

1080
00:41:23,520 --> 00:41:25,760
tied to a service

1081
00:41:25,760 --> 00:41:28,160
that includes all your services so if i

1082
00:41:28,160 --> 00:41:30,680
have an account called

1083
00:41:30,680 --> 00:41:34,160
svc0365 automations all the office 365

1084
00:41:34,160 --> 00:41:36,400
automations probably running under that

1085
00:41:36,400 --> 00:41:38,640
service account

1086
00:41:38,640 --> 00:41:41,119
and they're usually high privileged

1087
00:41:41,119 --> 00:41:42,960
because maybe we've got multiple office

1088
00:41:42,960 --> 00:41:45,520
365 servers now take a lot of effort to

1089
00:41:45,520 --> 00:41:47,280
you know locally

1090
00:41:47,280 --> 00:41:48,720
all the authentication for all of them

1091
00:41:48,720 --> 00:41:50,960
so just make service account domain

1092
00:41:50,960 --> 00:41:53,680
admin it'll be fine

1093
00:41:53,680 --> 00:41:56,800
and yeah compared to um

1094
00:41:56,800 --> 00:41:59,280
your user accounts they're usually not

1095
00:41:59,280 --> 00:42:02,400
really paid attention to because

1096
00:42:02,400 --> 00:42:05,119
nobody theoretically owns them

1097
00:42:05,119 --> 00:42:07,280
whoever runs the service owns them but

1098
00:42:07,280 --> 00:42:08,720
they've got their user accounts to deal

1099
00:42:08,720 --> 00:42:10,879
with

1100
00:42:11,280 --> 00:42:14,400
and golden ticket is the logical

1101
00:42:14,400 --> 00:42:17,680
conclusion of this chain of thought

1102
00:42:17,680 --> 00:42:20,720
so any action is tied to an account any

1103
00:42:20,720 --> 00:42:23,480
service is tied to a service account

1104
00:42:23,480 --> 00:42:27,440
krbtgt is the service account on pretty

1105
00:42:27,440 --> 00:42:29,440
much every the default service account

1106
00:42:29,440 --> 00:42:32,240
for all active directory domains

1107
00:42:32,240 --> 00:42:35,200
that handles the creation of tgt that is

1108
00:42:35,200 --> 00:42:37,839
a service therefore it has an account

1109
00:42:37,839 --> 00:42:38,640
so

1110
00:42:38,640 --> 00:42:40,800
if we take the password of that and then

1111
00:42:40,800 --> 00:42:43,040
you crack it through curb roasting or if

1112
00:42:43,040 --> 00:42:45,839
you steal ntds that has the password for

1113
00:42:45,839 --> 00:42:47,839
everyone that has the hash for everyone

1114
00:42:47,839 --> 00:42:50,240
including all the service accounts

1115
00:42:50,240 --> 00:42:52,800
you then have access to the account that

1116
00:42:52,800 --> 00:42:54,319
creates

1117
00:42:54,319 --> 00:42:56,160
the authentication tickets

1118
00:42:56,160 --> 00:42:59,599
so you can make tickets for any account

1119
00:42:59,599 --> 00:43:00,880
as you want that gives you

1120
00:43:00,880 --> 00:43:02,960
pre-authentication

1121
00:43:02,960 --> 00:43:04,720
and um

1122
00:43:04,720 --> 00:43:06,240
i mentioned that there are 10 hours by

1123
00:43:06,240 --> 00:43:08,400
default but since you can create the

1124
00:43:08,400 --> 00:43:11,280
tickets just make it 20 years why not

1125
00:43:11,280 --> 00:43:13,680
domain admin 20 years windows isn't

1126
00:43:13,680 --> 00:43:16,160
going to even blink an eye just creates

1127
00:43:16,160 --> 00:43:19,759
it gives it to you um

1128
00:43:20,640 --> 00:43:22,640
and there you go we've had cases where

1129
00:43:22,640 --> 00:43:24,400
um

1130
00:43:24,400 --> 00:43:27,040
with evicted well someone has attempted

1131
00:43:27,040 --> 00:43:29,280
to evict the attacker and they've just

1132
00:43:29,280 --> 00:43:30,880
logged straight back in because they've

1133
00:43:30,880 --> 00:43:33,760
still got a 20-year old a 20-year

1134
00:43:33,760 --> 00:43:35,200
lasting

1135
00:43:35,200 --> 00:43:37,359
ttt ticket

1136
00:43:37,359 --> 00:43:39,680
so we've kicked the attacker out they've

1137
00:43:39,680 --> 00:43:41,440
they're still technically logged in so

1138
00:43:41,440 --> 00:43:44,400
they just come right back

1139
00:43:44,800 --> 00:43:48,240
and yeah if admin access is lost because

1140
00:43:48,240 --> 00:43:48,960
the

1141
00:43:48,960 --> 00:43:50,880
um victim twigs

1142
00:43:50,880 --> 00:43:53,440
then you've still got the ticket that's

1143
00:43:53,440 --> 00:43:55,200
valid and you just do pass the ticket to

1144
00:43:55,200 --> 00:43:57,040
get back in and

1145
00:43:57,040 --> 00:43:58,720
you get your claws stuck into the

1146
00:43:58,720 --> 00:44:01,359
network again

1147
00:44:01,520 --> 00:44:03,839
so those are a variety of details and

1148
00:44:03,839 --> 00:44:07,440
i'm going to try and zoom in with

1149
00:44:07,440 --> 00:44:09,359
a touchpad as opposed to the mouse that

1150
00:44:09,359 --> 00:44:11,440
i forgot to bring so this is an example

1151
00:44:11,440 --> 00:44:13,760
of a number of steps

1152
00:44:13,760 --> 00:44:17,040
from a genuine

1153
00:44:17,119 --> 00:44:19,040
i think this was ransomware that came in

1154
00:44:19,040 --> 00:44:22,800
through a vmware view server so

1155
00:44:22,800 --> 00:44:26,000
let's go to the start

1156
00:44:26,000 --> 00:44:28,800
here we have

1157
00:44:28,960 --> 00:44:31,920
my laser pointer

1158
00:44:32,000 --> 00:44:34,560
oh it doesn't allow me to laser pointer

1159
00:44:34,560 --> 00:44:38,560
so we have a reverse shell

1160
00:44:38,560 --> 00:44:40,800
built in node here that's the first

1161
00:44:40,800 --> 00:44:43,920
thing that comes out of the exploit so

1162
00:44:43,920 --> 00:44:45,839
the first thing that they do they spin

1163
00:44:45,839 --> 00:44:48,880
up cmd that's the reverse shell

1164
00:44:48,880 --> 00:44:50,560
they run

1165
00:44:50,560 --> 00:44:52,720
a powershell command that's base64

1166
00:44:52,720 --> 00:44:56,880
encoded that command decodes to get ad

1167
00:44:56,880 --> 00:44:59,760
computer filter star sort

1168
00:44:59,760 --> 00:45:01,680
find out details about what accounts are

1169
00:45:01,680 --> 00:45:03,520
around me in the network or what

1170
00:45:03,520 --> 00:45:07,040
computers are around me in the network

1171
00:45:07,040 --> 00:45:10,400
second ipconfig slash all what are the

1172
00:45:10,400 --> 00:45:13,680
interface details of the machine i'm on

1173
00:45:13,680 --> 00:45:15,040
queue user

1174
00:45:15,040 --> 00:45:16,800
um

1175
00:45:16,800 --> 00:45:18,640
q user i think that's working out

1176
00:45:18,640 --> 00:45:20,400
information about either what user

1177
00:45:20,400 --> 00:45:22,319
you're logged in as or

1178
00:45:22,319 --> 00:45:23,920
all of the users that are logged in at

1179
00:45:23,920 --> 00:45:26,880
that time forget which either way it's

1180
00:45:26,880 --> 00:45:28,880
reconnaissance understanding

1181
00:45:28,880 --> 00:45:29,839
what's

1182
00:45:29,839 --> 00:45:33,839
on the machine i've just accessed

1183
00:45:33,839 --> 00:45:36,319
it must be um all accounts are logged in

1184
00:45:36,319 --> 00:45:38,880
because the next step is that they do

1185
00:45:38,880 --> 00:45:42,000
net user vm user to see this one sounds

1186
00:45:42,000 --> 00:45:44,079
interesting what permissions does it

1187
00:45:44,079 --> 00:45:46,640
have funnily enough vm user was a domain

1188
00:45:46,640 --> 00:45:49,359
admin so everything from now on they've

1189
00:45:49,359 --> 00:45:51,599
picked their targets

1190
00:45:51,599 --> 00:45:52,800
we have

1191
00:45:52,800 --> 00:45:55,839
powershell i've um

1192
00:45:55,839 --> 00:45:58,079
redacted the attacker's ip there because

1193
00:45:58,079 --> 00:46:00,400
they did exfiltrate a lot of information

1194
00:46:00,400 --> 00:46:02,880
to it and while i'd hope that

1195
00:46:02,880 --> 00:46:04,240
you know

1196
00:46:04,240 --> 00:46:06,880
five months later it's gone it might not

1197
00:46:06,880 --> 00:46:08,960
so under the risk of any of you trying

1198
00:46:08,960 --> 00:46:10,000
to log into the attacker's

1199
00:46:10,000 --> 00:46:12,000
infrastructure to steal the data it's

1200
00:46:12,000 --> 00:46:12,839
all

1201
00:46:12,839 --> 00:46:16,960
redacted so they downloaded pc.exe from

1202
00:46:16,960 --> 00:46:18,720
a remote source

1203
00:46:18,720 --> 00:46:20,880
now that one is proc dump they

1204
00:46:20,880 --> 00:46:22,240
eventually did it through ngrok the

1205
00:46:22,240 --> 00:46:24,319
first time it was blocked by windows

1206
00:46:24,319 --> 00:46:25,839
defender

1207
00:46:25,839 --> 00:46:26,800
but

1208
00:46:26,800 --> 00:46:29,119
we then see down

1209
00:46:29,119 --> 00:46:30,240
here

1210
00:46:30,240 --> 00:46:34,079
her dump being pointed at elsas

1211
00:46:34,079 --> 00:46:36,000
classic

1212
00:46:36,000 --> 00:46:39,040
then um similar to peter was showing in

1213
00:46:39,040 --> 00:46:40,400
the last talk

1214
00:46:40,400 --> 00:46:42,400
the um

1215
00:46:42,400 --> 00:46:45,119
attacker has then downloaded winscp just

1216
00:46:45,119 --> 00:46:48,720
a bug standards file transfer executable

1217
00:46:48,720 --> 00:46:50,960
to take that lsas dump

1218
00:46:50,960 --> 00:46:53,119
and stick it

1219
00:46:53,119 --> 00:46:56,480
on um an ftp server under the username

1220
00:46:56,480 --> 00:46:59,119
coolboo 20 with

1221
00:46:59,119 --> 00:47:01,200
some password that i can't remember but

1222
00:47:01,200 --> 00:47:02,079
it was

1223
00:47:02,079 --> 00:47:03,920
an equally

1224
00:47:03,920 --> 00:47:07,359
strange choice of password

1225
00:47:08,800 --> 00:47:10,480
now you have

1226
00:47:10,480 --> 00:47:11,760
um

1227
00:47:11,760 --> 00:47:13,440
secretsdump.exe

1228
00:47:13,440 --> 00:47:17,760
which is pulling um elsa secrets out of

1229
00:47:17,760 --> 00:47:20,480
stuff that they have the um machine that

1230
00:47:20,480 --> 00:47:22,000
they have taken

1231
00:47:22,000 --> 00:47:25,839
this one failed a number of times

1232
00:47:26,559 --> 00:47:28,079
to download

1233
00:47:28,079 --> 00:47:31,359
but eventually they landed

1234
00:47:31,359 --> 00:47:32,640
yeah

1235
00:47:32,640 --> 00:47:34,500
eventually they did get um

1236
00:47:34,500 --> 00:47:35,920
[Music]

1237
00:47:35,920 --> 00:47:38,559
xc onto the machine and this is where

1238
00:47:38,559 --> 00:47:41,040
they're doing the hatch you can see that

1239
00:47:41,040 --> 00:47:44,480
they've stolen the hash of vm user from

1240
00:47:44,480 --> 00:47:46,800
the elsas dump

1241
00:47:46,800 --> 00:47:48,880
that's 2241

1242
00:47:48,880 --> 00:47:53,760
and then they used the hash at 22.49

1243
00:47:53,760 --> 00:47:56,079
it wasn't a very good password

1244
00:47:56,079 --> 00:47:59,359
but really that's kind of showing that

1245
00:47:59,359 --> 00:48:00,400
that's

1246
00:48:00,400 --> 00:48:03,040
just over eight minutes they've taken

1247
00:48:03,040 --> 00:48:03,839
from

1248
00:48:03,839 --> 00:48:06,720
stealing the alsace memory dump to

1249
00:48:06,720 --> 00:48:10,959
having the hash of the end user

1250
00:48:11,520 --> 00:48:14,079
then what else did they do

1251
00:48:14,079 --> 00:48:16,480
yeah they

1252
00:48:16,480 --> 00:48:18,880
i think windows defender stumped their

1253
00:48:18,880 --> 00:48:20,319
past the hash attempt for a couple of

1254
00:48:20,319 --> 00:48:22,000
tries

1255
00:48:22,000 --> 00:48:24,160
until they downloaded a different tool

1256
00:48:24,160 --> 00:48:28,160
instead um invoke wmy exec

1257
00:48:28,160 --> 00:48:30,160
and did pass the hash from that instead

1258
00:48:30,160 --> 00:48:32,240
i can't remember which post exploitation

1259
00:48:32,240 --> 00:48:34,319
framework that is it's a different one

1260
00:48:34,319 --> 00:48:37,200
from um impacted though

1261
00:48:37,200 --> 00:48:38,240
i think it's

1262
00:48:38,240 --> 00:48:41,119
power split or power line maybe

1263
00:48:41,119 --> 00:48:44,000
that's me for getting rich

1264
00:48:44,000 --> 00:48:45,200
but yeah

1265
00:48:45,200 --> 00:48:46,960
you can see there that they were

1266
00:48:46,960 --> 00:48:48,480
successful because they stopped

1267
00:48:48,480 --> 00:48:50,240
attempting anything else

1268
00:48:50,240 --> 00:48:51,839
and then they're just doing net group

1269
00:48:51,839 --> 00:48:53,920
domain admins once they have a domain

1270
00:48:53,920 --> 00:48:58,319
admin access to the um domain controller

1271
00:48:58,319 --> 00:48:59,680
that's that's where they're logging into

1272
00:48:59,680 --> 00:49:02,079
the 192.168.1630

1273
00:49:02,079 --> 00:49:04,319
was the domain controller

1274
00:49:04,319 --> 00:49:06,319
and

1275
00:49:06,319 --> 00:49:07,760
once they've got access to that they

1276
00:49:07,760 --> 00:49:10,400
have the permissions to steal the ntds

1277
00:49:10,400 --> 00:49:11,359
file

1278
00:49:11,359 --> 00:49:13,680
and the decision domain the net group

1279
00:49:13,680 --> 00:49:15,520
domain admins to find all the other

1280
00:49:15,520 --> 00:49:17,119
targets that they then want to store the

1281
00:49:17,119 --> 00:49:18,640
hashes of

1282
00:49:18,640 --> 00:49:19,520
um

1283
00:49:19,520 --> 00:49:20,319
now

1284
00:49:20,319 --> 00:49:22,960
what i would like to point out is

1285
00:49:22,960 --> 00:49:26,000
where's the start

1286
00:49:26,160 --> 00:49:30,000
yes so that command shell was spun up at

1287
00:49:30,000 --> 00:49:33,599
22 24 56

1288
00:49:33,599 --> 00:49:36,240
that last command

1289
00:49:36,240 --> 00:49:38,160
was

1290
00:49:38,160 --> 00:49:43,359
22 53 28 so that was

1291
00:49:43,359 --> 00:49:46,800
25 minutes between exploiting a vmware

1292
00:49:46,800 --> 00:49:49,680
review server and having domain admin on

1293
00:49:49,680 --> 00:49:52,079
the domain controller so

1294
00:49:52,079 --> 00:49:54,720
these are

1295
00:49:55,839 --> 00:49:58,400
peter said it best in the last one that

1296
00:49:58,400 --> 00:50:00,160
attackers have

1297
00:50:00,160 --> 00:50:02,720
people they outsource to that are just

1298
00:50:02,720 --> 00:50:05,839
running scripts the conti group leak was

1299
00:50:05,839 --> 00:50:07,280
a great example of that there's just

1300
00:50:07,280 --> 00:50:09,280
playbooks they're following

1301
00:50:09,280 --> 00:50:11,200
all this stuff is

1302
00:50:11,200 --> 00:50:13,440
stuff you could give to essentially

1303
00:50:13,440 --> 00:50:17,440
anyone that can follow a pdf

1304
00:50:17,440 --> 00:50:19,040
it's just

1305
00:50:19,040 --> 00:50:20,960
find users that are logged in

1306
00:50:20,960 --> 00:50:22,319
see if any of them have an interesting

1307
00:50:22,319 --> 00:50:23,760
name

1308
00:50:23,760 --> 00:50:25,520
work out if they're a domain admin if

1309
00:50:25,520 --> 00:50:26,400
yes

1310
00:50:26,400 --> 00:50:28,319
follow these instructions take the hash

1311
00:50:28,319 --> 00:50:30,000
go to the domain controller

1312
00:50:30,000 --> 00:50:30,880
so

1313
00:50:30,880 --> 00:50:32,400
there

1314
00:50:32,400 --> 00:50:34,400
this is very much

1315
00:50:34,400 --> 00:50:36,160
let me get rid of the laser pointer it's

1316
00:50:36,160 --> 00:50:37,920
useless

1317
00:50:37,920 --> 00:50:38,880
um

1318
00:50:38,880 --> 00:50:40,640
it's very much

1319
00:50:40,640 --> 00:50:43,520
a simple process that can be

1320
00:50:43,520 --> 00:50:45,839
done very easily

1321
00:50:45,839 --> 00:50:48,240
um this is a whirlwind tour of the

1322
00:50:48,240 --> 00:50:49,680
basics really it's far from an

1323
00:50:49,680 --> 00:50:51,680
all-inclusive list there are other ways

1324
00:50:51,680 --> 00:50:53,760
of taking things i'm just going to

1325
00:50:53,760 --> 00:50:56,160
briefly run down some of them dc sync is

1326
00:50:56,160 --> 00:50:58,319
the other most common one

1327
00:50:58,319 --> 00:51:00,079
most domains have multiple domain

1328
00:51:00,079 --> 00:51:02,559
controllers it's simple networking

1329
00:51:02,559 --> 00:51:04,480
policy you want redundancy one domain

1330
00:51:04,480 --> 00:51:06,240
controller goes down you've got one as

1331
00:51:06,240 --> 00:51:08,160
backup

1332
00:51:08,160 --> 00:51:10,559
but that means if i change my password

1333
00:51:10,559 --> 00:51:11,599
then it's only going to change the

1334
00:51:11,599 --> 00:51:13,359
password on one domain controller they

1335
00:51:13,359 --> 00:51:15,280
need to have a way of syncing up between

1336
00:51:15,280 --> 00:51:16,240
each other

1337
00:51:16,240 --> 00:51:17,119
so

1338
00:51:17,119 --> 00:51:19,599
dc syncing is regularly or if you

1339
00:51:19,599 --> 00:51:22,240
manually request it they will

1340
00:51:22,240 --> 00:51:24,240
the most recent

1341
00:51:24,240 --> 00:51:26,480
they change domain controller will send

1342
00:51:26,480 --> 00:51:28,400
a copy of the

1343
00:51:28,400 --> 00:51:30,319
stuff it needs to the other domain

1344
00:51:30,319 --> 00:51:32,400
controller

1345
00:51:32,400 --> 00:51:34,480
if you have the nt hash of a domain

1346
00:51:34,480 --> 00:51:37,359
controller machine account you can say

1347
00:51:37,359 --> 00:51:39,440
hey i'm a domain controller

1348
00:51:39,440 --> 00:51:42,319
can i sync please and it will just

1349
00:51:42,319 --> 00:51:44,640
fling you the most recent copy of the

1350
00:51:44,640 --> 00:51:46,240
ntds

1351
00:51:46,240 --> 00:51:46,960
or

1352
00:51:46,960 --> 00:51:51,680
most recent copy of the ad database

1353
00:51:51,680 --> 00:51:53,440
and then there's active directory

1354
00:51:53,440 --> 00:51:56,240
exploits which there's been more of

1355
00:51:56,240 --> 00:51:58,800
recently um zero logon there's a net log

1356
00:51:58,800 --> 00:52:00,559
on vulnerability that allowed you to

1357
00:52:00,559 --> 00:52:02,480
reset arbitrary machine account that

1358
00:52:02,480 --> 00:52:04,960
allowed you to reset arbitrary passwords

1359
00:52:04,960 --> 00:52:06,960
so people were resetting the dc machine

1360
00:52:06,960 --> 00:52:09,200
account password so they could log in as

1361
00:52:09,200 --> 00:52:12,880
the domain controller and dc sync

1362
00:52:12,880 --> 00:52:14,559
no pack

1363
00:52:14,559 --> 00:52:16,160
this one specifically was mentioned by

1364
00:52:16,160 --> 00:52:19,599
peter as actively exploited

1365
00:52:19,599 --> 00:52:21,599
there's kerberos ticket shenanigans that

1366
00:52:21,599 --> 00:52:24,400
allowed you to say hey i am this domain

1367
00:52:24,400 --> 00:52:27,200
controller give me a ticket

1368
00:52:27,200 --> 00:52:29,359
and then you could log in as the domain

1369
00:52:29,359 --> 00:52:32,720
controller machine account and easy sync

1370
00:52:32,720 --> 00:52:33,839
um

1371
00:52:33,839 --> 00:52:35,680
and then there was a more recent one

1372
00:52:35,680 --> 00:52:39,359
digital certificate services and i'm not

1373
00:52:39,359 --> 00:52:41,599
sure i'm gonna have time to go through

1374
00:52:41,599 --> 00:52:44,559
this one so

1375
00:52:45,440 --> 00:52:46,960
yeah if you're interested in that one

1376
00:52:46,960 --> 00:52:48,240
ask me afterwards because i'm just going

1377
00:52:48,240 --> 00:52:50,000
to skip the mitigations part of this

1378
00:52:50,000 --> 00:52:51,680
that was uh if i had time i'll go

1379
00:52:51,680 --> 00:52:52,720
through it

1380
00:52:52,720 --> 00:52:56,319
so mitigations let's start xp because

1381
00:52:56,319 --> 00:52:58,559
lots of people still say that's the best

1382
00:52:58,559 --> 00:53:00,640
um operating system of all time

1383
00:53:00,640 --> 00:53:03,839
it was bad for a credential safety

1384
00:53:03,839 --> 00:53:04,640
like

1385
00:53:04,640 --> 00:53:07,520
really bad it had w digest on by default

1386
00:53:07,520 --> 00:53:11,440
so plain text was in lsas

1387
00:53:11,440 --> 00:53:13,760
your service accounts were essentially

1388
00:53:13,760 --> 00:53:15,280
running a system

1389
00:53:15,280 --> 00:53:17,760
which is the highest level of local

1390
00:53:17,760 --> 00:53:20,000
account privilege because

1391
00:53:20,000 --> 00:53:21,920
there wasn't any other

1392
00:53:21,920 --> 00:53:24,000
account for them to log in as

1393
00:53:24,000 --> 00:53:25,119
there was

1394
00:53:25,119 --> 00:53:26,559
guest and

1395
00:53:26,559 --> 00:53:29,520
everything and nothing in between

1396
00:53:29,520 --> 00:53:30,480
um

1397
00:53:30,480 --> 00:53:31,839
windows 7

1398
00:53:31,839 --> 00:53:34,319
tried to move to a sort of least

1399
00:53:34,319 --> 00:53:35,920
privileged model where everyone's

1400
00:53:35,920 --> 00:53:37,520
running with the least amount of

1401
00:53:37,520 --> 00:53:40,000
privilege they need user access control

1402
00:53:40,000 --> 00:53:42,720
i'm sure everyone recognizes that window

1403
00:53:42,720 --> 00:53:45,040
basically if you are an admin account

1404
00:53:45,040 --> 00:53:47,599
if you log in you aren't logged in as an

1405
00:53:47,599 --> 00:53:50,400
admin you are logged in under user

1406
00:53:50,400 --> 00:53:52,240
privileges and permissions

1407
00:53:52,240 --> 00:53:54,880
until you need an admin permission at

1408
00:53:54,880 --> 00:53:57,119
which point it says do you really want

1409
00:53:57,119 --> 00:53:58,000
this

1410
00:53:58,000 --> 00:54:00,160
process to use admin

1411
00:54:00,160 --> 00:54:04,160
and then everyone clicks yes anyway

1412
00:54:04,160 --> 00:54:05,839
and there were some new built-in

1413
00:54:05,839 --> 00:54:08,559
identities interactive and local service

1414
00:54:08,559 --> 00:54:10,720
and that's for services to get around

1415
00:54:10,720 --> 00:54:12,880
them all running a system they created

1416
00:54:12,880 --> 00:54:14,720
local service for service accounts to

1417
00:54:14,720 --> 00:54:18,720
run as without being an admin

1418
00:54:18,720 --> 00:54:21,040
windows 8 and 8.1 you'll notice it

1419
00:54:21,040 --> 00:54:22,480
didn't really say much about windows 7

1420
00:54:22,480 --> 00:54:24,160
there because all the best things from

1421
00:54:24,160 --> 00:54:25,920
windows 7 when it came to potential

1422
00:54:25,920 --> 00:54:26,960
safety

1423
00:54:26,960 --> 00:54:29,920
started in 8.1 and they then backboarded

1424
00:54:29,920 --> 00:54:32,000
them

1425
00:54:32,000 --> 00:54:34,319
this was really good this was the first

1426
00:54:34,319 --> 00:54:36,240
major step of

1427
00:54:36,240 --> 00:54:38,640
credentialed safety um

1428
00:54:38,640 --> 00:54:41,119
single sign-on things were no longer

1429
00:54:41,119 --> 00:54:43,920
catched in lsat by default that was the

1430
00:54:43,920 --> 00:54:47,280
2017 patch i mentioned earlier

1431
00:54:47,280 --> 00:54:50,079
uh you know you can still switch them on

1432
00:54:50,079 --> 00:54:52,400
yeah attackers can do that but it being

1433
00:54:52,400 --> 00:54:56,160
off by defaults way better than nothing

1434
00:54:56,160 --> 00:54:58,160
uh local accounts can be restricted from

1435
00:54:58,160 --> 00:55:01,359
network logins so you know if you steal

1436
00:55:01,359 --> 00:55:03,920
um local account hashes you can't then

1437
00:55:03,920 --> 00:55:06,880
just log into remote hosts with that

1438
00:55:06,880 --> 00:55:09,680
local information

1439
00:55:09,680 --> 00:55:11,760
and there is protected processes which

1440
00:55:11,760 --> 00:55:15,839
seems almost explicitly made for lsas

1441
00:55:15,839 --> 00:55:18,319
only signed libraries and other

1442
00:55:18,319 --> 00:55:22,480
protected processes can attach to elsas

1443
00:55:22,480 --> 00:55:24,240
so even if you have the debug privilege

1444
00:55:24,240 --> 00:55:25,920
as needed

1445
00:55:25,920 --> 00:55:29,119
you need to be signed or protected to do

1446
00:55:29,119 --> 00:55:33,359
so so that got rid of a lot of the um

1447
00:55:33,359 --> 00:55:36,720
a number of the mimikats and

1448
00:55:36,720 --> 00:55:39,920
lesser known credential dumping tools

1449
00:55:39,920 --> 00:55:43,200
unfortunately this is off by default

1450
00:55:43,200 --> 00:55:44,480
and

1451
00:55:44,480 --> 00:55:46,240
mimikatz got signed driver almost

1452
00:55:46,240 --> 00:55:48,960
immediately so you can still just

1453
00:55:48,960 --> 00:55:51,520
mimic hats

1454
00:55:51,520 --> 00:55:53,359
and then there is restricted admin in

1455
00:55:53,359 --> 00:55:56,160
rdp which essentially

1456
00:55:56,160 --> 00:55:59,119
if this is switched on then rdp

1457
00:55:59,119 --> 00:56:01,359
connections from an admin account will

1458
00:56:01,359 --> 00:56:04,319
explicitly not cash credentials or

1459
00:56:04,319 --> 00:56:06,720
tickets or

1460
00:56:06,720 --> 00:56:11,200
store hash details in lsas

1461
00:56:13,280 --> 00:56:17,040
this was switched on by default

1462
00:56:17,040 --> 00:56:19,200
but the only way for them to stop

1463
00:56:19,200 --> 00:56:21,520
tickets being cached was to say okay if

1464
00:56:21,520 --> 00:56:23,599
it's restricted we'll use nt

1465
00:56:23,599 --> 00:56:25,040
authentication

1466
00:56:25,040 --> 00:56:26,400
which then meant you could just do pass

1467
00:56:26,400 --> 00:56:28,079
the hash attacks on the admins instead

1468
00:56:28,079 --> 00:56:30,960
of pass the ticket so they kind of threw

1469
00:56:30,960 --> 00:56:32,960
their arms up in the air and switched

1470
00:56:32,960 --> 00:56:36,000
that protection off by default

1471
00:56:36,000 --> 00:56:38,319
um they also added domain protected

1472
00:56:38,319 --> 00:56:41,280
users which um was a new security group

1473
00:56:41,280 --> 00:56:43,200
for a high value account so your domain

1474
00:56:43,200 --> 00:56:46,720
admins and stuff and similar to the last

1475
00:56:46,720 --> 00:56:47,520
thing

1476
00:56:47,520 --> 00:56:48,559
they

1477
00:56:48,559 --> 00:56:50,640
basically strengthen

1478
00:56:50,640 --> 00:56:52,400
credential protections for anything

1479
00:56:52,400 --> 00:56:54,079
under this group so you just want to

1480
00:56:54,079 --> 00:56:56,559
stick all your domain admins and domain

1481
00:56:56,559 --> 00:56:58,720
service accounts under this

1482
00:56:58,720 --> 00:57:01,520
it can't use any weak authentication so

1483
00:57:01,520 --> 00:57:03,280
ntlm hashes are

1484
00:57:03,280 --> 00:57:05,359
done you can't do patch the house pass

1485
00:57:05,359 --> 00:57:07,760
the hash because it doesn't allow you to

1486
00:57:07,760 --> 00:57:10,240
use ntlm authentication it's only

1487
00:57:10,240 --> 00:57:12,640
kerberos credentials are never cached

1488
00:57:12,640 --> 00:57:15,280
tokens can't be delegated

1489
00:57:15,280 --> 00:57:17,119
etc

1490
00:57:17,119 --> 00:57:18,160
um

1491
00:57:18,160 --> 00:57:19,359
but because you're not caching any

1492
00:57:19,359 --> 00:57:23,119
credentials it means that if your

1493
00:57:23,119 --> 00:57:25,680
your domain controller goes offline or

1494
00:57:25,680 --> 00:57:27,680
the server that you want to log into

1495
00:57:27,680 --> 00:57:29,599
isn't connected to the internet none of

1496
00:57:29,599 --> 00:57:31,680
the credentials are cached so

1497
00:57:31,680 --> 00:57:34,000
they can't log in

1498
00:57:34,000 --> 00:57:36,079
so that's really a case of security

1499
00:57:36,079 --> 00:57:38,960
versus functionality which

1500
00:57:38,960 --> 00:57:41,680
i think we all know how that ends up

1501
00:57:41,680 --> 00:57:42,559
ah

1502
00:57:42,559 --> 00:57:44,400
windows 10

1503
00:57:44,400 --> 00:57:46,400
was another good one not as big a step

1504
00:57:46,400 --> 00:57:48,720
but a lot of decent things added

1505
00:57:48,720 --> 00:57:50,880
um credential guard

1506
00:57:50,880 --> 00:57:54,000
so elsas is no longer um just

1507
00:57:54,000 --> 00:57:56,160
unexecutable if you have this switched

1508
00:57:56,160 --> 00:57:59,280
on it uses hyper-v for machine

1509
00:57:59,280 --> 00:58:02,480
virtualization so um part of the

1510
00:58:02,480 --> 00:58:05,200
authentication process is essentially

1511
00:58:05,200 --> 00:58:07,359
stuck in our

1512
00:58:07,359 --> 00:58:10,240
own little virtual box that only elsa

1513
00:58:10,240 --> 00:58:12,400
iso can communicate with

1514
00:58:12,400 --> 00:58:13,440
so it's

1515
00:58:13,440 --> 00:58:15,119
really restricting

1516
00:58:15,119 --> 00:58:17,760
the access

1517
00:58:19,040 --> 00:58:20,640
unfortunately mimikatz found a way

1518
00:58:20,640 --> 00:58:22,799
around this as well

1519
00:58:22,799 --> 00:58:23,839
um

1520
00:58:23,839 --> 00:58:26,160
there is the mitigation that

1521
00:58:26,160 --> 00:58:27,119
you

1522
00:58:27,119 --> 00:58:30,079
can only take the hashes

1523
00:58:30,079 --> 00:58:32,960
of accounts that log in after you have

1524
00:58:32,960 --> 00:58:35,680
run the mimikatz function so it is

1525
00:58:35,680 --> 00:58:37,440
affecting it a bit you can still steal

1526
00:58:37,440 --> 00:58:38,960
the hashes but it's a lot more

1527
00:58:38,960 --> 00:58:42,319
inconvenient so it's still very good

1528
00:58:42,319 --> 00:58:44,400
uh remote credential guard

1529
00:58:44,400 --> 00:58:47,359
is basically restricted admin but works

1530
00:58:47,359 --> 00:58:50,079
better

1531
00:58:50,079 --> 00:58:52,799
really the what you want the best

1532
00:58:52,799 --> 00:58:55,280
defense is basic hygiene

1533
00:58:55,280 --> 00:58:56,400
you know

1534
00:58:56,400 --> 00:58:59,520
wash your hands clean your teeth

1535
00:58:59,520 --> 00:59:01,359
don't interactively log into a user

1536
00:59:01,359 --> 00:59:04,000
laptop as the main admin that's a recipe

1537
00:59:04,000 --> 00:59:06,400
for a bad time because you can't really

1538
00:59:06,400 --> 00:59:07,920
control

1539
00:59:07,920 --> 00:59:09,920
most attackers are going to land on user

1540
00:59:09,920 --> 00:59:12,079
laptops first if they're not using an

1541
00:59:12,079 --> 00:59:14,640
exploit on a server

1542
00:59:14,640 --> 00:59:17,040
powershell administration doesn't send

1543
00:59:17,040 --> 00:59:20,559
credentials so don't use rdp if you need

1544
00:59:20,559 --> 00:59:21,680
to

1545
00:59:21,680 --> 00:59:24,240
log into a user laptop as the main admin

1546
00:59:24,240 --> 00:59:25,760
use one of the particular methods that

1547
00:59:25,760 --> 00:59:27,359
doesn't send that information over the

1548
00:59:27,359 --> 00:59:28,400
wire

1549
00:59:28,400 --> 00:59:30,559
and um you know credential guard things

1550
00:59:30,559 --> 00:59:32,559
i just mentioned also work

1551
00:59:32,559 --> 00:59:33,359
um

1552
00:59:33,359 --> 00:59:35,839
as windows 7 tried you want a policy of

1553
00:59:35,839 --> 00:59:38,160
lowest required privilege

1554
00:59:38,160 --> 00:59:40,160
you know

1555
00:59:40,160 --> 00:59:41,280
don't

1556
00:59:41,280 --> 00:59:43,760
if your users most of your users don't

1557
00:59:43,760 --> 00:59:45,440
need local admin why are so many

1558
00:59:45,440 --> 00:59:47,200
companies giving everyone local admin

1559
00:59:47,200 --> 00:59:49,119
permissions on their machine why are you

1560
00:59:49,119 --> 00:59:52,079
checking your emails as an admin why are

1561
00:59:52,079 --> 00:59:54,799
you browsing facebook with admin

1562
00:59:54,799 --> 00:59:57,359
permissions

1563
00:59:58,079 --> 01:00:00,160
um terminate rdp connections when

1564
01:00:00,160 --> 01:00:02,319
finished don't just drop i covered those

1565
01:00:02,319 --> 01:00:05,040
a little bit before

1566
01:00:05,040 --> 01:00:07,760
um keep long passwords particularly on

1567
01:00:07,760 --> 01:00:09,599
your service accounts you're monitoring

1568
01:00:09,599 --> 01:00:12,079
your user accounts more thoroughly than

1569
01:00:12,079 --> 01:00:15,760
your service accounts usually because

1570
01:00:15,760 --> 01:00:17,119
that's just how it works service

1571
01:00:17,119 --> 01:00:19,200
accounts are used everywhere a lot of

1572
01:00:19,200 --> 01:00:21,598
the time

1573
01:00:21,920 --> 01:00:26,240
and yeah while microsoft stopped their

1574
01:00:26,240 --> 01:00:27,920
guidelines saying that you should reset

1575
01:00:27,920 --> 01:00:30,160
user account passwords regularly it's

1576
01:00:30,160 --> 01:00:31,520
still worth changing your service

1577
01:00:31,520 --> 01:00:33,040
account passwords regularly there's a

1578
01:00:33,040 --> 01:00:34,880
lot less inconvenience in doing that

1579
01:00:34,880 --> 01:00:38,319
than changing user account passwords

1580
01:00:38,319 --> 01:00:39,520
and

1581
01:00:39,520 --> 01:00:40,400
the

1582
01:00:40,400 --> 01:00:42,960
classic easier said than done monitor

1583
01:00:42,960 --> 01:00:45,359
for anomalous activity what's anomalous

1584
01:00:45,359 --> 01:00:46,720
activity

1585
01:00:46,720 --> 01:00:48,559
if you can answer that you've solved

1586
01:00:48,559 --> 01:00:51,119
security essentially but um if you're

1587
01:00:51,119 --> 01:00:52,799
seeing a lot of tgt requests from a

1588
01:00:52,799 --> 01:00:54,079
single account

1589
01:00:54,079 --> 01:00:56,799
it's not usually um

1590
01:00:56,799 --> 01:00:59,599
normal behavior for anyone um especially

1591
01:00:59,599 --> 01:01:01,760
if they're being requested with

1592
01:01:01,760 --> 01:01:05,359
um abnormal ciphers rc4 in particular

1593
01:01:05,359 --> 01:01:07,119
usually means somebody's trying to curb

1594
01:01:07,119 --> 01:01:08,839
roost everything that they

1595
01:01:08,839 --> 01:01:11,359
can um

1596
01:01:11,359 --> 01:01:12,799
yeah workstation to work station

1597
01:01:12,799 --> 01:01:14,480
communications

1598
01:01:14,480 --> 01:01:16,799
how many times in your daily work do you

1599
01:01:16,799 --> 01:01:18,480
log into a server

1600
01:01:18,480 --> 01:01:20,160
how many times in your daily work do you

1601
01:01:20,160 --> 01:01:23,280
log into someone else's laptop

1602
01:01:23,280 --> 01:01:25,920
one's a lot more likely than the other

1603
01:01:25,920 --> 01:01:27,680
and yeah keep an eye on your domain

1604
01:01:27,680 --> 01:01:30,880
controllers for what they're doing

1605
01:01:30,880 --> 01:01:33,599
and if you have edrs and you only have a

1606
01:01:33,599 --> 01:01:35,520
limited number of licenses make sure you

1607
01:01:35,520 --> 01:01:37,440
put them on your domain controller first

1608
01:01:37,440 --> 01:01:39,440
there's so many instant response cases

1609
01:01:39,440 --> 01:01:41,520
i've had where we've got perfect

1610
01:01:41,520 --> 01:01:43,920
coverage of the user laptop and we see

1611
01:01:43,920 --> 01:01:46,240
them actually the vmware view what i had

1612
01:01:46,240 --> 01:01:48,720
before um note that none of the commands

1613
01:01:48,720 --> 01:01:49,760
i put there were on the domain

1614
01:01:49,760 --> 01:01:53,200
controller because they put their edr on

1615
01:01:53,200 --> 01:01:55,359
the view server but not on any of the

1616
01:01:55,359 --> 01:01:58,079
domain controllers so everything was

1617
01:01:58,079 --> 01:02:01,520
out of sight that happened after that

1618
01:02:01,520 --> 01:02:02,559
ah

1619
01:02:02,559 --> 01:02:04,720
it's already passed an hour that's the

1620
01:02:04,720 --> 01:02:07,760
break next so

1621
01:02:07,760 --> 01:02:09,200
you want to wrap up or is there any

1622
01:02:09,200 --> 01:02:11,520
questions

1623
01:02:12,799 --> 01:02:13,760
yeah

1624
01:02:13,760 --> 01:02:15,039
i'm just saying that you know i don't

1625
01:02:15,039 --> 01:02:16,720
know how important the break is so it

1626
01:02:16,720 --> 01:02:20,520
does anyone have any questions

1627
01:02:27,760 --> 01:02:29,520
um

1628
01:02:29,520 --> 01:02:33,599
i don't believe so i don't think so

1629
01:02:33,599 --> 01:02:35,200
there's less documentation on that

1630
01:02:35,200 --> 01:02:38,400
because the um

1631
01:02:38,400 --> 01:02:41,119
the hashes are much more of a target

1632
01:02:41,119 --> 01:02:43,520
from attackers because you can use those

1633
01:02:43,520 --> 01:02:45,760
and pass the take pass the hash attacks

1634
01:02:45,760 --> 01:02:47,359
you don't need to then take offline and

1635
01:02:47,359 --> 01:02:49,280
crack them yourself to get plain text

1636
01:02:49,280 --> 01:02:51,119
password so

1637
01:02:51,119 --> 01:02:53,039
the number of attacks i can the number

1638
01:02:53,039 --> 01:02:55,280
of you know intrusions i can say i've

1639
01:02:55,280 --> 01:02:57,039
seen that

1640
01:02:57,039 --> 01:02:58,480
attacked hashes

1641
01:02:58,480 --> 01:03:01,039
countless number i can say that properly

1642
01:03:01,039 --> 01:03:03,440
attacked cash credentials as their way

1643
01:03:03,440 --> 01:03:04,160
of

1644
01:03:04,160 --> 01:03:06,720
really getting anything

1645
01:03:06,720 --> 01:03:08,640
zero i think i've seen one that actually

1646
01:03:08,640 --> 01:03:12,480
attempted it zero otherwise

1647
01:03:12,960 --> 01:03:15,920
just uh are there any monitoring systems

1648
01:03:15,920 --> 01:03:16,960
that

1649
01:03:16,960 --> 01:03:19,039
are talking about the normal things

1650
01:03:19,039 --> 01:03:20,799
happening that connection may be machine

1651
01:03:20,799 --> 01:03:23,599
learning to learn what's anomalous and

1652
01:03:23,599 --> 01:03:25,119
have those running on your system so you

1653
01:03:25,119 --> 01:03:26,799
can slowly train them and go oh this

1654
01:03:26,799 --> 01:03:30,079
anomalous thing happened please yeah

1655
01:03:30,079 --> 01:03:31,280
there's

1656
01:03:31,280 --> 01:03:33,280
there's a lot of them and what i'll say

1657
01:03:33,280 --> 01:03:35,680
is your mileage may vary

1658
01:03:35,680 --> 01:03:39,440
and by may i mean will yeah

1659
01:03:39,440 --> 01:03:41,920
someone better than others but yeah but

1660
01:03:41,920 --> 01:03:44,559
really really it also depends on your

1661
01:03:44,559 --> 01:03:46,880
environment because

1662
01:03:46,880 --> 01:03:50,079
windows does a lot of weird stuff

1663
01:03:50,079 --> 01:03:52,720
like if if you go through a security

1664
01:03:52,720 --> 01:03:55,680
course and find um

1665
01:03:55,680 --> 01:03:58,160
like hard rules even in sans from people

1666
01:03:58,160 --> 01:03:59,200
who've been doing it for years they'll

1667
01:03:59,200 --> 01:04:01,119
say something like you know there

1668
01:04:01,119 --> 01:04:03,200
shouldn't be any process spawning out of

1669
01:04:03,200 --> 01:04:04,480
lsats there should never be a child

1670
01:04:04,480 --> 01:04:07,760
process of lsas as part of my job access

1671
01:04:07,760 --> 01:04:10,319
to um you know the edr telemetry from 4

1672
01:04:10,319 --> 01:04:12,640
000 clients so i went okay let's see how

1673
01:04:12,640 --> 01:04:15,119
many child processes we have of lsas

1674
01:04:15,119 --> 01:04:16,640
over the last two days and the answer is

1675
01:04:16,640 --> 01:04:18,400
eight hundred thousand

1676
01:04:18,400 --> 01:04:20,240
so

1677
01:04:20,240 --> 01:04:22,799
for every rule there is an exception and

1678
01:04:22,799 --> 01:04:24,400
unfortunately that goes for anonymous

1679
01:04:24,400 --> 01:04:27,280
activity too

1680
01:04:27,280 --> 01:04:30,240
these tools really depend on how good

1681
01:04:30,240 --> 01:04:32,720
they are determining normal and even

1682
01:04:32,720 --> 01:04:35,280
then there's a lot of cases where each

1683
01:04:35,280 --> 01:04:38,079
company could train normally yeah but

1684
01:04:38,079 --> 01:04:39,520
unfortunately there's also a lot of case

1685
01:04:39,520 --> 01:04:41,200
you'll get a lot of false positives from

1686
01:04:41,200 --> 01:04:42,160
it because

1687
01:04:42,160 --> 01:04:44,319
people do weird things cis admins do

1688
01:04:44,319 --> 01:04:46,880
even weirder things and there's no and

1689
01:04:46,880 --> 01:04:48,400
there's no documentation on half of

1690
01:04:48,400 --> 01:04:51,920
microsoft so it's um

1691
01:04:52,160 --> 01:04:56,160
uncomprehensible black box at times

1692
01:04:56,240 --> 01:04:57,440
but

1693
01:04:57,440 --> 01:04:59,680
if someone can get that then they've

1694
01:04:59,680 --> 01:05:02,400
cracked a lot of the windows detection

1695
01:05:02,400 --> 01:05:04,799
side of security unfortunately i don't

1696
01:05:04,799 --> 01:05:07,760
think it's gonna happen anytime soon

1697
01:05:07,760 --> 01:05:09,119
but if you have enough people to go

1698
01:05:09,119 --> 01:05:10,799
through the false positives it's

1699
01:05:10,799 --> 01:05:13,599
definitely worth trying

1700
01:05:13,599 --> 01:05:15,359
yeah if you have enough if you have

1701
01:05:15,359 --> 01:05:17,440
enough resources and manpower to go

1702
01:05:17,440 --> 01:05:20,240
through these false positives and then

1703
01:05:20,240 --> 01:05:23,200
tune out the noisy ones then it's a it

1704
01:05:23,200 --> 01:05:25,280
is a good standpoint but

1705
01:05:25,280 --> 01:05:26,960
anyone who's thinking of it needs to

1706
01:05:26,960 --> 01:05:28,720
understand there will be

1707
01:05:28,720 --> 01:05:30,720
a lot of like work involved in any of

1708
01:05:30,720 --> 01:05:33,359
these anomalous detection

1709
01:05:33,359 --> 01:05:36,359
things

1710
01:05:46,160 --> 01:05:48,879
yes yes

1711
01:05:49,440 --> 01:05:51,200
maybe less for the

1712
01:05:51,200 --> 01:05:52,480
specifically for the things i've

1713
01:05:52,480 --> 01:05:55,039
mentioned here but just generally um

1714
01:05:55,039 --> 01:05:56,799
when you've got sysmon

1715
01:05:56,799 --> 01:05:59,200
if you enable things like command line

1716
01:05:59,200 --> 01:06:01,680
monitoring for your process creation

1717
01:06:01,680 --> 01:06:03,200
windows events

1718
01:06:03,200 --> 01:06:05,440
um that's going to catch a good amount

1719
01:06:05,440 --> 01:06:07,599
of the process telemetry i've pointed

1720
01:06:07,599 --> 01:06:09,240
out here before

1721
01:06:09,240 --> 01:06:12,359
[Music]

1722
01:06:13,280 --> 01:06:15,839
the process telemetry there is an edr

1723
01:06:15,839 --> 01:06:19,839
that i use my company so that's

1724
01:06:19,839 --> 01:06:22,079
nothing particularly windows related

1725
01:06:22,079 --> 01:06:24,799
it's just something we have installed on

1726
01:06:24,799 --> 01:06:27,440
these hosts

1727
01:06:27,599 --> 01:06:29,839
but this this one is

1728
01:06:29,839 --> 01:06:31,200
sysmon is good if you think of it as an

1729
01:06:31,200 --> 01:06:35,038
ed light that it's gonna um

1730
01:06:36,480 --> 01:06:38,640
it's like getting an edr that doesn't

1731
01:06:38,640 --> 01:06:40,799
have any signatures another it's another

1732
01:06:40,799 --> 01:06:42,400
thing that if you're enabling sysmon you

1733
01:06:42,400 --> 01:06:45,680
need to have someone trained to actually

1734
01:06:45,680 --> 01:06:47,920
understand what the output's going to be

1735
01:06:47,920 --> 01:06:49,920
and a lot of companies don't

1736
01:06:49,920 --> 01:06:51,520
want to put the

1737
01:06:51,520 --> 01:06:53,039
you know investment into that because it

1738
01:06:53,039 --> 01:06:54,799
is expensive and it's hard to get the

1739
01:06:54,799 --> 01:06:57,200
talent

1740
01:06:59,760 --> 01:07:01,839
any other questions or

1741
01:07:01,839 --> 01:07:04,160
yeah you talked about cisco

1742
01:07:04,160 --> 01:07:05,440
do you think the

1743
01:07:05,440 --> 01:07:07,839
replacement for this key might relate to

1744
01:07:07,839 --> 01:07:11,000
the requirements

1745
01:07:11,039 --> 01:07:14,440
sorry replacement

1746
01:07:18,559 --> 01:07:20,880
um

1747
01:07:21,760 --> 01:07:23,200
it may do it's not something i've looked

1748
01:07:23,200 --> 01:07:25,200
at i'm not sure whether you could really

1749
01:07:25,200 --> 01:07:26,319
information

1750
01:07:26,319 --> 01:07:27,680
yeah i'm not sure you could replicate

1751
01:07:27,680 --> 01:07:29,200
the functionality of one to one with the

1752
01:07:29,200 --> 01:07:31,920
tpm uh the question was um

1753
01:07:31,920 --> 01:07:33,760
would the replacement for cis key be

1754
01:07:33,760 --> 01:07:36,880
related to tpm 2.0 in windows

1755
01:07:36,880 --> 01:07:38,000
um

1756
01:07:38,000 --> 01:07:39,280
i'm not sure you could replicate

1757
01:07:39,280 --> 01:07:41,599
functionality one to one but

1758
01:07:41,599 --> 01:07:44,079
it's definitely a chance that they're

1759
01:07:44,079 --> 01:07:47,799
filling some of the gaps

1760
01:08:04,319 --> 01:08:06,000
as you say you've

1761
01:08:06,000 --> 01:08:07,520
come to the

1762
01:08:07,520 --> 01:08:09,920
classic microsoft track of this is what

1763
01:08:09,920 --> 01:08:11,920
i think might be the case but there's no

1764
01:08:11,920 --> 01:08:15,119
documentation for anywhere

1765
01:08:15,839 --> 01:08:17,359
i do like microsoft it's my favorite

1766
01:08:17,359 --> 01:08:18,880
operating system

1767
01:08:18,880 --> 01:08:19,759
i mean

1768
01:08:19,759 --> 01:08:21,759
i like linux too and

1769
01:08:21,759 --> 01:08:22,880
i'll be happy to use it when it's

1770
01:08:22,880 --> 01:08:25,839
finished

1771
01:08:27,359 --> 01:08:30,839
thank you very much

