1
00:00:03,360 --> 00:00:05,440
thank you so much for attending my call

2
00:00:05,440 --> 00:00:07,600
um

3
00:00:07,600 --> 00:00:09,360
who am i of course you have to introduce

4
00:00:09,360 --> 00:00:11,440
yourself i'm a principal security

5
00:00:11,440 --> 00:00:12,799
consultant

6
00:00:12,799 --> 00:00:14,559
for bsi i

7
00:00:14,559 --> 00:00:16,960
specialize in cloud native uh

8
00:00:16,960 --> 00:00:18,400
orchestration technology security

9
00:00:18,400 --> 00:00:19,520
assessments

10
00:00:19,520 --> 00:00:21,520
uh i also

11
00:00:21,520 --> 00:00:24,640
specialize in red and purple teaming

12
00:00:24,640 --> 00:00:26,880
and general penetration testing so these

13
00:00:26,880 --> 00:00:28,840
are the air of my

14
00:00:28,840 --> 00:00:30,800
focus

15
00:00:30,800 --> 00:00:34,640
the agenda the talk today i'd like to uh

16
00:00:34,640 --> 00:00:36,160
the agenda

17
00:00:36,160 --> 00:00:39,760
is to initially to introduce the um

18
00:00:39,760 --> 00:00:41,040
kubernetes

19
00:00:41,040 --> 00:00:42,640
basically kubernetes 101 just to make

20
00:00:42,640 --> 00:00:46,079
sure that everyone is on the same page

21
00:00:46,079 --> 00:00:47,840
in terms of what kubernetes is and why

22
00:00:47,840 --> 00:00:48,559
we

23
00:00:48,559 --> 00:00:51,520
need kubernetes or why we use kubernetes

24
00:00:51,520 --> 00:00:53,760
and then we'll talk about the

25
00:00:53,760 --> 00:00:57,039
kubernetes architecture

26
00:00:57,199 --> 00:00:58,719
how the kubernetes architecture is put

27
00:00:58,719 --> 00:01:01,600
together what component does what and

28
00:01:01,600 --> 00:01:02,879
how

29
00:01:02,879 --> 00:01:04,000
as a whole

30
00:01:04,000 --> 00:01:06,080
community works

31
00:01:06,080 --> 00:01:08,479
then we'll talk about the

32
00:01:08,479 --> 00:01:10,080
kubernetes

33
00:01:10,080 --> 00:01:12,799
deployment on permits security risks

34
00:01:12,799 --> 00:01:14,320
some of the risks that

35
00:01:14,320 --> 00:01:16,560
i i can't we tend to see during a

36
00:01:16,560 --> 00:01:18,240
swedish assessment

37
00:01:18,240 --> 00:01:19,920
in particular when it's deployed on

38
00:01:19,920 --> 00:01:21,360
premise

39
00:01:21,360 --> 00:01:22,320
um

40
00:01:22,320 --> 00:01:26,479
we then focus on the kubernetes

41
00:01:26,479 --> 00:01:29,920
core access control list so

42
00:01:29,920 --> 00:01:33,119
how the access control

43
00:01:33,119 --> 00:01:36,400
works in kubernetes environment

44
00:01:36,400 --> 00:01:39,680
and with the focus on role-based

45
00:01:39,680 --> 00:01:42,799
access control control list are back

46
00:01:42,799 --> 00:01:45,360
following that then i will transitions

47
00:01:45,360 --> 00:01:46,240
to

48
00:01:46,240 --> 00:01:47,680
cloud

49
00:01:47,680 --> 00:01:49,840
architecture and kubernetes

50
00:01:49,840 --> 00:01:51,119
um

51
00:01:51,119 --> 00:01:55,840
with focus on azure kubernetes

52
00:01:57,119 --> 00:01:59,680
architecture

53
00:01:59,680 --> 00:02:02,320
and finally i'll discuss the

54
00:02:02,320 --> 00:02:05,280
the azure kubernetes scooters some of

55
00:02:05,280 --> 00:02:06,960
the when you deploy

56
00:02:06,960 --> 00:02:09,199
kubernetes in azure what are the

57
00:02:09,199 --> 00:02:10,959
security risks and what you see by

58
00:02:10,959 --> 00:02:12,319
default and what you could do with it

59
00:02:12,319 --> 00:02:13,920
exploited etc

60
00:02:13,920 --> 00:02:17,359
so there's a lot to go through

61
00:02:17,520 --> 00:02:18,959
um so

62
00:02:18,959 --> 00:02:21,599
basics of kubernetes what's kubernetes

63
00:02:21,599 --> 00:02:24,720
open source orchestration system um

64
00:02:24,720 --> 00:02:27,200
essentially was developed by google

65
00:02:27,200 --> 00:02:29,520
internally they were using it internally

66
00:02:29,520 --> 00:02:32,319
and they made it up in open source

67
00:02:32,319 --> 00:02:34,560
um orchestration at the basic level

68
00:02:34,560 --> 00:02:37,120
essentially it's a

69
00:02:37,120 --> 00:02:38,879
it

70
00:02:38,879 --> 00:02:41,040
basically you

71
00:02:41,040 --> 00:02:44,879
um you manage containers in high

72
00:02:44,879 --> 00:02:46,720
you manage containers and in kind of

73
00:02:46,720 --> 00:02:48,239
independent

74
00:02:48,239 --> 00:02:49,840
as independent units so you can

75
00:02:49,840 --> 00:02:52,160
orchestrate some quite large number of

76
00:02:52,160 --> 00:02:55,040
applications using um uh orchestration

77
00:02:55,040 --> 00:02:57,200
techniques which is um

78
00:02:57,200 --> 00:03:01,120
that could apply to docker on other um

79
00:03:01,120 --> 00:03:04,159
container engines as well

80
00:03:04,159 --> 00:03:06,400
why do we use it why kubernetes what

81
00:03:06,400 --> 00:03:08,480
problem does it solve

82
00:03:08,480 --> 00:03:10,720
um

83
00:03:11,040 --> 00:03:13,280
this is not a actual legacy of way of

84
00:03:13,280 --> 00:03:15,920
doing uh you know servant deploying in

85
00:03:15,920 --> 00:03:17,680
applications in

86
00:03:17,680 --> 00:03:19,440
one one particular unit

87
00:03:19,440 --> 00:03:21,120
it's focused on

88
00:03:21,120 --> 00:03:22,000
a

89
00:03:22,000 --> 00:03:23,840
kind of a micro services so each

90
00:03:23,840 --> 00:03:25,519
container has its own independent uh

91
00:03:25,519 --> 00:03:27,920
independently as a as a unit so they

92
00:03:27,920 --> 00:03:29,280
independently work

93
00:03:29,280 --> 00:03:30,239
um

94
00:03:30,239 --> 00:03:32,319
it's it's essentially it's a smaller

95
00:03:32,319 --> 00:03:33,920
independent unit as opposed to having

96
00:03:33,920 --> 00:03:37,120
everything in one unit so with um

97
00:03:37,120 --> 00:03:39,360
with uh in communities or in container

98
00:03:39,360 --> 00:03:41,440
world you can have your applications or

99
00:03:41,440 --> 00:03:45,599
your services independently deployed in

100
00:03:45,599 --> 00:03:47,840
individual

101
00:03:48,000 --> 00:03:50,000
deployable service

102
00:03:50,000 --> 00:03:51,680
and you can obviously

103
00:03:51,680 --> 00:03:56,480
scale up scale down using kubernetes and

104
00:03:56,480 --> 00:03:57,599
containers

105
00:03:57,599 --> 00:03:59,200
in a large environment

106
00:03:59,200 --> 00:04:01,519
making it uh

107
00:04:01,519 --> 00:04:03,599
it's easy to scale and it's easy to

108
00:04:03,599 --> 00:04:05,200
actually uh

109
00:04:05,200 --> 00:04:07,760
tear it down

110
00:04:10,319 --> 00:04:11,840
understanding the communities i think

111
00:04:11,840 --> 00:04:13,599
it's it's a key to understand the

112
00:04:13,599 --> 00:04:15,680
architecture how kubernetes actually put

113
00:04:15,680 --> 00:04:17,600
together in the first place

114
00:04:17,600 --> 00:04:19,440
so at a high level

115
00:04:19,440 --> 00:04:21,839
in a center of every kubernetes

116
00:04:21,839 --> 00:04:23,440
environment

117
00:04:23,440 --> 00:04:25,680
you have the master api server

118
00:04:25,680 --> 00:04:27,360
which is the

119
00:04:27,360 --> 00:04:28,560
the

120
00:04:28,560 --> 00:04:31,840
core control panel of kubernetes

121
00:04:31,840 --> 00:04:33,360
and within the mask servers you have

122
00:04:33,360 --> 00:04:34,720
other components

123
00:04:34,720 --> 00:04:36,320
within the kubernetes

124
00:04:36,320 --> 00:04:38,800
um in particular hcd which is the

125
00:04:38,800 --> 00:04:40,080
database for

126
00:04:40,080 --> 00:04:45,280
kubernetes api server and you have a

127
00:04:45,280 --> 00:04:48,160
scheduler which essentially it schedules

128
00:04:48,160 --> 00:04:49,600
a wait for

129
00:04:49,600 --> 00:04:50,960
um

130
00:04:50,960 --> 00:04:53,680
ports to come live and then it pushes

131
00:04:53,680 --> 00:04:57,280
those ports to a worker nodes

132
00:04:57,280 --> 00:05:00,000
and then you have the

133
00:05:00,000 --> 00:05:02,639
the cube controller which is manages

134
00:05:02,639 --> 00:05:04,240
number of processes

135
00:05:04,240 --> 00:05:07,919
so not processors service accounts

136
00:05:07,919 --> 00:05:10,240
endpoints controllers

137
00:05:10,240 --> 00:05:13,680
and then you have the cubelet which is

138
00:05:13,680 --> 00:05:16,880
um it's kubernetes and agent runs on

139
00:05:16,880 --> 00:05:18,000
each

140
00:05:18,000 --> 00:05:20,639
runs on on a worker node

141
00:05:20,639 --> 00:05:22,720
and a work cannot essentially you can

142
00:05:22,720 --> 00:05:24,880
see it as a server that basically

143
00:05:24,880 --> 00:05:26,960
manages your workloads

144
00:05:26,960 --> 00:05:31,199
and the cubelets's responsibility is to

145
00:05:31,199 --> 00:05:33,520
making sure that containers are running

146
00:05:33,520 --> 00:05:35,280
fine they're running fine it's okay

147
00:05:35,280 --> 00:05:37,919
because cubelets and master api they

148
00:05:37,919 --> 00:05:40,080
communicate at all time either container

149
00:05:40,080 --> 00:05:42,560
goes offline cubelet's responsibility to

150
00:05:42,560 --> 00:05:44,240
basically report that back to the master

151
00:05:44,240 --> 00:05:46,400
api and therefore schedule a portion of

152
00:05:46,400 --> 00:05:48,240
that

153
00:05:48,240 --> 00:05:52,400
a um a port in onto a workload so the

154
00:05:52,400 --> 00:05:54,720
key point here is that the seeds in each

155
00:05:54,720 --> 00:05:57,759
of these you have these certificates

156
00:05:57,759 --> 00:05:59,759
um one of the

157
00:05:59,759 --> 00:06:01,840
the way you want to see this in

158
00:06:01,840 --> 00:06:04,000
communities environment is that it's a

159
00:06:04,000 --> 00:06:06,720
it's similar to mass kind of a client

160
00:06:06,720 --> 00:06:08,000
and server

161
00:06:08,000 --> 00:06:09,280
um so

162
00:06:09,280 --> 00:06:11,360
in this instance the components are

163
00:06:11,360 --> 00:06:12,960
considered the client

164
00:06:12,960 --> 00:06:15,280
and then it's in the central of the

165
00:06:15,280 --> 00:06:16,880
kubernetes is the

166
00:06:16,880 --> 00:06:19,199
server which is the master api

167
00:06:19,199 --> 00:06:20,560
so they

168
00:06:20,560 --> 00:06:22,639
the key observation is that whenever you

169
00:06:22,639 --> 00:06:24,240
deploy a

170
00:06:24,240 --> 00:06:27,440
kubernetes environment you also have the

171
00:06:27,440 --> 00:06:29,840
responsibility to generate those

172
00:06:29,840 --> 00:06:31,039
certificates

173
00:06:31,039 --> 00:06:32,800
so imagine if you

174
00:06:32,800 --> 00:06:34,080
from a security perspective you don't

175
00:06:34,080 --> 00:06:35,840
have those certificates are generated if

176
00:06:35,840 --> 00:06:37,759
it's not done correctly

177
00:06:37,759 --> 00:06:39,759
and and actually

178
00:06:39,759 --> 00:06:42,479
uh if you are using cube adm or

179
00:06:42,479 --> 00:06:44,400
a cloud services those certificates are

180
00:06:44,400 --> 00:06:46,400
already generated for you

181
00:06:46,400 --> 00:06:48,479
but if you are deploying this on premise

182
00:06:48,479 --> 00:06:51,599
and which we see quite a lot of places

183
00:06:51,599 --> 00:06:53,759
and if you deploy a kubernetes

184
00:06:53,759 --> 00:06:55,360
on-premise the certificate is

185
00:06:55,360 --> 00:06:56,400
essentially you have to actually

186
00:06:56,400 --> 00:06:58,080
generate it yourself

187
00:06:58,080 --> 00:07:00,319
and there are obviously cases as well

188
00:07:00,319 --> 00:07:03,520
when you want to not use let's say cube

189
00:07:03,520 --> 00:07:05,199
adm's um

190
00:07:05,199 --> 00:07:06,720
certificates that you want to your

191
00:07:06,720 --> 00:07:08,880
generate your own certificates

192
00:07:08,880 --> 00:07:09,840
so

193
00:07:09,840 --> 00:07:11,840
the the the

194
00:07:11,840 --> 00:07:12,560
the

195
00:07:12,560 --> 00:07:13,759
the clan and

196
00:07:13,759 --> 00:07:15,440
the the client the components are the

197
00:07:15,440 --> 00:07:18,639
clients which is the hcd tubelet and the

198
00:07:18,639 --> 00:07:20,720
rest of it and the core components of

199
00:07:20,720 --> 00:07:22,800
the kubernetes is the

200
00:07:22,800 --> 00:07:24,960
master api server

201
00:07:24,960 --> 00:07:28,080
there are risks of course when you

202
00:07:28,080 --> 00:07:29,520
when there are no certificates are

203
00:07:29,520 --> 00:07:32,080
generated in terms of um

204
00:07:32,080 --> 00:07:33,919
in terms of the

205
00:07:33,919 --> 00:07:34,880
um

206
00:07:34,880 --> 00:07:38,400
authentications encryptions um as well

207
00:07:38,400 --> 00:07:41,759
as uh encryptions in terms of uh in

208
00:07:41,759 --> 00:07:43,680
transit as well as

209
00:07:43,680 --> 00:07:46,000
at rest so some of the issues when we

210
00:07:46,000 --> 00:07:46,960
see that

211
00:07:46,960 --> 00:07:48,960
when you deploy a communities

212
00:07:48,960 --> 00:07:51,520
on premise um

213
00:07:51,520 --> 00:07:53,280
on bare metal

214
00:07:53,280 --> 00:07:55,199
issues that you will see there are no

215
00:07:55,199 --> 00:07:56,720
tls and there are no client

216
00:07:56,720 --> 00:07:59,759
authentication so what happens is when

217
00:07:59,759 --> 00:08:01,599
there is no tls and

218
00:08:01,599 --> 00:08:03,520
uh no authentications

219
00:08:03,520 --> 00:08:04,720
um

220
00:08:04,720 --> 00:08:07,360
by default kubernetes api server runs on

221
00:08:07,360 --> 00:08:09,840
port 8080 which means that

222
00:08:09,840 --> 00:08:11,680
on his own it's actually not

223
00:08:11,680 --> 00:08:13,680
secure because it's http

224
00:08:13,680 --> 00:08:15,599
and in terms of authentication you can

225
00:08:15,599 --> 00:08:17,919
just use for instance co

226
00:08:17,919 --> 00:08:20,160
command here that you can just list all

227
00:08:20,160 --> 00:08:22,720
the secrets etc etc so it's in in terms

228
00:08:22,720 --> 00:08:23,840
of

229
00:08:23,840 --> 00:08:26,560
client authentication and there are no

230
00:08:26,560 --> 00:08:27,759
kind of authentication and there is

231
00:08:27,759 --> 00:08:30,639
actually no uh tls encryptions as well

232
00:08:30,639 --> 00:08:33,519
so imagine if somebody's actually

233
00:08:33,519 --> 00:08:35,200
just you have this deployed and people

234
00:08:35,200 --> 00:08:37,200
could easily access if they have

235
00:08:37,200 --> 00:08:38,958
network access to that environment it's

236
00:08:38,958 --> 00:08:41,440
actually quite common

237
00:08:41,440 --> 00:08:42,958
um

238
00:08:42,958 --> 00:08:43,679
the

239
00:08:43,679 --> 00:08:46,399
the the the risk with that in terms of

240
00:08:46,399 --> 00:08:48,160
um

241
00:08:48,160 --> 00:08:50,720
new encryptions and

242
00:08:50,720 --> 00:08:52,800
client authentications you can for

243
00:08:52,800 --> 00:08:54,800
instance if you don't have

244
00:08:54,800 --> 00:08:56,399
authentication enabled you can just uh

245
00:08:56,399 --> 00:08:58,640
list all the secrets here as you can see

246
00:08:58,640 --> 00:09:00,800
here it's like on the port 8080 by

247
00:09:00,800 --> 00:09:04,399
default portrait 8 is now https um so

248
00:09:04,399 --> 00:09:05,920
an attacker could actually essentially

249
00:09:05,920 --> 00:09:07,360
intercept traffic as well as

250
00:09:07,360 --> 00:09:09,279
authenticate to kubernetes

251
00:09:09,279 --> 00:09:11,839
directly

252
00:09:14,480 --> 00:09:15,760
the

253
00:09:15,760 --> 00:09:18,399
mitigating

254
00:09:18,640 --> 00:09:20,480
kubernetes in terms of client

255
00:09:20,480 --> 00:09:22,800
authentication and

256
00:09:22,800 --> 00:09:24,640
https encryption

257
00:09:24,640 --> 00:09:25,680
um

258
00:09:25,680 --> 00:09:26,640
what do you

259
00:09:26,640 --> 00:09:29,120
initially really

260
00:09:29,120 --> 00:09:30,720
as a

261
00:09:30,720 --> 00:09:33,200
as a kind of administrator as a

262
00:09:33,200 --> 00:09:34,880
security assessment is that

263
00:09:34,880 --> 00:09:37,920
you the first step is really to

264
00:09:37,920 --> 00:09:39,519
generate a

265
00:09:39,519 --> 00:09:40,560
a

266
00:09:40,560 --> 00:09:42,800
certificate authority for your api

267
00:09:42,800 --> 00:09:43,760
server

268
00:09:43,760 --> 00:09:44,720
so the

269
00:09:44,720 --> 00:09:46,720
the api server it's essentially you need

270
00:09:46,720 --> 00:09:49,920
to a ca for using that ca then you can

271
00:09:49,920 --> 00:09:52,240
actually

272
00:09:52,320 --> 00:09:57,279
sign other components of the kubernetes

273
00:09:58,160 --> 00:09:59,200
services

274
00:09:59,200 --> 00:10:01,839
so here i'm just generating a

275
00:10:01,839 --> 00:10:05,360
ca i just call the steelcom

276
00:10:05,360 --> 00:10:07,680
and the idea of using that

277
00:10:07,680 --> 00:10:09,040
ca to

278
00:10:09,040 --> 00:10:12,079
sign all the authentication as well as

279
00:10:12,079 --> 00:10:16,319
the encryptions in community safety

280
00:10:17,519 --> 00:10:19,279
in order to make once you kind of

281
00:10:19,279 --> 00:10:22,480
generated this ca uh the next step is to

282
00:10:22,480 --> 00:10:26,560
really um go back to your api server to

283
00:10:26,560 --> 00:10:29,760
uh enable those enabled two things one

284
00:10:29,760 --> 00:10:31,760
is the uh

285
00:10:31,760 --> 00:10:33,519
client authentication as you can see

286
00:10:33,519 --> 00:10:34,880
here

287
00:10:34,880 --> 00:10:36,000
from the

288
00:10:36,000 --> 00:10:39,279
the client ca file which specify our ca

289
00:10:39,279 --> 00:10:40,320
crt

290
00:10:40,320 --> 00:10:42,160
and the

291
00:10:42,160 --> 00:10:44,959
tls files and then the private key so

292
00:10:44,959 --> 00:10:47,360
having every time when you generate a

293
00:10:47,360 --> 00:10:49,040
key or every time you need to basically

294
00:10:49,040 --> 00:10:50,800
go back to your api server

295
00:10:50,800 --> 00:10:52,959
and reconfigure your api server with the

296
00:10:52,959 --> 00:10:54,640
right flags and

297
00:10:54,640 --> 00:10:56,800
write document right flags and the right

298
00:10:56,800 --> 00:11:01,600
certificates for it to actually work

299
00:11:01,600 --> 00:11:02,880
um

300
00:11:02,880 --> 00:11:04,480
once you've er

301
00:11:04,480 --> 00:11:07,839
re kind of configures the api server

302
00:11:07,839 --> 00:11:10,800
and generate the right key mitigating it

303
00:11:10,800 --> 00:11:13,760
now if you're authenticating to

304
00:11:13,760 --> 00:11:16,480
api server you no longer can just curl

305
00:11:16,480 --> 00:11:18,480
you know http

306
00:11:18,480 --> 00:11:19,920
the

307
00:11:19,920 --> 00:11:22,560
cube api server port 8080 now you

308
00:11:22,560 --> 00:11:24,160
actually have to have the right

309
00:11:24,160 --> 00:11:26,399
certificate servers so such as you know

310
00:11:26,399 --> 00:11:28,079
using the the tls certificates that

311
00:11:28,079 --> 00:11:29,839
we've generated

312
00:11:29,839 --> 00:11:30,800
um

313
00:11:30,800 --> 00:11:32,959
and then you you basically run

314
00:11:32,959 --> 00:11:35,200
you run your cube api server with the

315
00:11:35,200 --> 00:11:38,560
certificates that you've uh generated so

316
00:11:38,560 --> 00:11:41,440
at this point the the cube api survey

317
00:11:41,440 --> 00:11:44,480
it's no longer actually

318
00:11:45,279 --> 00:11:46,959
no longer

319
00:11:46,959 --> 00:11:49,440
listens on just a clear text and client

320
00:11:49,440 --> 00:11:52,440
authentication

321
00:11:58,000 --> 00:12:01,040
um so the

322
00:12:01,120 --> 00:12:03,200
once you basically uh

323
00:12:03,200 --> 00:12:06,079
once you've um

324
00:12:06,320 --> 00:12:07,680
once you've kind of enabled the

325
00:12:07,680 --> 00:12:09,279
authentications the next step is through

326
00:12:09,279 --> 00:12:10,720
that team for

327
00:12:10,720 --> 00:12:12,959
for for for administrator or for client

328
00:12:12,959 --> 00:12:14,560
to authenticate to api server they need

329
00:12:14,560 --> 00:12:16,320
to have a certificate as well so they

330
00:12:16,320 --> 00:12:18,079
need to have a client authentication

331
00:12:18,079 --> 00:12:19,519
client certificate forward to

332
00:12:19,519 --> 00:12:23,120
authenticate the um the api server and

333
00:12:23,120 --> 00:12:25,360
the in this screen shows what i'm doing

334
00:12:25,360 --> 00:12:27,120
is i'm creating myself a certificate

335
00:12:27,120 --> 00:12:30,079
city thing uh by using the uh the ca

336
00:12:30,079 --> 00:12:32,240
that i've generated initially and i'm

337
00:12:32,240 --> 00:12:35,120
signing my uh certificate using the ca

338
00:12:35,120 --> 00:12:37,600
certificate that i've generated and i am

339
00:12:37,600 --> 00:12:39,519
here essentially using

340
00:12:39,519 --> 00:12:41,519
um a the

341
00:12:41,519 --> 00:12:44,160
the certificate uh connecting

342
00:12:44,160 --> 00:12:45,519
with the city that i'm connecting to the

343
00:12:45,519 --> 00:12:48,560
api server itself so there as you can

344
00:12:48,560 --> 00:12:50,399
see i'm using open so

345
00:12:50,399 --> 00:12:52,160
and then on the bottom of the

346
00:12:52,160 --> 00:12:54,399
screenshots i am doing keep ctl get

347
00:12:54,399 --> 00:12:56,240
secret essentially i'm requesting a

348
00:12:56,240 --> 00:12:59,040
secret but this time i'm specifying the

349
00:12:59,040 --> 00:13:01,519
certificate file so i'm saying actually

350
00:13:01,519 --> 00:13:03,360
authenticate to api server but make sure

351
00:13:03,360 --> 00:13:05,200
that you are using the

352
00:13:05,200 --> 00:13:06,800
right the right key for it to

353
00:13:06,800 --> 00:13:08,160
authenticate without those key obviously

354
00:13:08,160 --> 00:13:09,360
you're not going to be able to

355
00:13:09,360 --> 00:13:12,399
authenticate the um

356
00:13:12,399 --> 00:13:15,360
to api server

357
00:13:16,000 --> 00:13:18,880
um the other components of the the risks

358
00:13:18,880 --> 00:13:22,160
of kubernetes

359
00:13:22,160 --> 00:13:23,360
on-premise

360
00:13:23,360 --> 00:13:25,200
deploy deploying the

361
00:13:25,200 --> 00:13:27,600
kubernetes on-premise is that one of the

362
00:13:27,600 --> 00:13:30,880
core components of kubernetes is its cd

363
00:13:30,880 --> 00:13:32,800
which is the key value database

364
00:13:32,800 --> 00:13:35,440
essentially every configurations of api

365
00:13:35,440 --> 00:13:38,560
server it's stored in xcd so if your lcd

366
00:13:38,560 --> 00:13:40,320
is compromised you're essentially your

367
00:13:40,320 --> 00:13:42,399
entire api server entire cluster is

368
00:13:42,399 --> 00:13:44,639
compromised so what what essentially you

369
00:13:44,639 --> 00:13:46,720
want to do is you also want to make sure

370
00:13:46,720 --> 00:13:48,720
that your ecd

371
00:13:48,720 --> 00:13:51,360
database is secure with

372
00:13:51,360 --> 00:13:52,639
appropriate key

373
00:13:52,639 --> 00:13:55,680
as well as authentication between ncd

374
00:13:55,680 --> 00:13:58,639
and the api server is secured using tls

375
00:13:58,639 --> 00:14:00,880
as well

376
00:14:00,880 --> 00:14:03,519
so by default when you when you run a cd

377
00:14:03,519 --> 00:14:04,480
server

378
00:14:04,480 --> 00:14:07,120
um hct server could be actually

379
00:14:07,120 --> 00:14:09,839
could use separate uh certificates um in

380
00:14:09,839 --> 00:14:12,880
most cases uh the api survey uses on

381
00:14:12,880 --> 00:14:15,279
certificate but also hcd it's also uses

382
00:14:15,279 --> 00:14:16,160
zone

383
00:14:16,160 --> 00:14:18,480
ca as well but in this instance i'm just

384
00:14:18,480 --> 00:14:19,680
actually you know using the same

385
00:14:19,680 --> 00:14:21,279
certificate for api server for

386
00:14:21,279 --> 00:14:23,920
demonstration purpose so if you run fcd

387
00:14:23,920 --> 00:14:25,040
uh

388
00:14:25,040 --> 00:14:27,040
components of the kubernetes what

389
00:14:27,040 --> 00:14:29,440
happens is by default again it's on the

390
00:14:29,440 --> 00:14:31,760
port two three seven nine so that you

391
00:14:31,760 --> 00:14:33,440
know you can even see that the bottom it

392
00:14:33,440 --> 00:14:35,920
says is strongly discouraged that using

393
00:14:35,920 --> 00:14:38,079
you know no http or um

394
00:14:38,079 --> 00:14:39,839
tls encryptions as well as client

395
00:14:39,839 --> 00:14:42,079
authentication so that you know we see

396
00:14:42,079 --> 00:14:44,560
quite often in environments where xcd

397
00:14:44,560 --> 00:14:45,839
databases

398
00:14:45,839 --> 00:14:47,519
you know left like this with no

399
00:14:47,519 --> 00:14:49,120
authentication or no encryption so

400
00:14:49,120 --> 00:14:50,160
anyone can

401
00:14:50,160 --> 00:14:53,040
potentially directly connect to 2379

402
00:14:53,040 --> 00:14:56,399
ports and dump all the databases and

403
00:14:56,399 --> 00:14:58,320
you know your secrets etc the things

404
00:14:58,320 --> 00:14:59,839
that you're actually protecting because

405
00:14:59,839 --> 00:15:01,839
ecd that's where the configurations and

406
00:15:01,839 --> 00:15:04,800
the data are stored

407
00:15:05,279 --> 00:15:07,519
um

408
00:15:08,800 --> 00:15:10,800
the

409
00:15:10,800 --> 00:15:14,079
the hcd server itself as well when you

410
00:15:14,079 --> 00:15:16,079
but by default as i said there's no

411
00:15:16,079 --> 00:15:18,959
encryptions uh involved in in terms of

412
00:15:18,959 --> 00:15:21,359
um

413
00:15:21,680 --> 00:15:24,720
in transit as well as in in rest so if

414
00:15:24,720 --> 00:15:26,000
in this example what i'm trying

415
00:15:26,000 --> 00:15:27,920
essentially i'm doing is i'm creating a

416
00:15:27,920 --> 00:15:29,120
namespace

417
00:15:29,120 --> 00:15:30,000
um

418
00:15:30,000 --> 00:15:33,360
on my kubernetes api server um

419
00:15:33,360 --> 00:15:35,920
client c and i am using

420
00:15:35,920 --> 00:15:39,120
a um i'm basically using a generic

421
00:15:39,120 --> 00:15:41,279
uh a secret creating a genetic secret

422
00:15:41,279 --> 00:15:43,519
and i'm pushing some um

423
00:15:43,519 --> 00:15:46,399
sample data like clients sensitive data

424
00:15:46,399 --> 00:15:48,720
to the hcd server so what's happening

425
00:15:48,720 --> 00:15:50,800
here is that my data now two things

426
00:15:50,800 --> 00:15:53,199
happened here like the secret the secret

427
00:15:53,199 --> 00:15:56,320
is created uh in person's that secret

428
00:15:56,320 --> 00:15:57,920
it's trans uh

429
00:15:57,920 --> 00:16:00,240
it's basically transmitted in http so in

430
00:16:00,240 --> 00:16:02,720
clear text and then secondly it's uh the

431
00:16:02,720 --> 00:16:05,680
the data itself it's on the hcd database

432
00:16:05,680 --> 00:16:08,560
now it's actually clear so there are two

433
00:16:08,560 --> 00:16:10,240
kind of significant risks here one thing

434
00:16:10,240 --> 00:16:11,839
intercept and the second is that

435
00:16:11,839 --> 00:16:14,079
somebody compromised your database or

436
00:16:14,079 --> 00:16:16,240
they could potentially dump those

437
00:16:16,240 --> 00:16:19,519
personal identifiable informations

438
00:16:19,519 --> 00:16:20,800
um

439
00:16:20,800 --> 00:16:21,759
the

440
00:16:21,759 --> 00:16:24,720
just to demonstrate the actual uh the

441
00:16:24,720 --> 00:16:26,880
scooter risk with the xcd database when

442
00:16:26,880 --> 00:16:28,800
it's actually in clear text so as you

443
00:16:28,800 --> 00:16:30,880
can see here is that you know i've i've

444
00:16:30,880 --> 00:16:33,680
created the secret like and now i

445
00:16:33,680 --> 00:16:35,920
if i have access to the http database

446
00:16:35,920 --> 00:16:37,759
what i could essentially do i can

447
00:16:37,759 --> 00:16:40,079
recursively look for that information

448
00:16:40,079 --> 00:16:41,360
that i've just created so that

449
00:16:41,360 --> 00:16:42,800
particular secret

450
00:16:42,800 --> 00:16:45,440
and now because the information it's

451
00:16:45,440 --> 00:16:47,600
actually in clear text you see at the

452
00:16:47,600 --> 00:16:49,680
bottom at the top i'm looking at

453
00:16:49,680 --> 00:16:50,959
recursively

454
00:16:50,959 --> 00:16:52,480
and the

455
00:16:52,480 --> 00:16:54,320
at the bottom you can see that actually

456
00:16:54,320 --> 00:16:56,320
the information is still in clear text

457
00:16:56,320 --> 00:16:58,800
it's not encrypted on that database so

458
00:16:58,800 --> 00:16:59,920
obviously

459
00:16:59,920 --> 00:17:00,720
from

460
00:17:00,720 --> 00:17:02,880
a security perspective of the best

461
00:17:02,880 --> 00:17:04,319
practices you don't really want to have

462
00:17:04,319 --> 00:17:06,079
a database who's not encrypting your

463
00:17:06,079 --> 00:17:09,119
data um

464
00:17:09,199 --> 00:17:11,679
rest as well as a disk so in this in

465
00:17:11,679 --> 00:17:12,799
this case you'd see these have no

466
00:17:12,799 --> 00:17:15,520
encryption database

467
00:17:15,520 --> 00:17:16,559
um

468
00:17:16,559 --> 00:17:17,359
the

469
00:17:17,359 --> 00:17:19,280
in terms of client authentication with

470
00:17:19,280 --> 00:17:23,839
each cd database is that um

471
00:17:24,319 --> 00:17:26,640
so in order to actually mitigating the

472
00:17:26,640 --> 00:17:28,720
authentication aspect of the hcd you

473
00:17:28,720 --> 00:17:33,200
still have to uh to um do two things one

474
00:17:33,200 --> 00:17:36,720
is that you need to generate the hcd um

475
00:17:36,720 --> 00:17:38,640
certificates so again it's a component

476
00:17:38,640 --> 00:17:40,799
of the api server so you want to create

477
00:17:40,799 --> 00:17:41,840
a

478
00:17:41,840 --> 00:17:44,640
tls certificate for the cd this is what

479
00:17:44,640 --> 00:17:46,960
i'm doing here i am

480
00:17:46,960 --> 00:17:50,799
creating the etw cnf and i am

481
00:17:50,799 --> 00:17:52,880
once i've created the config file

482
00:17:52,880 --> 00:17:56,080
essentially i am signing the hcd key

483
00:17:56,080 --> 00:17:57,200
with my

484
00:17:57,200 --> 00:18:01,520
ca um here which is the uh the ca dot

485
00:18:01,520 --> 00:18:03,760
key up generated for api seven so any

486
00:18:03,760 --> 00:18:05,919
any components of the api any components

487
00:18:05,919 --> 00:18:08,720
of the kubernetes needs to still be

488
00:18:08,720 --> 00:18:11,039
signed by the ca that i've generated in

489
00:18:11,039 --> 00:18:13,520
the first place but as i said previously

490
00:18:13,520 --> 00:18:16,160
as well you can obviously um you know

491
00:18:16,160 --> 00:18:18,400
you can have a separate certificate for

492
00:18:18,400 --> 00:18:22,160
hcd which is a best practice as well

493
00:18:22,160 --> 00:18:24,000
so i'm creating a

494
00:18:24,000 --> 00:18:28,760
a certificate for xcd database

495
00:18:29,120 --> 00:18:31,200
and once i've

496
00:18:31,200 --> 00:18:32,880
sorry

497
00:18:32,880 --> 00:18:35,760
once i've once i've created the hcd

498
00:18:35,760 --> 00:18:38,160
certificate i need to go back to the api

499
00:18:38,160 --> 00:18:40,480
server again reconfigure the api server

500
00:18:40,480 --> 00:18:41,600
with the right certificate that

501
00:18:41,600 --> 00:18:44,559
generated for each cd server uh

502
00:18:44,559 --> 00:18:46,960
component and then making sure that it

503
00:18:46,960 --> 00:18:48,480
you know it has the right certificate in

504
00:18:48,480 --> 00:18:50,720
order for the plan authentication

505
00:18:50,720 --> 00:18:52,720
between the api server and the ecd it's

506
00:18:52,720 --> 00:18:56,640
actually done in a secure manner

507
00:18:56,640 --> 00:18:58,160
so you constantly have to go back to the

508
00:18:58,160 --> 00:18:59,919
api save actually reconfiguring those

509
00:18:59,919 --> 00:19:02,240
flags which can be tricky and the

510
00:19:02,240 --> 00:19:03,679
documentation will prevent it is quite

511
00:19:03,679 --> 00:19:06,240
tricky as well

512
00:19:08,720 --> 00:19:10,880
for us to mitigate the clear text

513
00:19:10,880 --> 00:19:13,280
password uh clear text kind of

514
00:19:13,280 --> 00:19:15,200
information so ppi data sensitive

515
00:19:15,200 --> 00:19:17,360
information we need to obviously encrypt

516
00:19:17,360 --> 00:19:19,760
that cd database this could be done um

517
00:19:19,760 --> 00:19:22,640
and using

518
00:19:22,840 --> 00:19:25,440
um there's a number of way actually

519
00:19:25,440 --> 00:19:27,679
interrupting xt database you can use uh

520
00:19:27,679 --> 00:19:30,480
uh and a third-party providers

521
00:19:30,480 --> 00:19:33,360
um uh open source uh two uh open source

522
00:19:33,360 --> 00:19:35,440
frameworks but here i'm actually using a

523
00:19:35,440 --> 00:19:37,520
native uh uh

524
00:19:37,520 --> 00:19:40,240
encryption uh config kind type within

525
00:19:40,240 --> 00:19:42,640
the actual kubernetes for me to actually

526
00:19:42,640 --> 00:19:45,039
uh uh encrypting the database

527
00:19:45,039 --> 00:19:47,840
of the acd so the steps are it's uh i am

528
00:19:47,840 --> 00:19:49,679
essentially creating a

529
00:19:49,679 --> 00:19:54,080
um a a random base64 and then i am using

530
00:19:54,080 --> 00:19:55,600
the um

531
00:19:55,600 --> 00:19:58,240
encrypted cd jambo file and i am

532
00:19:58,240 --> 00:20:00,960
essentially uh if you can see the actual

533
00:20:00,960 --> 00:20:04,720
the kind type here it's the a encryption

534
00:20:04,720 --> 00:20:05,919
config

535
00:20:05,919 --> 00:20:08,159
encryption config and

536
00:20:08,159 --> 00:20:09,919
the type that the type of provider i'm

537
00:20:09,919 --> 00:20:13,200
using also it's aes uh cds and then i'm

538
00:20:13,200 --> 00:20:15,440
specifying the um

539
00:20:15,440 --> 00:20:18,080
the key that i've generated the

540
00:20:18,080 --> 00:20:20,880
the once once i've basically um

541
00:20:20,880 --> 00:20:25,520
uh created the uh random base64 aesc cbs

542
00:20:25,520 --> 00:20:28,480
and the right config file um

543
00:20:28,480 --> 00:20:30,799
essentially i can uh i can

544
00:20:30,799 --> 00:20:33,039
i can then um

545
00:20:33,039 --> 00:20:36,000
i can then go back to my api server

546
00:20:36,000 --> 00:20:38,240
and then from the api server i can

547
00:20:38,240 --> 00:20:40,400
specify the encryption provider uh

548
00:20:40,400 --> 00:20:43,520
config file so i need to specify the

549
00:20:43,520 --> 00:20:46,000
the the ammo file that i basically built

550
00:20:46,000 --> 00:20:47,280
with that

551
00:20:47,280 --> 00:20:49,360
using the uh go back to the api server

552
00:20:49,360 --> 00:20:51,520
reconfigure the um

553
00:20:51,520 --> 00:20:54,720
the uh hcd with the correct flag which

554
00:20:54,720 --> 00:20:56,640
is the encryption provider config and

555
00:20:56,640 --> 00:20:59,679
then path to that hcdep of the armor the

556
00:20:59,679 --> 00:21:01,360
observation is that if somebody actually

557
00:21:01,360 --> 00:21:04,159
does manage your apis it does manage

558
00:21:04,159 --> 00:21:06,480
gain access to your api server and they

559
00:21:06,480 --> 00:21:09,840
have access to the atd.aml file and they

560
00:21:09,840 --> 00:21:11,520
could essentially decrypt your database

561
00:21:11,520 --> 00:21:13,280
as well so that's in a game over if

562
00:21:13,280 --> 00:21:15,360
somebody had somehow

563
00:21:15,360 --> 00:21:17,840
managed to gain access to apf server so

564
00:21:17,840 --> 00:21:19,840
because that's that that yammer file

565
00:21:19,840 --> 00:21:25,039
does sits in your api server itself

566
00:21:25,280 --> 00:21:28,400
um once you've once you've basically

567
00:21:28,400 --> 00:21:30,799
created the once we've rebooted the api

568
00:21:30,799 --> 00:21:32,480
server unfortunately actually with api

569
00:21:32,480 --> 00:21:34,159
server you have obviously

570
00:21:34,159 --> 00:21:36,640
kind of a

571
00:21:36,720 --> 00:21:38,799
restart your api server every time you

572
00:21:38,799 --> 00:21:40,400
actually make those configuration

573
00:21:40,400 --> 00:21:43,039
changes it's one of the

574
00:21:43,039 --> 00:21:44,880
downside of the

575
00:21:44,880 --> 00:21:47,200
on-premise deployment once you've once

576
00:21:47,200 --> 00:21:48,960
you've basically uh uh created the

577
00:21:48,960 --> 00:21:51,200
encryption etc now

578
00:21:51,200 --> 00:21:52,880
i am because the database now is

579
00:21:52,880 --> 00:21:55,039
encrypted whenever if

580
00:21:55,039 --> 00:21:57,440
in this example i am what i'm doing is i

581
00:21:57,440 --> 00:22:00,720
am i am pushing uh

582
00:22:00,720 --> 00:22:01,919
a

583
00:22:01,919 --> 00:22:03,200
i'm basically

584
00:22:03,200 --> 00:22:04,000
i'm

585
00:22:04,000 --> 00:22:06,480
putting some data into the hcd database

586
00:22:06,480 --> 00:22:09,679
some pia data and if i look at at the

587
00:22:09,679 --> 00:22:11,840
same time i'm using the same technique

588
00:22:11,840 --> 00:22:14,799
wrapping recursively in in in the actual

589
00:22:14,799 --> 00:22:17,200
uh atd database and as you can see

590
00:22:17,200 --> 00:22:20,240
actually there's no um latex information

591
00:22:20,240 --> 00:22:21,520
anymore because the database now it's

592
00:22:21,520 --> 00:22:23,440
encrypted so you don't actually get that

593
00:22:23,440 --> 00:22:25,280
clear text information again

594
00:22:25,280 --> 00:22:27,440
so that's all um superior in terms of

595
00:22:27,440 --> 00:22:29,840
the cd database

596
00:22:29,840 --> 00:22:31,200
um

597
00:22:31,200 --> 00:22:32,159
from the

598
00:22:32,159 --> 00:22:34,640
hcd also as i mentioned earlier that

599
00:22:34,640 --> 00:22:37,039
there are clear text uh player text

600
00:22:37,039 --> 00:22:38,799
informations that you know

601
00:22:38,799 --> 00:22:41,039
transmits between the api server and at

602
00:22:41,039 --> 00:22:42,799
so anyone can actually be in the middle

603
00:22:42,799 --> 00:22:44,080
they can intercept those sensitive

604
00:22:44,080 --> 00:22:46,960
information and essentially uh uh

605
00:22:46,960 --> 00:22:49,360
exploits your compromise your api cell

606
00:22:49,360 --> 00:22:51,440
and the rest of your uh

607
00:22:51,440 --> 00:22:52,480
environment

608
00:22:52,480 --> 00:22:55,520
so how do you go about uh um

609
00:22:55,520 --> 00:22:57,679
an example here is what i'm doing is

610
00:22:57,679 --> 00:23:01,440
essentially i am using fcdctl

611
00:23:01,440 --> 00:23:04,000
which is a um uh

612
00:23:04,000 --> 00:23:07,840
atd binary client i am putting some uh

613
00:23:07,840 --> 00:23:09,039
some data

614
00:23:09,039 --> 00:23:11,360
into a client a i just call the secret

615
00:23:11,360 --> 00:23:13,760
secret safe tickets on the left hand i

616
00:23:13,760 --> 00:23:16,880
i'm using a pcb dump just demonstrating

617
00:23:16,880 --> 00:23:19,600
manual and middle by doing a

618
00:23:19,600 --> 00:23:21,760
direct interception of traffic as you

619
00:23:21,760 --> 00:23:23,520
can see the action data is actually

620
00:23:23,520 --> 00:23:25,760
starts here so anyone can

621
00:23:25,760 --> 00:23:28,559
essentially intercept your uh sensitive

622
00:23:28,559 --> 00:23:30,799
data so not only the client

623
00:23:30,799 --> 00:23:32,400
authentication but you also want to make

624
00:23:32,400 --> 00:23:34,559
sure that your tls encryption is done

625
00:23:34,559 --> 00:23:36,799
correctly between the api server as well

626
00:23:36,799 --> 00:23:40,720
as the cd that's secure and

627
00:23:40,720 --> 00:23:44,559
not flying in clear text

628
00:23:46,080 --> 00:23:48,159
the once you've basically once you

629
00:23:48,159 --> 00:23:50,240
basically regenerated the certificates

630
00:23:50,240 --> 00:23:50,960
for

631
00:23:50,960 --> 00:23:54,880
um similar to the api server um

632
00:23:54,880 --> 00:23:57,120
and reconfigured your

633
00:23:57,120 --> 00:23:59,679
api server with the right client with

634
00:23:59,679 --> 00:24:02,080
the right tls certificate now i'm doing

635
00:24:02,080 --> 00:24:04,880
exactly the same thing i am actually

636
00:24:04,880 --> 00:24:07,520
pushing some data on the

637
00:24:07,520 --> 00:24:09,200
uh on the

638
00:24:09,200 --> 00:24:10,480
client b

639
00:24:10,480 --> 00:24:12,799
secret and then if you look at the on

640
00:24:12,799 --> 00:24:15,679
the left side of the uh screenshots on

641
00:24:15,679 --> 00:24:17,919
the right here that traffic no longer

642
00:24:17,919 --> 00:24:19,600
it's actually in clear text it's all

643
00:24:19,600 --> 00:24:21,679
kind of encrypted so even if somebody

644
00:24:21,679 --> 00:24:23,039
has managed to

645
00:24:23,039 --> 00:24:25,600
uh encrypt your data

646
00:24:25,600 --> 00:24:27,120
if they're able to actually intercept

647
00:24:27,120 --> 00:24:28,159
your data

648
00:24:28,159 --> 00:24:31,600
um then it no longer it's in clear text

649
00:24:31,600 --> 00:24:34,000
so that no longer get awfully useful

650
00:24:34,000 --> 00:24:36,640
because they're saying

651
00:24:40,240 --> 00:24:45,279
one of the core components of kubernetes

652
00:24:45,840 --> 00:24:46,960
access

653
00:24:46,960 --> 00:24:47,840
access

654
00:24:47,840 --> 00:24:50,080
communities authentication authorization

655
00:24:50,080 --> 00:24:51,440
it's actually understanding how the

656
00:24:51,440 --> 00:24:53,679
access control works in the first place

657
00:24:53,679 --> 00:24:55,520
knowing you know having some knowledge

658
00:24:55,520 --> 00:24:58,559
on the acl first then we can dive into

659
00:24:58,559 --> 00:24:59,600
you know more authentication

660
00:24:59,600 --> 00:25:02,159
authorizations how kubernetes does all

661
00:25:02,159 --> 00:25:04,400
that in a secure manner

662
00:25:04,400 --> 00:25:07,200
um in this example here is that

663
00:25:07,200 --> 00:25:08,480
the way the

664
00:25:08,480 --> 00:25:10,720
the acl works and

665
00:25:10,720 --> 00:25:14,159
in kubernetes is that from a client uh

666
00:25:14,159 --> 00:25:16,480
keep ctl keep ctl essentially a client

667
00:25:16,480 --> 00:25:18,720
that you can use to interact with uh api

668
00:25:18,720 --> 00:25:22,720
server with a uh with kubernetes and but

669
00:25:22,720 --> 00:25:24,080
that could be a user as well with the

670
00:25:24,080 --> 00:25:25,679
right certificate

671
00:25:25,679 --> 00:25:27,840
but also from the pod and service

672
00:25:27,840 --> 00:25:29,919
account they can also actually

673
00:25:29,919 --> 00:25:32,480
authenticate to or interact with your

674
00:25:32,480 --> 00:25:34,960
kubernetes object so every time when you

675
00:25:34,960 --> 00:25:36,880
interact with a community api server

676
00:25:36,880 --> 00:25:38,720
this is the step that's basically games

677
00:25:38,720 --> 00:25:40,159
first it's actually go through the

678
00:25:40,159 --> 00:25:42,640
authentication does the does the user or

679
00:25:42,640 --> 00:25:44,000
the service account have the correct

680
00:25:44,000 --> 00:25:45,919
authentication if that's the case then

681
00:25:45,919 --> 00:25:47,600
it's the next step authorization

682
00:25:47,600 --> 00:25:49,440
authorization essentially it checks you

683
00:25:49,440 --> 00:25:50,240
know

684
00:25:50,240 --> 00:25:51,919
if that particular user have the

685
00:25:51,919 --> 00:25:54,640
authorized um the correct authorizations

686
00:25:54,640 --> 00:25:57,200
or roles etc to access

687
00:25:57,200 --> 00:25:58,000
the

688
00:25:58,000 --> 00:26:00,080
quantity object the third step which is

689
00:26:00,080 --> 00:26:02,240
the admission controller it's

690
00:26:02,240 --> 00:26:03,679
the admission controller essentially has

691
00:26:03,679 --> 00:26:05,520
the final say in terms of what you

692
00:26:05,520 --> 00:26:07,039
should be at whether you should be

693
00:26:07,039 --> 00:26:08,720
actually accessing a kubernetes object

694
00:26:08,720 --> 00:26:09,440
or

695
00:26:09,440 --> 00:26:12,159
uh admission controller as soon as

696
00:26:12,159 --> 00:26:14,000
potential actually questions around

697
00:26:14,000 --> 00:26:16,799
devops because that decides whether you

698
00:26:16,799 --> 00:26:19,200
know you've passed your authentication

699
00:26:19,200 --> 00:26:20,880
asked your authorization if you're

700
00:26:20,880 --> 00:26:21,919
unable to

701
00:26:21,919 --> 00:26:23,679
admission controller in your communities

702
00:26:23,679 --> 00:26:24,640
api

703
00:26:24,640 --> 00:26:26,640
server it would have it would dictate

704
00:26:26,640 --> 00:26:28,640
whether actually that particular

705
00:26:28,640 --> 00:26:30,960
uh request should go through the uh

706
00:26:30,960 --> 00:26:33,200
final uh destination which is reaching

707
00:26:33,200 --> 00:26:35,200
the kubernetes object some of the

708
00:26:35,200 --> 00:26:36,960
example of the

709
00:26:36,960 --> 00:26:39,279
admission controller could um it could

710
00:26:39,279 --> 00:26:41,760
be that uh you know checking your image

711
00:26:41,760 --> 00:26:43,840
if your image is actually insecure then

712
00:26:43,840 --> 00:26:45,919
it shouldn't actually pushing that image

713
00:26:45,919 --> 00:26:48,320
into your uh environment or if you have

714
00:26:48,320 --> 00:26:50,000
let's say that's your security context

715
00:26:50,000 --> 00:26:50,960
or your

716
00:26:50,960 --> 00:26:52,880
your image runs on that

717
00:26:52,880 --> 00:26:54,400
kind of a

718
00:26:54,400 --> 00:26:57,360
root id of root accounts on that image

719
00:26:57,360 --> 00:26:59,279
then admission controller could say no

720
00:26:59,279 --> 00:27:00,640
i'm not accepting this because that's

721
00:27:00,640 --> 00:27:03,120
not the right way this is not the based

722
00:27:03,120 --> 00:27:04,960
on my policy i'm not allowing this so

723
00:27:04,960 --> 00:27:09,039
you admission controller has the savings

724
00:27:09,039 --> 00:27:10,640
um so the

725
00:27:10,640 --> 00:27:12,240
some of the areas that in terms of

726
00:27:12,240 --> 00:27:14,640
authentications on kubernetes are there

727
00:27:14,640 --> 00:27:16,720
are multiple ways of authenticating may

728
00:27:16,720 --> 00:27:17,600
6

729
00:27:17,600 --> 00:27:19,440
509 planned authentication i've already

730
00:27:19,440 --> 00:27:22,640
mentioned there's a stat token file yes

731
00:27:22,640 --> 00:27:25,039
your information actually saved in a csv

732
00:27:25,039 --> 00:27:27,600
file and there's turbos where you can

733
00:27:27,600 --> 00:27:28,799
use in

734
00:27:28,799 --> 00:27:31,279
your active directory an older ldap

735
00:27:31,279 --> 00:27:32,720
application and

736
00:27:32,720 --> 00:27:35,679
there's uh also they open id such as you

737
00:27:35,679 --> 00:27:38,320
know you can use your azure um

738
00:27:38,320 --> 00:27:41,120
as your uh azure ad as your activator to

739
00:27:41,120 --> 00:27:44,159
authenticate and other other open ids

740
00:27:44,159 --> 00:27:46,000
you can use for authentication the two

741
00:27:46,000 --> 00:27:47,039
that i'm

742
00:27:47,039 --> 00:27:48,399
focused on is the

743
00:27:48,399 --> 00:27:51,440
um the x5 client client certificate you

744
00:27:51,440 --> 00:27:52,559
have to have actually balanced

745
00:27:52,559 --> 00:27:54,960
certificate and signed the right ca for

746
00:27:54,960 --> 00:27:56,159
you to actually authenticate to the

747
00:27:56,159 --> 00:27:58,640
nexus api and the second is the static

748
00:27:58,640 --> 00:28:00,799
term file authentication you also look

749
00:28:00,799 --> 00:28:02,799
at you know the downside of those two

750
00:28:02,799 --> 00:28:05,760
i've already showed that you know uh x5

751
00:28:05,760 --> 00:28:08,159
uh uh client authentication earlier here

752
00:28:08,159 --> 00:28:10,559
i am creating a

753
00:28:10,559 --> 00:28:12,880
a a certificate for myself sadie zane

754
00:28:12,880 --> 00:28:14,399
and i am actually signing the

755
00:28:14,399 --> 00:28:16,640
certificate with the ca

756
00:28:16,640 --> 00:28:19,120
api service ca that it generated

757
00:28:19,120 --> 00:28:21,520
and as you can see having the right

758
00:28:21,520 --> 00:28:24,080
correct certificate i can easily you

759
00:28:24,080 --> 00:28:25,600
know use the

760
00:28:25,600 --> 00:28:28,320
get secrets and access the kubernetes

761
00:28:28,320 --> 00:28:29,679
environment

762
00:28:29,679 --> 00:28:30,399
so

763
00:28:30,399 --> 00:28:32,320
this is the climatification

764
00:28:32,320 --> 00:28:33,760
um the

765
00:28:33,760 --> 00:28:35,760
static token it which is interesting

766
00:28:35,760 --> 00:28:38,159
when i've actually seen it used well as

767
00:28:38,159 --> 00:28:41,120
well the the format of static uh

768
00:28:41,120 --> 00:28:43,279
authentication it's uh

769
00:28:43,279 --> 00:28:45,520
it's it's basically your authentication

770
00:28:45,520 --> 00:28:48,080
essentially saved in a csv file so you

771
00:28:48,080 --> 00:28:50,720
have a password a name

772
00:28:50,720 --> 00:28:54,159
your id number and and the um

773
00:28:54,159 --> 00:28:55,840
and the the

774
00:28:55,840 --> 00:28:59,320
group so the password here is like um

775
00:28:59,320 --> 00:29:04,399
win2020 22 dollar sign saying uh zane

776
00:29:04,399 --> 00:29:07,120
and the uid01 so that

777
00:29:07,120 --> 00:29:09,360
the point is here is that actually the

778
00:29:09,360 --> 00:29:10,960
with the talk with the status open file

779
00:29:10,960 --> 00:29:13,919
authentication this information is saved

780
00:29:13,919 --> 00:29:16,559
on a csv file and that csv file needs to

781
00:29:16,559 --> 00:29:18,640
be in your api server as well so you

782
00:29:18,640 --> 00:29:21,120
need to go back to api server and then

783
00:29:21,120 --> 00:29:23,120
point in your csv

784
00:29:23,120 --> 00:29:24,399
file with the

785
00:29:24,399 --> 00:29:27,120
configuration with that password uh of

786
00:29:27,120 --> 00:29:28,720
that

787
00:29:28,720 --> 00:29:31,279
in that csv file and rebooting your

788
00:29:31,279 --> 00:29:33,520
kubernetes api server and it as you can

789
00:29:33,520 --> 00:29:36,559
see it because i've got the um the csv

790
00:29:36,559 --> 00:29:38,080
file here i can just

791
00:29:38,080 --> 00:29:40,720
use that password directly interacting

792
00:29:40,720 --> 00:29:43,520
with the api server and listing all the

793
00:29:43,520 --> 00:29:46,080
secrets so you really if for instance

794
00:29:46,080 --> 00:29:46,880
that

795
00:29:46,880 --> 00:29:49,039
someone's managed to compromise you

796
00:29:49,039 --> 00:29:52,000
um the i said that take this csv file

797
00:29:52,000 --> 00:29:54,320
they don't need to maintain persistent

798
00:29:54,320 --> 00:29:56,000
they can just use that csv file to

799
00:29:56,000 --> 00:29:58,240
authenticate to api server all the time

800
00:29:58,240 --> 00:30:00,480
and depending on on their user roles as

801
00:30:00,480 --> 00:30:02,000
well

802
00:30:02,000 --> 00:30:03,440
so the

803
00:30:03,440 --> 00:30:05,279
some of the downside of the disadvantage

804
00:30:05,279 --> 00:30:07,520
of authentications and

805
00:30:07,520 --> 00:30:09,440
certificate-based authentication as well

806
00:30:09,440 --> 00:30:12,080
as the token-based authentication

807
00:30:12,080 --> 00:30:13,679
certificates are stored on disk if

808
00:30:13,679 --> 00:30:15,039
there's somebody managed to steal your

809
00:30:15,039 --> 00:30:16,960
certificate that's a bad day because you

810
00:30:16,960 --> 00:30:19,279
really can't revoke it you have to

811
00:30:19,279 --> 00:30:21,120
reissue it but if someone's leave the

812
00:30:21,120 --> 00:30:23,440
company you have to you can revoke it

813
00:30:23,440 --> 00:30:25,279
that's the issue and if you want to

814
00:30:25,279 --> 00:30:27,679
assign a new user to a new group you

815
00:30:27,679 --> 00:30:29,279
have to

816
00:30:29,279 --> 00:30:31,520
generate a new certificate

817
00:30:31,520 --> 00:30:32,880
in terms of the

818
00:30:32,880 --> 00:30:35,440
token-based authentication

819
00:30:35,440 --> 00:30:37,600
tokens are in clear text and it's stored

820
00:30:37,600 --> 00:30:39,679
on a disk someone accessed your token on

821
00:30:39,679 --> 00:30:42,320
the disk there's a trouble they can have

822
00:30:42,320 --> 00:30:43,600
um

823
00:30:43,600 --> 00:30:46,159
access to that environment but again a

824
00:30:46,159 --> 00:30:49,039
token cannot cannot be revoked so these

825
00:30:49,039 --> 00:30:50,559
are the downsides of the actual token as

826
00:30:50,559 --> 00:30:53,360
well as client-based authentication

827
00:30:53,360 --> 00:30:54,720
um

828
00:30:54,720 --> 00:30:58,080
authorizations um

829
00:30:58,159 --> 00:30:59,919
following that authentication the

830
00:30:59,919 --> 00:31:02,399
authorizations in kubernetes essentially

831
00:31:02,399 --> 00:31:04,159
what also once the request is

832
00:31:04,159 --> 00:31:06,480
authenticated once the user service

833
00:31:06,480 --> 00:31:07,600
account provided the right

834
00:31:07,600 --> 00:31:09,519
authentication then the next step is

835
00:31:09,519 --> 00:31:10,240
they need to go through the

836
00:31:10,240 --> 00:31:12,720
authorization so what's authorization is

837
00:31:12,720 --> 00:31:14,000
you know

838
00:31:14,000 --> 00:31:15,600
there are a number of uh

839
00:31:15,600 --> 00:31:17,519
objects within the authorization which

840
00:31:17,519 --> 00:31:20,640
is the allow always allow allow deny an

841
00:31:20,640 --> 00:31:22,960
hour back and node the the one that we

842
00:31:22,960 --> 00:31:25,679
are interested in the one that we use or

843
00:31:25,679 --> 00:31:27,919
the one that actually widely used in in

844
00:31:27,919 --> 00:31:29,600
production is the rbac world-based

845
00:31:29,600 --> 00:31:31,840
access control which i'll be uh talking

846
00:31:31,840 --> 00:31:34,159
about this much more in detail um the

847
00:31:34,159 --> 00:31:36,480
right is essentially uh policy based

848
00:31:36,480 --> 00:31:38,480
control so you can decide who who can

849
00:31:38,480 --> 00:31:39,600
access

850
00:31:39,600 --> 00:31:42,320
what and what object and uh and quite

851
00:31:42,320 --> 00:31:45,600
granular control in terms of artwork

852
00:31:45,600 --> 00:31:46,399
um

853
00:31:46,399 --> 00:31:48,320
the

854
00:31:48,320 --> 00:31:49,519
the

855
00:31:49,519 --> 00:31:51,679
the uh your thread the basically

856
00:31:51,679 --> 00:31:53,919
our back as i said i the focus of our

857
00:31:53,919 --> 00:31:55,440
back is regulating access into your

858
00:31:55,440 --> 00:31:57,600
environment so in terms of our work you

859
00:31:57,600 --> 00:32:00,399
can say i want that particular user have

860
00:32:00,399 --> 00:32:03,440
that particular uh access

861
00:32:03,440 --> 00:32:04,960
with uh

862
00:32:04,960 --> 00:32:08,240
uh kind of a based on their kind of

863
00:32:08,240 --> 00:32:09,679
roles

864
00:32:09,679 --> 00:32:10,960
and their permissions within the

865
00:32:10,960 --> 00:32:13,120
organization so you don't give just

866
00:32:13,120 --> 00:32:14,960
access you know access you can actually

867
00:32:14,960 --> 00:32:16,640
restrict your

868
00:32:16,640 --> 00:32:20,320
um access to that that individual

869
00:32:20,320 --> 00:32:23,360
you can go really granular in terms of

870
00:32:23,360 --> 00:32:25,039
access

871
00:32:25,039 --> 00:32:27,600
um arabic could also be used in terms of

872
00:32:27,600 --> 00:32:29,200
the service account not just the users

873
00:32:29,200 --> 00:32:31,279
or you can apply the our concept into a

874
00:32:31,279 --> 00:32:32,640
service account that you create some

875
00:32:32,640 --> 00:32:33,679
time for

876
00:32:33,679 --> 00:32:36,240
automation etc

877
00:32:36,240 --> 00:32:38,480
there are key objects in our bank so the

878
00:32:38,480 --> 00:32:40,720
key

879
00:32:40,960 --> 00:32:43,120
our back objects are role role binding

880
00:32:43,120 --> 00:32:45,200
cluster role and cluster role button the

881
00:32:45,200 --> 00:32:47,279
things to remember is that rule is a set

882
00:32:47,279 --> 00:32:48,320
of rules

883
00:32:48,320 --> 00:32:50,799
a set of permissions um such as you know

884
00:32:50,799 --> 00:32:52,399
allow

885
00:32:52,399 --> 00:32:53,919
allow

886
00:32:53,919 --> 00:32:56,159
create polls read code etc and you have

887
00:32:56,159 --> 00:32:57,919
the role binding it basically assigns

888
00:32:57,919 --> 00:33:00,000
that role to that particular worldwide

889
00:33:00,000 --> 00:33:01,519
league so whenever you create an

890
00:33:01,519 --> 00:33:03,039
outbreak you need to have a role or role

891
00:33:03,039 --> 00:33:05,279
binding which they can basically you

892
00:33:05,279 --> 00:33:08,159
know you can assign that role

893
00:33:08,159 --> 00:33:08,960
or

894
00:33:08,960 --> 00:33:11,039
uh that uh assigned that world with a

895
00:33:11,039 --> 00:33:13,039
particular permission to a particular

896
00:33:13,039 --> 00:33:14,799
role binding uh

897
00:33:14,799 --> 00:33:16,640
on a specific name space

898
00:33:16,640 --> 00:33:18,000
and name space essentially it's

899
00:33:18,000 --> 00:33:20,159
important it is considered like a

900
00:33:20,159 --> 00:33:22,320
compartment that you can save you can

901
00:33:22,320 --> 00:33:25,120
kind of isolate isolatio

902
00:33:25,120 --> 00:33:26,640
containers

903
00:33:26,640 --> 00:33:28,080
and there's also cholesterol and

904
00:33:28,080 --> 00:33:30,080
cholesterol bindings the cholesterol and

905
00:33:30,080 --> 00:33:32,480
cholesterol binding essentially it's

906
00:33:32,480 --> 00:33:34,320
it's not name space scope so which means

907
00:33:34,320 --> 00:33:37,120
that if you have a cluster role and

908
00:33:37,120 --> 00:33:39,760
assigned to a namespace if you if you

909
00:33:39,760 --> 00:33:41,519
have a cluster on cluster world binding

910
00:33:41,519 --> 00:33:42,640
the sign

911
00:33:42,640 --> 00:33:45,919
applied to a uh a a community

912
00:33:45,919 --> 00:33:47,919
environment if somebody's mad if

913
00:33:47,919 --> 00:33:49,600
somebody managed to you know

914
00:33:49,600 --> 00:33:51,519
compromise their cluster role

915
00:33:51,519 --> 00:33:53,760
they can essentially access the whole

916
00:33:53,760 --> 00:33:54,799
uh

917
00:33:54,799 --> 00:33:57,200
kind of kubernetes name spaces so

918
00:33:57,200 --> 00:33:58,640
there's no longer actually you know one

919
00:33:58,640 --> 00:34:00,799
specific name space that you can access

920
00:34:00,799 --> 00:34:03,679
uh pretty much all other name spaces and

921
00:34:03,679 --> 00:34:06,240
sits within api server

922
00:34:06,240 --> 00:34:08,480
and as it says basically grant access to

923
00:34:08,480 --> 00:34:10,320
all the resources with a cluster or

924
00:34:10,320 --> 00:34:11,520
bundle

925
00:34:11,520 --> 00:34:14,079
so role model binding is more like a

926
00:34:14,079 --> 00:34:15,839
the service account this user with this

927
00:34:15,839 --> 00:34:16,960
permissions

928
00:34:16,960 --> 00:34:18,839
doing this and

929
00:34:18,839 --> 00:34:21,040
that um

930
00:34:21,040 --> 00:34:22,800
an example of the uh

931
00:34:22,800 --> 00:34:24,560
enabling our back again you have to go

932
00:34:24,560 --> 00:34:27,918
back to your qba qb qba api server and

933
00:34:27,918 --> 00:34:29,440
setting the right flag which is the r

934
00:34:29,440 --> 00:34:30,719
bar here

935
00:34:30,719 --> 00:34:32,800
right here

936
00:34:32,800 --> 00:34:35,359
and the for example i you know the

937
00:34:35,359 --> 00:34:37,119
demonstrating the rbac the power of our

938
00:34:37,119 --> 00:34:39,440
back here i am creating i'm applying the

939
00:34:39,440 --> 00:34:43,199
rbac uh to a user i'm using the uh

940
00:34:43,199 --> 00:34:46,239
cf ssl so which is cloudflare uh ssl

941
00:34:46,239 --> 00:34:48,879
similar to open source i open ssr

942
00:34:48,879 --> 00:34:50,800
and i'm creating myself

943
00:34:50,800 --> 00:34:53,359
a user called that user

944
00:34:53,359 --> 00:34:54,719
and

945
00:34:54,719 --> 00:34:56,879
generating a um

946
00:34:56,879 --> 00:35:00,240
a csr and a key file for that user

947
00:35:00,240 --> 00:35:02,400
and i am basically

948
00:35:02,400 --> 00:35:06,079
as an administrator i can uh request a

949
00:35:06,079 --> 00:35:08,240
certificate for that particular user

950
00:35:08,240 --> 00:35:10,640
using the csr that i've created here so

951
00:35:10,640 --> 00:35:13,599
it's in csis here and i apply that

952
00:35:13,599 --> 00:35:15,440
i applied that to the kubernetes api

953
00:35:15,440 --> 00:35:16,720
server

954
00:35:16,720 --> 00:35:18,240
essentially at the bottom you can see

955
00:35:18,240 --> 00:35:20,800
that the certificate is actually created

956
00:35:20,800 --> 00:35:22,160
but

957
00:35:22,160 --> 00:35:23,280
when the certificate is created

958
00:35:23,280 --> 00:35:24,240
obviously

959
00:35:24,240 --> 00:35:25,920
you want you want to make sure that

960
00:35:25,920 --> 00:35:26,880
whether you want to approve the

961
00:35:26,880 --> 00:35:27,920
certificate you want to see that

962
00:35:27,920 --> 00:35:29,200
certificate if it's all right for the

963
00:35:29,200 --> 00:35:31,200
right person whether you should allow or

964
00:35:31,200 --> 00:35:33,040
deny that certificate

965
00:35:33,040 --> 00:35:36,720
uh which you can using kubernetes keep

966
00:35:36,720 --> 00:35:39,440
ctl you can look at that csr

967
00:35:39,440 --> 00:35:41,520
it's the moment it's pending and i am

968
00:35:41,520 --> 00:35:45,170
it's generated basically by the master

969
00:35:45,170 --> 00:35:48,320
[Music]

970
00:35:48,480 --> 00:35:51,040
so they it's essentially generated by

971
00:35:51,040 --> 00:35:53,440
the master client and at the bottom and

972
00:35:53,440 --> 00:35:55,359
you can see that you can either keep ctl

973
00:35:55,359 --> 00:35:57,359
certificate approve or deny that

974
00:35:57,359 --> 00:35:58,960
particular sense of bits when you create

975
00:35:58,960 --> 00:36:01,520
a certificate for the user you have full

976
00:36:01,520 --> 00:36:04,960
control of what to do or not

977
00:36:06,960 --> 00:36:07,839
um

978
00:36:07,839 --> 00:36:09,760
following that i can basically then

979
00:36:09,760 --> 00:36:13,280
create a role on role binding using rbac

980
00:36:13,280 --> 00:36:15,440
so the role here is that as you can see

981
00:36:15,440 --> 00:36:17,040
from the

982
00:36:17,040 --> 00:36:18,000
um

983
00:36:18,000 --> 00:36:21,599
as you can as you can see from the uh

984
00:36:21,599 --> 00:36:24,400
essentially i'm doing a qcpl get row

985
00:36:24,400 --> 00:36:26,480
create port that particular that

986
00:36:26,480 --> 00:36:29,359
particular role has the permissions of

987
00:36:29,359 --> 00:36:31,440
the resources is the port that it can

988
00:36:31,440 --> 00:36:33,760
access but also the verbs that it can

989
00:36:33,760 --> 00:36:36,000
have access to so such as get watch list

990
00:36:36,000 --> 00:36:38,000
trade so this particular

991
00:36:38,000 --> 00:36:39,760
role if it's assigned to the right world

992
00:36:39,760 --> 00:36:41,839
binding that individual will have

993
00:36:41,839 --> 00:36:44,800
actually uh you know getting a listing

994
00:36:44,800 --> 00:36:47,920
apart getting a pod or also if you see

995
00:36:47,920 --> 00:36:50,240
that at the bottom it says support exec

996
00:36:50,240 --> 00:36:52,160
so you can execute into a port so you

997
00:36:52,160 --> 00:36:53,440
can have shell

998
00:36:53,440 --> 00:36:55,359
into that pot

999
00:36:55,359 --> 00:36:57,200
and following that once you create the

1000
00:36:57,200 --> 00:37:00,320
rule you need also create a roll binding

1001
00:37:00,320 --> 00:37:02,240
which is the rule binding i am here what

1002
00:37:02,240 --> 00:37:04,720
i'm doing here now i am i'm i'm

1003
00:37:04,720 --> 00:37:05,839
basically

1004
00:37:05,839 --> 00:37:07,839
outputting this in an enamel so that my

1005
00:37:07,839 --> 00:37:09,280
robin is called

1006
00:37:09,280 --> 00:37:12,240
read bonds and inside that report

1007
00:37:12,240 --> 00:37:13,520
there's a rule

1008
00:37:13,520 --> 00:37:17,599
which is specified the name of that

1009
00:37:17,760 --> 00:37:19,280
inside that rule binding that you can

1010
00:37:19,280 --> 00:37:21,280
specify the rule that you created which

1011
00:37:21,280 --> 00:37:24,000
is the create pod and then the user that

1012
00:37:24,000 --> 00:37:26,000
you are actually assigning this role by

1013
00:37:26,000 --> 00:37:28,400
name which i've created the dev user

1014
00:37:28,400 --> 00:37:30,880
here so once you apply that it's here

1015
00:37:30,880 --> 00:37:33,200
that use as well you can apply this role

1016
00:37:33,200 --> 00:37:35,920
and role binding that particular user so

1017
00:37:35,920 --> 00:37:37,839
that user partic

1018
00:37:37,839 --> 00:37:39,920
should be able to only have you know

1019
00:37:39,920 --> 00:37:42,880
pacific's uh access to ports specific

1020
00:37:42,880 --> 00:37:45,760
namespace but also uh specific verbs

1021
00:37:45,760 --> 00:37:47,680
such as listing nepal as opposed to you

1022
00:37:47,680 --> 00:37:49,440
know giving all the access that he needs

1023
00:37:49,440 --> 00:37:51,920
she needs

1024
00:37:52,960 --> 00:37:54,720
an example of

1025
00:37:54,720 --> 00:37:56,640
in terms of our back

1026
00:37:56,640 --> 00:37:58,480
we see a lot of overprivileged service

1027
00:37:58,480 --> 00:38:00,000
accounts in

1028
00:38:00,000 --> 00:38:02,640
on premise as well as in cloud it's an

1029
00:38:02,640 --> 00:38:04,320
even attack if an attacker able to

1030
00:38:04,320 --> 00:38:05,839
actually compromise a

1031
00:38:05,839 --> 00:38:07,920
uh port with a pr over

1032
00:38:07,920 --> 00:38:09,440
over published service account they can

1033
00:38:09,440 --> 00:38:11,760
then obviously use that service account

1034
00:38:11,760 --> 00:38:13,599
token then put it into further into your

1035
00:38:13,599 --> 00:38:15,440
environment so basically here i've

1036
00:38:15,440 --> 00:38:17,680
demonstrated how this could be done and

1037
00:38:17,680 --> 00:38:19,760
uh in that screenshot there's a there's

1038
00:38:19,760 --> 00:38:20,960
a role

1039
00:38:20,960 --> 00:38:23,040
um there's a role binding in the middle

1040
00:38:23,040 --> 00:38:24,960
and there's actually a just a port i've

1041
00:38:24,960 --> 00:38:27,520
created using the busybox standard uh

1042
00:38:27,520 --> 00:38:31,440
busybox so if you see the role itself um

1043
00:38:31,440 --> 00:38:32,880
it creates a

1044
00:38:32,880 --> 00:38:35,200
the rules basically resource type is pod

1045
00:38:35,200 --> 00:38:38,000
and the verb is um kind of a get watch

1046
00:38:38,000 --> 00:38:40,160
list and but also that particular rule

1047
00:38:40,160 --> 00:38:42,480
has pod exec which means that if that

1048
00:38:42,480 --> 00:38:45,599
rules assigned to a server's account um

1049
00:38:45,599 --> 00:38:47,839
here which is the world binding then if

1050
00:38:47,839 --> 00:38:50,480
someone actually compromised a

1051
00:38:50,480 --> 00:38:52,079
that particular service account they can

1052
00:38:52,079 --> 00:38:54,400
essentially access that that particular

1053
00:38:54,400 --> 00:38:56,480
name space that role and world binding

1054
00:38:56,480 --> 00:38:57,440
site

1055
00:38:57,440 --> 00:39:00,240
so at the bottom right as you can see um

1056
00:39:00,240 --> 00:39:03,200
i'm just uh creating a standard busy box

1057
00:39:03,200 --> 00:39:05,440
and i am assigning that service of pound

1058
00:39:05,440 --> 00:39:08,240
to it which is the uh the

1059
00:39:08,240 --> 00:39:09,760
if you can see the uh

1060
00:39:09,760 --> 00:39:11,359
um

1061
00:39:11,359 --> 00:39:13,200
the

1062
00:39:13,200 --> 00:39:15,040
yeah so the service account name is a

1063
00:39:15,040 --> 00:39:17,200
vulnerable sv

1064
00:39:17,200 --> 00:39:19,119
and so essentially this role and this

1065
00:39:19,119 --> 00:39:21,200
role binding assigned to that service

1066
00:39:21,200 --> 00:39:22,079
account

1067
00:39:22,079 --> 00:39:24,079
so once i've created that

1068
00:39:24,079 --> 00:39:26,839
particular port with the service account

1069
00:39:26,839 --> 00:39:31,280
um here what happens is is that um

1070
00:39:31,280 --> 00:39:32,240
the first

1071
00:39:32,240 --> 00:39:34,240
screenshot or the first uh

1072
00:39:34,240 --> 00:39:35,760
mark it's basically

1073
00:39:35,760 --> 00:39:38,079
applying those uh roles and role binding

1074
00:39:38,079 --> 00:39:41,359
and creating the busy box and the second

1075
00:39:41,359 --> 00:39:43,200
is that you know imagine if an attacker

1076
00:39:43,200 --> 00:39:44,800
managed to basically compromise your

1077
00:39:44,800 --> 00:39:46,880
busy box or through application or any

1078
00:39:46,880 --> 00:39:49,200
other attack vector because this role

1079
00:39:49,200 --> 00:39:50,800
and bro this service account is over

1080
00:39:50,800 --> 00:39:52,720
privileged what they can do essentially

1081
00:39:52,720 --> 00:39:54,640
they can just download keep ctl directly

1082
00:39:54,640 --> 00:39:56,720
onto the busy box and then directly

1083
00:39:56,720 --> 00:39:59,040
interacting with your uh

1084
00:39:59,040 --> 00:40:01,839
pub api server so they can directly

1085
00:40:01,839 --> 00:40:04,240
interact to that name space so here

1086
00:40:04,240 --> 00:40:06,319
following that they can then

1087
00:40:06,319 --> 00:40:07,680
um you know

1088
00:40:07,680 --> 00:40:10,480
exec into that busy box and

1089
00:40:10,480 --> 00:40:12,800
um using basically because that service

1090
00:40:12,800 --> 00:40:14,480
account is perfect over privilege they

1091
00:40:14,480 --> 00:40:16,000
can just say keep ctl because i've

1092
00:40:16,000 --> 00:40:18,480
downloaded keep cpa client teacher get

1093
00:40:18,480 --> 00:40:21,280
pod and you have all the uh other

1094
00:40:21,280 --> 00:40:23,440
actually um

1095
00:40:23,440 --> 00:40:25,359
uh microservices which is one of them is

1096
00:40:25,359 --> 00:40:28,720
docker set um because you have uh kind

1097
00:40:28,720 --> 00:40:31,280
of a pod exec permission you can then

1098
00:40:31,280 --> 00:40:35,680
you know use cheap chip cto um exit uh

1099
00:40:35,680 --> 00:40:37,680
into the door say because that's

1100
00:40:37,680 --> 00:40:39,520
basically that that service account is

1101
00:40:39,520 --> 00:40:41,520
overprivileged then you can just jump

1102
00:40:41,520 --> 00:40:44,000
from one container to another container

1103
00:40:44,000 --> 00:40:46,720
and it's in the same name space um using

1104
00:40:46,720 --> 00:40:50,000
that for overflow services

1105
00:40:50,640 --> 00:40:51,440
so

1106
00:40:51,440 --> 00:40:53,920
moving away on a premise on bare metal

1107
00:40:53,920 --> 00:40:57,119
uh speaking of uh the big basic cloud

1108
00:40:57,119 --> 00:41:00,880
kubernetes um it's one of the probably

1109
00:41:00,880 --> 00:41:03,119
most and most organization actually now

1110
00:41:03,119 --> 00:41:05,119
it's transition is from on-premise to

1111
00:41:05,119 --> 00:41:07,359
the cloud and the cloud kubernetes is

1112
00:41:07,359 --> 00:41:10,800
one of the areas that um

1113
00:41:10,800 --> 00:41:13,280
manage cloud and azure particularly aws

1114
00:41:13,280 --> 00:41:15,440
uh we see quite a lot of customers

1115
00:41:15,440 --> 00:41:17,200
actually you know taking that approach

1116
00:41:17,200 --> 00:41:18,400
because it's

1117
00:41:18,400 --> 00:41:20,800
um the

1118
00:41:20,800 --> 00:41:22,880
the responsibility of the on the cloud

1119
00:41:22,880 --> 00:41:25,440
is that you no longer have to generate

1120
00:41:25,440 --> 00:41:27,520
those certificates at all you no longer

1121
00:41:27,520 --> 00:41:29,599
have to like do the basics of security

1122
00:41:29,599 --> 00:41:32,079
all this is done for you um in terms of

1123
00:41:32,079 --> 00:41:34,800
generating certificate um authentication

1124
00:41:34,800 --> 00:41:37,040
etc that could be done through your on

1125
00:41:37,040 --> 00:41:38,880
your azure id or

1126
00:41:38,880 --> 00:41:41,760
you know or your premise ad etc so the

1127
00:41:41,760 --> 00:41:43,040
the

1128
00:41:43,040 --> 00:41:44,880
the the architecture with the cloud in

1129
00:41:44,880 --> 00:41:47,280
particular um the responsibility there's

1130
00:41:47,280 --> 00:41:48,000
a

1131
00:41:48,000 --> 00:41:50,000
there's a managed or the

1132
00:41:50,000 --> 00:41:51,119
basically

1133
00:41:51,119 --> 00:41:52,800
azure managed and there's a customer

1134
00:41:52,800 --> 00:41:55,200
managed so the customer has access to

1135
00:41:55,200 --> 00:41:56,640
basically node

1136
00:41:56,640 --> 00:42:00,640
um the uh the container runtime um

1137
00:42:00,640 --> 00:42:02,480
essentially just the node the workload

1138
00:42:02,480 --> 00:42:03,920
that you are running your

1139
00:42:03,920 --> 00:42:07,440
application whilst the uh let's

1140
00:42:07,440 --> 00:42:08,240
the

1141
00:42:08,240 --> 00:42:10,400
cloud providers such as azure they

1142
00:42:10,400 --> 00:42:12,800
managed all the key core components such

1143
00:42:12,800 --> 00:42:15,359
as the master api server its cd control

1144
00:42:15,359 --> 00:42:17,680
manager etc so you you no longer

1145
00:42:17,680 --> 00:42:21,280
actually have access to those uh uh

1146
00:42:21,280 --> 00:42:22,800
components the cool components which

1147
00:42:22,800 --> 00:42:24,079
means you don't have to

1148
00:42:24,079 --> 00:42:26,000
look at in terms of

1149
00:42:26,000 --> 00:42:27,599
security et cetera so the security of

1150
00:42:27,599 --> 00:42:30,560
that is controlled by the um the cloud

1151
00:42:30,560 --> 00:42:32,400
fighter

1152
00:42:32,400 --> 00:42:34,400
um

1153
00:42:34,400 --> 00:42:36,880
notices of time so the issues of around

1154
00:42:36,880 --> 00:42:39,119
actually uh network

1155
00:42:39,119 --> 00:42:41,760
and the areas that the issues that i see

1156
00:42:41,760 --> 00:42:44,000
in a in the cloud environment with

1157
00:42:44,000 --> 00:42:45,599
kubernetes services

1158
00:42:45,599 --> 00:42:47,599
uh it's basically as follows network

1159
00:42:47,599 --> 00:42:51,280
security um and network policy secrets

1160
00:42:51,280 --> 00:42:52,960
and port security policy this is the

1161
00:42:52,960 --> 00:42:55,040
areas that i you know come across and we

1162
00:42:55,040 --> 00:42:57,040
tend to kind of find over and over

1163
00:42:57,040 --> 00:42:59,520
issues with that um one of the the

1164
00:42:59,520 --> 00:43:02,640
issues with the um

1165
00:43:02,640 --> 00:43:05,680
networking and for some reason it's uh

1166
00:43:05,680 --> 00:43:06,720
kind of

1167
00:43:06,720 --> 00:43:07,760
most

1168
00:43:07,760 --> 00:43:09,280
cloud environment i see networking

1169
00:43:09,280 --> 00:43:11,440
actually ignored for some reason they

1170
00:43:11,440 --> 00:43:13,040
think that just because they've you know

1171
00:43:13,040 --> 00:43:15,200
used kubernetes a container kubernetes

1172
00:43:15,200 --> 00:43:16,960
environment orchestration system you

1173
00:43:16,960 --> 00:43:19,280
know it's by by default it's secure

1174
00:43:19,280 --> 00:43:21,359
that's not the case the network is still

1175
00:43:21,359 --> 00:43:22,319
you know

1176
00:43:22,319 --> 00:43:24,400
part of your day-to-day actually you

1177
00:43:24,400 --> 00:43:26,240
know making sure that you know your

1178
00:43:26,240 --> 00:43:29,040
network is done correctly uh in terms of

1179
00:43:29,040 --> 00:43:30,400
traffic flow

1180
00:43:30,400 --> 00:43:31,440
um

1181
00:43:31,440 --> 00:43:33,440
within networking um

1182
00:43:33,440 --> 00:43:35,119
there's internal networking and external

1183
00:43:35,119 --> 00:43:36,880
networking the

1184
00:43:36,880 --> 00:43:38,960
antenna network within the kubernetes is

1185
00:43:38,960 --> 00:43:41,280
a traffic flow between the poles between

1186
00:43:41,280 --> 00:43:43,119
namespaces etc

1187
00:43:43,119 --> 00:43:45,119
from external network perspective it's

1188
00:43:45,119 --> 00:43:47,280
where you'll basically work loads down

1189
00:43:47,280 --> 00:43:49,200
in its law side so you're to the

1190
00:43:49,200 --> 00:43:51,598
internet

1191
00:43:51,920 --> 00:43:54,240
some of the issues in network uh

1192
00:43:54,240 --> 00:43:55,920
security

1193
00:43:55,920 --> 00:43:57,359
uh

1194
00:43:57,359 --> 00:44:00,560
by default your network your basically

1195
00:44:00,560 --> 00:44:02,480
azure's kubernetes

1196
00:44:02,480 --> 00:44:05,200
api server it's exposed to the public

1197
00:44:05,200 --> 00:44:06,800
there is no restrictions on it so anyone

1198
00:44:06,800 --> 00:44:09,200
can actually access to your cube api

1199
00:44:09,200 --> 00:44:10,240
server

1200
00:44:10,240 --> 00:44:13,119
um and if they can access the api server

1201
00:44:13,119 --> 00:44:14,960
there's a zero day for instance if they

1202
00:44:14,960 --> 00:44:18,400
have a token they can interact with the

1203
00:44:18,400 --> 00:44:20,319
api server anywhere because there are no

1204
00:44:20,319 --> 00:44:22,319
restrictions and then interact with your

1205
00:44:22,319 --> 00:44:23,680
workload such as your containers

1206
00:44:23,680 --> 00:44:25,680
applications and starts you know

1207
00:44:25,680 --> 00:44:28,079
exploding extra checking data et cetera

1208
00:44:28,079 --> 00:44:28,960
so

1209
00:44:28,960 --> 00:44:30,720
there is no restriction basically to api

1210
00:44:30,720 --> 00:44:31,760
server

1211
00:44:31,760 --> 00:44:35,200
um so in this example is that um i'm

1212
00:44:35,200 --> 00:44:37,680
using the chip ctrl config view i'm just

1213
00:44:37,680 --> 00:44:40,720
listing the my api server on the azure

1214
00:44:40,720 --> 00:44:43,200
managed kubernetes servers and i'm doing

1215
00:44:43,200 --> 00:44:45,760
a quick just the nmap scan from there

1216
00:44:45,760 --> 00:44:48,720
from my box outside of the kubernetes as

1217
00:44:48,720 --> 00:44:50,160
you can see you know they are obviously

1218
00:44:50,160 --> 00:44:52,160
your https which is the api server is

1219
00:44:52,160 --> 00:44:54,319
running on but also microsoft thinks

1220
00:44:54,319 --> 00:44:57,040
that port 9000 it's it's okay you know

1221
00:44:57,040 --> 00:44:58,960
security through obscurity you know

1222
00:44:58,960 --> 00:45:01,280
changing port 22 to 9000

1223
00:45:01,280 --> 00:45:03,839
hiding it in a way that thinking okay

1224
00:45:03,839 --> 00:45:04,880
well you know

1225
00:45:04,880 --> 00:45:07,280
people don't see this as an ssh

1226
00:45:07,280 --> 00:45:09,680
but if somebody have the right uh

1227
00:45:09,680 --> 00:45:12,319
authentication rights rights uh

1228
00:45:12,319 --> 00:45:13,920
stretch key etc they can directly

1229
00:45:13,920 --> 00:45:15,599
connect it

1230
00:45:15,599 --> 00:45:17,599
the point is not just the ssh it's the

1231
00:45:17,599 --> 00:45:20,000
api server your apis is exposed and the

1232
00:45:20,000 --> 00:45:23,040
apis api set is a rest based api so if

1233
00:45:23,040 --> 00:45:24,560
you have the right token rights

1234
00:45:24,560 --> 00:45:26,480
authentication you can directly interact

1235
00:45:26,480 --> 00:45:28,480
with it anywhere in the world so i am

1236
00:45:28,480 --> 00:45:30,240
demonstrating it here

1237
00:45:30,240 --> 00:45:32,480
just how how an attacker would go about

1238
00:45:32,480 --> 00:45:33,920
doing that

1239
00:45:33,920 --> 00:45:35,599
you you have a container and your

1240
00:45:35,599 --> 00:45:38,079
container gets compromised and you base

1241
00:45:38,079 --> 00:45:40,560
you know attacker mounts the

1242
00:45:40,560 --> 00:45:42,720
token the service token which sits in

1243
00:45:42,720 --> 00:45:43,920
the

1244
00:45:43,920 --> 00:45:47,359
humanities service account token

1245
00:45:47,359 --> 00:45:49,040
you can mount that token and then you

1246
00:45:49,040 --> 00:45:51,599
can copy that token to your machine

1247
00:45:51,599 --> 00:45:54,400
from the compromise box and then using

1248
00:45:54,400 --> 00:45:55,680
that token

1249
00:45:55,680 --> 00:45:57,440
um you can directly interact with the

1250
00:45:57,440 --> 00:45:59,520
api server so

1251
00:45:59,520 --> 00:46:02,480
attacker compromise a container attack a

1252
00:46:02,480 --> 00:46:03,920
mount a token

1253
00:46:03,920 --> 00:46:06,800
copies that token to his machine

1254
00:46:06,800 --> 00:46:08,560
uses that token directly interacting

1255
00:46:08,560 --> 00:46:10,240
with your api server if you have

1256
00:46:10,240 --> 00:46:12,240
restricted your api server that would

1257
00:46:12,240 --> 00:46:13,680
never happen because even they have a

1258
00:46:13,680 --> 00:46:15,280
token they can't directly

1259
00:46:15,280 --> 00:46:17,040
speak to your api server

1260
00:46:17,040 --> 00:46:18,240
how do you how do you go about

1261
00:46:18,240 --> 00:46:21,680
mitigating that um

1262
00:46:21,680 --> 00:46:23,839
you need to restrict your api servers to

1263
00:46:23,839 --> 00:46:25,920
the internet which could be done in a

1264
00:46:25,920 --> 00:46:29,240
network policy

1265
00:46:40,560 --> 00:46:41,760
and so that

1266
00:46:41,760 --> 00:46:43,920
the mitigation is to restrict your api

1267
00:46:43,920 --> 00:46:46,000
server to outside making sure that it's

1268
00:46:46,000 --> 00:46:48,160
contained just applying the same network

1269
00:46:48,160 --> 00:46:51,040
principles that you do in your database

1270
00:46:51,040 --> 00:46:52,240
um

1271
00:46:52,240 --> 00:46:54,880
the other issues that we do is that

1272
00:46:54,880 --> 00:46:56,560
accessing to the

1273
00:46:56,560 --> 00:46:57,010
um

1274
00:46:57,010 --> 00:46:59,359
[Music]

1275
00:46:59,359 --> 00:47:01,680
vm metadata within the azure so if you

1276
00:47:01,680 --> 00:47:04,160
compromise the box if you uh compromise

1277
00:47:04,160 --> 00:47:07,040
the a container inside the azure cluster

1278
00:47:07,040 --> 00:47:09,440
you can directly interact with the vm

1279
00:47:09,440 --> 00:47:10,800
instance metadata if you don't have

1280
00:47:10,800 --> 00:47:12,800
network policy in place which i see it

1281
00:47:12,800 --> 00:47:14,960
over and over what happens is an

1282
00:47:14,960 --> 00:47:17,359
attacker compromises a container

1283
00:47:17,359 --> 00:47:20,800
and he and she basically

1284
00:47:20,800 --> 00:47:23,040
uses the you know the downloads curl if

1285
00:47:23,040 --> 00:47:24,400
ko is not installed

1286
00:47:24,400 --> 00:47:26,720
probably installed and he uses basically

1287
00:47:26,720 --> 00:47:28,400
metadata or true

1288
00:47:28,400 --> 00:47:29,760
uh and the

1289
00:47:29,760 --> 00:47:33,359
azure's uh uh kind of api server

1290
00:47:33,359 --> 00:47:35,599
uh metadata api server and then in track

1291
00:47:35,599 --> 00:47:37,680
it basically dumps all these information

1292
00:47:37,680 --> 00:47:39,520
so in this instance obviously it's you

1293
00:47:39,520 --> 00:47:41,040
just see private data but in my

1294
00:47:41,040 --> 00:47:43,200
experience i've seen tokens i've seen

1295
00:47:43,200 --> 00:47:46,480
secrets are kept in the gm uh kind of a

1296
00:47:46,480 --> 00:47:49,359
metadata in azure so you're

1297
00:47:49,359 --> 00:47:51,040
you're basically

1298
00:47:51,040 --> 00:47:53,040
mitigating around that is to ensure that

1299
00:47:53,040 --> 00:47:54,720
you are restricting your

1300
00:47:54,720 --> 00:47:56,480
risk from your network policy you want

1301
00:47:56,480 --> 00:47:59,599
to make sure that your

1302
00:47:59,599 --> 00:48:00,640
azure

1303
00:48:00,640 --> 00:48:03,359
vm metadata is restricted so which is

1304
00:48:03,359 --> 00:48:04,960
sits on a

1305
00:48:04,960 --> 00:48:05,520
one six nine 169

1306
00:48:05,520 --> 00:48:08,000
five four slash stage two because that's

1307
00:48:08,000 --> 00:48:10,400
just one ip so you can actually mitigate

1308
00:48:10,400 --> 00:48:13,680
that as well um and why is

1309
00:48:13,680 --> 00:48:15,359
provided that you have another balcony

1310
00:48:15,359 --> 00:48:17,839
in place

1311
00:48:19,040 --> 00:48:20,720
the other issue is that once you've you

1312
00:48:20,720 --> 00:48:22,400
know if an attacker have access to your

1313
00:48:22,400 --> 00:48:24,640
cluster somehow or gain

1314
00:48:24,640 --> 00:48:27,440
uh you know code executions and or store

1315
00:48:27,440 --> 00:48:29,839
your token certificates

1316
00:48:29,839 --> 00:48:31,839
gain access to a uh

1317
00:48:31,839 --> 00:48:32,880
one of the

1318
00:48:32,880 --> 00:48:34,960
microservices

1319
00:48:34,960 --> 00:48:36,960
between the microservices

1320
00:48:36,960 --> 00:48:39,359
and the if your network policy is not in

1321
00:48:39,359 --> 00:48:41,280
place what happens is that you know

1322
00:48:41,280 --> 00:48:44,400
attacker could easily uh you know also

1323
00:48:44,400 --> 00:48:46,319
use that as a pivoting point into your

1324
00:48:46,319 --> 00:48:48,640
node so in a node is a worker worker

1325
00:48:48,640 --> 00:48:50,160
node essentially that's where all your

1326
00:48:50,160 --> 00:48:52,960
work uh or your basically workload live

1327
00:48:52,960 --> 00:48:54,880
so if they can you know because

1328
00:48:54,880 --> 00:48:56,800
um there's no network policy or

1329
00:48:56,800 --> 00:48:58,400
workloads by default actually listening

1330
00:48:58,400 --> 00:49:01,280
on port uh 22 or sage they can also

1331
00:49:01,280 --> 00:49:03,359
pivot from that container

1332
00:49:03,359 --> 00:49:05,200
back into your workload and if they

1333
00:49:05,200 --> 00:49:07,520
compromise the workload they compromise

1334
00:49:07,520 --> 00:49:08,800
the entire

1335
00:49:08,800 --> 00:49:11,839
basically uh clusters of uh

1336
00:49:11,839 --> 00:49:13,359
microservices because that's where their

1337
00:49:13,359 --> 00:49:16,160
workload sits it's only

1338
00:49:16,160 --> 00:49:18,480
on the

1339
00:49:18,640 --> 00:49:20,960
nodes

1340
00:49:21,119 --> 00:49:21,920
um

1341
00:49:21,920 --> 00:49:24,800
network policy a by default there are no

1342
00:49:24,800 --> 00:49:28,160
net policies and if you donate enable it

1343
00:49:28,160 --> 00:49:30,240
in the first place in azure you

1344
00:49:30,240 --> 00:49:31,440
basically have to tear down your

1345
00:49:31,440 --> 00:49:33,520
environment and go up again

1346
00:49:33,520 --> 00:49:35,599
and enable network policy so you want to

1347
00:49:35,599 --> 00:49:38,640
if you are deploying your kubernetes

1348
00:49:38,640 --> 00:49:40,880
services in the um

1349
00:49:40,880 --> 00:49:43,119
in azure you want to make sure that you

1350
00:49:43,119 --> 00:49:45,119
basically enable network policy in the

1351
00:49:45,119 --> 00:49:47,520
first place so

1352
00:49:47,520 --> 00:49:49,200
areas that you want to

1353
00:49:49,200 --> 00:49:51,040
mitigate it's in the first place you

1354
00:49:51,040 --> 00:49:53,359
want to have a network policy that

1355
00:49:53,359 --> 00:49:56,000
isolates both inverse policy so all the

1356
00:49:56,000 --> 00:49:57,680
basically traffic

1357
00:49:57,680 --> 00:49:59,760
incoming traffic from outside you wanna

1358
00:49:59,760 --> 00:50:02,480
you wanna stop that in the first place

1359
00:50:02,480 --> 00:50:04,160
um obviously not in production this

1360
00:50:04,160 --> 00:50:05,599
needs to be done in a

1361
00:50:05,599 --> 00:50:08,319
uh right way and once following that you

1362
00:50:08,319 --> 00:50:09,520
can

1363
00:50:09,520 --> 00:50:10,960
um

1364
00:50:10,960 --> 00:50:12,880
uh following that what you can do it's

1365
00:50:12,880 --> 00:50:15,520
uh yeah so this is the ingress policy

1366
00:50:15,520 --> 00:50:17,920
and then you

1367
00:50:17,920 --> 00:50:21,119
allow explicit uh internet connectivity

1368
00:50:21,119 --> 00:50:23,520
inside the pod inside your cluster back

1369
00:50:23,520 --> 00:50:25,440
to the internet because you used ingress

1370
00:50:25,440 --> 00:50:28,000
uh you basically restricted traffic

1371
00:50:28,000 --> 00:50:29,280
coming in

1372
00:50:29,280 --> 00:50:32,000
you can then be in control

1373
00:50:32,000 --> 00:50:34,240
what sport or which name space which

1374
00:50:34,240 --> 00:50:36,160
workload to basically connect to our

1375
00:50:36,160 --> 00:50:37,920
site using network box

1376
00:50:37,920 --> 00:50:39,359
so you can just say i want to be

1377
00:50:39,359 --> 00:50:41,599
explicit in terms of uh

1378
00:50:41,599 --> 00:50:42,960
specific uh

1379
00:50:42,960 --> 00:50:45,280
port selector so i can specify

1380
00:50:45,280 --> 00:50:47,680
port 8.2 uh

1381
00:50:47,680 --> 00:50:50,559
from namespace admin did go outside the

1382
00:50:50,559 --> 00:50:52,480
rest should you know communicate

1383
00:50:52,480 --> 00:50:55,760
internally only and following that

1384
00:50:55,760 --> 00:50:57,280
you can then

1385
00:50:57,280 --> 00:50:59,280
you can basically then create a network

1386
00:50:59,280 --> 00:51:02,160
policy that creates uh explicit

1387
00:51:02,160 --> 00:51:03,760
communication between

1388
00:51:03,760 --> 00:51:05,200
uh

1389
00:51:05,200 --> 00:51:07,280
from namespace to namespace because if

1390
00:51:07,280 --> 00:51:09,359
you apply the first two rules ingress as

1391
00:51:09,359 --> 00:51:11,839
well as the internet uh if you kill the

1392
00:51:11,839 --> 00:51:14,960
ingress uh electric uh

1393
00:51:14,960 --> 00:51:16,559
if you apply the ingress essentially

1394
00:51:16,559 --> 00:51:18,480
what happens you're pulled your

1395
00:51:18,480 --> 00:51:20,319
communications between each name space

1396
00:51:20,319 --> 00:51:22,400
and each pulse actually also stops right

1397
00:51:22,400 --> 00:51:24,079
so you need to be you know finally you

1398
00:51:24,079 --> 00:51:25,839
need to be explicit in terms of

1399
00:51:25,839 --> 00:51:28,160
communication between this name space to

1400
00:51:28,160 --> 00:51:30,319
that name space from that point to that

1401
00:51:30,319 --> 00:51:32,720
you know a to that point b because

1402
00:51:32,720 --> 00:51:34,079
otherwise things would actually stop

1403
00:51:34,079 --> 00:51:36,000
working

1404
00:51:36,000 --> 00:51:37,599
um the

1405
00:51:37,599 --> 00:51:39,440
azure communities

1406
00:51:39,440 --> 00:51:41,119
by default

1407
00:51:41,119 --> 00:51:42,880
secrets are

1408
00:51:42,880 --> 00:51:46,559
not they basically base 64 encoded

1409
00:51:46,559 --> 00:51:48,640
there's no encryptions

1410
00:51:48,640 --> 00:51:50,559
so your secrets if somebody has access

1411
00:51:50,559 --> 00:51:51,520
to

1412
00:51:51,520 --> 00:51:53,040
access to a configuration file

1413
00:51:53,040 --> 00:51:54,880
authentication they can just do keep ctl

1414
00:51:54,880 --> 00:51:57,119
secrets dump audio secrets

1415
00:51:57,119 --> 00:51:59,839
and and as you can see here i'm creating

1416
00:51:59,839 --> 00:52:03,200
a standard secret um using the native

1417
00:52:03,200 --> 00:52:04,400
kubernetes

1418
00:52:04,400 --> 00:52:05,520
uh

1419
00:52:05,520 --> 00:52:08,400
secret management essentially is a

1420
00:52:08,400 --> 00:52:11,119
um a base64 i'm creating an admin here

1421
00:52:11,119 --> 00:52:14,400
and then an user and i am applying the

1422
00:52:14,400 --> 00:52:17,599
secret what i call the database secret

1423
00:52:17,599 --> 00:52:20,000
and so if somebody access to this

1424
00:52:20,000 --> 00:52:22,079
configuration file now they can also

1425
00:52:22,079 --> 00:52:24,160
decrypt that quite easily using you know

1426
00:52:24,160 --> 00:52:26,640
just output that to base64 and then you

1427
00:52:26,640 --> 00:52:29,359
advocate expand so the recommendation is

1428
00:52:29,359 --> 00:52:32,559
one one one when kubernetes calls us

1429
00:52:32,559 --> 00:52:34,000
secrets actually it's not secret it's a

1430
00:52:34,000 --> 00:52:36,800
base64 so my recommendations or

1431
00:52:36,800 --> 00:52:39,920
recommendation i i tend to apply to my

1432
00:52:39,920 --> 00:52:42,079
uh customers are you know make sure you

1433
00:52:42,079 --> 00:52:43,599
actually use you know

1434
00:52:43,599 --> 00:52:46,640
cloud providers secret management in aws

1435
00:52:46,640 --> 00:52:49,920
aka ski vault or gcp if you are using

1436
00:52:49,920 --> 00:52:53,680
gcp or third-party open source um

1437
00:52:53,680 --> 00:52:56,000
cyber art and hashicorp these are

1438
00:52:56,000 --> 00:52:57,119
actually the alternative that you can

1439
00:52:57,119 --> 00:52:59,680
really manage your secret in a uh kind

1440
00:52:59,680 --> 00:53:02,480
of a severe way

1441
00:53:04,240 --> 00:53:07,680
yeah discuss this and the final the

1442
00:53:07,680 --> 00:53:09,359
aspect of the

1443
00:53:09,359 --> 00:53:11,359
issues that we tend to see in

1444
00:53:11,359 --> 00:53:12,480
cloud

1445
00:53:12,480 --> 00:53:15,760
deployment is that lack of psp so port

1446
00:53:15,760 --> 00:53:18,240
security policy so in particular issues

1447
00:53:18,240 --> 00:53:19,920
that we see that containers are running

1448
00:53:19,920 --> 00:53:20,960
in the high

1449
00:53:20,960 --> 00:53:23,200
uh kind of it runs in kind of a high

1450
00:53:23,200 --> 00:53:24,800
privileged

1451
00:53:24,800 --> 00:53:27,200
uids so such as if you example if you

1452
00:53:27,200 --> 00:53:28,400
just deploy

1453
00:53:28,400 --> 00:53:31,359
uh using cube ctl and then deploy bring

1454
00:53:31,359 --> 00:53:32,640
in an image from

1455
00:53:32,640 --> 00:53:36,480
uh a registry uh a kind of a repository

1456
00:53:36,480 --> 00:53:38,480
your image will insta if you don't have

1457
00:53:38,480 --> 00:53:40,720
a psp or is your security

1458
00:53:40,720 --> 00:53:43,200
context enabled uh you basically your

1459
00:53:43,200 --> 00:53:45,440
your image will run in a high kind of a

1460
00:53:45,440 --> 00:53:48,319
privileged id so such as uid0 because

1461
00:53:48,319 --> 00:53:50,240
you don't want to have your port or your

1462
00:53:50,240 --> 00:53:52,000
containers run with that

1463
00:53:52,000 --> 00:53:54,079
well that's obvious reason because

1464
00:53:54,079 --> 00:53:55,440
somebody compromised this they could

1465
00:53:55,440 --> 00:53:57,359
escape from that they could do a lot of

1466
00:53:57,359 --> 00:54:00,800
this maintain persistence etc etc so um

1467
00:54:00,800 --> 00:54:02,160
the

1468
00:54:02,160 --> 00:54:04,079
alternative to that is that you can

1469
00:54:04,079 --> 00:54:06,400
apply security context psp or security

1470
00:54:06,400 --> 00:54:08,960
policy which is essentially you can

1471
00:54:08,960 --> 00:54:10,720
either do it in the container level or

1472
00:54:10,720 --> 00:54:13,280
at the pod level um at the container

1473
00:54:13,280 --> 00:54:15,359
level you can enable you know

1474
00:54:15,359 --> 00:54:17,760
specific uids so you can say uid

1475
00:54:17,760 --> 00:54:19,599
thousand instead of actually giving it

1476
00:54:19,599 --> 00:54:23,200
uid one and when you run that uh you

1477
00:54:23,200 --> 00:54:25,440
as you can see if when when i create the

1478
00:54:25,440 --> 00:54:26,480
uh

1479
00:54:26,480 --> 00:54:29,040
a new port with the psp security context

1480
00:54:29,040 --> 00:54:31,680
enabled and in fact the last screenshot

1481
00:54:31,680 --> 00:54:33,920
that you can see that is actually the id

1482
00:54:33,920 --> 00:54:35,520
is no longer

1483
00:54:35,520 --> 00:54:36,319
the

1484
00:54:36,319 --> 00:54:39,839
ui zero uid thousand so it's running

1485
00:54:39,839 --> 00:54:44,240
under um a different user id

1486
00:54:45,440 --> 00:54:47,280
i think that was all uh apologies

1487
00:54:47,280 --> 00:54:49,359
kubernetes it's quite actually

1488
00:54:49,359 --> 00:54:50,559
hard

1489
00:54:50,559 --> 00:54:52,480
it's complicated but uh

1490
00:54:52,480 --> 00:54:55,119
yeah i i tried my best to describe it as

1491
00:54:55,119 --> 00:54:58,480
or everything in an hour or less any any

1492
00:54:58,480 --> 00:55:00,880
questions

1493
00:55:01,440 --> 00:55:03,200
or you can catch me afterward we can

1494
00:55:03,200 --> 00:55:04,960
definitely talk about it

1495
00:55:04,960 --> 00:55:07,960
guys

