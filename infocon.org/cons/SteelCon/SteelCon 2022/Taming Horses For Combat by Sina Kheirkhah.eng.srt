1
00:00:03,520 --> 00:00:05,680
uh hello everyone uh welcome to this

2
00:00:05,680 --> 00:00:08,000
talk today we're going to talk about uh

3
00:00:08,000 --> 00:00:10,960
taming courses for combat uh i'm cinna

4
00:00:10,960 --> 00:00:13,920
uh i'll currently work in mdsac

5
00:00:13,920 --> 00:00:15,360
a quick uh

6
00:00:15,360 --> 00:00:17,520
even more quick introduction about me

7
00:00:17,520 --> 00:00:19,760
application security engineer at mdsec

8
00:00:19,760 --> 00:00:21,199
part of the exploit development group

9
00:00:21,199 --> 00:00:22,880
which we have

10
00:00:22,880 --> 00:00:24,720
and also i do

11
00:00:24,720 --> 00:00:27,199
i work with microsoft from here and then

12
00:00:27,199 --> 00:00:29,119
and uh you can follow me on twitter at

13
00:00:29,119 --> 00:00:31,439
cincinology if you had any questions

14
00:00:31,439 --> 00:00:33,680
or you wanted to do any collaboration

15
00:00:33,680 --> 00:00:36,160
on certain projects

16
00:00:36,160 --> 00:00:38,239
so um first we're going to talk about

17
00:00:38,239 --> 00:00:40,719
what are memory horses and

18
00:00:40,719 --> 00:00:42,960
that you can ride them or not different

19
00:00:42,960 --> 00:00:44,879
type of memory horses and

20
00:00:44,879 --> 00:00:46,239
first of all we're going to talk about

21
00:00:46,239 --> 00:00:46,960
like

22
00:00:46,960 --> 00:00:48,640
what's the definition and then we're

23
00:00:48,640 --> 00:00:50,320
going to take a look at creating memory

24
00:00:50,320 --> 00:00:54,000
horses in tomcat asp.net and flask in

25
00:00:54,000 --> 00:00:55,199
python

26
00:00:55,199 --> 00:00:56,960
this is mostly technique it's not

27
00:00:56,960 --> 00:00:59,440
limited to any frameworks or

28
00:00:59,440 --> 00:01:02,160
technologies it's just a technique again

29
00:01:02,160 --> 00:01:03,520
and then

30
00:01:03,520 --> 00:01:04,799
we're going to talk about a little bit

31
00:01:04,799 --> 00:01:07,200
about the detection

32
00:01:07,200 --> 00:01:09,600
so what are memory horses the concept of

33
00:01:09,600 --> 00:01:12,080
a memory horse is basically a web shell

34
00:01:12,080 --> 00:01:12,799
but

35
00:01:12,799 --> 00:01:14,720
which resides in the memory

36
00:01:14,720 --> 00:01:17,520
this will be happening by exploiting

37
00:01:17,520 --> 00:01:19,439
the concept of

38
00:01:19,439 --> 00:01:20,400
having

39
00:01:20,400 --> 00:01:22,960
multiple components during the runtime

40
00:01:22,960 --> 00:01:24,960
when you have a framework for example

41
00:01:24,960 --> 00:01:27,360
when you have when you're using tomcat

42
00:01:27,360 --> 00:01:30,000
or a spring you have some components

43
00:01:30,000 --> 00:01:31,520
which are inside the jvm when the

44
00:01:31,520 --> 00:01:33,119
application starts and whenever you make

45
00:01:33,119 --> 00:01:35,040
it change the code you need to restart

46
00:01:35,040 --> 00:01:37,520
your container restart your web server

47
00:01:37,520 --> 00:01:39,680
so that means there are some objects

48
00:01:39,680 --> 00:01:40,799
that gets

49
00:01:40,799 --> 00:01:42,240
registered during the run time and

50
00:01:42,240 --> 00:01:43,840
residing the runtime

51
00:01:43,840 --> 00:01:46,240
by using the memory horse technique or

52
00:01:46,240 --> 00:01:48,479
web shells you can basically register

53
00:01:48,479 --> 00:01:50,240
your malicious components during the

54
00:01:50,240 --> 00:01:52,799
runtime of the application

55
00:01:52,799 --> 00:01:54,560
by using a vulnerability such as a

56
00:01:54,560 --> 00:01:56,960
deserialization or code injection

57
00:01:56,960 --> 00:01:57,920
and

58
00:01:57,920 --> 00:01:58,960
with that

59
00:01:58,960 --> 00:02:00,960
you can have a malicious component

60
00:02:00,960 --> 00:02:03,040
registered in the application without

61
00:02:03,040 --> 00:02:05,840
touching the disk

62
00:02:06,079 --> 00:02:08,080
uh the reason that we need these memory

63
00:02:08,080 --> 00:02:10,639
horses is because uh not a lot of

64
00:02:10,639 --> 00:02:13,200
adversaries uh red teamers offensive

65
00:02:13,200 --> 00:02:15,599
guys basically don't use them because

66
00:02:15,599 --> 00:02:18,080
they're a little bit difficult to craft

67
00:02:18,080 --> 00:02:21,280
interestingly interesting interesting

68
00:02:21,280 --> 00:02:22,720
in the chinese

69
00:02:22,720 --> 00:02:24,640
and the eastern

70
00:02:24,640 --> 00:02:26,480
eastern market of

71
00:02:26,480 --> 00:02:29,360
offensive researchers they heavily use

72
00:02:29,360 --> 00:02:32,239
this technique but it's quite funny that

73
00:02:32,239 --> 00:02:33,680
it's not being that

74
00:02:33,680 --> 00:02:36,319
well known currently in the main market

75
00:02:36,319 --> 00:02:37,360
maybe

76
00:02:37,360 --> 00:02:38,400
and uh

77
00:02:38,400 --> 00:02:40,319
yeah they're not heavily signature like

78
00:02:40,319 --> 00:02:42,000
the rest of the uh rest of the

79
00:02:42,000 --> 00:02:43,599
techniques which we have like uploading

80
00:02:43,599 --> 00:02:47,280
a jsp or a php or aspx this is basically

81
00:02:47,280 --> 00:02:49,360
uh injecting code during the memory

82
00:02:49,360 --> 00:02:52,400
using a web vulnerability

83
00:02:52,400 --> 00:02:54,319
how do we craft these and how do we

84
00:02:54,319 --> 00:02:55,680
basically inject them in an application

85
00:02:55,680 --> 00:02:58,080
as i said using different kind of

86
00:02:58,080 --> 00:02:59,760
exploitation techniques such as for

87
00:02:59,760 --> 00:03:01,840
example deserialization template

88
00:03:01,840 --> 00:03:04,319
injection spell injection or glx

89
00:03:04,319 --> 00:03:06,879
exfoliation or any kind of other server

90
00:03:06,879 --> 00:03:09,840
side code injection you can inject a

91
00:03:09,840 --> 00:03:12,080
malicious component based on the

92
00:03:12,080 --> 00:03:15,360
framework which you're exploiting

93
00:03:15,360 --> 00:03:17,440
the technique of memory horses was first

94
00:03:17,440 --> 00:03:19,280
discovered and researched by land grade

95
00:03:19,280 --> 00:03:22,800
back in 2016 but it wasn't the research

96
00:03:22,800 --> 00:03:25,760
wasn't continued and also it wasn't it

97
00:03:25,760 --> 00:03:29,040
didn't cover other type of uh frameworks

98
00:03:29,040 --> 00:03:31,680
it only covered uh

99
00:03:31,680 --> 00:03:33,840
java a little bit but didn't go after

100
00:03:33,840 --> 00:03:37,920
nets and uh python frameworks

101
00:03:38,080 --> 00:03:40,239
so far this these are the these are the

102
00:03:40,239 --> 00:03:42,560
memory courses or web shells which i've

103
00:03:42,560 --> 00:03:45,760
worked on to try to create a poc forum

104
00:03:45,760 --> 00:03:48,400
which hopefully will be released in mdc

105
00:03:48,400 --> 00:03:49,680
github

106
00:03:49,680 --> 00:03:51,920
for java if you're exploiting something

107
00:03:51,920 --> 00:03:54,319
like a tomcat you have exploitation of a

108
00:03:54,319 --> 00:03:56,720
servlet api you can

109
00:03:56,720 --> 00:03:59,120
register your malicious filter

110
00:03:59,120 --> 00:04:01,840
servlet or a listener when it comes to a

111
00:04:01,840 --> 00:04:03,840
spring we have two other components a

112
00:04:03,840 --> 00:04:05,519
little bit different but kind of same

113
00:04:05,519 --> 00:04:07,760
concept with different names interceptor

114
00:04:07,760 --> 00:04:09,280
and controller

115
00:04:09,280 --> 00:04:11,519
it can be more advanced when it comes to

116
00:04:11,519 --> 00:04:13,439
exploiting the

117
00:04:13,439 --> 00:04:16,079
memory horses uh which you can use java

118
00:04:16,079 --> 00:04:18,320
instrumentation inject the java engine

119
00:04:18,320 --> 00:04:20,399
during the runtime but that is a bit

120
00:04:20,399 --> 00:04:22,639
difficult and when it comes to net we

121
00:04:22,639 --> 00:04:24,880
have filter routes http listeners

122
00:04:24,880 --> 00:04:26,240
virtual paths

123
00:04:26,240 --> 00:04:28,560
and uh python um

124
00:04:28,560 --> 00:04:30,080
i don't i couldn't find the name so i

125
00:04:30,080 --> 00:04:32,000
just put flask

126
00:04:32,000 --> 00:04:33,520
uh first we're gonna take a look at

127
00:04:33,520 --> 00:04:36,960
tomcat and how uh how memory horses are

128
00:04:36,960 --> 00:04:39,199
uh how member horses work in tomcat if

129
00:04:39,199 --> 00:04:40,800
you if you can understand that because

130
00:04:40,800 --> 00:04:42,639
this one is the most difficult one you

131
00:04:42,639 --> 00:04:45,120
can basically understand the technique

132
00:04:45,120 --> 00:04:46,160
itself

133
00:04:46,160 --> 00:04:48,639
and then uh you can use the technique in

134
00:04:48,639 --> 00:04:50,800
any kind of other frameworks because uh

135
00:04:50,800 --> 00:04:54,639
tomcat goes very in detail so um

136
00:04:54,639 --> 00:04:58,479
what's the requirement of a uh basically

137
00:04:58,479 --> 00:05:02,080
a memory horse for tomcat um

138
00:05:02,080 --> 00:05:04,000
back in uh back in the day we had

139
00:05:04,000 --> 00:05:05,840
serverless version one version two and

140
00:05:05,840 --> 00:05:07,360
now we have currently authoring version

141
00:05:07,360 --> 00:05:10,400
four as the latest one um which uh

142
00:05:10,400 --> 00:05:12,880
servlets um are a technology in java for

143
00:05:12,880 --> 00:05:14,400
those of you who don't know and they're

144
00:05:14,400 --> 00:05:17,199
required for creating memory horses

145
00:05:17,199 --> 00:05:19,680
before version three it was not possible

146
00:05:19,680 --> 00:05:21,280
to dynamically register components

147
00:05:21,280 --> 00:05:22,720
during the runtime of the application

148
00:05:22,720 --> 00:05:24,960
you could only define your components

149
00:05:24,960 --> 00:05:26,880
when you were creating your tomcat

150
00:05:26,880 --> 00:05:28,000
application

151
00:05:28,000 --> 00:05:30,080
so but but afterwards and version three

152
00:05:30,080 --> 00:05:32,080
uh forward it was possible to

153
00:05:32,080 --> 00:05:34,240
dynamically create uh components so

154
00:05:34,240 --> 00:05:35,759
that's the requirement you need server

155
00:05:35,759 --> 00:05:37,759
version three and server two three was

156
00:05:37,759 --> 00:05:41,360
introduced in tomcat seven forward

157
00:05:41,360 --> 00:05:42,880
which most of the applications are

158
00:05:42,880 --> 00:05:45,360
currently at least topic at seven uh if

159
00:05:45,360 --> 00:05:46,560
they're not they have other

160
00:05:46,560 --> 00:05:48,400
vulnerabilities to be worried about

161
00:05:48,400 --> 00:05:50,240
so uh basically this is a life of a

162
00:05:50,240 --> 00:05:51,600
request

163
00:05:51,600 --> 00:05:53,039
you have a browser you have a client

164
00:05:53,039 --> 00:05:54,880
that client will send a request to a

165
00:05:54,880 --> 00:05:57,039
tomcat application a tomcat application

166
00:05:57,039 --> 00:05:59,199
have three main components as listeners

167
00:05:59,199 --> 00:06:01,680
filter chains and servlets

168
00:06:01,680 --> 00:06:03,440
when you send the to tomcat container a

169
00:06:03,440 --> 00:06:05,759
catalina container first the listener

170
00:06:05,759 --> 00:06:08,160
will receive the request tries to

171
00:06:08,160 --> 00:06:10,400
process it and then pass it pass it

172
00:06:10,400 --> 00:06:12,400
along to the filters chain under the

173
00:06:12,400 --> 00:06:14,800
filters chain pass it to servlet and

174
00:06:14,800 --> 00:06:16,240
then after they're all done with the

175
00:06:16,240 --> 00:06:18,160
request they will try to return the

176
00:06:18,160 --> 00:06:19,680
response and

177
00:06:19,680 --> 00:06:21,199
all of them can post-process the

178
00:06:21,199 --> 00:06:22,319
response

179
00:06:22,319 --> 00:06:24,720
for those of you who want to know

180
00:06:24,720 --> 00:06:26,720
what are these actually in real life so

181
00:06:26,720 --> 00:06:29,120
people mostly use for example filters in

182
00:06:29,120 --> 00:06:31,039
java application and spring applications

183
00:06:31,039 --> 00:06:34,240
to check oh whenever somebody access a

184
00:06:34,240 --> 00:06:36,400
slash admin slash star which means

185
00:06:36,400 --> 00:06:39,520
everything uh beginning with admin uh

186
00:06:39,520 --> 00:06:41,039
just check if they have the right

187
00:06:41,039 --> 00:06:42,560
authentication cookie

188
00:06:42,560 --> 00:06:45,039
and um servlets are basically the code

189
00:06:45,039 --> 00:06:47,199
that gets actually executed when you're

190
00:06:47,199 --> 00:06:49,039
working with a java application and

191
00:06:49,039 --> 00:06:51,520
listeners uh let's not talk about it for

192
00:06:51,520 --> 00:06:53,120
now

193
00:06:53,120 --> 00:06:55,280
so this is a very briefly a

194
00:06:55,280 --> 00:06:57,840
architecture of a tomcat application uh

195
00:06:57,840 --> 00:07:00,240
you have some connectors saying oh i'm

196
00:07:00,240 --> 00:07:03,440
listening for port 8080 443 or ajp

197
00:07:03,440 --> 00:07:05,919
connection and everything else and each

198
00:07:05,919 --> 00:07:08,000
server has multiple services each

199
00:07:08,000 --> 00:07:10,080
services has multiple engines the most

200
00:07:10,080 --> 00:07:12,080
common one will be catalina and then

201
00:07:12,080 --> 00:07:14,160
after that we have a we have multiple

202
00:07:14,160 --> 00:07:16,560
hosts we can have we can have we can

203
00:07:16,560 --> 00:07:18,720
have i don't know localhost admin

204
00:07:18,720 --> 00:07:21,199
different things and uh they can even be

205
00:07:21,199 --> 00:07:24,560
sub domains and each host has the actual

206
00:07:24,560 --> 00:07:27,440
application which is called a context so

207
00:07:27,440 --> 00:07:29,120
the context have has the code has

208
00:07:29,120 --> 00:07:31,520
everything has that root.warfall that

209
00:07:31,520 --> 00:07:34,240
you see or that javafalls which are

210
00:07:34,240 --> 00:07:37,360
running in a template container

211
00:07:37,360 --> 00:07:39,199
this is just the exactly what i just

212
00:07:39,199 --> 00:07:42,160
told you engine host context and at

213
00:07:42,160 --> 00:07:44,400
least we have the wrapper a rapper is

214
00:07:44,400 --> 00:07:47,280
just uh another object sitting before

215
00:07:47,280 --> 00:07:49,360
servlet controlling the servlets

216
00:07:49,360 --> 00:07:50,960
actually these are just terminologies

217
00:07:50,960 --> 00:07:52,639
from the tomcat architecture which are

218
00:07:52,639 --> 00:07:55,120
required to know uh even a little bit uh

219
00:07:55,120 --> 00:07:56,319
don't worry if you didn't understand

220
00:07:56,319 --> 00:07:57,599
fully

221
00:07:57,599 --> 00:07:59,199
to know about this whole concept of

222
00:07:59,199 --> 00:08:01,919
memory horses

223
00:08:01,919 --> 00:08:03,680
again this is the same thing

224
00:08:03,680 --> 00:08:05,520
just sending a request

225
00:08:05,520 --> 00:08:07,680
to the tomcat server which has multiple

226
00:08:07,680 --> 00:08:10,160
services and connectors

227
00:08:10,160 --> 00:08:11,599
this is what actually happens with those

228
00:08:11,599 --> 00:08:13,120
host engine and context you got

229
00:08:13,120 --> 00:08:16,080
different hosts a.com b com and each of

230
00:08:16,080 --> 00:08:18,879
these hosts can have more than one java

231
00:08:18,879 --> 00:08:21,280
application work more than one rootstock

232
00:08:21,280 --> 00:08:23,840
war and each of those war files get

233
00:08:23,840 --> 00:08:26,160
exploded or deployed at each different

234
00:08:26,160 --> 00:08:28,240
context for example this application

235
00:08:28,240 --> 00:08:30,479
b.com can have different can have two

236
00:08:30,479 --> 00:08:33,039
contexts one slash which runs a

237
00:08:33,039 --> 00:08:34,958
different co different app java

238
00:08:34,958 --> 00:08:36,719
application with a lot of codes and

239
00:08:36,719 --> 00:08:38,640
servlets and everything else

240
00:08:38,640 --> 00:08:41,200
and slash manager runs a different

241
00:08:41,200 --> 00:08:43,839
uh root.war which is a just like a

242
00:08:43,839 --> 00:08:44,959
packaged

243
00:08:44,959 --> 00:08:47,760
java application

244
00:08:47,760 --> 00:08:50,080
uh again wrapper just controlling the

245
00:08:50,080 --> 00:08:52,240
servlet and does other things such as

246
00:08:52,240 --> 00:08:53,839
resource recycling and servlet

247
00:08:53,839 --> 00:08:55,519
initialization

248
00:08:55,519 --> 00:08:57,839
i know it's a little bit just uh

249
00:08:57,839 --> 00:08:59,920
pointing things to each other but uh it

250
00:08:59,920 --> 00:09:02,160
is actually like that if before

251
00:09:02,160 --> 00:09:03,279
understanding it you need to know all

252
00:09:03,279 --> 00:09:04,720
those

253
00:09:04,720 --> 00:09:06,000
listener

254
00:09:06,000 --> 00:09:07,839
is the first one in the chain and then

255
00:09:07,839 --> 00:09:09,279
it goes to filter and then it goes to

256
00:09:09,279 --> 00:09:10,720
servlet the reason that i'm bringing

257
00:09:10,720 --> 00:09:13,440
this one again here is because

258
00:09:13,440 --> 00:09:15,519
you as an attacker or you as a red

259
00:09:15,519 --> 00:09:17,760
teamer you need to know which one of

260
00:09:17,760 --> 00:09:19,279
these places which one of these

261
00:09:19,279 --> 00:09:21,360
components you want to actually exploit

262
00:09:21,360 --> 00:09:22,959
or register your malicious code or

263
00:09:22,959 --> 00:09:24,160
register your

264
00:09:24,160 --> 00:09:26,480
shell code inside

265
00:09:26,480 --> 00:09:28,880
because for example if you inject your

266
00:09:28,880 --> 00:09:31,040
malicious code into a listener it always

267
00:09:31,040 --> 00:09:33,360
gets executed more than faster than

268
00:09:33,360 --> 00:09:35,600
anything else if you

269
00:09:35,600 --> 00:09:37,440
inject it into a filter

270
00:09:37,440 --> 00:09:39,760
would maybe like half a second delay and

271
00:09:39,760 --> 00:09:42,160
then the server is the last one uh which

272
00:09:42,160 --> 00:09:43,519
you can uh inject your knowledge just

273
00:09:43,519 --> 00:09:44,240
called

274
00:09:44,240 --> 00:09:46,560
each each one of those three uh

275
00:09:46,560 --> 00:09:48,720
components has a different method of

276
00:09:48,720 --> 00:09:51,200
again injecting because this thing this

277
00:09:51,200 --> 00:09:52,959
java memory course is all about

278
00:09:52,959 --> 00:09:55,600
reflection all about traversing objects

279
00:09:55,600 --> 00:09:57,600
to objects going to the upper level

280
00:09:57,600 --> 00:09:59,360
object and then from that object

281
00:09:59,360 --> 00:10:00,880
enumerating other objects using

282
00:10:00,880 --> 00:10:03,360
reflection to access private of private

283
00:10:03,360 --> 00:10:05,120
visibilities of other objects and

284
00:10:05,120 --> 00:10:07,279
modifying them so that's why you have

285
00:10:07,279 --> 00:10:08,880
all of these connect connections to each

286
00:10:08,880 --> 00:10:10,000
other

287
00:10:10,000 --> 00:10:11,680
and even if you want to make sure if

288
00:10:11,680 --> 00:10:13,519
that's the correct order if you start

289
00:10:13,519 --> 00:10:15,760
reverse engineering

290
00:10:15,760 --> 00:10:17,360
i don't want to say reverse engineering

291
00:10:17,360 --> 00:10:19,839
like that hardcore but just like opening

292
00:10:19,839 --> 00:10:21,920
the uh tomcat the standard content class

293
00:10:21,920 --> 00:10:23,519
fall in it intellij and start reading

294
00:10:23,519 --> 00:10:25,519
through you can see the architecture

295
00:10:25,519 --> 00:10:27,519
literally says and listeners first start

296
00:10:27,519 --> 00:10:31,360
and then there's filters and forward

297
00:10:31,360 --> 00:10:32,880
when the client makes a request to an

298
00:10:32,880 --> 00:10:34,959
application the web server receives it

299
00:10:34,959 --> 00:10:36,959
pass it to several containers

300
00:10:36,959 --> 00:10:38,959
and then that server container will pass

301
00:10:38,959 --> 00:10:41,839
it to the corresponding servlet

302
00:10:41,839 --> 00:10:43,600
what when we have chains in an

303
00:10:43,600 --> 00:10:45,360
application because in this talk we're

304
00:10:45,360 --> 00:10:47,279
going to show you with the in the tomcat

305
00:10:47,279 --> 00:10:49,200
section how can you register a malicious

306
00:10:49,200 --> 00:10:50,560
filter

307
00:10:50,560 --> 00:10:52,800
if there are filters because an

308
00:10:52,800 --> 00:10:55,040
application have multiple filters a

309
00:10:55,040 --> 00:10:57,519
filter to check if a user is sending a

310
00:10:57,519 --> 00:11:00,240
xsrf token another filter to check if

311
00:11:00,240 --> 00:11:02,240
the user has the correct session

312
00:11:02,240 --> 00:11:03,839
another filter to do something else and

313
00:11:03,839 --> 00:11:05,440
then another one to do something else

314
00:11:05,440 --> 00:11:07,120
for example there can be a filter

315
00:11:07,120 --> 00:11:08,720
checking the content type saying oh if

316
00:11:08,720 --> 00:11:10,959
the client is is sending the header

317
00:11:10,959 --> 00:11:13,519
accept to expect the

318
00:11:13,519 --> 00:11:15,600
for example application json then return

319
00:11:15,600 --> 00:11:18,160
my data as an application json so we can

320
00:11:18,160 --> 00:11:20,720
have multiple filters and these filters

321
00:11:20,720 --> 00:11:22,959
will be have living together happily

322
00:11:22,959 --> 00:11:25,200
using a filter chain which they need to

323
00:11:25,200 --> 00:11:26,079
manage

324
00:11:26,079 --> 00:11:28,000
who's the left who is the next chain and

325
00:11:28,000 --> 00:11:29,519
who's the previous chain and everything

326
00:11:29,519 --> 00:11:31,680
else

327
00:11:32,320 --> 00:11:34,320
so this is how you dynamically add a

328
00:11:34,320 --> 00:11:35,360
filter

329
00:11:35,360 --> 00:11:36,959
in tomcat

330
00:11:36,959 --> 00:11:38,880
if you remember there was a file which

331
00:11:38,880 --> 00:11:40,800
was open in the intellij called the

332
00:11:40,800 --> 00:11:42,959
standard context and in the tonka

333
00:11:42,959 --> 00:11:45,760
documentation in the tomcat architecture

334
00:11:45,760 --> 00:11:47,040
it it says

335
00:11:47,040 --> 00:11:49,360
we have a main we have a main component

336
00:11:49,360 --> 00:11:51,760
called standard context which

337
00:11:51,760 --> 00:11:54,079
controls basically everything if you

338
00:11:54,079 --> 00:11:55,680
want to add a malicious filter you need

339
00:11:55,680 --> 00:11:58,079
to get a handle to this object and then

340
00:11:58,079 --> 00:12:00,639
i start creating a filter and some other

341
00:12:00,639 --> 00:12:03,360
filter informations which a filter needs

342
00:12:03,360 --> 00:12:04,639
and then

343
00:12:04,639 --> 00:12:06,639
at the end add it to the

344
00:12:06,639 --> 00:12:10,000
list of filter definitions

345
00:12:10,000 --> 00:12:12,480
i try to create a mind map of showing

346
00:12:12,480 --> 00:12:14,480
all those reflection which i said

347
00:12:14,480 --> 00:12:16,480
we have a servlet context

348
00:12:16,480 --> 00:12:19,600
which is the if if we see as the process

349
00:12:19,600 --> 00:12:21,279
of reflection as like a ladder which

350
00:12:21,279 --> 00:12:23,120
we're going up

351
00:12:23,120 --> 00:12:25,519
the the most near object to us is called

352
00:12:25,519 --> 00:12:28,079
the servlet context and then we have we

353
00:12:28,079 --> 00:12:30,160
always have a handle to this so by

354
00:12:30,160 --> 00:12:32,240
opening a hand to several contacts which

355
00:12:32,240 --> 00:12:34,160
we have access to we can start doing

356
00:12:34,160 --> 00:12:36,560
reflection to access application context

357
00:12:36,560 --> 00:12:38,959
and then the most top context which is

358
00:12:38,959 --> 00:12:40,880
called the standard context this is the

359
00:12:40,880 --> 00:12:43,360
big guy here and then it has access to

360
00:12:43,360 --> 00:12:46,240
filter configs and other things and

361
00:12:46,240 --> 00:12:48,160
we're trying to inject into this

362
00:12:48,160 --> 00:12:52,480
collection into this hash map

363
00:12:52,480 --> 00:12:54,720
and why do we do all this reflection why

364
00:12:54,720 --> 00:12:57,040
not just i don't know because when we

365
00:12:57,040 --> 00:12:59,200
when we go to the asp.net part you see

366
00:12:59,200 --> 00:13:01,839
it's way much easier you can basically

367
00:13:01,839 --> 00:13:03,519
explain the dot net memory horse in five

368
00:13:03,519 --> 00:13:06,560
minutes easy that's it done because tom

369
00:13:06,560 --> 00:13:10,000
in asp.net all the visibilities of the

370
00:13:10,000 --> 00:13:11,920
properties and methods are have been set

371
00:13:11,920 --> 00:13:14,079
to public and public static

372
00:13:14,079 --> 00:13:16,399
it's so easy to just say oh i want this

373
00:13:16,399 --> 00:13:17,600
object and then you have access to it

374
00:13:17,600 --> 00:13:19,839
you don't need to do any reflection that

375
00:13:19,839 --> 00:13:23,440
but when it comes to tomcat uh

376
00:13:23,440 --> 00:13:25,680
the application uh the standard context

377
00:13:25,680 --> 00:13:26,720
as you see

378
00:13:26,720 --> 00:13:28,880
which was here

379
00:13:28,880 --> 00:13:31,839
it has set the private visibility so we

380
00:13:31,839 --> 00:13:35,760
cannot just open a handle to it

381
00:13:35,760 --> 00:13:37,440
when i say open handle just initializing

382
00:13:37,440 --> 00:13:39,440
objects or using the keyboard new or

383
00:13:39,440 --> 00:13:40,880
something like that

384
00:13:40,880 --> 00:13:43,199
this is a way to actually

385
00:13:43,199 --> 00:13:45,440
this is your reflection code used for uh

386
00:13:45,440 --> 00:13:48,560
getting that all the handle to uh

387
00:13:48,560 --> 00:13:51,040
i said as you remember i said the

388
00:13:51,040 --> 00:13:53,360
at this ladder of reflection the most

389
00:13:53,360 --> 00:13:54,880
near object to us is called the get

390
00:13:54,880 --> 00:13:56,720
servlet context and then from the get

391
00:13:56,720 --> 00:13:59,360
servlet context we can get to a standard

392
00:13:59,360 --> 00:14:01,760
context these codes need to be written

393
00:14:01,760 --> 00:14:04,480
these are very basic if you do not

394
00:14:04,480 --> 00:14:07,839
understand what they are um you can uh

395
00:14:07,839 --> 00:14:09,519
honestly if you start learning java

396
00:14:09,519 --> 00:14:11,360
reflection they're very easy to to learn

397
00:14:11,360 --> 00:14:13,600
like it's not that difficult it's like

398
00:14:13,600 --> 00:14:16,320
reflection 101 in java

399
00:14:16,320 --> 00:14:18,320
and then you need to create a filter

400
00:14:18,320 --> 00:14:20,560
tomcat documentation says all the

401
00:14:20,560 --> 00:14:22,959
developers of tomcat although with java

402
00:14:22,959 --> 00:14:24,880
using config i know when you create a

403
00:14:24,880 --> 00:14:27,600
filter when you're creating a component

404
00:14:27,600 --> 00:14:29,519
saying oh whenever somebody a slash

405
00:14:29,519 --> 00:14:32,320
admin i want something to happen that

406
00:14:32,320 --> 00:14:33,760
something to happen

407
00:14:33,760 --> 00:14:36,240
gets defined in the do filter

408
00:14:36,240 --> 00:14:38,800
uh because uh the the filter interface

409
00:14:38,800 --> 00:14:40,399
in java says you need to implement this

410
00:14:40,399 --> 00:14:42,079
filter and then inside this filter we

411
00:14:42,079 --> 00:14:44,399
have a malicious code saying oh if you

412
00:14:44,399 --> 00:14:46,320
saw in the requests coming to this

413
00:14:46,320 --> 00:14:48,639
application in that whole

414
00:14:48,639 --> 00:14:51,279
um drawing saying the life of a request

415
00:14:51,279 --> 00:14:53,279
if you saw every course coming

416
00:14:53,279 --> 00:14:55,199
which has the cmd parameter just get

417
00:14:55,199 --> 00:14:57,279
that parameter pass it to get runtime

418
00:14:57,279 --> 00:14:59,920
exec and execute this code basically how

419
00:14:59,920 --> 00:15:01,360
to run

420
00:15:01,360 --> 00:15:03,920
os commands in uh

421
00:15:03,920 --> 00:15:07,600
java which uh using runtime kit runtime

422
00:15:07,600 --> 00:15:11,120
but uh so we have we created the filter

423
00:15:11,120 --> 00:15:13,360
and then now we have open handle to your

424
00:15:13,360 --> 00:15:15,440
standard context and everything now we

425
00:15:15,440 --> 00:15:17,680
need to register that component register

426
00:15:17,680 --> 00:15:20,079
that filter in the list of already

427
00:15:20,079 --> 00:15:21,839
existing filters in the application

428
00:15:21,839 --> 00:15:23,360
because we don't want to overwrite them

429
00:15:23,360 --> 00:15:24,720
because if you overwrite them we're

430
00:15:24,720 --> 00:15:26,800
breaking the application we want to be

431
00:15:26,800 --> 00:15:29,040
as selfish as we can so we want to open

432
00:15:29,040 --> 00:15:31,680
the list of current the hash list

433
00:15:31,680 --> 00:15:33,199
currently containing all the filter

434
00:15:33,199 --> 00:15:35,279
definitions and add our own malicious

435
00:15:35,279 --> 00:15:37,120
filter inside it so this is how you do

436
00:15:37,120 --> 00:15:38,000
it

437
00:15:38,000 --> 00:15:41,120
uh using this reflection getting using a

438
00:15:41,120 --> 00:15:43,759
full class name accessing uh filter

439
00:15:43,759 --> 00:15:45,519
definitions in tomcat you can get the

440
00:15:45,519 --> 00:15:48,800
list of all the filters

441
00:15:49,040 --> 00:15:49,920
and then

442
00:15:49,920 --> 00:15:52,320
what the reason that we do all this uh

443
00:15:52,320 --> 00:15:55,199
reflection was accessibilities were

444
00:15:55,199 --> 00:15:56,480
private

445
00:15:56,480 --> 00:15:58,480
and then a filter says

446
00:15:58,480 --> 00:16:01,360
do something whenever somebody accessed

447
00:16:01,360 --> 00:16:03,920
a path that have a slash something or

448
00:16:03,920 --> 00:16:06,079
anything so we set our malicious filter

449
00:16:06,079 --> 00:16:08,480
to say slash anything

450
00:16:08,480 --> 00:16:10,880
so any part of the application which got

451
00:16:10,880 --> 00:16:12,880
got access our malicious code is

452
00:16:12,880 --> 00:16:14,959
listening uh to receive the cmd

453
00:16:14,959 --> 00:16:16,320
parameter

454
00:16:16,320 --> 00:16:17,519
and then at the end

455
00:16:17,519 --> 00:16:19,920
we can

456
00:16:20,880 --> 00:16:22,959
add the malicious uh

457
00:16:22,959 --> 00:16:26,160
filter into the filter conflicts

458
00:16:26,160 --> 00:16:28,320
application uh config is generated by

459
00:16:28,320 --> 00:16:30,399
reflection and put into lift context uh

460
00:16:30,399 --> 00:16:32,639
filter conflict hash map uh which is

461
00:16:32,639 --> 00:16:34,560
which is basically maybe would be

462
00:16:34,560 --> 00:16:36,880
equivalent to the collections in dot net

463
00:16:36,880 --> 00:16:38,800
which contains the list of all the

464
00:16:38,800 --> 00:16:39,920
currently

465
00:16:39,920 --> 00:16:41,920
active filters

466
00:16:41,920 --> 00:16:44,480
and here's a demo for

467
00:16:44,480 --> 00:16:46,639
tomcat

468
00:16:46,639 --> 00:16:48,880
so as you can see in this application we

469
00:16:48,880 --> 00:16:52,160
have a tomcat application uh running

470
00:16:52,160 --> 00:16:54,880
here and if we try to access the

471
00:16:54,880 --> 00:16:58,000
application uh query string md say calc

472
00:16:58,000 --> 00:17:00,240
it just doesn't do anything and i try to

473
00:17:00,240 --> 00:17:02,639
refresh it a couple of times just

474
00:17:02,639 --> 00:17:05,280
uh being paranoid um i just try to

475
00:17:05,280 --> 00:17:07,839
refresh it nothing happens and then i go

476
00:17:07,839 --> 00:17:09,679
to an endpoint called verbal which is

477
00:17:09,679 --> 00:17:12,559
expecting a parameter called data and it

478
00:17:12,559 --> 00:17:15,039
does deserialization common collections

479
00:17:15,039 --> 00:17:17,599
one chain is inside the class path so

480
00:17:17,599 --> 00:17:20,079
passing the uh passing the common

481
00:17:20,079 --> 00:17:22,480
collections to it will work

482
00:17:22,480 --> 00:17:25,039
uh and now you can see we have a we have

483
00:17:25,039 --> 00:17:26,959
another version of voice to cereal

484
00:17:26,959 --> 00:17:29,520
having common collections and ex instead

485
00:17:29,520 --> 00:17:31,840
of passing it calc we pass the tomcat

486
00:17:31,840 --> 00:17:34,080
horse which is a customized version of

487
00:17:34,080 --> 00:17:35,840
voiceover serial hopefully will be

488
00:17:35,840 --> 00:17:38,320
pushed and then uh it creates the chain

489
00:17:38,320 --> 00:17:40,640
puts it into a silicon and then after

490
00:17:40,640 --> 00:17:42,960
that we're gonna base64 encode that

491
00:17:42,960 --> 00:17:45,280
silicon.txt file because the server is

492
00:17:45,280 --> 00:17:47,360
expecting a serialized object in a basic

493
00:17:47,360 --> 00:17:50,480
c4 format we copy it and then we send it

494
00:17:50,480 --> 00:17:52,400
to the application using the slash

495
00:17:52,400 --> 00:17:54,400
vulnerable endpoint in the data

496
00:17:54,400 --> 00:17:56,640
parameter

497
00:17:56,640 --> 00:17:59,840
and then the the chain gets executed we

498
00:17:59,840 --> 00:18:02,080
get a 500 error expected with the

499
00:18:02,080 --> 00:18:04,320
serialization most of the times and then

500
00:18:04,320 --> 00:18:06,160
now if we try to open

501
00:18:06,160 --> 00:18:11,000
access that calc we get the calc again

502
00:18:23,679 --> 00:18:26,400
so now we go to the asp.net and how to

503
00:18:26,400 --> 00:18:28,960
do how to do this in asp.net in asp.net

504
00:18:28,960 --> 00:18:31,200
we have a mvc architecture and we have a

505
00:18:31,200 --> 00:18:33,520
really important file called global asa

506
00:18:33,520 --> 00:18:36,000
x if i'm not pronouncing the name wrong

507
00:18:36,000 --> 00:18:38,960
and then in the global ac a6 file

508
00:18:38,960 --> 00:18:40,640
documented by microsoft says whenever

509
00:18:40,640 --> 00:18:41,679
this file

510
00:18:41,679 --> 00:18:43,679
changes the application restarts this

511
00:18:43,679 --> 00:18:46,480
this file can contain a couple of code

512
00:18:46,480 --> 00:18:48,320
which gets run first when the

513
00:18:48,320 --> 00:18:50,160
application starts

514
00:18:50,160 --> 00:18:52,160
and inside this file by default when you

515
00:18:52,160 --> 00:18:53,440
create a dotnet

516
00:18:53,440 --> 00:18:55,120
dotnet from asp.net framework

517
00:18:55,120 --> 00:18:57,679
application uh with visual studio inside

518
00:18:57,679 --> 00:18:59,760
the file you get these four lines by

519
00:18:59,760 --> 00:19:02,080
default now most people don't know uh

520
00:19:02,080 --> 00:19:03,600
why are they there they don't touch it

521
00:19:03,600 --> 00:19:05,760
uh that's that's that might be the best

522
00:19:05,760 --> 00:19:07,440
option but while i was researching this

523
00:19:07,440 --> 00:19:10,080
area to find memoryhorses.net i needed

524
00:19:10,080 --> 00:19:12,080
to dig deeper in these and

525
00:19:12,080 --> 00:19:14,320
as you can see in the third line it says

526
00:19:14,320 --> 00:19:16,559
sorry at the second line

527
00:19:16,559 --> 00:19:18,960
it says filter config

528
00:19:18,960 --> 00:19:21,520
register global filters so there is

529
00:19:21,520 --> 00:19:23,120
something called global filters which

530
00:19:23,120 --> 00:19:26,240
are again the concept of filters in net

531
00:19:26,240 --> 00:19:28,080
all the frameworks have the same concept

532
00:19:28,080 --> 00:19:30,000
maybe different names but in this case

533
00:19:30,000 --> 00:19:31,760
again these guys call it filters and it

534
00:19:31,760 --> 00:19:33,360
registers those lists of filters now we

535
00:19:33,360 --> 00:19:34,960
need to dig deeper and see what those

536
00:19:34,960 --> 00:19:36,960
global filters are and either we can add

537
00:19:36,960 --> 00:19:40,400
our own global filter using a

538
00:19:40,400 --> 00:19:43,600
code injection vulnerability

539
00:19:43,679 --> 00:19:45,440
so going inside the register global

540
00:19:45,440 --> 00:19:47,360
filters we can see it's expecting a type

541
00:19:47,360 --> 00:19:49,679
parameter of global filter collection so

542
00:19:49,679 --> 00:19:51,440
it expects a collection

543
00:19:51,440 --> 00:19:53,679
and then we'll get the collection

544
00:19:53,679 --> 00:19:55,120
passed to it and then add that

545
00:19:55,120 --> 00:19:57,360
collection to the list of already

546
00:19:57,360 --> 00:19:58,880
existing filters

547
00:19:58,880 --> 00:20:01,039
going inside the filters we can see that

548
00:20:01,039 --> 00:20:03,679
collection type is actually innumerable

549
00:20:03,679 --> 00:20:04,799
of

550
00:20:04,799 --> 00:20:07,039
expecting each

551
00:20:07,039 --> 00:20:09,440
each member of that collection to be a

552
00:20:09,440 --> 00:20:11,520
filter

553
00:20:11,520 --> 00:20:14,000
so by default we have four type of

554
00:20:14,000 --> 00:20:16,000
filters in a dotted application these

555
00:20:16,000 --> 00:20:18,080
four type of filters are very important

556
00:20:18,080 --> 00:20:20,320
because if you remember in tomcat we had

557
00:20:20,320 --> 00:20:24,000
filters listeners servlets and and um

558
00:20:24,000 --> 00:20:24,799
but

559
00:20:24,799 --> 00:20:26,799
we have only one type of filter just a

560
00:20:26,799 --> 00:20:30,080
plain old filter but in asp.net a filter

561
00:20:30,080 --> 00:20:32,080
needs to have a type

562
00:20:32,080 --> 00:20:34,480
we have a authorization filter action

563
00:20:34,480 --> 00:20:36,400
filter result return an exception filter

564
00:20:36,400 --> 00:20:38,880
an exception filter only gets triggered

565
00:20:38,880 --> 00:20:40,080
when an exception happens in an

566
00:20:40,080 --> 00:20:42,080
application so you as a red teamer might

567
00:20:42,080 --> 00:20:44,000
be wondering that oh what i want to do

568
00:20:44,000 --> 00:20:45,679
is i want to inject my malicious code

569
00:20:45,679 --> 00:20:48,000
and a filter but i will set the type of

570
00:20:48,000 --> 00:20:50,240
that filter as an exception and i know

571
00:20:50,240 --> 00:20:52,080
in certain part of the application i can

572
00:20:52,080 --> 00:20:53,600
cause an exception maybe a division by

573
00:20:53,600 --> 00:20:55,600
zero and then my mileage has got its

574
00:20:55,600 --> 00:20:58,400
code it gets executed that's just for

575
00:20:58,400 --> 00:21:01,280
making this all a selfier

576
00:21:01,280 --> 00:21:02,480
but

577
00:21:02,480 --> 00:21:03,679
the order that you see in here

578
00:21:03,679 --> 00:21:05,520
authorization filter is the filter that

579
00:21:05,520 --> 00:21:08,080
always gets executed fast

580
00:21:08,080 --> 00:21:10,240
first so we're going to make a malicious

581
00:21:10,240 --> 00:21:13,520
filter of type authorization filter

582
00:21:13,520 --> 00:21:16,159
and in if you remember in tomcat we had

583
00:21:16,159 --> 00:21:18,559
the filter chains those filters needed

584
00:21:18,559 --> 00:21:20,240
to know who is the next one and

585
00:21:20,240 --> 00:21:21,360
everything

586
00:21:21,360 --> 00:21:22,880
dot net says

587
00:21:22,880 --> 00:21:24,240
i don't need that just whenever you're

588
00:21:24,240 --> 00:21:26,480
registering a filter pass me a order

589
00:21:26,480 --> 00:21:29,520
number which by default all the orders

590
00:21:29,520 --> 00:21:31,679
start from minus one so the first filter

591
00:21:31,679 --> 00:21:33,760
in tomcat which is a default sorry the

592
00:21:33,760 --> 00:21:35,440
first filter in asp.net which is the

593
00:21:35,440 --> 00:21:37,039
default filter it starts with the order

594
00:21:37,039 --> 00:21:39,440
number minus one the next one you create

595
00:21:39,440 --> 00:21:41,440
is zero and the next one one two three

596
00:21:41,440 --> 00:21:43,520
four five six so when creating a

597
00:21:43,520 --> 00:21:46,320
malicious filter you set the order to

598
00:21:46,320 --> 00:21:49,120
minus 2 so you will be the first filter

599
00:21:49,120 --> 00:21:52,000
getting executed

600
00:21:52,080 --> 00:21:54,159
and this is inside the

601
00:21:54,159 --> 00:21:55,600
whole

602
00:21:55,600 --> 00:21:58,080
filter method which accepts the order

603
00:21:58,080 --> 00:22:00,480
and if there is no order set

604
00:22:00,480 --> 00:22:02,320
it just uses minus one

605
00:22:02,320 --> 00:22:04,080
and then the next time it's it gets

606
00:22:04,080 --> 00:22:06,640
incremented and this is a malicious

607
00:22:06,640 --> 00:22:08,960
filter in written in dot net

608
00:22:08,960 --> 00:22:10,720
uh what what you're seeing is this is

609
00:22:10,720 --> 00:22:14,080
aspx page but uh

610
00:22:14,080 --> 00:22:16,640
it's funny if we upload this file we are

611
00:22:16,640 --> 00:22:18,320
we are cancelling the concept of saying

612
00:22:18,320 --> 00:22:20,159
oh this is a fileless attack there is no

613
00:22:20,159 --> 00:22:22,720
uploading of files um this is just for

614
00:22:22,720 --> 00:22:24,320
demonstration and then in the next video

615
00:22:24,320 --> 00:22:26,480
you can see uh we exploited in a

616
00:22:26,480 --> 00:22:29,200
template injection way as you can see we

617
00:22:29,200 --> 00:22:31,600
it's way easier than all of those codes

618
00:22:31,600 --> 00:22:34,400
in tomcat you just create a class of

619
00:22:34,400 --> 00:22:35,919
filter

620
00:22:35,919 --> 00:22:38,320
which uh it's of the parent classes

621
00:22:38,320 --> 00:22:40,480
authorization filter interface and then

622
00:22:40,480 --> 00:22:43,120
you need to override this function

623
00:22:43,120 --> 00:22:45,200
called unauthorization which is the code

624
00:22:45,200 --> 00:22:47,200
which gets executed whenever this filter

625
00:22:47,200 --> 00:22:48,559
gets triggered

626
00:22:48,559 --> 00:22:50,480
and uh it's looking for the cmd

627
00:22:50,480 --> 00:22:52,880
parameter getting it and then at the end

628
00:22:52,880 --> 00:22:55,200
passing it to

629
00:22:55,200 --> 00:22:57,280
where is it oh a startup info uh

630
00:22:57,280 --> 00:22:59,520
starting for which is a way to uh to new

631
00:22:59,520 --> 00:23:02,640
process basically to execute a uh os

632
00:23:02,640 --> 00:23:05,840
command in dotnet and then after that

633
00:23:05,840 --> 00:23:07,360
class gets created

634
00:23:07,360 --> 00:23:09,280
you come here in this part and then you

635
00:23:09,280 --> 00:23:11,280
will say global filters that's it you

636
00:23:11,280 --> 00:23:13,440
don't need to do any reflection it's

637
00:23:13,440 --> 00:23:15,280
just exposed global

638
00:23:15,280 --> 00:23:17,280
object you can adjust the global filters

639
00:23:17,280 --> 00:23:19,280
get me the filters and add my filter

640
00:23:19,280 --> 00:23:22,640
into it giving it -2 which overrides the

641
00:23:22,640 --> 00:23:24,480
order of all the existing filters and

642
00:23:24,480 --> 00:23:26,080
system filters

643
00:23:26,080 --> 00:23:28,000
this is a demo for this exploiting

644
00:23:28,000 --> 00:23:31,039
eraser codeinjection.net

645
00:23:31,039 --> 00:23:33,600
let's see it

646
00:23:33,919 --> 00:23:36,480
so we have an asp.net application here

647
00:23:36,480 --> 00:23:37,760
and then there is a feedback form the

648
00:23:37,760 --> 00:23:39,840
feedback form is vulnerable to a plain

649
00:23:39,840 --> 00:23:42,480
old uh razer template injection if you

650
00:23:42,480 --> 00:23:44,640
send out sign parenthesis seven times

651
00:23:44,640 --> 00:23:47,440
seven you get 49 and then this time if

652
00:23:47,440 --> 00:23:49,520
you visit mdsec

653
00:23:49,520 --> 00:23:50,400
calc

654
00:23:50,400 --> 00:23:52,880
there is nothing there nothing launches

655
00:23:52,880 --> 00:23:54,880
but after we inject the horse

656
00:23:54,880 --> 00:23:56,960
we get uh we get that parameter

657
00:23:56,960 --> 00:23:59,760
registered using our malicious filter

658
00:23:59,760 --> 00:24:02,080
so here again i'm just sending it again

659
00:24:02,080 --> 00:24:03,440
for demonstration saying it doesn't

660
00:24:03,440 --> 00:24:05,360
exist there

661
00:24:05,360 --> 00:24:07,120
and next i'm going to copy the exploit

662
00:24:07,120 --> 00:24:08,400
for it

663
00:24:08,400 --> 00:24:10,640
oh

664
00:24:11,919 --> 00:24:14,799
sorry i pressed space and for some

665
00:24:14,799 --> 00:24:16,840
reason it went to the

666
00:24:16,840 --> 00:24:20,640
end i just do it again

667
00:24:20,640 --> 00:24:21,760
it was

668
00:24:21,760 --> 00:24:24,720
here yeah sorry

669
00:24:24,720 --> 00:24:26,880
i'm sending it a couple of times so see

670
00:24:26,880 --> 00:24:29,840
if it uh just doesn't doesn't open

671
00:24:29,840 --> 00:24:32,320
and then uh we are going to copy the

672
00:24:32,320 --> 00:24:33,279
code

673
00:24:33,279 --> 00:24:35,039
the code is this one

674
00:24:35,039 --> 00:24:36,240
exactly the code that you saw in the

675
00:24:36,240 --> 00:24:38,480
previous pages but putting it to add

676
00:24:38,480 --> 00:24:40,960
signs so razer can understand it we send

677
00:24:40,960 --> 00:24:42,400
the feedback form

678
00:24:42,400 --> 00:24:43,840
it doesn't so it doesn't show anything

679
00:24:43,840 --> 00:24:45,279
doesn't crash so that means it got you

680
00:24:45,279 --> 00:24:47,360
got executed and now if you go back to

681
00:24:47,360 --> 00:24:49,679
the mdc calc filter it's an

682
00:24:49,679 --> 00:24:51,760
authorization type filter and the cad

683
00:24:51,760 --> 00:24:54,480
pops that means our malicious filter got

684
00:24:54,480 --> 00:24:56,720
executed and i just do it for one of the

685
00:24:56,720 --> 00:24:57,840
time because

686
00:24:57,840 --> 00:25:00,400
everyone likes calc

687
00:25:00,400 --> 00:25:03,520
let's go to the next one

688
00:25:12,000 --> 00:25:14,320
now here comes the flash part uh when it

689
00:25:14,320 --> 00:25:17,200
comes to flask uh it is way easier like

690
00:25:17,200 --> 00:25:19,200
it just gets easier and easier i just

691
00:25:19,200 --> 00:25:20,720
tell you like if you understand tomcat

692
00:25:20,720 --> 00:25:22,559
if you start practicing tomcat you can

693
00:25:22,559 --> 00:25:24,799
understand all of them um because that's

694
00:25:24,799 --> 00:25:26,480
the most difficult one using lots of

695
00:25:26,480 --> 00:25:27,679
reflection

696
00:25:27,679 --> 00:25:28,799
requiring you to understand the whole

697
00:25:28,799 --> 00:25:30,400
concept completely

698
00:25:30,400 --> 00:25:31,600
in flask

699
00:25:31,600 --> 00:25:33,840
python we have the flask integrate a web

700
00:25:33,840 --> 00:25:36,240
app and then uh whenever we want to

701
00:25:36,240 --> 00:25:38,000
create a route this time we're creating

702
00:25:38,000 --> 00:25:40,720
a malicious route uh we can use a

703
00:25:40,720 --> 00:25:43,760
decorator called at sign app.route and

704
00:25:43,760 --> 00:25:45,840
then give it our information in detail

705
00:25:45,840 --> 00:25:48,080
to create the route that we want

706
00:25:48,080 --> 00:25:50,000
but under the hood because we need to

707
00:25:50,000 --> 00:25:51,440
under the hood part

708
00:25:51,440 --> 00:25:52,320
uh

709
00:25:52,320 --> 00:25:55,200
it uses call something called add url

710
00:25:55,200 --> 00:25:57,039
rule and this will accept some

711
00:25:57,039 --> 00:25:59,039
information about a new route and we'll

712
00:25:59,039 --> 00:26:01,760
register it so in our exploitation uh we

713
00:26:01,760 --> 00:26:03,520
need to call this

714
00:26:03,520 --> 00:26:05,600
this is the final exploit for the uh

715
00:26:05,600 --> 00:26:08,559
python one i'm just traversing a

716
00:26:08,559 --> 00:26:11,200
tree of objects uh using buildings eval

717
00:26:11,200 --> 00:26:13,039
and then going up and up in that ladder

718
00:26:13,039 --> 00:26:14,799
just going to each on one of those

719
00:26:14,799 --> 00:26:16,640
objects seeing the properties seeing the

720
00:26:16,640 --> 00:26:19,440
methods tracing seeing callbacks uh

721
00:26:19,440 --> 00:26:21,440
seeing stack traces to understand how

722
00:26:21,440 --> 00:26:23,360
can i access it and then i'm getting the

723
00:26:23,360 --> 00:26:26,720
url for global's uh current app to

724
00:26:26,720 --> 00:26:29,600
access the application uh add url rule

725
00:26:29,600 --> 00:26:31,840
i'm adding a malicious route called the

726
00:26:31,840 --> 00:26:33,120
slash shell

727
00:26:33,120 --> 00:26:35,679
which is expecting a shell parameter and

728
00:26:35,679 --> 00:26:37,279
executing it

729
00:26:37,279 --> 00:26:39,360
and this is a demo for

730
00:26:39,360 --> 00:26:40,480
flask

731
00:26:40,480 --> 00:26:43,440
template injection

732
00:26:45,039 --> 00:26:46,480
so we have a flask application

733
00:26:46,480 --> 00:26:48,240
vulnerable to template injection seven

734
00:26:48,240 --> 00:26:51,200
times seven uh returns 49 and then if

735
00:26:51,200 --> 00:26:52,400
you slash

736
00:26:52,400 --> 00:26:53,279
um

737
00:26:53,279 --> 00:26:55,440
shell cmd i change the parameters to cmd

738
00:26:55,440 --> 00:26:57,840
and they exploit here because it was i

739
00:26:57,840 --> 00:27:00,000
think confusing to have two parameters

740
00:27:00,000 --> 00:27:03,279
and path same name and here i will paste

741
00:27:03,279 --> 00:27:06,520
the code

742
00:27:07,520 --> 00:27:10,080
uh for what i just show you in the

743
00:27:10,080 --> 00:27:11,840
slides

744
00:27:11,840 --> 00:27:15,279
adding a malicious route a slash shell

745
00:27:15,279 --> 00:27:18,559
which will which one visited you it will

746
00:27:18,559 --> 00:27:21,760
import os dot p open and it will access

747
00:27:21,760 --> 00:27:25,919
the cmd parameter and bronze it

748
00:27:29,760 --> 00:27:31,760
okay application says none you'll

749
00:27:31,760 --> 00:27:34,000
execute it and now if you visit this

750
00:27:34,000 --> 00:27:37,679
page again we're gonna see

751
00:27:38,720 --> 00:27:42,360
again calculator

752
00:27:48,559 --> 00:27:51,279
so uh this was the end of the talk uh

753
00:27:51,279 --> 00:27:53,440
just uh one other uh

754
00:27:53,440 --> 00:27:55,039
uh topic which i want to

755
00:27:55,039 --> 00:27:58,240
mention alibaba team uh again as you

756
00:27:58,240 --> 00:27:59,760
remember at the first of this talk i

757
00:27:59,760 --> 00:28:01,039
mentioned this

758
00:28:01,039 --> 00:28:03,360
this research was um

759
00:28:03,360 --> 00:28:06,480
uh was done for tomcat only back in 2016

760
00:28:06,480 --> 00:28:08,720
and wasn't completed anymore and back in

761
00:28:08,720 --> 00:28:11,919
the day alibaba team wrote a

762
00:28:11,919 --> 00:28:14,640
um an analyzer for uh

763
00:28:14,640 --> 00:28:18,960
a jvm analyzer for uh java and which

764
00:28:18,960 --> 00:28:20,480
just uh just

765
00:28:20,480 --> 00:28:24,000
gets um just injects a java agent into a

766
00:28:24,000 --> 00:28:26,399
tomcat application and starts listing

767
00:28:26,399 --> 00:28:28,000
all the existing filters during the

768
00:28:28,000 --> 00:28:30,480
runtime and using that tool it's

769
00:28:30,480 --> 00:28:32,880
possible for a incident responder or

770
00:28:32,880 --> 00:28:35,120
someone to see the

771
00:28:35,120 --> 00:28:37,120
see them that tool wasn't maintained

772
00:28:37,120 --> 00:28:38,960
anymore and there are other more

773
00:28:38,960 --> 00:28:40,320
variants if you start researching on

774
00:28:40,320 --> 00:28:42,399
this topic you see there are other

775
00:28:42,399 --> 00:28:45,360
variants of malicious components which

776
00:28:45,360 --> 00:28:47,200
will not be detected even by that

777
00:28:47,200 --> 00:28:49,440
alibaba tool so

778
00:28:49,440 --> 00:28:51,120
if you search alibaba

779
00:28:51,120 --> 00:28:54,399
jvm object explorer you can find find

780
00:28:54,399 --> 00:28:57,760
tool and yeah that tool can help until

781
00:28:57,760 --> 00:29:00,159
some point to detect uh

782
00:29:00,159 --> 00:29:01,120
to

783
00:29:01,120 --> 00:29:03,200
detect this malicious object

784
00:29:03,200 --> 00:29:04,559
thank you very much if anyone has

785
00:29:04,559 --> 00:29:06,159
questions

786
00:29:06,159 --> 00:29:10,279
feel free to ask thank you

787
00:29:17,760 --> 00:29:19,919
yes a spring and a spring book spring

788
00:29:19,919 --> 00:29:21,520
boot works

789
00:29:21,520 --> 00:29:23,919
just with a spring boot and everything

790
00:29:23,919 --> 00:29:25,600
what you just need to do is you need to

791
00:29:25,600 --> 00:29:27,200
use something called an interceptor and

792
00:29:27,200 --> 00:29:30,799
a controller which are

793
00:29:32,399 --> 00:29:33,679
here

794
00:29:33,679 --> 00:29:35,840
when it comes to spring just register

795
00:29:35,840 --> 00:29:37,679
malicious controller interceptor it

796
00:29:37,679 --> 00:29:40,720
works it's basically a technique so it's

797
00:29:40,720 --> 00:29:43,120
not like a vulnerability basically it's

798
00:29:43,120 --> 00:29:45,760
just a technique that you can use

799
00:29:45,760 --> 00:29:48,320
by exploiting reflection by injecting uh

800
00:29:48,320 --> 00:29:50,559
reflection yeah that's it any other

801
00:29:50,559 --> 00:29:52,559
questions

802
00:29:52,559 --> 00:29:55,559
yes

803
00:29:57,120 --> 00:29:59,600
it is possible to also use php uh it's

804
00:29:59,600 --> 00:30:01,919
called the undead horse i called it here

805
00:30:01,919 --> 00:30:03,840
uh basically in the php code i didn't

806
00:30:03,840 --> 00:30:06,000
bring a sample here but

807
00:30:06,000 --> 00:30:08,720
in php you can uh there are some sys

808
00:30:08,720 --> 00:30:10,720
there there are some system functions in

809
00:30:10,720 --> 00:30:13,120
php which which are not very well known

810
00:30:13,120 --> 00:30:15,360
but if you call them they will prevent a

811
00:30:15,360 --> 00:30:17,039
file um

812
00:30:17,039 --> 00:30:19,600
when when a php file gets executed even

813
00:30:19,600 --> 00:30:21,520
if you delete the file it's it's still

814
00:30:21,520 --> 00:30:23,279
inside the memory so it doesn't matter

815
00:30:23,279 --> 00:30:26,960
and in the php version 8 onward php also

816
00:30:26,960 --> 00:30:29,120
introduced php reflection we didn't use

817
00:30:29,120 --> 00:30:31,279
to have reflection in php but now we

818
00:30:31,279 --> 00:30:33,760
have reflection so again using php

819
00:30:33,760 --> 00:30:36,399
reflection you can inject a

820
00:30:36,399 --> 00:30:38,399
you can inject a malicious serialized

821
00:30:38,399 --> 00:30:42,240
php code inside phphp fpm which gets run

822
00:30:42,240 --> 00:30:44,640
um i'm preparing the sample for that and

823
00:30:44,640 --> 00:30:48,159
then it's that's also possible

824
00:30:49,039 --> 00:30:51,120
version of the php

825
00:30:51,120 --> 00:30:52,720
no not the configuration but the version

826
00:30:52,720 --> 00:30:53,840
of php

827
00:30:53,840 --> 00:30:57,439
the php version is to be eight

828
00:30:57,840 --> 00:31:00,840
because

829
00:31:13,039 --> 00:31:15,919
yeah that's correct in php when there

830
00:31:15,919 --> 00:31:18,399
exists php fpm

831
00:31:18,399 --> 00:31:20,880
php fpm has certain objects which you

832
00:31:20,880 --> 00:31:23,519
can modify and since php fm is always

833
00:31:23,519 --> 00:31:25,200
running listening for php fpm

834
00:31:25,200 --> 00:31:28,000
connections that's why it works uh yeah

835
00:31:28,000 --> 00:31:30,480
so i think yeah the php fpm

836
00:31:30,480 --> 00:31:32,720
okay

837
00:31:41,840 --> 00:31:43,919
yeah so normally

838
00:31:43,919 --> 00:31:45,200
when it comes to an application people

839
00:31:45,200 --> 00:31:48,240
are used sending the same uh serialized

840
00:31:48,240 --> 00:31:50,480
um the serialized exploit again and

841
00:31:50,480 --> 00:31:51,919
again and again

842
00:31:51,919 --> 00:31:53,760
uh the first time that i came across

843
00:31:53,760 --> 00:31:56,080
this problem was uh reading actually a

844
00:31:56,080 --> 00:31:57,760
article of colleague of mine soros which

845
00:31:57,760 --> 00:32:00,480
is sitting there uh he he was exploiting

846
00:32:00,480 --> 00:32:02,960
exchange in an article called i think

847
00:32:02,960 --> 00:32:06,320
nsa meets proxy shell uh using a

848
00:32:06,320 --> 00:32:08,000
technique of

849
00:32:08,000 --> 00:32:11,039
virtual paths if i'm not mistaken using

850
00:32:11,039 --> 00:32:11,840
um

851
00:32:11,840 --> 00:32:13,760
he didn't he didn't he didn't do any

852
00:32:13,760 --> 00:32:15,840
research on a member or anything he just

853
00:32:15,840 --> 00:32:17,519
came up with this idea that we can

854
00:32:17,519 --> 00:32:20,159
register a virtual path uh and then we

855
00:32:20,159 --> 00:32:21,840
just need to send one deserialized

856
00:32:21,840 --> 00:32:23,519
payload and that's it we don't need to

857
00:32:23,519 --> 00:32:25,440
send it anymore and we also don't need

858
00:32:25,440 --> 00:32:27,360
to download and follow the server we can

859
00:32:27,360 --> 00:32:29,679
just register a malicious virtual path

860
00:32:29,679 --> 00:32:31,519
and this virtual path since since it's

861
00:32:31,519 --> 00:32:34,000
just part of the net nvc the detection

862
00:32:34,000 --> 00:32:35,919
of it is more difficult and it's not

863
00:32:35,919 --> 00:32:39,679
easy for the edr systems to detect it

864
00:32:39,679 --> 00:32:41,679
so you don't touch the disk basically

865
00:32:41,679 --> 00:32:44,640
yeah and you don't send a serialized

866
00:32:44,640 --> 00:32:48,080
request again and again

867
00:32:49,600 --> 00:32:51,120
any other questions i don't think anyone

868
00:32:51,120 --> 00:32:53,200
has questions uh thank you for joining

869
00:32:53,200 --> 00:32:57,080
this car talk yeah

