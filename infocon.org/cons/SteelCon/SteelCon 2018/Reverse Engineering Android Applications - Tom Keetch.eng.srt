1
00:00:09,090 --> 00:00:15,850
<font color="#E5E5E5">okay right well I assume that we were</font>

2
00:00:11,320 --> 00:00:18,640
ready to<font color="#E5E5E5"> start</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that good</font><font color="#CCCCCC"> yeah okay</font><font color="#E5E5E5"> um</font>

3
00:00:15,850 --> 00:00:20,980
<font color="#CCCCCC">it's like to do a quick kind</font><font color="#E5E5E5"> of straw</font>

4
00:00:18,640 --> 00:00:22,300
poll<font color="#CCCCCC"> of the beginning in terms of</font>

5
00:00:20,980 --> 00:00:24,250
<font color="#CCCCCC">understanding where</font><font color="#E5E5E5"> they once is coming</font>

6
00:00:22,300 --> 00:00:31,840
from<font color="#CCCCCC"> so who here has got a full-time job</font>

7
00:00:24,250 --> 00:00:35,980
<font color="#E5E5E5">in security okay about half and how many</font>

8
00:00:31,840 --> 00:00:37,750
are students okay super number and

9
00:00:35,980 --> 00:00:41,589
<font color="#E5E5E5">hobbyists</font><font color="#CCCCCC"> that fall outside the two</font>

10
00:00:37,750 --> 00:00:44,290
groups<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> that's a few</font><font color="#E5E5E5"> okay okay so</font>

11
00:00:41,589 --> 00:00:46,989
<font color="#CCCCCC">you've got a fairly</font><font color="#E5E5E5"> even split of them</font>

12
00:00:44,290 --> 00:00:49,059
in terms<font color="#E5E5E5"> of people's backgrounds and</font>

13
00:00:46,989 --> 00:00:50,709
hopefully this<font color="#CCCCCC"> talk will kind of have</font>

14
00:00:49,059 --> 00:00:55,000
something<font color="#CCCCCC"> for each you so if you think</font>

15
00:00:50,710 --> 00:00:56,440
some bits are too straightforward<font color="#E5E5E5"> then</font>

16
00:00:55,000 --> 00:00:58,780
I'll get<font color="#E5E5E5"> some more complex for two or</font>

17
00:00:56,440 --> 00:01:00,640
later on<font color="#CCCCCC"> okay so this presentation is</font>

18
00:00:58,780 --> 00:01:04,360
about reverse<font color="#CCCCCC"> engineering</font><font color="#E5E5E5"> Android</font>

19
00:01:00,640 --> 00:01:07,240
applications<font color="#E5E5E5"> and specifically</font><font color="#CCCCCC"> reverse</font>

20
00:01:04,360 --> 00:01:09,880
engineering obfuscated<font color="#E5E5E5"> applications so</font>

21
00:01:07,240 --> 00:01:11,979
applications where the author or the

22
00:01:09,880 --> 00:01:14,110
<font color="#E5E5E5">distributor explicitly doesn't want us</font>

23
00:01:11,979 --> 00:01:17,470
<font color="#E5E5E5">to understand the internal workings of</font>

24
00:01:14,110 --> 00:01:19,990
<font color="#E5E5E5">the application</font><font color="#CCCCCC"> I just quickly introduce</font>

25
00:01:17,470 --> 00:01:24,970
myself<font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> independent</font><font color="#CCCCCC"> software</font>

26
00:01:19,990 --> 00:01:26,679
security<font color="#E5E5E5"> consultant from London and</font><font color="#CCCCCC"> you</font>

27
00:01:24,970 --> 00:01:30,490
<font color="#CCCCCC">know my company</font><font color="#E5E5E5"> provides a range of</font>

28
00:01:26,680 --> 00:01:32,860
software<font color="#E5E5E5"> security services from my</font><font color="#CCCCCC"> SDLC</font>

29
00:01:30,490 --> 00:01:34,720
consulting and marketing<font color="#E5E5E5"> design reviews</font>

30
00:01:32,860 --> 00:01:38,260
through to like white and<font color="#E5E5E5"> black box</font>

31
00:01:34,720 --> 00:01:44,680
assessments and<font color="#E5E5E5"> as part of that I do</font>

32
00:01:38,260 --> 00:01:46,750
reverse engineering<font color="#E5E5E5"> so the the</font>

33
00:01:44,680 --> 00:01:49,540
presentations can<font color="#CCCCCC"> be broken</font><font color="#E5E5E5"> into three</font>

34
00:01:46,750 --> 00:01:52,000
<font color="#CCCCCC">areas</font><font color="#E5E5E5"> so in going</font><font color="#CCCCCC"> to go through a quick</font>

35
00:01:49,540 --> 00:01:54,010
<font color="#CCCCCC">introduction to touch on the topic</font><font color="#E5E5E5"> of</font>

36
00:01:52,000 --> 00:01:56,680
you know what is reverse engineering

37
00:01:54,010 --> 00:01:59,080
what does the process look like<font color="#CCCCCC"> and a</font>

38
00:01:56,680 --> 00:02:03,220
very quick primer on the Android

39
00:01:59,080 --> 00:02:04,810
<font color="#CCCCCC">application execution runtime</font><font color="#E5E5E5"> and then</font>

40
00:02:03,220 --> 00:02:07,780
in the second part<font color="#E5E5E5"> we'll talk</font><font color="#CCCCCC"> about the</font>

41
00:02:04,810 --> 00:02:09,908
standard Android reverse engineering

42
00:02:07,780 --> 00:02:13,090
tools and like the standard techniques

43
00:02:09,908 --> 00:02:15,010
<font color="#CCCCCC">that people</font><font color="#E5E5E5"> use and if you've</font><font color="#CCCCCC"> done the</font>

44
00:02:13,090 --> 00:02:15,830
Android app reverse engineering<font color="#CCCCCC"> before</font>

45
00:02:15,010 --> 00:02:18,500
them that<font color="#CCCCCC"> will all be</font>

46
00:02:15,830 --> 00:02:20,470
fairly straightforward<font color="#CCCCCC"> then the third</font>

47
00:02:18,500 --> 00:02:22,820
<font color="#CCCCCC">part will go on to talk about</font>

48
00:02:20,470 --> 00:02:26,240
<font color="#CCCCCC">reverse-engineer obfuscated applications</font>

49
00:02:22,820 --> 00:02:27,920
<font color="#E5E5E5">and you know what kinds of analysis or</font>

50
00:02:26,240 --> 00:02:29,990
<font color="#CCCCCC">we can do on those applications and</font>

51
00:02:27,920 --> 00:02:33,049
<font color="#CCCCCC">obviously I'll end with</font><font color="#E5E5E5"> a few</font>

52
00:02:29,990 --> 00:02:35,960
conclusions<font color="#E5E5E5"> so reverse engineering</font>

53
00:02:33,050 --> 00:02:37,280
<font color="#E5E5E5">reverse engineering rather than building</font>

54
00:02:35,960 --> 00:02:39,560
<font color="#CCCCCC">something want</font><font color="#E5E5E5"> to go through that</font>

55
00:02:37,280 --> 00:02:41,840
process in essentially in Reverse<font color="#CCCCCC"> plus</font>

56
00:02:39,560 --> 00:02:43,580
<font color="#CCCCCC">its name</font><font color="#E5E5E5"> reverse engineering but</font>

57
00:02:41,840 --> 00:02:48,560
<font color="#E5E5E5">specifically</font><font color="#CCCCCC"> we want to decompose a</font>

58
00:02:43,580 --> 00:02:51,110
complex system into<font color="#E5E5E5"> its constituent</font>

59
00:02:48,560 --> 00:02:53,120
parts and understand how the whole<font color="#E5E5E5"> how</font>

60
00:02:51,110 --> 00:02:57,020
<font color="#E5E5E5">the system as a</font><font color="#CCCCCC"> whole works and also how</font>

61
00:02:53,120 --> 00:03:00,170
individual parts work and we might also

62
00:02:57,020 --> 00:03:03,920
want<font color="#CCCCCC"> to understand how their product</font><font color="#E5E5E5"> or</font>

63
00:03:00,170 --> 00:03:08,299
<font color="#E5E5E5">how that system</font><font color="#CCCCCC"> is constructed and</font><font color="#E5E5E5"> in</font>

64
00:03:03,920 --> 00:03:10,790
the in the case of software unlike some

65
00:03:08,300 --> 00:03:12,650
other things<font color="#CCCCCC"> that we might want to</font>

66
00:03:10,790 --> 00:03:15,170
reverse<font color="#E5E5E5"> engineer we've got a full</font>

67
00:03:12,650 --> 00:03:18,230
description in how<font color="#CCCCCC"> that program</font><font color="#E5E5E5"> operates</font>

68
00:03:15,170 --> 00:03:20,809
<font color="#E5E5E5">which is the object code or like the</font>

69
00:03:18,230 --> 00:03:24,560
compiled<font color="#CCCCCC"> code</font><font color="#E5E5E5"> and we want to go from</font>

70
00:03:20,810 --> 00:03:26,420
<font color="#E5E5E5">that compiled code to understandable you</font>

71
00:03:24,560 --> 00:03:30,080
know an understandable description of

72
00:03:26,420 --> 00:03:31,399
the program<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this there are</font><font color="#E5E5E5"> two you</font>

73
00:03:30,080 --> 00:03:33,470
know groups of techniques<font color="#E5E5E5"> that we can</font>

74
00:03:31,400 --> 00:03:35,540
<font color="#E5E5E5">use static analysis where we're</font><font color="#CCCCCC"> looking</font>

75
00:03:33,470 --> 00:03:37,640
at the application<font color="#E5E5E5"> on disk</font><font color="#CCCCCC"> without</font>

76
00:03:35,540 --> 00:03:40,070
<font color="#E5E5E5">running it and runtime analysis where</font>

77
00:03:37,640 --> 00:03:43,339
we're running it<font color="#E5E5E5"> may</font><font color="#CCCCCC"> being</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> Augmented</font>

78
00:03:40,070 --> 00:03:44,870
or modified execution environment but

79
00:03:43,340 --> 00:03:46,970
since we're<font color="#E5E5E5"> talking about obfuscated</font>

80
00:03:44,870 --> 00:03:50,690
applications<font color="#CCCCCC"> I'm going to focus on the</font>

81
00:03:46,970 --> 00:03:52,370
former we focus on static analysis some

82
00:03:50,690 --> 00:03:55,100
reverse engineering the whole<font color="#E5E5E5"> and</font>

83
00:03:52,370 --> 00:03:57,560
variety of things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can take as</font>

84
00:03:55,100 --> 00:03:59,120
input<font color="#E5E5E5"> into the process</font><font color="#CCCCCC"> the first the</font>

85
00:03:57,560 --> 00:04:03,380
most obvious for our purposes is

86
00:03:59,120 --> 00:04:05,150
compiled<font color="#CCCCCC"> object code and if we're doing</font>

87
00:04:03,380 --> 00:04:08,000
dynamic<font color="#CCCCCC"> honest and program behavior</font>

88
00:04:05,150 --> 00:04:09,500
would<font color="#CCCCCC"> be kind of</font><font color="#E5E5E5"> the main input but</font>

89
00:04:08,000 --> 00:04:12,140
there are lots of other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> that we</font>

90
00:04:09,500 --> 00:04:14,420
can<font color="#CCCCCC"> use to</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of give us clues to</font><font color="#E5E5E5"> help</font>

91
00:04:12,140 --> 00:04:17,839
us like form hypotheses about<font color="#CCCCCC"> how the</font>

92
00:04:14,420 --> 00:04:20,200
system works that includes things like

93
00:04:17,839 --> 00:04:24,260
<font color="#CCCCCC">configuration files any static resources</font>

94
00:04:20,200 --> 00:04:25,729
if we're reverse engineering a client

95
00:04:24,260 --> 00:04:28,520
which<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> normal case for an</font><font color="#CCCCCC"> Android</font>

96
00:04:25,729 --> 00:04:29,240
application<font color="#CCCCCC"> then the server</font><font color="#E5E5E5"> will also</font>

97
00:04:28,520 --> 00:04:34,250
give<font color="#CCCCCC"> us</font>

98
00:04:29,240 --> 00:04:36,400
is how the client operates<font color="#CCCCCC"> and there's</font>

99
00:04:34,250 --> 00:04:40,699
public documentation stands within<font color="#E5E5E5"> that</font>

100
00:04:36,400 --> 00:04:42,138
we can<font color="#E5E5E5"> look at similar systems so if</font>

101
00:04:40,699 --> 00:04:44,210
we're looking<font color="#CCCCCC"> into</font><font color="#E5E5E5"> saying in</font><font color="#CCCCCC"> to end</font>

102
00:04:42,139 --> 00:04:46,699
encryption client<font color="#E5E5E5"> we might look at say</font>

103
00:04:44,210 --> 00:04:49,580
<font color="#E5E5E5">open source implementations look at the</font>

104
00:04:46,699 --> 00:04:51,259
design patterns<font color="#E5E5E5"> that they use and try</font>

105
00:04:49,580 --> 00:04:53,060
and spot<font color="#CCCCCC"> the same use of those</font><font color="#E5E5E5"> patterns</font>

106
00:04:51,259 --> 00:04:56,000
in the system that<font color="#CCCCCC"> we're actually trying</font>

107
00:04:53,060 --> 00:04:58,340
<font color="#E5E5E5">to reverse</font><font color="#CCCCCC"> engineer and</font><font color="#E5E5E5"> of course this</font>

108
00:04:56,000 --> 00:05:02,300
<font color="#E5E5E5">things like open source code and patents</font>

109
00:04:58,340 --> 00:05:04,429
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> week we can use</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> again give</font>

110
00:05:02,300 --> 00:05:08,630
<font color="#CCCCCC">us give</font><font color="#E5E5E5"> us more clues and probably a</font>

111
00:05:04,430 --> 00:05:10,400
less obvious<font color="#CCCCCC"> kind of clue less obvious</font>

112
00:05:08,630 --> 00:05:13,280
clues that we can use or things like

113
00:05:10,400 --> 00:05:15,229
company structures<font color="#E5E5E5"> in history if we look</font>

114
00:05:13,280 --> 00:05:17,448
at a large<font color="#CCCCCC"> company in the history of</font>

115
00:05:15,229 --> 00:05:18,919
acquisitions and mergers<font color="#E5E5E5"> that</font><font color="#CCCCCC"> can</font>

116
00:05:17,449 --> 00:05:21,860
actually<font color="#E5E5E5"> give us clues as</font><font color="#CCCCCC"> to how the</font>

117
00:05:18,919 --> 00:05:26,508
<font color="#E5E5E5">software has been constructed and how</font>

118
00:05:21,860 --> 00:05:29,060
<font color="#CCCCCC">its evolved over time also things like</font>

119
00:05:26,509 --> 00:05:33,440
you know<font color="#CCCCCC"> Lietz documents and developer</font>

120
00:05:29,060 --> 00:05:35,750
LinkedIn pages so static<font color="#E5E5E5"> versus dynamic</font>

121
00:05:33,440 --> 00:05:39,199
analysis we typically want<font color="#E5E5E5"> to combine</font>

122
00:05:35,750 --> 00:05:41,210
both of<font color="#CCCCCC"> these approaches static notes is</font>

123
00:05:39,199 --> 00:05:42,919
especially useful if there's<font color="#E5E5E5"> you know</font>

124
00:05:41,210 --> 00:05:44,989
any mechanism which<font color="#CCCCCC"> is trying</font><font color="#E5E5E5"> to prevent</font>

125
00:05:42,919 --> 00:05:48,740
dynamic analysis<font color="#E5E5E5"> you might start with</font>

126
00:05:44,990 --> 00:05:51,979
static analysis modify the<font color="#CCCCCC"> application</font>

127
00:05:48,740 --> 00:05:57,380
so<font color="#CCCCCC"> that we can can then kind of analyze</font>

128
00:05:51,979 --> 00:05:59,780
it<font color="#CCCCCC"> and at runtime and likewise dynamic</font>

129
00:05:57,380 --> 00:06:03,669
analysis might be better if the if the

130
00:05:59,780 --> 00:06:03,669
application is heavily obfuscated

131
00:06:06,900 --> 00:06:12,250
<font color="#CCCCCC">okay so so we're gonna play this race</font>

132
00:06:09,940 --> 00:06:14,260
we're typically<font color="#CCCCCC"> looking at an app which</font>

133
00:06:12,250 --> 00:06:15,870
<font color="#E5E5E5">has been heavily obfuscated but where we</font>

134
00:06:14,260 --> 00:06:20,820
<font color="#E5E5E5">need to know the specific implementation</font>

135
00:06:15,870 --> 00:06:24,250
<font color="#E5E5E5">details of</font><font color="#CCCCCC"> other protocol or something</font>

136
00:06:20,820 --> 00:06:26,139
and and we can't<font color="#E5E5E5"> get the knowledge</font><font color="#CCCCCC"> that</font>

137
00:06:24,250 --> 00:06:29,010
<font color="#E5E5E5">we need through purely dynamic analysis</font>

138
00:06:26,139 --> 00:06:32,320
<font color="#E5E5E5">I'm just going to give a very quick</font>

139
00:06:29,010 --> 00:06:34,000
<font color="#CCCCCC">briefing on the legal aspects</font><font color="#E5E5E5"> of reverse</font>

140
00:06:32,320 --> 00:06:36,310
<font color="#CCCCCC">engineering</font><font color="#E5E5E5"> it's worth touching these</font>

141
00:06:34,000 --> 00:06:38,979
with a normal<font color="#CCCCCC"> disk laser that</font><font color="#E5E5E5"> I am NOT a</font>

142
00:06:36,310 --> 00:06:41,470
lawyer<font color="#E5E5E5"> but ultimately reverse</font>

143
00:06:38,979 --> 00:06:43,180
engineering is not<font color="#CCCCCC"> illegal but there</font><font color="#E5E5E5"> are</font>

144
00:06:41,470 --> 00:06:46,449
a<font color="#E5E5E5"> whole variety of</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> that could</font>

145
00:06:43,180 --> 00:06:48,910
curtail your<font color="#E5E5E5"> ability to conduct reverse</font>

146
00:06:46,449 --> 00:06:50,590
engineering<font color="#CCCCCC"> and</font><font color="#E5E5E5"> part of the most common</font>

147
00:06:48,910 --> 00:06:53,440
ones<font color="#E5E5E5"> especially for hobbyists might be</font>

148
00:06:50,590 --> 00:06:55,840
like end-user license agreements but

149
00:06:53,440 --> 00:07:01,840
<font color="#E5E5E5">there is a whole raft of you know laws</font>

150
00:06:55,840 --> 00:07:04,090
which are relevant<font color="#CCCCCC"> and typically oh</font><font color="#E5E5E5"> I</font>

151
00:07:01,840 --> 00:07:08,530
don't<font color="#E5E5E5"> want to say too much because you</font>

152
00:07:04,090 --> 00:07:09,909
know<font color="#CCCCCC"> this is an area</font><font color="#E5E5E5"> I specialize in but</font>

153
00:07:08,530 --> 00:07:13,119
you know<font color="#E5E5E5"> think things like</font><font color="#CCCCCC"> copyright</font>

154
00:07:09,910 --> 00:07:14,710
protects the expression of a computer

155
00:07:13,120 --> 00:07:16,810
program<font color="#CCCCCC"> so typically things like source</font>

156
00:07:14,710 --> 00:07:20,138
code<font color="#E5E5E5"> and if you've got compiled object</font>

157
00:07:16,810 --> 00:07:23,169
<font color="#E5E5E5">code then that's typically not you know</font>

158
00:07:20,139 --> 00:07:26,020
covered by<font color="#E5E5E5"> it by copyright</font><font color="#CCCCCC"> and also this</font>

159
00:07:23,169 --> 00:07:27,789
is also<font color="#E5E5E5"> a changing field so even though</font>

160
00:07:26,020 --> 00:07:30,609
<font color="#E5E5E5">people are</font><font color="#CCCCCC"> worrying</font><font color="#E5E5E5"> about the Western</font>

161
00:07:27,789 --> 00:07:32,080
<font color="#E5E5E5">our arrangement in</font><font color="#CCCCCC"> terms of like in a</font>

162
00:07:30,610 --> 00:07:34,030
distribution<font color="#CCCCCC"> of exploits and</font>

163
00:07:32,080 --> 00:07:36,430
exploitation techniques<font color="#E5E5E5"> there's a lot of</font>

164
00:07:34,030 --> 00:07:38,520
overlap<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> engineering so as these</font>

165
00:07:36,430 --> 00:07:41,830
country implements the law differently

166
00:07:38,520 --> 00:07:43,840
<font color="#E5E5E5">you could see the reverse engineering is</font>

167
00:07:41,830 --> 00:07:45,820
<font color="#E5E5E5">effective like that but there's a long</font>

168
00:07:43,840 --> 00:07:48,010
well-established history of reverse

169
00:07:45,820 --> 00:07:49,510
<font color="#CCCCCC">engineering people reverse engineering</font>

170
00:07:48,010 --> 00:07:51,639
physical products and trying to make

171
00:07:49,510 --> 00:07:53,740
competitors<font color="#CCCCCC"> and you know kind of the</font>

172
00:07:51,639 --> 00:08:00,010
right to reverse engineer<font color="#E5E5E5"> something as</font>

173
00:07:53,740 --> 00:08:01,990
seen as spurring innovation<font color="#E5E5E5"> okay so I'm</font>

174
00:08:00,010 --> 00:08:04,919
talking<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> two old so I'm going</font>

175
00:08:01,990 --> 00:08:06,699
<font color="#CCCCCC">to talk about</font><font color="#E5E5E5"> Android runtimes</font><font color="#CCCCCC"> now</font>

176
00:08:04,919 --> 00:08:08,620
<font color="#E5E5E5">obviously when you think of Android</font>

177
00:08:06,699 --> 00:08:09,889
applications you think of the open

178
00:08:08,620 --> 00:08:12,729
<font color="#E5E5E5">source</font>

179
00:08:09,889 --> 00:08:15,560
Android project but there are a<font color="#E5E5E5"> whole</font>

180
00:08:12,729 --> 00:08:19,490
there<font color="#E5E5E5"> are a</font><font color="#CCCCCC"> number of variations on this</font>

181
00:08:15,560 --> 00:08:21,770
<font color="#E5E5E5">so obviously Google Play has got a lot</font>

182
00:08:19,490 --> 00:08:23,810
more<font color="#CCCCCC"> lockdown and</font><font color="#E5E5E5"> controlled ecosystem</font>

183
00:08:21,770 --> 00:08:26,270
<font color="#E5E5E5">and you have to agree</font><font color="#CCCCCC"> to certain things</font>

184
00:08:23,810 --> 00:08:29,300
in<font color="#E5E5E5"> order to</font><font color="#CCCCCC"> seize the you know to have</font>

185
00:08:26,270 --> 00:08:33,049
<font color="#E5E5E5">to have applications in your platform</font><font color="#CCCCCC"> be</font>

186
00:08:29,300 --> 00:08:34,789
able to<font color="#CCCCCC"> access Google Play services</font><font color="#E5E5E5"> but</font>

187
00:08:33,049 --> 00:08:37,309
then other applications with fewer

188
00:08:34,789 --> 00:08:39,348
<font color="#E5E5E5">native applications of</font><font color="#CCCCCC"> their own have</font>

189
00:08:37,309 --> 00:08:41,809
<font color="#E5E5E5">implemented that</font><font color="#CCCCCC"> you know Android</font>

190
00:08:39,349 --> 00:08:45,019
players you know based on<font color="#E5E5E5"> the open</font>

191
00:08:41,809 --> 00:08:46,339
source<font color="#E5E5E5"> code so they can run they can</font>

192
00:08:45,019 --> 00:08:47,839
take<font color="#CCCCCC"> advantage</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> shoes number</font>

193
00:08:46,339 --> 00:08:50,950
applications in the<font color="#CCCCCC"> Google Play Store</font>

194
00:08:47,839 --> 00:08:53,450
<font color="#CCCCCC">and run them on their</font><font color="#E5E5E5"> own applications</font>

195
00:08:50,950 --> 00:08:57,110
site<font color="#E5E5E5"> includes operating</font><font color="#CCCCCC"> it's like</font>

196
00:08:53,450 --> 00:08:59,750
blackberry 10<font color="#E5E5E5"> sailfish and I heard some</font>

197
00:08:57,110 --> 00:09:02,209
recent talk about Windows<font color="#E5E5E5"> 10 supporting</font>

198
00:08:59,750 --> 00:09:04,070
Android<font color="#E5E5E5"> apps</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the desktop I don't</font>

199
00:09:02,209 --> 00:09:07,459
<font color="#E5E5E5">only</font><font color="#CCCCCC"> did more details about</font><font color="#E5E5E5"> that</font>

200
00:09:04,070 --> 00:09:09,800
so the first Android runtime<font color="#CCCCCC"> shipped</font><font color="#E5E5E5"> for</font>

201
00:09:07,459 --> 00:09:12,229
the first Android<font color="#E5E5E5"> is called dalvik it's</font>

202
00:09:09,800 --> 00:09:15,469
named after a<font color="#E5E5E5"> small fishing</font><font color="#CCCCCC"> town in in</font>

203
00:09:12,230 --> 00:09:18,949
Iceland<font color="#E5E5E5"> and it's essentially very very</font>

204
00:09:15,470 --> 00:09:21,440
similar<font color="#E5E5E5"> to</font><font color="#CCCCCC"> - now</font><font color="#E5E5E5"> Oracle's and</font><font color="#CCCCCC"> Java</font>

205
00:09:18,949 --> 00:09:24,529
<font color="#CCCCCC">Virtual Machine</font><font color="#E5E5E5"> so it uses an</font>

206
00:09:21,440 --> 00:09:29,360
application virtual machine<font color="#CCCCCC"> that will</font>

207
00:09:24,529 --> 00:09:31,670
take like<font color="#CCCCCC"> up codes for a virtual CPU and</font>

208
00:09:29,360 --> 00:09:36,110
<font color="#E5E5E5">it will compile them at runtime on the</font>

209
00:09:31,670 --> 00:09:38,810
fly into into code for the<font color="#E5E5E5"> actual native</font>

210
00:09:36,110 --> 00:09:43,610
<font color="#E5E5E5">processor will there be are more x86 or</font>

211
00:09:38,810 --> 00:09:45,859
<font color="#E5E5E5">MIPS so what what the</font><font color="#CCCCCC"> DAO</font><font color="#E5E5E5"> at runtime</font>

212
00:09:43,610 --> 00:09:49,010
does is it optimizes this virtual

213
00:09:45,860 --> 00:09:52,490
machine<font color="#CCCCCC"> or</font><font color="#E5E5E5"> rather changes the</font>

214
00:09:49,010 --> 00:09:55,040
<font color="#E5E5E5">configuration of the kind of virtualized</font>

215
00:09:52,490 --> 00:09:57,050
<font color="#E5E5E5">CPU and makes it into</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> that's</font>

216
00:09:55,040 --> 00:09:59,390
<font color="#CCCCCC">more appropriate for mobile devices</font>

217
00:09:57,050 --> 00:10:02,689
<font color="#CCCCCC">because Android is only you know</font><font color="#E5E5E5"> only</font>

218
00:09:59,390 --> 00:10:06,980
<font color="#E5E5E5">targeting mobile devices at this point</font>

219
00:10:02,690 --> 00:10:08,600
and so when you<font color="#CCCCCC"> install an Android</font>

220
00:10:06,980 --> 00:10:10,910
application<font color="#CCCCCC"> part</font><font color="#E5E5E5"> of the application</font>

221
00:10:08,600 --> 00:10:13,279
<font color="#CCCCCC">package would be a</font><font color="#E5E5E5"> Dex file or a dalvik</font>

222
00:10:10,910 --> 00:10:15,769
executable and<font color="#E5E5E5"> when you install</font><font color="#CCCCCC"> the</font>

223
00:10:13,279 --> 00:10:17,750
application that can<font color="#E5E5E5"> be optimized for</font>

224
00:10:15,769 --> 00:10:20,000
<font color="#E5E5E5">your specific device for your particular</font>

225
00:10:17,750 --> 00:10:22,530
version<font color="#CCCCCC"> of the operating system</font>

226
00:10:20,000 --> 00:10:25,200
<font color="#CCCCCC">and this allows you to</font>

227
00:10:22,530 --> 00:10:28,410
maintain compatibility across<font color="#E5E5E5"> a whole</font>

228
00:10:25,200 --> 00:10:32,700
wide range<font color="#E5E5E5"> of devices but still be able</font>

229
00:10:28,410 --> 00:10:34,709
<font color="#E5E5E5">to do per device optimization more</font>

230
00:10:32,700 --> 00:10:38,040
recently though they<font color="#E5E5E5"> started shipping</font>

231
00:10:34,710 --> 00:10:41,040
<font color="#E5E5E5">art so art shipped in originally a</font>

232
00:10:38,040 --> 00:10:43,800
KitKat<font color="#E5E5E5"> but it's now the default runtime</font>

233
00:10:41,040 --> 00:10:45,719
in lollipop<font color="#E5E5E5"> instead of</font><font color="#CCCCCC"> taking</font><font color="#E5E5E5"> the JIT</font>

234
00:10:43,800 --> 00:10:47,689
approach<font color="#E5E5E5"> when you install the</font>

235
00:10:45,720 --> 00:10:51,300
application it actually gets compiled

236
00:10:47,690 --> 00:10:53,820
<font color="#CCCCCC">into native</font><font color="#E5E5E5"> code so it's a very</font>

237
00:10:51,300 --> 00:10:56,819
different very different very<font color="#E5E5E5"> different</font>

238
00:10:53,820 --> 00:10:59,190
architecture but common to both

239
00:10:56,820 --> 00:11:02,160
approaches<font color="#E5E5E5"> you've got essentially Java</font>

240
00:10:59,190 --> 00:11:04,530
source code<font color="#E5E5E5"> and you know native modules</font>

241
00:11:02,160 --> 00:11:08,520
that are compiled<font color="#E5E5E5"> into an</font><font color="#CCCCCC"> application</font>

242
00:11:04,530 --> 00:11:10,439
package<font color="#CCCCCC"> and the compiled</font><font color="#E5E5E5"> Java code is</font>

243
00:11:08,520 --> 00:11:12,810
taken from the<font color="#CCCCCC"> unit it's converting</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a</font>

244
00:11:10,440 --> 00:11:14,520
<font color="#CCCCCC">dex into the dex file and the different</font>

245
00:11:12,810 --> 00:11:17,189
runtimes will interpret<font color="#E5E5E5"> that Dex</font>

246
00:11:14,520 --> 00:11:18,480
differently so dalvik will optimize<font color="#E5E5E5"> it</font>

247
00:11:17,190 --> 00:11:21,990
but it will<font color="#E5E5E5"> still be essentially</font><font color="#CCCCCC"> the</font>

248
00:11:18,480 --> 00:11:25,610
<font color="#CCCCCC">same</font><font color="#E5E5E5"> thing art on the other hand will</font>

249
00:11:21,990 --> 00:11:30,480
convert it into a native executable

250
00:11:25,610 --> 00:11:32,130
<font color="#E5E5E5">typically in the elf format okay</font><font color="#CCCCCC"> so I'm</font>

251
00:11:30,480 --> 00:11:34,200
now going<font color="#CCCCCC"> to kind of lead through the</font>

252
00:11:32,130 --> 00:11:37,320
basic process that you would follow in

253
00:11:34,200 --> 00:11:40,730
<font color="#E5E5E5">order to kind of take apart an Android</font>

254
00:11:37,320 --> 00:11:40,730
application<font color="#CCCCCC"> and see how it works</font>

255
00:11:41,780 --> 00:11:49,290
so first of<font color="#E5E5E5"> all we need an apk we need</font>

256
00:11:44,580 --> 00:11:52,500
we need that static code to decompile<font color="#E5E5E5"> it</font>

257
00:11:49,290 --> 00:11:54,000
can do this<font color="#CCCCCC"> using its there online you</font>

258
00:11:52,500 --> 00:11:56,970
<font color="#CCCCCC">know web applications</font><font color="#E5E5E5"> that will download</font>

259
00:11:54,000 --> 00:12:00,630
<font color="#CCCCCC">that the apk from</font><font color="#E5E5E5"> Google Play for you</font>

260
00:11:56,970 --> 00:12:03,330
there's also some browser<font color="#E5E5E5"> plugins or</font>

261
00:12:00,630 --> 00:12:05,670
return to<font color="#E5E5E5"> them this might be better</font><font color="#CCCCCC"> you</font>

262
00:12:03,330 --> 00:12:08,550
can actually you can<font color="#CCCCCC"> just copy</font><font color="#E5E5E5"> the apk</font>

263
00:12:05,670 --> 00:12:11,640
<font color="#E5E5E5">off of the device</font><font color="#CCCCCC"> and the advantage of</font>

264
00:12:08,550 --> 00:12:13,800
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that you can you can be sure</font>

265
00:12:11,640 --> 00:12:16,140
that<font color="#E5E5E5"> the the stack the static analysis</font>

266
00:12:13,800 --> 00:12:18,260
<font color="#E5E5E5">that you're doing is the same as the app</font>

267
00:12:16,140 --> 00:12:20,730
that<font color="#E5E5E5"> you're looking at on the device</font><font color="#CCCCCC"> oh</font>

268
00:12:18,260 --> 00:12:22,760
<font color="#E5E5E5">it turns him you</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> download the apk</font>

269
00:12:20,730 --> 00:12:26,920
from<font color="#CCCCCC"> a dodgy Chinese app store but</font>

270
00:12:22,760 --> 00:12:31,240
<font color="#CCCCCC">that's maybe</font><font color="#E5E5E5"> not advisable</font>

271
00:12:26,920 --> 00:12:33,160
for the obvious<font color="#E5E5E5"> reasons</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> Sony apk</font>

272
00:12:31,240 --> 00:12:35,589
files of the distribution unit for

273
00:12:33,160 --> 00:12:37,779
Android apps<font color="#CCCCCC"> is essentially a zip file</font>

274
00:12:35,589 --> 00:12:41,639
<font color="#CCCCCC">and inside that</font><font color="#E5E5E5"> zip file there are a</font>

275
00:12:37,779 --> 00:12:44,380
number<font color="#CCCCCC"> of folders</font><font color="#E5E5E5"> so the assets are</font>

276
00:12:41,639 --> 00:12:47,139
specific files which are referenced by

277
00:12:44,380 --> 00:12:51,820
the<font color="#E5E5E5"> byline by the developer like</font>

278
00:12:47,139 --> 00:12:53,620
<font color="#CCCCCC">explicitly Owen's open hello.txt you've</font>

279
00:12:51,820 --> 00:12:57,430
<font color="#E5E5E5">got</font><font color="#CCCCCC"> libraries which can lib which</font>

280
00:12:53,620 --> 00:12:58,810
contains any like native code<font color="#E5E5E5"> so Nate</font>

281
00:12:57,430 --> 00:13:01,000
your native code is loaded<font color="#CCCCCC"> by the</font>

282
00:12:58,810 --> 00:13:03,339
<font color="#E5E5E5">application that could maybe you do</font>

283
00:13:01,000 --> 00:13:08,320
implement<font color="#E5E5E5"> functionality that isn't</font>

284
00:13:03,339 --> 00:13:10,870
<font color="#CCCCCC">appropriate for for Java the meta</font><font color="#E5E5E5"> in</font>

285
00:13:08,320 --> 00:13:13,899
folder is essentially a folder

286
00:13:10,870 --> 00:13:15,820
containing<font color="#E5E5E5"> the digital signatures for</font>

287
00:13:13,899 --> 00:13:18,730
the application<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is what you need to</font>

288
00:13:15,820 --> 00:13:20,620
verify<font color="#CCCCCC"> that you know the app hasn't</font><font color="#E5E5E5"> been</font>

289
00:13:18,730 --> 00:13:24,519
tampered<font color="#CCCCCC"> with that</font><font color="#E5E5E5"> it was signed by</font><font color="#CCCCCC"> the</font>

290
00:13:20,620 --> 00:13:26,800
expected<font color="#CCCCCC"> and author and so on and then</font>

291
00:13:24,519 --> 00:13:29,800
there's a resource file which is again

292
00:13:26,800 --> 00:13:31,810
assets<font color="#E5E5E5"> but that aren't explicitly been</font>

293
00:13:29,800 --> 00:13:35,260
referenced by the<font color="#E5E5E5"> application</font><font color="#CCCCCC"> there</font>

294
00:13:31,810 --> 00:13:41,260
<font color="#CCCCCC">they've generated as part of the Android</font>

295
00:13:35,260 --> 00:13:45,040
<font color="#CCCCCC">like UI generation so path</font><font color="#E5E5E5"> so the SDK</font>

296
00:13:41,260 --> 00:13:47,019
<font color="#E5E5E5">kind of arranges these kind of crates</font>

297
00:13:45,040 --> 00:13:49,750
these files in your<font color="#CCCCCC"> behalf to explain</font>

298
00:13:47,019 --> 00:13:52,390
how the screen is laid out<font color="#E5E5E5"> and to know</font>

299
00:13:49,750 --> 00:13:55,079
embed icons and then there's through

300
00:13:52,390 --> 00:13:58,300
<font color="#E5E5E5">normally three files</font>

301
00:13:55,079 --> 00:14:00,189
<font color="#E5E5E5">xxx rather faster Android manifest is</font>

302
00:13:58,300 --> 00:14:01,810
essentially the contract between the

303
00:14:00,190 --> 00:14:04,449
application<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the operating system</font>

304
00:14:01,810 --> 00:14:05,979
<font color="#CCCCCC">that says you know how you</font><font color="#E5E5E5"> expect the</font>

305
00:14:04,449 --> 00:14:08,699
app to<font color="#E5E5E5"> be used and how it</font><font color="#CCCCCC"> should</font>

306
00:14:05,980 --> 00:14:11,110
interact for the operating<font color="#CCCCCC"> system a</font>

307
00:14:08,699 --> 00:14:14,260
<font color="#E5E5E5">class has</font><font color="#CCCCCC"> doc</font><font color="#E5E5E5"> deck Dex</font>

308
00:14:11,110 --> 00:14:15,760
that's our object code so that's what we

309
00:14:14,260 --> 00:14:20,560
need<font color="#E5E5E5"> to compile if we want to get back</font>

310
00:14:15,760 --> 00:14:21,730
to in understanding the you know the

311
00:14:20,560 --> 00:14:24,010
individual operations that the

312
00:14:21,730 --> 00:14:27,779
application<font color="#E5E5E5"> is doing and then resources</font>

313
00:14:24,010 --> 00:14:30,160
<font color="#E5E5E5">that a</font><font color="#CCCCCC"> RSC file that's kind of a single</font>

314
00:14:27,779 --> 00:14:32,199
<font color="#E5E5E5">conglomerate of smaller resources like</font>

315
00:14:30,160 --> 00:14:36,670
strings<font color="#CCCCCC"> that you don't want to put in</font>

316
00:14:32,199 --> 00:14:38,689
<font color="#E5E5E5">there individual individual files and so</font>

317
00:14:36,670 --> 00:14:41,180
when we get when we reverse engine

318
00:14:38,690 --> 00:14:43,640
the<font color="#E5E5E5"> father to get back also</font><font color="#CCCCCC"> we want to</font>

319
00:14:41,180 --> 00:14:46,489
get back to understand<font color="#E5E5E5"> we'll code or</font>

320
00:14:43,640 --> 00:14:49,550
some other<font color="#E5E5E5"> understandable representation</font>

321
00:14:46,490 --> 00:14:53,210
of the program<font color="#E5E5E5"> so we start with an apk</font>

322
00:14:49,550 --> 00:14:55,459
<font color="#E5E5E5">we extract the Dex byte code we can then</font>

323
00:14:53,210 --> 00:14:57,740
disassemble<font color="#E5E5E5"> that code into something</font>

324
00:14:55,460 --> 00:15:01,100
called<font color="#E5E5E5"> smiley disassembly you can see</font>

325
00:14:57,740 --> 00:15:03,290
that on the<font color="#CCCCCC"> right</font><font color="#E5E5E5"> and then from smiley</font>

326
00:15:01,100 --> 00:15:05,710
we can use a decompiler to reduce<font color="#CCCCCC"> Java</font>

327
00:15:03,290 --> 00:15:08,030
source<font color="#CCCCCC"> code you can see that on the</font><font color="#E5E5E5"> left</font>

328
00:15:05,710 --> 00:15:13,640
although<font color="#CCCCCC"> this</font><font color="#E5E5E5"> are they're completely</font>

329
00:15:08,030 --> 00:15:17,290
<font color="#CCCCCC">different code and then and then we need</font>

330
00:15:13,640 --> 00:15:23,449
like human analysis to get from<font color="#E5E5E5"> that to</font>

331
00:15:17,290 --> 00:15:26,900
<font color="#CCCCCC">understandable code so one one tool that</font>

332
00:15:23,450 --> 00:15:28,220
<font color="#CCCCCC">you may have heard</font><font color="#E5E5E5"> of which is extremely</font>

333
00:15:26,900 --> 00:15:29,260
<font color="#CCCCCC">useful and for me it's use is called</font>

334
00:15:28,220 --> 00:15:32,000
<font color="#CCCCCC">apktool</font>

335
00:15:29,260 --> 00:15:34,490
and what that allows you to<font color="#E5E5E5"> do is go</font>

336
00:15:32,000 --> 00:15:38,360
between<font color="#E5E5E5"> your apk and smiley</font>

337
00:15:34,490 --> 00:15:40,220
<font color="#E5E5E5">disassembling</font><font color="#CCCCCC"> and so it kind of packages</font>

338
00:15:38,360 --> 00:15:42,590
a few different operations together<font color="#CCCCCC"> and</font>

339
00:15:40,220 --> 00:15:45,770
because of<font color="#E5E5E5"> that</font><font color="#CCCCCC"> hides some of</font><font color="#E5E5E5"> you know</font>

340
00:15:42,590 --> 00:15:48,770
what's happening under you know<font color="#CCCCCC"> I'm kind</font>

341
00:15:45,770 --> 00:15:50,510
of under<font color="#CCCCCC"> the covers and which</font><font color="#E5E5E5"> means that</font>

342
00:15:48,770 --> 00:15:56,300
if you're trying to<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> engineer</font><font color="#E5E5E5"> a</font>

343
00:15:50,510 --> 00:15:58,819
more complicated app that maybe<font color="#E5E5E5"> I know</font>

344
00:15:56,300 --> 00:16:01,069
doesn't<font color="#E5E5E5"> want</font><font color="#CCCCCC"> apktool to</font><font color="#E5E5E5"> be a ton packet</font>

345
00:15:58,820 --> 00:16:04,430
then you know<font color="#E5E5E5"> this process might not</font>

346
00:16:01,070 --> 00:16:09,160
<font color="#CCCCCC">work</font><font color="#E5E5E5"> so it's better to break the process</font>

347
00:16:04,430 --> 00:16:13,310
down into<font color="#CCCCCC"> more into smaller sub stages</font>

348
00:16:09,160 --> 00:16:15,560
<font color="#E5E5E5">so with one operation we</font><font color="#CCCCCC"> can use</font><font color="#E5E5E5"> a pea</font>

349
00:16:13,310 --> 00:16:19,760
<font color="#CCCCCC">hazel to decode and then pull out the</font>

350
00:16:15,560 --> 00:16:21,890
<font color="#E5E5E5">Dex</font><font color="#CCCCCC"> byte</font><font color="#E5E5E5"> code and then separately use</font>

351
00:16:19,760 --> 00:16:24,500
back smiley<font color="#E5E5E5"> which is like a smiley</font>

352
00:16:21,890 --> 00:16:27,410
disassembler to go from the computer

353
00:16:24,500 --> 00:16:29,360
readable<font color="#E5E5E5"> dye</font><font color="#CCCCCC"> byte code into the human</font>

354
00:16:27,410 --> 00:16:35,000
<font color="#E5E5E5">readable</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> not yet human</font>

355
00:16:29,360 --> 00:16:38,510
understandable smiley<font color="#E5E5E5"> disassembly and</font><font color="#CCCCCC"> we</font>

356
00:16:35,000 --> 00:16:40,610
can also go<font color="#CCCCCC"> back the other way so</font>

357
00:16:38,510 --> 00:16:44,780
<font color="#E5E5E5">instead of back smiley ru smiley and</font>

358
00:16:40,610 --> 00:16:47,860
then instead<font color="#CCCCCC"> of instead of apk</font><font color="#E5E5E5"> to decode</font>

359
00:16:44,780 --> 00:16:47,860
we can use apk

360
00:16:51,960 --> 00:16:58,750
however because because the dalvik

361
00:16:56,320 --> 00:17:01,180
<font color="#CCCCCC">virtual machine is so closely rates</font><font color="#E5E5E5"> the</font>

362
00:16:58,750 --> 00:17:03,160
Java Virtual Machine<font color="#CCCCCC"> what someone</font>

363
00:17:01,180 --> 00:17:07,030
realized is that<font color="#E5E5E5"> if you can try and</font>

364
00:17:03,160 --> 00:17:10,740
translate your Dex code into essentially

365
00:17:07,030 --> 00:17:13,660
<font color="#E5E5E5">you know code for the JVM a Java archive</font>

366
00:17:10,740 --> 00:17:16,660
then we can use existing<font color="#E5E5E5"> Java reverse</font>

367
00:17:13,660 --> 00:17:20,410
engineering tools to<font color="#CCCCCC"> 2d compile the code</font>

368
00:17:16,660 --> 00:17:22,660
<font color="#CCCCCC">and so by using Dexter jar</font><font color="#E5E5E5"> and JD GUI</font>

369
00:17:20,410 --> 00:17:26,709
which is a popular<font color="#CCCCCC"> freely java</font>

370
00:17:22,660 --> 00:17:32,920
decompiler<font color="#CCCCCC"> we can actually</font><font color="#E5E5E5"> produce</font><font color="#CCCCCC"> Java</font>

371
00:17:26,709 --> 00:17:34,930
source code up<font color="#E5E5E5"> until</font><font color="#CCCCCC"> now these are all</font>

372
00:17:32,920 --> 00:17:36,790
been free tools is actually a commercial

373
00:17:34,930 --> 00:17:41,050
<font color="#E5E5E5">tool which kind of integrates this whole</font>

374
00:17:36,790 --> 00:17:42,159
process<font color="#CCCCCC"> called the</font><font color="#E5E5E5"> Jeopardy compiler but</font>

375
00:17:41,050 --> 00:17:43,810
that<font color="#E5E5E5"> takes you quite expensive</font>

376
00:17:42,160 --> 00:17:46,750
commercial tool<font color="#E5E5E5"> and they recently</font>

377
00:17:43,810 --> 00:17:48,940
<font color="#CCCCCC">changed the licensing so if you hadn't</font>

378
00:17:46,750 --> 00:17:50,370
bought<font color="#E5E5E5"> it as of a</font><font color="#CCCCCC"> few weeks ago</font><font color="#E5E5E5"> then</font>

379
00:17:48,940 --> 00:17:56,230
it's going to<font color="#E5E5E5"> be a lot more expensive</font>

380
00:17:50,370 --> 00:17:58,000
<font color="#E5E5E5">going forward</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> cover this too</font>

381
00:17:56,230 --> 00:18:00,610
much in<font color="#E5E5E5"> this presentation but quick</font>

382
00:17:58,000 --> 00:18:03,310
detour and if you want to modify the apk

383
00:18:00,610 --> 00:18:06,330
<font color="#E5E5E5">then the best the best way of doing that</font>

384
00:18:03,310 --> 00:18:09,030
<font color="#E5E5E5">is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> modify the smiley disassembly</font><font color="#CCCCCC"> and</font>

385
00:18:06,330 --> 00:18:14,290
then you can use the Android<font color="#CCCCCC"> SDK tools</font>

386
00:18:09,030 --> 00:18:17,470
<font color="#E5E5E5">to re-sign the application and if your</font>

387
00:18:14,290 --> 00:18:20,770
phone<font color="#CCCCCC"> is in</font><font color="#E5E5E5"> development mode then you</font>

388
00:18:17,470 --> 00:18:24,880
<font color="#CCCCCC">can set use like a developer</font><font color="#E5E5E5"> signing key</font>

389
00:18:20,770 --> 00:18:26,800
which again strips of<font color="#E5E5E5"> the apk and then</font>

390
00:18:24,880 --> 00:18:33,250
that the modified code will then

391
00:18:26,800 --> 00:18:37,330
successfully<font color="#E5E5E5"> run on a on a device</font><font color="#CCCCCC"> and</font>

392
00:18:33,250 --> 00:18:39,010
<font color="#E5E5E5">that can be installed</font><font color="#CCCCCC"> using ADB so at</font>

393
00:18:37,330 --> 00:18:41,379
this point hopefully<font color="#E5E5E5"> we've got a</font>

394
00:18:39,010 --> 00:18:44,170
<font color="#E5E5E5">complete</font><font color="#CCCCCC"> Java listing of the code with</font>

395
00:18:41,380 --> 00:18:48,370
like essentially<font color="#E5E5E5"> the same code</font><font color="#CCCCCC"> that the</font>

396
00:18:44,170 --> 00:18:50,320
developer wrote and you know this is a

397
00:18:48,370 --> 00:18:52,570
serious<font color="#CCCCCC"> risk for software</font><font color="#E5E5E5"> development</font>

398
00:18:50,320 --> 00:18:54,939
companies because if you spend you<font color="#CCCCCC"> know</font>

399
00:18:52,570 --> 00:18:57,399
months of developer time or years<font color="#E5E5E5"> of the</font>

400
00:18:54,940 --> 00:18:59,530
<font color="#CCCCCC">lava</font><font color="#E5E5E5"> time you know writing your code you</font>

401
00:18:57,400 --> 00:19:00,290
don't<font color="#CCCCCC"> sign just</font><font color="#E5E5E5"> to be able to take your</font>

402
00:18:59,530 --> 00:19:02,030
end

403
00:19:00,290 --> 00:19:03,800
<font color="#E5E5E5">livable and then to convert it back in</font>

404
00:19:02,030 --> 00:19:06,040
the source code<font color="#E5E5E5"> and then maybe steal</font>

405
00:19:03,800 --> 00:19:10,639
your ideas or steal<font color="#CCCCCC"> your implementation</font>

406
00:19:06,040 --> 00:19:15,200
so this is where<font color="#E5E5E5"> Java obfuscators</font><font color="#CCCCCC"> come</font>

407
00:19:10,640 --> 00:19:17,690
in useful<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> want to obfuscate</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> not</font>

408
00:19:15,200 --> 00:19:21,640
us we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> see the reverse but some</font>

409
00:19:17,690 --> 00:19:24,050
<font color="#E5E5E5">people want</font><font color="#CCCCCC"> to reverse its</font><font color="#E5E5E5"> game cookies</font>

410
00:19:21,640 --> 00:19:26,270
some people want to hire<font color="#CCCCCC"> to the</font>

411
00:19:24,050 --> 00:19:29,540
implementation<font color="#CCCCCC"> of their applications</font><font color="#E5E5E5"> and</font>

412
00:19:26,270 --> 00:19:33,440
<font color="#E5E5E5">so they use obfuscators this is a logo</font>

413
00:19:29,540 --> 00:19:35,180
of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Finnish death metal band called</font>

414
00:19:33,440 --> 00:19:41,000
obfuscation<font color="#CCCCCC"> I don't know if Iran can</font>

415
00:19:35,180 --> 00:19:44,960
read that other back<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so we can look</font>

416
00:19:41,000 --> 00:19:47,330
at obfuscated applications much like you

417
00:19:44,960 --> 00:19:49,520
<font color="#E5E5E5">know metal band logos if you can read</font>

418
00:19:47,330 --> 00:19:55,189
the Java code<font color="#CCCCCC"> then your obfuscate is not</font>

419
00:19:49,520 --> 00:19:56,030
good<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> okay are there</font><font color="#E5E5E5"> any questions</font>

420
00:19:55,190 --> 00:19:58,970
at this<font color="#E5E5E5"> point</font>

421
00:19:56,030 --> 00:19:59,389
I'll stop<font color="#CCCCCC"> briefly for questions</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> okay</font>

422
00:19:58,970 --> 00:20:02,090
<font color="#CCCCCC">good</font>

423
00:19:59,390 --> 00:20:03,650
right so now we're going to<font color="#E5E5E5"> get into the</font>

424
00:20:02,090 --> 00:20:05,689
meat of things<font color="#CCCCCC"> how do we go about</font>

425
00:20:03,650 --> 00:20:08,420
analyzing<font color="#E5E5E5"> applications which</font><font color="#CCCCCC"> have been</font>

426
00:20:05,690 --> 00:20:13,390
obfuscated<font color="#E5E5E5"> what techniques are used and</font>

427
00:20:08,420 --> 00:20:16,970
what<font color="#E5E5E5"> tenants can we use to overcome that</font>

428
00:20:13,390 --> 00:20:20,180
so this<font color="#E5E5E5"> came from an application that I</font>

429
00:20:16,970 --> 00:20:22,630
was looking at and I put it into<font color="#E5E5E5"> a JD</font>

430
00:20:20,180 --> 00:20:25,430
GUI and<font color="#E5E5E5"> I essentially get a morass of</font>

431
00:20:22,630 --> 00:20:28,970
totally or seemingly totally unreadable

432
00:20:25,430 --> 00:20:32,030
code every every<font color="#E5E5E5"> classroom variable</font>

433
00:20:28,970 --> 00:20:34,880
every field<font color="#E5E5E5"> has been renamed to</font><font color="#CCCCCC"> a single</font>

434
00:20:32,030 --> 00:20:38,090
character<font color="#CCCCCC"> unicode</font><font color="#E5E5E5"> name so we've got</font>

435
00:20:34,880 --> 00:20:40,790
classes<font color="#E5E5E5"> though you know use like</font><font color="#CCCCCC"> hindi</font>

436
00:20:38,090 --> 00:20:44,419
characters and all sorts of you know

437
00:20:40,790 --> 00:20:45,950
semantically meaningless<font color="#E5E5E5"> names so if we</font>

438
00:20:44,420 --> 00:20:48,830
want to<font color="#E5E5E5"> do static analysis of this we</font>

439
00:20:45,950 --> 00:20:52,010
need sir<font color="#CCCCCC"> I know we</font><font color="#E5E5E5"> need to come up</font><font color="#CCCCCC"> with</font>

440
00:20:48,830 --> 00:20:55,159
some techniques to<font color="#E5E5E5"> better translate</font>

441
00:20:52,010 --> 00:20:56,870
large amounts of obfuscated code<font color="#E5E5E5"> however</font>

442
00:20:55,160 --> 00:20:59,120
it's not it's not all<font color="#E5E5E5"> bad there are</font>

443
00:20:56,870 --> 00:21:01,939
certain<font color="#CCCCCC"> things that just can't be office</font>

444
00:20:59,120 --> 00:21:04,550
gated so you've got a primitive type

445
00:21:01,940 --> 00:21:08,690
that's used<font color="#CCCCCC"> by the</font><font color="#E5E5E5"> dalvik VM say like an</font>

446
00:21:04,550 --> 00:21:10,460
<font color="#CCCCCC">INT or or a string or you've got an API</font>

447
00:21:08,690 --> 00:21:12,860
function which<font color="#CCCCCC"> being provided by the</font>

448
00:21:10,460 --> 00:21:15,770
yes<font color="#E5E5E5"> those things can't easily be</font>

449
00:21:12,860 --> 00:21:18,080
obfuscated<font color="#E5E5E5"> because if we try and rename</font>

450
00:21:15,770 --> 00:21:21,710
a function<font color="#CCCCCC"> that you're</font><font color="#E5E5E5"> calling as part</font>

451
00:21:18,080 --> 00:21:23,899
of the<font color="#E5E5E5"> Android SDK</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> your your</font>

452
00:21:21,710 --> 00:21:26,500
application is no<font color="#E5E5E5"> longer compatible with</font>

453
00:21:23,900 --> 00:21:29,500
you know with that<font color="#CCCCCC"> version</font><font color="#E5E5E5"> of Android</font>

454
00:21:26,500 --> 00:21:32,240
likewise any API is which are exporting

455
00:21:29,500 --> 00:21:34,040
they can't be obfuscated<font color="#E5E5E5"> always</font><font color="#CCCCCC"> you'll</font>

456
00:21:32,240 --> 00:21:37,640
break integrations with other people's

457
00:21:34,040 --> 00:21:40,639
<font color="#E5E5E5">code and any code that</font><font color="#CCCCCC"> relies on</font><font color="#E5E5E5"> Java</font>

458
00:21:37,640 --> 00:21:43,910
reflection<font color="#CCCCCC"> so code that makes decisions</font>

459
00:21:40,640 --> 00:21:48,920
<font color="#CCCCCC">based</font><font color="#E5E5E5"> on the structure of other Java</font>

460
00:21:43,910 --> 00:21:51,230
code so even though the code has been

461
00:21:48,920 --> 00:21:53,660
<font color="#E5E5E5">obfuscated we can still kind of make</font>

462
00:21:51,230 --> 00:21:57,860
some<font color="#E5E5E5"> vague sense of some parts of the</font>

463
00:21:53,660 --> 00:21:59,930
application<font color="#CCCCCC"> so we can see that</font><font color="#E5E5E5"> I know</font>

464
00:21:57,860 --> 00:22:02,530
it's doing some encryption<font color="#E5E5E5"> and then it's</font>

465
00:21:59,930 --> 00:22:06,530
forming a string based on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> encrypted</font>

466
00:22:02,530 --> 00:22:09,320
values but<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example we don't have any</font>

467
00:22:06,530 --> 00:22:11,780
variable names<font color="#E5E5E5"> and so we have to go from</font>

468
00:22:09,320 --> 00:22:13,939
<font color="#CCCCCC">API calls and</font><font color="#E5E5E5"> kind of work</font><font color="#CCCCCC"> backwards and</font>

469
00:22:11,780 --> 00:22:15,649
<font color="#CCCCCC">figure out you know what does</font><font color="#E5E5E5"> this</font>

470
00:22:13,940 --> 00:22:23,030
variable actually<font color="#CCCCCC"> do what you know</font><font color="#E5E5E5"> how</font>

471
00:22:15,650 --> 00:22:25,160
does<font color="#CCCCCC"> it change</font><font color="#E5E5E5"> the system so one one one</font>

472
00:22:23,030 --> 00:22:27,800
thing that<font color="#E5E5E5"> really doesn't</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> when</font>

473
00:22:25,160 --> 00:22:32,060
you office<font color="#CCCCCC"> gate an application</font><font color="#E5E5E5"> is the</font>

474
00:22:27,800 --> 00:22:34,909
structure of classes in Java<font color="#E5E5E5"> each each</font>

475
00:22:32,060 --> 00:22:38,659
class can<font color="#CCCCCC"> only</font><font color="#E5E5E5"> inherit from a single</font>

476
00:22:34,910 --> 00:22:43,390
parent class<font color="#E5E5E5"> unlike things</font><font color="#CCCCCC"> that the C++</font>

477
00:22:38,660 --> 00:22:45,950
<font color="#CCCCCC">way to support multiple</font><font color="#E5E5E5"> inheritance</font><font color="#CCCCCC"> and</font>

478
00:22:43,390 --> 00:22:49,010
as a result we<font color="#E5E5E5"> can kind of we can kind</font>

479
00:22:45,950 --> 00:22:51,500
of<font color="#E5E5E5"> traverse the inheritance graph and</font>

480
00:22:49,010 --> 00:22:55,490
make reason like deductions about

481
00:22:51,500 --> 00:22:57,680
specific classes<font color="#E5E5E5"> so from this we know</font>

482
00:22:55,490 --> 00:23:01,520
<font color="#CCCCCC">that</font><font color="#E5E5E5"> Class A is an object it's not</font>

483
00:22:57,680 --> 00:23:03,440
derived from<font color="#E5E5E5"> a more complex class and</font>

484
00:23:01,520 --> 00:23:05,540
then we've got two<font color="#CCCCCC"> subclasses of</font><font color="#E5E5E5"> that</font>

485
00:23:03,440 --> 00:23:08,900
and so that<font color="#E5E5E5"> tells us a little bit but</font>

486
00:23:05,540 --> 00:23:11,620
not very<font color="#E5E5E5"> much about what those classes I</font>

487
00:23:08,900 --> 00:23:11,620
actually do

488
00:23:11,760 --> 00:23:17,950
however if if class if instead of<font color="#CCCCCC"> Class</font>

489
00:23:15,039 --> 00:23:20,440
<font color="#CCCCCC">A or instead</font><font color="#E5E5E5"> of having an obfuscated</font>

490
00:23:17,950 --> 00:23:24,220
name is actually it's<font color="#CCCCCC"> actually a class</font>

491
00:23:20,440 --> 00:23:26,710
which is part of the Android<font color="#CCCCCC"> SDK</font><font color="#E5E5E5"> say</font>

492
00:23:24,220 --> 00:23:29,200
<font color="#CCCCCC">light service then</font><font color="#E5E5E5"> we can reason that</font>

493
00:23:26,710 --> 00:23:32,940
Class B and Class C of both types of

494
00:23:29,200 --> 00:23:37,120
<font color="#E5E5E5">Android service and we can apply this</font>

495
00:23:32,940 --> 00:23:38,830
<font color="#E5E5E5">same approach instead</font><font color="#CCCCCC"> of looking</font><font color="#E5E5E5"> at</font>

496
00:23:37,120 --> 00:23:41,289
inheritance we look<font color="#CCCCCC"> and look at the</font>

497
00:23:38,830 --> 00:23:43,418
information<font color="#CCCCCC"> of interfaces</font><font color="#E5E5E5"> so in this</font>

498
00:23:41,289 --> 00:23:46,750
case Class A implements the<font color="#CCCCCC"> eye</font>

499
00:23:43,419 --> 00:23:49,179
serializable interface<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we can reason</font>

500
00:23:46,750 --> 00:23:51,669
<font color="#E5E5E5">the classes a B and C are all</font>

501
00:23:49,179 --> 00:23:55,090
serializable<font color="#E5E5E5"> objects maybe they do</font><font color="#CCCCCC"> some</font>

502
00:23:51,669 --> 00:24:00,940
kind<font color="#E5E5E5"> of you</font><font color="#CCCCCC"> know application data</font>

503
00:23:55,090 --> 00:24:02,289
storage<font color="#CCCCCC"> it can start getting</font><font color="#E5E5E5"> very hairy</font>

504
00:24:00,940 --> 00:24:05,350
if you've got you know lots of

505
00:24:02,289 --> 00:24:08,710
interfaces you know lots of subclasses

506
00:24:05,350 --> 00:24:11,590
<font color="#E5E5E5">so we may want to prioritize which</font>

507
00:24:08,710 --> 00:24:13,600
<font color="#E5E5E5">interfaces and which parent classes</font>

508
00:24:11,590 --> 00:24:19,350
<font color="#CCCCCC">we're most interested in as reverse</font>

509
00:24:13,600 --> 00:24:27,879
engineers so we can say<font color="#E5E5E5"> C is you know</font>

510
00:24:19,350 --> 00:24:30,039
<font color="#E5E5E5">some object</font><font color="#CCCCCC"> and Class B is some other</font>

511
00:24:27,880 --> 00:24:33,100
you<font color="#E5E5E5"> know some other type of object but</font>

512
00:24:30,039 --> 00:24:36,309
<font color="#CCCCCC">where maybe we care more about you know</font>

513
00:24:33,100 --> 00:24:39,309
<font color="#E5E5E5">the</font><font color="#CCCCCC"> the interface in red than the the</font>

514
00:24:36,309 --> 00:24:41,200
more generic interface at the<font color="#E5E5E5"> top so</font>

515
00:24:39,309 --> 00:24:43,629
<font color="#CCCCCC">typically than what the more specific</font><font color="#E5E5E5"> a</font>

516
00:24:41,200 --> 00:24:45,580
class<font color="#CCCCCC"> or most specific an interface is</font>

517
00:24:43,630 --> 00:24:51,159
<font color="#E5E5E5">the more it tells us about the function</font>

518
00:24:45,580 --> 00:24:52,689
<font color="#E5E5E5">or</font><font color="#CCCCCC"> the specialization of an object the</font>

519
00:24:51,159 --> 00:24:54,970
<font color="#CCCCCC">other thing is you can't really offer</font>

520
00:24:52,690 --> 00:24:57,820
<font color="#E5E5E5">scale an Android manifest because it's a</font>

521
00:24:54,970 --> 00:25:01,240
<font color="#E5E5E5">contract between the application</font><font color="#CCCCCC"> and the</font>

522
00:24:57,820 --> 00:25:03,158
and the<font color="#E5E5E5"> rest of the system it has to be</font>

523
00:25:01,240 --> 00:25:05,110
readable by<font color="#CCCCCC"> an</font><font color="#E5E5E5"> assistant</font><font color="#CCCCCC"> having a war</font>

524
00:25:03,159 --> 00:25:07,600
<font color="#CCCCCC">defined format</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> were defined</font>

525
00:25:05,110 --> 00:25:09,520
format is<font color="#CCCCCC"> the Android</font>

526
00:25:07,600 --> 00:25:11,830
XML format<font color="#E5E5E5"> looks like a binary XML</font>

527
00:25:09,520 --> 00:25:17,139
format<font color="#E5E5E5"> so you can just use the SDK tools</font>

528
00:25:11,830 --> 00:25:20,230
to to unpick this and inside<font color="#E5E5E5"> there</font><font color="#CCCCCC"> that</font>

529
00:25:17,140 --> 00:25:22,170
essentially defines a lot of the attack

530
00:25:20,230 --> 00:25:25,440
<font color="#E5E5E5">surface of the application</font>

531
00:25:22,170 --> 00:25:27,060
so it<font color="#E5E5E5"> will tell you which system events</font>

532
00:25:25,440 --> 00:25:29,190
the application is you know listening

533
00:25:27,060 --> 00:25:31,850
out<font color="#CCCCCC"> for in</font><font color="#E5E5E5"> terms of registered broadcast</font>

534
00:25:29,190 --> 00:25:34,380
receivers it can tell you about

535
00:25:31,850 --> 00:25:36,629
activities<font color="#E5E5E5"> and if these are public than</font>

536
00:25:34,380 --> 00:25:38,400
these are<font color="#E5E5E5"> essentially attack surface</font>

537
00:25:36,630 --> 00:25:43,230
exposed<font color="#E5E5E5"> to other</font><font color="#CCCCCC"> applications on the</font>

538
00:25:38,400 --> 00:25:45,630
device<font color="#E5E5E5"> tells us about content stores at</font>

539
00:25:43,230 --> 00:25:47,940
in terms of which<font color="#E5E5E5"> I'm going through</font>

540
00:25:45,630 --> 00:25:50,340
which<font color="#E5E5E5"> Android calls content providers</font>

541
00:25:47,940 --> 00:25:53,640
<font color="#E5E5E5">and whether or not these are you know</font>

542
00:25:50,340 --> 00:25:55,230
<font color="#E5E5E5">publicly exposed or not if they're</font>

543
00:25:53,640 --> 00:25:56,760
defined on the manifest<font color="#E5E5E5"> then you know</font>

544
00:25:55,230 --> 00:26:00,090
<font color="#E5E5E5">that information</font><font color="#CCCCCC"> is it's kind of</font>

545
00:25:56,760 --> 00:26:01,800
disclosed through<font color="#E5E5E5"> reverse engineer and</font>

546
00:26:00,090 --> 00:26:04,530
likewise we can know all about the

547
00:26:01,800 --> 00:26:08,340
<font color="#E5E5E5">permissions that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> defined</font><font color="#CCCCCC"> there's no</font>

548
00:26:04,530 --> 00:26:11,129
way to<font color="#E5E5E5"> get that kind</font><font color="#CCCCCC"> of information</font><font color="#E5E5E5"> and</font>

549
00:26:08,340 --> 00:26:12,929
lasting services which are essentially

550
00:26:11,130 --> 00:26:15,960
portions of code which can<font color="#E5E5E5"> run in the</font>

551
00:26:12,930 --> 00:26:18,900
<font color="#CCCCCC">background</font><font color="#E5E5E5"> so even when</font><font color="#CCCCCC"> the applications</font>

552
00:26:15,960 --> 00:26:20,550
main UI isn't running<font color="#E5E5E5"> code can still run</font>

553
00:26:18,900 --> 00:26:23,250
<font color="#CCCCCC">on</font><font color="#E5E5E5"> the device</font><font color="#CCCCCC"> see if you've got say like</font>

554
00:26:20,550 --> 00:26:31,409
a VoIP client<font color="#E5E5E5"> the service will listen</font>

555
00:26:23,250 --> 00:26:33,600
<font color="#E5E5E5">out</font><font color="#CCCCCC"> for incoming calls yeah so if we're</font>

556
00:26:31,410 --> 00:26:36,780
<font color="#E5E5E5">trying to manually go through and</font>

557
00:26:33,600 --> 00:26:38,550
understand the code we want<font color="#E5E5E5"> to focus on</font>

558
00:26:36,780 --> 00:26:40,950
the areas that<font color="#E5E5E5"> which are most of</font>

559
00:26:38,550 --> 00:26:43,500
interest to us<font color="#CCCCCC"> so if you're trying to</font><font color="#E5E5E5"> a</font>

560
00:26:40,950 --> 00:26:46,680
security<font color="#CCCCCC"> assessment</font><font color="#E5E5E5"> then any classes</font>

561
00:26:43,500 --> 00:26:48,750
which related<font color="#E5E5E5"> to external inputs and</font>

562
00:26:46,680 --> 00:26:49,890
they become<font color="#E5E5E5"> kind of candidate points for</font>

563
00:26:48,750 --> 00:26:52,710
<font color="#E5E5E5">us to start to do some reverse</font>

564
00:26:49,890 --> 00:26:55,590
engineering but<font color="#E5E5E5"> especially when</font>

565
00:26:52,710 --> 00:26:57,660
application is heavily obfuscated we

566
00:26:55,590 --> 00:27:00,020
will<font color="#E5E5E5"> look for other things so you</font><font color="#CCCCCC"> know</font>

567
00:26:57,660 --> 00:27:02,910
kind<font color="#CCCCCC"> of any references to cryptography</font>

568
00:27:00,020 --> 00:27:06,270
<font color="#CCCCCC">or any kind of</font><font color="#E5E5E5"> like large arrays of</font>

569
00:27:02,910 --> 00:27:09,090
random looking data or for reason become

570
00:27:06,270 --> 00:27:11,520
obvious later<font color="#E5E5E5"> any kind of use of the</font>

571
00:27:09,090 --> 00:27:14,240
reflection<font color="#E5E5E5"> API</font><font color="#CCCCCC"> such as get this method</font>

572
00:27:11,520 --> 00:27:14,240
or invoke this method

573
00:27:15,380 --> 00:27:20,360
and so yeah there<font color="#E5E5E5"> are</font><font color="#CCCCCC"> some common</font>

574
00:27:18,410 --> 00:27:22,100
obfuscation<font color="#E5E5E5"> x' that are used</font><font color="#CCCCCC"> obviously</font>

575
00:27:20,360 --> 00:27:23,389
each obvious case exam to do things

576
00:27:22,100 --> 00:27:24,260
slightly differently<font color="#CCCCCC"> it's going to</font>

577
00:27:23,390 --> 00:27:26,060
implement<font color="#CCCCCC"> it it's going</font><font color="#E5E5E5"> to have</font>

578
00:27:24,260 --> 00:27:28,730
<font color="#E5E5E5">different features</font><font color="#CCCCCC"> and it's going</font><font color="#E5E5E5"> to</font>

579
00:27:26,060 --> 00:27:31,790
implement<font color="#CCCCCC"> streets in different ways</font><font color="#E5E5E5"> but</font>

580
00:27:28,730 --> 00:27:33,800
<font color="#E5E5E5">these are some common techniques and</font>

581
00:27:31,790 --> 00:27:36,710
really<font color="#CCCCCC"> they split into two groups so</font>

582
00:27:33,800 --> 00:27:38,840
those<font color="#CCCCCC"> that either improve improve</font>

583
00:27:36,710 --> 00:27:41,330
performance or you know<font color="#CCCCCC"> basically don't</font>

584
00:27:38,840 --> 00:27:43,370
degrade performance<font color="#E5E5E5"> and those are the</font>

585
00:27:41,330 --> 00:27:45,110
great performance so the ones<font color="#E5E5E5"> that</font>

586
00:27:43,370 --> 00:27:47,629
maintain<font color="#CCCCCC"> the same real</font><font color="#E5E5E5"> performance are</font>

587
00:27:45,110 --> 00:27:49,669
likely to enable by default and then

588
00:27:47,630 --> 00:27:53,420
whether or<font color="#E5E5E5"> not you use the more invasive</font>

589
00:27:49,670 --> 00:27:57,020
obfuscation<font color="#E5E5E5"> is depend on how important</font>

590
00:27:53,420 --> 00:27:58,820
application performance is so an

591
00:27:57,020 --> 00:28:01,310
opportunity<font color="#CCCCCC"> things like remove dead code</font>

592
00:27:58,820 --> 00:28:04,429
which is a very<font color="#E5E5E5"> simple optimization as</font>

593
00:28:01,310 --> 00:28:07,879
we saw earlier<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> use it to rename</font>

594
00:28:04,430 --> 00:28:10,220
classes<font color="#E5E5E5"> so you know methods and fields</font>

595
00:28:07,880 --> 00:28:13,940
<font color="#E5E5E5">and variables so they no longer have</font>

596
00:28:10,220 --> 00:28:15,650
semantically useful names logging code

597
00:28:13,940 --> 00:28:18,650
which can<font color="#E5E5E5"> normally be quite illuminating</font>

598
00:28:15,650 --> 00:28:20,950
is also removed and then it's able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do</font>

599
00:28:18,650 --> 00:28:23,300
any kind<font color="#E5E5E5"> of like peephole optimization</font>

600
00:28:20,950 --> 00:28:26,060
optimizations in<font color="#E5E5E5"> the same way that Oh</font>

601
00:28:23,300 --> 00:28:28,370
Dex<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know kind of</font><font color="#CCCCCC"> optimize</font><font color="#E5E5E5"> Dex</font>

602
00:28:26,060 --> 00:28:29,990
process does so if<font color="#E5E5E5"> you multiply and</font>

603
00:28:28,370 --> 00:28:32,209
<font color="#E5E5E5">divide by a power of two then you can</font>

604
00:28:29,990 --> 00:28:35,210
turn<font color="#E5E5E5"> that into a shift or you know those</font>

605
00:28:32,210 --> 00:28:36,860
kind of<font color="#E5E5E5"> things that make</font><font color="#CCCCCC"> the code</font>

606
00:28:35,210 --> 00:28:40,700
semantically more difficult to

607
00:28:36,860 --> 00:28:43,760
understand<font color="#CCCCCC"> but</font><font color="#E5E5E5"> yeah more interesting are</font>

608
00:28:40,700 --> 00:28:44,990
the obfuscation<font color="#CCCCCC"> z' that</font><font color="#E5E5E5"> degrade</font>

609
00:28:43,760 --> 00:28:47,090
performance<font color="#CCCCCC"> or things like</font><font color="#E5E5E5"> string</font>

610
00:28:44,990 --> 00:28:50,690
encryption<font color="#E5E5E5"> reverse injuring one and one</font>

611
00:28:47,090 --> 00:28:52,639
is like run strings on the on<font color="#E5E5E5"> the on the</font>

612
00:28:50,690 --> 00:28:54,860
application and<font color="#E5E5E5"> was</font><font color="#CCCCCC"> true</font><font color="#E5E5E5"> encryption we</font>

613
00:28:52,640 --> 00:28:58,130
actually remove any human readable

614
00:28:54,860 --> 00:29:00,469
strings from from the application we can

615
00:28:58,130 --> 00:29:02,570
<font color="#CCCCCC">use</font><font color="#E5E5E5"> also new cool hiding with reflection</font>

616
00:29:00,470 --> 00:29:04,870
and<font color="#CCCCCC"> i'll talk about</font><font color="#E5E5E5"> those two methods in</font>

617
00:29:02,570 --> 00:29:07,990
more<font color="#E5E5E5"> detail in a</font><font color="#CCCCCC"> bit</font>

618
00:29:04,870 --> 00:29:11,179
<font color="#E5E5E5">the those assets which are</font><font color="#CCCCCC"> loaded from</font>

619
00:29:07,990 --> 00:29:13,400
you know the asset folder<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> APK we</font>

620
00:29:11,180 --> 00:29:14,870
can choose<font color="#E5E5E5"> to encrypt those so that</font><font color="#CCCCCC"> if</font>

621
00:29:13,400 --> 00:29:18,740
you<font color="#E5E5E5"> just open up</font><font color="#CCCCCC"> they okay</font><font color="#E5E5E5"> you can't</font>

622
00:29:14,870 --> 00:29:23,030
actually read the contents<font color="#CCCCCC"> you can do</font>

623
00:29:18,740 --> 00:29:26,870
<font color="#E5E5E5">control flow obfuscation</font><font color="#CCCCCC"> so change</font><font color="#E5E5E5"> the</font>

624
00:29:23,030 --> 00:29:29,379
order<font color="#E5E5E5"> and the kind of arrangement of how</font>

625
00:29:26,870 --> 00:29:33,739
instructions<font color="#CCCCCC"> executed</font><font color="#E5E5E5"> whilst maintaining</font>

626
00:29:29,380 --> 00:29:37,280
<font color="#E5E5E5">kind of an equivalent an equivalent</font>

627
00:29:33,740 --> 00:29:41,000
program<font color="#E5E5E5"> we can also throw in junk junk</font>

628
00:29:37,280 --> 00:29:44,420
code that<font color="#E5E5E5"> maybe has completely</font><font color="#CCCCCC"> surf</font>

629
00:29:41,000 --> 00:29:46,670
superfluous or references to<font color="#E5E5E5"> to</font>

630
00:29:44,420 --> 00:29:49,730
encryption<font color="#CCCCCC"> or to other things that</font><font color="#E5E5E5"> might</font>

631
00:29:46,670 --> 00:29:51,890
mislead<font color="#CCCCCC"> a</font><font color="#E5E5E5"> reverse engineer and we can</font>

632
00:29:49,730 --> 00:29:55,940
also do<font color="#CCCCCC"> dataflow operations so instead</font>

633
00:29:51,890 --> 00:29:58,040
<font color="#CCCCCC">of maybe</font><font color="#E5E5E5"> moving a value from on value so</font>

634
00:29:55,940 --> 00:30:00,920
from<font color="#E5E5E5"> one register to another we</font><font color="#CCCCCC"> can use</font>

635
00:29:58,040 --> 00:30:03,320
multiple<font color="#CCCCCC"> or operations to</font><font color="#E5E5E5"> to swap the</font>

636
00:30:00,920 --> 00:30:06,130
two registers but just do anything<font color="#CCCCCC"> that</font>

637
00:30:03,320 --> 00:30:09,020
makes it harder<font color="#CCCCCC"> to reason</font><font color="#E5E5E5"> about what</font>

638
00:30:06,130 --> 00:30:14,660
what the code is<font color="#CCCCCC"> really doing or why</font>

639
00:30:09,020 --> 00:30:17,590
it's doing it<font color="#CCCCCC"> okay so first I'm going to</font>

640
00:30:14,660 --> 00:30:20,090
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about decks cards string encryption</font>

641
00:30:17,590 --> 00:30:22,580
I'll quickly introduce program decks

642
00:30:20,090 --> 00:30:26,000
card<font color="#E5E5E5"> so ProGuard chips are free with</font>

643
00:30:22,580 --> 00:30:33,439
<font color="#E5E5E5">Android SDK and it's kind of the bog</font>

644
00:30:26,000 --> 00:30:36,470
<font color="#E5E5E5">standard</font><font color="#CCCCCC"> apk optimizing tool and so it's</font>

645
00:30:33,440 --> 00:30:39,470
the<font color="#E5E5E5"> one that's recommended</font><font color="#CCCCCC"> by Google and</font>

646
00:30:36,470 --> 00:30:42,290
yeah this<font color="#E5E5E5"> is free</font><font color="#CCCCCC"> dense</font><font color="#E5E5E5"> card however</font><font color="#CCCCCC"> it</font>

647
00:30:39,470 --> 00:30:44,120
by the same author bar it<font color="#E5E5E5"> has you know</font>

648
00:30:42,290 --> 00:30:48,170
<font color="#E5E5E5">it has</font><font color="#CCCCCC"> some of those more advanced of</font>

649
00:30:44,120 --> 00:30:49,669
<font color="#CCCCCC">Education features so looking</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> this</font>

650
00:30:48,170 --> 00:30:52,250
application<font color="#CCCCCC"> I start to see code like</font>

651
00:30:49,670 --> 00:30:55,220
<font color="#CCCCCC">this</font><font color="#E5E5E5"> so I can see that</font><font color="#CCCCCC"> it's opening up</font>

652
00:30:52,250 --> 00:30:56,960
<font color="#E5E5E5">on those</font><font color="#CCCCCC"> assets but</font><font color="#E5E5E5"> I can't see the name</font>

653
00:30:55,220 --> 00:30:58,730
I can't see the<font color="#CCCCCC"> file name of the asset</font>

654
00:30:56,960 --> 00:31:02,150
which would be normal<font color="#CCCCCC"> for this type of</font>

655
00:30:58,730 --> 00:31:04,040
<font color="#E5E5E5">code instead it's doing you know some</font>

656
00:31:02,150 --> 00:31:05,780
<font color="#E5E5E5">references</font><font color="#CCCCCC"> and some</font><font color="#E5E5E5"> kind of lookup table</font>

657
00:31:04,040 --> 00:31:08,090
and it's kind of taking<font color="#CCCCCC"> three</font><font color="#E5E5E5"> of these</font>

658
00:31:05,780 --> 00:31:12,290
arguments and then presumably<font color="#E5E5E5"> that</font>

659
00:31:08,090 --> 00:31:14,540
returns a string so this up this lookup

660
00:31:12,290 --> 00:31:17,540
function is turning<font color="#E5E5E5"> those three values</font>

661
00:31:14,540 --> 00:31:18,920
into a string so if you want<font color="#E5E5E5"> to</font>

662
00:31:17,540 --> 00:31:22,040
understand the string<font color="#CCCCCC"> clip should we</font>

663
00:31:18,920 --> 00:31:26,300
<font color="#E5E5E5">dive into the specifics</font><font color="#CCCCCC"> of you know this</font>

664
00:31:22,040 --> 00:31:28,670
<font color="#E5E5E5">particular function and on and you know</font>

665
00:31:26,300 --> 00:31:30,440
<font color="#CCCCCC">reverse engineer to understand what it's</font>

666
00:31:28,670 --> 00:31:34,160
doing what it's doing<font color="#E5E5E5"> and why it's doing</font>

667
00:31:30,440 --> 00:31:36,710
it so the<font color="#CCCCCC"> next few</font><font color="#E5E5E5"> slides there's going</font>

668
00:31:34,160 --> 00:31:40,430
to be lots of code but the code itself

669
00:31:36,710 --> 00:31:43,200
isn't<font color="#E5E5E5"> particularly important</font>

670
00:31:40,430 --> 00:31:44,790
but what is important<font color="#E5E5E5"> is kind of the</font>

671
00:31:43,200 --> 00:31:46,320
logic<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you go through to</font><font color="#E5E5E5"> reason</font>

672
00:31:44,790 --> 00:31:48,450
<font color="#CCCCCC">about what</font><font color="#E5E5E5"> the code does and how you can</font>

673
00:31:46,320 --> 00:31:51,540
do that step by<font color="#CCCCCC"> step and take what</font>

674
00:31:48,450 --> 00:31:53,310
appears to<font color="#CCCCCC"> be you know hard you know</font>

675
00:31:51,540 --> 00:31:56,909
reasonably<font color="#E5E5E5"> hard to understand code and</font>

676
00:31:53,310 --> 00:31:59,340
make tenants<font color="#CCCCCC"> and something useful but we</font>

677
00:31:56,910 --> 00:32:02,160
<font color="#CCCCCC">could avoid all of this by</font><font color="#E5E5E5"> just copying</font>

678
00:31:59,340 --> 00:32:05,129
the code<font color="#CCCCCC"> not understanding it</font><font color="#E5E5E5"> and then</font>

679
00:32:02,160 --> 00:32:07,320
you know inputting the arguments from

680
00:32:05,130 --> 00:32:10,830
<font color="#E5E5E5">the code and that will just hand us back</font>

681
00:32:07,320 --> 00:32:13,350
the decrypted strings<font color="#E5E5E5"> so this is more of</font>

682
00:32:10,830 --> 00:32:14,970
<font color="#CCCCCC">a</font><font color="#E5E5E5"> useful exercise if you want to I kind</font>

683
00:32:13,350 --> 00:32:21,360
<font color="#CCCCCC">of automate the process you're not</font>

684
00:32:14,970 --> 00:32:24,750
copying<font color="#E5E5E5"> and pasting code so we have a</font>

685
00:32:21,360 --> 00:32:27,389
lookup function and it takes three arts

686
00:32:24,750 --> 00:32:33,270
<font color="#E5E5E5">three integer arguments and it turns us</font>

687
00:32:27,390 --> 00:32:36,180
a string<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so the</font><font color="#E5E5E5"> first thing that we</font>

688
00:32:33,270 --> 00:32:38,940
<font color="#E5E5E5">can reason about is it's returning a</font>

689
00:32:36,180 --> 00:32:40,830
string<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> know that's</font><font color="#E5E5E5"> the value that</font>

690
00:32:38,940 --> 00:32:42,900
we actually care<font color="#E5E5E5"> about where does</font><font color="#CCCCCC"> that</font>

691
00:32:40,830 --> 00:32:45,540
string come from well<font color="#E5E5E5"> it comes from the</font>

692
00:32:42,900 --> 00:32:49,230
out buffer<font color="#E5E5E5"> this is like a but yeah just</font>

693
00:32:45,540 --> 00:32:51,690
an array<font color="#CCCCCC"> of</font><font color="#E5E5E5"> bytes okay so we can rename</font>

694
00:32:49,230 --> 00:32:53,310
that byte array to out buffer so it's

695
00:32:51,690 --> 00:32:55,920
<font color="#E5E5E5">what it's clear as to what the purpose</font>

696
00:32:53,310 --> 00:32:58,530
<font color="#CCCCCC">of that is and we can see</font><font color="#E5E5E5"> that way we're</font>

697
00:32:55,920 --> 00:33:02,400
copying values into this buffer<font color="#E5E5E5"> it's in</font>

698
00:32:58,530 --> 00:33:06,120
some kind of<font color="#E5E5E5"> a loop see it's in this</font>

699
00:33:02,400 --> 00:33:08,550
loop we're referencing<font color="#E5E5E5"> an integer and</font>

700
00:33:06,120 --> 00:33:12,270
<font color="#E5E5E5">that introduced incremental in every</font>

701
00:33:08,550 --> 00:33:15,090
iteration<font color="#CCCCCC"> and it's compared to some</font>

702
00:33:12,270 --> 00:33:17,670
other<font color="#CCCCCC"> number before it</font><font color="#E5E5E5"> exits the</font><font color="#CCCCCC"> loop</font>

703
00:33:15,090 --> 00:33:19,709
and returns a string<font color="#CCCCCC"> okay so we can say</font>

704
00:33:17,670 --> 00:33:24,270
<font color="#E5E5E5">that integer</font><font color="#CCCCCC"> is I it's our it's</font><font color="#E5E5E5"> our loop</font>

705
00:33:19,710 --> 00:33:26,160
counter rename<font color="#E5E5E5"> it to I again kind of add</font>

706
00:33:24,270 --> 00:33:27,720
<font color="#E5E5E5">of each there we're adding semantic</font>

707
00:33:26,160 --> 00:33:30,270
information<font color="#E5E5E5"> about what the code actually</font>

708
00:33:27,720 --> 00:33:33,540
does<font color="#E5E5E5"> it's not an integer it's it's a</font>

709
00:33:30,270 --> 00:33:35,730
loop counter like ways we compare this

710
00:33:33,540 --> 00:33:40,580
loop counter to some other value before

711
00:33:35,730 --> 00:33:43,410
<font color="#E5E5E5">we return the string so we can say well</font>

712
00:33:40,580 --> 00:33:45,929
<font color="#E5E5E5">well we can also see that</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> used in</font>

713
00:33:43,410 --> 00:33:48,060
the byte in<font color="#CCCCCC"> allocating the byte array</font><font color="#E5E5E5"> so</font>

714
00:33:45,930 --> 00:33:50,220
<font color="#E5E5E5">we say well this is this is a length so</font>

715
00:33:48,060 --> 00:33:52,520
<font color="#CCCCCC">can we now bring them</font><font color="#E5E5E5"> and rename that</font><font color="#CCCCCC"> to</font>

716
00:33:50,220 --> 00:33:52,520
a length

717
00:33:54,000 --> 00:33:58,840
then we can see that<font color="#CCCCCC"> we've</font><font color="#E5E5E5"> got this</font>

718
00:33:56,110 --> 00:34:03,399
second<font color="#E5E5E5"> also</font><font color="#CCCCCC"> so that the first argument</font>

719
00:33:58,840 --> 00:34:06,100
is being castable by and put into<font color="#CCCCCC"> this</font>

720
00:34:03,400 --> 00:34:08,679
this<font color="#CCCCCC"> byte array which</font><font color="#E5E5E5"> we know is later</font>

721
00:34:06,100 --> 00:34:12,370
<font color="#E5E5E5">turned into</font><font color="#CCCCCC"> a string so</font><font color="#E5E5E5"> this byte value</font>

722
00:34:08,679 --> 00:34:14,650
that must<font color="#E5E5E5"> actually be a character we</font><font color="#CCCCCC"> can</font>

723
00:34:12,370 --> 00:34:20,589
see that's<font color="#E5E5E5"> an argument so that</font><font color="#CCCCCC"> gives</font>

724
00:34:14,650 --> 00:34:22,450
another one of<font color="#E5E5E5"> our arguments</font><font color="#CCCCCC"> and then we</font>

725
00:34:20,590 --> 00:34:24,880
have another index which<font color="#CCCCCC"> is being</font>

726
00:34:22,449 --> 00:34:27,279
<font color="#E5E5E5">incremented on every iteration of the</font>

727
00:34:24,880 --> 00:34:29,440
loop but<font color="#E5E5E5"> it doesn't it doesn't bear any</font>

728
00:34:27,280 --> 00:34:32,650
relation to the length of the the byte

729
00:34:29,440 --> 00:34:34,870
array and if you see that<font color="#CCCCCC"> the</font><font color="#E5E5E5"> bottom one</font>

730
00:34:32,650 --> 00:34:37,720
it's actually<font color="#CCCCCC"> being</font><font color="#E5E5E5"> used as an index</font>

731
00:34:34,870 --> 00:34:40,418
into<font color="#E5E5E5"> our lookup table so which is a</font>

732
00:34:37,719 --> 00:34:42,580
table<font color="#CCCCCC"> of seemingly random data</font>

733
00:34:40,418 --> 00:34:44,350
okay so Bizet's<font color="#E5E5E5"> round and we're gonna</font>

734
00:34:42,580 --> 00:34:48,610
call<font color="#CCCCCC"> that our key</font><font color="#E5E5E5"> just for the sake of</font>

735
00:34:44,350 --> 00:34:52,360
argument<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> that might later tap</font>

736
00:34:48,610 --> 00:34:55,929
sorry wrong<font color="#E5E5E5"> okay so we're slowly</font>

737
00:34:52,360 --> 00:34:59,500
building<font color="#E5E5E5"> up what</font><font color="#CCCCCC"> it is so we've we've</font>

738
00:34:55,929 --> 00:35:02,440
renamed our three variables us<font color="#CCCCCC"> our three</font>

739
00:34:59,500 --> 00:35:06,400
<font color="#E5E5E5">arguments and we're in a position to say</font>

740
00:35:02,440 --> 00:35:09,580
what<font color="#E5E5E5"> this function</font><font color="#CCCCCC"> actually does so in</font>

741
00:35:06,400 --> 00:35:11,800
each iteration of<font color="#E5E5E5"> the of the loop this</font>

742
00:35:09,580 --> 00:35:15,490
character<font color="#E5E5E5"> value is being updated and</font>

743
00:35:11,800 --> 00:35:18,310
it's being updated<font color="#E5E5E5"> by subtracting some</font>

744
00:35:15,490 --> 00:35:24,040
constant value in this<font color="#E5E5E5"> case 29 and then</font>

745
00:35:18,310 --> 00:35:26,110
<font color="#E5E5E5">you're adding yeah you're adding some</font>

746
00:35:24,040 --> 00:35:28,500
some values to<font color="#E5E5E5"> give you a new character</font>

747
00:35:26,110 --> 00:35:35,710
<font color="#E5E5E5">so this is really kind</font><font color="#CCCCCC"> of like a</font>

748
00:35:28,500 --> 00:35:38,260
differential key value so in<font color="#E5E5E5"> summary we</font>

749
00:35:35,710 --> 00:35:40,540
go we<font color="#E5E5E5"> have an array</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> bytes and what it</font>

750
00:35:38,260 --> 00:35:45,190
<font color="#E5E5E5">really describes is the differences</font>

751
00:35:40,540 --> 00:35:47,800
<font color="#E5E5E5">between consecutive characters in a</font>

752
00:35:45,190 --> 00:35:49,630
string our first argument says you know

753
00:35:47,800 --> 00:35:50,830
what our starting character is not

754
00:35:49,630 --> 00:35:53,410
necessarily the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> character in</font><font color="#CCCCCC"> the</font>

755
00:35:50,830 --> 00:35:56,500
<font color="#CCCCCC">string the second one is where we start</font>

756
00:35:53,410 --> 00:35:58,359
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> our key</font><font color="#E5E5E5"> some kind of</font>

757
00:35:56,500 --> 00:36:01,660
taking a sub key from this this array

758
00:35:58,360 --> 00:36:04,019
and the third one is is the length

759
00:36:01,660 --> 00:36:07,660
so if you have a start value<font color="#CCCCCC"> say be a</font>

760
00:36:04,019 --> 00:36:10,029
starting<font color="#CCCCCC"> x1 a length of</font><font color="#E5E5E5"> three we can</font>

761
00:36:07,660 --> 00:36:13,390
<font color="#E5E5E5">kind of go through</font><font color="#CCCCCC"> and say</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> plus</font>

762
00:36:10,029 --> 00:36:15,460
you know that difference is seeing we've

763
00:36:13,390 --> 00:36:17,799
got<font color="#E5E5E5"> C we have the next difference</font><font color="#CCCCCC"> minus</font>

764
00:36:15,460 --> 00:36:21,160
<font color="#CCCCCC">two we get a</font><font color="#E5E5E5"> and a plus the next</font>

765
00:36:17,799 --> 00:36:23,109
<font color="#E5E5E5">difference</font><font color="#CCCCCC"> gives</font><font color="#E5E5E5"> us a</font><font color="#CCCCCC"> T so we've turned</font>

766
00:36:21,160 --> 00:36:28,690
<font color="#E5E5E5">these three integers and a random</font><font color="#CCCCCC"> array</font>

767
00:36:23,109 --> 00:36:30,700
into a string cat<font color="#CCCCCC"> so an</font><font color="#E5E5E5"> interesting</font>

768
00:36:28,690 --> 00:36:35,109
puzzle<font color="#E5E5E5"> would be well if you can see</font>

769
00:36:30,700 --> 00:36:37,808
these big blocks of of random bytes<font color="#E5E5E5"> can</font>

770
00:36:35,109 --> 00:36:39,460
<font color="#CCCCCC">we</font><font color="#E5E5E5"> like search can we kind of kind</font><font color="#CCCCCC"> of</font>

771
00:36:37,809 --> 00:36:42,910
like<font color="#E5E5E5"> brute force the key and work out</font>

772
00:36:39,460 --> 00:36:45,250
what those strings are<font color="#E5E5E5"> and actually I</font>

773
00:36:42,910 --> 00:36:47,049
<font color="#E5E5E5">think you probably can't do that without</font>

774
00:36:45,250 --> 00:36:50,710
<font color="#CCCCCC">D compiling</font><font color="#E5E5E5"> the code because there are</font>

775
00:36:47,049 --> 00:36:53,230
certain constants that change<font color="#E5E5E5"> I think</font>

776
00:36:50,710 --> 00:36:54,190
with with<font color="#CCCCCC"> each successive compilation of</font>

777
00:36:53,230 --> 00:36:56,039
<font color="#CCCCCC">the</font><font color="#E5E5E5"> code</font>

778
00:36:54,190 --> 00:37:00,609
she needs to<font color="#E5E5E5"> be extract those other</font>

779
00:36:56,039 --> 00:37:04,990
constants you know maybe it may<font color="#E5E5E5"> be</font>

780
00:37:00,609 --> 00:37:08,710
stable<font color="#CCCCCC"> the next technique I wanted to</font>

781
00:37:04,990 --> 00:37:11,169
talk about was cool hiding so if you

782
00:37:08,710 --> 00:37:13,660
make a call<font color="#E5E5E5"> to</font><font color="#CCCCCC"> an API</font><font color="#E5E5E5"> say encryption API</font>

783
00:37:11,170 --> 00:37:15,579
then that allows a reverse engineer and

784
00:37:13,660 --> 00:37:17,379
<font color="#E5E5E5">a focusing on that bit of code say well</font>

785
00:37:15,579 --> 00:37:21,609
I want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at how the app does</font>

786
00:37:17,380 --> 00:37:24,519
encryption but if you do that then you

787
00:37:21,609 --> 00:37:26,980
can<font color="#E5E5E5"> statically determine either you know</font>

788
00:37:24,519 --> 00:37:30,970
those encryption api's are being used<font color="#E5E5E5"> so</font>

789
00:37:26,980 --> 00:37:33,700
a way<font color="#CCCCCC"> around this is to</font><font color="#E5E5E5"> encrypt the name</font>

790
00:37:30,970 --> 00:37:36,009
of the function<font color="#CCCCCC"> encrypt the name of the</font>

791
00:37:33,700 --> 00:37:39,009
<font color="#E5E5E5">function you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> and then use</font>

792
00:37:36,009 --> 00:37:41,049
<font color="#E5E5E5">the reflect and</font><font color="#CCCCCC"> then use decrypt that</font>

793
00:37:39,009 --> 00:37:46,960
and then use a reflection<font color="#E5E5E5"> API is to do</font>

794
00:37:41,049 --> 00:37:48,670
the actual<font color="#E5E5E5"> API call so statically you</font>

795
00:37:46,960 --> 00:37:50,910
know you don't know that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> function is</font>

796
00:37:48,670 --> 00:37:50,910
being called

797
00:37:53,160 --> 00:37:58,390
<font color="#E5E5E5">okay so everything I've been talking</font>

798
00:37:56,800 --> 00:38:02,829
about<font color="#E5E5E5"> until now has all been based</font>

799
00:37:58,390 --> 00:38:05,910
<font color="#CCCCCC">around</font><font color="#E5E5E5"> Java and dalvik</font><font color="#CCCCCC"> bytecode</font><font color="#E5E5E5"> but it's</font>

800
00:38:02,829 --> 00:38:08,349
on a quick quick thing about native code

801
00:38:05,910 --> 00:38:11,890
<font color="#E5E5E5">because you can have both inside an</font>

802
00:38:08,349 --> 00:38:14,589
<font color="#CCCCCC">android application</font><font color="#E5E5E5"> so inside your your</font>

803
00:38:11,890 --> 00:38:16,960
lip directory there are further sub

804
00:38:14,589 --> 00:38:21,130
directories which refer to<font color="#CCCCCC"> the different</font>

805
00:38:16,960 --> 00:38:24,309
<font color="#E5E5E5">hardware platforms so like arm</font><font color="#CCCCCC"> mitts x86</font>

806
00:38:21,130 --> 00:38:29,170
<font color="#E5E5E5">or like the different variants of of arm</font>

807
00:38:24,309 --> 00:38:31,930
<font color="#E5E5E5">and</font><font color="#CCCCCC"> then you would use the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> java j'ni</font>

808
00:38:29,170 --> 00:38:35,069
or the Java native interface<font color="#CCCCCC"> so they're</font>

809
00:38:31,930 --> 00:38:36,970
sensing<font color="#E5E5E5"> Marshall calls between the two</font>

810
00:38:35,069 --> 00:38:39,009
<font color="#E5E5E5">between the two between</font><font color="#CCCCCC"> the two</font>

811
00:38:36,970 --> 00:38:41,770
languages<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so this will typically</font>

812
00:38:39,010 --> 00:38:44,380
start<font color="#E5E5E5"> with a system that load load</font>

813
00:38:41,770 --> 00:38:47,500
<font color="#CCCCCC">library call</font><font color="#E5E5E5"> call foo and then it all</font>

814
00:38:44,380 --> 00:38:54,160
load the<font color="#CCCCCC"> library from</font><font color="#E5E5E5"> the from the Lib</font>

815
00:38:47,500 --> 00:38:56,050
directory if you<font color="#E5E5E5"> ever use ID a pro it's</font>

816
00:38:54,160 --> 00:38:57,670
got pretty<font color="#CCCCCC"> good support for</font>

817
00:38:56,050 --> 00:39:01,150
understanding this stuff<font color="#E5E5E5"> it can</font>

818
00:38:57,670 --> 00:39:05,170
understand when when a call is being you

819
00:39:01,150 --> 00:39:07,359
<font color="#E5E5E5">know exposed via</font><font color="#CCCCCC"> j'ni and the</font><font color="#E5E5E5"> J&I call</font>

820
00:39:05,170 --> 00:39:10,210
has a cup and write standard arguments

821
00:39:07,359 --> 00:39:12,339
that helps kind<font color="#E5E5E5"> of helps in the</font>

822
00:39:10,210 --> 00:39:14,530
<font color="#CCCCCC">marshalling between the two languages</font><font color="#E5E5E5"> so</font>

823
00:39:12,339 --> 00:39:16,359
the first argument is<font color="#E5E5E5"> the j'ni</font><font color="#CCCCCC"> ends and</font>

824
00:39:14,530 --> 00:39:19,059
it's essentially an object that allowed

825
00:39:16,359 --> 00:39:21,400
to do things<font color="#CCCCCC"> like</font><font color="#E5E5E5"> make calls in the</font><font color="#CCCCCC"> java</font>

826
00:39:19,059 --> 00:39:25,540
<font color="#CCCCCC">vm</font><font color="#E5E5E5"> you know allocate java objects</font>

827
00:39:21,400 --> 00:39:28,210
deallocate java objects<font color="#E5E5E5"> and it just kind</font>

828
00:39:25,540 --> 00:39:30,880
of yeah it kind of does all the heavy

829
00:39:28,210 --> 00:39:33,910
<font color="#CCCCCC">listening or kind</font><font color="#E5E5E5"> of all the</font><font color="#CCCCCC"> the cool</font>

830
00:39:30,880 --> 00:39:36,400
translation for<font color="#E5E5E5"> you the second argument</font>

831
00:39:33,910 --> 00:39:40,210
is is essentially a pointer to<font color="#CCCCCC"> a j</font>

832
00:39:36,400 --> 00:39:43,210
object so it's if you call a method<font color="#E5E5E5"> on a</font>

833
00:39:40,210 --> 00:39:45,339
class<font color="#E5E5E5"> then this will give you a pointer</font>

834
00:39:43,210 --> 00:39:46,960
to<font color="#E5E5E5"> the instance of that class inside the</font>

835
00:39:45,339 --> 00:39:49,058
JVM<font color="#E5E5E5"> which otherwise you wouldn't have</font>

836
00:39:46,960 --> 00:39:52,180
<font color="#CCCCCC">access to from native code unless you</font>

837
00:39:49,059 --> 00:39:56,170
<font color="#CCCCCC">wants to do crazy parsing</font><font color="#E5E5E5"> of runtime</font>

838
00:39:52,180 --> 00:39:58,980
<font color="#CCCCCC">stain and then following that</font><font color="#E5E5E5"> or any or</font>

839
00:39:56,170 --> 00:39:58,980
any arguments

840
00:40:01,470 --> 00:40:08,200
<font color="#E5E5E5">okay so I'll just leave</font><font color="#CCCCCC"> you with</font><font color="#E5E5E5"> some</font>

841
00:40:04,299 --> 00:40:09,430
quick conclusions obfuscate obfuscators

842
00:40:08,200 --> 00:40:11,020
are really good at<font color="#E5E5E5"> slowing down</font>

843
00:40:09,430 --> 00:40:13,118
attackers there is there<font color="#E5E5E5"> are certain</font>

844
00:40:11,020 --> 00:40:16,299
<font color="#CCCCCC">trade-offs that you that you make in</font>

845
00:40:13,119 --> 00:40:18,960
terms of<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of application speed and</font>

846
00:40:16,299 --> 00:40:22,930
the number of obligations that<font color="#E5E5E5"> you want</font>

847
00:40:18,960 --> 00:40:26,380
but you<font color="#CCCCCC"> have a situation</font><font color="#E5E5E5"> similar to AV</font>

848
00:40:22,930 --> 00:40:28,299
where there's kind<font color="#CCCCCC"> of an arms race</font>

849
00:40:26,380 --> 00:40:30,819
happening between people that<font color="#E5E5E5"> want to</font>

850
00:40:28,299 --> 00:40:33,430
stop their code<font color="#CCCCCC"> and being red and people</font>

851
00:40:30,819 --> 00:40:35,140
that want<font color="#E5E5E5"> to read their code and</font><font color="#CCCCCC"> this</font>

852
00:40:33,430 --> 00:40:39,210
applies not<font color="#CCCCCC"> only to legitimate</font>

853
00:40:35,140 --> 00:40:43,868
applications from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> app store but also</font>

854
00:40:39,210 --> 00:40:47,670
also malware so these these tactics<font color="#E5E5E5"> so</font>

855
00:40:43,869 --> 00:40:47,670
these techniques<font color="#E5E5E5"> are quite applicable</font>

856
00:40:47,940 --> 00:40:53,140
probably the most important thing

857
00:40:49,990 --> 00:40:55,540
<font color="#E5E5E5">probably to point out like none known on</font>

858
00:40:53,140 --> 00:40:56,828
<font color="#E5E5E5">security</font><font color="#CCCCCC"> people is that obfuscators</font>

859
00:40:55,540 --> 00:40:58,770
don't don't

860
00:40:56,829 --> 00:41:01,480
on the whole don't fix vulnerabilities

861
00:40:58,770 --> 00:41:06,160
<font color="#E5E5E5">they just make them harder to find using</font>

862
00:41:01,480 --> 00:41:08,799
static analysis techniques so if<font color="#E5E5E5"> you if</font>

863
00:41:06,160 --> 00:41:10,660
you're<font color="#CCCCCC"> doing an assessment</font><font color="#E5E5E5"> of a of an</font>

864
00:41:08,799 --> 00:41:13,000
<font color="#CCCCCC">android application I would highly</font>

865
00:41:10,660 --> 00:41:15,430
recommend<font color="#CCCCCC"> that you you try and do the</font>

866
00:41:13,000 --> 00:41:17,650
assessment with source<font color="#E5E5E5"> code if your end</font>

867
00:41:15,430 --> 00:41:19,419
goal is to<font color="#E5E5E5"> try and</font><font color="#CCCCCC"> secure the</font>

868
00:41:17,650 --> 00:41:23,260
application as best you can

869
00:41:19,420 --> 00:41:25,240
<font color="#CCCCCC">I see in this</font><font color="#E5E5E5"> presentation</font><font color="#CCCCCC"> I've just</font>

870
00:41:23,260 --> 00:41:26,829
tried<font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of give you some</font>

871
00:41:25,240 --> 00:41:28,808
<font color="#E5E5E5">jumping-off points so if you're</font>

872
00:41:26,829 --> 00:41:30,400
<font color="#E5E5E5">interested in this topic you can go and</font>

873
00:41:28,809 --> 00:41:32,920
learn<font color="#E5E5E5"> some</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> there's only so much</font>

874
00:41:30,400 --> 00:41:34,569
that you<font color="#E5E5E5"> can cover in</font><font color="#CCCCCC"> an hour</font>

875
00:41:32,920 --> 00:41:37,119
presentation<font color="#CCCCCC"> so here's some books I</font>

876
00:41:34,569 --> 00:41:38,890
<font color="#E5E5E5">recommend so the mobile app hacker's</font>

877
00:41:37,119 --> 00:41:43,450
handbook<font color="#CCCCCC"> is like a good introductory</font>

878
00:41:38,890 --> 00:41:44,770
<font color="#E5E5E5">resource Android security internals</font><font color="#CCCCCC"> you</font>

879
00:41:43,450 --> 00:41:46,960
know it's a<font color="#E5E5E5"> great book if you want</font><font color="#CCCCCC"> to go</font>

880
00:41:44,770 --> 00:41:50,319
a lot deeper<font color="#CCCCCC"> it you know it describes</font>

881
00:41:46,960 --> 00:41:53,920
how<font color="#CCCCCC"> the kind</font><font color="#E5E5E5"> of the platform</font><font color="#CCCCCC"> security</font>

882
00:41:50,319 --> 00:41:56,130
mechanisms work which is yeah and

883
00:41:53,920 --> 00:41:58,359
<font color="#E5E5E5">there's like some very very in-depth</font>

884
00:41:56,130 --> 00:42:02,130
discussion<font color="#CCCCCC"> about those</font><font color="#E5E5E5"> you know things</font>

885
00:41:58,359 --> 00:42:04,720
like<font color="#CCCCCC"> Hardware Hardware</font><font color="#E5E5E5"> back key storage</font>

886
00:42:02,130 --> 00:42:06,730
and then finally a book which is nothing

887
00:42:04,720 --> 00:42:08,980
<font color="#CCCCCC">to android whatsoever</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> with a</font>

888
00:42:06,730 --> 00:42:12,369
practical reverse engineering by a<font color="#CCCCCC"> Bruce</font>

889
00:42:08,980 --> 00:42:12,650
<font color="#CCCCCC">tang &</font><font color="#E5E5E5"> Co this is just a great resource</font>

890
00:42:12,369 --> 00:42:14,360
in

891
00:42:12,650 --> 00:42:16,820
if you're interested in reverse

892
00:42:14,360 --> 00:42:19,220
<font color="#E5E5E5">engineering the focus is</font><font color="#CCCCCC"> definitely on</font>

893
00:42:16,820 --> 00:42:21,350
native code reverse engineering<font color="#E5E5E5"> but</font><font color="#CCCCCC"> a</font>

894
00:42:19,220 --> 00:42:27,740
lot<font color="#CCCCCC"> of the principles and</font><font color="#E5E5E5"> the ideas are</font>

895
00:42:21,350 --> 00:42:29,509
in a clickable<font color="#E5E5E5"> everywhere</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> publisher</font>

896
00:42:27,740 --> 00:42:31,189
slides I will obviously have links<font color="#E5E5E5"> all</font>

897
00:42:29,510 --> 00:42:33,410
the tools and stuff<font color="#CCCCCC"> that I mentioned</font>

898
00:42:31,190 --> 00:42:35,840
<font color="#E5E5E5">that there are</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of tools which I</font>

899
00:42:33,410 --> 00:42:38,180
didn't cover in this presentation both

900
00:42:35,840 --> 00:42:41,620
<font color="#E5E5E5">free tools so</font><font color="#CCCCCC"> radar ray is</font><font color="#E5E5E5"> like a</font>

901
00:42:38,180 --> 00:42:44,210
general reverse engineering framework

902
00:42:41,620 --> 00:42:47,540
<font color="#E5E5E5">that has some Android functionality</font>

903
00:42:44,210 --> 00:42:51,350
there's also and regards<font color="#E5E5E5"> which also free</font>

904
00:42:47,540 --> 00:42:56,900
and I think that you know they've been

905
00:42:51,350 --> 00:43:02,560
<font color="#E5E5E5">working on</font><font color="#CCCCCC"> Deacon decompiler BFO</font><font color="#E5E5E5"> good</font>

906
00:42:56,900 --> 00:43:02,560
tool so yeah<font color="#E5E5E5"> if anyone has any questions</font>

907
00:43:20,830 --> 00:43:25,670
well so I mean<font color="#E5E5E5"> if you want to reverse</font>

908
00:43:23,510 --> 00:43:27,350
engineer application like you don't know

909
00:43:25,670 --> 00:43:29,540
ahead of time whether it's malware or

910
00:43:27,350 --> 00:43:31,610
<font color="#CCCCCC">illegitimate</font><font color="#E5E5E5"> vacations</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> you know</font>

911
00:43:29,540 --> 00:43:37,070
reverse engineering is useful in in kind

912
00:43:31,610 --> 00:43:37,720
<font color="#CCCCCC">of both</font><font color="#E5E5E5"> both situations any other</font>

913
00:43:37,070 --> 00:43:40,880
questions

914
00:43:37,720 --> 00:43:42,470
nope<font color="#E5E5E5"> okay great well we'll talk about</font>

915
00:43:40,880 --> 00:43:43,970
this more<font color="#CCCCCC"> you can go</font><font color="#E5E5E5"> bring the bar later</font>

916
00:43:42,470 --> 00:43:46,240
on<font color="#CCCCCC"> but thank you</font><font color="#E5E5E5"> very much for your</font>

917
00:43:43,970 --> 00:43:46,240
attention

918
00:43:50,200 --> 00:43:52,259
<font color="#E5E5E5">you</font>

