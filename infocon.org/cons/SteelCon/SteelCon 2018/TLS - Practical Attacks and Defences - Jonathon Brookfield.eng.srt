1
00:00:00,000 --> 00:00:04,040
right good morning everyone hope the

2
00:00:01,979 --> 00:00:06,779
hangovers aren't too bad from last night

3
00:00:04,040 --> 00:00:10,790
my name is Jonathan<font color="#E5E5E5"> Brookfield honking</font>

4
00:00:06,779 --> 00:00:26,869
today a little bit about TLS from<font color="#E5E5E5"> Philly</font>

5
00:00:10,790 --> 00:00:30,029
hey<font color="#E5E5E5"> defenses against it so I'm switch to</font>

6
00:00:26,869 --> 00:00:31,410
a product security and I've done been

7
00:00:30,029 --> 00:00:34,200
watching product security in<font color="#E5E5E5"> their</font>

8
00:00:31,410 --> 00:00:43,710
search we can blackberry now for last 12

9
00:00:34,200 --> 00:01:03,449
years curity what I mean look they're

10
00:00:43,710 --> 00:01:10,650
released similar mandate<font color="#CCCCCC"> code code</font>

11
00:01:03,449 --> 00:01:13,650
analysis find and fix all the<font color="#E5E5E5"> all the</font>

12
00:01:10,650 --> 00:01:22,229
various security vulnerabilities the

13
00:01:13,650 --> 00:01:24,150
fuge currently interested in a lot<font color="#CCCCCC"> of</font>

14
00:01:22,229 --> 00:01:26,490
this is<font color="#E5E5E5"> black present because that's</font>

15
00:01:24,150 --> 00:01:29,549
where a baneful past couple of years is

16
00:01:26,490 --> 00:01:32,220
sort of authentication protocols secure

17
00:01:29,549 --> 00:01:34,619
boot security architecture threat

18
00:01:32,220 --> 00:01:41,280
modeling and of course<font color="#CCCCCC"> tell</font><font color="#E5E5E5"> at it the</font>

19
00:01:34,619 --> 00:01:42,689
you today about on the program the the

20
00:01:41,280 --> 00:01:44,399
talk should have been myself and

21
00:01:42,689 --> 00:01:48,110
<font color="#CCCCCC">Campbell Murray unfortunate Campbell</font>

22
00:01:44,399 --> 00:01:56,869
can't make it today so yes luck with me

23
00:01:48,110 --> 00:01:56,869
terms some of the building

24
00:02:00,030 --> 00:02:07,149
so that the certificate validation

25
00:02:02,680 --> 00:02:11,200
process that all clients should should

26
00:02:07,149 --> 00:02:12,989
follow when connecting to a server I'm

27
00:02:11,200 --> 00:02:17,768
going<font color="#E5E5E5"> to have a</font><font color="#CCCCCC"> look at some of the</font>

28
00:02:12,989 --> 00:02:21,370
tools for testing testing TLS clients so

29
00:02:17,769 --> 00:02:25,420
be that a an Android application or some

30
00:02:21,370 --> 00:02:29,739
other form of embedded<font color="#E5E5E5"> IOT type device</font>

31
00:02:25,420 --> 00:02:32,920
that's making TLS connections then we're

32
00:02:29,739 --> 00:02:38,019
gonna have a look at some some white box

33
00:02:32,920 --> 00:02:41,470
testing so you have<font color="#CCCCCC"> Kodak's you from an</font>

34
00:02:38,019 --> 00:02:48,060
embedded device or an<font color="#CCCCCC"> APK there are</font>

35
00:02:41,470 --> 00:02:50,200
pretty<font color="#CCCCCC"> saw</font><font color="#E5E5E5"> that will endings like</font>

36
00:02:48,060 --> 00:02:52,150
certificate validation is happening or

37
00:02:50,200 --> 00:03:04,630
isn't happening so just going<font color="#E5E5E5"> to have a</font>

38
00:02:52,150 --> 00:03:07,060
look at those api's and really busy busy

39
00:03:04,630 --> 00:03:10,299
few years for TLS there's been lots and

40
00:03:07,060 --> 00:03:19,420
<font color="#E5E5E5">lots problems with it and then onto onto</font>

41
00:03:10,299 --> 00:03:21,910
Q&A so in turn it's actually works first

42
00:03:19,420 --> 00:03:25,149
thing is a client will normally do a<font color="#CCCCCC"> DNS</font>

43
00:03:21,910 --> 00:03:26,980
query for the name of the server that it

44
00:03:25,150 --> 00:03:29,410
wants to connect to it'll get back the

45
00:03:26,980 --> 00:03:31,780
<font color="#CCCCCC">the IP address of that of said server</font>

46
00:03:29,410 --> 00:03:34,720
then the<font color="#E5E5E5"> client will make a</font><font color="#CCCCCC"> TCP</font>

47
00:03:31,780 --> 00:03:38,650
connection and then until us it will

48
00:03:34,720 --> 00:03:40,359
send a client hello this packet contains

49
00:03:38,650 --> 00:03:42,209
things like the version the cipher

50
00:03:40,359 --> 00:03:44,709
suites that the client is interested in

51
00:03:42,209 --> 00:03:47,920
and a whole bunch of other extensions

52
00:03:44,709 --> 00:03:51,010
that are we<font color="#E5E5E5"> won't we won't be covering</font>

53
00:03:47,920 --> 00:03:54,760
in this talk the server then responds<font color="#E5E5E5"> is</font>

54
00:03:51,010 --> 00:03:57,519
<font color="#CCCCCC">verging it what it wants</font><font color="#E5E5E5"> to use so it</font>

55
00:03:54,760 --> 00:03:59,530
<font color="#E5E5E5">wants to use them another extinctions it</font>

56
00:03:57,519 --> 00:04:01,359
sends<font color="#CCCCCC"> back some certificates that's</font>

57
00:03:59,530 --> 00:04:02,829
normally its server certificate and in

58
00:04:01,359 --> 00:04:07,140
the intermediate certificates<font color="#E5E5E5"> we'll talk</font>

59
00:04:02,829 --> 00:04:11,920
a bit<font color="#E5E5E5"> more about that later and then if</font>

60
00:04:07,140 --> 00:04:13,269
you're<font color="#CCCCCC"> eating a PFS ciphers slightest</font>

61
00:04:11,920 --> 00:04:15,220
<font color="#CCCCCC">week</font><font color="#E5E5E5"> that support</font>

62
00:04:13,270 --> 00:04:19,630
<font color="#E5E5E5">what's perfect forward secrecy you'll</font>

63
00:04:15,220 --> 00:04:25,180
<font color="#CCCCCC">then get an additional that contains</font>

64
00:04:19,630 --> 00:04:27,840
things like diffie-hellman part I at

65
00:04:25,180 --> 00:04:33,670
that<font color="#E5E5E5"> point the server says I'm done and</font>

66
00:04:27,840 --> 00:04:36,609
the client then has to put certificate

67
00:04:33,670 --> 00:04:40,360
of operation ship of a<font color="#CCCCCC"> server side and</font>

68
00:04:36,610 --> 00:04:42,850
then it'll once it's done that and it's

69
00:04:40,360 --> 00:04:44,950
happy<font color="#E5E5E5"> it'll send the client key exchange</font>

70
00:04:42,850 --> 00:04:47,650
message<font color="#E5E5E5"> now this is</font><font color="#CCCCCC"> the this is the</font>

71
00:04:44,950 --> 00:04:49,060
message that<font color="#E5E5E5"> actually contains the key</font>

72
00:04:47,650 --> 00:04:51,250
material from the<font color="#E5E5E5"> client to the server</font>

73
00:04:49,060 --> 00:04:52,900
that they will then switch to so

74
00:04:51,250 --> 00:04:59,590
everything up till now has been in clear

75
00:04:52,900 --> 00:05:02,590
once once this packet is it sent both

76
00:04:59,590 --> 00:05:06,849
sides have agreed a symmetric key and

77
00:05:02,590 --> 00:05:10,869
then they'll switch to using using that

78
00:05:06,850 --> 00:05:14,200
for encryption and integrity for the

79
00:05:10,870 --> 00:05:15,820
protocol and those<font color="#CCCCCC"> are the two next</font>

80
00:05:14,200 --> 00:05:18,360
messages from the server so that<font color="#E5E5E5"> are</font>

81
00:05:15,820 --> 00:05:21,520
from the server and<font color="#E5E5E5"> the client so the</font>

82
00:05:18,360 --> 00:05:28,410
the chain<font color="#CCCCCC"> slightest</font><font color="#E5E5E5"> spec is the the</font>

83
00:05:21,520 --> 00:05:28,409
clients now moved that we agreed

84
00:05:33,130 --> 00:05:57,190
so that's in a couple<font color="#E5E5E5"> of minutes diggy</font>

85
00:05:41,810 --> 00:05:57,190
into current good one

86
00:06:18,660 --> 00:06:26,190
about a year ago with the poodle attack

87
00:06:23,170 --> 00:06:28,620
which it was an attack from from<font color="#E5E5E5"> Oracle</font>

88
00:06:26,190 --> 00:06:31,810
there's also a lot of changes happening

89
00:06:28,620 --> 00:06:36,520
<font color="#E5E5E5">in tier last 1.3 this is currently in</font>

90
00:06:31,810 --> 00:06:44,460
development so yeah something to to keep

91
00:06:36,520 --> 00:06:47,460
your keep<font color="#CCCCCC"> your eyes on really about the</font>

92
00:06:44,460 --> 00:06:47,460
shin

93
00:06:54,850 --> 00:07:00,740
if you're if you're ever looking at the

94
00:06:57,880 --> 00:07:02,810
TLS handshake in wireshark there's two

95
00:07:00,740 --> 00:07:04,750
different versions<font color="#E5E5E5"> that go across one</font>

96
00:07:02,810 --> 00:07:08,660
within the record prep the record layer

97
00:07:04,750 --> 00:07:12,080
actually<font color="#E5E5E5"> ignored it's good sir the</font>

98
00:07:08,660 --> 00:07:14,330
important one one other behavior you'll

99
00:07:12,080 --> 00:07:16,789
see<font color="#E5E5E5"> from some clients and this is</font>

100
00:07:14,330 --> 00:07:21,669
specifically browsers they will start

101
00:07:16,790 --> 00:07:23,810
off with a TLS 1.2 handshake and slowly

102
00:07:21,670 --> 00:07:25,310
they will go down to say to you that's

103
00:07:23,810 --> 00:07:28,100
<font color="#E5E5E5">one</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> one handshake or a tea last</font>

104
00:07:25,310 --> 00:07:31,850
one point<font color="#CCCCCC"> O handshake this is the</font>

105
00:07:28,100 --> 00:07:36,050
they're doing the renegotiation to to

106
00:07:31,850 --> 00:07:38,240
work around different different in

107
00:07:36,050 --> 00:07:42,920
<font color="#E5E5E5">taraba bility issues with servers so</font>

108
00:07:38,240 --> 00:07:45,500
from a game just if you're<font color="#E5E5E5"> looking at</font>

109
00:07:42,920 --> 00:07:48,050
client hellos I you see a failed

110
00:07:45,500 --> 00:07:49,760
connection don't assume<font color="#CCCCCC"> it but that's</font>

111
00:07:48,050 --> 00:07:54,710
<font color="#CCCCCC">the</font><font color="#E5E5E5"> only connection there maybe retries</font>

112
00:07:49,760 --> 00:07:56,870
that maybe retries after that in terms

113
00:07:54,710 --> 00:08:02,239
of what you're looking<font color="#CCCCCC"> for in in</font>

114
00:07:56,870 --> 00:08:05,660
wireshark this is a connection<font color="#CCCCCC"> for from</font>

115
00:08:02,240 --> 00:08:09,620
chrome on windows to encrypted google

116
00:08:05,660 --> 00:08:12,669
com you can see the TLS the TLS

117
00:08:09,620 --> 00:08:14,960
handshake version number and then the

118
00:08:12,669 --> 00:08:17,840
client<font color="#CCCCCC"> are the version number in the</font>

119
00:08:14,960 --> 00:08:20,960
client hello so that's that in in this

120
00:08:17,840 --> 00:08:25,030
case that's the client saying I want to

121
00:08:20,960 --> 00:08:27,200
use TLS 1.2 and then in the server hello

122
00:08:25,030 --> 00:08:29,780
which you can see<font color="#CCCCCC"> up there you see the</font>

123
00:08:27,200 --> 00:08:36,968
server responding with yet will will

124
00:08:29,780 --> 00:08:36,968
work with TLS 11 point<font color="#CCCCCC"> 0</font>

125
00:08:36,979 --> 00:08:44,930
now<font color="#E5E5E5"> surface weeks if you've looked at</font>

126
00:08:41,779 --> 00:08:46,699
TLS connections in wireshark you'll see

127
00:08:44,930 --> 00:08:49,959
the client proposes a large number of

128
00:08:46,699 --> 00:08:52,959
sites weeks and they generally long

129
00:08:49,959 --> 00:09:00,829
their textual representation so it'll be

130
00:08:52,959 --> 00:09:04,699
TLS RSA with<font color="#E5E5E5"> aes sha-1 the textual</font>

131
00:09:00,829 --> 00:09:06,979
representation actually tells you<font color="#E5E5E5"> four</font>

132
00:09:04,699 --> 00:09:09,579
different parts about the about the site

133
00:09:06,980 --> 00:09:12,050
of sweet the first part is the the

134
00:09:09,579 --> 00:09:14,120
authentication algorithm so this is<font color="#CCCCCC"> the</font>

135
00:09:12,050 --> 00:09:16,459
this is<font color="#E5E5E5"> generally the algorithm that the</font>

136
00:09:14,120 --> 00:09:21,610
client uses to authenticate the server

137
00:09:16,459 --> 00:09:24,500
so this<font color="#CCCCCC"> is our</font><font color="#E5E5E5"> RSA or the essay or</font>

138
00:09:21,610 --> 00:09:26,630
<font color="#E5E5E5">elliptic curve the essay so this is the</font>

139
00:09:24,500 --> 00:09:32,029
algorithm used in the generally used in

140
00:09:26,630 --> 00:09:33,380
the server certificate the next part<font color="#CCCCCC"> of</font>

141
00:09:32,029 --> 00:09:36,560
the slightest<font color="#E5E5E5"> we is something called the</font>

142
00:09:33,380 --> 00:09:40,279
the key exchange or agreement algorithm

143
00:09:36,560 --> 00:09:42,888
so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the this is the algorithms</font>

144
00:09:40,279 --> 00:09:45,740
actually used by the client to set the

145
00:09:42,889 --> 00:09:48,889
client and<font color="#E5E5E5"> the server to agree a key</font><font color="#CCCCCC"> RS</font>

146
00:09:45,740 --> 00:09:51,529
<font color="#E5E5E5">I can do both that's why it's in both so</font>

147
00:09:48,889 --> 00:09:53,480
you have you cannot you can both

148
00:09:51,529 --> 00:09:57,290
authenticate the server using its rs8

149
00:09:53,480 --> 00:09:59,180
certificate and then encrypt the key

150
00:09:57,290 --> 00:10:02,449
that sent back to the server so that's

151
00:09:59,180 --> 00:10:07,569
why that's why this one is in is in both

152
00:10:02,449 --> 00:10:10,310
you then also got diffie-hellman and

153
00:10:07,569 --> 00:10:12,079
<font color="#CCCCCC">elliptic curve diffie-hellman these are</font>

154
00:10:10,310 --> 00:10:15,589
if you've heard of perfect forward

155
00:10:12,079 --> 00:10:20,029
secrecy these key agreement algorithms

156
00:10:15,589 --> 00:10:24,170
are the things that allow allow you to

157
00:10:20,029 --> 00:10:27,310
lose so allow you to have the server key

158
00:10:24,170 --> 00:10:33,709
<font color="#CCCCCC">compromise but not be able to</font><font color="#E5E5E5"> decrypt</font>

159
00:10:27,310 --> 00:10:35,779
previous traffic in terms of<font color="#CCCCCC"> sort then</font>

160
00:10:33,709 --> 00:10:38,540
then having done the encryption<font color="#E5E5E5"> and the</font>

161
00:10:35,779 --> 00:10:41,829
key agreement the client and the<font color="#E5E5E5"> server</font>

162
00:10:38,540 --> 00:10:44,699
then switched<font color="#E5E5E5"> to using bulk encryption</font>

163
00:10:41,829 --> 00:10:48,959
<font color="#E5E5E5">algorithms so that so yeah</font>

164
00:10:44,700 --> 00:10:51,180
so these are RC RC<font color="#E5E5E5"> 4 there's triple</font>

165
00:10:48,960 --> 00:10:52,200
bears<font color="#E5E5E5"> AES there's a few others that</font>

166
00:10:51,180 --> 00:10:54,689
you'll see in there are things like

167
00:10:52,200 --> 00:10:57,870
Camilla and seed as well these are

168
00:10:54,690 --> 00:10:59,850
algorithms from from other country from

169
00:10:57,870 --> 00:11:02,880
other countries and then you have the

170
00:10:59,850 --> 00:11:06,030
trying<font color="#CCCCCC"> to happen Mac so the mac is the H</font>

171
00:11:02,880 --> 00:11:08,220
Mac that's there's performed over the

172
00:11:06,030 --> 00:11:14,939
whole of the encrypted the<font color="#CCCCCC"> encrypted</font>

173
00:11:08,220 --> 00:11:20,880
record<font color="#E5E5E5"> to to provide integrity also just</font>

174
00:11:14,940 --> 00:11:24,000
mentioning briefly CLS also has

175
00:11:20,880 --> 00:11:29,040
something over a PRF the pseudo-random

176
00:11:24,000 --> 00:11:32,130
function that's<font color="#E5E5E5"> used in deriving the was</font>

177
00:11:29,040 --> 00:11:33,510
called them the master secret and it's

178
00:11:32,130 --> 00:11:35,760
<font color="#E5E5E5">just an hour it's just an algorithm</font>

179
00:11:33,510 --> 00:11:38,790
everything various different parts are

180
00:11:35,760 --> 00:11:40,830
put through to to get the master<font color="#E5E5E5"> secret</font>

181
00:11:38,790 --> 00:11:44,550
that all other keys are then then till

182
00:11:40,830 --> 00:11:48,920
from<font color="#CCCCCC"> it's not mentioned in in handshake</font>

183
00:11:44,550 --> 00:11:55,709
but since there's been exchanged between

184
00:11:48,920 --> 00:11:59,550
11.2 you can find the full list that URL

185
00:11:55,710 --> 00:12:04,790
there's about 200<font color="#E5E5E5"> of them which will</font>

186
00:11:59,550 --> 00:12:07,790
have interesting interesting properties

187
00:12:04,790 --> 00:12:07,790
we

188
00:12:14,440 --> 00:12:23,500
or have implementation so the first<font color="#E5E5E5"> one</font>

189
00:12:20,510 --> 00:12:26,740
tell us our essay that's fairly stock

190
00:12:23,500 --> 00:12:26,740
that me

191
00:12:37,040 --> 00:12:42,800
stiffly<font color="#CCCCCC"> helmand or ECC weird</font><font color="#E5E5E5"> if he</font><font color="#CCCCCC"> would</font>

192
00:12:41,120 --> 00:12:49,100
elliptic curve diffie-hellman all of

193
00:12:42,800 --> 00:12:50,899
these are your PFS it shows if your

194
00:12:49,100 --> 00:12:53,600
server key is compromised through

195
00:12:50,899 --> 00:12:55,040
something<font color="#E5E5E5"> I can't</font><font color="#CCCCCC"> lead any previous</font>

196
00:12:53,600 --> 00:12:59,810
traffic that's been captured can't be

197
00:12:55,040 --> 00:13:02,540
decrypted in terms of bulk ciphers it's

198
00:12:59,810 --> 00:13:05,660
all about a yes triple density is still

199
00:13:02,540 --> 00:13:07,730
in there because<font color="#E5E5E5"> I know number of sites</font>

200
00:13:05,660 --> 00:13:12,439
need it for compatibility with all with

201
00:13:07,730 --> 00:13:18,649
all the<font color="#E5E5E5"> browsers but probably the best</font>

202
00:13:12,440 --> 00:13:22,060
ones at<font color="#E5E5E5"> the moment are AES GTM then in</font>

203
00:13:18,649 --> 00:13:26,920
terms of the<font color="#E5E5E5"> Mac</font><font color="#CCCCCC"> it's again different</font>

204
00:13:22,060 --> 00:13:29,508
different strengths of char algorithms

205
00:13:26,920 --> 00:13:33,589
now<font color="#E5E5E5"> on to the the more interesting all</font>

206
00:13:29,509 --> 00:13:35,269
the year sigh this week's there is a

207
00:13:33,589 --> 00:13:37,910
cipher suite called the null<font color="#E5E5E5"> cipher</font>

208
00:13:35,269 --> 00:13:41,000
<font color="#E5E5E5">suite it means no authentication no</font>

209
00:13:37,910 --> 00:13:43,069
encryption and no integrity most of the

210
00:13:41,000 --> 00:13:48,620
time it's disabled but you might see it

211
00:13:43,069 --> 00:13:50,750
once in a while you also have the what

212
00:13:48,620 --> 00:13:53,300
are called the anonymous cipher suites

213
00:13:50,750 --> 00:13:56,480
and now they these cipher<font color="#E5E5E5"> Suites so</font>

214
00:13:53,300 --> 00:13:58,910
anonymously Hellman an anonymous<font color="#CCCCCC"> easy do</font>

215
00:13:56,480 --> 00:14:00,620
<font color="#CCCCCC">they own they perform no server</font>

216
00:13:58,910 --> 00:14:03,980
authentication so if you ever see a

217
00:14:00,620 --> 00:14:05,600
client offering those sizes weeks or our

218
00:14:03,980 --> 00:14:08,779
server accepting those slightest weeks

219
00:14:05,600 --> 00:14:10,160
that means you will be<font color="#E5E5E5"> able to perform</font>

220
00:14:08,779 --> 00:14:11,810
an active man-in-the-middle attack on

221
00:14:10,160 --> 00:14:17,569
<font color="#E5E5E5">that connection and neither side will</font>

222
00:14:11,810 --> 00:14:22,369
notice you<font color="#CCCCCC"> also have RSA export so this</font>

223
00:14:17,569 --> 00:14:26,060
this is for much smaller RSA keys so 512

224
00:14:22,370 --> 00:14:28,939
bit RSA keys it's a<font color="#E5E5E5"> product of US</font>

225
00:14:26,060 --> 00:14:31,779
government export regulations from about

226
00:14:28,939 --> 00:14:35,230
20 years ago and you if you've<font color="#CCCCCC"> been</font>

227
00:14:31,779 --> 00:14:41,420
following any of the recent TLS

228
00:14:35,230 --> 00:14:44,630
vulnerabilities freakin log jam were RSA

229
00:14:41,420 --> 00:14:47,089
export was implicated in in some in some

230
00:14:44,630 --> 00:14:50,810
of those the reason that one's up there

231
00:14:47,089 --> 00:14:52,250
is because<font color="#CCCCCC"> a 512 bit</font>

232
00:14:50,810 --> 00:14:54,680
service certificate I think can be

233
00:14:52,250 --> 00:14:57,590
factored on AWS for about seventy

234
00:14:54,680 --> 00:14:59,359
dollars so again if you get the if you

235
00:14:57,590 --> 00:15:00,980
get the server's public key you spent

236
00:14:59,360 --> 00:15:02,330
seventy dollars you get the service

237
00:15:00,980 --> 00:15:06,650
private key you can<font color="#E5E5E5"> then impersonate</font>

238
00:15:02,330 --> 00:15:11,740
that server in terms of some<font color="#E5E5E5"> of the bulk</font>

239
00:15:06,650 --> 00:15:14,770
<font color="#CCCCCC">slifer's you get you</font><font color="#E5E5E5"> get the null cipher</font>

240
00:15:11,740 --> 00:15:18,290
the<font color="#CCCCCC"> noble cipher so in this instance</font>

241
00:15:14,770 --> 00:15:21,500
server authentication has happened but

242
00:15:18,290 --> 00:15:25,310
no confidentiality will be present<font color="#CCCCCC"> on</font>

243
00:15:21,500 --> 00:15:27,890
the traffic so as a passive observer you

244
00:15:25,310 --> 00:15:32,270
will be able to see all<font color="#CCCCCC"> of the all of</font>

245
00:15:27,890 --> 00:15:36,560
the traffic in the clear the the rest of

246
00:15:32,270 --> 00:15:39,949
the the<font color="#CCCCCC"> rest of the bulk sizes are all</font>

247
00:15:36,560 --> 00:15:42,890
with the exception of 128 there rc4 are

248
00:15:39,950 --> 00:15:44,540
all 40 bit or 56 bit these are

249
00:15:42,890 --> 00:15:48,920
sufficiently small these days that they

250
00:15:44,540 --> 00:15:50,689
can be brute force I believe dares on

251
00:15:48,920 --> 00:15:53,029
the right hardware can be brute force in

252
00:15:50,690 --> 00:15:55,010
about a day now again from it from an

253
00:15:53,029 --> 00:15:59,030
attackers perspective what that means is

254
00:15:55,010 --> 00:16:00,290
<font color="#E5E5E5">if you capture a single connection with</font>

255
00:15:59,030 --> 00:16:02,270
the right hardware in a day<font color="#E5E5E5"> you could</font>

256
00:16:00,290 --> 00:16:06,050
decrypt that entire that entire

257
00:16:02,270 --> 00:16:11,319
connection if they if<font color="#CCCCCC"> you have the</font>

258
00:16:06,050 --> 00:16:14,270
appropriate resources or the reason<font color="#E5E5E5"> the</font>

259
00:16:11,320 --> 00:16:18,710
128-bit encryption is up there is

260
00:16:14,270 --> 00:16:20,930
<font color="#E5E5E5">because there's a lot</font><font color="#CCCCCC"> of bias in</font><font color="#E5E5E5"> the in</font>

261
00:16:18,710 --> 00:16:24,710
the<font color="#E5E5E5"> key stream and there was some</font>

262
00:16:20,930 --> 00:16:27,500
analysis at<font color="#E5E5E5"> Royal Holloway that they can</font>

263
00:16:24,710 --> 00:16:33,709
if they capture something like in the

264
00:16:27,500 --> 00:16:37,459
region of 22 32 replays of the same

265
00:16:33,709 --> 00:16:41,869
plain text they can decrypt they can

266
00:16:37,459 --> 00:16:44,089
decrypt that that's<font color="#E5E5E5"> quite a lot but it</font>

267
00:16:41,870 --> 00:16:48,100
was<font color="#CCCCCC"> felt her yeah it was felt</font><font color="#E5E5E5"> that it</font>

268
00:16:44,089 --> 00:16:48,100
was time<font color="#E5E5E5"> to retire rc4</font>

269
00:16:51,030 --> 00:16:56,040
and finally on the mac side there is

270
00:16:53,160 --> 00:16:58,140
only one cypher that doesn't their

271
00:16:56,040 --> 00:16:59,699
integrity protection and that's the the

272
00:16:58,140 --> 00:17:02,340
null cipher which<font color="#E5E5E5"> I already talked</font><font color="#CCCCCC"> about</font>

273
00:16:59,700 --> 00:17:05,520
in the<font color="#CCCCCC"> complex of authentication and key</font>

274
00:17:02,340 --> 00:17:08,910
exchange so in terms<font color="#E5E5E5"> of putting all of</font>

275
00:17:05,520 --> 00:17:12,500
that together these are the really bad

276
00:17:08,910 --> 00:17:12,500
cipher<font color="#E5E5E5"> Suites you'll see on the left</font>

277
00:17:12,829 --> 00:17:22,589
asian what<font color="#E5E5E5"> yeah what you get process in</font>

278
00:17:19,020 --> 00:17:25,530
both the in the anonymous diffie-hellman

279
00:17:22,589 --> 00:17:27,750
and the anonymous elliptic curve cipher

280
00:17:25,530 --> 00:17:29,879
suite because it depends on<font color="#E5E5E5"> the type of</font>

281
00:17:27,750 --> 00:17:33,330
attacker you are if you're<font color="#E5E5E5"> a passive</font>

282
00:17:29,880 --> 00:17:38,070
attacker you get you can get you'll get

283
00:17:33,330 --> 00:17:41,010
confidentiality if you're a an active

284
00:17:38,070 --> 00:17:42,750
attacker you don't so again that is just

285
00:17:41,010 --> 00:17:44,580
whether you're listening with washer

286
00:17:42,750 --> 00:17:54,780
whether you're actively intercepting

287
00:17:44,580 --> 00:17:58,710
both yeah actively intercepting so in

288
00:17:54,780 --> 00:18:01,530
terms of how they picked the client says

289
00:17:58,710 --> 00:18:03,750
hi I'd like to use these one<font color="#E5E5E5"> of these</font>

290
00:18:01,530 --> 00:18:06,300
<font color="#E5E5E5">situs weeks the server pics of sight of</font>

291
00:18:03,750 --> 00:18:09,930
sweet and then client goes yet i'll use

292
00:18:06,300 --> 00:18:11,250
<font color="#CCCCCC">that or not and then closes the</font><font color="#E5E5E5"> then if</font>

293
00:18:09,930 --> 00:18:16,680
it says not then it closed the

294
00:18:11,250 --> 00:18:18,840
connection likewise with with browsers

295
00:18:16,680 --> 00:18:21,060
you'll sometimes see them make multiple

296
00:18:18,840 --> 00:18:24,800
handshakes with different sets of cited

297
00:18:21,060 --> 00:18:27,389
switch this<font color="#E5E5E5"> was actually done by</font><font color="#CCCCCC"> IE to</font>

298
00:18:24,800 --> 00:18:29,510
disable asking for so the first

299
00:18:27,390 --> 00:18:32,370
handshake would go out without<font color="#E5E5E5"> our c4</font>

300
00:18:29,510 --> 00:18:35,850
but for interoperability reasons if they

301
00:18:32,370 --> 00:18:37,080
if it needed it wouldn't do you it would

302
00:18:35,850 --> 00:18:43,110
then to a second<font color="#CCCCCC"> hang</font><font color="#E5E5E5"> shake</font><font color="#CCCCCC"> it for</font><font color="#E5E5E5"> the</font>

303
00:18:37,080 --> 00:18:50,600
first one failed and<font color="#CCCCCC"> to to interoperate</font>

304
00:18:43,110 --> 00:18:53,969
with servers so in turn see in my<font color="#E5E5E5"> shop</font>

305
00:18:50,600 --> 00:18:56,850
deciphers a couple that are unknown up

306
00:18:53,970 --> 00:18:58,740
there are new<font color="#CCCCCC"> ones have been added</font><font color="#E5E5E5"> to</font>

307
00:18:56,850 --> 00:19:03,389
chrome again this is<font color="#CCCCCC"> a connection from</font>

308
00:18:58,740 --> 00:19:04,500
chrome to encrypted google com and why

309
00:19:03,390 --> 00:19:10,830
shark just<font color="#E5E5E5"> haven't been up</font>

310
00:19:04,500 --> 00:19:14,460
<font color="#CCCCCC">to to know what they are yet then the</font>

311
00:19:10,830 --> 00:19:18,870
server will respond with the appropriate

312
00:19:14,460 --> 00:19:24,990
<font color="#CCCCCC">size</font><font color="#E5E5E5"> sweet that it wants to use so</font>

313
00:19:18,870 --> 00:19:26,699
talked a bit about the that's all in the

314
00:19:24,990 --> 00:19:29,580
server certificate but these are<font color="#CCCCCC"> some of</font>

315
00:19:26,700 --> 00:19:33,840
<font color="#E5E5E5">the some of the major items that are</font>

316
00:19:29,580 --> 00:19:36,270
used when<font color="#CCCCCC"> by the client to to determine</font>

317
00:19:33,840 --> 00:19:38,189
if you should trust<font color="#CCCCCC"> the trust the</font>

318
00:19:36,270 --> 00:19:41,250
service certificate so the first<font color="#CCCCCC"> thing</font>

319
00:19:38,190 --> 00:19:44,040
it has is its public key this<font color="#CCCCCC"> is either</font>

320
00:19:41,250 --> 00:19:47,160
an RSA key or an elliptic curve key it

321
00:19:44,040 --> 00:19:49,080
then<font color="#CCCCCC"> has the validity so the date that's</font>

322
00:19:47,160 --> 00:19:52,970
overit the<font color="#CCCCCC"> certificate valley from and</font>

323
00:19:49,080 --> 00:19:56,580
valid to then have a subject this is

324
00:19:52,970 --> 00:19:59,280
this is where the server identity is

325
00:19:56,580 --> 00:20:01,500
placed into<font color="#E5E5E5"> the certificate so the the</font>

326
00:19:59,280 --> 00:20:07,080
fqdn of the server so going back<font color="#CCCCCC"> to my</font>

327
00:20:01,500 --> 00:20:09,330
example google com in they'll give me

328
00:20:07,080 --> 00:20:11,790
the common name and<font color="#E5E5E5"> I'll show</font><font color="#CCCCCC"> you that</font>

329
00:20:09,330 --> 00:20:13,949
<font color="#E5E5E5">in</font><font color="#CCCCCC"> a moment you can</font><font color="#E5E5E5"> actually have</font>

330
00:20:11,790 --> 00:20:17,610
certificates with a valid for multiple

331
00:20:13,950 --> 00:20:18,840
hosts and the way that this<font color="#CCCCCC"> is handled</font>

332
00:20:17,610 --> 00:20:21,060
is something called the subject

333
00:20:18,840 --> 00:20:26,459
alternate name and in so you can hurt

334
00:20:21,060 --> 00:20:30,500
you can have what in the many more in

335
00:20:26,460 --> 00:20:33,000
the hole in the subject alternate name

336
00:20:30,500 --> 00:20:35,520
again I will<font color="#E5E5E5"> have a look about in a</font>

337
00:20:33,000 --> 00:20:39,240
minute you then have<font color="#E5E5E5"> the issuer this is</font>

338
00:20:35,520 --> 00:20:42,000
just<font color="#E5E5E5"> a text field but it has to map it</font>

339
00:20:39,240 --> 00:20:44,790
that should match the subject of the

340
00:20:42,000 --> 00:20:46,200
tificate that signed it<font color="#CCCCCC"> so when you have</font>

341
00:20:44,790 --> 00:20:48,060
<font color="#CCCCCC">a server certificate it's normally</font>

342
00:20:46,200 --> 00:20:49,650
signed by an intermediate CA they

343
00:20:48,060 --> 00:20:55,260
intermediate CA will have a name a

344
00:20:49,650 --> 00:20:58,190
subject<font color="#CCCCCC"> glow I</font><font color="#E5E5E5"> jonathan's Jonathan CA</font>

345
00:20:55,260 --> 00:21:00,570
and that will have to<font color="#E5E5E5"> match the issuer</font>

346
00:20:58,190 --> 00:21:04,830
you then have the signature so this is

347
00:21:00,570 --> 00:21:07,139
<font color="#CCCCCC">the part where this is the part where</font>

348
00:21:04,830 --> 00:21:10,649
the intermediate cas private key has

349
00:21:07,140 --> 00:21:13,710
signed<font color="#E5E5E5"> the certificate and XP it's the</font>

350
00:21:10,650 --> 00:21:16,080
text allows the client to we can

351
00:21:13,710 --> 00:21:17,080
recreate that signature and validate

352
00:21:16,080 --> 00:21:19,189
that it's

353
00:21:17,080 --> 00:21:24,590
it was actually<font color="#E5E5E5"> signed by the</font>

354
00:21:19,190 --> 00:21:28,789
intermediate CA so there is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> on</font>

355
00:21:24,590 --> 00:21:38,600
this slide up some of what a client has

356
00:21:28,789 --> 00:21:41,150
to do when validating I the client does

357
00:21:38,600 --> 00:21:42,770
is it<font color="#CCCCCC"> will often it will it will in the</font>

358
00:21:41,150 --> 00:21:43,940
client hello it'll send the name of the

359
00:21:42,770 --> 00:21:46,879
server that it wants to connect to

360
00:21:43,940 --> 00:21:49,340
you'll see this in<font color="#E5E5E5"> the sni packet or the</font>

361
00:21:46,880 --> 00:21:51,039
server name<font color="#E5E5E5"> indicate a packet that tells</font>

362
00:21:49,340 --> 00:21:54,230
the server which certificate<font color="#CCCCCC"> to return</font>

363
00:21:51,039 --> 00:21:57,799
this this is used if there's multiple

364
00:21:54,230 --> 00:22:03,980
different different websites hosted on a

365
00:21:57,799 --> 00:22:06,559
single IP having turns its and any

366
00:22:03,980 --> 00:22:08,840
intermediate certificates<font color="#CCCCCC"> but each</font>

367
00:22:06,559 --> 00:22:11,780
thinks the client<font color="#E5E5E5"> needs in order to be</font>

368
00:22:08,840 --> 00:22:13,970
able to build<font color="#E5E5E5"> a build a certificate</font>

369
00:22:11,780 --> 00:22:17,178
chain now what I mean<font color="#E5E5E5"> by</font><font color="#CCCCCC"> a certificate</font>

370
00:22:13,970 --> 00:22:18,799
chain is all quite all clients normally

371
00:22:17,179 --> 00:22:20,659
have a set of root certificates

372
00:22:18,799 --> 00:22:24,590
provisioned in them and the certificate

373
00:22:20,659 --> 00:22:26,750
chain the root certificate and an

374
00:22:24,590 --> 00:22:30,379
intermediate or maybe more intermediate

375
00:22:26,750 --> 00:22:36,640
certificates to the server certificate

376
00:22:30,380 --> 00:22:38,840
in such a way that they find each other

377
00:22:36,640 --> 00:22:40,309
so I<font color="#E5E5E5"> haven't got the certificate and the</font>

378
00:22:38,840 --> 00:22:42,289
intermediate certificates back the

379
00:22:40,309 --> 00:22:46,668
client then attempts to build these

380
00:22:42,289 --> 00:22:49,629
chains sometimes there's one sometimes

381
00:22:46,669 --> 00:22:49,630
they can be more if

382
00:22:54,150 --> 00:22:59,290
once it's built this certificate

383
00:22:56,110 --> 00:23:01,270
starting from assuming<font color="#CCCCCC"> the chain runs</font>

384
00:22:59,290 --> 00:23:04,750
from the<font color="#E5E5E5"> root certificate to the</font>

385
00:23:01,270 --> 00:23:06,910
intermediate to the server certificate

386
00:23:04,750 --> 00:23:08,980
it then starts with the intermediate

387
00:23:06,910 --> 00:23:11,200
certificate and it goes is is the

388
00:23:08,980 --> 00:23:12,940
signature valid and by<font color="#CCCCCC"> that it looks at</font>

389
00:23:11,200 --> 00:23:15,310
the root certificate and goes did that

390
00:23:12,940 --> 00:23:20,380
root certificate sign a song

391
00:23:15,310 --> 00:23:22,450
intermediate certificate then check the

392
00:23:20,380 --> 00:23:26,290
validity checks whether it hasn't been

393
00:23:22,450 --> 00:23:29,590
revoked using<font color="#CCCCCC"> col-0 CSP this isn't</font>

394
00:23:26,290 --> 00:23:33,879
actually browsers but I mention it

395
00:23:29,590 --> 00:23:36,730
briefly in passing it n checks could be

396
00:23:33,880 --> 00:23:39,220
even<font color="#CCCCCC"> though</font><font color="#E5E5E5"> the signature may be valid</font>

397
00:23:36,730 --> 00:23:41,770
it<font color="#E5E5E5"> also checks that the the issuer name</font>

398
00:23:39,220 --> 00:23:45,670
is valid<font color="#E5E5E5"> so by that the subject from</font><font color="#CCCCCC"> the</font>

399
00:23:41,770 --> 00:23:48,340
root CA matches the intermediate CA in

400
00:23:45,670 --> 00:23:51,370
certificates you have have a number of

401
00:23:48,340 --> 00:23:53,860
extensions and one of them is one called

402
00:23:51,370 --> 00:23:55,330
the<font color="#E5E5E5"> basic constraints extinction</font><font color="#CCCCCC"> and</font>

403
00:23:53,860 --> 00:23:56,800
there's a flag in a basic constraints

404
00:23:55,330 --> 00:23:59,949
extension that says whether something is

405
00:23:56,800 --> 00:24:02,440
or isn't a certificate authority so if

406
00:23:59,950 --> 00:24:04,030
this extension is present and there's a

407
00:24:02,440 --> 00:24:05,080
risk<font color="#E5E5E5"> sorry there's an intermediate</font>

408
00:24:04,030 --> 00:24:07,810
certificate and another intermediate

409
00:24:05,080 --> 00:24:12,370
certificate each one of those has to

410
00:24:07,810 --> 00:24:17,649
have have the flag that says I'm a CA if

411
00:24:12,370 --> 00:24:22,239
it<font color="#E5E5E5"> doesn't then it can't be used in in a</font>

412
00:24:17,650 --> 00:24:24,670
chain you then also have a chain length

413
00:24:22,240 --> 00:24:26,920
so some certificate<font color="#CCCCCC"> authorities specify</font>

414
00:24:24,670 --> 00:24:29,230
I don't know say only want three

415
00:24:26,920 --> 00:24:31,690
certificates to be in in shame this is

416
00:24:29,230 --> 00:24:33,490
checked there's also a bunch<font color="#E5E5E5"> of things</font>

417
00:24:31,690 --> 00:24:35,950
around<font color="#CCCCCC"> key new</font><font color="#E5E5E5"> secrets i'm gonna i'm</font>

418
00:24:33,490 --> 00:24:39,190
going to skip over for now so this is

419
00:24:35,950 --> 00:24:40,300
<font color="#E5E5E5">done every certificate in</font><font color="#CCCCCC"> the in the</font>

420
00:24:39,190 --> 00:24:41,740
chain so we start<font color="#CCCCCC"> off</font><font color="#E5E5E5"> with the</font>

421
00:24:40,300 --> 00:24:43,480
intermediate then for the next

422
00:24:41,740 --> 00:24:46,480
intermediate if that happens then

423
00:24:43,480 --> 00:24:49,090
finally to the server certificate and if

424
00:24:46,480 --> 00:24:51,760
all of those<font color="#E5E5E5"> checks pass then we go yep</font>

425
00:24:49,090 --> 00:24:54,879
that's a good service certificate then

426
00:24:51,760 --> 00:24:57,370
the<font color="#CCCCCC"> client has to check the the actual</font>

427
00:24:54,880 --> 00:24:59,470
<font color="#E5E5E5">identity in the certificate belongs to</font>

428
00:24:57,370 --> 00:25:04,330
the server that it thinks it should if

429
00:24:59,470 --> 00:25:06,800
you don't do this then<font color="#CCCCCC"> i could get a</font>

430
00:25:04,330 --> 00:25:11,030
certificate<font color="#E5E5E5"> for say</font>

431
00:25:06,800 --> 00:25:13,280
calm and I could give it<font color="#E5E5E5"> to your you</font>

432
00:25:11,030 --> 00:25:14,540
could connect<font color="#E5E5E5"> to my server I could give</font>

433
00:25:13,280 --> 00:25:16,160
it<font color="#E5E5E5"> to you and you go oh well that's</font>

434
00:25:14,540 --> 00:25:17,629
specifying that sign that's a fine

435
00:25:16,160 --> 00:25:19,340
certificate even though you were

436
00:25:17,630 --> 00:25:27,200
thinking that<font color="#CCCCCC"> you might</font><font color="#E5E5E5"> be connecting to</font>

437
00:25:19,340 --> 00:25:37,540
to google google com now in<font color="#E5E5E5"> terms of</font>

438
00:25:27,200 --> 00:25:41,140
some<font color="#E5E5E5"> of the things</font><font color="#CCCCCC"> that can</font><font color="#E5E5E5"> go just</font>

439
00:25:37,540 --> 00:25:45,770
listing them one at a time not<font color="#E5E5E5"> doing it</font>

440
00:25:41,140 --> 00:25:47,840
is there are a number of a number<font color="#CCCCCC"> of</font>

441
00:25:45,770 --> 00:25:50,320
<font color="#CCCCCC">different mobile phone applications have</font>

442
00:25:47,840 --> 00:25:53,270
not<font color="#E5E5E5"> I've been caught not checking TLS</font>

443
00:25:50,320 --> 00:25:55,250
not validating the the common name of

444
00:25:53,270 --> 00:25:58,910
the subject alternate name that's the

445
00:25:55,250 --> 00:26:02,390
attacker I just described writing it

446
00:25:58,910 --> 00:26:04,790
yourself I meant the<font color="#CCCCCC"> the RFC that</font>

447
00:26:02,390 --> 00:26:07,390
describes this has 24 pages just

448
00:26:04,790 --> 00:26:11,240
dedicated to validating certificates

449
00:26:07,390 --> 00:26:13,850
it's pretty complicated and I have

450
00:26:11,240 --> 00:26:17,770
previously<font color="#CCCCCC"> seen some attempts to to</font>

451
00:26:13,850 --> 00:26:20,060
write it to write it afresh and

452
00:26:17,770 --> 00:26:22,040
invariably they they make the same

453
00:26:20,060 --> 00:26:26,510
mistakes<font color="#E5E5E5"> that have previously been been</font>

454
00:26:22,040 --> 00:26:29,540
made talked<font color="#E5E5E5"> about accepting small server</font>

455
00:26:26,510 --> 00:26:31,400
certificates in the in the certificate

456
00:26:29,540 --> 00:26:35,780
size specifically that they can be they

457
00:26:31,400 --> 00:26:38,240
can be easily factored when when you

458
00:26:35,780 --> 00:26:42,040
<font color="#E5E5E5">sign the certificate you sign it using a</font>

459
00:26:38,240 --> 00:26:48,650
hash algorithm so md5<font color="#E5E5E5"> sha1 shutting 56</font>

460
00:26:42,040 --> 00:26:50,690
md5 was broken back i think<font color="#CCCCCC"> in 2008 it's</font>

461
00:26:48,650 --> 00:26:54,380
actually used in<font color="#CCCCCC"> the flame malware</font>

462
00:26:50,690 --> 00:26:56,540
attack<font color="#E5E5E5"> to to install malware on</font>

463
00:26:54,380 --> 00:27:03,980
different sorry to install signed

464
00:26:56,540 --> 00:27:08,600
malware on different hope so by the end

465
00:27:03,980 --> 00:27:15,460
of 2016 sha-1 will have been deprecated

466
00:27:08,600 --> 00:27:15,459
as well by most<font color="#E5E5E5"> of the modern browsers I</font>

467
00:27:15,670 --> 00:27:20,419
get a saint same again is accepting

468
00:27:19,280 --> 00:27:23,299
expired

469
00:27:20,419 --> 00:27:24,859
exploit certificates or accepting

470
00:27:23,299 --> 00:27:29,149
certificates without revocation

471
00:27:24,859 --> 00:27:32,799
information again I put<font color="#CCCCCC"> that one in</font>

472
00:27:29,149 --> 00:27:35,570
there currently most browsers don't to

473
00:27:32,799 --> 00:27:41,720
certificate checking using either crl

474
00:27:35,570 --> 00:27:48,489
<font color="#CCCCCC">zor</font><font color="#E5E5E5"> ocsp but there is some cooling which</font>

475
00:27:41,720 --> 00:27:53,210
is<font color="#E5E5E5"> becoming more common in terms of see</font>

476
00:27:48,489 --> 00:27:56,779
there's the difficult<font color="#CCCCCC"> i'll log from from</font>

477
00:27:53,210 --> 00:28:02,809
windows and it just shows<font color="#E5E5E5"> you</font><font color="#CCCCCC"> the common</font>

478
00:27:56,779 --> 00:28:04,909
name the issuer and<font color="#E5E5E5"> Alex base if you if</font>

479
00:28:02,809 --> 00:28:12,139
you want more details<font color="#E5E5E5"> on the on the</font>

480
00:28:04,909 --> 00:28:17,659
details<font color="#E5E5E5"> tab you get a whole signature</font>

481
00:28:12,139 --> 00:28:20,988
algorithm the issuer day its validity

482
00:28:17,659 --> 00:28:24,739
and as well the<font color="#E5E5E5"> common name so</font>

483
00:28:20,989 --> 00:28:31,489
specifically our google com that means

484
00:28:24,739 --> 00:28:35,419
<font color="#E5E5E5">that certificate is that server wild</font>

485
00:28:31,489 --> 00:28:37,460
carded<font color="#CCCCCC"> got</font><font color="#E5E5E5"> google com now this</font>

486
00:28:35,419 --> 00:28:40,039
particular certificate from encrypted

487
00:28:37,460 --> 00:28:46,299
google com<font color="#E5E5E5"> is actually valid for a whole</font>

488
00:28:40,039 --> 00:28:46,299
bunch more so II subject

489
00:28:49,250 --> 00:29:00,990
CA it's this<font color="#E5E5E5"> particular certificate</font>

490
00:28:59,100 --> 00:29:05,689
Valley for lots and lots<font color="#E5E5E5"> of different</font>

491
00:29:00,990 --> 00:29:05,690
are different server identities

492
00:29:08,540 --> 00:29:14,190
sometimes you can't see those in if

493
00:29:12,660 --> 00:29:17,160
you're looking<font color="#CCCCCC"> at our mobile phone</font>

494
00:29:14,190 --> 00:29:19,710
application or an IOT device you won't

495
00:29:17,160 --> 00:29:21,990
be able to see certificates that the

496
00:29:19,710 --> 00:29:28,430
server sent you can get all<font color="#CCCCCC"> of the same</font>

497
00:29:21,990 --> 00:29:28,430
information in in wireshark so here<font color="#CCCCCC"> c</font>

498
00:29:28,550 --> 00:29:41,190
and then the second<font color="#E5E5E5"> to sir the google</font>

499
00:29:36,630 --> 00:29:44,730
<font color="#E5E5E5">sends again just running</font><font color="#CCCCCC"> down a little</font>

500
00:29:41,190 --> 00:29:47,580
bit more you can see the expiry aside

501
00:29:44,730 --> 00:29:50,070
the the validity the subject name and

502
00:29:47,580 --> 00:29:54,629
the issuer or all the informations in my

503
00:29:50,070 --> 00:30:07,550
shark and like what likewise the the

504
00:29:54,630 --> 00:30:11,670
common the common names so TLS<font color="#CCCCCC"> i</font>

505
00:30:07,550 --> 00:30:14,340
mentioned a few times about attacking a

506
00:30:11,670 --> 00:30:17,520
mobile phone application or an IOT

507
00:30:14,340 --> 00:30:20,520
device that's performing TLS connections

508
00:30:17,520 --> 00:30:23,100
there are there are<font color="#CCCCCC"> a number of</font>

509
00:30:20,520 --> 00:30:27,420
applications or tools out there that do

510
00:30:23,100 --> 00:30:30,540
that do this I got these are the ones

511
00:30:27,420 --> 00:30:34,290
I'm I'm more familiar with<font color="#E5E5E5"> and and have</font>

512
00:30:30,540 --> 00:30:38,700
used so ssl Smith this was originally

513
00:30:34,290 --> 00:30:43,110
written in 2002 by<font color="#E5E5E5"> a multi</font><font color="#CCCCCC"> mullis web</font>

514
00:30:38,700 --> 00:30:45,210
and so this<font color="#E5E5E5"> this will perform active</font>

515
00:30:43,110 --> 00:30:47,550
man-in-middle-attacks so you set up on a

516
00:30:45,210 --> 00:30:52,100
<font color="#CCCCCC">Linux box</font><font color="#E5E5E5"> with traffic flowing through</font>

517
00:30:47,550 --> 00:30:55,169
it and it will automatically generate

518
00:30:52,100 --> 00:30:58,649
server certificates using a using a fake

519
00:30:55,170 --> 00:31:01,720
CA so you can use this to intercept do

520
00:30:58,650 --> 00:31:06,480
targeted attacks on particular<font color="#E5E5E5"> hosts or</font>

521
00:31:01,720 --> 00:31:09,820
generically all hosts excuse me

522
00:31:06,480 --> 00:31:12,190
unfortunately one unfortunately it's not

523
00:31:09,820 --> 00:31:14,919
been updated since 2011 and does have a

524
00:31:12,190 --> 00:31:19,030
couple of<font color="#E5E5E5"> bugs that I've run into so</font>

525
00:31:14,920 --> 00:31:23,530
since then I've<font color="#CCCCCC"> been using SSL split</font>

526
00:31:19,030 --> 00:31:25,360
very<font color="#E5E5E5"> very similar idea it'll it'll</font>

527
00:31:23,530 --> 00:31:27,300
intercept tearless connections going

528
00:31:25,360 --> 00:31:29,770
through going through linux box or

529
00:31:27,300 --> 00:31:35,440
there's various other ways<font color="#E5E5E5"> to set up as</font>

530
00:31:29,770 --> 00:31:40,800
well and again<font color="#E5E5E5"> will will produce server</font>

531
00:31:35,440 --> 00:31:43,090
certificates using a using a custom CA

532
00:31:40,800 --> 00:31:45,820
it's also<font color="#E5E5E5"> worth pointing out this one</font>

533
00:31:43,090 --> 00:31:49,330
has support for late start TLS

534
00:31:45,820 --> 00:31:51,939
connections so some some some

535
00:31:49,330 --> 00:31:54,189
connections like pop3 and imap<font color="#CCCCCC"> will</font>

536
00:31:51,940 --> 00:31:59,650
start<font color="#E5E5E5"> off plain text and then you'll see</font>

537
00:31:54,190 --> 00:32:01,420
them switch to start TLS this this

538
00:31:59,650 --> 00:32:04,480
particular<font color="#E5E5E5"> application will detect that</font>

539
00:32:01,420 --> 00:32:09,190
so you can you can<font color="#E5E5E5"> perform active</font>

540
00:32:04,480 --> 00:32:13,690
attacks on those connections as well now

541
00:32:09,190 --> 00:32:19,230
go<font color="#E5E5E5"> to fail is a relatively</font><font color="#CCCCCC"> new tool</font>

542
00:32:13,690 --> 00:32:22,960
that's been released by a guy from from

543
00:32:19,230 --> 00:32:24,910
very simple<font color="#E5E5E5"> gain in that it does active</font>

544
00:32:22,960 --> 00:32:28,210
man-in-the-middle attacks but this<font color="#E5E5E5"> one</font>

545
00:32:24,910 --> 00:32:30,730
does probabilistic ones so rather<font color="#E5E5E5"> than</font>

546
00:32:28,210 --> 00:32:32,590
intercepting all connections you tell it

547
00:32:30,730 --> 00:32:35,830
how many types of connections you want

548
00:32:32,590 --> 00:32:37,270
it to intercept so you can say i wanted

549
00:32:35,830 --> 00:32:39,480
<font color="#E5E5E5">to intercept 10% of connections or</font>

550
00:32:37,270 --> 00:32:42,280
twenty percent of connections and

551
00:32:39,480 --> 00:32:46,890
because of that it can try different

552
00:32:42,280 --> 00:32:51,100
attacks on different connections so um

553
00:32:46,890 --> 00:32:55,030
it'll<font color="#E5E5E5"> do exactly the same as</font><font color="#CCCCCC"> ssl sniff</font>

554
00:32:51,100 --> 00:32:57,820
and ssl split in that it will generate

555
00:32:55,030 --> 00:32:59,920
<font color="#E5E5E5">cell generate certificates for the</font>

556
00:32:57,820 --> 00:33:01,810
servers on<font color="#CCCCCC"> the fly but it will also do</font>

557
00:32:59,920 --> 00:33:07,120
other attacks like a valid certificate

558
00:33:01,810 --> 00:33:08,950
with an invalid hostname or mess with

559
00:33:07,120 --> 00:33:10,659
the anonymous cipher suites that we

560
00:33:08,950 --> 00:33:12,430
talked about earlier so there's about

561
00:33:10,660 --> 00:33:15,250
there's about eight attacks<font color="#E5E5E5"> but they'll</font>

562
00:33:12,430 --> 00:33:17,740
<font color="#E5E5E5">do and again</font><font color="#CCCCCC"> because it's doing it</font>

563
00:33:15,250 --> 00:33:19,990
ballistic Lee it'll just try one and if

564
00:33:17,740 --> 00:33:21,520
it doesn't pass it<font color="#CCCCCC"> here won't the the</font>

565
00:33:19,990 --> 00:33:25,210
client will just reconnect and it'll go

566
00:33:21,520 --> 00:33:27,850
it'll go straight through the nice thing

567
00:33:25,210 --> 00:33:30,790
about this one in terms of modification

568
00:33:27,850 --> 00:33:32,080
is it's written<font color="#E5E5E5"> in Python so if you want</font>

569
00:33:30,790 --> 00:33:34,629
to<font color="#CCCCCC"> Adam you if</font><font color="#E5E5E5"> you want to make new</font>

570
00:33:32,080 --> 00:33:37,419
attacks to it so the little barrier to

571
00:33:34,630 --> 00:33:39,820
entry compared to<font color="#E5E5E5"> the sea the sea code</font>

572
00:33:37,420 --> 00:33:42,040
on<font color="#E5E5E5"> SSL sniffing ssl split is a little</font>

573
00:33:39,820 --> 00:33:44,080
bit lower you also then have

574
00:33:42,040 --> 00:33:50,399
<font color="#E5E5E5">man-in-the-middle proxy a man in little</font>

575
00:33:44,080 --> 00:33:54,870
dump exactly the same auto-generated

576
00:33:50,400 --> 00:33:54,870
generated certificates from a custom CA

577
00:33:56,220 --> 00:34:05,050
they also have regex so you can ignore

578
00:33:59,260 --> 00:34:08,399
certain domains now<font color="#CCCCCC"> in terms of how how</font>

579
00:34:05,050 --> 00:34:15,100
<font color="#E5E5E5">I actually how I set this up for myself</font>

580
00:34:08,399 --> 00:34:19,089
I've got a raspberry pi it will be PI 13

581
00:34:15,100 --> 00:34:22,989
I set it up with with IP forwarding

582
00:34:19,090 --> 00:34:26,350
enabled and a Wi-Fi access point so<font color="#E5E5E5"> I</font>

583
00:34:22,989 --> 00:34:33,459
can connect a mobile device to<font color="#CCCCCC"> it or an</font>

584
00:34:26,350 --> 00:34:36,909
IOT device over over Wi-Fi to to it in

585
00:34:33,460 --> 00:34:40,510
terms of how how the actual connections

586
00:34:36,909 --> 00:34:43,389
are intercepted<font color="#E5E5E5"> most of them are in the</font>

587
00:34:40,510 --> 00:34:46,840
<font color="#CCCCCC">way that i set up ssl split and ssl</font>

588
00:34:43,389 --> 00:34:49,870
sniff is by using iptables to redirect

589
00:34:46,840 --> 00:34:52,389
redirect traffic to them so what will

590
00:34:49,870 --> 00:34:54,489
happen<font color="#E5E5E5"> is a packet from the</font><font color="#CCCCCC"> mobile</font>

591
00:34:52,389 --> 00:34:58,480
device<font color="#E5E5E5"> on mobile application will come</font>

592
00:34:54,489 --> 00:35:00,790
into into<font color="#E5E5E5"> the linux kernel and the</font>

593
00:34:58,480 --> 00:35:03,880
limits colonel will go<font color="#CCCCCC"> okay is that one</font>

594
00:35:00,790 --> 00:35:06,430
for<font color="#E5E5E5"> one of my targeted hosts if not just</font>

595
00:35:03,880 --> 00:35:10,600
forward it<font color="#E5E5E5"> on if it is it'll redirect it</font>

596
00:35:06,430 --> 00:35:12,660
to the ssl split process yes I saw the

597
00:35:10,600 --> 00:35:15,279
split process will at<font color="#CCCCCC"> that point fork</font>

598
00:35:12,660 --> 00:35:18,069
the connection<font color="#E5E5E5"> so it'll make one</font>

599
00:35:15,280 --> 00:35:21,310
connection out to the target server and

600
00:35:18,070 --> 00:35:24,250
hold the connection open to the to<font color="#CCCCCC"> the</font>

601
00:35:21,310 --> 00:35:27,580
client it'll<font color="#E5E5E5"> get the the certificate</font>

602
00:35:24,250 --> 00:35:27,830
from<font color="#CCCCCC"> the from the</font><font color="#E5E5E5"> server it's connected</font>

603
00:35:27,580 --> 00:35:30,259
to

604
00:35:27,830 --> 00:35:32,690
make a fake one and so there will<font color="#CCCCCC"> be one</font>

605
00:35:30,260 --> 00:35:35,720
handshake 12 s handshape that happens

606
00:35:32,690 --> 00:35:37,910
between<font color="#E5E5E5"> the client and ssl split and</font>

607
00:35:35,720 --> 00:35:39,919
then one that happens between ssl split

608
00:35:37,910 --> 00:35:44,240
and the server and then<font color="#E5E5E5"> a lot it will</font>

609
00:35:39,920 --> 00:35:46,460
log all of the all of the traffic so if

610
00:35:44,240 --> 00:35:50,450
you want to set something<font color="#E5E5E5"> like something</font>

611
00:35:46,460 --> 00:35:53,260
like this up the<font color="#CCCCCC"> I'm making the</font>

612
00:35:50,450 --> 00:35:57,319
assumption that you have a working a

613
00:35:53,260 --> 00:35:59,300
working Linux box<font color="#E5E5E5"> doing routing up and</font>

614
00:35:57,320 --> 00:36:02,750
running you<font color="#CCCCCC"> can create if you can create</font>

615
00:35:59,300 --> 00:36:07,400
a fake CA there's a perl script from

616
00:36:02,750 --> 00:36:10,400
openssl called capl and that will do or

617
00:36:07,400 --> 00:36:15,440
all of that for you you then want to

618
00:36:10,400 --> 00:36:17,540
redirect<font color="#E5E5E5"> the traffic from from the</font>

619
00:36:15,440 --> 00:36:21,170
client to a particular target server to

620
00:36:17,540 --> 00:36:25,400
<font color="#CCCCCC">SSL that's that iptables line there and</font>

621
00:36:21,170 --> 00:36:29,930
then you start ssl split the bottom line

622
00:36:25,400 --> 00:36:34,460
is a bit messy but that basically allows

623
00:36:29,930 --> 00:36:36,259
you to run wireshark right sorry run TCP

624
00:36:34,460 --> 00:36:38,510
dump on the Raspberry Pi and pipe the

625
00:36:36,260 --> 00:36:40,030
output to Wireshark so you can see<font color="#E5E5E5"> all</font>

626
00:36:38,510 --> 00:36:50,660
<font color="#CCCCCC">of the traffic</font><font color="#E5E5E5"> that's happened on the</font>

627
00:36:40,030 --> 00:36:52,220
Raspberry Pi in terms of no no goats

628
00:36:50,660 --> 00:36:55,279
fail again I'm assuming that you've got

629
00:36:52,220 --> 00:36:59,509
a Raspberry Pi with IP forwarding

630
00:36:55,280 --> 00:37:04,040
enabled you'll need<font color="#CCCCCC"> to request a if you</font>

631
00:36:59,510 --> 00:37:06,800
want to use the invalid hostname attack

632
00:37:04,040 --> 00:37:08,060
you need a valid certificate so you need

633
00:37:06,800 --> 00:37:11,510
to go<font color="#E5E5E5"> and request a certificate for</font>

634
00:37:08,060 --> 00:37:14,000
domain that you own so again on the

635
00:37:11,510 --> 00:37:15,590
example Jonathan<font color="#E5E5E5"> com I don't own it but</font>

636
00:37:14,000 --> 00:37:18,560
if I did I could go and request a

637
00:37:15,590 --> 00:37:20,540
certificate for that you don't<font color="#E5E5E5"> need to</font>

638
00:37:18,560 --> 00:37:23,960
<font color="#E5E5E5">put that in the notes file directory</font>

639
00:37:20,540 --> 00:37:28,070
<font color="#CCCCCC">Creek config file just walking through</font>

640
00:37:23,960 --> 00:37:31,690
<font color="#E5E5E5">the different attacks so drop TLS that</font>

641
00:37:28,070 --> 00:37:36,860
will force<font color="#E5E5E5"> connections down to sslv3</font>

642
00:37:31,690 --> 00:37:38,390
self-signed<font color="#CCCCCC"> we'll try a certificate</font>

643
00:37:36,860 --> 00:37:40,010
that's<font color="#E5E5E5"> been generated from the the</font>

644
00:37:38,390 --> 00:37:41,900
custom CA that's not trusted by the

645
00:37:40,010 --> 00:37:43,190
clients the anon server

646
00:37:41,900 --> 00:37:45,760
that's the<font color="#CCCCCC"> anonymous diffie-hellman</font>

647
00:37:43,190 --> 00:37:51,500
attacks that we talked about earlier

648
00:37:45,760 --> 00:37:53,030
superfish<font color="#CCCCCC"> man-in-the-middle this fish</font>

649
00:37:51,500 --> 00:37:55,730
was a something that<font color="#E5E5E5"> was trying to be</font>

650
00:37:53,030 --> 00:37:59,870
installed on lenovo laptops about a year

651
00:37:55,730 --> 00:38:02,570
ago it was a the same CA was used on all

652
00:37:59,870 --> 00:38:07,160
the<font color="#E5E5E5"> Novo laptops so if you've got said</font>

653
00:38:02,570 --> 00:38:09,290
CA you could intercept you could accept

654
00:38:07,160 --> 00:38:12,370
any traffic now<font color="#E5E5E5"> I put it up there not</font>

655
00:38:09,290 --> 00:38:14,930
because I want<font color="#CCCCCC"> to specifically intercept</font>

656
00:38:12,370 --> 00:38:17,990
lenovo laptops but because you can

657
00:38:14,930 --> 00:38:21,049
overload that functionality if you ever

658
00:38:17,990 --> 00:38:25,129
<font color="#CCCCCC">want to test whether there's certificate</font>

659
00:38:21,050 --> 00:38:29,330
pinning happening sorry CA pinning this

660
00:38:25,130 --> 00:38:31,910
is specifically does your application if

661
00:38:29,330 --> 00:38:32,810
there's a trust or so a certificate

662
00:38:31,910 --> 00:38:36,799
<font color="#CCCCCC">store that you</font><font color="#E5E5E5"> can add your own</font>

663
00:38:32,810 --> 00:38:39,440
certificate<font color="#CCCCCC"> into you can add you can add</font>

664
00:38:36,800 --> 00:38:41,480
a custom certificate into that you can

665
00:38:39,440 --> 00:38:43,970
then find out if applications are

666
00:38:41,480 --> 00:38:45,380
trusting that user store so you can

667
00:38:43,970 --> 00:38:49,580
<font color="#E5E5E5">actually overload this functionality</font>

668
00:38:45,380 --> 00:38:52,370
here to test for CA pinning in<font color="#E5E5E5"> mobile in</font>

669
00:38:49,580 --> 00:38:57,770
mobile applications sorry effects

670
00:38:52,370 --> 00:39:06,710
explanation wasn't the best and then yet

671
00:38:57,770 --> 00:39:11,060
to start it is just poison so those<font color="#CCCCCC"> are</font>

672
00:39:06,710 --> 00:39:16,330
the tools that<font color="#E5E5E5"> I've used the next next</font>

673
00:39:11,060 --> 00:39:16,330
<font color="#E5E5E5">set of</font><font color="#CCCCCC"> ten minutes are basically</font>

674
00:39:22,180 --> 00:39:31,330
so openssl really quickly<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> I</font>

675
00:39:27,490 --> 00:39:37,410
tested<font color="#E5E5E5"> on openssl</font><font color="#CCCCCC"> 1 point</font><font color="#E5E5E5"> 0 2</font><font color="#CCCCCC"> G on your</font>

676
00:39:31,330 --> 00:39:39,880
bun to 1604 you been openssl changes so

677
00:39:37,410 --> 00:39:42,700
you'll need to test it on whatever

678
00:39:39,880 --> 00:39:44,530
you're using but on the protocol side of

679
00:39:42,700 --> 00:39:46,899
things generally pretty good he<font color="#CCCCCC"> just</font>

680
00:39:44,530 --> 00:39:51,000
<font color="#E5E5E5">tell at one point</font><font color="#CCCCCC"> 2 by default and Alice</font>

681
00:39:46,900 --> 00:39:55,090
and sslv3<font color="#E5E5E5"> is disabled cipher</font><font color="#CCCCCC"> Suites</font>

682
00:39:51,000 --> 00:39:59,530
pretty good with the exception of RC<font color="#CCCCCC"> for</font>

683
00:39:55,090 --> 00:40:01,090
128 bit being enabled now certificate

684
00:39:59,530 --> 00:40:04,000
validation and hosts and hosting

685
00:40:01,090 --> 00:40:06,340
validation are all the disabled by

686
00:40:04,000 --> 00:40:08,020
default in openssl now what what<font color="#E5E5E5"> I mean</font>

687
00:40:06,340 --> 00:40:10,990
<font color="#CCCCCC">by that is</font><font color="#E5E5E5"> if you're using the open</font>

688
00:40:08,020 --> 00:40:16,540
you're using<font color="#E5E5E5"> the open SSL api's in c you</font>

689
00:40:10,990 --> 00:40:26,410
have to do it yourself so in terms of if

690
00:40:16,540 --> 00:40:34,660
you are<font color="#E5E5E5"> looking at code api calls to ssl</font>

691
00:40:26,410 --> 00:40:36,970
ctx new and ssl ctx setups for setting

692
00:40:34,660 --> 00:40:39,759
the protocol versions likewise foresight

693
00:40:36,970 --> 00:40:44,109
and suites going to call that ball the

694
00:40:39,760 --> 00:40:45,160
the two api's for hostname verification

695
00:40:44,110 --> 00:40:47,650
and certificate button named

696
00:40:45,160 --> 00:40:48,940
verification if you don't<font color="#CCCCCC"> see these when</font>

697
00:40:47,650 --> 00:40:51,160
you're<font color="#E5E5E5"> looking at openness to sell code</font>

698
00:40:48,940 --> 00:40:54,520
in a<font color="#E5E5E5"> client that almost certainly means</font>

699
00:40:51,160 --> 00:40:56,589
it's not<font color="#E5E5E5"> doing any form of certificate</font>

700
00:40:54,520 --> 00:40:59,380
validation or hosting validation so you

701
00:40:56,590 --> 00:41:01,660
as an active attacker confirm can

702
00:40:59,380 --> 00:41:03,780
perform a man-in-the-middle attacks on

703
00:41:01,660 --> 00:41:03,779
it

704
00:41:10,200 --> 00:41:17,350
options that are can<font color="#CCCCCC"> be set to configure</font>

705
00:41:14,850 --> 00:41:20,069
interoperability with servers when<font color="#E5E5E5"> you</font>

706
00:41:17,350 --> 00:41:22,299
set those it disables the mitigation for

707
00:41:20,070 --> 00:41:24,520
full of basic<font color="#E5E5E5"> attack so you actually</font>

708
00:41:22,300 --> 00:41:26,740
<font color="#E5E5E5">have to set that explicitly so again if</font>

709
00:41:24,520 --> 00:41:30,930
you see this it<font color="#E5E5E5"> means your clients</font>

710
00:41:26,740 --> 00:41:30,930
potentially vulnerable to the base

711
00:41:33,480 --> 00:41:39,700
you're actually building sets of cipher

712
00:41:36,220 --> 00:41:41,740
Suites in openssl you can build them

713
00:41:39,700 --> 00:41:43,899
using a series<font color="#CCCCCC"> of words some of these</font>

714
00:41:41,740 --> 00:41:47,169
words can represent either an individual

715
00:41:43,900 --> 00:41:50,140
site this week or a can or off-site<font color="#E5E5E5"> as</font>

716
00:41:47,170 --> 00:41:53,619
<font color="#E5E5E5">weeds the there are particular words</font>

717
00:41:50,140 --> 00:41:55,509
that if you see are concerning so<font color="#CCCCCC"> anal</font>

718
00:41:53,619 --> 00:41:56,730
that<font color="#E5E5E5"> means all the anonymous</font><font color="#CCCCCC"> cipher</font>

719
00:41:55,510 --> 00:42:00,940
<font color="#CCCCCC">suites that</font><font color="#E5E5E5"> we talked about earlier</font>

720
00:41:56,730 --> 00:42:03,700
email that's all of the all of a null

721
00:42:00,940 --> 00:42:06,190
safe than the null encryption cipher

722
00:42:03,700 --> 00:42:08,379
suites that we saw we saw earlier

723
00:42:06,190 --> 00:42:11,320
there's another problem with the works

724
00:42:08,380 --> 00:42:15,220
that that are collections of such as

725
00:42:11,320 --> 00:42:18,550
weeks in that they change openssl on one

726
00:42:15,220 --> 00:42:19,899
platform high warming one thing but if

727
00:42:18,550 --> 00:42:21,760
it'd been compiling your version of

728
00:42:19,900 --> 00:42:25,150
likenesses all comes out hi may have

729
00:42:21,760 --> 00:42:27,250
changed its meaning likewise it has been

730
00:42:25,150 --> 00:42:29,290
compiled in a particular<font color="#CCCCCC"> way hi will</font>

731
00:42:27,250 --> 00:42:32,109
<font color="#E5E5E5">have a game changed its meaning so while</font>

732
00:42:29,290 --> 00:42:34,270
you have these standard words their

733
00:42:32,109 --> 00:42:37,630
meanings across systems can change so

734
00:42:34,270 --> 00:42:40,780
you need you<font color="#E5E5E5"> need to test them and the</font>

735
00:42:37,630 --> 00:42:43,930
way the<font color="#E5E5E5"> way you you find out the full</font>

736
00:42:40,780 --> 00:42:46,270
set of sight her sweets are is by by

737
00:42:43,930 --> 00:42:47,890
running openssl ciphers on the list<font color="#CCCCCC"> and</font>

738
00:42:46,270 --> 00:42:52,750
that<font color="#E5E5E5"> obviously has</font><font color="#CCCCCC"> to be the</font><font color="#E5E5E5"> openssl</font>

739
00:42:47,890 --> 00:42:56,440
library that<font color="#E5E5E5"> you're linking against</font><font color="#CCCCCC"> turn</font>

740
00:42:52,750 --> 00:43:01,600
<font color="#CCCCCC">to lib curl lip curl</font><font color="#E5E5E5"> ism that I've earn</font>

741
00:42:56,440 --> 00:43:03,210
open protocol version is good cycle

742
00:43:01,600 --> 00:43:06,240
<font color="#E5E5E5">suites generally pretty good and</font>

743
00:43:03,210 --> 00:43:16,410
certificate validation and<font color="#CCCCCC"> hostname of</font>

744
00:43:06,240 --> 00:43:21,339
validation or enabled by default your me

745
00:43:16,410 --> 00:43:24,460
mostly invalid it calls<font color="#E5E5E5"> to curl easy</font>

746
00:43:21,340 --> 00:43:27,830
setup we

747
00:43:24,460 --> 00:43:30,850
SFL verify here or<font color="#CCCCCC"> SSL verify host set</font>

748
00:43:27,830 --> 00:43:33,140
to<font color="#CCCCCC"> zero that's the client disabling</font>

749
00:43:30,850 --> 00:43:41,180
certificate verification and hostname

750
00:43:33,140 --> 00:43:55,009
verification and for the record that<font color="#E5E5E5"> was</font>

751
00:43:41,180 --> 00:43:56,870
<font color="#E5E5E5">all 747 so Java again pretty good pretty</font>

752
00:43:55,010 --> 00:43:59,530
good on<font color="#CCCCCC"> the proof the protocol version</font>

753
00:43:56,870 --> 00:44:02,299
is pretty good<font color="#E5E5E5"> on the slightest</font><font color="#CCCCCC"> weeks</font>

754
00:43:59,530 --> 00:44:05,030
validation is enabled when it came

755
00:44:02,300 --> 00:44:06,650
<font color="#E5E5E5">totally invalid the validation it's</font>

756
00:44:05,030 --> 00:44:10,730
enabled depending on the API that you

757
00:44:06,650 --> 00:44:14,600
use so if you use the HTTPS URL

758
00:44:10,730 --> 00:44:18,050
connection class that's fine<font color="#E5E5E5"> but if</font>

759
00:44:14,600 --> 00:44:20,360
you're using just a minute vanilla SSL

760
00:44:18,050 --> 00:44:22,700
socket<font color="#E5E5E5"> from the SSL socket factory</font><font color="#CCCCCC"> hi</font>

761
00:44:20,360 --> 00:44:26,110
<font color="#CCCCCC">Celine validations not done again this</font>

762
00:44:22,700 --> 00:44:33,980
means for<font color="#E5E5E5"> the valid certificate you</font><font color="#CCCCCC"> can</font>

763
00:44:26,110 --> 00:44:36,680
you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> perform an active attack so I my</font>

764
00:44:33,980 --> 00:44:39,110
java job when it comes to enabling and

765
00:44:36,680 --> 00:44:42,279
disabling<font color="#E5E5E5"> a certificate validation is a</font>

766
00:44:39,110 --> 00:44:46,610
lot<font color="#E5E5E5"> more complicated than than curl and</font>

767
00:44:42,280 --> 00:44:49,930
open SSL what you're looking for is any

768
00:44:46,610 --> 00:44:51,650
class that implements<font color="#CCCCCC"> x509 trust manager</font>

769
00:44:49,930 --> 00:44:54,830
specifically the method<font color="#CCCCCC"> that you're</font>

770
00:44:51,650 --> 00:44:58,370
<font color="#CCCCCC">looking for is check server trusted if</font>

771
00:44:54,830 --> 00:45:00,500
that doesn't throw an exception then the

772
00:44:58,370 --> 00:45:03,830
certificate is considered trusted so

773
00:45:00,500 --> 00:45:09,320
again just something to keep an eye out

774
00:45:03,830 --> 00:45:11,630
for on the host on the hostname

775
00:45:09,320 --> 00:45:15,800
validation side you can also add what a

776
00:45:11,630 --> 00:45:18,530
call hostname verifiers these are only

777
00:45:15,800 --> 00:45:21,830
called if the<font color="#CCCCCC"> hostname doesn't doesn't</font>

778
00:45:18,530 --> 00:45:23,600
pass again when using the HTTPS URL

779
00:45:21,830 --> 00:45:27,680
connection but if you ever<font color="#E5E5E5"> see that</font>

780
00:45:23,600 --> 00:45:29,480
<font color="#E5E5E5">return true just as as simply as that it</font>

781
00:45:27,680 --> 00:45:31,870
means someone is<font color="#CCCCCC"> ignored the code is</font>

782
00:45:29,480 --> 00:45:31,870
ignoring

783
00:45:33,590 --> 00:45:44,760
ignoring I'm not doing hostname

784
00:45:36,870 --> 00:45:47,160
validation pison pretty good<font color="#CCCCCC"> no most</font>

785
00:45:44,760 --> 00:45:48,810
<font color="#E5E5E5">things are now enabled by default and</font>

786
00:45:47,160 --> 00:46:00,569
protocol versions and cipher suites are

787
00:45:48,810 --> 00:46:02,490
good again if you<font color="#CCCCCC"> certain that or check</font>

788
00:46:00,570 --> 00:46:11,220
host name equals false that means

789
00:46:02,490 --> 00:46:14,100
<font color="#CCCCCC">someone's switching off a couple of</font>

790
00:46:11,220 --> 00:46:17,220
other notes<font color="#E5E5E5"> with Python it has the same</font>

791
00:46:14,100 --> 00:46:20,250
issues as openssl<font color="#CCCCCC"> on</font><font color="#E5E5E5"> site sweets they're</font>

792
00:46:17,220 --> 00:46:21,990
built using works that whose meanings

793
00:46:20,250 --> 00:46:26,040
can change so you need to<font color="#E5E5E5"> keep an eye on</font>

794
00:46:21,990 --> 00:46:29,580
what they on what those are if you<font color="#E5E5E5"> just</font>

795
00:46:26,040 --> 00:46:33,060
use a if you just create your own ssl

796
00:46:29,580 --> 00:46:35,340
context then a certificate verification

797
00:46:33,060 --> 00:46:37,890
and hostname validation are off by

798
00:46:35,340 --> 00:46:41,070
default you need to call the<font color="#E5E5E5"> create</font>

799
00:46:37,890 --> 00:46:44,420
default context to have them enabled by

800
00:46:41,070 --> 00:46:47,670
default the other thing with python is

801
00:46:44,420 --> 00:46:50,910
then certificate validation and hosting

802
00:46:47,670 --> 00:46:52,350
invalidation are being enabled by

803
00:46:50,910 --> 00:46:56,180
default is only a relatively recent

804
00:46:52,350 --> 00:46:59,970
change to python anything pre 7.9 or

805
00:46:56,180 --> 00:47:03,720
three for three I think doesn't do

806
00:46:59,970 --> 00:47:08,759
doesn't do any of this by default so if

807
00:47:03,720 --> 00:47:11,100
you have older linux distros then even

808
00:47:08,760 --> 00:47:13,320
the updates may even updated versions

809
00:47:11,100 --> 00:47:16,830
you know fully parish<font color="#CCCCCC"> may not do this so</font>

810
00:47:13,320 --> 00:47:22,650
again something<font color="#CCCCCC"> to keep an eye on I'm</font>

811
00:47:16,830 --> 00:47:25,350
going<font color="#E5E5E5"> to skip over requests and that's I</font>

812
00:47:22,650 --> 00:47:28,410
set off some of the TMS issues that have

813
00:47:25,350 --> 00:47:37,049
happened over the past past few years

814
00:47:28,410 --> 00:47:41,600
<font color="#E5E5E5">that list is incomplete so them in this</font>

815
00:47:37,050 --> 00:47:41,600
<font color="#CCCCCC">talk sort of covered the basics so</font>

816
00:47:42,490 --> 00:47:46,859
that's it from me thank you and any

817
00:47:44,590 --> 00:47:46,860
questions

