1
00:00:00,000 --> 00:00:05,790
thank you for having me<font color="#CCCCCC"> here to come</font>

2
00:00:03,330 --> 00:00:08,639
speak Robin was kind enough to accept<font color="#E5E5E5"> my</font>

3
00:00:05,790 --> 00:00:11,190
talk haha I'm here I'm Chris run sir I'm

4
00:00:08,639 --> 00:00:12,899
talking<font color="#CCCCCC"> about the talk is entitled a</font>

5
00:00:11,190 --> 00:00:16,830
battle against the<font color="#E5E5E5"> industry feeding</font>

6
00:00:12,900 --> 00:00:19,140
antivirus for meterpreter and more few

7
00:00:16,830 --> 00:00:21,270
little background on myself<font color="#CCCCCC"> I am a</font>

8
00:00:19,140 --> 00:00:23,100
previous systems administrator never

9
00:00:21,270 --> 00:00:24,689
starred in security just always thought

10
00:00:23,100 --> 00:00:27,810
it was kind of fun as I was running it

11
00:00:24,689 --> 00:00:30,000
through University and found out<font color="#E5E5E5"> that</font>

12
00:00:27,810 --> 00:00:32,159
<font color="#CCCCCC">hey I can</font><font color="#E5E5E5"> actually do a job where i hack</font>

13
00:00:30,000 --> 00:00:34,739
computers like that sounds amazing and

14
00:00:32,159 --> 00:00:36,898
so I<font color="#E5E5E5"> was lucky enough to be able to</font>

15
00:00:34,739 --> 00:00:40,649
slowly work myself into that path and

16
00:00:36,899 --> 00:00:43,620
<font color="#CCCCCC">Here I am i graduated from port of state</font>

17
00:00:40,649 --> 00:00:45,000
and florida in the US i currently live

18
00:00:43,620 --> 00:00:46,968
in<font color="#CCCCCC"> Colorado so I'll</font><font color="#E5E5E5"> get to</font><font color="#CCCCCC"> see the</font>

19
00:00:45,000 --> 00:00:50,820
beautiful mountains every single day and

20
00:00:46,969 --> 00:00:53,129
I'm an open source software<font color="#E5E5E5"> Hughes</font>

21
00:00:50,820 --> 00:00:55,890
developer very loosely where I try to

22
00:00:53,129 --> 00:00:57,980
write code um some of the<font color="#E5E5E5"> Prada projects</font>

23
00:00:55,890 --> 00:01:00,899
that I work on is a veil framework

24
00:00:57,980 --> 00:01:02,430
eyewitness which I think<font color="#CCCCCC"> Robyn just left</font>

25
00:01:00,899 --> 00:01:05,099
but basically<font color="#CCCCCC"> if you've ever used</font>

26
00:01:02,430 --> 00:01:06,750
eyewitness pretty much every<font color="#E5E5E5"> single</font>

27
00:01:05,099 --> 00:01:09,439
feature that's in that has been driven

28
00:01:06,750 --> 00:01:11,880
completely by Robin so thank you rotten

29
00:01:09,439 --> 00:01:14,759
egress is fast just metadata and a

30
00:01:11,880 --> 00:01:15,869
couple other ones so it's been a bunch

31
00:01:14,760 --> 00:01:17,670
<font color="#E5E5E5">of different projects that are slowly</font>

32
00:01:15,869 --> 00:01:21,180
learned and started trying to contribute

33
00:01:17,670 --> 00:01:23,400
<font color="#CCCCCC">back to the community so give a about</font>

34
00:01:21,180 --> 00:01:25,290
what I'm talking about today<font color="#E5E5E5"> I want to</font>

35
00:01:23,400 --> 00:01:27,960
hopefully share some laughs about a

36
00:01:25,290 --> 00:01:30,720
antivirus kind of give<font color="#CCCCCC"> it</font><font color="#E5E5E5"> background on</font>

37
00:01:27,960 --> 00:01:33,750
stagers how they work when you get your

38
00:01:30,720 --> 00:01:35,579
meterpreter shell or beacon or anything

39
00:01:33,750 --> 00:01:38,850
else like wow what's actually happening

40
00:01:35,579 --> 00:01:41,240
that allows you to<font color="#E5E5E5"> get that session I'm</font>

41
00:01:38,850 --> 00:01:44,789
going<font color="#CCCCCC"> to showcase a veil evasion</font>

42
00:01:41,240 --> 00:01:47,220
signature bypass where we were mcafee I

43
00:01:44,790 --> 00:01:48,479
believe electrode a signature for some

44
00:01:47,220 --> 00:01:50,908
of the stuff that<font color="#E5E5E5"> we were doing and i'll</font>

45
00:01:48,479 --> 00:01:52,920
show<font color="#CCCCCC"> you how trivial it was the bypass</font>

46
00:01:50,909 --> 00:01:54,509
that essentially i'm going to<font color="#E5E5E5"> talk about</font>

47
00:01:52,920 --> 00:01:57,060
developing your own code real briefly

48
00:01:54,509 --> 00:01:57,869
and then more i'm going to give a go

49
00:01:57,060 --> 00:02:00,119
over a couple<font color="#E5E5E5"> different case studies</font>

50
00:01:57,869 --> 00:02:02,909
<font color="#E5E5E5">where a three different pieces of custom</font>

51
00:02:00,119 --> 00:02:05,759
code that we wrote that is available<font color="#E5E5E5"> for</font>

52
00:02:02,909 --> 00:02:08,369
anyone to use and which is<font color="#E5E5E5"> simply how we</font>

53
00:02:05,759 --> 00:02:10,470
bypass antivirus and allowed us<font color="#E5E5E5"> to do</font>

54
00:02:08,369 --> 00:02:11,340
whatever it was that we wanted<font color="#E5E5E5"> to now</font>

55
00:02:10,470 --> 00:02:15,239
when we<font color="#E5E5E5"> were on</font>

56
00:02:11,340 --> 00:02:17,220
test<font color="#E5E5E5"> all right uh oh gosh I'm</font><font color="#CCCCCC"> sorry</font>

57
00:02:15,239 --> 00:02:19,769
these graphics are coming up<font color="#E5E5E5"> really</font>

58
00:02:17,220 --> 00:02:23,060
oddly but uh I'm<font color="#CCCCCC"> gonna go over real</font>

59
00:02:19,769 --> 00:02:27,620
quickly talk about stagers how they work

60
00:02:23,060 --> 00:02:30,930
what they do and the whole<font color="#E5E5E5"> point them</font>

61
00:02:27,620 --> 00:02:33,120
all right so stagers can kind<font color="#E5E5E5"> of are</font>

62
00:02:30,930 --> 00:02:35,489
more commonly referred to as stage<font color="#E5E5E5"> one</font>

63
00:02:33,120 --> 00:02:38,879
when it<font color="#CCCCCC"> comes</font><font color="#E5E5E5"> to something</font><font color="#CCCCCC"> that you're</font>

64
00:02:35,489 --> 00:02:41,670
running<font color="#E5E5E5"> on a computer this might be your</font>

65
00:02:38,879 --> 00:02:43,980
output from a tool like<font color="#CCCCCC"> MSF enim which</font>

66
00:02:41,670 --> 00:02:46,260
is<font color="#CCCCCC"> packaged with metasploit framework a</font>

67
00:02:43,980 --> 00:02:51,859
tool like<font color="#CCCCCC"> the elevation develops stage</font>

68
00:02:46,260 --> 00:02:55,738
ones and so forth the goal for stage 1

69
00:02:51,860 --> 00:02:58,410
executables is to typically inject

70
00:02:55,739 --> 00:03:00,930
shellcode in the memory this can<font color="#E5E5E5"> be done</font>

71
00:02:58,410 --> 00:03:03,690
because of the shell code that is

72
00:03:00,930 --> 00:03:06,299
injected within the stager typically we

73
00:03:03,690 --> 00:03:08,910
download a reflective DLL which<font color="#CCCCCC"> may be</font>

74
00:03:06,299 --> 00:03:10,950
meterpreter which may be vegan if you

75
00:03:08,910 --> 00:03:13,530
using cobalt strike or it could<font color="#CCCCCC"> be any</font>

76
00:03:10,950 --> 00:03:16,319
custom written reflective DLL that you

77
00:03:13,530 --> 00:03:18,109
right and that's stored somewhere and so

78
00:03:16,319 --> 00:03:20,250
the goal of these stages<font color="#E5E5E5"> it'll go out</font>

79
00:03:18,109 --> 00:03:22,769
assuming<font color="#E5E5E5"> you do in Reverse connection</font>

80
00:03:20,250 --> 00:03:25,049
and download that DOL inject it into

81
00:03:22,769 --> 00:03:26,519
memory and get it running and that once

82
00:03:25,049 --> 00:03:28,950
that happened that's when<font color="#E5E5E5"> you see that</font>

83
00:03:26,519 --> 00:03:31,590
neat little session want to open through

84
00:03:28,950 --> 00:03:33,510
interpreter you can also write it<font color="#CCCCCC"> to do</font>

85
00:03:31,590 --> 00:03:35,459
anything else that you want to<font color="#E5E5E5"> be</font>

86
00:03:33,510 --> 00:03:38,010
<font color="#E5E5E5">completely honest you have to just write</font>

87
00:03:35,459 --> 00:03:41,459
it yourself<font color="#E5E5E5"> but that's kind of the main</font>

88
00:03:38,010 --> 00:03:43,739
point of<font color="#CCCCCC"> stagers seizures are really</font>

89
00:03:41,459 --> 00:03:46,739
kind<font color="#CCCCCC"> of used</font><font color="#E5E5E5"> for loaders for your real</font>

90
00:03:43,739 --> 00:03:48,569
malware they're not there's no almost no

91
00:03:46,739 --> 00:03:51,030
functionality in a stager itself other

92
00:03:48,569 --> 00:03:53,638
than to go out and download this file

93
00:03:51,030 --> 00:03:56,370
and get it running the memory they're

94
00:03:53,639 --> 00:03:58,829
designed<font color="#E5E5E5"> to be expendable</font><font color="#CCCCCC"> and tiny so</font>

95
00:03:56,370 --> 00:04:00,209
you're not engineering<font color="#CCCCCC"> your malware</font>

96
00:03:58,829 --> 00:04:02,069
spending a lot of time on<font color="#CCCCCC"> that and</font>

97
00:04:00,209 --> 00:04:04,139
<font color="#E5E5E5">putting that immediately on disk only to</font>

98
00:04:02,069 --> 00:04:07,048
either have a get caught signature or

99
00:04:04,139 --> 00:04:10,440
something like that I stages are purely

100
00:04:07,049 --> 00:04:13,349
for to do nothing except load your real

101
00:04:10,440 --> 00:04:15,419
malware and the nice<font color="#CCCCCC"> thing about it is</font>

102
00:04:13,349 --> 00:04:18,029
<font color="#E5E5E5">typically you can load everything all in</font>

103
00:04:15,419 --> 00:04:20,190
memory so<font color="#CCCCCC"> again like i was saying it'll</font>

104
00:04:18,029 --> 00:04:22,010
prevent that on this detection because

105
00:04:20,190 --> 00:04:24,780
pretty much you can live in memory

106
00:04:22,010 --> 00:04:26,520
<font color="#E5E5E5">nothing that you write or</font>

107
00:04:24,780 --> 00:04:30,179
<font color="#E5E5E5">are are trying to</font><font color="#CCCCCC"> use on a system will</font>

108
00:04:26,520 --> 00:04:31,859
get high that's unless you're using a

109
00:04:30,180 --> 00:04:36,169
rootkit kind of like his thirsty which

110
00:04:31,860 --> 00:04:38,940
is really really kind of kind of good so

111
00:04:36,169 --> 00:04:40,859
kind of the functionality<font color="#CCCCCC"> of stagers or</font>

112
00:04:38,940 --> 00:04:43,530
the cool thing about stagers is that any

113
00:04:40,860 --> 00:04:45,570
language that has access like<font color="#CCCCCC"> Windows</font>

114
00:04:43,530 --> 00:04:48,320
<font color="#CCCCCC">API</font><font color="#E5E5E5"> and windows function calls can be</font>

115
00:04:45,570 --> 00:04:50,820
used<font color="#E5E5E5"> to write a stager so this kind of</font>

116
00:04:48,320 --> 00:04:52,650
expands what the languages you can write

117
00:04:50,820 --> 00:04:55,469
a stager and<font color="#E5E5E5"> so normally well like your</font>

118
00:04:52,650 --> 00:04:58,679
traditional windows<font color="#CCCCCC"> languages are C C++</font>

119
00:04:55,470 --> 00:05:00,360
C sharp but as long<font color="#CCCCCC"> as you can</font><font color="#E5E5E5"> interact</font>

120
00:04:58,680 --> 00:05:02,550
with<font color="#E5E5E5"> that Windows API you can do it with</font>

121
00:05:00,360 --> 00:05:05,460
a lot of<font color="#CCCCCC"> different languages we're doing</font>

122
00:05:02,550 --> 00:05:07,350
it with Python with Ruby power shells

123
00:05:05,460 --> 00:05:08,370
kind of obvious for like<font color="#CCCCCC"> Cole these are</font>

124
00:05:07,350 --> 00:05:11,400
what you've probably considered

125
00:05:08,370 --> 00:05:14,400
non-standard like<font color="#E5E5E5"> windows languages they</font>

126
00:05:11,400 --> 00:05:16,950
would write code him interacting with

127
00:05:14,400 --> 00:05:17,940
this API it cut it can be daunting I

128
00:05:16,950 --> 00:05:19,620
know it holds a lot<font color="#CCCCCC"> of people</font><font color="#E5E5E5"> back</font>

129
00:05:17,940 --> 00:05:22,110
<font color="#E5E5E5">sometimes I'm trying to dabble and like</font>

130
00:05:19,620 --> 00:05:25,680
learn<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to work with it but you can</font>

131
00:05:22,110 --> 00:05:28,620
write a sager making function call that

132
00:05:25,680 --> 00:05:31,169
does all this action with only<font color="#E5E5E5"> maybe</font>

133
00:05:28,620 --> 00:05:33,660
four or five function calls it's pretty

134
00:05:31,169 --> 00:05:34,770
quick and it's relatively simple<font color="#E5E5E5"> I like</font>

135
00:05:33,660 --> 00:05:38,010
things hopefully<font color="#CCCCCC"> when I try to explain</font>

136
00:05:34,770 --> 00:05:39,630
it here so<font color="#E5E5E5"> I'm going to go over real</font>

137
00:05:38,010 --> 00:05:42,000
quickly<font color="#CCCCCC"> to different function calls this</font>

138
00:05:39,630 --> 00:05:43,590
is like the main technical part<font color="#E5E5E5"> I'm</font>

139
00:05:42,000 --> 00:05:45,330
gonna try to make this kind of quick

140
00:05:43,590 --> 00:05:46,530
because these will try but I want

141
00:05:45,330 --> 00:05:47,909
everyone to have the<font color="#CCCCCC"> background and</font><font color="#E5E5E5"> how</font>

142
00:05:46,530 --> 00:05:49,260
it<font color="#E5E5E5"> works so you can have a little</font>

143
00:05:47,910 --> 00:05:54,270
understanding as<font color="#E5E5E5"> we go through the rest</font>

144
00:05:49,260 --> 00:05:57,270
others fall so stagers the very first

145
00:05:54,270 --> 00:05:59,280
thing<font color="#CCCCCC"> that they'll do is when you are</font>

146
00:05:57,270 --> 00:06:01,650
trying<font color="#E5E5E5"> to inject shell code is it</font>

147
00:05:59,280 --> 00:06:03,900
allocates memory within the current

148
00:06:01,650 --> 00:06:05,969
process you're running so this<font color="#E5E5E5"> is like</font>

149
00:06:03,900 --> 00:06:08,400
your MSF venom alpha this is your veil

150
00:06:05,970 --> 00:06:10,830
evasion output the second you run and

151
00:06:08,400 --> 00:06:12,419
<font color="#E5E5E5">double-click on that program it has to</font>

152
00:06:10,830 --> 00:06:13,650
allocate memory to store the shellcode

153
00:06:12,419 --> 00:06:15,659
because you're obviously<font color="#E5E5E5"> trying to</font>

154
00:06:13,650 --> 00:06:17,750
inject<font color="#E5E5E5"> shell cut in the memory so it has</font>

155
00:06:15,660 --> 00:06:20,940
<font color="#CCCCCC">to put that somewhere and allocate that</font>

156
00:06:17,750 --> 00:06:22,500
the next<font color="#CCCCCC"> step is it copies the shellcode</font>

157
00:06:20,940 --> 00:06:25,320
you're trying to load into memory

158
00:06:22,500 --> 00:06:27,330
actually into memory so that is stored

159
00:06:25,320 --> 00:06:29,940
somewhere that's that can be used by

160
00:06:27,330 --> 00:06:32,729
your process the third part is it

161
00:06:29,940 --> 00:06:34,500
creates<font color="#E5E5E5"> a thread which runs that shell</font>

162
00:06:32,729 --> 00:06:37,780
code which has been stored in memory and

163
00:06:34,500 --> 00:06:40,810
then the<font color="#CCCCCC"> last part is where</font>

164
00:06:37,780 --> 00:06:43,330
your program says hey don't execute this

165
00:06:40,810 --> 00:06:46,030
process main let that thread finish

166
00:06:43,330 --> 00:06:47,289
before you exit the program and so

167
00:06:46,030 --> 00:06:50,559
<font color="#E5E5E5">that's like let's say you get a matter</font>

168
00:06:47,290 --> 00:06:52,840
<font color="#CCCCCC">procession or B concession the second</font>

169
00:06:50,560 --> 00:06:54,100
you get that in you want that thread to

170
00:06:52,840 --> 00:06:55,510
stay<font color="#E5E5E5"> open because that's how you're</font>

171
00:06:54,100 --> 00:06:58,210
interacting with that<font color="#E5E5E5"> computer over</font>

172
00:06:55,510 --> 00:07:00,159
meterpreter or vegan is the<font color="#E5E5E5"> thread</font><font color="#CCCCCC"> is</font>

173
00:06:58,210 --> 00:07:02,138
still running<font color="#E5E5E5"> if your process were too</font>

174
00:07:00,160 --> 00:07:03,010
<font color="#E5E5E5">close you would like your thread with</font>

175
00:07:02,139 --> 00:07:05,650
justdial you wouldn't have any

176
00:07:03,010 --> 00:07:07,000
meterpreter vegan session anymore so you

177
00:07:05,650 --> 00:07:10,469
need basically some sort<font color="#E5E5E5"> of like</font>

178
00:07:07,000 --> 00:07:16,450
blocking call that says hey please don't

179
00:07:10,470 --> 00:07:17,890
exit just keep waiting right here so one

180
00:07:16,450 --> 00:07:20,020
thing that<font color="#E5E5E5"> I've kind of talked about</font>

181
00:07:17,890 --> 00:07:21,640
this before and the<font color="#E5E5E5"> function that people</font>

182
00:07:20,020 --> 00:07:24,099
use usually for allocating memory is

183
00:07:21,640 --> 00:07:25,810
<font color="#E5E5E5">this function virtual hour and that's</font>

184
00:07:24,100 --> 00:07:28,180
what's commonly used by<font color="#CCCCCC"> a lot of</font>

185
00:07:25,810 --> 00:07:29,740
different<font color="#E5E5E5"> programs</font><font color="#CCCCCC"> out there today which</font>

186
00:07:28,180 --> 00:07:31,960
is this is a function which allocates

187
00:07:29,740 --> 00:07:34,720
memory in Windows but there's an

188
00:07:31,960 --> 00:07:36,280
alternate way that you can also store

189
00:07:34,720 --> 00:07:39,430
allocate memory within the current

190
00:07:36,280 --> 00:07:40,900
process and it's not necessarily any

191
00:07:39,430 --> 00:07:44,130
better but it's just<font color="#CCCCCC"> not as heavily</font>

192
00:07:40,900 --> 00:07:46,960
utilized so changing something like

193
00:07:44,130 --> 00:07:49,810
instead<font color="#E5E5E5"> of using virtual</font><font color="#CCCCCC"> alat will use</font>

194
00:07:46,960 --> 00:07:51,430
something called he'd create simply

195
00:07:49,810 --> 00:07:52,810
making that function change can help

196
00:07:51,430 --> 00:07:55,289
lower your detection rate because

197
00:07:52,810 --> 00:07:58,870
sometimes when it comes to AV signatures

198
00:07:55,289 --> 00:08:00,880
the AV companies will write it based off

199
00:07:58,870 --> 00:08:02,710
of which specific function calls are you

200
00:08:00,880 --> 00:08:04,930
calling like how quick are they what

201
00:08:02,710 --> 00:08:06,820
order is it coming in and so if you're

202
00:08:04,930 --> 00:08:08,140
calling<font color="#E5E5E5"> something that's unexpected by</font>

203
00:08:06,820 --> 00:08:10,330
them that's not this virtual<font color="#CCCCCC"> Alec</font>

204
00:08:08,140 --> 00:08:11,919
function then<font color="#E5E5E5"> you're you're changing it</font>

205
00:08:10,330 --> 00:08:15,250
up and you may be bypassing their

206
00:08:11,919 --> 00:08:17,680
signature so the five function calls

207
00:08:15,250 --> 00:08:19,120
here<font color="#E5E5E5"> heap create is one of them what</font>

208
00:08:17,680 --> 00:08:21,100
<font color="#E5E5E5">this does is this basically just creates</font>

209
00:08:19,120 --> 00:08:22,330
a heap<font color="#E5E5E5"> object for your the current</font>

210
00:08:21,100 --> 00:08:24,789
process that you're running so<font color="#CCCCCC"> that</font>

211
00:08:22,330 --> 00:08:26,560
stager that executable<font color="#E5E5E5"> that you are that</font>

212
00:08:24,789 --> 00:08:29,680
you just created and<font color="#E5E5E5"> that is running is</font>

213
00:08:26,560 --> 00:08:31,240
now<font color="#E5E5E5"> having a heat object created for it</font>

214
00:08:29,680 --> 00:08:33,430
and<font color="#CCCCCC"> you have to tell it like how much</font>

215
00:08:31,240 --> 00:08:34,930
size so it's like it needs to know what

216
00:08:33,429 --> 00:08:37,299
amount of<font color="#CCCCCC"> shellcode on you to store</font>

217
00:08:34,929 --> 00:08:39,309
inside of it<font color="#E5E5E5"> and so this</font><font color="#CCCCCC"> is where it</font>

218
00:08:37,299 --> 00:08:41,409
creates<font color="#E5E5E5"> that and allocates that certain</font>

219
00:08:39,309 --> 00:08:43,900
amount of space I usually<font color="#CCCCCC"> do about twice</font>

220
00:08:41,409 --> 00:08:46,360
the shellcode<font color="#CCCCCC"> lane but anyone can I mean</font>

221
00:08:43,900 --> 00:08:49,630
do whatever you'd like<font color="#CCCCCC"> Keith alec is</font>

222
00:08:46,360 --> 00:08:51,880
kind of virtual Alex cousin where this

223
00:08:49,630 --> 00:08:54,010
is<font color="#CCCCCC"> okay of that heat that would allocate</font>

224
00:08:51,880 --> 00:08:56,740
created with allocate a certain amount

225
00:08:54,010 --> 00:09:00,790
of memory from that<font color="#E5E5E5"> to store our</font>

226
00:08:56,740 --> 00:09:02,710
shellcode<font color="#CCCCCC"> rtl move memory is that</font>

227
00:09:00,790 --> 00:09:04,420
function so that's that first step where

228
00:09:02,710 --> 00:09:05,830
I talk about<font color="#E5E5E5"> we're creating an</font>

229
00:09:04,420 --> 00:09:09,250
allocating memory within the current

230
00:09:05,830 --> 00:09:12,160
process<font color="#CCCCCC"> RTL move memory is the function</font>

231
00:09:09,250 --> 00:09:15,960
that copies shellcode from the program

232
00:09:12,160 --> 00:09:18,850
and injects that into memory itself

233
00:09:15,960 --> 00:09:21,220
create thread this is the next<font color="#E5E5E5"> step</font>

234
00:09:18,850 --> 00:09:23,200
we're after you've copied that shellcode

235
00:09:21,220 --> 00:09:26,170
into memory you<font color="#E5E5E5"> basically feed it a</font>

236
00:09:23,200 --> 00:09:28,360
handle which is that<font color="#CCCCCC"> where in memory</font>

237
00:09:26,170 --> 00:09:30,540
your shellcode starts and it will create

238
00:09:28,360 --> 00:09:33,070
a threat<font color="#E5E5E5"> and start running at so this is</font>

239
00:09:30,540 --> 00:09:35,949
assuming you're doing<font color="#E5E5E5"> like a MSF venom</font>

240
00:09:33,070 --> 00:09:37,690
stager or veil evasion stager this is

241
00:09:35,950 --> 00:09:39,100
where<font color="#E5E5E5"> it'll start connecting the thread</font>

242
00:09:37,690 --> 00:09:41,110
will run to start connecting back to

243
00:09:39,100 --> 00:09:44,320
your interpreter<font color="#E5E5E5"> handler and download</font>

244
00:09:41,110 --> 00:09:46,690
meterpreter and run in memory and wait

245
00:09:44,320 --> 00:09:48,160
for single object is this function that

246
00:09:46,690 --> 00:09:50,170
again it's kind of like a blocking call

247
00:09:48,160 --> 00:09:52,719
it says hey don't let this whole process

248
00:09:50,170 --> 00:09:54,400
just exit because<font color="#CCCCCC"> if you did you lose</font>

249
00:09:52,720 --> 00:09:56,800
your stage or your stage<font color="#CCCCCC"> Aaron</font>

250
00:09:54,400 --> 00:09:59,140
meterpreter session Oh be a blocking

251
00:09:56,800 --> 00:10:00,819
call<font color="#E5E5E5"> simply wait let throughout the</font>

252
00:09:59,140 --> 00:10:03,400
thread complete so you're using

253
00:10:00,820 --> 00:10:05,170
meterpreter it obviously wants to stay

254
00:10:03,400 --> 00:10:10,300
running and so this will keep it the

255
00:10:05,170 --> 00:10:12,849
program from completely dying so<font color="#E5E5E5"> it's</font>

256
00:10:10,300 --> 00:10:14,979
kind of dry it's not<font color="#E5E5E5"> all fun but that's</font>

257
00:10:12,850 --> 00:10:16,600
basically<font color="#E5E5E5"> stagers in this nutshell where</font>

258
00:10:14,980 --> 00:10:20,050
it's this process kind of like I just

259
00:10:16,600 --> 00:10:21,580
said of allocating memory copying your

260
00:10:20,050 --> 00:10:24,609
shellcode that you want to inject into

261
00:10:21,580 --> 00:10:26,700
memory creating a thread that runs the

262
00:10:24,610 --> 00:10:30,160
shellcode and then waiting for<font color="#CCCCCC"> it to go</font>

263
00:10:26,700 --> 00:10:33,430
<font color="#E5E5E5">all right so visual real quick I hope</font>

264
00:10:30,160 --> 00:10:35,740
that's easy to see this is obviously a

265
00:10:33,430 --> 00:10:39,489
lot of shell code here that we're<font color="#CCCCCC"> trying</font>

266
00:10:35,740 --> 00:10:42,370
to inject into memory this is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Python</font>

267
00:10:39,490 --> 00:10:43,870
by the way and so here are like our

268
00:10:42,370 --> 00:10:45,940
function calls but here's<font color="#E5E5E5"> heat-treat</font>

269
00:10:43,870 --> 00:10:47,560
what I was just<font color="#CCCCCC"> talking about he palette</font>

270
00:10:45,940 --> 00:10:50,410
and so these functions are allocating

271
00:10:47,560 --> 00:10:53,290
memory within this process once this is

272
00:10:50,410 --> 00:10:55,930
converted into enough suitable<font color="#CCCCCC"> RTL move</font>

273
00:10:53,290 --> 00:10:57,939
memory is the function that is copying

274
00:10:55,930 --> 00:11:01,449
the shellcode into the memory that's

275
00:10:57,940 --> 00:11:04,600
<font color="#E5E5E5">been allocated by this create thread is</font>

276
00:11:01,450 --> 00:11:05,290
what then creating<font color="#E5E5E5"> the thread to inject</font>

277
00:11:04,600 --> 00:11:08,110
and run the show

278
00:11:05,290 --> 00:11:11,259
runners on 30 people<font color="#E5E5E5"> and then wait for</font>

279
00:11:08,110 --> 00:11:13,329
single object is what's saying hey<font color="#CCCCCC"> wait</font>

280
00:11:11,259 --> 00:11:15,310
<font color="#E5E5E5">and let this shell cut xq wait till the</font>

281
00:11:13,329 --> 00:11:17,920
thread is<font color="#CCCCCC"> done</font><font color="#E5E5E5"> before you exit the</font>

282
00:11:15,310 --> 00:11:19,869
program and so this right here is a

283
00:11:17,920 --> 00:11:23,649
stager<font color="#E5E5E5"> and its entire so we're talking</font>

284
00:11:19,870 --> 00:11:25,839
<font color="#E5E5E5">what maybe eight seven eight lines it's</font>

285
00:11:23,649 --> 00:11:28,690
really<font color="#E5E5E5"> fast and easy to do some of its</font>

286
00:11:25,839 --> 00:11:30,610
<font color="#E5E5E5">just Python overhead like this ctypes is</font>

287
00:11:28,690 --> 00:11:33,310
the<font color="#CCCCCC"> library that allows Python to</font>

288
00:11:30,610 --> 00:11:35,380
interact<font color="#CCCCCC"> with the windows api and so</font>

289
00:11:33,310 --> 00:11:37,050
<font color="#E5E5E5">just</font><font color="#CCCCCC"> in eight lines of code you can</font>

290
00:11:35,380 --> 00:11:40,149
completely write your own stager and

291
00:11:37,050 --> 00:11:43,209
<font color="#E5E5E5">it's it's fairly quick so tiny program</font>

292
00:11:40,149 --> 00:11:45,040
it doesn't take a lot of programming

293
00:11:43,209 --> 00:11:46,750
background so that that<font color="#E5E5E5"> was the</font><font color="#CCCCCC"> kind of</font>

294
00:11:45,040 --> 00:11:49,120
nice thing that got me interested when<font color="#CCCCCC"> I</font>

295
00:11:46,750 --> 00:11:51,399
first started<font color="#E5E5E5"> doing this veil evasion</font>

296
00:11:49,120 --> 00:11:54,190
was probably one of<font color="#CCCCCC"> my first programs</font>

297
00:11:51,399 --> 00:11:56,079
because i really never written anything

298
00:11:54,190 --> 00:11:58,300
beforehand and so I was lucky<font color="#E5E5E5"> enough to</font>

299
00:11:56,079 --> 00:12:00,880
work with some really smart guys will

300
00:11:58,300 --> 00:12:07,479
<font color="#CCCCCC">charter a</font><font color="#E5E5E5"> mic right to help develop this</font>

301
00:12:00,880 --> 00:12:10,800
tool<font color="#CCCCCC"> all right so</font><font color="#E5E5E5"> I was talking about he</font>

302
00:12:07,480 --> 00:12:12,970
palette using these function calls to

303
00:12:10,800 --> 00:12:16,569
kind<font color="#E5E5E5"> of changing up from the main</font>

304
00:12:12,970 --> 00:12:19,380
standard that is virtual Alec to inject

305
00:12:16,569 --> 00:12:22,240
<font color="#CCCCCC">shell cut into memory and run it well</font>

306
00:12:19,380 --> 00:12:24,130
that's it works well changing the

307
00:12:22,240 --> 00:12:26,399
function calls can work really well but

308
00:12:24,130 --> 00:12:28,959
sometimes it still gets caught an

309
00:12:26,399 --> 00:12:32,079
<font color="#CCCCCC">old-school kind</font><font color="#E5E5E5"> of red teaming trick is</font>

310
00:12:28,959 --> 00:12:35,349
this concept<font color="#E5E5E5"> of using ordinal values to</font>

311
00:12:32,079 --> 00:12:38,019
reference function calls that will<font color="#E5E5E5"> by</font>

312
00:12:35,350 --> 00:12:39,339
<font color="#E5E5E5">passing that virus and so the way I kind</font>

313
00:12:38,019 --> 00:12:41,769
of picture this in my head is like

314
00:12:39,339 --> 00:12:44,889
<font color="#E5E5E5">picture in a ring or a Python list</font>

315
00:12:41,769 --> 00:12:47,319
containing a function calls each with

316
00:12:44,889 --> 00:12:49,480
any spot on the<font color="#E5E5E5"> right in order to</font>

317
00:12:47,319 --> 00:12:51,550
reference a specific function you<font color="#CCCCCC"> have</font>

318
00:12:49,480 --> 00:12:52,810
to reference like its location<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that</font>

319
00:12:51,550 --> 00:12:54,130
array you're not calling it by name

320
00:12:52,810 --> 00:12:57,099
they're calling it by where it's located

321
00:12:54,130 --> 00:13:00,579
in that<font color="#E5E5E5"> array it's the same concept for</font>

322
00:12:57,100 --> 00:13:02,649
ordinal values<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> has obviously</font>

323
00:13:00,579 --> 00:13:04,599
functions in them and you<font color="#CCCCCC"> can access</font>

324
00:13:02,649 --> 00:13:07,839
<font color="#CCCCCC">them by name which is like we were just</font>

325
00:13:04,600 --> 00:13:10,449
<font color="#E5E5E5">doing here with Heath Alec virtual Alec</font>

326
00:13:07,839 --> 00:13:11,910
everything or keep out he create we're

327
00:13:10,449 --> 00:13:14,469
calling this function by the name

328
00:13:11,910 --> 00:13:16,930
instead of<font color="#E5E5E5"> doing that we can just</font>

329
00:13:14,470 --> 00:13:19,059
<font color="#E5E5E5">reference it by its ordinal value which</font>

330
00:13:16,930 --> 00:13:23,248
is its location in where it's<font color="#CCCCCC"> the</font>

331
00:13:19,059 --> 00:13:26,769
word<font color="#E5E5E5"> within the windows a couple dll and</font>

332
00:13:23,249 --> 00:13:28,809
so yeah the st. it's the same exact

333
00:13:26,769 --> 00:13:31,449
function that is going to be called when

334
00:13:28,809 --> 00:13:35,019
<font color="#E5E5E5">you do it by ordinal value except you're</font>

335
00:13:31,449 --> 00:13:36,699
doing a bias value rather by me so I'll

336
00:13:35,019 --> 00:13:39,549
give a quick example on checking out

337
00:13:36,699 --> 00:13:41,589
some code so here's that other way of

338
00:13:39,549 --> 00:13:43,629
writing a stager where they do virtual

339
00:13:41,589 --> 00:13:45,699
Alec or is same other functions though

340
00:13:43,629 --> 00:13:48,579
our tail move memory create thread

341
00:13:45,699 --> 00:13:51,159
waitforsingleobject so this<font color="#E5E5E5"> is where</font>

342
00:13:48,579 --> 00:13:55,988
we're referencing each function call

343
00:13:51,159 --> 00:13:57,968
within<font color="#E5E5E5"> the stager by name however you</font>

344
00:13:55,989 --> 00:14:00,669
can do<font color="#E5E5E5"> something like this we're now</font>

345
00:13:57,969 --> 00:14:04,919
this is actually<font color="#CCCCCC"> its ordinal value of</font>

346
00:14:00,669 --> 00:14:09,249
virtual Alec<font color="#E5E5E5"> it's 1264 this one is 10 49</font>

347
00:14:04,919 --> 00:14:11,559
184 and 1280 this is the same exact

348
00:14:09,249 --> 00:14:15,399
function calls that we were making in

349
00:14:11,559 --> 00:14:18,459
this slide however I<font color="#E5E5E5"> just looked up this</font>

350
00:14:15,399 --> 00:14:20,529
ordinal value and and calling that

351
00:14:18,459 --> 00:14:24,429
function by its value rather than by

352
00:14:20,529 --> 00:14:26,349
name and the really<font color="#E5E5E5"> weird thing is when</font>

353
00:14:24,429 --> 00:14:29,619
you do something<font color="#CCCCCC"> like that in reference</font>

354
00:14:26,349 --> 00:14:33,159
it by its value and set a bias name you

355
00:14:29,619 --> 00:14:35,049
can completely bypass AV it's<font color="#E5E5E5"> this weird</font>

356
00:14:33,159 --> 00:14:37,809
trick that like they<font color="#E5E5E5"> just don't know how</font>

357
00:14:35,049 --> 00:14:39,369
to properly inspect ordinal values and

358
00:14:37,809 --> 00:14:44,589
use them when writing odd detection

359
00:14:39,369 --> 00:14:47,469
methods so the one<font color="#CCCCCC"> thing to note when</font>

360
00:14:44,589 --> 00:14:49,359
you're doing this is ordinal values can

361
00:14:47,469 --> 00:14:51,429
change when they call when we're talking

362
00:14:49,359 --> 00:14:53,289
from operating system to operating

363
00:14:51,429 --> 00:14:55,299
system and sometimes service pack the

364
00:14:53,289 --> 00:14:57,999
service pack so when you're writing

365
00:14:55,299 --> 00:15:01,569
these you kind of have to be fairly

366
00:14:57,999 --> 00:15:03,759
targeted in the against the operating

367
00:15:01,569 --> 00:15:07,149
system that you're targeting it gets so

368
00:15:03,759 --> 00:15:09,549
if you're writing<font color="#E5E5E5"> a payload for windows</font>

369
00:15:07,149 --> 00:15:11,109
7 service pack<font color="#E5E5E5"> 1 that's not necessarily</font>

370
00:15:09,549 --> 00:15:13,299
going to work on Windows XP and a

371
00:15:11,109 --> 00:15:15,299
probably<font color="#E5E5E5"> ball because the ordinal values</font>

372
00:15:13,299 --> 00:15:18,129
for these functions can change between

373
00:15:15,299 --> 00:15:19,839
<font color="#E5E5E5">operating systems so the question is</font>

374
00:15:18,129 --> 00:15:23,109
kind of how would you find these ordinal

375
00:15:19,839 --> 00:15:25,569
values there's a free tool it's called

376
00:15:23,109 --> 00:15:30,420
<font color="#E5E5E5">PE view I think he a PE view or viewer</font>

377
00:15:25,569 --> 00:15:32,699
and<font color="#E5E5E5"> so</font><font color="#CCCCCC"> basically I loaded up the</font>

378
00:15:30,420 --> 00:15:35,099
into memory and so I'm<font color="#CCCCCC"> looking at the</font>

379
00:15:32,700 --> 00:15:37,260
export at the table<font color="#E5E5E5"> and so right here</font>

380
00:15:35,100 --> 00:15:39,630
are all the<font color="#CCCCCC"> different functions that are</font>

381
00:15:37,260 --> 00:15:41,339
the export that<font color="#CCCCCC"> are being exported and</font>

382
00:15:39,630 --> 00:15:43,950
so this one I've highlighted it

383
00:15:41,339 --> 00:15:45,750
specifically virtual<font color="#E5E5E5"> hour and so what</font>

384
00:15:43,950 --> 00:15:48,329
this shows right here this column says

385
00:15:45,750 --> 00:15:51,360
value and this is base 16 so you have to

386
00:15:48,329 --> 00:15:55,050
convert it to base 10 but that's the

387
00:15:51,360 --> 00:16:00,570
value of virtual out so what 0 @ / 04 f

388
00:15:55,050 --> 00:16:02,370
0 so this is that in base 10 and that's

389
00:16:00,570 --> 00:16:05,519
all it<font color="#CCCCCC"> was it's just</font><font color="#E5E5E5"> looking up the</font>

390
00:16:02,370 --> 00:16:08,100
value where your function is finding

391
00:16:05,519 --> 00:16:11,010
that ordinal value and simply replacing

392
00:16:08,100 --> 00:16:13,260
that in your code and you're able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font>

393
00:16:11,010 --> 00:16:14,880
that<font color="#E5E5E5"> to completely bypass a lot of</font>

394
00:16:13,260 --> 00:16:18,000
<font color="#CCCCCC">different av's simply because they</font>

395
00:16:14,880 --> 00:16:19,800
aren't looking<font color="#E5E5E5"> at ordinal values it's</font>

396
00:16:18,000 --> 00:16:22,019
<font color="#E5E5E5">really easy thing to do just takes</font>

397
00:16:19,800 --> 00:16:23,609
looking this<font color="#CCCCCC"> off they're using this tool</font>

398
00:16:22,019 --> 00:16:26,010
on the<font color="#CCCCCC"> operating system that you're</font>

399
00:16:23,610 --> 00:16:27,839
using it that you're targeting but<font color="#E5E5E5"> again</font>

400
00:16:26,010 --> 00:16:29,819
the main thing is you have<font color="#CCCCCC"> to target</font>

401
00:16:27,839 --> 00:16:32,040
it's not you can't just make one and

402
00:16:29,820 --> 00:16:37,320
have it universally work on any single

403
00:16:32,040 --> 00:16:38,579
window system de view<font color="#E5E5E5"> it is that</font><font color="#CCCCCC"> okay so</font>

404
00:16:37,320 --> 00:16:40,350
yeah that's the free program that was

405
00:16:38,579 --> 00:16:43,050
just using just lets you inspect PE

406
00:16:40,350 --> 00:16:44,730
files<font color="#CCCCCC"> dll's basically whatever you want</font>

407
00:16:43,050 --> 00:16:47,670
to load into it that it that has the

408
00:16:44,730 --> 00:16:49,800
ability to inspect I was exploding<font color="#E5E5E5"> the</font>

409
00:16:47,670 --> 00:16:52,199
kernel32.dll and that's what I was using

410
00:16:49,800 --> 00:16:53,969
to kind of look through and get that a

411
00:16:52,199 --> 00:16:56,939
pretty picture<font color="#CCCCCC"> that this picture that</font>

412
00:16:53,970 --> 00:16:59,910
you just saw to basically look at the

413
00:16:56,940 --> 00:17:01,920
deal or the ordinal value and again the

414
00:16:59,910 --> 00:17:03,650
only<font color="#E5E5E5"> note is that it provides</font><font color="#CCCCCC"> the basic</font>

415
00:17:01,920 --> 00:17:06,449
<font color="#E5E5E5">thing so you have to convert it to</font>

416
00:17:03,650 --> 00:17:10,349
facetime before you put that in whatever

417
00:17:06,449 --> 00:17:12,929
program you ready<font color="#CCCCCC"> all right so i'm going</font>

418
00:17:10,349 --> 00:17:16,559
to<font color="#E5E5E5"> talk real quick about so that's a</font>

419
00:17:12,929 --> 00:17:19,230
kind of background on stagers how they

420
00:17:16,559 --> 00:17:21,030
work ordinal values actually<font color="#E5E5E5"> aren't in</font>

421
00:17:19,230 --> 00:17:22,199
vail yet that's something<font color="#CCCCCC"> that i'm</font>

422
00:17:21,030 --> 00:17:23,790
<font color="#CCCCCC">looking i'm</font><font color="#E5E5E5"> going to be putting them</font>

423
00:17:22,199 --> 00:17:26,130
pretty shortly but<font color="#E5E5E5"> it's gonna require a</font>

424
00:17:23,790 --> 00:17:27,510
little bit customization because we have

425
00:17:26,130 --> 00:17:30,090
to keep like a basically running

426
00:17:27,510 --> 00:17:32,520
database of all the ordinal values for

427
00:17:30,090 --> 00:17:34,439
each specific function call and then

428
00:17:32,520 --> 00:17:37,590
which service pack and operating<font color="#CCCCCC"> system</font>

429
00:17:34,440 --> 00:17:38,940
that their relative to so it can take a

430
00:17:37,590 --> 00:17:40,740
little bit<font color="#E5E5E5"> for me to put in but that's</font>

431
00:17:38,940 --> 00:17:42,299
<font color="#E5E5E5">something</font><font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> going to do but we don't</font>

432
00:17:40,740 --> 00:17:43,280
see a<font color="#E5E5E5"> lot of programs out there doing</font>

433
00:17:42,299 --> 00:17:46,220
this other<font color="#CCCCCC"> than like</font>

434
00:17:43,280 --> 00:17:48,740
so if you're<font color="#CCCCCC"> looking for a quick win try</font>

435
00:17:46,220 --> 00:17:53,150
to bypass ad for a stager try the

436
00:17:48,740 --> 00:17:55,310
ordinal values so veil evasion<font color="#E5E5E5"> one of</font>

437
00:17:53,150 --> 00:17:57,770
the cool<font color="#E5E5E5"> things is that how our approach</font>

438
00:17:55,310 --> 00:18:01,190
within trying<font color="#E5E5E5"> to build trust</font><font color="#CCCCCC"> in the tool</font>

439
00:17:57,770 --> 00:18:04,370
and to allow<font color="#E5E5E5"> it to continue to bypass AV</font>

440
00:18:01,190 --> 00:18:08,090
is that it's completely open source this

441
00:18:04,370 --> 00:18:13,010
was really important for us<font color="#E5E5E5"> because when</font>

442
00:18:08,090 --> 00:18:15,080
we run code on a customer's computers we

443
00:18:13,010 --> 00:18:17,120
need we're obviously held accountable to

444
00:18:15,080 --> 00:18:19,399
what's being drawn in that program I

445
00:18:17,120 --> 00:18:21,169
don't<font color="#E5E5E5"> have faith if there's a back door</font>

446
00:18:19,400 --> 00:18:24,290
or something like that that's<font color="#CCCCCC"> closed</font>

447
00:18:21,170 --> 00:18:26,870
source I don't like<font color="#CCCCCC"> to run that on any</font>

448
00:18:24,290 --> 00:18:28,520
of my customers systems because I can't

449
00:18:26,870 --> 00:18:31,100
validate everything that's in that code

450
00:18:28,520 --> 00:18:32,840
I don't know what it<font color="#CCCCCC"> is so if something</font>

451
00:18:31,100 --> 00:18:34,699
malicious<font color="#E5E5E5"> or bad were to happen there's</font>

452
00:18:32,840 --> 00:18:36,620
kind of a problem<font color="#E5E5E5"> in my mind so we</font>

453
00:18:34,700 --> 00:18:38,300
wanted to keep this completely open

454
00:18:36,620 --> 00:18:41,179
source so that anyone can kind of look

455
00:18:38,300 --> 00:18:43,070
at it<font color="#CCCCCC"> and gain trust and</font><font color="#E5E5E5"> the program and</font>

456
00:18:41,180 --> 00:18:45,260
what we're actually using in the tool

457
00:18:43,070 --> 00:18:47,810
and that's<font color="#E5E5E5"> also why when we unveiled</font>

458
00:18:45,260 --> 00:18:49,850
<font color="#E5E5E5">generate the payload it puts spits out</font>

459
00:18:47,810 --> 00:18:52,820
like the executable but then it also

460
00:18:49,850 --> 00:18:56,480
spits out the source code to that SQL so

461
00:18:52,820 --> 00:18:58,129
you can look<font color="#E5E5E5"> at and validate it the next</font>

462
00:18:56,480 --> 00:19:00,830
thing is that this can query virus

463
00:18:58,130 --> 00:19:02,090
totals<font color="#E5E5E5"> API so the first step</font><font color="#CCCCCC"> that</font>

464
00:19:00,830 --> 00:19:05,000
everyone's probably like why would you

465
00:19:02,090 --> 00:19:06,350
ever<font color="#CCCCCC"> want to query virus totals API why</font>

466
00:19:05,000 --> 00:19:09,350
would<font color="#E5E5E5"> you want to do anything</font><font color="#CCCCCC"> when</font>

467
00:19:06,350 --> 00:19:11,659
you're<font color="#E5E5E5"> writing a back door to just have</font>

468
00:19:09,350 --> 00:19:14,689
a<font color="#E5E5E5"> get caught well that's not the point</font>

469
00:19:11,660 --> 00:19:16,190
of this the way<font color="#CCCCCC"> that we query by virus</font>

470
00:19:14,690 --> 00:19:18,350
whole<font color="#E5E5E5"> eight so everyone knows virustotal</font>

471
00:19:16,190 --> 00:19:20,390
for you upload<font color="#E5E5E5"> an executable or some</font>

472
00:19:18,350 --> 00:19:22,189
sort of file and it will scan it<font color="#CCCCCC"> with a</font>

473
00:19:20,390 --> 00:19:24,020
ton of different<font color="#E5E5E5"> systems there are AV</font>

474
00:19:22,190 --> 00:19:25,940
systems out there and then it'll tell

475
00:19:24,020 --> 00:19:28,340
you add as malicious<font color="#E5E5E5"> is caught by</font><font color="#CCCCCC"> he</font>

476
00:19:25,940 --> 00:19:30,470
certain a these and so forth that's not

477
00:19:28,340 --> 00:19:33,620
what<font color="#E5E5E5"> this does every time that we</font>

478
00:19:30,470 --> 00:19:36,860
generate a payload a veil keeps a copy

479
00:19:33,620 --> 00:19:41,389
of its Shaw I think a sha-1 hash that<font color="#E5E5E5"> we</font>

480
00:19:36,860 --> 00:19:43,550
we use to upload we then take that sha-1

481
00:19:41,390 --> 00:19:46,820
hash when the user says hey query

482
00:19:43,550 --> 00:19:48,740
virustotal and will upload<font color="#CCCCCC"> the hash so</font>

483
00:19:46,820 --> 00:19:51,020
this is completely<font color="#E5E5E5"> different from</font>

484
00:19:48,740 --> 00:19:53,840
uploading the<font color="#E5E5E5"> ex evil itself there's no</font>

485
00:19:51,020 --> 00:19:56,210
analysis of the<font color="#E5E5E5"> payload so there's no</font>

486
00:19:53,840 --> 00:19:56,809
<font color="#E5E5E5">way for virus total to make a signature</font>

487
00:19:56,210 --> 00:19:59,480
fun

488
00:19:56,809 --> 00:20:00,980
what<font color="#E5E5E5"> this is designed to do is let's say</font>

489
00:19:59,480 --> 00:20:02,690
you're on a longer team off<font color="#E5E5E5"> your honor</font>

490
00:20:00,980 --> 00:20:05,120
red team or maybe on a quick pen test

491
00:20:02,690 --> 00:20:07,519
and you think<font color="#E5E5E5"> that defenders there may</font>

492
00:20:05,120 --> 00:20:09,469
have caught your payload or<font color="#CCCCCC"> maybe you</font>

493
00:20:07,519 --> 00:20:11,600
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> check and see if anyone anywhere</font>

494
00:20:09,470 --> 00:20:15,379
has somehow found that pale that you're

495
00:20:11,600 --> 00:20:18,620
using this will query for that specific

496
00:20:15,379 --> 00:20:20,840
vials sha-1 hash it will send that to

497
00:20:18,620 --> 00:20:23,330
virustotal and then<font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> let you</font><font color="#CCCCCC"> know</font>

498
00:20:20,840 --> 00:20:25,519
<font color="#CCCCCC">hey yeah we found this here this was</font>

499
00:20:23,330 --> 00:20:28,249
submitted by someone and so this<font color="#CCCCCC"> is more</font>

500
00:20:25,519 --> 00:20:30,019
an attackers kind of function where it

501
00:20:28,249 --> 00:20:31,759
lets you know of hey your files<font color="#CCCCCC"> that</font>

502
00:20:30,019 --> 00:20:34,399
you're dropping somewhere are getting

503
00:20:31,759 --> 00:20:36,499
investigated so this again<font color="#E5E5E5"> isn't</font>

504
00:20:34,399 --> 00:20:39,320
uploading your payload it's keeping that

505
00:20:36,499 --> 00:20:41,749
safe it's letting you know as the user

506
00:20:39,320 --> 00:20:43,129
or the offensive operator yeah something

507
00:20:41,749 --> 00:20:44,600
<font color="#CCCCCC">that you're just</font><font color="#E5E5E5"> using that you just</font>

508
00:20:43,129 --> 00:20:45,860
created is being investigated by the

509
00:20:44,600 --> 00:20:47,928
defender and kind<font color="#E5E5E5"> of gives you a heads</font>

510
00:20:45,860 --> 00:20:49,219
<font color="#E5E5E5">up okay maybe I need to change stuff up</font>

511
00:20:47,929 --> 00:20:52,789
maybe I need to<font color="#E5E5E5"> use different payload</font>

512
00:20:49,220 --> 00:20:54,740
vows something like<font color="#CCCCCC"> that we attempt to</font>

513
00:20:52,789 --> 00:20:59,090
bypass<font color="#E5E5E5"> AV through a bunch of different</font>

514
00:20:54,740 --> 00:21:03,289
<font color="#CCCCCC">techniques will have obfuscated code so</font>

515
00:20:59,090 --> 00:21:04,850
we'll let's say we'll just be 64 all the

516
00:21:03,289 --> 00:21:08,179
code that's inside of<font color="#E5E5E5"> it and so at one</font>

517
00:21:04,850 --> 00:21:10,580
time at base64 decode<font color="#E5E5E5"> zit and then is</font>

518
00:21:08,179 --> 00:21:12,799
good so this is<font color="#E5E5E5"> it that's simple like</font>

519
00:21:10,580 --> 00:21:16,249
obfuscation a bypass like a real quick

520
00:21:12,799 --> 00:21:18,470
strings analysis on it will have

521
00:21:16,249 --> 00:21:20,990
encrypted code where we store the key

522
00:21:18,470 --> 00:21:22,909
inside of it at runtime<font color="#CCCCCC"> it's let's say</font>

523
00:21:20,990 --> 00:21:24,889
it's a yes encrypted when you run that

524
00:21:22,909 --> 00:21:27,019
stager because the keys in it it'll

525
00:21:24,889 --> 00:21:29,269
<font color="#E5E5E5">completely decrypt all the code inside</font>

526
00:21:27,019 --> 00:21:30,980
of it and then it will inject the

527
00:21:29,269 --> 00:21:32,480
shellcode into memory and I run it and

528
00:21:30,980 --> 00:21:35,299
you'll be your excuse me you'll<font color="#E5E5E5"> get your</font>

529
00:21:32,480 --> 00:21:37,730
stage the other function that we just<font color="#E5E5E5"> I</font>

530
00:21:35,299 --> 00:21:40,690
just<font color="#E5E5E5"> added in I think last month is has</font>

531
00:21:37,730 --> 00:21:44,389
anyone heard of the tool Hyperion

532
00:21:40,690 --> 00:21:46,399
Hyperion is this awesome a really<font color="#CCCCCC"> cool</font>

533
00:21:44,389 --> 00:21:49,580
tool that is was originally used<font color="#E5E5E5"> a lot</font>

534
00:21:46,399 --> 00:21:53,090
for AV bypass where the way it works is

535
00:21:49,580 --> 00:21:55,639
you feed it an executable<font color="#E5E5E5"> Hyperion then</font>

536
00:21:53,090 --> 00:21:59,259
encrypts that executable with a stub and

537
00:21:55,639 --> 00:22:01,939
uses an artificially constrained key and

538
00:21:59,259 --> 00:22:05,360
once that the<font color="#CCCCCC"> output is this encrypted</font>

539
00:22:01,940 --> 00:22:07,039
file that has no key it's encrypted but

540
00:22:05,360 --> 00:22:09,830
there is no key associated with it and

541
00:22:07,039 --> 00:22:10,370
so the way<font color="#CCCCCC"> that it works is when you run</font>

542
00:22:09,830 --> 00:22:13,340
that

543
00:22:10,370 --> 00:22:16,070
I'll hit brute forces itself and it

544
00:22:13,340 --> 00:22:17,750
tries to<font color="#E5E5E5"> find its own key and once it</font>

545
00:22:16,070 --> 00:22:19,550
finds is key<font color="#E5E5E5"> and it's able</font><font color="#CCCCCC"> to do that</font>

546
00:22:17,750 --> 00:22:22,370
because it's artificially constrained so

547
00:22:19,550 --> 00:22:24,830
it may only have to like brute<font color="#E5E5E5"> forces a</font>

548
00:22:22,370 --> 00:22:27,050
very small chunk of the key and once it

549
00:22:24,830 --> 00:22:29,510
finds it then it decrypts everything and

550
00:22:27,050 --> 00:22:31,550
then runs the original executable so<font color="#E5E5E5"> I</font>

551
00:22:29,510 --> 00:22:34,460
just implemented that in Python for

552
00:22:31,550 --> 00:22:38,330
stagers for Vale where it does the same

553
00:22:34,460 --> 00:22:41,870
<font color="#E5E5E5">exact thing the whole tool and all the</font>

554
00:22:38,330 --> 00:22:43,550
function calls are encrypted and it uses

555
00:22:41,870 --> 00:22:45,620
an artificially key space and so at

556
00:22:43,550 --> 00:22:47,450
runtime you'll see like a spike in CPU

557
00:22:45,620 --> 00:22:50,000
usage real quick because it's trying to

558
00:22:47,450 --> 00:22:52,309
brute force itself and find like what

559
00:22:50,000 --> 00:22:54,440
the actual key is once it finds it

560
00:22:52,309 --> 00:22:57,740
decrypts everything and then injects the

561
00:22:54,440 --> 00:23:00,320
shellcode in memory<font color="#E5E5E5"> so one of the big</font>

562
00:22:57,740 --> 00:23:01,610
<font color="#CCCCCC">things</font><font color="#E5E5E5"> that really helped us again is</font>

563
00:23:00,320 --> 00:23:03,559
kind of like<font color="#E5E5E5"> I was talking about the use</font>

564
00:23:01,610 --> 00:23:06,439
of non-standard languages is that's

565
00:23:03,559 --> 00:23:07,639
exactly what we<font color="#CCCCCC"> did we added support for</font>

566
00:23:06,440 --> 00:23:10,429
a lot<font color="#E5E5E5"> of different functions or</font>

567
00:23:07,640 --> 00:23:15,860
languages such as Python Perl powershell

568
00:23:10,429 --> 00:23:18,050
c-sharp see Ruby and go and simply we

569
00:23:15,860 --> 00:23:20,540
kind of noticed that simply using these

570
00:23:18,050 --> 00:23:22,490
non-standard languages resulted in

571
00:23:20,540 --> 00:23:24,649
payloads that immediately bypassed

572
00:23:22,490 --> 00:23:26,390
antivirus and the reason for that we're

573
00:23:24,650 --> 00:23:29,380
thinking<font color="#CCCCCC"> is because AV just simply</font>

574
00:23:26,390 --> 00:23:32,330
doesn't understand how to inspect

575
00:23:29,380 --> 00:23:34,940
languages that like maybe use

576
00:23:32,330 --> 00:23:36,500
interpreters such as Python and Perl it

577
00:23:34,940 --> 00:23:38,120
just it hasn't<font color="#E5E5E5"> really seen them so it</font>

578
00:23:36,500 --> 00:23:40,250
doesn't know how to properly unpack them

579
00:23:38,120 --> 00:23:43,459
and look the true nature of the code

580
00:23:40,250 --> 00:23:46,730
underneath it and so a quick example is

581
00:23:43,460 --> 00:23:48,260
kind of C flat vs pikkon flat and so to

582
00:23:46,730 --> 00:23:51,050
give a kind of scared these are like

583
00:23:48,260 --> 00:23:53,390
veil terms when I say flat it means<font color="#CCCCCC"> that</font>

584
00:23:51,050 --> 00:23:55,428
there's no encryption no<font color="#E5E5E5"> obligation</font>

585
00:23:53,390 --> 00:23:57,050
whatsoever and it's just literally

586
00:23:55,429 --> 00:24:00,860
function called at the<font color="#E5E5E5"> function call</font>

587
00:23:57,050 --> 00:24:02,928
it's not encrypted in any way so many

588
00:24:00,860 --> 00:24:06,409
<font color="#E5E5E5">the lights go down a little</font><font color="#CCCCCC"> bit here I</font>

589
00:24:02,929 --> 00:24:10,010
apologize for<font color="#CCCCCC"> this dark string this is</font>

590
00:24:06,410 --> 00:24:12,980
the shellcode here this is a<font color="#CCCCCC"> normal kind</font>

591
00:24:10,010 --> 00:24:15,650
of<font color="#CCCCCC"> see</font><font color="#E5E5E5"> function or see your source code</font>

592
00:24:12,980 --> 00:24:17,240
for<font color="#E5E5E5"> C file ah and</font><font color="#CCCCCC"> so right here is the</font>

593
00:24:15,650 --> 00:24:18,770
<font color="#E5E5E5">shellcode that we want to inject and</font>

594
00:24:17,240 --> 00:24:21,080
here's those function calls I was

595
00:24:18,770 --> 00:24:23,779
talking<font color="#CCCCCC"> about earlier virtual Alec</font><font color="#E5E5E5"> RTL</font>

596
00:24:21,080 --> 00:24:25,939
move memory create thread

597
00:24:23,779 --> 00:24:28,369
for single object so this you could

598
00:24:25,940 --> 00:24:31,639
compile right now with any<font color="#E5E5E5"> C compiler</font>

599
00:24:28,369 --> 00:24:33,859
and generate an executable that is going

600
00:24:31,639 --> 00:24:36,830
to inject the shellcode in the memory

601
00:24:33,859 --> 00:24:42,320
run it and you'll<font color="#E5E5E5"> get it'll whatever</font>

602
00:24:36,830 --> 00:24:44,269
does it<font color="#E5E5E5"> will do next this is Python code</font>

603
00:24:42,320 --> 00:24:46,218
and so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a little bit of</font>

604
00:24:44,269 --> 00:24:48,259
obfuscated 'add code where you can see

605
00:24:46,219 --> 00:24:50,389
like some variables are just were

606
00:24:48,259 --> 00:24:52,369
completely randomized by the way this is

607
00:24:50,389 --> 00:24:54,859
<font color="#CCCCCC">the</font><font color="#E5E5E5"> biggest pain in the world</font><font color="#CCCCCC"> to debug</font>

608
00:24:52,369 --> 00:24:57,139
every time I have time writing a new

609
00:24:54,859 --> 00:24:58,309
payload in some language I'm all we're

610
00:24:57,139 --> 00:25:00,859
always trying to add some level of

611
00:24:58,309 --> 00:25:03,589
obfuscation so that it just it's hard<font color="#E5E5E5"> to</font>

612
00:25:00,859 --> 00:25:05,239
read and interpret and every time<font color="#E5E5E5"> I make</font>

613
00:25:03,589 --> 00:25:07,549
the tinies of mistake and the like the

614
00:25:05,239 --> 00:25:09,830
original file i get like junk output

615
00:25:07,549 --> 00:25:11,749
like this but<font color="#CCCCCC"> i have</font><font color="#E5E5E5"> to spend like three</font>

616
00:25:09,830 --> 00:25:14,478
times as long trying to figure out<font color="#E5E5E5"> which</font>

617
00:25:11,749 --> 00:25:16,789
was each variable it's it's a massive

618
00:25:14,479 --> 00:25:18,200
thing<font color="#E5E5E5"> all right but the main point here</font>

619
00:25:16,789 --> 00:25:20,989
what I want to show is like this is a

620
00:25:18,200 --> 00:25:23,479
Python version of that same exact

621
00:25:20,989 --> 00:25:26,659
function as a<font color="#E5E5E5"> c1 where we call in</font>

622
00:25:23,479 --> 00:25:29,359
virtual Alec<font color="#CCCCCC"> rtl move memory create</font>

623
00:25:26,659 --> 00:25:32,239
thread and wait for single object so

624
00:25:29,359 --> 00:25:35,509
it's the<font color="#CCCCCC"> same exact thing this is see</font>

625
00:25:32,239 --> 00:25:38,799
this is why thong we observed is that

626
00:25:35,509 --> 00:25:41,479
see payload that see source code

627
00:25:38,799 --> 00:25:44,359
immediately caught by antivirus right

628
00:25:41,479 --> 00:25:47,049
away however simply changing the

629
00:25:44,359 --> 00:25:49,999
language that it was written into Python

630
00:25:47,049 --> 00:25:52,339
completely bypassed every single AV

631
00:25:49,999 --> 00:25:53,839
signature the first thing that<font color="#E5E5E5"> we did</font>

632
00:25:52,339 --> 00:25:56,749
when we release the Veil the main thing

633
00:25:53,839 --> 00:25:58,399
was like python-based pelas and no AV

634
00:25:56,749 --> 00:26:01,339
saw that so these are the<font color="#E5E5E5"> same exact</font>

635
00:25:58,399 --> 00:26:03,199
function calls where we use that and

636
00:26:01,339 --> 00:26:06,678
also an everything said it was clean

637
00:26:03,200 --> 00:26:11,029
there was not a single AV detection for

638
00:26:06,679 --> 00:26:13,759
any single one of them<font color="#E5E5E5"> all right so</font>

639
00:26:11,029 --> 00:26:15,710
we'll talk<font color="#CCCCCC"> real quick about this AV</font>

640
00:26:13,759 --> 00:26:20,899
signature that<font color="#E5E5E5"> we had developed for us</font>

641
00:26:15,710 --> 00:26:23,749
in unveil probably about right<font color="#CCCCCC"> about the</font>

642
00:26:20,899 --> 00:26:26,268
one year mark after our first that veil

643
00:26:23,749 --> 00:26:29,149
was released someone homeless on IRC

644
00:26:26,269 --> 00:26:31,759
like<font color="#E5E5E5"> hey I think you guys got a a V</font>

645
00:26:29,149 --> 00:26:33,168
signature created are like no that

646
00:26:31,759 --> 00:26:34,429
didn't<font color="#E5E5E5"> happen yeah I mean it's been a</font>

647
00:26:33,169 --> 00:26:36,289
year I'll kind of<font color="#E5E5E5"> a thought of it</font>

648
00:26:34,429 --> 00:26:37,789
earlier but we didn't<font color="#E5E5E5"> think it happened</font>

649
00:26:36,289 --> 00:26:42,440
and he's like hey<font color="#E5E5E5"> I check out</font>

650
00:26:37,789 --> 00:26:44,929
link and so sure enough mcafee center at

651
00:26:42,440 --> 00:26:47,809
<font color="#CCCCCC">McAfee how you pronounce it since has</font>

652
00:26:44,929 --> 00:26:50,960
this page out that they were detecting

653
00:26:47,809 --> 00:26:54,710
veil is this<font color="#E5E5E5"> Trojan and they were</font><font color="#CCCCCC"> able</font>

654
00:26:50,960 --> 00:26:56,840
<font color="#CCCCCC">to catch it as it runs and I tested it</font>

655
00:26:54,710 --> 00:26:58,909
out<font color="#CCCCCC"> knows legit right when we had it</font>

656
00:26:56,840 --> 00:27:02,899
this the payloads that we had at that

657
00:26:58,909 --> 00:27:04,609
time<font color="#E5E5E5"> Python only we're being hot so</font>

658
00:27:02,899 --> 00:27:06,949
we're like okay I<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to take a look at</font>

659
00:27:04,609 --> 00:27:09,889
this we made me the lights to go down

660
00:27:06,950 --> 00:27:11,929
again real quick so this<font color="#E5E5E5"> is what the</font>

661
00:27:09,889 --> 00:27:14,959
payloads will look like at the time

662
00:27:11,929 --> 00:27:18,529
again where is this seat when you see

663
00:27:14,960 --> 00:27:20,080
types which<font color="#CCCCCC"> is the library to inject</font>

664
00:27:18,529 --> 00:27:23,119
shall interact with the windows api

665
00:27:20,080 --> 00:27:25,340
here's our function calls and so forth

666
00:27:23,119 --> 00:27:26,988
but this is what it looks like so if

667
00:27:25,340 --> 00:27:28,849
anyone had to make a wild guess like

668
00:27:26,989 --> 00:27:30,470
anyone have any idea what they may

669
00:27:28,849 --> 00:27:35,509
change here did they<font color="#CCCCCC"> see any crazy</font>

670
00:27:30,470 --> 00:27:38,779
constant anything like that all right

671
00:27:35,509 --> 00:27:41,029
also the first thing that<font color="#CCCCCC"> I saw and I</font>

672
00:27:38,779 --> 00:27:42,440
like I like to kind of do the fog like

673
00:27:41,029 --> 00:27:44,929
keep it simple<font color="#CCCCCC"> stupid like let's start</font>

674
00:27:42,440 --> 00:27:46,580
with the easy stuff let's see if there's

675
00:27:44,929 --> 00:27:48,559
something simple and tiny that<font color="#CCCCCC"> i can</font>

676
00:27:46,580 --> 00:27:53,658
change real quick that would somehow

677
00:27:48,559 --> 00:27:55,970
change how it's being detected oh that's

678
00:27:53,659 --> 00:27:58,220
not showing up really well so what<font color="#E5E5E5"> i</font>

679
00:27:55,970 --> 00:28:00,499
have<font color="#E5E5E5"> here this is what i thaw is see</font>

680
00:27:58,220 --> 00:28:03,649
<font color="#E5E5E5">types is there's that this is that</font>

681
00:28:00,499 --> 00:28:06,200
library that<font color="#CCCCCC"> is being used</font><font color="#E5E5E5"> to work with</font>

682
00:28:03,649 --> 00:28:08,149
the windows api and see price's

683
00:28:06,200 --> 00:28:11,269
everywhere<font color="#CCCCCC"> i have c types right here</font>

684
00:28:08,149 --> 00:28:12,949
<font color="#CCCCCC">c-type here here here here all these</font>

685
00:28:11,269 --> 00:28:16,190
little black arrows which are supposed

686
00:28:12,950 --> 00:28:19,309
to be red that's that's what<font color="#CCCCCC"> RC</font><font color="#E5E5E5"> types is</font>

687
00:28:16,190 --> 00:28:21,979
in the file so it's all over the<font color="#E5E5E5"> place</font>

688
00:28:19,309 --> 00:28:24,289
sounds like well we have<font color="#CCCCCC"> this string</font>

689
00:28:21,979 --> 00:28:25,820
that's included in this program all over

690
00:28:24,289 --> 00:28:28,879
they could be doing<font color="#E5E5E5"> some simple</font>

691
00:28:25,820 --> 00:28:30,918
detection like on the string maybe the

692
00:28:28,879 --> 00:28:32,570
same<font color="#E5E5E5"> amount of times that it's there if</font>

693
00:28:30,919 --> 00:28:35,720
it's there that many so many times

694
00:28:32,570 --> 00:28:40,570
assume it's available a load and by her

695
00:28:35,720 --> 00:28:43,009
signature so this is<font color="#E5E5E5"> kind of what a veil</font>

696
00:28:40,570 --> 00:28:45,439
payload like the<font color="#CCCCCC"> Python code in the</font>

697
00:28:43,009 --> 00:28:46,999
framework looks like and so this<font color="#CCCCCC"> is</font>

698
00:28:45,440 --> 00:28:49,129
again that virtual<font color="#E5E5E5"> a like right there</font>

699
00:28:46,999 --> 00:28:50,149
move memory blah blah this is what it

700
00:28:49,129 --> 00:28:51,620
looks like when we're developing a

701
00:28:50,149 --> 00:28:54,320
module for it this is

702
00:28:51,620 --> 00:28:56,059
our code and so right up<font color="#E5E5E5"> here this is</font>

703
00:28:54,320 --> 00:28:57,830
<font color="#E5E5E5">specific to that one so hey if you're</font>

704
00:28:56,059 --> 00:29:01,940
using virtual Alec with what we were and

705
00:28:57,830 --> 00:29:04,040
a Python payload to inject shell code is

706
00:29:01,940 --> 00:29:05,960
what we saw so it's like<font color="#E5E5E5"> all</font><font color="#CCCCCC"> right let's</font>

707
00:29:04,040 --> 00:29:07,670
change this<font color="#CCCCCC"> see types up has anyone</font>

708
00:29:05,960 --> 00:29:10,490
developed in<font color="#E5E5E5"> Python they're done in</font><font color="#CCCCCC"> your</font>

709
00:29:07,670 --> 00:29:13,250
Python development for cool so you guys

710
00:29:10,490 --> 00:29:16,580
might like this let's change something

711
00:29:13,250 --> 00:29:19,700
real quick so what you're seeing here is

712
00:29:16,580 --> 00:29:22,070
<font color="#E5E5E5">basically the diff in my code is I'm</font>

713
00:29:19,700 --> 00:29:24,559
<font color="#E5E5E5">just changing this</font><font color="#CCCCCC"> is what the red is</font>

714
00:29:22,070 --> 00:29:26,559
what it was was will it be red and the

715
00:29:24,559 --> 00:29:28,910
green is what I changed it to and so

716
00:29:26,559 --> 00:29:31,610
python has this awesome thing called

717
00:29:28,910 --> 00:29:34,340
aliases where you can instead of

718
00:29:31,610 --> 00:29:35,990
importing<font color="#E5E5E5"> see types and have to use the</font>

719
00:29:34,340 --> 00:29:39,320
library name ctypes throughout the

720
00:29:35,990 --> 00:29:42,800
entire code<font color="#CCCCCC"> I can import see</font><font color="#E5E5E5"> types as in</font>

721
00:29:39,320 --> 00:29:45,320
this case AV LOL i can change it to

722
00:29:42,800 --> 00:29:47,809
whatever I want it to be and<font color="#CCCCCC"> Russian</font>

723
00:29:45,320 --> 00:29:50,570
staff throughout the code and so this<font color="#E5E5E5"> is</font>

724
00:29:47,809 --> 00:29:55,100
now after that change what it looked

725
00:29:50,570 --> 00:29:57,649
like so here's a V LOL atl 00 so forth I

726
00:29:55,100 --> 00:30:00,040
it's all over the<font color="#E5E5E5"> place now like let's</font>

727
00:29:57,650 --> 00:30:03,230
just<font color="#E5E5E5"> see one thing like what happens and</font>

728
00:30:00,040 --> 00:30:06,500
what<font color="#E5E5E5"> do</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know simply making that</font>

729
00:30:03,230 --> 00:30:09,440
tiniest of changes completely bypassed

730
00:30:06,500 --> 00:30:12,260
<font color="#CCCCCC">mcafee's or mcafee signature this</font>

731
00:30:09,440 --> 00:30:13,610
probably<font color="#E5E5E5"> took about 30 minutes maybe to</font>

732
00:30:12,260 --> 00:30:17,330
figure out<font color="#E5E5E5"> because I was expecting to</font>

733
00:30:13,610 --> 00:30:19,790
like have<font color="#CCCCCC"> to do a lot</font><font color="#E5E5E5"> of work and it it</font>

734
00:30:17,330 --> 00:30:23,110
<font color="#CCCCCC">obviously was not all that bad to</font><font color="#E5E5E5"> do so</font>

735
00:30:19,790 --> 00:30:25,370
uh the point kind of here being is

736
00:30:23,110 --> 00:30:28,010
static signatures really aren't the

737
00:30:25,370 --> 00:30:30,620
greatest way to go about catching

738
00:30:28,010 --> 00:30:32,750
different voices files behavioral

739
00:30:30,620 --> 00:30:35,178
analysis heuristics and a heuristic

740
00:30:32,750 --> 00:30:36,770
analysis I think it's a lot better

741
00:30:35,179 --> 00:30:39,380
because then you're actually looking at

742
00:30:36,770 --> 00:30:41,980
the<font color="#E5E5E5"> behavior of the program itself when</font>

743
00:30:39,380 --> 00:30:44,210
you do something<font color="#E5E5E5"> like static signatures</font>

744
00:30:41,980 --> 00:30:45,890
something like<font color="#CCCCCC"> this will completely</font>

745
00:30:44,210 --> 00:30:48,710
bypass it because you're<font color="#E5E5E5"> just changing</font>

746
00:30:45,890 --> 00:30:50,540
what what was being used to catch it and

747
00:30:48,710 --> 00:30:52,400
by the<font color="#E5E5E5"> way that's all that veil was</font>

748
00:30:50,540 --> 00:30:54,139
actually designed to really combat and

749
00:30:52,400 --> 00:30:57,020
like fight against<font color="#E5E5E5"> is the signature</font>

750
00:30:54,140 --> 00:30:59,540
based payload we<font color="#E5E5E5"> don't claim to do</font>

751
00:30:57,020 --> 00:31:01,129
behavioral based cell now there's a lot

752
00:30:59,540 --> 00:31:04,730
of<font color="#CCCCCC"> different ways that we can change up</font>

753
00:31:01,130 --> 00:31:05,090
the order<font color="#CCCCCC"> of these function calls what</font>

754
00:31:04,730 --> 00:31:08,210
would you

755
00:31:05,090 --> 00:31:12,889
or<font color="#E5E5E5"> simply use different ones but we</font>

756
00:31:08,210 --> 00:31:14,390
haven't needed to yet<font color="#E5E5E5"> unfortunately</font><font color="#CCCCCC"> all</font>

757
00:31:12,890 --> 00:31:16,880
<font color="#E5E5E5">right so I kind of want to end their go</font>

758
00:31:14,390 --> 00:31:19,760
through a little bit<font color="#CCCCCC"> of</font><font color="#E5E5E5"> talking about</font>

759
00:31:16,880 --> 00:31:22,760
some custom code and so this is<font color="#E5E5E5"> going to</font>

760
00:31:19,760 --> 00:31:25,940
<font color="#E5E5E5">be custom code is the main way to bypass</font>

761
00:31:22,760 --> 00:31:27,710
antivirus like it's anything that<font color="#CCCCCC"> like</font>

762
00:31:25,940 --> 00:31:29,270
veil evasion still like people are

763
00:31:27,710 --> 00:31:31,160
trying to signature in<font color="#E5E5E5"> some place</font>

764
00:31:29,270 --> 00:31:35,530
certain payloads are like I said like<font color="#E5E5E5"> C</font>

765
00:31:31,160 --> 00:31:38,090
C++ C sharp they they're very hard to

766
00:31:35,530 --> 00:31:40,220
it's a<font color="#E5E5E5"> little bit harder to bypass with</font>

767
00:31:38,090 --> 00:31:43,070
those because there is such so easy to

768
00:31:40,220 --> 00:31:44,990
inspect them and AV companies I've done

769
00:31:43,070 --> 00:31:47,510
a fairly decent jobs to ensuring them

770
00:31:44,990 --> 00:31:50,510
but other languages may get a lot easier

771
00:31:47,510 --> 00:31:52,730
to just bypass so the<font color="#E5E5E5"> answer is writing</font>

772
00:31:50,510 --> 00:31:54,410
your own program if you can do that

773
00:31:52,730 --> 00:31:56,870
<font color="#E5E5E5">there's no signature for it because you</font>

774
00:31:54,410 --> 00:31:58,730
literally just create it and so having

775
00:31:56,870 --> 00:32:00,889
custom code will kind of allow you to

776
00:31:58,730 --> 00:32:05,210
bypass whatever AV that you're targeting

777
00:32:00,890 --> 00:32:06,710
that's so this is a scenario<font color="#E5E5E5"> that we</font>

778
00:32:05,210 --> 00:32:09,620
encounter so I do a<font color="#E5E5E5"> lot of red teaming</font>

779
00:32:06,710 --> 00:32:11,350
and a lot of the time we have to fish

780
00:32:09,620 --> 00:32:13,790
our way into an environment and

781
00:32:11,350 --> 00:32:17,449
basically our kickoff call will be like

782
00:32:13,790 --> 00:32:19,730
<font color="#E5E5E5">hello on the from our customers</font><font color="#CCCCCC"> and be</font>

783
00:32:17,450 --> 00:32:21,440
like I'm your point<font color="#E5E5E5"> of</font><font color="#CCCCCC"> contact so I'm</font>

784
00:32:19,730 --> 00:32:24,050
here to validate that you are authorized

785
00:32:21,440 --> 00:32:25,850
to perform this test we don't<font color="#E5E5E5"> want to</font>

786
00:32:24,050 --> 00:32:27,560
give<font color="#CCCCCC"> you any information we don't want</font>

787
00:32:25,850 --> 00:32:30,409
to basically tell you anything just go

788
00:32:27,560 --> 00:32:32,570
and so at that<font color="#CCCCCC"> point we basically have</font>

789
00:32:30,410 --> 00:32:34,070
to stand<font color="#E5E5E5"> up like our external see to</font>

790
00:32:32,570 --> 00:32:37,820
infrastructure somewhere in the cloud

791
00:32:34,070 --> 00:32:40,689
and<font color="#E5E5E5"> we'll try to have to get our initial</font>

792
00:32:37,820 --> 00:32:43,790
access and quality nine times out of ten

793
00:32:40,690 --> 00:32:45,440
probably more so than that in order to

794
00:32:43,790 --> 00:32:48,290
get that<font color="#E5E5E5"> initial ask</font><font color="#CCCCCC"> will fish our way</font>

795
00:32:45,440 --> 00:32:49,880
into<font color="#CCCCCC"> environment and so there's a couple</font>

796
00:32:48,290 --> 00:32:51,860
<font color="#E5E5E5">different ways</font><font color="#CCCCCC"> that we can do it this</font>

797
00:32:49,880 --> 00:32:53,840
isn't always our first one but this<font color="#E5E5E5"> is</font>

798
00:32:51,860 --> 00:32:55,669
one that's worked pretty successfully it

799
00:32:53,840 --> 00:32:59,000
is where we have the scenario like a

800
00:32:55,670 --> 00:33:01,610
browser checking scenario and so will in

801
00:32:59,000 --> 00:33:03,770
this<font color="#E5E5E5"> case commonly try to spoof maybe</font>

802
00:33:01,610 --> 00:33:06,169
the IT department or the IT security

803
00:33:03,770 --> 00:33:10,400
department of whatever company that

804
00:33:06,170 --> 00:33:12,110
we're going to guess and and the way

805
00:33:10,400 --> 00:33:13,400
<font color="#CCCCCC">we'll kind</font><font color="#E5E5E5"> of word the email is like</font>

806
00:33:12,110 --> 00:33:15,560
we'll talk to them about hey there's a

807
00:33:13,400 --> 00:33:17,570
lot of like attackers that are out there

808
00:33:15,560 --> 00:33:18,800
right<font color="#E5E5E5"> now they're using targeting</font>

809
00:33:17,570 --> 00:33:20,600
browsers and

810
00:33:18,800 --> 00:33:24,350
miss configurations and old versions of

811
00:33:20,600 --> 00:33:25,520
it to try<font color="#E5E5E5"> to hack your system we need</font>

812
00:33:24,350 --> 00:33:26,870
you guys to make sure that you're

813
00:33:25,520 --> 00:33:28,760
<font color="#E5E5E5">running like have the most secure</font>

814
00:33:26,870 --> 00:33:31,699
configuration<font color="#E5E5E5"> ask for our company</font>

815
00:33:28,760 --> 00:33:34,730
guidelines and that you have<font color="#E5E5E5"> the latest</font>

816
00:33:31,700 --> 00:33:36,800
<font color="#CCCCCC">up-to-date version</font><font color="#E5E5E5"> and so will send an</font>

817
00:33:34,730 --> 00:33:39,680
email out basically pretending to be

818
00:33:36,800 --> 00:33:42,139
this comforter security team and say we

819
00:33:39,680 --> 00:33:44,870
got<font color="#CCCCCC"> this all-in-one tool that'll do it</font>

820
00:33:42,140 --> 00:33:47,120
<font color="#CCCCCC">for you and so we have this idea of</font>

821
00:33:44,870 --> 00:33:49,610
basically making this browsing browser

822
00:33:47,120 --> 00:33:52,610
checker program and is written by a

823
00:33:49,610 --> 00:33:56,389
co-worker of mine Hunter Hardman and it

824
00:33:52,610 --> 00:33:59,300
works great where it completely bypasses

825
00:33:56,390 --> 00:34:01,460
AV because no one's ever seen before and

826
00:33:59,300 --> 00:34:04,120
so this<font color="#CCCCCC"> is actually the first</font><font color="#E5E5E5"> time he</font>

827
00:34:01,460 --> 00:34:07,370
released it I think like<font color="#E5E5E5"> a week ago</font>

828
00:34:04,120 --> 00:34:09,469
simply<font color="#E5E5E5"> for the stall so it's easy to</font><font color="#CCCCCC"> use</font>

829
00:34:07,370 --> 00:34:11,330
and it's cool<font color="#CCCCCC"> to check out where this is</font>

830
00:34:09,469 --> 00:34:13,279
<font color="#E5E5E5">kind of a picture of it and so it's</font>

831
00:34:11,330 --> 00:34:15,679
written in C sharp and what will

832
00:34:13,280 --> 00:34:17,720
normally do is let's say let's say we're

833
00:34:15,679 --> 00:34:20,330
targeting steel cock we would put fuel

834
00:34:17,719 --> 00:34:21,799
cons will go right here in just like

835
00:34:20,330 --> 00:34:24,110
include that right there so it's right

836
00:34:21,800 --> 00:34:26,120
in the thought and the program<font color="#CCCCCC"> that</font>

837
00:34:24,110 --> 00:34:28,580
blows<font color="#CCCCCC"> up it's trying to build trust in</font>

838
00:34:26,120 --> 00:34:30,679
the user that's actually running this

839
00:34:28,580 --> 00:34:32,929
and so what will happen is this will be

840
00:34:30,679 --> 00:34:34,790
<font color="#CCCCCC">just a blank black bar and this will say</font>

841
00:34:32,929 --> 00:34:36,889
start browser checker run browser check

842
00:34:34,790 --> 00:34:39,350
in<font color="#E5E5E5"> this case and right when they run</font>

843
00:34:36,889 --> 00:34:41,000
this people see the bar going across so

844
00:34:39,350 --> 00:34:43,100
they're<font color="#CCCCCC"> really happy that is starting to</font>

845
00:34:41,000 --> 00:34:45,980
secure their system and at the end<font color="#CCCCCC"> it'll</font>

846
00:34:43,100 --> 00:34:48,350
<font color="#E5E5E5">say its past and what's happening in the</font>

847
00:34:45,980 --> 00:34:50,510
background is<font color="#E5E5E5"> also yeah this was kind of</font>

848
00:34:48,350 --> 00:34:54,139
talking<font color="#E5E5E5"> about what's happening in the</font>

849
00:34:50,510 --> 00:34:56,600
background is that<font color="#E5E5E5"> is running powershell</font>

850
00:34:54,139 --> 00:34:58,520
and so it's creating a new process that

851
00:34:56,600 --> 00:35:00,049
is<font color="#E5E5E5"> running power cell and running</font>

852
00:34:58,520 --> 00:35:02,000
whatever code that you tell it<font color="#E5E5E5"> to you</font>

853
00:35:00,050 --> 00:35:04,970
and so in this case we typically use

854
00:35:02,000 --> 00:35:07,850
that<font color="#CCCCCC"> to we use cobalt strike a lot</font><font color="#E5E5E5"> I'm a</font>

855
00:35:04,970 --> 00:35:11,209
big<font color="#E5E5E5"> fan of that and we're using that to</font>

856
00:35:07,850 --> 00:35:14,450
get a beacon on our users<font color="#E5E5E5"> or victim</font>

857
00:35:11,210 --> 00:35:16,310
systems and so they'll see again they

858
00:35:14,450 --> 00:35:17,810
see this bar go all the way cough they

859
00:35:16,310 --> 00:35:20,330
think their system is fine that's<font color="#CCCCCC"> passed</font>

860
00:35:17,810 --> 00:35:23,060
and<font color="#E5E5E5"> that you don't</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> anything else</font>

861
00:35:20,330 --> 00:35:24,799
<font color="#E5E5E5">about it and in the meantime we we've</font>

862
00:35:23,060 --> 00:35:26,120
got a<font color="#E5E5E5"> beacon on my system and that's our</font>

863
00:35:24,800 --> 00:35:29,840
initial foothold and how are moving

864
00:35:26,120 --> 00:35:31,850
<font color="#E5E5E5">around rough stats on using these sort</font>

865
00:35:29,840 --> 00:35:34,340
of things is

866
00:35:31,850 --> 00:35:37,220
a good amount is maybe thirty percent

867
00:35:34,340 --> 00:35:39,140
maybe more<font color="#E5E5E5"> but the problem</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

868
00:35:37,220 --> 00:35:41,240
next<font color="#CCCCCC"> cue tible so people are a</font><font color="#E5E5E5"> little</font>

869
00:35:39,140 --> 00:35:42,920
bit more wary about running executable

870
00:35:41,240 --> 00:35:45,680
with<font color="#E5E5E5"> some within an email with</font>

871
00:35:42,920 --> 00:35:47,750
downloading it from somewhere the main

872
00:35:45,680 --> 00:35:49,040
thing to<font color="#E5E5E5"> note is that delivery of this</font>

873
00:35:47,750 --> 00:35:51,170
is kind of dependent upon the situation

874
00:35:49,040 --> 00:35:53,779
<font color="#E5E5E5">we've done it a couple different ways to</font>

875
00:35:51,170 --> 00:35:56,330
<font color="#E5E5E5">try</font><font color="#CCCCCC"> and entice users to run this and</font>

876
00:35:53,780 --> 00:36:00,050
download the file will create a fake

877
00:35:56,330 --> 00:36:01,940
website<font color="#CCCCCC"> hope that's on over HTTPS and</font>

878
00:36:00,050 --> 00:36:04,550
<font color="#CCCCCC">the user will go to it you'll see the</font>

879
00:36:01,940 --> 00:36:06,860
HTTPS the thing is secure and don't

880
00:36:04,550 --> 00:36:08,810
download it that way we've created fake

881
00:36:06,860 --> 00:36:12,350
secure file transfer website which is

882
00:36:08,810 --> 00:36:14,750
<font color="#CCCCCC">the same concept but rarely will send</font>

883
00:36:12,350 --> 00:36:17,029
just executable unfortunately we've done

884
00:36:14,750 --> 00:36:21,530
that before and it'll still work and

885
00:36:17,030 --> 00:36:23,900
people<font color="#E5E5E5"> still download it so this program</font>

886
00:36:21,530 --> 00:36:26,330
is actually<font color="#CCCCCC"> available right here on his</font>

887
00:36:23,900 --> 00:36:29,810
github page so if anyone wants<font color="#CCCCCC"> to use it</font>

888
00:36:26,330 --> 00:36:32,540
<font color="#E5E5E5">it's a cool nifty idea for custom code</font>

889
00:36:29,810 --> 00:36:35,090
that you can take and you can modify it

890
00:36:32,540 --> 00:36:37,130
further to whatever it is that fits your

891
00:36:35,090 --> 00:36:40,130
needs and it'll let you it works really

892
00:36:37,130 --> 00:36:43,180
<font color="#E5E5E5">well so I highly recommend it because</font>

893
00:36:40,130 --> 00:36:47,180
we've had pretty good success with it

894
00:36:43,180 --> 00:36:50,930
alright so the next tool is co is weird

895
00:36:47,180 --> 00:36:53,240
name called a numerator where we're<font color="#E5E5E5"> on</font>

896
00:36:50,930 --> 00:36:55,879
this assessment and this customer didn't

897
00:36:53,240 --> 00:36:58,189
want us to<font color="#E5E5E5"> run any sort of shell code</font>

898
00:36:55,880 --> 00:37:00,620
injection tool they<font color="#E5E5E5"> didn't want us to</font>

899
00:36:58,190 --> 00:37:02,360
<font color="#E5E5E5">get an actual vegan or any meterpreter</font>

900
00:37:00,620 --> 00:37:05,540
session so<font color="#E5E5E5"> we were in secretly like ah</font>

901
00:37:02,360 --> 00:37:08,480
like we really<font color="#CCCCCC"> wanted</font><font color="#E5E5E5"> to be able to hack</font>

902
00:37:05,540 --> 00:37:10,070
this as any other systems but what may

903
00:37:08,480 --> 00:37:11,690
be kind of<font color="#E5E5E5"> fund was they said well we</font>

904
00:37:10,070 --> 00:37:13,400
don't<font color="#E5E5E5"> want you to do that but we want to</font>

905
00:37:11,690 --> 00:37:15,650
collect stats from it we want it like

906
00:37:13,400 --> 00:37:16,880
everyone<font color="#CCCCCC"> wants that we want</font><font color="#E5E5E5"> to see what</font>

907
00:37:15,650 --> 00:37:19,460
sort<font color="#E5E5E5"> of intelligence you can gather from</font>

908
00:37:16,880 --> 00:37:20,990
systems rather than<font color="#E5E5E5"> just simply hacking</font>

909
00:37:19,460 --> 00:37:22,550
them because we already know people are

910
00:37:20,990 --> 00:37:25,009
going to get fish we want to see what

911
00:37:22,550 --> 00:37:28,520
<font color="#E5E5E5">kind of infinite we can you can gather</font>

912
00:37:25,010 --> 00:37:31,340
so we did it<font color="#CCCCCC"> when we had this problem is</font>

913
00:37:28,520 --> 00:37:33,350
<font color="#E5E5E5">I started creating a quick Python script</font>

914
00:37:31,340 --> 00:37:36,320
that kind of gathers a lot of different

915
00:37:33,350 --> 00:37:39,620
<font color="#CCCCCC">formation and so what it was supposed</font><font color="#E5E5E5"> to</font>

916
00:37:36,320 --> 00:37:41,030
do is once it was<font color="#CCCCCC"> downloaded and ran it</font>

917
00:37:39,620 --> 00:37:43,339
would gather all the system information

918
00:37:41,030 --> 00:37:45,349
and then it would post that data back

919
00:37:43,340 --> 00:37:47,690
out through a system proxy or

920
00:37:45,349 --> 00:37:49,130
or proxy if there's one there and it

921
00:37:47,690 --> 00:37:51,920
would send it back to<font color="#CCCCCC"> a server that we</font>

922
00:37:49,130 --> 00:37:53,900
can call so some of the information that

923
00:37:51,920 --> 00:37:56,450
they were wanted and that we kind<font color="#E5E5E5"> of got</font>

924
00:37:53,900 --> 00:37:59,299
added into this was stuff like<font color="#E5E5E5"> the</font>

925
00:37:56,450 --> 00:38:02,379
system hostname the IP addresses if

926
00:37:59,299 --> 00:38:04,940
there's any on multiple on the custom

927
00:38:02,380 --> 00:38:07,039
system drive on the amount of drive

928
00:38:04,940 --> 00:38:09,170
space on it the current user<font color="#E5E5E5"> that's</font>

929
00:38:07,039 --> 00:38:10,729
running ads and the task<font color="#E5E5E5"> was we through</font>

930
00:38:09,170 --> 00:38:12,619
this would be a fairly decent amount<font color="#E5E5E5"> of</font>

931
00:38:10,729 --> 00:38:14,359
information that the customer could use

932
00:38:12,619 --> 00:38:15,440
just to<font color="#E5E5E5"> give kind of like a picture of</font>

933
00:38:14,359 --> 00:38:17,569
these<font color="#E5E5E5"> are the type of people that are</font>

934
00:38:15,440 --> 00:38:19,999
paying are running your payloads that

935
00:38:17,569 --> 00:38:21,470
may be susceptible to fishing and this

936
00:38:19,999 --> 00:38:22,970
is the amount of like access or

937
00:38:21,470 --> 00:38:27,049
information that attacker could have

938
00:38:22,970 --> 00:38:28,788
just right off the bat<font color="#E5E5E5"> and so this looks</font>

939
00:38:27,049 --> 00:38:30,650
like this is just<font color="#CCCCCC"> a Python script in</font>

940
00:38:28,789 --> 00:38:34,549
this case but you can<font color="#CCCCCC"> easily convert</font>

941
00:38:30,650 --> 00:38:36,619
this to a standalone executable and it

942
00:38:34,549 --> 00:38:39,440
just looks<font color="#E5E5E5"> like any normal windows</font>

943
00:38:36,619 --> 00:38:41,630
program oh and running from the server

944
00:38:39,440 --> 00:38:44,479
side this<font color="#CCCCCC"> is basically it's a</font>

945
00:38:41,630 --> 00:38:47,720
specialized it's a modified Python

946
00:38:44,479 --> 00:38:51,589
version of like the base HTTP handler I

947
00:38:47,720 --> 00:38:53,779
think it is module<font color="#E5E5E5"> where basically this</font>

948
00:38:51,589 --> 00:38:56,058
is only listening for post request to

949
00:38:53,779 --> 00:38:58,729
this specific URI if something like that

950
00:38:56,059 --> 00:39:00,650
comes in to this uri and as opposed it's

951
00:38:58,729 --> 00:39:03,739
not<font color="#E5E5E5"> a get it's not anything else it will</font>

952
00:39:00,650 --> 00:39:06,380
then save the file and you'll get<font color="#E5E5E5"> the</font>

953
00:39:03,739 --> 00:39:09,229
data and so this<font color="#E5E5E5"> is the kind of stuff</font>

954
00:39:06,380 --> 00:39:11,630
that is gathered where we have up<font color="#CCCCCC"> here</font>

955
00:39:09,229 --> 00:39:13,368
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the system hostname in this case</font>

956
00:39:11,630 --> 00:39:16,759
it's just my vm that<font color="#E5E5E5"> i was testing it on</font>

957
00:39:13,369 --> 00:39:18,619
in<font color="#E5E5E5"> the face we have IP address we have</font>

958
00:39:16,759 --> 00:39:21,289
the drive that are available on the

959
00:39:18,619 --> 00:39:22,999
system we have my current<font color="#E5E5E5"> username the</font>

960
00:39:21,289 --> 00:39:24,259
processes<font color="#CCCCCC"> that are currently running and</font>

961
00:39:22,999 --> 00:39:27,140
there's some additional data there

962
00:39:24,259 --> 00:39:28,789
elsewhere and<font color="#E5E5E5"> i'm going to post the link</font>

963
00:39:27,140 --> 00:39:31,069
<font color="#CCCCCC">to this shortly</font><font color="#E5E5E5"> but this is all so</font>

964
00:39:28,789 --> 00:39:33,609
unreal as it's not my slides but this is

965
00:39:31,069 --> 00:39:35,839
available<font color="#E5E5E5"> online and free to use in case</font>

966
00:39:33,609 --> 00:39:39,319
anyone has scenarios where they need to

967
00:39:35,839 --> 00:39:40,969
do something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this but the cool</font>

968
00:39:39,319 --> 00:39:42,469
thing about<font color="#E5E5E5"> it obviously is bypassing ad</font>

969
00:39:40,969 --> 00:39:44,809
like there's no signature for something

970
00:39:42,469 --> 00:39:46,519
like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> even though it's</font><font color="#CCCCCC"> not a hundred</font>

971
00:39:44,809 --> 00:39:48,739
percent malicious where you're getting a

972
00:39:46,519 --> 00:39:50,180
complete<font color="#E5E5E5"> system compromised it's more</font>

973
00:39:48,739 --> 00:39:52,299
<font color="#CCCCCC">like that intelligence gathering maybe</font>

974
00:39:50,180 --> 00:39:57,098
the initial phase of something and

975
00:39:52,299 --> 00:39:57,099
anyone can use this and repurpose it

976
00:39:57,650 --> 00:40:01,010
so the last thing I kind<font color="#E5E5E5"> of want to talk</font>

977
00:39:59,029 --> 00:40:02,660
about<font color="#E5E5E5"> something haven't talked about yet</font>

978
00:40:01,010 --> 00:40:07,579
really is something's called blew me off

979
00:40:02,660 --> 00:40:09,770
sir w my offs it's because<font color="#CCCCCC"> the kind</font><font color="#E5E5E5"> of</font>

980
00:40:07,579 --> 00:40:11,779
purpose that of developing this when i

981
00:40:09,770 --> 00:40:13,640
first<font color="#CCCCCC"> started was there's not a lot of</font>

982
00:40:11,779 --> 00:40:15,410
time there's not<font color="#E5E5E5"> a lot of reason</font><font color="#CCCCCC"> to</font>

983
00:40:13,640 --> 00:40:17,569
develop a lot of or spend a lot of

984
00:40:15,410 --> 00:40:20,089
engineering time and developing a<font color="#CCCCCC"> lat</font>

985
00:40:17,569 --> 00:40:22,880
and building some sort of peace some

986
00:40:20,089 --> 00:40:24,619
piece of malware when we can wouldn't

987
00:40:22,880 --> 00:40:27,410
make<font color="#CCCCCC"> it burn like it's unfortunate but</font>

988
00:40:24,619 --> 00:40:29,750
it happens so why<font color="#E5E5E5"> not just leverage some</font>

989
00:40:27,410 --> 00:40:31,368
built-in functionality and really the

990
00:40:29,750 --> 00:40:33,559
good perspective that<font color="#CCCCCC"> we take and pretty</font>

991
00:40:31,369 --> 00:40:36,619
<font color="#E5E5E5">much any red team or pen tester will</font>

992
00:40:33,559 --> 00:40:39,230
take is any sort<font color="#E5E5E5"> of administration like</font>

993
00:40:36,619 --> 00:40:41,539
service or capability that can be used

994
00:40:39,230 --> 00:40:43,819
by administrators to admin a system or

995
00:40:41,539 --> 00:40:46,279
server or whatever can be<font color="#E5E5E5"> repurposed by</font>

996
00:40:43,819 --> 00:40:48,349
hackers so let's<font color="#E5E5E5"> just live off the land</font>

997
00:40:46,279 --> 00:40:50,140
let's use built-in functionality<font color="#CCCCCC"> to</font>

998
00:40:48,349 --> 00:40:55,039
windows and try to write something that

999
00:40:50,140 --> 00:40:57,859
we can<font color="#CCCCCC"> use the top</font><font color="#E5E5E5"> of my systems so</font><font color="#CCCCCC"> here</font>

1000
00:40:55,039 --> 00:41:00,230
use w my<font color="#CCCCCC"> i</font><font color="#E5E5E5"> know the poxy two guys have</font>

1001
00:40:57,859 --> 00:41:03,950
that in their tool it's a awesome<font color="#E5E5E5"> cool</font>

1002
00:41:00,230 --> 00:41:08,210
is anyone<font color="#E5E5E5"> else</font><font color="#CCCCCC"> released WI</font><font color="#E5E5E5"> for awesome</font>

1003
00:41:03,950 --> 00:41:11,868
cool so<font color="#E5E5E5"> w mine is this service that's</font>

1004
00:41:08,210 --> 00:41:14,770
<font color="#E5E5E5">really useful it's been installed and</font>

1005
00:41:11,869 --> 00:41:18,049
running by default since Windows Server

1006
00:41:14,770 --> 00:41:20,690
2000 believe you can actually<font color="#E5E5E5"> get w mine</font>

1007
00:41:18,049 --> 00:41:23,660
on systems previous to that you have to

1008
00:41:20,690 --> 00:41:26,180
download<font color="#E5E5E5"> it and install it but from 2000</font>

1009
00:41:23,660 --> 00:41:29,598
<font color="#E5E5E5">and on its installed and running by</font>

1010
00:41:26,180 --> 00:41:32,359
default typically unless you're

1011
00:41:29,599 --> 00:41:36,349
installing like a malicious w my class

1012
00:41:32,359 --> 00:41:40,420
and provider it will<font color="#E5E5E5"> require local admin</font>

1013
00:41:36,349 --> 00:41:42,170
privileges interact with now this

1014
00:41:40,420 --> 00:41:44,510
there's a couple different ways you<font color="#CCCCCC"> can</font>

1015
00:41:42,170 --> 00:41:45,980
do it<font color="#E5E5E5"> but this tool is primarily</font>

1016
00:41:44,510 --> 00:41:47,660
designed more towards like the post

1017
00:41:45,980 --> 00:41:51,380
exploitation side like once you maybe

1018
00:41:47,660 --> 00:41:53,450
have local admin on every system or a

1019
00:41:51,380 --> 00:41:56,599
workstation admin or a server admin

1020
00:41:53,450 --> 00:42:00,910
account its youth kind of<font color="#E5E5E5"> in this post</font>

1021
00:41:56,599 --> 00:42:04,190
exploitation phase so lemme<font color="#E5E5E5"> ops is a</font>

1022
00:42:00,910 --> 00:42:07,759
<font color="#E5E5E5">PowerShell based scripts or tool that's</font>

1023
00:42:04,190 --> 00:42:10,820
designed to<font color="#E5E5E5"> use w my to carry out</font>

1024
00:42:07,760 --> 00:42:13,220
actions throughout a network

1025
00:42:10,820 --> 00:42:15,320
and so you can do a lot<font color="#E5E5E5"> of different</font>

1026
00:42:13,220 --> 00:42:17,930
<font color="#CCCCCC">things</font><font color="#E5E5E5"> with it the nice thing is that</font>

1027
00:42:15,320 --> 00:42:20,570
it's all written in<font color="#CCCCCC"> powershell like posh</font>

1028
00:42:17,930 --> 00:42:22,700
see to it has some of<font color="#E5E5E5"> the similar</font>

1029
00:42:20,570 --> 00:42:25,430
functionality where you can execute

1030
00:42:22,700 --> 00:42:26,779
commands you can<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it to run whatever</font>

1031
00:42:25,430 --> 00:42:29,089
you want on a remote system as long you

1032
00:42:26,780 --> 00:42:32,330
have local admin rights all using wmi

1033
00:42:29,090 --> 00:42:35,840
without ever having to like compromise

1034
00:42:32,330 --> 00:42:37,700
that system you can also use<font color="#CCCCCC"> it to a</font>

1035
00:42:35,840 --> 00:42:38,600
bunch<font color="#E5E5E5"> of other things like will say you</font>

1036
00:42:37,700 --> 00:42:42,669
want to start gathering information

1037
00:42:38,600 --> 00:42:45,440
<font color="#E5E5E5">about a system you can use</font><font color="#CCCCCC"> it to find IP</font>

1038
00:42:42,670 --> 00:42:47,360
IP address of any active<font color="#CCCCCC"> Nick</font><font color="#E5E5E5"> card on</font>

1039
00:42:45,440 --> 00:42:49,070
the system you can use<font color="#CCCCCC"> it to do</font>

1040
00:42:47,360 --> 00:42:51,320
directory listings of a specific

1041
00:42:49,070 --> 00:42:53,810
directory you can<font color="#E5E5E5"> do a ton of different</font>

1042
00:42:51,320 --> 00:42:56,540
things all over WI in<font color="#E5E5E5"> this functionality</font>

1043
00:42:53,810 --> 00:42:58,640
is like already<font color="#E5E5E5"> built into windows and</font>

1044
00:42:56,540 --> 00:43:00,410
you can do all remote so if you

1045
00:42:58,640 --> 00:43:03,470
compromise one system end up getting

1046
00:43:00,410 --> 00:43:05,720
local admin I within<font color="#E5E5E5"> the domain you</font><font color="#CCCCCC"> can</font>

1047
00:43:03,470 --> 00:43:08,810
use w my to almost do anything you would

1048
00:43:05,720 --> 00:43:11,899
want for the rest of<font color="#E5E5E5"> your test and it's</font>

1049
00:43:08,810 --> 00:43:13,820
<font color="#E5E5E5">wmi is not is being used a</font><font color="#CCCCCC"> lot more</font>

1050
00:43:11,900 --> 00:43:15,530
<font color="#CCCCCC">vitalis now but it's</font><font color="#E5E5E5"> not as heavily</font>

1051
00:43:13,820 --> 00:43:18,050
inspected by defenders like<font color="#CCCCCC"> it it's</font>

1052
00:43:15,530 --> 00:43:20,360
harder to<font color="#CCCCCC"> see it use it it's not just a</font>

1053
00:43:18,050 --> 00:43:23,870
standard process creation it's you do a

1054
00:43:20,360 --> 00:43:26,150
lot of different<font color="#CCCCCC"> things with it so let's</font>

1055
00:43:23,870 --> 00:43:28,520
<font color="#E5E5E5">say let's give you an example here is</font>

1056
00:43:26,150 --> 00:43:31,850
we'll see if<font color="#E5E5E5"> I want to have which users</font>

1057
00:43:28,520 --> 00:43:33,680
have active processes on a<font color="#E5E5E5"> system and so</font>

1058
00:43:31,850 --> 00:43:35,440
this might<font color="#CCCCCC"> be good information half</font>

1059
00:43:33,680 --> 00:43:38,330
because I want<font color="#CCCCCC"> to maybe gather</font>

1060
00:43:35,440 --> 00:43:39,770
credentials from any a specific user

1061
00:43:38,330 --> 00:43:42,049
that has stuff running on that system

1062
00:43:39,770 --> 00:43:45,380
and so rather than having<font color="#CCCCCC"> to compromise</font>

1063
00:43:42,050 --> 00:43:47,330
that machine do a task list in our PS or

1064
00:43:45,380 --> 00:43:49,820
anything to see I who has something

1065
00:43:47,330 --> 00:43:53,360
<font color="#E5E5E5">running why not just</font><font color="#CCCCCC"> use a w my query</font>

1066
00:43:49,820 --> 00:43:56,120
and gather information<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a</font>

1067
00:43:53,360 --> 00:43:57,560
<font color="#E5E5E5">little tiny hard to see but basically</font>

1068
00:43:56,120 --> 00:44:00,529
what<font color="#E5E5E5"> this is doing is saying hey get</font>

1069
00:43:57,560 --> 00:44:03,410
process owners<font color="#CCCCCC"> of w my target this</font>

1070
00:44:00,530 --> 00:44:05,150
specific system and authenticate with

1071
00:44:03,410 --> 00:44:07,399
this user<font color="#E5E5E5"> name and its passage that's</font>

1072
00:44:05,150 --> 00:44:09,590
right here and a showing hey these

1073
00:44:07,400 --> 00:44:12,230
different accounts have active plastic

1074
00:44:09,590 --> 00:44:14,390
we have Bruce Wayne for it and we have

1075
00:44:12,230 --> 00:44:17,330
<font color="#CCCCCC">empty of authority systems that are also</font>

1076
00:44:14,390 --> 00:44:18,740
running so we know at least the Bruce

1077
00:44:17,330 --> 00:44:20,390
Wayne account something that we may be

1078
00:44:18,740 --> 00:44:23,368
<font color="#CCCCCC">interested in that maybe want to</font><font color="#E5E5E5"> gather</font>

1079
00:44:20,390 --> 00:44:26,400
their credentials and information

1080
00:44:23,369 --> 00:44:28,619
so now<font color="#CCCCCC"> that we know who has</font><font color="#E5E5E5"> active</font>

1081
00:44:26,400 --> 00:44:32,369
processes running on the system let's

1082
00:44:28,619 --> 00:44:34,230
gather those credentials so there is

1083
00:44:32,369 --> 00:44:36,900
another tool to out there that similar

1084
00:44:34,230 --> 00:44:40,499
is mass<font color="#E5E5E5"> mini-hats which kind of does</font><font color="#CCCCCC"> I</font>

1085
00:44:36,900 --> 00:44:43,680
<font color="#E5E5E5">think is also written by will sure that</font>

1086
00:44:40,499 --> 00:44:47,009
does kind of runs<font color="#E5E5E5"> Nina Katz on remote</font>

1087
00:44:43,680 --> 00:44:48,118
systems and so however the traditional

1088
00:44:47,009 --> 00:44:51,150
way of like<font color="#E5E5E5"> gathering this information</font>

1089
00:44:48,119 --> 00:44:53,569
is by compromising it using something

1090
00:44:51,150 --> 00:44:56,849
like meterpreter loading<font color="#E5E5E5"> Mimi catsup</font>

1091
00:44:53,569 --> 00:44:59,249
<font color="#CCCCCC">and/or beacon and running w digests to</font>

1092
00:44:56,849 --> 00:45:01,440
get your credible information Alec why

1093
00:44:59,249 --> 00:45:02,819
not leverage is w<font color="#E5E5E5"> might do all that for</font>

1094
00:45:01,440 --> 00:45:05,999
you without having compromise that

1095
00:45:02,819 --> 00:45:07,740
remote system so you made the script for

1096
00:45:05,999 --> 00:45:10,499
this function based called remote script

1097
00:45:07,740 --> 00:45:11,819
without put the<font color="#E5E5E5"> HAR thing with w my</font>

1098
00:45:10,499 --> 00:45:13,499
especially when you're<font color="#CCCCCC"> doing process</font>

1099
00:45:11,819 --> 00:45:16,079
creation is you don't necessarily<font color="#E5E5E5"> get</font>

1100
00:45:13,499 --> 00:45:17,759
output from like you can see hey my

1101
00:45:16,079 --> 00:45:20,099
process started I didn't get<font color="#E5E5E5"> like a</font>

1102
00:45:17,759 --> 00:45:22,170
weird exit code so i know it's running

1103
00:45:20,099 --> 00:45:24,839
but that's it so like<font color="#CCCCCC"> if i run a</font>

1104
00:45:22,170 --> 00:45:27,119
powershell script I may not get output

1105
00:45:24,839 --> 00:45:30,690
from that powershell script or you won't

1106
00:45:27,119 --> 00:45:32,160
if you're using wmi so<font color="#E5E5E5"> I wanted to</font>

1107
00:45:30,690 --> 00:45:34,410
<font color="#E5E5E5">figure out how we could actually change</font>

1108
00:45:32,160 --> 00:45:36,239
that and start getting output and we

1109
00:45:34,410 --> 00:45:38,460
came up with this as kind of<font color="#E5E5E5"> our</font>

1110
00:45:36,239 --> 00:45:40,890
arguments at the moment where what this

1111
00:45:38,460 --> 00:45:42,150
<font color="#E5E5E5">does is this spawn PowerShell on the</font>

1112
00:45:40,890 --> 00:45:44,400
remote system that you're<font color="#CCCCCC"> running it</font>

1113
00:45:42,150 --> 00:45:46,380
against it will download the power strip

1114
00:45:44,400 --> 00:45:49,259
or powershell script you want to run all

1115
00:45:46,380 --> 00:45:51,329
a memory it will<font color="#E5E5E5"> then run whatever</font>

1116
00:45:49,259 --> 00:45:53,609
function that you specify so let's say

1117
00:45:51,329 --> 00:45:57,239
if you're trying to run mini-hats if you

1118
00:45:53,609 --> 00:46:00,450
say hey run invoke<font color="#CCCCCC"> muni cats and on it</font>

1119
00:45:57,239 --> 00:46:02,789
will do that on<font color="#E5E5E5"> that system it'll then</font>

1120
00:46:00,450 --> 00:46:05,970
save that output into a variable and

1121
00:46:02,789 --> 00:46:08,220
<font color="#E5E5E5">then post it over</font><font color="#CCCCCC"> https to a server that</font>

1122
00:46:05,970 --> 00:46:11,999
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> call and so now</font><font color="#CCCCCC"> you're actually</font>

1123
00:46:08,220 --> 00:46:15,029
able to<font color="#E5E5E5"> get output from using after</font>

1124
00:46:11,999 --> 00:46:17,519
using wmi to start a process and get

1125
00:46:15,029 --> 00:46:19,019
information back so this is<font color="#E5E5E5"> what it</font>

1126
00:46:17,519 --> 00:46:21,149
normally looks like when you run a

1127
00:46:19,019 --> 00:46:23,430
double you start a process w my like if

1128
00:46:21,150 --> 00:46:24,599
you have kind<font color="#E5E5E5"> of debug information you</font>

1129
00:46:23,430 --> 00:46:26,669
know like<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> getting back at is your</font>

1130
00:46:24,599 --> 00:46:28,499
process ID<font color="#E5E5E5"> this is your return value</font>

1131
00:46:26,670 --> 00:46:30,690
which is<font color="#CCCCCC"> 0 which is good which means</font>

1132
00:46:28,499 --> 00:46:33,660
your process started but that's it like

1133
00:46:30,690 --> 00:46:35,640
if Iran invoke communicat on a system

1134
00:46:33,660 --> 00:46:37,170
remotely this is all I would see so I'm

1135
00:46:35,640 --> 00:46:40,299
<font color="#E5E5E5">not getting the actual output back</font>

1136
00:46:37,170 --> 00:46:41,559
unless you're using a tool that has some

1137
00:46:40,299 --> 00:46:44,829
<font color="#E5E5E5">sort of functionality that will that</font>

1138
00:46:41,559 --> 00:46:46,359
will return that to you um so now this

1139
00:46:44,829 --> 00:46:48,160
<font color="#CCCCCC">is what we're doing with invoke remote</font>

1140
00:46:46,359 --> 00:46:50,259
script without put we're saying hey

1141
00:46:48,160 --> 00:46:52,269
authenticate as this user Bruce Wayne

1142
00:46:50,259 --> 00:46:54,999
this is<font color="#E5E5E5"> the password that they're there</font>

1143
00:46:52,269 --> 00:46:58,269
so this<font color="#E5E5E5"> is like a local admin run it</font>

1144
00:46:54,999 --> 00:47:00,578
against this system this<font color="#CCCCCC"> is like the URL</font>

1145
00:46:58,269 --> 00:47:02,979
of the file that<font color="#CCCCCC"> I water the PowerShell</font>

1146
00:47:00,579 --> 00:47:04,749
script<font color="#E5E5E5"> I</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> you to load in memory this</font>

1147
00:47:02,980 --> 00:47:07,269
is a function specifically I want you to

1148
00:47:04,749 --> 00:47:08,828
run and this is where I want<font color="#CCCCCC"> you to post</font>

1149
00:47:07,269 --> 00:47:10,779
all the<font color="#E5E5E5"> information fast so it's kind of</font>

1150
00:47:08,829 --> 00:47:13,450
a lot of information<font color="#E5E5E5"> have to ask for but</font>

1151
00:47:10,779 --> 00:47:15,670
it'll<font color="#E5E5E5"> get everything back and so this</font><font color="#CCCCCC"> is</font>

1152
00:47:13,450 --> 00:47:18,490
your output<font color="#E5E5E5"> in a lot so you have your</font>

1153
00:47:15,670 --> 00:47:21,009
<font color="#E5E5E5">web server listening at the location</font>

1154
00:47:18,490 --> 00:47:22,899
that<font color="#E5E5E5"> you told it to and it'll once it</font>

1155
00:47:21,009 --> 00:47:24,460
gets that information the script runs it

1156
00:47:22,900 --> 00:47:27,039
posts back<font color="#E5E5E5"> to output and you get your</font>

1157
00:47:24,460 --> 00:47:30,069
full meaning cats<font color="#CCCCCC"> dump in front of the</font>

1158
00:47:27,039 --> 00:47:31,299
information<font color="#E5E5E5"> there so you can do</font><font color="#CCCCCC"> when my</font>

1159
00:47:30,069 --> 00:47:33,670
office is kind of interesting I think

1160
00:47:31,299 --> 00:47:34,690
because we use it a lot for stuff like

1161
00:47:33,670 --> 00:47:36,970
that where if we<font color="#E5E5E5"> just want to get</font>

1162
00:47:34,690 --> 00:47:38,859
information<font color="#CCCCCC"> from a remote system</font><font color="#E5E5E5"> without</font>

1163
00:47:36,970 --> 00:47:41,558
having to completely compromised it and

1164
00:47:38,859 --> 00:47:43,808
it's all using built-in<font color="#CCCCCC"> windows</font>

1165
00:47:41,559 --> 00:47:45,759
functionality it's not at<font color="#E5E5E5"> all we're not</font>

1166
00:47:43,809 --> 00:47:47,859
dropping anything to disk it's all<font color="#E5E5E5"> in</font>

1167
00:47:45,759 --> 00:47:51,430
memory which makes life<font color="#E5E5E5"> a little bit</font>

1168
00:47:47,859 --> 00:47:53,019
easier<font color="#CCCCCC"> for us so this can do a couple</font>

1169
00:47:51,430 --> 00:47:54,999
<font color="#CCCCCC">different things like I said you can run</font>

1170
00:47:53,019 --> 00:47:56,979
commands kind<font color="#E5E5E5"> of like we were doing</font>

1171
00:47:54,999 --> 00:47:58,899
there you can kill processes you can

1172
00:47:56,980 --> 00:48:02,200
<font color="#E5E5E5">search for files on us let's say you</font>

1173
00:47:58,900 --> 00:48:05,019
want to search for any file to ask

1174
00:48:02,200 --> 00:48:08,470
passwords in its name you can use w my

1175
00:48:05,019 --> 00:48:10,089
to search remote system for files with

1176
00:48:08,470 --> 00:48:12,519
passwords it will tell you exactly where

1177
00:48:10,089 --> 00:48:14,890
they're stored and then you can use the

1178
00:48:12,519 --> 00:48:17,558
transfer file functionality to actually

1179
00:48:14,890 --> 00:48:21,210
download those files and get a copy of

1180
00:48:17,559 --> 00:48:23,049
them and so this cool is available<font color="#CCCCCC"> here</font>

1181
00:48:21,210 --> 00:48:24,670
anyone can use it's been a little while

1182
00:48:23,049 --> 00:48:26,859
but we haven't really talked about it

1183
00:48:24,670 --> 00:48:29,109
yet so it's kind of nice to get out and

1184
00:48:26,859 --> 00:48:31,930
hopefully other people will find some

1185
00:48:29,109 --> 00:48:33,819
decent use for it so the main things

1186
00:48:31,930 --> 00:48:36,368
with these three<font color="#E5E5E5"> pieces of code is there</font>

1187
00:48:33,819 --> 00:48:39,460
are different tools they're all custom

1188
00:48:36,369 --> 00:48:41,349
functions they<font color="#E5E5E5"> bypass Navy because</font><font color="#CCCCCC"> there</font>

1189
00:48:39,460 --> 00:48:43,359
was no signature for it if stuff that we

1190
00:48:41,349 --> 00:48:46,239
<font color="#E5E5E5">just wrote because we've seen we saw a</font>

1191
00:48:43,359 --> 00:48:47,440
need for it<font color="#E5E5E5"> and it started to make our</font>

1192
00:48:46,239 --> 00:48:49,599
life easier because not nothing's

1193
00:48:47,440 --> 00:48:50,740
catching it especially<font color="#E5E5E5"> this last one</font>

1194
00:48:49,599 --> 00:48:53,110
<font color="#E5E5E5">because it</font>

1195
00:48:50,740 --> 00:48:55,479
not being caught the tool itself can be

1196
00:48:53,110 --> 00:48:57,510
completely loaded in memory without ever

1197
00:48:55,480 --> 00:48:59,890
having in drakul<font color="#E5E5E5"> disk and then</font>

1198
00:48:57,510 --> 00:49:01,690
everything it does is all a memory so

1199
00:48:59,890 --> 00:49:04,240
we're<font color="#E5E5E5"> not having to do anything that can</font>

1200
00:49:01,690 --> 00:49:06,520
leave forensic artifacts or room for

1201
00:49:04,240 --> 00:49:09,879
detection by defenders or different

1202
00:49:06,520 --> 00:49:12,340
solutions out there so<font color="#E5E5E5"> that's basically</font>

1203
00:49:09,880 --> 00:49:15,310
it<font color="#E5E5E5"> I kind of wanted to go over real</font>

1204
00:49:12,340 --> 00:49:19,210
quick again this is how stagers work how

1205
00:49:15,310 --> 00:49:21,640
<font color="#CCCCCC">Vale does AV evasion how we bypass stuff</font>

1206
00:49:19,210 --> 00:49:24,760
and then kind<font color="#CCCCCC"> of easy way of bypassing</font>

1207
00:49:21,640 --> 00:49:28,690
ad was to just create custom code that

1208
00:49:24,760 --> 00:49:30,100
did whatever we needed it to do I think

1209
00:49:28,690 --> 00:49:31,990
<font color="#CCCCCC">that's about it if there's any questions</font>

1210
00:49:30,100 --> 00:49:35,880
I'd be happy to take otherwise thank you

1211
00:49:31,990 --> 00:49:35,879
<font color="#CCCCCC">very</font><font color="#E5E5E5"> much for coming to my call</font>

