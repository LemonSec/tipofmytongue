1
00:00:00,000 --> 00:00:06,600
so today I'm going to<font color="#E5E5E5"> be talking about</font>

2
00:00:02,310 --> 00:00:10,349
reviewing angularjs applications so Who

3
00:00:06,600 --> 00:00:13,320
am I this is<font color="#CCCCCC"> definitely not me so i am</font>

4
00:00:10,349 --> 00:00:15,210
<font color="#E5E5E5">luis</font><font color="#CCCCCC"> i'm a</font><font color="#E5E5E5"> security consultants digital</font>

5
00:00:13,320 --> 00:00:17,448
<font color="#CCCCCC">i've been there</font><font color="#E5E5E5"> for about a year and</font>

6
00:00:15,210 --> 00:00:20,640
I've<font color="#E5E5E5"> been doing a lot of web security</font>

7
00:00:17,449 --> 00:00:22,439
<font color="#E5E5E5">I'm also doing a PhD leads back hip</font>

8
00:00:20,640 --> 00:00:25,769
which is a better University in this

9
00:00:22,439 --> 00:00:27,900
sorry<font color="#CCCCCC"> Sheffield's</font><font color="#E5E5E5"> and I'm a very simple</font>

10
00:00:25,769 --> 00:00:29,580
man and I have simple needs and all I

11
00:00:27,900 --> 00:00:32,250
like his web security that's pretty much

12
00:00:29,580 --> 00:00:35,430
all I do and try to go to the gym that

13
00:00:32,250 --> 00:00:38,450
nobody works oh and if you want to

14
00:00:35,430 --> 00:00:44,550
follow me on<font color="#CCCCCC"> Twitter it's at lewis arden</font>

15
00:00:38,450 --> 00:00:45,960
so well it's meant<font color="#E5E5E5"> to be beds anyway so</font>

16
00:00:44,550 --> 00:00:48,360
today<font color="#E5E5E5"> I'm going to talk about what is</font>

17
00:00:45,960 --> 00:00:51,780
<font color="#E5E5E5">angularjs given over you with the</font>

18
00:00:48,360 --> 00:00:53,670
framework why should we as people who

19
00:00:51,780 --> 00:00:57,510
want to look at the security aspects of

20
00:00:53,670 --> 00:00:59,640
it care and<font color="#E5E5E5"> also how to assess it from</font>

21
00:00:57,510 --> 00:01:01,649
looking at security caveats from the

22
00:00:59,640 --> 00:01:04,170
framework to what developers would

23
00:01:01,649 --> 00:01:05,640
introduce where to look in the codes

24
00:01:04,170 --> 00:01:08,220
because obviously that's always a good

25
00:01:05,640 --> 00:01:11,310
part good start<font color="#E5E5E5"> to place a good place to</font>

26
00:01:08,220 --> 00:01:16,850
start and some tools<font color="#E5E5E5"> that might be quite</font>

27
00:01:11,310 --> 00:01:21,150
useful to use so what<font color="#E5E5E5"> is angularjs</font>

28
00:01:16,850 --> 00:01:25,710
angularjs is an<font color="#E5E5E5"> open-source MVC platform</font>

29
00:01:21,150 --> 00:01:27,630
created by google it's a<font color="#E5E5E5"> front-end NBC</font>

30
00:01:25,710 --> 00:01:30,240
so it's<font color="#E5E5E5"> not your typical</font><font color="#CCCCCC"> and you have</font>

31
00:01:27,630 --> 00:01:31,920
and your server and your NBC is

32
00:01:30,240 --> 00:01:32,939
basically the view is the only thing

33
00:01:31,920 --> 00:01:35,729
that's meant to<font color="#E5E5E5"> be on the client it</font>

34
00:01:32,939 --> 00:01:38,158
everything is<font color="#E5E5E5"> on the client it has</font>

35
00:01:35,729 --> 00:01:43,470
built-in data binding so it<font color="#E5E5E5"> has to weigh</font>

36
00:01:38,159 --> 00:01:45,299
in one-way data binding<font color="#E5E5E5"> yep this screen</font>

37
00:01:43,470 --> 00:01:47,039
changed and this<font color="#E5E5E5"> one didn't</font><font color="#CCCCCC"> serve words</font>

38
00:01:45,299 --> 00:01:50,070
yeah and it also has client-side

39
00:01:47,040 --> 00:01:51,630
templates you can use pretty much any

40
00:01:50,070 --> 00:01:54,000
back-end with angular it doesn't really

41
00:01:51,630 --> 00:01:57,449
matter it can be java.net<font color="#E5E5E5"> Ruby you know</font>

42
00:01:54,000 --> 00:01:59,490
PHP whatever<font color="#CCCCCC"> or works generally people</font>

43
00:01:57,450 --> 00:02:02,430
<font color="#E5E5E5">to use it</font><font color="#CCCCCC"> for single page applications</font>

44
00:01:59,490 --> 00:02:04,949
so it has like in deep<font color="#E5E5E5"> JavaScript links</font>

45
00:02:02,430 --> 00:02:06,200
where you can click to stay on the same

46
00:02:04,950 --> 00:02:08,989
page it's more

47
00:02:06,200 --> 00:02:11,330
fluid experience an angularjs is

48
00:02:08,989 --> 00:02:13,010
supposed to simplify development and

49
00:02:11,330 --> 00:02:16,400
testing because it's very<font color="#E5E5E5"> easy to mock</font>

50
00:02:13,010 --> 00:02:18,260
things up so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the kind of what</font>

51
00:02:16,400 --> 00:02:20,420
<font color="#E5E5E5">you would generally see you have your</font>

52
00:02:18,260 --> 00:02:22,250
MVC on the client then basically gets

53
00:02:20,420 --> 00:02:26,540
wrapped up<font color="#E5E5E5"> in JSON and then gets sent to</font>

54
00:02:22,250 --> 00:02:29,180
the<font color="#E5E5E5"> server</font><font color="#CCCCCC"> and a very basic intro to</font>

55
00:02:26,540 --> 00:02:31,220
angularjs which doesn't look exactly

56
00:02:29,180 --> 00:02:33,980
what it looks like here but so you have

57
00:02:31,220 --> 00:02:35,239
your ng app which is<font color="#E5E5E5"> basically you are</font>

58
00:02:33,980 --> 00:02:37,518
telling your application you're going to

59
00:02:35,239 --> 00:02:39,530
bootstrap angular this is basically on a

60
00:02:37,519 --> 00:02:41,630
divider so anything with inside that

61
00:02:39,530 --> 00:02:43,099
divider is now<font color="#E5E5E5"> booted up the angular as</font>

62
00:02:41,630 --> 00:02:45,859
long as the javascript is obviously

63
00:02:43,099 --> 00:02:49,369
included on the page as well<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> have</font>

64
00:02:45,860 --> 00:02:51,590
sort<font color="#E5E5E5"> of thing chords 0 ng up we also</font>

65
00:02:49,370 --> 00:02:53,720
<font color="#E5E5E5">have the ng model directive and this</font>

66
00:02:51,590 --> 00:02:56,540
tells the view that you're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

67
00:02:53,720 --> 00:02:59,299
doing two-way data binding and we have

68
00:02:56,540 --> 00:03:01,190
<font color="#E5E5E5">things called expressions so I'll go a</font>

69
00:02:59,299 --> 00:03:02,900
bit more into what<font color="#E5E5E5"> the Sun box is in</font>

70
00:03:01,190 --> 00:03:05,840
angular later but essentially an

71
00:03:02,900 --> 00:03:08,989
expression is a small and JavaScript

72
00:03:05,840 --> 00:03:10,790
like and kind of take away because

73
00:03:08,989 --> 00:03:12,319
they've basically moved away<font color="#CCCCCC"> from the</font>

74
00:03:10,790 --> 00:03:13,850
<font color="#E5E5E5">Dom they don't like the dawn they think</font>

75
00:03:12,319 --> 00:03:15,410
it's a<font color="#E5E5E5"> horrible mess so they've</font>

76
00:03:13,850 --> 00:03:21,530
basically moved to that functionality

77
00:03:15,410 --> 00:03:24,470
away so angularjs as a whole it<font color="#E5E5E5"> has its</font>

78
00:03:21,530 --> 00:03:27,260
kind of clusters<font color="#E5E5E5"> and containers and as</font>

79
00:03:24,470 --> 00:03:28,579
sit and it separates your application it

80
00:03:27,260 --> 00:03:31,190
doesn't<font color="#E5E5E5"> really have a concept of a main</font>

81
00:03:28,579 --> 00:03:33,260
method so generally<font color="#CCCCCC"> you start off you</font>

82
00:03:31,190 --> 00:03:35,269
initialize a module you give it a name

83
00:03:33,260 --> 00:03:37,190
and then you start adding<font color="#E5E5E5"> attributes to</font>

84
00:03:35,269 --> 00:03:40,519
it and this is what<font color="#E5E5E5"> it kind of looks</font>

85
00:03:37,190 --> 00:03:41,780
like so within angular you have your

86
00:03:40,519 --> 00:03:43,760
module and you have to basically

87
00:03:41,780 --> 00:03:45,920
initialize it with a name could be blank

88
00:03:43,760 --> 00:03:47,840
if you wanted to and<font color="#CCCCCC"> you also have</font><font color="#E5E5E5"> to</font>

89
00:03:45,920 --> 00:03:49,819
<font color="#E5E5E5">include any dependencies that you want</font>

90
00:03:47,840 --> 00:03:51,500
to<font color="#E5E5E5"> use within the application so for</font>

91
00:03:49,819 --> 00:03:53,238
example<font color="#E5E5E5"> if I want to do routing inside</font>

92
00:03:51,500 --> 00:03:57,139
my application I have to include the

93
00:03:53,239 --> 00:03:59,630
engine belt or<font color="#E5E5E5"> route directive or module</font>

94
00:03:57,139 --> 00:04:01,700
and then I can call the function belt

95
00:03:59,630 --> 00:04:05,930
provider which is accessible from<font color="#E5E5E5"> ng</font>

96
00:04:01,700 --> 00:04:07,459
<font color="#E5E5E5">belt like and routing so it also has</font>

97
00:04:05,930 --> 00:04:09,349
about provider where you can do<font color="#E5E5E5"> like for</font>

98
00:04:07,459 --> 00:04:11,630
example dot when when you<font color="#E5E5E5"> first browse</font>

99
00:04:09,349 --> 00:04:13,608
to a<font color="#E5E5E5"> website you can choose a template</font>

100
00:04:11,630 --> 00:04:15,859
URL so what you want to<font color="#E5E5E5"> display with</font>

101
00:04:13,609 --> 00:04:17,690
inside the application and also what

102
00:04:15,860 --> 00:04:20,510
kind of controller you

103
00:04:17,690 --> 00:04:22,730
<font color="#CCCCCC">you to do so then we have controllers</font>

104
00:04:20,510 --> 00:04:23,840
and again you have<font color="#CCCCCC"> to do a module app</font>

105
00:04:22,730 --> 00:04:26,570
but then you can<font color="#E5E5E5"> also include a</font>

106
00:04:23,840 --> 00:04:29,049
controller give it a name obviously<font color="#CCCCCC"> and</font>

107
00:04:26,570 --> 00:04:32,360
<font color="#CCCCCC">then you have things called scopes and</font>

108
00:04:29,050 --> 00:04:34,610
scopes are essentially objects that we

109
00:04:32,360 --> 00:04:36,020
use to reference into the view so for

110
00:04:34,610 --> 00:04:38,660
example it could be like<font color="#E5E5E5"> a tech piece of</font>

111
00:04:36,020 --> 00:04:40,729
text some array an object this<font color="#E5E5E5"> is all</font>

112
00:04:38,660 --> 00:04:42,650
basically once you define it<font color="#CCCCCC"> in a scope</font>

113
00:04:40,730 --> 00:04:45,110
object you can<font color="#CCCCCC"> then reference it with</font>

114
00:04:42,650 --> 00:04:46,849
inside an expression on<font color="#E5E5E5"> the view so as</font>

115
00:04:45,110 --> 00:04:48,800
you<font color="#CCCCCC"> can see I've got</font><font color="#E5E5E5"> a wonderful hello</font>

116
00:04:46,850 --> 00:04:50,900
still condemn oh so we've got a scope

117
00:04:48,800 --> 00:04:55,400
called hello and in<font color="#E5E5E5"> Texas called hello</font>

118
00:04:50,900 --> 00:04:56,510
steel con this is not<font color="#E5E5E5"> your average HTML</font>

119
00:04:55,400 --> 00:04:58,340
this is a different way to do with

120
00:04:56,510 --> 00:04:59,539
angular it's just what I<font color="#E5E5E5"> prefer so</font><font color="#CCCCCC"> it's</font>

121
00:04:58,340 --> 00:05:02,330
<font color="#E5E5E5">the</font><font color="#CCCCCC"> J template and it's like a</font>

122
00:04:59,540 --> 00:05:05,270
server-side template and you essentially

123
00:05:02,330 --> 00:05:07,640
can define a small bits of HTML you

124
00:05:05,270 --> 00:05:10,190
essentially find your application with

125
00:05:07,640 --> 00:05:12,020
ng-app and this all should actually

126
00:05:10,190 --> 00:05:14,060
should also contain the controller that

127
00:05:12,020 --> 00:05:16,430
doesn't oops and<font color="#CCCCCC"> then you can also on</font>

128
00:05:14,060 --> 00:05:19,280
your paragraph tag just include that and

129
00:05:16,430 --> 00:05:21,620
if the if the controller was attached<font color="#E5E5E5"> to</font>

130
00:05:19,280 --> 00:05:24,880
you with have you know Helen you'd have

131
00:05:21,620 --> 00:05:27,110
hello via con displayed on your view

132
00:05:24,880 --> 00:05:30,080
there's also things called and

133
00:05:27,110 --> 00:05:32,870
directives so as ice<font color="#E5E5E5"> and other said</font>

134
00:05:30,080 --> 00:05:35,599
before and you know anglers moved away

135
00:05:32,870 --> 00:05:38,150
<font color="#E5E5E5">from the Dom you can't access things so</font>

136
00:05:35,600 --> 00:05:39,620
<font color="#E5E5E5">essentially and they have these</font>

137
00:05:38,150 --> 00:05:42,950
directives which are basically markers

138
00:05:39,620 --> 00:05:45,440
of the<font color="#E5E5E5"> Dom it talks to HTML compiler and</font>

139
00:05:42,950 --> 00:05:47,240
then it basically transforms the<font color="#E5E5E5"> Dom</font>

140
00:05:45,440 --> 00:05:49,910
elements and so on and<font color="#E5E5E5"> so forth so for</font>

141
00:05:47,240 --> 00:05:52,970
example a directive called ng-click is

142
00:05:49,910 --> 00:05:55,430
basically a javascript onclick event you

143
00:05:52,970 --> 00:05:56,510
also<font color="#E5E5E5"> have services and</font><font color="#CCCCCC"> are probably</font>

144
00:05:55,430 --> 00:05:58,640
<font color="#E5E5E5">going to go through this quite quickly</font>

145
00:05:56,510 --> 00:06:00,770
because water<font color="#CCCCCC"> use</font><font color="#E5E5E5"> up quite a lot of time</font>

146
00:05:58,640 --> 00:06:02,840
just going through the basics then you

147
00:06:00,770 --> 00:06:05,060
have services which basically used to

148
00:06:02,840 --> 00:06:07,820
<font color="#E5E5E5">and share covel in your organization or</font>

149
00:06:05,060 --> 00:06:10,040
through your application<font color="#CCCCCC"> and angularjs</font>

150
00:06:07,820 --> 00:06:12,440
has inbuilt services for example dollar

151
00:06:10,040 --> 00:06:15,230
HTTP that you can use to send data<font color="#E5E5E5"> to</font>

152
00:06:12,440 --> 00:06:18,560
the server generally use it<font color="#CCCCCC"> XML HTTP or</font>

153
00:06:15,230 --> 00:06:20,690
just generate<font color="#E5E5E5"> JSON you can also create</font>

154
00:06:18,560 --> 00:06:22,010
your own services so for<font color="#E5E5E5"> example if you</font>

155
00:06:20,690 --> 00:06:24,320
want to do a login request you would

156
00:06:22,010 --> 00:06:27,630
build<font color="#E5E5E5"> a login service that would do all</font>

157
00:06:24,320 --> 00:06:32,159
the HTTP calls and so on<font color="#E5E5E5"> and so forth</font>

158
00:06:27,630 --> 00:06:33,990
so summing up and there's a philosophy

159
00:06:32,160 --> 00:06:36,540
<font color="#CCCCCC">an angular basically as a guy called</font>

160
00:06:33,990 --> 00:06:39,390
eyeball<font color="#CCCCCC"> Mina</font><font color="#E5E5E5"> from the Google team and he</font>

161
00:06:36,540 --> 00:06:41,070
essentially defines angularjs as a lot

162
00:06:39,390 --> 00:06:43,710
of you whatever they<font color="#E5E5E5"> don't really</font><font color="#CCCCCC"> care</font>

163
00:06:41,070 --> 00:06:45,060
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you're using a controller as long</font>

164
00:06:43,710 --> 00:06:46,620
as<font color="#CCCCCC"> you're building kick-ass applications</font>

165
00:06:45,060 --> 00:06:48,690
you can use a service you<font color="#E5E5E5"> can use you</font>

166
00:06:46,620 --> 00:06:51,030
know<font color="#E5E5E5"> whatever whatever you want to get</font>

167
00:06:48,690 --> 00:06:52,530
this application of a running conflicts

168
00:06:51,030 --> 00:06:53,760
are quite important to know because this

169
00:06:52,530 --> 00:06:55,400
<font color="#CCCCCC">is where you basically define things</font>

170
00:06:53,760 --> 00:06:57,680
where you want to disable stuff

171
00:06:55,400 --> 00:07:00,289
obviously your controllers are your

172
00:06:57,680 --> 00:07:03,270
business logic and so on<font color="#E5E5E5"> and so forth</font>

173
00:07:00,290 --> 00:07:04,650
your templates are your views your your

174
00:07:03,270 --> 00:07:06,990
visual representation what gets

175
00:07:04,650 --> 00:07:10,109
displayed to the user and then you have

176
00:07:06,990 --> 00:07:11,580
routing directives services and then

177
00:07:10,110 --> 00:07:15,930
there's a thing<font color="#E5E5E5"> of it obviously</font><font color="#CCCCCC"> I talked</font>

178
00:07:11,580 --> 00:07:17,640
about<font color="#E5E5E5"> scopes before there's two kinds of</font>

179
00:07:15,930 --> 00:07:20,310
scopes which is quite important<font color="#E5E5E5"> to know</font>

180
00:07:17,640 --> 00:07:23,640
<font color="#CCCCCC">is angular so there's isolated scopes</font>

181
00:07:20,310 --> 00:07:25,110
and global scopes so within a global

182
00:07:23,640 --> 00:07:26,880
scope<font color="#CCCCCC"> it's accessible throughout the</font>

183
00:07:25,110 --> 00:07:29,310
application whereas if<font color="#E5E5E5"> you're just</font>

184
00:07:26,880 --> 00:07:30,810
<font color="#E5E5E5">working with a scope it's isolated so</font>

185
00:07:29,310 --> 00:07:33,750
when you don't bind it<font color="#E5E5E5"> within a side of</font>

186
00:07:30,810 --> 00:07:35,490
controller<font color="#E5E5E5"> only an application which</font><font color="#CCCCCC"> is</font>

187
00:07:33,750 --> 00:07:38,160
bound to that controller on<font color="#CCCCCC"> the view is</font>

188
00:07:35,490 --> 00:07:39,720
can access it and obviously we have

189
00:07:38,160 --> 00:07:42,240
expressions but like i said before

190
00:07:39,720 --> 00:07:44,640
they're not accessible<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> dom their</font>

191
00:07:42,240 --> 00:07:47,580
son box the way and you can you<font color="#E5E5E5"> only can</font>

192
00:07:44,640 --> 00:07:49,740
do very basic<font color="#CCCCCC"> things with</font><font color="#E5E5E5"> it so as</font>

193
00:07:47,580 --> 00:07:53,039
security consultants you know why should

194
00:07:49,740 --> 00:07:54,570
we care it's had an extreme you know

195
00:07:53,040 --> 00:07:57,120
<font color="#CCCCCC">huge adoption rate over the past couple</font>

196
00:07:54,570 --> 00:07:58,409
of years and if you<font color="#E5E5E5"> look for the trends</font>

197
00:07:57,120 --> 00:08:00,600
on what<font color="#E5E5E5"> people are googling you know</font>

198
00:07:58,410 --> 00:08:01,770
angular jess is extremely popular so as

199
00:08:00,600 --> 00:08:03,300
<font color="#E5E5E5">you can see from the graph this is</font>

200
00:08:01,770 --> 00:08:05,599
probably<font color="#E5E5E5"> from about twenty thirteen it</font>

201
00:08:03,300 --> 00:08:09,510
just kind of skyrockets and carries on

202
00:08:05,600 --> 00:08:11,520
<font color="#CCCCCC">the main problem is for developers and a</font>

203
00:08:09,510 --> 00:08:13,050
good thing<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> there's huge breaking</font>

204
00:08:11,520 --> 00:08:15,120
changes every time<font color="#E5E5E5"> they build a new</font>

205
00:08:13,050 --> 00:08:16,860
release so like they they basically are

206
00:08:15,120 --> 00:08:18,360
saying hey we<font color="#E5E5E5"> don't really care</font><font color="#CCCCCC"> about</font>

207
00:08:16,860 --> 00:08:19,500
<font color="#CCCCCC">you know backwards compatibility we're</font>

208
00:08:18,360 --> 00:08:20,820
just gonna build<font color="#CCCCCC"> some new stuff and</font>

209
00:08:19,500 --> 00:08:23,520
we're going to redefine<font color="#CCCCCC"> the web screw it</font>

210
00:08:20,820 --> 00:08:25,080
so the problem is if you start<font color="#CCCCCC"> looking</font>

211
00:08:23,520 --> 00:08:27,780
through<font color="#E5E5E5"> the git repo you're going to</font>

212
00:08:25,080 --> 00:08:29,340
identify very quickly that yeah

213
00:08:27,780 --> 00:08:31,320
developers probably going to aren't

214
00:08:29,340 --> 00:08:33,270
<font color="#E5E5E5">going to update their angular mainly</font>

215
00:08:31,320 --> 00:08:34,919
because they'd its technical debt they

216
00:08:33,270 --> 00:08:36,870
say it's<font color="#CCCCCC"> the managers yeah is this this</font>

217
00:08:34,919 --> 00:08:39,059
is vulnerable also what we<font color="#E5E5E5"> would not</font>

218
00:08:36,870 --> 00:08:41,150
refactor an old coat and so on<font color="#E5E5E5"> and so</font>

219
00:08:39,059 --> 00:08:41,150
forth

220
00:08:42,270 --> 00:08:47,110
so then I'm now going to go into some

221
00:08:45,190 --> 00:08:48,370
security caveats so<font color="#E5E5E5"> hopefully that kind</font>

222
00:08:47,110 --> 00:08:51,070
of gave you a broad overview of what

223
00:08:48,370 --> 00:08:53,470
<font color="#E5E5E5">angularjs looks like how it works and</font>

224
00:08:51,070 --> 00:08:58,600
how some of the components<font color="#E5E5E5"> build</font>

225
00:08:53,470 --> 00:09:00,970
together from the MVC kind of style so

226
00:08:58,600 --> 00:09:02,230
we have issues within the framework and

227
00:09:00,970 --> 00:09:04,630
<font color="#E5E5E5">I'm going to go into talking about</font>

228
00:09:02,230 --> 00:09:06,550
breaking out the sandbox as I said

229
00:09:04,630 --> 00:09:08,890
before and they moved away from the Dom

230
00:09:06,550 --> 00:09:10,660
they don't like it<font color="#E5E5E5"> I'm also going to</font>

231
00:09:08,890 --> 00:09:14,410
<font color="#E5E5E5">talk about content security bypasses</font>

232
00:09:10,660 --> 00:09:16,719
light passes or abusing browsers and the

233
00:09:14,410 --> 00:09:18,010
framework itself to you know create that

234
00:09:16,720 --> 00:09:20,410
wonderful cross site scripting that we

235
00:09:18,010 --> 00:09:23,200
were like I'm also going to briefly talk

236
00:09:20,410 --> 00:09:24,969
about sanitizer bypasses this is really

237
00:09:23,200 --> 00:09:26,470
related and you won't really see this

238
00:09:24,970 --> 00:09:29,080
too much<font color="#E5E5E5"> in the wild but I'll go into</font>

239
00:09:26,470 --> 00:09:32,110
that as well just basically HTML

240
00:09:29,080 --> 00:09:34,660
sanitizer I'm going<font color="#E5E5E5"> to look at and</font>

241
00:09:32,110 --> 00:09:36,640
issues introduced by developers so I'm

242
00:09:34,660 --> 00:09:39,490
<font color="#E5E5E5">going to talk about explicitly trysting</font>

243
00:09:36,640 --> 00:09:41,020
data because by default and when<font color="#E5E5E5"> the</font>

244
00:09:39,490 --> 00:09:43,090
developer<font color="#CCCCCC"> writes like for</font><font color="#E5E5E5"> example you</font>

245
00:09:41,020 --> 00:09:47,290
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to display</font><font color="#E5E5E5"> a string it's not really</font>

246
00:09:43,090 --> 00:09:49,060
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> be rendered as HTML I'm also</font>

247
00:09:47,290 --> 00:09:51,550
going to talk about client-side routing

248
00:09:49,060 --> 00:09:54,219
and authorization so as we know<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a</font>

249
00:09:51,550 --> 00:09:55,959
client-side framework service idle you

250
00:09:54,220 --> 00:09:58,360
know definitely has to be looked into as

251
00:09:55,960 --> 00:10:00,370
<font color="#CCCCCC">well but a lot of people seem to put a</font>

252
00:09:58,360 --> 00:10:03,610
lot of trust in the climb when it comes

253
00:10:00,370 --> 00:10:05,530
to these client-side frameworks and we

254
00:10:03,610 --> 00:10:07,900
also have<font color="#E5E5E5"> a thing called client site</font>

255
00:10:05,530 --> 00:10:10,990
template injection which will go a<font color="#E5E5E5"> bit</font>

256
00:10:07,900 --> 00:10:12,699
for bit more into later essentially when

257
00:10:10,990 --> 00:10:14,620
you mix your server and client side

258
00:10:12,700 --> 00:10:17,950
templates you're going to have a bad

259
00:10:14,620 --> 00:10:19,180
time so there's a long list of things

260
00:10:17,950 --> 00:10:21,040
<font color="#E5E5E5">I'm not going to cover in this talk</font>

261
00:10:19,180 --> 00:10:22,599
because I'd be here for hours but

262
00:10:21,040 --> 00:10:24,760
there's<font color="#CCCCCC"> there's a few links</font><font color="#E5E5E5"> so i'm going</font>

263
00:10:22,600 --> 00:10:26,589
<font color="#E5E5E5">to distribute the slides afterwards and</font>

264
00:10:24,760 --> 00:10:29,650
there'll be a you know open up on slide

265
00:10:26,589 --> 00:10:31,270
deck you can<font color="#E5E5E5"> essentially take a look at</font>

266
00:10:29,650 --> 00:10:33,579
these security caveats and they're

267
00:10:31,270 --> 00:10:36,160
definitely think is<font color="#CCCCCC"> that you should look</font>

268
00:10:33,580 --> 00:10:40,900
into if you are developing an angular

269
00:10:36,160 --> 00:10:44,949
and so on and<font color="#E5E5E5"> so forth so we've got</font>

270
00:10:40,900 --> 00:10:47,620
issues<font color="#CCCCCC"> in the framework the sandbox so</font>

271
00:10:44,950 --> 00:10:52,030
as I said before angular separates from

272
00:10:47,620 --> 00:10:53,649
the Dom using expressions it<font color="#E5E5E5"> uses a</font>

273
00:10:52,030 --> 00:10:55,600
sanitized ation function

274
00:10:53,649 --> 00:10:59,199
to prevent you know malicious code being

275
00:10:55,600 --> 00:11:00,730
<font color="#E5E5E5">executed this means we can't access you</font>

276
00:10:59,199 --> 00:11:03,939
know the window objects which means we

277
00:11:00,730 --> 00:11:06,069
can't<font color="#E5E5E5"> call eval kind access Dom elements</font>

278
00:11:03,939 --> 00:11:07,990
you can prove directives but that's not

279
00:11:06,069 --> 00:11:09,939
<font color="#E5E5E5">really what we want to do as a security</font>

280
00:11:07,990 --> 00:11:12,910
expert we want to be able to you know

281
00:11:09,939 --> 00:11:15,998
inject malicious code you also can't

282
00:11:12,910 --> 00:11:19,439
access global variables and you also

283
00:11:15,999 --> 00:11:22,569
can't access the object constructor and

284
00:11:19,439 --> 00:11:24,248
angular<font color="#CCCCCC"> I'm pretty sure when they first</font>

285
00:11:22,569 --> 00:11:26,378
start talking about<font color="#E5E5E5"> angular security</font>

286
00:11:24,249 --> 00:11:28,420
they were saying that the<font color="#E5E5E5"> Sun box is for</font>

287
00:11:26,379 --> 00:11:30,369
security purposes but if you now look on

288
00:11:28,420 --> 00:11:32,769
the documentation they're saying the

289
00:11:30,369 --> 00:11:37,809
sandbox is not for security reasons it's

290
00:11:32,769 --> 00:11:39,879
to move things away so I really<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

291
00:11:37,809 --> 00:11:42,009
find and I want to<font color="#CCCCCC"> get some you know</font>

292
00:11:39,879 --> 00:11:45,119
alerts popping up I want to<font color="#E5E5E5"> be able to</font>

293
00:11:42,009 --> 00:11:48,879
show all my friends how cool I am so

294
00:11:45,119 --> 00:11:51,459
someone called Mario hedrich found the

295
00:11:48,879 --> 00:11:53,499
<font color="#E5E5E5">first Sun box escape so the way it</font>

296
00:11:51,459 --> 00:11:55,300
<font color="#E5E5E5">worked was quite interesting so inside</font>

297
00:11:53,499 --> 00:11:57,189
an expression you could call a

298
00:11:55,300 --> 00:11:58,809
constructor and when you<font color="#CCCCCC"> call that</font>

299
00:11:57,189 --> 00:12:00,790
<font color="#E5E5E5">constructor you could call the</font>

300
00:11:58,809 --> 00:12:02,469
constructor of the constructor which

301
00:12:00,790 --> 00:12:05,920
then returns the function constructor

302
00:12:02,470 --> 00:12:07,509
which means you can then access evo so

303
00:12:05,920 --> 00:12:09,040
yo dawg i heard you like constructors

304
00:12:07,509 --> 00:12:10,120
this is essentially what<font color="#CCCCCC"> it</font><font color="#E5E5E5"> looked like</font>

305
00:12:09,040 --> 00:12:12,399
so you could call the constructor

306
00:12:10,120 --> 00:12:15,629
destructor the constructor and then the

307
00:12:12,399 --> 00:12:18,610
function you know alert nivo so

308
00:12:15,629 --> 00:12:21,550
obviously we're now on angular 1 point 5

309
00:12:18,610 --> 00:12:23,679
point something<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think but so that</font>

310
00:12:21,550 --> 00:12:25,300
<font color="#CCCCCC">we've</font><font color="#E5E5E5"> moved on a long way from there the</font>

311
00:12:23,679 --> 00:12:28,779
angular team fixed it you can no longer

312
00:12:25,300 --> 00:12:31,359
call constructor so then these guys come

313
00:12:28,779 --> 00:12:35,139
along so yarn horn garrotes<font color="#CCCCCC"> Mathias</font>

314
00:12:31,360 --> 00:12:37,120
Coulson gavel Mona have done some

315
00:12:35,139 --> 00:12:39,699
research into angular and they've

316
00:12:37,120 --> 00:12:40,959
essentially and their Twitter handles

317
00:12:39,699 --> 00:12:42,910
are<font color="#E5E5E5"> all there to check them out because</font>

318
00:12:40,959 --> 00:12:44,258
they always<font color="#E5E5E5"> like throw new interesting</font>

319
00:12:42,910 --> 00:12:45,879
things into the mix when<font color="#E5E5E5"> it comes to</font>

320
00:12:44,259 --> 00:12:48,519
cross-site scripting and so on and<font color="#E5E5E5"> so</font>

321
00:12:45,879 --> 00:12:51,189
forth and so these guys essentially

322
00:12:48,519 --> 00:12:54,309
found new ways to break out<font color="#CCCCCC"> of the Sun</font>

323
00:12:51,189 --> 00:12:56,379
box and I really would like to<font color="#E5E5E5"> explain</font>

324
00:12:54,309 --> 00:12:58,209
how half the stuff works but you know<font color="#E5E5E5"> my</font>

325
00:12:56,379 --> 00:12:59,259
brain is not<font color="#E5E5E5"> as big as theirs so</font>

326
00:12:58,209 --> 00:13:01,359
essentially you couldn't access

327
00:12:59,259 --> 00:13:04,179
constructor anymore<font color="#E5E5E5"> but</font><font color="#CCCCCC"> you could start</font>

328
00:13:01,360 --> 00:13:06,060
slowly you know access and modify things

329
00:13:04,179 --> 00:13:09,180
with inside what was

330
00:13:06,060 --> 00:13:11,729
more than<font color="#CCCCCC"> ever</font><font color="#E5E5E5"> within expression / right</font>

331
00:13:09,180 --> 00:13:13,949
sit here and there and you know you get

332
00:13:11,730 --> 00:13:15,510
your alert so you don't need<font color="#CCCCCC"> to</font>

333
00:13:13,950 --> 00:13:17,460
understand the whole premise of this you

334
00:13:15,510 --> 00:13:18,840
just<font color="#E5E5E5"> need to know that their</font><font color="#CCCCCC"> sandbox</font>

335
00:13:17,460 --> 00:13:21,360
escapes for<font color="#E5E5E5"> the later versions of</font>

336
00:13:18,840 --> 00:13:23,130
angular and then it kind of gets a bit

337
00:13:21,360 --> 00:13:26,040
weird so this guy must have been on

338
00:13:23,130 --> 00:13:28,230
something strange because any finds this

339
00:13:26,040 --> 00:13:30,750
kind of<font color="#CCCCCC"> pay</font><font color="#E5E5E5"> pay loads which allows you</font>

340
00:13:28,230 --> 00:13:32,640
to then create your alert and you know

341
00:13:30,750 --> 00:13:34,140
to<font color="#E5E5E5"> be honest it will take me about a</font>

342
00:13:32,640 --> 00:13:37,350
year to figure out how<font color="#CCCCCC"> that all actually</font>

343
00:13:34,140 --> 00:13:40,530
<font color="#E5E5E5">works so you know these researchers have</font>

344
00:13:37,350 --> 00:13:42,450
done fantastic work and you<font color="#CCCCCC"> know I am</font>

345
00:13:40,530 --> 00:13:43,770
for everyone in their debt and if I ever

346
00:13:42,450 --> 00:13:46,320
<font color="#E5E5E5">go to a security conference I'm</font>

347
00:13:43,770 --> 00:13:48,380
definitely going over there so they blow

348
00:13:46,320 --> 00:13:50,880
my mind there's but you should now know

349
00:13:48,380 --> 00:13:53,220
there's also a working bypass that why

350
00:13:50,880 --> 00:13:55,410
tested on one point<font color="#E5E5E5"> five point six it</font>

351
00:13:53,220 --> 00:13:58,740
does require use of interaction but

352
00:13:55,410 --> 00:14:01,829
essentially it's a bit strange it makes

353
00:13:58,740 --> 00:14:03,750
use of the copy paste thing with inside

354
00:14:01,830 --> 00:14:06,900
Firefox and opera don't think it works

355
00:14:03,750 --> 00:14:09,150
in firefox and so I chrome and then it

356
00:14:06,900 --> 00:14:10,740
creates like an SVG animation and so on

357
00:14:09,150 --> 00:14:13,890
<font color="#E5E5E5">and so forth for when they copy that</font>

358
00:14:10,740 --> 00:14:16,050
text and then paste it it then<font color="#E5E5E5"> you know</font>

359
00:14:13,890 --> 00:14:18,620
you can then click the animation and you

360
00:14:16,050 --> 00:14:21,209
have your alert there's a wonderful<font color="#CCCCCC"> blog</font>

361
00:14:18,620 --> 00:14:23,280
from the guys<font color="#CCCCCC"> at Port sugar and they go</font>

362
00:14:21,210 --> 00:14:25,410
into a lot<font color="#E5E5E5"> more detail on how sandbox</font>

363
00:14:23,280 --> 00:14:26,520
escapes actually work this is kind<font color="#E5E5E5"> of</font>

364
00:14:25,410 --> 00:14:28,500
just to show you that they're there<font color="#CCCCCC"> and</font>

365
00:14:26,520 --> 00:14:32,250
we should definitely<font color="#E5E5E5"> be utilizing them</font>

366
00:14:28,500 --> 00:14:34,080
when we're doing security assessments so

367
00:14:32,250 --> 00:14:36,240
I'm<font color="#E5E5E5"> going to civilize a somewhat 10</font>

368
00:14:34,080 --> 00:14:37,860
watts escape now you know I've always

369
00:14:36,240 --> 00:14:40,590
wanted to use a linkin park reference to

370
00:14:37,860 --> 00:14:43,290
their presentation so in the end<font color="#E5E5E5"> it does</font>

371
00:14:40,590 --> 00:14:45,540
not even matter developers can not rely

372
00:14:43,290 --> 00:14:47,490
on updating angular to be secure from

373
00:14:45,540 --> 00:14:49,050
these kind of attacks they have to make

374
00:14:47,490 --> 00:14:50,880
sure<font color="#E5E5E5"> that they you know you just can't</font>

375
00:14:49,050 --> 00:14:54,329
modify client site templates which is a

376
00:14:50,880 --> 00:14:55,950
very difficult chore essentially

377
00:14:54,330 --> 00:14:59,070
attackers have a universal sandbox and

378
00:14:55,950 --> 00:15:00,870
escape from version 1 all the way up to

379
00:14:59,070 --> 00:15:02,820
the latest<font color="#CCCCCC"> version</font><font color="#E5E5E5"> there's no ways to</font>

380
00:15:00,870 --> 00:15:04,110
break<font color="#CCCCCC"> up the sandbox</font><font color="#E5E5E5"> someone probably</font>

381
00:15:02,820 --> 00:15:06,480
aren't public which doesn't really

382
00:15:04,110 --> 00:15:08,220
require user interaction but you know

383
00:15:06,480 --> 00:15:10,970
it's safe<font color="#E5E5E5"> to say that you</font><font color="#CCCCCC"> know there's</font>

384
00:15:08,220 --> 00:15:13,680
definitely some issues with this<font color="#CCCCCC"> Sun box</font>

385
00:15:10,970 --> 00:15:16,530
if<font color="#E5E5E5"> you can find a way</font><font color="#CCCCCC"> to do expression</font>

386
00:15:13,680 --> 00:15:16,930
interpolation you're guaranteed XSS and

387
00:15:16,530 --> 00:15:19,959
pretty

388
00:15:16,930 --> 00:15:21,880
<font color="#CCCCCC">Jenny version of angular and it's if you</font>

389
00:15:19,960 --> 00:15:23,980
find if you decide to do some digging

390
00:15:21,880 --> 00:15:25,540
with inside angular it's very you know

391
00:15:23,980 --> 00:15:27,130
it's very<font color="#E5E5E5"> strange to see if they'll</font>

392
00:15:25,540 --> 00:15:28,839
actually fix it because they probably

393
00:15:27,130 --> 00:15:31,270
won't because I angular 2 is on<font color="#E5E5E5"> the way</font>

394
00:15:28,839 --> 00:15:32,770
and let's see what angular 2 has in

395
00:15:31,270 --> 00:15:34,990
store but at the moment it's still in

396
00:15:32,770 --> 00:15:36,310
development and I don't know if they've

397
00:15:34,990 --> 00:15:40,600
actually even implemented something like

398
00:15:36,310 --> 00:15:43,469
a sandbox yet so now I'm going<font color="#E5E5E5"> to move</font>

399
00:15:40,600 --> 00:15:48,100
on to content content security policy

400
00:15:43,470 --> 00:15:49,839
and if you don't know what<font color="#E5E5E5"> the content</font>

401
00:15:48,100 --> 00:15:53,080
security policy is essentially used in

402
00:15:49,839 --> 00:15:55,060
browsers to help<font color="#E5E5E5"> protect against XSS it</font>

403
00:15:53,080 --> 00:15:58,690
allows you to essentially define where

404
00:15:55,060 --> 00:16:00,699
scripts<font color="#E5E5E5"> are loaded and ran and a lot of</font>

405
00:15:58,690 --> 00:16:01,990
<font color="#E5E5E5">frameworks don't really work well with</font>

406
00:16:00,700 --> 00:16:04,410
CSP<font color="#E5E5E5"> and you have to do a lot of</font>

407
00:16:01,990 --> 00:16:07,540
configuration and<font color="#CCCCCC"> hacking around but</font>

408
00:16:04,410 --> 00:16:13,209
angular essentially harmonizes with CSP

409
00:16:07,540 --> 00:16:14,980
using its ng CSP directive and the whole

410
00:16:13,209 --> 00:16:16,779
summary of this really<font color="#CCCCCC"> is you know</font>

411
00:16:14,980 --> 00:16:18,310
abusing browser and framework

412
00:16:16,779 --> 00:16:22,140
functionality allows cross-site

413
00:16:18,310 --> 00:16:26,199
scripting even when<font color="#E5E5E5"> you have strict CSP</font>

414
00:16:22,140 --> 00:16:28,720
so the overall the the early bypasses

415
00:16:26,200 --> 00:16:30,160
were quite trivial on click isn't

416
00:16:28,720 --> 00:16:32,500
accessible obviously<font color="#CCCCCC"> cuz we're away from</font>

417
00:16:30,160 --> 00:16:35,050
the<font color="#CCCCCC"> Dom then you can abuse the framework</font>

418
00:16:32,500 --> 00:16:37,300
so what we had was an ng-click directive

419
00:16:35,050 --> 00:16:39,310
you can call event which leaks window

420
00:16:37,300 --> 00:16:41,140
and then you have your alert so then you

421
00:16:39,310 --> 00:16:42,989
can then process and evaluate it and

422
00:16:41,140 --> 00:16:45,279
then you have your cross-site scripting

423
00:16:42,990 --> 00:16:47,490
then they fix<font color="#E5E5E5"> that so that's a shame</font>

424
00:16:45,279 --> 00:16:49,779
then they have issues within the browser

425
00:16:47,490 --> 00:16:51,310
I'm not really<font color="#E5E5E5"> going to go into too</font><font color="#CCCCCC"> much</font>

426
00:16:49,779 --> 00:16:57,400
<font color="#CCCCCC">detail about</font><font color="#E5E5E5"> this but there's a really</font>

427
00:16:51,310 --> 00:16:59,770
<font color="#CCCCCC">good presentation by right now</font><font color="#E5E5E5"> it'll</font>

428
00:16:57,400 --> 00:17:02,920
<font color="#E5E5E5">come back to me he's essentially and it</font>

429
00:16:59,770 --> 00:17:05,470
<font color="#E5E5E5">abuses the es6 reflect api in chrome and</font>

430
00:17:02,920 --> 00:17:08,260
essentially use like a blob object to

431
00:17:05,470 --> 00:17:09,910
and it come and it reflects back to

432
00:17:08,260 --> 00:17:13,839
doubt the CSP headers<font color="#E5E5E5"> so you have your</font>

433
00:17:09,910 --> 00:17:14,949
cross-site scripting then again<font color="#E5E5E5"> the</font>

434
00:17:13,839 --> 00:17:17,079
<font color="#E5E5E5">linkin park reference doesn't even</font>

435
00:17:14,949 --> 00:17:19,959
matter because we have a universal CSP

436
00:17:17,079 --> 00:17:22,389
bypass with an angular so is anyone

437
00:17:19,959 --> 00:17:27,160
whitelist see the end in<font color="#CCCCCC"> there CSP if</font>

438
00:17:22,390 --> 00:17:30,730
they use CSP at all anyone anyone to

439
00:17:27,160 --> 00:17:34,510
yeah do you write lists the Ajax Google

440
00:17:30,730 --> 00:17:37,030
api's yes or no<font color="#CCCCCC"> no okay well you</font>

441
00:17:34,510 --> 00:17:38,590
shouldn't because here's why so think

442
00:17:37,030 --> 00:17:40,210
<font color="#E5E5E5">it's I'm going to try and explain it in</font>

443
00:17:38,590 --> 00:17:42,669
a way where it makes sense so I think

444
00:17:40,210 --> 00:17:45,160
<font color="#E5E5E5">that we're including a Content security</font>

445
00:17:42,670 --> 00:17:47,080
policy in PHP you know we're allowing

446
00:17:45,160 --> 00:17:49,870
scripts<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> loaded for Google api's</font>

447
00:17:47,080 --> 00:17:51,909
and then on the page there's this<font color="#CCCCCC"> and</font>

448
00:17:49,870 --> 00:17:56,469
<font color="#E5E5E5">you know get clearly get the parameter X</font>

449
00:17:51,910 --> 00:17:58,390
success so and then for example we have

450
00:17:56,470 --> 00:18:01,060
the page the example like this<font color="#E5E5E5"> you know</font>

451
00:17:58,390 --> 00:18:04,030
HTTP example.com<font color="#E5E5E5"> foo</font><font color="#CCCCCC"> excess and add some</font>

452
00:18:01,060 --> 00:18:07,510
evil code take a look<font color="#E5E5E5"> at this it is</font>

453
00:18:04,030 --> 00:18:09,820
essentially a universal CSP bypass so

454
00:18:07,510 --> 00:18:11,650
you can use your you can even if<font color="#E5E5E5"> that</font>

455
00:18:09,820 --> 00:18:13,389
application isn't using angular you can

456
00:18:11,650 --> 00:18:16,090
essentially hey<font color="#E5E5E5"> I'm going to bind</font>

457
00:18:13,390 --> 00:18:18,400
whatever I'm you know attaching to use

458
00:18:16,090 --> 00:18:21,250
that with the ng up to bootstrap angular

459
00:18:18,400 --> 00:18:23,230
you can then call ng CSP and then use

460
00:18:21,250 --> 00:18:25,600
the mg click directive and in call back

461
00:18:23,230 --> 00:18:27,760
the old school one that's now fixed in

462
00:18:25,600 --> 00:18:29,260
newer versions and then just include the

463
00:18:27,760 --> 00:18:31,660
earlier version<font color="#E5E5E5"> of angular that was</font>

464
00:18:29,260 --> 00:18:34,330
vulnerable and this overall basically

465
00:18:31,660 --> 00:18:36,100
gives you a universal in a CSP bypass

466
00:18:34,330 --> 00:18:37,510
regardless of as long as they're

467
00:18:36,100 --> 00:18:41,560
<font color="#CCCCCC">whitelisting that you know specific</font>

468
00:18:37,510 --> 00:18:43,000
domain so there's actually<font color="#CCCCCC"> quite a nice</font>

469
00:18:41,560 --> 00:18:46,270
challenge and I've turned<font color="#E5E5E5"> my antenna off</font>

470
00:18:43,000 --> 00:18:50,860
to go interest any of you guys there's a

471
00:18:46,270 --> 00:18:55,210
nice example on CSP bypasses and by the

472
00:18:50,860 --> 00:18:56,620
html5<font color="#E5E5E5"> team and examples I'll give up the</font>

473
00:18:55,210 --> 00:18:58,000
<font color="#E5E5E5">slides and you guys can check it out it</font>

474
00:18:56,620 --> 00:19:01,320
doesn't<font color="#CCCCCC"> work in chrome they've actually</font>

475
00:18:58,000 --> 00:19:04,150
blocked it it seems<font color="#CCCCCC"> the</font><font color="#E5E5E5"> works in firefox</font>

476
00:19:01,320 --> 00:19:06,220
now there's<font color="#CCCCCC"> em sanitizer bypasses</font>

477
00:19:04,150 --> 00:19:09,670
sanitizers you know the sanitizer is

478
00:19:06,220 --> 00:19:11,440
essentially an XSS filter inside angular

479
00:19:09,670 --> 00:19:13,870
there's a component<font color="#CCCCCC"> called to know</font>

480
00:19:11,440 --> 00:19:15,700
dollar<font color="#CCCCCC"> sanitize and it basically will</font>

481
00:19:13,870 --> 00:19:17,290
take a string<font color="#E5E5E5"> gain at all and in this is</font>

482
00:19:15,700 --> 00:19:18,880
actually used in expressions<font color="#CCCCCC"> I think as</font>

483
00:19:17,290 --> 00:19:20,230
well we're essentially returned the

484
00:19:18,880 --> 00:19:24,280
clean string ready to use within the

485
00:19:20,230 --> 00:19:26,880
view the old sanitizer when lease<font color="#CCCCCC"> but</font>

486
00:19:24,280 --> 00:19:30,879
when the guys started to look at it in

487
00:19:26,880 --> 00:19:34,240
2015 they found<font color="#E5E5E5"> out they're actually</font>

488
00:19:30,880 --> 00:19:36,790
using HTML parser from 2008 the<font color="#CCCCCC"> problem</font>

489
00:19:34,240 --> 00:19:38,419
is this could be bypassed by including

490
00:19:36,790 --> 00:19:40,309
an SVG image using the

491
00:19:38,419 --> 00:19:42,259
use elements which allows you to pull

492
00:19:40,309 --> 00:19:44,059
resources from a domain which means if

493
00:19:42,259 --> 00:19:46,580
you could find<font color="#E5E5E5"> the way</font><font color="#CCCCCC"> to store</font><font color="#E5E5E5"> xss on a</font>

494
00:19:44,059 --> 00:19:47,809
<font color="#E5E5E5">page or just that you know alert one and</font>

495
00:19:46,580 --> 00:19:50,629
so<font color="#CCCCCC"> on and</font><font color="#E5E5E5"> so forth you could then pull</font>

496
00:19:47,809 --> 00:19:52,158
that image in and have it then they

497
00:19:50,629 --> 00:19:54,738
realize<font color="#CCCCCC"> that was a problem</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> they fixed</font>

498
00:19:52,159 --> 00:19:56,330
<font color="#E5E5E5">it and now they use</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> and you're</font>

499
00:19:54,739 --> 00:19:58,399
basically<font color="#CCCCCC"> the new sanitizer users are</font>

500
00:19:56,330 --> 00:20:00,019
<font color="#E5E5E5">dumb and they use document</font>

501
00:19:58,399 --> 00:20:01,729
implementation which basically means

502
00:20:00,019 --> 00:20:02,960
we're going<font color="#E5E5E5"> to make a new fresh document</font>

503
00:20:01,730 --> 00:20:06,230
it's not<font color="#E5E5E5"> going to be vulnerable to</font>

504
00:20:02,960 --> 00:20:08,929
attacks and it can be<font color="#E5E5E5"> wrong but then</font>

505
00:20:06,230 --> 00:20:11,539
chrome comes into the mix where chrome

506
00:20:08,929 --> 00:20:15,499
isn't fixing their wonderful<font color="#CCCCCC"> unicode</font>

507
00:20:11,539 --> 00:20:17,869
issues so i don't know<font color="#E5E5E5"> if i don't know i</font>

508
00:20:15,499 --> 00:20:19,789
don't have an<font color="#E5E5E5"> example of that today</font><font color="#CCCCCC"> but</font>

509
00:20:17,869 --> 00:20:21,439
essentially the way it works is you can

510
00:20:19,789 --> 00:20:25,070
<font color="#E5E5E5">include a unicode that's essentially a</font>

511
00:20:21,440 --> 00:20:28,369
white space and with if you ever touch

512
00:20:25,070 --> 00:20:30,379
this with inner HTML it strips<font color="#E5E5E5"> away the</font>

513
00:20:28,369 --> 00:20:32,600
white space and then you can create<font color="#E5E5E5"> a</font>

514
00:20:30,379 --> 00:20:34,219
full<font color="#CCCCCC"> JavaScript your right and then that</font>

515
00:20:32,600 --> 00:20:37,488
will essentially allow you to then do

516
00:20:34,220 --> 00:20:38,989
cross-site scripting now<font color="#E5E5E5"> I'm going to go</font>

517
00:20:37,489 --> 00:20:42,049
into the war fun stuff on what you will

518
00:20:38,989 --> 00:20:44,269
probably highly likely find when you're

519
00:20:42,049 --> 00:20:46,129
testing applications everything that's

520
00:20:44,269 --> 00:20:48,980
going to be shown today i have found on

521
00:20:46,129 --> 00:20:52,939
client sites and they<font color="#E5E5E5"> probably still</font>

522
00:20:48,980 --> 00:20:54,559
haven't<font color="#E5E5E5"> fix them to be honest so we're</font>

523
00:20:52,940 --> 00:20:57,169
going to talk about explicitly trusting

524
00:20:54,559 --> 00:21:00,789
data so this means you know and you're

525
00:20:57,169 --> 00:21:00,789
taking user input into a you know

526
00:21:01,600 --> 00:21:07,969
explicitly<font color="#E5E5E5"> twisting it so there's</font>

527
00:21:05,119 --> 00:21:10,720
<font color="#E5E5E5">something called s s strict contextual</font>

528
00:21:07,970 --> 00:21:14,179
escaping with insides angular and

529
00:21:10,720 --> 00:21:15,769
essentially if you give<font color="#CCCCCC"> it a malicious</font>

530
00:21:14,179 --> 00:21:18,379
tag for essential image source<font color="#E5E5E5"> equals</font>

531
00:21:15,769 --> 00:21:20,450
something and then onmouseover or on

532
00:21:18,379 --> 00:21:22,189
error it essentially which strip out the

533
00:21:20,450 --> 00:21:28,609
on error and it will<font color="#E5E5E5"> just keep the rest</font>

534
00:21:22,190 --> 00:21:30,739
as a clean HTML so SC was introduced

535
00:21:28,609 --> 00:21:32,840
into angular from one plus two what 1.2

536
00:21:30,739 --> 00:21:36,190
so anything before that you'd have<font color="#E5E5E5"> to</font>

537
00:21:32,840 --> 00:21:39,109
manually add include the dependency

538
00:21:36,190 --> 00:21:42,080
module with inside your you know module

539
00:21:39,109 --> 00:21:43,189
itself and then you would need<font color="#CCCCCC"> to turn a</font>

540
00:21:42,080 --> 00:21:45,439
tongue so you

541
00:21:43,190 --> 00:21:48,380
to enable<font color="#E5E5E5"> SCE through the SC provider</font>

542
00:21:45,440 --> 00:21:50,600
and enable it so whenever<font color="#CCCCCC"> you're looking</font>

543
00:21:48,380 --> 00:21:54,020
<font color="#E5E5E5">at applications that are earlier than</font>

544
00:21:50,600 --> 00:21:55,280
1.2 and you can start<font color="#CCCCCC"> looking for these</font>

545
00:21:54,020 --> 00:21:56,900
attributes to see if they've been

546
00:21:55,280 --> 00:21:58,639
<font color="#E5E5E5">attacked if not they're not really using</font>

547
00:21:56,900 --> 00:22:01,400
the feature and they could be vulnerable

548
00:21:58,640 --> 00:22:03,320
to cross-site scripting so and it also

549
00:22:01,400 --> 00:22:05,690
can be disabled all together by using

550
00:22:03,320 --> 00:22:08,470
the same thing we're just turning it to

551
00:22:05,690 --> 00:22:12,320
false don't do this because anything

552
00:22:08,470 --> 00:22:14,750
specified with an<font color="#CCCCCC"> NG ba ng bayan HTML</font>

553
00:22:12,320 --> 00:22:16,820
directive will cause cross-site

554
00:22:14,750 --> 00:22:20,720
scripting if it allows you know if it's

555
00:22:16,820 --> 00:22:22,990
taken from user input so yeah you can

556
00:22:20,720 --> 00:22:26,540
sell<font color="#CCCCCC"> it to false and then it turns off</font>

557
00:22:22,990 --> 00:22:29,290
then you need to once<font color="#E5E5E5"> you are using a</font>

558
00:22:26,540 --> 00:22:32,060
version which has it you know included

559
00:22:29,290 --> 00:22:36,050
<font color="#E5E5E5">you essentially can set things to the</font>

560
00:22:32,060 --> 00:22:39,320
energy by an HTML and the mg<font color="#CCCCCC"> buying</font><font color="#E5E5E5"> HTML</font>

561
00:22:36,050 --> 00:22:41,480
essentially evaluates an expression and

562
00:22:39,320 --> 00:22:43,879
inserts the result and<font color="#CCCCCC"> the resulting</font>

563
00:22:41,480 --> 00:22:47,330
HTML into an element in a secure way

564
00:22:43,880 --> 00:22:49,850
unless<font color="#E5E5E5"> you can basically directly say no</font>

565
00:22:47,330 --> 00:22:53,090
I'm going<font color="#E5E5E5"> to explicitly trust this data</font>

566
00:22:49,850 --> 00:22:55,520
so you<font color="#E5E5E5"> have some functions within SCE</font>

567
00:22:53,090 --> 00:22:57,649
called trust as and then you essentially

568
00:22:55,520 --> 00:23:01,160
can define a type the only thing that

569
00:22:57,650 --> 00:23:04,010
works works with ng<font color="#CCCCCC"> by HTML is trust as</font>

570
00:23:01,160 --> 00:23:06,200
HTML but the developers and angular

571
00:23:04,010 --> 00:23:08,540
release stuff like trust as<font color="#E5E5E5"> JavaScript</font>

572
00:23:06,200 --> 00:23:10,730
trust as CSS and so on<font color="#E5E5E5"> and so forth and</font>

573
00:23:08,540 --> 00:23:13,430
these can be deployed in people's people

574
00:23:10,730 --> 00:23:15,440
who make custom directives you<font color="#E5E5E5"> also have</font>

575
00:23:13,430 --> 00:23:16,880
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> the SC trust as direct and just</font>

576
00:23:15,440 --> 00:23:20,030
give it a value and<font color="#E5E5E5"> this would trust it</font>

577
00:23:16,880 --> 00:23:22,700
and<font color="#E5E5E5"> now I'm going to try and and we just</font>

578
00:23:20,030 --> 00:23:25,280
show this in a demo so for example think

579
00:23:22,700 --> 00:23:27,770
of this as we have<font color="#E5E5E5"> an appt we have a</font>

580
00:23:25,280 --> 00:23:31,910
controller and we're in ng binding HTML

581
00:23:27,770 --> 00:23:35,330
hello then we have<font color="#E5E5E5"> our book their</font>

582
00:23:31,910 --> 00:23:37,640
controller and essentially oh well I

583
00:23:35,330 --> 00:23:39,590
change this very briefly before I came

584
00:23:37,640 --> 00:23:40,940
came on<font color="#CCCCCC"> and displayed this but so</font>

585
00:23:39,590 --> 00:23:42,590
essentially this is<font color="#E5E5E5"> supposed to reflect</font>

586
00:23:40,940 --> 00:23:45,130
what's<font color="#CCCCCC"> in the controller and we're</font>

587
00:23:42,590 --> 00:23:47,929
calling SCH rust-eze HTML and

588
00:23:45,130 --> 00:23:50,420
essentially this is malicious because it

589
00:23:47,930 --> 00:23:53,350
has an on mouseover event and it will do

590
00:23:50,420 --> 00:23:55,150
the<font color="#CCCCCC"> javascript function so now</font>

591
00:23:53,350 --> 00:24:04,990
pray to the demo gods that this is going

592
00:23:55,150 --> 00:24:05,950
to<font color="#E5E5E5"> work so i can't see it cool</font><font color="#CCCCCC"> i know</font>

593
00:24:04,990 --> 00:24:09,580
<font color="#CCCCCC">i'm</font><font color="#E5E5E5"> going to have to do</font><font color="#CCCCCC"> this like this</font>

594
00:24:05,950 --> 00:24:13,809
so i have essentially an application i

595
00:24:09,580 --> 00:24:18,240
have built within digital and it's got

596
00:24:13,809 --> 00:24:18,240
some angularjs related vulnerabilities

597
00:24:19,140 --> 00:24:26,890
so we have a bookmarks application it's

598
00:24:23,830 --> 00:24:29,260
<font color="#E5E5E5">better than pinboard obviously and so if</font>

599
00:24:26,890 --> 00:24:32,799
we<font color="#E5E5E5"> go to bookmarks and essentially</font>

600
00:24:29,260 --> 00:24:36,908
inspect this element which is<font color="#E5E5E5"> very</font>

601
00:24:32,799 --> 00:24:41,559
difficult to do how<font color="#E5E5E5"> do you see it</font><font color="#CCCCCC"> okay</font>

602
00:24:36,909 --> 00:24:45,370
so if we inspect this element and it's

603
00:24:41,559 --> 00:24:48,129
over<font color="#E5E5E5"> here one second the demo gods are</font>

604
00:24:45,370 --> 00:24:49,239
not well today so as<font color="#E5E5E5"> you can see it's</font>

605
00:24:48,130 --> 00:24:50,919
probably quite difficult to see because

606
00:24:49,240 --> 00:24:55,840
<font color="#E5E5E5">I</font><font color="#CCCCCC"> can't hardly</font><font color="#E5E5E5"> see it but we have em gee</font>

607
00:24:50,919 --> 00:25:00,000
by<font color="#E5E5E5"> HTML and the bookmark name now if we</font>

608
00:24:55,840 --> 00:25:02,889
do the same for this year the URL itself

609
00:25:00,000 --> 00:25:04,690
as you can see we're doing mg by Hinkley

610
00:25:02,890 --> 00:25:07,720
marble or explicitly trusting the data

611
00:25:04,690 --> 00:25:09,760
so anything<font color="#CCCCCC"> that gets you know entered</font>

612
00:25:07,720 --> 00:25:13,659
in there is going to you know creating<font color="#E5E5E5"> a</font>

613
00:25:09,760 --> 00:25:19,419
lot I can't see anything<font color="#E5E5E5"> now know what's</font>

614
00:25:13,659 --> 00:25:20,860
going on that's not good<font color="#E5E5E5"> it just close</font>

615
00:25:19,419 --> 00:25:23,380
<font color="#E5E5E5">this down and see if that gets rid of it</font>

616
00:25:20,860 --> 00:25:29,949
there you go so let's<font color="#CCCCCC"> just say script</font>

617
00:25:23,380 --> 00:25:34,110
alert one in the first<font color="#E5E5E5"> one and</font><font color="#CCCCCC"> we'll</font>

618
00:25:29,950 --> 00:25:34,110
call<font color="#CCCCCC"> this one script alert to</font>

619
00:25:34,509 --> 00:25:39,429
so if we submit that it could have

620
00:25:37,929 --> 00:25:41,409
explicitly trusted we now have a

621
00:25:39,429 --> 00:25:44,289
cross-site scripting by as you can see

622
00:25:41,409 --> 00:25:46,389
<font color="#E5E5E5">only</font><font color="#CCCCCC"> two displayed only because we</font>

623
00:25:44,289 --> 00:25:48,940
explicitly trusting the data I've seen

624
00:25:46,389 --> 00:25:50,168
<font color="#E5E5E5">as on bail probably four or five client</font>

625
00:25:48,940 --> 00:25:52,749
sites where<font color="#CCCCCC"> there have been explicitly</font>

626
00:25:50,169 --> 00:25:53,739
twisting data from either<font color="#E5E5E5"> okay because</font>

627
00:25:52,749 --> 00:25:55,449
everyone now likes to work in

628
00:25:53,739 --> 00:25:58,299
<font color="#E5E5E5">bleeding-edge framework so everyone's</font>

629
00:25:55,449 --> 00:26:00,219
using the mean stack and they're storing

630
00:25:58,299 --> 00:26:03,849
stuff in a manga collection and echoing

631
00:26:00,219 --> 00:26:05,289
it out in a note rustic<font color="#E5E5E5"> nana so</font><font color="#CCCCCC"> i'm</font>

632
00:26:03,849 --> 00:26:07,089
<font color="#E5E5E5">going to delete that and then carry on</font>

633
00:26:05,289 --> 00:26:09,009
back into<font color="#CCCCCC"> the thing where that shows you</font>

634
00:26:07,089 --> 00:26:10,979
like explicitly explicitly trusting data

635
00:26:09,009 --> 00:26:13,329
is bad and you should not do it

636
00:26:10,979 --> 00:26:16,299
<font color="#E5E5E5">unnatural confident the source isn't</font>

637
00:26:13,329 --> 00:26:17,889
going to be changed so that's this is<font color="#CCCCCC"> a</font>

638
00:26:16,299 --> 00:26:20,889
screenshot just showing that it works

639
00:26:17,889 --> 00:26:24,039
just in case the demo<font color="#E5E5E5"> fell over and then</font>

640
00:26:20,889 --> 00:26:26,948
there's<font color="#E5E5E5"> also something and within a</font>

641
00:26:24,039 --> 00:26:28,899
scope object called eval so you can't do

642
00:26:26,949 --> 00:26:30,549
generic you know evaluations with

643
00:26:28,899 --> 00:26:35,468
<font color="#CCCCCC">JavaScript eval because we're not</font>

644
00:26:30,549 --> 00:26:37,299
accessing it this allows you to do a bit

645
00:26:35,469 --> 00:26:40,779
more complex<font color="#CCCCCC"> Java related stuff but you</font>

646
00:26:37,299 --> 00:26:43,918
still can't and directly access things

647
00:26:40,779 --> 00:26:46,839
like you<font color="#CCCCCC"> know and just do an alert so</font>

648
00:26:43,919 --> 00:26:50,469
<font color="#E5E5E5">the eval function evaluates angular</font>

649
00:26:46,839 --> 00:26:52,779
expressions so an actual secure version

650
00:26:50,469 --> 00:26:55,690
way of doing it is to essentially and

651
00:26:52,779 --> 00:26:57,399
this is this translate to scope eval I

652
00:26:55,690 --> 00:27:00,699
want to evaluate scope a and scope be

653
00:26:57,399 --> 00:27:03,998
and you can also evaluate functions so a

654
00:27:00,699 --> 00:27:06,579
function name and so on and<font color="#E5E5E5"> so forth so</font>

655
00:27:03,999 --> 00:27:08,319
if what<font color="#E5E5E5"> I what I found from testing</font>

656
00:27:06,579 --> 00:27:10,509
angular you know if the data is not

657
00:27:08,319 --> 00:27:13,719
wrapped within single quote ations this

658
00:27:10,509 --> 00:27:16,690
can cause security issues so if we<font color="#CCCCCC"> look</font>

659
00:27:13,719 --> 00:27:18,039
the same thing<font color="#CCCCCC"> but explicitly you know</font>

660
00:27:16,690 --> 00:27:22,179
call in the data without wraps and

661
00:27:18,039 --> 00:27:24,158
single rotations this is vulnerable to

662
00:27:22,179 --> 00:27:26,859
cross-site scripting and it also allows

663
00:27:24,159 --> 00:27:30,639
you to access things within<font color="#E5E5E5"> scope and</font>

664
00:27:26,859 --> 00:27:32,649
<font color="#CCCCCC">the root scope so an example of this</font>

665
00:27:30,639 --> 00:27:34,329
this is the secure way of doing it as

666
00:27:32,649 --> 00:27:35,559
you can we don't<font color="#E5E5E5"> really need to go into</font>

667
00:27:34,329 --> 00:27:37,329
too<font color="#CCCCCC"> much about this because we've</font>

668
00:27:35,559 --> 00:27:38,918
already talked about<font color="#E5E5E5"> today essentially</font>

669
00:27:37,329 --> 00:27:41,349
we have a<font color="#CCCCCC"> function here that's called</font><font color="#E5E5E5"> in</font>

670
00:27:38,919 --> 00:27:43,209
scope<font color="#E5E5E5"> evo and</font><font color="#CCCCCC"> its setting it's a</font><font color="#E5E5E5"> message</font>

671
00:27:41,349 --> 00:27:45,450
so anything within a it's going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

672
00:27:43,209 --> 00:27:45,450
evaluated

673
00:27:46,279 --> 00:27:49,580
the insecure way of doing it would be

674
00:27:47,809 --> 00:27:51,859
you know to include the scope pay and

675
00:27:49,580 --> 00:27:53,449
this would<font color="#E5E5E5"> actually allow you to one</font><font color="#CCCCCC"> use</font>

676
00:27:51,859 --> 00:27:55,009
<font color="#E5E5E5">if they're</font><font color="#CCCCCC"> using an earlier version of</font>

677
00:27:53,450 --> 00:27:56,179
angular that you know a sandbox escape

678
00:27:55,009 --> 00:27:57,830
to you could use that and it would

679
00:27:56,179 --> 00:28:00,409
evaluate it and you'll get your alerts

680
00:27:57,830 --> 00:28:02,928
or you could directly cool functions on

681
00:28:00,409 --> 00:28:04,820
<font color="#CCCCCC">the client and that's you know not great</font>

682
00:28:02,929 --> 00:28:06,320
because for example that these functions

683
00:28:04,820 --> 00:28:08,299
might go away<font color="#E5E5E5"> and call the server and</font>

684
00:28:06,320 --> 00:28:12,009
you might<font color="#E5E5E5"> be able to do it additional</font>

685
00:28:08,299 --> 00:28:14,690
elevated privileges attacks from this

686
00:28:12,009 --> 00:28:18,710
now I'm going to<font color="#E5E5E5"> move on to client-side</font>

687
00:28:14,690 --> 00:28:20,929
routing an authorization so this<font color="#CCCCCC"> is</font>

688
00:28:18,710 --> 00:28:22,519
quite<font color="#E5E5E5"> a bit a lot of things to take in</font>

689
00:28:20,929 --> 00:28:24,769
<font color="#CCCCCC">but essentially there's</font><font color="#E5E5E5"> that there's</font>

690
00:28:22,519 --> 00:28:26,059
<font color="#E5E5E5">been a few online blogs on how hey</font>

691
00:28:24,769 --> 00:28:27,649
here's how to like kick start your

692
00:28:26,059 --> 00:28:29,779
application using client-side routing

693
00:28:27,649 --> 00:28:31,218
I've unfortunately had the pleasure of

694
00:28:29,779 --> 00:28:34,639
testing some of these applications are

695
00:28:31,219 --> 00:28:36,739
not very<font color="#E5E5E5"> good</font><font color="#CCCCCC"> so permission models on</font>

696
00:28:34,639 --> 00:28:38,658
<font color="#E5E5E5">the client and as you can see there's</font>

697
00:28:36,739 --> 00:28:40,759
something called this so as we saw

698
00:28:38,659 --> 00:28:42,979
before we have essentially we're

699
00:28:40,759 --> 00:28:44,719
including ng<font color="#E5E5E5"> well and when we're</font>

700
00:28:42,979 --> 00:28:46,609
basically dependency injecting the bell

701
00:28:44,719 --> 00:28:48,529
provider then we're calling the route

702
00:28:46,609 --> 00:28:50,689
provider and then when someone browsers

703
00:28:48,529 --> 00:28:54,950
this resource you're loading the page

704
00:28:50,690 --> 00:28:56,330
loading a partial page and not entirely

705
00:28:54,950 --> 00:28:57,619
sure what others then you in calling the

706
00:28:56,330 --> 00:28:59,509
controller and what's going to<font color="#CCCCCC"> be doing</font>

707
00:28:57,619 --> 00:29:01,129
and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> this resolve it essentially I</font>

708
00:28:59,509 --> 00:29:05,839
want to validate that someone who's

709
00:29:01,129 --> 00:29:07,519
authorized or is an administrator you

710
00:29:05,839 --> 00:29:08,749
know and this is<font color="#E5E5E5"> all on</font><font color="#CCCCCC"> the claim you</font>

711
00:29:07,519 --> 00:29:10,339
know we can<font color="#E5E5E5"> do some very malicious</font>

712
00:29:08,749 --> 00:29:12,529
things with this which means we could

713
00:29:10,339 --> 00:29:14,178
<font color="#E5E5E5">modify them on the client and then if</font>

714
00:29:12,529 --> 00:29:16,009
they're not validating on the server we

715
00:29:14,179 --> 00:29:17,479
can gain access and that's generally you

716
00:29:16,009 --> 00:29:19,820
know what most up web applications do

717
00:29:17,479 --> 00:29:21,919
but unfortunately because of this you

718
00:29:19,820 --> 00:29:23,599
know move to everything into the client

719
00:29:21,919 --> 00:29:26,869
it's becoming more and<font color="#E5E5E5"> more common to</font>

720
00:29:23,599 --> 00:29:28,668
see these<font color="#E5E5E5"> kind of attacks so you know</font>

721
00:29:26,869 --> 00:29:30,259
the long<font color="#E5E5E5"> story short of it is you</font>

722
00:29:28,669 --> 00:29:32,149
wouldn't shouldn't really you know

723
00:29:30,259 --> 00:29:35,119
Trista client you know<font color="#E5E5E5"> really should be</font>

724
00:29:32,149 --> 00:29:37,218
only considered like an experience for

725
00:29:35,119 --> 00:29:40,849
the user<font color="#E5E5E5"> and optimizing the business</font>

726
00:29:37,219 --> 00:29:42,379
logic so for example applications in

727
00:29:40,849 --> 00:29:44,869
especially with<font color="#E5E5E5"> JavaScript generally</font>

728
00:29:42,379 --> 00:29:46,820
tend to store like the first name the

729
00:29:44,869 --> 00:29:48,349
last name the role and so on<font color="#E5E5E5"> and so</font>

730
00:29:46,820 --> 00:29:50,599
forth within like session storage or

731
00:29:48,349 --> 00:29:52,009
local storage and then that's because

732
00:29:50,599 --> 00:29:53,089
they when they refresh the page they're

733
00:29:52,009 --> 00:29:54,259
not they're going<font color="#E5E5E5"> to have a persistent</font>

734
00:29:53,089 --> 00:29:55,879
you know model when they can actually

735
00:29:54,259 --> 00:29:58,030
you know the users don't have to keep

736
00:29:55,879 --> 00:30:00,230
the dog Ewing so on and so forth

737
00:29:58,030 --> 00:30:02,030
so you know any authentication

738
00:30:00,230 --> 00:30:03,440
authorization on the client can be

739
00:30:02,030 --> 00:30:05,780
bypassed you know it's on the clients

740
00:30:03,440 --> 00:30:07,880
you<font color="#CCCCCC"> have access to it and you know any</font>

741
00:30:05,780 --> 00:30:10,940
authorization authentication has to be

742
00:30:07,880 --> 00:30:14,030
on force<font color="#CCCCCC"> on the server so never trust a</font>

743
00:30:10,940 --> 00:30:16,880
claim so this one I'm going<font color="#E5E5E5"> to give</font><font color="#CCCCCC"> it a</font>

744
00:30:14,030 --> 00:30:19,040
demo and I'm going to<font color="#E5E5E5"> have to log out</font>

745
00:30:16,880 --> 00:30:20,960
this user because he is an admin this is

746
00:30:19,040 --> 00:30:24,830
<font color="#E5E5E5">going to be very</font><font color="#CCCCCC"> difficult to do</font><font color="#E5E5E5"> so I've</font>

747
00:30:20,960 --> 00:30:34,880
made a steel con user called steel con

748
00:30:24,830 --> 00:30:36,530
still not info and is very<font color="#E5E5E5"> secure no</font>

749
00:30:34,880 --> 00:30:40,730
it's not<font color="#E5E5E5"> the right password because it's</font>

750
00:30:36,530 --> 00:30:42,740
still Connor there we go so at the

751
00:30:40,730 --> 00:30:45,140
moment I'm a<font color="#E5E5E5"> normal user I don't have</font>

752
00:30:42,740 --> 00:30:47,120
opening privileges but on this page and

753
00:30:45,140 --> 00:30:48,620
I would view the source but now we'll go

754
00:30:47,120 --> 00:30:50,600
horribly wrong so I'll just<font color="#CCCCCC"> kind of give</font>

755
00:30:48,620 --> 00:30:52,699
you a summary on this page it's checking

756
00:30:50,600 --> 00:30:54,500
to see if the<font color="#CCCCCC"> person is an admin and it</font>

757
00:30:52,700 --> 00:30:57,140
will<font color="#E5E5E5"> give them an additional you know</font>

758
00:30:54,500 --> 00:30:59,900
thing in<font color="#E5E5E5"> this drop-down the problem is</font>

759
00:30:57,140 --> 00:31:02,150
they're using session storage along with

760
00:30:59,900 --> 00:31:04,280
client-side welting with no service I

761
00:31:02,150 --> 00:31:06,290
protection which means if you modify on

762
00:31:04,280 --> 00:31:08,000
a client you're going to essentially

763
00:31:06,290 --> 00:31:10,030
elevate your privilege and see resources

764
00:31:08,000 --> 00:31:13,070
that you shouldn't have an hour to see

765
00:31:10,030 --> 00:31:18,500
so as I said they're using session

766
00:31:13,070 --> 00:31:23,919
storage so if we<font color="#E5E5E5"> go into resources and I</font>

767
00:31:18,500 --> 00:31:23,920
can't see that session storage open

768
00:31:24,720 --> 00:31:31,670
what there is

769
00:31:29,420 --> 00:31:35,210
it's not<font color="#E5E5E5"> right I'll do it I'll change it</font>

770
00:31:31,670 --> 00:31:36,860
over here<font color="#E5E5E5"> and then show you that was in</font>

771
00:31:35,210 --> 00:31:41,600
cookies that's the reason I can do it

772
00:31:36,860 --> 00:31:43,669
<font color="#CCCCCC">okay so just to briefly show you the</font>

773
00:31:41,600 --> 00:31:45,889
session storage looks like this we have

774
00:31:43,670 --> 00:31:47,720
the username steel con we have the role

775
00:31:45,890 --> 00:31:50,930
which is currently blank the first name

776
00:31:47,720 --> 00:31:57,860
and the last name so if i change the

777
00:31:50,930 --> 00:32:00,920
role to<font color="#E5E5E5"> obviously reflect an admin so</font>

778
00:31:57,860 --> 00:32:02,360
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> mel saved and if I at the moment</font>

779
00:32:00,920 --> 00:32:04,100
it still should have deflected because

780
00:32:02,360 --> 00:32:05,899
it hasn't been updated with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> object</font>

781
00:32:04,100 --> 00:32:07,310
model but applications generally do

782
00:32:05,900 --> 00:32:11,900
store things in session storage like

783
00:32:07,310 --> 00:32:14,300
this refresh now I should have<font color="#CCCCCC"> access to</font>

784
00:32:11,900 --> 00:32:16,160
the admin hall and you know I've gained

785
00:32:14,300 --> 00:32:17,240
full control and the<font color="#E5E5E5"> problem is I</font>

786
00:32:16,160 --> 00:32:19,100
shouldn't be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to delete users</font>

787
00:32:17,240 --> 00:32:23,180
because is actually security protections

788
00:32:19,100 --> 00:32:25,219
on that the user didn't disappear so

789
00:32:23,180 --> 00:32:27,620
that's kind of given you a summary do

790
00:32:25,220 --> 00:32:29,480
not you know trust<font color="#E5E5E5"> the client you know</font>

791
00:32:27,620 --> 00:32:31,370
it's one<font color="#E5E5E5"> of those</font><font color="#CCCCCC"> things that we already</font>

792
00:32:29,480 --> 00:32:32,570
all know but it's definitely a more

793
00:32:31,370 --> 00:32:39,800
common occurrence you're going to see

794
00:32:32,570 --> 00:32:42,830
with an angular application<font color="#E5E5E5"> ok this is</font>

795
00:32:39,800 --> 00:32:48,860
wrong it's meant to say client site

796
00:32:42,830 --> 00:32:51,350
template injection so we have<font color="#E5E5E5"> different</font>

797
00:32:48,860 --> 00:32:53,479
<font color="#E5E5E5">kinds of templates so we have the server</font>

798
00:32:51,350 --> 00:32:59,030
<font color="#CCCCCC">site templates that generally are and</font>

799
00:32:53,480 --> 00:33:01,640
Jade or ejs or pug there's also JP JSP

800
00:32:59,030 --> 00:33:04,790
for java and smarty in example I'm using

801
00:33:01,640 --> 00:33:07,520
today is Jade but the demo or the actual

802
00:33:04,790 --> 00:33:09,080
explanations in ejs<font color="#E5E5E5"> there then you also</font>

803
00:33:07,520 --> 00:33:15,680
have<font color="#E5E5E5"> the client site templates which are</font>

804
00:33:09,080 --> 00:33:17,449
angularjs and react so you know mixing

805
00:33:15,680 --> 00:33:21,320
these these templates on the server side

806
00:33:17,450 --> 00:33:22,400
and the client side and you can

807
00:33:21,320 --> 00:33:25,250
basically cause cross-site scripting

808
00:33:22,400 --> 00:33:27,530
without having to even write scripts so

809
00:33:25,250 --> 00:33:29,330
user input is added to the<font color="#E5E5E5"> server-side</font>

810
00:33:27,530 --> 00:33:32,700
template and is sent to the<font color="#E5E5E5"> client site</font>

811
00:33:29,330 --> 00:33:35,610
template you know the server

812
00:33:32,700 --> 00:33:38,280
all escape or encode malicious type you

813
00:33:35,610 --> 00:33:41,159
know the flags such as less than<font color="#E5E5E5"> greater</font>

814
00:33:38,280 --> 00:33:42,660
than and so on and<font color="#E5E5E5"> so forth but within</font>

815
00:33:41,160 --> 00:33:46,200
an angular expression it's not really

816
00:33:42,660 --> 00:33:48,450
classed as malicious so it<font color="#E5E5E5"> won't be</font>

817
00:33:46,200 --> 00:33:50,640
escaped on<font color="#E5E5E5"> the server and it will</font>

818
00:33:48,450 --> 00:33:52,760
eventually<font color="#CCCCCC"> be executed when it gets sent</font>

819
00:33:50,640 --> 00:33:55,260
<font color="#E5E5E5">back to the client to be processed and</font>

820
00:33:52,760 --> 00:33:57,900
it'll run you know within the sandbox

821
00:33:55,260 --> 00:34:01,790
and it won't and then but avoid mixing

822
00:33:57,900 --> 00:34:04,290
them so this is<font color="#CCCCCC"> not a nice little</font>

823
00:34:01,790 --> 00:34:06,659
diagram the colors are a bit broken

824
00:34:04,290 --> 00:34:08,310
because of the screen but when you're

825
00:34:06,660 --> 00:34:10,470
talking about template inject injection

826
00:34:08,310 --> 00:34:12,570
and malicious angular JS code is

827
00:34:10,469 --> 00:34:14,909
injected so if you're allowing user

828
00:34:12,570 --> 00:34:17,160
input to be<font color="#E5E5E5"> sent to the server then the</font>

829
00:34:14,909 --> 00:34:19,230
template engine will only escape page<font color="#CCCCCC"> 2</font>

830
00:34:17,159 --> 00:34:20,549
more special characters and then it's

831
00:34:19,230 --> 00:34:22,500
essentially sent to the client side

832
00:34:20,550 --> 00:34:25,290
where it will render the angularjs

833
00:34:22,500 --> 00:34:29,790
expression and the malicious code will

834
00:34:25,290 --> 00:34:32,690
be executed so<font color="#E5E5E5"> the civilization codes we</font>

835
00:34:29,790 --> 00:34:35,250
have a parameter called name which is

836
00:34:32,690 --> 00:34:37,710
<font color="#E5E5E5">wrapped inside interpolations</font><font color="#CCCCCC"> German</font>

837
00:34:35,250 --> 00:34:40,710
characters on the server we're rendering

838
00:34:37,710 --> 00:34:42,590
the<font color="#CCCCCC"> AGS template and were also allowing</font>

839
00:34:40,710 --> 00:34:46,409
that we're taking in the name parameter

840
00:34:42,590 --> 00:34:48,660
so an example of this pursuing a

841
00:34:46,409 --> 00:34:51,389
controller has a logout function we can

842
00:34:48,659 --> 00:34:53,190
<font color="#E5E5E5">call</font><font color="#CCCCCC"> this and you know this name equals</font>

843
00:34:51,389 --> 00:34:55,560
<font color="#E5E5E5">to curly braces and call the function</font>

844
00:34:53,190 --> 00:34:56,820
and then it would essentially look like

845
00:34:55,560 --> 00:35:01,470
this and you would call the logout

846
00:34:56,820 --> 00:35:04,950
function so this<font color="#E5E5E5"> is another demo I'm</font>

847
00:35:01,470 --> 00:35:07,200
going to show and this is<font color="#E5E5E5"> a more common</font>

848
00:35:04,950 --> 00:35:08,850
thing that<font color="#CCCCCC"> you'll see in</font><font color="#E5E5E5"> the wild mainly</font>

849
00:35:07,200 --> 00:35:09,899
<font color="#CCCCCC">because for example if you go to ports</font>

850
00:35:08,850 --> 00:35:11,460
we're going to look at their release of

851
00:35:09,900 --> 00:35:14,330
the blogs they've actually found some

852
00:35:11,460 --> 00:35:17,580
issues like<font color="#CCCCCC"> this in the world recently</font>

853
00:35:14,330 --> 00:35:19,110
so we have a name function here with the

854
00:35:17,580 --> 00:35:22,110
search that basically searches for

855
00:35:19,110 --> 00:35:23,340
bookmarks from you know<font color="#E5E5E5"> the name and you</font>

856
00:35:22,110 --> 00:35:25,320
know if I search for<font color="#E5E5E5"> Lewis it's going to</font>

857
00:35:23,340 --> 00:35:27,210
return<font color="#E5E5E5"> Lewis they search for steel</font><font color="#CCCCCC"> cron</font>

858
00:35:25,320 --> 00:35:31,110
it's going<font color="#E5E5E5"> to return steel chrome but</font>

859
00:35:27,210 --> 00:35:33,450
the<font color="#E5E5E5"> problem is if i can add you know</font>

860
00:35:31,110 --> 00:35:35,040
angle brackets and the server takes it

861
00:35:33,450 --> 00:35:37,700
and protesters it<font color="#E5E5E5"> and sends it back</font><font color="#CCCCCC"> to</font>

862
00:35:35,040 --> 00:35:40,890
the server this should evaluate to free

863
00:35:37,700 --> 00:35:43,129
which it does now that's you know

864
00:35:40,890 --> 00:35:45,480
<font color="#CCCCCC">interesting but it's not really</font><font color="#E5E5E5"> a</font>

865
00:35:43,130 --> 00:35:46,560
security flaw in itself

866
00:35:45,480 --> 00:35:49,440
so what I'm going to do is this

867
00:35:46,560 --> 00:35:51,810
<font color="#CCCCCC">application is using angular version 1.4</font>

868
00:35:49,440 --> 00:35:53,550
point for and it has an own sandbox

869
00:35:51,810 --> 00:35:55,890
about a breakout string that we can do

870
00:35:53,550 --> 00:35:57,359
so it kind of looks like<font color="#E5E5E5"> this I showed</font>

871
00:35:55,890 --> 00:35:59,400
<font color="#E5E5E5">you here first it's kind of the same</font>

872
00:35:57,359 --> 00:36:03,150
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> that we did or we showed you for</font>

873
00:35:59,400 --> 00:36:04,590
1.0 so within here we could send it it

874
00:36:03,150 --> 00:36:06,270
will<font color="#E5E5E5"> get processed by the server and</font>

875
00:36:04,590 --> 00:36:08,940
then it comes<font color="#E5E5E5"> back to the client and</font>

876
00:36:06,270 --> 00:36:10,859
there you go you<font color="#CCCCCC"> have your alert now</font>

877
00:36:08,940 --> 00:36:12,780
that's not just thing that you can do

878
00:36:10,859 --> 00:36:14,160
you cannot<font color="#E5E5E5"> are this actually really</font>

879
00:36:12,780 --> 00:36:20,100
breaks up the application one because

880
00:36:14,160 --> 00:36:21,720
<font color="#CCCCCC">you can never get out</font><font color="#E5E5E5"> of it okay</font><font color="#CCCCCC"> we'll</font>

881
00:36:20,100 --> 00:36:25,710
<font color="#E5E5E5">have to do last time slowly but surely I</font>

882
00:36:21,720 --> 00:36:28,859
get there<font color="#CCCCCC"> okay so yeah it's not the only</font>

883
00:36:25,710 --> 00:36:31,200
thing you can do<font color="#CCCCCC"> because and within this</font>

884
00:36:28,859 --> 00:36:33,090
application and the user object is

885
00:36:31,200 --> 00:36:35,040
essentially setting the global scope

886
00:36:33,090 --> 00:36:37,410
there's no controller attached to this

887
00:36:35,040 --> 00:36:38,700
and part<font color="#E5E5E5"> of the application but because</font>

888
00:36:37,410 --> 00:36:41,569
in the global<font color="#E5E5E5"> screen is accessible</font>

889
00:36:38,700 --> 00:36:44,669
throughout all of angular so if I<font color="#E5E5E5"> just</font>

890
00:36:41,570 --> 00:36:46,830
request the user object of who i'm

891
00:36:44,670 --> 00:36:48,330
currently logged in as it's going to

892
00:36:46,830 --> 00:36:50,310
process it it's going to<font color="#E5E5E5"> return it back</font>

893
00:36:48,330 --> 00:36:51,720
wherever<font color="#E5E5E5"> this you know client-side</font>

894
00:36:50,310 --> 00:36:54,840
template to server-side templating

895
00:36:51,720 --> 00:36:56,850
jection exists and then you know

896
00:36:54,840 --> 00:36:58,380
<font color="#E5E5E5">something a bit more malicious is where</font>

897
00:36:56,850 --> 00:37:03,569
you can call the user object and you

898
00:36:58,380 --> 00:37:05,130
know set it to undefined if I wrote it

899
00:37:03,570 --> 00:37:06,420
like correctly and then logs use<font color="#E5E5E5"> around</font>

900
00:37:05,130 --> 00:37:08,100
it's not<font color="#E5E5E5"> really a problem in itself</font>

901
00:37:06,420 --> 00:37:09,960
because it's using session storage so i

902
00:37:08,100 --> 00:37:10,950
can just refresh the page and<font color="#E5E5E5"> now</font>

903
00:37:09,960 --> 00:37:13,080
<font color="#E5E5E5">actually loved me out because the</font>

904
00:37:10,950 --> 00:37:15,720
<font color="#E5E5E5">strings still there but you go to</font>

905
00:37:13,080 --> 00:37:18,000
another page in a refresh and now log

906
00:37:15,720 --> 00:37:19,709
back in that's not the huge problem in

907
00:37:18,000 --> 00:37:21,270
itself but the deaf one is you know

908
00:37:19,710 --> 00:37:23,790
mixing server-side and client-side

909
00:37:21,270 --> 00:37:24,869
template is a huge<font color="#CCCCCC"> problem and it's</font>

910
00:37:23,790 --> 00:37:27,270
bound to happen quite a lot especially

911
00:37:24,869 --> 00:37:29,310
when people are moving legacy code over

912
00:37:27,270 --> 00:37:34,050
and they're rendering things on the

913
00:37:29,310 --> 00:37:36,450
server so now<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> going to talk about</font>

914
00:37:34,050 --> 00:37:39,330
essentially where you would look with

915
00:37:36,450 --> 00:37:41,100
inside angular and you know hopefully

916
00:37:39,330 --> 00:37:44,210
some helpful tips that might help you

917
00:37:41,100 --> 00:37:44,210
identify some of these issues

918
00:37:46,130 --> 00:37:51,080
so of<font color="#CCCCCC"> course the first thing to do would</font>

919
00:37:49,290 --> 00:37:53,730
be to verify the angular version

920
00:37:51,080 --> 00:37:55,950
depending how you're approaching an

921
00:37:53,730 --> 00:37:57,240
application is it code based is it you

922
00:37:55,950 --> 00:37:59,669
know<font color="#E5E5E5"> they're testing it from a black box</font>

923
00:37:57,240 --> 00:38:01,109
perspective you<font color="#CCCCCC"> know you might be given</font>

924
00:37:59,670 --> 00:38:02,910
source codes which means you could

925
00:38:01,110 --> 00:38:04,130
probably look at the dependencies that

926
00:38:02,910 --> 00:38:06,660
have been<font color="#E5E5E5"> included into the application</font>

927
00:38:04,130 --> 00:38:11,580
or you can look<font color="#CCCCCC"> for the literal string</font>

928
00:38:06,660 --> 00:38:13,379
or you can essentially you know actually

929
00:38:11,580 --> 00:38:15,000
<font color="#E5E5E5">if they've basically tried</font><font color="#CCCCCC"> to strip out</font>

930
00:38:13,380 --> 00:38:16,950
some of the you know<font color="#E5E5E5"> telling you what it</font>

931
00:38:15,000 --> 00:38:18,540
<font color="#CCCCCC">is or if it's a mini fide version start</font>

932
00:38:16,950 --> 00:38:20,250
<font color="#E5E5E5">looking for the error error responses</font>

933
00:38:18,540 --> 00:38:22,020
they get sent to<font color="#E5E5E5"> the server well</font>

934
00:38:20,250 --> 00:38:23,250
basically<font color="#E5E5E5"> when when an error happens it</font>

935
00:38:22,020 --> 00:38:25,320
comes back up<font color="#E5E5E5"> with relevant information</font>

936
00:38:23,250 --> 00:38:27,180
for angular and it will<font color="#E5E5E5"> keep it to the</font>

937
00:38:25,320 --> 00:38:29,760
version<font color="#CCCCCC"> that's essentially set so that</font>

938
00:38:27,180 --> 00:38:31,500
will be<font color="#CCCCCC"> quite helpful to find I haven't</font>

939
00:38:29,760 --> 00:38:33,060
<font color="#E5E5E5">really gone into this today but check</font>

940
00:38:31,500 --> 00:38:35,490
<font color="#CCCCCC">third party libraries there are two</font>

941
00:38:33,060 --> 00:38:37,320
there were<font color="#CCCCCC"> on the</font><font color="#E5E5E5"> slides that I've added</font>

942
00:38:35,490 --> 00:38:38,399
some links to they had Donbass

943
00:38:37,320 --> 00:38:40,350
cross-site scripting and you could

944
00:38:38,400 --> 00:38:43,350
utilize them once people<font color="#E5E5E5"> use them in</font>

945
00:38:40,350 --> 00:38:45,120
that application so<font color="#E5E5E5"> you want to check</font>

946
00:38:43,350 --> 00:38:47,460
what's currently injected into the

947
00:38:45,120 --> 00:38:49,980
module itself so if you see for<font color="#E5E5E5"> example</font>

948
00:38:47,460 --> 00:38:51,690
ng<font color="#E5E5E5"> sanitize you know it's highly likely</font>

949
00:38:49,980 --> 00:38:53,640
that they're going<font color="#E5E5E5"> to start using SCE</font>

950
00:38:51,690 --> 00:38:55,490
within an application which means they

951
00:38:53,640 --> 00:38:57,690
might then start expressly trusted data

952
00:38:55,490 --> 00:38:59,120
and the same for<font color="#CCCCCC"> you can start look</font><font color="#E5E5E5"> at</font>

953
00:38:57,690 --> 00:39:01,080
<font color="#E5E5E5">the routing and start to get a bit more</font>

954
00:38:59,120 --> 00:39:04,380
understanding you can also look to see

955
00:39:01,080 --> 00:39:06,060
are they using are they checking for

956
00:39:04,380 --> 00:39:09,630
authorization headers and so on and<font color="#E5E5E5"> so</font>

957
00:39:06,060 --> 00:39:11,790
forth so yeah you can also look what

958
00:39:09,630 --> 00:39:14,100
look what is dependency injected into

959
00:39:11,790 --> 00:39:16,110
controllers that's very<font color="#CCCCCC"> helpful as well</font>

960
00:39:14,100 --> 00:39:17,670
because you know then you know<font color="#CCCCCC"> exactly</font>

961
00:39:16,110 --> 00:39:19,440
on that page they might be trusting beta

962
00:39:17,670 --> 00:39:21,030
or they might be calling<font color="#E5E5E5"> a service that</font>

963
00:39:19,440 --> 00:39:24,270
might have a known vulnerability when

964
00:39:21,030 --> 00:39:25,590
you start<font color="#E5E5E5"> a bit of client-side codes you</font>

965
00:39:24,270 --> 00:39:27,930
want to<font color="#E5E5E5"> look at custom directives and</font>

966
00:39:25,590 --> 00:39:29,670
services mainly because it's they've

967
00:39:27,930 --> 00:39:32,460
been developed by the<font color="#E5E5E5"> actual developers</font>

968
00:39:29,670 --> 00:39:34,380
themselves as you've also seen earlier

969
00:39:32,460 --> 00:39:38,240
versions of angular could be used by you

970
00:39:34,380 --> 00:39:41,490
know attacking directives directly and

971
00:39:38,240 --> 00:39:42,720
you also<font color="#CCCCCC"> I obviously didn't go into too</font>

972
00:39:41,490 --> 00:39:43,500
<font color="#CCCCCC">much detail about</font><font color="#E5E5E5"> this today but you'll</font>

973
00:39:42,720 --> 00:39:45,060
want to<font color="#E5E5E5"> take a look at</font><font color="#CCCCCC"> what they're</font>

974
00:39:43,500 --> 00:39:49,800
storing within local storage because

975
00:39:45,060 --> 00:39:51,299
that's persistent and it's even if you

976
00:39:49,800 --> 00:39:52,500
<font color="#E5E5E5">close the page and come back a week</font>

977
00:39:51,300 --> 00:39:54,000
later it's still probably going to be

978
00:39:52,500 --> 00:39:56,070
there unless<font color="#E5E5E5"> you know you delete it</font>

979
00:39:54,000 --> 00:39:56,430
manually or if the application has

980
00:39:56,070 --> 00:40:00,750
fought

981
00:39:56,430 --> 00:40:02,250
<font color="#E5E5E5">delete</font><font color="#CCCCCC"> it and you are going to have to</font>

982
00:40:00,750 --> 00:40:04,050
spend<font color="#E5E5E5"> a lot of time in the controller</font>

983
00:40:02,250 --> 00:40:06,660
and understanding the<font color="#E5E5E5"> client-side logic</font>

984
00:40:04,050 --> 00:40:08,310
and how everything<font color="#E5E5E5"> works and you are</font>

985
00:40:06,660 --> 00:40:10,319
going to have to you know see if you can

986
00:40:08,310 --> 00:40:11,549
bypass<font color="#CCCCCC"> so and permissions make sure</font>

987
00:40:10,320 --> 00:40:15,480
they're being validated on the server

988
00:40:11,550 --> 00:40:16,590
and everything like that so<font color="#CCCCCC"> this is</font>

989
00:40:15,480 --> 00:40:17,880
coming towards the end then I'm going to

990
00:40:16,590 --> 00:40:19,770
go into some tools<font color="#E5E5E5"> that are probably</font>

991
00:40:17,880 --> 00:40:22,950
will help you<font color="#CCCCCC"> out they definitely</font><font color="#E5E5E5"> helped</font>

992
00:40:19,770 --> 00:40:25,440
me<font color="#CCCCCC"> out so we have retired a s we have</font>

993
00:40:22,950 --> 00:40:27,480
burb sweet of course we have a court

994
00:40:25,440 --> 00:40:30,180
tool called Batarang and an angular

995
00:40:27,480 --> 00:40:32,130
version 2 point 0 which probably isn't

996
00:40:30,180 --> 00:40:34,230
going to be used up but yet we have

997
00:40:32,130 --> 00:40:36,000
scanned<font color="#CCCCCC"> jes and</font><font color="#E5E5E5"> es min scanjet is</font>

998
00:40:34,230 --> 00:40:39,120
deprecated but you know it's good and

999
00:40:36,000 --> 00:40:40,620
then obviously talking to our own

1000
00:40:39,120 --> 00:40:43,819
company we have a talk with<font color="#CCCCCC"> Jax that</font>

1001
00:40:40,620 --> 00:40:46,980
soon gonna be coming out so retire j/s

1002
00:40:43,820 --> 00:40:48,000
it essentially scans depending<font color="#CCCCCC"> on what</font>

1003
00:40:46,980 --> 00:40:49,530
you use you<font color="#E5E5E5"> have you</font><font color="#CCCCCC"> can have a</font>

1004
00:40:48,000 --> 00:40:52,320
<font color="#E5E5E5">command-line scanner</font><font color="#CCCCCC"> that will actually</font>

1005
00:40:49,530 --> 00:40:54,870
<font color="#CCCCCC">like scanner repo or a code base to look</font>

1006
00:40:52,320 --> 00:40:57,600
for known<font color="#E5E5E5"> javascript vulnerabilities in</font>

1007
00:40:54,870 --> 00:41:00,000
the libraries that are used generally i

1008
00:40:57,600 --> 00:41:02,040
use the burp suite<font color="#E5E5E5"> plugin because i</font>

1009
00:41:00,000 --> 00:41:04,800
always live in burb sweet and they'll

1010
00:41:02,040 --> 00:41:07,170
basically and use the active scan or

1011
00:41:04,800 --> 00:41:09,960
passive scanner and directly report to

1012
00:41:07,170 --> 00:41:11,610
you straight away if there's<font color="#E5E5E5"> an issue so</font>

1013
00:41:09,960 --> 00:41:14,580
if you<font color="#E5E5E5"> take a look at this it's supposed</font>

1014
00:41:11,610 --> 00:41:16,800
<font color="#E5E5E5">to be red but it's not and essentially</font>

1015
00:41:14,580 --> 00:41:19,200
this will end the retire jealous

1016
00:41:16,800 --> 00:41:21,060
directly tells you hey this version is

1017
00:41:19,200 --> 00:41:22,529
vulnerable gears more information about

1018
00:41:21,060 --> 00:41:24,390
it and they didn't go away and see if

1019
00:41:22,530 --> 00:41:27,450
you can exploit it or find any issues

1020
00:41:24,390 --> 00:41:30,509
which relate<font color="#CCCCCC"> to that version and it's</font>

1021
00:41:27,450 --> 00:41:32,520
also burp suite so as<font color="#E5E5E5"> I said before and</font>

1022
00:41:30,510 --> 00:41:34,550
ports figure of release and really cool

1023
00:41:32,520 --> 00:41:36,780
blogs relate to angular recently and

1024
00:41:34,550 --> 00:41:37,890
they've actually started to introduce

1025
00:41:36,780 --> 00:41:39,180
some of these client-side and

1026
00:41:37,890 --> 00:41:40,500
server-side templating injections

1027
00:41:39,180 --> 00:41:43,230
directly into the active scanning

1028
00:41:40,500 --> 00:41:44,520
techniques so as<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> scan this</font>

1029
00:41:43,230 --> 00:41:47,550
against the application I showed today

1030
00:41:44,520 --> 00:41:49,590
and you know reported saying hey and you

1031
00:41:47,550 --> 00:41:52,680
know by<font color="#CCCCCC"> using this string I've</font><font color="#E5E5E5"> been able</font>

1032
00:41:49,590 --> 00:41:55,800
to<font color="#E5E5E5"> get a response and</font><font color="#CCCCCC"> then there's also</font>

1033
00:41:52,680 --> 00:41:57,210
<font color="#E5E5E5">a tool called Batarang so when you just</font>

1034
00:41:55,800 --> 00:41:58,560
right click and view the source you're

1035
00:41:57,210 --> 00:41:59,850
all you're going<font color="#E5E5E5"> to see our expressions</font>

1036
00:41:58,560 --> 00:42:01,880
you're not going to see how things<font color="#E5E5E5"> have</font>

1037
00:41:59,850 --> 00:42:04,529
been dynamically generated at runtime

1038
00:42:01,880 --> 00:42:06,830
<font color="#CCCCCC">I'm going</font><font color="#E5E5E5"> to show</font><font color="#CCCCCC"> you a bit of how this</font>

1039
00:42:04,530 --> 00:42:06,830
works

1040
00:42:08,190 --> 00:42:12,930
so it's a Chrome extension which is

1041
00:42:11,590 --> 00:42:16,030
going<font color="#E5E5E5"> to be quite difficult to see</font>

1042
00:42:12,930 --> 00:42:18,160
essentially and once you do now install

1043
00:42:16,030 --> 00:42:20,020
it it would tell it was give<font color="#CCCCCC"> you the</font>

1044
00:42:18,160 --> 00:42:23,440
scope objects with inside an application

1045
00:42:20,020 --> 00:42:25,540
and generally the root scope objects<font color="#E5E5E5"> for</font>

1046
00:42:23,440 --> 00:42:28,300
example the user object is going to be

1047
00:42:25,540 --> 00:42:30,190
at the beginning and as you can see<font color="#E5E5E5"> I</font>

1048
00:42:28,300 --> 00:42:32,020
can<font color="#E5E5E5"> then log in and then</font><font color="#CCCCCC"> I can look at</font>

1049
00:42:30,190 --> 00:42:35,230
the<font color="#CCCCCC"> roles and</font><font color="#E5E5E5"> you know I could change</font>

1050
00:42:32,020 --> 00:42:37,390
this to remember<font color="#CCCCCC"> to admin and so on</font><font color="#E5E5E5"> and</font>

1051
00:42:35,230 --> 00:42:38,920
so forth you'll be able<font color="#E5E5E5"> to do some by</font>

1052
00:42:37,390 --> 00:42:40,779
capturing the response and changing the

1053
00:42:38,920 --> 00:42:42,640
response from like connect for example

1054
00:42:40,780 --> 00:42:44,260
testing and burp suite but this just

1055
00:42:42,640 --> 00:42:46,120
allows you to get<font color="#E5E5E5"> a good look and feel</font>

1056
00:42:44,260 --> 00:42:48,450
of how things<font color="#E5E5E5"> work and like for example</font>

1057
00:42:46,120 --> 00:42:51,940
when I'm iterating through an array or

1058
00:42:48,450 --> 00:42:53,140
something like that and it should show

1059
00:42:51,940 --> 00:42:55,330
you the bookmark objects that are

1060
00:42:53,140 --> 00:42:59,040
available as well and I've obviously has

1061
00:42:55,330 --> 00:42:59,040
the corresponding information about that

1062
00:43:01,680 --> 00:43:07,299
lost more screen<font color="#CCCCCC"> okay so that's Batarang</font>

1063
00:43:05,230 --> 00:43:08,830
and then we<font color="#E5E5E5"> have scanned es it's a bit</font>

1064
00:43:07,300 --> 00:43:12,970
deprecated as a bit old but it's still

1065
00:43:08,830 --> 00:43:15,700
good so you know<font color="#CCCCCC"> that there's some</font>

1066
00:43:12,970 --> 00:43:17,620
strings that are<font color="#E5E5E5"> definitely not what you</font>

1067
00:43:15,700 --> 00:43:21,120
<font color="#CCCCCC">should be doing with an angular you can</font>

1068
00:43:17,620 --> 00:43:24,040
essentially build a list or a no things

1069
00:43:21,120 --> 00:43:25,810
you can then obviously scan your repos

1070
00:43:24,040 --> 00:43:27,490
or<font color="#CCCCCC"> javascript files to see if any of</font>

1071
00:43:25,810 --> 00:43:29,770
them exist and that saves you a lot of

1072
00:43:27,490 --> 00:43:33,759
<font color="#CCCCCC">time and having to do the manual process</font>

1073
00:43:29,770 --> 00:43:36,250
directly and then this<font color="#E5E5E5"> is obviously a</font>

1074
00:43:33,760 --> 00:43:37,870
company plug but I'm we release it we

1075
00:43:36,250 --> 00:43:39,940
have a tool called jacks from our sister

1076
00:43:37,870 --> 00:43:42,009
company called CODIS cope at the moment

1077
00:43:39,940 --> 00:43:43,540
<font color="#E5E5E5">it's a it's built in</font><font color="#CCCCCC"> JavaScript it's a</font>

1078
00:43:42,010 --> 00:43:47,230
<font color="#E5E5E5">JavaScript static code analysis tool</font>

1079
00:43:43,540 --> 00:43:49,390
it's very very fast<font color="#E5E5E5"> and an at the moment</font>

1080
00:43:47,230 --> 00:43:51,520
we look into<font color="#CCCCCC"> no to express MongoDB</font>

1081
00:43:49,390 --> 00:43:55,089
spring and happy but in the near future

1082
00:43:51,520 --> 00:43:56,560
and which I have the<font color="#CCCCCC"> privilege of</font>

1083
00:43:55,090 --> 00:43:58,630
working in and working with the team

1084
00:43:56,560 --> 00:44:03,670
we're going<font color="#E5E5E5"> to be releasing angularjs</font>

1085
00:43:58,630 --> 00:44:05,880
and static code analysis scanning so<font color="#E5E5E5"> I'm</font>

1086
00:44:03,670 --> 00:44:08,950
<font color="#E5E5E5">going to summarize this presentation</font>

1087
00:44:05,880 --> 00:44:12,340
angler jess is an interesting model view

1088
00:44:08,950 --> 00:44:14,890
whatever as the lateen like to say there

1089
00:44:12,340 --> 00:44:17,740
are and were some interesting issues

1090
00:44:14,890 --> 00:44:19,900
within the<font color="#E5E5E5"> framework</font><font color="#CCCCCC"> the careful of</font>

1091
00:44:17,740 --> 00:44:22,720
see because if you explicitly trust data

1092
00:44:19,900 --> 00:44:24,760
you're going to have a bad time use the

1093
00:44:22,720 --> 00:44:27,100
eval wisely make sure it's enclosed in

1094
00:44:24,760 --> 00:44:29,380
single quotations and only practicing

1095
00:44:27,100 --> 00:44:32,020
objects through that way never trust a

1096
00:44:29,380 --> 00:44:34,720
client and do not mix client and server

1097
00:44:32,020 --> 00:44:37,180
templates there's a some additional

1098
00:44:34,720 --> 00:44:39,549
reading that obstacle on slide slide

1099
00:44:37,180 --> 00:44:40,629
share and tweet about it you guys can go

1100
00:44:39,550 --> 00:44:43,060
<font color="#CCCCCC">away</font><font color="#E5E5E5"> and take a look at in the future</font>

1101
00:44:40,630 --> 00:44:44,980
this one is extremely great and they

1102
00:44:43,060 --> 00:44:46,930
also have a if you go on to youtube and

1103
00:44:44,980 --> 00:44:48,820
<font color="#E5E5E5">type in an abusive relationship with</font>

1104
00:44:46,930 --> 00:44:52,118
angularjs you'll find one of<font color="#E5E5E5"> his talks</font>

1105
00:44:48,820 --> 00:44:53,700
as well and<font color="#CCCCCC"> dirty goods and the ports</font>

1106
00:44:52,119 --> 00:44:56,080
wiggle ones are extremely good as well

1107
00:44:53,700 --> 00:45:08,819
so that<font color="#CCCCCC"> is my presentation thanks a lot</font>

1108
00:44:56,080 --> 00:45:10,960
and you have any questions any questions

1109
00:45:08,820 --> 00:45:18,160
it's good i'm going to the<font color="#E5E5E5"> pub see you</font>

1110
00:45:10,960 --> 00:45:19,900
later oh sorry<font color="#CCCCCC"> i</font><font color="#E5E5E5"> actually haven't</font>

1111
00:45:18,160 --> 00:45:21,339
started to look into it<font color="#E5E5E5"> too much i mean</font>

1112
00:45:19,900 --> 00:45:26,859
<font color="#E5E5E5">i started to look to see</font><font color="#CCCCCC"> if they were</font>

1113
00:45:21,340 --> 00:45:28,330
using SCE and not not<font color="#CCCCCC"> sure they've</font>

1114
00:45:26,859 --> 00:45:30,369
started to build the api's but there's

1115
00:45:28,330 --> 00:45:32,170
no documentation referencing yet and I

1116
00:45:30,369 --> 00:45:35,109
haven't really<font color="#E5E5E5"> begun to dig into the</font>

1117
00:45:32,170 --> 00:45:37,540
code base but it's going<font color="#E5E5E5"> to be</font>

1118
00:45:35,109 --> 00:45:38,980
interesting then basically when people

1119
00:45:37,540 --> 00:45:40,330
want to upgrade to<font color="#E5E5E5"> two they're going to</font>

1120
00:45:38,980 --> 00:45:42,550
have to rewrite their entire application

1121
00:45:40,330 --> 00:45:44,049
because the whole<font color="#CCCCCC"> concept has changed</font>

1122
00:45:42,550 --> 00:45:45,580
everything's a service instead of things

1123
00:45:44,050 --> 00:45:47,230
like services factories directives

1124
00:45:45,580 --> 00:45:50,759
everything's pretty much classes or

1125
00:45:47,230 --> 00:45:50,760
service from what I've been able to see

1126
00:45:52,260 --> 00:45:55,440
<font color="#E5E5E5">I'll do</font>

1127
00:45:58,099 --> 00:46:09,049
still something like a pain to me that's

1128
00:46:01,650 --> 00:46:09,049
good that's good<font color="#E5E5E5"> to know the questions</font>

1129
00:46:10,080 --> 00:46:13,970
oh thank you<font color="#E5E5E5"> yes</font>

