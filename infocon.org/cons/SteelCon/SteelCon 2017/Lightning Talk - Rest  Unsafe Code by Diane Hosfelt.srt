1
00:00:03,350 --> 00:00:10,710
<font color="#E5E5E5">okay hi</font><font color="#CCCCCC"> Diane</font><font color="#E5E5E5"> I'm Avada Kedavra I'm like</font>

2
00:00:08,370 --> 00:00:12,690
<font color="#E5E5E5">everything it's the easiest way to find</font>

3
00:00:10,710 --> 00:00:15,660
<font color="#E5E5E5">me if you can remember it I've been</font>

4
00:00:12,690 --> 00:00:18,060
informed<font color="#CCCCCC"> that it's very long</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> very</font>

5
00:00:15,660 --> 00:00:20,730
difficult<font color="#E5E5E5"> to</font><font color="#CCCCCC"> remember</font><font color="#E5E5E5"> but I don't really</font>

6
00:00:18,060 --> 00:00:22,948
understand why because<font color="#E5E5E5"> it's like Harry</font>

7
00:00:20,730 --> 00:00:27,359
Potter killing curse but with cat<font color="#CCCCCC"> what</font>

8
00:00:22,949 --> 00:00:28,679
<font color="#CCCCCC">is sorry</font><font color="#E5E5E5"> it's like that</font><font color="#CCCCCC"> table - I</font><font color="#E5E5E5"> don't</font>

9
00:00:27,359 --> 00:00:32,160
understand why it's<font color="#E5E5E5"> so</font><font color="#CCCCCC"> hard to</font><font color="#E5E5E5"> remember</font>

10
00:00:28,679 --> 00:00:35,250
<font color="#CCCCCC">I think it's super clever</font>

11
00:00:32,159 --> 00:00:38,489
<font color="#CCCCCC">alright so I work for Mozilla</font><font color="#E5E5E5"> and I work</font>

12
00:00:35,250 --> 00:00:40,580
with rust<font color="#E5E5E5"> a lot I don't know how many of</font>

13
00:00:38,490 --> 00:00:42,720
<font color="#E5E5E5">you have heard of rust have used rust</font>

14
00:00:40,580 --> 00:00:47,849
there are a lot of<font color="#E5E5E5"> people who are crazy</font>

15
00:00:42,720 --> 00:00:51,769
about rust<font color="#CCCCCC"> and it's pretty misty and you</font>

16
00:00:47,850 --> 00:00:55,050
have this<font color="#E5E5E5"> idea of safe versus unsafe</font>

17
00:00:51,770 --> 00:00:57,150
so when we talk about rust safety

18
00:00:55,050 --> 00:00:59,309
<font color="#E5E5E5">basically you're guaranteed type safety</font>

19
00:00:57,150 --> 00:01:01,739
<font color="#E5E5E5">and memory safety</font>

20
00:00:59,310 --> 00:01:04,019
<font color="#CCCCCC">I know I've spent</font><font color="#E5E5E5"> some time doing buffer</font>

21
00:01:01,740 --> 00:01:05,909
overflows and integer overflows and such

22
00:01:04,019 --> 00:01:09,329
so it's<font color="#E5E5E5"> really nice that these are</font>

23
00:01:05,909 --> 00:01:11,909
prevented<font color="#CCCCCC"> by default</font><font color="#E5E5E5"> in a language it</font>

24
00:01:09,329 --> 00:01:15,570
<font color="#E5E5E5">really limits the sort of undefined</font>

25
00:01:11,909 --> 00:01:19,920
behavior that you see by<font color="#CCCCCC"> default</font><font color="#E5E5E5"> all</font>

26
00:01:15,570 --> 00:01:23,240
these things are are prevented young

27
00:01:19,920 --> 00:01:27,689
guns have dangling pointers data races

28
00:01:23,240 --> 00:01:33,089
integer overflow and debug builds buffer

29
00:01:27,689 --> 00:01:34,548
overflows and iterator invalidation most

30
00:01:33,090 --> 00:01:37,289
of these<font color="#E5E5E5"> are done at compile time</font>

31
00:01:34,549 --> 00:01:41,460
<font color="#E5E5E5">integer and buffer overflow Prevention's</font>

32
00:01:37,289 --> 00:01:45,420
<font color="#CCCCCC">are done at run time</font><font color="#E5E5E5"> but we can minimize</font>

33
00:01:41,460 --> 00:01:47,818
these by<font color="#E5E5E5"> idiomatic</font><font color="#CCCCCC"> rust uses uses</font>

34
00:01:45,420 --> 00:01:49,710
<font color="#E5E5E5">iterators so generally speaking if you</font>

35
00:01:47,819 --> 00:01:54,149
have an array you're not iterating over

36
00:01:49,710 --> 00:01:56,928
it with indices<font color="#CCCCCC"> if you do in safe rust</font>

37
00:01:54,149 --> 00:01:59,280
<font color="#CCCCCC">you can still overflow</font><font color="#E5E5E5"> your buffer if</font>

38
00:01:56,929 --> 00:02:03,569
you code like a proper little

39
00:01:59,280 --> 00:02:04,799
<font color="#E5E5E5">restoration then you're not going to</font>

40
00:02:03,569 --> 00:02:06,420
because you're<font color="#E5E5E5"> going to use an iterator</font>

41
00:02:04,799 --> 00:02:08,130
<font color="#CCCCCC">so you're not going to overflow</font><font color="#E5E5E5"> because</font>

42
00:02:06,420 --> 00:02:13,110
that<font color="#CCCCCC"> orator knows where</font><font color="#E5E5E5"> the end of the</font>

43
00:02:08,130 --> 00:02:15,030
buffer is<font color="#E5E5E5"> um so unsafe</font><font color="#CCCCCC"> like what does</font>

44
00:02:13,110 --> 00:02:16,230
this even<font color="#E5E5E5"> mean there are things</font><font color="#CCCCCC"> that you</font>

45
00:02:15,030 --> 00:02:21,180
cannot do and say

46
00:02:16,230 --> 00:02:22,798
<font color="#CCCCCC">Frost so we have to go and look</font><font color="#E5E5E5"> at what</font>

47
00:02:21,180 --> 00:02:24,989
<font color="#E5E5E5">this borrowed checker thing is the</font>

48
00:02:22,799 --> 00:02:27,060
borrowed checker<font color="#E5E5E5"> when you code and Russ</font>

49
00:02:24,989 --> 00:02:29,730
<font color="#CCCCCC">is both</font><font color="#E5E5E5"> your best friend and your worst</font>

50
00:02:27,060 --> 00:02:32,670
enemy it's<font color="#E5E5E5"> always yelling at you and</font>

51
00:02:29,730 --> 00:02:34,829
then you<font color="#E5E5E5"> have an argument with it turns</font>

52
00:02:32,670 --> 00:02:38,958
out<font color="#CCCCCC"> borrowed checkers right</font><font color="#E5E5E5"> you're wrong</font>

53
00:02:34,830 --> 00:02:42,660
<font color="#CCCCCC">100% of the</font><font color="#E5E5E5"> time you are never ever</font>

54
00:02:38,959 --> 00:02:45,959
right<font color="#E5E5E5"> so if you have a value</font><font color="#CCCCCC"> and you</font>

55
00:02:42,660 --> 00:02:50,129
assign<font color="#E5E5E5"> it</font><font color="#CCCCCC"> to a variable</font><font color="#E5E5E5"> X X owns the</font>

56
00:02:45,959 --> 00:02:54,840
value now you assign<font color="#CCCCCC"> that you assign a</font>

57
00:02:50,129 --> 00:02:59,608
same<font color="#E5E5E5"> value to X I</font><font color="#CCCCCC"> mean to Y now why on</font>

58
00:02:54,840 --> 00:03:01,739
is it it's moved from<font color="#CCCCCC"> X to Y if X tries</font>

59
00:02:59,609 --> 00:03:05,310
to access<font color="#CCCCCC"> the variable that is now owned</font>

60
00:03:01,739 --> 00:03:05,819
by Y the compiler will throw a beautiful

61
00:03:05,310 --> 00:03:09,060
error

62
00:03:05,819 --> 00:03:12,899
well looks a lot like this you can

63
00:03:09,060 --> 00:03:18,510
borrow a value immutably<font color="#E5E5E5"> as many times</font>

64
00:03:12,900 --> 00:03:20,730
<font color="#E5E5E5">as you want</font><font color="#CCCCCC"> but you cannot change it you</font>

65
00:03:18,510 --> 00:03:23,880
can only have one mutable reference at a

66
00:03:20,730 --> 00:03:25,828
time<font color="#E5E5E5"> otherwise you invalidate all of</font>

67
00:03:23,880 --> 00:03:28,319
these safety guarantees that<font color="#E5E5E5"> you have in</font>

68
00:03:25,829 --> 00:03:31,620
<font color="#E5E5E5">safe</font><font color="#CCCCCC"> rest what this does is this</font>

69
00:03:28,319 --> 00:03:33,510
prevents<font color="#E5E5E5"> dangling pointers um you</font><font color="#CCCCCC"> rest</font>

70
00:03:31,620 --> 00:03:35,730
checks the lifetimes of variables

71
00:03:33,510 --> 00:03:37,410
<font color="#E5E5E5">instead of garbage collecting you just</font>

72
00:03:35,730 --> 00:03:42,209
make sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> nothing's ever deleted</font>

73
00:03:37,410 --> 00:03:44,250
until you're done using it<font color="#CCCCCC"> so like I</font>

74
00:03:42,209 --> 00:03:46,440
said<font color="#E5E5E5"> you can't do</font><font color="#CCCCCC"> everything in safe</font>

75
00:03:44,250 --> 00:03:48,980
blocks<font color="#E5E5E5"> sometimes</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> really have to</font>

76
00:03:46,440 --> 00:03:51,450
violate these rules<font color="#CCCCCC"> there's one</font>

77
00:03:48,980 --> 00:03:53,988
<font color="#E5E5E5">situation in particular that I'll</font>

78
00:03:51,450 --> 00:03:57,149
highlight<font color="#CCCCCC"> in like a minute</font>

79
00:03:53,989 --> 00:04:00,389
and the key<font color="#E5E5E5"> thing that you can do and</font>

80
00:03:57,150 --> 00:04:04,590
unsafe rust<font color="#E5E5E5"> is you can dereference</font><font color="#CCCCCC"> raw</font>

81
00:04:00,389 --> 00:04:06,660
pointers usually you do<font color="#E5E5E5"> not want to be</font>

82
00:04:04,590 --> 00:04:07,919
<font color="#CCCCCC">messing around with raw pointers when</font>

83
00:04:06,660 --> 00:04:10,459
you're in safe for us

84
00:04:07,919 --> 00:04:13,049
well<font color="#CCCCCC"> you never want to mess around with</font>

85
00:04:10,459 --> 00:04:16,470
<font color="#E5E5E5">with raw pointers and</font><font color="#CCCCCC"> safe</font><font color="#E5E5E5"> rest and</font>

86
00:04:13,049 --> 00:04:19,858
generally speaking<font color="#E5E5E5"> as most of us are</font>

87
00:04:16,470 --> 00:04:21,419
aware messing with raw pointers can be a

88
00:04:19,858 --> 00:04:26,700
<font color="#E5E5E5">recipe for</font><font color="#CCCCCC"> disaster</font>

89
00:04:21,418 --> 00:04:29,520
right<font color="#E5E5E5"> there's one function in</font><font color="#CCCCCC"> particular</font>

90
00:04:26,700 --> 00:04:30,319
<font color="#CCCCCC">mmm transmute where you just take a</font>

91
00:04:29,520 --> 00:04:32,719
<font color="#E5E5E5">point</font>

92
00:04:30,319 --> 00:04:36,919
and you tell it<font color="#CCCCCC"> to be anything you want</font>

93
00:04:32,720 --> 00:04:39,199
<font color="#E5E5E5">it to be and it's extremely terrifying</font><font color="#CCCCCC"> I</font>

94
00:04:36,919 --> 00:04:40,909
was using it once and then I told my

95
00:04:39,199 --> 00:04:42,740
bosses like you know I feel<font color="#CCCCCC"> like there's</font>

96
00:04:40,909 --> 00:04:45,050
got to be a better<font color="#E5E5E5"> way</font><font color="#CCCCCC"> to do this I</font>

97
00:04:42,740 --> 00:04:47,240
<font color="#E5E5E5">really feel like I should not be</font><font color="#CCCCCC"> doing</font>

98
00:04:45,050 --> 00:04:51,050
<font color="#E5E5E5">this</font><font color="#CCCCCC"> he's like yeah I should do</font>

99
00:04:47,240 --> 00:04:53,060
something<font color="#E5E5E5"> horribly wrong anyways the way</font>

100
00:04:51,050 --> 00:04:55,669
that we control<font color="#CCCCCC"> it is you denote</font>

101
00:04:53,060 --> 00:04:57,979
something<font color="#CCCCCC"> as an unsafe function or an</font>

102
00:04:55,669 --> 00:05:02,690
unsafe block<font color="#E5E5E5"> you can only call unsafe</font>

103
00:04:57,979 --> 00:05:06,770
code from other unsafe<font color="#E5E5E5"> code</font><font color="#CCCCCC"> but you can</font>

104
00:05:02,690 --> 00:05:09,770
encapsulate it so like if we had a

105
00:05:06,770 --> 00:05:12,940
function<font color="#CCCCCC"> foo</font><font color="#E5E5E5"> cuz I wanted to call unsafe</font>

106
00:05:09,770 --> 00:05:15,889
<font color="#CCCCCC">so what you</font><font color="#E5E5E5"> would do is you would have</font>

107
00:05:12,940 --> 00:05:19,400
function foo and<font color="#CCCCCC"> then in the unsafe</font>

108
00:05:15,889 --> 00:05:24,740
block you would call unsafe fail so that

109
00:05:19,400 --> 00:05:28,219
way you can encapsulate unsafety<font color="#E5E5E5"> within</font>

110
00:05:24,740 --> 00:05:31,639
safety<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> how the standard</font>

111
00:05:28,219 --> 00:05:36,469
library handles a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of this so</font><font color="#E5E5E5"> you can</font>

112
00:05:31,639 --> 00:05:40,219
do tons of<font color="#CCCCCC"> things with purely</font><font color="#E5E5E5"> idiomatic</font>

113
00:05:36,469 --> 00:05:41,719
safe<font color="#E5E5E5"> rust</font><font color="#CCCCCC"> including like</font><font color="#E5E5E5"> coal</font><font color="#CCCCCC"> see</font>

114
00:05:40,219 --> 00:05:48,529
functions because<font color="#E5E5E5"> they'll be wrapped in</font>

115
00:05:41,719 --> 00:05:51,440
a safe wrapper so this is the<font color="#E5E5E5"> results of</font>

116
00:05:48,529 --> 00:05:56,360
little programs<font color="#CCCCCC"> that I wrote on</font><font color="#E5E5E5"> the rest</font>

117
00:05:51,440 --> 00:05:58,310
compiler code<font color="#CCCCCC"> so the rest compiler is</font>

118
00:05:56,360 --> 00:06:00,770
<font color="#CCCCCC">written and rest</font><font color="#E5E5E5"> which is always a</font>

119
00:05:58,310 --> 00:06:03,409
really great spot<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> when your</font>

120
00:06:00,770 --> 00:06:05,090
language<font color="#E5E5E5"> and what it does is the</font>

121
00:06:03,409 --> 00:06:07,490
compiler<font color="#CCCCCC"> is composed of</font><font color="#E5E5E5"> different</font>

122
00:06:05,090 --> 00:06:11,869
<font color="#CCCCCC">modules</font><font color="#E5E5E5"> so all of these lines here these</font>

123
00:06:07,490 --> 00:06:15,349
are different modules<font color="#E5E5E5"> and the little</font>

124
00:06:11,870 --> 00:06:17,690
numbers that you can't read<font color="#CCCCCC"> are the</font>

125
00:06:15,349 --> 00:06:20,180
percentage of unsafe functions and

126
00:06:17,690 --> 00:06:22,940
unsafe codes and also<font color="#E5E5E5"> the number of</font>

127
00:06:20,180 --> 00:06:25,639
panics<font color="#E5E5E5"> so panics are basically oh no</font>

128
00:06:22,940 --> 00:06:28,729
something's gone horribly wrong<font color="#CCCCCC"> we need</font>

129
00:06:25,639 --> 00:06:30,740
<font color="#E5E5E5">to abort runtime immediately and this</font>

130
00:06:28,729 --> 00:06:33,469
can<font color="#E5E5E5"> be kind of dangerous when you use</font>

131
00:06:30,740 --> 00:06:35,150
them<font color="#CCCCCC"> they are going</font><font color="#E5E5E5"> to lead to undefined</font>

132
00:06:33,469 --> 00:06:39,820
behavior but they will<font color="#E5E5E5"> you know</font>

133
00:06:35,150 --> 00:06:42,589
<font color="#E5E5E5">terminate your program unexpectedly so</font>

134
00:06:39,820 --> 00:06:43,909
shows the<font color="#E5E5E5"> amount of unsafe code and all</font>

135
00:06:42,589 --> 00:06:46,310
the compiler modules

136
00:06:43,910 --> 00:06:48,290
<font color="#E5E5E5">a lot of</font><font color="#CCCCCC"> them are zero</font><font color="#E5E5E5"> so that's good</font>

137
00:06:46,310 --> 00:06:50,900
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> that means that</font><font color="#CCCCCC"> the rest</font>

138
00:06:48,290 --> 00:06:53,840
compiler is theoretically pretty decent

139
00:06:50,900 --> 00:06:56,830
<font color="#CCCCCC">rust code one</font><font color="#E5E5E5"> problem is a lot of people</font>

140
00:06:53,840 --> 00:06:58,520
come to<font color="#E5E5E5"> rust from C and they're like</font>

141
00:06:56,830 --> 00:07:00,200
iterators doesn't want to use an

142
00:06:58,520 --> 00:07:02,750
iterator just like let me write a for

143
00:07:00,200 --> 00:07:04,550
<font color="#CCCCCC">loop like I usually</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> right but</font><font color="#E5E5E5"> that's</font>

144
00:07:02,750 --> 00:07:07,250
where you<font color="#E5E5E5"> get into problems</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if we</font>

145
00:07:04,550 --> 00:07:08,750
want to write C for code<font color="#E5E5E5"> not</font><font color="#CCCCCC"> only do we</font>

146
00:07:07,250 --> 00:07:14,270
<font color="#CCCCCC">have to use the safe language</font><font color="#E5E5E5"> we also</font>

147
00:07:08,750 --> 00:07:17,450
have to write it safer so one problem

148
00:07:14,270 --> 00:07:19,700
<font color="#CCCCCC">the worst is that I saw at a glance</font>

149
00:07:17,450 --> 00:07:23,180
<font color="#E5E5E5">five minutes ago with some</font><font color="#CCCCCC"> Lib</font>

150
00:07:19,700 --> 00:07:25,460
collections<font color="#E5E5E5"> at</font><font color="#CCCCCC"> 25% and this makes</font><font color="#E5E5E5"> sense</font>

151
00:07:23,180 --> 00:07:27,530
<font color="#E5E5E5">if you're implementing the collection</font>

152
00:07:25,460 --> 00:07:33,530
data structures you're going to need to

153
00:07:27,530 --> 00:07:36,080
use<font color="#CCCCCC"> on save code how it is anyways</font><font color="#E5E5E5"> so</font>

154
00:07:33,530 --> 00:07:38,030
the way I did<font color="#E5E5E5"> this is I just</font><font color="#CCCCCC"> went text</font>

155
00:07:36,080 --> 00:07:41,120
line by line<font color="#CCCCCC"> have you</font><font color="#E5E5E5"> ever used count</font>

156
00:07:38,030 --> 00:07:42,799
lines of code yeah<font color="#CCCCCC"> I just went line by</font>

157
00:07:41,120 --> 00:07:44,990
line and<font color="#E5E5E5"> counted the number of unsaved</font>

158
00:07:42,800 --> 00:07:47,840
code<font color="#E5E5E5"> this is like the worst way possible</font>

159
00:07:44,990 --> 00:07:51,380
to do it but yeah it gives<font color="#E5E5E5"> you a pretty</font>

160
00:07:47,840 --> 00:07:54,919
good<font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> how safe the code is</font>

161
00:07:51,380 --> 00:07:57,080
written realistically you need to create

162
00:07:54,920 --> 00:07:59,150
a simplified<font color="#E5E5E5"> abstract syntax tree and</font>

163
00:07:57,080 --> 00:08:01,099
<font color="#E5E5E5">test your</font><font color="#CCCCCC"> predicates and</font><font color="#E5E5E5"> all these</font>

164
00:07:59,150 --> 00:08:04,070
things that programming languages<font color="#CCCCCC"> people</font>

165
00:08:01,100 --> 00:08:07,940
love to talk<font color="#CCCCCC"> about</font><font color="#E5E5E5"> can also categorize</font>

166
00:08:04,070 --> 00:08:09,919
<font color="#E5E5E5">the the unsafe code</font><font color="#CCCCCC"> as is it FF I you</font>

167
00:08:07,940 --> 00:08:12,850
know are you calling in<font color="#E5E5E5"> C</font><font color="#CCCCCC"> codes</font><font color="#E5E5E5"> are you</font>

168
00:08:09,919 --> 00:08:15,080
<font color="#E5E5E5">just writing on safe code and then</font>

169
00:08:12,850 --> 00:08:16,700
<font color="#E5E5E5">borrow a checker</font><font color="#CCCCCC"> I don't know why there</font>

170
00:08:15,080 --> 00:08:18,950
aren't more memes about<font color="#E5E5E5"> the</font><font color="#CCCCCC"> borrowed</font>

171
00:08:16,700 --> 00:08:20,930
checker<font color="#E5E5E5"> because it really is your</font><font color="#CCCCCC"> best</font>

172
00:08:18,950 --> 00:08:23,990
<font color="#E5E5E5">friend and</font><font color="#CCCCCC"> your worst enemy when</font><font color="#E5E5E5"> you're</font>

173
00:08:20,930 --> 00:08:26,960
developing<font color="#E5E5E5"> a rough so maybe someday I'll</font>

174
00:08:23,990 --> 00:08:28,610
<font color="#CCCCCC">have time get around to this</font><font color="#E5E5E5"> ideally</font>

175
00:08:26,960 --> 00:08:31,310
what I'd like<font color="#E5E5E5"> to do is look at the rust</font>

176
00:08:28,610 --> 00:08:33,620
ecosystem as a whole script<font color="#E5E5E5"> over all</font>

177
00:08:31,310 --> 00:08:35,419
github all the people who are trying

178
00:08:33,620 --> 00:08:37,520
rust out<font color="#E5E5E5"> and then ditch it immediately</font>

179
00:08:35,419 --> 00:08:41,590
<font color="#E5E5E5">and then some of the people stick with</font>

180
00:08:37,520 --> 00:08:47,090
<font color="#CCCCCC">it</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> see you know our rust</font><font color="#E5E5E5"> programmers</font>

181
00:08:41,590 --> 00:08:48,200
coding safe-ish<font color="#E5E5E5"> rust</font><font color="#CCCCCC"> and you know what</font>

182
00:08:47,090 --> 00:08:50,510
can<font color="#E5E5E5"> we do</font>

183
00:08:48,200 --> 00:08:52,220
given these measurements of safety for

184
00:08:50,510 --> 00:08:56,720
libraries like is everyone using some

185
00:08:52,220 --> 00:08:57,590
library that's a ton of unsafe space on

186
00:08:56,720 --> 00:09:00,400
which

187
00:08:57,590 --> 00:09:05,270
can<font color="#CCCCCC"> use attack surface realistically</font>

188
00:09:00,400 --> 00:09:07,040
<font color="#CCCCCC">tsunamis this is my cat Batman this</font><font color="#E5E5E5"> is</font>

189
00:09:05,270 --> 00:09:22,880
how you<font color="#E5E5E5"> find me hi</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> Avada Kedavra</font>

190
00:09:07,040 --> 00:09:26,180
<font color="#E5E5E5">everywhere</font><font color="#CCCCCC"> any questions</font><font color="#E5E5E5"> I mean I could</font>

191
00:09:22,880 --> 00:09:28,189
<font color="#E5E5E5">probably add all of these up but now</font>

192
00:09:26,180 --> 00:09:31,699
they're broken<font color="#E5E5E5"> out by module and you</font>

193
00:09:28,190 --> 00:09:33,920
just go over<font color="#E5E5E5"> it for what it's worth I</font>

194
00:09:31,700 --> 00:09:36,290
<font color="#CCCCCC">really enjoy working with rust it's got</font>

195
00:09:33,920 --> 00:09:39,349
a bit of<font color="#CCCCCC"> a learning curve but</font><font color="#E5E5E5"> cargo the</font>

196
00:09:36,290 --> 00:09:43,730
package<font color="#E5E5E5"> manager is fabulous I love</font><font color="#CCCCCC"> the</font>

197
00:09:39,350 --> 00:09:46,190
package<font color="#E5E5E5"> manager</font><font color="#CCCCCC"> and that's how I judge</font>

198
00:09:43,730 --> 00:10:13,130
languages now so I like your package

199
00:09:46,190 --> 00:10:15,200
manager or not maybe else so like

200
00:10:13,130 --> 00:10:18,560
something that<font color="#E5E5E5"> you can look at if</font><font color="#CCCCCC"> your</font>

201
00:10:15,200 --> 00:10:21,020
is if you are<font color="#CCCCCC"> do</font><font color="#E5E5E5"> referencing raw</font>

202
00:10:18,560 --> 00:10:23,630
pointers or if you are<font color="#CCCCCC"> calling and</font>

203
00:10:21,020 --> 00:10:26,390
demand transmit<font color="#E5E5E5"> functions</font><font color="#CCCCCC"> I mentioned</font>

204
00:10:23,630 --> 00:10:29,300
earlier those should kind of<font color="#E5E5E5"> trigger</font>

205
00:10:26,390 --> 00:10:30,740
warning signs<font color="#E5E5E5"> like we really</font><font color="#CCCCCC"> need to</font>

206
00:10:29,300 --> 00:10:33,290
<font color="#E5E5E5">make sure that we aren't</font><font color="#CCCCCC"> doing something</font>

207
00:10:30,740 --> 00:10:38,540
horribly wrong here<font color="#CCCCCC"> this might</font><font color="#E5E5E5"> be</font>

208
00:10:33,290 --> 00:10:41,959
<font color="#E5E5E5">somewhere to dig a little</font><font color="#CCCCCC"> further to</font>

209
00:10:38,540 --> 00:10:44,719
stuff<font color="#E5E5E5"> like that really and if someone</font>

210
00:10:41,959 --> 00:10:47,319
decides<font color="#E5E5E5"> another really bad smell for</font>

211
00:10:44,720 --> 00:10:52,160
rust would be if you iterate over a

212
00:10:47,320 --> 00:10:56,450
<font color="#E5E5E5">collection using indexes indices index</font>

213
00:10:52,160 --> 00:11:00,350
me<font color="#E5E5E5"> if you don't use an iterator because</font>

214
00:10:56,450 --> 00:11:02,330
that's a really<font color="#CCCCCC"> easy</font><font color="#E5E5E5"> way to violate all</font>

215
00:11:00,350 --> 00:11:05,050
the<font color="#E5E5E5"> safety guarantees without going into</font>

216
00:11:02,330 --> 00:11:05,050
unsafe code

217
00:11:06,700 --> 00:11:16,810
<font color="#CCCCCC">i Bullock with ecology and recline</font>

218
00:11:11,500 --> 00:11:21,550
models<font color="#E5E5E5"> to my sort particular on face</font><font color="#CCCCCC"> I</font>

219
00:11:16,810 --> 00:11:25,000
<font color="#CCCCCC">should certainly</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> for us so I know</font>

220
00:11:21,550 --> 00:11:27,810
like<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> built in cargo fuzz</font>

221
00:11:25,000 --> 00:11:32,800
so you can fuzz programs pretty easily

222
00:11:27,810 --> 00:11:34,660
<font color="#CCCCCC">aside from that</font><font color="#E5E5E5"> maybe I don't know so in</font>

223
00:11:32,800 --> 00:11:36,579
the<font color="#CCCCCC"> income statement</font><font color="#E5E5E5"> there absolutely no</font>

224
00:11:34,660 --> 00:11:38,850
<font color="#E5E5E5">change whatsoever</font><font color="#CCCCCC"> going to cold and the</font>

225
00:11:36,580 --> 00:11:42,070
<font color="#CCCCCC">Crocker will be happy to do whatever you</font>

226
00:11:38,850 --> 00:11:45,100
<font color="#E5E5E5">know not necessarily an unsafe code it's</font>

227
00:11:42,070 --> 00:11:47,680
<font color="#E5E5E5">not like the Wild West</font><font color="#CCCCCC"> like it's not you</font>

228
00:11:45,100 --> 00:11:51,090
know all holds barred like let's just do

229
00:11:47,680 --> 00:11:54,489
whatever we<font color="#E5E5E5"> want what it allows are</font>

230
00:11:51,090 --> 00:11:57,460
basically<font color="#E5E5E5"> these things so compared to</font>

231
00:11:54,490 --> 00:12:02,370
see the undefined behavior that you can

232
00:11:57,460 --> 00:12:04,720
get and unsafe for<font color="#E5E5E5"> us is very</font><font color="#CCCCCC"> limited</font>

233
00:12:02,370 --> 00:12:14,710
<font color="#CCCCCC">you're generally not going</font><font color="#E5E5E5"> to get</font>

234
00:12:04,720 --> 00:12:18,370
arbitrary thankful so yeah so I mean if

235
00:12:14,710 --> 00:12:20,620
<font color="#CCCCCC">you if you go you know from safe Russ</font>

236
00:12:18,370 --> 00:12:22,930
into an unsafe block and you're<font color="#E5E5E5"> calling</font>

237
00:12:20,620 --> 00:12:26,830
<font color="#CCCCCC">into C code and that C code there's all</font>

238
00:12:22,930 --> 00:12:28,630
<font color="#E5E5E5">sorts of ridiculous stuff yes</font><font color="#CCCCCC"> then all</font>

239
00:12:26,830 --> 00:12:31,330
sorts<font color="#E5E5E5"> of ridiculous things could happen</font>

240
00:12:28,630 --> 00:12:35,830
in<font color="#E5E5E5"> that C code that is being called from</font>

241
00:12:31,330 --> 00:12:38,290
<font color="#E5E5E5">Raja and there is so</font><font color="#CCCCCC"> there's I'm</font><font color="#E5E5E5"> working</font>

242
00:12:35,830 --> 00:12:40,900
<font color="#CCCCCC">doing some work to try to figure out you</font>

243
00:12:38,290 --> 00:12:43,150
know how we can protect<font color="#E5E5E5"> ourselves on the</font>

244
00:12:40,900 --> 00:12:45,550
rough side when you're<font color="#E5E5E5"> calling into</font>

245
00:12:43,150 --> 00:12:48,010
these unsafe<font color="#E5E5E5"> boxes and these unsafe</font><font color="#CCCCCC"> C</font>

246
00:12:45,550 --> 00:12:50,680
functions<font color="#CCCCCC"> it turns out</font><font color="#E5E5E5"> that really the</font>

247
00:12:48,010 --> 00:12:54,939
<font color="#CCCCCC">only unsafe boundary that you</font><font color="#E5E5E5"> can say</font>

248
00:12:50,680 --> 00:12:58,689
you<font color="#CCCCCC"> know is really secure like the hard</font>

249
00:12:54,940 --> 00:13:01,780
wall is this module level so basically

250
00:12:58,690 --> 00:13:04,150
just like<font color="#E5E5E5"> the project level</font><font color="#CCCCCC"> you know</font>

251
00:13:01,780 --> 00:13:06,490
like I work on a browser and so our

252
00:13:04,150 --> 00:13:10,150
ideas modules is you know we have the

253
00:13:06,490 --> 00:13:11,980
<font color="#E5E5E5">net crate and we</font><font color="#CCCCCC"> have the style</font><font color="#E5E5E5"> crate</font>

254
00:13:10,150 --> 00:13:17,260
<font color="#E5E5E5">and we have the script crate</font><font color="#CCCCCC"> so those</font>

255
00:13:11,980 --> 00:13:20,590
<font color="#E5E5E5">top level module</font><font color="#CCCCCC"> those would</font><font color="#E5E5E5"> be the</font>

256
00:13:17,260 --> 00:13:23,830
unsafe boundary so if you did<font color="#E5E5E5"> something</font>

257
00:13:20,590 --> 00:13:27,340
horrible it would be consumed it would

258
00:13:23,830 --> 00:13:29,440
become<font color="#E5E5E5"> contained yes that's</font><font color="#CCCCCC"> the word it</font>

259
00:13:27,340 --> 00:13:40,720
<font color="#CCCCCC">was keyboard it would be contained to</font>

260
00:13:29,440 --> 00:13:45,610
<font color="#CCCCCC">that</font><font color="#E5E5E5"> module they can affect the</font><font color="#CCCCCC"> entire</font>

261
00:13:40,720 --> 00:13:48,070
application<font color="#E5E5E5"> the entire module</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> it can</font>

262
00:13:45,610 --> 00:13:50,200
<font color="#E5E5E5">affect the entire module the module is</font>

263
00:13:48,070 --> 00:13:52,720
not necessarily<font color="#E5E5E5"> the entire application</font>

264
00:13:50,200 --> 00:13:56,200
it could be but<font color="#E5E5E5"> it could also be a</font>

265
00:13:52,720 --> 00:13:58,330
component and you<font color="#CCCCCC"> know where</font><font color="#E5E5E5"> it rest is</font>

266
00:13:56,200 --> 00:14:00,970
a pretty new language it hit 1.0 and

267
00:13:58,330 --> 00:14:03,880
2015 so<font color="#E5E5E5"> you know we're working on trying</font>

268
00:14:00,970 --> 00:14:05,410
<font color="#E5E5E5">to</font><font color="#CCCCCC"> figure out what exactly it means</font><font color="#E5E5E5"> to</font>

269
00:14:03,880 --> 00:14:09,100
be unsafe and<font color="#E5E5E5"> what exactly</font><font color="#CCCCCC"> are the</font>

270
00:14:05,410 --> 00:14:11,650
limits on safety<font color="#E5E5E5"> cool language fun to</font>

271
00:14:09,100 --> 00:14:13,690
work with<font color="#E5E5E5"> it does make your life easier</font>

272
00:14:11,650 --> 00:14:21,640
once<font color="#E5E5E5"> you get used to dealing with the</font>

273
00:14:13,690 --> 00:14:23,620
<font color="#CCCCCC">mr. Barrow checker all</font><font color="#E5E5E5"> right sounds good</font>

274
00:14:21,640 --> 00:14:26,920
if you're interested<font color="#E5E5E5"> in using</font><font color="#CCCCCC"> Rustom</font>

275
00:14:23,620 --> 00:14:28,810
<font color="#CCCCCC">they're on IRC a rush</font><font color="#E5E5E5"> channel</font><font color="#CCCCCC"> rust</font>

276
00:14:26,920 --> 00:14:32,860
<font color="#CCCCCC">beginners</font><font color="#E5E5E5"> channel everyone's very</font>

277
00:14:28,810 --> 00:14:34,890
helpful everyone's<font color="#E5E5E5"> very friendly thank</font>

278
00:14:32,860 --> 00:14:39,559
you

279
00:14:34,890 --> 00:14:39,559
[Applause]

