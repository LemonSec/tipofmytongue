1
00:00:00,030 --> 00:00:04,470
so welcome<font color="#E5E5E5"> to this session about hacking</font>

2
00:00:02,100 --> 00:00:06,569
with<font color="#CCCCCC"> unicode so i'm mateus</font>

3
00:00:04,470 --> 00:00:09,389
as you've<font color="#E5E5E5"> heard by now I work for</font><font color="#CCCCCC"> Opera</font>

4
00:00:06,569 --> 00:00:10,980
<font color="#CCCCCC">Software</font><font color="#E5E5E5"> in developer relations and my</font>

5
00:00:09,389 --> 00:00:12,599
job<font color="#E5E5E5"> kind of requires me to have a</font>

6
00:00:10,980 --> 00:00:15,450
certain<font color="#E5E5E5"> knowledge when it comes to web</font>

7
00:00:12,599 --> 00:00:17,340
standards<font color="#CCCCCC"> so</font><font color="#E5E5E5"> HTML CSS and</font><font color="#CCCCCC"> JavaScript I</font>

8
00:00:15,450 --> 00:00:19,080
kind of need<font color="#CCCCCC"> to know about</font><font color="#E5E5E5"> a couple of</font>

9
00:00:17,340 --> 00:00:20,820
weird edge cases involving<font color="#E5E5E5"> these</font>

10
00:00:19,080 --> 00:00:23,189
standards and<font color="#E5E5E5"> how browsers interpret</font>

11
00:00:20,820 --> 00:00:24,630
them<font color="#E5E5E5"> and for a very long time</font><font color="#CCCCCC"> I was</font>

12
00:00:23,189 --> 00:00:27,539
<font color="#E5E5E5">doing research on all this</font><font color="#CCCCCC"> stuff just</font>

13
00:00:24,630 --> 00:00:29,250
<font color="#E5E5E5">for fun</font><font color="#CCCCCC"> but over the years I</font><font color="#E5E5E5"> realized</font>

14
00:00:27,539 --> 00:00:31,320
that there's a bit<font color="#CCCCCC"> of an overlap between</font>

15
00:00:29,250 --> 00:00:33,239
<font color="#E5E5E5">this sort of knowledge and the kind of</font>

16
00:00:31,320 --> 00:00:36,540
knowledge<font color="#CCCCCC"> that a hacker needs</font><font color="#E5E5E5"> if they</font>

17
00:00:33,239 --> 00:00:37,980
<font color="#E5E5E5">want to attack</font><font color="#CCCCCC"> a web application</font><font color="#E5E5E5"> so</font>

18
00:00:36,540 --> 00:00:39,690
today I'm<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about a</font><font color="#E5E5E5"> couple</font>

19
00:00:37,980 --> 00:00:41,550
<font color="#E5E5E5">of things that I learned about unicode</font>

20
00:00:39,690 --> 00:00:43,169
over the years<font color="#E5E5E5"> first I'll briefly</font>

21
00:00:41,550 --> 00:00:44,879
<font color="#CCCCCC">explain the basics</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Unicode and</font>

22
00:00:43,170 --> 00:00:47,010
character encodings<font color="#E5E5E5"> just to make</font><font color="#CCCCCC"> sure</font>

23
00:00:44,879 --> 00:00:48,629
we're all<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same page</font><font color="#E5E5E5"> then we'll</font>

24
00:00:47,010 --> 00:00:50,879
take a<font color="#E5E5E5"> look at how</font><font color="#CCCCCC"> Java Script handles</font>

25
00:00:48,629 --> 00:00:52,800
<font color="#CCCCCC">unicode and what kind of bugs</font><font color="#E5E5E5"> that this</font>

26
00:00:50,879 --> 00:00:54,599
often leads<font color="#E5E5E5"> to and then we'll do the</font>

27
00:00:52,800 --> 00:00:56,610
same<font color="#E5E5E5"> thing for the my sequel database</font>

28
00:00:54,600 --> 00:00:58,260
<font color="#E5E5E5">software and finally I'll demonstrate</font>

29
00:00:56,610 --> 00:01:01,680
how this knowledge<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be used to</font>

30
00:00:58,260 --> 00:01:03,510
actually<font color="#E5E5E5"> craft exploits okay so let's</font>

31
00:01:01,680 --> 00:01:06,060
get<font color="#CCCCCC"> started by taking a quick look at</font>

32
00:01:03,510 --> 00:01:07,770
the very basics of<font color="#CCCCCC"> Unicode</font><font color="#E5E5E5"> the first</font>

33
00:01:06,060 --> 00:01:10,229
thing to remember<font color="#E5E5E5"> about unicode is that</font>

34
00:01:07,770 --> 00:01:13,170
it is not an encoding people very often

35
00:01:10,229 --> 00:01:15,229
confuse<font color="#E5E5E5"> utf-8 for</font><font color="#CCCCCC"> Unicode but they're</font>

36
00:01:13,170 --> 00:01:17,909
really two quite different things

37
00:01:15,229 --> 00:01:20,490
<font color="#CCCCCC">Unicode is not an encoding it's more</font>

38
00:01:17,909 --> 00:01:22,140
like a<font color="#E5E5E5"> database that</font><font color="#CCCCCC"> map's</font><font color="#E5E5E5"> any symbol</font>

39
00:01:20,490 --> 00:01:24,830
<font color="#E5E5E5">that you can think of to a unique number</font>

40
00:01:22,140 --> 00:01:27,390
<font color="#CCCCCC">for that</font><font color="#E5E5E5"> symbol</font><font color="#CCCCCC"> called the code point</font>

41
00:01:24,830 --> 00:01:29,429
any symbol also<font color="#E5E5E5"> gets assigned a unique</font>

42
00:01:27,390 --> 00:01:31,560
<font color="#E5E5E5">name for</font><font color="#CCCCCC"> that symbol and the main</font>

43
00:01:29,430 --> 00:01:33,390
<font color="#E5E5E5">purpose for that is that you can this</font>

44
00:01:31,560 --> 00:01:35,220
way you can refer to any symbol at all

45
00:01:33,390 --> 00:01:37,560
<font color="#E5E5E5">without</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to use the symbol</font><font color="#CCCCCC"> itself</font>

46
00:01:35,220 --> 00:01:39,270
<font color="#CCCCCC">you can just refer to the code point</font><font color="#E5E5E5"> the</font>

47
00:01:37,560 --> 00:01:41,400
<font color="#E5E5E5">number or</font><font color="#CCCCCC"> the name for the symbol</font><font color="#E5E5E5"> and</font>

48
00:01:39,270 --> 00:01:45,298
everyone will know<font color="#CCCCCC"> exactly which symbol</font>

49
00:01:41,400 --> 00:01:47,430
you're looking for so for<font color="#E5E5E5"> example</font>

50
00:01:45,299 --> 00:01:50,570
<font color="#E5E5E5">Unicode</font><font color="#CCCCCC"> Maps the</font><font color="#E5E5E5"> Latin capital letter</font><font color="#CCCCCC"> a</font>

51
00:01:47,430 --> 00:01:53,610
<font color="#E5E5E5">to the code point you plus 0 0 for 1 and</font>

52
00:01:50,570 --> 00:01:55,529
this is a hexadecimal number<font color="#E5E5E5"> not</font><font color="#CCCCCC"> a</font>

53
00:01:53,610 --> 00:01:57,659
decimal<font color="#CCCCCC"> number and the code points are</font>

54
00:01:55,530 --> 00:01:59,780
<font color="#E5E5E5">usually formatted this way</font><font color="#CCCCCC"> so hex digits</font>

55
00:01:57,659 --> 00:02:02,100
usually<font color="#CCCCCC"> 0 padded up to at least</font><font color="#E5E5E5"> four</font>

56
00:01:59,780 --> 00:02:05,340
<font color="#E5E5E5">hexadecimal digits</font><font color="#CCCCCC"> and they get the</font><font color="#E5E5E5"> U</font>

57
00:02:02,100 --> 00:02:06,929
<font color="#E5E5E5">plus prefix now another example</font><font color="#CCCCCC"> of a</font>

58
00:02:05,340 --> 00:02:09,090
code<font color="#E5E5E5"> point and of a character is the</font>

59
00:02:06,930 --> 00:02:10,800
latin small letter<font color="#E5E5E5"> a it's a completely</font>

60
00:02:09,090 --> 00:02:12,450
different character so it gets its own

61
00:02:10,800 --> 00:02:13,440
unique name<font color="#CCCCCC"> and its own unique code</font>

62
00:02:12,450 --> 00:02:15,720
point<font color="#E5E5E5"> this</font>

63
00:02:13,440 --> 00:02:17,430
is how<font color="#E5E5E5"> unicode works so there's a lot of</font>

64
00:02:15,720 --> 00:02:19,260
different<font color="#E5E5E5"> symbols in</font><font color="#CCCCCC"> unicode and each of</font>

65
00:02:17,430 --> 00:02:20,700
them have their own<font color="#E5E5E5"> code points there's</font>

66
00:02:19,260 --> 00:02:22,590
a lot of weird stuff<font color="#CCCCCC"> like</font><font color="#E5E5E5"> there's a</font>

67
00:02:20,700 --> 00:02:24,750
snowman<font color="#CCCCCC"> and lately</font><font color="#E5E5E5"> there's</font><font color="#CCCCCC"> been a lot of</font>

68
00:02:22,590 --> 00:02:27,210
emoji additions to<font color="#E5E5E5"> unicode as well like</font>

69
00:02:24,750 --> 00:02:30,090
there's the pile<font color="#CCCCCC"> of poo for example and</font>

70
00:02:27,210 --> 00:02:32,550
as you can<font color="#E5E5E5"> see the code point is</font><font color="#CCCCCC"> 1f for</font>

71
00:02:30,090 --> 00:02:34,830
a<font color="#CCCCCC"> 9 in this case which consists of 5</font>

72
00:02:32,550 --> 00:02:36,240
hexadecimal digits so at this point<font color="#E5E5E5"> you</font>

73
00:02:34,830 --> 00:02:38,070
may be wondering what's the<font color="#CCCCCC"> highest</font>

74
00:02:36,240 --> 00:02:39,990
possible code point value is or how many

75
00:02:38,070 --> 00:02:42,959
code points are there in total<font color="#E5E5E5"> in</font>

76
00:02:39,990 --> 00:02:45,600
<font color="#CCCCCC">unicode</font><font color="#E5E5E5"> well the answer is</font><font color="#CCCCCC"> Unicode</font>

77
00:02:42,960 --> 00:02:48,000
ranges from<font color="#CCCCCC"> o to</font><font color="#E5E5E5"> 1 Oh ffff</font>

78
00:02:45,600 --> 00:02:51,090
<font color="#E5E5E5">that's a little over 1.1 million</font>

79
00:02:48,000 --> 00:02:52,350
possible code points and symbols now to

80
00:02:51,090 --> 00:02:54,870
keep<font color="#E5E5E5"> things a little bit organized</font>

81
00:02:52,350 --> 00:02:57,450
<font color="#E5E5E5">Unicode divides this huge range of code</font>

82
00:02:54,870 --> 00:03:00,810
points into 17 planes<font color="#E5E5E5"> which consists of</font>

83
00:02:57,450 --> 00:03:02,670
<font color="#CCCCCC">about 65,000 code points each and the</font>

84
00:03:00,810 --> 00:03:04,800
very first<font color="#E5E5E5"> of these planes is probably</font>

85
00:03:02,670 --> 00:03:07,260
the most important one<font color="#CCCCCC"> it's called the</font>

86
00:03:04,800 --> 00:03:09,330
basic<font color="#CCCCCC"> multilingual plane</font><font color="#E5E5E5"> or the BMP and</font>

87
00:03:07,260 --> 00:03:11,250
it contains all<font color="#CCCCCC"> the most commonly</font><font color="#E5E5E5"> used</font>

88
00:03:09,330 --> 00:03:13,140
symbols in fact whenever<font color="#E5E5E5"> you're writing</font>

89
00:03:11,250 --> 00:03:15,060
<font color="#E5E5E5">a text</font><font color="#CCCCCC"> document in English or even</font>

90
00:03:13,140 --> 00:03:16,769
German with all your weird<font color="#E5E5E5"> umlauts and</font>

91
00:03:15,060 --> 00:03:18,930
characters like that<font color="#E5E5E5"> you probably won't</font>

92
00:03:16,770 --> 00:03:21,330
<font color="#E5E5E5">even need any code points</font><font color="#CCCCCC"> outside of</font>

93
00:03:18,930 --> 00:03:23,340
this BMP so because<font color="#E5E5E5"> this basic</font>

94
00:03:21,330 --> 00:03:25,650
multilingual<font color="#CCCCCC"> plane</font><font color="#E5E5E5"> contains all the most</font>

95
00:03:23,340 --> 00:03:29,760
<font color="#E5E5E5">popular symbols I like to refer</font><font color="#CCCCCC"> to it</font><font color="#E5E5E5"> as</font>

96
00:03:25,650 --> 00:03:32,820
the notorious<font color="#E5E5E5"> BMP anyway just like any</font>

97
00:03:29,760 --> 00:03:34,829
<font color="#E5E5E5">other plane it consists about 65,000</font>

98
00:03:32,820 --> 00:03:37,620
symbols in total so<font color="#CCCCCC"> that leaves us about</font>

99
00:03:34,830 --> 00:03:40,350
1<font color="#E5E5E5"> million other</font><font color="#CCCCCC"> Unicode code points that</font>

100
00:03:37,620 --> 00:03:41,700
live outside<font color="#E5E5E5"> of this BMP and the planes</font>

101
00:03:40,350 --> 00:03:44,040
<font color="#E5E5E5">that these code</font><font color="#CCCCCC"> points belong to are</font>

102
00:03:41,700 --> 00:03:48,000
called supplementary<font color="#CCCCCC"> planes</font><font color="#E5E5E5"> or the</font>

103
00:03:44,040 --> 00:03:49,590
astral planes so<font color="#E5E5E5"> actual code points are</font>

104
00:03:48,000 --> 00:03:51,750
pretty<font color="#E5E5E5"> easy to recognize</font><font color="#CCCCCC"> because you</font>

105
00:03:49,590 --> 00:03:55,019
need at least<font color="#CCCCCC"> five hexadecimal digits to</font>

106
00:03:51,750 --> 00:03:56,730
<font color="#CCCCCC">represent them okay and that includes</font>

107
00:03:55,019 --> 00:03:58,260
our very basic<font color="#E5E5E5"> introduction to Unicode</font>

108
00:03:56,730 --> 00:04:01,560
<font color="#E5E5E5">now let's talk</font><font color="#CCCCCC"> about character encodings</font>

109
00:03:58,260 --> 00:04:03,420
for<font color="#CCCCCC"> Unicode so here's a list</font><font color="#E5E5E5"> of</font>

110
00:04:01,560 --> 00:04:05,190
<font color="#E5E5E5">encodings that fully support</font><font color="#CCCCCC"> Unicode</font>

111
00:04:03,420 --> 00:04:07,500
this means that<font color="#CCCCCC"> they can encode and</font>

112
00:04:05,190 --> 00:04:09,630
decode any Unicode<font color="#E5E5E5"> code point value in</font>

113
00:04:07,500 --> 00:04:11,940
that entire range<font color="#E5E5E5"> that we just talked</font>

114
00:04:09,630 --> 00:04:14,340
about<font color="#E5E5E5"> so this table</font><font color="#CCCCCC"> shows the</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of</font>

115
00:04:11,940 --> 00:04:16,709
bytes<font color="#CCCCCC"> that each encoding requires per</font>

116
00:04:14,340 --> 00:04:18,959
code points<font color="#E5E5E5"> now one of the encoding</font><font color="#CCCCCC"> z'</font>

117
00:04:16,709 --> 00:04:20,459
<font color="#E5E5E5">as you can see is a fixed width encoding</font>

118
00:04:18,959 --> 00:04:23,729
it's<font color="#E5E5E5"> utf-32</font>

119
00:04:20,459 --> 00:04:25,380
and it<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> 4 bytes</font><font color="#E5E5E5"> for any code point</font>

120
00:04:23,729 --> 00:04:26,719
whatsoever<font color="#E5E5E5"> it doesn't care what</font><font color="#CCCCCC"> cone</font>

121
00:04:25,380 --> 00:04:30,080
<font color="#E5E5E5">point it is it always</font>

122
00:04:26,720 --> 00:04:32,420
it's exactly<font color="#CCCCCC"> 4 bytes to represent it so</font>

123
00:04:30,080 --> 00:04:33,979
that's nice<font color="#E5E5E5"> and simple perhaps</font><font color="#CCCCCC"> but it's</font>

124
00:04:32,420 --> 00:04:36,530
not very efficient<font color="#E5E5E5"> in terms of storage</font>

125
00:04:33,980 --> 00:04:39,230
space<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are other solutions</font><font color="#CCCCCC"> like</font>

126
00:04:36,530 --> 00:04:42,409
variable-width encoding<font color="#CCCCCC"> Slyke utf-16 for</font>

127
00:04:39,230 --> 00:04:45,440
example it uses exactly<font color="#CCCCCC"> 2 bytes for BMP</font>

128
00:04:42,410 --> 00:04:48,980
symbols but<font color="#CCCCCC"> 4 bytes to encode an astral</font>

129
00:04:45,440 --> 00:04:51,590
symbol now whenever you have<font color="#CCCCCC"> the choice</font>

130
00:04:48,980 --> 00:04:53,480
you<font color="#CCCCCC"> should</font><font color="#E5E5E5"> always go for utf-8 and there</font>

131
00:04:51,590 --> 00:04:55,400
are<font color="#E5E5E5"> several reasons for that for</font>

132
00:04:53,480 --> 00:04:56,900
starters<font color="#CCCCCC"> it supports full</font><font color="#E5E5E5"> Unicode just</font>

133
00:04:55,400 --> 00:04:59,270
like all the other encoding is you see

134
00:04:56,900 --> 00:05:01,010
here but it's also very<font color="#CCCCCC"> much</font><font color="#E5E5E5"> optimized</font>

135
00:04:59,270 --> 00:05:03,440
for storage<font color="#CCCCCC"> the most commonly used</font>

136
00:05:01,010 --> 00:05:06,950
<font color="#E5E5E5">symbols take up fewer bytes as you can</font>

137
00:05:03,440 --> 00:05:08,960
see BMP symbols take<font color="#E5E5E5"> 1 2 or 3 bytes but</font>

138
00:05:06,950 --> 00:05:11,060
<font color="#E5E5E5">if you just look at ASCII symbols only</font>

139
00:05:08,960 --> 00:05:14,000
they will always only<font color="#E5E5E5"> take up a single</font>

140
00:05:11,060 --> 00:05:15,890
<font color="#E5E5E5">byte so it's very much optimized</font><font color="#CCCCCC"> and</font>

141
00:05:14,000 --> 00:05:18,050
because<font color="#CCCCCC"> of that it's also fully</font>

142
00:05:15,890 --> 00:05:19,940
backwards compatible with ASCII this

143
00:05:18,050 --> 00:05:22,280
means that any existing ASCII document

144
00:05:19,940 --> 00:05:27,860
<font color="#E5E5E5">out there is automatically a valid utf-8</font>

145
00:05:22,280 --> 00:05:30,049
document<font color="#CCCCCC"> ok so the next part</font><font color="#E5E5E5"> of this</font>

146
00:05:27,860 --> 00:05:31,550
talk<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be a little bit in depth</font><font color="#E5E5E5"> we'll</font>

147
00:05:30,050 --> 00:05:33,710
talk about various problems<font color="#CCCCCC"> involving</font>

148
00:05:31,550 --> 00:05:35,660
<font color="#E5E5E5">Unicode specifically in JavaScript and</font>

149
00:05:33,710 --> 00:05:37,849
common mistakes<font color="#CCCCCC"> made by JavaScript</font>

150
00:05:35,660 --> 00:05:39,530
developers and how they can be fixed<font color="#CCCCCC"> but</font>

151
00:05:37,850 --> 00:05:41,960
<font color="#E5E5E5">even though this section is</font><font color="#CCCCCC"> about</font>

152
00:05:39,530 --> 00:05:43,909
JavaScript<font color="#E5E5E5"> other programming languages</font>

153
00:05:41,960 --> 00:05:46,219
will<font color="#CCCCCC"> have similar problems so don't</font><font color="#E5E5E5"> get</font>

154
00:05:43,910 --> 00:05:48,530
too hung up on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> language specific</font>

155
00:05:46,220 --> 00:05:49,910
details here instead try to think of the

156
00:05:48,530 --> 00:05:53,270
underlying<font color="#E5E5E5"> problems because that's</font>

157
00:05:49,910 --> 00:05:55,400
really what it's about here so for

158
00:05:53,270 --> 00:05:56,840
example in string literals in<font color="#E5E5E5"> JavaScript</font>

159
00:05:55,400 --> 00:05:58,880
<font color="#CCCCCC">you may have</font><font color="#E5E5E5"> seen things like this</font>

160
00:05:56,840 --> 00:06:01,280
before<font color="#E5E5E5"> it starts with a backslash</font>

161
00:05:58,880 --> 00:06:03,620
followed<font color="#E5E5E5"> by X followed by hexadecimal</font>

162
00:06:01,280 --> 00:06:05,599
digits<font color="#E5E5E5"> and now that we</font><font color="#CCCCCC"> know about</font>

163
00:06:03,620 --> 00:06:07,729
<font color="#CCCCCC">Unicode it's easy to see what these two</font>

164
00:06:05,600 --> 00:06:10,490
hexadecimal<font color="#E5E5E5"> digits refer to they refer</font>

165
00:06:07,729 --> 00:06:12,469
to<font color="#E5E5E5"> a Unicode code point so this is a way</font>

166
00:06:10,490 --> 00:06:14,600
<font color="#E5E5E5">to use a character or a symbol in a</font>

167
00:06:12,470 --> 00:06:16,490
string without<font color="#E5E5E5"> having to use the symbol</font>

168
00:06:14,600 --> 00:06:18,530
itself<font color="#E5E5E5"> you can just use an escape</font>

169
00:06:16,490 --> 00:06:21,560
sequence for<font color="#E5E5E5"> instead and this is useful</font>

170
00:06:18,530 --> 00:06:22,940
<font color="#E5E5E5">if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to use non ASCII symbols for</font>

171
00:06:21,560 --> 00:06:25,580
example but<font color="#CCCCCC"> you want to make sure that</font>

172
00:06:22,940 --> 00:06:28,340
your source code remains ASCII safe like

173
00:06:25,580 --> 00:06:30,260
in this case so this is<font color="#E5E5E5"> fairly useful</font>

174
00:06:28,340 --> 00:06:31,969
<font color="#E5E5E5">but because you're just</font><font color="#CCCCCC"> limited to</font><font color="#E5E5E5"> two</font>

175
00:06:30,260 --> 00:06:34,210
hexadecimal<font color="#E5E5E5"> digits there's not a lot of</font>

176
00:06:31,970 --> 00:06:36,410
code points that you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> use this for</font>

177
00:06:34,210 --> 00:06:38,150
luckily there's another type of escape

178
00:06:36,410 --> 00:06:40,550
sequence called the<font color="#CCCCCC"> Unicode escape</font>

179
00:06:38,150 --> 00:06:42,049
sequence and it looks<font color="#CCCCCC"> like this</font>

180
00:06:40,550 --> 00:06:44,660
<font color="#E5E5E5">it starts with a</font><font color="#CCCCCC"> backslash followed</font><font color="#E5E5E5"> by</font>

181
00:06:42,050 --> 00:06:46,670
you followed by four hexadecimal<font color="#E5E5E5"> digits</font>

182
00:06:44,660 --> 00:06:48,170
<font color="#E5E5E5">so of course this opens up a lot of</font>

183
00:06:46,670 --> 00:06:50,060
other code points that we<font color="#E5E5E5"> can now</font>

184
00:06:48,170 --> 00:06:52,580
<font color="#CCCCCC">represent using</font><font color="#E5E5E5"> an escape sequence as</font>

185
00:06:50,060 --> 00:06:54,410
well<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> code points to</font><font color="#CCCCCC"> six</font>

186
00:06:52,580 --> 00:06:57,440
<font color="#CCCCCC">six one</font><font color="#E5E5E5"> which is apparently the</font><font color="#CCCCCC"> white</font>

187
00:06:54,410 --> 00:06:59,570
<font color="#E5E5E5">heart symbol so this is</font><font color="#CCCCCC"> super useful</font><font color="#E5E5E5"> and</font>

188
00:06:57,440 --> 00:07:02,060
<font color="#E5E5E5">because we have four hexadecimal digits</font>

189
00:06:59,570 --> 00:07:04,849
we can use this for any BMP code point

190
00:07:02,060 --> 00:07:07,460
<font color="#E5E5E5">at all</font><font color="#CCCCCC"> but what do we</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> about all</font><font color="#E5E5E5"> those</font>

191
00:07:04,850 --> 00:07:08,960
other asked<font color="#E5E5E5"> for code points we need more</font>

192
00:07:07,460 --> 00:07:11,150
<font color="#E5E5E5">than four hexadecimal digits for those</font>

193
00:07:08,960 --> 00:07:12,890
right<font color="#E5E5E5"> or another way to phrase the</font>

194
00:07:11,150 --> 00:07:15,140
question would<font color="#E5E5E5"> be what</font><font color="#CCCCCC"> about our friends</font>

195
00:07:12,890 --> 00:07:17,570
the pile of<font color="#E5E5E5"> poo and other equally</font>

196
00:07:15,140 --> 00:07:19,880
important as well symbols of course<font color="#E5E5E5"> so</font>

197
00:07:17,570 --> 00:07:21,530
how can we escape these symbols<font color="#CCCCCC"> if we</font>

198
00:07:19,880 --> 00:07:24,920
can only specify<font color="#E5E5E5"> up to four hexadecimal</font>

199
00:07:21,530 --> 00:07:27,340
<font color="#E5E5E5">digits at a time the answer is we kind</font>

200
00:07:24,920 --> 00:07:30,080
<font color="#E5E5E5">of can but it's a little bit complicated</font>

201
00:07:27,340 --> 00:07:31,580
<font color="#E5E5E5">now in ACMA script</font><font color="#CCCCCC"> 6 the latest version</font>

202
00:07:30,080 --> 00:07:33,950
of the<font color="#CCCCCC"> JavaScript standard it's in fact</font>

203
00:07:31,580 --> 00:07:35,990
<font color="#E5E5E5">really easy because there is yet another</font>

204
00:07:33,950 --> 00:07:37,729
type<font color="#CCCCCC"> of escape sequence</font><font color="#E5E5E5"> it starts with a</font>

205
00:07:35,990 --> 00:07:39,770
backslash<font color="#E5E5E5"> followed by</font><font color="#CCCCCC"> u followed by</font>

206
00:07:37,730 --> 00:07:41,870
braces<font color="#CCCCCC"> and between the</font><font color="#E5E5E5"> braces you can</font>

207
00:07:39,770 --> 00:07:43,760
use any amount of hexadecimal digits you

208
00:07:41,870 --> 00:07:45,440
<font color="#CCCCCC">want to represent</font><font color="#E5E5E5"> the code point of</font>

209
00:07:43,760 --> 00:07:46,969
course you only need<font color="#CCCCCC"> 6 to be able to</font>

210
00:07:45,440 --> 00:07:49,940
represent<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> Unicode code points</font>

211
00:07:46,970 --> 00:07:52,550
out there<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is a very easy way</font>

212
00:07:49,940 --> 00:07:54,050
<font color="#E5E5E5">about of including a symbol into a</font>

213
00:07:52,550 --> 00:07:55,850
string without<font color="#E5E5E5"> having to use the</font><font color="#CCCCCC"> symbol</font>

214
00:07:54,050 --> 00:07:58,910
<font color="#CCCCCC">itself you</font><font color="#E5E5E5"> just use the code point and</font>

215
00:07:55,850 --> 00:08:01,610
that's it however if you need something

216
00:07:58,910 --> 00:08:03,740
<font color="#CCCCCC">that</font><font color="#E5E5E5"> works with legacy environments and</font>

217
00:08:01,610 --> 00:08:05,780
with<font color="#E5E5E5"> ACMA script</font><font color="#CCCCCC"> 5 environments because</font>

218
00:08:03,740 --> 00:08:08,630
<font color="#CCCCCC">ACMA</font><font color="#E5E5E5"> script 6 is still fairly new and it</font>

219
00:08:05,780 --> 00:08:10,219
may not<font color="#CCCCCC"> be around everywhere</font><font color="#E5E5E5"> you have to</font>

220
00:08:08,630 --> 00:08:13,490
use this<font color="#E5E5E5"> thing called surrogate pairs</font>

221
00:08:10,220 --> 00:08:15,800
and that's really<font color="#CCCCCC"> unfortunate in this</font>

222
00:08:13,490 --> 00:08:17,870
case each escape sequence represents the

223
00:08:15,800 --> 00:08:19,460
code point of one half of the surrogate

224
00:08:17,870 --> 00:08:21,680
pair<font color="#E5E5E5"> and when these</font><font color="#CCCCCC"> two halves are</font>

225
00:08:19,460 --> 00:08:23,659
combined they form<font color="#CCCCCC"> a single astral</font>

226
00:08:21,680 --> 00:08:26,150
symbol and this<font color="#E5E5E5"> is confusing</font><font color="#CCCCCC"> for a</font>

227
00:08:23,660 --> 00:08:28,130
number of<font color="#CCCCCC"> reasons for starters the code</font>

228
00:08:26,150 --> 00:08:29,450
points that you see<font color="#CCCCCC"> escape</font><font color="#E5E5E5"> there they</font>

229
00:08:28,130 --> 00:08:30,980
don't<font color="#CCCCCC"> really look anything like the</font>

230
00:08:29,450 --> 00:08:33,500
<font color="#CCCCCC">original code point that you were</font><font color="#E5E5E5"> trying</font>

231
00:08:30,980 --> 00:08:35,120
<font color="#CCCCCC">to represent so just by reading</font><font color="#E5E5E5"> this</font>

232
00:08:33,500 --> 00:08:37,460
<font color="#E5E5E5">code it's not immediately obvious</font><font color="#CCCCCC"> that</font>

233
00:08:35,120 --> 00:08:41,390
<font color="#E5E5E5">you</font><font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to represent</font><font color="#CCCCCC"> 1f for a 9</font>

234
00:08:37,460 --> 00:08:42,980
<font color="#E5E5E5">or the</font><font color="#CCCCCC"> pile of poo now there are</font>

235
00:08:41,390 --> 00:08:44,960
formulas that<font color="#E5E5E5"> you can use to calculate</font>

236
00:08:42,980 --> 00:08:46,490
<font color="#CCCCCC">the surrogate pairs based on this</font>

237
00:08:44,960 --> 00:08:48,260
<font color="#CCCCCC">asheville code point</font><font color="#E5E5E5"> or the other way</font>

238
00:08:46,490 --> 00:08:49,970
around<font color="#CCCCCC"> and here's a JavaScript</font>

239
00:08:48,260 --> 00:08:51,470
implementation<font color="#CCCCCC"> of those formulas now you</font>

240
00:08:49,970 --> 00:08:52,940
have don't have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> remember the exact</font>

241
00:08:51,470 --> 00:08:54,350
formula of<font color="#E5E5E5"> course but apparently</font>

242
00:08:52,940 --> 00:08:55,850
<font color="#E5E5E5">JavaScript developers</font>

243
00:08:54,350 --> 00:08:57,320
need to<font color="#E5E5E5"> know that this is a thing and</font>

244
00:08:55,850 --> 00:08:58,910
that<font color="#E5E5E5"> this exists and they need to be</font>

245
00:08:57,320 --> 00:09:00,500
able to<font color="#CCCCCC"> implement this if they want to</font>

246
00:08:58,910 --> 00:09:03,770
<font color="#E5E5E5">deal with strings</font><font color="#CCCCCC"> correctly in</font>

247
00:09:00,500 --> 00:09:05,660
JavaScript<font color="#E5E5E5"> now the whole concept of</font>

248
00:09:03,770 --> 00:09:08,420
<font color="#CCCCCC">using just a single escape sequence for</font>

249
00:09:05,660 --> 00:09:10,310
<font color="#E5E5E5">BMP symbols but to individual escape</font>

250
00:09:08,420 --> 00:09:12,829
sequences<font color="#E5E5E5"> for astral symbols is very</font>

251
00:09:10,310 --> 00:09:15,500
<font color="#CCCCCC">confusing and it has its consequences</font>

252
00:09:12,830 --> 00:09:17,000
throughout the entire language<font color="#CCCCCC"> for</font>

253
00:09:15,500 --> 00:09:18,560
example<font color="#CCCCCC"> let's say you want to count</font><font color="#E5E5E5"> the</font>

254
00:09:17,000 --> 00:09:21,800
<font color="#CCCCCC">number of characters in a string in</font>

255
00:09:18,560 --> 00:09:23,420
JavaScript<font color="#CCCCCC"> I would probably</font><font color="#E5E5E5"> just use the</font>

256
00:09:21,800 --> 00:09:25,189
length<font color="#CCCCCC"> property of the string</font><font color="#E5E5E5"> every</font>

257
00:09:23,420 --> 00:09:27,500
string<font color="#CCCCCC"> has</font><font color="#E5E5E5"> one so why not use</font><font color="#CCCCCC"> it right</font>

258
00:09:25,190 --> 00:09:29,270
<font color="#CCCCCC">and indeed in these examples</font><font color="#E5E5E5"> the length</font>

259
00:09:27,500 --> 00:09:31,580
property<font color="#E5E5E5"> just happens to reflect the</font>

260
00:09:29,270 --> 00:09:33,650
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of symbols in each string but</font>

261
00:09:31,580 --> 00:09:35,150
this is not always<font color="#E5E5E5"> the case and</font><font color="#CCCCCC"> that was</font>

262
00:09:33,650 --> 00:09:37,850
<font color="#E5E5E5">the first thing that</font><font color="#CCCCCC"> really surprised</font><font color="#E5E5E5"> me</font>

263
00:09:35,150 --> 00:09:39,770
when I found<font color="#E5E5E5"> out about this so here</font>

264
00:09:37,850 --> 00:09:41,450
we're using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> code point</font><font color="#E5E5E5"> for one which</font>

265
00:09:39,770 --> 00:09:43,790
is the<font color="#E5E5E5"> Latin capital letter a and the</font>

266
00:09:41,450 --> 00:09:47,180
length<font color="#E5E5E5"> of the string is</font><font color="#CCCCCC"> 1 so let's try</font>

267
00:09:43,790 --> 00:09:49,040
some other<font color="#CCCCCC"> unicode characters here we're</font>

268
00:09:47,180 --> 00:09:51,229
<font color="#CCCCCC">using the mathematical</font><font color="#E5E5E5"> bold capital</font>

269
00:09:49,040 --> 00:09:52,819
letter<font color="#CCCCCC"> a which is a different symbol</font><font color="#E5E5E5"> so</font>

270
00:09:51,230 --> 00:09:54,590
it gets its own<font color="#E5E5E5"> code point and in this</font>

271
00:09:52,820 --> 00:09:57,230
case it happens to<font color="#CCCCCC"> be an ass-full code</font>

272
00:09:54,590 --> 00:10:00,110
point<font color="#E5E5E5"> and as a result the length of this</font>

273
00:09:57,230 --> 00:10:01,700
string<font color="#E5E5E5"> now is 2 instead of</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> even though</font>

274
00:10:00,110 --> 00:10:03,230
there is<font color="#E5E5E5"> only a single symbol there and</font>

275
00:10:01,700 --> 00:10:05,750
the reason<font color="#CCCCCC"> for that is because</font>

276
00:10:03,230 --> 00:10:07,790
<font color="#CCCCCC">javascript apparently exposes</font><font color="#E5E5E5"> each half</font>

277
00:10:05,750 --> 00:10:09,650
of<font color="#E5E5E5"> the surrogate pair as if it was a</font>

278
00:10:07,790 --> 00:10:12,500
<font color="#E5E5E5">separate character</font><font color="#CCCCCC"> even though</font><font color="#E5E5E5"> it's</font>

279
00:10:09,650 --> 00:10:14,209
really<font color="#E5E5E5"> not so to us as human beings</font><font color="#CCCCCC"> that</font>

280
00:10:12,500 --> 00:10:16,310
is<font color="#E5E5E5"> really confusing because we generally</font>

281
00:10:14,210 --> 00:10:20,210
<font color="#CCCCCC">think in terms of unicode symbols or</font>

282
00:10:16,310 --> 00:10:21,800
even visual graphemes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> JavaScript now</font>

283
00:10:20,210 --> 00:10:23,870
kind<font color="#E5E5E5"> of forces us</font><font color="#CCCCCC"> to deal with these</font>

284
00:10:21,800 --> 00:10:27,050
surrogate pairs which is<font color="#E5E5E5"> really an</font>

285
00:10:23,870 --> 00:10:28,520
encoding detail now similarly<font color="#CCCCCC"> if you try</font>

286
00:10:27,050 --> 00:10:30,079
the string with the pile of<font color="#E5E5E5"> poo in it</font>

287
00:10:28,520 --> 00:10:32,300
you<font color="#E5E5E5"> get its length the result is 2</font>

288
00:10:30,080 --> 00:10:33,980
instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> 1 and for the Americans out</font>

289
00:10:32,300 --> 00:10:35,750
there<font color="#E5E5E5"> there's a</font><font color="#CCCCCC"> very obvious joke to be</font>

290
00:10:33,980 --> 00:10:37,190
made<font color="#CCCCCC"> but</font><font color="#E5E5E5"> instead I'm going to show you a</font>

291
00:10:35,750 --> 00:10:40,430
real world<font color="#CCCCCC"> example of where</font><font color="#E5E5E5"> this</font>

292
00:10:37,190 --> 00:10:42,440
<font color="#CCCCCC">actually breaks an application so this</font>

293
00:10:40,430 --> 00:10:45,079
is Twitter<font color="#CCCCCC"> not</font><font color="#E5E5E5"> too long ago as you know</font>

294
00:10:42,440 --> 00:10:47,090
<font color="#E5E5E5">they allow 140 characters per tweet and</font>

295
00:10:45,080 --> 00:10:48,890
their<font color="#E5E5E5"> backends doesn't really care what</font>

296
00:10:47,090 --> 00:10:50,810
kind of<font color="#E5E5E5"> code points you use if it's an</font>

297
00:10:48,890 --> 00:10:53,090
<font color="#E5E5E5">astral code point or b.a.p code point it</font>

298
00:10:50,810 --> 00:10:55,339
<font color="#CCCCCC">just counts</font><font color="#E5E5E5"> as a single character which</font>

299
00:10:53,090 --> 00:10:57,680
<font color="#CCCCCC">is excellent</font><font color="#E5E5E5"> however their</font><font color="#CCCCCC"> JavaScript</font>

300
00:10:55,340 --> 00:10:59,180
<font color="#E5E5E5">counter on the website</font><font color="#CCCCCC"> just checked the</font>

301
00:10:57,680 --> 00:11:00,770
length of the string<font color="#E5E5E5"> so they didn't</font>

302
00:10:59,180 --> 00:11:02,750
account for<font color="#CCCCCC"> these surrogate pairs and</font>

303
00:11:00,770 --> 00:11:04,250
because of<font color="#CCCCCC"> that for every astral symbol</font>

304
00:11:02,750 --> 00:11:07,130
you entered<font color="#CCCCCC"> the counter</font><font color="#E5E5E5"> with decrease in</font>

305
00:11:04,250 --> 00:11:08,030
steps of 2 instead<font color="#CCCCCC"> of 1</font><font color="#E5E5E5"> so because of</font>

306
00:11:07,130 --> 00:11:10,730
this<font color="#CCCCCC"> bug</font><font color="#E5E5E5"> you could own</font>

307
00:11:08,030 --> 00:11:14,420
<font color="#CCCCCC">treat 70 piles of poo at a time it was</font>

308
00:11:10,730 --> 00:11:16,700
<font color="#E5E5E5">really devastating now another example</font>

309
00:11:14,420 --> 00:11:19,160
<font color="#CCCCCC">is the countable GS</font><font color="#E5E5E5"> open-source project</font>

310
00:11:16,700 --> 00:11:21,410
<font color="#E5E5E5">literally all it does is at live</font>

311
00:11:19,160 --> 00:11:23,949
paragraph word and character counting to

312
00:11:21,410 --> 00:11:27,140
your<font color="#CCCCCC"> webpages so it measures how many</font>

313
00:11:23,950 --> 00:11:28,460
<font color="#E5E5E5">texts you have input into an input field</font>

314
00:11:27,140 --> 00:11:31,189
and<font color="#E5E5E5"> then displays those numbers</font>

315
00:11:28,460 --> 00:11:32,840
<font color="#CCCCCC">elsewhere on the page so the first thing</font>

316
00:11:31,190 --> 00:11:34,460
I did<font color="#E5E5E5"> when I saw this demo page was of</font>

317
00:11:32,840 --> 00:11:36,950
course to<font color="#CCCCCC"> enter a pile of poo</font><font color="#E5E5E5"> and</font>

318
00:11:34,460 --> 00:11:39,860
unsurprisingly<font color="#E5E5E5"> it counted it as</font><font color="#CCCCCC"> two</font>

319
00:11:36,950 --> 00:11:41,510
individual characters<font color="#E5E5E5"> rather than one so</font>

320
00:11:39,860 --> 00:11:43,340
these are just<font color="#E5E5E5"> some</font><font color="#CCCCCC"> examples I'm not</font>

321
00:11:41,510 --> 00:11:45,650
hating<font color="#E5E5E5"> on Twitter or this open source</font>

322
00:11:43,340 --> 00:11:47,450
project<font color="#E5E5E5"> but I'm just pointing out that</font>

323
00:11:45,650 --> 00:11:49,819
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a really</font><font color="#CCCCCC"> obvious and</font><font color="#E5E5E5"> honest</font>

324
00:11:47,450 --> 00:11:51,440
mistake to make and a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> JavaScript</font>

325
00:11:49,820 --> 00:11:52,850
<font color="#E5E5E5">developers just don't know</font><font color="#CCCCCC"> about these</font>

326
00:11:51,440 --> 00:11:54,140
issues<font color="#E5E5E5"> the problem is not that they</font>

327
00:11:52,850 --> 00:11:55,760
don't<font color="#E5E5E5"> want to fix this because</font><font color="#CCCCCC"> they</font>

328
00:11:54,140 --> 00:11:57,920
fixed it<font color="#CCCCCC"> right away when I reported it</font>

329
00:11:55,760 --> 00:11:59,420
<font color="#CCCCCC">the problem is</font><font color="#E5E5E5"> that many</font><font color="#CCCCCC"> people just</font>

330
00:11:57,920 --> 00:12:02,060
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> about these problems because</font>

331
00:11:59,420 --> 00:12:03,740
<font color="#CCCCCC">they're so surprising</font><font color="#E5E5E5"> and in fact this</font>

332
00:12:02,060 --> 00:12:05,449
<font color="#E5E5E5">is</font><font color="#CCCCCC"> kind of what it felt</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> to enter</font>

333
00:12:03,740 --> 00:12:08,360
that pile of<font color="#CCCCCC"> poo</font><font color="#E5E5E5"> into that</font><font color="#CCCCCC"> forum because</font>

334
00:12:05,450 --> 00:12:11,510
<font color="#E5E5E5">I could always I can always knew</font><font color="#CCCCCC"> that</font>

335
00:12:08,360 --> 00:12:13,220
something would go wrong you know it was

336
00:12:11,510 --> 00:12:15,500
kind<font color="#CCCCCC"> of predictable so</font><font color="#E5E5E5"> getting back</font><font color="#CCCCCC"> to</font>

337
00:12:13,220 --> 00:12:16,850
our question<font color="#E5E5E5"> how can it be done how can</font>

338
00:12:15,500 --> 00:12:20,660
we<font color="#CCCCCC"> accurately count the number of</font>

339
00:12:16,850 --> 00:12:22,340
<font color="#CCCCCC">symbols</font><font color="#E5E5E5"> in a</font><font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> string well one</font>

340
00:12:20,660 --> 00:12:24,620
<font color="#CCCCCC">solution would be to</font><font color="#E5E5E5"> use a third-party</font>

341
00:12:22,340 --> 00:12:27,320
<font color="#CCCCCC">library that implements those formulas</font>

342
00:12:24,620 --> 00:12:29,450
<font color="#CCCCCC">that I showed you earlier and in</font><font color="#E5E5E5"> this</font>

343
00:12:27,320 --> 00:12:31,340
case we can use<font color="#CCCCCC"> P Unicode ucs</font><font color="#E5E5E5"> to decode</font>

344
00:12:29,450 --> 00:12:33,740
<font color="#E5E5E5">which translates</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> JavaScript</font>

345
00:12:31,340 --> 00:12:35,180
strings and<font color="#E5E5E5"> Unicode code points so if</font>

346
00:12:33,740 --> 00:12:37,070
you then get the<font color="#E5E5E5"> length of the resulting</font>

347
00:12:35,180 --> 00:12:40,160
array<font color="#E5E5E5"> of code points you will get more</font>

348
00:12:37,070 --> 00:12:41,990
accurate<font color="#CCCCCC"> results than before of course</font>

349
00:12:40,160 --> 00:12:43,490
this solution is far<font color="#E5E5E5"> from ideal because</font>

350
00:12:41,990 --> 00:12:44,960
now you've introduced the dependency

351
00:12:43,490 --> 00:12:46,550
just to be able<font color="#E5E5E5"> to count</font><font color="#CCCCCC"> a number of</font>

352
00:12:44,960 --> 00:12:48,590
code points in a string it really

353
00:12:46,550 --> 00:12:50,750
shouldn't<font color="#E5E5E5"> be that</font><font color="#CCCCCC"> hard</font><font color="#E5E5E5"> and for that</font>

354
00:12:48,590 --> 00:12:52,190
reason in ActionScript<font color="#E5E5E5"> 6 they added some</font>

355
00:12:50,750 --> 00:12:53,990
new features<font color="#CCCCCC"> that allow us</font><font color="#E5E5E5"> to do this</font>

356
00:12:52,190 --> 00:12:56,150
without<font color="#E5E5E5"> the use of any libraries at all</font>

357
00:12:53,990 --> 00:12:58,040
you can use array dot<font color="#E5E5E5"> from passing a</font>

358
00:12:56,150 --> 00:13:01,189
string<font color="#E5E5E5"> and that will give you the same</font>

359
00:12:58,040 --> 00:13:02,780
results or you could use the spread

360
00:13:01,190 --> 00:13:05,120
operator which is<font color="#CCCCCC"> also new in ACMA</font>

361
00:13:02,780 --> 00:13:09,140
script<font color="#CCCCCC"> six and it also has the</font><font color="#E5E5E5"> same</font>

362
00:13:05,120 --> 00:13:11,120
<font color="#CCCCCC">result</font><font color="#E5E5E5"> now I've also made a tool that</font>

363
00:13:09,140 --> 00:13:12,830
<font color="#E5E5E5">takes</font><font color="#CCCCCC"> string as</font><font color="#E5E5E5"> input and then it shows</font>

364
00:13:11,120 --> 00:13:14,840
<font color="#E5E5E5">the escape sequences for any special</font>

365
00:13:12,830 --> 00:13:17,240
characters<font color="#E5E5E5"> within that string so</font><font color="#CCCCCC"> it's a</font>

366
00:13:14,840 --> 00:13:18,500
bit similar<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> hex</font><font color="#CCCCCC"> stamp but in some</font>

367
00:13:17,240 --> 00:13:20,360
<font color="#E5E5E5">cases it's more useful</font><font color="#CCCCCC"> because the</font>

368
00:13:18,500 --> 00:13:21,500
output<font color="#CCCCCC"> is always</font><font color="#E5E5E5"> valid</font><font color="#CCCCCC"> JavaScript in</font>

369
00:13:20,360 --> 00:13:23,060
this case

370
00:13:21,500 --> 00:13:24,830
so with<font color="#E5E5E5"> this tool it's really easy to</font>

371
00:13:23,060 --> 00:13:26,839
tell<font color="#E5E5E5"> which symbols of string contains</font>

372
00:13:24,830 --> 00:13:29,300
exactly<font color="#E5E5E5"> even if the symbols are non</font>

373
00:13:26,840 --> 00:13:33,110
<font color="#E5E5E5">printable or whitespace or other things</font>

374
00:13:29,300 --> 00:13:35,300
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so now we know how to</font><font color="#CCCCCC"> count</font>

375
00:13:33,110 --> 00:13:37,310
core points properly in JavaScript<font color="#CCCCCC"> but</font>

376
00:13:35,300 --> 00:13:38,569
if you're<font color="#E5E5E5"> being really pedantic then</font>

377
00:13:37,310 --> 00:13:40,579
counting the number<font color="#E5E5E5"> of symbols in a</font>

378
00:13:38,570 --> 00:13:42,200
string is even more complicated<font color="#E5E5E5"> and of</font>

379
00:13:40,580 --> 00:13:45,200
<font color="#E5E5E5">course this really depends</font><font color="#CCCCCC"> on your use</font>

380
00:13:42,200 --> 00:13:46,760
<font color="#CCCCCC">case</font><font color="#E5E5E5"> but consider this scenario where</font>

381
00:13:45,200 --> 00:13:48,620
<font color="#CCCCCC">JavaScript seems to be</font><font color="#E5E5E5"> telling us that</font>

382
00:13:46,760 --> 00:13:51,470
these<font color="#CCCCCC"> two strings are different although</font>

383
00:13:48,620 --> 00:13:52,490
<font color="#CCCCCC">visually there is no real way to tell</font><font color="#E5E5E5"> so</font>

384
00:13:51,470 --> 00:13:54,260
what is<font color="#E5E5E5"> going on there</font>

385
00:13:52,490 --> 00:13:55,790
well I took<font color="#CCCCCC"> these</font><font color="#E5E5E5"> two strings and I</font>

386
00:13:54,260 --> 00:13:57,980
copied them<font color="#E5E5E5"> into the tool that I just</font>

387
00:13:55,790 --> 00:14:00,199
showed you<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> that I</font>

388
00:13:57,980 --> 00:14:02,720
got so the first string apparently

389
00:14:00,200 --> 00:14:05,750
contains the code point F 1 which is the

390
00:14:02,720 --> 00:14:07,670
uncharacteristic of it and the second

391
00:14:05,750 --> 00:14:09,470
string has a separate<font color="#E5E5E5"> and character</font>

392
00:14:07,670 --> 00:14:12,680
<font color="#E5E5E5">followed by the code point or</font><font color="#CCCCCC"> tree or</font>

393
00:14:09,470 --> 00:14:14,480
<font color="#E5E5E5">tree which</font><font color="#CCCCCC"> is a</font><font color="#E5E5E5"> combining</font><font color="#CCCCCC"> tilden unicode</font>

394
00:14:12,680 --> 00:14:15,920
<font color="#CCCCCC">has lots of these combining marks and</font>

395
00:14:14,480 --> 00:14:19,580
the way they work is they<font color="#E5E5E5"> just get</font>

396
00:14:15,920 --> 00:14:20,990
applied to the previous<font color="#E5E5E5"> symbol so if you</font>

397
00:14:19,580 --> 00:14:22,070
look at it this<font color="#E5E5E5"> way it's obvious to see</font>

398
00:14:20,990 --> 00:14:23,690
that<font color="#CCCCCC"> these strings</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> actually</font>

399
00:14:22,070 --> 00:14:25,850
different<font color="#CCCCCC"> because these different code</font>

400
00:14:23,690 --> 00:14:28,550
points internally but visually they<font color="#CCCCCC"> look</font>

401
00:14:25,850 --> 00:14:30,200
the same<font color="#E5E5E5"> and if we are counting the</font>

402
00:14:28,550 --> 00:14:31,400
number<font color="#CCCCCC"> of symbols in a string we don't</font>

403
00:14:30,200 --> 00:14:33,050
really care<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the underlying</font>

404
00:14:31,400 --> 00:14:35,180
encoding or code points that are<font color="#E5E5E5"> being</font>

405
00:14:33,050 --> 00:14:37,160
used we just expect the result of<font color="#E5E5E5"> 6 for</font>

406
00:14:35,180 --> 00:14:39,469
both these strings<font color="#CCCCCC"> so how can</font><font color="#E5E5E5"> we make</font>

407
00:14:37,160 --> 00:14:41,480
that<font color="#CCCCCC"> happen well the answer is</font><font color="#E5E5E5"> to use</font>

408
00:14:39,470 --> 00:14:43,100
<font color="#CCCCCC">Unicode normalization</font><font color="#E5E5E5"> and this is</font>

409
00:14:41,480 --> 00:14:45,230
<font color="#E5E5E5">another new feature in ActionScript 6</font>

410
00:14:43,100 --> 00:14:47,570
you can just call normalize on any

411
00:14:45,230 --> 00:14:49,340
string<font color="#E5E5E5"> passing the normalization form in</font>

412
00:14:47,570 --> 00:14:51,080
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case we're using NFC</font><font color="#E5E5E5"> which takes</font>

413
00:14:49,340 --> 00:14:52,100
care<font color="#E5E5E5"> of these look-alike symbols for us</font>

414
00:14:51,080 --> 00:14:53,480
of<font color="#E5E5E5"> course</font>

415
00:14:52,100 --> 00:14:55,370
afterwards we'll still have to take<font color="#E5E5E5"> care</font>

416
00:14:53,480 --> 00:14:57,320
<font color="#E5E5E5">of these astral symbols and surrogate</font>

417
00:14:55,370 --> 00:14:59,090
pairs like we did before<font color="#E5E5E5"> and this gives</font>

418
00:14:57,320 --> 00:15:01,850
us<font color="#E5E5E5"> an even more</font><font color="#CCCCCC"> accurate result</font><font color="#E5E5E5"> than</font>

419
00:14:59,090 --> 00:15:02,390
before<font color="#E5E5E5"> so is this solution absolutely</font>

420
00:15:01,850 --> 00:15:04,310
perfect

421
00:15:02,390 --> 00:15:06,770
well again<font color="#E5E5E5"> this really depends</font><font color="#CCCCCC"> on your</font>

422
00:15:04,310 --> 00:15:08,959
use case<font color="#CCCCCC"> if you have to support crazy</font>

423
00:15:06,770 --> 00:15:10,280
stuff like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> basically lots of</font>

424
00:15:08,960 --> 00:15:12,050
combining<font color="#E5E5E5"> marks are being applied</font>

425
00:15:10,280 --> 00:15:13,720
<font color="#CCCCCC">through the same symbol</font><font color="#E5E5E5"> over and over</font>

426
00:15:12,050 --> 00:15:15,859
again<font color="#E5E5E5"> that's why it looks so</font><font color="#CCCCCC"> weird</font>

427
00:15:13,720 --> 00:15:18,980
<font color="#CCCCCC">you'll have to do a</font><font color="#E5E5E5"> little bit of more</font>

428
00:15:15,860 --> 00:15:20,480
work<font color="#E5E5E5"> so in this case I count</font><font color="#CCCCCC"> 9 visual</font>

429
00:15:18,980 --> 00:15:22,820
symbols including<font color="#E5E5E5"> the space in the</font>

430
00:15:20,480 --> 00:15:25,550
<font color="#E5E5E5">middle there</font><font color="#CCCCCC"> but even our most pedantic</font>

431
00:15:22,820 --> 00:15:26,780
function<font color="#CCCCCC"> would count 116 symbols and</font>

432
00:15:25,550 --> 00:15:28,579
it's easy<font color="#E5E5E5"> to see why because there's a</font>

433
00:15:26,780 --> 00:15:30,170
lot<font color="#E5E5E5"> of code points in there if you need</font>

434
00:15:28,580 --> 00:15:31,940
<font color="#CCCCCC">to support this</font><font color="#E5E5E5"> you would have</font><font color="#CCCCCC"> to use a</font>

435
00:15:30,170 --> 00:15:33,800
<font color="#CCCCCC">regular expression that strips away all</font>

436
00:15:31,940 --> 00:15:34,830
<font color="#E5E5E5">these special</font><font color="#CCCCCC"> characters</font><font color="#E5E5E5"> before you</font>

437
00:15:33,800 --> 00:15:37,859
count<font color="#E5E5E5"> the</font><font color="#CCCCCC"> rest of</font>

438
00:15:34,830 --> 00:15:39,450
remaining<font color="#CCCCCC"> characters now one more</font>

439
00:15:37,860 --> 00:15:41,430
<font color="#E5E5E5">example</font><font color="#CCCCCC"> too just to make you</font><font color="#E5E5E5"> think about</font>

440
00:15:39,450 --> 00:15:43,440
<font color="#E5E5E5">all these underlying</font><font color="#CCCCCC"> Unicode issues is</font>

441
00:15:41,430 --> 00:15:45,689
reversing a string it sounds pretty

442
00:15:43,440 --> 00:15:47,490
simple<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and in fact the</font><font color="#E5E5E5"> common</font>

443
00:15:45,690 --> 00:15:49,140
solution to<font color="#CCCCCC"> the problem</font><font color="#E5E5E5"> is you</font><font color="#CCCCCC"> just take</font>

444
00:15:47,490 --> 00:15:51,510
the strings<font color="#E5E5E5"> split it up into</font><font color="#CCCCCC"> an array of</font>

445
00:15:49,140 --> 00:15:54,180
<font color="#E5E5E5">characters reverse the array and then</font>

446
00:15:51,510 --> 00:15:56,370
glue it<font color="#CCCCCC"> back together</font><font color="#E5E5E5"> into a string and</font>

447
00:15:54,180 --> 00:15:59,880
that seems<font color="#E5E5E5"> to work fine if you reverse</font>

448
00:15:56,370 --> 00:16:02,130
<font color="#E5E5E5">ABC you get CBA</font><font color="#CCCCCC"> if you reverse</font><font color="#E5E5E5"> manana</font>

449
00:15:59,880 --> 00:16:04,709
<font color="#CCCCCC">where the end with the</font><font color="#E5E5E5"> tilde is a single</font>

450
00:16:02,130 --> 00:16:06,480
character<font color="#CCCCCC"> it still works fine however if</font>

451
00:16:04,709 --> 00:16:08,518
you reverse<font color="#CCCCCC"> the order manana</font><font color="#E5E5E5"> where</font><font color="#CCCCCC"> m and</font>

452
00:16:06,480 --> 00:16:10,649
<font color="#CCCCCC">the tilde are two individual code points</font>

453
00:16:08,519 --> 00:16:12,510
now<font color="#E5E5E5"> suddenly the tilde gets applied to</font>

454
00:16:10,649 --> 00:16:14,750
<font color="#CCCCCC">the</font><font color="#E5E5E5"> a character instead of to the</font><font color="#CCCCCC"> N</font>

455
00:16:12,510 --> 00:16:17,370
which<font color="#CCCCCC"> is not what you would expect and</font>

456
00:16:14,750 --> 00:16:20,910
finally if you try to reverse an astral

457
00:16:17,370 --> 00:16:22,260
symbol like the pile<font color="#CCCCCC"> of poo now we know</font>

458
00:16:20,910 --> 00:16:23,910
<font color="#CCCCCC">that this consists of two surrogate</font>

459
00:16:22,260 --> 00:16:25,410
<font color="#CCCCCC">house in</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> rights so you still</font>

460
00:16:23,910 --> 00:16:27,630
have the surrogate pair but now it's in

461
00:16:25,410 --> 00:16:29,310
the<font color="#E5E5E5"> wrong order</font><font color="#CCCCCC"> so the reverse</font><font color="#E5E5E5"> string</font>

462
00:16:27,630 --> 00:16:32,310
won't even contain the<font color="#CCCCCC"> original</font><font color="#E5E5E5"> symbol</font>

463
00:16:29,310 --> 00:16:33,959
<font color="#E5E5E5">anymore this is a form of data loss in</font>

464
00:16:32,310 --> 00:16:35,880
other words<font color="#E5E5E5"> even something as seemingly</font>

465
00:16:33,959 --> 00:16:37,649
simple<font color="#E5E5E5"> as just reversing a string</font>

466
00:16:35,880 --> 00:16:39,360
becomes really<font color="#E5E5E5"> tricky if you need food</font>

467
00:16:37,649 --> 00:16:42,270
Java with<font color="#E5E5E5"> food Unicode support in</font>

468
00:16:39,360 --> 00:16:44,160
<font color="#E5E5E5">JavaScript luckily for us a brilliant</font>

469
00:16:42,270 --> 00:16:45,660
<font color="#E5E5E5">computer scientist by the name of Missy</font>

470
00:16:44,160 --> 00:16:47,430
<font color="#E5E5E5">Elliott's came up with a bulletproof</font>

471
00:16:45,660 --> 00:16:49,649
algorithm<font color="#E5E5E5"> that accounts for these issues</font>

472
00:16:47,430 --> 00:16:52,349
<font color="#E5E5E5">and the algorithm</font><font color="#CCCCCC"> goes</font><font color="#E5E5E5"> I put my thing</font>

473
00:16:49,649 --> 00:16:53,700
down flip it<font color="#CCCCCC"> and reverse it and indeed</font>

474
00:16:52,350 --> 00:16:55,290
if you<font color="#E5E5E5"> swept the position of any</font>

475
00:16:53,700 --> 00:16:57,060
combining marks with<font color="#CCCCCC"> the symbol they</font>

476
00:16:55,290 --> 00:16:58,500
<font color="#E5E5E5">belong to as well as reversing any</font>

477
00:16:57,060 --> 00:17:00,180
surrogate pairs<font color="#CCCCCC"> before further</font>

478
00:16:58,500 --> 00:17:02,640
processing<font color="#CCCCCC"> the string all these issues</font>

479
00:17:00,180 --> 00:17:05,250
are avoided successfully so<font color="#E5E5E5"> thank you</font>

480
00:17:02,640 --> 00:17:06,900
Missy and there's actually<font color="#CCCCCC"> an an</font>

481
00:17:05,250 --> 00:17:08,790
implementation<font color="#E5E5E5"> of this algorithm in the</font>

482
00:17:06,900 --> 00:17:10,290
name of<font color="#E5E5E5"> s River</font><font color="#CCCCCC"> so if you ever do need</font>

483
00:17:08,790 --> 00:17:12,540
<font color="#CCCCCC">to</font><font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> string in JavaScript</font>

484
00:17:10,290 --> 00:17:15,869
feel<font color="#E5E5E5"> free to use this library it handles</font>

485
00:17:12,540 --> 00:17:18,030
these cases perfectly one more example

486
00:17:15,869 --> 00:17:19,739
is let's say you want to<font color="#CCCCCC"> iterate over a</font>

487
00:17:18,030 --> 00:17:22,349
string<font color="#E5E5E5"> and do something with each</font>

488
00:17:19,740 --> 00:17:24,000
individual code point<font color="#E5E5E5"> in the string in</font>

489
00:17:22,349 --> 00:17:25,859
<font color="#CCCCCC">equus</font><font color="#E5E5E5"> script</font><font color="#CCCCCC"> five you would</font><font color="#E5E5E5"> have to</font>

490
00:17:24,000 --> 00:17:27,660
<font color="#E5E5E5">write a lot of boilerplate code just</font>

491
00:17:25,859 --> 00:17:29,668
because of those surrogate halves<font color="#CCCCCC"> you</font>

492
00:17:27,660 --> 00:17:31,559
<font color="#CCCCCC">will need to combine the surrogates</font><font color="#E5E5E5"> and</font>

493
00:17:29,669 --> 00:17:33,450
treat them as one<font color="#E5E5E5"> single</font><font color="#CCCCCC"> units</font><font color="#E5E5E5"> and</font>

494
00:17:31,559 --> 00:17:36,629
there's a lot<font color="#E5E5E5"> of code</font><font color="#CCCCCC"> that you need to</font>

495
00:17:33,450 --> 00:17:38,190
write<font color="#CCCCCC"> for that luckily in echo script</font><font color="#E5E5E5"> 6</font>

496
00:17:36,630 --> 00:17:40,080
it became a lot<font color="#CCCCCC"> easier because</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> you</font>

497
00:17:38,190 --> 00:17:41,550
can use for off loops<font color="#E5E5E5"> which</font>

498
00:17:40,080 --> 00:17:44,520
automatically deal with whole code

499
00:17:41,550 --> 00:17:46,530
points for you but this<font color="#E5E5E5"> is yet another</font>

500
00:17:44,520 --> 00:17:47,430
example<font color="#CCCCCC"> that shows how complicated the</font>

501
00:17:46,530 --> 00:17:51,389
underlying

502
00:17:47,430 --> 00:17:53,760
javascript<font color="#CCCCCC"> Unicode support</font><font color="#E5E5E5"> is these were</font>

503
00:17:51,390 --> 00:17:56,430
<font color="#E5E5E5">just</font><font color="#CCCCCC"> some examples</font><font color="#E5E5E5"> literally everything</font>

504
00:17:53,760 --> 00:17:59,400
involving strings before<font color="#CCCCCC"> ACMA</font><font color="#E5E5E5"> script</font><font color="#CCCCCC"> six</font>

505
00:17:56,430 --> 00:18:01,470
is affected by this kind<font color="#E5E5E5"> of behavior</font><font color="#CCCCCC"> so</font>

506
00:17:59,400 --> 00:18:04,350
things like from character<font color="#E5E5E5"> code</font>

507
00:18:01,470 --> 00:18:06,030
<font color="#E5E5E5">character at substring slice anything</font>

508
00:18:04,350 --> 00:18:07,770
that involves strings is affected by

509
00:18:06,030 --> 00:18:09,540
this<font color="#CCCCCC"> oh and there's</font><font color="#E5E5E5"> also this thing</font>

510
00:18:07,770 --> 00:18:11,550
<font color="#CCCCCC">called regular expressions I have an</font>

511
00:18:09,540 --> 00:18:13,590
actually an entire separate presentation

512
00:18:11,550 --> 00:18:15,870
just<font color="#E5E5E5"> on regular</font><font color="#CCCCCC"> expressions</font><font color="#E5E5E5"> and Unicode</font>

513
00:18:13,590 --> 00:18:17,669
in JavaScript<font color="#CCCCCC"> so check that</font><font color="#E5E5E5"> out if</font>

514
00:18:15,870 --> 00:18:19,649
<font color="#E5E5E5">you're interested</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> think we can all</font>

515
00:18:17,670 --> 00:18:21,360
agree that<font color="#CCCCCC"> javascript has a</font><font color="#E5E5E5"> Unicode</font>

516
00:18:19,650 --> 00:18:23,340
problem<font color="#E5E5E5"> these are just some of the</font>

517
00:18:21,360 --> 00:18:24,899
<font color="#E5E5E5">problems</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> JavaScript developers are</font>

518
00:18:23,340 --> 00:18:26,610
facing and from my<font color="#CCCCCC"> experience most</font>

519
00:18:24,900 --> 00:18:28,650
<font color="#E5E5E5">developers just don't know about these</font>

520
00:18:26,610 --> 00:18:30,770
issues<font color="#E5E5E5"> at all and that</font><font color="#CCCCCC"> of course is an</font>

521
00:18:28,650 --> 00:18:33,870
opportunity for penetration testers<font color="#CCCCCC"> so</font>

522
00:18:30,770 --> 00:18:35,760
<font color="#CCCCCC">the main takeaway here is</font><font color="#E5E5E5"> the pile of</font>

523
00:18:33,870 --> 00:18:37,649
<font color="#CCCCCC">poo tests whenever your pen testing a</font>

524
00:18:35,760 --> 00:18:39,810
<font color="#CCCCCC">JavaScript application</font><font color="#E5E5E5"> be sure</font><font color="#CCCCCC"> to enter</font>

525
00:18:37,650 --> 00:18:41,730
a pile of<font color="#E5E5E5"> poo or any other astral symbol</font>

526
00:18:39,810 --> 00:18:43,860
in many cases there will be a bug of

527
00:18:41,730 --> 00:18:45,630
some<font color="#E5E5E5"> sort and in some cases you know the</font>

528
00:18:43,860 --> 00:18:47,909
bug might lead to a<font color="#E5E5E5"> security sensitive</font>

529
00:18:45,630 --> 00:18:51,720
vulnerability in other words the pile of

530
00:18:47,910 --> 00:18:54,030
<font color="#E5E5E5">poo is the new null character now before</font>

531
00:18:51,720 --> 00:18:56,750
<font color="#E5E5E5">we move on to the actual exploits let's</font>

532
00:18:54,030 --> 00:18:58,830
talk about some of<font color="#CCCCCC"> my</font><font color="#E5E5E5"> sequels problems</font>

533
00:18:56,750 --> 00:19:01,200
so let's say you want to<font color="#E5E5E5"> create a my</font>

534
00:18:58,830 --> 00:19:02,820
sequel database to<font color="#CCCCCC"> store some</font><font color="#E5E5E5"> text so</font>

535
00:19:01,200 --> 00:19:04,470
you know utf-8 is the preferred

536
00:19:02,820 --> 00:19:07,050
character encoding because<font color="#E5E5E5"> I just told</font>

537
00:19:04,470 --> 00:19:08,970
you<font color="#CCCCCC"> so you read some online tutorials</font>

538
00:19:07,050 --> 00:19:12,560
<font color="#E5E5E5">and you create a new table and you set</font>

539
00:19:08,970 --> 00:19:15,270
the default<font color="#CCCCCC"> character set to utf-8</font><font color="#E5E5E5"> okay</font>

540
00:19:12,560 --> 00:19:16,919
<font color="#E5E5E5">everything seems</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> work fine until you</font>

541
00:19:15,270 --> 00:19:20,280
try to insert a string<font color="#CCCCCC"> that contains</font><font color="#E5E5E5"> an</font>

542
00:19:16,920 --> 00:19:22,320
astral symbol<font color="#E5E5E5"> so the query doesn't fail</font>

543
00:19:20,280 --> 00:19:24,450
you<font color="#E5E5E5"> don't get an error it will just show</font>

544
00:19:22,320 --> 00:19:26,639
a<font color="#E5E5E5"> warning but this means that most</font>

545
00:19:24,450 --> 00:19:28,560
<font color="#E5E5E5">pieces of software on the web</font><font color="#CCCCCC"> won't</font>

546
00:19:26,640 --> 00:19:30,270
really detect this<font color="#E5E5E5"> because they're only</font>

547
00:19:28,560 --> 00:19:31,470
<font color="#E5E5E5">they have some error handling in place</font>

548
00:19:30,270 --> 00:19:34,530
but<font color="#E5E5E5"> they don't really do</font><font color="#CCCCCC"> anything with</font>

549
00:19:31,470 --> 00:19:37,170
warnings now the warning<font color="#E5E5E5"> contains the</font>

550
00:19:34,530 --> 00:19:39,690
utf-8 encoded byte sequence<font color="#E5E5E5"> for the pile</font>

551
00:19:37,170 --> 00:19:41,700
of<font color="#E5E5E5"> poo character and it shows that the</font>

552
00:19:39,690 --> 00:19:44,670
string value<font color="#E5E5E5"> is somehow incorrect</font>

553
00:19:41,700 --> 00:19:46,020
so<font color="#E5E5E5"> my</font><font color="#CCCCCC"> sequels default behavior in</font><font color="#E5E5E5"> this</font>

554
00:19:44,670 --> 00:19:48,180
case is a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> weird because</font>

555
00:19:46,020 --> 00:19:49,860
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of throwing</font><font color="#E5E5E5"> an error it still</font>

556
00:19:48,180 --> 00:19:52,200
tries to insert the string<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font>

557
00:19:49,860 --> 00:19:53,909
database and<font color="#E5E5E5"> it just stops at the very</font>

558
00:19:52,200 --> 00:19:55,970
<font color="#E5E5E5">first symbol</font><font color="#CCCCCC"> that it cannot</font><font color="#E5E5E5"> handle in</font>

559
00:19:53,910 --> 00:19:59,040
this case the very first astral symbol

560
00:19:55,970 --> 00:20:00,810
so effectively<font color="#E5E5E5"> the string is</font><font color="#CCCCCC"> frankly</font>

561
00:19:59,040 --> 00:20:02,820
at the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> astral symbol that we use</font>

562
00:20:00,810 --> 00:20:04,740
this<font color="#E5E5E5"> is a form</font><font color="#CCCCCC"> of data loss which is</font>

563
00:20:02,820 --> 00:20:09,179
terrible in its own right<font color="#E5E5E5"> but it</font><font color="#CCCCCC"> gets</font>

564
00:20:04,740 --> 00:20:12,270
much worse<font color="#E5E5E5"> so it turns out that</font><font color="#CCCCCC"> - equals</font>

565
00:20:09,180 --> 00:20:14,640
<font color="#E5E5E5">utf-8 character set only partially</font>

566
00:20:12,270 --> 00:20:16,770
implements proper utf-8<font color="#E5E5E5"> encoding it can</font>

567
00:20:14,640 --> 00:20:19,500
<font color="#E5E5E5">only store utf-8 encoded symbols that</font>

568
00:20:16,770 --> 00:20:22,170
take up<font color="#E5E5E5"> one to three bytes but not the</font>

569
00:20:19,500 --> 00:20:27,390
<font color="#E5E5E5">four bytes</font><font color="#CCCCCC"> utf-8 encoded characters like</font>

570
00:20:22,170 --> 00:20:29,790
all the astral symbols so if you need<font color="#E5E5E5"> to</font>

571
00:20:27,390 --> 00:20:32,280
use astral symbols in my sequel you will

572
00:20:29,790 --> 00:20:35,280
have to use<font color="#E5E5E5"> utf-8 and</font><font color="#CCCCCC"> B for instead and</font>

573
00:20:32,280 --> 00:20:39,330
this is<font color="#E5E5E5"> actual utf-8 unlike what you</font>

574
00:20:35,280 --> 00:20:41,220
<font color="#E5E5E5">might see</font><font color="#CCCCCC"> will call suti of eight</font><font color="#E5E5E5"> so if</font>

575
00:20:39,330 --> 00:20:43,350
you insert an astral symbol or any other

576
00:20:41,220 --> 00:20:45,210
unicode symbol into such<font color="#E5E5E5"> a database</font><font color="#CCCCCC"> it</font>

577
00:20:43,350 --> 00:20:48,209
will<font color="#CCCCCC"> work fine exactly the way you would</font>

578
00:20:45,210 --> 00:20:51,470
<font color="#CCCCCC">expect it to so always use utf-8 and</font>

579
00:20:48,210 --> 00:20:54,900
before instead of utf-8 in my sequel

580
00:20:51,470 --> 00:20:57,090
<font color="#E5E5E5">okay now we talked about unicode</font>

581
00:20:54,900 --> 00:20:59,340
character encodings we saw some common

582
00:20:57,090 --> 00:21:01,320
problems<font color="#CCCCCC"> in javascript and</font><font color="#E5E5E5"> my sequel so</font>

583
00:20:59,340 --> 00:21:03,720
let's see<font color="#E5E5E5"> some examples</font><font color="#CCCCCC"> of where</font><font color="#E5E5E5"> people</font>

584
00:21:01,320 --> 00:21:07,230
actually use this knowledge to<font color="#E5E5E5"> actually</font>

585
00:21:03,720 --> 00:21:08,880
exploit bugs so remember when we talked

586
00:21:07,230 --> 00:21:11,280
<font color="#E5E5E5">about encoding before and I showed</font><font color="#CCCCCC"> you</font>

587
00:21:08,880 --> 00:21:14,040
that<font color="#E5E5E5"> table with bytes for each encoding</font>

588
00:21:11,280 --> 00:21:15,570
well I told you to<font color="#E5E5E5"> use utf-8 whenever</font>

589
00:21:14,040 --> 00:21:17,100
you have the choice because it can

590
00:21:15,570 --> 00:21:19,169
encode every possible Unicode code

591
00:21:17,100 --> 00:21:21,389
points<font color="#E5E5E5"> it's backwards compatible with</font>

592
00:21:19,170 --> 00:21:24,240
<font color="#E5E5E5">ASCII and its optimized and compact</font>

593
00:21:21,390 --> 00:21:26,610
<font color="#CCCCCC">making it</font><font color="#E5E5E5"> very useful for</font><font color="#CCCCCC"> storage well</font>

594
00:21:24,240 --> 00:21:28,740
those<font color="#E5E5E5"> who are not the</font><font color="#CCCCCC"> only reasons well</font>

595
00:21:26,610 --> 00:21:30,479
various<font color="#E5E5E5"> other encodings</font><font color="#CCCCCC"> turn out to have</font>

596
00:21:28,740 --> 00:21:33,960
<font color="#E5E5E5">security</font><font color="#CCCCCC"> issues when they're used</font><font color="#E5E5E5"> with</font>

597
00:21:30,480 --> 00:21:35,880
user supplied content utf-16 for example

598
00:21:33,960 --> 00:21:36,870
<font color="#E5E5E5">so this is a proof of concept made by</font>

599
00:21:35,880 --> 00:21:38,670
Henry<font color="#CCCCCC"> zvolen</font>

600
00:21:36,870 --> 00:21:40,770
who works for Mozilla<font color="#E5E5E5"> so let's imagine</font>

601
00:21:38,670 --> 00:21:42,690
that<font color="#E5E5E5"> this is user supplied content there</font>

602
00:21:40,770 --> 00:21:45,420
is<font color="#E5E5E5"> some text on there and there is some</font>

603
00:21:42,690 --> 00:21:47,310
garbled<font color="#CCCCCC"> encoding mismatched kind of text</font>

604
00:21:45,420 --> 00:21:49,260
and some social<font color="#E5E5E5"> engineering is used to</font>

605
00:21:47,310 --> 00:21:51,120
trick the user into changing the

606
00:21:49,260 --> 00:21:53,190
encoding for the page and as soon as<font color="#E5E5E5"> the</font>

607
00:21:51,120 --> 00:21:55,800
victim does that boom<font color="#CCCCCC"> a cross-site</font>

608
00:21:53,190 --> 00:21:58,350
scripting factor applies so<font color="#E5E5E5"> what</font>

609
00:21:55,800 --> 00:22:00,389
happened there how did<font color="#CCCCCC"> this happen well</font>

610
00:21:58,350 --> 00:22:03,090
let's take<font color="#CCCCCC"> a look at the relevant part</font>

611
00:22:00,390 --> 00:22:05,880
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hex tone</font><font color="#E5E5E5"> it's right here so the</font>

612
00:22:03,090 --> 00:22:09,090
encoding table<font color="#E5E5E5"> set utf-16 uses two bytes</font>

613
00:22:05,880 --> 00:22:10,890
for each BMP code<font color="#E5E5E5"> points so this means</font>

614
00:22:09,090 --> 00:22:12,658
that<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the first code point that</font>

615
00:22:10,890 --> 00:22:15,629
is relevant<font color="#E5E5E5"> to our cross-site scripting</font>

616
00:22:12,659 --> 00:22:18,899
<font color="#CCCCCC">Tagg their code point will be priests</font>

617
00:22:15,629 --> 00:22:21,119
<font color="#CCCCCC">e73</font><font color="#E5E5E5"> but as you can</font><font color="#CCCCCC"> see on the</font><font color="#E5E5E5"> right hand</font>

618
00:22:18,899 --> 00:22:23,189
<font color="#E5E5E5">side if you were to decode this as ascii</font>

619
00:22:21,119 --> 00:22:25,678
<font color="#E5E5E5">and consider each individual byte as an</font>

620
00:22:23,190 --> 00:22:29,549
individual character<font color="#CCCCCC"> you</font><font color="#E5E5E5"> actually get</font>

621
00:22:25,679 --> 00:22:30,989
the<font color="#CCCCCC"> start brackets and the</font><font color="#E5E5E5"> lowercase s</font>

622
00:22:29,549 --> 00:22:35,908
<font color="#E5E5E5">character which is the start of a</font>

623
00:22:30,989 --> 00:22:38,940
element now<font color="#CCCCCC"> the next code point is this</font>

624
00:22:35,909 --> 00:22:41,700
one but<font color="#CCCCCC"> again in ascii or in utf-8 which</font>

625
00:22:38,940 --> 00:22:43,649
is<font color="#CCCCCC"> backwards compatible with ascii</font><font color="#E5E5E5"> it is</font>

626
00:22:41,700 --> 00:22:45,720
actually two characters<font color="#CCCCCC"> the C and the</font><font color="#E5E5E5"> r</font>

627
00:22:43,649 --> 00:22:48,090
and it just goes on like<font color="#CCCCCC"> that for</font>

628
00:22:45,720 --> 00:22:50,489
another while until the whole cross side

629
00:22:48,090 --> 00:22:52,738
scripting payload is completed so this

630
00:22:50,489 --> 00:22:55,109
is why if you're treating<font color="#E5E5E5"> this document</font>

631
00:22:52,739 --> 00:22:58,200
as utf-16<font color="#E5E5E5"> you will get some garbled</font>

632
00:22:55,109 --> 00:23:00,779
<font color="#CCCCCC">Chinese looking text but if you view it</font>

633
00:22:58,200 --> 00:23:02,789
<font color="#CCCCCC">as a ski or utf-8 document</font><font color="#E5E5E5"> then it</font>

634
00:23:00,779 --> 00:23:04,529
becomes a completely document<font color="#E5E5E5"> completely</font>

635
00:23:02,789 --> 00:23:06,090
<font color="#E5E5E5">different document all of a sudden and</font>

636
00:23:04,529 --> 00:23:08,729
it suddenly contains a cross-site

637
00:23:06,090 --> 00:23:10,849
scripting payload<font color="#E5E5E5"> okay so this might</font>

638
00:23:08,729 --> 00:23:12,570
seem like<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit of a far-fetched</font>

639
00:23:10,849 --> 00:23:14,789
<font color="#E5E5E5">vulnerability because it relies on</font>

640
00:23:12,570 --> 00:23:17,309
social engineering<font color="#E5E5E5"> you need to trick the</font>

641
00:23:14,789 --> 00:23:18,989
user<font color="#E5E5E5"> to change some browser settings so</font>

642
00:23:17,309 --> 00:23:22,109
let's<font color="#CCCCCC"> see what some other people did</font>

643
00:23:18,989 --> 00:23:22,769
with<font color="#E5E5E5"> this Masato Kanagawa did something</font>

644
00:23:22,109 --> 00:23:25,259
very similar

645
00:23:22,769 --> 00:23:28,019
he found an endpoint<font color="#E5E5E5"> on accounts of</font>

646
00:23:25,259 --> 00:23:30,720
<font color="#CCCCCC">Google com where he could override the</font>

647
00:23:28,019 --> 00:23:33,149
output<font color="#CCCCCC"> encoding so he set it</font><font color="#E5E5E5"> to utf-32</font>

648
00:23:30,720 --> 00:23:34,889
<font color="#E5E5E5">which is not supported</font><font color="#CCCCCC"> in all browsers</font>

649
00:23:33,149 --> 00:23:35,998
it doesn't work in<font color="#E5E5E5"> Firefox it doesn't</font>

650
00:23:34,889 --> 00:23:38,488
work in Internet Explorer

651
00:23:35,999 --> 00:23:40,859
<font color="#E5E5E5">so if browsers get a page in an encoding</font>

652
00:23:38,489 --> 00:23:42,359
they do not understand they will still

653
00:23:40,859 --> 00:23:44,220
try<font color="#E5E5E5"> to make sense of it so they will</font>

654
00:23:42,359 --> 00:23:45,809
decode<font color="#E5E5E5"> that page using one of the</font>

655
00:23:44,220 --> 00:23:49,109
encoding<font color="#CCCCCC"> that they do understand like</font>

656
00:23:45,809 --> 00:23:50,729
utf-8 for example and this trick enabled

657
00:23:49,109 --> 00:23:52,769
a cross-site scripting vulnerability on

658
00:23:50,729 --> 00:23:54,720
this page in Internet Explorer<font color="#E5E5E5"> and</font>

659
00:23:52,769 --> 00:23:59,429
here's what the cross-site scripting

660
00:23:54,720 --> 00:24:01,200
factor<font color="#E5E5E5"> looked like yeah</font><font color="#CCCCCC"> that looks kind</font>

661
00:23:59,429 --> 00:24:04,080
<font color="#E5E5E5">of weird right what is going on there</font>

662
00:24:01,200 --> 00:24:07,769
<font color="#E5E5E5">that's kind of crazy</font><font color="#CCCCCC"> okay so let's</font><font color="#E5E5E5"> look</font>

663
00:24:04,080 --> 00:24:09,359
at the hex dump now utf-32<font color="#E5E5E5"> was the fixed</font>

664
00:24:07,769 --> 00:24:12,269
<font color="#E5E5E5">width encoding that we talked about it</font>

665
00:24:09,359 --> 00:24:14,489
it<font color="#E5E5E5"> takes four bytes to encode a single</font>

666
00:24:12,269 --> 00:24:18,299
<font color="#CCCCCC">code point</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is the first code</font>

667
00:24:14,489 --> 00:24:21,239
point here these four bytes<font color="#E5E5E5"> and yeah</font><font color="#CCCCCC"> so</font>

668
00:24:18,299 --> 00:24:23,339
it's the for all symbol<font color="#E5E5E5"> so</font><font color="#CCCCCC"> unicode code</font>

669
00:24:21,239 --> 00:24:25,409
points but if you look at the<font color="#CCCCCC"> ascii</font>

670
00:24:23,339 --> 00:24:26,159
representation on the<font color="#E5E5E5"> right or the utf-8</font>

671
00:24:25,409 --> 00:24:28,560
representation

672
00:24:26,160 --> 00:24:32,040
you get<font color="#E5E5E5"> three no bites and a double</font>

673
00:24:28,560 --> 00:24:34,530
quote<font color="#CCCCCC"> and the second code point</font><font color="#E5E5E5"> is this</font>

674
00:24:32,040 --> 00:24:36,899
one again<font color="#CCCCCC"> nothing really</font><font color="#E5E5E5"> special it just</font>

675
00:24:34,530 --> 00:24:38,610
<font color="#E5E5E5">looks a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit weird</font><font color="#CCCCCC"> but if you look</font>

676
00:24:36,900 --> 00:24:42,570
at the utf-8 representation<font color="#E5E5E5"> it's</font>

677
00:24:38,610 --> 00:24:43,889
actually a closing bracket<font color="#E5E5E5"> so you see</font>

678
00:24:42,570 --> 00:24:46,139
where this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going right</font><font color="#CCCCCC"> I mean</font>

679
00:24:43,890 --> 00:24:47,610
depending<font color="#E5E5E5"> on how you decode this</font>

680
00:24:46,140 --> 00:24:50,880
document you<font color="#E5E5E5"> get a completely</font><font color="#CCCCCC"> different</font>

681
00:24:47,610 --> 00:24:52,860
payload<font color="#E5E5E5"> the only problem is that it's</font>

682
00:24:50,880 --> 00:24:54,870
<font color="#E5E5E5">not a clean cross-site scripting factor</font>

683
00:24:52,860 --> 00:24:57,540
<font color="#E5E5E5">there are all these no</font><font color="#CCCCCC"> bytes in between</font>

684
00:24:54,870 --> 00:24:59,879
and this causes<font color="#E5E5E5"> Firefox to actually not</font>

685
00:24:57,540 --> 00:25:02,700
execute the<font color="#CCCCCC"> script at</font><font color="#E5E5E5"> all but it turns</font>

686
00:24:59,880 --> 00:25:04,500
out that<font color="#E5E5E5"> Internet Explorer just strips</font>

687
00:25:02,700 --> 00:25:05,550
the<font color="#E5E5E5"> no bytes it kind of ignores them as</font>

688
00:25:04,500 --> 00:25:08,940
if they<font color="#CCCCCC"> weren't</font><font color="#E5E5E5"> even there</font>

689
00:25:05,550 --> 00:25:09,990
<font color="#E5E5E5">leading to this essentially so there you</font>

690
00:25:08,940 --> 00:25:12,390
have<font color="#CCCCCC"> it I thought</font><font color="#E5E5E5"> this was a really</font>

691
00:25:09,990 --> 00:25:16,740
<font color="#E5E5E5">clever exploit on accounts of google.com</font>

692
00:25:12,390 --> 00:25:19,980
<font color="#E5E5E5">in Internet Explorer one more example</font>

693
00:25:16,740 --> 00:25:22,230
<font color="#E5E5E5">Spotify if any of you use Spotify to</font>

694
00:25:19,980 --> 00:25:24,840
listen to music perhaps<font color="#E5E5E5"> yes some people</font>

695
00:25:22,230 --> 00:25:26,760
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> what you may not</font><font color="#CCCCCC"> know is that they</font>

696
00:25:24,840 --> 00:25:28,679
allow you to<font color="#CCCCCC"> use</font><font color="#E5E5E5"> almost any Unicode</font>

697
00:25:26,760 --> 00:25:30,300
symbol in<font color="#E5E5E5"> user names which is a good</font>

698
00:25:28,680 --> 00:25:32,580
thing<font color="#CCCCCC"> they don't</font><font color="#E5E5E5"> just limit you to the</font>

699
00:25:30,300 --> 00:25:33,320
<font color="#E5E5E5">ASCII range I think more services should</font>

700
00:25:32,580 --> 00:25:35,699
<font color="#E5E5E5">be doing this</font>

701
00:25:33,320 --> 00:25:38,129
unfortunately for Spotify though they

702
00:25:35,700 --> 00:25:39,990
had a very<font color="#E5E5E5"> small bug in their code</font><font color="#CCCCCC"> which</font>

703
00:25:38,130 --> 00:25:42,030
allow the<font color="#E5E5E5"> tackett's to quite easily take</font>

704
00:25:39,990 --> 00:25:44,310
over<font color="#E5E5E5"> someone else's account without even</font>

705
00:25:42,030 --> 00:25:45,720
knowing the password<font color="#CCCCCC"> so let's say you</font>

706
00:25:44,310 --> 00:25:48,480
wanted to<font color="#E5E5E5"> take over the account of</font>

707
00:25:45,720 --> 00:25:50,460
<font color="#CCCCCC">username</font><font color="#E5E5E5"> Obama what you could do is you</font>

708
00:25:48,480 --> 00:25:52,410
could register<font color="#CCCCCC"> an account</font><font color="#E5E5E5"> with the same</font>

709
00:25:50,460 --> 00:25:54,570
new<font color="#E5E5E5"> username but using</font><font color="#CCCCCC"> different</font>

710
00:25:52,410 --> 00:25:57,870
<font color="#E5E5E5">look-alike</font><font color="#CCCCCC"> Unicode symbols in this case</font>

711
00:25:54,570 --> 00:26:00,840
I'm using<font color="#E5E5E5"> Unicode modifier letters so</font>

712
00:25:57,870 --> 00:26:02,760
Spotify had a script<font color="#CCCCCC"> that</font><font color="#E5E5E5"> checks if</font><font color="#CCCCCC"> the</font>

713
00:26:00,840 --> 00:26:04,350
username already<font color="#E5E5E5"> existed and when you</font>

714
00:26:02,760 --> 00:26:05,970
were<font color="#E5E5E5"> trying to register</font><font color="#CCCCCC"> it but in this</font>

715
00:26:04,350 --> 00:26:08,100
<font color="#E5E5E5">case it would consider the two usernames</font>

716
00:26:05,970 --> 00:26:09,450
to be different<font color="#CCCCCC"> after all</font><font color="#E5E5E5"> there are</font>

717
00:26:08,100 --> 00:26:11,179
different strings they use<font color="#CCCCCC"> different</font>

718
00:26:09,450 --> 00:26:13,650
code points so this makes sense

719
00:26:11,180 --> 00:26:15,030
<font color="#CCCCCC">unfortunately after</font><font color="#E5E5E5"> logging into this</font>

720
00:26:13,650 --> 00:26:16,530
brand new account that you<font color="#E5E5E5"> created</font>

721
00:26:15,030 --> 00:26:19,170
yourself with the password of<font color="#E5E5E5"> your</font>

722
00:26:16,530 --> 00:26:21,030
choice they accidentally performed

723
00:26:19,170 --> 00:26:22,350
Unicode normalization causing you to

724
00:26:21,030 --> 00:26:25,500
actually<font color="#E5E5E5"> be logged in into the real</font>

725
00:26:22,350 --> 00:26:27,179
Obama account<font color="#E5E5E5"> instead so yeah this was a</font>

726
00:26:25,500 --> 00:26:28,680
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> terrible</font><font color="#E5E5E5"> bug on there and of</font>

727
00:26:27,180 --> 00:26:30,510
course<font color="#CCCCCC"> I fixed it as soon</font><font color="#E5E5E5"> as I found out</font>

728
00:26:28,680 --> 00:26:32,520
<font color="#CCCCCC">about</font><font color="#E5E5E5"> it but it shows</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Unicode</font>

729
00:26:30,510 --> 00:26:34,500
<font color="#E5E5E5">normalization is quite powerful</font><font color="#CCCCCC"> and</font>

730
00:26:32,520 --> 00:26:37,500
should be really<font color="#CCCCCC"> careful about when you</font>

731
00:26:34,500 --> 00:26:39,809
apply<font color="#E5E5E5"> it and when you don't another</font>

732
00:26:37,500 --> 00:26:41,989
<font color="#E5E5E5">example of this is with github</font>

733
00:26:39,809 --> 00:26:45,119
now github doesn't just have the website

734
00:26:41,989 --> 00:26:47,940
<font color="#CCCCCC">they also</font><font color="#E5E5E5"> offer desktop applications for</font>

735
00:26:45,119 --> 00:26:49,619
<font color="#CCCCCC">Windows and</font><font color="#E5E5E5"> for Mac and this is about a</font>

736
00:26:47,940 --> 00:26:51,629
vulnerability<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the Windows clients</font>

737
00:26:49,619 --> 00:26:54,238
<font color="#E5E5E5">there's not really a lot about a</font><font color="#CCCCCC"> lot of</font>

738
00:26:51,629 --> 00:26:56,580
<font color="#E5E5E5">information</font><font color="#CCCCCC"> available about</font><font color="#E5E5E5"> it but it</font>

739
00:26:54,239 --> 00:26:58,799
shows that<font color="#E5E5E5"> certain character</font>

740
00:26:56,580 --> 00:27:01,439
translations were being done in the

741
00:26:58,799 --> 00:27:03,658
clients<font color="#CCCCCC"> and this particular attacker</font>

742
00:27:01,440 --> 00:27:05,639
<font color="#E5E5E5">figured out</font><font color="#CCCCCC"> a unicode character</font><font color="#E5E5E5"> that was</font>

743
00:27:03,659 --> 00:27:07,289
being<font color="#E5E5E5"> translated into a double quote</font>

744
00:27:05,639 --> 00:27:09,149
character and then<font color="#E5E5E5"> you could use that</font>

745
00:27:07,289 --> 00:27:11,070
<font color="#CCCCCC">double quote character to break out of</font>

746
00:27:09,149 --> 00:27:13,018
some shell commands<font color="#E5E5E5"> and basically do a</font>

747
00:27:11,070 --> 00:27:15,418
shell<font color="#CCCCCC"> injection attack leading to a</font>

748
00:27:13,019 --> 00:27:17,729
<font color="#E5E5E5">full-blown remote code execution exploit</font>

749
00:27:15,419 --> 00:27:20,269
on<font color="#E5E5E5"> Windows through the github desktop</font>

750
00:27:17,729 --> 00:27:26,039
client so again this is<font color="#E5E5E5"> another problem</font>

751
00:27:20,269 --> 00:27:28,169
caused by<font color="#CCCCCC"> Unicode normalization now</font>

752
00:27:26,039 --> 00:27:31,589
let's talk about<font color="#E5E5E5"> JavaScript and Jason</font>

753
00:27:28,169 --> 00:27:33,719
<font color="#E5E5E5">grammar for a little bit imagine an HTML</font>

754
00:27:31,589 --> 00:27:35,820
page where a server-side<font color="#CCCCCC"> script injects</font>

755
00:27:33,719 --> 00:27:38,460
<font color="#E5E5E5">some user</font><font color="#CCCCCC"> input</font><font color="#E5E5E5"> into a single line</font>

756
00:27:35,820 --> 00:27:40,468
comment into a script element it also

757
00:27:38,460 --> 00:27:41,759
<font color="#E5E5E5">scripts asking new lines</font><font color="#CCCCCC"> to prevent you</font>

758
00:27:40,469 --> 00:27:44,219
from breaking<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> single line</font>

759
00:27:41,759 --> 00:27:47,159
<font color="#E5E5E5">comments so the question is is this code</font>

760
00:27:44,219 --> 00:27:49,769
safe well let's take a look at the

761
00:27:47,159 --> 00:27:51,539
specification<font color="#E5E5E5"> the</font><font color="#CCCCCC"> atmosphere expect</font>

762
00:27:49,769 --> 00:27:54,059
lists a number<font color="#CCCCCC"> of line</font><font color="#E5E5E5"> Terminator</font>

763
00:27:51,539 --> 00:27:55,919
characters and the usual suspects<font color="#CCCCCC"> like</font>

764
00:27:54,059 --> 00:27:59,009
line feed and carriage return are there

765
00:27:55,919 --> 00:28:01,889
but there's also<font color="#E5E5E5"> these</font><font color="#CCCCCC"> two guys you plus</font>

766
00:27:59,009 --> 00:28:05,669
<font color="#E5E5E5">202 8 and 12 to 9 the line and paragraph</font>

767
00:28:01,889 --> 00:28:07,109
separator code points<font color="#E5E5E5"> so with that in</font>

768
00:28:05,669 --> 00:28:08,940
mind<font color="#E5E5E5"> if we go back to the previous</font>

769
00:28:07,109 --> 00:28:10,949
example now we see that this<font color="#E5E5E5"> is in fact</font>

770
00:28:08,940 --> 00:28:13,289
<font color="#CCCCCC">a cross-site scripting vulnerability if</font>

771
00:28:10,950 --> 00:28:15,570
the user input contains<font color="#E5E5E5"> a line or a</font>

772
00:28:13,289 --> 00:28:17,549
paragraph<font color="#E5E5E5"> separator Unicode symbol then</font>

773
00:28:15,570 --> 00:28:19,408
anything<font color="#E5E5E5"> following that character will</font>

774
00:28:17,549 --> 00:28:21,269
<font color="#CCCCCC">not</font><font color="#E5E5E5"> be part of the same line anymore</font>

775
00:28:19,409 --> 00:28:23,700
according to<font color="#CCCCCC"> JavaScript</font><font color="#E5E5E5"> so that part of</font>

776
00:28:21,269 --> 00:28:25,259
the code will<font color="#CCCCCC"> actually be executed so</font>

777
00:28:23,700 --> 00:28:29,339
this page is<font color="#E5E5E5"> vulnerable to cross-site</font>

778
00:28:25,259 --> 00:28:31,830
scripting<font color="#E5E5E5"> and that also means</font><font color="#CCCCCC"> that JSON</font>

779
00:28:29,339 --> 00:28:35,519
is not a subset of JavaScript<font color="#CCCCCC"> contrary</font>

780
00:28:31,830 --> 00:28:38,249
<font color="#CCCCCC">to</font><font color="#E5E5E5"> popular belief so not all JSON format</font>

781
00:28:35,519 --> 00:28:39,659
the text<font color="#E5E5E5"> is valid JavaScript code so if</font>

782
00:28:38,249 --> 00:28:41,729
you have a string<font color="#E5E5E5"> containing JSON</font>

783
00:28:39,659 --> 00:28:44,999
formatted data you can use JSON<font color="#CCCCCC"> but</font>

784
00:28:41,729 --> 00:28:46,679
parse<font color="#E5E5E5"> to</font><font color="#CCCCCC"> uncie realize it</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> eval is</font>

785
00:28:44,999 --> 00:28:48,269
often<font color="#E5E5E5"> used as a fallback for older</font>

786
00:28:46,679 --> 00:28:50,369
environments that<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> have a native</font>

787
00:28:48,269 --> 00:28:51,989
<font color="#E5E5E5">JSON</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> parse implementation yet but</font>

788
00:28:50,369 --> 00:28:52,770
depending on<font color="#E5E5E5"> which characters the data</font>

789
00:28:51,989 --> 00:28:54,840
contains

790
00:28:52,770 --> 00:28:57,150
running the<font color="#E5E5E5"> data to eval might actually</font>

791
00:28:54,840 --> 00:28:58,800
<font color="#E5E5E5">throw an error whereas running the same</font>

792
00:28:57,150 --> 00:29:01,350
data to<font color="#CCCCCC"> J's note parse would just work</font>

793
00:28:58,800 --> 00:29:02,639
fine<font color="#CCCCCC"> and this difference</font><font color="#E5E5E5"> between code</font>

794
00:29:01,350 --> 00:29:04,919
paths that are<font color="#CCCCCC"> being</font><font color="#E5E5E5"> taken can be</font>

795
00:29:02,640 --> 00:29:06,720
<font color="#E5E5E5">dangerous in some situations now of</font>

796
00:29:04,920 --> 00:29:09,690
<font color="#E5E5E5">course you shouldn't be using eval in</font>

797
00:29:06,720 --> 00:29:11,250
the first place<font color="#CCCCCC"> to parse JSON or for any</font>

798
00:29:09,690 --> 00:29:13,559
other<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> but there might be other</font>

799
00:29:11,250 --> 00:29:16,260
<font color="#E5E5E5">situations in which you pass you pass</font>

800
00:29:13,559 --> 00:29:18,899
<font color="#E5E5E5">JSON formatted data to a JavaScript</font>

801
00:29:16,260 --> 00:29:21,660
parser<font color="#E5E5E5"> so my advice</font><font color="#CCCCCC"> would be in</font><font color="#E5E5E5"> general</font>

802
00:29:18,900 --> 00:29:24,870
always<font color="#E5E5E5"> escape JSON formatted data before</font>

803
00:29:21,660 --> 00:29:26,220
<font color="#E5E5E5">passing it</font><font color="#CCCCCC"> to a JavaScript</font><font color="#E5E5E5"> parser I've</font>

804
00:29:24,870 --> 00:29:29,159
actually built the tool<font color="#E5E5E5"> that can be used</font>

805
00:29:26,220 --> 00:29:31,350
<font color="#CCCCCC">for</font><font color="#E5E5E5"> this it's called</font><font color="#CCCCCC"> JSS it works in</font>

806
00:29:29,160 --> 00:29:33,420
browsers<font color="#CCCCCC"> onload ejs there is a common</font>

807
00:29:31,350 --> 00:29:35,370
client<font color="#E5E5E5"> interface as well</font><font color="#CCCCCC"> the source code</font>

808
00:29:33,420 --> 00:29:37,260
is<font color="#E5E5E5"> available on github and so you have</font>

809
00:29:35,370 --> 00:29:40,889
<font color="#E5E5E5">literally no excuse not to start doing</font>

810
00:29:37,260 --> 00:29:43,260
<font color="#E5E5E5">this right</font><font color="#CCCCCC"> now so here's how you</font><font color="#E5E5E5"> would</font>

811
00:29:40,890 --> 00:29:46,790
<font color="#E5E5E5">use it</font><font color="#CCCCCC"> to create escaped</font><font color="#E5E5E5"> JSON formatted</font>

812
00:29:43,260 --> 00:29:49,860
data<font color="#E5E5E5"> so instead of using json stringify</font>

813
00:29:46,790 --> 00:29:52,470
<font color="#E5E5E5">which would lead to strings that contain</font>

814
00:29:49,860 --> 00:29:55,229
<font color="#E5E5E5">the raw unescape unicode symbols which</font>

815
00:29:52,470 --> 00:29:57,330
could lead to<font color="#E5E5E5"> these errors you just use</font>

816
00:29:55,230 --> 00:30:01,020
<font color="#E5E5E5">the</font><font color="#CCCCCC"> GS cask with adjacent options set to</font>

817
00:29:57,330 --> 00:30:03,300
true<font color="#E5E5E5"> and that way all these non ASCII</font>

818
00:30:01,020 --> 00:30:05,160
symbols that<font color="#CCCCCC"> are special</font><font color="#E5E5E5"> they will be</font>

819
00:30:03,300 --> 00:30:07,590
<font color="#E5E5E5">represented by an escape sequence in the</font>

820
00:30:05,160 --> 00:30:09,570
data so when you<font color="#E5E5E5"> jason parse the</font>

821
00:30:07,590 --> 00:30:10,980
serialized results the results will

822
00:30:09,570 --> 00:30:12,629
exactly be the<font color="#E5E5E5"> same so it will</font>

823
00:30:10,980 --> 00:30:14,480
uncivilized through exactly<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same</font>

824
00:30:12,630 --> 00:30:18,530
data<font color="#CCCCCC"> but it's just that</font><font color="#E5E5E5"> the serialized</font>

825
00:30:14,480 --> 00:30:21,480
representation is much safer this way

826
00:30:18,530 --> 00:30:23,010
now<font color="#E5E5E5"> another similar problem happens with</font>

827
00:30:21,480 --> 00:30:25,140
surrogates we talked about surrogates

828
00:30:23,010 --> 00:30:26,970
<font color="#CCCCCC">fares</font><font color="#E5E5E5"> before where they combine together</font>

829
00:30:25,140 --> 00:30:29,940
into a single astral symbol and

830
00:30:26,970 --> 00:30:32,790
technically surrogates<font color="#E5E5E5"> cannot occur by</font>

831
00:30:29,940 --> 00:30:35,040
themselves as loan surrogates<font color="#E5E5E5"> but in</font>

832
00:30:32,790 --> 00:30:37,379
<font color="#CCCCCC">JavaScript strings</font><font color="#E5E5E5"> or in Jason strings</font>

833
00:30:35,040 --> 00:30:38,520
loan surrogates are actually valid<font color="#E5E5E5"> the</font>

834
00:30:37,380 --> 00:30:40,410
problem is that they're<font color="#E5E5E5"> not valid</font>

835
00:30:38,520 --> 00:30:42,809
<font color="#E5E5E5">according</font><font color="#CCCCCC"> to unicode</font><font color="#E5E5E5"> they're not valid</font>

836
00:30:40,410 --> 00:30:45,179
<font color="#E5E5E5">code points by themselves and utf-8</font>

837
00:30:42,809 --> 00:30:48,030
encoders do not support<font color="#E5E5E5"> loan surrogates</font>

838
00:30:45,179 --> 00:30:49,920
<font color="#E5E5E5">either so this can cause a number</font><font color="#CCCCCC"> of</font>

839
00:30:48,030 --> 00:30:51,510
problems<font color="#CCCCCC"> if you attempt to store</font>

840
00:30:49,920 --> 00:30:53,910
<font color="#E5E5E5">JavaScript or</font><font color="#CCCCCC"> JSON strings into a</font>

841
00:30:51,510 --> 00:30:55,920
database<font color="#E5E5E5"> that uses utf-8 this might</font>

842
00:30:53,910 --> 00:30:58,110
<font color="#E5E5E5">result in an error or even a crash in</font>

843
00:30:55,920 --> 00:31:00,990
some cases of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> unless you escape</font>

844
00:30:58,110 --> 00:31:02,879
the strings<font color="#E5E5E5"> first and this is not just</font>

845
00:31:00,990 --> 00:31:05,070
some theoretical issue<font color="#E5E5E5"> the same thing</font>

846
00:31:02,880 --> 00:31:05,880
for example<font color="#CCCCCC"> goes for data</font><font color="#E5E5E5"> that gets sent</font>

847
00:31:05,070 --> 00:31:07,830
as a

848
00:31:05,880 --> 00:31:10,830
they load over a WebSocket<font color="#E5E5E5"> connection</font>

849
00:31:07,830 --> 00:31:14,129
WebSockets use<font color="#CCCCCC"> they only accept valid</font>

850
00:31:10,830 --> 00:31:16,080
utf-8<font color="#E5E5E5"> by design so a utf-8 encoded</font><font color="#CCCCCC"> lone</font>

851
00:31:14,130 --> 00:31:18,060
surrogate<font color="#E5E5E5"> is technically invalid and</font>

852
00:31:16,080 --> 00:31:20,129
<font color="#E5E5E5">this would cause the client to be</font>

853
00:31:18,060 --> 00:31:21,510
<font color="#E5E5E5">disconnected so if the client</font><font color="#CCCCCC"> is</font>

854
00:31:20,130 --> 00:31:23,700
programmed in<font color="#E5E5E5"> such a way that it</font>

855
00:31:21,510 --> 00:31:26,250
automatically reconnects to<font color="#CCCCCC"> try to start</font>

856
00:31:23,700 --> 00:31:27,900
the connection<font color="#CCCCCC"> again and then it</font>

857
00:31:26,250 --> 00:31:29,820
receives another invalid Beimel<font color="#CCCCCC"> odes</font>

858
00:31:27,900 --> 00:31:32,280
then it will reconnect<font color="#CCCCCC"> again and again</font>

859
00:31:29,820 --> 00:31:34,050
and essentially<font color="#E5E5E5"> if there is no logic to</font>

860
00:31:32,280 --> 00:31:36,120
<font color="#E5E5E5">handle all these reconnection attempts</font>

861
00:31:34,050 --> 00:31:38,129
then this may lead<font color="#E5E5E5"> to a very</font><font color="#CCCCCC"> very low</font>

862
00:31:36,120 --> 00:31:40,199
bandwidth denial of service attack<font color="#E5E5E5"> you</font>

863
00:31:38,130 --> 00:31:41,310
can<font color="#E5E5E5"> just send the lone surrogate over</font>

864
00:31:40,200 --> 00:31:43,800
and<font color="#E5E5E5"> over again to</font><font color="#CCCCCC"> the WebSocket</font>

865
00:31:41,310 --> 00:31:45,540
connection<font color="#E5E5E5"> to crash the server and this</font>

866
00:31:43,800 --> 00:31:46,790
was a real<font color="#E5E5E5"> problem for the socket IO</font>

867
00:31:45,540 --> 00:31:52,649
nodejs

868
00:31:46,790 --> 00:31:54,690
package now<font color="#E5E5E5"> the advice is always escape</font>

869
00:31:52,650 --> 00:31:57,570
<font color="#CCCCCC">JSON formatted data</font><font color="#E5E5E5"> before passing it</font><font color="#CCCCCC"> to</font>

870
00:31:54,690 --> 00:31:59,580
a utf-8 encoder<font color="#E5E5E5"> and again you can use</font>

871
00:31:57,570 --> 00:32:02,730
<font color="#CCCCCC">the SS for that but we've already talked</font>

872
00:31:59,580 --> 00:32:04,530
about that<font color="#E5E5E5"> so let's talk about some</font>

873
00:32:02,730 --> 00:32:07,560
<font color="#E5E5E5">other vulnerabilities has anyone heard</font>

874
00:32:04,530 --> 00:32:09,780
<font color="#E5E5E5">of fabricator before it's some projects</font>

875
00:32:07,560 --> 00:32:11,190
used by Facebook<font color="#CCCCCC"> as</font><font color="#E5E5E5"> well as some other</font>

876
00:32:09,780 --> 00:32:13,020
big companies<font color="#CCCCCC"> it's actually an</font><font color="#E5E5E5"> open</font>

877
00:32:11,190 --> 00:32:15,020
<font color="#CCCCCC">source project by Facebook itself</font><font color="#E5E5E5"> and</font>

878
00:32:13,020 --> 00:32:17,460
it's what they use<font color="#CCCCCC"> to manage</font><font color="#E5E5E5"> their own</font>

879
00:32:15,020 --> 00:32:19,410
<font color="#E5E5E5">software</font><font color="#CCCCCC"> and their source code</font><font color="#E5E5E5"> it's very</font>

880
00:32:17,460 --> 00:32:20,790
<font color="#E5E5E5">similar</font><font color="#CCCCCC"> to get up</font><font color="#E5E5E5"> it hosts your git</font>

881
00:32:19,410 --> 00:32:23,010
repositories it gives you a nice

882
00:32:20,790 --> 00:32:26,280
interface<font color="#E5E5E5"> for issue management and code</font>

883
00:32:23,010 --> 00:32:28,620
<font color="#CCCCCC">review and</font><font color="#E5E5E5"> things like that</font><font color="#CCCCCC"> so let's say</font>

884
00:32:26,280 --> 00:32:29,970
<font color="#E5E5E5">we</font><font color="#CCCCCC"> war we are</font><font color="#E5E5E5"> evil hackers and we want</font>

885
00:32:28,620 --> 00:32:31,889
to get in here<font color="#E5E5E5"> we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> view the</font>

886
00:32:29,970 --> 00:32:34,920
source<font color="#E5E5E5"> code for facebook.com of course</font>

887
00:32:31,890 --> 00:32:38,130
we do so we try to<font color="#CCCCCC"> register for an</font>

888
00:32:34,920 --> 00:32:40,770
account there<font color="#E5E5E5"> well fabricator validates</font>

889
00:32:38,130 --> 00:32:43,260
email addresses<font color="#E5E5E5"> based on a</font><font color="#CCCCCC"> whitelist of</font>

890
00:32:40,770 --> 00:32:44,580
domain<font color="#E5E5E5"> so in Facebook's case you will</font>

891
00:32:43,260 --> 00:32:47,190
<font color="#E5E5E5">need to have an email address</font><font color="#CCCCCC"> that ends</font>

892
00:32:44,580 --> 00:32:48,810
<font color="#E5E5E5">with at</font><font color="#CCCCCC"> eff be</font><font color="#E5E5E5"> calm</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> of course the</font>

893
00:32:47,190 --> 00:32:51,780
only<font color="#CCCCCC"> way to get such an address</font><font color="#E5E5E5"> is to</font>

894
00:32:48,810 --> 00:32:53,220
actually<font color="#CCCCCC"> start working for</font><font color="#E5E5E5"> Facebook so</font>

895
00:32:51,780 --> 00:32:55,770
<font color="#E5E5E5">unfortunately you were kind of stuck</font>

896
00:32:53,220 --> 00:32:56,910
<font color="#CCCCCC">here we cannot</font><font color="#E5E5E5"> create an account but</font>

897
00:32:55,770 --> 00:32:57,780
let's take<font color="#E5E5E5"> a look at the code for</font>

898
00:32:56,910 --> 00:32:59,940
fabricator

899
00:32:57,780 --> 00:33:02,490
<font color="#E5E5E5">it's written in PHP</font><font color="#CCCCCC"> and it stores</font><font color="#E5E5E5"> its</font>

900
00:32:59,940 --> 00:33:05,280
data in my sequel database<font color="#E5E5E5"> hmm</font>

901
00:33:02,490 --> 00:33:08,040
interesting<font color="#E5E5E5"> it also happens</font><font color="#CCCCCC"> to use my</font>

902
00:33:05,280 --> 00:33:11,610
sequels<font color="#E5E5E5"> utf-8 which is not really utf-8</font>

903
00:33:08,040 --> 00:33:14,070
after all yeah<font color="#CCCCCC"> so this opens up a number</font>

904
00:33:11,610 --> 00:33:16,080
<font color="#CCCCCC">of possibilities for us</font><font color="#E5E5E5"> right so instead</font>

905
00:33:14,070 --> 00:33:16,919
<font color="#CCCCCC">of</font><font color="#E5E5E5"> just entering</font><font color="#CCCCCC"> our email address</font><font color="#E5E5E5"> evil</font>

906
00:33:16,080 --> 00:33:19,620
<font color="#CCCCCC">at hacker</font>

907
00:33:16,920 --> 00:33:21,390
<font color="#E5E5E5">we can append some things like we can</font>

908
00:33:19,620 --> 00:33:25,169
add an astral symbol like the pile<font color="#CCCCCC"> of</font>

909
00:33:21,390 --> 00:33:27,750
poo<font color="#E5E5E5"> and then we can append at FB calm so</font>

910
00:33:25,170 --> 00:33:29,610
when we submit this form<font color="#E5E5E5"> the PHP code on</font>

911
00:33:27,750 --> 00:33:32,220
the<font color="#CCCCCC"> backend</font><font color="#E5E5E5"> will validate if the email</font>

912
00:33:29,610 --> 00:33:34,469
<font color="#CCCCCC">address ends</font><font color="#E5E5E5"> with at FB</font><font color="#CCCCCC"> calm</font><font color="#E5E5E5"> which it</font>

913
00:33:32,220 --> 00:33:36,690
does then it will try<font color="#CCCCCC"> to insert this</font>

914
00:33:34,470 --> 00:33:38,340
value<font color="#E5E5E5"> into the database this</font><font color="#CCCCCC"> will throw</font>

915
00:33:36,690 --> 00:33:40,200
<font color="#E5E5E5">a warning and the string will be</font>

916
00:33:38,340 --> 00:33:42,600
<font color="#CCCCCC">truncated at the first</font><font color="#E5E5E5"> asshole symbol</font>

917
00:33:40,200 --> 00:33:44,130
and the result is<font color="#CCCCCC"> that just our real</font>

918
00:33:42,600 --> 00:33:45,810
email<font color="#E5E5E5"> address is stored into</font><font color="#CCCCCC"> the</font>

919
00:33:44,130 --> 00:33:49,080
database so<font color="#CCCCCC"> after</font><font color="#E5E5E5"> this we can</font><font color="#CCCCCC"> login just</font>

920
00:33:45,810 --> 00:33:51,300
<font color="#E5E5E5">fine this vulnerability was discovered</font>

921
00:33:49,080 --> 00:33:53,189
<font color="#CCCCCC">by</font><font color="#E5E5E5"> Tom van Kooten who is also present</font>

922
00:33:51,300 --> 00:33:56,129
here<font color="#CCCCCC"> today so give him</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> high-five</font><font color="#E5E5E5"> if</font>

923
00:33:53,190 --> 00:33:58,470
<font color="#E5E5E5">you meet him</font><font color="#CCCCCC"> and the same Tom van Kooten</font>

924
00:33:56,130 --> 00:34:00,540
also found this<font color="#E5E5E5"> zero day in WordPress</font>

925
00:33:58,470 --> 00:34:03,030
that lets<font color="#CCCCCC"> to remote code execution on</font>

926
00:34:00,540 --> 00:34:05,220
some configurations now

927
00:34:03,030 --> 00:34:06,930
this vulnerability is a little bit

928
00:34:05,220 --> 00:34:08,790
complicated<font color="#CCCCCC"> I'm gonna try</font><font color="#E5E5E5"> to simplify it</font>

929
00:34:06,930 --> 00:34:11,010
<font color="#E5E5E5">a little bit so that I can explain it</font>

930
00:34:08,790 --> 00:34:12,810
briefly<font color="#CCCCCC"> but I</font><font color="#E5E5E5"> recommend</font><font color="#CCCCCC"> checking out</font>

931
00:34:11,010 --> 00:34:15,390
Tom's blog post about<font color="#E5E5E5"> this for all the</font>

932
00:34:12,810 --> 00:34:17,489
<font color="#CCCCCC">details</font><font color="#E5E5E5"> it's really good so essentially</font>

933
00:34:15,389 --> 00:34:20,250
it<font color="#E5E5E5"> was an object injection vulnerability</font>

934
00:34:17,489 --> 00:34:22,350
in the<font color="#E5E5E5"> WordPress core due to unsafe and</font>

935
00:34:20,250 --> 00:34:24,389
serialization<font color="#E5E5E5"> but it's a little bit</font>

936
00:34:22,350 --> 00:34:26,219
misleading to say<font color="#CCCCCC"> that because</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is</font>

937
00:34:24,389 --> 00:34:28,250
not really<font color="#E5E5E5"> anything that</font><font color="#CCCCCC"> WordPress was</font>

938
00:34:26,219 --> 00:34:31,020
doing<font color="#E5E5E5"> wrong in their source code itself</font>

939
00:34:28,250 --> 00:34:34,620
so unsafe and serialization was not

940
00:34:31,020 --> 00:34:36,330
really the<font color="#E5E5E5"> cause of the vulnerability so</font>

941
00:34:34,620 --> 00:34:38,790
this is a function<font color="#CCCCCC"> that they're using</font>

942
00:34:36,330 --> 00:34:40,860
called<font color="#CCCCCC"> is serialized and</font><font color="#E5E5E5"> see whenever</font>

943
00:34:38,790 --> 00:34:42,540
data is read from<font color="#CCCCCC"> the database or stored</font>

944
00:34:40,860 --> 00:34:44,880
into<font color="#CCCCCC"> the database it goes through this</font>

945
00:34:42,540 --> 00:34:46,409
function<font color="#CCCCCC"> because the data</font><font color="#E5E5E5"> is retrieved</font>

946
00:34:44,880 --> 00:34:48,419
from the database is usually a string

947
00:34:46,409 --> 00:34:51,029
<font color="#E5E5E5">but it could be a string that</font><font color="#CCCCCC"> represents</font>

948
00:34:48,418 --> 00:34:53,190
a serialized PHP object like an array<font color="#CCCCCC"> or</font>

949
00:34:51,030 --> 00:34:55,020
a number<font color="#CCCCCC"> or an instance of a class</font><font color="#E5E5E5"> and</font>

950
00:34:53,190 --> 00:34:56,700
in<font color="#CCCCCC"> that case it</font><font color="#E5E5E5"> needs to be</font><font color="#CCCCCC"> unsee</font>

951
00:34:55,020 --> 00:34:58,320
realized before<font color="#E5E5E5"> WordPress can actually</font>

952
00:34:56,699 --> 00:35:00,480
use it of course<font color="#CCCCCC"> and the same thing</font><font color="#E5E5E5"> goes</font>

953
00:34:58,320 --> 00:35:02,280
when saving<font color="#E5E5E5"> data to the database</font><font color="#CCCCCC"> if the</font>

954
00:35:00,480 --> 00:35:04,080
<font color="#CCCCCC">data is</font><font color="#E5E5E5"> not just a string you need to</font>

955
00:35:02,280 --> 00:35:05,730
serialize<font color="#CCCCCC"> it first</font><font color="#E5E5E5"> and that's why this</font>

956
00:35:04,080 --> 00:35:08,130
<font color="#E5E5E5">function is</font><font color="#CCCCCC"> being used all over the</font>

957
00:35:05,730 --> 00:35:10,890
<font color="#E5E5E5">WordPress core so there is a check here</font>

958
00:35:08,130 --> 00:35:12,720
<font color="#CCCCCC">if the last character is not a</font><font color="#E5E5E5"> semicolon</font>

959
00:35:10,890 --> 00:35:15,060
or<font color="#E5E5E5"> a closing brace and there is no way</font>

960
00:35:12,720 --> 00:35:16,560
that<font color="#E5E5E5"> the data is serialized and again</font>

961
00:35:15,060 --> 00:35:18,029
there<font color="#E5E5E5"> is</font><font color="#CCCCCC"> nothing wrong with</font><font color="#E5E5E5"> this code</font>

962
00:35:16,560 --> 00:35:21,540
all<font color="#CCCCCC"> the assumptions that are making here</font>

963
00:35:18,030 --> 00:35:23,400
are absolutely<font color="#CCCCCC"> valid the only problem is</font>

964
00:35:21,540 --> 00:35:25,620
<font color="#CCCCCC">that WordPress also made the</font><font color="#E5E5E5"> I felt the</font>

965
00:35:23,400 --> 00:35:27,210
assumption that if you store<font color="#E5E5E5"> a piece of</font>

966
00:35:25,620 --> 00:35:29,220
data into the<font color="#E5E5E5"> database and then you</font>

967
00:35:27,210 --> 00:35:30,580
retrieve<font color="#E5E5E5"> the same piece of</font><font color="#CCCCCC"> data from the</font>

968
00:35:29,220 --> 00:35:33,100
<font color="#CCCCCC">database that</font><font color="#E5E5E5"> is</font>

969
00:35:30,580 --> 00:35:35,140
exactly the same string<font color="#E5E5E5"> but as we saw</font>

970
00:35:33,100 --> 00:35:37,839
earlier<font color="#CCCCCC"> there</font><font color="#E5E5E5"> are cases when this</font>

971
00:35:35,140 --> 00:35:40,750
doesn't<font color="#E5E5E5"> really happen</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> WordPress once</font>

972
00:35:37,840 --> 00:35:42,820
again uses<font color="#CCCCCC"> mice equals</font><font color="#E5E5E5"> utf-8</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> default</font>

973
00:35:40,750 --> 00:35:44,830
<font color="#E5E5E5">or it did for a very long time</font><font color="#CCCCCC"> and</font>

974
00:35:42,820 --> 00:35:47,230
because of<font color="#E5E5E5"> this it is possible</font><font color="#CCCCCC"> to save a</font>

975
00:35:44,830 --> 00:35:50,230
string<font color="#E5E5E5"> into the database with an astral</font>

976
00:35:47,230 --> 00:35:51,880
symbol at the<font color="#CCCCCC"> end and this string would</font>

977
00:35:50,230 --> 00:35:53,500
<font color="#E5E5E5">get truncated upon insertion</font><font color="#CCCCCC"> so</font>

978
00:35:51,880 --> 00:35:54,820
<font color="#E5E5E5">basically the value that ends up being</font>

979
00:35:53,500 --> 00:35:56,650
compared on the back<font color="#E5E5E5"> ends before</font>

980
00:35:54,820 --> 00:35:58,270
<font color="#E5E5E5">inserting it into the database</font><font color="#CCCCCC"> is</font>

981
00:35:56,650 --> 00:36:00,640
entirely<font color="#CCCCCC"> different</font><font color="#E5E5E5"> than what actually</font>

982
00:35:58,270 --> 00:36:04,060
<font color="#E5E5E5">ends</font><font color="#CCCCCC"> up into the database</font><font color="#E5E5E5"> and this is</font>

983
00:36:00,640 --> 00:36:07,210
very<font color="#E5E5E5"> dangerous</font><font color="#CCCCCC"> so here's what that</font><font color="#E5E5E5"> will</font>

984
00:36:04,060 --> 00:36:08,680
look like<font color="#E5E5E5"> so let's</font><font color="#CCCCCC"> say you have access</font>

985
00:36:07,210 --> 00:36:10,450
<font color="#CCCCCC">to a</font><font color="#E5E5E5"> wordpress installation</font><font color="#CCCCCC"> but you just</font>

986
00:36:08,680 --> 00:36:12,100
have a<font color="#CCCCCC"> regular user account you</font><font color="#E5E5E5"> don't</font>

987
00:36:10,450 --> 00:36:13,870
have any administrative<font color="#E5E5E5"> rights or</font>

988
00:36:12,100 --> 00:36:17,380
anything like<font color="#E5E5E5"> that so</font><font color="#CCCCCC"> you could edit</font>

989
00:36:13,870 --> 00:36:20,440
<font color="#E5E5E5">your profile enter some serialized value</font>

990
00:36:17,380 --> 00:36:22,870
in any of the<font color="#E5E5E5"> fields and then append an</font>

991
00:36:20,440 --> 00:36:25,480
actual symbol there to trigger the

992
00:36:22,870 --> 00:36:27,609
vulnerability<font color="#E5E5E5"> and then update your</font>

993
00:36:25,480 --> 00:36:30,160
<font color="#E5E5E5">profile and when you reload the page you</font>

994
00:36:27,610 --> 00:36:31,690
will suddenly see<font color="#E5E5E5"> that it no longer has</font>

995
00:36:30,160 --> 00:36:34,240
the value<font color="#E5E5E5"> that you put in there but it</font>

996
00:36:31,690 --> 00:36:35,770
<font color="#E5E5E5">actually says array now and this is the</font>

997
00:36:34,240 --> 00:36:38,709
vulnerability in<font color="#CCCCCC"> the WordPress core</font>

998
00:36:35,770 --> 00:36:42,130
<font color="#E5E5E5">itself now how could you exploit this</font>

999
00:36:38,710 --> 00:36:44,530
<font color="#E5E5E5">well PHP has some magic methods like</font>

1000
00:36:42,130 --> 00:36:46,150
<font color="#CCCCCC">wakeup and destruct and</font><font color="#E5E5E5"> to string that</font>

1001
00:36:44,530 --> 00:36:48,790
<font color="#CCCCCC">are automatically called when certain</font>

1002
00:36:46,150 --> 00:36:50,200
things<font color="#CCCCCC"> happen to an instance object so</font>

1003
00:36:48,790 --> 00:36:52,390
this means that we can<font color="#E5E5E5"> construct</font><font color="#CCCCCC"> the</font>

1004
00:36:50,200 --> 00:36:54,640
payload that<font color="#CCCCCC"> uncie</font><font color="#E5E5E5"> realises into an</font>

1005
00:36:52,390 --> 00:36:56,230
instance of any<font color="#E5E5E5"> class</font><font color="#CCCCCC"> that we choose so</font>

1006
00:36:54,640 --> 00:36:58,660
this could<font color="#CCCCCC"> be any class in the</font><font color="#E5E5E5"> WordPress</font>

1007
00:36:56,230 --> 00:37:00,780
core or any class<font color="#E5E5E5"> that was added by some</font>

1008
00:36:58,660 --> 00:37:03,549
<font color="#CCCCCC">wordpress plugin that the user is using</font>

1009
00:37:00,780 --> 00:37:05,800
so if one<font color="#E5E5E5"> of these classes has a magic</font>

1010
00:37:03,550 --> 00:37:08,680
methods that run some code we can<font color="#E5E5E5"> now</font>

1011
00:37:05,800 --> 00:37:10,060
trigger<font color="#E5E5E5"> execution of</font><font color="#CCCCCC"> that code</font><font color="#E5E5E5"> just by</font>

1012
00:37:08,680 --> 00:37:13,359
entering our payload into the WordPress

1013
00:37:10,060 --> 00:37:15,100
<font color="#CCCCCC">administration interface</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can see</font>

1014
00:37:13,360 --> 00:37:16,690
where this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> going this is in how in</font>

1015
00:37:15,100 --> 00:37:18,520
some<font color="#CCCCCC"> cases and with some very popular</font>

1016
00:37:16,690 --> 00:37:20,020
<font color="#CCCCCC">plugins that Tom found you could</font>

1017
00:37:18,520 --> 00:37:22,660
actually achieve<font color="#E5E5E5"> remote code execution</font>

1018
00:37:20,020 --> 00:37:24,640
on<font color="#CCCCCC"> a WordPress installation kind of</font>

1019
00:37:22,660 --> 00:37:28,270
scary stuff<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> all happened in</font>

1020
00:37:24,640 --> 00:37:30,190
<font color="#E5E5E5">December 2013 when Tom published his</font>

1021
00:37:28,270 --> 00:37:33,700
<font color="#E5E5E5">blog post about</font><font color="#CCCCCC"> it at that time it was</font>

1022
00:37:30,190 --> 00:37:36,040
<font color="#E5E5E5">fixed already in WordPress</font><font color="#CCCCCC"> but just more</font>

1023
00:37:33,700 --> 00:37:39,910
<font color="#E5E5E5">recently two years later in December</font>

1024
00:37:36,040 --> 00:37:42,279
2015<font color="#E5E5E5"> the</font><font color="#CCCCCC"> almost</font><font color="#E5E5E5"> the same thing happens</font>

1025
00:37:39,910 --> 00:37:44,009
to Joomla<font color="#CCCCCC"> a remote code execution</font>

1026
00:37:42,280 --> 00:37:45,810
vulnerability<font color="#E5E5E5"> was found and</font>

1027
00:37:44,010 --> 00:37:47,400
this time it was not some white<font color="#E5E5E5"> hat</font>

1028
00:37:45,810 --> 00:37:48,930
researcher that discovered this it was

1029
00:37:47,400 --> 00:37:50,760
someone who<font color="#E5E5E5"> was actually using and</font>

1030
00:37:48,930 --> 00:37:54,480
exploiting this<font color="#E5E5E5"> vulnerability in the</font>

1031
00:37:50,760 --> 00:37:56,130
<font color="#E5E5E5">wild so there's a</font><font color="#CCCCCC"> CV for this</font><font color="#E5E5E5"> and it's</font>

1032
00:37:54,480 --> 00:37:59,400
kind of scary<font color="#CCCCCC"> to even read this one</font>

1033
00:37:56,130 --> 00:38:02,220
sentence because it<font color="#E5E5E5"> says arbitrary PHP</font>

1034
00:37:59,400 --> 00:38:04,560
code was<font color="#CCCCCC"> executed via the HTTP</font><font color="#E5E5E5"> user</font>

1035
00:38:02,220 --> 00:38:07,140
agent header<font color="#E5E5E5"> which sounds all kinds of</font>

1036
00:38:04,560 --> 00:38:08,520
terrible<font color="#E5E5E5"> to me</font><font color="#CCCCCC"> but it actually works</font>

1037
00:38:07,140 --> 00:38:10,620
pretty<font color="#CCCCCC"> much the</font><font color="#E5E5E5"> same way as the</font>

1038
00:38:08,520 --> 00:38:13,020
<font color="#CCCCCC">WordPress exploits</font><font color="#E5E5E5"> that Tom came up with</font>

1039
00:38:10,620 --> 00:38:14,339
so if<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> interested</font><font color="#E5E5E5"> in the exact</font>

1040
00:38:13,020 --> 00:38:16,800
code check out the link at the<font color="#CCCCCC"> bottom</font>

1041
00:38:14,340 --> 00:38:18,600
<font color="#E5E5E5">here but essentially</font><font color="#CCCCCC"> you would see</font>

1042
00:38:16,800 --> 00:38:20,700
realize especially crafted objects

1043
00:38:18,600 --> 00:38:22,920
containing some PHP<font color="#E5E5E5"> codes to be executed</font>

1044
00:38:20,700 --> 00:38:25,379
using one of the<font color="#CCCCCC"> built-in joomla classes</font>

1045
00:38:22,920 --> 00:38:27,690
and then you would use<font color="#CCCCCC"> that</font><font color="#E5E5E5"> as the HTTP</font>

1046
00:38:25,380 --> 00:38:29,610
<font color="#E5E5E5">user agent header value with the pile of</font>

1047
00:38:27,690 --> 00:38:31,740
<font color="#E5E5E5">poo as a suffix and that would trigger</font>

1048
00:38:29,610 --> 00:38:34,170
remote code execution just<font color="#CCCCCC"> by</font><font color="#E5E5E5"> making an</font>

1049
00:38:31,740 --> 00:38:38,910
HTTP request<font color="#CCCCCC"> in any</font><font color="#E5E5E5"> joomla installation</font>

1050
00:38:34,170 --> 00:38:41,790
whatsoever<font color="#E5E5E5"> kind of scary stuff so</font>

1051
00:38:38,910 --> 00:38:44,100
another<font color="#E5E5E5"> kind of big problem was a stored</font>

1052
00:38:41,790 --> 00:38:48,330
cross-site scripting vulnerability<font color="#E5E5E5"> found</font>

1053
00:38:44,100 --> 00:38:50,520
in<font color="#CCCCCC"> WordPress so WordPress by default</font>

1054
00:38:48,330 --> 00:38:54,450
<font color="#E5E5E5">allows you to post comments</font><font color="#CCCCCC"> to blog</font>

1055
00:38:50,520 --> 00:38:56,700
posts<font color="#CCCCCC"> and of course they</font><font color="#E5E5E5"> sanitize these</font>

1056
00:38:54,450 --> 00:38:58,680
comments and they try to whitelist

1057
00:38:56,700 --> 00:39:01,680
only certain<font color="#CCCCCC"> HTML elements and certain</font>

1058
00:38:58,680 --> 00:39:03,779
attributes for each<font color="#CCCCCC"> elements to prevent</font>

1059
00:39:01,680 --> 00:39:05,609
cross-site scripting attacks now this

1060
00:39:03,780 --> 00:39:07,260
piece of<font color="#CCCCCC"> HTML here it may look a little</font>

1061
00:39:05,610 --> 00:39:08,910
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> weird but it's actually completely</font>

1062
00:39:07,260 --> 00:39:10,470
<font color="#E5E5E5">legitimate there's nothing wrong with</font>

1063
00:39:08,910 --> 00:39:13,170
<font color="#E5E5E5">this this is</font><font color="#CCCCCC"> not a cross-site scripting</font>

1064
00:39:10,470 --> 00:39:15,120
<font color="#CCCCCC">vector it's just a</font><font color="#E5E5E5"> cue element with a</font>

1065
00:39:13,170 --> 00:39:17,070
site attribute and anything in<font color="#E5E5E5"> between</font>

1066
00:39:15,120 --> 00:39:19,109
<font color="#E5E5E5">the</font><font color="#CCCCCC"> quotes is just part of the attribute</font>

1067
00:39:17,070 --> 00:39:22,890
value<font color="#E5E5E5"> so nothing special is going on</font>

1068
00:39:19,110 --> 00:39:24,780
there this<font color="#E5E5E5"> is perfectly safe HTML now</font>

1069
00:39:22,890 --> 00:39:27,870
what happens if<font color="#E5E5E5"> you post this as a</font>

1070
00:39:24,780 --> 00:39:31,200
comment<font color="#CCCCCC"> on</font><font color="#E5E5E5"> WordPress because</font><font color="#CCCCCC"> they're</font>

1071
00:39:27,870 --> 00:39:34,109
using utf-8<font color="#CCCCCC"> well</font><font color="#E5E5E5"> the astral symbol will</font>

1072
00:39:31,200 --> 00:39:35,580
truncate<font color="#E5E5E5"> the string so after inserting</font>

1073
00:39:34,110 --> 00:39:37,740
<font color="#E5E5E5">this</font><font color="#CCCCCC"> into the database and then reading</font>

1074
00:39:35,580 --> 00:39:40,140
<font color="#E5E5E5">it back out after WordPress applied all</font>

1075
00:39:37,740 --> 00:39:42,750
these<font color="#E5E5E5"> filters into the HTML output you</font>

1076
00:39:40,140 --> 00:39:45,390
get<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> this so our perfectly</font>

1077
00:39:42,750 --> 00:39:52,170
harmless string<font color="#CCCCCC"> has now</font><font color="#E5E5E5"> certainly turned</font>

1078
00:39:45,390 --> 00:39:56,089
into a cross-site scripting vector so

1079
00:39:52,170 --> 00:39:56,090
yeah here's<font color="#E5E5E5"> the food</font><font color="#CCCCCC"> write-up about</font><font color="#E5E5E5"> that</font>

1080
00:39:56,180 --> 00:40:01,160
another<font color="#E5E5E5"> pretty big vulnerability happens</font>

1081
00:39:58,849 --> 00:40:03,079
in three<font color="#E5E5E5"> tech not too long ago</font><font color="#CCCCCC"> three</font>

1082
00:40:01,160 --> 00:40:04,940
<font color="#E5E5E5">tech is owned by Twitter nowadays it's</font>

1083
00:40:03,079 --> 00:40:07,039
available<font color="#E5E5E5"> as a web app but</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can also</font>

1084
00:40:04,940 --> 00:40:08,750
download a browser plugin<font color="#E5E5E5"> for Chrome or</font>

1085
00:40:07,039 --> 00:40:11,059
a native application for Mac<font color="#CCCCCC"> or Windows</font>

1086
00:40:08,750 --> 00:40:14,839
<font color="#CCCCCC">but no matter</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> of these options you</font>

1087
00:40:11,059 --> 00:40:16,970
<font color="#CCCCCC">are going for</font><font color="#E5E5E5"> it always runs in HTML CSS</font>

1088
00:40:14,839 --> 00:40:18,880
and<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> the desktop apps they're</font>

1089
00:40:16,970 --> 00:40:22,819
just a native wrapper around the<font color="#E5E5E5"> webview</font>

1090
00:40:18,880 --> 00:40:24,650
<font color="#CCCCCC">so</font><font color="#E5E5E5"> while ago well almost</font><font color="#CCCCCC"> two years</font><font color="#E5E5E5"> ago</font>

1091
00:40:22,819 --> 00:40:27,079
by now<font color="#E5E5E5"> they announced a new version with</font>

1092
00:40:24,650 --> 00:40:29,299
emoji support and by that I<font color="#E5E5E5"> mean that if</font>

1093
00:40:27,079 --> 00:40:30,799
you're<font color="#E5E5E5"> using an emoji in your tweet they</font>

1094
00:40:29,299 --> 00:40:33,980
will replace it<font color="#E5E5E5"> with an image that</font>

1095
00:40:30,799 --> 00:40:36,440
represents<font color="#E5E5E5"> that emoji and then not too</font>

1096
00:40:33,980 --> 00:40:40,849
long<font color="#E5E5E5"> later they had to send out this</font>

1097
00:40:36,440 --> 00:40:43,039
tweet so what<font color="#CCCCCC"> happens in between these</font>

1098
00:40:40,849 --> 00:40:47,720
two tweets<font color="#E5E5E5"> well here's one</font><font color="#CCCCCC"> thing that</font>

1099
00:40:43,039 --> 00:40:49,339
happens yeah this looks like<font color="#CCCCCC"> a very</font>

1100
00:40:47,720 --> 00:40:51,740
<font color="#CCCCCC">obvious</font><font color="#E5E5E5"> cross-site scripting</font>

1101
00:40:49,339 --> 00:40:54,170
vulnerability I mean<font color="#E5E5E5"> if this piece of</font>

1102
00:40:51,740 --> 00:40:57,379
code<font color="#E5E5E5"> is</font><font color="#CCCCCC"> executed it's just classic</font>

1103
00:40:54,170 --> 00:40:59,510
<font color="#E5E5E5">JavaScript using jQuery library that</font>

1104
00:40:57,380 --> 00:41:01,849
<font color="#E5E5E5">actually clicks the retweet button below</font>

1105
00:40:59,510 --> 00:41:03,260
this tweet if you view this<font color="#CCCCCC"> entry</font><font color="#E5E5E5"> tag</font>

1106
00:41:01,849 --> 00:41:04,940
<font color="#E5E5E5">and the problem was due to a</font>

1107
00:41:03,260 --> 00:41:06,950
vulnerability<font color="#E5E5E5"> in</font><font color="#CCCCCC"> to attack</font><font color="#E5E5E5"> this would</font>

1108
00:41:04,940 --> 00:41:08,630
<font color="#E5E5E5">actually be executed</font><font color="#CCCCCC"> and you might think</font>

1109
00:41:06,950 --> 00:41:10,098
<font color="#CCCCCC">that a</font><font color="#E5E5E5"> little hard at the</font><font color="#CCCCCC"> end of this</font>

1110
00:41:08,630 --> 00:41:11,809
tweet is kind of cute<font color="#E5E5E5"> and it's just</font>

1111
00:41:10,099 --> 00:41:14,480
there<font color="#CCCCCC"> for fun but it's actually what</font>

1112
00:41:11,809 --> 00:41:16,849
made this whole vulnerability work you

1113
00:41:14,480 --> 00:41:18,980
see<font color="#E5E5E5"> three</font><font color="#CCCCCC"> Tech was correctly performing</font>

1114
00:41:16,849 --> 00:41:21,230
HTML escaping before outputting the

1115
00:41:18,980 --> 00:41:22,700
<font color="#E5E5E5">contents of a tweet into the</font><font color="#CCCCCC"> HTML but</font>

1116
00:41:21,230 --> 00:41:24,829
when they implemented<font color="#E5E5E5"> their emoji</font>

1117
00:41:22,700 --> 00:41:26,859
feature which essentially replaces the

1118
00:41:24,829 --> 00:41:29,299
raw<font color="#E5E5E5"> Unicode symbols with image elements</font>

1119
00:41:26,859 --> 00:41:31,578
<font color="#E5E5E5">they added a subtle bug to the code</font>

1120
00:41:29,299 --> 00:41:34,609
which basically unescape the HTML<font color="#CCCCCC"> before</font>

1121
00:41:31,579 --> 00:41:36,559
adding in the image so that's<font color="#E5E5E5"> why the</font>

1122
00:41:34,609 --> 00:41:38,779
<font color="#E5E5E5">little heart is really necessary to make</font>

1123
00:41:36,559 --> 00:41:42,200
this attack work<font color="#E5E5E5"> and needless</font><font color="#CCCCCC"> to say</font>

1124
00:41:38,779 --> 00:41:43,369
this<font color="#E5E5E5"> tweet got plenty of retweets in a</font>

1125
00:41:42,200 --> 00:41:44,899
very<font color="#CCCCCC"> short amount of time it's</font>

1126
00:41:43,369 --> 00:41:47,510
essentially the very first worm on

1127
00:41:44,900 --> 00:41:49,430
Twitter<font color="#CCCCCC"> of course this is relatively</font>

1128
00:41:47,510 --> 00:41:52,369
safe<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean the worst that happens is</font>

1129
00:41:49,430 --> 00:41:53,629
<font color="#CCCCCC">just it retweets a tweet but other</font>

1130
00:41:52,369 --> 00:41:55,460
people were<font color="#CCCCCC"> actually abusing this</font>

1131
00:41:53,630 --> 00:41:57,319
vulnerability<font color="#E5E5E5"> to steal the contents for</font>

1132
00:41:55,460 --> 00:41:59,569
<font color="#CCCCCC">your direct messages and do other</font><font color="#E5E5E5"> stuff</font>

1133
00:41:57,319 --> 00:42:02,450
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so yeah it was kind of a</font>

1134
00:41:59,569 --> 00:42:04,490
terrible bug now<font color="#CCCCCC"> jung-soo published</font><font color="#E5E5E5"> a</font>

1135
00:42:02,450 --> 00:42:05,899
more detailed analysis of<font color="#E5E5E5"> the the</font>

1136
00:42:04,490 --> 00:42:08,450
mistake that<font color="#CCCCCC"> twitter had made an</font><font color="#E5E5E5"> error</font>

1137
00:42:05,900 --> 00:42:10,430
code it's available on her blog

1138
00:42:08,450 --> 00:42:13,009
essentially this is<font color="#CCCCCC"> what the</font><font color="#E5E5E5"> pseudocode</font>

1139
00:42:10,430 --> 00:42:15,140
would look like so if the<font color="#E5E5E5"> treat contains</font>

1140
00:42:13,010 --> 00:42:18,140
emoji<font color="#E5E5E5"> you</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> replace the symbols with</font>

1141
00:42:15,140 --> 00:42:20,629
IMG tags and accidentally undo the HTML

1142
00:42:18,140 --> 00:42:24,170
escaping that<font color="#E5E5E5"> they did before yeah</font>

1143
00:42:20,630 --> 00:42:28,119
honest mistake I guess now another

1144
00:42:24,170 --> 00:42:31,640
example related to<font color="#E5E5E5"> Twitter is this one</font>

1145
00:42:28,119 --> 00:42:34,849
<font color="#CCCCCC">Twitter</font><font color="#E5E5E5"> reflected some user input from</font>

1146
00:42:31,640 --> 00:42:36,920
URL parameters into HTTP headers now to

1147
00:42:34,849 --> 00:42:39,589
prevent<font color="#E5E5E5"> HTTP header injection attacks</font>

1148
00:42:36,920 --> 00:42:41,780
they blacklisted CR and LF characters so

1149
00:42:39,589 --> 00:42:44,869
<font color="#CCCCCC">you cannot input a new line and start a</font>

1150
00:42:41,780 --> 00:42:48,320
<font color="#E5E5E5">new header or start the response body if</font>

1151
00:42:44,869 --> 00:42:50,270
you wanted to now the problem was

1152
00:42:48,320 --> 00:42:52,670
there's<font color="#E5E5E5"> your</font><font color="#CCCCCC"> Aleph filtering was kind of</font>

1153
00:42:50,270 --> 00:42:54,890
<font color="#E5E5E5">broken in a subtle way</font><font color="#CCCCCC"> if you were</font>

1154
00:42:52,670 --> 00:42:57,170
trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use CR or Aleph directly it</font>

1155
00:42:54,890 --> 00:43:00,319
would get stripped<font color="#E5E5E5"> so that didn't work</font>

1156
00:42:57,170 --> 00:43:03,589
<font color="#E5E5E5">it's great job Twitter but there was a</font>

1157
00:43:00,320 --> 00:43:06,320
<font color="#E5E5E5">very straightforward bypass for this see</font>

1158
00:43:03,589 --> 00:43:08,390
if you bypassed<font color="#E5E5E5"> the filter by using a</font>

1159
00:43:06,320 --> 00:43:12,710
<font color="#E5E5E5">Unicode symbol that had CR and a left</font>

1160
00:43:08,390 --> 00:43:15,109
code points in it like Oh a or<font color="#CCCCCC"> OD at the</font>

1161
00:43:12,710 --> 00:43:16,910
end like this<font color="#E5E5E5"> one for example it would</font>

1162
00:43:15,109 --> 00:43:19,369
<font color="#E5E5E5">work it would</font><font color="#CCCCCC"> bypass the filter as long</font>

1163
00:43:16,910 --> 00:43:21,560
as those byte values didn't occur in the

1164
00:43:19,369 --> 00:43:24,349
utf-8 encoding<font color="#E5E5E5"> which is being used</font><font color="#CCCCCC"> for</font>

1165
00:43:21,560 --> 00:43:26,690
the<font color="#E5E5E5"> URL encoded version so here's an</font>

1166
00:43:24,349 --> 00:43:30,020
example<font color="#E5E5E5"> of such a symbol</font><font color="#CCCCCC"> so five six Oh</font>

1167
00:43:26,690 --> 00:43:32,510
a<font color="#E5E5E5"> becomes e</font><font color="#CCCCCC"> five nine eight eight a in</font>

1168
00:43:30,020 --> 00:43:34,220
the URL<font color="#E5E5E5"> which bypasses the filter and</font>

1169
00:43:32,510 --> 00:43:36,349
then when<font color="#CCCCCC"> it's get to the server</font><font color="#E5E5E5"> side</font>

1170
00:43:34,220 --> 00:43:38,029
they try<font color="#E5E5E5"> to turn this into an ASCII</font>

1171
00:43:36,349 --> 00:43:39,650
symbol somehow<font color="#E5E5E5"> I guess</font><font color="#CCCCCC"> because of some</font>

1172
00:43:38,030 --> 00:43:41,930
libraries<font color="#CCCCCC"> that they're using and then</font>

1173
00:43:39,650 --> 00:43:45,050
this<font color="#E5E5E5"> actually becomes the Oh a character</font>

1174
00:43:41,930 --> 00:43:47,270
which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the CR so essentially you can</font>

1175
00:43:45,050 --> 00:43:49,819
<font color="#E5E5E5">then do the same trick and apply this to</font>

1176
00:43:47,270 --> 00:43:52,190
the<font color="#E5E5E5"> LF character and that allows you</font><font color="#CCCCCC"> to</font>

1177
00:43:49,819 --> 00:43:55,759
put this<font color="#CCCCCC"> together into</font><font color="#E5E5E5"> this exploit so</font>

1178
00:43:52,190 --> 00:43:57,710
the blue part is CR<font color="#CCCCCC"> the green part is</font><font color="#E5E5E5"> LF</font>

1179
00:43:55,760 --> 00:44:00,079
and then after that you can<font color="#CCCCCC"> insert your</font>

1180
00:43:57,710 --> 00:44:02,390
own headers or even start the response

1181
00:44:00,079 --> 00:44:04,400
body and take over the HTML response<font color="#E5E5E5"> do</font>

1182
00:44:02,390 --> 00:44:05,930
anything you want<font color="#E5E5E5"> with it and you might</font>

1183
00:44:04,400 --> 00:44:08,450
<font color="#E5E5E5">think okay this is just Twitter it's</font>

1184
00:44:05,930 --> 00:44:10,399
just one<font color="#E5E5E5"> company making</font><font color="#CCCCCC"> this mistake</font><font color="#E5E5E5"> but</font>

1185
00:44:08,450 --> 00:44:13,069
a<font color="#E5E5E5"> couple of months</font><font color="#CCCCCC"> later it was</font><font color="#E5E5E5"> actually</font>

1186
00:44:10,400 --> 00:44:16,099
<font color="#E5E5E5">discovered that this</font><font color="#CCCCCC"> was a</font><font color="#E5E5E5"> problem also</font>

1187
00:44:13,069 --> 00:44:18,020
in no js' itself<font color="#E5E5E5"> they have a very</font>

1188
00:44:16,099 --> 00:44:20,390
similar bug in<font color="#E5E5E5"> their built in HTTP</font>

1189
00:44:18,020 --> 00:44:21,740
response<font color="#CCCCCC"> spreading protection</font><font color="#E5E5E5"> so they</font>

1190
00:44:20,390 --> 00:44:22,098
were doing something<font color="#E5E5E5"> very similar</font><font color="#CCCCCC"> to</font>

1191
00:44:21,740 --> 00:44:26,058
<font color="#E5E5E5">Twitter</font>

1192
00:44:22,099 --> 00:44:30,109
really<font color="#CCCCCC"> they would filter CR or LF</font>

1193
00:44:26,059 --> 00:44:31,849
directly so<font color="#CCCCCC"> that wouldn't work but you</font>

1194
00:44:30,109 --> 00:44:33,710
could use the<font color="#E5E5E5"> same characters or any</font>

1195
00:44:31,849 --> 00:44:36,079
other character with Oh a at the<font color="#E5E5E5"> ends in</font>

1196
00:44:33,710 --> 00:44:40,309
a<font color="#E5E5E5"> code point and it will also turn it</font>

1197
00:44:36,079 --> 00:44:42,140
into an ASCII value somehow<font color="#CCCCCC"> so very easy</font>

1198
00:44:40,309 --> 00:44:45,410
way<font color="#CCCCCC"> to</font><font color="#E5E5E5"> bypass this</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> actually kind of</font>

1199
00:44:42,140 --> 00:44:47,210
the<font color="#CCCCCC"> same issue really and this allows</font>

1200
00:44:45,410 --> 00:44:49,670
you to<font color="#E5E5E5"> insert your</font><font color="#CCCCCC"> own headers redirect</font>

1201
00:44:47,210 --> 00:44:53,900
<font color="#E5E5E5">to other locations</font><font color="#CCCCCC"> or even</font><font color="#E5E5E5"> overwrite the</font>

1202
00:44:49,670 --> 00:44:55,190
body if you wanted to now<font color="#CCCCCC"> I have many</font>

1203
00:44:53,900 --> 00:44:56,930
<font color="#CCCCCC">other examples</font><font color="#E5E5E5"> that I would like to show</font>

1204
00:44:55,190 --> 00:44:59,210
but<font color="#E5E5E5"> I'm out of time</font><font color="#CCCCCC"> here so just</font>

1205
00:44:56,930 --> 00:45:01,190
<font color="#E5E5E5">remember if you keep poking at your</font>

1206
00:44:59,210 --> 00:45:04,279
target for<font color="#E5E5E5"> long enough you</font><font color="#CCCCCC"> might be able</font>

1207
00:45:01,190 --> 00:45:06,229
<font color="#E5E5E5">to turn bucks into exploits and I</font>

1208
00:45:04,279 --> 00:45:08,299
personally<font color="#E5E5E5"> think there's still a lot</font><font color="#CCCCCC"> of</font>

1209
00:45:06,229 --> 00:45:09,950
<font color="#CCCCCC">Unicode based bugs and exploits just</font>

1210
00:45:08,299 --> 00:45:12,499
waiting to be<font color="#E5E5E5"> discovered just</font><font color="#CCCCCC"> based on</font>

1211
00:45:09,950 --> 00:45:15,229
this very<font color="#E5E5E5"> simple information that I just</font>

1212
00:45:12,499 --> 00:45:17,598
<font color="#E5E5E5">shared with you so go forth and spread</font>

1213
00:45:15,229 --> 00:45:22,660
<font color="#E5E5E5">piles of poo and</font><font color="#CCCCCC"> fight</font><font color="#E5E5E5"> all kinds</font><font color="#CCCCCC"> of</font>

1214
00:45:17,599 --> 00:45:22,660
vulnerabilities<font color="#CCCCCC"> thanks</font>

