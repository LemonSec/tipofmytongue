1
00:00:00,000 --> 00:00:05,370
<font color="#E5E5E5">okay well again thanks for the intro I</font>

2
00:00:03,270 --> 00:00:07,740
will talk about the security of browser

3
00:00:05,370 --> 00:00:10,740
extensions today and it's all based on

4
00:00:07,740 --> 00:00:13,679
my master's thesis so if it comes over

5
00:00:10,740 --> 00:00:17,509
as super academic I'm sorry but it's

6
00:00:13,679 --> 00:00:20,100
actually not the whole talk is about

7
00:00:17,510 --> 00:00:22,320
attacks so it's all<font color="#E5E5E5"> from an attackers</font>

8
00:00:20,100 --> 00:00:25,260
perspective so if I say something like

9
00:00:22,320 --> 00:00:27,420
it's it's sad that something is like

10
00:00:25,260 --> 00:00:30,929
this<font color="#E5E5E5"> it's like of course from attackers</font>

11
00:00:27,420 --> 00:00:33,540
perspective and first of all I'll go

12
00:00:30,929 --> 00:00:36,600
through a short motivation tell you why

13
00:00:33,540 --> 00:00:38,940
<font color="#E5E5E5">you should attack browser extensions and</font>

14
00:00:36,600 --> 00:00:41,460
then we'll go to Chrome and specifically

15
00:00:38,940 --> 00:00:44,579
<font color="#E5E5E5">talk about the text on extensions and</font>

16
00:00:41,460 --> 00:00:46,920
move on to<font color="#E5E5E5"> Firefox and then talk about a</font>

17
00:00:44,579 --> 00:00:51,960
text from extensions I'll go into<font color="#CCCCCC"> that</font>

18
00:00:46,920 --> 00:00:55,079
<font color="#E5E5E5">in a minute so let's first ask ourselves</font>

19
00:00:51,960 --> 00:00:57,719
why should we attack extensions well

20
00:00:55,079 --> 00:01:00,000
first of all if you know some basic web

21
00:00:57,719 --> 00:01:02,250
security you can already attack

22
00:01:00,000 --> 00:01:04,949
extensions there is a large skillet

23
00:01:02,250 --> 00:01:08,310
overlap so if you know your<font color="#CCCCCC"> stuff about</font>

24
00:01:04,949 --> 00:01:10,350
XSS you can basically attack almost any

25
00:01:08,310 --> 00:01:11,880
extension out there if you don't know

26
00:01:10,350 --> 00:01:14,759
anything about web security okay you're

27
00:01:11,880 --> 00:01:17,210
out of luck but if you know you just

28
00:01:14,760 --> 00:01:20,189
have<font color="#E5E5E5"> to learn one or two new things so</font>

29
00:01:17,210 --> 00:01:22,408
<font color="#E5E5E5">basically you can already do it second</font>

30
00:01:20,189 --> 00:01:25,020
thing is there is a multiplication and

31
00:01:22,409 --> 00:01:28,229
impact because when you own a website

32
00:01:25,020 --> 00:01:30,119
maybe with XSS you get access<font color="#E5E5E5"> to the</font>

33
00:01:28,229 --> 00:01:33,119
users private data login session

34
00:01:30,119 --> 00:01:36,060
whatever but when<font color="#E5E5E5"> you own a extension</font>

35
00:01:33,119 --> 00:01:38,130
you get<font color="#E5E5E5"> access to all the websites this</font>

36
00:01:36,060 --> 00:01:40,259
extension has actually access to which

37
00:01:38,130 --> 00:01:42,570
could be all on the Internet think about

38
00:01:40,259 --> 00:01:44,520
a block for example at block needs

39
00:01:42,570 --> 00:01:47,250
access to every page in the internet so

40
00:01:44,520 --> 00:01:51,810
it can block the resources so there<font color="#E5E5E5"> you</font>

41
00:01:47,250 --> 00:01:54,360
have it multiple large large impact and

42
00:01:51,810 --> 00:01:56,939
last but not least you have some higher

43
00:01:54,360 --> 00:01:59,280
privileges<font color="#E5E5E5"> you cannot only access every</font>

44
00:01:56,939 --> 00:02:02,100
page potentially in the web but you can

45
00:01:59,280 --> 00:02:04,950
also access<font color="#CCCCCC"> store passwords the history</font>

46
00:02:02,100 --> 00:02:06,479
of the user and in Firefox even some

47
00:02:04,950 --> 00:02:09,569
operating system features you can

48
00:02:06,479 --> 00:02:12,050
execute arbitrary commands on the OS

49
00:02:09,568 --> 00:02:16,910
level so that's quite bad right

50
00:02:12,050 --> 00:02:20,510
and then there is a text from extensions

51
00:02:16,910 --> 00:02:23,390
which might not<font color="#CCCCCC"> be as evident that they</font>

52
00:02:20,510 --> 00:02:26,030
are like something cool to have well

53
00:02:23,390 --> 00:02:29,809
first of all a text from extensions are

54
00:02:26,030 --> 00:02:31,580
a quite natural follow-up<font color="#E5E5E5"> because when</font>

55
00:02:29,810 --> 00:02:33,230
you have<font color="#CCCCCC"> an extent an attack on an</font>

56
00:02:31,580 --> 00:02:35,930
extension you could land in a low

57
00:02:33,230 --> 00:02:38,030
<font color="#CCCCCC">privilege context think about themes for</font>

58
00:02:35,930 --> 00:02:39,740
example maybe<font color="#E5E5E5"> you have an injection into</font>

59
00:02:38,030 --> 00:02:41,690
a theme and a theme cannot do like

60
00:02:39,740 --> 00:02:44,030
everything a normal extension could do

61
00:02:41,690 --> 00:02:45,890
and then you<font color="#E5E5E5"> need another attack and</font>

62
00:02:44,030 --> 00:02:48,770
attack from an extension to go into<font color="#E5E5E5"> a</font>

63
00:02:45,890 --> 00:02:50,750
high privilege context and last but not

64
00:02:48,770 --> 00:02:53,330
least if you do not<font color="#CCCCCC"> find any</font><font color="#E5E5E5"> zero days</font>

65
00:02:50,750 --> 00:02:55,720
no vulnerabilities you can always go the

66
00:02:53,330 --> 00:02:59,090
fishing or social engineering route and

67
00:02:55,720 --> 00:03:01,040
it's it might be easier to<font color="#CCCCCC"> convince</font>

68
00:02:59,090 --> 00:03:03,710
somebody that a language package is

69
00:03:01,040 --> 00:03:07,340
harmless than a normal extension<font color="#E5E5E5"> right</font>

70
00:03:03,710 --> 00:03:10,040
and hint hint a language package in

71
00:03:07,340 --> 00:03:13,990
<font color="#E5E5E5">Firefox is actually basically command</font>

72
00:03:10,040 --> 00:03:17,269
execution on the OS so that's quite bad

73
00:03:13,990 --> 00:03:19,010
so let's start with chrome and all of

74
00:03:17,270 --> 00:03:21,140
this<font color="#E5E5E5"> will assume that</font><font color="#CCCCCC"> our attacker model</font>

75
00:03:19,010 --> 00:03:24,230
is this a website so we<font color="#CCCCCC"> have a malicious</font>

76
00:03:21,140 --> 00:03:26,958
website we lure a user on to it and we

77
00:03:24,230 --> 00:03:29,780
<font color="#E5E5E5">take the user so what do</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> to know</font>

78
00:03:26,959 --> 00:03:32,390
<font color="#CCCCCC">about extensions first of all every</font>

79
00:03:29,780 --> 00:03:35,300
<font color="#CCCCCC">Chrome extension has a central file it's</font>

80
00:03:32,390 --> 00:03:37,850
called the manifesto<font color="#E5E5E5"> Jason and has all</font>

81
00:03:35,300 --> 00:03:41,450
this information but<font color="#CCCCCC"> for us first of all</font>

82
00:03:37,850 --> 00:03:44,390
only this is really important I'll go

83
00:03:41,450 --> 00:03:47,869
through it the from the bottom there is

84
00:03:44,390 --> 00:03:51,140
<font color="#E5E5E5">the permissions key and permissions</font>

85
00:03:47,870 --> 00:03:53,540
tells the browser what an extension

86
00:03:51,140 --> 00:03:56,570
wants to do and what it gets access to

87
00:03:53,540 --> 00:03:58,850
because in<font color="#CCCCCC"> Chrome an extension do does</font>

88
00:03:56,570 --> 00:04:02,359
not get access to all privileged api's

89
00:03:58,850 --> 00:04:05,989
by default they have to be requested<font color="#E5E5E5"> so</font>

90
00:04:02,360 --> 00:04:07,970
in this case active tab the extension

91
00:04:05,989 --> 00:04:10,640
requests access to the active tab of the

92
00:04:07,970 --> 00:04:13,280
<font color="#E5E5E5">user and it cannot access other api's</font>

93
00:04:10,640 --> 00:04:16,190
like for example a history API which is

94
00:04:13,280 --> 00:04:19,130
bad for us<font color="#E5E5E5"> as a techie right because an</font>

95
00:04:16,190 --> 00:04:23,450
extension could like request only<font color="#E5E5E5"> some</font>

96
00:04:19,130 --> 00:04:25,550
very benign api's which we cannot really

97
00:04:23,450 --> 00:04:28,128
use but that's how it<font color="#E5E5E5"> is and</font>

98
00:04:25,550 --> 00:04:30,620
and then in the permissions there are

99
00:04:28,129 --> 00:04:33,500
also<font color="#E5E5E5"> host permissions which actually</font>

100
00:04:30,620 --> 00:04:36,409
declare which URLs the extension has

101
00:04:33,500 --> 00:04:39,259
access to so in this case the extension

102
00:04:36,409 --> 00:04:44,930
says it wants access to all HTTPS URLs

103
00:04:39,259 --> 00:04:47,949
so for example<font color="#CCCCCC"> HTTPS google com the key</font>

104
00:04:44,930 --> 00:04:50,389
above that web accessible resources is

105
00:04:47,949 --> 00:04:53,270
incredibly important for us as attackers

106
00:04:50,389 --> 00:04:57,110
because with it<font color="#E5E5E5"> the extension gives us</font>

107
00:04:53,270 --> 00:05:00,139
access<font color="#E5E5E5"> to its own resources so if the</font>

108
00:04:57,110 --> 00:05:02,840
extension bundled some resources for

109
00:05:00,139 --> 00:05:05,360
example CSS files images it can make

110
00:05:02,840 --> 00:05:07,429
them accessible to the web so we can

111
00:05:05,360 --> 00:05:09,379
<font color="#CCCCCC">include them</font><font color="#E5E5E5"> from a website for example</font>

112
00:05:07,430 --> 00:05:13,879
and we'll set and then we<font color="#E5E5E5"> will see that</font>

113
00:05:09,379 --> 00:05:16,400
<font color="#E5E5E5">in</font><font color="#CCCCCC"> a minute so let's start the most easy</font>

114
00:05:13,879 --> 00:05:18,740
attack we can do in which we should<font color="#E5E5E5"> know</font>

115
00:05:16,400 --> 00:05:20,989
about is fingerprinting and

116
00:05:18,740 --> 00:05:23,780
fingerprinting is basically identifying

117
00:05:20,990 --> 00:05:26,090
the active extensions of a user so we

118
00:05:23,780 --> 00:05:29,750
can<font color="#E5E5E5"> use</font><font color="#CCCCCC"> that to discriminate users you</font>

119
00:05:26,090 --> 00:05:33,380
<font color="#CCCCCC">can tell them apart we can use tracking</font>

120
00:05:29,750 --> 00:05:36,139
so maybe<font color="#E5E5E5"> the amount of extensions user</font>

121
00:05:33,380 --> 00:05:38,270
has is quite unique and we can do

122
00:05:36,139 --> 00:05:41,210
targeted attacks when we have a<font color="#E5E5E5"> very</font>

123
00:05:38,270 --> 00:05:43,729
noisy<font color="#CCCCCC"> attack which opens taps for</font>

124
00:05:41,210 --> 00:05:45,940
example we do not<font color="#E5E5E5"> want to shoot it on</font>

125
00:05:43,729 --> 00:05:48,620
every user we only want to shoot it to

126
00:05:45,940 --> 00:05:51,650
users which actually have the extension

127
00:05:48,620 --> 00:05:54,199
we want<font color="#E5E5E5"> to target right so the most</font>

128
00:05:51,650 --> 00:05:58,698
<font color="#CCCCCC">basic and</font><font color="#E5E5E5"> most easy fingerprinting</font>

129
00:05:54,199 --> 00:06:01,729
attack you can do is this one if an

130
00:05:58,699 --> 00:06:03,860
extension has a web-accessible resource

131
00:06:01,729 --> 00:06:05,389
doesn't matter which one doesn't<font color="#E5E5E5"> matter</font>

132
00:06:03,860 --> 00:06:08,300
which extension doesn't matter which

133
00:06:05,389 --> 00:06:11,539
file type you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> include it in</font>

134
00:06:08,300 --> 00:06:13,819
a script tag and the unload event on<font color="#CCCCCC"> the</font>

135
00:06:11,539 --> 00:06:16,190
script tag will fire if this extension

136
00:06:13,819 --> 00:06:20,150
is available so the extension is

137
00:06:16,190 --> 00:06:22,759
installed<font color="#E5E5E5"> and it will throw an error if</font>

138
00:06:20,150 --> 00:06:24,979
it is<font color="#E5E5E5"> not available and it really</font>

139
00:06:22,759 --> 00:06:28,430
<font color="#E5E5E5">doesn't matter if it's a script or not</font>

140
00:06:24,979 --> 00:06:32,240
it will throw a syntax error but that

141
00:06:28,430 --> 00:06:35,139
doesn't<font color="#CCCCCC"> matter for</font><font color="#E5E5E5"> us so we</font><font color="#CCCCCC"> can watch a</font>

142
00:06:32,240 --> 00:06:35,139
demo here

143
00:06:35,340 --> 00:06:45,090
<font color="#E5E5E5">okay nice I can see it let's do this oh</font>

144
00:06:39,960 --> 00:06:47,400
nice okay as you've noticed my screen<font color="#CCCCCC"> is</font>

145
00:06:45,090 --> 00:06:50,369
a little<font color="#CCCCCC"> bit offset but we'll work</font>

146
00:06:47,400 --> 00:06:53,460
around that so it tells us at block is

147
00:06:50,370 --> 00:06:57,330
active so let's go to Chrome extensions

148
00:06:53,460 --> 00:07:01,710
and verify that so here we<font color="#CCCCCC"> go ad block</font>

149
00:06:57,330 --> 00:07:04,320
is there and it has this ID and the

150
00:07:01,710 --> 00:07:09,479
website tells us it's active<font color="#E5E5E5"> alright so</font>

151
00:07:04,320 --> 00:07:12,719
now if we<font color="#E5E5E5"> disable it the website should</font>

152
00:07:09,479 --> 00:07:15,599
tell us or should give us the normal

153
00:07:12,720 --> 00:07:18,210
website<font color="#E5E5E5"> content why does it do so</font>

154
00:07:15,600 --> 00:07:21,600
because it actually uses just a script

155
00:07:18,210 --> 00:07:23,430
tag and discriminator or finds the

156
00:07:21,600 --> 00:07:25,290
resource of<font color="#E5E5E5"> the extension which is kind</font>

157
00:07:23,430 --> 00:07:27,630
<font color="#E5E5E5">of bad for a blocking extension if you</font>

158
00:07:25,290 --> 00:07:29,700
think about it like fingerprinting and a

159
00:07:27,630 --> 00:07:33,719
blocking extension shouldn't be that

160
00:07:29,700 --> 00:07:41,909
easy in my opinion alright so that's the

161
00:07:33,720 --> 00:07:44,490
<font color="#E5E5E5">most easy attack you can do and I didn't</font>

162
00:07:41,910 --> 00:07:47,850
find it it's a common<font color="#E5E5E5"> Internet knowledge</font>

163
00:07:44,490 --> 00:07:50,250
since eight year or so so it's<font color="#E5E5E5"> hard to</font>

164
00:07:47,850 --> 00:07:53,940
attribute<font color="#E5E5E5"> to a single person but it's</font>

165
00:07:50,250 --> 00:07:56,940
known the problem with this technique is

166
00:07:53,940 --> 00:07:59,099
that the extension actually has to

167
00:07:56,940 --> 00:08:01,410
declare a web-accessible resource as you

168
00:07:59,099 --> 00:08:04,800
see so the extension makes itself will

169
00:08:01,410 --> 00:08:08,490
neural so what<font color="#CCCCCC"> can we do in cases the</font>

170
00:08:04,800 --> 00:08:10,950
extension does not do this and here we

171
00:08:08,490 --> 00:08:14,760
<font color="#E5E5E5">come to side channels which</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will not</font>

172
00:08:10,950 --> 00:08:17,310
cover as deeply as<font color="#CCCCCC"> Teemo did but for</font><font color="#E5E5E5"> us</font>

173
00:08:14,760 --> 00:08:18,930
it's it suffices to know that we use

174
00:08:17,310 --> 00:08:21,840
side channels which differentiate

175
00:08:18,930 --> 00:08:23,970
between active extensions and inactive

176
00:08:21,840 --> 00:08:26,729
extensions and any difference in there

177
00:08:23,970 --> 00:08:28,680
might be abusable for us so<font color="#E5E5E5"> let's see</font>

178
00:08:26,729 --> 00:08:30,780
one and it's one that works in chrome

179
00:08:28,680 --> 00:08:34,740
and<font color="#E5E5E5"> works right now in chrome so that's</font>

180
00:08:30,780 --> 00:08:36,870
kind of bad we have a fingerprint HTML

181
00:08:34,740 --> 00:08:40,529
which we will<font color="#CCCCCC"> use to</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> a new</font><font color="#E5E5E5"> window</font>

182
00:08:36,870 --> 00:08:43,080
<font color="#E5E5E5">and the new window has any of the</font>

183
00:08:40,529 --> 00:08:44,790
extensions resources loaded in it for

184
00:08:43,080 --> 00:08:47,760
<font color="#E5E5E5">example the manifest up Jason that's</font>

185
00:08:44,790 --> 00:08:48,540
always available for<font color="#E5E5E5"> every extension now</font>

186
00:08:47,760 --> 00:08:51,329
if we

187
00:08:48,540 --> 00:08:54,930
redirect the window to a new to a file

188
00:08:51,329 --> 00:08:56,969
on our origin which we can do<font color="#E5E5E5"> because a</font>

189
00:08:54,930 --> 00:08:59,430
newly opened window can be slightly

190
00:08:56,970 --> 00:09:02,550
controlled we can<font color="#E5E5E5"> redirect it to other</font>

191
00:08:59,430 --> 00:09:05,040
URLs we should be able to access<font color="#E5E5E5"> the</font>

192
00:09:02,550 --> 00:09:07,949
file which we have redirected to because

193
00:09:05,040 --> 00:09:10,349
it's in our origin based<font color="#E5E5E5"> on the same</font>

194
00:09:07,949 --> 00:09:12,990
origin policy if you remember it we

195
00:09:10,350 --> 00:09:16,319
should be able to do this actually in

196
00:09:12,990 --> 00:09:18,660
<font color="#CCCCCC">Chrome if the extension exists we're not</font>

197
00:09:16,319 --> 00:09:21,930
able<font color="#E5E5E5"> to do this because the window gets</font>

198
00:09:18,660 --> 00:09:25,709
somehow tainted and we cannot exit is we

199
00:09:21,930 --> 00:09:28,380
can access it anymore so what we what we

200
00:09:25,709 --> 00:09:30,779
can do to differentiate between existing

201
00:09:28,380 --> 00:09:33,660
extensions and non existing extensions

202
00:09:30,779 --> 00:09:35,699
is we<font color="#CCCCCC"> open it you redirect we try to</font>

203
00:09:33,660 --> 00:09:38,130
access it and if the<font color="#CCCCCC"> axis works the</font>

204
00:09:35,699 --> 00:09:41,329
extension is not available if it doesn't

205
00:09:38,130 --> 00:09:49,380
<font color="#CCCCCC">work the extension</font><font color="#E5E5E5"> is available so let's</font>

206
00:09:41,329 --> 00:09:52,979
see that in action this again do this

207
00:09:49,380 --> 00:09:56,069
little<font color="#E5E5E5"> trick here so it tells you check</font>

208
00:09:52,980 --> 00:09:58,980
for HTTPS Everywhere so let's do this it

209
00:09:56,069 --> 00:10:03,689
opens<font color="#E5E5E5"> the URL entails us watch the</font>

210
00:09:58,980 --> 00:10:07,110
previous step so let's do this here is

211
00:10:03,690 --> 00:10:09,329
so it says HTTPS Everywhere is active

212
00:10:07,110 --> 00:10:12,300
all right you look into<font color="#E5E5E5"> the code in a</font>

213
00:10:09,329 --> 00:10:19,739
second let's first deactivate HTTPS

214
00:10:12,300 --> 00:10:22,829
Everywhere and check again like this and

215
00:10:19,740 --> 00:10:25,230
again<font color="#E5E5E5"> we see now now the resource isn't</font>

216
00:10:22,829 --> 00:10:28,050
<font color="#E5E5E5">available anymore and a website tells us</font>

217
00:10:25,230 --> 00:10:31,019
HTTP HTTPS Everywhere is not active

218
00:10:28,050 --> 00:10:35,040
anymore and it's quite hard to see the

219
00:10:31,019 --> 00:10:37,380
code I guess oh this is way better maybe

220
00:10:35,040 --> 00:10:39,839
not way better<font color="#CCCCCC"> okay and it basically</font>

221
00:10:37,380 --> 00:10:42,449
does<font color="#E5E5E5"> this things that we've just seen it</font>

222
00:10:39,839 --> 00:10:44,579
first opens in your<font color="#E5E5E5"> window with the</font>

223
00:10:42,449 --> 00:10:47,880
trick<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> explain in a second and</font>

224
00:10:44,579 --> 00:10:49,380
<font color="#E5E5E5">then redirects to this resource doesn't</font>

225
00:10:47,880 --> 00:10:52,920
matter what<font color="#E5E5E5"> this resource is on our</font>

226
00:10:49,380 --> 00:10:56,670
origin and lastly it accesses the the

227
00:10:52,920 --> 00:10:59,240
tab and if that<font color="#E5E5E5"> works the extension is</font>

228
00:10:56,670 --> 00:10:59,240
not there

229
00:11:04,870 --> 00:11:14,240
there we go it's a bit dark isn't it

230
00:11:07,880 --> 00:11:16,610
<font color="#CCCCCC">okay so this is an arrow based technique</font>

231
00:11:14,240 --> 00:11:19,340
of course because we we work with an

232
00:11:16,610 --> 00:11:21,170
arrow here and there are others you can

233
00:11:19,340 --> 00:11:22,910
also do timing based side channels of

234
00:11:21,170 --> 00:11:24,680
course and there I<font color="#CCCCCC"> think there are</font>

235
00:11:22,910 --> 00:11:26,930
actually some present in<font color="#E5E5E5"> Chrome but I</font>

236
00:11:24,680 --> 00:11:29,479
didn't have<font color="#E5E5E5"> the time to check and it</font>

237
00:11:26,930 --> 00:11:32,150
works for<font color="#E5E5E5"> all extensions you do not have</font>

238
00:11:29,480 --> 00:11:33,920
to declare a web-accessible resource for

239
00:11:32,150 --> 00:11:36,380
it it works<font color="#E5E5E5"> absolutely for every</font>

240
00:11:33,920 --> 00:11:38,270
extension and it relies on two bucks the

241
00:11:36,380 --> 00:11:40,520
tainting behavior I<font color="#E5E5E5"> have already</font>

242
00:11:38,270 --> 00:11:42,590
explained<font color="#E5E5E5"> in the picture and now there</font>

243
00:11:40,520 --> 00:11:45,199
is<font color="#CCCCCC"> one thing I did not tell you yet it's</font>

244
00:11:42,590 --> 00:11:47,660
that browsers actually prevent you from

245
00:11:45,200 --> 00:11:50,420
opening extension URLs for reasons like

246
00:11:47,660 --> 00:11:52,300
this and we need a back to bypass that

247
00:11:50,420 --> 00:11:56,060
and the back isn't that complicated

248
00:11:52,300 --> 00:11:58,670
instead of directly opening an extension

249
00:11:56,060 --> 00:12:00,410
URL we can just<font color="#E5E5E5"> open a redirect and it</font>

250
00:11:58,670 --> 00:12:02,060
redirects to the extension URL and that

251
00:12:00,410 --> 00:12:07,490
works that bypasses the chrome check

252
00:12:02,060 --> 00:12:10,640
nice chrome well done all right let's

253
00:12:07,490 --> 00:12:13,220
get to the master class of extension box

254
00:12:10,640 --> 00:12:14,990
and it's actually cross contact

255
00:12:13,220 --> 00:12:17,090
scripting and all you have to know about

256
00:12:14,990 --> 00:12:20,710
cross contacts scripting is that it's

257
00:12:17,090 --> 00:12:23,240
XSS in an extension so it's basically

258
00:12:20,710 --> 00:12:25,070
arbitrary code execution for us in an

259
00:12:23,240 --> 00:12:27,230
extension context which is privileged

260
00:12:25,070 --> 00:12:30,200
and in<font color="#E5E5E5"> chrome it's it's kind of</font>

261
00:12:27,230 --> 00:12:32,830
complicated and if you want to<font color="#E5E5E5"> know</font>

262
00:12:30,200 --> 00:12:35,330
really<font color="#E5E5E5"> in detail more about the</font>

263
00:12:32,830 --> 00:12:37,760
different contexts you can inject to in

264
00:12:35,330 --> 00:12:40,700
<font color="#CCCCCC">Chrome extensions</font><font color="#E5E5E5"> I'll suggest you watch</font>

265
00:12:37,760 --> 00:12:42,860
the coat<font color="#E5E5E5"> of</font><font color="#CCCCCC"> it star called I'm in your</font>

266
00:12:40,700 --> 00:12:45,680
browser pawning us upon your stuff I

267
00:12:42,860 --> 00:12:48,460
<font color="#CCCCCC">think it's a very good</font><font color="#E5E5E5"> talk and I will</font>

268
00:12:45,680 --> 00:12:51,199
<font color="#CCCCCC">just talk</font><font color="#E5E5E5"> about the hardest to exploit</font>

269
00:12:48,460 --> 00:12:53,480
context which which there is is the

270
00:12:51,200 --> 00:12:56,930
extension pages and why is it hard to

271
00:12:53,480 --> 00:12:59,870
exploit because it's protected by CSP

272
00:12:56,930 --> 00:13:02,390
and I assume not everybody in the room

273
00:12:59,870 --> 00:13:05,060
knows what CSP is it's called content

274
00:13:02,390 --> 00:13:08,270
security policy and it basically tells a

275
00:13:05,060 --> 00:13:10,969
website what it can what it cannot do so

276
00:13:08,270 --> 00:13:13,500
in this case this is the policy that's

277
00:13:10,970 --> 00:13:16,320
imposed on<font color="#E5E5E5"> Chrome extensions</font>

278
00:13:13,500 --> 00:13:19,530
and it tells the extension that it can

279
00:13:16,320 --> 00:13:22,410
only include scripts from its own origin

280
00:13:19,530 --> 00:13:24,870
so from the extension itself and what it

281
00:13:22,410 --> 00:13:27,300
cannot do this is implicitly it cannot

282
00:13:24,870 --> 00:13:29,510
use inline<font color="#CCCCCC"> scripts inline scripts is</font>

283
00:13:27,300 --> 00:13:32,310
when an attacker for example you

284
00:13:29,510 --> 00:13:36,060
<font color="#E5E5E5">directly inject a script for example the</font>

285
00:13:32,310 --> 00:13:38,609
image SRC x on error something if you

286
00:13:36,060 --> 00:13:41,849
know<font color="#CCCCCC"> about XSS this is in line we cannot</font>

287
00:13:38,610 --> 00:13:44,550
use this an eval is also disabled by

288
00:13:41,850 --> 00:13:46,350
default so basically for<font color="#E5E5E5"> us as an</font>

289
00:13:44,550 --> 00:13:49,439
attacker we cannot really do something

290
00:13:46,350 --> 00:13:51,450
<font color="#E5E5E5">harmful it's a mitigation we can inject</font>

291
00:13:49,440 --> 00:13:54,240
but the injection cannot really do

292
00:13:51,450 --> 00:13:56,400
something<font color="#CCCCCC"> and we can work around it</font>

293
00:13:54,240 --> 00:13:58,050
because images and CSS are not

294
00:13:56,400 --> 00:14:00,180
restricted but that's not what we want

295
00:13:58,050 --> 00:14:03,180
what<font color="#E5E5E5"> we actually want is execute</font>

296
00:14:00,180 --> 00:14:08,130
arbitrary code so if only<font color="#CCCCCC"> we had a</font>

297
00:14:03,180 --> 00:14:14,520
general bypass so maybe there's

298
00:14:08,130 --> 00:14:17,490
something<font color="#CCCCCC"> we can do let's see there's a</font>

299
00:14:14,520 --> 00:14:20,160
whole section in the cs PLO shows draft

300
00:14:17,490 --> 00:14:22,020
which is dedicated<font color="#CCCCCC"> to extensions and i</font>

301
00:14:20,160 --> 00:14:24,719
don't expect<font color="#E5E5E5"> you to read it what I</font>

302
00:14:22,020 --> 00:14:27,140
expect you<font color="#E5E5E5"> to read is this and this is</font>

303
00:14:24,720 --> 00:14:29,940
<font color="#E5E5E5">like the short version and it tells you</font>

304
00:14:27,140 --> 00:14:32,069
Bob like no extension URLs blah blah

305
00:14:29,940 --> 00:14:35,400
right<font color="#CCCCCC"> okay what does that mean that</font>

306
00:14:32,070 --> 00:14:37,350
means in this case that if you have a

307
00:14:35,400 --> 00:14:39,089
Content security policy that says

308
00:14:37,350 --> 00:14:41,970
absolutely no scripts are loud

309
00:14:39,089 --> 00:14:44,730
absolutely not<font color="#E5E5E5"> a single script you can</font>

310
00:14:41,970 --> 00:14:47,430
still include a script from an extension

311
00:14:44,730 --> 00:14:49,440
so that is not blocked because<font color="#CCCCCC"> he</font>

312
00:14:47,430 --> 00:14:52,349
<font color="#CCCCCC">species up it's an extension</font><font color="#E5E5E5"> I have to</font>

313
00:14:49,440 --> 00:14:56,900
ignore that by spec<font color="#CCCCCC"> all right so that's</font>

314
00:14:52,350 --> 00:15:00,120
kind of good but still you might not see

315
00:14:56,900 --> 00:15:02,730
how this could exploit this be right

316
00:15:00,120 --> 00:15:04,980
because yeah we can include scripts<font color="#E5E5E5"> from</font>

317
00:15:02,730 --> 00:15:07,560
existing extensions but they do their

318
00:15:04,980 --> 00:15:09,330
own stuff right they do something that's

319
00:15:07,560 --> 00:15:14,339
<font color="#E5E5E5">useful in the extension not for the</font>

320
00:15:09,330 --> 00:15:17,160
attacker well there is a way and i know

321
00:15:14,339 --> 00:15:19,680
<font color="#E5E5E5">that this picture might not make much</font>

322
00:15:17,160 --> 00:15:22,050
sense to you right now but tomorrow at

323
00:15:19,680 --> 00:15:23,939
this time<font color="#E5E5E5"> i think it will after mario</font>

324
00:15:22,050 --> 00:15:25,870
has spoken in his talk and what<font color="#CCCCCC"> i'm</font>

325
00:15:23,940 --> 00:15:28,060
<font color="#E5E5E5">talking about</font><font color="#CCCCCC"> is angularjs</font>

326
00:15:25,870 --> 00:15:32,500
an angularjs is a great framework

327
00:15:28,060 --> 00:15:35,619
because there are actually bypasses

328
00:15:32,500 --> 00:15:37,870
possible with it bypasses of CSP because

329
00:15:35,620 --> 00:15:40,270
the framework is so powerful you can use

330
00:15:37,870 --> 00:15:42,460
it<font color="#E5E5E5"> to bypass CSP I will not go into</font>

331
00:15:40,270 --> 00:15:44,319
detail into these bypasses which you can

332
00:15:42,460 --> 00:15:48,100
all see from Mario's talk I think

333
00:15:44,320 --> 00:15:51,339
tomorrow but it's enough that you know

334
00:15:48,100 --> 00:15:54,250
that extensions which have an old

335
00:15:51,339 --> 00:15:57,940
angularjs version on a web accessible

336
00:15:54,250 --> 00:16:00,760
location nullify any CSP on websites and

337
00:15:57,940 --> 00:16:02,589
extensions absolutely everywhere and old

338
00:16:00,760 --> 00:16:04,300
angularjs versions because we're not

339
00:16:02,589 --> 00:16:06,580
<font color="#E5E5E5">married all</font><font color="#CCCCCC"> right we don't</font><font color="#E5E5E5"> find these</font>

340
00:16:04,300 --> 00:16:09,270
bypasses the new angularjs versions we

341
00:16:06,580 --> 00:16:11,980
just copy them from<font color="#CCCCCC"> Mario's talk and</font>

342
00:16:09,270 --> 00:16:21,449
therefore<font color="#E5E5E5"> old versions so and that's</font>

343
00:16:11,980 --> 00:16:30,970
simply not so let's see a<font color="#CCCCCC"> woman it gets</font>

344
00:16:21,450 --> 00:16:34,959
gets brighter interesting<font color="#CCCCCC"> okay i have</font>

345
00:16:30,970 --> 00:16:39,209
<font color="#CCCCCC">this extension called better</font><font color="#E5E5E5"> history and</font>

346
00:16:34,959 --> 00:16:43,420
it's better indeed because it has<font color="#CCCCCC"> weight</font>

347
00:16:39,209 --> 00:16:46,660
it has an xss vulnerability so it has<font color="#CCCCCC"> a</font>

348
00:16:43,420 --> 00:16:48,760
search so that's kind of the<font color="#CCCCCC"> one thing</font>

349
00:16:46,660 --> 00:16:51,010
where you should always look right so if

350
00:16:48,760 --> 00:16:53,470
you use a be tagged that works so for

351
00:16:51,010 --> 00:16:57,819
<font color="#E5E5E5">example here that's fat</font><font color="#CCCCCC"> all right so</font>

352
00:16:53,470 --> 00:17:02,050
that's good<font color="#E5E5E5"> but as</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> said this CSP</font>

353
00:16:57,820 --> 00:17:05,319
prevents a regular payload I can make

354
00:17:02,050 --> 00:17:08,589
this bigger a<font color="#E5E5E5"> little bit so let's see if</font>

355
00:17:05,319 --> 00:17:12,879
I wrote that correctly yep I think<font color="#CCCCCC"> I did</font>

356
00:17:08,589 --> 00:17:15,909
um and this will not work shoot it it's

357
00:17:12,880 --> 00:17:18,550
<font color="#CCCCCC">in there</font><font color="#E5E5E5"> and it's in the HTML but it</font>

358
00:17:15,910 --> 00:17:22,870
gets<font color="#E5E5E5"> mitigated by CSP because CSP says</font>

359
00:17:18,550 --> 00:17:30,780
<font color="#E5E5E5">are no scripts so let's find a way</font>

360
00:17:22,869 --> 00:17:33,760
around this here is a very very

361
00:17:30,780 --> 00:17:36,010
interesting interestingly designed

362
00:17:33,760 --> 00:17:38,360
website which asks we need to right

363
00:17:36,010 --> 00:17:40,910
click it and open in a new tab

364
00:17:38,360 --> 00:17:45,080
so let's do this first and then look at

365
00:17:40,910 --> 00:17:47,720
it all right like this all of a sudden

366
00:17:45,080 --> 00:17:52,250
whoa alert one pops up all right okay

367
00:17:47,720 --> 00:17:53,900
let's explain this the first thing you

368
00:17:52,250 --> 00:17:57,020
will not see because it's way too small

369
00:17:53,900 --> 00:18:00,650
is that the extension can be triggered

370
00:17:57,020 --> 00:18:03,799
from the URL so its<font color="#E5E5E5"> up in here something</font>

371
00:18:00,650 --> 00:18:06,049
like hashtag<font color="#E5E5E5"> surge and then something so</font>

372
00:18:03,799 --> 00:18:09,379
that's quite<font color="#CCCCCC"> good for us as an attacker</font>

373
00:18:06,049 --> 00:18:14,720
so we can trigger it from outside all

374
00:18:09,380 --> 00:18:20,390
the second thing is now we can inject

375
00:18:14,720 --> 00:18:22,820
our cool payload so its first the the

376
00:18:20,390 --> 00:18:25,820
extension its first the injection which

377
00:18:22,820 --> 00:18:31,129
is search and then SRC chrome extension

378
00:18:25,820 --> 00:18:33,470
something and it first includes an

379
00:18:31,130 --> 00:18:35,630
angularjs version from another extension

380
00:18:33,470 --> 00:18:38,600
the first<font color="#E5E5E5"> I found it's called save list</font>

381
00:18:35,630 --> 00:18:41,080
whatever but it has angularjs on<font color="#E5E5E5"> a web</font>

382
00:18:38,600 --> 00:18:44,600
accessible location which<font color="#CCCCCC"> is good for us</font>

383
00:18:41,080 --> 00:18:46,699
and then it uses angularjs bypass which

384
00:18:44,600 --> 00:18:50,899
I will not talk about that's Marius

385
00:18:46,700 --> 00:18:54,559
domain and I will talk some strange

386
00:18:50,900 --> 00:18:57,230
things about it so and why should we

387
00:18:54,559 --> 00:19:00,530
<font color="#CCCCCC">right-click</font><font color="#E5E5E5"> it well that's another buck</font>

388
00:18:57,230 --> 00:19:02,840
by Cromwell done because if you do

389
00:19:00,530 --> 00:19:04,418
normal click it actually blocks it the

390
00:19:02,840 --> 00:19:07,220
browser blocks it because you know

391
00:19:04,419 --> 00:19:09,350
extension extension URLs are bad so we

392
00:19:07,220 --> 00:19:11,570
<font color="#E5E5E5">should prevent a user from clicking</font>

393
00:19:09,350 --> 00:19:14,750
extension your<font color="#E5E5E5"> Alvin's right but as</font>

394
00:19:11,570 --> 00:19:17,689
you've seen right click and open in a

395
00:19:14,750 --> 00:19:19,970
new tab works quite well so the check is

396
00:19:17,690 --> 00:19:22,940
just for a normal click and now guess

397
00:19:19,970 --> 00:19:25,250
what what<font color="#E5E5E5"> happens if I ctrl-click you</font>

398
00:19:22,940 --> 00:19:27,940
know that ctrl-click is basically open a

399
00:19:25,250 --> 00:19:32,000
new tab guess what<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> work</font>

400
00:19:27,940 --> 00:19:34,580
because I don't<font color="#E5E5E5"> know who knows like this</font>

401
00:19:32,000 --> 00:19:36,169
and it doesn't work who knows but<font color="#CCCCCC"> right</font>

402
00:19:34,580 --> 00:19:41,360
click and open a new tab work so that's

403
00:19:36,169 --> 00:19:44,510
fine well done crew I think I'll<font color="#E5E5E5"> leave</font>

404
00:19:41,360 --> 00:19:50,290
it like this because it's a little bit

405
00:19:44,510 --> 00:19:53,629
<font color="#E5E5E5">brighter okay did we</font><font color="#CCCCCC"> go</font>

406
00:19:50,290 --> 00:19:56,840
so we have that and that that's what

407
00:19:53,630 --> 00:19:59,300
we've seen it had<font color="#CCCCCC"> XX CS vulnerability</font>

408
00:19:56,840 --> 00:20:02,840
now the people<font color="#E5E5E5"> that know about these</font>

409
00:19:59,300 --> 00:20:05,510
angularjs bypasses know that the bypass

410
00:20:02,840 --> 00:20:08,090
that i have used actually requires eval

411
00:20:05,510 --> 00:20:11,660
to be available and I've just<font color="#CCCCCC"> told you</font>

412
00:20:08,090 --> 00:20:14,510
<font color="#E5E5E5">that</font><font color="#CCCCCC"> CS be disabled by default but the</font>

413
00:20:11,660 --> 00:20:17,000
extension actually re enables evil but

414
00:20:14,510 --> 00:20:19,100
stay alert no II<font color="#E5E5E5"> valve wound in the</font>

415
00:20:17,000 --> 00:20:21,980
extension itself it's just that<font color="#CCCCCC"> it</font>

416
00:20:19,100 --> 00:20:25,699
allows<font color="#CCCCCC"> us to use</font><font color="#E5E5E5"> more bypasses so that</font>

417
00:20:21,980 --> 00:20:29,270
worked so let's go into<font color="#CCCCCC"> Firefox and now</font>

418
00:20:25,700 --> 00:20:34,490
to attacks from extensions and let's

419
00:20:29,270 --> 00:20:37,070
<font color="#E5E5E5">start a bit with theory in Firefox we</font>

420
00:20:34,490 --> 00:20:39,350
have a huge number of different

421
00:20:37,070 --> 00:20:42,500
extension types for<font color="#E5E5E5"> example complete</font>

422
00:20:39,350 --> 00:20:44,780
themes low capex whatever and the group

423
00:20:42,500 --> 00:20:46,400
<font color="#CCCCCC">that I call regular extensions I've</font>

424
00:20:44,780 --> 00:20:48,500
grouped them together because they have

425
00:20:46,400 --> 00:20:50,840
an<font color="#E5E5E5"> interesting property they're all</font>

426
00:20:48,500 --> 00:20:53,570
signed matsuda started signing

427
00:20:50,840 --> 00:20:57,199
extensions some months ago maybe half a

428
00:20:53,570 --> 00:21:00,770
year ago then it has impact on us as

429
00:20:57,200 --> 00:21:03,110
attackers because we now we have to

430
00:21:00,770 --> 00:21:05,240
upload all these extensions that need to

431
00:21:03,110 --> 00:21:06,860
be signed to<font color="#CCCCCC"> Mozilla they can review</font>

432
00:21:05,240 --> 00:21:09,530
them so if you<font color="#E5E5E5"> want to do something</font>

433
00:21:06,860 --> 00:21:12,860
malicious we cannot because the browser

434
00:21:09,530 --> 00:21:16,730
<font color="#E5E5E5">will just reject our</font><font color="#CCCCCC"> atoms so maybe we</font>

435
00:21:12,860 --> 00:21:20,629
have to evade to the other types of

436
00:21:16,730 --> 00:21:23,420
extensions which are not signed yet so

437
00:21:20,630 --> 00:21:26,660
<font color="#E5E5E5">let's try that but first we have to and</font>

438
00:21:23,420 --> 00:21:29,390
one basic thing about<font color="#E5E5E5"> Firefox extensions</font>

439
00:21:26,660 --> 00:21:31,790
and this is that the privileges are

440
00:21:29,390 --> 00:21:34,760
bound to the URLs inside of the browser

441
00:21:31,790 --> 00:21:37,639
and basically everything<font color="#CCCCCC"> that runs on</font>

442
00:21:34,760 --> 00:21:39,379
the<font color="#E5E5E5"> chrome something content is</font>

443
00:21:37,640 --> 00:21:43,040
privileged and<font color="#E5E5E5"> it can access all the</font>

444
00:21:39,380 --> 00:21:44,960
api's it is not like<font color="#CCCCCC"> as financed as</font>

445
00:21:43,040 --> 00:21:47,480
chromis it can directly access

446
00:21:44,960 --> 00:21:49,760
everything and everything that runs on

447
00:21:47,480 --> 00:21:51,530
<font color="#E5E5E5">the skin is slightly privileged I'll not</font>

448
00:21:49,760 --> 00:21:53,990
go into detail here but it cannot

449
00:21:51,530 --> 00:21:57,020
directly access to privileged<font color="#CCCCCC"> AP ice so</font>

450
00:21:53,990 --> 00:21:58,910
basically<font color="#CCCCCC"> things cannot directly exist</font>

451
00:21:57,020 --> 00:22:01,520
privileged api's can do some other stuff

452
00:21:58,910 --> 00:22:04,090
but it's not interesting for us now and

453
00:22:01,520 --> 00:22:08,810
resource for example is not

454
00:22:04,090 --> 00:22:11,360
so let's see extensions or legacy

455
00:22:08,810 --> 00:22:13,700
extensions in<font color="#E5E5E5"> particular use this one</font>

456
00:22:11,360 --> 00:22:17,209
file which declares which URLs it has

457
00:22:13,700 --> 00:22:20,090
and it's called chrome manifest and the

458
00:22:17,210 --> 00:22:23,540
regular extensions can actually reduce

459
00:22:20,090 --> 00:22:27,050
that all of these URLs so for example

460
00:22:23,540 --> 00:22:29,480
epilogue<font color="#CCCCCC"> clues can reduce the content</font>

461
00:22:27,050 --> 00:22:31,909
<font color="#E5E5E5">URLs lokale URL skin URLs whatever</font>

462
00:22:29,480 --> 00:22:34,430
everything because it's privileged it

463
00:22:31,910 --> 00:22:36,980
can do<font color="#CCCCCC"> everything now teams are</font>

464
00:22:34,430 --> 00:22:39,740
restricted to skin origins they can only

465
00:22:36,980 --> 00:22:42,230
reduce the skin packages which are as

466
00:22:39,740 --> 00:22:45,350
we've just seen only slightly privileged

467
00:22:42,230 --> 00:22:47,840
and locale packs can of course you're

468
00:22:45,350 --> 00:22:50,840
just a local origins and for some reason

469
00:22:47,840 --> 00:22:53,780
also skin and some other stuff<font color="#E5E5E5"> which</font><font color="#CCCCCC"> I</font>

470
00:22:50,840 --> 00:22:56,330
<font color="#CCCCCC">will get into</font><font color="#E5E5E5"> in a second and let's use</font>

471
00:22:53,780 --> 00:22:59,060
this knowledge to create an attack but

472
00:22:56,330 --> 00:23:00,350
let's first know what we can do if we

473
00:22:59,060 --> 00:23:02,960
have it like we have to know the

474
00:23:00,350 --> 00:23:05,899
consequences right so the consequences

475
00:23:02,960 --> 00:23:08,330
<font color="#E5E5E5">have been found out by mallory and on</font>

476
00:23:05,900 --> 00:23:10,280
<font color="#E5E5E5">twitter and it's basically really bad</font>

477
00:23:08,330 --> 00:23:12,560
it's<font color="#E5E5E5"> really really bad</font><font color="#CCCCCC"> privileged code</font>

478
00:23:10,280 --> 00:23:16,550
can read files restore password execute

479
00:23:12,560 --> 00:23:18,110
iOS commands without any exception so we

480
00:23:16,550 --> 00:23:20,510
want<font color="#CCCCCC"> x we actually want that and</font>

481
00:23:18,110 --> 00:23:23,120
basically<font color="#E5E5E5"> what the mozilla documentation</font>

482
00:23:20,510 --> 00:23:25,340
tells you is only regular extensions can

483
00:23:23,120 --> 00:23:28,550
do this the class that's signed right

484
00:23:25,340 --> 00:23:30,830
now or can it well there is an attack

485
00:23:28,550 --> 00:23:32,750
which is easy to explain its privilege

486
00:23:30,830 --> 00:23:35,030
escalation we get from less privileged

487
00:23:32,750 --> 00:23:37,970
context<font color="#E5E5E5"> to privileged context let's try</font>

488
00:23:35,030 --> 00:23:42,530
<font color="#E5E5E5">that and there is something interesting</font>

489
00:23:37,970 --> 00:23:45,680
in low capex we remember that all the

490
00:23:42,530 --> 00:23:48,320
privilege is bound to the URL right so

491
00:23:45,680 --> 00:23:50,660
actually<font color="#E5E5E5"> there is a mechanism to</font>

492
00:23:48,320 --> 00:23:54,070
overwrite your else in their manifest

493
00:23:50,660 --> 00:23:57,800
file so all you<font color="#CCCCCC"> have to do is basically</font>

494
00:23:54,070 --> 00:24:00,439
register any unprivileged origin and

495
00:23:57,800 --> 00:24:03,169
then override a privileged URL with it

496
00:24:00,440 --> 00:24:05,840
and that's it now you're executing under

497
00:24:03,170 --> 00:24:09,190
privileged URL you have full privileges

498
00:24:05,840 --> 00:24:12,770
that's<font color="#E5E5E5"> it's simple</font><font color="#CCCCCC"> it ask that and</font>

499
00:24:09,190 --> 00:24:15,080
basically that means that low capex can

500
00:24:12,770 --> 00:24:17,299
absolutely escalate privileges so

501
00:24:15,080 --> 00:24:20,239
they're not just language<font color="#CCCCCC"> packet</font>

502
00:24:17,299 --> 00:24:23,259
which are which they are marketed ed so

503
00:24:20,239 --> 00:24:25,879
your browser UI shows them as languages

504
00:24:23,259 --> 00:24:27,919
they can<font color="#E5E5E5"> actually do anything and that</font>

505
00:24:25,879 --> 00:24:33,168
means<font color="#E5E5E5"> that</font><font color="#CCCCCC"> mattila started to sign them</font>

506
00:24:27,919 --> 00:24:36,259
now<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> I'm sure</font><font color="#E5E5E5"> I'm not the one</font>

507
00:24:33,169 --> 00:24:37,940
that<font color="#E5E5E5"> that made them do it do it but I</font>

508
00:24:36,259 --> 00:24:39,860
reported the<font color="#CCCCCC"> buck and they were like</font>

509
00:24:37,940 --> 00:24:42,739
that's no problem we signed in and

510
00:24:39,860 --> 00:24:47,139
somebody<font color="#E5E5E5"> else was answering no we don't</font>

511
00:24:42,739 --> 00:24:50,989
yet so they were kind of<font color="#E5E5E5"> you know</font>

512
00:24:47,139 --> 00:24:54,469
whatever<font color="#E5E5E5"> and there's at least two</font>

513
00:24:50,989 --> 00:24:56,330
variants to do it so<font color="#E5E5E5"> locale packs bad</font>

514
00:24:54,470 --> 00:24:59,419
bad so the last thing<font color="#E5E5E5"> I want to talk</font>

515
00:24:56,330 --> 00:25:02,090
about is<font color="#CCCCCC"> how the extension system</font>

516
00:24:59,419 --> 00:25:04,999
actually affects browser bucks because

517
00:25:02,090 --> 00:25:07,129
if you find a browser bug it might<font color="#CCCCCC"> not</font>

518
00:25:04,999 --> 00:25:09,769
enable you to do a remote code execution

519
00:25:07,129 --> 00:25:12,350
right away you might<font color="#E5E5E5"> have to do some</font>

520
00:25:09,769 --> 00:25:15,169
some tricks and actually the extension

521
00:25:12,350 --> 00:25:17,959
system can be very helpful<font color="#E5E5E5"> for that so</font>

522
00:25:15,169 --> 00:25:21,440
let's see a<font color="#E5E5E5"> bug that i found this is</font>

523
00:25:17,960 --> 00:25:23,779
again CSP so you know this<font color="#E5E5E5"> already but</font>

524
00:25:21,440 --> 00:25:25,850
one thing<font color="#CCCCCC"> i have not told you about yet</font>

525
00:25:23,779 --> 00:25:29,539
is the report<font color="#E5E5E5"> your I functionality and</font>

526
00:25:25,850 --> 00:25:32,480
it's basically<font color="#E5E5E5"> if your website violates</font>

527
00:25:29,539 --> 00:25:34,580
this policy you<font color="#E5E5E5"> can tell the browser to</font>

528
00:25:32,480 --> 00:25:37,100
send your report<font color="#E5E5E5"> and this report will</font>

529
00:25:34,580 --> 00:25:39,499
have like the violation in it now you

530
00:25:37,100 --> 00:25:43,039
see it's an HTTP URL you can<font color="#E5E5E5"> send it to</font>

531
00:25:39,499 --> 00:25:47,509
HTTP URLs and well what happens if you

532
00:25:43,039 --> 00:25:50,239
use a file URL or a chrome URL well I

533
00:25:47,509 --> 00:25:52,190
really didn't think that something would

534
00:25:50,239 --> 00:25:55,309
happen<font color="#E5E5E5"> but basically what the browser</font>

535
00:25:52,190 --> 00:26:00,470
did is create new files on the file

536
00:25:55,309 --> 00:26:05,690
system for some reason or overrode files

537
00:26:00,470 --> 00:26:10,059
even<font color="#CCCCCC"> so there was quite bad and let's</font>

538
00:26:05,690 --> 00:26:10,059
see we have a demo

539
00:26:21,080 --> 00:26:23,740
what

540
00:26:27,130 --> 00:26:34,060
ok this is still chrome so just mark but

541
00:26:31,140 --> 00:26:37,750
let's see<font color="#CCCCCC"> Firefox so first of all let's</font>

542
00:26:34,060 --> 00:26:40,120
go into temp this will be kind of height

543
00:26:37,750 --> 00:26:42,670
with this setup now where you don't see

544
00:26:40,120 --> 00:26:45,250
anything but I think you see in temp

545
00:26:42,670 --> 00:26:49,660
there is absolutely nothing so now let's

546
00:26:45,250 --> 00:26:53,610
enter the evil URL which tells us<font color="#CCCCCC"> Road</font>

547
00:26:49,660 --> 00:26:57,640
file to Tim whatever and we see there is

548
00:26:53,610 --> 00:26:59,379
CSP report cool so<font color="#CCCCCC"> let's see and there</font>

549
00:26:57,640 --> 00:27:07,510
is a report in there firefox created

550
00:26:59,380 --> 00:27:09,400
five for us nice thank you firefox<font color="#CCCCCC"> ok so</font>

551
00:27:07,510 --> 00:27:11,650
what can<font color="#CCCCCC"> we do with it</font><font color="#E5E5E5"> like overwriting</font>

552
00:27:09,400 --> 00:27:15,280
files is bad enough right we can just

553
00:27:11,650 --> 00:27:17,740
some files which we know and yeah but

554
00:27:15,280 --> 00:27:19,480
<font color="#CCCCCC">this is not the end</font><font color="#E5E5E5"> of the story first</font>

555
00:27:17,740 --> 00:27:22,150
thing we can do with it is disabled

556
00:27:19,480 --> 00:27:24,610
extensions because because<font color="#E5E5E5"> mozilla has</font>

557
00:27:22,150 --> 00:27:26,170
enabled signing we can now disabled

558
00:27:24,610 --> 00:27:28,899
extensions because we can write<font color="#E5E5E5"> to</font>

559
00:27:26,170 --> 00:27:31,030
Chrome URLs now any extension which we

560
00:27:28,900 --> 00:27:33,790
write a file to will have an invalid

561
00:27:31,030 --> 00:27:36,670
signature and that will disable it so

562
00:27:33,790 --> 00:27:38,680
basically we can disable any extension

563
00:27:36,670 --> 00:27:43,270
of the user some security extension for

564
00:27:38,680 --> 00:27:45,070
example no script but this is still not

565
00:27:43,270 --> 00:27:47,020
the<font color="#CCCCCC"> best thing</font><font color="#E5E5E5"> we can do the best thing</font>

566
00:27:45,070 --> 00:27:50,889
we can do is actually<font color="#E5E5E5"> hijack extensions</font>

567
00:27:47,020 --> 00:27:52,810
but only in some cases sadly so if the

568
00:27:50,890 --> 00:27:56,080
signing is disabled if you<font color="#E5E5E5"> use a house</font>

569
00:27:52,810 --> 00:27:59,889
and<font color="#CCCCCC"> even older Firefox maybe Firefox 42</font>

570
00:27:56,080 --> 00:28:02,080
so or has<font color="#E5E5E5"> it disabled by himself because</font>

571
00:27:59,890 --> 00:28:04,810
he's a developer or so we can actually

572
00:28:02,080 --> 00:28:06,909
get<font color="#E5E5E5"> codex</font><font color="#CCCCCC"> AG and privilege</font><font color="#E5E5E5"> Coast exact</font>

573
00:28:04,810 --> 00:28:10,350
with it and now<font color="#CCCCCC"> for that we actually</font>

574
00:28:06,910 --> 00:28:12,550
<font color="#CCCCCC">have to look at</font><font color="#E5E5E5"> the report format itself</font>

575
00:28:10,350 --> 00:28:15,250
this is basically the<font color="#E5E5E5"> code that I'm</font>

576
00:28:12,550 --> 00:28:18,820
<font color="#E5E5E5">using it's telling</font><font color="#CCCCCC"> the browser to not</font>

577
00:28:15,250 --> 00:28:21,970
allow any script and uses a report URL

578
00:28:18,820 --> 00:28:24,730
of a file and then it can have inside of

579
00:28:21,970 --> 00:28:27,250
the script X some other script stuff and

580
00:28:24,730 --> 00:28:30,340
you'll see that<font color="#CCCCCC"> it gets like written to</font>

581
00:28:27,250 --> 00:28:33,100
the<font color="#CCCCCC"> J is Jason report like that like</font>

582
00:28:30,340 --> 00:28:37,689
without any escaping or so so that means

583
00:28:33,100 --> 00:28:40,269
if you open the Jason report as HTML the

584
00:28:37,690 --> 00:28:42,549
alert box will pop but that's still<font color="#CCCCCC"> not</font>

585
00:28:40,269 --> 00:28:45,159
enough because we only have 40 choice in

586
00:28:42,549 --> 00:28:47,080
this in this inside<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> script</font><font color="#CCCCCC"> tags</font>

587
00:28:45,159 --> 00:28:49,330
so that's not<font color="#E5E5E5"> enough to do something</font>

588
00:28:47,080 --> 00:28:53,199
<font color="#CCCCCC">really evil so we have to do something</font>

589
00:28:49,330 --> 00:28:55,629
better so now we also can use the nuns

590
00:28:53,200 --> 00:28:58,469
in there to have some<font color="#CCCCCC"> more charts and</font>

591
00:28:55,629 --> 00:29:00,998
with that<font color="#E5E5E5"> we can create a payload that</font>

592
00:28:58,469 --> 00:29:04,299
includes an external script from

593
00:29:00,999 --> 00:29:06,219
anywhere it just has to<font color="#CCCCCC"> be under 40 jars</font>

594
00:29:04,299 --> 00:29:07,509
and then the script gets<font color="#E5E5E5"> closed</font>

595
00:29:06,219 --> 00:29:09,519
somewhere behind it but you know

596
00:29:07,509 --> 00:29:12,309
browsers are very lacks and parsing they

597
00:29:09,519 --> 00:29:21,369
say yeah that looks about right that

598
00:29:12,309 --> 00:29:23,379
<font color="#E5E5E5">looks</font><font color="#CCCCCC"> good so</font><font color="#E5E5E5"> let's see that first open</font>

599
00:29:21,369 --> 00:29:29,619
it here well so<font color="#CCCCCC"> I won't</font><font color="#E5E5E5"> be able to copy</font>

600
00:29:23,379 --> 00:29:33,039
it<font color="#E5E5E5"> okay there is this there is this</font>

601
00:29:29,619 --> 00:29:41,708
extension it's called what where is<font color="#CCCCCC"> it</font>

602
00:29:33,039 --> 00:29:44,649
there is oh it<font color="#E5E5E5"> doesn't open no oh there</font>

603
00:29:41,709 --> 00:29:47,259
<font color="#E5E5E5">is nice okay and it tells you it will</font>

604
00:29:44,649 --> 00:29:49,268
tell you<font color="#CCCCCC"> how evil a website is so I</font>

605
00:29:47,259 --> 00:29:51,879
thought it<font color="#E5E5E5"> would be funny to exploit it</font>

606
00:29:49,269 --> 00:29:54,779
so what it does<font color="#CCCCCC"> is actually it displays</font>

607
00:29:51,879 --> 00:29:57,609
the<font color="#CCCCCC"> HTML page in your browser UI so</font>

608
00:29:54,779 --> 00:30:00,039
let's first watch the payload which we

609
00:29:57,609 --> 00:30:02,228
will use because that's kind of

610
00:30:00,039 --> 00:30:05,879
interesting before<font color="#CCCCCC"> we use it</font><font color="#E5E5E5"> so you see</font>

611
00:30:02,229 --> 00:30:05,879
<font color="#CCCCCC">that i dont trick you or so</font>

612
00:30:13,690 --> 00:30:18,940
so that's<font color="#E5E5E5"> the payload we cannot pop an</font>

613
00:30:16,419 --> 00:30:20,980
alert box because it's an in hidden

614
00:30:18,940 --> 00:30:23,409
Firefox window and that cannot open

615
00:30:20,980 --> 00:30:25,450
alert boxes but<font color="#E5E5E5"> what we can do is write</font>

616
00:30:23,409 --> 00:30:27,990
another file for example to the<font color="#CCCCCC"> disk</font>

617
00:30:25,450 --> 00:30:30,100
<font color="#E5E5E5">only that you see that privileged</font>

618
00:30:27,990 --> 00:30:32,169
privileged code execution is actually

619
00:30:30,100 --> 00:30:34,269
possible and this file won't have this

620
00:30:32,169 --> 00:30:36,820
whole report thing in it there will be

621
00:30:34,269 --> 00:30:39,669
just something super evil in there ok

622
00:30:36,820 --> 00:30:41,500
let's try which could also be a binary

623
00:30:39,669 --> 00:30:43,929
and you can execute it<font color="#E5E5E5"> in the next step</font>

624
00:30:41,500 --> 00:30:50,769
for example oh that would<font color="#CCCCCC"> be a good</font><font color="#E5E5E5"> pork</font>

625
00:30:43,929 --> 00:30:53,789
yeah whatever let's do this first we

626
00:30:50,769 --> 00:30:58,210
have<font color="#CCCCCC"> the URL I hope I</font><font color="#E5E5E5"> still have</font><font color="#CCCCCC"> it</font>

627
00:30:53,789 --> 00:31:01,990
saved we go<font color="#E5E5E5"> on this thing it tells us</font>

628
00:30:58,210 --> 00:31:03,549
done<font color="#CCCCCC"> alright and now at one thing</font><font color="#E5E5E5"> you</font>

629
00:31:01,990 --> 00:31:06,220
have to know is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> Firefox actually</font>

630
00:31:03,549 --> 00:31:08,289
caches the UI so this hasn't changed<font color="#CCCCCC"> in</font>

631
00:31:06,220 --> 00:31:10,120
any way so we have to restart browser

632
00:31:08,289 --> 00:31:15,100
which will be kind of interesting with

633
00:31:10,120 --> 00:31:18,008
this setup let's<font color="#E5E5E5"> try ok so i've</font>

634
00:31:15,100 --> 00:31:19,928
restarted the browser here is let's see

635
00:31:18,009 --> 00:31:22,149
<font color="#E5E5E5">and temp if you have written the file</font>

636
00:31:19,929 --> 00:31:23,980
and yeah there is exploit works and

637
00:31:22,149 --> 00:31:26,139
there is<font color="#CCCCCC"> something super evil in there</font>

638
00:31:23,980 --> 00:31:28,779
so it's<font color="#E5E5E5"> not the whole report our</font>

639
00:31:26,139 --> 00:31:31,508
privilege coach has written it and<font color="#E5E5E5"> the</font>

640
00:31:28,779 --> 00:31:33,330
user can now see this enhanced version

641
00:31:31,509 --> 00:31:36,429
of this add-on which looked like this

642
00:31:33,330 --> 00:31:45,549
you can actually see that the HTML got

643
00:31:36,429 --> 00:31:49,690
interpreted and executed so good yes<font color="#E5E5E5"> ok</font>

644
00:31:45,549 --> 00:31:52,210
let's get to a conclusion the main part

645
00:31:49,690 --> 00:31:54,370
is<font color="#E5E5E5"> that many of these attacks are kind</font>

646
00:31:52,210 --> 00:31:57,039
of old people i found them five years

647
00:31:54,370 --> 00:32:00,008
ago six years ago whatever<font color="#E5E5E5"> but browser</font>

648
00:31:57,039 --> 00:32:02,620
started to mitigate them and the point

649
00:32:00,009 --> 00:32:04,899
is nowadays you require browser box to

650
00:32:02,620 --> 00:32:08,469
re-enable them and one browser buck is

651
00:32:04,899 --> 00:32:10,750
for example<font color="#CCCCCC"> this opening URL a Chrome</font>

652
00:32:08,470 --> 00:32:13,059
extension URL that's<font color="#E5E5E5"> one of the master</font>

653
00:32:10,750 --> 00:32:15,460
box with those bucks you can do a lot<font color="#E5E5E5"> of</font>

654
00:32:13,059 --> 00:32:18,850
<font color="#E5E5E5">things trigger many bugs and you</font>

655
00:32:15,460 --> 00:32:20,860
actually require them nowadays another

656
00:32:18,850 --> 00:32:23,139
thing<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> absolutely see in this</font>

657
00:32:20,860 --> 00:32:25,658
thesis is that extensions and CSP don't

658
00:32:23,139 --> 00:32:26,439
go well together and if there's one

659
00:32:25,659 --> 00:32:28,629
thing you

660
00:32:26,440 --> 00:32:31,840
member from this talk it should<font color="#CCCCCC"> be that</font>

661
00:32:28,629 --> 00:32:34,719
<font color="#CCCCCC">chrome</font><font color="#E5E5E5"> or extension URLs also in</font><font color="#CCCCCC"> Firefox</font>

662
00:32:31,840 --> 00:32:37,259
always exempt from the CSP so there<font color="#E5E5E5"> is</font>

663
00:32:34,720 --> 00:32:40,000
<font color="#CCCCCC">your free bypass in most of the cases</font>

664
00:32:37,259 --> 00:32:42,070
and there<font color="#E5E5E5"> is of course still lots of</font>

665
00:32:40,000 --> 00:32:44,080
quirky behavior in browsers which I

666
00:32:42,070 --> 00:32:46,990
haven't talked<font color="#CCCCCC"> about and I will release</font>

667
00:32:44,080 --> 00:32:50,649
test<font color="#CCCCCC"> feud which you can use to</font><font color="#E5E5E5"> look into</font>

668
00:32:46,990 --> 00:32:53,639
other issues I hope and thank you for

669
00:32:50,649 --> 00:32:53,639
your attention<font color="#E5E5E5"> actually</font>

