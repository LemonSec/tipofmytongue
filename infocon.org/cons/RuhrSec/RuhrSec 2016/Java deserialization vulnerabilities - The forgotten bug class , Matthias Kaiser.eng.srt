1
00:00:00,060 --> 00:00:04,109
<font color="#E5E5E5">again thanks a lot for being here so my</font>

2
00:00:02,760 --> 00:00:07,109
today's talk is about<font color="#E5E5E5"> Charmides</font>

3
00:00:04,110 --> 00:00:08,940
<font color="#E5E5E5">realization vulnerabilities and suppose</font>

4
00:00:07,109 --> 00:00:12,389
<font color="#E5E5E5">they already told us it's a forgotten</font>

5
00:00:08,940 --> 00:00:15,149
back class<font color="#CCCCCC"> before we start just a short</font>

6
00:00:12,389 --> 00:00:16,890
intro<font color="#E5E5E5"> about me</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> currently the head of</font>

7
00:00:15,150 --> 00:00:19,080
vulnerability research at code white<font color="#E5E5E5"> in</font>

8
00:00:16,890 --> 00:00:22,920
oil so we are between Stuttgart Munich

9
00:00:19,080 --> 00:00:25,919
I'm somehow<font color="#E5E5E5"> specialized in suicide</font>

10
00:00:22,920 --> 00:00:29,099
<font color="#E5E5E5">Chavez</font><font color="#CCCCCC"> uqt</font><font color="#E5E5E5"> because I always looked at</font>

11
00:00:25,920 --> 00:00:32,700
server-side stuff<font color="#E5E5E5"> iPhone parks an Oracle</font>

12
00:00:29,099 --> 00:00:34,649
IBM ACP Symantec Apache Adobe and stuff

13
00:00:32,700 --> 00:00:37,649
like that but most of<font color="#E5E5E5"> them most of them</font>

14
00:00:34,649 --> 00:00:39,420
<font color="#E5E5E5">were server-side stuff but recently I'm</font>

15
00:00:37,649 --> 00:00:43,590
looking more into the windows world and

16
00:00:39,420 --> 00:00:45,629
also clients of<font color="#CCCCCC"> clients</font><font color="#E5E5E5"> of things</font><font color="#CCCCCC"> ok</font>

17
00:00:43,590 --> 00:00:48,090
that's about<font color="#E5E5E5"> me and now let's take a</font>

18
00:00:45,629 --> 00:00:50,399
look at the<font color="#E5E5E5"> gender</font><font color="#CCCCCC"> first I want to start</font>

19
00:00:48,090 --> 00:00:52,920
<font color="#CCCCCC">with the introduction so what is</font><font color="#E5E5E5"> your</font>

20
00:00:50,399 --> 00:00:55,170
association<font color="#E5E5E5"> then I want to have a look</font>

21
00:00:52,920 --> 00:00:58,050
into<font color="#CCCCCC"> how the Java objects your session</font>

22
00:00:55,170 --> 00:01:01,379
protocol works<font color="#E5E5E5"> what what the problem if</font>

23
00:00:58,050 --> 00:01:03,899
it is then I will<font color="#E5E5E5"> look at the history of</font>

24
00:01:01,379 --> 00:01:06,750
parks how to find them how<font color="#CCCCCC"> to exploit</font>

25
00:01:03,899 --> 00:01:08,640
them and then I will have<font color="#CCCCCC"> the cold white</font>

26
00:01:06,750 --> 00:01:11,189
back<font color="#CCCCCC"> parade so all the talks we have</font>

27
00:01:08,640 --> 00:01:13,920
found<font color="#E5E5E5"> during our research effort I</font><font color="#CCCCCC"> call</font>

28
00:01:11,189 --> 00:01:17,119
<font color="#CCCCCC">it research</font><font color="#E5E5E5"> effort and of course I have</font>

29
00:01:13,920 --> 00:01:21,479
a real<font color="#E5E5E5"> estate</font><font color="#CCCCCC"> Rosic special which is</font><font color="#E5E5E5"> a</font>

30
00:01:17,119 --> 00:01:23,400
nicer day<font color="#E5E5E5"> I I will show you here and to</font>

31
00:01:21,479 --> 00:01:27,179
find<font color="#E5E5E5"> a question with this question will</font>

32
00:01:23,400 --> 00:01:28,590
<font color="#E5E5E5">be if there's more to</font><font color="#CCCCCC"> come</font><font color="#E5E5E5"> I guess</font><font color="#CCCCCC"> one</font>

33
00:01:27,180 --> 00:01:31,009
of the<font color="#CCCCCC"> first question you might</font><font color="#E5E5E5"> ask</font>

34
00:01:28,590 --> 00:01:34,229
<font color="#CCCCCC">yourself is should I really</font><font color="#E5E5E5"> care about</font>

35
00:01:31,009 --> 00:01:36,030
<font color="#CCCCCC">the sparklers and</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> if you are</font>

36
00:01:34,229 --> 00:01:39,658
<font color="#E5E5E5">penetration tester and you're doing</font>

37
00:01:36,030 --> 00:01:42,299
<font color="#E5E5E5">Network assessments and looking at huge</font>

38
00:01:39,659 --> 00:01:45,030
corporate networks and your client is

39
00:01:42,299 --> 00:01:47,159
<font color="#E5E5E5">running one</font><font color="#CCCCCC"> of those products you should</font>

40
00:01:45,030 --> 00:01:49,920
<font color="#E5E5E5">definitely definitely care about the</font>

41
00:01:47,159 --> 00:01:53,390
sparklers because of them are affected

42
00:01:49,920 --> 00:01:57,030
by<font color="#CCCCCC"> major products of those</font><font color="#E5E5E5"> vendors and</font>

43
00:01:53,390 --> 00:01:59,969
it's an easy<font color="#E5E5E5"> way to exploit them</font><font color="#CCCCCC"> I have</font>

44
00:01:57,030 --> 00:02:03,149
also some facts for you<font color="#CCCCCC"> the back</font><font color="#E5E5E5"> class</font>

45
00:01:59,969 --> 00:02:06,000
exists for about I would<font color="#CCCCCC"> say</font><font color="#E5E5E5"> 10 or 11</font>

46
00:02:03,149 --> 00:02:08,068
years<font color="#CCCCCC"> in my opinion it's the most</font>

47
00:02:06,000 --> 00:02:10,889
ignored<font color="#CCCCCC"> per</font><font color="#E5E5E5"> class on the Java server</font>

48
00:02:08,068 --> 00:02:13,440
side world<font color="#E5E5E5"> it's an easy way to get</font>

49
00:02:10,889 --> 00:02:16,380
reliable remote code execution<font color="#E5E5E5"> and sin</font>

50
00:02:13,440 --> 00:02:20,340
that is<font color="#CCCCCC"> Java it's also a high tech chure</font>

51
00:02:16,380 --> 00:02:25,109
independent and from the penetration

52
00:02:20,340 --> 00:02:28,890
<font color="#CCCCCC">tests we did in 2006 2015 I can tell you</font>

53
00:02:25,110 --> 00:02:34,830
it's an easy way<font color="#E5E5E5"> to</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> or cooperate</font>

54
00:02:28,890 --> 00:02:36,839
<font color="#E5E5E5">quickly okay and the next</font><font color="#CCCCCC"> question I</font>

55
00:02:34,830 --> 00:02:38,460
think<font color="#CCCCCC"> from you said will</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> where is</font>

56
00:02:36,840 --> 00:02:40,650
<font color="#E5E5E5">it used where can I find it what kind of</font>

57
00:02:38,460 --> 00:02:44,460
impacts<font color="#E5E5E5"> and there are some core</font>

58
00:02:40,650 --> 00:02:47,130
technologies in<font color="#E5E5E5"> Java world for example</font>

59
00:02:44,460 --> 00:02:48,660
the remote method invocation<font color="#E5E5E5"> the channel</font>

60
00:02:47,130 --> 00:02:51,120
management extension and<font color="#E5E5E5"> also the</font>

61
00:02:48,660 --> 00:02:53,370
<font color="#E5E5E5">channel messaging service all those have</font>

62
00:02:51,120 --> 00:02:55,170
their own specification<font color="#E5E5E5"> and if you look</font>

63
00:02:53,370 --> 00:02:57,930
at the specification you can find that

64
00:02:55,170 --> 00:03:03,209
there<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to use Java</font>

65
00:02:57,930 --> 00:03:05,130
serialization there and there's also a

66
00:03:03,210 --> 00:03:07,230
client<font color="#E5E5E5"> site or a server-side technology</font>

67
00:03:05,130 --> 00:03:09,390
for for web web applications which<font color="#CCCCCC"> is</font>

68
00:03:07,230 --> 00:03:11,609
called Java server facial server faces

69
00:03:09,390 --> 00:03:14,609
<font color="#CCCCCC">it's pretty old and I don't</font><font color="#E5E5E5"> know if</font>

70
00:03:11,610 --> 00:03:16,440
<font color="#CCCCCC">people are</font><font color="#E5E5E5"> still using it but they used</font>

71
00:03:14,610 --> 00:03:19,200
to<font color="#E5E5E5"> save the state of</font><font color="#CCCCCC"> the current</font>

72
00:03:16,440 --> 00:03:22,109
<font color="#E5E5E5">browsing session into the few state and</font>

73
00:03:19,200 --> 00:03:24,839
for that they<font color="#CCCCCC"> use the Java C</font><font color="#E5E5E5"> oscillation</font>

74
00:03:22,110 --> 00:03:28,440
<font color="#E5E5E5">mechanisms and</font><font color="#CCCCCC"> there were also public</font>

75
00:03:24,840 --> 00:03:31,080
<font color="#E5E5E5">exploit so</font><font color="#CCCCCC"> that how how you could get</font>

76
00:03:28,440 --> 00:03:34,260
<font color="#E5E5E5">easy remote code execution and whenever</font>

77
00:03:31,080 --> 00:03:39,239
<font color="#E5E5E5">for example a</font><font color="#CCCCCC"> VM talks to another when</font>

78
00:03:34,260 --> 00:03:42,030
<font color="#E5E5E5">or whenever a VM talks to each to itself</font>

79
00:03:39,239 --> 00:03:43,890
and chances<font color="#E5E5E5"> are very high that that</font>

80
00:03:42,030 --> 00:03:46,080
<font color="#E5E5E5">realization is used or something</font><font color="#CCCCCC"> which</font>

81
00:03:43,890 --> 00:03:48,720
<font color="#E5E5E5">is built on top</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> serialization like a</font>

82
00:03:46,080 --> 00:03:51,600
rabbi and<font color="#E5E5E5"> of course we have custom</font>

83
00:03:48,720 --> 00:03:54,239
application protocols on top of HTTP

84
00:03:51,600 --> 00:03:56,130
<font color="#E5E5E5">where a station can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> found for</font><font color="#CCCCCC"> example</font>

85
00:03:54,239 --> 00:03:58,500
if<font color="#CCCCCC"> you say HTTP</font><font color="#E5E5E5"> request and in the body</font>

86
00:03:56,130 --> 00:04:02,690
<font color="#E5E5E5">you find this realized object like one</font>

87
00:03:58,500 --> 00:04:02,690
of the<font color="#CCCCCC"> one relatives I found in the past</font>

88
00:04:03,200 --> 00:04:07,679
and<font color="#CCCCCC"> just to</font><font color="#E5E5E5"> make sure that we all have</font>

89
00:04:05,790 --> 00:04:09,810
the same<font color="#CCCCCC"> understanding what</font><font color="#E5E5E5"> your session</font>

90
00:04:07,680 --> 00:04:13,380
<font color="#E5E5E5">is when I talk about serialization it's</font>

91
00:04:09,810 --> 00:04:16,320
just to take a object which is<font color="#E5E5E5"> in the VM</font>

92
00:04:13,380 --> 00:04:18,298
<font color="#E5E5E5">and represent it in</font><font color="#CCCCCC"> a stream of bytes</font>

93
00:04:16,320 --> 00:04:20,548
<font color="#E5E5E5">using a specific protocol which</font><font color="#CCCCCC"> is</font>

94
00:04:18,298 --> 00:04:23,370
called the object<font color="#CCCCCC"> serialization</font><font color="#E5E5E5"> protocol</font>

95
00:04:20,548 --> 00:04:25,289
and for<font color="#E5E5E5"> example story in</font><font color="#CCCCCC"> a file or send</font>

96
00:04:23,370 --> 00:04:26,550
it over network or<font color="#CCCCCC"> stored</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

97
00:04:25,289 --> 00:04:29,430
<font color="#CCCCCC">database</font>

98
00:04:26,550 --> 00:04:31,830
<font color="#E5E5E5">then take the same</font><font color="#CCCCCC"> bytes again using the</font>

99
00:04:29,430 --> 00:04:32,780
protocol and reconstruct<font color="#E5E5E5"> the same object</font>

100
00:04:31,830 --> 00:04:38,128
again

101
00:04:32,780 --> 00:04:40,229
that's<font color="#E5E5E5"> your</font><font color="#CCCCCC"> ization</font><font color="#E5E5E5"> and dissertation</font><font color="#CCCCCC"> for</font>

102
00:04:38,129 --> 00:04:42,120
<font color="#E5E5E5">the ones who are interested in protocols</font>

103
00:04:40,229 --> 00:04:45,180
there's the<font color="#CCCCCC"> java objects your</font>

104
00:04:42,120 --> 00:04:47,370
association protocol<font color="#E5E5E5"> it's pretty easy</font><font color="#CCCCCC"> I</font>

105
00:04:45,180 --> 00:04:49,500
have for<font color="#E5E5E5"> example class it's called</font>

106
00:04:47,370 --> 00:04:52,440
conference it implements utilizable

107
00:04:49,500 --> 00:04:54,870
serializable<font color="#CCCCCC"> so taking interface in it</font>

108
00:04:52,440 --> 00:04:57,360
has two<font color="#E5E5E5"> members the first one is the</font>

109
00:04:54,870 --> 00:04:59,219
name<font color="#E5E5E5"> and the second is the</font><font color="#CCCCCC"> start date</font>

110
00:04:57,360 --> 00:05:01,800
name of type string<font color="#E5E5E5"> and then we have</font>

111
00:04:59,219 --> 00:05:03,569
started of course of type date and if

112
00:05:01,800 --> 00:05:06,449
you if you create an instance<font color="#CCCCCC"> of this</font>

113
00:05:03,569 --> 00:05:09,150
class and utilize it<font color="#CCCCCC"> in to for example</font>

114
00:05:06,449 --> 00:05:11,400
<font color="#CCCCCC">file and you look at the parts then you</font>

115
00:05:09,150 --> 00:05:13,530
will see first<font color="#E5E5E5"> of all the magic</font><font color="#CCCCCC"> header</font>

116
00:05:11,400 --> 00:05:15,090
which<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> CD it's very important</font>

117
00:05:13,530 --> 00:05:18,919
whenever<font color="#E5E5E5"> you see a CD</font><font color="#CCCCCC"> you know what you</font>

118
00:05:15,090 --> 00:05:21,210
do<font color="#E5E5E5"> you need to exploit it</font><font color="#CCCCCC"> we have</font>

119
00:05:18,919 --> 00:05:23,280
several other fields<font color="#E5E5E5"> there the</font>

120
00:05:21,210 --> 00:05:25,440
interesting ones are TCO object in TC

121
00:05:23,280 --> 00:05:28,289
class description<font color="#E5E5E5"> so type class object</font>

122
00:05:25,440 --> 00:05:30,659
type plus class description<font color="#E5E5E5"> which tells</font>

123
00:05:28,289 --> 00:05:32,159
<font color="#CCCCCC">ok there will be an object</font><font color="#E5E5E5"> and the</font>

124
00:05:30,659 --> 00:05:34,319
object has the<font color="#CCCCCC"> following class</font>

125
00:05:32,159 --> 00:05:36,270
description which<font color="#CCCCCC"> is the class name in</font>

126
00:05:34,319 --> 00:05:39,210
our case it's the<font color="#E5E5E5"> e code white</font>

127
00:05:36,270 --> 00:05:43,859
conference and the class has several

128
00:05:39,210 --> 00:05:47,609
fields name<font color="#E5E5E5"> and start it and name and</font>

129
00:05:43,860 --> 00:05:50,940
start<font color="#CCCCCC"> a tower of type string</font><font color="#E5E5E5"> and you</font>

130
00:05:47,610 --> 00:05:55,020
have a<font color="#E5E5E5"> YouTube date and then after the</font>

131
00:05:50,940 --> 00:05:56,909
class description<font color="#E5E5E5"> we will have class</font>

132
00:05:55,020 --> 00:06:00,599
description so<font color="#E5E5E5"> we will have the class</font>

133
00:05:56,909 --> 00:06:04,710
data<font color="#E5E5E5"> array which just has all the values</font>

134
00:06:00,599 --> 00:06:06,840
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> fields for</font><font color="#E5E5E5"> example rusik 2016 and</font>

135
00:06:04,710 --> 00:06:10,620
the current date represented as a

136
00:06:06,840 --> 00:06:12,289
<font color="#CCCCCC">private</font><font color="#E5E5E5"> long if you are interested more</font>

137
00:06:10,620 --> 00:06:15,360
<font color="#E5E5E5">on this protocol there's a nice</font>

138
00:06:12,289 --> 00:06:18,840
specification<font color="#E5E5E5"> on the oracle web page on</font>

139
00:06:15,360 --> 00:06:21,360
<font color="#E5E5E5">the oracle web page objects your session</font>

140
00:06:18,840 --> 00:06:22,919
for<font color="#CCCCCC"> a stream</font><font color="#E5E5E5"> protocol they also have a</font>

141
00:06:21,360 --> 00:06:25,129
grammar<font color="#E5E5E5"> so if you want to implement your</font>

142
00:06:22,919 --> 00:06:29,969
own parser<font color="#E5E5E5"> you can check the grammar</font><font color="#CCCCCC"> and</font>

143
00:06:25,129 --> 00:06:33,479
it's pretty<font color="#E5E5E5"> easy if</font><font color="#CCCCCC"> you look at the</font>

144
00:06:29,969 --> 00:06:35,099
api's Java provides us to serialize in

145
00:06:33,479 --> 00:06:38,430
the user eyes the most interesting one

146
00:06:35,099 --> 00:06:40,030
is<font color="#E5E5E5"> the this relay thesis dissertation</font>

147
00:06:38,430 --> 00:06:43,480
<font color="#E5E5E5">for us and</font>

148
00:06:40,030 --> 00:06:44,919
how it works<font color="#CCCCCC"> is</font><font color="#E5E5E5"> you take just any input</font>

149
00:06:43,480 --> 00:06:47,710
stream you can<font color="#E5E5E5"> find in the Java world</font>

150
00:06:44,920 --> 00:06:50,800
<font color="#CCCCCC">and use it as a source for</font><font color="#E5E5E5"> an object</font>

151
00:06:47,710 --> 00:06:53,469
input stream<font color="#E5E5E5"> and later on</font><font color="#CCCCCC"> invoke the</font>

152
00:06:50,800 --> 00:06:55,600
read object method on the object input

153
00:06:53,470 --> 00:06:58,450
stream<font color="#E5E5E5"> and then the object will get</font>

154
00:06:55,600 --> 00:07:00,250
easier<font color="#E5E5E5"> lives from the stream it doesn't</font>

155
00:06:58,450 --> 00:07:02,289
matter if it<font color="#CCCCCC"> is a file input stream if</font>

156
00:07:00,250 --> 00:07:05,110
it is whatever<font color="#CCCCCC"> byte input stream it just</font>

157
00:07:02,290 --> 00:07:07,000
gets easier<font color="#E5E5E5"> alized from the stream and</font>

158
00:07:05,110 --> 00:07:07,600
of course you're going<font color="#E5E5E5"> to ask</font><font color="#CCCCCC"> another</font>

159
00:07:07,000 --> 00:07:10,090
<font color="#E5E5E5">question</font>

160
00:07:07,600 --> 00:07:12,190
what could<font color="#CCCCCC"> possibly go wrong here</font><font color="#E5E5E5"> and</font>

161
00:07:10,090 --> 00:07:15,539
there are several<font color="#E5E5E5"> things which can go</font>

162
00:07:12,190 --> 00:07:17,860
wrong here for example the object<font color="#E5E5E5"> stream</font>

163
00:07:15,540 --> 00:07:20,140
object input stream class does<font color="#E5E5E5"> not</font>

164
00:07:17,860 --> 00:07:22,000
include<font color="#E5E5E5"> any validation api's at all so</font>

165
00:07:20,140 --> 00:07:24,880
there's no method<font color="#CCCCCC"> that's what to say for</font>

166
00:07:22,000 --> 00:07:27,160
<font color="#CCCCCC">example please allow</font><font color="#E5E5E5"> only those classes</font>

167
00:07:24,880 --> 00:07:29,950
<font color="#E5E5E5">to get</font><font color="#CCCCCC"> deserialized</font><font color="#E5E5E5"> and that's the</font>

168
00:07:27,160 --> 00:07:32,740
biggest issue<font color="#E5E5E5"> I think and if you think</font>

169
00:07:29,950 --> 00:07:33,909
about how Java works<font color="#CCCCCC"> usually it has you</font>

170
00:07:32,740 --> 00:07:35,920
have something like<font color="#CCCCCC"> an application</font>

171
00:07:33,910 --> 00:07:37,720
<font color="#E5E5E5">server and it has a lot</font><font color="#CCCCCC"> of classes in</font>

172
00:07:35,920 --> 00:07:40,690
<font color="#E5E5E5">the class path for</font><font color="#CCCCCC"> example for Oracle</font>

173
00:07:37,720 --> 00:07:42,850
<font color="#CCCCCC">WebLogic you have only 250 megabytes</font><font color="#E5E5E5"> of</font>

174
00:07:40,690 --> 00:07:46,719
classes in the<font color="#E5E5E5"> class path which are</font>

175
00:07:42,850 --> 00:07:49,810
zipped<font color="#E5E5E5"> so it's even</font><font color="#CCCCCC"> more and all of</font>

176
00:07:46,720 --> 00:07:53,770
those<font color="#E5E5E5"> classes are usually available to</font>

177
00:07:49,810 --> 00:07:54,850
get<font color="#E5E5E5"> this realized if but there are some</font>

178
00:07:53,770 --> 00:07:56,830
special constructs

179
00:07:54,850 --> 00:08:00,520
<font color="#E5E5E5">but for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> web logic you can all</font>

180
00:07:56,830 --> 00:08:02,320
use all of them and<font color="#E5E5E5"> although</font><font color="#CCCCCC"> our class</font>

181
00:08:00,520 --> 00:08:04,479
cast exception might occur at the end

182
00:08:02,320 --> 00:08:06,130
<font color="#E5E5E5">when you invoke the read object still</font>

183
00:08:04,480 --> 00:08:08,500
the object will be completely

184
00:08:06,130 --> 00:08:11,290
constructed<font color="#E5E5E5"> then you will get the class</font>

185
00:08:08,500 --> 00:08:14,880
<font color="#E5E5E5">cutters exception and then the object</font>

186
00:08:11,290 --> 00:08:18,280
<font color="#E5E5E5">gets garbage collector</font><font color="#CCCCCC"> collected and</font>

187
00:08:14,880 --> 00:08:22,600
that's let's<font color="#E5E5E5"> say the bigger problem here</font>

188
00:08:18,280 --> 00:08:24,340
<font color="#E5E5E5">and I think the most the</font><font color="#CCCCCC"> biggest problem</font>

189
00:08:22,600 --> 00:08:27,850
from know from<font color="#E5E5E5"> from the implementations</font>

190
00:08:24,340 --> 00:08:30,219
view is developers are<font color="#CCCCCC"> able to customize</font>

191
00:08:27,850 --> 00:08:33,460
how<font color="#CCCCCC"> classes get realized in this</font>

192
00:08:30,220 --> 00:08:35,650
realized<font color="#E5E5E5"> they can override specific or</font>

193
00:08:33,460 --> 00:08:38,260
implement<font color="#E5E5E5"> specific methods like</font><font color="#CCCCCC"> write</font>

194
00:08:35,650 --> 00:08:40,000
object write replace read object and

195
00:08:38,260 --> 00:08:41,789
resolve in those methods are<font color="#E5E5E5"> called</font>

196
00:08:40,000 --> 00:08:45,640
during realization<font color="#E5E5E5"> and this realization</font>

197
00:08:41,789 --> 00:08:47,890
<font color="#E5E5E5">for example if you do</font><font color="#CCCCCC"> dissociation</font><font color="#E5E5E5"> the</font>

198
00:08:45,640 --> 00:08:50,430
methods<font color="#E5E5E5"> read object and read resolve of</font>

199
00:08:47,890 --> 00:08:54,010
us your lives<font color="#E5E5E5"> of the class are invoked</font>

200
00:08:50,430 --> 00:08:57,040
and I also have a nice<font color="#CCCCCC"> example for you</font>

201
00:08:54,010 --> 00:08:59,380
I have a file cache entry class it

202
00:08:57,040 --> 00:09:02,019
implements<font color="#CCCCCC"> utilizable it had it</font><font color="#E5E5E5"> has two</font>

203
00:08:59,380 --> 00:09:04,149
members one<font color="#E5E5E5"> of it the entries app ID</font>

204
00:09:02,019 --> 00:09:07,810
array<font color="#E5E5E5"> and we also have a string which is</font>

205
00:09:04,149 --> 00:09:09,370
<font color="#CCCCCC">the path</font><font color="#E5E5E5"> and if you look at the if you</font>

206
00:09:07,810 --> 00:09:11,529
<font color="#CCCCCC">look at the implementation you see okay</font>

207
00:09:09,370 --> 00:09:14,380
<font color="#E5E5E5">first in a very beginning</font><font color="#CCCCCC"> we read the</font>

208
00:09:11,529 --> 00:09:15,880
fields of the object by calling default

209
00:09:14,380 --> 00:09:19,180
<font color="#E5E5E5">read object and then the member where</font>

210
00:09:15,880 --> 00:09:22,560
<font color="#E5E5E5">yours are set and then a file output</font>

211
00:09:19,180 --> 00:09:24,910
stream is constructed using<font color="#CCCCCC"> the path and</font>

212
00:09:22,560 --> 00:09:27,910
the radius from the byte array are

213
00:09:24,910 --> 00:09:32,469
written<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the path and if you're able</font>

214
00:09:27,910 --> 00:09:33,939
<font color="#CCCCCC">to</font><font color="#E5E5E5"> send a object of this type to</font><font color="#CCCCCC"> a for</font>

215
00:09:32,470 --> 00:09:38,860
example<font color="#CCCCCC"> report</font><font color="#E5E5E5"> which is doing this</font>

216
00:09:33,940 --> 00:09:40,389
realization you can write files and you

217
00:09:38,860 --> 00:09:43,660
might say now<font color="#CCCCCC"> okay this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a very</font>

218
00:09:40,389 --> 00:09:46,570
artificial<font color="#CCCCCC"> example and you don't find</font>

219
00:09:43,660 --> 00:09:48,040
<font color="#E5E5E5">such classes in the class files it's a</font>

220
00:09:46,570 --> 00:09:50,230
little bit artificial<font color="#E5E5E5"> but there was a</font>

221
00:09:48,040 --> 00:09:53,110
park in the past<font color="#E5E5E5"> with which was almost</font>

222
00:09:50,230 --> 00:10:01,389
<font color="#E5E5E5">as easy a better one it was the common</font>

223
00:09:53,110 --> 00:10:04,690
file upload yeah and of course entry<font color="#E5E5E5"> in</font>

224
00:10:01,389 --> 00:10:05,680
<font color="#E5E5E5">path</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> and our control and I</font><font color="#CCCCCC"> think</font>

225
00:10:04,690 --> 00:10:09,069
this is the<font color="#E5E5E5"> biggest problem</font><font color="#CCCCCC"> because</font>

226
00:10:05,680 --> 00:10:10,239
<font color="#E5E5E5">developers are able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> customize classes</font>

227
00:10:09,069 --> 00:10:13,120
how they get serialize and deserialize

228
00:10:10,240 --> 00:10:15,910
<font color="#E5E5E5">and developers sometimes</font><font color="#CCCCCC"> do not take</font>

229
00:10:13,120 --> 00:10:19,810
care what they<font color="#E5E5E5"> are doing during during</font>

230
00:10:15,910 --> 00:10:24,219
that method<font color="#CCCCCC"> invocations so and there's</font>

231
00:10:19,810 --> 00:10:25,689
another problem<font color="#E5E5E5"> by using</font><font color="#CCCCCC"> special</font>

232
00:10:24,220 --> 00:10:28,899
I call it<font color="#E5E5E5"> trampoline classes you are</font>

233
00:10:25,690 --> 00:10:31,060
able<font color="#E5E5E5"> to even invoke other methods</font><font color="#CCCCCC"> for</font>

234
00:10:28,899 --> 00:10:33,069
example<font color="#E5E5E5"> by using a class which is called</font>

235
00:10:31,060 --> 00:10:36,279
<font color="#CCCCCC">bad attribute value exception you are</font>

236
00:10:33,069 --> 00:10:38,680
<font color="#E5E5E5">able to call a two string method on any</font>

237
00:10:36,279 --> 00:10:40,569
<font color="#CCCCCC">civilized object</font><font color="#E5E5E5"> you can call the</font>

238
00:10:38,680 --> 00:10:42,819
hashcode method by<font color="#CCCCCC"> using hash map</font><font color="#E5E5E5"> you</font>

239
00:10:40,569 --> 00:10:47,490
can call the comparator<font color="#E5E5E5"> compare method</font>

240
00:10:42,819 --> 00:10:50,649
by<font color="#CCCCCC"> using a Java util priority queue and</font>

241
00:10:47,490 --> 00:10:54,040
so you can construct<font color="#E5E5E5"> chains of objects</font>

242
00:10:50,649 --> 00:10:55,690
which do interest or do several method

243
00:10:54,040 --> 00:10:59,800
invocations like<font color="#E5E5E5"> to string whatever</font>

244
00:10:55,690 --> 00:11:04,120
and during<font color="#CCCCCC"> dissertation and</font><font color="#E5E5E5"> I also have</font>

245
00:10:59,800 --> 00:11:06,490
an<font color="#CCCCCC"> example for the for a traveling class</font>

246
00:11:04,120 --> 00:11:07,279
it's from the<font color="#CCCCCC"> batch</font><font color="#E5E5E5"> attribute value</font>

247
00:11:06,490 --> 00:11:08,600
exception

248
00:11:07,279 --> 00:11:12,290
in waters happening there at the very

249
00:11:08,600 --> 00:11:15,170
<font color="#E5E5E5">beginning is the member well</font><font color="#CCCCCC"> is read</font>

250
00:11:12,290 --> 00:11:18,980
from<font color="#CCCCCC"> the object input stream</font><font color="#E5E5E5"> so the</font>

251
00:11:15,170 --> 00:11:21,860
member and<font color="#E5E5E5"> later on on</font><font color="#CCCCCC"> the well object</font>

252
00:11:18,980 --> 00:11:24,589
<font color="#E5E5E5">to string is invoked</font><font color="#CCCCCC"> your sir so you are</font>

253
00:11:21,860 --> 00:11:28,999
able<font color="#CCCCCC"> to invoke any to string method on a</font>

254
00:11:24,589 --> 00:11:32,059
serialized object and you might say I

255
00:11:28,999 --> 00:11:34,699
think now<font color="#E5E5E5"> okay this</font><font color="#CCCCCC"> is very very</font><font color="#E5E5E5"> obvious</font>

256
00:11:32,059 --> 00:11:36,769
<font color="#CCCCCC">people who doing serialization should be</font>

257
00:11:34,699 --> 00:11:38,779
aware of the problems<font color="#E5E5E5"> everyone in the</font>

258
00:11:36,769 --> 00:11:41,680
<font color="#E5E5E5">Java world should already know that</font><font color="#CCCCCC"> and</font>

259
00:11:38,779 --> 00:11:48,379
it turns out<font color="#E5E5E5"> that</font><font color="#CCCCCC"> this is not</font><font color="#E5E5E5"> true</font>

260
00:11:41,680 --> 00:11:51,469
<font color="#CCCCCC">because if you look back</font><font color="#E5E5E5"> in 2006 the</font>

261
00:11:48,379 --> 00:11:52,850
<font color="#CCCCCC">first vulnerabilities were found and one</font>

262
00:11:51,470 --> 00:11:54,620
of the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> guys</font><font color="#E5E5E5"> I mean everyone knows</font>

263
00:11:52,850 --> 00:11:58,910
it in a Java security<font color="#E5E5E5"> word</font><font color="#CCCCCC"> Martina felt</font>

264
00:11:54,620 --> 00:12:00,529
he already talked about that<font color="#CCCCCC"> charities</font>

265
00:11:58,910 --> 00:12:04,129
<font color="#CCCCCC">recitation might be a problem he was</font>

266
00:12:00,529 --> 00:12:06,529
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> presented heck in the</font><font color="#E5E5E5"> box</font><font color="#CCCCCC"> a way</font>

267
00:12:04,129 --> 00:12:11,600
<font color="#E5E5E5">to get a memory corruption by sending a</font>

268
00:12:06,529 --> 00:12:13,579
serialized object stream which had with

269
00:12:11,600 --> 00:12:19,069
an object<font color="#CCCCCC"> which</font><font color="#E5E5E5"> Engler</font><font color="#CCCCCC"> be implemented</font>

270
00:12:13,579 --> 00:12:20,719
more<font color="#E5E5E5"> than 65</font><font color="#CCCCCC"> five 65,536 interfaces</font><font color="#E5E5E5"> and</font>

271
00:12:19,069 --> 00:12:25,790
then he had a memory<font color="#E5E5E5"> corruption JVM</font>

272
00:12:20,720 --> 00:12:28,610
crashed but it was a<font color="#E5E5E5"> u.s. in 2008</font><font color="#CCCCCC"> Luca</font>

273
00:12:25,790 --> 00:12:31,189
Cory Tony<font color="#CCCCCC"> shot in some Java web console</font>

274
00:12:28,610 --> 00:12:35,769
that he was able<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> across</font><font color="#CCCCCC"> a</font>

275
00:12:31,189 --> 00:12:38,809
scripting working or also<font color="#CCCCCC"> to</font><font color="#E5E5E5"> at us</font><font color="#CCCCCC"> in</font>

276
00:12:35,769 --> 00:12:41,000
2011 and era<font color="#E5E5E5"> there we had the first</font>

277
00:12:38,809 --> 00:12:42,860
remote code execution vulnerability was

278
00:12:41,000 --> 00:12:46,250
from border<font color="#E5E5E5"> and he showed that some</font>

279
00:12:42,860 --> 00:12:50,149
<font color="#CCCCCC">classes in the spring framework</font><font color="#E5E5E5"> can be</font>

280
00:12:46,250 --> 00:12:52,490
used to get remote code execution by

281
00:12:50,149 --> 00:12:54,379
constructing a chain of objects and

282
00:12:52,490 --> 00:12:57,019
finally get a dynamic<font color="#E5E5E5"> method call and</font>

283
00:12:54,379 --> 00:12:59,809
then<font color="#CCCCCC"> runtime get Robin time dot exe or</font>

284
00:12:57,019 --> 00:13:04,100
whatever so he was the<font color="#CCCCCC"> first guy who</font>

285
00:12:59,809 --> 00:13:08,300
really<font color="#E5E5E5"> presented a a way to get reliable</font>

286
00:13:04,100 --> 00:13:12,290
code execution in 2012<font color="#CCCCCC"> period at that</font>

287
00:13:08,300 --> 00:13:17,120
<font color="#CCCCCC">time</font><font color="#E5E5E5"> working at IBM found several</font>

288
00:13:12,290 --> 00:13:19,660
vulnerabilities in<font color="#E5E5E5"> ABI incognizant in</font>

289
00:13:17,120 --> 00:13:21,940
you'd in 2013

290
00:13:19,660 --> 00:13:24,310
looking at<font color="#CCCCCC"> Apache stuff like open JPA</font>

291
00:13:21,940 --> 00:13:27,220
the applications of<font color="#E5E5E5"> a Geronimo</font><font color="#CCCCCC"> comments</font>

292
00:13:24,310 --> 00:13:29,680
file upload<font color="#CCCCCC"> and were one of the first</font>

293
00:13:27,220 --> 00:13:32,800
<font color="#E5E5E5">ones which were public publicly</font>

294
00:13:29,680 --> 00:13:36,189
disclosed by him<font color="#CCCCCC"> I think that's not</font>

295
00:13:32,800 --> 00:13:38,469
known in Dutch<font color="#E5E5E5"> or not not known</font>

296
00:13:36,190 --> 00:13:42,010
<font color="#CCCCCC">everywhere</font><font color="#E5E5E5"> and there was also another</font>

297
00:13:38,470 --> 00:13:43,780
<font color="#CCCCCC">researcher Takeshita data from mb SD</font><font color="#E5E5E5"> he</font>

298
00:13:42,010 --> 00:13:46,540
was able<font color="#CCCCCC"> to get remote code execution in</font>

299
00:13:43,780 --> 00:13:49,209
tables<font color="#CCCCCC"> rich</font><font color="#E5E5E5"> faces and the biggest step</font>

300
00:13:46,540 --> 00:13:52,630
was done in 2015<font color="#E5E5E5"> where Gabriel Lawrence</font>

301
00:13:49,210 --> 00:13:55,440
and<font color="#E5E5E5"> Chris row half of Qualcomm showed</font>

302
00:13:52,630 --> 00:13:58,360
their research results at<font color="#CCCCCC"> EPS Akali and</font>

303
00:13:55,440 --> 00:14:01,600
what they did<font color="#E5E5E5"> that they showed two</font>

304
00:13:58,360 --> 00:14:03,580
unique<font color="#E5E5E5"> exploitation techniques we call</font>

305
00:14:01,600 --> 00:14:06,160
it gadgets<font color="#E5E5E5"> one for the comments</font>

306
00:14:03,580 --> 00:14:08,800
collection library which is in almost

307
00:14:06,160 --> 00:14:12,699
<font color="#E5E5E5">every class path you can find and also</font>

308
00:14:08,800 --> 00:14:15,699
for the groovy library<font color="#E5E5E5"> and he also both</font>

309
00:14:12,700 --> 00:14:17,920
also<font color="#E5E5E5"> released two tools one of it is</font>

310
00:14:15,700 --> 00:14:19,870
Inspector Gadget<font color="#CCCCCC"> and the other one is</font>

311
00:14:17,920 --> 00:14:23,650
why so serial but you will see it later

312
00:14:19,870 --> 00:14:27,700
<font color="#E5E5E5">so</font><font color="#CCCCCC"> if you now look at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> timeline we</font>

313
00:14:23,650 --> 00:14:29,560
see about<font color="#CCCCCC"> ten or eleven</font><font color="#E5E5E5"> bucks</font><font color="#CCCCCC"> in ten</font>

314
00:14:27,700 --> 00:14:31,810
<font color="#E5E5E5">years which is not that much if you</font>

315
00:14:29,560 --> 00:14:34,329
<font color="#CCCCCC">think about other Park classes so either</font>

316
00:14:31,810 --> 00:14:37,839
either<font color="#CCCCCC"> the spyglass is</font><font color="#E5E5E5"> not easy to find</font>

317
00:14:34,330 --> 00:14:41,530
or easy<font color="#E5E5E5"> to exploit but to be honest</font>

318
00:14:37,840 --> 00:14:43,960
<font color="#E5E5E5">finding is trivial so what you can do is</font>

319
00:14:41,530 --> 00:14:46,270
you just<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> take any</font><font color="#E5E5E5"> open</font>

320
00:14:43,960 --> 00:14:48,790
<font color="#E5E5E5">source software download the code and do</font>

321
00:14:46,270 --> 00:14:52,270
a grep<font color="#E5E5E5"> on read object that's the way I</font>

322
00:14:48,790 --> 00:14:55,000
did<font color="#CCCCCC"> for</font><font color="#E5E5E5"> Apache ActiveMQ</font><font color="#CCCCCC"> and I found at</font>

323
00:14:52,270 --> 00:14:57,760
<font color="#E5E5E5">least four ways where this realization</font>

324
00:14:55,000 --> 00:15:00,280
is happening<font color="#CCCCCC"> I think in this case</font><font color="#E5E5E5"> for</font>

325
00:14:57,760 --> 00:15:02,500
five<font color="#E5E5E5"> but I don't know if all of them are</font>

326
00:15:00,280 --> 00:15:04,540
exploitable here but that's<font color="#E5E5E5"> the way I</font>

327
00:15:02,500 --> 00:15:05,920
<font color="#E5E5E5">did and</font><font color="#CCCCCC"> that's that was all the back</font>

328
00:15:04,540 --> 00:15:09,730
finding not more not less

329
00:15:05,920 --> 00:15:11,829
<font color="#CCCCCC">just grabbing for</font><font color="#E5E5E5"> it what you can</font><font color="#CCCCCC"> also</font>

330
00:15:09,730 --> 00:15:13,600
do is for<font color="#CCCCCC"> example if you do not have any</font>

331
00:15:11,830 --> 00:15:16,360
any source code you can<font color="#CCCCCC"> just use your</font>

332
00:15:13,600 --> 00:15:17,890
IDE like IntelliJ<font color="#CCCCCC"> or</font><font color="#E5E5E5"> eclipse and you add</font>

333
00:15:16,360 --> 00:15:21,730
<font color="#E5E5E5">all the classes of your target shooter</font>

334
00:15:17,890 --> 00:15:24,310
to the project and get it into<font color="#E5E5E5"> the class</font>

335
00:15:21,730 --> 00:15:26,530
<font color="#E5E5E5">buff and then do something like show me</font>

336
00:15:24,310 --> 00:15:29,829
the call hierarchy to read object and

337
00:15:26,530 --> 00:15:32,110
<font color="#CCCCCC">just go through all the calls the</font>

338
00:15:29,830 --> 00:15:33,550
typical way I do with<font color="#E5E5E5"> closed software</font>

339
00:15:32,110 --> 00:15:35,230
<font color="#E5E5E5">and it works pretty</font><font color="#CCCCCC"> well</font>

340
00:15:33,550 --> 00:15:37,769
also for<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> bigger</font><font color="#CCCCCC"> ones like my</font>

341
00:15:35,230 --> 00:15:40,600
blood chick<font color="#E5E5E5"> it works good</font>

342
00:15:37,769 --> 00:15:43,089
so finding is in my opinion<font color="#CCCCCC"> Tribble you</font>

343
00:15:40,600 --> 00:15:46,029
you have to sing<font color="#CCCCCC"> you look at the source</font>

344
00:15:43,089 --> 00:15:48,580
<font color="#CCCCCC">that's it but more if you think about</font>

345
00:15:46,029 --> 00:15:50,649
exploitation<font color="#CCCCCC"> this takes a little</font><font color="#E5E5E5"> bit</font>

346
00:15:48,580 --> 00:15:55,120
<font color="#E5E5E5">more effort because what you need to do</font>

347
00:15:50,649 --> 00:15:57,850
is you find you need<font color="#E5E5E5"> to find interesting</font>

348
00:15:55,120 --> 00:15:59,980
<font color="#E5E5E5">classes which trigger interesting</font>

349
00:15:57,850 --> 00:16:02,410
functionality<font color="#E5E5E5"> during this realization</font>

350
00:15:59,980 --> 00:16:06,130
like writing files or doing dynamic

351
00:16:02,410 --> 00:16:08,230
<font color="#E5E5E5">method calls using</font><font color="#CCCCCC"> reflection or loading</font>

352
00:16:06,130 --> 00:16:11,880
libraries<font color="#CCCCCC"> negative letters or calling ID</font>

353
00:16:08,230 --> 00:16:15,279
functions<font color="#E5E5E5"> and if you find such a class</font>

354
00:16:11,880 --> 00:16:17,769
<font color="#E5E5E5">we use to</font><font color="#CCCCCC"> use the term</font><font color="#E5E5E5"> gadgets for that</font>

355
00:16:15,279 --> 00:16:19,480
<font color="#E5E5E5">and</font><font color="#CCCCCC"> Kris Rojas is</font><font color="#E5E5E5"> the gadget master he</font>

356
00:16:17,769 --> 00:16:21,820
found all the most or most of<font color="#E5E5E5"> the</font>

357
00:16:19,480 --> 00:16:23,290
<font color="#E5E5E5">interesting gadgets in standard</font>

358
00:16:21,820 --> 00:16:25,480
libraries for example<font color="#CCCCCC"> he found the one</font>

359
00:16:23,290 --> 00:16:29,380
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the JDK</font><font color="#CCCCCC"> he found the one in comments</font>

360
00:16:25,480 --> 00:16:31,870
collection<font color="#CCCCCC"> groovy and</font><font color="#E5E5E5"> others and I have</font>

361
00:16:29,380 --> 00:16:32,800
also a gadget for<font color="#E5E5E5"> you I called it</font><font color="#CCCCCC"> the</font>

362
00:16:31,870 --> 00:16:36,970
chalasis twelth

363
00:16:32,800 --> 00:16:39,040
get<font color="#E5E5E5"> shipped and both libraries from Red</font>

364
00:16:36,970 --> 00:16:41,310
Hat<font color="#E5E5E5"> Java sisters used for bytecode</font>

365
00:16:39,040 --> 00:16:43,770
engineering involves<font color="#E5E5E5"> a currency and</font>

366
00:16:41,310 --> 00:16:48,130
context dependency injection framework

367
00:16:43,770 --> 00:16:49,689
<font color="#E5E5E5">so high level abstraction stuff and I</font>

368
00:16:48,130 --> 00:16:52,089
found<font color="#CCCCCC"> the sketch it during my research</font>

369
00:16:49,690 --> 00:16:56,470
at when I<font color="#E5E5E5"> was looking at Oracle WebLogic</font>

370
00:16:52,089 --> 00:16:59,500
<font color="#E5E5E5">and I reported also the Quecha to Oracle</font>

371
00:16:56,470 --> 00:17:01,779
when I reported the t3 vulnerability and

372
00:16:59,500 --> 00:17:06,010
it works in Oracle WebLogic<font color="#CCCCCC"> it works in</font>

373
00:17:01,779 --> 00:17:10,980
<font color="#CCCCCC">jboss</font><font color="#E5E5E5"> EAP and what it allows me is to</font>

374
00:17:06,010 --> 00:17:14,859
call a a<font color="#E5E5E5"> a method on a</font><font color="#CCCCCC"> sterilized</font><font color="#E5E5E5"> object</font>

375
00:17:10,980 --> 00:17:17,669
using reflection and this is enough to

376
00:17:14,859 --> 00:17:20,760
get remote car to get code execution<font color="#E5E5E5"> and</font>

377
00:17:17,669 --> 00:17:23,559
I also have the example here for you

378
00:17:20,760 --> 00:17:25,300
everything starts in the class intercept

379
00:17:23,559 --> 00:17:27,069
the method handler it has a read object

380
00:17:25,300 --> 00:17:28,870
method there are<font color="#E5E5E5"> some stuff going on in</font>

381
00:17:27,069 --> 00:17:31,510
the very<font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> but it's not</font>

382
00:17:28,870 --> 00:17:34,330
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> the most</font><font color="#E5E5E5"> interesting stuff</font>

383
00:17:31,510 --> 00:17:40,690
here is<font color="#CCCCCC"> the execute interception method</font>

384
00:17:34,330 --> 00:17:42,460
so something is intercepted<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> you</font>

385
00:17:40,690 --> 00:17:43,240
look at the static view<font color="#E5E5E5"> of the class we</font>

386
00:17:42,460 --> 00:17:45,520
have<font color="#E5E5E5"> several members</font>

387
00:17:43,240 --> 00:17:46,990
there's the interception model

388
00:17:45,520 --> 00:17:50,110
and we have to intercept<font color="#E5E5E5"> the handler</font>

389
00:17:46,990 --> 00:17:53,500
instances and what we can do is we can

390
00:17:50,110 --> 00:17:55,959
<font color="#E5E5E5">say okay we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a we want to</font>

391
00:17:53,500 --> 00:17:58,690
<font color="#E5E5E5">start a post activate interception</font><font color="#CCCCCC"> and</font>

392
00:17:55,960 --> 00:18:02,470
we can define the<font color="#CCCCCC"> Interceptor handlers</font>

393
00:17:58,690 --> 00:18:06,430
instances in that way that a target

394
00:18:02,470 --> 00:18:08,620
<font color="#CCCCCC">object</font><font color="#E5E5E5"> will be used as a Interceptor</font>

395
00:18:06,430 --> 00:18:11,740
handler for<font color="#E5E5E5"> a post activate interception</font>

396
00:18:08,620 --> 00:18:14,139
<font color="#E5E5E5">and what we can also do is we can define</font>

397
00:18:11,740 --> 00:18:16,120
<font color="#E5E5E5">a method which is invoked on the</font>

398
00:18:14,140 --> 00:18:19,150
Interceptor handler<font color="#E5E5E5"> which is which is</font>

399
00:18:16,120 --> 00:18:21,189
<font color="#E5E5E5">our object during</font><font color="#CCCCCC"> the post activate</font>

400
00:18:19,150 --> 00:18:23,710
<font color="#CCCCCC">interception and the call stack is</font>

401
00:18:21,190 --> 00:18:26,680
pretty easy<font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> for method calls</font>

402
00:18:23,710 --> 00:18:28,750
<font color="#E5E5E5">we have the intercept term</font><font color="#CCCCCC"> and intercept</font>

403
00:18:26,680 --> 00:18:30,250
<font color="#E5E5E5">the</font><font color="#CCCCCC"> main method handler read object</font><font color="#E5E5E5"> we</font>

404
00:18:28,750 --> 00:18:32,170
have<font color="#E5E5E5"> to intercept the method handler</font>

405
00:18:30,250 --> 00:18:34,960
execute interception then we have the

406
00:18:32,170 --> 00:18:37,270
simple interception chain invoke in the

407
00:18:34,960 --> 00:18:41,290
involved next<font color="#E5E5E5"> interception in zone and</font>

408
00:18:37,270 --> 00:18:44,740
at the very end<font color="#E5E5E5"> what is happening is we</font>

409
00:18:41,290 --> 00:18:46,629
have<font color="#E5E5E5"> a method</font><font color="#CCCCCC"> object which is not</font><font color="#E5E5E5"> a Java</font>

410
00:18:44,740 --> 00:18:50,860
along<font color="#CCCCCC"> or reflect method object but a</font>

411
00:18:46,630 --> 00:18:52,810
abstraction from<font color="#E5E5E5"> it and the get Java</font>

412
00:18:50,860 --> 00:18:55,000
method is called which is<font color="#E5E5E5"> which returns</font>

413
00:18:52,810 --> 00:18:57,820
<font color="#E5E5E5">a char along a reflect method object and</font>

414
00:18:55,000 --> 00:18:59,820
it is in the invoke method using<font color="#E5E5E5"> in</font>

415
00:18:57,820 --> 00:19:02,560
coordinate which is<font color="#CCCCCC"> a method</font><font color="#E5E5E5"> invocation</font>

416
00:18:59,820 --> 00:19:04,629
<font color="#E5E5E5">we can define the instance we cannot</font>

417
00:19:02,560 --> 00:19:07,149
define the<font color="#CCCCCC"> arca arguments but</font><font color="#E5E5E5"> it doesn't</font>

418
00:19:04,630 --> 00:19:09,610
matter in this case<font color="#E5E5E5"> and we can define</font>

419
00:19:07,150 --> 00:19:11,560
the method which is<font color="#E5E5E5"> involved in</font><font color="#CCCCCC"> for</font>

420
00:19:09,610 --> 00:19:13,899
<font color="#E5E5E5">example if you use a class which is</font>

421
00:19:11,560 --> 00:19:15,520
called template symbol and it's very

422
00:19:13,900 --> 00:19:17,860
<font color="#CCCCCC">well-known</font><font color="#E5E5E5"> but we will see it later and</font>

423
00:19:15,520 --> 00:19:21,129
if you invoke<font color="#E5E5E5"> the neutrons for my method</font>

424
00:19:17,860 --> 00:19:27,129
on<font color="#E5E5E5"> this on this on</font><font color="#CCCCCC"> an on an instance of</font>

425
00:19:21,130 --> 00:19:29,380
the<font color="#CCCCCC"> class you can get code execution and</font>

426
00:19:27,130 --> 00:19:31,060
<font color="#E5E5E5">this I catch it</font><font color="#CCCCCC"> well I</font><font color="#E5E5E5"> think I needed</font>

427
00:19:29,380 --> 00:19:33,990
<font color="#E5E5E5">about three days</font><font color="#CCCCCC"> to find the gadget just</font>

428
00:19:31,060 --> 00:19:36,610
<font color="#CCCCCC">to arrange</font><font color="#E5E5E5"> all the objects</font><font color="#CCCCCC"> together and</font>

429
00:19:33,990 --> 00:19:39,850
it takes a little a<font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> time but</font>

430
00:19:36,610 --> 00:19:41,530
it's not<font color="#E5E5E5"> that much time I have another</font>

431
00:19:39,850 --> 00:19:45,100
ketchup which is called<font color="#E5E5E5"> return of the</font>

432
00:19:41,530 --> 00:19:47,350
<font color="#E5E5E5">Rhino there are some script there</font>

433
00:19:45,100 --> 00:19:49,240
scripting support<font color="#CCCCCC"> in the Java runtime</font>

434
00:19:47,350 --> 00:19:52,090
<font color="#CCCCCC">environment</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> you can run</font>

435
00:19:49,240 --> 00:19:55,090
JavaScript<font color="#E5E5E5"> code in Java and the engine</font>

436
00:19:52,090 --> 00:19:58,480
which<font color="#CCCCCC"> is used in Java six and seven is</font>

437
00:19:55,090 --> 00:20:01,449
called<font color="#CCCCCC"> Rhino</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> eight it is nos Nizam</font>

438
00:19:58,480 --> 00:20:04,750
and the gadget is using classes from

439
00:20:01,450 --> 00:20:06,970
<font color="#E5E5E5">Rhyno the interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> Oracle</font>

440
00:20:04,750 --> 00:20:09,400
applied some<font color="#E5E5E5"> I call I call it hardening</font>

441
00:20:06,970 --> 00:20:12,370
to those<font color="#E5E5E5"> classes</font><font color="#CCCCCC"> so most of them</font><font color="#E5E5E5"> are not</font>

442
00:20:09,400 --> 00:20:16,150
serializable<font color="#E5E5E5"> anymore but if you look at</font>

443
00:20:12,370 --> 00:20:21,399
for<font color="#E5E5E5"> example open JDK which is bundled</font>

444
00:20:16,150 --> 00:20:23,830
<font color="#E5E5E5">for example in Debian or Ubuntu they are</font>

445
00:20:21,400 --> 00:20:25,450
using the latest Rhino version in the

446
00:20:23,830 --> 00:20:28,750
latest Rhino version which you can<font color="#E5E5E5"> find</font>

447
00:20:25,450 --> 00:20:30,160
at<font color="#CCCCCC"> modes Mozilla it's not hardened so</font>

448
00:20:28,750 --> 00:20:32,530
most<font color="#E5E5E5"> of the classes are still</font>

449
00:20:30,160 --> 00:20:35,590
serializable<font color="#E5E5E5"> and you can construct a</font>

450
00:20:32,530 --> 00:20:38,470
catch it there<font color="#E5E5E5"> and in</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> in work also</font>

451
00:20:35,590 --> 00:20:41,860
<font color="#E5E5E5">as your</font><font color="#CCCCCC"> lies and also invoke a method on</font>

452
00:20:38,470 --> 00:20:44,890
<font color="#E5E5E5">a</font><font color="#CCCCCC"> sterilized object I will</font><font color="#E5E5E5"> release the</font>

453
00:20:41,860 --> 00:20:47,709
catch it soon<font color="#E5E5E5"> it's in very old</font><font color="#CCCCCC"> catch it</font>

454
00:20:44,890 --> 00:20:50,020
because<font color="#CCCCCC"> it</font><font color="#E5E5E5"> only works for Java 7 update</font>

455
00:20:47,710 --> 00:20:52,330
<font color="#E5E5E5">13 which</font><font color="#CCCCCC"> is about three years</font><font color="#E5E5E5"> old</font><font color="#CCCCCC"> but</font>

456
00:20:50,020 --> 00:20:54,610
<font color="#CCCCCC">still</font><font color="#E5E5E5"> as I said if you have a system</font>

457
00:20:52,330 --> 00:20:57,100
which is Debian<font color="#CCCCCC"> or Ubuntu India running</font>

458
00:20:54,610 --> 00:21:00,729
the<font color="#CCCCCC"> open JDK it still works</font><font color="#E5E5E5"> because they</font>

459
00:20:57,100 --> 00:21:04,449
haven't applied the hardening<font color="#E5E5E5"> there</font><font color="#CCCCCC"> okay</font>

460
00:21:00,730 --> 00:21:07,120
<font color="#E5E5E5">that was an example</font><font color="#CCCCCC"> catch it and here</font>

461
00:21:04,450 --> 00:21:09,400
are<font color="#E5E5E5"> some</font><font color="#CCCCCC"> recommendations if you're</font>

462
00:21:07,120 --> 00:21:13,239
interested<font color="#E5E5E5"> in looking for caches by your</font>

463
00:21:09,400 --> 00:21:15,610
own look for<font color="#CCCCCC"> methods which which are in</font>

464
00:21:13,240 --> 00:21:18,160
serializable classes and do stuff on

465
00:21:15,610 --> 00:21:20,379
files<font color="#E5E5E5"> or trigger method</font><font color="#CCCCCC"> calls either</font>

466
00:21:18,160 --> 00:21:24,850
using<font color="#E5E5E5"> reflection or doing something</font><font color="#CCCCCC"> like</font>

467
00:21:20,380 --> 00:21:29,020
property introspection invoking getters

468
00:21:24,850 --> 00:21:32,290
or look at native<font color="#E5E5E5"> calls and find out if</font>

469
00:21:29,020 --> 00:21:34,750
those methods are are being called

470
00:21:32,290 --> 00:21:37,540
either from read object or read<font color="#CCCCCC"> resolve</font>

471
00:21:34,750 --> 00:21:41,320
or<font color="#CCCCCC"> to string or hash code or finalize or</font>

472
00:21:37,540 --> 00:21:46,899
any other trampoline<font color="#CCCCCC"> class you can find</font>

473
00:21:41,320 --> 00:21:47,850
<font color="#CCCCCC">in your target</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> this works pretty</font>

474
00:21:46,900 --> 00:21:51,970
well

475
00:21:47,850 --> 00:21:54,699
<font color="#E5E5E5">but there's a cool concept</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> you can</font>

476
00:21:51,970 --> 00:21:57,550
also<font color="#E5E5E5"> find in JavaScript ACMA script</font><font color="#CCCCCC"> six</font>

477
00:21:54,700 --> 00:22:00,000
proxies<font color="#CCCCCC"> you also have it in</font><font color="#E5E5E5"> Java which</font>

478
00:21:57,550 --> 00:22:02,590
are called Java long reflect proxies and

479
00:22:00,000 --> 00:22:05,320
there are two implementations<font color="#CCCCCC"> of that</font>

480
00:22:02,590 --> 00:22:07,060
the<font color="#E5E5E5"> first one is</font><font color="#CCCCCC"> the native one from the</font>

481
00:22:05,320 --> 00:22:09,220
<font color="#E5E5E5">Java Runtime environment which is called</font>

482
00:22:07,060 --> 00:22:11,679
<font color="#E5E5E5">Java long reflect proxy in more</font>

483
00:22:09,220 --> 00:22:12,460
invocation<font color="#E5E5E5"> Hitler and there's another</font>

484
00:22:11,680 --> 00:22:14,350
invocation

485
00:22:12,460 --> 00:22:16,540
<font color="#CCCCCC">the face which is</font><font color="#E5E5E5"> called llaves</font><font color="#CCCCCC"> youtube</font>

486
00:22:14,350 --> 00:22:18,909
proxy<font color="#CCCCCC"> method</font><font color="#E5E5E5"> handler but they're working</font>

487
00:22:16,540 --> 00:22:21,159
<font color="#CCCCCC">in the same</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> so what you can do is</font>

488
00:22:18,910 --> 00:22:24,730
you can create<font color="#E5E5E5"> an proxy which implements</font>

489
00:22:21,160 --> 00:22:28,480
a interface<font color="#E5E5E5"> and if you invoke a method</font>

490
00:22:24,730 --> 00:22:35,250
on the proxy<font color="#E5E5E5"> like to string this call is</font>

491
00:22:28,480 --> 00:22:38,200
forwarded to a invocation<font color="#E5E5E5"> Handler and</font>

492
00:22:35,250 --> 00:22:40,720
and the invocation<font color="#E5E5E5"> handler does</font>

493
00:22:38,200 --> 00:22:43,180
something interesting then<font color="#E5E5E5"> I have an</font>

494
00:22:40,720 --> 00:22:45,250
example<font color="#E5E5E5"> for you I have the example</font>

495
00:22:43,180 --> 00:22:48,400
invocation handler which implements

496
00:22:45,250 --> 00:22:50,410
<font color="#E5E5E5">utilizable invocation handler and the</font>

497
00:22:48,400 --> 00:22:52,720
<font color="#CCCCCC">notation handler interface requires only</font>

498
00:22:50,410 --> 00:22:55,660
<font color="#E5E5E5">one method to be implemented which is</font>

499
00:22:52,720 --> 00:22:58,000
invoke and what we do in the invoke

500
00:22:55,660 --> 00:23:00,370
method is just write down<font color="#E5E5E5"> which method</font>

501
00:22:58,000 --> 00:23:05,530
<font color="#E5E5E5">is called that's the invocation Handler</font>

502
00:23:00,370 --> 00:23:08,639
<font color="#E5E5E5">and now we create an proxy for a</font>

503
00:23:05,530 --> 00:23:11,590
interface called<font color="#E5E5E5"> Java util map so a map</font>

504
00:23:08,640 --> 00:23:14,040
and<font color="#E5E5E5"> we use the invocation invocation</font>

505
00:23:11,590 --> 00:23:16,959
handler which I just showed<font color="#CCCCCC"> to you</font><font color="#E5E5E5"> and</font>

506
00:23:14,040 --> 00:23:19,120
create a new proxy instance using the

507
00:23:16,960 --> 00:23:21,160
interface<font color="#E5E5E5"> and the handler and then</font>

508
00:23:19,120 --> 00:23:24,939
invoke the<font color="#E5E5E5"> two string method on the</font>

509
00:23:21,160 --> 00:23:28,150
proxy and if you run this code<font color="#CCCCCC"> you will</font>

510
00:23:24,940 --> 00:23:31,600
see the following<font color="#E5E5E5"> lines on the console</font>

511
00:23:28,150 --> 00:23:34,090
that's a two string called and now think

512
00:23:31,600 --> 00:23:37,899
about invocation handlers which are

513
00:23:34,090 --> 00:23:41,379
serializable<font color="#CCCCCC"> and do</font><font color="#E5E5E5"> nasty</font><font color="#CCCCCC"> things like</font>

514
00:23:37,900 --> 00:23:44,650
<font color="#E5E5E5">caching method objects or redirecting</font>

515
00:23:41,380 --> 00:23:47,410
calls<font color="#CCCCCC"> to to delegates and stuff like</font>

516
00:23:44,650 --> 00:23:49,600
that and to be<font color="#E5E5E5"> honest usually that's the</font>

517
00:23:47,410 --> 00:23:51,160
easiest way to find caches<font color="#E5E5E5"> i getcha to</font>

518
00:23:49,600 --> 00:23:56,500
look at invocation handler<font color="#CCCCCC"> or method</font>

519
00:23:51,160 --> 00:23:59,740
handlers<font color="#CCCCCC"> if you're not</font><font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in</font>

520
00:23:56,500 --> 00:24:01,870
<font color="#CCCCCC">doing manual research by to</font><font color="#E5E5E5"> find gadgets</font>

521
00:23:59,740 --> 00:24:05,010
you<font color="#CCCCCC"> can also use</font><font color="#E5E5E5"> existing tools and</font>

522
00:24:01,870 --> 00:24:09,629
there's a nice tool from Chris Rojas

523
00:24:05,010 --> 00:24:12,310
<font color="#CCCCCC">it's called Inspector</font><font color="#E5E5E5"> Gadget</font><font color="#CCCCCC"> and it's</font>

524
00:24:09,630 --> 00:24:13,630
not that<font color="#CCCCCC"> much code he implement it's</font>

525
00:24:12,310 --> 00:24:16,300
really great it's<font color="#CCCCCC"> just the object</font>

526
00:24:13,630 --> 00:24:18,460
<font color="#E5E5E5">database were where he stores</font><font color="#CCCCCC"> metadata</font>

527
00:24:16,300 --> 00:24:21,399
<font color="#E5E5E5">of all</font><font color="#CCCCCC"> classes which can be found in the</font>

528
00:24:18,460 --> 00:24:23,530
class path<font color="#E5E5E5"> and later on you can query</font>

529
00:24:21,400 --> 00:24:25,300
<font color="#CCCCCC">the database</font><font color="#E5E5E5"> and say</font><font color="#CCCCCC"> okay give me</font><font color="#E5E5E5"> all</font>

530
00:24:23,530 --> 00:24:26,320
objects which implement<font color="#E5E5E5"> different</font>

531
00:24:25,300 --> 00:24:28,029
classes which

532
00:24:26,320 --> 00:24:29,799
implements<font color="#CCCCCC"> utilizable and have a read</font>

533
00:24:28,029 --> 00:24:31,779
object or for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> a read resolve</font>

534
00:24:29,799 --> 00:24:34,120
method<font color="#E5E5E5"> and now you know</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> let's look</font>

535
00:24:31,779 --> 00:24:36,820
<font color="#E5E5E5">at those or you can also say okay give</font>

536
00:24:34,120 --> 00:24:41,199
me<font color="#CCCCCC"> all up classes which have a read</font>

537
00:24:36,820 --> 00:24:43,059
object<font color="#E5E5E5"> and eventually call or</font><font color="#CCCCCC"> do the</font>

538
00:24:41,200 --> 00:24:44,860
<font color="#E5E5E5">reflection later on so you can just</font>

539
00:24:43,059 --> 00:24:46,658
define queries it takes a while and<font color="#E5E5E5"> then</font>

540
00:24:44,860 --> 00:24:48,158
<font color="#CCCCCC">you will</font><font color="#E5E5E5"> get the output and I think it's</font>

541
00:24:46,659 --> 00:24:52,840
also<font color="#E5E5E5"> the way Chris did for the cool</font>

542
00:24:48,159 --> 00:24:55,630
gadgets<font color="#CCCCCC"> you found</font><font color="#E5E5E5"> okay and now let's say</font>

543
00:24:52,840 --> 00:24:58,049
you were able<font color="#E5E5E5"> to find a captured it's an</font>

544
00:24:55,630 --> 00:25:00,850
invocation<font color="#E5E5E5"> handler</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you're able to</font>

545
00:24:58,049 --> 00:25:02,799
<font color="#CCCCCC">influence in the invocation handling</font>

546
00:25:00,850 --> 00:25:07,120
that way that<font color="#E5E5E5"> you are able to call a</font>

547
00:25:02,799 --> 00:25:09,070
method on a serialized object and you

548
00:25:07,120 --> 00:25:12,039
can<font color="#CCCCCC"> say which method</font><font color="#E5E5E5"> there are some</font>

549
00:25:09,070 --> 00:25:14,439
tricks for that<font color="#E5E5E5"> to turn this then in</font>

550
00:25:12,039 --> 00:25:16,960
code execution<font color="#E5E5E5"> for example the most</font>

551
00:25:14,440 --> 00:25:20,049
<font color="#E5E5E5">famous one</font><font color="#CCCCCC"> is the demco</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ACT trick</font>

552
00:25:16,960 --> 00:25:24,269
<font color="#E5E5E5">the template simple one and worse</font>

553
00:25:20,049 --> 00:25:28,450
happening there is a class from the

554
00:25:24,269 --> 00:25:31,690
salon is<font color="#CCCCCC"> XSLT processors used and this</font>

555
00:25:28,450 --> 00:25:33,759
class is<font color="#E5E5E5"> serializable</font><font color="#CCCCCC"> and it has some</font>

556
00:25:31,690 --> 00:25:35,830
members and one of the members<font color="#CCCCCC"> is a</font>

557
00:25:33,759 --> 00:25:38,200
<font color="#E5E5E5">two-dimensional</font><font color="#CCCCCC"> byte array in the</font>

558
00:25:35,830 --> 00:25:41,799
<font color="#CCCCCC">two-dimensional byte array is used</font><font color="#E5E5E5"> to</font>

559
00:25:38,200 --> 00:25:44,340
create classes from bytes<font color="#E5E5E5"> to a class</font>

560
00:25:41,799 --> 00:25:46,899
object<font color="#E5E5E5"> and later on invoke and you</font>

561
00:25:44,340 --> 00:25:49,240
create a<font color="#E5E5E5"> new instance from</font><font color="#CCCCCC"> the class</font><font color="#E5E5E5"> so</font>

562
00:25:46,899 --> 00:25:51,908
just<font color="#CCCCCC"> the pipes</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> taken into the</font><font color="#E5E5E5"> define</font>

563
00:25:49,240 --> 00:25:53,889
class method on a class loader and then

564
00:25:51,909 --> 00:25:56,049
<font color="#E5E5E5">the new instance of</font><font color="#CCCCCC"> the object of the</font>

565
00:25:53,889 --> 00:25:58,629
class is created<font color="#E5E5E5"> and that's the typical</font>

566
00:25:56,049 --> 00:26:00,549
way<font color="#E5E5E5"> all the gadgets currently work</font>

567
00:25:58,629 --> 00:26:03,070
<font color="#E5E5E5">I have also the example here I've</font>

568
00:26:00,549 --> 00:26:05,289
<font color="#E5E5E5">created a template simple</font><font color="#CCCCCC"> utilized</font>

569
00:26:03,070 --> 00:26:07,450
<font color="#E5E5E5">object I read it in and I call new</font>

570
00:26:05,289 --> 00:26:11,950
<font color="#CCCCCC">Transformer on the gadget</font><font color="#E5E5E5"> and you see</font>

571
00:26:07,450 --> 00:26:14,950
the kulluk there's another trick which

572
00:26:11,950 --> 00:26:18,120
is not that known in my opinion<font color="#E5E5E5"> I call</font>

573
00:26:14,950 --> 00:26:20,559
it the<font color="#E5E5E5"> initial context that lookup trick</font>

574
00:26:18,120 --> 00:26:23,110
the guy who first talked<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it on</font>

575
00:26:20,559 --> 00:26:25,509
Twitter was<font color="#E5E5E5"> zero thoughts and he</font>

576
00:26:23,110 --> 00:26:28,570
<font color="#E5E5E5">published a catch it in a string library</font>

577
00:26:25,509 --> 00:26:31,240
<font color="#E5E5E5">and the class is</font><font color="#CCCCCC"> cheeky a</font><font color="#E5E5E5"> transaction</font>

578
00:26:28,570 --> 00:26:34,539
manager<font color="#E5E5E5"> and what is happening during a</font>

579
00:26:31,240 --> 00:26:38,320
read object call is that<font color="#E5E5E5"> initial context</font>

580
00:26:34,539 --> 00:26:40,150
<font color="#E5E5E5">that lookup is invoked</font><font color="#CCCCCC"> and he can</font>

581
00:26:38,320 --> 00:26:43,120
specify the chain and<font color="#CCCCCC"> she and</font>

582
00:26:40,150 --> 00:26:45,400
<font color="#CCCCCC">in there and the</font><font color="#E5E5E5"> chin di Java naming</font>

583
00:26:43,120 --> 00:26:48,639
directory service<font color="#E5E5E5"> is pretty cool</font><font color="#CCCCCC"> if you</font>

584
00:26:45,400 --> 00:26:51,970
<font color="#CCCCCC">specify their armi</font><font color="#E5E5E5"> URL</font><font color="#CCCCCC"> what is</font><font color="#E5E5E5"> happening</font>

585
00:26:48,640 --> 00:26:54,100
then is the cherry or your your

586
00:26:51,970 --> 00:26:58,330
applications trying to connect to<font color="#CCCCCC"> an</font>

587
00:26:54,100 --> 00:27:00,669
<font color="#E5E5E5">error my server</font><font color="#CCCCCC"> and resolve a remote</font>

588
00:26:58,330 --> 00:27:03,129
<font color="#CCCCCC">object</font><font color="#E5E5E5"> and if you craft or create a</font>

589
00:27:00,670 --> 00:27:05,410
special error my server<font color="#E5E5E5"> you can say</font><font color="#CCCCCC"> ok</font>

590
00:27:03,130 --> 00:27:08,260
please download this class from<font color="#E5E5E5"> my HTTP</font>

591
00:27:05,410 --> 00:27:10,360
server and use it later on<font color="#E5E5E5"> and create an</font>

592
00:27:08,260 --> 00:27:13,300
instance from<font color="#E5E5E5"> it and you get reliable</font>

593
00:27:10,360 --> 00:27:16,510
code execution then and the new thing it

594
00:27:13,300 --> 00:27:18,760
about is here is<font color="#E5E5E5"> that you can also use</font>

595
00:27:16,510 --> 00:27:20,470
this<font color="#E5E5E5"> technique which is</font><font color="#CCCCCC"> used in</font><font color="#E5E5E5"> a gadget</font>

596
00:27:18,760 --> 00:27:23,020
<font color="#E5E5E5">you can also use it as a general a</font>

597
00:27:20,470 --> 00:27:25,660
general way for example<font color="#CCCCCC"> if you use a</font>

598
00:27:23,020 --> 00:27:28,990
class which is called JDBC rosette in

599
00:27:25,660 --> 00:27:33,100
pull which is<font color="#CCCCCC"> realisable</font><font color="#E5E5E5"> and you invoke</font>

600
00:27:28,990 --> 00:27:35,740
the execute method on<font color="#CCCCCC"> it also a</font><font color="#E5E5E5"> chain</font><font color="#CCCCCC"> di</font>

601
00:27:33,100 --> 00:27:41,080
<font color="#E5E5E5">look up the locker and then you get code</font>

602
00:27:35,740 --> 00:27:43,420
execution<font color="#CCCCCC"> if</font><font color="#E5E5E5"> I can example</font><font color="#CCCCCC"> here this</font>

603
00:27:41,080 --> 00:27:46,389
<font color="#CCCCCC">rail lies hid we see rosette info object</font>

604
00:27:43,420 --> 00:27:48,790
and invoked execute and we<font color="#CCCCCC"> will see here</font>

605
00:27:46,390 --> 00:27:52,450
in the terminal<font color="#E5E5E5"> I launched an app cat</font>

606
00:27:48,790 --> 00:27:55,240
listener<font color="#E5E5E5"> and we see that the process is</font>

607
00:27:52,450 --> 00:27:58,270
connecting on<font color="#E5E5E5"> 4 1 2 3</font><font color="#CCCCCC"> 4 5 and we see</font>

608
00:27:55,240 --> 00:27:59,650
that there's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> armi it's an indicator</font>

609
00:27:58,270 --> 00:28:04,240
<font color="#E5E5E5">that someone wants to talk</font><font color="#CCCCCC"> to you a</font>

610
00:27:59,650 --> 00:28:06,310
<font color="#CCCCCC">while RMI protocol so either you use the</font>

611
00:28:04,240 --> 00:28:08,200
first technique from<font color="#CCCCCC"> Adam Kodiak or</font>

612
00:28:06,310 --> 00:28:09,940
<font color="#CCCCCC">quino's also use this one</font><font color="#E5E5E5"> there are</font>

613
00:28:08,200 --> 00:28:11,470
general techniques and you can also for

614
00:28:09,940 --> 00:28:14,140
<font color="#CCCCCC">example</font><font color="#E5E5E5"> use it in other these</font>

615
00:28:11,470 --> 00:28:16,780
theorization<font color="#E5E5E5"> frameworks but some if you</font>

616
00:28:14,140 --> 00:28:24,460
use extreme or<font color="#CCCCCC"> or</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> mess or stuff like</font>

617
00:28:16,780 --> 00:28:26,680
<font color="#CCCCCC">that</font><font color="#E5E5E5"> ok</font><font color="#CCCCCC"> for the ones who really</font><font color="#E5E5E5"> get very</font>

618
00:28:24,460 --> 00:28:30,310
<font color="#E5E5E5">quickly code execution there's a tool</font>

619
00:28:26,680 --> 00:28:33,550
which allows<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to generate serialized</font>

620
00:28:30,310 --> 00:28:35,139
object gadgets which do that the things

621
00:28:33,550 --> 00:28:36,760
you want to<font color="#E5E5E5"> have like getting code</font>

622
00:28:35,140 --> 00:28:40,060
execution run<font color="#CCCCCC"> memory cuts and stuff like</font>

623
00:28:36,760 --> 00:28:42,280
that the tool is<font color="#CCCCCC"> called</font><font color="#E5E5E5"> why so serial</font>

624
00:28:40,060 --> 00:28:44,710
it's you can find it on github it's from

625
00:28:42,280 --> 00:28:46,629
Chris<font color="#CCCCCC"> Rowe half again and it includes</font>

626
00:28:44,710 --> 00:28:48,280
all<font color="#E5E5E5"> the gadgets which he found and also</font>

627
00:28:46,630 --> 00:28:51,780
<font color="#E5E5E5">other researchers found</font>

628
00:28:48,280 --> 00:28:53,649
<font color="#CCCCCC">I guess it's it will be the repository</font>

629
00:28:51,780 --> 00:28:53,980
<font color="#E5E5E5">repository for the future where you can</font>

630
00:28:53,650 --> 00:28:55,419
find

631
00:28:53,980 --> 00:28:59,020
the gadgets which you can use for

632
00:28:55,419 --> 00:29:00,549
exploitation<font color="#E5E5E5"> and for example the</font><font color="#CCCCCC"> Commons</font>

633
00:28:59,020 --> 00:29:03,220
collection<font color="#CCCCCC"> catch it is in</font><font color="#E5E5E5"> there to</font>

634
00:29:00,549 --> 00:29:05,889
spring the Karoubi<font color="#CCCCCC"> the very interesting</font>

635
00:29:03,220 --> 00:29:08,440
one<font color="#E5E5E5"> cherry</font><font color="#CCCCCC"> seven catch it and also</font><font color="#E5E5E5"> the</font>

636
00:29:05,890 --> 00:29:10,870
<font color="#E5E5E5">common pin utils but others for example</font>

637
00:29:08,440 --> 00:29:15,880
from<font color="#CCCCCC"> Chris and Schneider and Navarro the</font>

638
00:29:10,870 --> 00:29:19,899
new ones and<font color="#E5E5E5"> the way you use it is</font><font color="#CCCCCC"> just</font>

639
00:29:15,880 --> 00:29:22,720
you run the<font color="#E5E5E5"> program</font><font color="#CCCCCC"> you say okay I</font><font color="#E5E5E5"> want</font>

640
00:29:19,900 --> 00:29:25,179
the<font color="#CCCCCC"> groovy catch it</font><font color="#E5E5E5"> and you say the</font>

641
00:29:22,720 --> 00:29:27,280
command you want<font color="#E5E5E5"> to execute in</font><font color="#CCCCCC"> would</font>

642
00:29:25,179 --> 00:29:28,960
<font color="#E5E5E5">generate you the serialized object</font>

643
00:29:27,280 --> 00:29:31,418
stream which you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to send or put it</font>

644
00:29:28,960 --> 00:29:35,559
in a file wherever it is read from<font color="#CCCCCC"> and</font>

645
00:29:31,419 --> 00:29:37,150
that's it<font color="#E5E5E5"> it's straightforward</font><font color="#CCCCCC"> if you do</font>

646
00:29:35,559 --> 00:29:39,790
<font color="#E5E5E5">something like red teaming or stuff</font><font color="#CCCCCC"> like</font>

647
00:29:37,150 --> 00:29:41,710
<font color="#E5E5E5">that and you</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> want to leave traces</font>

648
00:29:39,790 --> 00:29:45,549
I wouldn't use<font color="#CCCCCC"> runtime get runtime dot</font>

649
00:29:41,710 --> 00:29:48,160
exe<font color="#E5E5E5"> because you leave traces for example</font>

650
00:29:45,549 --> 00:29:50,679
in prefetch and<font color="#E5E5E5"> stuff like that</font><font color="#CCCCCC"> I would</font>

651
00:29:48,160 --> 00:29:53,020
really recommend you<font color="#CCCCCC"> to use scripting</font>

652
00:29:50,679 --> 00:29:54,070
languages so you<font color="#E5E5E5"> write your payload in</font>

653
00:29:53,020 --> 00:29:56,590
scripting languages for example

654
00:29:54,070 --> 00:29:59,110
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> and invoke the JavaScript</font>

655
00:29:56,590 --> 00:30:01,629
interpreter to execute this<font color="#E5E5E5"> JavaScript</font>

656
00:29:59,110 --> 00:30:04,240
later and then the<font color="#CCCCCC"> Chava script will be</font>

657
00:30:01,630 --> 00:30:05,860
in the memory nobody can see it<font color="#E5E5E5"> so maybe</font>

658
00:30:04,240 --> 00:30:07,510
on the network he is<font color="#E5E5E5"> able to see it</font>

659
00:30:05,860 --> 00:30:09,760
<font color="#E5E5E5">before</font><font color="#CCCCCC"> short stuff like but you won't</font>

660
00:30:07,510 --> 00:30:13,929
leave<font color="#E5E5E5"> any traces which command is</font>

661
00:30:09,760 --> 00:30:17,520
invoked that's I think<font color="#E5E5E5"> a pretty cool way</font>

662
00:30:13,929 --> 00:30:19,410
and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have a couple of ways you</font><font color="#CCCCCC"> use</font>

663
00:30:17,520 --> 00:30:21,879
scripting languages for example

664
00:30:19,410 --> 00:30:24,010
<font color="#CCCCCC">JavaScript can</font><font color="#E5E5E5"> be used with the Java</font>

665
00:30:21,880 --> 00:30:25,570
<font color="#E5E5E5">Runtime environment if</font><font color="#CCCCCC"> you have Ruby in</font>

666
00:30:24,010 --> 00:30:32,230
the<font color="#E5E5E5"> class path or a</font><font color="#CCCCCC"> bean shell you can</font>

667
00:30:25,570 --> 00:30:34,540
<font color="#E5E5E5">use them it's straightforward</font><font color="#CCCCCC"> ok now we</font>

668
00:30:32,230 --> 00:30:38,140
will come to<font color="#CCCCCC"> the code whites but</font><font color="#E5E5E5"> per</font><font color="#CCCCCC"> 8</font>

669
00:30:34,540 --> 00:30:42,129
<font color="#E5E5E5">so the results of our research effort</font>

670
00:30:38,140 --> 00:30:44,230
<font color="#E5E5E5">and when I talk</font><font color="#CCCCCC"> about research effort we</font>

671
00:30:42,130 --> 00:30:46,840
did not do any any research at all in my

672
00:30:44,230 --> 00:30:49,120
opinion<font color="#CCCCCC"> because the way we did was we</font>

673
00:30:46,840 --> 00:30:51,399
<font color="#CCCCCC">had a big pen test and we saw some</font>

674
00:30:49,120 --> 00:30:53,620
target systems they were running<font color="#E5E5E5"> this</font>

675
00:30:51,400 --> 00:30:56,740
application<font color="#E5E5E5"> from this</font><font color="#CCCCCC"> vendor</font><font color="#E5E5E5"> it just</font>

676
00:30:53,620 --> 00:30:59,500
unloaded it<font color="#E5E5E5"> we looked at</font><font color="#CCCCCC"> it one or two</font>

677
00:30:56,740 --> 00:31:02,380
<font color="#CCCCCC">days</font><font color="#E5E5E5"> not more or less and these are the</font>

678
00:30:59,500 --> 00:31:03,750
<font color="#E5E5E5">results so we found</font><font color="#CCCCCC"> an very easy</font><font color="#E5E5E5"> spot</font><font color="#CCCCCC"> of</font>

679
00:31:02,380 --> 00:31:06,880
<font color="#CCCCCC">a bug in Symantec endpoint protection</font>

680
00:31:03,750 --> 00:31:07,539
manager and as you guys<font color="#E5E5E5"> know</font><font color="#CCCCCC"> it's in AV</font>

681
00:31:06,880 --> 00:31:10,149
<font color="#CCCCCC">so it</font>

682
00:31:07,539 --> 00:31:12,879
cool target because if you<font color="#E5E5E5"> get</font><font color="#CCCCCC"> Davey</font><font color="#E5E5E5"> you</font>

683
00:31:10,149 --> 00:31:16,209
usually get nice credentials or you can

684
00:31:12,879 --> 00:31:17,649
also deploy on all<font color="#E5E5E5"> semantic lines your</font>

685
00:31:16,210 --> 00:31:20,679
code and<font color="#CCCCCC"> run it our system</font>

686
00:31:17,649 --> 00:31:25,029
which is I think<font color="#E5E5E5"> the easiest way</font><font color="#CCCCCC"> to get</font>

687
00:31:20,679 --> 00:31:27,549
<font color="#E5E5E5">to main</font><font color="#CCCCCC"> admin then I also</font><font color="#E5E5E5"> found the pack</font>

688
00:31:25,029 --> 00:31:31,299
in<font color="#E5E5E5"> Atlas in bamboo this is the</font><font color="#CCCCCC"> pack I</font>

689
00:31:27,549 --> 00:31:34,989
showed at<font color="#CCCCCC"> Hara last year it was in HTTP</font>

690
00:31:31,299 --> 00:31:38,049
requests my coworker<font color="#E5E5E5"> Marcus mastani</font>

691
00:31:34,989 --> 00:31:43,929
found a bug in<font color="#CCCCCC"> combat edge server</font>

692
00:31:38,049 --> 00:31:46,210
<font color="#CCCCCC">I found the pack in</font><font color="#E5E5E5"> the Apache ActiveMQ</font>

693
00:31:43,929 --> 00:31:50,109
which was also<font color="#E5E5E5"> discovered by Christian</font>

694
00:31:46,210 --> 00:31:51,999
<font color="#E5E5E5">and Alvaro</font><font color="#CCCCCC"> the one which is in my</font>

695
00:31:50,109 --> 00:31:53,759
<font color="#E5E5E5">opinion most interesting is the</font><font color="#CCCCCC"> Oracle</font>

696
00:31:51,999 --> 00:31:56,979
WebLogic pack but<font color="#E5E5E5"> we will see it later</font>

697
00:31:53,759 --> 00:31:59,679
<font color="#CCCCCC">Mac</font><font color="#E5E5E5"> was found the</font><font color="#CCCCCC"> buck in or</font><font color="#E5E5E5"> an HP</font>

698
00:31:56,979 --> 00:32:02,559
service manager<font color="#E5E5E5"> then I have a newer one</font>

699
00:31:59,679 --> 00:32:07,509
which is in spring NQ p which is Java

700
00:32:02,559 --> 00:32:09,700
messaging and we have still open Oracle

701
00:32:07,509 --> 00:32:12,849
Hyperion and<font color="#CCCCCC"> SOP netweaver</font><font color="#E5E5E5"> which I</font>

702
00:32:09,700 --> 00:32:14,529
dropped<font color="#E5E5E5"> it</font><font color="#CCCCCC"> in filtrate</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> there are</font>

703
00:32:12,849 --> 00:32:17,109
other<font color="#E5E5E5"> box I can talk about it because</font>

704
00:32:14,529 --> 00:32:19,239
we're<font color="#E5E5E5"> in client engagement or because it</font>

705
00:32:17,109 --> 00:32:21,908
makes sense to gave another<font color="#E5E5E5"> give another</font>

706
00:32:19,239 --> 00:32:28,029
<font color="#E5E5E5">target on another conference because</font>

707
00:32:21,909 --> 00:32:29,859
it's a<font color="#E5E5E5"> sub sub class okay now I want</font><font color="#CCCCCC"> to</font>

708
00:32:28,029 --> 00:32:31,330
show you some details<font color="#CCCCCC"> about the oracle</font>

709
00:32:29,859 --> 00:32:33,428
<font color="#CCCCCC">weblogic back</font>

710
00:32:31,330 --> 00:32:35,830
what is<font color="#E5E5E5"> oracle weblogic</font><font color="#CCCCCC"> oracle</font><font color="#E5E5E5"> weblogic</font>

711
00:32:33,429 --> 00:32:39,539
is a<font color="#CCCCCC"> application server it's like</font><font color="#E5E5E5"> Tomcat</font>

712
00:32:35,830 --> 00:32:42,789
but but with a<font color="#E5E5E5"> lot of more functionality</font>

713
00:32:39,539 --> 00:32:46,779
and the equivalent<font color="#CCCCCC"> product</font><font color="#E5E5E5"> of IBM's</font>

714
00:32:42,789 --> 00:32:48,700
WebSphere and usually use it to run<font color="#E5E5E5"> your</font>

715
00:32:46,779 --> 00:32:51,099
web applications on it<font color="#CCCCCC"> if you have the</font>

716
00:32:48,700 --> 00:32:54,190
old way<font color="#E5E5E5"> to</font><font color="#CCCCCC"> develop web applications or</font>

717
00:32:51,099 --> 00:32:56,080
<font color="#E5E5E5">no no</font><font color="#CCCCCC"> chase</font><font color="#E5E5E5"> or something like</font><font color="#CCCCCC"> that but</font>

718
00:32:54,190 --> 00:32:59,049
<font color="#E5E5E5">the most interesting most interesting</font>

719
00:32:56,080 --> 00:33:00,879
thing is<font color="#E5E5E5"> that Oracle</font><font color="#CCCCCC"> also uses</font><font color="#E5E5E5"> Oracle</font>

720
00:32:59,049 --> 00:33:03,489
<font color="#E5E5E5">WebLogic us</font>

721
00:33:00,879 --> 00:33:05,529
<font color="#CCCCCC">it's middleware</font><font color="#E5E5E5"> so for example or</font>

722
00:33:03,489 --> 00:33:07,799
Enterprise Manager is running<font color="#CCCCCC"> on</font><font color="#E5E5E5"> Oracle</font>

723
00:33:05,529 --> 00:33:11,139
<font color="#E5E5E5">WebLogic Oracle VM manager which is the</font>

724
00:33:07,799 --> 00:33:14,408
virtual environment like VM<font color="#E5E5E5"> VMware on</font>

725
00:33:11,139 --> 00:33:17,309
Oracle<font color="#E5E5E5"> it's using Oracle WebLogic or at</font>

726
00:33:14,409 --> 00:33:19,899
least<font color="#E5E5E5"> piece or using it or Hyperion and</font>

727
00:33:17,309 --> 00:33:21,220
<font color="#E5E5E5">Oracle PeopleSoft which is the HR</font>

728
00:33:19,899 --> 00:33:23,080
software of Oracle<font color="#CCCCCC"> issues</font>

729
00:33:21,220 --> 00:33:25,539
<font color="#E5E5E5">Oracle WebLogic which means all</font><font color="#CCCCCC"> of them</font>

730
00:33:23,080 --> 00:33:28,689
are affected by this back so if you want

731
00:33:25,539 --> 00:33:34,210
<font color="#CCCCCC">to get</font><font color="#E5E5E5"> HHR data go for PeopleSoft with</font>

732
00:33:28,690 --> 00:33:39,010
this<font color="#CCCCCC"> bug</font><font color="#E5E5E5"> the CVE which was assigned as</font>

733
00:33:34,210 --> 00:33:43,270
<font color="#CCCCCC">cv 2015 485 to I sent the part to Oracle</font>

734
00:33:39,010 --> 00:33:45,490
on the 21st<font color="#E5E5E5"> of July in 2015</font><font color="#CCCCCC"> after Oracle</font>

735
00:33:43,270 --> 00:33:48,610
WebLogic his realization remote code

736
00:33:45,490 --> 00:33:51,490
execution vulnerability<font color="#CCCCCC"> I wrote d2</font>

737
00:33:48,610 --> 00:33:53,740
advisory with Tupac's<font color="#E5E5E5"> the first one was</font>

738
00:33:51,490 --> 00:33:55,600
the<font color="#E5E5E5"> first part was using the comments</font>

739
00:33:53,740 --> 00:33:58,600
collection captured from<font color="#E5E5E5"> Chris</font><font color="#CCCCCC"> Rojas and</font>

740
00:33:55,600 --> 00:34:00,639
I also showed them<font color="#E5E5E5"> that is not</font><font color="#CCCCCC"> a problem</font>

741
00:33:58,600 --> 00:34:02,949
<font color="#E5E5E5">with comments collection but in general</font>

742
00:34:00,640 --> 00:34:04,630
that's<font color="#E5E5E5"> why I look for another</font><font color="#CCCCCC"> gadget</font><font color="#E5E5E5"> and</font>

743
00:34:02,950 --> 00:34:06,909
tell them<font color="#E5E5E5"> okay here's</font><font color="#CCCCCC"> another gadget</font><font color="#E5E5E5"> so</font>

744
00:34:04,630 --> 00:34:10,359
you should<font color="#E5E5E5"> really think about using</font>

745
00:34:06,909 --> 00:34:13,270
object input stream<font color="#CCCCCC"> and I also</font>

746
00:34:10,359 --> 00:34:15,549
<font color="#E5E5E5">recommended</font><font color="#CCCCCC"> to them to implement look at</font>

747
00:34:13,270 --> 00:34:18,190
the Association by perience<font color="#E5E5E5"> which is the</font>

748
00:34:15,550 --> 00:34:21,310
common technique and yet that's<font color="#E5E5E5"> the park</font>

749
00:34:18,190 --> 00:34:24,730
which<font color="#E5E5E5"> foxglove security dropped it's</font>

750
00:34:21,310 --> 00:34:26,500
funny I think<font color="#E5E5E5"> Stephen Breen</font><font color="#CCCCCC"> saw the talk</font>

751
00:34:24,730 --> 00:34:30,369
which I gave at hack<font color="#E5E5E5"> pro last year and</font>

752
00:34:26,500 --> 00:34:32,050
was<font color="#E5E5E5"> inspired by it and as</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> was easy in</font>

753
00:34:30,369 --> 00:34:34,599
the<font color="#CCCCCC"> packs were easy to find so it took</font>

754
00:34:32,050 --> 00:34:36,780
him I guess one or two or<font color="#E5E5E5"> three days and</font>

755
00:34:34,599 --> 00:34:39,790
<font color="#E5E5E5">then he had them and of course this</font>

756
00:34:36,780 --> 00:34:43,270
<font color="#CCCCCC">common collections</font><font color="#E5E5E5"> a thing is worth to</font>

757
00:34:39,790 --> 00:34:45,399
<font color="#CCCCCC">drop it right</font><font color="#E5E5E5"> now so it was bad for me</font>

758
00:34:43,270 --> 00:34:51,849
because<font color="#CCCCCC"> I still was in the</font><font color="#E5E5E5"> process with</font>

759
00:34:45,399 --> 00:34:53,440
Oracle but it's<font color="#CCCCCC"> okay it's the game from</font>

760
00:34:51,849 --> 00:34:56,200
architectures point of view Oracle

761
00:34:53,440 --> 00:34:58,510
WebLogic is very interesting because

762
00:34:56,199 --> 00:35:01,509
<font color="#E5E5E5">Oracle WebLogic is using multi-protocol</font>

763
00:34:58,510 --> 00:35:03,790
lessness<font color="#CCCCCC"> so you have one</font><font color="#E5E5E5"> port and it</font><font color="#CCCCCC"> is</font>

764
00:35:01,510 --> 00:35:07,030
<font color="#CCCCCC">serving several</font><font color="#E5E5E5"> protocols like HTTP</font>

765
00:35:03,790 --> 00:35:12,220
<font color="#E5E5E5">HTTPS and the interesting one which I</font>

766
00:35:07,030 --> 00:35:14,290
used was<font color="#E5E5E5"> t3 and the secure one t3 s and</font>

767
00:35:12,220 --> 00:35:15,819
that's<font color="#E5E5E5"> also the outcome from the output</font>

768
00:35:14,290 --> 00:35:19,990
from the<font color="#E5E5E5"> startup</font><font color="#CCCCCC"> of a WebLogic you see</font>

769
00:35:15,820 --> 00:35:21,339
<font color="#CCCCCC">okay on port 7001</font><font color="#E5E5E5"> t3 is running in</font><font color="#CCCCCC"> IOP</font>

770
00:35:19,990 --> 00:35:26,259
by the way you can also explore it over

771
00:35:21,339 --> 00:35:28,359
<font color="#CCCCCC">ie IRL P but t3 was easier for me and</font>

772
00:35:26,260 --> 00:35:31,240
it's<font color="#E5E5E5"> not always the port 7001</font>

773
00:35:28,359 --> 00:35:34,509
<font color="#CCCCCC">it's also running</font><font color="#E5E5E5"> on 84</font><font color="#CCCCCC"> for 3 so not</font>

774
00:35:31,240 --> 00:35:37,029
only<font color="#E5E5E5"> look for a</font><font color="#CCCCCC"> 7000 won</font>

775
00:35:34,510 --> 00:35:40,150
and the<font color="#E5E5E5"> t3 protocol is an it's an error</font>

776
00:35:37,030 --> 00:35:43,900
my for a call and of course<font color="#CCCCCC"> Java</font><font color="#E5E5E5"> has its</font>

777
00:35:40,150 --> 00:35:46,390
own<font color="#CCCCCC"> era</font><font color="#E5E5E5"> implementation Oracle has again</font>

778
00:35:43,900 --> 00:35:48,430
a new<font color="#CCCCCC"> web logic has also its own</font>

779
00:35:46,390 --> 00:35:51,160
implementation because<font color="#CCCCCC"> WebLogic was</font>

780
00:35:48,430 --> 00:35:55,690
acquired by<font color="#E5E5E5"> BA and so they had their own</font>

781
00:35:51,160 --> 00:35:58,060
<font color="#CCCCCC">implementation of RMI and</font><font color="#E5E5E5"> it and it</font>

782
00:35:55,690 --> 00:35:59,890
exists since the early days<font color="#E5E5E5"> of Oracle</font>

783
00:35:58,060 --> 00:36:02,680
WebLogic<font color="#E5E5E5"> so whenever you could use</font>

784
00:35:59,890 --> 00:36:06,549
<font color="#E5E5E5">Oracle WebLogic t3 was included and was</font>

785
00:36:02,680 --> 00:36:08,710
used for example<font color="#E5E5E5"> for</font><font color="#CCCCCC"> je</font><font color="#E5E5E5"> remoting or</font><font color="#CCCCCC"> AMX</font>

786
00:36:06,550 --> 00:36:12,600
<font color="#E5E5E5">sort of charm and extension where you</font>

787
00:36:08,710 --> 00:36:16,060
can monitor<font color="#CCCCCC"> service which is used widely</font>

788
00:36:12,600 --> 00:36:18,700
<font color="#E5E5E5">one fact which is not known that very</font>

789
00:36:16,060 --> 00:36:24,100
well<font color="#CCCCCC"> I think is that you can also you</font>

790
00:36:18,700 --> 00:36:26,290
can also tunnel t3 over HTTP<font color="#E5E5E5"> you need to</font>

791
00:36:24,100 --> 00:36:29,980
enable<font color="#E5E5E5"> them and need to enable it in the</font>

792
00:36:26,290 --> 00:36:35,859
console<font color="#CCCCCC"> but it's just one</font><font color="#E5E5E5"> click and then</font>

793
00:36:29,980 --> 00:36:38,740
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> tunnel over HTTP</font><font color="#CCCCCC"> okay so how I</font>

794
00:36:35,859 --> 00:36:40,750
found the<font color="#CCCCCC"> pack it was</font><font color="#E5E5E5"> very funny just I</font>

795
00:36:38,740 --> 00:36:42,580
just<font color="#CCCCCC"> found the</font><font color="#E5E5E5"> bacteria in the NAP of my</font>

796
00:36:40,750 --> 00:36:49,180
daughter and I thought<font color="#CCCCCC"> about my time</font>

797
00:36:42,580 --> 00:36:52,029
<font color="#CCCCCC">when</font><font color="#E5E5E5"> I was a desert</font><font color="#CCCCCC"> defense company and</font>

798
00:36:49,180 --> 00:36:57,970
we also used t3 and I just wrote a small

799
00:36:52,030 --> 00:36:59,800
<font color="#E5E5E5">example client t3 example program and I</font>

800
00:36:57,970 --> 00:37:02,919
<font color="#E5E5E5">use the classroom</font><font color="#CCCCCC"> order kept</font><font color="#E5E5E5"> logic which</font>

801
00:36:59,800 --> 00:37:05,650
is<font color="#CCCCCC"> t3</font><font color="#E5E5E5"> and I just try to get a connection</font>

802
00:37:02,920 --> 00:37:07,390
<font color="#E5E5E5">I realized</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> there's an exception</font>

803
00:37:05,650 --> 00:37:09,760
happening when I run this<font color="#CCCCCC"> program and</font>

804
00:37:07,390 --> 00:37:14,020
some default user sent so I thought<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> I</font>

805
00:37:09,760 --> 00:37:17,070
don't send anything and if you now look

806
00:37:14,020 --> 00:37:19,780
at<font color="#E5E5E5"> the way how to three client works</font>

807
00:37:17,070 --> 00:37:21,970
<font color="#CCCCCC">it's doing a lot of stuff it</font><font color="#E5E5E5"> checks the</font>

808
00:37:19,780 --> 00:37:24,520
protocol<font color="#E5E5E5"> in the very beginning</font><font color="#CCCCCC"> it</font>

809
00:37:21,970 --> 00:37:30,100
creates in<font color="#CCCCCC"> so-called Arc JVM object and</font>

810
00:37:24,520 --> 00:37:32,680
then it will create and stop and invoke

811
00:37:30,100 --> 00:37:33,940
in on the<font color="#CCCCCC"> error I stopped a specific</font>

812
00:37:32,680 --> 00:37:37,210
method which is called<font color="#E5E5E5"> find or create</font>

813
00:37:33,940 --> 00:37:39,640
client context and that's it<font color="#E5E5E5"> and if you</font>

814
00:37:37,210 --> 00:37:43,150
look and if we look at<font color="#E5E5E5"> the class food</font>

815
00:37:39,640 --> 00:37:45,210
<font color="#E5E5E5">services stop</font><font color="#CCCCCC"> we see that</font><font color="#E5E5E5"> a method is</font>

816
00:37:43,150 --> 00:37:48,250
called<font color="#CCCCCC"> right</font><font color="#E5E5E5"> object WL and that's</font>

817
00:37:45,210 --> 00:37:51,340
civilization<font color="#E5E5E5"> so</font><font color="#CCCCCC"> a trigger civilization</font>

818
00:37:48,250 --> 00:37:53,640
and if you go<font color="#CCCCCC"> into the server site</font><font color="#E5E5E5"> and</font>

819
00:37:51,340 --> 00:37:56,500
if you go into<font color="#E5E5E5"> the server side</font>

820
00:37:53,640 --> 00:37:59,440
implementation<font color="#E5E5E5"> we will see</font><font color="#CCCCCC"> okay</font>

821
00:37:56,500 --> 00:38:03,340
the method is involved method starts in

822
00:37:59,440 --> 00:38:05,560
<font color="#CCCCCC">an invoke it parses a byte</font><font color="#E5E5E5"> which just is</font>

823
00:38:03,340 --> 00:38:07,359
the differentiator<font color="#CCCCCC"> which method should</font>

824
00:38:05,560 --> 00:38:12,730
be called we see the<font color="#CCCCCC"> find or create</font>

825
00:38:07,359 --> 00:38:17,560
client context and yeah if we go<font color="#E5E5E5"> into</font>

826
00:38:12,730 --> 00:38:23,230
details we see that in this method a

827
00:38:17,560 --> 00:38:27,190
read object call<font color="#E5E5E5"> is used and it expects</font>

828
00:38:23,230 --> 00:38:30,820
<font color="#E5E5E5">a user info object and I just created a</font>

829
00:38:27,190 --> 00:38:32,440
small program to do the same thing but

830
00:38:30,820 --> 00:38:34,840
instead<font color="#E5E5E5"> of sending a user info object</font>

831
00:38:32,440 --> 00:38:36,849
which is<font color="#E5E5E5"> used for</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> authentication I</font>

832
00:38:34,840 --> 00:38:42,070
just send<font color="#E5E5E5"> the gadget and that's it</font>

833
00:38:36,849 --> 00:38:46,150
<font color="#E5E5E5">that's the back okay now we have</font><font color="#CCCCCC"> oracle</font>

834
00:38:42,070 --> 00:38:50,200
<font color="#CCCCCC">weblogic</font><font color="#E5E5E5"> patched a number one oracle</font><font color="#CCCCCC"> of</font>

835
00:38:46,150 --> 00:38:51,730
course try to fix it very<font color="#CCCCCC"> quickly</font><font color="#E5E5E5"> so</font>

836
00:38:50,200 --> 00:38:55,180
what they did<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just implemented a</font>

837
00:38:51,730 --> 00:38:58,330
<font color="#E5E5E5">blacklist and by</font><font color="#CCCCCC"> sub-classing object</font>

838
00:38:55,180 --> 00:39:00,129
<font color="#CCCCCC">Country momentum resolve</font><font color="#E5E5E5"> class and</font>

839
00:38:58,330 --> 00:39:02,500
adding a blacklist<font color="#CCCCCC"> filter</font><font color="#E5E5E5"> for all</font><font color="#CCCCCC"> those</font>

840
00:39:00,130 --> 00:39:05,980
classes here which is not much at all

841
00:39:02,500 --> 00:39:10,180
<font color="#E5E5E5">and it was easy to bypass</font><font color="#CCCCCC"> Christian and</font>

842
00:39:05,980 --> 00:39:12,670
Navarro showed a terrace<font color="#CCCCCC"> I 2016 that you</font>

843
00:39:10,180 --> 00:39:14,379
can use for<font color="#CCCCCC"> example bypass gadgets to</font>

844
00:39:12,670 --> 00:39:16,839
get around this

845
00:39:14,380 --> 00:39:19,900
there were also newer public gadgets in

846
00:39:16,839 --> 00:39:23,490
<font color="#E5E5E5">Warsaw serial which you can use checkup</font>

847
00:39:19,900 --> 00:39:26,380
<font color="#CCCCCC">panes</font><font color="#E5E5E5"> found another bypass sketch it in</font>

848
00:39:23,490 --> 00:39:28,598
<font color="#CCCCCC">Sheamus in Sheamus implementation of</font>

849
00:39:26,380 --> 00:39:30,580
<font color="#E5E5E5">Oracle WebLogic just by using those</font>

850
00:39:28,599 --> 00:39:35,020
classes here text message<font color="#E5E5E5"> simple XML</font>

851
00:39:30,580 --> 00:39:38,040
message in the object message<font color="#CCCCCC"> symbol</font><font color="#E5E5E5"> you</font>

852
00:39:35,020 --> 00:39:41,230
can<font color="#E5E5E5"> easily</font><font color="#CCCCCC"> bypass the blacklist filter</font>

853
00:39:38,040 --> 00:39:47,080
yeah in the<font color="#E5E5E5"> Chilean</font><font color="#CCCCCC"> s1 was planned to be</font>

854
00:39:41,230 --> 00:39:51,869
dropped here<font color="#E5E5E5"> so he it was fixed in in</font>

855
00:39:47,080 --> 00:39:55,440
the last CPU so now we have patch<font color="#CCCCCC"> two</font>

856
00:39:51,869 --> 00:39:58,330
which was in April so<font color="#E5E5E5"> this month</font>

857
00:39:55,440 --> 00:40:00,790
<font color="#CCCCCC">necklace</font><font color="#E5E5E5"> unchanged which is bad because</font>

858
00:39:58,330 --> 00:40:01,720
<font color="#E5E5E5">there were already new gadgets in Y so</font>

859
00:40:00,790 --> 00:40:03,700
serial and

860
00:40:01,720 --> 00:40:07,209
<font color="#E5E5E5">so</font><font color="#CCCCCC"> alvaro released serial killer at</font>

861
00:40:03,700 --> 00:40:10,118
<font color="#CCCCCC">Elysee so they were</font><font color="#E5E5E5"> bypass gadgets the</font>

862
00:40:07,210 --> 00:40:12,190
chain a sketch it was fixed<font color="#CCCCCC"> and a couple</font>

863
00:40:10,119 --> 00:40:14,080
<font color="#E5E5E5">of other things which I haven't looked</font>

864
00:40:12,190 --> 00:40:16,030
at it<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now need</font><font color="#E5E5E5"> to look at but it</font>

865
00:40:14,080 --> 00:40:19,720
wasn't that<font color="#CCCCCC"> interesting for</font><font color="#E5E5E5"> me because</font>

866
00:40:16,030 --> 00:40:25,630
<font color="#CCCCCC">it</font><font color="#E5E5E5"> was not about serialization so by</font>

867
00:40:19,720 --> 00:40:28,149
<font color="#E5E5E5">passing</font><font color="#CCCCCC"> touch to still a class from the</font>

868
00:40:25,630 --> 00:40:30,820
bypass<font color="#E5E5E5"> sketch it</font><font color="#CCCCCC"> WebLogic one is working</font>

869
00:40:28,150 --> 00:40:35,230
<font color="#CCCCCC">from a Varro</font><font color="#E5E5E5"> so you can still get code</font>

870
00:40:30,820 --> 00:40:36,609
execution<font color="#E5E5E5"> in in</font><font color="#CCCCCC"> Oracle WebLogic</font><font color="#E5E5E5"> but I</font>

871
00:40:35,230 --> 00:40:38,500
was<font color="#E5E5E5"> really interested</font><font color="#CCCCCC"> to show you</font>

872
00:40:36,609 --> 00:40:40,540
something new<font color="#E5E5E5"> so I started to look at</font>

873
00:40:38,500 --> 00:40:42,400
<font color="#E5E5E5">patch</font><font color="#CCCCCC"> one and also look for a pipe a</font>

874
00:40:40,540 --> 00:40:43,599
<font color="#E5E5E5">sketch it and</font><font color="#CCCCCC"> you can imagine now what</font>

875
00:40:42,400 --> 00:40:46,800
is<font color="#E5E5E5"> coming</font>

876
00:40:43,599 --> 00:40:48,670
that's a bypass sketch it it's called

877
00:40:46,800 --> 00:40:50,230
conversation<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the class is called</font>

878
00:40:48,670 --> 00:40:53,650
conversation what is<font color="#E5E5E5"> happening here is</font>

879
00:40:50,230 --> 00:40:55,570
read object is<font color="#E5E5E5"> involved and</font><font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> see</font>

880
00:40:53,650 --> 00:40:57,220
that there's a<font color="#E5E5E5"> deserialized</font>

881
00:40:55,570 --> 00:40:59,290
<font color="#CCCCCC">Robo method and what is happening here</font>

882
00:40:57,220 --> 00:41:01,509
is<font color="#E5E5E5"> that another object input stream is</font>

883
00:40:59,290 --> 00:41:04,210
<font color="#E5E5E5">used in read object and this object</font>

884
00:41:01,510 --> 00:41:06,760
input stream does not implement any

885
00:41:04,210 --> 00:41:08,170
filtering<font color="#E5E5E5"> at all so you can bypass the</font>

886
00:41:06,760 --> 00:41:11,380
<font color="#E5E5E5">blacklist filter which was implemented</font>

887
00:41:08,170 --> 00:41:14,109
<font color="#CCCCCC">by Oracle</font><font color="#E5E5E5"> that's it and it took me</font><font color="#CCCCCC"> about</font>

888
00:41:11,380 --> 00:41:16,420
I<font color="#E5E5E5"> don't know four</font><font color="#CCCCCC"> hours to find a bypass</font>

889
00:41:14,109 --> 00:41:19,029
gadget because<font color="#E5E5E5"> you have 250 megabytes of</font>

890
00:41:16,420 --> 00:41:21,160
classes in Oracle WebLogic<font color="#CCCCCC"> so that's the</font>

891
00:41:19,030 --> 00:41:24,520
way<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> use to get more code execution</font>

892
00:41:21,160 --> 00:41:26,200
right now with a<font color="#CCCCCC"> patch</font><font color="#E5E5E5"> system and I also</font>

893
00:41:24,520 --> 00:41:28,420
looked at<font color="#E5E5E5"> the Java source ketchup which</font>

894
00:41:26,200 --> 00:41:31,270
<font color="#E5E5E5">I found and was funny because I didn't</font>

895
00:41:28,420 --> 00:41:33,190
debug it when they patched it so I spent

896
00:41:31,270 --> 00:41:34,810
some<font color="#E5E5E5"> time</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> it and I realized</font><font color="#CCCCCC"> okay the</font>

897
00:41:33,190 --> 00:41:38,349
way<font color="#E5E5E5"> Oracle implemented the</font><font color="#CCCCCC"> look-ahead</font>

898
00:41:34,810 --> 00:41:41,259
civilization by prm's it has some

899
00:41:38,349 --> 00:41:43,750
drawbacks<font color="#E5E5E5"> for example the resolve class</font>

900
00:41:41,260 --> 00:41:46,300
method is<font color="#E5E5E5"> only involved for classes not</font>

901
00:41:43,750 --> 00:41:49,000
for interfaces they're only interface

902
00:41:46,300 --> 00:41:51,040
which I use<font color="#CCCCCC"> in my gadget which comes</font>

903
00:41:49,000 --> 00:41:54,400
from Java<font color="#E5E5E5"> assist which is a class which</font>

904
00:41:51,040 --> 00:41:56,560
is blocked<font color="#E5E5E5"> is a interface so interfaces</font>

905
00:41:54,400 --> 00:41:58,000
are not blocked so chalasis<font color="#E5E5E5"> method</font>

906
00:41:56,560 --> 00:41:59,109
handlers are not blocked so my catch it

907
00:41:58,000 --> 00:42:01,150
still works

908
00:41:59,109 --> 00:42:03,430
which is funny<font color="#E5E5E5"> didn't realize it in the</font>

909
00:42:01,150 --> 00:42:05,500
very beginning<font color="#E5E5E5"> the</font><font color="#CCCCCC"> only thing what</font><font color="#E5E5E5"> they</font>

910
00:42:03,430 --> 00:42:07,629
<font color="#CCCCCC">blocked</font><font color="#E5E5E5"> right now is the technique from</font>

911
00:42:05,500 --> 00:42:09,040
<font color="#E5E5E5">Adam Kodiak which is the template single</font>

912
00:42:07,630 --> 00:42:11,109
technique so this is this<font color="#E5E5E5"> one gets</font>

913
00:42:09,040 --> 00:42:13,210
blocked<font color="#E5E5E5"> but</font><font color="#CCCCCC"> uh but</font><font color="#E5E5E5"> as you already</font>

914
00:42:11,109 --> 00:42:15,340
<font color="#E5E5E5">learned</font><font color="#CCCCCC"> in the previous</font><font color="#E5E5E5"> slides you</font><font color="#CCCCCC"> can</font>

915
00:42:13,210 --> 00:42:17,800
also use the<font color="#CCCCCC"> jdb rosette</font>

916
00:42:15,340 --> 00:42:21,400
execute technique<font color="#E5E5E5"> and it still works</font><font color="#CCCCCC"> so</font>

917
00:42:17,800 --> 00:42:25,450
<font color="#CCCCCC">it's just by passing</font><font color="#E5E5E5"> this one so last</font>

918
00:42:21,400 --> 00:42:27,520
last slide or estimate<font color="#E5E5E5"> to come sure</font>

919
00:42:25,450 --> 00:42:29,529
I'm currently working on<font color="#E5E5E5"> a tool which is</font>

920
00:42:27,520 --> 00:42:32,680
<font color="#CCCCCC">called charm a searching exploitation</font>

921
00:42:29,530 --> 00:42:35,380
<font color="#CCCCCC">toolkit and you can sense your last</font>

922
00:42:32,680 --> 00:42:37,810
object<font color="#E5E5E5"> over messages it's a technique</font>

923
00:42:35,380 --> 00:42:40,890
called<font color="#CCCCCC"> Shamus and I will</font><font color="#E5E5E5"> release</font><font color="#CCCCCC"> it soon</font>

924
00:42:37,810 --> 00:42:43,630
so you banks are<font color="#CCCCCC"> using very often and</font>

925
00:42:40,890 --> 00:42:47,109
yeah<font color="#CCCCCC"> I will release it around</font><font color="#E5E5E5"> about</font>

926
00:42:43,630 --> 00:42:49,330
August<font color="#E5E5E5"> and the conclusion is about this</font>

927
00:42:47,110 --> 00:42:51,220
talk in my opinion<font color="#E5E5E5"> charity is you see</font>

928
00:42:49,330 --> 00:42:53,080
<font color="#E5E5E5">these realizations no rocket science</font>

929
00:42:51,220 --> 00:42:55,270
<font color="#E5E5E5">fine impacts is easy exploitation takes</font>

930
00:42:53,080 --> 00:42:56,170
a little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> more a lot of products are</font>

931
00:42:55,270 --> 00:42:58,000
affected by it

932
00:42:56,170 --> 00:42:59,140
research has started<font color="#E5E5E5"> again</font><font color="#CCCCCC"> and in my</font>

933
00:42:58,000 --> 00:43:01,330
opinion<font color="#E5E5E5"> will never end because people</font>

934
00:42:59,140 --> 00:43:03,120
<font color="#E5E5E5">don't realize as you can see from</font><font color="#CCCCCC"> a</font>

935
00:43:01,330 --> 00:43:06,270
timeline<font color="#CCCCCC"> that sewer</font><font color="#E5E5E5"> station is bad</font>

936
00:43:03,120 --> 00:43:06,270
that's it

