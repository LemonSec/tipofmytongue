1
00:00:01,199 --> 00:00:07,798
so we thought let's<font color="#E5E5E5"> do something where</font>

2
00:00:04,920 --> 00:00:10,500
the audience afterwards<font color="#CCCCCC"> knows</font><font color="#E5E5E5"> everything</font>

3
00:00:07,799 --> 00:00:12,960
from the start to the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> raw</font>

4
00:00:10,500 --> 00:00:16,230
<font color="#CCCCCC">hamburger Tex how to perform ro hammer</font>

5
00:00:12,960 --> 00:00:18,900
attacks<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> related work is</font>

6
00:00:16,230 --> 00:00:22,230
there so it's sort of a<font color="#E5E5E5"> walkthrough</font>

7
00:00:18,900 --> 00:00:25,919
guide through a game<font color="#E5E5E5"> or we thought of it</font>

8
00:00:22,230 --> 00:00:27,720
<font color="#E5E5E5">like</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> indie ro hammer the movie so my</font>

9
00:00:25,920 --> 00:00:30,300
name is Daniel goes and currently<font color="#E5E5E5"> a PhD</font>

10
00:00:27,720 --> 00:00:33,559
student at<font color="#CCCCCC"> University of Technology you</font>

11
00:00:30,300 --> 00:00:36,149
<font color="#E5E5E5">can reach me via Twitter</font><font color="#CCCCCC"> or email and</font>

12
00:00:33,559 --> 00:00:37,739
and my name is<font color="#E5E5E5"> Ken</font><font color="#CCCCCC"> Monson</font><font color="#E5E5E5"> Maurice</font><font color="#CCCCCC"> I am</font>

13
00:00:36,149 --> 00:00:39,450
<font color="#E5E5E5">for talk at</font><font color="#CCCCCC"> Curtin University</font><font color="#E5E5E5"> of</font>

14
00:00:37,739 --> 00:00:42,449
Technology you<font color="#CCCCCC"> can also join me on</font>

15
00:00:39,450 --> 00:00:43,890
<font color="#E5E5E5">Twitter or</font><font color="#CCCCCC"> via email</font><font color="#E5E5E5"> so I'll stand set</font>

16
00:00:42,450 --> 00:00:45,570
the goal<font color="#E5E5E5"> of this talk is</font><font color="#CCCCCC"> that you get</font>

17
00:00:43,890 --> 00:00:46,950
<font color="#E5E5E5">really a comprehensive overview of</font>

18
00:00:45,570 --> 00:00:49,559
rama's like because there have been<font color="#CCCCCC"> a</font>

19
00:00:46,950 --> 00:00:52,170
lot of<font color="#E5E5E5"> them in the past</font><font color="#CCCCCC"> last</font><font color="#E5E5E5"> few years</font>

20
00:00:49,559 --> 00:00:54,390
and also<font color="#E5E5E5"> that you can run the tools on</font>

21
00:00:52,170 --> 00:00:55,920
your<font color="#E5E5E5"> own</font><font color="#CCCCCC"> machine and</font><font color="#E5E5E5"> that's also</font>

22
00:00:54,390 --> 00:00:57,989
important see that you understand what's

23
00:00:55,920 --> 00:01:00,120
happening<font color="#CCCCCC"> and why it's happening so if</font>

24
00:00:57,989 --> 00:01:02,099
something doesn't work<font color="#E5E5E5"> then you know</font>

25
00:01:00,120 --> 00:01:03,570
<font color="#E5E5E5">that nothing is black magic and maybe</font>

26
00:01:02,100 --> 00:01:06,390
you can configure something<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that</font>

27
00:01:03,570 --> 00:01:08,299
works<font color="#CCCCCC"> so we will start</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> a bit of</font>

28
00:01:06,390 --> 00:01:11,280
background on<font color="#CCCCCC"> tyramine andrew hammer</font>

29
00:01:08,299 --> 00:01:14,400
<font color="#E5E5E5">also then explain you a step</font><font color="#CCCCCC"> by step</font>

30
00:01:11,280 --> 00:01:16,979
<font color="#CCCCCC">first how</font><font color="#E5E5E5"> can we flip it</font><font color="#CCCCCC"> using remote</font>

31
00:01:14,400 --> 00:01:20,130
then how can<font color="#CCCCCC"> we expect to beat flips and</font>

32
00:01:16,979 --> 00:01:22,650
how can we<font color="#CCCCCC"> beam ticket rohan</font><font color="#E5E5E5"> up before</font>

33
00:01:20,130 --> 00:01:25,589
concluding<font color="#E5E5E5"> so it's starting with the</font>

34
00:01:22,650 --> 00:01:27,030
background<font color="#CCCCCC"> okay so if</font><font color="#E5E5E5"> we want to talk</font>

35
00:01:25,590 --> 00:01:29,549
<font color="#CCCCCC">about Roy him at first of course we have</font>

36
00:01:27,030 --> 00:01:31,590
to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about how is DRM organized and</font>

37
00:01:29,549 --> 00:01:33,659
all of us know such a dear and<font color="#CCCCCC"> module</font><font color="#E5E5E5"> so</font>

38
00:01:31,590 --> 00:01:35,100
you<font color="#E5E5E5"> see the chips there and these</font>

39
00:01:33,659 --> 00:01:36,750
different<font color="#CCCCCC"> modules typically</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font>

40
00:01:35,100 --> 00:01:38,939
multiple<font color="#E5E5E5"> of</font><font color="#CCCCCC"> them in your</font><font color="#E5E5E5"> system and the</font>

41
00:01:36,750 --> 00:01:40,439
CPU operates them in separate channels

42
00:01:38,939 --> 00:01:43,110
and these<font color="#E5E5E5"> channels can operate</font>

43
00:01:40,439 --> 00:01:45,570
simultaneously so they<font color="#E5E5E5"> work in parallel</font>

44
00:01:43,110 --> 00:01:49,380
<font color="#E5E5E5">so we can double the throughput of your</font>

45
00:01:45,570 --> 00:01:51,240
<font color="#E5E5E5">DRM with that also the DRAM modules have</font>

46
00:01:49,380 --> 00:01:54,119
much of multiple<font color="#E5E5E5"> sites and these sides</font>

47
00:01:51,240 --> 00:01:57,000
are usually called ranks so here we have

48
00:01:54,119 --> 00:01:59,009
two sides and we have rank<font color="#E5E5E5"> 0 and rank 1</font>

49
00:01:57,000 --> 00:02:01,409
there are also<font color="#E5E5E5"> dimmed</font><font color="#CCCCCC"> with more ranks</font>

50
00:01:59,009 --> 00:02:03,619
but we won't go<font color="#E5E5E5"> into detail here</font><font color="#CCCCCC"> let's</font>

51
00:02:01,409 --> 00:02:07,350
look<font color="#E5E5E5"> at a chip instead a chip is</font>

52
00:02:03,619 --> 00:02:09,060
subdivided into multiple banks and<font color="#E5E5E5"> these</font>

53
00:02:07,350 --> 00:02:12,030
<font color="#E5E5E5">banks are then subdivided into multiple</font>

54
00:02:09,060 --> 00:02:12,870
<font color="#E5E5E5">rows each row is typically</font><font color="#CCCCCC"> 8</font><font color="#E5E5E5"> kilobytes</font>

55
00:02:12,030 --> 00:02:16,520
and<font color="#CCCCCC"> store</font>

56
00:02:12,870 --> 00:02:21,660
on<font color="#E5E5E5"> these eight kilobytes of single bits</font>

57
00:02:16,520 --> 00:02:24,450
in physical<font color="#E5E5E5"> DRAM cells to access one of</font>

58
00:02:21,660 --> 00:02:26,579
<font color="#E5E5E5">those</font><font color="#CCCCCC"> rows</font><font color="#E5E5E5"> we have to activate the row</font>

59
00:02:24,450 --> 00:02:29,670
and when we<font color="#E5E5E5"> activate the row it is</font>

60
00:02:26,580 --> 00:02:33,360
<font color="#E5E5E5">copied</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the row buffer</font><font color="#CCCCCC"> and we will</font>

61
00:02:29,670 --> 00:02:35,549
look at that in<font color="#CCCCCC"> detail so when the CPU</font>

62
00:02:33,360 --> 00:02:37,739
<font color="#E5E5E5">wants to access row</font><font color="#CCCCCC"> warning which is</font>

63
00:02:35,550 --> 00:02:40,380
highlighted<font color="#CCCCCC"> here</font><font color="#E5E5E5"> in orange</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see</font>

64
00:02:37,739 --> 00:02:42,989
that the row first is activated and then

65
00:02:40,380 --> 00:02:44,609
it is copied to<font color="#CCCCCC"> the row buffer and then</font>

66
00:02:42,989 --> 00:02:47,910
the value<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the row buffer is</font>

67
00:02:44,610 --> 00:02:49,769
returned<font color="#CCCCCC"> to the processor so now the CPU</font>

68
00:02:47,910 --> 00:02:51,959
<font color="#E5E5E5">wants to access a different</font><font color="#CCCCCC"> row for</font>

69
00:02:49,769 --> 00:02:53,970
instance the row<font color="#CCCCCC"> two you can see it has</font>

70
00:02:51,959 --> 00:02:55,500
to switch the row so now in the row

71
00:02:53,970 --> 00:02:57,060
buffer you can<font color="#E5E5E5"> see this is the orange</font>

72
00:02:55,500 --> 00:02:58,290
content but it wants to fetch the green

73
00:02:57,060 --> 00:03:02,010
content from<font color="#E5E5E5"> row two</font>

74
00:02:58,290 --> 00:03:06,298
so<font color="#E5E5E5"> row two is activated and with this it</font>

75
00:03:02,010 --> 00:03:09,000
<font color="#E5E5E5">is also copied to the row buffer this is</font>

76
00:03:06,299 --> 00:03:11,849
of course much slower than fetching

77
00:03:09,000 --> 00:03:14,130
something<font color="#E5E5E5"> which is already stored in the</font>

78
00:03:11,849 --> 00:03:16,560
row buffer<font color="#E5E5E5"> so if the CPU</font><font color="#CCCCCC"> wants to</font><font color="#E5E5E5"> again</font>

79
00:03:14,130 --> 00:03:19,109
excess Row<font color="#CCCCCC"> two</font><font color="#E5E5E5"> we will just go</font><font color="#CCCCCC"> through</font>

80
00:03:16,560 --> 00:03:21,780
this example<font color="#E5E5E5"> then Row</font><font color="#CCCCCC"> two is</font><font color="#E5E5E5"> already in</font>

81
00:03:19,109 --> 00:03:24,180
row buffer and then it will be a

82
00:03:21,780 --> 00:03:25,799
<font color="#CCCCCC">so-called</font><font color="#E5E5E5"> Rohit so here we have the</font>

83
00:03:24,180 --> 00:03:27,780
difference<font color="#CCCCCC"> between a</font><font color="#E5E5E5"> row</font><font color="#CCCCCC"> head</font><font color="#E5E5E5"> and the</font>

84
00:03:25,799 --> 00:03:29,940
row conflict which is<font color="#E5E5E5"> very much</font>

85
00:03:27,780 --> 00:03:33,390
<font color="#E5E5E5">comparable</font><font color="#CCCCCC"> to a cache miss and the cache</font>

86
00:03:29,940 --> 00:03:37,530
it so here basically<font color="#E5E5E5"> the row buffer</font>

87
00:03:33,390 --> 00:03:41,369
<font color="#E5E5E5">plays the role of a cache the theorem</font>

88
00:03:37,530 --> 00:03:43,470
<font color="#CCCCCC">says we have of course</font><font color="#E5E5E5"> constraints from</font>

89
00:03:41,370 --> 00:03:45,590
<font color="#E5E5E5">the physical world</font><font color="#CCCCCC"> so if you come from</font>

90
00:03:43,470 --> 00:03:48,090
<font color="#E5E5E5">software perspective</font><font color="#CCCCCC"> you think of course</font>

91
00:03:45,590 --> 00:03:50,579
<font color="#E5E5E5">hardware is perfect and has no errors</font>

92
00:03:48,090 --> 00:03:53,670
and everything just works<font color="#E5E5E5"> but in</font>

93
00:03:50,579 --> 00:03:56,239
practice these cells<font color="#E5E5E5"> leak their charge</font>

94
00:03:53,670 --> 00:03:59,059
over time and therefore<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have to</font>

95
00:03:56,239 --> 00:04:03,269
<font color="#E5E5E5">refresh the</font><font color="#CCCCCC"> content</font><font color="#E5E5E5"> of those cells</font>

96
00:03:59,060 --> 00:04:05,400
repetitively<font color="#E5E5E5"> so you what you</font><font color="#CCCCCC"> do is you</font>

97
00:04:03,269 --> 00:04:07,620
read the data<font color="#CCCCCC"> from the DRM cells into</font>

98
00:04:05,400 --> 00:04:09,900
the<font color="#E5E5E5"> DM row buffer and then you write the</font>

99
00:04:07,620 --> 00:04:12,269
<font color="#E5E5E5">same data back into the DRM cells and</font>

100
00:04:09,900 --> 00:04:15,120
with this step<font color="#E5E5E5"> you refresh the</font><font color="#CCCCCC"> content</font>

101
00:04:12,269 --> 00:04:16,739
that is<font color="#CCCCCC"> in the DRM</font><font color="#E5E5E5"> now this is a slow</font>

102
00:04:15,120 --> 00:04:18,870
<font color="#E5E5E5">step because while this happens you</font>

103
00:04:16,738 --> 00:04:21,298
cannot really<font color="#E5E5E5"> access any other roles in</font>

104
00:04:18,870 --> 00:04:24,000
the DRM so you want<font color="#E5E5E5"> to review</font>

105
00:04:21,298 --> 00:04:27,030
the number of<font color="#CCCCCC"> refreshes to a minimum</font><font color="#E5E5E5"> and</font>

106
00:04:24,000 --> 00:04:29,669
then the<font color="#CCCCCC"> deer</font><font color="#E5E5E5"> ddr4 and ddr3 standards</font>

107
00:04:27,030 --> 00:04:32,190
they define maximum<font color="#E5E5E5"> interval between</font>

108
00:04:29,669 --> 00:04:34,560
refreshes<font color="#CCCCCC"> to still guarantee data</font>

109
00:04:32,190 --> 00:04:36,539
integrity and the<font color="#E5E5E5"> DRM manufacturers has</font>

110
00:04:34,560 --> 00:04:40,379
to<font color="#E5E5E5"> build their cells in a way that they</font>

111
00:04:36,539 --> 00:04:43,949
can comply with this standard the cells

112
00:04:40,379 --> 00:04:45,659
<font color="#E5E5E5">of</font><font color="#CCCCCC"> course have more effect and one</font>

113
00:04:43,949 --> 00:04:47,789
effect<font color="#E5E5E5"> we can exploit that in the so</font>

114
00:04:45,659 --> 00:04:51,389
<font color="#E5E5E5">called</font><font color="#CCCCCC"> row hammer attack</font><font color="#E5E5E5"> is that cells</font>

115
00:04:47,789 --> 00:04:56,150
<font color="#E5E5E5">leak faster upon proximity</font><font color="#CCCCCC"> excesses so</font>

116
00:04:51,389 --> 00:04:58,919
if you access<font color="#CCCCCC"> to neighboring cells</font><font color="#E5E5E5"> the</font>

117
00:04:56,150 --> 00:05:03,060
surrounding<font color="#E5E5E5"> cells will leak that charge</font>

118
00:04:58,919 --> 00:05:06,719
faster<font color="#CCCCCC"> and then we might have a race</font>

119
00:05:03,060 --> 00:05:09,120
against the<font color="#E5E5E5"> next refresh here where the</font>

120
00:05:06,720 --> 00:05:11,610
next refresh will be fast enough<font color="#CCCCCC"> before</font>

121
00:05:09,120 --> 00:05:13,289
the cells<font color="#E5E5E5"> lost their charge and with</font>

122
00:05:11,610 --> 00:05:15,360
that we come to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> row hammer attack</font>

123
00:05:13,289 --> 00:05:16,979
the row hammer<font color="#CCCCCC"> techs are motherboard</font>

124
00:05:15,360 --> 00:05:19,080
<font color="#CCCCCC">vice described it like it's like</font>

125
00:05:16,979 --> 00:05:21,180
<font color="#CCCCCC">breaking</font><font color="#E5E5E5"> into an apartment by repeatedly</font>

126
00:05:19,080 --> 00:05:23,190
<font color="#CCCCCC">slamming a neighbor's door until the</font>

127
00:05:21,180 --> 00:05:25,530
<font color="#E5E5E5">vibrations open the door you were</font><font color="#CCCCCC"> after</font>

128
00:05:23,190 --> 00:05:28,949
so it's exactly what we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> doing here</font>

129
00:05:25,530 --> 00:05:32,039
<font color="#E5E5E5">so we want to change a bit in the middle</font>

130
00:05:28,949 --> 00:05:33,990
<font color="#E5E5E5">row that</font><font color="#CCCCCC"> is colored in wife's between</font>

131
00:05:32,039 --> 00:05:36,300
the orange and<font color="#E5E5E5"> green row and we activate</font>

132
00:05:33,990 --> 00:05:38,099
those two rows alternatingly and it's

133
00:05:36,300 --> 00:05:40,259
they are<font color="#CCCCCC"> always copied to the row buffer</font>

134
00:05:38,099 --> 00:05:44,580
and if we do<font color="#E5E5E5"> that long enough</font><font color="#CCCCCC"> we will</font>

135
00:05:40,259 --> 00:05:47,940
have<font color="#CCCCCC"> beatrice in</font><font color="#E5E5E5"> row</font><font color="#CCCCCC"> two so this is how</font>

136
00:05:44,580 --> 00:05:50,400
it generally<font color="#CCCCCC"> should work but activating</font>

137
00:05:47,940 --> 00:05:52,800
in<font color="#CCCCCC"> drm role that is</font><font color="#E5E5E5"> not a function</font><font color="#CCCCCC"> that</font>

138
00:05:50,400 --> 00:05:56,190
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can just call so we have to see how</font>

139
00:05:52,800 --> 00:05:57,000
we can<font color="#E5E5E5"> do that so in order to have</font><font color="#CCCCCC"> these</font>

140
00:05:56,190 --> 00:05:59,279
bit flips

141
00:05:57,000 --> 00:06:01,440
we have several requirements<font color="#CCCCCC"> so first</font>

142
00:05:59,279 --> 00:06:03,779
memory<font color="#CCCCCC"> accesses must must be uncashed</font>

143
00:06:01,440 --> 00:06:05,400
they have to<font color="#E5E5E5"> really reach the theorem as</font>

144
00:06:03,779 --> 00:06:08,159
we don't<font color="#E5E5E5"> have this effect on the theorem</font>

145
00:06:05,400 --> 00:06:10,109
<font color="#E5E5E5">we also need to have lots of them</font><font color="#CCCCCC"> in a</font>

146
00:06:08,159 --> 00:06:12,060
very<font color="#CCCCCC"> short time because this is really</font>

147
00:06:10,110 --> 00:06:13,800
race against<font color="#CCCCCC"> the next pro profession we</font>

148
00:06:12,060 --> 00:06:16,409
need to have as many accesses between

149
00:06:13,800 --> 00:06:18,240
two row refreshes<font color="#E5E5E5"> and then they also</font>

150
00:06:16,409 --> 00:06:20,069
need to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> quite targeted because we</font>

151
00:06:18,240 --> 00:06:22,590
need to reach these two specific<font color="#CCCCCC"> rules</font>

152
00:06:20,069 --> 00:06:24,750
to<font color="#CCCCCC"> have been the bit flips in in the</font>

153
00:06:22,590 --> 00:06:28,529
middle so<font color="#E5E5E5"> the first</font><font color="#CCCCCC"> question is how do</font>

154
00:06:24,750 --> 00:06:30,539
we<font color="#E5E5E5"> get enough and cache accesses here</font>

155
00:06:28,529 --> 00:06:32,310
the CPU cache plays quite an important

156
00:06:30,539 --> 00:06:34,219
force because this is<font color="#E5E5E5"> between the CPU</font>

157
00:06:32,310 --> 00:06:37,670
<font color="#E5E5E5">core and the TM so if you</font>

158
00:06:34,220 --> 00:06:39,200
do this naive<font color="#CCCCCC"> accesses then they will</font>

159
00:06:37,670 --> 00:06:40,820
all stay in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cache and they will</font>

160
00:06:39,200 --> 00:06:41,180
<font color="#E5E5E5">never reach the</font><font color="#CCCCCC"> theorem so it will</font><font color="#E5E5E5"> never</font>

161
00:06:40,820 --> 00:06:43,550
<font color="#E5E5E5">work</font>

162
00:06:41,180 --> 00:06:45,230
so only<font color="#E5E5E5"> non cache accesses reach the</font>

163
00:06:43,550 --> 00:06:46,790
serum and you basically<font color="#E5E5E5"> have</font><font color="#CCCCCC"> two</font>

164
00:06:45,230 --> 00:06:50,030
strategies<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> these non cache</font>

165
00:06:46,790 --> 00:06:51,710
accesses either you put data in the

166
00:06:50,030 --> 00:06:53,809
cache and<font color="#E5E5E5"> then you have to remove data</font>

167
00:06:51,710 --> 00:06:55,940
from the cache<font color="#CCCCCC"> or you just</font><font color="#E5E5E5"> don't put it</font>

168
00:06:53,810 --> 00:06:57,710
<font color="#CCCCCC">there in the</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> place so that the</font>

169
00:06:55,940 --> 00:07:00,440
next<font color="#E5E5E5"> access will actually be served from</font>

170
00:06:57,710 --> 00:07:02,120
<font color="#E5E5E5">the DRAM and there are</font><font color="#CCCCCC"> four different</font>

171
00:07:00,440 --> 00:07:04,940
<font color="#E5E5E5">access techniques that I'm going to go</font>

172
00:07:02,120 --> 00:07:06,890
through now<font color="#CCCCCC"> so the first one was the</font>

173
00:07:04,940 --> 00:07:09,290
original<font color="#E5E5E5"> brohamer paper by</font><font color="#CCCCCC"> teammate Val</font>

174
00:07:06,890 --> 00:07:11,810
<font color="#CCCCCC">in 2014 and they use the CSS instruction</font>

175
00:07:09,290 --> 00:07:14,690
to remove the left on the cache<font color="#E5E5E5"> then we</font>

176
00:07:11,810 --> 00:07:16,580
use cache addiction<font color="#E5E5E5"> also</font><font color="#CCCCCC"> a wicked</font><font color="#E5E5E5"> use</font>

177
00:07:14,690 --> 00:07:18,469
cache addiction to remove data from the

178
00:07:16,580 --> 00:07:20,630
cache and then in the fact that

179
00:07:18,470 --> 00:07:22,100
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> that don't put it down in the</font>

180
00:07:20,630 --> 00:07:24,890
<font color="#E5E5E5">first</font><font color="#CCCCCC"> place there are non simple</font>

181
00:07:22,100 --> 00:07:28,400
<font color="#E5E5E5">accesses by</font><font color="#CCCCCC"> joe ada</font><font color="#E5E5E5"> and also on cache</font>

182
00:07:24,890 --> 00:07:30,080
memory by<font color="#CCCCCC"> santa rita metal so the first</font>

183
00:07:28,400 --> 00:07:32,630
<font color="#E5E5E5">technique is hammering with the CSS</font>

184
00:07:30,080 --> 00:07:34,669
instruction so basically as we said<font color="#CCCCCC"> so</font>

185
00:07:32,630 --> 00:07:36,680
when you access<font color="#CCCCCC"> data from</font><font color="#E5E5E5"> the ceramic</font>

186
00:07:34,669 --> 00:07:39,140
goes into the cache so this is here in

187
00:07:36,680 --> 00:07:40,550
green<font color="#CCCCCC"> what you can do is call this</font>

188
00:07:39,140 --> 00:07:42,140
year's version instruction and what the

189
00:07:40,550 --> 00:07:44,390
CEO search instruction is<font color="#E5E5E5"> going to do it</font>

190
00:07:42,140 --> 00:07:47,090
is<font color="#E5E5E5"> going to remove data from the cache</font>

191
00:07:44,390 --> 00:07:49,729
<font color="#CCCCCC">so it's not there anymore</font><font color="#E5E5E5"> and we can</font>

192
00:07:47,090 --> 00:07:53,390
then reload data<font color="#E5E5E5"> put it there in</font><font color="#CCCCCC"> the</font>

193
00:07:49,729 --> 00:07:57,860
cache<font color="#CCCCCC"> and so on so</font><font color="#E5E5E5"> flash reload</font><font color="#CCCCCC"> slash</font>

194
00:07:53,390 --> 00:08:00,200
reload<font color="#E5E5E5"> slash reload until we have our</font>

195
00:07:57,860 --> 00:08:04,190
bit flips<font color="#CCCCCC"> right in the middle in the</font>

196
00:08:00,200 --> 00:08:06,469
theorem so now this was<font color="#CCCCCC"> done the</font>

197
00:08:04,190 --> 00:08:09,320
original<font color="#CCCCCC"> study was done on video</font><font color="#E5E5E5"> 3m they</font>

198
00:08:06,470 --> 00:08:12,800
also seek to<font color="#E5E5E5"> see how widespread is this</font>

199
00:08:09,320 --> 00:08:14,479
<font color="#E5E5E5">issue so they tried 129 modules from</font>

200
00:08:12,800 --> 00:08:17,330
<font color="#E5E5E5">three different</font><font color="#CCCCCC"> vendors and</font><font color="#E5E5E5"> they</font>

201
00:08:14,479 --> 00:08:19,969
basically see that all<font color="#E5E5E5"> but</font><font color="#CCCCCC"> Reaver</font>

202
00:08:17,330 --> 00:08:23,510
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> vulnerable from modules that</font><font color="#E5E5E5"> were</font>

203
00:08:19,970 --> 00:08:25,940
<font color="#E5E5E5">manufactured since mid 2011 also</font>

204
00:08:23,510 --> 00:08:27,530
sibilant<font color="#CCCCCC"> alliant from</font><font color="#E5E5E5"> google tried on 29</font>

205
00:08:25,940 --> 00:08:31,550
<font color="#E5E5E5">episodes and so the health wealth</font>

206
00:08:27,530 --> 00:08:33,679
<font color="#CCCCCC">Honorables but until then basically ddr4</font>

207
00:08:31,550 --> 00:08:35,570
was believed<font color="#E5E5E5"> to be safe because it's a</font>

208
00:08:33,679 --> 00:08:37,010
different<font color="#CCCCCC"> manufacturing process</font><font color="#E5E5E5"> also</font>

209
00:08:35,570 --> 00:08:39,500
something<font color="#E5E5E5"> those incorporated some</font>

210
00:08:37,010 --> 00:08:42,110
<font color="#E5E5E5">countermeasures in there but we actually</font>

211
00:08:39,500 --> 00:08:44,120
<font color="#CCCCCC">showed that if you</font><font color="#E5E5E5"> still hammer in a</font>

212
00:08:42,110 --> 00:08:45,800
different way then you can<font color="#E5E5E5"> still have</font>

213
00:08:44,120 --> 00:08:47,110
some<font color="#CCCCCC"> widgets so the problem is</font><font color="#E5E5E5"> really</font>

214
00:08:45,800 --> 00:08:51,550
<font color="#CCCCCC">not</font><font color="#E5E5E5"> done</font>

215
00:08:47,110 --> 00:08:53,830
<font color="#CCCCCC">yep not solved</font><font color="#E5E5E5"> so as I said basically</font>

216
00:08:51,550 --> 00:08:57,189
rahama you do flush reload / little /

217
00:08:53,830 --> 00:08:59,680
reload and this is<font color="#E5E5E5"> essentially a flush</font>

218
00:08:57,190 --> 00:09:01,030
and we load as I can flush<font color="#CCCCCC"> and renewed</font>

219
00:08:59,680 --> 00:09:04,150
for the one that<font color="#E5E5E5"> I'm not familiar with</font>

220
00:09:01,030 --> 00:09:06,040
<font color="#CCCCCC">it it's a cache attack</font><font color="#E5E5E5"> so from our</font>

221
00:09:04,150 --> 00:09:08,610
perspective it's actually as much as I

222
00:09:06,040 --> 00:09:12,150
<font color="#E5E5E5">can</font><font color="#CCCCCC"> determine as it</font><font color="#E5E5E5"> is one on the</font><font color="#CCCCCC"> cache</font>

223
00:09:08,610 --> 00:09:14,980
<font color="#E5E5E5">so we basically thought okay we can</font>

224
00:09:12,150 --> 00:09:16,870
avoid this<font color="#E5E5E5"> user instruction to be</font>

225
00:09:14,980 --> 00:09:18,880
independent of<font color="#E5E5E5"> this specific instruction</font>

226
00:09:16,870 --> 00:09:21,670
since basically you have<font color="#CCCCCC"> no 0</font>

227
00:09:18,880 --> 00:09:23,860
instruction<font color="#CCCCCC"> in JavaScript</font><font color="#E5E5E5"> for example so</font>

228
00:09:21,670 --> 00:09:26,110
our approach was<font color="#CCCCCC"> to use</font><font color="#E5E5E5"> regular memory</font>

229
00:09:23,860 --> 00:09:27,550
accesses<font color="#E5E5E5"> to educate</font><font color="#CCCCCC"> that from the cache</font>

230
00:09:26,110 --> 00:09:29,620
and not use this<font color="#E5E5E5"> year's large</font>

231
00:09:27,550 --> 00:09:30,550
instruction<font color="#E5E5E5"> and this is technique from</font>

232
00:09:29,620 --> 00:09:32,860
<font color="#E5E5E5">cache attacks</font>

233
00:09:30,550 --> 00:09:34,750
so basically we're<font color="#CCCCCC"> doing we are going to</font>

234
00:09:32,860 --> 00:09:36,400
do<font color="#E5E5E5"> row comma not with</font><font color="#CCCCCC"> flushing remove</font>

235
00:09:34,750 --> 00:09:39,550
cache attack but with priming probe

236
00:09:36,400 --> 00:09:41,680
cache<font color="#CCCCCC"> attack so it works like this again</font>

237
00:09:39,550 --> 00:09:43,689
<font color="#E5E5E5">we have accepted a from the Jeremy goes</font>

238
00:09:41,680 --> 00:09:45,699
into a cache set and what<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> going</font>

239
00:09:43,690 --> 00:09:48,850
to do now is that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are going to</font><font color="#E5E5E5"> evict</font>

240
00:09:45,700 --> 00:09:50,350
<font color="#CCCCCC">these green lines</font><font color="#E5E5E5"> by performing</font>

241
00:09:48,850 --> 00:09:52,480
different<font color="#CCCCCC"> loss</font><font color="#E5E5E5"> that goes into the same</font>

242
00:09:50,350 --> 00:09:54,850
<font color="#E5E5E5">cache</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> so we are progressively</font>

243
00:09:52,480 --> 00:09:56,820
filling<font color="#E5E5E5"> this cache set until we have</font>

244
00:09:54,850 --> 00:09:59,080
evicted<font color="#CCCCCC"> the data</font><font color="#E5E5E5"> that we</font><font color="#CCCCCC"> want it with it</font>

245
00:09:56,820 --> 00:10:03,210
then we can reload it again from<font color="#E5E5E5"> the</font>

246
00:09:59,080 --> 00:10:06,430
<font color="#E5E5E5">DRAM and so on until we have our pieces</font>

247
00:10:03,210 --> 00:10:08,680
so it looks quite<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> we just on a</font>

248
00:10:06,430 --> 00:10:09,969
series of different accessible it's

249
00:10:08,680 --> 00:10:12,520
actually not<font color="#CCCCCC"> that simple with you</font>

250
00:10:09,970 --> 00:10:14,710
because we<font color="#E5E5E5"> have the replacement</font><font color="#CCCCCC"> policy</font>

251
00:10:12,520 --> 00:10:16,630
of the CPU cache<font color="#E5E5E5"> that plays an important</font>

252
00:10:14,710 --> 00:10:19,060
role<font color="#CCCCCC"> here it says</font><font color="#E5E5E5"> what is the</font><font color="#CCCCCC"> next time</font>

253
00:10:16,630 --> 00:10:22,330
<font color="#E5E5E5">to be to be evicted to make room make</font>

254
00:10:19,060 --> 00:10:25,239
room for<font color="#E5E5E5"> anyone and on modern CPUs is</font>

255
00:10:22,330 --> 00:10:27,460
not LRU so we<font color="#CCCCCC"> actually had</font><font color="#E5E5E5"> to find a</font>

256
00:10:25,240 --> 00:10:29,080
cache<font color="#CCCCCC"> addiction strategies and in this</font>

257
00:10:27,460 --> 00:10:31,420
case it's<font color="#CCCCCC"> actually better to perform</font>

258
00:10:29,080 --> 00:10:34,600
<font color="#CCCCCC">multiple access to the same address and</font>

259
00:10:31,420 --> 00:10:36,610
it is<font color="#CCCCCC"> to better</font><font color="#E5E5E5"> eviction so using this</font>

260
00:10:34,600 --> 00:10:38,920
we found<font color="#CCCCCC"> really</font><font color="#E5E5E5"> fast and effective</font>

261
00:10:36,610 --> 00:10:40,060
addiction strategy on<font color="#CCCCCC"> as well</font><font color="#E5E5E5"> that led</font>

262
00:10:38,920 --> 00:10:41,500
to<font color="#E5E5E5"> an addiction</font><font color="#CCCCCC"> pedals more than</font>

263
00:10:40,060 --> 00:10:43,510
<font color="#CCCCCC">ninety-nine</font><font color="#E5E5E5"> point and ninety seven</font>

264
00:10:41,500 --> 00:10:46,120
<font color="#CCCCCC">percent</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we actually wanted like with</font>

265
00:10:43,510 --> 00:10:48,430
the best one<font color="#E5E5E5"> also</font><font color="#CCCCCC"> the fastest and also</font>

266
00:10:46,120 --> 00:10:51,310
the best<font color="#E5E5E5"> addiction rate so we evaluated</font>

267
00:10:48,430 --> 00:10:55,359
more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> 10,000 different</font><font color="#E5E5E5"> strategies</font><font color="#CCCCCC"> to</font>

268
00:10:51,310 --> 00:10:58,599
find the best one<font color="#E5E5E5"> and we managed to have</font>

269
00:10:55,360 --> 00:11:00,370
this hammering<font color="#CCCCCC"> whiscash</font><font color="#E5E5E5"> addiction on as</font>

270
00:10:58,600 --> 00:11:03,400
well<font color="#E5E5E5"> so here you can see</font>

271
00:11:00,370 --> 00:11:08,200
you have the original<font color="#E5E5E5"> attack so we see a</font>

272
00:11:03,400 --> 00:11:10,720
<font color="#CCCCCC">slosh in native environment amethyst</font>

273
00:11:08,200 --> 00:11:13,600
<font color="#CCCCCC">coat and then</font><font color="#E5E5E5"> in green you have the</font>

274
00:11:10,720 --> 00:11:16,029
<font color="#CCCCCC">steel</font><font color="#E5E5E5"> in native code but with addiction</font>

275
00:11:13,600 --> 00:11:18,610
so with no source instruction<font color="#E5E5E5"> and what</font>

276
00:11:16,029 --> 00:11:21,640
you can<font color="#E5E5E5"> see that we change the</font><font color="#CCCCCC"> refresh</font>

277
00:11:18,610 --> 00:11:23,980
interval in them and basically<font color="#E5E5E5"> is your</font>

278
00:11:21,640 --> 00:11:25,750
machine<font color="#CCCCCC"> is vulnerable to the attack with</font>

279
00:11:23,980 --> 00:11:28,060
the<font color="#CCCCCC"> sensors then is likely</font><font color="#E5E5E5"> vulnerable to</font>

280
00:11:25,750 --> 00:11:30,580
the<font color="#E5E5E5"> attack without</font><font color="#CCCCCC"> filters because</font><font color="#E5E5E5"> it</font>

281
00:11:28,060 --> 00:11:32,650
starts<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> same refresh interval so</font>

282
00:11:30,580 --> 00:11:35,680
it's a bit<font color="#E5E5E5"> less this flips but likely</font><font color="#CCCCCC"> it</font>

283
00:11:32,650 --> 00:11:38,500
<font color="#E5E5E5">will still</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> now in JavaScript we</font>

284
00:11:35,680 --> 00:11:41,109
have a bit less<font color="#E5E5E5"> be</font><font color="#CCCCCC"> slips</font><font color="#E5E5E5"> again and it</font>

285
00:11:38,500 --> 00:11:42,490
works with a bigger refresh interval<font color="#E5E5E5"> but</font>

286
00:11:41,110 --> 00:11:45,370
still we<font color="#CCCCCC"> manage will have</font><font color="#E5E5E5"> quick tips and</font>

287
00:11:42,490 --> 00:11:47,529
actually the higher the interval then it

288
00:11:45,370 --> 00:11:49,270
matters a<font color="#CCCCCC"> bit less we have pretty</font><font color="#E5E5E5"> much</font>

289
00:11:47,529 --> 00:11:53,500
as many<font color="#CCCCCC"> bit clips</font><font color="#E5E5E5"> as with the original</font>

290
00:11:49,270 --> 00:11:55,990
attack so<font color="#E5E5E5"> itself technique is hammering</font>

291
00:11:53,500 --> 00:11:58,000
<font color="#CCCCCC">with non-temporal accesses</font><font color="#E5E5E5"> so multiple</font>

292
00:11:55,990 --> 00:12:00,279
accesses as when you access data

293
00:11:58,000 --> 00:12:02,410
basically<font color="#E5E5E5"> just once and not in the</font>

294
00:12:00,279 --> 00:12:04,420
immediate<font color="#CCCCCC"> future so there is no real</font>

295
00:12:02,410 --> 00:12:05,920
need<font color="#CCCCCC"> to put it in the cache</font><font color="#E5E5E5"> because we</font>

296
00:12:04,420 --> 00:12:08,199
just<font color="#CCCCCC"> dictator that</font><font color="#E5E5E5"> was actually</font>

297
00:12:05,920 --> 00:12:10,599
important<font color="#CCCCCC"> and with it will have some</font>

298
00:12:08,200 --> 00:12:12,250
cache pollution<font color="#E5E5E5"> so there are non temple</font>

299
00:12:10,600 --> 00:12:15,910
accesses instructions<font color="#E5E5E5"> that basically</font>

300
00:12:12,250 --> 00:12:18,790
<font color="#CCCCCC">bypass the cache</font><font color="#E5E5E5"> these non-temporal</font>

301
00:12:15,910 --> 00:12:20,920
stalls the problem is that when<font color="#CCCCCC"> you</font>

302
00:12:18,790 --> 00:12:22,689
perform multiple source to one<font color="#CCCCCC"> address</font>

303
00:12:20,920 --> 00:12:25,390
they are all combined in this right

304
00:12:22,690 --> 00:12:27,570
combining versa<font color="#CCCCCC"> and only the</font><font color="#E5E5E5"> last right</font>

305
00:12:25,390 --> 00:12:30,370
goes to<font color="#CCCCCC"> the gem so no matter how many</font>

306
00:12:27,570 --> 00:12:33,010
<font color="#E5E5E5">stalls you do to the same address you</font>

307
00:12:30,370 --> 00:12:36,130
will have only one right<font color="#E5E5E5"> Indians so the</font>

308
00:12:33,010 --> 00:12:39,040
rate will<font color="#CCCCCC"> not be sufficient</font><font color="#E5E5E5"> so the trick</font>

309
00:12:36,130 --> 00:12:41,740
<font color="#E5E5E5">by Excel was actually to follow this</font>

310
00:12:39,040 --> 00:12:44,290
non-temporal<font color="#CCCCCC"> store as we</font><font color="#E5E5E5"> cache access to</font>

311
00:12:41,740 --> 00:12:46,600
the same address<font color="#E5E5E5"> so basically it looks</font>

312
00:12:44,290 --> 00:12:48,670
<font color="#CCCCCC">like this you will have this different</font>

313
00:12:46,600 --> 00:12:51,610
<font color="#CCCCCC">axises for</font><font color="#E5E5E5"> these two accesses to</font><font color="#CCCCCC"> X&Y</font>

314
00:12:48,670 --> 00:12:53,650
with this<font color="#CCCCCC"> small NCI so moving on</font>

315
00:12:51,610 --> 00:12:55,690
temporal and then it's followed<font color="#CCCCCC"> by a</font>

316
00:12:53,650 --> 00:12:57,880
regular move that<font color="#E5E5E5"> will put data into the</font>

317
00:12:55,690 --> 00:13:01,900
cache<font color="#E5E5E5"> and then you have this loop</font><font color="#CCCCCC"> so</font>

318
00:12:57,880 --> 00:13:04,360
it's just really<font color="#E5E5E5"> this tiny loop and the</font>

319
00:13:01,900 --> 00:13:06,610
fourth different<font color="#E5E5E5"> access technique is</font>

320
00:13:04,360 --> 00:13:08,170
hammering<font color="#E5E5E5"> with and cache memory because</font>

321
00:13:06,610 --> 00:13:09,670
just sometimes everything<font color="#E5E5E5"> fails any</font>

322
00:13:08,170 --> 00:13:12,079
first the case especially<font color="#CCCCCC"> on mobile</font>

323
00:13:09,670 --> 00:13:14,180
devices<font color="#E5E5E5"> every</font>

324
00:13:12,080 --> 00:13:17,120
this is all<font color="#CCCCCC"> these three techniques all</font>

325
00:13:14,180 --> 00:13:19,250
<font color="#CCCCCC">state</font><font color="#E5E5E5"> so in arm</font><font color="#CCCCCC"> three seven the</font><font color="#E5E5E5"> flush</font>

326
00:13:17,120 --> 00:13:20,120
instruction is privileged<font color="#E5E5E5"> so it won't</font>

327
00:13:19,250 --> 00:13:22,220
<font color="#E5E5E5">work</font>

328
00:13:20,120 --> 00:13:24,290
<font color="#E5E5E5">cash addiction we</font><font color="#CCCCCC"> drank a lot but it all</font>

329
00:13:22,220 --> 00:13:27,680
<font color="#E5E5E5">the time it's just too slow to have any</font>

330
00:13:24,290 --> 00:13:29,630
bit flips and on<font color="#E5E5E5"> rd8 the non-temporal so</font>

331
00:13:27,680 --> 00:13:33,949
I actually<font color="#E5E5E5"> seed cash in practice so</font>

332
00:13:29,630 --> 00:13:37,040
again<font color="#CCCCCC"> no bit flips possible there but</font>

333
00:13:33,950 --> 00:13:38,899
since Android<font color="#E5E5E5"> for</font><font color="#CCCCCC"> that I am that is</font><font color="#E5E5E5"> the</font>

334
00:13:37,040 --> 00:13:41,510
memory management and the<font color="#CCCCCC"> app skin used</font>

335
00:13:38,899 --> 00:13:44,750
<font color="#E5E5E5">is interfaced if I am to have</font><font color="#CCCCCC"> uncashed</font>

336
00:13:41,510 --> 00:13:46,970
and physically contiguous memory<font color="#CCCCCC"> so it's</font>

337
00:13:44,750 --> 00:13:49,730
also not privileged<font color="#E5E5E5"> and there is no</font>

338
00:13:46,970 --> 00:13:51,950
permission<font color="#CCCCCC"> needed to access</font><font color="#E5E5E5"> this</font>

339
00:13:49,730 --> 00:13:54,339
interface so<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is what</font><font color="#CCCCCC"> as I'm typing</font>

340
00:13:51,950 --> 00:13:59,180
<font color="#CCCCCC">in tile used to have this</font><font color="#E5E5E5"> bit flips on</font>

341
00:13:54,339 --> 00:14:02,690
Android<font color="#E5E5E5"> okay so the next question is how</font>

342
00:13:59,180 --> 00:14:06,260
do we target accesses how do we perform

343
00:14:02,690 --> 00:14:09,320
<font color="#E5E5E5">accesses to specific</font><font color="#CCCCCC"> drm rows now we</font>

344
00:14:06,260 --> 00:14:11,029
talked about accessing data that is<font color="#E5E5E5"> not</font>

345
00:14:09,320 --> 00:14:13,880
in the cache but<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> DRAM but now we</font>

346
00:14:11,029 --> 00:14:16,670
want<font color="#E5E5E5"> to access specific locations in the</font>

347
00:14:13,880 --> 00:14:19,250
DRAM and we know that there<font color="#E5E5E5"> is a fixed</font>

348
00:14:16,670 --> 00:14:22,029
<font color="#E5E5E5">map</font><font color="#CCCCCC"> between physical addresses and</font><font color="#E5E5E5"> DRM</font>

349
00:14:19,250 --> 00:14:25,040
cells<font color="#E5E5E5"> but this mapping is undocumented</font>

350
00:14:22,029 --> 00:14:26,779
for<font color="#E5E5E5"> Intel processors and it has been</font>

351
00:14:25,040 --> 00:14:30,860
<font color="#CCCCCC">reverse engineered by</font><font color="#E5E5E5"> Mark C born in</font>

352
00:14:26,779 --> 00:14:36,560
<font color="#E5E5E5">2015 for one configuration of Sandy</font>

353
00:14:30,860 --> 00:14:38,300
Bridge laptops and we<font color="#E5E5E5"> then went on from</font>

354
00:14:36,560 --> 00:14:40,099
there<font color="#CCCCCC"> and we reverse engineer it</font><font color="#E5E5E5"> for</font>

355
00:14:38,300 --> 00:14:42,430
many<font color="#E5E5E5"> different configurations</font><font color="#CCCCCC"> on Sandy</font>

356
00:14:40,100 --> 00:14:46,970
Bridge Ivy Bridge has<font color="#CCCCCC"> with skylake</font>

357
00:14:42,430 --> 00:14:49,069
<font color="#CCCCCC">Broadwell also on arm CPUs</font><font color="#E5E5E5"> and we</font>

358
00:14:46,970 --> 00:14:51,050
exploit the timing difference here

359
00:14:49,070 --> 00:14:54,110
between a<font color="#CCCCCC"> row</font><font color="#E5E5E5"> hit and the row conflict</font>

360
00:14:51,050 --> 00:14:57,290
as you can probably imagine if we can

361
00:14:54,110 --> 00:14:58,850
see a row conflict<font color="#E5E5E5"> for two addresses for</font>

362
00:14:57,290 --> 00:15:02,480
an address pair then we know<font color="#CCCCCC"> that they</font>

363
00:14:58,850 --> 00:15:04,490
<font color="#E5E5E5">must map to the same</font><font color="#CCCCCC"> Bank</font><font color="#E5E5E5"> but to a</font>

364
00:15:02,480 --> 00:15:06,680
different row<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we know</font><font color="#CCCCCC"> that they</font>

365
00:15:04,490 --> 00:15:09,380
actually<font color="#E5E5E5"> go to the same chip and then we</font>

366
00:15:06,680 --> 00:15:12,560
can target addresses that go to the same

367
00:15:09,380 --> 00:15:14,779
<font color="#CCCCCC">Bank</font><font color="#E5E5E5"> but two different rows how do</font><font color="#CCCCCC"> I</font>

368
00:15:12,560 --> 00:15:17,239
reverse my<font color="#E5E5E5"> own given so there is this</font>

369
00:15:14,779 --> 00:15:19,519
drama repository that<font color="#CCCCCC"> we have on github</font>

370
00:15:17,240 --> 00:15:21,360
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> just clone</font><font color="#CCCCCC"> the code from there</font>

371
00:15:19,519 --> 00:15:23,399
and then<font color="#E5E5E5"> you</font>

372
00:15:21,360 --> 00:15:26,850
run it with<font color="#CCCCCC"> sudo because you need access</font>

373
00:15:23,399 --> 00:15:29,730
to<font color="#E5E5E5"> the page map and then you</font><font color="#CCCCCC"> give it</font>

374
00:15:26,850 --> 00:15:31,680
like<font color="#E5E5E5"> 50 percent</font><font color="#CCCCCC"> of your physical memory</font>

375
00:15:29,730 --> 00:15:34,440
and then you're<font color="#E5E5E5"> looking for something</font>

376
00:15:31,680 --> 00:15:38,300
<font color="#E5E5E5">like maybe 16 sets on my machine I have</font>

377
00:15:34,440 --> 00:15:41,100
<font color="#CCCCCC">32 but I expect that it at least find 16</font>

378
00:15:38,300 --> 00:15:44,550
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> ok to</font><font color="#E5E5E5"> put</font><font color="#CCCCCC"> a smaller number there</font>

379
00:15:41,100 --> 00:15:46,500
and<font color="#CCCCCC"> then once you have the functions</font>

380
00:15:44,550 --> 00:15:49,620
<font color="#E5E5E5">from this tool you will put these</font>

381
00:15:46,500 --> 00:15:52,709
functions<font color="#E5E5E5"> into the row hammer</font><font color="#CCCCCC"> ijs 2 we</font>

382
00:15:49,620 --> 00:15:54,899
have a<font color="#E5E5E5"> native code tool in there and</font>

383
00:15:52,709 --> 00:15:57,149
then you just<font color="#CCCCCC"> run</font><font color="#E5E5E5"> make for instance</font>

384
00:15:54,899 --> 00:16:00,060
<font color="#CCCCCC">people for Ivybridge make</font><font color="#E5E5E5"> IV or make</font><font color="#CCCCCC"> row</font>

385
00:15:57,149 --> 00:16:02,279
hammer<font color="#E5E5E5"> IV and then you run it again with</font>

386
00:16:00,060 --> 00:16:04,170
sudo for the Caged method need<font color="#E5E5E5"> only need</font>

387
00:16:02,279 --> 00:16:07,529
sudo for the page map access because

388
00:16:04,170 --> 00:16:12,540
that was<font color="#CCCCCC"> Google's</font><font color="#E5E5E5"> patch last year</font><font color="#CCCCCC"> how</font>

389
00:16:07,529 --> 00:16:16,110
they prevented the attack on on current

390
00:16:12,540 --> 00:16:17,250
systems and then<font color="#E5E5E5"> - D - for</font><font color="#CCCCCC"> 2 dims if you</font>

391
00:16:16,110 --> 00:16:18,660
have a different number of<font color="#CCCCCC"> things you</font>

392
00:16:17,250 --> 00:16:20,760
have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> put a different number there and</font>

393
00:16:18,660 --> 00:16:23,819
then you can optimize<font color="#E5E5E5"> the</font><font color="#CCCCCC"> attack speed a</font>

394
00:16:20,760 --> 00:16:26,670
bit by putting<font color="#E5E5E5"> F 0 here which says I</font>

395
00:16:23,820 --> 00:16:30,959
only want to<font color="#E5E5E5"> take 0 as the first offset</font>

396
00:16:26,670 --> 00:16:33,329
for every row<font color="#CCCCCC"> that I want to hammer ok</font>

397
00:16:30,959 --> 00:16:35,699
let's see that in a demo<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> prepared</font>

398
00:16:33,329 --> 00:16:36,839
something here<font color="#E5E5E5"> the short video where run</font>

399
00:16:35,699 --> 00:16:38,550
list so I first go to the

400
00:16:36,839 --> 00:16:44,550
<font color="#CCCCCC">reverse-engineering folder then I run</font>

401
00:16:38,550 --> 00:16:46,620
the measure tool<font color="#E5E5E5"> I I use 50% of</font><font color="#CCCCCC"> DRM</font><font color="#E5E5E5"> the</font>

402
00:16:44,550 --> 00:16:48,089
more I use the<font color="#E5E5E5"> better but actually</font>

403
00:16:46,620 --> 00:16:52,170
recording the<font color="#E5E5E5"> video was not possible</font>

404
00:16:48,089 --> 00:16:55,410
with<font color="#E5E5E5"> some allocating more DRM and so I'm</font>

405
00:16:52,170 --> 00:16:58,050
now generating all these<font color="#E5E5E5"> sets so it</font>

406
00:16:55,410 --> 00:17:01,050
looks<font color="#E5E5E5"> for sets of addresses that this</font>

407
00:16:58,050 --> 00:17:05,280
does not<font color="#CCCCCC"> look very</font><font color="#E5E5E5"> nice but it looks</font>

408
00:17:01,050 --> 00:17:07,819
<font color="#CCCCCC">four sets of</font><font color="#E5E5E5"> addresses which have a row</font>

409
00:17:05,280 --> 00:17:07,819
conflict

410
00:17:08,159 --> 00:17:15,459
the<font color="#CCCCCC"> ones that have</font><font color="#E5E5E5"> found 16 sets we were</font>

411
00:17:11,260 --> 00:17:17,408
it runs a simple algorithm to figure<font color="#CCCCCC"> out</font>

412
00:17:15,459 --> 00:17:22,120
which<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> minimum conflict set here</font>

413
00:17:17,409 --> 00:17:25,870
<font color="#CCCCCC">which must be</font><font color="#E5E5E5"> the bits</font><font color="#CCCCCC"> that lead</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> this</font>

414
00:17:22,119 --> 00:17:28,329
arm to<font color="#E5E5E5"> this</font><font color="#CCCCCC"> bank mapping</font><font color="#E5E5E5"> to this</font>

415
00:17:25,869 --> 00:17:30,219
conflict<font color="#CCCCCC"> now we will check whether the</font>

416
00:17:28,329 --> 00:17:32,710
same functions are<font color="#E5E5E5"> already written in</font>

417
00:17:30,220 --> 00:17:35,530
the row here<font color="#E5E5E5"> my source code and there we</font>

418
00:17:32,710 --> 00:17:38,950
can<font color="#CCCCCC"> see okay</font><font color="#E5E5E5"> 14 18 is the same 50 19 is</font>

419
00:17:35,530 --> 00:17:40,840
also the same 16 20 is the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> 17 21 is</font>

420
00:17:38,950 --> 00:17:42,250
also the thing<font color="#E5E5E5"> here's a small difference</font>

421
00:17:40,840 --> 00:17:43,928
<font color="#E5E5E5">I don't expect that it makes a</font>

422
00:17:42,250 --> 00:17:46,240
<font color="#E5E5E5">difference but</font><font color="#CCCCCC"> still it's better to just</font>

423
00:17:43,929 --> 00:17:48,580
<font color="#E5E5E5">copy the value that we have</font><font color="#CCCCCC"> just</font>

424
00:17:46,240 --> 00:17:51,429
recovered<font color="#E5E5E5"> we could also add the big</font><font color="#CCCCCC"> 6</font>

425
00:17:48,580 --> 00:17:53,110
here that would probably<font color="#E5E5E5"> also improve</font>

426
00:17:51,429 --> 00:17:55,299
our results<font color="#E5E5E5"> because that is what the</font>

427
00:17:53,110 --> 00:17:57,399
hardware<font color="#CCCCCC"> just showed us the functions</font>

428
00:17:55,299 --> 00:18:00,340
<font color="#CCCCCC">that the hardware just</font><font color="#E5E5E5"> told us that are</font>

429
00:17:57,400 --> 00:18:03,190
used so if I now run the<font color="#E5E5E5"> row hammer tool</font>

430
00:18:00,340 --> 00:18:06,059
I<font color="#E5E5E5"> have to again so at first called micro</font>

431
00:18:03,190 --> 00:18:09,159
hammer IV for my<font color="#CCCCCC"> ID bridge system and</font>

432
00:18:06,059 --> 00:18:12,100
then I can run the row hammer<font color="#CCCCCC"> tool</font><font color="#E5E5E5"> but I</font>

433
00:18:09,159 --> 00:18:13,809
have to<font color="#E5E5E5"> run it with sudo so that I have</font>

434
00:18:12,100 --> 00:18:14,530
access<font color="#CCCCCC"> to the physical</font><font color="#E5E5E5"> addresses</font>

435
00:18:13,809 --> 00:18:16,360
addresses

436
00:18:14,530 --> 00:18:18,190
<font color="#CCCCCC">there are also attacks to recover</font>

437
00:18:16,360 --> 00:18:21,610
physical address information<font color="#E5E5E5"> without</font>

438
00:18:18,190 --> 00:18:23,770
<font color="#CCCCCC">thorough access but for the sake of</font>

439
00:18:21,610 --> 00:18:25,840
simplicity here it is not implemented<font color="#CCCCCC"> in</font>

440
00:18:23,770 --> 00:18:27,190
<font color="#E5E5E5">this way and now you have seen I didn't</font>

441
00:18:25,840 --> 00:18:29,649
have any<font color="#CCCCCC"> big flips when I hammered a</font>

442
00:18:27,190 --> 00:18:33,460
<font color="#E5E5E5">single row but now I specified only one</font>

443
00:18:29,650 --> 00:18:35,049
offset per row and I have hundreds and

444
00:18:33,460 --> 00:18:36,850
thousands of<font color="#CCCCCC"> bit clips here so you can</font>

445
00:18:35,049 --> 00:18:41,590
see every all<font color="#E5E5E5"> of the long lines here</font>

446
00:18:36,850 --> 00:18:43,418
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> if every</font><font color="#E5E5E5"> time is one bit flip so</font>

447
00:18:41,590 --> 00:18:43,990
yeah<font color="#E5E5E5"> this will continue like this</font>

448
00:18:43,419 --> 00:18:49,539
forever

449
00:18:43,990 --> 00:18:54,789
<font color="#E5E5E5">so many many big strips</font><font color="#CCCCCC"> ok let's go back</font>

450
00:18:49,539 --> 00:18:57,280
<font color="#CCCCCC">to the presentation so</font><font color="#E5E5E5"> the next question</font>

451
00:18:54,789 --> 00:18:59,140
<font color="#CCCCCC">how do</font><font color="#E5E5E5"> we exploit random bit clips</font>

452
00:18:57,280 --> 00:19:00,730
because this looks all very<font color="#E5E5E5"> random you</font>

453
00:18:59,140 --> 00:19:02,710
have some did will<font color="#E5E5E5"> slip somewhere</font>

454
00:19:00,730 --> 00:19:03,520
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> not random they are</font>

455
00:19:02,710 --> 00:19:06,010
not random at all

456
00:19:03,520 --> 00:19:08,740
they are highly reproducible<font color="#E5E5E5"> once you</font>

457
00:19:06,010 --> 00:19:10,809
<font color="#E5E5E5">hammer</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> memory location</font><font color="#CCCCCC"> are there the</font>

458
00:19:08,740 --> 00:19:12,640
chance that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> will slip a bit in the</font>

459
00:19:10,809 --> 00:19:16,720
same location as<font color="#CCCCCC"> it were you've flipped</font>

460
00:19:12,640 --> 00:19:20,130
it before is extremely high so this is

461
00:19:16,720 --> 00:19:23,280
very reproducible<font color="#E5E5E5"> so what you can</font>

462
00:19:20,130 --> 00:19:27,510
do is you just<font color="#E5E5E5"> say okay this is sort of</font>

463
00:19:23,280 --> 00:19:29,610
a set<font color="#E5E5E5"> one bit to 0 gadget</font><font color="#CCCCCC"> and I can use</font>

464
00:19:27,510 --> 00:19:32,550
<font color="#CCCCCC">that to set some memory allocation</font><font color="#E5E5E5"> that</font>

465
00:19:29,610 --> 00:19:36,389
I usually couldn't write to set it to

466
00:19:32,550 --> 00:19:38,460
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> and so what I do is I choose</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> data</font>

467
00:19:36,390 --> 00:19:42,600
structure<font color="#E5E5E5"> where I can exploit such a</font>

468
00:19:38,460 --> 00:19:44,460
right one which gadget<font color="#E5E5E5"> then</font><font color="#CCCCCC"> I scan for</font>

469
00:19:42,600 --> 00:19:47,159
good bit<font color="#E5E5E5"> eclipses in my memory and then</font>

470
00:19:44,460 --> 00:19:49,020
I place<font color="#CCCCCC"> the data structure at that</font>

471
00:19:47,160 --> 00:19:51,240
location and then<font color="#E5E5E5"> i trigger the bit flip</font>

472
00:19:49,020 --> 00:19:54,600
again<font color="#E5E5E5"> and now there</font><font color="#CCCCCC"> are several</font>

473
00:19:51,240 --> 00:19:57,510
different<font color="#CCCCCC"> techniques</font><font color="#E5E5E5"> to follow this</font>

474
00:19:54,600 --> 00:19:59,850
general attack strategy and I would say

475
00:19:57,510 --> 00:20:02,730
this is a form of<font color="#E5E5E5"> a post draw hammer</font>

476
00:19:59,850 --> 00:20:04,409
exploitation the first<font color="#E5E5E5"> strategy that we</font>

477
00:20:02,730 --> 00:20:06,870
want<font color="#E5E5E5"> to talk about is the one that was</font>

478
00:20:04,410 --> 00:20:10,770
<font color="#E5E5E5">presented</font><font color="#CCCCCC"> by c1</font><font color="#E5E5E5"> and Julian to escape</font>

479
00:20:06,870 --> 00:20:13,139
from the Google NaCl sandbox<font color="#E5E5E5"> and there</font>

480
00:20:10,770 --> 00:20:16,500
they exploited that x86<font color="#CCCCCC"> of course has a</font>

481
00:20:13,140 --> 00:20:17,910
<font color="#E5E5E5">variable length and sometimes unsafe of</font>

482
00:20:16,500 --> 00:20:22,260
codes that<font color="#CCCCCC"> are not allowed by the</font>

483
00:20:17,910 --> 00:20:25,200
sandbox<font color="#E5E5E5"> are contained in longer</font>

484
00:20:22,260 --> 00:20:28,430
<font color="#CCCCCC">multibyte of codes</font><font color="#E5E5E5"> and this is not a</font>

485
00:20:25,200 --> 00:20:31,230
problem as long as you can only jump to

486
00:20:28,430 --> 00:20:33,600
<font color="#E5E5E5">validators offset in the code but once</font>

487
00:20:31,230 --> 00:20:37,460
you have corrupted<font color="#E5E5E5"> a jump</font><font color="#CCCCCC"> you might be</font>

488
00:20:33,600 --> 00:20:41,370
able<font color="#E5E5E5"> to jump to a non-aligned address</font>

489
00:20:37,460 --> 00:20:45,840
into an<font color="#CCCCCC"> opcode</font><font color="#E5E5E5"> and then use</font><font color="#CCCCCC"> suit</font><font color="#E5E5E5"> code of</font>

490
00:20:41,370 --> 00:20:47,820
code to escape from the sandbox so with

491
00:20:45,840 --> 00:20:50,010
this they flipped a bit in a validated

492
00:20:47,820 --> 00:20:52,020
<font color="#E5E5E5">NaCl instruction sequence and then they</font>

493
00:20:50,010 --> 00:20:54,620
had the capability of an arbitrary jump

494
00:20:52,020 --> 00:20:58,620
and could do anything<font color="#E5E5E5"> in the sandbox</font><font color="#CCCCCC"> the</font>

495
00:20:54,620 --> 00:21:00,510
<font color="#CCCCCC">next group of attacks exploits</font><font color="#E5E5E5"> page</font>

496
00:20:58,620 --> 00:21:03,060
table entries and probably some<font color="#E5E5E5"> of you</font>

497
00:21:00,510 --> 00:21:04,560
<font color="#E5E5E5">already know page table entries so here</font>

498
00:21:03,060 --> 00:21:07,470
you have a present bit whether<font color="#E5E5E5"> it's</font>

499
00:21:04,560 --> 00:21:10,409
valid<font color="#E5E5E5"> readwrite</font><font color="#CCCCCC"> grid user XO speed right</font>

500
00:21:07,470 --> 00:21:12,900
through<font color="#CCCCCC"> untouchable reference dirty</font><font color="#E5E5E5"> this</font>

501
00:21:10,410 --> 00:21:14,700
<font color="#E5E5E5">is the size bit the global</font><font color="#CCCCCC"> bit and here</font>

502
00:21:12,900 --> 00:21:18,420
we have the<font color="#E5E5E5"> execution disabled bit the</font>

503
00:21:14,700 --> 00:21:21,450
NX bit<font color="#E5E5E5"> and then if you look so this is a</font>

504
00:21:18,420 --> 00:21:23,490
huge entry 64 bits some of these bits

505
00:21:21,450 --> 00:21:26,040
are ignored<font color="#E5E5E5"> if we have a bit flip there</font>

506
00:21:23,490 --> 00:21:27,780
<font color="#E5E5E5">the processor just doesn't care perfect</font>

507
00:21:26,040 --> 00:21:30,180
<font color="#E5E5E5">and then we have the physical page</font>

508
00:21:27,780 --> 00:21:31,250
number so chances are very high that we

509
00:21:30,180 --> 00:21:33,740
get a

510
00:21:31,250 --> 00:21:36,890
page number<font color="#E5E5E5"> and also every</font><font color="#CCCCCC"> four kilobyte</font>

511
00:21:33,740 --> 00:21:40,040
page table contains exactly 512 of such

512
00:21:36,890 --> 00:21:42,080
entries so it scales<font color="#E5E5E5"> in the same way how</font>

513
00:21:40,040 --> 00:21:43,490
are they used when we<font color="#E5E5E5"> want to map our</font>

514
00:21:42,080 --> 00:21:45,260
virtual address space so<font color="#E5E5E5"> here as a</font>

515
00:21:43,490 --> 00:21:47,120
virtual every space on the left<font color="#E5E5E5"> and it's</font>

516
00:21:45,260 --> 00:21:49,310
directly<font color="#E5E5E5"> goes</font><font color="#CCCCCC"> to those page table</font>

517
00:21:47,120 --> 00:21:52,939
entries and these page table entries met

518
00:21:49,310 --> 00:21:55,639
in some random way to the physical<font color="#E5E5E5"> pages</font>

519
00:21:52,940 --> 00:21:57,560
that we<font color="#CCCCCC"> have here and in this physical</font>

520
00:21:55,640 --> 00:22:00,650
memory we also have a<font color="#CCCCCC"> carnal page here</font>

521
00:21:57,560 --> 00:22:01,879
the page table is also<font color="#E5E5E5"> stored in</font>

522
00:22:00,650 --> 00:22:04,760
physical memory<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that is all</font>

523
00:22:01,880 --> 00:22:06,230
<font color="#CCCCCC">neighboring</font><font color="#E5E5E5"> in Indian not a problem so</font>

524
00:22:04,760 --> 00:22:08,990
far because<font color="#E5E5E5"> you cannot access</font><font color="#CCCCCC"> it right</font>

525
00:22:06,230 --> 00:22:11,810
but with if we have some way<font color="#E5E5E5"> to</font>

526
00:22:08,990 --> 00:22:14,030
manipulate one of our own page table

527
00:22:11,810 --> 00:22:16,490
entries<font color="#E5E5E5"> let's say I can manipulate page</font>

528
00:22:14,030 --> 00:22:19,220
table<font color="#CCCCCC"> entry</font><font color="#E5E5E5"> 0 and I can modify the</font>

529
00:22:16,490 --> 00:22:24,410
address<font color="#E5E5E5"> and say I want to have it mapped</font>

530
00:22:19,220 --> 00:22:27,560
to my own page table then I can modify

531
00:22:24,410 --> 00:22:29,570
any<font color="#E5E5E5"> of the page table entries on of this</font>

532
00:22:27,560 --> 00:22:32,659
page table<font color="#E5E5E5"> so for instance now I could</font>

533
00:22:29,570 --> 00:22:34,700
modify page<font color="#E5E5E5"> table entry 1 and scan</font>

534
00:22:32,660 --> 00:22:37,100
through the<font color="#E5E5E5"> physical memory and search</font>

535
00:22:34,700 --> 00:22:38,870
for<font color="#CCCCCC"> interesting pages</font><font color="#E5E5E5"> like here</font><font color="#CCCCCC"> at</font>

536
00:22:37,100 --> 00:22:41,030
<font color="#CCCCCC">wanted page this looks interesting let's</font>

537
00:22:38,870 --> 00:22:44,360
change it<font color="#E5E5E5"> because we can now we have</font>

538
00:22:41,030 --> 00:22:46,280
<font color="#CCCCCC">kernel privileges if we have access to</font>

539
00:22:44,360 --> 00:22:50,409
<font color="#CCCCCC">our own page table we can access</font><font color="#E5E5E5"> and</font>

540
00:22:46,280 --> 00:22:53,570
modify every physical<font color="#E5E5E5"> memory location so</font>

541
00:22:50,410 --> 00:22:55,520
how do we<font color="#E5E5E5"> do that now in a sec so we</font>

542
00:22:53,570 --> 00:22:57,200
start with the search for<font color="#CCCCCC"> a bit flip</font>

543
00:22:55,520 --> 00:22:59,150
<font color="#E5E5E5">zone with</font><font color="#CCCCCC"> hammer</font><font color="#E5E5E5"> different locations and</font>

544
00:22:57,200 --> 00:23:02,840
once we have<font color="#E5E5E5"> found a location where</font><font color="#CCCCCC"> a</font>

545
00:22:59,150 --> 00:23:07,580
bit flips we will just release<font color="#E5E5E5"> this</font>

546
00:23:02,840 --> 00:23:10,550
memory page and allocate pages that we

547
00:23:07,580 --> 00:23:13,100
want to where we want to flip a bit so

548
00:23:10,550 --> 00:23:15,320
here we have the<font color="#CCCCCC"> green page which is</font><font color="#E5E5E5"> the</font>

549
00:23:13,100 --> 00:23:17,389
target<font color="#E5E5E5"> page a</font><font color="#CCCCCC"> page table</font><font color="#E5E5E5"> and here I have</font>

550
00:23:15,320 --> 00:23:19,280
<font color="#E5E5E5">the example again and now most of the</font>

551
00:23:17,390 --> 00:23:20,780
memory<font color="#CCCCCC"> is filled with page tables but</font>

552
00:23:19,280 --> 00:23:23,149
there is still<font color="#E5E5E5"> one user page here and</font>

553
00:23:20,780 --> 00:23:25,100
<font color="#CCCCCC">the kernel page here and</font><font color="#E5E5E5"> this is my own</font>

554
00:23:23,150 --> 00:23:27,680
page table and what happens now<font color="#CCCCCC"> is I</font>

555
00:23:25,100 --> 00:23:31,550
<font color="#E5E5E5">slip a bit the probability</font><font color="#CCCCCC"> that I just</font>

556
00:23:27,680 --> 00:23:33,860
point the the page table entry points<font color="#CCCCCC"> to</font>

557
00:23:31,550 --> 00:23:35,629
<font color="#E5E5E5">just some page table</font><font color="#CCCCCC"> afterwards it's</font>

558
00:23:33,860 --> 00:23:38,629
very high because I<font color="#CCCCCC"> filled the entire</font>

559
00:23:35,630 --> 00:23:39,980
physical memory or almost<font color="#E5E5E5"> the entire</font>

560
00:23:38,630 --> 00:23:42,679
<font color="#E5E5E5">physical memory with</font>

561
00:23:39,980 --> 00:23:44,690
<font color="#CCCCCC">page tables</font><font color="#E5E5E5"> so then I have access to one</font>

562
00:23:42,679 --> 00:23:46,309
<font color="#CCCCCC">of my own page tables and then I can run</font>

563
00:23:44,690 --> 00:23:48,679
the same<font color="#E5E5E5"> exploitation technique as</font>

564
00:23:46,309 --> 00:23:50,840
before<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> strategy here we scan</font>

565
00:23:48,679 --> 00:23:53,660
public<font color="#CCCCCC"> slips</font><font color="#E5E5E5"> we exhaust or massage</font>

566
00:23:50,840 --> 00:23:55,639
memory to place a page table<font color="#E5E5E5"> at the</font>

567
00:23:53,660 --> 00:23:57,679
target location<font color="#CCCCCC"> and then we flip</font><font color="#E5E5E5"> the bit</font>

568
00:23:55,640 --> 00:24:00,980
and<font color="#E5E5E5"> gain access to our own page table</font>

569
00:23:57,679 --> 00:24:04,669
and<font color="#CCCCCC"> external privileges perfect</font><font color="#E5E5E5"> so this</font>

570
00:24:00,980 --> 00:24:08,179
idea was originally<font color="#CCCCCC"> mentioned</font><font color="#E5E5E5"> by Seaborn</font>

571
00:24:04,669 --> 00:24:10,250
and Julian are they<font color="#CCCCCC"> they proposed this</font>

572
00:24:08,179 --> 00:24:12,230
attack technique for their row hammer

573
00:24:10,250 --> 00:24:14,960
attack<font color="#E5E5E5"> but the same idea was also</font>

574
00:24:12,230 --> 00:24:18,950
applied<font color="#E5E5E5"> in</font><font color="#CCCCCC"> raw ham ideas in one bit</font>

575
00:24:14,960 --> 00:24:24,679
flops one cloud flops on<font color="#E5E5E5"> Zen</font><font color="#CCCCCC"> pvm</font><font color="#E5E5E5"> and in</font>

576
00:24:18,950 --> 00:24:26,690
drama<font color="#E5E5E5"> on Android so</font><font color="#CCCCCC"> post</font><font color="#E5E5E5"> row hammer</font>

577
00:24:24,679 --> 00:24:28,429
exploitation yet so this<font color="#CCCCCC"> is all</font><font color="#E5E5E5"> post</font>

578
00:24:26,690 --> 00:24:30,559
<font color="#E5E5E5">wrong</font><font color="#CCCCCC"> name exploitation we are we are</font>

579
00:24:28,429 --> 00:24:34,340
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> what do we do once we can</font>

580
00:24:30,559 --> 00:24:36,770
slip a bit<font color="#E5E5E5"> and once we have access to</font>

581
00:24:34,340 --> 00:24:39,139
<font color="#CCCCCC">our</font><font color="#E5E5E5"> own page table and there are many</font>

582
00:24:36,770 --> 00:24:41,150
things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can do if we can scan and</font>

583
00:24:39,140 --> 00:24:43,460
modify the entire<font color="#E5E5E5"> physical memory so</font>

584
00:24:41,150 --> 00:24:46,190
this is<font color="#E5E5E5"> really fast scanning through the</font>

585
00:24:43,460 --> 00:24:48,410
<font color="#E5E5E5">entire physical memory you can modify</font>

586
00:24:46,190 --> 00:24:50,540
binary pages that are executed in root

587
00:24:48,410 --> 00:24:52,610
privileges<font color="#CCCCCC"> you can modify credential</font>

588
00:24:50,540 --> 00:24:55,399
structs you can read<font color="#E5E5E5"> keys crypto keys</font>

589
00:24:52,610 --> 00:24:58,219
from the DRM<font color="#E5E5E5"> you can corrupt RSA</font>

590
00:24:55,400 --> 00:25:01,100
signatures you can<font color="#E5E5E5"> modify certificate or</font>

591
00:24:58,220 --> 00:25:03,020
configurations and scanning<font color="#E5E5E5"> through the</font>

592
00:25:01,100 --> 00:25:05,330
<font color="#E5E5E5">entire memory and finding one specific</font>

593
00:25:03,020 --> 00:25:07,309
page<font color="#E5E5E5"> sounds like a bit</font><font color="#CCCCCC"> ok but you would</font>

594
00:25:05,330 --> 00:25:11,299
have false positives<font color="#CCCCCC"> right</font><font color="#E5E5E5"> no this is a</font>

595
00:25:07,309 --> 00:25:14,690
4 kilobyte page<font color="#CCCCCC"> this is 32,000 bits this</font>

596
00:25:11,299 --> 00:25:16,820
<font color="#E5E5E5">is pretty unique</font><font color="#CCCCCC"> if you find this 32,000</font>

597
00:25:14,690 --> 00:25:19,700
<font color="#E5E5E5">bits somewhere it's</font><font color="#CCCCCC"> exactly what</font><font color="#E5E5E5"> you are</font>

598
00:25:16,820 --> 00:25:23,600
<font color="#E5E5E5">looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> there is one case where</font><font color="#CCCCCC"> we</font>

599
00:25:19,700 --> 00:25:26,179
<font color="#CCCCCC">might have multiple</font><font color="#E5E5E5"> copies of pages in</font>

600
00:25:23,600 --> 00:25:28,270
the DRM<font color="#E5E5E5"> and in this case we can we might</font>

601
00:25:26,179 --> 00:25:31,460
have paid to<font color="#CCCCCC"> these</font><font color="#E5E5E5"> applications to</font>

602
00:25:28,270 --> 00:25:33,679
eliminate those copies<font color="#CCCCCC"> page</font><font color="#E5E5E5"> to the</font>

603
00:25:31,460 --> 00:25:35,000
application so if we want<font color="#E5E5E5"> to do a wrong</font>

604
00:25:33,679 --> 00:25:37,160
and<font color="#CCCCCC"> I tagged with page the application</font>

605
00:25:35,000 --> 00:25:40,370
we again<font color="#CCCCCC"> start with</font><font color="#E5E5E5"> a bit flip in the</font>

606
00:25:37,160 --> 00:25:42,650
beginning and<font color="#E5E5E5"> then we have a target page</font>

607
00:25:40,370 --> 00:25:44,570
here that<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to attack and now we</font>

608
00:25:42,650 --> 00:25:47,960
<font color="#E5E5E5">just produce the same predictable</font>

609
00:25:44,570 --> 00:25:49,639
content on our own modifiable<font color="#E5E5E5"> page then</font>

610
00:25:47,960 --> 00:25:52,380
the operating system<font color="#E5E5E5"> or hypervisor</font>

611
00:25:49,640 --> 00:25:54,810
searches for dublicate pages and

612
00:25:52,380 --> 00:25:56,820
at some point it will compare those to

613
00:25:54,810 --> 00:25:58,409
bring pages and<font color="#CCCCCC"> will find it</font><font color="#E5E5E5"> they are</font>

614
00:25:56,820 --> 00:26:03,149
equivalent<font color="#E5E5E5"> and then it will deduct</font>

615
00:25:58,410 --> 00:26:05,730
locate the one page to<font color="#CCCCCC"> the other</font><font color="#E5E5E5"> and</font>

616
00:26:03,150 --> 00:26:07,580
then we just hammer again flip again<font color="#E5E5E5"> and</font>

617
00:26:05,730 --> 00:26:10,800
we have our<font color="#CCCCCC"> patria</font><font color="#E5E5E5"> there</font>

618
00:26:07,580 --> 00:26:13,439
so the strategy<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> we scan for flip</font>

619
00:26:10,800 --> 00:26:15,570
<font color="#CCCCCC">4-bit slips</font><font color="#E5E5E5"> we place the</font><font color="#CCCCCC"> content for</font>

620
00:26:13,440 --> 00:26:17,400
<font color="#CCCCCC">deduplication so</font><font color="#E5E5E5"> that the flip can be</font>

621
00:26:15,570 --> 00:26:19,980
exploited<font color="#CCCCCC"> and then we perform the</font><font color="#E5E5E5"> big</font>

622
00:26:17,400 --> 00:26:23,850
change<font color="#E5E5E5"> through row hammer and this idea</font>

623
00:26:19,980 --> 00:26:26,160
<font color="#E5E5E5">was</font><font color="#CCCCCC"> presented by both</font><font color="#E5E5E5"> man</font><font color="#CCCCCC"> and in</font><font color="#E5E5E5"> theirs</font>

624
00:26:23,850 --> 00:26:29,370
and<font color="#CCCCCC"> P paper to change a data type in</font>

625
00:26:26,160 --> 00:26:32,310
<font color="#CCCCCC">JavaScript and then to</font><font color="#E5E5E5"> change a pointer</font>

626
00:26:29,370 --> 00:26:34,110
to<font color="#CCCCCC"> a good object</font><font color="#E5E5E5"> to to a pointer</font><font color="#CCCCCC"> to a</font>

627
00:26:32,310 --> 00:26:38,190
counter<font color="#E5E5E5"> fide object that they injected</font>

628
00:26:34,110 --> 00:26:40,530
and then again in<font color="#E5E5E5"> the work by</font><font color="#CCCCCC"> Razavi a</font>

629
00:26:38,190 --> 00:26:43,410
<font color="#E5E5E5">tile they corrupted author</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the</font>

630
00:26:40,530 --> 00:26:46,610
authorized keys file on<font color="#CCCCCC"> linux</font><font color="#E5E5E5"> so that</font>

631
00:26:43,410 --> 00:26:50,580
you could log in with manipulated<font color="#CCCCCC"> our</font>

632
00:26:46,610 --> 00:26:52,649
<font color="#CCCCCC">RSA ssh keys and they also corrupted the</font>

633
00:26:50,580 --> 00:26:55,260
<font color="#E5E5E5">debian update URLs you know that they</font>

634
00:26:52,650 --> 00:26:56,820
<font color="#CCCCCC">are just sort in plain text and then</font><font color="#E5E5E5"> you</font>

635
00:26:55,260 --> 00:27:01,080
have a bit flip there and then they

636
00:26:56,820 --> 00:27:02,990
<font color="#CCCCCC">register the domain and then they</font><font color="#E5E5E5"> also</font>

637
00:27:01,080 --> 00:27:05,310
flipped a bit in the public key file

638
00:27:02,990 --> 00:27:07,110
<font color="#E5E5E5">factorize the key because we</font><font color="#CCCCCC"> know it</font>

639
00:27:05,310 --> 00:27:11,010
<font color="#CCCCCC">because it's added applicated page they</font>

640
00:27:07,110 --> 00:27:14,550
<font color="#E5E5E5">can read it so they were able to slip in</font>

641
00:27:11,010 --> 00:27:17,220
malicious<font color="#CCCCCC"> update there so the next</font>

642
00:27:14,550 --> 00:27:19,680
<font color="#CCCCCC">question would</font><font color="#E5E5E5"> be how do we mitigate row</font>

643
00:27:17,220 --> 00:27:22,860
hammer<font color="#E5E5E5"> yes because this is just all bad</font>

644
00:27:19,680 --> 00:27:24,450
right<font color="#CCCCCC"> now</font><font color="#E5E5E5"> right so different mitigation</font>

645
00:27:22,860 --> 00:27:27,479
have been proposed with different goals

646
00:27:24,450 --> 00:27:30,330
and different expectations<font color="#CCCCCC"> so first does</font>

647
00:27:27,480 --> 00:27:33,000
some mitigation<font color="#CCCCCC"> set</font><font color="#E5E5E5"> to detect rahama or</font>

648
00:27:30,330 --> 00:27:34,290
<font color="#E5E5E5">the</font><font color="#CCCCCC"> sixth to prevent Rama there are some</font>

649
00:27:33,000 --> 00:27:37,440
that are done in<font color="#E5E5E5"> software</font><font color="#CCCCCC"> although in</font>

650
00:27:34,290 --> 00:27:39,030
<font color="#CCCCCC">Hardware also</font><font color="#E5E5E5"> here it's like a hardware</font>

651
00:27:37,440 --> 00:27:41,670
<font color="#E5E5E5">program so it's not really</font><font color="#CCCCCC"> easy</font><font color="#E5E5E5"> to solve</font>

652
00:27:39,030 --> 00:27:43,710
so some solutions<font color="#E5E5E5"> aim at finding a</font><font color="#CCCCCC"> short</font>

653
00:27:41,670 --> 00:27:45,990
<font color="#CCCCCC">term solution even</font><font color="#E5E5E5"> if we don't have the</font>

654
00:27:43,710 --> 00:27:48,630
<font color="#E5E5E5">good</font><font color="#CCCCCC"> Jairam order try</font><font color="#E5E5E5"> to find some more</font>

655
00:27:45,990 --> 00:27:51,930
<font color="#CCCCCC">long term</font><font color="#E5E5E5"> solution to really fix the</font>

656
00:27:48,630 --> 00:27:54,900
problem<font color="#E5E5E5"> so</font><font color="#CCCCCC"> immediately after the</font>

657
00:27:51,930 --> 00:27:57,860
<font color="#CCCCCC">original paper and</font><font color="#E5E5E5"> also after the</font><font color="#CCCCCC"> Kouga</font>

658
00:27:54,900 --> 00:28:00,290
exploits<font color="#CCCCCC"> then there were</font>

659
00:27:57,860 --> 00:28:03,139
hands for quick<font color="#E5E5E5"> fixes what can we do</font>

660
00:28:00,290 --> 00:28:05,120
<font color="#CCCCCC">right</font><font color="#E5E5E5"> now to fix the problem the first</font>

661
00:28:03,140 --> 00:28:06,860
<font color="#E5E5E5">idea was to stop using the CFS</font>

662
00:28:05,120 --> 00:28:10,159
instruction and this is actually what

663
00:28:06,860 --> 00:28:11,479
Google did for the chrome sandbox<font color="#CCCCCC"> the</font>

664
00:28:10,160 --> 00:28:12,950
thing is<font color="#E5E5E5"> that quickly after</font><font color="#CCCCCC"> we showed</font>

665
00:28:11,480 --> 00:28:14,990
<font color="#CCCCCC">that yes you can actually still do the</font>

666
00:28:12,950 --> 00:28:16,490
attacks<font color="#E5E5E5"> even</font><font color="#CCCCCC"> with the CF</font><font color="#E5E5E5"> search</font>

667
00:28:14,990 --> 00:28:19,850
<font color="#CCCCCC">instruction so it's still not really</font>

668
00:28:16,490 --> 00:28:22,370
<font color="#CCCCCC">solve the other idea</font><font color="#E5E5E5"> was to increase the</font>

669
00:28:19,850 --> 00:28:24,350
refresh rate the idea is<font color="#CCCCCC"> that basically</font>

670
00:28:22,370 --> 00:28:26,059
<font color="#E5E5E5">the more you increase it the less</font><font color="#CCCCCC"> you</font>

671
00:28:24,350 --> 00:28:28,040
are<font color="#E5E5E5"> susceptible to hospitals because</font>

672
00:28:26,059 --> 00:28:30,290
<font color="#CCCCCC">then you have less time to perform</font><font color="#E5E5E5"> Emery</font>

673
00:28:28,040 --> 00:28:32,570
accesses and you have been less<font color="#E5E5E5"> disease</font>

674
00:28:30,290 --> 00:28:35,000
<font color="#CCCCCC">the thing is</font><font color="#E5E5E5"> that commit I'll</font><font color="#CCCCCC"> show that</font>

675
00:28:32,570 --> 00:28:37,970
at least<font color="#CCCCCC"> for this death bed</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> would</font>

676
00:28:35,000 --> 00:28:40,390
<font color="#E5E5E5">need to increase by</font><font color="#CCCCCC"> seven times this</font>

677
00:28:37,970 --> 00:28:44,299
refresh rate to<font color="#CCCCCC"> eliminate all bit</font><font color="#E5E5E5"> fields</font>

678
00:28:40,390 --> 00:28:46,820
and the implementation was<font color="#E5E5E5"> not that high</font>

679
00:28:44,299 --> 00:28:48,918
<font color="#CCCCCC">because is</font><font color="#E5E5E5"> also is a problem of power</font>

680
00:28:46,820 --> 00:28:51,379
consumption<font color="#E5E5E5"> yeah and also it slows down</font>

681
00:28:48,919 --> 00:28:53,630
the<font color="#CCCCCC"> theorem so it's not</font><font color="#E5E5E5"> so good</font><font color="#CCCCCC"> if you</font>

682
00:28:51,380 --> 00:28:56,080
included<font color="#E5E5E5"> too high and the implementation</font>

683
00:28:53,630 --> 00:29:00,710
was that<font color="#CCCCCC"> bio spindle did increase the</font>

684
00:28:56,080 --> 00:29:02,540
<font color="#E5E5E5">river fit by two times so you see it may</font>

685
00:29:00,710 --> 00:29:03,049
be good<font color="#CCCCCC"> for some theorem but not for all</font>

686
00:29:02,540 --> 00:29:06,200
<font color="#CCCCCC">of them</font>

687
00:29:03,049 --> 00:29:09,230
most<font color="#E5E5E5"> likely the other thing that people</font>

688
00:29:06,200 --> 00:29:11,390
<font color="#CCCCCC">were looking for is ECC</font><font color="#E5E5E5"> so when you have</font>

689
00:29:09,230 --> 00:29:13,940
ECC protection normally the server can

690
00:29:11,390 --> 00:29:16,850
handle<font color="#E5E5E5"> or correct single bit</font><font color="#CCCCCC"> errors so</font>

691
00:29:13,940 --> 00:29:18,350
<font color="#E5E5E5">it sounds like the solution actually</font>

692
00:29:16,850 --> 00:29:20,870
it's not<font color="#E5E5E5"> really</font><font color="#CCCCCC"> the solution</font><font color="#E5E5E5"> because it</font>

693
00:29:18,350 --> 00:29:22,969
<font color="#E5E5E5">never has been done for this targeted</font>

694
00:29:20,870 --> 00:29:25,969
<font color="#E5E5E5">bit slips purchase for random pieces</font>

695
00:29:22,970 --> 00:29:28,580
<font color="#E5E5E5">also there is no real</font><font color="#CCCCCC"> standard for event</font>

696
00:29:25,970 --> 00:29:31,429
reporting<font color="#E5E5E5"> so not</font><font color="#CCCCCC"> contained did a really</font>

697
00:29:28,580 --> 00:29:34,189
<font color="#E5E5E5">nice white paper and then try to compare</font>

698
00:29:31,429 --> 00:29:36,799
<font color="#CCCCCC">what will happens when we have this</font><font color="#E5E5E5"> bit</font>

699
00:29:34,190 --> 00:29:40,490
flips on<font color="#CCCCCC"> ECC theorem so the common</font>

700
00:29:36,799 --> 00:29:42,980
practice it does service<font color="#E5E5E5"> counts the ECC</font>

701
00:29:40,490 --> 00:29:45,200
arrows and report them to the<font color="#E5E5E5"> US only if</font>

702
00:29:42,980 --> 00:29:47,120
they reach a certain<font color="#CCCCCC"> threshold</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

703
00:29:45,200 --> 00:29:49,669
usually an again turismo standard so

704
00:29:47,120 --> 00:29:52,100
<font color="#CCCCCC">that usually</font><font color="#E5E5E5"> more than a hundred</font><font color="#CCCCCC"> pixels</font>

705
00:29:49,669 --> 00:29:54,410
<font color="#E5E5E5">per hour so if you can see that you have</font>

706
00:29:52,100 --> 00:29:56,030
some<font color="#E5E5E5"> margin to perform the</font><font color="#CCCCCC"> attack</font>

707
00:29:54,410 --> 00:29:59,200
because<font color="#E5E5E5"> not going to be instant</font>

708
00:29:56,030 --> 00:30:03,168
<font color="#E5E5E5">reporting is not going to be instant but</font>

709
00:29:59,200 --> 00:30:05,570
<font color="#CCCCCC">even more bad some several vendors just</font>

710
00:30:03,169 --> 00:30:07,790
never reported<font color="#CCCCCC"> gyros</font><font color="#E5E5E5"> to the US so</font>

711
00:30:05,570 --> 00:30:09,678
apparently<font color="#E5E5E5"> is okay you can</font><font color="#CCCCCC"> perform this</font>

712
00:30:07,790 --> 00:30:10,520
<font color="#CCCCCC">believes</font><font color="#E5E5E5"> it's supposed to be protected</font>

713
00:30:09,679 --> 00:30:12,140
against this

714
00:30:10,520 --> 00:30:15,889
corruption<font color="#E5E5E5"> but it's not really</font><font color="#CCCCCC"> because</font>

715
00:30:12,140 --> 00:30:17,450
the OS<font color="#CCCCCC"> never sees</font><font color="#E5E5E5"> this error and</font>

716
00:30:15,890 --> 00:30:19,400
actually then<font color="#CCCCCC"> one server did</font><font color="#E5E5E5"> not even</font>

717
00:30:17,450 --> 00:30:22,490
have when<font color="#CCCCCC"> pics leaves</font><font color="#E5E5E5"> where non</font>

718
00:30:19,400 --> 00:30:24,830
correctable so apparently<font color="#CCCCCC"> servantis</font><font color="#E5E5E5"> has</font>

719
00:30:22,490 --> 00:30:29,030
<font color="#E5E5E5">different expectation of what ECC</font>

720
00:30:24,830 --> 00:30:31,850
protection actually means here<font color="#CCCCCC"> so then</font>

721
00:30:29,030 --> 00:30:33,649
next idea was okay<font color="#CCCCCC"> if we can't</font><font color="#E5E5E5"> really</font>

722
00:30:31,850 --> 00:30:35,689
<font color="#E5E5E5">have this week's</font><font color="#CCCCCC"> exists then maybe we</font>

723
00:30:33,650 --> 00:30:37,880
<font color="#E5E5E5">can detect the</font><font color="#CCCCCC"> effect</font><font color="#E5E5E5"> that would be</font>

724
00:30:35,690 --> 00:30:40,550
better now than nothing<font color="#CCCCCC"> and the thing</font><font color="#E5E5E5"> is</font>

725
00:30:37,880 --> 00:30:43,400
that<font color="#E5E5E5"> Rama it causes a lot</font><font color="#CCCCCC"> of cache</font>

726
00:30:40,550 --> 00:30:44,930
misses<font color="#E5E5E5"> and</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> yes and that they all</font>

727
00:30:43,400 --> 00:30:47,150
can be<font color="#E5E5E5"> monitored with</font><font color="#CCCCCC"> hard work</font><font color="#E5E5E5"> person</font>

728
00:30:44,930 --> 00:30:50,720
<font color="#E5E5E5">on campus and it</font><font color="#CCCCCC"> was the</font><font color="#E5E5E5"> original idea</font>

729
00:30:47,150 --> 00:30:52,940
<font color="#E5E5E5">of a</font><font color="#CCCCCC"> Harrison</font><font color="#E5E5E5"> fork at blackhat 2015 and</font>

730
00:30:50,720 --> 00:30:55,610
then we also did<font color="#E5E5E5"> a</font><font color="#CCCCCC"> follow up road work</font>

731
00:30:52,940 --> 00:30:58,430
<font color="#CCCCCC">Java</font><font color="#E5E5E5"> type an and</font><font color="#CCCCCC"> Piatt</font><font color="#E5E5E5"> also did a full</font>

732
00:30:55,610 --> 00:31:00,530
<font color="#E5E5E5">web work and so this is all results on</font>

733
00:30:58,430 --> 00:31:02,450
different<font color="#E5E5E5"> technique has been done so</font>

734
00:31:00,530 --> 00:31:04,879
either using<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sort of threshold or</font>

735
00:31:02,450 --> 00:31:07,430
some kind of machine<font color="#CCCCCC"> learning</font><font color="#E5E5E5"> so we just</font>

736
00:31:04,880 --> 00:31:09,020
use<font color="#CCCCCC"> the threshold on cache misses and</font>

737
00:31:07,430 --> 00:31:11,480
<font color="#E5E5E5">cache</font><font color="#CCCCCC"> sheets that</font><font color="#E5E5E5"> were normalized by</font>

738
00:31:09,020 --> 00:31:13,879
even from the instructions you'll be and

739
00:31:11,480 --> 00:31:16,580
you can see that here<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> all these</font>

740
00:31:13,880 --> 00:31:18,710
<font color="#E5E5E5">three benign applications of Firefox</font>

741
00:31:16,580 --> 00:31:21,139
<font color="#E5E5E5">some game and stress on the memory and</font>

742
00:31:18,710 --> 00:31:23,150
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> see that you can still have</font><font color="#CCCCCC"> a</font>

743
00:31:21,140 --> 00:31:25,130
clear threshold with Russian<font color="#CCCCCC"> middle</font>

744
00:31:23,150 --> 00:31:27,890
which is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> icon the cache and also</font>

745
00:31:25,130 --> 00:31:29,660
rahama<font color="#CCCCCC"> and that</font><font color="#E5E5E5"> basically if you put</font><font color="#CCCCCC"> a</font>

746
00:31:27,890 --> 00:31:31,640
threshold around<font color="#E5E5E5"> here then you can</font>

747
00:31:29,660 --> 00:31:38,900
detect<font color="#E5E5E5"> cache attacks and</font><font color="#CCCCCC"> rahama</font><font color="#E5E5E5"> with</font>

748
00:31:31,640 --> 00:31:41,600
that so in terms of ideas also<font color="#E5E5E5"> commit</font>

749
00:31:38,900 --> 00:31:43,220
<font color="#E5E5E5">I'll add this bunch of maybe we can do</font>

750
00:31:41,600 --> 00:31:43,719
<font color="#E5E5E5">that but</font><font color="#CCCCCC"> is probably not going</font><font color="#E5E5E5"> to solve</font>

751
00:31:43,220 --> 00:31:46,700
<font color="#E5E5E5">anything</font>

752
00:31:43,720 --> 00:31:49,640
<font color="#CCCCCC">so in the original paper they said</font><font color="#E5E5E5"> okay</font>

753
00:31:46,700 --> 00:31:51,890
we<font color="#CCCCCC"> should also make better</font><font color="#E5E5E5"> theorem ships</font>

754
00:31:49,640 --> 00:31:53,900
that are<font color="#E5E5E5"> not vulnerable but problem of</font>

755
00:31:51,890 --> 00:31:55,370
<font color="#CCCCCC">happening</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> error correcting codes</font>

756
00:31:53,900 --> 00:31:58,270
which<font color="#E5E5E5"> I've talked about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> doesn't</font>

757
00:31:55,370 --> 00:32:00,739
<font color="#E5E5E5">rework increasing the refresh rate same</font>

758
00:31:58,270 --> 00:32:02,870
remapping<font color="#E5E5E5"> or returning</font><font color="#CCCCCC"> 40 cells after</font>

759
00:32:00,740 --> 00:32:05,960
manufacturing what happens<font color="#E5E5E5"> is your old</font>

760
00:32:02,870 --> 00:32:08,239
<font color="#E5E5E5">gem is vulnerable and identifying</font><font color="#CCCCCC"> common</font>

761
00:32:05,960 --> 00:32:09,340
<font color="#E5E5E5">rules at runtime and refreshing and</font>

762
00:32:08,240 --> 00:32:12,850
enables

763
00:32:09,340 --> 00:32:14,899
which would need like really a lot of

764
00:32:12,850 --> 00:32:16,610
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> expensive in</font><font color="#E5E5E5"> terms of</font>

765
00:32:14,900 --> 00:32:17,900
<font color="#E5E5E5">hardware so all the solution are not</font>

766
00:32:16,610 --> 00:32:20,479
really practical they're either

767
00:32:17,900 --> 00:32:22,820
expensive cause huge performance

768
00:32:20,480 --> 00:32:24,700
<font color="#E5E5E5">overhead or increased power consumption</font>

769
00:32:22,820 --> 00:32:27,320
which is<font color="#E5E5E5"> something that move</font>

770
00:32:24,700 --> 00:32:29,810
<font color="#E5E5E5">they had another idea which is called</font>

771
00:32:27,320 --> 00:32:32,810
<font color="#E5E5E5">para for probability</font><font color="#CCCCCC"> at the central</font>

772
00:32:29,810 --> 00:32:35,210
activation<font color="#E5E5E5"> and the idea is</font><font color="#CCCCCC"> that when one</font>

773
00:32:32,810 --> 00:32:37,250
row is closed<font color="#E5E5E5"> then each time</font><font color="#CCCCCC"> what</font>

774
00:32:35,210 --> 00:32:40,910
adjacent<font color="#E5E5E5"> row is going to be opened but</font>

775
00:32:37,250 --> 00:32:43,100
with a<font color="#E5E5E5"> very low probability and the idea</font>

776
00:32:40,910 --> 00:32:45,080
that<font color="#CCCCCC"> Rosana</font><font color="#E5E5E5"> we have one</font><font color="#CCCCCC"> who that is open</font>

777
00:32:43,100 --> 00:32:47,330
<font color="#E5E5E5">and close but really high in</font><font color="#CCCCCC"> number of</font>

778
00:32:45,080 --> 00:32:49,550
<font color="#CCCCCC">times so if you have this very low</font>

779
00:32:47,330 --> 00:32:52,310
probability for high<font color="#CCCCCC"> number of times</font>

780
00:32:49,550 --> 00:32:54,440
then statistically<font color="#E5E5E5"> the neighbor rows are</font>

781
00:32:52,310 --> 00:32:57,169
going to be refreshed<font color="#E5E5E5"> and there is going</font>

782
00:32:54,440 --> 00:32:58,970
<font color="#CCCCCC">to be no big sister so the</font>

783
00:32:57,170 --> 00:33:00,260
implementation<font color="#E5E5E5"> is at the memory control</font>

784
00:32:58,970 --> 00:33:02,980
level so this<font color="#E5E5E5"> is not something</font><font color="#CCCCCC"> that you</font>

785
00:33:00,260 --> 00:33:05,480
<font color="#E5E5E5">can just</font><font color="#CCCCCC"> imprint implement on your</font><font color="#E5E5E5"> own</font>

786
00:33:02,980 --> 00:33:07,580
<font color="#E5E5E5">but the advantage is that is completely</font>

787
00:33:05,480 --> 00:33:09,440
<font color="#CCCCCC">stasis</font><font color="#E5E5E5"> there is no need for hardware</font>

788
00:33:07,580 --> 00:33:11,860
<font color="#E5E5E5">that counts which row is going to be</font>

789
00:33:09,440 --> 00:33:14,000
refreshed which we not<font color="#E5E5E5"> expensive and</font>

790
00:33:11,860 --> 00:33:18,290
basically for<font color="#E5E5E5"> this very low probability</font>

791
00:33:14,000 --> 00:33:20,240
and<font color="#E5E5E5"> high</font><font color="#CCCCCC"> number of hammer limbs</font><font color="#E5E5E5"> the</font>

792
00:33:18,290 --> 00:33:23,030
probability of experiencing just one

793
00:33:20,240 --> 00:33:28,730
error in one year is extremely low

794
00:33:23,030 --> 00:33:31,370
this probability<font color="#CCCCCC"> okay so for</font><font color="#E5E5E5"> other</font>

795
00:33:28,730 --> 00:33:32,810
countermeasures<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the DVR for</font><font color="#E5E5E5"> standard</font>

796
00:33:31,370 --> 00:33:34,909
for instance there<font color="#E5E5E5"> was a discussion</font>

797
00:33:32,810 --> 00:33:37,010
whether they would include<font color="#E5E5E5"> a target</font><font color="#CCCCCC"> row</font>

798
00:33:34,910 --> 00:33:39,740
refresh target row refresh is also a

799
00:33:37,010 --> 00:33:42,620
very<font color="#E5E5E5"> simple idea</font><font color="#CCCCCC"> you have a count of row</font>

800
00:33:39,740 --> 00:33:44,780
and<font color="#CCCCCC"> you increment</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> neighbor rows for</font>

801
00:33:42,620 --> 00:33:47,510
every<font color="#E5E5E5"> excess that you perform and when</font>

802
00:33:44,780 --> 00:33:50,270
the<font color="#E5E5E5"> refresh when the counter reaches a</font>

803
00:33:47,510 --> 00:33:51,860
threshold<font color="#E5E5E5"> the row will be refreshed for</font>

804
00:33:50,270 --> 00:33:54,020
instance the middle one reaches the

805
00:33:51,860 --> 00:33:57,350
<font color="#E5E5E5">threshold first and then the outer ones</font>

806
00:33:54,020 --> 00:33:59,900
<font color="#CCCCCC">also reach the</font><font color="#E5E5E5"> threshold and then all of</font>

807
00:33:57,350 --> 00:34:03,620
them are refreshed<font color="#E5E5E5"> over time so no bit</font>

808
00:33:59,900 --> 00:34:04,580
can flip again recently on the Linux

809
00:34:03,620 --> 00:34:07,790
kernel mailing<font color="#E5E5E5"> list</font>

810
00:34:04,580 --> 00:34:10,190
<font color="#CCCCCC">coby's suggested that that they could</font>

811
00:34:07,790 --> 00:34:13,190
<font color="#CCCCCC">include a no hammer kernel module and</font>

812
00:34:10,190 --> 00:34:14,870
the idea<font color="#E5E5E5"> so we don't have any</font><font color="#CCCCCC"> bits list</font>

813
00:34:13,190 --> 00:34:18,260
if we have<font color="#CCCCCC"> eight times</font><font color="#E5E5E5"> the refresh rate</font>

814
00:34:14,870 --> 00:34:20,870
right<font color="#E5E5E5"> so the ideas to only allow one</font>

815
00:34:18,260 --> 00:34:23,630
<font color="#E5E5E5">eighth of the maximum of cache misses</font>

816
00:34:20,870 --> 00:34:26,630
<font color="#E5E5E5">and with that old also only</font><font color="#CCCCCC"> one eighth</font>

817
00:34:23,630 --> 00:34:28,700
of<font color="#E5E5E5"> the maximum number of</font><font color="#CCCCCC"> drm excesses</font>

818
00:34:26,630 --> 00:34:31,640
<font color="#E5E5E5">and they would measure that</font><font color="#CCCCCC"> using the</font>

819
00:34:28,699 --> 00:34:35,449
<font color="#E5E5E5">performance monitoring system of modern</font>

820
00:34:31,639 --> 00:34:35,879
interest<font color="#CCCCCC"> views</font><font color="#E5E5E5"> which is also maybe not</font>

821
00:34:35,449 --> 00:34:38,549
the

822
00:34:35,880 --> 00:34:40,680
idea to do to do that<font color="#E5E5E5"> but let's go for</font>

823
00:34:38,550 --> 00:34:44,820
<font color="#CCCCCC">it so if we now hammer one memory</font>

824
00:34:40,679 --> 00:34:47,069
location in one bank then the<font color="#E5E5E5"> no</font><font color="#CCCCCC"> hemic</font>

825
00:34:44,820 --> 00:34:50,460
<font color="#CCCCCC">random module would</font><font color="#E5E5E5"> not if I would</font>

826
00:34:47,070 --> 00:34:52,350
<font color="#E5E5E5">notice that</font><font color="#CCCCCC"> and would then notify the</font>

827
00:34:50,460 --> 00:34:54,270
current<font color="#E5E5E5"> that it has to hide the</font>

828
00:34:52,350 --> 00:34:57,240
execution<font color="#E5E5E5"> because the threshold was</font>

829
00:34:54,270 --> 00:35:00,660
reached<font color="#E5E5E5"> so we wait for</font><font color="#CCCCCC"> the Refresh for</font>

830
00:34:57,240 --> 00:35:02,609
the rest of the 64<font color="#E5E5E5"> milliseconds so this</font>

831
00:35:00,660 --> 00:35:05,490
is good<font color="#CCCCCC"> if we have a case like here</font>

832
00:35:02,610 --> 00:35:07,170
where we hammer the<font color="#E5E5E5"> where we hammer</font><font color="#CCCCCC"> in</font>

833
00:35:05,490 --> 00:35:09,390
memory location<font color="#E5E5E5"> but it's bad if we have</font>

834
00:35:07,170 --> 00:35:11,040
a case<font color="#E5E5E5"> like this one</font><font color="#CCCCCC"> where we</font><font color="#E5E5E5"> access</font>

835
00:35:09,390 --> 00:35:13,680
different memory locations<font color="#CCCCCC"> and then</font>

836
00:35:11,040 --> 00:35:18,060
again<font color="#E5E5E5"> we reach the number of cache</font>

837
00:35:13,680 --> 00:35:21,509
misses<font color="#CCCCCC"> and then we have to cause the</font>

838
00:35:18,060 --> 00:35:24,240
system<font color="#E5E5E5"> again for the next sixty four</font>

839
00:35:21,510 --> 00:35:26,310
milliseconds<font color="#E5E5E5"> interline</font><font color="#CCCCCC"> a different</font>

840
00:35:24,240 --> 00:35:29,189
<font color="#E5E5E5">approach is to</font><font color="#CCCCCC"> just attack</font><font color="#E5E5E5"> a stop the</font>

841
00:35:26,310 --> 00:35:31,560
attacks before<font color="#E5E5E5"> they actually happen</font><font color="#CCCCCC"> so</font>

842
00:35:29,190 --> 00:35:33,990
we do static<font color="#CCCCCC"> analyzes on binaries so</font>

843
00:35:31,560 --> 00:35:36,630
<font color="#E5E5E5">before they are shipped to the customers</font>

844
00:35:33,990 --> 00:35:39,720
we detect suspicious instruction

845
00:35:36,630 --> 00:35:42,360
sequences<font color="#E5E5E5"> see as large our</font><font color="#CCCCCC"> DTC sensors</font>

846
00:35:39,720 --> 00:35:45,120
but here the problem<font color="#CCCCCC"> is like row</font>

847
00:35:42,360 --> 00:35:46,710
hemorrhages<font color="#CCCCCC"> can just perform</font><font color="#E5E5E5"> a sequence</font>

848
00:35:45,120 --> 00:35:49,740
of memory<font color="#E5E5E5"> accesses to perform this</font>

849
00:35:46,710 --> 00:35:53,490
attack so<font color="#CCCCCC"> mass head</font><font color="#E5E5E5"> also tries to cover</font>

850
00:35:49,740 --> 00:35:56,549
that by detecting weird<font color="#E5E5E5"> memory access</font>

851
00:35:53,490 --> 00:35:58,529
patterns<font color="#CCCCCC"> one problem here</font><font color="#E5E5E5"> these weird</font>

852
00:35:56,550 --> 00:36:02,520
<font color="#E5E5E5">memory access patterns could also come</font>

853
00:35:58,530 --> 00:36:05,490
from<font color="#E5E5E5"> perfectly benign memory loads like</font>

854
00:36:02,520 --> 00:36:07,830
computer games<font color="#CCCCCC"> so we have the</font><font color="#E5E5E5"> problem of</font>

855
00:36:05,490 --> 00:36:10,680
false positives<font color="#E5E5E5"> and you probably all</font>

856
00:36:07,830 --> 00:36:13,890
know if there are<font color="#CCCCCC"> many false positives</font>

857
00:36:10,680 --> 00:36:15,930
<font color="#CCCCCC">in any system you're</font><font color="#E5E5E5"> probably stopping</font>

858
00:36:13,890 --> 00:36:18,960
<font color="#E5E5E5">to use it like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> virus scanner that</font>

859
00:36:15,930 --> 00:36:22,710
<font color="#E5E5E5">alerts you with false positives</font><font color="#CCCCCC"> ten</font>

860
00:36:18,960 --> 00:36:24,950
times<font color="#E5E5E5"> per day you wouldn't use</font><font color="#CCCCCC"> it though</font>

861
00:36:22,710 --> 00:36:27,480
<font color="#E5E5E5">let's go for the next one</font><font color="#CCCCCC"> and will</font>

862
00:36:24,950 --> 00:36:29,009
<font color="#CCCCCC">anybody</font><font color="#E5E5E5"> was suggested by a</font><font color="#CCCCCC"> vachetta</font>

863
00:36:27,480 --> 00:36:30,690
and they also want to use the

864
00:36:29,010 --> 00:36:32,700
<font color="#E5E5E5">performance culture to first detect row</font>

865
00:36:30,690 --> 00:36:35,550
hammer and then they activate the

866
00:36:32,700 --> 00:36:37,950
<font color="#E5E5E5">neighbor rows to prevent</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> clips but</font>

867
00:36:35,550 --> 00:36:39,570
they only do<font color="#CCCCCC"> that</font><font color="#E5E5E5"> after they detected</font>

868
00:36:37,950 --> 00:36:39,990
<font color="#E5E5E5">that</font><font color="#CCCCCC"> an attack is ongoing so</font><font color="#E5E5E5"> it's</font>

869
00:36:39,570 --> 00:36:43,470
similar

870
00:36:39,990 --> 00:36:45,419
<font color="#CCCCCC">TRR but it's in software</font><font color="#E5E5E5"> so here we have</font>

871
00:36:43,470 --> 00:36:47,790
our<font color="#E5E5E5"> two locations</font><font color="#CCCCCC"> and the red ones are</font>

872
00:36:45,420 --> 00:36:49,050
<font color="#E5E5E5">in danger</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> flipping a bit so we</font>

873
00:36:47,790 --> 00:36:52,110
refresh them and then the

874
00:36:49,050 --> 00:36:54,990
<font color="#CCCCCC">are finding in more recently there was</font>

875
00:36:52,110 --> 00:36:59,550
the catch paper<font color="#E5E5E5"> which presents several</font>

876
00:36:54,990 --> 00:37:01,770
<font color="#E5E5E5">nice ideas the first is the</font><font color="#CCCCCC"> d cat</font>

877
00:36:59,550 --> 00:37:06,030
variant which disables vulnerable

878
00:37:01,770 --> 00:37:07,680
physical memory in the bootloader<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I</font>

879
00:37:06,030 --> 00:37:10,410
will come to that<font color="#E5E5E5"> in a minute</font>

880
00:37:07,680 --> 00:37:12,540
first<font color="#CCCCCC"> G</font><font color="#E5E5E5"> cat this is the</font><font color="#CCCCCC"> one that works</font>

881
00:37:10,410 --> 00:37:15,270
<font color="#E5E5E5">at</font><font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> and here the ideas that we</font>

882
00:37:12,540 --> 00:37:17,220
isolate<font color="#E5E5E5"> security domains in physical</font>

883
00:37:15,270 --> 00:37:19,560
memory based on the potential

884
00:37:17,220 --> 00:37:21,120
vulnerability so here in<font color="#E5E5E5"> G cat you can</font>

885
00:37:19,560 --> 00:37:23,430
see that I have a blue<font color="#E5E5E5"> of green and</font>

886
00:37:21,120 --> 00:37:26,520
yellow page so different security

887
00:37:23,430 --> 00:37:28,319
domains so if I want to have these

888
00:37:26,520 --> 00:37:30,150
different security domains in my systems

889
00:37:28,320 --> 00:37:33,240
I have<font color="#CCCCCC"> to isolate</font><font color="#E5E5E5"> them so I have to</font>

890
00:37:30,150 --> 00:37:35,190
leave<font color="#CCCCCC"> a gap there so because I would</font>

891
00:37:33,240 --> 00:37:37,049
<font color="#CCCCCC">just use</font><font color="#E5E5E5"> able the vulnerable memory</font>

892
00:37:35,190 --> 00:37:39,660
locations<font color="#E5E5E5"> but as you have</font><font color="#CCCCCC"> seen just</font>

893
00:37:37,050 --> 00:37:41,820
<font color="#E5E5E5">before in a live demo</font><font color="#CCCCCC"> if I would run B</font>

894
00:37:39,660 --> 00:37:44,160
cat on<font color="#CCCCCC"> my</font><font color="#E5E5E5"> system I probably would have</font>

895
00:37:41,820 --> 00:37:49,280
<font color="#E5E5E5">one megabyte of RAM left that is not</font>

896
00:37:44,160 --> 00:37:52,859
vulnerable<font color="#CCCCCC"> out of the 16 gigabytes so</font>

897
00:37:49,280 --> 00:37:55,410
what is the conclusion<font color="#E5E5E5"> to this roja</font>

898
00:37:52,860 --> 00:37:57,060
attacks are<font color="#E5E5E5"> incredibly</font><font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> mount you</font>

899
00:37:55,410 --> 00:38:00,420
can<font color="#E5E5E5"> all do</font><font color="#CCCCCC"> that you just</font><font color="#E5E5E5"> clone the tools</font>

900
00:37:57,060 --> 00:38:07,049
from<font color="#CCCCCC"> github and of you go</font><font color="#E5E5E5"> with the bit</font>

901
00:38:00,420 --> 00:38:10,110
<font color="#CCCCCC">clicks so</font><font color="#E5E5E5"> the text work on most systems</font>

902
00:38:07,050 --> 00:38:12,270
<font color="#E5E5E5">on the fact that we are not sure</font><font color="#CCCCCC"> whether</font>

903
00:38:10,110 --> 00:38:14,790
they work on some specific<font color="#E5E5E5"> systems like</font>

904
00:38:12,270 --> 00:38:16,770
we thought<font color="#E5E5E5"> they don't work on ddr4 or</font>

905
00:38:14,790 --> 00:38:20,009
there are still many laptops where we

906
00:38:16,770 --> 00:38:22,590
couldn't have a<font color="#CCCCCC"> bit clip yet</font><font color="#E5E5E5"> the problem</font>

907
00:38:20,010 --> 00:38:24,480
here is that we might<font color="#E5E5E5"> not just know the</font>

908
00:38:22,590 --> 00:38:26,250
right D Ram mapping functions<font color="#E5E5E5"> if we use</font>

909
00:38:24,480 --> 00:38:29,010
the wrong<font color="#E5E5E5"> dear I'm mapping functions we</font>

910
00:38:26,250 --> 00:38:32,310
did that on ddr4<font color="#CCCCCC"> at first we hammer</font><font color="#E5E5E5"> at a</font>

911
00:38:29,010 --> 00:38:35,880
<font color="#CCCCCC">ddr4 system for several weeks non-stop</font>

912
00:38:32,310 --> 00:38:37,890
<font color="#E5E5E5">and no</font><font color="#CCCCCC"> richlip not a single bit then we</font>

913
00:38:35,880 --> 00:38:40,280
reverse<font color="#CCCCCC"> engineered the functions and we</font>

914
00:38:37,890 --> 00:38:43,650
had the first<font color="#CCCCCC"> bits live</font><font color="#E5E5E5"> after 12 seconds</font>

915
00:38:40,280 --> 00:38:46,530
<font color="#E5E5E5">so this is really essentially to use the</font>

916
00:38:43,650 --> 00:38:48,210
right function<font color="#E5E5E5"> as you won't see a big</font>

917
00:38:46,530 --> 00:38:51,500
<font color="#E5E5E5">hit on</font><font color="#CCCCCC"> your system</font><font color="#E5E5E5"> but if you use them</font>

918
00:38:48,210 --> 00:38:53,700
then it's<font color="#E5E5E5"> not a problem</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> easy to do</font>

919
00:38:51,500 --> 00:38:55,890
and<font color="#E5E5E5"> then we have the problem of the</font>

920
00:38:53,700 --> 00:38:58,710
countermeasures most of them are<font color="#CCCCCC"> just</font>

921
00:38:55,890 --> 00:39:01,020
too expensive<font color="#CCCCCC"> or ineffective and you</font>

922
00:38:58,710 --> 00:39:01,790
don't want<font color="#E5E5E5"> to deploy any countermeasure</font>

923
00:39:01,020 --> 00:39:04,730
and then

924
00:39:01,790 --> 00:39:08,840
you're out a month later<font color="#CCCCCC"> that yeah it</font>

925
00:39:04,730 --> 00:39:10,580
<font color="#E5E5E5">really does nothing</font><font color="#CCCCCC"> as suspected okay</font><font color="#E5E5E5"> so</font>

926
00:39:08,840 --> 00:39:14,420
if you want to<font color="#CCCCCC"> tried it I</font><font color="#E5E5E5"> hope you all</font>

927
00:39:10,580 --> 00:39:17,720
got an appetite<font color="#CCCCCC"> for trying this on your</font>

928
00:39:14,420 --> 00:39:19,370
<font color="#CCCCCC">own now</font><font color="#E5E5E5"> and here we have the link so the</font>

929
00:39:17,720 --> 00:39:21,740
drama repository you should start<font color="#E5E5E5"> with</font>

930
00:39:19,370 --> 00:39:23,630
<font color="#CCCCCC">that reverse engineer your DRM</font><font color="#E5E5E5"> figure</font>

931
00:39:21,740 --> 00:39:25,790
<font color="#E5E5E5">out what the functions are then put the</font>

932
00:39:23,630 --> 00:39:27,560
functions into row<font color="#CCCCCC"> hemorrhages and run</font>

933
00:39:25,790 --> 00:39:29,180
the native to the<font color="#CCCCCC"> double-sided hammering</font>

934
00:39:27,560 --> 00:39:32,270
to it and have some<font color="#CCCCCC"> big flips on your</font>

935
00:39:29,180 --> 00:39:34,100
system you<font color="#CCCCCC"> can also try it on arm so we</font>

936
00:39:32,270 --> 00:39:37,430
have the<font color="#CCCCCC"> lips flush which provides you</font>

937
00:39:34,100 --> 00:39:40,460
with eviction strategies and ways<font color="#CCCCCC"> to</font>

938
00:39:37,430 --> 00:39:42,319
call<font color="#CCCCCC"> slash instructions on arm platforms</font>

939
00:39:40,460 --> 00:39:45,020
<font color="#E5E5E5">so this is this is</font><font color="#CCCCCC"> a platform</font>

940
00:39:42,320 --> 00:39:47,570
independent way of<font color="#E5E5E5"> doing slash and</font>

941
00:39:45,020 --> 00:39:50,390
reload or<font color="#CCCCCC"> eviction reloads and</font><font color="#E5E5E5"> also the</font>

942
00:39:47,570 --> 00:39:52,220
DRM<font color="#CCCCCC"> I repository by the you set this is</font>

943
00:39:50,390 --> 00:39:56,720
also<font color="#E5E5E5"> a very nice start if you want</font><font color="#CCCCCC"> to do</font>

944
00:39:52,220 --> 00:39:58,879
hammering with<font color="#CCCCCC"> Ione</font><font color="#E5E5E5"> on arm so thank you</font>

945
00:39:56,720 --> 00:40:00,529
for<font color="#E5E5E5"> your attention</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> want to get in</font>

946
00:39:58,880 --> 00:40:04,130
touch<font color="#CCCCCC"> with us</font><font color="#E5E5E5"> you can do that via</font>

947
00:40:00,530 --> 00:40:06,490
Twitter or<font color="#E5E5E5"> via email and thank you</font><font color="#CCCCCC"> for</font>

948
00:40:04,130 --> 00:40:06,490
your attention

949
00:40:08,320 --> 00:40:14,199
[Applause]

