1
00:00:08,189 --> 00:00:12,900
today I would<font color="#CCCCCC"> like to talk</font><font color="#E5E5E5"> to you about</font>

2
00:00:10,290 --> 00:00:16,189
the<font color="#E5E5E5"> rich research that we've</font><font color="#CCCCCC"> been doing</font>

3
00:00:12,900 --> 00:00:18,720
on security analysis of state machines

4
00:00:16,189 --> 00:00:21,480
<font color="#E5E5E5">so implementations of state machines to</font>

5
00:00:18,720 --> 00:00:25,619
be specific<font color="#E5E5E5"> and we focus on blackbox</font>

6
00:00:21,480 --> 00:00:29,130
analysis<font color="#CCCCCC"> and what we did exactly we'll</font>

7
00:00:25,619 --> 00:00:31,859
come back to in a bit<font color="#E5E5E5"> but first I will</font>

8
00:00:29,130 --> 00:00:34,290
try to give you<font color="#CCCCCC"> a quick motivation</font><font color="#E5E5E5"> and</font>

9
00:00:31,859 --> 00:00:35,940
some<font color="#E5E5E5"> very small introduction</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to</font>

10
00:00:34,290 --> 00:00:38,330
make<font color="#CCCCCC"> sure that we're all on the</font><font color="#E5E5E5"> on the</font>

11
00:00:35,940 --> 00:00:38,330
same page

12
00:00:39,350 --> 00:00:44,399
so let's start with<font color="#CCCCCC"> why would we be</font>

13
00:00:42,899 --> 00:00:47,600
<font color="#CCCCCC">interested in state machines in the</font>

14
00:00:44,399 --> 00:00:51,180
first place so<font color="#E5E5E5"> almost every protocol</font>

15
00:00:47,600 --> 00:00:53,309
well includes some kind<font color="#E5E5E5"> of state that we</font>

16
00:00:51,180 --> 00:00:56,100
<font color="#E5E5E5">have to keep track</font><font color="#CCCCCC"> of and</font><font color="#E5E5E5"> especially in</font>

17
00:00:53,309 --> 00:00:59,089
security protocols<font color="#CCCCCC"> these states can be</font>

18
00:00:56,100 --> 00:00:59,090
<font color="#E5E5E5">quite interesting</font>

19
00:00:59,180 --> 00:01:06,060
so some<font color="#E5E5E5"> typical types of states that</font><font color="#CCCCCC"> we</font>

20
00:01:02,489 --> 00:01:08,640
might be interested<font color="#CCCCCC"> in is</font><font color="#E5E5E5"> that the user</font>

21
00:01:06,060 --> 00:01:10,050
already authenticate or not<font color="#E5E5E5"> so maybe we</font>

22
00:01:08,640 --> 00:01:12,780
<font color="#E5E5E5">only want to perform certain actions</font>

23
00:01:10,050 --> 00:01:15,690
<font color="#E5E5E5">after authentication</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> already</font>

24
00:01:12,780 --> 00:01:18,360
agree on keys exactly which keys<font color="#CCCCCC"> did we</font>

25
00:01:15,690 --> 00:01:19,979
agree<font color="#CCCCCC"> on</font><font color="#E5E5E5"> that we already start</font>

26
00:01:18,360 --> 00:01:23,149
encrypting all our traffic<font color="#E5E5E5"> or is it</font>

27
00:01:19,979 --> 00:01:26,160
still<font color="#E5E5E5"> fine to accept plaintext data and</font>

28
00:01:23,149 --> 00:01:29,729
so these are<font color="#CCCCCC"> all kind</font><font color="#E5E5E5"> of things</font><font color="#CCCCCC"> that you</font>

29
00:01:26,160 --> 00:01:34,649
need<font color="#CCCCCC"> to keep track</font><font color="#E5E5E5"> of while performing a</font>

30
00:01:29,729 --> 00:01:37,860
protocol and the state machine is a

31
00:01:34,649 --> 00:01:40,920
model that<font color="#CCCCCC"> contains all</font><font color="#E5E5E5"> the possible</font>

32
00:01:37,860 --> 00:01:43,590
states<font color="#E5E5E5"> of a protocol and how to</font>

33
00:01:40,920 --> 00:01:45,569
transition<font color="#CCCCCC"> between these different</font>

34
00:01:43,590 --> 00:01:52,470
<font color="#CCCCCC">states</font><font color="#E5E5E5"> and we'll come back to an example</font>

35
00:01:45,569 --> 00:01:55,140
<font color="#E5E5E5">in a bit so every application</font><font color="#CCCCCC"> that wants</font>

36
00:01:52,470 --> 00:01:58,020
<font color="#CCCCCC">to implement a particular</font><font color="#E5E5E5"> protocol also</font>

37
00:01:55,140 --> 00:02:01,830
will<font color="#E5E5E5"> have to implement the corresponding</font>

38
00:01:58,020 --> 00:02:05,819
state machine and<font color="#E5E5E5"> so typically this is</font>

39
00:02:01,830 --> 00:02:08,068
done<font color="#E5E5E5"> rather implicitly and</font><font color="#CCCCCC"> lots of stuff</font>

40
00:02:05,819 --> 00:02:13,410
can go<font color="#CCCCCC"> wrong there as</font><font color="#E5E5E5"> we will see in a</font>

41
00:02:08,068 --> 00:02:16,079
<font color="#CCCCCC">bit but basically</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to do is</font>

42
00:02:13,410 --> 00:02:18,600
once you<font color="#E5E5E5"> have an incoming message</font><font color="#CCCCCC"> you</font>

43
00:02:16,080 --> 00:02:21,300
have<font color="#E5E5E5"> to decide based on your current</font>

44
00:02:18,600 --> 00:02:22,049
state and what action to<font color="#E5E5E5"> perform based</font>

45
00:02:21,300 --> 00:02:23,940
on<font color="#E5E5E5"> this message</font>

46
00:02:22,050 --> 00:02:25,770
so maybe you<font color="#E5E5E5"> don't</font><font color="#CCCCCC"> even expect this</font>

47
00:02:23,940 --> 00:02:27,570
message you can just safely ignore it

48
00:02:25,770 --> 00:02:30,180
maybe you have to<font color="#E5E5E5"> perform some</font>

49
00:02:27,570 --> 00:02:33,600
cryptographic calculations to derive<font color="#CCCCCC"> the</font>

50
00:02:30,180 --> 00:02:36,300
session<font color="#E5E5E5"> keys and so on</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to</font>

51
00:02:33,600 --> 00:02:39,500
<font color="#E5E5E5">determine which message to respond to it</font>

52
00:02:36,300 --> 00:02:42,500
<font color="#CCCCCC">so</font><font color="#E5E5E5"> do you send back an error message or</font>

53
00:02:39,500 --> 00:02:45,270
<font color="#CCCCCC">just the next message</font><font color="#E5E5E5"> in the protocol</font>

54
00:02:42,500 --> 00:02:47,190
<font color="#CCCCCC">finally you</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to decide on what the</font>

55
00:02:45,270 --> 00:02:51,990
<font color="#E5E5E5">next state is in the protocol</font><font color="#CCCCCC"> that</font>

56
00:02:47,190 --> 00:02:54,600
you're going to and if you missed it

57
00:02:51,990 --> 00:02:56,700
<font color="#E5E5E5">make mistakes and in the implementation</font>

58
00:02:54,600 --> 00:02:59,430
<font color="#CCCCCC">of the state machine</font><font color="#E5E5E5"> then this can have</font>

59
00:02:56,700 --> 00:03:02,369
some very serious impact<font color="#E5E5E5"> on your</font>

60
00:02:59,430 --> 00:03:07,500
<font color="#CCCCCC">security</font><font color="#E5E5E5"> and we will see some examples</font>

61
00:03:02,370 --> 00:03:10,410
of<font color="#CCCCCC"> this later</font><font color="#E5E5E5"> on so this is</font><font color="#CCCCCC"> a really</font>

62
00:03:07,500 --> 00:03:12,420
simplified<font color="#E5E5E5"> version of of a state machine</font>

63
00:03:10,410 --> 00:03:15,810
<font color="#E5E5E5">so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see that we have two</font><font color="#CCCCCC"> stakes</font>

64
00:03:12,420 --> 00:03:19,950
<font color="#E5E5E5">in here so the top state is the initial</font>

65
00:03:15,810 --> 00:03:23,790
<font color="#E5E5E5">state you can there try to for example</font>

66
00:03:19,950 --> 00:03:25,519
confirm a<font color="#E5E5E5"> transaction it will fail and</font>

67
00:03:23,790 --> 00:03:29,310
<font color="#E5E5E5">you stay</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this initial</font><font color="#CCCCCC"> state so</font>

68
00:03:25,520 --> 00:03:33,390
<font color="#E5E5E5">nothing happens</font><font color="#CCCCCC"> you can to</font><font color="#E5E5E5"> try to send</font>

69
00:03:29,310 --> 00:03:35,640
for example<font color="#E5E5E5"> a verify pin commands</font><font color="#CCCCCC"> well</font>

70
00:03:33,390 --> 00:03:37,410
here<font color="#E5E5E5"> you</font><font color="#CCCCCC"> see that if</font><font color="#E5E5E5"> you try pin</font><font color="#CCCCCC"> for</font>

71
00:03:35,640 --> 00:03:40,739
<font color="#CCCCCC">time zero then it</font><font color="#E5E5E5"> will fail so that's</font>

72
00:03:37,410 --> 00:03:43,260
apparently<font color="#CCCCCC"> the incorrect pin code</font><font color="#E5E5E5"> if you</font>

73
00:03:40,740 --> 00:03:45,000
try<font color="#CCCCCC"> one two three four then you go to a</font>

74
00:03:43,260 --> 00:03:47,280
net the<font color="#CCCCCC"> next state so you get an okay</font>

75
00:03:45,000 --> 00:03:50,190
message<font color="#E5E5E5"> back</font><font color="#CCCCCC"> and apparently this is the</font>

76
00:03:47,280 --> 00:03:52,770
<font color="#E5E5E5">correct pin code and ending in the next</font>

77
00:03:50,190 --> 00:03:54,720
state<font color="#E5E5E5"> so in the second state that's</font>

78
00:03:52,770 --> 00:03:57,530
apparently the authenticated<font color="#CCCCCC"> state</font><font color="#E5E5E5"> we</font>

79
00:03:54,720 --> 00:04:00,450
can<font color="#E5E5E5"> actually perform some sensitive</font>

80
00:03:57,530 --> 00:04:04,800
<font color="#CCCCCC">actions so in this example</font><font color="#E5E5E5"> confirm a</font>

81
00:04:00,450 --> 00:04:08,010
transaction so this state<font color="#CCCCCC"> machine is not</font>

82
00:04:04,800 --> 00:04:11,370
complete we're missing some<font color="#E5E5E5"> outgoing</font>

83
00:04:08,010 --> 00:04:15,269
arrows here but just<font color="#E5E5E5"> to give</font><font color="#CCCCCC"> you a rough</font>

84
00:04:11,370 --> 00:04:17,630
idea<font color="#E5E5E5"> of</font><font color="#CCCCCC"> how we can visualize these</font><font color="#E5E5E5"> state</font>

85
00:04:15,270 --> 00:04:17,630
machines

86
00:04:19,399 --> 00:04:25,219
now let's continue to implementations of

87
00:04:22,729 --> 00:04:26,930
<font color="#E5E5E5">state machines so we have some</font>

88
00:04:25,220 --> 00:04:29,330
developers they try to implement<font color="#E5E5E5"> some</font>

89
00:04:26,930 --> 00:04:32,690
kind<font color="#CCCCCC"> of protocol so either TLS EMV</font><font color="#E5E5E5"> or</font>

90
00:04:29,330 --> 00:04:34,130
<font color="#E5E5E5">some other</font><font color="#CCCCCC"> security protocol how do</font><font color="#E5E5E5"> we</font>

91
00:04:32,690 --> 00:04:38,719
<font color="#E5E5E5">then know that the state machine is</font>

92
00:04:34,130 --> 00:04:40,790
<font color="#E5E5E5">implemented correctly</font><font color="#CCCCCC"> so as I said</font>

93
00:04:38,720 --> 00:04:43,130
before<font color="#E5E5E5"> often this state is somehow</font>

94
00:04:40,790 --> 00:04:46,880
encoded quite implicitly so it can for

95
00:04:43,130 --> 00:04:49,040
example be<font color="#E5E5E5"> you check whether some kind</font>

96
00:04:46,880 --> 00:04:51,110
<font color="#CCCCCC">of variable is not null</font><font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> so</font>

97
00:04:49,040 --> 00:04:53,419
whether you<font color="#CCCCCC"> already set a key or not</font><font color="#E5E5E5"> and</font>

98
00:04:51,110 --> 00:04:55,250
so it's not just one<font color="#E5E5E5"> variable that</font><font color="#CCCCCC"> tells</font>

99
00:04:53,419 --> 00:04:57,080
you exactly<font color="#E5E5E5"> what the current state</font><font color="#CCCCCC"> is</font>

100
00:04:55,250 --> 00:04:59,300
usually<font color="#CCCCCC"> it's a combination of all kinds</font>

101
00:04:57,080 --> 00:05:02,780
<font color="#CCCCCC">of different variables that together</font>

102
00:04:59,300 --> 00:05:05,150
<font color="#CCCCCC">define your state</font><font color="#E5E5E5"> and once you start to</font>

103
00:05:02,780 --> 00:05:08,000
<font color="#CCCCCC">do funny things you can mess up the</font>

104
00:05:05,150 --> 00:05:10,250
<font color="#E5E5E5">values of these</font><font color="#CCCCCC"> variables and then your</font>

105
00:05:08,000 --> 00:05:14,990
implementation might get a bit confused

106
00:05:10,250 --> 00:05:17,289
about in which<font color="#E5E5E5"> data</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> exactly so one</font>

107
00:05:14,990 --> 00:05:20,120
way<font color="#E5E5E5"> to test whether you</font><font color="#CCCCCC"> implemented a</font>

108
00:05:17,289 --> 00:05:22,550
state machine correctly is test whether

109
00:05:20,120 --> 00:05:24,080
your implementation works with other

110
00:05:22,550 --> 00:05:28,160
implementations<font color="#E5E5E5"> so whether it's</font>

111
00:05:24,080 --> 00:05:30,320
compatible<font color="#E5E5E5"> at least but of course this</font>

112
00:05:28,160 --> 00:05:32,900
<font color="#E5E5E5">will typically only test</font><font color="#CCCCCC"> the happy flow</font>

113
00:05:30,320 --> 00:05:35,060
so it will see if you are<font color="#E5E5E5"> compatible if</font>

114
00:05:32,900 --> 00:05:39,349
you speak<font color="#E5E5E5"> the same language as the</font>

115
00:05:35,060 --> 00:05:41,419
<font color="#CCCCCC">implementation on the</font><font color="#E5E5E5"> other side what we</font>

116
00:05:39,349 --> 00:05:43,550
have no clue how the implementation<font color="#CCCCCC"> will</font>

117
00:05:41,419 --> 00:05:45,049
behave if<font color="#E5E5E5"> you start sending invalid</font>

118
00:05:43,550 --> 00:05:48,139
sequences so if you start<font color="#E5E5E5"> sending</font>

119
00:05:45,050 --> 00:05:53,120
<font color="#CCCCCC">messages in wrong orders or you start</font>

120
00:05:48,139 --> 00:05:55,729
dropping<font color="#E5E5E5"> particular messages so how what</font>

121
00:05:53,120 --> 00:05:59,000
can we do<font color="#CCCCCC"> about this so one direction</font>

122
00:05:55,729 --> 00:06:01,190
<font color="#E5E5E5">that we've been looking at is trying to</font>

123
00:05:59,000 --> 00:06:03,530
<font color="#E5E5E5">extract state machines from</font>

124
00:06:01,190 --> 00:06:07,610
implementations<font color="#CCCCCC"> in a in a blackbox way</font>

125
00:06:03,530 --> 00:06:12,080
and one<font color="#E5E5E5"> way to do this is something</font>

126
00:06:07,610 --> 00:06:14,300
<font color="#E5E5E5">called a state machine inference so a</font>

127
00:06:12,080 --> 00:06:16,219
state machine inference is a completely

128
00:06:14,300 --> 00:06:18,110
blackbox technique that you can<font color="#CCCCCC"> use to</font>

129
00:06:16,220 --> 00:06:22,210
extract state machines<font color="#E5E5E5"> from</font>

130
00:06:18,110 --> 00:06:24,440
implementations<font color="#E5E5E5"> and this is done only</font><font color="#CCCCCC"> by</font>

131
00:06:22,210 --> 00:06:26,870
communicating with<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> so we do</font>

132
00:06:24,440 --> 00:06:28,490
not even have need to<font color="#CCCCCC"> have access to the</font>

133
00:06:26,870 --> 00:06:30,070
system itself<font color="#E5E5E5"> we don't need access</font><font color="#CCCCCC"> to</font>

134
00:06:28,490 --> 00:06:32,870
the<font color="#E5E5E5"> source codes we only need to be able</font>

135
00:06:30,070 --> 00:06:35,060
<font color="#CCCCCC">to communicate with the other system</font>

136
00:06:32,870 --> 00:06:36,320
so it's for<font color="#E5E5E5"> example TLS this is quite</font>

137
00:06:35,060 --> 00:06:39,169
<font color="#E5E5E5">convenience you just need a network</font>

138
00:06:36,320 --> 00:06:41,060
<font color="#E5E5E5">connection to a server for example if we</font>

139
00:06:39,169 --> 00:06:43,310
try to learn a state<font color="#E5E5E5"> machine for this</font>

140
00:06:41,060 --> 00:06:48,260
and that's all we need to<font color="#E5E5E5"> extract the</font>

141
00:06:43,310 --> 00:06:50,360
state machine using this technique<font color="#CCCCCC"> so</font>

142
00:06:48,260 --> 00:06:53,090
basically what we will<font color="#E5E5E5"> be doing is we</font>

143
00:06:50,360 --> 00:06:54,949
<font color="#E5E5E5">fast the order of the messages so we try</font>

144
00:06:53,090 --> 00:06:56,810
<font color="#CCCCCC">all kinds of different</font><font color="#E5E5E5"> orderings of</font>

145
00:06:54,949 --> 00:07:00,350
messages<font color="#E5E5E5"> and then based on the responses</font>

146
00:06:56,810 --> 00:07:05,600
from the<font color="#CCCCCC"> server or the client</font><font color="#E5E5E5"> we try to</font>

147
00:07:00,350 --> 00:07:07,729
build<font color="#E5E5E5"> up a state machine</font><font color="#CCCCCC"> and as we will</font>

148
00:07:05,600 --> 00:07:10,100
<font color="#E5E5E5">see</font><font color="#CCCCCC"> later this</font><font color="#E5E5E5"> is quite a useful</font>

149
00:07:07,729 --> 00:07:13,039
technique<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a security analysis so you</font>

150
00:07:10,100 --> 00:07:14,870
<font color="#E5E5E5">can use it to discover vulnerabilities</font>

151
00:07:13,040 --> 00:07:17,630
and bugs in<font color="#CCCCCC"> state machine</font>

152
00:07:14,870 --> 00:07:19,220
implementations<font color="#CCCCCC"> sometimes it can</font><font color="#E5E5E5"> also</font>

153
00:07:17,630 --> 00:07:23,440
provide you<font color="#CCCCCC"> some interesting insights</font>

154
00:07:19,220 --> 00:07:26,750
<font color="#CCCCCC">and codes</font><font color="#E5E5E5"> or in code so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see how</font>

155
00:07:23,440 --> 00:07:30,050
implementers interpreted specifications

156
00:07:26,750 --> 00:07:31,490
<font color="#E5E5E5">and usually they do this all in a unique</font>

157
00:07:30,050 --> 00:07:33,949
way

158
00:07:31,490 --> 00:07:35,750
so the only downside<font color="#CCCCCC"> of this technique</font>

159
00:07:33,949 --> 00:07:38,030
is that<font color="#E5E5E5"> you will not find very carefully</font>

160
00:07:35,750 --> 00:07:39,710
hidden backdoors so it's really to find

161
00:07:38,030 --> 00:07:42,650
<font color="#E5E5E5">the state machine</font><font color="#CCCCCC"> that is implemented by</font>

162
00:07:39,710 --> 00:07:45,710
<font color="#E5E5E5">a at least somewhat a well willing</font>

163
00:07:42,650 --> 00:07:48,200
developer but if<font color="#E5E5E5"> there is for example a</font>

164
00:07:45,710 --> 00:07:50,210
<font color="#CCCCCC">backdoor if you send the same message a</font>

165
00:07:48,200 --> 00:07:51,979
thousand times<font color="#E5E5E5"> something weird happens</font>

166
00:07:50,210 --> 00:07:54,109
or if you send<font color="#E5E5E5"> a very specific payload</font>

167
00:07:51,979 --> 00:07:56,870
then this technique<font color="#E5E5E5"> is not going to help</font>

168
00:07:54,110 --> 00:07:59,630
<font color="#E5E5E5">you but nevertheless it is we can have</font>

169
00:07:56,870 --> 00:08:03,950
some<font color="#E5E5E5"> very</font><font color="#CCCCCC"> interesting results</font><font color="#E5E5E5"> and using</font>

170
00:07:59,630 --> 00:08:07,820
<font color="#CCCCCC">just this technique</font><font color="#E5E5E5"> I would like to</font>

171
00:08:03,950 --> 00:08:12,550
continue<font color="#E5E5E5"> by giving you a rough idea of</font>

172
00:08:07,820 --> 00:08:17,330
<font color="#E5E5E5">how</font><font color="#CCCCCC"> this state machine</font><font color="#E5E5E5"> inference works</font>

173
00:08:12,550 --> 00:08:19,400
so it works based on hypothesis and<font color="#CCCCCC"> you</font>

174
00:08:17,330 --> 00:08:20,810
start communicating with<font color="#E5E5E5"> your system</font>

175
00:08:19,400 --> 00:08:23,060
under test<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then based on the</font>

176
00:08:20,810 --> 00:08:25,460
responses<font color="#E5E5E5"> that you get you try to expand</font>

177
00:08:23,060 --> 00:08:27,229
<font color="#E5E5E5">your hypothesis until at some point you</font>

178
00:08:25,460 --> 00:08:29,539
are satisfied and<font color="#CCCCCC"> you think that you</font>

179
00:08:27,229 --> 00:08:33,740
have learned the complete state machine

180
00:08:29,539 --> 00:08:35,569
by now so you will start with<font color="#CCCCCC"> just an</font>

181
00:08:33,740 --> 00:08:37,880
empty hypothesis we have<font color="#E5E5E5"> no clue about</font>

182
00:08:35,570 --> 00:08:39,909
this system<font color="#E5E5E5"> that we're analyzing we just</font>

183
00:08:37,880 --> 00:08:43,030
have an initial state and<font color="#E5E5E5"> we don't know</font>

184
00:08:39,909 --> 00:08:43,030
<font color="#E5E5E5">anything else</font>

185
00:08:43,210 --> 00:08:49,690
so we<font color="#E5E5E5"> start</font><font color="#CCCCCC"> by sending</font><font color="#E5E5E5"> just a single</font>

186
00:08:46,120 --> 00:08:52,840
<font color="#CCCCCC">message to this system so</font><font color="#E5E5E5"> this is an</font>

187
00:08:49,690 --> 00:08:56,820
example<font color="#E5E5E5"> for for example</font><font color="#CCCCCC"> a TLS so we send</font>

188
00:08:52,840 --> 00:09:00,040
a client<font color="#CCCCCC"> hello message to the system and</font>

189
00:08:56,820 --> 00:09:04,180
we see that the<font color="#CCCCCC"> server responds</font><font color="#E5E5E5"> with a</font>

190
00:09:00,040 --> 00:09:06,969
server<font color="#CCCCCC"> hello message so we update our</font>

191
00:09:04,180 --> 00:09:08,819
<font color="#E5E5E5">hypothesis we add a self-loop saying</font>

192
00:09:06,970 --> 00:09:12,280
that if we send<font color="#CCCCCC"> the client a low message</font>

193
00:09:08,820 --> 00:09:14,410
<font color="#CCCCCC">then the</font><font color="#E5E5E5"> server will always respond with</font>

194
00:09:12,280 --> 00:09:18,250
<font color="#E5E5E5">a server a low message and we stay</font><font color="#CCCCCC"> in</font>

195
00:09:14,410 --> 00:09:20,170
the same state<font color="#E5E5E5"> then we try another</font>

196
00:09:18,250 --> 00:09:23,020
<font color="#E5E5E5">message we see that all the other</font>

197
00:09:20,170 --> 00:09:27,040
<font color="#E5E5E5">messages actually result in fate</font><font color="#CCCCCC"> alerts</font>

198
00:09:23,020 --> 00:09:29,620
and close connections so we update our

199
00:09:27,040 --> 00:09:33,069
hypothesis and we now have hypotheses

200
00:09:29,620 --> 00:09:37,540
for<font color="#E5E5E5"> all the possible messages for one</font>

201
00:09:33,070 --> 00:09:39,610
<font color="#E5E5E5">particular state</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> we continue we</font>

202
00:09:37,540 --> 00:09:42,760
try to see what happens<font color="#CCCCCC"> if</font><font color="#E5E5E5"> we send</font>

203
00:09:39,610 --> 00:09:44,380
combinations of two messages and then we

204
00:09:42,760 --> 00:09:47,620
suddenly see that<font color="#E5E5E5"> if we send client a</font>

205
00:09:44,380 --> 00:09:49,470
<font color="#E5E5E5">load twice then we suddenly get a fatal</font>

206
00:09:47,620 --> 00:09:52,480
alert and the connection is closed again

207
00:09:49,470 --> 00:09:55,060
<font color="#E5E5E5">so apparently I our</font><font color="#CCCCCC"> hypothesis</font><font color="#E5E5E5"> so far</font>

208
00:09:52,480 --> 00:09:58,570
was not correct yet and so we will have

209
00:09:55,060 --> 00:10:00,459
<font color="#CCCCCC">to</font><font color="#E5E5E5"> update it</font><font color="#CCCCCC"> so we have to add another</font>

210
00:09:58,570 --> 00:10:02,800
state<font color="#E5E5E5"> because apparently if you send the</font>

211
00:10:00,460 --> 00:10:04,840
<font color="#CCCCCC">client a low message</font><font color="#E5E5E5"> you end up in a</font>

212
00:10:02,800 --> 00:10:06,370
different<font color="#E5E5E5"> state</font><font color="#CCCCCC"> because the second time</font>

213
00:10:04,840 --> 00:10:08,530
<font color="#E5E5E5">you send this message you suddenly get</font>

214
00:10:06,370 --> 00:10:12,490
something else<font color="#E5E5E5"> back another server low</font>

215
00:10:08,530 --> 00:10:16,030
message<font color="#E5E5E5"> anymore so we</font><font color="#CCCCCC"> add this second</font>

216
00:10:12,490 --> 00:10:17,830
state to our<font color="#E5E5E5"> hypothesis where we have a</font>

217
00:10:16,030 --> 00:10:21,400
self loop with<font color="#E5E5E5"> the client alow in the</font>

218
00:10:17,830 --> 00:10:25,810
second state and then<font color="#CCCCCC"> expect a fatal</font>

219
00:10:21,400 --> 00:10:28,780
alert back and we continue this process

220
00:10:25,810 --> 00:10:32,880
<font color="#E5E5E5">until we have some hypotheses that were</font>

221
00:10:28,780 --> 00:10:32,880
relatively<font color="#E5E5E5"> sure about that it's correct</font>

222
00:10:34,800 --> 00:10:42,040
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so this happens if you your</font>

223
00:10:37,330 --> 00:10:44,170
<font color="#E5E5E5">presentations not on your own system so</font>

224
00:10:42,040 --> 00:10:46,630
what we are trying<font color="#CCCCCC"> to learn</font><font color="#E5E5E5"> are actually</font>

225
00:10:44,170 --> 00:10:48,910
deterministic<font color="#E5E5E5"> mealy machines</font><font color="#CCCCCC"> so for</font>

226
00:10:46,630 --> 00:10:50,500
every state<font color="#E5E5E5"> for every input you have the</font>

227
00:10:48,910 --> 00:10:54,390
next state and<font color="#E5E5E5"> you have a corresponding</font>

228
00:10:50,500 --> 00:10:58,290
<font color="#E5E5E5">output and the output can also be empty</font>

229
00:10:54,390 --> 00:11:00,709
particular cases<font color="#CCCCCC"> and on a</font><font color="#E5E5E5"> very abstract</font>

230
00:10:58,290 --> 00:11:02,910
level<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see it as there are</font>

231
00:11:00,709 --> 00:11:06,779
basically two components<font color="#CCCCCC"> there is a</font>

232
00:11:02,910 --> 00:11:09,180
learner<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there is a teacher in theory</font>

233
00:11:06,779 --> 00:11:11,939
the teacher knows exactly what state

234
00:11:09,180 --> 00:11:13,589
machine<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are looking for but</font><font color="#E5E5E5"> of</font>

235
00:11:11,940 --> 00:11:14,820
<font color="#E5E5E5">course in practice this doesn't work</font>

236
00:11:13,589 --> 00:11:17,250
like<font color="#E5E5E5"> that because if we had a system</font>

237
00:11:14,820 --> 00:11:19,320
<font color="#CCCCCC">that already knows exactly what the</font>

238
00:11:17,250 --> 00:11:23,430
state machine was we wouldn't<font color="#E5E5E5"> have to</font>

239
00:11:19,320 --> 00:11:25,709
bother learning<font color="#E5E5E5"> it</font><font color="#CCCCCC"> anymore but the</font>

240
00:11:23,430 --> 00:11:27,930
learning component<font color="#E5E5E5"> tries to actually</font>

241
00:11:25,709 --> 00:11:31,260
infer the state machine that<font color="#CCCCCC"> is</font>

242
00:11:27,930 --> 00:11:34,769
implemented and it can do this<font color="#E5E5E5"> using</font>

243
00:11:31,260 --> 00:11:39,839
three different types of actions<font color="#CCCCCC"> or</font>

244
00:11:34,769 --> 00:11:41,760
queries so one that every implementation

245
00:11:39,839 --> 00:11:44,279
will need is you will need<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> a</font>

246
00:11:41,760 --> 00:11:46,230
reset query so the reset query<font color="#CCCCCC"> brings</font>

247
00:11:44,279 --> 00:11:48,360
your target system back<font color="#E5E5E5"> into its initial</font>

248
00:11:46,230 --> 00:11:52,740
<font color="#CCCCCC">State we don't know in</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> stated</font>

249
00:11:48,360 --> 00:11:54,570
<font color="#CCCCCC">currently is and deducing</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> full state</font>

250
00:11:52,740 --> 00:11:57,269
machine becomes a bit<font color="#E5E5E5"> more tricky so we</font>

251
00:11:54,570 --> 00:11:58,110
want to<font color="#E5E5E5"> have a reset</font><font color="#CCCCCC"> to get it to its</font>

252
00:11:57,269 --> 00:12:01,560
<font color="#E5E5E5">initial</font><font color="#CCCCCC"> State</font>

253
00:11:58,110 --> 00:12:04,890
and so for<font color="#E5E5E5"> network services typically</font>

254
00:12:01,560 --> 00:12:07,109
fairly<font color="#E5E5E5"> easy we just set up</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> new socket</font>

255
00:12:04,890 --> 00:12:09,089
<font color="#E5E5E5">and we assume that we didn't do anything</font>

256
00:12:07,110 --> 00:12:13,290
major on<font color="#CCCCCC"> the server</font><font color="#E5E5E5"> side to crash it</font>

257
00:12:09,089 --> 00:12:15,029
<font color="#CCCCCC">then the second type of action</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> so</font>

258
00:12:13,290 --> 00:12:17,209
<font color="#CCCCCC">called output</font><font color="#E5E5E5"> queries so the queries</font>

259
00:12:15,029 --> 00:12:19,529
that we've seen before<font color="#E5E5E5"> you send a</font>

260
00:12:17,209 --> 00:12:23,069
particular<font color="#CCCCCC"> message to the implementation</font>

261
00:12:19,529 --> 00:12:25,410
and<font color="#E5E5E5"> you see what you get back and then</font>

262
00:12:23,070 --> 00:12:27,420
by combining these reset queries and

263
00:12:25,410 --> 00:12:29,610
these output queries and the learner

264
00:12:27,420 --> 00:12:30,510
will try to build<font color="#E5E5E5"> up a hypothesis as</font>

265
00:12:29,610 --> 00:12:33,029
we've<font color="#E5E5E5"> seen before</font>

266
00:12:30,510 --> 00:12:35,189
and once it's convinced that it has

267
00:12:33,029 --> 00:12:38,519
something useful it will give this

268
00:12:35,190 --> 00:12:39,870
<font color="#E5E5E5">hypothesis to that to the teacher and</font>

269
00:12:38,519 --> 00:12:43,410
<font color="#E5E5E5">this is done using a so called</font>

270
00:12:39,870 --> 00:12:46,050
<font color="#E5E5E5">equivalence query and the feature then</font>

271
00:12:43,410 --> 00:12:48,689
tells you<font color="#E5E5E5"> yes you indeed found the</font>

272
00:12:46,050 --> 00:12:50,250
<font color="#E5E5E5">correct state machine or it can say no</font>

273
00:12:48,690 --> 00:12:52,640
you did<font color="#E5E5E5"> not find the correct state</font>

274
00:12:50,250 --> 00:12:55,440
machine and<font color="#CCCCCC"> here's</font><font color="#E5E5E5"> a counter example and</font>

275
00:12:52,640 --> 00:12:58,740
if you get a counter example the learner

276
00:12:55,440 --> 00:13:01,410
will update its hypothesis<font color="#E5E5E5"> continue</font><font color="#CCCCCC"> bit</font>

277
00:12:58,740 --> 00:13:03,449
<font color="#E5E5E5">more learning if necessary</font><font color="#CCCCCC"> and then once</font>

278
00:13:01,410 --> 00:13:06,350
it's convinced again<font color="#E5E5E5"> it will perform</font>

279
00:13:03,449 --> 00:13:08,900
another<font color="#E5E5E5"> equivalence query</font>

280
00:13:06,350 --> 00:13:11,210
and these<font color="#CCCCCC"> equivalent queries will need</font>

281
00:13:08,900 --> 00:13:13,010
to be<font color="#E5E5E5"> approximated of course because as</font>

282
00:13:11,210 --> 00:13:14,540
I<font color="#CCCCCC"> said</font><font color="#E5E5E5"> before the teacher doesn't know</font>

283
00:13:13,010 --> 00:13:17,960
<font color="#CCCCCC">exactly which state machine is</font>

284
00:13:14,540 --> 00:13:21,800
implemented<font color="#E5E5E5"> so we have some algorithms</font>

285
00:13:17,960 --> 00:13:24,800
to approximate this<font color="#CCCCCC"> so one easy way is</font>

286
00:13:21,800 --> 00:13:26,959
<font color="#CCCCCC">to do this</font><font color="#E5E5E5"> using random</font><font color="#CCCCCC"> checking so you</font>

287
00:13:24,800 --> 00:13:28,579
just check<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example a thousand</font>

288
00:13:26,960 --> 00:13:30,850
different<font color="#E5E5E5"> queries of different lengths</font>

289
00:13:28,580 --> 00:13:32,630
<font color="#E5E5E5">and if they all match between the</font>

290
00:13:30,850 --> 00:13:35,030
implementation and<font color="#E5E5E5"> the model</font><font color="#CCCCCC"> that you</font>

291
00:13:32,630 --> 00:13:38,390
just<font color="#E5E5E5"> learned we assume that it's correct</font>

292
00:13:35,030 --> 00:13:41,420
<font color="#E5E5E5">if you want a bit more certainty you can</font>

293
00:13:38,390 --> 00:13:43,670
use algorithms<font color="#E5E5E5"> like for example</font><font color="#CCCCCC"> the W</font>

294
00:13:41,420 --> 00:13:46,640
methods by<font color="#CCCCCC"> Chow</font><font color="#E5E5E5"> and then given</font><font color="#CCCCCC"> an upper</font>

295
00:13:43,670 --> 00:13:49,339
limit<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the number of states</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> will</font>

296
00:13:46,640 --> 00:13:51,230
the algorithm<font color="#CCCCCC"> will actually</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able to</font>

297
00:13:49,340 --> 00:13:53,000
determine whether it's correct<font color="#E5E5E5"> or not</font>

298
00:13:51,230 --> 00:13:56,930
<font color="#E5E5E5">but of course then you still need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

299
00:13:53,000 --> 00:13:58,790
<font color="#CCCCCC">able to tell the upper limit on</font><font color="#E5E5E5"> the</font>

300
00:13:56,930 --> 00:14:00,560
number of states<font color="#E5E5E5"> and</font><font color="#CCCCCC"> all the higher you</font>

301
00:13:58,790 --> 00:14:03,730
<font color="#CCCCCC">set</font><font color="#E5E5E5"> it more expensive it becomes to</font>

302
00:14:00,560 --> 00:14:03,729
actually<font color="#E5E5E5"> verify this</font>

303
00:14:07,459 --> 00:14:12,989
so these algorithms work<font color="#E5E5E5"> on abstract</font>

304
00:14:10,550 --> 00:14:14,849
symbols<font color="#E5E5E5"> so called input</font><font color="#CCCCCC"> and output</font>

305
00:14:12,990 --> 00:14:16,860
symbols so input symbols are the

306
00:14:14,850 --> 00:14:20,190
messages<font color="#E5E5E5"> or correspondent messages that</font>

307
00:14:16,860 --> 00:14:22,019
go to your<font color="#E5E5E5"> system under test and output</font>

308
00:14:20,190 --> 00:14:24,779
symbols<font color="#CCCCCC"> correspond</font><font color="#E5E5E5"> with messages</font><font color="#CCCCCC"> that</font>

309
00:14:22,019 --> 00:14:26,250
you actually<font color="#E5E5E5"> get back</font><font color="#CCCCCC"> so we need some</font>

310
00:14:24,779 --> 00:14:29,670
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> software to actually convert</font>

311
00:14:26,250 --> 00:14:33,600
these abstract symbols<font color="#E5E5E5"> to actually bite</font>

312
00:14:29,670 --> 00:14:35,819
that<font color="#E5E5E5"> we can send to</font><font color="#CCCCCC"> the other side</font><font color="#E5E5E5"> and</font>

313
00:14:33,600 --> 00:14:38,160
we<font color="#CCCCCC"> have some layer of abstraction there</font>

314
00:14:35,819 --> 00:14:39,660
so for example we can leave out<font color="#CCCCCC"> the</font>

315
00:14:38,160 --> 00:14:42,480
sequence numbers or as you've seen

316
00:14:39,660 --> 00:14:44,069
<font color="#CCCCCC">before we can have</font><font color="#E5E5E5"> an abstract symbol</font>

317
00:14:42,480 --> 00:14:45,930
that says<font color="#E5E5E5"> just client</font><font color="#CCCCCC"> hello and then</font>

318
00:14:44,069 --> 00:14:48,449
<font color="#E5E5E5">leave</font><font color="#CCCCCC"> it up to</font><font color="#E5E5E5"> the lower level</font>

319
00:14:45,930 --> 00:14:52,529
<font color="#CCCCCC">implementation to actually fill in some</font>

320
00:14:48,449 --> 00:14:54,689
sensible values in there so<font color="#E5E5E5"> basically</font>

321
00:14:52,529 --> 00:14:56,750
what you will need if you want<font color="#CCCCCC"> to use</font>

322
00:14:54,689 --> 00:14:59,189
this method<font color="#CCCCCC"> as</font><font color="#E5E5E5"> you need a stateless</font>

323
00:14:56,750 --> 00:15:00,899
<font color="#E5E5E5">implementation of the protocol because</font>

324
00:14:59,189 --> 00:15:03,329
<font color="#CCCCCC">you will need to be able to</font><font color="#E5E5E5"> send</font>

325
00:15:00,899 --> 00:15:04,920
messages<font color="#CCCCCC"> in all different orders</font><font color="#E5E5E5"> so you</font>

326
00:15:03,329 --> 00:15:06,660
will not just go<font color="#CCCCCC"> through the happy</font><font color="#E5E5E5"> flow</font>

327
00:15:04,920 --> 00:15:10,019
you might also have<font color="#E5E5E5"> to start with the</font>

328
00:15:06,660 --> 00:15:12,810
last message<font color="#E5E5E5"> and if that last messenger</font>

329
00:15:10,019 --> 00:15:14,339
happens to be an encrypted message<font color="#E5E5E5"> then</font>

330
00:15:12,810 --> 00:15:17,699
<font color="#E5E5E5">you already have to</font><font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> that at</font>

331
00:15:14,339 --> 00:15:23,009
least<font color="#E5E5E5"> you initialize the keys to some</font>

332
00:15:17,699 --> 00:15:25,170
kind<font color="#E5E5E5"> of sensible value</font><font color="#CCCCCC"> so here you can</font>

333
00:15:23,009 --> 00:15:26,939
see how we get<font color="#E5E5E5"> this for there</font><font color="#CCCCCC"> for</font>

334
00:15:25,170 --> 00:15:30,000
<font color="#E5E5E5">bankcards for</font><font color="#CCCCCC"> example we have the</font>

335
00:15:26,939 --> 00:15:33,990
learner<font color="#E5E5E5"> we send command type so</font><font color="#CCCCCC"> it so</font>

336
00:15:30,000 --> 00:15:35,430
these are<font color="#CCCCCC"> Envy commands</font><font color="#E5E5E5"> it sent it sends</font>

337
00:15:33,990 --> 00:15:37,170
it to the<font color="#CCCCCC"> so</font><font color="#E5E5E5"> called test harness or</font>

338
00:15:35,430 --> 00:15:40,229
mapper<font color="#E5E5E5"> and the map reading converts it</font>

339
00:15:37,170 --> 00:15:42,300
to<font color="#E5E5E5"> actual</font><font color="#CCCCCC"> smart</font><font color="#E5E5E5"> card commands that the</font>

340
00:15:40,230 --> 00:15:46,139
smart cards will understand and<font color="#CCCCCC"> will</font>

341
00:15:42,300 --> 00:15:50,000
interpret<font color="#E5E5E5"> the returned responses so we</font>

342
00:15:46,139 --> 00:15:50,000
the algorithms can also work with<font color="#CCCCCC"> this</font>

343
00:15:51,800 --> 00:15:56,569
so we looked<font color="#E5E5E5"> at the different</font><font color="#CCCCCC"> types of</font>

344
00:15:55,110 --> 00:16:02,069
<font color="#E5E5E5">systems so we looked at real world</font>

345
00:15:56,569 --> 00:16:05,939
systems so we started<font color="#E5E5E5"> off with a</font><font color="#CCCCCC"> bank</font>

346
00:16:02,069 --> 00:16:09,079
cards<font color="#E5E5E5"> and we looked at</font><font color="#CCCCCC"> hand held readers</font>

347
00:16:05,939 --> 00:16:09,079
for online<font color="#E5E5E5"> banking</font>

348
00:16:09,319 --> 00:16:15,000
we looked<font color="#E5E5E5"> at the TLS protocol so we</font>

349
00:16:12,269 --> 00:16:18,029
<font color="#E5E5E5">looked at a collection of various</font>

350
00:16:15,000 --> 00:16:19,779
well-known<font color="#CCCCCC"> or</font><font color="#E5E5E5"> widely used TLS</font>

351
00:16:18,029 --> 00:16:23,050
implementations<font color="#CCCCCC"> we found cement</font>

352
00:16:19,779 --> 00:16:25,569
<font color="#CCCCCC">resting things over there we looked</font><font color="#E5E5E5"> at</font>

353
00:16:23,050 --> 00:16:30,160
<font color="#E5E5E5">different</font><font color="#CCCCCC"> OpenSSL versions</font><font color="#E5E5E5"> from the last</font>

354
00:16:25,569 --> 00:16:33,219
<font color="#E5E5E5">14 years</font><font color="#CCCCCC"> and next I will go</font><font color="#E5E5E5"> into a bit</font>

355
00:16:30,160 --> 00:16:35,709
<font color="#CCCCCC">more detail</font><font color="#E5E5E5"> these use</font><font color="#CCCCCC"> cases</font><font color="#E5E5E5"> and next to</font>

356
00:16:33,220 --> 00:16:38,709
this we also<font color="#E5E5E5"> looked at</font><font color="#CCCCCC"> different</font>

357
00:16:35,709 --> 00:16:41,349
protocols so for example<font color="#E5E5E5"> SSH and we're</font>

358
00:16:38,709 --> 00:16:47,018
also looking at<font color="#E5E5E5"> some</font><font color="#CCCCCC"> other CPM protocols</font>

359
00:16:41,350 --> 00:16:49,689
at the moment as well<font color="#E5E5E5"> so the tool</font><font color="#CCCCCC"> that</font>

360
00:16:47,019 --> 00:16:52,300
we use for this is<font color="#CCCCCC"> called</font><font color="#E5E5E5"> state</font><font color="#CCCCCC"> Lerner</font>

361
00:16:49,689 --> 00:16:55,839
<font color="#E5E5E5">so it's available on github and it's</font>

362
00:16:52,300 --> 00:16:57,849
actually built<font color="#E5E5E5"> around</font><font color="#CCCCCC"> a library</font><font color="#E5E5E5"> that's</font>

363
00:16:55,839 --> 00:17:01,059
developed at a document<font color="#E5E5E5"> called learn</font>

364
00:16:57,850 --> 00:17:04,929
<font color="#E5E5E5">labs so this library provides us with</font>

365
00:17:01,059 --> 00:17:06,428
<font color="#E5E5E5">all the learning algorithms</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> state</font>

366
00:17:04,929 --> 00:17:08,380
<font color="#E5E5E5">learn or provides a nice</font><font color="#CCCCCC"> wrapper around</font>

367
00:17:06,429 --> 00:17:12,220
<font color="#CCCCCC">this and has for example built-in</font>

368
00:17:08,380 --> 00:17:13,990
support<font color="#E5E5E5"> to test TLS implementations or</font>

369
00:17:12,220 --> 00:17:16,480
smart<font color="#E5E5E5"> card implementations but they can</font>

370
00:17:13,990 --> 00:17:22,179
also be fairly<font color="#E5E5E5"> easily be</font><font color="#CCCCCC"> extended to</font>

371
00:17:16,480 --> 00:17:24,429
analyze other protocols so let's start

372
00:17:22,179 --> 00:17:27,690
<font color="#E5E5E5">with the first use</font><font color="#CCCCCC"> case so we started</font>

373
00:17:24,429 --> 00:17:30,399
<font color="#E5E5E5">off with the bank cards as I said before</font>

374
00:17:27,690 --> 00:17:33,700
so these bank cards typically use the

375
00:17:30,399 --> 00:17:36,250
EMV protocol so<font color="#E5E5E5"> in V stands for europay</font>

376
00:17:33,700 --> 00:17:38,020
MasterCard and Visa so these are the

377
00:17:36,250 --> 00:17:41,440
three companies<font color="#CCCCCC"> that somewhere in the</font>

378
00:17:38,020 --> 00:17:43,500
<font color="#E5E5E5">90s started with this standard standard</font>

379
00:17:41,440 --> 00:17:46,210
and this<font color="#E5E5E5"> is the standard is now</font>

380
00:17:43,500 --> 00:17:49,380
maintained by<font color="#E5E5E5"> a company called</font><font color="#CCCCCC"> envy Co</font>

381
00:17:46,210 --> 00:17:51,940
or an<font color="#E5E5E5"> organization and it's owned by</font>

382
00:17:49,380 --> 00:17:58,990
well<font color="#E5E5E5"> the whole list of credit card</font>

383
00:17:51,940 --> 00:18:01,059
companies<font color="#CCCCCC"> by now so as a your regular</font>

384
00:17:58,990 --> 00:18:04,419
industrial standard I guess<font color="#E5E5E5"> it's quite</font>

385
00:18:01,059 --> 00:18:07,750
extensive has lots of options<font color="#CCCCCC"> so the</font>

386
00:18:04,419 --> 00:18:10,419
<font color="#E5E5E5">specifications are over 700 pages so</font>

387
00:18:07,750 --> 00:18:12,610
that's divided<font color="#CCCCCC"> over four books</font><font color="#E5E5E5"> and this</font>

388
00:18:10,419 --> 00:18:14,140
<font color="#E5E5E5">is just a compact standard so if you</font>

389
00:18:12,610 --> 00:18:16,570
want to look<font color="#E5E5E5"> at the contactless</font>

390
00:18:14,140 --> 00:18:20,559
<font color="#CCCCCC">standards</font><font color="#E5E5E5"> you get some</font><font color="#CCCCCC"> four more books</font>

391
00:18:16,570 --> 00:18:21,939
<font color="#E5E5E5">on top of that even if you have all</font><font color="#CCCCCC"> of</font>

392
00:18:20,559 --> 00:18:24,190
these<font color="#E5E5E5"> specifications you're still not</font>

393
00:18:21,940 --> 00:18:26,169
<font color="#E5E5E5">there because every</font><font color="#CCCCCC"> payment provider has</font>

394
00:18:24,190 --> 00:18:28,990
their own specifications built on top<font color="#E5E5E5"> of</font>

395
00:18:26,169 --> 00:18:31,660
<font color="#E5E5E5">this so for example MasterCard has their</font>

396
00:18:28,990 --> 00:18:33,730
own specifications<font color="#E5E5E5"> and configurations</font>

397
00:18:31,660 --> 00:18:36,070
but<font color="#E5E5E5"> unfortunately these are not public</font>

398
00:18:33,730 --> 00:18:40,240
as you have to guess a bit<font color="#E5E5E5"> there what</font>

399
00:18:36,070 --> 00:18:43,659
they did and the standard as I said

400
00:18:40,240 --> 00:18:46,210
before<font color="#E5E5E5"> offers</font><font color="#CCCCCC"> you many options so you</font>

401
00:18:43,660 --> 00:18:48,100
have<font color="#E5E5E5"> different ways of authenticating</font>

402
00:18:46,210 --> 00:18:49,480
your<font color="#E5E5E5"> cards</font><font color="#CCCCCC"> so if you put it</font><font color="#E5E5E5"> into a</font>

403
00:18:48,100 --> 00:18:50,889
<font color="#CCCCCC">terminal the terminal wants to know</font>

404
00:18:49,480 --> 00:18:54,549
whether the car<font color="#E5E5E5"> that you just inserted</font>

405
00:18:50,890 --> 00:18:56,470
<font color="#CCCCCC">it's genuine and there are different</font>

406
00:18:54,549 --> 00:18:58,629
methods<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> there are different</font>

407
00:18:56,470 --> 00:19:01,480
methods to authenticate<font color="#E5E5E5"> the</font><font color="#CCCCCC"> cardholder</font>

408
00:18:58,630 --> 00:19:03,220
<font color="#E5E5E5">so typically this is</font><font color="#CCCCCC"> done by you</font>

409
00:19:01,480 --> 00:19:05,350
entering<font color="#E5E5E5"> your PIN</font><font color="#CCCCCC"> codes but</font><font color="#E5E5E5"> if not</font>

410
00:19:03,220 --> 00:19:08,169
entering your PIN code it<font color="#E5E5E5"> can either be</font>

411
00:19:05,350 --> 00:19:10,990
verified by the card directly<font color="#E5E5E5"> or by the</font>

412
00:19:08,169 --> 00:19:13,720
bank online and then you also have

413
00:19:10,990 --> 00:19:15,340
<font color="#CCCCCC">different</font><font color="#E5E5E5"> types</font><font color="#CCCCCC"> of transactions</font><font color="#E5E5E5"> so you</font>

414
00:19:13,720 --> 00:19:17,740
can have<font color="#CCCCCC"> online transactions where the</font>

415
00:19:15,340 --> 00:19:19,928
<font color="#E5E5E5">card starts communicating with the</font>

416
00:19:17,740 --> 00:19:22,330
<font color="#E5E5E5">backend</font><font color="#CCCCCC"> of your</font><font color="#E5E5E5"> bank or it can be</font>

417
00:19:19,929 --> 00:19:26,110
<font color="#E5E5E5">offline so there's no online connection</font>

418
00:19:22,330 --> 00:19:28,510
necessary<font color="#CCCCCC"> and then all of</font><font color="#E5E5E5"> these options</font>

419
00:19:26,110 --> 00:19:32,408
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> parametrized</font><font color="#CCCCCC"> using so-called data</font>

420
00:19:28,510 --> 00:19:34,809
object lists<font color="#E5E5E5"> so there's quite some</font>

421
00:19:32,409 --> 00:19:40,600
<font color="#E5E5E5">choices</font><font color="#CCCCCC"> to be made</font><font color="#E5E5E5"> and also quite some</font>

422
00:19:34,809 --> 00:19:42,700
things that could possibly<font color="#E5E5E5"> go wrong so</font>

423
00:19:40,600 --> 00:19:44,289
what we did for this research we turned

424
00:19:42,700 --> 00:19:47,919
around to colleagues<font color="#CCCCCC"> asked them for</font>

425
00:19:44,289 --> 00:19:49,990
<font color="#CCCCCC">their bank cards we managed to convinced</font>

426
00:19:47,919 --> 00:19:53,650
about<font color="#E5E5E5"> 16 to actually handle and over</font>

427
00:19:49,990 --> 00:19:55,390
some bank cards so usually we got all

428
00:19:53,650 --> 00:19:57,789
bank cards people<font color="#CCCCCC"> didn't really</font><font color="#E5E5E5"> like us</font>

429
00:19:55,390 --> 00:19:59,260
playing<font color="#E5E5E5"> with their bank cards that they</font>

430
00:19:57,789 --> 00:20:02,260
still wanted<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> groceries</font><font color="#CCCCCC"> in the</font>

431
00:19:59,260 --> 00:20:05,860
afternoon but we could still get some

432
00:20:02,260 --> 00:20:08,289
nice results<font color="#CCCCCC"> from this so these models</font>

433
00:20:05,860 --> 00:20:11,080
<font color="#E5E5E5">contain four to eight</font><font color="#CCCCCC"> different states</font>

434
00:20:08,289 --> 00:20:15,070
<font color="#CCCCCC">so here you</font><font color="#E5E5E5"> can already see that these</font>

435
00:20:11,080 --> 00:20:17,020
are quite<font color="#E5E5E5"> different</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> typically it</font>

436
00:20:15,070 --> 00:20:19,450
took us<font color="#E5E5E5"> about less than 20 minutes</font><font color="#CCCCCC"> to</font>

437
00:20:17,020 --> 00:20:23,520
<font color="#E5E5E5">construct a model</font><font color="#CCCCCC"> or to learn a state</font>

438
00:20:19,450 --> 00:20:23,520
machine<font color="#E5E5E5"> from a single card</font>

439
00:20:24,040 --> 00:20:28,060
so actually we did find one<font color="#CCCCCC"> of the</font>

440
00:20:26,200 --> 00:20:30,040
<font color="#E5E5E5">MasterCard</font><font color="#CCCCCC"> specification somewhere</font>

441
00:20:28,060 --> 00:20:32,080
<font color="#CCCCCC">online with a state machine in there so</font>

442
00:20:30,040 --> 00:20:34,210
they did<font color="#E5E5E5"> have it in their specifications</font>

443
00:20:32,080 --> 00:20:35,830
<font color="#CCCCCC">but</font><font color="#E5E5E5"> still the cards that we analyzed</font>

444
00:20:34,210 --> 00:20:38,950
didn't follow their state machine

445
00:20:35,830 --> 00:20:42,699
exactly so they did some<font color="#E5E5E5"> things</font>

446
00:20:38,950 --> 00:20:44,320
differently<font color="#CCCCCC"> so fortunately or</font>

447
00:20:42,700 --> 00:20:47,650
unfortunately we did<font color="#E5E5E5"> not find any</font>

448
00:20:44,320 --> 00:20:48,850
security<font color="#CCCCCC"> problems in these bank cards</font><font color="#E5E5E5"> so</font>

449
00:20:47,650 --> 00:20:50,380
that's why I'm still<font color="#E5E5E5"> giving</font>

450
00:20:48,850 --> 00:20:52,959
presentations in Bochum instead of

451
00:20:50,380 --> 00:20:56,010
sitting<font color="#E5E5E5"> on the beach in</font><font color="#CCCCCC"> the Bahamas but</font>

452
00:20:52,960 --> 00:20:59,850
[Music]

453
00:20:56,010 --> 00:21:03,850
<font color="#CCCCCC">still we could see some interesting</font>

454
00:20:59,850 --> 00:21:06,370
<font color="#CCCCCC">results</font><font color="#E5E5E5"> in these models</font><font color="#CCCCCC"> I also tried to</font>

455
00:21:03,850 --> 00:21:09,250
do the same<font color="#CCCCCC"> on a contactless card</font><font color="#E5E5E5"> so the</font>

456
00:21:06,370 --> 00:21:10,989
protocol is fairly similar<font color="#CCCCCC"> but on so</font>

457
00:21:09,250 --> 00:21:12,430
when learning this you<font color="#E5E5E5"> send lots of</font>

458
00:21:10,990 --> 00:21:16,270
messages<font color="#CCCCCC"> you</font><font color="#E5E5E5"> start lots of new</font>

459
00:21:12,430 --> 00:21:17,770
transactions<font color="#E5E5E5"> all these contact cards</font>

460
00:21:16,270 --> 00:21:19,330
<font color="#E5E5E5">were perfectly fine with this the</font>

461
00:21:17,770 --> 00:21:22,090
contactless card did not like it<font color="#E5E5E5"> so much</font>

462
00:21:19,330 --> 00:21:25,480
<font color="#E5E5E5">so after a couple</font><font color="#CCCCCC"> of thousands of failed</font>

463
00:21:22,090 --> 00:21:27,250
transactions it actually blocked<font color="#E5E5E5"> and</font>

464
00:21:25,480 --> 00:21:32,710
then we couldn't<font color="#CCCCCC"> get it back</font><font color="#E5E5E5"> anymore so</font>

465
00:21:27,250 --> 00:21:35,730
we gave<font color="#CCCCCC"> up on that direction</font><font color="#E5E5E5"> now so this</font>

466
00:21:32,710 --> 00:21:38,680
<font color="#CCCCCC">is so typically what you get out of this</font>

467
00:21:35,730 --> 00:21:43,030
<font color="#E5E5E5">I'm not expecting</font><font color="#CCCCCC"> you to read what's</font>

468
00:21:38,680 --> 00:21:44,590
there we have<font color="#E5E5E5"> lots of transitions so</font>

469
00:21:43,030 --> 00:21:46,420
these are all kinds of different

470
00:21:44,590 --> 00:21:49,540
<font color="#CCCCCC">messages that are sent to the</font>

471
00:21:46,420 --> 00:21:52,870
<font color="#CCCCCC">implementation</font><font color="#E5E5E5"> and we clean</font><font color="#CCCCCC"> it up a bit</font>

472
00:21:49,540 --> 00:21:55,720
we merge some<font color="#E5E5E5"> translations</font><font color="#CCCCCC"> that gives</font>

473
00:21:52,870 --> 00:21:57,520
you the same output<font color="#E5E5E5"> make the</font><font color="#CCCCCC"> output a</font>

474
00:21:55,720 --> 00:22:01,840
bit more<font color="#E5E5E5"> readable</font><font color="#CCCCCC"> and you get something</font>

475
00:21:57,520 --> 00:22:04,570
<font color="#CCCCCC">that</font><font color="#E5E5E5"> looks</font><font color="#CCCCCC"> a bit more useful and then if</font>

476
00:22:01,840 --> 00:22:07,750
we get rid<font color="#CCCCCC"> of a bit</font><font color="#E5E5E5"> more we can actually</font>

477
00:22:04,570 --> 00:22:09,370
get<font color="#E5E5E5"> models that you would be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

478
00:22:07,750 --> 00:22:13,780
understand given that you've read the

479
00:22:09,370 --> 00:22:16,060
several<font color="#E5E5E5"> hundred pages of EMV spec so</font>

480
00:22:13,780 --> 00:22:22,780
this looks all more<font color="#CCCCCC"> or</font><font color="#E5E5E5"> less what you</font>

481
00:22:16,060 --> 00:22:26,980
would expect<font color="#E5E5E5"> as I said we've done</font><font color="#CCCCCC"> this</font>

482
00:22:22,780 --> 00:22:30,280
for<font color="#CCCCCC"> many different cards -</font><font color="#E5E5E5"> these here</font>

483
00:22:26,980 --> 00:22:32,800
you see<font color="#E5E5E5"> two models of both</font><font color="#CCCCCC"> maestro cards</font>

484
00:22:30,280 --> 00:22:34,480
or<font color="#E5E5E5"> master cards cards but one</font><font color="#CCCCCC"> that's</font>

485
00:22:32,800 --> 00:22:36,760
actually<font color="#E5E5E5"> from a Dutch bank so the left</font>

486
00:22:34,480 --> 00:22:37,320
<font color="#E5E5E5">one is from the data bank the right one</font>

487
00:22:36,760 --> 00:22:40,050
is from the

488
00:22:37,320 --> 00:22:43,200
<font color="#CCCCCC">spunk</font><font color="#E5E5E5"> a German bank and you can see that</font>

489
00:22:40,050 --> 00:22:45,540
even here though they both implement

490
00:22:43,200 --> 00:22:53,220
<font color="#E5E5E5">maestro</font><font color="#CCCCCC"> they both actually</font><font color="#E5E5E5"> have a</font>

491
00:22:45,540 --> 00:22:55,050
different state machine<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then so we</font>

492
00:22:53,220 --> 00:22:56,400
also looked<font color="#E5E5E5"> at some EMV cap applications</font>

493
00:22:55,050 --> 00:22:59,760
so these are the applications that<font color="#E5E5E5"> are</font>

494
00:22:56,400 --> 00:23:02,160
<font color="#E5E5E5">you used by your handheld readers if you</font>

495
00:22:59,760 --> 00:23:04,470
do some online banking<font color="#CCCCCC"> so then you enter</font>

496
00:23:02,160 --> 00:23:06,000
or insert your<font color="#E5E5E5"> card into one of these</font>

497
00:23:04,470 --> 00:23:07,800
<font color="#E5E5E5">readers you enter your</font><font color="#CCCCCC"> pin code and</font>

498
00:23:06,000 --> 00:23:09,300
<font color="#E5E5E5">there's some random looking code from</font>

499
00:23:07,800 --> 00:23:11,370
your<font color="#E5E5E5"> bank and you get a</font><font color="#CCCCCC"> random looking</font>

500
00:23:09,300 --> 00:23:17,700
code back that you enter again<font color="#E5E5E5"> on there</font>

501
00:23:11,370 --> 00:23:19,679
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> website and here you</font><font color="#E5E5E5"> can see so</font>

502
00:23:17,700 --> 00:23:22,830
somewhere<font color="#E5E5E5"> at the bottom</font><font color="#CCCCCC"> you see</font><font color="#E5E5E5"> that</font>

503
00:23:19,680 --> 00:23:26,520
there<font color="#E5E5E5"> is a generate AC and for a TC and</font>

504
00:23:22,830 --> 00:23:28,139
you get a TC back and but in order<font color="#E5E5E5"> to be</font>

505
00:23:26,520 --> 00:23:30,960
able<font color="#E5E5E5"> to do this you will always have to</font>

506
00:23:28,140 --> 00:23:34,290
go<font color="#E5E5E5"> via this verify step so this is the</font>

507
00:23:30,960 --> 00:23:36,090
step where<font color="#CCCCCC"> your</font><font color="#E5E5E5"> pin code is verified so</font>

508
00:23:34,290 --> 00:23:38,520
in this case it's only possible<font color="#CCCCCC"> to get</font>

509
00:23:36,090 --> 00:23:40,199
those the correct digits<font color="#CCCCCC"> to enter on</font>

510
00:23:38,520 --> 00:23:43,410
your<font color="#E5E5E5"> banking website if you</font><font color="#CCCCCC"> actually</font>

511
00:23:40,200 --> 00:23:46,610
enter<font color="#CCCCCC"> the pin codes on your card before</font>

512
00:23:43,410 --> 00:23:46,610
<font color="#E5E5E5">and it was correct</font>

513
00:23:49,080 --> 00:23:54,699
so then we<font color="#E5E5E5"> continue to another device</font><font color="#CCCCCC"> so</font>

514
00:23:52,900 --> 00:23:58,090
<font color="#E5E5E5">we went on to some other banking</font>

515
00:23:54,700 --> 00:23:59,860
applications so there was this

516
00:23:58,090 --> 00:24:02,139
interesting<font color="#E5E5E5"> device that was introduced</font>

517
00:23:59,860 --> 00:24:04,479
so<font color="#CCCCCC"> this was called the identifier - so</font>

518
00:24:02,140 --> 00:24:07,390
this is used<font color="#E5E5E5"> by a Dutch bank ABN AMRO</font>

519
00:24:04,480 --> 00:24:09,640
Bank<font color="#E5E5E5"> and it actually has support for a</font>

520
00:24:07,390 --> 00:24:12,610
USB<font color="#E5E5E5"> cable</font><font color="#CCCCCC"> so you can wear</font><font color="#E5E5E5"> a USB cable</font>

521
00:24:09,640 --> 00:24:15,730
<font color="#CCCCCC">you can connect it to your PC</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

522
00:24:12,610 --> 00:24:18,010
if you do an<font color="#CCCCCC"> online transaction it will</font>

523
00:24:15,730 --> 00:24:20,800
display some<font color="#E5E5E5"> meaningful</font><font color="#CCCCCC"> information on</font>

524
00:24:18,010 --> 00:24:25,110
the on the device so how much money<font color="#E5E5E5"> you</font>

525
00:24:20,800 --> 00:24:28,629
are<font color="#E5E5E5"> transferring to which bank account</font>

526
00:24:25,110 --> 00:24:31,120
<font color="#E5E5E5">so if you do this correctly</font><font color="#CCCCCC"> of course</font>

527
00:24:28,630 --> 00:24:32,950
<font color="#CCCCCC">that's a it's a very good</font><font color="#E5E5E5"> idea because</font>

528
00:24:31,120 --> 00:24:34,719
if you just<font color="#CCCCCC"> enter some random numbers on</font>

529
00:24:32,950 --> 00:24:37,210
this<font color="#E5E5E5"> device you have no clue exactly</font>

530
00:24:34,720 --> 00:24:39,160
<font color="#E5E5E5">which transaction you're authenticating</font>

531
00:24:37,210 --> 00:24:41,340
<font color="#E5E5E5">if you actually sign one of these</font>

532
00:24:39,160 --> 00:24:43,480
messages<font color="#CCCCCC"> that</font><font color="#E5E5E5"> says I'm not now going to</font>

533
00:24:41,340 --> 00:24:45,389
transfer a thousand euros<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> in</font>

534
00:24:43,480 --> 00:24:49,690
<font color="#E5E5E5">this account then at least you know</font>

535
00:24:45,390 --> 00:24:52,450
<font color="#E5E5E5">what's happening</font><font color="#CCCCCC"> so we thought it was</font><font color="#E5E5E5"> a</font>

536
00:24:49,690 --> 00:24:55,000
good idea<font color="#E5E5E5"> that they would try</font><font color="#CCCCCC"> this so we</font>

537
00:24:52,450 --> 00:24:56,110
had a<font color="#E5E5E5"> master student who was looking</font>

538
00:24:55,000 --> 00:24:57,700
<font color="#E5E5E5">into this because we wanted</font><font color="#CCCCCC"> to</font>

539
00:24:56,110 --> 00:24:58,750
understand exactly how they were<font color="#CCCCCC"> doing</font>

540
00:24:57,700 --> 00:25:00,820
this

541
00:24:58,750 --> 00:25:02,760
so originally we thought<font color="#E5E5E5"> well</font><font color="#CCCCCC"> maybe we</font>

542
00:25:00,820 --> 00:25:06,250
<font color="#E5E5E5">can use</font><font color="#CCCCCC"> it for something else as well</font>

543
00:25:02,760 --> 00:25:08,440
<font color="#CCCCCC">later it</font><font color="#E5E5E5"> turned out that</font><font color="#CCCCCC"> we forgot about</font>

544
00:25:06,250 --> 00:25:12,490
<font color="#E5E5E5">this plan and we didn't bother</font><font color="#CCCCCC"> anymore</font>

545
00:25:08,440 --> 00:25:15,990
<font color="#CCCCCC">because we well turned</font><font color="#E5E5E5"> out it was not</font>

546
00:25:12,490 --> 00:25:15,990
such a good good idea after all

547
00:25:16,290 --> 00:25:23,470
<font color="#E5E5E5">so in this analysis from this master</font>

548
00:25:19,660 --> 00:25:25,210
student<font color="#E5E5E5"> we found so a serious security</font>

549
00:25:23,470 --> 00:25:27,700
flaw<font color="#E5E5E5"> so we will come back</font><font color="#CCCCCC"> to this later</font>

550
00:25:25,210 --> 00:25:30,070
<font color="#CCCCCC">also we</font><font color="#E5E5E5"> found some other funny</font><font color="#CCCCCC"> stuff so</font>

551
00:25:27,700 --> 00:25:31,860
you can<font color="#E5E5E5"> there are some standard</font><font color="#CCCCCC"> texts</font>

552
00:25:30,070 --> 00:25:34,750
that you<font color="#CCCCCC"> can display</font><font color="#E5E5E5"> on this device</font>

553
00:25:31,860 --> 00:25:36,580
using<font color="#E5E5E5"> JavaScript from your browser so</font>

554
00:25:34,750 --> 00:25:40,810
one<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> messages is follow the</font>

555
00:25:36,580 --> 00:25:43,270
<font color="#E5E5E5">instructions on</font><font color="#CCCCCC"> your computer so well if</font>

556
00:25:40,810 --> 00:25:44,889
you display that<font color="#E5E5E5"> and then refer the</font>

557
00:25:43,270 --> 00:25:47,350
users back to<font color="#CCCCCC"> your</font><font color="#E5E5E5"> computer that we</font>

558
00:25:44,890 --> 00:25:51,600
didn't<font color="#E5E5E5"> trust so we</font><font color="#CCCCCC"> added another</font><font color="#E5E5E5"> device</font>

559
00:25:47,350 --> 00:25:54,790
then<font color="#E5E5E5"> it's maybe</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> the best idea ever</font>

560
00:25:51,600 --> 00:25:59,040
<font color="#CCCCCC">and you</font><font color="#E5E5E5"> can also with some</font><font color="#CCCCCC"> effort you</font>

561
00:25:54,790 --> 00:25:59,040
<font color="#E5E5E5">can get your own text on there as well</font>

562
00:26:00,240 --> 00:26:05,140
so we found<font color="#CCCCCC"> this through some manual</font>

563
00:26:02,860 --> 00:26:07,059
analysis so we<font color="#E5E5E5"> looked at USB traffic try</font>

564
00:26:05,140 --> 00:26:08,679
to figure<font color="#CCCCCC"> out what kind of communication</font>

565
00:26:07,059 --> 00:26:13,210
was going on between<font color="#CCCCCC"> a smart</font><font color="#E5E5E5"> car</font><font color="#CCCCCC"> and the</font>

566
00:26:08,679 --> 00:26:15,790
device and<font color="#E5E5E5"> next we wanted to know if we</font>

567
00:26:13,210 --> 00:26:17,620
<font color="#E5E5E5">can actually automate this type of</font>

568
00:26:15,790 --> 00:26:25,299
analysis<font color="#E5E5E5"> whether we can also find these</font>

569
00:26:17,620 --> 00:26:26,979
<font color="#E5E5E5">kind of bugs using automated</font><font color="#CCCCCC"> tools but</font>

570
00:26:25,299 --> 00:26:29,590
<font color="#E5E5E5">what's a bit of a problem because well</font>

571
00:26:26,980 --> 00:26:31,780
this identify you actually have to enter

572
00:26:29,590 --> 00:26:34,629
<font color="#CCCCCC">your PIN codes</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> okay button a</font>

573
00:26:31,780 --> 00:26:36,129
cancel button<font color="#E5E5E5"> so it's not as easy as</font>

574
00:26:34,630 --> 00:26:39,280
<font color="#E5E5E5">with the bank cards we just send some</font>

575
00:26:36,130 --> 00:26:40,900
data over a connection and then get some

576
00:26:39,280 --> 00:26:43,389
data back<font color="#E5E5E5"> now we</font><font color="#CCCCCC"> actually had to</font>

577
00:26:40,900 --> 00:26:47,080
physically press some buttons<font color="#E5E5E5"> to get</font>

578
00:26:43,390 --> 00:26:49,870
anywhere interesting<font color="#CCCCCC"> in the protocol so</font>

579
00:26:47,080 --> 00:26:55,659
<font color="#E5E5E5">we have</font><font color="#CCCCCC"> to students</font><font color="#E5E5E5"> from all three of</font>

580
00:26:49,870 --> 00:26:57,760
<font color="#CCCCCC">the</font><font color="#E5E5E5"> cars looking for a project so what</font>

581
00:26:55,660 --> 00:27:03,130
we<font color="#E5E5E5"> did we gave them a box of Lego to</font>

582
00:26:57,760 --> 00:27:05,890
play with and<font color="#E5E5E5"> then in the end we</font><font color="#CCCCCC"> had a</font>

583
00:27:03,130 --> 00:27:12,460
<font color="#E5E5E5">Lego robot that could actually push the</font>

584
00:27:05,890 --> 00:27:13,870
buttons<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us so we had three motors on</font>

585
00:27:12,460 --> 00:27:16,870
this robot that can press different

586
00:27:13,870 --> 00:27:19,870
buttons so obviously we<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> the</font>

587
00:27:16,870 --> 00:27:22,870
<font color="#CCCCCC">okay button</font><font color="#E5E5E5"> and a cancel button</font><font color="#CCCCCC"> but next</font>

588
00:27:19,870 --> 00:27:25,360
to that<font color="#E5E5E5"> we also need to be able to enter</font>

589
00:27:22,870 --> 00:27:27,428
<font color="#E5E5E5">the pin code and so for this we</font><font color="#CCCCCC"> just</font>

590
00:27:25,360 --> 00:27:30,189
added the<font color="#E5E5E5"> motor to press one</font><font color="#CCCCCC"> of the</font>

591
00:27:27,429 --> 00:27:32,740
digits<font color="#E5E5E5"> and program program</font><font color="#CCCCCC"> the wrong</font>

592
00:27:30,190 --> 00:27:34,360
bank card which<font color="#CCCCCC"> basically mimics</font><font color="#E5E5E5"> a real</font>

593
00:27:32,740 --> 00:27:36,850
<font color="#CCCCCC">bank card except that unfortunately it</font>

594
00:27:34,360 --> 00:27:39,939
didn't work in the ATM but<font color="#CCCCCC"> it did accept</font>

595
00:27:36,850 --> 00:27:41,370
all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> pin codes that you entered so it</font>

596
00:27:39,940 --> 00:27:46,870
was enough<font color="#E5E5E5"> if</font><font color="#CCCCCC"> we could just</font><font color="#E5E5E5"> press one</font>

597
00:27:41,370 --> 00:27:51,459
digit four times and then get a valid

598
00:27:46,870 --> 00:27:53,860
<font color="#E5E5E5">pin code verification next to that the</font>

599
00:27:51,460 --> 00:27:55,809
<font color="#E5E5E5">Raspberry Pi also controlled power USB</font>

600
00:27:53,860 --> 00:27:59,260
line so we as I<font color="#CCCCCC"> said before we need to</font>

601
00:27:55,809 --> 00:28:02,080
<font color="#E5E5E5">get the system under test back to its</font>

602
00:27:59,260 --> 00:28:03,970
<font color="#E5E5E5">initial state and the only way we</font>

603
00:28:02,080 --> 00:28:05,770
managed to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> that with this handheld</font>

604
00:28:03,970 --> 00:28:07,530
reader<font color="#E5E5E5"> because we cannot</font><font color="#CCCCCC"> just set up a</font>

605
00:28:05,770 --> 00:28:10,000
<font color="#E5E5E5">new socket that doesn't make any sense</font>

606
00:28:07,530 --> 00:28:12,040
<font color="#CCCCCC">we actually have to cut the power</font><font color="#E5E5E5"> to the</font>

607
00:28:10,000 --> 00:28:15,060
device<font color="#E5E5E5"> together to reset</font>

608
00:28:12,040 --> 00:28:17,830
and then we could try another<font color="#E5E5E5"> session</font>

609
00:28:15,060 --> 00:28:20,740
and if you're<font color="#E5E5E5"> interested to see how one</font>

610
00:28:17,830 --> 00:28:22,990
of<font color="#E5E5E5"> the early versions</font><font color="#CCCCCC"> of this robot</font>

611
00:28:20,740 --> 00:28:25,480
<font color="#CCCCCC">looked</font><font color="#E5E5E5"> light and functions you can find</font>

612
00:28:22,990 --> 00:28:26,380
the video<font color="#CCCCCC"> online</font><font color="#E5E5E5"> YouTube and I think you</font>

613
00:28:25,480 --> 00:28:27,850
<font color="#E5E5E5">should also be fine</font>

614
00:28:26,380 --> 00:28:33,460
able<font color="#CCCCCC"> to find that</font><font color="#E5E5E5"> this link on</font><font color="#CCCCCC"> my</font>

615
00:28:27,850 --> 00:28:36,070
website<font color="#CCCCCC"> so during this project</font><font color="#E5E5E5"> we also</font>

616
00:28:33,460 --> 00:28:37,750
<font color="#E5E5E5">found out that apparently these devices</font>

617
00:28:36,070 --> 00:28:39,520
are these are these<font color="#E5E5E5"> buttons on these</font>

618
00:28:37,750 --> 00:28:42,460
devices<font color="#E5E5E5"> are not meant to be pressed</font>

619
00:28:39,520 --> 00:28:43,720
<font color="#E5E5E5">thousands and thousands of times and so</font>

620
00:28:42,460 --> 00:28:47,620
at<font color="#CCCCCC"> some point I got some</font>

621
00:28:43,720 --> 00:28:50,140
non-deterministic<font color="#E5E5E5"> behavior and then</font>

622
00:28:47,620 --> 00:28:52,239
after<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of debugging</font><font color="#CCCCCC"> I found out</font>

623
00:28:50,140 --> 00:28:55,120
that actually once in a while the button

624
00:28:52,240 --> 00:28:58,330
<font color="#E5E5E5">got stuck because it just wore down by</font>

625
00:28:55,120 --> 00:29:00,070
pressing<font color="#E5E5E5"> it so many times but luckily we</font>

626
00:28:58,330 --> 00:29:01,389
still<font color="#CCCCCC"> had nine digits left so we moved</font>

627
00:29:00,070 --> 00:29:03,429
<font color="#CCCCCC">to motor a bit and then we could</font>

628
00:29:01,390 --> 00:29:08,170
<font color="#E5E5E5">continue with the with the same reader</font>

629
00:29:03,430 --> 00:29:11,500
again so here you can see one of<font color="#E5E5E5"> the</font>

630
00:29:08,170 --> 00:29:14,500
earlier versions<font color="#CCCCCC"> the</font><font color="#E5E5E5"> robot so you can</font>

631
00:29:11,500 --> 00:29:18,940
see the Raspberry Pi<font color="#CCCCCC"> on the left corner</font>

632
00:29:14,500 --> 00:29:21,700
<font color="#E5E5E5">and then the device on</font><font color="#CCCCCC"> top so you</font><font color="#E5E5E5"> can</font>

633
00:29:18,940 --> 00:29:26,260
<font color="#E5E5E5">see</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> a bit of the identifier</font><font color="#CCCCCC"> as</font>

634
00:29:21,700 --> 00:29:28,180
sticking out with a<font color="#CCCCCC"> bang</font><font color="#E5E5E5"> card of course</font>

635
00:29:26,260 --> 00:29:31,090
<font color="#CCCCCC">I also wanted to play a bit with Lego so</font>

636
00:29:28,180 --> 00:29:33,940
I improved through the<font color="#E5E5E5"> robot later on as</font>

637
00:29:31,090 --> 00:29:38,220
well<font color="#CCCCCC"> so you can see still see the</font>

638
00:29:33,940 --> 00:29:41,770
<font color="#E5E5E5">Austrian and Dutch flag on top of there</font>

639
00:29:38,220 --> 00:29:44,740
so here you<font color="#E5E5E5"> can see</font><font color="#CCCCCC"> there the identifier</font>

640
00:29:41,770 --> 00:29:47,080
<font color="#CCCCCC">2 in there</font><font color="#E5E5E5"> with a USB connection that's</font>

641
00:29:44,740 --> 00:29:51,520
<font color="#E5E5E5">going to the Raspberry Pi that's used to</font>

642
00:29:47,080 --> 00:29:53,470
<font color="#CCCCCC">Center necessary USB</font><font color="#E5E5E5"> commands here you</font>

643
00:29:51,520 --> 00:29:55,629
see it from<font color="#E5E5E5"> the</font><font color="#CCCCCC"> other side so that's the</font>

644
00:29:53,470 --> 00:29:57,490
<font color="#E5E5E5">that's our own bank cards that we</font>

645
00:29:55,630 --> 00:30:01,050
programs that will accept anything code

646
00:29:57,490 --> 00:30:01,050
<font color="#CCCCCC">but will</font><font color="#E5E5E5"> not give you any money</font>

647
00:30:01,200 --> 00:30:11,680
and so do<font color="#E5E5E5"> just give you a an idea how</font>

648
00:30:05,740 --> 00:30:13,600
this protocol works<font color="#E5E5E5"> with this device so</font>

649
00:30:11,680 --> 00:30:15,250
we have the<font color="#E5E5E5"> host PC on the left so</font>

650
00:30:13,600 --> 00:30:16,959
that's<font color="#E5E5E5"> the where your browser is running</font>

651
00:30:15,250 --> 00:30:19,330
<font color="#E5E5E5">and where you're trying to do your</font>

652
00:30:16,960 --> 00:30:21,400
<font color="#CCCCCC">online</font><font color="#E5E5E5"> transaction and we have to use be</font>

653
00:30:19,330 --> 00:30:25,960
reader in<font color="#E5E5E5"> the middle we have a smart</font>

654
00:30:21,400 --> 00:30:28,180
<font color="#E5E5E5">card</font><font color="#CCCCCC"> that's inserted so the first thing</font>

655
00:30:25,960 --> 00:30:31,390
you<font color="#E5E5E5"> will have to do is to actually enter</font>

656
00:30:28,180 --> 00:30:35,440
your<font color="#CCCCCC"> pin code this</font><font color="#E5E5E5"> pin code is then</font>

657
00:30:31,390 --> 00:30:40,120
verified with<font color="#CCCCCC"> the smart</font><font color="#E5E5E5"> card</font><font color="#CCCCCC"> and if the</font>

658
00:30:35,440 --> 00:30:42,670
pin code was<font color="#E5E5E5"> okay then the host PC will</font>

659
00:30:40,120 --> 00:30:46,060
send some transaction relevant data<font color="#E5E5E5"> like</font>

660
00:30:42,670 --> 00:30:51,820
<font color="#E5E5E5">for</font><font color="#CCCCCC"> example the</font><font color="#E5E5E5"> amount to</font><font color="#CCCCCC"> the device the</font>

661
00:30:46,060 --> 00:30:54,159
device will then<font color="#E5E5E5"> will then show this to</font>

662
00:30:51,820 --> 00:30:57,700
you so here you can see it's a

663
00:30:54,160 --> 00:31:00,370
<font color="#E5E5E5">transaction for</font><font color="#CCCCCC"> 5,000</font><font color="#E5E5E5"> euros and the user</font>

664
00:30:57,700 --> 00:31:03,850
<font color="#E5E5E5">will</font><font color="#CCCCCC"> then have to</font><font color="#E5E5E5"> approve this by</font>

665
00:31:00,370 --> 00:31:06,790
<font color="#E5E5E5">pressing ok</font><font color="#CCCCCC"> the reader then tells the</font>

666
00:31:03,850 --> 00:31:09,280
host PC ok the user<font color="#E5E5E5"> just pressed ok and</font>

667
00:31:06,790 --> 00:31:11,770
the host<font color="#E5E5E5"> PC tells the reader ok that's</font>

668
00:31:09,280 --> 00:31:14,230
<font color="#E5E5E5">great now please generate the signature</font>

669
00:31:11,770 --> 00:31:17,620
<font color="#CCCCCC">that we need to confirm this transaction</font>

670
00:31:14,230 --> 00:31:20,170
<font color="#E5E5E5">and then the last couple</font><font color="#CCCCCC"> of messages</font><font color="#E5E5E5"> are</font>

671
00:31:17,620 --> 00:31:21,820
used to<font color="#CCCCCC"> actually generate a Mac</font><font color="#E5E5E5"> that</font>

672
00:31:20,170 --> 00:31:26,650
will be used to<font color="#E5E5E5"> confirm your transaction</font>

673
00:31:21,820 --> 00:31:29,590
and<font color="#E5E5E5"> if we look at this part this is</font><font color="#CCCCCC"> a</font>

674
00:31:26,650 --> 00:31:32,020
bit fishy<font color="#E5E5E5"> there is no reason why you</font>

675
00:31:29,590 --> 00:31:33,699
would tell<font color="#CCCCCC"> that have to tell the PC to</font>

676
00:31:32,020 --> 00:31:35,920
yes the user<font color="#E5E5E5"> just press the gate and</font>

677
00:31:33,700 --> 00:31:37,770
<font color="#E5E5E5">then the user or then the PC telling the</font>

678
00:31:35,920 --> 00:31:41,800
device<font color="#E5E5E5"> the user</font><font color="#CCCCCC"> pressed ok now generate</font>

679
00:31:37,770 --> 00:31:43,629
<font color="#CCCCCC">the signature so it can work like this</font>

680
00:31:41,800 --> 00:31:46,590
<font color="#CCCCCC">if you implement it properly</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

681
00:31:43,630 --> 00:31:49,920
keep track of of your current state

682
00:31:46,590 --> 00:31:53,679
unfortunately<font color="#CCCCCC"> that's not</font><font color="#E5E5E5"> what happened</font>

683
00:31:49,920 --> 00:31:56,950
so if you leave out this<font color="#CCCCCC"> message from</font>

684
00:31:53,680 --> 00:31:58,930
<font color="#CCCCCC">the device or you</font><font color="#E5E5E5"> don't wait for the</font>

685
00:31:56,950 --> 00:32:01,090
device<font color="#CCCCCC"> to say the user pressed ok now</font>

686
00:31:58,930 --> 00:32:02,710
continue you<font color="#E5E5E5"> can also just immediately</font>

687
00:32:01,090 --> 00:32:05,560
ask for the<font color="#E5E5E5"> signature and</font><font color="#CCCCCC"> the device</font>

688
00:32:02,710 --> 00:32:08,440
will<font color="#CCCCCC"> also happily provide</font><font color="#E5E5E5"> you with this</font>

689
00:32:05,560 --> 00:32:11,169
<font color="#E5E5E5">signature so if this happens you</font><font color="#CCCCCC"> will</font>

690
00:32:08,440 --> 00:32:13,620
see the transactions the transaction

691
00:32:11,170 --> 00:32:15,840
details for a fraction of<font color="#CCCCCC"> a second</font>

692
00:32:13,620 --> 00:32:17,939
and then immediately the screen goes

693
00:32:15,840 --> 00:32:20,480
blank again<font color="#E5E5E5"> and your transaction</font><font color="#CCCCCC"> is</font>

694
00:32:17,940 --> 00:32:23,220
<font color="#E5E5E5">approved</font>

695
00:32:20,480 --> 00:32:29,040
so we reported<font color="#E5E5E5"> this obviously to the</font>

696
00:32:23,220 --> 00:32:32,520
bank and<font color="#E5E5E5"> it's now fixed so we have also</font>

697
00:32:29,040 --> 00:32:34,580
got the<font color="#E5E5E5"> got hold of the new fixed device</font>

698
00:32:32,520 --> 00:32:40,170
<font color="#E5E5E5">so this actually gave us two different</font>

699
00:32:34,580 --> 00:32:41,639
<font color="#E5E5E5">devices to</font><font color="#CCCCCC"> test with so we try to</font><font color="#E5E5E5"> learn</font>

700
00:32:40,170 --> 00:32:45,660
the state machine<font color="#E5E5E5"> for both of these</font>

701
00:32:41,640 --> 00:32:50,400
devices<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> top you see the</font><font color="#E5E5E5"> old</font>

702
00:32:45,660 --> 00:32:55,020
device and at the bottom<font color="#E5E5E5"> you see the the</font>

703
00:32:50,400 --> 00:32:58,200
new improved firmware<font color="#E5E5E5"> and and here this</font>

704
00:32:55,020 --> 00:33:00,060
<font color="#E5E5E5">is</font><font color="#CCCCCC"> actually a message</font><font color="#E5E5E5"> that goes to a</font>

705
00:32:58,200 --> 00:33:01,980
state in which<font color="#E5E5E5"> you just sent an</font>

706
00:33:00,060 --> 00:33:05,639
unconfirmed<font color="#CCCCCC"> cryptogram so you can</font>

707
00:33:01,980 --> 00:33:07,290
actually send this message<font color="#E5E5E5"> you can</font>

708
00:33:05,640 --> 00:33:11,430
actually get<font color="#E5E5E5"> this signature</font><font color="#CCCCCC"> without ever</font>

709
00:33:07,290 --> 00:33:16,500
having<font color="#CCCCCC"> to press the ok button</font><font color="#E5E5E5"> so here we</font>

710
00:33:11,430 --> 00:33:18,120
combined a couple<font color="#CCCCCC"> of messages because</font><font color="#E5E5E5"> we</font>

711
00:33:16,500 --> 00:33:20,640
could<font color="#E5E5E5"> have for example an input message</font>

712
00:33:18,120 --> 00:33:21,840
steps and for just one pin but<font color="#E5E5E5"> probably</font>

713
00:33:20,640 --> 00:33:23,520
the only thing<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> will learn is</font>

714
00:33:21,840 --> 00:33:25,830
that<font color="#E5E5E5"> you will</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> have two and two</font>

715
00:33:23,520 --> 00:33:29,040
<font color="#CCCCCC">four digits in a row and it will just</font>

716
00:33:25,830 --> 00:33:31,230
<font color="#CCCCCC">really slow down the analysis</font><font color="#E5E5E5"> and we</font>

717
00:33:29,040 --> 00:33:34,379
<font color="#CCCCCC">combined some other messages</font><font color="#E5E5E5"> that would</font>

718
00:33:31,230 --> 00:33:37,200
make sense to<font color="#CCCCCC"> be together</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> tried</font>

719
00:33:34,380 --> 00:33:40,260
a bit more<font color="#E5E5E5"> fine-grained a number of</font>

720
00:33:37,200 --> 00:33:42,330
input messages and then we cut out ended

721
00:33:40,260 --> 00:33:44,700
up with<font color="#E5E5E5"> this very weird state machine</font>

722
00:33:42,330 --> 00:33:47,639
with all kinds of states and that you

723
00:33:44,700 --> 00:33:49,950
would actually<font color="#E5E5E5"> not expect them there but</font>

724
00:33:47,640 --> 00:33:52,140
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> all these manual</font><font color="#CCCCCC"> interactions</font>

725
00:33:49,950 --> 00:33:53,880
so the pushing of<font color="#CCCCCC"> the buttons it's not</font>

726
00:33:52,140 --> 00:33:56,790
extremely<font color="#E5E5E5"> fast it takes quite a while</font>

727
00:33:53,880 --> 00:33:59,130
<font color="#CCCCCC">for</font><font color="#E5E5E5"> these</font><font color="#CCCCCC"> Beck models to learn</font>

728
00:33:56,790 --> 00:34:02,220
<font color="#E5E5E5">especially the first device was also</font>

729
00:33:59,130 --> 00:34:04,230
somewhat slightly buggy and<font color="#CCCCCC"> reactive</font>

730
00:34:02,220 --> 00:34:08,270
<font color="#E5E5E5">could react non-deterministically which</font>

731
00:34:04,230 --> 00:34:12,389
is a bit of a<font color="#E5E5E5"> problem for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> algorithm</font>

732
00:34:08,270 --> 00:34:16,800
and then the next protocol that we

733
00:34:12,389 --> 00:34:20,879
looked<font color="#E5E5E5"> at was TLS so we've already seen</font>

734
00:34:16,800 --> 00:34:23,520
the this protocol<font color="#E5E5E5"> before today</font><font color="#CCCCCC"> so this</font>

735
00:34:20,880 --> 00:34:25,620
<font color="#CCCCCC">is just</font><font color="#E5E5E5"> a generic version so you start</font>

736
00:34:23,520 --> 00:34:27,239
<font color="#CCCCCC">to decline too low</font><font color="#E5E5E5"> then the</font><font color="#CCCCCC"> solver</font><font color="#E5E5E5"> will</font>

737
00:34:25,620 --> 00:34:28,830
respond to<font color="#E5E5E5"> a couple</font><font color="#CCCCCC"> of message</font>

738
00:34:27,239 --> 00:34:32,489
hopefully including the server

739
00:34:28,830 --> 00:34:34,290
certificate<font color="#CCCCCC"> the</font><font color="#E5E5E5"> clients will respond to</font>

740
00:34:32,489 --> 00:34:37,229
<font color="#E5E5E5">some</font><font color="#CCCCCC"> key material that can be</font><font color="#E5E5E5"> used for</font>

741
00:34:34,290 --> 00:34:39,300
key establishment<font color="#E5E5E5"> and then after that</font>

742
00:34:37,230 --> 00:34:42,389
change<font color="#E5E5E5"> type respect message once you</font>

743
00:34:39,300 --> 00:34:46,500
<font color="#E5E5E5">receive this all incoming communication</font>

744
00:34:42,389 --> 00:34:47,639
<font color="#E5E5E5">should be encrypted and then to finish</font>

745
00:34:46,500 --> 00:34:49,859
<font color="#E5E5E5">the handshake you have a finished</font>

746
00:34:47,639 --> 00:34:52,679
<font color="#E5E5E5">message and this finished message</font>

747
00:34:49,859 --> 00:34:54,418
actually provides integrity<font color="#CCCCCC"> overall the</font>

748
00:34:52,679 --> 00:34:55,980
previous message<font color="#CCCCCC"> in the handshake both</font>

749
00:34:54,418 --> 00:34:59,250
the ones you sent and the ones you

750
00:34:55,980 --> 00:35:00,810
received and the other other<font color="#CCCCCC"> side told</font>

751
00:34:59,250 --> 00:35:03,060
them also respond to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> change</font><font color="#CCCCCC"> cypher</font>

752
00:35:00,810 --> 00:35:06,150
<font color="#E5E5E5">spec message to indicate</font><font color="#CCCCCC"> that from now</font>

753
00:35:03,060 --> 00:35:07,560
on<font color="#CCCCCC"> all its data will be encrypted</font><font color="#E5E5E5"> and it</font>

754
00:35:06,150 --> 00:35:09,450
will also send<font color="#E5E5E5"> the finished message to</font>

755
00:35:07,560 --> 00:35:12,420
provide integrity<font color="#CCCCCC"> over all the previous</font>

756
00:35:09,450 --> 00:35:18,109
messages and then at the end we can

757
00:35:12,420 --> 00:35:18,109
start exchanging application data<font color="#E5E5E5"> safely</font>

758
00:35:18,560 --> 00:35:24,330
so to do this we again need it in<font color="#E5E5E5"> almost</font>

759
00:35:22,380 --> 00:35:26,460
stateless the<font color="#E5E5E5"> Alessa implementation so</font>

760
00:35:24,330 --> 00:35:27,930
you can find this in<font color="#CCCCCC"> state learn or</font><font color="#E5E5E5"> you</font>

761
00:35:26,460 --> 00:35:29,220
need a bit of minimal<font color="#E5E5E5"> state to actually</font>

762
00:35:27,930 --> 00:35:31,290
<font color="#E5E5E5">keep track of the keys that</font><font color="#CCCCCC"> you just</font>

763
00:35:29,220 --> 00:35:34,950
agreed on<font color="#E5E5E5"> otherwise you don't get</font>

764
00:35:31,290 --> 00:35:36,410
anywhere in<font color="#E5E5E5"> this protocol we did some</font>

765
00:35:34,950 --> 00:35:38,779
tests<font color="#E5E5E5"> on both client and server</font>

766
00:35:36,410 --> 00:35:42,569
implementations<font color="#E5E5E5"> and we supported all</font>

767
00:35:38,780 --> 00:35:44,849
regular TLS messages as well as<font color="#E5E5E5"> the well</font>

768
00:35:42,570 --> 00:35:46,849
by now famous heartbeat extension<font color="#E5E5E5"> to</font>

769
00:35:44,849 --> 00:35:49,320
<font color="#E5E5E5">also</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> things there</font>

770
00:35:46,849 --> 00:35:51,540
and<font color="#E5E5E5"> we had support for different key</font>

771
00:35:49,320 --> 00:35:52,980
exchange<font color="#E5E5E5"> algorithms and some client</font>

772
00:35:51,540 --> 00:35:56,310
authentication and we<font color="#E5E5E5"> needed some</font>

773
00:35:52,980 --> 00:35:58,380
special<font color="#CCCCCC"> symbols to indicate exceptions</font>

774
00:35:56,310 --> 00:36:00,570
that<font color="#E5E5E5"> happened in the in the test harness</font>

775
00:35:58,380 --> 00:36:02,940
<font color="#CCCCCC">so for example if the</font><font color="#E5E5E5"> Mac verification</font>

776
00:36:00,570 --> 00:36:06,080
fails then<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> notice because</font>

777
00:36:02,940 --> 00:36:08,310
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is actually an interesting event</font>

778
00:36:06,080 --> 00:36:10,259
that we might<font color="#E5E5E5"> want to do something with</font>

779
00:36:08,310 --> 00:36:13,589
so we looked<font color="#E5E5E5"> at a whole list of</font>

780
00:36:10,260 --> 00:36:16,020
different<font color="#E5E5E5"> TLS implementations so we have</font>

781
00:36:13,589 --> 00:36:18,869
the more well-known ones<font color="#CCCCCC"> opus as well</font>

782
00:36:16,020 --> 00:36:22,770
and it's Forks<font color="#E5E5E5"> a glue TLS Java</font>

783
00:36:18,869 --> 00:36:25,380
implementation<font color="#E5E5E5"> embed and some others and</font>

784
00:36:22,770 --> 00:36:27,359
also<font color="#CCCCCC"> - or scientific implementation so</font>

785
00:36:25,380 --> 00:36:31,140
<font color="#CCCCCC">meteor less by Microsoft Research and</font>

786
00:36:27,359 --> 00:36:34,589
India<font color="#E5E5E5"> and not quite</font><font color="#CCCCCC"> so broken TLS from</font>

787
00:36:31,140 --> 00:36:36,390
some people<font color="#E5E5E5"> and Cambridge</font><font color="#CCCCCC"> I knew</font><font color="#E5E5E5"> that we</font>

788
00:36:34,589 --> 00:36:38,790
noticed was<font color="#CCCCCC"> that actually</font><font color="#E5E5E5"> every model</font>

789
00:36:36,390 --> 00:36:41,220
<font color="#CCCCCC">that we learned was different so not one</font>

790
00:36:38,790 --> 00:36:43,410
or not<font color="#E5E5E5"> no two</font><font color="#CCCCCC"> implementations for</font>

791
00:36:41,220 --> 00:36:45,509
the same even if you looked<font color="#E5E5E5"> with look</font>

792
00:36:43,410 --> 00:36:50,279
within implementations<font color="#E5E5E5"> the state machine</font>

793
00:36:45,510 --> 00:36:52,410
can change quite<font color="#E5E5E5"> a lot over</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> so when</font>

794
00:36:50,280 --> 00:36:56,460
available<font color="#E5E5E5"> we used demo applications and</font>

795
00:36:52,410 --> 00:36:58,890
also<font color="#CCCCCC"> the</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of states was a great</font>

796
00:36:56,460 --> 00:37:01,980
variation<font color="#E5E5E5"> in that so it ranges from six</font>

797
00:36:58,890 --> 00:37:05,640
states or which<font color="#E5E5E5"> you could kind of expect</font>

798
00:37:01,980 --> 00:37:10,730
the TLS to up to<font color="#CCCCCC"> sixteen</font><font color="#E5E5E5"> states which is</font>

799
00:37:05,640 --> 00:37:14,160
<font color="#E5E5E5">definitely way too much yes I'll just</font>

800
00:37:10,730 --> 00:37:15,780
<font color="#E5E5E5">please</font><font color="#CCCCCC"> Emily found</font><font color="#E5E5E5"> some flaws and</font>

801
00:37:14,160 --> 00:37:18,029
different implementations<font color="#E5E5E5"> so I will just</font>

802
00:37:15,780 --> 00:37:19,920
quickly go there so here you can<font color="#E5E5E5"> see all</font>

803
00:37:18,030 --> 00:37:22,260
kinds<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different models</font><font color="#CCCCCC"> so these are</font>

804
00:37:19,920 --> 00:37:26,520
all different<font color="#E5E5E5"> implementations and they</font>

805
00:37:22,260 --> 00:37:28,560
all look different<font color="#E5E5E5"> so this was one of</font>

806
00:37:26,520 --> 00:37:31,830
<font color="#E5E5E5">the more</font><font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> things that you</font>

807
00:37:28,560 --> 00:37:34,349
<font color="#E5E5E5">came across so in the</font><font color="#CCCCCC"> java version</font><font color="#E5E5E5"> you</font>

808
00:37:31,830 --> 00:37:36,359
could<font color="#E5E5E5"> actually just skip the change</font><font color="#CCCCCC"> seif</font>

809
00:37:34,349 --> 00:37:38,010
respect message<font color="#E5E5E5"> so</font><font color="#CCCCCC"> recall</font><font color="#E5E5E5"> that this</font>

810
00:37:36,359 --> 00:37:39,660
change<font color="#CCCCCC"> cipher spec message indicates</font>

811
00:37:38,010 --> 00:37:42,150
that<font color="#E5E5E5"> from now</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> you're encrypting all</font>

812
00:37:39,660 --> 00:37:43,830
your data so if you skip this message

813
00:37:42,150 --> 00:37:46,619
then after this<font color="#CCCCCC"> you can just start</font>

814
00:37:43,830 --> 00:37:49,980
communicating<font color="#CCCCCC"> or at least sending data</font>

815
00:37:46,619 --> 00:37:53,609
in plain text<font color="#CCCCCC"> so that's exactly</font><font color="#E5E5E5"> what</font>

816
00:37:49,980 --> 00:37:55,589
<font color="#CCCCCC">happens here we just there you see the</font>

817
00:37:53,609 --> 00:37:57,810
red transition that's the one you would

818
00:37:55,589 --> 00:38:01,220
<font color="#E5E5E5">not expect in there so the green one</font><font color="#CCCCCC"> is</font>

819
00:37:57,810 --> 00:38:04,020
just a happy<font color="#CCCCCC"> flow but if you</font><font color="#E5E5E5"> send a</font>

820
00:38:01,220 --> 00:38:05,430
finished message before<font color="#E5E5E5"> ever sending a</font>

821
00:38:04,020 --> 00:38:08,339
change<font color="#CCCCCC"> ciphers back</font><font color="#E5E5E5"> message then the</font>

822
00:38:05,430 --> 00:38:11,460
server<font color="#E5E5E5"> will happily accept any</font><font color="#CCCCCC"> plaintext</font>

823
00:38:08,339 --> 00:38:13,140
<font color="#E5E5E5">data that you send</font><font color="#CCCCCC"> it that</font><font color="#E5E5E5"> way</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> for</font>

824
00:38:11,460 --> 00:38:16,619
the<font color="#CCCCCC"> client-side it was even worse you</font>

825
00:38:13,140 --> 00:38:18,750
<font color="#E5E5E5">can send a</font><font color="#CCCCCC"> finished message even</font><font color="#E5E5E5"> earlier</font>

826
00:38:16,619 --> 00:38:20,970
<font color="#E5E5E5">and then the client</font><font color="#CCCCCC"> doesn't even bother</font>

827
00:38:18,750 --> 00:38:22,770
<font color="#E5E5E5">anymore about certificates that you</font>

828
00:38:20,970 --> 00:38:28,140
didn't send yet or encrypting<font color="#E5E5E5"> and then</font>

829
00:38:22,770 --> 00:38:30,330
all data is in the clear so this issue

830
00:38:28,140 --> 00:38:32,819
was<font color="#CCCCCC"> actually found by</font><font color="#E5E5E5"> the Prosecco group</font>

831
00:38:30,330 --> 00:38:34,410
at India at the<font color="#CCCCCC"> at the same time even</font>

832
00:38:32,820 --> 00:38:36,930
<font color="#E5E5E5">though it has been must have been in</font>

833
00:38:34,410 --> 00:38:38,480
there<font color="#CCCCCC"> for years</font><font color="#E5E5E5"> apparently</font><font color="#CCCCCC"> we were</font>

834
00:38:36,930 --> 00:38:40,618
looking at<font color="#CCCCCC"> this implementation</font>

835
00:38:38,480 --> 00:38:43,140
simultaneously so we only found this out

836
00:38:40,619 --> 00:38:45,470
<font color="#E5E5E5">once I was visiting them and presenting</font>

837
00:38:43,140 --> 00:38:45,470
this<font color="#E5E5E5"> work</font>

838
00:38:46,970 --> 00:38:51,649
so that<font color="#CCCCCC"> four gluteal</font><font color="#E5E5E5"> apps we found some</font>

839
00:38:49,160 --> 00:38:53,240
<font color="#E5E5E5">very weird behavior there if you send a</font>

840
00:38:51,650 --> 00:38:55,099
heartbeat message during<font color="#E5E5E5"> the handshake</font>

841
00:38:53,240 --> 00:38:56,959
<font color="#CCCCCC">you</font><font color="#E5E5E5"> suddenly end up in a sort of a</font>

842
00:38:55,099 --> 00:38:59,720
shadow path<font color="#E5E5E5"> where you can never get</font><font color="#CCCCCC"> out</font>

843
00:38:56,960 --> 00:39:04,250
again<font color="#E5E5E5"> so according</font><font color="#CCCCCC"> to the to the specs</font>

844
00:38:59,720 --> 00:39:05,930
<font color="#E5E5E5">you should ignore heartbeat messages</font><font color="#CCCCCC"> so</font>

845
00:39:04,250 --> 00:39:08,329
this is more or<font color="#CCCCCC"> less what</font><font color="#E5E5E5"> happening new</font>

846
00:39:05,930 --> 00:39:10,848
<font color="#E5E5E5">TLS except that it also then forgot all</font>

847
00:39:08,329 --> 00:39:12,560
<font color="#E5E5E5">of the previous messages and that so</font>

848
00:39:10,849 --> 00:39:13,970
typically all the messages are collected

849
00:39:12,560 --> 00:39:16,099
<font color="#E5E5E5">because you will need them in the</font>

850
00:39:13,970 --> 00:39:17,750
computation for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> finished message to</font>

851
00:39:16,099 --> 00:39:22,010
provide integrity<font color="#CCCCCC"> over all the previous</font>

852
00:39:17,750 --> 00:39:24,770
messages but include TLS<font color="#E5E5E5"> it just emptied</font>

853
00:39:22,010 --> 00:39:29,540
this buffer and forgot all<font color="#CCCCCC"> of all about</font>

854
00:39:24,770 --> 00:39:31,190
the previous<font color="#E5E5E5"> messages so then you could</font>

855
00:39:29,540 --> 00:39:32,900
see that somewhere at the<font color="#E5E5E5"> end there was</font>

856
00:39:31,190 --> 00:39:34,369
an<font color="#E5E5E5"> internal error because the finished</font>

857
00:39:32,900 --> 00:39:38,569
message that you send to<font color="#E5E5E5"> it suddenly</font>

858
00:39:34,369 --> 00:39:41,660
didn't make any sense<font color="#E5E5E5"> anymore so later</font>

859
00:39:38,569 --> 00:39:44,480
we also did an analysis of<font color="#CCCCCC"> all fourteen</font>

860
00:39:41,660 --> 00:39:46,759
years<font color="#CCCCCC"> of state machines of open SSL and</font>

861
00:39:44,480 --> 00:39:50,630
<font color="#CCCCCC">Libre SSL so I looked at almost</font><font color="#E5E5E5"> a</font>

862
00:39:46,760 --> 00:39:52,730
<font color="#CCCCCC">hundred and</font><font color="#E5E5E5"> fifty versions of OpenSSL</font><font color="#CCCCCC"> so</font>

863
00:39:50,630 --> 00:39:56,270
I didn't do<font color="#E5E5E5"> this manually I wrote some</font>

864
00:39:52,730 --> 00:39:58,520
scripts to do this and then I actually

865
00:39:56,270 --> 00:40:01,190
could actually see that<font color="#E5E5E5"> for for</font><font color="#CCCCCC"> example</font>

866
00:39:58,520 --> 00:40:06,050
<font color="#E5E5E5">open SSL there were 15 different state</font>

867
00:40:01,190 --> 00:40:08,780
machines<font color="#E5E5E5"> and they reach between 17</font>

868
00:40:06,050 --> 00:40:13,700
states<font color="#E5E5E5"> and six states on the client</font><font color="#CCCCCC"> side</font>

869
00:40:08,780 --> 00:40:15,200
<font color="#E5E5E5">it was also quite varied so this is the</font>

870
00:40:13,700 --> 00:40:17,868
<font color="#E5E5E5">earliest version that I looked at it</font>

871
00:40:15,200 --> 00:40:19,640
looks pretty horrible<font color="#E5E5E5"> and</font><font color="#CCCCCC"> there way</font><font color="#E5E5E5"> too</font>

872
00:40:17,869 --> 00:40:23,349
many states<font color="#CCCCCC"> so even if you clean</font><font color="#E5E5E5"> it up</font>

873
00:40:19,640 --> 00:40:27,020
if way more<font color="#E5E5E5"> states than you would expect</font>

874
00:40:23,349 --> 00:40:28,040
so I'll just skip<font color="#E5E5E5"> over the next point so</font>

875
00:40:27,020 --> 00:40:29,509
<font color="#E5E5E5">if you're interested</font><font color="#CCCCCC"> in the</font>

876
00:40:28,040 --> 00:40:32,119
vulnerabilities that<font color="#E5E5E5"> you can find in</font>

877
00:40:29,510 --> 00:40:37,069
this you can have a look at the<font color="#CCCCCC"> paper on</font>

878
00:40:32,119 --> 00:40:40,010
<font color="#CCCCCC">my website what so this was the</font><font color="#E5E5E5"> latest</font>

879
00:40:37,069 --> 00:40:42,259
version that<font color="#E5E5E5"> I analyzed for this</font>

880
00:40:40,010 --> 00:40:44,780
research and<font color="#E5E5E5"> then you can see that</font>

881
00:40:42,260 --> 00:40:47,240
<font color="#CCCCCC">actually in</font><font color="#E5E5E5"> the 14 years</font><font color="#CCCCCC"> things didn't</font>

882
00:40:44,780 --> 00:40:48,920
improve quite a lot and now we<font color="#E5E5E5"> just have</font>

883
00:40:47,240 --> 00:40:51,500
a<font color="#E5E5E5"> very</font><font color="#CCCCCC"> simple state machine and this</font><font color="#E5E5E5"> is</font>

884
00:40:48,920 --> 00:40:53,750
more<font color="#E5E5E5"> or less what</font><font color="#CCCCCC"> you would expect from</font>

885
00:40:51,500 --> 00:40:56,569
a TLS implementations and not<font color="#CCCCCC"> to 17</font>

886
00:40:53,750 --> 00:40:58,010
<font color="#E5E5E5">states that we've seen</font><font color="#CCCCCC"> before and where</font>

887
00:40:56,569 --> 00:40:59,140
you can actually<font color="#E5E5E5"> find indications of</font>

888
00:40:58,010 --> 00:41:00,869
various

889
00:40:59,140 --> 00:41:05,799
serious<font color="#CCCCCC"> former abilities that were</font>

890
00:41:00,869 --> 00:41:07,660
discovered over<font color="#E5E5E5"> the</font><font color="#CCCCCC"> years so then to</font>

891
00:41:05,799 --> 00:41:09,609
conclude so I hope by now<font color="#CCCCCC"> I</font><font color="#E5E5E5"> convinced</font>

892
00:41:07,660 --> 00:41:11,230
<font color="#E5E5E5">you that the state machine inference is</font>

893
00:41:09,609 --> 00:41:14,980
actually quite a useful<font color="#CCCCCC"> technique</font><font color="#E5E5E5"> and</font>

894
00:41:11,230 --> 00:41:17,829
can<font color="#E5E5E5"> be used to find some all serious</font>

895
00:41:14,980 --> 00:41:22,779
<font color="#E5E5E5">security issues but</font><font color="#CCCCCC"> also some</font><font color="#E5E5E5"> other</font>

896
00:41:17,829 --> 00:41:24,910
interesting<font color="#CCCCCC"> bugs</font><font color="#E5E5E5"> and this research also</font>

897
00:41:22,779 --> 00:41:27,069
showed that<font color="#E5E5E5"> everybody interprets their</font>

898
00:41:24,910 --> 00:41:29,769
<font color="#E5E5E5">specifications differently so it would</font>

899
00:41:27,069 --> 00:41:31,269
actually<font color="#CCCCCC"> help to include an explicit</font>

900
00:41:29,769 --> 00:41:33,279
state machine<font color="#E5E5E5"> or</font><font color="#CCCCCC"> a figure of a state</font>

901
00:41:31,269 --> 00:41:35,140
<font color="#E5E5E5">machine in this specification so at</font>

902
00:41:33,279 --> 00:41:38,440
<font color="#E5E5E5">least people know what they</font><font color="#CCCCCC"> should be</font>

903
00:41:35,140 --> 00:41:41,049
implementing and if<font color="#E5E5E5"> you're interested</font><font color="#CCCCCC"> in</font>

904
00:41:38,440 --> 00:41:43,680
playing around with this tool to learn

905
00:41:41,049 --> 00:41:49,900
some protocols yourself then you can

906
00:41:43,680 --> 00:41:51,190
find<font color="#E5E5E5"> the my code on the on github and I</font>

907
00:41:49,900 --> 00:41:51,730
would like<font color="#E5E5E5"> to thank you for your</font>

908
00:41:51,190 --> 00:41:53,559
attention

909
00:41:51,730 --> 00:41:54,600
and take any<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you might</font>

910
00:41:53,559 --> 00:41:58,389
<font color="#CCCCCC">have</font>

911
00:41:54,600 --> 00:41:58,389
[Applause]

