1
00:00:07,870 --> 00:00:12,410
the stock is<font color="#E5E5E5"> about yes Google</font>

2
00:00:09,850 --> 00:00:14,840
<font color="#E5E5E5">vulnerability</font>

3
00:00:12,410 --> 00:00:18,790
<font color="#E5E5E5">at all we're going to show you one</font><font color="#CCCCCC"> ur</font>

4
00:00:14,840 --> 00:00:22,330
abilities what's the reason for it<font color="#E5E5E5"> well</font>

5
00:00:18,790 --> 00:00:25,040
over<font color="#CCCCCC"> the years</font><font color="#E5E5E5"> we found out we receive</font>

6
00:00:22,330 --> 00:00:27,470
hundreds of vulnerability<font color="#CCCCCC"> reports every</font>

7
00:00:25,040 --> 00:00:30,080
month<font color="#E5E5E5"> not all</font><font color="#CCCCCC"> of them turn up to</font>

8
00:00:27,470 --> 00:00:34,670
<font color="#E5E5E5">actually be vulnerabilities just so we</font>

9
00:00:30,080 --> 00:00:37,610
know<font color="#E5E5E5"> but still our researchers bug</font>

10
00:00:34,670 --> 00:00:40,280
hunters<font color="#CCCCCC"> that report</font><font color="#E5E5E5"> the vulnerabilities</font>

11
00:00:37,610 --> 00:00:43,010
<font color="#CCCCCC">to us sometimes point out some amazing</font>

12
00:00:40,280 --> 00:00:44,949
vulnerabilities and we learn a<font color="#E5E5E5"> lot from</font>

13
00:00:43,010 --> 00:00:48,890
them

14
00:00:44,949 --> 00:00:52,339
however this effort that they put<font color="#CCCCCC"> into</font>

15
00:00:48,890 --> 00:00:55,489
<font color="#CCCCCC">it</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> putting the dollar amounts aside</font>

16
00:00:52,339 --> 00:00:56,900
but the vast knowledge that they have

17
00:00:55,489 --> 00:01:01,400
and the vulnerabilities<font color="#CCCCCC"> that they</font>

18
00:00:56,900 --> 00:01:02,720
demonstrate<font color="#E5E5E5"> in our products</font><font color="#CCCCCC"> go large</font>

19
00:01:01,400 --> 00:01:06,679
<font color="#E5E5E5">largely unnoticed</font>

20
00:01:02,720 --> 00:01:09,979
<font color="#CCCCCC">I mean sure yes we fix the bugs and our</font>

21
00:01:06,680 --> 00:01:12,260
users are<font color="#E5E5E5"> more safe</font><font color="#CCCCCC"> but it just so</font>

22
00:01:09,979 --> 00:01:16,929
happens that our top researchers rarely

23
00:01:12,260 --> 00:01:20,659
blog<font color="#E5E5E5"> rarely tweet about the findings and</font>

24
00:01:16,930 --> 00:01:22,430
um we would rather credit them for<font color="#CCCCCC"> that</font>

25
00:01:20,659 --> 00:01:24,500
we would<font color="#E5E5E5"> rather promote the research we</font>

26
00:01:22,430 --> 00:01:27,619
<font color="#E5E5E5">would rather that the security community</font>

27
00:01:24,500 --> 00:01:30,320
<font color="#E5E5E5">at large knows about the types of bugs</font>

28
00:01:27,619 --> 00:01:35,299
<font color="#E5E5E5">because that's how we all grow right</font>

29
00:01:30,320 --> 00:01:37,969
<font color="#E5E5E5">that's how if the security community</font><font color="#CCCCCC"> for</font>

30
00:01:35,299 --> 00:01:40,219
example<font color="#CCCCCC"> at large knows</font><font color="#E5E5E5"> about new types</font>

31
00:01:37,969 --> 00:01:43,960
<font color="#E5E5E5">of vulnerabilities or new techniques of</font>

32
00:01:40,219 --> 00:01:46,219
<font color="#E5E5E5">finding them</font><font color="#CCCCCC"> we could expect more</font>

33
00:01:43,960 --> 00:01:48,829
interesting bugs to being reported to<font color="#CCCCCC"> us</font>

34
00:01:46,219 --> 00:01:51,229
and we<font color="#E5E5E5"> would fix them fix them</font><font color="#CCCCCC"> them and</font>

35
00:01:48,829 --> 00:01:54,020
<font color="#E5E5E5">our users would be safer so that's a</font>

36
00:01:51,229 --> 00:01:57,499
good<font color="#E5E5E5"> thing and</font><font color="#CCCCCC"> this is the reason for</font>

37
00:01:54,020 --> 00:02:01,369
<font color="#CCCCCC">the stock I will show you some</font><font color="#E5E5E5"> of the</font>

38
00:01:57,499 --> 00:02:03,859
example of vulnerabilities<font color="#E5E5E5"> but I would</font>

39
00:02:01,369 --> 00:02:05,570
focus only on one library<font color="#E5E5E5"> that happens</font>

40
00:02:03,859 --> 00:02:08,840
to be<font color="#CCCCCC"> quite</font><font color="#E5E5E5"> popular</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Google products</font>

41
00:02:05,570 --> 00:02:10,549
which is angularjs because if I

42
00:02:08,840 --> 00:02:11,690
otherwise<font color="#E5E5E5"> I</font><font color="#CCCCCC"> would talk about core</font>

43
00:02:10,550 --> 00:02:14,810
vulnerabilities

44
00:02:11,690 --> 00:02:17,990
I could talk<font color="#CCCCCC"> for hours</font><font color="#E5E5E5"> and hours</font><font color="#CCCCCC"> and you</font>

45
00:02:14,810 --> 00:02:20,270
probably<font color="#E5E5E5"> wouldn't</font><font color="#CCCCCC"> like that</font><font color="#E5E5E5"> all right</font>

46
00:02:17,990 --> 00:02:22,880
<font color="#E5E5E5">first of all some angular security</font>

47
00:02:20,270 --> 00:02:24,319
primer really basic stuff<font color="#CCCCCC"> about angular</font>

48
00:02:22,880 --> 00:02:28,150
security

49
00:02:24,319 --> 00:02:30,679
angular<font color="#E5E5E5"> is a JavaScript</font><font color="#CCCCCC"> framework right</font>

50
00:02:28,150 --> 00:02:34,010
<font color="#CCCCCC">there was a lot of</font><font color="#E5E5E5"> the research about</font>

51
00:02:30,680 --> 00:02:36,739
<font color="#E5E5E5">this remark</font><font color="#CCCCCC"> and the research was mostly</font>

52
00:02:34,010 --> 00:02:42,290
<font color="#E5E5E5">focused</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the feature called sandbox it</font>

53
00:02:36,739 --> 00:02:44,629
had some sort<font color="#CCCCCC"> of expression</font><font color="#E5E5E5"> sandbox that</font>

54
00:02:42,290 --> 00:02:48,590
thing<font color="#E5E5E5"> while it</font><font color="#CCCCCC"> did a truckload</font><font color="#E5E5E5"> of</font>

55
00:02:44,629 --> 00:02:51,018
<font color="#E5E5E5">attention is not a security boundary</font><font color="#CCCCCC"> it</font>

56
00:02:48,590 --> 00:02:53,019
was implemented<font color="#CCCCCC"> by the framework outers</font>

57
00:02:51,019 --> 00:02:56,510
in<font color="#E5E5E5"> order to prevent some sort of</font>

58
00:02:53,019 --> 00:02:58,400
accidental access to the<font color="#E5E5E5"> global scope of</font>

59
00:02:56,510 --> 00:03:01,629
the application<font color="#CCCCCC"> in</font><font color="#E5E5E5"> order to promote</font>

60
00:02:58,400 --> 00:03:04,669
better design of the applications

61
00:03:01,629 --> 00:03:07,480
<font color="#E5E5E5">however as it turns out in JavaScript</font>

62
00:03:04,669 --> 00:03:10,639
it's pretty difficult to<font color="#E5E5E5"> create a</font>

63
00:03:07,480 --> 00:03:14,060
sandboxing mechanism for<font color="#E5E5E5"> the executable</font>

64
00:03:10,639 --> 00:03:18,680
code let's say<font color="#E5E5E5"> so this sandbox was</font>

65
00:03:14,060 --> 00:03:23,329
<font color="#E5E5E5">broken</font><font color="#CCCCCC"> multiple times</font><font color="#E5E5E5"> in the end it was</font>

66
00:03:18,680 --> 00:03:25,280
removed in version 1.6 mm we<font color="#E5E5E5"> are not</font>

67
00:03:23,329 --> 00:03:28,280
going<font color="#E5E5E5"> to focus on ungulate sandbox</font>

68
00:03:25,280 --> 00:03:29,900
<font color="#E5E5E5">during this talk it's we can consider it</font>

69
00:03:28,280 --> 00:03:34,729
gone<font color="#E5E5E5"> it like there's simply no sandbox</font>

70
00:03:29,900 --> 00:03:37,669
<font color="#E5E5E5">even when we get bugs reported pointing</font>

71
00:03:34,729 --> 00:03:40,250
out some injection in angular

72
00:03:37,669 --> 00:03:42,859
application that is being stopped by

73
00:03:40,250 --> 00:03:46,060
sandbox alone we consider this as good

74
00:03:42,859 --> 00:03:48,409
as XSS we don't try we don't want our

75
00:03:46,060 --> 00:03:50,359
researchers to<font color="#E5E5E5"> focus on breaking</font><font color="#CCCCCC"> the</font>

76
00:03:48,409 --> 00:03:52,190
sandbox we don't we don't<font color="#E5E5E5"> trust in it</font>

77
00:03:50,359 --> 00:03:57,019
<font color="#CCCCCC">even</font><font color="#E5E5E5"> if it was present in the older</font>

78
00:03:52,190 --> 00:03:59,840
versions so<font color="#CCCCCC"> that aside there is</font><font color="#E5E5E5"> a</font>

79
00:03:57,019 --> 00:04:03,229
security boundary in angular framework

80
00:03:59,840 --> 00:04:05,540
<font color="#E5E5E5">and this one is called SC service strict</font>

81
00:04:03,229 --> 00:04:07,790
contextual outer escaping this is a

82
00:04:05,540 --> 00:04:10,900
<font color="#E5E5E5">feature that lets you essentially</font>

83
00:04:07,790 --> 00:04:14,120
<font color="#E5E5E5">interpolate user values into the</font>

84
00:04:10,900 --> 00:04:16,310
resulting<font color="#CCCCCC"> Dom into the</font><font color="#E5E5E5"> let's say HTML of</font>

85
00:04:14,120 --> 00:04:20,659
<font color="#CCCCCC">the of the page safely in a way that</font>

86
00:04:16,310 --> 00:04:23,800
doesn't cause code execution<font color="#E5E5E5"> there is</font>

87
00:04:20,659 --> 00:04:26,389
<font color="#CCCCCC">also something called</font><font color="#E5E5E5"> sanitizing service</font>

88
00:04:23,800 --> 00:04:30,039
<font color="#E5E5E5">which you</font><font color="#CCCCCC"> can use if you want to</font>

89
00:04:26,389 --> 00:04:32,840
interpolate<font color="#E5E5E5"> or</font><font color="#CCCCCC"> display</font><font color="#E5E5E5"> HTML code</font>

90
00:04:30,039 --> 00:04:33,900
provided<font color="#E5E5E5"> by by the user provided</font>

91
00:04:32,840 --> 00:04:36,448
externally

92
00:04:33,900 --> 00:04:38,969
so this is<font color="#CCCCCC"> similar to say for</font><font color="#E5E5E5"> example</font>

93
00:04:36,449 --> 00:04:41,550
<font color="#CCCCCC">dump unify sanitizer so you put</font>

94
00:04:38,970 --> 00:04:44,250
untrusted HTML and what comes out<font color="#E5E5E5"> is</font>

95
00:04:41,550 --> 00:04:47,070
HTML<font color="#E5E5E5"> that doesn't have JavaScript</font>

96
00:04:44,250 --> 00:04:50,610
essentially um<font color="#CCCCCC"> this is also a</font><font color="#E5E5E5"> security</font>

97
00:04:47,070 --> 00:04:52,729
<font color="#E5E5E5">boundary ah what is very crucial in</font>

98
00:04:50,610 --> 00:04:55,949
<font color="#E5E5E5">terms of angular applications though is</font>

99
00:04:52,729 --> 00:05:00,780
are two things first of<font color="#E5E5E5"> all user control</font>

100
00:04:55,949 --> 00:05:04,590
templates<font color="#E5E5E5"> our XSS are equivalent to XSS</font>

101
00:05:00,780 --> 00:05:07,320
<font color="#E5E5E5">so um if there's anything for example</font><font color="#CCCCCC"> in</font>

102
00:05:04,590 --> 00:05:10,469
<font color="#E5E5E5">this HTML snippet that would be a user</font>

103
00:05:07,320 --> 00:05:12,599
<font color="#CCCCCC">controls</font><font color="#E5E5E5"> like any I don't</font><font color="#CCCCCC"> know any new</font>

104
00:05:10,470 --> 00:05:14,460
element or any new attribute or<font color="#E5E5E5"> a value</font>

105
00:05:12,600 --> 00:05:15,990
<font color="#E5E5E5">of this attribute</font><font color="#CCCCCC"> this is</font><font color="#E5E5E5"> equivalent to</font>

106
00:05:14,460 --> 00:05:18,150
exercise

107
00:05:15,990 --> 00:05:20,100
similarly user<font color="#E5E5E5"> controlled expressions</font>

108
00:05:18,150 --> 00:05:23,190
within<font color="#E5E5E5"> those templates are also</font>

109
00:05:20,100 --> 00:05:26,880
<font color="#E5E5E5">exercised so in this example the white</font>

110
00:05:23,190 --> 00:05:29,610
<font color="#E5E5E5">coat surrounded by</font><font color="#CCCCCC"> there by the curly</font>

111
00:05:26,880 --> 00:05:31,560
braces is the<font color="#E5E5E5"> expression so</font><font color="#CCCCCC"> if there was</font>

112
00:05:29,610 --> 00:05:35,570
something if the user could supply the

113
00:05:31,560 --> 00:05:35,570
expression<font color="#E5E5E5"> this would be an exercise</font>

114
00:05:35,810 --> 00:05:43,260
however angular is special because those

115
00:05:39,870 --> 00:05:46,979
XSS payloads<font color="#CCCCCC"> or XSS equivalent payloads</font>

116
00:05:43,260 --> 00:05:48,599
<font color="#E5E5E5">do not look</font><font color="#CCCCCC"> like exercises as you can</font>

117
00:05:46,979 --> 00:05:51,659
see from<font color="#E5E5E5"> from the example over</font><font color="#CCCCCC"> here</font>

118
00:05:48,600 --> 00:05:53,310
right<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you have this white coat and</font>

119
00:05:51,660 --> 00:05:56,039
let's imagine<font color="#E5E5E5"> this is being reflected</font>

120
00:05:53,310 --> 00:05:59,370
from the server like there was some<font color="#CCCCCC"> gate</font>

121
00:05:56,039 --> 00:06:02,669
<font color="#E5E5E5">parameter user just supplied this</font><font color="#CCCCCC"> coat</font>

122
00:05:59,370 --> 00:06:05,450
and the server<font color="#E5E5E5"> tries to interpolate it</font>

123
00:06:02,669 --> 00:06:09,109
into the<font color="#CCCCCC"> I inside the div element</font><font color="#E5E5E5"> right</font>

124
00:06:05,450 --> 00:06:11,490
<font color="#E5E5E5">this should not be XSS in any regular</font>

125
00:06:09,110 --> 00:06:13,530
<font color="#CCCCCC">traditional conventional application</font>

126
00:06:11,490 --> 00:06:15,030
this<font color="#CCCCCC"> is just just text right there's no</font>

127
00:06:13,530 --> 00:06:19,320
angle bracket there's no script tag

128
00:06:15,030 --> 00:06:22,049
<font color="#E5E5E5">nothing like that however angular sort</font>

129
00:06:19,320 --> 00:06:24,810
of activates this expression and turns

130
00:06:22,050 --> 00:06:27,539
it into code execution<font color="#E5E5E5"> in this</font>

131
00:06:24,810 --> 00:06:29,370
particular<font color="#E5E5E5"> case this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a samples</font><font color="#CCCCCC"> bypass</font>

132
00:06:27,539 --> 00:06:33,330
for for one of the<font color="#E5E5E5"> versions</font><font color="#CCCCCC"> of the</font>

133
00:06:29,370 --> 00:06:35,550
object framework<font color="#E5E5E5"> and so obviously this</font>

134
00:06:33,330 --> 00:06:38,460
creates problems<font color="#CCCCCC"> when you combine</font>

135
00:06:35,550 --> 00:06:40,800
traditional XSS mitigations or ways of

136
00:06:38,460 --> 00:06:42,599
dealing with XSS<font color="#CCCCCC"> flows with angular</font>

137
00:06:40,800 --> 00:06:45,599
applications

138
00:06:42,599 --> 00:06:47,070
so<font color="#E5E5E5"> what sanitizers browser XSS filters</font>

139
00:06:45,599 --> 00:06:47,759
are completely unaware<font color="#CCCCCC"> that this is</font>

140
00:06:47,070 --> 00:06:51,659
actually<font color="#CCCCCC"> an X</font>

141
00:06:47,759 --> 00:06:53,400
payload<font color="#E5E5E5"> so this is how you can have</font>

142
00:06:51,659 --> 00:06:56,248
problems<font color="#E5E5E5"> with angular applications one</font>

143
00:06:53,400 --> 00:06:57,839
of them at least<font color="#CCCCCC"> when protecting angular</font>

144
00:06:56,249 --> 00:06:59,879
applications as you<font color="#E5E5E5"> can see is kind of</font>

145
00:06:57,839 --> 00:07:03,960
unique you<font color="#E5E5E5"> need to have something on top</font>

146
00:06:59,879 --> 00:07:10,199
<font color="#CCCCCC">of your regular</font><font color="#E5E5E5"> differences</font><font color="#CCCCCC"> angular in</font>

147
00:07:03,960 --> 00:07:13,409
<font color="#CCCCCC">Google</font><font color="#E5E5E5"> DRP is this even a thing well of</font>

148
00:07:10,199 --> 00:07:14,460
all exercises that we<font color="#CCCCCC"> get reported</font><font color="#E5E5E5"> in</font>

149
00:07:13,409 --> 00:07:16,740
2015

150
00:07:14,460 --> 00:07:19,948
7%<font color="#E5E5E5"> we're a unique to angular</font>

151
00:07:16,740 --> 00:07:22,949
applications were angular-specific<font color="#E5E5E5"> the</font>

152
00:07:19,949 --> 00:07:26,490
next year<font color="#E5E5E5"> 2016 this number</font><font color="#CCCCCC"> doubled right</font>

153
00:07:22,949 --> 00:07:28,889
<font color="#E5E5E5">we we had 16 percent of of all exercises</font>

154
00:07:26,490 --> 00:07:31,050
that were really angular-specific we

155
00:07:28,889 --> 00:07:33,330
expect this particular plan to continue

156
00:07:31,050 --> 00:07:36,569
<font color="#E5E5E5">solely because it's a popular framework</font>

157
00:07:33,330 --> 00:07:38,990
and there's more<font color="#E5E5E5"> and</font><font color="#CCCCCC"> more attention</font><font color="#E5E5E5"> in</font>

158
00:07:36,569 --> 00:07:41,370
the security community<font color="#CCCCCC"> put into this</font>

159
00:07:38,990 --> 00:07:43,889
<font color="#CCCCCC">this framework</font><font color="#E5E5E5"> so there's more research</font>

160
00:07:41,370 --> 00:07:47,430
people<font color="#E5E5E5"> find new flaws and report them to</font>

161
00:07:43,889 --> 00:07:52,499
us<font color="#CCCCCC"> we get various types of issues</font>

162
00:07:47,430 --> 00:07:56,959
reported and I go through<font color="#E5E5E5"> each</font><font color="#CCCCCC"> of them</font>

163
00:07:52,499 --> 00:07:59,490
one by<font color="#CCCCCC"> one a component</font><font color="#E5E5E5"> by an example so</font>

164
00:07:56,959 --> 00:08:02,759
first of all Dom XSS in angular

165
00:07:59,490 --> 00:08:06,060
directives dome XSS is some sort<font color="#E5E5E5"> of like</font>

166
00:08:02,759 --> 00:08:09,419
a standard so in JavaScript applications

167
00:08:06,060 --> 00:08:13,409
there<font color="#E5E5E5"> is nothing really groundbreaking</font>

168
00:08:09,419 --> 00:08:18,029
here but still we find that this<font color="#CCCCCC"> flaw is</font>

169
00:08:13,409 --> 00:08:20,759
common enough<font color="#E5E5E5"> and not it's not</font>

170
00:08:18,029 --> 00:08:22,469
considered<font color="#CCCCCC"> I mean angular sometimes is</font>

171
00:08:20,759 --> 00:08:23,969
considered as being the exercise free

172
00:08:22,469 --> 00:08:27,240
framework apart from the template

173
00:08:23,969 --> 00:08:28,889
injection issues however<font color="#CCCCCC"> we definitely</font>

174
00:08:27,240 --> 00:08:32,940
know<font color="#CCCCCC"> that this is not the case because</font>

175
00:08:28,889 --> 00:08:34,469
<font color="#CCCCCC">we see bugs like this one like Damocles</font>

176
00:08:32,940 --> 00:08:38,510
<font color="#E5E5E5">as in angular</font><font color="#CCCCCC"> directives what does it</font>

177
00:08:34,469 --> 00:08:40,709
say so first of all angular is a

178
00:08:38,510 --> 00:08:42,389
templating language as well right so<font color="#CCCCCC"> you</font>

179
00:08:40,708 --> 00:08:44,729
<font color="#E5E5E5">have a template then you have user data</font>

180
00:08:42,389 --> 00:08:46,589
you interpolate<font color="#E5E5E5"> the user data into the</font>

181
00:08:44,730 --> 00:08:49,880
template then you render<font color="#E5E5E5"> the whole thing</font>

182
00:08:46,589 --> 00:08:53,220
everything<font color="#CCCCCC"> happens the client-side here</font>

183
00:08:49,880 --> 00:08:56,579
<font color="#E5E5E5">thanks to</font><font color="#CCCCCC"> the SE does the contextual</font>

184
00:08:53,220 --> 00:08:58,709
auto escaping<font color="#E5E5E5"> service this</font><font color="#CCCCCC"> is safe like</font>

185
00:08:56,579 --> 00:09:01,459
this would not result<font color="#E5E5E5"> in exercises like</font>

186
00:08:58,709 --> 00:09:03,819
for example interpolating

187
00:09:01,459 --> 00:09:08,089
happens into the text content of the

188
00:09:03,819 --> 00:09:10,339
HTML<font color="#E5E5E5"> element or of this element or</font>

189
00:09:08,089 --> 00:09:11,480
<font color="#E5E5E5">wherever you wanted to do interpolate</font>

190
00:09:10,339 --> 00:09:14,240
the data or for<font color="#E5E5E5"> example I know</font>

191
00:09:11,480 --> 00:09:19,309
<font color="#E5E5E5">JavaScript URLs are not a thing they get</font>

192
00:09:14,240 --> 00:09:22,249
removed<font color="#E5E5E5"> however while this is being</font>

193
00:09:19,309 --> 00:09:25,879
<font color="#E5E5E5">saved this mechanism of using user data</font>

194
00:09:22,249 --> 00:09:28,579
in your application<font color="#CCCCCC"> is safe it doesn't</font>

195
00:09:25,879 --> 00:09:29,899
<font color="#E5E5E5">collect successors there are still parts</font>

196
00:09:28,579 --> 00:09:33,138
of code of the<font color="#CCCCCC"> application</font><font color="#E5E5E5"> that touch</font>

197
00:09:29,899 --> 00:09:35,899
<font color="#CCCCCC">Dom directly using classic</font><font color="#E5E5E5"> Dom access</font>

198
00:09:33,139 --> 00:09:39,829
things like<font color="#CCCCCC"> dot inner HTML assignment or</font>

199
00:09:35,899 --> 00:09:41,660
the<font color="#CCCCCC"> jQuery HTML function</font><font color="#E5E5E5"> so the</font>

200
00:09:39,829 --> 00:09:43,519
developers can simply make mistakes and

201
00:09:41,660 --> 00:09:44,929
interpolate directly into the dome using

202
00:09:43,519 --> 00:09:48,639
those functions<font color="#E5E5E5"> and this is what happens</font>

203
00:09:44,929 --> 00:09:53,300
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> example we got a report by Manish</font>

204
00:09:48,639 --> 00:09:55,519
Bhattacharya<font color="#E5E5E5"> lately which turned out to</font>

205
00:09:53,300 --> 00:09:58,579
<font color="#CCCCCC">be a Dom XSS in angular application</font>

206
00:09:55,519 --> 00:10:03,860
this particular Dom XSS was in the

207
00:09:58,579 --> 00:10:08,388
<font color="#CCCCCC">breadcrumbs part</font><font color="#E5E5E5"> of the interface for an</font>

208
00:10:03,860 --> 00:10:10,699
application<font color="#E5E5E5"> that's used to manage your</font>

209
00:10:08,389 --> 00:10:13,309
<font color="#E5E5E5">clouds applications or cloud projects</font>

210
00:10:10,699 --> 00:10:15,799
<font color="#E5E5E5">right and one of the parts of the UI is</font>

211
00:10:13,309 --> 00:10:17,029
you could create<font color="#E5E5E5"> basically as of some</font>

212
00:10:15,799 --> 00:10:19,730
sort of file system you could create

213
00:10:17,029 --> 00:10:21,350
folders upload files there<font color="#CCCCCC"> manage</font><font color="#E5E5E5"> the</font>

214
00:10:19,730 --> 00:10:23,569
ACL<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the space and so on and so on</font>

215
00:10:21,350 --> 00:10:25,549
<font color="#E5E5E5">and so forth</font><font color="#CCCCCC"> and this is like the</font>

216
00:10:23,569 --> 00:10:27,979
breadcrumb trail<font color="#E5E5E5"> right like the usual</font>

217
00:10:25,549 --> 00:10:31,040
navigational bar for navigating<font color="#E5E5E5"> the file</font>

218
00:10:27,980 --> 00:10:33,230
system<font color="#E5E5E5"> and if you created a folder with</font>

219
00:10:31,040 --> 00:10:34,910
<font color="#CCCCCC">XSS payload in the name it would simply</font>

220
00:10:33,230 --> 00:10:38,869
<font color="#E5E5E5">are you know appear here in the DOM and</font>

221
00:10:34,910 --> 00:10:41,449
<font color="#E5E5E5">cause extreme script</font><font color="#CCCCCC"> execution so this</font>

222
00:10:38,869 --> 00:10:44,839
is how<font color="#E5E5E5"> this vulnerability looks in the</font>

223
00:10:41,449 --> 00:10:50,089
code here<font color="#CCCCCC"> you grab something you grab</font>

224
00:10:44,839 --> 00:10:53,269
actually the text content<font color="#E5E5E5"> which is the</font>

225
00:10:50,089 --> 00:10:56,420
<font color="#E5E5E5">folder name that the user created from</font>

226
00:10:53,269 --> 00:10:59,179
the Dom<font color="#E5E5E5"> that was interpolated safely but</font>

227
00:10:56,420 --> 00:11:00,979
then you do some magic<font color="#CCCCCC"> on top of it in</font>

228
00:10:59,179 --> 00:11:02,329
this<font color="#E5E5E5"> particular case if the folder name</font>

229
00:11:00,980 --> 00:11:07,819
was longer<font color="#CCCCCC"> than a certain</font><font color="#E5E5E5"> number of</font>

230
00:11:02,329 --> 00:11:09,349
characters<font color="#E5E5E5"> each</font><font color="#CCCCCC"> try to cut the beginning</font>

231
00:11:07,819 --> 00:11:11,899
and the end<font color="#E5E5E5"> of</font><font color="#CCCCCC"> this are</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> no it</font>

232
00:11:09,350 --> 00:11:14,160
cut<font color="#E5E5E5"> the middle part of this of this text</font>

233
00:11:11,899 --> 00:11:16,709
<font color="#E5E5E5">and just put like the</font><font color="#CCCCCC"> ellipse</font>

234
00:11:14,160 --> 00:11:19,310
triple<font color="#E5E5E5"> dots character in in the in the</font>

235
00:11:16,709 --> 00:11:22,099
meantime<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> in the middle and</font>

236
00:11:19,310 --> 00:11:25,008
unfortunately while it grab the<font color="#CCCCCC"> text</font><font color="#E5E5E5"> its</font>

237
00:11:22,100 --> 00:11:28,290
<font color="#E5E5E5">outputted using the innerhtml</font><font color="#CCCCCC"> Singh so</font>

238
00:11:25,009 --> 00:11:30,509
classical<font color="#E5E5E5"> dome</font><font color="#CCCCCC"> exercise law</font><font color="#E5E5E5"> not that</font>

239
00:11:28,290 --> 00:11:36,719
easy to<font color="#CCCCCC"> reproduce</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you needed</font><font color="#E5E5E5"> to</font>

240
00:11:30,509 --> 00:11:38,370
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> payload</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you know when when</font>

241
00:11:36,720 --> 00:11:40,410
<font color="#CCCCCC">only the middle of the payload</font><font color="#E5E5E5"> was</font>

242
00:11:38,370 --> 00:11:42,060
removed<font color="#CCCCCC"> only then the exercise</font><font color="#E5E5E5"> would</font>

243
00:11:40,410 --> 00:11:48,420
<font color="#E5E5E5">execute so we need to have a payload</font>

244
00:11:42,060 --> 00:11:49,920
<font color="#E5E5E5">long enough with with the values able to</font>

245
00:11:48,420 --> 00:11:55,050
<font color="#E5E5E5">comment out the ellipses part in the</font>

246
00:11:49,920 --> 00:11:57,660
<font color="#E5E5E5">middle essentially and this is the first</font>

247
00:11:55,050 --> 00:11:59,279
opportunity<font color="#E5E5E5"> to introduce</font><font color="#CCCCCC"> you to how we</font>

248
00:11:57,660 --> 00:12:02,759
deal with the vulnerability internally

249
00:11:59,279 --> 00:12:05,220
so the product team obviously<font color="#CCCCCC"> was not if</font>

250
00:12:02,759 --> 00:12:08,009
I double on the<font color="#CCCCCC"> above the back very</font>

251
00:12:05,220 --> 00:12:10,350
<font color="#CCCCCC">proposed the</font><font color="#E5E5E5"> fix and what we do is we</font>

252
00:12:08,009 --> 00:12:11,790
verify<font color="#CCCCCC"> all the fixes</font><font color="#E5E5E5"> for at least high</font>

253
00:12:10,350 --> 00:12:13,949
severity vulnerabilities right so

254
00:12:11,790 --> 00:12:17,219
someone<font color="#CCCCCC"> from the security team looks at</font>

255
00:12:13,949 --> 00:12:18,930
the fix and<font color="#E5E5E5"> says yep you you did it</font>

256
00:12:17,220 --> 00:12:21,300
correct like<font color="#E5E5E5"> there's no</font><font color="#CCCCCC"> beginning or</font><font color="#E5E5E5"> or</font>

257
00:12:18,930 --> 00:12:23,459
actually you made some errors<font color="#CCCCCC"> in this</font>

258
00:12:21,300 --> 00:12:25,349
particular case it took a couple<font color="#E5E5E5"> of</font>

259
00:12:23,459 --> 00:12:27,630
<font color="#E5E5E5">iterations</font><font color="#CCCCCC"> until</font><font color="#E5E5E5"> the product team was</font>

260
00:12:25,350 --> 00:12:32,339
<font color="#CCCCCC">able to come up with</font><font color="#E5E5E5"> a solution</font><font color="#CCCCCC"> that</font>

261
00:12:27,630 --> 00:12:35,189
doesn't cause exercises<font color="#E5E5E5"> ma'am in the</font>

262
00:12:32,339 --> 00:12:37,170
same feature right so we try<font color="#E5E5E5"> to make</font>

263
00:12:35,189 --> 00:12:40,560
sure<font color="#E5E5E5"> that if the bug is fixed</font><font color="#CCCCCC"> it</font>

264
00:12:37,170 --> 00:12:42,449
<font color="#E5E5E5">actually is fixed or it's it's not</font><font color="#CCCCCC"> just</font>

265
00:12:40,560 --> 00:12:49,399
the product<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> that claims the bug is</font>

266
00:12:42,449 --> 00:12:52,469
fixed so<font color="#CCCCCC"> dome exercises in angular</font>

267
00:12:49,399 --> 00:12:54,509
directives<font color="#E5E5E5"> especially are pretty common</font>

268
00:12:52,470 --> 00:12:57,029
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we are very</font><font color="#E5E5E5"> easy to introduce</font>

269
00:12:54,509 --> 00:12:59,519
<font color="#CCCCCC">it's like the regular Dom exercises in</font>

270
00:12:57,029 --> 00:13:03,000
other applications<font color="#E5E5E5"> thankfully</font><font color="#CCCCCC"> they're I</font>

271
00:12:59,519 --> 00:13:04,769
quite straightforward and quite

272
00:13:03,000 --> 00:13:06,689
straightforward to understand and fix

273
00:13:04,769 --> 00:13:09,809
because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> vulnerabilities</font><font color="#E5E5E5"> apparent in</font>

274
00:13:06,689 --> 00:13:12,209
a code you just append<font color="#E5E5E5"> something to I'll</font>

275
00:13:09,809 --> 00:13:15,540
use the vulnerable sync with untrusted

276
00:13:12,209 --> 00:13:18,569
data we have various<font color="#CCCCCC"> methods of catching</font>

277
00:13:15,540 --> 00:13:21,559
that<font color="#E5E5E5"> the simplest one being simply you</font>

278
00:13:18,569 --> 00:13:25,079
know<font color="#E5E5E5"> grabbing the code base essentially</font>

279
00:13:21,559 --> 00:13:27,810
and<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> some other additional</font>

280
00:13:25,079 --> 00:13:29,699
<font color="#E5E5E5">content measures we try to employ as a</font>

281
00:13:27,810 --> 00:13:31,560
result of seeing this so often<font color="#E5E5E5"> like</font>

282
00:13:29,700 --> 00:13:35,630
<font color="#CCCCCC">banning api's trying to come up with</font>

283
00:13:31,560 --> 00:13:38,640
<font color="#CCCCCC">save wrappers</font><font color="#E5E5E5"> and and stuff like that</font>

284
00:13:35,630 --> 00:13:40,470
second kind of vulnerabilities in

285
00:13:38,640 --> 00:13:42,890
angular applications is the template

286
00:13:40,470 --> 00:13:42,890
mixing

287
00:13:44,670 --> 00:13:50,490
<font color="#E5E5E5">what is known and was already discussed</font>

288
00:13:47,130 --> 00:13:52,560
a lot<font color="#E5E5E5"> of times in a community is the</font>

289
00:13:50,490 --> 00:13:57,120
<font color="#E5E5E5">service</font><font color="#CCCCCC"> I template mixing so what</font>

290
00:13:52,560 --> 00:14:01,380
happens is you<font color="#CCCCCC"> have essentially an</font>

291
00:13:57,120 --> 00:14:03,950
injection<font color="#CCCCCC"> that happens server site but</font>

292
00:14:01,380 --> 00:14:06,720
that<font color="#E5E5E5"> injection</font><font color="#CCCCCC"> does not cause XSS</font>

293
00:14:03,950 --> 00:14:09,120
<font color="#CCCCCC">because for example you escape the value</font>

294
00:14:06,720 --> 00:14:13,020
like with I know PHP can can use the

295
00:14:09,120 --> 00:14:17,280
HTML<font color="#E5E5E5"> special cars function however as</font>

296
00:14:13,020 --> 00:14:19,079
you might remember<font color="#E5E5E5"> injection or user</font>

297
00:14:17,280 --> 00:14:21,839
control template or user control the

298
00:14:19,080 --> 00:14:25,380
expressions<font color="#E5E5E5"> in</font><font color="#CCCCCC"> angular applications are</font>

299
00:14:21,840 --> 00:14:27,810
equivalent<font color="#E5E5E5"> to exercise and the usual way</font>

300
00:14:25,380 --> 00:14:30,330
people exploited is vs the sandbox

301
00:14:27,810 --> 00:14:34,979
escape<font color="#CCCCCC"> puts in</font><font color="#E5E5E5"> this example in the full</font>

302
00:14:30,330 --> 00:14:38,130
parameter value<font color="#CCCCCC"> this is obvious in the</font>

303
00:14:34,980 --> 00:14:39,840
code<font color="#E5E5E5"> once you know the templating system</font>

304
00:14:38,130 --> 00:14:44,010
right<font color="#E5E5E5"> because here I know for example</font>

305
00:14:39,840 --> 00:14:45,660
<font color="#E5E5E5">that anything under the ng</font><font color="#CCCCCC"> app element</font>

306
00:14:44,010 --> 00:14:47,790
annotated with<font color="#E5E5E5"> this attribute</font><font color="#CCCCCC"> is</font>

307
00:14:45,660 --> 00:14:51,089
actually an angular template<font color="#E5E5E5"> so I can</font>

308
00:14:47,790 --> 00:14:56,219
infer that<font color="#E5E5E5"> any interpolation</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> from</font>

309
00:14:51,090 --> 00:15:00,480
untrusted<font color="#CCCCCC"> user data is an XSS however it</font>

310
00:14:56,220 --> 00:15:02,640
gets<font color="#E5E5E5"> much more</font><font color="#CCCCCC"> tricky with client-side</font>

311
00:15:00,480 --> 00:15:05,280
<font color="#CCCCCC">that blank mixing like for example this</font>

312
00:15:02,640 --> 00:15:07,740
particular<font color="#E5E5E5"> application is vulnerable but</font>

313
00:15:05,280 --> 00:15:09,480
you don't see the vulnerability<font color="#E5E5E5"> it's</font>

314
00:15:07,740 --> 00:15:10,680
just some you know angular<font color="#CCCCCC"> frameworks</font>

315
00:15:09,480 --> 00:15:17,370
some others additional JavaScript

316
00:15:10,680 --> 00:15:19,800
<font color="#CCCCCC">stripped and some template the way this</font>

317
00:15:17,370 --> 00:15:22,650
<font color="#E5E5E5">is vulnerable</font><font color="#CCCCCC"> is in this particular</font>

318
00:15:19,800 --> 00:15:27,479
tracking javascript file<font color="#E5E5E5"> there's an</font>

319
00:15:22,650 --> 00:15:29,490
element created that that sets<font color="#CCCCCC"> an</font>

320
00:15:27,480 --> 00:15:33,030
<font color="#CCCCCC">attribute called data URL in this</font>

321
00:15:29,490 --> 00:15:35,310
<font color="#E5E5E5">example and it'll get some sign the</font>

322
00:15:33,030 --> 00:15:38,040
value location<font color="#CCCCCC"> hf location</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> chav is</font>

323
00:15:35,310 --> 00:15:40,500
obviously user controls right because

324
00:15:38,040 --> 00:15:44,910
the user can test appendage<font color="#E5E5E5"> query</font>

325
00:15:40,500 --> 00:15:46,440
parameters or fragment so the attacker

326
00:15:44,910 --> 00:15:51,060
can potentially control that value<font color="#E5E5E5"> and</font>

327
00:15:46,440 --> 00:15:53,580
<font color="#E5E5E5">this gets appended into the body</font><font color="#CCCCCC"> so it's</font>

328
00:15:51,060 --> 00:15:55,140
somewhat similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> Dom access</font><font color="#CCCCCC"> laws in</font>

329
00:15:53,580 --> 00:15:57,660
the way that we have a user control

330
00:15:55,140 --> 00:15:58,410
<font color="#CCCCCC">cells and a vulnerable</font><font color="#E5E5E5"> sink or sensitive</font>

331
00:15:57,660 --> 00:16:01,199
thing

332
00:15:58,410 --> 00:16:05,219
and we have a flow that connects<font color="#E5E5E5"> those</font>

333
00:16:01,200 --> 00:16:09,570
two<font color="#CCCCCC"> elements whereas for doumeki says</font>

334
00:16:05,220 --> 00:16:12,810
the sinks are let's say certain<font color="#CCCCCC"> dom</font>

335
00:16:09,570 --> 00:16:14,790
functions<font color="#E5E5E5"> for angular applications the</font>

336
00:16:12,810 --> 00:16:18,479
things<font color="#E5E5E5"> is anything that is within the</font>

337
00:16:14,790 --> 00:16:20,069
template so usually for most angular

338
00:16:18,480 --> 00:16:23,280
applications this<font color="#CCCCCC"> is the whole dom the</font>

339
00:16:20,070 --> 00:16:25,050
the whole document<font color="#E5E5E5"> is the sensitive</font>

340
00:16:23,280 --> 00:16:28,620
thing so any injection inside the

341
00:16:25,050 --> 00:16:31,290
<font color="#CCCCCC">document can become a CSS person and</font>

342
00:16:28,620 --> 00:16:32,010
this<font color="#CCCCCC"> is one</font><font color="#E5E5E5"> example where</font><font color="#CCCCCC"> we found out</font>

343
00:16:31,290 --> 00:16:36,750
about this

344
00:16:32,010 --> 00:16:41,910
there was a URL<font color="#E5E5E5"> reported to us</font><font color="#CCCCCC"> that cost</font>

345
00:16:36,750 --> 00:16:43,620
<font color="#E5E5E5">script execution and you can't really</font>

346
00:16:41,910 --> 00:16:46,500
know what's<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> guess</font>

347
00:16:43,620 --> 00:16:48,810
someone just injects<font color="#E5E5E5"> I mean there's some</font>

348
00:16:46,500 --> 00:16:51,390
angular this is angular<font color="#E5E5E5"> application same</font>

349
00:16:48,810 --> 00:16:52,739
<font color="#E5E5E5">safety sense</font><font color="#CCCCCC"> center slash tools is some</font>

350
00:16:51,390 --> 00:16:54,750
sort of angular application and then

351
00:16:52,740 --> 00:16:57,240
there's a fragment<font color="#E5E5E5"> and some of user</font>

352
00:16:54,750 --> 00:17:00,830
parameter and the sandbox<font color="#E5E5E5"> escape later</font>

353
00:16:57,240 --> 00:17:00,830
<font color="#E5E5E5">on and some</font><font color="#CCCCCC"> padding</font>

354
00:17:01,430 --> 00:17:09,629
what happened here it turns out this was

355
00:17:06,959 --> 00:17:11,490
<font color="#CCCCCC">a vulnerability in</font><font color="#E5E5E5"> a +1</font><font color="#CCCCCC"> widget so a</font>

356
00:17:09,630 --> 00:17:14,490
widget<font color="#E5E5E5"> that could get embedded by</font>

357
00:17:11,490 --> 00:17:18,060
various pages<font color="#E5E5E5"> in order to you</font><font color="#CCCCCC"> know share</font>

358
00:17:14,490 --> 00:17:21,209
the content<font color="#E5E5E5"> using the Google+ service</font>

359
00:17:18,060 --> 00:17:23,659
and it just so happens that this widget

360
00:17:21,209 --> 00:17:31,170
<font color="#E5E5E5">which is completely unaware of angular</font>

361
00:17:23,660 --> 00:17:33,720
<font color="#CCCCCC">defrag create an iframe and if if the</font>

362
00:17:31,170 --> 00:17:37,320
current URL<font color="#E5E5E5"> of the page is longer than</font>

363
00:17:33,720 --> 00:17:40,170
the number of characters<font color="#E5E5E5"> it adds an</font>

364
00:17:37,320 --> 00:17:42,570
additional attribute to the<font color="#CCCCCC"> site frame</font>

365
00:17:40,170 --> 00:17:46,350
with the value being<font color="#E5E5E5"> the URL of the</font>

366
00:17:42,570 --> 00:17:49,620
current page<font color="#E5E5E5"> so this</font><font color="#CCCCCC"> particular</font><font color="#E5E5E5"> widget</font>

367
00:17:46,350 --> 00:17:54,540
<font color="#CCCCCC">run before the angular even looked</font><font color="#E5E5E5"> into</font>

368
00:17:49,620 --> 00:17:57,350
the Dom before it boots dropped so when

369
00:17:54,540 --> 00:18:01,440
angular started running<font color="#E5E5E5"> what it saw is</font>

370
00:17:57,350 --> 00:18:03,750
well an iframe<font color="#E5E5E5"> with an attribute value</font>

371
00:18:01,440 --> 00:18:05,310
of which consisted of angular

372
00:18:03,750 --> 00:18:09,710
expressions so we just evaluated this

373
00:18:05,310 --> 00:18:12,230
expression causing exercise<font color="#E5E5E5"> as a result</font>

374
00:18:09,710 --> 00:18:14,480
every<font color="#CCCCCC"> angular application</font>

375
00:18:12,230 --> 00:18:17,660
out there that<font color="#E5E5E5"> used this widget was</font>

376
00:18:14,480 --> 00:18:22,059
vulnerable to<font color="#E5E5E5"> exercise</font><font color="#CCCCCC"> so you can</font>

377
00:18:17,660 --> 00:18:22,059
imagine the impact<font color="#E5E5E5"> being quite severe</font>

378
00:18:22,360 --> 00:18:26,330
the clients this<font color="#E5E5E5"> is the example</font><font color="#CCCCCC"> of the</font>

379
00:18:24,890 --> 00:18:28,370
<font color="#CCCCCC">case I'd</font><font color="#E5E5E5"> template</font><font color="#CCCCCC"> mixing issues with</font>

380
00:18:26,330 --> 00:18:29,600
<font color="#E5E5E5">regular applications they are</font>

381
00:18:28,370 --> 00:18:31,459
problematic<font color="#CCCCCC"> because they are not</font>

382
00:18:29,600 --> 00:18:34,639
apparent<font color="#CCCCCC"> from the code in</font><font color="#E5E5E5"> this</font>

383
00:18:31,460 --> 00:18:38,809
<font color="#E5E5E5">particular case like the plasmid +1</font>

384
00:18:34,640 --> 00:18:41,480
widgets authors<font color="#E5E5E5"> were not even aware</font><font color="#CCCCCC"> of</font>

385
00:18:38,809 --> 00:18:44,230
angular framework existence<font color="#E5E5E5"> why would</font>

386
00:18:41,480 --> 00:18:46,809
they this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the code</font><font color="#CCCCCC"> that is completely</font>

387
00:18:44,230 --> 00:18:49,100
not related to<font color="#E5E5E5"> angular</font>

388
00:18:46,809 --> 00:18:52,970
however the exploitability<font color="#E5E5E5"> conscience</font>

389
00:18:49,100 --> 00:18:54,980
conditions are quite<font color="#E5E5E5"> specific in for</font>

390
00:18:52,970 --> 00:18:58,490
example<font color="#CCCCCC"> you need a J's library that</font>

391
00:18:54,980 --> 00:19:02,240
modifies them and add user<font color="#E5E5E5"> controls</font>

392
00:18:58,490 --> 00:19:04,820
<font color="#CCCCCC">contents even escaped one solely before</font>

393
00:19:02,240 --> 00:19:06,710
the angular bootstraps<font color="#E5E5E5"> there's a couple</font>

394
00:19:04,820 --> 00:19:11,030
<font color="#E5E5E5">of potential potential fixes to it but I</font>

395
00:19:06,710 --> 00:19:12,470
want one<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about them explicitly you</font>

396
00:19:11,030 --> 00:19:16,520
can you can just<font color="#E5E5E5"> read from</font><font color="#CCCCCC"> the slides</font>

397
00:19:12,470 --> 00:19:22,130
but essentially there's even a<font color="#E5E5E5"> couple of</font>

398
00:19:16,520 --> 00:19:24,350
variants that are not that obvious<font color="#E5E5E5"> that</font>

399
00:19:22,130 --> 00:19:28,100
we should<font color="#E5E5E5"> still think about because even</font>

400
00:19:24,350 --> 00:19:29,799
if one potential countermeasure would be

401
00:19:28,100 --> 00:19:32,209
<font color="#CCCCCC">to for</font><font color="#E5E5E5"> example run all the code only</font>

402
00:19:29,799 --> 00:19:34,220
<font color="#E5E5E5">after the angular bootstraps</font><font color="#CCCCCC"> that would</font>

403
00:19:32,210 --> 00:19:37,250
be safe in the generic sense<font color="#CCCCCC"> it would</font><font color="#E5E5E5"> be</font>

404
00:19:34,220 --> 00:19:40,370
<font color="#E5E5E5">safe however a lot of angular</font>

405
00:19:37,250 --> 00:19:42,799
applications compile the templates not

406
00:19:40,370 --> 00:19:46,100
during the<font color="#E5E5E5"> bootstrap time but later on</font>

407
00:19:42,799 --> 00:19:47,929
at<font color="#CCCCCC"> runtime they include some additional</font>

408
00:19:46,100 --> 00:19:49,639
templates very called the dollar compile

409
00:19:47,929 --> 00:19:51,710
function the dollar<font color="#E5E5E5"> pass function the</font>

410
00:19:49,640 --> 00:19:53,780
dollar<font color="#CCCCCC"> even functions</font><font color="#E5E5E5"> all of those</font>

411
00:19:51,710 --> 00:19:58,549
functions<font color="#CCCCCC"> if they ever get cold</font><font color="#E5E5E5"> with the</font>

412
00:19:53,780 --> 00:20:00,710
user input<font color="#CCCCCC"> are XSS equivalent so you can</font>

413
00:19:58,549 --> 00:20:04,549
still<font color="#E5E5E5"> have a vulnerable of angular</font>

414
00:20:00,710 --> 00:20:08,650
application whenever<font color="#E5E5E5"> something touches</font>

415
00:20:04,549 --> 00:20:08,650
the<font color="#E5E5E5"> Dom outside of angular control</font>

416
00:20:08,860 --> 00:20:13,699
what's also interesting it's not<font color="#CCCCCC"> only</font>

417
00:20:11,450 --> 00:20:16,549
<font color="#E5E5E5">JavaScript that modifies the Dom it</font>

418
00:20:13,700 --> 00:20:20,990
turns out and<font color="#CCCCCC"> this brings us to back to</font>

419
00:20:16,549 --> 00:20:23,480
the<font color="#CCCCCC"> Dom vulnerability</font><font color="#E5E5E5"> and it gives me</font>

420
00:20:20,990 --> 00:20:25,010
the opportunity<font color="#CCCCCC"> of again telling</font>

421
00:20:23,480 --> 00:20:26,930
something about

422
00:20:25,010 --> 00:20:29,390
how we deal with the reported

423
00:20:26,930 --> 00:20:31,190
vulnerabilities<font color="#E5E5E5"> so for high severity</font>

424
00:20:29,390 --> 00:20:33,320
<font color="#E5E5E5">bugs we perform something that is called</font>

425
00:20:31,190 --> 00:20:35,450
a root cause and variant<font color="#E5E5E5"> analysis and</font>

426
00:20:33,320 --> 00:20:38,659
<font color="#E5E5E5">that's what it says on</font><font color="#CCCCCC"> a team</font>

427
00:20:35,450 --> 00:20:40,430
we essentially look more deeply into<font color="#E5E5E5"> the</font>

428
00:20:38,660 --> 00:20:43,130
bug and try to find what actually caused

429
00:20:40,430 --> 00:20:45,500
it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> try some other vectors that may</font>

430
00:20:43,130 --> 00:20:47,420
<font color="#E5E5E5">be triggered the same vulnerability as</font>

431
00:20:45,500 --> 00:20:51,440
well just to<font color="#CCCCCC"> make sure that we patch the</font>

432
00:20:47,420 --> 00:20:54,650
right thing<font color="#CCCCCC"> in this particular case we</font>

433
00:20:51,440 --> 00:20:56,840
had a vulnerability<font color="#E5E5E5"> that cost one of the</font>

434
00:20:54,650 --> 00:21:01,580
our team members to investigate deeply

435
00:20:56,840 --> 00:21:06,139
<font color="#E5E5E5">and he found a very</font><font color="#CCCCCC"> cool flaw in the end</font>

436
00:21:01,580 --> 00:21:11,780
in the<font color="#E5E5E5"> framework itself so the</font>

437
00:21:06,140 --> 00:21:16,910
vulnerability is<font color="#E5E5E5"> here in the browser</font>

438
00:21:11,780 --> 00:21:22,940
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> what happens browsers nowadays</font>

439
00:21:16,910 --> 00:21:26,090
have some sort of they remember the data

440
00:21:22,940 --> 00:21:28,280
<font color="#E5E5E5">that you type into a form just</font><font color="#CCCCCC"> in case</font>

441
00:21:26,090 --> 00:21:32,689
you never gate away from the page<font color="#CCCCCC"> and by</font>

442
00:21:28,280 --> 00:21:35,330
mistake<font color="#CCCCCC"> or you click</font><font color="#E5E5E5"> some link that your</font>

443
00:21:32,690 --> 00:21:37,820
precious<font color="#E5E5E5"> text is still there and it's</font>

444
00:21:35,330 --> 00:21:41,389
much more usable for for the common

445
00:21:37,820 --> 00:21:46,310
folks<font color="#CCCCCC"> and this also</font><font color="#E5E5E5"> happens for hidden</font>

446
00:21:41,390 --> 00:21:49,010
<font color="#CCCCCC">foreign elements</font><font color="#E5E5E5"> it's technically</font>

447
00:21:46,310 --> 00:21:51,679
implemented using<font color="#E5E5E5"> the back</font><font color="#CCCCCC"> for word</font>

448
00:21:49,010 --> 00:21:53,300
castle<font color="#E5E5E5"> leveraging the functionality of</font>

449
00:21:51,680 --> 00:21:55,400
<font color="#E5E5E5">the back forward casualty of the</font>

450
00:21:53,300 --> 00:21:56,810
<font color="#CCCCCC">browser's unfortunately this also</font>

451
00:21:55,400 --> 00:22:00,460
creates a vulnerability<font color="#CCCCCC"> in angular</font>

452
00:21:56,810 --> 00:22:03,379
applications<font color="#E5E5E5"> because let's imagine</font>

453
00:22:00,460 --> 00:22:07,250
there's an angular application that has

454
00:22:03,380 --> 00:22:09,830
some<font color="#E5E5E5"> user name interpolation into into a</font>

455
00:22:07,250 --> 00:22:12,230
value of a hidden field<font color="#E5E5E5"> write angular</font>

456
00:22:09,830 --> 00:22:14,389
bootstraps evaluates the expression and

457
00:22:12,230 --> 00:22:19,400
let's imagine<font color="#E5E5E5"> that the user</font><font color="#CCCCCC"> name</font>

458
00:22:14,390 --> 00:22:21,950
evaluates to some innocent<font color="#CCCCCC"> Joe value it</font>

459
00:22:19,400 --> 00:22:24,680
gets interpolated into<font color="#CCCCCC"> the Dom again and</font>

460
00:22:21,950 --> 00:22:26,330
we have an<font color="#E5E5E5"> innocent Joe in everything</font>

461
00:22:24,680 --> 00:22:28,070
<font color="#CCCCCC">it's fine this is how it's supposed</font><font color="#E5E5E5"> to</font>

462
00:22:26,330 --> 00:22:31,460
<font color="#CCCCCC">work</font><font color="#E5E5E5"> right but let's imagine</font><font color="#CCCCCC"> that</font>

463
00:22:28,070 --> 00:22:34,460
<font color="#E5E5E5">instead the value of the</font><font color="#CCCCCC"> username</font><font color="#E5E5E5"> is</font>

464
00:22:31,460 --> 00:22:37,940
again mustache mustache mustache

465
00:22:34,460 --> 00:22:38,930
<font color="#E5E5E5">Bobby tables masters massage</font><font color="#CCCCCC"> it's still</font>

466
00:22:37,940 --> 00:22:40,430
safe

467
00:22:38,930 --> 00:22:43,040
because it's already after<font color="#E5E5E5"> the</font>

468
00:22:40,430 --> 00:22:45,200
interpolation<font color="#CCCCCC"> it's just a string</font>

469
00:22:43,040 --> 00:22:46,790
however the browser now remembers<font color="#E5E5E5"> that</font>

470
00:22:45,200 --> 00:22:50,120
<font color="#E5E5E5">you probably have modified the farm with</font>

471
00:22:46,790 --> 00:22:51,800
the value what we tables<font color="#E5E5E5"> so when you</font>

472
00:22:50,120 --> 00:22:53,840
navigate<font color="#CCCCCC"> away from the page</font><font color="#E5E5E5"> and you go</font>

473
00:22:51,800 --> 00:22:55,790
back which<font color="#E5E5E5"> you can trigger</font>

474
00:22:53,840 --> 00:22:59,000
programmatically<font color="#CCCCCC"> we'll say history back</font>

475
00:22:55,790 --> 00:23:02,090
then the browser<font color="#E5E5E5"> will replace the</font><font color="#CCCCCC"> form</font>

476
00:22:59,000 --> 00:23:04,430
<font color="#E5E5E5">value and then only then the angular</font>

477
00:23:02,090 --> 00:23:06,020
<font color="#E5E5E5">bootstraps seeing the modified value and</font>

478
00:23:04,430 --> 00:23:07,460
executing the<font color="#CCCCCC"> Bobby</font><font color="#E5E5E5"> Davies expression</font>

479
00:23:06,020 --> 00:23:12,110
which can<font color="#CCCCCC"> be a</font><font color="#E5E5E5"> sound of this cable can</font>

480
00:23:07,460 --> 00:23:15,320
be<font color="#E5E5E5"> an exercise we fix this in the</font>

481
00:23:12,110 --> 00:23:17,389
angular<font color="#E5E5E5"> framework or we mitigated it in</font>

482
00:23:15,320 --> 00:23:20,060
<font color="#CCCCCC">the in the code</font><font color="#E5E5E5"> of the angular framework</font>

483
00:23:17,390 --> 00:23:24,860
in I<font color="#CCCCCC"> believe version one point five</font>

484
00:23:20,060 --> 00:23:27,110
<font color="#CCCCCC">point nine so for a complicated reason</font>

485
00:23:24,860 --> 00:23:30,110
that I<font color="#E5E5E5"> want delve into this was only</font>

486
00:23:27,110 --> 00:23:32,389
relevant<font color="#E5E5E5"> for the hidden input and so we</font>

487
00:23:30,110 --> 00:23:35,719
have a special<font color="#E5E5E5"> case for interpolating</font>

488
00:23:32,390 --> 00:23:40,060
<font color="#CCCCCC">into</font><font color="#E5E5E5"> hidden input values now another</font>

489
00:23:35,720 --> 00:23:43,970
<font color="#E5E5E5">kind of bug a double interpolation so</font>

490
00:23:40,060 --> 00:23:50,030
what happens is again<font color="#E5E5E5"> we have some data</font>

491
00:23:43,970 --> 00:23:52,700
<font color="#E5E5E5">in the interim</font><font color="#CCCCCC"> that gets interpreted as</font>

492
00:23:50,030 --> 00:23:54,560
a template<font color="#E5E5E5"> and then the template gets</font>

493
00:23:52,700 --> 00:23:56,360
interpolated<font color="#CCCCCC"> with user data</font><font color="#E5E5E5"> in a safe</font>

494
00:23:54,560 --> 00:23:58,610
way<font color="#E5E5E5"> there's some</font><font color="#CCCCCC"> bobby</font><font color="#E5E5E5"> tables</font>

495
00:23:56,360 --> 00:24:02,169
expressions<font color="#E5E5E5"> resulting from it but they</font>

496
00:23:58,610 --> 00:24:02,169
are just<font color="#E5E5E5"> strings nothing bad but</font>

497
00:24:04,930 --> 00:24:09,350
application<font color="#E5E5E5"> code either directly or via</font>

498
00:24:07,400 --> 00:24:12,170
some library then takes the data from

499
00:24:09,350 --> 00:24:14,419
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Dom then tries to in tries to</font>

500
00:24:12,170 --> 00:24:17,510
<font color="#E5E5E5">interpret it again as a template or as</font>

501
00:24:14,420 --> 00:24:20,630
an expression and interpolate it again

502
00:24:17,510 --> 00:24:22,550
or evaluated again creating XSS because

503
00:24:20,630 --> 00:24:24,290
now the<font color="#CCCCCC"> bobby tables is no longer a</font>

504
00:24:22,550 --> 00:24:29,419
string it's a template or in this

505
00:24:24,290 --> 00:24:33,790
<font color="#E5E5E5">particular case an expression an example</font>

506
00:24:29,420 --> 00:24:36,380
back reported to us by<font color="#CCCCCC"> Oren happy</font><font color="#E5E5E5"> what</font>

507
00:24:33,790 --> 00:24:39,020
look like<font color="#E5E5E5"> this or the</font><font color="#CCCCCC"> reproductions</font>

508
00:24:36,380 --> 00:24:41,660
<font color="#CCCCCC">texts</font><font color="#E5E5E5"> that look like this so</font><font color="#CCCCCC"> we'd also</font>

509
00:24:39,020 --> 00:24:44,570
do some<font color="#E5E5E5"> data studio application you</font>

510
00:24:41,660 --> 00:24:48,440
essentially<font color="#E5E5E5"> create a new report then you</font>

511
00:24:44,570 --> 00:24:50,950
rename the report<font color="#E5E5E5"> into and the name was</font>

512
00:24:48,440 --> 00:24:54,310
essentially an angular expression

513
00:24:50,950 --> 00:24:56,080
here as<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> this is a very</font>

514
00:24:54,310 --> 00:24:59,530
<font color="#E5E5E5">benign expression like it's just</font>

515
00:24:56,080 --> 00:25:01,330
<font color="#E5E5E5">arithmetic right it doesn't technically</font>

516
00:24:59,530 --> 00:25:05,710
cause<font color="#CCCCCC"> exercise right</font><font color="#E5E5E5"> this is not an</font>

517
00:25:01,330 --> 00:25:08,620
exercise payload<font color="#E5E5E5"> and the way that we</font>

518
00:25:05,710 --> 00:25:10,930
verify that<font color="#E5E5E5"> this expression was</font>

519
00:25:08,620 --> 00:25:12,909
evaluated is just simply looking at<font color="#CCCCCC"> the</font>

520
00:25:10,930 --> 00:25:15,760
inspect element<font color="#CCCCCC"> and checking that the</font>

521
00:25:12,910 --> 00:25:17,800
<font color="#E5E5E5">666 value is in the zone somewhere and</font>

522
00:25:15,760 --> 00:25:19,900
<font color="#E5E5E5">this is all we need we don't really we</font>

523
00:25:17,800 --> 00:25:23,770
<font color="#CCCCCC">don't need always to</font><font color="#E5E5E5"> see the alert to</font>

524
00:25:19,900 --> 00:25:27,010
make sure<font color="#E5E5E5"> that there is an</font><font color="#CCCCCC"> XSS here so</font>

525
00:25:23,770 --> 00:25:29,200
we did reproduce it<font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> yes there</font>

526
00:25:27,010 --> 00:25:33,580
was an interpolation or<font color="#CCCCCC"> a double</font>

527
00:25:29,200 --> 00:25:34,900
interpolation<font color="#E5E5E5"> how did</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> happen so we</font>

528
00:25:33,580 --> 00:25:37,449
started investigating<font color="#E5E5E5"> and it was</font>

529
00:25:34,900 --> 00:25:40,090
<font color="#E5E5E5">actually two separate bags both of them</font>

530
00:25:37,450 --> 00:25:41,650
in not in angular or not in<font color="#E5E5E5"> this</font>

531
00:25:40,090 --> 00:25:43,810
<font color="#CCCCCC">particular application but</font><font color="#E5E5E5"> in a library</font>

532
00:25:41,650 --> 00:25:46,240
<font color="#CCCCCC">a very popular library</font><font color="#E5E5E5"> angularjs</font>

533
00:25:43,810 --> 00:25:48,909
material which is essentially a UI

534
00:25:46,240 --> 00:25:51,790
<font color="#CCCCCC">component framework for angular so we</font>

535
00:25:48,910 --> 00:25:53,380
patched both of the vulnerabilities how

536
00:25:51,790 --> 00:25:55,960
does<font color="#E5E5E5"> it look in a code well it's not</font>

537
00:25:53,380 --> 00:26:00,010
<font color="#E5E5E5">really obvious</font><font color="#CCCCCC"> well you have some call</font>

538
00:25:55,960 --> 00:26:02,170
<font color="#E5E5E5">to</font><font color="#CCCCCC"> dollar interpolate and if if</font><font color="#E5E5E5"> you call</font>

539
00:26:00,010 --> 00:26:04,629
it in this particular<font color="#E5E5E5"> case if this is</font>

540
00:26:02,170 --> 00:26:06,760
user control or well actually<font color="#E5E5E5"> sorry the</font>

541
00:26:04,630 --> 00:26:07,450
first parameter<font color="#E5E5E5"> here if this</font><font color="#CCCCCC"> is user</font>

542
00:26:06,760 --> 00:26:11,740
control

543
00:26:07,450 --> 00:26:14,290
that's an<font color="#E5E5E5"> XSS and if you inspect like</font>

544
00:26:11,740 --> 00:26:17,350
<font color="#CCCCCC">mmm the</font><font color="#E5E5E5"> code side of this function</font><font color="#CCCCCC"> is</font>

545
00:26:14,290 --> 00:26:21,190
being called<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> the text content</font>

546
00:26:17,350 --> 00:26:24,580
of the element<font color="#E5E5E5"> which in the end or in</font>

547
00:26:21,190 --> 00:26:26,230
<font color="#CCCCCC">the</font><font color="#E5E5E5"> beginning</font><font color="#CCCCCC"> actually contains</font><font color="#E5E5E5"> already</font>

548
00:26:24,580 --> 00:26:28,510
the result of the evaluation<font color="#CCCCCC"> of the</font>

549
00:26:26,230 --> 00:26:30,520
template<font color="#E5E5E5"> so in the end in the Dom you</font>

550
00:26:28,510 --> 00:26:32,770
could see<font color="#E5E5E5"> something like that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> href</font>

551
00:26:30,520 --> 00:26:35,050
equals an expression and<font color="#CCCCCC"> aria-label</font>

552
00:26:32,770 --> 00:26:39,790
which<font color="#E5E5E5"> is you know a result of this</font>

553
00:26:35,050 --> 00:26:43,840
function<font color="#E5E5E5"> was an evaluation of the of the</font>

554
00:26:39,790 --> 00:26:46,960
expression this was patched in a way

555
00:26:43,840 --> 00:26:50,590
that<font color="#CCCCCC"> may be not</font><font color="#E5E5E5"> very efficient to</font>

556
00:26:46,960 --> 00:26:52,720
analyze right here but you could<font color="#E5E5E5"> at</font>

557
00:26:50,590 --> 00:26:59,010
<font color="#CCCCCC">least see from the comment that the bug</font>

558
00:26:52,720 --> 00:27:03,070
<font color="#E5E5E5">is fixed</font><font color="#CCCCCC"> there was the second bug the</font>

559
00:26:59,010 --> 00:27:05,830
very similar<font color="#E5E5E5"> root cause part in</font>

560
00:27:03,070 --> 00:27:11,379
<font color="#E5E5E5">different way so before what happened is</font>

561
00:27:05,830 --> 00:27:15,179
the content was taken directly<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font>

562
00:27:11,380 --> 00:27:18,820
<font color="#E5E5E5">Dom so it was an HTML content of our</font>

563
00:27:15,180 --> 00:27:21,160
<font color="#CCCCCC">HTML texts</font><font color="#E5E5E5"> inner HTML of</font><font color="#CCCCCC"> an element</font>

564
00:27:18,820 --> 00:27:24,399
let's say like that and later on it was

565
00:27:21,160 --> 00:27:25,420
being assigned to<font color="#E5E5E5"> a template value</font><font color="#CCCCCC"> which</font>

566
00:27:24,400 --> 00:27:27,490
obviously<font color="#E5E5E5"> causes the double</font>

567
00:27:25,420 --> 00:27:28,780
interpolation<font color="#E5E5E5"> it got replaced with a</font>

568
00:27:27,490 --> 00:27:30,580
Content element which is<font color="#E5E5E5"> something</font>

569
00:27:28,780 --> 00:27:34,600
<font color="#E5E5E5">specific</font><font color="#CCCCCC"> to the angular material</font>

570
00:27:30,580 --> 00:27:38,260
framework in the end the content element

571
00:27:34,600 --> 00:27:39,820
doesn't<font color="#CCCCCC"> get re-evaluated</font><font color="#E5E5E5"> this type of</font>

572
00:27:38,260 --> 00:27:43,270
<font color="#E5E5E5">flaw is pretty common in angular</font>

573
00:27:39,820 --> 00:27:44,649
applications or libraries<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to</font>

574
00:27:43,270 --> 00:27:47,920
find such flaws you could look for

575
00:27:44,650 --> 00:27:49,810
<font color="#E5E5E5">interpolate</font><font color="#CCCCCC"> or watch functions and try</font>

576
00:27:47,920 --> 00:27:51,280
to figure out whether they are ever

577
00:27:49,810 --> 00:27:54,700
being<font color="#E5E5E5"> called with something directly</font>

578
00:27:51,280 --> 00:27:58,629
<font color="#E5E5E5">from the Dom after the interpolation</font>

579
00:27:54,700 --> 00:28:00,640
already happened<font color="#CCCCCC"> that's it it's pretty</font>

580
00:27:58,630 --> 00:28:03,070
<font color="#CCCCCC">hard</font><font color="#E5E5E5"> to prove exploitability looking</font>

581
00:28:00,640 --> 00:28:04,840
just at the library<font color="#E5E5E5"> code because some</font>

582
00:28:03,070 --> 00:28:06,760
libraries<font color="#CCCCCC"> that are not being intended to</font>

583
00:28:04,840 --> 00:28:09,270
be run on user code<font color="#CCCCCC"> right so you</font><font color="#E5E5E5"> only</font>

584
00:28:06,760 --> 00:28:13,120
supply trusted value<font color="#CCCCCC"> say from the server</font>

585
00:28:09,270 --> 00:28:16,060
so as a result<font color="#E5E5E5"> there's quite a bit of</font>

586
00:28:13,120 --> 00:28:18,570
<font color="#E5E5E5">bull debate is already</font><font color="#CCCCCC"> existing as an</font>

587
00:28:16,060 --> 00:28:21,340
example you<font color="#CCCCCC"> can just</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> bugs</font>

588
00:28:18,570 --> 00:28:25,659
<font color="#CCCCCC">that are already fixed</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> angular</font>

589
00:28:21,340 --> 00:28:27,820
material library<font color="#CCCCCC"> but we think this kind</font>

590
00:28:25,660 --> 00:28:30,040
of flow is pretty common<font color="#E5E5E5"> in angular</font>

591
00:28:27,820 --> 00:28:33,280
applications out there<font color="#CCCCCC"> not not real</font><font color="#E5E5E5"> even</font>

592
00:28:30,040 --> 00:28:39,610
like<font color="#CCCCCC"> alpha by Google but in the world</font>

593
00:28:33,280 --> 00:28:42,840
<font color="#CCCCCC">wide web</font><font color="#E5E5E5"> and sometimes we get some</font>

594
00:28:39,610 --> 00:28:45,840
<font color="#E5E5E5">really odd bugs that turn out to be</font>

595
00:28:42,840 --> 00:28:45,840
amazing

596
00:28:47,310 --> 00:28:52,389
so how do look at how<font color="#E5E5E5"> we'll do those</font>

597
00:28:50,050 --> 00:28:56,919
usually look like<font color="#E5E5E5"> well I have one</font>

598
00:28:52,390 --> 00:29:01,570
<font color="#E5E5E5">example so</font><font color="#CCCCCC"> this was reported</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> runs</font><font color="#E5E5E5"> at</font>

599
00:28:56,920 --> 00:29:06,640
<font color="#E5E5E5">600 um we just got this</font><font color="#CCCCCC"> URL and if you</font>

600
00:29:01,570 --> 00:29:09,159
click<font color="#E5E5E5"> this URL it alerts</font><font color="#CCCCCC"> I mean we can</font>

601
00:29:06,640 --> 00:29:11,860
see the alert<font color="#CCCCCC"> yeah we kind of understand</font>

602
00:29:09,160 --> 00:29:12,160
<font color="#CCCCCC">that part</font><font color="#E5E5E5"> but at the very beginning</font>

603
00:29:11,860 --> 00:29:13,959
we're

604
00:29:12,160 --> 00:29:18,550
kind of<font color="#CCCCCC"> stamp</font><font color="#E5E5E5"> like what is actually</font>

605
00:29:13,960 --> 00:29:20,590
happening<font color="#CCCCCC"> here so let's work</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> us we</font>

606
00:29:18,550 --> 00:29:23,740
have a<font color="#E5E5E5"> couple of issues in the</font><font color="#CCCCCC"> world</font>

607
00:29:20,590 --> 00:29:25,870
this URL the first issue is like what

608
00:29:23,740 --> 00:29:29,190
<font color="#E5E5E5">are those slashes here at beginning like</font>

609
00:29:25,870 --> 00:29:34,290
why do<font color="#E5E5E5"> you need them second of all</font>

610
00:29:29,190 --> 00:29:37,240
there's this<font color="#CCCCCC"> Engel /</font><font color="#E5E5E5"> something large</font>

611
00:29:34,290 --> 00:29:40,720
<font color="#CCCCCC">usually this contains</font><font color="#E5E5E5"> like the locally</font>

612
00:29:37,240 --> 00:29:43,270
<font color="#E5E5E5">code so it's in</font><font color="#CCCCCC"> two /e and - US or</font>

613
00:29:40,720 --> 00:29:45,430
something<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is kind of</font><font color="#CCCCCC"> suspicions</font>

614
00:29:43,270 --> 00:29:47,410
we use suspicious we have some sort<font color="#E5E5E5"> of</font>

615
00:29:45,430 --> 00:29:51,040
injection here or some sort<font color="#E5E5E5"> of parameter</font>

616
00:29:47,410 --> 00:29:54,070
tampering the red part is<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> obvious</font>

617
00:29:51,040 --> 00:29:55,750
this is<font color="#CCCCCC"> December's escape so this is the</font>

618
00:29:54,070 --> 00:30:00,100
in angular expressions that will well

619
00:29:55,750 --> 00:30:04,780
alert and the last part of<font color="#E5E5E5"> the URL</font><font color="#CCCCCC"> well</font>

620
00:30:00,100 --> 00:30:07,510
this is<font color="#CCCCCC"> actually one</font><font color="#E5E5E5"> of the URLs of an</font>

621
00:30:04,780 --> 00:30:10,180
<font color="#E5E5E5">angular application so maybe let's start</font>

622
00:30:07,510 --> 00:30:13,750
with with<font color="#E5E5E5"> that part so let's</font><font color="#CCCCCC"> look at</font>

623
00:30:10,180 --> 00:30:18,880
this<font color="#E5E5E5"> solutions that HTML file</font><font color="#CCCCCC"> and this</font>

624
00:30:13,750 --> 00:30:22,840
<font color="#E5E5E5">is being loaded for from this URL and in</font>

625
00:30:18,880 --> 00:30:31,000
the server response we have a div with

626
00:30:22,840 --> 00:30:33,459
<font color="#E5E5E5">an NG include value and</font><font color="#CCCCCC"> ng-include</font><font color="#E5E5E5"> is a</font>

627
00:30:31,000 --> 00:30:35,830
directive that<font color="#E5E5E5"> basically tells</font><font color="#CCCCCC"> the</font>

628
00:30:33,460 --> 00:30:40,930
angular to go fetch this template and

629
00:30:35,830 --> 00:30:44,050
include it as you can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here we have</font>

630
00:30:40,930 --> 00:30:46,870
some relative<font color="#CCCCCC"> path to the template so</font>

631
00:30:44,050 --> 00:30:50,230
what angular should do is it should<font color="#E5E5E5"> load</font>

632
00:30:46,870 --> 00:30:52,209
um it should resolve this relative URL

633
00:30:50,230 --> 00:30:55,000
against like let's say the base URL<font color="#E5E5E5"> of</font>

634
00:30:52,210 --> 00:30:58,720
the application<font color="#E5E5E5"> so the solutions the</font>

635
00:30:55,000 --> 00:31:00,520
current the<font color="#E5E5E5"> current URL so it should</font>

636
00:30:58,720 --> 00:31:02,560
load<font color="#E5E5E5"> something from slash slash into</font><font color="#CCCCCC"> the</font>

637
00:31:00,520 --> 00:31:04,629
slash four slash work slash contact<font color="#CCCCCC"> form</font>

638
00:31:02,560 --> 00:31:08,379
<font color="#CCCCCC">/ Road this would be the resulting URL</font>

639
00:31:04,630 --> 00:31:10,840
however what we saw is it loads from a

640
00:31:08,380 --> 00:31:13,150
different<font color="#E5E5E5"> directory it totally removed</font>

641
00:31:10,840 --> 00:31:17,110
this<font color="#E5E5E5"> slash slash</font><font color="#CCCCCC"> int'l part for some</font>

642
00:31:13,150 --> 00:31:19,660
reason so to<font color="#CCCCCC"> simplify this a little</font><font color="#E5E5E5"> bit</font>

643
00:31:17,110 --> 00:31:22,629
instead of loading food bar slash slash

644
00:31:19,660 --> 00:31:25,060
slash a slash<font color="#E5E5E5"> mr. C or the loader was</font>

645
00:31:22,630 --> 00:31:29,500
for the bar slash<font color="#CCCCCC"> B</font>

646
00:31:25,060 --> 00:31:32,649
see which kind of gave us an idea<font color="#CCCCCC"> of</font>

647
00:31:29,500 --> 00:31:35,410
where<font color="#CCCCCC"> to look for the vulnerability so</font>

648
00:31:32,650 --> 00:31:37,680
the way the angular does URL passing

649
00:31:35,410 --> 00:31:40,840
especially like for example<font color="#E5E5E5"> for</font>

650
00:31:37,680 --> 00:31:44,140
resolving<font color="#E5E5E5"> the URL of the templates to</font>

651
00:31:40,840 --> 00:31:46,600
include<font color="#CCCCCC"> it with</font><font color="#E5E5E5"> this function</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

652
00:31:44,140 --> 00:31:48,610
have the pass up<font color="#E5E5E5"> URL function that gets</font>

653
00:31:46,600 --> 00:31:51,310
passed essentially a relative URL<font color="#E5E5E5"> to</font>

654
00:31:48,610 --> 00:31:53,080
resolve and then the location<font color="#CCCCCC"> object</font>

655
00:31:51,310 --> 00:31:55,270
which is well let's say it's a wrapper

656
00:31:53,080 --> 00:31:58,990
over location at the native location for

657
00:31:55,270 --> 00:32:01,300
the for the document<font color="#CCCCCC"> what it does is the</font>

658
00:31:58,990 --> 00:32:03,060
first couple of<font color="#E5E5E5"> lines basically</font><font color="#CCCCCC"> assure</font>

659
00:32:01,300 --> 00:32:06,370
that<font color="#E5E5E5"> the URL starts with a slash</font>

660
00:32:03,060 --> 00:32:10,389
<font color="#E5E5E5">prepending it if it's not and the second</font>

661
00:32:06,370 --> 00:32:13,300
the last<font color="#E5E5E5"> line is called the URL equals</font>

662
00:32:10,390 --> 00:32:17,710
<font color="#E5E5E5">the URL resolve function which</font><font color="#CCCCCC"> basically</font>

663
00:32:13,300 --> 00:32:20,740
creates an anchor element<font color="#CCCCCC"> puts</font><font color="#E5E5E5"> its</font><font color="#CCCCCC"> hf</font>

664
00:32:17,710 --> 00:32:22,720
value or sets its<font color="#CCCCCC"> h of value to the to</font>

665
00:32:20,740 --> 00:32:25,120
the parameter<font color="#E5E5E5"> to the relative URL and</font>

666
00:32:22,720 --> 00:32:30,240
then<font color="#E5E5E5"> extract</font><font color="#CCCCCC"> the puppy information the</font>

667
00:32:25,120 --> 00:32:30,239
query information<font color="#E5E5E5"> from the resulting</font>

668
00:32:31,470 --> 00:32:36,010
anchor element so essentially<font color="#E5E5E5"> the</font>

669
00:32:34,180 --> 00:32:37,960
browser does the heavy lifting<font color="#CCCCCC"> of</font>

670
00:32:36,010 --> 00:32:40,090
parsing URL which is<font color="#E5E5E5"> actually the</font>

671
00:32:37,960 --> 00:32:44,140
correct way you should<font color="#E5E5E5"> ever pass euros</font>

672
00:32:40,090 --> 00:32:49,510
in a client-side application so what was

673
00:32:44,140 --> 00:32:52,510
the<font color="#CCCCCC"> flaw well in our</font><font color="#E5E5E5"> case this function</font>

674
00:32:49,510 --> 00:32:55,270
<font color="#E5E5E5">was called with /</font><font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> / b / c the</font>

675
00:32:52,510 --> 00:32:58,840
the<font color="#CCCCCC"> host name</font><font color="#E5E5E5"> together</font><font color="#CCCCCC"> with what the</font>

676
00:32:55,270 --> 00:33:02,250
first<font color="#E5E5E5"> slash was removed by because it</font>

677
00:32:58,840 --> 00:33:04,300
was simply<font color="#E5E5E5"> the base URL so</font><font color="#CCCCCC"> they just</font>

678
00:33:02,250 --> 00:33:08,650
remove<font color="#E5E5E5"> it from the</font><font color="#CCCCCC"> beginning of the of</font>

679
00:33:04,300 --> 00:33:10,270
the URL<font color="#CCCCCC"> so the first couple of lines</font><font color="#E5E5E5"> did</font>

680
00:33:08,650 --> 00:33:13,630
nothing because<font color="#CCCCCC"> it</font><font color="#E5E5E5"> already starts with a</font>

681
00:33:10,270 --> 00:33:16,030
<font color="#CCCCCC">/ slash and then the yeren result</font>

682
00:33:13,630 --> 00:33:22,060
function was called with<font color="#CCCCCC"> / / a plus B</font>

683
00:33:16,030 --> 00:33:23,830
plus C which is a protocol<font color="#E5E5E5"> relative URL</font>

684
00:33:22,060 --> 00:33:27,340
protocol relative you are at least

685
00:33:23,830 --> 00:33:30,699
essentially something<font color="#E5E5E5"> saying if I</font><font color="#CCCCCC"> were</font>

686
00:33:27,340 --> 00:33:32,949
<font color="#E5E5E5">served over HTTP then just do HTTP</font>

687
00:33:30,700 --> 00:33:35,470
<font color="#CCCCCC">column before our slashes</font><font color="#E5E5E5"> if I was</font>

688
00:33:32,950 --> 00:33:38,490
called with<font color="#CCCCCC"> HTTPS and then just do like</font>

689
00:33:35,470 --> 00:33:38,490
keep the protocol

690
00:33:39,040 --> 00:33:43,970
keep the same protocol as the main

691
00:33:41,030 --> 00:33:44,389
<font color="#CCCCCC">document but essentially process the the</font>

692
00:33:43,970 --> 00:33:47,990
further

693
00:33:44,390 --> 00:33:52,940
<font color="#E5E5E5">parts of the URL and a in this case is</font>

694
00:33:47,990 --> 00:33:54,920
the<font color="#CCCCCC"> hostname the</font><font color="#E5E5E5"> application</font><font color="#CCCCCC"> the angular</font>

695
00:33:52,940 --> 00:33:56,720
application the URL result function

696
00:33:54,920 --> 00:34:01,960
specific ignored the<font color="#CCCCCC"> hostname</font><font color="#E5E5E5"> because it</font>

697
00:33:56,720 --> 00:34:05,440
<font color="#E5E5E5">was meant</font><font color="#CCCCCC"> to only</font><font color="#E5E5E5"> resolve or to</font><font color="#CCCCCC"> only</font>

698
00:34:01,960 --> 00:34:08,240
know about the path components of<font color="#CCCCCC"> that</font>

699
00:34:05,440 --> 00:34:10,970
in this case<font color="#E5E5E5"> templates to include right</font>

700
00:34:08,239 --> 00:34:18,830
so we kind of understand why a was

701
00:34:10,969 --> 00:34:21,949
skipped so we have this part<font color="#CCCCCC"> figured out</font>

702
00:34:18,830 --> 00:34:26,540
<font color="#E5E5E5">so this particular</font><font color="#CCCCCC"> vulnerability is kind</font>

703
00:34:21,949 --> 00:34:30,949
<font color="#E5E5E5">of similar to what Scarface</font><font color="#CCCCCC"> talks</font><font color="#E5E5E5"> about</font>

704
00:34:26,540 --> 00:34:32,540
in his logic<font color="#CCCCCC"> buffer</font><font color="#E5E5E5"> right research so</font>

705
00:34:30,949 --> 00:34:34,909
what we know so far is<font color="#E5E5E5"> the triple</font>

706
00:34:32,540 --> 00:34:37,790
<font color="#CCCCCC">slashes causes angular to pass</font><font color="#E5E5E5"> protocol</font>

707
00:34:34,909 --> 00:34:40,219
relative URLs<font color="#E5E5E5"> and one of the directories</font>

708
00:34:37,790 --> 00:34:44,330
gets<font color="#E5E5E5"> in the end strips right so the top</font>

709
00:34:40,219 --> 00:34:46,790
directory of<font color="#CCCCCC"> the URL gets gets ignored</font>

710
00:34:44,330 --> 00:34:49,790
because<font color="#CCCCCC"> it</font><font color="#E5E5E5"> becomes the</font><font color="#CCCCCC"> hosting that is</font>

711
00:34:46,790 --> 00:34:53,330
ignored it still is<font color="#CCCCCC"> not</font><font color="#E5E5E5"> enough to XSS</font>

712
00:34:49,790 --> 00:34:57,139
because in order<font color="#E5E5E5"> to exercise you have</font><font color="#CCCCCC"> to</font>

713
00:34:53,330 --> 00:34:59,330
<font color="#CCCCCC">supply a user control template</font><font color="#E5E5E5"> and what</font>

714
00:34:57,139 --> 00:35:03,920
the attacker could do with this<font color="#CCCCCC"> bug</font>

715
00:34:59,330 --> 00:35:05,090
alone was to tell the<font color="#CCCCCC"> application the</font>

716
00:35:03,920 --> 00:35:06,380
angular application to<font color="#E5E5E5"> load the</font>

717
00:35:05,090 --> 00:35:08,690
<font color="#CCCCCC">templates from</font><font color="#E5E5E5"> a different directory</font>

718
00:35:06,380 --> 00:35:15,140
essentially something<font color="#CCCCCC"> like maybe I don't</font>

719
00:35:08,690 --> 00:35:17,930
know are<font color="#CCCCCC"> possible so very limited so we</font>

720
00:35:15,140 --> 00:35:20,870
had the URL like this<font color="#E5E5E5"> like the template</font>

721
00:35:17,930 --> 00:35:23,839
that<font color="#E5E5E5"> was loaded</font><font color="#CCCCCC"> was google.com slash</font>

722
00:35:20,870 --> 00:35:29,020
images<font color="#CCCCCC"> semicolon some sandbox escape and</font>

723
00:35:23,840 --> 00:35:29,020
some slash and something<font color="#E5E5E5"> some suffix</font>

724
00:35:29,730 --> 00:35:34,530
our servers<font color="#E5E5E5"> are configured</font><font color="#CCCCCC"> like that</font>

725
00:35:32,520 --> 00:35:36,780
<font color="#E5E5E5">that we have a lot of URL</font><font color="#CCCCCC"> matches</font>

726
00:35:34,530 --> 00:35:40,290
essentially and this part in this

727
00:35:36,780 --> 00:35:44,640
particular URL<font color="#CCCCCC"> matter</font><font color="#E5E5E5"> the semicolon was</font>

728
00:35:40,290 --> 00:35:47,009
a<font color="#E5E5E5"> path separator so the server when you</font>

729
00:35:44,640 --> 00:35:49,410
know when the client requests<font color="#E5E5E5"> such a URL</font>

730
00:35:47,010 --> 00:35:50,910
<font color="#E5E5E5">the server decided well let's probably</font>

731
00:35:49,410 --> 00:35:55,140
<font color="#E5E5E5">Google</font><font color="#CCCCCC"> Images application</font><font color="#E5E5E5"> because it's</font>

732
00:35:50,910 --> 00:35:57,629
like google.com<font color="#E5E5E5"> slash images slash so</font>

733
00:35:55,140 --> 00:36:00,509
similar<font color="#CCCCCC"> to how I know</font><font color="#E5E5E5"> Apache and PHP</font>

734
00:35:57,630 --> 00:36:02,880
work if you have like image PHP so

735
00:36:00,510 --> 00:36:07,079
there's<font color="#E5E5E5"> something like image PHP gets</font>

736
00:36:02,880 --> 00:36:10,770
<font color="#E5E5E5">get served instead so the content after</font>

737
00:36:07,079 --> 00:36:12,930
<font color="#CCCCCC">some icon or something cloud and what</font>

738
00:36:10,770 --> 00:36:14,579
happens in the google.com slash<font color="#E5E5E5"> images</font>

739
00:36:12,930 --> 00:36:17,160
application it's a regular not even

740
00:36:14,579 --> 00:36:19,470
angular application at<font color="#E5E5E5"> all the only</font>

741
00:36:17,160 --> 00:36:24,348
<font color="#CCCCCC">thing it does that is</font><font color="#E5E5E5"> relevant for this</font>

742
00:36:19,470 --> 00:36:28,669
attack<font color="#E5E5E5"> is in one</font><font color="#CCCCCC"> of its input elements</font>

743
00:36:24,349 --> 00:36:32,069
its outputs correctly encoded so<font color="#CCCCCC"> no XSS</font>

744
00:36:28,670 --> 00:36:37,309
its own location<font color="#E5E5E5"> which we think is</font>

745
00:36:32,069 --> 00:36:40,369
<font color="#E5E5E5">pretty common</font><font color="#CCCCCC"> for web applications so</font>

746
00:36:37,309 --> 00:36:44,910
<font color="#CCCCCC">unfortunately because of this bug chain</font>

747
00:36:40,369 --> 00:36:48,960
this non angular<font color="#CCCCCC"> webpage was loaded and</font>

748
00:36:44,910 --> 00:36:55,160
included as an angular template<font color="#E5E5E5"> that</font><font color="#CCCCCC"> had</font>

749
00:36:48,960 --> 00:36:57,630
its own URL encoded inside and this URL

750
00:36:55,160 --> 00:37:02,839
consisted of a<font color="#E5E5E5"> sample escape so this was</font>

751
00:36:57,630 --> 00:37:05,160
a<font color="#CCCCCC"> sample</font><font color="#E5E5E5"> escape causing XSS in our</font>

752
00:37:02,839 --> 00:37:08,849
solutions of<font color="#E5E5E5"> the HTML application</font><font color="#CCCCCC"> let's</font>

753
00:37:05,160 --> 00:37:11,848
<font color="#E5E5E5">say so what caused this</font><font color="#CCCCCC"> particular</font>

754
00:37:08,849 --> 00:37:13,920
exercise first<font color="#E5E5E5"> of all there was a clear</font>

755
00:37:11,849 --> 00:37:16,069
URL<font color="#E5E5E5"> parsing issue in angular</font><font color="#CCCCCC"> that needed</font>

756
00:37:13,920 --> 00:37:20,880
<font color="#CCCCCC">to be fixed</font>

757
00:37:16,069 --> 00:37:24,150
second of all we have this ambiguous URL

758
00:37:20,880 --> 00:37:27,809
matches<font color="#CCCCCC"> which we</font><font color="#E5E5E5"> think is not really</font>

759
00:37:24,150 --> 00:37:30,690
<font color="#CCCCCC">let's</font><font color="#E5E5E5"> say</font><font color="#CCCCCC"> Google</font><font color="#E5E5E5"> specific probably a lot</font>

760
00:37:27,809 --> 00:37:32,880
<font color="#CCCCCC">of</font><font color="#E5E5E5"> other companies a lot of web</font>

761
00:37:30,690 --> 00:37:35,040
applications out there<font color="#E5E5E5"> HTTP servers out</font>

762
00:37:32,880 --> 00:37:38,549
<font color="#E5E5E5">there do have</font><font color="#CCCCCC"> something similar</font><font color="#E5E5E5"> like</font>

763
00:37:35,040 --> 00:37:40,350
ambiguous your URL passing is not really

764
00:37:38,549 --> 00:37:45,980
that<font color="#CCCCCC"> exotic</font>

765
00:37:40,350 --> 00:37:48,060
and of course in order to be<font color="#E5E5E5"> vulnerable</font>

766
00:37:45,980 --> 00:37:51,300
<font color="#CCCCCC">this particular application</font><font color="#E5E5E5"> the</font>

767
00:37:48,060 --> 00:37:53,279
solutions HTML file<font color="#E5E5E5"> needed to even use</font>

768
00:37:51,300 --> 00:37:57,650
the ng-include feature and load the

769
00:37:53,280 --> 00:38:00,810
templates<font color="#E5E5E5"> at runtime to evaluate them</font>

770
00:37:57,650 --> 00:38:04,530
<font color="#CCCCCC">additional thing</font><font color="#E5E5E5"> that was required for</font>

771
00:38:00,810 --> 00:38:06,720
<font color="#CCCCCC">to to exploit this was a reflection in</font>

772
00:38:04,530 --> 00:38:08,820
several responses and actually we

773
00:38:06,720 --> 00:38:11,899
considered<font color="#E5E5E5"> that particular part pretty</font>

774
00:38:08,820 --> 00:38:16,560
<font color="#E5E5E5">Universal like I can't</font><font color="#CCCCCC"> imagine any on</font>

775
00:38:11,900 --> 00:38:22,200
working HTML application that does not

776
00:38:16,560 --> 00:38:27,450
reflect user data<font color="#E5E5E5"> somewhere so how did</font>

777
00:38:22,200 --> 00:38:29,520
<font color="#CCCCCC">we fix this</font><font color="#E5E5E5"> well first of all we needed</font>

778
00:38:27,450 --> 00:38:31,680
a<font color="#CCCCCC"> stopgap right</font><font color="#E5E5E5"> there's an exercise</font><font color="#CCCCCC"> some</font>

779
00:38:29,520 --> 00:38:34,140
<font color="#E5E5E5">dub-dub-dub google.com that's a serious</font>

780
00:38:31,680 --> 00:38:36,839
<font color="#E5E5E5">issue we need to fix it as</font><font color="#CCCCCC"> fast</font><font color="#E5E5E5"> as</font>

781
00:38:34,140 --> 00:38:40,049
<font color="#E5E5E5">possible so we</font><font color="#CCCCCC"> hardened some URL</font>

782
00:38:36,840 --> 00:38:44,940
mappings<font color="#CCCCCC"> so for example as a</font><font color="#E5E5E5"> result of</font>

783
00:38:40,050 --> 00:38:47,190
this the<font color="#CCCCCC"> into value or the local</font>

784
00:38:44,940 --> 00:38:50,370
ecologies not now much more restrictive

785
00:38:47,190 --> 00:38:52,320
previously what was possible is<font color="#CCCCCC"> to even</font>

786
00:38:50,370 --> 00:38:56,299
<font color="#E5E5E5">include the</font><font color="#CCCCCC"> armory angular sandbox</font>

787
00:38:52,320 --> 00:38:59,040
escape inside<font color="#E5E5E5"> it's no longer possible</font>

788
00:38:56,300 --> 00:39:00,930
second of all we needed<font color="#E5E5E5"> to fix this URL</font>

789
00:38:59,040 --> 00:39:03,390
passing<font color="#E5E5E5"> back which we did again in</font>

790
00:39:00,930 --> 00:39:06,210
version one point<font color="#E5E5E5"> five point nine you</font>

791
00:39:03,390 --> 00:39:09,839
<font color="#E5E5E5">can look at the pull request essentially</font>

792
00:39:06,210 --> 00:39:11,700
we<font color="#CCCCCC"> just throw if if the relative</font><font color="#E5E5E5"> path</font>

793
00:39:09,840 --> 00:39:13,170
starts with a<font color="#E5E5E5"> double slash or double</font>

794
00:39:11,700 --> 00:39:15,419
backslash or a combination<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those</font>

795
00:39:13,170 --> 00:39:17,370
because obviously<font color="#E5E5E5"> we also did variant</font>

796
00:39:15,420 --> 00:39:23,010
analysis and you could bypass the very

797
00:39:17,370 --> 00:39:27,060
first<font color="#E5E5E5"> fix with a blue back slashes but</font>

798
00:39:23,010 --> 00:39:31,590
this<font color="#E5E5E5"> speaks only made it to again</font><font color="#CCCCCC"> one</font>

799
00:39:27,060 --> 00:39:34,680
point five<font color="#E5E5E5"> point nine whereas we have a</font>

800
00:39:31,590 --> 00:39:37,380
lot of<font color="#CCCCCC"> pages that</font><font color="#E5E5E5"> use the older</font><font color="#CCCCCC"> version</font>

801
00:39:34,680 --> 00:39:41,430
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> angular so it has to trigger a</font>

802
00:39:37,380 --> 00:39:43,740
<font color="#E5E5E5">remediation project that cost the</font>

803
00:39:41,430 --> 00:39:46,589
upgrade of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> angular framework</font><font color="#CCCCCC"> Google</font>

804
00:39:43,740 --> 00:39:51,779
<font color="#CCCCCC">white list</font><font color="#E5E5E5"> let me just say this was</font><font color="#CCCCCC"> not</font>

805
00:39:46,590 --> 00:39:53,310
trivial<font color="#CCCCCC"> and it's not a</font><font color="#E5E5E5"> simple matter of</font>

806
00:39:51,780 --> 00:39:56,340
<font color="#E5E5E5">even</font><font color="#CCCCCC"> hop fixing something</font>

807
00:39:53,310 --> 00:39:59,100
or you know<font color="#E5E5E5"> changing the values at the</font>

808
00:39:56,340 --> 00:40:00,960
<font color="#CCCCCC">CDN because those applications served or</font>

809
00:39:59,100 --> 00:40:04,620
used the angular from the CDN version so

810
00:40:00,960 --> 00:40:07,920
we cannot like replace code at the CDN

811
00:40:04,620 --> 00:40:09,509
<font color="#E5E5E5">at the same URL</font><font color="#CCCCCC"> right first</font><font color="#E5E5E5"> like a new</font>

812
00:40:07,920 --> 00:40:12,540
angular release and every new angular

813
00:40:09,510 --> 00:40:13,920
release requires a QA because your

814
00:40:12,540 --> 00:40:16,470
<font color="#E5E5E5">application simply might break if</font><font color="#CCCCCC"> you</font>

815
00:40:13,920 --> 00:40:23,160
change<font color="#E5E5E5"> your dependency versions so this</font>

816
00:40:16,470 --> 00:40:25,169
was not<font color="#CCCCCC"> trivial thankfully for our let's</font>

817
00:40:23,160 --> 00:40:27,600
say core applications or our most of our

818
00:40:25,170 --> 00:40:29,850
<font color="#E5E5E5">applications we have a way</font><font color="#CCCCCC"> of enforcing</font>

819
00:40:27,600 --> 00:40:34,470
<font color="#CCCCCC">that</font><font color="#E5E5E5"> all templates are compiled</font>

820
00:40:29,850 --> 00:40:38,819
statically<font color="#E5E5E5"> at deploy time let's say so</font>

821
00:40:34,470 --> 00:40:42,359
no<font color="#E5E5E5"> applicator few applications are even</font>

822
00:40:38,820 --> 00:40:44,730
able<font color="#CCCCCC"> to dynamically include</font><font color="#E5E5E5"> code or</font>

823
00:40:42,360 --> 00:40:47,580
dynamically include angular templates by

824
00:40:44,730 --> 00:40:49,410
just you know sending xhr<font color="#E5E5E5"> and evaluating</font>

825
00:40:47,580 --> 00:40:52,200
the things<font color="#E5E5E5"> there is an additional layer</font>

826
00:40:49,410 --> 00:40:53,730
<font color="#E5E5E5">that that we actually bundle all the</font>

827
00:40:52,200 --> 00:40:57,359
templates<font color="#E5E5E5"> together with the application</font>

828
00:40:53,730 --> 00:40:59,250
code<font color="#E5E5E5"> so this is all part of the</font>

829
00:40:57,360 --> 00:41:01,470
essentially<font color="#CCCCCC"> javascript file</font>

830
00:40:59,250 --> 00:41:05,220
so whenever angular<font color="#E5E5E5"> makes a request to a</font>

831
00:41:01,470 --> 00:41:06,870
template URL<font color="#E5E5E5"> we make sure that the</font>

832
00:41:05,220 --> 00:41:10,169
template<font color="#E5E5E5"> is actually already included</font>

833
00:41:06,870 --> 00:41:14,359
and it's just<font color="#E5E5E5"> a function just returns</font>

834
00:41:10,170 --> 00:41:20,700
this this constant string<font color="#CCCCCC"> at this point</font>

835
00:41:14,360 --> 00:41:23,400
summary what we<font color="#E5E5E5"> found out through</font><font color="#CCCCCC"> our</font>

836
00:41:20,700 --> 00:41:25,470
bug hunters is that angular enables

837
00:41:23,400 --> 00:41:29,310
really non-standard XSS vulnerabilities

838
00:41:25,470 --> 00:41:31,049
and unfortunately some sort of<font color="#E5E5E5"> like a</font>

839
00:41:29,310 --> 00:41:32,490
new approach or additional content

840
00:41:31,050 --> 00:41:35,250
measures must be taken into

841
00:41:32,490 --> 00:41:39,689
<font color="#E5E5E5">consideration in order</font><font color="#CCCCCC"> to not to have</font>

842
00:41:35,250 --> 00:41:43,830
exercises<font color="#E5E5E5"> so</font><font color="#CCCCCC"> XSS is nowhere near being</font>

843
00:41:39,690 --> 00:41:46,470
<font color="#E5E5E5">so a solved problem it's not again</font>

844
00:41:43,830 --> 00:41:51,960
Google specific for for the whole wide

845
00:41:46,470 --> 00:41:55,259
web the XSS is still top<font color="#E5E5E5"> one</font>

846
00:41:51,960 --> 00:41:57,420
vulnerability<font color="#CCCCCC"> I would say because the</font>

847
00:41:55,260 --> 00:41:59,040
vectors no longer resemble the simple

848
00:41:57,420 --> 00:42:01,710
script alert one

849
00:41:59,040 --> 00:42:03,720
now you can encode them in say angular

850
00:42:01,710 --> 00:42:06,170
<font color="#CCCCCC">expression so similar frameworks have</font>

851
00:42:03,720 --> 00:42:06,169
similar

852
00:42:06,180 --> 00:42:11,000
abilities some of the<font color="#CCCCCC"> vulnerabilities</font>

853
00:42:09,300 --> 00:42:13,860
are<font color="#E5E5E5"> really hard to spot in the code</font>

854
00:42:11,000 --> 00:42:16,830
<font color="#E5E5E5">especially when you are like maybe you</font>

855
00:42:13,860 --> 00:42:19,080
remember<font color="#CCCCCC"> the</font><font color="#E5E5E5"> client-side template mixing</font>

856
00:42:16,830 --> 00:42:23,700
issue<font color="#E5E5E5"> where there was this plus</font><font color="#CCCCCC"> one</font>

857
00:42:19,080 --> 00:42:25,380
widget<font color="#E5E5E5"> with that all it did</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> use</font>

858
00:42:23,700 --> 00:42:28,740
the location<font color="#CCCCCC"> native and put it somewhere</font>

859
00:42:25,380 --> 00:42:30,930
in the attribute of the Dom it's really

860
00:42:28,740 --> 00:42:36,000
hard to infer<font color="#E5E5E5"> that this can cause</font>

861
00:42:30,930 --> 00:42:38,549
<font color="#CCCCCC">problems</font><font color="#E5E5E5"> so variant</font><font color="#CCCCCC"> at root cause</font>

862
00:42:36,000 --> 00:42:41,330
analysis on top of<font color="#E5E5E5"> that helps us find</font>

863
00:42:38,550 --> 00:42:45,420
additional vectors<font color="#E5E5E5"> and actually research</font>

864
00:42:41,330 --> 00:42:48,990
<font color="#CCCCCC">the framework the libraries and fix the</font>

865
00:42:45,420 --> 00:42:51,780
problems at<font color="#CCCCCC"> the right layer</font><font color="#E5E5E5"> remediation</font>

866
00:42:48,990 --> 00:42:55,350
is sometimes hard it literally can<font color="#E5E5E5"> take</font>

867
00:42:51,780 --> 00:43:00,450
months<font color="#CCCCCC"> to update angular</font><font color="#E5E5E5"> when you have</font>

868
00:42:55,350 --> 00:43:04,470
simply a lot of<font color="#E5E5E5"> applications so that's</font>

869
00:43:00,450 --> 00:43:06,870
<font color="#E5E5E5">not a trivial</font><font color="#CCCCCC"> problem to have that said</font>

870
00:43:04,470 --> 00:43:08,730
<font color="#E5E5E5">we would rather know about the</font><font color="#CCCCCC"> flows in</font>

871
00:43:06,870 --> 00:43:11,400
our applications and<font color="#E5E5E5"> we'd rather have</font>

872
00:43:08,730 --> 00:43:13,200
the<font color="#E5E5E5"> hard job</font><font color="#CCCCCC"> we are mediating those</font><font color="#E5E5E5"> loss</font>

873
00:43:11,400 --> 00:43:18,510
rather than exposing<font color="#E5E5E5"> our users to say</font>

874
00:43:13,200 --> 00:43:21,919
XSS vulnerability<font color="#E5E5E5"> so that's that</font><font color="#CCCCCC"> our VIP</font>

875
00:43:18,510 --> 00:43:25,370
researchers are great very<font color="#CCCCCC"> course</font>

876
00:43:21,920 --> 00:43:27,630
significant amount of work<font color="#CCCCCC"> for our</font><font color="#E5E5E5"> team</font>

877
00:43:25,370 --> 00:43:30,120
<font color="#CCCCCC">but</font><font color="#E5E5E5"> this is this is the work that we</font><font color="#CCCCCC"> are</font>

878
00:43:27,630 --> 00:43:32,990
actually<font color="#E5E5E5"> happy happy about because this</font>

879
00:43:30,120 --> 00:43:36,089
one makes our users<font color="#E5E5E5"> actually safer so</font>

880
00:43:32,990 --> 00:43:40,520
keep on<font color="#E5E5E5"> researching Google products keep</font>

881
00:43:36,090 --> 00:43:44,449
on reporting vulnerabilities thank you

882
00:43:40,520 --> 00:43:44,449
[Applause]

