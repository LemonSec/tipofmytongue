1
00:00:01,040 --> 00:00:08,009
[Music]

2
00:00:11,059 --> 00:00:14,059
thank you

3
00:00:19,020 --> 00:00:20,960
better yes

4
00:00:20,960 --> 00:00:24,240
all right then all right so I think I've

5
00:00:24,240 --> 00:00:26,699
got my work cut out for me because some

6
00:00:26,699 --> 00:00:28,859
people knew at least 30 less but nobody

7
00:00:28,859 --> 00:00:31,019
thought it was insecure so let's see how

8
00:00:31,019 --> 00:00:32,460
you think about this at the end of this

9
00:00:32,460 --> 00:00:34,079
talk

10
00:00:34,079 --> 00:00:38,340
uh Reds all right let's start by taking

11
00:00:38,340 --> 00:00:40,860
a quick look at the email ecosystem so

12
00:00:40,860 --> 00:00:43,500
let's assume we have a sender Alice that

13
00:00:43,500 --> 00:00:45,120
wants to send an email

14
00:00:45,120 --> 00:00:46,559
to Bob

15
00:00:46,559 --> 00:00:48,840
both of them use the so-called mail user

16
00:00:48,840 --> 00:00:51,000
agent orange or what you would normally

17
00:00:51,000 --> 00:00:52,920
call a male client like for example

18
00:00:52,920 --> 00:00:54,660
Thunderbird

19
00:00:54,660 --> 00:00:56,879
both also have a so-called main service

20
00:00:56,879 --> 00:00:59,879
provider for example Gmail or Android

21
00:00:59,879 --> 00:01:02,520
and MSP

22
00:01:02,520 --> 00:01:04,739
now Alice wants to get their email to

23
00:01:04,739 --> 00:01:05,459
Bob

24
00:01:05,459 --> 00:01:08,100
first they will have to talk to the mail

25
00:01:08,100 --> 00:01:11,880
submission agent or the MSA so

26
00:01:11,880 --> 00:01:14,880
just an SMTP server for example in this

27
00:01:14,880 --> 00:01:18,960
case they will have to configure

28
00:01:18,960 --> 00:01:22,320
this work not really all right whatever

29
00:01:22,320 --> 00:01:25,380
they have to configure a host a port and

30
00:01:25,380 --> 00:01:26,820
an encryption mechanism in this case

31
00:01:26,820 --> 00:01:29,839
start killers

32
00:01:29,880 --> 00:01:32,100
then that will get the mail to the SMTP

33
00:01:32,100 --> 00:01:33,900
server and Bob on the other side will

34
00:01:33,900 --> 00:01:35,159
have to do the same for the mail

35
00:01:35,159 --> 00:01:38,100
delivery agent so just an IMAP or POP3

36
00:01:38,100 --> 00:01:40,560
server in this case

37
00:01:40,560 --> 00:01:43,860
then the maid reaches Bob and that is

38
00:01:43,860 --> 00:01:45,900
basically the connections we will be

39
00:01:45,900 --> 00:01:47,880
focusing on during this talk

40
00:01:47,880 --> 00:01:50,460
but I don't want to leave you hanging so

41
00:01:50,460 --> 00:01:52,320
how does the mail get from there to

42
00:01:52,320 --> 00:01:54,119
there

43
00:01:54,119 --> 00:01:56,880
we have the mail transfer agents or

44
00:01:56,880 --> 00:01:59,579
short ntas of both msps talking to each

45
00:01:59,579 --> 00:02:01,860
other some way over the internet via

46
00:02:01,860 --> 00:02:03,119
sntp

47
00:02:03,119 --> 00:02:05,640
and this is generally considered to be a

48
00:02:05,640 --> 00:02:08,639
pretty hazardous field so certificate

49
00:02:08,639 --> 00:02:12,959
validation is hard DNS is hard so that's

50
00:02:12,959 --> 00:02:14,220
why we are not talking about this

51
00:02:14,220 --> 00:02:16,739
because it's generally assumed to be at

52
00:02:16,739 --> 00:02:18,840
least somewhat insecure so we'll be

53
00:02:18,840 --> 00:02:20,879
talking about the first and the last hop

54
00:02:20,879 --> 00:02:26,099
so submission SMTP and IMAP and POP3

55
00:02:26,099 --> 00:02:29,040
however at least in our opinion the

56
00:02:29,040 --> 00:02:30,840
first and the last hops are the most

57
00:02:30,840 --> 00:02:33,660
critical ones because in this steps user

58
00:02:33,660 --> 00:02:36,300
credentials are transmitted so just a

59
00:02:36,300 --> 00:02:38,160
single insecure connection gives full

60
00:02:38,160 --> 00:02:40,800
access to the victim's mailbox with all

61
00:02:40,800 --> 00:02:42,480
catastrophic consequences you might

62
00:02:42,480 --> 00:02:44,940
imagine from that

63
00:02:44,940 --> 00:02:46,739
we therefore Define our attacker model

64
00:02:46,739 --> 00:02:48,959
as follows we assume an active metal in

65
00:02:48,959 --> 00:02:52,080
the middle that can manipulate TCP

66
00:02:52,080 --> 00:02:54,599
packets in plain text but not break TLS

67
00:02:54,599 --> 00:02:55,860
in any way

68
00:02:55,860 --> 00:03:00,019
so no actual TLS attacks here

69
00:03:00,480 --> 00:03:02,220
so let me now give you an introduction

70
00:03:02,220 --> 00:03:03,900
to starting less starting with a little

71
00:03:03,900 --> 00:03:06,720
history lesson

72
00:03:06,720 --> 00:03:10,680
demon protocols SMTP POP3 and IMAP we're

73
00:03:10,680 --> 00:03:12,959
all defined before as Valentine's very

74
00:03:12,959 --> 00:03:14,940
little thing therefore they were of

75
00:03:14,940 --> 00:03:17,159
course plain text only

76
00:03:17,159 --> 00:03:19,319
and there were plain text Parts defined

77
00:03:19,319 --> 00:03:22,019
for these protocols in the first place

78
00:03:22,019 --> 00:03:25,080
note here that the standards distinguish

79
00:03:25,080 --> 00:03:27,000
between transmitting layer from NTA to

80
00:03:27,000 --> 00:03:31,440
MTA and submitting a mail to the MSA

81
00:03:31,440 --> 00:03:35,540
so there are two parts defined for that

82
00:03:35,640 --> 00:03:37,980
with the Advent of S7 TLS

83
00:03:37,980 --> 00:03:40,620
parts were defined for implicitly less

84
00:03:40,620 --> 00:03:42,659
so just speaking the protocol over TLS

85
00:03:42,659 --> 00:03:44,519
so what you would normally see for https

86
00:03:44,519 --> 00:03:48,120
just for part 3 IMAP and sntp

87
00:03:48,120 --> 00:03:51,239
and there were new parts for that

88
00:03:51,239 --> 00:03:53,819
however it was considered to be wasteful

89
00:03:53,819 --> 00:03:55,640
to have two parts for the same protocol

90
00:03:55,640 --> 00:03:59,040
so in 1998 and 1989 the start TLS

91
00:03:59,040 --> 00:04:01,080
mechanism was defined to allow for what

92
00:04:01,080 --> 00:04:03,480
is called opportunistic encryption

93
00:04:03,480 --> 00:04:05,700
so basically the mail server and the

94
00:04:05,700 --> 00:04:07,620
mail client will negotiate tell us if

95
00:04:07,620 --> 00:04:09,180
they both support it

96
00:04:09,180 --> 00:04:12,239
to this day Wikipedia's starting this

97
00:04:12,239 --> 00:04:14,400
article redirects to the opportunistic

98
00:04:14,400 --> 00:04:17,579
TLs article so that kind of gives India

99
00:04:17,579 --> 00:04:19,320
how people think about starting less

100
00:04:19,320 --> 00:04:21,779
nowadays still

101
00:04:21,779 --> 00:04:24,540
and we on the other hand think that

102
00:04:24,540 --> 00:04:26,520
there's absolutely no reason for start

103
00:04:26,520 --> 00:04:27,960
here let's to be opportunistic in May

104
00:04:27,960 --> 00:04:29,340
clients nowadays because your mail

105
00:04:29,340 --> 00:04:30,960
server should really support you less by

106
00:04:30,960 --> 00:04:32,460
now

107
00:04:32,460 --> 00:04:36,000
so when adding status Simplicity less

108
00:04:36,000 --> 00:04:40,139
port for sntp was revoked by Diana since

109
00:04:40,139 --> 00:04:41,759
I realized the mail ecosystem and

110
00:04:41,759 --> 00:04:44,280
especially MX records do not allow for

111
00:04:44,280 --> 00:04:47,100
specifying ports sadly they also removed

112
00:04:47,100 --> 00:04:49,560
the port for submission for no apparent

113
00:04:49,560 --> 00:04:51,680
reason

114
00:04:52,500 --> 00:04:56,820
but since 2018 it's all good there was a

115
00:04:56,820 --> 00:05:00,840
RC 8314 which is aptly titled key text

116
00:05:00,840 --> 00:05:02,820
considered obsolete the implicit area

117
00:05:02,820 --> 00:05:05,100
supports are back and there are now the

118
00:05:05,100 --> 00:05:06,960
parts you should be used for you should

119
00:05:06,960 --> 00:05:09,060
be using for email and we even got an

120
00:05:09,060 --> 00:05:12,180
implicit TLS port for submission back

121
00:05:12,180 --> 00:05:15,540
snpp MTA 20a is still a mess though but

122
00:05:15,540 --> 00:05:18,240
it's being worked on by people

123
00:05:18,240 --> 00:05:20,580
so let's look at status at the example

124
00:05:20,580 --> 00:05:21,960
of sntp

125
00:05:21,960 --> 00:05:23,580
upon connecting the server Center

126
00:05:23,580 --> 00:05:25,199
greeting telling that they are

127
00:05:25,199 --> 00:05:28,199
sntp.example.org

128
00:05:29,100 --> 00:05:31,620
Alice is more will respond with an ELO

129
00:05:31,620 --> 00:05:33,240
command to which the server responds

130
00:05:33,240 --> 00:05:35,100
with their capabilities in this case

131
00:05:35,100 --> 00:05:37,500
just start TLS

132
00:05:37,500 --> 00:05:40,139
the client sends a star TLS command

133
00:05:40,139 --> 00:05:43,320
to which the server responds that I will

134
00:05:43,320 --> 00:05:45,180
do this now everything up until this

135
00:05:45,180 --> 00:05:48,780
point was basically in plain text

136
00:05:48,780 --> 00:05:50,759
now client and server will perform the

137
00:05:50,759 --> 00:05:52,380
actual TLS handshake and everything

138
00:05:52,380 --> 00:05:54,539
after it will be encrypted the client

139
00:05:54,539 --> 00:05:56,759
will again Ask for capabilities to which

140
00:05:56,759 --> 00:05:58,320
the server responds that they now

141
00:05:58,320 --> 00:06:00,919
support Authentication

142
00:06:00,919 --> 00:06:03,960
will authenticate and send the actual

143
00:06:03,960 --> 00:06:05,699
email

144
00:06:05,699 --> 00:06:08,280
but next let's talk about what started

145
00:06:08,280 --> 00:06:12,419
as dripping is a means

146
00:06:12,419 --> 00:06:14,220
assume again that we have this active

147
00:06:14,220 --> 00:06:16,020
metal in the middle that can manipulate

148
00:06:16,020 --> 00:06:19,080
TCP packets therefore they can simply

149
00:06:19,080 --> 00:06:20,940
strip the starting as capability from

150
00:06:20,940 --> 00:06:23,520
the ELO response without the server or

151
00:06:23,520 --> 00:06:25,319
the client realizing because nothing is

152
00:06:25,319 --> 00:06:27,180
okay authenticated here

153
00:06:27,180 --> 00:06:28,740
assuming that the client is really

154
00:06:28,740 --> 00:06:31,680
opportunistic they will first not send

155
00:06:31,680 --> 00:06:34,620
the start TLS command second not perform

156
00:06:34,620 --> 00:06:37,020
the handshake and third send everything

157
00:06:37,020 --> 00:06:39,300
in plain text

158
00:06:39,300 --> 00:06:40,979
this is of course pretty problematic

159
00:06:40,979 --> 00:06:43,020
because LSS user credentials and their

160
00:06:43,020 --> 00:06:44,580
email will now be transmitted in plain

161
00:06:44,580 --> 00:06:47,639
text with the attacker still listening

162
00:06:47,639 --> 00:06:49,440
of course the server could potentially

163
00:06:49,440 --> 00:06:52,139
block any commands except the start TLS

164
00:06:52,139 --> 00:06:54,060
command but nothing would prevent the

165
00:06:54,060 --> 00:06:55,500
metal element from hijacking the whole

166
00:06:55,500 --> 00:06:57,419
now unauthenticated and unencrypted

167
00:06:57,419 --> 00:07:00,960
connection and poses a legit mail server

168
00:07:00,960 --> 00:07:03,479
to the mail client

169
00:07:03,479 --> 00:07:06,479
but it of course does not stop here what

170
00:07:06,479 --> 00:07:08,160
if the attacker changes something over

171
00:07:08,160 --> 00:07:09,060
here

172
00:07:09,060 --> 00:07:11,160
like pretending the star TS command

173
00:07:11,160 --> 00:07:12,419
failed

174
00:07:12,419 --> 00:07:16,560
or over here like adding an insecure

175
00:07:16,560 --> 00:07:18,180
extension to the either response that

176
00:07:18,180 --> 00:07:20,460
Ellis might use later on

177
00:07:20,460 --> 00:07:21,660
or

178
00:07:21,660 --> 00:07:24,539
here like adding some data after the

179
00:07:24,539 --> 00:07:26,639
star Taylor's response before the

180
00:07:26,639 --> 00:07:29,160
handshake that might be interpreted like

181
00:07:29,160 --> 00:07:30,780
anywhere

182
00:07:30,780 --> 00:07:32,580
it turns out that when you start digging

183
00:07:32,580 --> 00:07:34,139
into the details you will find that

184
00:07:34,139 --> 00:07:36,000
exceptionally many issues in real world

185
00:07:36,000 --> 00:07:38,639
applications access to start Healers

186
00:07:38,639 --> 00:07:40,919
and of course it does not stop with SMTP

187
00:07:40,919 --> 00:07:43,199
this is an iMac trace the concept is

188
00:07:43,199 --> 00:07:44,759
basically the same it starts with a

189
00:07:44,759 --> 00:07:46,979
greeting they negotiate starting less

190
00:07:46,979 --> 00:07:48,960
they perform the handshake

191
00:07:48,960 --> 00:07:52,080
but what happens if an attacker changes

192
00:07:52,080 --> 00:07:54,960
something here or here or here or here

193
00:07:54,960 --> 00:07:58,259
or here or really anywhere

194
00:07:58,259 --> 00:08:00,660
all right let's slow down a bit and take

195
00:08:00,660 --> 00:08:02,580
a look at the research during our talk

196
00:08:02,580 --> 00:08:03,840
we will consider four questions

197
00:08:03,840 --> 00:08:05,580
regarding startiness

198
00:08:05,580 --> 00:08:08,460
first we wanted to find out out if

199
00:08:08,460 --> 00:08:10,080
modern clients are still opportunistic

200
00:08:10,080 --> 00:08:11,940
in their use of star TLS and we'll fall

201
00:08:11,940 --> 00:08:13,259
back to plain text if it's not available

202
00:08:13,259 --> 00:08:15,840
if that would be the case an attacker

203
00:08:15,840 --> 00:08:17,220
could simply use one of the well-known

204
00:08:17,220 --> 00:08:18,780
Star Theater stooping attacks like the

205
00:08:18,780 --> 00:08:20,300
one I've shown you before

206
00:08:20,300 --> 00:08:22,979
to force a client to send sensitive data

207
00:08:22,979 --> 00:08:24,120
in plain text

208
00:08:24,120 --> 00:08:25,800
in that case there were really not much

209
00:08:25,800 --> 00:08:27,960
to be learned here so let's assume for

210
00:08:27,960 --> 00:08:30,060
now that that is not the case

211
00:08:30,060 --> 00:08:32,520
so second we analyze what potentially

212
00:08:32,520 --> 00:08:34,140
sensitive data is exchanged in plain

213
00:08:34,140 --> 00:08:36,059
text and how clients might requested by

214
00:08:36,059 --> 00:08:38,520
exposing additional sensitive data in

215
00:08:38,520 --> 00:08:39,779
plain text

216
00:08:39,779 --> 00:08:42,179
third we looked at what data is retained

217
00:08:42,179 --> 00:08:44,219
from the plain text phase after the

218
00:08:44,219 --> 00:08:46,860
transition to TLS so nothing is

219
00:08:46,860 --> 00:08:48,600
authenticated before the TLs handshake

220
00:08:48,600 --> 00:08:50,880
and really no data should spill into the

221
00:08:50,880 --> 00:08:53,339
encrypted phase of course

222
00:08:53,339 --> 00:08:54,680
as well

223
00:08:54,680 --> 00:08:57,779
so finally we looked at what happens in

224
00:08:57,779 --> 00:09:00,180
error cases so all protocols have some

225
00:09:00,180 --> 00:09:02,399
kind of error mechanism and we wanted to

226
00:09:02,399 --> 00:09:04,500
know what happens if these errors happen

227
00:09:04,500 --> 00:09:06,600
before the TLs handshakes so an active

228
00:09:06,600 --> 00:09:09,360
metal in the middle code first errors to

229
00:09:09,360 --> 00:09:11,399
happen or just inject errors

230
00:09:11,399 --> 00:09:13,500
and we wanted to know what clients do

231
00:09:13,500 --> 00:09:15,000
with these

232
00:09:15,000 --> 00:09:17,940
all of this accumulated in using

233
00:09:17,940 --> 00:09:20,519
security 2021 paper called ytls is

234
00:09:20,519 --> 00:09:22,380
better without starting Less on which

235
00:09:22,380 --> 00:09:25,680
Damian will now give you the details

236
00:09:25,680 --> 00:09:29,279
okay thanks Fabian

237
00:09:29,279 --> 00:09:32,399
so s Fabian has motivated start LS

238
00:09:32,399 --> 00:09:34,200
leaves really a lot of room for mistakes

239
00:09:34,200 --> 00:09:36,360
but let's step back for a moment and

240
00:09:36,360 --> 00:09:38,820
explain our methodology

241
00:09:38,820 --> 00:09:41,880
what we wanted to do is to obtain a very

242
00:09:41,880 --> 00:09:43,980
Broad View on the start TLS ecosystem

243
00:09:43,980 --> 00:09:46,140
meaning that we wanted to test as many

244
00:09:46,140 --> 00:09:48,800
clients and as many servers as possible

245
00:09:48,800 --> 00:09:51,540
possibly coming from different platforms

246
00:09:51,540 --> 00:09:54,240
such as Linux Windows and Mac but also

247
00:09:54,240 --> 00:09:55,800
from mobile platforms such as Android

248
00:09:55,800 --> 00:09:57,420
and iOS

249
00:09:57,420 --> 00:09:59,459
and especially in the mobile space we

250
00:09:59,459 --> 00:10:01,740
have a very interesting platform that is

251
00:10:01,740 --> 00:10:04,860
called Cloud mail and in Cloud mail what

252
00:10:04,860 --> 00:10:06,660
an application what a mobile application

253
00:10:06,660 --> 00:10:09,899
is doing is that it does not talk with

254
00:10:09,899 --> 00:10:12,600
the email server directly but instead in

255
00:10:12,600 --> 00:10:15,480
it it instructs a third party to do the

256
00:10:15,480 --> 00:10:17,279
email communication for it for example

257
00:10:17,279 --> 00:10:18,720
via http

258
00:10:18,720 --> 00:10:20,640
so for example if any one of you is

259
00:10:20,640 --> 00:10:23,160
using Outlook or my mail on Android your

260
00:10:23,160 --> 00:10:25,260
password is basically first transmitted

261
00:10:25,260 --> 00:10:27,360
to this third-party backend which is

262
00:10:27,360 --> 00:10:28,980
will then do the email communication for

263
00:10:28,980 --> 00:10:30,000
you

264
00:10:30,000 --> 00:10:32,519
however this means that we cannot really

265
00:10:32,519 --> 00:10:34,680
observe what the system under test is

266
00:10:34,680 --> 00:10:36,959
doing which is why we have right from

267
00:10:36,959 --> 00:10:39,000
the beginning restricted our tests to

268
00:10:39,000 --> 00:10:41,339
network only black box testing which

269
00:10:41,339 --> 00:10:44,160
means that we need to have a test set or

270
00:10:44,160 --> 00:10:46,200
a set of test cases

271
00:10:46,200 --> 00:10:48,180
what's also interesting here is that

272
00:10:48,180 --> 00:10:50,700
generally is it is a lot easier to test

273
00:10:50,700 --> 00:10:53,339
email servers than it is to test clients

274
00:10:53,339 --> 00:10:55,980
because typically an email server will

275
00:10:55,980 --> 00:10:57,779
constantly listen for new incoming

276
00:10:57,779 --> 00:11:00,660
connections in clients we had here to

277
00:11:00,660 --> 00:11:02,600
get a little bit more creative by using

278
00:11:02,600 --> 00:11:04,680
pre-configured snapshots and virtual

279
00:11:04,680 --> 00:11:06,480
machines such that we could basically

280
00:11:06,480 --> 00:11:10,440
request connections so to say

281
00:11:10,440 --> 00:11:13,019
and now how do we create a good start

282
00:11:13,019 --> 00:11:14,700
TLS test Corpus

283
00:11:14,700 --> 00:11:17,160
what we did was in the first place we

284
00:11:17,160 --> 00:11:19,980
conducted a literature review in this

285
00:11:19,980 --> 00:11:22,380
view in this review We queried cve

286
00:11:22,380 --> 00:11:25,140
databases bug trackers and search

287
00:11:25,140 --> 00:11:27,480
engines for keywords such as stls and

288
00:11:27,480 --> 00:11:28,680
star TLS

289
00:11:28,680 --> 00:11:31,019
and what's interesting here is that

290
00:11:31,019 --> 00:11:32,700
already at this stage

291
00:11:32,700 --> 00:11:35,040
we could create a small test Corpus and

292
00:11:35,040 --> 00:11:37,440
we will as we will see that two of the

293
00:11:37,440 --> 00:11:39,180
most devastating attacks were already

294
00:11:39,180 --> 00:11:42,060
present at this time and basically we

295
00:11:42,060 --> 00:11:44,640
just had to apply a well-known issue to

296
00:11:44,640 --> 00:11:47,579
a new set of email applications

297
00:11:47,579 --> 00:11:50,399
and the second thing that we did was to

298
00:11:50,399 --> 00:11:52,200
conduct a protocol analysis by taking

299
00:11:52,200 --> 00:11:53,820
the protocols uh the protocol

300
00:11:53,820 --> 00:11:56,160
specifications into account and thinking

301
00:11:56,160 --> 00:11:58,260
about how we can generalize the found

302
00:11:58,260 --> 00:12:00,300
problems

303
00:12:00,300 --> 00:12:02,339
as a result we ended up with a test

304
00:12:02,339 --> 00:12:04,260
Corpus containing more than more than

305
00:12:04,260 --> 00:12:07,320
100 starting specific test cases that we

306
00:12:07,320 --> 00:12:09,060
classified into five distinct attack

307
00:12:09,060 --> 00:12:11,880
classes and for the remain remainder of

308
00:12:11,880 --> 00:12:13,980
my part of this talk I will go with you

309
00:12:13,980 --> 00:12:15,720
through each of these class and and

310
00:12:15,720 --> 00:12:18,180
explain the most interesting findings

311
00:12:18,180 --> 00:12:19,560
that we found

312
00:12:19,560 --> 00:12:21,660
so let's start with the negotiation

313
00:12:21,660 --> 00:12:23,100
class

314
00:12:23,100 --> 00:12:25,440
in this class the aim of the attacker is

315
00:12:25,440 --> 00:12:28,320
always to derail the star TLS connection

316
00:12:28,320 --> 00:12:30,779
such that TLS is not made in the first

317
00:12:30,779 --> 00:12:31,860
place

318
00:12:31,860 --> 00:12:34,079
and the two most prominent or the the

319
00:12:34,079 --> 00:12:36,180
most prominent example of that of this

320
00:12:36,180 --> 00:12:38,040
is starting less stripping as Fabian

321
00:12:38,040 --> 00:12:40,560
shot in the introduction

322
00:12:40,560 --> 00:12:43,320
so an Attica can hear a script the star

323
00:12:43,320 --> 00:12:45,720
TLS or remove the start DLS capability

324
00:12:45,720 --> 00:12:48,420
from the server response make the client

325
00:12:48,420 --> 00:12:51,000
think that start till as a start LS is

326
00:12:51,000 --> 00:12:53,760
not supported which which means that the

327
00:12:53,760 --> 00:12:55,440
client will not do the or not

328
00:12:55,440 --> 00:12:57,959
participate in a TLS handshake and

329
00:12:57,959 --> 00:12:59,820
besides changing the message flow a bit

330
00:12:59,820 --> 00:13:02,820
the result is that the edge can obtain

331
00:13:02,820 --> 00:13:05,760
the password in clear text

332
00:13:05,760 --> 00:13:07,920
there is a second variant of start LS

333
00:13:07,920 --> 00:13:10,260
which consists of changing the Response

334
00:13:10,260 --> 00:13:13,380
Code of the of the start DLS command but

335
00:13:13,380 --> 00:13:16,200
basically the result is the same as for

336
00:13:16,200 --> 00:13:18,480
this first variant

337
00:13:18,480 --> 00:13:20,100
and now I think there is an even more

338
00:13:20,100 --> 00:13:22,200
interesting case

339
00:13:22,200 --> 00:13:23,579
um and this is called the pre-off

340
00:13:23,579 --> 00:13:26,940
greeting or the pre pre-off attack and

341
00:13:26,940 --> 00:13:29,040
here we already changed the greeting

342
00:13:29,040 --> 00:13:31,320
type Itself by exchanging the OK

343
00:13:31,320 --> 00:13:34,200
response with a pre-op response

344
00:13:34,200 --> 00:13:36,600
and now it is not clear what happens in

345
00:13:36,600 --> 00:13:38,519
this case and to understand it we need

346
00:13:38,519 --> 00:13:41,279
to look at the IMAP State machine

347
00:13:41,279 --> 00:13:43,800
and if you look here you will note that

348
00:13:43,800 --> 00:13:46,740
IMAP has that IMAP defines multiple

349
00:13:46,740 --> 00:13:49,320
types of greetings that transition the

350
00:13:49,320 --> 00:13:52,139
client to different states so for

351
00:13:52,139 --> 00:13:55,560
example the OK the OK greeting will

352
00:13:55,560 --> 00:13:57,180
transition the client into the not

353
00:13:57,180 --> 00:13:58,860
authenticated state

354
00:13:58,860 --> 00:14:01,740
however when you lose use the three of

355
00:14:01,740 --> 00:14:04,320
greeting the client is inspected is um

356
00:14:04,320 --> 00:14:06,540
is expected to directly transition into

357
00:14:06,540 --> 00:14:09,180
the authenticated State this can make

358
00:14:09,180 --> 00:14:11,760
sense for example if you're using IMAP

359
00:14:11,760 --> 00:14:13,380
via an already authenticated connection

360
00:14:13,380 --> 00:14:15,779
for example SSH

361
00:14:15,779 --> 00:14:18,060
but now something interesting happens

362
00:14:18,060 --> 00:14:20,220
IMAP is pretty specific about which

363
00:14:20,220 --> 00:14:22,560
commands are allowed in which stage or

364
00:14:22,560 --> 00:14:24,779
in which a state and the started S

365
00:14:24,779 --> 00:14:26,160
command is not allowed in the

366
00:14:26,160 --> 00:14:27,480
authenticated state

367
00:14:27,480 --> 00:14:29,279
this means that the client would

368
00:14:29,279 --> 00:14:30,839
basically violate the specification

369
00:14:30,839 --> 00:14:33,720
should it do the start LS command but

370
00:14:33,720 --> 00:14:35,880
the alternative is clearly to do

371
00:14:35,880 --> 00:14:37,560
something similar as to start a less

372
00:14:37,560 --> 00:14:39,480
stripping by not doing the start LS

373
00:14:39,480 --> 00:14:42,060
transition transition at all

374
00:14:42,060 --> 00:14:44,339
but here there's something more we have

375
00:14:44,339 --> 00:14:46,680
to consider because as I explained to

376
00:14:46,680 --> 00:14:48,779
you the client is now in the in the

377
00:14:48,779 --> 00:14:50,760
authenticated state so you could you can

378
00:14:50,760 --> 00:14:53,040
ask yourself why should it log in again

379
00:14:53,040 --> 00:14:54,899
and in fact if you have a standard

380
00:14:54,899 --> 00:14:56,699
conforming client it will not do the

381
00:14:56,699 --> 00:14:59,160
login but maybe proceed with the select

382
00:14:59,160 --> 00:15:01,680
command and stack instead to select the

383
00:15:01,680 --> 00:15:02,880
inbox

384
00:15:02,880 --> 00:15:04,740
and now the question is what does it

385
00:15:04,740 --> 00:15:07,680
give gives us as an attacker what we

386
00:15:07,680 --> 00:15:10,740
could do here is um to for example mimic

387
00:15:10,740 --> 00:15:12,779
a valid IMAP server and for example

388
00:15:12,779 --> 00:15:15,000
present an inbox that is almost empty

389
00:15:15,000 --> 00:15:16,800
but only contains a single message

390
00:15:16,800 --> 00:15:19,079
asking for ransom for example

391
00:15:19,079 --> 00:15:21,720
but we can do better if the client

392
00:15:21,720 --> 00:15:24,360
supports the mailbox referrals extension

393
00:15:24,360 --> 00:15:26,459
we as an attacker can instruct the

394
00:15:26,459 --> 00:15:28,500
client to select the inbox on another

395
00:15:28,500 --> 00:15:30,600
server for example then this should

396
00:15:30,600 --> 00:15:32,639
remind you a bit about the HTTP about

397
00:15:32,639 --> 00:15:34,800
HTTP redirects

398
00:15:34,800 --> 00:15:37,019
and because the Attica can choose the

399
00:15:37,019 --> 00:15:39,660
domain name freely they can use a name

400
00:15:39,660 --> 00:15:42,420
that they have full control to or where

401
00:15:42,420 --> 00:15:44,639
they can obtain a valid TLS certificate

402
00:15:44,639 --> 00:15:45,839
too

403
00:15:45,839 --> 00:15:47,699
so this means that at this point the

404
00:15:47,699 --> 00:15:49,860
attacker can just do the full hand check

405
00:15:49,860 --> 00:15:52,260
including the transition to TLs but

406
00:15:52,260 --> 00:15:54,899
still obtain the credentials from the

407
00:15:54,899 --> 00:15:58,199
login or from the network traces

408
00:15:58,199 --> 00:16:02,519
so in total we found that 15 of the

409
00:16:02,519 --> 00:16:04,920
tested applications were vulnerable to

410
00:16:04,920 --> 00:16:07,920
certain forms of negotiation attacks but

411
00:16:07,920 --> 00:16:09,480
we have to be a little bit careful here

412
00:16:09,480 --> 00:16:12,600
not in all cases we could obtain valid

413
00:16:12,600 --> 00:16:15,120
user credentials but at least in every

414
00:16:15,120 --> 00:16:16,620
one of these cases we could obtain

415
00:16:16,620 --> 00:16:18,720
sensitive data such as send emails or

416
00:16:18,720 --> 00:16:20,639
drafted emails

417
00:16:20,639 --> 00:16:22,440
which brings us to session fixation

418
00:16:22,440 --> 00:16:23,639
attacks

419
00:16:23,639 --> 00:16:26,760
as I as I have explained the start DLS

420
00:16:26,760 --> 00:16:28,260
command is not allowed in the

421
00:16:28,260 --> 00:16:29,940
authenticated State and it turns out

422
00:16:29,940 --> 00:16:31,440
that there is a very good reason for

423
00:16:31,440 --> 00:16:32,220
that

424
00:16:32,220 --> 00:16:34,500
consider our user Alice who wants to

425
00:16:34,500 --> 00:16:36,240
communicate with your implicit TLS

426
00:16:36,240 --> 00:16:38,880
meaning no start Killers involved at all

427
00:16:38,880 --> 00:16:40,740
with an IMAP server

428
00:16:40,740 --> 00:16:44,399
so this means that both parties are in a

429
00:16:44,399 --> 00:16:45,720
state where the next thing that is

430
00:16:45,720 --> 00:16:47,940
expected is the TLs handshake

431
00:16:47,940 --> 00:16:50,820
and now also consider our attacker what

432
00:16:50,820 --> 00:16:52,800
they can do is in the first step to

433
00:16:52,800 --> 00:16:55,259
first get a hold on the connection

434
00:16:55,259 --> 00:16:57,300
and then instead of proxying Ls

435
00:16:57,300 --> 00:16:58,980
connection directly to the IMAP server

436
00:16:58,980 --> 00:17:00,779
the attacker would connect to the server

437
00:17:00,779 --> 00:17:02,519
receive the greeting

438
00:17:02,519 --> 00:17:05,579
log in with his or with with their own

439
00:17:05,579 --> 00:17:09,480
account and then initially initiate the

440
00:17:09,480 --> 00:17:11,760
start TLS command afterwards

441
00:17:11,760 --> 00:17:14,339
and now it should be evident that what

442
00:17:14,339 --> 00:17:16,380
the attacker could do is they can just

443
00:17:16,380 --> 00:17:18,240
exchange the port number of Ls

444
00:17:18,240 --> 00:17:21,240
connection and start to proxy the TLs

445
00:17:21,240 --> 00:17:23,939
data directly to the IMAP server and

446
00:17:23,939 --> 00:17:25,260
vice versa

447
00:17:25,260 --> 00:17:27,660
and this means that when Ellis tries to

448
00:17:27,660 --> 00:17:29,460
log into the server with valid

449
00:17:29,460 --> 00:17:31,620
credentials she will unexpectedly

450
00:17:31,620 --> 00:17:34,080
receive a login that tells tells her

451
00:17:34,080 --> 00:17:35,940
that she is already locked in as the

452
00:17:35,940 --> 00:17:37,200
attacker

453
00:17:37,200 --> 00:17:40,679
which is unsettling at least I think

454
00:17:40,679 --> 00:17:43,020
um we found that we can uh we can

455
00:17:43,020 --> 00:17:46,679
exploit two email clients with session

456
00:17:46,679 --> 00:17:50,400
fixations to obtain user credentials but

457
00:17:50,400 --> 00:17:53,460
in nine additional cases we saw at least

458
00:17:53,460 --> 00:17:56,340
fragments of session fixations with not

459
00:17:56,340 --> 00:17:58,559
so clear impact for security or at least

460
00:17:58,559 --> 00:18:00,539
where we did not could come up with a

461
00:18:00,539 --> 00:18:02,760
working exploit

462
00:18:02,760 --> 00:18:05,039
and the next class is tampering

463
00:18:05,039 --> 00:18:08,580
the the aim of tampering attacks is

464
00:18:08,580 --> 00:18:12,299
always to try to make persistent changes

465
00:18:12,299 --> 00:18:14,880
to the mailbox of our victim for example

466
00:18:14,880 --> 00:18:16,799
by already telling before starters

467
00:18:16,799 --> 00:18:19,080
before the starter started as command

468
00:18:19,080 --> 00:18:20,940
was already sent that there is a new

469
00:18:20,940 --> 00:18:23,520
email in the inbox or for example by

470
00:18:23,520 --> 00:18:25,200
telling that a new folder was created

471
00:18:25,200 --> 00:18:26,820
and in fact if you do this in

472
00:18:26,820 --> 00:18:28,679
Thunderbird for example you will see

473
00:18:28,679 --> 00:18:30,419
that now there is an Attica controlled

474
00:18:30,419 --> 00:18:32,700
folder in your email client which will

475
00:18:32,700 --> 00:18:35,179
not go away

476
00:18:35,520 --> 00:18:38,640
um in total five of the of the 28 tested

477
00:18:38,640 --> 00:18:39,840
email applications

478
00:18:39,840 --> 00:18:41,460
um do accept

479
00:18:41,460 --> 00:18:44,280
um IMAP responses even before start DLS

480
00:18:44,280 --> 00:18:47,039
um was conducted also with varying

481
00:18:47,039 --> 00:18:49,260
consequences but we know of at least one

482
00:18:49,260 --> 00:18:51,000
client where we could for example delete

483
00:18:51,000 --> 00:18:52,500
the whole mailbox

484
00:18:52,500 --> 00:18:55,200
by doing things like that

485
00:18:55,200 --> 00:18:56,760
which brings us to your ice spoofing

486
00:18:56,760 --> 00:18:59,039
which is similar to tampering but in UI

487
00:18:59,039 --> 00:19:00,720
spoofing we are not interested on the

488
00:19:00,720 --> 00:19:02,760
permanent part but instead we want to

489
00:19:02,760 --> 00:19:04,679
show dialogues to our user for example

490
00:19:04,679 --> 00:19:08,100
for Effective social engineering attacks

491
00:19:08,100 --> 00:19:10,320
and here I may perhaps as a bit because

492
00:19:10,320 --> 00:19:12,539
in IMAP there is a dedicated dedicated

493
00:19:12,539 --> 00:19:15,600
response um that should be showed to the

494
00:19:15,600 --> 00:19:18,059
user it is called the alert response and

495
00:19:18,059 --> 00:19:19,740
when you do this when you execute this

496
00:19:19,740 --> 00:19:21,539
trace for example in Outlook you will

497
00:19:21,539 --> 00:19:24,299
receive something like that which looks

498
00:19:24,299 --> 00:19:26,160
um pretty much like a benign email but

499
00:19:26,160 --> 00:19:27,539
with the addition additional information

500
00:19:27,539 --> 00:19:29,460
that this message was sent with higher

501
00:19:29,460 --> 00:19:33,960
importance and a large um or or a data

502
00:19:33,960 --> 00:19:36,120
controlled field that you can for

503
00:19:36,120 --> 00:19:37,440
example use for social engineering

504
00:19:37,440 --> 00:19:39,240
attacks

505
00:19:39,240 --> 00:19:41,100
and in total

506
00:19:41,100 --> 00:19:43,679
um considering the alert Response Code

507
00:19:43,679 --> 00:19:45,419
and also different error mechanisms

508
00:19:45,419 --> 00:19:48,900
mechanisms we were able to present a

509
00:19:48,900 --> 00:19:51,240
user Attica controlled dialogues in 11

510
00:19:51,240 --> 00:19:55,080
of the 28 tested clients

511
00:19:55,080 --> 00:19:56,760
and now let's come to the buffering

512
00:19:56,760 --> 00:19:58,980
class which is in I think in our opinion

513
00:19:58,980 --> 00:20:01,620
the most interesting class of a text of

514
00:20:01,620 --> 00:20:03,600
in Star TLS

515
00:20:03,600 --> 00:20:06,360
and here we have to get into a little

516
00:20:06,360 --> 00:20:08,580
bit more detail about protocol handling

517
00:20:08,580 --> 00:20:10,799
itself or in other words where is the

518
00:20:10,799 --> 00:20:13,020
buffer where is the data buffered to

519
00:20:13,020 --> 00:20:14,940
where is it passed and so on

520
00:20:14,940 --> 00:20:17,280
so let's consider now that we are a

521
00:20:17,280 --> 00:20:21,000
server and as a server our first task is

522
00:20:21,000 --> 00:20:23,280
to send a positive greeting which means

523
00:20:23,280 --> 00:20:25,500
basically that we are able to or that we

524
00:20:25,500 --> 00:20:27,419
are willing to accept new commands from

525
00:20:27,419 --> 00:20:30,240
a client and then the client will send

526
00:20:30,240 --> 00:20:31,860
us something

527
00:20:31,860 --> 00:20:34,260
this something is first read into an

528
00:20:34,260 --> 00:20:36,480
internal buffer and then the next step

529
00:20:36,480 --> 00:20:38,880
is that this buffer is parsed enter

530
00:20:38,880 --> 00:20:41,760
enter server detects that it's indeed

531
00:20:41,760 --> 00:20:44,340
the start LS command and removes it from

532
00:20:44,340 --> 00:20:45,600
the buffer

533
00:20:45,600 --> 00:20:48,720
then it responds with the OK command

534
00:20:48,720 --> 00:20:50,940
now both both parties are in a state

535
00:20:50,940 --> 00:20:52,679
where TLS should be made and the TLs

536
00:20:52,679 --> 00:20:55,140
handshake is executed

537
00:20:55,140 --> 00:20:58,380
then LS sends again something that is

538
00:20:58,380 --> 00:21:01,559
buffat parsed the server detects that

539
00:21:01,559 --> 00:21:03,360
it's indeed the login command maybe even

540
00:21:03,360 --> 00:21:06,240
with valid credentials and it responds

541
00:21:06,240 --> 00:21:07,620
with a positive response meaning that

542
00:21:07,620 --> 00:21:09,900
Alice is now authenticated

543
00:21:09,900 --> 00:21:12,780
but let's consider buffering in our the

544
00:21:12,780 --> 00:21:15,000
command injection case

545
00:21:15,000 --> 00:21:17,220
again let's assume that we first sent a

546
00:21:17,220 --> 00:21:19,380
greeting and then a client sends the

547
00:21:19,380 --> 00:21:22,020
start TLS command but now instead of

548
00:21:22,020 --> 00:21:25,080
just hold a whole um just um stopping at

549
00:21:25,080 --> 00:21:27,360
this point the client will also

550
00:21:27,360 --> 00:21:30,419
additionally in the same TCP segment add

551
00:21:30,419 --> 00:21:32,760
additional data for example this one

552
00:21:32,760 --> 00:21:33,900
here

553
00:21:33,900 --> 00:21:37,320
so in fact this data is again buffered

554
00:21:37,320 --> 00:21:39,780
first and then the server tries to pass

555
00:21:39,780 --> 00:21:42,600
what it received so it will detect the

556
00:21:42,600 --> 00:21:44,580
start LS command remove it from the

557
00:21:44,580 --> 00:21:45,539
buffer

558
00:21:45,539 --> 00:21:47,460
and respond with an OK command which

559
00:21:47,460 --> 00:21:50,220
means the start LS is now uh is this

560
00:21:50,220 --> 00:21:53,159
data list should be executed then both

561
00:21:53,159 --> 00:21:55,559
parties execute the TLs handshake

562
00:21:55,559 --> 00:21:58,440
and Alice can send her new command

563
00:21:58,440 --> 00:22:00,840
but what should be now I think pretty

564
00:22:00,840 --> 00:22:03,480
evident is that this data is appended to

565
00:22:03,480 --> 00:22:05,460
the internal buffer which means that

566
00:22:05,460 --> 00:22:07,620
when the server parses this buffer it

567
00:22:07,620 --> 00:22:10,020
will not detect the recent command but

568
00:22:10,020 --> 00:22:11,940
in fact the command that was sent even

569
00:22:11,940 --> 00:22:15,299
before TLS was made meaning that it will

570
00:22:15,299 --> 00:22:17,159
get an invalid command

571
00:22:17,159 --> 00:22:19,440
and now the effect is that even though

572
00:22:19,440 --> 00:22:21,419
Alice has the right credentials she will

573
00:22:21,419 --> 00:22:23,280
she will receive a command telling her

574
00:22:23,280 --> 00:22:25,380
that she sent for some reason an invalid

575
00:22:25,380 --> 00:22:26,400
command

576
00:22:26,400 --> 00:22:28,919
so I think um how you should think about

577
00:22:28,919 --> 00:22:31,559
this about this problem is that the

578
00:22:31,559 --> 00:22:33,659
command we send up at the bottom the

579
00:22:33,659 --> 00:22:36,299
invalid command is interpreted as if

580
00:22:36,299 --> 00:22:39,020
would have been sent in Via an encrypted

581
00:22:39,020 --> 00:22:41,340
encrypted Channel

582
00:22:41,340 --> 00:22:43,980
and basically both parties do not align

583
00:22:43,980 --> 00:22:46,140
on the meaning of the session which

584
00:22:46,140 --> 00:22:48,659
leads to pretty interesting ETA classes

585
00:22:48,659 --> 00:22:52,320
and besides that at credential stealing

586
00:22:52,320 --> 00:22:54,299
is almost always possible in the

587
00:22:54,299 --> 00:22:56,820
protocols I think the most adventurous

588
00:22:56,820 --> 00:22:59,280
attack we have can we could come up with

589
00:22:59,280 --> 00:23:02,880
is by hosting a valid https content

590
00:23:02,880 --> 00:23:06,140
through an IMAP server

591
00:23:06,179 --> 00:23:08,940
so let's consider that case again we

592
00:23:08,940 --> 00:23:10,200
assume that there is that there is a

593
00:23:10,200 --> 00:23:12,059
user Alice

594
00:23:12,059 --> 00:23:14,700
um and she will do implicit TLS no

595
00:23:14,700 --> 00:23:16,380
started as involved at all to

596
00:23:16,380 --> 00:23:19,740
communicate with an https server now

597
00:23:19,740 --> 00:23:22,760
and we also assume that inside of this

598
00:23:22,760 --> 00:23:25,320
structure there is also an IMAP server

599
00:23:25,320 --> 00:23:27,299
that shares the same TLS certificate

600
00:23:27,299 --> 00:23:29,460
with the IMAP server or with the https

601
00:23:29,460 --> 00:23:30,539
server

602
00:23:30,539 --> 00:23:33,480
and now we also have our attacker which

603
00:23:33,480 --> 00:23:36,059
first gets a hold of the connection

604
00:23:36,059 --> 00:23:39,179
and then instead of um directly proxying

605
00:23:39,179 --> 00:23:41,280
Alice connection to the IMAP server the

606
00:23:41,280 --> 00:23:43,080
attacker will first Prime the IMAP

607
00:23:43,080 --> 00:23:45,120
server towards a certain state by using

608
00:23:45,120 --> 00:23:47,159
the command injection it will receive

609
00:23:47,159 --> 00:23:49,380
the greeting then send to start TLS

610
00:23:49,380 --> 00:23:51,360
command and then send a very

611
00:23:51,360 --> 00:23:54,059
specifically crafted set of valid IMAP

612
00:23:54,059 --> 00:23:56,280
commands that somehow resemble artifacts

613
00:23:56,280 --> 00:23:58,020
of http

614
00:23:58,020 --> 00:24:00,179
so the server will respond with a with

615
00:24:00,179 --> 00:24:03,179
an OK and expect the TLs handshake and

616
00:24:03,179 --> 00:24:05,039
now at this place the attacker can just

617
00:24:05,039 --> 00:24:07,020
proxy Alice's connection to the IMAP

618
00:24:07,020 --> 00:24:09,000
server

619
00:24:09,000 --> 00:24:11,820
and now what what happens in so this is

620
00:24:11,820 --> 00:24:13,620
an instant of cross protocol attacks and

621
00:24:13,620 --> 00:24:15,000
what happens normally in Cross protocol

622
00:24:15,000 --> 00:24:18,480
protocol attacks is that you get somehow

623
00:24:18,480 --> 00:24:20,880
a result but the impact is often not so

624
00:24:20,880 --> 00:24:22,440
clear so in this case what would happen

625
00:24:22,440 --> 00:24:26,039
is that Alice sends an HTTP get command

626
00:24:26,039 --> 00:24:28,320
to an IMAP server which is obviously

627
00:24:28,320 --> 00:24:30,179
something you should not do and leads to

628
00:24:30,179 --> 00:24:32,700
likely some error cases

629
00:24:32,700 --> 00:24:35,159
but because we have primed the server

630
00:24:35,159 --> 00:24:37,740
towards a certain State we can control

631
00:24:37,740 --> 00:24:40,260
the output of the server meaning that

632
00:24:40,260 --> 00:24:42,480
the output it will generate reassemble

633
00:24:42,480 --> 00:24:45,659
something that looks very very close to

634
00:24:45,659 --> 00:24:47,280
valid http

635
00:24:47,280 --> 00:24:49,080
and although I know that some of you

636
00:24:49,080 --> 00:24:51,059
might note that there are some syntax

637
00:24:51,059 --> 00:24:53,640
elements missing at least recent

638
00:24:53,640 --> 00:24:56,580
browsers such as Firefox and chrome will

639
00:24:56,580 --> 00:24:58,620
accept this response and show a valid

640
00:24:58,620 --> 00:25:01,140
https website without any certificate

641
00:25:01,140 --> 00:25:03,919
problems at all

642
00:25:03,919 --> 00:25:06,840
in total we found that we found eight

643
00:25:06,840 --> 00:25:09,780
new instances of command injections in

644
00:25:09,780 --> 00:25:11,940
our test but what's even more

645
00:25:11,940 --> 00:25:13,799
interesting about this case is that it

646
00:25:13,799 --> 00:25:15,720
was already described more than 10 years

647
00:25:15,720 --> 00:25:18,059
before by Vice vinema the author of

648
00:25:18,059 --> 00:25:20,880
postfix in 2011.

649
00:25:20,880 --> 00:25:23,039
and when we take all these issues into

650
00:25:23,039 --> 00:25:25,260
account so the historic issues we know

651
00:25:25,260 --> 00:25:26,640
that servers were vulnerable to the

652
00:25:26,640 --> 00:25:29,039
command injection we see that in total

653
00:25:29,039 --> 00:25:32,400
16 of 23 email email servers were

654
00:25:32,400 --> 00:25:34,860
vulnerable to command injections and I

655
00:25:34,860 --> 00:25:36,299
think this should point you to the fact

656
00:25:36,299 --> 00:25:38,100
that it that these are not merely

657
00:25:38,100 --> 00:25:40,020
implementation issues but really an

658
00:25:40,020 --> 00:25:42,480
issue with the specification itself

659
00:25:42,480 --> 00:25:44,760
we can generalize this attack also to a

660
00:25:44,760 --> 00:25:47,159
response injection which mimics the same

661
00:25:47,159 --> 00:25:49,140
kind of buffering injections as on the

662
00:25:49,140 --> 00:25:51,840
server side to the client side and also

663
00:25:51,840 --> 00:25:54,059
what we see here is that 16 of the 28

664
00:25:54,059 --> 00:25:55,799
applications are vulnerable to command

665
00:25:55,799 --> 00:25:57,419
injections

666
00:25:57,419 --> 00:26:00,240
okay so let's continue with internet

667
00:26:00,240 --> 00:26:02,840
scanning

668
00:26:04,200 --> 00:26:07,080
right yes this works again

669
00:26:07,080 --> 00:26:09,659
all right Damian gave you an overview of

670
00:26:09,659 --> 00:26:11,400
all the issues in mail servers and mail

671
00:26:11,400 --> 00:26:13,380
clients however we found it especially

672
00:26:13,380 --> 00:26:15,000
interesting that we still found servers

673
00:26:15,000 --> 00:26:16,860
vulnerable to the command injection 10

674
00:26:16,860 --> 00:26:18,900
years after it was first published

675
00:26:18,900 --> 00:26:21,000
therefore we took to internet scanning

676
00:26:21,000 --> 00:26:22,919
to learn how widespread these issues are

677
00:26:22,919 --> 00:26:25,140
still in practice

678
00:26:25,140 --> 00:26:27,179
of course scanning always comes a lot of

679
00:26:27,179 --> 00:26:29,100
things you should consider of course we

680
00:26:29,100 --> 00:26:31,320
Applied Standard best practices we used

681
00:26:31,320 --> 00:26:33,000
a block list to prevent scanning people

682
00:26:33,000 --> 00:26:35,340
who do not want to be scanned we handed

683
00:26:35,340 --> 00:26:38,460
a lot of abuse males asking for us to

684
00:26:38,460 --> 00:26:40,679
put people on the block list we

685
00:26:40,679 --> 00:26:42,299
identified ourselves during our scans

686
00:26:42,299 --> 00:26:44,279
for example using the ELO command or

687
00:26:44,279 --> 00:26:46,500
using comments where possible so people

688
00:26:46,500 --> 00:26:48,539
could actually contact us contact us and

689
00:26:48,539 --> 00:26:51,000
know who we are and finally we published

690
00:26:51,000 --> 00:26:52,559
a website setting what we are doing on

691
00:26:52,559 --> 00:26:54,600
the scanner IP address so people could

692
00:26:54,600 --> 00:26:56,100
look at people could look it up and

693
00:26:56,100 --> 00:26:58,260
again get the abuse contact

694
00:26:58,260 --> 00:27:00,840
however we realized that this just does

695
00:27:00,840 --> 00:27:03,659
not cut it for email scanning

696
00:27:03,659 --> 00:27:06,240
so due to spam problems male transfer

697
00:27:06,240 --> 00:27:08,039
agents especially will not talk to

698
00:27:08,039 --> 00:27:08,940
everyone

699
00:27:08,940 --> 00:27:11,279
there are many specific block lists that

700
00:27:11,279 --> 00:27:12,539
are hard to get off

701
00:27:12,539 --> 00:27:14,760
therefore we need an untainted IP for

702
00:27:14,760 --> 00:27:16,679
scanning so it's another so our normal

703
00:27:16,679 --> 00:27:18,720
IP address we use for scanning was

704
00:27:18,720 --> 00:27:20,820
basically on all those learning on all

705
00:27:20,820 --> 00:27:22,020
the email block lists that you could

706
00:27:22,020 --> 00:27:24,480
imagine and there really was nobody that

707
00:27:24,480 --> 00:27:25,500
was

708
00:27:25,500 --> 00:27:28,559
who wanted to get us off that so we

709
00:27:28,559 --> 00:27:30,240
decided to take a new IP address first

710
00:27:30,240 --> 00:27:33,120
then we realized NDS still won't talk to

711
00:27:33,120 --> 00:27:35,279
us because well they expect you to be an

712
00:27:35,279 --> 00:27:37,860
MTA as well so you have to run an SMTP

713
00:27:37,860 --> 00:27:39,900
server on your scanning IP address

714
00:27:39,900 --> 00:27:42,059
then you need to publish appropriate DNS

715
00:27:42,059 --> 00:27:44,700
records like an MX record and a pointer

716
00:27:44,700 --> 00:27:47,100
record an SPF and decom Records help if

717
00:27:47,100 --> 00:27:49,220
you are new to email sending which

718
00:27:49,220 --> 00:27:51,840
scanner server usually is because we

719
00:27:51,840 --> 00:27:53,760
will not be sending any emails over the

720
00:27:53,760 --> 00:27:54,600
server

721
00:27:54,600 --> 00:27:57,419
so people would want you to have these

722
00:27:57,419 --> 00:27:59,340
records as well and finally we were made

723
00:27:59,340 --> 00:28:00,960
a way of an email specific allow list

724
00:28:00,960 --> 00:28:02,760
that might have helped in getting the

725
00:28:02,760 --> 00:28:04,980
mail server over the threshold of being

726
00:28:04,980 --> 00:28:07,500
accepted by other servers as well but

727
00:28:07,500 --> 00:28:10,320
that is pretty hard to measure really

728
00:28:10,320 --> 00:28:12,360
all right our main question while

729
00:28:12,360 --> 00:28:14,340
scanning was how many servers are still

730
00:28:14,340 --> 00:28:16,320
vulnerable to the command injection that

731
00:28:16,320 --> 00:28:18,720
was first published in 2011.

732
00:28:18,720 --> 00:28:21,120
surprisingly out of the 60 million

733
00:28:21,120 --> 00:28:23,400
servers we could scan two percent were

734
00:28:23,400 --> 00:28:25,700
still vulnerable to this pack

735
00:28:25,700 --> 00:28:28,140
interestingly this percentage is higher

736
00:28:28,140 --> 00:28:30,840
for IMAP and POP3

737
00:28:30,840 --> 00:28:32,940
from our disclosure we know that most

738
00:28:32,940 --> 00:28:34,320
server developers were aware of this

739
00:28:34,320 --> 00:28:37,200
back in SMTP but not really in IMAP and

740
00:28:37,200 --> 00:28:39,900
POP3 possibly because the original bug

741
00:28:39,900 --> 00:28:43,260
came to be known as the star TLS SMTP

742
00:28:43,260 --> 00:28:47,419
bug but not for the other protocols

743
00:28:47,460 --> 00:28:49,500
so we've talked about a lot about issues

744
00:28:49,500 --> 00:28:52,500
now let's talk about fixing them

745
00:28:52,500 --> 00:28:54,360
the most straightforward thing to do as

746
00:28:54,360 --> 00:28:56,760
a mail user is to switch to implicit TLS

747
00:28:56,760 --> 00:28:59,279
so that's a pretty easy fix for the

748
00:28:59,279 --> 00:29:01,080
issues in male clients

749
00:29:01,080 --> 00:29:02,700
server providers on the other hand

750
00:29:02,700 --> 00:29:04,440
should also evaluate if they can cut

751
00:29:04,440 --> 00:29:06,240
study less support in the future for

752
00:29:06,240 --> 00:29:08,100
example by migrating existing users that

753
00:29:08,100 --> 00:29:11,460
still use star TLS to TLS in some way

754
00:29:11,460 --> 00:29:13,799
however recognize if you have a large

755
00:29:13,799 --> 00:29:16,080
user base this might not be a workable

756
00:29:16,080 --> 00:29:18,419
solution for everyone therefore if you

757
00:29:18,419 --> 00:29:20,159
really really really really really must

758
00:29:20,159 --> 00:29:22,380
use star trailers you should isolate the

759
00:29:22,380 --> 00:29:24,179
plain text phase completely from the TLs

760
00:29:24,179 --> 00:29:26,159
phase by cleaning any remaining state

761
00:29:26,159 --> 00:29:28,440
after it this includes playing any

762
00:29:28,440 --> 00:29:30,120
application buffers hopefully you're

763
00:29:30,120 --> 00:29:31,679
also fixing the buffering issues in the

764
00:29:31,679 --> 00:29:32,640
process

765
00:29:32,640 --> 00:29:35,940
and finally as the both as both a

766
00:29:35,940 --> 00:29:38,159
implementation and the standardization

767
00:29:38,159 --> 00:29:40,260
measure we recommend streamlining the

768
00:29:40,260 --> 00:29:42,659
star TLS negotiation only sending and

769
00:29:42,659 --> 00:29:44,340
accepting the bare minimum of messages

770
00:29:44,340 --> 00:29:47,640
before transitioning to actual TLS

771
00:29:47,640 --> 00:29:51,120
so no complex negotiation or actual

772
00:29:51,120 --> 00:29:53,640
other extensions just a start TLS

773
00:29:53,640 --> 00:29:56,600
command and then check

774
00:29:56,760 --> 00:29:58,200
finally I want to tell you about

775
00:29:58,200 --> 00:29:59,640
interesting things we learned from our

776
00:29:59,640 --> 00:30:02,159
disclosure include this part in our talk

777
00:30:02,159 --> 00:30:03,960
because reviewers and readers kept

778
00:30:03,960 --> 00:30:06,120
asking about this and we think there's

779
00:30:06,120 --> 00:30:08,159
something to be learned here

780
00:30:08,159 --> 00:30:09,960
just to remind you there were a lot of

781
00:30:09,960 --> 00:30:12,240
issues uncovered in clients servers and

782
00:30:12,240 --> 00:30:13,860
on the internet

783
00:30:13,860 --> 00:30:16,080
of course this means a lot of disclosure

784
00:30:16,080 --> 00:30:18,539
and disclosure is never easy so this

785
00:30:18,539 --> 00:30:20,279
issue Damian posted on GitHub on a

786
00:30:20,279 --> 00:30:22,500
GitHub repository of an open source mail

787
00:30:22,500 --> 00:30:24,120
library is pretty representative for

788
00:30:24,120 --> 00:30:26,279
disclosure I'd like to report a security

789
00:30:26,279 --> 00:30:30,260
vulnerability but I don't know how

790
00:30:30,299 --> 00:30:32,039
let's start with some lessons we learned

791
00:30:32,039 --> 00:30:34,140
during our disclosure first to answer

792
00:30:34,140 --> 00:30:35,880
one of the questions we asked ourselves

793
00:30:35,880 --> 00:30:37,440
in the beginning

794
00:30:37,440 --> 00:30:39,000
clients are not meant to be

795
00:30:39,000 --> 00:30:41,220
opportunistic most of the developers we

796
00:30:41,220 --> 00:30:42,419
talk to recognize the issues as

797
00:30:42,419 --> 00:30:45,179
vulnerabilities and fix them so starting

798
00:30:45,179 --> 00:30:47,279
less at least the male clients is not

799
00:30:47,279 --> 00:30:48,720
opportunistic

800
00:30:48,720 --> 00:30:51,480
I said before server developers knew the

801
00:30:51,480 --> 00:30:54,299
command injection smdp but not in IMAP

802
00:30:54,299 --> 00:30:57,539
and POP3 which kind of surprised us and

803
00:30:57,539 --> 00:30:59,700
the last lesson ties back to ties back

804
00:30:59,700 --> 00:31:01,860
to the issue Damian posted contacting

805
00:31:01,860 --> 00:31:04,200
the contacting developers in admins is

806
00:31:04,200 --> 00:31:06,360
still hard nowadays if you could just

807
00:31:06,360 --> 00:31:08,580
just all agree to use the security txt

808
00:31:08,580 --> 00:31:10,919
or have some way of letting researchers

809
00:31:10,919 --> 00:31:13,020
know where to contact people that would

810
00:31:13,020 --> 00:31:15,539
be really great

811
00:31:15,539 --> 00:31:18,240
all right this ties back to the last

812
00:31:18,240 --> 00:31:20,880
point and let's talk about disclosure of

813
00:31:20,880 --> 00:31:23,220
scan results communicating scan results

814
00:31:23,220 --> 00:31:25,620
can be especially hard because it's hard

815
00:31:25,620 --> 00:31:28,140
to get a hold of the affected admins you

816
00:31:28,140 --> 00:31:30,179
usually just have a have an IP address

817
00:31:30,179 --> 00:31:32,880
and no real mail address to contact and

818
00:31:32,880 --> 00:31:35,399
even if you can contact the admins what

819
00:31:35,399 --> 00:31:36,600
do you tell them

820
00:31:36,600 --> 00:31:38,880
you cannot always tell which cell they

821
00:31:38,880 --> 00:31:40,620
are actually using we tried identifying

822
00:31:40,620 --> 00:31:43,700
servers but that doesn't work that well

823
00:31:43,700 --> 00:31:47,039
and patches are not always available so

824
00:31:47,039 --> 00:31:48,720
what do you tell them and this is where

825
00:31:48,720 --> 00:31:51,120
the German BSI third came into play they

826
00:31:51,120 --> 00:31:52,679
handled all the communications with the

827
00:31:52,679 --> 00:31:55,380
server admins in Germany and helped us

828
00:31:55,380 --> 00:31:57,360
contact National search so that they

829
00:31:57,360 --> 00:31:59,820
could contact survey admins in their

830
00:31:59,820 --> 00:32:03,899
countries so special thank you there

831
00:32:03,899 --> 00:32:05,580
while scanning and reporting to the

832
00:32:05,580 --> 00:32:07,020
bigger made service providers we had

833
00:32:07,020 --> 00:32:09,720
some interesting experiences one of them

834
00:32:09,720 --> 00:32:14,240
paid a bounty but never fixed the issue

835
00:32:14,460 --> 00:32:16,980
one silently fixed all issues and

836
00:32:16,980 --> 00:32:19,260
stopped answering to our emails

837
00:32:19,260 --> 00:32:21,419
one argued that star TLS is really meant

838
00:32:21,419 --> 00:32:22,919
to be opportunistic and there was

839
00:32:22,919 --> 00:32:24,720
nothing to be done even though we

840
00:32:24,720 --> 00:32:26,520
presented a real vulnerability to them

841
00:32:26,520 --> 00:32:28,860
that could be kind of bad

842
00:32:28,860 --> 00:32:31,200
and some never responded or had really

843
00:32:31,200 --> 00:32:32,760
no way to contact them that would have

844
00:32:32,760 --> 00:32:34,559
that would get us past the normal

845
00:32:34,559 --> 00:32:36,840
customer support so that ties back to

846
00:32:36,840 --> 00:32:40,459
adding a security txt please

847
00:32:41,039 --> 00:32:43,200
all right of course we're scanning

848
00:32:43,200 --> 00:32:45,000
people contact you as well which is a

849
00:32:45,000 --> 00:32:46,200
nice change of pace from the normal

850
00:32:46,200 --> 00:32:48,840
disclosure asking what you are doing

851
00:32:48,840 --> 00:32:52,260
asking you to stop and so on and so on

852
00:32:52,260 --> 00:32:54,240
turns out that people seem to be

853
00:32:54,240 --> 00:32:55,980
monitoring their mail servers especially

854
00:32:55,980 --> 00:32:56,940
well

855
00:32:56,940 --> 00:32:59,039
most of these emails are automated of

856
00:32:59,039 --> 00:33:00,720
course and this is just an excerpt of

857
00:33:00,720 --> 00:33:02,820
the emails we got but we had some

858
00:33:02,820 --> 00:33:04,919
interesting conversations to say the

859
00:33:04,919 --> 00:33:07,080
least with real people

860
00:33:07,080 --> 00:33:08,880
however this is not where the fun email

861
00:33:08,880 --> 00:33:11,039
stopped we reported an issue to an open

862
00:33:11,039 --> 00:33:13,019
source mail client that commonly appears

863
00:33:13,019 --> 00:33:15,240
on top 10 lists of most used email

864
00:33:15,240 --> 00:33:16,440
clients

865
00:33:16,440 --> 00:33:18,659
yeah turns out their bug tracker is

866
00:33:18,659 --> 00:33:20,460
overrun by Bots trying to sell us

867
00:33:20,460 --> 00:33:23,519
watches like lots of bots selling lots

868
00:33:23,519 --> 00:33:25,500
of watches and we never got a hold of

869
00:33:25,500 --> 00:33:27,659
the actual developers and we think this

870
00:33:27,659 --> 00:33:30,179
client might be unmaintained

871
00:33:30,179 --> 00:33:32,100
we also had an interesting experience

872
00:33:32,100 --> 00:33:34,679
experience while disclosing all to an

873
00:33:34,679 --> 00:33:36,779
open source client we found an older

874
00:33:36,779 --> 00:33:38,760
issue requesting TLS to be enabled by

875
00:33:38,760 --> 00:33:40,860
default which seemed quite sensible to

876
00:33:40,860 --> 00:33:43,320
us however the dev responded that they

877
00:33:43,320 --> 00:33:45,899
tried this in a previous release but it

878
00:33:45,899 --> 00:33:47,700
resulted in an issue about the

879
00:33:47,700 --> 00:33:49,500
configuration being broken by a user

880
00:33:49,500 --> 00:33:51,299
therefore this change was inverted in a

881
00:33:51,299 --> 00:33:52,919
later version

882
00:33:52,919 --> 00:33:55,019
we decided to take a closer look at this

883
00:33:55,019 --> 00:33:57,000
broken configuration issue and we

884
00:33:57,000 --> 00:33:59,039
realized that this was a male user that

885
00:33:59,039 --> 00:34:01,380
was in fact a checked with star tiller

886
00:34:01,380 --> 00:34:02,460
stripping

887
00:34:02,460 --> 00:34:05,519
so in this case we started as command

888
00:34:05,519 --> 00:34:07,580
never reaches the server because it is

889
00:34:07,580 --> 00:34:10,739
exed out somewhere in between the

890
00:34:10,739 --> 00:34:12,480
statutes command and it reaching the

891
00:34:12,480 --> 00:34:14,940
server so of course this would cause

892
00:34:14,940 --> 00:34:19,399
breakage when the client enforces TLS

893
00:34:19,399 --> 00:34:22,500
but let's end these details on a more

894
00:34:22,500 --> 00:34:24,599
positive note of course we had lots of

895
00:34:24,599 --> 00:34:26,339
positive experiences so this is

896
00:34:26,339 --> 00:34:28,739
non-exhaustive for example most open

897
00:34:28,739 --> 00:34:30,540
source developers were pleasure to deal

898
00:34:30,540 --> 00:34:33,960
with also one of the big msps Einstein's

899
00:34:33,960 --> 00:34:36,540
male media game behind known for Game X

900
00:34:36,540 --> 00:34:38,639
and webpage in Germany we stood out

901
00:34:38,639 --> 00:34:40,260
answering fast and detailing what

902
00:34:40,260 --> 00:34:41,339
they're doing throughout the whole

903
00:34:41,339 --> 00:34:43,379
process so that was a nice change of

904
00:34:43,379 --> 00:34:45,418
pace as well in contrast to the other

905
00:34:45,418 --> 00:34:48,239
msps I've told you before

906
00:34:48,239 --> 00:34:49,859
but the open source projects are really

907
00:34:49,859 --> 00:34:51,960
where it's at it took the mud developer

908
00:34:51,960 --> 00:34:54,239
all of 55 minutes to release a patch

909
00:34:54,239 --> 00:34:56,300
boss to test

910
00:34:56,300 --> 00:34:59,220
took a day and explained to us why the

911
00:34:59,220 --> 00:35:00,599
issue happened in their code in the

912
00:35:00,599 --> 00:35:02,040
first place and requested the cve

913
00:35:02,040 --> 00:35:03,240
themselves

914
00:35:03,240 --> 00:35:05,099
and the Santa Barbara developers were

915
00:35:05,099 --> 00:35:06,420
especially helpful doing a lot of

916
00:35:06,420 --> 00:35:08,359
research themselves and giving us now

917
00:35:08,359 --> 00:35:10,859
new ideas to improve upon our own

918
00:35:10,859 --> 00:35:14,359
research and improve the paper

919
00:35:14,940 --> 00:35:17,339
so let's tie this all up

920
00:35:17,339 --> 00:35:19,200
in conclusion we found that compared to

921
00:35:19,200 --> 00:35:21,660
implicit T less star TLS adds the tech

922
00:35:21,660 --> 00:35:23,640
surface to image perfect email protocols

923
00:35:23,640 --> 00:35:26,460
without adding anything of value really

924
00:35:26,460 --> 00:35:28,440
furthermore we found that started as

925
00:35:28,440 --> 00:35:30,060
implementation in both servers and

926
00:35:30,060 --> 00:35:32,099
clients have widespread issues handing

927
00:35:32,099 --> 00:35:35,960
at systemic problems with star tailors

928
00:35:36,119 --> 00:35:37,859
as we have shown the effect of this

929
00:35:37,859 --> 00:35:39,960
vulnerability is not limited to Star TLs

930
00:35:39,960 --> 00:35:41,339
but also allows for cross protocol

931
00:35:41,339 --> 00:35:43,740
attacks for example against https and

932
00:35:43,740 --> 00:35:47,339
implicit TLS versions of these protocols

933
00:35:47,339 --> 00:35:49,500
we conclude that TLS is better without

934
00:35:49,500 --> 00:35:51,660
status and start less should be avoided

935
00:35:51,660 --> 00:35:52,859
where possible

936
00:35:52,859 --> 00:35:54,900
and for all of you we recommend looking

937
00:35:54,900 --> 00:35:56,820
into your own email client to check if

938
00:35:56,820 --> 00:35:58,619
you're still using statist for some old

939
00:35:58,619 --> 00:36:00,660
mail account and if you find to do

940
00:36:00,660 --> 00:36:02,880
consider changing that and talk to us

941
00:36:02,880 --> 00:36:05,040
about it at the social event tonight

942
00:36:05,040 --> 00:36:06,839
and now we're happy to take your

943
00:36:06,839 --> 00:36:08,730
questions

944
00:36:08,730 --> 00:36:11,100
[Applause]

945
00:36:11,100 --> 00:36:14,199
[Music]

946
00:36:18,530 --> 00:36:21,649
[Music]

