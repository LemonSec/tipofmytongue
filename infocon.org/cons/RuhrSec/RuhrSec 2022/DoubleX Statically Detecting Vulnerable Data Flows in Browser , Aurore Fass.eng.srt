1
00:00:01,040 --> 00:00:08,009
[Music]

2
00:00:11,059 --> 00:00:14,059
thank you

3
00:00:18,020 --> 00:00:21,720
so hi everybody my name is I'm a

4
00:00:21,720 --> 00:00:23,460
visiting assistant professor at Stanford

5
00:00:23,460 --> 00:00:26,160
and research group leader at cispa and

6
00:00:26,160 --> 00:00:28,260
so my research really focuses on web

7
00:00:28,260 --> 00:00:29,640
security and privacy and web

8
00:00:29,640 --> 00:00:31,800
measurements and today I'm super excited

9
00:00:31,800 --> 00:00:34,860
to be here at 12 sec 2022 especially in

10
00:00:34,860 --> 00:00:37,440
person and I'm very happy to give you an

11
00:00:37,440 --> 00:00:39,899
overview so of one of our most research

12
00:00:39,899 --> 00:00:42,840
work on browser extension security or

13
00:00:42,840 --> 00:00:45,180
activity rather insecurity which we

14
00:00:45,180 --> 00:00:48,840
presented at acmccs 2021

15
00:00:48,840 --> 00:00:51,239
all right so as you probably all know uh

16
00:00:51,239 --> 00:00:53,520
browser extensions are popular to

17
00:00:53,520 --> 00:00:55,800
improve user browsing experience

18
00:00:55,800 --> 00:00:58,140
for example they can add ad booking

19
00:00:58,140 --> 00:01:00,899
capabilities or just be a nice add-ons

20
00:01:00,899 --> 00:01:03,539
for example to customize browser user

21
00:01:03,539 --> 00:01:04,799
interface

22
00:01:04,799 --> 00:01:08,280
but at the same time browser extensions

23
00:01:08,280 --> 00:01:10,740
can introduce severe security and

24
00:01:10,740 --> 00:01:13,260
privacy threats and put the large user

25
00:01:13,260 --> 00:01:14,939
base at risk

26
00:01:14,939 --> 00:01:17,760
for example browser extensions can lead

27
00:01:17,760 --> 00:01:20,640
to the execution of arbitrary code in

28
00:01:20,640 --> 00:01:22,860
any websites even without a

29
00:01:22,860 --> 00:01:25,080
vulnerability in the websites themselves

30
00:01:25,080 --> 00:01:28,320
or sensitive user data exiltration again

31
00:01:28,320 --> 00:01:32,220
to any websites so that's pretty serious

32
00:01:32,220 --> 00:01:35,280
how is this even possible actually so by

33
00:01:35,280 --> 00:01:37,680
Design browser extensions have access to

34
00:01:37,680 --> 00:01:40,920
privileged apis and features for example

35
00:01:40,920 --> 00:01:43,439
to be effective an ad blocker is needs

36
00:01:43,439 --> 00:01:46,020
to modify web page content or intercept

37
00:01:46,020 --> 00:01:48,000
Network requests

38
00:01:48,000 --> 00:01:50,880
in addition browser extensions can do

39
00:01:50,880 --> 00:01:53,100
tasks that web applications cannot

40
00:01:53,100 --> 00:01:54,780
traditionally do

41
00:01:54,780 --> 00:01:57,119
for example web applications are a

42
00:01:57,119 --> 00:01:59,119
subject to the same origin policy

43
00:01:59,119 --> 00:02:02,520
meaning that which like restricts the

44
00:02:02,520 --> 00:02:04,740
resources that they can access will runs

45
00:02:04,740 --> 00:02:06,960
browser extensions can access arbitrary

46
00:02:06,960 --> 00:02:09,300
cross domain data even when a user is

47
00:02:09,300 --> 00:02:10,919
logged in

48
00:02:10,919 --> 00:02:13,260
uh here I would like to highlight that

49
00:02:13,260 --> 00:02:15,959
this work was conducted between 2020 and

50
00:02:15,959 --> 00:02:19,319
2021 and since then Chrome released kind

51
00:02:19,319 --> 00:02:21,540
of new rules for the browser extension

52
00:02:21,540 --> 00:02:24,300
ecosystem so this manifest version 3. so

53
00:02:24,300 --> 00:02:25,739
some things that I'm going to presents

54
00:02:25,739 --> 00:02:28,200
are not necessarily true today anymore

55
00:02:28,200 --> 00:02:30,959
but it depends like which rules the

56
00:02:30,959 --> 00:02:33,360
extensions are uttering

57
00:02:33,360 --> 00:02:35,520
so yeah my point was browser extensions

58
00:02:35,520 --> 00:02:37,620
are highly privileged so they have more

59
00:02:37,620 --> 00:02:39,599
privileges than traditional web pages

60
00:02:39,599 --> 00:02:42,780
and obviously due to their elevated

61
00:02:42,780 --> 00:02:45,599
privileges browser extensions attracts

62
00:02:45,599 --> 00:02:48,900
the interest of attackers

63
00:02:48,900 --> 00:02:51,300
so here I would like to distinguish two

64
00:02:51,300 --> 00:02:53,760
categories of well things that could go

65
00:02:53,760 --> 00:02:55,800
wrong with extension so on the one hand

66
00:02:55,800 --> 00:02:58,140
we have malicious browser extensions

67
00:02:58,140 --> 00:03:00,780
mini extensions designed by malicious

68
00:03:00,780 --> 00:03:03,780
actors with the aim of harming victims

69
00:03:03,780 --> 00:03:06,239
but the good news is Google Engineers

70
00:03:06,239 --> 00:03:08,459
are actively working on detecting

71
00:03:08,459 --> 00:03:10,680
malicious browser extensions in their

72
00:03:10,680 --> 00:03:11,640
store

73
00:03:11,640 --> 00:03:14,220
for example in 2020 they removed

74
00:03:14,220 --> 00:03:17,040
extension extensions exfiltrating user

75
00:03:17,040 --> 00:03:19,980
data they removed extension spying on

76
00:03:19,980 --> 00:03:22,500
users they also removed the extensions

77
00:03:22,500 --> 00:03:24,959
hijacking cryptocurrency wallets or

78
00:03:24,959 --> 00:03:26,879
extensions redirecting to phishing

79
00:03:26,879 --> 00:03:28,920
websites so overall between 2020 and

80
00:03:28,920 --> 00:03:31,980
2021 they removed over 500 extensions

81
00:03:31,980 --> 00:03:34,080
from their store

82
00:03:34,080 --> 00:03:37,140
in addition Google also has this review

83
00:03:37,140 --> 00:03:40,080
system so they review extensions prior

84
00:03:40,080 --> 00:03:42,180
to publication on the Chrome web store

85
00:03:42,180 --> 00:03:45,360
and so overall this makes it harder to

86
00:03:45,360 --> 00:03:47,400
have malicious browser extension so in

87
00:03:47,400 --> 00:03:50,000
the Chrome web store today

88
00:03:50,000 --> 00:03:52,799
unfortunately malicious browser

89
00:03:52,799 --> 00:03:54,840
extension is not the only type of

90
00:03:54,840 --> 00:03:57,000
extensions that can lead to security or

91
00:03:57,000 --> 00:03:58,980
privacy issues

92
00:03:58,980 --> 00:04:01,560
there are also vulnerable browser

93
00:04:01,560 --> 00:04:02,819
extensions

94
00:04:02,819 --> 00:04:05,819
so this time B9 bed buggy extension so

95
00:04:05,819 --> 00:04:08,159
designed by well-intentioned developers

96
00:04:08,159 --> 00:04:11,879
but which contains some vulnerabilities

97
00:04:11,879 --> 00:04:14,700
and so this type of extensions enables

98
00:04:14,700 --> 00:04:17,160
attacker to elevate their privileges to

99
00:04:17,160 --> 00:04:19,440
the capabilities of browser extensions

100
00:04:19,440 --> 00:04:22,260
and due to their inherently benign

101
00:04:22,260 --> 00:04:24,720
intent these extensions are really

102
00:04:24,720 --> 00:04:27,060
challenging to detect and also they can

103
00:04:27,060 --> 00:04:28,560
pass through the review processor

104
00:04:28,560 --> 00:04:30,600
conducted by Google

105
00:04:30,600 --> 00:04:32,940
little work has been done to detect

106
00:04:32,940 --> 00:04:35,280
vulnerable grocery extensions

107
00:04:35,280 --> 00:04:38,340
there is this work from Auckland 2019

108
00:04:38,340 --> 00:04:42,060
from Sumi amp web but the problem is so

109
00:04:42,060 --> 00:04:44,460
he analyzed over 60 000 Chrome

110
00:04:44,460 --> 00:04:45,660
extensions

111
00:04:45,660 --> 00:04:48,300
and he still reported over 3 000

112
00:04:48,300 --> 00:04:51,540
extensions as suspicious meaning that he

113
00:04:51,540 --> 00:04:54,479
needed to manually review these 3000

114
00:04:54,479 --> 00:04:56,940
extensions which took him like a month

115
00:04:56,940 --> 00:05:01,020
and at the end he found that 95 of these

116
00:05:01,020 --> 00:05:04,199
extensions were actually false positives

117
00:05:04,199 --> 00:05:06,780
so in other words detecting vulnerable

118
00:05:06,780 --> 00:05:09,900
extensions precisely and at scale is

119
00:05:09,900 --> 00:05:11,759
still an open problem and this is the

120
00:05:11,759 --> 00:05:14,639
focus of my talk

121
00:05:14,639 --> 00:05:16,979
alright so before diving into our

122
00:05:16,979 --> 00:05:19,620
approach you have to know that an

123
00:05:19,620 --> 00:05:21,300
extension is composed of several

124
00:05:21,300 --> 00:05:22,620
components

125
00:05:22,620 --> 00:05:24,780
and these components have different

126
00:05:24,780 --> 00:05:26,880
privileges

127
00:05:26,880 --> 00:05:29,580
first the content script is injected

128
00:05:29,580 --> 00:05:31,620
into web application and the content

129
00:05:31,620 --> 00:05:34,320
script can use standard Dom apis to read

130
00:05:34,320 --> 00:05:37,139
or modify web pages actually similarly

131
00:05:37,139 --> 00:05:39,240
to the scripts directly loaded by web

132
00:05:39,240 --> 00:05:40,680
pages

133
00:05:40,680 --> 00:05:43,440
then we have background pages so this

134
00:05:43,440 --> 00:05:45,840
time a highly privileged component which

135
00:05:45,840 --> 00:05:48,660
implements the core logic of extension

136
00:05:48,660 --> 00:05:50,820
and which has been replaced by service

137
00:05:50,820 --> 00:05:52,979
workers in the new version so manifest

138
00:05:52,979 --> 00:05:54,240
version 3.

139
00:05:54,240 --> 00:05:57,360
then we have uh like the web accessible

140
00:05:57,360 --> 00:06:00,500
resources so browser extensions can um

141
00:06:00,500 --> 00:06:03,840
expose walls so scripts to be executed

142
00:06:03,840 --> 00:06:06,000
on every web pages

143
00:06:06,000 --> 00:06:09,300
and finally the UI Pages which enable

144
00:06:09,300 --> 00:06:12,000
users to customize extension behaviors

145
00:06:12,000 --> 00:06:13,979
for example over different options

146
00:06:13,979 --> 00:06:17,100
setups or pop-ups

147
00:06:17,100 --> 00:06:19,440
so as you can see on the slide uh

148
00:06:19,440 --> 00:06:22,319
background Pages was and UI pages are

149
00:06:22,319 --> 00:06:24,120
highly privileged and they have access

150
00:06:24,120 --> 00:06:26,300
to the full extensions capabilities

151
00:06:26,300 --> 00:06:28,500
whereas the less privileged content

152
00:06:28,500 --> 00:06:30,840
script only has access to a limited set

153
00:06:30,840 --> 00:06:33,000
of apis

154
00:06:33,000 --> 00:06:35,400
and then all these components can

155
00:06:35,400 --> 00:06:39,060
communicate together over messages

156
00:06:39,060 --> 00:06:41,280
and the second thing an extension can

157
00:06:41,280 --> 00:06:43,080
also communicate to outside of the

158
00:06:43,080 --> 00:06:45,479
extension meaning with web pages or even

159
00:06:45,479 --> 00:06:48,740
with other extension

160
00:06:49,199 --> 00:06:51,960
all right so uh yeah as I was saying

161
00:06:51,960 --> 00:06:54,120
extensions are highly privileged which

162
00:06:54,120 --> 00:06:56,520
is super interesting for attackers and

163
00:06:56,520 --> 00:06:57,840
so now in this slide I'm going to

164
00:06:57,840 --> 00:06:59,819
present what an attacker could actually

165
00:06:59,819 --> 00:07:02,160
do with vulnerable extensions which

166
00:07:02,160 --> 00:07:04,800
privileges an attacker could exploit so

167
00:07:04,800 --> 00:07:07,139
we considered uh four things

168
00:07:07,139 --> 00:07:09,180
first an attacker could execute

169
00:07:09,180 --> 00:07:11,220
arbitrary code in the extension

170
00:07:11,220 --> 00:07:13,380
privilege context so this is really bad

171
00:07:13,380 --> 00:07:15,360
and like the worst case scenario is

172
00:07:15,360 --> 00:07:17,100
probably a universal cross-site

173
00:07:17,100 --> 00:07:18,900
scripting so the ability to execute

174
00:07:18,900 --> 00:07:21,780
arbitrary code in any website even

175
00:07:21,780 --> 00:07:23,819
without even revelating the websites

176
00:07:23,819 --> 00:07:25,440
themselves

177
00:07:25,440 --> 00:07:27,360
an attacker could also gain the

178
00:07:27,360 --> 00:07:29,460
capabilities of triggering arbitrary

179
00:07:29,460 --> 00:07:31,979
downloads to without user consent or

180
00:07:31,979 --> 00:07:34,440
user notice

181
00:07:34,440 --> 00:07:37,080
an attacker could perform an arbitrary

182
00:07:37,080 --> 00:07:39,300
cross origin request so bypassing the

183
00:07:39,300 --> 00:07:41,400
same origin policy

184
00:07:41,400 --> 00:07:43,800
and the first category we considered is

185
00:07:43,800 --> 00:07:46,319
related to data exploration so uh

186
00:07:46,319 --> 00:07:48,900
exfiltrating for example cookies or

187
00:07:48,900 --> 00:07:51,120
browsing history or most visited

188
00:07:51,120 --> 00:07:53,340
websites which can lead to session

189
00:07:53,340 --> 00:07:57,180
hijacking tracking or fingerprinting

190
00:07:57,180 --> 00:08:00,479
uh still note that an extension through

191
00:08:00,479 --> 00:08:01,800
the extension permission is already

192
00:08:01,800 --> 00:08:04,139
declared in a file to the Manifest file

193
00:08:04,139 --> 00:08:07,080
so one extension do not necessarily have

194
00:08:07,080 --> 00:08:09,060
all the permissions you can see on the

195
00:08:09,060 --> 00:08:11,759
slide I mean it depends uh and then this

196
00:08:11,759 --> 00:08:14,639
user can also accept or not depending on

197
00:08:14,639 --> 00:08:18,539
how sub permission is is defined so this

198
00:08:18,539 --> 00:08:20,580
is like the worst case scenario but then

199
00:08:20,580 --> 00:08:22,199
I mean we are also checking if the

200
00:08:22,199 --> 00:08:24,240
extension has a corresponding privileges

201
00:08:24,240 --> 00:08:26,460
or not

202
00:08:26,460 --> 00:08:28,680
all right so now how can vulnerable

203
00:08:28,680 --> 00:08:31,319
extensions uh be exploited and we

204
00:08:31,319 --> 00:08:34,200
considered two attacker scenarios so the

205
00:08:34,200 --> 00:08:36,240
first one uh well the famous web

206
00:08:36,240 --> 00:08:38,760
attacker so as I was saying browser

207
00:08:38,760 --> 00:08:41,039
extensions can communicate with web

208
00:08:41,039 --> 00:08:43,320
pages over messages

209
00:08:43,320 --> 00:08:45,720
meaning that a web page under the

210
00:08:45,720 --> 00:08:47,700
control of an attacker can send

211
00:08:47,700 --> 00:08:49,740
malicious payloads to a vulnerable

212
00:08:49,740 --> 00:08:53,339
extension tailored to exploit its flows

213
00:08:53,339 --> 00:08:55,920
in practice an attacker's web attacker

214
00:08:55,920 --> 00:08:58,140
can just trick a user into visiting a

215
00:08:58,140 --> 00:09:00,899
malicious or a compromise web page under

216
00:09:00,899 --> 00:09:03,120
the control of an attacker that can

217
00:09:03,120 --> 00:09:05,100
communicate with a vulnerable extension

218
00:09:05,100 --> 00:09:08,160
the user has installed

219
00:09:08,160 --> 00:09:10,680
and so this way an attacker can Elevate

220
00:09:10,680 --> 00:09:13,080
the Privileges to the capabilities of an

221
00:09:13,080 --> 00:09:15,180
extension and so as I was saying

222
00:09:15,180 --> 00:09:16,980
previously gains capabilities of

223
00:09:16,980 --> 00:09:19,740
executing arbitrary code or exfiltrate

224
00:09:19,740 --> 00:09:22,320
sensitive user data

225
00:09:22,320 --> 00:09:24,959
all right so an example of like such a

226
00:09:24,959 --> 00:09:26,820
vulnerable extension so this is a very

227
00:09:26,820 --> 00:09:29,100
simplistic example we only have an

228
00:09:29,100 --> 00:09:31,380
extension with one component a Content

229
00:09:31,380 --> 00:09:33,959
script and what is going on here is the

230
00:09:33,959 --> 00:09:35,640
content script is just listening to

231
00:09:35,640 --> 00:09:38,880
messages coming from any uh web pages

232
00:09:38,880 --> 00:09:41,339
and then the receive messages is flying

233
00:09:41,339 --> 00:09:44,220
into eval so here we have arbitrary code

234
00:09:44,220 --> 00:09:47,220
execution in the content script which

235
00:09:47,220 --> 00:09:49,440
could lead to the attacker being able to

236
00:09:49,440 --> 00:09:51,959
exploit all the extension privileges for

237
00:09:51,959 --> 00:09:53,160
example

238
00:09:53,160 --> 00:09:55,380
it would actually be worse if this would

239
00:09:55,380 --> 00:09:57,420
be in the background page because due to

240
00:09:57,420 --> 00:10:00,060
the extension elevated privileges an

241
00:10:00,060 --> 00:10:01,740
attacker would have like Universal

242
00:10:01,740 --> 00:10:04,640
cross-site scripting

243
00:10:04,800 --> 00:10:06,959
um so obviously having a compromised web

244
00:10:06,959 --> 00:10:09,600
page is already a problem but having a

245
00:10:09,600 --> 00:10:11,459
compromised browser extension is

246
00:10:11,459 --> 00:10:14,160
actually much more powerful because a

247
00:10:14,160 --> 00:10:16,440
web attacker can exploit the extension

248
00:10:16,440 --> 00:10:19,440
elevated privileges to attack unrelated

249
00:10:19,440 --> 00:10:21,959
sites and exfiltrate sensitive user data

250
00:10:21,959 --> 00:10:25,219
to any websites

251
00:10:25,260 --> 00:10:27,839
all right second scenario then uh

252
00:10:27,839 --> 00:10:31,260
confused Deputy so an attacker can trick

253
00:10:31,260 --> 00:10:33,480
a user into installing a specific

254
00:10:33,480 --> 00:10:35,580
extension under the control of an

255
00:10:35,580 --> 00:10:38,040
attacker and so as previously so this

256
00:10:38,040 --> 00:10:40,260
malicious extension would send a

257
00:10:40,260 --> 00:10:42,060
malicious payload to the vulnerable

258
00:10:42,060 --> 00:10:43,920
extension the attacker is trying to

259
00:10:43,920 --> 00:10:46,140
exploit and so the vulnerable extension

260
00:10:46,140 --> 00:10:48,720
is actually the confused deputy

261
00:10:48,720 --> 00:10:51,300
and so in malicious extension using this

262
00:10:51,300 --> 00:10:54,060
technique is much harder to detect than

263
00:10:54,060 --> 00:10:56,640
a classical malicious extension

264
00:10:56,640 --> 00:10:58,620
because it does not need to have like

265
00:10:58,620 --> 00:11:00,899
any specific permission or actually use

266
00:11:00,899 --> 00:11:03,839
any suspicious API see this extension

267
00:11:03,839 --> 00:11:06,240
could just pretend to do like whatever

268
00:11:06,240 --> 00:11:08,339
and actually what it is doing like in

269
00:11:08,339 --> 00:11:10,200
the background is just sending malicious

270
00:11:10,200 --> 00:11:12,120
payloads to exploit vulnerable

271
00:11:12,120 --> 00:11:13,800
extensions

272
00:11:13,800 --> 00:11:15,839
and so such extension can actually pass

273
00:11:15,839 --> 00:11:17,760
through the review process conducted by

274
00:11:17,760 --> 00:11:20,339
Google so we just did like a small case

275
00:11:20,339 --> 00:11:22,860
study to evaluate the feasibility of

276
00:11:22,860 --> 00:11:25,380
such an attack so we wrote a small

277
00:11:25,380 --> 00:11:27,779
browser extension which pretended to

278
00:11:27,779 --> 00:11:30,540
customize the default new top page but

279
00:11:30,540 --> 00:11:32,579
was actually sending malicious payloads

280
00:11:32,579 --> 00:11:34,740
to two vulnerable extensions uh we

281
00:11:34,740 --> 00:11:37,140
deducted and so we uploaded our

282
00:11:37,140 --> 00:11:39,540
extension on the Chrome web store and

283
00:11:39,540 --> 00:11:41,880
after like one day um like the extension

284
00:11:41,880 --> 00:11:43,920
was uh on the store and so we could

285
00:11:43,920 --> 00:11:45,839
install it along with the two vulnerable

286
00:11:45,839 --> 00:11:48,839
extensions we were targeting and we can

287
00:11:48,839 --> 00:11:50,760
confirm that we could actually exploit

288
00:11:50,760 --> 00:11:52,980
these two uh extensions

289
00:11:52,980 --> 00:11:54,779
but here again I would like to highlight

290
00:11:54,779 --> 00:11:57,300
this was really a case study so we did

291
00:11:57,300 --> 00:11:59,640
only test this extension against our

292
00:11:59,640 --> 00:12:02,640
cells we did not harm any users the

293
00:12:02,640 --> 00:12:05,160
visibility of our extension was unlisted

294
00:12:05,160 --> 00:12:07,380
so that only people with the link could

295
00:12:07,380 --> 00:12:08,820
see it and obviously we did not

296
00:12:08,820 --> 00:12:11,160
advertise the link and at the end we

297
00:12:11,160 --> 00:12:12,959
could check that this extension was

298
00:12:12,959 --> 00:12:15,779
downloaded only once by us like to test

299
00:12:15,779 --> 00:12:18,420
it so no users were harmed and no

300
00:12:18,420 --> 00:12:19,980
details of the vulnerable extensions

301
00:12:19,980 --> 00:12:23,180
were made public here

302
00:12:23,279 --> 00:12:26,100
all right so here again a small example

303
00:12:26,100 --> 00:12:29,880
of um well a confused Deputy uh case we

304
00:12:29,880 --> 00:12:31,740
we have two extensions so you can see

305
00:12:31,740 --> 00:12:35,160
the confused Deputy extension B which is

306
00:12:35,160 --> 00:12:37,680
listening to messages coming from any

307
00:12:37,680 --> 00:12:40,019
browser extensions because again it's a

308
00:12:40,019 --> 00:12:42,180
bit weird but by default laboratory

309
00:12:42,180 --> 00:12:44,880
extension can receive messages from any

310
00:12:44,880 --> 00:12:47,040
extension so if you do not say I only

311
00:12:47,040 --> 00:12:48,779
want to receive a message from like this

312
00:12:48,779 --> 00:12:50,279
specific list of extensions like

313
00:12:50,279 --> 00:12:52,380
everybody can just send you messages and

314
00:12:52,380 --> 00:12:55,380
that's kind of bad uh yeah because in

315
00:12:55,380 --> 00:12:57,420
this example so this uh countries

316
00:12:57,420 --> 00:12:59,639
deputies the vulnerable extension is

317
00:12:59,639 --> 00:13:03,000
calling sensitive bookmarks API and he's

318
00:13:03,000 --> 00:13:05,279
just sending the results uh of like

319
00:13:05,279 --> 00:13:07,380
calling this uh this function to like

320
00:13:07,380 --> 00:13:09,779
the extension which uh send a message in

321
00:13:09,779 --> 00:13:11,700
the first place so here we have

322
00:13:11,700 --> 00:13:14,339
sensitive user data exploration to any

323
00:13:14,339 --> 00:13:15,959
browser extensions

324
00:13:15,959 --> 00:13:18,240
and I mean obviously for this example to

325
00:13:18,240 --> 00:13:20,459
work the user would have to have like

326
00:13:20,459 --> 00:13:24,199
these two extensions installed

327
00:13:24,240 --> 00:13:26,579
all right so uh to sum up like our

328
00:13:26,579 --> 00:13:30,120
thread model we consider two scenarios a

329
00:13:30,120 --> 00:13:33,260
web attacker and a conscious deputy and

330
00:13:33,260 --> 00:13:37,139
our attackers can uh or we consider like

331
00:13:37,139 --> 00:13:41,040
the the sensitive apis related to uh

332
00:13:41,040 --> 00:13:43,860
well code execution triggering downloads

333
00:13:43,860 --> 00:13:45,600
across the region requests and data

334
00:13:45,600 --> 00:13:47,760
exfiltration and I show you the the apis

335
00:13:47,760 --> 00:13:49,620
we're considering like on the slide

336
00:13:49,620 --> 00:13:51,120
previously

337
00:13:51,120 --> 00:13:53,940
and So based on what I I just said the

338
00:13:53,940 --> 00:13:56,459
vulnerabilities we are targeting are

339
00:13:56,459 --> 00:13:58,380
actually coming from the fact that

340
00:13:58,380 --> 00:14:01,320
external actors so attackers web pages

341
00:14:01,320 --> 00:14:04,380
or other extensions can send malicious

342
00:14:04,380 --> 00:14:07,079
payloads to a vulnerable extension or

343
00:14:07,079 --> 00:14:09,000
that to vulnerable extension sense

344
00:14:09,000 --> 00:14:12,240
sensitive user data to like other folks

345
00:14:12,240 --> 00:14:15,060
and so in our paper uh while we are

346
00:14:15,060 --> 00:14:17,399
working on detecting such suspicious

347
00:14:17,399 --> 00:14:19,740
external data flows in browser

348
00:14:19,740 --> 00:14:22,220
extensions

349
00:14:23,220 --> 00:14:25,019
all right so we detect suspicious

350
00:14:25,019 --> 00:14:27,360
external data flows with our Tool uh

351
00:14:27,360 --> 00:14:29,360
double cross which we presented at

352
00:14:29,360 --> 00:14:32,100
acmccs 2021

353
00:14:32,100 --> 00:14:34,500
I will give you an overview of our

354
00:14:34,500 --> 00:14:36,839
approach on this slide and go into each

355
00:14:36,839 --> 00:14:39,060
component into more details in the next

356
00:14:39,060 --> 00:14:40,680
few slides

357
00:14:40,680 --> 00:14:42,899
so first what double cross is doing is

358
00:14:42,899 --> 00:14:45,300
abstracting the code of each extension

359
00:14:45,300 --> 00:14:47,639
component independently

360
00:14:47,639 --> 00:14:50,160
then we Define what we called an

361
00:14:50,160 --> 00:14:54,360
extension dependence graph an EDG

362
00:14:54,360 --> 00:14:56,420
and here we are collecting messages

363
00:14:56,420 --> 00:14:58,680
exchanged between each extension

364
00:14:58,680 --> 00:15:00,779
components and also messages coming from

365
00:15:00,779 --> 00:15:03,540
outside of an extension for example from

366
00:15:03,540 --> 00:15:05,459
web pages or a nozzle extension meaning

367
00:15:05,459 --> 00:15:09,480
from an attacker in our threat model

368
00:15:09,480 --> 00:15:12,240
then we determine if there is a data

369
00:15:12,240 --> 00:15:14,760
flow between external actors and the

370
00:15:14,760 --> 00:15:17,279
sensitive apis we considered so in other

371
00:15:17,279 --> 00:15:20,100
words we are looking for security or

372
00:15:20,100 --> 00:15:22,680
privacy critical apis in browser

373
00:15:22,680 --> 00:15:25,620
extensions and then we perform a data

374
00:15:25,620 --> 00:15:27,959
flow analysis to detect any path between

375
00:15:27,959 --> 00:15:30,360
an attacker and this sensitive apis we

376
00:15:30,360 --> 00:15:32,279
are targeting

377
00:15:32,279 --> 00:15:34,740
and finally double Crush reports is a

378
00:15:34,740 --> 00:15:37,139
suspicious data flows e-detected

379
00:15:37,139 --> 00:15:39,540
so that's the overall picture now I will

380
00:15:39,540 --> 00:15:41,399
go through each component into more

381
00:15:41,399 --> 00:15:44,060
details

382
00:15:45,000 --> 00:15:47,100
so you can see here the same example as

383
00:15:47,100 --> 00:15:49,199
before so the content script receives

384
00:15:49,199 --> 00:15:51,660
messages from all web pages and the

385
00:15:51,660 --> 00:15:53,699
messages are then flowing directly into

386
00:15:53,699 --> 00:15:55,920
a Val so we have code execution in the

387
00:15:55,920 --> 00:15:57,779
content script here

388
00:15:57,779 --> 00:15:59,459
and so the first step double cross

389
00:15:59,459 --> 00:16:02,519
builds uh the AST to abstract the code

390
00:16:02,519 --> 00:16:04,860
over the abstract syntax tree which

391
00:16:04,860 --> 00:16:07,320
gives us a tree representation of the

392
00:16:07,320 --> 00:16:09,600
code syntactic structure

393
00:16:09,600 --> 00:16:12,600
so you can see the AST uh here but for

394
00:16:12,600 --> 00:16:14,639
legibility reasons I will just show you

395
00:16:14,639 --> 00:16:16,980
everything uh on the code just know that

396
00:16:16,980 --> 00:16:19,980
we're actually working uh on the tree

397
00:16:19,980 --> 00:16:22,500
all right so double crochet Traverse CC

398
00:16:22,500 --> 00:16:25,260
AST and keep track of the encountered

399
00:16:25,260 --> 00:16:27,959
variable and so this way we can detect

400
00:16:27,959 --> 00:16:30,019
the dependency between the two event

401
00:16:30,019 --> 00:16:33,120
variables and add these data flow Edge

402
00:16:33,120 --> 00:16:35,519
which enables us to present about data

403
00:16:35,519 --> 00:16:37,920
dependency and so it's important here

404
00:16:37,920 --> 00:16:39,600
because we can see that the event

405
00:16:39,600 --> 00:16:42,060
variable in the eval call is actually

406
00:16:42,060 --> 00:16:45,000
attacker controllable

407
00:16:45,000 --> 00:16:46,560
all right so I'm going to slightly

408
00:16:46,560 --> 00:16:48,779
change the example here and add a

409
00:16:48,779 --> 00:16:50,040
condition

410
00:16:50,040 --> 00:16:52,740
Again by traversing the AST double cross

411
00:16:52,740 --> 00:16:55,500
detects the if condition and determines

412
00:16:55,500 --> 00:16:58,019
that it always evaluates to true so

413
00:16:58,019 --> 00:16:59,699
that's the call to eval is always

414
00:16:59,699 --> 00:17:01,620
executed

415
00:17:01,620 --> 00:17:04,559
so we add control flow edges in our AST

416
00:17:04,559 --> 00:17:07,919
to be able to reason about conditions

417
00:17:07,919 --> 00:17:09,660
now I'm going to slightly change the

418
00:17:09,660 --> 00:17:12,720
example again so that the call to eval

419
00:17:12,720 --> 00:17:14,339
which is not written in plain text

420
00:17:14,339 --> 00:17:15,839
anymore

421
00:17:15,839 --> 00:17:18,059
and here double cross can compute the

422
00:17:18,059 --> 00:17:20,400
string concatenation and recognize the

423
00:17:20,400 --> 00:17:22,740
access of the event function property of

424
00:17:22,740 --> 00:17:26,819
the window object with bracket notation

425
00:17:26,819 --> 00:17:28,679
so we have what we call a pointer

426
00:17:28,679 --> 00:17:31,140
analysis module to be able to compute

427
00:17:31,140 --> 00:17:34,160
variable values so that we can recognize

428
00:17:34,160 --> 00:17:37,620
variables or apis which are aliased or

429
00:17:37,620 --> 00:17:39,720
not directly written in plain text like

430
00:17:39,720 --> 00:17:41,520
on the slide here

431
00:17:41,520 --> 00:17:44,100
and these four steps that I presented or

432
00:17:44,100 --> 00:17:46,939
done statically

433
00:17:47,100 --> 00:17:49,500
all right so I presented our approach to

434
00:17:49,500 --> 00:17:51,299
abstract the source code of each

435
00:17:51,299 --> 00:17:53,880
extension component independently and

436
00:17:53,880 --> 00:17:56,100
now I can move on to the next step and

437
00:17:56,100 --> 00:17:57,900
explain how we model the message

438
00:17:57,900 --> 00:18:00,480
interactions within and outside of an

439
00:18:00,480 --> 00:18:02,900
extension

440
00:18:03,000 --> 00:18:05,039
I'm considering the same example as

441
00:18:05,039 --> 00:18:07,320
before and so double cross is going to

442
00:18:07,320 --> 00:18:09,900
Traverse the AST to enhance this control

443
00:18:09,900 --> 00:18:12,120
for information data for information and

444
00:18:12,120 --> 00:18:14,460
pointer analysis of each extension

445
00:18:14,460 --> 00:18:16,860
component independently

446
00:18:16,860 --> 00:18:19,200
and so by doing so it can detect the

447
00:18:19,200 --> 00:18:22,380
message passing apis apis to window dot

448
00:18:22,380 --> 00:18:24,539
add event listener and again could

449
00:18:24,539 --> 00:18:26,760
recognize API is not directly written in

450
00:18:26,760 --> 00:18:28,620
plain text

451
00:18:28,620 --> 00:18:30,720
and once we know like where is the

452
00:18:30,720 --> 00:18:32,940
message Api is we can extract the

453
00:18:32,940 --> 00:18:34,919
corresponding message which is uh well

454
00:18:34,919 --> 00:18:36,299
even here

455
00:18:36,299 --> 00:18:38,640
and so event is coming from a web page

456
00:18:38,640 --> 00:18:41,520
meaning from an attacker in our scenario

457
00:18:41,520 --> 00:18:44,700
cool let's consider another example for

458
00:18:44,700 --> 00:18:47,520
the internal message case so we have an

459
00:18:47,520 --> 00:18:49,200
extension with two components this time

460
00:18:49,200 --> 00:18:51,600
obviously the content script is sending

461
00:18:51,600 --> 00:18:53,940
a message to the background page and the

462
00:18:53,940 --> 00:18:55,620
background page is receiving a message

463
00:18:55,620 --> 00:18:57,660
from the content script and so by

464
00:18:57,660 --> 00:19:00,360
traversing the AST of each extension

465
00:19:00,360 --> 00:19:03,840
component independently so we detect the

466
00:19:03,840 --> 00:19:06,419
message passing apis and then we can

467
00:19:06,419 --> 00:19:08,700
collect the corresponding messages and

468
00:19:08,700 --> 00:19:11,039
so what we do here is that we connect

469
00:19:11,039 --> 00:19:13,260
the sender nodes to the corresponding

470
00:19:13,260 --> 00:19:16,200
receiver nodes so we join the individual

471
00:19:16,200 --> 00:19:19,020
component graph with a message flow to

472
00:19:19,020 --> 00:19:21,780
represent message interactions

473
00:19:21,780 --> 00:19:24,720
and so we built what we call this edges

474
00:19:24,720 --> 00:19:27,539
extension dependence graph which models

475
00:19:27,539 --> 00:19:29,820
message interactions within and outside

476
00:19:29,820 --> 00:19:32,899
of an extension

477
00:19:33,840 --> 00:19:35,820
all right and so with this EDG code

478
00:19:35,820 --> 00:19:38,280
abstraction we can actually detect

479
00:19:38,280 --> 00:19:43,399
suspicious data Flows at extension level

480
00:19:44,100 --> 00:19:45,960
so the question we are trying to answer

481
00:19:45,960 --> 00:19:49,260
is is there a data flow between external

482
00:19:49,260 --> 00:19:52,020
actors so attackers and security or

483
00:19:52,020 --> 00:19:54,179
privacy critical apis in browser

484
00:19:54,179 --> 00:19:55,380
extensions

485
00:19:55,380 --> 00:19:59,280
so our sensitive API here is eval we

486
00:19:59,280 --> 00:20:01,620
have a list of sensitive apis depending

487
00:20:01,620 --> 00:20:03,059
on the extension permission as I

488
00:20:03,059 --> 00:20:04,500
presented you at the beginning of this

489
00:20:04,500 --> 00:20:07,260
presentation and so here we have

490
00:20:07,260 --> 00:20:09,660
attacker control label data which we can

491
00:20:09,660 --> 00:20:12,299
track across the extension

492
00:20:12,299 --> 00:20:14,100
so here obviously in this super

493
00:20:14,100 --> 00:20:16,740
simplistic example an attacker can

494
00:20:16,740 --> 00:20:20,039
control the parameter of Evas we we have

495
00:20:20,039 --> 00:20:22,080
arbitrary code execution in the content

496
00:20:22,080 --> 00:20:23,760
script

497
00:20:23,760 --> 00:20:26,100
and then double cross summarizes its

498
00:20:26,100 --> 00:20:28,860
findings in a data flow report so you

499
00:20:28,860 --> 00:20:30,780
can see an extract of our data flow

500
00:20:30,780 --> 00:20:33,120
report at the bottom of the slide where

501
00:20:33,120 --> 00:20:35,520
the suspicious call to eval with

502
00:20:35,520 --> 00:20:39,740
attacker controllable data is reported

503
00:20:40,080 --> 00:20:41,940
now I'm going to slightly change the

504
00:20:41,940 --> 00:20:43,860
example just so that you see that double

505
00:20:43,860 --> 00:20:45,539
cross is not always saying this is

506
00:20:45,539 --> 00:20:48,660
vulnerable uh so I'm redefining this

507
00:20:48,660 --> 00:20:51,240
event variable and as you can see double

508
00:20:51,240 --> 00:20:53,340
cross detects a new definition you can

509
00:20:53,340 --> 00:20:55,320
see the data flow between line 7 and

510
00:20:55,320 --> 00:20:56,640
line eight

511
00:20:56,640 --> 00:20:59,700
and as you can see on the report double

512
00:20:59,700 --> 00:21:03,120
cross correctly compute the value 42 uh

513
00:21:03,120 --> 00:21:05,700
so for like the second call to eval

514
00:21:05,700 --> 00:21:07,679
so the second call to eval is not

515
00:21:07,679 --> 00:21:09,840
article controllable

516
00:21:09,840 --> 00:21:13,380
so in this example uh I can or I showed

517
00:21:13,380 --> 00:21:15,240
you that our combination of data for

518
00:21:15,240 --> 00:21:17,820
analysis and pointer analysis enables us

519
00:21:17,820 --> 00:21:20,400
to accurately label the first call to

520
00:21:20,400 --> 00:21:22,679
eval as vulnerable without

521
00:21:22,679 --> 00:21:26,360
misclassifying the second one

522
00:21:26,940 --> 00:21:28,799
okay so before you think it's only

523
00:21:28,799 --> 00:21:30,600
working on like small and simplistic

524
00:21:30,600 --> 00:21:33,419
example I'm just considering um

525
00:21:33,419 --> 00:21:35,460
an extension which is a bit more

526
00:21:35,460 --> 00:21:37,740
complicated with two components this

527
00:21:37,740 --> 00:21:40,679
time uh and so what is going on so we

528
00:21:40,679 --> 00:21:42,240
have a Content script which again

529
00:21:42,240 --> 00:21:44,940
receives messages from all web pages so

530
00:21:44,940 --> 00:21:47,039
from an attacker

531
00:21:47,039 --> 00:21:49,440
and then the message is just stored into

532
00:21:49,440 --> 00:21:52,440
these two variables here and the content

533
00:21:52,440 --> 00:21:54,840
script sends or kind of forwards the

534
00:21:54,840 --> 00:21:56,760
attacker control label data to the

535
00:21:56,760 --> 00:21:58,320
background page

536
00:21:58,320 --> 00:22:00,419
the background page receives this

537
00:22:00,419 --> 00:22:02,340
attacker control label data so which you

538
00:22:02,340 --> 00:22:04,799
can see with the message flow and then

539
00:22:04,799 --> 00:22:06,900
this attacker controllable data is

540
00:22:06,900 --> 00:22:09,780
flowing into tabs.execute script so here

541
00:22:09,780 --> 00:22:11,700
we have like a universal cross-site

542
00:22:11,700 --> 00:22:13,320
scripting in the background page so an

543
00:22:13,320 --> 00:22:15,179
attacker can just execute arbitrary code

544
00:22:15,179 --> 00:22:17,280
in the content in the background page

545
00:22:17,280 --> 00:22:19,679
sorry I can execute arbitrary code in

546
00:22:19,679 --> 00:22:22,320
any website sorry independently of

547
00:22:22,320 --> 00:22:23,580
whether the websites have

548
00:22:23,580 --> 00:22:26,220
vulnerabilities or not

549
00:22:26,220 --> 00:22:29,520
and here's with a double cross report so

550
00:22:29,520 --> 00:22:31,880
you can see like the vulnerable code

551
00:22:31,880 --> 00:22:34,620
vulnerable call to uh tabs.execute

552
00:22:34,620 --> 00:22:37,200
script which is reported

553
00:22:37,200 --> 00:22:39,179
so again it's also kind of a small and

554
00:22:39,179 --> 00:22:41,280
simplistic example but which illustrates

555
00:22:41,280 --> 00:22:44,520
the main idea of our approach uh but you

556
00:22:44,520 --> 00:22:46,620
can know I mean we can also handle cases

557
00:22:46,620 --> 00:22:48,960
where messages are forwarded back and

558
00:22:48,960 --> 00:22:51,080
forth between the extension components

559
00:22:51,080 --> 00:22:54,240
we can handle cases like this one but

560
00:22:54,240 --> 00:22:56,580
also when attacker controllable data is

561
00:22:56,580 --> 00:22:59,400
exfiltrated so it's I mean like CID is

562
00:22:59,400 --> 00:23:01,380
the same just we are tracking sensitive

563
00:23:01,380 --> 00:23:03,960
user data and seeing if the data is sent

564
00:23:03,960 --> 00:23:06,720
to like another extension or to web

565
00:23:06,720 --> 00:23:09,679
pages at some point

566
00:23:10,080 --> 00:23:12,179
all right so let's move on to the

567
00:23:12,179 --> 00:23:15,000
evaluation part of our approach so we

568
00:23:15,000 --> 00:23:18,840
evaluated double cross on over 155

569
00:23:18,840 --> 00:23:21,179
000 Chrome extensions which we collected

570
00:23:21,179 --> 00:23:23,159
in 2021

571
00:23:23,159 --> 00:23:24,980
double cross reported

572
00:23:24,980 --> 00:23:28,860
278 extensions as having a data flow

573
00:23:28,860 --> 00:23:31,080
between an attacker and security or

574
00:23:31,080 --> 00:23:33,960
privacy critical apis

575
00:23:33,960 --> 00:23:38,340
this suspicious data flows expand to 309

576
00:23:38,340 --> 00:23:40,260
uh so this suspicious extension sorry

577
00:23:40,260 --> 00:23:43,980
expand to 309 suspicious data flows the

578
00:23:43,980 --> 00:23:46,559
majority of which are related to a code

579
00:23:46,559 --> 00:23:49,140
execution as you can see on the table

580
00:23:49,140 --> 00:23:51,179
and so you may be wondering why we have

581
00:23:51,179 --> 00:23:53,039
more suspicious data flows than

582
00:23:53,039 --> 00:23:55,500
suspicious extensions it's because one

583
00:23:55,500 --> 00:23:57,539
suspicious extension can have several

584
00:23:57,539 --> 00:23:59,220
suspicious data flows I mean it can be

585
00:23:59,220 --> 00:24:01,799
exploited like several apis of one given

586
00:24:01,799 --> 00:24:04,140
extension can be exploited

587
00:24:04,140 --> 00:24:07,700
so we manually reviewed this 309 reports

588
00:24:07,700 --> 00:24:10,020
so basically we had kind of two

589
00:24:10,020 --> 00:24:12,419
scenarios either easily they were

590
00:24:12,419 --> 00:24:15,059
trivially bypassable so it was clearly

591
00:24:15,059 --> 00:24:17,520
vulnerable or clearly not vulnerable and

592
00:24:17,520 --> 00:24:19,320
then we could label the reports

593
00:24:19,320 --> 00:24:21,780
accordingly or it was a bit more

594
00:24:21,780 --> 00:24:24,120
complicated and in this case we

595
00:24:24,120 --> 00:24:26,280
installed the extension locally and

596
00:24:26,280 --> 00:24:28,320
build a payload and tested whether we

597
00:24:28,320 --> 00:24:31,500
could exploit the extension or not

598
00:24:31,500 --> 00:24:35,640
so overall we confirmed that 89 of the

599
00:24:35,640 --> 00:24:38,159
suspicious data flows we've reported are

600
00:24:38,159 --> 00:24:40,679
indeed dangerous meaning controllable by

601
00:24:40,679 --> 00:24:43,140
an attacker or or exfiltrating sensitive

602
00:24:43,140 --> 00:24:45,059
user data

603
00:24:45,059 --> 00:24:48,600
officers we could exploit 209 so

604
00:24:48,600 --> 00:24:51,059
suspicious data flows under our threat

605
00:24:51,059 --> 00:24:52,200
model

606
00:24:52,200 --> 00:24:54,419
and again we may be wondering why there

607
00:24:54,419 --> 00:24:55,919
is a difference between verified

608
00:24:55,919 --> 00:24:58,320
dangerous data flows and exploitable

609
00:24:58,320 --> 00:25:01,380
data flows so let's take an example if

610
00:25:01,380 --> 00:25:03,299
you have like a crossover region request

611
00:25:03,299 --> 00:25:05,820
where an attacker can only control a

612
00:25:05,820 --> 00:25:08,640
part of a URL so we have like a

613
00:25:08,640 --> 00:25:10,440
suspicious data flow we have a verified

614
00:25:10,440 --> 00:25:13,440
dangerous data flow here but in our

615
00:25:13,440 --> 00:25:16,020
threat model we aim at making arbitrary

616
00:25:16,020 --> 00:25:18,299
requests which is like not the case if

617
00:25:18,299 --> 00:25:20,400
an attacker can only control a part of Z

618
00:25:20,400 --> 00:25:22,919
URL so this would not be exploitable in

619
00:25:22,919 --> 00:25:25,520
our setting

620
00:25:25,679 --> 00:25:28,140
all right so now let's have a look at

621
00:25:28,140 --> 00:25:30,299
four case studies of vulnerable

622
00:25:30,299 --> 00:25:32,039
extensions that we found on the Chrome

623
00:25:32,039 --> 00:25:34,860
web store so in 2021 as a double trust

624
00:25:34,860 --> 00:25:36,299
detected

625
00:25:36,299 --> 00:25:39,779
first extension has a total of 4 000

626
00:25:39,779 --> 00:25:42,779
users and can be exploited by any

627
00:25:42,779 --> 00:25:43,980
websites

628
00:25:43,980 --> 00:25:46,320
to execute arbitrary code in the

629
00:25:46,320 --> 00:25:48,539
extension privilege context

630
00:25:48,539 --> 00:25:50,880
so what is going on here the content

631
00:25:50,880 --> 00:25:52,860
script can receive messages from any

632
00:25:52,860 --> 00:25:55,620
websites and then directly forwards all

633
00:25:55,620 --> 00:25:57,419
messages directly to the background page

634
00:25:57,419 --> 00:25:59,580
so new sanitization will check whatever

635
00:25:59,580 --> 00:26:02,159
and the messages are also directly

636
00:26:02,159 --> 00:26:05,640
flying into a tabs.execute script so

637
00:26:05,640 --> 00:26:07,620
here it's like a textbook case of

638
00:26:07,620 --> 00:26:10,320
universal cross-site scripting

639
00:26:10,320 --> 00:26:12,600
and so obviously this example highlights

640
00:26:12,600 --> 00:26:15,299
the dangers of trusting input data which

641
00:26:15,299 --> 00:26:18,900
can be provided by like an attacker

642
00:26:18,900 --> 00:26:21,900
second example an extension with over

643
00:26:21,900 --> 00:26:24,240
200 000 users

644
00:26:24,240 --> 00:26:26,460
but which can receive messages only from

645
00:26:26,460 --> 00:26:29,159
one specific website

646
00:26:29,159 --> 00:26:31,799
but by sending messages this website

647
00:26:31,799 --> 00:26:34,380
came can make arbitrary requests and

648
00:26:34,380 --> 00:26:36,179
leak their content

649
00:26:36,179 --> 00:26:38,580
so you may be wondering I mean perhaps

650
00:26:38,580 --> 00:26:40,559
the extension is the website or working

651
00:26:40,559 --> 00:26:42,600
together so perhaps this is an interning

652
00:26:42,600 --> 00:26:44,220
functionality I mean it's probably the

653
00:26:44,220 --> 00:26:47,220
case but the problem is if this website

654
00:26:47,220 --> 00:26:49,559
gets compromised and it does not seem so

655
00:26:49,559 --> 00:26:51,419
far-fetched I mean even Google had an

656
00:26:51,419 --> 00:26:54,779
excess vulnerability in 2019 so if this

657
00:26:54,779 --> 00:26:57,539
website gets compromised an attacker

658
00:26:57,539 --> 00:26:59,520
could leverage the extension elevated

659
00:26:59,520 --> 00:27:02,880
privileges to make arbitrary requests to

660
00:27:02,880 --> 00:27:06,720
any websites and Link their content

661
00:27:06,720 --> 00:27:09,000
so this example uh highlights the

662
00:27:09,000 --> 00:27:11,220
dangers of authorizing websites to make

663
00:27:11,220 --> 00:27:14,220
arbitrary cross origin requests instead

664
00:27:14,220 --> 00:27:16,559
of preferring the more secure course

665
00:27:16,559 --> 00:27:18,840
alternative for example which would

666
00:27:18,840 --> 00:27:20,820
restrict the resources that can be

667
00:27:20,820 --> 00:27:23,299
accessed

668
00:27:24,120 --> 00:27:26,520
through the example we detected so an

669
00:27:26,520 --> 00:27:29,159
extension with over 700

670
00:27:29,159 --> 00:27:31,799
000 users which again can communicate

671
00:27:31,799 --> 00:27:34,260
with only one specific website but as

672
00:27:34,260 --> 00:27:36,900
previously this gets problematic if the

673
00:27:36,900 --> 00:27:37,919
website

674
00:27:37,919 --> 00:27:40,440
gets compromised and so here what is

675
00:27:40,440 --> 00:27:43,799
going on so uh an attacker has to send a

676
00:27:43,799 --> 00:27:45,600
payload to the content script and

677
00:27:45,600 --> 00:27:47,279
sending a message to the content script

678
00:27:47,279 --> 00:27:48,600
triggers

679
00:27:48,600 --> 00:27:50,220
um like the sending of a message to the

680
00:27:50,220 --> 00:27:53,220
background page asking for uh top site

681
00:27:53,220 --> 00:27:56,340
information so for the the user most

682
00:27:56,340 --> 00:27:58,320
consulted websites

683
00:27:58,320 --> 00:28:00,360
and then this information is sent to the

684
00:28:00,360 --> 00:28:02,460
content script which sends forwards it

685
00:28:02,460 --> 00:28:04,980
to like a website suit to an attacker

686
00:28:04,980 --> 00:28:07,380
so here again I'm highlighting the fact

687
00:28:07,380 --> 00:28:09,000
that having a cross-site scripting

688
00:28:09,000 --> 00:28:11,580
vulnerability in one website can be

689
00:28:11,580 --> 00:28:14,039
abused to exploit the Privileges of a

690
00:28:14,039 --> 00:28:16,980
browser extension to access sensitive

691
00:28:16,980 --> 00:28:19,200
user data and Excel trades up to like

692
00:28:19,200 --> 00:28:22,620
any uh to uh get access to sensitive

693
00:28:22,620 --> 00:28:24,779
user data coming from other and

694
00:28:24,779 --> 00:28:27,539
unrelated websites

695
00:28:27,539 --> 00:28:29,940
all right and so last example this

696
00:28:29,940 --> 00:28:33,360
extension with over 10 000 users which

697
00:28:33,360 --> 00:28:35,640
registers an external message Handler

698
00:28:35,640 --> 00:28:38,940
but does not specify the list of apis uh

699
00:28:38,940 --> 00:28:40,740
the list of extension with which it can

700
00:28:40,740 --> 00:28:43,080
communicate uh and so as I was saying at

701
00:28:43,080 --> 00:28:45,120
the beginning of this presentation by

702
00:28:45,120 --> 00:28:47,100
default an extension can accept messages

703
00:28:47,100 --> 00:28:49,679
from all extensions

704
00:28:49,679 --> 00:28:53,220
and so here the messages are ending in

705
00:28:53,220 --> 00:28:55,100
the URL property of the

706
00:28:55,100 --> 00:28:57,179
downloads.download API and so an

707
00:28:57,179 --> 00:28:59,159
attacker can just download arbitrary

708
00:28:59,159 --> 00:29:01,500
files

709
00:29:01,500 --> 00:29:03,720
all right so here again this example

710
00:29:03,720 --> 00:29:06,120
highlights the dangers of implicitly

711
00:29:06,120 --> 00:29:08,640
allowing the communication with all

712
00:29:08,640 --> 00:29:10,500
browser extension in externally

713
00:29:10,500 --> 00:29:14,179
connectable message Handler

714
00:29:14,400 --> 00:29:17,100
all right so if I go back to our large

715
00:29:17,100 --> 00:29:20,340
scale analysis results overall we could

716
00:29:20,340 --> 00:29:21,559
exploit

717
00:29:21,559 --> 00:29:26,360
184 extensions under our threat model

718
00:29:26,360 --> 00:29:30,179
172 are over a web attacker and 12 are

719
00:29:30,179 --> 00:29:32,159
exploitable through an unprivileged

720
00:29:32,159 --> 00:29:34,080
extension

721
00:29:34,080 --> 00:29:37,679
of those vulnerable extensions 40 can be

722
00:29:37,679 --> 00:29:41,399
exploited by any websites or extensions

723
00:29:41,399 --> 00:29:43,860
and overall the vulnerable extensions we

724
00:29:43,860 --> 00:29:46,799
detected impact between 2.4 and 2.9

725
00:29:46,799 --> 00:29:49,380
Million users

726
00:29:49,380 --> 00:29:51,659
and finally to evaluate the fourth

727
00:29:51,659 --> 00:29:54,000
negative so vulnerable extensions we may

728
00:29:54,000 --> 00:29:56,760
have missed we evaluated double clause

729
00:29:56,760 --> 00:29:59,279
on the vulnerable extension set released

730
00:29:59,279 --> 00:30:02,460
by Sumi so the the work I presented at

731
00:30:02,460 --> 00:30:04,559
the beginning of this presentation and

732
00:30:04,559 --> 00:30:07,980
so overall we could detect 93 of known

733
00:30:07,980 --> 00:30:09,539
vulnerabilities

734
00:30:09,539 --> 00:30:12,179
so in other words double cross is both

735
00:30:12,179 --> 00:30:15,000
very precise in terms of dangerous data

736
00:30:15,000 --> 00:30:17,580
flows detected and also detects most of

737
00:30:17,580 --> 00:30:20,720
the known vulnerabilities

738
00:30:21,840 --> 00:30:24,960
next we conducted a similar study on

739
00:30:24,960 --> 00:30:28,620
Chrome extensions from 2020.

740
00:30:28,620 --> 00:30:31,980
similarly we detected 193 vulnerable

741
00:30:31,980 --> 00:30:35,159
extensions so after manual analysis and

742
00:30:35,159 --> 00:30:37,740
we have a Precision of 90 regarding

743
00:30:37,740 --> 00:30:39,899
verified dangerous data flows so again

744
00:30:39,899 --> 00:30:41,880
it's very similar to the results from

745
00:30:41,880 --> 00:30:44,220
2021

746
00:30:44,220 --> 00:30:47,940
uh we disclosed our findings for

747
00:30:47,940 --> 00:30:49,980
extensions which could be exploited by

748
00:30:49,980 --> 00:30:52,380
any websites or extensions

749
00:30:52,380 --> 00:30:55,140
and so we conducted like two disclosure

750
00:30:55,140 --> 00:30:58,020
first one in 2020 and a second one in

751
00:30:58,020 --> 00:31:01,440
2021 and so overall uh yeah we reported

752
00:31:01,440 --> 00:31:02,940
48

753
00:31:02,940 --> 00:31:05,100
um 48 vulnerable extensions so either

754
00:31:05,100 --> 00:31:07,440
choose the developers or to Chrome if we

755
00:31:07,440 --> 00:31:11,059
could not find any developer information

756
00:31:11,159 --> 00:31:13,559
and so our analysis on the Chrome web

757
00:31:13,559 --> 00:31:17,580
store in 2020 and 2021 actually enables

758
00:31:17,580 --> 00:31:19,980
us to reason about the life cycle of

759
00:31:19,980 --> 00:31:22,320
vulnerable extensions

760
00:31:22,320 --> 00:31:24,659
and so what we found is I think a bit

761
00:31:24,659 --> 00:31:27,120
scary so uh like obviously vulnerable

762
00:31:27,120 --> 00:31:30,659
extension so in 2020 30 or not in the

763
00:31:30,659 --> 00:31:33,480
store in 2021 anymore so yeah okay we

764
00:31:33,480 --> 00:31:35,220
cannot do anything here

765
00:31:35,220 --> 00:31:38,059
but only three extensions out of like

766
00:31:38,059 --> 00:31:41,399
193 actually fixed the vulnerability we

767
00:31:41,399 --> 00:31:44,279
uh we deducted

768
00:31:44,279 --> 00:31:47,279
five extensions turn vulnerable so we

769
00:31:47,279 --> 00:31:49,500
had five extension on the web store in

770
00:31:49,500 --> 00:31:52,620
2020 which were not vulnerable and they

771
00:31:52,620 --> 00:31:54,899
turned vulnerable in 2021

772
00:31:54,899 --> 00:31:58,620
mostly due to permission changes

773
00:31:58,620 --> 00:32:01,860
and finally we have 19 extensions which

774
00:32:01,860 --> 00:32:04,020
were not in the web store in 2020 and

775
00:32:04,020 --> 00:32:07,740
appeared in 2021 and are vulnerable

776
00:32:07,740 --> 00:32:11,520
so if you do the math we can see that 87

777
00:32:11,520 --> 00:32:14,039
of the extensions that were vulnerable

778
00:32:14,039 --> 00:32:17,399
in 2020 are still in the store and still

779
00:32:17,399 --> 00:32:20,039
vulnerable in 2021

780
00:32:20,039 --> 00:32:22,260
despite the facts that we disclose like

781
00:32:22,260 --> 00:32:23,880
a part of the vulnerabilities we

782
00:32:23,880 --> 00:32:25,679
detected and also half of these

783
00:32:25,679 --> 00:32:27,779
extensions haven't even been updated

784
00:32:27,779 --> 00:32:31,320
between 2020 and 2021 so doesn't look so

785
00:32:31,320 --> 00:32:32,460
good

786
00:32:32,460 --> 00:32:34,919
so we kind of assume that browser

787
00:32:34,919 --> 00:32:36,600
extension individual birds do not really

788
00:32:36,600 --> 00:32:39,059
have any incentives I mean probably to

789
00:32:39,059 --> 00:32:41,940
patch the vulnerabilities uh which is

790
00:32:41,940 --> 00:32:43,980
actually why we think that a system like

791
00:32:43,980 --> 00:32:46,740
double cross could be useful to prevent

792
00:32:46,740 --> 00:32:49,140
vulnerable extensions from entering the

793
00:32:49,140 --> 00:32:51,840
store in the first place all the more as

794
00:32:51,840 --> 00:32:53,820
when they are in the store they tend to

795
00:32:53,820 --> 00:32:56,460
stay so in the store

796
00:32:56,460 --> 00:32:58,500
also we believe that double cross could

797
00:32:58,500 --> 00:33:00,360
be integrated into the vetting process

798
00:33:00,360 --> 00:33:02,640
conducted by Google which currently

799
00:33:02,640 --> 00:33:04,679
targets so as I said malicious browser

800
00:33:04,679 --> 00:33:07,159
extensions

801
00:33:07,919 --> 00:33:10,140
so regarding the Practical applicability

802
00:33:10,140 --> 00:33:12,720
of our approach so as you can see in the

803
00:33:12,720 --> 00:33:15,299
slide double cross is pretty fast so we

804
00:33:15,299 --> 00:33:18,659
can analyze 93 of the extensions so when

805
00:33:18,659 --> 00:33:19,919
we consider content script and

806
00:33:19,919 --> 00:33:22,019
background page in less than 20 seconds

807
00:33:22,019 --> 00:33:24,779
so 93 of our data set in less than 20

808
00:33:24,779 --> 00:33:27,419
seconds and on average we need like

809
00:33:27,419 --> 00:33:30,120
around 10 seconds for Content script and

810
00:33:30,120 --> 00:33:31,260
background page

811
00:33:31,260 --> 00:33:34,799
and a median time of 2.5 seconds so uh

812
00:33:34,799 --> 00:33:37,140
yeah I mean in general it's like super

813
00:33:37,140 --> 00:33:38,880
fast only a couple of seconds per

814
00:33:38,880 --> 00:33:40,919
extension which I think highlights also

815
00:33:40,919 --> 00:33:42,659
the Practical applicability of our

816
00:33:42,659 --> 00:33:45,419
approach so for an accurate analysis and

817
00:33:45,419 --> 00:33:48,740
at scale obviously

818
00:33:49,740 --> 00:33:52,679
all right and so finally we envisioned

819
00:33:52,679 --> 00:33:54,840
several possibilities to mitigate the

820
00:33:54,840 --> 00:33:57,539
vulnerabilities that we reported

821
00:33:57,539 --> 00:33:59,880
so I think first and foremost it's

822
00:33:59,880 --> 00:34:02,100
really important to know that the fact

823
00:34:02,100 --> 00:34:04,200
that browser extensions can communicate

824
00:34:04,200 --> 00:34:06,720
with web pages or with other extensions

825
00:34:06,720 --> 00:34:09,300
can lead to vulnerability and so this

826
00:34:09,300 --> 00:34:11,719
should be like treated as

827
00:34:11,719 --> 00:34:14,280
interested data

828
00:34:14,280 --> 00:34:16,379
and again obviously we cannot ban the

829
00:34:16,379 --> 00:34:18,599
communication between extensions and web

830
00:34:18,599 --> 00:34:21,540
pages or like between extensions but we

831
00:34:21,540 --> 00:34:23,580
could also limit the impact of the

832
00:34:23,580 --> 00:34:25,859
vulnerabilities if we only allow the

833
00:34:25,859 --> 00:34:28,199
communication with like specified

834
00:34:28,199 --> 00:34:30,780
websites or specified extensions so

835
00:34:30,780 --> 00:34:32,219
instead of allowing the communication

836
00:34:32,219 --> 00:34:35,159
with everybody by default

837
00:34:35,159 --> 00:34:37,800
also to limit code executions so

838
00:34:37,800 --> 00:34:40,020
developers could sanitize messages

839
00:34:40,020 --> 00:34:42,780
before like calling evil and friends and

840
00:34:42,780 --> 00:34:44,820
they really need these apis but we did

841
00:34:44,820 --> 00:34:47,159
not really see any sanitization function

842
00:34:47,159 --> 00:34:50,460
when we are detected such code execution

843
00:34:50,460 --> 00:34:52,339
things

844
00:34:52,339 --> 00:34:55,440
or even better would actually be to only

845
00:34:55,440 --> 00:34:58,560
execute data coming from the extension

846
00:34:58,560 --> 00:35:00,300
packaging so not data coming from

847
00:35:00,300 --> 00:35:02,460
outside of the extension which is also

848
00:35:02,460 --> 00:35:04,619
what Chrome now implemented so with the

849
00:35:04,619 --> 00:35:07,380
Manifest version 3.

850
00:35:07,380 --> 00:35:10,500
uh and so similarly for a single origin

851
00:35:10,500 --> 00:35:13,800
policy bypass so like we also encourage

852
00:35:13,800 --> 00:35:15,540
the video programming when they can and

853
00:35:15,540 --> 00:35:17,700
when it makes sense to prefer the more

854
00:35:17,700 --> 00:35:19,800
secure course alternative if they don't

855
00:35:19,800 --> 00:35:21,359
need to access like really arbitrary

856
00:35:21,359 --> 00:35:23,700
cross domain data

857
00:35:23,700 --> 00:35:25,619
uh then I mentioned previously that

858
00:35:25,619 --> 00:35:27,300
double cross could be integrated into

859
00:35:27,300 --> 00:35:29,240
the vetting process conducted by Google

860
00:35:29,240 --> 00:35:32,160
but we also envisioned that the video

861
00:35:32,160 --> 00:35:34,500
produce could leverage double cross to

862
00:35:34,500 --> 00:35:36,540
also get an indication regarding

863
00:35:36,540 --> 00:35:40,140
potentially vulnerable uh data flows to

864
00:35:40,140 --> 00:35:43,079
regarding critical apis which could be

865
00:35:43,079 --> 00:35:46,140
exploited by uh by attackers

866
00:35:46,140 --> 00:35:49,200
and it would also be a way to increase

867
00:35:49,200 --> 00:35:51,420
um well developers awareness regarding

868
00:35:51,420 --> 00:35:53,400
bus programming practices which can

869
00:35:53,400 --> 00:35:55,200
unfortunately lead to security or

870
00:35:55,200 --> 00:35:57,180
privacy issues

871
00:35:57,180 --> 00:35:59,040
and so finally as I said at the

872
00:35:59,040 --> 00:36:01,140
beginning of this presentation a Chrome

873
00:36:01,140 --> 00:36:03,420
released new rules for the browser

874
00:36:03,420 --> 00:36:05,339
extension ecosystem so this manifest

875
00:36:05,339 --> 00:36:08,820
version 3 in January 2021 and so

876
00:36:08,820 --> 00:36:11,099
migrating extensions to this manifest

877
00:36:11,099 --> 00:36:13,680
version would also kind of protect the

878
00:36:13,680 --> 00:36:16,020
user base from some of the attacks I

879
00:36:16,020 --> 00:36:18,980
presented previously

880
00:36:19,619 --> 00:36:21,480
all right so what should you take away

881
00:36:21,480 --> 00:36:23,820
from this talk uh well so I guess what

882
00:36:23,820 --> 00:36:25,380
you already know so browser extensions

883
00:36:25,380 --> 00:36:27,839
are cool and useful and popular but at

884
00:36:27,839 --> 00:36:29,820
the same time they may also introduce

885
00:36:29,820 --> 00:36:33,060
severe security and privacy threats

886
00:36:33,060 --> 00:36:35,099
I briefly mentioned the case of

887
00:36:35,099 --> 00:36:37,680
malicious browser extensions but the

888
00:36:37,680 --> 00:36:40,020
focus of this talk was a vulnerable

889
00:36:40,020 --> 00:36:42,300
extension so benign but biggie

890
00:36:42,300 --> 00:36:44,700
extensions developed by well-intentioned

891
00:36:44,700 --> 00:36:46,440
Developers

892
00:36:46,440 --> 00:36:49,260
and so why extensions are interesting to

893
00:36:49,260 --> 00:36:51,960
attackers well because they are highly

894
00:36:51,960 --> 00:36:53,820
privileged more privileged than

895
00:36:53,820 --> 00:36:56,760
traditional web pages and how can

896
00:36:56,760 --> 00:36:58,980
attackers abuse vulnerable extensions

897
00:36:58,980 --> 00:37:01,320
well by liberating the communication

898
00:37:01,320 --> 00:37:04,200
channels of extension with web pages or

899
00:37:04,200 --> 00:37:06,780
with author extensions

900
00:37:06,780 --> 00:37:09,599
I presented our system double cross to

901
00:37:09,599 --> 00:37:11,940
detect security and privacy threats in

902
00:37:11,940 --> 00:37:14,880
benign bed buggy browser extensions

903
00:37:14,880 --> 00:37:18,420
we analyzed over 155

904
00:37:18,420 --> 00:37:22,260
000 Chrome extensions and deducted 184

905
00:37:22,260 --> 00:37:24,359
vulnerable extensions which are

906
00:37:24,359 --> 00:37:27,720
exploitable under our threat model

907
00:37:27,720 --> 00:37:30,839
87 of these extensions were also already

908
00:37:30,839 --> 00:37:33,300
vulnerable one year ago

909
00:37:33,300 --> 00:37:36,119
and finally we highlighted the high

910
00:37:36,119 --> 00:37:39,420
precision and recoil of our system

911
00:37:39,420 --> 00:37:42,180
to raise awareness and enable developers

912
00:37:42,180 --> 00:37:44,400
to detect such security and privacy

913
00:37:44,400 --> 00:37:46,800
threats before large-scale deployments

914
00:37:46,800 --> 00:37:49,980
we made double cross publicly available

915
00:37:49,980 --> 00:37:51,960
and with that I thank you very much for

916
00:37:51,960 --> 00:37:53,400
your attention and I'm looking forward

917
00:37:53,400 --> 00:37:55,940
to your questions

918
00:37:55,940 --> 00:37:58,120
[Applause]

919
00:37:58,120 --> 00:38:01,319
[Music]

920
00:38:05,660 --> 00:38:08,779
[Music]

921
00:38:09,060 --> 00:38:11,720
thank you

