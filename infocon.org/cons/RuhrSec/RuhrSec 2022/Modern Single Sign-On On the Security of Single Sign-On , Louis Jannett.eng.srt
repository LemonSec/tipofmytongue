1
00:00:01,040 --> 00:00:08,009
[Music]

2
00:00:11,059 --> 00:00:14,059
thank you

3
00:00:17,820 --> 00:00:20,240
welcome to my talk about modern singers

4
00:00:20,240 --> 00:00:24,060
and in this talk I will give insights

5
00:00:24,060 --> 00:00:27,180
into the security of singers and inflows

6
00:00:27,180 --> 00:00:29,580
that are executed in pop-up windows and

7
00:00:29,580 --> 00:00:31,199
in iframes

8
00:00:31,199 --> 00:00:33,180
and you might have already noticed that

9
00:00:33,180 --> 00:00:34,680
this guy here

10
00:00:34,680 --> 00:00:36,480
um wants to log in on booking.com here

11
00:00:36,480 --> 00:00:38,399
on the left and on Pinterest.com on the

12
00:00:38,399 --> 00:00:39,540
right

13
00:00:39,540 --> 00:00:43,440
and um on booking.com which is um here

14
00:00:43,440 --> 00:00:45,540
the login prompt is shown in like an

15
00:00:45,540 --> 00:00:47,460
overlay or

16
00:00:47,460 --> 00:00:50,579
um a model which is basically an iframe

17
00:00:50,579 --> 00:00:52,680
and on Pinterest.com which you see on

18
00:00:52,680 --> 00:00:54,840
the right um the login prompt is shown

19
00:00:54,840 --> 00:00:58,020
in a detached pop-up window and so

20
00:00:58,020 --> 00:01:00,059
that's basically what we are going to

21
00:01:00,059 --> 00:01:02,219
look at today

22
00:01:02,219 --> 00:01:04,500
okay so before we start um let me first

23
00:01:04,500 --> 00:01:07,200
introduce myself so my name is Luis

24
00:01:07,200 --> 00:01:09,420
yanet and I'm 34 years old

25
00:01:09,420 --> 00:01:11,939
and I'm a PhD student at the chair for

26
00:01:11,939 --> 00:01:14,820
network in data security here at Royal

27
00:01:14,820 --> 00:01:16,439
University borghum

28
00:01:16,439 --> 00:01:18,360
since May last year

29
00:01:18,360 --> 00:01:20,960
in my research interests are basically

30
00:01:20,960 --> 00:01:23,460
three-folded so I'm interested in

31
00:01:23,460 --> 00:01:25,380
everything related to singers and on

32
00:01:25,380 --> 00:01:27,840
security and privacy but I'm also

33
00:01:27,840 --> 00:01:29,700
interested in web security

34
00:01:29,700 --> 00:01:32,280
and it turns out that this intersection

35
00:01:32,280 --> 00:01:35,220
here is especially interesting for me

36
00:01:35,220 --> 00:01:38,280
and today we will also discuss

37
00:01:38,280 --> 00:01:41,040
um like the implications of web Security

38
00:01:41,040 --> 00:01:44,720
on Modern singer salon

39
00:01:45,119 --> 00:01:47,700
okay so what's the roadmap for this talk

40
00:01:47,700 --> 00:01:49,619
um first I will introduce singer-san on

41
00:01:49,619 --> 00:01:52,680
then I will present the standardized

42
00:01:52,680 --> 00:01:54,360
textbook flow

43
00:01:54,360 --> 00:01:57,780
next I will explain the what we Define

44
00:01:57,780 --> 00:02:00,360
as modern singer sign-on

45
00:02:00,360 --> 00:02:02,939
um then I will discuss the security of

46
00:02:02,939 --> 00:02:06,000
modern singer Sun On Floors followed by

47
00:02:06,000 --> 00:02:07,619
some examples

48
00:02:07,619 --> 00:02:10,139
of real world vulnerabilities that we

49
00:02:10,139 --> 00:02:11,520
found in the wild

50
00:02:11,520 --> 00:02:14,340
and after that I will show a live

51
00:02:14,340 --> 00:02:16,920
demonstration of our tool which

52
00:02:16,920 --> 00:02:19,860
basically allows us to analyze um

53
00:02:19,860 --> 00:02:21,959
the security of modern singers and on

54
00:02:21,959 --> 00:02:24,480
floors and finally I will summarize the

55
00:02:24,480 --> 00:02:27,200
lessons learned

56
00:02:27,239 --> 00:02:30,660
okay so what is singer-san on well you

57
00:02:30,660 --> 00:02:32,640
probably all know this problem where

58
00:02:32,640 --> 00:02:34,319
Ellis wants to lock in on several

59
00:02:34,319 --> 00:02:35,640
websites

60
00:02:35,640 --> 00:02:39,420
and here Ellis cast about security so

61
00:02:39,420 --> 00:02:42,060
um she has a different password on each

62
00:02:42,060 --> 00:02:44,959
website so now Alice wants to

63
00:02:44,959 --> 00:02:47,519
authenticate on news.com

64
00:02:47,519 --> 00:02:49,500
but unfortunately

65
00:02:49,500 --> 00:02:52,260
um she forgot her password

66
00:02:52,260 --> 00:02:54,420
so there are solutions to solve this

67
00:02:54,420 --> 00:02:57,060
problem like password managers or web

68
00:02:57,060 --> 00:02:59,819
oath n and in the next top we will also

69
00:02:59,819 --> 00:03:01,980
see like brainwave based authentication

70
00:03:01,980 --> 00:03:04,680
which also sounds like really exciting

71
00:03:04,680 --> 00:03:05,879
but

72
00:03:05,879 --> 00:03:07,260
um this talk is about singer sign on

73
00:03:07,260 --> 00:03:10,140
right and singer sign-on can solve this

74
00:03:10,140 --> 00:03:13,860
issue here as well and therefore we

75
00:03:13,860 --> 00:03:17,340
introduce a trusted third party into the

76
00:03:17,340 --> 00:03:19,500
authentication flow

77
00:03:19,500 --> 00:03:21,840
um here this is a social network

78
00:03:21,840 --> 00:03:24,540
so we can debate whether it is it is

79
00:03:24,540 --> 00:03:27,420
trusted or not but in this case

80
00:03:27,420 --> 00:03:30,720
um Alice wants to log in on a website

81
00:03:30,720 --> 00:03:34,340
and therefore she first um authenticates

82
00:03:34,340 --> 00:03:37,260
so she sends her password once to The

83
00:03:37,260 --> 00:03:40,019
Social Network and then she can ask the

84
00:03:40,019 --> 00:03:43,019
social network to lock her into the

85
00:03:43,019 --> 00:03:44,159
websites

86
00:03:44,159 --> 00:03:46,440
therefore the social network generates a

87
00:03:46,440 --> 00:03:47,700
token

88
00:03:47,700 --> 00:03:51,000
and this token basically contains

89
00:03:51,000 --> 00:03:54,180
Alice's identity and now um it sends

90
00:03:54,180 --> 00:03:56,400
this token to the websites

91
00:03:56,400 --> 00:03:59,459
and the websites can finally verify the

92
00:03:59,459 --> 00:04:03,780
token to lock LS into her account

93
00:04:03,780 --> 00:04:06,720
so in single sign on we call the Social

94
00:04:06,720 --> 00:04:08,879
Network the identity provider

95
00:04:08,879 --> 00:04:10,920
and the websites are basically service

96
00:04:10,920 --> 00:04:13,518
providers

97
00:04:13,799 --> 00:04:15,720
okay so how does the standardized

98
00:04:15,720 --> 00:04:18,418
textbook singers and on Flow look like

99
00:04:18,418 --> 00:04:21,060
so here in the next few slides um we

100
00:04:21,060 --> 00:04:23,520
execute the textbook singers and on flow

101
00:04:23,520 --> 00:04:25,380
on Adobe

102
00:04:25,380 --> 00:04:28,860
so therefore Alice opens adobe's login

103
00:04:28,860 --> 00:04:30,660
page in her browser

104
00:04:30,660 --> 00:04:34,979
which issues a get request to Adobe and

105
00:04:34,979 --> 00:04:38,220
Adobe Returns the login page and the

106
00:04:38,220 --> 00:04:41,580
login page contains typically a link or

107
00:04:41,580 --> 00:04:43,680
an encore Tech in this case here

108
00:04:43,680 --> 00:04:46,740
which itself contains the continue with

109
00:04:46,740 --> 00:04:48,960
Google button

110
00:04:48,960 --> 00:04:51,780
this link is actually the login request

111
00:04:51,780 --> 00:04:54,360
which is sent to Google

112
00:04:54,360 --> 00:04:56,940
and the login request contains several

113
00:04:56,940 --> 00:05:00,180
parameters like the client ID which in

114
00:05:00,180 --> 00:05:03,120
this case tells Google that Alice wants

115
00:05:03,120 --> 00:05:05,940
to authenticate on Adobe

116
00:05:05,940 --> 00:05:08,880
the redirectory parameter contains the

117
00:05:08,880 --> 00:05:12,120
URL to which Google should send the

118
00:05:12,120 --> 00:05:13,800
login response

119
00:05:13,800 --> 00:05:17,540
and the response mode specifies how the

120
00:05:17,540 --> 00:05:20,460
login response should be sent

121
00:05:20,460 --> 00:05:23,639
to the to Adobe and we will see later

122
00:05:23,639 --> 00:05:26,960
more on this parameter here

123
00:05:27,240 --> 00:05:29,460
okay so now if LS clicks on the continue

124
00:05:29,460 --> 00:05:31,199
with Google button here the login

125
00:05:31,199 --> 00:05:33,960
request is sent to Google

126
00:05:33,960 --> 00:05:36,780
and now since Ellis signs in for the

127
00:05:36,780 --> 00:05:39,660
first time on Adobe Google Returns the

128
00:05:39,660 --> 00:05:41,039
content page

129
00:05:41,039 --> 00:05:43,919
and on this content page Google asked

130
00:05:43,919 --> 00:05:46,919
Alice whether Google is allowed to share

131
00:05:46,919 --> 00:05:49,199
her identity with

132
00:05:49,199 --> 00:05:52,740
um Adobe and therefore the page against

133
00:05:52,740 --> 00:05:55,620
contains a button with a link

134
00:05:55,620 --> 00:05:58,500
which is here pointing to Google's

135
00:05:58,500 --> 00:05:59,820
content endpoint

136
00:05:59,820 --> 00:06:02,460
and if Alice has an account already on

137
00:06:02,460 --> 00:06:04,380
Adobe then this step would be entirely

138
00:06:04,380 --> 00:06:06,860
skipped

139
00:06:07,080 --> 00:06:09,600
okay so now LS consent and clicks on the

140
00:06:09,600 --> 00:06:12,240
button and now Google Returns the login

141
00:06:12,240 --> 00:06:17,100
response as an HTTP redirect via LSS

142
00:06:17,100 --> 00:06:18,720
browser

143
00:06:18,720 --> 00:06:21,660
um two adobe's redirect we endpoint and

144
00:06:21,660 --> 00:06:23,220
this was specified earlier in the login

145
00:06:23,220 --> 00:06:24,660
request

146
00:06:24,660 --> 00:06:27,120
so then Adobe can validate the token and

147
00:06:27,120 --> 00:06:29,639
finally return the session cookie which

148
00:06:29,639 --> 00:06:32,580
effectively locks Alice into her account

149
00:06:32,580 --> 00:06:34,860
okay so for us the login response is the

150
00:06:34,860 --> 00:06:36,720
most interesting part because it

151
00:06:36,720 --> 00:06:39,479
contains like the token and the token

152
00:06:39,479 --> 00:06:41,580
leaksu and the techa then the attacker

153
00:06:41,580 --> 00:06:44,520
would probably be able to sign into LSS

154
00:06:44,520 --> 00:06:46,758
account

155
00:06:47,639 --> 00:06:50,039
Okay so we've already seen the query

156
00:06:50,039 --> 00:06:51,840
response mode

157
00:06:51,840 --> 00:06:54,300
um but there are additional ones such as

158
00:06:54,300 --> 00:06:56,699
the response mode fragment

159
00:06:56,699 --> 00:06:58,979
um which works like the query mode but

160
00:06:58,979 --> 00:07:02,039
includes the token as the fragment of

161
00:07:02,039 --> 00:07:03,259
the uh

162
00:07:03,259 --> 00:07:06,900
or the from post response mode which

163
00:07:06,900 --> 00:07:10,160
includes the token in an auto submitting

164
00:07:10,160 --> 00:07:13,979
HTML form that submits the token as a

165
00:07:13,979 --> 00:07:16,440
post request to the service provider's

166
00:07:16,440 --> 00:07:18,120
callback here

167
00:07:18,120 --> 00:07:20,280
and we basically refer to all of them

168
00:07:20,280 --> 00:07:22,620
here as you are a redirects which are

169
00:07:22,620 --> 00:07:25,740
used in text boxing and sign on

170
00:07:25,740 --> 00:07:27,419
okay so now let's talk about modern

171
00:07:27,419 --> 00:07:30,539
singer sanon and a modern singer sign on

172
00:07:30,539 --> 00:07:32,880
the singers and on flows are executed in

173
00:07:32,880 --> 00:07:35,340
pop-ups or in iframes

174
00:07:35,340 --> 00:07:37,380
and here the flow on the left is

175
00:07:37,380 --> 00:07:40,319
executed in a pop-up window which also

176
00:07:40,319 --> 00:07:42,840
then shows the content page so the login

177
00:07:42,840 --> 00:07:44,220
probe right

178
00:07:44,220 --> 00:07:46,620
and if the flow is executed in an iframe

179
00:07:46,620 --> 00:07:50,400
then refer to this as the iframe flow

180
00:07:50,400 --> 00:07:52,860
so both flows here are not standardized

181
00:07:52,860 --> 00:07:55,680
but they are heavily used in the wild

182
00:07:55,680 --> 00:07:57,120
um so that's why they are so interesting

183
00:07:57,120 --> 00:07:59,419
for us

184
00:08:00,479 --> 00:08:02,940
okay so we looked at many real world

185
00:08:02,940 --> 00:08:04,080
implementations

186
00:08:04,080 --> 00:08:07,440
and we could find four common variants

187
00:08:07,440 --> 00:08:09,780
of the pop-up and iframe Flow

188
00:08:09,780 --> 00:08:12,419
and in the direct pop-up flow um the

189
00:08:12,419 --> 00:08:15,599
identity provider directly sends the

190
00:08:15,599 --> 00:08:19,500
token to the service provider so this is

191
00:08:19,500 --> 00:08:21,900
um just like the textbook case

192
00:08:21,900 --> 00:08:24,419
then there's the relay pop-up flow and

193
00:08:24,419 --> 00:08:26,879
here the identity provider first sends

194
00:08:26,879 --> 00:08:29,220
the login response to the service

195
00:08:29,220 --> 00:08:32,640
provider which then basically

196
00:08:32,640 --> 00:08:34,860
forwards it to itself

197
00:08:34,860 --> 00:08:36,779
and the service provider here in the

198
00:08:36,779 --> 00:08:39,539
middle acts kind of like a relay and we

199
00:08:39,539 --> 00:08:42,779
will see later the motivation for this

200
00:08:42,779 --> 00:08:45,660
then there's the seamless iframe flow

201
00:08:45,660 --> 00:08:46,320
um

202
00:08:46,320 --> 00:08:48,660
in which LS already has granted the

203
00:08:48,660 --> 00:08:51,839
content so this allows the IDP to

204
00:08:51,839 --> 00:08:54,500
automatically return the login response

205
00:08:54,500 --> 00:08:58,080
to the service provider so

206
00:08:58,080 --> 00:08:59,279
um the service provider can

207
00:08:59,279 --> 00:09:02,640
automatically lock in LS

208
00:09:02,640 --> 00:09:05,100
okay so in then there's the interactive

209
00:09:05,100 --> 00:09:08,519
FM flow and here LS has already granted

210
00:09:08,519 --> 00:09:10,320
the content

211
00:09:10,320 --> 00:09:11,100
um

212
00:09:11,100 --> 00:09:14,100
has not yet granted the content and

213
00:09:14,100 --> 00:09:16,140
that's why the content page is here

214
00:09:16,140 --> 00:09:18,959
shown in an iframe so LS has to click

215
00:09:18,959 --> 00:09:20,700
this button

216
00:09:20,700 --> 00:09:23,820
okay both iframe flows here use Direct

217
00:09:23,820 --> 00:09:26,519
Communications just as the direct pop-up

218
00:09:26,519 --> 00:09:30,240
flow here so the relay pop-up flow is an

219
00:09:30,240 --> 00:09:33,200
exception of this

220
00:09:33,720 --> 00:09:35,760
okay so let's first look at the direct

221
00:09:35,760 --> 00:09:39,180
pop-up flow and iframe flows so to start

222
00:09:39,180 --> 00:09:41,339
um the flow the service provider first

223
00:09:41,339 --> 00:09:44,160
is our embeds the login request in an

224
00:09:44,160 --> 00:09:47,100
iframe or openly login requesting a

225
00:09:47,100 --> 00:09:49,200
pop-up so depending on the flow

226
00:09:49,200 --> 00:09:51,540
and now the IDP can generate the

227
00:09:51,540 --> 00:09:54,839
identity token and then return it

228
00:09:54,839 --> 00:09:58,140
directly to the service provider

229
00:09:58,140 --> 00:10:00,660
so now we cannot use URL redirects for

230
00:10:00,660 --> 00:10:02,399
this purpose because

231
00:10:02,399 --> 00:10:03,300
um

232
00:10:03,300 --> 00:10:05,399
it the communication happens between

233
00:10:05,399 --> 00:10:07,440
different Windows like in this case it

234
00:10:07,440 --> 00:10:09,660
happens between the pop-up and the top

235
00:10:09,660 --> 00:10:12,180
level window here

236
00:10:12,180 --> 00:10:14,399
um and that's why we must use in browser

237
00:10:14,399 --> 00:10:16,440
Communications for this

238
00:10:16,440 --> 00:10:18,060
token Exchange

239
00:10:18,060 --> 00:10:20,760
and because the identity provider and

240
00:10:20,760 --> 00:10:22,500
service provider are located on

241
00:10:22,500 --> 00:10:24,779
different Origins this communication

242
00:10:24,779 --> 00:10:27,360
must be cross origin compatible in this

243
00:10:27,360 --> 00:10:28,800
case

244
00:10:28,800 --> 00:10:30,540
okay so now let's investigate the

245
00:10:30,540 --> 00:10:34,099
communication on both sides

246
00:10:34,459 --> 00:10:37,560
there are multiple cross-origin in

247
00:10:37,560 --> 00:10:40,080
browser communication techniques but the

248
00:10:40,080 --> 00:10:42,420
most popular one is basically the post

249
00:10:42,420 --> 00:10:44,040
message Api

250
00:10:44,040 --> 00:10:46,800
and in post message the initiator which

251
00:10:46,800 --> 00:10:49,200
is here the identity provider

252
00:10:49,200 --> 00:10:53,279
can send data to the receiver here which

253
00:10:53,279 --> 00:10:55,680
is the service provider by calling the

254
00:10:55,680 --> 00:10:58,740
post message function on the receivers

255
00:10:58,740 --> 00:11:01,560
window object and then the transfer data

256
00:11:01,560 --> 00:11:04,260
is passed as the first argument here and

257
00:11:04,260 --> 00:11:07,019
the receiver's origin is included as the

258
00:11:07,019 --> 00:11:09,420
second argument and now the receiver

259
00:11:09,420 --> 00:11:11,040
origin is like very important for

260
00:11:11,040 --> 00:11:13,560
security because it prevents other

261
00:11:13,560 --> 00:11:18,000
Origins that are not webshot.com in this

262
00:11:18,000 --> 00:11:21,240
case from receiving the post message

263
00:11:21,240 --> 00:11:23,160
so it basically protects the

264
00:11:23,160 --> 00:11:25,980
confidentiality of the post message

265
00:11:25,980 --> 00:11:28,680
okay so the receiver registers a message

266
00:11:28,680 --> 00:11:32,160
event listener which is invoked when the

267
00:11:32,160 --> 00:11:34,860
post message is received

268
00:11:34,860 --> 00:11:36,660
okay before the post message is

269
00:11:36,660 --> 00:11:39,240
processed for example it is passed to

270
00:11:39,240 --> 00:11:42,180
some login function

271
00:11:42,180 --> 00:11:45,120
um its origin must be validated so this

272
00:11:45,120 --> 00:11:47,160
ensures that the post message was sent

273
00:11:47,160 --> 00:11:50,040
by the expected initiator

274
00:11:50,040 --> 00:11:53,940
so in this case the identity provider

275
00:11:53,940 --> 00:11:56,339
okay so basically the post message Api

276
00:11:56,339 --> 00:11:58,680
releases here the same origin policy

277
00:11:58,680 --> 00:12:01,620
which is why both checks your

278
00:12:01,620 --> 00:12:03,899
um are essential for implementing post

279
00:12:03,899 --> 00:12:06,800
message securely

280
00:12:07,680 --> 00:12:10,140
okay so now let's let's look at the

281
00:12:10,140 --> 00:12:12,300
special case um with the relay pop-up

282
00:12:12,300 --> 00:12:15,120
flow again the service provider here

283
00:12:15,120 --> 00:12:17,279
opens the login request in the pop-up

284
00:12:17,279 --> 00:12:18,300
window

285
00:12:18,300 --> 00:12:21,420
and the identity provider generates the

286
00:12:21,420 --> 00:12:22,620
token again

287
00:12:22,620 --> 00:12:26,040
but now the identity provider Returns

288
00:12:26,040 --> 00:12:29,640
the token with the URL redirect to the

289
00:12:29,640 --> 00:12:32,160
service provider that now runs within

290
00:12:32,160 --> 00:12:33,600
the pop-up window

291
00:12:33,600 --> 00:12:38,100
and from an IDP perspective this is just

292
00:12:38,100 --> 00:12:41,579
like the classic textbook flow

293
00:12:41,579 --> 00:12:43,380
okay so the service provider and the

294
00:12:43,380 --> 00:12:46,019
pop-up then finally returns the token

295
00:12:46,019 --> 00:12:49,079
back to the service provider now running

296
00:12:49,079 --> 00:12:51,360
in the top level window here

297
00:12:51,360 --> 00:12:54,060
and this again requires some form of in

298
00:12:54,060 --> 00:12:55,740
browser communication

299
00:12:55,740 --> 00:12:58,800
but in this case same origin

300
00:12:58,800 --> 00:13:01,440
communication techniques

301
00:13:01,440 --> 00:13:03,839
um work as well here because the service

302
00:13:03,839 --> 00:13:07,560
provider communicates with itself

303
00:13:07,560 --> 00:13:09,600
okay so now let's look at one such

304
00:13:09,600 --> 00:13:11,579
technique

305
00:13:11,579 --> 00:13:13,560
um in the simplest case here the

306
00:13:13,560 --> 00:13:16,339
receiver registers callback function

307
00:13:16,339 --> 00:13:20,459
that expects the token here as input

308
00:13:20,459 --> 00:13:23,279
parameter and then passes the token to a

309
00:13:23,279 --> 00:13:24,779
local function

310
00:13:24,779 --> 00:13:27,899
and the initiator must just invoke this

311
00:13:27,899 --> 00:13:30,240
callback function and then pass the

312
00:13:30,240 --> 00:13:32,220
token as argument to it

313
00:13:32,220 --> 00:13:34,440
so we call this technique JavaScript Dom

314
00:13:34,440 --> 00:13:37,200
access and this is inherently protected

315
00:13:37,200 --> 00:13:40,200
by the same origin policy so it is

316
00:13:40,200 --> 00:13:41,459
secure by Design

317
00:13:41,459 --> 00:13:44,339
so only the service provider can send

318
00:13:44,339 --> 00:13:48,139
the token in this case

319
00:13:48,839 --> 00:13:50,700
okay so now let's investigate the

320
00:13:50,700 --> 00:13:53,519
security of modern singers and on flows

321
00:13:53,519 --> 00:13:56,279
we rely on the famous web attacker model

322
00:13:56,279 --> 00:13:58,560
so the victim visits the malicious

323
00:13:58,560 --> 00:14:01,440
website which is here teka.com and the

324
00:14:01,440 --> 00:14:05,279
malicious website then either embeds the

325
00:14:05,279 --> 00:14:07,200
vulnerable service provider or identity

326
00:14:07,200 --> 00:14:09,660
provider endpoint

327
00:14:09,660 --> 00:14:12,300
um in an iframe or it opens them in a

328
00:14:12,300 --> 00:14:14,579
pop-up window and

329
00:14:14,579 --> 00:14:17,760
then the malicious website can send or

330
00:14:17,760 --> 00:14:20,940
receive cross messages to or from the

331
00:14:20,940 --> 00:14:23,160
iframe or pop-up window with

332
00:14:23,160 --> 00:14:25,260
cross-origin in browser communication

333
00:14:25,260 --> 00:14:28,939
techniques so like post message

334
00:14:29,459 --> 00:14:31,800
okay so now the web security threads

335
00:14:31,800 --> 00:14:33,959
which are well known meet the modern

336
00:14:33,959 --> 00:14:36,860
singer sign on flows and we could find

337
00:14:36,860 --> 00:14:40,199
three com web security vulnerabilities

338
00:14:40,199 --> 00:14:42,260
in these modern singers and onflows

339
00:14:42,260 --> 00:14:44,699
which also have not yet been in the

340
00:14:44,699 --> 00:14:47,519
singers and on communities Focus

341
00:14:47,519 --> 00:14:50,579
and the Wildcat receiver

342
00:14:50,579 --> 00:14:53,459
and the malicious receiver both break

343
00:14:53,459 --> 00:14:55,680
here the confidentiality of the login

344
00:14:55,680 --> 00:14:58,760
response which can result in token leaks

345
00:14:58,760 --> 00:15:01,920
and the malicious initiator

346
00:15:01,920 --> 00:15:04,680
targets the authenticity of the login

347
00:15:04,680 --> 00:15:08,160
response which can enable like token

348
00:15:08,160 --> 00:15:09,720
injections

349
00:15:09,720 --> 00:15:12,480
okay so also we will shortly discuss the

350
00:15:12,480 --> 00:15:15,180
clip checking thread in the interactive

351
00:15:15,180 --> 00:15:18,019
iframe flow

352
00:15:18,779 --> 00:15:21,839
okay so in the Wildcat receiver attack

353
00:15:21,839 --> 00:15:25,560
um the malicious website imitates to be

354
00:15:25,560 --> 00:15:28,740
the honest webshop

355
00:15:28,740 --> 00:15:30,779
um so here the attacker starts this

356
00:15:30,779 --> 00:15:33,779
thing as an onflow by opening the web

357
00:15:33,779 --> 00:15:36,899
shops login request in the pop-up or

358
00:15:36,899 --> 00:15:39,899
iframe and because

359
00:15:39,899 --> 00:15:41,639
um the identity provider can

360
00:15:41,639 --> 00:15:44,459
successfully validate that here this

361
00:15:44,459 --> 00:15:46,860
webshop.com origin

362
00:15:46,860 --> 00:15:50,579
um matches the client ID so it matches

363
00:15:50,579 --> 00:15:51,839
the webshop

364
00:15:51,839 --> 00:15:55,860
the IDP generates Alice's identity token

365
00:15:55,860 --> 00:15:57,600
for the webshop

366
00:15:57,600 --> 00:16:00,720
and returns it back to the attacker so

367
00:16:00,720 --> 00:16:04,079
again either directly or relay depending

368
00:16:04,079 --> 00:16:06,000
on the flow

369
00:16:06,000 --> 00:16:09,120
so the attacker receives the token due

370
00:16:09,120 --> 00:16:11,760
to this wildcard receiver here in the

371
00:16:11,760 --> 00:16:13,399
post message call

372
00:16:13,399 --> 00:16:16,199
which basically allows all Origins

373
00:16:16,199 --> 00:16:19,620
including attacker.com to receive this

374
00:16:19,620 --> 00:16:20,699
token

375
00:16:20,699 --> 00:16:22,920
and then the attacker can use this token

376
00:16:22,920 --> 00:16:27,680
to sign in on webshop as Alice

377
00:16:28,199 --> 00:16:30,779
okay so the malicious receiver attack

378
00:16:30,779 --> 00:16:33,839
Works similarly but now the attacker

379
00:16:33,839 --> 00:16:37,380
replaces the webshop's origin with his

380
00:16:37,380 --> 00:16:38,940
own origin

381
00:16:38,940 --> 00:16:42,899
so now the identity provider here fails

382
00:16:42,899 --> 00:16:45,959
to validate that the attacker.com origin

383
00:16:45,959 --> 00:16:49,440
here does not match the webshop.com or

384
00:16:49,440 --> 00:16:51,959
the webshops um identity

385
00:16:51,959 --> 00:16:53,940
so therefore the identity provider again

386
00:16:53,940 --> 00:16:56,820
generates analysis identity totem and

387
00:16:56,820 --> 00:16:59,519
returns it to the attacker

388
00:16:59,519 --> 00:17:02,519
either relayed or directly and although

389
00:17:02,519 --> 00:17:05,099
post message is used securely in this

390
00:17:05,099 --> 00:17:06,480
context

391
00:17:06,480 --> 00:17:08,939
um the receiver's origin is not verified

392
00:17:08,939 --> 00:17:11,699
in this case

393
00:17:11,699 --> 00:17:13,799
um so in principle this attack would

394
00:17:13,799 --> 00:17:16,500
correspond to the insufficient redirect

395
00:17:16,500 --> 00:17:19,319
revalidation which is already part of

396
00:17:19,319 --> 00:17:22,859
the security-based practices but in this

397
00:17:22,859 --> 00:17:27,260
case applied to Modern singer sign-on

398
00:17:28,559 --> 00:17:30,660
okay so in the malicious initiator

399
00:17:30,660 --> 00:17:33,540
attack we now swap the site so now the

400
00:17:33,540 --> 00:17:36,780
attacker tries to imitate the identity

401
00:17:36,780 --> 00:17:39,840
provider to inject a token on the

402
00:17:39,840 --> 00:17:41,280
service provider

403
00:17:41,280 --> 00:17:42,900
so therefore the attacker first

404
00:17:42,900 --> 00:17:45,179
generates like his own token by

405
00:17:45,179 --> 00:17:47,340
authenticating on the web shop with the

406
00:17:47,340 --> 00:17:48,419
IDP

407
00:17:48,419 --> 00:17:50,880
and then the attacker sends this token

408
00:17:50,880 --> 00:17:52,980
to the service provider

409
00:17:52,980 --> 00:17:55,320
and now the service provider listens for

410
00:17:55,320 --> 00:17:57,299
this token in this message event handler

411
00:17:57,299 --> 00:18:00,539
here and starts to process it

412
00:18:00,539 --> 00:18:02,880
but in this case the service provider

413
00:18:02,880 --> 00:18:06,240
does not or not properly which is here

414
00:18:06,240 --> 00:18:10,320
the second case validate the initiator's

415
00:18:10,320 --> 00:18:11,640
origin

416
00:18:11,640 --> 00:18:14,460
so it does not verify whether the token

417
00:18:14,460 --> 00:18:17,460
was sent by the service provider oh

418
00:18:17,460 --> 00:18:20,460
sorry for by the identity provider

419
00:18:20,460 --> 00:18:22,440
okay so within this singers and

420
00:18:22,440 --> 00:18:24,960
unrelated event handler

421
00:18:24,960 --> 00:18:26,460
um we identified like three common

422
00:18:26,460 --> 00:18:28,980
abilities

423
00:18:28,980 --> 00:18:31,080
um the token could be processed like in

424
00:18:31,080 --> 00:18:33,600
dangerous JavaScript things

425
00:18:33,600 --> 00:18:35,280
um which the attacker can exploit to

426
00:18:35,280 --> 00:18:37,740
achieve Dom's cross-site scripting so

427
00:18:37,740 --> 00:18:40,380
we've already seen that in the last talk

428
00:18:40,380 --> 00:18:43,200
and then the service provider could also

429
00:18:43,200 --> 00:18:46,860
use the token to lock the victim into

430
00:18:46,860 --> 00:18:49,980
the techas account which is also known

431
00:18:49,980 --> 00:18:52,620
as like session swapping

432
00:18:52,620 --> 00:18:55,380
and the service provider could also use

433
00:18:55,380 --> 00:18:58,799
the token to bind Alice's identity on

434
00:18:58,799 --> 00:19:01,799
the service provider to the attackers

435
00:19:01,799 --> 00:19:05,220
identity on the identity provider

436
00:19:05,220 --> 00:19:08,100
so this is known as account linking so

437
00:19:08,100 --> 00:19:10,740
the attacker can use his account on the

438
00:19:10,740 --> 00:19:12,660
identity provider to sign in on the

439
00:19:12,660 --> 00:19:15,840
service provider and the attacker would

440
00:19:15,840 --> 00:19:17,400
effectively be locked into Alice's

441
00:19:17,400 --> 00:19:19,640
account

442
00:19:19,740 --> 00:19:22,320
okay so this attack corresponds to

443
00:19:22,320 --> 00:19:24,960
cross-site request forgery in the

444
00:19:24,960 --> 00:19:27,539
security best practices but again this

445
00:19:27,539 --> 00:19:29,640
is here applied to Modern singer-san on

446
00:19:29,640 --> 00:19:32,000
schemes

447
00:19:32,820 --> 00:19:35,100
okay so now let's talk about click

448
00:19:35,100 --> 00:19:37,140
checking in the interactive iPhone flow

449
00:19:37,140 --> 00:19:39,900
and here we assume that booking.com

450
00:19:39,900 --> 00:19:43,799
offers like a 50 discount on its um

451
00:19:43,799 --> 00:19:47,580
travels with this unlock instant savings

452
00:19:47,580 --> 00:19:50,160
of 50 button here

453
00:19:50,160 --> 00:19:53,039
and now if Google would if booking.com

454
00:19:53,039 --> 00:19:55,200
would turn malicious

455
00:19:55,200 --> 00:19:58,140
then it could place the login iframe

456
00:19:58,140 --> 00:20:01,200
over this button and make it invisible

457
00:20:01,200 --> 00:20:03,240
so now if Alice wants to click this

458
00:20:03,240 --> 00:20:04,500
button

459
00:20:04,500 --> 00:20:06,960
um she actually clicks the login button

460
00:20:06,960 --> 00:20:10,200
so booking.com is able to secretly

461
00:20:10,200 --> 00:20:12,780
receive her identity

462
00:20:12,780 --> 00:20:15,059
so the question now should be

463
00:20:15,059 --> 00:20:17,520
how can the identity provider here

464
00:20:17,520 --> 00:20:20,400
Google prevent service providers from

465
00:20:20,400 --> 00:20:23,340
tricking their users into accepting the

466
00:20:23,340 --> 00:20:24,480
content

467
00:20:24,480 --> 00:20:26,640
and it turns out that this question is

468
00:20:26,640 --> 00:20:28,340
already well addressed in the security

469
00:20:28,340 --> 00:20:30,620
security best practices

470
00:20:30,620 --> 00:20:33,600
which suggests countermeasures like

471
00:20:33,600 --> 00:20:36,299
extreme options or frame busting

472
00:20:36,299 --> 00:20:38,100
JavaScript or the content security

473
00:20:38,100 --> 00:20:41,700
policy but these counter measures are

474
00:20:41,700 --> 00:20:44,820
disruptive so they either allow the

475
00:20:44,820 --> 00:20:47,640
framing optionally also for some white

476
00:20:47,640 --> 00:20:51,179
listed sites only or they do not allow

477
00:20:51,179 --> 00:20:52,799
framing at all

478
00:20:52,799 --> 00:20:55,500
so the better question would be here how

479
00:20:55,500 --> 00:20:58,020
can we allow framing but at the same

480
00:20:58,020 --> 00:21:01,200
time prevent click checking

481
00:21:01,200 --> 00:21:03,000
so and that's where the intersection

482
00:21:03,000 --> 00:21:06,179
Observer version 2 API comes into play

483
00:21:06,179 --> 00:21:11,039
and this API basically allows the iframe

484
00:21:11,039 --> 00:21:14,880
to track its visibility to a human

485
00:21:14,880 --> 00:21:17,580
and therefore the iframe creates this

486
00:21:17,580 --> 00:21:21,120
new intersection Observer object here

487
00:21:21,120 --> 00:21:24,059
and listens for changes and if a change

488
00:21:24,059 --> 00:21:27,059
occurs it checks whether the is visible

489
00:21:27,059 --> 00:21:30,360
attribute here has changed

490
00:21:30,360 --> 00:21:33,419
and if these visible attribute returns 2

491
00:21:33,419 --> 00:21:37,020
then the iframe can safely enable the

492
00:21:37,020 --> 00:21:40,080
content button and if it returns false

493
00:21:40,080 --> 00:21:41,940
um the iframe should disable the content

494
00:21:41,940 --> 00:21:44,159
button because it might not be visible

495
00:21:44,159 --> 00:21:46,140
to the user

496
00:21:46,140 --> 00:21:48,360
okay so I've prepared a short demo now

497
00:21:48,360 --> 00:21:52,220
and first the iframe here is visible

498
00:21:52,220 --> 00:21:55,620
and now the button is enabled so the

499
00:21:55,620 --> 00:21:57,000
click is captured now I make the iPhone

500
00:21:57,000 --> 00:21:59,400
like invisible and the button is

501
00:21:59,400 --> 00:22:00,720
disabled

502
00:22:00,720 --> 00:22:03,480
and if I make the iframe visible again

503
00:22:03,480 --> 00:22:07,020
then the button is enabled and the click

504
00:22:07,020 --> 00:22:10,140
gets captured so this API is basically a

505
00:22:10,140 --> 00:22:13,020
good starting point to implement the

506
00:22:13,020 --> 00:22:16,340
interactive iframe flow

507
00:22:17,220 --> 00:22:19,679
okay so let's now look at some real

508
00:22:19,679 --> 00:22:22,200
vulnerabilities found in the wild

509
00:22:22,200 --> 00:22:24,539
and I've prepared three examples on the

510
00:22:24,539 --> 00:22:27,120
slides and later in the live demo we

511
00:22:27,120 --> 00:22:28,860
will see another vulnerability which

512
00:22:28,860 --> 00:22:32,059
affects alibaba.com

513
00:22:32,520 --> 00:22:35,280
okay so notion was affected by the

514
00:22:35,280 --> 00:22:38,580
Wildcat receiver attack and here the

515
00:22:38,580 --> 00:22:40,620
attacker could initiate the singer sign

516
00:22:40,620 --> 00:22:44,880
unlock and Flow on Google for notion

517
00:22:44,880 --> 00:22:47,039
and then Google returned the login

518
00:22:47,039 --> 00:22:50,460
response back um to notion which runs in

519
00:22:50,460 --> 00:22:52,980
the pop-up so this basically corresponds

520
00:22:52,980 --> 00:22:55,080
to the relay pop-up flow

521
00:22:55,080 --> 00:22:58,080
then notion use post message

522
00:22:58,080 --> 00:23:00,299
um to send the entire log in response

523
00:23:00,299 --> 00:23:03,539
from Google which was contained in the

524
00:23:03,539 --> 00:23:05,700
location href here

525
00:23:05,700 --> 00:23:08,820
back to the opener window which includes

526
00:23:08,820 --> 00:23:11,340
the attacker however in this case notion

527
00:23:11,340 --> 00:23:14,580
use the Wildcat receiver which now

528
00:23:14,580 --> 00:23:16,919
leaked the token to the attacker

529
00:23:16,919 --> 00:23:19,320
so they did already include a two-door

530
00:23:19,320 --> 00:23:21,480
the to-do note here to set a proper

531
00:23:21,480 --> 00:23:24,659
origin but probably they were not aware

532
00:23:24,659 --> 00:23:26,640
of the implications that the token would

533
00:23:26,640 --> 00:23:27,780
be leaked

534
00:23:27,780 --> 00:23:30,120
okay so we reported this and notion

535
00:23:30,120 --> 00:23:31,860
fixed this

536
00:23:31,860 --> 00:23:34,140
um with like hard-coded Origins so this

537
00:23:34,140 --> 00:23:36,740
is safe now

538
00:23:37,620 --> 00:23:40,919
okay the malicious receiver attack

539
00:23:40,919 --> 00:23:43,700
um affected cnet.com

540
00:23:43,700 --> 00:23:46,740
and some others and to exploit this

541
00:23:46,740 --> 00:23:49,140
vulnerability the attacker first

542
00:23:49,140 --> 00:23:53,460
has to embed cnet's proxy iframe on his

543
00:23:53,460 --> 00:23:56,580
malicious website and this iframe

544
00:23:56,580 --> 00:24:00,020
exposes a JavaScript callback function

545
00:24:00,020 --> 00:24:03,360
set credentials in this case which

546
00:24:03,360 --> 00:24:06,919
relays the received credential

547
00:24:06,919 --> 00:24:11,720
with post message here to its parent

548
00:24:11,720 --> 00:24:14,340
however the receiver origin here of the

549
00:24:14,340 --> 00:24:17,400
post message call is taken from the xdme

550
00:24:17,400 --> 00:24:19,820
query parameter

551
00:24:19,820 --> 00:24:23,100
and the attacker set this parameter to

552
00:24:23,100 --> 00:24:24,539
attacka.com

553
00:24:24,539 --> 00:24:27,360
so the vulnerability is here that um the

554
00:24:27,360 --> 00:24:30,600
iframe does not validate this query

555
00:24:30,600 --> 00:24:32,159
parameter

556
00:24:32,159 --> 00:24:34,620
okay so to export this the attacker can

557
00:24:34,620 --> 00:24:37,559
again initiate this thing as an on Flow

558
00:24:37,559 --> 00:24:39,960
um with Google Google redirects the

559
00:24:39,960 --> 00:24:42,120
lock-in response to CNET again this is

560
00:24:42,120 --> 00:24:44,039
the relay pop-up flow

561
00:24:44,039 --> 00:24:47,900
and now um Google or CNET um

562
00:24:47,900 --> 00:24:52,559
invokes the JavaScript callback here

563
00:24:52,559 --> 00:24:55,200
um and passes the token as parameter to

564
00:24:55,200 --> 00:24:55,980
it

565
00:24:55,980 --> 00:24:58,559
so this year Works safely

566
00:24:58,559 --> 00:25:00,720
um because both the iframe and pop-up

567
00:25:00,720 --> 00:25:02,820
here on the same origin and this is the

568
00:25:02,820 --> 00:25:04,620
same origin communication techniques and

569
00:25:04,620 --> 00:25:06,960
they are safe

570
00:25:06,960 --> 00:25:10,620
okay so but now um the iframe proxies

571
00:25:10,620 --> 00:25:14,100
the token to its parents or the attacker

572
00:25:14,100 --> 00:25:17,880
side and this now leaks the token to the

573
00:25:17,880 --> 00:25:20,159
attacker

574
00:25:20,159 --> 00:25:23,580
CNET fix this by comparing the xcme

575
00:25:23,580 --> 00:25:28,080
parameter with a regular expression

576
00:25:28,080 --> 00:25:30,000
um which was unsafe in this case because

577
00:25:30,000 --> 00:25:33,500
it allowed all Origins ending

578
00:25:33,500 --> 00:25:35,059
on.cnet.com

579
00:25:35,059 --> 00:25:39,059
to receive the post message so if the if

580
00:25:39,059 --> 00:25:41,279
the attacker sets the xcme query

581
00:25:41,279 --> 00:25:44,120
parameter to a

582
00:25:44,120 --> 00:25:46,200
techa.com.cnet.com this would

583
00:25:46,200 --> 00:25:48,779
effectively bypass this check

584
00:25:48,779 --> 00:25:50,820
so we again reported this and they fix

585
00:25:50,820 --> 00:25:53,880
it with another regular expression which

586
00:25:53,880 --> 00:25:56,220
is like more complicated but this is

587
00:25:56,220 --> 00:25:58,500
safe now

588
00:25:58,500 --> 00:26:00,740
foreign

589
00:26:00,919 --> 00:26:03,539
New York Times was affected by the

590
00:26:03,539 --> 00:26:06,659
malicious initiator attack and here the

591
00:26:06,659 --> 00:26:10,080
attacker first opens the login Times

592
00:26:10,080 --> 00:26:12,960
login endpoint in a pop-up

593
00:26:12,960 --> 00:26:16,260
and this pop-up or this endpoint um

594
00:26:16,260 --> 00:26:20,039
expects to receive a post message which

595
00:26:20,039 --> 00:26:22,080
contains a redirect URI

596
00:26:22,080 --> 00:26:24,600
and now once the single sun on Flow

597
00:26:24,600 --> 00:26:27,480
terminates New York Times redirects to

598
00:26:27,480 --> 00:26:30,419
this redirect URI by setting the window

599
00:26:30,419 --> 00:26:33,600
location href

600
00:26:33,600 --> 00:26:35,700
um also New York Times checks um whether

601
00:26:35,700 --> 00:26:37,679
the post message was sent from a New

602
00:26:37,679 --> 00:26:40,260
York Times domain with this is New York

603
00:26:40,260 --> 00:26:42,720
Times domain function here however this

604
00:26:42,720 --> 00:26:44,700
function always returned true so they

605
00:26:44,700 --> 00:26:47,400
considered like all Origins as New York

606
00:26:47,400 --> 00:26:49,559
Times domains

607
00:26:49,559 --> 00:26:51,659
okay so the attacker can again exploit

608
00:26:51,659 --> 00:26:53,580
this by sending

609
00:26:53,580 --> 00:26:55,919
um a special URL with the JavaScript

610
00:26:55,919 --> 00:26:57,539
protocol Handler

611
00:26:57,539 --> 00:27:00,720
which contains this JavaScript code here

612
00:27:00,720 --> 00:27:03,299
two New York Times and New York Times

613
00:27:03,299 --> 00:27:05,700
then assigns this URL

614
00:27:05,700 --> 00:27:09,840
to its location href and this triggers

615
00:27:09,840 --> 00:27:13,440
the JavaScript code to be executed

616
00:27:13,440 --> 00:27:15,779
okay so New York Times fix this now by

617
00:27:15,779 --> 00:27:17,039
checking whether

618
00:27:17,039 --> 00:27:20,640
the initiator is one of these three

619
00:27:20,640 --> 00:27:23,900
white listed hosts here

620
00:27:25,559 --> 00:27:28,020
okay so now let's move on to the live

621
00:27:28,020 --> 00:27:30,480
demo

622
00:27:30,480 --> 00:27:34,200
and in the live demo we will use a tool

623
00:27:34,200 --> 00:27:36,240
that we developed to analyze the

624
00:27:36,240 --> 00:27:39,240
security of this cross-origin and same

625
00:27:39,240 --> 00:27:40,860
origin in browser communication

626
00:27:40,860 --> 00:27:43,679
techniques in modern singers and onflows

627
00:27:43,679 --> 00:27:45,779
so we track them all and analyze the

628
00:27:45,779 --> 00:27:46,740
security

629
00:27:46,740 --> 00:27:49,919
and therefore we will use the tool now

630
00:27:49,919 --> 00:27:53,039
to analyze and exploit the malicious

631
00:27:53,039 --> 00:27:56,658
receiver attack on Alibaba

632
00:28:03,059 --> 00:28:06,900
okay so yeah so I've prepared like two

633
00:28:06,900 --> 00:28:08,760
browsers on the left side we have the

634
00:28:08,760 --> 00:28:11,940
attackers browser here in red and on the

635
00:28:11,940 --> 00:28:13,559
right side we have the victims browser

636
00:28:13,559 --> 00:28:14,760
in yellow

637
00:28:14,760 --> 00:28:18,539
and now the attacker first wants to like

638
00:28:18,539 --> 00:28:21,779
analyze the Alibaba slogan flow right

639
00:28:21,779 --> 00:28:23,520
and therefore the attacker uses this

640
00:28:23,520 --> 00:28:25,380
tool here

641
00:28:25,380 --> 00:28:28,200
and we can start a new analysis run by

642
00:28:28,200 --> 00:28:31,400
entering the URL here

643
00:28:33,120 --> 00:28:35,880
then we can create a new Handler and now

644
00:28:35,880 --> 00:28:37,620
we need to execute this thing as an on

645
00:28:37,620 --> 00:28:38,580
flow

646
00:28:38,580 --> 00:28:42,379
therefore we can start a browser

647
00:28:47,520 --> 00:28:51,379
and now we can click on sign in here

648
00:28:56,039 --> 00:28:58,919
and we will use the Google login in this

649
00:28:58,919 --> 00:29:01,100
case

650
00:29:01,140 --> 00:29:03,659
so this opens the pop-up so this might

651
00:29:03,659 --> 00:29:05,880
be a pop-up flow right and we already

652
00:29:05,880 --> 00:29:08,340
pre-configured the credentials so they

653
00:29:08,340 --> 00:29:10,559
are automatically filled in

654
00:29:10,559 --> 00:29:12,779
and now the in-browser communications

655
00:29:12,779 --> 00:29:15,720
are exchanged and in the background

656
00:29:15,720 --> 00:29:18,720
there's this Chrome extension here which

657
00:29:18,720 --> 00:29:20,880
basically captures the in-browser

658
00:29:20,880 --> 00:29:23,520
communications and sends them to a

659
00:29:23,520 --> 00:29:25,860
backend which then post processes them

660
00:29:25,860 --> 00:29:29,840
and to analyze their security

661
00:29:31,260 --> 00:29:33,539
okay so we should be now locked in on

662
00:29:33,539 --> 00:29:35,340
Alibaba

663
00:29:35,340 --> 00:29:38,159
and

664
00:29:38,159 --> 00:29:41,700
now we captured like 1 600 in browser

665
00:29:41,700 --> 00:29:43,860
communication this because we also

666
00:29:43,860 --> 00:29:45,960
attract same origin Communications and

667
00:29:45,960 --> 00:29:49,860
they are used like often

668
00:29:49,860 --> 00:29:53,100
okay so we first can investigate like

669
00:29:53,100 --> 00:29:56,220
basic information about the singers and

670
00:29:56,220 --> 00:29:59,279
on Flow so in this case we see that the

671
00:29:59,279 --> 00:30:01,559
pop-up flow was executed

672
00:30:01,559 --> 00:30:04,679
um the identity provider was Google

673
00:30:04,679 --> 00:30:07,260
um the login request was sent in the

674
00:30:07,260 --> 00:30:09,899
pop-up which was opened by the top level

675
00:30:09,899 --> 00:30:10,919
window

676
00:30:10,919 --> 00:30:13,860
then we also see the login request URL

677
00:30:13,860 --> 00:30:15,020
here

678
00:30:15,020 --> 00:30:17,480
and we also can see that the login

679
00:30:17,480 --> 00:30:20,880
response was also sent in the pop-up

680
00:30:20,880 --> 00:30:23,760
window so this should be a relay pop-up

681
00:30:23,760 --> 00:30:26,120
flow

682
00:30:26,940 --> 00:30:29,760
okay so now um we implemented like a

683
00:30:29,760 --> 00:30:32,059
sequence diagram and a table view to

684
00:30:32,059 --> 00:30:33,840
investigate the in browser

685
00:30:33,840 --> 00:30:36,000
Communications

686
00:30:36,000 --> 00:30:38,580
and the sequence diagram basically takes

687
00:30:38,580 --> 00:30:41,820
all Communications compiles them into an

688
00:30:41,820 --> 00:30:45,000
SVG which is a sequence diagram and then

689
00:30:45,000 --> 00:30:47,640
can display the communications over time

690
00:30:47,640 --> 00:30:50,100
and in the frame in which they were

691
00:30:50,100 --> 00:30:52,559
executed

692
00:30:52,559 --> 00:30:56,539
so this can take some time

693
00:30:59,159 --> 00:31:00,899
this like really a large sequence

694
00:31:00,899 --> 00:31:03,260
diagram

695
00:31:05,220 --> 00:31:08,039
okay so now we can see that Alibaba uses

696
00:31:08,039 --> 00:31:11,279
like several iframes and we also see the

697
00:31:11,279 --> 00:31:13,559
pop-up window here which again embeds an

698
00:31:13,559 --> 00:31:14,760
iframe

699
00:31:14,760 --> 00:31:16,620
and then we see these in-browser

700
00:31:16,620 --> 00:31:19,860
communications as these bubbles

701
00:31:19,860 --> 00:31:23,039
now if we scroll like down we should

702
00:31:23,039 --> 00:31:24,179
somewhere

703
00:31:24,179 --> 00:31:26,940
hopefully see a post message that is

704
00:31:26,940 --> 00:31:30,260
sent between two windows

705
00:31:34,620 --> 00:31:36,360
okay so now

706
00:31:36,360 --> 00:31:38,279
um here we can see like some post

707
00:31:38,279 --> 00:31:39,360
messages

708
00:31:39,360 --> 00:31:41,399
which are sent from one window to

709
00:31:41,399 --> 00:31:42,360
another

710
00:31:42,360 --> 00:31:44,039
and they are highlighted in red here

711
00:31:44,039 --> 00:31:44,880
because

712
00:31:44,880 --> 00:31:46,620
um the receiver origin in this case is

713
00:31:46,620 --> 00:31:49,500
set to the wildcard so the data would

714
00:31:49,500 --> 00:31:53,279
leak to an attacker but in this case the

715
00:31:53,279 --> 00:31:55,620
data contains like no secrets or no

716
00:31:55,620 --> 00:31:58,320
privacy relevant information so in this

717
00:31:58,320 --> 00:32:01,140
case um this should be safe here

718
00:32:01,140 --> 00:32:03,390
okay because this is so large

719
00:32:03,390 --> 00:32:03,779
[Music]

720
00:32:03,779 --> 00:32:05,039
um

721
00:32:05,039 --> 00:32:06,600
and doesn't really allow us to filter

722
00:32:06,600 --> 00:32:08,340
the events we also implemented the

723
00:32:08,340 --> 00:32:12,480
tables View which also um contains all

724
00:32:12,480 --> 00:32:15,539
in browser Communications

725
00:32:15,539 --> 00:32:18,120
and now we can apply filters to them so

726
00:32:18,120 --> 00:32:20,340
we can either specify like custom search

727
00:32:20,340 --> 00:32:21,600
queries here

728
00:32:21,600 --> 00:32:25,080
or we can pick one of the pre-configured

729
00:32:25,080 --> 00:32:26,460
search queries

730
00:32:26,460 --> 00:32:30,299
and now um we want to check whether the

731
00:32:30,299 --> 00:32:33,539
pop-up window sent a post message

732
00:32:33,539 --> 00:32:36,539
and therefore we can select the

733
00:32:36,539 --> 00:32:39,539
show all post messages sent from pop-up

734
00:32:39,539 --> 00:32:40,559
option

735
00:32:40,559 --> 00:32:41,880
and now

736
00:32:41,880 --> 00:32:45,000
um we receive like two post messages so

737
00:32:45,000 --> 00:32:47,279
the first is not really interesting for

738
00:32:47,279 --> 00:32:50,520
us it just contains this YouTube data

739
00:32:50,520 --> 00:32:51,779
here

740
00:32:51,779 --> 00:32:54,240
but the second one seems here to be more

741
00:32:54,240 --> 00:32:56,880
interesting because it says like and the

742
00:32:56,880 --> 00:32:59,460
action is login result then there's a

743
00:32:59,460 --> 00:33:03,419
result code and the St parameter here is

744
00:33:03,419 --> 00:33:07,380
like um this random value which looks

745
00:33:07,380 --> 00:33:10,080
like it could be a token

746
00:33:10,080 --> 00:33:12,899
okay so it also highlights like related

747
00:33:12,899 --> 00:33:15,019
post message handlers

748
00:33:15,019 --> 00:33:18,539
which could process the post message

749
00:33:18,539 --> 00:33:21,960
then it um highlights that um The Source

750
00:33:21,960 --> 00:33:23,880
frame so the frames that sent the post

751
00:33:23,880 --> 00:33:24,840
message

752
00:33:24,840 --> 00:33:27,960
is indeed the pop-up window and the

753
00:33:27,960 --> 00:33:31,320
pop-up sent it to the top level window

754
00:33:31,320 --> 00:33:34,080
also we see that the source origin here

755
00:33:34,080 --> 00:33:37,380
was not accessed so this could probably

756
00:33:37,380 --> 00:33:40,320
mean that token injection is works here

757
00:33:40,320 --> 00:33:41,580
as well

758
00:33:41,580 --> 00:33:44,940
so now we want to see the JavaScript

759
00:33:44,940 --> 00:33:47,580
code that sent this post message

760
00:33:47,580 --> 00:33:51,179
and therefore we can copy this

761
00:33:51,179 --> 00:33:52,799
parameter here

762
00:33:52,799 --> 00:33:56,460
and now we have to filter for all

763
00:33:56,460 --> 00:33:59,039
the JavaScript code that is executed in

764
00:33:59,039 --> 00:34:01,080
the pop-up window

765
00:34:01,080 --> 00:34:03,419
so we say hierarchy

766
00:34:03,419 --> 00:34:04,799
equals

767
00:34:04,799 --> 00:34:07,260
top pop-ups

768
00:34:07,260 --> 00:34:09,359
of zero

769
00:34:09,359 --> 00:34:11,760
and the type of this in browser

770
00:34:11,760 --> 00:34:14,760
communication is in this case document

771
00:34:14,760 --> 00:34:17,399
Interactive

772
00:34:17,399 --> 00:34:21,179
and the content HTML should contain this

773
00:34:21,179 --> 00:34:23,219
token

774
00:34:23,219 --> 00:34:25,859
okay so now if you filter for this um we

775
00:34:25,859 --> 00:34:28,139
exactly get one match which is like the

776
00:34:28,139 --> 00:34:31,800
HTML page that's sent this token

777
00:34:31,800 --> 00:34:34,560
and we can pretty print that

778
00:34:34,560 --> 00:34:37,560
and now if we scroll through here we can

779
00:34:37,560 --> 00:34:39,119
see that

780
00:34:39,119 --> 00:34:42,239
the um the token is included in this

781
00:34:42,239 --> 00:34:44,099
post message object here

782
00:34:44,099 --> 00:34:47,760
and the response action here is also set

783
00:34:47,760 --> 00:34:48,899
to window

784
00:34:48,899 --> 00:34:51,239
and now if we scroll further down then

785
00:34:51,239 --> 00:34:54,060
we see that if the response action is

786
00:34:54,060 --> 00:34:55,320
set to window

787
00:34:55,320 --> 00:34:59,640
then um the pop-up registers post

788
00:34:59,640 --> 00:35:01,619
message event listener

789
00:35:01,619 --> 00:35:04,560
and if the this is like the Callback

790
00:35:04,560 --> 00:35:05,760
function

791
00:35:05,760 --> 00:35:09,119
and the Callback responds with a post

792
00:35:09,119 --> 00:35:11,520
message which

793
00:35:11,520 --> 00:35:15,359
contains the token and the origin of the

794
00:35:15,359 --> 00:35:18,359
post message that's sent it again here

795
00:35:18,359 --> 00:35:21,420
no urgent checks are replied so now if

796
00:35:21,420 --> 00:35:23,940
I'm a techa.com and I send a post

797
00:35:23,940 --> 00:35:27,240
message to alibaba's pop-up then Alibaba

798
00:35:27,240 --> 00:35:31,819
would respond with the token to me

799
00:35:32,700 --> 00:35:35,640
okay so now um we can explore this by

800
00:35:35,640 --> 00:35:38,040
generating a proof of concept

801
00:35:38,040 --> 00:35:41,160
and this basically takes all in browser

802
00:35:41,160 --> 00:35:43,800
Communications into account and sends

803
00:35:43,800 --> 00:35:45,780
them to the different frames and because

804
00:35:45,780 --> 00:35:48,680
Alibaba uses like lots of post messages

805
00:35:48,680 --> 00:35:51,720
this exploit is like really long

806
00:35:51,720 --> 00:35:55,200
but um for us um it was already deployed

807
00:35:55,200 --> 00:35:57,060
here on the server and now the attacker

808
00:35:57,060 --> 00:35:59,099
would send this proof of concept

809
00:35:59,099 --> 00:36:02,540
to the victim

810
00:36:03,660 --> 00:36:06,000
and now the victim would click on this

811
00:36:06,000 --> 00:36:08,940
button here now the thing is on flow is

812
00:36:08,940 --> 00:36:10,260
executed

813
00:36:10,260 --> 00:36:14,660
and the proof of concept did receive

814
00:36:14,660 --> 00:36:18,960
this parameter here in the St

815
00:36:18,960 --> 00:36:21,240
um so the St parameter

816
00:36:21,240 --> 00:36:24,660
so now all um what is left is that the

817
00:36:24,660 --> 00:36:27,960
attacker has to redeem this token

818
00:36:27,960 --> 00:36:29,520
and therefore

819
00:36:29,520 --> 00:36:32,220
um there's like this um

820
00:36:32,220 --> 00:36:35,880
this URL where we can paste them this

821
00:36:35,880 --> 00:36:38,180
token

822
00:36:39,540 --> 00:36:41,400
as get parameter

823
00:36:41,400 --> 00:36:43,440
and now the attacker should be logged

824
00:36:43,440 --> 00:36:46,579
into ls's account

825
00:36:48,119 --> 00:36:52,200
okay so this is the case now yeah

826
00:36:52,200 --> 00:36:55,960
[Applause]

827
00:36:57,060 --> 00:36:59,640
okay so we reported this like um two

828
00:36:59,640 --> 00:37:02,400
years ago but um seems like it still

829
00:37:02,400 --> 00:37:05,060
works so

830
00:37:06,300 --> 00:37:08,420
thank you

831
00:37:12,000 --> 00:37:16,640
okay so um what are the lessons learned

832
00:37:16,680 --> 00:37:18,540
um modern singers and on Floors use in

833
00:37:18,540 --> 00:37:20,220
browser Communications

834
00:37:20,220 --> 00:37:23,400
which replaced the URL redirects um in

835
00:37:23,400 --> 00:37:25,920
the textbook singers and on Flow so this

836
00:37:25,920 --> 00:37:28,079
now brings more web security threats

837
00:37:28,079 --> 00:37:31,140
into the singer sign-on domain and we

838
00:37:31,140 --> 00:37:33,720
should treat them carefully

839
00:37:33,720 --> 00:37:35,820
and we've seen both sandwiching and

840
00:37:35,820 --> 00:37:38,160
cross-origin techniques

841
00:37:38,160 --> 00:37:40,320
um same origin techniques are safe by

842
00:37:40,320 --> 00:37:42,480
Design because they are protected by the

843
00:37:42,480 --> 00:37:45,060
same origin policy and cross-origin

844
00:37:45,060 --> 00:37:46,740
techniques require like really careful

845
00:37:46,740 --> 00:37:49,680
Security checks as we've seen in the

846
00:37:49,680 --> 00:37:51,839
post message case

847
00:37:51,839 --> 00:37:54,540
also post message vulnerabilities seem

848
00:37:54,540 --> 00:37:56,160
to still be prevalent

849
00:37:56,160 --> 00:37:58,500
also in single sign-on

850
00:37:58,500 --> 00:38:01,200
and in singles and on here especially

851
00:38:01,200 --> 00:38:04,740
the sender site is like really important

852
00:38:04,740 --> 00:38:09,300
because it can result in token leakages

853
00:38:09,300 --> 00:38:12,000
okay so also websites want a lot more

854
00:38:12,000 --> 00:38:13,200
flexibility

855
00:38:13,200 --> 00:38:15,900
so they commonly Implement singers and

856
00:38:15,900 --> 00:38:17,940
on their own

857
00:38:17,940 --> 00:38:18,720
um

858
00:38:18,720 --> 00:38:22,260
just like in the relay pop-up flow and

859
00:38:22,260 --> 00:38:25,400
they also use relax post message

860
00:38:25,400 --> 00:38:29,280
checks like the regular expressions and

861
00:38:29,280 --> 00:38:32,820
the wild cards so they use this to allow

862
00:38:32,820 --> 00:38:36,000
multiple domains or even sub-domains to

863
00:38:36,000 --> 00:38:39,599
receive the post messages

864
00:38:39,599 --> 00:38:41,520
and also there's a clear leg in this

865
00:38:41,520 --> 00:38:44,579
specification so the pop-up flow and the

866
00:38:44,579 --> 00:38:47,280
iPhone floor need the standardized NOAA

867
00:38:47,280 --> 00:38:49,920
formally described by these things on

868
00:38:49,920 --> 00:38:52,700
working groups and the post message

869
00:38:52,700 --> 00:38:55,440
response mode should definitely be

870
00:38:55,440 --> 00:38:58,560
standardized just like the form post

871
00:38:58,560 --> 00:39:01,560
response mode which was also later added

872
00:39:01,560 --> 00:39:04,079
to the specification

873
00:39:04,079 --> 00:39:06,119
okay so then I would like to end this

874
00:39:06,119 --> 00:39:07,920
talk um with a quote from a

875
00:39:07,920 --> 00:39:11,520
specification which said that it is

876
00:39:11,520 --> 00:39:13,920
expected that additional response mode

877
00:39:13,920 --> 00:39:16,500
may be defined by other specifications

878
00:39:16,500 --> 00:39:17,880
in the future

879
00:39:17,880 --> 00:39:20,700
including possibly ones utilizing the

880
00:39:20,700 --> 00:39:23,520
postmessage API so this might be a good

881
00:39:23,520 --> 00:39:25,500
idea

882
00:39:25,500 --> 00:39:28,380
okay so thank you and um do you have any

883
00:39:28,380 --> 00:39:30,619
questions

884
00:39:31,220 --> 00:39:32,630
[Applause]

885
00:39:32,630 --> 00:39:35,820
[Music]

886
00:39:40,170 --> 00:39:43,280
[Music]

