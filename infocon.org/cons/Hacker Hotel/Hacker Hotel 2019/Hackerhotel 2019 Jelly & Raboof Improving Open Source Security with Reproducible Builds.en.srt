1
00:00:05,169 --> 00:00:10,160
all right welcome everybody

2
00:00:08,269 --> 00:00:11,900
we'd like to take the opportunity to

3
00:00:10,160 --> 00:00:13,700
tell you a little bit about improving

4
00:00:11,900 --> 00:00:17,240
open source security with reproducible

5
00:00:13,700 --> 00:00:21,289
builds so let's take a quick moment to

6
00:00:17,240 --> 00:00:25,970
introduce ourselves so this is PL from

7
00:00:21,289 --> 00:00:30,460
the well he's a participant at RAF base

8
00:00:25,970 --> 00:00:32,689
and he is mainly interested in

9
00:00:30,460 --> 00:00:38,000
reproducible builds from the arsenic's

10
00:00:32,689 --> 00:00:41,540
perspective and I myself am I'm active

11
00:00:38,000 --> 00:00:44,479
at Octavia and I'm coming from the JPM

12
00:00:41,540 --> 00:00:47,629
angle so this talk will be a general

13
00:00:44,479 --> 00:00:52,339
talk so not specifically for arch or the

14
00:00:47,629 --> 00:00:54,080
JVM but just I think making the case

15
00:00:52,339 --> 00:00:58,239
that reproducible builds is a useful

16
00:00:54,080 --> 00:01:02,089
concept to improve the security of

17
00:00:58,239 --> 00:01:05,330
open-source software so this will be a

18
00:01:02,089 --> 00:01:07,460
dual presentation I will take care of

19
00:01:05,330 --> 00:01:13,158
the first part and then yellow will take

20
00:01:07,460 --> 00:01:14,990
over for the second part so this is the

21
00:01:13,159 --> 00:01:17,990
quick overview of the agenda

22
00:01:14,990 --> 00:01:21,919
so first let's make the case of why we

23
00:01:17,990 --> 00:01:25,219
think this is needed at all then explain

24
00:01:21,920 --> 00:01:28,909
what reproducible is and looks like and

25
00:01:25,219 --> 00:01:30,740
then go into more detail of how you do

26
00:01:28,909 --> 00:01:33,229
it what tools are available to you to

27
00:01:30,740 --> 00:01:39,288
improve your security base reproduce for

28
00:01:33,229 --> 00:01:44,179
builds and some current developments and

29
00:01:39,289 --> 00:01:47,210
future work in this area so let's start

30
00:01:44,179 --> 00:01:49,880
with why this is important in first

31
00:01:47,210 --> 00:01:52,759
place so let's do a sort of like

32
00:01:49,880 --> 00:01:56,960
lightweight risk risk analysis why do we

33
00:01:52,759 --> 00:01:59,149
have to care about this so our attacks

34
00:01:56,960 --> 00:01:59,949
on open source software relevant in the

35
00:01:59,149 --> 00:02:02,959
first place

36
00:01:59,950 --> 00:02:05,509
spoiler alert we of course think so so

37
00:02:02,959 --> 00:02:07,939
black the cops or source did a black dog

38
00:02:05,509 --> 00:02:12,020
didn't a survey unfortunately they

39
00:02:07,939 --> 00:02:17,329
stopped in 2016 but they have some nice

40
00:02:12,020 --> 00:02:18,380
numbers where most yeah most numbers

41
00:02:17,330 --> 00:02:21,950
they serve eight and

42
00:02:18,380 --> 00:02:25,900
this is a little biased and but would

43
00:02:21,950 --> 00:02:28,310
say they run on open source software and

44
00:02:25,900 --> 00:02:29,950
as reasons for that they cite things

45
00:02:28,310 --> 00:02:33,590
like the quality of the solutions

46
00:02:29,950 --> 00:02:35,600
features technical capabilities and the

47
00:02:33,590 --> 00:02:38,300
possibility to customize and fix so it's

48
00:02:35,600 --> 00:02:41,690
no longer from a cost perspective but

49
00:02:38,300 --> 00:02:46,910
more these kinds of reasons to choose

50
00:02:41,690 --> 00:02:49,040
for open source software so well over

51
00:02:46,910 --> 00:02:51,740
half of companies would consider floss

52
00:02:49,040 --> 00:02:57,109
options before looking at proprietary

53
00:02:51,740 --> 00:02:59,180
alternatives report from a little more

54
00:02:57,110 --> 00:03:02,480
back is from the US Department of

55
00:02:59,180 --> 00:03:04,280
Defense and so these guys saw hey within

56
00:03:02,480 --> 00:03:07,100
our organization there's an increasing

57
00:03:04,280 --> 00:03:10,190
amount of use of free and open source

58
00:03:07,100 --> 00:03:12,500
software maybe we should look into that

59
00:03:10,190 --> 00:03:14,870
maybe we should write a report about is

60
00:03:12,500 --> 00:03:17,570
this a good idea suit we ban this what

61
00:03:14,870 --> 00:03:21,040
should we do with this and so

62
00:03:17,570 --> 00:03:23,870
interesting results from this report was

63
00:03:21,040 --> 00:03:28,810
they actually depend heavily on free

64
00:03:23,870 --> 00:03:31,760
software and the overwhelming

65
00:03:28,810 --> 00:03:33,080
recommendation was not to ban free

66
00:03:31,760 --> 00:03:36,920
software at the Department of Defense

67
00:03:33,080 --> 00:03:39,320
and actually invest in it promote it

68
00:03:36,920 --> 00:03:42,320
internally and make use of it more

69
00:03:39,320 --> 00:03:44,660
effectively and so I think we've come a

70
00:03:42,320 --> 00:03:47,420
long ways like when I started in open

71
00:03:44,660 --> 00:03:49,670
source 20 years ago something it was

72
00:03:47,420 --> 00:03:51,739
like pretty exciting if you saw like

73
00:03:49,670 --> 00:03:54,350
actual commercial products who were

74
00:03:51,740 --> 00:03:56,060
running Linux or using open source it's

75
00:03:54,350 --> 00:03:59,359
completely the other way around now like

76
00:03:56,060 --> 00:04:02,030
all the big financial institutions big

77
00:03:59,360 --> 00:04:05,450
corporations they rely heavily on open

78
00:04:02,030 --> 00:04:09,170
source so I think it's worth it to make

79
00:04:05,450 --> 00:04:11,450
sure that the pipeline from development

80
00:04:09,170 --> 00:04:14,299
of open source software to the actual

81
00:04:11,450 --> 00:04:16,579
running of it in production is also

82
00:04:14,300 --> 00:04:21,650
secure and no malware is inserted in

83
00:04:16,579 --> 00:04:23,719
that process ok so this does this

84
00:04:21,649 --> 00:04:28,460
actually happen so our developers

85
00:04:23,720 --> 00:04:30,590
targeted to impact actually their users

86
00:04:28,460 --> 00:04:32,060
and their customers because that is what

87
00:04:30,590 --> 00:04:36,460
reproducible target

88
00:04:32,060 --> 00:04:39,350
builds help secure is the gap between

89
00:04:36,460 --> 00:04:41,419
the developer on one side and the person

90
00:04:39,350 --> 00:04:44,030
actually running the goat on the other

91
00:04:41,419 --> 00:04:46,520
side No

92
00:04:44,030 --> 00:04:49,429
yes this actually happens and so there

93
00:04:46,520 --> 00:04:51,440
was this one guy who took some time to

94
00:04:49,430 --> 00:04:54,919
look into homebrew through homebrew is a

95
00:04:51,440 --> 00:04:58,490
package manager for Mac OS it's very

96
00:04:54,919 --> 00:05:00,590
widely used and this guy just stacked

97
00:04:58,490 --> 00:05:03,290
looked at the Jenkins configuration and

98
00:05:00,590 --> 00:05:07,969
found some keys and so basically he

99
00:05:03,290 --> 00:05:11,060
could have owned the Jenkins machines of

100
00:05:07,970 --> 00:05:13,130
homebrew and basically to control to

101
00:05:11,060 --> 00:05:16,400
take control over the necklace machines

102
00:05:13,130 --> 00:05:18,560
of everyone who used homebrew luckily

103
00:05:16,400 --> 00:05:21,229
for us in this case he didn't and I did

104
00:05:18,560 --> 00:05:24,950
a responsible disclosure but this is

105
00:05:21,229 --> 00:05:27,039
pretty scary now of course this went

106
00:05:24,950 --> 00:05:30,169
well because this was a white hat guy

107
00:05:27,040 --> 00:05:31,580
but even more recently in November of

108
00:05:30,169 --> 00:05:33,799
last year

109
00:05:31,580 --> 00:05:38,300
there was a very widely used noches

110
00:05:33,800 --> 00:05:42,080
package which fell into the wrong hands

111
00:05:38,300 --> 00:05:46,100
and there was some malicious JavaScript

112
00:05:42,080 --> 00:05:48,080
code added to the to their deployable it

113
00:05:46,100 --> 00:05:49,669
was fairly hard to detect I mean they

114
00:05:48,080 --> 00:05:53,330
made some mistakes making it easier to

115
00:05:49,669 --> 00:05:56,539
to detect in this case but this actually

116
00:05:53,330 --> 00:05:59,870
went live and actually this code made it

117
00:05:56,539 --> 00:06:02,120
into a lot of places so luckily for us

118
00:05:59,870 --> 00:06:04,850
this was this malware was very targeted

119
00:06:02,120 --> 00:06:06,830
so they specifically targeted one

120
00:06:04,850 --> 00:06:09,950
downstream application in which they

121
00:06:06,830 --> 00:06:13,130
injected some kind of Bitcoin wallet

122
00:06:09,950 --> 00:06:16,010
stealing thing but this is really scary

123
00:06:13,130 --> 00:06:18,710
because a lot of our like critical

124
00:06:16,010 --> 00:06:21,440
infrastructure large organizations are

125
00:06:18,710 --> 00:06:24,109
relying on these kinds of libraries and

126
00:06:21,440 --> 00:06:26,360
if they get malware and injected into

127
00:06:24,110 --> 00:06:30,050
their systems of course there's like

128
00:06:26,360 --> 00:06:35,630
more ways to contain that risk but it's

129
00:06:30,050 --> 00:06:37,340
very scary so luckily there's a lot of

130
00:06:35,630 --> 00:06:41,210
things we can do to make this less scary

131
00:06:37,340 --> 00:06:43,880
and less prone to attacks one thing to

132
00:06:41,210 --> 00:06:46,400
make clear is that I I'm talking a lot

133
00:06:43,880 --> 00:06:48,560
about the risks of open source software

134
00:06:46,400 --> 00:06:51,409
on the other side there's proprietary

135
00:06:48,560 --> 00:06:54,830
software and the risks are even bigger

136
00:06:51,409 --> 00:06:57,169
there because there you actually have no

137
00:06:54,830 --> 00:06:59,840
way at all to verify that there's no

138
00:06:57,169 --> 00:07:01,789
more in the binaries in opus or soft

139
00:06:59,840 --> 00:07:04,280
software at least you have some chance

140
00:07:01,789 --> 00:07:08,680
and we will show here that there are

141
00:07:04,280 --> 00:07:16,250
some tools to make more to leverage that

142
00:07:08,680 --> 00:07:18,860
those capabilities more okay so let's

143
00:07:16,250 --> 00:07:21,259
look at the open source development

144
00:07:18,860 --> 00:07:25,129
pipeline in a little bit more detail to

145
00:07:21,259 --> 00:07:28,009
see where reproducible builds fits so I

146
00:07:25,129 --> 00:07:30,650
think in like a bird's eye view the

147
00:07:28,009 --> 00:07:32,930
development process looks like developer

148
00:07:30,650 --> 00:07:37,279
writes encode commits it to source

149
00:07:32,930 --> 00:07:39,620
control then build some packages it the

150
00:07:37,279 --> 00:07:42,860
package is this build it and then the

151
00:07:39,620 --> 00:07:44,629
user runs the software and let's take a

152
00:07:42,860 --> 00:07:48,889
quick look at what can go wrong and what

153
00:07:44,629 --> 00:07:50,810
we can do against that so if the

154
00:07:48,889 --> 00:07:54,490
developer writes code what can go wrong

155
00:07:50,810 --> 00:07:59,060
well developer himself can be malicious

156
00:07:54,490 --> 00:08:00,979
that's a problem but also a non

157
00:07:59,060 --> 00:08:03,050
malicious developer can be blackmailed

158
00:08:00,979 --> 00:08:05,469
can be coerced maybe by the government

159
00:08:03,050 --> 00:08:10,009
maybe by some criminal organization or

160
00:08:05,469 --> 00:08:11,990
individual and also he can go to a

161
00:08:10,009 --> 00:08:14,629
hacker conference or some other place

162
00:08:11,990 --> 00:08:16,849
where he doesn't take good care of his

163
00:08:14,629 --> 00:08:19,009
machines and his machine can get

164
00:08:16,849 --> 00:08:23,000
compromised so there's very real chances

165
00:08:19,009 --> 00:08:25,490
developer gets infected so what can we

166
00:08:23,000 --> 00:08:28,879
do about this I don't think we can do a

167
00:08:25,490 --> 00:08:30,740
lot but I think we can take some

168
00:08:28,879 --> 00:08:34,669
countermeasures so it doesn't matter

169
00:08:30,740 --> 00:08:37,519
that we don't fully trust the developer

170
00:08:34,669 --> 00:08:41,390
in this side because the developers

171
00:08:37,519 --> 00:08:44,870
commit the source control so here's you

172
00:08:41,390 --> 00:08:47,420
can the threat can be that the source

173
00:08:44,870 --> 00:08:50,990
control hosting is compromised but

174
00:08:47,420 --> 00:08:54,380
luckily we can use sign commits in some

175
00:08:50,990 --> 00:08:56,920
case it's easy to see if something

176
00:08:54,380 --> 00:08:59,870
deeper in the commit three was

177
00:08:56,920 --> 00:09:02,839
was changed I'm not going to go too deep

178
00:08:59,870 --> 00:09:04,550
into this but the point is at some point

179
00:09:02,839 --> 00:09:08,329
you can do an audit of the source code

180
00:09:04,550 --> 00:09:10,339
both manually and automatically and you

181
00:09:08,329 --> 00:09:14,420
can ensure yourself that there's nothing

182
00:09:10,339 --> 00:09:16,910
weird in there the next step is building

183
00:09:14,420 --> 00:09:20,709
and packaging here we can have problems

184
00:09:16,910 --> 00:09:24,410
because our dependencies are already

185
00:09:20,709 --> 00:09:26,839
attacked or then our build machine is

186
00:09:24,410 --> 00:09:28,670
attacked well when our dependencies are

187
00:09:26,839 --> 00:09:31,010
attacked basically we're out of luck so

188
00:09:28,670 --> 00:09:32,899
what we have to do there is we have to

189
00:09:31,010 --> 00:09:36,050
also verify the integrity of the

190
00:09:32,899 --> 00:09:38,360
dependencies we use for the compromised

191
00:09:36,050 --> 00:09:40,339
build machine that's where reproducible

192
00:09:38,360 --> 00:09:42,889
builds committed comes in so that's the

193
00:09:40,339 --> 00:09:47,209
area of the pipeline that reproducible

194
00:09:42,889 --> 00:09:49,010
builds have helped secure well then the

195
00:09:47,209 --> 00:09:50,779
package is distributed that's not a

196
00:09:49,010 --> 00:09:54,110
really a soft problem I think that

197
00:09:50,779 --> 00:09:58,399
updates is a well-known problem so yeah

198
00:09:54,110 --> 00:10:05,720
basically signatures checking those

199
00:09:58,399 --> 00:10:13,190
kinds of things can't do a lot more yeah

200
00:10:05,720 --> 00:10:14,779
it's a little blurred but yes yeah so

201
00:10:13,190 --> 00:10:16,790
recapping developers write code

202
00:10:14,779 --> 00:10:18,529
committed to source control it's built

203
00:10:16,790 --> 00:10:21,860
and packaged the package is this view

204
00:10:18,529 --> 00:10:25,699
the user runs the software now we can't

205
00:10:21,860 --> 00:10:29,120
really secure the developers but we can

206
00:10:25,699 --> 00:10:32,479
check that there's no foul play in this

207
00:10:29,120 --> 00:10:34,389
in the source control tree then we can

208
00:10:32,480 --> 00:10:36,170
build and package it and we hope

209
00:10:34,389 --> 00:10:38,630
reproducible builds will help here

210
00:10:36,170 --> 00:10:41,599
dispute the package and then check that

211
00:10:38,630 --> 00:10:43,779
the reproducible builds certified

212
00:10:41,600 --> 00:10:49,430
package is indeed this will to all

213
00:10:43,779 --> 00:10:51,230
participants ok so now I think I hope I

214
00:10:49,430 --> 00:10:55,010
have convinced you that reproducible

215
00:10:51,230 --> 00:10:57,050
builds that the officers development

216
00:10:55,010 --> 00:10:59,480
pipeline is something that's worth

217
00:10:57,050 --> 00:11:02,979
protecting and that there's a hole in

218
00:10:59,480 --> 00:11:05,510
the build system step of the process and

219
00:11:02,980 --> 00:11:07,870
that hole is what if your built the

220
00:11:05,510 --> 00:11:10,569
machine were you building your

221
00:11:07,870 --> 00:11:12,879
your artifact what if that machine is

222
00:11:10,569 --> 00:11:14,529
compromised for mouth then you're out of

223
00:11:12,879 --> 00:11:17,319
luck and then you're distributing

224
00:11:14,529 --> 00:11:21,670
malware to your customers and to your

225
00:11:17,319 --> 00:11:23,740
users and that would be bad so we should

226
00:11:21,670 --> 00:11:26,259
serve if we assume source control is

227
00:11:23,740 --> 00:11:28,420
okay then the concept of reproducible

228
00:11:26,259 --> 00:11:31,839
builds is that we don't build on

229
00:11:28,420 --> 00:11:35,170
packaged our software once but we build

230
00:11:31,839 --> 00:11:38,319
it multiple times on different and

231
00:11:35,170 --> 00:11:41,559
really different machines and so a

232
00:11:38,319 --> 00:11:44,519
diverse set of machines and then we

233
00:11:41,559 --> 00:11:48,730
check that the diverse set of machines

234
00:11:44,519 --> 00:11:52,180
they all come to the same resulting

235
00:11:48,730 --> 00:11:58,779
artifacts so this means if one of the

236
00:11:52,180 --> 00:12:02,170
machines exactly

237
00:11:58,779 --> 00:12:04,569
so that doesn't solve compromised

238
00:12:02,170 --> 00:12:06,699
machines but at least you can detect it

239
00:12:04,569 --> 00:12:09,009
if one of your machine is kushina's

240
00:12:06,699 --> 00:12:11,349
compromised of course if all your

241
00:12:09,009 --> 00:12:14,259
machines are compromised you're still

242
00:12:11,350 --> 00:12:16,990
out of luck but I think this is a useful

243
00:12:14,259 --> 00:12:19,930
thing to check so typically this would

244
00:12:16,990 --> 00:12:21,610
be a CI machine and maybe some other

245
00:12:19,930 --> 00:12:27,519
environment like a developer machine

246
00:12:21,610 --> 00:12:29,559
if those agree on the packaged results

247
00:12:27,519 --> 00:12:31,480
then you have higher much higher

248
00:12:29,559 --> 00:12:37,839
confidence that there's no foul play

249
00:12:31,480 --> 00:12:40,240
injected there but but for this to

250
00:12:37,839 --> 00:12:44,370
happen so this sounds pretty simple and

251
00:12:40,240 --> 00:12:48,579
obvious right but for this to happen we

252
00:12:44,370 --> 00:12:50,769
need to remove unreproducible T from the

253
00:12:48,579 --> 00:12:53,529
build and package step and that's the

254
00:12:50,769 --> 00:12:55,990
practical work that you that we need to

255
00:12:53,529 --> 00:13:01,059
do to achieve the go of reproducible

256
00:12:55,990 --> 00:13:04,360
builds and yellow we'll go into some

257
00:13:01,059 --> 00:13:07,540
sources of n reproducibility in a little

258
00:13:04,360 --> 00:13:10,569
bit but reproducible builds besides them

259
00:13:07,540 --> 00:13:11,920
I think the main advantage of checking

260
00:13:10,569 --> 00:13:17,189
that none of your build machines are

261
00:13:11,920 --> 00:13:17,189
compromised has some other advantages

262
00:13:17,500 --> 00:13:20,910
so in

263
00:13:21,050 --> 00:13:30,219
in one case the district distribution

264
00:13:26,710 --> 00:13:35,690
the build process of an application

265
00:13:30,220 --> 00:13:38,930
generated the key at build time and some

266
00:13:35,690 --> 00:13:42,020
distributions generated that key at the

267
00:13:38,930 --> 00:13:45,609
build server and then this related to

268
00:13:42,020 --> 00:13:48,980
all the clients so this was obviously

269
00:13:45,610 --> 00:13:51,020
obviously not what was intended because

270
00:13:48,980 --> 00:13:52,730
now everyone was sharing the same key

271
00:13:51,020 --> 00:13:55,990
instead of every user having the same

272
00:13:52,730 --> 00:14:00,650
key and using reproducible builds

273
00:13:55,990 --> 00:14:02,570
uncovered this this problem in the in

274
00:14:00,650 --> 00:14:03,949
the packaging of this application so

275
00:14:02,570 --> 00:14:07,640
here it was more of a bug in the

276
00:14:03,950 --> 00:14:10,550
packaging then in the building of the

277
00:14:07,640 --> 00:14:13,360
software itself but this is also part of

278
00:14:10,550 --> 00:14:13,359
the build

279
00:14:14,720 --> 00:14:19,910
it can also help in caching so for

280
00:14:18,080 --> 00:14:22,670
example the base will build to when it

281
00:14:19,910 --> 00:14:24,650
builds a large project then it builds a

282
00:14:22,670 --> 00:14:27,500
dependency tree of all the parts of the

283
00:14:24,650 --> 00:14:30,530
project and if we now so here we have a

284
00:14:27,500 --> 00:14:32,930
main which depends on main dot CC and an

285
00:14:30,530 --> 00:14:37,220
intermediate result which depends on X

286
00:14:32,930 --> 00:14:38,989
dot CC if we now change X dot CC but we

287
00:14:37,220 --> 00:14:42,680
only change the comments and we rent the

288
00:14:38,990 --> 00:14:46,490
bill to again then it can see that the

289
00:14:42,680 --> 00:14:48,459
result X is the same as last time and it

290
00:14:46,490 --> 00:14:52,460
doesn't have to compile main again

291
00:14:48,460 --> 00:14:57,380
because nothing changed not nothing

292
00:14:52,460 --> 00:15:00,110
material changed so these kind of caches

293
00:14:57,380 --> 00:15:02,480
work much better if you build is

294
00:15:00,110 --> 00:15:05,470
reproducible so reproducible here really

295
00:15:02,480 --> 00:15:08,240
means bit per bit the same result and

296
00:15:05,470 --> 00:15:11,060
because you get bit by bit the same

297
00:15:08,240 --> 00:15:14,000
result these kinds of caches get much

298
00:15:11,060 --> 00:15:15,439
more efficient and if you set up things

299
00:15:14,000 --> 00:15:18,830
right you can even use a distributed

300
00:15:15,440 --> 00:15:21,260
cache in your organization which has its

301
00:15:18,830 --> 00:15:29,150
own problems but it can make things a

302
00:15:21,260 --> 00:15:32,569
lot faster ok sure so other bugs other

303
00:15:29,150 --> 00:15:33,620
advantages are books found when building

304
00:15:32,570 --> 00:15:40,070
in different environment

305
00:15:33,620 --> 00:15:41,750
for example if he has sorting um on the

306
00:15:40,070 --> 00:15:45,710
with different locales gives different

307
00:15:41,750 --> 00:15:48,620
outputs or she'll specific but look we

308
00:15:45,710 --> 00:15:51,070
have in our Pakman package manager is

309
00:15:48,620 --> 00:15:56,390
that it calculates the size of a package

310
00:15:51,070 --> 00:15:59,120
but the calculation methods differs per

311
00:15:56,390 --> 00:16:03,830
file system which introduced non

312
00:15:59,120 --> 00:16:08,560
deterministic packages and uncovered an

313
00:16:03,830 --> 00:16:12,580
actual so far but they're also built

314
00:16:08,560 --> 00:16:17,270
which feel which were found which filled

315
00:16:12,580 --> 00:16:21,290
8% of the time like race conditions or

316
00:16:17,270 --> 00:16:23,270
when you run stuff when a developer only

317
00:16:21,290 --> 00:16:26,120
one stood on one for threads and you run

318
00:16:23,270 --> 00:16:32,990
it on four yeah where things had kind of

319
00:16:26,120 --> 00:16:35,120
happened and now we're going to talk

320
00:16:32,990 --> 00:16:41,060
about how in practice the Saudis

321
00:16:35,120 --> 00:16:43,220
reducible builds concept was started let

322
00:16:41,060 --> 00:16:47,589
me see I believe five years for six

323
00:16:43,220 --> 00:16:49,550
years ago and well how hard can it be to

324
00:16:47,589 --> 00:16:51,980
compile software on two different

325
00:16:49,550 --> 00:16:54,290
machines and get the same same results

326
00:16:51,980 --> 00:16:56,870
well that's actually actually pretty

327
00:16:54,290 --> 00:16:59,180
frustrated pretty hard so the first time

328
00:16:56,870 --> 00:17:04,040
debian attempted this they get they got

329
00:16:59,180 --> 00:17:07,938
24 packages for every producible and a

330
00:17:04,040 --> 00:17:10,879
lot of problems were found at which

331
00:17:07,939 --> 00:17:13,339
required which led to more tooling to be

332
00:17:10,880 --> 00:17:21,610
made so this is where I will talk about

333
00:17:13,339 --> 00:17:26,928
now so the most common and reproducible

334
00:17:21,609 --> 00:17:28,990
built our cost for example by iterating

335
00:17:26,929 --> 00:17:32,660
over hashes which is usually not

336
00:17:28,990 --> 00:17:38,480
deterministic so you have to sort them

337
00:17:32,660 --> 00:17:41,990
first some most compilers record the

338
00:17:38,480 --> 00:17:45,320
both laugh in your binary when you if we

339
00:17:41,990 --> 00:17:47,360
created a debug build this is obviously

340
00:17:45,320 --> 00:17:51,260
on reproducible because my

341
00:17:47,360 --> 00:17:53,330
is probably enough the same source and a

342
00:17:51,260 --> 00:17:56,890
big issue was time stamps which were

343
00:17:53,330 --> 00:18:00,250
generated on bill time which lets to

344
00:17:56,890 --> 00:18:03,170
non-division their deterministic builds

345
00:18:00,250 --> 00:18:07,250
here for actually a specification the

346
00:18:03,170 --> 00:18:09,380
sort of epic started which even the

347
00:18:07,250 --> 00:18:14,330
special environment variable sets it

348
00:18:09,380 --> 00:18:17,809
will replace the time Sam sets in the C

349
00:18:14,330 --> 00:18:21,530
header for example which makes the build

350
00:18:17,809 --> 00:18:23,899
deterministic file ordering so for

351
00:18:21,530 --> 00:18:27,710
example if you have some assets which in

352
00:18:23,900 --> 00:18:31,910
you need to build enter your binary and

353
00:18:27,710 --> 00:18:33,799
you do a retailer of this directory then

354
00:18:31,910 --> 00:18:38,330
the foul ordering isn't the same on all

355
00:18:33,799 --> 00:18:42,500
file systems private keys were lands and

356
00:18:38,330 --> 00:18:46,428
our seats were our dimensions and a lot

357
00:18:42,500 --> 00:18:52,040
of binaries or configuration files they

358
00:18:46,429 --> 00:18:58,340
rely on specific user groups which you

359
00:18:52,040 --> 00:19:01,428
might not have oh yeah um so here for

360
00:18:58,340 --> 00:19:05,750
example time stamps this is still an

361
00:19:01,429 --> 00:19:11,870
issue in a lot of packages ah this is a

362
00:19:05,750 --> 00:19:14,570
for ordering a private key which is

363
00:19:11,870 --> 00:19:17,899
generated on bills and another for

364
00:19:14,570 --> 00:19:20,059
Mollison and instead actually in the

365
00:19:17,900 --> 00:19:21,799
initialization seat which will be the

366
00:19:20,059 --> 00:19:26,480
same for every package which which is

367
00:19:21,799 --> 00:19:29,120
obviously bad to help detect these

368
00:19:26,480 --> 00:19:31,460
issues we have the the reproducible

369
00:19:29,120 --> 00:19:34,909
builds projects created a lot a set of

370
00:19:31,460 --> 00:19:39,620
tools and first one is difficult

371
00:19:34,910 --> 00:19:41,870
which is different steroids and it's

372
00:19:39,620 --> 00:19:45,979
more than your average dev tool because

373
00:19:41,870 --> 00:19:47,600
it can handle multiple formats so for

374
00:19:45,980 --> 00:19:50,120
example here's an example of the the

375
00:19:47,600 --> 00:19:54,678
best firmware which runs a batch if you

376
00:19:50,120 --> 00:19:57,350
compile it twice it outputs a difference

377
00:19:54,679 --> 00:19:59,960
it records timestamp in its in its

378
00:19:57,350 --> 00:20:01,178
parameter which is reproducible which

379
00:19:59,960 --> 00:20:04,239
can be easily found

380
00:20:01,179 --> 00:20:09,429
difficult if scope because it supports a

381
00:20:04,239 --> 00:20:15,719
lot of fouls and has some nice codes to

382
00:20:09,429 --> 00:20:20,789
impact for example an apk file into

383
00:20:15,719 --> 00:20:20,789
binaries and then if called if then

384
00:20:21,960 --> 00:20:27,339
there's also tool created if you want to

385
00:20:24,759 --> 00:20:31,419
build yourself or twice who's really

386
00:20:27,339 --> 00:20:34,239
convenient tool and you just pass it

387
00:20:31,419 --> 00:20:36,580
your your built so for example reaper

388
00:20:34,239 --> 00:20:38,979
test make and then you have to specify

389
00:20:36,580 --> 00:20:43,379
the output binary and it will run them

390
00:20:38,979 --> 00:20:45,460
in two different environments with

391
00:20:43,379 --> 00:20:49,949
different variations which you can

392
00:20:45,460 --> 00:20:53,859
specify so dope off timestamp timezone

393
00:20:49,950 --> 00:21:01,989
and as a output if it's reproduced for

394
00:20:53,859 --> 00:21:04,210
not so when we when the reproducible

395
00:21:01,989 --> 00:21:07,809
builds project started there was a need

396
00:21:04,210 --> 00:21:12,580
for a test framework and there has been

397
00:21:07,809 --> 00:21:15,158
and now a lot of distributions started

398
00:21:12,580 --> 00:21:18,939
joining in so they're being started with

399
00:21:15,159 --> 00:21:21,849
it's and now also aren't openSUSE and

400
00:21:18,940 --> 00:21:24,820
even coreboot open wrt and afterwards

401
00:21:21,849 --> 00:21:26,710
have started getting included into this

402
00:21:24,820 --> 00:21:30,668
test framework what it basically does is

403
00:21:26,710 --> 00:21:34,629
it runs builds twice on different

404
00:21:30,669 --> 00:21:37,749
machines with different variations and

405
00:21:34,629 --> 00:21:41,769
the variations are the builds user the

406
00:21:37,749 --> 00:21:45,879
GID UID bill puff the kernel the CPU

407
00:21:41,769 --> 00:21:49,049
type and in the end it will compare

408
00:21:45,879 --> 00:21:53,289
hashes and determine if the build is

409
00:21:49,049 --> 00:21:56,009
reproduced for or not and so you can see

410
00:21:53,289 --> 00:21:59,559
here that the green is what is currently

411
00:21:56,009 --> 00:22:02,759
reproducible this is for unstable so

412
00:21:59,559 --> 00:22:05,739
that is different for stable because

413
00:22:02,759 --> 00:22:08,369
unstable has more variations in their

414
00:22:05,739 --> 00:22:08,369
reproducibility

415
00:22:10,250 --> 00:22:17,809
and so this environment screen he set up

416
00:22:15,500 --> 00:22:20,720
there being patches being sent subscreen

417
00:22:17,809 --> 00:22:23,658
now offer for several years and I

418
00:22:20,720 --> 00:22:27,230
believe there was if you can see here it

419
00:22:23,659 --> 00:22:30,409
was like 84 cents Damien was eighty

420
00:22:27,230 --> 00:22:35,120
percent reproducible what they were

421
00:22:30,409 --> 00:22:38,090
still were working on some to change

422
00:22:35,120 --> 00:22:40,850
fixes because they want to remove the

423
00:22:38,090 --> 00:22:43,879
bill from from being recorded

424
00:22:40,850 --> 00:22:47,840
when creating debug binaries for GAC for

425
00:22:43,880 --> 00:22:51,020
example currently also did the the

426
00:22:47,840 --> 00:22:52,340
Debian policy is to have you should make

427
00:22:51,020 --> 00:22:54,440
your package reproduce ports and other

428
00:22:52,340 --> 00:22:56,530
requirements yet so this is something

429
00:22:54,440 --> 00:22:58,970
they won't consider in the future

430
00:22:56,530 --> 00:23:03,200
they're also not comparing yet the

431
00:22:58,970 --> 00:23:05,360
actual packages would say put in the

432
00:23:03,200 --> 00:23:08,169
repositories this tester set up really

433
00:23:05,360 --> 00:23:11,510
just builds it twice and it doesn't come

434
00:23:08,169 --> 00:23:14,840
try to rebuild a package which is

435
00:23:11,510 --> 00:23:16,669
currently in the repository first of all

436
00:23:14,840 --> 00:23:20,918
so the Debian image is not reproducible

437
00:23:16,669 --> 00:23:23,539
yet because of squash offense not being

438
00:23:20,919 --> 00:23:27,500
preferred not being able to really

439
00:23:23,539 --> 00:23:28,970
recreate reproducible images and another

440
00:23:27,500 --> 00:23:31,610
interesting thing is this whole

441
00:23:28,970 --> 00:23:34,100
reproducible concept wouldn't work

442
00:23:31,610 --> 00:23:36,740
without a nice way to integrate it in

443
00:23:34,100 --> 00:23:40,389
your distribution so there needs to be

444
00:23:36,740 --> 00:23:43,720
some way for the package manager to

445
00:23:40,390 --> 00:23:46,100
check if a package is reproducible and

446
00:23:43,720 --> 00:23:51,620
this is something which is being

447
00:23:46,100 --> 00:23:53,209
discussed and now actually last last

448
00:23:51,620 --> 00:23:56,149
year there was a reproducible build

449
00:23:53,210 --> 00:24:01,730
summits in Paris where there was talk of

450
00:23:56,150 --> 00:24:04,490
starting talk about how can we inform

451
00:24:01,730 --> 00:24:06,470
users that our package which they

452
00:24:04,490 --> 00:24:09,710
download from the for example of Damien

453
00:24:06,470 --> 00:24:12,200
repository hasn't been tampered of on

454
00:24:09,710 --> 00:24:15,289
the build server so that basically the

455
00:24:12,200 --> 00:24:17,780
idea is the distro builds package we

456
00:24:15,289 --> 00:24:20,990
have a set of trusted three builders

457
00:24:17,780 --> 00:24:23,450
which if a new packages uploaded

458
00:24:20,990 --> 00:24:26,090
rebuilds a package they

459
00:24:23,450 --> 00:24:29,169
have some sort of API where they publish

460
00:24:26,090 --> 00:24:29,168
their results

461
00:24:29,260 --> 00:24:32,150
this is integrated in your package

462
00:24:31,490 --> 00:24:35,090
manager

463
00:24:32,150 --> 00:24:38,179
if you try to into a package and it's

464
00:24:35,090 --> 00:24:41,480
not reproducible you get red flags so

465
00:24:38,179 --> 00:24:44,419
for example one example this could be

466
00:24:41,480 --> 00:24:51,140
one how it would look like this isn't

467
00:24:44,419 --> 00:24:53,480
set in stone apart from so the initial

468
00:24:51,140 --> 00:24:57,590
efforts with reviews of a build started

469
00:24:53,480 --> 00:25:01,659
with making Debian reproducible and then

470
00:24:57,590 --> 00:25:04,178
a lot of other projects joined in and

471
00:25:01,659 --> 00:25:07,100
there are also people trying to make

472
00:25:04,179 --> 00:25:08,990
dedication Java environments reproduced

473
00:25:07,100 --> 00:25:11,120
for for example you could argue that

474
00:25:08,990 --> 00:25:15,049
humans pi PI packages to be reproducible

475
00:25:11,120 --> 00:25:20,719
F droids is working on getting

476
00:25:15,049 --> 00:25:22,639
reproducible apks and there are this new

477
00:25:20,720 --> 00:25:25,940
project in toto it's a very relevant

478
00:25:22,640 --> 00:25:35,140
which is more about also securing your

479
00:25:25,940 --> 00:25:37,640
supply chain by adding by adding

480
00:25:35,140 --> 00:25:41,539
metadata to every build step you have

481
00:25:37,640 --> 00:25:43,100
and we've sup metadata you can verify

482
00:25:41,539 --> 00:25:46,309
that the build hasn't been tampered with

483
00:25:43,100 --> 00:25:53,049
and another initiative what started was

484
00:25:46,309 --> 00:25:57,860
boots reputable builds this aims to it's

485
00:25:53,049 --> 00:26:01,730
arguably even more insane it's to reduce

486
00:25:57,860 --> 00:26:04,418
the amount of binary binary she needs to

487
00:26:01,730 --> 00:26:08,390
bootstrap for example a GCC compiler

488
00:26:04,419 --> 00:26:09,860
because currently if you want to build

489
00:26:08,390 --> 00:26:12,650
your GCC compiler you already need to

490
00:26:09,860 --> 00:26:15,139
become fodder but can't you trust that

491
00:26:12,650 --> 00:26:15,770
your current GCC compiler hasn't been

492
00:26:15,140 --> 00:26:19,130
tampered with

493
00:26:15,770 --> 00:26:21,879
this isn't is it not part of the the

494
00:26:19,130 --> 00:26:26,450
reproducible builds projects but it's an

495
00:26:21,880 --> 00:26:31,370
another interesting issue we have in the

496
00:26:26,450 --> 00:26:34,940
open source world so I guess I've kind

497
00:26:31,370 --> 00:26:36,709
of conclusive if you want to get

498
00:26:34,940 --> 00:26:39,950
involved the reproducible

499
00:26:36,710 --> 00:26:44,830
website has talks has a lot of

500
00:26:39,950 --> 00:26:47,000
documentation if you have if you are a

501
00:26:44,830 --> 00:26:51,289
developer and you want to check if your

502
00:26:47,000 --> 00:26:53,059
package is reproducible it has also all

503
00:26:51,289 --> 00:26:55,039
talks and slides where you can learn

504
00:26:53,059 --> 00:26:57,860
more

505
00:26:55,039 --> 00:26:59,809
the reproducible Twitter accounts where

506
00:26:57,860 --> 00:27:03,168
you can follow status updates every week

507
00:26:59,809 --> 00:27:06,260
there's an blog update with the current

508
00:27:03,169 --> 00:27:08,299
progress in various projects on

509
00:27:06,260 --> 00:27:09,590
reproducible builds there's on/off to

510
00:27:08,299 --> 00:27:11,870
see is not actually channel where you

511
00:27:09,590 --> 00:27:17,570
can join if you want to have helped out

512
00:27:11,870 --> 00:27:21,610
have questions or you can ask us so

513
00:27:17,570 --> 00:27:21,610
thank you or any questions

514
00:27:31,710 --> 00:27:52,690
yep so I had one question which is not

515
00:27:49,090 --> 00:27:54,939
entirely related to reproducible builds

516
00:27:52,690 --> 00:27:58,779
but more to the whole a risk analysis at

517
00:27:54,940 --> 00:28:02,409
the beginning when you set a full place

518
00:27:58,779 --> 00:28:04,360
because of a bad committer or whatever

519
00:28:02,409 --> 00:28:05,860
to detect that you couldn't detect it at

520
00:28:04,360 --> 00:28:08,799
the individual committee level but you

521
00:28:05,860 --> 00:28:12,610
could detect it at basically the version

522
00:28:08,799 --> 00:28:14,379
control system and the SEMA level what

523
00:28:12,610 --> 00:28:16,149
we see though is that there are a lot of

524
00:28:14,380 --> 00:28:18,960
projects and especially in something

525
00:28:16,149 --> 00:28:21,399
like the node.js phase and p.m. where

526
00:28:18,960 --> 00:28:23,740
everyone doesn't want to reinvent the

527
00:28:21,399 --> 00:28:25,899
wheel so they rather bring in a module

528
00:28:23,740 --> 00:28:27,940
for five lines of codes than write five

529
00:28:25,899 --> 00:28:30,850
lines curl themselves is that you get

530
00:28:27,940 --> 00:28:32,620
single maintainer projects what about

531
00:28:30,850 --> 00:28:35,590
for example left part of course was an

532
00:28:32,620 --> 00:28:38,590
example of this and in a way the whole a

533
00:28:35,590 --> 00:28:40,270
bit coin heist thingy at NPM also was an

534
00:28:38,590 --> 00:28:41,709
X well there was only one maintainer who

535
00:28:40,270 --> 00:28:45,460
gave up and then someone else to go for

536
00:28:41,710 --> 00:28:47,289
so we can single maintainer so what does

537
00:28:45,460 --> 00:28:48,640
that do to the risk analyzes if you look

538
00:28:47,289 --> 00:28:55,480
specifically at single maintainer

539
00:28:48,640 --> 00:28:57,669
projects good yes good question this is

540
00:28:55,480 --> 00:28:59,799
a little bit outside scope scope of

541
00:28:57,669 --> 00:29:03,970
reproducible builds specifically but

542
00:28:59,799 --> 00:29:05,350
it's definitely an important subject so

543
00:29:03,970 --> 00:29:08,260
I think there's a number of things we

544
00:29:05,350 --> 00:29:13,000
can do I think better change tracking

545
00:29:08,260 --> 00:29:15,970
and better automated well III has there

546
00:29:13,000 --> 00:29:18,370
to use the word audit but all kind of

547
00:29:15,970 --> 00:29:23,520
code checking tools which check that

548
00:29:18,370 --> 00:29:27,750
there are no strange changes and no

549
00:29:23,520 --> 00:29:27,750
changes that appear to rewrite history

550
00:29:28,289 --> 00:29:34,990
on a little bit bigger skill we need to

551
00:29:32,200 --> 00:29:36,640
get better at transferring ownership and

552
00:29:34,990 --> 00:29:41,169
sharing ownership of these kinds of

553
00:29:36,640 --> 00:29:42,549
projects which is a huge open question I

554
00:29:41,169 --> 00:29:43,200
think I mean there's a lot of

555
00:29:42,549 --> 00:29:45,000
interesting

556
00:29:43,200 --> 00:29:47,100
initiatives in the space there are

557
00:29:45,000 --> 00:29:49,620
projects to fund these kinds of things

558
00:29:47,100 --> 00:29:52,370
like open collective there's a number of

559
00:29:49,620 --> 00:29:55,620
others whose names escaping right now

560
00:29:52,370 --> 00:29:59,969
you'll have to see how well that will

561
00:29:55,620 --> 00:30:06,479
work so yes this is an interesting space

562
00:29:59,970 --> 00:30:09,480
definitely okay thank you yes I I don't

563
00:30:06,480 --> 00:30:11,909
get how the end user verification works

564
00:30:09,480 --> 00:30:14,429
because you were explaining that my

565
00:30:11,909 --> 00:30:17,669
distribution builder is doing the

566
00:30:14,429 --> 00:30:19,679
reproducible build part so they have a

567
00:30:17,669 --> 00:30:21,090
build form which contains of multiple

568
00:30:19,679 --> 00:30:23,820
different types of servers they all

569
00:30:21,090 --> 00:30:25,559
produce the same binary distribution

570
00:30:23,820 --> 00:30:27,629
maintainer signs it and then gives me

571
00:30:25,559 --> 00:30:32,418
the package and I go okay I trust my

572
00:30:27,630 --> 00:30:35,130
distribution provider I don't see how

573
00:30:32,419 --> 00:30:37,620
tooling on my end would be able to

574
00:30:35,130 --> 00:30:40,549
verify the reproducible build without

575
00:30:37,620 --> 00:30:45,029
actually building it myself

576
00:30:40,549 --> 00:30:48,480
well the the father is that it should be

577
00:30:45,029 --> 00:30:51,840
easy to set up and for third party so

578
00:30:48,480 --> 00:30:55,289
not related to your distribution to be

579
00:30:51,840 --> 00:30:57,720
able to third party use me because I

580
00:30:55,289 --> 00:30:59,639
don't trust anyone else yeah so yeah

581
00:30:57,720 --> 00:31:02,190
because if I have to trust someone else

582
00:30:59,639 --> 00:31:05,070
then it's basically at the same security

583
00:31:02,190 --> 00:31:06,899
domain as my distribution provider which

584
00:31:05,070 --> 00:31:09,539
means and and that's exactly the guy I'm

585
00:31:06,899 --> 00:31:11,879
not trusting right now mmm so it has to

586
00:31:09,539 --> 00:31:14,220
be me or I have to be able to find an

587
00:31:11,880 --> 00:31:16,019
external service but we're being

588
00:31:14,220 --> 00:31:19,139
paranoid because it's a security domain

589
00:31:16,019 --> 00:31:22,010
so it has to be me yeah so for for our

590
00:31:19,139 --> 00:31:24,510
Linux we definitely want it to make it

591
00:31:22,010 --> 00:31:31,200
wanted to make it easy for a user to

592
00:31:24,510 --> 00:31:34,440
reproduce packages but yeah that

593
00:31:31,200 --> 00:31:36,480
wouldn't be integrated into the package

594
00:31:34,440 --> 00:31:38,789
manager because the Pekerman in part is

595
00:31:36,480 --> 00:31:41,370
more thought of that you have a sort of

596
00:31:38,789 --> 00:31:43,408
verify trust third party which is

597
00:31:41,370 --> 00:31:47,428
independent of your distribution which

598
00:31:43,409 --> 00:31:49,500
rebuilds the packages but it's just

599
00:31:47,429 --> 00:31:51,149
another external entity I have to trust

600
00:31:49,500 --> 00:31:55,049
and I already trust my distribution

601
00:31:51,149 --> 00:31:56,860
builder to not give me crap so we're

602
00:31:55,049 --> 00:31:59,080
assuming that my distribution build

603
00:31:56,860 --> 00:32:01,389
is giving me crap so I have to go around

604
00:31:59,080 --> 00:32:03,970
that and then going to another third

605
00:32:01,390 --> 00:32:07,659
party is is it doesn't fully cover the

606
00:32:03,970 --> 00:32:09,820
risk I have there but if you look at the

607
00:32:07,659 --> 00:32:12,370
implication then if I have to build my

608
00:32:09,820 --> 00:32:14,830
own packages anyway mmm why do I need a

609
00:32:12,370 --> 00:32:16,809
distribution building why can't I just

610
00:32:14,830 --> 00:32:19,120
take the source code and have a third

611
00:32:16,809 --> 00:32:21,879
party built form that says okay we did

612
00:32:19,120 --> 00:32:25,120
like 1600 of these and then I build my

613
00:32:21,880 --> 00:32:27,250
own and I compare but it-it-it I don't

614
00:32:25,120 --> 00:32:29,168
really see the use case how verification

615
00:32:27,250 --> 00:32:32,019
works and and and how you don't end up

616
00:32:29,169 --> 00:32:34,090
in the scenario where it's not well yeah

617
00:32:32,019 --> 00:32:35,980
the Dutch proverb is lack of these and I

618
00:32:34,090 --> 00:32:38,289
have a skirt the butcher that that

619
00:32:35,980 --> 00:32:40,600
checks is on meat well kind of feels

620
00:32:38,289 --> 00:32:42,700
like that I have something to say about

621
00:32:40,600 --> 00:32:45,070
it but I think your neighbor also has so

622
00:32:42,700 --> 00:32:47,169
yes so let's say you're you're using

623
00:32:45,070 --> 00:32:48,850
Debian and you're not sure you don't

624
00:32:47,169 --> 00:32:50,769
trust TV or maybe you trust the thing is

625
00:32:48,850 --> 00:32:52,480
not about not trusting DB means trusting

626
00:32:50,769 --> 00:32:54,669
DB Emma being afraid that someone

627
00:32:52,480 --> 00:32:57,130
manages to get a backdoor access to the

628
00:32:54,669 --> 00:32:59,169
DB and build infra and injects bad code

629
00:32:57,130 --> 00:33:03,100
into binaries that way so you take a

630
00:32:59,169 --> 00:33:05,440
second well at our party not you to your

631
00:33:03,100 --> 00:33:06,820
party which you also trust which could

632
00:33:05,440 --> 00:33:08,049
be say to Dutch government or whatever

633
00:33:06,820 --> 00:33:09,340
let's say the Dutch government hooks

634
00:33:08,049 --> 00:33:11,470
into this and they do their own rebuilt

635
00:33:09,340 --> 00:33:12,908
servers so they rebuild all the packages

636
00:33:11,470 --> 00:33:14,470
because you don't want every user

637
00:33:12,909 --> 00:33:16,389
building their own packages because well

638
00:33:14,470 --> 00:33:19,960
then installing Libre Office takes two

639
00:33:16,389 --> 00:33:21,070
days so is let's say you touch trust of

640
00:33:19,960 --> 00:33:23,350
Dutch government and they offer a

641
00:33:21,070 --> 00:33:24,158
service with a public certificate and

642
00:33:23,350 --> 00:33:25,600
everything so you can verify your

643
00:33:24,159 --> 00:33:28,779
connecting to it and in your package

644
00:33:25,600 --> 00:33:30,730
manager can tell you need to also check

645
00:33:28,779 --> 00:33:32,559
the package hash with that Dutch

646
00:33:30,730 --> 00:33:34,149
government sir so that's the whole

647
00:33:32,559 --> 00:33:36,340
concept that then an attacker would need

648
00:33:34,149 --> 00:33:38,289
to build infiltrate Debian and the Dutch

649
00:33:36,340 --> 00:33:44,289
government build server to be able to

650
00:33:38,289 --> 00:33:49,658
get that virus also yes well they would

651
00:33:44,289 --> 00:33:53,408
need to inject exactly the same code yes

652
00:33:49,659 --> 00:33:55,870
you definitely want not only multiple

653
00:33:53,409 --> 00:33:57,880
rebuilders within for example the Debian

654
00:33:55,870 --> 00:34:00,010
organization but also as many

655
00:33:57,880 --> 00:34:02,860
third-party rebuilders as you can find

656
00:34:00,010 --> 00:34:04,899
but those that don't need to have to to

657
00:34:02,860 --> 00:34:06,879
be the same machines as the machines you

658
00:34:04,899 --> 00:34:09,359
will want to install things on that's a

659
00:34:06,880 --> 00:34:12,249
different concern

660
00:34:09,359 --> 00:34:13,659
so if you trust no one then the only

661
00:34:12,248 --> 00:34:16,328
thing you can do is just audit the

662
00:34:13,659 --> 00:34:21,129
source code yourself all of it and build

663
00:34:16,329 --> 00:34:22,960
it good luck right now like the status

664
00:34:21,129 --> 00:34:25,029
quo without your good usable bills is

665
00:34:22,960 --> 00:34:28,329
you actually trust the machine that

666
00:34:25,029 --> 00:34:31,268
specifically built this binary that's

667
00:34:28,329 --> 00:34:33,069
pretty bad as a reproducible builds is

668
00:34:31,268 --> 00:34:35,348
somewhere in the middle and of course

669
00:34:33,069 --> 00:34:38,429
for end user verification there's a web

670
00:34:35,349 --> 00:34:41,259
of trust kind of problem so if there's

671
00:34:38,429 --> 00:34:45,759
someone you know who know someone who

672
00:34:41,259 --> 00:34:47,978
you trust that it's part of the rebuild

673
00:34:45,759 --> 00:34:51,639
of pool then something like that will

674
00:34:47,978 --> 00:34:54,578
have to race your ratio trust at least

675
00:34:51,639 --> 00:35:00,039
they're making the web bigger increases

676
00:34:54,579 --> 00:35:01,539
the trust you have exactly yes and so

677
00:35:00,039 --> 00:35:03,789
that's for end user verification of

678
00:35:01,539 --> 00:35:07,509
course there's also the other angle is

679
00:35:03,789 --> 00:35:09,400
for for Debian or in my case for the

680
00:35:07,509 --> 00:35:12,640
supplier of an open source java library

681
00:35:09,400 --> 00:35:14,769
it is my entries that I don't do not

682
00:35:12,640 --> 00:35:18,819
want to ship back doors to my users and

683
00:35:14,769 --> 00:35:21,569
customers so I myself will use diverse

684
00:35:18,819 --> 00:35:23,710
machines from my own machine Travis CI

685
00:35:21,569 --> 00:35:27,249
hopefully some people from the community

686
00:35:23,710 --> 00:35:30,969
to rebuild to check for foul play and to

687
00:35:27,249 --> 00:35:37,558
increase our own trust that our binaries

688
00:35:30,969 --> 00:35:37,559
are not vulnerable Thanks

689
00:35:37,609 --> 00:35:45,520
and who else all right yeah that's it

690
00:35:44,430 --> 00:35:52,469
thank you

691
00:35:45,520 --> 00:35:52,469
[Applause]

