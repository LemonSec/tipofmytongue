1
00:00:08,720 --> 00:00:10,240
good morning everyone

2
00:00:10,240 --> 00:00:12,160
so i'm glad to say i'm doing another

3
00:00:12,160 --> 00:00:13,360
hexagon talk

4
00:00:13,360 --> 00:00:14,960
we're doing it slightly differently this

5
00:00:14,960 --> 00:00:17,199
year meaning we're not getting beers

6
00:00:17,199 --> 00:00:18,880
afterwards

7
00:00:18,880 --> 00:00:21,199
but i do have a pretty slick view of the

8
00:00:21,199 --> 00:00:22,240
ocean from here

9
00:00:22,240 --> 00:00:25,279
so i'm not complaining too much so what

10
00:00:25,279 --> 00:00:26,800
we're going to be looking at is

11
00:00:26,800 --> 00:00:29,679
court reuse and software that wasn't

12
00:00:29,679 --> 00:00:31,599
specifically made

13
00:00:31,599 --> 00:00:34,640
to be reused so it's not an api it's

14
00:00:34,640 --> 00:00:36,160
closed source

15
00:00:36,160 --> 00:00:38,000
but we want to look at the functionality

16
00:00:38,000 --> 00:00:39,680
that this uses right

17
00:00:39,680 --> 00:00:42,320
so in the past if we wanted to do this

18
00:00:42,320 --> 00:00:43,440
where to

19
00:00:43,440 --> 00:00:46,320
painstakingly reverse engineer the code

20
00:00:46,320 --> 00:00:47,360
re-implement it

21
00:00:47,360 --> 00:00:50,960
in our own way right the alternative was

22
00:00:50,960 --> 00:00:53,920
we had to rip it out of where it was

23
00:00:53,920 --> 00:00:55,920
including all of the dependencies which

24
00:00:55,920 --> 00:00:57,039
is extremely

25
00:00:57,039 --> 00:01:01,680
consuming so a bit of a intro for

26
00:01:01,680 --> 00:01:03,920
for what i do i'm just some random

27
00:01:03,920 --> 00:01:05,360
security guy

28
00:01:05,360 --> 00:01:07,360
i've dabbled in everything in first hack

29
00:01:07,360 --> 00:01:09,040
you can think of i've done pen testing

30
00:01:09,040 --> 00:01:10,640
red teaming

31
00:01:10,640 --> 00:01:13,040
i do a lot of automation detection a

32
00:01:13,040 --> 00:01:15,520
little bit of thread hunting

33
00:01:15,520 --> 00:01:18,159
and product reviews as well right so

34
00:01:18,159 --> 00:01:18,799
i'll take

35
00:01:18,799 --> 00:01:20,320
different systems hook them together and

36
00:01:20,320 --> 00:01:22,799
automate away all the tedious parts of

37
00:01:22,799 --> 00:01:25,600
instant response every now and again i

38
00:01:25,600 --> 00:01:26,960
get to play off some malware

39
00:01:26,960 --> 00:01:30,159
which is easily my favorite part of it

40
00:01:30,159 --> 00:01:32,320
but this doesn't happen nearly as often

41
00:01:32,320 --> 00:01:34,400
as i'd prefer

42
00:01:34,400 --> 00:01:36,479
so what are we going to be doing right

43
00:01:36,479 --> 00:01:39,439
so most of the malware ic

44
00:01:39,439 --> 00:01:41,840
does the same thing over and over it

45
00:01:41,840 --> 00:01:44,399
unpacks decrypts and ejects

46
00:01:44,399 --> 00:01:46,479
so i'm guessing the reason for this is

47
00:01:46,479 --> 00:01:48,880
that malware that doesn't take

48
00:01:48,880 --> 00:01:51,759
the time to hide itself isn't going to

49
00:01:51,759 --> 00:01:52,960
make it upstream

50
00:01:52,960 --> 00:01:54,479
to where i'm going to catch it it's

51
00:01:54,479 --> 00:01:56,479
going to get faulted out by melb

52
00:01:56,479 --> 00:02:00,159
mail servers antiviruses are going to

53
00:02:00,159 --> 00:02:00,640
catch

54
00:02:00,640 --> 00:02:04,240
pretty quickly so anything commodity

55
00:02:04,240 --> 00:02:06,320
i'm not going to see and then the things

56
00:02:06,320 --> 00:02:07,600
that i do see

57
00:02:07,600 --> 00:02:10,639
has a fair bit of work going into it so

58
00:02:10,639 --> 00:02:12,239
we have to dig into

59
00:02:12,239 --> 00:02:14,239
the pe file format if we actually want

60
00:02:14,239 --> 00:02:15,920
to work with these samples

61
00:02:15,920 --> 00:02:18,080
so the pe file format has the exe

62
00:02:18,080 --> 00:02:19,360
extension which is

63
00:02:19,360 --> 00:02:23,280
what we all know it as right

64
00:02:23,280 --> 00:02:25,760
so unfortunately there's no shortcuts

65
00:02:25,760 --> 00:02:26,480
here

66
00:02:26,480 --> 00:02:28,239
we do have to know how this pe file

67
00:02:28,239 --> 00:02:29,680
format works for

68
00:02:29,680 --> 00:02:32,720
a lot of well for incident response mal

69
00:02:32,720 --> 00:02:33,360
analysis

70
00:02:33,360 --> 00:02:34,840
and for what we're going to be doing

71
00:02:34,840 --> 00:02:37,360
today so why do we need to know what

72
00:02:37,360 --> 00:02:39,519
this format looks like

73
00:02:39,519 --> 00:02:41,360
so we have to find the malware

74
00:02:41,360 --> 00:02:43,519
especially if it's been injected

75
00:02:43,519 --> 00:02:45,920
into another process for example we have

76
00:02:45,920 --> 00:02:48,000
to know what memory should and shouldn't

77
00:02:48,000 --> 00:02:49,360
look like

78
00:02:49,360 --> 00:02:51,920
we want to be able to instantly spot

79
00:02:51,920 --> 00:02:53,519
from a memory dump

80
00:02:53,519 --> 00:02:56,959
what is malicious right often we have to

81
00:02:56,959 --> 00:02:58,720
extract and rebuild it so if something

82
00:02:58,720 --> 00:03:00,640
is injected into a process

83
00:03:00,640 --> 00:03:03,280
we have to convert it back to a exe on

84
00:03:03,280 --> 00:03:04,319
disk

85
00:03:04,319 --> 00:03:06,640
the reason we have to do this is it's

86
00:03:06,640 --> 00:03:08,640
incredibly hard to work on

87
00:03:08,640 --> 00:03:11,200
malware in a running state the problem

88
00:03:11,200 --> 00:03:14,720
is we're going to rename functions

89
00:03:14,720 --> 00:03:16,959
create comments whatever the case may be

90
00:03:16,959 --> 00:03:18,480
but as soon as that application

91
00:03:18,480 --> 00:03:20,480
stops running all of this information

92
00:03:20,480 --> 00:03:22,080
disappears

93
00:03:22,080 --> 00:03:25,360
so the windows loader does a pretty good

94
00:03:25,360 --> 00:03:27,519
job at putting the executable in memory

95
00:03:27,519 --> 00:03:28,640
for us right

96
00:03:28,640 --> 00:03:31,360
the problem is if it's already there we

97
00:03:31,360 --> 00:03:33,040
can't or the windows loader can't

98
00:03:33,040 --> 00:03:35,440
reverse it for us

99
00:03:35,440 --> 00:03:37,440
and also we can do some pretty clever

100
00:03:37,440 --> 00:03:39,599
things if we know how this works

101
00:03:39,599 --> 00:03:41,599
so specifically in this case we're going

102
00:03:41,599 --> 00:03:43,760
to be looking at code reuse

103
00:03:43,760 --> 00:03:45,360
so i have done some work in this in the

104
00:03:45,360 --> 00:03:48,239
past four years ago my hexacon talk

105
00:03:48,239 --> 00:03:51,519
i released a tool called cryptomnesia

106
00:03:51,519 --> 00:03:53,840
so this tool took little pieces of

107
00:03:53,840 --> 00:03:55,120
malware

108
00:03:55,120 --> 00:03:56,799
ripped them out of the original sample

109
00:03:56,799 --> 00:03:58,319
and allowed you to mix and match

110
00:03:58,319 --> 00:03:59,439
afterwards

111
00:03:59,439 --> 00:04:01,360
so you could create this franken-code

112
00:04:01,360 --> 00:04:03,280
piece of malware

113
00:04:03,280 --> 00:04:05,680
that's specifically what i was aiming

114
00:04:05,680 --> 00:04:06,400
for

115
00:04:06,400 --> 00:04:09,200
made attribution a lot harder so for

116
00:04:09,200 --> 00:04:11,040
example even though afraid actor has

117
00:04:11,040 --> 00:04:12,799
been known to use a specific piece of

118
00:04:12,799 --> 00:04:13,680
code

119
00:04:13,680 --> 00:04:16,160
we now have malware that contains code

120
00:04:16,160 --> 00:04:17,600
from multiple thread actors

121
00:04:17,600 --> 00:04:19,440
so it's not easy to know who actually

122
00:04:19,440 --> 00:04:20,720
created it

123
00:04:20,720 --> 00:04:23,360
so the cia did do some work in this if

124
00:04:23,360 --> 00:04:25,759
you look at the vault 7 leaks

125
00:04:25,759 --> 00:04:29,440
which released a bunch of

126
00:04:29,440 --> 00:04:32,000
operational manuals from the cia they

127
00:04:32,000 --> 00:04:33,680
have looked at this but it's not clear

128
00:04:33,680 --> 00:04:36,639
if they actually use it in practice

129
00:04:36,639 --> 00:04:39,199
so instead of using code in this way

130
00:04:39,199 --> 00:04:41,680
maliciously we're going to turn around

131
00:04:41,680 --> 00:04:44,400
we're going to take malicious code and

132
00:04:44,400 --> 00:04:45,440
use it for good

133
00:04:45,440 --> 00:04:48,800
right we want to minimize the reversing

134
00:04:48,800 --> 00:04:50,720
in this as much as possible so the old

135
00:04:50,720 --> 00:04:54,000
approach was extremely time intensive

136
00:04:54,000 --> 00:04:56,080
but especially during an incident we are

137
00:04:56,080 --> 00:04:57,440
not going to have time to do it so we

138
00:04:57,440 --> 00:05:00,000
want to minimize that

139
00:05:00,000 --> 00:05:02,720
so how do we actually do it right the

140
00:05:02,720 --> 00:05:04,639
problem is the pe file format is

141
00:05:04,639 --> 00:05:06,720
extremely complex it has

142
00:05:06,720 --> 00:05:08,960
probably upwards of 50 data structures

143
00:05:08,960 --> 00:05:11,520
all doing different things

144
00:05:11,520 --> 00:05:13,600
and we have to pass all of these or at

145
00:05:13,600 --> 00:05:15,039
least all of the ones that are

146
00:05:15,039 --> 00:05:17,039
applicable to what we're doing

147
00:05:17,039 --> 00:05:19,039
unfortunately there's no shortcuts like

148
00:05:19,039 --> 00:05:20,639
i said earlier

149
00:05:20,639 --> 00:05:22,560
so i initially put off learning how this

150
00:05:22,560 --> 00:05:24,400
works for quite a while

151
00:05:24,400 --> 00:05:25,680
you're going to come back to it there's

152
00:05:25,680 --> 00:05:28,080
no way that on this level

153
00:05:28,080 --> 00:05:30,000
the malware you're looking at is not

154
00:05:30,000 --> 00:05:31,280
going to make use of these

155
00:05:31,280 --> 00:05:34,400
of these features right so like i said

156
00:05:34,400 --> 00:05:35,919
incredibly complex

157
00:05:35,919 --> 00:05:38,320
but we're going to skip through most of

158
00:05:38,320 --> 00:05:39,600
it and only

159
00:05:39,600 --> 00:05:41,600
look at the specific data structures we

160
00:05:41,600 --> 00:05:43,440
need

161
00:05:43,440 --> 00:05:46,800
so we are lucky in that a lot of decent

162
00:05:46,800 --> 00:05:48,400
documentation

163
00:05:48,400 --> 00:05:50,479
is available for this file format we've

164
00:05:50,479 --> 00:05:52,080
got nice little diagrams like these

165
00:05:52,080 --> 00:05:55,600
which make it easy to digest

166
00:05:55,600 --> 00:05:58,560
as easy as can be at least so we're only

167
00:05:58,560 --> 00:05:59,840
going to be looking at eight of these

168
00:05:59,840 --> 00:06:00,639
little blocks

169
00:06:00,639 --> 00:06:02,639
for what we're doing and we're only

170
00:06:02,639 --> 00:06:04,560
gonna slightly touch them on what they

171
00:06:04,560 --> 00:06:06,720
actually do

172
00:06:06,720 --> 00:06:09,039
so we're lucky in that there's a lot of

173
00:06:09,039 --> 00:06:10,800
tooling that helps us

174
00:06:10,800 --> 00:06:13,280
complete all of these analysis phases

175
00:06:13,280 --> 00:06:14,160
we've got

176
00:06:14,160 --> 00:06:16,319
pe passes that will show a specific

177
00:06:16,319 --> 00:06:18,720
fields in the exe like time date stamps

178
00:06:18,720 --> 00:06:21,039
checksums whatever the case may be so

179
00:06:21,039 --> 00:06:22,880
the popular one is cff explorer which

180
00:06:22,880 --> 00:06:25,600
i'm going to be using we've got ppe

181
00:06:25,600 --> 00:06:28,400
pronounced puppy and p insider those are

182
00:06:28,400 --> 00:06:30,479
the three big ones

183
00:06:30,479 --> 00:06:32,240
when we want to figure out what the code

184
00:06:32,240 --> 00:06:33,600
actually does when we're reverse

185
00:06:33,600 --> 00:06:34,479
engineering it

186
00:06:34,479 --> 00:06:36,319
we're going to need debuggers like ida

187
00:06:36,319 --> 00:06:38,000
pro which is a commercial one which i'm

188
00:06:38,000 --> 00:06:38,960
using

189
00:06:38,960 --> 00:06:41,759
xc x64 debug and windybug these are both

190
00:06:41,759 --> 00:06:42,400
free and

191
00:06:42,400 --> 00:06:45,759
incredibly powerful tools

192
00:06:45,759 --> 00:06:47,600
for quick prototyping we're going to be

193
00:06:47,600 --> 00:06:50,240
using scripting languages like python

194
00:06:50,240 --> 00:06:52,639
and python specifically has a library

195
00:06:52,639 --> 00:06:54,319
called pe file

196
00:06:54,319 --> 00:06:57,680
so what pe file does it allows us to

197
00:06:57,680 --> 00:07:01,120
extract information from the exe file in

198
00:07:01,120 --> 00:07:02,560
readable format

199
00:07:02,560 --> 00:07:04,240
but it doesn't allow us to modify

200
00:07:04,240 --> 00:07:07,120
anything in fact modifying an exe

201
00:07:07,120 --> 00:07:09,360
after it's been compiled is extremely

202
00:07:09,360 --> 00:07:10,800
difficult

203
00:07:10,800 --> 00:07:12,639
any small change can mess up these data

204
00:07:12,639 --> 00:07:14,720
structures and it might not load it

205
00:07:14,720 --> 00:07:16,479
might not function or whatever the case

206
00:07:16,479 --> 00:07:18,800
may be

207
00:07:18,800 --> 00:07:21,520
so this might be a bit of an information

208
00:07:21,520 --> 00:07:21,840
done

209
00:07:21,840 --> 00:07:24,319
but let's dig into it right so an exe

210
00:07:24,319 --> 00:07:25,360
starts with two bytes

211
00:07:25,360 --> 00:07:29,360
mz mz so this stands for mark zubowski

212
00:07:29,360 --> 00:07:31,360
he's one of the early microsoft

213
00:07:31,360 --> 00:07:32,639
employees and he

214
00:07:32,639 --> 00:07:34,880
is responsible for at least a part of

215
00:07:34,880 --> 00:07:36,080
this data

216
00:07:36,080 --> 00:07:37,440
this file format and all the data

217
00:07:37,440 --> 00:07:39,199
structures it contains

218
00:07:39,199 --> 00:07:41,280
so as a malware analyst what you see

219
00:07:41,280 --> 00:07:43,039
fairly often

220
00:07:43,039 --> 00:07:46,160
is 4d5a right in hex

221
00:07:46,160 --> 00:07:49,199
so these two bytes are the same as mz

222
00:07:49,199 --> 00:07:51,520
and whenever you see these bytes in a

223
00:07:51,520 --> 00:07:53,759
location you don't expect it which is

224
00:07:53,759 --> 00:07:56,879
pretty much everywhere you are

225
00:07:56,879 --> 00:07:58,400
virtually guaranteed that something

226
00:07:58,400 --> 00:08:01,280
malicious is going on

227
00:08:01,280 --> 00:08:03,599
similarly you might see these two bytes

228
00:08:03,599 --> 00:08:06,400
base64 encoded which is pretty common

229
00:08:06,400 --> 00:08:10,400
and then it's tp qq right

230
00:08:10,400 --> 00:08:12,000
so if we look at the dos header that's

231
00:08:12,000 --> 00:08:14,319
the first little stub in this

232
00:08:14,319 --> 00:08:16,720
we only care about the the mz header and

233
00:08:16,720 --> 00:08:19,120
the last four bytes of the dos tab

234
00:08:19,120 --> 00:08:21,440
which tells us the location of the nt

235
00:08:21,440 --> 00:08:22,639
header

236
00:08:22,639 --> 00:08:24,800
so you can see between these little or

237
00:08:24,800 --> 00:08:26,080
between these data structures

238
00:08:26,080 --> 00:08:27,759
we've got this little program it says

239
00:08:27,759 --> 00:08:30,720
this program cannot be run in dos mode

240
00:08:30,720 --> 00:08:34,240
that is actually a 16-bit application

241
00:08:34,240 --> 00:08:36,559
so if you run one of these executables

242
00:08:36,559 --> 00:08:38,240
and dos it's going to run that little

243
00:08:38,240 --> 00:08:40,399
gird stab

244
00:08:40,399 --> 00:08:42,958
and it doesn't execute the actual 32-bit

245
00:08:42,958 --> 00:08:43,679
60-foot

246
00:08:43,679 --> 00:08:47,200
bit code after the little desktop you

247
00:08:47,200 --> 00:08:48,240
can see it is a

248
00:08:48,240 --> 00:08:51,440
there's a bunch of data so microsoft

249
00:08:51,440 --> 00:08:53,360
for some reason uses this as a

250
00:08:53,360 --> 00:08:55,200
convenient place to store additional

251
00:08:55,200 --> 00:08:56,720
stuff

252
00:08:56,720 --> 00:08:59,120
even though it's part of the 16-bit

253
00:08:59,120 --> 00:08:59,920
application

254
00:08:59,920 --> 00:09:01,600
it doesn't get executed the program

255
00:09:01,600 --> 00:09:03,120
executes before

256
00:09:03,120 --> 00:09:05,839
so one example is the rich headers which

257
00:09:05,839 --> 00:09:07,360
gives details about the specific

258
00:09:07,360 --> 00:09:10,160
compiler used

259
00:09:10,160 --> 00:09:12,640
and you have things like delayed imports

260
00:09:12,640 --> 00:09:14,320
which hardly ever gets used but that

261
00:09:14,320 --> 00:09:16,160
gets chucked in there as well

262
00:09:16,160 --> 00:09:17,920
so if we look at of our second data

263
00:09:17,920 --> 00:09:19,279
structure we've got

264
00:09:19,279 --> 00:09:22,240
the empty header so the entity header

265
00:09:22,240 --> 00:09:22,880
contains

266
00:09:22,880 --> 00:09:27,760
two other data structures we've got the

267
00:09:27,760 --> 00:09:29,839
file header and the optional header

268
00:09:29,839 --> 00:09:31,839
right so the file header

269
00:09:31,839 --> 00:09:35,440
includes a lot of exe specific

270
00:09:35,440 --> 00:09:38,800
fields so it has an architecture

271
00:09:38,800 --> 00:09:41,120
entry which tells us is it a 32-bit or

272
00:09:41,120 --> 00:09:42,000
64-bit

273
00:09:42,000 --> 00:09:44,080
application right we've got our

274
00:09:44,080 --> 00:09:45,200
timestamp

275
00:09:45,200 --> 00:09:48,240
when it was compiled number of sections

276
00:09:48,240 --> 00:09:51,120
so section is a specific block of memory

277
00:09:51,120 --> 00:09:52,800
that contains

278
00:09:52,800 --> 00:09:57,040
uh some of these data structures

279
00:09:57,040 --> 00:09:58,640
uh and then we've got characteristics

280
00:09:58,640 --> 00:10:01,360
for example is it a exe is it a dll

281
00:10:01,360 --> 00:10:04,399
and loads of other things right so as a

282
00:10:04,399 --> 00:10:06,720
malware analyst

283
00:10:06,720 --> 00:10:08,880
these fields are extremely useful right

284
00:10:08,880 --> 00:10:09,920
so

285
00:10:09,920 --> 00:10:11,760
a user is not going to see these fields

286
00:10:11,760 --> 00:10:14,399
for example if you right click on exe

287
00:10:14,399 --> 00:10:16,560
go to information and look at the look

288
00:10:16,560 --> 00:10:18,000
at that info right it could tell

289
00:10:18,000 --> 00:10:19,440
you the version of the application and

290
00:10:19,440 --> 00:10:21,920
whatnot this is actually

291
00:10:21,920 --> 00:10:24,880
in the manifest so that is the text file

292
00:10:24,880 --> 00:10:27,040
on the resource section

293
00:10:27,040 --> 00:10:29,839
so this information doesn't get showed

294
00:10:29,839 --> 00:10:31,600
to the user the manifest information you

295
00:10:31,600 --> 00:10:32,320
showed

296
00:10:32,320 --> 00:10:34,880
so one nice example of this is when

297
00:10:34,880 --> 00:10:35,760
stuxnet

298
00:10:35,760 --> 00:10:39,040
was first discovered in 2010 researchers

299
00:10:39,040 --> 00:10:40,160
started looking at

300
00:10:40,160 --> 00:10:42,800
similar strains of of the same implant

301
00:10:42,800 --> 00:10:44,240
right

302
00:10:44,240 --> 00:10:45,760
and one of the fields they were looking

303
00:10:45,760 --> 00:10:48,079
at is the timestamp field

304
00:10:48,079 --> 00:10:50,480
that allowed them to create a timeline

305
00:10:50,480 --> 00:10:52,000
for exactly

306
00:10:52,000 --> 00:10:55,120
how stuxnet progressed how it was

307
00:10:55,120 --> 00:10:57,279
updated and so forth right

308
00:10:57,279 --> 00:10:59,680
so when they published this information

309
00:10:59,680 --> 00:11:02,079
the nsa called on really quickly

310
00:11:02,079 --> 00:11:04,000
and they they blacked out this timestamp

311
00:11:04,000 --> 00:11:05,360
field

312
00:11:05,360 --> 00:11:07,279
one mistake they made though is there's

313
00:11:07,279 --> 00:11:09,839
two additional timestamp fields

314
00:11:09,839 --> 00:11:12,000
in the exe you've got the export

315
00:11:12,000 --> 00:11:13,920
directory and the resource directory

316
00:11:13,920 --> 00:11:16,000
they both have timestamp fields

317
00:11:16,000 --> 00:11:17,839
and they didn't blank these out so

318
00:11:17,839 --> 00:11:19,200
researchers kept doing what they're

319
00:11:19,200 --> 00:11:20,160
doing

320
00:11:20,160 --> 00:11:22,640
and they managed to link stuxnet back

321
00:11:22,640 --> 00:11:25,120
all the way to 2006.

322
00:11:25,120 --> 00:11:27,920
that so this was a major operation right

323
00:11:27,920 --> 00:11:28,720
anything

324
00:11:28,720 --> 00:11:30,560
that goes on for four years has got some

325
00:11:30,560 --> 00:11:32,160
proper backing

326
00:11:32,160 --> 00:11:33,760
and that was another indication that

327
00:11:33,760 --> 00:11:36,399
this was a nation nation state attack

328
00:11:36,399 --> 00:11:38,240
so as a malware analyst a lot of these

329
00:11:38,240 --> 00:11:40,079
fields are going to be interesting to us

330
00:11:40,079 --> 00:11:43,839
even though an end user might not see it

331
00:11:43,839 --> 00:11:45,680
so if we look at our offer data

332
00:11:45,680 --> 00:11:48,079
structure we've got the optional header

333
00:11:48,079 --> 00:11:50,880
which isn't optional so the name is a

334
00:11:50,880 --> 00:11:53,680
bit misleading

335
00:11:53,680 --> 00:11:56,560
but it has entries like the image base

336
00:11:56,560 --> 00:11:58,240
which is where the application prefers

337
00:11:58,240 --> 00:11:59,279
to be loaded

338
00:11:59,279 --> 00:12:00,880
the application entry points are the

339
00:12:00,880 --> 00:12:02,399
first commands that are going to be

340
00:12:02,399 --> 00:12:04,639
executed in the file

341
00:12:04,639 --> 00:12:06,399
this is never at the beginning of a file

342
00:12:06,399 --> 00:12:08,320
somewhere in the middle

343
00:12:08,320 --> 00:12:10,240
we have our section alignment which

344
00:12:10,240 --> 00:12:12,480
tells us on what memory boundary our

345
00:12:12,480 --> 00:12:14,240
sections are going to be aligned

346
00:12:14,240 --> 00:12:16,079
our file alignment which does the same

347
00:12:16,079 --> 00:12:18,399
thing for data on disk

348
00:12:18,399 --> 00:12:21,360
uh checksums which tells us if a file

349
00:12:21,360 --> 00:12:22,720
has been modified and

350
00:12:22,720 --> 00:12:25,279
a lot a lot of events i think there's

351
00:12:25,279 --> 00:12:28,720
about 50 or there more or some such

352
00:12:28,720 --> 00:12:30,320
so if we look at our next data structure

353
00:12:30,320 --> 00:12:32,399
we've got our data directories

354
00:12:32,399 --> 00:12:35,519
so these are entries that all link to

355
00:12:35,519 --> 00:12:37,920
other data structures right so if we

356
00:12:37,920 --> 00:12:38,560
have

357
00:12:38,560 --> 00:12:42,079
sections that are specifically for

358
00:12:42,079 --> 00:12:43,760
for example for resources we've got a

359
00:12:43,760 --> 00:12:45,600
resource section

360
00:12:45,600 --> 00:12:47,279
and then we have our resource directory

361
00:12:47,279 --> 00:12:49,600
entry this tells the windows letter

362
00:12:49,600 --> 00:12:51,279
where to go look for resource

363
00:12:51,279 --> 00:12:53,760
information so resources are going to

364
00:12:53,760 --> 00:12:54,480
include

365
00:12:54,480 --> 00:12:57,680
images pictures icons

366
00:12:57,680 --> 00:12:59,600
mouse pointers whatever the case might

367
00:12:59,600 --> 00:13:01,360
be so

368
00:13:01,360 --> 00:13:02,880
all of these data structures that are

369
00:13:02,880 --> 00:13:04,560
linked to are completed

370
00:13:04,560 --> 00:13:06,480
incredibly complex as well so we're not

371
00:13:06,480 --> 00:13:07,920
going to dig into these

372
00:13:07,920 --> 00:13:10,320
what we do care about specifically is

373
00:13:10,320 --> 00:13:13,680
the import and export directories

374
00:13:13,680 --> 00:13:15,200
so firstly we have to look at our

375
00:13:15,200 --> 00:13:17,040
section headers right so our section

376
00:13:17,040 --> 00:13:18,560
headers tell us

377
00:13:18,560 --> 00:13:20,959
where a specific block of memory is

378
00:13:20,959 --> 00:13:22,000
going to be

379
00:13:22,000 --> 00:13:24,959
they all have their own permissions and

380
00:13:24,959 --> 00:13:27,040
they're all used for different things

381
00:13:27,040 --> 00:13:30,720
so by convention for example you have a

382
00:13:30,720 --> 00:13:33,040
text section this is where your code is

383
00:13:33,040 --> 00:13:34,639
stored you've got data which is where

384
00:13:34,639 --> 00:13:36,720
your redirect data are stored

385
00:13:36,720 --> 00:13:39,279
uh and loads of others so this section

386
00:13:39,279 --> 00:13:39,920
tells us

387
00:13:39,920 --> 00:13:42,800
where this is placed in memory how big

388
00:13:42,800 --> 00:13:43,760
it is in memory

389
00:13:43,760 --> 00:13:45,680
where it's on disk how big it is on disk

390
00:13:45,680 --> 00:13:47,120
and all of the the permissions

391
00:13:47,120 --> 00:13:50,320
associated with that section

392
00:13:50,320 --> 00:13:53,519
so going back to our import directory

393
00:13:53,519 --> 00:13:55,440
this is going to have a directory entry

394
00:13:55,440 --> 00:13:57,440
pointing to wherever it is

395
00:13:57,440 --> 00:13:59,519
and what the windows loader does of this

396
00:13:59,519 --> 00:14:01,199
is it tells us

397
00:14:01,199 --> 00:14:02,720
what application tells the windows

398
00:14:02,720 --> 00:14:04,399
loader

399
00:14:04,399 --> 00:14:06,399
what functions it needs in other dlls

400
00:14:06,399 --> 00:14:08,480
what the doll's name is

401
00:14:08,480 --> 00:14:10,079
and the windows later we'll go fetch

402
00:14:10,079 --> 00:14:13,600
those and map it into our process for us

403
00:14:13,600 --> 00:14:15,360
if we go look at our export directory

404
00:14:15,360 --> 00:14:16,720
this is similar

405
00:14:16,720 --> 00:14:19,199
just in reverse so our application is

406
00:14:19,199 --> 00:14:21,440
going to tile the windows loader

407
00:14:21,440 --> 00:14:24,240
we're exporting specific addresses be it

408
00:14:24,240 --> 00:14:26,160
variables or functions

409
00:14:26,160 --> 00:14:28,320
so other applications can use the code

410
00:14:28,320 --> 00:14:29,360
that we provide

411
00:14:29,360 --> 00:14:32,079
so this is generally what the oils do

412
00:14:32,079 --> 00:14:34,160
there's no rule that says this has to be

413
00:14:34,160 --> 00:14:36,480
a drought you can have exports and exi

414
00:14:36,480 --> 00:14:38,480
exes as well

415
00:14:38,480 --> 00:14:40,800
though that is not standard and your

416
00:14:40,800 --> 00:14:41,519
your

417
00:14:41,519 --> 00:14:43,279
code has to be slightly different if

418
00:14:43,279 --> 00:14:45,600
this is what you what you're doing

419
00:14:45,600 --> 00:14:47,360
so what happens in the export directory

420
00:14:47,360 --> 00:14:50,800
is you can have let's say 10 exports

421
00:14:50,800 --> 00:14:52,480
so these are memory addresses that's

422
00:14:52,480 --> 00:14:54,000
going to be used by something

423
00:14:54,000 --> 00:14:56,240
you can either reference these by name

424
00:14:56,240 --> 00:14:58,639
or by ordinal which is just a number

425
00:14:58,639 --> 00:15:00,720
so you've got three parallel parallel

426
00:15:00,720 --> 00:15:02,240
arrays in this case

427
00:15:02,240 --> 00:15:04,720
so let's say we have and last in the

428
00:15:04,720 --> 00:15:06,800
last array we've got five entries they

429
00:15:06,800 --> 00:15:08,079
all have a name

430
00:15:08,079 --> 00:15:09,440
if we want to look at where these

431
00:15:09,440 --> 00:15:11,360
addresses are we're going to take the

432
00:15:11,360 --> 00:15:13,519
the specific index so let's say index

433
00:15:13,519 --> 00:15:14,079
number

434
00:15:14,079 --> 00:15:15,839
on number one which is going to be sum

435
00:15:15,839 --> 00:15:17,360
function name

436
00:15:17,360 --> 00:15:19,199
we're going to look up that intake index

437
00:15:19,199 --> 00:15:20,399
in the address of names

438
00:15:20,399 --> 00:15:22,079
array which is going to give us a wooden

439
00:15:22,079 --> 00:15:24,079
all number we're going to look up that

440
00:15:24,079 --> 00:15:24,880
ordinal

441
00:15:24,880 --> 00:15:26,639
number in the address of functions and

442
00:15:26,639 --> 00:15:28,480
that's going to give us the function

443
00:15:28,480 --> 00:15:31,519
address which the windows loader is

444
00:15:31,519 --> 00:15:32,480
going to use to

445
00:15:32,480 --> 00:15:34,560
actually map the name to the location

446
00:15:34,560 --> 00:15:37,839
for where it is on file right

447
00:15:38,079 --> 00:15:41,759
so lastly looking at the loading process

448
00:15:41,759 --> 00:15:43,440
so windows is going to or the windows

449
00:15:43,440 --> 00:15:46,079
loader is going to pass all of these

450
00:15:46,079 --> 00:15:47,839
data structures for us and it's going to

451
00:15:47,839 --> 00:15:49,839
map the exe into memory

452
00:15:49,839 --> 00:15:53,199
so your memory alignment is normally a

453
00:15:53,199 --> 00:15:54,079
thousand hex

454
00:15:54,079 --> 00:15:57,759
while your file alignment is 200 hex

455
00:15:57,759 --> 00:16:01,279
so it's almost always the case that your

456
00:16:01,279 --> 00:16:03,759
executable on this is going to be

457
00:16:03,759 --> 00:16:06,959
smaller than your executable in memory

458
00:16:06,959 --> 00:16:08,800
so that is also one of the reasons why

459
00:16:08,800 --> 00:16:10,480
when we have a piece of malware we can't

460
00:16:10,480 --> 00:16:12,160
just rip it out of memory

461
00:16:12,160 --> 00:16:13,680
we have to understand how this file

462
00:16:13,680 --> 00:16:15,199
format works

463
00:16:15,199 --> 00:16:17,440
uh we have to go read and code it so

464
00:16:17,440 --> 00:16:19,279
when we do run it for analysis the

465
00:16:19,279 --> 00:16:20,959
windows loader knows how to load it for

466
00:16:20,959 --> 00:16:22,240
us

467
00:16:22,240 --> 00:16:24,240
what we also want to look at is the

468
00:16:24,240 --> 00:16:26,320
input address table so

469
00:16:26,320 --> 00:16:28,639
i mentioned that the loader needs to

470
00:16:28,639 --> 00:16:29,519
know which

471
00:16:29,519 --> 00:16:32,880
functions and the or else to to load and

472
00:16:32,880 --> 00:16:36,320
to give an example of this let's say

473
00:16:36,320 --> 00:16:38,720
our program needs to use the the

474
00:16:38,720 --> 00:16:40,639
internet function so to fetch something

475
00:16:40,639 --> 00:16:41,120
from

476
00:16:41,120 --> 00:16:43,199
a website or whatever the case may be

477
00:16:43,199 --> 00:16:44,959
it's going to have an entry that says

478
00:16:44,959 --> 00:16:48,000
please load the specific dll and give me

479
00:16:48,000 --> 00:16:50,320
access to these functions the windows

480
00:16:50,320 --> 00:16:52,000
loader is going to map those addresses

481
00:16:52,000 --> 00:16:54,480
back into our application

482
00:16:54,480 --> 00:16:56,160
and our application doesn't have to know

483
00:16:56,160 --> 00:16:57,920
how this happened it just has access to

484
00:16:57,920 --> 00:16:59,920
these functions automatically

485
00:16:59,920 --> 00:17:03,199
reverses if we expose specific functions

486
00:17:03,199 --> 00:17:04,640
some application is going to do this

487
00:17:04,640 --> 00:17:06,799
process the windows loader is going to

488
00:17:06,799 --> 00:17:07,280
pass

489
00:17:07,280 --> 00:17:09,280
our our code it's going to look at the

490
00:17:09,280 --> 00:17:10,799
export directory look at where these

491
00:17:10,799 --> 00:17:12,079
functions are

492
00:17:12,079 --> 00:17:14,240
and map those addresses back into the

493
00:17:14,240 --> 00:17:16,720
process that requested access to it

494
00:17:16,720 --> 00:17:18,319
and then also there's loads of other

495
00:17:18,319 --> 00:17:20,160
things going on the learning process

496
00:17:20,160 --> 00:17:22,959
is extremely complex but luckily for us

497
00:17:22,959 --> 00:17:24,400
we don't actually have to look at how

498
00:17:24,400 --> 00:17:26,799
these work for now

499
00:17:26,799 --> 00:17:28,480
so i know this is a lot of information

500
00:17:28,480 --> 00:17:30,960
to take in i said we're also lucky in

501
00:17:30,960 --> 00:17:32,080
that

502
00:17:32,080 --> 00:17:33,840
we have tools that can do this for us

503
00:17:33,840 --> 00:17:35,440
we've got great documentation

504
00:17:35,440 --> 00:17:38,240
for the most part and we only have to

505
00:17:38,240 --> 00:17:39,520
look at a fraction

506
00:17:39,520 --> 00:17:41,360
of of what these structures actually

507
00:17:41,360 --> 00:17:43,280
contain

508
00:17:43,280 --> 00:17:45,280
you're going to be constantly looking up

509
00:17:45,280 --> 00:17:46,559
these fields so you don't have to know

510
00:17:46,559 --> 00:17:48,160
them off by heart

511
00:17:48,160 --> 00:17:50,160
and i end up looking at the

512
00:17:50,160 --> 00:17:51,679
documentation over and over when i'm

513
00:17:51,679 --> 00:17:53,760
working with these

514
00:17:53,760 --> 00:17:56,320
so at this point what do we know right

515
00:17:56,320 --> 00:17:57,679
what conclusion do we have

516
00:17:57,679 --> 00:18:01,440
as by looking at the the data structures

517
00:18:01,440 --> 00:18:04,400
within these files we can modify them

518
00:18:04,400 --> 00:18:07,840
to create exports

519
00:18:07,840 --> 00:18:10,400
we can take a specific piece of code in

520
00:18:10,400 --> 00:18:11,600
malware

521
00:18:11,600 --> 00:18:13,440
and tell the windows loader that we want

522
00:18:13,440 --> 00:18:14,960
to have access

523
00:18:14,960 --> 00:18:17,840
to this piece of code so it's not going

524
00:18:17,840 --> 00:18:19,760
to run the entire thing

525
00:18:19,760 --> 00:18:21,760
it's going to only run pieces of code

526
00:18:21,760 --> 00:18:23,600
when we want to use them

527
00:18:23,600 --> 00:18:25,280
so there's a couple of reasons why we

528
00:18:25,280 --> 00:18:27,280
want to do it in this case

529
00:18:27,280 --> 00:18:30,080
so one example is a lot of malware

530
00:18:30,080 --> 00:18:33,600
actually encrypts its configuration

531
00:18:33,600 --> 00:18:36,799
so the standard for actually looking at

532
00:18:36,799 --> 00:18:39,200
these files or the common approach

533
00:18:39,200 --> 00:18:41,600
is to reverse engineer it and go create

534
00:18:41,600 --> 00:18:42,480
a decrypter

535
00:18:42,480 --> 00:18:44,960
as a malware analyst so this is an

536
00:18:44,960 --> 00:18:46,880
extremely time consuming we want to make

537
00:18:46,880 --> 00:18:49,360
it easier right so we can for example

538
00:18:49,360 --> 00:18:51,440
create an export entry for the function

539
00:18:51,440 --> 00:18:53,679
that decrypts this information

540
00:18:53,679 --> 00:18:55,919
we load this as a library we call this

541
00:18:55,919 --> 00:18:56,960
function and

542
00:18:56,960 --> 00:18:59,679
instantly we have the decrypted config

543
00:18:59,679 --> 00:19:01,360
without having to reverse engineer or

544
00:19:01,360 --> 00:19:03,520
recode this

545
00:19:03,520 --> 00:19:06,080
another example is i've seen malware

546
00:19:06,080 --> 00:19:07,039
that

547
00:19:07,039 --> 00:19:09,600
doesn't do a good job at its crypto

548
00:19:09,600 --> 00:19:11,120
implementation

549
00:19:11,120 --> 00:19:13,440
so all it does is it actually decrypts

550
00:19:13,440 --> 00:19:15,600
and encrypts with the same key

551
00:19:15,600 --> 00:19:17,760
but you have to for example player and

552
00:19:17,760 --> 00:19:19,679
symbol forward or do that right

553
00:19:19,679 --> 00:19:23,039
what we can do is go hook the

554
00:19:23,039 --> 00:19:25,440
the or create export entries for the

555
00:19:25,440 --> 00:19:26,720
decrypt function

556
00:19:26,720 --> 00:19:28,559
just call it ourselves and the malware

557
00:19:28,559 --> 00:19:30,720
will decrypt our files without us

558
00:19:30,720 --> 00:19:32,960
actually having to pay a ransom for it

559
00:19:32,960 --> 00:19:34,799
and then specifically what we're going

560
00:19:34,799 --> 00:19:38,000
to be looking is disrupting c2 channels

561
00:19:38,000 --> 00:19:40,240
so if we have a piece of malware we can

562
00:19:40,240 --> 00:19:42,960
see it's calling out to some site

563
00:19:42,960 --> 00:19:44,640
we want to be able to disrupt this

564
00:19:44,640 --> 00:19:46,799
channel so that all the

565
00:19:46,799 --> 00:19:48,720
implants calling out to the sites can't

566
00:19:48,720 --> 00:19:50,240
actually be used by the attacker

567
00:19:50,240 --> 00:19:53,200
and hopefully we can disrupt the server

568
00:19:53,200 --> 00:19:54,880
that they're using completely to make it

569
00:19:54,880 --> 00:19:56,960
unusable

570
00:19:56,960 --> 00:20:00,160
so why do we actually want to take this

571
00:20:00,160 --> 00:20:01,360
approach right

572
00:20:01,360 --> 00:20:03,039
so the one problem we're having at the

573
00:20:03,039 --> 00:20:05,280
moment is that we have a lot of users

574
00:20:05,280 --> 00:20:07,039
working from home

575
00:20:07,039 --> 00:20:08,640
they're not sitting behind the corporate

576
00:20:08,640 --> 00:20:10,159
firewall anymore so

577
00:20:10,159 --> 00:20:11,679
we could have previously just blocked

578
00:20:11,679 --> 00:20:13,280
something in a firewall

579
00:20:13,280 --> 00:20:16,640
we no longer have that option

580
00:20:16,640 --> 00:20:18,400
another problem is that even when you

581
00:20:18,400 --> 00:20:21,600
identify malicious c2

582
00:20:21,600 --> 00:20:24,320
hosts hosting providers don't take them

583
00:20:24,320 --> 00:20:24,640
down

584
00:20:24,640 --> 00:20:28,799
and this is a pretty big problem for us

585
00:20:28,799 --> 00:20:32,480
so we have identified an attack we know

586
00:20:32,480 --> 00:20:34,640
maybe some of our users are infected we

587
00:20:34,640 --> 00:20:36,000
don't know how many

588
00:20:36,000 --> 00:20:39,280
but we can't do anything about it

589
00:20:39,280 --> 00:20:41,360
so i was thinking we can possibly do

590
00:20:41,360 --> 00:20:42,400
this by ourselves

591
00:20:42,400 --> 00:20:44,400
so let's see if we can disrupt disrupt

592
00:20:44,400 --> 00:20:45,919
these channels

593
00:20:45,919 --> 00:20:48,000
without help from the the hosting

594
00:20:48,000 --> 00:20:49,760
provider

595
00:20:49,760 --> 00:20:51,440
so i did get a little bit of pushback

596
00:20:51,440 --> 00:20:53,520
when i started this research

597
00:20:53,520 --> 00:20:56,559
basically it was a fix debate on

598
00:20:56,559 --> 00:20:58,480
hacking back right which you've had back

599
00:20:58,480 --> 00:21:00,000
and forth a lot of times especially on

600
00:21:00,000 --> 00:21:01,520
twitter

601
00:21:01,520 --> 00:21:04,799
so if you are being attacked is it okay

602
00:21:04,799 --> 00:21:08,000
to attack back right to disrupt this

603
00:21:08,000 --> 00:21:09,440
channel

604
00:21:09,440 --> 00:21:10,799
generally you're not allowed to mess

605
00:21:10,799 --> 00:21:12,720
with infrastructure you don't earn

606
00:21:12,720 --> 00:21:16,240
and in this case we are not

607
00:21:16,240 --> 00:21:18,400
we do not own this infrastructure as i

608
00:21:18,400 --> 00:21:19,679
said

609
00:21:19,679 --> 00:21:22,240
so you can also make the arguments if we

610
00:21:22,240 --> 00:21:23,600
do disrupt them what are they going to

611
00:21:23,600 --> 00:21:25,280
do report us right

612
00:21:25,280 --> 00:21:27,520
so this is this is a victimless crime

613
00:21:27,520 --> 00:21:29,600
but you still have

614
00:21:29,600 --> 00:21:31,200
people arguing back and forth this is

615
00:21:31,200 --> 00:21:33,919
not a settled debate

616
00:21:33,919 --> 00:21:36,640
so for this i'm going to choose a easy

617
00:21:36,640 --> 00:21:37,039
or

618
00:21:37,039 --> 00:21:39,280
a common target right so what i'm going

619
00:21:39,280 --> 00:21:42,000
to be targeting is called cobalt strike

620
00:21:42,000 --> 00:21:44,559
it's a commercial product it's about 55

621
00:21:44,559 --> 00:21:45,039
000

622
00:21:45,039 --> 00:21:48,320
grand per year for one license

623
00:21:48,320 --> 00:21:50,880
and it is incredibly powerful the

624
00:21:50,880 --> 00:21:52,000
problem with this tool

625
00:21:52,000 --> 00:21:54,799
is although it's a commercial tool a lot

626
00:21:54,799 --> 00:21:55,600
of apt

627
00:21:55,600 --> 00:21:58,159
actors are are using it actively so

628
00:21:58,159 --> 00:21:59,360
we've got for example

629
00:21:59,360 --> 00:22:01,600
lazarus group which is north korea we've

630
00:22:01,600 --> 00:22:04,159
got charming kitten which is iran

631
00:22:04,159 --> 00:22:07,440
and they are known to use this framework

632
00:22:07,440 --> 00:22:09,200
quite extensively

633
00:22:09,200 --> 00:22:12,480
even though the us doesn't uh

634
00:22:12,480 --> 00:22:14,559
export to these countries because of the

635
00:22:14,559 --> 00:22:16,640
wasn't our agreement

636
00:22:16,640 --> 00:22:19,600
so presumably these licenses that

637
00:22:19,600 --> 00:22:20,320
they're using

638
00:22:20,320 --> 00:22:23,440
are cracked versions of the product

639
00:22:23,440 --> 00:22:25,120
but the fact is they're still using

640
00:22:25,120 --> 00:22:27,520
these to attack us so we do need to know

641
00:22:27,520 --> 00:22:29,440
actually how to defend ourselves against

642
00:22:29,440 --> 00:22:30,320
it

643
00:22:30,320 --> 00:22:32,640
so cobo strike has a large list of

644
00:22:32,640 --> 00:22:33,760
extremely

645
00:22:33,760 --> 00:22:36,799
powerful features for example you can do

646
00:22:36,799 --> 00:22:37,840
pivots to

647
00:22:37,840 --> 00:22:41,120
reach hard to get to targets you can

648
00:22:41,120 --> 00:22:41,760
dump

649
00:22:41,760 --> 00:22:44,000
password hashes grab screenshots

650
00:22:44,000 --> 00:22:46,000
whatever you can think of

651
00:22:46,000 --> 00:22:48,640
it's extremely extensive what's

652
00:22:48,640 --> 00:22:50,799
especially nice about this tour is the

653
00:22:50,799 --> 00:22:52,880
customization we have over what our

654
00:22:52,880 --> 00:22:54,240
traffic looks like

655
00:22:54,240 --> 00:22:56,240
so cobalt strikes you kerbal strike

656
00:22:56,240 --> 00:22:58,480
names this malleable c2

657
00:22:58,480 --> 00:23:01,440
and it allows us to tailor our network

658
00:23:01,440 --> 00:23:02,080
traffic

659
00:23:02,080 --> 00:23:04,559
to what incident responder responders

660
00:23:04,559 --> 00:23:06,320
are going to expect to see

661
00:23:06,320 --> 00:23:09,360
so for example the screenshot is

662
00:23:09,360 --> 00:23:12,159
kerbal strike setup to make the ct

663
00:23:12,159 --> 00:23:12,720
traffic

664
00:23:12,720 --> 00:23:14,000
look like an image that's being

665
00:23:14,000 --> 00:23:16,400
downloaded as an incident responder when

666
00:23:16,400 --> 00:23:17,520
you see this you're not going to be

667
00:23:17,520 --> 00:23:19,520
concerned it looks legitimate

668
00:23:19,520 --> 00:23:22,640
where in fact it's how this implant is

669
00:23:22,640 --> 00:23:24,400
communicating with the component control

670
00:23:24,400 --> 00:23:27,679
server so this is incredibly complex

671
00:23:27,679 --> 00:23:30,320
especially from a code perspective

672
00:23:30,320 --> 00:23:31,919
if you want to interact with this server

673
00:23:31,919 --> 00:23:33,600
yourself traditionally

674
00:23:33,600 --> 00:23:36,720
you would have to go reverse engineer

675
00:23:36,720 --> 00:23:38,799
all of this code write your own parser

676
00:23:38,799 --> 00:23:40,960
write your own generator

677
00:23:40,960 --> 00:23:43,279
but we do not have time for this right

678
00:23:43,279 --> 00:23:45,039
especially if we're in the middle of

679
00:23:45,039 --> 00:23:46,159
incidents

680
00:23:46,159 --> 00:23:48,480
it's chaos we have to figure out where

681
00:23:48,480 --> 00:23:51,120
we are exposed if we're exposed

682
00:23:51,120 --> 00:23:53,279
and we want to minimize this process as

683
00:23:53,279 --> 00:23:55,840
much as much as we can

684
00:23:55,840 --> 00:23:59,200
so cobalt strike uses a reflective dll

685
00:23:59,200 --> 00:24:01,200
which has been modified to be position

686
00:24:01,200 --> 00:24:02,880
independent right

687
00:24:02,880 --> 00:24:04,720
so what this means is the author has the

688
00:24:04,720 --> 00:24:06,159
possibility of writing this

689
00:24:06,159 --> 00:24:09,200
implants in normalcy

690
00:24:09,200 --> 00:24:11,200
but it's still it can still be injected

691
00:24:11,200 --> 00:24:13,760
into memory as position independent

692
00:24:13,760 --> 00:24:16,320
we don't need the windows loader to

693
00:24:16,320 --> 00:24:18,080
alert this for us

694
00:24:18,080 --> 00:24:20,559
which as i said previously when we're

695
00:24:20,559 --> 00:24:22,159
analyzing malware as a problem because

696
00:24:22,159 --> 00:24:25,200
we need it on disk

697
00:24:25,520 --> 00:24:27,279
so all of the standard loaders that come

698
00:24:27,279 --> 00:24:29,520
with kerbal strike are injectors

699
00:24:29,520 --> 00:24:32,640
so we can't just use it as is so in this

700
00:24:32,640 --> 00:24:33,760
case i needed to

701
00:24:33,760 --> 00:24:36,799
go create a simple wrapper for it which

702
00:24:36,799 --> 00:24:39,120
allows us to run it from disk it doesn't

703
00:24:39,120 --> 00:24:40,720
inject into a new section

704
00:24:40,720 --> 00:24:43,360
and any comments we make functions we

705
00:24:43,360 --> 00:24:44,559
rename

706
00:24:44,559 --> 00:24:46,240
we can keep those and continue our

707
00:24:46,240 --> 00:24:48,400
analysis

708
00:24:48,400 --> 00:24:49,600
in this case because all of the

709
00:24:49,600 --> 00:24:51,679
configurations for kerbal strike are

710
00:24:51,679 --> 00:24:53,760
stored within the sample itself

711
00:24:53,760 --> 00:24:56,400
we do need a valid sample of the implant

712
00:24:56,400 --> 00:24:58,000
that the attacker is using against

713
00:24:58,000 --> 00:25:01,840
us so going to the hot pot i said we we

714
00:25:01,840 --> 00:25:02,640
don't want to

715
00:25:02,640 --> 00:25:05,039
reverse engineer this entire thing

716
00:25:05,039 --> 00:25:06,320
unfortunately we do

717
00:25:06,320 --> 00:25:09,360
have to at least know how it works so we

718
00:25:09,360 --> 00:25:10,400
don't have to know

719
00:25:10,400 --> 00:25:12,640
how it does something only that it does

720
00:25:12,640 --> 00:25:14,799
something and what it's doing right

721
00:25:14,799 --> 00:25:16,960
so this is a screenshot of me debugging

722
00:25:16,960 --> 00:25:17,840
cobalt strike

723
00:25:17,840 --> 00:25:21,919
when i was creating this framework

724
00:25:21,919 --> 00:25:23,200
so if you look at the second little

725
00:25:23,200 --> 00:25:25,279
block i highlighted

726
00:25:25,279 --> 00:25:27,760
that's the function that auto

727
00:25:27,760 --> 00:25:30,159
communication channels

728
00:25:30,159 --> 00:25:31,679
so this didn't have a name at the

729
00:25:31,679 --> 00:25:33,440
beginning i named it

730
00:25:33,440 --> 00:25:35,760
and to identify what it was doing i just

731
00:25:35,760 --> 00:25:37,120
looked at the code

732
00:25:37,120 --> 00:25:38,799
it was calling a lot of internet

733
00:25:38,799 --> 00:25:40,480
function

734
00:25:40,480 --> 00:25:42,720
setup code but it didn't actually do

735
00:25:42,720 --> 00:25:44,640
anything with it so chances are this is

736
00:25:44,640 --> 00:25:46,480
just setup function

737
00:25:46,480 --> 00:25:48,080
and in our code we're going to need to

738
00:25:48,080 --> 00:25:50,159
call this before we do anything else

739
00:25:50,159 --> 00:25:52,720
right so what i did is i took all of

740
00:25:52,720 --> 00:25:53,919
these functions

741
00:25:53,919 --> 00:25:57,840
all variables and i gave them names so

742
00:25:57,840 --> 00:25:59,520
this is a tool i created called

743
00:25:59,520 --> 00:26:02,720
pe pewpew and it'll take

744
00:26:02,720 --> 00:26:05,360
a malicious implant craft a new export

745
00:26:05,360 --> 00:26:06,720
directory for it

746
00:26:06,720 --> 00:26:10,480
and give it the names that we specify

747
00:26:10,480 --> 00:26:12,880
so luckily to check into the c2 server

748
00:26:12,880 --> 00:26:14,799
we don't need to reverse a lot of the

749
00:26:14,799 --> 00:26:18,720
application and the existing code will

750
00:26:18,720 --> 00:26:21,440
do all the heavy lifting for us

751
00:26:21,440 --> 00:26:22,880
so if you look at this this is a

752
00:26:22,880 --> 00:26:25,440
screenshot of cff explorer which i

753
00:26:25,440 --> 00:26:27,760
mentioned earlier which is a pe file

754
00:26:27,760 --> 00:26:28,720
parser

755
00:26:28,720 --> 00:26:31,120
this shows us the export directory for

756
00:26:31,120 --> 00:26:33,120
the implant that are modified

757
00:26:33,120 --> 00:26:34,880
we now have access to all of these

758
00:26:34,880 --> 00:26:37,120
functions which are what the ones i

759
00:26:37,120 --> 00:26:38,000
named

760
00:26:38,000 --> 00:26:40,960
and we can use this implant which was

761
00:26:40,960 --> 00:26:44,400
traditionally a standalone application

762
00:26:44,400 --> 00:26:47,840
as a api basically we can create code

763
00:26:47,840 --> 00:26:50,240
that runs these functions even though

764
00:26:50,240 --> 00:26:51,840
the main implant is not going to be

765
00:26:51,840 --> 00:26:52,799
running

766
00:26:52,799 --> 00:26:54,640
so this does all the heavy lifting and

767
00:26:54,640 --> 00:26:56,240
instead of us having to go

768
00:26:56,240 --> 00:26:59,360
look at how the the c2 functions work we

769
00:26:59,360 --> 00:27:01,279
can just dial this implant

770
00:27:01,279 --> 00:27:03,120
here's a piece of data go send it off to

771
00:27:03,120 --> 00:27:04,480
the server i don't care how you do it

772
00:27:04,480 --> 00:27:06,240
just do it

773
00:27:06,240 --> 00:27:08,320
so where we previously would have to

774
00:27:08,320 --> 00:27:10,240
code thousands of lines of code to mimic

775
00:27:10,240 --> 00:27:11,440
this behavior

776
00:27:11,440 --> 00:27:13,679
i've done it in under 100 just by using

777
00:27:13,679 --> 00:27:16,240
the code that's already there

778
00:27:16,240 --> 00:27:18,240
so there's a lot of ways we can actually

779
00:27:18,240 --> 00:27:20,480
disrupt these c2 channels

780
00:27:20,480 --> 00:27:23,200
we can for example let's say we check in

781
00:27:23,200 --> 00:27:25,919
100 malicious clients

782
00:27:25,919 --> 00:27:28,720
hundreds implants into delicious server

783
00:27:28,720 --> 00:27:29,520
the second

784
00:27:29,520 --> 00:27:30,720
we're going to make this server

785
00:27:30,720 --> 00:27:32,720
completely unusable

786
00:27:32,720 --> 00:27:34,399
i took a different approach i decided

787
00:27:34,399 --> 00:27:36,880
i'm going to show some ascii text

788
00:27:36,880 --> 00:27:38,480
so the attacker while using this

789
00:27:38,480 --> 00:27:40,000
framework they

790
00:27:40,000 --> 00:27:41,600
first have to look at my pictures and

791
00:27:41,600 --> 00:27:43,120
secondly i'm going to make this server

792
00:27:43,120 --> 00:27:45,760
unusable for them

793
00:27:45,760 --> 00:27:48,320
so even though our users might be

794
00:27:48,320 --> 00:27:49,200
exposed

795
00:27:49,200 --> 00:27:51,200
they're still going to be infected the

796
00:27:51,200 --> 00:27:52,720
server they're calling back to is going

797
00:27:52,720 --> 00:27:55,200
to be unusable

798
00:27:55,200 --> 00:27:57,039
so because kerbal strike actually has a

799
00:27:57,039 --> 00:27:58,320
client limit

800
00:27:58,320 --> 00:28:01,679
for one we're going to stop additional

801
00:28:01,679 --> 00:28:04,399
beacons from calling back to the server

802
00:28:04,399 --> 00:28:05,279
and hopefully

803
00:28:05,279 --> 00:28:08,880
we clutter the server's ui with so much

804
00:28:08,880 --> 00:28:11,360
information that it's not useful anymore

805
00:28:11,360 --> 00:28:13,279
for the systems that are infected and

806
00:28:13,279 --> 00:28:14,960
are successfully calling back to the

807
00:28:14,960 --> 00:28:17,200
server

808
00:28:17,200 --> 00:28:20,240
so this brings us back to to debate

809
00:28:20,240 --> 00:28:22,559
to the debate should we actually do this

810
00:28:22,559 --> 00:28:23,919
right

811
00:28:23,919 --> 00:28:25,520
the problem is if you think about it

812
00:28:25,520 --> 00:28:27,279
what are we going to do instead

813
00:28:27,279 --> 00:28:30,559
we've got infected hosts we can't

814
00:28:30,559 --> 00:28:31,440
necessarily

815
00:28:31,440 --> 00:28:33,520
reach them some of the protection

816
00:28:33,520 --> 00:28:35,600
controls have been disabled by the users

817
00:28:35,600 --> 00:28:36,559
which we see

818
00:28:36,559 --> 00:28:39,520
occasionally and we have to protect the

819
00:28:39,520 --> 00:28:40,159
network

820
00:28:40,159 --> 00:28:43,279
from this threat so luckily we've not

821
00:28:43,279 --> 00:28:44,559
been in the scenario

822
00:28:44,559 --> 00:28:47,440
but i suspect i i'll lean to one of

823
00:28:47,440 --> 00:28:49,520
these two

824
00:28:49,520 --> 00:28:52,080
when it does come to actually protecting

825
00:28:52,080 --> 00:28:54,799
the systems in these ways

826
00:28:54,799 --> 00:28:58,240
so peppyu has research research

827
00:28:58,240 --> 00:29:00,720
project that i've actually implemented a

828
00:29:00,720 --> 00:29:01,840
bunch of different

829
00:29:01,840 --> 00:29:04,320
attacks into so one of the other

830
00:29:04,320 --> 00:29:05,039
features

831
00:29:05,039 --> 00:29:06,320
i'm not going to be showing these but

832
00:29:06,320 --> 00:29:07,520
you can look at the source code play

833
00:29:07,520 --> 00:29:09,200
with them yourselves

834
00:29:09,200 --> 00:29:11,200
it's the old proxying side loading and

835
00:29:11,200 --> 00:29:12,399
hijacking

836
00:29:12,399 --> 00:29:14,880
so what this does is it allows us to

837
00:29:14,880 --> 00:29:16,080
craft

838
00:29:16,080 --> 00:29:19,200
for example a drl that's

839
00:29:19,200 --> 00:29:21,679
when it gets or when the application and

840
00:29:21,679 --> 00:29:23,360
application a valid application

841
00:29:23,360 --> 00:29:25,760
requests the deal from the windows

842
00:29:25,760 --> 00:29:26,640
loader

843
00:29:26,640 --> 00:29:29,200
our drill is going to be loaded instead

844
00:29:29,200 --> 00:29:30,480
and instead of

845
00:29:30,480 --> 00:29:33,279
returning or performing some operation

846
00:29:33,279 --> 00:29:33,840
like the

847
00:29:33,840 --> 00:29:35,200
application expects we're going to do

848
00:29:35,200 --> 00:29:36,880
something else

849
00:29:36,880 --> 00:29:39,039
one example is this of this is again

850
00:29:39,039 --> 00:29:41,120
stuxnet

851
00:29:41,120 --> 00:29:44,240
this stuxnet hooked the dlls that

852
00:29:44,240 --> 00:29:47,600
returned telemetry from the centrifuges

853
00:29:47,600 --> 00:29:50,960
so instead of the centrifuge saying

854
00:29:50,960 --> 00:29:53,440
something is wrong which was the case

855
00:29:53,440 --> 00:29:55,919
the drl changed this message saying

856
00:29:55,919 --> 00:29:57,679
everything is in line

857
00:29:57,679 --> 00:30:00,720
and when these devices started

858
00:30:00,720 --> 00:30:03,200
falling over and spinning themselves off

859
00:30:03,200 --> 00:30:04,960
their access

860
00:30:04,960 --> 00:30:07,520
the technicians looked at the analysis

861
00:30:07,520 --> 00:30:10,480
the software said everything was fine

862
00:30:10,480 --> 00:30:12,000
and they didn't actually know what the

863
00:30:12,000 --> 00:30:13,760
problem was

864
00:30:13,760 --> 00:30:16,080
another one i've implemented is just

865
00:30:16,080 --> 00:30:18,880
dumbling jumbling the import directories

866
00:30:18,880 --> 00:30:21,679
so what a lot of antivirus engines do is

867
00:30:21,679 --> 00:30:22,080
they

868
00:30:22,080 --> 00:30:25,200
create a hash of the import entries

869
00:30:25,200 --> 00:30:28,799
so they call it empash so if a malware

870
00:30:28,799 --> 00:30:29,679
author

871
00:30:29,679 --> 00:30:33,279
changes his code to

872
00:30:33,279 --> 00:30:36,240
look different to evade avs the input

873
00:30:36,240 --> 00:30:37,600
hash is not actually going to change

874
00:30:37,600 --> 00:30:38,799
because he didn't change the

875
00:30:38,799 --> 00:30:40,559
functionality

876
00:30:40,559 --> 00:30:43,760
so abs can now find multiple strains of

877
00:30:43,760 --> 00:30:44,559
the same

878
00:30:44,559 --> 00:30:46,640
malware just by looking at the import

879
00:30:46,640 --> 00:30:48,159
hash if they found

880
00:30:48,159 --> 00:30:51,840
one specific sample so in this case

881
00:30:51,840 --> 00:30:53,440
like i said before the input address

882
00:30:53,440 --> 00:30:56,880
table is extremely difficult to modify

883
00:30:56,880 --> 00:30:58,960
but it's possible to jumble some finger

884
00:30:58,960 --> 00:31:00,159
things around

885
00:31:00,159 --> 00:31:01,760
which then changes the hash which is

886
00:31:01,760 --> 00:31:03,360
what i did in this case

887
00:31:03,360 --> 00:31:05,519
there's also some other features like

888
00:31:05,519 --> 00:31:06,640
for example

889
00:31:06,640 --> 00:31:08,880
changing the debug directories which

890
00:31:08,880 --> 00:31:10,880
also causes antivirus engines to treat

891
00:31:10,880 --> 00:31:12,880
your sample differently

892
00:31:12,880 --> 00:31:15,679
and my main research on this case has

893
00:31:15,679 --> 00:31:16,080
been

894
00:31:16,080 --> 00:31:18,720
basically how antivirus engines handle

895
00:31:18,720 --> 00:31:20,159
malware

896
00:31:20,159 --> 00:31:21,840
so there's a lot of room for improvement

897
00:31:21,840 --> 00:31:23,039
there's a lot of things that can do

898
00:31:23,039 --> 00:31:24,159
already

899
00:31:24,159 --> 00:31:26,480
and you are more than welcome to go play

900
00:31:26,480 --> 00:31:28,320
with these give me feedback i'd love to

901
00:31:28,320 --> 00:31:29,679
implement some new features if you can

902
00:31:29,679 --> 00:31:30,080
think of

903
00:31:30,080 --> 00:31:33,360
them and we can see where this project

904
00:31:33,360 --> 00:31:34,559
goes right

905
00:31:34,559 --> 00:31:38,399
so at least now we are in a position to

906
00:31:38,399 --> 00:31:40,880
perform these actions we we can possibly

907
00:31:40,880 --> 00:31:42,880
disrupt c2 channels

908
00:31:42,880 --> 00:31:44,880
it's still up for debate if we should be

909
00:31:44,880 --> 00:31:46,799
doing this

910
00:31:46,799 --> 00:31:49,200
but we have the option now i'd love to

911
00:31:49,200 --> 00:31:50,720
take this project a bit further

912
00:31:50,720 --> 00:31:53,039
speak to you guys about it i'm going to

913
00:31:53,039 --> 00:31:54,559
be on discord so please look

914
00:31:54,559 --> 00:31:57,360
look me up we can chat about it and we

915
00:31:57,360 --> 00:31:58,320
can see where the

916
00:31:58,320 --> 00:32:00,559
where the project goes but i hope you

917
00:32:00,559 --> 00:32:01,360
enjoy your

918
00:32:01,360 --> 00:32:04,320
the rest of your hexcon and we'll

919
00:32:04,320 --> 00:32:05,679
probably look at this again in the

920
00:32:05,679 --> 00:32:06,320
future

921
00:32:06,320 --> 00:32:09,840
so look out for it

