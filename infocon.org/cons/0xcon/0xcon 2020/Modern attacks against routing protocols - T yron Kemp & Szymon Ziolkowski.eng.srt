1
00:00:08,240 --> 00:00:10,480
hello everybody welcome to root op z

2
00:00:10,480 --> 00:00:12,160
modern routine protocol vulnerability

3
00:00:12,160 --> 00:00:14,080
analysis and exploitation

4
00:00:14,080 --> 00:00:16,239
i'm tyron kemp and i work with this

5
00:00:16,239 --> 00:00:17,119
project

6
00:00:17,119 --> 00:00:20,000
along with simon zukowski um at the time

7
00:00:20,000 --> 00:00:20,720
we were both

8
00:00:20,720 --> 00:00:23,359
pen testers at sensepost simon is a lead

9
00:00:23,359 --> 00:00:24,720
taxor

10
00:00:24,720 --> 00:00:27,119
he likes apsec and writing code i'm a

11
00:00:27,119 --> 00:00:28,840
bit of scrub

12
00:00:28,840 --> 00:00:32,000
unfortunately um simon can't join us for

13
00:00:32,000 --> 00:00:33,680
this once you stuck with me

14
00:00:33,680 --> 00:00:36,320
um i have some networking network

15
00:00:36,320 --> 00:00:37,440
security experience

16
00:00:37,440 --> 00:00:40,960
and i've done some pen testing and um

17
00:00:40,960 --> 00:00:42,320
i'll sort of just give you some

18
00:00:42,320 --> 00:00:46,000
background how the project came about

19
00:00:46,000 --> 00:00:47,920
i think it was a sensecon myself and

20
00:00:47,920 --> 00:00:49,840
simon wanted to do something

21
00:00:49,840 --> 00:00:52,879
and he wanted to learn about some

22
00:00:52,879 --> 00:00:53,840
networking stuff

23
00:00:53,840 --> 00:00:55,280
and i wanted to learn how to write

24
00:00:55,280 --> 00:00:57,039
better code i think

25
00:00:57,039 --> 00:00:58,640
simon learned some networking and i

26
00:00:58,640 --> 00:01:00,239
still write really bad code

27
00:01:00,239 --> 00:01:02,399
here we are and we want to show you how

28
00:01:02,399 --> 00:01:03,680
to identify

29
00:01:03,680 --> 00:01:05,438
um some of these network related

30
00:01:05,438 --> 00:01:06,799
vulnerabilities

31
00:01:06,799 --> 00:01:09,200
how our initial attempt looked at

32
00:01:09,200 --> 00:01:11,520
attacking some of them

33
00:01:11,520 --> 00:01:14,240
what was the impact of the of of thereof

34
00:01:14,240 --> 00:01:16,080
and what are the challenges that

35
00:01:16,080 --> 00:01:18,080
we faced and that you may face and now

36
00:01:18,080 --> 00:01:19,759
the toolkit attempts to overcome some of

37
00:01:19,759 --> 00:01:21,200
those challenges

38
00:01:21,200 --> 00:01:24,320
so we went on some pentests and on

39
00:01:24,320 --> 00:01:25,920
reoccurring occasions we saw these

40
00:01:25,920 --> 00:01:26,560
vulnerable

41
00:01:26,560 --> 00:01:29,920
um drp and fhrp protocols being

42
00:01:29,920 --> 00:01:31,600
multicasted into user space

43
00:01:31,600 --> 00:01:34,640
which they shouldn't be so maybe

44
00:01:34,640 --> 00:01:37,040
our initial idea was to build this

45
00:01:37,040 --> 00:01:38,560
toolkit that would attack

46
00:01:38,560 --> 00:01:40,400
any network related protocol and that

47
00:01:40,400 --> 00:01:41,600
would be cool

48
00:01:41,600 --> 00:01:43,439
but for now we're focusing on these two

49
00:01:43,439 --> 00:01:45,040
things and we'll we'll go into them and

50
00:01:45,040 --> 00:01:46,320
explain them a little bit better and

51
00:01:46,320 --> 00:01:47,920
what the differences are

52
00:01:47,920 --> 00:01:51,439
etc etc in the drp stack we're going to

53
00:01:51,439 --> 00:01:54,399
focus on eigrp and ospf and then

54
00:01:54,399 --> 00:01:56,880
in the fhrp stack we're going to focus

55
00:01:56,880 --> 00:01:58,640
on

56
00:01:58,640 --> 00:02:02,000
hsrp so i realize that they sound the

57
00:02:02,000 --> 00:02:02,399
same

58
00:02:02,399 --> 00:02:04,240
and it's a bunch of acronyms coming your

59
00:02:04,240 --> 00:02:05,680
way but just try and

60
00:02:05,680 --> 00:02:07,280
keep that in the back of your mind you

61
00:02:07,280 --> 00:02:08,959
should be okay

62
00:02:08,959 --> 00:02:12,400
um why are we doing this no we saw this

63
00:02:12,400 --> 00:02:15,200
in multiple different environments not

64
00:02:15,200 --> 00:02:16,720
being bound to any

65
00:02:16,720 --> 00:02:20,319
sort of sort of same topology

66
00:02:20,319 --> 00:02:22,080
or industry or anything we were seeing

67
00:02:22,080 --> 00:02:23,760
them across the

68
00:02:23,760 --> 00:02:27,360
plethora of different customers

69
00:02:27,360 --> 00:02:29,280
also dynamic reading protocols are being

70
00:02:29,280 --> 00:02:31,519
are being used in kubernetes

71
00:02:31,519 --> 00:02:33,519
they use these things called cni's

72
00:02:33,519 --> 00:02:36,160
container network interfaces i think

73
00:02:36,160 --> 00:02:38,480
is the correct acronym and you can see

74
00:02:38,480 --> 00:02:39,920
on the slideshow it mentions

75
00:02:39,920 --> 00:02:43,840
calico and ramona calico is uses bgp

76
00:02:43,840 --> 00:02:47,280
and ramana uses ospf simon did

77
00:02:47,280 --> 00:02:50,319
most of the work on the

78
00:02:50,319 --> 00:02:52,239
kubernetes stuff i think i showed him

79
00:02:52,239 --> 00:02:55,040
sort of some bgp stuff and then he

80
00:02:55,040 --> 00:02:57,920
ran with it to get some phonage um some

81
00:02:57,920 --> 00:02:58,720
of that's

82
00:02:58,720 --> 00:03:00,959
been taken out of this presentation

83
00:03:00,959 --> 00:03:02,959
because it's just really more simon's

84
00:03:02,959 --> 00:03:05,040
work

85
00:03:05,040 --> 00:03:08,319
but before we get into drps and fhps

86
00:03:08,319 --> 00:03:11,840
let's explain what a static route is so

87
00:03:11,840 --> 00:03:13,360
for us to read traffic from the 10

88
00:03:13,360 --> 00:03:15,519
network to the 40 network we need to add

89
00:03:15,519 --> 00:03:17,519
a static group from

90
00:03:17,519 --> 00:03:20,560
b to c from c to b

91
00:03:20,560 --> 00:03:24,239
and b to a and that's obviously

92
00:03:24,239 --> 00:03:26,720
not a great process it's quite tedious

93
00:03:26,720 --> 00:03:28,080
and

94
00:03:28,080 --> 00:03:32,480
manual so now you move over to a network

95
00:03:32,480 --> 00:03:33,440
or a company with

96
00:03:33,440 --> 00:03:34,799
a hundred routers and a thousand

97
00:03:34,799 --> 00:03:36,879
networks imagine having to configure a

98
00:03:36,879 --> 00:03:38,480
static route for each

99
00:03:38,480 --> 00:03:40,159
um for each network to get to each other

100
00:03:40,159 --> 00:03:42,560
network and you need to take care of

101
00:03:42,560 --> 00:03:44,879
um redundancy as well you know so you

102
00:03:44,879 --> 00:03:46,000
and that's sort of what i tried

103
00:03:46,000 --> 00:03:48,400
to pick in the middle of that image you

104
00:03:48,400 --> 00:03:49,840
might configure

105
00:03:49,840 --> 00:03:52,319
um two routes between the same networks

106
00:03:52,319 --> 00:03:53,120
on different on

107
00:03:53,120 --> 00:03:55,280
different links so if the one link drops

108
00:03:55,280 --> 00:03:57,680
the your second static route with a less

109
00:03:57,680 --> 00:04:00,080
or higher priority will take over

110
00:04:00,080 --> 00:04:03,360
it's not very feasible so you know

111
00:04:03,360 --> 00:04:04,560
luckily we have these things called

112
00:04:04,560 --> 00:04:06,480
dynamic reading protocols

113
00:04:06,480 --> 00:04:08,480
like i said we're going to focus on osbf

114
00:04:08,480 --> 00:04:09,680
and eigrp

115
00:04:09,680 --> 00:04:11,200
so what you would do is you type onto

116
00:04:11,200 --> 00:04:12,720
that router and you configure the

117
00:04:12,720 --> 00:04:14,319
protocol with its parameters on each

118
00:04:14,319 --> 00:04:15,840
router and it would automatically share

119
00:04:15,840 --> 00:04:17,918
the routing and networking information

120
00:04:17,918 --> 00:04:20,320
and it would would automatically based

121
00:04:20,320 --> 00:04:24,000
on its own algorithm connect which is

122
00:04:24,880 --> 00:04:26,240
determined which is the best path

123
00:04:26,240 --> 00:04:27,520
between the networks and then if that

124
00:04:27,520 --> 00:04:28,720
link drops

125
00:04:28,720 --> 00:04:30,320
the redundant path will automatically

126
00:04:30,320 --> 00:04:32,800
kick in

127
00:04:33,199 --> 00:04:36,240
fhrps it's more of a higher high

128
00:04:36,240 --> 00:04:38,479
availability mechanism so

129
00:04:38,479 --> 00:04:42,080
you can see the user a by default uses

130
00:04:42,080 --> 00:04:44,240
as the user ace traffic traverses

131
00:04:44,240 --> 00:04:45,360
through that switch

132
00:04:45,360 --> 00:04:47,360
and then it goes through that active

133
00:04:47,360 --> 00:04:48,479
router so that

134
00:04:48,479 --> 00:04:51,199
active and standby router form part of

135
00:04:51,199 --> 00:04:54,960
sort of a logical group within

136
00:04:54,960 --> 00:04:58,080
hsrp or if or vrrp and there's a

137
00:04:58,080 --> 00:04:59,919
priority assigned to it

138
00:04:59,919 --> 00:05:03,600
um and then once the one fails over

139
00:05:03,600 --> 00:05:04,880
there's also a virtual mac address

140
00:05:04,880 --> 00:05:07,120
assigned to this group and a priority

141
00:05:07,120 --> 00:05:10,479
so if the active device were to fail

142
00:05:10,479 --> 00:05:12,320
then that virtual mac address would just

143
00:05:12,320 --> 00:05:14,080
switch to the other device

144
00:05:14,080 --> 00:05:15,680
and the user's traffic would get rooted

145
00:05:15,680 --> 00:05:18,560
without knowing

146
00:05:18,560 --> 00:05:21,440
anything that happened on the network

147
00:05:21,440 --> 00:05:24,000
okay so how do you look for these things

148
00:05:24,000 --> 00:05:26,560
in terms of eigrp and i think i

149
00:05:26,560 --> 00:05:28,160
mentioned multicast earlier so you can

150
00:05:28,160 --> 00:05:29,520
see in the packet capture at the top

151
00:05:29,520 --> 00:05:31,360
there it's going to a 224 address so

152
00:05:31,360 --> 00:05:32,479
many of

153
00:05:32,479 --> 00:05:34,240
these attacks are because things are

154
00:05:34,240 --> 00:05:36,400
getting multicasted

155
00:05:36,400 --> 00:05:39,680
into networks that that shouldn't um but

156
00:05:39,680 --> 00:05:43,360
to get into uh more eigrp specific stuff

157
00:05:43,360 --> 00:05:44,720
um in this packet the only thing we

158
00:05:44,720 --> 00:05:46,400
really need to look out for is the

159
00:05:46,400 --> 00:05:48,320
autonomous system number and that's

160
00:05:48,320 --> 00:05:50,240
all these parameters you need to take um

161
00:05:50,240 --> 00:05:51,440
take note of and you just need to

162
00:05:51,440 --> 00:05:53,520
configure it on your attacker

163
00:05:53,520 --> 00:05:56,880
or rogue router type of thing so

164
00:05:56,880 --> 00:05:58,800
in that instance of the igrp we didn't

165
00:05:58,800 --> 00:05:59,919
see that there was any

166
00:05:59,919 --> 00:06:03,039
authentication um present so it's pretty

167
00:06:03,039 --> 00:06:04,479
simple you take that

168
00:06:04,479 --> 00:06:06,800
info out of the peak app and you build

169
00:06:06,800 --> 00:06:08,319
your config and you

170
00:06:08,319 --> 00:06:10,960
attack or join the routing process but

171
00:06:10,960 --> 00:06:13,039
um it is possible to add authentication

172
00:06:13,039 --> 00:06:14,319
to these things

173
00:06:14,319 --> 00:06:15,759
so there's two variants is the clear

174
00:06:15,759 --> 00:06:18,800
text clear text auth which is

175
00:06:18,800 --> 00:06:20,479
not that great because you can just

176
00:06:20,479 --> 00:06:22,800
observe it as well

177
00:06:22,800 --> 00:06:24,800
and then there's a sort of hashed

178
00:06:24,800 --> 00:06:26,000
alternative

179
00:06:26,000 --> 00:06:28,000
um but it's not also it's not game over

180
00:06:28,000 --> 00:06:30,160
when descriptive applied

181
00:06:30,160 --> 00:06:33,440
you can get dash for certain algorithms

182
00:06:33,440 --> 00:06:35,600
using ethercap and then you can crack it

183
00:06:35,600 --> 00:06:38,960
with challenge wrapper and

184
00:06:38,960 --> 00:06:41,360
um often these things are configured

185
00:06:41,360 --> 00:06:43,280
with passwords

186
00:06:43,280 --> 00:06:46,000
um like password or key or cisco so if

187
00:06:46,000 --> 00:06:48,479
you go on to like how to configure

188
00:06:48,479 --> 00:06:51,680
cisco ospf authentication you know the

189
00:06:51,680 --> 00:06:53,280
guides are always using

190
00:06:53,280 --> 00:06:55,520
sort of weak passwords so you can try

191
00:06:55,520 --> 00:06:57,759
and guess it as well

192
00:06:57,759 --> 00:07:01,120
yeah so if we look at this igrp packet

193
00:07:01,120 --> 00:07:03,759
you can see there's some hashing applied

194
00:07:03,759 --> 00:07:05,120
to it

195
00:07:05,120 --> 00:07:06,479
there's no password or string or

196
00:07:06,479 --> 00:07:08,080
anything that we can observe there again

197
00:07:08,080 --> 00:07:09,759
we can pause this thing to

198
00:07:09,759 --> 00:07:12,560
eticap and we can try and crack dash to

199
00:07:12,560 --> 00:07:15,199
join the routing process

200
00:07:15,199 --> 00:07:17,759
if we look at a ospf packet is a little

201
00:07:17,759 --> 00:07:18,880
bit more to consider

202
00:07:18,880 --> 00:07:21,919
um as opposed to uijrp um we have to

203
00:07:21,919 --> 00:07:23,520
take note of that area id

204
00:07:23,520 --> 00:07:26,000
quad zero and then this is the the

205
00:07:26,000 --> 00:07:27,759
plaintext variant of auth that i spoke

206
00:07:27,759 --> 00:07:28,160
about

207
00:07:28,160 --> 00:07:30,720
um so these all but you know you can

208
00:07:30,720 --> 00:07:32,080
observe it in plain text so it's not

209
00:07:32,080 --> 00:07:33,440
really useful

210
00:07:33,440 --> 00:07:35,759
um and then we need to take care of or

211
00:07:35,759 --> 00:07:37,759
take note of the hello interval

212
00:07:37,759 --> 00:07:41,280
and the dead interval okay cool so

213
00:07:41,280 --> 00:07:44,240
moving over to the fhrp stack if we look

214
00:07:44,240 --> 00:07:46,160
at an hsrp packet which is a cisco

215
00:07:46,160 --> 00:07:48,560
proprietary protocol

216
00:07:48,560 --> 00:07:49,759
you need to make sure that you're

217
00:07:49,759 --> 00:07:51,680
looking at the active

218
00:07:51,680 --> 00:07:54,479
routers hello packet not the standby

219
00:07:54,479 --> 00:07:55,680
because you want to

220
00:07:55,680 --> 00:07:58,000
assign yourself a higher priority as the

221
00:07:58,000 --> 00:07:58,960
active

222
00:07:58,960 --> 00:08:00,960
if you're just higher than the standby

223
00:08:00,960 --> 00:08:01,919
device you know you're not going to

224
00:08:01,919 --> 00:08:02,800
become

225
00:08:02,800 --> 00:08:05,840
the active guy so um

226
00:08:05,840 --> 00:08:07,599
you know make sure you're looking at an

227
00:08:07,599 --> 00:08:09,120
active packet

228
00:08:09,120 --> 00:08:10,720
you need to take note of the hello and

229
00:08:10,720 --> 00:08:12,400
the whole time

230
00:08:12,400 --> 00:08:14,400
and those are sort of the default values

231
00:08:14,400 --> 00:08:16,720
um so you'll also see them as three and

232
00:08:16,720 --> 00:08:17,360
ten

233
00:08:17,360 --> 00:08:19,840
and then you can see on this router the

234
00:08:19,840 --> 00:08:22,080
priority is 150 so we just need to go

235
00:08:22,080 --> 00:08:25,360
up and we can become the active active

236
00:08:25,360 --> 00:08:26,560
device

237
00:08:26,560 --> 00:08:28,400
uh that logical grouping i was speaking

238
00:08:28,400 --> 00:08:30,000
of this is for group 10.

239
00:08:30,000 --> 00:08:31,919
you'll need to take note of that and

240
00:08:31,919 --> 00:08:33,200
then you can see here again there's a

241
00:08:33,200 --> 00:08:34,000
default

242
00:08:34,000 --> 00:08:37,519
plaintext auth applied not super useful

243
00:08:37,519 --> 00:08:40,159
and then a virtual ip address assigned

244
00:08:40,159 --> 00:08:41,519
to the group

245
00:08:41,519 --> 00:08:43,360
which you will you will effectively

246
00:08:43,360 --> 00:08:45,120
become that virtual ip address once you

247
00:08:45,120 --> 00:08:46,800
attack the protocol

248
00:08:46,800 --> 00:08:48,480
so how do these things creep into the

249
00:08:48,480 --> 00:08:51,360
network minimalist config is one way

250
00:08:51,360 --> 00:08:54,399
so if you look at this config extract

251
00:08:54,399 --> 00:08:57,680
you can see that that router would

252
00:08:57,680 --> 00:08:59,680
advertise ospf hello packets on all its

253
00:08:59,680 --> 00:09:00,399
interfaces

254
00:09:00,399 --> 00:09:01,920
based on that quad zero that you're

255
00:09:01,920 --> 00:09:03,760
seeing so

256
00:09:03,760 --> 00:09:05,120
you might see something like this which

257
00:09:05,120 --> 00:09:06,959
is a little bit better you know it's

258
00:09:06,959 --> 00:09:10,080
saying slash 24 slash 25 but

259
00:09:10,080 --> 00:09:11,519
that router may not have those

260
00:09:11,519 --> 00:09:14,160
interfaces that router may have

261
00:09:14,160 --> 00:09:16,560
like two slash 25s on that 10 network

262
00:09:16,560 --> 00:09:17,360
and then

263
00:09:17,360 --> 00:09:19,200
you might only want to speak ospf on the

264
00:09:19,200 --> 00:09:21,760
one interface within that slash

265
00:09:21,760 --> 00:09:24,959
24 but it's actually do slash 25s

266
00:09:24,959 --> 00:09:27,839
um yeah you have to be very specific so

267
00:09:27,839 --> 00:09:28,959
you could have had like

268
00:09:28,959 --> 00:09:30,800
you could have configured ospf on the

269
00:09:30,800 --> 00:09:32,399
interface or you could have said slash

270
00:09:32,399 --> 00:09:34,240
32 to make sure that it only goes out of

271
00:09:34,240 --> 00:09:34,880
the

272
00:09:34,880 --> 00:09:36,800
the one the one interface that you

273
00:09:36,800 --> 00:09:38,399
wanted to go on

274
00:09:38,399 --> 00:09:40,800
so these are the areas that that admins

275
00:09:40,800 --> 00:09:43,360
are making and that we can abuse

276
00:09:43,360 --> 00:09:46,399
again in the in the kubernetes world

277
00:09:46,399 --> 00:09:50,399
um you can see there this is a harmonic

278
00:09:50,399 --> 00:09:52,080
config in example of a ramana

279
00:09:52,080 --> 00:09:54,560
configuration and you can see there's an

280
00:09:54,560 --> 00:09:56,320
asterisk in the interface

281
00:09:56,320 --> 00:09:59,839
field so if you're a kubernetes admin

282
00:09:59,839 --> 00:10:01,279
you might be dealing with a bunch of

283
00:10:01,279 --> 00:10:02,959
different os's

284
00:10:02,959 --> 00:10:04,800
and we don't use f0 anymore we have

285
00:10:04,800 --> 00:10:06,160
these funny ens

286
00:10:06,160 --> 00:10:09,360
33 ens 123 numbers and

287
00:10:09,360 --> 00:10:11,120
you know it's different between those

288
00:10:11,120 --> 00:10:12,800
different between os's

289
00:10:12,800 --> 00:10:14,079
so you know it might be the easiest

290
00:10:14,079 --> 00:10:15,600
thing just use the art card to make sure

291
00:10:15,600 --> 00:10:17,279
that your ospf process

292
00:10:17,279 --> 00:10:19,920
comes up but again this minimalist

293
00:10:19,920 --> 00:10:21,040
config

294
00:10:21,040 --> 00:10:22,800
is an issue where you should really be

295
00:10:22,800 --> 00:10:24,079
strict with your config you know it's

296
00:10:24,079 --> 00:10:25,839
like configuring an acl you've got to be

297
00:10:25,839 --> 00:10:28,880
very specific okay so

298
00:10:28,880 --> 00:10:31,120
we have a bit of an understanding of of

299
00:10:31,120 --> 00:10:32,959
how these particles

300
00:10:32,959 --> 00:10:34,720
work and how some of the volumes

301
00:10:34,720 --> 00:10:36,399
introduced it's also important to know

302
00:10:36,399 --> 00:10:38,320
where they live within the network

303
00:10:38,320 --> 00:10:41,440
so if we consider ourselves connected to

304
00:10:41,440 --> 00:10:43,680
a switch

305
00:10:43,680 --> 00:10:45,760
you might you'll be likely to see an

306
00:10:45,760 --> 00:10:47,279
fhrp something like

307
00:10:47,279 --> 00:10:50,880
hsrp providing you with that default

308
00:10:50,880 --> 00:10:52,880
redundant default gateway we've seen in

309
00:10:52,880 --> 00:10:54,320
the previous slides

310
00:10:54,320 --> 00:10:58,480
um if you manage to pivot or move

311
00:10:58,480 --> 00:10:59,600
throughout the network and you find

312
00:10:59,600 --> 00:11:01,279
yourself connected to a land where a

313
00:11:01,279 --> 00:11:03,440
router or a firewall is connected

314
00:11:03,440 --> 00:11:07,040
um it's likely that you'll see a drp

315
00:11:07,040 --> 00:11:09,760
being multicasted into that into that

316
00:11:09,760 --> 00:11:10,800
network or vlan

317
00:11:10,800 --> 00:11:13,279
because that's what those devices speak

318
00:11:13,279 --> 00:11:15,200
written in firewalls often make use of

319
00:11:15,200 --> 00:11:15,920
vrp

320
00:11:15,920 --> 00:11:18,560
file high availability as well so two

321
00:11:18,560 --> 00:11:19,920
firewalls connected together

322
00:11:19,920 --> 00:11:23,200
they speak vrp between each other

323
00:11:23,200 --> 00:11:24,880
sometimes that can be configured

324
00:11:24,880 --> 00:11:26,959
incorrectly as well and we can take

325
00:11:26,959 --> 00:11:29,279
advantage of that

326
00:11:29,279 --> 00:11:32,160
lastly we mentioned kubernetes cni's

327
00:11:32,160 --> 00:11:34,240
make use of dynamic reading protocols

328
00:11:34,240 --> 00:11:36,000
so maybe if you end up in that router

329
00:11:36,000 --> 00:11:38,240
network and you

330
00:11:38,240 --> 00:11:40,320
tamper with traffic you may be able to

331
00:11:40,320 --> 00:11:42,320
affect routine within kubernetes

332
00:11:42,320 --> 00:11:45,040
or maybe you've landed in the kubernetes

333
00:11:45,040 --> 00:11:47,279
somewhere in kubernetes where you can

334
00:11:47,279 --> 00:11:48,959
affect one of these cni's you might be

335
00:11:48,959 --> 00:11:50,480
able to um

336
00:11:50,480 --> 00:11:51,920
impact routing in the traditional

337
00:11:51,920 --> 00:11:53,920
network as well okay so what's the

338
00:11:53,920 --> 00:11:55,200
impact of

339
00:11:55,200 --> 00:11:57,040
you know exploiting these

340
00:11:57,040 --> 00:11:59,279
vulnerabilities well consider yourself

341
00:11:59,279 --> 00:12:00,959
connected to a network

342
00:12:00,959 --> 00:12:03,760
as indicated on the slide um you know of

343
00:12:03,760 --> 00:12:04,959
some hosts on your network because you

344
00:12:04,959 --> 00:12:05,920
have an op table

345
00:12:05,920 --> 00:12:08,560
and you know about your default gateway

346
00:12:08,560 --> 00:12:09,120
probably

347
00:12:09,120 --> 00:12:11,839
as a result of dhcp but now it's not

348
00:12:11,839 --> 00:12:14,000
interfacing with either ospf or

349
00:12:14,000 --> 00:12:16,560
eigrp and you join the process and you

350
00:12:16,560 --> 00:12:18,160
learn of some new networks so now you

351
00:12:18,160 --> 00:12:19,519
learn of the finance network and the

352
00:12:19,519 --> 00:12:20,720
server network and you have some new

353
00:12:20,720 --> 00:12:21,440
targets

354
00:12:21,440 --> 00:12:23,360
so that's pretty cool you know you

355
00:12:23,360 --> 00:12:24,800
didn't have to go in map

356
00:12:24,800 --> 00:12:27,440
quad slash eight or slash 16 you you

357
00:12:27,440 --> 00:12:28,800
learned with these things in a quite

358
00:12:28,800 --> 00:12:30,079
stealthy manner

359
00:12:30,079 --> 00:12:31,920
um but we want to go a little bit

360
00:12:31,920 --> 00:12:33,360
further we want to see if we can

361
00:12:33,360 --> 00:12:36,000
build traffic flows so there's a finance

362
00:12:36,000 --> 00:12:38,399
user connecting to an erp server

363
00:12:38,399 --> 00:12:40,320
in the server network and from our

364
00:12:40,320 --> 00:12:41,920
attacker's perspective

365
00:12:41,920 --> 00:12:43,680
you know we we know what that network is

366
00:12:43,680 --> 00:12:45,600
so what we can do is we can

367
00:12:45,600 --> 00:12:48,160
inject a more specific route into the

368
00:12:48,160 --> 00:12:49,200
routing process

369
00:12:49,200 --> 00:12:50,560
and what will happen is that traffic

370
00:12:50,560 --> 00:12:53,120
will then be redirected towards us

371
00:12:53,120 --> 00:12:54,959
and you can imagine you know that

372
00:12:54,959 --> 00:12:56,560
redirecting erp

373
00:12:56,560 --> 00:12:58,079
traffic towards your attacker machine

374
00:12:58,079 --> 00:13:00,560
could have some devastating impacts

375
00:13:00,560 --> 00:13:02,639
for fhrps we mentioned this is logical

376
00:13:02,639 --> 00:13:04,480
group with a virtual

377
00:13:04,480 --> 00:13:07,279
virtual ip address and a virtual mac and

378
00:13:07,279 --> 00:13:09,200
there's a priority assigned and

379
00:13:09,200 --> 00:13:11,760
the device with highest priority is the

380
00:13:11,760 --> 00:13:12,480
active one and

381
00:13:12,480 --> 00:13:14,240
traffic is routed towards that device so

382
00:13:14,240 --> 00:13:16,000
from an attacker's perspective

383
00:13:16,000 --> 00:13:18,720
we give ourselves the higher priority

384
00:13:18,720 --> 00:13:19,839
traffic is

385
00:13:19,839 --> 00:13:22,240
directed towards us and we route that

386
00:13:22,240 --> 00:13:22,959
traffic

387
00:13:22,959 --> 00:13:24,639
upstream to the legitimate default

388
00:13:24,639 --> 00:13:26,079
gateway essentially

389
00:13:26,079 --> 00:13:27,920
establishing a person in the middle

390
00:13:27,920 --> 00:13:29,600
attack so

391
00:13:29,600 --> 00:13:32,079
for drps we need to get we need to get

392
00:13:32,079 --> 00:13:32,720
specific

393
00:13:32,720 --> 00:13:35,519
and what we mean by that is you need to

394
00:13:35,519 --> 00:13:37,200
try and inject a more specific route

395
00:13:37,200 --> 00:13:38,560
into the routine table for it to beat

396
00:13:38,560 --> 00:13:40,000
the routing table entry

397
00:13:40,000 --> 00:13:44,000
if you add a slash 24 route on your

398
00:13:44,000 --> 00:13:46,480
machine and the slash 25 you know the

399
00:13:46,480 --> 00:13:47,920
traffic is going to go towards the slash

400
00:13:47,920 --> 00:13:50,079
25 that's just how routine works

401
00:13:50,079 --> 00:13:51,760
there's more specific stuff like

402
00:13:51,760 --> 00:13:53,760
protocol protocol metrics

403
00:13:53,760 --> 00:13:56,160
or protocol specific metrics and

404
00:13:56,160 --> 00:13:57,360
something called the administrative

405
00:13:57,360 --> 00:13:58,240
distance

406
00:13:58,240 --> 00:14:00,399
but for now just just know that you need

407
00:14:00,399 --> 00:14:02,000
to try and be more specific with

408
00:14:02,000 --> 00:14:04,320
your your routine entries to be the

409
00:14:04,320 --> 00:14:06,079
rooting table

410
00:14:06,079 --> 00:14:07,760
um so how did we do this initially we

411
00:14:07,760 --> 00:14:09,279
were connected to a lan

412
00:14:09,279 --> 00:14:11,040
uh we opened up wireshark exactly like

413
00:14:11,040 --> 00:14:12,480
we showed and we saw some

414
00:14:12,480 --> 00:14:14,160
unauthenticated

415
00:14:14,160 --> 00:14:16,160
eigrp packets i think it was and we

416
00:14:16,160 --> 00:14:17,839
wanted to attack it so you know we did

417
00:14:17,839 --> 00:14:18,560
some research

418
00:14:18,560 --> 00:14:20,720
there's any tooling available um there

419
00:14:20,720 --> 00:14:21,680
was

420
00:14:21,680 --> 00:14:24,160
but it was easier for us to configure a

421
00:14:24,160 --> 00:14:25,120
virtual firewall

422
00:14:25,120 --> 00:14:26,560
and that's sort of the route that we

423
00:14:26,560 --> 00:14:28,880
took and i'll show you

424
00:14:28,880 --> 00:14:32,240
what that looked like um so on the

425
00:14:32,240 --> 00:14:33,839
left hand side there's the wireshark

426
00:14:33,839 --> 00:14:35,519
capture and we see some ospf hello

427
00:14:35,519 --> 00:14:36,399
packets

428
00:14:36,399 --> 00:14:37,920
so you should already get excited when

429
00:14:37,920 --> 00:14:39,920
you see that you know you shouldn't

430
00:14:39,920 --> 00:14:41,440
really see those things on on a user

431
00:14:41,440 --> 00:14:43,120
network regardless of whether this auth

432
00:14:43,120 --> 00:14:44,000
or not

433
00:14:44,000 --> 00:14:45,519
and then on the right hand side is our

434
00:14:45,519 --> 00:14:47,360
rogue attacker firewall

435
00:14:47,360 --> 00:14:48,399
and we're just going to match the

436
00:14:48,399 --> 00:14:49,839
parameters on the left configure the

437
00:14:49,839 --> 00:14:51,199
firewall and we should join the routing

438
00:14:51,199 --> 00:14:51,760
process

439
00:14:51,760 --> 00:14:54,320
so for spf there's a couple of things

440
00:14:54,320 --> 00:14:56,240
that we need to take note of

441
00:14:56,240 --> 00:14:58,079
look at the orth null so this is going

442
00:14:58,079 --> 00:15:00,240
to be an easy attack

443
00:15:00,240 --> 00:15:03,120
um we look at the area id quad zero

444
00:15:03,120 --> 00:15:04,160
that's important twice

445
00:15:04,160 --> 00:15:05,839
if we look at the allo and the dead

446
00:15:05,839 --> 00:15:08,560
interval 10 and 40.

447
00:15:08,560 --> 00:15:11,120
so with that knowledge we're going to

448
00:15:11,120 --> 00:15:13,600
map that into the fortigate

449
00:15:13,600 --> 00:15:14,639
so we're going to give ourselves a

450
00:15:14,639 --> 00:15:16,079
router id which is just the unique

451
00:15:16,079 --> 00:15:18,160
identifier within the process

452
00:15:18,160 --> 00:15:20,480
we're going to add the area which we

453
00:15:20,480 --> 00:15:23,760
know is squad 0 now

454
00:15:23,839 --> 00:15:25,440
and then we're going to say we want to

455
00:15:25,440 --> 00:15:27,440
speak ospf out of

456
00:15:27,440 --> 00:15:29,360
only one specific interface we'll get

457
00:15:29,360 --> 00:15:31,279
this ip out of the url bar

458
00:15:31,279 --> 00:15:33,759
the only interface of this firewall has

459
00:15:33,759 --> 00:15:34,399
and that's

460
00:15:34,399 --> 00:15:36,079
you know we are only sending allos out

461
00:15:36,079 --> 00:15:37,440
of that one interface

462
00:15:37,440 --> 00:15:39,120
and again on the 48 we need to add the

463
00:15:39,120 --> 00:15:41,759
interface give it a name

464
00:15:41,759 --> 00:15:43,600
specify the interface and over here

465
00:15:43,600 --> 00:15:45,040
we'll

466
00:15:45,040 --> 00:15:46,480
configure the hello and dead interval

467
00:15:46,480 --> 00:15:48,160
which we got from the backup capture as

468
00:15:48,160 --> 00:15:49,680
well

469
00:15:49,680 --> 00:15:52,480
so on the left hand side now you should

470
00:15:52,480 --> 00:15:55,680
see an ospf conversation happening

471
00:15:55,680 --> 00:15:59,279
it shouldn't take too long one

472
00:15:59,279 --> 00:16:01,759
two three there we go and we see some

473
00:16:01,759 --> 00:16:02,639
ospf

474
00:16:02,639 --> 00:16:04,240
stuff happening over there and in those

475
00:16:04,240 --> 00:16:06,160
lsu unless update packets

476
00:16:06,160 --> 00:16:07,519
is where the routing information is

477
00:16:07,519 --> 00:16:10,000
shared so on the right for the gate you

478
00:16:10,000 --> 00:16:11,199
can see

479
00:16:11,199 --> 00:16:14,240
it's not much roots over there once we

480
00:16:14,240 --> 00:16:16,079
refresh the routing table or routing

481
00:16:16,079 --> 00:16:17,680
monitor you should see that we've

482
00:16:17,680 --> 00:16:19,360
learned a bunch of new networks

483
00:16:19,360 --> 00:16:21,279
so that's pretty cool we haven't

484
00:16:21,279 --> 00:16:22,880
attacked anything really we just joined

485
00:16:22,880 --> 00:16:24,399
the process but now we have new targets

486
00:16:24,399 --> 00:16:25,839
to go often that could be useful from an

487
00:16:25,839 --> 00:16:26,880
attacker's perspective

488
00:16:26,880 --> 00:16:30,959
as well so what's the downside with this

489
00:16:30,959 --> 00:16:34,000
new well downside of this approach

490
00:16:34,000 --> 00:16:36,000
you need to have access to firmware like

491
00:16:36,000 --> 00:16:37,759
a fortigate or something that's able to

492
00:16:37,759 --> 00:16:39,440
speak these protocols

493
00:16:39,440 --> 00:16:41,040
um you need to have knowledge of the

494
00:16:41,040 --> 00:16:42,720
protocol so you need to know

495
00:16:42,720 --> 00:16:45,680
how ospf er grp or whatever works to

496
00:16:45,680 --> 00:16:46,959
attack it

497
00:16:46,959 --> 00:16:50,240
and so the old tools weren't we weren't

498
00:16:50,240 --> 00:16:52,079
successful using the old tools to act

499
00:16:52,079 --> 00:16:55,839
to to attack these protocols so

500
00:16:55,839 --> 00:16:59,120
what so um

501
00:16:59,120 --> 00:17:00,560
you know we sort of just started we

502
00:17:00,560 --> 00:17:02,240
started seeing a pattern

503
00:17:02,240 --> 00:17:03,680
and the pattern was you know all you

504
00:17:03,680 --> 00:17:05,599
have to do here is pause a b

505
00:17:05,599 --> 00:17:08,000
cap extract some stuff build a config

506
00:17:08,000 --> 00:17:10,000
template map it to a router and then

507
00:17:10,000 --> 00:17:12,880
boom profit so that's sort of how root

508
00:17:12,880 --> 00:17:14,160
option came about

509
00:17:14,160 --> 00:17:17,119
and how do we build this thing well we

510
00:17:17,119 --> 00:17:18,240
use python

511
00:17:18,240 --> 00:17:21,359
we leverage docker quite a bit and then

512
00:17:21,359 --> 00:17:22,559
probably the most prominently used

513
00:17:22,559 --> 00:17:24,319
docker container is something called fr

514
00:17:24,319 --> 00:17:25,199
routing

515
00:17:25,199 --> 00:17:29,120
it's an open source router similar to

516
00:17:29,120 --> 00:17:31,760
something like quaja or bird um but this

517
00:17:31,760 --> 00:17:33,039
one seemed quite nice and

518
00:17:33,039 --> 00:17:35,440
it suited our needs quite nicely and

519
00:17:35,440 --> 00:17:36,559
that's sort of the comp

520
00:17:36,559 --> 00:17:40,240
composition of root option henry topsy

521
00:17:40,240 --> 00:17:43,280
was built um using or

522
00:17:43,280 --> 00:17:45,520
using this sort of scan attack and

523
00:17:45,520 --> 00:17:46,320
inject

524
00:17:46,320 --> 00:17:48,880
methodology so you can scan for things

525
00:17:48,880 --> 00:17:50,559
so you don't have to open up wireshark

526
00:17:50,559 --> 00:17:51,120
you can

527
00:17:51,120 --> 00:17:54,640
just run scan and it will it'll do the

528
00:17:54,640 --> 00:17:56,320
do the scanning and detection of

529
00:17:56,320 --> 00:17:57,760
vulnerable

530
00:17:57,760 --> 00:18:00,799
packets for you and then the attack flag

531
00:18:00,799 --> 00:18:03,200
will join the routing process or

532
00:18:03,200 --> 00:18:04,720
and just do that sort of enumeration

533
00:18:04,720 --> 00:18:06,240
thing that we've showed you and then if

534
00:18:06,240 --> 00:18:07,520
you want to go one step further and you

535
00:18:07,520 --> 00:18:08,960
want to start injecting stuff you'll use

536
00:18:08,960 --> 00:18:10,640
the inject or redirect flag there's a

537
00:18:10,640 --> 00:18:11,919
couple of variants

538
00:18:11,919 --> 00:18:13,440
but there'll be some demos on that but

539
00:18:13,440 --> 00:18:15,039
this is sort of the methodology scan

540
00:18:15,039 --> 00:18:16,720
attack and then take it one step further

541
00:18:16,720 --> 00:18:17,200
so go

542
00:18:17,200 --> 00:18:20,960
slowly and just do it step by step

543
00:18:20,960 --> 00:18:24,000
until you get your opponent um

544
00:18:24,000 --> 00:18:27,120
so um learning new routes is cool but

545
00:18:27,120 --> 00:18:28,080
it's much cooler

546
00:18:28,080 --> 00:18:31,120
much cooler intercepting and redirecting

547
00:18:31,120 --> 00:18:33,760
traffic so

548
00:18:35,760 --> 00:18:38,240
so before we start with the demo we're

549
00:18:38,240 --> 00:18:40,160
just gonna orientate ourselves a little

550
00:18:40,160 --> 00:18:42,320
bit there's quite a bit going on

551
00:18:42,320 --> 00:18:45,440
on the top left we have our attacker

552
00:18:45,440 --> 00:18:46,799
machines routing table we're running a

553
00:18:46,799 --> 00:18:48,559
watch command over there

554
00:18:48,559 --> 00:18:50,000
and you can see there's not much not

555
00:18:50,000 --> 00:18:52,480
many reading table entries over there

556
00:18:52,480 --> 00:18:55,360
on the top right we have our attack

557
00:18:55,360 --> 00:18:56,000
machine again

558
00:18:56,000 --> 00:18:57,840
that's where we'll run our root opsy

559
00:18:57,840 --> 00:19:00,640
commands um so the top is attacker stuff

560
00:19:00,640 --> 00:19:03,679
in the bottom we have a retarget attack

561
00:19:03,679 --> 00:19:06,559
and which we can call the victim router

562
00:19:06,559 --> 00:19:08,799
and then at the bottom we have a victim

563
00:19:08,799 --> 00:19:12,080
doing some dns queries and

564
00:19:12,080 --> 00:19:14,480
generating some ftp traffic so the top

565
00:19:14,480 --> 00:19:16,080
is attacking stuff at the bottom is

566
00:19:16,080 --> 00:19:19,919
is victim stuff so let's get into it

567
00:19:19,919 --> 00:19:21,679
um yeah like i mentioned just the

568
00:19:21,679 --> 00:19:23,120
routing table

569
00:19:23,120 --> 00:19:25,120
um i'll hop over to the other panes and

570
00:19:25,120 --> 00:19:27,520
explain them a little bit more in depth

571
00:19:27,520 --> 00:19:30,400
um on the right hand side root opsy and

572
00:19:30,400 --> 00:19:31,360
you can see there we've

573
00:19:31,360 --> 00:19:33,679
specified the scan flag you can take

574
00:19:33,679 --> 00:19:35,360
note of the ip address put in the back

575
00:19:35,360 --> 00:19:36,080
of your mind

576
00:19:36,080 --> 00:19:39,919
170. um the root on the left has one

577
00:19:39,919 --> 00:19:41,840
has two ospf neighbors at this point in

578
00:19:41,840 --> 00:19:43,679
time and that's the ip address for the

579
00:19:43,679 --> 00:19:46,000
router it's 76.28

580
00:19:46,000 --> 00:19:48,799
after our attacks you'll see that

581
00:19:48,799 --> 00:19:50,240
there'll be three neighbors instead of

582
00:19:50,240 --> 00:19:51,120
two

583
00:19:51,120 --> 00:19:54,000
so nothing's happened yet just yet um

584
00:19:54,000 --> 00:19:55,600
you know there's a dna square i was

585
00:19:55,600 --> 00:19:57,200
speaking about

586
00:19:57,200 --> 00:20:00,320
and there's the ftp traffic we're going

587
00:20:00,320 --> 00:20:02,000
to open up wireshark

588
00:20:02,000 --> 00:20:03,520
and we're going to show you that you

589
00:20:03,520 --> 00:20:05,120
know there's no interception or

590
00:20:05,120 --> 00:20:06,400
redirection or anything like that

591
00:20:06,400 --> 00:20:08,559
happening at this point in time

592
00:20:08,559 --> 00:20:10,559
and we'll start off with a scan command

593
00:20:10,559 --> 00:20:11,760
and the scan command is just going to

594
00:20:11,760 --> 00:20:12,799
identify

595
00:20:12,799 --> 00:20:14,799
a vulnerability and build a config

596
00:20:14,799 --> 00:20:16,240
template but it's not going to map that

597
00:20:16,240 --> 00:20:17,760
template

598
00:20:17,760 --> 00:20:20,080
so once it identifies the bomb we'll

599
00:20:20,080 --> 00:20:21,520
have a look at the templates and just go

600
00:20:21,520 --> 00:20:22,960
through them

601
00:20:22,960 --> 00:20:27,360
so we're looking at the eigrp and ospf

602
00:20:27,360 --> 00:20:29,039
config

603
00:20:29,039 --> 00:20:31,840
eigrp one we just had to pause the

604
00:20:31,840 --> 00:20:33,840
autonomous system number number 100 like

605
00:20:33,840 --> 00:20:35,280
we saw earlier

606
00:20:35,280 --> 00:20:38,480
quite simple over here um you could if

607
00:20:38,480 --> 00:20:39,440
you wanted to

608
00:20:39,440 --> 00:20:41,200
you know go configure this on another

609
00:20:41,200 --> 00:20:42,400
route or something that you wanted to

610
00:20:42,400 --> 00:20:43,760
play with

611
00:20:43,760 --> 00:20:46,240
and you would join this process so let's

612
00:20:46,240 --> 00:20:46,960
look at

613
00:20:46,960 --> 00:20:49,200
ospf this one's a little bit more

614
00:20:49,200 --> 00:20:50,320
involved

615
00:20:50,320 --> 00:20:52,400
it has a this hello and dead interval

616
00:20:52,400 --> 00:20:53,600
that we spoke up

617
00:20:53,600 --> 00:20:56,559
as well and then the network statement

618
00:20:56,559 --> 00:20:58,240
is just our interface again

619
00:20:58,240 --> 00:21:00,240
saying only send out hellos on this one

620
00:21:00,240 --> 00:21:02,960
interface and we pause the area id

621
00:21:02,960 --> 00:21:05,919
out of the vulnerable ospf config as

622
00:21:05,919 --> 00:21:07,440
well

623
00:21:07,440 --> 00:21:09,440
but nothing's happened you know we we

624
00:21:09,440 --> 00:21:11,280
just identified the bomb but we want to

625
00:21:11,280 --> 00:21:12,400
attack stuff

626
00:21:12,400 --> 00:21:14,720
so we could um we could attack stuff and

627
00:21:14,720 --> 00:21:16,400
then you would just say attack but

628
00:21:16,400 --> 00:21:18,159
that's boring we've showed you

629
00:21:18,159 --> 00:21:21,200
that using the fortigate and we want to

630
00:21:21,200 --> 00:21:21,919
show you

631
00:21:21,919 --> 00:21:24,960
an inject and then redirect which is a

632
00:21:24,960 --> 00:21:27,280
sub command of attack if i can call it

633
00:21:27,280 --> 00:21:28,320
that

634
00:21:28,320 --> 00:21:31,120
and they are similar in the terms in the

635
00:21:31,120 --> 00:21:33,039
way the conflict templates are built

636
00:21:33,039 --> 00:21:36,799
um with the inject um flag traffic will

637
00:21:36,799 --> 00:21:37,600
be routed

638
00:21:37,600 --> 00:21:39,440
towards your default gateway with the

639
00:21:39,440 --> 00:21:41,600
redirect the traffic will stop

640
00:21:41,600 --> 00:21:43,200
on your endpoint which is useful maybe

641
00:21:43,200 --> 00:21:44,960
for a honey pot

642
00:21:44,960 --> 00:21:46,720
or if you just want to you know soak at

643
00:21:46,720 --> 00:21:48,320
the traffic elsewhere or do whatever you

644
00:21:48,320 --> 00:21:49,120
want

645
00:21:49,120 --> 00:21:50,799
it's just a slight different difference

646
00:21:50,799 --> 00:21:52,320
in those two

647
00:21:52,320 --> 00:21:53,840
you'll see some activity on the rest of

648
00:21:53,840 --> 00:21:56,799
the screen we'll go through that shortly

649
00:21:56,799 --> 00:21:59,679
but let's just first have a look um at

650
00:21:59,679 --> 00:22:01,039
the the conflict templates

651
00:22:01,039 --> 00:22:04,480
for for the inject and the redirect um

652
00:22:04,480 --> 00:22:06,080
what i'm sorry at the bottom left you

653
00:22:06,080 --> 00:22:08,000
can see the ospf process is going up and

654
00:22:08,000 --> 00:22:08,960
then we've

655
00:22:08,960 --> 00:22:12,240
learned some routes that dns query has

656
00:22:12,240 --> 00:22:14,720
now changed to 1.337

657
00:22:14,720 --> 00:22:18,240
and our ftp traffic went from three ops

658
00:22:18,240 --> 00:22:18,720
to four

659
00:22:18,720 --> 00:22:20,559
so what's happened what what did we

660
00:22:20,559 --> 00:22:23,200
create what you know what happened

661
00:22:23,200 --> 00:22:27,200
um so if we look at

662
00:22:27,200 --> 00:22:30,480
the conflict template of root opsy

663
00:22:30,480 --> 00:22:33,039
you can see these static roots at the

664
00:22:33,039 --> 00:22:33,919
top there

665
00:22:33,919 --> 00:22:35,520
going to the null interface and you

666
00:22:35,520 --> 00:22:37,919
might start to ask yourself why are we

667
00:22:37,919 --> 00:22:39,440
rooting things towards another interface

668
00:22:39,440 --> 00:22:41,440
surely we're going to drop that traffic

669
00:22:41,440 --> 00:22:43,360
and you can see there on our end in the

670
00:22:43,360 --> 00:22:45,440
linux kernel it's also showing you know

671
00:22:45,440 --> 00:22:46,480
it's getting dropped

672
00:22:46,480 --> 00:22:49,200
but we have a way to get around that in

673
00:22:49,200 --> 00:22:49,600
the

674
00:22:49,600 --> 00:22:52,640
in the ospf process we say redistribute

675
00:22:52,640 --> 00:22:54,159
and we can prove to you that it's really

676
00:22:54,159 --> 00:22:56,159
in within the rooting process so

677
00:22:56,159 --> 00:22:58,000
on the victim router you can see the

678
00:22:58,000 --> 00:23:01,039
quad 8 and that 164 address has been

679
00:23:01,039 --> 00:23:02,400
added to the routing process

680
00:23:02,400 --> 00:23:04,000
okay so what happens if the traffic is

681
00:23:04,000 --> 00:23:05,679
rooted towards us

682
00:23:05,679 --> 00:23:08,320
we make use of policy based routing

683
00:23:08,320 --> 00:23:10,159
those pbr maps to take

684
00:23:10,159 --> 00:23:12,400
care of the traffic we don't want to to

685
00:23:12,400 --> 00:23:14,000
drop it we want to

686
00:23:14,000 --> 00:23:16,799
route it so you can look at that policy

687
00:23:16,799 --> 00:23:18,400
based map and it will match the address

688
00:23:18,400 --> 00:23:20,080
that we specified in our flags and the

689
00:23:20,080 --> 00:23:20,640
inject

690
00:23:20,640 --> 00:23:22,880
and redirect flags and then they're just

691
00:23:22,880 --> 00:23:24,480
saying forward it on to the default

692
00:23:24,480 --> 00:23:26,720
gateway but for redirect

693
00:23:26,720 --> 00:23:28,880
there's a natural forcing the traffic to

694
00:23:28,880 --> 00:23:30,640
stop on your endpoint which may or may

695
00:23:30,640 --> 00:23:34,559
not be useful depending on your scenario

696
00:23:34,880 --> 00:23:36,159
you don't have to use our config

697
00:23:36,159 --> 00:23:38,720
templates you can use your own

698
00:23:38,720 --> 00:23:42,640
um let's log into that ftp again

699
00:23:42,640 --> 00:23:44,320
just to prove that it's really doing

700
00:23:44,320 --> 00:23:45,840
something list

701
00:23:45,840 --> 00:23:48,400
directory hop over to wireshark and

702
00:23:48,400 --> 00:23:49,840
you'll see that we've um

703
00:23:49,840 --> 00:23:52,559
you know redirected that ftp traffic

704
00:23:52,559 --> 00:23:53,440
which is

705
00:23:53,440 --> 00:23:56,400
uh pretty nifty

706
00:23:57,279 --> 00:24:00,720
okay so that was the redirect

707
00:24:00,720 --> 00:24:04,320
and uh inject flags

708
00:24:04,320 --> 00:24:06,640
um and i just want to reiterate what we

709
00:24:06,640 --> 00:24:08,080
did because there was quite a bit going

710
00:24:08,080 --> 00:24:08,960
on

711
00:24:08,960 --> 00:24:13,120
we identified vulnerable ospf and eigrp

712
00:24:13,120 --> 00:24:15,120
packets using the scan flag

713
00:24:15,120 --> 00:24:17,360
we opted out for the attack flag we went

714
00:24:17,360 --> 00:24:19,039
for the inject and redirect which

715
00:24:19,039 --> 00:24:21,600
implies attack it bought us config

716
00:24:21,600 --> 00:24:23,279
templates and it mapped it into a docker

717
00:24:23,279 --> 00:24:24,640
container

718
00:24:24,640 --> 00:24:27,520
and we were able to manipulate the

719
00:24:27,520 --> 00:24:28,320
traffic flow

720
00:24:28,320 --> 00:24:30,960
because we influenced the routing table

721
00:24:30,960 --> 00:24:32,799
of a victim router that

722
00:24:32,799 --> 00:24:34,640
didn't have authentication applied or it

723
00:24:34,640 --> 00:24:37,120
was maybe configured in a way that um it

724
00:24:37,120 --> 00:24:38,720
was sending out helipackers to somewhere

725
00:24:38,720 --> 00:24:40,559
it shouldn't have

726
00:24:40,559 --> 00:24:43,039
but um there's another attack included

727
00:24:43,039 --> 00:24:43,679
in the

728
00:24:43,679 --> 00:24:46,720
toolkit which is sort of sub-commands of

729
00:24:46,720 --> 00:24:47,279
rita

730
00:24:47,279 --> 00:24:50,320
of the redirect and inject flags

731
00:24:50,320 --> 00:24:51,760
which we're calling sort of the local

732
00:24:51,760 --> 00:24:53,840
attacks and we can

733
00:24:53,840 --> 00:24:57,200
manipulate traffic um coming inbound to

734
00:24:57,200 --> 00:24:58,880
your local subject not going out of your

735
00:24:58,880 --> 00:25:00,480
local subnet

736
00:25:00,480 --> 00:25:02,960
so if you're the attacker and you find

737
00:25:02,960 --> 00:25:04,559
yourself on a network where there's a

738
00:25:04,559 --> 00:25:05,360
server

739
00:25:05,360 --> 00:25:08,000
um you know the victim would traverse

740
00:25:08,000 --> 00:25:09,279
through the network and connect to the

741
00:25:09,279 --> 00:25:10,000
server

742
00:25:10,000 --> 00:25:13,120
we can say to the

743
00:25:13,120 --> 00:25:15,919
ospf or ergrp process that we have a

744
00:25:15,919 --> 00:25:17,919
better route to that server

745
00:25:17,919 --> 00:25:19,360
and then the traffic would come to us

746
00:25:19,360 --> 00:25:21,679
and then back to the server but this is

747
00:25:21,679 --> 00:25:22,240
only

748
00:25:22,240 --> 00:25:24,320
uh in the incoming direction that's not

749
00:25:24,320 --> 00:25:26,480
we're not we're not

750
00:25:26,480 --> 00:25:29,840
performing a a full person in the middle

751
00:25:29,840 --> 00:25:31,679
the the service traffic if the server

752
00:25:31,679 --> 00:25:32,640
initiates traffic

753
00:25:32,640 --> 00:25:33,919
to the internet or something it's not

754
00:25:33,919 --> 00:25:36,000
going to go through us first but we'll

755
00:25:36,000 --> 00:25:37,919
show you that it's still pretty useful

756
00:25:37,919 --> 00:25:40,960
um and i mentioned this that those blue

757
00:25:40,960 --> 00:25:42,159
arrows will essentially change

758
00:25:42,159 --> 00:25:44,159
the red ones if the victim connects to

759
00:25:44,159 --> 00:25:45,600
the server it will come to us first and

760
00:25:45,600 --> 00:25:47,039
then we'll forward it on to the server

761
00:25:47,039 --> 00:25:47,440
and so

762
00:25:47,440 --> 00:25:50,720
we'll respond either it wants to so for

763
00:25:50,720 --> 00:25:51,600
this attack

764
00:25:51,600 --> 00:25:54,720
we have two containers we have an inner

765
00:25:54,720 --> 00:25:56,000
and outer and the inner one

766
00:25:56,000 --> 00:25:58,880
is depicted as the peer router and the

767
00:25:58,880 --> 00:26:00,960
other one is depicted as root opsy

768
00:26:00,960 --> 00:26:04,000
so how this works is the peer reader is

769
00:26:04,000 --> 00:26:05,360
doing that

770
00:26:05,360 --> 00:26:07,679
that static route that i've showed you

771
00:26:07,679 --> 00:26:09,360
and the redistribution

772
00:26:09,360 --> 00:26:12,240
and then when so root ops is configured

773
00:26:12,240 --> 00:26:13,679
with let's say ospf

774
00:26:13,679 --> 00:26:15,600
and it's speaking ospf to the inside to

775
00:26:15,600 --> 00:26:17,279
that peer router and it's also speaking

776
00:26:17,279 --> 00:26:17,760
to the

777
00:26:17,760 --> 00:26:20,080
the normal the customer network or the

778
00:26:20,080 --> 00:26:21,440
victim network

779
00:26:21,440 --> 00:26:24,240
and then the peer route is injecting a

780
00:26:24,240 --> 00:26:25,520
root into the process

781
00:26:25,520 --> 00:26:27,120
and on the root opposite on the outer

782
00:26:27,120 --> 00:26:29,919
container what we do is we ignore

783
00:26:29,919 --> 00:26:31,840
that update it propagates through the

784
00:26:31,840 --> 00:26:33,520
rest of the network and when

785
00:26:33,520 --> 00:26:36,799
the traffic comes back towards root opsy

786
00:26:36,799 --> 00:26:38,400
because it's supposed to go to this

787
00:26:38,400 --> 00:26:40,559
inner peer um because we

788
00:26:40,559 --> 00:26:43,760
um ignored it we can process it in the

789
00:26:43,760 --> 00:26:45,360
way that we want to in that

790
00:26:45,360 --> 00:26:47,440
and that way we we do what we want and

791
00:26:47,440 --> 00:26:48,640
then we send it to the server and it

792
00:26:48,640 --> 00:26:50,240
doesn't go back to that peer router

793
00:26:50,240 --> 00:26:51,120
which it

794
00:26:51,120 --> 00:26:54,320
was advertised to go back to so

795
00:26:54,320 --> 00:26:57,600
i will show you how that looks as well

796
00:26:57,600 --> 00:27:00,880
um slight orientation again but

797
00:27:00,880 --> 00:27:02,240
hopefully a little bit familiar with the

798
00:27:02,240 --> 00:27:04,559
setup by now it's again

799
00:27:04,559 --> 00:27:06,799
top left is the watch on the rooting

800
00:27:06,799 --> 00:27:08,080
table come on

801
00:27:08,080 --> 00:27:10,799
top right is where we'll be running net

802
00:27:10,799 --> 00:27:12,720
grids to see if we can catch some ashes

803
00:27:12,720 --> 00:27:14,320
and then the bottom left we have the

804
00:27:14,320 --> 00:27:16,159
router in the bottom right

805
00:27:16,159 --> 00:27:17,600
we have a victim that's going to connect

806
00:27:17,600 --> 00:27:20,159
to a share so this victim

807
00:27:20,159 --> 00:27:22,000
is obviously on the the same network

808
00:27:22,000 --> 00:27:24,640
that we're on

809
00:27:25,679 --> 00:27:29,279
um okay so routing table net grids

810
00:27:29,279 --> 00:27:32,320
we'll run we'll run net grids we'll log

811
00:27:32,320 --> 00:27:33,120
into the smb

812
00:27:33,120 --> 00:27:35,440
share show you that there's nothing

813
00:27:35,440 --> 00:27:36,640
going on

814
00:27:36,640 --> 00:27:39,520
and one then we'll run our attack again

815
00:27:39,520 --> 00:27:40,799
and we'll do the same thing and we'll

816
00:27:40,799 --> 00:27:42,159
show you the difference

817
00:27:42,159 --> 00:27:45,760
so we connect to the smb share and we do

818
00:27:45,760 --> 00:27:47,440
like a directory listing or something

819
00:27:47,440 --> 00:27:48,240
just to

820
00:27:48,240 --> 00:27:53,840
generate some traffic we'll log in now

821
00:27:54,000 --> 00:27:56,799
let's do alice okay cool and you can see

822
00:27:56,799 --> 00:27:57,760
net credits hasn't

823
00:27:57,760 --> 00:27:59,679
caught on it hasn't done anything we

824
00:27:59,679 --> 00:28:02,000
haven't performed our attack as of yet

825
00:28:02,000 --> 00:28:05,919
so let's run our root opsy command

826
00:28:05,919 --> 00:28:07,919
and see if we can manipulate that

827
00:28:07,919 --> 00:28:09,760
traffic flow as well

828
00:28:09,760 --> 00:28:11,520
and you can see now it says inject local

829
00:28:11,520 --> 00:28:13,279
instead of inject

830
00:28:13,279 --> 00:28:15,760
and again this implies scan it implies

831
00:28:15,760 --> 00:28:16,399
attack

832
00:28:16,399 --> 00:28:18,559
and then the inject localization is the

833
00:28:18,559 --> 00:28:19,760
variant of the

834
00:28:19,760 --> 00:28:21,760
the inject attack so we've bought those

835
00:28:21,760 --> 00:28:23,200
config templates

836
00:28:23,200 --> 00:28:24,640
you can see them there and now it's

837
00:28:24,640 --> 00:28:26,159
holding two containers this inner

838
00:28:26,159 --> 00:28:26,799
container

839
00:28:26,799 --> 00:28:29,440
and this outer container and we'll have

840
00:28:29,440 --> 00:28:32,799
a look at their configurations as well

841
00:28:32,799 --> 00:28:35,919
uh we'll look at the inner one first

842
00:28:35,919 --> 00:28:40,399
you can see pierre fr and

843
00:28:40,399 --> 00:28:43,200
once that comes on you'll see that ip

844
00:28:43,200 --> 00:28:44,799
root that you're familiar with and then

845
00:28:44,799 --> 00:28:45,200
that

846
00:28:45,200 --> 00:28:47,440
redistributes static into the process

847
00:28:47,440 --> 00:28:48,720
again

848
00:28:48,720 --> 00:28:50,320
and that's pretty much all that the

849
00:28:50,320 --> 00:28:52,399
inner one does and then the outer one

850
00:28:52,399 --> 00:28:55,679
is gonna do a little bit more smarter

851
00:28:55,679 --> 00:28:56,880
work

852
00:28:56,880 --> 00:28:58,399
in the top left you can see that we've

853
00:28:58,399 --> 00:29:00,399
learned we've joined the ospf process

854
00:29:00,399 --> 00:29:02,159
and we've learned those routes

855
00:29:02,159 --> 00:29:06,159
so let's look at the outer containers

856
00:29:06,159 --> 00:29:07,679
configuration which is the template that

857
00:29:07,679 --> 00:29:09,440
was applied and you can see there's a

858
00:29:09,440 --> 00:29:11,039
little bit more going on here so from

859
00:29:11,039 --> 00:29:12,320
the top to the bottom

860
00:29:12,320 --> 00:29:13,440
you can see there's two network

861
00:29:13,440 --> 00:29:14,960
statements so the one is going to the

862
00:29:14,960 --> 00:29:16,320
normal network and the one is going to

863
00:29:16,320 --> 00:29:17,919
the container

864
00:29:17,919 --> 00:29:20,240
and then there are these access lists

865
00:29:20,240 --> 00:29:21,760
and the one is matching that address

866
00:29:21,760 --> 00:29:22,559
that we've

867
00:29:22,559 --> 00:29:25,440
um we've shared from the in the

868
00:29:25,440 --> 00:29:26,320
container

869
00:29:26,320 --> 00:29:28,559
and what we're going to do is we're

870
00:29:28,559 --> 00:29:30,640
going to apply some root maps which

871
00:29:30,640 --> 00:29:32,000
allows all the nice things from your

872
00:29:32,000 --> 00:29:34,080
rooting table and you can see

873
00:29:34,080 --> 00:29:37,600
access list 10 is matching root map

874
00:29:37,600 --> 00:29:40,399
entry one so we're going to say drop

875
00:29:40,399 --> 00:29:40,960
drop

876
00:29:40,960 --> 00:29:42,880
routine table entries for that address

877
00:29:42,880 --> 00:29:44,480
and then root map two

878
00:29:44,480 --> 00:29:46,000
is going to compare the rest of the

879
00:29:46,000 --> 00:29:47,520
traffic so that we don't drop all

880
00:29:47,520 --> 00:29:49,360
um all the traffic and then that final

881
00:29:49,360 --> 00:29:51,360
ip protocol ospf route map

882
00:29:51,360 --> 00:29:53,200
is just ensuring that that root map is

883
00:29:53,200 --> 00:29:55,200
actually applied to ospf so there's a

884
00:29:55,200 --> 00:29:56,240
little bit more

885
00:29:56,240 --> 00:29:59,840
coolness happening over here and we will

886
00:29:59,840 --> 00:30:00,399
then

887
00:30:00,399 --> 00:30:04,399
demonstrate how we've

888
00:30:04,399 --> 00:30:06,399
presented the middle or half person in

889
00:30:06,399 --> 00:30:07,679
the middle

890
00:30:07,679 --> 00:30:11,039
the incoming traffic from the

891
00:30:11,039 --> 00:30:13,520
from the victim so let's run net credits

892
00:30:13,520 --> 00:30:14,960
again now that this config

893
00:30:14,960 --> 00:30:18,000
has been applied and we can see the

894
00:30:18,000 --> 00:30:19,360
bottom left there's some ospf that

895
00:30:19,360 --> 00:30:19,840
happened

896
00:30:19,840 --> 00:30:23,039
we connect to the smb share

897
00:30:23,039 --> 00:30:25,760
and we wait for the authentication to go

898
00:30:25,760 --> 00:30:26,320
through

899
00:30:26,320 --> 00:30:29,760
and boom there's an ntlm v2 hash

900
00:30:29,760 --> 00:30:32,240
so that's pretty cool pretty nifty

901
00:30:32,240 --> 00:30:33,600
attack

902
00:30:33,600 --> 00:30:35,200
didn't really see those in any of the

903
00:30:35,200 --> 00:30:37,600
other tools so that was quite

904
00:30:37,600 --> 00:30:41,679
nice um yeah just to go over it again

905
00:30:41,679 --> 00:30:43,120
this is for

906
00:30:43,120 --> 00:30:45,279
incoming traffic on your local subnet

907
00:30:45,279 --> 00:30:47,440
only so it's quite a specific use case

908
00:30:47,440 --> 00:30:48,159
but

909
00:30:48,159 --> 00:30:52,320
nonetheless it's pretty cool um

910
00:30:53,679 --> 00:30:55,919
now let's go demo some of the fhrp

911
00:30:55,919 --> 00:30:57,279
related stuff so

912
00:30:57,279 --> 00:30:59,039
the high availability protocols that

913
00:30:59,039 --> 00:31:00,320
provide that

914
00:31:00,320 --> 00:31:02,399
redundant default gateway how do these

915
00:31:02,399 --> 00:31:04,880
attacks look um

916
00:31:04,880 --> 00:31:06,720
let's do the same little bit of

917
00:31:06,720 --> 00:31:09,039
orientation again

918
00:31:09,039 --> 00:31:12,880
um top left we have our

919
00:31:12,880 --> 00:31:16,320
attacker machine and then on the top

920
00:31:16,320 --> 00:31:17,600
on the right hand side we have the

921
00:31:17,600 --> 00:31:19,039
victim running a trace route and you can

922
00:31:19,039 --> 00:31:19,919
see this

923
00:31:19,919 --> 00:31:22,720
17 hops to quad eight and the first stop

924
00:31:22,720 --> 00:31:23,440
is going to

925
00:31:23,440 --> 00:31:26,399
10 20 31 and that will change after we

926
00:31:26,399 --> 00:31:27,440
run our attack

927
00:31:27,440 --> 00:31:29,360
and then in the bottom left is our

928
00:31:29,360 --> 00:31:30,960
vulnerable hsrp

929
00:31:30,960 --> 00:31:34,240
router okay so

930
00:31:34,240 --> 00:31:35,760
over there you can see the state is

931
00:31:35,760 --> 00:31:37,360
active on that router

932
00:31:37,360 --> 00:31:41,440
priority is 150 and the group is 10 and

933
00:31:41,440 --> 00:31:42,559
there's the virtual ip

934
00:31:42,559 --> 00:31:45,360
that we spoke about

935
00:31:45,679 --> 00:31:50,000
so nothing cool yet and we'll go over to

936
00:31:50,000 --> 00:31:50,640
the

937
00:31:50,640 --> 00:31:53,440
attacker machine and we'll run our root

938
00:31:53,440 --> 00:31:54,880
opsy command

939
00:31:54,880 --> 00:31:56,080
you'll see that it'll look slightly

940
00:31:56,080 --> 00:31:58,240
different to the drp related stuff so

941
00:31:58,240 --> 00:31:58,840
we're saying

942
00:31:58,840 --> 00:32:01,519
hsrb and there's a count flag now

943
00:32:01,519 --> 00:32:02,720
specifying

944
00:32:02,720 --> 00:32:05,200
how many hsrp hello package should we be

945
00:32:05,200 --> 00:32:06,320
sending

946
00:32:06,320 --> 00:32:08,000
and we run the attack which again

947
00:32:08,000 --> 00:32:09,600
implies scan

948
00:32:09,600 --> 00:32:12,720
and we'll find the vulnerable protocol

949
00:32:12,720 --> 00:32:14,240
parse the config and map it to your

950
00:32:14,240 --> 00:32:16,080
container same

951
00:32:16,080 --> 00:32:17,840
method the same methodology is applied

952
00:32:17,840 --> 00:32:19,679
here as well

953
00:32:19,679 --> 00:32:21,279
so we're just waiting for that to to

954
00:32:21,279 --> 00:32:23,679
kick in

955
00:32:24,720 --> 00:32:27,440
okay there we go you can see the state

956
00:32:27,440 --> 00:32:28,000
change over

957
00:32:28,000 --> 00:32:29,840
there something else has become the

958
00:32:29,840 --> 00:32:31,200
active hsrp

959
00:32:31,200 --> 00:32:36,159
device we'll have a look at that now

960
00:32:38,080 --> 00:32:40,799
okay another state change okay let's

961
00:32:40,799 --> 00:32:41,679
look at it again

962
00:32:41,679 --> 00:32:43,120
you can now see that this device has

963
00:32:43,120 --> 00:32:44,720
become standby

964
00:32:44,720 --> 00:32:47,679
um it's also the active device says 10

965
00:32:47,679 --> 00:32:48,960
20 30.3

966
00:32:48,960 --> 00:32:50,240
and on the traceroute you can see the

967
00:32:50,240 --> 00:32:51,679
first stop is now going to three and we

968
00:32:51,679 --> 00:32:52,799
have 18 ops

969
00:32:52,799 --> 00:32:55,679
so traffic will go from the victim to to

970
00:32:55,679 --> 00:32:57,200
us first and then we'll root that

971
00:32:57,200 --> 00:32:58,240
traffic onto the

972
00:32:58,240 --> 00:33:01,760
original 10 20 31 um

973
00:33:01,760 --> 00:33:05,039
gateway address so with these attacks

974
00:33:05,039 --> 00:33:06,720
there's obviously some case or

975
00:33:06,720 --> 00:33:08,880
maybe it's not so obvious but there's

976
00:33:08,880 --> 00:33:11,200
there's a case for denial of service

977
00:33:11,200 --> 00:33:15,519
so with the fhip related stuff you're

978
00:33:15,519 --> 00:33:17,279
uh personally in the middle an entire

979
00:33:17,279 --> 00:33:19,120
subnet on your laptop

980
00:33:19,120 --> 00:33:21,120
or machines network cards maybe you have

981
00:33:21,120 --> 00:33:22,880
100 megs or

982
00:33:22,880 --> 00:33:25,279
a gigabit network card and there's 10

983
00:33:25,279 --> 00:33:25,919
gigs

984
00:33:25,919 --> 00:33:28,559
of um traffic through traversing you

985
00:33:28,559 --> 00:33:30,000
know through that network so

986
00:33:30,000 --> 00:33:31,279
you've got to be a little bit careful

987
00:33:31,279 --> 00:33:33,039
when you're doing that um there are some

988
00:33:33,039 --> 00:33:34,320
safeguards into

989
00:33:34,320 --> 00:33:36,000
built into root ops you like the back

990
00:33:36,000 --> 00:33:38,159
account that type of thing um

991
00:33:38,159 --> 00:33:41,039
but it's just well maybe you know you

992
00:33:41,039 --> 00:33:42,880
haven't enabled ip forwarding

993
00:33:42,880 --> 00:33:44,720
and then you know you denial of service

994
00:33:44,720 --> 00:33:46,240
entire network but that

995
00:33:46,240 --> 00:33:48,799
root option does all of that for you but

996
00:33:48,799 --> 00:33:50,720
it's just something to consider when

997
00:33:50,720 --> 00:33:53,919
doing these attacks are with fhrps

998
00:33:53,919 --> 00:33:58,000
um regarding the um

999
00:33:58,000 --> 00:34:01,279
the drps i know we said we get specific

1000
00:34:01,279 --> 00:34:04,480
um defenders can get specific again can

1001
00:34:04,480 --> 00:34:06,480
also get specific um

1002
00:34:06,480 --> 00:34:09,918
so um for the drps or hsrps as well

1003
00:34:09,918 --> 00:34:10,480
really

1004
00:34:10,480 --> 00:34:12,960
apply that within authentication that we

1005
00:34:12,960 --> 00:34:13,520
mentioned

1006
00:34:13,520 --> 00:34:15,280
get more specific with your your network

1007
00:34:15,280 --> 00:34:16,879
statements and then

1008
00:34:16,879 --> 00:34:19,520
obviously you know you can collect cess

1009
00:34:19,520 --> 00:34:21,040
log on these things so

1010
00:34:21,040 --> 00:34:23,280
it's really not that hard to configure

1011
00:34:23,280 --> 00:34:25,199
these things correctly just be strict

1012
00:34:25,199 --> 00:34:28,320
and for drp stuff if there's a neighbor

1013
00:34:28,320 --> 00:34:29,679
state change you know you can click

1014
00:34:29,679 --> 00:34:31,918
syslog for that if you have a new active

1015
00:34:31,918 --> 00:34:33,839
device in your fhrp you know you can

1016
00:34:33,839 --> 00:34:35,599
send syslog to that

1017
00:34:35,599 --> 00:34:36,960
maybe include that in your sim

1018
00:34:36,960 --> 00:34:38,560
configuration to detect these type of

1019
00:34:38,560 --> 00:34:40,079
things

1020
00:34:40,079 --> 00:34:41,599
so we have something called the

1021
00:34:41,599 --> 00:34:43,679
playground um we realize that

1022
00:34:43,679 --> 00:34:45,199
everybody doesn't have networking kits

1023
00:34:45,199 --> 00:34:46,839
lying around to play around with these

1024
00:34:46,839 --> 00:34:48,560
things and

1025
00:34:48,560 --> 00:34:52,560
or familiar with network emulators

1026
00:34:52,560 --> 00:34:54,399
we use something called even g quite a

1027
00:34:54,399 --> 00:34:56,320
bit um you know if

1028
00:34:56,320 --> 00:34:57,440
if you're not familiar with that type of

1029
00:34:57,440 --> 00:34:59,520
thing you can simply head over to our

1030
00:34:59,520 --> 00:35:00,160
wiki

1031
00:35:00,160 --> 00:35:01,920
and run these xaml files with docker

1032
00:35:01,920 --> 00:35:05,040
compose and the drp

1033
00:35:05,040 --> 00:35:07,920
file will spin up a victim a router and

1034
00:35:07,920 --> 00:35:09,680
then the root option container and then

1035
00:35:09,680 --> 00:35:11,440
if you run the attacks

1036
00:35:11,440 --> 00:35:13,920
the traffic will traverse from the

1037
00:35:13,920 --> 00:35:15,440
original path to sort of

1038
00:35:15,440 --> 00:35:18,400
towards rhytopsy and then back out to

1039
00:35:18,400 --> 00:35:20,000
the normal network

1040
00:35:20,000 --> 00:35:23,040
and then for the fhrp1 there's two vrrp

1041
00:35:23,040 --> 00:35:24,480
containers that will be configured a

1042
00:35:24,480 --> 00:35:26,800
victim and the victim will

1043
00:35:26,800 --> 00:35:29,200
originally go through the vrop

1044
00:35:29,200 --> 00:35:30,560
containers and then through the

1045
00:35:30,560 --> 00:35:32,800
through the traditional network and then

1046
00:35:32,800 --> 00:35:34,160
after you run root top see the traffic

1047
00:35:34,160 --> 00:35:35,920
will first be redirected towards you and

1048
00:35:35,920 --> 00:35:37,200
then back up stream

1049
00:35:37,200 --> 00:35:38,960
so feel free to play around with those

1050
00:35:38,960 --> 00:35:40,880
ones

1051
00:35:40,880 --> 00:35:42,720
what's the takeaways of this talk

1052
00:35:42,720 --> 00:35:44,000
network protocol security

1053
00:35:44,000 --> 00:35:46,800
is still critical it's possible to

1054
00:35:46,800 --> 00:35:47,839
meaningfully show

1055
00:35:47,839 --> 00:35:50,480
impact using root opsy and as i just

1056
00:35:50,480 --> 00:35:51,200
mentioned

1057
00:35:51,200 --> 00:35:52,960
you know securing and detecting doesn't

1058
00:35:52,960 --> 00:35:56,000
look like a really hard thing to do

1059
00:35:56,000 --> 00:35:58,079
but it doesn't seem to be the case and

1060
00:35:58,079 --> 00:35:59,599
we've seen a lot of

1061
00:35:59,599 --> 00:36:02,720
vulnerable configurations in the past

1062
00:36:02,720 --> 00:36:05,119
thank you very much um i appreciate your

1063
00:36:05,119 --> 00:36:06,480
time um

1064
00:36:06,480 --> 00:36:08,960
if you want to have a go or play around

1065
00:36:08,960 --> 00:36:10,880
with the tool head over to sendspost's

1066
00:36:10,880 --> 00:36:12,240
github account

1067
00:36:12,240 --> 00:36:15,040
um you can probably reach out to me or

1068
00:36:15,040 --> 00:36:16,320
simon on twitter

1069
00:36:16,320 --> 00:36:19,760
or go onto the scenes post twitter

1070
00:36:19,760 --> 00:36:21,920
i'm sure you'll get hold of us if you

1071
00:36:21,920 --> 00:36:23,599
have any questions or you want to

1072
00:36:23,599 --> 00:36:27,839
maybe contribute to anything yeah thanks

