1
00:00:00,850 --> 00:00:05,310
[Applause]

2
00:00:01,970 --> 00:00:06,870
all right thanks everybody my name is

3
00:00:05,310 --> 00:00:09,690
Gerry Hargrove I'm gonna talk today

4
00:00:06,870 --> 00:00:11,190
about from zero to dev sack ops in 60

5
00:00:09,690 --> 00:00:12,629
minutes now obviously I don't have 60

6
00:00:11,190 --> 00:00:16,470
minutes to give this talk so I'm gonna

7
00:00:12,630 --> 00:00:18,480
expedite of it I'm a Solutions Architect

8
00:00:16,470 --> 00:00:20,520
at Rackspace I work with a lot of

9
00:00:18,480 --> 00:00:22,260
customers who are building out new

10
00:00:20,520 --> 00:00:25,439
infrastructure in the cloud in

11
00:00:22,260 --> 00:00:28,109
particular AWS you can see my my twitter

12
00:00:25,439 --> 00:00:30,359
handle is AWS geek my website is AWS

13
00:00:28,109 --> 00:00:33,719
geek calm so you can you can tell what

14
00:00:30,359 --> 00:00:35,100
kind of background I have so and I don't

15
00:00:33,719 --> 00:00:37,020
have a picture of me up here you'll see

16
00:00:35,100 --> 00:00:40,559
a picture of me in just a few minutes

17
00:00:37,020 --> 00:00:44,239
I'll put one up there for reference but

18
00:00:40,559 --> 00:00:46,620
today what I'm going to talk about is

19
00:00:44,239 --> 00:00:48,899
dev sec ops and getting there very

20
00:00:46,620 --> 00:00:51,030
quickly so my background is as a

21
00:00:48,899 --> 00:00:53,489
developer so I was happy to see that

22
00:00:51,030 --> 00:00:55,020
there were probably about 50% of people

23
00:00:53,489 --> 00:00:56,610
in here who raised their hand when the

24
00:00:55,020 --> 00:00:59,039
question was raised previously who's a

25
00:00:56,610 --> 00:01:01,170
developer then I also saw that when the

26
00:00:59,039 --> 00:01:02,789
break come about half the people in the

27
00:01:01,170 --> 00:01:05,159
room just left their laptop sitting on

28
00:01:02,789 --> 00:01:06,780
the on their their desk and walked away

29
00:01:05,159 --> 00:01:08,610
and the other half packed them up and

30
00:01:06,780 --> 00:01:10,530
secured them so I'm not sure which half

31
00:01:08,610 --> 00:01:11,850
did what but I'm assuming it was us

32
00:01:10,530 --> 00:01:14,670
developers who just left our stuff

33
00:01:11,850 --> 00:01:16,949
sitting out so I'm gonna talk about I

34
00:01:14,670 --> 00:01:18,479
have a particular perspective I'm

35
00:01:16,950 --> 00:01:19,770
looking at today I'm going to go a

36
00:01:18,479 --> 00:01:22,229
little bit deeper than some of the

37
00:01:19,770 --> 00:01:24,119
previous talks so I'm gonna talk less

38
00:01:22,229 --> 00:01:26,250
about the the why and the what and the

39
00:01:24,119 --> 00:01:28,890
who and the wind although I am going to

40
00:01:26,250 --> 00:01:31,229
cover those briefly and more about how

41
00:01:28,890 --> 00:01:34,939
so a very practical or pragmatic

42
00:01:31,229 --> 00:01:39,270
approach to devstack ops in particular

43
00:01:34,939 --> 00:01:40,408
for those of you who are working in the

44
00:01:39,270 --> 00:01:44,220
cloud this is based on my experience

45
00:01:40,409 --> 00:01:46,740
that I've had with AWS customers as well

46
00:01:44,220 --> 00:01:48,270
as a juror and GCP so before we get

47
00:01:46,740 --> 00:01:51,119
started though quick show of hands how

48
00:01:48,270 --> 00:01:55,548
many of you are building or securing

49
00:01:51,119 --> 00:01:55,549
applications in the public cloud

50
00:01:55,659 --> 00:02:00,719
so we've got about 50% of you how many

51
00:01:58,659 --> 00:02:04,030
of you are doing this in a private cloud

52
00:02:00,719 --> 00:02:07,360
and how many of you on-premise no cloud

53
00:02:04,030 --> 00:02:09,038
at all so we've got a few so mostly

54
00:02:07,360 --> 00:02:11,830
public private cloud so most of my

55
00:02:09,038 --> 00:02:13,540
discussion today obviously AWS geek and

56
00:02:11,830 --> 00:02:18,010
OBS geek got Tom I'm going to be talking

57
00:02:13,540 --> 00:02:20,380
about AWS and practical application of

58
00:02:18,010 --> 00:02:24,340
that but as I mentioned I'm not going to

59
00:02:20,380 --> 00:02:27,430
leave out Azure or GCP I'll talk about

60
00:02:24,340 --> 00:02:30,849
them too and give you some equivalent

61
00:02:27,430 --> 00:02:33,989
examples on on all of those platforms so

62
00:02:30,849 --> 00:02:36,399
let's go ahead and get started so the

63
00:02:33,989 --> 00:02:38,049
question about when comes up about when

64
00:02:36,400 --> 00:02:39,459
should we be doing this obviously we

65
00:02:38,049 --> 00:02:42,220
should be doing this yesterday we should

66
00:02:39,459 --> 00:02:45,970
all be worried about security and dev

67
00:02:42,220 --> 00:02:47,769
sec ops in general before today but I

68
00:02:45,970 --> 00:02:49,299
wanted to give you an example here how

69
00:02:47,769 --> 00:02:53,019
many of you are familiar with this

70
00:02:49,299 --> 00:02:55,959
company code spaces anybody anybody

71
00:02:53,019 --> 00:02:58,780
actually work for code spaces will work

72
00:02:55,959 --> 00:03:00,760
for them code spaces was a cloud-based

73
00:02:58,780 --> 00:03:02,769
company a few years ago they opened

74
00:03:00,760 --> 00:03:05,709
their doors they provided services for

75
00:03:02,769 --> 00:03:06,910
companies you know hosting code and

76
00:03:05,709 --> 00:03:10,900
project management

77
00:03:06,910 --> 00:03:15,370
one day code spaces customers woke up to

78
00:03:10,900 --> 00:03:17,380
this message and it was code spaces is

79
00:03:15,370 --> 00:03:19,440
down and you can't you probably can't

80
00:03:17,380 --> 00:03:21,700
see all the detail in that message but

81
00:03:19,440 --> 00:03:24,730
effectively what the message was is

82
00:03:21,700 --> 00:03:28,089
someone gained access to our account

83
00:03:24,730 --> 00:03:31,358
credentials got into our AWS account and

84
00:03:28,090 --> 00:03:34,150
started deleting our customers data and

85
00:03:31,359 --> 00:03:39,069
then getting rid of s3 buckets and

86
00:03:34,150 --> 00:03:40,840
destroying our databases and before code

87
00:03:39,069 --> 00:03:42,730
spaces could react they obviously they

88
00:03:40,840 --> 00:03:45,239
didn't have some best practices in place

89
00:03:42,730 --> 00:03:49,060
to protect this before they could react

90
00:03:45,239 --> 00:03:51,880
code spaces put this next sign up so

91
00:03:49,060 --> 00:03:54,099
they were unable to recover from this

92
00:03:51,880 --> 00:03:56,440
they didn't have multiple backup they

93
00:03:54,099 --> 00:03:58,119
didn't have backups and different with

94
00:03:56,440 --> 00:04:00,190
different vendors in different locations

95
00:03:58,120 --> 00:04:01,930
they were unable to recover from this

96
00:04:00,190 --> 00:04:04,150
they were unable to recover technically

97
00:04:01,930 --> 00:04:06,790
because they lost data and they also

98
00:04:04,150 --> 00:04:08,830
lost the trust of their customers and so

99
00:04:06,790 --> 00:04:10,720
my point of this is

100
00:04:08,830 --> 00:04:12,700
coming from a development background or

101
00:04:10,720 --> 00:04:14,380
a developer's background I often think

102
00:04:12,700 --> 00:04:15,760
well we're just being paranoid but just

103
00:04:14,380 --> 00:04:17,050
because you're being paranoid doesn't

104
00:04:15,760 --> 00:04:19,420
mean there's actually not somebody

105
00:04:17,050 --> 00:04:21,010
they're actually coming after you so

106
00:04:19,420 --> 00:04:26,310
it's good to look over your shoulder if

107
00:04:21,010 --> 00:04:26,310
those if you are familiar with AWS and

108
00:04:26,610 --> 00:04:35,680
AWS and ns3 you've probably seen some of

109
00:04:29,770 --> 00:04:36,940
these next it's a little bit of a delay

110
00:04:35,680 --> 00:04:40,410
here actually this has got a lot of

111
00:04:36,940 --> 00:04:40,410
graphics in it so maybe that's the

112
00:04:43,350 --> 00:04:50,880
okay so if you're familiar with AWS

113
00:04:47,570 --> 00:04:52,230
you'll you've probably seen or come

114
00:04:50,880 --> 00:04:55,830
across some of these new dark news

115
00:04:52,230 --> 00:05:00,270
articles recently about AWS users and s3

116
00:04:55,830 --> 00:05:04,229
buckets and leaving s3 buckets publicly

117
00:05:00,270 --> 00:05:06,630
open and available so either AWS users

118
00:05:04,230 --> 00:05:08,340
have created public buckets that they're

119
00:05:06,630 --> 00:05:10,530
using for websites which is perfectly

120
00:05:08,340 --> 00:05:12,900
acceptable but then inadvertently stored

121
00:05:10,530 --> 00:05:16,830
sensitive information in them or they

122
00:05:12,900 --> 00:05:20,580
have a private bucket that they're using

123
00:05:16,830 --> 00:05:22,440
and storing sensitive information in and

124
00:05:20,580 --> 00:05:25,109
inadvertently someone makes it public

125
00:05:22,440 --> 00:05:29,340
and so we see these stories quite often

126
00:05:25,110 --> 00:05:31,050
actually just in the last week that last

127
00:05:29,340 --> 00:05:33,810
one with FedEx was just a few days

128
00:05:31,050 --> 00:05:36,290
before I came here and so these these

129
00:05:33,810 --> 00:05:39,090
types of incidents and breaches are

130
00:05:36,290 --> 00:05:40,830
actively going on and so the next

131
00:05:39,090 --> 00:05:42,570
question comes up is why well some of

132
00:05:40,830 --> 00:05:45,289
this goes back to the discussions we

133
00:05:42,570 --> 00:05:48,690
were having this morning about increased

134
00:05:45,290 --> 00:05:51,480
security exposure through the evolution

135
00:05:48,690 --> 00:05:54,000
of our software and best practices and

136
00:05:51,480 --> 00:05:56,430
for many of you who have been around for

137
00:05:54,000 --> 00:05:59,130
some time you and it's been mentioned

138
00:05:56,430 --> 00:06:01,140
this morning that many of our systems

139
00:05:59,130 --> 00:06:03,780
have evolved whether it's architecture

140
00:06:01,140 --> 00:06:10,140
moving from monolithic systems to

141
00:06:03,780 --> 00:06:12,630
service-oriented interior architectures

142
00:06:10,140 --> 00:06:14,969
to microarchitectures or whether it's

143
00:06:12,630 --> 00:06:18,210
actual systems going from bare metal

144
00:06:14,970 --> 00:06:22,620
systems in our back room to VMs to

145
00:06:18,210 --> 00:06:26,549
containers to functions and our

146
00:06:22,620 --> 00:06:30,450
methodologies Waterfall agile C ICD all

147
00:06:26,550 --> 00:06:32,550
of those have allowed us to progress and

148
00:06:30,450 --> 00:06:35,010
deliver software to our customers much

149
00:06:32,550 --> 00:06:37,170
more quickly than we were able to before

150
00:06:35,010 --> 00:06:39,659
say 20 years ago back when I started

151
00:06:37,170 --> 00:06:41,970
writing software we burnt software to a

152
00:06:39,660 --> 00:06:43,830
CD we sent it off to a manufacturer they

153
00:06:41,970 --> 00:06:45,870
mass reproduced it we got someone to

154
00:06:43,830 --> 00:06:47,760
print the manuals we put it all into a

155
00:06:45,870 --> 00:06:49,170
box we shrink-wrapped it we put it onto

156
00:06:47,760 --> 00:06:52,409
a truck and then shipped it out to a

157
00:06:49,170 --> 00:06:54,660
store this took six months nine months

158
00:06:52,410 --> 00:06:56,800
12 months so there was really no rush

159
00:06:54,660 --> 00:06:59,500
for security to get involved in too

160
00:06:56,800 --> 00:07:00,849
we can actually turn software around in

161
00:06:59,500 --> 00:07:02,800
a matter of minutes and so what's

162
00:07:00,849 --> 00:07:05,378
mentioned earlier with that type of

163
00:07:02,800 --> 00:07:10,900
speed some level of automation needs to

164
00:07:05,379 --> 00:07:13,270
be in place and I spend a whole lot of

165
00:07:10,900 --> 00:07:15,940
time on this but you know any time we

166
00:07:13,270 --> 00:07:18,758
talk about well DevOps in general we

167
00:07:15,940 --> 00:07:21,400
talk about people process and tools and

168
00:07:18,759 --> 00:07:24,520
the same applies to dev Sec ups the same

169
00:07:21,400 --> 00:07:25,870
fundamental changes need need to happen

170
00:07:24,520 --> 00:07:29,500
as a matter of fact I think if you're

171
00:07:25,870 --> 00:07:31,569
not already implementing or have some

172
00:07:29,500 --> 00:07:33,280
form of DevOps culture in place that it

173
00:07:31,569 --> 00:07:35,139
can be very difficult to automatically

174
00:07:33,280 --> 00:07:36,878
move to dev setups so what I'm going to

175
00:07:35,139 --> 00:07:39,039
talk about today is mainly on the

176
00:07:36,879 --> 00:07:43,180
right-hand side of that screen so mainly

177
00:07:39,039 --> 00:07:45,159
automation and tools we've we've come to

178
00:07:43,180 --> 00:07:48,129
a point now in software especially when

179
00:07:45,159 --> 00:07:49,750
we look micro-services architectures

180
00:07:48,129 --> 00:07:52,120
container based architectures the

181
00:07:49,750 --> 00:07:54,819
complexity of these systems are such now

182
00:07:52,120 --> 00:07:58,750
that we can no longer do this without

183
00:07:54,819 --> 00:08:00,039
automation and and so we look at what

184
00:07:58,750 --> 00:08:01,840
types of things to automate and I'll

185
00:08:00,039 --> 00:08:05,710
just iterate over a couple of these real

186
00:08:01,840 --> 00:08:07,419
quickly auditing of systems what kind of

187
00:08:05,710 --> 00:08:10,120
systems that we have out there what's in

188
00:08:07,419 --> 00:08:12,159
place what our response is going to be

189
00:08:10,120 --> 00:08:14,979
so automating responses in particular in

190
00:08:12,159 --> 00:08:17,500
the cloud we mentioned earlier about

191
00:08:14,979 --> 00:08:19,330
containers how many systems are

192
00:08:17,500 --> 00:08:21,969
ephemeral now I mean just in the cloud

193
00:08:19,330 --> 00:08:23,318
in general our systems are ephemeral and

194
00:08:21,969 --> 00:08:25,180
so we need to be prepared to deal with

195
00:08:23,319 --> 00:08:28,659
them in a way that doesn't involve

196
00:08:25,180 --> 00:08:30,909
actual manual intervention analysis of

197
00:08:28,659 --> 00:08:32,468
systems so looking at forensics and log

198
00:08:30,909 --> 00:08:35,049
diving these are all candidates for

199
00:08:32,469 --> 00:08:37,300
automation remediation as well as

200
00:08:35,049 --> 00:08:40,328
reporting now I'm going to talk a little

201
00:08:37,299 --> 00:08:44,699
bit about sort of response and isolation

202
00:08:40,328 --> 00:08:48,969
and things like isolation and tagging

203
00:08:44,699 --> 00:08:50,529
more post activity than pre activity

204
00:08:48,970 --> 00:08:52,750
there are a lot of different ways to

205
00:08:50,529 --> 00:08:55,209
approach this in the cloud I'm going to

206
00:08:52,750 --> 00:08:56,860
focus mainly on things that we can do

207
00:08:55,209 --> 00:08:58,930
after the fact detecting that something

208
00:08:56,860 --> 00:09:01,240
has occurred there are ways and methods

209
00:08:58,930 --> 00:09:03,040
of preventing these activities from

210
00:09:01,240 --> 00:09:04,480
occurring that's a completely different

211
00:09:03,040 --> 00:09:07,089
discussion about identity and access

212
00:09:04,480 --> 00:09:07,760
management roles and responsibilities

213
00:09:07,089 --> 00:09:10,670
user

214
00:09:07,760 --> 00:09:13,189
and rolls on on your cloud provider but

215
00:09:10,670 --> 00:09:15,979
where you guys start ultimately depends

216
00:09:13,190 --> 00:09:18,020
on you and and your system in your team

217
00:09:15,980 --> 00:09:20,660
what your budget is we've talked these

218
00:09:18,020 --> 00:09:23,090
were talked about earlier today what

219
00:09:20,660 --> 00:09:27,740
your schedule is what skill set your

220
00:09:23,090 --> 00:09:30,260
team has what risk-averse you are what

221
00:09:27,740 --> 00:09:32,750
type of risk you're able to take on and

222
00:09:30,260 --> 00:09:36,530
your priorities and then ultimately the

223
00:09:32,750 --> 00:09:38,750
culture of your your system the next

224
00:09:36,530 --> 00:09:43,040
thing I want to cover real quickly is

225
00:09:38,750 --> 00:09:45,920
who but before I do that I usually never

226
00:09:43,040 --> 00:09:49,520
do this but I want to call something out

227
00:09:45,920 --> 00:09:51,860
that today this week is actually my 30th

228
00:09:49,520 --> 00:09:53,000
anniversary and my wife who never comes

229
00:09:51,860 --> 00:09:55,970
to these conferences is sitting right

230
00:09:53,000 --> 00:10:00,260
back over there in the maroon dress we

231
00:09:55,970 --> 00:10:01,550
were here just just a few seconds ago I

232
00:10:00,260 --> 00:10:02,750
leaned over to her and said you know

233
00:10:01,550 --> 00:10:03,979
we've been married 30 years I've

234
00:10:02,750 --> 00:10:05,780
embarrassed you a lot is there anything

235
00:10:03,980 --> 00:10:09,080
that I couldn't do that you wouldn't be

236
00:10:05,780 --> 00:10:11,240
about she says no I've seen it all so we

237
00:10:09,080 --> 00:10:14,750
were actually here 30 years ago in

238
00:10:11,240 --> 00:10:17,000
Singapore and now we're here we both

239
00:10:14,750 --> 00:10:21,530
look exactly like that too we have not

240
00:10:17,000 --> 00:10:23,600
changed a bit so I'm sorry dear I I

241
00:10:21,530 --> 00:10:25,250
really wanted to do this in public too

242
00:10:23,600 --> 00:10:28,970
because you know that if no one sees me

243
00:10:25,250 --> 00:10:32,690
after today what happened so the the

244
00:10:28,970 --> 00:10:35,180
hopefully about my wife and I but that

245
00:10:32,690 --> 00:10:39,620
you know the team whether you're you

246
00:10:35,180 --> 00:10:41,540
have a veritable army of roles or actual

247
00:10:39,620 --> 00:10:45,130
people associated with security on your

248
00:10:41,540 --> 00:10:49,010
team or you're an army of one ultimately

249
00:10:45,130 --> 00:10:51,050
it all boils down to your business what

250
00:10:49,010 --> 00:10:53,810
we do as developers and what we do as

251
00:10:51,050 --> 00:10:56,089
security experts affects everybody in

252
00:10:53,810 --> 00:10:58,670
our business and in our company like

253
00:10:56,090 --> 00:11:00,050
with the code spaces example yes there

254
00:10:58,670 --> 00:11:01,640
were some security issues that are

255
00:11:00,050 --> 00:11:03,260
probably some development issues but

256
00:11:01,640 --> 00:11:05,660
really it took the company down it

257
00:11:03,260 --> 00:11:09,290
wasn't just it wasn't just the

258
00:11:05,660 --> 00:11:11,469
developers and the the security team

259
00:11:09,290 --> 00:11:14,540
that was affected

260
00:11:11,470 --> 00:11:17,300
so I have a couple of sort of stopping

261
00:11:14,540 --> 00:11:19,040
points along the way today that where I

262
00:11:17,300 --> 00:11:20,810
put up questions it's really matter you

263
00:11:19,040 --> 00:11:23,300
know for me to catch my breath and if

264
00:11:20,810 --> 00:11:24,589
you have any questions while we're going

265
00:11:23,300 --> 00:11:26,269
we could probably take time to answer a

266
00:11:24,589 --> 00:11:27,440
question or two if you don't have any

267
00:11:26,269 --> 00:11:33,829
that's fine I'll just roll right through

268
00:11:27,440 --> 00:11:34,880
it no questions so I'll go ahead and

269
00:11:33,829 --> 00:11:36,620
keep on going

270
00:11:34,880 --> 00:11:38,360
again it's an opportunity for me to

271
00:11:36,620 --> 00:11:41,360
catch my breath grab a drink and if you

272
00:11:38,360 --> 00:11:43,459
have any questions along the way so this

273
00:11:41,360 --> 00:11:45,589
is really what I came here to talk about

274
00:11:43,459 --> 00:11:48,229
today and sort of the meat of this

275
00:11:45,589 --> 00:11:50,510
discussion and that is how do you do

276
00:11:48,230 --> 00:11:53,779
some of these things in the cloud and

277
00:11:50,510 --> 00:11:55,250
specifically on AWS so I'm going to give

278
00:11:53,779 --> 00:11:56,720
you some examples talk about some

279
00:11:55,250 --> 00:11:58,700
services today I'm going to go at

280
00:11:56,720 --> 00:11:59,839
probably another level deeper we're not

281
00:11:58,700 --> 00:12:01,339
going to write code I'm not going to

282
00:11:59,839 --> 00:12:03,019
give any demos but I am going to give

283
00:12:01,339 --> 00:12:05,660
you some ideas for things that you could

284
00:12:03,019 --> 00:12:07,490
do when you leave here today ultimately

285
00:12:05,660 --> 00:12:08,870
my call the call to action at the end of

286
00:12:07,490 --> 00:12:12,350
this is that you have enough information

287
00:12:08,870 --> 00:12:14,839
to go out and make changes in in your

288
00:12:12,350 --> 00:12:19,640
environment or do something that you

289
00:12:14,839 --> 00:12:22,040
might not already be doing so this

290
00:12:19,640 --> 00:12:24,350
probably dates me to how many of you

291
00:12:22,040 --> 00:12:27,640
remember the Gang of Four and design

292
00:12:24,350 --> 00:12:29,240
patterns all right I don't feel too old

293
00:12:27,640 --> 00:12:31,579
mid 90s

294
00:12:29,240 --> 00:12:35,120
so design patterns in in software

295
00:12:31,579 --> 00:12:37,370
development are a way for us to sort of

296
00:12:35,120 --> 00:12:40,430
amortize the cost of certain activities

297
00:12:37,370 --> 00:12:41,510
or code it allows us to speak a similar

298
00:12:40,430 --> 00:12:43,279
language when we're talking about

299
00:12:41,510 --> 00:12:45,620
specific problems so if we're having to

300
00:12:43,279 --> 00:12:47,839
redo things over and over and over we

301
00:12:45,620 --> 00:12:50,990
can build a design pattern around it so

302
00:12:47,839 --> 00:12:53,779
when I talk to somebody about a visitor

303
00:12:50,990 --> 00:12:55,579
pattern or a facade pattern in software

304
00:12:53,779 --> 00:12:57,589
development if they're familiar with the

305
00:12:55,579 --> 00:12:59,599
Gang of Four doc look they could

306
00:12:57,589 --> 00:13:01,370
probably that we can talk the same

307
00:12:59,600 --> 00:13:03,110
language and so today what I'm going to

308
00:13:01,370 --> 00:13:04,310
introduce is a simple design pattern

309
00:13:03,110 --> 00:13:07,070
many of you are probably already

310
00:13:04,310 --> 00:13:09,140
familiar with this it's event-driven

311
00:13:07,070 --> 00:13:12,320
software and I'm gonna introduce that in

312
00:13:09,140 --> 00:13:15,439
the context of security and adding some

313
00:13:12,320 --> 00:13:17,600
automation to our environments so

314
00:13:15,440 --> 00:13:19,760
event-driven software is really similar

315
00:13:17,600 --> 00:13:21,810
you may be familiar with it and you know

316
00:13:19,760 --> 00:13:24,090
maybe it's called pub/sub or you

317
00:13:21,810 --> 00:13:25,500
have some other name with for it really

318
00:13:24,090 --> 00:13:30,480
involves three different components

319
00:13:25,500 --> 00:13:31,860
right a producer a channel or consumer

320
00:13:30,480 --> 00:13:33,840
and these may be called different names

321
00:13:31,860 --> 00:13:36,150
depending on where you work you might

322
00:13:33,840 --> 00:13:39,300
they might be called subscribers and

323
00:13:36,150 --> 00:13:42,569
publishers event managers etc ultimately

324
00:13:39,300 --> 00:13:44,939
though it does really interesting in

325
00:13:42,570 --> 00:13:47,070
software it allows us to decouple one

326
00:13:44,940 --> 00:13:50,580
end from the other and that means that

327
00:13:47,070 --> 00:13:52,170
we can vary both of those so if you

328
00:13:50,580 --> 00:13:53,520
think about you know micro-services

329
00:13:52,170 --> 00:13:54,900
architectures that's a lot of what

330
00:13:53,520 --> 00:13:56,610
that's about is decoupling these

331
00:13:54,900 --> 00:13:57,810
components so they can vary from one

332
00:13:56,610 --> 00:13:59,520
another so you can have different

333
00:13:57,810 --> 00:14:02,489
development teams different languages

334
00:13:59,520 --> 00:14:05,130
they can scale differently so an

335
00:14:02,490 --> 00:14:07,170
event-driven software imagine in a an

336
00:14:05,130 --> 00:14:09,600
event or a message occurs that one end

337
00:14:07,170 --> 00:14:11,699
the producer produces it hands it off to

338
00:14:09,600 --> 00:14:13,440
a channel the nice thing about this is

339
00:14:11,700 --> 00:14:15,870
the producer doesn't need to know about

340
00:14:13,440 --> 00:14:16,560
the consumer on the other end so it

341
00:14:15,870 --> 00:14:18,180
doesn't have to worry about

342
00:14:16,560 --> 00:14:20,160
subscriptions doesn't have to worry

343
00:14:18,180 --> 00:14:22,949
about retries doesn't have to worry

344
00:14:20,160 --> 00:14:25,260
about exponential back-off some case of

345
00:14:22,950 --> 00:14:27,360
failure the channel manager the event

346
00:14:25,260 --> 00:14:28,950
manager handles that and can deliver

347
00:14:27,360 --> 00:14:30,990
that to the customer so that or the

348
00:14:28,950 --> 00:14:33,210
consumer so the consumer can subscribe

349
00:14:30,990 --> 00:14:37,760
to producer events very easily this also

350
00:14:33,210 --> 00:14:39,990
means that it's very it's super easy to

351
00:14:37,760 --> 00:14:42,270
broadcast that out to multiple consumers

352
00:14:39,990 --> 00:14:44,100
again the producer doesn't have to worry

353
00:14:42,270 --> 00:14:46,260
about any of the details of that and

354
00:14:44,100 --> 00:14:48,450
this translates very well to

355
00:14:46,260 --> 00:14:51,450
event-driven security we can use this

356
00:14:48,450 --> 00:14:55,020
same type of model in public cloud and

357
00:14:51,450 --> 00:14:57,570
as a matter of fact the providers all

358
00:14:55,020 --> 00:15:00,150
provide infrastructure that allows us to

359
00:14:57,570 --> 00:15:02,790
do this very easily so in an

360
00:15:00,150 --> 00:15:04,589
event-driven security model say for

361
00:15:02,790 --> 00:15:06,930
example we wanted to do something like

362
00:15:04,589 --> 00:15:10,709
this on 8 FS what are some of the

363
00:15:06,930 --> 00:15:14,609
components that use so on the producer

364
00:15:10,709 --> 00:15:18,060
side AWS provides a whole laundry list

365
00:15:14,610 --> 00:15:20,430
of event producers if you're familiar

366
00:15:18,060 --> 00:15:24,300
with AWS services you probably recognize

367
00:15:20,430 --> 00:15:26,880
some of these all of these can be become

368
00:15:24,300 --> 00:15:28,740
part of an event-driven security system

369
00:15:26,880 --> 00:15:31,480
and produce events that you can act on

370
00:15:28,740 --> 00:15:33,899
one in particular that

371
00:15:31,480 --> 00:15:37,449
I'm going to spend some time on today is

372
00:15:33,899 --> 00:15:38,949
AWS cloud trail so for the AWS users in

373
00:15:37,449 --> 00:15:43,329
the house how many of you are familiar

374
00:15:38,949 --> 00:15:46,839
with cloud trail no your arity with it

375
00:15:43,329 --> 00:15:48,279
good so I'll talk about it briefly I'm

376
00:15:46,839 --> 00:15:50,079
not I won't go into a whole lot of

377
00:15:48,279 --> 00:15:51,970
detail that's that's really not the

378
00:15:50,079 --> 00:15:54,519
point of this session but just to get

379
00:15:51,970 --> 00:15:55,750
you somewhat familiar familiar with it

380
00:15:54,519 --> 00:16:00,220
for those of you who aren't familiar

381
00:15:55,750 --> 00:16:02,670
with AWS so all interaction with AWS or

382
00:16:00,220 --> 00:16:05,380
for that matter GCP here as you're

383
00:16:02,670 --> 00:16:08,050
ultimately goes through an API so you're

384
00:16:05,380 --> 00:16:11,350
making an API call to individual servers

385
00:16:08,050 --> 00:16:14,649
or services in that cloud platform in

386
00:16:11,350 --> 00:16:16,990
AWS specifically whether you log in to

387
00:16:14,649 --> 00:16:21,190
an AWS console online through your web

388
00:16:16,990 --> 00:16:23,769
browser or you write an application that

389
00:16:21,190 --> 00:16:26,139
uses one of the AWS SDKs you've got a

390
00:16:23,769 --> 00:16:28,990
ruby app or you've got a go app or what

391
00:16:26,139 --> 00:16:33,820
have you or using the AWS command-line

392
00:16:28,990 --> 00:16:35,880
interface if any calls in to the AWS

393
00:16:33,820 --> 00:16:39,490
system that interact with your resource

394
00:16:35,880 --> 00:16:41,589
go through that it results in an HTTP

395
00:16:39,490 --> 00:16:44,709
request that then goes through API Cloud

396
00:16:41,589 --> 00:16:47,649
trail is responsible for capturing all

397
00:16:44,709 --> 00:16:49,119
of those API events in AWS so you can

398
00:16:47,649 --> 00:16:51,519
imagine this big bubble around all of

399
00:16:49,120 --> 00:16:53,470
your AWS infrastructure for anybody to

400
00:16:51,519 --> 00:16:55,959
gain access to it or make any changes to

401
00:16:53,470 --> 00:16:59,470
it they have to make an API call cloud

402
00:16:55,959 --> 00:17:02,199
trail is there to capture that now so

403
00:16:59,470 --> 00:17:04,870
just kind of walking through what

404
00:17:02,199 --> 00:17:07,629
happens a user logs in say to the

405
00:17:04,869 --> 00:17:09,609
console they make a change they go to an

406
00:17:07,630 --> 00:17:13,419
s3 bucket and change the permissions on

407
00:17:09,609 --> 00:17:19,569
it that ultimately results in a call to

408
00:17:13,419 --> 00:17:22,089
an AWS API that event that API call as

409
00:17:19,569 --> 00:17:24,849
long as along with metadata associated

410
00:17:22,089 --> 00:17:27,458
with that call is captured by Cloud

411
00:17:24,849 --> 00:17:30,428
trail Cloud trail then takes all of that

412
00:17:27,459 --> 00:17:33,010
information and aggregates it all up

413
00:17:30,429 --> 00:17:35,440
into a log file and pushes it over to

414
00:17:33,010 --> 00:17:38,320
and s3 bucket it's important to point

415
00:17:35,440 --> 00:17:41,500
out here that that this is not a

416
00:17:38,320 --> 00:17:44,320
real-time activity this is very commonly

417
00:17:41,500 --> 00:17:46,780
used on AWS for doing you know forensic

418
00:17:44,320 --> 00:17:48,760
analysis of events or something after

419
00:17:46,780 --> 00:17:51,190
the fact this can take on the order of

420
00:17:48,760 --> 00:17:55,929
minutes to to get that information into

421
00:17:51,190 --> 00:17:57,820
s3 once it's in s3 anyway not familiar

422
00:17:55,929 --> 00:17:59,950
with s3 I should ask that question first

423
00:17:57,820 --> 00:18:02,379
I said sometimes it seems so it's AWS is

424
00:17:59,950 --> 00:18:04,419
object storage system in the cloud once

425
00:18:02,380 --> 00:18:08,280
it's there though you can use other AWS

426
00:18:04,419 --> 00:18:10,750
services like Athena like Maisie

427
00:18:08,280 --> 00:18:12,490
redshift all of those to actually look

428
00:18:10,750 --> 00:18:17,340
at that data and look at those log files

429
00:18:12,490 --> 00:18:20,020
and start doing forensic analysis or get

430
00:18:17,340 --> 00:18:22,000
extracting information from it a cloud

431
00:18:20,020 --> 00:18:26,679
trail event itself might include

432
00:18:22,000 --> 00:18:28,419
information like this that information

433
00:18:26,679 --> 00:18:30,400
includes the event source so what

434
00:18:28,419 --> 00:18:34,330
service generated this event in this

435
00:18:30,400 --> 00:18:36,880
case ec2 elastic cloud compute the event

436
00:18:34,330 --> 00:18:39,730
name was start instances so someone

437
00:18:36,880 --> 00:18:43,030
tried to launch a an ec2 instance in the

438
00:18:39,730 --> 00:18:44,650
cloud and there's the region it came

439
00:18:43,030 --> 00:18:47,080
from and the source IP address of the

440
00:18:44,650 --> 00:18:49,440
person who initiated the request now

441
00:18:47,080 --> 00:18:51,520
there's a lot more information than that

442
00:18:49,440 --> 00:18:52,960
included in an event but just to give

443
00:18:51,520 --> 00:18:55,870
you an example of what one looks like

444
00:18:52,960 --> 00:18:59,850
JSON data structure very very

445
00:18:55,870 --> 00:18:59,850
straightforward and simple to process

446
00:19:00,070 --> 00:19:05,929
so now that we have a producer

447
00:19:02,840 --> 00:19:08,060
identified in the form of AWS cloud

448
00:19:05,930 --> 00:19:13,460
trail let's look at what sort of the

449
00:19:08,060 --> 00:19:16,129
channel is on AWS on any of you at that

450
00:19:13,460 --> 00:19:18,170
channel is AWS cloud watch events so

451
00:19:16,130 --> 00:19:20,650
that's that component that sits in the

452
00:19:18,170 --> 00:19:23,470
middle of producers and consumers

453
00:19:20,650 --> 00:19:26,480
manages you know ingestion of events

454
00:19:23,470 --> 00:19:29,750
manages subscriptions by consumers and

455
00:19:26,480 --> 00:19:32,390
then delivers that event down to those

456
00:19:29,750 --> 00:19:35,060
consumers so near real-time event stream

457
00:19:32,390 --> 00:19:37,460
I call that out because none of this is

458
00:19:35,060 --> 00:19:40,909
actual real-time that there is this is

459
00:19:37,460 --> 00:19:43,070
an asynchronous operation this is this

460
00:19:40,910 --> 00:19:45,050
can happen much quicker than pushing it

461
00:19:43,070 --> 00:19:48,350
to an s3 bucket and reading it after the

462
00:19:45,050 --> 00:19:51,260
fact but this gives you much closer to

463
00:19:48,350 --> 00:19:53,570
real-time than than any other message so

464
00:19:51,260 --> 00:19:57,379
AWS cloud watch events routes those

465
00:19:53,570 --> 00:19:59,480
events to the subscribers to it and as I

466
00:19:57,380 --> 00:20:01,640
mentioned previously you can have one or

467
00:19:59,480 --> 00:20:03,080
more multiple subscribers to these

468
00:20:01,640 --> 00:20:05,480
events so if you wanted to daisy-chain

469
00:20:03,080 --> 00:20:07,970
or do things in parallel based on a

470
00:20:05,480 --> 00:20:10,430
particular activity in your system you

471
00:20:07,970 --> 00:20:11,900
can do that using cloud watch events and

472
00:20:10,430 --> 00:20:14,300
just a little more detail to the

473
00:20:11,900 --> 00:20:16,550
previous slide about you know what's

474
00:20:14,300 --> 00:20:18,889
included in a cloud watch event here's

475
00:20:16,550 --> 00:20:20,300
another example some generic information

476
00:20:18,890 --> 00:20:23,120
that's included in all of them for

477
00:20:20,300 --> 00:20:24,320
example the account ID the user name

478
00:20:23,120 --> 00:20:25,699
associated with it

479
00:20:24,320 --> 00:20:28,550
so you can imagine using this

480
00:20:25,700 --> 00:20:32,240
information to go in and say give me a

481
00:20:28,550 --> 00:20:34,490
list of all of the AP API calls made by

482
00:20:32,240 --> 00:20:37,970
Jerry over the last 24 hours so it gives

483
00:20:34,490 --> 00:20:39,920
you a real keen insight into what's

484
00:20:37,970 --> 00:20:44,500
going on in your system and what a

485
00:20:39,920 --> 00:20:44,500
particular user or users have been doing

486
00:20:44,930 --> 00:20:49,940
so that was pretty straightforward we've

487
00:20:46,910 --> 00:20:52,760
got cloud trail set up on AWS we're now

488
00:20:49,940 --> 00:20:56,180
going to use cloud watch events so when

489
00:20:52,760 --> 00:20:57,770
cloud trail produces an event we're

490
00:20:56,180 --> 00:20:59,570
gonna set cloud watch events up cloud

491
00:20:57,770 --> 00:21:01,400
watch events it allows you to filter and

492
00:20:59,570 --> 00:21:03,770
say okay I want this EC I want this

493
00:21:01,400 --> 00:21:05,870
particular service and I want this

494
00:21:03,770 --> 00:21:07,580
particular API I want that to trigger an

495
00:21:05,870 --> 00:21:09,709
event so what's actually going to

496
00:21:07,580 --> 00:21:15,649
consume those events who's the consumer

497
00:21:09,710 --> 00:21:19,730
on the right-hand side on AWS another

498
00:21:15,650 --> 00:21:22,580
laundry list of AWS services that can

499
00:21:19,730 --> 00:21:25,600
consume these events you may recognize

500
00:21:22,580 --> 00:21:29,439
many of these Kinesis ec2 code build

501
00:21:25,600 --> 00:21:32,719
step functions you can send this off to

502
00:21:29,440 --> 00:21:33,830
any of these services to do a lot of

503
00:21:32,720 --> 00:21:35,720
different things if you just want to

504
00:21:33,830 --> 00:21:37,850
send a notification out you can use

505
00:21:35,720 --> 00:21:39,980
simple notification service if you want

506
00:21:37,850 --> 00:21:42,379
to queue events up in a queue for later

507
00:21:39,980 --> 00:21:44,000
processing you can do that one of the

508
00:21:42,380 --> 00:21:48,800
things that's super interesting in an

509
00:21:44,000 --> 00:21:53,720
event-driven architecture is AWS lambda

510
00:21:48,800 --> 00:21:56,889
so a DFAS lambda is AWS as functions as

511
00:21:53,720 --> 00:22:00,470
a service offering so it facilitates

512
00:21:56,890 --> 00:22:02,990
serverless computing allows you to very

513
00:22:00,470 --> 00:22:05,300
easily write code and have it executed

514
00:22:02,990 --> 00:22:07,240
when you run it executed but you don't

515
00:22:05,300 --> 00:22:10,520
have to deal with all the overhead of

516
00:22:07,240 --> 00:22:12,500
spinning up a VM or an ec2 instance

517
00:22:10,520 --> 00:22:14,900
maintaining the operating system

518
00:22:12,500 --> 00:22:18,800
it simply executes syour your code in

519
00:22:14,900 --> 00:22:21,530
response to an event and you only pay

520
00:22:18,800 --> 00:22:24,710
for that when your code is running as

521
00:22:21,530 --> 00:22:26,810
opposed to spitting up an ec2 instance

522
00:22:24,710 --> 00:22:28,880
and sending all these events to peers

523
00:22:26,810 --> 00:22:31,790
paying for that ec2 instance as long as

524
00:22:28,880 --> 00:22:34,280
it's up and running serverless computing

525
00:22:31,790 --> 00:22:36,830
allows you to only execute code and be

526
00:22:34,280 --> 00:22:38,918
charged for it when when that code is

527
00:22:36,830 --> 00:22:41,029
actually running

528
00:22:38,919 --> 00:22:43,190
alright so that was easy

529
00:22:41,029 --> 00:22:44,600
AWS we've now got a cloud trail

530
00:22:43,190 --> 00:22:46,490
generating advanced we've got cloud

531
00:22:44,600 --> 00:22:49,399
watch events taking those events

532
00:22:46,490 --> 00:22:54,049
filtering them and then for to them off

533
00:22:49,399 --> 00:22:58,158
to consumers in this case AWS lambda so

534
00:22:54,049 --> 00:23:00,620
that's our AWS version of an a simple

535
00:22:58,159 --> 00:23:03,649
event-driven security system and the one

536
00:23:00,620 --> 00:23:06,199
that I'm going to use to show a a couple

537
00:23:03,649 --> 00:23:08,570
of examples going forward before I do

538
00:23:06,200 --> 00:23:10,669
that again if anybody has any questions

539
00:23:08,570 --> 00:23:14,689
or comments happy to feel a couple of

540
00:23:10,669 --> 00:23:16,010
short ones now if you have them raise

541
00:23:14,690 --> 00:23:21,490
your hand if you do go ahead and we'll

542
00:23:16,010 --> 00:23:21,490
bring a mic over to you okay go ahead

543
00:23:26,780 --> 00:23:31,840
I maybe use I didn't hear you very well

544
00:23:29,000 --> 00:23:34,000
so you might have to use the mic sorry I

545
00:23:31,840 --> 00:23:37,360
was

546
00:23:34,000 --> 00:23:39,490
I was just gonna ask it looks like a lot

547
00:23:37,360 --> 00:23:41,050
of setup based on the number of tours

548
00:23:39,490 --> 00:23:42,460
you presented and the number of

549
00:23:41,050 --> 00:23:46,300
different types of events you'll have to

550
00:23:42,460 --> 00:23:48,670
process would your recommendation be to

551
00:23:46,300 --> 00:23:51,580
use a tool on top of these event streams

552
00:23:48,670 --> 00:23:56,400
I you definitely could I think that once

553
00:23:51,580 --> 00:23:58,990
you grow beyond a couple of simple event

554
00:23:56,400 --> 00:24:00,550
events that you want to handle you may

555
00:23:58,990 --> 00:24:03,010
want to have something else in place to

556
00:24:00,550 --> 00:24:04,810
orchestrate all of those and there there

557
00:24:03,010 --> 00:24:06,100
actually may be tools that do some of

558
00:24:04,810 --> 00:24:07,720
this out there already but I could

559
00:24:06,100 --> 00:24:09,760
definitely see as it becomes more

560
00:24:07,720 --> 00:24:10,960
complex you know beyond looking for the

561
00:24:09,760 --> 00:24:14,170
couple of examples that I'm going to

562
00:24:10,960 --> 00:24:16,300
show today then it becomes you know just

563
00:24:14,170 --> 00:24:17,740
managing all of that infrastructure and

564
00:24:16,300 --> 00:24:19,840
again having a tool or some way to

565
00:24:17,740 --> 00:24:21,400
automate management of that is going to

566
00:24:19,840 --> 00:24:23,379
be beneficial so I think I think the

567
00:24:21,400 --> 00:24:26,170
answer is yes once you grow beyond a

568
00:24:23,380 --> 00:24:31,710
simple two simple examples all right

569
00:24:26,170 --> 00:24:31,710
cool all right thanks any others

570
00:24:32,560 --> 00:24:38,659
all right so let's let's actually walk

571
00:24:35,090 --> 00:24:43,370
through an example and here's a simple

572
00:24:38,660 --> 00:24:45,200
example really some a real clear

573
00:24:43,370 --> 00:24:47,090
specification notify somebody when cloud

574
00:24:45,200 --> 00:24:49,220
trail logging is disabled now there's

575
00:24:47,090 --> 00:24:51,470
some context here that I want to give to

576
00:24:49,220 --> 00:24:53,360
you out trail is the service that we're

577
00:24:51,470 --> 00:24:55,910
going to be using that's capturing API

578
00:24:53,360 --> 00:24:58,340
calls on AWS cloud trail hasn't always

579
00:24:55,910 --> 00:25:00,770
existed as a matter of fact it was only

580
00:24:58,340 --> 00:25:06,409
introduced on AWS just a couple of years

581
00:25:00,770 --> 00:25:08,870
ago and by default it is off and so it's

582
00:25:06,410 --> 00:25:11,600
super important and because cloud trail

583
00:25:08,870 --> 00:25:13,219
is such is so useful in any type of

584
00:25:11,600 --> 00:25:14,629
security system that you're building

585
00:25:13,220 --> 00:25:15,110
that cloud trail actually be up and

586
00:25:14,630 --> 00:25:17,690
running

587
00:25:15,110 --> 00:25:19,610
now the reason AWS doesn't turn it on I

588
00:25:17,690 --> 00:25:22,880
should say doesn't turn it on by default

589
00:25:19,610 --> 00:25:25,129
for accounts it's just for backwards

590
00:25:22,880 --> 00:25:27,170
compatibility for new accounts that new

591
00:25:25,130 --> 00:25:28,970
AWS accounts that are created as of

592
00:25:27,170 --> 00:25:31,640
probably six months ago it's turned on

593
00:25:28,970 --> 00:25:33,770
by default but users still have the

594
00:25:31,640 --> 00:25:36,280
ability to turn it off and so one of the

595
00:25:33,770 --> 00:25:39,889
things that we want to protect against

596
00:25:36,280 --> 00:25:42,649
someone coming in and disabling our

597
00:25:39,890 --> 00:25:45,320
prime method for gathering security

598
00:25:42,650 --> 00:25:48,140
information API calls now obviously as I

599
00:25:45,320 --> 00:25:50,360
mentioned before the first way is to

600
00:25:48,140 --> 00:25:53,110
prevent it from happening in the first

601
00:25:50,360 --> 00:25:55,669
place so setting up users and roles

602
00:25:53,110 --> 00:25:58,040
Identity and Access Management using

603
00:25:55,670 --> 00:26:00,170
that to establish lease privileges so

604
00:25:58,040 --> 00:26:02,420
that people can't actually turn an off

605
00:26:00,170 --> 00:26:03,740
button you may have a case where you

606
00:26:02,420 --> 00:26:05,540
need to have somebody with that

607
00:26:03,740 --> 00:26:07,400
permission and you want to be notified

608
00:26:05,540 --> 00:26:09,440
when they do it so let's look at an

609
00:26:07,400 --> 00:26:13,280
example that shows how do you use the

610
00:26:09,440 --> 00:26:15,800
system to do that all right so walking

611
00:26:13,280 --> 00:26:18,350
through this step one somebody a user

612
00:26:15,800 --> 00:26:20,659
logs into the system that could be an

613
00:26:18,350 --> 00:26:23,300
actual user going through a UI or it

614
00:26:20,660 --> 00:26:25,250
could be an application with a set of

615
00:26:23,300 --> 00:26:30,379
credentials that has access to this

616
00:26:25,250 --> 00:26:32,840
system that interaction with the cloud

617
00:26:30,380 --> 00:26:34,760
trail API so that user is going to

618
00:26:32,840 --> 00:26:37,040
actually go to the cloud trail service

619
00:26:34,760 --> 00:26:37,860
and say execute the stop logging

620
00:26:37,040 --> 00:26:41,760
function

621
00:26:37,860 --> 00:26:43,469
that interaction with cloud trail is

622
00:26:41,760 --> 00:26:45,629
going to be captured by cloud trail

623
00:26:43,470 --> 00:26:48,090
itself so cloud trail is going to

624
00:26:45,630 --> 00:26:49,950
capture that event and then is going to

625
00:26:48,090 --> 00:26:53,580
send it off to cloud watch events

626
00:26:49,950 --> 00:26:56,309
because we have set up a cloud watch

627
00:26:53,580 --> 00:26:57,659
event source and this is probably a

628
00:26:56,309 --> 00:26:59,490
little hard for you guys in the back of

629
00:26:57,660 --> 00:27:01,200
the room to see but setting up a cloud

630
00:26:59,490 --> 00:27:04,260
watch event source is really as simple

631
00:27:01,200 --> 00:27:06,690
as saying ok I want to watch for events

632
00:27:04,260 --> 00:27:10,020
associated with the cloud trail service

633
00:27:06,690 --> 00:27:13,620
in this case and specifically I want to

634
00:27:10,020 --> 00:27:15,780
I want to be notified when someone

635
00:27:13,620 --> 00:27:16,979
executes the stop logging function so

636
00:27:15,780 --> 00:27:20,610
you see at the bottom of that section

637
00:27:16,980 --> 00:27:23,820
aide there we set that up next

638
00:27:20,610 --> 00:27:26,340
once that event is captured by cloud

639
00:27:23,820 --> 00:27:28,678
watch events we want to execute a lambda

640
00:27:26,340 --> 00:27:31,139
function and I've got a real quick

641
00:27:28,679 --> 00:27:33,210
sample of a lambda function here it

642
00:27:31,140 --> 00:27:34,880
could be really as simple of this as

643
00:27:33,210 --> 00:27:37,650
simple as this here's a python function

644
00:27:34,880 --> 00:27:40,500
that gets executed each time one of

645
00:27:37,650 --> 00:27:41,940
those event occurs and you can see at

646
00:27:40,500 --> 00:27:44,130
the top of the function I'm grabbing

647
00:27:41,940 --> 00:27:47,010
some information out of the event in

648
00:27:44,130 --> 00:27:49,049
this case just the region and I want to

649
00:27:47,010 --> 00:27:52,440
put that into a message and send it off

650
00:27:49,049 --> 00:27:54,900
to a slack channel for example and so

651
00:27:52,440 --> 00:27:56,700
I'm this this could be as simple as it

652
00:27:54,900 --> 00:27:57,780
is right we want to do this one thing we

653
00:27:56,700 --> 00:27:59,340
want to do it well we're going to send

654
00:27:57,780 --> 00:28:02,610
it off to a slack channel and notify

655
00:27:59,340 --> 00:28:04,770
somebody so once we've got that then

656
00:28:02,610 --> 00:28:07,290
we'd go back into our cloud watch events

657
00:28:04,770 --> 00:28:09,840
we've set up the source of the event now

658
00:28:07,290 --> 00:28:11,250
we want to set up a target and again

659
00:28:09,840 --> 00:28:12,750
probably a little small for you guys in

660
00:28:11,250 --> 00:28:15,900
the back but setting up a target is

661
00:28:12,750 --> 00:28:18,450
really just a case of selecting that

662
00:28:15,900 --> 00:28:20,820
lambda function that exists and saying

663
00:28:18,450 --> 00:28:22,559
whenever this source event occurs send

664
00:28:20,820 --> 00:28:24,030
that event to this lambda function and

665
00:28:22,559 --> 00:28:26,370
you can send the event in a couple of

666
00:28:24,030 --> 00:28:27,870
different forms depending on what you're

667
00:28:26,370 --> 00:28:29,668
going to do ultimately though you can

668
00:28:27,870 --> 00:28:33,000
send the entire event the entire JSON

669
00:28:29,669 --> 00:28:34,320
data structure and your lambda function

670
00:28:33,000 --> 00:28:34,820
can do what it would like with that

671
00:28:34,320 --> 00:28:38,629
extract

672
00:28:34,820 --> 00:28:41,178
whatever information now I go in or my

673
00:28:38,630 --> 00:28:42,740
user or application goes into the cloud

674
00:28:41,179 --> 00:28:45,559
trail sort of stepping back in time a

675
00:28:42,740 --> 00:28:48,200
bit and disables cloud trail I went

676
00:28:45,559 --> 00:28:49,970
through the UI here that then triggers

677
00:28:48,200 --> 00:28:51,500
the function we walk all the way through

678
00:28:49,970 --> 00:28:53,509
the chain it triggers the lambda

679
00:28:51,500 --> 00:28:57,100
function lambda function gathers all the

680
00:28:53,509 --> 00:29:00,130
information from the event packages up a

681
00:28:57,100 --> 00:29:02,809
message to send to our slack channel and

682
00:29:00,130 --> 00:29:06,950
voila there we see this in our slack

683
00:29:02,809 --> 00:29:10,250
channel hey somebody disabled cloud

684
00:29:06,950 --> 00:29:12,019
trail in u.s. West too and I did just a

685
00:29:10,250 --> 00:29:14,029
simple example here just to demonstrate

686
00:29:12,019 --> 00:29:16,429
how you could do it it's not any more

687
00:29:14,029 --> 00:29:18,259
difficult than that you could you know

688
00:29:16,429 --> 00:29:20,330
package up whatever information you

689
00:29:18,259 --> 00:29:22,309
wanted you might need to go out and pull

690
00:29:20,330 --> 00:29:24,259
in some context about the events and

691
00:29:22,309 --> 00:29:26,629
metadata about the event but this is

692
00:29:24,259 --> 00:29:30,370
really a real simple example just to

693
00:29:26,629 --> 00:29:30,370
demonstrate how you would do it

694
00:29:37,059 --> 00:29:43,799
I mentioned earlier the use of simple

695
00:29:40,870 --> 00:29:47,860
notification service as one of the

696
00:29:43,799 --> 00:29:52,330
targets for an event and symbol

697
00:29:47,860 --> 00:29:57,459
notification service is a pub/sub

698
00:29:52,330 --> 00:29:59,230
messaging service provided by AWS act in

699
00:29:57,460 --> 00:30:01,299
in my developer so right now I work as a

700
00:29:59,230 --> 00:30:03,249
Solutions Architect now as a developer I

701
00:30:01,299 --> 00:30:06,100
worked at AWS and this is the service

702
00:30:03,249 --> 00:30:07,629
that I worked on so it allows you to do

703
00:30:06,100 --> 00:30:10,719
pub/sub messaging so you can set up

704
00:30:07,629 --> 00:30:12,699
topics you can have individual endpoints

705
00:30:10,720 --> 00:30:14,820
that subscribe to these topics you can

706
00:30:12,700 --> 00:30:17,379
do massive fan outs with this service

707
00:30:14,820 --> 00:30:20,980
mobile notifications at cetera but it's

708
00:30:17,379 --> 00:30:23,769
also another interesting way to capture

709
00:30:20,980 --> 00:30:25,600
events and send them out so we change

710
00:30:23,769 --> 00:30:28,629
our event-driven security architecture

711
00:30:25,600 --> 00:30:33,580
just slightly replacing lambda on the

712
00:30:28,629 --> 00:30:36,009
right side with Amazon SNS and then we

713
00:30:33,580 --> 00:30:37,960
walk through almost exactly the same

714
00:30:36,009 --> 00:30:40,960
steps as we did before and you'll see

715
00:30:37,960 --> 00:30:43,269
this pattern occur in a couple slides

716
00:30:40,960 --> 00:30:45,879
again so it's very similar garde --less

717
00:30:43,269 --> 00:30:50,619
of where we're doing this so again we go

718
00:30:45,879 --> 00:30:52,899
in we set up an event source for cloud

719
00:30:50,619 --> 00:30:55,959
watch events configure it with the same

720
00:30:52,899 --> 00:30:59,049
event information then we want to send

721
00:30:55,960 --> 00:31:00,879
it off to SNS so we go back to cloud

722
00:30:59,049 --> 00:31:02,080
watch events we set up a target in this

723
00:31:00,879 --> 00:31:05,949
case instead of it being a lambda

724
00:31:02,080 --> 00:31:09,369
function now we specify an SNS topic I

725
00:31:05,950 --> 00:31:11,799
did I took some of the event and pulled

726
00:31:09,369 --> 00:31:13,330
out in this case the user and the region

727
00:31:11,799 --> 00:31:16,389
and I'm going to send out a simple

728
00:31:13,330 --> 00:31:18,460
notification via email to whoever

729
00:31:16,389 --> 00:31:21,070
subscribes to this event saying hey

730
00:31:18,460 --> 00:31:24,190
jerry disabled cloud trail in this

731
00:31:21,070 --> 00:31:26,200
specific of eat in this region so go

732
00:31:24,190 --> 00:31:29,919
back disable cloud trail through the

733
00:31:26,200 --> 00:31:32,440
console or through the api and an email

734
00:31:29,919 --> 00:31:34,379
gets generated the SNS is notified with

735
00:31:32,440 --> 00:31:37,350
that event it pulls that information out

736
00:31:34,379 --> 00:31:39,480
packages it up into an email

737
00:31:37,350 --> 00:31:41,820
you know in a matter of seconds I get an

738
00:31:39,480 --> 00:31:45,870
email notification in my inbox jerry has

739
00:31:41,820 --> 00:31:48,178
disabled this region so I'll stop right

740
00:31:45,870 --> 00:31:50,969
there that's a quick example of what you

741
00:31:48,179 --> 00:31:53,360
can do on AWS with cloud trail with

742
00:31:50,970 --> 00:31:55,730
cloud watch events and with lambda

743
00:31:53,360 --> 00:31:58,229
anybody have any questions or comments

744
00:31:55,730 --> 00:32:04,500
anybody actually tried or done any of

745
00:31:58,230 --> 00:32:05,760
this before all right I don't see any so

746
00:32:04,500 --> 00:32:08,120
we're gonna go ahead and roll right

747
00:32:05,760 --> 00:32:08,120
through

748
00:32:11,580 --> 00:32:16,408
so this is what our event-driven

749
00:32:13,950 --> 00:32:19,350
security architecture looks like on AWS

750
00:32:16,409 --> 00:32:23,340
it's cloud trail it's cloud watch events

751
00:32:19,350 --> 00:32:27,449
its AWS lambda this is a pretty well

752
00:32:23,340 --> 00:32:30,658
proven architecture I've used it other

753
00:32:27,450 --> 00:32:32,850
AWS users that I've worked with have

754
00:32:30,659 --> 00:32:36,210
used this simple architecture it turns

755
00:32:32,850 --> 00:32:38,519
out that all of the cloud providers

756
00:32:36,210 --> 00:32:40,019
provide similar service because they've

757
00:32:38,519 --> 00:32:43,409
matured to the point when I say all I

758
00:32:40,019 --> 00:32:48,090
mean the top three or four if you

759
00:32:43,409 --> 00:32:49,950
include AWS GCP as your poly Baba - to

760
00:32:48,090 --> 00:32:52,049
some extent all of them provide these

761
00:32:49,950 --> 00:32:54,509
basic services the functionality that

762
00:32:52,049 --> 00:32:56,549
allow us to very easily build the same

763
00:32:54,509 --> 00:32:59,340
architecture out regardless of what

764
00:32:56,549 --> 00:33:02,908
public cloud that we're on if we look at

765
00:32:59,340 --> 00:33:04,408
GCP Google Cloud they provide a similar

766
00:33:02,909 --> 00:33:08,279
set of services to the ones that I

767
00:33:04,409 --> 00:33:11,429
described you know as opposed to Cloud

768
00:33:08,279 --> 00:33:13,980
trail we have stackdriver log where we

769
00:33:11,429 --> 00:33:15,809
can extract API calls and information

770
00:33:13,980 --> 00:33:20,399
about user interaction with the system

771
00:33:15,809 --> 00:33:24,658
we can set a cloud pub/sub to establish

772
00:33:20,399 --> 00:33:25,918
and act as the the manager in the center

773
00:33:24,659 --> 00:33:28,289
so it will manage all of the

774
00:33:25,919 --> 00:33:30,809
subscriptions ensure events are

775
00:33:28,289 --> 00:33:35,369
delivered to consumers and then we have

776
00:33:30,809 --> 00:33:37,259
cloud functions so that's GCPs functions

777
00:33:35,369 --> 00:33:39,809
as a service offering and the

778
00:33:37,259 --> 00:33:42,359
architecture then this you know it's

779
00:33:39,809 --> 00:33:44,249
almost as though I just replaced icons

780
00:33:42,359 --> 00:33:47,519
and names in here because that's exactly

781
00:33:44,249 --> 00:33:51,330
what I did it looks and behaves almost

782
00:33:47,519 --> 00:33:54,720
exactly the same on GCP as it does on

783
00:33:51,330 --> 00:33:56,908
AWS you have stack driver logging acting

784
00:33:54,720 --> 00:33:59,850
as the producer you have cloud pub/sub

785
00:33:56,909 --> 00:34:02,460
acting as the channel and ultimately

786
00:33:59,850 --> 00:34:04,859
cloud functions as the consumer so in

787
00:34:02,460 --> 00:34:07,590
this generic architecture it looks very

788
00:34:04,859 --> 00:34:11,219
much the same so let's look at a quick

789
00:34:07,590 --> 00:34:13,078
example using GCP then so going back to

790
00:34:11,219 --> 00:34:14,049
our first example let's send a slack

791
00:34:13,079 --> 00:34:16,810
message when

792
00:34:14,050 --> 00:34:18,610
an event occurs using GCP now this is a

793
00:34:16,810 --> 00:34:21,219
little bit different than the AWS

794
00:34:18,610 --> 00:34:23,770
example in the AWS example I wanted to

795
00:34:21,219 --> 00:34:26,080
know specifically when a user had

796
00:34:23,770 --> 00:34:28,150
disabled cloud trail there's no such

797
00:34:26,080 --> 00:34:29,710
there's no cloud trail in GCP as a

798
00:34:28,150 --> 00:34:33,610
matter of fact you don't have the

799
00:34:29,710 --> 00:34:36,909
ability to turn off exact driver logging

800
00:34:33,610 --> 00:34:40,090
so this is just a generic event on GCP

801
00:34:36,909 --> 00:34:42,909
how you would do that it turns out it's

802
00:34:40,090 --> 00:34:46,179
almost exactly the same as on AWS so a

803
00:34:42,909 --> 00:34:50,069
user interacts with the system one of

804
00:34:46,179 --> 00:34:53,889
the Google Cloud api's that in turn

805
00:34:50,070 --> 00:34:58,240
generates an event of some form that is

806
00:34:53,889 --> 00:35:00,400
captured by SAC driver logging we can

807
00:34:58,240 --> 00:35:02,859
set up filters that then send filtered

808
00:35:00,400 --> 00:35:05,230
events and messages to cloud pub/sub

809
00:35:02,860 --> 00:35:07,480
cloud pub/sub then you can configure to

810
00:35:05,230 --> 00:35:09,610
deliver these message to consumers in

811
00:35:07,480 --> 00:35:12,970
our case we're going to deliver it to

812
00:35:09,610 --> 00:35:14,950
cloud functions ultimately then we can

813
00:35:12,970 --> 00:35:17,500
do whatever we'd like they're sending

814
00:35:14,950 --> 00:35:19,839
messages is a simple example you can

815
00:35:17,500 --> 00:35:22,300
send this notification out to your

816
00:35:19,840 --> 00:35:23,800
existing applications or software

817
00:35:22,300 --> 00:35:25,690
whether were there on-premise or off

818
00:35:23,800 --> 00:35:27,340
prevalence in the cloud or off the cloud

819
00:35:25,690 --> 00:35:29,820
you can send it wherever you'd like in

820
00:35:27,340 --> 00:35:32,500
our case I just wrote it quick

821
00:35:29,820 --> 00:35:35,260
JavaScript function that did a

822
00:35:32,500 --> 00:35:38,290
notification to a slack channel exactly

823
00:35:35,260 --> 00:35:41,240
the same on AWS so you can you get the

824
00:35:38,290 --> 00:35:43,160
same types of information and can

825
00:35:41,240 --> 00:35:45,080
the same types of notifications our

826
00:35:43,160 --> 00:35:47,480
regardless of the platform that you're

827
00:35:45,080 --> 00:35:49,640
on or execute the same you execute

828
00:35:47,480 --> 00:35:53,720
arbitrary code in response to a

829
00:35:49,640 --> 00:35:56,029
particular function so end-to-end it

830
00:35:53,720 --> 00:35:58,609
looks like this cloud API stack driver

831
00:35:56,030 --> 00:36:04,730
logging cloud pub/sub cloud functions to

832
00:35:58,610 --> 00:36:06,830
slack this is the GCP version of what I

833
00:36:04,730 --> 00:36:09,890
described earlier in event-driven

834
00:36:06,830 --> 00:36:12,170
security for AWS so looks exactly the

835
00:36:09,890 --> 00:36:15,100
same just the names have been changed if

836
00:36:12,170 --> 00:36:17,960
we sure we see something very similar

837
00:36:15,100 --> 00:36:21,650
very similar services very similar

838
00:36:17,960 --> 00:36:23,900
functionality in replace instead of sack

839
00:36:21,650 --> 00:36:26,119
driver logging or cloud trail now we

840
00:36:23,900 --> 00:36:28,730
have a resource manager which is what

841
00:36:26,119 --> 00:36:31,940
you interact with to administer your

842
00:36:28,730 --> 00:36:33,680
resources in Azure and that captures

843
00:36:31,940 --> 00:36:36,500
those activities that you take with it

844
00:36:33,680 --> 00:36:38,569
you can then pipe those activities over

845
00:36:36,500 --> 00:36:40,130
to Azure event grid this is something

846
00:36:38,570 --> 00:36:42,410
that's actually new in the last couple

847
00:36:40,130 --> 00:36:45,070
of months with Microsoft but it helps

848
00:36:42,410 --> 00:36:47,509
glue all of this together you can do

849
00:36:45,070 --> 00:36:49,640
pub/sub you can do fan-out whatever

850
00:36:47,510 --> 00:36:51,290
you'd like with Azure event grid you can

851
00:36:49,640 --> 00:36:54,470
send those events from resource manager

852
00:36:51,290 --> 00:36:56,600
event grid set up subscriptions to event

853
00:36:54,470 --> 00:36:58,399
grid and then send all of that out and

854
00:36:56,600 --> 00:37:01,009
then you have Azure functions which

855
00:36:58,400 --> 00:37:04,930
allow you to exit code execute code in

856
00:37:01,010 --> 00:37:07,430
response to an event again very similar

857
00:37:04,930 --> 00:37:10,279
similar that you know I'm going to show

858
00:37:07,430 --> 00:37:11,480
you this the the high-level model I'm

859
00:37:10,280 --> 00:37:13,400
not going to walk through another

860
00:37:11,480 --> 00:37:15,109
example because they all end up being

861
00:37:13,400 --> 00:37:17,060
very similar there may be specific

862
00:37:15,109 --> 00:37:18,590
events or events that are particular to

863
00:37:17,060 --> 00:37:25,070
the platform that you're on whether it's

864
00:37:18,590 --> 00:37:28,970
AWS or GCP or or asher but it all looks

865
00:37:25,070 --> 00:37:30,800
very similar so before I go on I've got

866
00:37:28,970 --> 00:37:33,109
another example I wanted to show real

867
00:37:30,800 --> 00:37:34,730
quickly but any questions or comments at

868
00:37:33,109 --> 00:37:37,480
this point I can probably answer one or

869
00:37:34,730 --> 00:37:37,480
two on the way

870
00:37:38,500 --> 00:37:45,080
all right cool we'll go right through it

871
00:37:40,460 --> 00:37:48,050
so early on one of the things I showed

872
00:37:45,080 --> 00:37:52,810
was s3 so this is this is a particular

873
00:37:48,050 --> 00:37:56,060
pain point with me in that in order for

874
00:37:52,810 --> 00:37:58,730
these stories about s3 to occur someone

875
00:37:56,060 --> 00:38:01,100
has had to have done something or taken

876
00:37:58,730 --> 00:38:04,580
some action to make their s3 buckets

877
00:38:01,100 --> 00:38:07,549
publicly available or changed an

878
00:38:04,580 --> 00:38:10,610
attribute on them and it's very simple

879
00:38:07,550 --> 00:38:12,740
for you to detect number one that that's

880
00:38:10,610 --> 00:38:15,740
occurred and then take some action using

881
00:38:12,740 --> 00:38:20,299
this simple architecture that I've that

882
00:38:15,740 --> 00:38:23,359
I've shown today and oh really it looks

883
00:38:20,300 --> 00:38:26,530
just like this it's very similar to what

884
00:38:23,360 --> 00:38:29,240
we've already talked about on AWS

885
00:38:26,530 --> 00:38:31,940
someone interacts with an s3 bucket or

886
00:38:29,240 --> 00:38:33,950
an object in an s3 bucket ultimately

887
00:38:31,940 --> 00:38:37,970
they're going to call the put object or

888
00:38:33,950 --> 00:38:41,540
put object Akal API calls on s3 that is

889
00:38:37,970 --> 00:38:43,459
captured by AWS cloud trail so anytime

890
00:38:41,540 --> 00:38:46,490
anybody interacts with those services

891
00:38:43,460 --> 00:38:49,370
cloud trail captures it we can set up

892
00:38:46,490 --> 00:38:52,640
cloud watch events specific to that s3

893
00:38:49,370 --> 00:38:54,859
bucket can be specific to resources

894
00:38:52,640 --> 00:38:57,620
within that bucket and have it trigger

895
00:38:54,860 --> 00:38:59,930
an AWS lambda function just like the

896
00:38:57,620 --> 00:39:02,620
other examples it's exactly the same the

897
00:38:59,930 --> 00:39:05,029
configuration is the same the details

898
00:39:02,620 --> 00:39:07,430
about what you want to do are what

899
00:39:05,030 --> 00:39:10,220
ultimately is different so in this case

900
00:39:07,430 --> 00:39:13,580
we can actually tell AWS lambda to take

901
00:39:10,220 --> 00:39:17,230
that API call if it's in a bucket of

902
00:39:13,580 --> 00:39:19,400
interest to reset the permissions on it

903
00:39:17,230 --> 00:39:21,410
such that it's not publicly available

904
00:39:19,400 --> 00:39:23,630
and then potentially notify somebody

905
00:39:21,410 --> 00:39:26,299
again this is happening after the fact

906
00:39:23,630 --> 00:39:30,140
so it's reactive you'd still want to put

907
00:39:26,300 --> 00:39:32,570
other practices in place to prevent

908
00:39:30,140 --> 00:39:34,640
somebody from doing this initially but I

909
00:39:32,570 --> 00:39:36,530
more often than not this is happening

910
00:39:34,640 --> 00:39:38,420
accidentally someone with permissions is

911
00:39:36,530 --> 00:39:41,030
making the change exposing the bucket or

912
00:39:38,420 --> 00:39:42,260
they're putting a an object into a

913
00:39:41,030 --> 00:39:45,040
bucket that shouldn't have been there

914
00:39:42,260 --> 00:39:45,040
anyway

915
00:39:45,180 --> 00:39:54,609
so to kind of step back and give you

916
00:39:52,510 --> 00:39:58,870
sort of a big picture I wanted to stop

917
00:39:54,610 --> 00:40:00,670
and summarize here and and go over the

918
00:39:58,870 --> 00:40:03,310
things that we've talked about so

919
00:40:00,670 --> 00:40:06,460
event-driven security on this slide I

920
00:40:03,310 --> 00:40:09,340
show all of the different permutations

921
00:40:06,460 --> 00:40:11,770
of it depending on whether you're on AWS

922
00:40:09,340 --> 00:40:14,080
or whether you're on GCP or whether

923
00:40:11,770 --> 00:40:16,150
you're on Azure each of the cloud

924
00:40:14,080 --> 00:40:18,490
platforms public cloud platforms has

925
00:40:16,150 --> 00:40:20,860
similar infrastructure and similar

926
00:40:18,490 --> 00:40:22,209
services that allow you to to do very

927
00:40:20,860 --> 00:40:24,250
similar things on them they've all

928
00:40:22,210 --> 00:40:26,710
matured to a point now where you can't

929
00:40:24,250 --> 00:40:29,740
actually do these very simply no longer

930
00:40:26,710 --> 00:40:31,630
do we have to whole four events prior to

931
00:40:29,740 --> 00:40:35,379
these services being in place it was

932
00:40:31,630 --> 00:40:38,080
common to see us polling for activity in

933
00:40:35,380 --> 00:40:40,420
our public cloud and then once we saw an

934
00:40:38,080 --> 00:40:42,940
activity occur taking some action based

935
00:40:40,420 --> 00:40:45,190
on that now all of the cloud providers

936
00:40:42,940 --> 00:40:48,400
provide some form of event source that

937
00:40:45,190 --> 00:40:50,560
allow us to react to these changes and

938
00:40:48,400 --> 00:40:54,700
we can use these services that I've

939
00:40:50,560 --> 00:40:56,860
described here stepping up and looking

940
00:40:54,700 --> 00:40:59,710
at what we talked about this is really

941
00:40:56,860 --> 00:41:02,470
the high-level view of the activity that

942
00:40:59,710 --> 00:41:05,440
I walk through today users interact and

943
00:41:02,470 --> 00:41:08,500
specifically in specific to AWS users

944
00:41:05,440 --> 00:41:10,600
interact with AWS through an API of one

945
00:41:08,500 --> 00:41:14,920
form or another every interaction goes

946
00:41:10,600 --> 00:41:18,069
through an API that API can be captured

947
00:41:14,920 --> 00:41:20,410
by AWS cloud trail you can do a couple

948
00:41:18,070 --> 00:41:22,300
of things with cloud trail you can by

949
00:41:20,410 --> 00:41:24,670
default that information goes through an

950
00:41:22,300 --> 00:41:26,260
s3 bucket I didn't talk a lot about what

951
00:41:24,670 --> 00:41:27,940
you can do there but other than to

952
00:41:26,260 --> 00:41:30,220
mention there are a lot of tools and

953
00:41:27,940 --> 00:41:32,440
services that you can use on AWS to

954
00:41:30,220 --> 00:41:35,259
actually mine data out of that bucket

955
00:41:32,440 --> 00:41:37,060
who's been using what API is you can run

956
00:41:35,260 --> 00:41:40,600
it through machine learning you can do

957
00:41:37,060 --> 00:41:43,480
all kinds of AI on that information to

958
00:41:40,600 --> 00:41:46,600
mine data out of it you can use tools

959
00:41:43,480 --> 00:41:48,820
like Macy or or redshift but you can

960
00:41:46,600 --> 00:41:51,490
also send that information and set up

961
00:41:48,820 --> 00:41:54,130
custom activities based on those events

962
00:41:51,490 --> 00:41:56,290
so we set up cloud watch events to

963
00:41:54,130 --> 00:41:57,100
filter these activities and then we set

964
00:41:56,290 --> 00:41:58,720
up

965
00:41:57,100 --> 00:42:00,850
consumers of those events whether it's

966
00:41:58,720 --> 00:42:04,240
SNS to send out simple notifications

967
00:42:00,850 --> 00:42:07,569
when an event occurs or lambda2 execute

968
00:42:04,240 --> 00:42:08,979
code when to execute custom sets of code

969
00:42:07,570 --> 00:42:12,100
to interact with internal or external

970
00:42:08,980 --> 00:42:14,230
systems this is a super flexible system

971
00:42:12,100 --> 00:42:18,250
that allows you to really get your feet

972
00:42:14,230 --> 00:42:21,910
wet really quickly and it's really easy

973
00:42:18,250 --> 00:42:23,980
to set up so to close I want to leave

974
00:42:21,910 --> 00:42:27,250
you with a couple of items number one

975
00:42:23,980 --> 00:42:29,200
for those of you who are AWS consumers

976
00:42:27,250 --> 00:42:30,940
and I don't think I've broke it out how

977
00:42:29,200 --> 00:42:34,750
many of you of those who are in public

978
00:42:30,940 --> 00:42:39,970
cloud how many of you are using AWS how

979
00:42:34,750 --> 00:42:42,760
about GCP Google how about a sure so

980
00:42:39,970 --> 00:42:44,020
that's roughly the what I would

981
00:42:42,760 --> 00:42:46,900
typically see you know the majority

982
00:42:44,020 --> 00:42:49,030
using AWS then GCP in the nashor but it

983
00:42:46,900 --> 00:42:51,850
really varies greatly if you're using

984
00:42:49,030 --> 00:42:53,440
AWS then this is this is really for you

985
00:42:51,850 --> 00:42:57,069
if there's one thing you take out of

986
00:42:53,440 --> 00:42:59,380
this talk today is is go back to your

987
00:42:57,070 --> 00:43:01,990
office and make sure cloud trail is

988
00:42:59,380 --> 00:43:04,900
enabled if it's not enabled on your AWS

989
00:43:01,990 --> 00:43:08,020
account and a breach occurs then you

990
00:43:04,900 --> 00:43:09,820
really have no effective way of doing

991
00:43:08,020 --> 00:43:11,430
forensic analysis on this unless you

992
00:43:09,820 --> 00:43:12,970
have some other system already set up

993
00:43:11,430 --> 00:43:14,770
number two

994
00:43:12,970 --> 00:43:17,529
based on you know what's been in the

995
00:43:14,770 --> 00:43:20,290
news lately for you get this specific

996
00:43:17,530 --> 00:43:22,750
day WS go back and check your s3 buckets

997
00:43:20,290 --> 00:43:24,790
really make sure that if you have a

998
00:43:22,750 --> 00:43:27,310
public X s3 bucket and there are lots of

999
00:43:24,790 --> 00:43:31,060
reasons to have public s3 buckets you're

1000
00:43:27,310 --> 00:43:32,890
hosting a static website put it in a s3

1001
00:43:31,060 --> 00:43:35,170
bucket and make it public you have to do

1002
00:43:32,890 --> 00:43:37,000
that but make sure that number that

1003
00:43:35,170 --> 00:43:39,940
you're not storing sensitive information

1004
00:43:37,000 --> 00:43:42,220
in that bucket also look at buckets that

1005
00:43:39,940 --> 00:43:43,180
are designated as public and make sure

1006
00:43:42,220 --> 00:43:45,609
that you're not storing sensitive

1007
00:43:43,180 --> 00:43:47,770
information in there third

1008
00:43:45,610 --> 00:43:49,950
regardless of what platform you're on

1009
00:43:47,770 --> 00:43:52,710
even if you're not in

1010
00:43:49,950 --> 00:43:54,419
a public cloud start looking at building

1011
00:43:52,710 --> 00:43:58,890
out an event-driven security framework

1012
00:43:54,420 --> 00:44:00,869
this allows you to begin automating some

1013
00:43:58,890 --> 00:44:02,460
of your infrastructure and it makes a

1014
00:44:00,869 --> 00:44:05,099
leave for many companies especially

1015
00:44:02,460 --> 00:44:09,300
those who have an army of one focused on

1016
00:44:05,099 --> 00:44:15,359
security to jump in and start automating

1017
00:44:09,300 --> 00:44:17,160
some of this infrastructure finally and

1018
00:44:15,359 --> 00:44:18,690
this is my hope that after this

1019
00:44:17,160 --> 00:44:20,549
conference I don't have to update that

1020
00:44:18,690 --> 00:44:22,740
slide with new news stories stay out of

1021
00:44:20,550 --> 00:44:26,280
the news this is this is really the big

1022
00:44:22,740 --> 00:44:28,109
one because it's it's as soon as there's

1023
00:44:26,280 --> 00:44:29,310
an s3 bucket that's exposed it ends up

1024
00:44:28,109 --> 00:44:32,640
in the news and I don't want to update

1025
00:44:29,310 --> 00:44:35,250
that slide anymore so that's it for me

1026
00:44:32,640 --> 00:44:36,868
today I appreciate all of you coming and

1027
00:44:35,250 --> 00:44:39,270
sitting through this talk the questions

1028
00:44:36,869 --> 00:44:43,589
and I'd like to open it up now I don't

1029
00:44:39,270 --> 00:44:45,180
know how much time we've got left one

1030
00:44:43,589 --> 00:44:48,810
minute one minute okay

1031
00:44:45,180 --> 00:44:50,879
so anybody have any questions on what I

1032
00:44:48,810 --> 00:44:53,849
presented today any comments you're

1033
00:44:50,880 --> 00:44:57,050
using it already great stuff raise your

1034
00:44:53,849 --> 00:44:57,050
hand we'll bring a mic over to you

1035
00:44:58,570 --> 00:45:02,550
I don't see any I saw one right here

1036
00:45:06,330 --> 00:45:11,279
so it's a no-brainer if you don't secure

1037
00:45:08,820 --> 00:45:13,109
your s3 buckets right as you shown so

1038
00:45:11,280 --> 00:45:14,820
can you give you an example of the

1039
00:45:13,109 --> 00:45:17,430
skillet you're running these queries

1040
00:45:14,820 --> 00:45:20,640
probably the events which will ensure

1041
00:45:17,430 --> 00:45:23,250
mean Rackspace or anything how are you

1042
00:45:20,640 --> 00:45:24,180
managing the you know notifications

1043
00:45:23,250 --> 00:45:25,530
let's say if you have a big

1044
00:45:24,180 --> 00:45:27,839
infrastructure you were born to get a

1045
00:45:25,530 --> 00:45:30,990
lot of noise and then how you are

1046
00:45:27,840 --> 00:45:32,880
managing that noise yeah so I this kind

1047
00:45:30,990 --> 00:45:35,520
of goes back to an earlier question I

1048
00:45:32,880 --> 00:45:38,700
think where it's once you get to scale

1049
00:45:35,520 --> 00:45:41,190
this this works for sort of that one-off

1050
00:45:38,700 --> 00:45:42,600
let's get our feet wet but once you get

1051
00:45:41,190 --> 00:45:44,550
up to scale then you have to have

1052
00:45:42,600 --> 00:45:46,020
infrastructure around that to start

1053
00:45:44,550 --> 00:45:49,020
managing it and and you're right

1054
00:45:46,020 --> 00:45:51,119
false dealing with false positives all

1055
00:45:49,020 --> 00:45:53,009
of the same types of topics that you

1056
00:45:51,119 --> 00:45:54,119
would deal with normally so this allows

1057
00:45:53,010 --> 00:45:56,040
you to get in there and start

1058
00:45:54,119 --> 00:45:58,280
experimenting with it and start using it

1059
00:45:56,040 --> 00:46:01,500
and and what I found and and where I

1060
00:45:58,280 --> 00:46:05,369
most often see this type of architecture

1061
00:46:01,500 --> 00:46:08,160
is when I'm working with AWS customers

1062
00:46:05,369 --> 00:46:10,500
who are who just don't have anything in

1063
00:46:08,160 --> 00:46:13,230
place right it's like I don't have

1064
00:46:10,500 --> 00:46:15,090
anything I I could barely secure my

1065
00:46:13,230 --> 00:46:17,700
application now you want me to secure my

1066
00:46:15,090 --> 00:46:20,070
infrastructure as well so this at least

1067
00:46:17,700 --> 00:46:22,020
gets them moving in that direction but

1068
00:46:20,070 --> 00:46:24,060
here you're absolutely right once this

1069
00:46:22,020 --> 00:46:25,650
scales out you have to have some sort of

1070
00:46:24,060 --> 00:46:29,000
infrastructure or some sort of tooling

1071
00:46:25,650 --> 00:46:29,000
in place to manage all of that

1072
00:46:29,900 --> 00:46:34,730
any other questions

1073
00:46:32,619 --> 00:46:36,080
well I'd like to thank everybody who

1074
00:46:34,730 --> 00:46:39,349
came I'd like to thank my wife for

1075
00:46:36,080 --> 00:46:42,279
putting up with me and thank all of you

1076
00:46:39,349 --> 00:46:42,280
and the presenters thank

