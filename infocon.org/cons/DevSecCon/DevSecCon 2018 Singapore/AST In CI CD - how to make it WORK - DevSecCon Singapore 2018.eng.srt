1
00:00:04,400 --> 00:00:12,060
so nice to have you all here and what

2
00:00:09,540 --> 00:00:13,829
we're going to talk about today is ast

3
00:00:12,060 --> 00:00:15,720
application security testing and I'm

4
00:00:13,830 --> 00:00:17,640
going to relate a little bit to what -

5
00:00:15,720 --> 00:00:19,890
some of the things that Zane said in

6
00:00:17,640 --> 00:00:23,849
this talk so it's a nice and

7
00:00:19,890 --> 00:00:26,730
complimentary so if you don't know me a

8
00:00:23,849 --> 00:00:29,160
few words about myself I've been doing

9
00:00:26,730 --> 00:00:31,649
security for over 20 years most of it in

10
00:00:29,160 --> 00:00:34,500
application security I've been in almost

11
00:00:31,649 --> 00:00:37,649
every side of this space I was a pen

12
00:00:34,500 --> 00:00:39,539
tester I had a pen testing company I was

13
00:00:37,649 --> 00:00:41,609
a consultant I worked for a product

14
00:00:39,539 --> 00:00:44,250
company for a while for a testing

15
00:00:41,609 --> 00:00:46,699
company there's pretty much nothing I

16
00:00:44,250 --> 00:00:51,420
haven't done yet in software security

17
00:00:46,699 --> 00:00:53,309
and so I've seen a lot I learned to

18
00:00:51,420 --> 00:00:57,690
ignore a lot of the fluff and the

19
00:00:53,309 --> 00:00:59,730
 and now I'm part of synopsis so

20
00:00:57,690 --> 00:01:02,909
synopsis acquired my last company and

21
00:00:59,730 --> 00:01:04,319
synopsis is building a complete set of

22
00:01:02,909 --> 00:01:06,810
testing tools I'll talk about in a

23
00:01:04,319 --> 00:01:08,970
second and what I'm trying to do today

24
00:01:06,810 --> 00:01:10,890
in synopsis is help to take all these

25
00:01:08,970 --> 00:01:13,350
things we bought and they get it into a

26
00:01:10,890 --> 00:01:15,360
coherent portfolio which is a very

27
00:01:13,350 --> 00:01:16,860
interesting task because as you'll see

28
00:01:15,360 --> 00:01:21,630
through this talk it's very complicated

29
00:01:16,860 --> 00:01:24,390
space I've been a hacker for a lot of

30
00:01:21,630 --> 00:01:27,300
years a good hacker and I've been with

31
00:01:24,390 --> 00:01:29,850
OS since its inception so it's been a

32
00:01:27,300 --> 00:01:31,620
really long fun ride to see how the

33
00:01:29,850 --> 00:01:35,280
applications of security space has

34
00:01:31,620 --> 00:01:37,530
evolved my last company did an if'

35
00:01:35,280 --> 00:01:41,720
solution I was one of the pioneers of

36
00:01:37,530 --> 00:01:43,860
the space I'm also an avid photographer

37
00:01:41,720 --> 00:01:46,410
unfortunately that doesn't pay well so I

38
00:01:43,860 --> 00:01:49,260
don't get to do that on a professional

39
00:01:46,410 --> 00:01:50,970
level and so I started plugging my

40
00:01:49,260 --> 00:01:52,980
photos into my talk so anybody who's

41
00:01:50,970 --> 00:01:55,410
been to my talk in last two years knows

42
00:01:52,980 --> 00:01:58,020
that but this talk I'm going to do

43
00:01:55,410 --> 00:02:00,420
something new which is all the photos in

44
00:01:58,020 --> 00:02:02,729
this talk are going to be mine even if

45
00:02:00,420 --> 00:02:06,590
they're only loosely related to the

46
00:02:02,730 --> 00:02:09,179
topic so we'll see how that goes

47
00:02:06,590 --> 00:02:11,910
another thing that I've started to do

48
00:02:09,179 --> 00:02:13,500
because this is my third Def Con is I

49
00:02:11,910 --> 00:02:16,020
always put in the front now a picture

50
00:02:13,500 --> 00:02:17,610
from the last eff second so this I took

51
00:02:16,020 --> 00:02:19,920
in the last one I spoke at in

52
00:02:17,610 --> 00:02:22,080
Boston this is Boston if you've never

53
00:02:19,920 --> 00:02:27,660
been there a great city don't come in

54
00:02:22,080 --> 00:02:29,490
the winter so a few words about synopsis

55
00:02:27,660 --> 00:02:34,020
and that will be my only commercial plug

56
00:02:29,490 --> 00:02:35,400
for this talk so synopsis is today a

57
00:02:34,020 --> 00:02:37,860
leader in the space of application

58
00:02:35,400 --> 00:02:40,080
security testing basically synopsis came

59
00:02:37,860 --> 00:02:42,480
from hardware testing and started this

60
00:02:40,080 --> 00:02:44,850
new space four years ago we acquired

61
00:02:42,480 --> 00:02:47,160
about ten companies over the last four

62
00:02:44,850 --> 00:02:49,769
years and we now have pretty much

63
00:02:47,160 --> 00:02:51,630
everything in the space so dynamic

64
00:02:49,770 --> 00:02:54,000
testing and static testing and open

65
00:02:51,630 --> 00:02:56,130
source testing and professional services

66
00:02:54,000 --> 00:02:57,630
and managed services and a lot of good

67
00:02:56,130 --> 00:02:59,609
stuff which I don't want to waste this

68
00:02:57,630 --> 00:03:01,290
talk about if you want to hear more

69
00:02:59,610 --> 00:03:05,209
about it you can talk to me after go to

70
00:03:01,290 --> 00:03:09,269
our booth and have fun learning about us

71
00:03:05,209 --> 00:03:10,620
so what are we going to do today we're

72
00:03:09,270 --> 00:03:13,230
gonna do a quick well we did a quick

73
00:03:10,620 --> 00:03:15,120
intro we're gonna talk a little bit

74
00:03:13,230 --> 00:03:16,980
about the CI CD challenge and I'm gonna

75
00:03:15,120 --> 00:03:18,300
go really quickly through that because I

76
00:03:16,980 --> 00:03:21,720
think that's all you guys have been

77
00:03:18,300 --> 00:03:23,040
hearing for the last day and a half and

78
00:03:21,720 --> 00:03:24,420
we're going to talk about the ast

79
00:03:23,040 --> 00:03:26,130
landscape we're going to talk about the

80
00:03:24,420 --> 00:03:28,589
different technologies for application

81
00:03:26,130 --> 00:03:30,269
security testing what they are what

82
00:03:28,590 --> 00:03:35,190
their strengths and weaknesses are and

83
00:03:30,269 --> 00:03:37,320
how they fit or don't fit CIC B and then

84
00:03:35,190 --> 00:03:40,320
after we understand all those details

85
00:03:37,320 --> 00:03:42,329
we're gonna build the right mix we're

86
00:03:40,320 --> 00:03:45,900
gonna see how we can make all this work

87
00:03:42,330 --> 00:03:47,850
for CIC B and they're of course more

88
00:03:45,900 --> 00:03:50,370
than one way so what I'm gonna tell you

89
00:03:47,850 --> 00:03:51,540
is is my suggestion of course but it

90
00:03:50,370 --> 00:03:57,930
should help you get a little bit

91
00:03:51,540 --> 00:04:01,560
direction so the CIC be challenge the

92
00:03:57,930 --> 00:04:03,810
CIC D challenge is well that is the only

93
00:04:01,560 --> 00:04:05,970
photo that's not mine in this in this

94
00:04:03,810 --> 00:04:08,790
talk I just couldn't get something that

95
00:04:05,970 --> 00:04:11,880
good so it's fast right we know that

96
00:04:08,790 --> 00:04:16,769
it's fast and I want to talk just one

97
00:04:11,880 --> 00:04:20,070
second about buzzwords so CIC D is part

98
00:04:16,769 --> 00:04:23,820
of our buzzword DevOps dev sec ops agile

99
00:04:20,070 --> 00:04:26,460
and it's a lot of words and techniques

100
00:04:23,820 --> 00:04:30,030
and things that all evolve around the

101
00:04:26,460 --> 00:04:31,380
notion of let's deliver software faster

102
00:04:30,030 --> 00:04:34,469
right so five year

103
00:04:31,380 --> 00:04:37,830
ago everybody talk a July today agile is

104
00:04:34,470 --> 00:04:41,580
sort of a bad word even though all we do

105
00:04:37,830 --> 00:04:44,070
in CI CDs of course being agile so the

106
00:04:41,580 --> 00:04:47,789
whole idea is to get software out faster

107
00:04:44,070 --> 00:04:50,610
and to do it in a very repetitive and

108
00:04:47,790 --> 00:04:52,410
continuous process right we don't do the

109
00:04:50,610 --> 00:04:55,860
waterfall thing anymore we get

110
00:04:52,410 --> 00:04:57,540
everything done in a cycle and I bet you

111
00:04:55,860 --> 00:04:59,850
can find a hundred different graphs that

112
00:04:57,540 --> 00:05:01,680
talk about this and again I don't want

113
00:04:59,850 --> 00:05:04,710
to spend too much time on this because

114
00:05:01,680 --> 00:05:06,360
you know this stuff I do want to get a

115
00:05:04,710 --> 00:05:09,060
few minutes to talk about continuous

116
00:05:06,360 --> 00:05:12,050
delivery because what I see is when I go

117
00:05:09,060 --> 00:05:16,500
to customers everybody says CI CD but

118
00:05:12,050 --> 00:05:21,420
99% do CI not CD right everybody wants

119
00:05:16,500 --> 00:05:23,910
did you see the Etsy did CD but I know

120
00:05:21,420 --> 00:05:26,190
maybe one or two percent of the

121
00:05:23,910 --> 00:05:29,870
customers I talked with actually do CB

122
00:05:26,190 --> 00:05:32,160
there was the doo doo CD are

123
00:05:29,870 --> 00:05:34,680
accelerating it insanely I've seen

124
00:05:32,160 --> 00:05:37,800
customers with over a thousand pushes a

125
00:05:34,680 --> 00:05:39,510
day every little thing gets pushed it's

126
00:05:37,800 --> 00:05:42,630
like oh I wrote this little piece of

127
00:05:39,510 --> 00:05:45,810
code digital done out it's amazing and

128
00:05:42,630 --> 00:05:48,090
this is when we build our plan for how

129
00:05:45,810 --> 00:05:50,880
to do security testing we need to think

130
00:05:48,090 --> 00:05:54,450
about that don't try to build a complete

131
00:05:50,880 --> 00:05:57,510
new framework for your CI testing that

132
00:05:54,450 --> 00:06:00,300
is right for today try to build it so it

133
00:05:57,510 --> 00:06:03,150
will be right in five years or in three

134
00:06:00,300 --> 00:06:07,440
years when this is what you'll do so I

135
00:06:03,150 --> 00:06:09,840
took this graph from Wikipedia I don't

136
00:06:07,440 --> 00:06:12,630
know if it's the best diagram but

137
00:06:09,840 --> 00:06:14,909
essentially what we see here is that we

138
00:06:12,630 --> 00:06:16,710
keep getting this feedback loop right

139
00:06:14,910 --> 00:06:19,740
where we start pushing do a little

140
00:06:16,710 --> 00:06:21,960
testing if it fails it goes back go a

141
00:06:19,740 --> 00:06:25,590
little deeper and so on but all this can

142
00:06:21,960 --> 00:06:28,169
happen in say five minutes right and to

143
00:06:25,590 --> 00:06:31,080
get it all out so we have to adjust to

144
00:06:28,170 --> 00:06:34,350
that now one of the things we need to

145
00:06:31,080 --> 00:06:38,940
understand is that in this world there's

146
00:06:34,350 --> 00:06:41,520
no longer a single CI and integration of

147
00:06:38,940 --> 00:06:43,900
all our software building into one place

148
00:06:41,520 --> 00:06:46,359
there are multiple streams

149
00:06:43,900 --> 00:06:49,169
of continuous integration multiple

150
00:06:46,360 --> 00:06:52,680
streams of continuous delivery and

151
00:06:49,169 --> 00:06:55,389
testing is becoming completely different

152
00:06:52,680 --> 00:06:57,460
you know you go to these CD shops and

153
00:06:55,389 --> 00:07:00,100
you talk to them about test environment

154
00:06:57,460 --> 00:07:02,830
and they laugh because they don't know

155
00:07:00,100 --> 00:07:04,930
this anymore they all move to AV testing

156
00:07:02,830 --> 00:07:07,508
right so if you don't know AV testing

157
00:07:04,930 --> 00:07:10,030
not in the context of user functionality

158
00:07:07,509 --> 00:07:13,690
but in the context of CI CD right a B

159
00:07:10,030 --> 00:07:16,388
testing is all about we have let's say a

160
00:07:13,690 --> 00:07:20,770
hundred production servers right and now

161
00:07:16,389 --> 00:07:22,930
we have a new issue deployed so our new

162
00:07:20,770 --> 00:07:25,599
functionality so we deploy it just to

163
00:07:22,930 --> 00:07:28,660
one server and we have a closed set of

164
00:07:25,600 --> 00:07:30,430
people that can go there I think Wix

165
00:07:28,660 --> 00:07:33,430
gave a really good talk about that how

166
00:07:30,430 --> 00:07:35,470
they do that and essentially first few

167
00:07:33,430 --> 00:07:37,990
minutes or hours only whit's employees

168
00:07:35,470 --> 00:07:41,080
get access to this then they push it to

169
00:07:37,990 --> 00:07:42,669
a few more servers if get it out to a 1%

170
00:07:41,080 --> 00:07:44,639
of their customers which are beta test

171
00:07:42,669 --> 00:07:50,740
customers it's a restricted group and

172
00:07:44,639 --> 00:07:54,930
then 5% 10% 25% and so on and this lets

173
00:07:50,740 --> 00:07:57,610
you get over that phase of doing

174
00:07:54,930 --> 00:07:59,470
dedicated test environment which may or

175
00:07:57,610 --> 00:08:01,810
may not be the right environment

176
00:07:59,470 --> 00:08:05,409
compared to your production and it lets

177
00:08:01,810 --> 00:08:06,849
things flow much faster and the problem

178
00:08:05,409 --> 00:08:09,909
is when you talk to a lot of people to

179
00:08:06,849 --> 00:08:12,370
do security testing this is baffling to

180
00:08:09,909 --> 00:08:14,469
them right because a be testing that

181
00:08:12,370 --> 00:08:16,930
means it's on production already before

182
00:08:14,470 --> 00:08:19,389
we did testing how can we live with that

183
00:08:16,930 --> 00:08:21,340
so we'll get to that later but you have

184
00:08:19,389 --> 00:08:23,470
to understand even if you don't do it

185
00:08:21,340 --> 00:08:26,530
today you will do it in two years just

186
00:08:23,470 --> 00:08:28,930
ami testing is the future of CI CD

187
00:08:26,530 --> 00:08:31,960
nobody wants to maintain a separate

188
00:08:28,930 --> 00:08:34,299
testing environment and there's gonna be

189
00:08:31,960 --> 00:08:37,689
parallel testing and deployments right

190
00:08:34,299 --> 00:08:41,049
so I could have this feature now being

191
00:08:37,690 --> 00:08:43,209
propagated to 5% of the server while

192
00:08:41,049 --> 00:08:46,180
already the next version of this feature

193
00:08:43,208 --> 00:08:51,729
is under 1% behind it right it could be

194
00:08:46,180 --> 00:08:55,029
that fast now another thing we need to

195
00:08:51,730 --> 00:08:57,340
talk about is risk so if you've never

196
00:08:55,029 --> 00:09:00,670
heard the term risk appetite

197
00:08:57,340 --> 00:09:03,130
it's a term that auditors like you know

198
00:09:00,670 --> 00:09:04,959
the big four and the one but it's

199
00:09:03,130 --> 00:09:07,660
essentially how much risk and

200
00:09:04,960 --> 00:09:10,330
organization is happy to take there are

201
00:09:07,660 --> 00:09:12,400
organizations that are naturally risk

202
00:09:10,330 --> 00:09:15,250
happy right startups is a good example

203
00:09:12,400 --> 00:09:16,720
if they don't take risk they die they

204
00:09:15,250 --> 00:09:19,420
take risks they may die but they may

205
00:09:16,720 --> 00:09:22,690
succeed and there are organizations that

206
00:09:19,420 --> 00:09:26,110
are very averse to risk like big

207
00:09:22,690 --> 00:09:28,960
financial organizations but you have to

208
00:09:26,110 --> 00:09:32,050
understand your risk appetite and then

209
00:09:28,960 --> 00:09:36,850
you have to understand the risk so when

210
00:09:32,050 --> 00:09:40,300
you live in a fast push off features

211
00:09:36,850 --> 00:09:43,060
you're gonna have risk now don't take me

212
00:09:40,300 --> 00:09:45,160
wrong if you live in a slow push you're

213
00:09:43,060 --> 00:09:47,739
also gonna have risk and you just have

214
00:09:45,160 --> 00:09:50,469
this notion where you did a pen test and

215
00:09:47,740 --> 00:09:51,610
now there was no feature update for

216
00:09:50,470 --> 00:09:54,550
three months that you don't have a

217
00:09:51,610 --> 00:09:57,550
reserve a huge risk you also have a huge

218
00:09:54,550 --> 00:10:00,609
risk that is not a security risk by

219
00:09:57,550 --> 00:10:02,109
pushing software slow right so we are

220
00:10:00,610 --> 00:10:04,960
security people we care only about

221
00:10:02,110 --> 00:10:06,670
security but as a company you do see a

222
00:10:04,960 --> 00:10:08,380
CD because you care about your business

223
00:10:06,670 --> 00:10:11,079
right you want to move faster as a

224
00:10:08,380 --> 00:10:13,870
business so not doing CI CDs a huge

225
00:10:11,080 --> 00:10:16,540
business risk pushing features without

226
00:10:13,870 --> 00:10:19,450
testing them thoroughly is somewhat of a

227
00:10:16,540 --> 00:10:24,069
security risk you have to learn to live

228
00:10:19,450 --> 00:10:25,900
with that right and you have to accept

229
00:10:24,070 --> 00:10:27,640
it it's a maturity process that every

230
00:10:25,900 --> 00:10:29,829
security person has to go through you

231
00:10:27,640 --> 00:10:32,170
have to live with risk but you need to

232
00:10:29,830 --> 00:10:34,330
understand risk right and anything Zane

233
00:10:32,170 --> 00:10:37,240
talked really well about that you need

234
00:10:34,330 --> 00:10:40,240
to understand what is the potential risk

235
00:10:37,240 --> 00:10:43,650
of a specific vulnerability right and I

236
00:10:40,240 --> 00:10:45,070
always try to simplify it into two

237
00:10:43,650 --> 00:10:48,910
categories

238
00:10:45,070 --> 00:10:52,420
right is this a real exploitable

239
00:10:48,910 --> 00:10:54,610
vulnerability or is it you know bad

240
00:10:52,420 --> 00:10:56,319
coding practice on the other hand or

241
00:10:54,610 --> 00:10:58,060
somewhere in between you have to

242
00:10:56,320 --> 00:11:00,339
understand how likely it is for someone

243
00:10:58,060 --> 00:11:03,160
to exploit it right maybe it's a sequel

244
00:11:00,339 --> 00:11:05,020
injection but there's a character limit

245
00:11:03,160 --> 00:11:07,329
length that makes it practically

246
00:11:05,020 --> 00:11:08,319
impossible to exploit okay we can live

247
00:11:07,330 --> 00:11:10,390
with that

248
00:11:08,320 --> 00:11:11,059
the other side is where is it is it on

249
00:11:10,390 --> 00:11:14,029
the public

250
00:11:11,059 --> 00:11:15,379
front-ends can anybody access it or you

251
00:11:14,029 --> 00:11:17,929
know it's somewhere on the

252
00:11:15,379 --> 00:11:20,539
administrative interface where only five

253
00:11:17,929 --> 00:11:23,149
people that I trust can exploit it and

254
00:11:20,539 --> 00:11:25,218
you have to understand that and learn

255
00:11:23,149 --> 00:11:26,829
how to use it and we'll get to that when

256
00:11:25,219 --> 00:11:31,879
we talk about how we mix it all together

257
00:11:26,829 --> 00:11:34,549
so learn to live with risk so before I

258
00:11:31,879 --> 00:11:37,099
go into the specific application

259
00:11:34,549 --> 00:11:39,019
security testing technologies I want to

260
00:11:37,099 --> 00:11:41,449
talk about the five criterias that I

261
00:11:39,019 --> 00:11:42,979
always look at when we talk with

262
00:11:41,449 --> 00:11:45,978
customers about application security

263
00:11:42,979 --> 00:11:49,729
testing in the context of CICP right

264
00:11:45,979 --> 00:11:52,189
it's speed how fast is it I think that's

265
00:11:49,729 --> 00:11:55,689
kind of self-explanatory if it's not

266
00:11:52,189 --> 00:11:58,728
fast we have a problem it's integration

267
00:11:55,689 --> 00:12:02,149
meaning how well does it build into my

268
00:11:58,729 --> 00:12:06,289
CI CV pipeline because if it doesn't I'm

269
00:12:02,149 --> 00:12:08,869
out ease-of-use developers do not want

270
00:12:06,289 --> 00:12:11,239
to learn to use complicated security

271
00:12:08,869 --> 00:12:14,389
tools they want something that works as

272
00:12:11,239 --> 00:12:17,289
part of their workflow in their IDE or

273
00:12:14,389 --> 00:12:20,869
whatever pipeline they're using

274
00:12:17,289 --> 00:12:24,679
relevance at people call it accuracy but

275
00:12:20,869 --> 00:12:26,569
I call it relevance how relevant are the

276
00:12:24,679 --> 00:12:29,139
findings is it something that they

277
00:12:26,569 --> 00:12:33,348
really need to take care of or is it a

278
00:12:29,139 --> 00:12:36,019
13,000 pages report then has 90% false

279
00:12:33,349 --> 00:12:38,479
positives and another 9% of things that

280
00:12:36,019 --> 00:12:41,529
are true but not really interesting

281
00:12:38,479 --> 00:12:44,959
right and then finally actionability

282
00:12:41,529 --> 00:12:47,329
once we find something can we really

283
00:12:44,959 --> 00:12:50,299
understand how to fix it really really

284
00:12:47,329 --> 00:12:52,789
quickly we don't have time to waste on

285
00:12:50,299 --> 00:12:57,559
now spending hours in learning and

286
00:12:52,789 --> 00:13:00,559
understanding right so let's talk about

287
00:12:57,559 --> 00:13:04,069
the ast landscape what works and what

288
00:13:00,559 --> 00:13:07,549
doesn't so one thing before I go into

289
00:13:04,069 --> 00:13:12,409
that I want to talk about this software

290
00:13:07,549 --> 00:13:13,939
security as a journey a lot of years we

291
00:13:12,409 --> 00:13:16,269
try to say well here are the best

292
00:13:13,939 --> 00:13:18,589
practices for software security right

293
00:13:16,269 --> 00:13:21,199
you should do all of them and you'll be

294
00:13:18,589 --> 00:13:23,059
fine right realistically it doesn't work

295
00:13:21,199 --> 00:13:24,020
this way right when when I went when I

296
00:13:23,059 --> 00:13:25,939
had my pen testing

297
00:13:24,020 --> 00:13:28,189
right you go to a customer they've never

298
00:13:25,940 --> 00:13:29,990
done AB sec they don't know what they

299
00:13:28,190 --> 00:13:33,770
need to do so they would usually just

300
00:13:29,990 --> 00:13:35,720
start they'll buy a pen test right you

301
00:13:33,770 --> 00:13:37,220
get them to pen test with the big sequel

302
00:13:35,720 --> 00:13:39,290
injections and the movies of how you

303
00:13:37,220 --> 00:13:42,260
exploit them and they get all nervous

304
00:13:39,290 --> 00:13:45,319
and they say oh okay so I need something

305
00:13:42,260 --> 00:13:47,720
more and then they start to mature right

306
00:13:45,320 --> 00:13:49,790
and as they start to mature they start

307
00:13:47,720 --> 00:13:52,190
building a program for application

308
00:13:49,790 --> 00:13:54,230
security they start integrating into

309
00:13:52,190 --> 00:13:56,990
their development and as they mature

310
00:13:54,230 --> 00:14:00,430
even more they get everything automated

311
00:13:56,990 --> 00:14:03,380
as part of their pipeline and so on so

312
00:14:00,430 --> 00:14:05,599
depending on your organization try to

313
00:14:03,380 --> 00:14:08,060
understand you're not going to be able

314
00:14:05,600 --> 00:14:11,750
to bring people all the way to the top

315
00:14:08,060 --> 00:14:12,709
in one day it's a process and there's a

316
00:14:11,750 --> 00:14:14,630
maturity process

317
00:14:12,709 --> 00:14:16,069
it's a maturity process on the security

318
00:14:14,630 --> 00:14:18,320
side it's a maturity process on the

319
00:14:16,070 --> 00:14:20,209
development side so you really have to

320
00:14:18,320 --> 00:14:22,880
understand that this is a journey and

321
00:14:20,209 --> 00:14:25,579
I'm sure by the time you get to the nice

322
00:14:22,880 --> 00:14:27,380
optimizing bullets there this space will

323
00:14:25,580 --> 00:14:30,350
evolve again and you'll need to do more

324
00:14:27,380 --> 00:14:33,829
things right so it's an ongoing work and

325
00:14:30,350 --> 00:14:37,399
what I try to explain to my customers

326
00:14:33,829 --> 00:14:40,459
always is the people on your application

327
00:14:37,399 --> 00:14:42,320
security team they need to drive this

328
00:14:40,459 --> 00:14:44,779
they need to drive the journey not the

329
00:14:42,320 --> 00:14:47,779
testing if they spend if you have six

330
00:14:44,779 --> 00:14:50,570
people doing pen tests all the day then

331
00:14:47,779 --> 00:14:52,939
you're not optimizing your resources

332
00:14:50,570 --> 00:14:55,579
because they should drive this maturity

333
00:14:52,940 --> 00:14:58,279
they should drive driving the security

334
00:14:55,579 --> 00:15:01,550
into the development process okay so

335
00:14:58,279 --> 00:15:04,779
let's go to the technical side so the

336
00:15:01,550 --> 00:15:07,550
ast landscape and I call it

337
00:15:04,779 --> 00:15:10,700
Astrix ast because now everything is

338
00:15:07,550 --> 00:15:13,430
sense - yes masked and a bunch of other

339
00:15:10,700 --> 00:15:17,390
acronyms all dubbed by Gartner by the

340
00:15:13,430 --> 00:15:19,459
way and some of them are better

341
00:15:17,390 --> 00:15:22,939
describing what it is and some are worse

342
00:15:19,459 --> 00:15:24,709
but we'll go through all of them so you

343
00:15:22,940 --> 00:15:26,420
see there's a lot of things in the space

344
00:15:24,709 --> 00:15:29,000
we're not going to talk about all of

345
00:15:26,420 --> 00:15:32,510
them but we're gonna focus on the first

346
00:15:29,000 --> 00:15:35,120
five and you know when you look at the

347
00:15:32,510 --> 00:15:37,459
legacy way of using things you could fit

348
00:15:35,120 --> 00:15:38,959
all these different technologies and

349
00:15:37,459 --> 00:15:44,079
things like architecture reviewing

350
00:15:38,959 --> 00:15:46,099
training into this nice waterfall phase

351
00:15:44,079 --> 00:15:50,179
but it's really all getting very

352
00:15:46,100 --> 00:15:52,910
confusing right so let's try to figure

353
00:15:50,179 --> 00:15:55,429
out what it all means so just to put it

354
00:15:52,910 --> 00:15:57,439
out there the criteria again and I'm

355
00:15:55,429 --> 00:15:59,600
gonna go through each of these talked

356
00:15:57,439 --> 00:16:02,660
about what it does and how does it fit

357
00:15:59,600 --> 00:16:04,459
the criteria so static analysis I assume

358
00:16:02,660 --> 00:16:06,949
everybody here knows what static

359
00:16:04,459 --> 00:16:09,349
analysis is but just to make sure we're

360
00:16:06,949 --> 00:16:12,410
all on the same page static analysis

361
00:16:09,350 --> 00:16:14,720
takes in code and analyzes how it's

362
00:16:12,410 --> 00:16:15,920
supposed to run what does it mean how

363
00:16:14,720 --> 00:16:18,769
it's supposed to run

364
00:16:15,920 --> 00:16:21,170
ideally static code analysis can do

365
00:16:18,769 --> 00:16:23,749
dataflow meaning it can see how your

366
00:16:21,170 --> 00:16:25,579
data goes through your code or what are

367
00:16:23,749 --> 00:16:28,189
the potential data passes through your

368
00:16:25,579 --> 00:16:30,769
code and code flow which is what is the

369
00:16:28,189 --> 00:16:32,689
potential code execution flow in your

370
00:16:30,769 --> 00:16:38,240
code right and these are things that

371
00:16:32,689 --> 00:16:43,399
look like these nice graphs AST oh sorry

372
00:16:38,240 --> 00:16:43,699
fast static analysis is probably right

373
00:16:43,399 --> 00:16:47,059
now

374
00:16:43,699 --> 00:16:49,069
the most prominent application security

375
00:16:47,059 --> 00:16:53,329
testing technology in the market in

376
00:16:49,069 --> 00:16:57,319
terms of revenue okay it's been around

377
00:16:53,329 --> 00:17:00,319
for a long time I think 45 was probably

378
00:16:57,319 --> 00:17:04,668
the first static analysis for security

379
00:17:00,319 --> 00:17:07,398
and that's early 2000s there are a lot

380
00:17:04,669 --> 00:17:10,039
of players in the space it's matured a

381
00:17:07,398 --> 00:17:12,770
lot it's improving a lot the early SAS

382
00:17:10,039 --> 00:17:15,289
technology was really bad in terms of

383
00:17:12,770 --> 00:17:18,619
false positives but we still have a lot

384
00:17:15,289 --> 00:17:21,349
of challenges with that there are still

385
00:17:18,619 --> 00:17:25,158
relatively lots of false positives in

386
00:17:21,349 --> 00:17:27,648
static analysis what makes static amount

387
00:17:25,159 --> 00:17:31,159
analyzers better over time is our

388
00:17:27,648 --> 00:17:33,799
ability to tune them better filter

389
00:17:31,159 --> 00:17:36,529
better help them become more relevant

390
00:17:33,799 --> 00:17:40,190
but they still generate false positives

391
00:17:36,529 --> 00:17:42,740
another thing they generate is bad

392
00:17:40,190 --> 00:17:46,279
coding practices so let's say I found

393
00:17:42,740 --> 00:17:47,960
something which is real it's a true

394
00:17:46,279 --> 00:17:50,330
positive it's not a false positive

395
00:17:47,960 --> 00:17:51,169
but it's something that may not really

396
00:17:50,330 --> 00:17:53,299
get

397
00:17:51,169 --> 00:17:54,980
exploited right is it false positive no

398
00:17:53,299 --> 00:17:58,158
it's a problem in your code should you

399
00:17:54,980 --> 00:18:00,619
fix it ideally yes is it a real risk

400
00:17:58,159 --> 00:18:04,239
hard to determine and this is one of the

401
00:18:00,619 --> 00:18:07,428
biggest challenges of static analysis

402
00:18:04,239 --> 00:18:09,499
now it's offered today in various

403
00:18:07,429 --> 00:18:11,659
flavors and I'll go and I'll talk about

404
00:18:09,499 --> 00:18:14,899
that in a minute so you can do it in

405
00:18:11,659 --> 00:18:18,139
binary in and build and so on so in

406
00:18:14,899 --> 00:18:20,418
terms of speed right speed of static

407
00:18:18,139 --> 00:18:22,309
analysis has always been its Achilles

408
00:18:20,419 --> 00:18:25,249
heel but it's changing a lot these days

409
00:18:22,309 --> 00:18:28,639
so the traditional static analyzers to

410
00:18:25,249 --> 00:18:31,730
take hours to run and hours as we all

411
00:18:28,639 --> 00:18:33,769
know is bad right we need five seconds

412
00:18:31,730 --> 00:18:38,389
at most to run something in a cacb

413
00:18:33,769 --> 00:18:39,710
pipeline in terms of integration it

414
00:18:38,389 --> 00:18:42,379
really depends on the vendor that you

415
00:18:39,710 --> 00:18:44,629
use some build it for security people

416
00:18:42,379 --> 00:18:46,699
and their integration is not so great

417
00:18:44,629 --> 00:18:49,488
some build it to for developers and

418
00:18:46,700 --> 00:18:52,249
their integration is much better ease of

419
00:18:49,489 --> 00:18:54,440
use depends I would say most of the

420
00:18:52,249 --> 00:18:57,590
traditional static analyzers tend to be

421
00:18:54,440 --> 00:19:01,129
complex some of the newcomers are easier

422
00:18:57,590 --> 00:19:03,949
to use relevance what I talked about it

423
00:19:01,129 --> 00:19:07,248
can be very overwhelming right 13,000

424
00:19:03,950 --> 00:19:09,649
pages is generally overwhelming to most

425
00:19:07,249 --> 00:19:12,499
developers I remember back in my

426
00:19:09,649 --> 00:19:14,629
consulting company days we were hired by

427
00:19:12,499 --> 00:19:18,320
one of the largest customers in Israel

428
00:19:14,629 --> 00:19:21,709
to to help them get a static analyzer in

429
00:19:18,320 --> 00:19:24,100
I won't mention the vendor we got in we

430
00:19:21,710 --> 00:19:28,820
got it wasn't as bad it was just I think

431
00:19:24,100 --> 00:19:30,408
700 pages but the developer came the

432
00:19:28,820 --> 00:19:33,590
developer team came back and said well

433
00:19:30,409 --> 00:19:35,419
we can fix everything in this report but

434
00:19:33,590 --> 00:19:39,259
we don't do new features for the next

435
00:19:35,419 --> 00:19:41,869
year and then they threw it out and we

436
00:19:39,259 --> 00:19:43,249
never did it anymore which is why I

437
00:19:41,869 --> 00:19:46,428
started my other company but we'll get

438
00:19:43,249 --> 00:19:48,799
to there in a minute so in terms of

439
00:19:46,429 --> 00:19:50,960
actionability those static analyzers are

440
00:19:48,799 --> 00:19:53,570
the best right they give you the exact

441
00:19:50,960 --> 00:19:55,309
line of code where to fix it how to fix

442
00:19:53,570 --> 00:19:57,139
it again depending on the quality of the

443
00:19:55,309 --> 00:20:00,049
vendor of course but they're generally

444
00:19:57,139 --> 00:20:03,129
spot-on now I want to talk a little bit

445
00:20:00,049 --> 00:20:06,879
about SAS flavors because we see

446
00:20:03,130 --> 00:20:08,380
a big shift in the space now because of

447
00:20:06,880 --> 00:20:10,510
the challenges that the traditional

448
00:20:08,380 --> 00:20:14,580
static analyzers are doing we do the

449
00:20:10,510 --> 00:20:17,740
same where it's shifting the same way so

450
00:20:14,580 --> 00:20:20,949
the traditional ones right if you look

451
00:20:17,740 --> 00:20:23,110
were the build ones right you take a

452
00:20:20,950 --> 00:20:25,990
static analyzer it integrates into the

453
00:20:23,110 --> 00:20:28,179
build it uses the build artifacts to

454
00:20:25,990 --> 00:20:30,580
better understand the data flow and code

455
00:20:28,180 --> 00:20:33,010
flow because it's easier to do so when

456
00:20:30,580 --> 00:20:37,629
you use the build from a technology

457
00:20:33,010 --> 00:20:39,400
perspective and then it you get the

458
00:20:37,630 --> 00:20:41,140
results the problem with it is that if

459
00:20:39,400 --> 00:20:44,320
you integrate to the build you're

460
00:20:41,140 --> 00:20:46,810
already not left enough in the process

461
00:20:44,320 --> 00:20:49,419
right I need to have a working code that

462
00:20:46,810 --> 00:20:50,889
builds I want to find things earlier the

463
00:20:49,420 --> 00:20:54,700
other problem is that they can take

464
00:20:50,890 --> 00:20:57,340
hours to run and they can be

465
00:20:54,700 --> 00:21:02,620
overwhelming so what we see is we see

466
00:20:57,340 --> 00:21:05,230
shift you know upwards in things that

467
00:21:02,620 --> 00:21:08,530
are faster so some offer incremental

468
00:21:05,230 --> 00:21:10,870
testing that happen in the ID they still

469
00:21:08,530 --> 00:21:13,210
leverage on the full build analysis but

470
00:21:10,870 --> 00:21:16,360
they can now only test the increment of

471
00:21:13,210 --> 00:21:20,110
code change this turns it from hours to

472
00:21:16,360 --> 00:21:22,840
minutes or seconds and we see this new

473
00:21:20,110 --> 00:21:27,580
trend which is the IDE spell checker

474
00:21:22,840 --> 00:21:31,120
right meaning as you code you get things

475
00:21:27,580 --> 00:21:33,100
identified before the build and it just

476
00:21:31,120 --> 00:21:35,320
comes up on your IDE like you type in

477
00:21:33,100 --> 00:21:36,879
word and you get a bad spelling you type

478
00:21:35,320 --> 00:21:38,679
your code and you get a security

479
00:21:36,880 --> 00:21:41,050
vulnerability these are really really

480
00:21:38,680 --> 00:21:43,420
great they're lightweight they're fast

481
00:21:41,050 --> 00:21:47,020
and they're as left as you can think

482
00:21:43,420 --> 00:21:49,720
about we also see things that are binary

483
00:21:47,020 --> 00:21:53,110
analysis these analyze binaries they're

484
00:21:49,720 --> 00:21:55,150
very popular for audits and supply chain

485
00:21:53,110 --> 00:21:57,219
challenges because you don't need the

486
00:21:55,150 --> 00:21:59,020
source code right they are favorite with

487
00:21:57,220 --> 00:22:00,310
security people I can take all the

488
00:21:59,020 --> 00:22:03,190
binaries I don't need any cooperation

489
00:22:00,310 --> 00:22:05,620
for my developer I've just uploaded and

490
00:22:03,190 --> 00:22:07,750
get results and they have their use like

491
00:22:05,620 --> 00:22:09,340
anything else in this space yet one

492
00:22:07,750 --> 00:22:11,800
thing you'll see as I go through this

493
00:22:09,340 --> 00:22:14,470
talk is there is not a single technology

494
00:22:11,800 --> 00:22:16,700
I think it's wrong they all have their

495
00:22:14,470 --> 00:22:19,039
place right and then

496
00:22:16,700 --> 00:22:20,600
managed services which is really great

497
00:22:19,039 --> 00:22:22,330
for those that are still evolving and

498
00:22:20,600 --> 00:22:26,299
don't know how to do this on their own

499
00:22:22,330 --> 00:22:29,509
but we we sell tons of that because you

500
00:22:26,299 --> 00:22:33,649
know they're short-staffed everywhere so

501
00:22:29,509 --> 00:22:36,200
that was sassed best dynamic application

502
00:22:33,649 --> 00:22:38,449
security testing so - was probably the

503
00:22:36,200 --> 00:22:40,730
first technology in the market right I

504
00:22:38,450 --> 00:22:42,529
think late 90s I remember they were

505
00:22:40,730 --> 00:22:45,289
still AppScan were the first they were

506
00:22:42,529 --> 00:22:47,840
still called perfecto in the first day I

507
00:22:45,289 --> 00:22:51,739
was still in my military service when I

508
00:22:47,840 --> 00:22:53,139
saw their presentation in 99 and my mind

509
00:22:51,739 --> 00:22:56,749
was blown

510
00:22:53,139 --> 00:23:02,299
HTTP hacking hidden field manipulation

511
00:22:56,749 --> 00:23:04,580
wow it's just been 20 years but it's

512
00:23:02,299 --> 00:23:07,480
challenging technology it's a

513
00:23:04,580 --> 00:23:10,908
challenging technology because it's slow

514
00:23:07,480 --> 00:23:13,759
- Danny really tends to run hours

515
00:23:10,909 --> 00:23:16,700
sometimes days I've had customers come

516
00:23:13,759 --> 00:23:18,830
to me well we don't care about accuracy

517
00:23:16,700 --> 00:23:21,859
we just needed to not run three days

518
00:23:18,830 --> 00:23:26,499
every time because that's really slows

519
00:23:21,859 --> 00:23:30,199
our CI pipeline and the results are not

520
00:23:26,499 --> 00:23:32,090
too accurate and worse they're not too

521
00:23:30,200 --> 00:23:34,220
relevant and one of the things we've

522
00:23:32,090 --> 00:23:35,330
discovered dest is only a tool for

523
00:23:34,220 --> 00:23:37,820
security people

524
00:23:35,330 --> 00:23:40,279
you're very rarely you'll see developers

525
00:23:37,820 --> 00:23:42,619
actually use it and because of that -

526
00:23:40,279 --> 00:23:46,220
has been very successful as a managed

527
00:23:42,619 --> 00:23:48,799
service again because you get it done so

528
00:23:46,220 --> 00:23:52,460
when you look at it for for CIC V I

529
00:23:48,799 --> 00:23:55,429
would generally say this is good mostly

530
00:23:52,460 --> 00:23:58,730
at the end for another verification

531
00:23:55,429 --> 00:24:02,480
layer or like Zane suggested just for

532
00:23:58,730 --> 00:24:05,330
very specific things because a full vast

533
00:24:02,480 --> 00:24:08,269
test takes hours two days it doesn't

534
00:24:05,330 --> 00:24:10,789
integrate into your CI CV pipeline very

535
00:24:08,269 --> 00:24:12,980
well and the worst part the worst part

536
00:24:10,789 --> 00:24:15,529
is that you don't know where to fix it

537
00:24:12,980 --> 00:24:17,600
in the code oh there's across it

538
00:24:15,529 --> 00:24:19,549
scripting somewhere behind these you

539
00:24:17,600 --> 00:24:22,279
know five thousand lines of code now

540
00:24:19,549 --> 00:24:24,918
spend the next two days finding them I

541
00:24:22,279 --> 00:24:26,389
remember I can't remember who wrote it

542
00:24:24,919 --> 00:24:29,650
but somebody wrote a blog about it maybe

543
00:24:26,389 --> 00:24:31,719
10 years ago calling them a badness

544
00:24:29,650 --> 00:24:34,800
right they tell you how bad your

545
00:24:31,720 --> 00:24:39,340
application is but that's about it

546
00:24:34,800 --> 00:24:42,940
so difficult so that brings me to IIST

547
00:24:39,340 --> 00:24:45,689
and I'm obviously biased toward I asked

548
00:24:42,940 --> 00:24:51,460
because it's what I did for the last

549
00:24:45,690 --> 00:24:54,070
almost 10 years but eius tries to take

550
00:24:51,460 --> 00:24:55,990
dynamic analysis in a different way and

551
00:24:54,070 --> 00:24:58,990
the way IIST work if you've never heard

552
00:24:55,990 --> 00:25:01,570
about it is does runtime code analysis

553
00:24:58,990 --> 00:25:03,970
using instrumentation for the most part

554
00:25:01,570 --> 00:25:05,649
sub technologies that don't support

555
00:25:03,970 --> 00:25:09,010
instrumentation use different techniques

556
00:25:05,650 --> 00:25:12,490
and the idea is that you put an agent on

557
00:25:09,010 --> 00:25:15,070
your server a very lightweight a engine

558
00:25:12,490 --> 00:25:17,140
that is in the test environment and I

559
00:25:15,070 --> 00:25:20,020
mentioned that could be in the 5 percent

560
00:25:17,140 --> 00:25:25,330
of the servers that you use for your AV

561
00:25:20,020 --> 00:25:28,120
testing and it will look at the code as

562
00:25:25,330 --> 00:25:30,370
it's being executed and it has flavors

563
00:25:28,120 --> 00:25:33,790
too and I'll talk about it as well but

564
00:25:30,370 --> 00:25:35,590
ideally it can see exactly how the code

565
00:25:33,790 --> 00:25:37,629
is being executed so it doesn't have to

566
00:25:35,590 --> 00:25:40,240
assess the data flow and code flow like

567
00:25:37,630 --> 00:25:42,520
the SAS still needs to do it just sees

568
00:25:40,240 --> 00:25:44,290
the code flow and the data that flows

569
00:25:42,520 --> 00:25:46,510
through the code so it knows exactly

570
00:25:44,290 --> 00:25:50,379
what has been accessed through the front

571
00:25:46,510 --> 00:25:52,510
end and is relevant and it can also look

572
00:25:50,380 --> 00:25:58,120
at code that is generated on the fly

573
00:25:52,510 --> 00:26:01,150
like struts and it really helps to run

574
00:25:58,120 --> 00:26:02,830
and if you've read some papers written

575
00:26:01,150 --> 00:26:05,380
about this in the last couple of years

576
00:26:02,830 --> 00:26:08,470
there's a general notion that IIST is

577
00:26:05,380 --> 00:26:12,570
very useful for CICP because it lets you

578
00:26:08,470 --> 00:26:16,270
test running code very very quickly so

579
00:26:12,570 --> 00:26:18,610
speed speed and it depends on the flavor

580
00:26:16,270 --> 00:26:22,870
and I'll talk about that in a minute but

581
00:26:18,610 --> 00:26:24,760
it's instant in the sense that you just

582
00:26:22,870 --> 00:26:26,770
throw it there and as people use it

583
00:26:24,760 --> 00:26:28,720
you're testing your test automation

584
00:26:26,770 --> 00:26:31,420
whatever uses the application you get

585
00:26:28,720 --> 00:26:36,360
feedback or hours if you want to

586
00:26:31,420 --> 00:26:40,390
simulate a full bath plus I asked in

587
00:26:36,360 --> 00:26:41,040
it's very integrated and I wouldn't

588
00:26:40,390 --> 00:26:43,380
necessarily

589
00:26:41,040 --> 00:26:45,540
say it's the core of the IIST technology

590
00:26:43,380 --> 00:26:47,880
but all the vendors that build is build

591
00:26:45,540 --> 00:26:50,460
it for CI CD and so they all spent a lot

592
00:26:47,880 --> 00:26:52,800
of energy on getting and into the test

593
00:26:50,460 --> 00:26:55,560
automation it's really really easy

594
00:26:52,800 --> 00:26:58,230
that's one of the big parts and it's

595
00:26:55,560 --> 00:27:01,139
very relevant so IIST helps you focus on

596
00:26:58,230 --> 00:27:03,450
the vulnerabilities that come from the

597
00:27:01,140 --> 00:27:06,660
front that come from the exploitable

598
00:27:03,450 --> 00:27:09,920
parts and that can really really have an

599
00:27:06,660 --> 00:27:12,570
impact and it's very actionable so it

600
00:27:09,920 --> 00:27:15,480
instrumentation looks at bytecode or CLR

601
00:27:12,570 --> 00:27:18,240
code so it won't give you the exact line

602
00:27:15,480 --> 00:27:20,850
code number like a static analyzer but

603
00:27:18,240 --> 00:27:23,460
it will give you something that's very

604
00:27:20,850 --> 00:27:26,909
very close to that and it's good enough

605
00:27:23,460 --> 00:27:29,760
for a decent developer so I want to talk

606
00:27:26,910 --> 00:27:32,040
a little bit about IIST flavors so

607
00:27:29,760 --> 00:27:34,020
there's been you know it's it's still

608
00:27:32,040 --> 00:27:35,820
new technology so there's still a lot of

609
00:27:34,020 --> 00:27:39,150
lenders trying to figure out how to do

610
00:27:35,820 --> 00:27:41,159
it the best and when we've learned is

611
00:27:39,150 --> 00:27:43,500
that like anything else there isn't one

612
00:27:41,160 --> 00:27:45,540
good answer so we're now building all

613
00:27:43,500 --> 00:27:47,850
these different modes but basically

614
00:27:45,540 --> 00:27:51,600
there's one approach that says I'm just

615
00:27:47,850 --> 00:27:53,699
gonna throw an agent and because I do

616
00:27:51,600 --> 00:27:55,679
runtime analysis I need to look at

617
00:27:53,700 --> 00:27:58,590
running code I need the application to

618
00:27:55,680 --> 00:28:00,480
be driven and I won't do that

619
00:27:58,590 --> 00:28:03,060
I'll let somebody else do it this is

620
00:28:00,480 --> 00:28:04,530
great for mature CI CD shops because

621
00:28:03,060 --> 00:28:07,020
they have test automation it was good

622
00:28:04,530 --> 00:28:10,050
coverage and I just throw my agent there

623
00:28:07,020 --> 00:28:14,610
and I see what they do and great and I

624
00:28:10,050 --> 00:28:16,020
can find results the challenge is it

625
00:28:14,610 --> 00:28:17,490
doesn't always have good coverage and

626
00:28:16,020 --> 00:28:18,780
you need I was just in a meeting the

627
00:28:17,490 --> 00:28:21,120
other day when the customer said well

628
00:28:18,780 --> 00:28:23,760
you know I don't have test automation

629
00:28:21,120 --> 00:28:27,719
yet we've well I was in 10 meetings like

630
00:28:23,760 --> 00:28:29,940
that not one and and it's not right

631
00:28:27,720 --> 00:28:33,750
because we're all trying to get to that

632
00:28:29,940 --> 00:28:35,520
point so the active urgent has a

633
00:28:33,750 --> 00:28:38,490
component it's a little bit that's like

634
00:28:35,520 --> 00:28:42,030
and can drive the application to drive

635
00:28:38,490 --> 00:28:44,550
this and can also create exploit and do

636
00:28:42,030 --> 00:28:47,490
fuzzing and malicious attacks but it's

637
00:28:44,550 --> 00:28:49,740
much faster than best and why is it

638
00:28:47,490 --> 00:28:51,030
because - because it's black box right

639
00:28:49,740 --> 00:28:53,700
it doesn't know anything about the

640
00:28:51,030 --> 00:28:56,190
application so it has to

641
00:28:53,700 --> 00:28:57,870
go through every parameter with all the

642
00:28:56,190 --> 00:29:00,030
vulnerabilities and all their flavors

643
00:28:57,870 --> 00:29:02,100
with is to just send a single request

644
00:29:00,030 --> 00:29:07,110
and you can do most of that analysis in

645
00:29:02,100 --> 00:29:10,590
the server side so moving on to the next

646
00:29:07,110 --> 00:29:12,840
buzzwords SCA or OSS this is very

647
00:29:10,590 --> 00:29:15,030
confusing because SCA used to be static

648
00:29:12,840 --> 00:29:18,600
code analysis and now it's software

649
00:29:15,030 --> 00:29:22,670
composition analysis or supply chain

650
00:29:18,600 --> 00:29:26,219
analysis which is another use of these

651
00:29:22,670 --> 00:29:29,490
letters anyway open source library

652
00:29:26,220 --> 00:29:32,340
scanning right this is becoming this

653
00:29:29,490 --> 00:29:33,900
probably the fastest growing space we

654
00:29:32,340 --> 00:29:35,939
just acquired another company in the

655
00:29:33,900 --> 00:29:39,360
space because it's growing so fast and

656
00:29:35,940 --> 00:29:41,640
basically open source canny says you're

657
00:29:39,360 --> 00:29:43,409
using a lot of third-party libraries in

658
00:29:41,640 --> 00:29:44,490
your code because you want to write code

659
00:29:43,410 --> 00:29:47,670
really really fast

660
00:29:44,490 --> 00:29:49,350
so you write ten lines of code to

661
00:29:47,670 --> 00:29:52,890
integrate five thousand lines of code

662
00:29:49,350 --> 00:29:55,139
and then we have no control on how our

663
00:29:52,890 --> 00:29:57,090
developers take these will never take

664
00:29:55,140 --> 00:29:59,190
these libraries how they use them do

665
00:29:57,090 --> 00:30:01,350
they update them if there's a new bug

666
00:29:59,190 --> 00:30:02,250
like heart bleeds do they update their

667
00:30:01,350 --> 00:30:05,699
SSL package

668
00:30:02,250 --> 00:30:07,800
who knows so SCA knows SCA goes through

669
00:30:05,700 --> 00:30:10,860
your code there are variants for that in

670
00:30:07,800 --> 00:30:13,950
both binary analysis to look at against

671
00:30:10,860 --> 00:30:16,830
supply chain and built-in binaries or

672
00:30:13,950 --> 00:30:19,230
source announces that will find these

673
00:30:16,830 --> 00:30:21,389
things and it's amazing you know we run

674
00:30:19,230 --> 00:30:25,350
these tools you can go to a customer and

675
00:30:21,390 --> 00:30:28,320
you find they use 20 different instances

676
00:30:25,350 --> 00:30:31,830
with different versions of OpenSSL in

677
00:30:28,320 --> 00:30:34,110
the same application why because this

678
00:30:31,830 --> 00:30:36,000
application was built by 100 developers

679
00:30:34,110 --> 00:30:37,669
and each one either oh and you did so

680
00:30:36,000 --> 00:30:40,350
let me just download this from somewhere

681
00:30:37,670 --> 00:30:42,300
and you know five of them still have

682
00:30:40,350 --> 00:30:48,300
heartbleed in them even though it's four

683
00:30:42,300 --> 00:30:51,450
years old now so this is your SCA s also

684
00:30:48,300 --> 00:30:54,120
it you know if this space started from

685
00:30:51,450 --> 00:30:56,190
licensing and compliance before it went

686
00:30:54,120 --> 00:30:58,290
to security because another problem is

687
00:30:56,190 --> 00:31:02,040
that you get you know a lot of bad

688
00:30:58,290 --> 00:31:04,860
licensing in but it's now building up to

689
00:31:02,040 --> 00:31:07,710
be great security solution it works well

690
00:31:04,860 --> 00:31:11,158
with C ICD and again it's being

691
00:31:07,710 --> 00:31:15,360
push earlier on into the IDE into

692
00:31:11,159 --> 00:31:17,250
incremental testing into ease-of-use I

693
00:31:15,360 --> 00:31:20,129
think the biggest challenge that we have

694
00:31:17,250 --> 00:31:22,260
today and that's true all vendors in the

695
00:31:20,130 --> 00:31:24,600
space we all have the same challenge is

696
00:31:22,260 --> 00:31:28,710
we can tell you that your code has a

697
00:31:24,600 --> 00:31:31,678
vulnerable piece of of library we can't

698
00:31:28,710 --> 00:31:34,710
yet tell you whether you actually run

699
00:31:31,679 --> 00:31:36,870
this code or not and so you have to fix

700
00:31:34,710 --> 00:31:38,940
it regardless of whether you really have

701
00:31:36,870 --> 00:31:42,270
to fix it or not and it's a challenge

702
00:31:38,940 --> 00:31:45,000
and I think I hope that we're able to

703
00:31:42,270 --> 00:31:48,980
get some progress on this now that we

704
00:31:45,000 --> 00:31:52,289
can combine a static analyzer and SCA

705
00:31:48,980 --> 00:31:55,049
one more buzz word before I move on to

706
00:31:52,289 --> 00:31:57,899
getting it all to work together mast

707
00:31:55,049 --> 00:31:59,429
mobile application security testing so

708
00:31:57,899 --> 00:32:01,439
this has been very confusing right

709
00:31:59,429 --> 00:32:02,880
because Gardner said there was a store

710
00:32:01,440 --> 00:32:04,409
his desk and there were he's asked and

711
00:32:02,880 --> 00:32:07,620
there was a mast and it sounds like it's

712
00:32:04,409 --> 00:32:10,350
just another way to test code but it

713
00:32:07,620 --> 00:32:12,629
really isn't so mast which is mobile

714
00:32:10,350 --> 00:32:14,850
application security testing is how do

715
00:32:12,630 --> 00:32:16,470
we test mobile applications and in fact

716
00:32:14,850 --> 00:32:18,830
it's a combination of all of the

717
00:32:16,470 --> 00:32:22,649
previous ones plus something called

718
00:32:18,830 --> 00:32:24,990
behavior analysis which are applied

719
00:32:22,649 --> 00:32:26,820
towards mobile application so I'm not

720
00:32:24,990 --> 00:32:29,490
going to talk specifically about math

721
00:32:26,820 --> 00:32:31,770
because it's just more of the same right

722
00:32:29,490 --> 00:32:38,279
but if you've heard the buzz word it's

723
00:32:31,770 --> 00:32:40,440
it's great okay so how do we make it all

724
00:32:38,279 --> 00:32:41,940
work now that we understand what works

725
00:32:40,440 --> 00:32:44,399
and what doesn't work

726
00:32:41,940 --> 00:32:48,270
and I want to go through a few key

727
00:32:44,399 --> 00:32:49,709
principles that I really hope that they

728
00:32:48,270 --> 00:32:51,350
were mentioned yesterday already more

729
00:32:49,710 --> 00:32:55,200
than once but I'll repeat them anyway

730
00:32:51,350 --> 00:32:57,360
and the first one is very important if

731
00:32:55,200 --> 00:33:00,440
you can't beat them join them I have

732
00:32:57,360 --> 00:33:02,850
never ever ever seen a successful

733
00:33:00,440 --> 00:33:06,020
security implementation in cacb

734
00:33:02,850 --> 00:33:09,149
where all this is driven by security

735
00:33:06,020 --> 00:33:11,399
security can't do security I know it's

736
00:33:09,149 --> 00:33:13,168
it's weird but the security can only

737
00:33:11,399 --> 00:33:15,178
guide the development of how to do

738
00:33:13,169 --> 00:33:19,230
security right

739
00:33:15,179 --> 00:33:21,230
it's like QA can't do quality they can

740
00:33:19,230 --> 00:33:25,160
just help

741
00:33:21,230 --> 00:33:27,049
built quality code right so we have to

742
00:33:25,160 --> 00:33:28,490
enable the developers and I'm not gonna

743
00:33:27,049 --> 00:33:30,549
repeat that because everybody mentioned

744
00:33:28,490 --> 00:33:32,960
this a million times

745
00:33:30,549 --> 00:33:36,040
automation automation automation

746
00:33:32,960 --> 00:33:40,220
otherwise we end up like this nice lady

747
00:33:36,040 --> 00:33:43,520
building things very very slowly we

748
00:33:40,220 --> 00:33:46,040
cannot rely on any manual process so I

749
00:33:43,520 --> 00:33:48,379
went to this customer met maybe two

750
00:33:46,040 --> 00:33:50,659
years ago and they said we really

751
00:33:48,380 --> 00:33:52,100
figured out how to use again won't

752
00:33:50,660 --> 00:33:54,410
mention the name one of the largest

753
00:33:52,100 --> 00:33:56,870
static analysis then there's in our CI

754
00:33:54,410 --> 00:34:00,860
pipeline so every night we do a built

755
00:33:56,870 --> 00:34:03,020
and we run that tool and we can use the

756
00:34:00,860 --> 00:34:04,939
results in the morning said but what

757
00:34:03,020 --> 00:34:08,330
about all the false positive so in the

758
00:34:04,940 --> 00:34:11,179
morning we have a team of six security

759
00:34:08,330 --> 00:34:13,279
people that come in and go through all

760
00:34:11,179 --> 00:34:14,720
of the results and push them to the bug

761
00:34:13,280 --> 00:34:17,149
tracking system if they think they're

762
00:34:14,719 --> 00:34:20,899
relevant oh no that's not a great

763
00:34:17,149 --> 00:34:22,638
solution and then you know two weeks

764
00:34:20,899 --> 00:34:23,899
later I sit with this guy for lunch and

765
00:34:22,639 --> 00:34:25,760
we're talking of you know just a

766
00:34:23,899 --> 00:34:27,440
friendly conversation say well we're

767
00:34:25,760 --> 00:34:31,369
becoming a real bottleneck in the

768
00:34:27,440 --> 00:34:33,619
process seriously that's surprising so

769
00:34:31,369 --> 00:34:35,149
everything has to be automated if you

770
00:34:33,619 --> 00:34:36,260
have a manual process somewhere in the

771
00:34:35,149 --> 00:34:38,960
way kill it

772
00:34:36,260 --> 00:34:43,909
find a way write code script it or get

773
00:34:38,960 --> 00:34:47,000
rid of it or move it to the side shift

774
00:34:43,909 --> 00:34:51,859
left I think we all understand that as

775
00:34:47,000 --> 00:34:54,830
early as possible as I said get testing

776
00:34:51,859 --> 00:34:59,960
done on the IDE get everything fixed as

777
00:34:54,830 --> 00:35:04,310
well multiple technologies flavors and

778
00:34:59,960 --> 00:35:05,930
times so a lot of smaller vendors I you

779
00:35:04,310 --> 00:35:10,279
know we're all we're all guilty of this

780
00:35:05,930 --> 00:35:13,460
crime want to tell you that you have the

781
00:35:10,280 --> 00:35:16,400
gold solution you know just put this and

782
00:35:13,460 --> 00:35:18,590
your problems go away I wish that was

783
00:35:16,400 --> 00:35:21,770
true because if it was I would be much

784
00:35:18,590 --> 00:35:24,170
richer now but the reality is there is

785
00:35:21,770 --> 00:35:25,970
no one solution that solves everything

786
00:35:24,170 --> 00:35:29,770
so you've seen all the solutions they

787
00:35:25,970 --> 00:35:32,240
managed mentioned was their little

788
00:35:29,770 --> 00:35:34,660
flavors and everything and they're still

789
00:35:32,240 --> 00:35:37,029
not enough so everything you do

790
00:35:34,660 --> 00:35:39,190
you're going to need a mix what is the

791
00:35:37,029 --> 00:35:40,989
mix depending on how you build software

792
00:35:39,190 --> 00:35:43,630
on what type of technologies you use

793
00:35:40,989 --> 00:35:48,099
what speed you want to go at but you're

794
00:35:43,630 --> 00:35:50,859
gonna need to find the right mix now

795
00:35:48,099 --> 00:35:55,210
this is really important parallel tracks

796
00:35:50,859 --> 00:35:57,249
in parallel speeds there is all these

797
00:35:55,210 --> 00:35:59,349
nice new technologies to do everything

798
00:35:57,249 --> 00:36:02,919
really quickly right like the IDE base

799
00:35:59,349 --> 00:36:05,829
ax and the in line is they have their

800
00:36:02,920 --> 00:36:08,170
limitations right it's maybe coverage or

801
00:36:05,829 --> 00:36:10,210
depth of analysis there is a reason why

802
00:36:08,170 --> 00:36:12,369
the full analysis takes four hours and

803
00:36:10,210 --> 00:36:14,979
the lightweight analysis takes five

804
00:36:12,369 --> 00:36:16,479
seconds it's not that somebody cracked

805
00:36:14,979 --> 00:36:19,629
the solution it's that they're making

806
00:36:16,479 --> 00:36:22,720
compromises so you need to work in

807
00:36:19,630 --> 00:36:24,489
parallel tracks what does that mean you

808
00:36:22,720 --> 00:36:27,660
need to figure out what can work fast

809
00:36:24,489 --> 00:36:32,349
enough for the speed that you're having

810
00:36:27,660 --> 00:36:34,569
that you can put it as a gate right as

811
00:36:32,349 --> 00:36:37,180
something that happens in real time in

812
00:36:34,569 --> 00:36:40,058
your CI CD and then you need to figure

813
00:36:37,180 --> 00:36:42,069
out what you take out think like a train

814
00:36:40,059 --> 00:36:45,039
right you take it to a slower track and

815
00:36:42,069 --> 00:36:46,900
you can do that maybe once every week or

816
00:36:45,039 --> 00:36:49,839
once every month or whenever you feel

817
00:36:46,900 --> 00:36:52,660
like that looks at deeper and then

818
00:36:49,839 --> 00:36:55,239
pushes things to the backlog right

819
00:36:52,660 --> 00:36:58,868
because we still want to fix everything

820
00:36:55,239 --> 00:37:00,489
but maybe not right now so this is super

821
00:36:58,869 --> 00:37:03,430
important you need to figure out your

822
00:37:00,489 --> 00:37:05,829
tracks and I mentioned that but you

823
00:37:03,430 --> 00:37:07,930
really have to accept the risk you know

824
00:37:05,829 --> 00:37:11,319
the same don't get into the kitchen if

825
00:37:07,930 --> 00:37:13,089
you can't stand the heat if you don't

826
00:37:11,319 --> 00:37:17,380
accept risk you're in the wrong business

827
00:37:13,089 --> 00:37:21,578
security is all about risk management so

828
00:37:17,380 --> 00:37:24,219
how to make it work so what we see as we

829
00:37:21,579 --> 00:37:27,430
look at the faster and faster customers

830
00:37:24,219 --> 00:37:30,339
is that they're only things that really

831
00:37:27,430 --> 00:37:33,129
work well and the critical path right is

832
00:37:30,339 --> 00:37:39,160
part of what's happening in real time in

833
00:37:33,130 --> 00:37:41,499
the cacb pipeline is instant or passive

834
00:37:39,160 --> 00:37:43,538
or things that are just there right that

835
00:37:41,499 --> 00:37:45,578
happen in the background while you code

836
00:37:43,539 --> 00:37:48,460
or test your application and that's

837
00:37:45,579 --> 00:37:51,070
mostly the NIV spell checker

838
00:37:48,460 --> 00:37:54,760
type or incremental if it's very very

839
00:37:51,070 --> 00:37:57,390
very fast where your developers write

840
00:37:54,760 --> 00:38:01,210
code they don't open another software

841
00:37:57,390 --> 00:38:03,970
they just write code and they get

842
00:38:01,210 --> 00:38:06,310
findings on their code and the findings

843
00:38:03,970 --> 00:38:09,310
have to be limited to the relevant stuff

844
00:38:06,310 --> 00:38:11,170
it's tuned to show only the real things

845
00:38:09,310 --> 00:38:12,940
you want to look at all the you know

846
00:38:11,170 --> 00:38:15,700
hundreds of things you can do that in

847
00:38:12,940 --> 00:38:20,320
the slower paths but this has to be very

848
00:38:15,700 --> 00:38:22,330
focused and in the ID and you if you've

849
00:38:20,320 --> 00:38:24,160
never written real code you don't

850
00:38:22,330 --> 00:38:27,009
understand how significant that is if

851
00:38:24,160 --> 00:38:30,730
you write something and now you get a

852
00:38:27,010 --> 00:38:35,380
warning you fix it in one second right

853
00:38:30,730 --> 00:38:38,109
if you get the same data tomorrow

854
00:38:35,380 --> 00:38:41,170
it's already gonna be like 15 minutes

855
00:38:38,109 --> 00:38:43,150
right if you get it in a week it's gonna

856
00:38:41,170 --> 00:38:44,950
be happening because you don't know what

857
00:38:43,150 --> 00:38:48,609
you wrote anymore

858
00:38:44,950 --> 00:38:50,319
so and the other part is the in line is

859
00:38:48,609 --> 00:38:52,390
the thing that you put in your

860
00:38:50,320 --> 00:38:55,270
integration servers where they go into

861
00:38:52,390 --> 00:38:58,750
testing and the a/b testing and just

862
00:38:55,270 --> 00:39:00,369
sees whatever is happening as code is

863
00:38:58,750 --> 00:39:03,339
being executed by your test automation

864
00:39:00,369 --> 00:39:04,900
and these can feedback so quickly that

865
00:39:03,339 --> 00:39:07,330
they can be part of your critical path

866
00:39:04,900 --> 00:39:12,160
all the rest and I'll get to the diagram

867
00:39:07,330 --> 00:39:13,660
in a second all the rest are our further

868
00:39:12,160 --> 00:39:17,529
slower tracks because they're slower

869
00:39:13,660 --> 00:39:21,009
that's a reality of course if you have

870
00:39:17,530 --> 00:39:23,349
just a CI pipeline that's once a night

871
00:39:21,010 --> 00:39:26,320
then you can use a lot of other things

872
00:39:23,349 --> 00:39:28,030
in the critical path and that's fine too

873
00:39:26,320 --> 00:39:30,119
the other thing is you need to define

874
00:39:28,030 --> 00:39:33,339
practical and I go back to risk here

875
00:39:30,119 --> 00:39:35,260
practical policies for what we call hard

876
00:39:33,339 --> 00:39:38,170
gates and soft gates right so hard gate

877
00:39:35,260 --> 00:39:41,200
is I don't let this go forward right

878
00:39:38,170 --> 00:39:44,830
meaning sequel injection on my login

879
00:39:41,200 --> 00:39:48,189
screen okay that's a blocker you need to

880
00:39:44,830 --> 00:39:50,410
minimize as much as you can and that

881
00:39:48,190 --> 00:39:53,320
goes back to risk appetite what you put

882
00:39:50,410 --> 00:39:54,879
in the hot box really just the really

883
00:39:53,320 --> 00:39:57,310
hardcore stuff because if you keep

884
00:39:54,880 --> 00:39:59,650
locking the R&D they're gonna throw you

885
00:39:57,310 --> 00:40:01,580
out and if we don't work with them right

886
00:39:59,650 --> 00:40:03,590
we're done

887
00:40:01,580 --> 00:40:07,130
latest all the rest something means I

888
00:40:03,590 --> 00:40:08,930
saw this I put a process in motion to

889
00:40:07,130 --> 00:40:10,880
remediate them what does that mean it

890
00:40:08,930 --> 00:40:13,549
could be that it goes into the backlog

891
00:40:10,880 --> 00:40:15,380
was a certain time limit it means that

892
00:40:13,550 --> 00:40:16,850
there's a review process right like they

893
00:40:15,380 --> 00:40:19,100
said let's have a discussion about this

894
00:40:16,850 --> 00:40:20,810
so you need to have these things you

895
00:40:19,100 --> 00:40:24,500
need to have these controls but they

896
00:40:20,810 --> 00:40:27,200
shouldn't block the CICP pipeline we

897
00:40:24,500 --> 00:40:29,110
really want to enable the velocity and

898
00:40:27,200 --> 00:40:35,359
not slowing me down

899
00:40:29,110 --> 00:40:42,110
so if I go back to this crazy diagram

900
00:40:35,360 --> 00:40:44,720
okay we have as I said IDE incremental

901
00:40:42,110 --> 00:40:47,750
if it's fast inline ions in these phases

902
00:40:44,720 --> 00:40:50,779
that are part of the fast pipeline and

903
00:40:47,750 --> 00:40:53,990
then as we go to the full deployment I

904
00:40:50,780 --> 00:40:56,810
create a separate track where I can do a

905
00:40:53,990 --> 00:40:58,819
SAS a managed fast if I prefer it takes

906
00:40:56,810 --> 00:41:01,910
days but I don't care it's it's on a

907
00:40:58,820 --> 00:41:04,760
slower track right I can run a full desk

908
00:41:01,910 --> 00:41:08,089
in the end I had a customer that had SAS

909
00:41:04,760 --> 00:41:09,620
- - SAS they bought our is Anna - and

910
00:41:08,090 --> 00:41:11,420
said why do you need so many good well

911
00:41:09,620 --> 00:41:13,759
the - is just there to check our

912
00:41:11,420 --> 00:41:17,360
production site if it finds something I

913
00:41:13,760 --> 00:41:19,150
get fired right because it we are not

914
00:41:17,360 --> 00:41:21,890
supposed to have anything at this point

915
00:41:19,150 --> 00:41:25,130
but this is you know and this is a

916
00:41:21,890 --> 00:41:27,950
suggestion of course it's not one truth

917
00:41:25,130 --> 00:41:32,930
but this helps you understand how to put

918
00:41:27,950 --> 00:41:35,290
it in there so I talked about that rely

919
00:41:32,930 --> 00:41:38,480
heavily on integrated technologies

920
00:41:35,290 --> 00:41:40,759
practical blocking criteria and push all

921
00:41:38,480 --> 00:41:44,180
the rest of the backlog now last thing

922
00:41:40,760 --> 00:41:45,590
before I'm done a be testing I mentioned

923
00:41:44,180 --> 00:41:47,810
this in the beginning and I'm coming

924
00:41:45,590 --> 00:41:50,140
vector in the end because I think this

925
00:41:47,810 --> 00:41:53,180
is going to be the biggest shift in

926
00:41:50,140 --> 00:41:55,660
security testing in the coming years or

927
00:41:53,180 --> 00:41:58,819
at least dynamic security testing

928
00:41:55,660 --> 00:42:02,359
testing environments are going away a be

929
00:41:58,820 --> 00:42:04,370
testing is the new king and you have to

930
00:42:02,360 --> 00:42:06,710
be part of it don't fight it don't say

931
00:42:04,370 --> 00:42:09,830
we have to get at least a small test

932
00:42:06,710 --> 00:42:11,540
done then no no maybe testing and don't

933
00:42:09,830 --> 00:42:14,180
worry because if you build your a be

934
00:42:11,540 --> 00:42:14,779
testing right then you won't have a

935
00:42:14,180 --> 00:42:17,569
problem

936
00:42:14,780 --> 00:42:20,150
because this 1% is not exposed to the

937
00:42:17,570 --> 00:42:22,100
Internet it's exposed to a closed set of

938
00:42:20,150 --> 00:42:25,220
users it's behind the load balancer that

939
00:42:22,100 --> 00:42:26,720
only direct specific users to their and

940
00:42:25,220 --> 00:42:28,879
while they're testing it for

941
00:42:26,720 --> 00:42:30,799
functionality you can test security on

942
00:42:28,880 --> 00:42:32,240
the same environment don't worry about

943
00:42:30,800 --> 00:42:34,100
it just make sure you use the right tool

944
00:42:32,240 --> 00:42:36,620
that doesn't disturb the users while

945
00:42:34,100 --> 00:42:39,110
they're working on it be part of the a/b

946
00:42:36,620 --> 00:42:44,120
testing revolution because it will make

947
00:42:39,110 --> 00:42:46,760
your job better so software security

948
00:42:44,120 --> 00:42:49,819
testing is not simple I think we all

949
00:42:46,760 --> 00:42:52,490
agree about that there's no one solution

950
00:42:49,820 --> 00:42:55,400
but we can make it work and we can make

951
00:42:52,490 --> 00:42:57,950
it work really great in CI C D and we

952
00:42:55,400 --> 00:43:00,050
can fix things really fast in CI CV

953
00:42:57,950 --> 00:43:03,919
which is the app side of that as they

954
00:43:00,050 --> 00:43:06,980
mentioned so work was your R&D and get

955
00:43:03,920 --> 00:43:10,090
it done and finally this I took on my

956
00:43:06,980 --> 00:43:15,910
first day here so if you haven't been to

957
00:43:10,090 --> 00:43:15,910
Marina Bay Gardens go there thank you

958
00:43:17,200 --> 00:43:20,200
questions

959
00:43:21,410 --> 00:43:24,790
no questions all here

960
00:43:28,260 --> 00:43:32,790
just oh wait there's a question

961
00:43:35,589 --> 00:43:44,170
you know so in terms of a be testing

962
00:43:39,910 --> 00:43:47,859
right like you said you release 1%

963
00:43:44,170 --> 00:43:51,700
traffic 5% traffic so what do you think

964
00:43:47,859 --> 00:43:55,749
is the best way of of building something

965
00:43:51,700 --> 00:43:57,759
that can that can doubt that traffic you

966
00:43:55,749 --> 00:43:59,379
know based on those parameters like

967
00:43:57,759 --> 00:44:02,969
whether you want to do internal customer

968
00:43:59,380 --> 00:44:06,039
testing or percentage based testing so

969
00:44:02,969 --> 00:44:10,089
I'll start with the answer that I

970
00:44:06,039 --> 00:44:11,410
wouldn't let security be the guide to

971
00:44:10,089 --> 00:44:13,440
how to build the AV testing

972
00:44:11,410 --> 00:44:15,969
you should leave this to the DevOps team

973
00:44:13,440 --> 00:44:19,119
but generally speaking and this what

974
00:44:15,969 --> 00:44:21,700
I've seen most of organizations that go

975
00:44:19,119 --> 00:44:25,690
there do you would want to get an

976
00:44:21,700 --> 00:44:28,210
initial very small subset of people that

977
00:44:25,690 --> 00:44:32,009
are internal people right your QA team

978
00:44:28,210 --> 00:44:35,440
or whatever they wants to work on it and

979
00:44:32,009 --> 00:44:37,180
you put it again most of what customers

980
00:44:35,440 --> 00:44:39,309
will have they'll have a central server

981
00:44:37,180 --> 00:44:43,719
that takes in the traffic usually it's

982
00:44:39,309 --> 00:44:45,430
an SSL Terminator as well and will route

983
00:44:43,719 --> 00:44:47,440
you to our authentication server and

984
00:44:45,430 --> 00:44:49,989
then based on your user whether it's IP

985
00:44:47,440 --> 00:44:52,630
or your credentials that you use it will

986
00:44:49,989 --> 00:44:54,940
route you to a set of servers that now

987
00:44:52,630 --> 00:44:58,059
have this new version right and you'll

988
00:44:54,940 --> 00:45:00,130
get first just your internal employees

989
00:44:58,059 --> 00:45:04,299
and then the next group which is still

990
00:45:00,130 --> 00:45:05,859
very restricted is a group of customers

991
00:45:04,299 --> 00:45:08,859
that you have a good relationship with

992
00:45:05,859 --> 00:45:13,630
and agreed to be part of your beta

993
00:45:08,859 --> 00:45:14,558
testing for a discount or whatever game

994
00:45:13,630 --> 00:45:18,130
you play with them

995
00:45:14,559 --> 00:45:20,229
and they run it for another hundred

996
00:45:18,130 --> 00:45:23,259
minutes or hours depending how big the

997
00:45:20,229 --> 00:45:25,450
changes and so on and at this point the

998
00:45:23,259 --> 00:45:28,089
servers that serve this are restricted

999
00:45:25,450 --> 00:45:30,489
right because only these users where

1000
00:45:28,089 --> 00:45:32,558
however you identified them can go there

1001
00:45:30,489 --> 00:45:35,109
and it's a great time to the security

1002
00:45:32,559 --> 00:45:37,029
testing right and then later as you

1003
00:45:35,109 --> 00:45:39,098
start expanding it obviously there you

1004
00:45:37,029 --> 00:45:41,559
start introducing risk right because if

1005
00:45:39,099 --> 00:45:44,170
you say I randomly push it to 10 percent

1006
00:45:41,559 --> 00:45:45,819
of the customers if a hacker is one of

1007
00:45:44,170 --> 00:45:47,380
these ten percent then he can start

1008
00:45:45,819 --> 00:45:48,180
acting that but ideally you've already

1009
00:45:47,380 --> 00:45:50,550
done

1010
00:45:48,180 --> 00:45:53,190
some testing in the earlier phases sure

1011
00:45:50,550 --> 00:45:56,819
so from implementation point of view it

1012
00:45:53,190 --> 00:45:58,559
would be like a customized layer that

1013
00:45:56,819 --> 00:46:00,240
would you that you would be building

1014
00:45:58,559 --> 00:46:02,460
that would be doing kind of a smart

1015
00:46:00,240 --> 00:46:05,700
routing in place Yeah right like having

1016
00:46:02,460 --> 00:46:07,079
these additional parameters yes okay

1017
00:46:05,700 --> 00:46:08,730
we're out of time if you have more

1018
00:46:07,079 --> 00:46:11,369
questions you're more than welcome to

1019
00:46:08,730 --> 00:46:15,010
talk to me outside thank you very much

1020
00:46:11,369 --> 00:46:18,129
for coming thank you for inviting me

1021
00:46:15,010 --> 00:46:18,129
[Applause]

