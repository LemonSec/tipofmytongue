1
00:00:04,080 --> 00:00:09,180
now before we get started how many of

2
00:00:06,900 --> 00:00:10,980
you know about graph QL and

3
00:00:09,180 --> 00:00:15,600
microservices how many of you use them

4
00:00:10,980 --> 00:00:18,420
at least are heard about it ok who did

5
00:00:15,600 --> 00:00:23,099
not heard about graph QL on micro

6
00:00:18,420 --> 00:00:29,880
sources wow that's almost none fair

7
00:00:23,099 --> 00:00:33,360
enough okay so before we get started we

8
00:00:29,880 --> 00:00:36,539
will watch a simple clip and I want you

9
00:00:33,360 --> 00:00:39,239
to relate this video with Tanya's

10
00:00:36,539 --> 00:00:42,899
keynote and also Saenz keynote and how

11
00:00:39,239 --> 00:00:45,269
it relates to us as developers how as

12
00:00:42,899 --> 00:00:48,260
the security engineers and as ops

13
00:00:45,269 --> 00:00:52,710
engineer okay and this is a classic of

14
00:00:48,260 --> 00:00:56,429
Singapore from I think money know enough

15
00:00:52,710 --> 00:01:03,149
this is this clip is from a movie and I

16
00:00:56,429 --> 00:01:05,909
asked one of my friend so I asked my

17
00:01:03,149 --> 00:01:09,000
friend hey how what's your definition of

18
00:01:05,909 --> 00:01:12,600
depth sir cops right and this is the

19
00:01:09,000 --> 00:01:20,270
clip you showed me okay so we're gonna

20
00:01:12,600 --> 00:01:20,270
watch this video can you get it

21
00:01:29,170 --> 00:01:32,370
okay so

22
00:01:33,170 --> 00:01:38,720
nevermind support this video basically

23
00:01:36,500 --> 00:01:40,960
says is that there are three people

24
00:01:38,720 --> 00:01:42,530
involved in here one a sales person and

25
00:01:40,960 --> 00:01:44,960
another person

26
00:01:42,530 --> 00:01:47,780
two of them are customers one of the guy

27
00:01:44,960 --> 00:01:49,820
who's in the white shirt t-shirt is a

28
00:01:47,780 --> 00:01:51,860
customer okay and he doesn't understand

29
00:01:49,820 --> 00:01:54,440
English and that's why he got someone

30
00:01:51,860 --> 00:02:04,580
who can understand and speak English as

31
00:01:54,440 --> 00:02:10,008
well now Indian extra pennies are okay

32
00:02:04,580 --> 00:02:12,320
nice being reasonably me people are my

33
00:02:10,008 --> 00:02:21,369
frame onto buddies computer because you

34
00:02:12,320 --> 00:02:26,840
want to play Indian exa Indian eka

35
00:02:21,370 --> 00:02:31,910
Internet you mean tomorrow I see you

36
00:02:26,840 --> 00:02:36,830
also understand why how many money how

37
00:02:31,910 --> 00:02:40,209
many money coming

38
00:02:36,830 --> 00:02:40,209
how many dollar ah

39
00:02:44,019 --> 00:02:48,920
depends on your requirement sir our

40
00:02:46,970 --> 00:02:49,579
party son is very good the speed is very

41
00:02:48,920 --> 00:02:53,899
fast

42
00:02:49,579 --> 00:02:58,250
you got 64 megabyte okay

43
00:02:53,900 --> 00:03:01,400
how many money huh how much how much for

44
00:02:58,250 --> 00:03:07,370
this one is 1019 I tolerate watching

45
00:03:01,400 --> 00:03:08,930
Goku yeah yeah today yeah I go ah my

46
00:03:07,370 --> 00:03:11,079
friends they are eco outside smelly

47
00:03:08,930 --> 00:03:14,000
smelly can buy to capital R this price

48
00:03:11,079 --> 00:03:17,390
okay this is market price every waste

49
00:03:14,000 --> 00:03:19,489
the same like your anchor I thought I'd

50
00:03:17,390 --> 00:03:21,559
house you all my friends they are you

51
00:03:19,489 --> 00:03:24,370
don't think you call him uncle you want

52
00:03:21,560 --> 00:03:29,239
to talk to vegetable here on

53
00:03:24,370 --> 00:03:31,549
chop-chop is vegetable pick other oh no

54
00:03:29,239 --> 00:03:35,239
I didn't

55
00:03:31,549 --> 00:03:35,889
especially haha what sweetie hey watch

56
00:03:35,239 --> 00:03:38,930
it

57
00:03:35,889 --> 00:03:39,829
okay is there you beautiful beautiful

58
00:03:38,930 --> 00:03:42,530
give him

59
00:03:39,829 --> 00:03:47,120
he also beautiful beautiful give you tea

60
00:03:42,530 --> 00:03:50,269
shop you buy a printer for you ah but

61
00:03:47,120 --> 00:03:54,650
our printer is very beautiful Oh what

62
00:03:50,269 --> 00:03:58,909
beautiful are you talking about sir we

63
00:03:54,650 --> 00:04:01,250
go move near okay oh okay okay okay my

64
00:03:58,909 --> 00:04:03,590
friend huh hey big company balsa you're

65
00:04:01,250 --> 00:04:06,230
not there right you want to buy tank

66
00:04:03,590 --> 00:04:08,569
computer for you you give me low price

67
00:04:06,230 --> 00:04:10,869
cheap cheap he shook so happy happy you

68
00:04:08,569 --> 00:04:16,728
buy for you then your pocket busy Asuza

69
00:04:10,870 --> 00:04:19,989
you know how to run away no Hasani kamas

70
00:04:16,728 --> 00:04:23,719
Utah baby Emma

71
00:04:19,988 --> 00:04:26,719
I see but some opinion okay go okay not

72
00:04:23,720 --> 00:04:28,490
my friend oh happy ready he say if you

73
00:04:26,720 --> 00:04:31,490
give me your telephone number if I

74
00:04:28,490 --> 00:04:34,009
computer for you haha it's so much

75
00:04:31,490 --> 00:04:37,159
cooler here huh since you're gonna get

76
00:04:34,009 --> 00:04:39,680
more air okay okay I buy you know knee

77
00:04:37,159 --> 00:04:50,990
initative number I give you telephone

78
00:04:39,680 --> 00:04:52,849
number hmm okay so I will tell you why I

79
00:04:50,990 --> 00:04:54,860
made you watch this at the end of the

80
00:04:52,849 --> 00:04:57,979
presentation so before that let's get

81
00:04:54,860 --> 00:05:00,530
into slides so I'm Imran I worked for a

82
00:04:57,979 --> 00:05:02,449
company called Zendesk now with this

83
00:05:00,530 --> 00:05:05,599
pretty logo and they're laughing good

84
00:05:02,449 --> 00:05:07,460
day logo right I shouldn't be using this

85
00:05:05,599 --> 00:05:08,110
actually I should be using this we

86
00:05:07,460 --> 00:05:10,909
rebranded

87
00:05:08,110 --> 00:05:12,919
now I work as a security engineer as

88
00:05:10,909 --> 00:05:14,570
part of our product security team where

89
00:05:12,919 --> 00:05:16,008
we make sure that we deliver say it's

90
00:05:14,570 --> 00:05:18,349
secure and reliable software to our

91
00:05:16,009 --> 00:05:21,740
customer like everyone of us want to do

92
00:05:18,349 --> 00:05:23,930
that but we want to do that but we want

93
00:05:21,740 --> 00:05:27,469
to do it at scale it's not that you run

94
00:05:23,930 --> 00:05:30,259
a scan let's say once a month or twice a

95
00:05:27,469 --> 00:05:32,360
month but it to give you an idea of

96
00:05:30,259 --> 00:05:35,000
about our scale we handle little close

97
00:05:32,360 --> 00:05:36,860
to 5 million interactions per day which

98
00:05:35,000 --> 00:05:40,550
boils down to 400 million

99
00:05:36,860 --> 00:05:43,340
Kress right and we do it across 158

100
00:05:40,550 --> 00:05:46,699
countries and in 40 different languages

101
00:05:43,340 --> 00:05:48,888
and this you could say from more from a

102
00:05:46,699 --> 00:05:51,590
spoken language not programming

103
00:05:48,889 --> 00:05:53,870
languages as such so we also use a lot

104
00:05:51,590 --> 00:05:55,698
of micro services so you could say we

105
00:05:53,870 --> 00:05:58,280
also use 50 programming languages as

106
00:05:55,699 --> 00:06:01,389
well but this just to give you an idea

107
00:05:58,280 --> 00:06:05,869
of why we would want to operate at scale

108
00:06:01,389 --> 00:06:09,110
right now let's talk about the gold rush

109
00:06:05,870 --> 00:06:12,050
right we all know that IT is the new

110
00:06:09,110 --> 00:06:17,300
gold rush right how many of you know

111
00:06:12,050 --> 00:06:20,659
what is go rush and few of you okay you

112
00:06:17,300 --> 00:06:23,659
can delay but in fact people started

113
00:06:20,659 --> 00:06:27,590
calling graph QL as the new gold rush

114
00:06:23,659 --> 00:06:30,289
and people even go as far as saying this

115
00:06:27,590 --> 00:06:31,698
is the next big thing after internet our

116
00:06:30,289 --> 00:06:35,180
RESTful API

117
00:06:31,699 --> 00:06:37,789
and you will see why we say this is the

118
00:06:35,180 --> 00:06:40,629
next big thing now before we get into

119
00:06:37,789 --> 00:06:43,878
technicalities of what graph QL is about

120
00:06:40,629 --> 00:06:46,759
let's look at how graph QL started and

121
00:06:43,879 --> 00:06:51,680
why scale is an important part of this

122
00:06:46,759 --> 00:06:54,379
said graph QL started as a solution for

123
00:06:51,680 --> 00:06:56,479
a problem which Facebook hand most of

124
00:06:54,379 --> 00:06:58,729
their clients and while clients were

125
00:06:56,479 --> 00:07:01,039
crashing because of the load the api's

126
00:06:58,729 --> 00:07:03,830
are generating on the clients right now

127
00:07:01,039 --> 00:07:05,479
they solve this problem internally and

128
00:07:03,830 --> 00:07:08,389
then they finally open sourced it in

129
00:07:05,479 --> 00:07:11,389
2015 and along with the specification

130
00:07:08,389 --> 00:07:13,219
now a year passed by and they work

131
00:07:11,389 --> 00:07:16,729
closely with github and they released a

132
00:07:13,219 --> 00:07:18,800
version for API for github so github now

133
00:07:16,729 --> 00:07:21,620
has two API version 3 and budget for

134
00:07:18,800 --> 00:07:24,169
we'll see what those are and then as

135
00:07:21,620 --> 00:07:26,419
more people started using it they got

136
00:07:24,169 --> 00:07:29,299
more traction now they have companies

137
00:07:26,419 --> 00:07:30,979
like pinned into Pinterest Spotify

138
00:07:29,300 --> 00:07:33,469
Twitter and many more using it you can

139
00:07:30,979 --> 00:07:36,050
go look at their page to see what are

140
00:07:33,469 --> 00:07:39,139
their customers who are using it right

141
00:07:36,050 --> 00:07:40,939
and its really increasing and we expect

142
00:07:39,139 --> 00:07:43,099
that is going to be increased and more

143
00:07:40,939 --> 00:07:44,959
and more people are starting to use

144
00:07:43,099 --> 00:07:47,659
graph QL and you will see why in a

145
00:07:44,959 --> 00:07:49,190
couple of minutes right now I'm sorry

146
00:07:47,659 --> 00:07:50,389
about this slide but this is the only

147
00:07:49,190 --> 00:07:54,919
slide which will have

148
00:07:50,389 --> 00:07:57,530
next okay so to summarize graph QL is an

149
00:07:54,919 --> 00:07:59,628
API query language and it's also a

150
00:07:57,530 --> 00:08:01,698
runtime which makes your API pretty

151
00:07:59,629 --> 00:08:04,699
simple compared to the restful api X

152
00:08:01,699 --> 00:08:07,639
okay and these are some of the benefits

153
00:08:04,699 --> 00:08:12,199
or use cases why would you want why you

154
00:08:07,639 --> 00:08:13,610
would want to use graph QL right so we

155
00:08:12,199 --> 00:08:15,889
will have you can fetch multiple

156
00:08:13,610 --> 00:08:17,419
resources in one request you can also

157
00:08:15,889 --> 00:08:20,539
handle different versions more

158
00:08:17,419 --> 00:08:23,090
gracefully and you also have ability to

159
00:08:20,539 --> 00:08:26,628
programmatically find out what type of

160
00:08:23,090 --> 00:08:29,179
breakfast you can pass to an API games

161
00:08:26,629 --> 00:08:33,289
pretty simple and efficient at use so

162
00:08:29,180 --> 00:08:35,750
let's look into topic one which is how

163
00:08:33,289 --> 00:08:39,769
it helps us to fetch multiple resources

164
00:08:35,750 --> 00:08:42,860
in one request okay and we will do that

165
00:08:39,769 --> 00:08:45,950
with an example so right now we want to

166
00:08:42,860 --> 00:08:49,010
create an API or a tool which scans

167
00:08:45,950 --> 00:08:52,880
github to find out secrets in them right

168
00:08:49,010 --> 00:08:55,040
I shouldn't be asking it like ha

169
00:08:52,880 --> 00:08:57,610
do you ever had any incident where you

170
00:08:55,040 --> 00:09:01,160
had secrets leaked in your source code

171
00:08:57,610 --> 00:09:03,769
right look a few bunch of hands right so

172
00:09:01,160 --> 00:09:05,870
it happens so it's a real problem now

173
00:09:03,769 --> 00:09:08,570
you could do this on your own by just

174
00:09:05,870 --> 00:09:11,060
using few API send few few lines of

175
00:09:08,570 --> 00:09:12,680
Python code right so if I have to write

176
00:09:11,060 --> 00:09:15,500
a pseudo code this is how I would go

177
00:09:12,680 --> 00:09:17,469
about right I would fetch a list of

178
00:09:15,500 --> 00:09:20,209
repositories and then I will fetch

179
00:09:17,470 --> 00:09:22,640
branches in each repository and I will

180
00:09:20,209 --> 00:09:24,050
scan them probably get clone or get

181
00:09:22,640 --> 00:09:25,939
fetch and then scan them and then

182
00:09:24,050 --> 00:09:27,769
finally analyze them for secret you

183
00:09:25,940 --> 00:09:29,930
could use different techniques like a

184
00:09:27,769 --> 00:09:31,910
regular base regular expression based

185
00:09:29,930 --> 00:09:33,769
techniques or you can also use entropy

186
00:09:31,910 --> 00:09:37,130
based techniques there are already tools

187
00:09:33,769 --> 00:09:39,440
which does that right so let's get

188
00:09:37,130 --> 00:09:42,290
started with this so we will fetch a

189
00:09:39,440 --> 00:09:45,350
list of repositories from github API

190
00:09:42,290 --> 00:09:47,540
okay and this is how your typical API

191
00:09:45,350 --> 00:09:49,399
call looks like here we are saying to

192
00:09:47,540 --> 00:09:51,620
API hey can you fetch all the

193
00:09:49,399 --> 00:09:54,440
repositories which are under my username

194
00:09:51,620 --> 00:09:58,070
and this is what a typical response

195
00:09:54,440 --> 00:10:01,160
would look like and by default github

196
00:09:58,070 --> 00:10:03,199
gives you 30 and repositories

197
00:10:01,160 --> 00:10:04,430
information which is pretty huge for

198
00:10:03,199 --> 00:10:07,760
probably

199
00:10:04,430 --> 00:10:09,709
a client in India in Vietnam or

200
00:10:07,760 --> 00:10:12,350
somewhere some country where the digital

201
00:10:09,710 --> 00:10:14,899
connectivity is not so great now even if

202
00:10:12,350 --> 00:10:17,690
it's so great the amount of information

203
00:10:14,899 --> 00:10:20,750
which we get from a client from server

204
00:10:17,690 --> 00:10:23,600
is pretty huge for an mobile application

205
00:10:20,750 --> 00:10:27,500
and if I have to zoom in to this request

206
00:10:23,600 --> 00:10:33,560
and I deliberately made it not local you

207
00:10:27,500 --> 00:10:35,029
know yeah so so this is the API call and

208
00:10:33,560 --> 00:10:39,199
this is the response of that API call

209
00:10:35,029 --> 00:10:41,510
wherein we have details like who's the

210
00:10:39,200 --> 00:10:45,020
owner of this repository right is it a

211
00:10:41,510 --> 00:10:47,899
private repository or not and then we

212
00:10:45,020 --> 00:10:49,790
also have information like what are the

213
00:10:47,899 --> 00:10:52,370
different branches it has so I can go

214
00:10:49,790 --> 00:10:58,010
call this API again now to fetch the

215
00:10:52,370 --> 00:11:03,310
list of branches okay so let's let's do

216
00:10:58,010 --> 00:11:03,310
a demo and see how would it look like in

217
00:11:04,330 --> 00:11:08,260
okay so you have

218
00:11:09,670 --> 00:11:13,569
this is the same API call as you can see

219
00:11:11,860 --> 00:11:17,200
I'm fishing all the repositories from

220
00:11:13,570 --> 00:11:18,970
github and again there's a token which

221
00:11:17,200 --> 00:11:21,160
I'm I don't want to disclose to you of

222
00:11:18,970 --> 00:11:23,230
course it's set in the environment

223
00:11:21,160 --> 00:11:25,870
available and then you run it you see

224
00:11:23,230 --> 00:11:28,300
you can see that it's the rida is huge

225
00:11:25,870 --> 00:11:30,220
and I've already copied this information

226
00:11:28,300 --> 00:11:33,459
and you can see that the amount of

227
00:11:30,220 --> 00:11:39,820
information you got is around not much

228
00:11:33,460 --> 00:11:43,660
like and you can see it's a huge amount

229
00:11:39,820 --> 00:11:48,580
of information now the next thing would

230
00:11:43,660 --> 00:11:50,589
which you would do is go get a list of

231
00:11:48,580 --> 00:11:52,810
branches right so the first step is done

232
00:11:50,590 --> 00:11:54,610
we've fetched all the repositories which

233
00:11:52,810 --> 00:11:55,150
are in our organization our which are in

234
00:11:54,610 --> 00:11:57,520
our user

235
00:11:55,150 --> 00:11:59,770
the second step for that is get the

236
00:11:57,520 --> 00:12:02,380
branches of each repository so that we

237
00:11:59,770 --> 00:12:05,439
can scan all of them to find secrets if

238
00:12:02,380 --> 00:12:08,050
there are any and we rotate them or we

239
00:12:05,440 --> 00:12:10,480
get rid of them right this could be the

240
00:12:08,050 --> 00:12:12,849
next call and I'm using the same

241
00:12:10,480 --> 00:12:15,400
repository that's ansible role to

242
00:12:12,850 --> 00:12:17,080
install gauntlet it's a one-upper tool

243
00:12:15,400 --> 00:12:22,090
which helps you automate some of the

244
00:12:17,080 --> 00:12:24,130
depths of cups processes in C sed yeah

245
00:12:22,090 --> 00:12:26,280
so we ask you man hey can you give me

246
00:12:24,130 --> 00:12:30,790
all branches on references in your

247
00:12:26,280 --> 00:12:33,339
repository and then once we have it we

248
00:12:30,790 --> 00:12:35,770
get this information right okay you have

249
00:12:33,340 --> 00:12:39,190
a branch called prod and you also have

250
00:12:35,770 --> 00:12:42,520
different branches like staging master

251
00:12:39,190 --> 00:12:44,140
or you know test and then you have a URL

252
00:12:42,520 --> 00:12:46,390
as well let's say if you are more

253
00:12:44,140 --> 00:12:48,069
interested in finding out the Shah

254
00:12:46,390 --> 00:12:49,600
are you interested in finding what what

255
00:12:48,070 --> 00:12:51,310
kind of content is it what was the last

256
00:12:49,600 --> 00:12:53,830
message you can still go creating them

257
00:12:51,310 --> 00:12:56,829
but so far we have made two requests one

258
00:12:53,830 --> 00:12:59,260
to get a list of repositories and want

259
00:12:56,830 --> 00:13:01,720
to get list of branches right two to

260
00:12:59,260 --> 00:13:05,830
request now all of this could be done in

261
00:13:01,720 --> 00:13:07,750
graph QL with just one request just one

262
00:13:05,830 --> 00:13:09,160
request and those are the important

263
00:13:07,750 --> 00:13:10,720
information they're like repositories

264
00:13:09,160 --> 00:13:13,689
we're asking them hey fetch 30

265
00:13:10,720 --> 00:13:15,720
repositories and give me references as

266
00:13:13,690 --> 00:13:15,720
well

267
00:13:16,480 --> 00:13:23,790
so let's see how it would look like in

268
00:13:18,850 --> 00:13:26,800
practice right so I have to if I have to

269
00:13:23,790 --> 00:13:29,400
get list of references which are

270
00:13:26,800 --> 00:13:29,400
basically

271
00:13:31,260 --> 00:13:35,130
okay so I'm downloading it as you can

272
00:13:33,390 --> 00:13:37,170
see that I have a master branch here

273
00:13:35,130 --> 00:13:41,400
have a part branch here and a staging

274
00:13:37,170 --> 00:13:44,400
band sheet and a test bench okay so you

275
00:13:41,400 --> 00:13:46,230
can now it said entire repositories in

276
00:13:44,400 --> 00:13:49,500
your organization and scan them it's

277
00:13:46,230 --> 00:13:54,600
people but let's also see how we would

278
00:13:49,500 --> 00:13:59,610
do that in were questioned for of github

279
00:13:54,600 --> 00:14:01,170
library which change your so I already

280
00:13:59,610 --> 00:14:04,140
copied this for you just for the

281
00:14:01,170 --> 00:14:06,270
convenience as you can see that this is

282
00:14:04,140 --> 00:14:10,680
exact same query I'm not bluffing yet

283
00:14:06,270 --> 00:14:12,390
okay and then I run the script and this

284
00:14:10,680 --> 00:14:15,719
is the real-time data as you can see I'm

285
00:14:12,390 --> 00:14:17,550
connected and I got sick I got all the

286
00:14:15,720 --> 00:14:19,140
information I needed so I have a

287
00:14:17,550 --> 00:14:23,459
security of that which is another tool

288
00:14:19,140 --> 00:14:27,210
and it has bunch of branches master and

289
00:14:23,460 --> 00:14:29,130
then tag 1.4 and bunch of others you

290
00:14:27,210 --> 00:14:31,800
will also see here that the repositories

291
00:14:29,130 --> 00:14:34,620
which I do just mention one of my

292
00:14:31,800 --> 00:14:38,189
deposit you can even restrict it to just

293
00:14:34,620 --> 00:14:40,080
my repositories by using affiliations as

294
00:14:38,190 --> 00:14:43,080
well so I'm not going to show that demo

295
00:14:40,080 --> 00:14:45,780
but yeah you could figure it out so

296
00:14:43,080 --> 00:14:47,940
let's go ahead and see as you can see

297
00:14:45,780 --> 00:14:49,800
that it's clearly pretty efficient when

298
00:14:47,940 --> 00:14:54,480
compared to restful api so you can fetch

299
00:14:49,800 --> 00:14:57,180
multiple api's in one request multiple

300
00:14:54,480 --> 00:14:59,880
resources in one request all right

301
00:14:57,180 --> 00:15:01,829
another problem with salts is different

302
00:14:59,880 --> 00:15:04,770
handling different versions of an API

303
00:15:01,830 --> 00:15:06,600
now how many of you have here two

304
00:15:04,770 --> 00:15:10,160
different versions that of API and two

305
00:15:06,600 --> 00:15:14,700
different code bases for each of them I

306
00:15:10,160 --> 00:15:17,760
see one hand ok fee of you and it is

307
00:15:14,700 --> 00:15:20,280
really nightmare of nightmare to

308
00:15:17,760 --> 00:15:23,069
maintain you know legacy code or you

309
00:15:20,280 --> 00:15:25,380
know babysitter probably all right it's

310
00:15:23,070 --> 00:15:27,390
pretty easy now what this allows us to

311
00:15:25,380 --> 00:15:29,850
do is that you can have two different

312
00:15:27,390 --> 00:15:31,350
with it as I mentioned restful thus we

313
00:15:29,850 --> 00:15:32,880
can have two versions to version one

314
00:15:31,350 --> 00:15:33,560
version two some even have question

315
00:15:32,880 --> 00:15:36,240
three

316
00:15:33,560 --> 00:15:38,609
and the value and there are multiple

317
00:15:36,240 --> 00:15:40,950
ways to handle it you put it in your URI

318
00:15:38,610 --> 00:15:42,320
are you put it in header or many

319
00:15:40,950 --> 00:15:45,440
techniques although

320
00:15:42,320 --> 00:15:47,360
well our speakers before but what graph

321
00:15:45,440 --> 00:15:50,290
QL does is that you don't need to

322
00:15:47,360 --> 00:15:53,839
mention anything you just have one API

323
00:15:50,290 --> 00:15:55,849
one uri for both api is positioned one

324
00:15:53,839 --> 00:16:00,139
our version - it doesn't matter just one

325
00:15:55,850 --> 00:16:02,029
API call and you and you can face the

326
00:16:00,139 --> 00:16:05,810
data you want now this is the biggest

327
00:16:02,029 --> 00:16:07,579
advantage when it comes to versioning

328
00:16:05,810 --> 00:16:10,069
and supporting your legacy clients let's

329
00:16:07,579 --> 00:16:14,599
say imagine someone here is using iPhone

330
00:16:10,069 --> 00:16:17,180
4 right which is version 1 of my API and

331
00:16:14,600 --> 00:16:19,490
version 2 of my API I cannot work on

332
00:16:17,180 --> 00:16:23,149
version by phone for it would only work

333
00:16:19,490 --> 00:16:25,459
on probably say iPhone 10 alright these

334
00:16:23,149 --> 00:16:28,160
cases then you don't even have to change

335
00:16:25,459 --> 00:16:31,430
your clients to upgrade yourself to the

336
00:16:28,160 --> 00:16:34,189
next version you see so there these are

337
00:16:31,430 --> 00:16:36,258
some of the advantages of you know using

338
00:16:34,190 --> 00:16:37,970
graphic you'll for versioning and again

339
00:16:36,259 --> 00:16:41,029
there are some complexities like how

340
00:16:37,970 --> 00:16:43,430
would you do a duplicate view of the you

341
00:16:41,029 --> 00:16:45,860
know obsolete field so let's say I want

342
00:16:43,430 --> 00:16:46,939
to get rid of planet in next version so

343
00:16:45,860 --> 00:16:48,470
how would I do that so there are

344
00:16:46,940 --> 00:16:50,120
techniques to do that as well this is

345
00:16:48,470 --> 00:16:53,029
one advantage so those are the two

346
00:16:50,120 --> 00:16:56,029
advantages now the one which I'll like

347
00:16:53,029 --> 00:17:00,980
the most is this because it's directly

348
00:16:56,029 --> 00:17:03,769
relates to security which is if you want

349
00:17:00,980 --> 00:17:08,000
to print as a REST API what would you do

350
00:17:03,769 --> 00:17:10,730
you go read your API swagger or any tool

351
00:17:08,000 --> 00:17:13,790
which you use and then you manually

352
00:17:10,730 --> 00:17:16,220
create the request and then test it you

353
00:17:13,790 --> 00:17:19,040
use curl or some zap proxy are you

354
00:17:16,220 --> 00:17:22,579
selenium along with Zack proxy or burp

355
00:17:19,040 --> 00:17:25,040
suite and then you use it but what graph

356
00:17:22,579 --> 00:17:30,260
Kuehl does this this is like a modern

357
00:17:25,040 --> 00:17:34,190
wisdom if you know about so okay kind of

358
00:17:30,260 --> 00:17:37,850
similar in terms of model as well so if

359
00:17:34,190 --> 00:17:39,770
you don't know what a P repository the

360
00:17:37,850 --> 00:17:41,780
repository source can return you you can

361
00:17:39,770 --> 00:17:43,520
just committee the API to see hey I

362
00:17:41,780 --> 00:17:46,460
don't understand how to use this can you

363
00:17:43,520 --> 00:17:48,200
show me how all right so it will show

364
00:17:46,460 --> 00:17:53,159
you exactly that so let's see how that

365
00:17:48,200 --> 00:17:57,070
works and I'm doing this impromptu so

366
00:17:53,159 --> 00:18:05,320
might not work all the time so let's see

367
00:17:57,070 --> 00:18:07,658
some is it you guys can see okay so I

368
00:18:05,320 --> 00:18:13,029
think you can see okay so what I will do

369
00:18:07,659 --> 00:18:18,669
is I will get rid of all of these okay

370
00:18:13,029 --> 00:18:21,850
so I just have now two things I'm saying

371
00:18:18,669 --> 00:18:24,940
hey I'm interested in in bronze square

372
00:18:21,850 --> 00:18:27,549
some details no I don't know what it

373
00:18:24,940 --> 00:18:30,909
supports so what I would do is just type

374
00:18:27,549 --> 00:18:32,918
a alphabet starts with a so then you see

375
00:18:30,909 --> 00:18:37,450
you have a pop of it says hey you have

376
00:18:32,919 --> 00:18:39,940
now name in this you have his email ID

377
00:18:37,450 --> 00:18:44,080
in this and then you can buy B and then

378
00:18:39,940 --> 00:18:48,759
you can get my bio as well okay and then

379
00:18:44,080 --> 00:18:50,590
I just say give me the details and you

380
00:18:48,759 --> 00:18:51,279
can see that it went ahead and fetch

381
00:18:50,590 --> 00:18:52,928
your details

382
00:18:51,279 --> 00:18:56,919
not the whole blob but just the

383
00:18:52,929 --> 00:19:00,609
information you need similarly if I just

384
00:18:56,919 --> 00:19:02,139
want to look at everything then you can

385
00:19:00,609 --> 00:19:03,779
do that using the previous query as well

386
00:19:02,139 --> 00:19:06,309
so it's pretty easy to do it's pretty

387
00:19:03,779 --> 00:19:08,470
nice as well and this is the production

388
00:19:06,309 --> 00:19:10,480
library which production website which

389
00:19:08,470 --> 00:19:13,960
I'm using it's not a test environment as

390
00:19:10,480 --> 00:19:16,809
you can see here it's a live site it's

391
00:19:13,960 --> 00:19:18,340
pretty easy to do that that way and then

392
00:19:16,809 --> 00:19:20,859
it's simple an efficient of course

393
00:19:18,340 --> 00:19:25,109
because it we are fetching on the videos

394
00:19:20,859 --> 00:19:25,109
we need rather than everything okay now

395
00:19:25,379 --> 00:19:31,029
all of this was just to understand how

396
00:19:28,090 --> 00:19:33,059
graph QL is different from REST API and

397
00:19:31,029 --> 00:19:35,259
unless you can understand an AP how

398
00:19:33,059 --> 00:19:37,149
something works you cannot break it

399
00:19:35,259 --> 00:19:39,299
alright so this was just information

400
00:19:37,149 --> 00:19:40,959
gathering so far so next step is

401
00:19:39,299 --> 00:19:44,440
authentication so what are the problems

402
00:19:40,960 --> 00:19:48,070
we generally see in graph QL based api's

403
00:19:44,440 --> 00:19:50,289
right the first problem is you know this

404
00:19:48,070 --> 00:19:53,289
is not a specific problem rest api but

405
00:19:50,289 --> 00:19:55,600
just I mean graph QL API but rest in

406
00:19:53,289 --> 00:19:57,249
general but there is a slight difference

407
00:19:55,600 --> 00:19:59,908
in terms of how we handle this in

408
00:19:57,249 --> 00:20:03,150
restful api and the graphical api

409
00:19:59,909 --> 00:20:05,000
now like all subject matter x

410
00:20:03,150 --> 00:20:08,700
what we do if we don't know anything we

411
00:20:05,000 --> 00:20:12,390
go to Google and say hey show me how

412
00:20:08,700 --> 00:20:16,860
this is done and just exactly what we

413
00:20:12,390 --> 00:20:18,600
did right and this is this might be the

414
00:20:16,860 --> 00:20:20,729
reply you might get like saying that day

415
00:20:18,600 --> 00:20:23,250
how are you did however you want that

416
00:20:20,730 --> 00:20:25,380
would be the reply and graph QL provides

417
00:20:23,250 --> 00:20:31,470
you a lot of by the way this is all made

418
00:20:25,380 --> 00:20:33,780
up but it is not real okay yeah so yeah

419
00:20:31,470 --> 00:20:37,110
so the graph QL provides a lot of

420
00:20:33,780 --> 00:20:40,200
flexibility for you to do it however you

421
00:20:37,110 --> 00:20:42,240
want and that's reason why I'm spent

422
00:20:40,200 --> 00:20:44,190
mentioning this because I've seen

423
00:20:42,240 --> 00:20:47,040
developers do it in two different ways

424
00:20:44,190 --> 00:20:48,809
one is that you do at a function level

425
00:20:47,040 --> 00:20:51,000
like you replicate your authentication

426
00:20:48,809 --> 00:20:54,120
authorization it functional okay what

427
00:20:51,000 --> 00:20:55,740
could go wrong nothing right and then

428
00:20:54,120 --> 00:20:58,168
you can also do it in centralized way

429
00:20:55,740 --> 00:21:00,540
where you you manage your authentication

430
00:20:58,169 --> 00:21:04,470
and authorization at one place and then

431
00:21:00,540 --> 00:21:06,690
you handle it right so you can use

432
00:21:04,470 --> 00:21:11,040
traditional authentication mechanisms

433
00:21:06,690 --> 00:21:14,040
like token JWT jwe whatever is your use

434
00:21:11,040 --> 00:21:18,090
case you can use all of them but the

435
00:21:14,040 --> 00:21:19,168
problem is that the typical you know

436
00:21:18,090 --> 00:21:21,809
this is the workflow of a typical

437
00:21:19,169 --> 00:21:23,790
restful api R has to be up here well you

438
00:21:21,809 --> 00:21:27,030
have you can see here that we have a

439
00:21:23,790 --> 00:21:30,360
authentication middleware here right the

440
00:21:27,030 --> 00:21:33,030
problem is that graph QL doesn't have

441
00:21:30,360 --> 00:21:33,780
any middleware at all there's no concept

442
00:21:33,030 --> 00:21:36,000
of middleware

443
00:21:33,780 --> 00:21:37,470
so where would you put it all right

444
00:21:36,000 --> 00:21:39,419
that's a big question where would you

445
00:21:37,470 --> 00:21:41,880
put authentication where is the good

446
00:21:39,419 --> 00:21:44,280
place to put it and Facebook doesn't say

447
00:21:41,880 --> 00:21:48,330
anything about it okay way to put it

448
00:21:44,280 --> 00:21:50,910
just keep your prod suggestion that hey

449
00:21:48,330 --> 00:21:53,030
you need to have authentication but they

450
00:21:50,910 --> 00:21:55,980
will leave the details to you and that's

451
00:21:53,030 --> 00:21:57,510
there that's where the problem is now

452
00:21:55,980 --> 00:22:01,830
you don't know where to put so what we

453
00:21:57,510 --> 00:22:03,629
do we call paste code from like alright

454
00:22:01,830 --> 00:22:06,960
that's what happened and I've seen this

455
00:22:03,630 --> 00:22:08,760
enough time so so this literally that

456
00:22:06,960 --> 00:22:10,710
there's no middle layer

457
00:22:08,760 --> 00:22:13,559
middle very top but instead you have

458
00:22:10,710 --> 00:22:15,600
something called resolvers and resolvers

459
00:22:13,559 --> 00:22:17,760
are basically a portion of your code

460
00:22:15,600 --> 00:22:21,449
think either like a function which binds

461
00:22:17,760 --> 00:22:24,990
part of your requests to a function so

462
00:22:21,450 --> 00:22:27,660
meaning that as as we seen before let's

463
00:22:24,990 --> 00:22:29,280
say for example this is this is 1 this

464
00:22:27,660 --> 00:22:30,570
is 1 which we saw before right if you

465
00:22:29,280 --> 00:22:35,340
have repositories and we have an

466
00:22:30,570 --> 00:22:37,200
apprentice now you're the resolver might

467
00:22:35,340 --> 00:22:41,070
be just binding it to this part of your

468
00:22:37,200 --> 00:22:44,130
click reply this part of the requests

469
00:22:41,070 --> 00:22:45,299
query ok this might have a separate

470
00:22:44,130 --> 00:22:47,760
resolver this might we'll have a

471
00:22:45,299 --> 00:22:50,010
separate to resolve on as well so you

472
00:22:47,760 --> 00:22:54,450
have a bunch of different resolvers to

473
00:22:50,010 --> 00:22:56,040
achieve to give you some data ok so I

474
00:22:54,450 --> 00:22:59,040
will just stop you there and we'll talk

475
00:22:56,040 --> 00:23:01,080
about this in another slide but just

476
00:22:59,040 --> 00:23:04,770
keep in mind that we have different

477
00:23:01,080 --> 00:23:08,240
resolvers to do different things now as

478
00:23:04,770 --> 00:23:11,820
I was mentioning it that you can't fetch

479
00:23:08,240 --> 00:23:14,370
any number of resources and you can do

480
00:23:11,820 --> 00:23:17,700
it in one query so imagine what would

481
00:23:14,370 --> 00:23:19,439
happen if you have left at please like

482
00:23:17,700 --> 00:23:24,570
query inside a query inside create

483
00:23:19,440 --> 00:23:27,540
decide right looks like XML bomb right

484
00:23:24,570 --> 00:23:31,649
similar case so we have problems like

485
00:23:27,540 --> 00:23:35,070
denial of service and this is the this

486
00:23:31,650 --> 00:23:36,929
is the most important security issue you

487
00:23:35,070 --> 00:23:38,668
should be thinking about now there are

488
00:23:36,929 --> 00:23:40,830
different ways to handle it what would

489
00:23:38,669 --> 00:23:42,780
you do you would either rate limit them

490
00:23:40,830 --> 00:23:44,540
saying that hey you cannot have more

491
00:23:42,780 --> 00:23:47,580
than fire requests or you cannot

492
00:23:44,540 --> 00:23:50,879
transact more than 5 MB of data per

493
00:23:47,580 --> 00:23:53,040
second or per minute and then you also

494
00:23:50,880 --> 00:23:56,700
have base to say that calculate the

495
00:23:53,040 --> 00:23:58,950
complexity of your rep query and then

496
00:23:56,700 --> 00:24:01,980
see would it affect our back-end if it

497
00:23:58,950 --> 00:24:04,169
is just politely say hey this is too

498
00:24:01,980 --> 00:24:07,830
complex please dumb it down and send it

499
00:24:04,169 --> 00:24:09,780
back this is another one way today now

500
00:24:07,830 --> 00:24:12,659
let's come back to the authorization

501
00:24:09,780 --> 00:24:14,129
again I could have large authentication

502
00:24:12,660 --> 00:24:16,230
and authorization but I want to

503
00:24:14,130 --> 00:24:20,230
specifically call out the differences

504
00:24:16,230 --> 00:24:22,630
between these two ok now

505
00:24:20,230 --> 00:24:25,990
this is how you might want to resolve it

506
00:24:22,630 --> 00:24:28,450
I you have a kind of inheritance kind of

507
00:24:25,990 --> 00:24:30,909
a concept here wherein you will have a

508
00:24:28,450 --> 00:24:33,820
base resolver which will just give you a

509
00:24:30,909 --> 00:24:35,230
generic error authentication information

510
00:24:33,820 --> 00:24:38,320
required or authorization information

511
00:24:35,230 --> 00:24:40,659
required but will not give you specific

512
00:24:38,320 --> 00:24:44,019
things and then you inherit from that

513
00:24:40,659 --> 00:24:46,179
I'm using inherit word very loosely okay

514
00:24:44,019 --> 00:24:48,630
don't quote me on that so then you have

515
00:24:46,179 --> 00:24:50,529
then you can change this to another

516
00:24:48,630 --> 00:24:54,490
resolver where you just do

517
00:24:50,529 --> 00:24:57,389
authentication and you can again attach

518
00:24:54,490 --> 00:25:00,070
to other resolver where you do only

519
00:24:57,389 --> 00:25:03,070
authorization and the authorization is

520
00:25:00,070 --> 00:25:05,889
so efficient in graph QL that you can

521
00:25:03,070 --> 00:25:08,230
not only do authorization on a whole API

522
00:25:05,889 --> 00:25:11,080
level but you can also do it it does

523
00:25:08,230 --> 00:25:13,480
cope feel lip like me you can say hey

524
00:25:11,080 --> 00:25:15,070
your email should never be visible to

525
00:25:13,480 --> 00:25:16,899
someone or your password should never be

526
00:25:15,070 --> 00:25:19,750
visible to someone based on their

527
00:25:16,899 --> 00:25:22,239
authorization and ID based on their

528
00:25:19,750 --> 00:25:24,820
scope so that's another way to look at

529
00:25:22,240 --> 00:25:27,340
it like do go and check it out if are

530
00:25:24,820 --> 00:25:30,399
they using per field authorization if

531
00:25:27,340 --> 00:25:32,260
it's needed are they using you know

532
00:25:30,399 --> 00:25:33,580
function based authorization

533
00:25:32,260 --> 00:25:36,519
authentication are they using a

534
00:25:33,580 --> 00:25:39,639
centralized way to do it now another way

535
00:25:36,519 --> 00:25:42,730
which sadly I don't like it but that's a

536
00:25:39,639 --> 00:25:44,918
reality of how it works is that instead

537
00:25:42,730 --> 00:25:47,380
of you putting your authentication

538
00:25:44,919 --> 00:25:50,649
authorization at API layer you put you

539
00:25:47,380 --> 00:25:52,510
attach to your data layer meaning that

540
00:25:50,649 --> 00:25:54,399
whenever you are accessing your data you

541
00:25:52,510 --> 00:25:57,908
make the decision is he authorized to

542
00:25:54,399 --> 00:26:00,510
create this data right something like

543
00:25:57,909 --> 00:26:02,980
that these authorized is now would be a

544
00:26:00,510 --> 00:26:04,600
data layer function and you call it and

545
00:26:02,980 --> 00:26:05,880
then if it returns true then you return

546
00:26:04,600 --> 00:26:10,469
the data otherwise you don't

547
00:26:05,880 --> 00:26:13,950
and then finally error handling this is

548
00:26:10,470 --> 00:26:17,320
like back to 90s kind of a thing where

549
00:26:13,950 --> 00:26:20,529
instead of using your HTTP status codes

550
00:26:17,320 --> 00:26:23,110
which which is like 4 not 1 or 4 not 3

551
00:26:20,529 --> 00:26:26,799
you are unauthorized to access it you

552
00:26:23,110 --> 00:26:30,299
cannot do this in graph QL you cannot do

553
00:26:26,799 --> 00:26:30,299
this in graph you what why is that

554
00:26:30,829 --> 00:26:35,849
okay so we cannot draw is because we

555
00:26:34,109 --> 00:26:37,699
have nested queries so when you are

556
00:26:35,849 --> 00:26:41,309
returning for not two or four not three

557
00:26:37,700 --> 00:26:43,859
which one which one which which

558
00:26:41,309 --> 00:26:46,349
resources among these generated that so

559
00:26:43,859 --> 00:26:50,039
you cannot do that right that's why

560
00:26:46,349 --> 00:26:52,109
people now resort to the old things like

561
00:26:50,039 --> 00:26:54,599
like you just written every time 200

562
00:26:52,109 --> 00:26:57,899
okay and then inside the payload you

563
00:26:54,599 --> 00:26:59,489
will have error mentioning that hey you

564
00:26:57,899 --> 00:27:02,839
are not authorized to access it you are

565
00:26:59,489 --> 00:27:06,179
not you are not authenticated now this

566
00:27:02,839 --> 00:27:09,119
raises some questions in automation how

567
00:27:06,179 --> 00:27:11,399
would you find out when the request is

568
00:27:09,119 --> 00:27:15,119
successful or when a request is false

569
00:27:11,399 --> 00:27:16,678
right so you cannot use traditional API

570
00:27:15,119 --> 00:27:19,199
bits tools to do this so you need

571
00:27:16,679 --> 00:27:21,839
specific things for this one okay and

572
00:27:19,200 --> 00:27:25,829
there are a few more things which which

573
00:27:21,839 --> 00:27:27,779
we'll talk about now graph QL is

574
00:27:25,829 --> 00:27:31,289
predominantly a layer on top of your

575
00:27:27,779 --> 00:27:32,879
data layer but it can also work again

576
00:27:31,289 --> 00:27:34,889
you have to go through a lot of Hoops to

577
00:27:32,879 --> 00:27:38,339
make it work but it can also work nicely

578
00:27:34,889 --> 00:27:40,099
with micro-services and I thought of

579
00:27:38,339 --> 00:27:42,779
skipping this but since most of you

580
00:27:40,099 --> 00:27:45,269
don't know about Microsoft so let me

581
00:27:42,779 --> 00:27:48,299
cover this so microservices is basically

582
00:27:45,269 --> 00:27:50,339
a small service a set of service and

583
00:27:48,299 --> 00:27:52,229
automate autonomous service which means

584
00:27:50,339 --> 00:27:55,200
that it doesn't need anyone else to do

585
00:27:52,229 --> 00:27:57,539
its job okay and it's separately

586
00:27:55,200 --> 00:28:00,299
deployable you can defy this without

587
00:27:57,539 --> 00:28:02,309
worrying about hey do we do I have

588
00:28:00,299 --> 00:28:04,999
authorization function available before

589
00:28:02,309 --> 00:28:08,158
I could deploy that so there is no

590
00:28:04,999 --> 00:28:09,539
relationship or there is no dependency

591
00:28:08,159 --> 00:28:11,339
on other services and because of that

592
00:28:09,539 --> 00:28:15,269
you can scale it hugely so this would be

593
00:28:11,339 --> 00:28:17,009
your typical you know model application

594
00:28:15,269 --> 00:28:18,839
towards your left and their Microsoft is

595
00:28:17,009 --> 00:28:21,419
towards your right so you have a big

596
00:28:18,839 --> 00:28:24,239
monolithic which does everything right

597
00:28:21,419 --> 00:28:27,299
you have a UI you might have API in here

598
00:28:24,239 --> 00:28:29,429
you will also have data access layer or

599
00:28:27,299 --> 00:28:31,408
RM or whatever you are using and then

600
00:28:29,429 --> 00:28:33,389
business logic now this is pretty

601
00:28:31,409 --> 00:28:35,249
difficult to scale all right how would

602
00:28:33,389 --> 00:28:37,678
you how would you scale it the typical

603
00:28:35,249 --> 00:28:39,220
when you scale it you have bunch of

604
00:28:37,679 --> 00:28:41,260
machines with the same code

605
00:28:39,220 --> 00:28:43,210
right and then you also have different

606
00:28:41,260 --> 00:28:45,760
problems in here like how would you

607
00:28:43,210 --> 00:28:47,470
maintain state how would you move your

608
00:28:45,760 --> 00:28:49,600
users from one machine to another

609
00:28:47,470 --> 00:28:52,450
machine which is a separate topic on its

610
00:28:49,600 --> 00:28:55,510
own but the point is that micro-services

611
00:28:52,450 --> 00:28:58,890
makes it very easy for you to create

612
00:28:55,510 --> 00:29:02,110
services and deploy services and also

613
00:28:58,890 --> 00:29:05,290
create business value pretty fast and a

614
00:29:02,110 --> 00:29:07,510
micro service now the biggest question

615
00:29:05,290 --> 00:29:10,080
of the important questions people ask is

616
00:29:07,510 --> 00:29:12,970
how small should be my croissants

617
00:29:10,080 --> 00:29:15,280
there's no definite answer however there

618
00:29:12,970 --> 00:29:17,170
are some best guidelines like if you you

619
00:29:15,280 --> 00:29:19,780
should be able to record that entire

620
00:29:17,170 --> 00:29:22,210
micro service in two weeks or less than

621
00:29:19,780 --> 00:29:24,430
that that's that that's what my

622
00:29:22,210 --> 00:29:27,670
definition of micro services so as you

623
00:29:24,430 --> 00:29:32,110
can see now you have bunch of small

624
00:29:27,670 --> 00:29:34,900
services to accomplish huge task and

625
00:29:32,110 --> 00:29:37,030
this is how your micro service would

626
00:29:34,900 --> 00:29:39,580
look at that this is this is a picture

627
00:29:37,030 --> 00:29:41,680
from Netflix this is how the micro

628
00:29:39,580 --> 00:29:44,110
service architecture looks like so you

629
00:29:41,680 --> 00:29:47,770
have a bunch of authentications

630
00:29:44,110 --> 00:29:50,290
I think this is API gateway and then you

631
00:29:47,770 --> 00:29:52,570
will have bunch of services in here and

632
00:29:50,290 --> 00:29:54,730
any if any one of them crashes you will

633
00:29:52,570 --> 00:29:56,290
have a ripple effect among other ones as

634
00:29:54,730 --> 00:29:57,850
well so you have to be very careful so

635
00:29:56,290 --> 00:29:59,440
it's pretty awesome that you can develop

636
00:29:57,850 --> 00:30:02,020
a service in two weeks but it's pretty

637
00:29:59,440 --> 00:30:04,030
daunting as well you have to look at lot

638
00:30:02,020 --> 00:30:06,040
of different things like how do I manage

639
00:30:04,030 --> 00:30:07,300
service discovery how how would I manage

640
00:30:06,040 --> 00:30:12,730
the communications between these

641
00:30:07,300 --> 00:30:17,169
services etc right okay

642
00:30:12,730 --> 00:30:23,470
now you could definitely use graph QL a

643
00:30:17,170 --> 00:30:26,140
kind of API server or API gateway to to

644
00:30:23,470 --> 00:30:29,050
you know you act as an API gateway to

645
00:30:26,140 --> 00:30:30,850
Travis request from that gateway a graph

646
00:30:29,050 --> 00:30:34,060
QL to micro services but it's pretty

647
00:30:30,850 --> 00:30:36,730
difficult in that it's but it's doable

648
00:30:34,060 --> 00:30:38,919
but it's difficult and similar stuff

649
00:30:36,730 --> 00:30:40,420
involved applies here as well the

650
00:30:38,920 --> 00:30:42,100
complexity is authentication

651
00:30:40,420 --> 00:30:43,720
authorization would you rather do

652
00:30:42,100 --> 00:30:45,370
authentication and authorization at the

653
00:30:43,720 --> 00:30:47,350
micro service level or would you do it

654
00:30:45,370 --> 00:30:50,139
in wrapp funeral so you need to look at

655
00:30:47,350 --> 00:30:52,389
that as well and you will find few

656
00:30:50,140 --> 00:31:00,020
interesting issues here as well

657
00:30:52,390 --> 00:31:03,470
okay now that was the security cigarette

658
00:31:00,020 --> 00:31:07,940
use with Graf Europe so let's talk about

659
00:31:03,470 --> 00:31:13,120
how why is it different to put a firm a

660
00:31:07,940 --> 00:31:13,120
draft you write first thing is this is a

661
00:31:13,450 --> 00:31:19,460
new technology since it's a new

662
00:31:16,610 --> 00:31:21,439
technology the note will develop to you

663
00:31:19,460 --> 00:31:26,000
and static analysis is pretty difficult

664
00:31:21,440 --> 00:31:27,950
as well okay forget about static

665
00:31:26,000 --> 00:31:30,230
analysis for a minute because now you

666
00:31:27,950 --> 00:31:32,450
don't have but you can still use your

667
00:31:30,230 --> 00:31:34,850
let's say you have you create a graph QL

668
00:31:32,450 --> 00:31:38,060
in Django you have created in pipe

669
00:31:34,850 --> 00:31:39,949
Python sorry in node.js you can still

670
00:31:38,060 --> 00:31:43,120
use that tooling but will not give you

671
00:31:39,950 --> 00:31:46,280
the entire picture so we have to

672
00:31:43,120 --> 00:31:48,379
including you have to use both the

673
00:31:46,280 --> 00:31:51,920
existing tools and also manual code

674
00:31:48,380 --> 00:31:54,350
reviews that's where we working closely

675
00:31:51,920 --> 00:31:59,270
security working closely with developers

676
00:31:54,350 --> 00:32:03,260
comes into play okay and dust is not as

677
00:31:59,270 --> 00:32:05,240
hard as fastest because you can use the

678
00:32:03,260 --> 00:32:07,070
existing automation of the developers to

679
00:32:05,240 --> 00:32:11,540
pipe it why a selenium are any

680
00:32:07,070 --> 00:32:16,730
automation tool to pass it to a you know

681
00:32:11,540 --> 00:32:19,190
a proxy and then scan correct and then

682
00:32:16,730 --> 00:32:22,730
you of course the open source libraries

683
00:32:19,190 --> 00:32:25,040
scanning could be done as it is there's

684
00:32:22,730 --> 00:32:26,780
no affect on that and I'm I'm not

685
00:32:25,040 --> 00:32:28,190
covering it any of these but because

686
00:32:26,780 --> 00:32:30,710
this is pretty generic and that would

687
00:32:28,190 --> 00:32:32,720
also apply to graph QL but this is the

688
00:32:30,710 --> 00:32:34,580
part which is CI part of it what might

689
00:32:32,720 --> 00:32:37,670
change and you might have to look at it

690
00:32:34,580 --> 00:32:39,530
that to automate it you might also have

691
00:32:37,670 --> 00:32:41,750
to write abuse test cases to make sure

692
00:32:39,530 --> 00:32:43,850
that you're following best practices

693
00:32:41,750 --> 00:32:48,820
your all your authentication is done

694
00:32:43,850 --> 00:32:52,490
right your authorization is done by so

695
00:32:48,820 --> 00:32:55,820
yeah and you have developer tools which

696
00:32:52,490 --> 00:32:59,140
will help you ease the pain one amount

697
00:32:55,820 --> 00:33:01,669
them is this graph iql this is the same

698
00:32:59,140 --> 00:33:03,740
software which i showed you earlier in

699
00:33:01,670 --> 00:33:04,130
the demo even if you don't anything you

700
00:33:03,740 --> 00:33:06,260
can just

701
00:33:04,130 --> 00:33:08,720
later on with it nothing would come out

702
00:33:06,260 --> 00:33:10,490
of it but you'll learn a ton saying that

703
00:33:08,720 --> 00:33:12,050
oh this is how the API works so I can

704
00:33:10,490 --> 00:33:16,520
automate it so you can programmatically

705
00:33:12,050 --> 00:33:19,610
now create your API and figure out okay

706
00:33:16,520 --> 00:33:22,990
he is expecting string what if I pass an

707
00:33:19,610 --> 00:33:27,679
integer or pass some malicious input 20

708
00:33:22,990 --> 00:33:30,560
so that can be done now and we have done

709
00:33:27,680 --> 00:33:33,290
this okay and we have done this and we

710
00:33:30,560 --> 00:33:36,649
are doing it a scale where we run on an

711
00:33:33,290 --> 00:33:40,610
average like 20,000 scans per day sorry

712
00:33:36,650 --> 00:33:44,780
per month which is like twenty hundred

713
00:33:40,610 --> 00:33:48,439
scans for per month on average and

714
00:33:44,780 --> 00:33:51,830
sometimes we go up and that and we and

715
00:33:48,440 --> 00:33:54,290
we never started like we were able to

716
00:33:51,830 --> 00:33:56,510
achieve that because we followed up a

717
00:33:54,290 --> 00:33:58,159
model which was a modified version of

718
00:33:56,510 --> 00:34:01,730
phishing

719
00:33:58,160 --> 00:34:05,300
Snyder's presentation Inoue swearin he

720
00:34:01,730 --> 00:34:09,010
talks about you need to implement that

721
00:34:05,300 --> 00:34:11,899
circle security you know stage wise in

722
00:34:09,010 --> 00:34:14,389
multiple states in step in stage one you

723
00:34:11,899 --> 00:34:16,009
would put your static analysis but it

724
00:34:14,389 --> 00:34:17,990
will not do anything helpful is just

725
00:34:16,010 --> 00:34:19,669
running out of the box not doing

726
00:34:17,989 --> 00:34:23,000
anything fancy and it will throw a lot

727
00:34:19,668 --> 00:34:25,279
of false positives and here we are not

728
00:34:23,000 --> 00:34:27,020
failing our builds and then you might

729
00:34:25,280 --> 00:34:29,510
again go back to the second stage you

730
00:34:27,020 --> 00:34:32,840
can go to second stage wherein you write

731
00:34:29,510 --> 00:34:36,770
custom queries for your SAS application

732
00:34:32,840 --> 00:34:40,370
and then modify it not to throw false

733
00:34:36,770 --> 00:34:43,520
positives okay and then similar have

734
00:34:40,370 --> 00:34:46,600
similar applies to both dynamics can we

735
00:34:43,520 --> 00:34:49,250
do unauthenticated scans first just to

736
00:34:46,600 --> 00:34:51,980
get rid of low-hanging fruits and then

737
00:34:49,250 --> 00:34:54,889
we also do authenticated scans right

738
00:34:51,980 --> 00:34:58,250
which is pretty ok so that's why the

739
00:34:54,889 --> 00:35:01,070
starting is to here and dynamic is 3

740
00:34:58,250 --> 00:35:04,550
here kind of fits nicely with graph QL

741
00:35:01,070 --> 00:35:08,000
and then we also added a bunch of other

742
00:35:04,550 --> 00:35:10,520
verticals to this thanks to BB sim so we

743
00:35:08,000 --> 00:35:12,500
just copied some of the techniques be

744
00:35:10,520 --> 00:35:15,290
some uses and we have modified that so

745
00:35:12,500 --> 00:35:17,300
we also added up one more vertical to

746
00:35:15,290 --> 00:35:19,880
this call security champions which

747
00:35:17,300 --> 00:35:22,010
already know so and we deployed security

748
00:35:19,880 --> 00:35:25,330
we introduced security champagnes

749
00:35:22,010 --> 00:35:27,530
program in stage Y so we have now

750
00:35:25,330 --> 00:35:29,180
surgeries champions all over the world

751
00:35:27,530 --> 00:35:32,630
and we run one of the biggest as a good

752
00:35:29,180 --> 00:35:34,250
champions program and and these are some

753
00:35:32,630 --> 00:35:38,480
of them who are sitting on the second

754
00:35:34,250 --> 00:35:43,040
row and if you can see that we literally

755
00:35:38,480 --> 00:35:44,840
believe in shifting left okay that's me

756
00:35:43,040 --> 00:35:50,020
and this office and we have architecture

757
00:35:44,840 --> 00:35:50,020
team and developers and all that okay

758
00:35:50,050 --> 00:35:55,240
yeah any questions so far

759
00:35:55,840 --> 00:35:58,840
yeah

760
00:35:58,849 --> 00:36:07,519
sure yeah I would share it on Twitter

761
00:36:03,609 --> 00:36:10,038
okay so let's move now as Rupali was

762
00:36:07,519 --> 00:36:12,468
saying she was saying there are tools

763
00:36:10,039 --> 00:36:14,900
available for you to do it easily now if

764
00:36:12,469 --> 00:36:17,059
you cannot afford to invest anything in

765
00:36:14,900 --> 00:36:18,829
security go buy open-source tools but

766
00:36:17,059 --> 00:36:21,229
again you have to manage them if you

767
00:36:18,829 --> 00:36:23,569
can't afford to go buy a tool and then

768
00:36:21,229 --> 00:36:25,788
do it if you even cannot afford to do

769
00:36:23,569 --> 00:36:28,910
either of those because you lack budget

770
00:36:25,789 --> 00:36:30,439
right go ask your developer friend hey I

771
00:36:28,910 --> 00:36:33,288
need to automate this can you help me

772
00:36:30,439 --> 00:36:36,109
out and most often they would help you

773
00:36:33,289 --> 00:36:38,630
and even if that is not possible then

774
00:36:36,109 --> 00:36:42,859
you can at least go ahead and intern

775
00:36:38,630 --> 00:36:44,689
right let them do the work and they

776
00:36:42,859 --> 00:36:46,669
would appreciate you for teaching

777
00:36:44,689 --> 00:36:49,788
teaching them security as well

778
00:36:46,669 --> 00:36:52,879
so there's no reason for us now to not

779
00:36:49,789 --> 00:36:54,079
implement security yet and I would go as

780
00:36:52,880 --> 00:36:55,429
far as saying that there's something

781
00:36:54,079 --> 00:36:58,999
called awkward DevOps

782
00:36:55,429 --> 00:37:01,160
okay so what it does is you use the

783
00:36:58,999 --> 00:37:03,288
tools you just flip a button call out on

784
00:37:01,160 --> 00:37:05,029
their pops this is available in some

785
00:37:03,289 --> 00:37:07,189
some tools and it's not having some

786
00:37:05,029 --> 00:37:09,409
tools but you flip a button and it does

787
00:37:07,189 --> 00:37:11,328
all this for you static analysis dynamic

788
00:37:09,409 --> 00:37:12,799
analysis it will scan your doctor for

789
00:37:11,329 --> 00:37:14,599
your security issues then it will also

790
00:37:12,799 --> 00:37:18,919
do OST scans using

791
00:37:14,599 --> 00:37:23,739
open source tools okay so please use

792
00:37:18,919 --> 00:37:27,019
those now we saw that many people are

793
00:37:23,739 --> 00:37:29,929
you know skeptical about would it really

794
00:37:27,019 --> 00:37:32,058
work seriously can you do that but yeah

795
00:37:29,929 --> 00:37:35,989
we can definitely do that as I mentioned

796
00:37:32,059 --> 00:37:38,209
we do about 20,000 scans per month so

797
00:37:35,989 --> 00:37:40,819
before there is a need for to educate

798
00:37:38,209 --> 00:37:43,069
people about that sir coughs and there

799
00:37:40,819 --> 00:37:44,839
was no environment for them to learn it

800
00:37:43,069 --> 00:37:49,038
so we have created one environment for

801
00:37:44,839 --> 00:37:50,659
you where you can go and learn deaths a

802
00:37:49,039 --> 00:37:53,299
corpse practices including static

803
00:37:50,659 --> 00:37:55,640
analysis dynamic analysis open source

804
00:37:53,299 --> 00:37:57,019
integration patching a bunch of other

805
00:37:55,640 --> 00:37:58,489
free tools you can go look at the

806
00:37:57,019 --> 00:38:00,618
repository you will find out more

807
00:37:58,489 --> 00:38:03,019
details and it's of course open source

808
00:38:00,619 --> 00:38:05,799
it's easy to set up just takes three

809
00:38:03,019 --> 00:38:09,890
commands to set up and then it's pretty

810
00:38:05,799 --> 00:38:15,500
reproducible as well okay

811
00:38:09,890 --> 00:38:18,589
to use them and I want to end this

812
00:38:15,500 --> 00:38:22,660
presentation on this note which relates

813
00:38:18,590 --> 00:38:22,660
directly to the video which I showed a

814
00:38:25,540 --> 00:38:30,560
lot that I will not read the slides but

815
00:38:28,100 --> 00:38:33,410
yeah so the culture of your organization

816
00:38:30,560 --> 00:38:36,259
is directly proportional to maturity of

817
00:38:33,410 --> 00:38:39,410
your both security levels practices and

818
00:38:36,260 --> 00:38:42,710
I can't stress it enough that culture is

819
00:38:39,410 --> 00:38:46,790
the biggest impediment for any kind of

820
00:38:42,710 --> 00:38:50,150
deficit cops roll out so please to if

821
00:38:46,790 --> 00:38:52,730
you are if you are a stakeholder

822
00:38:50,150 --> 00:38:55,460
management and you have some say please

823
00:38:52,730 --> 00:38:59,170
do work on your culture to make sure

824
00:38:55,460 --> 00:39:02,630
that we are more transparent we are more

825
00:38:59,170 --> 00:39:15,020
you know we are using more that's DevOps

826
00:39:02,630 --> 00:39:19,670
practices okay thank you questions sure

827
00:39:15,020 --> 00:39:22,309
do you use open or graph QL to do pen

828
00:39:19,670 --> 00:39:27,490
testing because it sounds like it would

829
00:39:22,309 --> 00:39:31,220
be pretty great but it's mostly

830
00:39:27,490 --> 00:39:36,470
automated using some Python scripts and

831
00:39:31,220 --> 00:39:41,029
stuff yeah does it answer question yes

832
00:39:36,470 --> 00:39:44,000
okay thanks Ron

833
00:39:41,029 --> 00:39:45,799
I have one question regarding how you

834
00:39:44,000 --> 00:39:48,109
can make use of this or like what

835
00:39:45,799 --> 00:39:50,210
additional security concerns are added

836
00:39:48,109 --> 00:39:51,950
because of graph QL because essentially

837
00:39:50,210 --> 00:39:54,470
it's a lay on top of micro-services or

838
00:39:51,950 --> 00:39:57,379
whatever backends there are so do you

839
00:39:54,470 --> 00:39:59,480
think there's anything else that is

840
00:39:57,380 --> 00:40:03,349
added in terms of security concerns

841
00:39:59,480 --> 00:40:05,359
like for example introspection etc it

842
00:40:03,349 --> 00:40:06,950
uses something called Lang SEC behind

843
00:40:05,359 --> 00:40:08,630
the scenes so it's pretty secure by

844
00:40:06,950 --> 00:40:12,259
default there's not a lot of issues

845
00:40:08,630 --> 00:40:15,140
which are there but again all the issues

846
00:40:12,260 --> 00:40:16,849
which would pop up in a normal restful

847
00:40:15,140 --> 00:40:20,720
api might come come up as well like

848
00:40:16,849 --> 00:40:23,960
business logic parks anything which is

849
00:40:20,720 --> 00:40:26,720
not really related to graph it would

850
00:40:23,960 --> 00:40:29,839
come up yeah or stop Ken I think per se

851
00:40:26,720 --> 00:40:35,049
just broadly saying CSRF doesn't apply

852
00:40:29,839 --> 00:40:35,049
it over all of those would apply yeah

853
00:40:37,560 --> 00:40:45,060
and the question okay thank you for your

854
00:40:41,460 --> 00:40:48,920
time and see you afterwards thank you

855
00:40:45,060 --> 00:40:48,920
[Applause]

