1
00:00:03,870 --> 00:00:08,889
yes the Cameron towns it from summer

2
00:00:06,040 --> 00:00:11,110
type so I'm solution architect based in

3
00:00:08,889 --> 00:00:13,230
Sydney and I look after asia-pacific and

4
00:00:11,110 --> 00:00:15,518
what we do at Sona type is we help you

5
00:00:13,230 --> 00:00:17,199
protect against the risk associated with

6
00:00:15,519 --> 00:00:18,580
open source libraries that you might use

7
00:00:17,199 --> 00:00:22,720
in your organization

8
00:00:18,580 --> 00:00:23,859
and why is that a problem one of the one

9
00:00:22,720 --> 00:00:25,929
of the big things that we've noticed

10
00:00:23,859 --> 00:00:28,089
over the last few years is many of the

11
00:00:25,929 --> 00:00:30,098
high-profile exploits that have occurred

12
00:00:28,089 --> 00:00:32,379
have actually occurred through the use

13
00:00:30,099 --> 00:00:35,230
of open source libraries so has anyone

14
00:00:32,380 --> 00:00:36,100
here heard of Equifax the the exploit

15
00:00:35,230 --> 00:00:38,949
that happened last year

16
00:00:36,100 --> 00:00:41,050
let Equifax export was done through a

17
00:00:38,949 --> 00:00:43,000
library called struts - I'm actually

18
00:00:41,050 --> 00:00:45,370
going to demonstrate some of the aspects

19
00:00:43,000 --> 00:00:48,129
of that hack today how it was actually

20
00:00:45,370 --> 00:00:52,089
done how the hackers found the the

21
00:00:48,129 --> 00:00:54,039
target website and and how you can

22
00:00:52,089 --> 00:00:56,620
actually find framework from the

23
00:00:54,039 --> 00:00:58,329
Internet so most organizations today use

24
00:00:56,620 --> 00:01:04,018
a lot of open source anyone who used

25
00:00:58,329 --> 00:01:06,610
open source anyone here ever used Google

26
00:01:04,019 --> 00:01:08,850
okay a lot of open source of Google

27
00:01:06,610 --> 00:01:11,920
anyone ever used an Android mobile phone

28
00:01:08,850 --> 00:01:13,929
open source we're all using open source

29
00:01:11,920 --> 00:01:16,180
all the time and our organizations have

30
00:01:13,930 --> 00:01:18,940
to use open source to write software

31
00:01:16,180 --> 00:01:20,320
more quickly because it's impossible to

32
00:01:18,940 --> 00:01:22,840
write all the software that we need to

33
00:01:20,320 --> 00:01:24,789
write in a modern business by hand from

34
00:01:22,840 --> 00:01:27,220
scratch you need to use open source

35
00:01:24,790 --> 00:01:29,770
libraries brings a lot of power and a

36
00:01:27,220 --> 00:01:31,990
lot of innovation but it also brings you

37
00:01:29,770 --> 00:01:34,090
in a lot of vulnerabilities so the idea

38
00:01:31,990 --> 00:01:36,070
is that you need to be on top of your

39
00:01:34,090 --> 00:01:38,110
use of open source and I was at a bank

40
00:01:36,070 --> 00:01:39,580
yesterday actually where the devs were

41
00:01:38,110 --> 00:01:41,620
saying we're not using open source well

42
00:01:39,580 --> 00:01:43,960
dev lead was the to development sort of

43
00:01:41,620 --> 00:01:45,700
looking at him saying you sure and then

44
00:01:43,960 --> 00:01:47,529
he says not a problem for us and then

45
00:01:45,700 --> 00:01:49,570
the security team was saying I can't

46
00:01:47,530 --> 00:01:51,340
sleep at night so the traditional sort

47
00:01:49,570 --> 00:01:53,679
of arguments you have between the

48
00:01:51,340 --> 00:01:55,810
developers and the security team happen

49
00:01:53,680 --> 00:01:57,730
all the time here in Singapore and other

50
00:01:55,810 --> 00:01:59,770
parts of the world what also makes this

51
00:01:57,730 --> 00:02:01,810
really important is in Singapore the

52
00:01:59,770 --> 00:02:03,940
momentary Authority of Singapore has

53
00:02:01,810 --> 00:02:06,160
stated that financial services

54
00:02:03,940 --> 00:02:08,318
institutions need to produce a bill of

55
00:02:06,160 --> 00:02:09,818
materials a listing of the components

56
00:02:08,318 --> 00:02:12,220
they use in their applications that they

57
00:02:09,818 --> 00:02:13,810
develop and and this is because they

58
00:02:12,220 --> 00:02:16,150
don't want to be part of these attacks

59
00:02:13,810 --> 00:02:17,360
that are using open source frameworks to

60
00:02:16,150 --> 00:02:18,320
be exploited

61
00:02:17,360 --> 00:02:20,570
what I'm going to do I'm going to show

62
00:02:18,320 --> 00:02:22,010
you how as a hacker we can find an open

63
00:02:20,570 --> 00:02:23,480
source framework on the Internet and

64
00:02:22,010 --> 00:02:26,209
then how you can actually protect

65
00:02:23,480 --> 00:02:29,959
against the exploit using using some

66
00:02:26,210 --> 00:02:32,210
tools that I can show you so let me just

67
00:02:29,960 --> 00:02:35,300
explain what this problem is this is a

68
00:02:32,210 --> 00:02:37,010
slide of the growth of open source and I

69
00:02:35,300 --> 00:02:39,560
was in a bank our insurance company

70
00:02:37,010 --> 00:02:41,600
story in Sydney and the CEO said to me

71
00:02:39,560 --> 00:02:43,760
Cameron I've had this application for 14

72
00:02:41,600 --> 00:02:45,620
years why do I need to worry about open

73
00:02:43,760 --> 00:02:48,829
source now what's changed why do I need

74
00:02:45,620 --> 00:02:51,980
to spend money on this problem and this

75
00:02:48,830 --> 00:02:53,959
slide sort of talks to that and what I

76
00:02:51,980 --> 00:02:55,820
was able to explain to her was that your

77
00:02:53,959 --> 00:02:58,640
developers used to write software from

78
00:02:55,820 --> 00:03:01,370
scratch but today modern software is

79
00:02:58,640 --> 00:03:04,429
built using components now we had Sona

80
00:03:01,370 --> 00:03:05,720
type around the largest Java component

81
00:03:04,430 --> 00:03:08,780
store in the world it's called maven

82
00:03:05,720 --> 00:03:11,420
central and last year we serve fifty two

83
00:03:08,780 --> 00:03:15,050
billion libraries to Java developers

84
00:03:11,420 --> 00:03:18,350
globally there's nine million active

85
00:03:15,050 --> 00:03:20,000
developers working on maven projects the

86
00:03:18,350 --> 00:03:21,470
massive amount of data is actually been

87
00:03:20,000 --> 00:03:24,400
put into there a lot of libraries are

88
00:03:21,470 --> 00:03:24,400
being used all the time

89
00:03:24,519 --> 00:03:28,580
120,000 the number of customers we've

90
00:03:26,989 --> 00:03:32,299
got its owner type we're by far the

91
00:03:28,580 --> 00:03:35,150
largest supplier of repository your

92
00:03:32,299 --> 00:03:37,370
repositories a way of storing components

93
00:03:35,150 --> 00:03:39,830
in your network and that allows your

94
00:03:37,370 --> 00:03:41,780
your DevOps and your devstack ops team

95
00:03:39,830 --> 00:03:44,420
to be more efficient to build software

96
00:03:41,780 --> 00:03:46,280
more quickly because traditionally

97
00:03:44,420 --> 00:03:48,649
programmers would download libraries off

98
00:03:46,280 --> 00:03:50,840
the internet very very slow and it's

99
00:03:48,650 --> 00:03:53,269
also risky for example a couple of years

100
00:03:50,840 --> 00:03:55,370
ago a developer wrote a very popular

101
00:03:53,269 --> 00:03:57,739
library in the JavaScript world in the

102
00:03:55,370 --> 00:04:00,950
MPM world and he pulled it because he

103
00:03:57,739 --> 00:04:03,080
had to fight with the npm organization

104
00:04:00,950 --> 00:04:04,760
when he pulled his library he actually

105
00:04:03,080 --> 00:04:07,450
broke builds at Facebook

106
00:04:04,760 --> 00:04:09,560
he broke dildora all around the world so

107
00:04:07,450 --> 00:04:12,320
the idea is how do we protect ourselves

108
00:04:09,560 --> 00:04:14,570
against these sorts of events just this

109
00:04:12,320 --> 00:04:17,209
week as a matter of fact a JavaScript

110
00:04:14,570 --> 00:04:19,700
library was hijacked and a malicious

111
00:04:17,209 --> 00:04:21,829
attacker put a crypto miner into the

112
00:04:19,700 --> 00:04:23,719
JavaScript library I know if anyone

113
00:04:21,829 --> 00:04:26,240
heard about that was that actually news

114
00:04:23,720 --> 00:04:27,979
here you heard about that so basically

115
00:04:26,240 --> 00:04:30,620
anyone who is using that JavaScript

116
00:04:27,979 --> 00:04:32,240
library if they downloaded it

117
00:04:30,620 --> 00:04:34,610
for two-day period they're actually

118
00:04:32,240 --> 00:04:36,980
downloading a JavaScript library which

119
00:04:34,610 --> 00:04:38,480
had a crypto miner inside of it and so

120
00:04:36,980 --> 00:04:41,240
all their customers that were using that

121
00:04:38,480 --> 00:04:43,970
were actually mining cryptocurrency for

122
00:04:41,240 --> 00:04:46,220
the attacker so this is going to become

123
00:04:43,970 --> 00:04:49,160
a bigger and bigger problem as open

124
00:04:46,220 --> 00:04:51,230
source use becomes exponential and the

125
00:04:49,160 --> 00:04:55,970
next slide actually shows you the growth

126
00:04:51,230 --> 00:05:00,650
of open source the the purple one there

127
00:04:55,970 --> 00:05:02,780
is maven which we run Java and then the

128
00:05:00,650 --> 00:05:06,169
red one there is is NPM which is

129
00:05:02,780 --> 00:05:08,840
JavaScript and what you can see there is

130
00:05:06,170 --> 00:05:11,030
MPM was almost nothing two years ago and

131
00:05:08,840 --> 00:05:13,340
now it's actually fifty nine billion

132
00:05:11,030 --> 00:05:17,119
components were downloaded last year NPM

133
00:05:13,340 --> 00:05:18,890
libraries now one of the security people

134
00:05:17,120 --> 00:05:20,480
don't know that this has hit them

135
00:05:18,890 --> 00:05:22,640
because only developers have started

136
00:05:20,480 --> 00:05:24,200
using this over the last two years so

137
00:05:22,640 --> 00:05:26,180
how is a security professional you're

138
00:05:24,200 --> 00:05:28,550
going to know that this is actually

139
00:05:26,180 --> 00:05:30,080
going on unless you're actually tracking

140
00:05:28,550 --> 00:05:35,080
every single library every framework

141
00:05:30,080 --> 00:05:37,760
yourself now all these components good

142
00:05:35,080 --> 00:05:39,500
no they're not they have a lot of

143
00:05:37,760 --> 00:05:41,300
vulnerabilities inside of them but

144
00:05:39,500 --> 00:05:44,480
traditionally when a vulnerability is

145
00:05:41,300 --> 00:05:45,950
found the people that write these

146
00:05:44,480 --> 00:05:47,780
libraries are told about it by the

147
00:05:45,950 --> 00:05:49,969
researcher who finds it and they'll list

148
00:05:47,780 --> 00:05:50,690
you a patch at the same time they issue

149
00:05:49,970 --> 00:05:53,300
a CVE

150
00:05:50,690 --> 00:05:56,300
the CDE is basically a report of the

151
00:05:53,300 --> 00:05:58,850
vulnerability and the problem with that

152
00:05:56,300 --> 00:06:00,620
process is okay it's great they released

153
00:05:58,850 --> 00:06:04,450
it but now they've published the exploit

154
00:06:00,620 --> 00:06:06,290
so an attack I can take advantage of

155
00:06:04,450 --> 00:06:08,900
organizations that are very big like

156
00:06:06,290 --> 00:06:10,700
banks are very slow to upgrade their

157
00:06:08,900 --> 00:06:11,630
libraries that they've got very hard for

158
00:06:10,700 --> 00:06:14,360
them to patch all their applications

159
00:06:11,630 --> 00:06:16,340
very quickly so the attacker has the

160
00:06:14,360 --> 00:06:19,040
first mover advantage over the

161
00:06:16,340 --> 00:06:20,599
defendants so the idea is that if you

162
00:06:19,040 --> 00:06:23,030
are using the exact source libraries

163
00:06:20,600 --> 00:06:25,460
which you are stay on top of it using

164
00:06:23,030 --> 00:06:27,890
automated tools there's 59 billion of

165
00:06:25,460 --> 00:06:29,479
them downloaded last year across

166
00:06:27,890 --> 00:06:31,729
hundreds and hundreds of thousands of

167
00:06:29,480 --> 00:06:33,680
libraries if you were to do that

168
00:06:31,730 --> 00:06:35,150
manually you can not stay on top of it

169
00:06:33,680 --> 00:06:36,650
so the whole idea is you want to

170
00:06:35,150 --> 00:06:39,530
automate that across your entire

171
00:06:36,650 --> 00:06:43,200
software development lifecycle and I'll

172
00:06:39,530 --> 00:06:46,690
show you how how to do that in a minute

173
00:06:43,200 --> 00:06:48,700
the other thing too that's changed is

174
00:06:46,690 --> 00:06:51,280
that 80 to 90 percent of modern

175
00:06:48,700 --> 00:06:52,900
applications are assembled so what that

176
00:06:51,280 --> 00:06:55,059
means is in the old days developers

177
00:06:52,900 --> 00:06:57,429
would open up Emacs and start writing a

178
00:06:55,060 --> 00:06:58,530
program from scratch doesn't happen

179
00:06:57,430 --> 00:07:02,100
today

180
00:06:58,530 --> 00:07:04,719
all modern applications are built using

181
00:07:02,100 --> 00:07:07,960
open source libraries and third-party

182
00:07:04,720 --> 00:07:09,460
libraries because they're being pushed

183
00:07:07,960 --> 00:07:12,190
by the business to write software very

184
00:07:09,460 --> 00:07:13,419
quickly you have to do innovation you

185
00:07:12,190 --> 00:07:16,120
have to always be delivering new

186
00:07:13,420 --> 00:07:17,530
features and software and we don't have

187
00:07:16,120 --> 00:07:21,250
the resources to write it off from

188
00:07:17,530 --> 00:07:26,320
scratch so we use these components Java

189
00:07:21,250 --> 00:07:28,000
JavaScript NPM Bower dotnet docker all

190
00:07:26,320 --> 00:07:31,960
these things are open source and they're

191
00:07:28,000 --> 00:07:33,760
all being used to write software but we

192
00:07:31,960 --> 00:07:37,299
don't actually have control over it and

193
00:07:33,760 --> 00:07:39,580
that's the change in the dev sec ops

194
00:07:37,300 --> 00:07:40,810
well when you're a security expert you

195
00:07:39,580 --> 00:07:42,520
actually don't realize that the

196
00:07:40,810 --> 00:07:45,520
developers are doing this to you or you

197
00:07:42,520 --> 00:07:47,140
might but most developers don't tell

198
00:07:45,520 --> 00:07:48,460
people what they're doing they have a

199
00:07:47,140 --> 00:07:50,110
lot of control they bring these

200
00:07:48,460 --> 00:07:52,000
libraries in they use them they don't

201
00:07:50,110 --> 00:07:54,430
know that they're secure or not secure

202
00:07:52,000 --> 00:07:55,780
but you as a security professional you

203
00:07:54,430 --> 00:07:57,820
actually own the risk but you're not

204
00:07:55,780 --> 00:07:59,679
aware of it so one of the things you

205
00:07:57,820 --> 00:08:01,780
want to do is actually be able to show

206
00:07:59,680 --> 00:08:03,610
this and then bring the security to the

207
00:08:01,780 --> 00:08:06,239
surface so you can see it and I'll show

208
00:08:03,610 --> 00:08:06,240
you how to do that

209
00:08:07,449 --> 00:08:11,750
we actually did a survey we found that

210
00:08:09,919 --> 00:08:14,180
one in five organizations where either

211
00:08:11,750 --> 00:08:16,280
breached or suspected been breached

212
00:08:14,180 --> 00:08:20,060
through an open-source component in the

213
00:08:16,280 --> 00:08:21,830
last 12 months and here's the classic

214
00:08:20,060 --> 00:08:24,020
example so Equifax I'm sure we've all

215
00:08:21,830 --> 00:08:26,090
heard of Equifax now and we do beat up

216
00:08:24,020 --> 00:08:27,229
on them a little bit and I feel sorry

217
00:08:26,090 --> 00:08:28,940
for them because it's actually very

218
00:08:27,229 --> 00:08:30,469
difficult for them to start top of it

219
00:08:28,940 --> 00:08:31,880
the big organization thousands of

220
00:08:30,470 --> 00:08:33,409
applications they're not the only

221
00:08:31,880 --> 00:08:34,610
organization that was hit through this

222
00:08:33,409 --> 00:08:36,700
particular vulnerability there's

223
00:08:34,610 --> 00:08:40,760
actually a lot of organizations were hit

224
00:08:36,700 --> 00:08:43,190
so March the 7th security researcher had

225
00:08:40,760 --> 00:08:44,990
worked with the struts team they had

226
00:08:43,190 --> 00:08:47,510
found a vulnerability it was actually

227
00:08:44,990 --> 00:08:48,230
done by hand the the research they used

228
00:08:47,510 --> 00:08:49,670
to the CVE

229
00:08:48,230 --> 00:08:53,839
and they issued the patch on the same

230
00:08:49,670 --> 00:08:55,089
day responsible reporting now what

231
00:08:53,839 --> 00:08:59,480
happens

232
00:08:55,089 --> 00:09:05,060
March the 9th two days later an attacker

233
00:08:59,480 --> 00:09:06,649
ran a Who am I on an Equifax server that

234
00:09:05,060 --> 00:09:08,689
tells me you've got two days there

235
00:09:06,649 --> 00:09:10,040
potentially or less to actually patch

236
00:09:08,690 --> 00:09:12,220
the service before people is going to

237
00:09:10,040 --> 00:09:14,449
start probing your network

238
00:09:12,220 --> 00:09:17,120
unfortunately the Equifax team had made

239
00:09:14,450 --> 00:09:19,850
a number of mistakes because the Who am

240
00:09:17,120 --> 00:09:22,190
I came back with root so the attackers

241
00:09:19,850 --> 00:09:24,740
now know oh okay I can actually own this

242
00:09:22,190 --> 00:09:27,260
fault because this exploit is severity

243
00:09:24,740 --> 00:09:31,130
ten CVE it allows the remote code

244
00:09:27,260 --> 00:09:35,569
execution extremely serious problem now

245
00:09:31,130 --> 00:09:37,790
what happens July the 29th Equifax

246
00:09:35,570 --> 00:09:40,250
realized I'd been breached there's

247
00:09:37,790 --> 00:09:42,890
literally six months and the way they

248
00:09:40,250 --> 00:09:45,560
realized they'd been breached was their

249
00:09:42,890 --> 00:09:47,089
network team noticed unusual activity on

250
00:09:45,560 --> 00:09:51,170
the network there was too much outbound

251
00:09:47,089 --> 00:09:53,690
traffic so yes the network and the seam

252
00:09:51,170 --> 00:09:55,640
and the firewall people they didn't find

253
00:09:53,690 --> 00:09:59,380
this but there's six months of

254
00:09:55,640 --> 00:09:59,380
infiltration and they missed

255
00:10:00,529 --> 00:10:05,939
the actual data exploit was actually

256
00:10:03,300 --> 00:10:08,370
coming out between May and August 145

257
00:10:05,939 --> 00:10:11,309
million records in America the data that

258
00:10:08,370 --> 00:10:14,129
was stolen was name address date of

259
00:10:11,309 --> 00:10:16,110
birth social security number you can't

260
00:10:14,129 --> 00:10:17,370
change that data you can't change your

261
00:10:16,110 --> 00:10:20,610
password if you can't change your date

262
00:10:17,370 --> 00:10:22,230
of birth the risk to Equifax is that all

263
00:10:20,610 --> 00:10:25,559
of these people have had identity theft

264
00:10:22,230 --> 00:10:27,959
so now there's legal action the CEO the

265
00:10:25,559 --> 00:10:30,029
CIO and the CSO and Equifax or lost

266
00:10:27,959 --> 00:10:31,439
their jobs over this all over one

267
00:10:30,029 --> 00:10:34,949
vulnerable library that they didn't

268
00:10:31,439 --> 00:10:38,279
patch there was a probe done for a

269
00:10:34,949 --> 00:10:39,990
number of months there now they're in

270
00:10:38,279 --> 00:10:42,990
crisis management they were called up in

271
00:10:39,990 --> 00:10:46,019
front of the US government they're being

272
00:10:42,990 --> 00:10:47,459
sued major disaster all over something

273
00:10:46,019 --> 00:10:48,629
was actually quite preventable if

274
00:10:47,459 --> 00:10:52,498
they're actually on top of their

275
00:10:48,629 --> 00:10:54,269
patching of libraries actually there was

276
00:10:52,499 --> 00:10:55,980
another CVD published what I'm going to

277
00:10:54,269 --> 00:11:00,329
do now I'm actually going to show you

278
00:10:55,980 --> 00:11:03,540
how to use Google to find struts on the

279
00:11:00,329 --> 00:11:05,429
internet because struts pages generate a

280
00:11:03,540 --> 00:11:07,699
file of the signature let's show you

281
00:11:05,429 --> 00:11:07,699
that

282
00:11:11,440 --> 00:11:16,340
and you use Google here now when I'm

283
00:11:14,390 --> 00:11:20,150
looking for struts I'd know that strut

284
00:11:16,340 --> 00:11:24,910
generates pages with a signature that

285
00:11:20,150 --> 00:11:24,910
looks like this hope you can see that

286
00:11:32,429 --> 00:11:40,240
294 million pages they're all these

287
00:11:36,970 --> 00:11:43,269
pages are written instructs so I'm gonna

288
00:11:40,240 --> 00:11:47,230
pack up I'm an attacker I now know how

289
00:11:43,269 --> 00:11:50,069
that website was written and I'm

290
00:11:47,230 --> 00:11:53,439
guessing that if they're using struts on

291
00:11:50,069 --> 00:11:55,868
March the 9th two days after a security

292
00:11:53,439 --> 00:11:58,509
alert was issued they could still be

293
00:11:55,869 --> 00:12:00,459
vulnerable to the exploit they might not

294
00:11:58,509 --> 00:12:02,860
have patched now that's American

295
00:12:00,459 --> 00:12:05,170
Airlines the first site there many many

296
00:12:02,860 --> 00:12:07,420
organizations in the world use struts

297
00:12:05,170 --> 00:12:10,179
very very popular framework the

298
00:12:07,420 --> 00:12:14,378
framework is used to generate web pages

299
00:12:10,179 --> 00:12:17,980
like WordPress or PHP so now I'm an

300
00:12:14,379 --> 00:12:19,899
attacker what do I do next well I might

301
00:12:17,980 --> 00:12:23,829
filter this for the fortune 500

302
00:12:19,899 --> 00:12:29,079
companies or I might just filter it

303
00:12:23,829 --> 00:12:32,199
Equifax to be a targeted attack oh okay

304
00:12:29,079 --> 00:12:37,589
so what I've got here is I've now got

305
00:12:32,199 --> 00:12:39,939
100 pages at Equifax written instructs

306
00:12:37,589 --> 00:12:40,990
they're still up there by the way they

307
00:12:39,939 --> 00:12:43,809
may or may not have patched their

308
00:12:40,990 --> 00:12:45,549
services the attack was announced but

309
00:12:43,809 --> 00:12:48,069
I'm an attacker I can now target this

310
00:12:45,549 --> 00:12:49,929
website it's a very very popular

311
00:12:48,069 --> 00:12:52,740
technique the hackers to actually go and

312
00:12:49,929 --> 00:12:54,970
find web pages using their signatures

313
00:12:52,740 --> 00:12:56,949
there's another very famous attack a

314
00:12:54,970 --> 00:13:00,009
couple of years ago called the Panama

315
00:12:56,949 --> 00:13:03,040
papers the Panama papers was data that

316
00:13:00,009 --> 00:13:04,779
was stolen about tax avoidance and

317
00:13:03,040 --> 00:13:06,670
funnily enough the prime minister of my

318
00:13:04,779 --> 00:13:08,649
country Australia he's the prime

319
00:13:06,670 --> 00:13:11,139
minister and he's actually using this

320
00:13:08,649 --> 00:13:12,819
offshore account to hide his income the

321
00:13:11,139 --> 00:13:15,279
Queen of England was also caught up in

322
00:13:12,819 --> 00:13:18,248
this many many senior politicians were

323
00:13:15,279 --> 00:13:19,720
caught now what was the framework the

324
00:13:18,249 --> 00:13:22,720
framework that was used in that attack

325
00:13:19,720 --> 00:13:24,569
was Drupal Drupal is a content

326
00:13:22,720 --> 00:13:28,449
management system for creating web pages

327
00:13:24,569 --> 00:13:30,699
he was not patched and now the attacker

328
00:13:28,449 --> 00:13:32,769
has used a signature very similar to

329
00:13:30,699 --> 00:13:35,019
this and as a matter of fact the data

330
00:13:32,769 --> 00:13:36,249
that I've actually show there actually

331
00:13:35,019 --> 00:13:38,069
worked this one out is quite happy with

332
00:13:36,249 --> 00:13:40,959
that there's actually a document here

333
00:13:38,069 --> 00:13:43,449
quite popular google hacking for

334
00:13:40,959 --> 00:13:44,888
penetration testers it's pretty much one

335
00:13:43,449 --> 00:13:46,358
of the standard documents

336
00:13:44,889 --> 00:13:48,429
the guy who wrote this is pretty clear

337
00:13:46,359 --> 00:13:51,730
of guy called Johnny long he gives you a

338
00:13:48,429 --> 00:13:53,439
whole bunch of examples here and he

339
00:13:51,730 --> 00:13:56,079
shows you most of these examples are

340
00:13:53,439 --> 00:13:58,959
about hacking WordPress and PHP sites

341
00:13:56,079 --> 00:14:00,849
but the techniques the same you actually

342
00:13:58,959 --> 00:14:05,079
going to find the admin module and you

343
00:14:00,850 --> 00:14:07,029
break in recommend that to you if you're

344
00:14:05,079 --> 00:14:10,089
in the if you're ever interested in how

345
00:14:07,029 --> 00:14:11,859
this is actually done so let's just let

346
00:14:10,089 --> 00:14:14,290
it back up a step what I'm saying is

347
00:14:11,859 --> 00:14:16,749
that if you're using a framework and

348
00:14:14,290 --> 00:14:19,419
you're generating web pages these web

349
00:14:16,749 --> 00:14:21,569
pages have a signature and these

350
00:14:19,419 --> 00:14:24,879
frameworks can now be exploited because

351
00:14:21,569 --> 00:14:27,399
when it CBE is published the exploit is

352
00:14:24,879 --> 00:14:28,809
often published with it so the attackers

353
00:14:27,399 --> 00:14:32,079
are taking advantage of this particular

354
00:14:28,809 --> 00:14:34,029
attack vector to go and exploit these

355
00:14:32,079 --> 00:14:36,279
frameworks and think about the return on

356
00:14:34,029 --> 00:14:37,839
investment for an attacker rather than

357
00:14:36,279 --> 00:14:39,850
sitting there doing very very deep

358
00:14:37,839 --> 00:14:41,709
detailed work on your site trying to

359
00:14:39,850 --> 00:14:43,689
work out what sort of exploits you can

360
00:14:41,709 --> 00:14:46,660
try all you need to do is attack a

361
00:14:43,689 --> 00:14:48,879
framework using a body and as a matter

362
00:14:46,660 --> 00:14:50,730
of fact is a database of these that you

363
00:14:48,879 --> 00:14:54,519
can just subscribe to called show down

364
00:14:50,730 --> 00:14:56,470
anyone who'd have straight in the show

365
00:14:54,519 --> 00:14:59,110
down is actually a database of these

366
00:14:56,470 --> 00:15:02,139
results that I'm showing you it lists

367
00:14:59,110 --> 00:15:04,629
out websites IOT devices power plants

368
00:15:02,139 --> 00:15:07,239
nuclear reactors if you want to go that

369
00:15:04,629 --> 00:15:08,829
far they're all in the database so the

370
00:15:07,239 --> 00:15:10,059
idea is that you're attacking the

371
00:15:08,829 --> 00:15:12,878
frameworks that are used by these

372
00:15:10,059 --> 00:15:14,889
organizations to break in very very

373
00:15:12,879 --> 00:15:16,899
lucrative way very high return on your

374
00:15:14,889 --> 00:15:21,879
investment as an attacker to attack

375
00:15:16,899 --> 00:15:25,410
these frameworks so that's the doom and

376
00:15:21,879 --> 00:15:25,410
gloom let's see how we fix this

377
00:15:26,990 --> 00:15:34,770
that starts are still being downloaded

378
00:15:32,490 --> 00:15:36,870
we actually serve struts so we're part

379
00:15:34,770 --> 00:15:39,810
of the problem I guess but we found last

380
00:15:36,870 --> 00:15:42,330
year that 3054 organizations downloaded

381
00:15:39,810 --> 00:15:49,619
the exact run durable version even after

382
00:15:42,330 --> 00:15:52,730
the exploit was published so what we do

383
00:15:49,620 --> 00:15:52,730
understand we get to do that sorry

384
00:16:05,440 --> 00:16:11,079
so what we do is we actually have

385
00:16:07,089 --> 00:16:13,209
decided to solve this problem we we

386
00:16:11,079 --> 00:16:14,829
actually built maven central and we

387
00:16:13,209 --> 00:16:17,589
serve these libraries and a number of

388
00:16:14,829 --> 00:16:19,388
years ago a bank came to us a large US

389
00:16:17,589 --> 00:16:21,670
bank and said we've downloaded all these

390
00:16:19,389 --> 00:16:23,560
libraries we found our vulnerable during

391
00:16:21,670 --> 00:16:25,660
a pen test can you help protect us in

392
00:16:23,560 --> 00:16:26,920
future we said yes we'll do that we

393
00:16:25,660 --> 00:16:29,500
actually built this product for them

394
00:16:26,920 --> 00:16:31,628
that will scan these libraries that

395
00:16:29,500 --> 00:16:33,009
you're using and match them to known

396
00:16:31,629 --> 00:16:34,560
vulnerable libraries and tell you about

397
00:16:33,009 --> 00:16:37,569
it early in the development lifecycle

398
00:16:34,560 --> 00:16:38,589
and this is the DevOps

399
00:16:37,569 --> 00:16:43,000
tool chain that a lot of organizations

400
00:16:38,589 --> 00:16:45,550
are moving to where develop and download

401
00:16:43,000 --> 00:16:48,069
source control from source control he

402
00:16:45,550 --> 00:16:50,290
downloads libraries from his repo nexus

403
00:16:48,069 --> 00:16:52,300
repository which downloads libraries

404
00:16:50,290 --> 00:16:53,800
from the public Internet this is

405
00:16:52,300 --> 00:16:55,899
actually one of the first control points

406
00:16:53,800 --> 00:16:57,099
a lot of organizations don't do this the

407
00:16:55,899 --> 00:17:00,399
developers can just go out and get

408
00:16:57,100 --> 00:17:01,899
whatever they want and that's a risk

409
00:17:00,399 --> 00:17:03,459
we've got hundreds or thousands of

410
00:17:01,899 --> 00:17:05,199
developers and they're all bringing in

411
00:17:03,459 --> 00:17:06,579
libraries how do you know what they're

412
00:17:05,199 --> 00:17:08,559
brought in how do you control that or

413
00:17:06,579 --> 00:17:10,030
even know what they've done so by

414
00:17:08,559 --> 00:17:12,369
putting in this pattern here is

415
00:17:10,030 --> 00:17:13,839
architecture at least all the libraries

416
00:17:12,369 --> 00:17:16,229
are going through the repository so you

417
00:17:13,839 --> 00:17:19,119
can actually track what they're using

418
00:17:16,230 --> 00:17:21,699
when they do a check-in that will issue

419
00:17:19,119 --> 00:17:24,089
a bill which will bring in the same

420
00:17:21,699 --> 00:17:26,740
libraries from the repository manager

421
00:17:24,089 --> 00:17:29,559
that will then push in their builds into

422
00:17:26,740 --> 00:17:32,620
the repo then they deploy from their

423
00:17:29,559 --> 00:17:35,289
into their different environments so

424
00:17:32,620 --> 00:17:36,969
this is what we call a DevOps tool chain

425
00:17:35,289 --> 00:17:38,230
or dev stack up tool chain it's

426
00:17:36,970 --> 00:17:40,900
continuous integration and continuous

427
00:17:38,230 --> 00:17:43,470
delivery this architecture is very very

428
00:17:40,900 --> 00:17:45,340
powerful quite simple but very powerful

429
00:17:43,470 --> 00:17:47,500
because some of the things that we're

430
00:17:45,340 --> 00:17:49,030
actually showing you here are very very

431
00:17:47,500 --> 00:17:51,370
good controls that are quite easy to

432
00:17:49,030 --> 00:17:53,408
implement firstly developers are no

433
00:17:51,370 --> 00:17:55,600
longer allowed to go to the Internet to

434
00:17:53,409 --> 00:17:57,490
get libraries so what typically happens

435
00:17:55,600 --> 00:17:59,678
in most banks that we work with to do

436
00:17:57,490 --> 00:18:01,240
this is they actually put a proxy rule

437
00:17:59,679 --> 00:18:03,549
in that developers can no longer go out

438
00:18:01,240 --> 00:18:06,159
and grab libraries directly they have to

439
00:18:03,549 --> 00:18:07,809
access them through the repository and

440
00:18:06,159 --> 00:18:09,850
the advantage is that the security team

441
00:18:07,809 --> 00:18:13,200
can now make an assessment on what we

442
00:18:09,850 --> 00:18:13,199
actually have in our organization

443
00:18:13,550 --> 00:18:16,940
let me show you that

444
00:18:34,240 --> 00:18:38,860
okay here's a repository manager and

445
00:18:37,480 --> 00:18:40,260
this is the list of all the libraries

446
00:18:38,860 --> 00:18:44,678
that we've downloaded

447
00:18:40,260 --> 00:18:47,170
I've got maven I've got MPM and I've

448
00:18:44,679 --> 00:18:49,480
also got pi PI in this particular

449
00:18:47,170 --> 00:18:51,400
example but for each of these different

450
00:18:49,480 --> 00:18:54,370
frameworks and docker and and all the

451
00:18:51,400 --> 00:18:57,429
other languages I've got a health check

452
00:18:54,370 --> 00:19:00,219
so I can see for example in my maven

453
00:18:57,429 --> 00:19:03,700
repository that I've got 46 critical

454
00:19:00,220 --> 00:19:07,620
issues 35 severe issues in my maven

455
00:19:03,700 --> 00:19:10,059
I've got 15 critical ones in my NPM and

456
00:19:07,620 --> 00:19:13,209
they've even got them in my PI pi

457
00:19:10,059 --> 00:19:17,760
you might - so I can actually click on

458
00:19:13,210 --> 00:19:17,760
that and login

459
00:19:19,420 --> 00:19:24,470
but I've now got visibility that's the

460
00:19:22,070 --> 00:19:27,110
first step so when you having a

461
00:19:24,470 --> 00:19:28,310
conversation with the developers you can

462
00:19:27,110 --> 00:19:30,889
actually say okay what are we actually

463
00:19:28,310 --> 00:19:32,870
using all right and isn't one durable to

464
00:19:30,890 --> 00:19:35,090
exploit and do I have security and

465
00:19:32,870 --> 00:19:38,479
licensing issues in my repository

466
00:19:35,090 --> 00:19:40,220
very very quick and easy to do that the

467
00:19:38,480 --> 00:19:42,470
whole idea is that once you have

468
00:19:40,220 --> 00:19:43,970
visibility of it and start addressing it

469
00:19:42,470 --> 00:19:46,010
you don't want to get the phone call

470
00:19:43,970 --> 00:19:48,590
from the CEO in the morning saying I

471
00:19:46,010 --> 00:19:49,660
just heard about my buddy and equifax

472
00:19:48,590 --> 00:19:52,580
who just lost his job

473
00:19:49,660 --> 00:19:53,600
are we going to be the next Equifax the

474
00:19:52,580 --> 00:19:54,560
whole idea is you don't want to be the

475
00:19:53,600 --> 00:19:55,820
next deck retract

476
00:19:54,560 --> 00:19:58,010
you want to stay on top of your use of

477
00:19:55,820 --> 00:19:59,600
open source you're using it it's only

478
00:19:58,010 --> 00:20:00,950
going to get bigger the problem is going

479
00:19:59,600 --> 00:20:04,459
to get bigger and bigger in the future

480
00:20:00,950 --> 00:20:06,350
so man Egypt control it and use it to

481
00:20:04,460 --> 00:20:09,700
like this to automate the control of it

482
00:20:06,350 --> 00:20:09,699
to actually know what you've got

483
00:20:12,950 --> 00:20:16,390
very bit more about that in a minute

484
00:20:23,120 --> 00:20:30,590
so let's just recap third-party

485
00:20:27,920 --> 00:20:33,230
libraries are the source of risk so we

486
00:20:30,590 --> 00:20:35,659
ran a survey in 2014 we found that 14%

487
00:20:33,230 --> 00:20:38,540
of organizations thought that it was a

488
00:20:35,660 --> 00:20:39,770
problem last year when we did the same

489
00:20:38,540 --> 00:20:42,350
survey 20 percent of organizations

490
00:20:39,770 --> 00:20:45,410
thought they'd been a problem so this is

491
00:20:42,350 --> 00:20:46,879
saying you suspect or have verified that

492
00:20:45,410 --> 00:20:48,320
a breach relating to open source

493
00:20:46,880 --> 00:20:53,330
components has occurred to you in the

494
00:20:48,320 --> 00:20:54,500
last 12 months up to 20% this number

495
00:20:53,330 --> 00:20:56,000
here is really interesting this is

496
00:20:54,500 --> 00:20:59,600
actually from Gartner this is not from

497
00:20:56,000 --> 00:21:01,160
us this is Gartner's report so we've

498
00:20:59,600 --> 00:21:04,250
gotten the wrote a report on the use of

499
00:21:01,160 --> 00:21:05,840
open source and they said 50% will have

500
00:21:04,250 --> 00:21:07,490
suffered damage by failing to manage

501
00:21:05,840 --> 00:21:09,800
trust in their software development

502
00:21:07,490 --> 00:21:13,190
lifecycle causing revenue loss or more

503
00:21:09,800 --> 00:21:15,500
than 15% if you look at Equifax again

504
00:21:13,190 --> 00:21:17,840
not only did those three executives lose

505
00:21:15,500 --> 00:21:20,630
their jobs the share price went down 20%

506
00:21:17,840 --> 00:21:22,070
and it's fighting back but they've got

507
00:21:20,630 --> 00:21:23,270
all these legal problems too now because

508
00:21:22,070 --> 00:21:26,600
they're going to be sued by people who

509
00:21:23,270 --> 00:21:29,330
lost their data now if you're doing PCI

510
00:21:26,600 --> 00:21:30,649
work and credit card processing if you

511
00:21:29,330 --> 00:21:33,080
have a breach like this you could easily

512
00:21:30,650 --> 00:21:34,850
lose your PCI compliance that's an

513
00:21:33,080 --> 00:21:37,310
existential risk for a bank you don't

514
00:21:34,850 --> 00:21:38,510
want to have that conversation you have

515
00:21:37,310 --> 00:21:42,770
to make sure you're managing this

516
00:21:38,510 --> 00:21:44,420
problem and a lot of what I've talked

517
00:21:42,770 --> 00:21:48,310
about is Java but we also do JavaScript

518
00:21:44,420 --> 00:21:51,680
and one of the problems with JavaScript

519
00:21:48,310 --> 00:21:53,840
is that there's lots of vulnerabilities

520
00:21:51,680 --> 00:21:57,170
in JavaScript but what makes it even

521
00:21:53,840 --> 00:21:59,449
worse is that the vast majority of

522
00:21:57,170 --> 00:22:01,420
JavaScript libraries are maintained by

523
00:21:59,450 --> 00:22:05,900
one person

524
00:22:01,420 --> 00:22:09,380
in fact struts Java library 80% of the

525
00:22:05,900 --> 00:22:11,360
code is maintained by one person these

526
00:22:09,380 --> 00:22:13,130
open source libraries have very few

527
00:22:11,360 --> 00:22:17,120
people actually working on them despite

528
00:22:13,130 --> 00:22:18,800
what you might think and a JavaScript

529
00:22:17,120 --> 00:22:20,389
library that's maintained by one person

530
00:22:18,800 --> 00:22:22,460
could easily have a vulnerability in it

531
00:22:20,390 --> 00:22:24,950
and because a lot of people are using it

532
00:22:22,460 --> 00:22:27,080
and relying on it they're vulnerable and

533
00:22:24,950 --> 00:22:27,950
he might be a great programmer but he

534
00:22:27,080 --> 00:22:31,850
might not have actually thought about

535
00:22:27,950 --> 00:22:33,200
writing secure code and what you do with

536
00:22:31,850 --> 00:22:36,409
an organization when you use something

537
00:22:33,200 --> 00:22:39,710
like handlebars 87 percent of handlebars

538
00:22:36,410 --> 00:22:42,590
releases the vulnerable 37% of jQuery

539
00:22:39,710 --> 00:22:44,690
releases the vulnerable 40% of angular

540
00:22:42,590 --> 00:22:47,418
releases the vulnerable as a matter of

541
00:22:44,690 --> 00:22:49,340
fact if you're using angular 1 you

542
00:22:47,419 --> 00:22:51,230
actually have no security fixes for the

543
00:22:49,340 --> 00:22:53,030
vulnerabilities in that the team only

544
00:22:51,230 --> 00:22:54,350
put the fixes into angular 2 they never

545
00:22:53,030 --> 00:22:56,450
backed quarter that they said that's the

546
00:22:54,350 --> 00:22:57,260
end of life we're not supporting angular

547
00:22:56,450 --> 00:22:59,870
1 anymore

548
00:22:57,260 --> 00:23:01,549
if you're using these frameworks then

549
00:22:59,870 --> 00:23:03,370
you're susceptible and because of that

550
00:23:01,549 --> 00:23:05,299
single person that's writing their code

551
00:23:03,370 --> 00:23:07,549
there's not a lot of people that might

552
00:23:05,299 --> 00:23:09,590
have security expertise and you're

553
00:23:07,549 --> 00:23:12,230
basically getting a thousand programmers

554
00:23:09,590 --> 00:23:15,020
to write software for you you don't pay

555
00:23:12,230 --> 00:23:18,289
them you don't check their work and then

556
00:23:15,020 --> 00:23:20,710
they go what's your now you don't

557
00:23:18,289 --> 00:23:20,710
actually know

558
00:23:21,389 --> 00:23:27,428
so what we've said here is we've said

559
00:23:23,740 --> 00:23:30,519
let's help organizations manage that the

560
00:23:27,429 --> 00:23:33,279
first place to do it is in the

561
00:23:30,519 --> 00:23:35,049
development environment so this is

562
00:23:33,279 --> 00:23:37,330
actually an eclipse plugin that we've

563
00:23:35,049 --> 00:23:40,960
got and this definitely showing you the

564
00:23:37,330 --> 00:23:44,049
risk associated with all the libraries

565
00:23:40,960 --> 00:23:44,980
in that particular project what I'm

566
00:23:44,049 --> 00:23:47,799
actually showing here is I'm actually

567
00:23:44,980 --> 00:23:49,960
showing you spring MVC this is from a

568
00:23:47,799 --> 00:23:53,190
company called pivotal who have released

569
00:23:49,960 --> 00:23:55,570
an open-source version of the library

570
00:23:53,190 --> 00:23:59,440
and as you can see this is actually a

571
00:23:55,570 --> 00:24:01,330
timeline of spring and the version that

572
00:23:59,440 --> 00:24:04,600
you're using in your project is the one

573
00:24:01,330 --> 00:24:07,139
here three point two point three and it

574
00:24:04,600 --> 00:24:10,199
has a critical issue this red triangle

575
00:24:07,139 --> 00:24:13,029
critical this orange triangle is severe

576
00:24:10,200 --> 00:24:16,840
there's actually four separate security

577
00:24:13,029 --> 00:24:18,460
alerts on that particular library and

578
00:24:16,840 --> 00:24:20,139
just click on them and see the list of

579
00:24:18,460 --> 00:24:24,940
CVS here they are you can go and

580
00:24:20,139 --> 00:24:27,158
research into those but I'm a program

581
00:24:24,940 --> 00:24:30,700
review this library what do i do how do

582
00:24:27,159 --> 00:24:33,039
I fix it so the idea is that we show you

583
00:24:30,700 --> 00:24:35,259
in the timeline that there is a version

584
00:24:33,039 --> 00:24:36,879
here in the future these are all the

585
00:24:35,259 --> 00:24:41,649
different versions all the different

586
00:24:36,879 --> 00:24:43,959
releases 3.2 point 18 of this particular

587
00:24:41,649 --> 00:24:47,080
library they finally fix the

588
00:24:43,960 --> 00:24:48,519
vulnerabilities so what you can do is

589
00:24:47,080 --> 00:24:50,860
have a conversation with the developers

590
00:24:48,519 --> 00:24:52,779
and say look three point two point

591
00:24:50,860 --> 00:24:54,998
eighteen or this one is fixed

592
00:24:52,779 --> 00:24:56,799
don't use three two three that's one you

593
00:24:54,999 --> 00:24:59,649
currently got use the new version

594
00:24:56,799 --> 00:25:02,200
because the vulnerabilities of god it's

595
00:24:59,649 --> 00:25:04,600
a very very easy process to fix that in

596
00:25:02,200 --> 00:25:06,460
the design time in the developers phase

597
00:25:04,600 --> 00:25:08,559
of the project because once you've

598
00:25:06,460 --> 00:25:09,970
released it and it's in production and

599
00:25:08,559 --> 00:25:12,399
you get a pen test done and the pen

600
00:25:09,970 --> 00:25:14,499
tester finds this problem now you've got

601
00:25:12,399 --> 00:25:16,119
all that wasted time and money that you

602
00:25:14,499 --> 00:25:17,679
spent testing and releasing the software

603
00:25:16,119 --> 00:25:21,580
it was known to be vulnerable in the

604
00:25:17,679 --> 00:25:23,350
first place so don't do that what you do

605
00:25:21,580 --> 00:25:25,059
is you say to the developers use this

606
00:25:23,350 --> 00:25:28,658
tool we can show you that it's fun

607
00:25:25,059 --> 00:25:31,090
durable fix it on day one that saves the

608
00:25:28,659 --> 00:25:32,559
bank saves us a lot of money from

609
00:25:31,090 --> 00:25:34,240
actually releasing software that's known

610
00:25:32,559 --> 00:25:35,889
to be vulnerable to exploit

611
00:25:34,240 --> 00:25:39,640
this is the severity 9x port this is a

612
00:25:35,890 --> 00:25:42,280
remote code execution again and what you

613
00:25:39,640 --> 00:25:44,920
can actually do click on that good

614
00:25:42,280 --> 00:25:47,649
version with this button here called

615
00:25:44,920 --> 00:25:51,790
migrate actually updates the project for

616
00:25:47,650 --> 00:25:54,670
the developer they can go and say that

617
00:25:51,790 --> 00:25:58,960
I'm rebuilding my project it's gone no

618
00:25:54,670 --> 00:26:01,630
longer my list of problems and you get

619
00:25:58,960 --> 00:26:04,540
on to the next one as a matter of fact

620
00:26:01,630 --> 00:26:06,160
we had a bank in Sydney and they had 20

621
00:26:04,540 --> 00:26:09,190
applications which they scanned and put

622
00:26:06,160 --> 00:26:10,990
into into the server here and when the

623
00:26:09,190 --> 00:26:12,490
dev ops they took it to his lead

624
00:26:10,990 --> 00:26:13,510
programmer in one of the projects she

625
00:26:12,490 --> 00:26:15,070
was shocked that she had all these

626
00:26:13,510 --> 00:26:17,379
vulnerabilities she didn't even know she

627
00:26:15,070 --> 00:26:20,860
actually sat down and did this and she

628
00:26:17,380 --> 00:26:22,150
fixed it in two days she wrote test unit

629
00:26:20,860 --> 00:26:24,250
tests to make sure that the software

630
00:26:22,150 --> 00:26:26,679
wasn't broken she just went through an

631
00:26:24,250 --> 00:26:28,570
immediate it is all these issues done

632
00:26:26,679 --> 00:26:30,880
it's actually quite quick and efficient

633
00:26:28,570 --> 00:26:32,169
to do it using a tool like this rather

634
00:26:30,880 --> 00:26:34,179
than having to do your own research

635
00:26:32,170 --> 00:26:36,520
because I've got a hundred something

636
00:26:34,179 --> 00:26:38,170
libraries in this project and if it's

637
00:26:36,520 --> 00:26:40,750
one of those takes before two eight

638
00:26:38,170 --> 00:26:42,790
hours to research that's eight hundred

639
00:26:40,750 --> 00:26:44,679
hours of work that's twenty weeks or one

640
00:26:42,790 --> 00:26:46,570
person and that could be your best

641
00:26:44,679 --> 00:26:48,250
programmer and she's no longer writing

642
00:26:46,570 --> 00:26:50,590
software she's now looking for security

643
00:26:48,250 --> 00:26:53,320
problems so you no longer delivering new

644
00:26:50,590 --> 00:26:58,209
features you're chasing security issues

645
00:26:53,320 --> 00:26:59,950
and quite actually hard to do because as

646
00:26:58,210 --> 00:27:01,960
you saw with that spring project there's

647
00:26:59,950 --> 00:27:03,780
hundreds of versions so which one is

648
00:27:01,960 --> 00:27:05,830
actually a good one how do you know

649
00:27:03,780 --> 00:27:08,320
similarly this library here this is

650
00:27:05,830 --> 00:27:12,820
called Commons collections actually

651
00:27:08,320 --> 00:27:16,110
another very famous library 3.2.1 I've

652
00:27:12,820 --> 00:27:18,399
been traveling around the world

653
00:27:16,110 --> 00:27:20,229
Germany u.s. lots of different

654
00:27:18,400 --> 00:27:23,050
organizations that I've worked with to

655
00:27:20,230 --> 00:27:25,330
actually identify vulnerabilities this

656
00:27:23,050 --> 00:27:26,889
library is in every single organization

657
00:27:25,330 --> 00:27:30,070
that I've ever worked with that did

658
00:27:26,890 --> 00:27:32,170
anything with Java it's very popular

659
00:27:30,070 --> 00:27:36,100
library it's quite a base unit in Java

660
00:27:32,170 --> 00:27:40,120
and it's ten years old this particular

661
00:27:36,100 --> 00:27:42,159
version what we find is that people are

662
00:27:40,120 --> 00:27:44,770
still using it because I don't know it's

663
00:27:42,160 --> 00:27:48,269
vulnerable the exploit was actually

664
00:27:44,770 --> 00:27:51,789
found was found in 2015

665
00:27:48,269 --> 00:27:54,760
so for seven years people were using

666
00:27:51,789 --> 00:27:56,049
that library perfectly fine no issues

667
00:27:54,760 --> 00:27:59,950
they never had any vulnerabilities

668
00:27:56,049 --> 00:28:02,710
discovered and then suddenly in 2015 we

669
00:27:59,950 --> 00:28:04,240
find that it's vulnerable and a lot of

670
00:28:02,710 --> 00:28:07,059
organizations actually are using this

671
00:28:04,240 --> 00:28:08,559
filter this day in 2018 and actually

672
00:28:07,059 --> 00:28:12,070
don't know they're using that version

673
00:28:08,559 --> 00:28:15,639
that's vulnerable to attack again a

674
00:28:12,070 --> 00:28:19,809
severity 9 CBE but again what we say is

675
00:28:15,640 --> 00:28:22,419
well this version here 3.2.2 is fixed

676
00:28:19,809 --> 00:28:29,049
and you can easily replace that library

677
00:28:22,419 --> 00:28:30,700
and you're done so a little bit

678
00:28:29,049 --> 00:28:33,340
technical I know this is a developers

679
00:28:30,700 --> 00:28:35,019
view of the world not all of us here are

680
00:28:33,340 --> 00:28:37,178
developers some of us are security

681
00:28:35,019 --> 00:28:38,470
people and we don't go into the IDE we

682
00:28:37,179 --> 00:28:40,360
just look at a report of the whole

683
00:28:38,470 --> 00:28:42,850
organization the whole Bank whole

684
00:28:40,360 --> 00:28:46,719
insurance company and that's what this

685
00:28:42,850 --> 00:28:48,250
view is here this is listing all of the

686
00:28:46,720 --> 00:28:50,350
applications that we have that we've

687
00:28:48,250 --> 00:28:52,539
scanned in our organization with a

688
00:28:50,350 --> 00:28:58,090
listing of all the most recent exploits

689
00:28:52,539 --> 00:28:59,769
that have been found in it we actually

690
00:28:58,090 --> 00:29:01,389
have a composition report here we show

691
00:28:59,769 --> 00:29:04,389
you how many components are actually

692
00:29:01,389 --> 00:29:05,889
open source this is the Bill of

693
00:29:04,389 --> 00:29:07,360
Materials we show you everything that's

694
00:29:05,889 --> 00:29:10,570
in the project and whether they're

695
00:29:07,360 --> 00:29:12,070
vulnerable to attack and then we have

696
00:29:10,570 --> 00:29:15,580
this special tab here of all the

697
00:29:12,070 --> 00:29:16,750
security issues and one of the things

698
00:29:15,580 --> 00:29:21,908
that you might notice there is we have

699
00:29:16,750 --> 00:29:25,990
some sea bees but we also have some

700
00:29:21,909 --> 00:29:29,080
Sunnah type codes those Serna type codes

701
00:29:25,990 --> 00:29:31,059
are for vulnerabilities that we found so

702
00:29:29,080 --> 00:29:31,750
sometimes developers don't raise sea

703
00:29:31,059 --> 00:29:33,850
bees

704
00:29:31,750 --> 00:29:35,799
what they might do is someone will tell

705
00:29:33,850 --> 00:29:37,629
them it's a vulnerability they'll go and

706
00:29:35,799 --> 00:29:40,059
fix it and then they'll just check it

707
00:29:37,630 --> 00:29:42,580
back into github and move on and they'll

708
00:29:40,059 --> 00:29:44,889
never raise the CVE and interestingly

709
00:29:42,580 --> 00:29:46,750
enough this happens all the time in

710
00:29:44,889 --> 00:29:49,059
JavaScript so if you're doing anything

711
00:29:46,750 --> 00:29:51,519
in NPM the vast majority of issue that

712
00:29:49,059 --> 00:29:54,190
NPM do not have a public CVE attached to

713
00:29:51,519 --> 00:29:56,230
them so if you're only relying on CBE

714
00:29:54,190 --> 00:29:58,240
data you're actually missing the vast

715
00:29:56,230 --> 00:30:00,549
majority of issues in javascript to this

716
00:29:58,240 --> 00:30:02,620
day so what we've done that's on the

717
00:30:00,549 --> 00:30:05,290
type of actually built and ingestion

718
00:30:02,620 --> 00:30:06,939
that in ingests all of the Kitab events

719
00:30:05,290 --> 00:30:08,889
every day there's 500 thousand plus

720
00:30:06,940 --> 00:30:10,960
events where people are checking code

721
00:30:08,890 --> 00:30:12,700
into github we look at all of those and

722
00:30:10,960 --> 00:30:16,390
any of those that are security related

723
00:30:12,700 --> 00:30:18,360
go to a curation team we have 65 full

724
00:30:16,390 --> 00:30:21,400
time data researchers that look at those

725
00:30:18,360 --> 00:30:23,409
approximately 700 events a day and if

726
00:30:21,400 --> 00:30:25,630
any of those are security related that

727
00:30:23,410 --> 00:30:27,610
will actually raise a Serna type code

728
00:30:25,630 --> 00:30:29,350
against them I'll give you I'll give you

729
00:30:27,610 --> 00:30:30,790
a demonstration of that this is actually

730
00:30:29,350 --> 00:30:35,740
a JavaScript library I'm going to show

731
00:30:30,790 --> 00:30:39,659
you now it's a framework how can copy

732
00:30:35,740 --> 00:30:41,920
json' of our customers are using that

733
00:30:39,660 --> 00:30:44,340
there's a library in here

734
00:30:41,920 --> 00:30:48,190
this is JavaScript that I'm showing you

735
00:30:44,340 --> 00:30:52,510
called growl RAL is a popular JavaScript

736
00:30:48,190 --> 00:30:54,070
library when I go and have a look at the

737
00:30:52,510 --> 00:30:57,610
vulnerability and had the signer type

738
00:30:54,070 --> 00:30:59,610
code against it and we show the your

739
00:30:57,610 --> 00:31:01,870
team all the data we've found our

740
00:30:59,610 --> 00:31:04,300
explanation from our researchers a

741
00:31:01,870 --> 00:31:07,120
recommendation or remediation for the

742
00:31:04,300 --> 00:31:08,649
programmers on how to fix this and then

743
00:31:07,120 --> 00:31:11,199
down the bottom here what I want to show

744
00:31:08,650 --> 00:31:14,620
you now is the Advisory these are the

745
00:31:11,200 --> 00:31:18,480
notes from the project team here's the

746
00:31:14,620 --> 00:31:22,989
github what's happened here

747
00:31:18,480 --> 00:31:25,090
unsafe use of X X ok I don't actually

748
00:31:22,990 --> 00:31:27,160
even know what that is I don't read up

749
00:31:25,090 --> 00:31:29,199
on it but that team accepted that that

750
00:31:27,160 --> 00:31:32,440
was a problem in their project it said

751
00:31:29,200 --> 00:31:35,080
yep problem we've got a JIRA ticket I've

752
00:31:32,440 --> 00:31:40,630
fixed it I do a commit back into github

753
00:31:35,080 --> 00:31:42,010
and I move on the issue is known it's

754
00:31:40,630 --> 00:31:45,760
public there it is on the internet

755
00:31:42,010 --> 00:31:48,850
there's no CBE so if you're only relying

756
00:31:45,760 --> 00:31:51,730
on CBE data you're missing the bulk of

757
00:31:48,850 --> 00:31:53,290
the data issues in JavaScript that's why

758
00:31:51,730 --> 00:31:54,730
you need a tool to automate this is

759
00:31:53,290 --> 00:31:58,139
actually ingesting other data from

760
00:31:54,730 --> 00:31:58,140
github to track it

761
00:32:00,320 --> 00:32:04,290
that interesting is that has anyone come

762
00:32:03,000 --> 00:32:06,680
across this is anyone aware of this

763
00:32:04,290 --> 00:32:10,850
problem we'd get up and and JavaScript

764
00:32:06,680 --> 00:32:14,370
we're using javascript here is anyone

765
00:32:10,850 --> 00:32:17,399
cool so in the old days people did raise

766
00:32:14,370 --> 00:32:19,800
issues and see bees but no longer is

767
00:32:17,400 --> 00:32:21,810
that done in JavaScript and so what we

768
00:32:19,800 --> 00:32:24,120
did it's an o-type as we realize that so

769
00:32:21,810 --> 00:32:27,050
we started ingesting all this data from

770
00:32:24,120 --> 00:32:27,050
the JavaScript world

771
00:32:42,370 --> 00:32:45,889
this is an interesting quote this is

772
00:32:44,330 --> 00:32:49,639
from a book called the paintings project

773
00:32:45,890 --> 00:32:51,260
has anyone read that book cookbook I

774
00:32:49,640 --> 00:32:53,090
recommend it to you it's actually a sort

775
00:32:51,260 --> 00:32:56,140
of a fictionalized story about a company

776
00:32:53,090 --> 00:32:59,480
moving to a dev set-offs universe

777
00:32:56,140 --> 00:33:01,100
written by Jane Kim he's actually pretty

778
00:32:59,480 --> 00:33:04,880
pretty well respected guy in this place

779
00:33:01,100 --> 00:33:06,830
and he said never pass a defect

780
00:33:04,880 --> 00:33:09,950
downstream so what are you talking about

781
00:33:06,830 --> 00:33:13,070
there I'm a developer by background and

782
00:33:09,950 --> 00:33:15,350
when I first used to do programming we'd

783
00:33:13,070 --> 00:33:17,090
write our code and then testing was sent

784
00:33:15,350 --> 00:33:19,580
to a testing team and we were no longer

785
00:33:17,090 --> 00:33:21,830
responsible for the QA or the quality of

786
00:33:19,580 --> 00:33:23,990
that component or that library or

787
00:33:21,830 --> 00:33:25,428
project and that would send back all

788
00:33:23,990 --> 00:33:27,980
these bugs and then we would fight with

789
00:33:25,429 --> 00:33:29,059
them and then we would fix it and it

790
00:33:27,980 --> 00:33:30,980
would go again and there'd be this

791
00:33:29,059 --> 00:33:34,940
constant loop and it's very inefficient

792
00:33:30,980 --> 00:33:36,669
and then when we finished that we passed

793
00:33:34,940 --> 00:33:39,350
the testing we would send it to the

794
00:33:36,669 --> 00:33:40,580
security team and they'd do a security

795
00:33:39,350 --> 00:33:43,010
assessment and that fund all the

796
00:33:40,580 --> 00:33:45,649
security issues send it back to us we

797
00:33:43,010 --> 00:33:49,580
would rewrite it retest it and go again

798
00:33:45,649 --> 00:33:51,830
a year I was an insurance company doing

799
00:33:49,580 --> 00:33:54,379
this and took us a year to 18 months per

800
00:33:51,830 --> 00:33:56,779
release because it was just so

801
00:33:54,380 --> 00:33:58,520
inefficient we're just wasting cycles

802
00:33:56,779 --> 00:34:01,700
writing software that was buggy and

803
00:33:58,520 --> 00:34:03,200
laden with security issues but we sort

804
00:34:01,700 --> 00:34:06,799
of didn't care for somebody else's

805
00:34:03,200 --> 00:34:08,929
problem so what devstack ops was about I

806
00:34:06,799 --> 00:34:12,800
took about changing culture and changing

807
00:34:08,929 --> 00:34:14,389
the way we do things teams that used to

808
00:34:12,800 --> 00:34:17,330
be responsible only for coding and our

809
00:34:14,389 --> 00:34:18,830
responsible for coding and testing Tim's

810
00:34:17,330 --> 00:34:20,199
at responsible for coding and testing it

811
00:34:18,830 --> 00:34:22,489
also now responsible for security

812
00:34:20,199 --> 00:34:25,339
devstack off and also for the deployment

813
00:34:22,489 --> 00:34:27,979
you you write it you deploy it and you

814
00:34:25,339 --> 00:34:30,049
test it for security issues so you as a

815
00:34:27,980 --> 00:34:31,699
programmer are now going to be remained

816
00:34:30,050 --> 00:34:34,280
responsible for your security issues

817
00:34:31,699 --> 00:34:36,368
along with your quality issues so

818
00:34:34,280 --> 00:34:39,320
security becomes a testing phase and

819
00:34:36,369 --> 00:34:41,389
this book sort of dramatizes that it's a

820
00:34:39,320 --> 00:34:43,099
really big culture change and the reason

821
00:34:41,389 --> 00:34:45,349
why this was done was because Toyota did

822
00:34:43,099 --> 00:34:47,929
this many years ago they said that you

823
00:34:45,349 --> 00:34:51,320
cannot inject quality into a car at the

824
00:34:47,929 --> 00:34:53,668
inspection phase it's too late give the

825
00:34:51,320 --> 00:34:55,530
developer or the Builder of the car the

826
00:34:53,668 --> 00:34:59,520
check for quality issues and fix them on

827
00:34:55,530 --> 00:35:01,890
the spot and in the car business I talk

828
00:34:59,520 --> 00:35:03,420
about pulling the and on cord the end on

829
00:35:01,890 --> 00:35:05,400
cord is this cause that you can pull

830
00:35:03,420 --> 00:35:08,130
when you're making your car that stops

831
00:35:05,400 --> 00:35:10,799
the production line and what that

832
00:35:08,130 --> 00:35:12,390
putting of the cord is about is I've got

833
00:35:10,799 --> 00:35:15,780
a quality problem that it can't solve

834
00:35:12,390 --> 00:35:17,250
myself what it really means is bringing

835
00:35:15,780 --> 00:35:19,530
in a team leader bringing someone more

836
00:35:17,250 --> 00:35:21,990
experience to help me to actually help

837
00:35:19,530 --> 00:35:24,089
me to fix this quality problem similarly

838
00:35:21,990 --> 00:35:25,470
in the software business we want the

839
00:35:24,089 --> 00:35:27,690
developers to be able to bring in a lead

840
00:35:25,470 --> 00:35:29,910
developer to show me how to fix this

841
00:35:27,690 --> 00:35:32,030
problem this is one of the culture

842
00:35:29,910 --> 00:35:34,859
changes it's quite difficult to make and

843
00:35:32,030 --> 00:35:37,140
one of the banks are working in Sydney

844
00:35:34,859 --> 00:35:40,109
they actually said that what we said was

845
00:35:37,140 --> 00:35:42,118
to make high quality bit up whenever a

846
00:35:40,109 --> 00:35:44,490
programmer commits something into our

847
00:35:42,119 --> 00:35:46,440
repository he's actually declaring this

848
00:35:44,490 --> 00:35:48,390
is fit for production that's what that

849
00:35:46,440 --> 00:35:50,760
statement means we're empowering you to

850
00:35:48,390 --> 00:35:53,839
release this to production that's the

851
00:35:50,760 --> 00:35:56,339
culture change traditional software

852
00:35:53,839 --> 00:35:58,170
manufacturing inside of banks was the

853
00:35:56,339 --> 00:35:59,690
developer out the software and then

854
00:35:58,170 --> 00:36:02,040
somebody else tested it for quality

855
00:35:59,690 --> 00:36:03,510
somebody else approved their release

856
00:36:02,040 --> 00:36:05,819
and that person it could be three levels

857
00:36:03,510 --> 00:36:07,770
above me in the organization have no

858
00:36:05,819 --> 00:36:10,619
idea what I've done but it's his job to

859
00:36:07,770 --> 00:36:13,290
approver release quality was really bad

860
00:36:10,619 --> 00:36:14,220
releases were very slow now that we give

861
00:36:13,290 --> 00:36:16,500
the developer there were

862
00:36:14,220 --> 00:36:19,189
responsibilities for the quality quality

863
00:36:16,500 --> 00:36:22,190
goes up for they own the quality and the

864
00:36:19,190 --> 00:36:22,190
security

865
00:36:23,060 --> 00:36:30,240
so I'll show you how we do that in our

866
00:36:27,420 --> 00:36:33,060
tool what we can do is we can actually

867
00:36:30,240 --> 00:36:35,729
automate the process of you bringing in

868
00:36:33,060 --> 00:36:37,470
components into your organization even

869
00:36:35,730 --> 00:36:42,870
blocking them from being brought into

870
00:36:37,470 --> 00:36:44,209
the repository in the first place what

871
00:36:42,870 --> 00:36:47,569
I'll do it I'll show you how we do that

872
00:36:44,210 --> 00:36:50,970
going to do a Jenkins here this is a

873
00:36:47,570 --> 00:36:52,520
popular tool for building software what

874
00:36:50,970 --> 00:36:56,569
I'm going to do is I'm actually going to

875
00:36:52,520 --> 00:36:56,570
block a component coming in

876
00:37:05,370 --> 00:37:12,549
we're gonna simulate a program up

877
00:37:07,710 --> 00:37:14,980
bringing the library and this library is

878
00:37:12,550 --> 00:37:18,640
going to make our software environment

879
00:37:14,980 --> 00:37:23,890
worse if he brings it in so I'm gonna

880
00:37:18,640 --> 00:37:25,960
add a policy that says no no longer can

881
00:37:23,890 --> 00:37:30,430
I bring in bad libraries and have nine

882
00:37:25,960 --> 00:37:37,390
security problems I'm going to check for

883
00:37:30,430 --> 00:37:39,100
a vulnerability yeah what's the

884
00:37:37,390 --> 00:37:44,319
different ways of checking for software

885
00:37:39,100 --> 00:37:46,930
quality as we bring in libraries what

886
00:37:44,320 --> 00:37:48,250
I've said here as I said no software

887
00:37:46,930 --> 00:37:50,680
vulnerabilities greater than or equal to

888
00:37:48,250 --> 00:37:54,030
seven I'm going to block it at the proxy

889
00:37:50,680 --> 00:37:54,029
lock it at the firewall

890
00:37:55,740 --> 00:38:01,200
great so let's just recap I've got a

891
00:37:58,980 --> 00:38:03,540
policy here isn't that policy engine

892
00:38:01,200 --> 00:38:06,509
that we run this is our bank we said

893
00:38:03,540 --> 00:38:08,550
okay from now on no more bad libraries

894
00:38:06,510 --> 00:38:12,720
now let's simulate someone trying to

895
00:38:08,550 --> 00:38:18,030
download one into our business we've dug

896
00:38:12,720 --> 00:38:18,839
that so that takes a couple of seconds

897
00:38:18,030 --> 00:38:20,359
what I'm actually doing is I'm

898
00:38:18,839 --> 00:38:23,310
downloading some software from github

899
00:38:20,359 --> 00:38:25,190
this actually got a vulnerable component

900
00:38:23,310 --> 00:38:31,799
in it but the firewall that we have

901
00:38:25,190 --> 00:38:34,130
blocked it great it's been failed so

902
00:38:31,800 --> 00:38:34,130
look at that

903
00:38:35,020 --> 00:38:39,259
there's an icon there that tells you

904
00:38:38,120 --> 00:38:40,790
with a little circle and the cross

905
00:38:39,260 --> 00:38:44,330
through it that's been quarantined

906
00:38:40,790 --> 00:38:49,900
that's been blocked oh why can't I

907
00:38:44,330 --> 00:38:51,980
download that library okay it's actually

908
00:38:49,900 --> 00:38:56,840
Cohen's collections this is the

909
00:38:51,980 --> 00:38:59,450
quarantine icon when I click on that I

910
00:38:56,840 --> 00:39:02,450
can see my policy he's been breached

911
00:38:59,450 --> 00:39:04,790
greater than or equal to 7 okay what is

912
00:39:02,450 --> 00:39:07,310
that oh okay there's actually a level 9

913
00:39:04,790 --> 00:39:10,130
CVE has been registered against that

914
00:39:07,310 --> 00:39:13,130
component so just to recap what we're

915
00:39:10,130 --> 00:39:15,170
saying here is developer is building a

916
00:39:13,130 --> 00:39:17,780
car and he goes to get a bit for his

917
00:39:15,170 --> 00:39:19,760
power but it's actually a bad bit we

918
00:39:17,780 --> 00:39:21,890
don't want that bit in our car so we

919
00:39:19,760 --> 00:39:23,390
stop that and this is the same thing

920
00:39:21,890 --> 00:39:24,859
with software when you write software

921
00:39:23,390 --> 00:39:27,200
you actually assemble software from

922
00:39:24,860 --> 00:39:28,610
components but we don't want the

923
00:39:27,200 --> 00:39:31,160
programmers building it with bad

924
00:39:28,610 --> 00:39:32,930
components known bad components we block

925
00:39:31,160 --> 00:39:37,759
it at the file or we block it before it

926
00:39:32,930 --> 00:39:40,430
actually comes in what we say is this

927
00:39:37,760 --> 00:39:43,250
version here has been blocked known to

928
00:39:40,430 --> 00:39:44,540
be vulnerable use a better version so

929
00:39:43,250 --> 00:39:46,550
you look at that conversation with the

930
00:39:44,540 --> 00:39:49,220
developer to go back and tell him in

931
00:39:46,550 --> 00:39:50,860
future use a better version of the

932
00:39:49,220 --> 00:39:55,000
library don't use the vulnerable version

933
00:39:50,860 --> 00:39:55,000
and that's what we call the firewall

934
00:39:56,099 --> 00:40:01,599
all right so I'm mindful of time I'm

935
00:39:58,390 --> 00:40:04,450
near the end of our slot any and is this

936
00:40:01,599 --> 00:40:09,609
interesting for anybody cool any

937
00:40:04,450 --> 00:40:15,549
questions just get away from the

938
00:40:09,609 --> 00:40:24,790
microphone just wait for the microphone

939
00:40:15,550 --> 00:40:26,950
sorry I see you automating blocking the

940
00:40:24,790 --> 00:40:29,950
bad version can you not automate

941
00:40:26,950 --> 00:40:31,930
downloading the good version yes you can

942
00:40:29,950 --> 00:40:34,089
do that so you can actually tell it to

943
00:40:31,930 --> 00:40:36,069
actually download the good version the

944
00:40:34,090 --> 00:40:39,970
different ways of doing that one of the

945
00:40:36,070 --> 00:40:41,710
things we show you here if you notice

946
00:40:39,970 --> 00:40:46,779
the color how it goes from green to blue

947
00:40:41,710 --> 00:40:51,099
in the top that green color is actually

948
00:40:46,780 --> 00:40:53,380
killing the developer it's actually the

949
00:40:51,099 --> 00:40:55,750
same release the same major release that

950
00:40:53,380 --> 00:40:57,520
you're using the green the blue one is

951
00:40:55,750 --> 00:40:59,650
actually a different version so it's not

952
00:40:57,520 --> 00:41:02,080
that fully compatible so this is

953
00:40:59,650 --> 00:41:03,940
actually telling the developer that the

954
00:41:02,080 --> 00:41:05,950
green one is a non-breaking change to

955
00:41:03,940 --> 00:41:08,170
your software the blue one is a breaking

956
00:41:05,950 --> 00:41:09,368
change and you can then I use that as a

957
00:41:08,170 --> 00:41:10,960
way of actually bringing the right

958
00:41:09,369 --> 00:41:12,730
version of the library for the

959
00:41:10,960 --> 00:41:15,070
repository I think this can be done

960
00:41:12,730 --> 00:41:17,170
through an interactive process what I am

961
00:41:15,070 --> 00:41:20,380
saying is scan the entire repository to

962
00:41:17,170 --> 00:41:23,290
what I have today and from time to time

963
00:41:20,380 --> 00:41:26,200
you may find new one their abilities and

964
00:41:23,290 --> 00:41:28,300
my existing repository so scan my

965
00:41:26,200 --> 00:41:31,598
existing repository if I find anything

966
00:41:28,300 --> 00:41:36,190
vulnerable replace it with the next best

967
00:41:31,599 --> 00:41:38,410
version okay so I can rebuild my objects

968
00:41:36,190 --> 00:41:39,910
yes so the question is we scan the

969
00:41:38,410 --> 00:41:41,680
repository and we find that it's

970
00:41:39,910 --> 00:41:42,940
vulnerable let's rebuild it with the

971
00:41:41,680 --> 00:41:46,899
next best version that's not vulnerable

972
00:41:42,940 --> 00:41:48,310
automatically the answer is you can't

973
00:41:46,900 --> 00:41:50,290
actually script that if you want but

974
00:41:48,310 --> 00:41:52,210
traditionally a lot of organizations

975
00:41:50,290 --> 00:41:53,710
don't do that because we actually want

976
00:41:52,210 --> 00:41:56,349
the developer to be aware of it and

977
00:41:53,710 --> 00:41:58,780
actually remediate it because you could

978
00:41:56,349 --> 00:42:00,339
potentially introduce a problem that

979
00:41:58,780 --> 00:42:02,230
you're not aware of some quality problem

980
00:42:00,339 --> 00:42:04,450
so what we're saying is the developer

981
00:42:02,230 --> 00:42:05,859
can script that and he can do that but

982
00:42:04,450 --> 00:42:07,720
you want them to go through the process

983
00:42:05,859 --> 00:42:09,430
of actually being made aware of it

984
00:42:07,720 --> 00:42:12,098
and then changing and actually being in

985
00:42:09,430 --> 00:42:14,348
control of that change and fixing it you

986
00:42:12,099 --> 00:42:16,000
don't just want to automatically ingest

987
00:42:14,349 --> 00:42:19,270
that from some other person and change

988
00:42:16,000 --> 00:42:21,849
people's projects on them you can do it

989
00:42:19,270 --> 00:42:23,650
and I know people that have scripted it

990
00:42:21,849 --> 00:42:25,450
but traditionally we want to develop to

991
00:42:23,650 --> 00:42:27,940
own the problem and be made aware of it

992
00:42:25,450 --> 00:42:30,430
because you want them to do some some

993
00:42:27,940 --> 00:42:31,840
unit tests around that change so if they

994
00:42:30,430 --> 00:42:33,910
do change the library you want them to

995
00:42:31,840 --> 00:42:35,800
actually write a unit test that confirms

996
00:42:33,910 --> 00:42:37,810
that that change is actually worked and

997
00:42:35,800 --> 00:42:41,160
hasn't broken the system so that's

998
00:42:37,810 --> 00:42:45,810
that's usually the most common approach

999
00:42:41,160 --> 00:42:45,810
so any other questions

1000
00:42:57,740 --> 00:43:01,859
that's what they confirm you've said

1001
00:42:59,940 --> 00:43:03,630
that the Equifax breach was preventable

1002
00:43:01,860 --> 00:43:05,460
and it was based on a struts

1003
00:43:03,630 --> 00:43:07,470
vulnerability is what is that correct is

1004
00:43:05,460 --> 00:43:09,930
that what was the vulnerability that

1005
00:43:07,470 --> 00:43:11,669
actually caused that

1006
00:43:09,930 --> 00:43:14,100
okay so struck the question is the

1007
00:43:11,670 --> 00:43:18,050
struts the Equifax brief is based on the

1008
00:43:14,100 --> 00:43:21,569
strata to vulnerability so so yes it was

1009
00:43:18,050 --> 00:43:25,530
the way we know that is because Equifax

1010
00:43:21,570 --> 00:43:28,020
told us that and it was confirmed by

1011
00:43:25,530 --> 00:43:30,180
other researchers and we know that

1012
00:43:28,020 --> 00:43:33,480
Equifax uses struts like I demonstrated

1013
00:43:30,180 --> 00:43:36,210
that with my Google attack and Equifax

1014
00:43:33,480 --> 00:43:40,040
actually had just a quick look I've got

1015
00:43:36,210 --> 00:43:40,040
some references for that to confirm it

1016
00:43:43,760 --> 00:43:53,360
I'm happy to to share this where are we

1017
00:43:49,160 --> 00:43:53,359
so this is the CVE here

1018
00:43:56,089 --> 00:44:06,199
and you can actually read up on it and

1019
00:44:00,949 --> 00:44:13,170
the exploit was let's just look at

1020
00:44:06,199 --> 00:44:15,420
Equifax yeah so the number of articles

1021
00:44:13,170 --> 00:44:17,279
here at the time a profession actually

1022
00:44:15,420 --> 00:44:18,809
wrote a document in their crisis

1023
00:44:17,279 --> 00:44:21,839
management to actually explain how it

1024
00:44:18,809 --> 00:44:24,599
occurred actually raised a good point a

1025
00:44:21,839 --> 00:44:26,249
lot of organizations in our attack don't

1026
00:44:24,599 --> 00:44:28,199
always tell you how it was done

1027
00:44:26,249 --> 00:44:30,538
so they she's got a list here of the

1028
00:44:28,199 --> 00:44:33,329
companies that were attacked recently

1029
00:44:30,539 --> 00:44:36,359
using open source libraries so Panama

1030
00:44:33,329 --> 00:44:39,479
papers I mentioned that Equifax another

1031
00:44:36,359 --> 00:44:41,999
one heartbleed was another one open SSL

1032
00:44:39,479 --> 00:44:43,618
library Canada Revenue Agency what's the

1033
00:44:41,999 --> 00:44:47,189
organization is talk about it

1034
00:44:43,619 --> 00:44:49,079
where is them someone like shell shock

1035
00:44:47,189 --> 00:44:51,118
for example a lot of organizations

1036
00:44:49,079 --> 00:44:52,439
explain how they're attacked the reason

1037
00:44:51,119 --> 00:44:54,779
being is they are still vulnerable it's

1038
00:44:52,439 --> 00:44:56,578
quite hard for them to patch but we have

1039
00:44:54,779 --> 00:44:59,569
pretty good evidence that Equifax was a

1040
00:44:56,579 --> 00:44:59,569
stretch runner ability

1041
00:45:03,980 --> 00:45:13,580
any other questions okay thank you okay

1042
00:45:14,210 --> 00:45:22,400
thanks cam so break for lunch

