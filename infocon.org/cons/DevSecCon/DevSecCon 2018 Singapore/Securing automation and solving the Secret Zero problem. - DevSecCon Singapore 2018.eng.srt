1
00:00:02,179 --> 00:00:08,429
so check mic check

2
00:00:05,609 --> 00:00:10,500
okay so hear me okay maybe a little

3
00:00:08,429 --> 00:00:13,259
louder we're good

4
00:00:10,500 --> 00:00:16,289
mic check okay so reasons to pay

5
00:00:13,259 --> 00:00:18,119
attention one is I'm a little delirious

6
00:00:16,289 --> 00:00:19,320
from lack of good sleep for the last

7
00:00:18,119 --> 00:00:21,630
couple of nights I don't know how many

8
00:00:19,320 --> 00:00:24,269
other people are severely displaced from

9
00:00:21,630 --> 00:00:25,919
their home timezone but I may make bad

10
00:00:24,269 --> 00:00:27,240
decisions so that that should make this

11
00:00:25,920 --> 00:00:30,599
entertaining

12
00:00:27,240 --> 00:00:33,480
another thing is I've got two live demos

13
00:00:30,599 --> 00:00:35,399
that I haven't gonna attempt and the

14
00:00:33,480 --> 00:00:37,290
last couple of times I tried them they

15
00:00:35,399 --> 00:00:38,550
didn't work so that should make it

16
00:00:37,290 --> 00:00:39,750
entertaining too because that's always

17
00:00:38,550 --> 00:00:42,239
it's like going to the racetrack you

18
00:00:39,750 --> 00:00:46,469
might see a crash so so we'll try and

19
00:00:42,239 --> 00:00:48,300
keep this interactive here's my bad my

20
00:00:46,469 --> 00:00:51,110
bad jet lag joke what's the definition

21
00:00:48,300 --> 00:00:51,110
of jet lag

22
00:00:52,120 --> 00:00:58,660
I'm sorry what were we talking about

23
00:00:55,590 --> 00:01:00,540
thanks thanks for laughing for that so

24
00:00:58,660 --> 00:01:02,828
my name is Jodi I work for cyber-ark

25
00:01:00,540 --> 00:01:04,929
cyber arks and almost 20 year old

26
00:01:02,829 --> 00:01:07,330
company focused on privileged access

27
00:01:04,930 --> 00:01:09,130
management that is people with root

28
00:01:07,330 --> 00:01:12,158
passwords the things with root passwords

29
00:01:09,130 --> 00:01:14,289
now and so traditionally that was people

30
00:01:12,159 --> 00:01:16,810
but more and more it's processes it's

31
00:01:14,290 --> 00:01:18,850
tools and so the gist of this

32
00:01:16,810 --> 00:01:20,680
presentation is how do we secure that

33
00:01:18,850 --> 00:01:23,020
automation how do we handle these

34
00:01:20,680 --> 00:01:24,820
privileged actors and then there's

35
00:01:23,020 --> 00:01:27,250
something called the secret zero problem

36
00:01:24,820 --> 00:01:29,678
it goes by other names auto-enrolment

37
00:01:27,250 --> 00:01:31,240
but how do you bootstrap identity so

38
00:01:29,679 --> 00:01:33,850
that you can authenticate authorize and

39
00:01:31,240 --> 00:01:35,440
audit these things that are doing doing

40
00:01:33,850 --> 00:01:37,419
work but to just kind of do a history

41
00:01:35,440 --> 00:01:38,770
lesson and I'm noticing some themes here

42
00:01:37,420 --> 00:01:40,179
so I won't dwell on some of the slides

43
00:01:38,770 --> 00:01:41,259
that I've seen you know the topics kind

44
00:01:40,179 --> 00:01:43,840
of covered because I think you know

45
00:01:41,259 --> 00:01:44,950
we're seeing a lot of consistency which

46
00:01:43,840 --> 00:01:45,819
is good at you know everybody's on

47
00:01:44,950 --> 00:01:49,240
message even though we're not

48
00:01:45,819 --> 00:01:52,060
collaborating around this but eight

49
00:01:49,240 --> 00:01:54,520
years ago when DevOps was a new thing I

50
00:01:52,060 --> 00:01:56,140
used to use the graphic on the left to

51
00:01:54,520 --> 00:01:57,700
try and explain what it was to people

52
00:01:56,140 --> 00:02:02,080
and just say you know really it's about

53
00:01:57,700 --> 00:02:04,569
change at speed and in development it

54
00:02:02,080 --> 00:02:05,800
had developed ways to introduce change

55
00:02:04,569 --> 00:02:07,179
using outs of development and things

56
00:02:05,800 --> 00:02:09,160
like that so they used to be the

57
00:02:07,179 --> 00:02:10,929
constraint that constraint then moved to

58
00:02:09,160 --> 00:02:12,370
operations operations wasn't ready and

59
00:02:10,929 --> 00:02:15,010
had s LA's they had to meet had really

60
00:02:12,370 --> 00:02:17,800
good reasons for saying hey whoa slow

61
00:02:15,010 --> 00:02:19,420
down and DevOps you know there was a

62
00:02:17,800 --> 00:02:21,400
wall of confusion between dev and ops

63
00:02:19,420 --> 00:02:23,679
but it was fast forward about eight

64
00:02:21,400 --> 00:02:27,010
years and and it's not you know we can't

65
00:02:23,680 --> 00:02:28,989
we can't call victory yet but techniques

66
00:02:27,010 --> 00:02:30,730
have been developed to do change at

67
00:02:28,989 --> 00:02:32,739
scale and speed dev and ops have gotten

68
00:02:30,730 --> 00:02:34,510
together and done things like blue green

69
00:02:32,739 --> 00:02:36,310
deployments dart deployments feature

70
00:02:34,510 --> 00:02:37,720
switches and just a lot of new

71
00:02:36,310 --> 00:02:39,940
techniques have been developed to

72
00:02:37,720 --> 00:02:41,830
introduce change at scale and speed and

73
00:02:39,940 --> 00:02:43,720
now we have the situation that you see

74
00:02:41,830 --> 00:02:45,310
over there on the right where there's a

75
00:02:43,720 --> 00:02:46,840
new constraint and that is how do we do

76
00:02:45,310 --> 00:02:48,080
it securely how do we do that in such a

77
00:02:46,840 --> 00:02:49,790
way that it

78
00:02:48,080 --> 00:02:51,920
be authenticated authorizing the audited

79
00:02:49,790 --> 00:02:55,549
and this you know this is why we have

80
00:02:51,920 --> 00:02:57,230
this conference right so everybody who's

81
00:02:55,550 --> 00:02:58,850
probably read the Phoenix project or the

82
00:02:57,230 --> 00:03:00,950
goal and probably knows something about

83
00:02:58,850 --> 00:03:02,780
the Theory of Constraints and what

84
00:03:00,950 --> 00:03:05,420
happens with constraints is sometimes

85
00:03:02,780 --> 00:03:06,950
you just work around them and so this is

86
00:03:05,420 --> 00:03:08,809
part of the challenge here and I had to

87
00:03:06,950 --> 00:03:12,230
point out and in another presentation

88
00:03:08,810 --> 00:03:13,760
with this this is not a real book though

89
00:03:12,230 --> 00:03:15,679
you can't go by this anywhere this is

90
00:03:13,760 --> 00:03:17,149
this is supposed to be a humorous

91
00:03:15,680 --> 00:03:19,550
attempting and it's documenting you know

92
00:03:17,150 --> 00:03:22,520
kind of a true situation and that is you

93
00:03:19,550 --> 00:03:24,110
know like we had with shadow IT if there

94
00:03:22,520 --> 00:03:26,240
is a constraint the tendency is to try

95
00:03:24,110 --> 00:03:27,950
and work around it and so this is what

96
00:03:26,240 --> 00:03:32,390
we don't want and I appreciate if France

97
00:03:27,950 --> 00:03:33,589
was called to to collaboration because I

98
00:03:32,390 --> 00:03:35,390
think collaboration you know

99
00:03:33,590 --> 00:03:38,060
fundamentally that's what Davin ops was

100
00:03:35,390 --> 00:03:42,470
or DevOps was about and so this is what

101
00:03:38,060 --> 00:03:44,180
we need need to do now because this is a

102
00:03:42,470 --> 00:03:47,480
report from Gartner that I think you can

103
00:03:44,180 --> 00:03:49,280
get on Sunnah types website that and if

104
00:03:47,480 --> 00:03:51,440
Gartner says it it must be true right so

105
00:03:49,280 --> 00:03:54,440
that's why we put Gartner quotes in our

106
00:03:51,440 --> 00:03:56,000
presentations but you know top top you

107
00:03:54,440 --> 00:03:58,850
know complained her top thing to get

108
00:03:56,000 --> 00:04:01,370
right in 2018 is DevOps collaborating

109
00:03:58,850 --> 00:04:03,500
with the security team so collaboration

110
00:04:01,370 --> 00:04:05,500
is number one but it's also number seven

111
00:04:03,500 --> 00:04:07,360
and it's also number eleven

112
00:04:05,500 --> 00:04:09,260
collaborating with a compliance team

113
00:04:07,360 --> 00:04:11,600
collaborating with the audit team so

114
00:04:09,260 --> 00:04:12,768
DevOps has gotten real and it's gotten

115
00:04:11,600 --> 00:04:15,410
mature enough where now they're saying

116
00:04:12,769 --> 00:04:17,030
okay you know great you can do change

117
00:04:15,410 --> 00:04:19,640
it's scaling speed now you need to do it

118
00:04:17,029 --> 00:04:21,469
securely and it's not the applicant just

119
00:04:19,640 --> 00:04:24,289
the applications it's not delivering the

120
00:04:21,470 --> 00:04:26,960
secure applications it's delivering

121
00:04:24,290 --> 00:04:27,890
applications securely and that's what

122
00:04:26,960 --> 00:04:29,750
I'm really talking about here is

123
00:04:27,890 --> 00:04:31,070
securing the pipeline not securing the

124
00:04:29,750 --> 00:04:33,860
contents of the pipeline it's not

125
00:04:31,070 --> 00:04:36,320
application security its DevOps pipeline

126
00:04:33,860 --> 00:04:37,910
security so if you look at the the

127
00:04:36,320 --> 00:04:39,770
personas that are involved here there's

128
00:04:37,910 --> 00:04:42,380
really three major personas there is the

129
00:04:39,770 --> 00:04:45,409
security team which needs controls and

130
00:04:42,380 --> 00:04:47,570
to prove controls are effective and this

131
00:04:45,410 --> 00:04:49,820
that's the basics of compliance is so

132
00:04:47,570 --> 00:04:51,590
it's not enough to have controls if you

133
00:04:49,820 --> 00:04:53,500
can't prove that they're effective do

134
00:04:51,590 --> 00:04:55,060
you really have control so you

135
00:04:53,500 --> 00:04:57,940
can't prove it's like the tree falling

136
00:04:55,060 --> 00:04:59,170
in the forest right the DevOps team you

137
00:04:57,940 --> 00:05:00,880
know they're all good a change of scale

138
00:04:59,170 --> 00:05:03,190
and speed and they're generally on board

139
00:05:00,880 --> 00:05:04,900
with the concepts of security so in our

140
00:05:03,190 --> 00:05:07,300
experience it's not that the DevOps team

141
00:05:04,900 --> 00:05:09,070
is cavalier even though you know that

142
00:05:07,300 --> 00:05:10,870
that book is kind of funny they're not

143
00:05:09,070 --> 00:05:12,490
cavalier about security they just they

144
00:05:10,870 --> 00:05:15,670
have it's just that the security team

145
00:05:12,490 --> 00:05:18,460
hasn't caught up with it the way that

146
00:05:15,670 --> 00:05:19,660
operations wasn't you know ready for the

147
00:05:18,460 --> 00:05:21,909
changes that the dev team was

148
00:05:19,660 --> 00:05:24,070
introducing the security team hasn't

149
00:05:21,910 --> 00:05:25,600
caught up with this new reality and so

150
00:05:24,070 --> 00:05:28,390
you've got this wall of confusion going

151
00:05:25,600 --> 00:05:30,040
on so the third of persona here are the

152
00:05:28,390 --> 00:05:32,140
developers and developers generally

153
00:05:30,040 --> 00:05:33,910
speaking one is little to do with

154
00:05:32,140 --> 00:05:35,650
security as possible and we kind of

155
00:05:33,910 --> 00:05:37,000
don't want to put the onus of security

156
00:05:35,650 --> 00:05:39,429
on them I don't know if anybody was that

157
00:05:37,000 --> 00:05:41,260
AWS re-invent but Verner Vogel's was

158
00:05:39,430 --> 00:05:44,740
saying security is everybody's business

159
00:05:41,260 --> 00:05:46,539
yeah yeah it's important but it's not

160
00:05:44,740 --> 00:05:49,030
really everybody's business and and the

161
00:05:46,540 --> 00:05:50,740
less we the less onus we can put on

162
00:05:49,030 --> 00:05:52,989
developers to be responsible for

163
00:05:50,740 --> 00:05:54,700
security the more compliance will

164
00:05:52,990 --> 00:05:56,500
probably have make the right thing to do

165
00:05:54,700 --> 00:06:01,150
the easy thing to do that's a that's a

166
00:05:56,500 --> 00:06:03,900
thing so there's our personas if we look

167
00:06:01,150 --> 00:06:07,299
at how DevOps has the risk to change

168
00:06:03,900 --> 00:06:09,849
it's by reducing the quanta of change as

169
00:06:07,300 --> 00:06:13,540
the speed has increased the quanta has

170
00:06:09,850 --> 00:06:15,220
has shrunk and so as we've gotten new

171
00:06:13,540 --> 00:06:18,280
technologies first with virtualization

172
00:06:15,220 --> 00:06:20,500
then with containers and now with you

173
00:06:18,280 --> 00:06:23,710
know server lists and micro services

174
00:06:20,500 --> 00:06:25,690
ud risk change because the size of the

175
00:06:23,710 --> 00:06:27,719
change is smaller so and it also enables

176
00:06:25,690 --> 00:06:30,100
other things like parallel development

177
00:06:27,720 --> 00:06:33,400
parallel deployments that enables a lot

178
00:06:30,100 --> 00:06:35,140
of other capabilities but the point is

179
00:06:33,400 --> 00:06:37,750
now we have a lot more things to keep

180
00:06:35,140 --> 00:06:40,630
track of and a lot of these things need

181
00:06:37,750 --> 00:06:42,220
access to databases and services and

182
00:06:40,630 --> 00:06:44,650
other things they need they need access

183
00:06:42,220 --> 00:06:46,419
to the secrets and the credentials in

184
00:06:44,650 --> 00:06:47,830
order to get access to these services so

185
00:06:46,419 --> 00:06:49,070
how do we provision these things how do

186
00:06:47,830 --> 00:06:51,260
we keep track of them there's two

187
00:06:49,070 --> 00:06:53,810
for people to keep up with anymore and

188
00:06:51,260 --> 00:06:56,719
that's why we have so much automation

189
00:06:53,810 --> 00:06:59,090
and we all know DevOps isn't automation

190
00:06:56,720 --> 00:07:02,210
but you can't really do DevOps without

191
00:06:59,090 --> 00:07:03,710
automation right so so now we have these

192
00:07:02,210 --> 00:07:08,299
privileged actors in the network we've

193
00:07:03,710 --> 00:07:10,880
got truly robotic system administrators

194
00:07:08,300 --> 00:07:12,230
that are provisioning servers

195
00:07:10,880 --> 00:07:15,590
configuring servers deploying

196
00:07:12,230 --> 00:07:17,780
applications these are your system

197
00:07:15,590 --> 00:07:19,789
administrators in many ways now and they

198
00:07:17,780 --> 00:07:20,809
need to be we need to keep track of what

199
00:07:19,790 --> 00:07:21,680
they're doing we need to know what

200
00:07:20,810 --> 00:07:23,210
they're doing

201
00:07:21,680 --> 00:07:25,820
we need to authenticate authorizing all

202
00:07:23,210 --> 00:07:27,530
the other activities so so especially

203
00:07:25,820 --> 00:07:29,990
these automation tools that are doing

204
00:07:27,530 --> 00:07:31,669
that but but across the board now

205
00:07:29,990 --> 00:07:33,470
scanning scanning is typically a very

206
00:07:31,670 --> 00:07:35,560
privileged process because it has to

207
00:07:33,470 --> 00:07:38,540
reach in and see what's going on

208
00:07:35,560 --> 00:07:41,120
everywhere in the network and so that

209
00:07:38,540 --> 00:07:42,710
that is a very privileged process so so

210
00:07:41,120 --> 00:07:46,490
this is this is the general problem that

211
00:07:42,710 --> 00:07:49,250
we find today and and to the DevOps

212
00:07:46,490 --> 00:07:51,050
team's credits people generally aren't

213
00:07:49,250 --> 00:07:52,550
embedding secrets in source code anymore

214
00:07:51,050 --> 00:07:54,860
that's kind of the first step you know

215
00:07:52,550 --> 00:07:56,630
the first step is get your secrets out

216
00:07:54,860 --> 00:07:58,100
of source code I'm not gonna ask for a

217
00:07:56,630 --> 00:08:00,170
show of hands but if you have secrets

218
00:07:58,100 --> 00:08:02,420
and source code get them out find a

219
00:08:00,170 --> 00:08:03,650
place to put them because the first you

220
00:08:02,420 --> 00:08:05,240
know many of the breaches that you hear

221
00:08:03,650 --> 00:08:06,890
about today who burn things like that

222
00:08:05,240 --> 00:08:08,450
these secrets were harvested out of

223
00:08:06,890 --> 00:08:10,640
github they were just there for the

224
00:08:08,450 --> 00:08:12,050
taking and so that's that's the first

225
00:08:10,640 --> 00:08:13,849
step get your secrets you know who

226
00:08:12,050 --> 00:08:15,950
you're abetted secret's out if a secret

227
00:08:13,850 --> 00:08:20,270
is embedded in source code it can be

228
00:08:15,950 --> 00:08:22,340
rotated and rotation is the first first

229
00:08:20,270 --> 00:08:24,469
order of Hygiene for for any credential

230
00:08:22,340 --> 00:08:26,599
the sooner you know the more you rotate

231
00:08:24,470 --> 00:08:29,570
the less valuable that credential is

232
00:08:26,600 --> 00:08:30,610
because it's likely to be no good when

233
00:08:29,570 --> 00:08:32,319
somebody goes to use it

234
00:08:30,610 --> 00:08:33,700
so so for a lot of reasons you want to

235
00:08:32,320 --> 00:08:35,800
get secrets out of source code so a lot

236
00:08:33,700 --> 00:08:37,450
of DevOps teams say hey we're using

237
00:08:35,799 --> 00:08:39,159
puppet puppet has you know hire a

238
00:08:37,450 --> 00:08:40,779
database and encrypted um oh we'll put

239
00:08:39,159 --> 00:08:42,370
our secrets there and then there's

240
00:08:40,779 --> 00:08:44,800
another team that's using chef and they

241
00:08:42,370 --> 00:08:46,870
say hey chef has data bags will put our

242
00:08:44,800 --> 00:08:49,089
secrets there and another teams using

243
00:08:46,870 --> 00:08:50,890
ball and another team's using AWS and

244
00:08:49,089 --> 00:08:53,140
another team is using PCF we will put it

245
00:08:50,890 --> 00:08:54,939
in credit hub so you now you've got

246
00:08:53,140 --> 00:08:56,170
secret sprawl this is this you know

247
00:08:54,940 --> 00:08:57,370
you've heard of image sprawl there's

248
00:08:56,170 --> 00:08:59,410
different kinds of sprawl now you have

249
00:08:57,370 --> 00:09:00,640
secret sprawl and you've got these

250
00:08:59,410 --> 00:09:03,069
secrets cashed in all these different

251
00:09:00,640 --> 00:09:05,980
places many of which really aren't

252
00:09:03,070 --> 00:09:07,120
secure so they're they're a place to

253
00:09:05,980 --> 00:09:08,980
store the secrets and you know they're

254
00:09:07,120 --> 00:09:11,560
not a source code anymore but now you've

255
00:09:08,980 --> 00:09:14,500
got this balkanized fractured very

256
00:09:11,560 --> 00:09:17,829
exposed sets of secrets spread across

257
00:09:14,500 --> 00:09:20,980
your your operations so this is what we

258
00:09:17,829 --> 00:09:23,229
call islands of trust the other so again

259
00:09:20,980 --> 00:09:25,000
it's it's better than you know but this

260
00:09:23,230 --> 00:09:26,769
is the next step of maturity okay now

261
00:09:25,000 --> 00:09:28,839
we've got secrets here but now we've got

262
00:09:26,769 --> 00:09:30,850
this this fractured security space we

263
00:09:28,839 --> 00:09:32,380
don't have good consistent practices we

264
00:09:30,850 --> 00:09:34,660
can't really audit these things the

265
00:09:32,380 --> 00:09:36,130
security team is saying what you know

266
00:09:34,660 --> 00:09:37,750
the security is like we got to get these

267
00:09:36,130 --> 00:09:40,510
horses back in the stable help you know

268
00:09:37,750 --> 00:09:42,250
and so a lot of times we come in and we

269
00:09:40,510 --> 00:09:43,660
have meetings with the DevOps teams and

270
00:09:42,250 --> 00:09:45,519
the security teams in the same room and

271
00:09:43,660 --> 00:09:47,949
it's like marriage counseling it's like

272
00:09:45,519 --> 00:09:49,540
most like no see the DevOps team is

273
00:09:47,949 --> 00:09:52,000
adding value to the business and

274
00:09:49,540 --> 00:09:53,800
insecurity so you don't DevOps you know

275
00:09:52,000 --> 00:09:55,029
they need compliant because the auditors

276
00:09:53,800 --> 00:09:57,459
are going to come calling and they you

277
00:09:55,029 --> 00:09:58,990
know so it's like it's trying to see you

278
00:09:57,459 --> 00:10:00,670
know everybody see it things from their

279
00:09:58,990 --> 00:10:03,279
other point of view the other part of

280
00:10:00,670 --> 00:10:05,439
this is even if you unify all of this

281
00:10:03,279 --> 00:10:07,120
even if you get one secret story for all

282
00:10:05,440 --> 00:10:08,890
your DevOps top but it's not integrated

283
00:10:07,120 --> 00:10:10,899
with your enterprise security processes

284
00:10:08,890 --> 00:10:13,990
you still got a problem you still don't

285
00:10:10,899 --> 00:10:15,310
have coherence and and unity and that's

286
00:10:13,990 --> 00:10:19,070
really what we're trying to get

287
00:10:15,310 --> 00:10:20,839
so factors that increase the per capita

288
00:10:19,070 --> 00:10:24,200
cost of read so this is kind of a funny

289
00:10:20,839 --> 00:10:26,269
graph this is the bottom part of it the

290
00:10:24,200 --> 00:10:30,470
top part was you know things that that

291
00:10:26,269 --> 00:10:31,670
decrease the cost of you know so reduce

292
00:10:30,470 --> 00:10:33,019
the cost of a breach and there was a

293
00:10:31,670 --> 00:10:35,959
good practices these are the negative

294
00:10:33,019 --> 00:10:39,110
practices so a negative decrease is an

295
00:10:35,959 --> 00:10:42,829
increase and so so this is and per

296
00:10:39,110 --> 00:10:44,480
capita means per compromised record so

297
00:10:42,829 --> 00:10:46,189
what this is saying is that there's a

298
00:10:44,480 --> 00:10:48,800
strong correlation between compiled

299
00:10:46,190 --> 00:10:51,290
compliance failures and extensive cloud

300
00:10:48,800 --> 00:10:54,979
migration and an increased cost of a

301
00:10:51,290 --> 00:10:57,230
breach to the tune of 14 US dollars per

302
00:10:54,980 --> 00:11:00,050
compromised record so if you have 30

303
00:10:57,230 --> 00:11:01,760
million compromised records times 14

304
00:11:00,050 --> 00:11:04,699
this is this is the the negative thing

305
00:11:01,760 --> 00:11:05,870
and you know we are not seeing devops up

306
00:11:04,700 --> 00:11:07,519
here but there's a pretty strong

307
00:11:05,870 --> 00:11:08,959
correlation between cloud migration and

308
00:11:07,519 --> 00:11:10,220
DevOps they're not you know completely

309
00:11:08,959 --> 00:11:12,260
orthogonal they're not completely

310
00:11:10,220 --> 00:11:14,510
correlated but people that are tend to

311
00:11:12,260 --> 00:11:16,339
be doing cloud or to give us but at the

312
00:11:14,510 --> 00:11:19,069
very least compliance failures if you

313
00:11:16,339 --> 00:11:21,740
can't show compliance if you can't show

314
00:11:19,070 --> 00:11:23,240
you've got good controls in place then

315
00:11:21,740 --> 00:11:26,269
then we're seeing this correlation here

316
00:11:23,240 --> 00:11:28,399
so anyway so here's a question can you

317
00:11:26,269 --> 00:11:31,519
be a hacker if you're not wearing a

318
00:11:28,399 --> 00:11:34,070
hoodie is that it's like you know mr.

319
00:11:31,519 --> 00:11:36,170
robot you know it's like when I'm at

320
00:11:34,070 --> 00:11:37,790
home I have a hoodie I was like look -

321
00:11:36,170 --> 00:11:40,880
my wife was like look honey I'm hacker

322
00:11:37,790 --> 00:11:43,140
now I'm a hipster now I'm a hacker but

323
00:11:40,880 --> 00:11:47,280
so you don't think that's funny anymore

324
00:11:43,140 --> 00:11:48,600
anyway so this is this is these these

325
00:11:47,280 --> 00:11:50,189
credentials that are stored in the

326
00:11:48,600 --> 00:11:52,530
various places are ripe for the picking

327
00:11:50,190 --> 00:11:54,570
and this used to be kind of a

328
00:11:52,530 --> 00:11:56,130
hypothetical you know we know about

329
00:11:54,570 --> 00:11:58,920
github and things like that but I hadn't

330
00:11:56,130 --> 00:12:02,189
seen any really intentional targeting of

331
00:11:58,920 --> 00:12:04,459
these systems until literally last week

332
00:12:02,190 --> 00:12:08,760
a friend of mine sent me a link to this

333
00:12:04,460 --> 00:12:11,550
video on YouTube from Def Con in October

334
00:12:08,760 --> 00:12:14,100
and it was a guy this is a white hat

335
00:12:11,550 --> 00:12:16,500
hacker so this is this is a good guy but

336
00:12:14,100 --> 00:12:17,790
he was documenting how to exploit

337
00:12:16,500 --> 00:12:20,100
continuous build system through

338
00:12:17,790 --> 00:12:22,199
continuous integration systems and he

339
00:12:20,100 --> 00:12:23,880
was not only documenting him he's got a

340
00:12:22,200 --> 00:12:26,400
framework on github that teaches you how

341
00:12:23,880 --> 00:12:28,260
to do it and it's adding to editing so

342
00:12:26,400 --> 00:12:31,709
so this is you know so the first order

343
00:12:28,260 --> 00:12:32,850
of business is you identify the exploit

344
00:12:31,710 --> 00:12:34,740
and then you figure out how to defend

345
00:12:32,850 --> 00:12:36,690
against it so he's doing the right thing

346
00:12:34,740 --> 00:12:39,090
but he's calling attention to the fact

347
00:12:36,690 --> 00:12:41,880
you know that before word was kind of us

348
00:12:39,090 --> 00:12:43,890
going hey this could be a problem it's a

349
00:12:41,880 --> 00:12:45,450
problem it's a true problem

350
00:12:43,890 --> 00:12:47,160
and he makes some really good points

351
00:12:45,450 --> 00:12:49,200
here which which I just love because

352
00:12:47,160 --> 00:12:52,020
they vary they dovetail very nicely with

353
00:12:49,200 --> 00:12:53,220
my presentation but you know here's all

354
00:12:52,020 --> 00:12:54,810
the good things I don't know anybody can

355
00:12:53,220 --> 00:12:56,370
read this at the back so I'm just read

356
00:12:54,810 --> 00:12:58,349
it to you good frequent release cycles

357
00:12:56,370 --> 00:12:59,940
are fabulous good faster code

358
00:12:58,350 --> 00:13:02,370
deployments equals quick remediation

359
00:12:59,940 --> 00:13:03,660
good decoupled systems reduce single

360
00:13:02,370 --> 00:13:04,770
points of failure compromise the one

361
00:13:03,660 --> 00:13:08,250
service doesn't always made full

362
00:13:04,770 --> 00:13:10,530
although ownage bad fast release

363
00:13:08,250 --> 00:13:11,670
sometimes mean hasty oversights you know

364
00:13:10,530 --> 00:13:13,829
you're doing things too quickly to

365
00:13:11,670 --> 00:13:15,780
really do them right automated

366
00:13:13,830 --> 00:13:18,330
deployment systems are checked less than

367
00:13:15,780 --> 00:13:19,860
the code that they deploy so this you

368
00:13:18,330 --> 00:13:21,330
know so much focus on app second

369
00:13:19,860 --> 00:13:23,520
security scanning let's not forget that

370
00:13:21,330 --> 00:13:25,980
the things that are deploying these apps

371
00:13:23,520 --> 00:13:28,620
are privileged processes

372
00:13:25,980 --> 00:13:30,120
and they bare looking at and the last

373
00:13:28,620 --> 00:13:31,590
thing here which is really the thesis

374
00:13:30,120 --> 00:13:34,020
statement of this whole presentation it

375
00:13:31,590 --> 00:13:35,370
is identity management so so the point

376
00:13:34,020 --> 00:13:36,660
I'm gonna leave you I'm gonna tell you

377
00:13:35,370 --> 00:13:37,920
that what I'm gonna leave you with now

378
00:13:36,660 --> 00:13:39,810
and then I'm gonna you know through the

379
00:13:37,920 --> 00:13:42,000
rest of the presentation but I think

380
00:13:39,810 --> 00:13:44,910
identity management is the common ground

381
00:13:42,000 --> 00:13:47,820
that DevOps and security can focus on is

382
00:13:44,910 --> 00:13:50,010
a common language it's a way to say what

383
00:13:47,820 --> 00:13:51,660
is the identity that this process is

384
00:13:50,010 --> 00:13:53,460
running at what is the identity of this

385
00:13:51,660 --> 00:13:55,560
Jenkins executor what is the identity of

386
00:13:53,460 --> 00:13:57,900
these you know what who needs to be

387
00:13:55,560 --> 00:13:59,969
running this playbook and in ansible and

388
00:13:57,900 --> 00:14:02,189
so if you can start focusing on identity

389
00:13:59,970 --> 00:14:03,390
and the roles that these identities need

390
00:14:02,190 --> 00:14:05,040
to take then you can start getting

391
00:14:03,390 --> 00:14:08,480
developing a common language look you're

392
00:14:05,040 --> 00:14:08,480
a few the hacker you're a hacker

393
00:14:09,590 --> 00:14:16,160
really call alright so in any way that

394
00:14:14,720 --> 00:14:17,510
this if you want to go see this video

395
00:14:16,160 --> 00:14:21,319
it's pretty entertaining

396
00:14:17,510 --> 00:14:23,510
um there's your link there your bit so

397
00:14:21,320 --> 00:14:24,770
anyway so we talked about that oh and

398
00:14:23,510 --> 00:14:27,830
there's the link there too

399
00:14:24,770 --> 00:14:33,079
guy goes by space box that's a capital B

400
00:14:27,830 --> 00:14:35,990
zero so we've got these challenges we've

401
00:14:33,080 --> 00:14:37,190
got the security teams not collaborating

402
00:14:35,990 --> 00:14:39,110
effectively explosion of automation

403
00:14:37,190 --> 00:14:40,720
deployments inconsistency and secrets

404
00:14:39,110 --> 00:14:43,190
for all lack of audit and compliance

405
00:14:40,720 --> 00:14:44,570
broaden attack surface let's call it

406
00:14:43,190 --> 00:14:47,150
what it is it's dead

407
00:14:44,570 --> 00:14:48,589
its technical security debt and this is

408
00:14:47,150 --> 00:14:51,140
going to grow the longer it goes

409
00:14:48,589 --> 00:14:53,240
unaddressed so it's really pairs you

410
00:14:51,140 --> 00:14:54,880
know you really need to start thinking

411
00:14:53,240 --> 00:14:58,010
to taking a look at it and saying okay

412
00:14:54,880 --> 00:15:00,439
what are the privileges that these these

413
00:14:58,010 --> 00:15:01,970
processes need how are we going to

414
00:15:00,440 --> 00:15:03,470
control those how are we going to audit

415
00:15:01,970 --> 00:15:08,330
them and show show compliance with our

416
00:15:03,470 --> 00:15:11,750
policy so let's look at just to put some

417
00:15:08,330 --> 00:15:14,180
nomenclature around this we're seeing a

418
00:15:11,750 --> 00:15:15,440
very high Duty this this almost

419
00:15:14,180 --> 00:15:17,989
everybody relates to this almost

420
00:15:15,440 --> 00:15:19,400
everybody Zuzu Jenkins for build and a

421
00:15:17,990 --> 00:15:21,290
lot of people are more and more people

422
00:15:19,400 --> 00:15:22,850
increasingly are using ansible or

423
00:15:21,290 --> 00:15:24,349
deployment some people use chickens for

424
00:15:22,850 --> 00:15:27,500
deployments you know and that's one of

425
00:15:24,350 --> 00:15:29,150
the challenges of our job is no.2 DevOps

426
00:15:27,500 --> 00:15:30,740
tool changes of the same and certainly

427
00:15:29,150 --> 00:15:32,510
know workflow those are the same so the

428
00:15:30,740 --> 00:15:34,940
firt our first step is always just

429
00:15:32,510 --> 00:15:36,290
understanding what the workflow is but

430
00:15:34,940 --> 00:15:37,940
in general you've got these these

431
00:15:36,290 --> 00:15:39,589
privilege systems they're building the

432
00:15:37,940 --> 00:15:41,780
applications and they need access to the

433
00:15:39,589 --> 00:15:42,230
secrets to be able to pull code from

434
00:15:41,780 --> 00:15:45,500
from

435
00:15:42,230 --> 00:15:47,240
to deploy to the doctor repo for testing

436
00:15:45,500 --> 00:15:49,880
to deploy the artifact repository for

437
00:15:47,240 --> 00:15:52,790
staging and then ansible similarly needs

438
00:15:49,880 --> 00:15:53,900
secrets to pull from the repository to

439
00:15:52,790 --> 00:15:56,750
deploy the application

440
00:15:53,900 --> 00:15:59,060
similarly the applications also need

441
00:15:56,750 --> 00:16:00,800
access to secrets to do their work so

442
00:15:59,060 --> 00:16:02,750
we've got two sets of identities at

443
00:16:00,800 --> 00:16:05,990
different times identities in the tool

444
00:16:02,750 --> 00:16:07,670
chain and then identities at runtime the

445
00:16:05,990 --> 00:16:10,460
point is all of these things in order to

446
00:16:07,670 --> 00:16:12,709
get access to these credentials need to

447
00:16:10,460 --> 00:16:16,070
be able to pull secrets from some

448
00:16:12,710 --> 00:16:18,110
secrets store and and preferably they're

449
00:16:16,070 --> 00:16:21,190
authenticated and authorized and audited

450
00:16:18,110 --> 00:16:23,960
in doing that so that's set this up for

451
00:16:21,190 --> 00:16:25,430
let's talk about identity when let's

452
00:16:23,960 --> 00:16:27,260
talk about it any of these that aren't

453
00:16:25,430 --> 00:16:31,099
just people let's talk about machine

454
00:16:27,260 --> 00:16:34,340
identity or service identity or see see

455
00:16:31,100 --> 00:16:37,000
the term now work loved identity this is

456
00:16:34,340 --> 00:16:39,230
these are the nonhuman identities that

457
00:16:37,000 --> 00:16:40,970
still need to be authenticated

458
00:16:39,230 --> 00:16:43,130
authorized and audited

459
00:16:40,970 --> 00:16:44,630
we want to do it all the code we need to

460
00:16:43,130 --> 00:16:46,550
do it very efficiently because we've got

461
00:16:44,630 --> 00:16:48,530
thousands of things coming coming and

462
00:16:46,550 --> 00:16:49,170
going so this has to be a very efficient

463
00:16:48,530 --> 00:16:53,459
and

464
00:16:49,170 --> 00:16:55,949
a dynamic process so so this is a

465
00:16:53,459 --> 00:16:58,170
taxonomy of different ways of doing

466
00:16:55,950 --> 00:16:59,880
authentication and it's it's my work as

467
00:16:58,170 --> 00:17:01,949
you won't find a reference for this

468
00:16:59,880 --> 00:17:04,199
anywhere it's just based on my

469
00:17:01,950 --> 00:17:06,870
experience so it generally we've got two

470
00:17:04,199 --> 00:17:08,730
classes of authentication techniques one

471
00:17:06,869 --> 00:17:11,849
is credential base which is your classic

472
00:17:08,730 --> 00:17:13,140
username and password hostname and API

473
00:17:11,849 --> 00:17:15,559
key you know so everybody is familiar

474
00:17:13,140 --> 00:17:18,209
with that I won't dwell on that too much

475
00:17:15,559 --> 00:17:20,849
but there are differences in the Machine

476
00:17:18,209 --> 00:17:22,500
space because these things come up and

477
00:17:20,849 --> 00:17:26,490
they don't you know the enrollment

478
00:17:22,500 --> 00:17:27,959
process is is it's not well established

479
00:17:26,490 --> 00:17:29,940
you know think about the human workflow

480
00:17:27,959 --> 00:17:31,740
of an of identity you go to you start a

481
00:17:29,940 --> 00:17:33,750
job they know who you are you get

482
00:17:31,740 --> 00:17:36,780
assigned an account you get a password

483
00:17:33,750 --> 00:17:38,490
you remember the password hopefully and

484
00:17:36,780 --> 00:17:39,928
so you have your own built involved so

485
00:17:38,490 --> 00:17:41,610
you can remember your password these

486
00:17:39,929 --> 00:17:43,169
things don't apply to machines in

487
00:17:41,610 --> 00:17:45,270
general they don't know their own

488
00:17:43,169 --> 00:17:48,480
passwords and they come and go at such a

489
00:17:45,270 --> 00:17:49,889
furious rate that that you really need

490
00:17:48,480 --> 00:17:52,620
something that's very very efficient for

491
00:17:49,890 --> 00:17:54,960
doing that so there's pre verified

492
00:17:52,620 --> 00:17:57,620
machine identity techniques and then

493
00:17:54,960 --> 00:18:00,360
there's dynamically gratified techniques

494
00:17:57,620 --> 00:18:02,040
I'm gonna do a demo the first demo I'm

495
00:18:00,360 --> 00:18:04,559
going to do is this more statically

496
00:18:02,040 --> 00:18:06,418
define identity where we we assign an

497
00:18:04,559 --> 00:18:09,000
identity and there's a privileged

498
00:18:06,419 --> 00:18:10,820
process that issues the API keys and so

499
00:18:09,000 --> 00:18:13,740
we'll show what that looks like

500
00:18:10,820 --> 00:18:16,060
god-willing at the demo

501
00:18:13,740 --> 00:18:18,370
the other thing is attribute-based

502
00:18:16,060 --> 00:18:20,169
and so this is is a new if so think

503
00:18:18,370 --> 00:18:21,669
about biometrics the human analog here

504
00:18:20,170 --> 00:18:23,560
is you know when you go to open your

505
00:18:21,670 --> 00:18:24,760
phone you don't you don't use a code you

506
00:18:23,560 --> 00:18:26,710
don't type in a code you just use your

507
00:18:24,760 --> 00:18:28,180
thumbprint so it's it's something about

508
00:18:26,710 --> 00:18:31,570
you it's not something that you remember

509
00:18:28,180 --> 00:18:33,880
or submit and so this is getting into a

510
00:18:31,570 --> 00:18:37,450
more advanced way of authenticating

511
00:18:33,880 --> 00:18:40,090
these non-human entities but it also has

512
00:18:37,450 --> 00:18:41,530
some limitations and and it's it's these

513
00:18:40,090 --> 00:18:43,600
limitations are kind of spelled out here

514
00:18:41,530 --> 00:18:44,860
we actually do this one of our typical

515
00:18:43,600 --> 00:18:47,290
products has been doing this for over

516
00:18:44,860 --> 00:18:49,240
ten years but it requires an agent be

517
00:18:47,290 --> 00:18:51,100
collocated with the application in order

518
00:18:49,240 --> 00:18:54,340
to do the verification but it can do

519
00:18:51,100 --> 00:18:56,679
things like use view certs or md5 hashes

520
00:18:54,340 --> 00:18:59,590
to to authenticate the applications

521
00:18:56,680 --> 00:19:03,130
verify it is what it is without the

522
00:18:59,590 --> 00:19:05,350
application submitting a password so the

523
00:19:03,130 --> 00:19:10,000
the other here in the demo I'm going to

524
00:19:05,350 --> 00:19:11,620
do second is using kubernetes and using

525
00:19:10,000 --> 00:19:14,230
the kubernetes runtime to verify the

526
00:19:11,620 --> 00:19:17,020
attributes of a container requesting

527
00:19:14,230 --> 00:19:18,160
access to secrets so this is the kind of

528
00:19:17,020 --> 00:19:19,930
bootstrap process you have to

529
00:19:18,160 --> 00:19:21,310
authenticate in order to get access to

530
00:19:19,930 --> 00:19:23,740
the secrets once you have access to the

531
00:19:21,310 --> 00:19:25,860
secrets there you can get access to the

532
00:19:23,740 --> 00:19:28,270
databases and the services that you need

533
00:19:25,860 --> 00:19:29,709
we all good with that every any

534
00:19:28,270 --> 00:19:34,210
questions

535
00:19:29,710 --> 00:19:36,770
all right so let's see what happens this

536
00:19:34,210 --> 00:19:39,350
is gonna be the fun part Oh

537
00:19:36,770 --> 00:19:40,190
nevermind I let me let me just step you

538
00:19:39,350 --> 00:19:41,840
through it let me show you what I'm

539
00:19:40,190 --> 00:19:43,610
going to show you then I'll show you

540
00:19:41,840 --> 00:19:45,889
so credential based pre verified

541
00:19:43,610 --> 00:19:47,719
identity so the workflow here is that

542
00:19:45,890 --> 00:19:49,309
there's an admin process that issues the

543
00:19:47,720 --> 00:19:50,600
API queue to application container so

544
00:19:49,309 --> 00:19:53,120
it's going to launch the containers and

545
00:19:50,600 --> 00:19:54,918
then it's going to assign each of these

546
00:19:53,120 --> 00:19:56,360
containers an API key and they're all

547
00:19:54,919 --> 00:19:59,570
gonna have the same API key they're

548
00:19:56,360 --> 00:20:01,370
going to share the same identity so the

549
00:19:59,570 --> 00:20:03,020
the applications will retrieve the API

550
00:20:01,370 --> 00:20:05,779
key from his shared volume just running

551
00:20:03,020 --> 00:20:07,970
in a docker compose environment and then

552
00:20:05,779 --> 00:20:10,340
the credential is deleted from the

553
00:20:07,970 --> 00:20:12,289
shared volume after five seconds so it

554
00:20:10,340 --> 00:20:14,418
only exists for five seconds and this is

555
00:20:12,289 --> 00:20:16,520
where you start saying okay thinking

556
00:20:14,419 --> 00:20:17,960
like an attacker how could this system

557
00:20:16,520 --> 00:20:19,730
be compromised how could somebody get

558
00:20:17,960 --> 00:20:21,799
access to this API key because when they

559
00:20:19,730 --> 00:20:23,809
have that API key then they can retrieve

560
00:20:21,799 --> 00:20:27,168
that whatever credentials that identity

561
00:20:23,809 --> 00:20:29,240
is authorized to retrieve so so this is

562
00:20:27,169 --> 00:20:30,890
a way of distributing the API key pretty

563
00:20:29,240 --> 00:20:32,149
pretty securely it's a shared volume

564
00:20:30,890 --> 00:20:35,179
that's only seen by these these

565
00:20:32,149 --> 00:20:37,219
containers and it's deleted after five

566
00:20:35,179 --> 00:20:38,840
seconds here's a graphical depiction of

567
00:20:37,220 --> 00:20:40,460
that same thing so the the issuing

568
00:20:38,840 --> 00:20:42,559
authority or the credential issuing

569
00:20:40,460 --> 00:20:44,720
authority is this script and it's going

570
00:20:42,559 --> 00:20:46,580
to be logged in as the DevOps

571
00:20:44,720 --> 00:20:49,100
administrator so it's a privilege

572
00:20:46,580 --> 00:20:50,178
it's a privilege Authority it has to

573
00:20:49,100 --> 00:20:52,908
have the privilege to be able to rotate

574
00:20:50,179 --> 00:20:53,990
the API key the Sony's thing so it's

575
00:20:52,909 --> 00:20:56,080
going to pull the API key from the

576
00:20:53,990 --> 00:20:59,040
secret store actually rotate it

577
00:20:56,080 --> 00:21:00,570
distribute it in the shared volume yeah

578
00:20:59,040 --> 00:21:03,960
applications pick that up so that's

579
00:21:00,570 --> 00:21:06,918
probably enough ado about that now let's

580
00:21:03,960 --> 00:21:06,919
see if it actually works

581
00:21:07,150 --> 00:21:11,299
so I'm going to run to containers and

582
00:21:09,410 --> 00:21:14,120
they're going to sleep every five

583
00:21:11,299 --> 00:21:18,220
seconds before they fetch that database

584
00:21:14,120 --> 00:21:20,809
password so this anybody used we scoped

585
00:21:18,220 --> 00:21:21,830
we scoped makes makes demos a whole lot

586
00:21:20,809 --> 00:21:23,299
more interesting because you can

587
00:21:21,830 --> 00:21:26,000
actually see what's going on as opposed

588
00:21:23,299 --> 00:21:27,740
to just watch text scroll so this this

589
00:21:26,000 --> 00:21:29,390
is my my conjurer environment conjures

590
00:21:27,740 --> 00:21:32,120
our secrets management product for

591
00:21:29,390 --> 00:21:35,030
DevOps we're close we've got a booth out

592
00:21:32,120 --> 00:21:37,610
there and here's my two containers that

593
00:21:35,030 --> 00:21:39,289
came out web app one web app - I can

594
00:21:37,610 --> 00:21:42,049
open up these containers you know get a

595
00:21:39,289 --> 00:21:44,090
shell in here and pop this out and just

596
00:21:42,049 --> 00:21:48,679
watch as it retrieves these passwords so

597
00:21:44,090 --> 00:21:51,470
I'm going to just tail this this a log

598
00:21:48,679 --> 00:21:53,690
file that it writes to and watch so we

599
00:21:51,470 --> 00:21:55,570
can see that it's got the API key it

600
00:21:53,690 --> 00:21:58,090
echoes the API key to the LA hug and

601
00:21:55,570 --> 00:22:00,559
it's retrieving the password which is

602
00:21:58,090 --> 00:22:03,799
unimaginative to leave the database

603
00:22:00,559 --> 00:22:06,700
password so all well and good I mean

604
00:22:03,799 --> 00:22:09,200
that's that's great right it's so what

605
00:22:06,700 --> 00:22:10,820
so let's do something here now let and

606
00:22:09,200 --> 00:22:13,549
this is what I'm going to do is just cat

607
00:22:10,820 --> 00:22:15,649
this this script so this is the script

608
00:22:13,549 --> 00:22:18,559
that's going to cycle or rotate that API

609
00:22:15,650 --> 00:22:20,990
key and so rotation again this is like

610
00:22:18,559 --> 00:22:22,940
this the fun most fundamental security

611
00:22:20,990 --> 00:22:25,100
hygiene practice you can have as soon as

612
00:22:22,940 --> 00:22:27,350
you rotate a credential anybody that has

613
00:22:25,100 --> 00:22:28,699
the old credential is alan they're

614
00:22:27,350 --> 00:22:30,889
locked out no matter where they are it's

615
00:22:28,700 --> 00:22:32,960
like it's like an EMP for credentials

616
00:22:30,890 --> 00:22:35,120
you rotate the password and all those

617
00:22:32,960 --> 00:22:38,870
old credentials are dead so what this

618
00:22:35,120 --> 00:22:43,100
script does is rotates the API key and

619
00:22:38,870 --> 00:22:44,750
if I don't give it a an argument then

620
00:22:43,100 --> 00:22:46,070
it'll write the new API key to the

621
00:22:44,750 --> 00:22:47,690
shared volume and the applications will

622
00:22:46,070 --> 00:22:49,610
pick it up and they'll go on about their

623
00:22:47,690 --> 00:22:50,590
business and so we'll see that happen in

624
00:22:49,610 --> 00:22:54,189
real time here

625
00:22:50,590 --> 00:22:54,790
rotate the API key the application you

626
00:22:54,190 --> 00:22:57,430
know it

627
00:22:54,790 --> 00:22:58,960
it failed authentication went back to

628
00:22:57,430 --> 00:23:01,120
look at that shared volume picked up the

629
00:22:58,960 --> 00:23:03,970
API key and then the script deleted it

630
00:23:01,120 --> 00:23:06,790
so so that's that's cool and then you

631
00:23:03,970 --> 00:23:09,370
know here's just the other example where

632
00:23:06,790 --> 00:23:12,490
if I add an argument it's not going to

633
00:23:09,370 --> 00:23:14,050
write that that API key back and the

634
00:23:12,490 --> 00:23:15,640
applications are locked out and because

635
00:23:14,050 --> 00:23:17,800
all these applications are sharing the

636
00:23:15,640 --> 00:23:19,330
same identity you know which is arguably

637
00:23:17,800 --> 00:23:21,040
what you want because they all have the

638
00:23:19,330 --> 00:23:24,090
same privilege they're all instances of

639
00:23:21,040 --> 00:23:26,920
the same image they all have the same

640
00:23:24,090 --> 00:23:28,659
authorization requirements so you don't

641
00:23:26,920 --> 00:23:30,850
need to create unique identities for

642
00:23:28,660 --> 00:23:32,560
every single container so these are

643
00:23:30,850 --> 00:23:34,719
sharing very efficiently a single

644
00:23:32,560 --> 00:23:38,200
identity and when I rotate that API key

645
00:23:34,720 --> 00:23:39,850
they're all locked out so that's just

646
00:23:38,200 --> 00:23:44,320
you know kind of getting into some of

647
00:23:39,850 --> 00:23:46,360
the the semantics of identity for

648
00:23:44,320 --> 00:23:48,220
inanimate things you know this is not a

649
00:23:46,360 --> 00:23:49,600
human thing anymore and these cycles

650
00:23:48,220 --> 00:23:51,670
these life cycles you know are very

651
00:23:49,600 --> 00:23:55,870
dynamic but you know the downsides to

652
00:23:51,670 --> 00:23:57,940
this is we have this very right now the

653
00:23:55,870 --> 00:24:01,449
identity that's used to issue these keys

654
00:23:57,940 --> 00:24:02,680
is a privileged administrator and if we

655
00:24:01,450 --> 00:24:05,530
had lots of different types of

656
00:24:02,680 --> 00:24:07,180
applications then you get into well how

657
00:24:05,530 --> 00:24:08,830
much privilege does this thing have and

658
00:24:07,180 --> 00:24:12,010
does it become a liability because now

659
00:24:08,830 --> 00:24:13,240
it has access to issue credentials not

660
00:24:12,010 --> 00:24:15,340
just use credentials but issue

661
00:24:13,240 --> 00:24:17,800
credentials which is a very powerful

662
00:24:15,340 --> 00:24:20,740
thing and if you're aware of general

663
00:24:17,800 --> 00:24:22,180
exploits using Active Directory one of

664
00:24:20,740 --> 00:24:23,950
the most powerful things you can do is

665
00:24:22,180 --> 00:24:26,800
the golden ticket hack where you you

666
00:24:23,950 --> 00:24:29,260
take command of the of the author you

667
00:24:26,800 --> 00:24:30,669
know the identity issuing authority and

668
00:24:29,260 --> 00:24:32,470
therefore it can give yourself any

669
00:24:30,670 --> 00:24:34,480
privilege that you want so we want to

670
00:24:32,470 --> 00:24:35,950
avoid that and this is the kind of you

671
00:24:34,480 --> 00:24:39,040
know critical thinking that needs to go

672
00:24:35,950 --> 00:24:42,820
into our security models and and so you

673
00:24:39,040 --> 00:24:44,710
know all the good for the old principles

674
00:24:42,820 --> 00:24:46,659
of zero trust lease privilege

675
00:24:44,710 --> 00:24:48,370
non-repudiation role based access

676
00:24:46,660 --> 00:24:50,380
control you know these these all still

677
00:24:48,370 --> 00:24:53,229
apply it's just that now when they need

678
00:24:50,380 --> 00:24:54,760
to apply to these non-human actors so

679
00:24:53,230 --> 00:24:57,970
that's that first Dylan let me let me

680
00:24:54,760 --> 00:25:00,110
just stop these things so I set up for

681
00:24:57,970 --> 00:25:03,640
my second demo

682
00:25:00,110 --> 00:25:07,370
any questions any gonna is all of this

683
00:25:03,640 --> 00:25:09,970
clear and straightforward semi

684
00:25:07,370 --> 00:25:09,969
entertaining

685
00:25:10,850 --> 00:25:16,009
so I'm going to shut these containers

686
00:25:12,980 --> 00:25:22,850
down and we'll move on to the kubernetes

687
00:25:16,009 --> 00:25:24,289
going so that's that so so now we're

688
00:25:22,850 --> 00:25:26,439
going to look at the attribute based

689
00:25:24,289 --> 00:25:28,490
authentication so not using a password

690
00:25:26,440 --> 00:25:30,710
the containers are come up and they

691
00:25:28,490 --> 00:25:33,590
initiate the verification of their

692
00:25:30,710 --> 00:25:36,850
identity so they submit a request

693
00:25:33,590 --> 00:25:39,459
basically and the workflow really is

694
00:25:36,850 --> 00:25:42,469
submitting a certificate signing request

695
00:25:39,460 --> 00:25:46,100
to now the Secret Service so there's no

696
00:25:42,470 --> 00:25:48,529
there's no administrator logged in here

697
00:25:46,100 --> 00:25:50,269
this is all fully automated where as

698
00:25:48,529 --> 00:25:51,500
soon as these applications come up and

699
00:25:50,269 --> 00:25:53,509
they could be launched by whatever

700
00:25:51,500 --> 00:25:56,200
automated process but they're not given

701
00:25:53,509 --> 00:25:57,980
an identity to start with they request

702
00:25:56,200 --> 00:26:01,490
verification of an identity through a

703
00:25:57,980 --> 00:26:03,409
CSR that CSR is validated with

704
00:26:01,490 --> 00:26:05,659
kubernetes so basically we're we're

705
00:26:03,409 --> 00:26:08,059
trusting we're using kubernetes as a

706
00:26:05,659 --> 00:26:09,590
trusted third-party to say is this thing

707
00:26:08,059 --> 00:26:11,418
what it says it is is it truly at this

708
00:26:09,590 --> 00:26:14,750
IP address does it have this name is an

709
00:26:11,419 --> 00:26:17,029
instance of this of this image and if

710
00:26:14,750 --> 00:26:18,230
that all checks out then we'll issue it

711
00:26:17,029 --> 00:26:19,940
a certificate and that certificate

712
00:26:18,230 --> 00:26:22,039
becomes its credential that it can use

713
00:26:19,940 --> 00:26:24,039
to authenticate so that's the process

714
00:26:22,039 --> 00:26:28,100
that we're doing here here's the

715
00:26:24,039 --> 00:26:30,139
graphical representation of that so this

716
00:26:28,100 --> 00:26:31,730
is using ton in order to hide complexity

717
00:26:30,139 --> 00:26:33,080
from the application remember that if

718
00:26:31,730 --> 00:26:35,210
we're trying to make the developer

719
00:26:33,080 --> 00:26:36,789
experience as seamless as possible we

720
00:26:35,210 --> 00:26:40,639
want to shield them from a lot of this

721
00:26:36,789 --> 00:26:42,230
the mechanics of doing this

722
00:26:40,639 --> 00:26:43,428
authentication and certification these

723
00:26:42,230 --> 00:26:44,899
things like that so we're using a

724
00:26:43,429 --> 00:26:46,909
sidecar here

725
00:26:44,899 --> 00:26:48,860
which is a very common pattern now

726
00:26:46,909 --> 00:26:50,870
service mesh architectures as a way of

727
00:26:48,860 --> 00:26:52,879
encapsulating complexity so as this

728
00:26:50,870 --> 00:26:54,678
sidecar container is is actually doing

729
00:26:52,880 --> 00:26:57,470
the authentication dialogue back and

730
00:26:54,679 --> 00:26:59,539
forth with the conjurer server and it

731
00:26:57,470 --> 00:27:01,639
gets back to certificate not directly

732
00:26:59,539 --> 00:27:03,529
over the requesting channel but through

733
00:27:01,639 --> 00:27:05,149
a side channel so we're actually it's

734
00:27:03,529 --> 00:27:08,539
it's again so we're kind of a two-factor

735
00:27:05,149 --> 00:27:10,008
authentication where the final check is

736
00:27:08,539 --> 00:27:12,139
even if it's not where it says it is

737
00:27:10,009 --> 00:27:14,269
we're writing the cert back to where it

738
00:27:12,139 --> 00:27:17,990
says it is into the container using the

739
00:27:14,269 --> 00:27:19,730
the kubernetes runtime so if it

740
00:27:17,990 --> 00:27:21,019
successfully spoofed us every other way

741
00:27:19,730 --> 00:27:24,440
it's still not going to get a certain

742
00:27:21,019 --> 00:27:26,450
test sir so that's this demo and let me

743
00:27:24,440 --> 00:27:28,250
just run through that real quick it's

744
00:27:26,450 --> 00:27:31,220
very similar to the one we had before in

745
00:27:28,250 --> 00:27:34,460
that we're going to deploy a web

746
00:27:31,220 --> 00:27:38,360
application it's going to come up it's

747
00:27:34,460 --> 00:27:40,009
going to first get authenticated and and

748
00:27:38,360 --> 00:27:41,479
usually by the time everything pops up

749
00:27:40,009 --> 00:27:44,539
here it's authenticated it's already

750
00:27:41,480 --> 00:27:47,330
started retrieving the database password

751
00:27:44,539 --> 00:27:48,559
so that's the if you saw those lines get

752
00:27:47,330 --> 00:27:50,210
created that was why after it got

753
00:27:48,559 --> 00:27:53,269
authenticated now it's contacting the

754
00:27:50,210 --> 00:27:57,710
Secret Service to retrieve the database

755
00:27:53,269 --> 00:27:59,530
password pull this up here and it will

756
00:27:57,710 --> 00:28:02,320
start seeing it echo the

757
00:27:59,530 --> 00:28:04,540
password so that you know same thing

758
00:28:02,320 --> 00:28:06,790
there it got authenticated got access to

759
00:28:04,540 --> 00:28:08,409
the database password yeah everything's

760
00:28:06,790 --> 00:28:09,850
good so let me just show you one last

761
00:28:08,410 --> 00:28:11,050
thing here real quick because I want to

762
00:28:09,850 --> 00:28:14,500
show you what this certificate looks

763
00:28:11,050 --> 00:28:16,120
like and and then talk a little bit

764
00:28:14,500 --> 00:28:22,140
about some some developing standards

765
00:28:16,120 --> 00:28:22,139
that are that are happening so to use

766
00:28:24,210 --> 00:28:29,600
whoever have context

767
00:28:27,490 --> 00:28:31,640
control

768
00:28:29,600 --> 00:28:33,800
so

769
00:28:31,640 --> 00:28:37,790
live demos are all the rage at the

770
00:28:33,800 --> 00:28:40,430
conferences these days I'm just happy

771
00:28:37,790 --> 00:28:43,760
mine so far I don't want to jinx it so

772
00:28:40,430 --> 00:28:45,710
far it's worked pretty well so I'm gonna

773
00:28:43,760 --> 00:28:47,360
exact into this container and we're just

774
00:28:45,710 --> 00:28:49,690
going to look at that that cert go quick

775
00:28:47,360 --> 00:28:51,979
so I'm in the in the webapp container

776
00:28:49,690 --> 00:28:57,190
happened to know that it's that the cert

777
00:28:51,980 --> 00:28:59,960
is written to the conjurer ssl directory

778
00:28:57,190 --> 00:29:01,370
that's here so here's a certain the

779
00:28:59,960 --> 00:29:03,770
private key that it can use for

780
00:29:01,370 --> 00:29:05,659
encryption and then I'm just going to

781
00:29:03,770 --> 00:29:09,370
going to parse that cert real quick

782
00:29:05,660 --> 00:29:09,370
it's an x.509 sir

783
00:29:12,290 --> 00:29:15,340
this text

784
00:29:19,780 --> 00:29:27,430
okay so final proof point we've got a

785
00:29:23,800 --> 00:29:29,919
cert here and if we look at the the just

786
00:29:27,430 --> 00:29:32,230
the the common name here it's got the IP

787
00:29:29,920 --> 00:29:34,360
address encoded in it we look over here

788
00:29:32,230 --> 00:29:36,850
we can see that that's the same IP

789
00:29:34,360 --> 00:29:38,080
address that the container is at so the

790
00:29:36,850 --> 00:29:39,100
cool thing about certs is you know

791
00:29:38,080 --> 00:29:40,720
they're they're they're pretty

792
00:29:39,100 --> 00:29:42,639
open-ended we could put a lot of

793
00:29:40,720 --> 00:29:44,290
information in this cert and it's

794
00:29:42,640 --> 00:29:45,430
stateless we're not keeping track of

795
00:29:44,290 --> 00:29:46,990
these certs anywhere ever they don't

796
00:29:45,430 --> 00:29:48,580
have to be looked up so it's very very

797
00:29:46,990 --> 00:29:52,060
scalable we can issue these certs

798
00:29:48,580 --> 00:29:53,889
they're there they're secure they can be

799
00:29:52,060 --> 00:29:55,659
tagged very specifically to this one

800
00:29:53,890 --> 00:29:57,340
container they can't be used anywhere

801
00:29:55,660 --> 00:29:59,020
else it certainly can't be used outside

802
00:29:57,340 --> 00:30:00,550
of Cooper Cooper Nettie's but they can't

803
00:29:59,020 --> 00:30:03,760
be used by anything else that doesn't

804
00:30:00,550 --> 00:30:05,169
have that information in it so the thing

805
00:30:03,760 --> 00:30:06,790
that we find really gratifying about

806
00:30:05,170 --> 00:30:11,470
this but you know besides just being

807
00:30:06,790 --> 00:30:13,480
incredibly technical is that it is very

808
00:30:11,470 --> 00:30:14,650
similar to an emerging standard coming

809
00:30:13,480 --> 00:30:16,420
out of the cloud native computing

810
00:30:14,650 --> 00:30:21,460
foundation the same organization that's

811
00:30:16,420 --> 00:30:23,110
overseeing kubernetes is is kind of

812
00:30:21,460 --> 00:30:25,690
sponsoring this it's not a formal

813
00:30:23,110 --> 00:30:27,789
project yet but it's it's a project

814
00:30:25,690 --> 00:30:29,440
called spiffy secure

815
00:30:27,789 --> 00:30:31,509
secur production identity framework for

816
00:30:29,440 --> 00:30:33,009
everybody so this is a generalization of

817
00:30:31,509 --> 00:30:37,720
that process that we just looked at

818
00:30:33,009 --> 00:30:39,279
where a requester asks for verification

819
00:30:37,720 --> 00:30:41,080
of its identity the identity is verified

820
00:30:39,279 --> 00:30:42,909
through various means

821
00:30:41,080 --> 00:30:45,369
but generally but through a trusted

822
00:30:42,909 --> 00:30:47,919
third party it gets back this especially

823
00:30:45,369 --> 00:30:50,379
formatted 5:09 certificate which can be

824
00:30:47,919 --> 00:30:52,869
used as a general way of authenticating

825
00:30:50,379 --> 00:30:55,988
to other processes and so this is called

826
00:30:52,869 --> 00:30:58,299
workload authentication it's it's just

827
00:30:55,989 --> 00:31:00,099
how do we authenticate these things that

828
00:30:58,299 --> 00:31:01,629
aren't people anymore and so this is a

829
00:31:00,099 --> 00:31:03,668
general framework that's being developed

830
00:31:01,629 --> 00:31:06,969
for that for these highly scale of

831
00:31:03,669 --> 00:31:09,070
container and dynamic environments just

832
00:31:06,970 --> 00:31:10,989
a foreshadowing so you know attribute

833
00:31:09,070 --> 00:31:15,820
authentication and the spiffy standard

834
00:31:10,989 --> 00:31:17,590
are pretty cool but what if these

835
00:31:15,820 --> 00:31:19,509
applications never actually touch

836
00:31:17,590 --> 00:31:21,009
credentials this is some some

837
00:31:19,509 --> 00:31:23,679
foreshadowing and some research work

838
00:31:21,009 --> 00:31:26,830
that we're doing and it's based on a

839
00:31:23,679 --> 00:31:29,470
product that the cyber-ark has for human

840
00:31:26,830 --> 00:31:32,499
administrators where a sysadmin can

841
00:31:29,470 --> 00:31:34,809
login and and never see the root key but

842
00:31:32,499 --> 00:31:37,479
get a root session on a target machine

843
00:31:34,809 --> 00:31:39,700
and that session is audited but they

844
00:31:37,479 --> 00:31:42,820
never see the root password and so this

845
00:31:39,700 --> 00:31:44,529
is a much more secure way to to give

846
00:31:42,820 --> 00:31:47,080
access to give privileged access to

847
00:31:44,529 --> 00:31:49,869
something and so what if we could do

848
00:31:47,080 --> 00:31:51,879
that for these non-human actors where an

849
00:31:49,869 --> 00:31:53,678
application simply gets a connection to

850
00:31:51,879 --> 00:31:54,530
the database and it never sees the

851
00:31:53,679 --> 00:31:56,450
database password

852
00:31:54,530 --> 00:31:57,740
we think that's a much more secure way

853
00:31:56,450 --> 00:32:00,110
to manage these things it's also much

854
00:31:57,740 --> 00:32:02,060
simpler for the developers so that's a

855
00:32:00,110 --> 00:32:05,000
bit of foreshadowing you know that's

856
00:32:02,060 --> 00:32:06,950
another presentation for another time so

857
00:32:05,000 --> 00:32:09,320
just to wrap up strong identity enables

858
00:32:06,950 --> 00:32:11,270
collaboration so I think that starting

859
00:32:09,320 --> 00:32:13,879
to talk about the identities of these

860
00:32:11,270 --> 00:32:15,530
processes which ones are more privileged

861
00:32:13,880 --> 00:32:18,500
than others it gives you a way to have

862
00:32:15,530 --> 00:32:20,330
this common language that that devops

863
00:32:18,500 --> 00:32:22,010
teams and security teams can start to

864
00:32:20,330 --> 00:32:23,899
use to understand the concerns of each

865
00:32:22,010 --> 00:32:27,170
other you have an over privileged

866
00:32:23,900 --> 00:32:29,750
process that is a bigger target it's a

867
00:32:27,170 --> 00:32:31,400
more of a liability and so we want to

868
00:32:29,750 --> 00:32:34,580
mitigate that risk we run over you know

869
00:32:31,400 --> 00:32:37,070
risk is is probability times impact so

870
00:32:34,580 --> 00:32:38,810
if that over privileged process if it

871
00:32:37,070 --> 00:32:41,360
has access to tons and tons of Secrets

872
00:32:38,810 --> 00:32:43,280
or can issue identities that's something

873
00:32:41,360 --> 00:32:45,770
we really need to focus on and raise

874
00:32:43,280 --> 00:32:47,840
this level of importance in terms of our

875
00:32:45,770 --> 00:32:49,700
strategy and remediation as opposed to

876
00:32:47,840 --> 00:32:51,169
you know just some application that

877
00:32:49,700 --> 00:32:52,760
needs to connect to a database maybe so

878
00:32:51,170 --> 00:32:54,800
it's a way it just gives us a common

879
00:32:52,760 --> 00:32:57,140
parlance where security and operations

880
00:32:54,800 --> 00:32:58,820
can focus on solving these problems as

881
00:32:57,140 --> 00:33:00,590
much as possible keeping development out

882
00:32:58,820 --> 00:33:02,120
of the literature so just a call to

883
00:33:00,590 --> 00:33:05,149
action collaborate collaborate

884
00:33:02,120 --> 00:33:07,250
collaborate focus on you know further

885
00:33:05,150 --> 00:33:09,800
security teams focus on outcomes this is

886
00:33:07,250 --> 00:33:11,450
how the marriage counseling slide focus

887
00:33:09,800 --> 00:33:12,919
on outcomes recognize the value that

888
00:33:11,450 --> 00:33:14,690
DevOps is bringing to the organization

889
00:33:12,920 --> 00:33:17,150
be practical and making trade-offs

890
00:33:14,690 --> 00:33:20,450
between perfect and good enough you know

891
00:33:17,150 --> 00:33:22,430
it's we just a case in point you have a

892
00:33:20,450 --> 00:33:24,380
customer who's security team mandated

893
00:33:22,430 --> 00:33:27,020
that all jinkins jobs will be

894
00:33:24,380 --> 00:33:28,430
authenticated and anybody that knows

895
00:33:27,020 --> 00:33:30,350
Jenkins knows you can authenticate the

896
00:33:28,430 --> 00:33:31,970
executors but the jobs are data you

897
00:33:30,350 --> 00:33:33,409
can't authenticate data you can sign

898
00:33:31,970 --> 00:33:34,610
data you know there's other things you

899
00:33:33,410 --> 00:33:37,970
can do but you can't really authenticate

900
00:33:34,610 --> 00:33:40,699
data so they issued a nonsensical decree

901
00:33:37,970 --> 00:33:43,129
that the dev ops teams have no way of

902
00:33:40,700 --> 00:33:45,330
complying that so avoid doing that

903
00:33:43,129 --> 00:33:47,699
devops teen show you understand security

904
00:33:45,330 --> 00:33:49,289
principles that you believe in those but

905
00:33:47,700 --> 00:33:50,909
you know be open to change recognize

906
00:33:49,289 --> 00:33:53,519
that they're required to show compliance

907
00:33:50,909 --> 00:33:55,590
with regulations use established systems

908
00:33:53,519 --> 00:33:57,119
of trust where possible so tie into the

909
00:33:55,590 --> 00:33:59,759
enterprise organizations established

910
00:33:57,119 --> 00:34:01,980
systems for authentication for you know

911
00:33:59,759 --> 00:34:03,629
for those things and then both Identity

912
00:34:01,980 --> 00:34:05,850
Management is a common objective it's a

913
00:34:03,629 --> 00:34:08,279
way of talking about privilege about

914
00:34:05,850 --> 00:34:11,129
over privilege about often you know just

915
00:34:08,280 --> 00:34:12,359
being able to to control access to these

916
00:34:11,129 --> 00:34:15,000
credentials and preventing them from

917
00:34:12,359 --> 00:34:16,230
getting in the wrong hands so thanks I

918
00:34:15,000 --> 00:34:19,918
don't know how I'm doing on time do we

919
00:34:16,230 --> 00:34:23,899
have time for questions or is there five

920
00:34:19,918 --> 00:34:25,440
minutes all right any questions Hey

921
00:34:23,899 --> 00:34:27,719
usually there's somebody in there

922
00:34:25,440 --> 00:34:33,349
another company yeah but what you did

923
00:34:27,719 --> 00:34:33,348
there that could be you know anybody

924
00:34:33,370 --> 00:34:42,589
all right great thank you

925
00:34:37,120 --> 00:34:42,589
[Applause]

