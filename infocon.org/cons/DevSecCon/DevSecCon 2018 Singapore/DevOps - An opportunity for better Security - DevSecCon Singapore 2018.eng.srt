1
00:00:02,480 --> 00:00:05,609
thank you very much good morning

2
00:00:04,290 --> 00:00:07,470
everybody

3
00:00:05,609 --> 00:00:09,990
so the other speakers have kind of been

4
00:00:07,470 --> 00:00:12,149
talking about a shift left and I'm going

5
00:00:09,990 --> 00:00:14,490
to basically try and emphasize that and

6
00:00:12,150 --> 00:00:16,500
make some suggestions about various

7
00:00:14,490 --> 00:00:18,720
things that you can do in your DevOps

8
00:00:16,500 --> 00:00:21,660
pipeline to help improve security but I

9
00:00:18,720 --> 00:00:23,970
think overall DevOps is is really an

10
00:00:21,660 --> 00:00:26,220
opportunity to make security better and

11
00:00:23,970 --> 00:00:28,948
do it in a much more interactive and

12
00:00:26,220 --> 00:00:30,538
much quicker way than has traditionally

13
00:00:28,949 --> 00:00:33,719
been done so I'll talk a little bit

14
00:00:30,539 --> 00:00:35,610
about the new attack surface that most

15
00:00:33,719 --> 00:00:38,550
organizations are exposing themselves to

16
00:00:35,610 --> 00:00:41,280
as they make the transition to DevOps

17
00:00:38,550 --> 00:00:42,959
and if effectively things are changing

18
00:00:41,280 --> 00:00:44,489
quite a bit and a lot of the

19
00:00:42,960 --> 00:00:46,200
vulnerability assessment techniques that

20
00:00:44,489 --> 00:00:48,209
have historically been used I'm not

21
00:00:46,200 --> 00:00:50,670
really capable of addressing the attack

22
00:00:48,210 --> 00:00:52,710
surface as DevOps has implemented very

23
00:00:50,670 --> 00:00:54,899
nice a couple slides on changing

24
00:00:52,710 --> 00:00:56,879
technologies will talk about waterfall

25
00:00:54,899 --> 00:00:59,039
to infinity I just use the word infinity

26
00:00:56,879 --> 00:01:00,570
because typically DevOps and agile

27
00:00:59,039 --> 00:01:02,969
development cycles are represented that

28
00:01:00,570 --> 00:01:06,110
way we'll talk about the increased

29
00:01:02,969 --> 00:01:07,830
security risk possibly that are

30
00:01:06,110 --> 00:01:09,150
implemented by DevOps

31
00:01:07,830 --> 00:01:11,908
then we'll talk about some techniques

32
00:01:09,150 --> 00:01:14,729
you can use by applying specific tools

33
00:01:11,909 --> 00:01:17,700
to various stages of the DevOps pipeline

34
00:01:14,729 --> 00:01:18,960
and these specific tools I'm a vendor

35
00:01:17,700 --> 00:01:20,729
but I'm actually suggesting other

36
00:01:18,960 --> 00:01:23,699
people's tools as well just besides ten

37
00:01:20,729 --> 00:01:26,490
of those tools I wouldn't do that right

38
00:01:23,700 --> 00:01:28,470
and it's an ecosystem guys right it's

39
00:01:26,490 --> 00:01:30,600
not just one vendor solution anymore so

40
00:01:28,470 --> 00:01:32,880
we all respect that so we'll talk about

41
00:01:30,600 --> 00:01:34,798
that and then I'll do a slightly deeper

42
00:01:32,880 --> 00:01:37,170
dive into containers because to me

43
00:01:34,799 --> 00:01:40,680
DevOps and containers are intimately

44
00:01:37,170 --> 00:01:42,360
related so yeah when I was a developer

45
00:01:40,680 --> 00:01:44,280
I'm back in the tin-can days when

46
00:01:42,360 --> 00:01:46,649
everything just ran on iron and things

47
00:01:44,280 --> 00:01:48,780
have changed so much over the past 15 -

48
00:01:46,649 --> 00:01:51,509
20 years from the advent of

49
00:01:48,780 --> 00:01:54,540
virtualization to web applications

50
00:01:51,509 --> 00:01:56,340
everything's a web app now the emergence

51
00:01:54,540 --> 00:01:57,719
of the cloud with the dynamic computing

52
00:01:56,340 --> 00:02:00,360
environments that the cloud brings in

53
00:01:57,719 --> 00:02:04,199
but most significantly in terms of our

54
00:02:00,360 --> 00:02:06,689
conversation the linkage and technology

55
00:02:04,200 --> 00:02:09,479
of containerization which in my opinion

56
00:02:06,689 --> 00:02:11,340
has really taken the world by storm over

57
00:02:09,479 --> 00:02:11,970
the past three - I'd say three to five

58
00:02:11,340 --> 00:02:13,520
years really

59
00:02:11,970 --> 00:02:17,060
but container

60
00:02:13,520 --> 00:02:19,280
and the DevOps methodology are

61
00:02:17,060 --> 00:02:21,910
intimately related and evidence of that

62
00:02:19,280 --> 00:02:25,220
is basically the six vendors out there

63
00:02:21,910 --> 00:02:27,640
tenable included that up basically

64
00:02:25,220 --> 00:02:29,750
trying to give you various forms of

65
00:02:27,640 --> 00:02:32,000
software's that would help you to

66
00:02:29,750 --> 00:02:33,560
understand and analyze your containers

67
00:02:32,000 --> 00:02:36,470
from a vulnerability and risk

68
00:02:33,560 --> 00:02:39,020
perspective so technology is emerged

69
00:02:36,470 --> 00:02:40,790
over time I just want to remind everyone

70
00:02:39,020 --> 00:02:42,710
what the technical word or what the

71
00:02:40,790 --> 00:02:45,950
definition of DevOps is and really

72
00:02:42,710 --> 00:02:48,290
DevOps is nothing but a methodology a

73
00:02:45,950 --> 00:02:50,929
way intended to you to britain reduce

74
00:02:48,290 --> 00:02:53,810
the time from something being committed

75
00:02:50,930 --> 00:02:55,130
to a design change to having that become

76
00:02:53,810 --> 00:02:57,410
available and the integration of

77
00:02:55,130 --> 00:03:00,049
development and operations has really

78
00:02:57,410 --> 00:03:02,840
made this absolutely hundred percent

79
00:03:00,050 --> 00:03:04,850
100% possible but again emphasizing the

80
00:03:02,840 --> 00:03:07,720
point that DevOps toolchains

81
00:03:04,850 --> 00:03:10,010
I must say containers our DevOps but

82
00:03:07,720 --> 00:03:12,020
heavily leans towards a containerized

83
00:03:10,010 --> 00:03:14,929
type of implementation and as I'm

84
00:03:12,020 --> 00:03:17,120
matter-of-fact tenable is essentially

85
00:03:14,930 --> 00:03:18,920
preaching this but we're also eating our

86
00:03:17,120 --> 00:03:20,750
own dog food because our latest

87
00:03:18,920 --> 00:03:23,200
technology which is tenable Dial is

88
00:03:20,750 --> 00:03:26,500
fully and completely implemented using

89
00:03:23,200 --> 00:03:28,970
containerization so if I look at the

90
00:03:26,500 --> 00:03:31,370
attack surface just to illustrate the

91
00:03:28,970 --> 00:03:35,030
point of where containerization has an

92
00:03:31,370 --> 00:03:37,010
impact on on the threat surface

93
00:03:35,030 --> 00:03:38,780
historically if you look down the bottom

94
00:03:37,010 --> 00:03:40,519
when you perform vulnerability

95
00:03:38,780 --> 00:03:43,010
assessments I'd say most organizations

96
00:03:40,520 --> 00:03:44,900
are still at this at this point where

97
00:03:43,010 --> 00:03:47,540
they're probably doing vulnerability

98
00:03:44,900 --> 00:03:49,400
analysis and security analysis in detail

99
00:03:47,540 --> 00:03:51,590
at more or less what amounts to a

100
00:03:49,400 --> 00:03:55,010
somewhat physical layer of physical

101
00:03:51,590 --> 00:03:56,750
level server level desktop level network

102
00:03:55,010 --> 00:03:58,730
infrastructure and of course to some

103
00:03:56,750 --> 00:04:00,470
degree looking at web apps and virtual

104
00:03:58,730 --> 00:04:04,450
machines and mobile laptops were kind of

105
00:04:00,470 --> 00:04:06,920
overlaps but the interesting point is

106
00:04:04,450 --> 00:04:08,630
most organizations at this point that's

107
00:04:06,920 --> 00:04:11,059
not working right most organizations at

108
00:04:08,630 --> 00:04:13,220
this point they are not really doing a

109
00:04:11,060 --> 00:04:15,410
very good job evaluating the

110
00:04:13,220 --> 00:04:17,480
vulnerabilities and risk that are

111
00:04:15,410 --> 00:04:19,070
imposed by the containers themselves as

112
00:04:17,480 --> 00:04:20,780
those containers are actually deployed

113
00:04:19,070 --> 00:04:22,520
and that's because the way you need to

114
00:04:20,779 --> 00:04:23,809
perform the vulnerability assessment is

115
00:04:22,520 --> 00:04:25,490
something like a container

116
00:04:23,810 --> 00:04:27,020
and a security analysis of something

117
00:04:25,490 --> 00:04:28,690
like a container which has the

118
00:04:27,020 --> 00:04:32,180
characteristics of being fairly

119
00:04:28,690 --> 00:04:33,980
lightweight and not living very long

120
00:04:32,180 --> 00:04:36,200
traditional methodologies don't actually

121
00:04:33,980 --> 00:04:38,030
work so this is effectively expanding

122
00:04:36,200 --> 00:04:40,070
your cyber your the attack surface by

123
00:04:38,030 --> 00:04:43,280
which a bad guy can actually get into

124
00:04:40,070 --> 00:04:45,469
your infrastructure so effectively what

125
00:04:43,280 --> 00:04:47,570
one of the messages I hope to convey is

126
00:04:45,470 --> 00:04:50,600
that the ways you need to do this the

127
00:04:47,570 --> 00:04:51,860
methodologies you need to assess your

128
00:04:50,600 --> 00:04:54,290
cyber expose or risk

129
00:04:51,860 --> 00:04:55,850
need to change to adapt to the changing

130
00:04:54,290 --> 00:05:02,030
technology landscape that we all find

131
00:04:55,850 --> 00:05:05,810
ourselves in at this point in time it

132
00:05:02,030 --> 00:05:08,989
adds a lot to the cyber exposure gap at

133
00:05:05,810 --> 00:05:10,480
this point in time of organizations and

134
00:05:08,990 --> 00:05:13,430
these are very recent numbers

135
00:05:10,480 --> 00:05:15,800
organizations that are leveraging

136
00:05:13,430 --> 00:05:18,050
containers only about 18 percent of

137
00:05:15,800 --> 00:05:20,090
these organizations actually do any kind

138
00:05:18,050 --> 00:05:22,520
of container scanning to assess the

139
00:05:20,090 --> 00:05:25,010
containers for vulnerabilities and risk

140
00:05:22,520 --> 00:05:28,150
and that can be pre deployment or post

141
00:05:25,010 --> 00:05:30,320
deployment a type of scanning

142
00:05:28,150 --> 00:05:35,030
organizations ability is to assess cyber

143
00:05:30,320 --> 00:05:36,590
security risk are fairly low 52% in 57

144
00:05:35,030 --> 00:05:38,479
percent I think probably the most

145
00:05:36,590 --> 00:05:40,460
interesting statistic on this slide

146
00:05:38,479 --> 00:05:43,070
though is the average number of

147
00:05:40,460 --> 00:05:45,340
vulnerabilities in an official docker

148
00:05:43,070 --> 00:05:47,750
hub image is about fifteen or sixteen

149
00:05:45,340 --> 00:05:49,580
for an official docker hub image and

150
00:05:47,750 --> 00:05:50,960
community images are much much much

151
00:05:49,580 --> 00:05:54,320
worse since nobody really cares that

152
00:05:50,960 --> 00:05:55,969
much forty forty of vulnerabilities per

153
00:05:54,320 --> 00:05:58,729
image of things that you might pull off

154
00:05:55,970 --> 00:06:00,669
of docker hub and as we were discussing

155
00:05:58,729 --> 00:06:02,450
earlier with the previous speakers

156
00:06:00,669 --> 00:06:04,549
developers will grab whatever they can

157
00:06:02,450 --> 00:06:07,280
to make the jobs easy so there might be

158
00:06:04,550 --> 00:06:09,080
on a lot of these community images in

159
00:06:07,280 --> 00:06:11,690
your environment that you don't

160
00:06:09,080 --> 00:06:14,240
necessarily know about containerization

161
00:06:11,690 --> 00:06:16,940
is also exploding over the past several

162
00:06:14,240 --> 00:06:19,250
years you know forty percent over last

163
00:06:16,940 --> 00:06:21,469
year eight billion different container

164
00:06:19,250 --> 00:06:23,210
downloads half a million doctor eyes

165
00:06:21,470 --> 00:06:25,729
applications that people are leveraging

166
00:06:23,210 --> 00:06:28,789
in docker hub at this point and again

167
00:06:25,729 --> 00:06:31,190
fifteen point nine vulnerabilities 40.5

168
00:06:28,789 --> 00:06:32,719
vulnerabilities and only eighteen

169
00:06:31,190 --> 00:06:33,860
percent of organizations are actually

170
00:06:32,720 --> 00:06:36,200
looking and what's inside these

171
00:06:33,860 --> 00:06:38,990
containers to assess the risk that these

172
00:06:36,200 --> 00:06:40,880
Tanner's million poles okay so we've got

173
00:06:38,990 --> 00:06:42,560
that issue lots and lots of these things

174
00:06:40,880 --> 00:06:46,760
everywhere and it's not stopping anytime

175
00:06:42,560 --> 00:06:49,880
soon which is actually good more than

176
00:06:46,760 --> 00:06:53,270
applications basically raise the stakes

177
00:06:49,880 --> 00:06:55,610
with with additional additional risk the

178
00:06:53,270 --> 00:07:00,740
point of this slide is really this fact

179
00:06:55,610 --> 00:07:03,710
here on average about 70% of the code in

180
00:07:00,740 --> 00:07:05,360
most loan applications is something that

181
00:07:03,710 --> 00:07:08,690
you're leveraging from someplace else

182
00:07:05,360 --> 00:07:10,600
and again it may end up being kind of a

183
00:07:08,690 --> 00:07:12,830
black box

184
00:07:10,600 --> 00:07:15,890
everybody loves open source including

185
00:07:12,830 --> 00:07:18,109
myself but who's maintaining the open

186
00:07:15,890 --> 00:07:19,820
source and how much risk is this open

187
00:07:18,110 --> 00:07:22,670
source that you're pulling into your

188
00:07:19,820 --> 00:07:25,310
into your build process exposing you to

189
00:07:22,670 --> 00:07:28,550
whether it's a library whether it's

190
00:07:25,310 --> 00:07:30,650
source code by itself or whether it's

191
00:07:28,550 --> 00:07:33,620
already a containerized application

192
00:07:30,650 --> 00:07:35,810
right unless you look at this stuff as

193
00:07:33,620 --> 00:07:37,610
you're integrating it into your software

194
00:07:35,810 --> 00:07:40,190
you're not really going to have much of

195
00:07:37,610 --> 00:07:42,560
an assessment or much of an idea of the

196
00:07:40,190 --> 00:07:46,010
risk that these various components are

197
00:07:42,560 --> 00:07:50,300
bringing you into in the final key point

198
00:07:46,010 --> 00:07:53,870
is what's the KPI of a developer right

199
00:07:50,300 --> 00:07:55,700
I think the KPI of a developer is get

200
00:07:53,870 --> 00:07:57,770
your stuff done as fast as possible

201
00:07:55,700 --> 00:08:00,800
make it work move on to the next thing

202
00:07:57,770 --> 00:08:04,070
but is security one of the KPIs of most

203
00:08:00,800 --> 00:08:06,650
developers if you begin to integrate the

204
00:08:04,070 --> 00:08:10,099
security testing into the DevOps

205
00:08:06,650 --> 00:08:11,479
pipeline it implicitly makes security

206
00:08:10,100 --> 00:08:13,010
since it's one of the tests when the

207
00:08:11,480 --> 00:08:15,640
quality points one a touch points

208
00:08:13,010 --> 00:08:18,170
whether the gateways it implicitly makes

209
00:08:15,640 --> 00:08:19,550
security one of the KPIs of your

210
00:08:18,170 --> 00:08:21,650
developers because they have to pass

211
00:08:19,550 --> 00:08:23,120
that test in order to move on to the

212
00:08:21,650 --> 00:08:25,520
next phase in order to push the thing

213
00:08:23,120 --> 00:08:27,620
into production for example if you don't

214
00:08:25,520 --> 00:08:30,260
end up shifting left if you don't end up

215
00:08:27,620 --> 00:08:32,990
putting security testing deeper into the

216
00:08:30,260 --> 00:08:34,370
DevOps pipeline to the left then what's

217
00:08:32,990 --> 00:08:36,979
going to end up happening is you're not

218
00:08:34,370 --> 00:08:38,659
really going to have much of a much of

219
00:08:36,979 --> 00:08:41,000
an impact on the quality of security and

220
00:08:38,659 --> 00:08:43,848
DevOps ech is going to continue to be a

221
00:08:41,000 --> 00:08:45,860
fantasy so you need to make it a KPI of

222
00:08:43,849 --> 00:08:47,960
the developers that the security testing

223
00:08:45,860 --> 00:08:48,490
is fully integrated and tightly part of

224
00:08:47,960 --> 00:08:52,029
the

225
00:08:48,490 --> 00:08:53,680
Bob's pipeline so generally most

226
00:08:52,029 --> 00:08:56,740
organizations are taking notice of this

227
00:08:53,680 --> 00:08:58,979
and and again this is a quote from James

228
00:08:56,740 --> 00:09:01,750
Ford who is the chief strategic

229
00:08:58,980 --> 00:09:03,399
architect for ADP he's not gonna trust

230
00:09:01,750 --> 00:09:05,380
anybody he kind of wants to do a little

231
00:09:03,399 --> 00:09:07,270
bit more of the verification himself in

232
00:09:05,380 --> 00:09:11,470
order to ensure that his applications

233
00:09:07,270 --> 00:09:13,149
are secure you've seen this picture a

234
00:09:11,470 --> 00:09:15,520
dozen times so far today I'm not going

235
00:09:13,149 --> 00:09:17,529
to amplify it but this is I think in a

236
00:09:15,520 --> 00:09:20,199
law of cases the state of affairs the

237
00:09:17,529 --> 00:09:23,520
poor guy of security is up to his knees

238
00:09:20,200 --> 00:09:27,339
in the rainbow of the of the DevOps

239
00:09:23,520 --> 00:09:30,100
lifecycle so this is kind of not the

240
00:09:27,339 --> 00:09:31,540
coolest situation to be in and this

241
00:09:30,100 --> 00:09:35,529
picture is not funny anymore because

242
00:09:31,540 --> 00:09:37,480
you've seen it too many times today so

243
00:09:35,529 --> 00:09:39,160
we have the traditional separation of

244
00:09:37,480 --> 00:09:41,279
development and ops the traditional

245
00:09:39,160 --> 00:09:45,189
stovepipe environment that we've all

246
00:09:41,279 --> 00:09:47,260
came in to know and love I will say if

247
00:09:45,190 --> 00:09:49,480
you look at the traditional Stone five

248
00:09:47,260 --> 00:09:51,399
development methodology I think if you

249
00:09:49,480 --> 00:09:53,140
think about the opportunity where DevOps

250
00:09:51,399 --> 00:09:55,899
breaks everything up and puts everything

251
00:09:53,140 --> 00:09:58,630
into very small containerized very small

252
00:09:55,899 --> 00:10:01,360
parts that are easily digestible I think

253
00:09:58,630 --> 00:10:04,570
it's a lot easier to get security into

254
00:10:01,360 --> 00:10:06,339
the DevOps pipeline early than it is to

255
00:10:04,570 --> 00:10:07,899
get it in to get security into a

256
00:10:06,339 --> 00:10:09,779
traditional stove-piped

257
00:10:07,899 --> 00:10:12,880
environment because of the fact that

258
00:10:09,779 --> 00:10:14,529
everything is agile and the process is

259
00:10:12,880 --> 00:10:16,930
continuous and you're always making a

260
00:10:14,529 --> 00:10:20,140
perpetual state of change and the

261
00:10:16,930 --> 00:10:23,140
process is supported by a set of tools

262
00:10:20,140 --> 00:10:25,209
that make it somewhat possible for you

263
00:10:23,140 --> 00:10:26,550
to inject security into the DevOps

264
00:10:25,209 --> 00:10:28,930
process overall

265
00:10:26,550 --> 00:10:31,689
okay so speeding things up we've become

266
00:10:28,930 --> 00:10:33,430
a lot more agile than we were with the

267
00:10:31,690 --> 00:10:35,890
stovepipe development methodology that

268
00:10:33,430 --> 00:10:38,649
we've been using until maybe the past

269
00:10:35,890 --> 00:10:41,380
seven to eight years so things are at

270
00:10:38,649 --> 00:10:44,050
least getting a little better there but

271
00:10:41,380 --> 00:10:46,360
again if you remember the original quote

272
00:10:44,050 --> 00:10:48,520
the purpose of develops is to allow

273
00:10:46,360 --> 00:10:50,410
changes to be implemented really fast

274
00:10:48,520 --> 00:10:52,630
that is brought about by the integration

275
00:10:50,410 --> 00:10:55,689
of development and operation into the

276
00:10:52,630 --> 00:10:58,189
into the whole process overall

277
00:10:55,690 --> 00:11:00,770
and of course we all know the way that

278
00:10:58,190 --> 00:11:02,060
software's built this build is a lot

279
00:11:00,770 --> 00:11:05,030
different too and this is an opportunity

280
00:11:02,060 --> 00:11:06,859
and a problem I think it's more of an

281
00:11:05,030 --> 00:11:08,360
opportunity than a problem at the same

282
00:11:06,860 --> 00:11:11,570
time because the transition to

283
00:11:08,360 --> 00:11:15,220
microservices architectures to me means

284
00:11:11,570 --> 00:11:17,600
that if a component of your application

285
00:11:15,220 --> 00:11:20,060
does have some kind of security issue

286
00:11:17,600 --> 00:11:23,060
it's a lot easier to get that security

287
00:11:20,060 --> 00:11:24,979
issue resolved because of the fact that

288
00:11:23,060 --> 00:11:26,989
you're only replacing a very small part

289
00:11:24,980 --> 00:11:29,240
of the subsystem and you don't need to

290
00:11:26,990 --> 00:11:31,160
replace or rebuild the entire

291
00:11:29,240 --> 00:11:33,680
application so it's a lot easier to

292
00:11:31,160 --> 00:11:37,280
implement a change either a security

293
00:11:33,680 --> 00:11:39,709
change or a functional change as a

294
00:11:37,280 --> 00:11:42,740
result of the transition to to

295
00:11:39,710 --> 00:11:45,560
micro-services architecture so again the

296
00:11:42,740 --> 00:11:47,420
leverage leveraging containers the

297
00:11:45,560 --> 00:11:49,369
ability to change part of the

298
00:11:47,420 --> 00:11:50,780
application very quickly and simply

299
00:11:49,370 --> 00:11:53,000
without having to redo the whole

300
00:11:50,780 --> 00:11:56,600
application I think is a huge a huge

301
00:11:53,000 --> 00:11:58,370
benefit however there are some issues if

302
00:11:56,600 --> 00:12:00,140
you look at how you would perform

303
00:11:58,370 --> 00:12:01,880
vulnerability assessment on an

304
00:12:00,140 --> 00:12:04,310
application that's built with containers

305
00:12:01,880 --> 00:12:06,140
because containers are lightweight

306
00:12:04,310 --> 00:12:09,459
things they don't have a necessary

307
00:12:06,140 --> 00:12:12,920
baggage in them it means that

308
00:12:09,460 --> 00:12:14,180
traditional security assessments using

309
00:12:12,920 --> 00:12:16,819
automated tools traditional

310
00:12:14,180 --> 00:12:19,160
vulnerability assessments fundamentally

311
00:12:16,820 --> 00:12:20,420
won't work with a container for several

312
00:12:19,160 --> 00:12:23,120
reasons one of the reasons is the

313
00:12:20,420 --> 00:12:24,920
containers aren't really smart enough to

314
00:12:23,120 --> 00:12:28,580
allow you to even begin to use a tool

315
00:12:24,920 --> 00:12:31,520
for example if I try to scan or scan a

316
00:12:28,580 --> 00:12:33,110
container with something like necess it

317
00:12:31,520 --> 00:12:35,329
ain't going to work because necess

318
00:12:33,110 --> 00:12:36,890
requires SSH or SSL you have to log into

319
00:12:35,330 --> 00:12:38,810
the thing in a container itself doesn't

320
00:12:36,890 --> 00:12:40,280
have the ability to let you even do that

321
00:12:38,810 --> 00:12:42,800
so you can't perform a vulnerability

322
00:12:40,280 --> 00:12:45,260
assessment of a container using a

323
00:12:42,800 --> 00:12:47,050
traditional traditional methodology one

324
00:12:45,260 --> 00:12:49,250
thing is true a second thing is

325
00:12:47,050 --> 00:12:51,370
containers typically have a very short

326
00:12:49,250 --> 00:12:54,920
lifespan everybody in this room knows

327
00:12:51,370 --> 00:12:57,560
the analogy probably of a cattle versus

328
00:12:54,920 --> 00:12:59,510
a pet a containers a cattle it does this

329
00:12:57,560 --> 00:13:01,790
job then you shoot it and it's

330
00:12:59,510 --> 00:13:03,380
instantiate a new container whereas the

331
00:13:01,790 --> 00:13:05,120
traditional applications more like a pet

332
00:13:03,380 --> 00:13:06,620
the traditional

333
00:13:05,120 --> 00:13:08,060
when I look applications more like a pet

334
00:13:06,620 --> 00:13:09,890
you keep it around a lot longer the

335
00:13:08,060 --> 00:13:11,390
point is the short lifespan of a

336
00:13:09,890 --> 00:13:13,279
container means that they're not going

337
00:13:11,390 --> 00:13:16,400
to be living long enough for you to be

338
00:13:13,279 --> 00:13:18,080
able to perform a vulnerability scan on

339
00:13:16,400 --> 00:13:19,699
that container because the chances out

340
00:13:18,080 --> 00:13:22,279
of the lifetime of the container is

341
00:13:19,700 --> 00:13:23,570
shorter than the window between scans so

342
00:13:22,279 --> 00:13:27,500
the amount of time that can elapse

343
00:13:23,570 --> 00:13:28,910
between a scanning container and the

344
00:13:27,500 --> 00:13:30,980
amount of time that elapses between

345
00:13:28,910 --> 00:13:32,020
scans and a life of a container are

346
00:13:30,980 --> 00:13:34,310
completely different

347
00:13:32,020 --> 00:13:35,750
again second point you can't use

348
00:13:34,310 --> 00:13:36,800
traditional vulnerability management

349
00:13:35,750 --> 00:13:39,110
technologies I've already talked about

350
00:13:36,800 --> 00:13:40,670
that and the Third Point is generally

351
00:13:39,110 --> 00:13:41,990
containers aren't built in such a way

352
00:13:40,670 --> 00:13:44,209
that you can't even patch them anyway

353
00:13:41,990 --> 00:13:46,339
you've got to go back to the we build it

354
00:13:44,210 --> 00:13:48,380
push it back out into the repository and

355
00:13:46,339 --> 00:13:49,940
Riaan Stan she ate it so traditional

356
00:13:48,380 --> 00:13:51,290
vulnerability assessment technologies

357
00:13:49,940 --> 00:13:53,060
traditional security analysis

358
00:13:51,290 --> 00:13:54,560
technologies fundamentally don't work

359
00:13:53,060 --> 00:13:56,329
with containers which means you need to

360
00:13:54,560 --> 00:13:59,150
change the way you do this when

361
00:13:56,330 --> 00:14:00,110
containers are a part of the picture so

362
00:13:59,150 --> 00:14:01,189
I'm going to go and I'm going to

363
00:14:00,110 --> 00:14:05,720
effectively show you

364
00:14:01,190 --> 00:14:07,940
I took the infinity sign and I kind of

365
00:14:05,720 --> 00:14:11,690
flattened it out into the various steps

366
00:14:07,940 --> 00:14:14,589
that a part of the DevOps process plan

367
00:14:11,690 --> 00:14:14,589
code tests

368
00:14:15,450 --> 00:14:21,010
release deploy operate and maintain over

369
00:14:19,360 --> 00:14:22,690
time these are the same things that were

370
00:14:21,010 --> 00:14:23,590
in my way in fairly sign that again

371
00:14:22,690 --> 00:14:25,630
everyone in this room was probably

372
00:14:23,590 --> 00:14:27,760
seeing half a million times so we

373
00:14:25,630 --> 00:14:30,250
flatten out the process we then put in

374
00:14:27,760 --> 00:14:32,260
the various tools that support the

375
00:14:30,250 --> 00:14:36,040
various steps of the process from source

376
00:14:32,260 --> 00:14:37,600
control to build to the image registry

377
00:14:36,040 --> 00:14:40,420
part where the images of containers

378
00:14:37,600 --> 00:14:42,640
might live to the containerization host

379
00:14:40,420 --> 00:14:44,349
and to the orchestration component that

380
00:14:42,640 --> 00:14:47,580
basically will fire off the containers

381
00:14:44,350 --> 00:14:50,650
as is when required and on top of that

382
00:14:47,580 --> 00:14:54,460
the whole point of this is is that the

383
00:14:50,650 --> 00:14:56,829
earlier in the development cycle that I

384
00:14:54,460 --> 00:14:59,050
can implement any kind of testing the

385
00:14:56,830 --> 00:15:00,970
better off everybody is going to be so

386
00:14:59,050 --> 00:15:03,010
when it we all talk about the shift left

387
00:15:00,970 --> 00:15:05,290
and there are many opportunities and

388
00:15:03,010 --> 00:15:09,790
many different types of tools that can

389
00:15:05,290 --> 00:15:11,680
be used to help shift the security

390
00:15:09,790 --> 00:15:13,870
problem to the left resulting in a

391
00:15:11,680 --> 00:15:17,890
higher quality and more secure product

392
00:15:13,870 --> 00:15:19,870
at the point of deployment and also

393
00:15:17,890 --> 00:15:21,910
resulting in the ability to detect

394
00:15:19,870 --> 00:15:23,980
things early and one of the great things

395
00:15:21,910 --> 00:15:26,620
about detecting things early is it

396
00:15:23,980 --> 00:15:31,570
actually has a very very significant

397
00:15:26,620 --> 00:15:33,970
cost benefit costs are reduced by at

398
00:15:31,570 --> 00:15:37,540
least 85 percent what vulnerabilities

399
00:15:33,970 --> 00:15:38,950
are detected before deployment and part

400
00:15:37,540 --> 00:15:40,449
of that is probably the fact that the

401
00:15:38,950 --> 00:15:43,870
vulnerabilities that are exploited are

402
00:15:40,450 --> 00:15:45,580
extremely costly it helps to reduce

403
00:15:43,870 --> 00:15:48,580
false positives and I think one of the

404
00:15:45,580 --> 00:15:50,410
biggest things is that there's a big

405
00:15:48,580 --> 00:15:52,660
improvement or perceived improvement in

406
00:15:50,410 --> 00:15:54,250
overall software quality if you catch

407
00:15:52,660 --> 00:15:56,620
these things earlier in the development

408
00:15:54,250 --> 00:15:58,750
cycle as opposed to later in development

409
00:15:56,620 --> 00:16:00,970
cycles so catching things early actually

410
00:15:58,750 --> 00:16:05,020
has a lot of very besides security it

411
00:16:00,970 --> 00:16:07,060
also has a financial benefit so now

412
00:16:05,020 --> 00:16:10,449
we're gonna overlay we've got the the

413
00:16:07,060 --> 00:16:12,699
DevOps pipeline we've got the various

414
00:16:10,450 --> 00:16:14,800
components that are used to support the

415
00:16:12,700 --> 00:16:16,720
DeVos pipeline and now what we can do is

416
00:16:14,800 --> 00:16:19,150
overlay some testing that you can

417
00:16:16,720 --> 00:16:22,150
perform at each step of the DevOps

418
00:16:19,150 --> 00:16:23,209
pipeline in order to help you to detect

419
00:16:22,150 --> 00:16:25,490
the

420
00:16:23,210 --> 00:16:26,840
security issues fairly early and I said

421
00:16:25,490 --> 00:16:28,970
I'm not going to talk about any specific

422
00:16:26,840 --> 00:16:30,080
vendors I'm not going to just pretend

423
00:16:28,970 --> 00:16:33,980
tenable the only company on the planet

424
00:16:30,080 --> 00:16:36,170
that can do this but it effectively is

425
00:16:33,980 --> 00:16:38,780
it's a security is an ecosystem and you

426
00:16:36,170 --> 00:16:40,189
need to get the best tool possible to

427
00:16:38,780 --> 00:16:41,990
support what your security problem is I

428
00:16:40,190 --> 00:16:44,570
hope that that message is also conveyed

429
00:16:41,990 --> 00:16:46,880
here so if I look at pre commit and

430
00:16:44,570 --> 00:16:48,860
commit time testing what can I do

431
00:16:46,880 --> 00:16:50,240
earlier in the development cycle as

432
00:16:48,860 --> 00:16:53,900
early as possible

433
00:16:50,240 --> 00:16:56,180
well one of the things I can do is maybe

434
00:16:53,900 --> 00:16:59,660
do some source code analysis to catch

435
00:16:56,180 --> 00:17:02,089
those one-off problems to catch any poor

436
00:16:59,660 --> 00:17:05,000
coding practices that might be taking

437
00:17:02,090 --> 00:17:06,410
place as the developers began to write

438
00:17:05,000 --> 00:17:08,780
their code the independent of the

439
00:17:06,410 --> 00:17:10,339
specific language so doing that and

440
00:17:08,780 --> 00:17:13,339
making sure that some kind of source

441
00:17:10,339 --> 00:17:15,560
code inspection tool is included as part

442
00:17:13,339 --> 00:17:18,020
of your DevOps methodology I think is a

443
00:17:15,560 --> 00:17:20,240
very important thing to begin to

444
00:17:18,020 --> 00:17:22,339
implement so again shifting left 'game

445
00:17:20,240 --> 00:17:23,780
for the very basic things of doing some

446
00:17:22,339 --> 00:17:26,060
sort of source code inspection

447
00:17:23,780 --> 00:17:27,709
I think this other thing is coming up

448
00:17:26,060 --> 00:17:30,830
quite a bit and that's dependency

449
00:17:27,709 --> 00:17:34,670
checking so I made a point earlier about

450
00:17:30,830 --> 00:17:36,199
the heavy use of open source software

451
00:17:34,670 --> 00:17:38,000
projects and I think some of the other

452
00:17:36,200 --> 00:17:39,650
people here have and no one is having a

453
00:17:38,000 --> 00:17:41,870
go at open source we all know it we all

454
00:17:39,650 --> 00:17:44,600
love it but who's maintaining an open

455
00:17:41,870 --> 00:17:47,120
source and how deep is a dependency tree

456
00:17:44,600 --> 00:17:48,830
and what other components are being

457
00:17:47,120 --> 00:17:51,139
brought in that may include

458
00:17:48,830 --> 00:17:52,850
vulnerabilities as part of your part of

459
00:17:51,140 --> 00:17:54,950
your leveraging open source part of that

460
00:17:52,850 --> 00:17:57,949
70% you get from somewhere else how

461
00:17:54,950 --> 00:17:58,610
vulnerable is that but performing a pre

462
00:17:57,950 --> 00:18:02,300
build

463
00:17:58,610 --> 00:18:05,709
pre link or pre container generation

464
00:18:02,300 --> 00:18:07,520
check on the dependencies and the

465
00:18:05,710 --> 00:18:09,110
vulnerabilities of those dependencies

466
00:18:07,520 --> 00:18:11,270
might come might bring into the picture

467
00:18:09,110 --> 00:18:12,979
I think is something else that helps you

468
00:18:11,270 --> 00:18:17,240
to get a higher quality and more secure

469
00:18:12,980 --> 00:18:20,540
software piece at the time of pre build

470
00:18:17,240 --> 00:18:23,030
pre build pre pre commit so performing

471
00:18:20,540 --> 00:18:24,500
this early is very important and these

472
00:18:23,030 --> 00:18:26,480
two things will catch an awful lot of

473
00:18:24,500 --> 00:18:27,790
problems before the containers actually

474
00:18:26,480 --> 00:18:30,290
deployed

475
00:18:27,790 --> 00:18:32,840
we look at build time testing these are

476
00:18:30,290 --> 00:18:34,970
some other things that you might want to

477
00:18:32,840 --> 00:18:37,159
do at the point at which the build and

478
00:18:34,970 --> 00:18:38,990
the point of which the initial images is

479
00:18:37,160 --> 00:18:40,640
actually generated one of the things

480
00:18:38,990 --> 00:18:43,480
down here I think that a lot of people

481
00:18:40,640 --> 00:18:46,520
may not do is some kind of an API

482
00:18:43,480 --> 00:18:48,380
vulnerability check so looking at the

483
00:18:46,520 --> 00:18:51,110
API for a security risk of

484
00:18:48,380 --> 00:18:52,100
vulnerabilities the specific tool were

485
00:18:51,110 --> 00:18:54,040
looking at there something called

486
00:18:52,100 --> 00:18:57,169
postman the guy leaning over like that

487
00:18:54,040 --> 00:19:00,620
which is one of the more more viable

488
00:18:57,170 --> 00:19:03,920
tools performing some kind of a web

489
00:19:00,620 --> 00:19:05,989
application assessment early before the

490
00:19:03,920 --> 00:19:07,760
image is put into production is

491
00:19:05,990 --> 00:19:09,560
something else that needs to be

492
00:19:07,760 --> 00:19:11,540
performed I think that's going to also

493
00:19:09,560 --> 00:19:13,250
be something that's done continuously

494
00:19:11,540 --> 00:19:14,870
then at this point you're kind of

495
00:19:13,250 --> 00:19:18,400
building a container so I think looking

496
00:19:14,870 --> 00:19:20,330
at the container as an entity by itself

497
00:19:18,400 --> 00:19:21,620
independent of the other checks that

498
00:19:20,330 --> 00:19:22,970
you've done because you're pulling in

499
00:19:21,620 --> 00:19:25,219
stuff from all over the place when you

500
00:19:22,970 --> 00:19:27,710
finally build a container out looking at

501
00:19:25,220 --> 00:19:29,300
the container and assessing that

502
00:19:27,710 --> 00:19:31,310
container for vulnerabilities and the

503
00:19:29,300 --> 00:19:33,379
presence of malware I think is something

504
00:19:31,310 --> 00:19:36,260
else that could be done in a great shift

505
00:19:33,380 --> 00:19:39,290
left at Build time and a test time in

506
00:19:36,260 --> 00:19:41,540
order to assure that the container

507
00:19:39,290 --> 00:19:44,149
itself is invulnerable before you push

508
00:19:41,540 --> 00:19:46,820
into production so now if we look at

509
00:19:44,150 --> 00:19:50,450
release time and deploy time a couple

510
00:19:46,820 --> 00:19:53,030
more checks that I think ought to be put

511
00:19:50,450 --> 00:19:54,530
in I think that the web application

512
00:19:53,030 --> 00:19:56,480
assessment needs to continue to take

513
00:19:54,530 --> 00:19:57,830
place container of our mobility

514
00:19:56,480 --> 00:19:59,270
assessment is something else that needs

515
00:19:57,830 --> 00:20:01,669
to continue to take place the thing

516
00:19:59,270 --> 00:20:03,980
we're adding here are security checks on

517
00:20:01,670 --> 00:20:05,390
the overall platform so obviously the

518
00:20:03,980 --> 00:20:07,430
container is going to have to live on

519
00:20:05,390 --> 00:20:09,260
something we're talking about performing

520
00:20:07,430 --> 00:20:11,540
some kind of security analysis of

521
00:20:09,260 --> 00:20:14,060
vulnerability assessment on the platform

522
00:20:11,540 --> 00:20:16,550
that is supporting the execution

523
00:20:14,060 --> 00:20:18,889
environment for the containers at this

524
00:20:16,550 --> 00:20:22,430
point these are release and deploy time

525
00:20:18,890 --> 00:20:25,040
tests and the final step in the whole

526
00:20:22,430 --> 00:20:27,110
picture is what I like to talk about is

527
00:20:25,040 --> 00:20:28,760
continuous operational test so fine

528
00:20:27,110 --> 00:20:32,238
everything's great today that the

529
00:20:28,760 --> 00:20:35,129
developer pushes the container into

530
00:20:32,239 --> 00:20:37,139
into the execution environment into

531
00:20:35,129 --> 00:20:39,629
production but what happens after that

532
00:20:37,139 --> 00:20:41,789
container is a week old or month old if

533
00:20:39,629 --> 00:20:44,369
it doesn't change how vulnerable T's

534
00:20:41,789 --> 00:20:46,769
been disclosed that would impact the

535
00:20:44,369 --> 00:20:49,619
security of that specific container so

536
00:20:46,769 --> 00:20:52,649
the message here is that once you push

537
00:20:49,619 --> 00:20:55,220
these things into production you need to

538
00:20:52,649 --> 00:20:57,090
continuously assess them for

539
00:20:55,220 --> 00:21:00,149
vulnerabilities that may have emerged

540
00:20:57,090 --> 00:21:02,668
since the time at which the initial

541
00:21:00,149 --> 00:21:05,459
container image was generated so

542
00:21:02,669 --> 00:21:07,859
continuous assessment of the platform

543
00:21:05,460 --> 00:21:10,529
itself of the web application itself if

544
00:21:07,859 --> 00:21:12,509
it's a web-based application and of the

545
00:21:10,529 --> 00:21:14,460
container image itself doing it all the

546
00:21:12,509 --> 00:21:15,960
time looking for new vulnerabilities or

547
00:21:14,460 --> 00:21:17,549
things that may have cropped in since

548
00:21:15,960 --> 00:21:18,749
the thing was initially published is

549
00:21:17,549 --> 00:21:23,519
something else that I think is

550
00:21:18,749 --> 00:21:25,859
fundamentally important understanding

551
00:21:23,519 --> 00:21:28,499
the impact that various layers might

552
00:21:25,859 --> 00:21:29,908
have on a container is also important

553
00:21:28,499 --> 00:21:31,499
and this is I think important in terms

554
00:21:29,909 --> 00:21:32,669
of reducing false positives because

555
00:21:31,499 --> 00:21:33,899
everyone who knows how containers are

556
00:21:32,669 --> 00:21:36,359
built knows as a layer layer layer layer

557
00:21:33,899 --> 00:21:39,359
it's possible for an upper layer to

558
00:21:36,359 --> 00:21:40,710
supersede a lower layer and render

559
00:21:39,359 --> 00:21:43,619
vulnerabilities that are in that lower

560
00:21:40,710 --> 00:21:45,330
layer irrelevant because the upper layer

561
00:21:43,619 --> 00:21:47,849
basically blocks access to lower layer

562
00:21:45,330 --> 00:21:49,918
so the butter of the container

563
00:21:47,849 --> 00:21:50,939
assessment technology to use probably

564
00:21:49,919 --> 00:21:53,009
ought to be able to have some

565
00:21:50,940 --> 00:21:56,789
fundamental understanding of the various

566
00:21:53,009 --> 00:21:57,630
layers that are part of part of the of

567
00:21:56,789 --> 00:22:00,250
the container

568
00:21:57,630 --> 00:22:03,039
and again I mentioned it's already

569
00:22:00,250 --> 00:22:05,950
continuous monitoring of non production

570
00:22:03,039 --> 00:22:07,658
or production containers automatically

571
00:22:05,950 --> 00:22:09,789
retest as new vulnerabilities are

572
00:22:07,659 --> 00:22:12,940
disclosed because there's gonna be new

573
00:22:09,789 --> 00:22:15,190
signatures new vulnerability assessment

574
00:22:12,940 --> 00:22:20,520
things push down into containers to

575
00:22:15,190 --> 00:22:22,630
understand that we will have that and

576
00:22:20,520 --> 00:22:24,340
performing it again continuously along

577
00:22:22,630 --> 00:22:25,980
with the other things I talked about is

578
00:22:24,340 --> 00:22:28,449
something I think that's pretty

579
00:22:25,980 --> 00:22:30,100
significant so I'm just gonna kind of

580
00:22:28,450 --> 00:22:31,480
graphically tie everything I've been

581
00:22:30,100 --> 00:22:33,730
saying together and probably a more

582
00:22:31,480 --> 00:22:36,850
simple diagram that I think will make a

583
00:22:33,730 --> 00:22:38,169
lot of sense to everybody so if I lay

584
00:22:36,850 --> 00:22:39,219
out the process of what I'm talking

585
00:22:38,169 --> 00:22:41,980
about in terms of assessing

586
00:22:39,220 --> 00:22:44,399
containerized or container images on the

587
00:22:41,980 --> 00:22:46,690
left side I've got the build tools I

588
00:22:44,399 --> 00:22:48,520
have the ability to take container

589
00:22:46,690 --> 00:22:49,960
images from public registries which have

590
00:22:48,520 --> 00:22:53,049
unknown vulnerabilities remember that

591
00:22:49,960 --> 00:22:56,260
average of 40 40 vulnerabilities per

592
00:22:53,049 --> 00:23:00,460
container that we had together put both

593
00:22:56,260 --> 00:23:01,809
into the registry perform the build the

594
00:23:00,460 --> 00:23:05,710
orchestration platform for example

595
00:23:01,809 --> 00:23:11,049
kubernetes will fundamentally deploy as

596
00:23:05,710 --> 00:23:12,520
required onto the onto the platform the

597
00:23:11,049 --> 00:23:14,918
thing here I think that's another

598
00:23:12,520 --> 00:23:16,750
important attribute that might be

599
00:23:14,919 --> 00:23:18,220
desirable if you're doing some

600
00:23:16,750 --> 00:23:20,399
continuous monitoring of the containers

601
00:23:18,220 --> 00:23:23,770
would be to have some kind of a policy

602
00:23:20,399 --> 00:23:27,459
that would if the container is in the

603
00:23:23,770 --> 00:23:30,010
registry waiting to be deployed and if

604
00:23:27,460 --> 00:23:32,140
that container has a vulnerability or is

605
00:23:30,010 --> 00:23:37,210
exposing you to some kind of risk that

606
00:23:32,140 --> 00:23:39,130
is untenable no pun intended a policy

607
00:23:37,210 --> 00:23:42,039
automatic policy should be available to

608
00:23:39,130 --> 00:23:44,470
block that container that puts you at

609
00:23:42,039 --> 00:23:45,850
risk from actually being deployed at the

610
00:23:44,470 --> 00:23:47,260
time the orchestration wants to

611
00:23:45,850 --> 00:23:49,959
instantiate that so that would need to

612
00:23:47,260 --> 00:23:51,250
be coupled with some kind of an alert to

613
00:23:49,960 --> 00:23:53,230
the development team which is a security

614
00:23:51,250 --> 00:23:55,929
team that something's wrong and needs to

615
00:23:53,230 --> 00:23:57,520
be fixed so implementing a policy at the

616
00:23:55,929 --> 00:23:59,320
intersection between the registry and

617
00:23:57,520 --> 00:24:04,090
container hosts I think is something

618
00:23:59,320 --> 00:24:07,879
that's that's pretty pretty significant

619
00:24:04,090 --> 00:24:09,860
we talked about the shift stay right

620
00:24:07,880 --> 00:24:13,549
shift left is the point of this slide

621
00:24:09,860 --> 00:24:16,959
and again I alluded to this earlier when

622
00:24:13,549 --> 00:24:20,840
I had my flattened out DevOps pipeline

623
00:24:16,960 --> 00:24:23,830
before the developer pushes the

624
00:24:20,840 --> 00:24:27,678
completed container into production I

625
00:24:23,830 --> 00:24:31,010
think that this is a good final test for

626
00:24:27,679 --> 00:24:34,400
the developer to perform looking at the

627
00:24:31,010 --> 00:24:37,570
complete container as built before it's

628
00:24:34,400 --> 00:24:42,039
pushed into the into the registry for

629
00:24:37,570 --> 00:24:46,879
for execution so doing that at the time

630
00:24:42,039 --> 00:24:48,860
of the of but just before is a good

631
00:24:46,880 --> 00:24:50,480
final sandy check to make sure the

632
00:24:48,860 --> 00:24:52,820
container does not expose you to any

633
00:24:50,480 --> 00:24:55,220
type of of security risk I think that's

634
00:24:52,820 --> 00:24:58,460
one thing and again to my previous point

635
00:24:55,220 --> 00:25:02,840
in production automatically it

636
00:24:58,460 --> 00:25:05,210
continuously assess the risk of all the

637
00:25:02,840 --> 00:25:07,549
containers that are in your environment

638
00:25:05,210 --> 00:25:12,380
to ensure that those containers haven't

639
00:25:07,549 --> 00:25:14,480
had additional vulnerabilities haven't

640
00:25:12,380 --> 00:25:15,440
the additional vulnerabilities have not

641
00:25:14,480 --> 00:25:17,809
been disclosed

642
00:25:15,440 --> 00:25:19,669
since the container was built that would

643
00:25:17,809 --> 00:25:22,340
impact your production environment to

644
00:25:19,669 --> 00:25:25,340
some kind of a major security risk so

645
00:25:22,340 --> 00:25:31,850
again stay right and keep left at the

646
00:25:25,340 --> 00:25:33,830
same time with this technology so at a

647
00:25:31,850 --> 00:25:36,199
high level I talked at the very

648
00:25:33,830 --> 00:25:39,949
beginning of how the way you assess

649
00:25:36,200 --> 00:25:43,100
applications needs to change in light of

650
00:25:39,950 --> 00:25:46,519
the use of containerization and what you

651
00:25:43,100 --> 00:25:48,320
with a monolithic application I'd

652
00:25:46,519 --> 00:25:50,799
probably be doing some kind of an

653
00:25:48,320 --> 00:25:53,080
assessment against the platform itself

654
00:25:50,799 --> 00:25:55,279
looking for you know effectively

655
00:25:53,080 --> 00:25:56,889
operating system or application layer of

656
00:25:55,279 --> 00:25:59,600
owner abilities that we might have a

657
00:25:56,889 --> 00:26:02,899
traditional monolithic environment and I

658
00:25:59,600 --> 00:26:06,189
might perform a good external web

659
00:26:02,899 --> 00:26:10,850
application scanning against the overall

660
00:26:06,190 --> 00:26:12,830
the overall application but that with a

661
00:26:10,850 --> 00:26:15,500
Morden application built with micro

662
00:26:12,830 --> 00:26:18,199
services and containerization that

663
00:26:15,500 --> 00:26:20,980
doesn't do the job anymore again because

664
00:26:18,200 --> 00:26:24,049
of the fact that you cannot perform a

665
00:26:20,980 --> 00:26:25,970
vulnerability assessment against a

666
00:26:24,049 --> 00:26:27,710
container image because the container

667
00:26:25,970 --> 00:26:30,259
image isn't smart enough to even let you

668
00:26:27,710 --> 00:26:32,299
do that so the additional step in

669
00:26:30,259 --> 00:26:34,220
addition to all the other things I

670
00:26:32,299 --> 00:26:35,509
talked about or that you'll probably

671
00:26:34,220 --> 00:26:38,470
want to integrate into your dev up

672
00:26:35,509 --> 00:26:41,210
DevOps pipeline is excuse me the

673
00:26:38,470 --> 00:26:43,399
additional step is that you need to

674
00:26:41,210 --> 00:26:44,929
perform an assessment on the continuous

675
00:26:43,399 --> 00:26:47,570
themselves to ensure the containers

676
00:26:44,929 --> 00:26:49,700
themselves on exposing you to risk so

677
00:26:47,570 --> 00:26:54,678
when I change from a monolithic

678
00:26:49,700 --> 00:26:56,840
application to a Morden microservices

679
00:26:54,679 --> 00:26:58,730
type of application I have to add this

680
00:26:56,840 --> 00:27:01,610
additional step to address the

681
00:26:58,730 --> 00:27:03,830
cybersecurity exposure gap that I talked

682
00:27:01,610 --> 00:27:06,229
about on my opening slides so you have

683
00:27:03,830 --> 00:27:07,789
to absolutely positively change how you

684
00:27:06,230 --> 00:27:10,759
perform your vulnerability assessment

685
00:27:07,789 --> 00:27:13,580
and again to my point it needs to be

686
00:27:10,759 --> 00:27:14,299
done on a continuous basis not something

687
00:27:13,580 --> 00:27:16,460
you do every day

688
00:27:14,299 --> 00:27:21,129
because the risk profile of each

689
00:27:16,460 --> 00:27:21,129
application will change continue

690
00:27:21,509 --> 00:27:26,830
one final thing and then I'll take any

691
00:27:24,639 --> 00:27:30,668
questions you might have

692
00:27:26,830 --> 00:27:32,470
there is a CIS benchmark that you can

693
00:27:30,669 --> 00:27:35,619
apply to Dockers if you know aware of it

694
00:27:32,470 --> 00:27:39,009
this is a good way to assess your runner

695
00:27:35,619 --> 00:27:41,559
your modern application for for

696
00:27:39,009 --> 00:27:44,980
vulnerabilities so CIS docker benchmark

697
00:27:41,559 --> 00:27:47,499
is a good test that you can apply as a

698
00:27:44,980 --> 00:27:49,659
sanity check to ensure that your

699
00:27:47,499 --> 00:27:52,809
container images that are built with

700
00:27:49,659 --> 00:27:55,419
docker are indeed secure so we highly

701
00:27:52,809 --> 00:27:58,600
recommend your at least look at using

702
00:27:55,419 --> 00:28:02,080
the CIS benchmark as part of your to

703
00:27:58,600 --> 00:28:04,840
measure the security of your of your

704
00:28:02,080 --> 00:28:09,129
deployed containerized types of

705
00:28:04,840 --> 00:28:12,609
applications so with that I knew I

706
00:28:09,129 --> 00:28:13,959
wouldn't need an hour okay and I think

707
00:28:12,609 --> 00:28:16,359
any I think going for an hour making

708
00:28:13,960 --> 00:28:17,590
everybody kind of fall asleep but at

709
00:28:16,359 --> 00:28:20,080
this point does anybody have any

710
00:28:17,590 --> 00:28:24,100
questions for me or the earlier speakers

711
00:28:20,080 --> 00:28:26,879
gonna get up pretty quick any any

712
00:28:24,100 --> 00:28:26,879
questions from the audience

713
00:28:33,820 --> 00:28:36,720
going once

714
00:28:37,210 --> 00:28:43,390
going twice okay all right that said

715
00:28:41,110 --> 00:28:45,158
please uh please do visit our booth out

716
00:28:43,390 --> 00:28:47,080
out there and we'll give you a demo of

717
00:28:45,159 --> 00:28:49,270
what we have and there are plenty of

718
00:28:47,080 --> 00:28:51,870
other companies out there that will also

719
00:28:49,270 --> 00:28:55,029
provide facilities for you to be able to

720
00:28:51,870 --> 00:28:58,129
do the shift left that you all need to

721
00:28:55,029 --> 00:29:04,269
do thank you for your attention

722
00:28:58,130 --> 00:29:04,269
[Applause]

