1
00:00:03,859 --> 00:00:08,780
I'm glad to be here I'm glad to be

2
00:00:06,690 --> 00:00:12,269
invited to talk a little bit about

3
00:00:08,780 --> 00:00:15,360
innovative R&D and how innovator R&D can

4
00:00:12,269 --> 00:00:19,350
help improve how we do security testing

5
00:00:15,360 --> 00:00:19,948
especially in the DevOps world as one of

6
00:00:19,350 --> 00:00:22,320
my pies

7
00:00:19,949 --> 00:00:25,410
Marone Livni who was sitting here today

8
00:00:22,320 --> 00:00:28,289
this morning would say do it early and

9
00:00:25,410 --> 00:00:31,560
do it often through an approach known as

10
00:00:28,289 --> 00:00:34,040
katene was assurance we must continue to

11
00:00:31,560 --> 00:00:36,239
emphasize the need to shift left

12
00:00:34,040 --> 00:00:39,480
building a pipeline that includes the

13
00:00:36,239 --> 00:00:41,489
security attributes mechanisms needed to

14
00:00:39,480 --> 00:00:45,000
find and address security issues in

15
00:00:41,489 --> 00:00:47,718
software development at speed I want to

16
00:00:45,000 --> 00:00:51,269
talk a little bit about innovative R&D

17
00:00:47,719 --> 00:00:53,520
one of my goals I aim to achieve with

18
00:00:51,270 --> 00:00:56,340
within through my Software Assurance R&D

19
00:00:53,520 --> 00:00:59,520
program is successful tech transition

20
00:00:56,340 --> 00:01:01,260
meaning getting technologies in the

21
00:00:59,520 --> 00:01:04,350
hands of folks who can operationalize it

22
00:01:01,260 --> 00:01:06,240
in their environments for the last five

23
00:01:04,349 --> 00:01:09,570
years or so I have been actively engaged

24
00:01:06,240 --> 00:01:12,509
in the community government industry and

25
00:01:09,570 --> 00:01:14,309
academia to better understand the gaps

26
00:01:12,510 --> 00:01:16,740
that exist instead of our Software

27
00:01:14,310 --> 00:01:19,080
Assurance tools our capabilities my

28
00:01:16,740 --> 00:01:21,210
program at SMT exists to push forward

29
00:01:19,080 --> 00:01:23,490
the state of the art and the state of

30
00:01:21,210 --> 00:01:26,839
practice to increase the adoption rate

31
00:01:23,490 --> 00:01:29,789
in the software development community I

32
00:01:26,840 --> 00:01:32,130
discover and observe some interesting

33
00:01:29,790 --> 00:01:35,159
things in the last five years or so all

34
00:01:32,130 --> 00:01:38,390
of which helps shape and influence my

35
00:01:35,159 --> 00:01:41,189
approach in aligning my R&D program I

36
00:01:38,390 --> 00:01:43,259
consider these my ten observables in

37
00:01:41,189 --> 00:01:45,839
software assurance so I want to talk

38
00:01:43,259 --> 00:01:48,420
about 10 things that I observe that help

39
00:01:45,840 --> 00:01:52,979
shape in line my software assurance R&D

40
00:01:48,420 --> 00:01:55,799
program number one the state of practice

41
00:01:52,979 --> 00:01:57,960
is lagging there is no standard way to

42
00:01:55,799 --> 00:02:01,079
measure in based on how well software

43
00:01:57,960 --> 00:02:03,149
Software Assurance tools perform we

44
00:02:01,079 --> 00:02:08,160
don't know what tools can and cannot do

45
00:02:03,149 --> 00:02:10,080
with thumb certainty the OS top ten

46
00:02:08,160 --> 00:02:11,700
lacks the foundational science to

47
00:02:10,080 --> 00:02:13,340
advance app set practices in

48
00:02:11,700 --> 00:02:15,119
organizations

49
00:02:13,340 --> 00:02:18,690
specifically as it relates to their

50
00:02:15,120 --> 00:02:20,850
methodology for data collection and data

51
00:02:18,690 --> 00:02:25,410
analytics and formulating the OS top ten

52
00:02:20,850 --> 00:02:28,370
as Brian class from envision points out

53
00:02:25,410 --> 00:02:32,190
in his blog musing on the OS top ten

54
00:02:28,370 --> 00:02:35,730
2017 RC one and I quote the metrics

55
00:02:32,190 --> 00:02:38,250
collected for the top 10 2017 represent

56
00:02:35,730 --> 00:02:41,579
what was found by either tools or time

57
00:02:38,250 --> 00:02:43,860
box humans is a subset of one abilities

58
00:02:41,580 --> 00:02:45,690
that are typically found but are not

59
00:02:43,860 --> 00:02:47,400
probably but are probably not

60
00:02:45,690 --> 00:02:49,650
representative of what is actually out

61
00:02:47,400 --> 00:02:52,950
there or the bigger risk that our face

62
00:02:49,650 --> 00:02:55,560
close quote there's a lot of room for

63
00:02:52,950 --> 00:02:57,209
improvement and I believe with the next

64
00:02:55,560 --> 00:02:59,220
release the release candidate - for

65
00:02:57,210 --> 00:03:02,070
Doyle's top ten and more community

66
00:02:59,220 --> 00:03:04,680
involvement we can advance the top ten -

67
00:03:02,070 --> 00:03:06,720
beyond its intended purposes to have a

68
00:03:04,680 --> 00:03:12,120
greater impact on advancing abstract

69
00:03:06,720 --> 00:03:15,240
practices in this 853 - Network centric

70
00:03:12,120 --> 00:03:17,130
system focus there are security controls

71
00:03:15,240 --> 00:03:19,470
with Software Assurance applicability

72
00:03:17,130 --> 00:03:21,570
not included in any of the system

73
00:03:19,470 --> 00:03:24,000
baselines whether it's a high moderate

74
00:03:21,570 --> 00:03:25,829
or low which means these security

75
00:03:24,000 --> 00:03:28,170
controls that have software shims

76
00:03:25,830 --> 00:03:29,550
applicability are not being tested as

77
00:03:28,170 --> 00:03:34,260
part of the certification accreditation

78
00:03:29,550 --> 00:03:36,720
process secure coding practices are

79
00:03:34,260 --> 00:03:39,510
missing in action and are not being

80
00:03:36,720 --> 00:03:42,650
enforced religiously in-app sect

81
00:03:39,510 --> 00:03:45,690
programs number two

82
00:03:42,650 --> 00:03:48,209
threat modeling when automated is very

83
00:03:45,690 --> 00:03:50,340
powerful there's a lot of potential

84
00:03:48,209 --> 00:03:51,930
leveraging machine learning with threat

85
00:03:50,340 --> 00:03:54,090
modeling that can be used to take a more

86
00:03:51,930 --> 00:03:55,290
proactive approach it's a software

87
00:03:54,090 --> 00:03:58,200
development that can help improve

88
00:03:55,290 --> 00:03:59,220
security designs and reduce overall

89
00:03:58,200 --> 00:04:01,320
security risk

90
00:03:59,220 --> 00:04:04,109
I believe threat modeling would

91
00:04:01,320 --> 00:04:08,760
eventually become the core engine in all

92
00:04:04,110 --> 00:04:10,950
security testing number three there are

93
00:04:08,760 --> 00:04:14,040
residual risk in using static analysis

94
00:04:10,950 --> 00:04:16,890
and security testing tools we don't know

95
00:04:14,040 --> 00:04:18,329
what tools did not find we don't know

96
00:04:16,890 --> 00:04:20,120
what parts of the code and attack

97
00:04:18,329 --> 00:04:22,440
service the tools were able to cover

98
00:04:20,120 --> 00:04:25,470
static analysis struggle with opaque

99
00:04:22,440 --> 00:04:25,980
code essentially Co not analyzable by

100
00:04:25,470 --> 00:04:28,980
static and

101
00:04:25,980 --> 00:04:31,020
analysis static analysis tend to be

102
00:04:28,980 --> 00:04:32,670
shallow and oversimplified and when

103
00:04:31,020 --> 00:04:36,030
they're shallow oversimplified a miss

104
00:04:32,670 --> 00:04:38,070
things heartbleed we all familiar with

105
00:04:36,030 --> 00:04:40,169
heartbleed heartbleed one against all

106
00:04:38,070 --> 00:04:45,060
static analysis tools and many of the

107
00:04:40,170 --> 00:04:47,820
dynamic analysis tools number four false

108
00:04:45,060 --> 00:04:51,210
positives the proverbial pain in the

109
00:04:47,820 --> 00:04:53,370
rear and we all can attest that false

110
00:04:51,210 --> 00:04:55,140
positive creates a lot of work and it's

111
00:04:53,370 --> 00:04:58,490
very painful for what we're trying to do

112
00:04:55,140 --> 00:05:00,780
to develop software at speed

113
00:04:58,490 --> 00:05:02,400
many vendors rather err on the side of

114
00:05:00,780 --> 00:05:05,369
caution and tell you something is there

115
00:05:02,400 --> 00:05:07,140
that is not there rather than tell you

116
00:05:05,370 --> 00:05:12,240
something is not there and is actually

117
00:05:07,140 --> 00:05:14,729
their tools lack context to be sound

118
00:05:12,240 --> 00:05:17,400
meaning having a low false negative rate

119
00:05:14,730 --> 00:05:19,220
there's a trade off that will generate a

120
00:05:17,400 --> 00:05:21,900
considerable amount of false positives

121
00:05:19,220 --> 00:05:24,810
this is the interesting trade-off with

122
00:05:21,900 --> 00:05:28,739
static analysis number five

123
00:05:24,810 --> 00:05:31,310
patching does not scale let me repeat

124
00:05:28,740 --> 00:05:34,310
that again patching does not scale

125
00:05:31,310 --> 00:05:38,100
Software Assurance secure coding must

126
00:05:34,310 --> 00:05:40,800
should be it has to be our first line of

127
00:05:38,100 --> 00:05:43,770
defense in protecting software Software

128
00:05:40,800 --> 00:05:45,690
Assurance secure coding must it has to

129
00:05:43,770 --> 00:05:48,210
be our first line of defense in

130
00:05:45,690 --> 00:05:50,520
protecting software it the window of

131
00:05:48,210 --> 00:05:55,349
exposure is constantly sliding to the

132
00:05:50,520 --> 00:05:58,590
right human in social behaviors play a

133
00:05:55,350 --> 00:06:00,720
part because people resist change people

134
00:05:58,590 --> 00:06:03,840
become the Achilles heel in the software

135
00:06:00,720 --> 00:06:06,660
engineering process cyber security

136
00:06:03,840 --> 00:06:08,250
expert dr. Diana Burleigh professor of

137
00:06:06,660 --> 00:06:10,320
human in organizational learning at

138
00:06:08,250 --> 00:06:12,870
George Washington University credits in

139
00:06:10,320 --> 00:06:15,000
part in a quote the rise of cyber

140
00:06:12,870 --> 00:06:17,160
attacks to the failure of the average

141
00:06:15,000 --> 00:06:21,810
computer user to take preventive

142
00:06:17,160 --> 00:06:25,020
measures like patching IOT and ioe is

143
00:06:21,810 --> 00:06:27,570
proving that patching is becoming a lot

144
00:06:25,020 --> 00:06:31,440
harder for many different reasons like

145
00:06:27,570 --> 00:06:33,180
safety and I think we have over four

146
00:06:31,440 --> 00:06:36,920
hundred and sixty-five thousand reasons

147
00:06:33,180 --> 00:06:40,260
in addition to a 143 million reasons

148
00:06:36,920 --> 00:06:45,240
based on recent events while patching

149
00:06:40,260 --> 00:06:46,980
doesn't that work number 6 poor to

150
00:06:45,240 --> 00:06:49,470
performance creates barriers for tool

151
00:06:46,980 --> 00:06:52,020
adoption by developers early in the

152
00:06:49,470 --> 00:06:53,700
software development process I often

153
00:06:52,020 --> 00:06:55,320
wonder why commercial tools and

154
00:06:53,700 --> 00:06:59,010
open-source static analysis tools

155
00:06:55,320 --> 00:06:59,820
struggled with NIST and NSA's juliette

156
00:06:59,010 --> 00:07:02,099
test cases

157
00:06:59,820 --> 00:07:05,909
juliette test cases were developed by

158
00:07:02,100 --> 00:07:09,900
NSA and essentially artificial code that

159
00:07:05,910 --> 00:07:13,830
comprises of c and c++ and java test

160
00:07:09,900 --> 00:07:16,620
cases and si did a tool study and a tool

161
00:07:13,830 --> 00:07:18,990
study suggested on average that a given

162
00:07:16,620 --> 00:07:21,300
static analysis tool can find some way

163
00:07:18,990 --> 00:07:23,040
the neighborhood of 14 to 17 percent of

164
00:07:21,300 --> 00:07:26,040
actual weaknesses that were in the

165
00:07:23,040 --> 00:07:28,050
juliet test cases some open source

166
00:07:26,040 --> 00:07:30,360
static analysis tools did just as good

167
00:07:28,050 --> 00:07:32,460
and in some cases better than commercial

168
00:07:30,360 --> 00:07:35,430
ones on certain weakness classes and

169
00:07:32,460 --> 00:07:39,930
programs range programming languages

170
00:07:35,430 --> 00:07:43,440
within Juliet number seven there is no

171
00:07:39,930 --> 00:07:44,970
uber tool the sum of many is better than

172
00:07:43,440 --> 00:07:47,760
the sum of one I'm gonna repeat that

173
00:07:44,970 --> 00:07:50,610
again there is no uber tool the sum of

174
00:07:47,760 --> 00:07:53,580
many is better than the sum of one each

175
00:07:50,610 --> 00:07:55,170
tool has a sweet spot to many

176
00:07:53,580 --> 00:07:57,180
programming languages in weakness

177
00:07:55,170 --> 00:08:00,150
clauses for one tool to be a dragon

178
00:07:57,180 --> 00:08:03,480
jack-of-all-trades different testing

179
00:08:00,150 --> 00:08:06,030
methods find different things I am

180
00:08:03,480 --> 00:08:08,040
seeing a movement that encouraging the

181
00:08:06,030 --> 00:08:11,039
use of multiple tools for security

182
00:08:08,040 --> 00:08:13,230
testing I just recently became a member

183
00:08:11,040 --> 00:08:15,330
of a tender committee a technical

184
00:08:13,230 --> 00:08:17,730
committee initiated by Microsoft

185
00:08:15,330 --> 00:08:21,120
developers to push for a standard to

186
00:08:17,730 --> 00:08:23,460
format and to incorporate multiple tools

187
00:08:21,120 --> 00:08:27,330
and outputs so now they are coming up

188
00:08:23,460 --> 00:08:29,489
with a specification for output where

189
00:08:27,330 --> 00:08:31,740
all vendors can can design and have

190
00:08:29,490 --> 00:08:33,299
their tools for a standard output now

191
00:08:31,740 --> 00:08:38,220
this is Microsoft who's leading this

192
00:08:33,299 --> 00:08:41,640
charge number eight more code equals

193
00:08:38,220 --> 00:08:43,970
more problems new cars today have at

194
00:08:41,640 --> 00:08:47,580
least a hundred million lines of code

195
00:08:43,970 --> 00:08:50,040
that's an increased attack surface since

196
00:08:47,580 --> 00:08:52,920
it's everywhere on the cars often more

197
00:08:50,040 --> 00:08:54,329
features means more code a more code

198
00:08:52,920 --> 00:08:57,780
leads to more complex

199
00:08:54,330 --> 00:08:59,670
which tend to lead to more problems this

200
00:08:57,780 --> 00:09:02,550
is what software engineer Brian networks

201
00:08:59,670 --> 00:09:04,380
furred - as software gravity the force

202
00:09:02,550 --> 00:09:06,870
that pulls features complexity and

203
00:09:04,380 --> 00:09:08,090
resources towards a software system over

204
00:09:06,870 --> 00:09:12,510
time

205
00:09:08,090 --> 00:09:14,910
number nine technical debt increases the

206
00:09:12,510 --> 00:09:17,280
cost to maintain software many

207
00:09:14,910 --> 00:09:19,520
organizations have no clue as to how

208
00:09:17,280 --> 00:09:22,350
much technical debt has been accumulated

209
00:09:19,520 --> 00:09:24,240
many takes shortcuts which leads to poor

210
00:09:22,350 --> 00:09:27,060
design decisions that will ultimately

211
00:09:24,240 --> 00:09:30,060
create vulnerabilities design debt

212
00:09:27,060 --> 00:09:32,069
testing debt and defect debt all

213
00:09:30,060 --> 00:09:35,959
contribute to the cost to maintain

214
00:09:32,070 --> 00:09:39,390
software and finally number 10

215
00:09:35,960 --> 00:09:41,550
foundational science is a key to for

216
00:09:39,390 --> 00:09:44,640
Leaning capabilities if we're not

217
00:09:41,550 --> 00:09:48,599
exploring we are not advancing the state

218
00:09:44,640 --> 00:09:51,540
of art I believe that achievement

219
00:09:48,600 --> 00:09:53,580
security SP is very important but it's

220
00:09:51,540 --> 00:09:56,370
also difficult to achieve in the current

221
00:09:53,580 --> 00:09:58,350
landscape it requires an approach that

222
00:09:56,370 --> 00:10:00,120
leverages a diverse set of security

223
00:09:58,350 --> 00:10:02,970
testing techniques and methods best

224
00:10:00,120 --> 00:10:05,640
debris to cover and tests as much of the

225
00:10:02,970 --> 00:10:07,320
tech service as possible the goal is to

226
00:10:05,640 --> 00:10:09,930
find security vulnerabilities that

227
00:10:07,320 --> 00:10:14,250
matters the most this is a force

228
00:10:09,930 --> 00:10:16,949
multiplier nevertheless innovative R&D

229
00:10:14,250 --> 00:10:20,610
is a true enabler for achieving security

230
00:10:16,950 --> 00:10:22,920
at speed I approached my research with

231
00:10:20,610 --> 00:10:24,800
this in mind I look at R&D from two

232
00:10:22,920 --> 00:10:27,000
perspectives the first perspective

233
00:10:24,800 --> 00:10:29,130
modernized technologies are capabilities

234
00:10:27,000 --> 00:10:31,620
that currently exists to make them

235
00:10:29,130 --> 00:10:34,680
better and more efficient second

236
00:10:31,620 --> 00:10:36,180
innovate to close the gaps that exist in

237
00:10:34,680 --> 00:10:39,479
state-of-the-art and the state of

238
00:10:36,180 --> 00:10:41,069
practice there are three areas of

239
00:10:39,480 --> 00:10:44,310
security test and I believe requires

240
00:10:41,070 --> 00:10:47,339
some novelty and advancements these

241
00:10:44,310 --> 00:10:49,800
three areas are one static analysis to

242
00:10:47,339 --> 00:10:52,920
threaten modeling and three red teaming

243
00:10:49,800 --> 00:10:55,290
and paedon testing I want to share with

244
00:10:52,920 --> 00:10:57,660
you briefly some of the work DHS S&T is

245
00:10:55,290 --> 00:11:00,089
doing around these three areas to

246
00:10:57,660 --> 00:11:03,510
support and empower the dev psych ops

247
00:11:00,089 --> 00:11:05,190
movement the realization that static

248
00:11:03,510 --> 00:11:07,260
analysis tools have not kept pace with

249
00:11:05,190 --> 00:11:09,810
modern software development

250
00:11:07,260 --> 00:11:12,569
is a strong motivator for me to invest

251
00:11:09,810 --> 00:11:14,310
in advancing the state of the art this

252
00:11:12,570 --> 00:11:18,300
has led me to create a program called

253
00:11:14,310 --> 00:11:21,119
stamp static to analysis modernization

254
00:11:18,300 --> 00:11:23,370
program designed to modernize open

255
00:11:21,120 --> 00:11:24,990
source static analysis capabilities

256
00:11:23,370 --> 00:11:28,590
especially when people are asked to do

257
00:11:24,990 --> 00:11:31,190
more with less I can recall several

258
00:11:28,590 --> 00:11:37,110
years ago I was sitting around couch

259
00:11:31,190 --> 00:11:38,550
watching HGTV yes HGTV with my wife and

260
00:11:37,110 --> 00:11:39,840
we were watching a property brothers how

261
00:11:38,550 --> 00:11:44,310
many of you are familiar with property

262
00:11:39,840 --> 00:11:47,010
brothers so I had an aha moment so

263
00:11:44,310 --> 00:11:49,260
property brothers is two brothers one

264
00:11:47,010 --> 00:11:51,150
finally collected homes and then there's

265
00:11:49,260 --> 00:11:53,100
another brother who takes the necklace

266
00:11:51,150 --> 00:11:55,110
and they direct their homes infuse money

267
00:11:53,100 --> 00:11:58,980
into the collected homes to renovate

268
00:11:55,110 --> 00:12:00,960
them I said aha I said I want to do the

269
00:11:58,980 --> 00:12:03,690
same with static analysis open-source

270
00:12:00,960 --> 00:12:05,850
static analysis I said I want to find

271
00:12:03,690 --> 00:12:08,760
neglected static analysis tools that

272
00:12:05,850 --> 00:12:10,560
makes sense across all different

273
00:12:08,760 --> 00:12:12,840
programming leanings where the static or

274
00:12:10,560 --> 00:12:14,670
dynamic programming languages and I want

275
00:12:12,840 --> 00:12:16,830
to fuse some are any dollars in it to

276
00:12:14,670 --> 00:12:18,630
innovate them raise the bar of these

277
00:12:16,830 --> 00:12:20,700
tools to make them as good or even not

278
00:12:18,630 --> 00:12:23,189
better in some areas because there's no

279
00:12:20,700 --> 00:12:25,260
over to but make them as good as some of

280
00:12:23,190 --> 00:12:27,930
the commercial grade tools so I came in

281
00:12:25,260 --> 00:12:30,660
the next day and I started writing out

282
00:12:27,930 --> 00:12:33,439
what stamp will be about so stamp

283
00:12:30,660 --> 00:12:36,600
essentially has four major components

284
00:12:33,440 --> 00:12:39,450
one evolved test cases so we have a way

285
00:12:36,600 --> 00:12:41,430
to test and measure tools to we needed

286
00:12:39,450 --> 00:12:43,320
to test the tools and run some tool

287
00:12:41,430 --> 00:12:44,810
state to figure out what the tools are

288
00:12:43,320 --> 00:12:48,920
really good and get you're not good at

289
00:12:44,810 --> 00:12:51,810
three what a modernize use the testing

290
00:12:48,920 --> 00:12:55,040
tool study to figure out what our modern

291
00:12:51,810 --> 00:12:58,619
is modernization framework is and four

292
00:12:55,040 --> 00:13:01,230
educate the community about the strength

293
00:12:58,620 --> 00:13:03,540
of the tools so that when you want to go

294
00:13:01,230 --> 00:13:04,920
use a static analysis you can find the

295
00:13:03,540 --> 00:13:07,920
right static analysis tools that meets

296
00:13:04,920 --> 00:13:10,709
your software development needs so

297
00:13:07,920 --> 00:13:13,740
that's all stamp came about stem will

298
00:13:10,710 --> 00:13:15,840
accomplish two important things increase

299
00:13:13,740 --> 00:13:18,300
the adoption rate of using static

300
00:13:15,840 --> 00:13:19,190
analysis early and often in software

301
00:13:18,300 --> 00:13:22,430
development

302
00:13:19,190 --> 00:13:24,080
to lower the bar for organizations to

303
00:13:22,430 --> 00:13:27,319
formalize Software Assurance in their

304
00:13:24,080 --> 00:13:28,610
environments as part of stamp I want to

305
00:13:27,320 --> 00:13:30,890
explore why

306
00:13:28,610 --> 00:13:33,380
static analysis tools struggle with

307
00:13:30,890 --> 00:13:35,660
simplistic test cases like Juliet I

308
00:13:33,380 --> 00:13:38,810
really I recently asked one of my PAS

309
00:13:35,660 --> 00:13:42,260
dr. James Hill who is a computer science

310
00:13:38,810 --> 00:13:44,510
professor at IUPUI why is this the case

311
00:13:42,260 --> 00:13:47,689
with static and I was on simplistic and

312
00:13:44,510 --> 00:13:49,730
small test case weeks like Juliet he

313
00:13:47,690 --> 00:13:53,120
provided a very interesting theory in

314
00:13:49,730 --> 00:13:55,340
response and I quote he said static

315
00:13:53,120 --> 00:13:58,070
analysis tools struggle with julia

316
00:13:55,340 --> 00:14:01,850
mainly because a static analysis tools

317
00:13:58,070 --> 00:14:04,160
make assumptions about state if you look

318
00:14:01,850 --> 00:14:06,260
at how julia is constructed it's

319
00:14:04,160 --> 00:14:09,319
composed of deterministic flaws and

320
00:14:06,260 --> 00:14:11,450
incidental flaws deterministic flaws

321
00:14:09,320 --> 00:14:13,520
when we are learning are the ones that I

322
00:14:11,450 --> 00:14:16,190
will consider to be discernible by

323
00:14:13,520 --> 00:14:18,680
analyzing the current file the

324
00:14:16,190 --> 00:14:21,280
incidental flaws are the ones where the

325
00:14:18,680 --> 00:14:24,469
flaws exist within a specific context

326
00:14:21,280 --> 00:14:27,350
many times this context is not local to

327
00:14:24,470 --> 00:14:29,180
a current file unfortunately many static

328
00:14:27,350 --> 00:14:32,450
analysis tools only look at the current

329
00:14:29,180 --> 00:14:35,180
file and the include files which do not

330
00:14:32,450 --> 00:14:38,930
contain any analyzable content I mean

331
00:14:35,180 --> 00:14:41,689
context especially in the c and c++

332
00:14:38,930 --> 00:14:43,910
world the important contextual

333
00:14:41,690 --> 00:14:46,100
information such as the values of

334
00:14:43,910 --> 00:14:49,370
prevent or of parameters to a function

335
00:14:46,100 --> 00:14:51,380
call are not known this is where

336
00:14:49,370 --> 00:14:54,560
assumptions are made and false positives

337
00:14:51,380 --> 00:14:56,480
are generated so I want to talk a little

338
00:14:54,560 --> 00:14:59,030
bit about some of the innovative things

339
00:14:56,480 --> 00:15:02,570
we're trying to do do stamp with static

340
00:14:59,030 --> 00:15:04,939
analysis develop techniques to recompose

341
00:15:02,570 --> 00:15:08,120
static analysis on the fly as needed to

342
00:15:04,940 --> 00:15:10,150
suit program conditions matching program

343
00:15:08,120 --> 00:15:13,670
features with static and mouses features

344
00:15:10,150 --> 00:15:16,189
studies from NSA endless and the ones

345
00:15:13,670 --> 00:15:18,199
i've sponsored through my program have

346
00:15:16,190 --> 00:15:19,970
shown and proven that tools have narrow

347
00:15:18,200 --> 00:15:22,580
sweet spots and are good at certain

348
00:15:19,970 --> 00:15:25,070
things this type of framework will

349
00:15:22,580 --> 00:15:27,050
create a verification workflow that will

350
00:15:25,070 --> 00:15:29,360
help developers use the right tools to

351
00:15:27,050 --> 00:15:32,000
test for specific problems in their code

352
00:15:29,360 --> 00:15:33,740
by exposing the properties and behaviors

353
00:15:32,000 --> 00:15:37,310
of static analysis

354
00:15:33,740 --> 00:15:39,830
to the developer next reduce the mean

355
00:15:37,310 --> 00:15:41,449
time to repair or remediation while

356
00:15:39,830 --> 00:15:43,700
making verification results more

357
00:15:41,450 --> 00:15:46,400
directly relevant to the program source

358
00:15:43,700 --> 00:15:48,650
code preserving the preserving the

359
00:15:46,400 --> 00:15:50,540
context and helping the developer better

360
00:15:48,650 --> 00:15:55,100
understand the implications of two

361
00:15:50,540 --> 00:15:58,459
results next improve the detection of

362
00:15:55,100 --> 00:16:00,890
ink of incorrect API usage that can

363
00:15:58,460 --> 00:16:03,440
expose security flaws or security bugs

364
00:16:00,890 --> 00:16:05,240
and software developed techniques and

365
00:16:03,440 --> 00:16:08,800
methods to look for the correctness of

366
00:16:05,240 --> 00:16:10,970
API usage given the increased demand of

367
00:16:08,800 --> 00:16:14,959
frameworks use the modern software

368
00:16:10,970 --> 00:16:17,030
development next improve analysis

369
00:16:14,960 --> 00:16:19,150
workflows by standardizing and interface

370
00:16:17,030 --> 00:16:22,550
with tools such as verification

371
00:16:19,150 --> 00:16:24,860
generators theorem provers model

372
00:16:22,550 --> 00:16:27,170
checkers that can be used in the CI CD

373
00:16:24,860 --> 00:16:29,890
pipelines to orchestrate better

374
00:16:27,170 --> 00:16:34,189
automation around static analysis tasks

375
00:16:29,890 --> 00:16:38,110
next develop the next evolution of test

376
00:16:34,190 --> 00:16:41,480
cases that represent real-world programs

377
00:16:38,110 --> 00:16:43,340
by using evolutionary computation to

378
00:16:41,480 --> 00:16:46,400
produce a large collection of programs

379
00:16:43,340 --> 00:16:50,360
with known bugs to estimate recall in

380
00:16:46,400 --> 00:16:53,020
static analysis tools recall is defined

381
00:16:50,360 --> 00:16:56,120
as the number of real flaws reported

382
00:16:53,020 --> 00:16:58,400
divided by the total number of real

383
00:16:56,120 --> 00:17:00,580
flaws whether reporter or unreported

384
00:16:58,400 --> 00:17:02,930
that exist in code

385
00:17:00,580 --> 00:17:04,819
evolutionary computation will help

386
00:17:02,930 --> 00:17:07,429
customize the distribution and features

387
00:17:04,819 --> 00:17:08,899
of bugs this will help improve the state

388
00:17:07,430 --> 00:17:12,650
of practice by providing a way to

389
00:17:08,900 --> 00:17:16,040
measure baseline and benchmark static

390
00:17:12,650 --> 00:17:18,530
analysis tools and capabilities next

391
00:17:16,040 --> 00:17:21,619
develop capabilities that identifies and

392
00:17:18,530 --> 00:17:23,450
signal false positives in tools by

393
00:17:21,619 --> 00:17:25,599
leveraging big data analytics to

394
00:17:23,450 --> 00:17:28,190
increase the confidence in certainty I

395
00:17:25,599 --> 00:17:31,070
am visiting this capability working in

396
00:17:28,190 --> 00:17:33,770
the CI CD workflow to filter out false

397
00:17:31,070 --> 00:17:36,350
positives but increase the confidence in

398
00:17:33,770 --> 00:17:38,450
true positives helping developers to

399
00:17:36,350 --> 00:17:41,199
focus focus on those key security

400
00:17:38,450 --> 00:17:43,370
vulnerabilities that matters the most

401
00:17:41,200 --> 00:17:45,100
now we will talk about threat modeling

402
00:17:43,370 --> 00:17:47,549
what we're doing around threat modeling

403
00:17:45,100 --> 00:17:49,510
I think is a point to mention

404
00:17:47,549 --> 00:17:51,910
understanding ways in which your

405
00:17:49,510 --> 00:17:54,090
application or system can be attacked is

406
00:17:51,910 --> 00:17:57,090
an essential part in developing

407
00:17:54,090 --> 00:18:00,750
designing and building secure systems

408
00:17:57,090 --> 00:18:03,428
especially in a automated way safe code

409
00:18:00,750 --> 00:18:05,440
in their tactical threat modeling white

410
00:18:03,429 --> 00:18:08,260
paper echoes the following in our quote

411
00:18:05,440 --> 00:18:10,450
threat modeling is a core activity in a

412
00:18:08,260 --> 00:18:13,480
fundamental practice in the process of

413
00:18:10,450 --> 00:18:15,010
building trusted technologies it has

414
00:18:13,480 --> 00:18:17,380
been identified as one of the best

415
00:18:15,010 --> 00:18:19,629
return on investment activities with

416
00:18:17,380 --> 00:18:21,750
respect to identifying and addressing

417
00:18:19,630 --> 00:18:25,990
design flaws before the implementation

418
00:18:21,750 --> 00:18:28,539
into code application security threat in

419
00:18:25,990 --> 00:18:30,880
the tech modeling also known as asked

420
00:18:28,539 --> 00:18:32,679
him there's another important project

421
00:18:30,880 --> 00:18:35,380
that I have with two technical areas

422
00:18:32,679 --> 00:18:37,780
focus on modernizing and innovating

423
00:18:35,380 --> 00:18:39,520
capabilities to help achieve security at

424
00:18:37,780 --> 00:18:41,799
speed I want to talk about automated

425
00:18:39,520 --> 00:18:45,158
threat mam that we're doing as part of a

426
00:18:41,799 --> 00:18:46,629
stamp we're automating threat modeling

427
00:18:45,159 --> 00:18:49,179
capabilities that leverages the machine

428
00:18:46,630 --> 00:18:50,620
learning to identify risk and threats to

429
00:18:49,179 --> 00:18:52,809
the underlying security architecture

430
00:18:50,620 --> 00:18:54,850
we're leveraging architecture synthesis

431
00:18:52,809 --> 00:18:57,730
to discover features and how those

432
00:18:54,850 --> 00:18:59,590
features are implemented in code with

433
00:18:57,730 --> 00:19:02,950
the ability to detect architectural

434
00:18:59,590 --> 00:19:05,740
erosion we're connecting threats to

435
00:19:02,950 --> 00:19:07,690
route calls mitigation techniques and

436
00:19:05,740 --> 00:19:09,970
software requirements to help

437
00:19:07,690 --> 00:19:13,659
organizations build security in with

438
00:19:09,970 --> 00:19:15,909
automated threat generation we're a

439
00:19:13,659 --> 00:19:18,429
product prioritizing remediation efforts

440
00:19:15,909 --> 00:19:21,909
and guide security tests into areas with

441
00:19:18,429 --> 00:19:23,679
architectural significance which which

442
00:19:21,909 --> 00:19:25,750
helps us to be more focused in our

443
00:19:23,679 --> 00:19:27,669
security testing so we're not just

444
00:19:25,750 --> 00:19:29,500
testing things are not important but

445
00:19:27,669 --> 00:19:34,900
we're testing things with architectural

446
00:19:29,500 --> 00:19:38,490
significance we're a leveraging cwe

447
00:19:34,900 --> 00:19:40,929
common weakness enumeration and CAW II

448
00:19:38,490 --> 00:19:43,780
which is common architectural weakness

449
00:19:40,929 --> 00:19:46,030
enumeration to introduce architectural

450
00:19:43,780 --> 00:19:48,610
centric thinking into developers daily

451
00:19:46,030 --> 00:19:50,110
activities that informs developers about

452
00:19:48,610 --> 00:19:52,870
the consequences of their coding

453
00:19:50,110 --> 00:19:55,030
practices and refactoring activities

454
00:19:52,870 --> 00:19:57,059
that arose the architecture and design

455
00:19:55,030 --> 00:19:59,069
of a system

456
00:19:57,059 --> 00:20:01,049
the CAW II work was funded through my

457
00:19:59,069 --> 00:20:03,719
program and it's currently being

458
00:20:01,049 --> 00:20:06,179
integrated in the next release the 3.0

459
00:20:03,719 --> 00:20:09,719
release of cwe's that Marta has adopted

460
00:20:06,179 --> 00:20:11,129
as part of the next release and I

461
00:20:09,719 --> 00:20:13,319
believe modern mentioned that should be

462
00:20:11,129 --> 00:20:15,988
available sometime this week so be on

463
00:20:13,319 --> 00:20:17,908
the lookout for the cwe release to Edo

464
00:20:15,989 --> 00:20:21,119
which will have the common architecture

465
00:20:17,909 --> 00:20:23,729
witness enumerations overlay it in there

466
00:20:21,119 --> 00:20:26,279
to help developers better understand the

467
00:20:23,729 --> 00:20:29,819
design and architecture implications of

468
00:20:26,279 --> 00:20:33,179
software development consider the recent

469
00:20:29,819 --> 00:20:34,678
issue involved in pacemakers were four

470
00:20:33,179 --> 00:20:37,499
hundred sixty-five thousand patients

471
00:20:34,679 --> 00:20:40,979
needed patches many references to

472
00:20:37,499 --> 00:20:44,089
episode from homeland that demonstrated

473
00:20:40,979 --> 00:20:46,829
the plausibility of hacking pacemakers

474
00:20:44,089 --> 00:20:50,309
can you imagine ransomware targeting

475
00:20:46,829 --> 00:20:51,809
pacemakers well Matthew Green a John

476
00:20:50,309 --> 00:20:54,359
Hopkins University professor

477
00:20:51,809 --> 00:20:56,959
specializing cryptology is among the

478
00:20:54,359 --> 00:20:59,549
people arguing that this threat is real

479
00:20:56,959 --> 00:21:01,799
this is where automated threat modeling

480
00:20:59,549 --> 00:21:04,168
can be used to identify these type of

481
00:21:01,799 --> 00:21:07,229
threats and risks to inform

482
00:21:04,169 --> 00:21:10,019
manufacturers of how to improve the

483
00:21:07,229 --> 00:21:13,199
design the security and safety of

484
00:21:10,019 --> 00:21:15,179
medical devices in addition to automated

485
00:21:13,199 --> 00:21:17,639
third modeling the second technical area

486
00:21:15,179 --> 00:21:20,789
for a stem where development involves

487
00:21:17,639 --> 00:21:22,978
automated pentesting activities we must

488
00:21:20,789 --> 00:21:25,259
take a proactive approach to security

489
00:21:22,979 --> 00:21:29,879
testing and have capabilities on demand

490
00:21:25,259 --> 00:21:30,659
to mimic and attackers behavior so I

491
00:21:29,879 --> 00:21:32,698
want to talk a little bit about

492
00:21:30,659 --> 00:21:35,999
automated pin testing capabilities we're

493
00:21:32,699 --> 00:21:37,679
developing so we have a tool that has

494
00:21:35,999 --> 00:21:40,529
been developed through a previous

495
00:21:37,679 --> 00:21:43,949
program that have sponsored as part of

496
00:21:40,529 --> 00:21:46,249
our broad agency announcement 1102 this

497
00:21:43,949 --> 00:21:50,689
was a program that I that I initiated

498
00:21:46,249 --> 00:21:52,889
coming in to DHS back in August of 2012

499
00:21:50,689 --> 00:21:57,299
the name of this tool is called code

500
00:21:52,889 --> 00:21:59,908
pulse it's currently an OS project we

501
00:21:57,299 --> 00:22:02,639
are going to announce Java support we

502
00:21:59,909 --> 00:22:05,069
extended it to dotnet and we're kolpos

503
00:22:02,639 --> 00:22:07,079
does this provides real-time coverage

504
00:22:05,069 --> 00:22:09,839
for penetration testers who use either

505
00:22:07,079 --> 00:22:10,800
manual order or automated pen testing

506
00:22:09,839 --> 00:22:12,600
tools to understand

507
00:22:10,800 --> 00:22:14,760
and the extent to which their testing

508
00:22:12,600 --> 00:22:17,010
activities covers the breadth and depth

509
00:22:14,760 --> 00:22:19,590
of a web application source code and

510
00:22:17,010 --> 00:22:22,470
providing a visual rich interface that

511
00:22:19,590 --> 00:22:24,659
have got more in-depth penetration

512
00:22:22,470 --> 00:22:26,280
testing so having an ability to

513
00:22:24,660 --> 00:22:28,680
understand when you're doing pen testing

514
00:22:26,280 --> 00:22:30,030
what parts of code or part of the attack

515
00:22:28,680 --> 00:22:32,310
service that you were not able to cover

516
00:22:30,030 --> 00:22:34,760
and visually be able to see that is very

517
00:22:32,310 --> 00:22:36,870
important so that we can really cover

518
00:22:34,760 --> 00:22:39,150
testing and understand what additional

519
00:22:36,870 --> 00:22:43,199
methods we need to use as part of our

520
00:22:39,150 --> 00:22:46,140
testing hybrid analysis with sass and

521
00:22:43,200 --> 00:22:47,910
ass to improve tool coverage use source

522
00:22:46,140 --> 00:22:51,630
code to calculate the attack surface in

523
00:22:47,910 --> 00:22:54,090
web applications and inform - tools to

524
00:22:51,630 --> 00:22:56,520
make - tools more smarter or increase

525
00:22:54,090 --> 00:22:59,520
their coverage that - tools will have by

526
00:22:56,520 --> 00:23:01,860
leveraging stats to feed into - to

527
00:22:59,520 --> 00:23:03,990
increase the attack service that will

528
00:23:01,860 --> 00:23:06,870
help us improve and increase our ability

529
00:23:03,990 --> 00:23:08,460
to test more within the application we

530
00:23:06,870 --> 00:23:10,379
need to see the entire stack service

531
00:23:08,460 --> 00:23:12,750
even if it's not called doing execution

532
00:23:10,380 --> 00:23:15,390
this will allow for more guided more

533
00:23:12,750 --> 00:23:17,610
efficient testing DevOps engineers and

534
00:23:15,390 --> 00:23:20,910
security teams can track changes to

535
00:23:17,610 --> 00:23:25,199
attack surface for more focused dev SEC

536
00:23:20,910 --> 00:23:27,870
ops we also been built building and

537
00:23:25,200 --> 00:23:30,540
penetration testing automation framework

538
00:23:27,870 --> 00:23:32,639
in a DevOps world there's no way for

539
00:23:30,540 --> 00:23:35,430
organizations to keep up with manual pen

540
00:23:32,640 --> 00:23:37,710
testing creating an automation platform

541
00:23:35,430 --> 00:23:39,720
from pen testing is the key to scale in

542
00:23:37,710 --> 00:23:45,060
pen testing during the development and

543
00:23:39,720 --> 00:23:46,440
testing phases of SDLC with the spin

544
00:23:45,060 --> 00:23:48,149
testing automation framework we're

545
00:23:46,440 --> 00:23:50,730
leveraging threat modeling to enhance

546
00:23:48,150 --> 00:23:53,820
and guide penetration testing to attack

547
00:23:50,730 --> 00:23:55,410
surface areas that may be exposed the

548
00:23:53,820 --> 00:23:57,840
pen testing automation platform

549
00:23:55,410 --> 00:24:00,360
leverages enhanced versions of sequel

550
00:23:57,840 --> 00:24:03,030
map in Hydra so the hands versus a

551
00:24:00,360 --> 00:24:04,679
sequel map in Hydra has been developed

552
00:24:03,030 --> 00:24:07,110
through the enhancements has been

553
00:24:04,680 --> 00:24:08,700
developed through the a stem program so

554
00:24:07,110 --> 00:24:12,000
we can test for sequel injection weak

555
00:24:08,700 --> 00:24:15,330
passwords but also we're going to extend

556
00:24:12,000 --> 00:24:18,300
these both for automation into the CI CD

557
00:24:15,330 --> 00:24:20,550
pipeline we also has the but we also

558
00:24:18,300 --> 00:24:22,500
have developed a cross-site scripting

559
00:24:20,550 --> 00:24:24,190
capability that's more surgical

560
00:24:22,500 --> 00:24:26,620
imprecise for

561
00:24:24,190 --> 00:24:30,010
or detecting reflective attacks more

562
00:24:26,620 --> 00:24:31,899
intelligently the pen testing automation

563
00:24:30,010 --> 00:24:33,790
framework is extensible and will be

564
00:24:31,900 --> 00:24:37,830
available for the community to share and

565
00:24:33,790 --> 00:24:40,330
collaborate around attack libraries

566
00:24:37,830 --> 00:24:42,250
we'll talk a little bit and shift gears

567
00:24:40,330 --> 00:24:45,100
and talk about the software's

568
00:24:42,250 --> 00:24:49,030
marketplace the swamp in a recent survey

569
00:24:45,100 --> 00:24:51,129
conducted by HP Enterprise DevOps it

570
00:24:49,030 --> 00:24:53,200
revealed that 90% of surveyed

571
00:24:51,130 --> 00:24:55,930
organizations are implementing or

572
00:24:53,200 --> 00:25:00,820
piloting some part some some aspect the

573
00:24:55,930 --> 00:25:05,830
DevOps but there's a caveat however only

574
00:25:00,820 --> 00:25:09,189
20% only 20% survey or actually doing ab

575
00:25:05,830 --> 00:25:11,230
SiC testing doing development this is

576
00:25:09,190 --> 00:25:13,060
not only alarming but could speak to

577
00:25:11,230 --> 00:25:15,460
something that my colleague Arthur

578
00:25:13,060 --> 00:25:18,429
Higgins of Paris off emphasized and I

579
00:25:15,460 --> 00:25:20,730
quote DevOps presents opportunities

580
00:25:18,430 --> 00:25:23,320
create vulnerabilities at a faster pace

581
00:25:20,730 --> 00:25:28,840
which he refers to as vulnerability

582
00:25:23,320 --> 00:25:31,090
acceleration or velocity one of the

583
00:25:28,840 --> 00:25:32,770
benefits of the swamp is to lower the

584
00:25:31,090 --> 00:25:34,840
bar for organizations to formalize

585
00:25:32,770 --> 00:25:37,620
Software Assurance capabilities in

586
00:25:34,840 --> 00:25:40,270
practices in their organizations to

587
00:25:37,620 --> 00:25:42,610
experts computer scientist Bart Miller

588
00:25:40,270 --> 00:25:45,070
and his team at the University of Master

589
00:25:42,610 --> 00:25:47,280
of Wisconsin handle do all the plumbing

590
00:25:45,070 --> 00:25:50,800
and configurations with tools for you

591
00:25:47,280 --> 00:25:52,600
today the swamp consists of 20-plus

592
00:25:50,800 --> 00:25:55,570
open-source static analysis tools as

593
00:25:52,600 --> 00:25:58,389
well as commercial tools visual workflow

594
00:25:55,570 --> 00:26:01,750
analysis multiple platforms to run

595
00:25:58,390 --> 00:26:04,270
analysis in over 500 software packages

596
00:26:01,750 --> 00:26:07,930
and test cases to be used to test your

597
00:26:04,270 --> 00:26:10,000
tool capabilities the swamp is the

598
00:26:07,930 --> 00:26:13,240
growing realization that you need to use

599
00:26:10,000 --> 00:26:15,130
multiple static analysis tools to

600
00:26:13,240 --> 00:26:18,850
analyze software for weaknesses that

601
00:26:15,130 --> 00:26:20,950
exposed vulnerable ease in software but

602
00:26:18,850 --> 00:26:22,810
also it's the realization that

603
00:26:20,950 --> 00:26:25,210
continuous assurance is one of the

604
00:26:22,810 --> 00:26:28,030
underpinnings for improving software

605
00:26:25,210 --> 00:26:30,640
security development the swamp team has

606
00:26:28,030 --> 00:26:33,250
translated this concept into a framework

607
00:26:30,640 --> 00:26:35,380
that brings together multiple tools in

608
00:26:33,250 --> 00:26:38,409
high throughput and high throughput

609
00:26:35,380 --> 00:26:39,880
computing automations and in managed

610
00:26:38,409 --> 00:26:42,100
that combines with continuous

611
00:26:39,880 --> 00:26:44,110
integration program development

612
00:26:42,100 --> 00:26:46,000
environments in federated identity

613
00:26:44,110 --> 00:26:49,270
management this framework has been

614
00:26:46,000 --> 00:26:52,270
implemented in a portable open source

615
00:26:49,270 --> 00:26:54,549
platform called swamp in a box swamp in

616
00:26:52,270 --> 00:26:58,270
a box is an open source and it's

617
00:26:54,549 --> 00:27:00,158
currently on github so one of the things

618
00:26:58,270 --> 00:27:02,889
I've always wanted to achieve and then

619
00:27:00,159 --> 00:27:04,570
mentioned earlier is lowered the bar to

620
00:27:02,890 --> 00:27:07,750
transition technologies to the

621
00:27:04,570 --> 00:27:10,480
development community making easier to

622
00:27:07,750 --> 00:27:13,809
formalize software assurance in software

623
00:27:10,480 --> 00:27:15,970
development environments so we'll talk a

624
00:27:13,809 --> 00:27:18,908
bit about the swamp and the benefits of

625
00:27:15,970 --> 00:27:20,980
the swamp the swap promotes the idea of

626
00:27:18,909 --> 00:27:22,960
continuous assurance by providing a

627
00:27:20,980 --> 00:27:25,029
platform that reduces the barriers for

628
00:27:22,960 --> 00:27:27,460
developers to integrate continuous

629
00:27:25,029 --> 00:27:30,370
assurance practices in their C ICD

630
00:27:27,460 --> 00:27:32,230
pipelines the versatility of the swamp

631
00:27:30,370 --> 00:27:34,719
framework will allow for dynamic

632
00:27:32,230 --> 00:27:36,549
analysis software composition analysis

633
00:27:34,720 --> 00:27:39,789
and eventually some forms of threat

634
00:27:36,549 --> 00:27:42,250
modeling api's automation in computing

635
00:27:39,789 --> 00:27:43,870
capacity offered by the swamp supports

636
00:27:42,250 --> 00:27:47,049
seamless integration with DevOps

637
00:27:43,870 --> 00:27:50,439
workflow easily integrated with CI CD

638
00:27:47,049 --> 00:27:53,760
tools such as jenkins eclipse andrey

639
00:27:50,440 --> 00:27:56,380
positive repositories such as get SVN

640
00:27:53,760 --> 00:27:58,899
swamp plugins forget an S vegans can

641
00:27:56,380 --> 00:28:02,169
pull from repositories to easily start

642
00:27:58,899 --> 00:28:04,418
assessments in the swamp or a post bill

643
00:28:02,169 --> 00:28:06,250
action can be created in jenkins to

644
00:28:04,419 --> 00:28:08,620
start a static analysis assessment

645
00:28:06,250 --> 00:28:11,649
results from this test we can be view in

646
00:28:08,620 --> 00:28:14,860
the swamp or the native ide 44 easier

647
00:28:11,649 --> 00:28:17,139
and quicker triage developers and

648
00:28:14,860 --> 00:28:20,559
researchers have the option of bringing

649
00:28:17,140 --> 00:28:22,990
in new tools and capabilities into the

650
00:28:20,559 --> 00:28:25,570
swamp in the Box platform or leverage

651
00:28:22,990 --> 00:28:28,149
the swamps rich api's to hooking

652
00:28:25,570 --> 00:28:30,158
commercial tools and assessment

653
00:28:28,149 --> 00:28:32,649
workflows so if you currently have

654
00:28:30,159 --> 00:28:34,779
investments and your current static

655
00:28:32,649 --> 00:28:36,789
analysis capabilities the swamp api's

656
00:28:34,779 --> 00:28:38,080
provides a way to hook those in to the

657
00:28:36,789 --> 00:28:40,600
swamp in the Box platform

658
00:28:38,080 --> 00:28:43,000
allow for easier transition of your

659
00:28:40,600 --> 00:28:44,649
current testing environment what allows

660
00:28:43,000 --> 00:28:48,340
you to get your return on investment of

661
00:28:44,649 --> 00:28:50,080
your existing investment tools the

662
00:28:48,340 --> 00:28:51,760
modernized static analysis tools from

663
00:28:50,080 --> 00:28:53,830
stamp as I talked about earlier

664
00:28:51,760 --> 00:28:56,260
we'll be under the hood in swamp in a

665
00:28:53,830 --> 00:28:58,629
box providing the development community

666
00:28:56,260 --> 00:29:01,840
with powerful assessment platform to

667
00:28:58,630 --> 00:29:04,179
achieve security at speed with the swamp

668
00:29:01,840 --> 00:29:05,379
there is no reason not to formalize

669
00:29:04,179 --> 00:29:09,730
Software Assurance

670
00:29:05,380 --> 00:29:11,980
in closing it was important for me to

671
00:29:09,730 --> 00:29:14,980
highlight the contributions of DHS S&T

672
00:29:11,980 --> 00:29:17,710
in leading innovative R&D to support the

673
00:29:14,980 --> 00:29:19,779
dev set-offs movement that has become

674
00:29:17,710 --> 00:29:23,320
embedded in many cultures in many

675
00:29:19,779 --> 00:29:25,330
organizations our role is to lead in

676
00:29:23,320 --> 00:29:28,330
transition our ID to operational

677
00:29:25,330 --> 00:29:30,070
environments we all can agree that

678
00:29:28,330 --> 00:29:33,399
software power is not only critical

679
00:29:30,070 --> 00:29:35,289
infrastructure about our daily lives we

680
00:29:33,399 --> 00:29:39,658
all have experienced the effects of bad

681
00:29:35,289 --> 00:29:45,490
software for medical devices to Equifax

682
00:29:39,659 --> 00:29:48,580
to Home Depot to OPM the list goes on as

683
00:29:45,490 --> 00:29:51,159
a result we must continually look for

684
00:29:48,580 --> 00:29:52,928
ways to close the gap that exists in the

685
00:29:51,159 --> 00:29:54,429
state of the art and the state of

686
00:29:52,929 --> 00:29:57,850
practice to keep pace with modern

687
00:29:54,429 --> 00:29:59,649
software development innovative R&D if

688
00:29:57,850 --> 00:30:02,260
for leanin technologies provide a

689
00:29:59,649 --> 00:30:06,479
pathway to help achieve security at

690
00:30:02,260 --> 00:30:09,340
speed industry academia and government

691
00:30:06,480 --> 00:30:12,070
must partner and collaborate to work on

692
00:30:09,340 --> 00:30:15,549
addressing the challenges we face with

693
00:30:12,070 --> 00:30:18,549
building security in building security

694
00:30:15,549 --> 00:30:21,190
in is more than just a catchy phrase we

695
00:30:18,549 --> 00:30:24,490
must adopt it as a philosophy our

696
00:30:21,190 --> 00:30:26,230
mindset to emphasize the need to think

697
00:30:24,490 --> 00:30:29,320
about ways software can be attacked

698
00:30:26,230 --> 00:30:32,799
during all phases of the software

699
00:30:29,320 --> 00:30:35,860
development process process I'm excited

700
00:30:32,799 --> 00:30:37,450
and I believe the future is bright I see

701
00:30:35,860 --> 00:30:39,789
potential in leveraging machine learning

702
00:30:37,450 --> 00:30:41,980
where applicable to advance to advance

703
00:30:39,789 --> 00:30:44,260
the foundation of Science in the areas

704
00:30:41,980 --> 00:30:46,269
of software assurance that allow us to

705
00:30:44,260 --> 00:30:48,039
bring to market and operationalize

706
00:30:46,269 --> 00:30:50,649
innovation like the work from DARPA

707
00:30:48,039 --> 00:30:54,309
cyber Grand Challenge with a machine

708
00:30:50,649 --> 00:30:56,080
coding automated patching fully

709
00:30:54,309 --> 00:30:59,340
automated security pipelines and

710
00:30:56,080 --> 00:31:03,010
self-healing software we are not far off

711
00:30:59,340 --> 00:31:05,350
stay the course and always and I mean

712
00:31:03,010 --> 00:31:09,270
always think

713
00:31:05,350 --> 00:31:09,270
SiC ops I thank you for your time

714
00:31:14,000 --> 00:31:19,399
I have some time allotted and I'm gonna

715
00:31:17,750 --> 00:31:20,990
take a couple questions if there's any

716
00:31:19,399 --> 00:31:24,158
questions I would like to take some

717
00:31:20,990 --> 00:31:24,159
questions there any questions

718
00:32:12,990 --> 00:32:28,520
it's the horizon with the new

719
00:32:26,370 --> 00:32:28,520
administration

720
00:32:34,610 --> 00:32:40,229
thank you for your questioning

721
00:32:37,230 --> 00:32:41,940
I can't really talk about budget so I'm

722
00:32:40,230 --> 00:32:45,299
not a mistake from any questions of

723
00:32:41,940 --> 00:32:47,940
that's involving budget but one of the

724
00:32:45,299 --> 00:32:53,639
things I do with my program you know I

725
00:32:47,940 --> 00:32:56,760
tried to leverage a number of sort of

726
00:32:53,640 --> 00:33:01,110
different things one currently my

727
00:32:56,760 --> 00:33:06,260
portfolio consists of academia small

728
00:33:01,110 --> 00:33:09,389
business and individual researchers so

729
00:33:06,260 --> 00:33:12,179
for stamps specifically I have two

730
00:33:09,390 --> 00:33:15,059
performers and eventually I would down

731
00:33:12,179 --> 00:33:15,990
select and have one performer but I'm

732
00:33:15,059 --> 00:33:18,270
gonna let you know a little bit about

733
00:33:15,990 --> 00:33:21,059
the two performers one of the

734
00:33:18,270 --> 00:33:23,549
performances grammar tech grammar tech

735
00:33:21,059 --> 00:33:26,490
is a commercial company that has a stack

736
00:33:23,549 --> 00:33:29,399
analysis capabilities the other company

737
00:33:26,490 --> 00:33:31,409
is Kestrel technologies who has a track

738
00:33:29,399 --> 00:33:33,870
record of doing great rnd and has

739
00:33:31,409 --> 00:33:34,890
technologies they have developed and

740
00:33:33,870 --> 00:33:36,120
some of the technology has been

741
00:33:34,890 --> 00:33:39,750
developed in our program they have a

742
00:33:36,120 --> 00:33:42,658
have a static analyzer called code Hawk

743
00:33:39,750 --> 00:33:44,490
which is a very sound stack and other

744
00:33:42,659 --> 00:33:46,890
tools that mathematically prove

745
00:33:44,490 --> 00:33:50,700
collocations are safe for memory safety

746
00:33:46,890 --> 00:33:52,620
type vulnerabilities so leveraging those

747
00:33:50,700 --> 00:33:54,899
two and let's say you know I eventually

748
00:33:52,620 --> 00:33:57,449
have a downselect I see the pathway to

749
00:33:54,899 --> 00:34:01,168
commercialization one of my biggest

750
00:33:57,450 --> 00:34:03,450
things if anything are fun anything that

751
00:34:01,169 --> 00:34:06,510
I find I haven't had a clear

752
00:34:03,450 --> 00:34:08,190
understanding of commercialization so

753
00:34:06,510 --> 00:34:10,770
before I have fun in before I come up

754
00:34:08,190 --> 00:34:13,649
with the topic before if even if I get a

755
00:34:10,770 --> 00:34:16,349
white paper or as some type of proposal

756
00:34:13,649 --> 00:34:18,469
I start from the end and work my way

757
00:34:16,349 --> 00:34:21,419
back I need to understand use cases I

758
00:34:18,469 --> 00:34:23,819
need to understand potential

759
00:34:21,418 --> 00:34:25,949
stakeholders I need to be able to have a

760
00:34:23,820 --> 00:34:26,909
good understanding of how those use

761
00:34:25,949 --> 00:34:29,399
cases

762
00:34:26,909 --> 00:34:31,470
be operationalized so that we can

763
00:34:29,399 --> 00:34:34,020
increase the adoption rate and really

764
00:34:31,469 --> 00:34:36,529
remove the barrier for tech transition

765
00:34:34,020 --> 00:34:39,418
and commercialization so that's one

766
00:34:36,530 --> 00:34:42,690
because we are developing these these

767
00:34:39,418 --> 00:34:44,730
tools as open-source there are already

768
00:34:42,690 --> 00:34:46,829
some communities with some of the tools

769
00:34:44,730 --> 00:34:48,359
that were selected I'm not gonna

770
00:34:46,829 --> 00:34:50,369
necessary in to some of the tools each

771
00:34:48,359 --> 00:34:52,679
performer selected whatever tools they

772
00:34:50,369 --> 00:34:54,059
wanted the candidate tools so

773
00:34:52,679 --> 00:34:55,760
essentially they were a list of

774
00:34:54,059 --> 00:34:59,520
candidates who's they selected and

775
00:34:55,760 --> 00:35:01,170
across Java Python use you know one of

776
00:34:59,520 --> 00:35:04,470
the goals of stamp really was

777
00:35:01,170 --> 00:35:06,630
listen dynamic programming languages are

778
00:35:04,470 --> 00:35:08,490
on the rise if you look at some studies

779
00:35:06,630 --> 00:35:10,319
there are some of the more popular

780
00:35:08,490 --> 00:35:12,720
programming languages that are being

781
00:35:10,319 --> 00:35:14,549
used so I wanted to also have stamp

782
00:35:12,720 --> 00:35:16,379
focus on some dynamic programming

783
00:35:14,549 --> 00:35:18,150
languages and some of these open-source

784
00:35:16,380 --> 00:35:20,880
static analysis tools already have

785
00:35:18,150 --> 00:35:22,950
communities if you look at it if you

786
00:35:20,880 --> 00:35:25,589
look from grammars tech perspective the

787
00:35:22,950 --> 00:35:28,770
stuff they developing I potentially see

788
00:35:25,589 --> 00:35:32,009
a pathway into their flagship product

789
00:35:28,770 --> 00:35:34,559
which increases the adoption rate so

790
00:35:32,010 --> 00:35:36,990
from my perspective if I find something

791
00:35:34,559 --> 00:35:38,970
I want folks to use it I want to get the

792
00:35:36,990 --> 00:35:41,308
stuff in the hands of folks and I want

793
00:35:38,970 --> 00:35:43,709
increase the chances of doing it and

794
00:35:41,309 --> 00:35:45,690
commercialisation provides a unique way

795
00:35:43,710 --> 00:35:53,220
to do that so hopefully I answered your

796
00:35:45,690 --> 00:35:54,900
question any more questions okay thank

797
00:35:53,220 --> 00:35:58,069
you for your time I appreciate oh one

798
00:35:54,900 --> 00:35:58,069
more one more one more one more

799
00:35:59,420 --> 00:36:06,650
how are the Juliet test cases and how

800
00:36:02,579 --> 00:36:06,650
much are they being used as reference

801
00:36:06,680 --> 00:36:14,029
so Julie I believe was developed

802
00:36:08,750 --> 00:36:18,860
somewhere around 2010 I believe so every

803
00:36:14,030 --> 00:36:22,700
year NIST or every every other year so

804
00:36:18,860 --> 00:36:26,120
this has a program called sate static

805
00:36:22,700 --> 00:36:28,310
static analysis 2x position with a reach

806
00:36:26,120 --> 00:36:30,410
out to community whether you are

807
00:36:28,310 --> 00:36:32,270
individual tool developer or your

808
00:36:30,410 --> 00:36:34,750
commercial tool developer or open source

809
00:36:32,270 --> 00:36:37,640
and they have a tool study called safe

810
00:36:34,750 --> 00:36:40,670
any and part of it is they use juliet as

811
00:36:37,640 --> 00:36:43,640
well as some other datasets as part of

812
00:36:40,670 --> 00:36:46,490
this one of the biggest arguments and

813
00:36:43,640 --> 00:36:49,009
I've learned a lot from working with

814
00:36:46,490 --> 00:36:50,750
NIST and other government agencies one

815
00:36:49,010 --> 00:36:54,040
of the biggest arguments is I looted too

816
00:36:50,750 --> 00:36:58,820
in the talk is that many believe that

817
00:36:54,040 --> 00:37:02,630
juliet does not represent real code it's

818
00:36:58,820 --> 00:37:04,310
artificial synthetic small test cases

819
00:37:02,630 --> 00:37:06,500
and I said if we're going to really

820
00:37:04,310 --> 00:37:09,140
advance the state of the art we need

821
00:37:06,500 --> 00:37:11,300
another evolution that represent rural

822
00:37:09,140 --> 00:37:14,270
programs so Julia is currently being

823
00:37:11,300 --> 00:37:17,300
used but a lot of commercial guys don't

824
00:37:14,270 --> 00:37:19,700
like using juliet because of that simple

825
00:37:17,300 --> 00:37:21,470
fact so one of the questions I posed to

826
00:37:19,700 --> 00:37:25,339
my developers why do tools struggle with

827
00:37:21,470 --> 00:37:26,779
Julia do lesson is very simplistic so

828
00:37:25,340 --> 00:37:29,380
that's one of the questions that we look

829
00:37:26,780 --> 00:37:32,060
to hope to answer with more certainty

830
00:37:29,380 --> 00:37:33,950
with the swamp program why are two

831
00:37:32,060 --> 00:37:37,690
struggling if if I'm a commercial tool

832
00:37:33,950 --> 00:37:40,129
and I claim I can handle complex code

833
00:37:37,690 --> 00:37:42,680
why do I struggle with very simplistic

834
00:37:40,130 --> 00:37:44,810
code I mean there are some thoughts

835
00:37:42,680 --> 00:37:46,100
about it but I think foundationally from

836
00:37:44,810 --> 00:37:48,799
a some foundational science perspective

837
00:37:46,100 --> 00:37:50,960
I want to prove or disprove that because

838
00:37:48,800 --> 00:37:52,310
I believe if we can have more

839
00:37:50,960 --> 00:37:54,860
information and more certainty around

840
00:37:52,310 --> 00:37:56,720
that particular problem it potentially

841
00:37:54,860 --> 00:37:58,960
opens the pathway to innovate and

842
00:37:56,720 --> 00:38:03,859
modernize around static analysis

843
00:37:58,960 --> 00:38:06,160
hopefully I answered your question one

844
00:38:03,860 --> 00:38:06,160
more question

845
00:38:06,510 --> 00:38:21,720
you mentioned automated modeling right

846
00:38:19,410 --> 00:38:23,730
so as part of a stem project now I'll

847
00:38:21,720 --> 00:38:26,009
talk about we're building it automated

848
00:38:23,730 --> 00:38:28,260
ask them application security

849
00:38:26,010 --> 00:38:31,080
threatening tech my own it's a program

850
00:38:28,260 --> 00:38:34,200
that I have as part of my portfolio and

851
00:38:31,080 --> 00:38:35,759
DHS S&T cyber security division we're

852
00:38:34,200 --> 00:38:38,700
building an automated threat modeling

853
00:38:35,760 --> 00:38:39,900
capability now and I think and as I

854
00:38:38,700 --> 00:38:42,689
mentioned in the tall

855
00:38:39,900 --> 00:38:44,760
I believe threat modeling is going to be

856
00:38:42,690 --> 00:38:47,810
a core part of all security testing

857
00:38:44,760 --> 00:38:50,850
because it has the intelligence the guy

858
00:38:47,810 --> 00:38:54,150
testers two parts of the attack surface

859
00:38:50,850 --> 00:38:56,430
or parts of the code or system that have

860
00:38:54,150 --> 00:38:58,020
architectural relevance and where the

861
00:38:56,430 --> 00:39:01,080
architecture is it usually is where your

862
00:38:58,020 --> 00:39:03,750
security patterns are implement are part

863
00:39:01,080 --> 00:39:07,830
of the design so if we can guide folks

864
00:39:03,750 --> 00:39:10,290
and use static and dynamic and piston

865
00:39:07,830 --> 00:39:13,230
pin testing tools to guide them to areas

866
00:39:10,290 --> 00:39:14,730
that needs the testing based on the

867
00:39:13,230 --> 00:39:16,800
threat modeling and the risk and things

868
00:39:14,730 --> 00:39:19,200
we identify I think we're doing a better

869
00:39:16,800 --> 00:39:21,060
job because today we get a bunch of

870
00:39:19,200 --> 00:39:23,609
false positives we don't know what to

871
00:39:21,060 --> 00:39:25,080
triage that's part of the problem right

872
00:39:23,610 --> 00:39:27,870
so I think if we can provide that

873
00:39:25,080 --> 00:39:31,470
capability I think we can have a more

874
00:39:27,870 --> 00:39:33,779
focused more guided devi' dev SEC ops in

875
00:39:31,470 --> 00:39:36,359
terms of testing which will reduce time

876
00:39:33,780 --> 00:39:41,070
help developers work faster and work at

877
00:39:36,360 --> 00:39:44,400
speed application security threat and

878
00:39:41,070 --> 00:39:45,420
attack modeling as I call it in the

879
00:39:44,400 --> 00:39:47,610
government you know there's there's

880
00:39:45,420 --> 00:39:50,880
acronyms for everything right so we call

881
00:39:47,610 --> 00:39:53,700
it ask them ask them and it was it was a

882
00:39:50,880 --> 00:39:55,770
broad agency announcement and if you

883
00:39:53,700 --> 00:39:58,200
google asked am applications threatened

884
00:39:55,770 --> 00:40:01,460
attack mile and go to FBO gov you'll

885
00:39:58,200 --> 00:40:01,460
find information on that project

886
00:40:09,800 --> 00:40:18,990
so two of my performers are here secure

887
00:40:15,630 --> 00:40:21,180
decisions who's the elite P eye on the a

888
00:40:18,990 --> 00:40:23,759
stem project Chris Hall can you raise

889
00:40:21,180 --> 00:40:25,980
your hand so Chris has information on a

890
00:40:23,760 --> 00:40:28,170
stem swamp in a box

891
00:40:25,980 --> 00:40:29,760
my role living here has all the

892
00:40:28,170 --> 00:40:32,640
information on Swallow box and I

893
00:40:29,760 --> 00:40:36,660
appreciate you guys coming today to join

894
00:40:32,640 --> 00:40:39,029
us today so I think we're swapping a box

895
00:40:36,660 --> 00:40:40,440
you mentioned you found it already where

896
00:40:39,030 --> 00:40:43,740
asked him we're looking to have

897
00:40:40,440 --> 00:40:46,920
something that could be on market to the

898
00:40:43,740 --> 00:40:50,939
market sometime mid April of next year

899
00:40:46,920 --> 00:40:52,940
and as always we're looking for pilot

900
00:40:50,940 --> 00:40:56,130
customers folks who we can demonstrate

901
00:40:52,940 --> 00:40:59,520
some proof of concept some some level of

902
00:40:56,130 --> 00:41:00,750
MVP and potentially look for someone to

903
00:40:59,520 --> 00:41:02,490
be transition partner so we can

904
00:41:00,750 --> 00:41:04,430
transition to one more question that

905
00:41:02,490 --> 00:41:08,509
they get right

906
00:41:04,430 --> 00:41:10,819
I don't have a preference I think what

907
00:41:08,510 --> 00:41:13,430
we're doing we're going to leverage kind

908
00:41:10,820 --> 00:41:14,900
of both to a certain extent I don't

909
00:41:13,430 --> 00:41:17,660
think there's a right or wrong in terms

910
00:41:14,900 --> 00:41:18,980
of approach to threat modeling one of

911
00:41:17,660 --> 00:41:20,870
the things we do is we've taken a

912
00:41:18,980 --> 00:41:23,210
different approach and we're focusing

913
00:41:20,870 --> 00:41:25,220
more on the architecture side because

914
00:41:23,210 --> 00:41:27,110
one of the things that we do have to do

915
00:41:25,220 --> 00:41:29,750
is we have to start getting to

916
00:41:27,110 --> 00:41:31,910
developers to think about the

917
00:41:29,750 --> 00:41:34,700
architecture and have it in their daily

918
00:41:31,910 --> 00:41:37,879
activities so that we can prevent

919
00:41:34,700 --> 00:41:39,799
architecture erosion so so this creative

920
00:41:37,880 --> 00:41:41,840
features that has been defined us by the

921
00:41:39,800 --> 00:41:44,830
architecture can be implemented

922
00:41:41,840 --> 00:41:46,730
correctly in code but to do that I think

923
00:41:44,830 --> 00:41:48,259
developers need to have an understanding

924
00:41:46,730 --> 00:41:50,360
of the architecture so they can

925
00:41:48,260 --> 00:41:53,990
implement and enforce security features

926
00:41:50,360 --> 00:41:56,270
properly in code all right I think my

927
00:41:53,990 --> 00:41:58,250
time is up thank you thanks everyone

928
00:41:56,270 --> 00:42:00,430
enjoy the rest of the day drug Boston

929
00:41:58,250 --> 00:42:00,430
think

