1
00:00:00,000 --> 00:00:03,540
testers good morning everybody I hope

2
00:00:03,540 --> 00:00:06,390
you drunk plenty of water yesterday and

3
00:00:06,390 --> 00:00:08,730
you have plenty of food are you feeling

4
00:00:08,730 --> 00:00:11,010
perfectly fine this morning and you

5
00:00:11,010 --> 00:00:14,179
enjoy breakfast so ready for day two

6
00:00:14,179 --> 00:00:17,190
so yeah the the agenda very similar to

7
00:00:17,190 --> 00:00:22,080
yesterday except the keynote is in the

8
00:00:22,080 --> 00:00:24,750
afternoon in the just before the end so

9
00:00:24,750 --> 00:00:25,949
it's a closing keynote rather than

10
00:00:25,949 --> 00:00:28,230
opening keynote everything as we were

11
00:00:28,230 --> 00:00:29,789
before so for those of you who are now

12
00:00:29,789 --> 00:00:31,710
registered today this is the big room

13
00:00:31,710 --> 00:00:34,170
the other one is called the other room

14
00:00:34,170 --> 00:00:35,640
and then you can either go up these

15
00:00:35,640 --> 00:00:38,790
stairs or up the stairs in the other

16
00:00:38,790 --> 00:00:40,680
room to get to the mezzanine for the

17
00:00:40,680 --> 00:00:43,050
workshops the workshops is a separate

18
00:00:43,050 --> 00:00:44,940
track that runs alongside the talk track

19
00:00:44,940 --> 00:00:46,770
so the sessions are in here and the

20
00:00:46,770 --> 00:00:49,440
workshop is up there lunch will be

21
00:00:49,440 --> 00:00:51,629
served in the other room and also will

22
00:00:51,629 --> 00:00:53,489
there's coffee and snacks and everything

23
00:00:53,489 --> 00:00:56,399
else there as well it is confusing isn't

24
00:00:56,399 --> 00:00:58,710
it yeah should be called this room and

25
00:00:58,710 --> 00:01:02,219
the other room yeah and anyway sorry

26
00:01:02,219 --> 00:01:05,309
that just to remind you all the session

27
00:01:05,309 --> 00:01:07,140
abstracts the BIOS everything about the

28
00:01:07,140 --> 00:01:09,960
speakers will be online within the next

29
00:01:09,960 --> 00:01:11,880
few days of the conference this is the

30
00:01:11,880 --> 00:01:15,060
link to get them to all the speakers

31
00:01:15,060 --> 00:01:18,810
would provide us oh sorry all their

32
00:01:18,810 --> 00:01:21,390
presentations we recording everything

33
00:01:21,390 --> 00:01:24,450
and fortunately for me that will be put

34
00:01:24,450 --> 00:01:27,119
online as well within the next two to

35
00:01:27,119 --> 00:01:28,770
three weeks so everything will be

36
00:01:28,770 --> 00:01:31,520
available for you

37
00:01:31,520 --> 00:01:33,960
and of course a big thank you to our

38
00:01:33,960 --> 00:01:35,490
sponsors is really important for us to

39
00:01:35,490 --> 00:01:37,230
you know to be able to run this kind of

40
00:01:37,230 --> 00:01:39,750
conference with sponsors so do you make

41
00:01:39,750 --> 00:01:42,090
sure that you go and talk to them thank

42
00:01:42,090 --> 00:01:43,740
you to f5 and snicks our platinum

43
00:01:43,740 --> 00:01:45,930
sponsors je furt vera coach Kyoko

44
00:01:45,930 --> 00:01:47,670
Dwaraka one in seven type is out gold

45
00:01:47,670 --> 00:01:50,670
sponsors detective I areas risk contrast

46
00:01:50,670 --> 00:01:52,620
security equal experts and Apatow for

47
00:01:52,620 --> 00:01:54,420
our silver sponsors so they're all out

48
00:01:54,420 --> 00:01:57,180
there in the in the expo hall so please

49
00:01:57,180 --> 00:02:00,720
do go and and speak to them and get your

50
00:02:00,720 --> 00:02:03,420
stamps yes don't forget you've got your

51
00:02:03,420 --> 00:02:05,760
sponsor passport getting a stamp you get

52
00:02:05,760 --> 00:02:07,530
all the stamps you just bring it back to

53
00:02:07,530 --> 00:02:11,370
one of us white t-shirt or the grey

54
00:02:11,370 --> 00:02:14,130
t-shirt the red t-shirt and we will just

55
00:02:14,130 --> 00:02:16,350
process it and at the end of the day we

56
00:02:16,350 --> 00:02:19,620
will pick three winners for three hype

57
00:02:19,620 --> 00:02:21,390
ads they real once it's not just a

58
00:02:21,390 --> 00:02:24,510
picture so don't worry and I think there

59
00:02:24,510 --> 00:02:26,160
are ten point something inch now is even

60
00:02:26,160 --> 00:02:28,200
there's a there's a 10% bonus this year

61
00:02:28,200 --> 00:02:32,070
no iPad size yeah for sure so yeah

62
00:02:32,070 --> 00:02:34,140
there's another thing which is which we

63
00:02:34,140 --> 00:02:36,989
we kind of started off in Seattle where

64
00:02:36,989 --> 00:02:41,180
we asked for different categories of of

65
00:02:41,180 --> 00:02:43,590
awards to be given out one is

66
00:02:43,590 --> 00:02:45,510
outstanding dev dev sec ops community

67
00:02:45,510 --> 00:02:48,209
most effective dev psych ops team and

68
00:02:48,209 --> 00:02:50,760
outstanding dev Cyclops commute oh

69
00:02:50,760 --> 00:02:52,320
there's three okay the other one is

70
00:02:52,320 --> 00:02:56,450
individual and what we what we did was

71
00:02:56,450 --> 00:02:59,400
we we wanted to get we wanted to really

72
00:02:59,400 --> 00:03:01,050
give back to the community give back to

73
00:03:01,050 --> 00:03:02,640
teams that were that were pushing dev

74
00:03:02,640 --> 00:03:04,440
SEC dev psych ops these are the

75
00:03:04,440 --> 00:03:06,290
finalists so during the closing keynote

76
00:03:06,290 --> 00:03:09,269
tonight we will be giving out those

77
00:03:09,269 --> 00:03:11,700
awards on stage so so good luck to all

78
00:03:11,700 --> 00:03:15,900
the finalists there as well and just

79
00:03:15,900 --> 00:03:18,150
don't forget we've got a survey the aim

80
00:03:18,150 --> 00:03:21,060
of this conference is it's made for you

81
00:03:21,060 --> 00:03:23,640
by you so just give us your feedback

82
00:03:23,640 --> 00:03:26,160
good bad we've got five minutes serve

83
00:03:26,160 --> 00:03:27,690
age because good to deaf sitcom becomes

84
00:03:27,690 --> 00:03:29,069
life survey

85
00:03:29,069 --> 00:03:30,689
and that will allow us to actually

86
00:03:30,689 --> 00:03:33,030
tailor the event accordingly to what you

87
00:03:33,030 --> 00:03:37,889
wish or what you don't wish to see and

88
00:03:37,889 --> 00:03:39,480
that's that's pretty much it enjoy the

89
00:03:39,480 --> 00:03:41,400
conference and do make sure you even if

90
00:03:41,400 --> 00:03:42,930
you registered yesterday please go and

91
00:03:42,930 --> 00:03:44,430
see the registration desk because there

92
00:03:44,430 --> 00:03:46,530
are a whole bunch more dev set con

93
00:03:46,530 --> 00:03:49,019
shirts which landed a day late so pick

94
00:03:49,019 --> 00:03:50,969
up your dev set con shirt there's also a

95
00:03:50,969 --> 00:03:52,709
bunch of notebooks our swag back with

96
00:03:52,709 --> 00:03:55,739
some some other details in there you

97
00:03:55,739 --> 00:03:57,900
should also have another lunch ticket so

98
00:03:57,900 --> 00:04:00,120
you can get that for the day that's also

99
00:04:00,120 --> 00:04:03,540
at registration and yeah enjoy the

100
00:04:03,540 --> 00:04:04,889
conference have a great conference our

101
00:04:04,889 --> 00:04:07,549
first speaker today let me introduce

102
00:04:07,549 --> 00:04:11,129
Matt Carroll up on stage big big round

103
00:04:11,129 --> 00:04:17,279
of applause for mark so Matt as an

104
00:04:17,279 --> 00:04:18,899
infrastructure security engineer at Yelp

105
00:04:18,899 --> 00:04:22,639
and Matt session is a kernel of truth

106
00:04:22,639 --> 00:04:27,570
intrusion detection and attestation with

107
00:04:27,570 --> 00:04:31,830
EB PF so hopefully we had some fun with

108
00:04:31,830 --> 00:04:34,199
this earlier hopefully this is going to

109
00:04:34,199 --> 00:04:42,110
work take to arrange windows about 5:00

110
00:04:42,110 --> 00:04:46,289
okay that looks good that also looks

111
00:04:46,289 --> 00:04:48,380
good number words things are working

112
00:04:48,380 --> 00:04:51,690
who'd have thunk okay I hope you've all

113
00:04:51,690 --> 00:04:53,190
had your coffee this morning because I'm

114
00:04:53,190 --> 00:04:55,800
about to drop 57 slides on you and a

115
00:04:55,800 --> 00:04:57,870
live demo in 40 minutes like a

116
00:04:57,870 --> 00:05:03,300
stone-cold maniac okay okay so a kernel

117
00:05:03,300 --> 00:05:07,650
of truth so firstly before we get into

118
00:05:07,650 --> 00:05:10,289
what I'm talking about Who am I I think

119
00:05:10,289 --> 00:05:11,490
it's handy to give a little bit of

120
00:05:11,490 --> 00:05:14,099
context as to why I approach problems in

121
00:05:14,099 --> 00:05:17,310
the terrifying way that I do so my name

122
00:05:17,310 --> 00:05:19,530
is Matt I'm an infrastructure security

123
00:05:19,530 --> 00:05:22,620
engineering Yelp so work out the London

124
00:05:22,620 --> 00:05:26,340
office I used to be a Sai reliability

125
00:05:26,340 --> 00:05:28,860
engineer which is like Isis admin but

126
00:05:28,860 --> 00:05:31,979
was lots more yeah more and in my

127
00:05:31,979 --> 00:05:34,080
personal life I'm also a hand wringing

128
00:05:34,080 --> 00:05:38,460
Linux botherer so just to touch on the

129
00:05:38,460 --> 00:05:41,460
infrastructure security engineer part

130
00:05:41,460 --> 00:05:43,830
as we heard of a lot of yesterday it's

131
00:05:43,830 --> 00:05:46,280
very good to didn't stop my timer

132
00:05:46,280 --> 00:05:50,870
terrible it's it's really good to

133
00:05:50,870 --> 00:05:54,300
concentrate on bringing secure defaults

134
00:05:54,300 --> 00:05:57,150
to a platform so you know as a second

135
00:05:57,150 --> 00:05:59,700
line of defense if you can have a secure

136
00:05:59,700 --> 00:06:01,410
operating system secure platform

137
00:06:01,410 --> 00:06:03,540
everything like that you're in a much

138
00:06:03,540 --> 00:06:05,370
better place you're eliminating classes

139
00:06:05,370 --> 00:06:10,010
of vulnerabilities so that's what I do

140
00:06:10,010 --> 00:06:14,580
so what's this talk about basically we

141
00:06:14,580 --> 00:06:16,560
built a supplementary intrusion

142
00:06:16,560 --> 00:06:17,700
detection system

143
00:06:17,700 --> 00:06:20,550
I say supplementary because it's not

144
00:06:20,550 --> 00:06:22,170
threat model there yet as to how you

145
00:06:22,170 --> 00:06:24,540
could circumvent it but I'm pretty sure

146
00:06:24,540 --> 00:06:28,910
it's good but it's we'll get into that

147
00:06:28,910 --> 00:06:32,130
but it's basically about utilizing OS

148
00:06:32,130 --> 00:06:35,010
features as security features and it's

149
00:06:35,010 --> 00:06:36,600
told roughly in the order that it

150
00:06:36,600 --> 00:06:41,880
happened so additionally some of the

151
00:06:41,880 --> 00:06:43,290
things I want to highlight here is like

152
00:06:43,290 --> 00:06:45,120
you know part of this talk is not just

153
00:06:45,120 --> 00:06:47,310
the technical part but also how to get a

154
00:06:47,310 --> 00:06:48,960
Greenfield security project off the

155
00:06:48,960 --> 00:06:53,100
ground and so like personally I'm on a

156
00:06:53,100 --> 00:06:54,690
team that gives me a lot of agency and a

157
00:06:54,690 --> 00:06:56,190
company that gives me a lot of agency

158
00:06:56,190 --> 00:06:58,170
but at the end of the day the Yelp is

159
00:06:58,170 --> 00:07:00,450
not security company that's not a

160
00:07:00,450 --> 00:07:05,090
product so you know there is some

161
00:07:05,210 --> 00:07:08,100
convincing the org to let you do things

162
00:07:08,100 --> 00:07:10,650
and doing a greenfield security projects

163
00:07:10,650 --> 00:07:13,140
kind of a difficult thing so part of

164
00:07:13,140 --> 00:07:15,120
that is treating defensive security like

165
00:07:15,120 --> 00:07:18,390
economics which I'll get into a little

166
00:07:18,390 --> 00:07:22,950
bit later but also like if you want to

167
00:07:22,950 --> 00:07:24,150
get a project off the ground

168
00:07:24,150 --> 00:07:25,530
sometimes you have to focus on

169
00:07:25,530 --> 00:07:27,450
delivering like that business value

170
00:07:27,450 --> 00:07:30,000
early on much like any any feature

171
00:07:30,000 --> 00:07:33,090
developer has to so one of the ways to

172
00:07:33,090 --> 00:07:35,010
do this is just to glue together extant

173
00:07:35,010 --> 00:07:37,380
technologies to bootstrap your custom

174
00:07:37,380 --> 00:07:41,040
tools but also use your business logic

175
00:07:41,040 --> 00:07:44,760
to your advantage so part of this is

176
00:07:44,760 --> 00:07:47,670
about the fact that the Yelp or a web

177
00:07:47,670 --> 00:07:49,030
property as I'm

178
00:07:49,030 --> 00:07:51,400
apparently about to get into so Yelper a

179
00:07:51,400 --> 00:07:54,430
web property so a lot of this is based

180
00:07:54,430 --> 00:07:57,070
around the idea that lots of people will

181
00:07:57,070 --> 00:07:59,860
be making TCP connections into us but we

182
00:07:59,860 --> 00:08:01,690
don't make that many out to the Internet

183
00:08:01,690 --> 00:08:04,480
so just hold that in the back of your

184
00:08:04,480 --> 00:08:07,480
head as to why why we've done things the

185
00:08:07,480 --> 00:08:10,420
way that we have so yeah you might not

186
00:08:10,420 --> 00:08:11,710
have heard of us because we actually

187
00:08:11,710 --> 00:08:14,530
operate primarily in primarily in North

188
00:08:14,530 --> 00:08:16,540
America despite the fact that we've got

189
00:08:16,540 --> 00:08:20,230
engineering teams in London so our

190
00:08:20,230 --> 00:08:22,270
mission is connecting people with great

191
00:08:22,270 --> 00:08:24,100
local businesses so we've got a web site

192
00:08:24,100 --> 00:08:26,800
going out and it's basically about being

193
00:08:26,800 --> 00:08:29,590
able to define the sort of businesses

194
00:08:29,590 --> 00:08:31,750
you want to you want to go to might be a

195
00:08:31,750 --> 00:08:33,960
restaurant might be a plumber whatever

196
00:08:33,960 --> 00:08:37,690
so we've got millions of businesses 4.6

197
00:08:37,690 --> 00:08:40,090
million active claimed local businesses

198
00:08:40,090 --> 00:08:43,419
as a June this year Yelp users have

199
00:08:43,419 --> 00:08:46,750
written nearly 200 million local reviews

200
00:08:46,750 --> 00:08:50,290
we have millions of photos but the main

201
00:08:50,290 --> 00:08:52,990
reason that I'm telling you this other

202
00:08:52,990 --> 00:08:55,030
than because I'm supposed to oh yeah

203
00:08:55,030 --> 00:08:59,260
also we're hiring is that we have over

204
00:08:59,260 --> 00:09:02,320
300 services and that's in addition to a

205
00:09:02,320 --> 00:09:04,930
slightly more monolithic main

206
00:09:04,930 --> 00:09:07,090
application that's over 3 million lines

207
00:09:07,090 --> 00:09:11,680
of code so most of this is Python so the

208
00:09:11,680 --> 00:09:14,860
point of this being that as I promised

209
00:09:14,860 --> 00:09:18,100
in my tow proposal and then subsequently

210
00:09:18,100 --> 00:09:19,330
read and when the home of God I've got

211
00:09:19,330 --> 00:09:24,550
to fit all of this in the talk we we

212
00:09:24,550 --> 00:09:26,500
basically run on most of our workloads

213
00:09:26,500 --> 00:09:29,800
on our own platform as a service and so

214
00:09:29,800 --> 00:09:33,070
largely this is just like the Python

215
00:09:33,070 --> 00:09:36,130
business logic around may sauce marathon

216
00:09:36,130 --> 00:09:38,260
and docker we're actually migrating our

217
00:09:38,260 --> 00:09:41,470
back in towards kubernetes but the idea

218
00:09:41,470 --> 00:09:43,600
here is that developers should be able

219
00:09:43,600 --> 00:09:45,640
to deploy services on a common platform

220
00:09:45,640 --> 00:09:47,590
without worrying about all the guts

221
00:09:47,590 --> 00:09:53,680
underneath so so effectively we've got a

222
00:09:53,680 --> 00:09:55,480
bunch of developers doing desperate

223
00:09:55,480 --> 00:09:57,130
things working on disparate services

224
00:09:57,130 --> 00:09:59,350
like I said over 300 different ones and

225
00:09:59,350 --> 00:10:01,670
they're deploying onto these common work

226
00:10:01,670 --> 00:10:05,420
servers so how do you stay on top of

227
00:10:05,420 --> 00:10:07,670
what the server is supposed to be doing

228
00:10:07,670 --> 00:10:10,010
what I mean like it used to be that you

229
00:10:10,010 --> 00:10:11,570
know you'd have your batch server and

230
00:10:11,570 --> 00:10:13,220
that might be running this one job that

231
00:10:13,220 --> 00:10:15,320
always reaches out to this one place on

232
00:10:15,320 --> 00:10:17,270
the internet but now we've got this

233
00:10:17,270 --> 00:10:19,880
homogeneous computing environment so how

234
00:10:19,880 --> 00:10:22,160
do you stay on top of what various

235
00:10:22,160 --> 00:10:24,980
pieces of the code base are doing so one

236
00:10:24,980 --> 00:10:26,630
of the things that we use on the

237
00:10:26,630 --> 00:10:28,640
infrastructure security team is Amazon

238
00:10:28,640 --> 00:10:30,080
guard duty because we're heavily

239
00:10:30,080 --> 00:10:35,150
invested in in AWS and what this does is

240
00:10:35,150 --> 00:10:37,370
it will tell you about anything that it

241
00:10:37,370 --> 00:10:38,990
thinks is machine learning you know

242
00:10:38,990 --> 00:10:43,210
suspicious between your ec2 instances

243
00:10:43,210 --> 00:10:48,410
and the Internet at large so let's just

244
00:10:48,410 --> 00:10:50,690
dive straight into an example I don't

245
00:10:50,690 --> 00:10:52,640
know how well you can see this but

246
00:10:52,640 --> 00:10:55,400
effectively this is an example of of a

247
00:10:55,400 --> 00:10:58,400
guard duty of some guard duty output

248
00:10:58,400 --> 00:11:01,370
collapse down a little bit so what the

249
00:11:01,370 --> 00:11:03,950
description says ec2 instance blah is

250
00:11:03,950 --> 00:11:05,900
communicating with a remote host on an

251
00:11:05,900 --> 00:11:09,440
unusual server port so we dig in a

252
00:11:09,440 --> 00:11:12,650
little bit okay we see that so with with

253
00:11:12,650 --> 00:11:15,130
guard duty you can dig into things like

254
00:11:15,130 --> 00:11:20,330
the like the the tags and things for the

255
00:11:20,330 --> 00:11:22,520
ec2 instance so it's pretty metadata

256
00:11:22,520 --> 00:11:24,290
rich in that sense for you digging in

257
00:11:24,290 --> 00:11:27,080
you see okay so this is a Corp on that

258
00:11:27,080 --> 00:11:29,960
host so root is routing outbound traffic

259
00:11:29,960 --> 00:11:31,250
for other things so it's kind of

260
00:11:31,250 --> 00:11:35,090
unsurprising but whatever they need dig

261
00:11:35,090 --> 00:11:36,620
in a bit more and it says okay

262
00:11:36,620 --> 00:11:38,510
connection direction out bounces like

263
00:11:38,510 --> 00:11:40,790
well what do you expect it's an a server

264
00:11:40,790 --> 00:11:42,830
you're digging a little bit more and we

265
00:11:42,830 --> 00:11:45,320
see the port is wait to put the ports

266
00:11:45,320 --> 00:11:50,840
two two two two alternate SSH why is why

267
00:11:50,840 --> 00:11:53,300
on that server doing alternate SSH out

268
00:11:53,300 --> 00:11:56,600
to the internet I mean so where's this

269
00:11:56,600 --> 00:12:01,100
going this is an isp China Mobile is

270
00:12:01,100 --> 00:12:05,950
going out to a consumer ISP in China

271
00:12:06,890 --> 00:12:10,670
that's not goods well luckily actually

272
00:12:10,670 --> 00:12:12,110
after much digging on this particular

273
00:12:12,110 --> 00:12:15,980
allure I discovered the guard duty can

274
00:12:15,980 --> 00:12:17,540
sometimes get confused between the

275
00:12:17,540 --> 00:12:19,000
definitions of inbound and outbound

276
00:12:19,000 --> 00:12:21,770
especially if some skiddy is scanning

277
00:12:21,770 --> 00:12:23,750
your public IPs and trying to brute

278
00:12:23,750 --> 00:12:26,000
force SSH with their source port as - -

279
00:12:26,000 --> 00:12:29,150
- - but it demonstrates an important

280
00:12:29,150 --> 00:12:31,670
thing right so when these alerts fire

281
00:12:31,670 --> 00:12:33,110
and especially when they're just for

282
00:12:33,110 --> 00:12:34,460
things that are actually business as

283
00:12:34,460 --> 00:12:37,790
usual we have to kind of figure out our

284
00:12:37,790 --> 00:12:39,980
test station from inference because one

285
00:12:39,980 --> 00:12:41,570
of these alerts confer and I can log on

286
00:12:41,570 --> 00:12:43,640
to the box and I'm like well the process

287
00:12:43,640 --> 00:12:47,650
is gone like it's not doing it anymore

288
00:12:47,650 --> 00:12:49,970
so you have to look at like things like

289
00:12:49,970 --> 00:12:52,010
what host class connected what IP

290
00:12:52,010 --> 00:12:55,550
address or asnd to connect to what was

291
00:12:55,550 --> 00:12:57,410
on the other end how long was the

292
00:12:57,410 --> 00:12:59,720
connection what direction was in how

293
00:12:59,720 --> 00:13:01,550
many bytes were transferred you can see

294
00:13:01,550 --> 00:13:03,170
we're still not getting into the meat of

295
00:13:03,170 --> 00:13:06,020
what actually did that so you can look

296
00:13:06,020 --> 00:13:09,500
at what the PS logs say which obviously

297
00:13:09,500 --> 00:13:11,630
you don't want to do because that's just

298
00:13:11,630 --> 00:13:14,690
a snapshot of like processes over time

299
00:13:14,690 --> 00:13:17,540
so likelihood is a didn't catch it and

300
00:13:17,540 --> 00:13:20,630
be just because a process is running at

301
00:13:20,630 --> 00:13:22,520
the same time as a TCP connection

302
00:13:22,520 --> 00:13:25,340
doesn't mean anything that's correlation

303
00:13:25,340 --> 00:13:29,090
but it's not causality so the problem is

304
00:13:29,090 --> 00:13:31,040
that context is lost as soon as an

305
00:13:31,040 --> 00:13:34,340
instantiated process ends so like I say

306
00:13:34,340 --> 00:13:36,020
we're trying to track down what's

307
00:13:36,020 --> 00:13:37,610
connecting out to the Internet on a

308
00:13:37,610 --> 00:13:39,470
given host we know what the host is but

309
00:13:39,470 --> 00:13:41,330
we don't know what process it was it

310
00:13:41,330 --> 00:13:42,770
could have been some of our code it

311
00:13:42,770 --> 00:13:44,990
could have been a reverse shell who

312
00:13:44,990 --> 00:13:47,630
knows and part the problem here is that

313
00:13:47,630 --> 00:13:50,360
tcp/ip is also very meta data lossy

314
00:13:50,360 --> 00:13:51,440
especially because there aren't enough

315
00:13:51,440 --> 00:13:55,220
IP addresses to go around so it you know

316
00:13:55,220 --> 00:13:56,840
it causes some problems because it's got

317
00:13:56,840 --> 00:13:59,030
nothing to do with the process stream so

318
00:13:59,030 --> 00:14:01,160
we were burning quite a lot of time on

319
00:14:01,160 --> 00:14:04,010
this so every time one of these alerts

320
00:14:04,010 --> 00:14:07,250
fired we do some investigation and the

321
00:14:07,250 --> 00:14:09,500
longest investigations tended to be for

322
00:14:09,500 --> 00:14:11,330
the things that were false positives

323
00:14:11,330 --> 00:14:13,520
because you're basically rummaging

324
00:14:13,520 --> 00:14:15,590
around to prove that nothing m'lip the

325
00:14:15,590 --> 00:14:17,630
will to find something malicious but

326
00:14:17,630 --> 00:14:20,650
nothing malicious actually happened

327
00:14:20,650 --> 00:14:23,540
so what if we could reduce mean time to

328
00:14:23,540 --> 00:14:26,990
resolution for false positives so some

329
00:14:26,990 --> 00:14:28,490
kind of locked source of links of

330
00:14:28,490 --> 00:14:32,320
workload to connection and if we knew

331
00:14:32,320 --> 00:14:35,450
the actor or the workloads and we can

332
00:14:35,450 --> 00:14:37,010
call it business as usual you know that

333
00:14:37,010 --> 00:14:39,500
that that'd be great and this is where

334
00:14:39,500 --> 00:14:41,570
the economics of the thing comes in

335
00:14:41,570 --> 00:14:44,900
because effectively we can gather we can

336
00:14:44,900 --> 00:14:47,330
we can gather far more diverse metrics

337
00:14:47,330 --> 00:14:49,490
and far more different indicators of

338
00:14:49,490 --> 00:14:52,460
compromise if we don't have to spend

339
00:14:52,460 --> 00:14:54,680
quite so much time on the business as

340
00:14:54,680 --> 00:14:57,770
usual stuff so it's basically making

341
00:14:57,770 --> 00:15:00,230
yourselves more effective as a limited

342
00:15:00,230 --> 00:15:04,520
team of people so I looked into the

343
00:15:04,520 --> 00:15:07,070
problem space here so basically at Yelp

344
00:15:07,070 --> 00:15:09,710
we have two three day hackathons every

345
00:15:09,710 --> 00:15:13,520
year where you can work on really

346
00:15:13,520 --> 00:15:15,740
important things like being the bassist

347
00:15:15,740 --> 00:15:17,660
in an electro dub outfit for three days

348
00:15:17,660 --> 00:15:20,360
or you can work on really unimportant

349
00:15:20,360 --> 00:15:23,960
things like this so I thought about the

350
00:15:23,960 --> 00:15:27,490
problem space here and basically I

351
00:15:27,490 --> 00:15:30,530
decided you know what it was that I

352
00:15:30,530 --> 00:15:31,610
would like to do to solve this problem

353
00:15:31,610 --> 00:15:34,550
so when a guard duty alert fires I want

354
00:15:34,550 --> 00:15:36,260
to be able to determine if it's a false

355
00:15:36,260 --> 00:15:39,110
positive quickly I only want it for

356
00:15:39,110 --> 00:15:41,180
guard duty traffic so not internal to

357
00:15:41,180 --> 00:15:43,670
our V pcs so it follows on from that I

358
00:15:43,670 --> 00:15:46,970
only want it for outbound TCP so none

359
00:15:46,970 --> 00:15:51,020
RFC 1918 RFC 1918 is the one with with

360
00:15:51,020 --> 00:15:53,420
all of you alike one 92168 addresses is

361
00:15:53,420 --> 00:15:57,110
basically dedicating ipv4 space for

362
00:15:57,110 --> 00:16:01,760
non-public rating so I want the entire

363
00:16:01,760 --> 00:16:04,190
calling process tree so I can see full

364
00:16:04,190 --> 00:16:06,800
local causality and it's also got to

365
00:16:06,800 --> 00:16:08,450
include include process ownership

366
00:16:08,450 --> 00:16:11,870
information and finally it shouldn't

367
00:16:11,870 --> 00:16:14,660
require workload tooling and now if

368
00:16:14,660 --> 00:16:18,560
anybody's tries to add tracing into all

369
00:16:18,560 --> 00:16:20,660
of the applications across the org

370
00:16:20,660 --> 00:16:22,880
without starting like that from the

371
00:16:22,880 --> 00:16:24,800
get-go you know that these migrations

372
00:16:24,800 --> 00:16:26,420
take ages and they're pretty much

373
00:16:26,420 --> 00:16:29,360
impossible so

374
00:16:29,360 --> 00:16:31,970
I was thinking like well what do all of

375
00:16:31,970 --> 00:16:34,069
our applications have in common like I

376
00:16:34,069 --> 00:16:36,040
mean not even all of them run in docker

377
00:16:36,040 --> 00:16:40,129
or in a container either or or on pasta

378
00:16:40,129 --> 00:16:42,589
for instance but what they do all do is

379
00:16:42,589 --> 00:16:44,869
they all run on Linux and the one thing

380
00:16:44,869 --> 00:16:48,829
that we can ask is the kernel so I

381
00:16:48,829 --> 00:16:51,799
started looking at EBP F at least partly

382
00:16:51,799 --> 00:16:53,209
because it was a hackathon and I just

383
00:16:53,209 --> 00:16:55,999
felt like doing that anyway so what C

384
00:16:55,999 --> 00:16:58,309
BPF I mean this is roughly my

385
00:16:58,309 --> 00:17:02,119
explanation of EBP F it's when Linux

386
00:17:02,119 --> 00:17:04,250
kernel developers look at B s DS packet

387
00:17:04,250 --> 00:17:06,679
filter and think is this a kernel

388
00:17:06,679 --> 00:17:11,209
tracing framework so BPF originally

389
00:17:11,209 --> 00:17:16,459
comes from the BSD s and so it's the BPF

390
00:17:16,459 --> 00:17:18,769
par stands for Berkeley packet filter

391
00:17:18,769 --> 00:17:22,010
it's an internal VM accesses a device

392
00:17:22,010 --> 00:17:24,619
and this this VM has got a limited

393
00:17:24,619 --> 00:17:26,269
number of registers a limited number of

394
00:17:26,269 --> 00:17:28,179
instructions

395
00:17:28,179 --> 00:17:31,850
so when bytecode is injected into this

396
00:17:31,850 --> 00:17:33,500
VM one of the first things that happens

397
00:17:33,500 --> 00:17:35,600
is this is verified to see if there are

398
00:17:35,600 --> 00:17:37,730
any loops in it you can't have loops in

399
00:17:37,730 --> 00:17:40,130
a BPF program because if you're

400
00:17:40,130 --> 00:17:42,409
injecting code into the kernel at

401
00:17:42,409 --> 00:17:45,139
runtime and you've got an infinite loop

402
00:17:45,139 --> 00:17:47,080
in it you've just hosed your machine

403
00:17:47,080 --> 00:17:51,590
instantly so it was basically used for

404
00:17:51,590 --> 00:17:53,870
packet filtering so I don't know if

405
00:17:53,870 --> 00:17:56,210
you've ever used like freebsd use the PF

406
00:17:56,210 --> 00:17:58,190
command for firewalling that's what

407
00:17:58,190 --> 00:17:59,960
you're doing

408
00:17:59,960 --> 00:18:03,909
so EBP F the e stands for extended

409
00:18:03,909 --> 00:18:06,080
although I like to pretend it stands for

410
00:18:06,080 --> 00:18:09,409
electronic much like email electronic

411
00:18:09,409 --> 00:18:13,279
beep EF so it's also an internal VM

412
00:18:13,279 --> 00:18:16,159
that's in Linux it's also been ported

413
00:18:16,159 --> 00:18:19,490
back to FreeBSD it's got more registers

414
00:18:19,490 --> 00:18:21,350
than BPF and making a little bit more

415
00:18:21,350 --> 00:18:23,750
powerful a little bit more capable but

416
00:18:23,750 --> 00:18:26,360
actually what it's used for is hooking

417
00:18:26,360 --> 00:18:29,090
Siskel's and tracing and proxying

418
00:18:29,090 --> 00:18:33,169
sockets and you know in kernel packet

419
00:18:33,169 --> 00:18:35,600
filtering still and that's only touching

420
00:18:35,600 --> 00:18:37,520
very lightly on the capabilities I mean

421
00:18:37,520 --> 00:18:40,549
to quote Brendan Greg who talks a lot

422
00:18:40,549 --> 00:18:42,200
about tracing frameworks for various

423
00:18:42,200 --> 00:18:42,800
operating

424
00:18:42,800 --> 00:18:46,840
systems superpowers have come to Linux

425
00:18:46,840 --> 00:18:49,010
one of the interesting things actually

426
00:18:49,010 --> 00:18:50,690
is I've heard of a use case and I think

427
00:18:50,690 --> 00:18:53,330
this is Facebook and they actually use

428
00:18:53,330 --> 00:18:55,280
BPF where they compile the bytecode

429
00:18:55,280 --> 00:18:57,500
inject it into their network interface

430
00:18:57,500 --> 00:19:03,140
cards it is that blazing fast and in our

431
00:19:03,140 --> 00:19:05,240
use case actually we could use this to

432
00:19:05,240 --> 00:19:07,880
dispatch K probes for the tcp v for

433
00:19:07,880 --> 00:19:08,780
connect cisco

434
00:19:08,780 --> 00:19:11,210
so we're talking very specifically about

435
00:19:11,210 --> 00:19:15,140
outbound tcp/ip v4 now you might ask

436
00:19:15,140 --> 00:19:19,910
what what about ipv6 well we run on

437
00:19:19,910 --> 00:19:23,840
amazon amazon relies heavily on RFC 1918

438
00:19:23,840 --> 00:19:26,510
so i'll leave that as an exercise to the

439
00:19:26,510 --> 00:19:30,470
reader yeah it's basically kind of like

440
00:19:30,470 --> 00:19:32,270
having a coprocessor friends for

441
00:19:32,270 --> 00:19:33,920
introspecting on Colonel state and

442
00:19:33,920 --> 00:19:35,930
actual processor registers and stuff

443
00:19:35,930 --> 00:19:38,000
like that but the cool part of this is

444
00:19:38,000 --> 00:19:40,520
it's on all of our servers and it's very

445
00:19:40,520 --> 00:19:46,430
difficult to lie to so yeah then this is

446
00:19:46,430 --> 00:19:47,990
just an interesting point in here so

447
00:19:47,990 --> 00:19:50,030
previous for her when I done versions of

448
00:19:50,030 --> 00:19:51,770
this talk internally I'd said that I

449
00:19:51,770 --> 00:19:53,960
doesn't allow backward jump instructions

450
00:19:53,960 --> 00:19:56,420
if you remember the talk yesterday about

451
00:19:56,420 --> 00:19:58,940
graph QL talking about nodes and edges

452
00:19:58,940 --> 00:20:01,670
what the kernel verifier actually does

453
00:20:01,670 --> 00:20:03,320
is it verifies that you don't have any

454
00:20:03,320 --> 00:20:06,710
back edges those are indicative of a

455
00:20:06,710 --> 00:20:13,220
loop inside the program yeah so one of

456
00:20:13,220 --> 00:20:15,530
the focus here is this is how you used

457
00:20:15,530 --> 00:20:19,970
to write BPF programs this is this blows

458
00:20:19,970 --> 00:20:23,360
my mind this is actually creating a

459
00:20:23,360 --> 00:20:26,620
raise of bytecode instructions and

460
00:20:26,620 --> 00:20:32,290
injecting them into the kernel in C now

461
00:20:32,290 --> 00:20:34,580
if this had been the case you can

462
00:20:34,580 --> 00:20:36,200
imagine I didn't I wouldn't have to do

463
00:20:36,200 --> 00:20:39,200
this for a hackathon but it turns out

464
00:20:39,200 --> 00:20:41,320
that there's actually a really fantastic

465
00:20:41,320 --> 00:20:45,380
tool chain called BCC the BPF compiler

466
00:20:45,380 --> 00:20:48,710
collection and what this does

467
00:20:48,710 --> 00:20:55,380
roughly speaking is it takes it's gets a

468
00:20:55,380 --> 00:20:57,059
bit weird when you explain it so it's

469
00:20:57,059 --> 00:20:59,490
basically like writing C but in Python

470
00:20:59,490 --> 00:21:01,890
you can see here that like so you've got

471
00:21:01,890 --> 00:21:04,230
some Python up the top here all very

472
00:21:04,230 --> 00:21:05,490
lovely and then you've loved this

473
00:21:05,490 --> 00:21:08,760
variable BPF text equals and then this

474
00:21:08,760 --> 00:21:11,040
long string literal so this is just one

475
00:21:11,040 --> 00:21:12,750
of the BCC examples there's a long

476
00:21:12,750 --> 00:21:15,270
string literal this looks a lot like

477
00:21:15,270 --> 00:21:17,940
some C code but has some weird templates

478
00:21:17,940 --> 00:21:20,250
for doing things like BPF perf output

479
00:21:20,250 --> 00:21:22,950
and stuff like that so what it is is

480
00:21:22,950 --> 00:21:28,860
basically a Python library for for

481
00:21:28,860 --> 00:21:35,000
controlling injection of compiling and

482
00:21:35,000 --> 00:21:38,070
injecting byte code into the kernel at

483
00:21:38,070 --> 00:21:42,120
runtime and you can do some pretty weird

484
00:21:42,120 --> 00:21:46,650
 with it to be quite honest so I

485
00:21:46,650 --> 00:21:48,809
looked at this and I was like okay so my

486
00:21:48,809 --> 00:21:51,720
problem space here is I want processed

487
00:21:51,720 --> 00:21:54,450
tree attestation for every outbound TCP

488
00:21:54,450 --> 00:21:57,660
v4 connect Cisco so in theory I can just

489
00:21:57,660 --> 00:22:02,309
add BCC to pythons PS util and that

490
00:22:02,309 --> 00:22:06,510
should work I mean surely that can't

491
00:22:06,510 --> 00:22:08,370
work because if we offload like messages

492
00:22:08,370 --> 00:22:10,350
to the Python daemon this is just gonna

493
00:22:10,350 --> 00:22:12,450
race condition because TCP connections

494
00:22:12,450 --> 00:22:15,440
will be too fast right well no actually

495
00:22:15,440 --> 00:22:18,540
it just worked I was absolutely amazed

496
00:22:18,540 --> 00:22:20,520
by this it took me like a day to get

497
00:22:20,520 --> 00:22:25,980
proof of concept so so we went on and we

498
00:22:25,980 --> 00:22:28,410
built a Pitre BCCC why is it called

499
00:22:28,410 --> 00:22:30,750
Petri bcc because I lacked any

500
00:22:30,750 --> 00:22:33,510
imagination whatsoever it traces process

501
00:22:33,510 --> 00:22:36,590
tree and it's written with bcc

502
00:22:36,590 --> 00:22:44,070
easy-peasy so how does this work so

503
00:22:44,070 --> 00:22:45,919
we've got some pretty simple steps here

504
00:22:45,919 --> 00:22:50,010
so first step we take our be PFC text

505
00:22:50,010 --> 00:22:52,590
when we template out and this is

506
00:22:52,590 --> 00:22:55,080
actually pretty horrific what I did here

507
00:22:55,080 --> 00:22:58,240
so you've got your

508
00:22:58,240 --> 00:23:00,790
static string that's got all of your C

509
00:23:00,790 --> 00:23:03,790
code in and I used some ginger to

510
00:23:03,790 --> 00:23:08,309
templates to to inject a bunch of Gamal

511
00:23:08,309 --> 00:23:12,010
so that we could then take that without

512
00:23:12,010 --> 00:23:14,350
having any loops compile it down and

513
00:23:14,350 --> 00:23:17,050
inject into the kernel so the text has

514
00:23:17,050 --> 00:23:20,050
been verified and LLVM compiled so

515
00:23:20,050 --> 00:23:21,910
basically you need to actually compile

516
00:23:21,910 --> 00:23:25,210
at runtime which creates some

517
00:23:25,210 --> 00:23:26,890
interesting problems as I'll get into

518
00:23:26,890 --> 00:23:29,890
later the bytecode is injected into the

519
00:23:29,890 --> 00:23:35,920
kernel and then effectively any any TCP

520
00:23:35,920 --> 00:23:39,580
v4 connect siskel the unfiltered events

521
00:23:39,580 --> 00:23:42,429
are basically passed to use Erlang code

522
00:23:42,429 --> 00:23:44,290
and most notably this includes the

523
00:23:44,290 --> 00:23:46,809
process ID so the things that are passed

524
00:23:46,809 --> 00:23:49,990
these land are process ID the

525
00:23:49,990 --> 00:23:51,340
destination address and the destination

526
00:23:51,340 --> 00:23:55,240
port passed the user line code and the

527
00:23:55,240 --> 00:23:56,679
user line code is basically a really

528
00:23:56,679 --> 00:23:58,720
simple Python daemon that just crawls

529
00:23:58,720 --> 00:24:01,270
the process tree and logs all of that

530
00:24:01,270 --> 00:24:04,000
metadata together so how the hell does

531
00:24:04,000 --> 00:24:09,880
that work so this is this is it's like

532
00:24:09,880 --> 00:24:14,290
some of the so the way that the kernel

533
00:24:14,290 --> 00:24:16,120
products actually work is you you create

534
00:24:16,120 --> 00:24:20,440
both a hook on on the entry to the

535
00:24:20,440 --> 00:24:22,390
function and to the exit of the function

536
00:24:22,390 --> 00:24:24,370
so the thing which we need to do first

537
00:24:24,370 --> 00:24:25,840
is they're like on the entry to the

538
00:24:25,840 --> 00:24:27,370
function we have all of the context

539
00:24:27,370 --> 00:24:30,100
that's actually passed to it so most

540
00:24:30,100 --> 00:24:32,559
notably here we've got the socket which

541
00:24:32,559 --> 00:24:36,220
is passed to the TCP v4 connect Cisco

542
00:24:36,220 --> 00:24:39,309
and we need to store that for later

543
00:24:39,309 --> 00:24:41,350
because it's not present in the context

544
00:24:41,350 --> 00:24:44,410
after the function has returned so what

545
00:24:44,410 --> 00:24:46,420
we do is we build this BPF hash and

546
00:24:46,420 --> 00:24:48,400
literally all this is is a map between

547
00:24:48,400 --> 00:24:54,640
Prosis ID and a socket and what the what

548
00:24:54,640 --> 00:24:58,179
this Kay probe does literally just as

549
00:24:58,179 --> 00:25:00,250
the function is entered it takes the

550
00:25:00,250 --> 00:25:04,480
process ID using some dark magic I like

551
00:25:04,480 --> 00:25:07,659
I had a quick google of how this works

552
00:25:07,659 --> 00:25:10,299
well I use github search and I found you

553
00:25:10,299 --> 00:25:13,600
know like sort of sacrifice lambs and

554
00:25:13,600 --> 00:25:15,850
dark magic and things like that still

555
00:25:15,850 --> 00:25:18,309
have to determine how that bit works but

556
00:25:18,309 --> 00:25:20,649
basically you you pull out the pit and

557
00:25:20,649 --> 00:25:25,720
then you add to this hash process ID as

558
00:25:25,720 --> 00:25:29,350
the key socket is the value so that when

559
00:25:29,350 --> 00:25:32,820
we get to the return of the function

560
00:25:32,820 --> 00:25:35,919
what we can do is we can we can pull out

561
00:25:35,919 --> 00:25:37,779
the return code and that's literally

562
00:25:37,779 --> 00:25:42,669
from the so that the PT regs thing up

563
00:25:42,669 --> 00:25:46,299
here is a snapshot of the process of the

564
00:25:46,299 --> 00:25:49,239
processor registers at the time and that

565
00:25:49,239 --> 00:25:52,210
will include the return code for the the

566
00:25:52,210 --> 00:25:54,129
function was just returned so we can

567
00:25:54,129 --> 00:25:55,239
pull out the return code at the top

568
00:25:55,239 --> 00:25:57,519
there we pull out the pit again using

569
00:25:57,519 --> 00:26:00,340
some dark magic and then what we do is

570
00:26:00,340 --> 00:26:03,820
we pull out that socket again so we we

571
00:26:03,820 --> 00:26:05,649
look we look up the socket based on the

572
00:26:05,649 --> 00:26:10,269
pit and first of all if we don't get

573
00:26:10,269 --> 00:26:13,090
anything out we we basically return

574
00:26:13,090 --> 00:26:15,580
because we are erroneously in this code

575
00:26:15,580 --> 00:26:19,450
path if the return code was not zero

576
00:26:19,450 --> 00:26:21,460
that means that we failed to sync the

577
00:26:21,460 --> 00:26:23,139
TCP connection it didn't actually

578
00:26:23,139 --> 00:26:26,379
connect so we don't have a hoping house

579
00:26:26,379 --> 00:26:27,970
chance of tracing about anyway because

580
00:26:27,970 --> 00:26:29,499
it will have returned instantly the

581
00:26:29,499 --> 00:26:31,299
process won't exist we can't call the

582
00:26:31,299 --> 00:26:35,099
process tree there's no point

583
00:26:36,690 --> 00:26:39,590
but if we get past all of that we then

584
00:26:39,590 --> 00:26:41,669
introspect on our socket that we've just

585
00:26:41,669 --> 00:26:43,529
pulled out and we can pull out the

586
00:26:43,529 --> 00:26:45,450
source address destination address the

587
00:26:45,450 --> 00:26:48,029
destination port and then we can start

588
00:26:48,029 --> 00:26:52,169
running through some filters so what the

589
00:26:52,169 --> 00:26:56,669
filters do is they so you basically

590
00:26:56,669 --> 00:26:59,989
specify in a Yamaka configuration file a

591
00:26:59,989 --> 00:27:02,940
set of networks which you don't want to

592
00:27:02,940 --> 00:27:05,429
see traffic from so most notably like

593
00:27:05,429 --> 00:27:08,549
loop backs a good choice here because a

594
00:27:08,549 --> 00:27:10,259
lot of the TCP connections that will

595
00:27:10,259 --> 00:27:11,759
happen so fast you won't be able to

596
00:27:11,759 --> 00:27:14,309
catch them although to be fair actually

597
00:27:14,309 --> 00:27:16,080
it does catch the majority of them now

598
00:27:16,080 --> 00:27:20,609
which terrifies me so filters in kernel

599
00:27:20,609 --> 00:27:22,139
from ginger to templates which is

600
00:27:22,139 --> 00:27:24,629
iterate over subnets in Yama

601
00:27:24,629 --> 00:27:26,609
configuration eventually don't get

602
00:27:26,609 --> 00:27:28,440
filtered a pass out to the user land -

603
00:27:28,440 --> 00:27:31,139
daemon and then we use PS util to crawl

604
00:27:31,139 --> 00:27:34,649
the process tree and you probably can't

605
00:27:34,649 --> 00:27:37,049
see this very well but what we've got

606
00:27:37,049 --> 00:27:38,340
down here we've got the process ID

607
00:27:38,340 --> 00:27:43,320
destination address any errors found the

608
00:27:43,320 --> 00:27:45,539
put the destination port and then the

609
00:27:45,539 --> 00:27:48,629
rest of this under the prop tree create

610
00:27:48,629 --> 00:27:52,190
the key it's basically an array of

611
00:27:52,190 --> 00:27:55,649
events of processes so effectively what

612
00:27:55,649 --> 00:27:57,479
we what we have at the moment and this

613
00:27:57,479 --> 00:27:59,729
is really easy to add more metadata to

614
00:27:59,729 --> 00:28:02,220
freeze process we've got the process ID

615
00:28:02,220 --> 00:28:04,979
we've got the command line and we've got

616
00:28:04,979 --> 00:28:06,720
the user name that are there basically

617
00:28:06,720 --> 00:28:09,179
on that process and what you can see is

618
00:28:09,179 --> 00:28:11,309
actually so this is this is me

619
00:28:11,309 --> 00:28:13,859
connecting to free node I think with

620
00:28:13,859 --> 00:28:18,119
WeChat and you can see it goes climb on

621
00:28:18,119 --> 00:28:20,399
WeChat WeChat then as ish because that's

622
00:28:20,399 --> 00:28:22,409
the shell that was parenting the WeChat

623
00:28:22,409 --> 00:28:24,509
then it's T marks because I use T marks

624
00:28:24,509 --> 00:28:28,999
everywhere and that is parented by in it

625
00:28:28,999 --> 00:28:31,289
so literally one of the things that

626
00:28:31,289 --> 00:28:32,489
you'll always expect to see in this

627
00:28:32,489 --> 00:28:34,499
output is that the last thing has paid

628
00:28:34,499 --> 00:28:38,039
one so the end right I mean

629
00:28:38,039 --> 00:28:41,309
so that'll worked except it was a

630
00:28:41,309 --> 00:28:43,349
hackathon project so all it did was

631
00:28:43,349 --> 00:28:45,629
print events to stand it out and could

632
00:28:45,629 --> 00:28:47,820
only match classful networks and I

633
00:28:47,820 --> 00:28:50,309
developed it on my personal laptop

634
00:28:50,309 --> 00:28:53,190
but I demoed this to my team and then

635
00:28:53,190 --> 00:28:55,679
went off on pto for a few days

636
00:28:55,679 --> 00:28:57,539
and when I came back I discovered that

637
00:28:57,539 --> 00:28:59,159
they'd wrote mapped it for production

638
00:28:59,159 --> 00:29:01,669
housing in the next quarter I was like

639
00:29:01,669 --> 00:29:06,029
thanks fellas so the road to production

640
00:29:06,029 --> 00:29:10,500
so the first thing that it didn't do

641
00:29:10,500 --> 00:29:15,260
very well it basically would only match

642
00:29:15,260 --> 00:29:17,789
it would only match classful networks

643
00:29:17,789 --> 00:29:21,299
and I couldn't figure out for ages why

644
00:29:21,299 --> 00:29:23,039
and it's because I was trying to be

645
00:29:23,039 --> 00:29:25,260
really clever with bitwise Network

646
00:29:25,260 --> 00:29:28,440
matching and if you can only live to

647
00:29:28,440 --> 00:29:30,600
serve as a warning to others that's fine

648
00:29:30,600 --> 00:29:34,140
too like don't try and be clever with

649
00:29:34,140 --> 00:29:36,539
bitwise network matching and so this is

650
00:29:36,539 --> 00:29:38,279
this is the format for all of the subnet

651
00:29:38,279 --> 00:29:39,870
filters that we actually use so what

652
00:29:39,870 --> 00:29:42,090
we're doing is we are literally just

653
00:29:42,090 --> 00:29:46,620
bitwise anding the the subnet with the

654
00:29:46,620 --> 00:29:49,770
subnet mask so this is in our

655
00:29:49,770 --> 00:29:52,020
configuration and then we and the

656
00:29:52,020 --> 00:29:54,600
destination address so this is for the

657
00:29:54,600 --> 00:29:57,210
actual event with that same subnet mask

658
00:29:57,210 --> 00:29:59,730
we check if they're equal if they are

659
00:29:59,730 --> 00:30:04,320
that means that the IP was in the was in

660
00:30:04,320 --> 00:30:06,870
the subnet don't ever try and do it any

661
00:30:06,870 --> 00:30:11,000
different way you'll waste so much time

662
00:30:12,470 --> 00:30:15,360
so whilst I was trying to bash my head

663
00:30:15,360 --> 00:30:17,669
against this and one of my co-workers

664
00:30:17,669 --> 00:30:21,330
was working on a data off project so

665
00:30:21,330 --> 00:30:23,850
this is basically about trying to ensure

666
00:30:23,850 --> 00:30:27,440
that all of our all of our internal

667
00:30:27,440 --> 00:30:31,830
sensitive data streams are secured and

668
00:30:31,830 --> 00:30:34,020
that you have to be authenticated and

669
00:30:34,020 --> 00:30:36,630
authorized to access them and as part of

670
00:30:36,630 --> 00:30:38,549
this migration we were trying to find

671
00:30:38,549 --> 00:30:39,960
the things that weren't using the client

672
00:30:39,960 --> 00:30:42,630
libraries we'd already told now my

673
00:30:42,630 --> 00:30:45,299
coworker was pretty confident that all

674
00:30:45,299 --> 00:30:47,429
of these all of these clients which he

675
00:30:47,429 --> 00:30:49,500
couldn't identify we're running on a

676
00:30:49,500 --> 00:30:52,529
particular batch machine so this is like

677
00:30:52,529 --> 00:30:56,389
our old legacy crap which everyone has

678
00:30:56,389 --> 00:30:59,779
and he basically asked me do you think

679
00:30:59,779 --> 00:31:02,569
Pitre BCC could deuce could could help

680
00:31:02,569 --> 00:31:06,139
me with this and I went yeah I'm gonna

681
00:31:06,139 --> 00:31:07,789
regret saying this but I reckon by

682
00:31:07,789 --> 00:31:10,339
tomorrow I can have it matching ports

683
00:31:10,339 --> 00:31:12,739
instead of IP addresses and docker eyes

684
00:31:12,739 --> 00:31:15,679
for ad-hoc usage and by the next day I

685
00:31:15,679 --> 00:31:18,919
actually did that I was as surprised as

686
00:31:18,919 --> 00:31:21,589
anyone and he found all of these

687
00:31:21,589 --> 00:31:25,279
unauthenticated clients but this was

688
00:31:25,279 --> 00:31:28,059
actually this is actually a huge

689
00:31:28,059 --> 00:31:30,229
opportunistic step forward because

690
00:31:30,229 --> 00:31:32,569
actually once I finish figured out that

691
00:31:32,569 --> 00:31:37,489
that subnet stuff I realized well hang

692
00:31:37,489 --> 00:31:38,179
on a second

693
00:31:38,179 --> 00:31:40,129
like what's the quickest way to get

694
00:31:40,129 --> 00:31:42,769
business value out of this is to ship it

695
00:31:42,769 --> 00:31:46,999
various places right and I could work on

696
00:31:46,999 --> 00:31:49,609
making it all beautiful and production

697
00:31:49,609 --> 00:31:52,129
artists of all and having all of the

698
00:31:52,129 --> 00:31:53,629
dependencies installed by a

699
00:31:53,629 --> 00:31:55,219
configuration management and everything

700
00:31:55,219 --> 00:31:57,979
like that but equally we have docker

701
00:31:57,979 --> 00:32:03,229
installed in a lot of places now the

702
00:32:03,229 --> 00:32:06,379
thing about running this docker is it's

703
00:32:06,379 --> 00:32:08,929
a bit gnarly and so I'm literally about

704
00:32:08,929 --> 00:32:11,179
to tell you how I decided to do all of

705
00:32:11,179 --> 00:32:13,279
the things that everybody says not to do

706
00:32:13,279 --> 00:32:15,889
in docker security best practices but

707
00:32:15,889 --> 00:32:17,839
it's okay because allegedly I'm a

708
00:32:17,839 --> 00:32:22,039
professional so basically because I was

709
00:32:22,039 --> 00:32:23,449
a hackathon project I couldn't get it

710
00:32:23,449 --> 00:32:25,489
working quickly in Python 3 it's Python

711
00:32:25,489 --> 00:32:30,199
2.7 I'm sorry about that so I mean it

712
00:32:30,199 --> 00:32:31,699
was a nice way of container izing that

713
00:32:31,699 --> 00:32:33,979
but it basically needs some setup at run

714
00:32:33,979 --> 00:32:37,969
time and BCC is such a bizarre framework

715
00:32:37,969 --> 00:32:40,309
in the sense that the first thing you

716
00:32:40,309 --> 00:32:42,440
need is you have to have Linux headers

717
00:32:42,440 --> 00:32:45,019
installed for whatever kernel you're

718
00:32:45,019 --> 00:32:47,449
already running this is because you are

719
00:32:47,449 --> 00:32:49,129
literally compiling against those

720
00:32:49,129 --> 00:32:51,169
headers at run time to build that

721
00:32:51,169 --> 00:32:54,139
bytecode so that mean this is a really

722
00:32:54,139 --> 00:32:56,539
nice way of just okay well actually

723
00:32:56,539 --> 00:32:58,519
every time we spin up the container we

724
00:32:58,519 --> 00:33:00,109
can just install the headers and great

725
00:33:00,109 --> 00:33:01,879
thing is it means that on every server

726
00:33:01,879 --> 00:33:04,459
reboot onto a new kernel you just get

727
00:33:04,459 --> 00:33:06,199
the right headers so that was actually

728
00:33:06,199 --> 00:33:07,440
pretty cool

729
00:33:07,440 --> 00:33:09,870
and the other thing that we need to do

730
00:33:09,870 --> 00:33:14,120
here is we need to mount in the debug FS

731
00:33:14,120 --> 00:33:17,100
this is largely because of the way that

732
00:33:17,100 --> 00:33:19,170
I had it messaging to userland which was

733
00:33:19,170 --> 00:33:21,540
also nasty and horrible which I'll get

734
00:33:21,540 --> 00:33:22,320
into later

735
00:33:22,320 --> 00:33:26,580
I fixed it an hour so it's okay so the

736
00:33:26,580 --> 00:33:28,470
other thing which we do so we volume out

737
00:33:28,470 --> 00:33:31,980
in et Cie password for UID mapping this

738
00:33:31,980 --> 00:33:35,010
is a privileged daemon anyway right and

739
00:33:35,010 --> 00:33:36,810
now I know that a lot of you were

740
00:33:36,810 --> 00:33:38,490
feeling very very itchy about the fact

741
00:33:38,490 --> 00:33:40,170
that it's yes it's running as root as

742
00:33:40,170 --> 00:33:42,360
well it's privileged just got cap adds

743
00:33:42,360 --> 00:33:45,300
this admin it's using the host process

744
00:33:45,300 --> 00:33:50,580
ID namespace it's less worse in some

745
00:33:50,580 --> 00:33:54,090
ways not a lot than than just running a

746
00:33:54,090 --> 00:33:56,460
privileged daemon on the host the only

747
00:33:56,460 --> 00:33:58,410
reason it's in Dhaka is a convenient

748
00:33:58,410 --> 00:34:00,210
deploy artifact for us because we're

749
00:34:00,210 --> 00:34:02,550
trying to get to production quickly so

750
00:34:02,550 --> 00:34:03,960
we can demonstrate some value in this

751
00:34:03,960 --> 00:34:09,870
thing so yeah mounting in etc' password

752
00:34:09,870 --> 00:34:12,300
the benefit of that is that like then

753
00:34:12,300 --> 00:34:13,679
when your log streams come out rather

754
00:34:13,679 --> 00:34:16,530
than saying what the UID was it will

755
00:34:16,530 --> 00:34:21,780
literally just say username so yeah

756
00:34:21,780 --> 00:34:23,550
getting into this opportunistic deploy

757
00:34:23,550 --> 00:34:25,918
with docker like I say we we run our own

758
00:34:25,918 --> 00:34:28,560
path anyway and it currently uses docker

759
00:34:28,560 --> 00:34:31,168
as the container eyes are so easy peasy

760
00:34:31,168 --> 00:34:35,100
right one of the other advantages here

761
00:34:35,100 --> 00:34:37,020
is that in terms of actually deploying

762
00:34:37,020 --> 00:34:38,550
it all I have to do is in our

763
00:34:38,550 --> 00:34:40,739
configuration management say okay we've

764
00:34:40,739 --> 00:34:44,219
got a system to unit file here and we

765
00:34:44,219 --> 00:34:46,110
will make it pull the new version of the

766
00:34:46,110 --> 00:34:50,668
container and run the workload super

767
00:34:50,668 --> 00:34:55,168
easy very ugly but super easy it means

768
00:34:55,168 --> 00:34:56,639
you'd have to install dependencies and

769
00:34:56,639 --> 00:34:58,680
everything like that I already talked

770
00:34:58,680 --> 00:34:59,940
about this slide I don't know why it's

771
00:34:59,940 --> 00:35:03,210
here the other thing we have is log

772
00:35:03,210 --> 00:35:05,810
aggregation start for us

773
00:35:05,810 --> 00:35:09,630
so basically a previous project with go

774
00:35:09,630 --> 00:35:11,790
audit which takes an absolute firehose

775
00:35:11,790 --> 00:35:16,530
of executive ee Cisco had already set up

776
00:35:16,530 --> 00:35:18,870
a secure login pipeline for basically

777
00:35:18,870 --> 00:35:20,260
reading the FIFO and out

778
00:35:20,260 --> 00:35:23,200
to Amazon Canisius so this thing is

779
00:35:23,200 --> 00:35:24,940
called syslog to Kinesis the great thing

780
00:35:24,940 --> 00:35:26,340
is it also adds a whole bunch of

781
00:35:26,340 --> 00:35:29,230
metadata around like what the host name

782
00:35:29,230 --> 00:35:31,359
was what ecosystem it was part of

783
00:35:31,359 --> 00:35:34,810
everything like that this originally fed

784
00:35:34,810 --> 00:35:39,670
our log stash to elasticsearch sim but

785
00:35:39,670 --> 00:35:41,740
we've migrated to Kinesis fire hose and

786
00:35:41,740 --> 00:35:45,040
Splunk this quarter and it is lovely

787
00:35:45,040 --> 00:35:47,770
so it takes a maybe on the order of 30

788
00:35:47,770 --> 00:35:49,600
seconds to get from the event occurring

789
00:35:49,600 --> 00:35:52,990
to the sim this is not because EP PF is

790
00:35:52,990 --> 00:35:57,220
slow eb PF is stupid fast but it's a

791
00:35:57,220 --> 00:36:01,780
logging pipeline right so once we had

792
00:36:01,780 --> 00:36:04,359
all these pieces in place I decided well

793
00:36:04,359 --> 00:36:06,730
let's do a dip test right it's easier to

794
00:36:06,730 --> 00:36:08,320
ask forgiveness than permission so I

795
00:36:08,320 --> 00:36:10,630
rolled it out on to security dev boxes

796
00:36:10,630 --> 00:36:14,380
and watch the logs rolling so the thing

797
00:36:14,380 --> 00:36:16,240
that astounded me is it had negligible

798
00:36:16,240 --> 00:36:19,270
performance impact like I could not see

799
00:36:19,270 --> 00:36:22,720
in any particularly visible way that

800
00:36:22,720 --> 00:36:24,400
there was any performance impact of

801
00:36:24,400 --> 00:36:28,359
turning this stuff on and as postulated

802
00:36:28,359 --> 00:36:30,340
the I think it's just the cost of subnet

803
00:36:30,340 --> 00:36:32,470
filtering like so doing those bitwise

804
00:36:32,470 --> 00:36:35,470
hands for each of the TCP v4 connects

805
00:36:35,470 --> 00:36:37,450
iskills it's just so much less than the

806
00:36:37,450 --> 00:36:39,450
cost of instantiating a TCP connection

807
00:36:39,450 --> 00:36:41,650
TCP connections are really really

808
00:36:41,650 --> 00:36:47,200
expensive so lots of connections out to

809
00:36:47,200 --> 00:36:49,540
public Amazon IPs however all creating a

810
00:36:49,540 --> 00:36:52,060
lot of noise and this was business as

811
00:36:52,060 --> 00:36:54,940
usual and part of me was like well you

812
00:36:54,940 --> 00:36:56,380
know we can hang on to this anyway it's

813
00:36:56,380 --> 00:36:58,960
not doing us any harm but I wanted to

814
00:36:58,960 --> 00:37:01,060
demonstrate actually the utility we

815
00:37:01,060 --> 00:37:03,100
should be focusing on events that we are

816
00:37:03,100 --> 00:37:05,890
not expecting to see right so we thought

817
00:37:05,890 --> 00:37:08,410
if only Amazon maintains some kind of

818
00:37:08,410 --> 00:37:13,840
list of their public prefixes they do so

819
00:37:13,840 --> 00:37:16,330
they they host a JSON file with all of

820
00:37:16,330 --> 00:37:18,400
their IP ranges the problem being that

821
00:37:18,400 --> 00:37:21,790
once I filtered down to just the regions

822
00:37:21,790 --> 00:37:24,130
and just the services that I knew that

823
00:37:24,130 --> 00:37:26,770
we'd be connecting into there were over

824
00:37:26,770 --> 00:37:28,400
400 networks

825
00:37:28,400 --> 00:37:32,900
matching our requirements which you know

826
00:37:32,900 --> 00:37:36,200
is quite a lot so I wrote a quick script

827
00:37:36,200 --> 00:37:39,200
to consolidate AWS net logs because it

828
00:37:39,200 --> 00:37:40,819
was like why I bet a whole bunch of

829
00:37:40,819 --> 00:37:44,420
these are probably next to each other so

830
00:37:44,420 --> 00:37:46,099
it's just a quick script what it does

831
00:37:46,099 --> 00:37:48,349
you can say what regions you want more

832
00:37:48,349 --> 00:37:50,930
services you want it will find from that

833
00:37:50,930 --> 00:37:54,349
JSON file all of the IP ranges that

834
00:37:54,349 --> 00:37:56,480
match that it will smash them together

835
00:37:56,480 --> 00:38:00,529
and try and turn 400 net box dance

836
00:38:00,529 --> 00:38:02,000
something else and actually the thing is

837
00:38:02,000 --> 00:38:05,000
it went from 400 down to just shy of 200

838
00:38:05,000 --> 00:38:07,849
and when I saw this I was a little bit

839
00:38:07,849 --> 00:38:10,279
disheartened because I was like you know

840
00:38:10,279 --> 00:38:12,559
surely you can't load 200 net blocks

841
00:38:12,559 --> 00:38:15,049
into the kernel and compare all non RFC

842
00:38:15,049 --> 00:38:18,470
9 1918 TCP v4 Connect Siskel's to them

843
00:38:18,470 --> 00:38:22,309
in a performant manner there's only one

844
00:38:22,309 --> 00:38:24,410
way to find out to be perfectly honest

845
00:38:24,410 --> 00:38:27,170
so this is the bit where I very

846
00:38:27,170 --> 00:38:30,619
ill-advised have actually got a video of

847
00:38:30,619 --> 00:38:32,329
this but I'm gonna try and do it live

848
00:38:32,329 --> 00:38:38,180
instead anyway so let's see so this is

849
00:38:38,180 --> 00:38:42,319
this is actual real infrastructure so

850
00:38:42,319 --> 00:38:45,859
what we're going to do google.com slash

851
00:38:45,859 --> 00:38:53,510
hello SEC on London okay so what just

852
00:38:53,510 --> 00:38:56,180
happened there is I've created a TCP

853
00:38:56,180 --> 00:39:01,069
connection to Google and and what we can

854
00:39:01,069 --> 00:39:05,049
see is like systemctl status

855
00:39:05,049 --> 00:39:10,010
PCC so basically Pitre bcc is running

856
00:39:10,010 --> 00:39:13,730
here and it's outputting to syslog to

857
00:39:13,730 --> 00:39:16,670
Kinesis like I said so if we do system

858
00:39:16,670 --> 00:39:23,690
CTR status syslog to Canisius

859
00:39:23,690 --> 00:39:27,410
Petrey that's it right so effectively

860
00:39:27,410 --> 00:39:29,900
like what what this does is it literally

861
00:39:29,900 --> 00:39:31,550
just reads off of a FIFO and keeps

862
00:39:31,550 --> 00:39:39,260
dumping into Kinesis and as far as as

863
00:39:39,260 --> 00:39:41,710
far as Petri BCC itself is concerned

864
00:39:41,710 --> 00:39:47,089
this this is like it's it's just logging

865
00:39:47,089 --> 00:39:47,750
to a file

866
00:39:47,750 --> 00:39:48,890
it doesn't even know that it's logging

867
00:39:48,890 --> 00:39:51,859
to a FIFO here so what I'm going to do

868
00:39:51,859 --> 00:39:54,710
here Jesus I hope this works

869
00:39:54,710 --> 00:39:58,430
let's try bringing this across to do do

870
00:39:58,430 --> 00:40:05,720
do hello do you want to oh god what's

871
00:40:05,720 --> 00:40:08,480
happened how did this get here I'm not

872
00:40:08,480 --> 00:40:12,859
good with computer okay right here's the

873
00:40:12,859 --> 00:40:13,670
moment of truth

874
00:40:13,670 --> 00:40:18,079
it might not appear straightaway because

875
00:40:18,079 --> 00:40:23,720
here we go thank God for that it can

876
00:40:23,720 --> 00:40:25,460
take it can take up to a minute

877
00:40:25,460 --> 00:40:27,260
sometimes so I was like am I gonna have

878
00:40:27,260 --> 00:40:29,000
to tell a joke in the meantime I know

879
00:40:29,000 --> 00:40:31,069
some pretty terrible jokes so what we've

880
00:40:31,069 --> 00:40:32,450
got here as you can see I made a

881
00:40:32,450 --> 00:40:35,150
connection out to Google here the

882
00:40:35,150 --> 00:40:37,579
process Oh so here we go that like this

883
00:40:37,579 --> 00:40:40,250
is the host I did it from we've got the

884
00:40:40,250 --> 00:40:42,770
timestamp there we can see process ID

885
00:40:42,770 --> 00:40:46,040
and port 80 so process 3 here I'm gonna

886
00:40:46,040 --> 00:40:48,170
just make this silicon in big and this a

887
00:40:48,170 --> 00:40:53,390
bit okay so we're we've got process tree

888
00:40:53,390 --> 00:40:54,829
we've got cold google.com

889
00:40:54,829 --> 00:40:57,710
hello deficit con London we've got me

890
00:40:57,710 --> 00:40:59,060
username I see you can see I'm using

891
00:40:59,060 --> 00:41:04,819
zishe again I'm SSH tin the there's an

892
00:41:04,819 --> 00:41:10,609
SSH T owned by root for me and all the

893
00:41:10,609 --> 00:41:13,790
way up to system D all the way up to the

894
00:41:13,790 --> 00:41:21,540
unit system so going back to this

895
00:41:21,540 --> 00:41:22,960
[Music]

896
00:41:22,960 --> 00:41:26,740
ooh here we go

897
00:41:26,740 --> 00:41:29,109
where's my presents have you gone right

898
00:41:29,109 --> 00:41:33,190
cool so basically like this is a

899
00:41:33,190 --> 00:41:37,180
snapshot that I took of Sunday basically

900
00:41:37,180 --> 00:41:39,700
we get like about 25,000 to 50,000

901
00:41:39,700 --> 00:41:42,160
messages per hour across all of Devin's

902
00:41:42,160 --> 00:41:43,599
stage we're currently rolling out to

903
00:41:43,599 --> 00:41:45,099
production at the moment we're just

904
00:41:45,099 --> 00:41:47,410
saying up the container registries in

905
00:41:47,410 --> 00:41:50,920
production for it I once accidentally

906
00:41:50,920 --> 00:41:54,099
load tested it about 80,000 messages in

907
00:41:54,099 --> 00:41:56,290
five minutes from one host that's

908
00:41:56,290 --> 00:41:59,319
because at Yelp we don't use we don't

909
00:41:59,319 --> 00:42:03,180
use 191 6ei except in docker compose

910
00:42:03,180 --> 00:42:06,970
apparently locally on machines so we had

911
00:42:06,970 --> 00:42:09,369
one host that was absolutely spamming

912
00:42:09,369 --> 00:42:13,119
itself and nobody noticed the

913
00:42:13,119 --> 00:42:15,040
performance didn't degrade at all the

914
00:42:15,040 --> 00:42:18,510
locking pipeline performed admirably

915
00:42:18,510 --> 00:42:20,770
especially considering it was on our old

916
00:42:20,770 --> 00:42:24,640
elasticsearch and again it just kind of

917
00:42:24,640 --> 00:42:26,680
verifies our assumption here TCP

918
00:42:26,680 --> 00:42:28,540
connections are way more expensive than

919
00:42:28,540 --> 00:42:32,799
the filters are so in the process of

920
00:42:32,799 --> 00:42:34,680
undoing my nasty hacks because I

921
00:42:34,680 --> 00:42:37,299
committed a pretty cardinal sin in all

922
00:42:37,299 --> 00:42:40,240
of this in the documentation for BCC

923
00:42:40,240 --> 00:42:42,940
says there are various ways to get your

924
00:42:42,940 --> 00:42:45,040
message out to userland one of them is

925
00:42:45,040 --> 00:42:47,619
BPF trace print que don't use that in

926
00:42:47,619 --> 00:42:50,440
production that's for debugging only so

927
00:42:50,440 --> 00:42:54,910
I happily went ahead and hand hacked in

928
00:42:54,910 --> 00:42:58,690
my own JSON in the C code and printed it

929
00:42:58,690 --> 00:43:01,569
out to product to userland on the debug

930
00:43:01,569 --> 00:43:05,020
interface and shipped it to Devon stage

931
00:43:05,020 --> 00:43:06,940
because I'm a bad person

932
00:43:06,940 --> 00:43:08,619
but it meant that we're doing string

933
00:43:08,619 --> 00:43:13,000
manipulation in order to so string

934
00:43:13,000 --> 00:43:14,680
manipulation in user land in order to

935
00:43:14,680 --> 00:43:17,650
pull that information out so very

936
00:43:17,650 --> 00:43:19,390
recently I've pushed out a change where

937
00:43:19,390 --> 00:43:21,609
we're actually constructing a some

938
00:43:21,609 --> 00:43:23,260
structured data and a ring buffer using

939
00:43:23,260 --> 00:43:27,670
BPF perf output this has the advantage

940
00:43:27,670 --> 00:43:30,160
that the debug interface so the one that

941
00:43:30,160 --> 00:43:31,839
I was mounting in earlier is actually

942
00:43:31,839 --> 00:43:35,260
global to the OS so you can only have

943
00:43:35,260 --> 00:43:35,700
one

944
00:43:35,700 --> 00:43:37,589
thing printing to it at any one time I

945
00:43:37,589 --> 00:43:39,210
just happened to be the first person who

946
00:43:39,210 --> 00:43:42,150
got there but now the great thing about

947
00:43:42,150 --> 00:43:45,089
this is it's now multi-tenancy meaning

948
00:43:45,089 --> 00:43:46,980
that you can run multiple instances of

949
00:43:46,980 --> 00:43:50,670
Pitre BCC on a given host we've also

950
00:43:50,670 --> 00:43:54,030
added unit tests since I've just written

951
00:43:54,030 --> 00:43:55,950
a branch for integration tests and

952
00:43:55,950 --> 00:43:57,720
trying to get them to pass on Travis

953
00:43:57,720 --> 00:44:01,650
which is fun yeah like they say we're

954
00:44:01,650 --> 00:44:03,690
adding infrastructure for deploy in the

955
00:44:03,690 --> 00:44:07,470
production environment incidentally this

956
00:44:07,470 --> 00:44:09,300
also makes it faster where I was saying

957
00:44:09,300 --> 00:44:11,579
that like you can get like lots of race

958
00:44:11,579 --> 00:44:14,430
conditions on loopback addresses this

959
00:44:14,430 --> 00:44:16,680
makes you get significantly fewer race

960
00:44:16,680 --> 00:44:18,750
conditions on loopback addresses because

961
00:44:18,750 --> 00:44:20,430
we're not passing around so much data

962
00:44:20,430 --> 00:44:23,220
because like copying data between kernel

963
00:44:23,220 --> 00:44:26,480
and user land is actually very expensive

964
00:44:26,480 --> 00:44:29,609
so future work here I need to Deacon

965
00:44:29,609 --> 00:44:32,010
tainer eyes it because that

966
00:44:32,010 --> 00:44:34,260
containerization isn't necessary so

967
00:44:34,260 --> 00:44:35,760
actually having a debian package would

968
00:44:35,760 --> 00:44:39,869
be really great I have actually cut a

969
00:44:39,869 --> 00:44:42,030
branch where I do this crazy thing of

970
00:44:42,030 --> 00:44:45,480
exporting the docker container out to at

971
00:44:45,480 --> 00:44:49,560
our file system and then packaging it up

972
00:44:49,560 --> 00:44:55,079
with systemd unit file and using the

973
00:44:55,079 --> 00:44:57,060
unshare command to actually run the

974
00:44:57,060 --> 00:44:59,940
docker container on plain linux kernel

975
00:44:59,940 --> 00:45:02,010
with no docker install not that that's

976
00:45:02,010 --> 00:45:04,109
any use for anyone I just wanted to see

977
00:45:04,109 --> 00:45:06,510
if I could anyway yeah migration to

978
00:45:06,510 --> 00:45:08,609
Python 3 because we want to be good

979
00:45:08,609 --> 00:45:14,130
open-source citizens and like I'd like

980
00:45:14,130 --> 00:45:15,930
to add in things like you know plugins

981
00:45:15,930 --> 00:45:18,720
for for extra metadata gathering so like

982
00:45:18,720 --> 00:45:20,220
a plugin for container awareness would

983
00:45:20,220 --> 00:45:22,380
be really good so actually mapping from

984
00:45:22,380 --> 00:45:24,630
you know the full binary path with the

985
00:45:24,630 --> 00:45:27,510
shine we could probably use that char to

986
00:45:27,510 --> 00:45:30,060
query like doc addy or we could query

987
00:45:30,060 --> 00:45:32,760
some not in the network name spaces for

988
00:45:32,760 --> 00:45:34,349
docker but we you know we can query

989
00:45:34,349 --> 00:45:36,030
various different pieces of information

990
00:45:36,030 --> 00:45:37,710
to actually pull out the friendly name

991
00:45:37,710 --> 00:45:40,079
for the container to attribute back to

992
00:45:40,079 --> 00:45:41,569
the service and maybe start with

993
00:45:41,569 --> 00:45:44,310
fingerprinting what services make what

994
00:45:44,310 --> 00:45:45,680
connections out to the Internet

995
00:45:45,680 --> 00:45:48,559
and I'd also really like to enable

996
00:45:48,559 --> 00:45:50,690
immutable login UID and start adding

997
00:45:50,690 --> 00:45:53,380
that in so that's part of the audit CTL

998
00:45:53,380 --> 00:45:56,059
subsystem and it's the idea that when

999
00:45:56,059 --> 00:45:59,839
you log in you set what that log in new

1000
00:45:59,839 --> 00:46:01,700
ideas a privileged process we'll set

1001
00:46:01,700 --> 00:46:04,099
that if you set it to be immutable it

1002
00:46:04,099 --> 00:46:06,589
can only be set once meaning that should

1003
00:46:06,589 --> 00:46:10,760
you create a process and reown it to

1004
00:46:10,760 --> 00:46:13,730
route and reown it to the init system it

1005
00:46:13,730 --> 00:46:15,920
will still show up that you did it so

1006
00:46:15,920 --> 00:46:17,930
like if I were to use my mad pseudo

1007
00:46:17,930 --> 00:46:21,319
powers to do some terrible nonsense I

1008
00:46:21,319 --> 00:46:24,700
would still get in the for it

1009
00:46:24,700 --> 00:46:26,930
unfortunately the man page for this

1010
00:46:26,930 --> 00:46:29,390
cryptically says but can cause some

1011
00:46:29,390 --> 00:46:31,690
problems in certain kinds of container

1012
00:46:31,690 --> 00:46:35,450
which is very helpful yeah and I'd like

1013
00:46:35,450 --> 00:46:36,829
to do more threat modeling and hardening

1014
00:46:36,829 --> 00:46:38,150
like I say it's a supplementary

1015
00:46:38,150 --> 00:46:40,339
intrusion detection system is to add

1016
00:46:40,339 --> 00:46:46,700
metadata to your process additionally

1017
00:46:46,700 --> 00:46:48,349
I'd like to add some performance

1018
00:46:48,349 --> 00:46:50,119
improvements but don't really need to

1019
00:46:50,119 --> 00:46:52,490
it's fast anyway and looking at more

1020
00:46:52,490 --> 00:46:56,589
siskel so TCP listens for instance ipv6

1021
00:46:56,589 --> 00:46:59,480
UDP I think we could probably feasibly

1022
00:46:59,480 --> 00:47:02,140
do UDP session tracking in a BPF hash

1023
00:47:02,140 --> 00:47:06,260
and forwarded SSH socket reads from

1024
00:47:06,260 --> 00:47:08,210
users that don't own them there's so

1025
00:47:08,210 --> 00:47:10,130
much you can add in here that's really

1026
00:47:10,130 --> 00:47:12,799
really high signal-to-noise and also

1027
00:47:12,799 --> 00:47:14,660
additional sim tooling so for instance

1028
00:47:14,660 --> 00:47:16,250
when we get a guard Duty alone I would

1029
00:47:16,250 --> 00:47:18,440
like that IP address to be Auto matched

1030
00:47:18,440 --> 00:47:23,630
to who actually did that thing and

1031
00:47:23,630 --> 00:47:26,660
that's it we're hiring we're actually

1032
00:47:26,660 --> 00:47:28,220
trying to build a new team in London at

1033
00:47:28,220 --> 00:47:29,359
the moment if you want to come and work

1034
00:47:29,359 --> 00:47:32,510
with me and do some mad dad be

1035
00:47:32,510 --> 00:47:33,579
great

1036
00:47:33,579 --> 00:47:38,119
yep that's the various come and find us

1037
00:47:38,119 --> 00:47:41,089
can work with us and thanks for

1038
00:47:41,089 --> 00:47:43,339
listening I don't think I have any time

1039
00:47:43,339 --> 00:47:45,480
for questions

1040
00:47:45,480 --> 00:47:50,150
[Applause]

