1
00:00:03,110 --> 00:00:05,609
happy Friday

2
00:00:05,609 --> 00:00:09,330
so yeah my name is Jesse Jesse Engel and

3
00:00:09,330 --> 00:00:11,849
chief security officer for a company

4
00:00:11,849 --> 00:00:13,769
called fleet Smith and today I'll be

5
00:00:13,769 --> 00:00:16,740
talking about exactly what it says on

6
00:00:16,740 --> 00:00:19,380
the slide here so before we go any

7
00:00:19,380 --> 00:00:20,970
further I'm actually really curious just

8
00:00:20,970 --> 00:00:24,449
for context setting how many people know

9
00:00:24,449 --> 00:00:28,410
about secrets management cool how many

10
00:00:28,410 --> 00:00:30,779
people currently do secrets management

11
00:00:30,779 --> 00:00:32,759
with a secrets management system in

12
00:00:32,759 --> 00:00:35,399
production okay cool

13
00:00:35,399 --> 00:00:41,879
awesome thank you moving on so yeah I

14
00:00:41,879 --> 00:00:44,760
mentioned my name and my title and stuff

15
00:00:44,760 --> 00:00:46,649
but that's not much information so a

16
00:00:46,649 --> 00:00:48,590
little more background on me I was a

17
00:00:48,590 --> 00:00:51,449
before co-founding fleet Smith I was at

18
00:00:51,449 --> 00:00:52,860
Dropbox as an infrastructure security

19
00:00:52,860 --> 00:00:54,420
engineer did a whole bunch of different

20
00:00:54,420 --> 00:00:57,660
projects loved talking about endpoint

21
00:00:57,660 --> 00:01:00,690
security that's kind of my my thing that

22
00:01:00,690 --> 00:01:03,840
I nerd out on yeah fleet Smith is a SAS

23
00:01:03,840 --> 00:01:06,570
product we automate the new-hire set up

24
00:01:06,570 --> 00:01:08,850
of like new laptops for your employees

25
00:01:08,850 --> 00:01:10,830
but also all the ongoing management like

26
00:01:10,830 --> 00:01:13,860
security and settings automated patching

27
00:01:13,860 --> 00:01:17,580
it's pretty cool and actually on a

28
00:01:17,580 --> 00:01:19,740
related note I was very inspired I

29
00:01:19,740 --> 00:01:21,000
usually don't mention this part but I

30
00:01:21,000 --> 00:01:24,720
was very inspired at at Dropbox

31
00:01:24,720 --> 00:01:26,490
we didn't roll out any commercial

32
00:01:26,490 --> 00:01:27,840
solutions for device management I

33
00:01:27,840 --> 00:01:29,579
actually used puppet which is you know

34
00:01:29,579 --> 00:01:31,950
you all know puppet and monkey which is

35
00:01:31,950 --> 00:01:33,659
an open-source kind of package manager

36
00:01:33,659 --> 00:01:36,270
for Mac OS and those two projects were

37
00:01:36,270 --> 00:01:38,549
very inspirational to deflate psmith

38
00:01:38,549 --> 00:01:40,650
particularly like desired state on

39
00:01:40,650 --> 00:01:42,450
idempotency which traditionally haven't

40
00:01:42,450 --> 00:01:46,740
really been a thing in the IT world cool

41
00:01:46,740 --> 00:01:49,290
so if you're interested in any of these

42
00:01:49,290 --> 00:01:51,899
topics I've been going a little nuts

43
00:01:51,899 --> 00:01:54,090
this year on talks so check those out if

44
00:01:54,090 --> 00:01:59,250
they seem cool some contacts on like my

45
00:01:59,250 --> 00:02:02,219
general worldview I think computers

46
00:02:02,219 --> 00:02:04,710
should handle like the manual stuff you

47
00:02:04,710 --> 00:02:06,149
know we shouldn't be like SSH again

48
00:02:06,149 --> 00:02:07,770
manually running of a script and then

49
00:02:07,770 --> 00:02:09,568
you know running a report and then if it

50
00:02:09,568 --> 00:02:11,610
changes then like go back and you know

51
00:02:11,610 --> 00:02:13,040
run the script again

52
00:02:13,040 --> 00:02:14,989
that's what the DevOps movement has been

53
00:02:14,989 --> 00:02:17,750
all about but again that I think that

54
00:02:17,750 --> 00:02:20,239
other parts of the ecosystem like

55
00:02:20,239 --> 00:02:23,269
security and IT haven't really had as

56
00:02:23,269 --> 00:02:25,609
much of a paradigm shift and I think it

57
00:02:25,609 --> 00:02:28,099
needs it so there's that

58
00:02:28,099 --> 00:02:30,859
I think IT and security should never get

59
00:02:30,859 --> 00:02:33,430
in the way of like employee productivity

60
00:02:33,430 --> 00:02:36,290
and this one I actually just thought of

61
00:02:36,290 --> 00:02:39,859
this this morning I really love when I

62
00:02:39,859 --> 00:02:41,629
see companies and like this used to be

63
00:02:41,629 --> 00:02:44,359
really rare companies actually adding

64
00:02:44,359 --> 00:02:46,340
features that differentiate their

65
00:02:46,340 --> 00:02:48,590
product based on security or privacy

66
00:02:48,590 --> 00:02:51,019
you see github doing this you see

67
00:02:51,019 --> 00:02:53,090
segment analytics doing this now they

68
00:02:53,090 --> 00:02:54,560
just launched this awesome tool to like

69
00:02:54,560 --> 00:02:57,040
basically help you with gdpr

70
00:02:57,040 --> 00:02:59,150
Apple obviously the whole privacy

71
00:02:59,150 --> 00:03:01,609
campaign around the iPhone and bleats

72
00:03:01,609 --> 00:03:03,439
myth you know what we do we can as well

73
00:03:03,439 --> 00:03:06,169
so I want to see more of that unlike if

74
00:03:06,169 --> 00:03:07,760
you work places that are actual like

75
00:03:07,760 --> 00:03:11,150
software companies you know push for

76
00:03:11,150 --> 00:03:12,530
this idea I think it's really good for

77
00:03:12,530 --> 00:03:16,430
the whole the whole world okay and last

78
00:03:16,430 --> 00:03:18,019
but not least I think products and tools

79
00:03:18,019 --> 00:03:20,150
should be secured by design if anyone

80
00:03:20,150 --> 00:03:21,440
was here for the panel yesterday I

81
00:03:21,440 --> 00:03:23,269
mentioned this it's something I believe

82
00:03:23,269 --> 00:03:27,049
really strongly and yeah on a related

83
00:03:27,049 --> 00:03:29,599
note I think this talk like secrets

84
00:03:29,599 --> 00:03:32,209
management is a core part of actually

85
00:03:32,209 --> 00:03:33,620
building a product that's secured by

86
00:03:33,620 --> 00:03:36,519
design in 2019

87
00:03:36,519 --> 00:03:39,319
so before we go any further a quick

88
00:03:39,319 --> 00:03:41,150
definition of you know what is the

89
00:03:41,150 --> 00:03:43,909
secret because it's a little vague the

90
00:03:43,909 --> 00:03:45,799
word itself it's like well I could be

91
00:03:45,799 --> 00:03:48,799
really anything for the context for the

92
00:03:48,799 --> 00:03:51,169
purposes of this talk and like you know

93
00:03:51,169 --> 00:03:52,669
talking about infrastructure security in

94
00:03:52,669 --> 00:03:54,319
general it's really this stuff right

95
00:03:54,319 --> 00:03:56,389
it's like an API token and a password a

96
00:03:56,389 --> 00:03:59,569
certificate and so that's that's what

97
00:03:59,569 --> 00:04:01,669
we're talking about here oops hit the

98
00:04:01,669 --> 00:04:04,060
wrong button

99
00:04:08,800 --> 00:04:10,960
should not hit the right arrow only the

100
00:04:10,960 --> 00:04:13,350
down arrow

101
00:04:18,790 --> 00:04:22,150
cool so TLS private keys API tokens

102
00:04:22,150 --> 00:04:26,470
OAuth tokens etc why is Secrets

103
00:04:26,470 --> 00:04:27,790
management something that anyone should

104
00:04:27,790 --> 00:04:30,130
care about well it's because of things

105
00:04:30,130 --> 00:04:32,200
like this this is not to single out uber

106
00:04:32,200 --> 00:04:34,420
this has happened to many companies in

107
00:04:34,420 --> 00:04:36,850
the world and this is what happens when

108
00:04:36,850 --> 00:04:39,130
you have secrets stored directly in your

109
00:04:39,130 --> 00:04:42,310
code right this actually was a gist not

110
00:04:42,310 --> 00:04:46,170
a repo but the same point still applies

111
00:04:46,170 --> 00:04:48,310
you know we've all heard of like public

112
00:04:48,310 --> 00:04:50,260
s3 buckets this sort of falls in the

113
00:04:50,260 --> 00:04:53,050
same category where the thing you're

114
00:04:53,050 --> 00:04:55,600
doing by default and encouraging

115
00:04:55,600 --> 00:04:56,860
everyone to do in training everyone to

116
00:04:56,860 --> 00:04:59,650
do should be the thing that is that

117
00:04:59,650 --> 00:05:01,870
keeps you safe in the case of other

118
00:05:01,870 --> 00:05:02,740
things going wrong right

119
00:05:02,740 --> 00:05:03,700
defense-in-depth

120
00:05:03,700 --> 00:05:05,650
like what if the github repo becomes

121
00:05:05,650 --> 00:05:07,270
public because someone messed up well

122
00:05:07,270 --> 00:05:09,070
they got the code but they didn't get

123
00:05:09,070 --> 00:05:12,719
any of your secrets much better story

124
00:05:14,130 --> 00:05:17,590
so why vault in this talk I'm really

125
00:05:17,590 --> 00:05:19,540
talking about doing secrets management

126
00:05:19,540 --> 00:05:21,790
with vault and open source project from

127
00:05:21,790 --> 00:05:24,660
Hoshi Corp I'm sure everyone's familiar

128
00:05:24,660 --> 00:05:27,640
this I'll be enough I just opened up

129
00:05:27,640 --> 00:05:29,380
hacker news this morning and the latest

130
00:05:29,380 --> 00:05:31,600
release of vaults came out about like 12

131
00:05:31,600 --> 00:05:34,150
hours ago and someone like top comment

132
00:05:34,150 --> 00:05:36,070
was someone saying like you know why why

133
00:05:36,070 --> 00:05:38,980
should I use this thing and it was

134
00:05:38,980 --> 00:05:42,970
pretty cool the CEO and Founder Mitchell

135
00:05:42,970 --> 00:05:45,310
Hashimoto actually commented and

136
00:05:45,310 --> 00:05:47,380
responded and this was this was what he

137
00:05:47,380 --> 00:05:49,840
said and I think it's you know obviously

138
00:05:49,840 --> 00:05:51,820
it's it's very accurate it's it's really

139
00:05:51,820 --> 00:05:54,490
a tool that scales up very nicely you

140
00:05:54,490 --> 00:05:56,710
can get started very small with a small

141
00:05:56,710 --> 00:05:59,800
team we started using it you know when

142
00:05:59,800 --> 00:06:00,940
we were at our seed round we had less

143
00:06:00,940 --> 00:06:02,680
than 10 employees and we're still using

144
00:06:02,680 --> 00:06:06,190
it I you know with 64 employees so it's

145
00:06:06,190 --> 00:06:09,010
uh and like he says it scales up all the

146
00:06:09,010 --> 00:06:10,600
way to like fortune 10 I mean that's a

147
00:06:10,600 --> 00:06:12,760
massive scale so it's pretty cool that

148
00:06:12,760 --> 00:06:16,200
you can have a tool that's that flexible

149
00:06:16,920 --> 00:06:19,510
I mentioned this yesterday in the panel

150
00:06:19,510 --> 00:06:21,160
for those who are there but I find a

151
00:06:21,160 --> 00:06:23,200
root of trust analysis to be a really

152
00:06:23,200 --> 00:06:25,060
powerful way to make sure that you're

153
00:06:25,060 --> 00:06:26,980
actually securing every layer of the

154
00:06:26,980 --> 00:06:28,750
stack as you move from you know bare

155
00:06:28,750 --> 00:06:30,169
metal all the way up

156
00:06:30,169 --> 00:06:32,689
and I wanted to just show how many

157
00:06:32,689 --> 00:06:35,389
layers are actually involved in just

158
00:06:35,389 --> 00:06:36,590
secrets management right this is one

159
00:06:36,590 --> 00:06:38,060
small slice of your infrastructure

160
00:06:38,060 --> 00:06:41,029
security but yeah just working from the

161
00:06:41,029 --> 00:06:42,319
bottom up you know you've got the

162
00:06:42,319 --> 00:06:44,719
storage layer that's generally you know

163
00:06:44,719 --> 00:06:47,419
gonna be handled by your cloud provider

164
00:06:47,419 --> 00:06:50,389
we're on Google cloud so we get to cheat

165
00:06:50,389 --> 00:06:51,740
a little bit and benefit from their

166
00:06:51,740 --> 00:06:55,310
encryption by default policy for that

167
00:06:55,310 --> 00:06:57,529
layer but as you move up you can see you

168
00:06:57,529 --> 00:06:58,580
really have to pay close attention

169
00:06:58,580 --> 00:07:00,020
because if you miss one of these you

170
00:07:00,020 --> 00:07:02,180
could have some pretty bad consequences

171
00:07:02,180 --> 00:07:05,120
higher up right it doesn't matter if the

172
00:07:05,120 --> 00:07:07,550
building is is perfectly architected and

173
00:07:07,550 --> 00:07:09,949
constructed if it's built on sand so

174
00:07:09,949 --> 00:07:13,029
that's the that's the idea here

175
00:07:13,029 --> 00:07:15,439
pay special attention actually to the

176
00:07:15,439 --> 00:07:18,439
last the top two things here because I

177
00:07:18,439 --> 00:07:19,729
haven't seen their talked about anywhere

178
00:07:19,729 --> 00:07:24,860
but if you want to have you know like if

179
00:07:24,860 --> 00:07:26,089
you look at all these lower layers and

180
00:07:26,089 --> 00:07:27,110
you're doing encryption on all these

181
00:07:27,110 --> 00:07:29,240
layers but then you write it to a

182
00:07:29,240 --> 00:07:31,279
persistent disk your secret write your

183
00:07:31,279 --> 00:07:33,650
private key right TLS private key to an

184
00:07:33,650 --> 00:07:36,409
unencrypted disk but on your VM well

185
00:07:36,409 --> 00:07:41,089
that kind of just you know got in the

186
00:07:41,089 --> 00:07:42,319
way of all the other stuff you've done

187
00:07:42,319 --> 00:07:45,680
here it and made it pointless so that's

188
00:07:45,680 --> 00:07:46,969
why it's really important to write those

189
00:07:46,969 --> 00:07:48,589
two like mem disks and you can do that

190
00:07:48,589 --> 00:07:50,659
in both VMs and in kubernetes pretty

191
00:07:50,659 --> 00:07:57,199
pretty easily ok another thing I wanted

192
00:07:57,199 --> 00:07:58,789
to put in here I kind of went back on

193
00:07:58,789 --> 00:08:01,279
fourth on this because I think this

194
00:08:01,279 --> 00:08:02,839
should be something that's just really

195
00:08:02,839 --> 00:08:05,990
foundational but I have actually found

196
00:08:05,990 --> 00:08:07,639
over the years and conversations with

197
00:08:07,639 --> 00:08:11,149
engineers that I don't I've gotten the

198
00:08:11,149 --> 00:08:13,069
feeling that these fundamental concepts

199
00:08:13,069 --> 00:08:15,069
are not actually taught very clearly

200
00:08:15,069 --> 00:08:18,069
even in like great computer science

201
00:08:18,069 --> 00:08:21,469
curriculums so I wanted to throw it in

202
00:08:21,469 --> 00:08:23,719
here the best explanation of this that

203
00:08:23,719 --> 00:08:25,909
I've seen is by this guy Daniel Muller

204
00:08:25,909 --> 00:08:26,990
I'm not sure if that's how you say his

205
00:08:26,990 --> 00:08:29,839
name but a really amazing blog post it's

206
00:08:29,839 --> 00:08:31,719
super short it's like four paragraphs

207
00:08:31,719 --> 00:08:34,250
but it really sums it up so and I've

208
00:08:34,250 --> 00:08:36,169
tried to chop it down even more here

209
00:08:36,169 --> 00:08:40,490
just for for time sake but real quick

210
00:08:40,490 --> 00:08:43,610
identity is just you claiming

211
00:08:43,610 --> 00:08:45,140
literally an identity it's like me

212
00:08:45,140 --> 00:08:46,190
walking up to you and saying hi I'm

213
00:08:46,190 --> 00:08:48,020
Jesse you have no way of knowing whether

214
00:08:48,020 --> 00:08:49,520
that's true I could say hi I'm John and

215
00:08:49,520 --> 00:08:50,800
you would believe me just as much right

216
00:08:50,800 --> 00:08:53,120
that's all it is it's like the username

217
00:08:53,120 --> 00:08:54,740
but not the password that's the identity

218
00:08:54,740 --> 00:08:57,200
the second concept is authentication

219
00:08:57,200 --> 00:08:59,060
proving your identity so we do this in

220
00:08:59,060 --> 00:09:00,290
real life obviously when we go to the

221
00:09:00,290 --> 00:09:01,790
airport and we say hey I'm Jesse I have

222
00:09:01,790 --> 00:09:03,410
this ticket to get on this airplane they

223
00:09:03,410 --> 00:09:05,210
say can you please prove that to me with

224
00:09:05,210 --> 00:09:07,940
your ID that's us authenticated our

225
00:09:07,940 --> 00:09:10,310
identities right and so that's usually

226
00:09:10,310 --> 00:09:12,320
something you know like a password or a

227
00:09:12,320 --> 00:09:14,750
token or something you have like a you

228
00:09:14,750 --> 00:09:16,790
baqia or something you know biometric

229
00:09:16,790 --> 00:09:19,300
like your fingerprint your face etc and

230
00:09:19,300 --> 00:09:22,490
last but not least authorization which

231
00:09:22,490 --> 00:09:24,050
is what you're allowed to do once you

232
00:09:24,050 --> 00:09:26,060
have been authenticated so it's like

233
00:09:26,060 --> 00:09:31,040
getting into a high-security facility

234
00:09:31,040 --> 00:09:32,600
you know you might not be able to go

235
00:09:32,600 --> 00:09:34,430
into every room based on your level of

236
00:09:34,430 --> 00:09:37,340
access based on your job role so that's

237
00:09:37,340 --> 00:09:39,850
that's the last building block here and

238
00:09:39,850 --> 00:09:42,170
it's really important to keep all three

239
00:09:42,170 --> 00:09:43,430
of these in mind when you're doing

240
00:09:43,430 --> 00:09:44,840
secrets management because you have to

241
00:09:44,840 --> 00:09:46,190
deal with solving all three of these

242
00:09:46,190 --> 00:09:47,720
problems and you have to solve these

243
00:09:47,720 --> 00:09:50,180
problems for humans accessing the

244
00:09:50,180 --> 00:09:52,160
secrets and storing new secrets and

245
00:09:52,160 --> 00:09:54,410
reading them as well as the machines

246
00:09:54,410 --> 00:09:58,160
right the VMS and the pods and you have

247
00:09:58,160 --> 00:10:01,010
to deal with identity authentication and

248
00:10:01,010 --> 00:10:03,740
authorization for all of that stuff at

249
00:10:03,740 --> 00:10:07,070
every layer of that table that I showed

250
00:10:07,070 --> 00:10:09,470
earlier so it's really important to keep

251
00:10:09,470 --> 00:10:11,420
that in mind as you move up the the

252
00:10:11,420 --> 00:10:13,130
layers in the stack you have to solve

253
00:10:13,130 --> 00:10:14,960
those three problems over and over again

254
00:10:14,960 --> 00:10:16,730
and how you solve them is different at

255
00:10:16,730 --> 00:10:19,060
each layer

256
00:10:21,410 --> 00:10:24,199
there's also this really tricky chicken

257
00:10:24,199 --> 00:10:27,079
and the egg problem which to be totally

258
00:10:27,079 --> 00:10:30,289
honest if you're not on you know one of

259
00:10:30,289 --> 00:10:32,149
the major cloud providers that solves

260
00:10:32,149 --> 00:10:34,129
this for you or helps you solve it I

261
00:10:34,129 --> 00:10:38,779
should say I don't know how you do it I

262
00:10:38,779 --> 00:10:40,489
mean I know theoretically how you do it

263
00:10:40,489 --> 00:10:41,929
what I mean by that is you're going to

264
00:10:41,929 --> 00:10:45,139
need a lot of maybe not a lot you're

265
00:10:45,139 --> 00:10:47,619
gonna need a team of very talented

266
00:10:47,619 --> 00:10:50,779
engineers to actually solve this for you

267
00:10:50,779 --> 00:10:52,699
so that's the question right like we

268
00:10:52,699 --> 00:10:53,989
have this new VM just came out of

269
00:10:53,989 --> 00:10:56,509
nowhere just spun up or a new kubernetes

270
00:10:56,509 --> 00:10:59,269
pod and it's running a service that

271
00:10:59,269 --> 00:11:01,879
needs access to an API token and the API

272
00:11:01,879 --> 00:11:03,499
token is in vault

273
00:11:03,499 --> 00:11:05,899
how does vault know that it should give

274
00:11:05,899 --> 00:11:07,699
the API token to this random thing

275
00:11:07,699 --> 00:11:08,720
that's calling in for the first time

276
00:11:08,720 --> 00:11:12,009
being like hey give me the secret please

277
00:11:12,009 --> 00:11:16,489
the answer is pretty clever it's kind of

278
00:11:16,489 --> 00:11:20,239
like a three-way handshake I think is

279
00:11:20,239 --> 00:11:21,709
what it's called similar to like ooofff

280
00:11:21,709 --> 00:11:27,649
where it's like first the the VM makes a

281
00:11:27,649 --> 00:11:30,079
you know starts up and both the Amazon

282
00:11:30,079 --> 00:11:32,739
and Google have this concept of a

283
00:11:32,739 --> 00:11:36,409
basically signed metadata associated

284
00:11:36,409 --> 00:11:38,809
with a virtual machine and that is

285
00:11:38,809 --> 00:11:41,299
signed by their CA they're kind of like

286
00:11:41,299 --> 00:11:43,069
infrastructure CA for their cloud

287
00:11:43,069 --> 00:11:46,339
platform and so that gives you assurance

288
00:11:46,339 --> 00:11:48,739
that that it gives you an authentication

289
00:11:48,739 --> 00:11:51,289
on that identity right so the identity

290
00:11:51,289 --> 00:11:54,589
of the VM kubernetes works similarly but

291
00:11:54,589 --> 00:11:57,649
slightly different but you got the idea

292
00:11:57,649 --> 00:11:58,220
right

293
00:11:58,220 --> 00:12:01,249
you have sign metadata that comes back

294
00:12:01,249 --> 00:12:03,949
in that JWT you give that to vault and

295
00:12:03,949 --> 00:12:07,879
then vault verifies that again with the

296
00:12:07,879 --> 00:12:10,369
cloud provider and then vault is like

297
00:12:10,369 --> 00:12:11,839
okay I've verified the identity of this

298
00:12:11,839 --> 00:12:15,169
thing I know I can give it basically a

299
00:12:15,169 --> 00:12:17,569
bootstrap token like a first time token

300
00:12:17,569 --> 00:12:19,519
to authenticate to vault and grab

301
00:12:19,519 --> 00:12:22,519
whatever secrets the vault policy allows

302
00:12:22,519 --> 00:12:23,989
which is like the authorization layer

303
00:12:23,989 --> 00:12:27,709
right and so it's a really cool solution

304
00:12:27,709 --> 00:12:30,649
this didn't always exist actually we

305
00:12:30,649 --> 00:12:32,209
were the launch customer for this

306
00:12:32,209 --> 00:12:33,949
feature with Google Cloud and hasher

307
00:12:33,949 --> 00:12:34,760
Corp

308
00:12:34,760 --> 00:12:36,710
you have a talk at Hoshi conf in 2017

309
00:12:36,710 --> 00:12:38,810
about this and we wrote a pretty

310
00:12:38,810 --> 00:12:40,730
extensive blogpost about it as well that

311
00:12:40,730 --> 00:12:43,730
includes a sequence diagram showing

312
00:12:43,730 --> 00:12:47,570
exactly how the how this negotiation

313
00:12:47,570 --> 00:12:49,070
works so check that out if you're

314
00:12:49,070 --> 00:12:52,510
interested in the nitty-gritty details

315
00:12:54,460 --> 00:12:56,990
and it's pretty similar with kubernetes

316
00:12:56,990 --> 00:13:00,650
but it's it's not identical I haven't

317
00:13:00,650 --> 00:13:01,850
looked at in a while to be honest but I

318
00:13:01,850 --> 00:13:04,310
believe it's like the kubernetes api

319
00:13:04,310 --> 00:13:07,820
server is essentially the broker so that

320
00:13:07,820 --> 00:13:09,770
has to be trusted and that has a long

321
00:13:09,770 --> 00:13:11,420
live token to OAuth 2 vault and then

322
00:13:11,420 --> 00:13:15,260
kubernetes itself the API engine is the

323
00:13:15,260 --> 00:13:16,970
thing authenticating and validating the

324
00:13:16,970 --> 00:13:19,160
identities of all the pods so it's sort

325
00:13:19,160 --> 00:13:20,960
of a similar thing but there's a bit

326
00:13:20,960 --> 00:13:23,840
more hops involved in the in the trust

327
00:13:23,840 --> 00:13:31,370
bootstrapping so for those of you who

328
00:13:31,370 --> 00:13:33,320
are not yet doing secrets management in

329
00:13:33,320 --> 00:13:35,330
production which I think was roughly 50%

330
00:13:35,330 --> 00:13:40,010
of the room ich maybe 40 I was thinking

331
00:13:40,010 --> 00:13:42,920
about like how do you go from nothing to

332
00:13:42,920 --> 00:13:45,350
something especially in an environment

333
00:13:45,350 --> 00:13:47,660
where you might have like hundreds or

334
00:13:47,660 --> 00:13:49,460
thousands of Secrets and you know tons

335
00:13:49,460 --> 00:13:50,750
of different services and different

336
00:13:50,750 --> 00:13:53,270
teams that own different things and I

337
00:13:53,270 --> 00:13:57,140
think at a high level you basically want

338
00:13:57,140 --> 00:13:58,970
to make sure that you or whoever's

339
00:13:58,970 --> 00:14:00,410
working on this project with you and

340
00:14:00,410 --> 00:14:02,060
your team have a really solid

341
00:14:02,060 --> 00:14:03,950
understanding of all these concepts and

342
00:14:03,950 --> 00:14:06,800
the technical kind of like gotchas right

343
00:14:06,800 --> 00:14:08,510
like the mem test thing I mentioned like

344
00:14:08,510 --> 00:14:10,700
the bootstrapping of trust for new VMs

345
00:14:10,700 --> 00:14:12,830
and pods these are the difficult

346
00:14:12,830 --> 00:14:14,990
questions that you'll that I guarantee

347
00:14:14,990 --> 00:14:17,330
you will get asked by smart engineers I

348
00:14:17,330 --> 00:14:20,240
your organization's and if you have the

349
00:14:20,240 --> 00:14:23,690
answers for them their respect and

350
00:14:23,690 --> 00:14:25,190
willingness to go along with this

351
00:14:25,190 --> 00:14:29,000
otherwise scary change will be much

352
00:14:29,000 --> 00:14:33,290
greater so to drill a little bit more

353
00:14:33,290 --> 00:14:37,040
into the details on that I kind of broke

354
00:14:37,040 --> 00:14:38,690
this into three sections so I think the

355
00:14:38,690 --> 00:14:40,850
first bucket is like mastering really

356
00:14:40,850 --> 00:14:43,340
critical concepts like those concepts I

357
00:14:43,340 --> 00:14:44,930
mentioned around identity authentication

358
00:14:44,930 --> 00:14:47,629
authorization

359
00:14:47,629 --> 00:14:49,879
a solid understanding of TLS and PKI

360
00:14:49,879 --> 00:14:52,909
this this is not actually specific to

361
00:14:52,909 --> 00:14:54,769
secrets management but in that table

362
00:14:54,769 --> 00:14:58,099
that I showed you about all the layers

363
00:14:58,099 --> 00:15:00,889
in the sack right notice how it said

364
00:15:00,889 --> 00:15:02,599
like encrypted on like all the columns

365
00:15:02,599 --> 00:15:05,419
on the right the reason for that is

366
00:15:05,419 --> 00:15:08,509
because well we do at least and by the

367
00:15:08,509 --> 00:15:10,189
way that table really reflects our

368
00:15:10,189 --> 00:15:12,939
architecture in case that wasn't clear

369
00:15:12,939 --> 00:15:17,029
we actually use vaults vault does other

370
00:15:17,029 --> 00:15:19,879
things aside from just key value secrets

371
00:15:19,879 --> 00:15:23,329
management it also does things like act

372
00:15:23,329 --> 00:15:26,059
as your certificate authority for all of

373
00:15:26,059 --> 00:15:28,939
this infrastructure and so that could be

374
00:15:28,939 --> 00:15:32,089
a whole separate talk but basically you

375
00:15:32,089 --> 00:15:34,969
can use vault as your PKI and issue

376
00:15:34,969 --> 00:15:37,249
certs mutual TLS you know client starts

377
00:15:37,249 --> 00:15:40,909
for all of your infrastructure and

378
00:15:40,909 --> 00:15:43,249
that's exactly what we've done in every

379
00:15:43,249 --> 00:15:44,569
layer of that table that I showed where

380
00:15:44,569 --> 00:15:45,409
it says encrypted

381
00:15:45,409 --> 00:15:47,929
that's all client starts from vault so

382
00:15:47,929 --> 00:15:49,489
you know all of the kubernetes

383
00:15:49,489 --> 00:15:50,569
components that are talking to each

384
00:15:50,569 --> 00:15:52,609
other even console which actually sits

385
00:15:52,609 --> 00:15:54,049
underneath vault right it's the

386
00:15:54,049 --> 00:15:56,299
distributed key-value store every one of

387
00:15:56,299 --> 00:15:58,039
those layers is actually using mutual

388
00:15:58,039 --> 00:16:02,539
TLS so if you don't have your TLS kind

389
00:16:02,539 --> 00:16:05,839
of TLS and PKI they go hand-in-hand

390
00:16:05,839 --> 00:16:08,209
right if you don't have your

391
00:16:08,209 --> 00:16:09,739
fundamentals there i'd say that is

392
00:16:09,739 --> 00:16:11,749
really critical and will serve you

393
00:16:11,749 --> 00:16:14,299
really well with you know tons of

394
00:16:14,299 --> 00:16:19,009
different projects so and it also pretty

395
00:16:19,009 --> 00:16:22,159
much forces you to understand public key

396
00:16:22,159 --> 00:16:24,019
cryptography which again also comes in

397
00:16:24,019 --> 00:16:25,549
really handy and in a lot of different

398
00:16:25,549 --> 00:16:28,939
situations so that's the second one and

399
00:16:28,939 --> 00:16:31,039
then the third one is obviously like the

400
00:16:31,039 --> 00:16:33,559
top-level concepts that are specific to

401
00:16:33,559 --> 00:16:36,019
vault vault has like these concept of

402
00:16:36,019 --> 00:16:39,199
like backends it's just this abstraction

403
00:16:39,199 --> 00:16:40,909
for how they talk about like the

404
00:16:40,909 --> 00:16:42,469
different building blocks of vaults

405
00:16:42,469 --> 00:16:45,199
functionality the different features and

406
00:16:45,199 --> 00:16:47,209
so I think having this high-level

407
00:16:47,209 --> 00:16:48,799
understanding that there are storage

408
00:16:48,799 --> 00:16:50,149
backends so you don't have to use

409
00:16:50,149 --> 00:16:51,879
console you can store things in like

410
00:16:51,879 --> 00:16:55,339
Postgres you can store things in cloud

411
00:16:55,339 --> 00:16:57,829
hosted database options from AWS and

412
00:16:57,829 --> 00:16:59,239
Google Cloud there's a bunch of

413
00:16:59,239 --> 00:17:00,109
different options they all have

414
00:17:00,109 --> 00:17:00,800
different trade-off

415
00:17:00,800 --> 00:17:03,260
around like H a versus redundancy a

416
00:17:03,260 --> 00:17:05,420
versus like ease of backups and speed of

417
00:17:05,420 --> 00:17:08,689
restore the trade-offs are actually

418
00:17:08,689 --> 00:17:11,359
listed pretty well if you look through

419
00:17:11,359 --> 00:17:14,929
the database page on vaults website so

420
00:17:14,929 --> 00:17:17,209
dig through that it's gonna be highly

421
00:17:17,209 --> 00:17:19,069
dependent on your environment and your

422
00:17:19,069 --> 00:17:20,809
goals like which storage back-end you

423
00:17:20,809 --> 00:17:24,709
choose secrets engines so the key value

424
00:17:24,709 --> 00:17:25,910
store is the default one that's just

425
00:17:25,910 --> 00:17:27,349
turned on out of the box that's the

426
00:17:27,349 --> 00:17:29,390
really obvious one you're like I have a

427
00:17:29,390 --> 00:17:31,250
private key I'm gonna put the value of

428
00:17:31,250 --> 00:17:34,400
the private key base 64 it boom that's a

429
00:17:34,400 --> 00:17:35,809
secret in the key value secrets

430
00:17:35,809 --> 00:17:39,770
management back-end but there's a bunch

431
00:17:39,770 --> 00:17:41,600
of other ones so another one that I

432
00:17:41,600 --> 00:17:43,520
didn't list here that we use that's

433
00:17:43,520 --> 00:17:45,920
super cool is called the transit

434
00:17:45,920 --> 00:17:48,260
back-end and it's basically crypto as a

435
00:17:48,260 --> 00:17:51,020
service that you can have your engineers

436
00:17:51,020 --> 00:17:53,120
utilize from the application layer so

437
00:17:53,120 --> 00:17:55,700
you know I'll give our our example

438
00:17:55,700 --> 00:17:57,950
because not as a pitch thing but just

439
00:17:57,950 --> 00:17:59,000
because it's the only one I can think of

440
00:17:59,000 --> 00:18:01,160
like if you want to come in and set your

441
00:18:01,160 --> 00:18:02,630
corporate Wi-Fi password in our product

442
00:18:02,630 --> 00:18:02,960
right

443
00:18:02,960 --> 00:18:04,730
we can't hash that password because we

444
00:18:04,730 --> 00:18:06,410
have to send it down to the device in a

445
00:18:06,410 --> 00:18:08,390
config eventually and has to be able to

446
00:18:08,390 --> 00:18:09,800
join the Wi-Fi with the corporate Wi-Fi

447
00:18:09,800 --> 00:18:13,460
password well and maybe there's a way to

448
00:18:13,460 --> 00:18:14,990
hash it but the protocol doesn't allow

449
00:18:14,990 --> 00:18:18,080
you to do that from Apple so we have to

450
00:18:18,080 --> 00:18:21,230
store it unencrypted right but that's

451
00:18:21,230 --> 00:18:23,450
pretty dangerous so what you can do is

452
00:18:23,450 --> 00:18:27,350
make a call to vaults API and say I have

453
00:18:27,350 --> 00:18:29,059
this data I want to encrypt it and it

454
00:18:29,059 --> 00:18:30,890
will return it to you as an encrypted

455
00:18:30,890 --> 00:18:32,600
blob and then you can write that to the

456
00:18:32,600 --> 00:18:36,169
database so it's encrypted at rest so

457
00:18:36,169 --> 00:18:37,429
that's really cool obviously because

458
00:18:37,429 --> 00:18:39,559
that means even if someone totally owns

459
00:18:39,559 --> 00:18:42,380
your production environment and steals

460
00:18:42,380 --> 00:18:43,760
everything in your databases

461
00:18:43,760 --> 00:18:45,470
at least they won't get that super

462
00:18:45,470 --> 00:18:47,990
sensitive customer data so I really love

463
00:18:47,990 --> 00:18:50,870
the transit back-end as well and of

464
00:18:50,870 --> 00:18:52,010
course I already mentioned the PKI

465
00:18:52,010 --> 00:18:55,160
back-end so that's another example so

466
00:18:55,160 --> 00:18:57,440
just familiarizing yourself with the

467
00:18:57,440 --> 00:18:59,450
different secrets backends and like what

468
00:18:59,450 --> 00:19:01,850
they can be used for will also let you

469
00:19:01,850 --> 00:19:03,679
chime in sometimes and like those

470
00:19:03,679 --> 00:19:06,169
conversations with engineers more at the

471
00:19:06,169 --> 00:19:07,429
design phase where they're like hey I'm

472
00:19:07,429 --> 00:19:09,030
trying to do this thing

473
00:19:09,030 --> 00:19:10,770
I'd like it to be secure but it seems

474
00:19:10,770 --> 00:19:12,000
like it's gonna be a nightmare to deal

475
00:19:12,000 --> 00:19:13,770
with managing all these keys if we want

476
00:19:13,770 --> 00:19:14,880
to do encryption like where we going to

477
00:19:14,880 --> 00:19:17,669
put them how we gonna rotate them how do

478
00:19:17,669 --> 00:19:20,730
we handle a leat like expiration like on

479
00:19:20,730 --> 00:19:23,190
a schedule like rotation so vault

480
00:19:23,190 --> 00:19:24,780
handles literally all of that for you

481
00:19:24,780 --> 00:19:28,860
it's all built in rotation you can make

482
00:19:28,860 --> 00:19:30,240
it so that if you're using the PKI

483
00:19:30,240 --> 00:19:31,799
back-end you have like short-lived

484
00:19:31,799 --> 00:19:33,720
client starts that expire after one day

485
00:19:33,720 --> 00:19:35,970
if you want to be super aggressive so

486
00:19:35,970 --> 00:19:38,340
it's really flexible and allows you to

487
00:19:38,340 --> 00:19:39,960
kind of use it for a bunch of different

488
00:19:39,960 --> 00:19:43,530
use cases and then the last but not

489
00:19:43,530 --> 00:19:45,990
least is the off methods so I talked so

490
00:19:45,990 --> 00:19:48,419
far only about the machine

491
00:19:48,419 --> 00:19:49,890
authentication right

492
00:19:49,890 --> 00:19:51,659
you've got VMs coming up requesting

493
00:19:51,659 --> 00:19:55,140
secrets you've got kubernetes pods

494
00:19:55,140 --> 00:19:56,850
coming up asking for secrets proving

495
00:19:56,850 --> 00:19:58,590
their identity etc but what about the

496
00:19:58,590 --> 00:20:00,840
humans so there's also a bunch of

497
00:20:00,840 --> 00:20:04,200
different options for how you all and

498
00:20:04,200 --> 00:20:06,929
your engineers and and you know security

499
00:20:06,929 --> 00:20:09,200
team members can actually authenticate

500
00:20:09,200 --> 00:20:12,840
into vault as a human and you know add

501
00:20:12,840 --> 00:20:15,870
and remove new secrets so some of the

502
00:20:15,870 --> 00:20:18,770
ones off the top of my head are SSH

503
00:20:18,770 --> 00:20:21,120
obviously the obvious built-in one is

504
00:20:21,120 --> 00:20:23,130
token based it's kind of like API token

505
00:20:23,130 --> 00:20:27,870
based off but a really cool one is the

506
00:20:27,870 --> 00:20:30,059
OID C one because that lets you plug in

507
00:20:30,059 --> 00:20:32,820
to basically any OAuth provider and so

508
00:20:32,820 --> 00:20:36,150
that's what we are moving to now where

509
00:20:36,150 --> 00:20:39,539
basically you'll be able to log in if

510
00:20:39,539 --> 00:20:41,130
you're on the list of users that's

511
00:20:41,130 --> 00:20:43,549
allowed to log in not just anyone right

512
00:20:43,549 --> 00:20:45,659
you'll be able to log in with your G

513
00:20:45,659 --> 00:20:47,400
suite credentials which is awesome

514
00:20:47,400 --> 00:20:48,659
because a lot of companies nowadays

515
00:20:48,659 --> 00:20:50,880
already have very strong protections on

516
00:20:50,880 --> 00:20:53,120
their G suite like mandatory to FA

517
00:20:53,120 --> 00:20:55,110
sometimes depending on your company

518
00:20:55,110 --> 00:20:57,690
mandatory security key only which is

519
00:20:57,690 --> 00:20:59,940
unfishable so if you already have those

520
00:20:59,940 --> 00:21:02,700
strong protections just like you try to

521
00:21:02,700 --> 00:21:05,340
do a single sign-on everywhere for all

522
00:21:05,340 --> 00:21:07,380
your SAS apps to protect against you

523
00:21:07,380 --> 00:21:09,480
know password reuse attacks you can kind

524
00:21:09,480 --> 00:21:11,039
of just take the same exact model and

525
00:21:11,039 --> 00:21:14,250
say hey we're gonna put all our eggs in

526
00:21:14,250 --> 00:21:15,780
one basket secure this thing really well

527
00:21:15,780 --> 00:21:19,549
and use it everywhere and so

528
00:21:19,549 --> 00:21:21,619
same kind of the same concept as you

529
00:21:21,619 --> 00:21:23,419
know an SSH bastion model right instead

530
00:21:23,419 --> 00:21:24,470
of letting people connect anywhere

531
00:21:24,470 --> 00:21:25,669
create this choke point with great

532
00:21:25,669 --> 00:21:29,360
auditing really strong config and force

533
00:21:29,360 --> 00:21:31,669
everything through there so that's a

534
00:21:31,669 --> 00:21:33,230
really cool option as well for the kind

535
00:21:33,230 --> 00:21:35,989
of human human authentic authentication

536
00:21:35,989 --> 00:21:42,379
story alright and last but not least so

537
00:21:42,379 --> 00:21:45,529
we've covered two things just to recap

538
00:21:45,529 --> 00:21:48,159
here the mastering critical concepts

539
00:21:48,159 --> 00:21:51,739
getting comfortable with getting started

540
00:21:51,739 --> 00:21:54,919
is the second one sorry so the getting

541
00:21:54,919 --> 00:21:56,450
started guide is actually really cool I

542
00:21:56,450 --> 00:21:59,389
think it's important though to master

543
00:21:59,389 --> 00:22:01,129
the concepts first because I was reading

544
00:22:01,129 --> 00:22:02,509
through the getting started guide and it

545
00:22:02,509 --> 00:22:04,700
it still assumes a bit of baseline

546
00:22:04,700 --> 00:22:07,700
knowledge and I think Mitchell actually

547
00:22:07,700 --> 00:22:09,139
acknowledged that in his hacker news

548
00:22:09,139 --> 00:22:11,239
comment he said we're working on making

549
00:22:11,239 --> 00:22:12,739
it more accessible for people just

550
00:22:12,739 --> 00:22:15,409
getting into this but the getting

551
00:22:15,409 --> 00:22:17,179
started guide is really good if you

552
00:22:17,179 --> 00:22:19,039
already have the those high level

553
00:22:19,039 --> 00:22:21,139
concepts down so it walks you through

554
00:22:21,139 --> 00:22:23,779
all of this stuff all the way from

555
00:22:23,779 --> 00:22:24,950
starting the server and DEF no

556
00:22:24,950 --> 00:22:26,239
definitely definitely a really cool

557
00:22:26,239 --> 00:22:27,710
thing I'm really glad they built this in

558
00:22:27,710 --> 00:22:31,639
because it kind of skips all the

559
00:22:31,639 --> 00:22:33,470
bootstrapping stuff you have to do to

560
00:22:33,470 --> 00:22:35,269
make sure that vault is operating the

561
00:22:35,269 --> 00:22:37,279
vault infrastructure itself is operating

562
00:22:37,279 --> 00:22:39,470
in a secure way like all the TLS and all

563
00:22:39,470 --> 00:22:41,299
that stuff and it just lets you dive in

564
00:22:41,299 --> 00:22:42,559
and start working with the actual

565
00:22:42,559 --> 00:22:44,269
command line tools reading and writing

566
00:22:44,269 --> 00:22:45,950
secrets and getting familiar with the

567
00:22:45,950 --> 00:22:48,200
concepts so you can gain some confidence

568
00:22:48,200 --> 00:22:49,609
that this is a tool you actually want to

569
00:22:49,609 --> 00:22:50,899
use before you sink a whole bunch of

570
00:22:50,899 --> 00:22:54,739
time into securing it so yeah that's the

571
00:22:54,739 --> 00:22:56,029
list I won't go through it in great

572
00:22:56,029 --> 00:22:58,759
detail but a pretty comprehensive even

573
00:22:58,759 --> 00:23:02,149
touches on the API at the end and then

574
00:23:02,149 --> 00:23:03,889
once you have all the tech down and the

575
00:23:03,889 --> 00:23:05,749
reason I put the tech down again as I

576
00:23:05,749 --> 00:23:07,190
mentioned is because I think you need to

577
00:23:07,190 --> 00:23:09,379
be ready to answer the hard questions by

578
00:23:09,379 --> 00:23:11,509
the time you start the human part of

579
00:23:11,509 --> 00:23:13,549
this because that's gonna help you and

580
00:23:13,549 --> 00:23:15,289
instill confidence but once you've done

581
00:23:15,289 --> 00:23:16,669
that I think the right way to tackle

582
00:23:16,669 --> 00:23:19,190
this is to explain the problem and the

583
00:23:19,190 --> 00:23:22,129
benefits to your immediate team kind of

584
00:23:22,129 --> 00:23:23,119
like I did at the beginning with the

585
00:23:23,119 --> 00:23:24,769
goober example but you know maybe find a

586
00:23:24,769 --> 00:23:28,159
few more examples you know start maybe

587
00:23:28,159 --> 00:23:30,080
with talking with if you're on the

588
00:23:30,080 --> 00:23:31,670
DevOps team your team if you're not

589
00:23:31,670 --> 00:23:33,800
you know maybe loop the men your

590
00:23:33,800 --> 00:23:35,330
platform you know cloud platform

591
00:23:35,330 --> 00:23:37,160
engineering team whatever teams you have

592
00:23:37,160 --> 00:23:39,740
that do this work in this space

593
00:23:39,740 --> 00:23:41,900
get them involved and then once they

594
00:23:41,900 --> 00:23:43,700
understand the value because they're

595
00:23:43,700 --> 00:23:44,840
going to be a lot closer to the problem

596
00:23:44,840 --> 00:23:47,900
then you know product engineers that are

597
00:23:47,900 --> 00:23:50,300
working on customer facing features so

598
00:23:50,300 --> 00:23:52,160
once you have the like kind of ops and

599
00:23:52,160 --> 00:23:57,350
security people all evangelized then I

600
00:23:57,350 --> 00:23:58,820
think that's where you can start going

601
00:23:58,820 --> 00:24:01,310
and talking to you the wider engineering

602
00:24:01,310 --> 00:24:03,200
org and say hey that's really important

603
00:24:03,200 --> 00:24:05,510
that we do this we all believe this but

604
00:24:05,510 --> 00:24:07,430
we need your help and we're gonna do

605
00:24:07,430 --> 00:24:09,320
this on a long time horizon we're gonna

606
00:24:09,320 --> 00:24:14,120
do it you know very gently totally aware

607
00:24:14,120 --> 00:24:17,630
of you know potential for downtime when

608
00:24:17,630 --> 00:24:19,040
you're dealing with secrets

609
00:24:19,040 --> 00:24:23,840
and so crowdsource you know start early

610
00:24:23,840 --> 00:24:26,750
talk to every team talk to every service

611
00:24:26,750 --> 00:24:28,430
owner and be like hey we need you to

612
00:24:28,430 --> 00:24:30,350
think of all the secrets that are

613
00:24:30,350 --> 00:24:31,760
involved in your service and start

614
00:24:31,760 --> 00:24:34,550
documenting and then over time that will

615
00:24:34,550 --> 00:24:36,740
get you know you'll probably get like

616
00:24:36,740 --> 00:24:39,290
70% on the first pass and then the last

617
00:24:39,290 --> 00:24:42,200
like 30% will take months but you will

618
00:24:42,200 --> 00:24:45,350
eventually get to hopefully everything

619
00:24:45,350 --> 00:24:47,300
and then you can basically do a test in

620
00:24:47,300 --> 00:24:51,380
in dev with all different secrets than

621
00:24:51,380 --> 00:24:53,240
you would use in prod which hopefully

622
00:24:53,240 --> 00:24:56,630
everyone's doing that but yeah that

623
00:24:56,630 --> 00:24:58,640
should also help you gain more

624
00:24:58,640 --> 00:25:00,410
confidence again right if you actually

625
00:25:00,410 --> 00:25:03,250
do this in a non Prada environment and

626
00:25:03,250 --> 00:25:07,340
the cutover goes well then that's

627
00:25:07,340 --> 00:25:08,570
awesome right and you can do that you

628
00:25:08,570 --> 00:25:10,010
can do a one service at a time or one

629
00:25:10,010 --> 00:25:11,990
team at a time even within dev so you

630
00:25:11,990 --> 00:25:13,490
can really slice this up and make it a

631
00:25:13,490 --> 00:25:15,260
very gradual thing so that by the time

632
00:25:15,260 --> 00:25:16,450
you actually push it out in prod

633
00:25:16,450 --> 00:25:19,580
everyone has like pretty high confidence

634
00:25:19,580 --> 00:25:22,580
that nothing is going to break so yeah

635
00:25:22,580 --> 00:25:24,200
that's how I'd recommend approaching

636
00:25:24,200 --> 00:25:27,230
that another thing after the cataloging

637
00:25:27,230 --> 00:25:29,620
of all the actual secrets is of course

638
00:25:29,620 --> 00:25:31,490
figuring out who should actually get

639
00:25:31,490 --> 00:25:34,520
access to it both which you know VMs and

640
00:25:34,520 --> 00:25:38,300
which pods if you have containers but

641
00:25:38,300 --> 00:25:40,190
also which teams in which humans and

642
00:25:40,190 --> 00:25:43,310
this is also a very long process I don't

643
00:25:43,310 --> 00:25:44,720
personally think this should be a

644
00:25:44,720 --> 00:25:45,360
blocker

645
00:25:45,360 --> 00:25:47,670
people starting to do product secrets

646
00:25:47,670 --> 00:25:48,960
management in production

647
00:25:48,960 --> 00:25:51,030
I think it's raising the bar

648
00:25:51,030 --> 00:25:53,070
substantially even if you start out by

649
00:25:53,070 --> 00:25:55,679
just getting all your secrets in here

650
00:25:55,679 --> 00:25:57,809
and not changing it let's say the status

651
00:25:57,809 --> 00:25:59,340
quo your company is that everyone has

652
00:25:59,340 --> 00:26:01,830
that every access every secret great

653
00:26:01,830 --> 00:26:03,600
then just don't change that status quo

654
00:26:03,600 --> 00:26:05,280
because you've raised the bar so much at

655
00:26:05,280 --> 00:26:08,190
least in the kind of foundational bucket

656
00:26:08,190 --> 00:26:10,260
of where all this stuff is stored and

657
00:26:10,260 --> 00:26:12,090
you set yourself up for success in the

658
00:26:12,090 --> 00:26:14,700
future by doing this and that way you

659
00:26:14,700 --> 00:26:16,410
can then take the same approach with

660
00:26:16,410 --> 00:26:18,570
locking down the permissions over time

661
00:26:18,570 --> 00:26:20,340
but that's a lot easier once you have

662
00:26:20,340 --> 00:26:22,200
everything in one place effectively

663
00:26:22,200 --> 00:26:24,270
managed and secured and encrypted at

664
00:26:24,270 --> 00:26:29,220
rest so that's personally I think there

665
00:26:29,220 --> 00:26:31,410
should be approached obviously it's just

666
00:26:31,410 --> 00:26:36,150
my opinion but uh yeah that is pretty

667
00:26:36,150 --> 00:26:39,330
much it on everything I wanted to leave

668
00:26:39,330 --> 00:26:41,340
a lot of time for questions on purpose

669
00:26:41,340 --> 00:26:43,320
with this talk because there's so much

670
00:26:43,320 --> 00:26:45,419
depth in each of the areas and I feel

671
00:26:45,419 --> 00:26:47,669
like I hope at least that people will

672
00:26:47,669 --> 00:26:49,799
have a lot of questions and we can have

673
00:26:49,799 --> 00:26:52,980
like kind of a open discussion so thank

674
00:26:52,980 --> 00:26:54,800
you

675
00:26:54,800 --> 00:27:01,919
[Applause]

676
00:27:06,380 --> 00:27:08,950
rather

677
00:27:09,620 --> 00:27:12,409
did you have a question oh we have a

678
00:27:12,409 --> 00:27:15,159
Mike on Mike

679
00:27:15,309 --> 00:27:18,610
how does this

680
00:27:25,539 --> 00:27:28,269
by the way I love feedback on my speed

681
00:27:28,269 --> 00:27:31,789
if I was too slow or too fast I would

682
00:27:31,789 --> 00:27:36,679
love me back and I guess I can equation

683
00:27:36,679 --> 00:27:38,809
around if you're putting all your

684
00:27:38,809 --> 00:27:41,419
secrets and your keys in hash fault then

685
00:27:41,419 --> 00:27:42,710
that's getting the keys to the kingdom

686
00:27:42,710 --> 00:27:44,630
so what's your thoughts our own door how

687
00:27:44,630 --> 00:27:46,940
to tackle they break glass solution so

688
00:27:46,940 --> 00:27:49,880
if things go wrong you can recover all

689
00:27:49,880 --> 00:27:55,360
these kind of important secrets yeah so

690
00:27:55,360 --> 00:27:57,470
you're correct that it definitely

691
00:27:57,470 --> 00:27:59,539
concentrates all of your you know eggs

692
00:27:59,539 --> 00:28:02,179
in one basket but I guess the idea is

693
00:28:02,179 --> 00:28:03,289
that it's just a very well protected

694
00:28:03,289 --> 00:28:06,740
basket and it's not just well protected

695
00:28:06,740 --> 00:28:08,860
and by the way they publish their entire

696
00:28:08,860 --> 00:28:10,909
security architecture for this thing

697
00:28:10,909 --> 00:28:14,630
it's it's public it's been audited by I

698
00:28:14,630 --> 00:28:17,409
think ANSI C Group I'm not sure though

699
00:28:17,409 --> 00:28:20,570
but it's super hardened it's all written

700
00:28:20,570 --> 00:28:22,220
and go which also lends a lot of

701
00:28:22,220 --> 00:28:26,960
benefits like mostly memory safe as a

702
00:28:26,960 --> 00:28:30,380
language and great support for TLS built

703
00:28:30,380 --> 00:28:33,289
into the standard library but to answer

704
00:28:33,289 --> 00:28:35,600
your question directly yes in terms of a

705
00:28:35,600 --> 00:28:38,269
break glass situation a concept that I

706
00:28:38,269 --> 00:28:40,190
kind of skipped over but but which is

707
00:28:40,190 --> 00:28:41,659
made very apparent and like the getting

708
00:28:41,659 --> 00:28:44,809
started guide is that a vault has this

709
00:28:44,809 --> 00:28:48,380
concept of unsealed or sealed and when

710
00:28:48,380 --> 00:28:50,210
the server's first come online they're

711
00:28:50,210 --> 00:28:53,659
all sealed and vault uses something

712
00:28:53,659 --> 00:28:56,240
called Shamir secret sharing where you

713
00:28:56,240 --> 00:28:57,889
basically need a certain threshold of

714
00:28:57,889 --> 00:29:01,149
tokens in order to unseal and actually

715
00:29:01,149 --> 00:29:04,519
you know decrypt and operationalize the

716
00:29:04,519 --> 00:29:10,130
vault servers and storage and on top of

717
00:29:10,130 --> 00:29:13,510
that there is a cryptographically backed

718
00:29:13,510 --> 00:29:16,279
audit log built into vault as well so

719
00:29:16,279 --> 00:29:17,809
every single action that's taken you

720
00:29:17,809 --> 00:29:19,639
know through the API by human doesn't

721
00:29:19,639 --> 00:29:22,279
matter I think even internal operations

722
00:29:22,279 --> 00:29:24,649
involve doing things itself is all

723
00:29:24,649 --> 00:29:26,210
written to that auto log which cannot be

724
00:29:26,210 --> 00:29:27,520
modified because it's

725
00:29:27,520 --> 00:29:32,639
you know cryptographically signed so

726
00:29:33,120 --> 00:29:35,770
yeah you would in a break glass

727
00:29:35,770 --> 00:29:38,559
situation probably what you do is just

728
00:29:38,559 --> 00:29:41,590
seal it and you'd have a full auto trail

729
00:29:41,590 --> 00:29:43,540
of all the attacker activity and know

730
00:29:43,540 --> 00:29:45,070
exactly which secrets were compromised

731
00:29:45,070 --> 00:29:47,830
and where like exactly which VMS and

732
00:29:47,830 --> 00:29:49,929
which pods because you have the logs as

733
00:29:49,929 --> 00:29:53,920
well of the bootstrapping and you also

734
00:29:53,920 --> 00:29:57,130
have the logs on the the policies which

735
00:29:57,130 --> 00:29:58,690
are like those authorization groups like

736
00:29:58,690 --> 00:30:00,010
which things are allowed to access what

737
00:30:00,010 --> 00:30:02,580
secrets so you could even threat model

738
00:30:02,580 --> 00:30:05,770
in your incident response what the worst

739
00:30:05,770 --> 00:30:07,480
case scenario is like if the attacker

740
00:30:07,480 --> 00:30:09,250
got onto this vm they would have had a

741
00:30:09,250 --> 00:30:11,410
token that gave them access to this set

742
00:30:11,410 --> 00:30:13,990
of secrets based on this vault policy so

743
00:30:13,990 --> 00:30:16,600
it makes it so much easier and clearer

744
00:30:16,600 --> 00:30:18,460
and clean to do incident response even

745
00:30:18,460 --> 00:30:24,160
in that worst case scenario hi I'm

746
00:30:24,160 --> 00:30:26,950
thanks for a great talk um what should I

747
00:30:26,950 --> 00:30:29,410
tell our Cuban IT admins who wants to

748
00:30:29,410 --> 00:30:33,160
use them CEO secrets and stole encrypted

749
00:30:33,160 --> 00:30:37,510
secrets in github sorry I just want to

750
00:30:37,510 --> 00:30:38,679
make sure I understood the question so

751
00:30:38,679 --> 00:30:41,290
you're saying you're using gke and you

752
00:30:41,290 --> 00:30:43,330
want to encrypt the secrets but you want

753
00:30:43,330 --> 00:30:45,190
to keep on github no I don't want to

754
00:30:45,190 --> 00:30:49,440
okay I want to fend off the kubernetes

755
00:30:49,440 --> 00:30:53,679
phonetic that want to stow secrets using

756
00:30:53,679 --> 00:30:57,790
CEO secrets so they argument being you

757
00:30:57,790 --> 00:31:00,640
know native Cuba native resource custom

758
00:31:00,640 --> 00:31:03,580
type support and these and that and I

759
00:31:03,580 --> 00:31:06,130
personally prefer and I really don't

760
00:31:06,130 --> 00:31:09,340
want to put any secret in repositories

761
00:31:09,340 --> 00:31:12,280
but they argument being you know strong

762
00:31:12,280 --> 00:31:16,570
encryption key for chaos I and so on so

763
00:31:16,570 --> 00:31:22,809
forth I say I say I so yeah there's I

764
00:31:22,809 --> 00:31:24,460
guess the argument is certain people

765
00:31:24,460 --> 00:31:27,700
have a preference for storing secrets in

766
00:31:27,700 --> 00:31:29,830
the same repo as the code but encrypted

767
00:31:29,830 --> 00:31:32,890
within the repo and there's definitely

768
00:31:32,890 --> 00:31:35,680
multiple options for doing that

769
00:31:35,680 --> 00:31:38,920
I think what gets difficult with that

770
00:31:38,920 --> 00:31:42,460
approach is handling the rotation having

771
00:31:42,460 --> 00:31:44,320
an auto trail of who actually access the

772
00:31:44,320 --> 00:31:45,730
secret because where they just access in

773
00:31:45,730 --> 00:31:46,750
the code or where the access in the

774
00:31:46,750 --> 00:31:48,520
secret like you really don't know yeah

775
00:31:48,520 --> 00:31:51,130
so there's a little bit of convenience

776
00:31:51,130 --> 00:31:54,820
there I agree but yeah I think there's a

777
00:31:54,820 --> 00:31:55,870
lot of things that are much more

778
00:31:55,870 --> 00:31:57,630
difficult like the key management

779
00:31:57,630 --> 00:32:01,809
rotation auditing just yeah all some of

780
00:32:01,809 --> 00:32:03,730
some of the things I had talked about I

781
00:32:03,730 --> 00:32:06,760
think that if you kind of created a I

782
00:32:06,760 --> 00:32:07,809
think the right way to approach that if

783
00:32:07,809 --> 00:32:11,260
I were you I situation is probably just

784
00:32:11,260 --> 00:32:12,220
create like a side-by-side comparison

785
00:32:12,220 --> 00:32:17,070
where you list out all of the kind of

786
00:32:17,280 --> 00:32:20,170
features almost of like a secrets

787
00:32:20,170 --> 00:32:22,059
management systems such as vault like

788
00:32:22,059 --> 00:32:26,470
the rotation as etc on the left and then

789
00:32:26,470 --> 00:32:28,690
you have like a few different projects

790
00:32:28,690 --> 00:32:30,309
and you actually compare them with like

791
00:32:30,309 --> 00:32:33,640
green check box or X and hopefully that

792
00:32:33,640 --> 00:32:36,190
would illustrate the vast difference

793
00:32:36,190 --> 00:32:40,960
there yeah hi I probably have like two

794
00:32:40,960 --> 00:32:42,880
questions yeah the first one would be

795
00:32:42,880 --> 00:32:45,040
where are you able to implement the

796
00:32:45,040 --> 00:32:47,830
password rotation were we able to

797
00:32:47,830 --> 00:32:51,190
implement rotation yet password rotation

798
00:32:51,190 --> 00:32:52,510
yeah

799
00:32:52,510 --> 00:32:54,790
like integrating Hashi Corp with for

800
00:32:54,790 --> 00:32:56,830
example databases so you can rotate the

801
00:32:56,830 --> 00:32:58,870
passwords automatically and then they

802
00:32:58,870 --> 00:33:01,780
just provide those to the systems yeah

803
00:33:01,780 --> 00:33:03,790
are you asking if that's possible I know

804
00:33:03,790 --> 00:33:06,280
it's possible if it's if you were able

805
00:33:06,280 --> 00:33:08,770
to do that in some part or in some phase

806
00:33:08,770 --> 00:33:12,570
of your project oh I see you're saying I

807
00:33:12,570 --> 00:33:16,720
know we have looked at it I can't

808
00:33:16,720 --> 00:33:18,429
remember if we have implements it or not

809
00:33:18,429 --> 00:33:20,830
to be totally honest because that's what

810
00:33:20,830 --> 00:33:22,720
we're looking into yeah it's like for

811
00:33:22,720 --> 00:33:24,880
example your Wi-Fi passport or the the

812
00:33:24,880 --> 00:33:27,760
other incident yeah for example for

813
00:33:27,760 --> 00:33:29,230
incident response you don't have to go

814
00:33:29,230 --> 00:33:31,840
manually into all the databases totally

815
00:33:31,840 --> 00:33:34,750
hasn't change them like if you and we're

816
00:33:34,750 --> 00:33:36,730
looking into that also that's why I was

817
00:33:36,730 --> 00:33:38,710
the the other question would have been

818
00:33:38,710 --> 00:33:42,130
that in what face did you come

819
00:33:42,130 --> 00:33:44,320
yeah the IT ops and said okay we want to

820
00:33:44,320 --> 00:33:46,360
rotate the passwords automatically you

821
00:33:46,360 --> 00:33:47,280
don't have to

822
00:33:47,280 --> 00:33:50,400
and the second question would be do you

823
00:33:50,400 --> 00:33:54,480
run high availability yes and do you

824
00:33:54,480 --> 00:33:56,910
have any idea how many passwords do you

825
00:33:56,910 --> 00:34:00,000
provide per minute or per second or oh

826
00:34:00,000 --> 00:34:01,620
like what our throughput volume is I

827
00:34:01,620 --> 00:34:02,820
don't know actually I would have to talk

828
00:34:02,820 --> 00:34:04,860
to her and because we're looking at have

829
00:34:04,860 --> 00:34:07,220
you ever heard about like cyber Conger

830
00:34:07,220 --> 00:34:10,710
that's something similar and we were

831
00:34:10,710 --> 00:34:13,949
looking into that and they always ask me

832
00:34:13,949 --> 00:34:15,389
like how many passwords do you want to

833
00:34:15,389 --> 00:34:17,460
provide because like we are not the

834
00:34:17,460 --> 00:34:19,429
company that would be able to do this

835
00:34:19,429 --> 00:34:23,730
let's say agile so I have to have a

836
00:34:23,730 --> 00:34:25,560
project consent set up and everything

837
00:34:25,560 --> 00:34:27,330
upfront yeah in order to get the

838
00:34:27,330 --> 00:34:29,250
solution so we were looking into her she

839
00:34:29,250 --> 00:34:31,230
Corp sadly we were not able to buy it

840
00:34:31,230 --> 00:34:34,199
and to have the support that our IT Ops

841
00:34:34,199 --> 00:34:36,929
requires yeah and we are as security are

842
00:34:36,929 --> 00:34:39,270
not able to have enough people for

843
00:34:39,270 --> 00:34:41,340
anything not even to to run at a chic or

844
00:34:41,340 --> 00:34:44,399
yeah we actually lost on Hoshi core that

845
00:34:44,399 --> 00:34:47,219
those are the questions and for for high

846
00:34:47,219 --> 00:34:49,020
availability do you know what hashey

847
00:34:49,020 --> 00:34:51,480
Corp does so you have like two locations

848
00:34:51,480 --> 00:34:53,820
and how do they synchronize like just a

849
00:34:53,820 --> 00:34:55,710
pattern between the two databases that

850
00:34:55,710 --> 00:34:58,590
you have to have yeah so I actually had

851
00:34:58,590 --> 00:35:00,660
one more thought on your first question

852
00:35:00,660 --> 00:35:04,080
Oh password yeah so I just want to make

853
00:35:04,080 --> 00:35:05,040
sure the whole audience is aware of

854
00:35:05,040 --> 00:35:06,840
where what the thing is that you're

855
00:35:06,840 --> 00:35:10,050
asking has your core vault has a feature

856
00:35:10,050 --> 00:35:14,760
that lets you rotate generate and rotate

857
00:35:14,760 --> 00:35:17,520
on any frequency that you desire the

858
00:35:17,520 --> 00:35:19,470
database credentials the credentials

859
00:35:19,470 --> 00:35:21,930
that you're a a player actually uses to

860
00:35:21,930 --> 00:35:24,810
authenticate to the database so that's

861
00:35:24,810 --> 00:35:27,720
pretty cool and it's also like he

862
00:35:27,720 --> 00:35:31,980
mentioned very very nice and a breach

863
00:35:31,980 --> 00:35:33,510
scenario because you could just rotate

864
00:35:33,510 --> 00:35:35,370
all your database cards everywhere with

865
00:35:35,370 --> 00:35:40,650
like you know the drop of a hat so that

866
00:35:40,650 --> 00:35:42,840
was the first one and then the second

867
00:35:42,840 --> 00:35:46,410
sorry I'm forgetting high availability

868
00:35:46,410 --> 00:35:50,460
yes so not every storage back-end

869
00:35:50,460 --> 00:35:52,110
supports high availability mode that's

870
00:35:52,110 --> 00:35:54,270
why there's some trade-off there so

871
00:35:54,270 --> 00:35:56,280
that's actually why we chose to go with

872
00:35:56,280 --> 00:35:57,660
console which was sort of the first

873
00:35:57,660 --> 00:35:59,640
back-end that was available with vaults

874
00:35:59,640 --> 00:36:01,090
because we started using vault like

875
00:36:01,090 --> 00:36:08,790
in 2016 same with kubernetes so yeah

876
00:36:08,790 --> 00:36:10,750
definitely choose the right back-end for

877
00:36:10,750 --> 00:36:13,540
your environment and I think that is

878
00:36:13,540 --> 00:36:15,130
also going to affect your throughput as

879
00:36:15,130 --> 00:36:17,470
well of like how fast you can how many

880
00:36:17,470 --> 00:36:20,980
requests you can serve so we do consul

881
00:36:20,980 --> 00:36:23,980
across multiple regions availability

882
00:36:23,980 --> 00:36:27,160
zones so that we have a lot of

883
00:36:27,160 --> 00:36:30,160
redundancy and then we also do like a

884
00:36:30,160 --> 00:36:32,620
snapshot of the entire console like

885
00:36:32,620 --> 00:36:34,720
distributed key-value store on a

886
00:36:34,720 --> 00:36:36,760
schedule very frequently I believe it's

887
00:36:36,760 --> 00:36:39,040
every 30 minutes and then we back that

888
00:36:39,040 --> 00:36:40,750
up to Google Cloud Storage so there's

889
00:36:40,750 --> 00:36:41,800
just like so many layers of redundancy

890
00:36:41,800 --> 00:36:45,220
because you really cannot lose that data

891
00:36:45,220 --> 00:36:48,070
it's very bad if you lose your all of

892
00:36:48,070 --> 00:36:50,950
your secrets or if it goes down so a che

893
00:36:50,950 --> 00:36:52,960
and redundancy and backups super

894
00:36:52,960 --> 00:36:57,820
important with this stuff okay sorry

895
00:36:57,820 --> 00:36:59,650
there's one more question more questions

896
00:36:59,650 --> 00:37:05,230
one hit I yeah

897
00:37:05,230 --> 00:37:08,140
what would console be your back-end of

898
00:37:08,140 --> 00:37:10,270
choice if there's no other reason to

899
00:37:10,270 --> 00:37:16,330
look for something else we haven't had a

900
00:37:16,330 --> 00:37:17,770
reason to change but I also haven't

901
00:37:17,770 --> 00:37:21,070
looked really in-depth at you know the

902
00:37:21,070 --> 00:37:22,950
alternatives and how things have evolved

903
00:37:22,950 --> 00:37:27,580
I think I think someone told me that you

904
00:37:27,580 --> 00:37:29,530
can actually use two backends at once

905
00:37:29,530 --> 00:37:32,500
now which I haven't verified this but

906
00:37:32,500 --> 00:37:34,630
that could be pretty interesting to get

907
00:37:34,630 --> 00:37:37,750
kind of like the benefits of different

908
00:37:37,750 --> 00:37:39,250
characteristics of different storage

909
00:37:39,250 --> 00:37:42,540
options so you actually just use

910
00:37:42,540 --> 00:37:47,560
multiple maybe like one for writes I'm

911
00:37:47,560 --> 00:37:49,020
not sure how that works to be honest

912
00:37:49,020 --> 00:37:51,940
totally blanking out now but someone

913
00:37:51,940 --> 00:37:53,470
very authoritative told me this

914
00:37:53,470 --> 00:37:56,770
information without naming names so I

915
00:37:56,770 --> 00:37:58,540
think it is possible I just haven't

916
00:37:58,540 --> 00:37:59,500
looked at it and I'm not sure it's

917
00:37:59,500 --> 00:38:07,210
document it either so anymore um yeah

918
00:38:07,210 --> 00:38:09,040
it's just wondering what integration

919
00:38:09,040 --> 00:38:10,720
patterns did you play around with in

920
00:38:10,720 --> 00:38:12,430
terms of actually getting the passwords

921
00:38:12,430 --> 00:38:14,230
from the vault so as I understand that

922
00:38:14,230 --> 00:38:15,640
this kind of a native integration

923
00:38:15,640 --> 00:38:17,800
pattern where the application reaches

924
00:38:17,800 --> 00:38:19,690
out to the vault who gets it and the

925
00:38:19,690 --> 00:38:24,180
second one is I think a pattern that

926
00:38:24,180 --> 00:38:26,290
hashcode were playing around with with

927
00:38:26,290 --> 00:38:29,320
maybe like a sidecar pod to inject the

928
00:38:29,320 --> 00:38:31,450
secrets into it just wondering which

929
00:38:31,450 --> 00:38:34,110
kind of pattern you guys went with oh

930
00:38:34,110 --> 00:38:36,600
yeah that's a great question I

931
00:38:36,600 --> 00:38:40,660
definitely should have mentioned that so

932
00:38:40,660 --> 00:38:42,610
he's asking like how do you actually get

933
00:38:42,610 --> 00:38:46,240
the secrets into the pod within

934
00:38:46,240 --> 00:38:49,660
kubernetes very good question so the way

935
00:38:49,660 --> 00:38:54,070
that we do it is the only way I've

936
00:38:54,070 --> 00:38:56,080
really seen people do it but it doesn't

937
00:38:56,080 --> 00:38:59,140
feel very good and I think that there's

938
00:38:59,140 --> 00:39:02,860
better ways now but I haven't I'm not

939
00:39:02,860 --> 00:39:04,690
sure exactly what they are but I'll just

940
00:39:04,690 --> 00:39:07,180
answer the question directly so we use

941
00:39:07,180 --> 00:39:09,220
an init container which is a special

942
00:39:09,220 --> 00:39:11,170
container that runs before the actual

943
00:39:11,170 --> 00:39:13,570
container that's gonna like have a

944
00:39:13,570 --> 00:39:16,570
long-lived well maybe not long but the

945
00:39:16,570 --> 00:39:19,570
longer running container and so it just

946
00:39:19,570 --> 00:39:20,950
spins up

947
00:39:20,950 --> 00:39:23,620
FAR's off a script could be in whatever

948
00:39:23,620 --> 00:39:26,070
you want I don't know Python bash

949
00:39:26,070 --> 00:39:28,630
connects to vault

950
00:39:28,630 --> 00:39:31,510
fetches the secrets and needs and rights

951
00:39:31,510 --> 00:39:33,790
that to the mem disk and then that mem

952
00:39:33,790 --> 00:39:36,070
disk is made available to the pod the

953
00:39:36,070 --> 00:39:39,400
actual service pod that you know come

954
00:39:39,400 --> 00:39:41,500
comes online and is the more

955
00:39:41,500 --> 00:39:44,800
long-running service so yeah that's the

956
00:39:44,800 --> 00:39:47,230
way I've seen it done that's the way

957
00:39:47,230 --> 00:39:50,440
I've also seen it done by Kelsey

958
00:39:50,440 --> 00:39:51,760
Hightower if you're familiar with his

959
00:39:51,760 --> 00:39:53,260
his work

960
00:39:53,260 --> 00:39:56,410
awesome awesome guy

961
00:39:56,410 --> 00:40:00,370
at Google now but yeah I think that's

962
00:40:00,370 --> 00:40:02,560
still kind of the way people are doing

963
00:40:02,560 --> 00:40:07,210
it for the most part but now you're

964
00:40:07,210 --> 00:40:08,650
making me realize that I should revisit

965
00:40:08,650 --> 00:40:11,550
this good question

966
00:40:11,550 --> 00:40:13,810
awesome thank you very much please give

967
00:40:13,810 --> 00:40:15,460
it up for Jesse

968
00:40:15,460 --> 00:40:22,150
[Applause]

