1
00:00:00,089 --> 00:00:03,540
and welcome to bolt hack and hack to

2
00:00:03,540 --> 00:00:06,299
build so Who am I

3
00:00:06,299 --> 00:00:08,940
my name is Chris Leroy I am a platform

4
00:00:08,940 --> 00:00:12,809
security engineer at Heroku so a pen

5
00:00:12,809 --> 00:00:15,809
test the platform I research a lot of

6
00:00:15,809 --> 00:00:17,699
things mostly things that distract me

7
00:00:17,699 --> 00:00:20,520
and there's a bit of echo and then of

8
00:00:20,520 --> 00:00:22,199
course work quite closely with our

9
00:00:22,199 --> 00:00:23,760
engineers and actually get to engineer

10
00:00:23,760 --> 00:00:26,430
some critical solutions so you can find

11
00:00:26,430 --> 00:00:30,300
me on the servers at Bron pony and a

12
00:00:30,300 --> 00:00:31,650
theme that you might pick up in this

13
00:00:31,650 --> 00:00:33,930
talk is that I like building stuff and I

14
00:00:33,930 --> 00:00:35,670
like hacking stuff and I've built quite

15
00:00:35,670 --> 00:00:37,559
a few things for hacking on the web

16
00:00:37,559 --> 00:00:39,450
Windows Android and more recently

17
00:00:39,450 --> 00:00:43,260
containers so what am I going to share

18
00:00:43,260 --> 00:00:45,390
with you today so a bit of a problem

19
00:00:45,390 --> 00:00:48,300
that I encountered quite recently we'll

20
00:00:48,300 --> 00:00:50,579
look over some existing research

21
00:00:50,579 --> 00:00:54,270
I'll introduce Bob with the silent E and

22
00:00:54,270 --> 00:00:55,620
I'll show you some things that you can

23
00:00:55,620 --> 00:00:57,660
do with Bob and of course a conclusion

24
00:00:57,660 --> 00:01:02,120
so what are the problems and you'll see

25
00:01:02,120 --> 00:01:05,519
those two points at the bottom are two

26
00:01:05,519 --> 00:01:07,260
questions that I asked myself quite a

27
00:01:07,260 --> 00:01:10,439
lot in a in our relatively modern cloud

28
00:01:10,439 --> 00:01:13,890
DevOps hdl-c agile environments and when

29
00:01:13,890 --> 00:01:15,720
I put my pen tester hat on I'm often

30
00:01:15,720 --> 00:01:18,990
asked myself hardwa identify and exploit

31
00:01:18,990 --> 00:01:22,470
vulnerabilities the points under that is

32
00:01:22,470 --> 00:01:24,630
the same same but different question if

33
00:01:24,630 --> 00:01:26,880
I put on my engineering hat I ask myself

34
00:01:26,880 --> 00:01:29,340
how do we test secure and monitor our

35
00:01:29,340 --> 00:01:31,110
containers so there's a lot of

36
00:01:31,110 --> 00:01:33,180
similarity between those questions but

37
00:01:33,180 --> 00:01:36,360
the actual manifestation on high action

38
00:01:36,360 --> 00:01:37,920
going about answering those questions

39
00:01:37,920 --> 00:01:41,790
can differ quite significantly so in

40
00:01:41,790 --> 00:01:44,310
terms of those fields and containers

41
00:01:44,310 --> 00:01:46,049
what exists are they if you're looking

42
00:01:46,049 --> 00:01:48,329
at ponying containers or you're looking

43
00:01:48,329 --> 00:01:50,549
for vulnerabilities

44
00:01:50,549 --> 00:01:51,720
first things first when you're on a

45
00:01:51,720 --> 00:01:54,030
container am I contained it's going to

46
00:01:54,030 --> 00:01:55,500
tell you if you're in a container which

47
00:01:55,500 --> 00:01:56,729
if you're going to try and hack it's

48
00:01:56,729 --> 00:01:59,659
good to know then there's a great set of

49
00:01:59,659 --> 00:02:02,280
tools from Google so Google container

50
00:02:02,280 --> 00:02:04,590
tools so in terms of static analysis

51
00:02:04,590 --> 00:02:05,610
there's a lot of interesting stuff

52
00:02:05,610 --> 00:02:07,830
there's of course some

53
00:02:07,830 --> 00:02:09,720
tools from class or vulnerabilities so I

54
00:02:09,720 --> 00:02:11,610
ran it on your images and tell you hey

55
00:02:11,610 --> 00:02:13,920
know there's the CV on this package so

56
00:02:13,920 --> 00:02:16,110
on so forth and then of course there's

57
00:02:16,110 --> 00:02:18,360
your family of benchmarking tools so

58
00:02:18,360 --> 00:02:19,650
from equal security there's the docker

59
00:02:19,650 --> 00:02:22,320
benchmark so you'll see there's a lot

60
00:02:22,320 --> 00:02:24,390
more tools out there I've just mentioned

61
00:02:24,390 --> 00:02:28,500
a few tools that cover the broad

62
00:02:28,500 --> 00:02:30,480
categories of content tools that you can

63
00:02:30,480 --> 00:02:34,410
find out there and how do I like to

64
00:02:34,410 --> 00:02:35,760
solve problems because they weren't a

65
00:02:35,760 --> 00:02:37,950
list of tools there that helped me solve

66
00:02:37,950 --> 00:02:40,350
my problems and my general purge he

67
00:02:40,350 --> 00:02:42,090
thinks his life is let's just pawn it

68
00:02:42,090 --> 00:02:44,790
and break it so that's what I did I

69
00:02:44,790 --> 00:02:46,350
created something called break out the

70
00:02:46,350 --> 00:02:49,560
box to help me exploit container

71
00:02:49,560 --> 00:02:52,140
vulnerabilities and verify exploits

72
00:02:52,140 --> 00:02:53,850
ability I had a bit of an issue with a

73
00:02:53,850 --> 00:02:55,140
lot of scanners saying you're vulnerable

74
00:02:55,140 --> 00:02:58,350
to this and as Tosh was saying now show

75
00:02:58,350 --> 00:02:59,100
the POCs

76
00:02:59,100 --> 00:03:02,670
you know there's a great thing about you

77
00:03:02,670 --> 00:03:06,570
know have PLC's or you know exit the

78
00:03:06,570 --> 00:03:08,490
room so I wrote something that'll help

79
00:03:08,490 --> 00:03:10,500
me do that so just a brief outline

80
00:03:10,500 --> 00:03:12,480
written lingo so it's something that all

81
00:03:12,480 --> 00:03:14,580
the cool kids are coding in these days

82
00:03:14,580 --> 00:03:16,050
but I hear they're to move to rest now

83
00:03:16,050 --> 00:03:18,120
so I might have to fork it and move it

84
00:03:18,120 --> 00:03:20,970
to rest but I'm quite lazy when it comes

85
00:03:20,970 --> 00:03:22,260
to hacking I don't have to repeat the

86
00:03:22,260 --> 00:03:25,170
same thing over and over so it's got the

87
00:03:25,170 --> 00:03:26,970
ability to auto pound common container

88
00:03:26,970 --> 00:03:28,860
vulnerabilities so the skills will be

89
00:03:28,860 --> 00:03:31,709
very happy about that it also allows you

90
00:03:31,709 --> 00:03:33,269
to do some common post exploitation

91
00:03:33,269 --> 00:03:35,820
things in containers if you're familiar

92
00:03:35,820 --> 00:03:37,620
with post exploitation or living off the

93
00:03:37,620 --> 00:03:39,900
land there's a lot of tools and

94
00:03:39,900 --> 00:03:42,090
procedures that you do over and over so

95
00:03:42,090 --> 00:03:44,250
let's automate that and then the last

96
00:03:44,250 --> 00:03:46,650
point there which is a big focus point

97
00:03:46,650 --> 00:03:48,300
for me was that well let's not just make

98
00:03:48,300 --> 00:03:50,700
this another hacker tool that is not

99
00:03:50,700 --> 00:03:52,230
very friendly towards anyone who's not

100
00:03:52,230 --> 00:03:54,239
running Kali Linux every day but let's

101
00:03:54,239 --> 00:03:55,950
make it useful for pen testers and

102
00:03:55,950 --> 00:03:58,410
engineers because they yeah if you're

103
00:03:58,410 --> 00:03:59,640
not using your own tool and if it's not

104
00:03:59,640 --> 00:04:01,590
easy for other people to use engineers

105
00:04:01,590 --> 00:04:04,140
probably aren't going to use it so first

106
00:04:04,140 --> 00:04:05,100
things first when you're hacking

107
00:04:05,100 --> 00:04:07,560
containers the holo world of hacking

108
00:04:07,560 --> 00:04:09,269
containers and swished and especially

109
00:04:09,269 --> 00:04:11,820
docker containers is docker dot suck so

110
00:04:11,820 --> 00:04:14,290
the one on one method

111
00:04:14,290 --> 00:04:16,779
it often stems from having to use docker

112
00:04:16,779 --> 00:04:18,728
within docker which is just generally a

113
00:04:18,728 --> 00:04:22,210
bad idea till they are this allows you

114
00:04:22,210 --> 00:04:23,889
to basically break out of containers and

115
00:04:23,889 --> 00:04:26,800
perform a local purpose of sorts to root

116
00:04:26,800 --> 00:04:28,630
on the underlying host that's a lot of

117
00:04:28,630 --> 00:04:31,389
fun so how do you do it step one you got

118
00:04:31,389 --> 00:04:33,850
to find the socket step two you got to

119
00:04:33,850 --> 00:04:35,440
interact with the socket so you can use

120
00:04:35,440 --> 00:04:37,840
the docket client or curl or so cats or

121
00:04:37,840 --> 00:04:39,820
whatever you want they can speak to UNIX

122
00:04:39,820 --> 00:04:42,340
domain sockets even once you create some

123
00:04:42,340 --> 00:04:44,729
new container and mount the hosts

124
00:04:44,729 --> 00:04:46,780
namespaces or whether it's the perd

125
00:04:46,780 --> 00:04:50,320
namespace or network name space Monster

126
00:04:50,320 --> 00:04:52,810
is privileged and then when you run that

127
00:04:52,810 --> 00:04:54,580
you want to see a truth then basically

128
00:04:54,580 --> 00:04:56,260
the container that you are in is

129
00:04:56,260 --> 00:04:59,500
basically brute on the host and that's

130
00:04:59,500 --> 00:05:00,789
where you can go ahead and cause havoc

131
00:05:00,789 --> 00:05:03,160
so that's pretty much the recipe that

132
00:05:03,160 --> 00:05:04,690
you do there's a ton of resources online

133
00:05:04,690 --> 00:05:08,710
how to do that and I got a bit annoyed

134
00:05:08,710 --> 00:05:11,020
that when looking for this kind of

135
00:05:11,020 --> 00:05:12,820
attack on a lot of hosts things can get

136
00:05:12,820 --> 00:05:17,260
tricky so a lot of UNIX sockets aren't

137
00:05:17,260 --> 00:05:18,849
necessarily going to be named dr. dot

138
00:05:18,849 --> 00:05:21,400
sock and it could be called new dot sock

139
00:05:21,400 --> 00:05:23,110
or something else like that so how do

140
00:05:23,110 --> 00:05:24,280
you go ahead and actually find these

141
00:05:24,280 --> 00:05:26,320
things a lot of containers or images

142
00:05:26,320 --> 00:05:28,000
like Alpen might not have defined

143
00:05:28,000 --> 00:05:31,270
command so a lot of living off thing can

144
00:05:31,270 --> 00:05:32,770
get tricky when the commands that you

145
00:05:32,770 --> 00:05:34,539
need to perform your post expectations

146
00:05:34,539 --> 00:05:35,260
don't exist

147
00:05:35,260 --> 00:05:38,320
so find SS nets that's so on and so

148
00:05:38,320 --> 00:05:42,160
forth so like I said as well sockets

149
00:05:42,160 --> 00:05:43,960
might be mounted as something else a

150
00:05:43,960 --> 00:05:45,580
month will be as obvious as VAR run

151
00:05:45,580 --> 00:05:47,680
docker dot sock might be for slash move

152
00:05:47,680 --> 00:05:50,289
four slash Bob how do you find these if

153
00:05:50,289 --> 00:05:52,020
you don't have to find command or other

154
00:05:52,020 --> 00:05:53,860
commands to help you there

155
00:05:53,860 --> 00:05:56,860
so Siskel's are your friends just

156
00:05:56,860 --> 00:05:58,690
because the commands aren't available in

157
00:05:58,690 --> 00:05:59,800
the content it doesn't mean that the

158
00:05:59,800 --> 00:06:03,039
syscalls don't exist so to the left or

159
00:06:03,039 --> 00:06:05,500
the sis calls that are implemented for

160
00:06:05,500 --> 00:06:07,570
the final command just use s trace to

161
00:06:07,570 --> 00:06:09,039
find that and on the right is actually

162
00:06:09,039 --> 00:06:10,300
just some go code

163
00:06:10,300 --> 00:06:11,500
that actually wrote to actually

164
00:06:11,500 --> 00:06:14,530
implement the find command to do that so

165
00:06:14,530 --> 00:06:16,389
figured okay cool there's no fun come on

166
00:06:16,389 --> 00:06:18,580
then I can just slap together some go

167
00:06:18,580 --> 00:06:20,590
code and get a binary and then I have

168
00:06:20,590 --> 00:06:21,659
the phone come on

169
00:06:21,659 --> 00:06:25,090
so how does this actually look so what

170
00:06:25,090 --> 00:06:27,610
we're gonna do with bug is we're gonna

171
00:06:27,610 --> 00:06:30,039
go ahead and break out of a container so

172
00:06:30,039 --> 00:06:34,810
at the top we basically have the

173
00:06:34,810 --> 00:06:38,849
underlying host and then at the top

174
00:06:38,849 --> 00:06:42,310
terminal we're gonna now run into a

175
00:06:42,310 --> 00:06:46,050
docker container so standard Ubuntu

176
00:06:46,050 --> 00:06:49,569
docker run and we've mounted our socket

177
00:06:49,569 --> 00:06:52,389
so we've answered it as 4/10 this is not

178
00:06:52,389 --> 00:06:54,969
a socket and then what we're gonna do is

179
00:06:54,969 --> 00:06:57,639
we're gonna tell Bob ok first go ahead

180
00:06:57,639 --> 00:07:00,250
and tell me what you can do there's a

181
00:07:00,250 --> 00:07:01,719
lot more functionality now this videos a

182
00:07:01,719 --> 00:07:03,550
little bit old but we're gonna tell Bob

183
00:07:03,550 --> 00:07:05,440
look for all the sockets all the UNIX

184
00:07:05,440 --> 00:07:06,940
domain sockets and Bob's gone ahead and

185
00:07:06,940 --> 00:07:08,560
said oh cool we found this UNIX domain

186
00:07:08,560 --> 00:07:12,190
sockets what now so we're gonna go ahead

187
00:07:12,190 --> 00:07:14,169
and tell Bob you know just Auto poem

188
00:07:14,169 --> 00:07:16,870
like just bring all the shells that's

189
00:07:16,870 --> 00:07:19,539
what I want to do so Bob's gonna go

190
00:07:19,539 --> 00:07:21,789
ahead it's in the scan it's gonna

191
00:07:21,789 --> 00:07:23,409
identify these sockets it's gonna see if

192
00:07:23,409 --> 00:07:25,419
it can actually opponent and there we go

193
00:07:25,419 --> 00:07:27,759
we're now actually in a container in a

194
00:07:27,759 --> 00:07:28,240
TTY

195
00:07:28,240 --> 00:07:30,340
on the underlying host and if you'll see

196
00:07:30,340 --> 00:07:32,370
that from that Alice that's actually a

197
00:07:32,370 --> 00:07:36,370
OSX host over there so now I'm route on

198
00:07:36,370 --> 00:07:39,340
the underlying host which is the results

199
00:07:39,340 --> 00:07:40,870
of mounting my Bacchus socket within my

200
00:07:40,870 --> 00:07:43,000
container and I'm not going to create a

201
00:07:43,000 --> 00:07:44,500
file and that will appear at the bottom

202
00:07:44,500 --> 00:07:46,389
terminal because the bottom terminal is

203
00:07:46,389 --> 00:07:49,710
a terminal arm might look good to host

204
00:07:49,710 --> 00:07:52,599
so I said earlier our sakes it's a

205
00:07:52,599 --> 00:07:54,639
novelty host and then if you exit Bob

206
00:07:54,639 --> 00:07:56,680
the exit to a TTY you then actually go

207
00:07:56,680 --> 00:07:59,800
back to your container so that's quite

208
00:07:59,800 --> 00:08:01,960
fun and you see there's the socket so

209
00:08:01,960 --> 00:08:05,050
when it comes to hacking domain sockets

210
00:08:05,050 --> 00:08:07,659
or identifying sockets it can get quite

211
00:08:07,659 --> 00:08:11,289
useful but that's very much got your pen

212
00:08:11,289 --> 00:08:12,669
tester approach on you know I want to

213
00:08:12,669 --> 00:08:14,020
get a show and of course that can be

214
00:08:14,020 --> 00:08:15,460
useful if you find yourself on a host

215
00:08:15,460 --> 00:08:18,370
and you want to get a TTY and get a shot

216
00:08:18,370 --> 00:08:20,650
but for an engineering environment this

217
00:08:20,650 --> 00:08:22,330
might not necessarily be very useful

218
00:08:22,330 --> 00:08:25,419
swishing see ICD environments and I'll

219
00:08:25,419 --> 00:08:29,139
get into that in a bit but we can also

220
00:08:29,139 --> 00:08:32,559
use return codes so don't drop to a tty

221
00:08:32,559 --> 00:08:35,049
but send a return code greater than zero

222
00:08:35,049 --> 00:08:36,490
because what do we know about CI

223
00:08:36,490 --> 00:08:38,409
environments return quotes greater than

224
00:08:38,409 --> 00:08:41,409
zero indicate a failure so I'll show you

225
00:08:41,409 --> 00:08:43,960
that a little bit and often people ask

226
00:08:43,960 --> 00:08:47,350
me are so we know why put this binary on

227
00:08:47,350 --> 00:08:48,100
your container

228
00:08:48,100 --> 00:08:50,320
well what's quite nice is it when it's

229
00:08:50,320 --> 00:08:51,730
compiled it's a single binary you don't

230
00:08:51,730 --> 00:08:53,560
need to download any other binaries it's

231
00:08:53,560 --> 00:08:56,710
just one binary two to pone them all so

232
00:08:56,710 --> 00:09:00,580
let's do this with CI so at Heroku we

233
00:09:00,580 --> 00:09:03,460
have a lot of containers and a lot of

234
00:09:03,460 --> 00:09:06,220
stuff going on so basically over here we

235
00:09:06,220 --> 00:09:08,350
have a CI environments and I want to

236
00:09:08,350 --> 00:09:11,560
test in our CI environment are they

237
00:09:11,560 --> 00:09:15,160
actually any exploitable domain sockets

238
00:09:15,160 --> 00:09:17,140
on our platform now I'm not gonna

239
00:09:17,140 --> 00:09:19,410
trigger a build every single time

240
00:09:19,410 --> 00:09:21,730
basically what I've done here is in our

241
00:09:21,730 --> 00:09:24,279
staging environment is I have tests that

242
00:09:24,279 --> 00:09:25,510
automatically run that go ahead and

243
00:09:25,510 --> 00:09:28,000
trigger bolt and it runs Bob but you'll

244
00:09:28,000 --> 00:09:30,550
see that I've added the autopen flag but

245
00:09:30,550 --> 00:09:33,400
also I've added the - CRC D flag what

246
00:09:33,400 --> 00:09:35,830
that means is that Bob now in this case

247
00:09:35,830 --> 00:09:37,839
it's busy running a bold it's not gonna

248
00:09:37,839 --> 00:09:40,870
drop to a TTY if Bob successfully

249
00:09:40,870 --> 00:09:43,270
manages to exploit a domain socket in

250
00:09:43,270 --> 00:09:44,589
the environment that it's found itself

251
00:09:44,589 --> 00:09:46,360
in it will just see the return code

252
00:09:46,360 --> 00:09:49,180
greater than one and in this case it

253
00:09:49,180 --> 00:09:50,980
found some sockets but they weren't

254
00:09:50,980 --> 00:09:53,410
exploitable so this build will succeed

255
00:09:53,410 --> 00:09:55,480
and this is one of the things that we're

256
00:09:55,480 --> 00:09:58,510
doing to test our CI environments that

257
00:09:58,510 --> 00:10:00,760
we offer for people to use as a cos

258
00:10:00,760 --> 00:10:03,130
environment and it's very easy for you

259
00:10:03,130 --> 00:10:04,600
know small vulnerabilities to slip into

260
00:10:04,600 --> 00:10:06,940
systems so this is one way that we're

261
00:10:06,940 --> 00:10:09,130
using it I'm literally using our system

262
00:10:09,130 --> 00:10:11,200
to hack our system - very fast stuff and

263
00:10:11,200 --> 00:10:13,240
it wouldn't make sense in this case to

264
00:10:13,240 --> 00:10:15,130
drop down to a TTY from running bones

265
00:10:15,130 --> 00:10:16,750
like I don't need a TTY

266
00:10:16,750 --> 00:10:18,910
ready - oh I just need something to tell

267
00:10:18,910 --> 00:10:22,620
me this is vulnerable and exploitable so

268
00:10:22,620 --> 00:10:25,779
that was with my engineering hat on how

269
00:10:25,779 --> 00:10:28,630
can we use that so Bob does it with all

270
00:10:28,630 --> 00:10:30,850
the functionality it has well you know

271
00:10:30,850 --> 00:10:33,240
give me all the give me all the shells

272
00:10:33,240 --> 00:10:36,220
or do it in the CICU environment we

273
00:10:36,220 --> 00:10:37,810
return cards are pretty useful but

274
00:10:37,810 --> 00:10:40,060
there's more to hacking containers than

275
00:10:40,060 --> 00:10:42,940
dr. sockets there's also this wonderful

276
00:10:42,940 --> 00:10:45,250
thing called privileged containers now

277
00:10:45,250 --> 00:10:46,600
Isle conversation with one of our

278
00:10:46,600 --> 00:10:49,000
engineers and I said you know we really

279
00:10:49,000 --> 00:10:50,529
should not be using privileged

280
00:10:50,529 --> 00:10:53,259
containers in conversation and Tolan

281
00:10:53,259 --> 00:10:56,230
said why I said because it's bad and I

282
00:10:56,230 --> 00:10:58,449
realized while the tribal knowledge that

283
00:10:58,449 --> 00:10:59,709
I knew about privileged containers

284
00:10:59,709 --> 00:11:01,540
wasn't necessarily the same knowledge

285
00:11:01,540 --> 00:11:03,339
that the engineer that I was speaking to

286
00:11:03,339 --> 00:11:06,699
so I said John let me show you so just

287
00:11:06,699 --> 00:11:08,410
things about privileged containers all

288
00:11:08,410 --> 00:11:10,000
the schools and capabilities got the

289
00:11:10,000 --> 00:11:13,389
window basically yeah it gets quite

290
00:11:13,389 --> 00:11:15,430
dangerous and it's one of the easiest

291
00:11:15,430 --> 00:11:17,680
way to escape out of containers but it's

292
00:11:17,680 --> 00:11:19,660
also not the easiest to test for your

293
00:11:19,660 --> 00:11:21,579
inner container how do you know if it's

294
00:11:21,579 --> 00:11:23,589
privileged so of course I went and I

295
00:11:23,589 --> 00:11:25,389
extended Bob and I said you know if this

296
00:11:25,389 --> 00:11:29,470
is built something that if the container

297
00:11:29,470 --> 00:11:33,160
is privileged try and actually actually

298
00:11:33,160 --> 00:11:35,860
break out of the container so you'll see

299
00:11:35,860 --> 00:11:37,600
in the top terminal there I'm running a

300
00:11:37,600 --> 00:11:39,459
docker container with - - privileged

301
00:11:39,459 --> 00:11:46,300
standard so I always run Bob first to

302
00:11:46,300 --> 00:11:48,970
see that it's running and then basically

303
00:11:48,970 --> 00:11:50,800
I'd say pwned cgroups

304
00:11:50,800 --> 00:11:54,189
so privileged containers go weird with

305
00:11:54,189 --> 00:11:57,310
cgroups and basically from that command

306
00:11:57,310 --> 00:12:00,759
there i've now executed a command on the

307
00:12:00,759 --> 00:12:02,649
underlying host because the privileged

308
00:12:02,649 --> 00:12:05,259
container allows me to do that so it's

309
00:12:05,259 --> 00:12:06,670
all the result there was like a desktop

310
00:12:06,670 --> 00:12:08,290
if I look at the host name in the bottom

311
00:12:08,290 --> 00:12:10,689
terminal that would actually be docker

312
00:12:10,689 --> 00:12:13,300
desktop but let's actually go ahead and

313
00:12:13,300 --> 00:12:15,399
get a shot so because the container in

314
00:12:15,399 --> 00:12:18,639
the top is privileged I can do some

315
00:12:18,639 --> 00:12:20,949
magic with an agent release commands and

316
00:12:20,949 --> 00:12:22,750
see groups read up on it if they

317
00:12:22,750 --> 00:12:24,939
interests you travelbirds did a really

318
00:12:24,939 --> 00:12:26,920
good write-up on this so now I'm gonna

319
00:12:26,920 --> 00:12:30,100
tell Bob break out of this container but

320
00:12:30,100 --> 00:12:31,750
execute this command on the underlying

321
00:12:31,750 --> 00:12:34,750
host and of course good old net cat has

322
00:12:34,750 --> 00:12:37,060
to show up with a terminal with green

323
00:12:37,060 --> 00:12:38,130
text

324
00:12:38,130 --> 00:12:41,290
always start your your reverse handler

325
00:12:41,290 --> 00:12:43,389
it's always a important step and you can

326
00:12:43,389 --> 00:12:44,800
see the bottom I just got a connection

327
00:12:44,800 --> 00:12:47,439
and now I've broken out of the container

328
00:12:47,439 --> 00:12:50,170
and gone root on the underlying host

329
00:12:50,170 --> 00:12:52,110
because it's a privileged container so

330
00:12:52,110 --> 00:12:54,730
you can see a whole bunch of interesting

331
00:12:54,730 --> 00:12:59,319
stuff in terms of these exploits so of

332
00:12:59,319 --> 00:13:02,260
course with Bob you can do the same with

333
00:13:02,260 --> 00:13:03,760
CRC D so you can run this in your C

334
00:13:03,760 --> 00:13:05,589
about whatever environment that you want

335
00:13:05,589 --> 00:13:09,069
to test where return codes can be used

336
00:13:09,069 --> 00:13:11,470
to determine exploit ability also

337
00:13:11,470 --> 00:13:13,779
environment variables this can get a

338
00:13:13,779 --> 00:13:15,550
little bit tricky in containers but it's

339
00:13:15,550 --> 00:13:17,500
pretty much good old Linux post

340
00:13:17,500 --> 00:13:19,720
exploitation nothing new here but when

341
00:13:19,720 --> 00:13:22,000
it comes to containers proc FS is your

342
00:13:22,000 --> 00:13:23,800
friend and the reason why I said is that

343
00:13:23,800 --> 00:13:25,600
a lot of orchestrated environments just

344
00:13:25,600 --> 00:13:27,880
because the env for your process has

345
00:13:27,880 --> 00:13:29,860
been killed doesn't necessarily mean

346
00:13:29,860 --> 00:13:31,480
that the environment variables have been

347
00:13:31,480 --> 00:13:34,630
cleared in prog FS so I found myself

348
00:13:34,630 --> 00:13:38,199
having to check env and then do some

349
00:13:38,199 --> 00:13:40,720
grep and all consider magic for Park FS

350
00:13:40,720 --> 00:13:43,449
which has resulted in me losing a lot

351
00:13:43,449 --> 00:13:45,100
more hair than I'd like to admit

352
00:13:45,100 --> 00:13:47,720
so of course

353
00:13:47,720 --> 00:13:49,640
what do we do about that well we

354
00:13:49,640 --> 00:13:51,250
automate this and we built this and

355
00:13:51,250 --> 00:13:54,230
basically you can tell Bob go ahead I'm

356
00:13:54,230 --> 00:13:57,290
access env for your process that Bob is

357
00:13:57,290 --> 00:14:00,410
running in and go ahead and analyze proc

358
00:14:00,410 --> 00:14:03,260
FS because there's a lot of time to

359
00:14:03,260 --> 00:14:06,590
check the time of use edge cases you've

360
00:14:06,590 --> 00:14:07,850
got to be really quick to analyze

361
00:14:07,850 --> 00:14:09,590
progress because the process might die

362
00:14:09,590 --> 00:14:11,930
but of course this can get a little bit

363
00:14:11,930 --> 00:14:13,820
irritating because there's ephemerality

364
00:14:13,820 --> 00:14:16,910
with analyzing progress that entry might

365
00:14:16,910 --> 00:14:18,800
not exist anymore so that's where the

366
00:14:18,800 --> 00:14:20,630
speed comes in so Bob does it really

367
00:14:20,630 --> 00:14:21,680
quick while going through the whole

368
00:14:21,680 --> 00:14:24,560
pocket face tree and of course it's just

369
00:14:24,560 --> 00:14:27,200
general Linux procure face which is yeah

370
00:14:27,200 --> 00:14:29,150
it's just the can of worms for me most

371
00:14:29,150 --> 00:14:32,690
of the times so how do you actually want

372
00:14:32,690 --> 00:14:33,770
to do that if you want to

373
00:14:33,770 --> 00:14:36,920
programmatically and go I did have a sad

374
00:14:36,920 --> 00:14:38,720
screenshot of a bash script that did it

375
00:14:38,720 --> 00:14:40,970
this looked much more cooler with all

376
00:14:40,970 --> 00:14:42,920
the different indentation so I figured I

377
00:14:42,920 --> 00:14:44,270
wouldn't make your eyes bleed with that

378
00:14:44,270 --> 00:14:46,130
so it's relatively easy to do

379
00:14:46,130 --> 00:14:49,250
programmatically what does this look

380
00:14:49,250 --> 00:14:52,400
like in an environment so what we'll see

381
00:14:52,400 --> 00:14:53,780
over here is we're gonna run a docker

382
00:14:53,780 --> 00:14:55,370
container we're gonna inject an

383
00:14:55,370 --> 00:14:56,810
environment variable called touch of

384
00:14:56,810 --> 00:14:58,910
approval with a value of super secret

385
00:14:58,910 --> 00:15:02,180
password we then get a towel Bob so Bob

386
00:15:02,180 --> 00:15:04,160
by default if you don't specify a word

387
00:15:04,160 --> 00:15:07,520
list it'll look for the keywords secret

388
00:15:07,520 --> 00:15:10,670
and password automatically socia Bob has

389
00:15:10,670 --> 00:15:12,800
gone ahead and scanned and found

390
00:15:12,800 --> 00:15:15,680
multiple proc FS entries with the values

391
00:15:15,680 --> 00:15:17,960
super-secret password and Bob will then

392
00:15:17,960 --> 00:15:19,520
actually go ahead and show you what is

393
00:15:19,520 --> 00:15:21,860
the full progress path for that which

394
00:15:21,860 --> 00:15:23,450
can be useful and of course at the

395
00:15:23,450 --> 00:15:25,280
bottom that showed you the actual tupple

396
00:15:25,280 --> 00:15:29,620
for that envy entry and of course the

397
00:15:29,620 --> 00:15:32,390
word list can be added so in this case

398
00:15:32,390 --> 00:15:34,610
I'm going to add more entries so don't

399
00:15:34,610 --> 00:15:37,070
just look for secret and password go

400
00:15:37,070 --> 00:15:40,550
look for other stuff so in this case in

401
00:15:40,550 --> 00:15:42,140
this word list I look for yellows he

402
00:15:42,140 --> 00:15:44,900
could find me and it hasn't found any of

403
00:15:44,900 --> 00:15:47,210
those other entries but um it's quite a

404
00:15:47,210 --> 00:15:49,010
nice way to go ahead and very far that

405
00:15:49,010 --> 00:15:51,470
there are no maybe secrets or entries

406
00:15:51,470 --> 00:15:53,740
that aren't making their way inside

407
00:15:53,740 --> 00:15:55,980
containers environment

408
00:15:55,980 --> 00:16:00,040
so I'm gonna skip that but that bits a

409
00:16:00,040 --> 00:16:03,430
bit boring so in terms of a CI

410
00:16:03,430 --> 00:16:06,820
environment so I ran this quite regular

411
00:16:06,820 --> 00:16:08,890
built that just constantly run and I

412
00:16:08,890 --> 00:16:11,320
know that if a particular bull fails it

413
00:16:11,320 --> 00:16:13,180
means that either an environment

414
00:16:13,180 --> 00:16:14,710
variable with a particular value was

415
00:16:14,710 --> 00:16:19,870
found inside the CI environment and this

416
00:16:19,870 --> 00:16:21,850
is quite easy to do because it's because

417
00:16:21,850 --> 00:16:23,770
it's a single binary you just drop it on

418
00:16:23,770 --> 00:16:25,960
the host you add add a word list added

419
00:16:25,960 --> 00:16:28,150
to a git repo and then whatever

420
00:16:28,150 --> 00:16:29,800
environment you're running in it'll just

421
00:16:29,800 --> 00:16:31,960
go ahead and run that so I'll go ahead

422
00:16:31,960 --> 00:16:33,130
and I'll trigger bulld

423
00:16:33,130 --> 00:16:35,350
and because the values that are

424
00:16:35,350 --> 00:16:37,540
specified secret password yellow do not

425
00:16:37,540 --> 00:16:41,560
look RSA the bull will pass which then

426
00:16:41,560 --> 00:16:43,810
tells me that it's not really building

427
00:16:43,810 --> 00:16:45,580
anything but it's telling me that in our

428
00:16:45,580 --> 00:16:47,650
container environments there's no

429
00:16:47,650 --> 00:16:49,870
environment variables or park FS entries

430
00:16:49,870 --> 00:16:52,330
that contain those keywords which makes

431
00:16:52,330 --> 00:16:56,440
me sleep a little bit better at night so

432
00:16:56,440 --> 00:16:58,360
I'm talking about containers I'm talking

433
00:16:58,360 --> 00:17:01,120
about clouds not the ones that we see in

434
00:17:01,120 --> 00:17:05,079
London 99% of the time but this is one

435
00:17:05,079 --> 00:17:06,400
of the things called metadata services

436
00:17:06,400 --> 00:17:09,069
and good old one six nine too far for

437
00:17:09,069 --> 00:17:10,900
one six nine two five four they are

438
00:17:10,900 --> 00:17:13,089
everywhere they can be abused quite

439
00:17:13,089 --> 00:17:15,430
lastly it is platform specific so

440
00:17:15,430 --> 00:17:17,230
whether you're on a zero or GCP or AWS

441
00:17:17,230 --> 00:17:19,530
you can do a lot of different stuff that

442
00:17:19,530 --> 00:17:22,000
co-commander at the bottom on AWS will

443
00:17:22,000 --> 00:17:25,030
give you the iron roles to Pacific

444
00:17:25,030 --> 00:17:27,280
I am user if you have access to the

445
00:17:27,280 --> 00:17:29,170
metadata service there's a whole bunch

446
00:17:29,170 --> 00:17:31,150
of stuff so when you're in an

447
00:17:31,150 --> 00:17:33,100
environment and you want to find this

448
00:17:33,100 --> 00:17:36,700
but maybe you know curl is not installed

449
00:17:36,700 --> 00:17:38,140
on the box so no W gate and you're on a

450
00:17:38,140 --> 00:17:39,700
read-only file system maybe and you

451
00:17:39,700 --> 00:17:43,390
can't have two stall or apk add you can

452
00:17:43,390 --> 00:17:45,550
use Bob to do that but of course

453
00:17:45,550 --> 00:17:48,910
metadata services aren't the only HTTP

454
00:17:48,910 --> 00:17:50,020
endpoints that you might want to test

455
00:17:50,020 --> 00:17:51,280
for you might want to look for control

456
00:17:51,280 --> 00:17:54,220
planes so you know find a particular

457
00:17:54,220 --> 00:17:56,320
hostname or check ok I'm in this

458
00:17:56,320 --> 00:18:00,700
container is they egress to google.com

459
00:18:00,700 --> 00:18:03,220
a great example is on ec2 classic if

460
00:18:03,220 --> 00:18:04,420
you're running in instance on ec2

461
00:18:04,420 --> 00:18:06,850
classic that's one big flat network and

462
00:18:06,850 --> 00:18:09,790
on that 10 range if you run anything on

463
00:18:09,790 --> 00:18:11,410
that interface everyone has access to

464
00:18:11,410 --> 00:18:13,720
that so sometimes it's a great way to

465
00:18:13,720 --> 00:18:16,720
test well is this 10 range accessible

466
00:18:16,720 --> 00:18:20,410
from my container so yeah often you want

467
00:18:20,410 --> 00:18:23,410
to test can i establish an HTTP request

468
00:18:23,410 --> 00:18:27,400
to a particular host so what does that

469
00:18:27,400 --> 00:18:32,320
look like so we're gonna run above again

470
00:18:32,320 --> 00:18:34,960
inside the container but by default once

471
00:18:34,960 --> 00:18:37,330
again if you don't specify a word list

472
00:18:37,330 --> 00:18:39,130
or by default we'll look for the 1 6 9

473
00:18:39,130 --> 00:18:45,040
2004 endpoints so it's looking for a

474
00:18:45,040 --> 00:18:47,830
whole bunch of stuff I have also added

475
00:18:47,830 --> 00:18:50,680
some new functionality to this so see

476
00:18:50,680 --> 00:18:53,500
Bob also looks for kubernetes I'm gonna

477
00:18:53,500 --> 00:18:56,290
add now Heroku comm so tell me if this

478
00:18:56,290 --> 00:18:58,480
environment that I'm in can actually

479
00:18:58,480 --> 00:19:02,140
establish an HTTP request there's also a

480
00:19:02,140 --> 00:19:07,000
really neat trick on GCP legacy metadata

481
00:19:07,000 --> 00:19:09,040
services so if those of you familiar

482
00:19:09,040 --> 00:19:10,390
with metadata services it's quite a

483
00:19:10,390 --> 00:19:13,180
logic query and you can't recursively

484
00:19:13,180 --> 00:19:15,070
pull down all the data if you just

485
00:19:15,070 --> 00:19:18,280
establish a socket connection and a

486
00:19:18,280 --> 00:19:20,920
1-point HTTP 1.0 connection and exclude

487
00:19:20,920 --> 00:19:22,780
the host header the legacy service will

488
00:19:22,780 --> 00:19:24,340
actually just spit out or everything

489
00:19:24,340 --> 00:19:26,290
that's under that metadata service so

490
00:19:26,290 --> 00:19:28,540
I've built that into Bob as well so if

491
00:19:28,540 --> 00:19:30,940
you run Bob now on the metadata point if

492
00:19:30,940 --> 00:19:32,560
it can scrape all that data it will go

493
00:19:32,560 --> 00:19:34,390
ahead and just give it to you so if you

494
00:19:34,390 --> 00:19:36,280
haven't just been up netcat and get a

495
00:19:36,280 --> 00:19:38,650
whole bunch of information so yeah Bob

496
00:19:38,650 --> 00:19:39,760
does that it gives you the information

497
00:19:39,760 --> 00:19:42,820
also in clcd mode so because in this

498
00:19:42,820 --> 00:19:45,280
demo at fun it could establish a

499
00:19:45,280 --> 00:19:47,140
connection to Heroku comm the return

500
00:19:47,140 --> 00:19:50,110
code is then one just to let us know

501
00:19:50,110 --> 00:19:53,050
that that could happen so that's much of

502
00:19:53,050 --> 00:19:56,170
the recon stuff which is very fun but

503
00:19:56,170 --> 00:19:58,660
there's always a but there's a lot of

504
00:19:58,660 --> 00:20:00,310
things that you can do in container

505
00:20:00,310 --> 00:20:02,560
environments and boundary hijacking or

506
00:20:02,560 --> 00:20:04,780
component hijacking is one of them for

507
00:20:04,780 --> 00:20:06,670
example when you run docker exec on a

508
00:20:06,670 --> 00:20:08,440
particular container there's no

509
00:20:08,440 --> 00:20:10,170
integrity checking that the

510
00:20:10,170 --> 00:20:11,820
binary that you're gonna run in the

511
00:20:11,820 --> 00:20:13,710
container actually is the binary in

512
00:20:13,710 --> 00:20:15,480
their containers so if you want darker

513
00:20:15,480 --> 00:20:19,230
exact container adls or bash hide you

514
00:20:19,230 --> 00:20:21,480
know you're actually running the actual

515
00:20:21,480 --> 00:20:24,870
ID atlas or bash command great example

516
00:20:24,870 --> 00:20:28,140
of that is with cube control copy that

517
00:20:28,140 --> 00:20:33,780
it executes the tower binary in the pod

518
00:20:33,780 --> 00:20:35,760
slash container that you want to copy

519
00:20:35,760 --> 00:20:38,490
from just walk to the great write-up on

520
00:20:38,490 --> 00:20:40,440
this and it was a CV that came out of it

521
00:20:40,440 --> 00:20:42,240
because there's no integrity to taking

522
00:20:42,240 --> 00:20:44,190
on the top binary you could hijack the

523
00:20:44,190 --> 00:20:46,470
binary and alter the outputs through

524
00:20:46,470 --> 00:20:48,390
some links and basically introduce on

525
00:20:48,390 --> 00:20:52,140
critical pwnage so something important

526
00:20:52,140 --> 00:20:53,640
to note switch with containers is that

527
00:20:53,640 --> 00:20:55,049
at some point in your containers

528
00:20:55,049 --> 00:20:57,480
execution a binary might be executed

529
00:20:57,480 --> 00:20:59,340
either through cube control copy or

530
00:20:59,340 --> 00:21:01,860
through a docket exec or previously

531
00:21:01,860 --> 00:21:03,780
through a darker copy you don't know so

532
00:21:03,780 --> 00:21:05,190
from an attackers perspective this

533
00:21:05,190 --> 00:21:08,460
actually is a very interesting attack

534
00:21:08,460 --> 00:21:11,190
surface so what's my natural reaction

535
00:21:11,190 --> 00:21:13,770
let's just hijacked all the binaries and

536
00:21:13,770 --> 00:21:17,490
let's just see what happens so just be

537
00:21:17,490 --> 00:21:20,070
careful this definitely has the

538
00:21:20,070 --> 00:21:22,830
potential to break stuff so don't do it

539
00:21:22,830 --> 00:21:24,840
in production environments or

540
00:21:24,840 --> 00:21:26,100
environments that you and have mandate

541
00:21:26,100 --> 00:21:28,950
to because things get a bit weird when

542
00:21:28,950 --> 00:21:32,280
certain orchestrators assume that

543
00:21:32,280 --> 00:21:33,929
they're going to receive certain output

544
00:21:33,929 --> 00:21:37,669
or response codes from commands executed

545
00:21:37,669 --> 00:21:40,500
so how would you do this manually so

546
00:21:40,500 --> 00:21:42,000
step one you got to have read/write

547
00:21:42,000 --> 00:21:43,740
permissions to burn or espen or user

548
00:21:43,740 --> 00:21:44,940
burn so you got to check that if you

549
00:21:44,940 --> 00:21:46,980
don't have that you're going to struggle

550
00:21:46,980 --> 00:21:49,230
to achieve your goal you want to create

551
00:21:49,230 --> 00:21:51,059
some malicious executable so I say

552
00:21:51,059 --> 00:21:53,429
executable but it could be a script it

553
00:21:53,429 --> 00:21:55,320
could be whatever that does something I

554
00:21:55,320 --> 00:21:57,059
actually use web hooks quite a lot

555
00:21:57,059 --> 00:22:00,059
because expose ability I might not get

556
00:22:00,059 --> 00:22:02,520
execution now maybe when the containers

557
00:22:02,520 --> 00:22:04,049
backed up tomorrow do I get a wearable

558
00:22:04,049 --> 00:22:05,610
course or where books are my favorite

559
00:22:05,610 --> 00:22:06,870
for this well of course you could just

560
00:22:06,870 --> 00:22:09,840
fuzz you know if Q control excuse to

561
00:22:09,840 --> 00:22:11,880
talk come on and it's not expecting one

562
00:22:11,880 --> 00:22:13,790
megabytes of aaaa

563
00:22:13,790 --> 00:22:17,160
things get interesting then what you

564
00:22:17,160 --> 00:22:18,690
want to do is then replace everything in

565
00:22:18,690 --> 00:22:21,090
burn or s burn or user burn with your

566
00:22:21,090 --> 00:22:23,940
malicious binary so replace tar with

567
00:22:23,940 --> 00:22:26,010
your version of tar and do that all

568
00:22:26,010 --> 00:22:27,780
through the file system give it

569
00:22:27,780 --> 00:22:30,810
executable and read permissions and then

570
00:22:30,810 --> 00:22:33,050
you wait and see

571
00:22:33,050 --> 00:22:36,030
so in terms of the damage I want to show

572
00:22:36,030 --> 00:22:39,030
you here a common payload that Bob uses

573
00:22:39,030 --> 00:22:41,850
by default is that it will hijack the

574
00:22:41,850 --> 00:22:44,790
command establish what command was

575
00:22:44,790 --> 00:22:46,830
executed and what were the parameters

576
00:22:46,830 --> 00:22:49,080
sent to that which gets pretty useful

577
00:22:49,080 --> 00:22:53,160
and that's from a bash script that I

578
00:22:53,160 --> 00:22:55,080
used originally you see some of the

579
00:22:55,080 --> 00:22:58,440
fuzzing outputs if you wanted to do this

580
00:22:58,440 --> 00:22:59,940
in bash this is what it might look like

581
00:22:59,940 --> 00:23:01,860
you don't want to hijack all the

582
00:23:01,860 --> 00:23:04,710
binaries because the while you're doing

583
00:23:04,710 --> 00:23:07,140
the hijacking these commands that you

584
00:23:07,140 --> 00:23:08,790
need to do and if you hijack those

585
00:23:08,790 --> 00:23:10,800
commands you might land up in a bit of a

586
00:23:10,800 --> 00:23:13,860
recursive a bit of a recursive loop with

587
00:23:13,860 --> 00:23:16,620
no end function so that's hot might look

588
00:23:16,620 --> 00:23:19,110
like if you decide to do it in bash some

589
00:23:19,110 --> 00:23:23,340
important commands there so before we

590
00:23:23,340 --> 00:23:25,560
execute this kind of attack what is

591
00:23:25,560 --> 00:23:27,570
interesting well you might receive

592
00:23:27,570 --> 00:23:29,430
callbacks in one minute time or 10

593
00:23:29,430 --> 00:23:32,790
minute or one hour or next week might

594
00:23:32,790 --> 00:23:34,920
get tokens and ko commands let me give

595
00:23:34,920 --> 00:23:36,810
you an example it might be the case that

596
00:23:36,810 --> 00:23:38,940
maybe containers are running in some

597
00:23:38,940 --> 00:23:41,280
environment and that environment that is

598
00:23:41,280 --> 00:23:42,630
offering that container wants to make a

599
00:23:42,630 --> 00:23:44,790
backup of that contain all the contents

600
00:23:44,790 --> 00:23:47,460
of it and put it in an s3 bucket now if

601
00:23:47,460 --> 00:23:49,530
you wanted to do that in a container you

602
00:23:49,530 --> 00:23:51,300
would have to execute a command in that

603
00:23:51,300 --> 00:23:53,010
container to package the contents and

604
00:23:53,010 --> 00:23:55,410
ship it off now if you go ahead and

605
00:23:55,410 --> 00:23:58,830
hijack the command and an Orchestrator

606
00:23:58,830 --> 00:24:02,250
says hey run this command to put that

607
00:24:02,250 --> 00:24:05,130
tar or that file on in history bucket

608
00:24:05,130 --> 00:24:07,050
but of course we know public s3 buckets

609
00:24:07,050 --> 00:24:09,720
are bad so we need credentials so of

610
00:24:09,720 --> 00:24:12,240
course we need to provide the tokens to

611
00:24:12,240 --> 00:24:14,100
the call command but we've hired Jack

612
00:24:14,100 --> 00:24:15,540
the call come on so what do we get in

613
00:24:15,540 --> 00:24:17,610
our web book we get the tokens that the

614
00:24:17,610 --> 00:24:19,500
orchestrators are running in our

615
00:24:19,500 --> 00:24:21,180
container to backup our containers

616
00:24:21,180 --> 00:24:23,160
because we want backups so that's the

617
00:24:23,160 --> 00:24:25,930
kind of stuff that you could see

618
00:24:25,930 --> 00:24:28,280
break stuff is definitely one of them so

619
00:24:28,280 --> 00:24:30,020
certain logic so if you're running

620
00:24:30,020 --> 00:24:31,550
certain commands in containers and

621
00:24:31,550 --> 00:24:33,740
you're expecting okay I'm either going

622
00:24:33,740 --> 00:24:37,040
to get a 200 or 400 in an HTTP nor what

623
00:24:37,040 --> 00:24:41,330
happens if a aaaa is returned how does

624
00:24:41,330 --> 00:24:45,080
the system respond so a few things are

625
00:24:45,080 --> 00:24:47,240
broken because of this and it's an

626
00:24:47,240 --> 00:24:50,570
interesting way to test so let's show

627
00:24:50,570 --> 00:24:57,440
you what that looks like so on the Left

628
00:24:57,440 --> 00:25:01,820
will be iron and middle split I'm gonna

629
00:25:01,820 --> 00:25:04,640
run a Bob command and basically I'm

630
00:25:04,640 --> 00:25:06,890
telling Bob hijack all the binaries in

631
00:25:06,890 --> 00:25:10,070
the container and execute the command

632
00:25:10,070 --> 00:25:12,320
which goes to a web hook so on the Left

633
00:25:12,320 --> 00:25:14,660
there you'll see that's just my logs

634
00:25:14,660 --> 00:25:16,460
coming from my endpoint and it means

635
00:25:16,460 --> 00:25:18,950
that my command is executed so I'm

636
00:25:18,950 --> 00:25:20,510
running the ID command in my container

637
00:25:20,510 --> 00:25:23,360
and I'm getting a canary request saying

638
00:25:23,360 --> 00:25:25,820
someone's run hello y'all inside this

639
00:25:25,820 --> 00:25:29,120
container now on the other split

640
00:25:29,120 --> 00:25:31,790
terminal I'm now gonna run a docket exec

641
00:25:31,790 --> 00:25:33,830
command because maybe I want to

642
00:25:33,830 --> 00:25:35,150
administer something in this container

643
00:25:35,150 --> 00:25:37,340
so I'm gonna run docker exact ID and

644
00:25:37,340 --> 00:25:39,350
then you'll see the web look comes

645
00:25:39,350 --> 00:25:43,160
through on the other side so the

646
00:25:43,160 --> 00:25:45,500
container is functioning it's giving

647
00:25:45,500 --> 00:25:48,170
legit return codes from the docket exact

648
00:25:48,170 --> 00:25:50,240
command that looks like it's actually

649
00:25:50,240 --> 00:25:52,760
happening everything's working but I'm

650
00:25:52,760 --> 00:25:54,290
actually hijacking it and getting those

651
00:25:54,290 --> 00:25:58,520
parameters through so once again you can

652
00:25:58,520 --> 00:26:00,530
do that with Bob to actually get where

653
00:26:00,530 --> 00:26:02,600
hooks or we can use return cards so you

654
00:26:02,600 --> 00:26:05,540
can add it in your systems and have it

655
00:26:05,540 --> 00:26:08,870
run on certain things and yeah you it

656
00:26:08,870 --> 00:26:11,360
would be surprising what actually comes

657
00:26:11,360 --> 00:26:16,520
through but yes there's always more all

658
00:26:16,520 --> 00:26:19,070
the CVE things so there's quite a few in

659
00:26:19,070 --> 00:26:21,530
dakka dakka chakra some of the older

660
00:26:21,530 --> 00:26:24,020
stuff some of the more linux clickable

661
00:26:24,020 --> 00:26:26,750
ones like bash bag or shell shock or 30

662
00:26:26,750 --> 00:26:28,340
Cal those things often make an

663
00:26:28,340 --> 00:26:31,760
appearance but most recently one of our

664
00:26:31,760 --> 00:26:33,830
most favorite ones the CD 2019 five

665
00:26:33,830 --> 00:26:35,430
seven three six which is the

666
00:26:35,430 --> 00:26:39,570
seed vulnerability and with these you

667
00:26:39,570 --> 00:26:40,710
wanna contain and now you want to

668
00:26:40,710 --> 00:26:42,540
exploit them how do you go about doing

669
00:26:42,540 --> 00:26:47,070
that so similar to hijacking binaries

670
00:26:47,070 --> 00:26:48,990
but in this case you're actually not

671
00:26:48,990 --> 00:26:50,610
hijacking boundaries in the container

672
00:26:50,610 --> 00:26:53,850
you're hijacking the Runcie binary on

673
00:26:53,850 --> 00:26:56,520
the host now the run see binary is quite

674
00:26:56,520 --> 00:26:58,590
important it runs as regional actually

675
00:26:58,590 --> 00:27:01,050
runs your containers so there's

676
00:27:01,050 --> 00:27:02,340
definitely a great thing when something

677
00:27:02,340 --> 00:27:05,220
hits the fan that's when the CVE happens

678
00:27:05,220 --> 00:27:07,650
over here so yeah it's pretty

679
00:27:07,650 --> 00:27:10,020
interesting and the underlying issues

680
00:27:10,020 --> 00:27:11,940
how Runcie spawns new processes in

681
00:27:11,940 --> 00:27:13,170
containers if you like the underlying

682
00:27:13,170 --> 00:27:15,120
mechanics of containers I highly

683
00:27:15,120 --> 00:27:17,160
recommend reading up on the CV it's

684
00:27:17,160 --> 00:27:21,270
super interesting so yeah it is a last

685
00:27:21,270 --> 00:27:24,600
resort exploit you can potentially break

686
00:27:24,600 --> 00:27:27,420
the underlying container runtime so if

687
00:27:27,420 --> 00:27:30,150
you do this for example maybe in a node

688
00:27:30,150 --> 00:27:31,920
you might affect a lot either pods

689
00:27:31,920 --> 00:27:34,020
particularly kubernetes cluster or maybe

690
00:27:34,020 --> 00:27:37,170
in a docker swarm but it's the runtime

691
00:27:37,170 --> 00:27:39,960
you take over the run time to implement

692
00:27:39,960 --> 00:27:41,280
it though there are some prerequisites

693
00:27:41,280 --> 00:27:43,650
so in Dhaka you need to be root and then

694
00:27:43,650 --> 00:27:45,090
for Alex you need to be roots and

695
00:27:45,090 --> 00:27:50,250
privileged to note there docker and LX e

696
00:27:50,250 --> 00:27:52,350
define privileged containers very

697
00:27:52,350 --> 00:27:56,460
differently so just be aware that so

698
00:27:56,460 --> 00:28:00,030
yeah you basically get root root

699
00:28:00,030 --> 00:28:02,280
privileges on the host and what does

700
00:28:02,280 --> 00:28:04,890
that all mean where's the POC I'll show

701
00:28:04,890 --> 00:28:06,180
you in a bit to probably the next slide

702
00:28:06,180 --> 00:28:08,250
but what we're going to do in this case

703
00:28:08,250 --> 00:28:11,420
is we're gonna use it to basically

704
00:28:11,420 --> 00:28:14,370
execute a web hook on our underlying

705
00:28:14,370 --> 00:28:18,300
host the reason for that is that this

706
00:28:18,300 --> 00:28:21,110
vulnerability is triggered when a

707
00:28:21,110 --> 00:28:23,970
external entity execute a command within

708
00:28:23,970 --> 00:28:27,360
the container so you if you run this

709
00:28:27,360 --> 00:28:29,640
exploit and to trigger the vulnerability

710
00:28:29,640 --> 00:28:31,980
someone has to execute a docker exec or

711
00:28:31,980 --> 00:28:35,740
run some other external command in

712
00:28:35,740 --> 00:28:38,289
your container so that's why I use

713
00:28:38,289 --> 00:28:38,919
webhooks

714
00:28:38,919 --> 00:28:42,640
to execute not shells because I might it

715
00:28:42,640 --> 00:28:45,190
might be one hour or one week until

716
00:28:45,190 --> 00:28:46,659
someone actually execute the command

717
00:28:46,659 --> 00:28:49,330
inside that container so that's why I'm

718
00:28:49,330 --> 00:28:51,970
using web hooks for this so what does it

719
00:28:51,970 --> 00:28:57,370
actually look like so on the right time

720
00:28:57,370 --> 00:28:59,230
running a vulnerable version of docker

721
00:28:59,230 --> 00:29:02,470
nothing's using late version of 17 but

722
00:29:02,470 --> 00:29:04,090
once again I'm in a container

723
00:29:04,090 --> 00:29:10,570
I'm gonna run Bob and yeah the command

724
00:29:10,570 --> 00:29:13,210
for this one I think I've renamed it

725
00:29:13,210 --> 00:29:18,510
quite recently it's now poem something

726
00:29:18,510 --> 00:29:21,880
but yes a grace of pun at this case I've

727
00:29:21,880 --> 00:29:23,440
just called it the grace of hack because

728
00:29:23,440 --> 00:29:25,360
it was quite aggressive but you'll see

729
00:29:25,360 --> 00:29:27,370
now when it runs now the containers

730
00:29:27,370 --> 00:29:29,620
basically waiting for it to be triggered

731
00:29:29,620 --> 00:29:32,799
at the bottom I'm on my host and I'm

732
00:29:32,799 --> 00:29:35,970
gonna run docker exec in that container

733
00:29:35,970 --> 00:29:38,590
I'm just gonna run the bash command so

734
00:29:38,590 --> 00:29:40,090
I'm gonna try get a shell inside my

735
00:29:40,090 --> 00:29:44,260
container and when I run that I should

736
00:29:44,260 --> 00:29:45,640
see something interesting on my terminal

737
00:29:45,640 --> 00:29:49,750
on the Left which is my canary which

738
00:29:49,750 --> 00:29:51,549
tells me that someone has tried to run

739
00:29:51,549 --> 00:29:54,370
user been docker run C with the

740
00:29:54,370 --> 00:29:56,740
parameter - - root and another parameter

741
00:29:56,740 --> 00:29:59,380
of our own docker run tom bla bla bla

742
00:29:59,380 --> 00:30:04,090
bla bla so now I've hijacked the runtime

743
00:30:04,090 --> 00:30:06,190
and basically have

744
00:30:06,190 --> 00:30:08,520
command execution on the underlying host

745
00:30:08,520 --> 00:30:15,880
which is pretty fun sometimes so we have

746
00:30:15,880 --> 00:30:17,830
a conclusion about Bob so I've tried

747
00:30:17,830 --> 00:30:20,860
really hard to make it useful for pen

748
00:30:20,860 --> 00:30:23,530
testers and for engineers so you can use

749
00:30:23,530 --> 00:30:24,340
it to get shells

750
00:30:24,340 --> 00:30:26,710
you know get those bug body parts make

751
00:30:26,710 --> 00:30:27,370
it rain

752
00:30:27,370 --> 00:30:30,070
or if we want to verify exploits ability

753
00:30:30,070 --> 00:30:31,570
you don't necessarily want to get a

754
00:30:31,570 --> 00:30:33,460
shell and prove that you're a lead

755
00:30:33,460 --> 00:30:35,049
hacksaw but you just want to know okay

756
00:30:35,049 --> 00:30:37,179
my environment is portable you can do

757
00:30:37,179 --> 00:30:41,200
that try to make it as easy as it can be

758
00:30:41,200 --> 00:30:43,059
to use an SDR sea environment so with

759
00:30:43,059 --> 00:30:46,539
the CI CD flags and you want to get

760
00:30:46,539 --> 00:30:49,690
feedback in in your environment whether

761
00:30:49,690 --> 00:30:52,510
it's immediate or not so bob caters for

762
00:30:52,510 --> 00:30:54,190
payloads that might tell you a week

763
00:30:54,190 --> 00:30:55,659
later when your backups run on your

764
00:30:55,659 --> 00:30:58,059
containers or on your orchestrate

765
00:30:58,059 --> 00:30:59,380
environments and then you realize oh

766
00:30:59,380 --> 00:31:01,539
when we run backups we're actually

767
00:31:01,539 --> 00:31:04,360
barnable to this so having webhooks is

768
00:31:04,360 --> 00:31:07,900
pretty useful for that and yet there's a

769
00:31:07,900 --> 00:31:09,429
lot more features that I haven't

770
00:31:09,429 --> 00:31:13,330
included in here just due to Tom I've

771
00:31:13,330 --> 00:31:14,919
also traveled the documentation to make

772
00:31:14,919 --> 00:31:17,950
it as easy it is there's examples to run

773
00:31:17,950 --> 00:31:20,350
it in other cloud environments there's a

774
00:31:20,350 --> 00:31:21,789
whole bunch of other examples for other

775
00:31:21,789 --> 00:31:24,070
stuff like I had a great suggestion the

776
00:31:24,070 --> 00:31:25,450
other day with someone said yeah we're

777
00:31:25,450 --> 00:31:28,120
running it but because our environment

778
00:31:28,120 --> 00:31:30,010
has certain sockets the bolts are

779
00:31:30,010 --> 00:31:32,530
failing because Bob will say well their

780
00:31:32,530 --> 00:31:35,130
sockets so I said what can you have a

781
00:31:35,130 --> 00:31:38,799
ignore the CRC D flag and just alert but

782
00:31:38,799 --> 00:31:40,419
this will keep the return code as zero

783
00:31:40,419 --> 00:31:42,730
which kind of makes sense so yeah

784
00:31:42,730 --> 00:31:44,440
there's a lot of work going into it

785
00:31:44,440 --> 00:31:48,400
so yeah that's where you can get Bob for

786
00:31:48,400 --> 00:31:51,240
open source it gets pretty interesting

787
00:31:51,240 --> 00:31:53,669
when you can see what new

788
00:31:53,669 --> 00:31:55,750
vulnerabilities you can exploit in it

789
00:31:55,750 --> 00:31:59,230
and yeah resources like I said this

790
00:31:59,230 --> 00:32:00,400
wouldn't be possible with a whole bunch

791
00:32:00,400 --> 00:32:01,630
of great work that other people have

792
00:32:01,630 --> 00:32:03,429
made and there's a more exhaustive list

793
00:32:03,429 --> 00:32:06,100
on the github repo but yet if there's

794
00:32:06,100 --> 00:32:08,980
time are the what if I can see there's

795
00:32:08,980 --> 00:32:10,960
more time we'll have questions if not

796
00:32:10,960 --> 00:32:13,010
thank you for attention and enjoy

797
00:32:13,010 --> 00:32:15,910
the rest of dev second

798
00:32:21,370 --> 00:32:23,720
is it time for questions or is it my

799
00:32:23,720 --> 00:32:25,820
time to there would be some questions

800
00:32:25,820 --> 00:32:29,800
any questions yes

801
00:32:33,010 --> 00:32:36,370
and very interesting talk and say you're

802
00:32:36,370 --> 00:32:40,480
talking about delayed attacks and also

803
00:32:40,480 --> 00:32:42,490
in combination for that not running them

804
00:32:42,490 --> 00:32:45,700
in production or maybe even not running

805
00:32:45,700 --> 00:32:49,120
Bob in production can you can you tell

806
00:32:49,120 --> 00:32:51,070
us a little bit about how you actually

807
00:32:51,070 --> 00:32:52,809
have that set up so that you do receive

808
00:32:52,809 --> 00:32:54,580
webhooks and something that's actively

809
00:32:54,580 --> 00:32:56,790
used is it like a staging environment or

810
00:32:56,790 --> 00:33:00,370
so I am struggling to hear you can you

811
00:33:00,370 --> 00:33:01,480
just repeat the last but a little bit

812
00:33:01,480 --> 00:33:04,419
louder sorry sure yeah so can you tell

813
00:33:04,419 --> 00:33:08,500
us a little bit about me a little bit

814
00:33:08,500 --> 00:33:10,600
about how you're running Bob

815
00:33:10,600 --> 00:33:12,990
particularly with the delayed attacks

816
00:33:12,990 --> 00:33:14,650
with the webhooks

817
00:33:14,650 --> 00:33:16,419
if you're not running it in production

818
00:33:16,419 --> 00:33:19,390
like how are those actually used okay

819
00:33:19,390 --> 00:33:21,100
great so yeah show you one heard the

820
00:33:21,100 --> 00:33:23,470
question no need for me to repeat it so

821
00:33:23,470 --> 00:33:26,880
yeah I'm actually using different

822
00:33:26,880 --> 00:33:28,929
environments on the same platform that

823
00:33:28,929 --> 00:33:31,360
runs different tests so I do have a

824
00:33:31,360 --> 00:33:33,790
production test suite that does actively

825
00:33:33,790 --> 00:33:36,580
run so I have one application that is

826
00:33:36,580 --> 00:33:39,970
running a very aggressive binary hijacks

827
00:33:39,970 --> 00:33:42,630
that have one specific wave work

828
00:33:42,630 --> 00:33:45,640
endpoint that I'm constantly monitoring

829
00:33:45,640 --> 00:33:47,799
so I've just feel bad Berner ability

830
00:33:47,799 --> 00:33:49,480
that I'm testing on the platform and

831
00:33:49,480 --> 00:33:50,770
then I'll duplicate that for other

832
00:33:50,770 --> 00:33:52,600
vulnerabilities across staging and

833
00:33:52,600 --> 00:33:55,780
production to very far what's basically

834
00:33:55,780 --> 00:33:58,270
going on so in our case required lucky

835
00:33:58,270 --> 00:34:00,280
the varmint is quite easy to spin up

836
00:34:00,280 --> 00:34:03,580
stuff so yeah I'm happy to go through

837
00:34:03,580 --> 00:34:05,500
more details if I didn't caught on to

838
00:34:05,500 --> 00:34:09,040
question but segmented environments on

839
00:34:09,040 --> 00:34:10,750
the same platform and that's how we're

840
00:34:10,750 --> 00:34:11,918
testing it and just having things

841
00:34:11,918 --> 00:34:14,730
constantly trigger

842
00:34:15,639 --> 00:34:18,380
cool at least one question so any other

843
00:34:18,380 --> 00:34:20,560
questions

844
00:34:23,310 --> 00:34:26,810
so hard to see the light

845
00:34:27,980 --> 00:34:31,820
I essentially like I think this has the

846
00:34:31,820 --> 00:34:34,070
potential to actually create the roadmap

847
00:34:34,070 --> 00:34:35,270
to actually fix all these

848
00:34:35,270 --> 00:34:37,190
vulnerabilities in the next like six

849
00:34:37,190 --> 00:34:39,139
months especially if you want to put it

850
00:34:39,139 --> 00:34:41,869
like in a in an environment that is not

851
00:34:41,869 --> 00:34:44,359
actually being tested for this so like

852
00:34:44,359 --> 00:34:46,399
how do you prioritize the world like is

853
00:34:46,399 --> 00:34:49,040
there any like particular vulnerability

854
00:34:49,040 --> 00:34:51,199
you will be focusing like provided that

855
00:34:51,199 --> 00:34:54,770
like like that if there hasn't been like

856
00:34:54,770 --> 00:34:58,310
this kind of testing like before like do

857
00:34:58,310 --> 00:35:00,230
you think it's possible to prioritize or

858
00:35:00,230 --> 00:35:04,250
you just have to go to fix them all good

859
00:35:04,250 --> 00:35:06,560
question I'm probably the worst person

860
00:35:06,560 --> 00:35:08,030
to ask about prioritizing that's

861
00:35:08,030 --> 00:35:09,650
probably what I've been distracted the

862
00:35:09,650 --> 00:35:12,890
most by that will get my attention I

863
00:35:12,890 --> 00:35:16,099
don't actually have a working recipe to

864
00:35:16,099 --> 00:35:18,440
actually implement that I struggle with

865
00:35:18,440 --> 00:35:20,690
prioritization that's mostly like what

866
00:35:20,690 --> 00:35:23,060
needs immediate attention now and that

867
00:35:23,060 --> 00:35:24,800
generally follows what I go ahead and I

868
00:35:24,800 --> 00:35:28,490
implement so hope that partially answers

869
00:35:28,490 --> 00:35:31,149
your question

870
00:35:33,170 --> 00:35:36,910
any other questions for the questions

871
00:35:38,310 --> 00:35:40,350
no hands cool thank you very much

872
00:35:40,350 --> 00:35:42,290
question thank you

873
00:35:42,290 --> 00:35:47,250
and couple of announcements before we go

874
00:35:47,250 --> 00:35:50,600
to lunch we

