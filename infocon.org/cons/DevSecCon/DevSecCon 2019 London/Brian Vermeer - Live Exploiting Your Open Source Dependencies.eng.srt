1
00:00:00,000 --> 00:00:04,920
me set this up very very quickly and you

2
00:00:04,920 --> 00:00:07,799
see my slide right live exploiting your

3
00:00:07,799 --> 00:00:09,240
open source dependencies

4
00:00:09,240 --> 00:00:12,540
well first I'm Brian so now you do not

5
00:00:12,540 --> 00:00:14,040
have to talk to me anymore at the after

6
00:00:14,040 --> 00:00:15,660
party because we know each other now

7
00:00:15,660 --> 00:00:20,189
right well first of all nice nice to be

8
00:00:20,189 --> 00:00:22,619
here thanks I want to set one thing

9
00:00:22,619 --> 00:00:26,430
straight I am NOT a hacker I just tried

10
00:00:26,430 --> 00:00:28,740
to show you something because what I'm

11
00:00:28,740 --> 00:00:31,500
going to do today is I'm going to talk

12
00:00:31,500 --> 00:00:34,230
about this word death seconds who

13
00:00:34,230 --> 00:00:36,350
practices deaf seconds

14
00:00:36,350 --> 00:00:40,440
who likes deaf setups who wants to do

15
00:00:40,440 --> 00:00:43,829
deaf seconds who likes the word deaf SEC

16
00:00:43,829 --> 00:00:46,860
ops I'm not a big fan of the word to be

17
00:00:46,860 --> 00:00:50,640
honest because that security stands in

18
00:00:50,640 --> 00:00:53,399
the middle and well first I don't like

19
00:00:53,399 --> 00:00:55,620
the word but I like the meaning of it

20
00:00:55,620 --> 00:00:58,140
but I think that security should be part

21
00:00:58,140 --> 00:01:00,510
of death and should be part of ops and

22
00:01:00,510 --> 00:01:03,210
shouldn't be a separate word it's the

23
00:01:03,210 --> 00:01:05,309
same as talking to people that

24
00:01:05,309 --> 00:01:08,460
maintenance or scalability should be

25
00:01:08,460 --> 00:01:11,610
separate they're in a stream I don't

26
00:01:11,610 --> 00:01:15,900
think that needs to be there although we

27
00:01:15,900 --> 00:01:18,090
do need to have the adoption that's why

28
00:01:18,090 --> 00:01:20,310
we have that that seconds thing and

29
00:01:20,310 --> 00:01:22,680
we're gonna especially look at that

30
00:01:22,680 --> 00:01:24,900
security thing because well we're the

31
00:01:24,900 --> 00:01:27,360
security conference they told me first

32
00:01:27,360 --> 00:01:29,070
of all I'm Brian I'm a developer I

33
00:01:29,070 --> 00:01:32,100
forget for a sneek I don't only do

34
00:01:32,100 --> 00:01:34,979
presentations I also engineer trust me I

35
00:01:34,979 --> 00:01:36,689
know what I'm talking about

36
00:01:36,689 --> 00:01:38,939
I do use things in the community I'm

37
00:01:38,939 --> 00:01:40,470
living in Holland by the way or the

38
00:01:40,470 --> 00:01:42,990
Netherlands I would gladly explain the

39
00:01:42,990 --> 00:01:44,520
difference but let's do that at the

40
00:01:44,520 --> 00:01:47,159
party would it be R I'm also working for

41
00:01:47,159 --> 00:01:49,740
the Utrecht Java user group well I do

42
00:01:49,740 --> 00:01:51,840
some stuff I'm co-leader of that might

43
00:01:51,840 --> 00:01:53,220
there's a cops thing we just announced

44
00:01:53,220 --> 00:01:54,840
previously known as the D secure

45
00:01:54,840 --> 00:01:57,719
developer and I'm a co-lead for the

46
00:01:57,719 --> 00:02:01,560
virtual the Java user group but let's

47
00:02:01,560 --> 00:02:03,420
get to the next thing because we are

48
00:02:03,420 --> 00:02:05,460
trying to solve the problem I'm an

49
00:02:05,460 --> 00:02:08,239
engineer by bitrate a Java engineer and

50
00:02:08,239 --> 00:02:11,190
five years ago or maybe ten years ago I

51
00:02:11,190 --> 00:02:13,500
worked for a government agency and after

52
00:02:13,500 --> 00:02:15,959
that for a bank the problem was they

53
00:02:15,959 --> 00:02:20,370
delivered three times a year they pushed

54
00:02:20,370 --> 00:02:22,170
up their stuff to production three times

55
00:02:22,170 --> 00:02:26,670
a year last year well look more than a

56
00:02:26,670 --> 00:02:28,260
you know half ago I worked for an

57
00:02:28,260 --> 00:02:31,230
e-commerce platform in Holland and they

58
00:02:31,230 --> 00:02:35,099
pushed out three times a day the point

59
00:02:35,099 --> 00:02:37,379
is we want to speed up development we

60
00:02:37,379 --> 00:02:39,930
want to make sure that we bigger badder

61
00:02:39,930 --> 00:02:41,400
faster and stronger than our competitors

62
00:02:41,400 --> 00:02:44,069
right we want to make sure that if we

63
00:02:44,069 --> 00:02:45,450
have something new it needs to be out

64
00:02:45,450 --> 00:02:47,010
because we need to be out there before

65
00:02:47,010 --> 00:02:49,410
our competitors do which is fair because

66
00:02:49,410 --> 00:02:51,590
we need to make money in the end

67
00:02:51,590 --> 00:02:54,360
although if we do we are focusing on

68
00:02:54,360 --> 00:02:58,519
features and not so much on security and

69
00:02:58,519 --> 00:03:01,489
that lack of security in our lifecycle

70
00:03:01,489 --> 00:03:05,190
we can say what is that actually our

71
00:03:05,190 --> 00:03:09,840
problem or is it the security team well

72
00:03:09,840 --> 00:03:11,849
I think that's the first mistake because

73
00:03:11,849 --> 00:03:15,569
with DevOps we try to tear down walls we

74
00:03:15,569 --> 00:03:16,819
try to integrate

75
00:03:16,819 --> 00:03:19,790
operations and development in one team

76
00:03:19,790 --> 00:03:23,459
but at the end nowadays in many many

77
00:03:23,459 --> 00:03:27,150
organizations a security team security

78
00:03:27,150 --> 00:03:28,799
expertise is still silent at the end and

79
00:03:28,799 --> 00:03:30,180
they're basically the people that say no

80
00:03:30,180 --> 00:03:32,970
and it's developer I hate their work

81
00:03:32,970 --> 00:03:34,709
three weeks hard on a new feature and

82
00:03:34,709 --> 00:03:36,480
then the security person comes up and

83
00:03:36,480 --> 00:03:38,959
said nope you cannot go to production

84
00:03:38,959 --> 00:03:43,290
and my first is why and they said just

85
00:03:43,290 --> 00:03:47,760
no and what the point is is it's not I'm

86
00:03:47,760 --> 00:03:50,640
right or dare right because I need to go

87
00:03:50,640 --> 00:03:52,920
out with that to make profit or well my

88
00:03:52,920 --> 00:03:55,680
manager makes profit I don't the

89
00:03:55,680 --> 00:03:58,110
security people basically want to be

90
00:03:58,110 --> 00:04:00,450
that the stuff is secure right and at

91
00:04:00,450 --> 00:04:02,099
the end we need to take care of this

92
00:04:02,099 --> 00:04:04,739
thing that our customer data would not

93
00:04:04,739 --> 00:04:07,920
be compromised because if that would be

94
00:04:07,920 --> 00:04:09,049
the case

95
00:04:09,049 --> 00:04:12,269
we're both the problem we're both in

96
00:04:12,269 --> 00:04:12,810
trouble

97
00:04:12,810 --> 00:04:15,450
we have this big headlines oh well

98
00:04:15,450 --> 00:04:18,540
that's not that good but how bad is it

99
00:04:18,540 --> 00:04:20,040
well

100
00:04:20,040 --> 00:04:23,100
I hope everybody's hand will go up who

101
00:04:23,100 --> 00:04:28,620
had heard of Equifax cool a bunch of you

102
00:04:28,620 --> 00:04:31,200
not everybody who had heard of a qui fax

103
00:04:31,200 --> 00:04:34,740
three years ago well that's good

104
00:04:34,740 --> 00:04:37,650
marketing like more than half of you

105
00:04:37,650 --> 00:04:39,620
know about Equifax now now why so

106
00:04:39,620 --> 00:04:41,670
because they got breached

107
00:04:41,670 --> 00:04:44,540
they're in the news they know your name

108
00:04:44,540 --> 00:04:48,690
that's good or not for those who don't

109
00:04:48,690 --> 00:04:52,770
know Equifax was a us Corrado is a us us

110
00:04:52,770 --> 00:04:56,040
corrosion company and in 2017 it was

111
00:04:56,040 --> 00:04:59,940
they were breached and basically 143

112
00:04:59,940 --> 00:05:03,120
million records were exposed to the

113
00:05:03,120 --> 00:05:05,430
public well I don't want to talk about

114
00:05:05,430 --> 00:05:09,120
Equifax as a company I want to talk to

115
00:05:09,120 --> 00:05:11,880
the problem they had they used the Java

116
00:05:11,880 --> 00:05:14,520
library Apache struts to which at some

117
00:05:14,520 --> 00:05:16,440
point had a vulnerability they didn't

118
00:05:16,440 --> 00:05:18,450
know people got in people snooped around

119
00:05:18,450 --> 00:05:21,990
because they didn't know and I snooped

120
00:05:21,990 --> 00:05:24,300
around snooped around for weeks and

121
00:05:24,300 --> 00:05:26,100
after a certain point they found enough

122
00:05:26,100 --> 00:05:31,260
data to expose it and just by having the

123
00:05:31,260 --> 00:05:34,950
wrong dependency in but still their

124
00:05:34,950 --> 00:05:37,320
tests were working this stuff was

125
00:05:37,320 --> 00:05:38,580
working their integration tests were

126
00:05:38,580 --> 00:05:40,830
working but they just had the wrong

127
00:05:40,830 --> 00:05:43,680
version well let me show you what

128
00:05:43,680 --> 00:05:46,020
happened because this thing was called

129
00:05:46,020 --> 00:05:48,480
as something with live coding and let me

130
00:05:48,480 --> 00:05:51,740
go into that exploit I have a

131
00:05:51,740 --> 00:05:55,040
application over here that has the same

132
00:05:55,040 --> 00:05:58,860
same struts library hope let me don't do

133
00:05:58,860 --> 00:06:05,430
dead just yes let me kick it off it

134
00:06:05,430 --> 00:06:07,500
works we do not have to go in there but

135
00:06:07,500 --> 00:06:09,480
I will go into the problem of Apache

136
00:06:09,480 --> 00:06:12,230
struts a project for Apache struts the

137
00:06:12,230 --> 00:06:16,020
point is which struts we can we can do

138
00:06:16,020 --> 00:06:18,360
certain things we can call out to

139
00:06:18,360 --> 00:06:20,670
different parts of the light of the

140
00:06:20,670 --> 00:06:24,570
website and we can do routing but if we

141
00:06:24,570 --> 00:06:27,750
use this header well basically what we

142
00:06:27,750 --> 00:06:31,130
do is we insert a content type

143
00:06:31,130 --> 00:06:35,840
yeah this who recognizes discontent type

144
00:06:35,840 --> 00:06:39,810
one most of you don't write because it's

145
00:06:39,810 --> 00:06:42,449
an illegal content type it's not JSON

146
00:06:42,449 --> 00:06:44,760
it's not HTML it's not plain text

147
00:06:44,760 --> 00:06:47,340
whatever now what we do here is what

148
00:06:47,340 --> 00:06:50,070
people found out is that you can utilize

149
00:06:50,070 --> 00:06:52,260
ogl which is the domain specific

150
00:06:52,260 --> 00:06:53,490
language or the expression language

151
00:06:53,490 --> 00:06:56,850
which can be used in Apache struts with

152
00:06:56,850 --> 00:07:01,889
that Odia now you can alter objects

153
00:07:01,889 --> 00:07:05,160
within the runtime you can access Gators

154
00:07:05,160 --> 00:07:07,440
cellars whatever but you also can create

155
00:07:07,440 --> 00:07:11,430
new objects and basically what we do is

156
00:07:11,430 --> 00:07:13,500
are there any Java programmers here in

157
00:07:13,500 --> 00:07:16,800
the room or did some Java in the past

158
00:07:16,800 --> 00:07:18,780
like that old language that was yeah I

159
00:07:18,780 --> 00:07:21,870
know you know that PHP or that there

160
00:07:21,870 --> 00:07:24,270
JavaScript is just as alright just say

161
00:07:24,270 --> 00:07:26,280
no but what we're trying to do is we we

162
00:07:26,280 --> 00:07:27,600
call Youm we're calling a process

163
00:07:27,600 --> 00:07:29,220
builder with the process build that we

164
00:07:29,220 --> 00:07:31,380
can basically do anything because what

165
00:07:31,380 --> 00:07:32,880
we do is we call the bash

166
00:07:32,880 --> 00:07:36,030
now we feat the bash your command so

167
00:07:36,030 --> 00:07:38,580
what we can do here they're content type

168
00:07:38,580 --> 00:07:41,190
is illegal we're going away are going

169
00:07:41,190 --> 00:07:43,110
into an exceptional flow in an

170
00:07:43,110 --> 00:07:45,510
exceptional flow with this header with

171
00:07:45,510 --> 00:07:48,389
this stuff with this content type I can

172
00:07:48,389 --> 00:07:53,700
utilize out you know I will get an error

173
00:07:53,700 --> 00:07:55,349
back mr. Larssen and that's no problem

174
00:07:55,349 --> 00:07:58,200
but by using OTL I will insert the

175
00:07:58,200 --> 00:08:00,419
process builder I will insert it command

176
00:08:00,419 --> 00:08:02,849
and F command can be any command that is

177
00:08:02,849 --> 00:08:06,330
available on my Linux distro so that

178
00:08:06,330 --> 00:08:09,840
means this one is running on Heroku so

179
00:08:09,840 --> 00:08:12,419
let me just see where I have my notes

180
00:08:12,419 --> 00:08:15,530
yeah over here

181
00:08:15,530 --> 00:08:20,820
struts exploits and let's call what make

182
00:08:20,820 --> 00:08:23,090
it easy one we are calling for the

183
00:08:23,090 --> 00:08:25,860
environment variables we just call em we

184
00:08:25,860 --> 00:08:27,840
substitute command with and and let's

185
00:08:27,840 --> 00:08:33,029
not do it on our local system let's copy

186
00:08:33,029 --> 00:08:34,309
this one

187
00:08:34,309 --> 00:08:38,958
go back to the terminal and do that on a

188
00:08:38,958 --> 00:08:41,568
cloud instance because well cloud is

189
00:08:41,568 --> 00:08:46,399
hyped and what we see here is that I

190
00:08:46,399 --> 00:08:48,649
have the environment variables of my

191
00:08:48,649 --> 00:08:51,170
hero Korean sense so I see with what

192
00:08:51,170 --> 00:08:53,899
what options Java is running with for

193
00:08:53,899 --> 00:08:57,079
instance where my java home is and this

194
00:08:57,079 --> 00:08:59,240
one is fun let's keep this one in mind

195
00:08:59,240 --> 00:09:01,459
because I will use it later but I can

196
00:09:01,459 --> 00:09:03,740
see anything I can call any thing that

197
00:09:03,740 --> 00:09:09,019
is available on that Linux distro basic

198
00:09:09,019 --> 00:09:12,980
arbitrary code injection or arbitrary

199
00:09:12,980 --> 00:09:16,009
code execution sorry so so far about

200
00:09:16,009 --> 00:09:20,629
disrupting by simply not knowing what

201
00:09:20,629 --> 00:09:25,249
you do what packets you get in you might

202
00:09:25,249 --> 00:09:29,149
be vulnerable okay experiment how many

203
00:09:29,149 --> 00:09:32,749
of you trust their peers because we work

204
00:09:32,749 --> 00:09:35,410
in teams how many of you trust appears

205
00:09:35,410 --> 00:09:38,360
three that's good trust just a good

206
00:09:38,360 --> 00:09:40,550
audience how many of you do code reviews

207
00:09:40,550 --> 00:09:43,939
a credit rest of you do pair programming

208
00:09:43,939 --> 00:09:47,149
I get it now but basically we don't

209
00:09:47,149 --> 00:09:49,639
trust our peers because we do refuel we

210
00:09:49,639 --> 00:09:51,620
do refill our code their code because

211
00:09:51,620 --> 00:09:54,410
people can make mistakes but what do we

212
00:09:54,410 --> 00:09:56,750
do with libraries and frameworks do we

213
00:09:56,750 --> 00:09:59,990
do the same or we just Wow it worked on

214
00:09:59,990 --> 00:10:02,600
Stack Overflow let's copy-paste it I

215
00:10:02,600 --> 00:10:06,139
ship it that is fun we have 17 million

216
00:10:06,139 --> 00:10:09,379
testers in production right if this is

217
00:10:09,379 --> 00:10:13,879
your application probably this is the

218
00:10:13,879 --> 00:10:15,769
code you use this is the coachee

219
00:10:15,769 --> 00:10:17,269
actually right because you'd depend

220
00:10:17,269 --> 00:10:19,639
heavily on frameworks and libraries so

221
00:10:19,639 --> 00:10:22,519
much that most of the code that is in

222
00:10:22,519 --> 00:10:26,449
production is not yours I've got a node

223
00:10:26,449 --> 00:10:28,639
server list example over here 19 lines

224
00:10:28,639 --> 00:10:31,699
of code to dependencies and ifs to

225
00:10:31,699 --> 00:10:35,499
dependence ease the first one is AWS SDK

226
00:10:35,499 --> 00:10:39,529
you feel me right it's not that bad it's

227
00:10:39,529 --> 00:10:42,259
only 19 dependencies in total but how

228
00:10:42,259 --> 00:10:43,790
many lines of code do I put into

229
00:10:43,790 --> 00:10:49,120
production any clue you scream

230
00:10:49,629 --> 00:10:56,269
four hundred six thousand one thousand

231
00:10:56,269 --> 00:11:04,549
no L 190 1155 that's a lot but okay it

232
00:11:04,549 --> 00:11:08,989
is this note this is Java a spring

233
00:11:08,989 --> 00:11:11,989
serval is example 222 lines of code

234
00:11:11,989 --> 00:11:14,029
because well a lot of copy pasting we

235
00:11:14,029 --> 00:11:17,389
did for this demo and at five

236
00:11:17,389 --> 00:11:21,499
dependencies and its spring spring

237
00:11:21,499 --> 00:11:23,079
brings in the world

238
00:11:23,079 --> 00:11:26,149
54 dependencies in total how many lines

239
00:11:26,149 --> 00:11:29,290
of code do I put into production

240
00:11:29,499 --> 00:11:36,439
Annie sorry how many half a million

241
00:11:36,439 --> 00:11:40,819
who says more than half a million you're

242
00:11:40,819 --> 00:11:46,819
actually right almost and then you can

243
00:11:46,819 --> 00:11:49,209
say yeah but we do not use all that code

244
00:11:49,209 --> 00:11:51,860
whoever programmed with the spring

245
00:11:51,860 --> 00:11:55,790
framework spring depends heavily on the

246
00:11:55,790 --> 00:11:59,269
on the reflection API in Java how can

247
00:11:59,269 --> 00:12:00,829
you know that you're not using it

248
00:12:00,829 --> 00:12:04,989
because it comes back to the pipe code

249
00:12:04,989 --> 00:12:07,549
so we can do code analysis we can do

250
00:12:07,549 --> 00:12:09,679
graph analysis on that but it doesn't

251
00:12:09,679 --> 00:12:12,290
mean you do not use it because there's a

252
00:12:12,290 --> 00:12:14,989
lot of magic on the de hood and if it's

253
00:12:14,989 --> 00:12:17,540
in there what do you say to your fellow

254
00:12:17,540 --> 00:12:19,160
developers what's him that you can use

255
00:12:19,160 --> 00:12:22,489
it and a problem in that case is we are

256
00:12:22,489 --> 00:12:24,949
using open source and I love open source

257
00:12:24,949 --> 00:12:27,860
don't get me wrong but we need to treat

258
00:12:27,860 --> 00:12:30,350
it as dangerously ice as much as we do

259
00:12:30,350 --> 00:12:33,079
treat our own code because once there is

260
00:12:33,079 --> 00:12:35,419
a vulnerability in open source we have

261
00:12:35,419 --> 00:12:39,529
many many victims I mean that's trust

262
00:12:39,529 --> 00:12:42,889
library Equifax was just dare they were

263
00:12:42,889 --> 00:12:46,790
just unlucky people found that problem

264
00:12:46,790 --> 00:12:48,889
and there were just blindly firing and

265
00:12:48,889 --> 00:12:52,239
every server and then they just came up

266
00:12:52,239 --> 00:12:55,429
with a weather victim which was Equifax

267
00:12:55,429 --> 00:12:56,839
indicated this case they were just in

268
00:12:56,839 --> 00:12:58,910
the crossfire they were not targeted and

269
00:12:58,910 --> 00:13:01,949
that's that's a point mid open source

270
00:13:01,949 --> 00:13:04,000
because if we look at the amount of

271
00:13:04,000 --> 00:13:06,610
packages per ecosystem we see that NPM

272
00:13:06,610 --> 00:13:09,850
in the last year the growth is the clear

273
00:13:09,850 --> 00:13:12,459
winner in that sense I said that says

274
00:13:12,459 --> 00:13:13,870
something about the quality of the

275
00:13:13,870 --> 00:13:16,720
product in my opinion but if you look at

276
00:13:16,720 --> 00:13:19,180
maven central so Java I just picked the

277
00:13:19,180 --> 00:13:21,490
two biggest ecosystems it's still the

278
00:13:21,490 --> 00:13:23,500
growth of a hundred thousand packages a

279
00:13:23,500 --> 00:13:28,449
year between 2018 and 2019 if we look at

280
00:13:28,449 --> 00:13:30,519
the vulnerabilities each year in this

281
00:13:30,519 --> 00:13:32,259
case my favorite language is the clear

282
00:13:32,259 --> 00:13:36,870
winner not something to be proud of and

283
00:13:36,870 --> 00:13:40,660
the problem is not in most of the cases

284
00:13:40,660 --> 00:13:43,240
the dependency you put in but

285
00:13:43,240 --> 00:13:44,800
dependencies or depending on the

286
00:13:44,800 --> 00:13:45,970
premises or depending on other

287
00:13:45,970 --> 00:13:48,399
dependency so sometimes deep down below

288
00:13:48,399 --> 00:13:50,410
there is something you might not know

289
00:13:50,410 --> 00:13:52,509
that you're using but has a

290
00:13:52,509 --> 00:13:55,120
vulnerability and that's in most times

291
00:13:55,120 --> 00:13:59,170
that is the case so we're asked we're

292
00:13:59,170 --> 00:14:00,910
asking open sort we're asking these

293
00:14:00,910 --> 00:14:02,889
open-source maintainer about how

294
00:14:02,889 --> 00:14:05,170
confident are you and your own security

295
00:14:05,170 --> 00:14:12,699
knowledge 63% says kinda do you trust

296
00:14:12,699 --> 00:14:17,380
your own peers if they say kind they're

297
00:14:17,380 --> 00:14:21,550
humans we make mistakes but who's

298
00:14:21,550 --> 00:14:24,850
responsible for security if we ask the

299
00:14:24,850 --> 00:14:27,790
general public we did this in and as a

300
00:14:27,790 --> 00:14:29,680
big server we call the open the state of

301
00:14:29,680 --> 00:14:31,149
open source security the beginning of

302
00:14:31,149 --> 00:14:34,449
this year they say 81% of developer 81%

303
00:14:34,449 --> 00:14:36,310
things that developers should have their

304
00:14:36,310 --> 00:14:38,589
fair Square they should know about

305
00:14:38,589 --> 00:14:39,850
security s you should think about

306
00:14:39,850 --> 00:14:41,440
security at the very least but it's a

307
00:14:41,440 --> 00:14:43,779
shared responsibility between developers

308
00:14:43,779 --> 00:14:46,019
security team operators and motor types

309
00:14:46,019 --> 00:14:51,010
who have you as a developer here who's a

310
00:14:51,010 --> 00:14:56,949
manager who do who does operations the

311
00:14:56,949 --> 00:15:00,260
rest is sleeping fun

312
00:15:00,260 --> 00:15:03,390
so we can go on and on like do you fire

313
00:15:03,390 --> 00:15:05,130
how do you find a vulnerability some of

314
00:15:05,130 --> 00:15:07,740
the 27% silent I don't know probably

315
00:15:07,740 --> 00:15:11,220
don't but this is a fun fact say

316
00:15:11,220 --> 00:15:12,870
something is that who works with legacy

317
00:15:12,870 --> 00:15:15,030
applications who needs to maintain a

318
00:15:15,030 --> 00:15:18,330
legacy applications good for you I mean

319
00:15:18,330 --> 00:15:21,390
that's the heart work now basically

320
00:15:21,390 --> 00:15:23,550
greenfield applications a friend of mine

321
00:15:23,550 --> 00:15:25,500
says is for [ __ ] I mean you can do

322
00:15:25,500 --> 00:15:28,230
everything right but the hard thing is

323
00:15:28,230 --> 00:15:30,030
you have an application in the air for

324
00:15:30,030 --> 00:15:31,350
many many years and you need to maintain

325
00:15:31,350 --> 00:15:33,750
it and you barely want to touch it

326
00:15:33,750 --> 00:15:38,700
because it works but how much time does

327
00:15:38,700 --> 00:15:40,620
it take for a vulnerability to be

328
00:15:40,620 --> 00:15:47,100
discovered in general in general it can

329
00:15:47,100 --> 00:15:48,540
take up to two and a half years that's

330
00:15:48,540 --> 00:15:51,480
to median in this case so if you have a

331
00:15:51,480 --> 00:15:52,950
legacy application out there which you

332
00:15:52,950 --> 00:15:56,730
didn't update just make sure it works

333
00:15:56,730 --> 00:15:59,160
that's all reset the computer which on

334
00:15:59,160 --> 00:16:02,370
your desk right make sure it works but

335
00:16:02,370 --> 00:16:04,080
if it's out we're facing you probably

336
00:16:04,080 --> 00:16:07,590
you might have a problem so we can go on

337
00:16:07,590 --> 00:16:09,840
and on docker that we would probably use

338
00:16:09,840 --> 00:16:11,970
docker images we build on top of things

339
00:16:11,970 --> 00:16:14,550
on docker hub and if we look at the top

340
00:16:14,550 --> 00:16:16,770
ten docker images that we just pulled on

341
00:16:16,770 --> 00:16:19,110
docker up this was done in March and we

342
00:16:19,110 --> 00:16:20,640
build that stuff on top of the node

343
00:16:20,640 --> 00:16:23,790
image we get 567 vulnerabilities for

344
00:16:23,790 --> 00:16:26,880
free you get a vulnerability and you get

345
00:16:26,880 --> 00:16:29,460
a vulnerability the fun part is all

346
00:16:29,460 --> 00:16:31,140
these vulnerabilities were not nodes

347
00:16:31,140 --> 00:16:33,480
problem or pose grasses problem

348
00:16:33,480 --> 00:16:36,000
most of these were the operating system

349
00:16:36,000 --> 00:16:39,120
layer underneath because I just pulled

350
00:16:39,120 --> 00:16:40,850
on the latest that was built

351
00:16:40,850 --> 00:16:44,340
unfortunately on a very old Debian

352
00:16:44,340 --> 00:16:47,190
Jessie version version which had a lot

353
00:16:47,190 --> 00:16:51,180
of operating system vulnerabilities so

354
00:16:51,180 --> 00:16:52,290
you have to take care of these as well

355
00:16:52,290 --> 00:16:55,370
and yes not all of these are actually

356
00:16:55,370 --> 00:16:57,900
useful in your system but you have to

357
00:16:57,900 --> 00:17:00,750
think of it well we can go on and on

358
00:17:00,750 --> 00:17:03,120
about how do we deploy how do we find

359
00:17:03,120 --> 00:17:05,190
out but I'm going into the hacking mode

360
00:17:05,190 --> 00:17:09,599
again so let's get into this application

361
00:17:09,599 --> 00:17:11,369
we have

362
00:17:11,369 --> 00:17:14,180
you see I'm a very good designer right

363
00:17:14,180 --> 00:17:16,859
we have an application here that that

364
00:17:16,859 --> 00:17:18,660
can what this to do is like something

365
00:17:18,660 --> 00:17:22,890
like buy flowers cool and what this

366
00:17:22,890 --> 00:17:24,839
application can do as well is we have an

367
00:17:24,839 --> 00:17:28,410
very awesome a back page again well

368
00:17:28,410 --> 00:17:33,240
designed it is scalable whatever inode

369
00:17:33,240 --> 00:17:35,340
is the application is using the SC

370
00:17:35,340 --> 00:17:38,430
library which what we can do and note is

371
00:17:38,430 --> 00:17:41,460
that we can use or displace static

372
00:17:41,460 --> 00:17:44,580
content let me enlarge this one what do

373
00:17:44,580 --> 00:17:48,300
we do if we want to hack such a package

374
00:17:48,300 --> 00:17:50,130
because I know for a fact there is a

375
00:17:50,130 --> 00:17:52,050
path traversal vulnerability in there

376
00:17:52,050 --> 00:17:55,190
what should i do first

377
00:17:55,190 --> 00:17:58,770
first you put on your hoodie because

378
00:17:58,770 --> 00:18:00,600
well now you look like a heck are they

379
00:18:00,600 --> 00:18:02,130
safe and then you go to the terminal

380
00:18:02,130 --> 00:18:05,910
because no hacker in is sane mind will

381
00:18:05,910 --> 00:18:08,250
do it from the browser and there's a

382
00:18:08,250 --> 00:18:10,310
real reason about it with curl I can

383
00:18:10,310 --> 00:18:12,990
give you the rock months instead of

384
00:18:12,990 --> 00:18:14,520
doing it through the browser which might

385
00:18:14,520 --> 00:18:17,850
adapt things so if I curl my about page

386
00:18:17,850 --> 00:18:21,840
I will get my about page fun but let's

387
00:18:21,840 --> 00:18:27,000
do path reversal so instead of this path

388
00:18:27,000 --> 00:18:28,650
reversal normally we would would be like

389
00:18:28,650 --> 00:18:31,800
put dot slash etc right and I can do

390
00:18:31,800 --> 00:18:33,420
this if for an infinite amount because

391
00:18:33,420 --> 00:18:36,000
if I do dot not slash in the root I will

392
00:18:36,000 --> 00:18:40,820
and I will be ending up in the root

393
00:18:40,820 --> 00:18:44,370
let's see what happens I will get

394
00:18:44,370 --> 00:18:48,540
redirected to my main page and that's

395
00:18:48,540 --> 00:18:51,090
reasonable because BST library is a real

396
00:18:51,090 --> 00:18:53,220
library and it checks for that dot dot

397
00:18:53,220 --> 00:18:58,980
slash pod but black lists so we need to

398
00:18:58,980 --> 00:19:04,130
be need to be a bit smarter any ideas

399
00:19:04,160 --> 00:19:06,020
sorry

400
00:19:06,020 --> 00:19:09,080
you are aligned coding okay what is the

401
00:19:09,080 --> 00:19:18,080
encoding for a dot screaming % 2e who

402
00:19:18,080 --> 00:19:21,380
said that are you a developer we are you

403
00:19:21,380 --> 00:19:22,880
secretly a hacker

404
00:19:22,880 --> 00:19:27,500
watch out for that man it is true

405
00:19:27,500 --> 00:19:30,710
because it's % to e its URL encoding for

406
00:19:30,710 --> 00:19:33,920
a dot and if I do this of course is a

407
00:19:33,920 --> 00:19:37,280
working on my local machine and I do

408
00:19:37,280 --> 00:19:40,220
this enough times I will get my root and

409
00:19:40,220 --> 00:19:43,400
I will see my stuff and yes you

410
00:19:43,400 --> 00:19:45,530
shouldn't be using this stuff or you

411
00:19:45,530 --> 00:19:47,179
shouldn't be running this stuff as a

412
00:19:47,179 --> 00:19:53,480
root admin but as a I would say that as

413
00:19:53,480 --> 00:19:55,910
a user within a certain way with certain

414
00:19:55,910 --> 00:20:01,070
limitations fair but look at the average

415
00:20:01,070 --> 00:20:03,380
company and how they run their docker

416
00:20:03,380 --> 00:20:07,670
containers just saying so if I go here

417
00:20:07,670 --> 00:20:12,620
and I go like to my and there's nothing

418
00:20:12,620 --> 00:20:17,090
in it of course but I can read my stuff

419
00:20:17,090 --> 00:20:18,050
over there and that's just the beginning

420
00:20:18,050 --> 00:20:20,270
because now I've got my entry point and

421
00:20:20,270 --> 00:20:23,240
I can snoop around which is fun right

422
00:20:23,240 --> 00:20:25,640
now I can see what's happening nobody in

423
00:20:25,640 --> 00:20:28,010
is in his in his good mind would

424
00:20:28,010 --> 00:20:31,400
actually put passwords in as fast WD

425
00:20:31,400 --> 00:20:33,620
file but still I can do something like

426
00:20:33,620 --> 00:20:39,980
this let me just say I will just break

427
00:20:39,980 --> 00:20:42,410
out of the public folder and what was it

428
00:20:42,410 --> 00:20:48,650
present - E - E and let's see what I am

429
00:20:48,650 --> 00:20:50,900
now that's cool because what I can do

430
00:20:50,900 --> 00:20:56,900
now is look at my package AJ so now I

431
00:20:56,900 --> 00:20:59,000
can see what kind of libraries you're

432
00:20:59,000 --> 00:21:01,040
using and with that knowledge I can go

433
00:21:01,040 --> 00:21:02,330
deeper and deeper and deeper and deeper

434
00:21:02,330 --> 00:21:07,190
for instance by insider' coincident that

435
00:21:07,190 --> 00:21:09,440
coincidentally I'm using this package

436
00:21:09,440 --> 00:21:13,660
which coincidentally is very vulnerable

437
00:21:13,960 --> 00:21:16,200
let's take a look at it

438
00:21:16,200 --> 00:21:22,940
who of you likes regular expressions

439
00:21:22,940 --> 00:21:26,369
nobody then the next question was

440
00:21:26,369 --> 00:21:28,799
normally is like who likes to read or

441
00:21:28,799 --> 00:21:30,919
debug other people's regular expressions

442
00:21:30,919 --> 00:21:34,320
no party right regular expression is one

443
00:21:34,320 --> 00:21:36,269
time is one time thing it's it's you

444
00:21:36,269 --> 00:21:36,480
right

445
00:21:36,480 --> 00:21:37,950
it's a right only thing like keep it to

446
00:21:37,950 --> 00:21:41,009
that so let's go back to that that thing

447
00:21:41,009 --> 00:21:43,379
how do you know how a regular expression

448
00:21:43,379 --> 00:21:45,899
works if I have something like this and

449
00:21:45,899 --> 00:21:52,100
I want to match that to this that works

450
00:21:52,100 --> 00:21:54,269
but how do you know that it works just

451
00:21:54,269 --> 00:21:56,340
use the plus this use the star just use

452
00:21:56,340 --> 00:21:57,840
the plus until halfway and then the star

453
00:21:57,840 --> 00:22:01,700
you basically have no idea it just works

454
00:22:01,700 --> 00:22:05,039
but what you know is if it doesn't match

455
00:22:05,039 --> 00:22:06,840
you go into some sort of backtracking

456
00:22:06,840 --> 00:22:09,659
moat and it tries basically all the

457
00:22:09,659 --> 00:22:11,309
possible strings and match that to the

458
00:22:11,309 --> 00:22:16,200
other string what if I can make that

459
00:22:16,200 --> 00:22:18,499
regular expression and that string as

460
00:22:18,499 --> 00:22:22,649
huge as possible then it will take a lot

461
00:22:22,649 --> 00:22:25,769
of computation power on how many threats

462
00:22:25,769 --> 00:22:30,269
does a node application work there can

463
00:22:30,269 --> 00:22:38,600
be only one let's look at that one so

464
00:22:38,980 --> 00:22:43,480
first of all I'm gonna show you that

465
00:22:43,480 --> 00:22:47,170
this works I will put in the text call

466
00:22:47,170 --> 00:22:49,420
mom in 20 minutes and I'll put it into

467
00:22:49,420 --> 00:22:53,670
that form using HTTP HTTP button so HTTP

468
00:22:53,670 --> 00:22:57,300
it was hard but doing this you will see

469
00:22:57,300 --> 00:23:00,550
that it does something like that 20 and

470
00:23:00,550 --> 00:23:03,340
that minutes and it will end up here as

471
00:23:03,340 --> 00:23:11,980
20m okay let's try this one what I'm

472
00:23:11,980 --> 00:23:14,560
going to do here is I'm going to try to

473
00:23:14,560 --> 00:23:18,640
buy milk and I will put down sixty

474
00:23:18,640 --> 00:23:21,730
thousand fives and match it up to

475
00:23:21,730 --> 00:23:25,680
minutes let's see how that works

476
00:23:25,680 --> 00:23:28,210
it would took slightly longer because

477
00:23:28,210 --> 00:23:30,550
it's quite a big expression but still

478
00:23:30,550 --> 00:23:34,800
comes back basically because it matches

479
00:23:34,800 --> 00:23:38,110
so if I look over there I see by milk in

480
00:23:38,110 --> 00:23:40,900
infinity days by then it's probably sour

481
00:23:40,900 --> 00:23:45,760
but fair enough I can do that what I

482
00:23:45,760 --> 00:23:48,370
want to go into the backtracking mode of

483
00:23:48,370 --> 00:23:50,860
a regular expression how should I do

484
00:23:50,860 --> 00:23:57,850
that any ideas well I told you I'm Dutch

485
00:23:57,850 --> 00:24:00,100
right so I misspelled fingers a lot

486
00:24:00,100 --> 00:24:02,470
luckily my colleagues my coworkers are

487
00:24:02,470 --> 00:24:07,300
English and they can correct me so if I

488
00:24:07,300 --> 00:24:08,710
make a mistake like this and it doesn't

489
00:24:08,710 --> 00:24:09,760
match two minutes anymore

490
00:24:09,760 --> 00:24:11,200
it doesn't match two hours two days

491
00:24:11,200 --> 00:24:16,570
whatever you'll see it hangs I come back

492
00:24:16,570 --> 00:24:20,110
to here try to type something I can slam

493
00:24:20,110 --> 00:24:21,790
the answer button as much as possible

494
00:24:21,790 --> 00:24:26,399
but it won't work until every single

495
00:24:27,240 --> 00:24:29,980
operation or every single possibility

496
00:24:29,980 --> 00:24:32,140
from that regular expression is checked

497
00:24:32,140 --> 00:24:35,740
and then the computation power is free

498
00:24:35,740 --> 00:24:37,750
again the thread is free and we can do

499
00:24:37,750 --> 00:24:38,640
the other request

500
00:24:38,640 --> 00:24:42,310
imagine that you only have this kind of

501
00:24:42,310 --> 00:24:44,440
website with this application running

502
00:24:44,440 --> 00:24:46,300
and you have two instances I just do

503
00:24:46,300 --> 00:24:47,850
this twice and the rest of the day

504
00:24:47,850 --> 00:24:49,830
you're done

505
00:24:49,830 --> 00:24:51,989
if I'm working for a web funder for an

506
00:24:51,989 --> 00:24:53,580
e-commerce platform and it's almost

507
00:24:53,580 --> 00:24:55,639
Black Friday and I can do this because

508
00:24:55,639 --> 00:24:58,350
Amazon there has this stuff in place I

509
00:24:58,350 --> 00:24:59,940
just do that and make sure that if

510
00:24:59,940 --> 00:25:02,369
everybody comes to my website is their

511
00:25:02,369 --> 00:25:04,320
stead of yours we call this a regular

512
00:25:04,320 --> 00:25:07,049
expression and aisle service who view

513
00:25:07,049 --> 00:25:11,429
works on the cloud more normally on the

514
00:25:11,429 --> 00:25:13,350
cloud you might have elastic scaling

515
00:25:13,350 --> 00:25:18,419
right so it is not a problem but a new

516
00:25:18,419 --> 00:25:20,309
one pops up and a new one pops up and a

517
00:25:20,309 --> 00:25:21,989
new one pops up and you want pops up

518
00:25:21,989 --> 00:25:25,289
that is a denial of pocket money because

519
00:25:25,289 --> 00:25:27,989
I will just drain your fundings so

520
00:25:27,989 --> 00:25:30,239
denial of service main might not be a

521
00:25:30,239 --> 00:25:34,590
heck but it's still a problem okay it is

522
00:25:34,590 --> 00:25:36,749
easy to make fun of node right but let's

523
00:25:36,749 --> 00:25:38,779
make a bit little bit more fun of Java

524
00:25:38,779 --> 00:25:41,159
so we had this application I already

525
00:25:41,159 --> 00:25:44,369
showed you and let me see if it's still

526
00:25:44,369 --> 00:25:46,129
there it's still there let me sign in oh

527
00:25:46,129 --> 00:25:48,600
no let me sign up I don't know my

528
00:25:48,600 --> 00:25:50,609
password anymore so I sign up it's a new

529
00:25:50,609 --> 00:25:53,789
instance anyway so I will use my name my

530
00:25:53,789 --> 00:25:57,600
email address 1 2 3 4 5 6 this is a

531
00:25:57,600 --> 00:25:59,159
really secure password

532
00:25:59,159 --> 00:26:04,470
I heard 1 2 3 4 5 6 you and I mean no

533
00:26:04,470 --> 00:26:06,539
don't save that one it's not good and

534
00:26:06,539 --> 00:26:09,899
again this is a to-do application we

535
00:26:09,899 --> 00:26:12,539
need to do things so what I can do over

536
00:26:12,539 --> 00:26:17,389
here is say something like this eat pie

537
00:26:17,389 --> 00:26:21,179
put it somewhere in 1997 T which is very

538
00:26:21,179 --> 00:26:24,859
reasonable and make that a high priority

539
00:26:24,859 --> 00:26:28,350
if I call this you will see it comes

540
00:26:28,350 --> 00:26:31,580
back over here and that pie sign is

541
00:26:31,580 --> 00:26:35,609
changed into an ASCII representation so

542
00:26:35,609 --> 00:26:38,309
I know for a fact that every label over

543
00:26:38,309 --> 00:26:39,989
here goes to the native to ASCII

544
00:26:39,989 --> 00:26:44,359
function that is part of the native JK

545
00:26:44,359 --> 00:26:48,600
well that's fun what I can do is well

546
00:26:48,600 --> 00:26:51,899
over here is I can upload files what I

547
00:26:51,899 --> 00:26:53,460
can upload over here is I can upload zip

548
00:26:53,460 --> 00:26:57,809
files and it unzips but what if I'm

549
00:26:57,809 --> 00:26:59,820
using a library for that because in Java

550
00:26:59,820 --> 00:27:01,799
there is no such thing as an unzip

551
00:27:01,799 --> 00:27:02,880
function

552
00:27:02,880 --> 00:27:05,009
in the JDK available or natively

553
00:27:05,009 --> 00:27:06,210
available but we've got the building

554
00:27:06,210 --> 00:27:11,159
blocks to do so say I want to do

555
00:27:11,159 --> 00:27:14,820
something like this okay

556
00:27:14,820 --> 00:27:17,279
I asked you to remember something you

557
00:27:17,279 --> 00:27:21,899
know what yeah the home folder of the

558
00:27:21,899 --> 00:27:25,200
JDK on my Hiroko instance watch this I

559
00:27:25,200 --> 00:27:28,740
have a zip file over here like the

560
00:27:28,740 --> 00:27:31,380
bottom line says zip slip that's it okay

561
00:27:31,380 --> 00:27:37,909
so let me take a look at that zip file

562
00:27:40,669 --> 00:27:43,919
this if far contains two files a good

563
00:27:43,919 --> 00:27:48,600
text and a file called dot slash dot dot

564
00:27:48,600 --> 00:27:51,149
slash dot dot slash dot dot slash etc

565
00:27:51,149 --> 00:27:55,860
etc etc slash app slash JDK which is the

566
00:27:55,860 --> 00:27:58,769
JDK path of my hero coincidence slash

567
00:27:58,769 --> 00:28:02,610
bin slash native to ASCII and I know

568
00:28:02,610 --> 00:28:04,860
that that pie sign was translated into

569
00:28:04,860 --> 00:28:07,740
an ASCII representation what I try to do

570
00:28:07,740 --> 00:28:10,649
here is but unzipping it with a library

571
00:28:10,649 --> 00:28:14,340
that is dead that I know for a fact may

572
00:28:14,340 --> 00:28:17,850
or may not look at my path or check my

573
00:28:17,850 --> 00:28:21,870
path and if I insert this one and it

574
00:28:21,870 --> 00:28:25,860
well simply looks at the path takes the

575
00:28:25,860 --> 00:28:28,519
filename put these two together and

576
00:28:28,519 --> 00:28:32,610
executes then I might overwrite the

577
00:28:32,610 --> 00:28:35,730
native JDK function let's see if that

578
00:28:35,730 --> 00:28:40,259
works so I'm choosing a file over here

579
00:28:40,259 --> 00:28:46,399
and I have it over here demo yeah I

580
00:28:46,399 --> 00:28:48,870
opened that zip slipknot zip and I

581
00:28:48,870 --> 00:28:51,539
upload it and what you see is that in

582
00:28:51,539 --> 00:28:53,299
the public folder while I expect my

583
00:28:53,299 --> 00:28:55,649
unzipped files to be there is that good

584
00:28:55,649 --> 00:29:00,029
text ok that can mean two things it

585
00:29:00,029 --> 00:29:03,840
unzipped so it can like it executed that

586
00:29:03,840 --> 00:29:05,970
dot dot slash that path reversal or it

587
00:29:05,970 --> 00:29:08,240
ignored it and swallowed the exception

588
00:29:08,240 --> 00:29:11,789
either way it's not very good I expect

589
00:29:11,789 --> 00:29:15,149
it to give me some answers but let's see

590
00:29:15,149 --> 00:29:17,190
what happened because if I'm creating it

591
00:29:17,190 --> 00:29:23,730
do and I say hello def second put it

592
00:29:23,730 --> 00:29:27,450
into the second of Marfa bruh weary in

593
00:29:27,450 --> 00:29:28,980
ninety seventy give it a medium priority

594
00:29:28,980 --> 00:29:32,400
you will see that my native to ASCII

595
00:29:32,400 --> 00:29:35,910
file translated into mu haha gotchu why

596
00:29:35,910 --> 00:29:38,250
that native to actually sq file I over

597
00:29:38,250 --> 00:29:42,090
over it it with echo moo-ha-ha gotcha

598
00:29:42,090 --> 00:29:44,250
so basically what I did is because I'm

599
00:29:44,250 --> 00:29:46,740
using the room because I'm simply using

600
00:29:46,740 --> 00:29:48,090
the wrong library or the wrong version

601
00:29:48,090 --> 00:29:50,040
of the library that doesn't check for my

602
00:29:50,040 --> 00:29:52,290
canonical path but just basically takes

603
00:29:52,290 --> 00:29:54,630
the path and executes sit I'm able to

604
00:29:54,630 --> 00:29:57,960
override stuff that is natively dare on

605
00:29:57,960 --> 00:30:04,320
my Heroku instance sounds fun so what I

606
00:30:04,320 --> 00:30:06,120
want to try to say over here is is that

607
00:30:06,120 --> 00:30:11,010
if you are using libraries you should be

608
00:30:11,010 --> 00:30:13,470
aware of what you're using right if you

609
00:30:13,470 --> 00:30:17,190
blindly use stuff you should be aware of

610
00:30:17,190 --> 00:30:19,260
what you're using and if this is for

611
00:30:19,260 --> 00:30:23,220
neural or not but okay what is the

612
00:30:23,220 --> 00:30:25,320
solution well who was at the keynote

613
00:30:25,320 --> 00:30:30,270
here this morning first of all and

614
00:30:30,270 --> 00:30:32,190
that's I think you should start with

615
00:30:32,190 --> 00:30:35,100
this it's team culture or company

616
00:30:35,100 --> 00:30:37,610
culture and that's the hardest one I

617
00:30:37,610 --> 00:30:39,900
mean we work with a lot of different

618
00:30:39,900 --> 00:30:41,970
people in a team or in a company we work

619
00:30:41,970 --> 00:30:43,440
with developers and we want to build

620
00:30:43,440 --> 00:30:45,960
things we want to deliver stuff we want

621
00:30:45,960 --> 00:30:48,690
to make sure that new features come up

622
00:30:48,690 --> 00:30:50,730
if they're there we ship it and we get

623
00:30:50,730 --> 00:30:55,560
focus on another problem old-fashioned

624
00:30:55,560 --> 00:30:59,130
security engineers don't care if it

625
00:30:59,130 --> 00:31:01,560
works they just want it to be secure

626
00:31:01,560 --> 00:31:05,370
that you're not breached operational

627
00:31:05,370 --> 00:31:07,430
people and I'm talking about

628
00:31:07,430 --> 00:31:09,600
old-fashioned operational siloed

629
00:31:09,600 --> 00:31:11,820
operations they care about that stuff is

630
00:31:11,820 --> 00:31:14,460
maintainable that if they get called 3

631
00:31:14,460 --> 00:31:16,110
a.m. in the morning that you just have

632
00:31:16,110 --> 00:31:19,320
to push the button then it resets and it

633
00:31:19,320 --> 00:31:21,270
might work because they can go back to

634
00:31:21,270 --> 00:31:24,420
sleep and management what do management

635
00:31:24,420 --> 00:31:26,780
care about

636
00:31:26,940 --> 00:31:31,239
basically about profit and they push you

637
00:31:31,239 --> 00:31:33,009
on the fact that you need to get that

638
00:31:33,009 --> 00:31:35,409
new feature out before the competitor

639
00:31:35,409 --> 00:31:39,489
does so if we think in a security

640
00:31:39,489 --> 00:31:41,739
mindset and we all take that into

641
00:31:41,739 --> 00:31:45,100
account we need to make sure that we're

642
00:31:45,100 --> 00:31:47,830
on the same page if we're all on the

643
00:31:47,830 --> 00:31:50,139
same we all have the same mindset that

644
00:31:50,139 --> 00:31:52,450
security is an important thing then we

645
00:31:52,450 --> 00:31:55,330
can continue with a journey because the

646
00:31:55,330 --> 00:31:59,999
second thing is process if I ask a

647
00:31:59,999 --> 00:32:03,460
regular client a crowd do you want

648
00:32:03,460 --> 00:32:05,499
change everybody screams yes we want

649
00:32:05,499 --> 00:32:08,559
change but do you want to change you

650
00:32:08,559 --> 00:32:10,149
might say yes but at the end you just

651
00:32:10,149 --> 00:32:13,029
you say no because adding extra process

652
00:32:13,029 --> 00:32:15,429
will not work it might work if you just

653
00:32:15,429 --> 00:32:17,019
got breached and there is that

654
00:32:17,019 --> 00:32:18,609
magnifying glass and people looking at

655
00:32:18,609 --> 00:32:20,710
every inch you take then you might do

656
00:32:20,710 --> 00:32:23,229
some extra work because well people

657
00:32:23,229 --> 00:32:26,679
looking at you but in the end you come

658
00:32:26,679 --> 00:32:29,139
back to that normal routine and you

659
00:32:29,139 --> 00:32:31,450
start losing it you start just looking

660
00:32:31,450 --> 00:32:34,269
at your features again but what if we

661
00:32:34,269 --> 00:32:38,769
can take that security mindset and make

662
00:32:38,769 --> 00:32:40,840
it non intrusive in our processes make

663
00:32:40,840 --> 00:32:42,849
it blend into the process we already

664
00:32:42,849 --> 00:32:46,809
have not add extra process what if we

665
00:32:46,809 --> 00:32:49,840
can do that with a push of a button what

666
00:32:49,840 --> 00:32:52,419
if we can do that automatically and it

667
00:32:52,419 --> 00:32:54,759
saves you a lot instead of here you got

668
00:32:54,759 --> 00:32:56,529
the spreadsheet and you need to do a pen

669
00:32:56,529 --> 00:33:00,009
test every time you want to release

670
00:33:00,009 --> 00:33:03,309
because debt doesn't work and then comes

671
00:33:03,309 --> 00:33:05,019
the third thing in place and of course

672
00:33:05,019 --> 00:33:07,299
that's tooling you need to choose the

673
00:33:07,299 --> 00:33:10,119
right tooling that helps you out and it

674
00:33:10,119 --> 00:33:14,649
sounds obvious but we need to automate

675
00:33:14,649 --> 00:33:18,999
as much as possible for instance say we

676
00:33:18,999 --> 00:33:21,639
have our development pipeline and I

677
00:33:21,639 --> 00:33:23,440
don't mean your CI pipeline I mean the

678
00:33:23,440 --> 00:33:25,389
whole development pipeline from left to

679
00:33:25,389 --> 00:33:28,899
right and by left I mean you left this

680
00:33:28,899 --> 00:33:31,570
part for you sorry coding on your local

681
00:33:31,570 --> 00:33:34,850
machine right means production

682
00:33:34,850 --> 00:33:38,899
why not test on your local machine why

683
00:33:38,899 --> 00:33:41,389
not if I have the power to do that with

684
00:33:41,389 --> 00:33:44,929
tooling that I can scan if something is

685
00:33:44,929 --> 00:33:47,210
wrong and it gives me actionable results

686
00:33:47,210 --> 00:33:49,700
like hey you're using this library if

687
00:33:49,700 --> 00:33:53,210
you update a minor version you got rid

688
00:33:53,210 --> 00:33:55,309
of it for the developer that is

689
00:33:55,309 --> 00:33:58,429
actionable result before entering the

690
00:33:58,429 --> 00:34:01,820
stuff into your git repo but okay that's

691
00:34:01,820 --> 00:34:04,429
one thing because if I put it into my

692
00:34:04,429 --> 00:34:06,259
package to JSON or in my pom file or

693
00:34:06,259 --> 00:34:08,359
whatever thing you use I want to be sure

694
00:34:08,359 --> 00:34:12,440
that it's there if I push my stuff to my

695
00:34:12,440 --> 00:34:15,199
want to push my stuff to my master

696
00:34:15,199 --> 00:34:18,800
branch to my remote master branch I used

697
00:34:18,800 --> 00:34:21,319
to or I first call my unit test to see

698
00:34:21,319 --> 00:34:22,879
if it something works why not do the

699
00:34:22,879 --> 00:34:24,379
same thing with checking your

700
00:34:24,379 --> 00:34:27,800
dependencies and then you're in your

701
00:34:27,800 --> 00:34:30,349
repository why not scan that on a daily

702
00:34:30,349 --> 00:34:32,629
basis because it's there and get

703
00:34:32,629 --> 00:34:36,079
automatic pull requests say we have a

704
00:34:36,079 --> 00:34:38,480
new version of this out and that doesn't

705
00:34:38,480 --> 00:34:40,569
have the vulnerability you already have

706
00:34:40,569 --> 00:34:43,190
or if you're comfortable with a level of

707
00:34:43,190 --> 00:34:45,230
vulnerabilities just make sure you're

708
00:34:45,230 --> 00:34:46,819
not getting worse

709
00:34:46,819 --> 00:34:49,909
so every pull request that comes in scan

710
00:34:49,909 --> 00:34:52,310
that and get actively notified that

711
00:34:52,310 --> 00:34:54,079
saves you a lot of hassle by doing that

712
00:34:54,079 --> 00:34:58,069
manually right then of course your CI

713
00:34:58,069 --> 00:35:01,430
pipeline that is if somebody has

714
00:35:01,430 --> 00:35:03,680
security tooling in place most of the

715
00:35:03,680 --> 00:35:05,089
time it's there it's there as a

716
00:35:05,089 --> 00:35:07,670
gatekeeper if it's there in your CI

717
00:35:07,670 --> 00:35:10,040
pipeline it builds perfect then we're

718
00:35:10,040 --> 00:35:13,550
done right we do need to Det the

719
00:35:13,550 --> 00:35:15,230
gatekeeper before we go into production

720
00:35:15,230 --> 00:35:19,069
it's true we still need to use that but

721
00:35:19,069 --> 00:35:20,750
all the parts before that you need to do

722
00:35:20,750 --> 00:35:22,490
as well so that part as the gatekeeper

723
00:35:22,490 --> 00:35:24,130
it has come to add a gatekeeper point

724
00:35:24,130 --> 00:35:26,780
you will not be slammed into your face

725
00:35:26,780 --> 00:35:30,010
like but it's wrong

726
00:35:30,680 --> 00:35:32,420
okay we're there and then we're in

727
00:35:32,420 --> 00:35:34,819
production and never done right it's out

728
00:35:34,819 --> 00:35:40,099
safe let's leave it it can take up to

729
00:35:40,099 --> 00:35:42,920
two and a half years remember so why not

730
00:35:42,920 --> 00:35:47,089
just make a snapshot of your stage when

731
00:35:47,089 --> 00:35:48,200
you keep when you went into production

732
00:35:48,200 --> 00:35:50,930
and scan that snapshot on a daily basis

733
00:35:50,930 --> 00:35:54,289
and if the vulnerability is found and is

734
00:35:54,289 --> 00:35:58,819
closed and in well or our library or the

735
00:35:58,819 --> 00:35:59,420
CVE

736
00:35:59,420 --> 00:36:02,630
library or whatever get actively pinked

737
00:36:02,630 --> 00:36:05,299
on that if you automate all these things

738
00:36:05,299 --> 00:36:09,619
and you shift as left as possible so do

739
00:36:09,619 --> 00:36:12,289
it on the right but every step on the

740
00:36:12,289 --> 00:36:16,730
way do it to the left and it's quite

741
00:36:16,730 --> 00:36:19,339
easy to be honest and it's not that

742
00:36:19,339 --> 00:36:22,460
intrusive as possible I mean I can say

743
00:36:22,460 --> 00:36:24,859
this on a developer conference or a

744
00:36:24,859 --> 00:36:26,359
developer conference like a Java

745
00:36:26,359 --> 00:36:28,460
conference or a note conference and we

746
00:36:28,460 --> 00:36:30,410
say shift security left but you already

747
00:36:30,410 --> 00:36:33,410
know that you know what that means start

748
00:36:33,410 --> 00:36:35,240
from your local machine and in

749
00:36:35,240 --> 00:36:38,390
production and keep on continuing make

750
00:36:38,390 --> 00:36:40,910
sure that if you develop something that

751
00:36:40,910 --> 00:36:44,059
you will not regress you need to design

752
00:36:44,059 --> 00:36:47,089
to be compromised because it's not if

753
00:36:47,089 --> 00:36:48,529
you're compromised when you get

754
00:36:48,529 --> 00:36:52,430
compromised if you want to learn more

755
00:36:52,430 --> 00:36:54,770
about the stuff that yellow order that

756
00:36:54,770 --> 00:36:57,200
that dot in the middle that's your own

757
00:36:57,200 --> 00:36:59,359
code we wrote a few cheat sheets that

758
00:36:59,359 --> 00:37:02,059
can help you with code reviewing or a

759
00:37:02,059 --> 00:37:04,430
writing secure code but the majority of

760
00:37:04,430 --> 00:37:06,910
your code is not yours

761
00:37:06,910 --> 00:37:11,079
please automate scanning in that pace

762
00:37:11,079 --> 00:37:15,170
did was my talk I think I had a few

763
00:37:15,170 --> 00:37:18,170
minutes left for questions are there any

764
00:37:18,170 --> 00:37:20,410
questions

765
00:37:21,050 --> 00:37:23,720
or do you want to see another hack got a

766
00:37:23,720 --> 00:37:27,620
few in place you want to see another

767
00:37:27,620 --> 00:37:30,410
hack is anybody out there wants to see

768
00:37:30,410 --> 00:37:34,820
another hack okay come on requests

769
00:37:34,820 --> 00:37:38,930
driven development right so I got one

770
00:37:38,930 --> 00:37:40,700
here and this call it this one is a

771
00:37:40,700 --> 00:37:42,950
spring application and it spring

772
00:37:42,950 --> 00:37:45,380
application doesn't do much it's just a

773
00:37:45,380 --> 00:37:48,320
grocery list right beans for 50p milk

774
00:37:48,320 --> 00:37:52,820
for one one pound or nine etc etc the

775
00:37:52,820 --> 00:37:54,530
items itself are not important as well

776
00:37:54,530 --> 00:37:57,050
because it's just the name a cost and

777
00:37:57,050 --> 00:38:00,140
some getters and setters but my

778
00:38:00,140 --> 00:38:02,120
repository in spring that's the fun part

779
00:38:02,120 --> 00:38:06,940
because if I extend my repository with

780
00:38:06,940 --> 00:38:09,770
repository I do not have to write this

781
00:38:09,770 --> 00:38:12,830
stuff it generates it for me by naming

782
00:38:12,830 --> 00:38:15,140
convention things like frying by cost

783
00:38:15,140 --> 00:38:17,840
and find by name will automatically be

784
00:38:17,840 --> 00:38:20,600
there by just calling the right by just

785
00:38:20,600 --> 00:38:22,790
naming the right interfaces that is

786
00:38:22,790 --> 00:38:24,440
convenient because I do not want to take

787
00:38:24,440 --> 00:38:26,150
care of that I want to take care of

788
00:38:26,150 --> 00:38:29,560
business value or business intelligence

789
00:38:29,560 --> 00:38:32,440
the other fun part is this annotation

790
00:38:32,440 --> 00:38:37,460
that can transform my crud repo into a

791
00:38:37,460 --> 00:38:40,910
rest endpoint just by that which again

792
00:38:40,910 --> 00:38:42,590
is very convenient because now I can

793
00:38:42,590 --> 00:38:45,530
focus on my front end right let's run

794
00:38:45,530 --> 00:38:48,860
this one so now I have to pray to the

795
00:38:48,860 --> 00:38:51,260
demo gods if this one will spin up

796
00:38:51,260 --> 00:38:55,460
hopefully Oh demo gods please yes thank

797
00:38:55,460 --> 00:39:03,800
you so going to localhost 8080 you will

798
00:39:03,800 --> 00:39:05,330
see my hell browser and hell browser is

799
00:39:05,330 --> 00:39:06,710
just another dependency just to show you

800
00:39:06,710 --> 00:39:09,050
that I can do a few things first of all

801
00:39:09,050 --> 00:39:13,670
if I call items you will see all the

802
00:39:13,670 --> 00:39:16,580
items in my grocery list beans milk

803
00:39:16,580 --> 00:39:20,900
bread etc I can call items dot one

804
00:39:20,900 --> 00:39:23,570
animal to give me my first item in the

805
00:39:23,570 --> 00:39:25,340
list cool is he said these are just

806
00:39:25,340 --> 00:39:28,400
endpoints I can call that find things I

807
00:39:28,400 --> 00:39:32,000
find by name and name is beer by calling

808
00:39:32,000 --> 00:39:33,650
this you will see I've only get beer

809
00:39:33,650 --> 00:39:36,980
fine but there's a problem in this thing

810
00:39:36,980 --> 00:39:39,940
of course or else I wouldn't show you so

811
00:39:39,940 --> 00:39:44,859
what I can do with this I can call a

812
00:39:44,859 --> 00:39:48,200
batch request and I can insert it a

813
00:39:48,200 --> 00:39:52,269
certain well piece of JSON in the body

814
00:39:52,269 --> 00:40:02,630
not found sure yeah there you see it let

815
00:40:02,630 --> 00:40:04,549
me just do that again and it large it a

816
00:40:04,549 --> 00:40:09,380
bit in spring they also have an

817
00:40:09,380 --> 00:40:11,210
expression language spel

818
00:40:11,210 --> 00:40:14,119
spring expression language and basically

819
00:40:14,119 --> 00:40:16,279
this is some sort of the same hack as we

820
00:40:16,279 --> 00:40:18,380
did with the Apache struts one because

821
00:40:18,380 --> 00:40:22,970
what I do here is I will simply get to

822
00:40:22,970 --> 00:40:27,019
run time and I execute a command I wire

823
00:40:27,019 --> 00:40:29,480
it via an input stream to an output

824
00:40:29,480 --> 00:40:34,339
stream and again I can call any thing

825
00:40:34,339 --> 00:40:39,109
any command that is available on my

826
00:40:39,109 --> 00:40:43,039
Linux distro at this point so but doing

827
00:40:43,039 --> 00:40:44,960
this and this is what Apache struts

828
00:40:44,960 --> 00:40:48,019
struts to is an old thing but this is

829
00:40:48,019 --> 00:40:50,390
still quite heavily used

830
00:40:50,390 --> 00:40:53,960
hopefully not this version new so if I'm

831
00:40:53,960 --> 00:40:58,160
going to look at the spring rest

832
00:40:58,160 --> 00:40:59,930
exploits and I again I call the

833
00:40:59,930 --> 00:41:02,739
environment variables

834
00:41:05,340 --> 00:41:08,880
I will do a curl patch commands with a

835
00:41:08,880 --> 00:41:14,400
certain content type and this JSON as a

836
00:41:14,400 --> 00:41:16,920
body I will call it to my local House

837
00:41:16,920 --> 00:41:19,050
student and items one that that end

838
00:41:19,050 --> 00:41:21,870
point was there just to give me my first

839
00:41:21,870 --> 00:41:25,590
item so normally in a normal way if I

840
00:41:25,590 --> 00:41:29,910
normally test it it doesn't stop but I

841
00:41:29,910 --> 00:41:33,000
can utilize this end point by inserting

842
00:41:33,000 --> 00:41:36,930
this body and getting the environment

843
00:41:36,930 --> 00:41:39,230
viable variables of my local instance

844
00:41:39,230 --> 00:41:42,540
again I didn't think of this before I

845
00:41:42,540 --> 00:41:45,180
was working for a security company but

846
00:41:45,180 --> 00:41:48,600
now I see that some things don't seem

847
00:41:48,600 --> 00:41:52,140
obvious but if you if somebody found out

848
00:41:52,140 --> 00:41:54,210
and found out to do this publish this on

849
00:41:54,210 --> 00:41:57,000
the internet or whatever then it's just

850
00:41:57,000 --> 00:42:00,810
hunting season and people can use it ok

851
00:42:00,810 --> 00:42:02,430
this was the last one are there any

852
00:42:02,430 --> 00:42:06,480
questions left then I want to thank you

853
00:42:06,480 --> 00:42:07,650
and I hoped you enjoyed the conference

854
00:42:07,650 --> 00:42:08,660
thank you so much

855
00:42:08,660 --> 00:42:14,089
[Applause]

