1
00:00:00,089 --> 00:00:01,949
can everyone yeah I guess I've learned

2
00:00:01,949 --> 00:00:04,470
can hear me perfect so my name is

3
00:00:04,470 --> 00:00:06,629
mittens Avery I'm senior solutions

4
00:00:06,629 --> 00:00:08,039
architect at silent type

5
00:00:08,039 --> 00:00:10,830
I've been in I guess you could say

6
00:00:10,830 --> 00:00:14,480
software right for about 18 years now

7
00:00:14,480 --> 00:00:17,369
started from every pretty role pretty

8
00:00:17,369 --> 00:00:18,990
much every role you can think of test

9
00:00:18,990 --> 00:00:24,750
integration developer security kind of

10
00:00:24,750 --> 00:00:26,070
all across the whole software

11
00:00:26,070 --> 00:00:28,859
development lifecycle what I me to talk

12
00:00:28,859 --> 00:00:30,960
to you today about is open-source

13
00:00:30,960 --> 00:00:33,360
developers and how they effectively are

14
00:00:33,360 --> 00:00:36,270
the front line of your I guess your

15
00:00:36,270 --> 00:00:39,300
security and everything you can do to

16
00:00:39,300 --> 00:00:40,980
kind of protect yourself against some of

17
00:00:40,980 --> 00:00:43,050
these potential software supply chain

18
00:00:43,050 --> 00:00:49,950
attacks that you see these days so some

19
00:00:49,950 --> 00:00:52,379
type develop a report every year it's

20
00:00:52,379 --> 00:00:53,489
called the state of the software supply

21
00:00:53,489 --> 00:00:55,980
chain I would highly encourage you to go

22
00:00:55,980 --> 00:00:57,449
and have a look at this download this if

23
00:00:57,449 --> 00:01:00,359
you can it's obviously free but it gives

24
00:01:00,359 --> 00:01:02,640
you some really interesting information

25
00:01:02,640 --> 00:01:05,670
around open-source security what the

26
00:01:05,670 --> 00:01:07,560
open-source eco landscape looks like at

27
00:01:07,560 --> 00:01:09,600
the moment what's happening what do we

28
00:01:09,600 --> 00:01:12,780
see in that space and some really

29
00:01:12,780 --> 00:01:14,280
interesting facts inside of there around

30
00:01:14,280 --> 00:01:17,220
the ecosystems the vulnerabilities that

31
00:01:17,220 --> 00:01:19,320
exist inside of there some of the

32
00:01:19,320 --> 00:01:20,580
challenges that they're facing as well

33
00:01:20,580 --> 00:01:23,070
so definitely go have a look at that if

34
00:01:23,070 --> 00:01:27,000
you can so let's get started so a lot of

35
00:01:27,000 --> 00:01:29,759
organizations use open source right

36
00:01:29,759 --> 00:01:31,829
either this is known fact or this is an

37
00:01:31,829 --> 00:01:34,439
honor in fact but effectively they're

38
00:01:34,439 --> 00:01:37,710
using open source libraries from various

39
00:01:37,710 --> 00:01:39,210
ecosystems most of the banking

40
00:01:39,210 --> 00:01:40,979
frameworks are Java frameworks and

41
00:01:40,979 --> 00:01:42,270
obviously there's a lot of Java

42
00:01:42,270 --> 00:01:43,829
downloads and you can see actually last

43
00:01:43,829 --> 00:01:46,350
year in itself in 2018 they were close

44
00:01:46,350 --> 00:01:49,710
to 150 billion downloads a yeah now

45
00:01:49,710 --> 00:01:51,899
there are several other ecosystems out

46
00:01:51,899 --> 00:01:53,610
there if you take another example you

47
00:01:53,610 --> 00:01:56,759
look at javascript javascript has almost

48
00:01:56,759 --> 00:02:00,060
that number of downloads in a week okay

49
00:02:00,060 --> 00:02:03,030
so effectively from 2013 to learn and

50
00:02:03,030 --> 00:02:05,219
you can see the increase of npm

51
00:02:05,219 --> 00:02:07,649
javascript downloads okay so this

52
00:02:07,649 --> 00:02:11,340
ecosystem around open source is getting

53
00:02:11,340 --> 00:02:13,650
very very big only recently

54
00:02:13,650 --> 00:02:15,720
there was a publication or blog online

55
00:02:15,720 --> 00:02:18,659
about github and how Python has now

56
00:02:18,659 --> 00:02:22,049
become the biggest language in the

57
00:02:22,049 --> 00:02:26,760
github world in a github ecosystem what

58
00:02:26,760 --> 00:02:30,000
you may or may not know or you may know

59
00:02:30,000 --> 00:02:32,489
right being sort of developers or

60
00:02:32,489 --> 00:02:36,599
security professionals 80 to 90% of your

61
00:02:36,599 --> 00:02:40,379
application is actually brought in by

62
00:02:40,379 --> 00:02:43,560
your open source components so if you

63
00:02:43,560 --> 00:02:45,359
are using any of the ecosystems like

64
00:02:45,359 --> 00:02:48,829
Ruby and p.m. docker for example right

65
00:02:48,829 --> 00:02:50,639
JavaScript NuGet or any of these

66
00:02:50,639 --> 00:02:53,010
different ecosystems a lot of that is

67
00:02:53,010 --> 00:02:55,379
open source components that are shared

68
00:02:55,379 --> 00:02:57,329
to the developers they're there for you

69
00:02:57,329 --> 00:02:59,849
to use they're free it's amazing right

70
00:02:59,849 --> 00:03:02,639
and this is brought in into your

71
00:03:02,639 --> 00:03:04,799
environment enterprise's use open source

72
00:03:04,799 --> 00:03:06,720
small organizations small medium

73
00:03:06,720 --> 00:03:10,260
organizations use them as well so what's

74
00:03:10,260 --> 00:03:13,709
the problem with this so let's look a

75
00:03:13,709 --> 00:03:15,450
look the kind of the economics of

76
00:03:15,450 --> 00:03:18,959
cybercrime okay at one point in the

77
00:03:18,959 --> 00:03:23,730
world cybercrime was a very small little

78
00:03:23,730 --> 00:03:25,609
thing okay

79
00:03:25,609 --> 00:03:28,319
organized crime the drugs industry if

80
00:03:28,319 --> 00:03:30,060
you look at this that's four hundred

81
00:03:30,060 --> 00:03:32,730
thirty five billion dollars okay that

82
00:03:32,730 --> 00:03:35,159
these organized crime syndicates made in

83
00:03:35,159 --> 00:03:39,599
a yet organized cybercrime on the other

84
00:03:39,599 --> 00:03:42,000
hand was four hundred and fifty billion

85
00:03:42,000 --> 00:03:42,859
dollars

86
00:03:42,859 --> 00:03:47,220
so both organized crime one around

87
00:03:47,220 --> 00:03:50,280
software one around drugs so here's a

88
00:03:50,280 --> 00:03:53,120
couple of questions for you

89
00:03:54,159 --> 00:03:56,569
organized crime is one of the most

90
00:03:56,569 --> 00:03:59,060
profitable industries in the world at

91
00:03:59,060 --> 00:04:04,099
the moment who do you think has the

92
00:04:04,099 --> 00:04:08,659
least risk of being captured which of

93
00:04:08,659 --> 00:04:10,790
those criminals has the least risk well

94
00:04:10,790 --> 00:04:14,930
cybercrime which ones growing the

95
00:04:14,930 --> 00:04:19,209
fastest cybercrime

96
00:04:20,730 --> 00:04:22,440
which one's the hardest to prosecute

97
00:04:22,440 --> 00:04:25,380
against cybercrime so you kind of get

98
00:04:25,380 --> 00:04:26,640
the gist right you know where I'm going

99
00:04:26,640 --> 00:04:31,460
with this right so you have a huge

100
00:04:31,460 --> 00:04:33,930
industry of software with open source

101
00:04:33,930 --> 00:04:36,060
and actually the easiest ways to target

102
00:04:36,060 --> 00:04:38,520
and use and expose this kind of

103
00:04:38,520 --> 00:04:39,810
cybercrime is actually through open

104
00:04:39,810 --> 00:04:42,300
source so if we look at how that's

105
00:04:42,300 --> 00:04:45,810
growing organized crime around drugs is

106
00:04:45,810 --> 00:04:47,580
not a growing industry cybercrime is

107
00:04:47,580 --> 00:04:48,750
actually a growing industry and you'll

108
00:04:48,750 --> 00:04:50,460
see based on their sort of economics and

109
00:04:50,460 --> 00:04:51,540
some of the statistics that we've

110
00:04:51,540 --> 00:04:54,000
captured over the time cybercrime has

111
00:04:54,000 --> 00:04:57,120
grown quite exponentially over the past

112
00:04:57,120 --> 00:04:58,110
ten years

113
00:04:58,110 --> 00:05:02,810
yeah crypto mining cryptocurrency etc

114
00:05:02,810 --> 00:05:08,580
that is effectively $800 per individual

115
00:05:08,580 --> 00:05:14,810
on this planet that's a lot of money and

116
00:05:14,810 --> 00:05:16,860
at this moment in time

117
00:05:16,860 --> 00:05:19,050
you've probably heard across all of the

118
00:05:19,050 --> 00:05:21,530
media outlets and you know organized

119
00:05:21,530 --> 00:05:25,320
state-sponsored crime right this is

120
00:05:25,320 --> 00:05:27,240
actually a reality of the world that we

121
00:05:27,240 --> 00:05:30,740
live in at the moment North Korea

122
00:05:30,740 --> 00:05:34,650
publicly invests in two state-funded

123
00:05:34,650 --> 00:05:37,830
attacks right that is quite obvious

124
00:05:37,830 --> 00:05:40,290
we've seen that a lot in the news the

125
00:05:40,290 --> 00:05:43,050
top right one you won't really know that

126
00:05:43,050 --> 00:05:46,410
is actually an interesting map of all of

127
00:05:46,410 --> 00:05:49,080
the libraries that have been used by

128
00:05:49,080 --> 00:05:53,070
Russia so what it's there to prove is

129
00:05:53,070 --> 00:05:56,310
really the correlation between all of

130
00:05:56,310 --> 00:05:57,620
the different libraries that are used

131
00:05:57,620 --> 00:06:00,780
within kind of the Russian state and how

132
00:06:00,780 --> 00:06:02,850
they're linked together and actually you

133
00:06:02,850 --> 00:06:04,500
can see actually there's a big web of

134
00:06:04,500 --> 00:06:07,560
that as well so that's just to prove

135
00:06:07,560 --> 00:06:09,840
also Russia invest in it and the

136
00:06:09,840 --> 00:06:11,480
interesting one that I find as well is

137
00:06:11,480 --> 00:06:14,340
Isis has a hacking division as well

138
00:06:14,340 --> 00:06:18,090
this is not a state this is a you know a

139
00:06:18,090 --> 00:06:19,890
criminal organization if you want to

140
00:06:19,890 --> 00:06:21,510
call it that right or an organization

141
00:06:21,510 --> 00:06:24,180
that effectively has built cyber

142
00:06:24,180 --> 00:06:28,050
division to cause you know attacks and

143
00:06:28,050 --> 00:06:30,320
cyber attacks

144
00:06:30,669 --> 00:06:35,650
so cryptocurrency has really allowed

145
00:06:35,650 --> 00:06:42,470
cybercrime to be monetized okay so who

146
00:06:42,470 --> 00:06:46,099
in this room effectively doesn't believe

147
00:06:46,099 --> 00:06:49,009
their application has any Worth or any

148
00:06:49,009 --> 00:06:52,759
value at all to a criminal it's probably

149
00:06:52,759 --> 00:06:54,680
a few of you probably several people

150
00:06:54,680 --> 00:06:55,759
that say well there's nothing really

151
00:06:55,759 --> 00:06:59,629
there that I can use right your server

152
00:06:59,629 --> 00:07:05,180
has CPU cycles your visitors have CPU

153
00:07:05,180 --> 00:07:10,190
cycles your build infrastructure has CPU

154
00:07:10,190 --> 00:07:13,400
cycles so all of these things can be

155
00:07:13,400 --> 00:07:19,819
used to monetize cryptocurrency and that

156
00:07:19,819 --> 00:07:23,240
is what crypto allows you to do okay so

157
00:07:23,240 --> 00:07:25,099
cyber criminals are getting extremely

158
00:07:25,099 --> 00:07:27,199
intelligent these days and they're using

159
00:07:27,199 --> 00:07:28,669
all of the tools that are available to

160
00:07:28,669 --> 00:07:33,139
them to actually monetize this industry

161
00:07:33,139 --> 00:07:36,860
and you think well I must be joking

162
00:07:36,860 --> 00:07:38,630
about the cryptocurrency thing actually

163
00:07:38,630 --> 00:07:43,400
Jenkins publicly blogged that this is

164
00:07:43,400 --> 00:07:45,050
one of the best mining cryptocurrency

165
00:07:45,050 --> 00:07:48,380
hacks that ever happened okay so anyone

166
00:07:48,380 --> 00:07:49,880
that leaves their Jenkins build slaves

167
00:07:49,880 --> 00:07:52,340
open just obviously make sure you're not

168
00:07:52,340 --> 00:07:54,789
being mined

169
00:07:56,340 --> 00:08:01,200
in 2013 there was the struts to

170
00:08:01,200 --> 00:08:04,830
vulnerability who's heard of the struts

171
00:08:04,830 --> 00:08:07,410
to vulnerability in this room show of

172
00:08:07,410 --> 00:08:08,090
hands

173
00:08:08,090 --> 00:08:10,290
okay so several of you obviously know

174
00:08:10,290 --> 00:08:10,830
this right

175
00:08:10,830 --> 00:08:13,230
it was Network exploitable it was pretty

176
00:08:13,230 --> 00:08:14,670
public yeah

177
00:08:14,670 --> 00:08:16,680
there was no authentication required for

178
00:08:16,680 --> 00:08:19,050
creating that hack it allowed

179
00:08:19,050 --> 00:08:22,020
unauthorized disclosure so it was a

180
00:08:22,020 --> 00:08:24,720
pretty severe vulnerability the good

181
00:08:24,720 --> 00:08:26,550
thing is is the project so the open

182
00:08:26,550 --> 00:08:27,960
source community pushed out of fix

183
00:08:27,960 --> 00:08:30,720
immediately so it got fixed almost

184
00:08:30,720 --> 00:08:37,020
instantaneously however it was so bad

185
00:08:37,020 --> 00:08:41,010
that the FBI were forced to release a

186
00:08:41,010 --> 00:08:44,340
flash release they had to notify anyone

187
00:08:44,340 --> 00:08:47,340
that is going to be impacted and tell

188
00:08:47,340 --> 00:08:49,020
them that this is actually a serious

189
00:08:49,020 --> 00:08:51,480
issue even though that open source

190
00:08:51,480 --> 00:08:55,110
library was fixed okay so even though

191
00:08:55,110 --> 00:08:56,550
the open source library was fixed

192
00:08:56,550 --> 00:08:58,200
some organizations also didn't take it

193
00:08:58,200 --> 00:09:00,870
seriously and it was still a threat to

194
00:09:00,870 --> 00:09:03,740
them so the FBI obviously released van

195
00:09:03,740 --> 00:09:08,070
let's look at some other examples of the

196
00:09:08,070 --> 00:09:10,460
open source libraries that are problems

197
00:09:10,460 --> 00:09:13,340
so everyone's heard of heartbleed right

198
00:09:13,340 --> 00:09:18,950
in 2014 this was effectively the first

199
00:09:18,950 --> 00:09:22,770
public I would say right use of open

200
00:09:22,770 --> 00:09:27,210
source to create cybercrime or to you

201
00:09:27,210 --> 00:09:29,550
know trigger cybercrime pop lead

202
00:09:29,550 --> 00:09:31,980
obviously was open SSL okay

203
00:09:31,980 --> 00:09:34,730
this allowed the attackers to obviously

204
00:09:34,730 --> 00:09:38,310
exploit you know bleak of memory you

205
00:09:38,310 --> 00:09:41,100
have shellshock which was effectively a

206
00:09:41,100 --> 00:09:44,280
bash right so you could exploit that in

207
00:09:44,280 --> 00:09:46,860
whatever way you wanted but the

208
00:09:46,860 --> 00:09:50,220
interesting thing about struts to is it

209
00:09:50,220 --> 00:09:53,550
was so severe that there is actually an

210
00:09:53,550 --> 00:09:57,360
example of this vulnerability causing

211
00:09:57,360 --> 00:10:01,980
death so this is how severe open-source

212
00:10:01,980 --> 00:10:03,960
libraries are old libraries that are not

213
00:10:03,960 --> 00:10:06,210
updated your dependencies from the open

214
00:10:06,210 --> 00:10:07,580
source community

215
00:10:07,580 --> 00:10:09,380
this is how severe it could potentially

216
00:10:09,380 --> 00:10:11,930
get I'm not saying that is obviously

217
00:10:11,930 --> 00:10:14,029
what's going to happen to you but here

218
00:10:14,029 --> 00:10:16,310
is an example of a hospital in America

219
00:10:16,310 --> 00:10:19,330
so this was the Hollywood Presbyterian

220
00:10:19,330 --> 00:10:23,740
Church their systems were obviously

221
00:10:23,740 --> 00:10:26,839
attacked and was hijacked by something

222
00:10:26,839 --> 00:10:29,360
called Samsung okay so they have no

223
00:10:29,360 --> 00:10:31,339
access to any of their hospital

224
00:10:31,339 --> 00:10:33,529
environments until they paid the

225
00:10:33,529 --> 00:10:36,769
attacker a set number of crypto currency

226
00:10:36,769 --> 00:10:38,810
dollars okay the thing the number was

227
00:10:38,810 --> 00:10:41,000
something in the region of $17,000

228
00:10:41,000 --> 00:10:43,519
there's not a lot of money right but

229
00:10:43,519 --> 00:10:46,010
actually that impact over that period of

230
00:10:46,010 --> 00:10:48,589
time caused several deaths within the

231
00:10:48,589 --> 00:10:50,750
hospital okay because they had no access

232
00:10:50,750 --> 00:10:52,250
to system they didn't know obviously

233
00:10:52,250 --> 00:10:54,890
where patients needed to go there they

234
00:10:54,890 --> 00:10:56,450
had no idea where the doctors were the

235
00:10:56,450 --> 00:10:58,790
resources so this is just showing you

236
00:10:58,790 --> 00:11:00,829
the scale of the impact in terms of what

237
00:11:00,829 --> 00:11:02,720
could potentially happen with those open

238
00:11:02,720 --> 00:11:04,250
source libraries but the funny thing

239
00:11:04,250 --> 00:11:06,769
about this is is there were actually 25

240
00:11:06,769 --> 00:11:09,320
group artifact versions okay

241
00:11:09,320 --> 00:11:11,630
they were downloaded nearly 24 million

242
00:11:11,630 --> 00:11:13,910
times 23 and a half you want to be more

243
00:11:13,910 --> 00:11:17,839
specific 7 of these group artifact

244
00:11:17,839 --> 00:11:19,940
versions had vulnerabilities and they

245
00:11:19,940 --> 00:11:21,860
were downloaded nearly 13 million times

246
00:11:21,860 --> 00:11:26,390
over 13 million 330,000 so even though

247
00:11:26,390 --> 00:11:28,720
there was a known vulnerability

248
00:11:28,720 --> 00:11:31,750
organizations people developers still

249
00:11:31,750 --> 00:11:34,910
downloaded that particular library or

250
00:11:34,910 --> 00:11:37,220
group of libraries and we're still using

251
00:11:37,220 --> 00:11:39,440
them even though that there was a known

252
00:11:39,440 --> 00:11:42,620
vulnerability why is that they didn't

253
00:11:42,620 --> 00:11:43,610
have visibility of some of the

254
00:11:43,610 --> 00:11:46,190
dependencies inside of them okay and

255
00:11:46,190 --> 00:11:48,620
that is a huge problem for developers

256
00:11:48,620 --> 00:11:50,089
and organizations because you simply

257
00:11:50,089 --> 00:11:52,640
don't have the visibility to see what

258
00:11:52,640 --> 00:11:55,630
these dependencies are

259
00:11:59,190 --> 00:12:02,440
everyone knows the equifax story huge

260
00:12:02,440 --> 00:12:08,790
public story 2017 so March the 7th

261
00:12:08,790 --> 00:12:12,120
obviously compensation oh this struts to

262
00:12:12,120 --> 00:12:16,890
vulnerability was exposed by March 9

263
00:12:16,890 --> 00:12:19,899
Equifax applications had already been

264
00:12:19,899 --> 00:12:23,470
hacked that is a period of literally two

265
00:12:23,470 --> 00:12:26,890
or three days okay over the period of

266
00:12:26,890 --> 00:12:29,620
time up until August of July 29th to be

267
00:12:29,620 --> 00:12:32,140
exact there were probing attacks and

268
00:12:32,140 --> 00:12:35,860
there was a large-scale exploit we all

269
00:12:35,860 --> 00:12:36,730
know what happened

270
00:12:36,730 --> 00:12:39,930
credit card numbers user details

271
00:12:39,930 --> 00:12:42,640
people's addresses all of that was

272
00:12:42,640 --> 00:12:47,829
exploited until finally the breach was

273
00:12:47,829 --> 00:12:53,170
discovered in July that is a long period

274
00:12:53,170 --> 00:12:56,769
of six months almost ok these attackers

275
00:12:56,769 --> 00:12:59,019
had access to anything that they really

276
00:12:59,019 --> 00:13:01,060
wanted but they were targeting specific

277
00:13:01,060 --> 00:13:05,770
things they were very smart ok so what

278
00:13:05,770 --> 00:13:07,990
did dr. Fox do well crisis management

279
00:13:07,990 --> 00:13:09,940
they had to disclose that there was a

280
00:13:09,940 --> 00:13:12,220
problem and so they had to try and fix

281
00:13:12,220 --> 00:13:14,920
the are see what was the problem there

282
00:13:14,920 --> 00:13:17,290
though they just simply did not know

283
00:13:17,290 --> 00:13:19,779
where this vulnerability existed they

284
00:13:19,779 --> 00:13:23,260
had no idea and the problem with that is

285
00:13:23,260 --> 00:13:24,940
is if you have no idea where this thing

286
00:13:24,940 --> 00:13:28,990
is how do you go and fix it so

287
00:13:28,990 --> 00:13:32,380
ultimately 7 to the September there was

288
00:13:32,380 --> 00:13:35,620
another remote code execution in there

289
00:13:35,620 --> 00:13:37,480
so obviously now that they knew where

290
00:13:37,480 --> 00:13:39,250
some of these were exposed they could go

291
00:13:39,250 --> 00:13:41,680
and fix that but as we know this

292
00:13:41,680 --> 00:13:43,209
particular breach hasn't cost that

293
00:13:43,209 --> 00:13:45,870
organization nearly 1 billion dollars

294
00:13:45,870 --> 00:13:48,430
it's cost organizations like British

295
00:13:48,430 --> 00:13:51,600
Airways it's not the same problem

296
00:13:51,600 --> 00:13:53,440
organization like British Airways nearly

297
00:13:53,440 --> 00:13:58,029
250 million pounds just to remediate ok

298
00:13:58,029 --> 00:14:00,220
including the GDP our fines and every

299
00:14:00,220 --> 00:14:04,440
other fine that now has exists

300
00:14:04,740 --> 00:14:09,420
so the time to respond now has gone from

301
00:14:09,420 --> 00:14:15,150
almost 45 days to effectively 15 days

302
00:14:15,150 --> 00:14:18,870
but the time to exploit it can actually

303
00:14:18,870 --> 00:14:23,760
be three days now so how many people in

304
00:14:23,760 --> 00:14:27,690
this room over here have some security

305
00:14:27,690 --> 00:14:31,110
policies in place but all of those ones

306
00:14:31,110 --> 00:14:33,240
that I'd like to understand about how

307
00:14:33,240 --> 00:14:35,730
many of those know what the remediation

308
00:14:35,730 --> 00:14:38,370
time is for you to fix a potential

309
00:14:38,370 --> 00:14:45,930
exploit 30 days 15 three hours wow

310
00:14:45,930 --> 00:14:48,030
you're fast

311
00:14:48,030 --> 00:14:51,450
so there are policies in place a lot of

312
00:14:51,450 --> 00:14:53,340
these sometimes are not defined right

313
00:14:53,340 --> 00:14:56,490
three hours is amazing right but you do

314
00:14:56,490 --> 00:14:59,760
not have time like three days four days

315
00:14:59,760 --> 00:15:02,340
or five days anymore these exploits are

316
00:15:02,340 --> 00:15:04,740
instantaneous they can be used

317
00:15:04,740 --> 00:15:06,750
immediately and there are exploits out

318
00:15:06,750 --> 00:15:08,040
there that can be used immediately as

319
00:15:08,040 --> 00:15:10,440
well so that rich time to be exploited

320
00:15:10,440 --> 00:15:14,210
has gone down severely

321
00:15:18,040 --> 00:15:22,500
who in this room has heard of webgoat

322
00:15:23,100 --> 00:15:27,090
okay so fair fair number of people right

323
00:15:27,090 --> 00:15:31,410
this is the dependency structure for

324
00:15:31,410 --> 00:15:34,840
webgoat okay it's a very simple

325
00:15:34,840 --> 00:15:37,720
application it's actually purposefully

326
00:15:37,720 --> 00:15:39,190
vulnerable okay

327
00:15:39,190 --> 00:15:42,010
it exists to train security people okay

328
00:15:42,010 --> 00:15:44,080
that doesn't look too bad from a

329
00:15:44,080 --> 00:15:46,690
dependency tree graph right it's not so

330
00:15:46,690 --> 00:15:51,640
bad the problem is when you look at the

331
00:15:51,640 --> 00:15:55,450
Maven ecosystem that is a dependency or

332
00:15:55,450 --> 00:15:56,860
the complex into dependency of the

333
00:15:56,860 --> 00:16:02,080
entire maven ecosystem from 2015 now if

334
00:16:02,080 --> 00:16:03,730
you imagine the number of downloads have

335
00:16:03,730 --> 00:16:06,130
exponentially grown in that ecosystem in

336
00:16:06,130 --> 00:16:08,830
a mature ecosystem this thing is

337
00:16:08,830 --> 00:16:10,540
probably twice the size of what it is at

338
00:16:10,540 --> 00:16:12,880
the moment and you just simply can't see

339
00:16:12,880 --> 00:16:15,700
what the inter dependencies are so

340
00:16:15,700 --> 00:16:17,710
therefore your problem is is you have a

341
00:16:17,710 --> 00:16:21,000
risk of not knowing where you are using

342
00:16:21,000 --> 00:16:24,160
let's look at some of the other immature

343
00:16:24,160 --> 00:16:26,880
ecosystems

344
00:16:30,680 --> 00:16:32,809
everyone in the room will know that this

345
00:16:32,809 --> 00:16:35,930
is a problem use JavaScript it's going

346
00:16:35,930 --> 00:16:40,249
to be a problem I love this guy because

347
00:16:40,249 --> 00:16:43,309
he's he's pretty good what you see on

348
00:16:43,309 --> 00:16:46,069
the top is never really what you are

349
00:16:46,069 --> 00:16:48,740
pulling down from this ecosystem and if

350
00:16:48,740 --> 00:16:51,649
anyone wants an example or an analogy of

351
00:16:51,649 --> 00:16:54,079
what that JavaScript ecosystem looks

352
00:16:54,079 --> 00:16:59,149
like here's a brilliant one if it plays

353
00:16:59,149 --> 00:17:01,540
that is

354
00:17:07,390 --> 00:17:09,490
come into my house all of these

355
00:17:09,490 --> 00:17:12,780
dependencies okay so your front door

356
00:17:12,780 --> 00:17:16,089
effectively now is your developers okay

357
00:17:16,089 --> 00:17:18,609
and these developers are the ones that

358
00:17:18,609 --> 00:17:22,859
control what you can do

359
00:17:26,180 --> 00:17:30,680
next this actually is the JavaScript

360
00:17:30,680 --> 00:17:33,560
ecosystem so if you just look at how

361
00:17:33,560 --> 00:17:35,420
that ecosystem is held together

362
00:17:35,420 --> 00:17:38,300
there are several several inter

363
00:17:38,300 --> 00:17:40,190
dependencies and connections between

364
00:17:40,190 --> 00:17:42,530
them so when you call one dependency

365
00:17:42,530 --> 00:17:44,090
you're probably going to call in another

366
00:17:44,090 --> 00:17:45,890
hundred dependencies into your

367
00:17:45,890 --> 00:17:49,100
environment there are 80 million

368
00:17:49,100 --> 00:17:51,860
JavaScript files approximately here and

369
00:17:51,860 --> 00:17:53,600
there are probably in this picture

370
00:17:53,600 --> 00:17:56,570
six million unique JavaScript files only

371
00:17:56,570 --> 00:18:00,890
I say only right what's the problem

372
00:18:00,890 --> 00:18:05,450
though the challenge is is that a number

373
00:18:05,450 --> 00:18:07,300
of times in your organization's

374
00:18:07,300 --> 00:18:10,220
developers simply outnumber the security

375
00:18:10,220 --> 00:18:12,350
team they just don't have the bandwidth

376
00:18:12,350 --> 00:18:15,170
you develop applications faster than

377
00:18:15,170 --> 00:18:16,880
they can review them and they can

378
00:18:16,880 --> 00:18:18,590
actually analyze what's going on inside

379
00:18:18,590 --> 00:18:25,670
of your code if we look at a timeline of

380
00:18:25,670 --> 00:18:28,640
what actually happens or what's happened

381
00:18:28,640 --> 00:18:30,320
in the past sort of I would say probably

382
00:18:30,320 --> 00:18:33,020
three four years you see that there are

383
00:18:33,020 --> 00:18:35,600
lots of different examples of where open

384
00:18:35,600 --> 00:18:38,930
source has actually been used to expose

385
00:18:38,930 --> 00:18:41,690
and cause problems within organisations

386
00:18:41,690 --> 00:18:43,700
let's look at an example a very simple

387
00:18:43,700 --> 00:18:47,630
example this one's really easy pi pi

388
00:18:47,630 --> 00:18:49,580
typosquatting i think everyone probably

389
00:18:49,580 --> 00:18:51,230
knows what that is bollocks but anyway

390
00:18:51,230 --> 00:18:53,810
so typosquatting is just simply renaming

391
00:18:53,810 --> 00:18:55,640
a package to something that is similar

392
00:18:55,640 --> 00:18:58,190
to one that is actually used by people

393
00:18:58,190 --> 00:19:02,720
right that existed inside of the Python

394
00:19:02,720 --> 00:19:04,040
community for a little while in

395
00:19:04,040 --> 00:19:06,230
September 2017 so people downloaded

396
00:19:06,230 --> 00:19:08,540
there's packages millions of times okay

397
00:19:08,540 --> 00:19:10,610
and they were using these vulnerable

398
00:19:10,610 --> 00:19:12,440
components these vulnerable packages

399
00:19:12,440 --> 00:19:14,300
just because the name looked very very

400
00:19:14,300 --> 00:19:19,000
similar a funny one here in Jan 2018

401
00:19:19,000 --> 00:19:22,910
someone fictitiously wrote an example of

402
00:19:22,910 --> 00:19:25,310
how he could steal credit card numbers

403
00:19:25,310 --> 00:19:27,500
package is not real the package does not

404
00:19:27,500 --> 00:19:29,720
exist people went to the site it was

405
00:19:29,720 --> 00:19:31,130
just an example but was a fictitious

406
00:19:31,130 --> 00:19:34,010
story so organizations started to worry

407
00:19:34,010 --> 00:19:36,530
about how do I fix this problem package

408
00:19:36,530 --> 00:19:39,179
is not real it's just a story

409
00:19:39,179 --> 00:19:41,099
but the security team was so focused on

410
00:19:41,099 --> 00:19:42,570
the fact that this was such a public

411
00:19:42,570 --> 00:19:45,210
story that they focused their attention

412
00:19:45,210 --> 00:19:47,909
on trying to fix this problem they were

413
00:19:47,909 --> 00:19:49,950
distracted away from actually what the

414
00:19:49,950 --> 00:19:52,460
real problem was yeah

415
00:19:52,460 --> 00:19:54,539
you look at some of the more popular

416
00:19:54,539 --> 00:19:57,869
ones you see the homebrew one jobs we

417
00:19:57,869 --> 00:19:59,820
have compromised NPM credentials very

418
00:19:59,820 --> 00:20:02,820
recently you'll have examples like the

419
00:20:02,820 --> 00:20:04,339
es lint project which was hijacked

420
00:20:04,339 --> 00:20:06,509
because someone just wasn't contributing

421
00:20:06,509 --> 00:20:08,609
to that project anymore

422
00:20:08,609 --> 00:20:10,320
and so when a developer came along and

423
00:20:10,320 --> 00:20:11,609
said let me help you out a little bit he

424
00:20:11,609 --> 00:20:12,599
said yeah fantastic

425
00:20:12,599 --> 00:20:14,369
sounds like fun I don't have to maintain

426
00:20:14,369 --> 00:20:16,559
this project anymore what did the person

427
00:20:16,559 --> 00:20:19,080
do creatively stuck her floor in and

428
00:20:19,080 --> 00:20:21,509
then stuck another floor in and then

429
00:20:21,509 --> 00:20:23,609
stuck another floor in and what was that

430
00:20:23,609 --> 00:20:26,190
that just created a compost of confusion

431
00:20:26,190 --> 00:20:28,109
and just hid actually the true

432
00:20:28,109 --> 00:20:30,169
vulnerability that exists inside of that

433
00:20:30,169 --> 00:20:32,489
application or that dependency that

434
00:20:32,489 --> 00:20:36,359
they're using so it's a real problem

435
00:20:36,359 --> 00:20:39,419
it's not going away and it's happening

436
00:20:39,419 --> 00:20:42,299
more and more within what we call kind

437
00:20:42,299 --> 00:20:46,159
of a software supply chain so we run a

438
00:20:46,159 --> 00:20:48,769
Community Survey every year and we

439
00:20:48,769 --> 00:20:51,029
publicly ask you know what are the

440
00:20:51,029 --> 00:20:53,129
challenges that you are facing you know

441
00:20:53,129 --> 00:20:54,539
as part of the open source world around

442
00:20:54,539 --> 00:20:55,219
security

443
00:20:55,219 --> 00:20:59,489
so you'll see obviously 2014 right there

444
00:20:59,489 --> 00:21:02,339
was a heart bleed problem and the

445
00:21:02,339 --> 00:21:04,039
question we asked obviously these

446
00:21:04,039 --> 00:21:06,779
organizations and some responded some

447
00:21:06,779 --> 00:21:07,649
didn't okay

448
00:21:07,649 --> 00:21:12,289
but did you have a suspected or verified

449
00:21:12,289 --> 00:21:16,080
open source related breach all the

450
00:21:16,080 --> 00:21:21,149
people that we surveyed in 2014 14 14 %

451
00:21:21,149 --> 00:21:23,129
of those people had a suspected or

452
00:21:23,129 --> 00:21:26,489
verified breach this continued up right

453
00:21:26,489 --> 00:21:30,659
up until 2018 where this now was a known

454
00:21:30,659 --> 00:21:32,789
problem so last year this was an

455
00:21:32,789 --> 00:21:34,649
actually known problem where

456
00:21:34,649 --> 00:21:36,419
organizations started to take this

457
00:21:36,419 --> 00:21:38,219
seriously because it was just out of

458
00:21:38,219 --> 00:21:39,859
control

459
00:21:39,859 --> 00:21:43,710
2019 you can see that's 24% still not a

460
00:21:43,710 --> 00:21:46,529
small number that is a huge percentage

461
00:21:46,529 --> 00:21:48,419
of the people that we surveyed that's

462
00:21:48,419 --> 00:21:52,229
one in four organizations or people were

463
00:21:52,229 --> 00:21:53,020
breached

464
00:21:53,020 --> 00:21:57,480
by an open-source verified vulnerability

465
00:21:58,320 --> 00:22:02,110
so how do you fix these things right I

466
00:22:02,110 --> 00:22:04,570
come here I put the fear of God in you

467
00:22:04,570 --> 00:22:06,130
right tell you that open source is

468
00:22:06,130 --> 00:22:08,500
terrible but it's not so there are

469
00:22:08,500 --> 00:22:14,500
things that you can do who knows of

470
00:22:14,500 --> 00:22:17,800
Edward Deming anyone show of hands

471
00:22:17,800 --> 00:22:21,130
yeah one person two three okay so not a

472
00:22:21,130 --> 00:22:24,420
lot of people right Edward Deming

473
00:22:24,420 --> 00:22:28,450
was you could say kind of the almost The

474
00:22:28,450 --> 00:22:31,210
Godfather or the inventor of kind of the

475
00:22:31,210 --> 00:22:35,770
lean methodology okay he advised the

476
00:22:35,770 --> 00:22:38,530
Toyota company on something called a TQM

477
00:22:38,530 --> 00:22:41,710
process okay and what that was about was

478
00:22:41,710 --> 00:22:44,410
about making your manufacturing leaner

479
00:22:44,410 --> 00:22:46,360
in the automotive industry

480
00:22:46,360 --> 00:22:49,300
okay he advised to them a couple of

481
00:22:49,300 --> 00:22:50,830
points the two main points that we can

482
00:22:50,830 --> 00:22:53,350
kind of take away from this yeah source

483
00:22:53,350 --> 00:22:57,070
materials from the best suppliers yeah

484
00:22:57,070 --> 00:22:58,810
it's pretty straightforward right you go

485
00:22:58,810 --> 00:23:00,610
to your local shop if they do good

486
00:23:00,610 --> 00:23:02,290
Tomatoes you buy the good tomatoes from

487
00:23:02,290 --> 00:23:06,550
there right source only the best parts

488
00:23:06,550 --> 00:23:10,540
from those suppliers okay so he created

489
00:23:10,540 --> 00:23:14,290
a about seven different kind of theories

490
00:23:14,290 --> 00:23:17,410
right which ultimately revolutionized

491
00:23:17,410 --> 00:23:20,140
the way Toyota made cars and this

492
00:23:20,140 --> 00:23:22,810
basically meant that they became one of

493
00:23:22,810 --> 00:23:26,020
the biggest automotive industry or

494
00:23:26,020 --> 00:23:27,730
automotive suppliers in the world

495
00:23:27,730 --> 00:23:30,430
Ford adopted the TQM process and became

496
00:23:30,430 --> 00:23:32,970
the world's largest and most successful

497
00:23:32,970 --> 00:23:36,370
automotive manufacturer in that time and

498
00:23:36,370 --> 00:23:38,830
it's still used today in all of the

499
00:23:38,830 --> 00:23:40,870
automotive industries wherever you go

500
00:23:40,870 --> 00:23:45,700
BMW Mercedes Turner and the great thing

501
00:23:45,700 --> 00:23:48,940
about this is is he encouraged suppliers

502
00:23:48,940 --> 00:23:51,280
encouraged automotive industries to use

503
00:23:51,280 --> 00:23:53,500
this process because he wanted to reduce

504
00:23:53,500 --> 00:23:57,160
the number of defects problems inside of

505
00:23:57,160 --> 00:24:01,600
the car the great thing about this is by

506
00:24:01,600 --> 00:24:03,970
using that lean methodology of that TQM

507
00:24:03,970 --> 00:24:05,130
process

508
00:24:05,130 --> 00:24:09,790
automotive industries basically have a

509
00:24:09,790 --> 00:24:12,130
three point four parts per million

510
00:24:12,130 --> 00:24:17,380
defect ratio three point four parts per

511
00:24:17,380 --> 00:24:20,860
million what do you think that is in the

512
00:24:20,860 --> 00:24:23,290
software world at the moment if you were

513
00:24:23,290 --> 00:24:28,830
to count defects anyone guess ten in 50

514
00:24:28,830 --> 00:24:33,040
small number big number it currently

515
00:24:33,040 --> 00:24:36,460
sits on average somewhere between one in

516
00:24:36,460 --> 00:24:41,230
ten that is a huge number that's ten

517
00:24:41,230 --> 00:24:43,690
percent of every component that you use

518
00:24:43,690 --> 00:24:48,900
has a vulnerability or can be exploited

519
00:24:48,900 --> 00:24:50,950
whereas he managed to get it down to

520
00:24:50,950 --> 00:24:58,620
three point four per million so

521
00:24:59,370 --> 00:25:01,620
let's look at this in practical examples

522
00:25:01,620 --> 00:25:05,610
right so a traditional supply chain

523
00:25:05,610 --> 00:25:07,650
everyone has a supply chain everyone has

524
00:25:07,650 --> 00:25:09,450
a traditional type of approach to supply

525
00:25:09,450 --> 00:25:11,430
chain the one I'm going to describe

526
00:25:11,430 --> 00:25:13,740
actually is is kind of the electrical

527
00:25:13,740 --> 00:25:15,930
manufacturers right use sauce or

528
00:25:15,930 --> 00:25:18,390
electrical parts what does that mean in

529
00:25:18,390 --> 00:25:20,580
software that basically means your

530
00:25:20,580 --> 00:25:22,950
languages right these little parts these

531
00:25:22,950 --> 00:25:25,110
little dependencies these are things

532
00:25:25,110 --> 00:25:28,620
that you pull from m'kay MJS you know or

533
00:25:28,620 --> 00:25:32,880
you're using struts - for example what's

534
00:25:32,880 --> 00:25:36,120
the warehouse that is the central

535
00:25:36,120 --> 00:25:39,570
repositories that is NP MJS that is pi

536
00:25:39,570 --> 00:25:45,380
pi that is maven what are the

537
00:25:45,380 --> 00:25:48,930
manufacturers that is the developers you

538
00:25:48,930 --> 00:25:50,760
are the developers you are the

539
00:25:50,760 --> 00:25:52,020
manufacturers you are putting these

540
00:25:52,020 --> 00:25:53,850
parts together you are taking them from

541
00:25:53,850 --> 00:25:55,500
the warehouse and you're building them

542
00:25:55,500 --> 00:25:57,600
so you're building and developing all

543
00:25:57,600 --> 00:25:59,850
these different pieces of software and

544
00:25:59,850 --> 00:26:03,270
products and features ultimately you end

545
00:26:03,270 --> 00:26:05,070
up with a final product this could be a

546
00:26:05,070 --> 00:26:07,110
PC in the typical software supply chain

547
00:26:07,110 --> 00:26:10,410
role or manufacturing world right but in

548
00:26:10,410 --> 00:26:12,600
our world that is effectively things

549
00:26:12,600 --> 00:26:17,430
like Instagram Facebook Netflix okay so

550
00:26:17,430 --> 00:26:20,640
we all contribute to this software

551
00:26:20,640 --> 00:26:23,300
supply chain

552
00:26:24,560 --> 00:26:27,420
well we own the first industry to kind

553
00:26:27,420 --> 00:26:29,880
of have this problem right and I have a

554
00:26:29,880 --> 00:26:32,880
couple of examples here everyone knows

555
00:26:32,880 --> 00:26:35,100
about the Galaxy Note so all the Android

556
00:26:35,100 --> 00:26:36,830
fans in here please put your hands up

557
00:26:36,830 --> 00:26:40,860
yeah a few right everyone had this

558
00:26:40,860 --> 00:26:43,130
problem probably right

559
00:26:43,130 --> 00:26:46,380
obviously Boeing they had lithium

560
00:26:46,380 --> 00:26:50,550
battery fires in the 787's okay so they

561
00:26:50,550 --> 00:26:52,950
had to recall some of the planes because

562
00:26:52,950 --> 00:26:54,150
some of the batteries inside of the

563
00:26:54,150 --> 00:26:59,430
planes were just blowing up the last

564
00:26:59,430 --> 00:27:01,020
ones really interesting so this is from

565
00:27:01,020 --> 00:27:04,140
a colleague of mine he started life as

566
00:27:04,140 --> 00:27:06,200
kind of doing something in research and

567
00:27:06,200 --> 00:27:08,520
it was to do with vegetables

568
00:27:08,520 --> 00:27:10,650
surprisingly enough and now he's in

569
00:27:10,650 --> 00:27:14,670
software believe it up so there was an e

570
00:27:14,670 --> 00:27:17,520
coli outbreak in 2011 does anyone

571
00:27:17,520 --> 00:27:20,640
remember that yeah so there's an e coli

572
00:27:20,640 --> 00:27:25,320
outbreak in 2011 and no one could really

573
00:27:25,320 --> 00:27:27,510
figure out what the problem was at one

574
00:27:27,510 --> 00:27:29,850
point they were blaming tomatoes from

575
00:27:29,850 --> 00:27:33,210
Spain I love Tomatoes how can you blame

576
00:27:33,210 --> 00:27:36,720
a tomato right at one point they were

577
00:27:36,720 --> 00:27:39,960
blaming cucumbers right no one really

578
00:27:39,960 --> 00:27:42,600
knew where the problem was it was only

579
00:27:42,600 --> 00:27:46,560
until finally they realized based on

580
00:27:46,560 --> 00:27:48,060
research and looking at the strain of

581
00:27:48,060 --> 00:27:50,610
e.coli and looking at exactly what that

582
00:27:50,610 --> 00:27:53,490
thing was they realized it was a bean

583
00:27:53,490 --> 00:27:54,270
sprout

584
00:27:54,270 --> 00:27:56,640
it's amazing bean sprouts I don't

585
00:27:56,640 --> 00:27:58,680
personally like them but it was a bean

586
00:27:58,680 --> 00:28:01,230
sprout and by finding out which bean

587
00:28:01,230 --> 00:28:03,960
sprouts it was they were able to track

588
00:28:03,960 --> 00:28:08,070
that bean sprout to a farm in Germany

589
00:28:08,070 --> 00:28:11,370
and if you google you know the 2011

590
00:28:11,370 --> 00:28:12,750
outbreaks there are sort of maps you

591
00:28:12,750 --> 00:28:14,100
know heat maps showing you you know

592
00:28:14,100 --> 00:28:15,150
where these things come from

593
00:28:15,150 --> 00:28:16,980
and you can see actually the e.coli

594
00:28:16,980 --> 00:28:19,170
outbreak was actually spun out you know

595
00:28:19,170 --> 00:28:20,670
from Germany and they eventually

596
00:28:20,670 --> 00:28:22,830
identified it down to this particular

597
00:28:22,830 --> 00:28:26,370
farm in Germany that's about knowing

598
00:28:26,370 --> 00:28:28,170
where your dependencies come from

599
00:28:28,170 --> 00:28:30,090
alright so the analogy holds true right

600
00:28:30,090 --> 00:28:32,670
if you know where this bean sprout came

601
00:28:32,670 --> 00:28:35,280
from you know what you have to do to

602
00:28:35,280 --> 00:28:38,019
remove it from your supply chain

603
00:28:38,019 --> 00:28:43,360
the EU every single day releases recalls

604
00:28:43,360 --> 00:28:46,240
so this one's really interesting right

605
00:28:46,240 --> 00:28:49,490
the engine valve springs me break just

606
00:28:49,490 --> 00:28:52,429
blow up while you're driving everyday

607
00:28:52,429 --> 00:28:55,490
the EU publishes all of the recalls

608
00:28:55,490 --> 00:28:58,249
within the European Union and this could

609
00:28:58,249 --> 00:29:01,460
be anything from dolls to scarves I

610
00:29:01,460 --> 00:29:03,350
think I saw one yesterday about scarf

611
00:29:03,350 --> 00:29:06,200
containing some type of metal acting

612
00:29:06,200 --> 00:29:07,999
chromium or too many high levels of

613
00:29:07,999 --> 00:29:08,419
chromium

614
00:29:08,419 --> 00:29:10,639
in a leather scarf but the point is is

615
00:29:10,639 --> 00:29:12,200
understanding where your dependencies

616
00:29:12,200 --> 00:29:20,799
come from give you a second to read that

617
00:29:21,620 --> 00:29:25,850
not every wheel is the same just because

618
00:29:25,850 --> 00:29:28,909
you Google a wheel it doesn't mean it's

619
00:29:28,909 --> 00:29:31,429
the same wheel it doesn't mean it's

620
00:29:31,429 --> 00:29:34,370
manufactured in exactly the same way you

621
00:29:34,370 --> 00:29:35,929
may end up with a pink wheel or you may

622
00:29:35,929 --> 00:29:37,820
end up with a blue wheel right it's not

623
00:29:37,820 --> 00:29:40,809
the same external dependencies

624
00:29:40,809 --> 00:29:43,190
effectively work in the same way if you

625
00:29:43,190 --> 00:29:45,140
pull an external dependency down into

626
00:29:45,140 --> 00:29:48,350
your code it is unlikely to be the same

627
00:29:48,350 --> 00:29:54,169
thing that you pulled yesterday so we

628
00:29:54,169 --> 00:29:55,909
talked DevOps right

629
00:29:55,909 --> 00:29:57,890
everyone talks DevOps everyone's

630
00:29:57,890 --> 00:30:00,049
probably been to does and cannot one of

631
00:30:00,049 --> 00:30:02,960
the main mantras of DevOps is fasters

632
00:30:02,960 --> 00:30:04,970
better right the faster you move the

633
00:30:04,970 --> 00:30:06,710
faster you get stuff out faster you get

634
00:30:06,710 --> 00:30:09,590
features out so this infinity loop sort

635
00:30:09,590 --> 00:30:11,870
of focuses on you know making sure

636
00:30:11,870 --> 00:30:13,909
everything's tied together faster

637
00:30:13,909 --> 00:30:16,840
releases the problem with this though is

638
00:30:16,840 --> 00:30:19,640
we need to look at what the quality of

639
00:30:19,640 --> 00:30:22,520
those components are and by doing faster

640
00:30:22,520 --> 00:30:25,610
releases yes it's great but at the same

641
00:30:25,610 --> 00:30:28,510
time we can't forget about the quality

642
00:30:28,510 --> 00:30:33,200
aspect of it as well and so even though

643
00:30:33,200 --> 00:30:36,169
the DevOps mentor of faster is better it

644
00:30:36,169 --> 00:30:39,049
makes sense to actually climb that

645
00:30:39,049 --> 00:30:43,429
mountain in small steps okay you can't

646
00:30:43,429 --> 00:30:45,980
get to DevOps is faster unless you're

647
00:30:45,980 --> 00:30:48,020
doing this in small incremental changes

648
00:30:48,020 --> 00:30:51,500
within your environment so check that

649
00:30:51,500 --> 00:30:53,570
your dependencies or ensure that you

650
00:30:53,570 --> 00:30:55,039
have visibility of the dependencies that

651
00:30:55,039 --> 00:30:58,100
you're using ensure that you're fixing

652
00:30:58,100 --> 00:31:00,740
old libraries right you might be using a

653
00:31:00,740 --> 00:31:02,840
library that is ten years old when

654
00:31:02,840 --> 00:31:04,370
actually there's one that was just

655
00:31:04,370 --> 00:31:07,250
released two months ago why is that a

656
00:31:07,250 --> 00:31:09,559
bad thing well open-source components

657
00:31:09,559 --> 00:31:12,250
over time just deteriorate right

658
00:31:12,250 --> 00:31:15,080
languages improve developers get smarter

659
00:31:15,080 --> 00:31:17,659
and potential vulnerabilities expose

660
00:31:17,659 --> 00:31:18,840
themselves

661
00:31:18,840 --> 00:31:21,210
so by doing incremental things everyday

662
00:31:21,210 --> 00:31:23,279
you can do this and if you can

663
00:31:23,279 --> 00:31:25,019
incorporate this as part of your build

664
00:31:25,019 --> 00:31:27,299
pipeline as well then this makes your

665
00:31:27,299 --> 00:31:29,129
life a little bit easier as well you can

666
00:31:29,129 --> 00:31:32,850
block the builds going out but

667
00:31:32,850 --> 00:31:35,879
automation requires accuracy okay

668
00:31:35,879 --> 00:31:38,340
you can't automate on security unless

669
00:31:38,340 --> 00:31:39,720
you have accurate and precise

670
00:31:39,720 --> 00:31:42,269
information you need that information to

671
00:31:42,269 --> 00:31:43,499
make sure that you're making the best

672
00:31:43,499 --> 00:31:47,730
decisions what is the one thing that

673
00:31:47,730 --> 00:31:50,190
causes problems in all development

674
00:31:50,190 --> 00:31:52,440
pipelines right false positives and

675
00:31:52,440 --> 00:31:54,720
false negatives what are they they

676
00:31:54,720 --> 00:31:57,869
effectively are noise things that guide

677
00:31:57,869 --> 00:31:59,129
you in a different direction

678
00:31:59,129 --> 00:32:02,009
right and cause you to distract your

679
00:32:02,009 --> 00:32:03,509
attention from really what the problem

680
00:32:03,509 --> 00:32:06,840
is and actually a real cost for

681
00:32:06,840 --> 00:32:08,879
developers is doing that is remediation

682
00:32:08,879 --> 00:32:09,960
around false positives and false

683
00:32:09,960 --> 00:32:16,710
negatives examine and match that

684
00:32:16,710 --> 00:32:19,379
component if you're checking that

685
00:32:19,379 --> 00:32:22,110
component via just the file name then

686
00:32:22,110 --> 00:32:24,360
you're missing a whole trick anyone can

687
00:32:24,360 --> 00:32:26,039
rename that file name there have been

688
00:32:26,039 --> 00:32:27,809
known cases and customers that I've

689
00:32:27,809 --> 00:32:30,179
worked for that have said we've known

690
00:32:30,179 --> 00:32:32,549
developers to rename the package so it

691
00:32:32,549 --> 00:32:34,860
is one that is on a whitelist for

692
00:32:34,860 --> 00:32:36,840
example and it doesn't appear on the

693
00:32:36,840 --> 00:32:42,029
blacklist anymore it's prone to error so

694
00:32:42,029 --> 00:32:44,220
let's look at kind of the anatomy of a

695
00:32:44,220 --> 00:32:45,659
false positive right what does it look

696
00:32:45,659 --> 00:32:47,720
like

697
00:32:48,500 --> 00:32:51,440
if we take the Apache pipe a kid just as

698
00:32:51,440 --> 00:32:55,280
an example the NVD database uses

699
00:32:55,280 --> 00:32:57,230
something called the CPE name based

700
00:32:57,230 --> 00:32:59,780
matching right it uses the fact that

701
00:32:59,780 --> 00:33:02,840
it's a package called POI dot X dot X

702
00:33:02,840 --> 00:33:06,440
dot X if you are searching based only on

703
00:33:06,440 --> 00:33:09,260
the name then effectively what you have

704
00:33:09,260 --> 00:33:12,799
are some of the packages not even being

705
00:33:12,799 --> 00:33:15,380
isolated and you end up with a false

706
00:33:15,380 --> 00:33:18,380
positive in some cases right you end up

707
00:33:18,380 --> 00:33:20,299
with accurate answers so you get some

708
00:33:20,299 --> 00:33:23,270
true negatives okay so you want to

709
00:33:23,270 --> 00:33:26,000
identify based on exactly what their

710
00:33:26,000 --> 00:33:29,120
packages and not the name so the true

711
00:33:29,120 --> 00:33:31,460
cost of you know developer workload and

712
00:33:31,460 --> 00:33:33,530
remediation tasks and the time it takes

713
00:33:33,530 --> 00:33:36,200
new features to come out are false

714
00:33:36,200 --> 00:33:41,480
positives and false negatives and if you

715
00:33:41,480 --> 00:33:44,210
are incurring false positives inside of

716
00:33:44,210 --> 00:33:45,799
your applications and your third-party

717
00:33:45,799 --> 00:33:48,530
dependencies then you're just wasting

718
00:33:48,530 --> 00:33:51,100
time but if you have false negatives

719
00:33:51,100 --> 00:33:53,570
then you're just simply missing

720
00:33:53,570 --> 00:33:55,490
something altogether which basically

721
00:33:55,490 --> 00:33:56,780
means you potentially have a

722
00:33:56,780 --> 00:33:59,750
vulnerability in your application that

723
00:33:59,750 --> 00:34:01,840
is probably a risk that your

724
00:34:01,840 --> 00:34:04,309
organization your security team your

725
00:34:04,309 --> 00:34:06,559
developers didn't have sight of and

726
00:34:06,559 --> 00:34:11,270
didn't actually want to ingest so

727
00:34:11,270 --> 00:34:14,869
name-based matching crates rework right

728
00:34:14,869 --> 00:34:16,940
and false positives are really the

729
00:34:16,940 --> 00:34:19,310
silent killer for developers just

730
00:34:19,310 --> 00:34:22,369
burning time we did a bit of research

731
00:34:22,369 --> 00:34:26,030
around Ross dependency checker so I'm

732
00:34:26,030 --> 00:34:27,290
sure everyone is probably use dose

733
00:34:27,290 --> 00:34:29,899
dependency checker from the nvd top ten

734
00:34:29,899 --> 00:34:34,580
das yeah when we researched what was

735
00:34:34,580 --> 00:34:36,589
dependency checker looked at so if we

736
00:34:36,589 --> 00:34:37,940
took six thousand components as an

737
00:34:37,940 --> 00:34:41,239
example this is the amount of noise that

738
00:34:41,239 --> 00:34:44,570
was introduced by the OS dependency

739
00:34:44,570 --> 00:34:46,719
checker from six thousand components

740
00:34:46,719 --> 00:34:51,320
everything in red is a false positive so

741
00:34:51,320 --> 00:34:53,239
your research team or your security team

742
00:34:53,239 --> 00:34:55,270
would have to look at those problems

743
00:34:55,270 --> 00:34:57,950
everything in yellow was a false

744
00:34:57,950 --> 00:34:59,210
negative

745
00:34:59,210 --> 00:35:02,559
right that is everything that it missed

746
00:35:02,559 --> 00:35:06,290
everything in blue is actually the

747
00:35:06,290 --> 00:35:08,660
correct things that are picked up if you

748
00:35:08,660 --> 00:35:09,950
look at the percentage you look at the

749
00:35:09,950 --> 00:35:12,770
number of those you know one in six were

750
00:35:12,770 --> 00:35:15,380
valid findings only one in six the rest

751
00:35:15,380 --> 00:35:20,440
of it was just noise to distraction

752
00:35:23,230 --> 00:35:26,140
so providing accurate data is not easy

753
00:35:26,140 --> 00:35:30,970
it's very hard and so how do you do that

754
00:35:30,970 --> 00:35:34,540
you have to enable your developers give

755
00:35:34,540 --> 00:35:37,270
you a developers the tool right teach a

756
00:35:37,270 --> 00:35:38,770
man to fish all that sort of stuff

757
00:35:38,770 --> 00:35:40,510
right but give you a developers the

758
00:35:40,510 --> 00:35:47,320
tools give them remediation information

759
00:35:47,320 --> 00:35:49,900
tell them exactly which package is

760
00:35:49,900 --> 00:35:52,570
vulnerable allow them to see what the

761
00:35:52,570 --> 00:35:54,250
information is maybe it's licensing

762
00:35:54,250 --> 00:35:57,160
maybe it's security but allow them the

763
00:35:57,160 --> 00:35:58,570
ability to see whether there is a

764
00:35:58,570 --> 00:36:00,880
package that doesn't have any

765
00:36:00,880 --> 00:36:04,869
vulnerabilities build it into your

766
00:36:04,869 --> 00:36:09,760
pipeline allow our pull request block a

767
00:36:09,760 --> 00:36:12,460
build if it doesn't happen this is where

768
00:36:12,460 --> 00:36:13,240
the developer lives

769
00:36:13,240 --> 00:36:15,790
the developers allow you the ability to

770
00:36:15,790 --> 00:36:18,190
control these things and build security

771
00:36:18,190 --> 00:36:21,660
and secure development in your pipeline

772
00:36:21,660 --> 00:36:24,760
if using Jenkins open-source again put

773
00:36:24,760 --> 00:36:26,829
it inside of your pipeline allow them to

774
00:36:26,829 --> 00:36:29,349
see what the vulnerabilities are and the

775
00:36:29,349 --> 00:36:31,480
problems are allow them the ability to

776
00:36:31,480 --> 00:36:34,720
fix it but if you really want to shift

777
00:36:34,720 --> 00:36:36,790
all the way left you know give them the

778
00:36:36,790 --> 00:36:38,410
tools to look at it from the central

779
00:36:38,410 --> 00:36:40,810
repositories themselves allow them to

780
00:36:40,810 --> 00:36:42,670
actually look at a potential package

781
00:36:42,670 --> 00:36:45,040
that they are looking to use and see if

782
00:36:45,040 --> 00:36:47,140
there are any vulnerabilities there and

783
00:36:47,140 --> 00:36:49,869
then before they even request that

784
00:36:49,869 --> 00:36:53,640
package to come into your environment

785
00:36:55,280 --> 00:36:57,780
that remediation information is vital

786
00:36:57,780 --> 00:36:59,760
for developers because now we're taking

787
00:36:59,760 --> 00:37:01,710
that shift left mentality we're building

788
00:37:01,710 --> 00:37:06,030
quality into that DevOps infinitily it

789
00:37:06,030 --> 00:37:07,800
allows them to make better decisions and

790
00:37:07,800 --> 00:37:12,140
just think about security more

791
00:37:13,760 --> 00:37:16,380
controlling risk across every phase of

792
00:37:16,380 --> 00:37:18,170
your development lifecycle it's key

793
00:37:18,170 --> 00:37:20,220
because if there's only a single point

794
00:37:20,220 --> 00:37:22,319
of control that's really no control at

795
00:37:22,319 --> 00:37:24,150
all if you're just using austere

796
00:37:24,150 --> 00:37:26,250
pendency checker that's probably not

797
00:37:26,250 --> 00:37:28,079
enough either if you're doing perimeter

798
00:37:28,079 --> 00:37:34,319
detection again probably not enough so

799
00:37:34,319 --> 00:37:35,960
if we just look at a typical very

800
00:37:35,960 --> 00:37:38,910
slimmed down version of you know nests

801
00:37:38,910 --> 00:37:42,980
dlc you've got your public repositories

802
00:37:42,980 --> 00:37:46,140
block the bad things coming in control

803
00:37:46,140 --> 00:37:48,270
what your developers are using it might

804
00:37:48,270 --> 00:37:49,319
be something that they have to use

805
00:37:49,319 --> 00:37:52,319
that's fine you can vet it you can look

806
00:37:52,319 --> 00:37:57,150
at that and research it give them early

807
00:37:57,150 --> 00:37:59,369
feedback if your developers are able to

808
00:37:59,369 --> 00:38:01,770
look and see what the problem is and

809
00:38:01,770 --> 00:38:04,410
look and see what potential got shoes

810
00:38:04,410 --> 00:38:06,119
there are they're going to be able to

811
00:38:06,119 --> 00:38:07,829
help you build security into your

812
00:38:07,829 --> 00:38:12,660
pipeline one thing that all developers

813
00:38:12,660 --> 00:38:15,569
hate the most is a broken build if you

814
00:38:15,569 --> 00:38:17,670
break their build they're gonna get very

815
00:38:17,670 --> 00:38:20,040
annoyed with you they can ask you why

816
00:38:20,040 --> 00:38:23,520
did my build break right and if they

817
00:38:23,520 --> 00:38:25,619
know why they build broke then they can

818
00:38:25,619 --> 00:38:27,950
fix the problem

819
00:38:29,200 --> 00:38:31,210
and then finally everyone that's using

820
00:38:31,210 --> 00:38:34,569
Cabrini's stalker validate what's going

821
00:38:34,569 --> 00:38:37,089
out just because you're using a base

822
00:38:37,089 --> 00:38:38,740
image it doesn't mean that base image is

823
00:38:38,740 --> 00:38:40,779
good and just because you're putting an

824
00:38:40,779 --> 00:38:42,609
application inside of that base image

825
00:38:42,609 --> 00:38:44,230
and you're confident that the base image

826
00:38:44,230 --> 00:38:46,119
is good and you have perimeter detection

827
00:38:46,119 --> 00:38:48,700
it still doesn't mean that the

828
00:38:48,700 --> 00:38:56,079
application is safe right how do you

829
00:38:56,079 --> 00:38:59,109
know that's something you used two days

830
00:38:59,109 --> 00:39:01,660
ago it's still good today

831
00:39:01,660 --> 00:39:05,140
you don't we love that analogy that we

832
00:39:05,140 --> 00:39:06,849
use internally within our organization

833
00:39:06,849 --> 00:39:09,160
you know open source components is like

834
00:39:09,160 --> 00:39:12,490
milk right over time it gets bad right

835
00:39:12,490 --> 00:39:15,250
red wine gets in some cases gets better

836
00:39:15,250 --> 00:39:15,940
over time

837
00:39:15,940 --> 00:39:18,549
right that's what open source components

838
00:39:18,549 --> 00:39:20,680
are they get bad over time the older a

839
00:39:20,680 --> 00:39:22,839
component the more likely it is to be a

840
00:39:22,839 --> 00:39:28,150
potential security risk thank you any

841
00:39:28,150 --> 00:39:32,609
questions nope

842
00:39:32,609 --> 00:39:35,848
fantastic there you go

