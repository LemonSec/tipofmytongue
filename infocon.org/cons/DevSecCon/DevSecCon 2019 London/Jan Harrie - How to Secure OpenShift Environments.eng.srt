1
00:00:00,000 --> 00:00:01,979
I'm proud to present my research about

2
00:00:01,979 --> 00:00:06,020
openshift I will talk a bit about how

3
00:00:06,020 --> 00:00:09,389
shift amounts can be configured in the

4
00:00:09,389 --> 00:00:11,910
right or wrong way first of all I will

5
00:00:11,910 --> 00:00:14,190
introduce myself I'm working as a

6
00:00:14,190 --> 00:00:16,740
security consultant in a security

7
00:00:16,740 --> 00:00:18,930
company called E&W in Germany

8
00:00:18,930 --> 00:00:20,910
what firmer is a security analyst

9
00:00:20,910 --> 00:00:24,420
pentester but monkey I'd like to say and

10
00:00:24,420 --> 00:00:26,580
even social engineer did my master

11
00:00:26,580 --> 00:00:29,189
degree in IT security and danced at my

12
00:00:29,189 --> 00:00:32,850
current field of research is who Vanitas

13
00:00:32,850 --> 00:00:36,570
on-premise solutions kind of class text

14
00:00:36,570 --> 00:00:38,160
engine what you can deploy within the

15
00:00:38,160 --> 00:00:40,680
cluster and in my free time I like to

16
00:00:40,680 --> 00:00:43,860
garden a bit what's on the agenda for

17
00:00:43,860 --> 00:00:47,670
today first at all I will start with a

18
00:00:47,670 --> 00:00:50,550
comparison between OpenShift and Koo

19
00:00:50,550 --> 00:00:53,039
Anita's what's openshift

20
00:00:53,039 --> 00:00:55,710
and what's the extension then we will

21
00:00:55,710 --> 00:00:58,020
talk a bit about threats what actual

22
00:00:58,020 --> 00:01:00,690
just threats for the cluster and then we

23
00:01:00,690 --> 00:01:03,059
go through the security or insecurity of

24
00:01:03,059 --> 00:01:05,280
the cluster and then I summarize it up

25
00:01:05,280 --> 00:01:08,790
and we'll explain some future work ok

26
00:01:08,790 --> 00:01:11,280
first we will start with a short

27
00:01:11,280 --> 00:01:15,619
introduction about kubernetes OpenShift

28
00:01:15,619 --> 00:01:18,780
OpenShift is the on-premise context

29
00:01:18,780 --> 00:01:20,790
accused contain execution platform from

30
00:01:20,790 --> 00:01:22,770
red head what you can use to span up

31
00:01:22,770 --> 00:01:25,530
cluster it was initially released in

32
00:01:25,530 --> 00:01:28,860
2011 and his current stable release is

33
00:01:28,860 --> 00:01:31,140
on 4.2 it was in November this year

34
00:01:31,140 --> 00:01:34,890
released under the hood it's building up

35
00:01:34,890 --> 00:01:38,610
on Red Hat Enterprise Linux and it's now

36
00:01:38,610 --> 00:01:41,729
shifting over to coalesce which is

37
00:01:41,729 --> 00:01:46,619
acquired by Red Hat since the version 3

38
00:01:46,619 --> 00:01:49,799
it's built up on kubernetes in forehand

39
00:01:49,799 --> 00:01:52,079
it was built up on his own container

40
00:01:52,079 --> 00:01:53,110
runtime engine

41
00:01:53,110 --> 00:01:55,450
like orchestration engine and now we

42
00:01:55,450 --> 00:01:57,190
have communities under the hood and

43
00:01:57,190 --> 00:01:59,830
since version 4 we do not use talker

44
00:01:59,830 --> 00:02:03,250
anymore within open ship there is now

45
00:02:03,250 --> 00:02:08,288
trial used and yeah there is even

46
00:02:08,288 --> 00:02:12,670
something called the ok days oka D it's

47
00:02:12,670 --> 00:02:15,460
a community version of open shift which

48
00:02:15,460 --> 00:02:17,380
can be used by everyone and can spin up

49
00:02:17,380 --> 00:02:19,840
your own OpenShift cluster at home like

50
00:02:19,840 --> 00:02:22,570
for example if you use sand OS for Red

51
00:02:22,570 --> 00:02:25,060
Hat in comparison this current stable

52
00:02:25,060 --> 00:02:28,600
release is from 2018 last year in

53
00:02:28,600 --> 00:02:32,080
October and it's built um kubernetes

54
00:02:32,080 --> 00:02:35,140
version 111 it's all big boulders they

55
00:02:35,140 --> 00:02:38,170
try to take it now on the new version 4

56
00:02:38,170 --> 00:02:40,890
but it's still work-in-progress

57
00:02:40,890 --> 00:02:43,390
doing my research I use the community

58
00:02:43,390 --> 00:02:45,100
version so that you can are able to

59
00:02:45,100 --> 00:02:48,610
reproduce research also on your own but

60
00:02:48,610 --> 00:02:51,400
in some cases I have I will come to this

61
00:02:51,400 --> 00:02:57,220
later first at all we will talk a bit

62
00:02:57,220 --> 00:02:58,150
about kubernetes

63
00:02:58,150 --> 00:03:00,610
who Anita's office use something called

64
00:03:00,610 --> 00:03:02,350
world eyes access control where you can

65
00:03:02,350 --> 00:03:04,180
define Parolles

66
00:03:04,180 --> 00:03:06,489
it was enrolled what kind of class the

67
00:03:06,489 --> 00:03:08,920
access should a user have means what

68
00:03:08,920 --> 00:03:10,480
kind of app the objects you want to

69
00:03:10,480 --> 00:03:13,510
modify and what kind of changes can be

70
00:03:13,510 --> 00:03:15,370
done within the cluster then you have

71
00:03:15,370 --> 00:03:18,400
called something like namespaces we can

72
00:03:18,400 --> 00:03:20,290
have a soft boundary between different

73
00:03:20,290 --> 00:03:22,989
projects resource limits and security

74
00:03:22,989 --> 00:03:27,100
context where you might access sensitive

75
00:03:27,100 --> 00:03:28,810
information from the host operating

76
00:03:28,810 --> 00:03:32,190
system Network policies where you can

77
00:03:32,190 --> 00:03:35,049
interact or interfere what kind of

78
00:03:35,049 --> 00:03:36,640
communication should be possible and

79
00:03:36,640 --> 00:03:39,160
even something called port security

80
00:03:39,160 --> 00:03:43,660
policies where you can limit the Potts

81
00:03:43,660 --> 00:03:48,190
means the container that are executed an

82
00:03:48,190 --> 00:03:51,310
open shifts extension is that you have

83
00:03:51,310 --> 00:03:53,260
something called image streams image

84
00:03:53,260 --> 00:03:55,999
streams are kind of the

85
00:03:55,999 --> 00:03:58,180
golden bullet of OpenShift let's say

86
00:03:58,180 --> 00:04:02,659
they are known for source to image to

87
00:04:02,659 --> 00:04:04,760
have kind of automatically built

88
00:04:04,760 --> 00:04:07,310
triggers that you can deploy within the

89
00:04:07,310 --> 00:04:10,609
cluster based on the application catalog

90
00:04:10,609 --> 00:04:13,730
and then you have for example in Jenkins

91
00:04:13,730 --> 00:04:16,639
it's watched git repository and pushes

92
00:04:16,639 --> 00:04:19,728
automatically in the image in the

93
00:04:19,728 --> 00:04:23,240
internal repository of the of the

94
00:04:23,240 --> 00:04:27,050
cluster as in the first extension you

95
00:04:27,050 --> 00:04:29,199
have something called user management

96
00:04:29,199 --> 00:04:32,509
you have integrations of different

97
00:04:32,509 --> 00:04:34,820
identity providers I will come into this

98
00:04:34,820 --> 00:04:37,430
in a second something called templates

99
00:04:37,430 --> 00:04:40,039
where you can deploy and specify a few

100
00:04:40,039 --> 00:04:42,860
defaults you have a secure revision

101
00:04:42,860 --> 00:04:45,080
history if you have deployed something

102
00:04:45,080 --> 00:04:46,789
wrong and you want to go back and you do

103
00:04:46,789 --> 00:04:49,310
not know or have some where the yamen

104
00:04:49,310 --> 00:04:52,460
file for example lost you can go and go

105
00:04:52,460 --> 00:04:54,680
like in the revision history back and

106
00:04:54,680 --> 00:04:58,550
check what was previously deployed and a

107
00:04:58,550 --> 00:05:00,560
very important thing and the features

108
00:05:00,560 --> 00:05:03,880
it's offered by open ship that's very

109
00:05:03,880 --> 00:05:07,190
heavy and and forceful let's say is

110
00:05:07,190 --> 00:05:09,169
security context constraints we will

111
00:05:09,169 --> 00:05:12,050
also dig deeper into this topic in a

112
00:05:12,050 --> 00:05:16,310
second but before we talk about the

113
00:05:16,310 --> 00:05:18,409
security or insecurity of the cluster I

114
00:05:18,409 --> 00:05:21,320
will specify the threats what we are

115
00:05:21,320 --> 00:05:23,570
talking about I'm working as a security

116
00:05:23,570 --> 00:05:26,120
consultant is and well as security

117
00:05:26,120 --> 00:05:29,960
analyst and so if we are in customer

118
00:05:29,960 --> 00:05:31,759
projects we ask the customer what kind

119
00:05:31,759 --> 00:05:34,550
of threats threats exists actually so

120
00:05:34,550 --> 00:05:36,620
for sure you know the external act

121
00:05:36,620 --> 00:05:39,380
attacker the external attacker has only

122
00:05:39,380 --> 00:05:43,310
access to like known into the public

123
00:05:43,310 --> 00:05:46,880
exposed interfaces for example the

124
00:05:46,880 --> 00:05:50,300
services office by the cluster it does

125
00:05:50,300 --> 00:05:54,830
not normally has a px s and no inside

126
00:05:54,830 --> 00:05:56,419
knowledge about the class and maybe

127
00:05:56,419 --> 00:06:00,380
there are publicly offered images like

128
00:06:00,380 --> 00:06:03,810
on docker hub a choir or github where

129
00:06:03,810 --> 00:06:07,050
may use open source like open-source

130
00:06:07,050 --> 00:06:10,139
information gathering whatever to get

131
00:06:10,139 --> 00:06:13,160
the details about what's deployed and

132
00:06:13,160 --> 00:06:15,330
then on the other hand we have the

133
00:06:15,330 --> 00:06:17,190
internal checker what is an internal

134
00:06:17,190 --> 00:06:19,080
antec or an internal attacker might be a

135
00:06:19,080 --> 00:06:21,600
malicious developer who wants to harm

136
00:06:21,600 --> 00:06:23,940
your system or like your your

137
00:06:23,940 --> 00:06:26,280
application another thing would be you

138
00:06:26,280 --> 00:06:28,260
have a supply chain as previously talked

139
00:06:28,260 --> 00:06:31,320
about you have deployed container within

140
00:06:31,320 --> 00:06:34,169
the cluster that's not produced by use

141
00:06:34,169 --> 00:06:36,030
it can also be kind of an internal

142
00:06:36,030 --> 00:06:38,700
attacker so the external company will

143
00:06:38,700 --> 00:06:40,380
come and say okay you need to deploy

144
00:06:40,380 --> 00:06:41,760
this image and you are fine

145
00:06:41,760 --> 00:06:44,160
yes for sure and then you have the

146
00:06:44,160 --> 00:06:46,610
internal attacker within your cluster

147
00:06:46,610 --> 00:06:50,010
this guy might have access to the API

148
00:06:50,010 --> 00:06:52,050
depending on the configuration of the

149
00:06:52,050 --> 00:06:55,860
deployment so you can specify on cluster

150
00:06:55,860 --> 00:06:58,350
level what kind of API access the

151
00:06:58,350 --> 00:07:02,400
deployment should have then depending on

152
00:07:02,400 --> 00:07:05,910
the position of the container and us on

153
00:07:05,910 --> 00:07:08,580
the XS it might have influence on the

154
00:07:08,580 --> 00:07:11,270
control of the deployment of the images

155
00:07:11,270 --> 00:07:14,970
it might have access to external IP to

156
00:07:14,970 --> 00:07:17,880
the code repository Tory and based on

157
00:07:17,880 --> 00:07:19,740
information gathering you can get

158
00:07:19,740 --> 00:07:23,250
internal cluster knowledge yeah but now

159
00:07:23,250 --> 00:07:24,840
we are here what is the difference

160
00:07:24,840 --> 00:07:25,860
between an external and internal

161
00:07:25,860 --> 00:07:29,039
attacker and if we are going to analyze

162
00:07:29,039 --> 00:07:31,650
such a system we think okay the internal

163
00:07:31,650 --> 00:07:33,930
attacker is just only one step ahead of

164
00:07:33,930 --> 00:07:36,720
an external attacker so because as soon

165
00:07:36,720 --> 00:07:39,030
as an external attacker has compromised

166
00:07:39,030 --> 00:07:41,760
container it is like one step further

167
00:07:41,760 --> 00:07:43,860
and this is a position where the

168
00:07:43,860 --> 00:07:46,140
internal attacker is already he might

169
00:07:46,140 --> 00:07:48,810
have access to the API controller images

170
00:07:48,810 --> 00:07:51,450
maybe and based on information gathering

171
00:07:51,450 --> 00:07:55,820
he can access plus internal knowledge

172
00:07:55,990 --> 00:08:00,190
so now let's say talk a bit about the

173
00:08:00,190 --> 00:08:03,180
security and insecurity of plasters

174
00:08:03,180 --> 00:08:06,430
there's talk form but jeez man jeez man

175
00:08:06,430 --> 00:08:11,080
from the cube con from 2017 I stole the

176
00:08:11,080 --> 00:08:12,970
slides too because it was pretty good

177
00:08:12,970 --> 00:08:14,740
overview you have kind of low-hanging

178
00:08:14,740 --> 00:08:16,509
fruits fruits that you can introduce

179
00:08:16,509 --> 00:08:19,330
into your cluster and some higher levels

180
00:08:19,330 --> 00:08:22,479
more advanced things today we will talk

181
00:08:22,479 --> 00:08:25,479
about these features that are offers by

182
00:08:25,479 --> 00:08:27,400
Cooper needles like we will talk a bit

183
00:08:27,400 --> 00:08:29,800
about the security policies or basics of

184
00:08:29,800 --> 00:08:32,380
control and least privilege principle

185
00:08:32,380 --> 00:08:35,229
how it is solved by OpenShift and how

186
00:08:35,229 --> 00:08:39,880
it's maybe not solved and the first we

187
00:08:39,880 --> 00:08:42,490
will go for user management then we talk

188
00:08:42,490 --> 00:08:44,980
about the network security and then we

189
00:08:44,980 --> 00:08:47,230
will dive into the security context

190
00:08:47,230 --> 00:08:50,589
constraints I'm a bit on a rush because

191
00:08:50,589 --> 00:08:52,270
I have a lot of content sorry for this

192
00:08:52,270 --> 00:08:54,250
if I'm too fast just interrupt me or

193
00:08:54,250 --> 00:08:56,350
come on later and and ask me if you have

194
00:08:56,350 --> 00:08:58,990
questions but for now we will talk a bit

195
00:08:58,990 --> 00:09:02,680
about the user management openshift

196
00:09:02,680 --> 00:09:05,829
offers a lot of identity providers by

197
00:09:05,829 --> 00:09:07,540
default what you can integrate into the

198
00:09:07,540 --> 00:09:09,370
cluster for example you can integrate

199
00:09:09,370 --> 00:09:12,899
from OpenStack he stole a lot of

200
00:09:12,899 --> 00:09:16,870
education or even something like Google

201
00:09:16,870 --> 00:09:19,770
out indication github get lap whatever

202
00:09:19,770 --> 00:09:22,930
it's important to say if you configure

203
00:09:22,930 --> 00:09:25,149
your identity provider you should have

204
00:09:25,149 --> 00:09:28,630
you must know that the mapping method

205
00:09:28,630 --> 00:09:31,329
must be specified with ins identify

206
00:09:31,329 --> 00:09:34,149
identity provider you have something

207
00:09:34,149 --> 00:09:36,880
called the implicit mapping it's a claim

208
00:09:36,880 --> 00:09:40,930
and the explicit method and that's the

209
00:09:40,930 --> 00:09:45,339
look up in an implicit mapping method to

210
00:09:45,339 --> 00:09:48,760
claim that means everybody who's defined

211
00:09:48,760 --> 00:09:50,520
in the identity provider is

212
00:09:50,520 --> 00:09:52,510
automatically looked up by the cluster

213
00:09:52,510 --> 00:09:54,279
if the user wants to log into the

214
00:09:54,279 --> 00:09:56,200
cluster it's looked up in the identity

215
00:09:56,200 --> 00:09:58,209
provider and get access to the cluster

216
00:09:58,209 --> 00:10:00,850
this means if you do not have further

217
00:10:00,850 --> 00:10:02,890
topics I will come to this later

218
00:10:02,890 --> 00:10:04,840
at further measurements implemented

219
00:10:04,840 --> 00:10:07,000
everybody use in your identity provider

220
00:10:07,000 --> 00:10:09,970
might have access to your cluster so

221
00:10:09,970 --> 00:10:12,280
it's always a recommendation to go for

222
00:10:12,280 --> 00:10:16,360
the explicit mapping belukha what's

223
00:10:16,360 --> 00:10:18,940
difference identity is managed by

224
00:10:18,940 --> 00:10:23,290
identity provider and the user is the

225
00:10:23,290 --> 00:10:25,480
object of eyes various object within the

226
00:10:25,480 --> 00:10:28,450
cluster so if you are talking about a

227
00:10:28,450 --> 00:10:30,880
user you are talking about the object

228
00:10:30,880 --> 00:10:34,990
actually in the OpenShift cluster the

229
00:10:34,990 --> 00:10:38,290
great benefit is that you can use groups

230
00:10:38,290 --> 00:10:41,920
to organize users and manage about the

231
00:10:41,920 --> 00:10:44,350
permissions we come later to this and

232
00:10:44,350 --> 00:10:50,980
even synchronizes with Zelda if you have

233
00:10:50,980 --> 00:10:53,080
introduced groups in they are in your

234
00:10:53,080 --> 00:10:56,640
identity provider you can ensure that

235
00:10:56,640 --> 00:10:59,980
not everyone gets access or except those

236
00:10:59,980 --> 00:11:01,810
who are in a certain group so that's

237
00:11:01,810 --> 00:11:05,770
also a way to prohibit the access and if

238
00:11:05,770 --> 00:11:08,260
you do not have such groups you must

239
00:11:08,260 --> 00:11:10,450
keep in mind if you use to delete the

240
00:11:10,450 --> 00:11:13,480
user in the cluster and you come is

241
00:11:13,480 --> 00:11:15,250
still existing in the identity provider

242
00:11:15,250 --> 00:11:17,830
the you'll can come again to from the

243
00:11:17,830 --> 00:11:19,660
identity provider lock in and he still

244
00:11:19,660 --> 00:11:21,550
again in the cluster so it's a very

245
00:11:21,550 --> 00:11:23,620
important thing just go for an explicit

246
00:11:23,620 --> 00:11:27,760
mapping and not for an implicit by

247
00:11:27,760 --> 00:11:32,020
default we term analyze I analyzed with

248
00:11:32,020 --> 00:11:35,320
my colleagues default cluster

249
00:11:35,320 --> 00:11:38,320
configuration of open shift but if all a

250
00:11:38,320 --> 00:11:40,600
lot of roles are introduced by the

251
00:11:40,600 --> 00:11:44,850
cluster and it's by is the documentation

252
00:11:44,850 --> 00:11:47,320
recommended to not modify this rules

253
00:11:47,320 --> 00:11:49,360
because it might break the cluster if

254
00:11:49,360 --> 00:11:51,370
you want to add additional functionality

255
00:11:51,370 --> 00:11:54,070
or reduce them just introduce new groups

256
00:11:54,070 --> 00:11:58,290
and do not modify existing one

257
00:11:58,530 --> 00:12:02,200
so as soon as you're locked in as user

258
00:12:02,200 --> 00:12:06,090
into the cluster you have boa implicitly

259
00:12:06,090 --> 00:12:08,290
associated with two different groups

260
00:12:08,290 --> 00:12:11,740
called system authenticated and sis no

261
00:12:11,740 --> 00:12:13,840
changes are allowed what does it exactly

262
00:12:13,840 --> 00:12:15,790
mean if you go for a group listings

263
00:12:15,790 --> 00:12:17,530
groups will not show up these are

264
00:12:17,530 --> 00:12:20,620
implicit and virtual groups what does it

265
00:12:20,620 --> 00:12:23,230
really mean I will show you in a second

266
00:12:23,230 --> 00:12:27,070
I've prepared some live demos as

267
00:12:27,070 --> 00:12:30,100
screencast because it might be the case

268
00:12:30,100 --> 00:12:32,170
that I'm not typing too fast and they

269
00:12:32,170 --> 00:12:35,710
will not power you so first of all we

270
00:12:35,710 --> 00:12:38,620
will login as an administrator and then

271
00:12:38,620 --> 00:12:42,160
we will try to identify what this

272
00:12:42,160 --> 00:12:44,710
virtual groups is unauthenticated have

273
00:12:44,710 --> 00:12:48,430
for all bindings and identify which

274
00:12:48,430 --> 00:12:52,360
cluster rules are associated with this

275
00:12:52,360 --> 00:12:55,180
group and if we go to the list we have

276
00:12:55,180 --> 00:12:57,370
for example the basic user cluster

277
00:12:57,370 --> 00:13:00,130
status but even the self provisional

278
00:13:00,130 --> 00:13:02,710
group and thank you okay self

279
00:13:02,710 --> 00:13:05,470
provisional group what does it mean okay

280
00:13:05,470 --> 00:13:07,810
now that inspect this cluster role and

281
00:13:07,810 --> 00:13:11,980
then do you see you have a policy object

282
00:13:11,980 --> 00:13:16,180
go and you are able to create project

283
00:13:16,180 --> 00:13:19,000
requests what is actually a project

284
00:13:19,000 --> 00:13:22,660
request we look now in as user one and

285
00:13:22,660 --> 00:13:26,200
we try to create a new project and send

286
00:13:26,200 --> 00:13:28,450
their project request with new project

287
00:13:28,450 --> 00:13:32,080
and here we go imagine you have a user

288
00:13:32,080 --> 00:13:35,410
let's the identity provider and has now

289
00:13:35,410 --> 00:13:37,480
access to the cluster in the default

290
00:13:37,480 --> 00:13:40,810
configuration you were able to go for

291
00:13:40,810 --> 00:13:42,850
new projects and if you do not have

292
00:13:42,850 --> 00:13:44,800
blocked it or configured you were able

293
00:13:44,800 --> 00:13:47,890
to create new projects we're based on

294
00:13:47,890 --> 00:13:50,770
the new projects if you get a new

295
00:13:50,770 --> 00:13:53,560
project by the cluster you have by

296
00:13:53,560 --> 00:13:57,250
default roles within this project there

297
00:13:57,250 --> 00:13:59,080
the the deployer the builder and the

298
00:13:59,080 --> 00:14:01,600
pillars these are more like the default

299
00:14:01,600 --> 00:14:04,330
roles that are supplied for example for

300
00:14:04,330 --> 00:14:06,400
Jenkins employment and even the admin

301
00:14:06,400 --> 00:14:08,940
role of parameter

302
00:14:08,940 --> 00:14:11,940
sorry

303
00:14:14,500 --> 00:14:17,040
No

304
00:14:18,620 --> 00:14:22,300
though this was mistake sorry

305
00:14:32,690 --> 00:14:37,640
I hope that this not will happen but

306
00:14:37,640 --> 00:14:43,420
yeah so we have to wait a second sorry

307
00:14:47,210 --> 00:14:49,160
exactly

308
00:14:49,160 --> 00:14:51,110
do you have the project request here

309
00:14:51,110 --> 00:14:54,470
then we log in as a user 1 and now we

310
00:14:54,470 --> 00:14:57,920
are able to create a new project with OC

311
00:14:57,920 --> 00:15:01,160
new project and within this project we

312
00:15:01,160 --> 00:15:04,850
are even now able to be part of this

313
00:15:04,850 --> 00:15:07,550
group admin as you can see here the user

314
00:15:07,550 --> 00:15:10,910
1 is in this admin group and now we are

315
00:15:10,910 --> 00:15:13,970
able to even deploy parts within the

316
00:15:13,970 --> 00:15:16,160
cluster as you can see here is our user

317
00:15:16,160 --> 00:15:19,190
part that we have been now pulled put

318
00:15:19,190 --> 00:15:24,410
into the cluster now you can say what

319
00:15:24,410 --> 00:15:27,140
can probably go wrong ok users can now

320
00:15:27,140 --> 00:15:29,900
go and deploy workload within the

321
00:15:29,900 --> 00:15:32,060
cluster aha ok

322
00:15:32,060 --> 00:15:35,240
is it only it's a real problem ok let's

323
00:15:35,240 --> 00:15:37,220
let's figure out what can we not also be

324
00:15:37,220 --> 00:15:39,650
the problem if we inspect the normal

325
00:15:39,650 --> 00:15:42,380
configuration of a deployed part within

326
00:15:42,380 --> 00:15:44,600
the network and you go into the resolved

327
00:15:44,600 --> 00:15:46,910
configuration file within the EDC

328
00:15:46,910 --> 00:15:49,240
directory you have to search domain and

329
00:15:49,240 --> 00:15:51,950
have you ever spent that much attention

330
00:15:51,950 --> 00:15:55,310
to the search string here on this level

331
00:15:55,310 --> 00:15:57,560
first we will search in the name space

332
00:15:57,560 --> 00:15:59,900
and then on cluster level and if you

333
00:15:59,900 --> 00:16:05,900
have deployed service on here on the

334
00:16:05,900 --> 00:16:09,200
namespace level you might the user will

335
00:16:09,200 --> 00:16:11,900
automatically this is a DNS service will

336
00:16:11,900 --> 00:16:14,180
automatically look up within the service

337
00:16:14,180 --> 00:16:18,110
namespace I figured out there's a very

338
00:16:18,110 --> 00:16:22,340
nifty buck I had a video for this but I

339
00:16:22,340 --> 00:16:25,550
have to perform a life because I realize

340
00:16:25,550 --> 00:16:26,750
it's even worse

341
00:16:26,750 --> 00:16:30,050
I have to check if I have access to my

342
00:16:30,050 --> 00:16:33,010
infrastructure

343
00:16:38,900 --> 00:16:43,630
sorry that's unexpected

344
00:16:58,040 --> 00:17:02,990
have to connect to my company so now I'm

345
00:17:02,990 --> 00:17:07,599
an user one

346
00:17:10,619 --> 00:17:12,900
at first I will login to my cluster is

347
00:17:12,900 --> 00:17:16,470
user one and from here I can now create

348
00:17:16,470 --> 00:17:21,919
a project for example with the name come

349
00:17:21,919 --> 00:17:26,909
and sorry

350
00:17:26,909 --> 00:17:33,799
ah it's not shared at all

351
00:17:42,670 --> 00:17:46,980
is it not possible to see yeah I think

352
00:17:46,980 --> 00:17:48,970
sorry again

353
00:17:48,970 --> 00:17:51,790
first we will lock in to our project as

354
00:17:51,790 --> 00:17:55,420
user one and then we have created a new

355
00:17:55,420 --> 00:17:59,950
project with with the name come in this

356
00:17:59,950 --> 00:18:05,020
project I will deploy an own part that I

357
00:18:05,020 --> 00:18:07,990
have specified in forehand in my demo

358
00:18:07,990 --> 00:18:14,380
directory and the pot will have the host

359
00:18:14,380 --> 00:18:19,140
name Google and the subdomain www and

360
00:18:19,140 --> 00:18:25,500
even the I will create spot

361
00:18:38,920 --> 00:18:42,270
that was a mistake sorry

362
00:19:02,040 --> 00:19:04,770
we have to wait now till the container

363
00:19:04,770 --> 00:19:09,530
stop because I started the wrong one

364
00:19:12,610 --> 00:19:15,209
No

365
00:19:26,500 --> 00:19:30,330
so we created a pot

366
00:19:30,899 --> 00:19:33,330
which is actually running in the cluster

367
00:19:33,330 --> 00:19:38,340
and now we will create also a service

368
00:19:38,340 --> 00:19:42,168
for the spots on port 8080

369
00:19:58,299 --> 00:20:03,279
and now we will change the workspace to

370
00:20:03,279 --> 00:20:09,089
use to that and in the other project so

371
00:20:27,830 --> 00:20:30,080
in this workspace I've previously

372
00:20:30,080 --> 00:20:32,510
started a container and if we do now

373
00:20:32,510 --> 00:20:39,650
occur on wwe.com the brick rest ends up

374
00:20:39,650 --> 00:20:41,960
in the namespace that we just have

375
00:20:41,960 --> 00:20:44,630
create on this way we are able to

376
00:20:44,630 --> 00:20:47,800
interfere the DNS lookup of the cluster

377
00:20:47,800 --> 00:20:50,240
can you imagine you have a built

378
00:20:50,240 --> 00:20:52,220
pipeline you haven't met Jenkins within

379
00:20:52,220 --> 00:20:55,040
the cluster and another user can create

380
00:20:55,040 --> 00:20:57,740
a new project within your name within

381
00:20:57,740 --> 00:21:00,860
your cluster with the project name or

382
00:21:00,860 --> 00:21:02,660
namespace how it's called on kubernetes

383
00:21:02,660 --> 00:21:05,260
level with the namespace name come and

384
00:21:05,260 --> 00:21:08,300
spend up a service like Google and every

385
00:21:08,300 --> 00:21:11,180
DNS request is first going to hist to

386
00:21:11,180 --> 00:21:12,680
his namespace and not to the public

387
00:21:12,680 --> 00:21:15,440
internet that can be a mandatory threat

388
00:21:15,440 --> 00:21:18,680
within the cluster now we can go back to

389
00:21:18,680 --> 00:21:23,200
my slides there's no work

390
00:21:23,200 --> 00:21:26,299
[Music]

391
00:21:28,850 --> 00:21:30,140
[Music]

392
00:21:30,140 --> 00:21:32,890
I am

393
00:21:33,910 --> 00:21:36,660
sorry

394
00:21:38,230 --> 00:21:41,369
it was a demon

395
00:21:42,180 --> 00:21:45,270
if you want to prohibit such threats

396
00:21:45,270 --> 00:21:47,580
within the cluster you can go and touch

397
00:21:47,580 --> 00:21:49,650
a pet Co default policy within the

398
00:21:49,650 --> 00:21:52,980
cluster and removes self revision our

399
00:21:52,980 --> 00:21:55,440
role from the system out indicated the

400
00:21:55,440 --> 00:21:59,010
other way would be just to find per pot

401
00:21:59,010 --> 00:22:02,550
on pot level a dedicated dns policy

402
00:22:02,550 --> 00:22:05,370
where it can influence how DNS lookup is

403
00:22:05,370 --> 00:22:09,480
performed within the cluster okay let's

404
00:22:09,480 --> 00:22:11,730
go to the next topic regarding network

405
00:22:11,730 --> 00:22:15,300
security by default OpenShift offers

406
00:22:15,300 --> 00:22:17,430
certain network security plug-ins

407
00:22:17,430 --> 00:22:20,820
network plugins and this means open V

408
00:22:20,820 --> 00:22:23,460
switch subnet multi-tenant network

409
00:22:23,460 --> 00:22:27,600
policy what the three plugins mean I

410
00:22:27,600 --> 00:22:31,050
will come into through this in a second

411
00:22:31,050 --> 00:22:33,600
in general in OpenShift the master does

412
00:22:33,600 --> 00:22:36,500
not participate within the node network

413
00:22:36,500 --> 00:22:39,330
if you have spin up your pots within the

414
00:22:39,330 --> 00:22:42,540
network say per node you have a

415
00:22:42,540 --> 00:22:45,980
dedicated Class C Network it's a way to

416
00:22:45,980 --> 00:22:49,230
identify what's what's going on where

417
00:22:49,230 --> 00:22:51,930
where to shift the traffic route to

418
00:22:51,930 --> 00:22:54,030
traffic the overlay communication is

419
00:22:54,030 --> 00:22:56,670
built on the exelon and if you want to

420
00:22:56,670 --> 00:22:58,530
integrate other hosts within your

421
00:22:58,530 --> 00:23:01,260
cluster you can integrate and as a

422
00:23:01,260 --> 00:23:04,080
OpenShift node and define them and paint

423
00:23:04,080 --> 00:23:05,550
them that there is no workload scheduler

424
00:23:05,550 --> 00:23:07,350
on the system then you have the network

425
00:23:07,350 --> 00:23:10,170
integration or you can even implement

426
00:23:10,170 --> 00:23:12,360
the exelon tunnel endpoint on this

427
00:23:12,360 --> 00:23:16,950
device by default the open V switch

428
00:23:16,950 --> 00:23:19,500
subnet plug-in isn't absolutely not

429
00:23:19,500 --> 00:23:21,660
recommended because by default doesn't

430
00:23:21,660 --> 00:23:28,710
offer you any security which means as an

431
00:23:28,710 --> 00:23:31,890
attacker just let's let's say as a

432
00:23:31,890 --> 00:23:34,740
normal user we can start our workload we

433
00:23:34,740 --> 00:23:37,050
have in the same hello pot again we will

434
00:23:37,050 --> 00:23:39,780
start up with just a hello world this

435
00:23:39,780 --> 00:23:43,440
pot is exposed within our namespace as

436
00:23:43,440 --> 00:23:47,760
hello and here's a cluster IP so as an

437
00:23:47,760 --> 00:23:51,090
attacker we are now user one we go and

438
00:23:51,090 --> 00:23:53,800
run our own attacker pot as user

439
00:23:53,800 --> 00:23:57,970
we connect to this pot and what we now

440
00:23:57,970 --> 00:24:01,300
can do is we use classification ality

441
00:24:01,300 --> 00:24:04,560
and make a reverse IP look up on the

442
00:24:04,560 --> 00:24:07,960
just IP address the kubernetes service

443
00:24:07,960 --> 00:24:11,770
host is a default environment variable

444
00:24:11,770 --> 00:24:13,660
that comes with the cluster to you and

445
00:24:13,660 --> 00:24:15,970
if you put a slash 24 you have the Class

446
00:24:15,970 --> 00:24:18,730
C Network where the default services are

447
00:24:18,730 --> 00:24:20,890
run we can use an map for example to

448
00:24:20,890 --> 00:24:22,660
make a reverse IP lookup and get to the

449
00:24:22,660 --> 00:24:25,570
main names if we put a slash 16 we would

450
00:24:25,570 --> 00:24:27,160
get every service that's available

451
00:24:27,160 --> 00:24:32,070
within the cluster again

452
00:24:38,660 --> 00:24:42,940
sorry for the demos it's kind of

453
00:24:47,790 --> 00:24:51,950
the progress vastness himself sorry

454
00:24:59,290 --> 00:25:01,570
so we start our container again as an

455
00:25:01,570 --> 00:25:06,810
attacker then we can go into it connect

456
00:25:06,810 --> 00:25:09,610
we can make a reverse lookup of the IP

457
00:25:09,610 --> 00:25:12,910
addresses and if we do it one six

458
00:25:12,910 --> 00:25:14,440
sixteen we would find the hello

459
00:25:14,440 --> 00:25:16,960
container and make a pot code on port

460
00:25:16,960 --> 00:25:18,850
8080 and then we can access from one

461
00:25:18,850 --> 00:25:21,700
workspace this network service that's

462
00:25:21,700 --> 00:25:24,430
exposed on the other workspace so we can

463
00:25:24,430 --> 00:25:26,530
make a curl request on port 8080 and

464
00:25:26,530 --> 00:25:29,440
have say hello world imagine you have an

465
00:25:29,440 --> 00:25:32,500
for example in an unprotected database

466
00:25:32,500 --> 00:25:35,200
so everybody who has access to this

467
00:25:35,200 --> 00:25:37,870
cluster can also access this unprotected

468
00:25:37,870 --> 00:25:43,540
database a way to prevent this is juice

469
00:25:43,540 --> 00:25:45,160
for example the open V switch

470
00:25:45,160 --> 00:25:47,200
multi-tenant plug-ins multi-tenant

471
00:25:47,200 --> 00:25:49,780
dragon separates each project for each

472
00:25:49,780 --> 00:25:52,600
other on network level it means if you

473
00:25:52,600 --> 00:25:55,060
try to connect to another service on

474
00:25:55,060 --> 00:25:57,640
another project it's would be not be

475
00:25:57,640 --> 00:26:01,120
possible and you can even go and join

476
00:26:01,120 --> 00:26:04,840
projects together but you should keep in

477
00:26:04,840 --> 00:26:07,570
mind you only have the separation onlays

478
00:26:07,570 --> 00:26:11,650
based level and projects get a virtual

479
00:26:11,650 --> 00:26:14,200
network identifier is signed and virtual

480
00:26:14,200 --> 00:26:16,330
network identified as zero is more

481
00:26:16,330 --> 00:26:18,790
privileged the default project has a

482
00:26:18,790 --> 00:26:21,510
rittle i netted network identified 0

483
00:26:21,510 --> 00:26:23,800
since the overlay is built up on the

484
00:26:23,800 --> 00:26:25,720
exelon and you know already there's a

485
00:26:25,720 --> 00:26:28,960
right source which is pro by default

486
00:26:28,960 --> 00:26:31,480
allowed like virtual network identifier

487
00:26:31,480 --> 00:26:35,140
0 you might have the first step into the

488
00:26:35,140 --> 00:26:35,620
cluster

489
00:26:35,620 --> 00:26:38,350
but there's further research regarding

490
00:26:38,350 --> 00:26:40,300
evx land security you can find a later

491
00:26:40,300 --> 00:26:44,200
in the references and the third plug-in

492
00:26:44,200 --> 00:26:46,600
that's available is the networks open V

493
00:26:46,600 --> 00:26:48,760
switch Network policy plug-in in this

494
00:26:48,760 --> 00:26:50,530
situation I would recommend you to go

495
00:26:50,530 --> 00:26:53,770
for and like the cluster default for all

496
00:26:53,770 --> 00:26:56,890
services and make a deny all policy for

497
00:26:56,890 --> 00:26:59,500
ingress traffic for examples of guys

498
00:26:59,500 --> 00:27:02,830
from months ago has plotted a graph of

499
00:27:02,830 --> 00:27:06,730
the network policies with 1500 services

500
00:27:06,730 --> 00:27:09,100
like services that are allowed so it's a

501
00:27:09,100 --> 00:27:11,110
huge effort but you should go for a

502
00:27:11,110 --> 00:27:12,170
white listing approach

503
00:27:12,170 --> 00:27:14,600
and furthermore you can go and make a

504
00:27:14,600 --> 00:27:16,610
white and black listing or layer 3 so

505
00:27:16,610 --> 00:27:18,950
that you might be as is there so that

506
00:27:18,950 --> 00:27:22,580
you prohibit the plots to communicate

507
00:27:22,580 --> 00:27:25,990
out of the cluster for example to access

508
00:27:25,990 --> 00:27:29,540
infrastructure notes and another thing

509
00:27:29,540 --> 00:27:31,760
that you I would like to recommend you

510
00:27:31,760 --> 00:27:34,520
is you can configure the egress IP

511
00:27:34,520 --> 00:27:37,040
address which support users to contact

512
00:27:37,040 --> 00:27:40,960
communicate out of the cluster and also

513
00:27:40,960 --> 00:27:47,620
you can define which traffic is allowed

514
00:27:47,830 --> 00:27:51,290
ok next step we will now go to the

515
00:27:51,290 --> 00:27:54,740
security confirm context constraints and

516
00:27:54,740 --> 00:27:56,990
I will talk a bit first I will give you

517
00:27:56,990 --> 00:27:58,940
a thought introduction it was released

518
00:27:58,940 --> 00:28:05,780
in the OpenShift arrays 3 and 2015 the

519
00:28:05,780 --> 00:28:08,330
things roll buys access control is for

520
00:28:08,330 --> 00:28:10,340
service accounts while you have secure

521
00:28:10,340 --> 00:28:12,320
context constraints fall apart if you

522
00:28:12,320 --> 00:28:15,140
want to call a secure pot you will go

523
00:28:15,140 --> 00:28:17,299
for secure context constraints if you

524
00:28:17,299 --> 00:28:19,340
want to restrict the users you go for

525
00:28:19,340 --> 00:28:22,760
all buys access control it restricts the

526
00:28:22,760 --> 00:28:25,070
execution of the container and only user

527
00:28:25,070 --> 00:28:27,770
class administrator can assign to

528
00:28:27,770 --> 00:28:30,200
service accounts these constraints so if

529
00:28:30,200 --> 00:28:32,510
you want to administrate what can be

530
00:28:32,510 --> 00:28:34,669
executed within the cluster you go and

531
00:28:34,669 --> 00:28:37,820
create dedicated service accounts for

532
00:28:37,820 --> 00:28:41,360
each works by a name space where you can

533
00:28:41,360 --> 00:28:44,900
interact the default security context

534
00:28:44,900 --> 00:28:48,180
constrain is restricted

535
00:28:48,180 --> 00:28:50,220
as open shifts comes with a lot of

536
00:28:50,220 --> 00:28:52,530
defaults even there are a lot of default

537
00:28:52,530 --> 00:28:54,960
by OpenShift and if you look into the

538
00:28:54,960 --> 00:28:57,360
list of secure context constraints you

539
00:28:57,360 --> 00:28:59,370
find any your city and what especially

540
00:28:59,370 --> 00:29:02,880
if you can identify is the privileged

541
00:29:02,880 --> 00:29:06,390
role the privileged role is like on a

542
00:29:06,390 --> 00:29:08,430
few start on the docker container was -

543
00:29:08,430 --> 00:29:11,580
- privileged or start container in the

544
00:29:11,580 --> 00:29:14,490
normal kubernetes network cluster as

545
00:29:14,490 --> 00:29:18,630
privileged it's the same how this look I

546
00:29:18,630 --> 00:29:21,480
will just let it play and not touch it

547
00:29:21,480 --> 00:29:23,630
hopefully it will not grow at this time

548
00:29:23,630 --> 00:29:28,020
explain on the side at first we will go

549
00:29:28,020 --> 00:29:30,030
as a normal user and create a service

550
00:29:30,030 --> 00:29:32,130
account run as privileged then we go to

551
00:29:32,130 --> 00:29:34,290
our administer class administrator and

552
00:29:34,290 --> 00:29:36,930
ask can you please assign the service

553
00:29:36,930 --> 00:29:39,090
account to the privileged and secure

554
00:29:39,090 --> 00:29:42,150
context constrain with the dash Z you

555
00:29:42,150 --> 00:29:46,980
refer a service account then the user

556
00:29:46,980 --> 00:29:49,800
can go and use the serviceable account

557
00:29:49,800 --> 00:29:52,860
within the pot that's deployed was in

558
00:29:52,860 --> 00:29:54,720
the cluster and specified here service

559
00:29:54,720 --> 00:29:57,600
account run is privileged and if this

560
00:29:57,600 --> 00:30:00,030
service of car as is part is now rolled

561
00:30:00,030 --> 00:30:02,730
out we create a new pot deployment in

562
00:30:02,730 --> 00:30:06,300
the cluster and with this deployment we

563
00:30:06,300 --> 00:30:10,410
can now communicate and interact on the

564
00:30:10,410 --> 00:30:14,310
command line and as you can see we are

565
00:30:14,310 --> 00:30:17,040
now the root in the container is the

566
00:30:17,040 --> 00:30:19,350
hostname and if you check the

567
00:30:19,350 --> 00:30:22,320
capabilities of this container you can

568
00:30:22,320 --> 00:30:24,810
even identify its effective inherent and

569
00:30:24,810 --> 00:30:27,570
permitted and we can even go and show us

570
00:30:27,570 --> 00:30:30,210
host devices of the underlying node in

571
00:30:30,210 --> 00:30:32,880
this case we were able to mount the host

572
00:30:32,880 --> 00:30:36,750
devices into the container but never

573
00:30:36,750 --> 00:30:39,800
hand out the privilege

574
00:30:41,120 --> 00:30:42,890
the next thing where I want to look in

575
00:30:42,890 --> 00:30:45,220
is predefined profiles that allows

576
00:30:45,220 --> 00:30:47,840
access to for example your host past

577
00:30:47,840 --> 00:30:52,160
hosts IPC and host PID that you will get

578
00:30:52,160 --> 00:30:55,640
an idea form okay this is these three I

579
00:30:55,640 --> 00:30:58,100
will make also a short demo to show the

580
00:30:58,100 --> 00:31:01,550
impact of these three policies first

581
00:31:01,550 --> 00:31:03,680
again the user creates a new service

582
00:31:03,680 --> 00:31:08,330
account run as host pass this role we

583
00:31:08,330 --> 00:31:09,950
lose this role we go through our

584
00:31:09,950 --> 00:31:12,170
administrator and ask may your place at

585
00:31:12,170 --> 00:31:14,930
this account choose a secure context

586
00:31:14,930 --> 00:31:21,290
constraints and as soon as it's added we

587
00:31:21,290 --> 00:31:24,200
can create a new deployment for the

588
00:31:24,200 --> 00:31:29,570
cluster and for example go and integrate

589
00:31:29,570 --> 00:31:33,710
host IPC host PID and even go and mount

590
00:31:33,710 --> 00:31:36,710
the host file system as host and file

591
00:31:36,710 --> 00:31:41,510
system normally it's not allowed to do

592
00:31:41,510 --> 00:31:43,610
such service actions but if you want to

593
00:31:43,610 --> 00:31:46,310
you have to create it so now it's

594
00:31:46,310 --> 00:31:48,080
deployed when the cluster and if we now

595
00:31:48,080 --> 00:31:51,159
connect to the container

596
00:31:53,210 --> 00:31:56,600
you can see that we are having huge UID

597
00:31:56,600 --> 00:31:58,190
because it's randomized by the cast

598
00:31:58,190 --> 00:32:02,510
automatically if you see the process

599
00:32:02,510 --> 00:32:06,110
tree it's important to note here that we

600
00:32:06,110 --> 00:32:09,110
can now interact and see for example the

601
00:32:09,110 --> 00:32:11,180
other docker containers because we have

602
00:32:11,180 --> 00:32:13,940
the host IPC space where we can see

603
00:32:13,940 --> 00:32:16,190
what's going on this process for example

604
00:32:16,190 --> 00:32:21,110
is our process a big advantage of

605
00:32:21,110 --> 00:32:23,720
OpenShift is that you get automatically

606
00:32:23,720 --> 00:32:27,950
assigned as a Linux groups which you can

607
00:32:27,950 --> 00:32:30,160
show as peers that where you have

608
00:32:30,160 --> 00:32:32,870
predefined profiles it's restricts the

609
00:32:32,870 --> 00:32:38,870
container and if you now go we can show

610
00:32:38,870 --> 00:32:41,120
the hosts file system and see here are

611
00:32:41,120 --> 00:32:41,600
different

612
00:32:41,600 --> 00:32:43,820
selinux profiles and if you want to

613
00:32:43,820 --> 00:32:45,860
touch a file in this host file system

614
00:32:45,860 --> 00:32:48,080
the permission is denied ok in this case

615
00:32:48,080 --> 00:32:50,090
it's because we are not rude because we

616
00:32:50,090 --> 00:32:51,620
want to touch on root filesystem layer

617
00:32:51,620 --> 00:32:55,070
but if we were not rude and we have file

618
00:32:55,070 --> 00:32:57,050
like temp we were not able because it's

619
00:32:57,050 --> 00:33:03,080
prohibit biasing Lino's another option

620
00:33:03,080 --> 00:33:05,300
is just go with root in the container

621
00:33:05,300 --> 00:33:08,960
and as we know running processes in a

622
00:33:08,960 --> 00:33:11,450
container is normally as root is also

623
00:33:11,450 --> 00:33:14,750
normally not just recommended so and if

624
00:33:14,750 --> 00:33:16,880
we cut all these out that we are not

625
00:33:16,880 --> 00:33:18,860
recommend that are not recommended we

626
00:33:18,860 --> 00:33:20,720
just let stay as a secured context

627
00:33:20,720 --> 00:33:23,270
constraints but we have still it's the

628
00:33:23,270 --> 00:33:25,940
host network but if you want to let hand

629
00:33:25,940 --> 00:33:28,430
over as a host network access to one of

630
00:33:28,430 --> 00:33:30,470
your developers normally you don't want

631
00:33:30,470 --> 00:33:34,700
to so you end up with acceptable secure

632
00:33:34,700 --> 00:33:36,350
context constraints that are available

633
00:33:36,350 --> 00:33:41,090
for the developer and that's so the

634
00:33:41,090 --> 00:33:43,350
restricted one and the non root

635
00:33:43,350 --> 00:33:48,340
my recommendation would go would be just

636
00:33:48,340 --> 00:33:52,140
use only this pose context constraints

637
00:33:52,140 --> 00:33:57,600
and just if you want to give special

638
00:33:57,600 --> 00:33:59,710
permissions to the user you should

639
00:33:59,710 --> 00:34:01,600
always go and configure your new suit

640
00:34:01,600 --> 00:34:03,790
cure context constraints and the

641
00:34:03,790 --> 00:34:05,260
integration of assumes is a great

642
00:34:05,260 --> 00:34:09,129
benefit how a secure context constrain

643
00:34:09,129 --> 00:34:11,230
can be created is now shown in this

644
00:34:11,230 --> 00:34:17,550
example as first I will go again and

645
00:34:17,550 --> 00:34:20,710
create a service runners serve this UID

646
00:34:20,710 --> 00:34:23,139
1000 because I want to run my container

647
00:34:23,139 --> 00:34:26,320
su ID 1000 then the administrator locks

648
00:34:26,320 --> 00:34:30,070
in and has to consider create a new

649
00:34:30,070 --> 00:34:32,560
secure context constrain dedicated for

650
00:34:32,560 --> 00:34:38,889
me where we allow run s must run s and

651
00:34:38,889 --> 00:34:41,580
then you can specify the UID of the

652
00:34:41,580 --> 00:34:46,750
Saran user this constants train is

653
00:34:46,750 --> 00:34:50,290
created then this service account that

654
00:34:50,290 --> 00:34:51,909
previously has been created is now

655
00:34:51,909 --> 00:34:55,300
assigned to this constrain and now the

656
00:34:55,300 --> 00:34:58,330
user has opportunity to deploy as

657
00:34:58,330 --> 00:35:00,250
workloads with this new service account

658
00:35:00,250 --> 00:35:07,420
and yeah runners use ID 1000 specified

659
00:35:07,420 --> 00:35:09,660
here

660
00:35:19,290 --> 00:35:21,120
now we are in the container and as you

661
00:35:21,120 --> 00:35:23,070
can see the users here in W and the ID

662
00:35:23,070 --> 00:35:29,250
is 1000 and again the restrictions from

663
00:35:29,250 --> 00:35:32,630
the SELinux are still in place here and

664
00:35:32,630 --> 00:35:36,690
yeah the capabilities are again dropped

665
00:35:36,690 --> 00:35:38,940
only inherent capabilities that you are

666
00:35:38,940 --> 00:35:43,860
able to not interact with occur okay

667
00:35:43,860 --> 00:35:47,280
that's the ant to summarize it up the

668
00:35:47,280 --> 00:35:50,040
conclusion OpenShift rises in general

669
00:35:50,040 --> 00:35:51,690
debuffs the security of kubernetes

670
00:35:51,690 --> 00:35:53,910
caster it's a great benefit but you

671
00:35:53,910 --> 00:35:55,740
should always take in mind just to

672
00:35:55,740 --> 00:35:58,080
further adjust it for example to not

673
00:35:58,080 --> 00:36:01,940
allow creation of own private projects

674
00:36:01,940 --> 00:36:05,100
it's very tough as a security analyst to

675
00:36:05,100 --> 00:36:07,260
keep up with kubernetes and open ship

676
00:36:07,260 --> 00:36:09,510
releases because the extension and

677
00:36:09,510 --> 00:36:12,810
judgment of the cluster functionality is

678
00:36:12,810 --> 00:36:18,120
still challenging it's a way thing mine

679
00:36:18,120 --> 00:36:21,090
operate and my opportunity is that the

680
00:36:21,090 --> 00:36:22,860
features that are developed dedicated

681
00:36:22,860 --> 00:36:24,960
for open ship are not widespread by now

682
00:36:24,960 --> 00:36:26,670
to the community and integrated into the

683
00:36:26,670 --> 00:36:31,560
core of what it is and my next big thing

684
00:36:31,560 --> 00:36:36,000
is just analyzing opposite for 14.2

685
00:36:36,000 --> 00:36:39,720
because a lot of rework and maybe have

686
00:36:39,720 --> 00:36:41,880
always everything changed but yeah I

687
00:36:41,880 --> 00:36:45,870
have to verify thank you for your

688
00:36:45,870 --> 00:36:46,350
attention

689
00:36:46,350 --> 00:36:48,050
that's it

690
00:36:48,050 --> 00:36:54,389
[Applause]

