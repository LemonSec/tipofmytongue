1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,240 --> 00:00:13,840
all right hello everybody welcome

3
00:00:13,840 --> 00:00:16,720
to today's talk about implementing

4
00:00:16,720 --> 00:00:18,240
policies code through

5
00:00:18,240 --> 00:00:21,039
open policy agent my name is maruda

6
00:00:21,039 --> 00:00:21,520
marin

7
00:00:21,520 --> 00:00:23,359
gunashekar and i work as a principal

8
00:00:23,359 --> 00:00:25,199
consultant at practical

9
00:00:25,199 --> 00:00:28,720
doubts the cops a historic company

10
00:00:28,720 --> 00:00:30,160
and here's a little bit of slide about

11
00:00:30,160 --> 00:00:32,479
me i used to be doing development

12
00:00:32,479 --> 00:00:34,559
uh it worked with a lot of it folks i've

13
00:00:34,559 --> 00:00:35,920
been an agile coach worked with

14
00:00:35,920 --> 00:00:37,600
compliance and for the past five years

15
00:00:37,600 --> 00:00:39,280
actively digging through

16
00:00:39,280 --> 00:00:41,120
anything under the sun that is called

17
00:00:41,120 --> 00:00:42,320
devsicons

18
00:00:42,320 --> 00:00:43,520
well there are some courses that i've

19
00:00:43,520 --> 00:00:45,120
authored at florida site i'm passionate

20
00:00:45,120 --> 00:00:46,719
about teaching and training people

21
00:00:46,719 --> 00:00:49,920
besides consulting and uh one of the

22
00:00:49,920 --> 00:00:51,440
things that i'm also

23
00:00:51,440 --> 00:00:54,640
proud of is creating the oaspsap.net api

24
00:00:54,640 --> 00:00:55,120
project

25
00:00:55,120 --> 00:00:56,399
and there's plenty of other

26
00:00:56,399 --> 00:00:58,000
certifications that i've gained as well

27
00:00:58,000 --> 00:01:00,239
from security agile consulting

28
00:01:00,239 --> 00:01:02,879
and so on i'm the kind of person that

29
00:01:02,879 --> 00:01:05,199
wants to see things first before i get

30
00:01:05,199 --> 00:01:07,280
into anything theoretical

31
00:01:07,280 --> 00:01:09,040
so what i'd like to do today is start

32
00:01:09,040 --> 00:01:11,040
with the demonstration first

33
00:01:11,040 --> 00:01:13,840
about policies code through open policy

34
00:01:13,840 --> 00:01:14,880
agent now

35
00:01:14,880 --> 00:01:16,880
when i had to learn this technology

36
00:01:16,880 --> 00:01:19,600
policy as coach or open policy agent

37
00:01:19,600 --> 00:01:21,520
i discovered the internet through plenty

38
00:01:21,520 --> 00:01:23,360
of conference videos and there's

39
00:01:23,360 --> 00:01:25,600
great talks about how to implement

40
00:01:25,600 --> 00:01:27,280
policy skills and apis

41
00:01:27,280 --> 00:01:29,600
and kubernetes and other things and

42
00:01:29,600 --> 00:01:31,600
whatnot but i couldn't really find that

43
00:01:31,600 --> 00:01:32,560
information

44
00:01:32,560 --> 00:01:35,200
about the essential nuts and bolts that

45
00:01:35,200 --> 00:01:36,479
are required to

46
00:01:36,479 --> 00:01:38,479
actually implement policies go in your

47
00:01:38,479 --> 00:01:40,400
own application so

48
00:01:40,400 --> 00:01:43,280
this is my learning experience and

49
00:01:43,280 --> 00:01:44,960
during the work that i did on an open

50
00:01:44,960 --> 00:01:46,399
policy agent and that's something that

51
00:01:46,399 --> 00:01:48,000
i'm glad to share with you guys today

52
00:01:48,000 --> 00:01:50,159
so we have a front end application that

53
00:01:50,159 --> 00:01:51,360
is built in

54
00:01:51,360 --> 00:01:53,759
python by then flash it's a car

55
00:01:53,759 --> 00:01:55,119
management application

56
00:01:55,119 --> 00:01:57,759
a really simple application that

57
00:01:57,759 --> 00:01:59,360
facilitates

58
00:01:59,360 --> 00:02:02,240
its identity through azure as an

59
00:02:02,240 --> 00:02:03,520
identity provider

60
00:02:03,520 --> 00:02:05,280
and what happens is this front end also

61
00:02:05,280 --> 00:02:06,960
has this back end

62
00:02:06,960 --> 00:02:09,119
which is basically apis and these

63
00:02:09,119 --> 00:02:10,479
back-end apis

64
00:02:10,479 --> 00:02:13,440
is where we're going to discuss policy

65
00:02:13,440 --> 00:02:13,760
as

66
00:02:13,760 --> 00:02:16,400
code today and notice that the back-end

67
00:02:16,400 --> 00:02:18,239
apis are actually

68
00:02:18,239 --> 00:02:21,120
live together with policy as go so

69
00:02:21,120 --> 00:02:23,120
policy is code as its deployment

70
00:02:23,120 --> 00:02:23,840
principle

71
00:02:23,840 --> 00:02:26,720
considers itself to be as a part of the

72
00:02:26,720 --> 00:02:28,640
back-end apis itself now

73
00:02:28,640 --> 00:02:30,080
are we going to see this demonstration

74
00:02:30,080 --> 00:02:31,840
as a back-end api and the reason for

75
00:02:31,840 --> 00:02:32,800
that is

76
00:02:32,800 --> 00:02:35,760
if you know http anything basics about

77
00:02:35,760 --> 00:02:36,000
the

78
00:02:36,000 --> 00:02:39,760
web applications apis and http

79
00:02:39,760 --> 00:02:41,680
then that's all is required for you to

80
00:02:41,680 --> 00:02:43,760
understand the purpose

81
00:02:43,760 --> 00:02:46,800
and the existence of policy as code

82
00:02:46,800 --> 00:02:49,360
through open policy agent and when we

83
00:02:49,360 --> 00:02:50,720
understand the very basics then we can

84
00:02:50,720 --> 00:02:52,080
switch gears and

85
00:02:52,080 --> 00:02:53,840
go to other advanced topics such as

86
00:02:53,840 --> 00:02:56,800
kubernetes istio or service mesh and

87
00:02:56,800 --> 00:03:00,080
whatnot so that's the demonstration

88
00:03:00,080 --> 00:03:03,360
uh what i'm gonna do is quickly jump

89
00:03:03,360 --> 00:03:06,959
back to my browser

90
00:03:06,959 --> 00:03:10,080
this is our practical devsicops labs and

91
00:03:10,080 --> 00:03:11,680
i've already gone ahead and

92
00:03:11,680 --> 00:03:14,400
set up all these web applications the

93
00:03:14,400 --> 00:03:16,560
only thing that i'm left to run

94
00:03:16,560 --> 00:03:19,760
is to run the open policy agent

95
00:03:19,760 --> 00:03:23,760
with a policy called api odd z.rego

96
00:03:23,760 --> 00:03:27,040
on http port 8000 so when i hit enter

97
00:03:27,040 --> 00:03:30,239
open policy agent runs runs fine and

98
00:03:30,239 --> 00:03:30,720
this

99
00:03:30,720 --> 00:03:33,840
is the sample front-end car management

100
00:03:33,840 --> 00:03:36,480
application when i hit sign in i'm going

101
00:03:36,480 --> 00:03:38,640
to be taken to azure ad

102
00:03:38,640 --> 00:03:41,599
and there's two users two major type of

103
00:03:41,599 --> 00:03:43,519
users in this application

104
00:03:43,519 --> 00:03:47,040
msba is a regular user with a role

105
00:03:47,040 --> 00:03:48,720
called everyone you know they're just

106
00:03:48,720 --> 00:03:50,159
everyone any user that has

107
00:03:50,159 --> 00:03:53,200
account on their system and imran is the

108
00:03:53,200 --> 00:03:54,319
privileged user

109
00:03:54,319 --> 00:03:57,200
with car administrator privileges now

110
00:03:57,200 --> 00:03:58,319
and ron is able to

111
00:03:58,319 --> 00:04:00,560
add cars into the system but because

112
00:04:00,560 --> 00:04:02,560
mispa is a regular user

113
00:04:02,560 --> 00:04:04,319
she's not able to add cars into the

114
00:04:04,319 --> 00:04:05,920
system she can just view the list of

115
00:04:05,920 --> 00:04:06,640
cars

116
00:04:06,640 --> 00:04:09,040
and perform a few other operations when

117
00:04:09,040 --> 00:04:11,519
i hit sign in

118
00:04:11,519 --> 00:04:13,920
i'm going to be taken back to the

119
00:04:13,920 --> 00:04:14,879
application

120
00:04:14,879 --> 00:04:17,040
with an authentication token that

121
00:04:17,040 --> 00:04:19,040
consists of an access token for

122
00:04:19,040 --> 00:04:20,478
authorization

123
00:04:20,478 --> 00:04:22,240
and an id token for authentication

124
00:04:22,240 --> 00:04:24,960
coming directly from azure id

125
00:04:24,960 --> 00:04:27,600
now what ms bastian can do she can get

126
00:04:27,600 --> 00:04:28,160
cars

127
00:04:28,160 --> 00:04:32,720
so let's see if she's able to get first

128
00:04:33,680 --> 00:04:35,759
well she's able to get cars when i hit

129
00:04:35,759 --> 00:04:37,199
that invoke button

130
00:04:37,199 --> 00:04:40,320
we fired a call to the back-end apis

131
00:04:40,320 --> 00:04:42,639
and the back-end is checked with open

132
00:04:42,639 --> 00:04:44,080
policy agent

133
00:04:44,080 --> 00:04:45,840
to see whether mizbe can actually get

134
00:04:45,840 --> 00:04:48,479
cars or not now she's able to get cars

135
00:04:48,479 --> 00:04:51,440
is she able to put cars let's verify

136
00:04:51,440 --> 00:04:52,160
that

137
00:04:52,160 --> 00:04:55,520
and the sample data to add cars

138
00:04:55,520 --> 00:04:58,560
looks similar to this with a

139
00:04:58,560 --> 00:05:01,840
car id

140
00:05:01,919 --> 00:05:04,479
now if i perform this operation since

141
00:05:04,479 --> 00:05:05,280
mispa

142
00:05:05,280 --> 00:05:08,639
is a regular user she will not be able

143
00:05:08,639 --> 00:05:10,880
to get cars

144
00:05:10,880 --> 00:05:13,120
sorry about the type there that's the

145
00:05:13,120 --> 00:05:14,240
right url

146
00:05:14,240 --> 00:05:17,440
with cars so this like

147
00:05:17,440 --> 00:05:19,919
it's a 403 forbid an error message

148
00:05:19,919 --> 00:05:22,479
because she's not a car administrator

149
00:05:22,479 --> 00:05:24,639
and she's not able to put cars down

150
00:05:24,639 --> 00:05:26,720
imagine this is your organization's

151
00:05:26,720 --> 00:05:30,400
policy and uh the application car

152
00:05:30,400 --> 00:05:32,080
management application was sort of in a

153
00:05:32,080 --> 00:05:33,520
beta phase till now

154
00:05:33,520 --> 00:05:36,720
and now uh the application changes uh

155
00:05:36,720 --> 00:05:39,840
to go public the organization decided to

156
00:05:39,840 --> 00:05:40,639
allow

157
00:05:40,639 --> 00:05:42,320
every user that has an account on the

158
00:05:42,320 --> 00:05:44,960
system to be able to put cars now

159
00:05:44,960 --> 00:05:47,440
if you think of that as a policy change

160
00:05:47,440 --> 00:05:49,120
uh typically that is managed

161
00:05:49,120 --> 00:05:51,600
through a compliance team or a policy

162
00:05:51,600 --> 00:05:53,280
team written in documents

163
00:05:53,280 --> 00:05:55,199
goes through jira tickets and then

164
00:05:55,199 --> 00:05:57,120
somebody writes that policy puts it as a

165
00:05:57,120 --> 00:05:58,960
part of a product backlog item and a

166
00:05:58,960 --> 00:05:59,520
developer

167
00:05:59,520 --> 00:06:02,720
implements it in multiple places uh here

168
00:06:02,720 --> 00:06:04,560
our application is running and piping

169
00:06:04,560 --> 00:06:06,479
but what i want to demonstrate here

170
00:06:06,479 --> 00:06:08,960
is if you have policy as code i'm going

171
00:06:08,960 --> 00:06:10,000
to quit

172
00:06:10,000 --> 00:06:12,160
this open policy agent here i'm not

173
00:06:12,160 --> 00:06:13,759
doing anything else the application is

174
00:06:13,759 --> 00:06:15,039
still running fine

175
00:06:15,039 --> 00:06:18,800
quit open policy agent and explore

176
00:06:18,800 --> 00:06:21,840
the policy file

177
00:06:22,080 --> 00:06:26,479
that is named otc api

178
00:06:26,479 --> 00:06:29,680
otc drago

179
00:06:29,680 --> 00:06:32,160
now rego is a declarative policy

180
00:06:32,160 --> 00:06:33,039
language

181
00:06:33,039 --> 00:06:34,960
that works together with open policy

182
00:06:34,960 --> 00:06:36,400
agents so that's something that we need

183
00:06:36,400 --> 00:06:36,880
to learn

184
00:06:36,880 --> 00:06:38,400
if you want to learn policies code with

185
00:06:38,400 --> 00:06:40,240
open policy agent but i got some tips

186
00:06:40,240 --> 00:06:40,639
for you

187
00:06:40,639 --> 00:06:42,479
at the end of the presentation to use

188
00:06:42,479 --> 00:06:44,160
the barriers of entry for you to pick up

189
00:06:44,160 --> 00:06:46,160
open policy agent and opa

190
00:06:46,160 --> 00:06:48,960
really quickly so uh if we kind of look

191
00:06:48,960 --> 00:06:50,720
at what's inside

192
00:06:50,720 --> 00:06:54,479
the policy file api odd c

193
00:06:54,479 --> 00:06:56,880
there's a lot of these files there's a

194
00:06:56,880 --> 00:06:58,560
lot of code in these files now

195
00:06:58,560 --> 00:07:01,360
this file started with one single line i

196
00:07:01,360 --> 00:07:01,759
took an

197
00:07:01,759 --> 00:07:05,120
example from the regular playground

198
00:07:05,120 --> 00:07:06,880
which we will look at towards the end of

199
00:07:06,880 --> 00:07:08,319
the presentation and then i started

200
00:07:08,319 --> 00:07:09,680
building and writing this

201
00:07:09,680 --> 00:07:12,880
policy if i clear this

202
00:07:12,880 --> 00:07:16,080
screen and try editing this policy

203
00:07:16,080 --> 00:07:18,880
with nano

204
00:07:19,360 --> 00:07:21,520
remember the policy that i want to

205
00:07:21,520 --> 00:07:23,120
change right now

206
00:07:23,120 --> 00:07:26,319
is to make everyone

207
00:07:26,319 --> 00:07:29,520
able to put cars in the organization

208
00:07:29,520 --> 00:07:32,960
so if i go all the way down until the

209
00:07:32,960 --> 00:07:33,919
point

210
00:07:33,919 --> 00:07:37,039
where the documentation says okay so

211
00:07:37,039 --> 00:07:38,560
this is the policy

212
00:07:38,560 --> 00:07:41,840
rule that allows everybody to get cars

213
00:07:41,840 --> 00:07:45,440
what i'm going to do is add another

214
00:07:45,440 --> 00:07:50,240
rule to this policy called cloud

215
00:07:51,440 --> 00:07:54,800
when input i'm going to type carefully

216
00:07:54,800 --> 00:07:57,199
not to make any typos there

217
00:07:57,199 --> 00:07:58,720
otherwise we'd have to spend time

218
00:07:58,720 --> 00:08:00,240
troubleshooting this

219
00:08:00,240 --> 00:08:03,759
input method is equal to put remember

220
00:08:03,759 --> 00:08:06,720
when mizbe tried to add cars in the

221
00:08:06,720 --> 00:08:07,440
system

222
00:08:07,440 --> 00:08:10,400
she tried to use the put method or the

223
00:08:10,400 --> 00:08:11,039
certain

224
00:08:11,039 --> 00:08:14,639
api path so when the input

225
00:08:14,639 --> 00:08:18,479
method is put and if the path

226
00:08:18,479 --> 00:08:21,520
of the api

227
00:08:21,759 --> 00:08:25,440
in the url is

228
00:08:25,440 --> 00:08:27,440
let me actually borrow this from bottom

229
00:08:27,440 --> 00:08:30,080
right here if the part of the apis

230
00:08:30,080 --> 00:08:32,318
is

231
00:08:33,279 --> 00:08:36,320
cars come a car

232
00:08:36,320 --> 00:08:39,599
id and as long as the user is

233
00:08:39,599 --> 00:08:41,919
authenticated which we can decide on

234
00:08:41,919 --> 00:08:43,519
this policy file

235
00:08:43,519 --> 00:08:46,560
by just putting in the user variable in

236
00:08:46,560 --> 00:08:47,519
there

237
00:08:47,519 --> 00:08:49,519
as long as the user as long as there is

238
00:08:49,519 --> 00:08:50,800
an authenticated user

239
00:08:50,800 --> 00:08:53,200
and the input method is put and the path

240
00:08:53,200 --> 00:08:54,959
is cars.id

241
00:08:54,959 --> 00:08:58,160
then that operation should be allowed

242
00:08:58,160 --> 00:09:00,560
for everybody and with that what i'm

243
00:09:00,560 --> 00:09:02,480
going to do is save that file

244
00:09:02,480 --> 00:09:06,000
exit out of nano and then run

245
00:09:06,000 --> 00:09:10,320
the open policy agent on its hdb api

246
00:09:10,320 --> 00:09:12,480
just like we did before and hopefully

247
00:09:12,480 --> 00:09:14,240
everything works fine okay

248
00:09:14,240 --> 00:09:16,480
no no errors on the policy that we

249
00:09:16,480 --> 00:09:18,560
edited so oprah runs fine

250
00:09:18,560 --> 00:09:20,959
if i go back to the application when i

251
00:09:20,959 --> 00:09:22,560
hit invoke again

252
00:09:22,560 --> 00:09:25,040
i'm expecting this call to succeed and

253
00:09:25,040 --> 00:09:25,920
as such

254
00:09:25,920 --> 00:09:29,200
it succeeded and the key point to take

255
00:09:29,200 --> 00:09:30,959
away from all of this is you've had a

256
00:09:30,959 --> 00:09:32,640
python application in a

257
00:09:32,640 --> 00:09:35,600
python api built on all different kinds

258
00:09:35,600 --> 00:09:36,800
of technologies

259
00:09:36,800 --> 00:09:39,519
but when an organization policy on the

260
00:09:39,519 --> 00:09:41,120
authorization of that application

261
00:09:41,120 --> 00:09:44,160
changed you only had to change

262
00:09:44,160 --> 00:09:46,480
the policy that was responsible for

263
00:09:46,480 --> 00:09:47,440
changing that

264
00:09:47,440 --> 00:09:49,040
the policy that was responsible for

265
00:09:49,040 --> 00:09:50,480
making that out with this

266
00:09:50,480 --> 00:09:52,320
authorization decision so that was the

267
00:09:52,320 --> 00:09:54,160
only thing that made a change

268
00:09:54,160 --> 00:09:55,839
and everything else remained the same

269
00:09:55,839 --> 00:09:57,519
the application code did not needed to

270
00:09:57,519 --> 00:09:58,399
be changed

271
00:09:58,399 --> 00:10:00,880
and the api code did not need to be

272
00:10:00,880 --> 00:10:01,600
changed

273
00:10:01,600 --> 00:10:03,839
the only thing that needed change is the

274
00:10:03,839 --> 00:10:04,959
policy file

275
00:10:04,959 --> 00:10:06,959
that was responsible for making

276
00:10:06,959 --> 00:10:09,040
authorization decisions

277
00:10:09,040 --> 00:10:12,000
in this case with that a little bit of

278
00:10:12,000 --> 00:10:13,519
demonstration i'm going to switch back

279
00:10:13,519 --> 00:10:14,880
to keynote

280
00:10:14,880 --> 00:10:19,200
uh go on power

281
00:10:19,200 --> 00:10:20,320
so there we are so that's the

282
00:10:20,320 --> 00:10:22,959
demonstration that we did uh the agenda

283
00:10:22,959 --> 00:10:24,000
for today

284
00:10:24,000 --> 00:10:26,160
is to look at that demonstration and

285
00:10:26,160 --> 00:10:27,680
hopefully that should tell you why you

286
00:10:27,680 --> 00:10:29,600
should consider policy as code

287
00:10:29,600 --> 00:10:31,920
and a little bit of tips in terms of if

288
00:10:31,920 --> 00:10:33,200
you are trying to integrate

289
00:10:33,200 --> 00:10:35,760
any app with policy as code to open

290
00:10:35,760 --> 00:10:36,720
policy agent

291
00:10:36,720 --> 00:10:38,560
how can you do that and i'm going to

292
00:10:38,560 --> 00:10:40,800
demonstrate that by showing how

293
00:10:40,800 --> 00:10:43,200
this python app and api are plugged

294
00:10:43,200 --> 00:10:44,000
together

295
00:10:44,000 --> 00:10:46,640
with the policy decision engine and

296
00:10:46,640 --> 00:10:47,440
finally

297
00:10:47,440 --> 00:10:49,279
if you have to write regular policies

298
00:10:49,279 --> 00:10:50,560
you know what it takes for like regular

299
00:10:50,560 --> 00:10:51,360
policies and

300
00:10:51,360 --> 00:10:55,120
a lot of resources to get you started

301
00:10:55,120 --> 00:10:57,360
uh first things first uh traditionally

302
00:10:57,360 --> 00:10:59,040
policies are written as documents like

303
00:10:59,040 --> 00:11:00,800
the discus before

304
00:11:00,800 --> 00:11:02,800
somebody writes them either operations

305
00:11:02,800 --> 00:11:04,720
or information security

306
00:11:04,720 --> 00:11:06,959
sometimes even the cso office writes

307
00:11:06,959 --> 00:11:08,160
these policies

308
00:11:08,160 --> 00:11:09,920
and then they version those policies

309
00:11:09,920 --> 00:11:11,200
they put it up for

310
00:11:11,200 --> 00:11:12,839
the consumption of the entire

311
00:11:12,839 --> 00:11:15,279
organization and then those policies are

312
00:11:15,279 --> 00:11:17,440
translated to the engineering teams

313
00:11:17,440 --> 00:11:19,680
operations teams and that's how policies

314
00:11:19,680 --> 00:11:21,040
were traditionally managed

315
00:11:21,040 --> 00:11:23,200
now when infrastructure is moving as

316
00:11:23,200 --> 00:11:24,720
code

317
00:11:24,720 --> 00:11:26,880
when compliance is moving as code why

318
00:11:26,880 --> 00:11:28,560
not policies

319
00:11:28,560 --> 00:11:32,079
in os code now on the left what you see

320
00:11:32,079 --> 00:11:35,200
is a policy as an example by default

321
00:11:35,200 --> 00:11:37,680
there is an allow is equal to false this

322
00:11:37,680 --> 00:11:39,519
is a firewall rule

323
00:11:39,519 --> 00:11:42,000
where you start building security by not

324
00:11:42,000 --> 00:11:43,279
allowing everything

325
00:11:43,279 --> 00:11:46,480
and then whitelisting things by allowing

326
00:11:46,480 --> 00:11:48,880
what we trust there's a policy over

327
00:11:48,880 --> 00:11:49,920
there on your right

328
00:11:49,920 --> 00:11:51,519
on your left that says by default

329
00:11:51,519 --> 00:11:53,279
everything is false and then there's a

330
00:11:53,279 --> 00:11:54,399
set of policy

331
00:11:54,399 --> 00:11:57,360
set of rules in this policy that says if

332
00:11:57,360 --> 00:11:58,560
the method is allowed

333
00:11:58,560 --> 00:12:00,720
and if there's cars with car id on a

334
00:12:00,720 --> 00:12:02,480
path and if there is a manager

335
00:12:02,480 --> 00:12:04,800
then that policy needs to be lacked but

336
00:12:04,800 --> 00:12:06,720
with this kind of

337
00:12:06,720 --> 00:12:08,639
policies written as code there's

338
00:12:08,639 --> 00:12:10,240
advantages that you don't have to

339
00:12:10,240 --> 00:12:12,560
duplicate your documentation somewhere

340
00:12:12,560 --> 00:12:14,079
and of course organizations for

341
00:12:14,079 --> 00:12:15,680
compliancy reasons might level

342
00:12:15,680 --> 00:12:18,079
some level of documentation but wherever

343
00:12:18,079 --> 00:12:19,519
we need to document

344
00:12:19,519 --> 00:12:22,000
role-based access control or anything

345
00:12:22,000 --> 00:12:22,720
else that

346
00:12:22,720 --> 00:12:24,720
comes as a policy and that can be

347
00:12:24,720 --> 00:12:26,959
documented and there's also chat there's

348
00:12:26,959 --> 00:12:27,600
also

349
00:12:27,600 --> 00:12:29,440
advantages of automation when you're

350
00:12:29,440 --> 00:12:31,279
writing these policies you can

351
00:12:31,279 --> 00:12:34,000
unit test these policies uh repeatedly

352
00:12:34,000 --> 00:12:36,320
very fastly in your ci cd systems

353
00:12:36,320 --> 00:12:38,000
and then also make sure that they're

354
00:12:38,000 --> 00:12:39,600
versioned and then whenever

355
00:12:39,600 --> 00:12:42,079
the policy is changed you can also run

356
00:12:42,079 --> 00:12:44,800
coverage on those policies to see

357
00:12:44,800 --> 00:12:48,079
whether your policy during runtime

358
00:12:48,079 --> 00:12:50,320
will actually get executed through all

359
00:12:50,320 --> 00:12:51,760
the lines of the policy

360
00:12:51,760 --> 00:12:54,000
or only few lines few rules of your

361
00:12:54,000 --> 00:12:56,399
policy would get evaluated or not

362
00:12:56,399 --> 00:13:00,399
so those are some advantages of

363
00:13:00,399 --> 00:13:03,440
moving your policies in a code

364
00:13:03,440 --> 00:13:06,000
fashion here's a quote from torin sendel

365
00:13:06,000 --> 00:13:07,519
who's the co-creator of the

366
00:13:07,519 --> 00:13:10,240
open policy agent project that said what

367
00:13:10,240 --> 00:13:12,160
we have evolved our software development

368
00:13:12,160 --> 00:13:14,560
procedures have evolved to treat systems

369
00:13:14,560 --> 00:13:16,880
like database as a separate entity

370
00:13:16,880 --> 00:13:18,959
messaging as a separate entity

371
00:13:18,959 --> 00:13:21,120
monitoring login orchestration these are

372
00:13:21,120 --> 00:13:23,120
separate entities these days

373
00:13:23,120 --> 00:13:25,519
so now it's time that we in that path of

374
00:13:25,519 --> 00:13:27,279
evolution we treated policies as a

375
00:13:27,279 --> 00:13:29,200
separate concern as well

376
00:13:29,200 --> 00:13:31,200
that's a great code to take away but

377
00:13:31,200 --> 00:13:32,800
learn policy as code because there's a

378
00:13:32,800 --> 00:13:34,079
lot of great advantages

379
00:13:34,079 --> 00:13:35,839
uh here's again a screen grab from the

380
00:13:35,839 --> 00:13:38,000
open policy agent website itself it says

381
00:13:38,000 --> 00:13:38,880
this is a

382
00:13:38,880 --> 00:13:41,760
a fine-grained flexible declarative

383
00:13:41,760 --> 00:13:42,800
language

384
00:13:42,800 --> 00:13:45,519
to manage policies across your entire

385
00:13:45,519 --> 00:13:46,240
enterprise

386
00:13:46,240 --> 00:13:48,560
or cloud native stack focus on that

387
00:13:48,560 --> 00:13:49,440
picture there's

388
00:13:49,440 --> 00:13:52,320
ingress coming in the form of a big ship

389
00:13:52,320 --> 00:13:52,720
that

390
00:13:52,720 --> 00:13:55,839
 dragon faced battleship

391
00:13:55,839 --> 00:13:58,880
and there's kubernetes as a fort and

392
00:13:58,880 --> 00:14:00,720
then inside your organization there's

393
00:14:00,720 --> 00:14:02,320
various different things there's data

394
00:14:02,320 --> 00:14:03,519
ssh

395
00:14:03,519 --> 00:14:07,199
user interfaces apis web applications

396
00:14:07,199 --> 00:14:08,480
and whatnot

397
00:14:08,480 --> 00:14:11,760
oppa has a single policy decision

398
00:14:11,760 --> 00:14:14,480
engine because it is very generic

399
00:14:14,480 --> 00:14:16,160
because it is fine grain because it is

400
00:14:16,160 --> 00:14:16,959
declarative

401
00:14:16,959 --> 00:14:18,880
it can work with any given system in

402
00:14:18,880 --> 00:14:20,240
your organization

403
00:14:20,240 --> 00:14:23,279
with very little prerequisites which

404
00:14:23,279 --> 00:14:24,160
we'll go through

405
00:14:24,160 --> 00:14:26,800
in the upcoming slides but for now uh

406
00:14:26,800 --> 00:14:27,760
one language

407
00:14:27,760 --> 00:14:29,760
and one platform to manage policies

408
00:14:29,760 --> 00:14:30,800
across your

409
00:14:30,800 --> 00:14:32,880
entire organization or your cloud native

410
00:14:32,880 --> 00:14:34,639
stack well that looks like

411
00:14:34,639 --> 00:14:38,560
a big win and here's the ecosystem

412
00:14:38,560 --> 00:14:40,800
that currently oppa integrates with now

413
00:14:40,800 --> 00:14:42,399
there's low waste of kubernetes

414
00:14:42,399 --> 00:14:46,079
keller claire sysdig hp.net core

415
00:14:46,079 --> 00:14:49,600
spring web frameworks such as python

416
00:14:49,600 --> 00:14:51,120
flask and so on

417
00:14:51,120 --> 00:14:54,800
what this means is there's samples

418
00:14:54,800 --> 00:14:58,079
or constructs available for all of these

419
00:14:58,079 --> 00:14:58,560
different

420
00:14:58,560 --> 00:15:01,360
technologies as of today so that oppa

421
00:15:01,360 --> 00:15:03,279
can be integrated into these systems

422
00:15:03,279 --> 00:15:06,959
as a policy is code technology

423
00:15:06,959 --> 00:15:09,839
now if your application stack is not

424
00:15:09,839 --> 00:15:10,639
here

425
00:15:10,639 --> 00:15:13,279
well it doesn't mean oppa cannot be

426
00:15:13,279 --> 00:15:14,000
integrated

427
00:15:14,000 --> 00:15:15,920
into that stack well there's ways you

428
00:15:15,920 --> 00:15:17,600
can integrate pretty much any

429
00:15:17,600 --> 00:15:18,720
applications

430
00:15:18,720 --> 00:15:20,639
so that you can make policy decisions

431
00:15:20,639 --> 00:15:22,560
through code

432
00:15:22,560 --> 00:15:25,600
and the other key important thing is

433
00:15:25,600 --> 00:15:28,079
open doesn't really care whether it's

434
00:15:28,079 --> 00:15:30,959
operating with kubernetes or python

435
00:15:30,959 --> 00:15:33,680
or ssh in olden days when we learned

436
00:15:33,680 --> 00:15:35,440
computer science in schools and colleges

437
00:15:35,440 --> 00:15:37,279
we had these three basic things about

438
00:15:37,279 --> 00:15:38,240
computers

439
00:15:38,240 --> 00:15:39,920
there's the input and the output in the

440
00:15:39,920 --> 00:15:41,360
middle we had cpu

441
00:15:41,360 --> 00:15:43,440
now if you picture that and extrapolate

442
00:15:43,440 --> 00:15:45,040
that open policy agent

443
00:15:45,040 --> 00:15:46,959
there's an input and there's an output

444
00:15:46,959 --> 00:15:48,639
in between there lies the policy

445
00:15:48,639 --> 00:15:49,600
position engine

446
00:15:49,600 --> 00:15:52,639
that is oppa open does not care what the

447
00:15:52,639 --> 00:15:53,680
service is

448
00:15:53,680 --> 00:15:55,680
where the input is coming from but but

449
00:15:55,680 --> 00:15:56,720
does not care

450
00:15:56,720 --> 00:15:59,120
uh who's responding to the output as

451
00:15:59,120 --> 00:16:00,480
well all it does

452
00:16:00,480 --> 00:16:03,199
is decides something based on a given

453
00:16:03,199 --> 00:16:04,000
policy

454
00:16:04,000 --> 00:16:06,800
now that's all oprah requires and when

455
00:16:06,800 --> 00:16:08,720
it doesn't care what the service is

456
00:16:08,720 --> 00:16:11,360
how does all this work together but it

457
00:16:11,360 --> 00:16:12,800
doesn't care what your services as long

458
00:16:12,800 --> 00:16:13,920
as the implementation

459
00:16:13,920 --> 00:16:16,000
of what works with jason that's the only

460
00:16:16,000 --> 00:16:18,079
one requirement you know jason

461
00:16:18,079 --> 00:16:20,880
and oppa gives out jason based on the

462
00:16:20,880 --> 00:16:22,880
policy that is just evaluated

463
00:16:22,880 --> 00:16:25,279
now with those two things in mind what

464
00:16:25,279 --> 00:16:26,320
we're going to do now

465
00:16:26,320 --> 00:16:28,480
is explore the steps that they take to

466
00:16:28,480 --> 00:16:29,759
integrate opa

467
00:16:29,759 --> 00:16:32,320
with your application and service so the

468
00:16:32,320 --> 00:16:34,000
first thing that you need to do

469
00:16:34,000 --> 00:16:36,959
is create an input for open when we say

470
00:16:36,959 --> 00:16:39,360
input it has to be in a json format

471
00:16:39,360 --> 00:16:42,720
so oppa can make decisions on that input

472
00:16:42,720 --> 00:16:45,920
number two after you have that input

473
00:16:45,920 --> 00:16:47,839
you have to give that input open in

474
00:16:47,839 --> 00:16:50,160
which way we have to query opa

475
00:16:50,160 --> 00:16:52,480
and after you clear copa opa is going to

476
00:16:52,480 --> 00:16:53,519
respond

477
00:16:53,519 --> 00:16:55,199
with the json and you're going to have

478
00:16:55,199 --> 00:16:57,040
to consume that json

479
00:16:57,040 --> 00:16:59,680
and do this and enforce those decisions

480
00:16:59,680 --> 00:17:00,880
accordingly

481
00:17:00,880 --> 00:17:03,040
now in this example the positions that

482
00:17:03,040 --> 00:17:04,240
we're playing with

483
00:17:04,240 --> 00:17:08,240
are a simple form of allow and deny

484
00:17:08,240 --> 00:17:11,359
opa can be used in various other things

485
00:17:11,359 --> 00:17:12,640
as well it can return an

486
00:17:12,640 --> 00:17:15,199
entire json payload as an output and in

487
00:17:15,199 --> 00:17:17,119
this case it just happens to return a

488
00:17:17,119 --> 00:17:19,199
or deny and again i'll say this again in

489
00:17:19,199 --> 00:17:20,400
this particular example

490
00:17:20,400 --> 00:17:22,880
we're playing with this web application

491
00:17:22,880 --> 00:17:23,439
and

492
00:17:23,439 --> 00:17:25,919
we're trying to see how policies code

493
00:17:25,919 --> 00:17:27,919
could be integrated

494
00:17:27,919 --> 00:17:29,840
into the authorization module of the

495
00:17:29,840 --> 00:17:32,000
application where the authorization is

496
00:17:32,000 --> 00:17:33,840
considered as policy here

497
00:17:33,840 --> 00:17:37,120
now it can be used in other use cases as

498
00:17:37,120 --> 00:17:37,919
well

499
00:17:37,919 --> 00:17:40,720
for example if you have a service

500
00:17:40,720 --> 00:17:42,080
engineer who needs

501
00:17:42,080 --> 00:17:45,120
assignment to a particular person's

502
00:17:45,120 --> 00:17:47,200
private personally identifiable

503
00:17:47,200 --> 00:17:48,559
information

504
00:17:48,559 --> 00:17:51,360
only in the case where that service

505
00:17:51,360 --> 00:17:52,400
engineer

506
00:17:52,400 --> 00:17:54,160
is assigned to a ticket that is

507
00:17:54,160 --> 00:17:55,600
responsible

508
00:17:55,600 --> 00:17:57,200
for the person who raised that ticket so

509
00:17:57,200 --> 00:17:58,799
if a person raised a ticket

510
00:17:58,799 --> 00:18:01,120
the service engineer should only have

511
00:18:01,120 --> 00:18:02,880
access to that person's

512
00:18:02,880 --> 00:18:05,200
personally identifiable information and

513
00:18:05,200 --> 00:18:06,559
that's a policy

514
00:18:06,559 --> 00:18:07,919
and that can be something that can be

515
00:18:07,919 --> 00:18:09,840
achieved with opa and there's a lot of

516
00:18:09,840 --> 00:18:11,840
case studies out there on the internet

517
00:18:11,840 --> 00:18:13,679
which is available in the reference

518
00:18:13,679 --> 00:18:15,440
materials as well where you can go in

519
00:18:15,440 --> 00:18:16,400
and explore

520
00:18:16,400 --> 00:18:19,280
various other use cases of robot this

521
00:18:19,280 --> 00:18:20,080
demonstration

522
00:18:20,080 --> 00:18:21,440
and everything else that we're seeing

523
00:18:21,440 --> 00:18:23,280
today is intended to be

524
00:18:23,280 --> 00:18:26,320
very simple to facilitate

525
00:18:26,320 --> 00:18:28,000
an understanding of how all of these

526
00:18:28,000 --> 00:18:30,320
different methods work together

527
00:18:30,320 --> 00:18:32,640
so let's go with that in mind what i'm

528
00:18:32,640 --> 00:18:33,840
going to do

529
00:18:33,840 --> 00:18:37,679
is take you into this code that we saw

530
00:18:37,679 --> 00:18:39,360
the application that we saw front-end

531
00:18:39,360 --> 00:18:40,799
application in the backend application

532
00:18:40,799 --> 00:18:42,160
that we saw and

533
00:18:42,160 --> 00:18:44,400
how that back-end application actually

534
00:18:44,400 --> 00:18:45,760
implemented

535
00:18:45,760 --> 00:18:48,799
opa by creating input and by querying

536
00:18:48,799 --> 00:18:49,600
opa

537
00:18:49,600 --> 00:18:52,640
and whether to decide to allow

538
00:18:52,640 --> 00:18:56,000
or deny a certain api call so this is

539
00:18:56,000 --> 00:18:56,720
the code

540
00:18:56,720 --> 00:18:59,360
from the backend application the backend

541
00:18:59,360 --> 00:19:00,400
apis

542
00:19:00,400 --> 00:19:03,840
i noticed that when i say create input

543
00:19:03,840 --> 00:19:05,120
that's the first box that was

544
00:19:05,120 --> 00:19:07,600
responsible for creating input

545
00:19:07,600 --> 00:19:09,760
one line of code split into four lines

546
00:19:09,760 --> 00:19:11,039
and what we're doing now

547
00:19:11,039 --> 00:19:12,880
what we're doing there is getting the

548
00:19:12,880 --> 00:19:15,360
method the request method from the http

549
00:19:15,360 --> 00:19:15,919
stack

550
00:19:15,919 --> 00:19:18,880
which is get or put and the path whether

551
00:19:18,880 --> 00:19:19,520
it is

552
00:19:19,520 --> 00:19:23,440
list cars or whether it is cars

553
00:19:23,440 --> 00:19:26,320
slash car id and then we need two things

554
00:19:26,320 --> 00:19:27,440
to make this

555
00:19:27,440 --> 00:19:30,640
authorization decision one is the access

556
00:19:30,640 --> 00:19:31,440
token

557
00:19:31,440 --> 00:19:34,559
to see whether the user misbah belonged

558
00:19:34,559 --> 00:19:35,919
to a car admin role

559
00:19:35,919 --> 00:19:38,960
or a supervisor rule or in every

560
00:19:38,960 --> 00:19:41,039
user role which in this case happens to

561
00:19:41,039 --> 00:19:42,559
be that every one user

562
00:19:42,559 --> 00:19:44,799
and then fourth we needed the id token

563
00:19:44,799 --> 00:19:46,320
of the application so we can

564
00:19:46,320 --> 00:19:50,480
look into that id token extract that jwt

565
00:19:50,480 --> 00:19:52,720
do verifications on top of it and then

566
00:19:52,720 --> 00:19:53,919
explore the claims

567
00:19:53,919 --> 00:19:56,400
to on that id token to get the name of

568
00:19:56,400 --> 00:19:57,360
that user

569
00:19:57,360 --> 00:19:59,039
and to get the roles that the user

570
00:19:59,039 --> 00:20:00,559
belongs to so

571
00:20:00,559 --> 00:20:01,600
those are the four things that were

572
00:20:01,600 --> 00:20:04,159
required in this case and if we switch

573
00:20:04,159 --> 00:20:06,159
back to querying open policy

574
00:20:06,159 --> 00:20:09,840
agent so that's the second box

575
00:20:09,840 --> 00:20:12,640
outlining how to query open policy agent

576
00:20:12,640 --> 00:20:15,280
open runs on the url

577
00:20:15,280 --> 00:20:18,480
http localhost 8000 in this

578
00:20:18,480 --> 00:20:20,720
case so all we have to do is call that

579
00:20:20,720 --> 00:20:21,679
url

580
00:20:21,679 --> 00:20:24,799
with our input and then after we query

581
00:20:24,799 --> 00:20:25,840
it open

582
00:20:25,840 --> 00:20:28,880
we have to process opens output

583
00:20:28,880 --> 00:20:30,320
and that's the place where we're

584
00:20:30,320 --> 00:20:32,320
processing the output now those are the

585
00:20:32,320 --> 00:20:34,799
basic three constructs that are needed

586
00:20:34,799 --> 00:20:37,679
the code itself the function module if

587
00:20:37,679 --> 00:20:39,039
you notice it's called

588
00:20:39,039 --> 00:20:42,480
def check authorization and that method

589
00:20:42,480 --> 00:20:44,120
is annotated with

590
00:20:44,120 --> 00:20:48,240
app.before request well in python flask

591
00:20:48,240 --> 00:20:50,799
app.before request is a method that gets

592
00:20:50,799 --> 00:20:51,760
called

593
00:20:51,760 --> 00:20:54,640
before a request is actually processed

594
00:20:54,640 --> 00:20:57,120
so this is a nice place to plug in our

595
00:20:57,120 --> 00:20:58,960
authorization controls

596
00:20:58,960 --> 00:21:02,320
let me exit out a keynote take you into

597
00:21:02,320 --> 00:21:04,880
a debugging session in visual studio

598
00:21:04,880 --> 00:21:05,760
code

599
00:21:05,760 --> 00:21:09,200
where the sample application that we saw

600
00:21:09,200 --> 00:21:12,080
in one of our staging environments it's

601
00:21:12,080 --> 00:21:13,600
actually

602
00:21:13,600 --> 00:21:17,120
the same running in local here

603
00:21:17,120 --> 00:21:20,440
let me try invoking this and when i try

604
00:21:20,440 --> 00:21:22,000
invoke

605
00:21:22,000 --> 00:21:23,919
it's going to call the back-end apis

606
00:21:23,919 --> 00:21:25,600
that are written in flask

607
00:21:25,600 --> 00:21:28,000
and the back-end apis is what is tightly

608
00:21:28,000 --> 00:21:29,679
integrated with opa

609
00:21:29,679 --> 00:21:31,120
and we're going to see that in action

610
00:21:31,120 --> 00:21:32,960
when i hit invoke

611
00:21:32,960 --> 00:21:35,039
i'm going to be taken into the debugging

612
00:21:35,039 --> 00:21:37,200
session in visual studio code

613
00:21:37,200 --> 00:21:39,280
now notice that this is the same code

614
00:21:39,280 --> 00:21:41,919
that you saw on the keynote slide

615
00:21:41,919 --> 00:21:44,640
and because now let me switch back to

616
00:21:44,640 --> 00:21:46,400
the browser again and what we're trying

617
00:21:46,400 --> 00:21:47,360
to do here

618
00:21:47,360 --> 00:21:49,520
is we're trying to get a list of cars

619
00:21:49,520 --> 00:21:51,520
that's all we're trying to do

620
00:21:51,520 --> 00:21:54,000
and going back to visual studio code and

621
00:21:54,000 --> 00:21:57,280
if i continue this debugging session

622
00:21:57,280 --> 00:22:00,320
and explore what's inside the

623
00:22:00,320 --> 00:22:03,520
input you're going to see that the

624
00:22:03,520 --> 00:22:04,400
method is

625
00:22:04,400 --> 00:22:07,760
options and the path is cars notice the

626
00:22:07,760 --> 00:22:09,600
method is options and there's no value

627
00:22:09,600 --> 00:22:10,640
for

628
00:22:10,640 --> 00:22:12,799
authorization there's no value for the

629
00:22:12,799 --> 00:22:14,640
access token there

630
00:22:14,640 --> 00:22:17,360
that's because before an actual method

631
00:22:17,360 --> 00:22:18,000
gets

632
00:22:18,000 --> 00:22:21,360
called in an ajax fashion uh because of

633
00:22:21,360 --> 00:22:23,120
same origin

634
00:22:23,120 --> 00:22:25,600
policy and cross-origin resource sharing

635
00:22:25,600 --> 00:22:26,960
you have to get over the

636
00:22:26,960 --> 00:22:29,039
course options work first so i'm going

637
00:22:29,039 --> 00:22:30,080
to skip to

638
00:22:30,080 --> 00:22:32,240
i'm going to skip that and then break

639
00:22:32,240 --> 00:22:35,120
again to a place where we're actually

640
00:22:35,120 --> 00:22:37,600
breaking into the actual request now if

641
00:22:37,600 --> 00:22:38,720
you look at the input

642
00:22:38,720 --> 00:22:41,280
there is the get method for cars and

643
00:22:41,280 --> 00:22:43,200
there we have the access token

644
00:22:43,200 --> 00:22:45,840
which is a bearer token extracted from

645
00:22:45,840 --> 00:22:47,120
the original method

646
00:22:47,120 --> 00:22:48,960
and the id token again extracted from

647
00:22:48,960 --> 00:22:50,240
the original method

648
00:22:50,240 --> 00:22:52,000
and right after that we're going to

649
00:22:52,000 --> 00:22:53,520
query oppa so that

650
00:22:53,520 --> 00:22:55,600
request dot post is actually what's

651
00:22:55,600 --> 00:22:56,640
going to query oppa

652
00:22:56,640 --> 00:22:59,200
and opa after we're querying oppa we're

653
00:22:59,200 --> 00:23:01,280
going to process that request as usual

654
00:23:01,280 --> 00:23:03,039
and in this case we're converting

655
00:23:03,039 --> 00:23:05,200
because oppa gave back jason

656
00:23:05,200 --> 00:23:06,960
we're concerning that we're converting

657
00:23:06,960 --> 00:23:08,559
that json back into something that we

658
00:23:08,559 --> 00:23:10,240
can consume in this case

659
00:23:10,240 --> 00:23:13,679
which is true or false

660
00:23:13,679 --> 00:23:17,039
and again we're logging that and if it's

661
00:23:17,039 --> 00:23:19,120
if the verb is not allowed if this

662
00:23:19,120 --> 00:23:20,880
operation is not allowed

663
00:23:20,880 --> 00:23:24,080
then we're simply going to

664
00:23:24,080 --> 00:23:28,320
abort that request and notice that

665
00:23:28,320 --> 00:23:31,120
the input that we sent which had four

666
00:23:31,120 --> 00:23:32,159
things

667
00:23:32,159 --> 00:23:35,760
is also printed on the log console here

668
00:23:35,760 --> 00:23:36,400
let me

669
00:23:36,400 --> 00:23:38,640
copy this so we can use that later and

670
00:23:38,640 --> 00:23:40,640
now if we continue this debugging

671
00:23:40,640 --> 00:23:42,080
session

672
00:23:42,080 --> 00:23:44,880
go back to our browser that request is

673
00:23:44,880 --> 00:23:46,000
allowed

674
00:23:46,000 --> 00:23:49,760
now if we try to put cars

675
00:23:49,760 --> 00:23:53,919
a car id with some sample data

676
00:23:53,919 --> 00:23:57,919
as long as it's json it's all right

677
00:23:57,919 --> 00:24:02,720
so if i copy this and paste that here

678
00:24:02,720 --> 00:24:05,120
and because we did not change this

679
00:24:05,120 --> 00:24:06,720
policy we only changed it

680
00:24:06,720 --> 00:24:08,480
in in our lab environment in the

681
00:24:08,480 --> 00:24:10,320
beginning because we didn't change this

682
00:24:10,320 --> 00:24:11,440
policy

683
00:24:11,440 --> 00:24:16,559
if i step through this debugging session

684
00:24:16,880 --> 00:24:18,799
and verify whether that's a course

685
00:24:18,799 --> 00:24:20,559
request or not okay that's a course

686
00:24:20,559 --> 00:24:22,080
request and let's look at that

687
00:24:22,080 --> 00:24:24,000
i'll break back on the original request

688
00:24:24,000 --> 00:24:27,520
again so there we're trying to put cars

689
00:24:27,520 --> 00:24:29,919
with car and car id with an access token

690
00:24:29,919 --> 00:24:31,120
an id token

691
00:24:31,120 --> 00:24:33,440
is it going to be allowed well by

692
00:24:33,440 --> 00:24:34,159
default

693
00:24:34,159 --> 00:24:36,000
it's not allowed so if we check the

694
00:24:36,000 --> 00:24:38,159
response

695
00:24:38,159 --> 00:24:41,679
we get a false error and hence

696
00:24:41,679 --> 00:24:44,320
because it is false we're going to abort

697
00:24:44,320 --> 00:24:45,520
that request

698
00:24:45,520 --> 00:24:48,960
with a 403 go back to the browser

699
00:24:48,960 --> 00:24:51,840
and request just forbidden now in a neat

700
00:24:51,840 --> 00:24:53,840
way without changing anything in our

701
00:24:53,840 --> 00:24:55,279
python code

702
00:24:55,279 --> 00:24:57,360
as we saw in the demonstration initially

703
00:24:57,360 --> 00:24:58,720
we were able to modify

704
00:24:58,720 --> 00:25:00,480
policies and apply changes to an

705
00:25:00,480 --> 00:25:02,159
application dynamically

706
00:25:02,159 --> 00:25:03,520
without changing a single line on the

707
00:25:03,520 --> 00:25:06,960
application code because the application

708
00:25:06,960 --> 00:25:10,080
is coupled with open policy agent as a

709
00:25:10,080 --> 00:25:10,799
policy

710
00:25:10,799 --> 00:25:13,200
decision making engine the only thing

711
00:25:13,200 --> 00:25:14,000
that underwent

712
00:25:14,000 --> 00:25:17,520
change in this case is the api z dot

713
00:25:17,520 --> 00:25:21,039
rego policy and that policy is something

714
00:25:21,039 --> 00:25:22,240
i can show here

715
00:25:22,240 --> 00:25:25,760
in my visual studio there api odd c

716
00:25:25,760 --> 00:25:29,440
dot policy so that was the policy that

717
00:25:29,440 --> 00:25:30,960
was responsible for making the

718
00:25:30,960 --> 00:25:32,720
authorization decisions

719
00:25:32,720 --> 00:25:36,720
and this is the policy that we modified

720
00:25:36,720 --> 00:25:39,840
to allow misbah the user that had an

721
00:25:39,840 --> 00:25:42,000
everyone role to be able to put cars

722
00:25:42,000 --> 00:25:44,240
i have this policy already presented

723
00:25:44,240 --> 00:25:46,159
here in the regular playground what is a

724
00:25:46,159 --> 00:25:47,520
regular playground regular breakdown is

725
00:25:47,520 --> 00:25:48,880
a tool provided by the open police agent

726
00:25:48,880 --> 00:25:50,799
developers themselves to

727
00:25:50,799 --> 00:25:53,360
uh for you to troubleshoot allow edit

728
00:25:53,360 --> 00:25:54,000
build

729
00:25:54,000 --> 00:25:56,960
modify policies now this is the policy

730
00:25:56,960 --> 00:25:59,600
that was in the file api.c.0.

731
00:25:59,600 --> 00:26:01,360
now if that looks a little bit daunting

732
00:26:01,360 --> 00:26:03,360
this policy didn't look like this

733
00:26:03,360 --> 00:26:05,200
on the first attempt i'm the first to

734
00:26:05,200 --> 00:26:06,799
tell the policy looked like this

735
00:26:06,799 --> 00:26:09,600
well i just picked a sample from all the

736
00:26:09,600 --> 00:26:12,000
examples that are available here

737
00:26:12,000 --> 00:26:14,320
and i picked a specific one where i had

738
00:26:14,320 --> 00:26:16,720
to decode the chat tokens because from

739
00:26:16,720 --> 00:26:18,080
azure ad

740
00:26:18,080 --> 00:26:19,840
the access token on the id token that

741
00:26:19,840 --> 00:26:21,360
we're supposed to parse

742
00:26:21,360 --> 00:26:24,640
is the jot format tokens now this is the

743
00:26:24,640 --> 00:26:25,679
policy that i took

744
00:26:25,679 --> 00:26:28,640
as an example and started modifying this

745
00:26:28,640 --> 00:26:29,679
policy

746
00:26:29,679 --> 00:26:33,200
which today has blown up to be a policy

747
00:26:33,200 --> 00:26:34,799
a full-fledged policy that can work for

748
00:26:34,799 --> 00:26:36,000
this application

749
00:26:36,000 --> 00:26:38,559
and notice that these are different

750
00:26:38,559 --> 00:26:40,000
variables by default

751
00:26:40,000 --> 00:26:44,159
we're allowing it to false and uh here

752
00:26:44,159 --> 00:26:46,320
we're allowing it to true now i'm not

753
00:26:46,320 --> 00:26:48,159
going to go inside the syntax

754
00:26:48,159 --> 00:26:50,159
of what it takes to write an open policy

755
00:26:50,159 --> 00:26:51,840
agent in regal

756
00:26:51,840 --> 00:26:53,679
because there's a great course from the

757
00:26:53,679 --> 00:26:55,679
creators of open policy agent themselves

758
00:26:55,679 --> 00:26:57,120
it's a free course

759
00:26:57,120 --> 00:26:58,799
where i learned where you can also learn

760
00:26:58,799 --> 00:27:00,240
how to write policies an open policy

761
00:27:00,240 --> 00:27:00,799
agent

762
00:27:00,799 --> 00:27:03,360
but the tool itself these are the this

763
00:27:03,360 --> 00:27:04,640
is the input that we gave

764
00:27:04,640 --> 00:27:06,480
to the tool earlier remember there were

765
00:27:06,480 --> 00:27:07,760
four things the method

766
00:27:07,760 --> 00:27:10,400
path access token and an id token so

767
00:27:10,400 --> 00:27:12,000
those are the four things given

768
00:27:12,000 --> 00:27:16,159
as an input and when i hit evaluate

769
00:27:16,159 --> 00:27:19,600
then this part then an open playground

770
00:27:19,600 --> 00:27:20,559
is going to take this

771
00:27:20,559 --> 00:27:23,600
input supply to the policy that is

772
00:27:23,600 --> 00:27:25,200
present on the radio playground

773
00:27:25,200 --> 00:27:28,559
evaluate and supply the results here

774
00:27:28,559 --> 00:27:32,840
now if we check the value allow that is

775
00:27:32,840 --> 00:27:34,240
false

776
00:27:34,240 --> 00:27:37,120
in this case it happens to be false and

777
00:27:37,120 --> 00:27:39,279
then as you can also see

778
00:27:39,279 --> 00:27:42,000
uh because i wanted this policy to look

779
00:27:42,000 --> 00:27:43,919
a little bit modular

780
00:27:43,919 --> 00:27:48,279
first i'm extracting the value of the id

781
00:27:48,279 --> 00:27:49,679
tokenclaims.name

782
00:27:49,679 --> 00:27:52,720
and storing it into a variable user and

783
00:27:52,720 --> 00:27:53,200
that's

784
00:27:53,200 --> 00:27:57,840
the variable that we're consuming here

785
00:27:58,000 --> 00:28:01,360
we have to represent a requested

786
00:28:01,360 --> 00:28:04,000
get and if the path is closed and if

787
00:28:04,000 --> 00:28:04,399
there's

788
00:28:04,399 --> 00:28:06,399
any authenticated user and how do we

789
00:28:06,399 --> 00:28:08,640
know if there's any authenticated user

790
00:28:08,640 --> 00:28:11,200
well as long as there is an id token

791
00:28:11,200 --> 00:28:11,840
claim

792
00:28:11,840 --> 00:28:14,320
with a value name and that means there's

793
00:28:14,320 --> 00:28:16,080
an there's an authenticated user

794
00:28:16,080 --> 00:28:17,200
and that's the only thing that

795
00:28:17,200 --> 00:28:19,039
supplements that claim saying okay we

796
00:28:19,039 --> 00:28:20,799
have an authenticated user

797
00:28:20,799 --> 00:28:22,799
and when we have to check whether

798
00:28:22,799 --> 00:28:24,080
someone is a manager

799
00:28:24,080 --> 00:28:26,640
or not then that goes a little bit

800
00:28:26,640 --> 00:28:27,360
deeper

801
00:28:27,360 --> 00:28:30,559
and remember the access token also has

802
00:28:30,559 --> 00:28:33,200
rules as a part of this claims we're

803
00:28:33,200 --> 00:28:34,480
storing that into a variable

804
00:28:34,480 --> 00:28:36,159
and if i scroll down all the way to the

805
00:28:36,159 --> 00:28:37,840
bottom

806
00:28:37,840 --> 00:28:39,760
i have this little helper methods that

807
00:28:39,760 --> 00:28:41,360
say he's a car

808
00:28:41,360 --> 00:28:44,799
admin hey as long as the car admin is

809
00:28:44,799 --> 00:28:45,520
present

810
00:28:45,520 --> 00:28:48,080
on the list of rules it will return as a

811
00:28:48,080 --> 00:28:49,600
part of this job token

812
00:28:49,600 --> 00:28:51,919
and that person is a car admin and i'll

813
00:28:51,919 --> 00:28:53,919
be i'm consuming that rule

814
00:28:53,919 --> 00:28:56,399
i mean consuming that variable inside

815
00:28:56,399 --> 00:28:57,039
this

816
00:28:57,039 --> 00:29:00,480
allowed rule here that's one way to play

817
00:29:00,480 --> 00:29:02,960
with regular policies if i switch back

818
00:29:02,960 --> 00:29:04,720
to my keynote session there's plenty

819
00:29:04,720 --> 00:29:06,000
other ways to play with

820
00:29:06,000 --> 00:29:09,279
the policies as well we're done with

821
00:29:09,279 --> 00:29:09,919
that code

822
00:29:09,919 --> 00:29:13,360
demonstration there

823
00:29:13,360 --> 00:29:15,440
oh again the other important thing to

824
00:29:15,440 --> 00:29:16,799
remember is

825
00:29:16,799 --> 00:29:19,200
just responsible for making the policy

826
00:29:19,200 --> 00:29:20,720
decision

827
00:29:20,720 --> 00:29:22,399
oppa doesn't care whether someone

828
00:29:22,399 --> 00:29:25,039
enforces or allows or denies a request

829
00:29:25,039 --> 00:29:27,279
opa just tells you whether something is

830
00:29:27,279 --> 00:29:29,279
allowed or not open just told us whether

831
00:29:29,279 --> 00:29:30,480
something is allowed or not

832
00:29:30,480 --> 00:29:33,520
in our sample example and then

833
00:29:33,520 --> 00:29:35,840
we had an if statement in our python

834
00:29:35,840 --> 00:29:36,720
code to

835
00:29:36,720 --> 00:29:39,760
enforce and abort that policy when that

836
00:29:39,760 --> 00:29:42,080
request needed to be

837
00:29:42,080 --> 00:29:44,480
denied so it's the responsible of a

838
00:29:44,480 --> 00:29:46,480
service in this case the service was an

839
00:29:46,480 --> 00:29:48,480
api in our demo application

840
00:29:48,480 --> 00:29:50,559
it can be kubernetes admission

841
00:29:50,559 --> 00:29:51,600
controller

842
00:29:51,600 --> 00:29:54,720
or it can be your istio service mesh or

843
00:29:54,720 --> 00:29:57,919
it can be your asp.net core application

844
00:29:57,919 --> 00:30:00,480
or whatnot so open just makes that

845
00:30:00,480 --> 00:30:02,320
policy decision and it's the responsible

846
00:30:02,320 --> 00:30:02,960
of the

847
00:30:02,960 --> 00:30:06,000
backend service to enforce that policy

848
00:30:06,000 --> 00:30:06,640
decision

849
00:30:06,640 --> 00:30:08,960
all right policies right now we just saw

850
00:30:08,960 --> 00:30:10,000
the first

851
00:30:10,000 --> 00:30:13,559
uh we just saw the last example there

852
00:30:13,559 --> 00:30:15,120
play.openpolicyagent.org

853
00:30:15,120 --> 00:30:17,120
there's also an add-on available for

854
00:30:17,120 --> 00:30:18,480
visual city of code

855
00:30:18,480 --> 00:30:19,919
where you can write these policies and

856
00:30:19,919 --> 00:30:21,600
develop debug and

857
00:30:21,600 --> 00:30:22,880
check the code coverage of these

858
00:30:22,880 --> 00:30:25,039
policies in visual studio code right

859
00:30:25,039 --> 00:30:25,840
itself

860
00:30:25,840 --> 00:30:28,720
and also has a reply environment just

861
00:30:28,720 --> 00:30:30,640
like we have in python ruby and other

862
00:30:30,640 --> 00:30:32,080
programming languages that can be

863
00:30:32,080 --> 00:30:33,039
integrated

864
00:30:33,039 --> 00:30:34,840
right into your terminal or windows

865
00:30:34,840 --> 00:30:36,559
console

866
00:30:36,559 --> 00:30:40,320
with that there's also for the reference

867
00:30:40,320 --> 00:30:42,399
materials we have a curated list of

868
00:30:42,399 --> 00:30:44,080
custom policy scope projects there's

869
00:30:44,080 --> 00:30:45,840
blogs video tutorials

870
00:30:45,840 --> 00:30:47,279
things that we use things that we've

871
00:30:47,279 --> 00:30:48,960
collected and here's that

872
00:30:48,960 --> 00:30:51,600
awesome free course from open policy

873
00:30:51,600 --> 00:30:52,000
agent

874
00:30:52,000 --> 00:30:54,159
themselves on the academy website it's

875
00:30:54,159 --> 00:30:55,679
free check that out

876
00:30:55,679 --> 00:30:57,760
it doesn't tell you uh everything that

877
00:30:57,760 --> 00:30:59,360
we've covered in the session today but

878
00:30:59,360 --> 00:31:01,679
it's a great course to get started

879
00:31:01,679 --> 00:31:04,039
uh to get a solid understanding of the

880
00:31:04,039 --> 00:31:05,200
regular

881
00:31:05,200 --> 00:31:08,640
policy syntax and other things

882
00:31:08,640 --> 00:31:12,000
now is a great time to ask question

883
00:31:12,000 --> 00:31:13,760
i hope that session was a little bit

884
00:31:13,760 --> 00:31:15,919
informative to you and i've stayed true

885
00:31:15,919 --> 00:31:16,559
to

886
00:31:16,559 --> 00:31:19,039
explain the basic nuts and bolts of what

887
00:31:19,039 --> 00:31:20,559
it takes to integrate oppa

888
00:31:20,559 --> 00:31:22,799
as policy as code technology in your

889
00:31:22,799 --> 00:31:23,840
applications and

890
00:31:23,840 --> 00:31:26,159
your technology stack i'm open for any

891
00:31:26,159 --> 00:31:32,320
questions that you might have right now

892
00:31:32,320 --> 00:31:34,399
you

