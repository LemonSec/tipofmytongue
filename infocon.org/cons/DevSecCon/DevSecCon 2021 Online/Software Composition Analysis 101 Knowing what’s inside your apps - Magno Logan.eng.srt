1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,240 --> 00:00:14,080
hello everyone and welcome to

3
00:00:14,080 --> 00:00:17,199
my uh my presentation this talk is going

4
00:00:17,199 --> 00:00:19,039
to be about software composition

5
00:00:19,039 --> 00:00:20,640
analysis 101

6
00:00:20,640 --> 00:00:23,039
knowing what's inside your apps my name

7
00:00:23,039 --> 00:00:24,960
is magnu logan and i work for

8
00:00:24,960 --> 00:00:28,400
trend micro research okay

9
00:00:28,400 --> 00:00:30,240
so just a little bit about myself before

10
00:00:30,240 --> 00:00:32,399
we begin i'm an information security

11
00:00:32,399 --> 00:00:34,160
specialist at trend micro

12
00:00:34,160 --> 00:00:36,719
uh where i do cloud and container

13
00:00:36,719 --> 00:00:38,000
security research

14
00:00:38,000 --> 00:00:40,239
i'm also a application security and

15
00:00:40,239 --> 00:00:42,000
devsecops practitioner

16
00:00:42,000 --> 00:00:43,840
working with application security since

17
00:00:43,840 --> 00:00:45,440
2011

18
00:00:45,440 --> 00:00:48,559
and i've deployed multiple uh

19
00:00:48,559 --> 00:00:51,440
application solu solution tools such as

20
00:00:51,440 --> 00:00:52,000
sas

21
00:00:52,000 --> 00:00:55,120
das and software composition analysis on

22
00:00:55,120 --> 00:00:56,640
many organizations

23
00:00:56,640 --> 00:00:59,320
i also have a personal blog here at

24
00:00:59,320 --> 00:01:00,640
katanasac.com

25
00:01:00,640 --> 00:01:03,199
which which uh where i publish some

26
00:01:03,199 --> 00:01:04,400
articles

27
00:01:04,400 --> 00:01:08,240
at least once a month those are also my

28
00:01:08,240 --> 00:01:11,119
uh social network there everything at

29
00:01:11,119 --> 00:01:13,520
magna logan

30
00:01:13,520 --> 00:01:16,400
okay so what is the agenda for for this

31
00:01:16,400 --> 00:01:17,040
talk right

32
00:01:17,040 --> 00:01:19,600
so it's a software composition analysis

33
00:01:19,600 --> 00:01:22,240
101 so it's a beginner talk on software

34
00:01:22,240 --> 00:01:23,280
composition knowledge and

35
00:01:23,280 --> 00:01:25,040
what it means right so we're going to

36
00:01:25,040 --> 00:01:26,320
talk about what what is

37
00:01:26,320 --> 00:01:29,200
sca what it's an s bomb right why should

38
00:01:29,200 --> 00:01:30,400
you worry about it

39
00:01:30,400 --> 00:01:32,560
uh also some supply chain attacks that

40
00:01:32,560 --> 00:01:34,000
are related to sca

41
00:01:34,000 --> 00:01:37,040
some best practices and some tools

42
00:01:37,040 --> 00:01:39,759
and at the end i also try to do a quick

43
00:01:39,759 --> 00:01:40,400
demo

44
00:01:40,400 --> 00:01:42,960
of how how that would work in your

45
00:01:42,960 --> 00:01:45,119
scenario

46
00:01:45,119 --> 00:01:48,720
okay so yeah sca right software

47
00:01:48,720 --> 00:01:50,640
composition analysis and it has

48
00:01:50,640 --> 00:01:52,799
many different names as well as library

49
00:01:52,799 --> 00:01:54,000
analysis third-party

50
00:01:54,000 --> 00:01:57,360
dependency or open source security uh

51
00:01:57,360 --> 00:01:59,360
what does that mean if you haven't heard

52
00:01:59,360 --> 00:02:02,159
about it it's a solution that

53
00:02:02,159 --> 00:02:06,079
application security uh teams are using

54
00:02:06,079 --> 00:02:10,000
to understand the components of their

55
00:02:10,000 --> 00:02:10,560
software

56
00:02:10,560 --> 00:02:13,760
understand their um their version

57
00:02:13,760 --> 00:02:15,680
and understand if they're if there are

58
00:02:15,680 --> 00:02:17,760
any public known vulnerability

59
00:02:17,760 --> 00:02:20,080
on those components right and make sure

60
00:02:20,080 --> 00:02:21,520
that they secure those

61
00:02:21,520 --> 00:02:24,879
and keep them up to date so sca same it

62
00:02:24,879 --> 00:02:26,800
at providing open source software with

63
00:02:26,800 --> 00:02:28,239
governance security and

64
00:02:28,239 --> 00:02:31,360
also provenance right so so that's uh

65
00:02:31,360 --> 00:02:34,319
also uh uh a big thing here so

66
00:02:34,319 --> 00:02:35,440
understand

67
00:02:35,440 --> 00:02:37,680
where those third party software are

68
00:02:37,680 --> 00:02:38,480
coming from

69
00:02:38,480 --> 00:02:40,879
right if they have been tampered with if

70
00:02:40,879 --> 00:02:42,480
someone has compromised

71
00:02:42,480 --> 00:02:45,440
the repository of that developer or of

72
00:02:45,440 --> 00:02:46,000
that

73
00:02:46,000 --> 00:02:48,000
library that you're using so that's very

74
00:02:48,000 --> 00:02:50,080
important here

75
00:02:50,080 --> 00:02:54,080
and one uh one another acronym

76
00:02:54,080 --> 00:02:56,080
in in related to the software

77
00:02:56,080 --> 00:02:57,519
composition analysis is

78
00:02:57,519 --> 00:03:00,959
s-bomb right software built materials

79
00:03:00,959 --> 00:03:02,720
and i'm gonna talk about that in the

80
00:03:02,720 --> 00:03:05,680
next few slides

81
00:03:05,680 --> 00:03:08,959
so to to understand to to to do

82
00:03:08,959 --> 00:03:10,560
uh software composition analysis

83
00:03:10,560 --> 00:03:12,480
properly uh

84
00:03:12,480 --> 00:03:15,200
usually tools and organizations they

85
00:03:15,200 --> 00:03:16,560
need at least three things

86
00:03:16,560 --> 00:03:19,120
right they need an application manifest

87
00:03:19,120 --> 00:03:20,800
which gives instructions on how the

88
00:03:20,800 --> 00:03:22,159
software should work

89
00:03:22,159 --> 00:03:24,799
right they need the dependency metadata

90
00:03:24,799 --> 00:03:26,400
which is the metadata related to the

91
00:03:26,400 --> 00:03:28,080
dependencies in the code

92
00:03:28,080 --> 00:03:30,239
and they also need the vulnerability

93
00:03:30,239 --> 00:03:31,280
data sources

94
00:03:31,280 --> 00:03:33,280
which is a database of vulnerability

95
00:03:33,280 --> 00:03:35,200
information like nvd

96
00:03:35,200 --> 00:03:37,680
right it can be private or a public data

97
00:03:37,680 --> 00:03:38,879
source

98
00:03:38,879 --> 00:03:41,040
one thing to note here that's very

99
00:03:41,040 --> 00:03:42,000
important

100
00:03:42,000 --> 00:03:45,440
on sca is that not

101
00:03:45,440 --> 00:03:49,840
all uh open source vulnerabilities

102
00:03:49,840 --> 00:03:52,640
right security vulnerabilities are

103
00:03:52,640 --> 00:03:53,360
published

104
00:03:53,360 --> 00:03:56,480
are get a cve right so

105
00:03:56,480 --> 00:03:59,519
there's not it's not like a regular

106
00:03:59,519 --> 00:04:02,000
uh vulnerability disclosure process

107
00:04:02,000 --> 00:04:04,560
where you go to miter you get a cv id

108
00:04:04,560 --> 00:04:06,480
and you publish and all that stuff

109
00:04:06,480 --> 00:04:08,400
sometimes that doesn't happen

110
00:04:08,400 --> 00:04:11,040
because those vulnerabilities can be

111
00:04:11,040 --> 00:04:13,280
found by developers and by contributors

112
00:04:13,280 --> 00:04:14,720
of the open source

113
00:04:14,720 --> 00:04:18,238
um to an open source community

114
00:04:18,238 --> 00:04:20,478
and they usually just get an issue on

115
00:04:20,478 --> 00:04:21,440
their github

116
00:04:21,440 --> 00:04:23,680
and they get fixed and that's it so

117
00:04:23,680 --> 00:04:26,000
that's very important to understand that

118
00:04:26,000 --> 00:04:27,680
because that's going to give you

119
00:04:27,680 --> 00:04:29,759
information on the quality

120
00:04:29,759 --> 00:04:32,240
of those tools right if a tool only

121
00:04:32,240 --> 00:04:34,000
looks at nvd

122
00:04:34,000 --> 00:04:36,080
it might not be enough for you to find

123
00:04:36,080 --> 00:04:37,520
all the vulnerabilities

124
00:04:37,520 --> 00:04:40,960
in your your code in your libraries

125
00:04:40,960 --> 00:04:44,320
okay so what is like a bill of material

126
00:04:44,320 --> 00:04:45,919
right i talked about s-bomb

127
00:04:45,919 --> 00:04:48,639
software of uh software built materials

128
00:04:48,639 --> 00:04:49,440
but

129
00:04:49,440 --> 00:04:52,560
what is a bill of materials basically as

130
00:04:52,560 --> 00:04:54,320
a template here that i have on this

131
00:04:54,320 --> 00:04:56,240
slide it's a list

132
00:04:56,240 --> 00:04:59,199
of materials that make up a product make

133
00:04:59,199 --> 00:04:59,600
up

134
00:04:59,600 --> 00:05:02,639
an order right so uh

135
00:05:02,639 --> 00:05:04,639
here you have different products

136
00:05:04,639 --> 00:05:06,160
different quantities

137
00:05:06,160 --> 00:05:08,639
manufacturers models suppliers and all

138
00:05:08,639 --> 00:05:09,520
that stuff

139
00:05:09,520 --> 00:05:11,680
the same thing applies to the software

140
00:05:11,680 --> 00:05:12,720
materials

141
00:05:12,720 --> 00:05:15,520
right so that you have a similar uh

142
00:05:15,520 --> 00:05:17,120
process here so it's a list of

143
00:05:17,120 --> 00:05:18,080
components

144
00:05:18,080 --> 00:05:20,720
in a piece of software right it's

145
00:05:20,720 --> 00:05:21,360
usually

146
00:05:21,360 --> 00:05:23,600
uh made out of software is usually made

147
00:05:23,600 --> 00:05:25,280
out of open source and sometimes

148
00:05:25,280 --> 00:05:26,800
conversion components right

149
00:05:26,800 --> 00:05:29,039
so you need to understand from these

150
00:05:29,039 --> 00:05:32,160
components what version are you using

151
00:05:32,160 --> 00:05:35,039
if that version is up to date if that

152
00:05:35,039 --> 00:05:37,039
version of that library doesn't have any

153
00:05:37,039 --> 00:05:39,039
public known vulnerability

154
00:05:39,039 --> 00:05:41,840
and and so that creates the ass bomb

155
00:05:41,840 --> 00:05:43,440
that be of materials that

156
00:05:43,440 --> 00:05:46,639
creates your your software your product

157
00:05:46,639 --> 00:05:48,240
so it also decry describes the

158
00:05:48,240 --> 00:05:50,080
components in a product right

159
00:05:50,080 --> 00:05:52,880
and it's very similar to ingredients uh

160
00:05:52,880 --> 00:05:55,199
a list of ingredients in a packaged food

161
00:05:55,199 --> 00:05:56,000
right so

162
00:05:56,000 --> 00:05:58,400
you have like the ingredients there the

163
00:05:58,400 --> 00:06:00,400
the s-bomb has even more than that not

164
00:06:00,400 --> 00:06:01,520
just ingredients

165
00:06:01,520 --> 00:06:03,840
but usually have the quantities like the

166
00:06:03,840 --> 00:06:04,639
versions

167
00:06:04,639 --> 00:06:07,919
right and and also might have uh uh the

168
00:06:07,919 --> 00:06:08,639
provenance

169
00:06:08,639 --> 00:06:11,120
where does this library or this

170
00:06:11,120 --> 00:06:14,400
dependency is coming from

171
00:06:15,039 --> 00:06:18,240
okay so you have to create some s bombs

172
00:06:18,240 --> 00:06:19,680
you have some standards and some

173
00:06:19,680 --> 00:06:20,880
resources

174
00:06:20,880 --> 00:06:24,479
um the first one here cyclone dx is a

175
00:06:24,479 --> 00:06:25,440
lightweight

176
00:06:25,440 --> 00:06:27,919
software built material standard right

177
00:06:27,919 --> 00:06:29,039
it just joined

178
00:06:29,039 --> 00:06:31,280
uh uh oasp right the open web

179
00:06:31,280 --> 00:06:33,199
application security project recently so

180
00:06:33,199 --> 00:06:35,759
that's good good to know

181
00:06:35,759 --> 00:06:38,560
you also have spdx which another open

182
00:06:38,560 --> 00:06:40,160
standard for communicating software

183
00:06:40,160 --> 00:06:41,680
built material information

184
00:06:41,680 --> 00:06:44,960
which belongs to the linux foundation

185
00:06:44,960 --> 00:06:47,919
which is also very well used and you

186
00:06:47,919 --> 00:06:50,080
also have dependency track

187
00:06:50,080 --> 00:06:52,720
which is another project from oas allows

188
00:06:52,720 --> 00:06:53,840
you to use

189
00:06:53,840 --> 00:06:55,440
those software built materials to

190
00:06:55,440 --> 00:06:57,520
identify and reduce risk

191
00:06:57,520 --> 00:06:59,520
in the software supply chain right so

192
00:06:59,520 --> 00:07:01,280
you can monitor

193
00:07:01,280 --> 00:07:04,240
what are your dependencies and if they

194
00:07:04,240 --> 00:07:05,120
have any

195
00:07:05,120 --> 00:07:10,160
any known issues right okay

196
00:07:10,160 --> 00:07:13,120
so why should you worry like why should

197
00:07:13,120 --> 00:07:15,120
i worry about dependencies right it's

198
00:07:15,120 --> 00:07:17,039
not code that's being created by my

199
00:07:17,039 --> 00:07:18,080
developers

200
00:07:18,080 --> 00:07:20,160
uh not not code being created by my

201
00:07:20,160 --> 00:07:21,680
organization right

202
00:07:21,680 --> 00:07:24,080
yeah that's true but you're using it

203
00:07:24,080 --> 00:07:25,599
right you rely on it

204
00:07:25,599 --> 00:07:29,199
and and therefore your applications your

205
00:07:29,199 --> 00:07:31,599
security relies on it as well

206
00:07:31,599 --> 00:07:34,800
so it's it is a dependency and it's a

207
00:07:34,800 --> 00:07:36,000
point of failure

208
00:07:36,000 --> 00:07:39,039
on your uh on your security approach

209
00:07:39,039 --> 00:07:40,560
application security approach

210
00:07:40,560 --> 00:07:44,000
on your organization right so here um

211
00:07:44,000 --> 00:07:47,759
a report done by synopsis uh this year

212
00:07:47,759 --> 00:07:50,479
uh i think last year actually was

213
00:07:50,479 --> 00:07:51,680
published that

214
00:07:51,680 --> 00:07:54,960
84 of code bases had at least

215
00:07:54,960 --> 00:07:58,319
one vulnerability right and

216
00:07:58,319 --> 00:08:02,000
with an average of 158 per code base so

217
00:08:02,000 --> 00:08:04,360
that's 158 vulnerabilities

218
00:08:04,360 --> 00:08:06,800
independencies right in the libraries

219
00:08:06,800 --> 00:08:08,960
and dependencies of that software

220
00:08:08,960 --> 00:08:11,199
that's a lot right even if they are not

221
00:08:11,199 --> 00:08:12,639
just all high

222
00:08:12,639 --> 00:08:14,319
and all critical that's a lot of

223
00:08:14,319 --> 00:08:16,800
vulnerabilities

224
00:08:16,800 --> 00:08:19,599
and on the right side here we have a

225
00:08:19,599 --> 00:08:20,080
graph

226
00:08:20,080 --> 00:08:23,039
that shows the average of open source

227
00:08:23,039 --> 00:08:24,720
components per application

228
00:08:24,720 --> 00:08:29,520
right in 2016 we had an average of 84

229
00:08:29,520 --> 00:08:32,880
and last year 2020 we now have an

230
00:08:32,880 --> 00:08:33,519
average

231
00:08:33,519 --> 00:08:36,719
of 520 weights so that's a lot of

232
00:08:36,719 --> 00:08:38,880
dependencies and libraries to keep track

233
00:08:38,880 --> 00:08:40,399
of and make sure that they are up to

234
00:08:40,399 --> 00:08:40,958
date

235
00:08:40,958 --> 00:08:43,760
they they haven't been compromised and

236
00:08:43,760 --> 00:08:45,680
all that stuff right so

237
00:08:45,680 --> 00:08:49,439
you have to be very careful with that

238
00:08:49,600 --> 00:08:51,760
also from this report from snake the

239
00:08:51,760 --> 00:08:53,600
state of open source security report

240
00:08:53,600 --> 00:08:55,040
published last year

241
00:08:55,040 --> 00:08:57,519
you can see the number of packets

242
00:08:57,519 --> 00:09:00,000
created by the ecosystem per year

243
00:09:00,000 --> 00:09:04,399
and we can clearly see here by the

244
00:09:04,399 --> 00:09:08,080
by the graph that npm has a lot of

245
00:09:08,080 --> 00:09:10,080
packages a lot of libraries that are

246
00:09:10,080 --> 00:09:12,080
created every every year so

247
00:09:12,080 --> 00:09:14,320
that's a huge dependence there and a

248
00:09:14,320 --> 00:09:15,519
huge problem

249
00:09:15,519 --> 00:09:18,080
if you want to use those libraries in

250
00:09:18,080 --> 00:09:19,040
your code

251
00:09:19,040 --> 00:09:22,720
right it's also a huge responsibility as

252
00:09:22,720 --> 00:09:24,959
well

253
00:09:25,519 --> 00:09:28,640
and and here i have the code cocktail

254
00:09:28,640 --> 00:09:31,040
which was presented by

255
00:09:31,040 --> 00:09:34,080
um by mark curfey which was

256
00:09:34,080 --> 00:09:37,920
also one of the founders of oasp um

257
00:09:37,920 --> 00:09:40,640
and in 2018 he presented this code

258
00:09:40,640 --> 00:09:41,440
cocktail

259
00:09:41,440 --> 00:09:44,640
where it shows that

260
00:09:44,640 --> 00:09:47,680
like almost 90 of your code is open

261
00:09:47,680 --> 00:09:48,640
source right

262
00:09:48,640 --> 00:09:51,440
so you have open source code out down at

263
00:09:51,440 --> 00:09:52,399
the bottom here

264
00:09:52,399 --> 00:09:54,320
which are usually like the frameworks

265
00:09:54,320 --> 00:09:56,160
that you use right

266
00:09:56,160 --> 00:09:57,839
and then you have the custom code which

267
00:09:57,839 --> 00:10:00,080
is actually the one that your developers

268
00:10:00,080 --> 00:10:01,920
create your developers write for your

269
00:10:01,920 --> 00:10:03,120
application

270
00:10:03,120 --> 00:10:05,519
and on the top here you have the

271
00:10:05,519 --> 00:10:07,360
libraries the dependencies right

272
00:10:07,360 --> 00:10:09,519
and then on those dependencies you have

273
00:10:09,519 --> 00:10:11,760
direct and indirect dependencies right

274
00:10:11,760 --> 00:10:13,760
or transient dependencies which

275
00:10:13,760 --> 00:10:17,519
are usually the the the hardest problem

276
00:10:17,519 --> 00:10:18,720
to mitigate

277
00:10:18,720 --> 00:10:20,800
because it's a dependency that depends

278
00:10:20,800 --> 00:10:23,200
on another dependency right

279
00:10:23,200 --> 00:10:27,200
so what what can we do here right

280
00:10:27,200 --> 00:10:30,160
and that affects not just applications

281
00:10:30,160 --> 00:10:30,480
but

282
00:10:30,480 --> 00:10:33,440
also uh docker images right so you have

283
00:10:33,440 --> 00:10:34,800
to be very careful

284
00:10:34,800 --> 00:10:37,360
with those libraries and direct indirect

285
00:10:37,360 --> 00:10:38,240
dependencies

286
00:10:38,240 --> 00:10:41,200
and your solution for sca should be

287
00:10:41,200 --> 00:10:43,040
aware of that and understand

288
00:10:43,040 --> 00:10:45,680
that maybe you need to fix update

289
00:10:45,680 --> 00:10:47,440
another library to

290
00:10:47,440 --> 00:10:50,480
uh to cover and mitigate that issue of

291
00:10:50,480 --> 00:10:53,519
another dependency

292
00:10:55,440 --> 00:10:58,160
so why why not why is that important

293
00:10:58,160 --> 00:10:59,519
right i i showed you

294
00:10:59,519 --> 00:11:01,760
how you should why should you worry and

295
00:11:01,760 --> 00:11:03,839
and now i'm gonna show you why why is

296
00:11:03,839 --> 00:11:05,440
that important right

297
00:11:05,440 --> 00:11:08,320
so uh one of the main reasons here if

298
00:11:08,320 --> 00:11:09,360
you heard about

299
00:11:09,360 --> 00:11:12,000
if you work in application security you

300
00:11:12,000 --> 00:11:14,240
probably heard about oasp right

301
00:11:14,240 --> 00:11:16,480
and if you heard about oas we probably

302
00:11:16,480 --> 00:11:18,720
heard about the top 10 oas top 10

303
00:11:18,720 --> 00:11:21,839
right and as we can see here

304
00:11:21,839 --> 00:11:26,320
in the the a9 since 2000 the os version

305
00:11:26,320 --> 00:11:28,000
2013 and now

306
00:11:28,000 --> 00:11:31,360
on the letters version 2017 using

307
00:11:31,360 --> 00:11:33,360
components with non-vulnerabilities

308
00:11:33,360 --> 00:11:37,200
a9 is one of the most common security

309
00:11:37,200 --> 00:11:38,880
risks of web applications

310
00:11:38,880 --> 00:11:42,320
right so we've seen this before

311
00:11:42,320 --> 00:11:45,120
with the uh equifax hack which was

312
00:11:45,120 --> 00:11:47,680
compromised by a library on the apache

313
00:11:47,680 --> 00:11:48,880
stretch right

314
00:11:48,880 --> 00:11:52,000
a few years ago and that keeps happening

315
00:11:52,000 --> 00:11:55,519
that keeps happening right so uh if if

316
00:11:55,519 --> 00:11:58,720
there is this if you're using uh open

317
00:11:58,720 --> 00:11:59,760
source components

318
00:11:59,760 --> 00:12:01,760
in your applications which most of you

319
00:12:01,760 --> 00:12:03,600
are i'm assuming

320
00:12:03,600 --> 00:12:05,519
then you need to be aware of that and

321
00:12:05,519 --> 00:12:06,959
that's one of the risks

322
00:12:06,959 --> 00:12:08,959
on your application that you need to

323
00:12:08,959 --> 00:12:11,839
mitigate

324
00:12:12,320 --> 00:12:14,480
uh here is just an example right

325
00:12:14,480 --> 00:12:16,160
comparing a software

326
00:12:16,160 --> 00:12:18,399
supply chain with a traditional supply

327
00:12:18,399 --> 00:12:20,079
chain this is the

328
00:12:20,079 --> 00:12:23,040
a diagram from a company called conveso

329
00:12:23,040 --> 00:12:24,079
back in brazil

330
00:12:24,079 --> 00:12:27,120
which i used to work for uh years ago

331
00:12:27,120 --> 00:12:29,279
and they did a comparison which is very

332
00:12:29,279 --> 00:12:30,160
interesting

333
00:12:30,160 --> 00:12:32,959
to know and to understand what is the

334
00:12:32,959 --> 00:12:34,399
traditional supply chain

335
00:12:34,399 --> 00:12:36,480
and the software supply chain right so

336
00:12:36,480 --> 00:12:38,480
you have your open source you have

337
00:12:38,480 --> 00:12:40,880
your source code in your dependencies

338
00:12:40,880 --> 00:12:41,600
you have

339
00:12:41,600 --> 00:12:44,480
uh your build systems right your ci cd

340
00:12:44,480 --> 00:12:45,839
and your engineers

341
00:12:45,839 --> 00:12:47,120
then there's the network and

342
00:12:47,120 --> 00:12:49,200
communication between those

343
00:12:49,200 --> 00:12:51,839
right the application repository right

344
00:12:51,839 --> 00:12:53,839
it could be an artifact depository it

345
00:12:53,839 --> 00:12:54,480
could be

346
00:12:54,480 --> 00:12:56,800
uh image registry right and your

347
00:12:56,800 --> 00:12:58,240
deployed systems right

348
00:12:58,240 --> 00:13:00,639
so you have many different steps that

349
00:13:00,639 --> 00:13:01,839
your code

350
00:13:01,839 --> 00:13:04,160
and your application goes through where

351
00:13:04,160 --> 00:13:06,160
they can be compromised so you need to

352
00:13:06,160 --> 00:13:08,880
be very aware of that as well

353
00:13:08,880 --> 00:13:12,560
so what we did uh i'm also part

354
00:13:12,560 --> 00:13:16,560
of the cncf security tag team so

355
00:13:16,560 --> 00:13:18,720
technical advisory group

356
00:13:18,720 --> 00:13:22,320
and we have a list right uh

357
00:13:22,320 --> 00:13:25,920
of supply chain compromises a catalog

358
00:13:25,920 --> 00:13:30,800
since 2003 right so the latest ones 2021

359
00:13:30,800 --> 00:13:32,160
and 2020

360
00:13:32,160 --> 00:13:34,320
shows all the the compromises that

361
00:13:34,320 --> 00:13:36,800
happen that are related to supply chain

362
00:13:36,800 --> 00:13:40,240
and and sometimes um either the source

363
00:13:40,240 --> 00:13:42,480
code libraries third party dependencies

364
00:13:42,480 --> 00:13:45,440
or dev tooling as well so you this is

365
00:13:45,440 --> 00:13:47,519
important for you to understand

366
00:13:47,519 --> 00:13:50,639
how those uh previous attacks happen and

367
00:13:50,639 --> 00:13:52,240
how to protect against

368
00:13:52,240 --> 00:13:55,760
new ones this is the link of this

369
00:13:55,760 --> 00:13:58,079
uh of this list there is more there

370
00:13:58,079 --> 00:13:59,279
because i couldn't

371
00:13:59,279 --> 00:14:01,920
add to the slides here so feel free to

372
00:14:01,920 --> 00:14:03,199
take a look and if you have any

373
00:14:03,199 --> 00:14:04,079
questions

374
00:14:04,079 --> 00:14:07,199
feel free to reach out

375
00:14:08,000 --> 00:14:10,880
here is the software supply chain white

376
00:14:10,880 --> 00:14:11,920
paper

377
00:14:11,920 --> 00:14:16,480
uh which was created by also by the cncf

378
00:14:16,480 --> 00:14:19,360
tag security or security tag team uh it

379
00:14:19,360 --> 00:14:21,519
was released this year and i think

380
00:14:21,519 --> 00:14:24,880
in in may so a few months ago

381
00:14:24,880 --> 00:14:27,760
it has a bunch of information on how to

382
00:14:27,760 --> 00:14:29,760
secure your source code securing the

383
00:14:29,760 --> 00:14:31,680
materials that build pipelines

384
00:14:31,680 --> 00:14:34,399
i highly recommend i was one of the the

385
00:14:34,399 --> 00:14:36,560
authors and and reviewers of this white

386
00:14:36,560 --> 00:14:37,040
paper

387
00:14:37,040 --> 00:14:39,360
i highly recommend you take a look with

388
00:14:39,360 --> 00:14:41,120
more a lot of

389
00:14:41,120 --> 00:14:43,279
in-depth and technical information on on

390
00:14:43,279 --> 00:14:44,399
how to protect

391
00:14:44,399 --> 00:14:46,720
not just your libraries but your whole

392
00:14:46,720 --> 00:14:49,760
build and your development pipeline as

393
00:14:49,760 --> 00:14:52,000
well

394
00:14:52,959 --> 00:14:55,199
also supply chain attacks in the age of

395
00:14:55,199 --> 00:14:57,279
cloud computing they can happen

396
00:14:57,279 --> 00:14:59,440
in different ways different scenarios

397
00:14:59,440 --> 00:15:00,720
right we've seen

398
00:15:00,720 --> 00:15:02,880
we've seen the solar winds attack we've

399
00:15:02,880 --> 00:15:04,240
seen the code cove

400
00:15:04,240 --> 00:15:07,440
uh uh issue and compromise as well and

401
00:15:07,440 --> 00:15:08,880
even

402
00:15:08,880 --> 00:15:12,480
the linux kernel uh issue recently with

403
00:15:12,480 --> 00:15:14,959
the university of minnesota right so

404
00:15:14,959 --> 00:15:17,760
it's it's different ways that attackers

405
00:15:17,760 --> 00:15:19,199
can try to

406
00:15:19,199 --> 00:15:21,600
uh compromise systems and inject

407
00:15:21,600 --> 00:15:22,880
malicious code

408
00:15:22,880 --> 00:15:26,079
in in your application right in this

409
00:15:26,079 --> 00:15:29,040
uh paper here we pub that we published

410
00:15:29,040 --> 00:15:31,120
last year about supply chain attacks in

411
00:15:31,120 --> 00:15:34,240
on the age of cloud computing it shows

412
00:15:34,240 --> 00:15:36,639
uh the possibility of attackers

413
00:15:36,639 --> 00:15:39,040
compromising the developers machines and

414
00:15:39,040 --> 00:15:40,480
their ides

415
00:15:40,480 --> 00:15:42,959
either if they're using their own

416
00:15:42,959 --> 00:15:43,839
computer

417
00:15:43,839 --> 00:15:45,600
right and compromising their own

418
00:15:45,600 --> 00:15:48,079
machines or if they're using

419
00:15:48,079 --> 00:15:52,399
uh cloud ids such as aws cloud9

420
00:15:52,399 --> 00:15:55,600
and vs code and other stuff online right

421
00:15:55,600 --> 00:15:58,720
so if you had they have kind of a vdi

422
00:15:58,720 --> 00:16:01,920
uh setup then there is some some issues

423
00:16:01,920 --> 00:16:03,519
and some security vulnerabilities that

424
00:16:03,519 --> 00:16:04,639
you need to be aware

425
00:16:04,639 --> 00:16:08,160
where an attacker is able to compromise

426
00:16:08,160 --> 00:16:09,199
those environments

427
00:16:09,199 --> 00:16:12,399
and then through that compromise your

428
00:16:12,399 --> 00:16:16,480
source code and your application as well

429
00:16:17,839 --> 00:16:19,360
another thing that was published

430
00:16:19,360 --> 00:16:21,440
recently it was the us

431
00:16:21,440 --> 00:16:24,399
executive order by the eeo well

432
00:16:24,399 --> 00:16:26,000
published last month

433
00:16:26,000 --> 00:16:28,320
and the section there is one whole

434
00:16:28,320 --> 00:16:30,480
section dedicated to the software supply

435
00:16:30,480 --> 00:16:31,600
chain security

436
00:16:31,600 --> 00:16:33,920
and also software composition analysis

437
00:16:33,920 --> 00:16:34,720
in general

438
00:16:34,720 --> 00:16:37,839
right so one of one of uh uh

439
00:16:37,839 --> 00:16:40,639
one of the items there of section four

440
00:16:40,639 --> 00:16:42,800
it says explicitly that

441
00:16:42,800 --> 00:16:44,959
you need to maintain right the us

442
00:16:44,959 --> 00:16:46,240
government and and

443
00:16:46,240 --> 00:16:48,320
all the public organizations of the

444
00:16:48,320 --> 00:16:49,440
united states

445
00:16:49,440 --> 00:16:51,600
need to maintain accurate and update

446
00:16:51,600 --> 00:16:52,639
data

447
00:16:52,639 --> 00:16:54,880
provenance of software code or

448
00:16:54,880 --> 00:16:57,120
components and controls on internal and

449
00:16:57,120 --> 00:16:58,240
third-party software

450
00:16:58,240 --> 00:17:01,440
right so you need to make sure

451
00:17:01,440 --> 00:17:03,199
that you have the most up-to-date

452
00:17:03,199 --> 00:17:05,679
libraries that you know where you're

453
00:17:05,679 --> 00:17:07,359
downloading those libraries from and

454
00:17:07,359 --> 00:17:08,959
that you're checking those libraries

455
00:17:08,959 --> 00:17:10,480
right checking their hashes to make sure

456
00:17:10,480 --> 00:17:11,439
that they're

457
00:17:11,439 --> 00:17:14,480
uh they have uh the proper integrity

458
00:17:14,480 --> 00:17:14,720
that

459
00:17:14,720 --> 00:17:16,880
they haven't been tampered with right

460
00:17:16,880 --> 00:17:18,400
and maintain that

461
00:17:18,400 --> 00:17:21,520
and so so it seems kind of basic to us

462
00:17:21,520 --> 00:17:23,199
but it's very important as as the

463
00:17:23,199 --> 00:17:25,359
application grows and software becomes

464
00:17:25,359 --> 00:17:26,400
more complex

465
00:17:26,400 --> 00:17:28,960
it becomes harder and harder for an

466
00:17:28,960 --> 00:17:30,960
organization to do that right

467
00:17:30,960 --> 00:17:33,039
especially public organizations that

468
00:17:33,039 --> 00:17:34,160
sometimes don't have

469
00:17:34,160 --> 00:17:37,360
enough resources and budget to to

470
00:17:37,360 --> 00:17:40,559
to use the proper tools and and have uh

471
00:17:40,559 --> 00:17:44,399
enough dedicated people to do that

472
00:17:44,640 --> 00:17:47,760
so here's just some examples on uh on

473
00:17:47,760 --> 00:17:49,360
tools that you can use

474
00:17:49,360 --> 00:17:51,840
just a few lists yeah that's not an

475
00:17:51,840 --> 00:17:53,360
extensive list you can look

476
00:17:53,360 --> 00:17:56,559
more uh resources online

477
00:17:56,559 --> 00:17:58,480
but the ones that you can start with if

478
00:17:58,480 --> 00:18:00,480
you don't have enough resources and

479
00:18:00,480 --> 00:18:01,200
budget

480
00:18:01,200 --> 00:18:04,000
right there is the oas dependency check

481
00:18:04,000 --> 00:18:04,960
which is also

482
00:18:04,960 --> 00:18:07,919
uh was also created by oasp and it's

483
00:18:07,919 --> 00:18:09,280
free and open source

484
00:18:09,280 --> 00:18:12,320
and you also have the retire.js

485
00:18:12,320 --> 00:18:14,080
which checks your js libraries

486
00:18:14,080 --> 00:18:15,520
javascript libraries

487
00:18:15,520 --> 00:18:18,160
for any any library that can be outdated

488
00:18:18,160 --> 00:18:20,160
or vulnerable

489
00:18:20,160 --> 00:18:22,640
uh besides that you have sneak right

490
00:18:22,640 --> 00:18:23,360
we're at that

491
00:18:23,360 --> 00:18:26,640
devsecond it's a sneak conference

492
00:18:26,640 --> 00:18:29,440
and sneak is free from open source right

493
00:18:29,440 --> 00:18:30,799
so you can use that

494
00:18:30,799 --> 00:18:33,919
to to you can use sneak

495
00:18:33,919 --> 00:18:35,840
to connect to your your github

496
00:18:35,840 --> 00:18:38,160
repository and you can scan

497
00:18:38,160 --> 00:18:40,160
uh any any repository that you have

498
00:18:40,160 --> 00:18:42,720
that's public that's open source right

499
00:18:42,720 --> 00:18:45,760
uh using that sneak technology we also

500
00:18:45,760 --> 00:18:47,840
have the open source security by trend

501
00:18:47,840 --> 00:18:48,559
micro

502
00:18:48,559 --> 00:18:52,080
which ties together into our cloud blend

503
00:18:52,080 --> 00:18:52,720
platform

504
00:18:52,720 --> 00:18:54,080
and that's the one that i'm going to

505
00:18:54,080 --> 00:18:56,080
demo in a bit and there is

506
00:18:56,080 --> 00:18:58,799
also vera code and black deck and other

507
00:18:58,799 --> 00:19:01,520
tools as well

508
00:19:02,080 --> 00:19:05,039
okay so this is the demo time i hope i

509
00:19:05,039 --> 00:19:05,760
still have

510
00:19:05,760 --> 00:19:09,520
enough time for for doing the demo and

511
00:19:09,520 --> 00:19:11,840
basically what we're going to do right

512
00:19:11,840 --> 00:19:13,200
we're going to check

513
00:19:13,200 --> 00:19:16,640
into a repository uh using the

514
00:19:16,640 --> 00:19:18,960
open source security by by sneak and

515
00:19:18,960 --> 00:19:20,160
trend micro

516
00:19:20,160 --> 00:19:23,679
and just run a simple scan to evaluate

517
00:19:23,679 --> 00:19:24,160
the

518
00:19:24,160 --> 00:19:26,320
the libraries and vulnerabilities in

519
00:19:26,320 --> 00:19:28,000
that source code

520
00:19:28,000 --> 00:19:38,640
okay let me just move to my demo

521
00:19:38,640 --> 00:19:42,240
so here uh we have the open source

522
00:19:42,240 --> 00:19:44,400
security by sneak at the trend michael

523
00:19:44,400 --> 00:19:47,520
cloud one platform

524
00:19:47,760 --> 00:19:50,320
um just here it's an integration right

525
00:19:50,320 --> 00:19:52,240
between sneak and trend micro

526
00:19:52,240 --> 00:19:55,360
just a quick demo uh on showing and and

527
00:19:55,360 --> 00:19:56,480
this open source

528
00:19:56,480 --> 00:19:58,320
uh this scanning that i'm going to do is

529
00:19:58,320 --> 00:20:00,799
on an open source project

530
00:20:00,799 --> 00:20:04,639
so let me add a new one

531
00:20:04,880 --> 00:20:06,720
so basically what the first thing that

532
00:20:06,720 --> 00:20:08,880
you want to do when when you

533
00:20:08,880 --> 00:20:11,679
uh start using sneak or the the open

534
00:20:11,679 --> 00:20:13,360
source security by trend micro

535
00:20:13,360 --> 00:20:15,520
you need to do an integration right so

536
00:20:15,520 --> 00:20:17,120
you need to connect that

537
00:20:17,120 --> 00:20:19,440
with a repository a source called

538
00:20:19,440 --> 00:20:20,400
repository

539
00:20:20,400 --> 00:20:23,760
of your of your choosing right to

540
00:20:23,760 --> 00:20:26,320
to import that so sneak can read that

541
00:20:26,320 --> 00:20:27,039
data

542
00:20:27,039 --> 00:20:30,400
and and scan it right i already have my

543
00:20:30,400 --> 00:20:33,440
my github uh configure here so i don't

544
00:20:33,440 --> 00:20:34,000
need to do

545
00:20:34,000 --> 00:20:38,880
that so i can add a new project here

546
00:20:38,880 --> 00:20:43,360
um let's see i can go to github

547
00:20:43,360 --> 00:20:45,280
right and i have many different open

548
00:20:45,280 --> 00:20:46,880
source here so it's gonna might take a

549
00:20:46,880 --> 00:20:48,159
while i

550
00:20:48,159 --> 00:20:51,120
i know i fork a lot of projects right so

551
00:20:51,120 --> 00:20:51,840
it's fine

552
00:20:51,840 --> 00:20:54,400
let's see if i can search your search by

553
00:20:54,400 --> 00:20:55,360
name yeah

554
00:20:55,360 --> 00:20:57,760
java

555
00:20:58,720 --> 00:21:01,679
java goof trends so i'm gonna use this

556
00:21:01,679 --> 00:21:02,080
uh

557
00:21:02,080 --> 00:21:04,880
application that's hosted on my github

558
00:21:04,880 --> 00:21:05,520
that i

559
00:21:05,520 --> 00:21:08,720
i forked it and i'm gonna use that to

560
00:21:08,720 --> 00:21:09,520
scan through

561
00:21:09,520 --> 00:21:12,720
through sneak trees here if you have a

562
00:21:12,720 --> 00:21:14,960
custom locations right it's going to

563
00:21:14,960 --> 00:21:16,960
the tool is going to look for for the

564
00:21:16,960 --> 00:21:19,440
file where it talks about the dependence

565
00:21:19,440 --> 00:21:21,120
metadata right which

566
00:21:21,120 --> 00:21:24,240
which uh libraries and versions you have

567
00:21:24,240 --> 00:21:26,720
uh in your coding and it needs to run so

568
00:21:26,720 --> 00:21:27,840
it's going to check for that

569
00:21:27,840 --> 00:21:30,320
if there's not if it's not a default

570
00:21:30,320 --> 00:21:32,480
location then you can add that here

571
00:21:32,480 --> 00:21:34,720
but since that's default i'm gonna use

572
00:21:34,720 --> 00:21:39,200
that and just add select repository here

573
00:21:42,320 --> 00:21:44,720
okay now that i added right the open

574
00:21:44,720 --> 00:21:46,480
source security is importing that

575
00:21:46,480 --> 00:21:48,320
project and start scanning

576
00:21:48,320 --> 00:21:51,440
and as we can see quickly detected

577
00:21:51,440 --> 00:21:54,799
some uh some issues here and i can see

578
00:21:54,799 --> 00:21:55,520
that there's

579
00:21:55,520 --> 00:21:58,880
46 high vulnerabilities and 44 medium

580
00:21:58,880 --> 00:22:00,799
vulnerabilities right

581
00:22:00,799 --> 00:22:05,039
so i can i can view the report here

582
00:22:05,039 --> 00:22:09,600
and it has a kind of a dashboard

583
00:22:09,600 --> 00:22:12,960
see if it's going to show me here

584
00:22:12,960 --> 00:22:16,080
might be still loading the information

585
00:22:16,080 --> 00:22:19,360
so let me go to dependencies for now

586
00:22:19,360 --> 00:22:22,480
and i can filter here

587
00:22:22,480 --> 00:22:27,200
by any status let's see uh just

588
00:22:27,200 --> 00:22:28,559
order here by a number of

589
00:22:28,559 --> 00:22:31,760
vulnerabilities right oh i can see here

590
00:22:31,760 --> 00:22:33,919
these are the some of the dependencies

591
00:22:33,919 --> 00:22:35,840
that i have in my code

592
00:22:35,840 --> 00:22:39,120
in my repository and i can see that

593
00:22:39,120 --> 00:22:42,159
where this was this version was last but

594
00:22:42,159 --> 00:22:44,000
i i can see the current version

595
00:22:44,000 --> 00:22:48,159
right which i'm using for example 2 3.20

596
00:22:48,159 --> 00:22:50,559
i can see what is the latest version of

597
00:22:50,559 --> 00:22:52,320
this library right which

598
00:22:52,320 --> 00:22:54,320
ideally i should you update to the

599
00:22:54,320 --> 00:22:56,159
latest version if possible right if it

600
00:22:56,159 --> 00:22:58,240
doesn't break any changes

601
00:22:58,240 --> 00:23:00,720
um that's the latest publication the

602
00:23:00,720 --> 00:23:01,679
latest version

603
00:23:01,679 --> 00:23:04,400
of that uh library so that's when this

604
00:23:04,400 --> 00:23:04,720
uh

605
00:23:04,720 --> 00:23:07,039
latest version was published right and

606
00:23:07,039 --> 00:23:08,000
here i have the

607
00:23:08,000 --> 00:23:10,159
vulnerabilities right so 20 high

608
00:23:10,159 --> 00:23:12,559
vulnerabilities and two medium

609
00:23:12,559 --> 00:23:14,799
we also can see the licensing right i

610
00:23:14,799 --> 00:23:16,320
didn't talk much about it

611
00:23:16,320 --> 00:23:18,559
but licensing is also important because

612
00:23:18,559 --> 00:23:19,679
if you're breaking

613
00:23:19,679 --> 00:23:22,240
the software license there can be uh

614
00:23:22,240 --> 00:23:24,880
issues legal issues regarding that right

615
00:23:24,880 --> 00:23:26,400
if you're using open source for

616
00:23:26,400 --> 00:23:29,039
for commercial commercial reasons and

617
00:23:29,039 --> 00:23:29,919
you're not

618
00:23:29,919 --> 00:23:32,080
uh sharing the code or depending on the

619
00:23:32,080 --> 00:23:34,000
license you you're not following

620
00:23:34,000 --> 00:23:36,320
the the software license as well so you

621
00:23:36,320 --> 00:23:38,799
need to be aware of that

622
00:23:38,799 --> 00:23:40,480
um yeah so it shows here the

623
00:23:40,480 --> 00:23:43,120
dependencies of issues right we can see

624
00:23:43,120 --> 00:23:46,400
uh other libraries as well right and

625
00:23:46,400 --> 00:23:49,039
and that's that already gives us this is

626
00:23:49,039 --> 00:23:50,799
the view of materials right this is

627
00:23:50,799 --> 00:23:51,600
basically

628
00:23:51,600 --> 00:23:54,320
the components that make up my my

629
00:23:54,320 --> 00:23:56,000
software my application

630
00:23:56,000 --> 00:23:58,559
and i can quickly see which ones are

631
00:23:58,559 --> 00:24:00,480
most vulnerable and which ones i need to

632
00:24:00,480 --> 00:24:01,120
focus

633
00:24:01,120 --> 00:24:04,000
uh first to fix those vulnerabilities

634
00:24:04,000 --> 00:24:05,840
right

635
00:24:05,840 --> 00:24:10,799
see issues

636
00:24:11,600 --> 00:24:13,600
no issues here let's see if there's any

637
00:24:13,600 --> 00:24:16,159
licensing issues

638
00:24:16,159 --> 00:24:19,840
let's see

639
00:24:20,080 --> 00:24:22,480
uh no no no major i think just one

640
00:24:22,480 --> 00:24:25,440
mediums here like venice is not much

641
00:24:25,440 --> 00:24:26,960
let me go back to the dashboard let's

642
00:24:26,960 --> 00:24:33,679
see if that's loading

643
00:24:33,679 --> 00:24:37,039
not yet okay

644
00:24:37,039 --> 00:24:39,360
that's fine yeah so so you we can see

645
00:24:39,360 --> 00:24:40,720
how easy

646
00:24:40,720 --> 00:24:44,240
it is for someone to just uh start using

647
00:24:44,240 --> 00:24:46,320
open source security and snake

648
00:24:46,320 --> 00:24:49,600
and quickly import their projects and

649
00:24:49,600 --> 00:24:51,279
start scanning them right and finding

650
00:24:51,279 --> 00:24:53,120
those vulnerabilities right

651
00:24:53,120 --> 00:24:55,120
uh i'm sure there are many other

652
00:24:55,120 --> 00:24:57,039
features that we could show here but

653
00:24:57,039 --> 00:24:58,240
there's not the goal of this

654
00:24:58,240 --> 00:24:59,760
presentation and there is not enough

655
00:24:59,760 --> 00:25:00,720
time

656
00:25:00,720 --> 00:25:03,520
so i'll just pause here and go back to

657
00:25:03,520 --> 00:25:05,279
my presentation to finish

658
00:25:05,279 --> 00:25:07,200
and then i'll open up for questions and

659
00:25:07,200 --> 00:25:08,400
i'll be available

660
00:25:08,400 --> 00:25:10,080
also on the chat and during the

661
00:25:10,080 --> 00:25:14,080
conference during the the whole day

662
00:25:14,080 --> 00:25:16,480
so yeah we did the demo right we showed

663
00:25:16,480 --> 00:25:19,360
here how it works how it's important to

664
00:25:19,360 --> 00:25:22,240
uh to check for your dependencies and

665
00:25:22,240 --> 00:25:24,159
your libraries check for

666
00:25:24,159 --> 00:25:27,360
uh not just uh their versions right if

667
00:25:27,360 --> 00:25:28,720
they're up to date

668
00:25:28,720 --> 00:25:30,799
though also if they have public non

669
00:25:30,799 --> 00:25:32,000
vulnerabilities

670
00:25:32,000 --> 00:25:34,159
but also the licensing it's also

671
00:25:34,159 --> 00:25:35,039
important

672
00:25:35,039 --> 00:25:37,679
and you might face any kind of legal

673
00:25:37,679 --> 00:25:39,679
issues if you break software licenses

674
00:25:39,679 --> 00:25:40,799
right

675
00:25:40,799 --> 00:25:42,720
so yeah basic that concludes my

676
00:25:42,720 --> 00:25:44,880
presentation here are some references

677
00:25:44,880 --> 00:25:47,200
i'll be published in slide after this

678
00:25:47,200 --> 00:25:47,919
talk

679
00:25:47,919 --> 00:25:50,960
and uh thank you very much

680
00:25:50,960 --> 00:25:56,000
thank you

