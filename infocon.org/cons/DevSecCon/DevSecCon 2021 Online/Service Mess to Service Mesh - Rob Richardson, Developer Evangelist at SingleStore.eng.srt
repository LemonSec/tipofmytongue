1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:14,000 --> 00:00:14,400
hi

3
00:00:14,400 --> 00:00:17,199
welcome to devsecond24 i'm rob

4
00:00:17,199 --> 00:00:17,840
richardson

5
00:00:17,840 --> 00:00:19,840
let's dig into service mess to service

6
00:00:19,840 --> 00:00:21,439
mesh

7
00:00:21,439 --> 00:00:24,240
before we do so here's the part where i

8
00:00:24,240 --> 00:00:25,599
tell you i am definitely going to post

9
00:00:25,599 --> 00:00:27,680
the slides on my site tonight

10
00:00:27,680 --> 00:00:29,119
i've been that person chasing the

11
00:00:29,119 --> 00:00:30,760
speaker so let's head over to

12
00:00:30,760 --> 00:00:32,000
robrich.org

13
00:00:32,000 --> 00:00:33,760
we will click on presentations here at

14
00:00:33,760 --> 00:00:36,160
the top and you can see service mess to

15
00:00:36,160 --> 00:00:37,520
service mesh here top

16
00:00:37,520 --> 00:00:39,760
at the top of the list you can grab the

17
00:00:39,760 --> 00:00:41,280
slides online

18
00:00:41,280 --> 00:00:44,079
right now that's perfect while you're

19
00:00:44,079 --> 00:00:45,920
here at robrich.org click on about me

20
00:00:45,920 --> 00:00:47,039
and you'll see some of the things that

21
00:00:47,039 --> 00:00:48,239
i've done recently

22
00:00:48,239 --> 00:00:50,719
i'm a microsoft mvp a friend of redgate

23
00:00:50,719 --> 00:00:52,719
a cyril developer evangelist

24
00:00:52,719 --> 00:00:55,520
and let me tell you about azgive camp az

25
00:00:55,520 --> 00:00:57,440
give camp brings volunteer developers

26
00:00:57,440 --> 00:00:59,440
together with charities to build free

27
00:00:59,440 --> 00:01:01,920
software we start friday after work

28
00:01:01,920 --> 00:01:03,760
sunday afternoon we deliver completed

29
00:01:03,760 --> 00:01:05,360
software to the charities

30
00:01:05,360 --> 00:01:07,600
sleep is optional caffeine provided if

31
00:01:07,600 --> 00:01:08,400
you're in phoenix

32
00:01:08,400 --> 00:01:10,640
come join us for the next a-z gift camp

33
00:01:10,640 --> 00:01:12,080
or if you'd like a gift camp in your

34
00:01:12,080 --> 00:01:13,040
neighborhood

35
00:01:13,040 --> 00:01:15,200
hit me up on email or twitter and let's

36
00:01:15,200 --> 00:01:16,640
get a gift camp installed in your

37
00:01:16,640 --> 00:01:18,400
neighborhood too

38
00:01:18,400 --> 00:01:20,080
some of the other things that i've done

39
00:01:20,080 --> 00:01:21,759
i do a lot of docker and kubernetes

40
00:01:21,759 --> 00:01:22,400
training

41
00:01:22,400 --> 00:01:24,080
and one of the things i'm particularly

42
00:01:24,080 --> 00:01:26,000
proud of i replied to a.net rocks

43
00:01:26,000 --> 00:01:27,119
podcast episode

44
00:01:27,119 --> 00:01:28,640
they read my comment on the air they

45
00:01:28,640 --> 00:01:31,040
sent me a mug

46
00:01:31,040 --> 00:01:33,040
there's my claim to fame my coveted.net

47
00:01:33,040 --> 00:01:34,799
rox mug

48
00:01:34,799 --> 00:01:36,400
so let's dig into service mess to

49
00:01:36,400 --> 00:01:38,400
service mesh

50
00:01:38,400 --> 00:01:41,600
oop jumping ahead we talked about this

51
00:01:41,600 --> 00:01:43,839
guy

52
00:01:44,960 --> 00:01:46,399
do you remember the first time you

53
00:01:46,399 --> 00:01:48,479
learned to drive or the first time you

54
00:01:48,479 --> 00:01:49,280
got to travel

55
00:01:49,280 --> 00:01:51,520
outside of your town do you remember how

56
00:01:51,520 --> 00:01:53,520
freeing and exhilarating that was seeing

57
00:01:53,520 --> 00:01:54,079
the open

58
00:01:54,079 --> 00:01:58,320
road getting to expand your geography

59
00:01:58,320 --> 00:02:00,799
now let's imagine this country road

60
00:02:00,799 --> 00:02:02,000
where

61
00:02:02,000 --> 00:02:04,240
there isn't very much traffic well in

62
00:02:04,240 --> 00:02:06,079
time

63
00:02:06,079 --> 00:02:08,479
the town grows up and we end up with

64
00:02:08,479 --> 00:02:10,080
something like this

65
00:02:10,080 --> 00:02:13,280
that's pretty crowded hmm

66
00:02:13,280 --> 00:02:16,400
so what can we do about it well let's

67
00:02:16,400 --> 00:02:18,400
post a traffic cop right at the edge of

68
00:02:18,400 --> 00:02:20,160
town and anyone who's speeding

69
00:02:20,160 --> 00:02:22,640
will stop them and and make sure that

70
00:02:22,640 --> 00:02:23,920
the traffic is fl

71
00:02:23,920 --> 00:02:26,720
all flowing consistently now on the

72
00:02:26,720 --> 00:02:27,680
upside

73
00:02:27,680 --> 00:02:30,000
we don't end up with those traffic jams

74
00:02:30,000 --> 00:02:31,280
on the downside

75
00:02:31,280 --> 00:02:33,200
we're not really getting to where we

76
00:02:33,200 --> 00:02:34,879
need to efficiently

77
00:02:34,879 --> 00:02:38,800
we're just all getting there the same

78
00:02:38,800 --> 00:02:40,640
where we want to go is something like

79
00:02:40,640 --> 00:02:42,319
this where the cars can communicate

80
00:02:42,319 --> 00:02:42,959
together

81
00:02:42,959 --> 00:02:45,840
we can create mechanisms where expedited

82
00:02:45,840 --> 00:02:47,760
vehicles can move really quickly

83
00:02:47,760 --> 00:02:50,480
and those with more leisurely paces can

84
00:02:50,480 --> 00:02:52,400
accomplish that as well

85
00:02:52,400 --> 00:02:54,160
we're not penalizing people and moving

86
00:02:54,160 --> 00:02:55,440
them towards conformity

87
00:02:55,440 --> 00:02:57,599
but rather prioritizing and organizing

88
00:02:57,599 --> 00:02:58,879
traffic

89
00:02:58,879 --> 00:03:00,640
we'll see similar methodologies as we

90
00:03:00,640 --> 00:03:02,239
start looking at service mesh

91
00:03:02,239 --> 00:03:03,920
as we look at service mesh we're going

92
00:03:03,920 --> 00:03:05,599
to define it we're going to take a look

93
00:03:05,599 --> 00:03:06,959
at what makes it great

94
00:03:06,959 --> 00:03:08,560
we're going to look at demos of both

95
00:03:08,560 --> 00:03:10,080
istio and linker d

96
00:03:10,080 --> 00:03:12,480
and we'll look at places where you may

97
00:03:12,480 --> 00:03:14,640
want to choose something different

98
00:03:14,640 --> 00:03:18,080
let's dig in so what is a service mesh a

99
00:03:18,080 --> 00:03:20,000
service mesh manages network traffic

100
00:03:20,000 --> 00:03:21,120
between services

101
00:03:21,120 --> 00:03:24,400
in a graceful and scalable way it's the

102
00:03:24,400 --> 00:03:26,080
answer to how do i observe

103
00:03:26,080 --> 00:03:29,040
control or secure communication between

104
00:03:29,040 --> 00:03:30,799
my micro services

105
00:03:30,799 --> 00:03:33,040
now if i'm inside a kubernetes cluster i

106
00:03:33,040 --> 00:03:35,040
really do want to be able to observe

107
00:03:35,040 --> 00:03:38,319
secure and control the content between

108
00:03:38,319 --> 00:03:39,599
my services

109
00:03:39,599 --> 00:03:42,159
let's take a look at that observe my

110
00:03:42,159 --> 00:03:43,680
goal with the service mesh is to be able

111
00:03:43,680 --> 00:03:45,840
to watch the traffic flowing between my

112
00:03:45,840 --> 00:03:46,959
micro services

113
00:03:46,959 --> 00:03:48,879
i want to make sure that the traffic is

114
00:03:48,879 --> 00:03:50,640
as i expect

115
00:03:50,640 --> 00:03:52,560
in time i will create policies that

116
00:03:52,560 --> 00:03:53,920
controls that content

117
00:03:53,920 --> 00:03:56,080
i don't want microservices calling into

118
00:03:56,080 --> 00:03:57,040
other services

119
00:03:57,040 --> 00:03:59,280
that it i don't expect i want to make

120
00:03:59,280 --> 00:04:01,040
sure that rogue services aren't able to

121
00:04:01,040 --> 00:04:01,920
penetrate

122
00:04:01,920 --> 00:04:05,200
the services that i need and

123
00:04:05,200 --> 00:04:08,159
finally secure i can create mutual tls

124
00:04:08,159 --> 00:04:09,280
between my services

125
00:04:09,280 --> 00:04:11,439
so that other traffic running within my

126
00:04:11,439 --> 00:04:13,439
cluster isn't able to see

127
00:04:13,439 --> 00:04:14,879
the communication between my

128
00:04:14,879 --> 00:04:17,040
microservices observe

129
00:04:17,040 --> 00:04:19,680
control and secure that's the purpose of

130
00:04:19,680 --> 00:04:20,798
service mesh

131
00:04:20,798 --> 00:04:23,840
well how did we get here we started out

132
00:04:23,840 --> 00:04:24,960
with a monolith

133
00:04:24,960 --> 00:04:27,360
like this on the left now this monolith

134
00:04:27,360 --> 00:04:29,280
was great in being able to deploy

135
00:04:29,280 --> 00:04:32,160
infrequently and have all of the content

136
00:04:32,160 --> 00:04:34,000
in one place

137
00:04:34,000 --> 00:04:36,080
we got on that call friday evening after

138
00:04:36,080 --> 00:04:37,440
work and

139
00:04:37,440 --> 00:04:40,160
usually by saturday afternoon the system

140
00:04:40,160 --> 00:04:40,560
was

141
00:04:40,560 --> 00:04:42,880
maybe hobbling along again by sunday

142
00:04:42,880 --> 00:04:45,600
morning we're exhausted

143
00:04:45,600 --> 00:04:47,680
so what got us to the system on the

144
00:04:47,680 --> 00:04:49,040
right well on the right we have

145
00:04:49,040 --> 00:04:50,560
microservices

146
00:04:50,560 --> 00:04:52,080
deployment was made easier with

147
00:04:52,080 --> 00:04:53,680
containers and we've standardized on

148
00:04:53,680 --> 00:04:57,120
kubernetes as a great way to deploy

149
00:04:57,120 --> 00:04:59,280
now this is great we can deploy a lot

150
00:04:59,280 --> 00:05:00,320
easier maybe

151
00:05:00,320 --> 00:05:04,160
dozens or 100 times a week or a day

152
00:05:04,160 --> 00:05:07,440
but on the left

153
00:05:07,440 --> 00:05:09,680
private methods were private on the

154
00:05:09,680 --> 00:05:10,720
right

155
00:05:10,720 --> 00:05:13,039
all of our private methods have a

156
00:05:13,039 --> 00:05:15,919
network address

157
00:05:17,120 --> 00:05:20,560
so as we talk about securing traffic

158
00:05:20,560 --> 00:05:22,479
within our cluster we'll talk about both

159
00:05:22,479 --> 00:05:24,720
north south traffic and east-west

160
00:05:24,720 --> 00:05:25,680
traffic

161
00:05:25,680 --> 00:05:27,360
north-south traffic is that traffic

162
00:05:27,360 --> 00:05:29,759
flowing into or out of the cluster

163
00:05:29,759 --> 00:05:31,840
where east-west traffic is traffic

164
00:05:31,840 --> 00:05:32,800
flowing between

165
00:05:32,800 --> 00:05:36,960
microservices now the cool part about us

166
00:05:36,960 --> 00:05:39,520
service mesh is we can support both

167
00:05:39,520 --> 00:05:40,960
east-west traffic and

168
00:05:40,960 --> 00:05:43,120
north-south traffic in our process of

169
00:05:43,120 --> 00:05:46,960
observe secure and control

170
00:05:47,600 --> 00:05:50,840
so what came before us well an api

171
00:05:50,840 --> 00:05:52,320
gateway

172
00:05:52,320 --> 00:05:54,800
an api gateway is like a fence on the

173
00:05:54,800 --> 00:05:56,160
outside of our cluster

174
00:05:56,160 --> 00:05:58,800
it's the traffic cop on the edge of town

175
00:05:58,800 --> 00:05:59,919
now that's great

176
00:05:59,919 --> 00:06:01,600
any rogue traffic coming into our

177
00:06:01,600 --> 00:06:04,400
cluster is blocked at the api gateway

178
00:06:04,400 --> 00:06:06,800
but what about the traffic flowing

179
00:06:06,800 --> 00:06:09,199
around within our cluster

180
00:06:09,199 --> 00:06:11,039
now one of the tenets of a microservice

181
00:06:11,039 --> 00:06:13,199
is it owns its own data

182
00:06:13,199 --> 00:06:15,039
but i've got these other microservices

183
00:06:15,039 --> 00:06:18,080
reaching into the data stores

184
00:06:18,080 --> 00:06:20,400
the api gateway has no visibility into

185
00:06:20,400 --> 00:06:22,800
that because the api gateway's job is to

186
00:06:22,800 --> 00:06:23,680
be the fence

187
00:06:23,680 --> 00:06:27,759
around the cluster all the east-west

188
00:06:27,759 --> 00:06:29,600
traffic within the cluster is outside

189
00:06:29,600 --> 00:06:33,039
the purview of the api gateway

190
00:06:33,039 --> 00:06:35,280
so we add a service mesh how does the

191
00:06:35,280 --> 00:06:36,960
service mesh work

192
00:06:36,960 --> 00:06:38,960
well without a service mesh service a

193
00:06:38,960 --> 00:06:41,280
would just call out to service b

194
00:06:41,280 --> 00:06:43,280
but with the service mesh there's a few

195
00:06:43,280 --> 00:06:45,520
extra steps to get from service a to

196
00:06:45,520 --> 00:06:47,440
service b

197
00:06:47,440 --> 00:06:49,599
deployed with each service is a sidecar

198
00:06:49,599 --> 00:06:50,720
proxy

199
00:06:50,720 --> 00:06:53,440
now this proxy is able to proxy network

200
00:06:53,440 --> 00:06:55,120
traffic between services

201
00:06:55,120 --> 00:06:57,280
so service a is going to reach out to

202
00:06:57,280 --> 00:06:59,599
its client-side proxy

203
00:06:59,599 --> 00:07:02,479
and this service a proxy will reach out

204
00:07:02,479 --> 00:07:04,880
to the service mesh control plane

205
00:07:04,880 --> 00:07:07,599
am i allowed to talk to service b in

206
00:07:07,599 --> 00:07:09,520
this case the control plane says yes

207
00:07:09,520 --> 00:07:12,240
so service a's proxy creates a network

208
00:07:12,240 --> 00:07:12,880
request

209
00:07:12,880 --> 00:07:15,680
to service b's proxy again service b's

210
00:07:15,680 --> 00:07:17,360
proxy is going to check with the control

211
00:07:17,360 --> 00:07:17,840
plane

212
00:07:17,840 --> 00:07:19,599
am i allowed to receive connections from

213
00:07:19,599 --> 00:07:21,840
service a in this case the control plane

214
00:07:21,840 --> 00:07:22,720
says yes

215
00:07:22,720 --> 00:07:25,280
and the connection is created now

216
00:07:25,280 --> 00:07:27,039
service b is proxy forwards that traffic

217
00:07:27,039 --> 00:07:28,080
on the service b

218
00:07:28,080 --> 00:07:30,080
service b is able to compute that result

219
00:07:30,080 --> 00:07:32,319
and it flows back across the proxy

220
00:07:32,319 --> 00:07:35,520
back to service a that's the methodology

221
00:07:35,520 --> 00:07:36,400
of service mesh

222
00:07:36,400 --> 00:07:38,240
where we have these proxies that are

223
00:07:38,240 --> 00:07:40,240
able to validate the traffic

224
00:07:40,240 --> 00:07:42,319
and ultimately connect to the services

225
00:07:42,319 --> 00:07:45,440
that are needful

226
00:07:45,440 --> 00:07:48,560
now because we have a proxy across all

227
00:07:48,560 --> 00:07:49,120
traffic

228
00:07:49,120 --> 00:07:51,280
we can do really interesting things like

229
00:07:51,280 --> 00:07:52,639
observe control

230
00:07:52,639 --> 00:07:54,479
and secure the traffic going between our

231
00:07:54,479 --> 00:07:56,960
containers now the beauty here

232
00:07:56,960 --> 00:07:59,759
is that this observe control and secure

233
00:07:59,759 --> 00:08:00,400
comes with

234
00:08:00,400 --> 00:08:03,360
no changes to our application we'll be

235
00:08:03,360 --> 00:08:05,520
able to observe the traffic because well

236
00:08:05,520 --> 00:08:07,440
it's flowing through this proxy

237
00:08:07,440 --> 00:08:09,599
we'll be able to control it as it checks

238
00:08:09,599 --> 00:08:11,199
in with the service mesh

239
00:08:11,199 --> 00:08:13,360
we can say nope i really don't think you

240
00:08:13,360 --> 00:08:14,639
ought to be able to connect to that

241
00:08:14,639 --> 00:08:15,280
service

242
00:08:15,280 --> 00:08:18,160
or when receiving inbound traffic no i

243
00:08:18,160 --> 00:08:19,520
don't think that service should be able

244
00:08:19,520 --> 00:08:21,039
to accept this traffic

245
00:08:21,039 --> 00:08:22,960
and then finally that connection between

246
00:08:22,960 --> 00:08:25,280
the services can be secured with mutual

247
00:08:25,280 --> 00:08:26,160
tls

248
00:08:26,160 --> 00:08:28,319
using a trust chain from the service

249
00:08:28,319 --> 00:08:29,599
mesh

250
00:08:29,599 --> 00:08:31,680
so anyone just wandering through the

251
00:08:31,680 --> 00:08:34,399
cluster can't see that traffic

252
00:08:34,399 --> 00:08:38,000
perfect now a service mesh is more than

253
00:08:38,000 --> 00:08:39,360
just a proxy

254
00:08:39,360 --> 00:08:41,200
as we level up in our service mesh we

255
00:08:41,200 --> 00:08:43,440
can take a look at interesting scenarios

256
00:08:43,440 --> 00:08:46,080
first network topology hey we're

257
00:08:46,080 --> 00:08:47,760
watching all of the traffic and all of

258
00:08:47,760 --> 00:08:49,120
the network connections between our

259
00:08:49,120 --> 00:08:50,000
services

260
00:08:50,000 --> 00:08:53,760
let's map that out that is

261
00:08:53,760 --> 00:08:56,000
we can take a look at service health as

262
00:08:56,000 --> 00:08:57,040
we're looking through

263
00:08:57,040 --> 00:08:59,040
all of these network connections we can

264
00:08:59,040 --> 00:09:01,200
pay attention to which ones are throwing

265
00:09:01,200 --> 00:09:04,640
500 errors or 404 errors and finally log

266
00:09:04,640 --> 00:09:05,839
all of that traffic

267
00:09:05,839 --> 00:09:07,680
and the health of the services in an

268
00:09:07,680 --> 00:09:09,680
interesting way

269
00:09:09,680 --> 00:09:11,600
that's kind of our first level of a

270
00:09:11,600 --> 00:09:13,200
service mesh where we get network

271
00:09:13,200 --> 00:09:13,920
topology

272
00:09:13,920 --> 00:09:16,399
service health and logging let's level

273
00:09:16,399 --> 00:09:18,000
up a little bit more

274
00:09:18,000 --> 00:09:20,160
we can since we're taking a look at all

275
00:09:20,160 --> 00:09:22,080
of the network traffic

276
00:09:22,080 --> 00:09:24,560
create a circuit breaker now circuit

277
00:09:24,560 --> 00:09:25,200
breaker

278
00:09:25,200 --> 00:09:28,160
is a really elegant way to stop network

279
00:09:28,160 --> 00:09:30,640
traffic when a service is struggling

280
00:09:30,640 --> 00:09:32,959
let's imagine that we've overwhelmed the

281
00:09:32,959 --> 00:09:34,560
service and it's really struggling to

282
00:09:34,560 --> 00:09:35,120
keep up

283
00:09:35,120 --> 00:09:38,080
or maybe it tips over now of course

284
00:09:38,080 --> 00:09:39,760
every dependent service is going to do

285
00:09:39,760 --> 00:09:40,640
what they do

286
00:09:40,640 --> 00:09:42,399
assume that it was a intermittent

287
00:09:42,399 --> 00:09:45,200
network blip and retry the connection

288
00:09:45,200 --> 00:09:47,120
so as the service starts to come back up

289
00:09:47,120 --> 00:09:50,000
it gets flooded again and tips over a

290
00:09:50,000 --> 00:09:51,680
circuit breaker is great at standing in

291
00:09:51,680 --> 00:09:52,720
the way

292
00:09:52,720 --> 00:09:54,320
it notices that this service is

293
00:09:54,320 --> 00:09:56,160
struggling and it will cut off

294
00:09:56,160 --> 00:09:57,760
communication to that service and just

295
00:09:57,760 --> 00:09:59,760
fail the request right away

296
00:09:59,760 --> 00:10:01,600
now if the client restarts that

297
00:10:01,600 --> 00:10:02,839
connection or

298
00:10:02,839 --> 00:10:05,440
retries it will still get that failure

299
00:10:05,440 --> 00:10:07,680
the service is offline

300
00:10:07,680 --> 00:10:09,440
when the service is healthy again then

301
00:10:09,440 --> 00:10:11,120
the circuit breaker connects that

302
00:10:11,120 --> 00:10:11,839
content back

303
00:10:11,839 --> 00:10:14,320
up automatically and connections start

304
00:10:14,320 --> 00:10:15,279
flowing again

305
00:10:15,279 --> 00:10:17,040
unlike a circuit breaker in your home or

306
00:10:17,040 --> 00:10:18,880
business you don't need to go back to

307
00:10:18,880 --> 00:10:20,399
the panel and turn it back on

308
00:10:20,399 --> 00:10:23,600
the the service mesh can

309
00:10:23,600 --> 00:10:24,800
circuit breaker can do this

310
00:10:24,800 --> 00:10:27,279
automatically now that we've gotten

311
00:10:27,279 --> 00:10:28,320
intelligent routing

312
00:10:28,320 --> 00:10:30,079
we can start to do interesting things

313
00:10:30,079 --> 00:10:32,560
like well if you're part of this group

314
00:10:32,560 --> 00:10:35,120
i can send you to a different page so we

315
00:10:35,120 --> 00:10:35,920
can do a b

316
00:10:35,920 --> 00:10:38,480
testing where maybe we'll create two

317
00:10:38,480 --> 00:10:40,079
different versions of our service

318
00:10:40,079 --> 00:10:42,079
and we can evaluate how the traffic

319
00:10:42,079 --> 00:10:43,440
moves between them

320
00:10:43,440 --> 00:10:45,839
our customers negatively or positively

321
00:10:45,839 --> 00:10:47,839
impacted by this change

322
00:10:47,839 --> 00:10:50,800
and we can create a beta channel or a

323
00:10:50,800 --> 00:10:52,000
canary release

324
00:10:52,000 --> 00:10:55,040
where those users who want to opt into

325
00:10:55,040 --> 00:10:57,760
the newest features can go to this new

326
00:10:57,760 --> 00:10:59,360
version of the service while regular

327
00:10:59,360 --> 00:11:02,640
users go to the regular service

328
00:11:02,640 --> 00:11:05,040
we'll also get dashboards with our

329
00:11:05,040 --> 00:11:05,839
service mesh

330
00:11:05,839 --> 00:11:08,320
that lets us view health and logging and

331
00:11:08,320 --> 00:11:11,279
connection details

332
00:11:11,519 --> 00:11:13,360
what's great about a service mesh is

333
00:11:13,360 --> 00:11:15,440
because we're watching both north south

334
00:11:15,440 --> 00:11:15,760
and

335
00:11:15,760 --> 00:11:18,959
east west traffic we can prevent these

336
00:11:18,959 --> 00:11:20,399
types of

337
00:11:20,399 --> 00:11:24,480
unexpected connections between things

338
00:11:24,800 --> 00:11:26,959
which service mesh should i choose istio

339
00:11:26,959 --> 00:11:28,240
linker d console

340
00:11:28,240 --> 00:11:31,279
open service mesh or others

341
00:11:31,279 --> 00:11:32,880
instead of comparing the features let's

342
00:11:32,880 --> 00:11:34,959
look specifically at the methodologies

343
00:11:34,959 --> 00:11:35,519
because

344
00:11:35,519 --> 00:11:37,519
well they're all moving really fast and

345
00:11:37,519 --> 00:11:39,360
they're all keeping up

346
00:11:39,360 --> 00:11:42,000
linker d linker d focuses on being a

347
00:11:42,000 --> 00:11:43,600
bare minimum install

348
00:11:43,600 --> 00:11:45,600
so that you can get up and running fast

349
00:11:45,600 --> 00:11:47,440
they're really proud of their install

350
00:11:47,440 --> 00:11:48,240
experience

351
00:11:48,240 --> 00:11:50,800
and we'll get to see that today by

352
00:11:50,800 --> 00:11:52,639
comparison istio

353
00:11:52,639 --> 00:11:55,120
is a collection of all kinds of open

354
00:11:55,120 --> 00:11:56,160
source packages

355
00:11:56,160 --> 00:11:58,800
where you can turn things on and off

356
00:11:58,800 --> 00:12:00,399
where linker do you like to write it

357
00:12:00,399 --> 00:12:01,120
itself

358
00:12:01,120 --> 00:12:03,279
istio collects the best of the open

359
00:12:03,279 --> 00:12:05,279
source we can create a profile

360
00:12:05,279 --> 00:12:06,959
that turns on and off these various

361
00:12:06,959 --> 00:12:09,600
features and we can enable or disable

362
00:12:09,600 --> 00:12:12,800
the various open source packages

363
00:12:12,800 --> 00:12:14,880
so let's take a look at both istio and

364
00:12:14,880 --> 00:12:15,839
linker d

365
00:12:15,839 --> 00:12:18,320
we'll start with linker d let's fire up

366
00:12:18,320 --> 00:12:20,240
a link or d cluster

367
00:12:20,240 --> 00:12:23,519
and we'll get started with linker d

368
00:12:23,519 --> 00:12:25,680
now to get started with linker d we come

369
00:12:25,680 --> 00:12:27,760
out to the linker d getting started page

370
00:12:27,760 --> 00:12:31,120
and after downloading the linker d

371
00:12:31,120 --> 00:12:33,680
installer we can do linker d check dash

372
00:12:33,680 --> 00:12:34,720
dash pre

373
00:12:34,720 --> 00:12:38,560
that helps us identify if the cluster is

374
00:12:38,560 --> 00:12:40,240
ready for linker d

375
00:12:40,240 --> 00:12:42,240
once we've got it ready then we can do a

376
00:12:42,240 --> 00:12:44,160
link or d install pipe it to cube ctl

377
00:12:44,160 --> 00:12:44,959
apply

378
00:12:44,959 --> 00:12:46,800
and then we can do a link or d check

379
00:12:46,800 --> 00:12:48,959
again now in this case we're not doing a

380
00:12:48,959 --> 00:12:49,279
check

381
00:12:49,279 --> 00:12:52,240
dash dash pre but rather a check so i've

382
00:12:52,240 --> 00:12:54,959
already installed linker d

383
00:12:54,959 --> 00:12:57,040
and let's check to see if it's running

384
00:12:57,040 --> 00:12:58,800
it'll run all of the hooks

385
00:12:58,800 --> 00:13:01,279
and we've got it ready to go the next

386
00:13:01,279 --> 00:13:03,600
step in the installation process is to

387
00:13:03,600 --> 00:13:05,440
install the visualizers now this is

388
00:13:05,440 --> 00:13:06,480
optional

389
00:13:06,480 --> 00:13:09,839
but let's do it linker d

390
00:13:09,839 --> 00:13:12,880
vis install pipe it to cube

391
00:13:12,880 --> 00:13:17,360
ctl apply dash f

392
00:13:17,360 --> 00:13:21,440
ah linker

393
00:13:21,440 --> 00:13:24,880
d vis install there we go now it's going

394
00:13:24,880 --> 00:13:25,600
to install

395
00:13:25,600 --> 00:13:28,480
all of these resources into kubernetes

396
00:13:28,480 --> 00:13:31,279
inside the namespace linker d

397
00:13:31,279 --> 00:13:34,959
cube ctl get namespaces

398
00:13:34,959 --> 00:13:38,240
and we'll get cube ctl

399
00:13:38,240 --> 00:13:40,399
typing is not my friend today there we

400
00:13:40,399 --> 00:13:42,320
go so there's the link or d namespace

401
00:13:42,320 --> 00:13:44,720
and also the link or d vis namespace

402
00:13:44,720 --> 00:13:48,320
now i am going to pull out this linker

403
00:13:48,320 --> 00:13:51,600
this namespace so let's say cubectl

404
00:13:51,600 --> 00:13:55,040
describe name space

405
00:13:55,040 --> 00:13:57,600
default and we see that we have an

406
00:13:57,600 --> 00:13:58,399
annotation

407
00:13:58,399 --> 00:14:01,600
oh it isn't active yet we'll have an

408
00:14:01,600 --> 00:14:03,680
annotation on each namespace that will

409
00:14:03,680 --> 00:14:05,600
allow it to be able to proxy that

410
00:14:05,600 --> 00:14:07,360
content inside linker d

411
00:14:07,360 --> 00:14:09,920
let's take a look at the linker d

412
00:14:09,920 --> 00:14:11,519
namespace and we can see

413
00:14:11,519 --> 00:14:14,560
those labels that identify that this

414
00:14:14,560 --> 00:14:18,399
will inject the lingerie sidecar

415
00:14:18,399 --> 00:14:21,600
okay linker d check let's see

416
00:14:21,600 --> 00:14:24,959
if the content is ready

417
00:14:24,959 --> 00:14:26,720
well it looks like the visualization

418
00:14:26,720 --> 00:14:28,000
pieces have installed

419
00:14:28,000 --> 00:14:31,199
and we're ready to go so

420
00:14:31,199 --> 00:14:33,440
we can take a look now at the content

421
00:14:33,440 --> 00:14:35,040
linker d

422
00:14:35,040 --> 00:14:38,880
viz dashboard and up pops the

423
00:14:38,880 --> 00:14:42,399
link or d dashboard now let's take a

424
00:14:42,399 --> 00:14:44,160
look at the linker d

425
00:14:44,160 --> 00:14:46,160
dashboard we'll dig into the link or d

426
00:14:46,160 --> 00:14:48,560
namespace and we can see the various

427
00:14:48,560 --> 00:14:50,959
deployments associated with this now

428
00:14:50,959 --> 00:14:52,880
each of them come with a grafana

429
00:14:52,880 --> 00:14:53,680
dashboard

430
00:14:53,680 --> 00:14:56,959
so let's pop this one open

431
00:14:56,959 --> 00:14:58,959
now this linker this grafana dashboard

432
00:14:58,959 --> 00:15:00,639
will show us the various metrics

433
00:15:00,639 --> 00:15:02,240
associated with the service and as you

434
00:15:02,240 --> 00:15:04,560
can see it hasn't been up very long

435
00:15:04,560 --> 00:15:07,360
but i love that we get statistics for

436
00:15:07,360 --> 00:15:08,320
this content

437
00:15:08,320 --> 00:15:11,199
really easily

438
00:15:11,360 --> 00:15:13,600
now this dashboard is great at being

439
00:15:13,600 --> 00:15:14,560
able to discover

440
00:15:14,560 --> 00:15:17,040
the uptime and the metrics associated

441
00:15:17,040 --> 00:15:18,880
with that but what if i want to do this

442
00:15:18,880 --> 00:15:20,560
more from the command line

443
00:15:20,560 --> 00:15:23,760
okay let's close down this dashboard and

444
00:15:23,760 --> 00:15:26,399
let's close down this and we can say

445
00:15:26,399 --> 00:15:27,440
linker d

446
00:15:27,440 --> 00:15:31,920
vis stat now we'll go for the namespace

447
00:15:31,920 --> 00:15:36,000
linker d and we'll look at deployments

448
00:15:36,000 --> 00:15:37,759
now here's each of those deployments

449
00:15:37,759 --> 00:15:39,600
they're metrics and we can get that from

450
00:15:39,600 --> 00:15:40,000
the command

451
00:15:40,000 --> 00:15:42,639
line as well that's perfect whether

452
00:15:42,639 --> 00:15:44,000
we're pulling the metrics

453
00:15:44,000 --> 00:15:47,040
using prometheus and grafana

454
00:15:47,040 --> 00:15:48,639
or whether we're grabbing them from the

455
00:15:48,639 --> 00:15:50,399
dashboard or the command line

456
00:15:50,399 --> 00:15:53,279
we can get at link or d details really

457
00:15:53,279 --> 00:15:55,199
easily

458
00:15:55,199 --> 00:15:58,240
now let's flip over to istio

459
00:15:58,240 --> 00:16:00,560
here in istio we'll switch over to the

460
00:16:00,560 --> 00:16:01,920
istio cluster

461
00:16:01,920 --> 00:16:04,880
and we can see that we've already got

462
00:16:04,880 --> 00:16:06,240
cube ctl

463
00:16:06,240 --> 00:16:09,680
get all dash namespace

464
00:16:09,680 --> 00:16:14,639
istio nope it's in the regular namespace

465
00:16:14,639 --> 00:16:17,759
okay so a similar install experience for

466
00:16:17,759 --> 00:16:21,839
istio we go download the

467
00:16:21,839 --> 00:16:25,199
executable we can go grab the thing and

468
00:16:25,199 --> 00:16:25,839
then we'll

469
00:16:25,839 --> 00:16:29,279
run this istio install and then we can

470
00:16:29,279 --> 00:16:30,399
set our profile

471
00:16:30,399 --> 00:16:32,399
which features do we want enabled or

472
00:16:32,399 --> 00:16:33,920
disabled

473
00:16:33,920 --> 00:16:36,480
once we've got that set up then we can

474
00:16:36,480 --> 00:16:38,880
label our particular namespace

475
00:16:38,880 --> 00:16:42,079
to be able to create that content so

476
00:16:42,079 --> 00:16:46,519
let's describe that cubectl describe

477
00:16:46,519 --> 00:16:50,639
namespace default we can see that

478
00:16:50,639 --> 00:16:53,600
we have this istio in next injection

479
00:16:53,600 --> 00:16:54,639
enabled

480
00:16:54,639 --> 00:16:58,000
attribute and so all of the pods that

481
00:16:58,000 --> 00:16:58,320
get

482
00:16:58,320 --> 00:17:01,199
scheduled inside this namespace will

483
00:17:01,199 --> 00:17:01,759
have that

484
00:17:01,759 --> 00:17:05,359
istio sidecar applied now let's take a

485
00:17:05,359 --> 00:17:06,880
look at a demo

486
00:17:06,880 --> 00:17:09,280
as part of the istio setup if you choose

487
00:17:09,280 --> 00:17:10,799
to you can install this sample

488
00:17:10,799 --> 00:17:11,919
application

489
00:17:11,919 --> 00:17:13,520
now this sample application has this

490
00:17:13,520 --> 00:17:15,199
product page that gets the product

491
00:17:15,199 --> 00:17:15,839
details

492
00:17:15,839 --> 00:17:18,079
and it also has a reviews service you

493
00:17:18,079 --> 00:17:20,079
can use version one that has no

494
00:17:20,079 --> 00:17:22,880
stars version two that has stars in

495
00:17:22,880 --> 00:17:23,679
black color

496
00:17:23,679 --> 00:17:25,599
and version three that has stars in red

497
00:17:25,599 --> 00:17:28,000
color for version two and version three

498
00:17:28,000 --> 00:17:29,919
they'll reach out to this rating service

499
00:17:29,919 --> 00:17:32,400
to see how many stars they should show

500
00:17:32,400 --> 00:17:34,480
now right now i have this page up and i

501
00:17:34,480 --> 00:17:36,559
have it rigged to equally go to

502
00:17:36,559 --> 00:17:39,840
each of the services so sometimes we

503
00:17:39,840 --> 00:17:41,120
have stars

504
00:17:41,120 --> 00:17:43,520
sometimes we have no stars sometimes the

505
00:17:43,520 --> 00:17:45,039
stars are in black color

506
00:17:45,039 --> 00:17:48,080
sometimes the stars are in red color

507
00:17:48,080 --> 00:17:50,880
let's take a look at how we built that

508
00:17:50,880 --> 00:17:52,960
now here's this virtual service that

509
00:17:52,960 --> 00:17:55,360
specifies how we should

510
00:17:55,360 --> 00:17:57,600
route traffic to each spot and right now

511
00:17:57,600 --> 00:17:58,640
they're evenly

512
00:17:58,640 --> 00:18:00,320
even thirty three percent thirty three

513
00:18:00,320 --> 00:18:02,640
percent thirty four percent across all

514
00:18:02,640 --> 00:18:04,559
of the services

515
00:18:04,559 --> 00:18:08,960
okay so let's come into this directory

516
00:18:10,320 --> 00:18:13,520
uh book info

517
00:18:13,840 --> 00:18:14,710
networking

518
00:18:14,710 --> 00:18:17,829
[Music]

519
00:18:20,880 --> 00:18:23,600
and here's all those files cube ctl

520
00:18:23,600 --> 00:18:25,360
apply

521
00:18:25,360 --> 00:18:28,320
i'm going to apply this one the one that

522
00:18:28,320 --> 00:18:29,840
always points to

523
00:18:29,840 --> 00:18:34,400
version one so let's grab that file name

524
00:18:34,400 --> 00:18:37,679
cube ctl apply dash f that virtual

525
00:18:37,679 --> 00:18:38,720
service

526
00:18:38,720 --> 00:18:40,799
now with this virtual service everything

527
00:18:40,799 --> 00:18:42,480
goes to version one

528
00:18:42,480 --> 00:18:44,400
so let's refresh this page and we'll see

529
00:18:44,400 --> 00:18:48,080
that now we never get stars

530
00:18:48,080 --> 00:18:51,120
okay i'm ready to deploy version two but

531
00:18:51,120 --> 00:18:53,039
i'm not quite confident about it let's

532
00:18:53,039 --> 00:18:53,440
send

533
00:18:53,440 --> 00:18:55,120
eighty percent of the traffic to version

534
00:18:55,120 --> 00:18:56,480
1 and 20

535
00:18:56,480 --> 00:18:59,679
of the traffic to version 2. let's grab

536
00:18:59,679 --> 00:19:02,240
this virtual service and after we've

537
00:19:02,240 --> 00:19:03,120
deployed our

538
00:19:03,120 --> 00:19:07,200
pods and we've got them running

539
00:19:07,200 --> 00:19:10,000
we can flip that traffic over to version

540
00:19:10,000 --> 00:19:10,559
2

541
00:19:10,559 --> 00:19:13,840
for 20 of the time now let's refresh the

542
00:19:13,840 --> 00:19:14,880
service

543
00:19:14,880 --> 00:19:18,000
and sometimes we get the

544
00:19:18,000 --> 00:19:20,000
stars in black color but most of the

545
00:19:20,000 --> 00:19:22,400
time we don't get stars

546
00:19:22,400 --> 00:19:25,280
perfect we've validated that our service

547
00:19:25,280 --> 00:19:26,320
works correctly

548
00:19:26,320 --> 00:19:29,280
so let's switch over to version 2

549
00:19:29,280 --> 00:19:31,520
completely

550
00:19:31,520 --> 00:19:33,760
now we've got version 2 running all of

551
00:19:33,760 --> 00:19:36,640
our traffic will go to version 2.

552
00:19:36,640 --> 00:19:38,720
now i want to create a canary channel i

553
00:19:38,720 --> 00:19:39,679
want to create

554
00:19:39,679 --> 00:19:41,679
advanced features and in this case i'm

555
00:19:41,679 --> 00:19:43,679
going to give the user jason

556
00:19:43,679 --> 00:19:46,400
access to version 3. now i might choose

557
00:19:46,400 --> 00:19:47,120
to

558
00:19:47,120 --> 00:19:49,280
do this based on auth header or based on

559
00:19:49,280 --> 00:19:50,720
a url

560
00:19:50,720 --> 00:19:53,840
so let's flip over to this version

561
00:19:53,840 --> 00:19:56,880
i will create this content

562
00:19:56,880 --> 00:20:02,240
cube ctl c tl apply

563
00:20:02,480 --> 00:20:05,840
dash f there and now

564
00:20:05,840 --> 00:20:07,760
while unauthenticated you can see i'm

565
00:20:07,760 --> 00:20:10,080
not logged in i will always get

566
00:20:10,080 --> 00:20:13,280
version 2. now let's log in i'm going to

567
00:20:13,280 --> 00:20:13,840
log in

568
00:20:13,840 --> 00:20:17,919
as jason and now that i'm logged in

569
00:20:17,919 --> 00:20:21,760
i get the stars in red color version 3.

570
00:20:21,760 --> 00:20:25,440
log out and i'm back to version 2.

571
00:20:25,440 --> 00:20:28,720
perfect so now version

572
00:20:28,720 --> 00:20:30,400
3 looks like it's working and we're

573
00:20:30,400 --> 00:20:32,240
ready to release it let's switch

574
00:20:32,240 --> 00:20:34,559
oh that's not right let's switch over to

575
00:20:34,559 --> 00:20:36,799
version three completely

576
00:20:36,799 --> 00:20:40,480
and now we've got our content

577
00:20:40,480 --> 00:20:44,640
and i'll always get version three

578
00:20:45,840 --> 00:20:49,760
oh did i not apply that correctly

579
00:20:49,760 --> 00:20:53,679
virtual service reviews

580
00:20:53,679 --> 00:20:56,960
version 3. there we go

581
00:20:56,960 --> 00:21:00,320
now i'll always get them in red color

582
00:21:00,320 --> 00:21:04,080
let's go back to our uh version

583
00:21:04,080 --> 00:21:07,840
uh 33 33 33

584
00:21:07,840 --> 00:21:10,880
this one it's actually

585
00:21:10,880 --> 00:21:13,919
33 33 34.

586
00:21:13,919 --> 00:21:17,760
cube ctl apply dash f

587
00:21:17,760 --> 00:21:20,320
there we go and now we're back to the

588
00:21:20,320 --> 00:21:22,080
random version that will get us some of

589
00:21:22,080 --> 00:21:23,600
each

590
00:21:23,600 --> 00:21:25,600
we saw how we could upgrade across

591
00:21:25,600 --> 00:21:26,799
versions and

592
00:21:26,799 --> 00:21:28,960
we didn't need to take down or spin up

593
00:21:28,960 --> 00:21:31,200
pods in this case we had all three pods

594
00:21:31,200 --> 00:21:32,640
running at the same time but you can

595
00:21:32,640 --> 00:21:33,600
imagine how

596
00:21:33,600 --> 00:21:35,600
as that pod is ready we spin it up we

597
00:21:35,600 --> 00:21:37,760
smoke text it and then we start slowly

598
00:21:37,760 --> 00:21:41,120
moving traffic over to it

599
00:21:41,360 --> 00:21:44,320
now similarly to the dashboards that i

600
00:21:44,320 --> 00:21:44,720
saw

601
00:21:44,720 --> 00:21:47,520
with uh link or d let's take a look at

602
00:21:47,520 --> 00:21:49,120
some of the dashboards that we can look

603
00:21:49,120 --> 00:21:49,440
at

604
00:21:49,440 --> 00:21:53,720
with istio istio

605
00:21:53,720 --> 00:21:56,840
ctl dashboard

606
00:21:56,840 --> 00:21:59,840
prometheus

607
00:22:00,720 --> 00:22:04,799
not poor metheus pro

608
00:22:04,799 --> 00:22:07,840
prometheus okay so here's the prometheus

609
00:22:07,840 --> 00:22:09,840
dashboard

610
00:22:09,840 --> 00:22:14,559
now i can choose istio

611
00:22:15,120 --> 00:22:18,480
requests total

612
00:22:18,480 --> 00:22:21,760
and i can take a look at those requests

613
00:22:21,760 --> 00:22:23,440
here's each of those requests that came

614
00:22:23,440 --> 00:22:26,559
in now that might not be a great way to

615
00:22:26,559 --> 00:22:28,000
visualize it so

616
00:22:28,000 --> 00:22:32,799
let's upgrade to grafana

617
00:22:32,799 --> 00:22:36,159
and up pops the grafana dashboard

618
00:22:36,159 --> 00:22:40,159
now with grafana i can take a look at

619
00:22:40,159 --> 00:22:43,039
the dashboards that i have and let's

620
00:22:43,039 --> 00:22:43,840
look for

621
00:22:43,840 --> 00:22:46,559
an istio dashboard now these dashboards

622
00:22:46,559 --> 00:22:46,880
come

623
00:22:46,880 --> 00:22:48,799
built in with the istio install and you

624
00:22:48,799 --> 00:22:50,240
can see that istio has been up for a

625
00:22:50,240 --> 00:22:50,720
little bit

626
00:22:50,720 --> 00:22:52,480
and i can see some of the traffic coming

627
00:22:52,480 --> 00:22:53,840
through

628
00:22:53,840 --> 00:22:57,360
there's no errors that's great

629
00:22:58,640 --> 00:23:01,200
so that's grafana let's also take a look

630
00:23:01,200 --> 00:23:02,000
at jager

631
00:23:02,000 --> 00:23:06,000
jaeger is really great for tracing

632
00:23:06,400 --> 00:23:09,679
so up pops up the jaeger dashboard and

633
00:23:09,679 --> 00:23:13,360
now i can get a feel for the services

634
00:23:13,360 --> 00:23:16,960
in my system we can also

635
00:23:16,960 --> 00:23:18,960
inside jager take a look at the system

636
00:23:18,960 --> 00:23:21,039
architecture

637
00:23:21,039 --> 00:23:22,960
the ingress gateway goes to the product

638
00:23:22,960 --> 00:23:25,360
page the product page goes off to the

639
00:23:25,360 --> 00:23:27,679
details and then the product page also

640
00:23:27,679 --> 00:23:29,600
goes off to the reviews system

641
00:23:29,600 --> 00:23:32,240
and the rating system now this isn't

642
00:23:32,240 --> 00:23:33,360
what the developer

643
00:23:33,360 --> 00:23:35,440
thought was going to happen this is what

644
00:23:35,440 --> 00:23:36,880
is actually happening

645
00:23:36,880 --> 00:23:40,880
inside of the inside of the service mesh

646
00:23:40,880 --> 00:23:43,200
that's perfect well what if the review

647
00:23:43,200 --> 00:23:45,039
service never calls the rating service

648
00:23:45,039 --> 00:23:46,640
well i'm probably on an old version of

649
00:23:46,640 --> 00:23:48,880
the review service or maybe i hard coded

650
00:23:48,880 --> 00:23:50,400
the url somewhere or

651
00:23:50,400 --> 00:23:52,720
default values it's great to be able to

652
00:23:52,720 --> 00:23:54,880
see the actual implementation of this

653
00:23:54,880 --> 00:23:57,360
content

654
00:23:58,159 --> 00:24:02,080
i'm going to upgrade to kiali

655
00:24:02,080 --> 00:24:04,000
or not upgrade but rather switch over to

656
00:24:04,000 --> 00:24:05,279
the kiali dashboard

657
00:24:05,279 --> 00:24:07,600
and the kiali dashboard is particularly

658
00:24:07,600 --> 00:24:08,480
interesting

659
00:24:08,480 --> 00:24:11,919
in that we can take a look at the graph

660
00:24:11,919 --> 00:24:14,799
of the content happening now right now i

661
00:24:14,799 --> 00:24:16,000
don't have any

662
00:24:16,000 --> 00:24:18,799
requests so let's create some requests

663
00:24:18,799 --> 00:24:20,559
in our data store

664
00:24:20,559 --> 00:24:23,679
and now the kiali dashboard

665
00:24:23,679 --> 00:24:26,799
should have that content and now i can

666
00:24:26,799 --> 00:24:27,360
see

667
00:24:27,360 --> 00:24:30,080
the content moving now in this case the

668
00:24:30,080 --> 00:24:31,760
reviews service goes to the ratings

669
00:24:31,760 --> 00:24:32,559
service

670
00:24:32,559 --> 00:24:34,320
the product page goes to the product

671
00:24:34,320 --> 00:24:36,960
page looks like we only got version one

672
00:24:36,960 --> 00:24:37,600
content

673
00:24:37,600 --> 00:24:41,439
let's refresh it a few more times

674
00:24:42,080 --> 00:24:45,520
and now we see the actual

675
00:24:45,520 --> 00:24:48,320
graph of this system the product page

676
00:24:48,320 --> 00:24:50,400
version one goes to the review site that

677
00:24:50,400 --> 00:24:51,919
either goes to version two or version

678
00:24:51,919 --> 00:24:52,559
three

679
00:24:52,559 --> 00:24:55,679
and that goes to the rating system

680
00:24:55,679 --> 00:24:57,679
here's the review system it just found

681
00:24:57,679 --> 00:24:58,880
that there were some version one

682
00:24:58,880 --> 00:25:00,000
requests as well

683
00:25:00,000 --> 00:25:02,480
and so we can see how the system works

684
00:25:02,480 --> 00:25:04,480
not the way the developer expected it to

685
00:25:04,480 --> 00:25:04,960
work

686
00:25:04,960 --> 00:25:06,880
but the way the service mesh has watched

687
00:25:06,880 --> 00:25:10,480
it work this is ideal

688
00:25:10,480 --> 00:25:12,640
so let's stop that dashboard and flip

689
00:25:12,640 --> 00:25:14,159
back over here

690
00:25:14,159 --> 00:25:16,080
we got to see the service mesh we got to

691
00:25:16,080 --> 00:25:17,360
see linker d's

692
00:25:17,360 --> 00:25:19,440
really elegant spin up mechanism and we

693
00:25:19,440 --> 00:25:21,200
got to see all of the features

694
00:25:21,200 --> 00:25:22,880
all of the third-party packages that

695
00:25:22,880 --> 00:25:25,200
istio builds in

696
00:25:25,200 --> 00:25:27,200
as we look at service meshes we can

697
00:25:27,200 --> 00:25:28,240
start with

698
00:25:28,240 --> 00:25:31,840
just the crawl stage in the crawl stage

699
00:25:31,840 --> 00:25:33,760
we're just proxying traffic between

700
00:25:33,760 --> 00:25:35,440
things we can monitor things

701
00:25:35,440 --> 00:25:37,440
we can log we can take a look at service

702
00:25:37,440 --> 00:25:39,440
health

703
00:25:39,440 --> 00:25:42,480
crawl walk as we start walking

704
00:25:42,480 --> 00:25:44,720
we can create intelligent routing we saw

705
00:25:44,720 --> 00:25:46,000
how we could create a b

706
00:25:46,000 --> 00:25:48,400
channels where only jason got the new

707
00:25:48,400 --> 00:25:50,240
version we saw how we could

708
00:25:50,240 --> 00:25:52,559
slowly transition traffic from version

709
00:25:52,559 --> 00:25:53,679
one to version two

710
00:25:53,679 --> 00:25:55,360
where 80 percent of the traffic went to

711
00:25:55,360 --> 00:25:56,880
the old version and twenty percent went

712
00:25:56,880 --> 00:25:58,080
to the new version

713
00:25:58,080 --> 00:25:59,919
this kind of intelligent routing is

714
00:25:59,919 --> 00:26:02,000
possible because we're able to proxy all

715
00:26:02,000 --> 00:26:03,679
the traffic

716
00:26:03,679 --> 00:26:07,760
crawl walk run now we can take a look at

717
00:26:07,760 --> 00:26:08,559
the system

718
00:26:08,559 --> 00:26:10,400
we can see the things that are actually

719
00:26:10,400 --> 00:26:12,080
moving between our services

720
00:26:12,080 --> 00:26:14,080
and we can see if that matches what the

721
00:26:14,080 --> 00:26:16,480
developer expected

722
00:26:16,480 --> 00:26:18,799
that's perfect as we look at a service

723
00:26:18,799 --> 00:26:20,720
mesh we can look at these methodologies

724
00:26:20,720 --> 00:26:21,760
of being able to

725
00:26:21,760 --> 00:26:24,240
not only proxy traffic but be able to

726
00:26:24,240 --> 00:26:24,880
observe

727
00:26:24,880 --> 00:26:28,640
secure and control that traffic

728
00:26:29,120 --> 00:26:32,880
now a service mesh doesn't come for free

729
00:26:32,880 --> 00:26:35,039
in our regular kubernetes cluster we had

730
00:26:35,039 --> 00:26:37,039
the control plane we had worker nodes we

731
00:26:37,039 --> 00:26:38,080
had our various

732
00:26:38,080 --> 00:26:41,520
pods and services and with the service

733
00:26:41,520 --> 00:26:42,000
mesh

734
00:26:42,000 --> 00:26:44,080
we have the various pods and services

735
00:26:44,080 --> 00:26:45,679
associated with the service meshes

736
00:26:45,679 --> 00:26:46,720
control plane

737
00:26:46,720 --> 00:26:49,840
and we have those sidecar proxies

738
00:26:49,840 --> 00:26:51,760
we're pretty much running twice the

739
00:26:51,760 --> 00:26:54,320
number of containers in our cluster

740
00:26:54,320 --> 00:26:55,840
so there will definitely be some

741
00:26:55,840 --> 00:26:58,000
additional compute cost

742
00:26:58,000 --> 00:27:00,640
now granted that tomcat service that

743
00:27:00,640 --> 00:27:02,400
container is probably a lot beefier a

744
00:27:02,400 --> 00:27:04,080
lot heavier a lot slower

745
00:27:04,080 --> 00:27:06,799
than this sidecar proxy so maybe we're

746
00:27:06,799 --> 00:27:07,360
not using

747
00:27:07,360 --> 00:27:09,919
twice the horsepower maybe we're using

748
00:27:09,919 --> 00:27:11,520
well 1.6

749
00:27:11,520 --> 00:27:13,440
times the horsepower but there is a

750
00:27:13,440 --> 00:27:16,000
non-trivial amount of additional compute

751
00:27:16,000 --> 00:27:18,880
now the sidecar proxy is pretty fast so

752
00:27:18,880 --> 00:27:20,640
there probably won't be a whole lot of

753
00:27:20,640 --> 00:27:23,360
latency involved in this experience but

754
00:27:23,360 --> 00:27:25,360
there is a whole lot more compute going

755
00:27:25,360 --> 00:27:25,840
on

756
00:27:25,840 --> 00:27:29,520
expect your cloud bill to go up

757
00:27:29,840 --> 00:27:32,640
a service mesh allows us to observe

758
00:27:32,640 --> 00:27:33,440
control

759
00:27:33,440 --> 00:27:36,880
and secure we can observe the traffic

760
00:27:36,880 --> 00:27:38,559
flowing between our services

761
00:27:38,559 --> 00:27:40,880
we can create policies that control this

762
00:27:40,880 --> 00:27:42,000
to only allow

763
00:27:42,000 --> 00:27:44,320
traffic in as we expect and we can

764
00:27:44,320 --> 00:27:45,760
secure that traffic

765
00:27:45,760 --> 00:27:48,320
using mutual tls with a trust train

766
00:27:48,320 --> 00:27:49,279
through the

767
00:27:49,279 --> 00:27:52,720
control plane use a service mesh

768
00:27:52,720 --> 00:27:55,279
if you have very high trusted or very

769
00:27:55,279 --> 00:27:57,600
low trusted workloads running alongside

770
00:27:57,600 --> 00:28:00,559
other workloads if you need to do pki or

771
00:28:00,559 --> 00:28:01,440
pci

772
00:28:01,440 --> 00:28:04,080
then you probably want to corner that

773
00:28:04,080 --> 00:28:05,840
off into a separate spot

774
00:28:05,840 --> 00:28:08,320
now kubernetes namespaces are great and

775
00:28:08,320 --> 00:28:10,720
they allow us to create policies that

776
00:28:10,720 --> 00:28:12,000
only certain users can

777
00:28:12,000 --> 00:28:15,120
launch content but once a container is

778
00:28:15,120 --> 00:28:16,799
running inside of kubernetes

779
00:28:16,799 --> 00:28:18,960
the namespace does not block network

780
00:28:18,960 --> 00:28:20,159
traffic between

781
00:28:20,159 --> 00:28:23,279
services a service mesh can create that

782
00:28:23,279 --> 00:28:25,760
boundary between the namespaces

783
00:28:25,760 --> 00:28:27,840
perhaps i have a very untrusted workload

784
00:28:27,840 --> 00:28:30,159
maybe i'm running a multi-tenant system

785
00:28:30,159 --> 00:28:32,399
in this case i can create those lanes

786
00:28:32,399 --> 00:28:34,960
where a specific tenant only can see the

787
00:28:34,960 --> 00:28:35,600
accident

788
00:28:35,600 --> 00:28:39,039
only see and access their own resources

789
00:28:39,039 --> 00:28:41,039
if i need security in depth a service

790
00:28:41,039 --> 00:28:43,840
mesh is a great mechanism for doing that

791
00:28:43,840 --> 00:28:46,080
if i need a b routing or a beta channel

792
00:28:46,080 --> 00:28:48,240
if i need to observe secure or control

793
00:28:48,240 --> 00:28:51,760
my traffic a service mesh can be perfect

794
00:28:51,760 --> 00:28:54,159
a service mesh is great if i have that

795
00:28:54,159 --> 00:28:55,200
need to observe

796
00:28:55,200 --> 00:28:57,440
secure and control my traffic there is

797
00:28:57,440 --> 00:28:59,039
some additional compute cost

798
00:28:59,039 --> 00:29:01,840
but it is a really elegant system find

799
00:29:01,840 --> 00:29:03,360
me at that place that the conference has

800
00:29:03,360 --> 00:29:05,039
designated for q a

801
00:29:05,039 --> 00:29:06,720
or if you're watching this later hit me

802
00:29:06,720 --> 00:29:08,880
up on twitter at rob underscore rich

803
00:29:08,880 --> 00:29:10,960
you can grab these slides online right

804
00:29:10,960 --> 00:29:12,960
now at robridge.org

805
00:29:12,960 --> 00:29:22,320
thanks for joining us at devsecond24

