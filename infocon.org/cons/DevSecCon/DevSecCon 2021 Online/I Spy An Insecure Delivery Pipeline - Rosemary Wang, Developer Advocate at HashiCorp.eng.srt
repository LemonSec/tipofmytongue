1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:11,519 --> 00:00:13,599
hello everyone at dead set con

3
00:00:13,599 --> 00:00:15,839
i'm really excited that you're here to

4
00:00:15,839 --> 00:00:17,199
join my session today

5
00:00:17,199 --> 00:00:20,160
and today we're going to well play a

6
00:00:20,160 --> 00:00:20,960
game

7
00:00:20,960 --> 00:00:22,080
of course we're going to play the

8
00:00:22,080 --> 00:00:24,640
classic game of i spy

9
00:00:24,640 --> 00:00:26,640
if you haven't played this in your car

10
00:00:26,640 --> 00:00:28,240
on the way somewhere or you have if you

11
00:00:28,240 --> 00:00:30,240
haven't read some of the books well

12
00:00:30,240 --> 00:00:32,079
we're going to try to play a game

13
00:00:32,079 --> 00:00:36,320
with an insecure delivery pipeline today

14
00:00:37,600 --> 00:00:39,520
so as i mentioned before let's play a

15
00:00:39,520 --> 00:00:41,680
game of i spy but who am i

16
00:00:41,680 --> 00:00:43,600
i'm your host rosemary wong i'm a

17
00:00:43,600 --> 00:00:45,520
developer advocate at hashicorp i like

18
00:00:45,520 --> 00:00:47,039
talking about infrastructure

19
00:00:47,039 --> 00:00:49,280
infrastructure security and devops if

20
00:00:49,280 --> 00:00:51,120
you want to learn more about me feel

21
00:00:51,120 --> 00:00:52,800
free to reach out to me at any of the

22
00:00:52,800 --> 00:00:53,440
handles

23
00:00:53,440 --> 00:00:56,160
on this slide

24
00:00:56,559 --> 00:00:58,000
all right i mentioned before we're

25
00:00:58,000 --> 00:01:00,239
starting with a delivery pipeline this

26
00:01:00,239 --> 00:01:01,520
delivery pipeline

27
00:01:01,520 --> 00:01:03,359
is focused on infrastructure delivery

28
00:01:03,359 --> 00:01:05,438
but any pipeline will pretty much

29
00:01:05,438 --> 00:01:08,400
express a workflow for applications or

30
00:01:08,400 --> 00:01:10,240
infrastructure to go to production

31
00:01:10,240 --> 00:01:11,680
i like focusing on infrastructure

32
00:01:11,680 --> 00:01:13,360
because it often provides a lot of

33
00:01:13,360 --> 00:01:15,280
interesting perspectives from a security

34
00:01:15,280 --> 00:01:17,360
standpoint and it's one that a lot of

35
00:01:17,360 --> 00:01:19,200
people don't necessarily think deeply

36
00:01:19,200 --> 00:01:19,920
about

37
00:01:19,920 --> 00:01:22,000
so this is an infrastructure pipeline

38
00:01:22,000 --> 00:01:23,600
it's using terraform

39
00:01:23,600 --> 00:01:26,720
to format initialize plan and

40
00:01:26,720 --> 00:01:29,600
apply an infrastructure configuration to

41
00:01:29,600 --> 00:01:31,520
production

42
00:01:31,520 --> 00:01:33,360
in this pipeline i've got a couple of

43
00:01:33,360 --> 00:01:34,640
stages the first

44
00:01:34,640 --> 00:01:36,960
is a unit test the second is build the

45
00:01:36,960 --> 00:01:37,920
third is deploy

46
00:01:37,920 --> 00:01:39,280
there's another test stage for

47
00:01:39,280 --> 00:01:40,960
integration testing or end-to-end

48
00:01:40,960 --> 00:01:41,600
testing

49
00:01:41,600 --> 00:01:43,040
and then there's a release stage the

50
00:01:43,040 --> 00:01:45,200
release stage applies the configuration

51
00:01:45,200 --> 00:01:46,320
to production

52
00:01:46,320 --> 00:01:47,680
if you're not so familiar with

53
00:01:47,680 --> 00:01:49,439
infrastructure delivery pipelines that's

54
00:01:49,439 --> 00:01:50,159
okay

55
00:01:50,159 --> 00:01:52,159
the idea is that this pipeline is

56
00:01:52,159 --> 00:01:53,520
representative of some of the more

57
00:01:53,520 --> 00:01:54,000
generic

58
00:01:54,000 --> 00:01:55,600
pipelines you might have whether you're

59
00:01:55,600 --> 00:01:57,200
deploying an application

60
00:01:57,200 --> 00:02:00,079
to any kind of workload orchestration or

61
00:02:00,079 --> 00:02:01,040
you're deploying

62
00:02:01,040 --> 00:02:03,439
any sort of infrastructure to your cloud

63
00:02:03,439 --> 00:02:05,600
provider

64
00:02:05,600 --> 00:02:08,318
in this game we're going to try to spy

65
00:02:08,318 --> 00:02:09,199
three things

66
00:02:09,199 --> 00:02:11,280
the first is a password the second is a

67
00:02:11,280 --> 00:02:12,239
public endpoint

68
00:02:12,239 --> 00:02:13,319
and the third is a possible

69
00:02:13,319 --> 00:02:15,520
misconfiguration

70
00:02:15,520 --> 00:02:19,760
as we walk through some of these i spy

71
00:02:19,760 --> 00:02:21,760
targets what we're going to identify are

72
00:02:21,760 --> 00:02:23,760
ways that we can do it better as well

73
00:02:23,760 --> 00:02:26,319
so the first thing is let's buy a

74
00:02:26,319 --> 00:02:27,840
password public endpoint or

75
00:02:27,840 --> 00:02:31,200
a possible misconfiguration all right

76
00:02:31,200 --> 00:02:32,560
let's start with my infrastructure

77
00:02:32,560 --> 00:02:34,720
pipeline my infrastructure pipeline

78
00:02:34,720 --> 00:02:36,720
takes an input the input

79
00:02:36,720 --> 00:02:38,319
involves a database username and

80
00:02:38,319 --> 00:02:40,480
database password now you might be

81
00:02:40,480 --> 00:02:41,120
thinking

82
00:02:41,120 --> 00:02:42,879
why would someone pass a username or a

83
00:02:42,879 --> 00:02:44,959
password to a pipeline

84
00:02:44,959 --> 00:02:46,480
well if you're doing something like

85
00:02:46,480 --> 00:02:48,560
infrastructure as code you're trying to

86
00:02:48,560 --> 00:02:50,319
express as much configuration as

87
00:02:50,319 --> 00:02:51,840
possible in version control

88
00:02:51,840 --> 00:02:54,400
so it's pretty natural to pass a

89
00:02:54,400 --> 00:02:56,080
username and a password

90
00:02:56,080 --> 00:02:58,159
to any kind of middleware component

91
00:02:58,159 --> 00:02:59,680
whether it be database

92
00:02:59,680 --> 00:03:02,959
cache hues or otherwise you want to make

93
00:03:02,959 --> 00:03:03,680
sure that

94
00:03:03,680 --> 00:03:05,280
well someone knows whether or not these

95
00:03:05,280 --> 00:03:06,720
usernames or passwords changed and you

96
00:03:06,720 --> 00:03:08,720
want to manage them immutably

97
00:03:08,720 --> 00:03:11,519
so as a result you'll pass them as part

98
00:03:11,519 --> 00:03:14,000
of your pipeline

99
00:03:14,000 --> 00:03:16,560
but here's the problem do you spy

100
00:03:16,560 --> 00:03:18,319
something that's not right

101
00:03:18,319 --> 00:03:21,280
with this configuration i'll give it a

102
00:03:21,280 --> 00:03:22,879
moment

103
00:03:22,879 --> 00:03:27,040
but i spy a database password

104
00:03:27,040 --> 00:03:29,920
this is actually a pull request that i

105
00:03:29,920 --> 00:03:30,959
extracted

106
00:03:30,959 --> 00:03:32,799
i made this mistake a night before a

107
00:03:32,799 --> 00:03:36,080
demo i realized that my pull request

108
00:03:36,080 --> 00:03:38,879
prints out the plan of my infrastructure

109
00:03:38,879 --> 00:03:39,840
configuration

110
00:03:39,840 --> 00:03:43,200
and output the database password i was

111
00:03:43,200 --> 00:03:44,239
in shock

112
00:03:44,239 --> 00:03:46,480
i really was uh not sure what to do at

113
00:03:46,480 --> 00:03:48,239
this point because i only had

114
00:03:48,239 --> 00:03:50,480
about eight hours before i had to

115
00:03:50,480 --> 00:03:52,480
demonstrate this live

116
00:03:52,480 --> 00:03:55,040
and so i basically decided to go with my

117
00:03:55,040 --> 00:03:56,480
favorite plan which is plan

118
00:03:56,480 --> 00:03:58,239
r and it's not just my favorite plan

119
00:03:58,239 --> 00:03:59,599
because it's the first letter of my

120
00:03:59,599 --> 00:04:00,480
first name

121
00:04:00,480 --> 00:04:02,400
it's my favorite plan because literally

122
00:04:02,400 --> 00:04:04,959
i go through this process every time i

123
00:04:04,959 --> 00:04:07,120
accidentally compromise the credentials

124
00:04:07,120 --> 00:04:08,080
so the

125
00:04:08,080 --> 00:04:10,640
wonderful steps of plan r involve regret

126
00:04:10,640 --> 00:04:11,599
everything

127
00:04:11,599 --> 00:04:13,760
the second is revoking the database

128
00:04:13,760 --> 00:04:15,360
password or the secret that you've

129
00:04:15,360 --> 00:04:16,160
compromised

130
00:04:16,160 --> 00:04:18,639
the third is rotating it the fourth is

131
00:04:18,639 --> 00:04:19,519
referencing it

132
00:04:19,519 --> 00:04:21,680
and finding wherever you've referenced

133
00:04:21,680 --> 00:04:22,560
it uh

134
00:04:22,560 --> 00:04:24,960
the fifth step is replace find and

135
00:04:24,960 --> 00:04:26,800
replace is your best friend during plan

136
00:04:26,800 --> 00:04:27,360
r

137
00:04:27,360 --> 00:04:29,360
and the sixth especially in the case of

138
00:04:29,360 --> 00:04:31,280
pipelines is re-running everything

139
00:04:31,280 --> 00:04:33,680
when you define a database password and

140
00:04:33,680 --> 00:04:35,040
username like i have

141
00:04:35,040 --> 00:04:37,040
statically you need to rerun every

142
00:04:37,040 --> 00:04:38,800
pipeline that references it

143
00:04:38,800 --> 00:04:40,479
you can't leave the pipelines as they

144
00:04:40,479 --> 00:04:42,160
are because you're already running

145
00:04:42,160 --> 00:04:44,479
some infrastructure or application in

146
00:04:44,479 --> 00:04:47,280
production that's using the old password

147
00:04:47,280 --> 00:04:50,160
so plan r is fantastic except it's

148
00:04:50,160 --> 00:04:52,320
really difficult to implement

149
00:04:52,320 --> 00:04:54,560
at a large scale it's also very

150
00:04:54,560 --> 00:04:56,000
difficult for

151
00:04:56,000 --> 00:04:58,000
an operator or an engineer who has to

152
00:04:58,000 --> 00:04:59,280
execute upon it because it's

153
00:04:59,280 --> 00:05:01,840
predominantly manual

154
00:05:01,840 --> 00:05:04,240
so how can we do this differently well

155
00:05:04,240 --> 00:05:05,440
let's think about

156
00:05:05,440 --> 00:05:07,039
masking the database username and

157
00:05:07,039 --> 00:05:09,360
password and we take this for granted

158
00:05:09,360 --> 00:05:10,880
right in the application space you might

159
00:05:10,880 --> 00:05:12,320
think about masking

160
00:05:12,320 --> 00:05:14,320
the database username or the database

161
00:05:14,320 --> 00:05:15,840
password in logs

162
00:05:15,840 --> 00:05:18,080
or even in your pipelines but in

163
00:05:18,080 --> 00:05:20,080
infrastructure it's easy to forget to do

164
00:05:20,080 --> 00:05:20,880
this

165
00:05:20,880 --> 00:05:22,720
in terraform there is an attribute

166
00:05:22,720 --> 00:05:24,400
called sensitive true which will

167
00:05:24,400 --> 00:05:26,639
identify and mask any instance of the

168
00:05:26,639 --> 00:05:28,479
variable that you're passing in

169
00:05:28,479 --> 00:05:30,080
and so i'll if i add this to the

170
00:05:30,080 --> 00:05:32,400
pipeline which i did what it will do

171
00:05:32,400 --> 00:05:35,440
is redact any of the sensitive

172
00:05:35,440 --> 00:05:36,400
information

173
00:05:36,400 --> 00:05:39,199
that i've predefined so for example i

174
00:05:39,199 --> 00:05:40,720
define my connection url

175
00:05:40,720 --> 00:05:42,240
as sensitive or portions of my

176
00:05:42,240 --> 00:05:43,840
connection url as sensitive

177
00:05:43,840 --> 00:05:45,680
and now it does not print the database

178
00:05:45,680 --> 00:05:47,759
password and username into the pipeline

179
00:05:47,759 --> 00:05:48,400
at least

180
00:05:48,400 --> 00:05:50,479
so this made me feel a lot better i did

181
00:05:50,479 --> 00:05:52,160
keep the pr open

182
00:05:52,160 --> 00:05:54,000
for posterity so if you want to take a

183
00:05:54,000 --> 00:05:56,080
look at it you can uh the password is no

184
00:05:56,080 --> 00:05:57,600
longer valid it has been

185
00:05:57,600 --> 00:06:00,160
rotated but the idea is that i wanted to

186
00:06:00,160 --> 00:06:01,280
remind myself to

187
00:06:01,280 --> 00:06:03,199
at least make sure to mask that

188
00:06:03,199 --> 00:06:05,280
information

189
00:06:05,280 --> 00:06:07,120
so plan rx actually something you can

190
00:06:07,120 --> 00:06:08,479
improve further

191
00:06:08,479 --> 00:06:10,560
the problem with plan r is the revoke

192
00:06:10,560 --> 00:06:12,560
rotate reference and replace steps these

193
00:06:12,560 --> 00:06:14,560
take a lot of time

194
00:06:14,560 --> 00:06:16,639
not only should you be masking your

195
00:06:16,639 --> 00:06:18,479
secrets and protecting some sensitive

196
00:06:18,479 --> 00:06:20,000
information in your pipeline

197
00:06:20,000 --> 00:06:22,400
but you also want a really easy way to

198
00:06:22,400 --> 00:06:23,440
remediate them

199
00:06:23,440 --> 00:06:25,680
automatically and the solution to this

200
00:06:25,680 --> 00:06:27,520
is usually to use a secrets manager

201
00:06:27,520 --> 00:06:29,120
secrets manager can be a little bit

202
00:06:29,120 --> 00:06:30,720
difficult to set up

203
00:06:30,720 --> 00:06:32,880
but what you it will allow you to do is

204
00:06:32,880 --> 00:06:33,759
automatically

205
00:06:33,759 --> 00:06:36,720
rotate the password and you'll be able

206
00:06:36,720 --> 00:06:38,479
to replace everything

207
00:06:38,479 --> 00:06:40,639
but with the reference to the actual

208
00:06:40,639 --> 00:06:42,240
secrets manager so if you're already

209
00:06:42,240 --> 00:06:43,680
retrieving secrets from a secrets

210
00:06:43,680 --> 00:06:44,400
manager

211
00:06:44,400 --> 00:06:46,400
your pipeline just needs to be rerun and

212
00:06:46,400 --> 00:06:48,240
just grab the new secrets so there's

213
00:06:48,240 --> 00:06:49,599
really nothing that i have to do

214
00:06:49,599 --> 00:06:50,479
manually

215
00:06:50,479 --> 00:06:52,800
which makes me pretty happy as well so

216
00:06:52,800 --> 00:06:54,400
in terms of this process i probably

217
00:06:54,400 --> 00:06:55,120
should have put

218
00:06:55,120 --> 00:06:57,840
the password into a secrets manager and

219
00:06:57,840 --> 00:06:59,520
actually rotated it within the secrets

220
00:06:59,520 --> 00:07:00,160
manager

221
00:07:00,160 --> 00:07:02,479
rather than hard coding and passing it

222
00:07:02,479 --> 00:07:05,280
through as a static variable

223
00:07:05,280 --> 00:07:07,599
all right so we've spotted a database

224
00:07:07,599 --> 00:07:08,800
password

225
00:07:08,800 --> 00:07:11,520
but what could we do even better well we

226
00:07:11,520 --> 00:07:12,400
can take

227
00:07:12,400 --> 00:07:15,120
our pipeline and build steps to

228
00:07:15,120 --> 00:07:16,639
authenticate to a secrets manager

229
00:07:16,639 --> 00:07:18,319
achieve the secrets and ultimately

230
00:07:18,319 --> 00:07:20,000
verify whether or not those secrets have

231
00:07:20,000 --> 00:07:21,120
been masked

232
00:07:21,120 --> 00:07:23,919
so this is a pipeline configuration that

233
00:07:23,919 --> 00:07:25,199
i've put together

234
00:07:25,199 --> 00:07:26,720
for this particular pipeline that

235
00:07:26,720 --> 00:07:28,240
deploys to aws

236
00:07:28,240 --> 00:07:32,000
infrastructure what i've done is added a

237
00:07:32,000 --> 00:07:34,240
step within the pipeline to authenticate

238
00:07:34,240 --> 00:07:35,919
to the secrets manager retrieve the

239
00:07:35,919 --> 00:07:36,560
secret

240
00:07:36,560 --> 00:07:38,080
and ultimately inject it into the

241
00:07:38,080 --> 00:07:40,000
pipeline so this is a list of secrets

242
00:07:40,000 --> 00:07:42,319
like my aws access key secret access key

243
00:07:42,319 --> 00:07:43,440
session token

244
00:07:43,440 --> 00:07:45,520
other tokens and i'll inject that into

245
00:07:45,520 --> 00:07:47,199
the pipeline what's important to

246
00:07:47,199 --> 00:07:49,039
recognize is that there's actually two

247
00:07:49,039 --> 00:07:50,720
sets of secrets in an infrastructure

248
00:07:50,720 --> 00:07:51,520
pipeline

249
00:07:51,520 --> 00:07:53,840
the first is the database username and

250
00:07:53,840 --> 00:07:55,440
database password that i

251
00:07:55,440 --> 00:07:57,840
added in as variables to create the

252
00:07:57,840 --> 00:07:58,800
infrastructure

253
00:07:58,800 --> 00:08:01,840
but there's also secrets that you have

254
00:08:01,840 --> 00:08:04,240
that you need to access infrastructure

255
00:08:04,240 --> 00:08:06,400
providers this is like your aws access

256
00:08:06,400 --> 00:08:06,879
key

257
00:08:06,879 --> 00:08:09,199
your azure service principles there's

258
00:08:09,199 --> 00:08:10,479
two separate secrets

259
00:08:10,479 --> 00:08:12,080
and so if you manage both sets of

260
00:08:12,080 --> 00:08:13,840
secrets within a secrets manager it

261
00:08:13,840 --> 00:08:15,280
makes it a lot easier to

262
00:08:15,280 --> 00:08:19,440
manage both across all of your pipelines

263
00:08:20,240 --> 00:08:23,360
i spy instead of a database password a

264
00:08:23,360 --> 00:08:25,440
secrets manager in this pipeline

265
00:08:25,440 --> 00:08:27,120
and it makes it easier to issue the

266
00:08:27,120 --> 00:08:28,879
credentials for each pipeline run so

267
00:08:28,879 --> 00:08:30,160
anytime your pipeline

268
00:08:30,160 --> 00:08:33,519
executes or needs to run again it will

269
00:08:33,519 --> 00:08:35,519
retrieve the new credentials from the

270
00:08:35,519 --> 00:08:36,479
secrets manager

271
00:08:36,479 --> 00:08:38,320
you don't have to go in and redefine

272
00:08:38,320 --> 00:08:40,880
them or change environment variables

273
00:08:40,880 --> 00:08:42,479
you also manage the access to the

274
00:08:42,479 --> 00:08:44,800
secrets you can manage the access per

275
00:08:44,800 --> 00:08:47,440
pipeline so each pipeline gets their own

276
00:08:47,440 --> 00:08:49,279
path for example in the secrets manager

277
00:08:49,279 --> 00:08:50,800
to retrieve the information that they

278
00:08:50,800 --> 00:08:51,519
need

279
00:08:51,519 --> 00:08:53,120
you also get one place to audit the

280
00:08:53,120 --> 00:08:54,640
usage of the credentials within a

281
00:08:54,640 --> 00:08:56,640
secrets management store

282
00:08:56,640 --> 00:08:59,040
it also usually offers some kind of

283
00:08:59,040 --> 00:09:00,959
audit logging so you can take a look at

284
00:09:00,959 --> 00:09:02,560
all the credentials you're using

285
00:09:02,560 --> 00:09:03,920
and when they're being used and with

286
00:09:03,920 --> 00:09:06,240
pipeline in this case i

287
00:09:06,240 --> 00:09:09,279
am using a delivery pipeline so you may

288
00:09:09,279 --> 00:09:10,560
not spy

289
00:09:10,560 --> 00:09:13,279
secrets in applications for your in your

290
00:09:13,279 --> 00:09:14,800
delivery pipeline you might actually

291
00:09:14,800 --> 00:09:16,320
find them in application logs as i

292
00:09:16,320 --> 00:09:17,279
mentioned before

293
00:09:17,279 --> 00:09:18,880
so i would say that this kind of

294
00:09:18,880 --> 00:09:20,800
approach is definitely a thought that

295
00:09:20,800 --> 00:09:22,000
you should think about

296
00:09:22,000 --> 00:09:24,800
improving for infrastructure delivery

297
00:09:24,800 --> 00:09:25,920
pipelines

298
00:09:25,920 --> 00:09:28,240
and application pipelines and don't

299
00:09:28,240 --> 00:09:29,680
usually include these secrets they're

300
00:09:29,680 --> 00:09:31,360
usually dynamically configured or

301
00:09:31,360 --> 00:09:34,399
retrieved by applications

302
00:09:34,399 --> 00:09:37,279
okay so we found a password let's find

303
00:09:37,279 --> 00:09:38,720
the other two a public endpoint and a

304
00:09:38,720 --> 00:09:41,680
possible misconfiguration

305
00:09:41,680 --> 00:09:43,360
so let's take a look at our pipeline

306
00:09:43,360 --> 00:09:45,680
again recall that i've added

307
00:09:45,680 --> 00:09:47,760
a step in my pipeline to import the

308
00:09:47,760 --> 00:09:49,760
secrets from my secrets manager in this

309
00:09:49,760 --> 00:09:50,080
case

310
00:09:50,080 --> 00:09:54,000
i'm using a secrets manager called vault

311
00:09:54,000 --> 00:09:55,680
this architecture involves a couple

312
00:09:55,680 --> 00:09:57,120
steps the first

313
00:09:57,120 --> 00:10:00,560
is that the vault server needs to

314
00:10:00,560 --> 00:10:02,399
have some kind of authentication in

315
00:10:02,399 --> 00:10:04,240
front of it so what github actions which

316
00:10:04,240 --> 00:10:06,720
is my workflow my pipeline workflow

317
00:10:06,720 --> 00:10:08,320
orchestration is going to do is

318
00:10:08,320 --> 00:10:10,560
authenticate to vault server first

319
00:10:10,560 --> 00:10:12,000
and this is so that it can actually

320
00:10:12,000 --> 00:10:14,480
retrieve the secrets later on

321
00:10:14,480 --> 00:10:16,160
then what it will do is retrieve the

322
00:10:16,160 --> 00:10:18,000
secrets and run any infrastructure

323
00:10:18,000 --> 00:10:19,519
configuration it needs to do so in this

324
00:10:19,519 --> 00:10:21,040
pipeline remember there was a release

325
00:10:21,040 --> 00:10:21,600
stage

326
00:10:21,600 --> 00:10:24,000
github actions needs credentials to do

327
00:10:24,000 --> 00:10:25,360
the release as i mentioned before two

328
00:10:25,360 --> 00:10:26,959
sets of credentials

329
00:10:26,959 --> 00:10:28,720
in this case this set of credentials is

330
00:10:28,720 --> 00:10:32,560
used to create infrastructure

331
00:10:32,560 --> 00:10:34,880
do you see an issue with this connection

332
00:10:34,880 --> 00:10:36,480
specifically between

333
00:10:36,480 --> 00:10:38,160
my ci framework my continuous

334
00:10:38,160 --> 00:10:41,600
integration framework and vault server

335
00:10:41,600 --> 00:10:45,040
well i spy a public endpoint

336
00:10:45,040 --> 00:10:47,200
and this is one of the most i think the

337
00:10:47,200 --> 00:10:48,640
the most shocking

338
00:10:48,640 --> 00:10:50,959
kind of inter at least interfaces that

339
00:10:50,959 --> 00:10:52,399
you'll have between your continuous

340
00:10:52,399 --> 00:10:54,640
integration framework and a vault server

341
00:10:54,640 --> 00:10:57,920
if you run your own on-prem integration

342
00:10:57,920 --> 00:10:59,279
framework

343
00:10:59,279 --> 00:11:01,600
this usually isn't a problem you there

344
00:11:01,600 --> 00:11:03,040
you at least have some kind of trust

345
00:11:03,040 --> 00:11:05,120
mechanism within your own

346
00:11:05,120 --> 00:11:07,760
internal network but as we move to more

347
00:11:07,760 --> 00:11:09,120
managed continuous integration

348
00:11:09,120 --> 00:11:10,240
frameworks

349
00:11:10,240 --> 00:11:12,560
we're doing this over public endpoints

350
00:11:12,560 --> 00:11:14,079
you don't have any real way

351
00:11:14,079 --> 00:11:17,920
of connecting to a managed continuous

352
00:11:17,920 --> 00:11:19,440
integration framework

353
00:11:19,440 --> 00:11:20,880
over a private endpoint there are

354
00:11:20,880 --> 00:11:22,160
exceptions though so we'll talk about

355
00:11:22,160 --> 00:11:23,600
those

356
00:11:23,600 --> 00:11:25,360
well with public endpoints there's a

357
00:11:25,360 --> 00:11:26,880
couple of solutions that you might have

358
00:11:26,880 --> 00:11:27,279
from a

359
00:11:27,279 --> 00:11:29,040
security standpoint to fixing the

360
00:11:29,040 --> 00:11:31,040
problem of a public endpoint

361
00:11:31,040 --> 00:11:32,720
the first is to shorten the time to live

362
00:11:32,720 --> 00:11:34,079
for secrets

363
00:11:34,079 --> 00:11:35,600
shortening the time to live for secrets

364
00:11:35,600 --> 00:11:37,360
means that rather than allowing the

365
00:11:37,360 --> 00:11:38,000
secret

366
00:11:38,000 --> 00:11:41,120
to have to be around for six months

367
00:11:41,120 --> 00:11:43,120
instead you change the secret every 30

368
00:11:43,120 --> 00:11:45,120
days something like that

369
00:11:45,120 --> 00:11:46,880
the other possible solution for public

370
00:11:46,880 --> 00:11:49,040
endpoints is to only allow ip addresses

371
00:11:49,040 --> 00:11:50,320
from the continuous integration

372
00:11:50,320 --> 00:11:51,440
framework

373
00:11:51,440 --> 00:11:52,959
if you're lucky your continuous

374
00:11:52,959 --> 00:11:55,120
integration framework offers a list

375
00:11:55,120 --> 00:11:58,160
of subnets that they'll commonly use

376
00:11:58,160 --> 00:12:01,200
however with most ci frameworks they'll

377
00:12:01,200 --> 00:12:03,440
actually shuffle the runners around

378
00:12:03,440 --> 00:12:04,240
different

379
00:12:04,240 --> 00:12:06,240
subnets so there's no guarantee that

380
00:12:06,240 --> 00:12:07,279
you're going to

381
00:12:07,279 --> 00:12:09,519
have the static subnet that you'll be

382
00:12:09,519 --> 00:12:11,120
able to allow from

383
00:12:11,120 --> 00:12:12,560
whether it's from your continuous

384
00:12:12,560 --> 00:12:14,160
integration framework to

385
00:12:14,160 --> 00:12:16,399
vault server or secrets manager or

386
00:12:16,399 --> 00:12:17,200
whatever

387
00:12:17,200 --> 00:12:18,720
private endpoint that you're supposed to

388
00:12:18,720 --> 00:12:21,360
have so there's no guarantee there

389
00:12:21,360 --> 00:12:23,360
the final solution is to use self-hosted

390
00:12:23,360 --> 00:12:25,120
runners and i think this is probably the

391
00:12:25,120 --> 00:12:26,560
better solution

392
00:12:26,560 --> 00:12:28,160
and in general what this means is that

393
00:12:28,160 --> 00:12:29,680
you create a runner

394
00:12:29,680 --> 00:12:32,880
in your own network and the public

395
00:12:32,880 --> 00:12:35,360
ci control plane will be able to

396
00:12:35,360 --> 00:12:36,079
communicate

397
00:12:36,079 --> 00:12:38,079
with your runner and then run jobs on

398
00:12:38,079 --> 00:12:39,839
your runner but there are some caveats

399
00:12:39,839 --> 00:12:41,279
to all three of these right

400
00:12:41,279 --> 00:12:43,040
when you shorten the time to live for

401
00:12:43,040 --> 00:12:45,519
secrets do you really want to change

402
00:12:45,519 --> 00:12:47,279
your database password every five

403
00:12:47,279 --> 00:12:48,399
minutes

404
00:12:48,399 --> 00:12:50,399
not necessarily it means that you have

405
00:12:50,399 --> 00:12:52,000
to re-authenticate every time

406
00:12:52,000 --> 00:12:54,560
that could add some performance problems

407
00:12:54,560 --> 00:12:56,079
within your application or your

408
00:12:56,079 --> 00:12:57,360
infrastructure

409
00:12:57,360 --> 00:12:59,360
on top of that only allowing ip

410
00:12:59,360 --> 00:13:00,800
addresses from continuous integration

411
00:13:00,800 --> 00:13:02,079
frameworks isn't really

412
00:13:02,079 --> 00:13:04,320
necessarily least privileged right if a

413
00:13:04,320 --> 00:13:06,560
ci framework changes their subnet

414
00:13:06,560 --> 00:13:08,480
ip address ranges you have to change as

415
00:13:08,480 --> 00:13:09,760
well

416
00:13:09,760 --> 00:13:11,839
finally self-hosted runners also come

417
00:13:11,839 --> 00:13:13,519
with their own security management

418
00:13:13,519 --> 00:13:15,360
concerns you have to make sure that

419
00:13:15,360 --> 00:13:17,120
the pipeline isn't going to run and

420
00:13:17,120 --> 00:13:18,800
inject some kind

421
00:13:18,800 --> 00:13:21,600
of malicious code on your self-hosted

422
00:13:21,600 --> 00:13:23,120
runner

423
00:13:23,120 --> 00:13:25,120
so in this case we'll go through the

424
00:13:25,120 --> 00:13:26,240
three solutions

425
00:13:26,240 --> 00:13:28,639
but the first in this implementation is

426
00:13:28,639 --> 00:13:30,880
fixing the least privilege problem

427
00:13:30,880 --> 00:13:32,480
one way you can fix the least privilege

428
00:13:32,480 --> 00:13:34,320
problem is adding a

429
00:13:34,320 --> 00:13:36,399
basically the seek the secure access

430
00:13:36,399 --> 00:13:38,240
management tool in front of it so in

431
00:13:38,240 --> 00:13:39,680
this case we could add something like

432
00:13:39,680 --> 00:13:40,320
boundary

433
00:13:40,320 --> 00:13:42,800
in front um which you would register the

434
00:13:42,800 --> 00:13:45,519
public endpoints that you have available

435
00:13:45,519 --> 00:13:47,040
in this case i'm registering let's say a

436
00:13:47,040 --> 00:13:49,120
database at a front end i register it to

437
00:13:49,120 --> 00:13:50,320
the controller

438
00:13:50,320 --> 00:13:53,360
and ultimately the pipeline or the ci

439
00:13:53,360 --> 00:13:55,199
framework will authenticate to

440
00:13:55,199 --> 00:13:58,240
the secure access management tool

441
00:13:58,240 --> 00:14:01,519
and then proxy through the secure access

442
00:14:01,519 --> 00:14:03,279
management tool to different endpoints

443
00:14:03,279 --> 00:14:06,000
so you're controlling one proxy that

444
00:14:06,000 --> 00:14:07,680
allows all this to happen

445
00:14:07,680 --> 00:14:08,959
from your continuous integration

446
00:14:08,959 --> 00:14:10,959
framework it's still public but you're

447
00:14:10,959 --> 00:14:12,240
able to control

448
00:14:12,240 --> 00:14:14,320
authenticate and identify any open

449
00:14:14,320 --> 00:14:16,639
sessions from the pipeline to

450
00:14:16,639 --> 00:14:18,560
any of your important endpoints so in

451
00:14:18,560 --> 00:14:20,639
this case i am going over a private

452
00:14:20,639 --> 00:14:22,480
network to connect to my secrets manager

453
00:14:22,480 --> 00:14:24,639
and this allows me to do that

454
00:14:24,639 --> 00:14:26,000
and i can successfully retrieve my

455
00:14:26,000 --> 00:14:29,120
secrets through the proxy

456
00:14:29,519 --> 00:14:31,519
the second option or the second solution

457
00:14:31,519 --> 00:14:32,959
that i mentioned was

458
00:14:32,959 --> 00:14:35,760
using the self-hosted runner in github

459
00:14:35,760 --> 00:14:37,199
actions which is the tool that i was

460
00:14:37,199 --> 00:14:39,120
using for this pipeline you can create

461
00:14:39,120 --> 00:14:40,959
the self-hosted runner within your own

462
00:14:40,959 --> 00:14:42,320
private subnet

463
00:14:42,320 --> 00:14:44,639
and the self-hosted runner includes some

464
00:14:44,639 --> 00:14:45,680
kind of agent

465
00:14:45,680 --> 00:14:47,680
for secrets manager or your private

466
00:14:47,680 --> 00:14:49,199
endpoint

467
00:14:49,199 --> 00:14:51,040
github actions will use the self-hosted

468
00:14:51,040 --> 00:14:52,959
runner to start the job

469
00:14:52,959 --> 00:14:55,279
and the self-hosted runner has the

470
00:14:55,279 --> 00:14:57,040
ability to authenticate to the private

471
00:14:57,040 --> 00:14:57,600
endpoint

472
00:14:57,600 --> 00:15:00,000
as it sees fit right so in this case in

473
00:15:00,000 --> 00:15:01,040
vault you can set up

474
00:15:01,040 --> 00:15:03,120
authentication methods to go through

475
00:15:03,120 --> 00:15:05,040
using aws identity

476
00:15:05,040 --> 00:15:07,199
to authenticate to the vault server but

477
00:15:07,199 --> 00:15:08,720
if you're using some other kind of

478
00:15:08,720 --> 00:15:09,360
endpoint

479
00:15:09,360 --> 00:15:11,040
you can use any of the other

480
00:15:11,040 --> 00:15:12,480
authentication methods

481
00:15:12,480 --> 00:15:14,320
and you would have that on your runner

482
00:15:14,320 --> 00:15:15,839
embedded on your runner so it makes it a

483
00:15:15,839 --> 00:15:17,680
little bit easier

484
00:15:17,680 --> 00:15:18,959
and finally that allows you to retrieve

485
00:15:18,959 --> 00:15:20,800
the secrets onto your runner so in some

486
00:15:20,800 --> 00:15:21,680
ways this is

487
00:15:21,680 --> 00:15:22,959
some people tell me this is more the

488
00:15:22,959 --> 00:15:25,440
more secure topology

489
00:15:25,440 --> 00:15:26,959
although there are some concerns right

490
00:15:26,959 --> 00:15:28,800
you do have to patch your runner

491
00:15:28,800 --> 00:15:30,480
you have to make sure that no one's

492
00:15:30,480 --> 00:15:32,240
going in and injecting any malicious

493
00:15:32,240 --> 00:15:33,920
code you have to control the access to

494
00:15:33,920 --> 00:15:36,319
it as well

495
00:15:36,399 --> 00:15:39,120
and finally self-hosted runner has the

496
00:15:39,120 --> 00:15:40,480
ability to make changes to your

497
00:15:40,480 --> 00:15:41,440
infrastructure so

498
00:15:41,440 --> 00:15:43,920
keep that in mind as well um anytime you

499
00:15:43,920 --> 00:15:45,920
add any access to your runner

500
00:15:45,920 --> 00:15:48,800
then it may have expanded privilege to

501
00:15:48,800 --> 00:15:50,560
do something in your network or in your

502
00:15:50,560 --> 00:15:51,839
infrastructure

503
00:15:51,839 --> 00:15:53,279
but in some ways this might be a better

504
00:15:53,279 --> 00:15:55,040
topology if you're trying to secure your

505
00:15:55,040 --> 00:15:56,959
public endpoints

506
00:15:56,959 --> 00:15:58,720
so with where we really spying right

507
00:15:58,720 --> 00:16:00,320
rather than spying a public endpoint

508
00:16:00,320 --> 00:16:02,000
what we're doing is we're adding access

509
00:16:02,000 --> 00:16:03,360
control to this pipeline

510
00:16:03,360 --> 00:16:06,000
we're able to proxy and audit the access

511
00:16:06,000 --> 00:16:07,519
to the different endpoints with secure

512
00:16:07,519 --> 00:16:08,560
access management

513
00:16:08,560 --> 00:16:10,160
and we can also manage and control our

514
00:16:10,160 --> 00:16:12,720
own runners by proxying and auditing the

515
00:16:12,720 --> 00:16:13,920
access itself

516
00:16:13,920 --> 00:16:16,240
we're able to get closer to some kind of

517
00:16:16,240 --> 00:16:18,560
zero trust model not to say that is 100

518
00:16:18,560 --> 00:16:19,440
zero trust

519
00:16:19,440 --> 00:16:21,040
but what we're able to do is at least

520
00:16:21,040 --> 00:16:23,120
audit and identify the sessions and

521
00:16:23,120 --> 00:16:25,120
connections based on the pipelines as

522
00:16:25,120 --> 00:16:28,320
well as the target infrastructure

523
00:16:28,320 --> 00:16:32,320
okay so finally we have our last eye spy

524
00:16:32,320 --> 00:16:34,839
our last x5 is a possible

525
00:16:34,839 --> 00:16:36,720
misconfiguration

526
00:16:36,720 --> 00:16:39,759
i added the entire configuration for the

527
00:16:39,759 --> 00:16:41,519
pipeline that i've been using

528
00:16:41,519 --> 00:16:43,680
this pipeline has a couple of jobs and

529
00:16:43,680 --> 00:16:45,040
some steps so if you're not as familiar

530
00:16:45,040 --> 00:16:46,480
with github actions which is what this

531
00:16:46,480 --> 00:16:47,360
is written in

532
00:16:47,360 --> 00:16:48,720
don't worry about it the idea is to

533
00:16:48,720 --> 00:16:50,720
focus on some of the steps you'll notice

534
00:16:50,720 --> 00:16:52,079
there's a couple steps including

535
00:16:52,079 --> 00:16:54,320
importing secrets setting up terraform

536
00:16:54,320 --> 00:16:56,800
terraform plan and getting some status

537
00:16:56,800 --> 00:16:57,759
and apply

538
00:16:57,759 --> 00:17:00,639
well do you see anything wrong with this

539
00:17:00,639 --> 00:17:02,880
configuration

540
00:17:02,880 --> 00:17:05,839
well i spy one thing wrong right off the

541
00:17:05,839 --> 00:17:06,959
bat

542
00:17:06,959 --> 00:17:09,119
and that's the pull request branch here

543
00:17:09,119 --> 00:17:11,039
so basically what the configuration is

544
00:17:11,039 --> 00:17:11,760
saying

545
00:17:11,760 --> 00:17:14,799
is on a pull request run a terraform

546
00:17:14,799 --> 00:17:15,359
plan

547
00:17:15,359 --> 00:17:17,439
so show me the dry run output of my

548
00:17:17,439 --> 00:17:19,520
infrastructure change

549
00:17:19,520 --> 00:17:22,880
then when i merge to main apply

550
00:17:22,880 --> 00:17:25,199
but what happens if someone removes the

551
00:17:25,199 --> 00:17:26,240
if statements

552
00:17:26,240 --> 00:17:29,120
from here there's nothing stopping

553
00:17:29,120 --> 00:17:31,200
someone from deleting the if statements

554
00:17:31,200 --> 00:17:32,000
out of this pipeline

555
00:17:32,000 --> 00:17:34,160
configuration and that's a possible

556
00:17:34,160 --> 00:17:36,160
misconfiguration in some regards

557
00:17:36,160 --> 00:17:37,600
because what happens is that if you

558
00:17:37,600 --> 00:17:39,360
delete the if statements

559
00:17:39,360 --> 00:17:42,720
it means someone can go push anything

560
00:17:42,720 --> 00:17:45,120
to production so if i deleted the if

561
00:17:45,120 --> 00:17:46,240
github ref

562
00:17:46,240 --> 00:17:49,039
main anyone can push anything to

563
00:17:49,039 --> 00:17:49,840
production

564
00:17:49,840 --> 00:17:54,000
it auto approves to my infrastructure

565
00:17:54,000 --> 00:17:55,919
this is actually a big misconfiguration

566
00:17:55,919 --> 00:17:57,120
issue because

567
00:17:57,120 --> 00:17:59,600
it's pretty easy to accidentally delete

568
00:17:59,600 --> 00:18:01,120
a line it's not to say someone's going

569
00:18:01,120 --> 00:18:01,679
to do this

570
00:18:01,679 --> 00:18:03,679
on purpose most of the time people are

571
00:18:03,679 --> 00:18:04,880
just trying to make the edits and

572
00:18:04,880 --> 00:18:06,080
sometimes they'll delete something

573
00:18:06,080 --> 00:18:08,880
because they forget that it exists

574
00:18:08,880 --> 00:18:10,160
there's actually a second possible

575
00:18:10,160 --> 00:18:12,480
misconfiguration as well

576
00:18:12,480 --> 00:18:15,360
and those are the steps here the big

577
00:18:15,360 --> 00:18:16,080
question is

578
00:18:16,080 --> 00:18:17,360
how do you know that these github

579
00:18:17,360 --> 00:18:19,679
actions are secure

580
00:18:19,679 --> 00:18:21,039
we don't know where these plugins are

581
00:18:21,039 --> 00:18:22,640
coming from now some of them are

582
00:18:22,640 --> 00:18:24,960
verified but others are not

583
00:18:24,960 --> 00:18:27,760
so is it okay to use these plugins do

584
00:18:27,760 --> 00:18:28,000
they

585
00:18:28,000 --> 00:18:29,679
have some kind of malicious code

586
00:18:29,679 --> 00:18:31,360
injected in them and that could

587
00:18:31,360 --> 00:18:33,360
compromise our delivery pipeline

588
00:18:33,360 --> 00:18:35,360
well we don't know either and so there's

589
00:18:35,360 --> 00:18:37,600
two possible misconfigurations

590
00:18:37,600 --> 00:18:39,919
i when you do this i spy exercise and

591
00:18:39,919 --> 00:18:42,000
you check your pipelines

592
00:18:42,000 --> 00:18:43,520
understand there are multiple exploits

593
00:18:43,520 --> 00:18:44,880
that you can have in these pipeline

594
00:18:44,880 --> 00:18:46,080
configurations

595
00:18:46,080 --> 00:18:47,440
first when you have a pipeline

596
00:18:47,440 --> 00:18:49,360
configuration it's often mutable means

597
00:18:49,360 --> 00:18:52,320
that you can change it in place

598
00:18:52,320 --> 00:18:54,799
second well someone can actually go in

599
00:18:54,799 --> 00:18:56,160
and add some remote code

600
00:18:56,160 --> 00:18:58,160
and execute it on any of your runners or

601
00:18:58,160 --> 00:19:00,320
any other and pretty much any

602
00:19:00,320 --> 00:19:01,919
kind of runner that you have interfacing

603
00:19:01,919 --> 00:19:03,039
with your infrastructure this is

604
00:19:03,039 --> 00:19:05,200
something that i discovered the hard way

605
00:19:05,200 --> 00:19:07,280
when i did find a bitcoin miner on our

606
00:19:07,280 --> 00:19:09,520
ci framework at one point

607
00:19:09,520 --> 00:19:11,760
uh this was a separate uh opportunity

608
00:19:11,760 --> 00:19:13,280
but the idea is that

609
00:19:13,280 --> 00:19:15,200
we didn't really know that there was a

610
00:19:15,200 --> 00:19:16,799
exploit possible exploit

611
00:19:16,799 --> 00:19:19,919
and this did happen so the other thing

612
00:19:19,919 --> 00:19:21,840
is that unverified plug-ins right

613
00:19:21,840 --> 00:19:24,000
are possibly subject to supply chain

614
00:19:24,000 --> 00:19:25,600
attacks this is something that did

615
00:19:25,600 --> 00:19:26,000
happen

616
00:19:26,000 --> 00:19:27,600
in some of the hashicorp pipelines it

617
00:19:27,600 --> 00:19:29,760
was remediated um it didn't it only

618
00:19:29,760 --> 00:19:31,520
compromised one set of things which is

619
00:19:31,520 --> 00:19:33,360
the gpg keys but other than that

620
00:19:33,360 --> 00:19:36,000
it was remediated fairly quickly the but

621
00:19:36,000 --> 00:19:37,039
the idea is that

622
00:19:37,039 --> 00:19:39,120
insecure pipeline configuration is

623
00:19:39,120 --> 00:19:41,440
something that you might do by accident

624
00:19:41,440 --> 00:19:44,799
but it has some real consequences to it

625
00:19:44,799 --> 00:19:48,080
so rather than wait and potentially

626
00:19:48,080 --> 00:19:49,919
uh kind of let these things

627
00:19:49,919 --> 00:19:52,400
misconfiguration sit in your pipelines

628
00:19:52,400 --> 00:19:55,760
try some policy as code in the pipeline

629
00:19:55,760 --> 00:19:57,440
what i mean by policy is code is

630
00:19:57,440 --> 00:19:59,200
automating the policies to check

631
00:19:59,200 --> 00:20:00,480
pipelines and their outputs

632
00:20:00,480 --> 00:20:02,080
right so you implement some kind of

633
00:20:02,080 --> 00:20:04,000
policy as code often to check

634
00:20:04,000 --> 00:20:06,000
misconfigurations in your infrastructure

635
00:20:06,000 --> 00:20:08,000
why not use the same policies code to

636
00:20:08,000 --> 00:20:08,400
check

637
00:20:08,400 --> 00:20:10,960
pipelines and their outputs so use

638
00:20:10,960 --> 00:20:13,280
pipeline's code to enforce the stages

639
00:20:13,280 --> 00:20:14,960
rather than allow everyone to use the

640
00:20:14,960 --> 00:20:17,039
same yaml files copy paste and edit it

641
00:20:17,039 --> 00:20:18,000
themselves

642
00:20:18,000 --> 00:20:19,679
you want to balance between getting the

643
00:20:19,679 --> 00:20:21,360
right kind of pipeline templates in

644
00:20:21,360 --> 00:20:22,400
place

645
00:20:22,400 --> 00:20:24,400
so that people actually know the stages

646
00:20:24,400 --> 00:20:25,600
in the pipeline that they need

647
00:20:25,600 --> 00:20:27,600
but also have the flexibility to add new

648
00:20:27,600 --> 00:20:29,440
things that they needed

649
00:20:29,440 --> 00:20:31,200
second solution is to audit your

650
00:20:31,200 --> 00:20:33,039
pipeline logs for possible issues so

651
00:20:33,039 --> 00:20:34,640
this was actually something i learned

652
00:20:34,640 --> 00:20:37,280
and you can audit your pipeline logs for

653
00:20:37,280 --> 00:20:39,919
any kind of unauthorized commands

654
00:20:39,919 --> 00:20:41,360
possible privileged commands that

655
00:20:41,360 --> 00:20:42,640
someone is executing within your

656
00:20:42,640 --> 00:20:43,520
pipelines

657
00:20:43,520 --> 00:20:46,320
this happens more often than not um some

658
00:20:46,320 --> 00:20:46,720
folks

659
00:20:46,720 --> 00:20:48,480
just you know need a database password

660
00:20:48,480 --> 00:20:50,159
for example so they may go in and they

661
00:20:50,159 --> 00:20:51,600
may edit your pipeline

662
00:20:51,600 --> 00:20:53,360
uh to print out the database password so

663
00:20:53,360 --> 00:20:54,799
they can use it for some break glass

664
00:20:54,799 --> 00:20:56,240
scenario that is not something you

665
00:20:56,240 --> 00:20:57,360
should be doing

666
00:20:57,360 --> 00:20:59,440
uh but they're you know that that is why

667
00:20:59,440 --> 00:21:01,039
you have some kind of audit capability

668
00:21:01,039 --> 00:21:02,559
make sure that you're actually checking

669
00:21:02,559 --> 00:21:04,400
for any outputs or someone's going in

670
00:21:04,400 --> 00:21:06,320
and getting that information

671
00:21:06,320 --> 00:21:08,400
finally verify plug-in check and check

672
00:21:08,400 --> 00:21:10,000
plug-in checksums

673
00:21:10,000 --> 00:21:12,159
this is something that is you know

674
00:21:12,159 --> 00:21:13,120
really helpful

675
00:21:13,120 --> 00:21:14,799
to ensure that you're using the right

676
00:21:14,799 --> 00:21:16,320
plugins and they haven't

677
00:21:16,320 --> 00:21:17,760
the plugins that you're planning to use

678
00:21:17,760 --> 00:21:19,919
haven't been compromised in some way

679
00:21:19,919 --> 00:21:22,000
and also make sure that you are using

680
00:21:22,000 --> 00:21:24,400
your a verified plugin so scan it make

681
00:21:24,400 --> 00:21:25,760
sure that it's actually something that

682
00:21:25,760 --> 00:21:27,760
you're allowed to use in a pipeline

683
00:21:27,760 --> 00:21:29,360
open source is really powerful there are

684
00:21:29,360 --> 00:21:31,120
a lot of fantastic plugins that will

685
00:21:31,120 --> 00:21:31,919
help you

686
00:21:31,919 --> 00:21:33,760
but keep in mind that you can't

687
00:21:33,760 --> 00:21:35,280
necessarily be certain

688
00:21:35,280 --> 00:21:36,960
if they won't compromise a secret or

689
00:21:36,960 --> 00:21:38,320
credentials in your pipeline

690
00:21:38,320 --> 00:21:40,000
and if they do compromise secrets or

691
00:21:40,000 --> 00:21:42,080
credentials hopefully you have a secrets

692
00:21:42,080 --> 00:21:44,480
manager in place that helps you

693
00:21:44,480 --> 00:21:47,200
execute plan r very seamlessly and as

694
00:21:47,200 --> 00:21:50,400
efficiently as possible

695
00:21:50,880 --> 00:21:52,400
all right so we played this game of i

696
00:21:52,400 --> 00:21:55,039
spy i think we spotted all three

697
00:21:55,039 --> 00:21:57,200
there are probably more so i'm sure if

698
00:21:57,200 --> 00:21:58,320
you have any other

699
00:21:58,320 --> 00:22:00,159
any other things that you've spotted and

700
00:22:00,159 --> 00:22:01,360
you would like to

701
00:22:01,360 --> 00:22:03,440
point them out feel free to let me know

702
00:22:03,440 --> 00:22:05,600
but we've spotted all these three things

703
00:22:05,600 --> 00:22:09,039
and well at the end of the day the hope

704
00:22:09,039 --> 00:22:09,600
is that

705
00:22:09,600 --> 00:22:11,360
you are able to spot some of these more

706
00:22:11,360 --> 00:22:12,880
general things and

707
00:22:12,880 --> 00:22:15,280
make a more secure delivery pipeline so

708
00:22:15,280 --> 00:22:17,200
rather than say that you have a pass a

709
00:22:17,200 --> 00:22:18,640
potential password that's going to be

710
00:22:18,640 --> 00:22:19,679
printed out

711
00:22:19,679 --> 00:22:21,840
or you're accessing things over a public

712
00:22:21,840 --> 00:22:23,919
endpoint or a pipeline has a possible

713
00:22:23,919 --> 00:22:25,520
misconfiguration because someone

714
00:22:25,520 --> 00:22:26,320
accidentally

715
00:22:26,320 --> 00:22:28,960
deleted a statement in the pipeline

716
00:22:28,960 --> 00:22:29,919
template

717
00:22:29,919 --> 00:22:31,919
well implement a couple things first

718
00:22:31,919 --> 00:22:32,960
secrets management

719
00:22:32,960 --> 00:22:34,880
second access control and third policy

720
00:22:34,880 --> 00:22:36,880
is code implementing some of these

721
00:22:36,880 --> 00:22:38,320
practices will help give you

722
00:22:38,320 --> 00:22:40,159
a more secure delivery pipeline and

723
00:22:40,159 --> 00:22:41,440
you'll at least have

724
00:22:41,440 --> 00:22:43,760
the opportunity to remediate and fix

725
00:22:43,760 --> 00:22:44,720
anything

726
00:22:44,720 --> 00:22:47,360
should there be some kind of issue with

727
00:22:47,360 --> 00:22:50,080
your pipeline

728
00:22:50,240 --> 00:22:51,840
now if you have any other questions

729
00:22:51,840 --> 00:22:53,600
you're always welcome to reach out to me

730
00:22:53,600 --> 00:22:55,120
at this handle

731
00:22:55,120 --> 00:22:56,960
and you're also if you would like the

732
00:22:56,960 --> 00:22:58,640
slides and potentially some of the

733
00:22:58,640 --> 00:23:00,960
demonstration code that this

734
00:23:00,960 --> 00:23:03,280
presentation was based on you can also

735
00:23:03,280 --> 00:23:08,080
check it out at joatmon08.github.io

736
00:23:08,080 --> 00:23:09,679
thanks for joining my session today and

737
00:23:09,679 --> 00:23:17,679
enjoy the rest of devs.com

