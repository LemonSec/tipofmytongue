1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,080 --> 00:00:14,400
hi everyone and it's great to be here at

3
00:00:14,400 --> 00:00:15,599
devsecond

4
00:00:15,599 --> 00:00:18,000
24 my name is barak schuster i'm a

5
00:00:18,000 --> 00:00:19,680
software architect at bridge crew by

6
00:00:19,680 --> 00:00:21,600
palo alto networks

7
00:00:21,600 --> 00:00:23,840
today we'll talk about graph theory and

8
00:00:23,840 --> 00:00:25,439
pulses code

9
00:00:25,439 --> 00:00:28,560
the talk has three super easy parts

10
00:00:28,560 --> 00:00:30,720
the first one we'll talk about what is

11
00:00:30,720 --> 00:00:32,079
falsies code

12
00:00:32,079 --> 00:00:34,000
then we'll go to a crash course on graph

13
00:00:34,000 --> 00:00:36,160
theory we'll try to simplify it

14
00:00:36,160 --> 00:00:38,879
so nobody will panic about combinatorics

15
00:00:38,879 --> 00:00:40,960
or mathematics

16
00:00:40,960 --> 00:00:43,360
and we'll go a step deep into chekhov's

17
00:00:43,360 --> 00:00:44,320
internals

18
00:00:44,320 --> 00:00:46,239
and see how graph queries are working

19
00:00:46,239 --> 00:00:48,559
for it

20
00:00:50,960 --> 00:00:53,440
so i thought for a while on this talk

21
00:00:53,440 --> 00:00:54,160
and

22
00:00:54,160 --> 00:00:57,680
since it has policy as code in the title

23
00:00:57,680 --> 00:00:59,680
i thought that it would be matching to

24
00:00:59,680 --> 00:01:01,199
discuss a little bit about the

25
00:01:01,199 --> 00:01:04,319
history of all cs code the way i have

26
00:01:04,319 --> 00:01:05,519
captured it

27
00:01:05,519 --> 00:01:08,560
so it's very biased and it's a

28
00:01:08,560 --> 00:01:11,119
non-linear timeline

29
00:01:11,119 --> 00:01:13,760
but since i've been working on yaml

30
00:01:13,760 --> 00:01:15,759
stuff and trying to make yaml stuff

31
00:01:15,759 --> 00:01:18,240
be exciting for the past few years i

32
00:01:18,240 --> 00:01:21,200
thought to give it a shot

33
00:01:21,200 --> 00:01:23,759
so for me if i'm trying to tell the

34
00:01:23,759 --> 00:01:26,240
story of the evolution of policy as code

35
00:01:26,240 --> 00:01:28,640
it's really a stage a set of stage

36
00:01:28,640 --> 00:01:31,040
phases

37
00:01:31,040 --> 00:01:33,280
i met them first as a software engineer

38
00:01:33,280 --> 00:01:35,040
in a big enterprise

39
00:01:35,040 --> 00:01:37,119
and then i encountered policies again in

40
00:01:37,119 --> 00:01:39,360
startups and other big enterprises that

41
00:01:39,360 --> 00:01:42,560
i had a chance to work in

42
00:01:43,119 --> 00:01:45,200
at the beginning everything was very

43
00:01:45,200 --> 00:01:46,560
manual

44
00:01:46,560 --> 00:01:48,960
businesses committees and regulations

45
00:01:48,960 --> 00:01:50,799
came together to create a set of best

46
00:01:50,799 --> 00:01:52,640
practices to secure

47
00:01:52,640 --> 00:01:55,040
data centers or cloud environments and

48
00:01:55,040 --> 00:01:57,520
the applications that run on top of them

49
00:01:57,520 --> 00:01:59,360
after a while enterprises have started

50
00:01:59,360 --> 00:02:01,200
to work with auditors

51
00:02:01,200 --> 00:02:03,600
to enable expansion of business and make

52
00:02:03,600 --> 00:02:05,280
sure that the right methodology

53
00:02:05,280 --> 00:02:08,560
and controls are in place best practices

54
00:02:08,560 --> 00:02:09,840
and reports like

55
00:02:09,840 --> 00:02:13,200
iso or sock 2 type 2 or

56
00:02:13,200 --> 00:02:15,680
pci if you are a company that works in

57
00:02:15,680 --> 00:02:17,120
the fintech area

58
00:02:17,120 --> 00:02:19,440
have stuck started to take place as

59
00:02:19,440 --> 00:02:22,080
industry standards

60
00:02:22,080 --> 00:02:25,280
auditors have started to ask things like

61
00:02:25,280 --> 00:02:28,239
where do you store your data who has

62
00:02:28,239 --> 00:02:30,160
access to the production environment and

63
00:02:30,160 --> 00:02:32,879
what is the process to gain that access

64
00:02:32,879 --> 00:02:34,800
are you following secure development

65
00:02:34,800 --> 00:02:37,920
principles like os top 10

66
00:02:37,920 --> 00:02:40,400
and it was good we started to have a

67
00:02:40,400 --> 00:02:41,760
discussion on

68
00:02:41,760 --> 00:02:43,760
what should the market look like what

69
00:02:43,760 --> 00:02:45,280
should be the best practices for

70
00:02:45,280 --> 00:02:46,640
security

71
00:02:46,640 --> 00:02:48,560
and that was the job of the auditor to

72
00:02:48,560 --> 00:02:50,640
help us make sure that we have all of

73
00:02:50,640 --> 00:02:52,959
those best practices in place

74
00:02:52,959 --> 00:02:56,080
and it was the job of the director of

75
00:02:56,080 --> 00:02:56,800
engineering

76
00:02:56,800 --> 00:02:59,840
or cso or cto or cio

77
00:02:59,840 --> 00:03:01,680
to answer all of those different

78
00:03:01,680 --> 00:03:03,200
questions of

79
00:03:03,200 --> 00:03:05,280
is my environment following a set of

80
00:03:05,280 --> 00:03:07,360
best practices

81
00:03:07,360 --> 00:03:10,720
and in the beginning it was very manual

82
00:03:10,720 --> 00:03:14,480
i really uh did not envy the director of

83
00:03:14,480 --> 00:03:15,840
engineering that should have answered

84
00:03:15,840 --> 00:03:17,519
all of those policies

85
00:03:17,519 --> 00:03:20,239
it was a giant piece of work

86
00:03:20,239 --> 00:03:22,319
spreadsheets over spreadsheets

87
00:03:22,319 --> 00:03:26,560
of policies the meant was good

88
00:03:26,560 --> 00:03:28,560
we wanted to be more secure and be

89
00:03:28,560 --> 00:03:30,080
compliant with best practices and to

90
00:03:30,080 --> 00:03:32,159
enable our business to grow to

91
00:03:32,159 --> 00:03:35,680
other dimensions but it was very

92
00:03:35,680 --> 00:03:38,720
tedious and boring tasks the good thing

93
00:03:38,720 --> 00:03:39,440
about it

94
00:03:39,440 --> 00:03:42,560
is that smart people got opinionated

95
00:03:42,560 --> 00:03:46,640
and have evolved those policy papers

96
00:03:46,640 --> 00:03:49,840
into online documents in things like

97
00:03:49,840 --> 00:03:50,879
confluence

98
00:03:50,879 --> 00:03:53,120
information security practitioners have

99
00:03:53,120 --> 00:03:54,480
wanted to create

100
00:03:54,480 --> 00:03:56,400
the policies that are best matching

101
00:03:56,400 --> 00:03:58,319
their organization risks

102
00:03:58,319 --> 00:04:00,480
started to do threat modeling and they

103
00:04:00,480 --> 00:04:02,480
wanted to collaborate with other teams

104
00:04:02,480 --> 00:04:03,760
or within the team

105
00:04:03,760 --> 00:04:05,519
and have the ability to integrate that

106
00:04:05,519 --> 00:04:08,400
to a ticketing system like jira

107
00:04:08,400 --> 00:04:12,000
so they've created an editable shareable

108
00:04:12,000 --> 00:04:14,319
collaborative document in confluence or

109
00:04:14,319 --> 00:04:15,599
internal wiki

110
00:04:15,599 --> 00:04:18,079
with the policies that are relevant for

111
00:04:18,079 --> 00:04:19,839
your org or application

112
00:04:19,839 --> 00:04:21,918
by the threat model that you have in

113
00:04:21,918 --> 00:04:24,560
your org

114
00:04:24,880 --> 00:04:27,919
and it was integrated to jira natively

115
00:04:27,919 --> 00:04:28,880
so

116
00:04:28,880 --> 00:04:31,759
you can convert a policy into a set of

117
00:04:31,759 --> 00:04:34,240
tasks that are managed by the iit team

118
00:04:34,240 --> 00:04:36,800
or sre or devops

119
00:04:36,800 --> 00:04:39,040
soon people realize that maintaining

120
00:04:39,040 --> 00:04:40,880
such a set of policies

121
00:04:40,880 --> 00:04:43,680
can be hard disruptive and very manual

122
00:04:43,680 --> 00:04:45,440
task

123
00:04:45,440 --> 00:04:47,919
so you get more good people on that

124
00:04:47,919 --> 00:04:48,639
topic

125
00:04:48,639 --> 00:04:50,880
more smart people that will try to

126
00:04:50,880 --> 00:04:52,560
automate that process

127
00:04:52,560 --> 00:04:55,840
and have continuous auditing on those

128
00:04:55,840 --> 00:04:56,560
policies

129
00:04:56,560 --> 00:04:58,720
on top of the data centers and cloud

130
00:04:58,720 --> 00:05:01,600
environments that you have

131
00:05:01,840 --> 00:05:04,560
so those smart people have started to

132
00:05:04,560 --> 00:05:05,360
create

133
00:05:05,360 --> 00:05:08,400
scripts we could start seeing basic

134
00:05:08,400 --> 00:05:10,720
automations for scanning pulses

135
00:05:10,720 --> 00:05:13,120
on top of the running environments those

136
00:05:13,120 --> 00:05:14,000
scripts were

137
00:05:14,000 --> 00:05:17,039
running on hourly or daily basis and

138
00:05:17,039 --> 00:05:19,039
they were making sure that things like

139
00:05:19,039 --> 00:05:22,320
vms databases serverless functions

140
00:05:22,320 --> 00:05:24,320
and their networking configuration are

141
00:05:24,320 --> 00:05:26,160
compliant with the best practices

142
00:05:26,160 --> 00:05:28,880
and if not automatically create a jira

143
00:05:28,880 --> 00:05:29,840
ticket and

144
00:05:29,840 --> 00:05:31,919
assign it to the matching owner within

145
00:05:31,919 --> 00:05:34,400
the engineering team

146
00:05:34,400 --> 00:05:36,560
so this helped the cloud security team

147
00:05:36,560 --> 00:05:38,000
or the information security team

148
00:05:38,000 --> 00:05:42,800
to scale and always audit always on

149
00:05:42,800 --> 00:05:46,240
all the different running servers but it

150
00:05:46,240 --> 00:05:50,080
have inflated the sres team's backlog

151
00:05:50,080 --> 00:05:52,479
with endless tasks on top of resources

152
00:05:52,479 --> 00:05:54,160
that were already deployed

153
00:05:54,160 --> 00:05:56,479
and they were already out there in the

154
00:05:56,479 --> 00:05:59,680
aws gcp or azure account

155
00:05:59,680 --> 00:06:03,039
and when sra teams have transitioned

156
00:06:03,039 --> 00:06:06,080
from provisioning resources manually

157
00:06:06,080 --> 00:06:06,880
through the

158
00:06:06,880 --> 00:06:09,039
different consoles of the cloud provider

159
00:06:09,039 --> 00:06:11,680
to infrastructure as code

160
00:06:11,680 --> 00:06:13,280
pushing different versions of

161
00:06:13,280 --> 00:06:16,000
microservices multiple times a day to

162
00:06:16,000 --> 00:06:17,120
production

163
00:06:17,120 --> 00:06:20,240
this solution of monitoring the cloud

164
00:06:20,240 --> 00:06:20,800
environment

165
00:06:20,800 --> 00:06:23,440
after resources were already provisioned

166
00:06:23,440 --> 00:06:25,520
took too many times

167
00:06:25,520 --> 00:06:27,680
a lot of effort and had too much

168
00:06:27,680 --> 00:06:30,160
friction

169
00:06:30,160 --> 00:06:32,479
so you take another group of smart

170
00:06:32,479 --> 00:06:34,319
people and you ask them to create a

171
00:06:34,319 --> 00:06:36,000
linter

172
00:06:36,000 --> 00:06:37,759
the different manifests languages the

173
00:06:37,759 --> 00:06:39,840
different configurations code languages

174
00:06:39,840 --> 00:06:41,919
like terraform cloud formation

175
00:06:41,919 --> 00:06:44,960
arm template serverless and kubernetes

176
00:06:44,960 --> 00:06:47,440
and even home charts and customize

177
00:06:47,440 --> 00:06:50,639
and before that ansible puppet and chef

178
00:06:50,639 --> 00:06:53,280
have introduced us the capability to

179
00:06:53,280 --> 00:06:54,319
actually

180
00:06:54,319 --> 00:06:56,479
unit test before resources are

181
00:06:56,479 --> 00:06:57,919
provisioned and as part of the

182
00:06:57,919 --> 00:06:59,759
development life cycle

183
00:06:59,759 --> 00:07:02,319
those same pulses making sure that a

184
00:07:02,319 --> 00:07:04,880
resource is encrypted that the right iem

185
00:07:04,880 --> 00:07:07,280
identity and access management policies

186
00:07:07,280 --> 00:07:08,639
are in place

187
00:07:08,639 --> 00:07:12,479
before anything is getting provisioned

188
00:07:12,720 --> 00:07:16,479
so some policy is code engines came out

189
00:07:16,479 --> 00:07:17,520
to the world

190
00:07:17,520 --> 00:07:21,680
uh two popular ones is opa called oppa

191
00:07:21,680 --> 00:07:24,160
by the cncf the cloud native foundation

192
00:07:24,160 --> 00:07:26,479
and chekhov by bridge

193
00:07:26,479 --> 00:07:28,720
so hi i'm barack i'm the maintainer of

194
00:07:28,720 --> 00:07:29,599
chakov

195
00:07:29,599 --> 00:07:31,840
or one of them and we're going to focus

196
00:07:31,840 --> 00:07:33,360
on that and some of the things that

197
00:07:33,360 --> 00:07:35,440
we've learned along the way

198
00:07:35,440 --> 00:07:39,120
so the idea of pulses code is that you

199
00:07:39,120 --> 00:07:41,520
write in high level in code in python or

200
00:07:41,520 --> 00:07:42,800
yaml

201
00:07:42,800 --> 00:07:46,400
or rego in text files

202
00:07:46,400 --> 00:07:49,120
the policies that you have and you can

203
00:07:49,120 --> 00:07:50,800
use those policies

204
00:07:50,800 --> 00:07:53,120
on and store them within a version

205
00:07:53,120 --> 00:07:54,879
control system

206
00:07:54,879 --> 00:07:57,599
use automated testing of them automated

207
00:07:57,599 --> 00:07:58,639
deployment

208
00:07:58,639 --> 00:08:02,639
peer-reviewed them etc

209
00:08:03,440 --> 00:08:06,319
so we took the different policies as

210
00:08:06,319 --> 00:08:07,599
code and we will

211
00:08:07,599 --> 00:08:09,759
see one example and it has some other

212
00:08:09,759 --> 00:08:11,360
advantages

213
00:08:11,360 --> 00:08:14,160
it you can also integrate policies as

214
00:08:14,160 --> 00:08:17,039
code engines into your ci cd pipeline

215
00:08:17,039 --> 00:08:18,560
and it will help you to inspect the

216
00:08:18,560 --> 00:08:20,560
different manifest before provisioning

217
00:08:20,560 --> 00:08:21,840
the resources

218
00:08:21,840 --> 00:08:23,599
into the cloud or even run them as a

219
00:08:23,599 --> 00:08:26,319
pre-commit hook or an ide plugin

220
00:08:26,319 --> 00:08:29,680
to review automatically a set of best

221
00:08:29,680 --> 00:08:31,440
practices and make sure that your code

222
00:08:31,440 --> 00:08:32,719
is compliant

223
00:08:32,719 --> 00:08:35,039
that way we have distributed a lot of

224
00:08:35,039 --> 00:08:37,200
the manual tasks that were previously

225
00:08:37,200 --> 00:08:39,519
been done by an auditor and then

226
00:08:39,519 --> 00:08:40,559
reviewed

227
00:08:40,559 --> 00:08:42,719
on running environment to something that

228
00:08:42,719 --> 00:08:44,399
is really part of the development life

229
00:08:44,399 --> 00:08:45,519
cycle

230
00:08:45,519 --> 00:08:47,600
the reason that we've done that is that

231
00:08:47,600 --> 00:08:48,800
what we like the most

232
00:08:48,800 --> 00:08:51,839
as engineers is when we have a task to

233
00:08:51,839 --> 00:08:52,880
get done with it

234
00:08:52,880 --> 00:08:55,040
and to move to the next one it's really

235
00:08:55,040 --> 00:08:56,320
bugging to return

236
00:08:56,320 --> 00:08:58,000
again and again to the same tasks and

237
00:08:58,000 --> 00:09:00,000
fixing stuff you just want to move to

238
00:09:00,000 --> 00:09:01,440
the next interesting

239
00:09:01,440 --> 00:09:04,800
topic that you need to develop

240
00:09:05,040 --> 00:09:08,480
so chekov was built to inspect

241
00:09:08,480 --> 00:09:10,320
and do static analysis of infrastructure

242
00:09:10,320 --> 00:09:12,160
as code on manifests like terraform

243
00:09:12,160 --> 00:09:14,000
cloud formation serverless kubernetes

244
00:09:14,000 --> 00:09:15,360
and others

245
00:09:15,360 --> 00:09:18,320
it has a pretty good coverage and more

246
00:09:18,320 --> 00:09:19,680
than 100 different

247
00:09:19,680 --> 00:09:22,800
open source contributors so

248
00:09:22,800 --> 00:09:27,200
let's do a quick install of of checkout

249
00:09:27,200 --> 00:09:28,800
so now what we'll do now we'll pip

250
00:09:28,800 --> 00:09:30,640
install check up i've already done it on

251
00:09:30,640 --> 00:09:31,920
my host

252
00:09:31,920 --> 00:09:34,080
and i have a terraform code for an s3

253
00:09:34,080 --> 00:09:35,040
bucket

254
00:09:35,040 --> 00:09:37,600
i'm going to run this chuck of command

255
00:09:37,600 --> 00:09:38,320
that will

256
00:09:38,320 --> 00:09:40,480
verify if my s3 bucket have backup and

257
00:09:40,480 --> 00:09:42,080
recovery in place meaning having

258
00:09:42,080 --> 00:09:43,839
versioning in place and i see that it

259
00:09:43,839 --> 00:09:45,760
doesn't

260
00:09:45,760 --> 00:09:48,720
how does this policy look like it has a

261
00:09:48,720 --> 00:09:51,760
section of metadata

262
00:09:51,760 --> 00:09:54,480
which includes the name of this policy

263
00:09:54,480 --> 00:09:56,480
ensure that s3 buckets which is a

264
00:09:56,480 --> 00:09:59,040
an object storage have versioning which

265
00:09:59,040 --> 00:10:00,959
is a backup and recovery configuration

266
00:10:00,959 --> 00:10:01,760
for it

267
00:10:01,760 --> 00:10:05,120
i gave it an identifier i told

268
00:10:05,120 --> 00:10:07,200
chuck of what resource to inspect in

269
00:10:07,200 --> 00:10:08,880
code

270
00:10:08,880 --> 00:10:11,519
and i've also told chekhov what

271
00:10:11,519 --> 00:10:13,839
attribute to inspect

272
00:10:13,839 --> 00:10:15,760
i told chekov that versioning should

273
00:10:15,760 --> 00:10:17,519
always be enabled

274
00:10:17,519 --> 00:10:21,360
for my s3 buckets so from now forward

275
00:10:21,360 --> 00:10:24,160
when every on every time they'll try to

276
00:10:24,160 --> 00:10:26,160
add or modify or scan

277
00:10:26,160 --> 00:10:28,959
an s3 bucket on top of defined encode in

278
00:10:28,959 --> 00:10:30,959
terraform code in my case

279
00:10:30,959 --> 00:10:32,959
i'll understand that the lines that are

280
00:10:32,959 --> 00:10:34,640
missing are actually

281
00:10:34,640 --> 00:10:36,800
versioning being enabled if i'll add

282
00:10:36,800 --> 00:10:38,240
that i can

283
00:10:38,240 --> 00:10:41,360
pass the test of jackal so chuckle has

284
00:10:41,360 --> 00:10:44,399
about 800 different policies that were

285
00:10:44,399 --> 00:10:45,760
contributed by

286
00:10:45,760 --> 00:10:47,839
different companies from the community

287
00:10:47,839 --> 00:10:48,800
and you can

288
00:10:48,800 --> 00:10:51,200
enjoy those inspection of your code

289
00:10:51,200 --> 00:10:52,640
automatically

290
00:10:52,640 --> 00:10:55,600
the thing is that on check of 1.0 we

291
00:10:55,600 --> 00:10:56,800
were only able

292
00:10:56,800 --> 00:11:00,560
to do attribute inspections

293
00:11:00,560 --> 00:11:02,640
what does that mean it means that we

294
00:11:02,640 --> 00:11:05,040
know to go on top of a configuration

295
00:11:05,040 --> 00:11:07,200
and ask does an attribute equals the

296
00:11:07,200 --> 00:11:09,120
value or set of attributes equals

297
00:11:09,120 --> 00:11:11,440
equals a value but the thing is

298
00:11:11,440 --> 00:11:15,600
environments are more complex than that

299
00:11:15,600 --> 00:11:18,640
so the story of evolution is really

300
00:11:18,640 --> 00:11:19,120
about

301
00:11:19,120 --> 00:11:22,240
the product productivity of authoring

302
00:11:22,240 --> 00:11:24,320
the compliance of our cloud environment

303
00:11:24,320 --> 00:11:25,920
or the best practices that we have in

304
00:11:25,920 --> 00:11:27,440
our cloud environment or internal

305
00:11:27,440 --> 00:11:28,560
policies that we

306
00:11:28,560 --> 00:11:30,399
have on our cloud environment but it's

307
00:11:30,399 --> 00:11:33,440
all about productivity of those manual

308
00:11:33,440 --> 00:11:35,760
tasks we increase the level of

309
00:11:35,760 --> 00:11:37,920
automation of policy auditing

310
00:11:37,920 --> 00:11:41,040
in each step of the way starting with

311
00:11:41,040 --> 00:11:43,440
the basic policies dictated by the

312
00:11:43,440 --> 00:11:46,480
market best practices and going forward

313
00:11:46,480 --> 00:11:48,640
to custom ones that we've decided that

314
00:11:48,640 --> 00:11:49,519
are relevant

315
00:11:49,519 --> 00:11:51,760
to our own organization based on a

316
00:11:51,760 --> 00:11:52,720
threat model

317
00:11:52,720 --> 00:11:55,920
that we've done on our data center aws

318
00:11:55,920 --> 00:11:58,240
account or applications

319
00:11:58,240 --> 00:12:00,240
and from there we're making sure that a

320
00:12:00,240 --> 00:12:01,839
linter

321
00:12:01,839 --> 00:12:03,680
is assisting the development teams to

322
00:12:03,680 --> 00:12:04,880
handle misconfigs

323
00:12:04,880 --> 00:12:08,560
faster and in an easier way

324
00:12:08,560 --> 00:12:11,120
but as i mentioned it gets more complex

325
00:12:11,120 --> 00:12:12,480
than that

326
00:12:12,480 --> 00:12:16,000
modern cloud infrastructures are

327
00:12:16,000 --> 00:12:19,279
having a lot of microservices resources

328
00:12:19,279 --> 00:12:20,079
depends

329
00:12:20,079 --> 00:12:22,560
in each other you will often see a

330
00:12:22,560 --> 00:12:24,320
computer resource that is

331
00:12:24,320 --> 00:12:27,600
attached to a network config networking

332
00:12:27,600 --> 00:12:28,800
configuration

333
00:12:28,800 --> 00:12:32,160
and that's attached to an rds a database

334
00:12:32,160 --> 00:12:34,480
and that's attached to a storage mount

335
00:12:34,480 --> 00:12:35,519
and that's attached to

336
00:12:35,519 --> 00:12:38,800
an im policy so all of those

337
00:12:38,800 --> 00:12:41,440
resources cannot work as a whole web

338
00:12:41,440 --> 00:12:43,200
application independently

339
00:12:43,200 --> 00:12:45,360
and give our customers a service we need

340
00:12:45,360 --> 00:12:48,000
everything to be orchestrated correctly

341
00:12:48,000 --> 00:12:50,160
and be configured correctly in order to

342
00:12:50,160 --> 00:12:52,959
have a working cloud environment

343
00:12:52,959 --> 00:12:55,760
so infrastructures code projects such as

344
00:12:55,760 --> 00:12:57,600
terraform or cloud formation

345
00:12:57,600 --> 00:13:00,720
have built a data model

346
00:13:00,720 --> 00:13:03,519
called directed acyclic graphs to model

347
00:13:03,519 --> 00:13:04,399
relationship

348
00:13:04,399 --> 00:13:08,720
between resources so operators of cloud

349
00:13:08,720 --> 00:13:10,240
environments can safely manage

350
00:13:10,240 --> 00:13:12,560
the change of infrastructure resources

351
00:13:12,560 --> 00:13:14,160
and their dependencies

352
00:13:14,160 --> 00:13:18,480
on bare metal is pass and sauce

353
00:13:18,480 --> 00:13:19,920
let's take a look on a sample

354
00:13:19,920 --> 00:13:22,000
architecture here's a simple

355
00:13:22,000 --> 00:13:24,639
web application that's crazy it has a

356
00:13:24,639 --> 00:13:26,160
lot of moving parts

357
00:13:26,160 --> 00:13:29,200
we can see here uh dns

358
00:13:29,200 --> 00:13:31,120
helping us to match ip address to a

359
00:13:31,120 --> 00:13:33,200
beautify name in the web browser

360
00:13:33,200 --> 00:13:35,680
a cdn for static content that is stored

361
00:13:35,680 --> 00:13:37,519
on object storage on s3

362
00:13:37,519 --> 00:13:41,199
this is in aws this example serving us

363
00:13:41,199 --> 00:13:44,320
javascript files css files etc an

364
00:13:44,320 --> 00:13:45,839
application load balancer

365
00:13:45,839 --> 00:13:47,760
a set of compute instances without

366
00:13:47,760 --> 00:13:48,959
scaling group

367
00:13:48,959 --> 00:13:52,800
a group a queue and

368
00:13:52,800 --> 00:13:55,920
a data pipeline that is managed on ec2

369
00:13:55,920 --> 00:13:57,760
instances with access

370
00:13:57,760 --> 00:14:01,279
to rds the rds backup which is the

371
00:14:01,279 --> 00:14:02,720
database backup

372
00:14:02,720 --> 00:14:05,360
and also those same compute instances

373
00:14:05,360 --> 00:14:07,199
responsible for data pipeline

374
00:14:07,199 --> 00:14:11,040
have a mounted storage of efs

375
00:14:11,040 --> 00:14:14,240
so that's a lot of moving parts and we

376
00:14:14,240 --> 00:14:15,680
have a lot of pulses that

377
00:14:15,680 --> 00:14:19,040
the market is telling us hey those are

378
00:14:19,040 --> 00:14:20,320
really the best practices that you

379
00:14:20,320 --> 00:14:22,880
should follow

380
00:14:23,360 --> 00:14:26,000
so um this specific diagram or similar

381
00:14:26,000 --> 00:14:28,480
to it was actually presented in hashicom

382
00:14:28,480 --> 00:14:30,399
on 2016 by

383
00:14:30,399 --> 00:14:32,480
paul hinza so a lot of this talk is

384
00:14:32,480 --> 00:14:33,760
inspired by

385
00:14:33,760 --> 00:14:37,600
by his topic on on graph theory

386
00:14:37,600 --> 00:14:39,760
if we want to apply a policy on this

387
00:14:39,760 --> 00:14:40,800
infrastructure

388
00:14:40,800 --> 00:14:43,760
we would probably ask questions like is

389
00:14:43,760 --> 00:14:44,000
the

390
00:14:44,000 --> 00:14:47,440
file system encrypted or is the security

391
00:14:47,440 --> 00:14:48,560
group

392
00:14:48,560 --> 00:14:51,680
that is attached to all of the different

393
00:14:51,680 --> 00:14:55,120
instances has port 000

394
00:14:55,120 --> 00:14:57,839
open to the world meaning is my

395
00:14:57,839 --> 00:14:59,760
instances public

396
00:14:59,760 --> 00:15:02,639
but the thing is i don't really like to

397
00:15:02,639 --> 00:15:03,120
ask

398
00:15:03,120 --> 00:15:06,880
a lot of individual questions on efs

399
00:15:06,880 --> 00:15:08,800
and security groups the thing is that i

400
00:15:08,800 --> 00:15:10,000
want to understand

401
00:15:10,000 --> 00:15:12,720
from threat model perspective is is

402
00:15:12,720 --> 00:15:13,839
there an actor

403
00:15:13,839 --> 00:15:17,040
that could access my ec2 instances and

404
00:15:17,040 --> 00:15:20,240
does those ec2 instances has unencrypted

405
00:15:20,240 --> 00:15:21,279
volume

406
00:15:21,279 --> 00:15:24,560
so that if data is leaked out is it

407
00:15:24,560 --> 00:15:27,839
leaked in an unencrypted manner

408
00:15:27,839 --> 00:15:29,759
so the actual query that i would like to

409
00:15:29,759 --> 00:15:31,199
do is

410
00:15:31,199 --> 00:15:34,000
a traversing query i would like to ask

411
00:15:34,000 --> 00:15:36,720
do i have a path from the internet

412
00:15:36,720 --> 00:15:39,440
into an instance through a security

413
00:15:39,440 --> 00:15:40,560
group

414
00:15:40,560 --> 00:15:43,600
and into an unencrypted bucket so i want

415
00:15:43,600 --> 00:15:45,120
a query that is aware of the

416
00:15:45,120 --> 00:15:46,399
dependencies

417
00:15:46,399 --> 00:15:49,440
of my cloud environment

418
00:15:49,440 --> 00:15:52,240
so we need a strategy to ask dependency

419
00:15:52,240 --> 00:15:55,040
of our policies

420
00:15:55,040 --> 00:15:57,759
and this is where the second part of the

421
00:15:57,759 --> 00:15:58,399
talk

422
00:15:58,399 --> 00:16:01,199
goes i know that graph theory has

423
00:16:01,199 --> 00:16:03,279
discrete mathematics combinatorics and

424
00:16:03,279 --> 00:16:03,680
some

425
00:16:03,680 --> 00:16:06,079
complex math stuff but we'll really

426
00:16:06,079 --> 00:16:08,399
simply down in two minutes let's give it

427
00:16:08,399 --> 00:16:09,600
a try

428
00:16:09,600 --> 00:16:12,880
this is a node a node represents a code

429
00:16:12,880 --> 00:16:13,839
block

430
00:16:13,839 --> 00:16:16,160
a terraform code block can be a

431
00:16:16,160 --> 00:16:18,079
provisioned set of instances in the

432
00:16:18,079 --> 00:16:19,360
cloud environment

433
00:16:19,360 --> 00:16:21,120
or it can be a configuration that is

434
00:16:21,120 --> 00:16:24,639
attached to those resources

435
00:16:25,759 --> 00:16:29,440
and this is an edge this is another edge

436
00:16:29,440 --> 00:16:31,440
the edges represent a relationship

437
00:16:31,440 --> 00:16:33,199
between different nodes

438
00:16:33,199 --> 00:16:36,560
in our case in the cloud

439
00:16:36,560 --> 00:16:39,680
a graph would be a set of nodes

440
00:16:39,680 --> 00:16:41,440
and edges that are attached to each

441
00:16:41,440 --> 00:16:43,680
other

442
00:16:44,320 --> 00:16:47,920
so a directed graph would just mean

443
00:16:47,920 --> 00:16:49,199
this is the direction of the

444
00:16:49,199 --> 00:16:51,519
relationship between those different

445
00:16:51,519 --> 00:16:52,480
nodes

446
00:16:52,480 --> 00:16:55,600
so a directed edge will give us a

447
00:16:55,600 --> 00:16:56,959
directed graph

448
00:16:56,959 --> 00:16:59,440
and a directed acyclic graph just means

449
00:16:59,440 --> 00:17:00,480
that i don't have

450
00:17:00,480 --> 00:17:05,039
circles between three nodes for example

451
00:17:05,039 --> 00:17:06,720
the next operation that we can do on top

452
00:17:06,720 --> 00:17:08,160
of a graph is actually

453
00:17:08,160 --> 00:17:11,439
a walk let's take a look on

454
00:17:11,439 --> 00:17:14,559
how our duck walk

455
00:17:14,559 --> 00:17:17,280
a duck is our scanner and it can walk

456
00:17:17,280 --> 00:17:18,880
through different edges

457
00:17:18,880 --> 00:17:21,359
by the direction of the different uh

458
00:17:21,359 --> 00:17:23,039
sorry walk through the different nodes

459
00:17:23,039 --> 00:17:25,359
by the direction of the different edges

460
00:17:25,359 --> 00:17:27,679
it can actually perform actions like

461
00:17:27,679 --> 00:17:30,000
look for a connection between

462
00:17:30,000 --> 00:17:32,720
different nodes or scan their attributes

463
00:17:32,720 --> 00:17:34,640
so it will traverse over the different

464
00:17:34,640 --> 00:17:38,080
nodes by a specific direction

465
00:17:38,080 --> 00:17:41,360
it sounds uh reasonable

466
00:17:41,360 --> 00:17:43,039
and we can actually apply it on an

467
00:17:43,039 --> 00:17:45,919
architecture like the following one

468
00:17:45,919 --> 00:17:46,799
where

469
00:17:46,799 --> 00:17:49,600
each and every resource defined in this

470
00:17:49,600 --> 00:17:50,640
diagram

471
00:17:50,640 --> 00:17:53,200
is actually a node and of those

472
00:17:53,200 --> 00:17:54,320
dependencies

473
00:17:54,320 --> 00:17:57,039
are actually the directed edges between

474
00:17:57,039 --> 00:17:59,440
the different nodes

475
00:17:59,440 --> 00:18:01,440
and this is how it will look in code

476
00:18:01,440 --> 00:18:03,520
over here i have another example

477
00:18:03,520 --> 00:18:07,200
i have an emr cluster a spark cluster

478
00:18:07,200 --> 00:18:10,880
for the production data engineering team

479
00:18:10,880 --> 00:18:12,960
this cluster is attached to a security

480
00:18:12,960 --> 00:18:15,520
group from development environment

481
00:18:15,520 --> 00:18:17,520
and this security group which is a

482
00:18:17,520 --> 00:18:19,679
firewall configuration

483
00:18:19,679 --> 00:18:22,880
is attached to a variable

484
00:18:22,880 --> 00:18:25,120
that defines what are the allowed ip

485
00:18:25,120 --> 00:18:27,280
addresses or cidr blocks

486
00:18:27,280 --> 00:18:30,799
to have access to that emr cluster

487
00:18:30,799 --> 00:18:33,360
networking access and i actually have an

488
00:18:33,360 --> 00:18:34,400
er slightly

489
00:18:34,400 --> 00:18:37,200
larger code that defines two emr

490
00:18:37,200 --> 00:18:38,960
clusters we have our production data

491
00:18:38,960 --> 00:18:40,559
engineering

492
00:18:40,559 --> 00:18:42,480
one and we have another one called data

493
00:18:42,480 --> 00:18:44,080
science each one of them

494
00:18:44,080 --> 00:18:45,440
is attached to a different security

495
00:18:45,440 --> 00:18:47,440
group and one of them is attached to a

496
00:18:47,440 --> 00:18:48,400
variable

497
00:18:48,400 --> 00:18:50,640
so this is my terraform graph these are

498
00:18:50,640 --> 00:18:52,480
the different dependencies that i

499
00:18:52,480 --> 00:18:54,840
have defined in code on top of my cloud

500
00:18:54,840 --> 00:18:57,280
resources

501
00:18:57,280 --> 00:18:58,799
and the question that i would like to

502
00:18:58,799 --> 00:19:00,400
ask or the policy that i would like to

503
00:19:00,400 --> 00:19:00,960
have

504
00:19:00,960 --> 00:19:03,440
is to ensure that amazon emr clusters

505
00:19:03,440 --> 00:19:05,280
security groups are not open to the

506
00:19:05,280 --> 00:19:05,760
world

507
00:19:05,760 --> 00:19:08,799
to the public internet or

508
00:19:08,799 --> 00:19:11,520
to simplify stuff make sure i don't have

509
00:19:11,520 --> 00:19:14,320
public sensitive stuff out there

510
00:19:14,320 --> 00:19:16,799
so i'll create a graph query a graph

511
00:19:16,799 --> 00:19:18,480
query or a graph policy is something

512
00:19:18,480 --> 00:19:18,960
that we've

513
00:19:18,960 --> 00:19:21,840
introduced in chekhov it's open source 2

514
00:19:21,840 --> 00:19:23,760
under version 2.

515
00:19:23,760 --> 00:19:26,480
and we can ask complex queries on top of

516
00:19:26,480 --> 00:19:28,480
relationship between cloud and

517
00:19:28,480 --> 00:19:32,799
cloud resources making it more

518
00:19:33,039 --> 00:19:36,320
matching to our threat modeling question

519
00:19:36,320 --> 00:19:38,640
that are asking not only if a resource

520
00:19:38,640 --> 00:19:39,679
is compliant

521
00:19:39,679 --> 00:19:43,200
but is there a real risk so

522
00:19:43,200 --> 00:19:45,600
um over here i've defined this policy of

523
00:19:45,600 --> 00:19:46,640
emr

524
00:19:46,640 --> 00:19:48,400
uh they are not public to the world i've

525
00:19:48,400 --> 00:19:50,160
defined a category which is networking

526
00:19:50,160 --> 00:19:52,000
and given it an id

527
00:19:52,000 --> 00:19:54,960
on the policy metadata the next part

528
00:19:54,960 --> 00:19:55,520
would be

529
00:19:55,520 --> 00:19:57,919
to define a connection block so a

530
00:19:57,919 --> 00:19:59,600
connection block would be

531
00:19:59,600 --> 00:20:01,919
look for a connection that exists

532
00:20:01,919 --> 00:20:04,159
between two different resource types

533
00:20:04,159 --> 00:20:07,200
emr cluster and security group

534
00:20:07,200 --> 00:20:10,240
if you found one move on to the next

535
00:20:10,240 --> 00:20:10,880
step

536
00:20:10,880 --> 00:20:13,280
which is inspecting an attribute an

537
00:20:13,280 --> 00:20:14,880
attribute block would inspect an

538
00:20:14,880 --> 00:20:16,640
attribute of one of the resources within

539
00:20:16,640 --> 00:20:18,799
the connection

540
00:20:18,799 --> 00:20:22,000
and we'll check if the security group

541
00:20:22,000 --> 00:20:25,360
has on each cidr block any value that

542
00:20:25,360 --> 00:20:26,080
equals

543
00:20:26,080 --> 00:20:29,200
the entire internet zero zero zero

544
00:20:29,200 --> 00:20:30,880
and filter is actually something that

545
00:20:30,880 --> 00:20:33,360
will make things faster for us

546
00:20:33,360 --> 00:20:36,080
it will tell our traversing logic to

547
00:20:36,080 --> 00:20:36,640
focus

548
00:20:36,640 --> 00:20:39,600
on or to start traversing from emr

549
00:20:39,600 --> 00:20:40,559
clusters

550
00:20:40,559 --> 00:20:43,919
so we if we have a huge graph out there

551
00:20:43,919 --> 00:20:46,240
of hundreds or thousands or tens of

552
00:20:46,240 --> 00:20:48,240
thousands of resources in the cloud

553
00:20:48,240 --> 00:20:50,880
we can focus the query to start on the

554
00:20:50,880 --> 00:20:52,000
most matching place

555
00:20:52,000 --> 00:20:55,760
and traverse from there and the last

556
00:20:55,760 --> 00:20:58,080
is i want to have an end condition

557
00:20:58,080 --> 00:21:00,000
between of those

558
00:21:00,000 --> 00:21:03,200
different blocks of query

559
00:21:03,200 --> 00:21:06,400
so how it would look like we'll

560
00:21:06,400 --> 00:21:09,039
go from the emr cluster into the

561
00:21:09,039 --> 00:21:10,640
relevant security group

562
00:21:10,640 --> 00:21:12,559
and from there to the relevant cidr

563
00:21:12,559 --> 00:21:14,880
block and then

564
00:21:14,880 --> 00:21:17,280
verify if we have zero zero defined if

565
00:21:17,280 --> 00:21:18,159
we have

566
00:21:18,159 --> 00:21:19,760
we're failing the policy we have a

567
00:21:19,760 --> 00:21:22,080
public emr cluster

568
00:21:22,080 --> 00:21:26,400
so on on the graph i'll run adept

569
00:21:26,400 --> 00:21:29,760
depth first search it's a dfs algorithm

570
00:21:29,760 --> 00:21:33,760
that is used to traverse graphs or trees

571
00:21:33,760 --> 00:21:36,880
the algorithms start at the root node um

572
00:21:36,880 --> 00:21:39,520
it can select their arbitrary one or it

573
00:21:39,520 --> 00:21:41,520
can be defined by a filter

574
00:21:41,520 --> 00:21:45,919
and it explores the possible path

575
00:21:45,919 --> 00:21:48,320
on top of each and every branch to

576
00:21:48,320 --> 00:21:50,880
answer our query

577
00:21:50,880 --> 00:21:53,360
so we'll go to this branch the provider

578
00:21:53,360 --> 00:21:54,880
of aws

579
00:21:54,880 --> 00:21:56,799
from there we'll go to the emr cluster

580
00:21:56,799 --> 00:21:58,799
of data engineering

581
00:21:58,799 --> 00:22:01,120
we'll go through the security group that

582
00:22:01,120 --> 00:22:02,240
is attached to it

583
00:22:02,240 --> 00:22:04,640
and we've identified that we have a bad

584
00:22:04,640 --> 00:22:06,799
cidr block a public

585
00:22:06,799 --> 00:22:09,600
networking interface a public networking

586
00:22:09,600 --> 00:22:10,720
security group

587
00:22:10,720 --> 00:22:13,919
defined for the ingress rule and now

588
00:22:13,919 --> 00:22:15,600
we'll scan if there are any other

589
00:22:15,600 --> 00:22:18,640
instances of public emr blocks

590
00:22:18,640 --> 00:22:21,919
we'll go to the second cluster

591
00:22:21,919 --> 00:22:23,600
and we've identified that the second

592
00:22:23,600 --> 00:22:25,600
security group is actually in a good

593
00:22:25,600 --> 00:22:27,120
state

594
00:22:27,120 --> 00:22:30,320
let's take a look on the demo

595
00:22:31,360 --> 00:22:33,440
i have another tier terraform code two

596
00:22:33,440 --> 00:22:35,280
emr clusters defined

597
00:22:35,280 --> 00:22:37,200
one for data engineering another one for

598
00:22:37,200 --> 00:22:38,960
data science with two different security

599
00:22:38,960 --> 00:22:40,159
groups one for dev

600
00:22:40,159 --> 00:22:41,840
which is open to the internet and one

601
00:22:41,840 --> 00:22:44,880
for product which is actually segregated

602
00:22:44,880 --> 00:22:46,720
i run checkoff with the specific check

603
00:22:46,720 --> 00:22:49,200
id that i've just defined

604
00:22:49,200 --> 00:22:54,400
which is ckv aws 7.

605
00:22:54,400 --> 00:22:55,840
scanning the local directory of

606
00:22:55,840 --> 00:22:58,640
terraform and i can see that i have

607
00:22:58,640 --> 00:23:00,960
two different clusters one is fine and

608
00:23:00,960 --> 00:23:02,880
one the other is not

609
00:23:02,880 --> 00:23:06,159
so what just happened chekov have

610
00:23:06,159 --> 00:23:09,919
read the as code that i have defined

611
00:23:09,919 --> 00:23:13,200
in my local directory or git directory

612
00:23:13,200 --> 00:23:15,679
it has created a directed accli graph

613
00:23:15,679 --> 00:23:17,919
that represents the same graph that

614
00:23:17,919 --> 00:23:19,120
would have happened

615
00:23:19,120 --> 00:23:20,840
after deployment in production

616
00:23:20,840 --> 00:23:22,320
environment

617
00:23:22,320 --> 00:23:24,400
and on top of that graph on top of that

618
00:23:24,400 --> 00:23:25,360
data model

619
00:23:25,360 --> 00:23:28,720
it have executed two types of policies

620
00:23:28,720 --> 00:23:31,360
attribute-based policies like do i have

621
00:23:31,360 --> 00:23:33,120
versioning enabled for s3

622
00:23:33,120 --> 00:23:35,520
and graph related policies asking about

623
00:23:35,520 --> 00:23:36,799
the relationship of two

624
00:23:36,799 --> 00:23:39,600
or more resources and their attributes

625
00:23:39,600 --> 00:23:41,840
enabling us to ask

626
00:23:41,840 --> 00:23:43,919
more difficult questions like do i have

627
00:23:43,919 --> 00:23:45,200
any public

628
00:23:45,200 --> 00:23:47,679
eye public instances with unencrypted

629
00:23:47,679 --> 00:23:48,320
volumes

630
00:23:48,320 --> 00:23:53,919
or public mr clusters

631
00:23:53,919 --> 00:23:57,520
so i can take jacob as as if i did in

632
00:23:57,520 --> 00:24:00,799
locally and i can actually put it as

633
00:24:00,799 --> 00:24:04,080
a ci step it can run as a github auction

634
00:24:04,080 --> 00:24:07,760
or container or a gitlab runner

635
00:24:07,760 --> 00:24:10,880
any any way to run a utility a container

636
00:24:10,880 --> 00:24:12,000
utility

637
00:24:12,000 --> 00:24:15,120
within a ci so on every pull request to

638
00:24:15,120 --> 00:24:15,840
github

639
00:24:15,840 --> 00:24:17,279
chekhov can actually run a set of

640
00:24:17,279 --> 00:24:19,360
security tests

641
00:24:19,360 --> 00:24:21,760
of policies as code inspect our

642
00:24:21,760 --> 00:24:23,520
infrastructure as code and if everything

643
00:24:23,520 --> 00:24:24,480
looks fine

644
00:24:24,480 --> 00:24:27,440
we can trigger a deployment to our

645
00:24:27,440 --> 00:24:28,400
destination

646
00:24:28,400 --> 00:24:30,840
account or project between the cloud

647
00:24:30,840 --> 00:24:33,279
environments

648
00:24:33,279 --> 00:24:35,039
and if we integrate that as a github

649
00:24:35,039 --> 00:24:36,880
action we now actually have a failed

650
00:24:36,880 --> 00:24:37,600
state

651
00:24:37,600 --> 00:24:41,279
of successful or failed

652
00:24:41,279 --> 00:24:45,600
execution so what other stuff does the

653
00:24:45,600 --> 00:24:47,520
graph obstruction enables

654
00:24:47,520 --> 00:24:50,080
the fact is is that the community is

655
00:24:50,080 --> 00:24:50,640
actually

656
00:24:50,640 --> 00:24:53,440
asking those kind of graph queries all

657
00:24:53,440 --> 00:24:55,039
the time

658
00:24:55,039 --> 00:24:57,039
each other information security teams

659
00:24:57,039 --> 00:25:00,000
networking teams devops teams are asking

660
00:25:00,000 --> 00:25:03,200
those stuff to help prioritize what's

661
00:25:03,200 --> 00:25:04,480
the actual risk

662
00:25:04,480 --> 00:25:08,320
i have in my cloud infrastructure code

663
00:25:08,320 --> 00:25:10,799
versus what's just a compliance best

664
00:25:10,799 --> 00:25:11,840
practice

665
00:25:11,840 --> 00:25:14,000
so example questions would be ensuring

666
00:25:14,000 --> 00:25:14,880
that we have

667
00:25:14,880 --> 00:25:17,360
volumes attached to ec2s and they are

668
00:25:17,360 --> 00:25:18,559
encrypted

669
00:25:18,559 --> 00:25:21,279
having s3 buckets attached to public

670
00:25:21,279 --> 00:25:22,880
block access

671
00:25:22,880 --> 00:25:25,600
rds clusters that have backup plan

672
00:25:25,600 --> 00:25:27,039
defined

673
00:25:27,039 --> 00:25:30,320
and even kms is making sure that they do

674
00:25:30,320 --> 00:25:31,039
not have

675
00:25:31,039 --> 00:25:33,760
the ability to be read by anonymous user

676
00:25:33,760 --> 00:25:36,240
or are not publicly accessible

677
00:25:36,240 --> 00:25:38,720
so those are different use cases that

678
00:25:38,720 --> 00:25:40,320
you can actually define

679
00:25:40,320 --> 00:25:42,400
in a graph policy because they are they

680
00:25:42,400 --> 00:25:44,400
cannot be defined on a single block

681
00:25:44,400 --> 00:25:47,039
and they should be inspected by

682
00:25:47,039 --> 00:25:48,640
correlation of different code blocks

683
00:25:48,640 --> 00:25:49,919
that in some cases

684
00:25:49,919 --> 00:25:52,080
are scattered across multiple files or

685
00:25:52,080 --> 00:25:53,200
repositories

686
00:25:53,200 --> 00:25:55,200
but in terraform they are dependent in

687
00:25:55,200 --> 00:25:57,840
one another

688
00:25:58,559 --> 00:26:00,559
so the graph is actually giving us a

689
00:26:00,559 --> 00:26:01,760
solid data model

690
00:26:01,760 --> 00:26:04,080
and room to evolve the community is

691
00:26:04,080 --> 00:26:04,960
asking for

692
00:26:04,960 --> 00:26:07,600
graph queries for years each other so

693
00:26:07,600 --> 00:26:08,960
it's actually an opportunity for the

694
00:26:08,960 --> 00:26:10,720
community to contribute more and more

695
00:26:10,720 --> 00:26:12,960
policies into chekhov as a shared hub

696
00:26:12,960 --> 00:26:16,559
of best practices the graph query is a

697
00:26:16,559 --> 00:26:18,640
composable query language so you can add

698
00:26:18,640 --> 00:26:20,480
more and more condition to it

699
00:26:20,480 --> 00:26:23,039
and make it more robust or inspect the

700
00:26:23,039 --> 00:26:24,000
right things that you're

701
00:26:24,000 --> 00:26:27,039
you care about it's a composable data

702
00:26:27,039 --> 00:26:29,360
model so you can actually ask queries

703
00:26:29,360 --> 00:26:32,799
in the future like do i have public

704
00:26:32,799 --> 00:26:36,480
unencrypted um container orchestrator

705
00:26:36,480 --> 00:26:38,720
like eks or kubernetes

706
00:26:38,720 --> 00:26:41,600
and does it have a variable images so

707
00:26:41,600 --> 00:26:42,559
it's also

708
00:26:42,559 --> 00:26:46,640
publicly accessible and exploitable

709
00:26:46,640 --> 00:26:48,080
it can be integrated to part of the

710
00:26:48,080 --> 00:26:50,000
software development lifecycle like ci

711
00:26:50,000 --> 00:26:52,320
systems so it's really an opportunity

712
00:26:52,320 --> 00:26:54,480
to correlate all of the important stuff

713
00:26:54,480 --> 00:26:56,320
in information security

714
00:26:56,320 --> 00:27:00,000
um with the ci pipeline

715
00:27:00,000 --> 00:27:03,120
and another example to the opportunity

716
00:27:03,120 --> 00:27:04,240
that the graph may give us

717
00:27:04,240 --> 00:27:05,919
is we can actually ask questions that

718
00:27:05,919 --> 00:27:08,080
correlates the code state

719
00:27:08,080 --> 00:27:10,880
meaning is our code defined a secure

720
00:27:10,880 --> 00:27:12,080
infrastructure

721
00:27:12,080 --> 00:27:14,880
and is it attached to a running state of

722
00:27:14,880 --> 00:27:16,400
cloud environment

723
00:27:16,400 --> 00:27:20,240
that is also secured by the same manners

724
00:27:20,240 --> 00:27:23,279
so graph is only the beginning and we

725
00:27:23,279 --> 00:27:24,720
are only in the beginning of the

726
00:27:24,720 --> 00:27:26,880
implementation of it within chekhov but

727
00:27:26,880 --> 00:27:28,720
it really excites me because it really

728
00:27:28,720 --> 00:27:29,200
has

729
00:27:29,200 --> 00:27:31,120
a lot of places to grow and a lot of

730
00:27:31,120 --> 00:27:33,120
application we can build on top

731
00:27:33,120 --> 00:27:36,399
so i would be very excited to see you

732
00:27:36,399 --> 00:27:36,720
all

733
00:27:36,720 --> 00:27:38,559
contributing code to this open source

734
00:27:38,559 --> 00:27:40,240
project and

735
00:27:40,240 --> 00:27:42,480
you're more than invited to give it a

736
00:27:42,480 --> 00:27:44,159
try or ask questions

737
00:27:44,159 --> 00:27:46,240
on chekhov's slack channel or even ping

738
00:27:46,240 --> 00:27:48,480
me over email

739
00:27:48,480 --> 00:27:50,799
thank you again devsecond i'll be here

740
00:27:50,799 --> 00:27:52,159
in the chat if you have

741
00:27:52,159 --> 00:27:55,360
any questions or you can reach out right

742
00:27:55,360 --> 00:27:55,919
after

743
00:27:55,919 --> 00:28:03,679
it was a pleasure

