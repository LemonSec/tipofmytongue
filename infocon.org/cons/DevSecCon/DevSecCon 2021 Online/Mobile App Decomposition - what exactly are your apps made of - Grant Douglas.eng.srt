1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,160 --> 00:00:12,960
hey everyone

3
00:00:12,960 --> 00:00:14,960
thanks for coming it's grant here today

4
00:00:14,960 --> 00:00:16,000
we're going to be talking about mobile

5
00:00:16,000 --> 00:00:17,440
app decomposition

6
00:00:17,440 --> 00:00:19,039
um it's a pleasure to be speaking at

7
00:00:19,039 --> 00:00:21,119
devsecond i was part of the panel last

8
00:00:21,119 --> 00:00:22,400
year so it's good to be back speaking

9
00:00:22,400 --> 00:00:23,279
this year

10
00:00:23,279 --> 00:00:25,439
and yeah with that let's uh let's get

11
00:00:25,439 --> 00:00:27,760
started

12
00:00:28,720 --> 00:00:30,880
so yeah today the focus is really going

13
00:00:30,880 --> 00:00:32,000
to be talking about mobile app

14
00:00:32,000 --> 00:00:33,840
dependencies and supply chain

15
00:00:33,840 --> 00:00:35,200
we're going to talk about what apps are

16
00:00:35,200 --> 00:00:37,040
made of and how we can figure out what's

17
00:00:37,040 --> 00:00:38,239
inside there

18
00:00:38,239 --> 00:00:39,920
um we often know our own dependencies

19
00:00:39,920 --> 00:00:41,520
but we don't necessarily know the

20
00:00:41,520 --> 00:00:42,640
complete picture

21
00:00:42,640 --> 00:00:45,360
as we'll soon find out um and you know

22
00:00:45,360 --> 00:00:46,879
when we have a large set of components

23
00:00:46,879 --> 00:00:48,079
that make up our apps there's a lot of

24
00:00:48,079 --> 00:00:49,280
risk that can be incurred to the

25
00:00:49,280 --> 00:00:51,280
business not just vulnerabilities but

26
00:00:51,280 --> 00:00:53,360
um other risks like software licensing

27
00:00:53,360 --> 00:00:55,760
and you know compliance and other things

28
00:00:55,760 --> 00:00:56,719
so we're going to go into a lot of

29
00:00:56,719 --> 00:00:58,960
detail it's 30 minute session so there's

30
00:00:58,960 --> 00:00:59,920
a lot to cover

31
00:00:59,920 --> 00:01:01,920
um but hopefully by the end of this you

32
00:01:01,920 --> 00:01:03,280
should know a lot more about mobile app

33
00:01:03,280 --> 00:01:06,000
decomposition

34
00:01:07,200 --> 00:01:09,200
so i'm a security researcher right now

35
00:01:09,200 --> 00:01:11,600
secure i do predominantly ios things but

36
00:01:11,600 --> 00:01:12,720
a little bit of android

37
00:01:12,720 --> 00:01:15,280
i've been in security for almost 10

38
00:01:15,280 --> 00:01:16,159
years

39
00:01:16,159 --> 00:01:18,320
um the majority of that was in security

40
00:01:18,320 --> 00:01:20,479
consulting but the last year has been in

41
00:01:20,479 --> 00:01:21,520
the product so

42
00:01:21,520 --> 00:01:23,520
mainly focusing on tooling that goes

43
00:01:23,520 --> 00:01:25,040
into ci cd so everything is kind of

44
00:01:25,040 --> 00:01:27,040
bread and butter to devsecops

45
00:01:27,040 --> 00:01:28,880
um i like everything to do with mobile

46
00:01:28,880 --> 00:01:30,479
pen testing code review

47
00:01:30,479 --> 00:01:33,200
mdm that kind of stuff but recently um

48
00:01:33,200 --> 00:01:33,920
static

49
00:01:33,920 --> 00:01:35,360
and dynamic analysis is what really

50
00:01:35,360 --> 00:01:37,439
excites me and if you want to follow

51
00:01:37,439 --> 00:01:39,360
online or if you want to ask questions

52
00:01:39,360 --> 00:01:42,000
um you can find me on twitter i just had

53
00:01:42,000 --> 00:01:43,200
baby twins though so

54
00:01:43,200 --> 00:01:47,040
i might be a little slow to respond

55
00:01:47,040 --> 00:01:50,320
um so yeah the real core question that

56
00:01:50,320 --> 00:01:51,840
we want to answer today is

57
00:01:51,840 --> 00:01:54,399
how do you begin to understand if you're

58
00:01:54,399 --> 00:01:55,280
vulnerable to

59
00:01:55,280 --> 00:01:57,119
a given thing so if you remember late

60
00:01:57,119 --> 00:01:59,439
last year sneak found

61
00:01:59,439 --> 00:02:02,560
a sauerman sdk vulnerability um that

62
00:02:02,560 --> 00:02:03,840
we'll talk about in just a little bit

63
00:02:03,840 --> 00:02:05,200
and there's been other big popular

64
00:02:05,200 --> 00:02:06,240
vulnerabilities

65
00:02:06,240 --> 00:02:09,520
within libraries like heartbleed ccs and

66
00:02:09,520 --> 00:02:10,160
then other

67
00:02:10,160 --> 00:02:11,760
high-profile things like spectre and

68
00:02:11,760 --> 00:02:13,440
stage fright not all of these applied to

69
00:02:13,440 --> 00:02:14,319
mobile but

70
00:02:14,319 --> 00:02:16,720
you know the point still stands when

71
00:02:16,720 --> 00:02:18,080
something significant happens and

72
00:02:18,080 --> 00:02:20,239
there's a cause for concern

73
00:02:20,239 --> 00:02:22,160
if you have a large portfolio of apps or

74
00:02:22,160 --> 00:02:23,360
your employees are using a bunch of

75
00:02:23,360 --> 00:02:24,319
third-party apps

76
00:02:24,319 --> 00:02:26,080
how do you know if that affects you and

77
00:02:26,080 --> 00:02:27,840
how do you reliably know if that affects

78
00:02:27,840 --> 00:02:28,319
you

79
00:02:28,319 --> 00:02:29,760
and even if you don't think you use that

80
00:02:29,760 --> 00:02:31,280
component you might actually find that

81
00:02:31,280 --> 00:02:32,319
it's inside your app

82
00:02:32,319 --> 00:02:35,599
and even if you didn't know that

83
00:02:35,760 --> 00:02:37,680
so the first thing we want to understand

84
00:02:37,680 --> 00:02:39,840
is what is a mobile app what's inside

85
00:02:39,840 --> 00:02:40,400
the app

86
00:02:40,400 --> 00:02:41,920
um and if we think of it like a

87
00:02:41,920 --> 00:02:44,080
nutritional label we can see here on the

88
00:02:44,080 --> 00:02:46,959
on the left it's it's an android apk uh

89
00:02:46,959 --> 00:02:48,800
we can see that we have 37 total

90
00:02:48,800 --> 00:02:50,560
components and maybe we understand that

91
00:02:50,560 --> 00:02:52,000
there's a breakdown so

92
00:02:52,000 --> 00:02:54,080
32 of these things might be open source

93
00:02:54,080 --> 00:02:55,680
three of them are commercial

94
00:02:55,680 --> 00:02:57,440
um we might have a couple of proprietary

95
00:02:57,440 --> 00:02:58,879
libraries maybe the marketing team

96
00:02:58,879 --> 00:03:00,640
writes an sdk for us and the security

97
00:03:00,640 --> 00:03:02,080
team writes an sdk

98
00:03:02,080 --> 00:03:04,480
um but there's probably more to it than

99
00:03:04,480 --> 00:03:05,440
that um

100
00:03:05,440 --> 00:03:06,959
that i think you know this is just the

101
00:03:06,959 --> 00:03:08,720
tip of the iceberg um

102
00:03:08,720 --> 00:03:10,720
and we might know how many of those

103
00:03:10,720 --> 00:03:12,319
things have available updates if the

104
00:03:12,319 --> 00:03:13,440
vendor lets us know

105
00:03:13,440 --> 00:03:15,840
um or if the you know if we're watching

106
00:03:15,840 --> 00:03:16,800
the upstream

107
00:03:16,800 --> 00:03:20,080
open source repositories and we can also

108
00:03:20,080 --> 00:03:21,440
sometimes have a good understanding of

109
00:03:21,440 --> 00:03:22,400
whether any of those things are

110
00:03:22,400 --> 00:03:23,440
vulnerable

111
00:03:23,440 --> 00:03:26,239
um but again you know there may be

112
00:03:26,239 --> 00:03:27,519
things inside your software that you're

113
00:03:27,519 --> 00:03:28,080
not

114
00:03:28,080 --> 00:03:30,640
actually aware of and it's those cases

115
00:03:30,640 --> 00:03:31,360
that can really

116
00:03:31,360 --> 00:03:34,400
cause some headache and cause for

117
00:03:34,400 --> 00:03:36,560
concern for the business

118
00:03:36,560 --> 00:03:40,640
so not just those 37 components uh

119
00:03:40,640 --> 00:03:42,480
are the thing that we want to focus on

120
00:03:42,480 --> 00:03:44,400
but most importantly what specific

121
00:03:44,400 --> 00:03:46,239
versions of those components are inside

122
00:03:46,239 --> 00:03:47,120
the apps

123
00:03:47,120 --> 00:03:49,599
and those dependencies do they have any

124
00:03:49,599 --> 00:03:51,120
transitive dependencies you know those

125
00:03:51,120 --> 00:03:53,040
libraries um that we're using they often

126
00:03:53,040 --> 00:03:54,400
have their own dependencies which might

127
00:03:54,400 --> 00:03:55,360
have dependencies

128
00:03:55,360 --> 00:03:57,680
of of themselves and this becomes really

129
00:03:57,680 --> 00:03:59,599
complicated as we'll soon find out

130
00:03:59,599 --> 00:04:01,360
and essentially what we need to do is we

131
00:04:01,360 --> 00:04:02,640
need to develop and maintain an

132
00:04:02,640 --> 00:04:03,439
inventory

133
00:04:03,439 --> 00:04:04,720
and we'll call that software bill of

134
00:04:04,720 --> 00:04:07,120
materials which basically details all of

135
00:04:07,120 --> 00:04:08,720
the components that we're aware of and

136
00:04:08,720 --> 00:04:10,720
various bits of metadata around them

137
00:04:10,720 --> 00:04:12,400
and then using that and tracking that

138
00:04:12,400 --> 00:04:14,000
over time we can actually

139
00:04:14,000 --> 00:04:16,639
gain an understanding of what the lay of

140
00:04:16,639 --> 00:04:18,639
the land looks like across our portfolio

141
00:04:18,639 --> 00:04:20,238
and we can be quick to answer those

142
00:04:20,238 --> 00:04:22,000
questions of whether this

143
00:04:22,000 --> 00:04:24,160
particular license is a concern for me

144
00:04:24,160 --> 00:04:25,440
across my portfolio

145
00:04:25,440 --> 00:04:27,360
or whether this new vulnerability found

146
00:04:27,360 --> 00:04:29,759
by sneak or someone else affects me

147
00:04:29,759 --> 00:04:31,680
and that's really the end goal is so

148
00:04:31,680 --> 00:04:33,280
that we can actually understand

149
00:04:33,280 --> 00:04:36,080
transparently what the the software is

150
00:04:36,080 --> 00:04:38,639
made up of

151
00:04:39,520 --> 00:04:42,000
so as an example of just how complicated

152
00:04:42,000 --> 00:04:43,680
this can get this is a tweet from david

153
00:04:43,680 --> 00:04:45,440
weinstein who's uh my manager at now

154
00:04:45,440 --> 00:04:46,080
secure

155
00:04:46,080 --> 00:04:48,000
we took a look at the iowa reporter app

156
00:04:48,000 --> 00:04:50,080
which is part of like a bit of a pr

157
00:04:50,080 --> 00:04:51,040
nightmare

158
00:04:51,040 --> 00:04:54,240
um they have over 65 000 dependencies

159
00:04:54,240 --> 00:04:56,320
inside their app that's react native

160
00:04:56,320 --> 00:04:57,919
and including all the transitive

161
00:04:57,919 --> 00:05:00,080
dependencies uh the total number of

162
00:05:00,080 --> 00:05:02,320
components exceeded 950 000

163
00:05:02,320 --> 00:05:04,960
so you can begin to understand how

164
00:05:04,960 --> 00:05:06,479
complicated it would be

165
00:05:06,479 --> 00:05:09,280
to answer the question of is anything in

166
00:05:09,280 --> 00:05:10,160
there stale

167
00:05:10,160 --> 00:05:12,960
insecure or maybe a licensing concern

168
00:05:12,960 --> 00:05:13,680
for me

169
00:05:13,680 --> 00:05:15,360
when you have that sheer volume of

170
00:05:15,360 --> 00:05:17,520
components um you might think you only

171
00:05:17,520 --> 00:05:19,039
have a handful of dependencies but

172
00:05:19,039 --> 00:05:20,479
actually underneath the scenes you could

173
00:05:20,479 --> 00:05:24,960
have hundreds if not thousands

174
00:05:24,960 --> 00:05:27,680
so if we want to build this bill of

175
00:05:27,680 --> 00:05:29,280
materials we need to start

176
00:05:29,280 --> 00:05:32,160
um somewhere and the ntia had a working

177
00:05:32,160 --> 00:05:32,560
group

178
00:05:32,560 --> 00:05:34,479
um who published a paper on software

179
00:05:34,479 --> 00:05:35,680
transparency

180
00:05:35,680 --> 00:05:37,360
and i definitely recommend you go check

181
00:05:37,360 --> 00:05:39,759
it out and here's a graph

182
00:05:39,759 --> 00:05:42,240
that they've shown inside that document

183
00:05:42,240 --> 00:05:43,680
on the right hand side we have our acme

184
00:05:43,680 --> 00:05:44,320
application

185
00:05:44,320 --> 00:05:46,560
which includes the bingo buffer package

186
00:05:46,560 --> 00:05:48,880
and bob's browser package just obviously

187
00:05:48,880 --> 00:05:51,199
hypothetical scenario and the bob's

188
00:05:51,199 --> 00:05:52,400
browser package itself

189
00:05:52,400 --> 00:05:54,639
includes this compression engine so we

190
00:05:54,639 --> 00:05:55,840
can see in the graph there's like a

191
00:05:55,840 --> 00:05:57,039
hierarchy to the

192
00:05:57,039 --> 00:05:59,840
dependency tree um and in a tabular

193
00:05:59,840 --> 00:06:01,199
format in the component

194
00:06:01,199 --> 00:06:03,039
name column we can also see the same

195
00:06:03,039 --> 00:06:04,319
sort of hierarchy

196
00:06:04,319 --> 00:06:06,240
uh to the component list but there's

197
00:06:06,240 --> 00:06:08,000
also some other interesting information

198
00:06:08,000 --> 00:06:08,880
here as well like

199
00:06:08,880 --> 00:06:11,199
the authorship information and most

200
00:06:11,199 --> 00:06:12,000
importantly

201
00:06:12,000 --> 00:06:14,880
the cryptographic hash and that's

202
00:06:14,880 --> 00:06:16,240
extremely important because

203
00:06:16,240 --> 00:06:18,800
when we look at uh you know a snapshot

204
00:06:18,800 --> 00:06:20,319
and time of the piece of software

205
00:06:20,319 --> 00:06:22,560
and we identify certain components then

206
00:06:22,560 --> 00:06:24,000
we need to say with cryptographic

207
00:06:24,000 --> 00:06:24,800
integrity

208
00:06:24,800 --> 00:06:27,600
that this exact version of a thing was

209
00:06:27,600 --> 00:06:29,120
what we observed right

210
00:06:29,120 --> 00:06:31,840
so sometimes you'll find that multiple

211
00:06:31,840 --> 00:06:33,039
builds are issued with the same

212
00:06:33,039 --> 00:06:35,680
semantic versions um so even if you know

213
00:06:35,680 --> 00:06:37,759
it's version 1.0.5

214
00:06:37,759 --> 00:06:39,280
that doesn't necessarily give you

215
00:06:39,280 --> 00:06:41,680
extreme confidence of the exact snapshot

216
00:06:41,680 --> 00:06:43,039
of the thing you observed

217
00:06:43,039 --> 00:06:45,039
so if we have a cryptographic hash then

218
00:06:45,039 --> 00:06:46,880
we can use that to verify that

219
00:06:46,880 --> 00:06:48,400
you know is exactly the thing that we

220
00:06:48,400 --> 00:06:51,039
saw before

221
00:06:52,880 --> 00:06:55,039
so how would you actually build a bill

222
00:06:55,039 --> 00:06:56,560
of materials for your software

223
00:06:56,560 --> 00:06:58,960
um to be honest most most of the time

224
00:06:58,960 --> 00:07:00,720
you'll be doing this with source code

225
00:07:00,720 --> 00:07:02,160
if it's in-house software that you're

226
00:07:02,160 --> 00:07:04,479
building um it's very easy to do there's

227
00:07:04,479 --> 00:07:05,599
lots of tools out there i'm going to

228
00:07:05,599 --> 00:07:07,360
list them all but for example

229
00:07:07,360 --> 00:07:09,120
you can use things like oauth dependency

230
00:07:09,120 --> 00:07:10,880
check which will go out and actually try

231
00:07:10,880 --> 00:07:12,560
and find out if any of the components

232
00:07:12,560 --> 00:07:13,599
you have

233
00:07:13,599 --> 00:07:16,000
are subject to issues it gets a little

234
00:07:16,000 --> 00:07:17,680
bit more complicated if you have black

235
00:07:17,680 --> 00:07:18,400
box

236
00:07:18,400 --> 00:07:20,080
applications or even components of your

237
00:07:20,080 --> 00:07:21,599
software which are black box

238
00:07:21,599 --> 00:07:23,759
so let's say again you might have um

239
00:07:23,759 --> 00:07:25,680
open source components but you also use

240
00:07:25,680 --> 00:07:26,960
commercial libraries

241
00:07:26,960 --> 00:07:28,720
it's unlikely that you know the vendors

242
00:07:28,720 --> 00:07:29,840
are going to provide you source code for

243
00:07:29,840 --> 00:07:31,280
the commercial components

244
00:07:31,280 --> 00:07:33,039
so if you want to understand what

245
00:07:33,039 --> 00:07:34,639
components are within there

246
00:07:34,639 --> 00:07:36,080
then you probably need to be doing

247
00:07:36,080 --> 00:07:37,919
software compensation analysis on those

248
00:07:37,919 --> 00:07:39,120
binaries

249
00:07:39,120 --> 00:07:41,199
um you might also have third-party apps

250
00:07:41,199 --> 00:07:42,319
that your employees use

251
00:07:42,319 --> 00:07:44,960
as and day-to-day business so they could

252
00:07:44,960 --> 00:07:47,199
be things like expense tracking apps or

253
00:07:47,199 --> 00:07:50,319
receipt apps things like google sheets

254
00:07:50,319 --> 00:07:50,720
for

255
00:07:50,720 --> 00:07:53,759
accounting and for sharing data and you

256
00:07:53,759 --> 00:07:54,879
don't really know what those apps are

257
00:07:54,879 --> 00:07:56,479
made of or whether there's anything in

258
00:07:56,479 --> 00:07:56,800
there

259
00:07:56,800 --> 00:07:58,479
that might be a cause for concern

260
00:07:58,479 --> 00:07:59,440
especially if you're using like

261
00:07:59,440 --> 00:08:00,560
corporate devices and

262
00:08:00,560 --> 00:08:03,759
mdm for example and then as another

263
00:08:03,759 --> 00:08:05,680
example you might outsource

264
00:08:05,680 --> 00:08:07,120
parts of your development to other teams

265
00:08:07,120 --> 00:08:08,560
or there might be segregation of duties

266
00:08:08,560 --> 00:08:09,759
which means you don't have access to

267
00:08:09,759 --> 00:08:10,479
source code

268
00:08:10,479 --> 00:08:12,560
and again from a from an assurance

269
00:08:12,560 --> 00:08:13,680
perspective

270
00:08:13,680 --> 00:08:15,120
we might want to do black box builder

271
00:08:15,120 --> 00:08:16,800
materials generation just to

272
00:08:16,800 --> 00:08:18,879
gain an understanding of what's in there

273
00:08:18,879 --> 00:08:20,960
um but this is really hard to do with

274
00:08:20,960 --> 00:08:22,240
efficacy because

275
00:08:22,240 --> 00:08:23,680
you have things like compiler

276
00:08:23,680 --> 00:08:25,680
optimizations and code flattening and

277
00:08:25,680 --> 00:08:27,039
code minification

278
00:08:27,039 --> 00:08:29,199
and then on mobile especially you'll

279
00:08:29,199 --> 00:08:30,879
find often that a lot of components are

280
00:08:30,879 --> 00:08:31,840
obfuscated

281
00:08:31,840 --> 00:08:33,679
so if you have like signature matching

282
00:08:33,679 --> 00:08:35,039
um as part of your

283
00:08:35,039 --> 00:08:37,039
villa materials generation then you'll

284
00:08:37,039 --> 00:08:38,880
find that often your signatures might

285
00:08:38,880 --> 00:08:39,440
not match

286
00:08:39,440 --> 00:08:40,958
and this becomes like a really difficult

287
00:08:40,958 --> 00:08:43,598
problem to solve

288
00:08:46,000 --> 00:08:48,080
so the first part that we're trying to

289
00:08:48,080 --> 00:08:49,760
tackle is like how do we identify

290
00:08:49,760 --> 00:08:50,480
components

291
00:08:50,480 --> 00:08:52,560
um so what if we go through a package

292
00:08:52,560 --> 00:08:54,000
and we identify that there's various

293
00:08:54,000 --> 00:08:55,839
libraries how do we record that inside

294
00:08:55,839 --> 00:08:56,640
of our

295
00:08:56,640 --> 00:08:59,120
materials um the first way would be to

296
00:08:59,120 --> 00:08:59,920
use a cpe

297
00:08:59,920 --> 00:09:03,519
identifier um it has like a semantic

298
00:09:03,519 --> 00:09:05,279
string that looks like this a pilot

299
00:09:05,279 --> 00:09:07,200
in color and the main components so the

300
00:09:07,200 --> 00:09:08,720
vendor product and version

301
00:09:08,720 --> 00:09:10,080
but there's lots of other metadata that

302
00:09:10,080 --> 00:09:12,000
can be captured here

303
00:09:12,000 --> 00:09:13,920
as an example we can see here for

304
00:09:13,920 --> 00:09:15,200
internet explorer

305
00:09:15,200 --> 00:09:17,200
it's from microsoft of course and it's

306
00:09:17,200 --> 00:09:20,320
version 80601

307
00:09:20,320 --> 00:09:21,760
and we can also see that for example

308
00:09:21,760 --> 00:09:23,920
it's using cpe version 2.3

309
00:09:23,920 --> 00:09:25,760
and just before microsoft we can see

310
00:09:25,760 --> 00:09:27,519
there's an a which tells us it's an

311
00:09:27,519 --> 00:09:28,160
application

312
00:09:28,160 --> 00:09:30,720
so you can also uh have an identifier to

313
00:09:30,720 --> 00:09:31,920
represent software

314
00:09:31,920 --> 00:09:36,720
and operating systems and hardware

315
00:09:36,720 --> 00:09:39,200
another way of identifying a component

316
00:09:39,200 --> 00:09:41,120
would be a package url scheme

317
00:09:41,120 --> 00:09:43,040
so this is something that's uh quite

318
00:09:43,040 --> 00:09:44,160
commonly used in

319
00:09:44,160 --> 00:09:46,560
some of the old stuff you'll see in the

320
00:09:46,560 --> 00:09:48,800
url scheme you have an ecosystem type

321
00:09:48,800 --> 00:09:50,720
a namespace the package name and the

322
00:09:50,720 --> 00:09:52,080
version again you can have other

323
00:09:52,080 --> 00:09:52,959
qualifiers or

324
00:09:52,959 --> 00:09:55,440
information as well and again as an

325
00:09:55,440 --> 00:09:56,480
example

326
00:09:56,480 --> 00:09:58,880
we can see here it's a maven package is

327
00:09:58,880 --> 00:10:01,360
in the apache xml graphics namespace

328
00:10:01,360 --> 00:10:04,079
and it's version 1.9.1 of the batik

329
00:10:04,079 --> 00:10:06,720
animation package

330
00:10:06,720 --> 00:10:08,480
so inside a build materials document it

331
00:10:08,480 --> 00:10:09,760
might look something like this you don't

332
00:10:09,760 --> 00:10:10,880
need to read the whole thing

333
00:10:10,880 --> 00:10:13,600
but for our acne application we have

334
00:10:13,600 --> 00:10:15,839
highlighted a cpe identifier

335
00:10:15,839 --> 00:10:17,600
and then at the very bottom of this

336
00:10:17,600 --> 00:10:19,760
document uh we can see there's another

337
00:10:19,760 --> 00:10:22,880
package url for tomcat catalina so just

338
00:10:22,880 --> 00:10:24,480
two different examples of how we might

339
00:10:24,480 --> 00:10:26,399
identify a component and track that

340
00:10:26,399 --> 00:10:29,760
inside of the materials

341
00:10:30,880 --> 00:10:32,880
so one billion materials format which is

342
00:10:32,880 --> 00:10:34,320
uh quite popular nowadays

343
00:10:34,320 --> 00:10:36,720
is cyclone dx this is a like a product

344
00:10:36,720 --> 00:10:37,920
of the os community

345
00:10:37,920 --> 00:10:40,079
um it's featured in things like

346
00:10:40,079 --> 00:10:41,920
dependency check and dependency track

347
00:10:41,920 --> 00:10:44,320
um it's quite flexible it has json xml

348
00:10:44,320 --> 00:10:45,519
formats so

349
00:10:45,519 --> 00:10:47,519
um you can work with with most modern

350
00:10:47,519 --> 00:10:49,440
languages to parse it and generate these

351
00:10:49,440 --> 00:10:51,600
there's lots of tooling around it

352
00:10:51,600 --> 00:10:53,760
and as an example here we can see we

353
00:10:53,760 --> 00:10:54,959
have the catalan package

354
00:10:54,959 --> 00:10:58,320
and some licensing information and then

355
00:10:58,320 --> 00:11:00,160
another format is uh

356
00:11:00,160 --> 00:11:01,839
the software package data exchange

357
00:11:01,839 --> 00:11:03,760
format or spdx

358
00:11:03,760 --> 00:11:05,279
uh it's been around for a lot longer

359
00:11:05,279 --> 00:11:06,720
there's a lot of work that's gone into

360
00:11:06,720 --> 00:11:07,120
the

361
00:11:07,120 --> 00:11:10,399
um into the format and it has many

362
00:11:10,399 --> 00:11:11,519
different data types

363
00:11:11,519 --> 00:11:13,600
and that you can generate the build

364
00:11:13,600 --> 00:11:14,640
materials in

365
00:11:14,640 --> 00:11:16,079
and so it can be quite flexible

366
00:11:16,079 --> 00:11:18,160
depending on your needs in the example

367
00:11:18,160 --> 00:11:18,720
you can see

368
00:11:18,720 --> 00:11:21,279
down to the individual file we can see

369
00:11:21,279 --> 00:11:23,279
information like which license was

370
00:11:23,279 --> 00:11:24,959
it was used what the different check

371
00:11:24,959 --> 00:11:26,800
sums are and if it was a binary or

372
00:11:26,800 --> 00:11:29,040
source code um so we could get like a

373
00:11:29,040 --> 00:11:30,399
granular understanding

374
00:11:30,399 --> 00:11:32,399
of um of all of the things that might be

375
00:11:32,399 --> 00:11:34,320
inside the software

376
00:11:34,320 --> 00:11:36,320
um so there are other formats but given

377
00:11:36,320 --> 00:11:37,600
the time i'm not going to go through all

378
00:11:37,600 --> 00:11:38,240
of them but

379
00:11:38,240 --> 00:11:39,600
these are the two main ones that you'll

380
00:11:39,600 --> 00:11:41,120
probably run into if you start looking

381
00:11:41,120 --> 00:11:41,680
at

382
00:11:41,680 --> 00:11:44,800
software transparency

383
00:11:46,079 --> 00:11:48,240
so to get an understanding of why this

384
00:11:48,240 --> 00:11:49,519
is important and

385
00:11:49,519 --> 00:11:50,800
why we should be talking about it i

386
00:11:50,800 --> 00:11:52,720
wanted to show you some metrics

387
00:11:52,720 --> 00:11:56,240
so what we tried to do was look at some

388
00:11:56,240 --> 00:11:57,920
recent events that happened i mentioned

389
00:11:57,920 --> 00:11:59,760
this one earlier and the sarman

390
00:11:59,760 --> 00:12:02,079
vulnerability was found by sneak

391
00:12:02,079 --> 00:12:05,600
sort of published um late last year

392
00:12:05,600 --> 00:12:08,320
and what they found was this mythical

393
00:12:08,320 --> 00:12:10,160
advertisement sdk

394
00:12:10,160 --> 00:12:12,639
was serving with legitimate

395
00:12:12,639 --> 00:12:14,240
functionality for a long time but then

396
00:12:14,240 --> 00:12:15,360
at some point

397
00:12:15,360 --> 00:12:18,000
uh was updated to include some illicit

398
00:12:18,000 --> 00:12:19,120
or nefarious

399
00:12:19,120 --> 00:12:21,680
functionality and to begin with what was

400
00:12:21,680 --> 00:12:22,639
observed was

401
00:12:22,639 --> 00:12:24,800
the advertisement library was hijacking

402
00:12:24,800 --> 00:12:26,639
um advertisement clicks

403
00:12:26,639 --> 00:12:28,720
um so essentially the user would click

404
00:12:28,720 --> 00:12:29,839
on an ad and

405
00:12:29,839 --> 00:12:31,839
the sdk would intercept that and and

406
00:12:31,839 --> 00:12:32,959
send some fake

407
00:12:32,959 --> 00:12:35,120
or fraudulent attribution information

408
00:12:35,120 --> 00:12:37,040
back to the providers

409
00:12:37,040 --> 00:12:38,639
so we should shouldn't have been doing

410
00:12:38,639 --> 00:12:40,320
that but um you know that was already

411
00:12:40,320 --> 00:12:41,040
bad

412
00:12:41,040 --> 00:12:43,360
um but the more sneak looked at the the

413
00:12:43,360 --> 00:12:45,440
library the more they found and

414
00:12:45,440 --> 00:12:46,880
um it turns out they were also doing

415
00:12:46,880 --> 00:12:49,120
some tracking um which involved even

416
00:12:49,120 --> 00:12:50,560
recording all of the things that

417
00:12:50,560 --> 00:12:52,000
android users were downloading on their

418
00:12:52,000 --> 00:12:54,639
phones and then on ios

419
00:12:54,639 --> 00:12:56,399
it was actually observed that there were

420
00:12:56,399 --> 00:12:57,920
ways for the

421
00:12:57,920 --> 00:12:59,920
for the back end to communicate uh

422
00:12:59,920 --> 00:13:01,519
arbitrary code that would be run in the

423
00:13:01,519 --> 00:13:03,360
context of the app so essentially

424
00:13:03,360 --> 00:13:06,000
uh you know behaviors that are typically

425
00:13:06,000 --> 00:13:08,160
exhibited by malware

426
00:13:08,160 --> 00:13:10,880
so this was pretty nasty um we actually

427
00:13:10,880 --> 00:13:11,279
uh at

428
00:13:11,279 --> 00:13:13,040
oscar we worked with with snake on this

429
00:13:13,040 --> 00:13:15,040
one to figure out across our sample pool

430
00:13:15,040 --> 00:13:16,959
how far the rabbit hole goes and this

431
00:13:16,959 --> 00:13:18,959
actually affected quite a lot of apps

432
00:13:18,959 --> 00:13:21,839
um so you know it was a big problem and

433
00:13:21,839 --> 00:13:23,920
it stemmed out into other sdks

434
00:13:23,920 --> 00:13:25,600
that we were using this underneath the

435
00:13:25,600 --> 00:13:27,040
scenes and again it becomes quite a hard

436
00:13:27,040 --> 00:13:28,320
problem to answer

437
00:13:28,320 --> 00:13:30,800
does this affect me um so again it was

438
00:13:30,800 --> 00:13:31,760
high profile

439
00:13:31,760 --> 00:13:33,360
and we had a lot of customer attention

440
00:13:33,360 --> 00:13:35,680
on this

441
00:13:35,680 --> 00:13:37,920
another recent uh story which you might

442
00:13:37,920 --> 00:13:39,920
have read from alex bersan was

443
00:13:39,920 --> 00:13:41,120
dependency confusion

444
00:13:41,120 --> 00:13:43,440
and so alex uh found a really

445
00:13:43,440 --> 00:13:45,120
interesting supply chain

446
00:13:45,120 --> 00:13:47,120
abuse case where he ended up making

447
00:13:47,120 --> 00:13:48,880
quite a bit money and through

448
00:13:48,880 --> 00:13:51,920
bug bounties and what alex observed was

449
00:13:51,920 --> 00:13:54,320
that the order of which many package

450
00:13:54,320 --> 00:13:55,600
managers would

451
00:13:55,600 --> 00:13:58,320
fetch packages from registries could be

452
00:13:58,320 --> 00:13:59,120
abused

453
00:13:59,120 --> 00:14:01,920
so for example he went out and looked at

454
00:14:01,920 --> 00:14:03,120
various package

455
00:14:03,120 --> 00:14:05,519
files for lists of dependencies and this

456
00:14:05,519 --> 00:14:07,279
one for example is from paypal

457
00:14:07,279 --> 00:14:09,519
and the one shown in red were packages

458
00:14:09,519 --> 00:14:10,720
that didn't exist

459
00:14:10,720 --> 00:14:13,600
at the public npm registry and were

460
00:14:13,600 --> 00:14:14,639
likely obviously

461
00:14:14,639 --> 00:14:16,560
internal packages to paypal and what

462
00:14:16,560 --> 00:14:17,920
would happen with uh

463
00:14:17,920 --> 00:14:19,199
you know when when the package was

464
00:14:19,199 --> 00:14:21,519
installed npm would actually go and

465
00:14:21,519 --> 00:14:24,160
try and fetch them from mpmjs the public

466
00:14:24,160 --> 00:14:25,120
registry

467
00:14:25,120 --> 00:14:26,959
before falling back to any internal

468
00:14:26,959 --> 00:14:28,240
registries that were

469
00:14:28,240 --> 00:14:30,959
that were defined so this allowed for um

470
00:14:30,959 --> 00:14:32,720
kind of like a race condition in a way

471
00:14:32,720 --> 00:14:34,720
where um someone with this knowledge

472
00:14:34,720 --> 00:14:36,399
could go and register those packages

473
00:14:36,399 --> 00:14:39,360
um at the public registry and then when

474
00:14:39,360 --> 00:14:40,959
the software is installed it would pull

475
00:14:40,959 --> 00:14:42,560
in those malicious packages

476
00:14:42,560 --> 00:14:45,040
instead of the desired internal package

477
00:14:45,040 --> 00:14:46,320
for those organizations

478
00:14:46,320 --> 00:14:47,680
and there was many companies that were

479
00:14:47,680 --> 00:14:49,519
affected by this it was a very cool

480
00:14:49,519 --> 00:14:50,320
article

481
00:14:50,320 --> 00:14:52,639
um but just again shows another example

482
00:14:52,639 --> 00:14:56,480
of where dependencies can become quite a

483
00:14:56,839 --> 00:14:58,399
mess

484
00:14:58,399 --> 00:15:00,720
and the other big problem is uh on

485
00:15:00,720 --> 00:15:02,000
mobile especially

486
00:15:02,000 --> 00:15:04,000
we see a huge explosion of different

487
00:15:04,000 --> 00:15:05,199
ecosystems so

488
00:15:05,199 --> 00:15:07,199
we have things like cocoapods and

489
00:15:07,199 --> 00:15:10,480
carthage swift pm on the ios side

490
00:15:10,480 --> 00:15:13,199
we have maven and rust now um c plus

491
00:15:13,199 --> 00:15:14,560
plus on android

492
00:15:14,560 --> 00:15:16,959
um you can have ros libraries on ios 2.

493
00:15:16,959 --> 00:15:18,480
uh there's lots of cross-platform

494
00:15:18,480 --> 00:15:19,199
frameworks so

495
00:15:19,199 --> 00:15:21,760
nuget would be applicable for um for

496
00:15:21,760 --> 00:15:24,240
dlls for xamarin apps for example

497
00:15:24,240 --> 00:15:25,920
and then things like react native and

498
00:15:25,920 --> 00:15:28,480
cordova are very popular these days so

499
00:15:28,480 --> 00:15:29,040
again

500
00:15:29,040 --> 00:15:31,440
npm as an ecosystem is very relevant

501
00:15:31,440 --> 00:15:32,079
here

502
00:15:32,079 --> 00:15:34,480
and then we have even some some newer

503
00:15:34,480 --> 00:15:35,600
frameworks that are starting to get a

504
00:15:35,600 --> 00:15:36,639
lot of traction like

505
00:15:36,639 --> 00:15:39,600
flutter which has a language called dart

506
00:15:39,600 --> 00:15:40,000
so there's

507
00:15:40,000 --> 00:15:42,079
lots of stuff going on and if we want to

508
00:15:42,079 --> 00:15:43,360
understand all of the things that are

509
00:15:43,360 --> 00:15:45,199
inside our software then we also need to

510
00:15:45,199 --> 00:15:46,399
be able to understand these different

511
00:15:46,399 --> 00:15:49,040
ecosystems um so that we can

512
00:15:49,040 --> 00:15:51,360
identify the components appropriately

513
00:15:51,360 --> 00:15:52,800
there's no point in us identifying all

514
00:15:52,800 --> 00:15:54,000
the native components

515
00:15:54,000 --> 00:15:56,160
if you know the large majority of code

516
00:15:56,160 --> 00:15:57,600
is in javascript and we're not actually

517
00:15:57,600 --> 00:16:00,800
analyzing or looking at that

518
00:16:02,480 --> 00:16:05,680
so to put this in perspective we

519
00:16:05,680 --> 00:16:08,079
wanted to show some metrics and we

520
00:16:08,079 --> 00:16:09,360
thought it would be a good idea to go

521
00:16:09,360 --> 00:16:10,800
and look at the top 100 apps

522
00:16:10,800 --> 00:16:13,279
in finance so the chart might be a

523
00:16:13,279 --> 00:16:14,880
little bit out of date but a few weeks

524
00:16:14,880 --> 00:16:16,240
ago i pulled down

525
00:16:16,240 --> 00:16:18,959
the top 100 apps in the finance category

526
00:16:18,959 --> 00:16:20,240
of the app store

527
00:16:20,240 --> 00:16:22,639
and began to pull out the bill of

528
00:16:22,639 --> 00:16:24,399
materials and look at um

529
00:16:24,399 --> 00:16:27,440
some some trends throughout so the first

530
00:16:27,440 --> 00:16:29,120
thing that we looked at was

531
00:16:29,120 --> 00:16:31,519
what was the ecosystem breakdown and we

532
00:16:31,519 --> 00:16:33,040
found that most components that we

533
00:16:33,040 --> 00:16:34,480
identified were

534
00:16:34,480 --> 00:16:36,880
native components on ios for example

535
00:16:36,880 --> 00:16:38,240
using cocoapods

536
00:16:38,240 --> 00:16:40,240
not totally enterprising most of the

537
00:16:40,240 --> 00:16:41,759
financial apps i've worked with in the

538
00:16:41,759 --> 00:16:43,360
past through consulting have been native

539
00:16:43,360 --> 00:16:43,759
apps

540
00:16:43,759 --> 00:16:45,680
it's been very rare that i've seen a

541
00:16:45,680 --> 00:16:47,360
cross-platform app in finance so this

542
00:16:47,360 --> 00:16:48,880
wasn't a surprising trend

543
00:16:48,880 --> 00:16:50,320
but there were a handful in there that

544
00:16:50,320 --> 00:16:52,480
had javascript components and

545
00:16:52,480 --> 00:16:55,600
even xamarin components which i'd never

546
00:16:55,600 --> 00:16:56,720
seen before but

547
00:16:56,720 --> 00:17:01,360
yeah again wasn't totally unsurprising

548
00:17:01,519 --> 00:17:03,199
another thing that was very interesting

549
00:17:03,199 --> 00:17:04,720
was if we looked at the software builder

550
00:17:04,720 --> 00:17:06,160
materials size

551
00:17:06,160 --> 00:17:09,280
um as a general trend android was

552
00:17:09,280 --> 00:17:11,599
much more spread out and often

553
00:17:11,599 --> 00:17:13,599
applications had a lot more components

554
00:17:13,599 --> 00:17:15,119
so on the left of the chart here we can

555
00:17:15,119 --> 00:17:17,599
see the percentage of the sample pool

556
00:17:17,599 --> 00:17:20,480
um and then the colors uh represent the

557
00:17:20,480 --> 00:17:21,039
number of

558
00:17:21,039 --> 00:17:24,480
components in the materials so on ios 75

559
00:17:24,480 --> 00:17:26,240
of apps only had between 1 and 30

560
00:17:26,240 --> 00:17:28,400
components and we can see that the graph

561
00:17:28,400 --> 00:17:29,440
sort of tapers off

562
00:17:29,440 --> 00:17:31,520
and the you know the larger the material

563
00:17:31,520 --> 00:17:33,440
size whereas on android

564
00:17:33,440 --> 00:17:36,160
most applications uh had between 60 and

565
00:17:36,160 --> 00:17:37,840
120 components

566
00:17:37,840 --> 00:17:40,000
and there were still quite a large um

567
00:17:40,000 --> 00:17:41,679
percentage of applications that had even

568
00:17:41,679 --> 00:17:44,080
120 or 150 plus

569
00:17:44,080 --> 00:17:46,160
uh components inside the bill of

570
00:17:46,160 --> 00:17:47,840
materials

571
00:17:47,840 --> 00:17:50,720
so it just shows um as a trend uh that

572
00:17:50,720 --> 00:17:52,080
android applications typically have a

573
00:17:52,080 --> 00:17:52,799
lot more

574
00:17:52,799 --> 00:17:55,039
inside them uh that doesn't necessarily

575
00:17:55,039 --> 00:17:56,160
equate to any risk

576
00:17:56,160 --> 00:17:58,000
but um you know given the open source

577
00:17:58,000 --> 00:17:59,520
nature of android again this wasn't

578
00:17:59,520 --> 00:18:02,480
totally unsurprising

579
00:18:03,919 --> 00:18:06,000
in terms of licensing for the components

580
00:18:06,000 --> 00:18:07,200
identified

581
00:18:07,200 --> 00:18:09,280
most of them used apache 2.0 as the

582
00:18:09,280 --> 00:18:10,559
license very

583
00:18:10,559 --> 00:18:13,360
slight majority mit license came in at

584
00:18:13,360 --> 00:18:14,880
37.2

585
00:18:14,880 --> 00:18:17,919
so uh just behind and then next we had

586
00:18:17,919 --> 00:18:19,600
copyright and commercial licenses which

587
00:18:19,600 --> 00:18:20,240
again

588
00:18:20,240 --> 00:18:22,000
in finance is not totally uh

589
00:18:22,000 --> 00:18:23,919
unsurprising given that most of that

590
00:18:23,919 --> 00:18:26,000
code's going to be proprietary

591
00:18:26,000 --> 00:18:29,039
zlib and bsd also had a presence but

592
00:18:29,039 --> 00:18:32,400
again very small numbers um and yeah

593
00:18:32,400 --> 00:18:34,720
very permissive licensing used inside

594
00:18:34,720 --> 00:18:35,440
commercial

595
00:18:35,440 --> 00:18:37,120
commercial apps so proprietary apps is

596
00:18:37,120 --> 00:18:38,720
not unsurprising

597
00:18:38,720 --> 00:18:40,240
you know we don't see any copyright

598
00:18:40,240 --> 00:18:42,080
licenses here because again

599
00:18:42,080 --> 00:18:43,919
it's not likely that um the banks are

600
00:18:43,919 --> 00:18:45,440
going to want to open source large parts

601
00:18:45,440 --> 00:18:47,200
of their code they typically have

602
00:18:47,200 --> 00:18:49,520
lots of security and anti-fraud and

603
00:18:49,520 --> 00:18:51,280
obfuscation and stuff that's in there

604
00:18:51,280 --> 00:18:53,440
and i can't see them wanting to to make

605
00:18:53,440 --> 00:18:57,840
that stuff available online

606
00:18:58,400 --> 00:19:00,160
so another interesting case study is we

607
00:19:00,160 --> 00:19:01,760
took a high profile airline app i'm not

608
00:19:01,760 --> 00:19:02,960
going to name them and i'm not going to

609
00:19:02,960 --> 00:19:04,559
name the region they're from

610
00:19:04,559 --> 00:19:06,240
but we saw that they had 43 total

611
00:19:06,240 --> 00:19:08,559
components and 37 of those components

612
00:19:08,559 --> 00:19:10,080
were external

613
00:19:10,080 --> 00:19:12,720
and what was interesting was over half

614
00:19:12,720 --> 00:19:13,360
of those

615
00:19:13,360 --> 00:19:15,600
components had available updates at the

616
00:19:15,600 --> 00:19:16,559
time we looked

617
00:19:16,559 --> 00:19:20,240
so 20 out of 37 which is 54 actually had

618
00:19:20,240 --> 00:19:22,160
available updates some of them of course

619
00:19:22,160 --> 00:19:24,000
would just be like a patch version

620
00:19:24,000 --> 00:19:25,840
and but some of them were multiple major

621
00:19:25,840 --> 00:19:27,120
releases i would think

622
00:19:27,120 --> 00:19:28,960
and these were for very popular

623
00:19:28,960 --> 00:19:30,720
libraries like adobe mobile

624
00:19:30,720 --> 00:19:32,799
uh lml fire for networking app

625
00:19:32,799 --> 00:19:34,320
authentication and even things like

626
00:19:34,320 --> 00:19:35,360
zebra crossing

627
00:19:35,360 --> 00:19:37,440
which is for uh like qr code and barcode

628
00:19:37,440 --> 00:19:38,799
scanning

629
00:19:38,799 --> 00:19:41,440
so again quite surprising um to see that

630
00:19:41,440 --> 00:19:43,039
very like popular

631
00:19:43,039 --> 00:19:44,960
applications have such issues with

632
00:19:44,960 --> 00:19:46,640
keeping the dependencies up to date

633
00:19:46,640 --> 00:19:49,200
you'd expect most software um you know

634
00:19:49,200 --> 00:19:50,799
and in the stores to have some kind of

635
00:19:50,799 --> 00:19:51,360
um

636
00:19:51,360 --> 00:19:53,760
you know available updates and but when

637
00:19:53,760 --> 00:19:54,799
you're

638
00:19:54,799 --> 00:19:56,559
you know a leading provider in a given

639
00:19:56,559 --> 00:19:58,559
field with you know

640
00:19:58,559 --> 00:20:00,720
very popular software you'd expect this

641
00:20:00,720 --> 00:20:03,919
to be a bit more hygienic

642
00:20:03,919 --> 00:20:06,159
12 of those 37 dependencies or projects

643
00:20:06,159 --> 00:20:07,039
actually didn't really

644
00:20:07,039 --> 00:20:09,520
exhibit any activity online so if we

645
00:20:09,520 --> 00:20:10,720
went to the github or

646
00:20:10,720 --> 00:20:12,720
gitlab projects there was no activity

647
00:20:12,720 --> 00:20:14,240
within the last year

648
00:20:14,240 --> 00:20:16,159
no recent comments no pull requests the

649
00:20:16,159 --> 00:20:17,520
issues that were being filed were just

650
00:20:17,520 --> 00:20:18,480
abandoned

651
00:20:18,480 --> 00:20:21,360
and which again was kind of sad um but

652
00:20:21,360 --> 00:20:22,159
you know

653
00:20:22,159 --> 00:20:24,480
it still shows that uh even though

654
00:20:24,480 --> 00:20:26,480
you're using these

655
00:20:26,480 --> 00:20:28,960
dependencies inside your software they

656
00:20:28,960 --> 00:20:29,679
could be

657
00:20:29,679 --> 00:20:31,840
a risk even if it's not security risk

658
00:20:31,840 --> 00:20:33,600
and there could be business risk there

659
00:20:33,600 --> 00:20:34,880
because these things

660
00:20:34,880 --> 00:20:37,120
aren't necessarily um going to be as

661
00:20:37,120 --> 00:20:38,480
up-to-date and maintained as you would

662
00:20:38,480 --> 00:20:40,400
like them to be if they were internal

663
00:20:40,400 --> 00:20:42,000
um surprisingly only two of the

664
00:20:42,000 --> 00:20:43,919
components that had available updates

665
00:20:43,919 --> 00:20:45,520
and actually had vulnerabilities

666
00:20:45,520 --> 00:20:47,039
associated with them that's not to say

667
00:20:47,039 --> 00:20:48,480
there weren't more vulnerabilities

668
00:20:48,480 --> 00:20:50,640
but certainly in the public domain only

669
00:20:50,640 --> 00:20:52,080
two components were showing up as

670
00:20:52,080 --> 00:20:52,720
vulnerable

671
00:20:52,720 --> 00:20:54,400
i think it was four vulnerabilities in

672
00:20:54,400 --> 00:20:56,159
total and i think that the the maximum

673
00:20:56,159 --> 00:20:58,559
cvss we saw was 6.5

674
00:20:58,559 --> 00:21:01,520
um but yeah still it goes to show there

675
00:21:01,520 --> 00:21:03,200
are vulnerabilities sitting inside apps

676
00:21:03,200 --> 00:21:03,600
and

677
00:21:03,600 --> 00:21:05,039
that can be easily fixed through

678
00:21:05,039 --> 00:21:07,840
available updates

679
00:21:09,919 --> 00:21:12,960
so this brings us to the problem of

680
00:21:12,960 --> 00:21:15,760
how do we actually generate or determine

681
00:21:15,760 --> 00:21:17,200
the build materials for a black box

682
00:21:17,200 --> 00:21:18,720
thing if we're looking at a binary if we

683
00:21:18,720 --> 00:21:19,840
don't have source code if it's a

684
00:21:19,840 --> 00:21:20,960
commercial library

685
00:21:20,960 --> 00:21:22,400
or we're looking at an app store app

686
00:21:22,400 --> 00:21:24,400
that maybe i don't write inside my

687
00:21:24,400 --> 00:21:25,280
organization

688
00:21:25,280 --> 00:21:27,919
how do we determine what's inside it and

689
00:21:27,919 --> 00:21:31,360
that's what i want to focus on now

690
00:21:31,360 --> 00:21:35,039
so thankfully or maybe not so thankfully

691
00:21:35,039 --> 00:21:36,640
depending on your perspective

692
00:21:36,640 --> 00:21:39,120
the package managers and the ecosystems

693
00:21:39,120 --> 00:21:40,240
often have a lot of

694
00:21:40,240 --> 00:21:42,480
residue that can allow you to determine

695
00:21:42,480 --> 00:21:44,080
what's inside the software

696
00:21:44,080 --> 00:21:45,679
and sometimes you'll find that these

697
00:21:45,679 --> 00:21:47,760
files um are actually included in the

698
00:21:47,760 --> 00:21:48,720
builds of the

699
00:21:48,720 --> 00:21:50,320
android and ios apps that make it out to

700
00:21:50,320 --> 00:21:52,159
the stores so if you see

701
00:21:52,159 --> 00:21:54,480
for example package log files for npm

702
00:21:54,480 --> 00:21:55,440
you can

703
00:21:55,440 --> 00:21:57,120
determine all the packages that are

704
00:21:57,120 --> 00:21:58,880
installed what the versions are and all

705
00:21:58,880 --> 00:22:00,480
the translative dependencies

706
00:22:00,480 --> 00:22:02,400
you might also see things like pod files

707
00:22:02,400 --> 00:22:03,679
from proper pods

708
00:22:03,679 --> 00:22:06,880
um or cart files for carthage um

709
00:22:06,880 --> 00:22:09,360
but yeah it's it's not gonna be the case

710
00:22:09,360 --> 00:22:10,720
that every application has these but

711
00:22:10,720 --> 00:22:12,720
sometimes you'll find them and

712
00:22:12,720 --> 00:22:13,919
you know they can give you a lot of

713
00:22:13,919 --> 00:22:15,840
insight um but

714
00:22:15,840 --> 00:22:18,159
down at the bottom uh you know we've

715
00:22:18,159 --> 00:22:19,679
highlighted in both the what the things

716
00:22:19,679 --> 00:22:20,640
that you're going to want to look at

717
00:22:20,640 --> 00:22:21,200
most

718
00:22:21,200 --> 00:22:24,080
on ios we have frameworks dynamic

719
00:22:24,080 --> 00:22:26,559
libraries bundles maybe extensions

720
00:22:26,559 --> 00:22:28,320
if it's cross-platform like xamarin then

721
00:22:28,320 --> 00:22:29,760
we're going to have things like

722
00:22:29,760 --> 00:22:33,360
dynamic dll files on android we have dex

723
00:22:33,360 --> 00:22:33,919
packages

724
00:22:33,919 --> 00:22:36,559
so we can analyze those we might have

725
00:22:36,559 --> 00:22:38,080
native libraries as well there

726
00:22:38,080 --> 00:22:40,559
and there are other build artifacts like

727
00:22:40,559 --> 00:22:42,159
properties files that we want to look

728
00:22:42,159 --> 00:22:43,039
into

729
00:22:43,039 --> 00:22:45,280
and then on both platforms things like

730
00:22:45,280 --> 00:22:46,480
cordova react

731
00:22:46,480 --> 00:22:48,720
kony capacitor all of these things have

732
00:22:48,720 --> 00:22:50,559
their own files on disk which are

733
00:22:50,559 --> 00:22:54,159
pretty known and in standard uh sort of

734
00:22:54,159 --> 00:22:56,640
file system structure so we can look for

735
00:22:56,640 --> 00:22:57,440
and identify

736
00:22:57,440 --> 00:22:58,799
those components and pull out the

737
00:22:58,799 --> 00:23:00,159
versions there as well to gain an

738
00:23:00,159 --> 00:23:01,840
understanding of what's there

739
00:23:01,840 --> 00:23:04,720
so if we know all of this actually we

740
00:23:04,720 --> 00:23:06,640
can begin to look through it all and

741
00:23:06,640 --> 00:23:07,039
gain

742
00:23:07,039 --> 00:23:08,240
some perspective it's not going to be

743
00:23:08,240 --> 00:23:10,159
completely comprehensive but it's better

744
00:23:10,159 --> 00:23:13,280
than not knowing anything

745
00:23:14,000 --> 00:23:17,120
so on both platforms uh applications are

746
00:23:17,120 --> 00:23:18,799
just zip files so we can just go ahead

747
00:23:18,799 --> 00:23:20,000
and unzip them and have a look through

748
00:23:20,000 --> 00:23:21,760
the files and directories that are in

749
00:23:21,760 --> 00:23:22,640
there

750
00:23:22,640 --> 00:23:25,280
i grabbed like a an ethereum wallet a

751
00:23:25,280 --> 00:23:26,240
crypto wallet

752
00:23:26,240 --> 00:23:28,640
just as an example and here we can see

753
00:23:28,640 --> 00:23:30,000
lots of cordova plugins

754
00:23:30,000 --> 00:23:32,880
um we can see es6 promise plugin they're

755
00:23:32,880 --> 00:23:34,240
using google plus

756
00:23:34,240 --> 00:23:36,559
there's some keychain uh cordova plugins

757
00:23:36,559 --> 00:23:37,600
and so on

758
00:23:37,600 --> 00:23:39,600
uh we can also look at the cordova.js

759
00:23:39,600 --> 00:23:41,120
files and actually just pull out the

760
00:23:41,120 --> 00:23:42,880
list of plugins that way too

761
00:23:42,880 --> 00:23:45,039
but just even without tooling uh you

762
00:23:45,039 --> 00:23:46,480
know if we wanted to do this manually we

763
00:23:46,480 --> 00:23:47,200
could just

764
00:23:47,200 --> 00:23:48,720
sift through there and have a look

765
00:23:48,720 --> 00:23:50,320
what's there

766
00:23:50,320 --> 00:23:52,559
in terms of frameworks we can do the

767
00:23:52,559 --> 00:23:54,240
same thing we can see this applications

768
00:23:54,240 --> 00:23:55,840
using protobuf they're using the

769
00:23:55,840 --> 00:23:56,720
facebook

770
00:23:56,720 --> 00:23:59,840
login sdk um the google promises

771
00:23:59,840 --> 00:24:02,480
fbl promises framework as well as as

772
00:24:02,480 --> 00:24:04,559
many other google frameworks here

773
00:24:04,559 --> 00:24:06,720
they all have this info.plist file which

774
00:24:06,720 --> 00:24:07,919
is basically a manifest

775
00:24:07,919 --> 00:24:10,320
on ios and which will give you version

776
00:24:10,320 --> 00:24:11,840
information so for each of these we can

777
00:24:11,840 --> 00:24:13,120
actually figure out the versions that

778
00:24:13,120 --> 00:24:14,799
are in use as well

779
00:24:14,799 --> 00:24:16,799
so again we can start to create a bill

780
00:24:16,799 --> 00:24:18,720
of materials on a black box thing even

781
00:24:18,720 --> 00:24:21,760
if we don't have source code

782
00:24:22,400 --> 00:24:24,559
on android it's much the same so we

783
00:24:24,559 --> 00:24:25,840
might have

784
00:24:25,840 --> 00:24:27,520
native libraries like we have

785
00:24:27,520 --> 00:24:28,880
highlighted here at the bottom so we

786
00:24:28,880 --> 00:24:29,520
have a google

787
00:24:29,520 --> 00:24:32,400
ocr client we can all also have

788
00:24:32,400 --> 00:24:33,760
properties files

789
00:24:33,760 --> 00:24:37,039
and so we can see things here like log4j

790
00:24:37,039 --> 00:24:40,559
um we can see i18n and other packages

791
00:24:40,559 --> 00:24:41,840
that might be in use

792
00:24:41,840 --> 00:24:43,600
so just even from looking through the

793
00:24:43,600 --> 00:24:45,120
zip we can gain

794
00:24:45,120 --> 00:24:46,880
a high level understanding of what kind

795
00:24:46,880 --> 00:24:49,120
of software is inside the app packages

796
00:24:49,120 --> 00:24:50,559
um but we probably want to go a little

797
00:24:50,559 --> 00:24:53,360
bit deeper than that

798
00:24:53,919 --> 00:24:56,480
so if we want to do code analysis then

799
00:24:56,480 --> 00:24:57,840
we can convert the dex

800
00:24:57,840 --> 00:25:00,799
uh to smalley and then somali to java

801
00:25:00,799 --> 00:25:01,760
and so this would be

802
00:25:01,760 --> 00:25:04,880
an example for uh android and on ios

803
00:25:04,880 --> 00:25:07,520
we can use um b compilers like copper or

804
00:25:07,520 --> 00:25:09,200
um

805
00:25:09,200 --> 00:25:12,159
or ida pro even to analyze those but on

806
00:25:12,159 --> 00:25:14,240
android you can use um some free and

807
00:25:14,240 --> 00:25:16,799
open source tools um to do this quite

808
00:25:16,799 --> 00:25:17,520
easily

809
00:25:17,520 --> 00:25:19,360
and although it might not be compilable

810
00:25:19,360 --> 00:25:21,039
java it's pretty legible

811
00:25:21,039 --> 00:25:23,279
and we can see for example uh that we

812
00:25:23,279 --> 00:25:25,360
are using the apache commons

813
00:25:25,360 --> 00:25:27,520
packages so again we can start to piece

814
00:25:27,520 --> 00:25:29,279
together a perspective of all the

815
00:25:29,279 --> 00:25:30,320
different packages that might be

816
00:25:30,320 --> 00:25:30,799
included

817
00:25:30,799 --> 00:25:33,600
inside the set

818
00:25:34,240 --> 00:25:36,240
and obviously this is going to become

819
00:25:36,240 --> 00:25:37,600
quite difficult and tiresome if we're

820
00:25:37,600 --> 00:25:39,360
doing it manually we can use tools like

821
00:25:39,360 --> 00:25:41,520
woodari 2 which has

822
00:25:41,520 --> 00:25:43,120
many language bindings for things like

823
00:25:43,120 --> 00:25:45,039
node and python and so that we can

824
00:25:45,039 --> 00:25:45,919
script it

825
00:25:45,919 --> 00:25:47,840
radari 2 is an open source reverse

826
00:25:47,840 --> 00:25:49,600
engineering toolkit

827
00:25:49,600 --> 00:25:51,919
and in this case we can use the icc

828
00:25:51,919 --> 00:25:52,640
command

829
00:25:52,640 --> 00:25:54,799
which will give us information on the

830
00:25:54,799 --> 00:25:56,240
classes methods

831
00:25:56,240 --> 00:25:59,279
and packages uh the tilde symbol here in

832
00:25:59,279 --> 00:25:59,919
the command

833
00:25:59,919 --> 00:26:02,080
is a grep so we're just grabbing for the

834
00:26:02,080 --> 00:26:03,760
word package and over on the right we

835
00:26:03,760 --> 00:26:04,799
can see all the packages

836
00:26:04,799 --> 00:26:07,279
and that are showing up inside this

837
00:26:07,279 --> 00:26:08,880
android application

838
00:26:08,880 --> 00:26:10,400
we can see lots of duplicates so we'll

839
00:26:10,400 --> 00:26:12,000
probably have to like dedupe

840
00:26:12,000 --> 00:26:13,760
the data and so again if we're scripting

841
00:26:13,760 --> 00:26:15,360
this that's really easy to do

842
00:26:15,360 --> 00:26:16,880
and then if we want to go deeper we can

843
00:26:16,880 --> 00:26:19,279
actually analyze the classes to provide

844
00:26:19,279 --> 00:26:20,240
the build configs

845
00:26:20,240 --> 00:26:22,480
and and gain any version information

846
00:26:22,480 --> 00:26:23,600
that might be in there as well

847
00:26:23,600 --> 00:26:25,120
so that we can get like a richer bill of

848
00:26:25,120 --> 00:26:27,039
materials rather than just the names of

849
00:26:27,039 --> 00:26:29,600
the packages

850
00:26:30,320 --> 00:26:32,400
so that's identifying all the components

851
00:26:32,400 --> 00:26:34,320
that are there um obviously as i say

852
00:26:34,320 --> 00:26:35,679
it's not totally comprehensive but it's

853
00:26:35,679 --> 00:26:36,559
better than nothing

854
00:26:36,559 --> 00:26:38,080
and there's more to it but obviously we

855
00:26:38,080 --> 00:26:39,760
only have 30 minutes today

856
00:26:39,760 --> 00:26:42,000
but part two of the problem is like how

857
00:26:42,000 --> 00:26:43,600
do you actually begin to work out what's

858
00:26:43,600 --> 00:26:44,559
a problem

859
00:26:44,559 --> 00:26:46,159
so for vulnerability detection we can

860
00:26:46,159 --> 00:26:48,640
look at places like sona types oss index

861
00:26:48,640 --> 00:26:50,559
and you have github advisory mpm

862
00:26:50,559 --> 00:26:52,159
advisory list has

863
00:26:52,159 --> 00:26:54,240
the nvd there's many places where you

864
00:26:54,240 --> 00:26:56,559
can get cbe information

865
00:26:56,559 --> 00:26:58,960
you can go to the ecosystems directly to

866
00:26:58,960 --> 00:27:00,480
query information about available

867
00:27:00,480 --> 00:27:02,080
updates what the licenses

868
00:27:02,080 --> 00:27:04,159
are and then there's services like

869
00:27:04,159 --> 00:27:05,200
libraries to io

870
00:27:05,200 --> 00:27:06,640
and that you can use if um if you're

871
00:27:06,640 --> 00:27:09,120
happy with the licensing around the data

872
00:27:09,120 --> 00:27:12,720
and then sneak sona type um depths.dev

873
00:27:12,720 --> 00:27:14,159
was recently launched by google but

874
00:27:14,159 --> 00:27:16,799
doesn't have great support on ios yet

875
00:27:16,799 --> 00:27:17,919
for you know it doesn't support

876
00:27:17,919 --> 00:27:20,080
copperboards for example but it is also

877
00:27:20,080 --> 00:27:20,960
very cool

878
00:27:20,960 --> 00:27:24,159
and so you can get information there and

879
00:27:24,159 --> 00:27:26,480
with licensing you want to look at if

880
00:27:26,480 --> 00:27:28,159
you're using any copyleft licenses or

881
00:27:28,159 --> 00:27:29,200
anything that

882
00:27:29,200 --> 00:27:31,919
you might be violating the licenses um

883
00:27:31,919 --> 00:27:32,480
for

884
00:27:32,480 --> 00:27:34,159
so do you open source all the relevant

885
00:27:34,159 --> 00:27:36,240
components uh do you include all the

886
00:27:36,240 --> 00:27:37,840
correct license texts um have you

887
00:27:37,840 --> 00:27:39,600
documented any changes

888
00:27:39,600 --> 00:27:42,480
um and yeah basically just make sure

889
00:27:42,480 --> 00:27:43,600
that you're not violating any of the

890
00:27:43,600 --> 00:27:44,240
licenses

891
00:27:44,240 --> 00:27:47,279
that you're using you might also find uh

892
00:27:47,279 --> 00:27:49,120
dependency lists without the log file

893
00:27:49,120 --> 00:27:50,320
and this is kind of tricky because it

894
00:27:50,320 --> 00:27:51,919
might just tell you the minimum version

895
00:27:51,919 --> 00:27:52,480
of

896
00:27:52,480 --> 00:27:54,000
the library that needs to be installed

897
00:27:54,000 --> 00:27:55,919
and it's not easy to ascertain which

898
00:27:55,919 --> 00:27:57,760
specific version was installed

899
00:27:57,760 --> 00:27:59,200
and we also might not see all the

900
00:27:59,200 --> 00:28:01,600
transitive dependencies so ideally

901
00:28:01,600 --> 00:28:03,600
we want to look at the log files if we

902
00:28:03,600 --> 00:28:05,840
can

903
00:28:06,880 --> 00:28:09,200
and then not just you know whether

904
00:28:09,200 --> 00:28:10,880
there's vulnerabilities or security risk

905
00:28:10,880 --> 00:28:12,399
but business risk you know

906
00:28:12,399 --> 00:28:15,120
are any of these packages we use subject

907
00:28:15,120 --> 00:28:17,200
to to code quality concerns

908
00:28:17,200 --> 00:28:19,279
um we can use the github api for example

909
00:28:19,279 --> 00:28:20,799
to look at how many

910
00:28:20,799 --> 00:28:23,760
issues are unattended uh how how

911
00:28:23,760 --> 00:28:24,880
frequently

912
00:28:24,880 --> 00:28:26,880
you know do they commit what's the pr

913
00:28:26,880 --> 00:28:28,640
the pull request cadence

914
00:28:28,640 --> 00:28:30,320
um you know is there a sufficient bus

915
00:28:30,320 --> 00:28:31,919
factor you know

916
00:28:31,919 --> 00:28:33,120
the number of contributors to the

917
00:28:33,120 --> 00:28:34,960
project if if one of them were to get

918
00:28:34,960 --> 00:28:36,320
hit by a bus would the project keep

919
00:28:36,320 --> 00:28:36,960
moving

920
00:28:36,960 --> 00:28:38,399
or is our project also going to be

921
00:28:38,399 --> 00:28:40,399
affected um

922
00:28:40,399 --> 00:28:42,000
we can look at things like maturity do

923
00:28:42,000 --> 00:28:44,720
the uci are there linters test suites

924
00:28:44,720 --> 00:28:46,399
documentation and this kind of thing

925
00:28:46,399 --> 00:28:48,960
i love this xkcd it basically just shows

926
00:28:48,960 --> 00:28:50,240
that you might have all this great stuff

927
00:28:50,240 --> 00:28:50,640
but

928
00:28:50,640 --> 00:28:52,240
um you're held up by this one person

929
00:28:52,240 --> 00:28:53,679
somewhere around the world who has this

930
00:28:53,679 --> 00:28:54,799
core package to

931
00:28:54,799 --> 00:28:57,440
all of the thing you've done and then we

932
00:28:57,440 --> 00:28:58,399
could also query

933
00:28:58,399 --> 00:28:59,760
whether these packages exist in the

934
00:28:59,760 --> 00:29:01,520
public domain so um

935
00:29:01,520 --> 00:29:03,919
again the the dependency confusion or

936
00:29:03,919 --> 00:29:05,039
the package supporting that we talked

937
00:29:05,039 --> 00:29:05,840
about earlier

938
00:29:05,840 --> 00:29:07,840
maybe for all the components we identify

939
00:29:07,840 --> 00:29:09,360
we'll check to see if they exist

940
00:29:09,360 --> 00:29:11,039
publicly and then we'll flag it if not

941
00:29:11,039 --> 00:29:12,000
to make sure that um

942
00:29:12,000 --> 00:29:12,960
that we're not going to get caught off

943
00:29:12,960 --> 00:29:15,440
guard there

944
00:29:15,760 --> 00:29:17,520
and then yeah you want to do this over

945
00:29:17,520 --> 00:29:19,200
time because malicious code may come at

946
00:29:19,200 --> 00:29:20,480
a later date

947
00:29:20,480 --> 00:29:22,000
you probably want to be doing more than

948
00:29:22,000 --> 00:29:24,640
sca you might want to be doing static

949
00:29:24,640 --> 00:29:26,000
and dynamic analysis so that you can

950
00:29:26,000 --> 00:29:26,720
identify

951
00:29:26,720 --> 00:29:28,960
nefarious behavior but software

952
00:29:28,960 --> 00:29:30,960
composition analysis is a great place to

953
00:29:30,960 --> 00:29:33,200
start

954
00:29:33,840 --> 00:29:37,039
so as an example i packed together some

955
00:29:37,039 --> 00:29:38,399
like really

956
00:29:38,399 --> 00:29:40,399
lame scripts that would attempt to do

957
00:29:40,399 --> 00:29:41,840
this i don't think it will ever see the

958
00:29:41,840 --> 00:29:42,880
light of day because it's

959
00:29:42,880 --> 00:29:44,320
it's rough around the edges and

960
00:29:44,320 --> 00:29:46,080
sometimes wrong um

961
00:29:46,080 --> 00:29:48,720
but you know it gives you an example so

962
00:29:48,720 --> 00:29:50,080
here we can see a list of libraries we

963
00:29:50,080 --> 00:29:51,600
saw inside an app

964
00:29:51,600 --> 00:29:53,279
a bunch of version information we can

965
00:29:53,279 --> 00:29:54,640
see that there's available updates in

966
00:29:54,640 --> 00:29:56,399
some cases and we can see the licensing

967
00:29:56,399 --> 00:29:57,679
information

968
00:29:57,679 --> 00:29:59,440
we have multiple version fields because

969
00:29:59,440 --> 00:30:00,880
on ios you have

970
00:30:00,880 --> 00:30:03,520
a short version and a main version so we

971
00:30:03,520 --> 00:30:05,279
have to do a bit of hackery to

972
00:30:05,279 --> 00:30:06,960
figure out which version is likely to be

973
00:30:06,960 --> 00:30:08,640
correct um

974
00:30:08,640 --> 00:30:10,559
often you'll find that some components

975
00:30:10,559 --> 00:30:12,080
use the version field and some use the

976
00:30:12,080 --> 00:30:12,960
short version

977
00:30:12,960 --> 00:30:14,480
in this case all of the components were

978
00:30:14,480 --> 00:30:16,080
consistent but i can tell you for a fact

979
00:30:16,080 --> 00:30:17,360
that's not always the case

980
00:30:17,360 --> 00:30:19,520
so you do need a bit of logic to make

981
00:30:19,520 --> 00:30:20,399
some assumptions

982
00:30:20,399 --> 00:30:22,399
which is why it's not really necessarily

983
00:30:22,399 --> 00:30:23,600
always reliable

984
00:30:23,600 --> 00:30:25,919
um but for example at now secure we're

985
00:30:25,919 --> 00:30:27,279
working on this problem and

986
00:30:27,279 --> 00:30:28,799
if you combine static and dynamic

987
00:30:28,799 --> 00:30:30,720
analysis uh you can get like a really

988
00:30:30,720 --> 00:30:31,120
rich

989
00:30:31,120 --> 00:30:34,719
sense of what's inside the software

990
00:30:35,520 --> 00:30:38,080
so lastly i just want to throw out some

991
00:30:38,080 --> 00:30:38,559
links

992
00:30:38,559 --> 00:30:40,960
uh to some more information kate stewart

993
00:30:40,960 --> 00:30:42,559
did a fantastic presentation just

994
00:30:42,559 --> 00:30:43,200
recently

995
00:30:43,200 --> 00:30:45,120
um as part of the linux foundation i

996
00:30:45,120 --> 00:30:46,480
borrowed a few

997
00:30:46,480 --> 00:30:49,360
concepts on the xkcd from her talk

998
00:30:49,360 --> 00:30:50,559
definitely go check it out she's been

999
00:30:50,559 --> 00:30:51,440
doing a lot of work

1000
00:30:51,440 --> 00:30:53,440
in the software transparency space and

1001
00:30:53,440 --> 00:30:54,880
for spdx

1002
00:30:54,880 --> 00:30:57,840
um a huge set of resources there aladine

1003
00:30:57,840 --> 00:31:00,000
from osterlabs also has a great talk on

1004
00:31:00,000 --> 00:31:00,880
mobile app

1005
00:31:00,880 --> 00:31:02,080
dependencies and all of the

1006
00:31:02,080 --> 00:31:03,519
complications that come with it and

1007
00:31:03,519 --> 00:31:05,600
which i also found really useful so

1008
00:31:05,600 --> 00:31:07,600
uh go check that one out as well and

1009
00:31:07,600 --> 00:31:08,720
then lastly

1010
00:31:08,720 --> 00:31:11,519
um orwas dependency track as a appliance

1011
00:31:11,519 --> 00:31:13,279
which aggregates cbe information

1012
00:31:13,279 --> 00:31:15,440
gives you like an api for for tracking

1013
00:31:15,440 --> 00:31:17,039
your bill of materials and querying if

1014
00:31:17,039 --> 00:31:18,320
there's any issues

1015
00:31:18,320 --> 00:31:19,600
it's come a long way even in the last

1016
00:31:19,600 --> 00:31:21,600
few years and i think it has a lot of

1017
00:31:21,600 --> 00:31:22,559
potential

1018
00:31:22,559 --> 00:31:24,399
and so i definitely would suggest go and

1019
00:31:24,399 --> 00:31:25,840
have a look at that as well

1020
00:31:25,840 --> 00:31:28,159
um and yeah with that i will take any

1021
00:31:28,159 --> 00:31:31,200
extra questions

