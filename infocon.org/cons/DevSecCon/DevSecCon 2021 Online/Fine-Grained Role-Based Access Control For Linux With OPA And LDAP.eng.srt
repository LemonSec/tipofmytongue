1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,480 --> 00:00:13,599
hello

3
00:00:13,599 --> 00:00:15,920
this talk is called fine grain roll base

4
00:00:15,920 --> 00:00:17,680
access control for linux

5
00:00:17,680 --> 00:00:20,960
using opa and active directory

6
00:00:20,960 --> 00:00:22,640
before we start i'd like to extend a

7
00:00:22,640 --> 00:00:24,000
huge thank you to sam

8
00:00:24,000 --> 00:00:26,240
and all the other devsecond organizers

9
00:00:26,240 --> 00:00:28,000
for giving us the opportunity to share

10
00:00:28,000 --> 00:00:31,760
our story with you all

11
00:00:31,760 --> 00:00:34,079
let's get started with introductions i'm

12
00:00:34,079 --> 00:00:35,360
daniel papasku

13
00:00:35,360 --> 00:00:36,960
i've been at yelp for five and a half

14
00:00:36,960 --> 00:00:38,640
years and i'm the group tech lead for

15
00:00:38,640 --> 00:00:40,559
the security organization

16
00:00:40,559 --> 00:00:43,600
in my spare time i enjoy yoga flow arts

17
00:00:43,600 --> 00:00:47,760
and solving iam policy puzzles

18
00:00:48,160 --> 00:00:50,719
hello i'm charlie chittin and i've been

19
00:00:50,719 --> 00:00:52,559
at yap for almost two years

20
00:00:52,559 --> 00:00:55,280
and i've been an infrastructure security

21
00:00:55,280 --> 00:00:56,000
engineer

22
00:00:56,000 --> 00:00:57,760
and recently i became a technician in

23
00:00:57,760 --> 00:00:59,840
the identity and access management team

24
00:00:59,840 --> 00:01:00,960
at yelp

25
00:01:00,960 --> 00:01:03,680
i do enjoy some quality beach time and

26
00:01:03,680 --> 00:01:04,799
long drives without

27
00:01:04,799 --> 00:01:07,199
planning

28
00:01:08,000 --> 00:01:10,000
now we work at yelp and if you're not

29
00:01:10,000 --> 00:01:11,200
familiar with yelp

30
00:01:11,200 --> 00:01:13,119
it's a company that connects people with

31
00:01:13,119 --> 00:01:16,320
great local businesses

32
00:01:16,640 --> 00:01:18,880
as of the end of 2020 yelpers have

33
00:01:18,880 --> 00:01:21,840
contributed 224 million reviews on our

34
00:01:21,840 --> 00:01:23,280
platform

35
00:01:23,280 --> 00:01:25,200
there are approximately 31 million

36
00:01:25,200 --> 00:01:26,560
unique devices

37
00:01:26,560 --> 00:01:29,920
that access yelp every month on average

38
00:01:29,920 --> 00:01:31,439
and approximately half a million

39
00:01:31,439 --> 00:01:33,520
business locations spend money on yelp

40
00:01:33,520 --> 00:01:35,600
ads every month on average to promote

41
00:01:35,600 --> 00:01:38,320
their businesses

42
00:01:38,479 --> 00:01:40,079
as you can imagine it takes a lot of

43
00:01:40,079 --> 00:01:41,840
infrastructure under the hood to support

44
00:01:41,840 --> 00:01:44,479
an application with that type of scale

45
00:01:44,479 --> 00:01:45,920
today we have more than 900

46
00:01:45,920 --> 00:01:47,600
geographically distributed software

47
00:01:47,600 --> 00:01:49,040
engineers who design

48
00:01:49,040 --> 00:01:51,040
build test and maintain the code

49
00:01:51,040 --> 00:01:53,600
infrastructure that powers our product

50
00:01:53,600 --> 00:01:55,520
and there are upwards of 5 000 linux

51
00:01:55,520 --> 00:01:57,439
servers to support these development

52
00:01:57,439 --> 00:01:58,079
testing

53
00:01:58,079 --> 00:01:59,680
production and various other types of

54
00:01:59,680 --> 00:02:02,240
environments

55
00:02:03,280 --> 00:02:05,520
at yelp we've always used puppet code

56
00:02:05,520 --> 00:02:07,200
for configuration management of these

57
00:02:07,200 --> 00:02:09,520
hosts in our infrastructure

58
00:02:09,520 --> 00:02:11,280
historically the puppet code not only

59
00:02:11,280 --> 00:02:13,440
managed configuration

60
00:02:13,440 --> 00:02:15,120
such as which software gets installed

61
00:02:15,120 --> 00:02:16,879
what services are running and stuff like

62
00:02:16,879 --> 00:02:17,360
that

63
00:02:17,360 --> 00:02:19,040
but it was also used as the primary

64
00:02:19,040 --> 00:02:20,720
means of defining access control

65
00:02:20,720 --> 00:02:21,520
mechanisms

66
00:02:21,520 --> 00:02:24,560
for these linux servers believe it or

67
00:02:24,560 --> 00:02:26,400
not the user management component of our

68
00:02:26,400 --> 00:02:28,160
puppet infrastructure was introduced

69
00:02:28,160 --> 00:02:30,879
over seven years ago

70
00:02:30,879 --> 00:02:32,720
wow that's a really long time ago i

71
00:02:32,720 --> 00:02:34,160
think the design and implementation

72
00:02:34,160 --> 00:02:35,840
decisions probably made a lot of sense

73
00:02:35,840 --> 00:02:36,640
at the time

74
00:02:36,640 --> 00:02:39,040
but over time as the code base server

75
00:02:39,040 --> 00:02:39,760
count

76
00:02:39,760 --> 00:02:42,480
engineer engineering account and the

77
00:02:42,480 --> 00:02:43,519
company grew

78
00:02:43,519 --> 00:02:44,959
we found ourselves dealing with a lot of

79
00:02:44,959 --> 00:02:46,879
shortcomings that frankly we felt had to

80
00:02:46,879 --> 00:02:50,160
be addressed

81
00:02:50,160 --> 00:02:52,319
so let's talk about the problems in the

82
00:02:52,319 --> 00:02:54,400
original authorization infrastructure we

83
00:02:54,400 --> 00:02:56,480
basically had three main categories of

84
00:02:56,480 --> 00:02:57,360
users

85
00:02:57,360 --> 00:03:00,879
engineers ops deputies and admins

86
00:03:00,879 --> 00:03:04,319
engineers had ssh to many hosts ops

87
00:03:04,319 --> 00:03:05,120
deputies had

88
00:03:05,120 --> 00:03:08,400
ssh and pseudo access to most hosts

89
00:03:08,400 --> 00:03:10,640
and admins were given ssh in pseudo on

90
00:03:10,640 --> 00:03:12,879
every single host across the environment

91
00:03:12,879 --> 00:03:15,440
the idea was to have one to two deputies

92
00:03:15,440 --> 00:03:16,560
on each team

93
00:03:16,560 --> 00:03:19,200
that were capable of doing ops type

94
00:03:19,200 --> 00:03:20,879
things for their team members such as

95
00:03:20,879 --> 00:03:22,400
restarting services

96
00:03:22,400 --> 00:03:23,840
deleting files and other types of

97
00:03:23,840 --> 00:03:25,760
maintenance tasks

98
00:03:25,760 --> 00:03:29,120
over time we got in a situation where

99
00:03:29,120 --> 00:03:32,000
more than 25 percent of the users

100
00:03:32,000 --> 00:03:34,319
had one of these two heightened sets of

101
00:03:34,319 --> 00:03:36,640
privileges

102
00:03:36,640 --> 00:03:38,480
and the puppet code was implemented in a

103
00:03:38,480 --> 00:03:39,840
way that any

104
00:03:39,840 --> 00:03:42,239
ops deputy or admin could easily promote

105
00:03:42,239 --> 00:03:44,239
another user

106
00:03:44,239 --> 00:03:46,080
to themselves become an op step viewer

107
00:03:46,080 --> 00:03:48,239
admin via a simple yaml change in the

108
00:03:48,239 --> 00:03:49,519
puppet repository

109
00:03:49,519 --> 00:03:52,640
this was super convenient the puppet

110
00:03:52,640 --> 00:03:54,879
infrastructure also provided a mechanism

111
00:03:54,879 --> 00:03:55,439
to add

112
00:03:55,439 --> 00:03:58,000
additional categories of user but it

113
00:03:58,000 --> 00:03:59,200
required making

114
00:03:59,200 --> 00:04:02,159
it required making code changes and the

115
00:04:02,159 --> 00:04:04,400
code base was quite complex

116
00:04:04,400 --> 00:04:06,640
full of traps and people often

117
00:04:06,640 --> 00:04:09,680
misunderstood how things actually worked

118
00:04:09,680 --> 00:04:11,519
this could lead to frustration for those

119
00:04:11,519 --> 00:04:13,120
engineers who understandably

120
00:04:13,120 --> 00:04:15,439
don't really want to debug puppet code

121
00:04:15,439 --> 00:04:17,759
to figure out why they don't have access

122
00:04:17,759 --> 00:04:20,320
to the servers they need access to and

123
00:04:20,320 --> 00:04:21,759
really just they just want to get the

124
00:04:21,759 --> 00:04:23,199
access so that they can perform their

125
00:04:23,199 --> 00:04:24,960
immediate duties

126
00:04:24,960 --> 00:04:26,880
as a result what often happened is that

127
00:04:26,880 --> 00:04:28,479
the path of least resistance takes

128
00:04:28,479 --> 00:04:29,600
precedence

129
00:04:29,600 --> 00:04:32,639
which leads to infamous access requests

130
00:04:32,639 --> 00:04:37,040
like this one in which a user

131
00:04:37,040 --> 00:04:39,520
needed to perform a simple debugging

132
00:04:39,520 --> 00:04:40,080
task

133
00:04:40,080 --> 00:04:42,160
on a single host class that their team

134
00:04:42,160 --> 00:04:44,320
is responsible for

135
00:04:44,320 --> 00:04:47,120
and they requested admin permissions for

136
00:04:47,120 --> 00:04:49,360
this

137
00:04:49,360 --> 00:04:51,600
and it was approved by their management

138
00:04:51,600 --> 00:04:53,120
chain

139
00:04:53,120 --> 00:04:56,000
and as a result they were granted pseudo

140
00:04:56,000 --> 00:04:56,479
across

141
00:04:56,479 --> 00:04:58,560
thousands of different hosts including

142
00:04:58,560 --> 00:05:00,560
potentially mission critical ones

143
00:05:00,560 --> 00:05:02,479
with sensitive data that they didn't

144
00:05:02,479 --> 00:05:05,520
have any business need to access

145
00:05:05,520 --> 00:05:07,600
i think this specific access request was

146
00:05:07,600 --> 00:05:09,600
the straw that broke the camel's back

147
00:05:09,600 --> 00:05:11,600
which ultimately led us to prioritizing

148
00:05:11,600 --> 00:05:12,800
the project that we're going to explain

149
00:05:12,800 --> 00:05:13,360
to you

150
00:05:13,360 --> 00:05:16,479
to improve this system

151
00:05:18,639 --> 00:05:20,080
there were more issues on the

152
00:05:20,080 --> 00:05:22,080
operational side

153
00:05:22,080 --> 00:05:24,000
permission changes took a long time to

154
00:05:24,000 --> 00:05:25,600
fully propagate to all hosts

155
00:05:25,600 --> 00:05:28,160
more than two hours in some cases and

156
00:05:28,160 --> 00:05:29,919
every time we ran puppet on a host the

157
00:05:29,919 --> 00:05:32,320
user management component

158
00:05:32,320 --> 00:05:34,240
was responsible for more than 30 percent

159
00:05:34,240 --> 00:05:36,160
of the runtime

160
00:05:36,160 --> 00:05:38,400
due to code complexities if it was

161
00:05:38,400 --> 00:05:40,240
difficult to understand the full scope

162
00:05:40,240 --> 00:05:42,400
of impact of a permission change or even

163
00:05:42,400 --> 00:05:44,160
know if they would work correctly

164
00:05:44,160 --> 00:05:46,080
and if someone had an access issue it

165
00:05:46,080 --> 00:05:48,000
was really difficult for us to grok why

166
00:05:48,000 --> 00:05:50,320
they could or could not access a host

167
00:05:50,320 --> 00:05:52,560
basically all we had was sshd logs

168
00:05:52,560 --> 00:05:54,720
public key accepted or public key denied

169
00:05:54,720 --> 00:05:56,800
and it wasn't very clear

170
00:05:56,800 --> 00:06:00,400
why that would have happened

171
00:06:01,280 --> 00:06:02,560
so now that you understand some of the

172
00:06:02,560 --> 00:06:04,400
pain points in the original system i'll

173
00:06:04,400 --> 00:06:05,919
hand it over to charlie to give an

174
00:06:05,919 --> 00:06:07,440
overview and a deep dive

175
00:06:07,440 --> 00:06:08,960
on the new authorization architecture

176
00:06:08,960 --> 00:06:11,120
that we built

177
00:06:11,120 --> 00:06:12,400
thank you daniel for the great

178
00:06:12,400 --> 00:06:15,039
introduction and now i'm going to take

179
00:06:15,039 --> 00:06:17,520
over this control of the screen

180
00:06:17,520 --> 00:06:21,440
let's see if i can do this

181
00:06:21,440 --> 00:06:25,280
yeah so as daniel mentioned earlier

182
00:06:25,280 --> 00:06:27,039
this is how the overall architecture

183
00:06:27,039 --> 00:06:28,639
looked like it was

184
00:06:28,639 --> 00:06:30,479
all authorization files were managed by

185
00:06:30,479 --> 00:06:31,840
a single place called

186
00:06:31,840 --> 00:06:34,160
puppet and it was monolith heavy and

187
00:06:34,160 --> 00:06:35,120
error prone

188
00:06:35,120 --> 00:06:37,199
and even sometimes the broken puppet

189
00:06:37,199 --> 00:06:38,479
runs for preventing to make

190
00:06:38,479 --> 00:06:40,400
authorization decisions

191
00:06:40,400 --> 00:06:42,960
so once we know the shortcomings of our

192
00:06:42,960 --> 00:06:43,680
system

193
00:06:43,680 --> 00:06:46,080
the natural question was what is the

194
00:06:46,080 --> 00:06:47,360
design goals are

195
00:06:47,360 --> 00:06:51,280
of the new architecture is going to be

196
00:06:51,759 --> 00:06:54,560
so the simple answer to this question

197
00:06:54,560 --> 00:06:55,599
was that

198
00:06:55,599 --> 00:06:57,759
we want a system that we can ensure the

199
00:06:57,759 --> 00:06:59,440
principle of least privilege in our

200
00:06:59,440 --> 00:07:00,960
linux infrastructure

201
00:07:00,960 --> 00:07:02,880
and we want to be able to do that for a

202
00:07:02,880 --> 00:07:04,639
long time in a dynamic

203
00:07:04,639 --> 00:07:07,759
and a growing environment so

204
00:07:07,759 --> 00:07:09,680
in this context if we break down our

205
00:07:09,680 --> 00:07:12,639
design goals into actionable items

206
00:07:12,639 --> 00:07:14,960
we wanted to implement a scalable

207
00:07:14,960 --> 00:07:16,000
reliable and

208
00:07:16,000 --> 00:07:18,479
long-term authorization infrastructure

209
00:07:18,479 --> 00:07:19,919
we wanted to remove

210
00:07:19,919 --> 00:07:21,840
all authorization and user management

211
00:07:21,840 --> 00:07:22,960
from puppet

212
00:07:22,960 --> 00:07:24,800
and we wanted to control and ordered

213
00:07:24,800 --> 00:07:26,960
authorization changes

214
00:07:26,960 --> 00:07:28,960
as well as we wanted to ensure fast

215
00:07:28,960 --> 00:07:30,960
policy changes but that wasn't enough

216
00:07:30,960 --> 00:07:32,800
of course when we are ensuring the fast

217
00:07:32,800 --> 00:07:34,639
falls changes we wanted to

218
00:07:34,639 --> 00:07:37,360
be able to test those changes to not to

219
00:07:37,360 --> 00:07:38,400
disturb

220
00:07:38,400 --> 00:07:42,319
a thousands of linux infrastructure

221
00:07:42,319 --> 00:07:45,120
so with these guidelines we were able to

222
00:07:45,120 --> 00:07:46,639
come up with

223
00:07:46,639 --> 00:07:50,000
this so this is the

224
00:07:50,000 --> 00:07:52,160
new architecture that we created

225
00:07:52,160 --> 00:07:54,160
individual components for enforcing

226
00:07:54,160 --> 00:07:55,840
authorization

227
00:07:55,840 --> 00:07:58,080
these individual components collaborate

228
00:07:58,080 --> 00:07:59,840
together in order for users to be

229
00:07:59,840 --> 00:08:01,280
authorized in each

230
00:08:01,280 --> 00:08:04,720
client hosts in this way we totally

231
00:08:04,720 --> 00:08:06,479
decoupled our

232
00:08:06,479 --> 00:08:09,520
authorization architecture from puppet

233
00:08:09,520 --> 00:08:12,400
and we put all these things into the

234
00:08:12,400 --> 00:08:14,160
individual components

235
00:08:14,160 --> 00:08:16,080
so i am going to go over each of these

236
00:08:16,080 --> 00:08:18,080
components one by one and describe how

237
00:08:18,080 --> 00:08:19,599
they collaborate together

238
00:08:19,599 --> 00:08:21,840
but before that i would like to show

239
00:08:21,840 --> 00:08:22,800
another

240
00:08:22,800 --> 00:08:24,800
image that describes the overall

241
00:08:24,800 --> 00:08:26,240
architecture of the system

242
00:08:26,240 --> 00:08:28,080
to understand what kind of technologies

243
00:08:28,080 --> 00:08:31,599
that they use in the background

244
00:08:32,159 --> 00:08:35,039
so this is uh overall of the system that

245
00:08:35,039 --> 00:08:35,839
if i

246
00:08:35,839 --> 00:08:40,080
explain from bottom up basically we use

247
00:08:40,080 --> 00:08:42,320
access restricted git repository to

248
00:08:42,320 --> 00:08:44,320
store authorization policies and group

249
00:08:44,320 --> 00:08:45,440
definitions

250
00:08:45,440 --> 00:08:48,000
and we use active directory to store

251
00:08:48,000 --> 00:08:49,360
group memberships

252
00:08:49,360 --> 00:08:52,160
and we put all this information to an s3

253
00:08:52,160 --> 00:08:52,720
bucket

254
00:08:52,720 --> 00:08:55,920
and send it to the client hosts in

255
00:08:55,920 --> 00:08:58,560
each client host we run open policy

256
00:08:58,560 --> 00:09:00,240
agent or oppa

257
00:09:00,240 --> 00:09:04,160
to enforce the authorization decisions

258
00:09:04,160 --> 00:09:06,800
oppa is an open source policy agent used

259
00:09:06,800 --> 00:09:08,640
to enforce fine-grained access control

260
00:09:08,640 --> 00:09:09,760
policies

261
00:09:09,760 --> 00:09:11,600
and oppo can be used for multiple

262
00:09:11,600 --> 00:09:13,360
environments like kubernetes

263
00:09:13,360 --> 00:09:15,839
api authorization ci cd pipelines or

264
00:09:15,839 --> 00:09:16,720
service mesh

265
00:09:16,720 --> 00:09:18,880
and is becoming more and more popular

266
00:09:18,880 --> 00:09:20,640
every day in the industry

267
00:09:20,640 --> 00:09:23,360
so we use oppa in uh for solving our

268
00:09:23,360 --> 00:09:25,200
linux authorization problems

269
00:09:25,200 --> 00:09:27,760
and uh once the oppa enforces

270
00:09:27,760 --> 00:09:28,800
authorization

271
00:09:28,800 --> 00:09:31,839
it logs everything into the span

272
00:09:31,839 --> 00:09:33,839
so let's see now let's get into each of

273
00:09:33,839 --> 00:09:37,839
this component and how do they work

274
00:09:41,600 --> 00:09:43,200
first thing that i would like to talk

275
00:09:43,200 --> 00:09:45,680
about is the first component is in the

276
00:09:45,680 --> 00:09:46,959
client side

277
00:09:46,959 --> 00:09:49,680
so puppet compiles and provides a list

278
00:09:49,680 --> 00:09:52,000
of information available to each host

279
00:09:52,000 --> 00:09:55,040
called hosfex these files include

280
00:09:55,040 --> 00:09:55,519
different

281
00:09:55,519 --> 00:09:57,680
environment variables and its associated

282
00:09:57,680 --> 00:10:00,240
values that can be unique to hosts

283
00:10:00,240 --> 00:10:02,320
for example this can be like easy to

284
00:10:02,320 --> 00:10:03,839
instance id kernel id

285
00:10:03,839 --> 00:10:07,040
anything unique or uh like shared among

286
00:10:07,040 --> 00:10:07,760
the hosts

287
00:10:07,760 --> 00:10:10,720
in this example each host can have like

288
00:10:10,720 --> 00:10:12,480
a role that describes what the host is

289
00:10:12,480 --> 00:10:13,839
doing dev box

290
00:10:13,839 --> 00:10:16,399
my sequel which runtime environment or

291
00:10:16,399 --> 00:10:18,399
ecosystem is this host is running

292
00:10:18,399 --> 00:10:20,560
or what is the owner of the host we can

293
00:10:20,560 --> 00:10:22,240
put all this information

294
00:10:22,240 --> 00:10:25,279
into the hospice and it made available

295
00:10:25,279 --> 00:10:26,640
to each host

296
00:10:26,640 --> 00:10:28,640
so oppa uses this information make

297
00:10:28,640 --> 00:10:30,480
authorization decisions in the

298
00:10:30,480 --> 00:10:33,680
uh each house the next component that i

299
00:10:33,680 --> 00:10:34,720
like to talk about

300
00:10:34,720 --> 00:10:38,959
is that oppa policies and capabilities

301
00:10:38,959 --> 00:10:42,079
so we store authorization policies and

302
00:10:42,079 --> 00:10:43,760
authorization capabilities in

303
00:10:43,760 --> 00:10:46,880
access restricted git repository we

304
00:10:46,880 --> 00:10:47,600
created

305
00:10:47,600 --> 00:10:48,880
something called authorization

306
00:10:48,880 --> 00:10:51,760
capabilities as set of yemen files

307
00:10:51,760 --> 00:10:54,959
and each capability define a set of ssh

308
00:10:54,959 --> 00:10:56,959
and pseudo actions that users can

309
00:10:56,959 --> 00:11:00,000
perform that we specify and put it into

310
00:11:00,000 --> 00:11:02,959
the access restricted git repository and

311
00:11:02,959 --> 00:11:05,120
each capability has a corresponding

312
00:11:05,120 --> 00:11:07,279
active directory group

313
00:11:07,279 --> 00:11:09,760
so each user can be a member of one or

314
00:11:09,760 --> 00:11:12,560
more groups in active directory

315
00:11:12,560 --> 00:11:14,560
in this way we can enforce a strict

316
00:11:14,560 --> 00:11:15,839
paper trail policy

317
00:11:15,839 --> 00:11:18,000
and we can distribute these groups based

318
00:11:18,000 --> 00:11:19,519
on the needs to each user

319
00:11:19,519 --> 00:11:21,920
like that each user can have the group

320
00:11:21,920 --> 00:11:23,600
whatever they need and we can easily

321
00:11:23,600 --> 00:11:24,240
specify

322
00:11:24,240 --> 00:11:27,600
in the access restricted git repository

323
00:11:27,600 --> 00:11:29,040
so like that we can create least

324
00:11:29,040 --> 00:11:30,880
privileged capabilities and

325
00:11:30,880 --> 00:11:34,000
enroll the users these groups i'm going

326
00:11:34,000 --> 00:11:35,839
to go over these capabilities more

327
00:11:35,839 --> 00:11:36,720
detail but

328
00:11:36,720 --> 00:11:40,839
first let's take a look at the oppa

329
00:11:40,839 --> 00:11:43,839
policies

330
00:11:43,839 --> 00:11:46,959
so oppa provides a policy specification

331
00:11:46,959 --> 00:11:48,800
a language called rego it's a little bit

332
00:11:48,800 --> 00:11:50,079
complex but uh

333
00:11:50,079 --> 00:11:52,560
after spending a few hours and you can

334
00:11:52,560 --> 00:11:54,000
get get used to it

335
00:11:54,000 --> 00:11:55,920
which we can write fine-grained access

336
00:11:55,920 --> 00:11:57,279
control policies with

337
00:11:57,279 --> 00:12:00,560
it and in fact we wrote two policies

338
00:12:00,560 --> 00:12:02,880
for pseudo and ssh authorization using

339
00:12:02,880 --> 00:12:03,680
regular

340
00:12:03,680 --> 00:12:06,160
and these policies basically read the

341
00:12:06,160 --> 00:12:07,519
hospice data

342
00:12:07,519 --> 00:12:10,399
capabilities map data at users group

343
00:12:10,399 --> 00:12:12,160
basically all these metadata

344
00:12:12,160 --> 00:12:15,279
and based on the user input pseudo rssh

345
00:12:15,279 --> 00:12:18,320
make an authorization decision so in

346
00:12:18,320 --> 00:12:20,560
this way the end users never had to look

347
00:12:20,560 --> 00:12:22,880
into the complex authorization policies

348
00:12:22,880 --> 00:12:24,800
they only need to modify the metadata

349
00:12:24,800 --> 00:12:28,079
like authorization capabilities

350
00:12:28,079 --> 00:12:31,360
now let's see an example capability and

351
00:12:31,360 --> 00:12:32,800
how we can

352
00:12:32,800 --> 00:12:35,600
specify fine-grained access control

353
00:12:35,600 --> 00:12:39,839
through the metadata

354
00:12:42,800 --> 00:12:45,519
so here is an example capability let's

355
00:12:45,519 --> 00:12:47,680
call it opel linux dev basic that gives

356
00:12:47,680 --> 00:12:49,839
a basic access to some

357
00:12:49,839 --> 00:12:53,920
dev and test boxes in our environment

358
00:12:53,920 --> 00:12:56,959
so each capability has set off

359
00:12:56,959 --> 00:12:59,920
a list of sub-capabilities and it has to

360
00:12:59,920 --> 00:13:02,079
have at least one or more so it can have

361
00:13:02,079 --> 00:13:03,040
one but

362
00:13:03,040 --> 00:13:04,399
it can have more than one

363
00:13:04,399 --> 00:13:07,680
sub-capabilities and each sub-capability

364
00:13:07,680 --> 00:13:10,800
matches set of hospitals that

365
00:13:10,800 --> 00:13:13,360
that we can specify arbitrary hospitals

366
00:13:13,360 --> 00:13:14,519
in each

367
00:13:14,519 --> 00:13:18,720
sub-capabilities and each sub-capability

368
00:13:18,720 --> 00:13:22,480
grant ssh or

369
00:13:22,480 --> 00:13:26,720
maybe pseudo in the um

370
00:13:26,720 --> 00:13:30,240
in our ecosystem basically if you look

371
00:13:30,240 --> 00:13:31,040
at the

372
00:13:31,040 --> 00:13:33,920
this example this first sub capability

373
00:13:33,920 --> 00:13:35,120
allows ssh

374
00:13:35,120 --> 00:13:38,240
into unprivileged devboxes the

375
00:13:38,240 --> 00:13:41,440
second sub-capability allows ssh and

376
00:13:41,440 --> 00:13:44,639
sudo in test boxes that are dev

377
00:13:44,639 --> 00:13:47,839
or stage ecosystems so this

378
00:13:47,839 --> 00:13:49,920
configuration would allow us to

379
00:13:49,920 --> 00:13:52,560
create very fine-grained capabilities

380
00:13:52,560 --> 00:13:53,360
and

381
00:13:53,360 --> 00:13:55,440
least privileged combined access control

382
00:13:55,440 --> 00:13:56,959
configurations based on the

383
00:13:56,959 --> 00:14:00,000
our user's needs

384
00:14:01,360 --> 00:14:03,680
the next component that i'd like to talk

385
00:14:03,680 --> 00:14:05,040
about is that the

386
00:14:05,040 --> 00:14:08,320
oppa policy manager so we we

387
00:14:08,320 --> 00:14:11,920
wrote some sort of like a microservice

388
00:14:11,920 --> 00:14:13,680
that continues to pull all of the

389
00:14:13,680 --> 00:14:15,279
authorization policies

390
00:14:15,279 --> 00:14:17,600
authorization capabilities and active

391
00:14:17,600 --> 00:14:19,279
director data

392
00:14:19,279 --> 00:14:20,639
the users group from the active

393
00:14:20,639 --> 00:14:23,360
directory and perform some set of

394
00:14:23,360 --> 00:14:24,959
like incentive checks because we don't

395
00:14:24,959 --> 00:14:27,040
want to push any bad policies or bad

396
00:14:27,040 --> 00:14:27,839
data

397
00:14:27,839 --> 00:14:31,680
to client hosts and combines them

398
00:14:31,680 --> 00:14:34,079
into a bundle that oppa can read in the

399
00:14:34,079 --> 00:14:35,279
client costs

400
00:14:35,279 --> 00:14:39,040
and push this data to s3 button

401
00:14:39,040 --> 00:14:41,120
so up until this point we have been

402
00:14:41,120 --> 00:14:42,320
talking about like

403
00:14:42,320 --> 00:14:44,720
all of the metadata that require for

404
00:14:44,720 --> 00:14:46,560
making these authorization decisions

405
00:14:46,560 --> 00:14:48,959
and made available through the s3 bucket

406
00:14:48,959 --> 00:14:50,160
through the clients

407
00:14:50,160 --> 00:14:51,920
now let's see where actually the

408
00:14:51,920 --> 00:14:54,880
authorization enforcement is happens

409
00:14:54,880 --> 00:14:59,040
in the client hosts

410
00:14:59,040 --> 00:15:02,720
so we run oppa instance or open policy

411
00:15:02,720 --> 00:15:03,279
instance

412
00:15:03,279 --> 00:15:06,320
uh running each host basically it reads

413
00:15:06,320 --> 00:15:06,639
the

414
00:15:06,639 --> 00:15:09,199
host facts and open policies

415
00:15:09,199 --> 00:15:11,279
capabilities and users group membership

416
00:15:11,279 --> 00:15:12,240
from the

417
00:15:12,240 --> 00:15:16,320
s3 bucket and it talks with the

418
00:15:16,320 --> 00:15:19,040
linux spam module or pluggable

419
00:15:19,040 --> 00:15:20,399
authentication module

420
00:15:20,399 --> 00:15:23,440
and re gets the ssh and pseudo request

421
00:15:23,440 --> 00:15:25,839
and based on all these data make the

422
00:15:25,839 --> 00:15:27,360
authorization enforcement

423
00:15:27,360 --> 00:15:30,480
and sense the result back to the pad

424
00:15:30,480 --> 00:15:32,079
and like that we can enforce the

425
00:15:32,079 --> 00:15:33,600
authorization

426
00:15:33,600 --> 00:15:36,480
once all these authorization happens

427
00:15:36,480 --> 00:15:36,880
from

428
00:15:36,880 --> 00:15:40,880
each iteration we log like a valve

429
00:15:40,880 --> 00:15:42,959
valve formatted and standardized locks

430
00:15:42,959 --> 00:15:44,959
into the splunk

431
00:15:44,959 --> 00:15:46,880
the interesting configuration that i'd

432
00:15:46,880 --> 00:15:48,560
like to talk about is that our

433
00:15:48,560 --> 00:15:51,920
pam configuration so that i thought it

434
00:15:51,920 --> 00:15:53,199
would be interesting to discuss

435
00:15:53,199 --> 00:15:56,480
in this talk so

436
00:15:56,480 --> 00:15:58,959
pam or pluggable authentication module

437
00:15:58,959 --> 00:16:01,120
is a mechanism to integrate multiple

438
00:16:01,120 --> 00:16:01,680
low-level

439
00:16:01,680 --> 00:16:03,440
authentication schemes into high-level

440
00:16:03,440 --> 00:16:06,320
apis so if we speak basically here

441
00:16:06,320 --> 00:16:09,600
that so pam provides us a framework to

442
00:16:09,600 --> 00:16:11,360
implement different mechanisms

443
00:16:11,360 --> 00:16:14,880
to aim for pseudo and ssh authorization

444
00:16:14,880 --> 00:16:17,759
so but pem is written in c and it's a

445
00:16:17,759 --> 00:16:18,880
little complicated

446
00:16:18,880 --> 00:16:21,120
and we could write a pam plugin in c

447
00:16:21,120 --> 00:16:22,959
that talks directly to

448
00:16:22,959 --> 00:16:27,279
oppa and uh but this would be

449
00:16:27,279 --> 00:16:29,040
a special writing c module and

450
00:16:29,040 --> 00:16:30,720
distributing to

451
00:16:30,720 --> 00:16:32,560
thousands of hosts would be very

452
00:16:32,560 --> 00:16:34,639
challenging especially in a heavily

453
00:16:34,639 --> 00:16:36,240
and it will be dependent on the

454
00:16:36,240 --> 00:16:38,160
operating system and c version of the

455
00:16:38,160 --> 00:16:38,880
host

456
00:16:38,880 --> 00:16:40,399
and it would be very challenging to

457
00:16:40,399 --> 00:16:42,560
maintain in infrastructure having

458
00:16:42,560 --> 00:16:45,360
thousands of machines especially if you

459
00:16:45,360 --> 00:16:46,160
think of like

460
00:16:46,160 --> 00:16:47,519
if you want to support multiple

461
00:16:47,519 --> 00:16:49,920
operating systems and multiple versions

462
00:16:49,920 --> 00:16:51,600
of these operating systems and c

463
00:16:51,600 --> 00:16:52,560
versions

464
00:16:52,560 --> 00:16:55,360
uh it will it will it might not be like

465
00:16:55,360 --> 00:16:57,839
forward compatible

466
00:16:57,839 --> 00:17:00,720
so instead of writing our own module the

467
00:17:00,720 --> 00:17:01,360
users

468
00:17:01,360 --> 00:17:03,680
you use the existing pam exec module

469
00:17:03,680 --> 00:17:05,039
that allows us to call

470
00:17:05,039 --> 00:17:08,000
any shell script and we write a simple

471
00:17:08,000 --> 00:17:09,520
open wrapper script

472
00:17:09,520 --> 00:17:11,359
that curves the open endpoint and

473
00:17:11,359 --> 00:17:12,959
returns two rand phones

474
00:17:12,959 --> 00:17:16,160
and basically the pi module just

475
00:17:16,160 --> 00:17:19,119
executes that shot secret in this way we

476
00:17:19,119 --> 00:17:20,799
don't have to deal with any low level

477
00:17:20,799 --> 00:17:21,280
sequel

478
00:17:21,280 --> 00:17:23,199
distribution and maintenance and we

479
00:17:23,199 --> 00:17:24,880
believe that we achieve the forward

480
00:17:24,880 --> 00:17:27,679
compatibility

481
00:17:28,319 --> 00:17:31,840
so this was the deep dive into our

482
00:17:31,840 --> 00:17:33,840
authorization architecture

483
00:17:33,840 --> 00:17:36,559
now i would like to show about how does

484
00:17:36,559 --> 00:17:37,840
it work in practice

485
00:17:37,840 --> 00:17:42,000
with a few different examples

486
00:17:44,000 --> 00:17:47,600
so this is a user is happy and tried to

487
00:17:47,600 --> 00:17:49,679
ssh into a test box

488
00:17:49,679 --> 00:17:52,880
and user has a open capability called

489
00:17:52,880 --> 00:17:54,640
open linux databases

490
00:17:54,640 --> 00:17:57,679
that give access to test boxes in

491
00:17:57,679 --> 00:18:00,799
dev or stage ecosystems

492
00:18:00,799 --> 00:18:03,360
and the users this user is a member of

493
00:18:03,360 --> 00:18:04,160
this this

494
00:18:04,160 --> 00:18:07,520
ad group opel linux basic and try to in

495
00:18:07,520 --> 00:18:09,919
first iteration try to ssh into

496
00:18:09,919 --> 00:18:14,320
the test box in the dev ecosystem

497
00:18:14,320 --> 00:18:17,520
so first time when the users try to ssh

498
00:18:17,520 --> 00:18:19,679
into the bus but opa is going to

499
00:18:19,679 --> 00:18:21,120
retrieve the user's group

500
00:18:21,120 --> 00:18:22,640
and then find the corresponding

501
00:18:22,640 --> 00:18:24,400
capability then it's going to start

502
00:18:24,400 --> 00:18:25,840
matching the host facts that

503
00:18:25,840 --> 00:18:29,039
is specified in the capability first the

504
00:18:29,039 --> 00:18:31,039
test box is matching

505
00:18:31,039 --> 00:18:33,200
with the role and the ecosystem is

506
00:18:33,200 --> 00:18:34,960
matching one of the ecosystems

507
00:18:34,960 --> 00:18:38,320
specified into the capability

508
00:18:38,320 --> 00:18:41,520
and this capability allows ssh then this

509
00:18:41,520 --> 00:18:42,640
ssh request

510
00:18:42,640 --> 00:18:45,919
will be allowed for the user but

511
00:18:45,919 --> 00:18:48,000
let's say the user decide okay dave is

512
00:18:48,000 --> 00:18:50,160
not enough for me i want to go to prod

513
00:18:50,160 --> 00:18:52,480
and it's trying to ssh into pro and the

514
00:18:52,480 --> 00:18:53,280
user has

515
00:18:53,280 --> 00:18:55,919
only this capability but this time since

516
00:18:55,919 --> 00:18:58,240
this capability doesn't allow the

517
00:18:58,240 --> 00:19:01,280
prod access in the

518
00:19:01,280 --> 00:19:03,760
ecosystem although the role is matching

519
00:19:03,760 --> 00:19:06,000
but none of the ecosystem is matching

520
00:19:06,000 --> 00:19:09,200
so the ssh will be failed

521
00:19:09,200 --> 00:19:12,559
to access this prod test box for this

522
00:19:12,559 --> 00:19:13,520
user

523
00:19:13,520 --> 00:19:15,200
but what are we going to do if these

524
00:19:15,200 --> 00:19:17,600
users need it and the other users that

525
00:19:17,600 --> 00:19:19,840
are enrolled for opel links their basic

526
00:19:19,840 --> 00:19:23,200
don't need to access products yet

527
00:19:23,200 --> 00:19:26,000
so we can what we can do is in terms of

528
00:19:26,000 --> 00:19:26,880
least privilege

529
00:19:26,880 --> 00:19:29,440
we can create a new capability let's

530
00:19:29,440 --> 00:19:30,240
call this

531
00:19:30,240 --> 00:19:33,600
opel linux dev advance and give access

532
00:19:33,600 --> 00:19:33,919
to

533
00:19:33,919 --> 00:19:37,679
all test boxes in all ecosystems

534
00:19:37,679 --> 00:19:41,039
so uh it would be

535
00:19:41,039 --> 00:19:44,320
like so it will be like

536
00:19:44,320 --> 00:19:47,039
it will give access to all text boxes on

537
00:19:47,039 --> 00:19:48,320
all ecosystems

538
00:19:48,320 --> 00:19:50,880
and we would enroll this user to open

539
00:19:50,880 --> 00:19:52,400
linux dev advance

540
00:19:52,400 --> 00:19:55,120
in this way the user will be able to ssh

541
00:19:55,120 --> 00:19:56,000
into the

542
00:19:56,000 --> 00:19:59,760
prod test test boxes so this

543
00:19:59,760 --> 00:20:02,400
configuration allow us to specify least

544
00:20:02,400 --> 00:20:03,919
privilege

545
00:20:03,919 --> 00:20:06,320
capabilities and configurations and

546
00:20:06,320 --> 00:20:07,760
distribute to the users

547
00:20:07,760 --> 00:20:11,360
by their needs so the

548
00:20:11,360 --> 00:20:13,360
next thing that i would like to talk

549
00:20:13,360 --> 00:20:14,480
about is that

550
00:20:14,480 --> 00:20:17,760
our decision logging after each

551
00:20:17,760 --> 00:20:19,600
authorization enforcement

552
00:20:19,600 --> 00:20:22,720
we collect decision logs in splunk for

553
00:20:22,720 --> 00:20:23,520
example

554
00:20:23,520 --> 00:20:25,520
for the previous iteration when the user

555
00:20:25,520 --> 00:20:28,880
was denied we had these example logs

556
00:20:28,880 --> 00:20:31,600
as you can see here we can see the the

557
00:20:31,600 --> 00:20:32,400
username

558
00:20:32,400 --> 00:20:34,799
which hostname the users tried to ssh

559
00:20:34,799 --> 00:20:37,200
and the ssh result was false

560
00:20:37,200 --> 00:20:38,960
but the interesting thing that i like to

561
00:20:38,960 --> 00:20:40,240
mention here is that

562
00:20:40,240 --> 00:20:43,760
we also log the users existing groups

563
00:20:43,760 --> 00:20:47,120
and the required groups for uh

564
00:20:47,120 --> 00:20:50,080
like for the user in order for this user

565
00:20:50,080 --> 00:20:51,840
to be able to ssh into

566
00:20:51,840 --> 00:20:55,280
this box uh so

567
00:20:55,280 --> 00:20:58,480
this standardized and uh value

568
00:20:58,480 --> 00:21:00,400
maintained and valve formatted locks

569
00:21:00,400 --> 00:21:00,880
actually

570
00:21:00,880 --> 00:21:04,000
enable us to make better analysis

571
00:21:04,000 --> 00:21:06,480
uh for and getting statistics on the

572
00:21:06,480 --> 00:21:07,600
usage patterns

573
00:21:07,600 --> 00:21:11,120
in our in in our infrastructure

574
00:21:11,120 --> 00:21:13,200
and like that we can analyze all of the

575
00:21:13,200 --> 00:21:14,880
usage patterns and make

576
00:21:14,880 --> 00:21:17,919
this privilege capabilities for our use

577
00:21:17,919 --> 00:21:20,240
cases

578
00:21:21,200 --> 00:21:25,120
so up until this point we deep dive into

579
00:21:25,120 --> 00:21:26,799
our authorization architecture

580
00:21:26,799 --> 00:21:29,120
and we have shown that how it works in

581
00:21:29,120 --> 00:21:30,320
practice now

582
00:21:30,320 --> 00:21:32,400
i'm going to hand over to daniel that

583
00:21:32,400 --> 00:21:34,240
he's going to talk about our rollout

584
00:21:34,240 --> 00:21:34,960
strategy

585
00:21:34,960 --> 00:21:39,520
in this pc environment and how we

586
00:21:39,520 --> 00:21:41,520
ensure the system reliability with a new

587
00:21:41,520 --> 00:21:43,679
architecture

588
00:21:43,679 --> 00:21:45,520
thank you charlie for the technical deep

589
00:21:45,520 --> 00:21:47,679
dive

590
00:21:47,679 --> 00:21:50,880
roll out strategy so as with any major

591
00:21:50,880 --> 00:21:51,919
system migration

592
00:21:51,919 --> 00:21:53,679
it's super important to consider the

593
00:21:53,679 --> 00:21:55,120
rollout strategy

594
00:21:55,120 --> 00:21:56,640
we had a number of goals that were very

595
00:21:56,640 --> 00:21:58,320
important for us to ensure the success

596
00:21:58,320 --> 00:21:59,360
of this project

597
00:21:59,360 --> 00:22:01,039
it was imperative that we don't block

598
00:22:01,039 --> 00:22:03,360
access inappropriately for any

599
00:22:03,360 --> 00:22:06,240
human or service users there were a lot

600
00:22:06,240 --> 00:22:07,760
of users in the system and lots of

601
00:22:07,760 --> 00:22:09,440
stakeholders that trusted us to deliver

602
00:22:09,440 --> 00:22:11,200
this project correctly and we didn't

603
00:22:11,200 --> 00:22:12,480
want to let them down

604
00:22:12,480 --> 00:22:14,960
nor did we want to let ourselves down

605
00:22:14,960 --> 00:22:16,880
now for any migration to be successful

606
00:22:16,880 --> 00:22:18,320
in my opinion you need to really

607
00:22:18,320 --> 00:22:20,080
minimize the impact and cognitive

608
00:22:20,080 --> 00:22:22,320
overhead for the users of the system

609
00:22:22,320 --> 00:22:24,080
so a primary important goal for us was

610
00:22:24,080 --> 00:22:25,440
to make sure that the changes were

611
00:22:25,440 --> 00:22:26,080
transparent

612
00:22:26,080 --> 00:22:29,360
to all users in the system and recall

613
00:22:29,360 --> 00:22:31,280
the whole point of this new architecture

614
00:22:31,280 --> 00:22:34,080
was to support the least privileged

615
00:22:34,080 --> 00:22:35,840
policies as a best practice for all

616
00:22:35,840 --> 00:22:37,520
users in the system

617
00:22:37,520 --> 00:22:39,679
however if we try to change the

618
00:22:39,679 --> 00:22:40,720
mechanism for

619
00:22:40,720 --> 00:22:43,760
how we do authorization and introduce

620
00:22:43,760 --> 00:22:45,760
least privilege policy permissions

621
00:22:45,760 --> 00:22:48,240
permission policies at the same time it

622
00:22:48,240 --> 00:22:50,159
would make it pretty difficult to know

623
00:22:50,159 --> 00:22:52,159
if we introduced any regressions into

624
00:22:52,159 --> 00:22:55,440
the existing access control semantics

625
00:22:55,440 --> 00:22:57,039
finally we knew that our policy wouldn't

626
00:22:57,039 --> 00:22:58,640
be perfect on the first trial

627
00:22:58,640 --> 00:22:59,919
and we needed to ensure that we could

628
00:22:59,919 --> 00:23:02,480
safely iterate on the policy

629
00:23:02,480 --> 00:23:04,080
and of course communication is important

630
00:23:04,080 --> 00:23:07,120
for any law strategy

631
00:23:07,280 --> 00:23:08,880
so here are the concrete steps we took

632
00:23:08,880 --> 00:23:11,120
to achieve those goals

633
00:23:11,120 --> 00:23:13,840
every change that we made absolutely had

634
00:23:13,840 --> 00:23:15,679
to be rollback safe

635
00:23:15,679 --> 00:23:17,520
in case of any issue we had to be able

636
00:23:17,520 --> 00:23:19,679
to revert the code change and go back

637
00:23:19,679 --> 00:23:20,559
quickly

638
00:23:20,559 --> 00:23:23,600
to the status quo without any manually

639
00:23:23,600 --> 00:23:25,280
flexing about and trying to fix the

640
00:23:25,280 --> 00:23:27,600
system

641
00:23:28,080 --> 00:23:30,159
we designed the new system with a dry

642
00:23:30,159 --> 00:23:32,080
run mode which would log

643
00:23:32,080 --> 00:23:34,320
the allow or deny decisions it would

644
00:23:34,320 --> 00:23:35,200
have made

645
00:23:35,200 --> 00:23:38,080
but not actually enforce these decisions

646
00:23:38,080 --> 00:23:39,280
this allowed us to

647
00:23:39,280 --> 00:23:41,600
run the new system in dry run mode in

648
00:23:41,600 --> 00:23:43,679
parallel with the old system

649
00:23:43,679 --> 00:23:46,000
and then we could compare the results

650
00:23:46,000 --> 00:23:48,080
without impacting access for our users

651
00:23:48,080 --> 00:23:50,080
in case of any bugs in our policy or our

652
00:23:50,080 --> 00:23:53,199
deployment strategy

653
00:23:54,080 --> 00:23:56,080
so we would roll out our dry run mode

654
00:23:56,080 --> 00:23:57,120
incrementally and

655
00:23:57,120 --> 00:23:58,880
over communicate each time we made a

656
00:23:58,880 --> 00:24:00,480
change

657
00:24:00,480 --> 00:24:02,000
this was important because even though

658
00:24:02,000 --> 00:24:05,039
it was dry run mode

659
00:24:05,039 --> 00:24:07,039
we were still changing core system

660
00:24:07,039 --> 00:24:08,720
configuration files which

661
00:24:08,720 --> 00:24:11,440
technically could and actually did in a

662
00:24:11,440 --> 00:24:12,400
few rare cases

663
00:24:12,400 --> 00:24:15,600
cause some kind of issues throughout the

664
00:24:15,600 --> 00:24:17,360
incremental rollout we'd monitor

665
00:24:17,360 --> 00:24:20,480
our dashboards and logs for any gaps in

666
00:24:20,480 --> 00:24:24,080
our authorization metrics adjust the

667
00:24:24,080 --> 00:24:25,520
policies

668
00:24:25,520 --> 00:24:28,799
lather rinse repeat until we got to a

669
00:24:28,799 --> 00:24:32,080
zero diff result

670
00:24:32,080 --> 00:24:33,840
eventually we had enough confidence to

671
00:24:33,840 --> 00:24:35,919
roll out true enforcement mode

672
00:24:35,919 --> 00:24:38,640
incrementally

673
00:24:40,080 --> 00:24:42,559
and here's actual footage of our rollout

674
00:24:42,559 --> 00:24:43,440
strategy

675
00:24:43,440 --> 00:24:44,880
there's charlie and i replacing the

676
00:24:44,880 --> 00:24:46,640
wings of the authorization system for

677
00:24:46,640 --> 00:24:48,159
thousands of hosts and hundreds of

678
00:24:48,159 --> 00:24:49,039
active users

679
00:24:49,039 --> 00:24:52,400
with zero downtime

680
00:24:54,799 --> 00:24:57,120
our dedication to customer so what were

681
00:24:57,120 --> 00:24:57,919
the results

682
00:24:57,919 --> 00:24:59,760
our dedication our dedication to

683
00:24:59,760 --> 00:25:02,159
customer focus extensive testing

684
00:25:02,159 --> 00:25:04,159
and due diligence ultimately paid

685
00:25:04,159 --> 00:25:06,159
dividends as our rollout strategy was

686
00:25:06,159 --> 00:25:07,840
wildly successful

687
00:25:07,840 --> 00:25:09,279
we had very few issues that we

688
00:25:09,279 --> 00:25:11,520
encountered along the way and any issues

689
00:25:11,520 --> 00:25:13,440
we encountered were trivially

690
00:25:13,440 --> 00:25:16,240
able to be rolled back since we over

691
00:25:16,240 --> 00:25:18,559
communicated each incremental change

692
00:25:18,559 --> 00:25:20,400
any affected users could easily

693
00:25:20,400 --> 00:25:23,039
attribute access issues to our changes

694
00:25:23,039 --> 00:25:25,039
minimizing the mean time to resolution

695
00:25:25,039 --> 00:25:27,200
for any issues

696
00:25:27,200 --> 00:25:29,600
finally throughout the rollout we

697
00:25:29,600 --> 00:25:31,279
incrementally built a run book

698
00:25:31,279 --> 00:25:34,480
for the new system anytime any issue was

699
00:25:34,480 --> 00:25:35,279
encountered

700
00:25:35,279 --> 00:25:37,039
we'd capture the characteristics and the

701
00:25:37,039 --> 00:25:38,320
behaviors of

702
00:25:38,320 --> 00:25:40,720
what happened and how to debug it by the

703
00:25:40,720 --> 00:25:42,720
end of the project we had a runbook with

704
00:25:42,720 --> 00:25:44,480
tons of collateral

705
00:25:44,480 --> 00:25:46,240
and we didn't have to start from scratch

706
00:25:46,240 --> 00:25:47,440
at the end of the project trying to

707
00:25:47,440 --> 00:25:48,880
scramble and figure out what are

708
00:25:48,880 --> 00:25:51,840
all the things that went wrong

709
00:25:54,080 --> 00:25:56,320
we then spent the next whole quarter

710
00:25:56,320 --> 00:25:58,000
analyzing the decision logs to

711
00:25:58,000 --> 00:25:58,640
understand

712
00:25:58,640 --> 00:26:01,279
actual access patterns a few teams were

713
00:26:01,279 --> 00:26:02,960
given a free pass

714
00:26:02,960 --> 00:26:04,720
to have administrative privileges due to

715
00:26:04,720 --> 00:26:06,480
the scope of their job responsibilities

716
00:26:06,480 --> 00:26:07,200
especially

717
00:26:07,200 --> 00:26:08,960
the operations of production engineering

718
00:26:08,960 --> 00:26:11,760
team every other team was assigned new

719
00:26:11,760 --> 00:26:14,240
capabilities based on their actual usage

720
00:26:14,240 --> 00:26:15,760
this was usually really straightforward

721
00:26:15,760 --> 00:26:17,200
because we had all the data that we

722
00:26:17,200 --> 00:26:19,279
needed

723
00:26:19,279 --> 00:26:22,640
still any time we made a major change

724
00:26:22,640 --> 00:26:24,559
we'd notify teams that their permissions

725
00:26:24,559 --> 00:26:26,799
were changing in most cases the teams

726
00:26:26,799 --> 00:26:28,320
really appreciated the amount of due

727
00:26:28,320 --> 00:26:29,600
diligence we put in

728
00:26:29,600 --> 00:26:31,120
and had utmost confidence that our

729
00:26:31,120 --> 00:26:34,159
changes wouldn't impact them negatively

730
00:26:34,159 --> 00:26:36,720
at the completion of this project we had

731
00:26:36,720 --> 00:26:38,559
no more ops deputies

732
00:26:38,559 --> 00:26:40,159
and significantly reduced the number of

733
00:26:40,159 --> 00:26:41,840
admins by more than 50

734
00:26:41,840 --> 00:26:43,840
and each team had their own set of

735
00:26:43,840 --> 00:26:46,959
distinct permissions

736
00:26:49,039 --> 00:26:50,320
now as you've seen from charlie's

737
00:26:50,320 --> 00:26:51,600
technical deep dive on the new

738
00:26:51,600 --> 00:26:52,480
architecture

739
00:26:52,480 --> 00:26:54,240
we actually added quite a bit more

740
00:26:54,240 --> 00:26:56,000
complexity under the hood than we had in

741
00:26:56,000 --> 00:26:57,440
the status quo

742
00:26:57,440 --> 00:26:59,760
as such it was extremely important for

743
00:26:59,760 --> 00:27:01,679
our design and our rollout strategy to

744
00:27:01,679 --> 00:27:02,720
ensure that the system was

745
00:27:02,720 --> 00:27:05,440
fault-tolerant to any failure scenarios

746
00:27:05,440 --> 00:27:07,360
we've maintained a matrix of test cases

747
00:27:07,360 --> 00:27:08,880
and we essentially injected

748
00:27:08,880 --> 00:27:11,200
failures in each component and ensured

749
00:27:11,200 --> 00:27:14,400
the system reliability

750
00:27:14,400 --> 00:27:16,559
so what kind of things did we test well

751
00:27:16,559 --> 00:27:18,320
what if we push a bad policy that has

752
00:27:18,320 --> 00:27:20,159
catastrophic side effects like blocking

753
00:27:20,159 --> 00:27:21,520
access from all users

754
00:27:21,520 --> 00:27:24,480
or worse granting access to all users we

755
00:27:24,480 --> 00:27:25,919
do enforce code review

756
00:27:25,919 --> 00:27:27,600
but nobody's perfect after all and

757
00:27:27,600 --> 00:27:29,760
something might slip through

758
00:27:29,760 --> 00:27:31,840
in case this happens we have automated

759
00:27:31,840 --> 00:27:33,679
checks in our ci cd pipeline that will

760
00:27:33,679 --> 00:27:34,159
prevent

761
00:27:34,159 --> 00:27:38,559
uploading of a bad policy bundle to s3

762
00:27:39,039 --> 00:27:41,279
even with these automated tests it's

763
00:27:41,279 --> 00:27:43,120
still possible that a bad policy might

764
00:27:43,120 --> 00:27:44,720
slip through

765
00:27:44,720 --> 00:27:46,640
this or any other kind of issue with the

766
00:27:46,640 --> 00:27:48,320
open policy agent service

767
00:27:48,320 --> 00:27:50,480
could cause the service to not respond

768
00:27:50,480 --> 00:27:52,000
or respond with a malware formed

769
00:27:52,000 --> 00:27:53,200
response

770
00:27:53,200 --> 00:27:56,480
to mitigate that risk we distribute

771
00:27:56,480 --> 00:27:59,120
administrators public ssh keys to all

772
00:27:59,120 --> 00:28:00,000
hosts

773
00:28:00,000 --> 00:28:01,919
and have a fallback mechanism in our pam

774
00:28:01,919 --> 00:28:04,080
configuration to ensure that even if

775
00:28:04,080 --> 00:28:05,760
things go terribly wrong with the

776
00:28:05,760 --> 00:28:08,159
authorization system administrative

777
00:28:08,159 --> 00:28:08,799
users

778
00:28:08,799 --> 00:28:11,440
can always access all hosts even if oppa

779
00:28:11,440 --> 00:28:13,919
is down

780
00:28:14,399 --> 00:28:16,000
it's also possible that one or more of

781
00:28:16,000 --> 00:28:18,559
the data sources used for producing or

782
00:28:18,559 --> 00:28:19,760
serving the bundle

783
00:28:19,760 --> 00:28:22,399
the policy bundle are unavailable to

784
00:28:22,399 --> 00:28:24,240
mitigate this risk

785
00:28:24,240 --> 00:28:26,480
oppa maintains a local policy bundle

786
00:28:26,480 --> 00:28:27,919
cache of the last known good

787
00:28:27,919 --> 00:28:29,360
configuration

788
00:28:29,360 --> 00:28:31,520
this way we maintain some level of

789
00:28:31,520 --> 00:28:32,720
access albeit

790
00:28:32,720 --> 00:28:35,120
potentially a bit stale this is an

791
00:28:35,120 --> 00:28:36,640
acceptable trade-off for our

792
00:28:36,640 --> 00:28:38,559
requirements

793
00:28:38,559 --> 00:28:40,320
we have monitoring to let us know when

794
00:28:40,320 --> 00:28:42,159
this happens but historically these

795
00:28:42,159 --> 00:28:44,080
outages are quite infrequent and they

796
00:28:44,080 --> 00:28:47,360
tend to resolve pretty quickly

797
00:28:47,440 --> 00:28:49,520
wrapping up what are the key takeaways

798
00:28:49,520 --> 00:28:50,640
that we want you to have from this

799
00:28:50,640 --> 00:28:52,640
presentation

800
00:28:52,640 --> 00:28:54,399
while it sounds terrifying and

801
00:28:54,399 --> 00:28:56,000
potentially impossible

802
00:28:56,000 --> 00:28:58,080
this project is living proof that it is

803
00:28:58,080 --> 00:28:59,919
possible to replace an actively used

804
00:28:59,919 --> 00:29:02,640
authorization system with zero downtime

805
00:29:02,640 --> 00:29:04,320
at the time of this presentation we've

806
00:29:04,320 --> 00:29:05,840
been live with the new infrastructure

807
00:29:05,840 --> 00:29:07,039
for over a year

808
00:29:07,039 --> 00:29:08,799
and we've never had any access issues

809
00:29:08,799 --> 00:29:10,720
caused by failures in the system

810
00:29:10,720 --> 00:29:11,919
this would not have been possible

811
00:29:11,919 --> 00:29:13,520
without the upfront planning and due

812
00:29:13,520 --> 00:29:15,039
diligence to ensure that we had all the

813
00:29:15,039 --> 00:29:16,640
bases covered for migration scenarios

814
00:29:16,640 --> 00:29:18,559
and system reliability

815
00:29:18,559 --> 00:29:20,960
in particular the dry run functionality

816
00:29:20,960 --> 00:29:22,640
was really important to know that we

817
00:29:22,640 --> 00:29:25,440
didn't have any regressions

818
00:29:25,440 --> 00:29:27,919
the open policy agent lets you decouple

819
00:29:27,919 --> 00:29:30,000
authorization policies from any software

820
00:29:30,000 --> 00:29:30,880
system

821
00:29:30,880 --> 00:29:33,039
at yelp we've now used the open policy

822
00:29:33,039 --> 00:29:33,919
agent to provide

823
00:29:33,919 --> 00:29:36,640
authorization features across four very

824
00:29:36,640 --> 00:29:37,440
different

825
00:29:37,440 --> 00:29:39,520
infrastructures including our service

826
00:29:39,520 --> 00:29:41,039
mesh docker

827
00:29:41,039 --> 00:29:43,760
kubernetes and linux infrastructure our

828
00:29:43,760 --> 00:29:45,279
experience overall has been very

829
00:29:45,279 --> 00:29:46,159
positive

830
00:29:46,159 --> 00:29:48,000
and in each case we kind of took the

831
00:29:48,000 --> 00:29:49,440
same approach of building an

832
00:29:49,440 --> 00:29:52,240
abstraction layer in rego and having the

833
00:29:52,240 --> 00:29:54,240
end users only need to make metadata

834
00:29:54,240 --> 00:29:56,159
changes to make

835
00:29:56,159 --> 00:29:59,279
access control changes

836
00:29:59,440 --> 00:30:02,559
finally in the status quo more than 25

837
00:30:02,559 --> 00:30:04,000
percent of our users have broad

838
00:30:04,000 --> 00:30:05,520
administrative capabilities throughout

839
00:30:05,520 --> 00:30:06,880
our infrastructure

840
00:30:06,880 --> 00:30:09,440
this was a huge risk in our threat model

841
00:30:09,440 --> 00:30:11,039
with the least privileged policy

842
00:30:11,039 --> 00:30:12,080
infrastructure that we've

843
00:30:12,080 --> 00:30:14,399
rolled out we've significantly improved

844
00:30:14,399 --> 00:30:16,240
our security posture and mitigated the

845
00:30:16,240 --> 00:30:17,919
risk of internal bad actors or

846
00:30:17,919 --> 00:30:19,840
compromised accounts

847
00:30:19,840 --> 00:30:21,520
additionally the project has stood the

848
00:30:21,520 --> 00:30:23,919
test of time and we've never found a

849
00:30:23,919 --> 00:30:26,000
scenario that we weren't able to provide

850
00:30:26,000 --> 00:30:26,799
access

851
00:30:26,799 --> 00:30:30,639
for through our infrastructure

852
00:30:31,039 --> 00:30:32,799
thanks for watching we'll be available

853
00:30:32,799 --> 00:30:34,320
in the chat to answer any questions you

854
00:30:34,320 --> 00:30:37,840
might have

