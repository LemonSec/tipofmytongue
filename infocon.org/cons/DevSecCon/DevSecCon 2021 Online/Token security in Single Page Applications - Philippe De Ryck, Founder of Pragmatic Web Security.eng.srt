1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,320 --> 00:00:12,719
hi

3
00:00:12,719 --> 00:00:15,519
welcome at devsecond it's a pleasure to

4
00:00:15,519 --> 00:00:17,600
be here i'm felipe from belgium

5
00:00:17,600 --> 00:00:19,039
i'm actually presenting from belgium

6
00:00:19,039 --> 00:00:21,600
this time which is kind of weird uh but

7
00:00:21,600 --> 00:00:22,960
we've we've gotten used to it

8
00:00:22,960 --> 00:00:25,199
over over the past year and a half i

9
00:00:25,199 --> 00:00:26,560
would say um

10
00:00:26,560 --> 00:00:28,240
nonetheless i'm still looking forward to

11
00:00:28,240 --> 00:00:30,240
real events real conferences where

12
00:00:30,240 --> 00:00:32,159
we can actually see people following

13
00:00:32,159 --> 00:00:34,160
talks and stuff

14
00:00:34,160 --> 00:00:35,920
seeing computers and walls and stuff

15
00:00:35,920 --> 00:00:37,360
like that but

16
00:00:37,360 --> 00:00:39,120
hey that's what this is all about and

17
00:00:39,120 --> 00:00:40,399
let's let's do

18
00:00:40,399 --> 00:00:42,399
what we have to do in the circumstances

19
00:00:42,399 --> 00:00:43,440
that we have here so

20
00:00:43,440 --> 00:00:45,440
let's talk about token security in

21
00:00:45,440 --> 00:00:47,039
single page applications that's

22
00:00:47,039 --> 00:00:48,399
basically going to be the setup

23
00:00:48,399 --> 00:00:50,079
for the next 30 minutes and i'm going to

24
00:00:50,079 --> 00:00:52,079
walk you through a couple of scenarios

25
00:00:52,079 --> 00:00:53,120
um

26
00:00:53,120 --> 00:00:55,440
to discuss some some kind of a nuanced

27
00:00:55,440 --> 00:00:57,559
problem where there's there's no real

28
00:00:57,559 --> 00:01:00,160
one-size-fits-all answer so um if you're

29
00:01:00,160 --> 00:01:01,039
hoping to find

30
00:01:01,039 --> 00:01:02,879
final answers in this session i'm gonna

31
00:01:02,879 --> 00:01:04,559
have to be disappointing

32
00:01:04,559 --> 00:01:06,240
uh because it's not gonna be like that

33
00:01:06,240 --> 00:01:08,400
but i'm gonna give you some options and

34
00:01:08,400 --> 00:01:11,040
help you think about this challenge in

35
00:01:11,040 --> 00:01:12,080
modern single page

36
00:01:12,080 --> 00:01:15,119
applications let's start at the

37
00:01:15,119 --> 00:01:16,640
beginning let's start talking about

38
00:01:16,640 --> 00:01:18,080
local storage because if you're gonna

39
00:01:18,080 --> 00:01:19,920
look at token storage solutions you'll

40
00:01:19,920 --> 00:01:21,360
find people saying like yeah local

41
00:01:21,360 --> 00:01:22,799
storage is awesome and you'll find other

42
00:01:22,799 --> 00:01:24,080
people saying like oh my god

43
00:01:24,080 --> 00:01:26,880
never put stuff in local storage and the

44
00:01:26,880 --> 00:01:28,320
truth is somewhere in the middle so

45
00:01:28,320 --> 00:01:29,360
local storage

46
00:01:29,360 --> 00:01:31,520
is this browser-based storage area it's

47
00:01:31,520 --> 00:01:33,360
basically a fairly simple mechanism it

48
00:01:33,360 --> 00:01:33,680
has

49
00:01:33,680 --> 00:01:35,920
key value storage so you basically set

50
00:01:35,920 --> 00:01:37,840
an item and you get an item with a key

51
00:01:37,840 --> 00:01:40,240
and a value that's as simple as things

52
00:01:40,240 --> 00:01:41,040
get

53
00:01:41,040 --> 00:01:43,119
storage wise this is really easy to use

54
00:01:43,119 --> 00:01:44,560
it's not the browser developer's

55
00:01:44,560 --> 00:01:46,479
favorite api because of some performance

56
00:01:46,479 --> 00:01:48,799
issues but nonetheless it actually works

57
00:01:48,799 --> 00:01:50,560
really well for storing something simple

58
00:01:50,560 --> 00:01:52,079
like a token

59
00:01:52,079 --> 00:01:53,759
and you may have found some advice that

60
00:01:53,759 --> 00:01:55,439
says like yeah this is cool and

61
00:01:55,439 --> 00:01:57,759
you'll find people saying like yeah not

62
00:01:57,759 --> 00:01:59,200
really this is dangerous and you should

63
00:01:59,200 --> 00:02:00,479
never do that and

64
00:02:00,479 --> 00:02:02,240
that's what i want to talk about in a

65
00:02:02,240 --> 00:02:03,759
couple of minutes

66
00:02:03,759 --> 00:02:05,600
before we get to that a small word about

67
00:02:05,600 --> 00:02:07,840
myself i'm

68
00:02:07,840 --> 00:02:09,280
i used to travel the world to help

69
00:02:09,280 --> 00:02:12,000
companies with complex security problems

70
00:02:12,000 --> 00:02:13,920
so i do developer training where i help

71
00:02:13,920 --> 00:02:16,239
people understand vulnerabilities and

72
00:02:16,239 --> 00:02:18,560
defenses but i also do specialized

73
00:02:18,560 --> 00:02:20,800
consulting on topics like exactly this

74
00:02:20,800 --> 00:02:21,599
one

75
00:02:21,599 --> 00:02:23,760
or oh out of open id connect and all of

76
00:02:23,760 --> 00:02:26,160
these fairly advanced and complicated

77
00:02:26,160 --> 00:02:27,840
technologies so if you want to know more

78
00:02:27,840 --> 00:02:29,280
about that or about me

79
00:02:29,280 --> 00:02:31,040
there's a website pragmatic web security

80
00:02:31,040 --> 00:02:32,720
that's my company you can find all

81
00:02:32,720 --> 00:02:34,160
information there

82
00:02:34,160 --> 00:02:36,080
and of course you'll find me online as

83
00:02:36,080 --> 00:02:37,360
well but

84
00:02:37,360 --> 00:02:39,440
enough about me we only have 30 minutes

85
00:02:39,440 --> 00:02:40,640
so let's talk

86
00:02:40,640 --> 00:02:43,760
about token security let's talk about

87
00:02:43,760 --> 00:02:46,400
the dangers of local storage so the

88
00:02:46,400 --> 00:02:47,840
thing is

89
00:02:47,840 --> 00:02:49,680
and people are kind of right about that

90
00:02:49,680 --> 00:02:51,440
storing data on local storage is

91
00:02:51,440 --> 00:02:53,360
is making it easy for the attacker to

92
00:02:53,360 --> 00:02:55,440
grab that data if something goes wrong

93
00:02:55,440 --> 00:02:57,120
so let's assume that the attacker can

94
00:02:57,120 --> 00:02:58,800
exploit a vulnerability in your

95
00:02:58,800 --> 00:02:59,360
application

96
00:02:59,360 --> 00:03:01,200
allowing the attacker to for example

97
00:03:01,200 --> 00:03:02,720
execute code through a cross-site

98
00:03:02,720 --> 00:03:04,800
scripting vulnerability or to compromise

99
00:03:04,800 --> 00:03:05,280
a

100
00:03:05,280 --> 00:03:06,959
advertisement that you load and all of a

101
00:03:06,959 --> 00:03:08,879
sudden code executes in your application

102
00:03:08,879 --> 00:03:11,519
that's the red block on this slide

103
00:03:11,519 --> 00:03:14,560
that code can read local storage and if

104
00:03:14,560 --> 00:03:16,159
you put sensitive tokens in that local

105
00:03:16,159 --> 00:03:17,120
storage area

106
00:03:17,120 --> 00:03:18,959
and attacker able to inject some code in

107
00:03:18,959 --> 00:03:20,159
your application will be able to read

108
00:03:20,159 --> 00:03:21,760
that code ship it off somewhere else and

109
00:03:21,760 --> 00:03:22,800
off you go

110
00:03:22,800 --> 00:03:25,920
and that attack is really really easy as

111
00:03:25,920 --> 00:03:26,400
in

112
00:03:26,400 --> 00:03:28,480
the code to do that is exactly these two

113
00:03:28,480 --> 00:03:29,599
lines of code and i'm

114
00:03:29,599 --> 00:03:31,200
sure you can write that as a single line

115
00:03:31,200 --> 00:03:33,360
of code as well just a little a little

116
00:03:33,360 --> 00:03:35,519
bit less readable but you get the idea

117
00:03:35,519 --> 00:03:37,760
so this is not a new attack factor this

118
00:03:37,760 --> 00:03:38,879
is not something

119
00:03:38,879 --> 00:03:40,400
that should be shocking to you this is

120
00:03:40,400 --> 00:03:41,680
something that's very well known like

121
00:03:41,680 --> 00:03:43,040
yeah we can do that

122
00:03:43,040 --> 00:03:45,840
and that's why you'll find advice that

123
00:03:45,840 --> 00:03:47,440
says like yeah you should never put

124
00:03:47,440 --> 00:03:48,799
stuff in local storage because an

125
00:03:48,799 --> 00:03:50,879
attacker can steal it from there

126
00:03:50,879 --> 00:03:52,640
and since this problem is well known

127
00:03:52,640 --> 00:03:54,720
you'll find defenses built into

128
00:03:54,720 --> 00:03:56,080
technologies like out

129
00:03:56,080 --> 00:03:58,720
which try to counter these attack

130
00:03:58,720 --> 00:03:59,680
scenarios

131
00:03:59,680 --> 00:04:02,159
for example in in oauth worlds your

132
00:04:02,159 --> 00:04:03,840
single page application would use

133
00:04:03,840 --> 00:04:06,560
tokens an access token to access the api

134
00:04:06,560 --> 00:04:09,280
and a refresh token for long term access

135
00:04:09,280 --> 00:04:11,120
as in your access token is sell it for

136
00:04:11,120 --> 00:04:13,120
10 minutes so you use it for 10 minutes

137
00:04:13,120 --> 00:04:14,560
and then afterwards you use a refresh

138
00:04:14,560 --> 00:04:15,040
token

139
00:04:15,040 --> 00:04:16,959
to get a new access token and you do

140
00:04:16,959 --> 00:04:18,639
that again and then again and again

141
00:04:18,639 --> 00:04:21,600
and that access token is very sensitive

142
00:04:21,600 --> 00:04:23,440
it gives access to api but the refresh

143
00:04:23,440 --> 00:04:25,199
token is even more sensitive

144
00:04:25,199 --> 00:04:27,120
because a refresh token gives the

145
00:04:27,120 --> 00:04:28,639
attacker the ability to get

146
00:04:28,639 --> 00:04:31,199
new access tokens over and over again

147
00:04:31,199 --> 00:04:34,000
until it expires

148
00:04:34,000 --> 00:04:37,040
the thing is in an all-out scenario with

149
00:04:37,040 --> 00:04:39,040
a back-end web application involved

150
00:04:39,040 --> 00:04:41,520
this refresh token is kind of secured

151
00:04:41,520 --> 00:04:42,080
quite well

152
00:04:42,080 --> 00:04:43,520
because it's stored on a server and it

153
00:04:43,520 --> 00:04:45,040
can only be used by the application

154
00:04:45,040 --> 00:04:46,400
which authenticates

155
00:04:46,400 --> 00:04:48,080
but that doesn't happen when you use

156
00:04:48,080 --> 00:04:49,520
refresh tokens in the browser and that's

157
00:04:49,520 --> 00:04:50,960
kind of a new development well

158
00:04:50,960 --> 00:04:53,280
new development in the last two years

159
00:04:53,280 --> 00:04:54,080
basically

160
00:04:54,080 --> 00:04:56,080
and such a refresh token in the browser

161
00:04:56,080 --> 00:04:57,199
is a bear token

162
00:04:57,199 --> 00:04:58,960
which means that anyone who gets hold of

163
00:04:58,960 --> 00:05:00,880
it an attacker stealing it from local

164
00:05:00,880 --> 00:05:01,680
storage

165
00:05:01,680 --> 00:05:03,440
will be able to use it which will give

166
00:05:03,440 --> 00:05:05,520
the attacker eventually access to an api

167
00:05:05,520 --> 00:05:07,039
on behalf of the user

168
00:05:07,039 --> 00:05:09,039
and that's something that we might want

169
00:05:09,039 --> 00:05:10,560
to avoid

170
00:05:10,560 --> 00:05:14,479
so in the oauth world the specifications

171
00:05:14,479 --> 00:05:17,360
state that refresh tokens that are used

172
00:05:17,360 --> 00:05:19,600
in in front-end applications like a web

173
00:05:19,600 --> 00:05:21,120
app they should require additional

174
00:05:21,120 --> 00:05:22,000
protection

175
00:05:22,000 --> 00:05:23,520
and concretely in a browser-based

176
00:05:23,520 --> 00:05:25,199
environment that protection is something

177
00:05:25,199 --> 00:05:25,600
called

178
00:05:25,600 --> 00:05:28,960
refresh token rotation and refresh token

179
00:05:28,960 --> 00:05:30,479
rotation works as follows i'm going to

180
00:05:30,479 --> 00:05:31,919
explain that with the timeline

181
00:05:31,919 --> 00:05:33,440
because that's the easiest way to

182
00:05:33,440 --> 00:05:35,120
visualize this process so

183
00:05:35,120 --> 00:05:38,080
the application the front-end app uses a

184
00:05:38,080 --> 00:05:40,160
legitimate workflow to obtain tokens

185
00:05:40,160 --> 00:05:43,120
81 access token one and rt1 which is

186
00:05:43,120 --> 00:05:44,560
refresh local

187
00:05:44,560 --> 00:05:47,360
and access token one expires after x

188
00:05:47,360 --> 00:05:49,440
amount of time let's say 10 minutes

189
00:05:49,440 --> 00:05:50,720
so what the application is typically

190
00:05:50,720 --> 00:05:52,720
gonna do it it knows this it says like

191
00:05:52,720 --> 00:05:54,160
yeah in nine minutes

192
00:05:54,160 --> 00:05:55,759
um well in nine minutes it says like

193
00:05:55,759 --> 00:05:57,120
yeah my token is about to expire you

194
00:05:57,120 --> 00:05:58,720
know what i'm gonna get a new one

195
00:05:58,720 --> 00:06:00,560
and because of refresh token rotation

196
00:06:00,560 --> 00:06:01,759
the app uses

197
00:06:01,759 --> 00:06:05,840
a refresh token rt1 and receives

198
00:06:05,840 --> 00:06:08,479
new set of tokens both access token and

199
00:06:08,479 --> 00:06:09,919
refresh token 82

200
00:06:09,919 --> 00:06:12,639
and rt2 and again 82 expires in 10

201
00:06:12,639 --> 00:06:13,199
minutes

202
00:06:13,199 --> 00:06:14,800
so in 9 minutes the app does the same

203
00:06:14,800 --> 00:06:16,240
thing with refresh token 2

204
00:06:16,240 --> 00:06:18,479
to get token set 3 and the same 9

205
00:06:18,479 --> 00:06:20,160
minutes later with token set 3

206
00:06:20,160 --> 00:06:24,240
to get token set 4 and so on and so on

207
00:06:24,240 --> 00:06:27,440
this concept of refresh token rotation

208
00:06:27,440 --> 00:06:30,240
ensures that the refresh token rt1 r2

209
00:06:30,240 --> 00:06:32,880
rt3 and rt4 can only be used once

210
00:06:32,880 --> 00:06:35,199
that's the whole point here so the idea

211
00:06:35,199 --> 00:06:37,039
is that if somebody steals it and

212
00:06:37,039 --> 00:06:38,880
it would be used twice then we know that

213
00:06:38,880 --> 00:06:40,400
something is wrong and we can actually

214
00:06:40,400 --> 00:06:40,880
take

215
00:06:40,880 --> 00:06:43,360
some defensive action to ensure that we

216
00:06:43,360 --> 00:06:44,800
can limit abuse

217
00:06:44,800 --> 00:06:46,720
and that scenario would look like this

218
00:06:46,720 --> 00:06:48,240
so the application

219
00:06:48,240 --> 00:06:50,319
is just doing what it does using refresh

220
00:06:50,319 --> 00:06:52,000
tokens and at some point in time the

221
00:06:52,000 --> 00:06:53,039
attacker

222
00:06:53,039 --> 00:06:56,080
injects or succeeds in executing a piece

223
00:06:56,080 --> 00:06:57,680
of malicious javascript code

224
00:06:57,680 --> 00:06:59,840
in the application and the attacker is

225
00:06:59,840 --> 00:07:01,280
going to steal stuff from local storage

226
00:07:01,280 --> 00:07:02,479
and there's a refresh token in there and

227
00:07:02,479 --> 00:07:03,599
the attack is like ooh

228
00:07:03,599 --> 00:07:07,039
interesting i have now a refresh token

229
00:07:07,039 --> 00:07:08,479
which is linked to this application and

230
00:07:08,479 --> 00:07:13,039
this user so what if i just use rt2

231
00:07:13,039 --> 00:07:16,080
so i can get 83 and rt3 and that's gonna

232
00:07:16,080 --> 00:07:17,120
work

233
00:07:17,120 --> 00:07:19,280
because that's how bearer refresh tokens

234
00:07:19,280 --> 00:07:21,039
work so the attacker at that point has a

235
00:07:21,039 --> 00:07:21,520
token

236
00:07:21,520 --> 00:07:24,160
83 allowing it to access an api on

237
00:07:24,160 --> 00:07:25,759
behalf of the victim

238
00:07:25,759 --> 00:07:28,800
which is a big problem but and this is

239
00:07:28,800 --> 00:07:31,199
the kicker of refresh token rotation the

240
00:07:31,199 --> 00:07:32,720
application doesn't know that this has

241
00:07:32,720 --> 00:07:33,280
happened

242
00:07:33,280 --> 00:07:34,800
otherwise they would have prevented the

243
00:07:34,800 --> 00:07:36,639
code from executing in the first place

244
00:07:36,639 --> 00:07:39,199
so the application is kind of oblivious

245
00:07:39,199 --> 00:07:40,240
here and

246
00:07:40,240 --> 00:07:41,840
at some point in time it's going to go

247
00:07:41,840 --> 00:07:44,080
to the authorization server in this case

248
00:07:44,080 --> 00:07:45,759
with refresh token to and be like hey

249
00:07:45,759 --> 00:07:47,759
can i get new tokens please

250
00:07:47,759 --> 00:07:49,280
and at that point the authorization

251
00:07:49,280 --> 00:07:51,199
server sees rt2

252
00:07:51,199 --> 00:07:54,479
being used again the second time it says

253
00:07:54,479 --> 00:07:57,360
like hold no no no no this is not good

254
00:07:57,360 --> 00:07:58,639
that's the whole point here refresh

255
00:07:58,639 --> 00:08:00,400
tokens are only supposed to be used once

256
00:08:00,400 --> 00:08:00,879
so

257
00:08:00,879 --> 00:08:03,759
we can detect the theft of a token and

258
00:08:03,759 --> 00:08:04,400
we can

259
00:08:04,400 --> 00:08:06,720
take corrective action in this case that

260
00:08:06,720 --> 00:08:07,759
means we revoke

261
00:08:07,759 --> 00:08:11,039
all the tokens associated to rt2

262
00:08:11,039 --> 00:08:12,720
which prevents the attacker from using

263
00:08:12,720 --> 00:08:15,199
rt3 or 4 or 5 or whatever

264
00:08:15,199 --> 00:08:17,199
token that the attacker has and that's

265
00:08:17,199 --> 00:08:21,120
the concept of refresh token rotation

266
00:08:21,120 --> 00:08:23,280
now there's a very big problem with this

267
00:08:23,280 --> 00:08:24,879
approach

268
00:08:24,879 --> 00:08:27,599
from a high level perspective this seems

269
00:08:27,599 --> 00:08:28,879
to work

270
00:08:28,879 --> 00:08:32,320
quite well but what this approach

271
00:08:32,320 --> 00:08:36,399
fails to understand is that

272
00:08:36,399 --> 00:08:38,080
the attacker can do a hell of a lot more

273
00:08:38,080 --> 00:08:40,320
than simply steal data from local

274
00:08:40,320 --> 00:08:41,039
storage

275
00:08:41,039 --> 00:08:42,399
and that's why you find a lot of people

276
00:08:42,399 --> 00:08:44,000
focusing on this local source like oh my

277
00:08:44,000 --> 00:08:45,440
god they can steal data

278
00:08:45,440 --> 00:08:47,600
and they completely forget that the

279
00:08:47,600 --> 00:08:48,480
attacker can do

280
00:08:48,480 --> 00:08:51,360
all kinds of other dangerous things it's

281
00:08:51,360 --> 00:08:53,200
not a single event it's not steel data

282
00:08:53,200 --> 00:08:54,880
and abuse that data afterwards

283
00:08:54,880 --> 00:08:56,240
the attacker can manipulate the

284
00:08:56,240 --> 00:08:58,000
application any way they want i will

285
00:08:58,000 --> 00:08:59,040
come back to that

286
00:08:59,040 --> 00:09:01,120
in a second or in a couple of minutes as

287
00:09:01,120 --> 00:09:02,240
well so this

288
00:09:02,240 --> 00:09:04,000
first takeaway is really important it's

289
00:09:04,000 --> 00:09:05,839
a very common misconception

290
00:09:05,839 --> 00:09:07,680
that cross-site scripting or malicious

291
00:09:07,680 --> 00:09:10,240
javascript code is a single event

292
00:09:10,240 --> 00:09:12,560
one point in time while it can be a

293
00:09:12,560 --> 00:09:13,519
continuous

294
00:09:13,519 --> 00:09:16,800
ongoing attack

295
00:09:18,000 --> 00:09:22,480
that's essentially takeaway number one

296
00:09:22,480 --> 00:09:26,240
so if we have this problem

297
00:09:26,240 --> 00:09:27,839
with local storage let's let's look at

298
00:09:27,839 --> 00:09:29,440
an alternative why not

299
00:09:29,440 --> 00:09:31,680
look at something else instead and let's

300
00:09:31,680 --> 00:09:34,000
look at cookies here

301
00:09:34,000 --> 00:09:37,040
cookies are very old

302
00:09:37,040 --> 00:09:38,800
lots of people don't like all people

303
00:09:38,800 --> 00:09:40,480
like christmas cookies here but lots of

304
00:09:40,480 --> 00:09:42,480
people don't like cookies in the browser

305
00:09:42,480 --> 00:09:45,680
and for some good reasons but also well

306
00:09:45,680 --> 00:09:46,959
they are what they are and we have to

307
00:09:46,959 --> 00:09:48,720
deal with them anyway so

308
00:09:48,720 --> 00:09:51,120
what's the deal with cookies here well

309
00:09:51,120 --> 00:09:53,120
cookies are kept in a cookie jar so

310
00:09:53,120 --> 00:09:54,880
conceptually this looks very similar

311
00:09:54,880 --> 00:09:56,240
because it's a storage area in the

312
00:09:56,240 --> 00:09:56,800
browser

313
00:09:56,800 --> 00:09:59,120
the difference is it's not code or your

314
00:09:59,120 --> 00:10:00,560
application code doesn't have to put

315
00:10:00,560 --> 00:10:02,320
cookies in the cookie jar the browser

316
00:10:02,320 --> 00:10:03,040
does that

317
00:10:03,040 --> 00:10:06,320
by itself but cookies can be accessed

318
00:10:06,320 --> 00:10:06,880
from

319
00:10:06,880 --> 00:10:09,440
javascript so your code on the left a

320
00:10:09,440 --> 00:10:10,480
blue code can

321
00:10:10,480 --> 00:10:12,480
read a cookie from the jar but if

322
00:10:12,480 --> 00:10:14,079
something goes wrong the attacker can

323
00:10:14,079 --> 00:10:14,800
use

324
00:10:14,800 --> 00:10:17,200
a malicious payload which is almost

325
00:10:17,200 --> 00:10:18,640
exactly like the one we covered before

326
00:10:18,640 --> 00:10:20,560
to read that cookie jar as well

327
00:10:20,560 --> 00:10:22,160
and again that's a well-known problem

328
00:10:22,160 --> 00:10:23,600
that's something we've known about for

329
00:10:23,600 --> 00:10:25,120
20 years or something

330
00:10:25,120 --> 00:10:27,360
it's like oh yeah that's a problem and

331
00:10:27,360 --> 00:10:29,200
the fix for that in the cookie worlds

332
00:10:29,200 --> 00:10:32,560
is a flag called http only

333
00:10:32,560 --> 00:10:34,480
and that http only flag basically tells

334
00:10:34,480 --> 00:10:36,560
the browser this cookie is for http

335
00:10:36,560 --> 00:10:37,440
traffic

336
00:10:37,440 --> 00:10:39,600
it should not be accessed from

337
00:10:39,600 --> 00:10:41,440
javascript

338
00:10:41,440 --> 00:10:43,360
and adding that simple keyword to your

339
00:10:43,360 --> 00:10:44,880
cookie configuration when you set a

340
00:10:44,880 --> 00:10:45,600
cookie

341
00:10:45,600 --> 00:10:48,720
will ensure that malicious code can no

342
00:10:48,720 --> 00:10:50,800
longer access that cookie

343
00:10:50,800 --> 00:10:53,600
awesome right i mean this is a cookie

344
00:10:53,600 --> 00:10:54,959
that can never be stolen

345
00:10:54,959 --> 00:10:57,600
through malicious javascript wonderful

346
00:10:57,600 --> 00:10:59,040
and again from a high level perspective

347
00:10:59,040 --> 00:11:00,320
you might think like oh yeah that's a

348
00:11:00,320 --> 00:11:01,120
good solution

349
00:11:01,120 --> 00:11:02,640
which you'll often read about as well

350
00:11:02,640 --> 00:11:04,079
like yeah i just use this because it's

351
00:11:04,079 --> 00:11:04,959
better

352
00:11:04,959 --> 00:11:06,880
but if you investigate the security

353
00:11:06,880 --> 00:11:08,320
properties of what's really going on the

354
00:11:08,320 --> 00:11:09,600
security is kind of crap

355
00:11:09,600 --> 00:11:11,040
i mean from the outside the door

356
00:11:11,040 --> 00:11:13,279
probably looks closed until there's a

357
00:11:13,279 --> 00:11:14,640
bit of a wind and then your cheetah will

358
00:11:14,640 --> 00:11:15,360
crack and

359
00:11:15,360 --> 00:11:17,519
your door will be blown wide open and

360
00:11:17,519 --> 00:11:19,040
it's the same story

361
00:11:19,040 --> 00:11:22,399
with cookies in the browser because

362
00:11:22,399 --> 00:11:24,800
the attack factor is not a single

363
00:11:24,800 --> 00:11:26,720
instance or a single occurrence of a bad

364
00:11:26,720 --> 00:11:28,079
thing it's the fact that the attacker

365
00:11:28,079 --> 00:11:30,560
code is executing in the application

366
00:11:30,560 --> 00:11:32,480
and the attacker can do whatever the

367
00:11:32,480 --> 00:11:34,320
hell they want

368
00:11:34,320 --> 00:11:36,720
so they can't steal cookies good what

369
00:11:36,720 --> 00:11:38,240
else can they do they can steal data

370
00:11:38,240 --> 00:11:39,600
from the page

371
00:11:39,600 --> 00:11:41,279
if it's a payroll application and the

372
00:11:41,279 --> 00:11:42,880
attacker can execute code they can just

373
00:11:42,880 --> 00:11:44,959
scrape all the data and send it off to

374
00:11:44,959 --> 00:11:46,560
someone else or to a server controlled

375
00:11:46,560 --> 00:11:48,240
by the attacker they can steal data from

376
00:11:48,240 --> 00:11:49,279
the application

377
00:11:49,279 --> 00:11:52,000
they can modify the ui banking trojans

378
00:11:52,000 --> 00:11:53,920
love to do this they add a transaction

379
00:11:53,920 --> 00:11:55,760
in an online banking app and they hide

380
00:11:55,760 --> 00:11:56,480
it

381
00:11:56,480 --> 00:11:59,839
from the user they just modify the ui

382
00:11:59,839 --> 00:12:01,360
as if the transaction was never there

383
00:12:01,360 --> 00:12:02,720
until you sign your transactions and

384
00:12:02,720 --> 00:12:05,440
boom of course your money

385
00:12:05,440 --> 00:12:07,519
kind of dangerous and the attacker code

386
00:12:07,519 --> 00:12:10,560
can start sending requests to a backend

387
00:12:10,560 --> 00:12:12,079
and the browser will attach cookies on

388
00:12:12,079 --> 00:12:14,240
those requests and the backend server

389
00:12:14,240 --> 00:12:15,760
will have no way to distinguish between

390
00:12:15,760 --> 00:12:17,360
a request coming from the red code the

391
00:12:17,360 --> 00:12:19,120
malicious code or the blue code the

392
00:12:19,120 --> 00:12:20,880
non-malicious code because it all runs

393
00:12:20,880 --> 00:12:24,399
in the same environment

394
00:12:24,399 --> 00:12:28,399
and that's the real threat

395
00:12:28,399 --> 00:12:29,760
of cross-site scripting of malicious

396
00:12:29,760 --> 00:12:32,000
javascript code

397
00:12:32,000 --> 00:12:35,519
the attacker can do whatever they want

398
00:12:35,519 --> 00:12:38,399
once the code runs in the application so

399
00:12:38,399 --> 00:12:38,800
with

400
00:12:38,800 --> 00:12:40,880
unstealable cookies i know unsealable is

401
00:12:40,880 --> 00:12:42,320
another word but it kind of expresses

402
00:12:42,320 --> 00:12:43,760
what i want to say here so

403
00:12:43,760 --> 00:12:45,760
if unstealable cookies are not secure

404
00:12:45,760 --> 00:12:47,040
because we used to have things like

405
00:12:47,040 --> 00:12:48,480
session writing where the attacker can

406
00:12:48,480 --> 00:12:50,560
send requests with cookies anyway

407
00:12:50,560 --> 00:12:52,800
what does that mean for tokens that are

408
00:12:52,800 --> 00:12:54,079
not kept out of reach

409
00:12:54,079 --> 00:12:57,440
for the attacker well the story isn't

410
00:12:57,440 --> 00:12:59,279
very good actually here's one attack

411
00:12:59,279 --> 00:13:02,079
scenario that circumvents refresh token

412
00:13:02,079 --> 00:13:04,160
rotation altogether

413
00:13:04,160 --> 00:13:06,639
so the app does what it did before

414
00:13:06,639 --> 00:13:09,120
handles tokens and the malicious code

415
00:13:09,120 --> 00:13:10,880
is injected at some point in time and

416
00:13:10,880 --> 00:13:13,200
steals the latest refresh token

417
00:13:13,200 --> 00:13:15,519
but it doesn't use it it just steals it

418
00:13:15,519 --> 00:13:17,519
and it sits on it

419
00:13:17,519 --> 00:13:19,200
and the app notices that the token is

420
00:13:19,200 --> 00:13:20,800
about to expire so it requests a new

421
00:13:20,800 --> 00:13:21,920
token

422
00:13:21,920 --> 00:13:24,959
use rt1 to get 82 and rt2

423
00:13:24,959 --> 00:13:26,720
and the malicious code sees like ooh you

424
00:13:26,720 --> 00:13:28,560
got a new refresh stroke and that's good

425
00:13:28,560 --> 00:13:30,399
let me steal that one as well i'm going

426
00:13:30,399 --> 00:13:32,480
to steal it but i'm not going to use it

427
00:13:32,480 --> 00:13:33,920
just going to send it off somewhere else

428
00:13:33,920 --> 00:13:36,560
in case we want to use it later

429
00:13:36,560 --> 00:13:38,800
and then the attacker code detects that

430
00:13:38,800 --> 00:13:40,560
users close the application

431
00:13:40,560 --> 00:13:42,000
you can listen to close events or you

432
00:13:42,000 --> 00:13:43,680
can have a heartbeat mechanism that

433
00:13:43,680 --> 00:13:45,360
sends a request every 10 seconds and if

434
00:13:45,360 --> 00:13:47,519
that stops then it's fair to assume that

435
00:13:47,519 --> 00:13:49,199
the application of the user has gone

436
00:13:49,199 --> 00:13:51,680
offline that has been closed at that

437
00:13:51,680 --> 00:13:53,120
point the application is no longer

438
00:13:53,120 --> 00:13:54,560
running in the browser of the user so

439
00:13:54,560 --> 00:13:56,880
the application is not going to use the

440
00:13:56,880 --> 00:13:59,680
latest refresh token rt2

441
00:13:59,680 --> 00:14:01,199
so the attacker can now be like oh i'm

442
00:14:01,199 --> 00:14:02,959
going to use rt2

443
00:14:02,959 --> 00:14:05,680
and i'm going to request token set 3 83

444
00:14:05,680 --> 00:14:06,720
and rt3

445
00:14:06,720 --> 00:14:09,199
and i'm going to get that and there's

446
00:14:09,199 --> 00:14:10,639
nothing to detect here because the

447
00:14:10,639 --> 00:14:12,160
application has been closed and the

448
00:14:12,160 --> 00:14:13,360
application will never

449
00:14:13,360 --> 00:14:16,560
reuse rt2

450
00:14:16,560 --> 00:14:19,920
so in this setup refresh token rotation

451
00:14:19,920 --> 00:14:22,240
is a useless defense just because we

452
00:14:22,240 --> 00:14:23,120
made the attacker

453
00:14:23,120 --> 00:14:25,680
a little bit smarter and made the attack

454
00:14:25,680 --> 00:14:26,560
a little bit more

455
00:14:26,560 --> 00:14:29,360
sophisticated that brings us to take

456
00:14:29,360 --> 00:14:31,760
away number two

457
00:14:31,760 --> 00:14:33,360
take away number two says that the

458
00:14:33,360 --> 00:14:34,959
attacker can do anything

459
00:14:34,959 --> 00:14:37,040
that you can do as a developer so if you

460
00:14:37,040 --> 00:14:38,639
can think of something as a developer

461
00:14:38,639 --> 00:14:40,399
the attacker can do exactly the same

462
00:14:40,399 --> 00:14:41,680
thing in the malicious code

463
00:14:41,680 --> 00:14:43,360
because the attacker has the full

464
00:14:43,360 --> 00:14:44,959
privileges

465
00:14:44,959 --> 00:14:47,120
that you have as a developer once that

466
00:14:47,120 --> 00:14:49,040
code executes and that's a very very

467
00:14:49,040 --> 00:14:50,000
important thing

468
00:14:50,000 --> 00:14:52,720
to realize

469
00:14:54,000 --> 00:14:57,279
so what can you do then well not much

470
00:14:57,279 --> 00:14:58,320
actually

471
00:14:58,320 --> 00:15:00,240
uh sorry about that well we'll get to a

472
00:15:00,240 --> 00:15:01,920
couple of solutions in in the

473
00:15:01,920 --> 00:15:03,680
in the second part of the presentation

474
00:15:03,680 --> 00:15:05,040
here

475
00:15:05,040 --> 00:15:06,560
one of the things you can do is you can

476
00:15:06,560 --> 00:15:08,959
make it a lot more difficult

477
00:15:08,959 --> 00:15:11,920
or you can reduce the number of things

478
00:15:11,920 --> 00:15:13,120
that can go wrong

479
00:15:13,120 --> 00:15:14,959
and one way to do that is use of a web

480
00:15:14,959 --> 00:15:16,160
broker

481
00:15:16,160 --> 00:15:17,519
and that's actually what some of the

482
00:15:17,519 --> 00:15:19,519
advanced out sdks

483
00:15:19,519 --> 00:15:21,360
are doing this example is based on the

484
00:15:21,360 --> 00:15:23,199
out zero sdk which is how you would

485
00:15:23,199 --> 00:15:24,560
implement

486
00:15:24,560 --> 00:15:27,920
outflows with 4.0 in your front-end web

487
00:15:27,920 --> 00:15:29,920
app like angular or react or whatever

488
00:15:29,920 --> 00:15:31,680
and that sdk once you load it it's a

489
00:15:31,680 --> 00:15:33,920
piece of javascript that sdk will launch

490
00:15:33,920 --> 00:15:35,040
a web worker

491
00:15:35,040 --> 00:15:37,120
and a web worker is a fully isolated

492
00:15:37,120 --> 00:15:38,880
environment in the browser

493
00:15:38,880 --> 00:15:42,240
that can run in in

494
00:15:42,240 --> 00:15:43,759
in parallel with the main application so

495
00:15:43,759 --> 00:15:45,600
it can do some calculations it can send

496
00:15:45,600 --> 00:15:47,120
requests and in this case

497
00:15:47,120 --> 00:15:49,440
it's going to keep that refresh token in

498
00:15:49,440 --> 00:15:50,560
a secure

499
00:15:50,560 --> 00:15:53,120
isolated environment so the steps here

500
00:15:53,120 --> 00:15:54,160
would be the sdk

501
00:15:54,160 --> 00:15:56,560
is bootstrapped and it starts in outflow

502
00:15:56,560 --> 00:15:58,160
don't worry about those details

503
00:15:58,160 --> 00:16:00,240
and it's going to ask the worker to

504
00:16:00,240 --> 00:16:02,000
handle the final step of that flow which

505
00:16:02,000 --> 00:16:03,680
will result in tokens

506
00:16:03,680 --> 00:16:06,480
so the tokens are the worker handles

507
00:16:06,480 --> 00:16:09,360
that tokens are returned in step four

508
00:16:09,360 --> 00:16:11,360
and are now available within that

509
00:16:11,360 --> 00:16:14,240
webworker nowhere else

510
00:16:14,240 --> 00:16:16,959
in the web worker the refresh token is

511
00:16:16,959 --> 00:16:18,880
kept securely and the access token

512
00:16:18,880 --> 00:16:20,880
the one that is used by the application

513
00:16:20,880 --> 00:16:23,360
to contact apis that one is shared back

514
00:16:23,360 --> 00:16:25,199
with the main application so the

515
00:16:25,199 --> 00:16:27,120
application only has an access token no

516
00:16:27,120 --> 00:16:29,040
refresh token

517
00:16:29,040 --> 00:16:30,639
what if we need to use a refresh token

518
00:16:30,639 --> 00:16:32,720
well the application will ask the web

519
00:16:32,720 --> 00:16:34,480
worker to use its refresh token

520
00:16:34,480 --> 00:16:36,320
the web worker will run a refresh token

521
00:16:36,320 --> 00:16:38,160
flow with the authorization server get

522
00:16:38,160 --> 00:16:40,160
new tokens in step 8

523
00:16:40,160 --> 00:16:42,160
keep the refresh token and return the

524
00:16:42,160 --> 00:16:43,600
access token to the main

525
00:16:43,600 --> 00:16:46,320
application and that's essentially how

526
00:16:46,320 --> 00:16:47,920
you would use a web worker

527
00:16:47,920 --> 00:16:51,120
in practice a very solid isolation

528
00:16:51,120 --> 00:16:51,759
mechanism

529
00:16:51,759 --> 00:16:53,920
fully handled within the browser so it

530
00:16:53,920 --> 00:16:55,360
doesn't require too much code

531
00:16:55,360 --> 00:16:58,399
to use or benefit from this isolation

532
00:16:58,399 --> 00:17:01,360
that's actually pretty awesome this is a

533
00:17:01,360 --> 00:17:03,120
really good pattern by the way this is

534
00:17:03,120 --> 00:17:05,039
a job well done by the library

535
00:17:05,039 --> 00:17:08,400
developers this is absolutely great

536
00:17:08,400 --> 00:17:10,720
so sensitive tokens are only available

537
00:17:10,720 --> 00:17:11,439
in the worker

538
00:17:11,439 --> 00:17:14,160
there's no advertisements no third-party

539
00:17:14,160 --> 00:17:16,160
code no nothing in that worker so this

540
00:17:16,160 --> 00:17:17,520
is actually a pretty secure

541
00:17:17,520 --> 00:17:19,919
environment and we use the web messaging

542
00:17:19,919 --> 00:17:21,919
api to enable interaction

543
00:17:21,919 --> 00:17:23,599
so this is takeaway number three this is

544
00:17:23,599 --> 00:17:25,359
actually a really good pattern

545
00:17:25,359 --> 00:17:27,280
to isolate sensitive functionality from

546
00:17:27,280 --> 00:17:29,440
the main application context

547
00:17:29,440 --> 00:17:31,360
it doesn't really solve the full problem

548
00:17:31,360 --> 00:17:33,039
but it makes it a lot more

549
00:17:33,039 --> 00:17:35,120
difficult or even virtually impossible

550
00:17:35,120 --> 00:17:37,360
for the attacker to steal that refresh

551
00:17:37,360 --> 00:17:38,000
token

552
00:17:38,000 --> 00:17:39,679
from that worker environment that's a

553
00:17:39,679 --> 00:17:44,240
good approach that's a good solution

554
00:17:44,840 --> 00:17:48,559
however like i said not an easy topic

555
00:17:48,559 --> 00:17:50,720
we still expose the access token in step

556
00:17:50,720 --> 00:17:53,360
5 and 9. so if malicious code runs in

557
00:17:53,360 --> 00:17:55,679
the applications context it can still

558
00:17:55,679 --> 00:17:58,799
intercept and steal those access tokens

559
00:17:58,799 --> 00:18:01,039
even if you try really hard to not

560
00:18:01,039 --> 00:18:02,559
expose them

561
00:18:02,559 --> 00:18:04,000
i actually wrote an article about that

562
00:18:04,000 --> 00:18:05,919
on my website so you can look this up

563
00:18:05,919 --> 00:18:06,960
and find that

564
00:18:06,960 --> 00:18:08,720
even if you try to hide it there will be

565
00:18:08,720 --> 00:18:10,320
a way for the attacker to override

566
00:18:10,320 --> 00:18:11,520
javascript functions

567
00:18:11,520 --> 00:18:14,000
through prototype pollution and steal

568
00:18:14,000 --> 00:18:16,000
that information one way or the other

569
00:18:16,000 --> 00:18:18,720
so brings us back we're gonna go

570
00:18:18,720 --> 00:18:19,760
backwards one step

571
00:18:19,760 --> 00:18:22,480
to take away number two if you can think

572
00:18:22,480 --> 00:18:24,240
of something the attacker can likely do

573
00:18:24,240 --> 00:18:25,360
the same thing

574
00:18:25,360 --> 00:18:28,400
in their code as well it's really really

575
00:18:28,400 --> 00:18:31,919
really hard to isolate tokens within

576
00:18:31,919 --> 00:18:33,679
a javascript environment if you don't

577
00:18:33,679 --> 00:18:35,679
have browser and force boundaries like

578
00:18:35,679 --> 00:18:37,280
the webworker's boundary

579
00:18:37,280 --> 00:18:40,640
in our example from before it actually

580
00:18:40,640 --> 00:18:42,799
gets a little bit worse

581
00:18:42,799 --> 00:18:44,480
because if the effect can do all of that

582
00:18:44,480 --> 00:18:47,679
stuff what else can they do

583
00:18:47,679 --> 00:18:50,320
and there's a scenario it quite frankly

584
00:18:50,320 --> 00:18:51,760
scares the crap out of me

585
00:18:51,760 --> 00:18:53,120
where the attacker doesn't even touch

586
00:18:53,120 --> 00:18:55,679
the legitimate applications tokens

587
00:18:55,679 --> 00:18:57,280
so your legitimate application your

588
00:18:57,280 --> 00:19:00,160
front end handles

589
00:19:00,160 --> 00:19:01,760
running of an outflow with the

590
00:19:01,760 --> 00:19:03,600
authorization server that's step one

591
00:19:03,600 --> 00:19:04,240
well

592
00:19:04,240 --> 00:19:06,080
in reality step one is actually like 15

593
00:19:06,080 --> 00:19:07,840
steps or something but don't worry about

594
00:19:07,840 --> 00:19:08,480
those

595
00:19:08,480 --> 00:19:09,840
in practice but in the end the

596
00:19:09,840 --> 00:19:11,600
application is going to get tokens maybe

597
00:19:11,600 --> 00:19:13,200
with the sdk and the web worker and

598
00:19:13,200 --> 00:19:16,160
fully isolated and so on and so on

599
00:19:16,160 --> 00:19:18,559
however during that process during that

600
00:19:18,559 --> 00:19:19,360
flow

601
00:19:19,360 --> 00:19:21,200
somewhere the authorization server has

602
00:19:21,200 --> 00:19:23,280
stored a cookie in the browser to enable

603
00:19:23,280 --> 00:19:25,360
things like single sign-on and

604
00:19:25,360 --> 00:19:26,960
remembering a session and so on and so

605
00:19:26,960 --> 00:19:28,559
on so that's the authorization server

606
00:19:28,559 --> 00:19:30,160
where the user would have authenticated

607
00:19:30,160 --> 00:19:32,240
that one still relies on cookies

608
00:19:32,240 --> 00:19:33,919
under the hood to keep track of a

609
00:19:33,919 --> 00:19:35,840
session one way or another

610
00:19:35,840 --> 00:19:37,840
that's the legitimate setup that's how

611
00:19:37,840 --> 00:19:40,080
all of these oauth and oidc

612
00:19:40,080 --> 00:19:43,840
implementations work in practice now

613
00:19:43,840 --> 00:19:46,720
our attacker the attacker injects a

614
00:19:46,720 --> 00:19:47,679
piece of

615
00:19:47,679 --> 00:19:50,559
malicious javascript code remember the

616
00:19:50,559 --> 00:19:51,919
application is doing its thing it has an

617
00:19:51,919 --> 00:19:53,360
access token and a refresh token but the

618
00:19:53,360 --> 00:19:54,880
attacker is like yeah i don't care

619
00:19:54,880 --> 00:19:56,880
you do you i'll i'll do mighty and the

620
00:19:56,880 --> 00:19:58,559
attacker in this case will

621
00:19:58,559 --> 00:20:00,320
set up a listener to receive messages

622
00:20:00,320 --> 00:20:02,400
from a frame that's a technical detail

623
00:20:02,400 --> 00:20:06,080
and it will run a new flow in a frame

624
00:20:06,080 --> 00:20:08,000
the frame is the box here that frame is

625
00:20:08,000 --> 00:20:10,080
hidden it's called a silent

626
00:20:10,080 --> 00:20:11,760
authentication flow because it's a

627
00:20:11,760 --> 00:20:13,600
background frame that's invisible to the

628
00:20:13,600 --> 00:20:14,080
user

629
00:20:14,080 --> 00:20:16,240
and in that frame the attacker will run

630
00:20:16,240 --> 00:20:18,960
a flow with the authorization server

631
00:20:18,960 --> 00:20:20,880
and in step four there's something very

632
00:20:20,880 --> 00:20:22,480
crucial happening

633
00:20:22,480 --> 00:20:25,360
because of how this protocol works with

634
00:20:25,360 --> 00:20:26,080
the cookie

635
00:20:26,080 --> 00:20:27,840
kept by the browser the browser will

636
00:20:27,840 --> 00:20:30,159
include that cookie in step four

637
00:20:30,159 --> 00:20:32,000
that's how the authorization server

638
00:20:32,000 --> 00:20:33,679
knows who the user is

639
00:20:33,679 --> 00:20:35,919
when i'm running this in my browser i'm

640
00:20:35,919 --> 00:20:37,600
going to authenticate as philip in step

641
00:20:37,600 --> 00:20:39,200
one and in step four the authorizations

642
00:20:39,200 --> 00:20:40,480
are like i know who you are you were

643
00:20:40,480 --> 00:20:40,880
philippe

644
00:20:40,880 --> 00:20:43,200
10 minutes ago so welcome back and it's

645
00:20:43,200 --> 00:20:44,559
not going to ask me again it's just

646
00:20:44,559 --> 00:20:46,400
going to return tokens

647
00:20:46,400 --> 00:20:48,400
well a code which are tokens and so on

648
00:20:48,400 --> 00:20:50,960
so on giving the attacker

649
00:20:50,960 --> 00:20:53,039
a new set of tokens in step six that's

650
00:20:53,039 --> 00:20:54,799
basically what happens here

651
00:20:54,799 --> 00:20:57,600
because if you can do it the attacker

652
00:20:57,600 --> 00:20:58,400
can do it

653
00:20:58,400 --> 00:21:01,440
that's the key takeaway here

654
00:21:01,440 --> 00:21:03,679
if you can do something like running a

655
00:21:03,679 --> 00:21:05,840
flow in in an iframe to get tokens which

656
00:21:05,840 --> 00:21:06,880
is supported by oh

657
00:21:06,880 --> 00:21:08,799
the attacker can do the same thing and

658
00:21:08,799 --> 00:21:12,320
there's nothing you can do to stop that

659
00:21:15,360 --> 00:21:17,600
key takeaways three very important

660
00:21:17,600 --> 00:21:19,120
things

661
00:21:19,120 --> 00:21:21,360
malicious code can do a lot more than a

662
00:21:21,360 --> 00:21:23,360
single action that's a very very common

663
00:21:23,360 --> 00:21:24,559
misconception

664
00:21:24,559 --> 00:21:27,520
even in a world of go out where a lot of

665
00:21:27,520 --> 00:21:29,360
smart people are building specs even

666
00:21:29,360 --> 00:21:30,000
there

667
00:21:30,000 --> 00:21:32,159
defenses often focus on this one problem

668
00:21:32,159 --> 00:21:33,520
instead of looking at the bigger picture

669
00:21:33,520 --> 00:21:35,520
of what malicious code can do

670
00:21:35,520 --> 00:21:37,280
malicious code can do anything a

671
00:21:37,280 --> 00:21:39,039
legitimate front-end can do

672
00:21:39,039 --> 00:21:42,960
anything you can think of is possible

673
00:21:43,039 --> 00:21:45,039
the best piece of advice i have here is

674
00:21:45,039 --> 00:21:46,159
focus on

675
00:21:46,159 --> 00:21:48,240
cross-site scripting mitigations prevent

676
00:21:48,240 --> 00:21:49,919
the execution of the malicious code in

677
00:21:49,919 --> 00:21:51,840
the first place

678
00:21:51,840 --> 00:21:53,919
by following secure coding guidelines

679
00:21:53,919 --> 00:21:56,240
and applying defense in-depth mechanisms

680
00:21:56,240 --> 00:21:58,000
like trusted types and content security

681
00:21:58,000 --> 00:22:02,640
policy and so on and so on all right

682
00:22:02,640 --> 00:22:04,159
well i'm not done yet this would be a

683
00:22:04,159 --> 00:22:05,840
very depressing end so these were the

684
00:22:05,840 --> 00:22:07,120
key takeaways so far

685
00:22:07,120 --> 00:22:10,400
i have one more topic i want to discuss

686
00:22:10,400 --> 00:22:12,640
which gives us a bit more hope towards

687
00:22:12,640 --> 00:22:14,960
the future

688
00:22:14,960 --> 00:22:17,039
so how can you handle token securely in

689
00:22:17,039 --> 00:22:18,960
a front-end application well

690
00:22:18,960 --> 00:22:21,440
honestly you can't that's the conclusion

691
00:22:21,440 --> 00:22:23,039
here you cannot do this

692
00:22:23,039 --> 00:22:24,640
because if your application runs

693
00:22:24,640 --> 00:22:26,640
javascript code and the attacker runs

694
00:22:26,640 --> 00:22:28,240
javascript going in the same environment

695
00:22:28,240 --> 00:22:30,159
there's no way to

696
00:22:30,159 --> 00:22:32,000
isolate these from each other in a

697
00:22:32,000 --> 00:22:33,919
practical way

698
00:22:33,919 --> 00:22:36,000
so the solution that we often use in

699
00:22:36,000 --> 00:22:37,600
practice for sensitive single page

700
00:22:37,600 --> 00:22:39,120
applications is to not

701
00:22:39,120 --> 00:22:41,280
handle tokens in the browser we keep

702
00:22:41,280 --> 00:22:43,919
them on a server component which we call

703
00:22:43,919 --> 00:22:44,799
a back-end

704
00:22:44,799 --> 00:22:48,000
for front-end or a bff in short

705
00:22:48,000 --> 00:22:51,679
and a bff is a i want to say dumb but

706
00:22:51,679 --> 00:22:55,360
that's not the right word a very

707
00:22:55,360 --> 00:22:58,559
very non-complicated component that

708
00:22:58,559 --> 00:22:59,200
doesn't do

709
00:22:59,200 --> 00:23:01,440
anything business logic related the only

710
00:23:01,440 --> 00:23:02,960
thing it does it's kind of a reverse

711
00:23:02,960 --> 00:23:04,159
proxy between the front

712
00:23:04,159 --> 00:23:08,480
and the api so our bff becomes

713
00:23:08,480 --> 00:23:10,799
the client application in a lot flow so

714
00:23:10,799 --> 00:23:11,600
it basically

715
00:23:11,600 --> 00:23:13,600
that's the part that will request tokens

716
00:23:13,600 --> 00:23:15,200
from that authorization server

717
00:23:15,200 --> 00:23:17,679
and keeps those tokens in a secure

718
00:23:17,679 --> 00:23:19,520
location

719
00:23:19,520 --> 00:23:21,360
tokens are handled in the backends much

720
00:23:21,360 --> 00:23:22,480
better security properties in the

721
00:23:22,480 --> 00:23:23,840
browser you don't have to

722
00:23:23,840 --> 00:23:26,640
drop them in local storage or whatever

723
00:23:26,640 --> 00:23:27,200
and

724
00:23:27,200 --> 00:23:29,200
what's even better is the refresh token

725
00:23:29,200 --> 00:23:31,039
used in this scenario can only be used

726
00:23:31,039 --> 00:23:32,640
by that back-end application

727
00:23:32,640 --> 00:23:34,799
even if somebody steals it without the

728
00:23:34,799 --> 00:23:36,880
credentials of that back-end application

729
00:23:36,880 --> 00:23:38,400
that bff and attacker will not be able

730
00:23:38,400 --> 00:23:39,120
to abuse

731
00:23:39,120 --> 00:23:42,720
those tokens good

732
00:23:42,720 --> 00:23:44,559
how do the front and the bff communicate

733
00:23:44,559 --> 00:23:46,320
well you typically run these in the same

734
00:23:46,320 --> 00:23:48,720
domain

735
00:23:48,840 --> 00:23:51,120
rastergrate.com would be an endpoint for

736
00:23:51,120 --> 00:23:52,080
the bff

737
00:23:52,080 --> 00:23:54,080
so if it runs in the same domain you can

738
00:23:54,080 --> 00:23:56,640
easily use cookies to track states

739
00:23:56,640 --> 00:23:59,360
and cookies doesn't necessarily mean it

740
00:23:59,360 --> 00:24:01,120
has to be a stateful

741
00:24:01,120 --> 00:24:02,880
backend application you can also use

742
00:24:02,880 --> 00:24:04,720
encrypted cookies that store data

743
00:24:04,720 --> 00:24:07,279
on the browser but what's important is

744
00:24:07,279 --> 00:24:08,240
that this bff

745
00:24:08,240 --> 00:24:10,240
is the only one able to extract the data

746
00:24:10,240 --> 00:24:11,360
from that cookie

747
00:24:11,360 --> 00:24:14,640
validate it and use it in practice

748
00:24:14,640 --> 00:24:16,159
how would you send a request to an api

749
00:24:16,159 --> 00:24:18,799
well the front-end sends it to the bff

750
00:24:18,799 --> 00:24:20,640
in a request carrying a cookie and the

751
00:24:20,640 --> 00:24:22,880
bff will unpack that cookie find the

752
00:24:22,880 --> 00:24:25,520
tokens use or make sure the tokens are

753
00:24:25,520 --> 00:24:26,880
valid and then send

754
00:24:26,880 --> 00:24:29,760
a request to the api that's essentially

755
00:24:29,760 --> 00:24:31,360
how this would work in practice

756
00:24:31,360 --> 00:24:33,360
and the response from the api of course

757
00:24:33,360 --> 00:24:35,600
would be propagated back to that

758
00:24:35,600 --> 00:24:37,760
frontline application

759
00:24:37,760 --> 00:24:39,840
making it possible to do whatever it

760
00:24:39,840 --> 00:24:41,039
wants to do

761
00:24:41,039 --> 00:24:42,799
and in a nutshell this setup this

762
00:24:42,799 --> 00:24:45,279
scenario

763
00:24:45,279 --> 00:24:46,880
it doesn't really change much on the

764
00:24:46,880 --> 00:24:48,559
front-end side actually your front-end

765
00:24:48,559 --> 00:24:49,279
gets easier

766
00:24:49,279 --> 00:24:51,279
you can take out the oauth stuff throw

767
00:24:51,279 --> 00:24:52,640
it away

768
00:24:52,640 --> 00:24:54,159
and change the endpoint for your api

769
00:24:54,159 --> 00:24:55,600
calls and that's it that's the only

770
00:24:55,600 --> 00:24:56,880
thing you have to change everything else

771
00:24:56,880 --> 00:24:57,760
remains the same

772
00:24:57,760 --> 00:24:59,360
and on the api side of things things

773
00:24:59,360 --> 00:25:01,360
don't change either the api

774
00:25:01,360 --> 00:25:03,360
all the way on the right just handles a

775
00:25:03,360 --> 00:25:05,039
request with an access token just like

776
00:25:05,039 --> 00:25:05,520
it

777
00:25:05,520 --> 00:25:07,760
it did before and the authorization

778
00:25:07,760 --> 00:25:09,200
server doesn't really change

779
00:25:09,200 --> 00:25:10,480
it's a different type of client but

780
00:25:10,480 --> 00:25:12,480
that's just a matter of configuration

781
00:25:12,480 --> 00:25:15,039
so all we need is a simple bff component

782
00:25:15,039 --> 00:25:15,919
well simple

783
00:25:15,919 --> 00:25:18,559
this bff component that is able to

784
00:25:18,559 --> 00:25:20,320
translate

785
00:25:20,320 --> 00:25:23,200
a cookie value into an access token

786
00:25:23,200 --> 00:25:25,679
essentially

787
00:25:26,880 --> 00:25:30,720
brings us to takeaway number four bffs

788
00:25:30,720 --> 00:25:32,880
keep tokens out of the browser which

789
00:25:32,880 --> 00:25:34,960
significantly increases security

790
00:25:34,960 --> 00:25:38,559
that's the reality yes it's

791
00:25:38,559 --> 00:25:40,799
less fun let's use the nice work here

792
00:25:40,799 --> 00:25:41,679
less fun

793
00:25:41,679 --> 00:25:43,679
to build a bff and deploy that because

794
00:25:43,679 --> 00:25:45,200
it's an additional component but it's

795
00:25:45,200 --> 00:25:47,120
also not a very complicated or large

796
00:25:47,120 --> 00:25:47,840
component

797
00:25:47,840 --> 00:25:49,679
and it's a component that can be easily

798
00:25:49,679 --> 00:25:51,039
reused across different

799
00:25:51,039 --> 00:25:52,720
front-end applications because it always

800
00:25:52,720 --> 00:25:54,799
does the same thing basically

801
00:25:54,799 --> 00:25:56,320
there's one attack factor that doesn't

802
00:25:56,320 --> 00:25:57,919
go away and that's a session

803
00:25:57,919 --> 00:26:00,320
writing problem that's if somebody

804
00:26:00,320 --> 00:26:02,400
injects malicious code into the front

805
00:26:02,400 --> 00:26:04,320
end they can still send requests to the

806
00:26:04,320 --> 00:26:05,200
bff

807
00:26:05,200 --> 00:26:07,279
pretending to be legitimate application

808
00:26:07,279 --> 00:26:08,799
that's the same challenge we had with

809
00:26:08,799 --> 00:26:10,480
cookies before and that's a challenge we

810
00:26:10,480 --> 00:26:11,279
can't

811
00:26:11,279 --> 00:26:14,640
solve in any way however

812
00:26:14,640 --> 00:26:16,720
with that said what happens in this

813
00:26:16,720 --> 00:26:18,640
setup is that all requests have to go

814
00:26:18,640 --> 00:26:20,159
through the bff so you have an

815
00:26:20,159 --> 00:26:21,760
additional point of control

816
00:26:21,760 --> 00:26:23,679
that can observe our requests so it

817
00:26:23,679 --> 00:26:24,960
could see

818
00:26:24,960 --> 00:26:27,760
weird things if the application sends

819
00:26:27,760 --> 00:26:28,559
requests like

820
00:26:28,559 --> 00:26:30,720
once every 10 seconds and all of a

821
00:26:30,720 --> 00:26:32,400
sudden you get a burst of requests for

822
00:26:32,400 --> 00:26:33,520
10 000 requests

823
00:26:33,520 --> 00:26:36,720
in five seconds the bff can assume that

824
00:26:36,720 --> 00:26:38,080
something is wrong that maybe somebody

825
00:26:38,080 --> 00:26:39,760
is trying to extract data from the api

826
00:26:39,760 --> 00:26:41,120
or something like that

827
00:26:41,120 --> 00:26:44,240
and that would be a way to detect that

828
00:26:44,240 --> 00:26:47,440
and maybe prevent that from happening

829
00:26:47,440 --> 00:26:49,360
so the bff reduces the attack surface

830
00:26:49,360 --> 00:26:50,480
but it never takes

831
00:26:50,480 --> 00:26:52,720
the session writing problems away

832
00:26:52,720 --> 00:26:54,000
altogether which means

833
00:26:54,000 --> 00:26:55,520
you still have to focus on secure coding

834
00:26:55,520 --> 00:26:57,520
guidelines and defense and that

835
00:26:57,520 --> 00:26:58,960
mechanisms

836
00:26:58,960 --> 00:27:00,960
and that brings me to the real takeaways

837
00:27:00,960 --> 00:27:02,400
here

838
00:27:02,400 --> 00:27:04,320
if you're building a non-sensitive

839
00:27:04,320 --> 00:27:06,559
single page application

840
00:27:06,559 --> 00:27:08,400
i would say you can handle tokens in the

841
00:27:08,400 --> 00:27:10,559
browser the approach with refresh token

842
00:27:10,559 --> 00:27:11,760
rotation it's not

843
00:27:11,760 --> 00:27:15,919
bad it's just not as

844
00:27:16,159 --> 00:27:18,480
secure as we would like it to be so if

845
00:27:18,480 --> 00:27:19,760
you're building something non-sensitive

846
00:27:19,760 --> 00:27:20,720
that doesn't handle

847
00:27:20,720 --> 00:27:22,559
personal data financial data whatever

848
00:27:22,559 --> 00:27:23,760
then sure

849
00:27:23,760 --> 00:27:25,520
just use the best practices for oauth

850
00:27:25,520 --> 00:27:27,200
and you're good to go if you're building

851
00:27:27,200 --> 00:27:28,240
something sensitive

852
00:27:28,240 --> 00:27:30,480
healthcare apps business apps something

853
00:27:30,480 --> 00:27:32,480
like that strongly consider to keep

854
00:27:32,480 --> 00:27:34,480
tokens out of the browser with the bff

855
00:27:34,480 --> 00:27:38,000
it's the only real way of ensuring that

856
00:27:38,000 --> 00:27:40,000
malicious code cannot simply request

857
00:27:40,000 --> 00:27:41,679
new tokens and ship them off somewhere

858
00:27:41,679 --> 00:27:43,679
else and thirdly

859
00:27:43,679 --> 00:27:45,760
you can if you use a bff you can detect

860
00:27:45,760 --> 00:27:47,520
and block illegitimate traffic patterns

861
00:27:47,520 --> 00:27:48,559
you can reduce

862
00:27:48,559 --> 00:27:50,399
the number of api endpoints that can be

863
00:27:50,399 --> 00:27:52,480
accessed and so on and so on so it gives

864
00:27:52,480 --> 00:27:53,200
you

865
00:27:53,200 --> 00:27:55,279
more control if you want to get that

866
00:27:55,279 --> 00:27:57,120
done in practice

867
00:27:57,120 --> 00:28:00,880
all right a couple of references to

868
00:28:00,880 --> 00:28:02,960
wrap up the article i mentioned the link

869
00:28:02,960 --> 00:28:04,399
is right here on the slides

870
00:28:04,399 --> 00:28:05,880
there's also a link to a

871
00:28:05,880 --> 00:28:07,919
bffmiddlewarefor.net by duende

872
00:28:07,919 --> 00:28:11,120
um it's a really good approach

873
00:28:11,120 --> 00:28:12,720
um a good library so if you want to see

874
00:28:12,720 --> 00:28:14,320
a concrete implementation

875
00:28:14,320 --> 00:28:16,480
of middleware for building bffs

876
00:28:16,480 --> 00:28:18,000
definitely check it out

877
00:28:18,000 --> 00:28:20,399
and if you want to learn more about the

878
00:28:20,399 --> 00:28:22,640
intricate details of oauth and trust me

879
00:28:22,640 --> 00:28:23,840
there are a lot

880
00:28:23,840 --> 00:28:25,440
i also have an online course that you

881
00:28:25,440 --> 00:28:26,960
can join

882
00:28:26,960 --> 00:28:28,960
to learn all about the current best

883
00:28:28,960 --> 00:28:30,880
practices for oauth and oidc

884
00:28:30,880 --> 00:28:33,760
in single page applications and an api

885
00:28:33,760 --> 00:28:34,399
world

886
00:28:34,399 --> 00:28:35,679
and with that i want to thank you for

887
00:28:35,679 --> 00:28:37,679
watching i want to invite you to connect

888
00:28:37,679 --> 00:28:38,960
with me on twitter and

889
00:28:38,960 --> 00:28:41,760
linkedin and if you have any questions

890
00:28:41,760 --> 00:28:43,279
you can always ask them

891
00:28:43,279 --> 00:28:45,679
in the conference environment after the

892
00:28:45,679 --> 00:28:46,399
session

893
00:28:46,399 --> 00:28:53,360
all right

