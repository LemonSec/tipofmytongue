1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,320 --> 00:00:12,639
hi

3
00:00:12,639 --> 00:00:15,920
everyone from india i am priyam sang so

4
00:00:15,920 --> 00:00:18,560
firstly thank you to all the organizers

5
00:00:18,560 --> 00:00:21,039
you have done a fantastic job and

6
00:00:21,039 --> 00:00:22,960
putting on this event

7
00:00:22,960 --> 00:00:25,920
and thanks as well to sponsors and

8
00:00:25,920 --> 00:00:27,439
attendees

9
00:00:27,439 --> 00:00:30,480
for turning up even virtually uh

10
00:00:30,480 --> 00:00:33,520
like a little about me

11
00:00:33,520 --> 00:00:37,280
so i am uh devsicops engineer at

12
00:00:37,280 --> 00:00:40,079
cloudell cloudell is an easy to use

13
00:00:40,079 --> 00:00:42,559
cloud native security monitoring sas

14
00:00:42,559 --> 00:00:45,760
platform and i also contribute to

15
00:00:45,760 --> 00:00:47,120
communities such as

16
00:00:47,120 --> 00:00:50,320
null it is an open security community

17
00:00:50,320 --> 00:00:54,960
i am also chapter lead at chandigarh

18
00:00:56,840 --> 00:00:58,320
infosuc about

19
00:00:58,320 --> 00:01:01,680
information security uh at the last but

20
00:01:01,680 --> 00:01:03,920
not the least i am a student of final

21
00:01:03,920 --> 00:01:06,080
year graduation

22
00:01:06,080 --> 00:01:09,200
so this is all about me let's get

23
00:01:09,200 --> 00:01:10,880
started with

24
00:01:10,880 --> 00:01:14,080
agenda of the session

25
00:01:14,560 --> 00:01:16,560
uh firstly we will talk about what is

26
00:01:16,560 --> 00:01:17,680
steps of corpse

27
00:01:17,680 --> 00:01:20,720
uh what is steps of ci cd pipeline

28
00:01:20,720 --> 00:01:24,320
and what we mean by ci cd also about

29
00:01:24,320 --> 00:01:25,520
these stages

30
00:01:25,520 --> 00:01:28,560
of pipeline approach and implementation

31
00:01:28,560 --> 00:01:32,320
at the last the key points

32
00:01:34,320 --> 00:01:37,200
next comes a quick disclaimer that in

33
00:01:37,200 --> 00:01:38,240
the talk uh

34
00:01:38,240 --> 00:01:40,560
in this session i will be talking a lot

35
00:01:40,560 --> 00:01:41,840
about tools

36
00:01:41,840 --> 00:01:44,720
so i don't recommend any tools it's just

37
00:01:44,720 --> 00:01:46,560
i have used it because

38
00:01:46,560 --> 00:01:50,159
i find it suitable for my my application

39
00:01:50,159 --> 00:01:52,720
or for my software the language it was

40
00:01:52,720 --> 00:01:54,079
there or the environment

41
00:01:54,079 --> 00:01:57,200
i was using so for you it completely

42
00:01:57,200 --> 00:01:59,600
depends upon which tool you choose or

43
00:01:59,600 --> 00:02:02,320
which application you are working on

44
00:02:02,320 --> 00:02:04,880
so let's start with def circles uh what

45
00:02:04,880 --> 00:02:08,239
do we mean by depth accounts

46
00:02:08,239 --> 00:02:11,200
devsocorps is development security and

47
00:02:11,200 --> 00:02:12,000
operations

48
00:02:12,000 --> 00:02:14,800
there for development uh cybersecurity

49
00:02:14,800 --> 00:02:16,640
and oxford operation

50
00:02:16,640 --> 00:02:19,599
so depths of course promotes security as

51
00:02:19,599 --> 00:02:22,000
a shared responsibility culture

52
00:02:22,000 --> 00:02:23,920
where in security is not a

53
00:02:23,920 --> 00:02:26,319
responsibility for only one specific

54
00:02:26,319 --> 00:02:28,319
team or only one person

55
00:02:28,319 --> 00:02:30,879
but everyone in the team is accountable

56
00:02:30,879 --> 00:02:32,080
for security

57
00:02:32,080 --> 00:02:35,200
so def circles aim to integrate

58
00:02:35,200 --> 00:02:38,560
security controls in the early stage

59
00:02:38,560 --> 00:02:41,040
uh of software development or the

60
00:02:41,040 --> 00:02:42,480
application build

61
00:02:42,480 --> 00:02:45,120
rather than implementing it at the end

62
00:02:45,120 --> 00:02:45,760
so

63
00:02:45,760 --> 00:02:48,720
it integrates security measures from the

64
00:02:48,720 --> 00:02:50,000
start of development

65
00:02:50,000 --> 00:02:52,080
instead of in the last once the

66
00:02:52,080 --> 00:02:53,440
deployment of the

67
00:02:53,440 --> 00:02:55,840
application is done we come forward and

68
00:02:55,840 --> 00:02:57,760
do the security part

69
00:02:57,760 --> 00:03:00,959
and we like waste much of time or

70
00:03:00,959 --> 00:03:02,879
the resources are wasted it is better

71
00:03:02,879 --> 00:03:04,000
that we identify

72
00:03:04,000 --> 00:03:05,920
in the starting of the software

73
00:03:05,920 --> 00:03:07,120
development where

74
00:03:07,120 --> 00:03:12,560
we started then comes

75
00:03:12,959 --> 00:03:15,760
the second point we automate security

76
00:03:15,760 --> 00:03:16,480
with the

77
00:03:16,480 --> 00:03:19,920
latest tools and concepts at every level

78
00:03:19,920 --> 00:03:23,760
so earlier we don't used to have any

79
00:03:23,760 --> 00:03:26,159
feedbacks when we have waterfall model

80
00:03:26,159 --> 00:03:29,680
or when we were having agile model but

81
00:03:29,680 --> 00:03:32,400
after that we came depth offs where the

82
00:03:32,400 --> 00:03:33,440
gap was

83
00:03:33,440 --> 00:03:36,560
uh reduced and we started getting

84
00:03:36,560 --> 00:03:38,319
feedbacks after that deficit

85
00:03:38,319 --> 00:03:40,640
scale when which the feedbacks are there

86
00:03:40,640 --> 00:03:42,400
and we can do the improvements

87
00:03:42,400 --> 00:03:45,200
uh then and there and security is

88
00:03:45,200 --> 00:03:47,839
integrated

89
00:03:49,840 --> 00:03:52,239
so we can also define as integrating

90
00:03:52,239 --> 00:03:54,879
security practices with the devops

91
00:03:54,879 --> 00:03:58,159
process and adding sec to devops

92
00:03:58,159 --> 00:04:01,680
forms that have devops instead

93
00:04:01,680 --> 00:04:04,560
security and it gives the forms it

94
00:04:04,560 --> 00:04:07,120
absolutes

95
00:04:07,120 --> 00:04:10,799
uh what is repsicorp's ci cd pipeline

96
00:04:10,799 --> 00:04:14,239
uh as steps ops refers to integrity

97
00:04:14,239 --> 00:04:15,280
security

98
00:04:15,280 --> 00:04:17,120
into your software development life

99
00:04:17,120 --> 00:04:19,839
cycle so our depths accounts pipeline is

100
00:04:19,839 --> 00:04:22,560
a set of security practices

101
00:04:22,560 --> 00:04:26,080
which are incorporated into use

102
00:04:26,080 --> 00:04:29,040
sdlc so sdlc is software development

103
00:04:29,040 --> 00:04:30,320
life cycle

104
00:04:30,320 --> 00:04:33,759
uh to build and test and deploy a secure

105
00:04:33,759 --> 00:04:34,960
software faster

106
00:04:34,960 --> 00:04:38,240
and easier so there are advantages of

107
00:04:38,240 --> 00:04:38,560
the

108
00:04:38,560 --> 00:04:40,880
depths of the icd pipeline these

109
00:04:40,880 --> 00:04:42,000
advantages are

110
00:04:42,000 --> 00:04:44,880
like first is earlier identification of

111
00:04:44,880 --> 00:04:46,720
security vulnerabilities

112
00:04:46,720 --> 00:04:49,840
and we don't have to wait till the last

113
00:04:49,840 --> 00:04:52,880
stage it can be identified early only

114
00:04:52,880 --> 00:04:55,600
and improved speed and agility for

115
00:04:55,600 --> 00:04:56,800
security teams

116
00:04:56,800 --> 00:05:00,000
and the development of the software is

117
00:05:00,000 --> 00:05:01,199
secure

118
00:05:01,199 --> 00:05:04,479
and the speed is increased

119
00:05:04,479 --> 00:05:06,960
so firstly we will know like what we

120
00:05:06,960 --> 00:05:11,840
mean by actually ci cd words

121
00:05:14,240 --> 00:05:17,039
the ci in the ci cd is continuous

122
00:05:17,039 --> 00:05:17,840
integration

123
00:05:17,840 --> 00:05:20,960
and it always refers to

124
00:05:20,960 --> 00:05:23,520
like which is an automation process for

125
00:05:23,520 --> 00:05:25,680
developers successfully ci means

126
00:05:25,680 --> 00:05:28,960
the new code changes to an application

127
00:05:28,960 --> 00:05:31,919
or a software that are regularly built

128
00:05:31,919 --> 00:05:32,639
tested

129
00:05:32,639 --> 00:05:35,919
and merged to a shared repository

130
00:05:35,919 --> 00:05:40,080
and ciscd in ci cd one refers that

131
00:05:40,080 --> 00:05:41,680
continuous delivery

132
00:05:41,680 --> 00:05:44,560
and or continuous deployment which are

133
00:05:44,560 --> 00:05:45,280
related

134
00:05:45,280 --> 00:05:47,720
concepts that sometimes get used

135
00:05:47,720 --> 00:05:49,440
interchangeably

136
00:05:49,440 --> 00:05:52,560
uh both about like automating further

137
00:05:52,560 --> 00:05:53,199
stages

138
00:05:53,199 --> 00:05:56,479
of the pipeline but they are sometimes

139
00:05:56,479 --> 00:05:57,600
used separately

140
00:05:57,600 --> 00:06:00,639
to illustrate just how much automation

141
00:06:00,639 --> 00:06:02,240
is happening

142
00:06:02,240 --> 00:06:04,479
continuous delivery usually means a

143
00:06:04,479 --> 00:06:06,000
developer's changes to

144
00:06:06,000 --> 00:06:09,280
an application are automatically bug

145
00:06:09,280 --> 00:06:10,319
tested

146
00:06:10,319 --> 00:06:13,440
and uploaded to a repository like github

147
00:06:13,440 --> 00:06:13,840
or

148
00:06:13,840 --> 00:06:16,400
we can say container registry where they

149
00:06:16,400 --> 00:06:17,280
can

150
00:06:17,280 --> 00:06:20,240
then be deployed to a live production

151
00:06:20,240 --> 00:06:22,639
environment by the operations team or of

152
00:06:22,639 --> 00:06:23,199
the

153
00:06:23,199 --> 00:06:27,440
people who are doing the operations

154
00:06:27,440 --> 00:06:30,479
so continuous deployment the other

155
00:06:30,479 --> 00:06:33,600
possible cd can refer to automatically

156
00:06:33,600 --> 00:06:36,560
releasing a developer's changes from the

157
00:06:36,560 --> 00:06:38,960
repository to production

158
00:06:38,960 --> 00:06:42,720
where it is usually by customers

159
00:06:42,720 --> 00:06:45,520
it addresses the problem of overloading

160
00:06:45,520 --> 00:06:46,880
operation team

161
00:06:46,880 --> 00:06:49,919
with manual processors that slow down

162
00:06:49,919 --> 00:06:51,120
app delivery

163
00:06:51,120 --> 00:06:53,520
and it builds on the benefits of

164
00:06:53,520 --> 00:06:55,120
continuous delivery by

165
00:06:55,120 --> 00:06:59,280
like automating the next stage in the

166
00:07:00,840 --> 00:07:02,639
pipeline

167
00:07:02,639 --> 00:07:04,720
uh let's start with the stages of the

168
00:07:04,720 --> 00:07:05,680
pipeline which

169
00:07:05,680 --> 00:07:08,560
i will be discussing further so firstly

170
00:07:08,560 --> 00:07:11,039
the build will start in jenkins

171
00:07:11,039 --> 00:07:14,160
then okay so what is jenkins jenkins is

172
00:07:14,160 --> 00:07:15,520
a self-contained

173
00:07:15,520 --> 00:07:19,520
open source uh it's a automation server

174
00:07:19,520 --> 00:07:22,400
that can be used to automate all sorts

175
00:07:22,400 --> 00:07:23,360
of tasks

176
00:07:23,360 --> 00:07:25,759
related to building uh testing and

177
00:07:25,759 --> 00:07:26,720
delivering

178
00:07:26,720 --> 00:07:29,520
or deploying software and jenkins can be

179
00:07:29,520 --> 00:07:30,000
installed

180
00:07:30,000 --> 00:07:32,319
through any native system packages

181
00:07:32,319 --> 00:07:33,360
docker

182
00:07:33,360 --> 00:07:36,400
or even run standalone by any machine

183
00:07:36,400 --> 00:07:38,240
uh with the java and time environment

184
00:07:38,240 --> 00:07:40,880
that is gre installed

185
00:07:40,880 --> 00:07:43,599
so after the start build application

186
00:07:43,599 --> 00:07:45,840
code is pulled from the github

187
00:07:45,840 --> 00:07:48,720
we have to just write the link and it

188
00:07:48,720 --> 00:07:49,919
will pull the

189
00:07:49,919 --> 00:07:53,120
github code and after that jenkins

190
00:07:53,120 --> 00:07:56,240
executes the initialization stage

191
00:07:56,240 --> 00:07:59,680
then next step happens that is jen can

192
00:07:59,680 --> 00:08:01,840
build the application dependencies that

193
00:08:01,840 --> 00:08:03,440
are required for the application you are

194
00:08:03,440 --> 00:08:04,160
working on

195
00:08:04,160 --> 00:08:08,319
or the software uh and after that build

196
00:08:08,319 --> 00:08:12,479
stage we come to scst so saa

197
00:08:12,479 --> 00:08:15,199
software composition analysis and in

198
00:08:15,199 --> 00:08:15,599
this

199
00:08:15,599 --> 00:08:18,319
the tool i will be explaining is odc

200
00:08:18,319 --> 00:08:18,639
that

201
00:08:18,639 --> 00:08:22,080
is fast dependency check and after the

202
00:08:22,080 --> 00:08:25,199
wash dependency check is done this

203
00:08:25,199 --> 00:08:29,520
report is stored and after that it comes

204
00:08:29,520 --> 00:08:30,080
sas

205
00:08:30,080 --> 00:08:33,200
stage which is static analysis

206
00:08:33,200 --> 00:08:36,559
and in this i have used neck and uh the

207
00:08:36,559 --> 00:08:37,440
report is

208
00:08:37,440 --> 00:08:41,039
stored for this then come source code

209
00:08:41,039 --> 00:08:42,240
quality analysis

210
00:08:42,240 --> 00:08:46,000
uh for this i uh as the application i am

211
00:08:46,000 --> 00:08:46,800
using

212
00:08:46,800 --> 00:08:50,480
for example is sweet crm which is in php

213
00:08:50,480 --> 00:08:53,360
so i it is uh source code quality

214
00:08:53,360 --> 00:08:54,000
analysis

215
00:08:54,000 --> 00:08:57,279
is language based so i will be using php

216
00:08:57,279 --> 00:08:58,560
code sniffer

217
00:08:58,560 --> 00:09:01,040
and the report is stored after that

218
00:09:01,040 --> 00:09:02,080
build happens

219
00:09:02,080 --> 00:09:05,279
and once the build is done we do

220
00:09:05,279 --> 00:09:08,560
dash that is dynamic application

221
00:09:08,560 --> 00:09:11,760
uh security testing so dash is done when

222
00:09:11,760 --> 00:09:12,080
the

223
00:09:12,080 --> 00:09:15,839
application is in the running stage

224
00:09:15,839 --> 00:09:18,880
and the tool uses jab that is jet

225
00:09:18,880 --> 00:09:22,320
application proxy

226
00:09:22,320 --> 00:09:25,440
uh so we after that store the uh report

227
00:09:25,440 --> 00:09:29,120
and uh last stages as well software bill

228
00:09:29,120 --> 00:09:30,560
of materials

229
00:09:30,560 --> 00:09:34,160
uh the tool is cyclone dx and report is

230
00:09:34,160 --> 00:09:36,240
stored so for all the steps we are doing

231
00:09:36,240 --> 00:09:39,040
we are also report uh storing the report

232
00:09:39,040 --> 00:09:42,240
uh you can do it at once also

233
00:09:42,240 --> 00:09:46,160
so after that comes jenkins stops

234
00:09:46,160 --> 00:09:48,800
running styles of app so on the prod

235
00:09:48,800 --> 00:09:51,440
server and copies the updates and the

236
00:09:51,440 --> 00:09:52,480
results

237
00:09:52,480 --> 00:09:56,240
restarts the app deploy the app server

238
00:09:56,240 --> 00:09:59,040
after that the build completes so let's

239
00:09:59,040 --> 00:09:59,360
uh

240
00:09:59,360 --> 00:10:01,600
discuss about all these stages which we

241
00:10:01,600 --> 00:10:05,360
i have defined here in a little detail

242
00:10:05,360 --> 00:10:07,839
uh firstly comes software composition

243
00:10:07,839 --> 00:10:09,920
analysis

244
00:10:09,920 --> 00:10:12,959
so it is a like all the tools which

245
00:10:12,959 --> 00:10:16,839
i am taking over here are open source

246
00:10:16,839 --> 00:10:19,839
only

247
00:10:21,680 --> 00:10:24,640
so software composition analysis is an

248
00:10:24,640 --> 00:10:26,480
automated process

249
00:10:26,480 --> 00:10:29,920
that identifies the open source software

250
00:10:29,920 --> 00:10:33,120
in a code base uh the analysis is

251
00:10:33,120 --> 00:10:35,519
performed to evaluate security

252
00:10:35,519 --> 00:10:39,279
and license compliance and code quality

253
00:10:39,279 --> 00:10:42,560
so companies need to be aware of open

254
00:10:42,560 --> 00:10:44,720
source license limitations uh

255
00:10:44,720 --> 00:10:48,240
and also the obligations

256
00:10:48,240 --> 00:10:50,399
uh tracking these obligation manually

257
00:10:50,399 --> 00:10:52,320
becomes very tiring like

258
00:10:52,320 --> 00:10:55,519
uh it's not so easy to do an

259
00:10:55,519 --> 00:10:58,160
automated solution like sc and software

260
00:10:58,160 --> 00:11:00,079
composition analysis

261
00:11:00,079 --> 00:11:02,720
uh was developed and from this initial

262
00:11:02,720 --> 00:11:03,600
use case

263
00:11:03,600 --> 00:11:06,720
it uh expanded to analyze code security

264
00:11:06,720 --> 00:11:08,720
and quality

265
00:11:08,720 --> 00:11:10,480
so in a modern depth circumference

266
00:11:10,480 --> 00:11:12,880
environment the sca helps in the

267
00:11:12,880 --> 00:11:16,160
shift left paradigm so the security

268
00:11:16,160 --> 00:11:19,120
uh is used in the concept lift that is

269
00:11:19,120 --> 00:11:19,920
uh it

270
00:11:19,920 --> 00:11:23,040
stands from starting and not in the end

271
00:11:23,040 --> 00:11:24,959
after the deployment of the software is

272
00:11:24,959 --> 00:11:25,760
complete

273
00:11:25,760 --> 00:11:28,880
then we take care of security that's not

274
00:11:28,880 --> 00:11:32,079
then it's done by shift left process

275
00:11:32,079 --> 00:11:34,720
and the earlier and continuous sca

276
00:11:34,720 --> 00:11:35,600
testing has

277
00:11:35,600 --> 00:11:37,920
innovate like developers and the

278
00:11:37,920 --> 00:11:39,360
security teams

279
00:11:39,360 --> 00:11:41,360
to drive productivity without

280
00:11:41,360 --> 00:11:43,040
compromising security

281
00:11:43,040 --> 00:11:46,640
or quality so let's

282
00:11:46,640 --> 00:11:49,200
look for the importance of scs so

283
00:11:49,200 --> 00:11:51,200
firstly is that we can automatically

284
00:11:51,200 --> 00:11:51,920
track

285
00:11:51,920 --> 00:11:54,720
open source components and the

286
00:11:54,720 --> 00:11:56,079
continuous monitoring for

287
00:11:56,079 --> 00:11:58,959
vulnerability detections and there are

288
00:11:58,959 --> 00:11:59,920
also

289
00:11:59,920 --> 00:12:02,880
uh automated and prioritized

290
00:12:02,880 --> 00:12:05,680
vulnerabilities remediations

291
00:12:05,680 --> 00:12:09,040
uh licensed risk management is also

292
00:12:09,040 --> 00:12:11,839
taken care

293
00:12:15,200 --> 00:12:18,000
so like what are the tools over here uh

294
00:12:18,000 --> 00:12:20,160
firstly the oas dependency check that

295
00:12:20,160 --> 00:12:23,200
is odc so what is this uh it is a

296
00:12:23,200 --> 00:12:24,160
software uh

297
00:12:24,160 --> 00:12:26,560
composition analysis tool uh which

298
00:12:26,560 --> 00:12:28,800
attempts to detect publicly

299
00:12:28,800 --> 00:12:31,279
disclosed vulnerabilities contained

300
00:12:31,279 --> 00:12:32,480
within a project's

301
00:12:32,480 --> 00:12:36,160
dependencies so software composition

302
00:12:36,160 --> 00:12:37,360
analysis tools

303
00:12:37,360 --> 00:12:41,040
scan the open source code uh software to

304
00:12:41,040 --> 00:12:41,760
inventory

305
00:12:41,760 --> 00:12:44,720
all open source components and it is

306
00:12:44,720 --> 00:12:45,920
important as

307
00:12:45,920 --> 00:12:49,360
modern uh enterprise application can

308
00:12:49,360 --> 00:12:50,639
comprise up to

309
00:12:50,639 --> 00:12:53,839
80 to 90 percent open source components

310
00:12:53,839 --> 00:12:57,120
and given this the risk of security and

311
00:12:57,120 --> 00:12:58,480
ip risks

312
00:12:58,480 --> 00:13:01,760
of open source components can be

313
00:13:01,760 --> 00:13:05,200
very significant and tools to help

314
00:13:05,200 --> 00:13:06,079
mitigate these

315
00:13:06,079 --> 00:13:09,360
risks become critically important

316
00:13:09,360 --> 00:13:12,480
so over here the code is there and when

317
00:13:12,480 --> 00:13:14,320
a new branch is created

318
00:13:14,320 --> 00:13:16,560
code is deployed and pull request we do

319
00:13:16,560 --> 00:13:17,600
the software

320
00:13:17,600 --> 00:13:21,040
composition and this is uh and quality

321
00:13:21,040 --> 00:13:21,360
check

322
00:13:21,360 --> 00:13:24,079
commits after that if there are any

323
00:13:24,079 --> 00:13:25,360
problems we will

324
00:13:25,360 --> 00:13:28,720
go and change it and do a new branch

325
00:13:28,720 --> 00:13:29,440
commit and

326
00:13:29,440 --> 00:13:31,200
it will again there will be a code

327
00:13:31,200 --> 00:13:32,880
developed and pull request so

328
00:13:32,880 --> 00:13:36,079
we don't have to wait till the

329
00:13:36,079 --> 00:13:38,959
after the production deployment it is

330
00:13:38,959 --> 00:13:40,800
deployed completely the tool

331
00:13:40,800 --> 00:13:44,240
and come back to the remove the

332
00:13:44,240 --> 00:13:45,519
vulnerabilities

333
00:13:45,519 --> 00:13:48,480
but we can do over here only where we

334
00:13:48,480 --> 00:13:49,199
spot the

335
00:13:49,199 --> 00:13:51,599
issues

336
00:13:53,120 --> 00:13:57,040
okay so next comes first

337
00:13:57,279 --> 00:14:01,279
uh what uh like we mean by sas asked

338
00:14:01,279 --> 00:14:04,399
static application security testing so

339
00:14:04,399 --> 00:14:06,959
it is done when the application is not

340
00:14:06,959 --> 00:14:07,680
in the running

341
00:14:07,680 --> 00:14:11,199
state it is stationary uh it's a process

342
00:14:11,199 --> 00:14:11,600
that

343
00:14:11,600 --> 00:14:14,839
analyst this a project source code and

344
00:14:14,839 --> 00:14:17,839
dependencies and related files

345
00:14:17,839 --> 00:14:20,800
for known security vulnerabilities it

346
00:14:20,800 --> 00:14:23,040
examines the code to find the

347
00:14:23,040 --> 00:14:26,000
flaws or we can say software weaknesses

348
00:14:26,000 --> 00:14:26,720
such as

349
00:14:26,720 --> 00:14:29,040
sql injection or any other which are

350
00:14:29,040 --> 00:14:32,639
listed in oas top 10

351
00:14:32,639 --> 00:14:36,000
sas could also help identify segments of

352
00:14:36,000 --> 00:14:37,680
projects logic

353
00:14:37,680 --> 00:14:39,360
which might lead to security

354
00:14:39,360 --> 00:14:41,360
vulnerability

355
00:14:41,360 --> 00:14:43,839
it is also known as white box testing

356
00:14:43,839 --> 00:14:45,120
because uh

357
00:14:45,120 --> 00:14:47,519
as the tester has access to the

358
00:14:47,519 --> 00:14:48,240
underlying

359
00:14:48,240 --> 00:14:50,399
framework the design and the

360
00:14:50,399 --> 00:14:51,440
implementations

361
00:14:51,440 --> 00:14:56,399
the application is tested from inside

362
00:14:56,839 --> 00:14:58,399
out

363
00:14:58,399 --> 00:15:02,399
and uh it uh supports left left approach

364
00:15:02,399 --> 00:15:05,680
uh this assassin also so identified

365
00:15:05,680 --> 00:15:06,240
defects

366
00:15:06,240 --> 00:15:08,720
earlier it leads to lower cost of

367
00:15:08,720 --> 00:15:09,680
remediation

368
00:15:09,680 --> 00:15:13,120
and delivering fast feedbacks

369
00:15:13,120 --> 00:15:15,360
and providing the exact location of

370
00:15:15,360 --> 00:15:16,240
vulnerabilities

371
00:15:16,240 --> 00:15:19,040
and their costs

372
00:15:20,560 --> 00:15:24,480
the tool for sas which i used was make a

373
00:15:24,480 --> 00:15:28,079
snake and okay so

374
00:15:28,079 --> 00:15:30,000
slick is an open source security

375
00:15:30,000 --> 00:15:32,320
platform for finding availabilities and

376
00:15:32,320 --> 00:15:33,519
the source code of an

377
00:15:33,519 --> 00:15:35,920
application uh here is the report where

378
00:15:35,920 --> 00:15:38,639
you can see that the cvit is medium or

379
00:15:38,639 --> 00:15:41,040
it is high and we can

380
00:15:41,040 --> 00:15:43,920
like take care of it if we face any

381
00:15:43,920 --> 00:15:44,880
issues like it

382
00:15:44,880 --> 00:15:54,000
is going to prob create a problem

383
00:15:54,000 --> 00:15:57,199
then comes uh the like uh next stage

384
00:15:57,199 --> 00:16:00,079
that is source code quality analysis and

385
00:16:00,079 --> 00:16:00,800
uh okay

386
00:16:00,800 --> 00:16:02,399
over here i will be talking about

387
00:16:02,399 --> 00:16:04,560
linkedin uh lending is the

388
00:16:04,560 --> 00:16:07,680
automated checking of source code for

389
00:16:07,680 --> 00:16:11,040
programmatic and stylistic errors um

390
00:16:11,040 --> 00:16:14,079
only so this is done by using a linting

391
00:16:14,079 --> 00:16:15,279
tool

392
00:16:15,279 --> 00:16:17,680
a len tool is a basic static code

393
00:16:17,680 --> 00:16:18,959
analyzer

394
00:16:18,959 --> 00:16:21,680
lending is important to reduce errors

395
00:16:21,680 --> 00:16:22,240
and

396
00:16:22,240 --> 00:16:26,560
improve the overall quality of code

397
00:16:26,560 --> 00:16:30,079
using lint tools can help accelerate

398
00:16:30,079 --> 00:16:32,639
development and reduce cost by finding

399
00:16:32,639 --> 00:16:34,399
errors earlier

400
00:16:34,399 --> 00:16:37,040
and linting tools are language specific

401
00:16:37,040 --> 00:16:38,000
and thus

402
00:16:38,000 --> 00:16:40,160
the tool that can be used depends on the

403
00:16:40,160 --> 00:16:42,000
application being tested

404
00:16:42,000 --> 00:16:45,519
or the software being used and nowadays

405
00:16:45,519 --> 00:16:46,160
we have

406
00:16:46,160 --> 00:16:49,440
like different lenders uh which provide

407
00:16:49,440 --> 00:16:52,480
many types of checks like syntax errors

408
00:16:52,480 --> 00:16:53,040
or

409
00:16:53,040 --> 00:16:56,639
it can be like code standard idents

410
00:16:56,639 --> 00:17:00,880
or potential problems uh security checks

411
00:17:00,880 --> 00:17:04,559
so code quality analysis tools are

412
00:17:04,559 --> 00:17:08,240
language specific so for like for the

413
00:17:08,240 --> 00:17:11,119
application like sweet crm which are

414
00:17:11,119 --> 00:17:12,160
meant

415
00:17:12,160 --> 00:17:15,280
for php applications the tool i used is

416
00:17:15,280 --> 00:17:18,160
php code sniffer and there are many

417
00:17:18,160 --> 00:17:20,079
other tools available you can like

418
00:17:20,079 --> 00:17:22,799
choose or use any which like suits your

419
00:17:22,799 --> 00:17:24,480
application or the environment you are

420
00:17:24,480 --> 00:17:26,799
working

421
00:17:26,799 --> 00:17:30,840
a little about like the code stuffer

422
00:17:30,840 --> 00:17:33,840
tool

423
00:17:34,240 --> 00:17:37,360
uh so php code is different is like a

424
00:17:37,360 --> 00:17:41,520
set of two main scripts that is first is

425
00:17:41,520 --> 00:17:44,160
php css script and it helps to detect

426
00:17:44,160 --> 00:17:45,039
the

427
00:17:45,039 --> 00:17:47,520
violation of predefined coding standards

428
00:17:47,520 --> 00:17:48,640
and a second

429
00:17:48,640 --> 00:17:53,120
is php cbf script that can automatically

430
00:17:53,120 --> 00:17:53,520
correct

431
00:17:53,520 --> 00:17:56,400
these violations

432
00:17:57,440 --> 00:17:59,520
okay so moving towards when the build

433
00:17:59,520 --> 00:18:00,799
happens and uh

434
00:18:00,799 --> 00:18:02,799
the application is a running state and

435
00:18:02,799 --> 00:18:04,160
we do dust

436
00:18:04,160 --> 00:18:06,320
that is dynamic application security

437
00:18:06,320 --> 00:18:07,280
testing

438
00:18:07,280 --> 00:18:10,480
so in the dynamic application security

439
00:18:10,480 --> 00:18:11,520
testing

440
00:18:11,520 --> 00:18:14,799
uh it's done uh

441
00:18:14,799 --> 00:18:16,720
during the running of the application

442
00:18:16,720 --> 00:18:19,200
and it is also called

443
00:18:19,200 --> 00:18:22,080
black box texting technique in which the

444
00:18:22,080 --> 00:18:22,799
dash tool

445
00:18:22,799 --> 00:18:25,280
interacts with the application being

446
00:18:25,280 --> 00:18:26,080
tested

447
00:18:26,080 --> 00:18:28,720
in a running state to immediate as an

448
00:18:28,720 --> 00:18:30,080
attacker

449
00:18:30,080 --> 00:18:32,480
and that's tools are especially helpful

450
00:18:32,480 --> 00:18:33,760
for detecting

451
00:18:33,760 --> 00:18:37,039
like input output validation

452
00:18:37,039 --> 00:18:40,840
or cross-site scripting and sql

453
00:18:40,840 --> 00:18:42,720
injections

454
00:18:42,720 --> 00:18:45,679
okay so it is also server configuration

455
00:18:45,679 --> 00:18:47,840
mistakes can be identified

456
00:18:47,840 --> 00:18:51,039
and the authorization issues like other

457
00:18:51,039 --> 00:18:51,679
problems

458
00:18:51,679 --> 00:18:55,280
which manifest in real time or become

459
00:18:55,280 --> 00:19:00,240
like visible only a known user logs in

460
00:19:03,039 --> 00:19:06,240
it scans the client side and the server

461
00:19:06,240 --> 00:19:07,679
side as well

462
00:19:07,679 --> 00:19:10,960
so the tool uses jab tool it is open

463
00:19:10,960 --> 00:19:11,520
source

464
00:19:11,520 --> 00:19:14,960
and it is like man in the middle proxy

465
00:19:14,960 --> 00:19:18,000
what it means is that

466
00:19:18,000 --> 00:19:20,240
it

467
00:19:21,840 --> 00:19:24,960
so jet attack proxy is an open source

468
00:19:24,960 --> 00:19:25,520
tool

469
00:19:25,520 --> 00:19:27,840
so used to perform dynamic application

470
00:19:27,840 --> 00:19:30,000
security testing which is

471
00:19:30,000 --> 00:19:32,799
uh designed specifically for web

472
00:19:32,799 --> 00:19:33,919
applications

473
00:19:33,919 --> 00:19:37,200
and it immediates an actual user where

474
00:19:37,200 --> 00:19:37,600
it

475
00:19:37,600 --> 00:19:40,480
interacts with the application to

476
00:19:40,480 --> 00:19:41,440
perform like

477
00:19:41,440 --> 00:19:44,080
various attacks at its core job is what

478
00:19:44,080 --> 00:19:44,640
known as

479
00:19:44,640 --> 00:19:46,320
man in the middle proxy which i

480
00:19:46,320 --> 00:19:48,080
mentioned earlier also

481
00:19:48,080 --> 00:19:50,960
so it stands between the test browser

482
00:19:50,960 --> 00:19:51,600
and

483
00:19:51,600 --> 00:19:54,080
in the web application so that it can

484
00:19:54,080 --> 00:19:54,880
intercept

485
00:19:54,880 --> 00:19:57,600
and inspect the messages which are going

486
00:19:57,600 --> 00:19:58,880
uh sent between

487
00:19:58,880 --> 00:20:01,039
the browser and the web application and

488
00:20:01,039 --> 00:20:04,000
modify the contents if needed

489
00:20:04,000 --> 00:20:06,640
and then forward those packets to the

490
00:20:06,640 --> 00:20:07,460
destination

491
00:20:07,460 --> 00:20:10,569
[Music]

492
00:20:12,960 --> 00:20:16,640
uh i have also shared a report for the

493
00:20:16,640 --> 00:20:18,400
job report it's just a portion of

494
00:20:18,400 --> 00:20:21,679
the snapshot so over here it shows that

495
00:20:21,679 --> 00:20:25,360
there is a potential excesses so

496
00:20:25,360 --> 00:20:28,240
we can take care of it or remove it or

497
00:20:28,240 --> 00:20:30,080
make the changes accordingly

498
00:20:30,080 --> 00:20:33,360
so that we don't face this issue later

499
00:20:33,360 --> 00:20:34,000
on or

500
00:20:34,000 --> 00:20:36,480
we don't have someone like a security

501
00:20:36,480 --> 00:20:37,919
team working at the last

502
00:20:37,919 --> 00:20:42,720
of the when the application is deployed

503
00:20:46,159 --> 00:20:48,080
uh then comes uh software below

504
00:20:48,080 --> 00:20:50,559
materials uh software bill of materials

505
00:20:50,559 --> 00:20:50,880
is

506
00:20:50,880 --> 00:20:54,559
a list of components which are used to

507
00:20:54,559 --> 00:20:54,880
like

508
00:20:54,880 --> 00:20:57,840
assemble or create a product and it

509
00:20:57,840 --> 00:21:00,080
gives out a specification

510
00:21:00,080 --> 00:21:04,000
about how each component was used in the

511
00:21:04,000 --> 00:21:06,880
making of the end product and a software

512
00:21:06,880 --> 00:21:08,159
belong materials

513
00:21:08,159 --> 00:21:10,000
refers to the list of software

514
00:21:10,000 --> 00:21:11,440
components or the

515
00:21:11,440 --> 00:21:14,720
open source or commercial that was

516
00:21:14,720 --> 00:21:17,600
utilized to build a software solution

517
00:21:17,600 --> 00:21:20,640
and it responds quickly to the security

518
00:21:20,640 --> 00:21:23,840
or license or any operational risks

519
00:21:23,840 --> 00:21:27,918
that come with open source use

520
00:21:28,640 --> 00:21:31,520
the tool used is cyclone here so it is

521
00:21:31,520 --> 00:21:32,400
available for

522
00:21:32,400 --> 00:21:34,799
uh each every languages different

523
00:21:34,799 --> 00:21:35,679
languages

524
00:21:35,679 --> 00:21:38,159
you can use the one that suits your

525
00:21:38,159 --> 00:21:39,120
application or

526
00:21:39,120 --> 00:21:42,000
your environment

527
00:21:42,559 --> 00:21:45,600
and this is the s form report and the

528
00:21:45,600 --> 00:21:47,919
this is also just a part of this uh

529
00:21:47,919 --> 00:21:50,799
snapshot

530
00:21:50,960 --> 00:21:53,600
okay so here we can see that the name is

531
00:21:53,600 --> 00:21:55,440
php cs fixer

532
00:21:55,440 --> 00:21:58,080
and the description is given and the

533
00:21:58,080 --> 00:21:59,360
license used

534
00:21:59,360 --> 00:22:01,760
so this tool is automatically fixed php

535
00:22:01,760 --> 00:22:02,799
code style

536
00:22:02,799 --> 00:22:05,919
uh and like this we can get to know what

537
00:22:05,919 --> 00:22:06,480
are

538
00:22:06,480 --> 00:22:10,799
the uh like what are the components we

539
00:22:10,799 --> 00:22:11,600
used

540
00:22:11,600 --> 00:22:14,240
in the product

541
00:22:15,440 --> 00:22:18,320
okay so we will be now covering the key

542
00:22:18,320 --> 00:22:20,000
points you got to know

543
00:22:20,000 --> 00:22:23,600
for the ci cd pipeline

544
00:22:23,840 --> 00:22:27,120
firstly is that release is faster

545
00:22:27,120 --> 00:22:30,400
yes so the failures are detected faster

546
00:22:30,400 --> 00:22:30,960
and

547
00:22:30,960 --> 00:22:34,000
as such can be repaired faster leading

548
00:22:34,000 --> 00:22:36,480
to increasing release rates

549
00:22:36,480 --> 00:22:39,440
however frequent releases are possible

550
00:22:39,440 --> 00:22:41,760
only if the code is developed

551
00:22:41,760 --> 00:22:46,799
and like in a continuously moving system

552
00:22:46,799 --> 00:22:49,520
also ci cd like uh continuous

553
00:22:49,520 --> 00:22:51,679
integration and continuous deployment

554
00:22:51,679 --> 00:22:54,799
continuously merges the codes and

555
00:22:54,799 --> 00:22:55,679
continuously

556
00:22:55,679 --> 00:22:59,200
deploys them to production after

557
00:22:59,200 --> 00:23:01,679
thorough testing and keeping the code in

558
00:23:01,679 --> 00:23:02,799
a release

559
00:23:02,799 --> 00:23:05,360
ready state it's important to have as

560
00:23:05,360 --> 00:23:07,600
part of deployment a production

561
00:23:07,600 --> 00:23:10,480
environment said of that closely mimics

562
00:23:10,480 --> 00:23:10,880
that

563
00:23:10,880 --> 00:23:15,360
which end users will ultimately be using

564
00:23:15,360 --> 00:23:17,919
and next is that increase in the team

565
00:23:17,919 --> 00:23:19,280
transparency and

566
00:23:19,280 --> 00:23:23,120
accountability so ci cd is a great way

567
00:23:23,120 --> 00:23:25,520
to get continuous feedback not only from

568
00:23:25,520 --> 00:23:26,960
our customers

569
00:23:26,960 --> 00:23:29,840
but also from our own team or the groups

570
00:23:29,840 --> 00:23:30,880
working

571
00:23:30,880 --> 00:23:33,840
so this increasing is the transparency

572
00:23:33,840 --> 00:23:34,240
of

573
00:23:34,240 --> 00:23:37,360
any problems or any issues going in the

574
00:23:37,360 --> 00:23:37,840
team

575
00:23:37,840 --> 00:23:40,400
and it encourages responsible

576
00:23:40,400 --> 00:23:42,400
accountability

577
00:23:42,400 --> 00:23:44,960
uh the next point is similar smaller

578
00:23:44,960 --> 00:23:47,200
code changes as we have seen that

579
00:23:47,200 --> 00:23:50,640
a portion of uh is creating issue we can

580
00:23:50,640 --> 00:23:51,520
change it then

581
00:23:51,520 --> 00:23:53,760
and there so small one technical

582
00:23:53,760 --> 00:23:55,039
advantage of

583
00:23:55,039 --> 00:23:56,960
continuous integration and continuous

584
00:23:56,960 --> 00:23:58,240
delivery is that

585
00:23:58,240 --> 00:24:01,120
it allows you to integrate small pieces

586
00:24:01,120 --> 00:24:03,279
of code at

587
00:24:03,279 --> 00:24:06,320
one time these code changes are

588
00:24:06,320 --> 00:24:09,120
simpler and easier to handle than huge

589
00:24:09,120 --> 00:24:10,480
chunks of code

590
00:24:10,480 --> 00:24:13,840
and as such that we will have further

591
00:24:13,840 --> 00:24:16,240
issues that may need to be repaired

592
00:24:16,240 --> 00:24:20,320
at a lower later date

593
00:24:20,320 --> 00:24:23,520
so using continuous testing these small

594
00:24:23,520 --> 00:24:24,960
pieces can be tested

595
00:24:24,960 --> 00:24:28,320
as soon as they are integrated

596
00:24:28,320 --> 00:24:30,480
into the code repository allowing the

597
00:24:30,480 --> 00:24:31,360
developers

598
00:24:31,360 --> 00:24:33,919
to recognize a problem before too much

599
00:24:33,919 --> 00:24:35,360
work is completed

600
00:24:35,360 --> 00:24:38,559
afterward so these works really well

601
00:24:38,559 --> 00:24:41,200
for like large development teams who

602
00:24:41,200 --> 00:24:42,799
work remotely

603
00:24:42,799 --> 00:24:46,080
as nowadays it's happening a lot and

604
00:24:46,080 --> 00:24:48,400
as well as those in-house as

605
00:24:48,400 --> 00:24:50,159
communication between team members can

606
00:24:50,159 --> 00:24:52,640
be challenging

607
00:24:52,640 --> 00:24:54,720
and it also helps in the reduction of

608
00:24:54,720 --> 00:24:55,919
the cost

609
00:24:55,919 --> 00:24:58,640
as the automation in the ci cd the

610
00:24:58,640 --> 00:25:01,200
continuous continuous integration

611
00:25:01,200 --> 00:25:03,919
and continuous delivery pipeline reduces

612
00:25:03,919 --> 00:25:04,640
the number of

613
00:25:04,640 --> 00:25:08,480
errors that can take place in the

614
00:25:08,480 --> 00:25:11,600
many repetitive steps of ci cd

615
00:25:11,600 --> 00:25:14,480
and doing so also like freeze up

616
00:25:14,480 --> 00:25:15,600
developers

617
00:25:15,600 --> 00:25:18,159
and time that could be spent in the

618
00:25:18,159 --> 00:25:20,480
product development as there aren't like

619
00:25:20,480 --> 00:25:23,600
as many core changes to fix down so the

620
00:25:23,600 --> 00:25:27,760
role of the error is caught quickly

621
00:25:27,760 --> 00:25:29,919
after that comes the customer

622
00:25:29,919 --> 00:25:30,880
satisfaction

623
00:25:30,880 --> 00:25:33,520
so the advantages like one of the main

624
00:25:33,520 --> 00:25:34,320
advantages

625
00:25:34,320 --> 00:25:37,919
is that cicd do not only fall into the

626
00:25:37,919 --> 00:25:39,679
technical aspect but

627
00:25:39,679 --> 00:25:42,720
also in an organization scope so the

628
00:25:42,720 --> 00:25:45,120
first few moments of new customer trying

629
00:25:45,120 --> 00:25:46,559
out like your product

630
00:25:46,559 --> 00:25:50,240
is a make or break moment so don't waste

631
00:25:50,240 --> 00:25:53,120
like first impression as they are key to

632
00:25:53,120 --> 00:25:54,640
turning new customers

633
00:25:54,640 --> 00:25:57,840
into satisfied customers and

634
00:25:57,840 --> 00:26:00,960
keep like keep your customers happy with

635
00:26:00,960 --> 00:26:01,919
fast turnout

636
00:26:01,919 --> 00:26:04,960
of new features or any bug fixes

637
00:26:04,960 --> 00:26:07,919
so utilizing a ci cd approach also keeps

638
00:26:07,919 --> 00:26:08,640
your product

639
00:26:08,640 --> 00:26:11,679
up to date with the latest technology

640
00:26:11,679 --> 00:26:12,000
and

641
00:26:12,000 --> 00:26:15,520
allows you to like give new customers

642
00:26:15,520 --> 00:26:18,400
who will select you over the competition

643
00:26:18,400 --> 00:26:20,240
through word of mouth and positive

644
00:26:20,240 --> 00:26:22,080
reviews

645
00:26:22,080 --> 00:26:24,880
at the last like more at the last point

646
00:26:24,880 --> 00:26:26,880
is more test reliability

647
00:26:26,880 --> 00:26:30,400
so using ci cd test uh the reliability

648
00:26:30,400 --> 00:26:31,200
improves

649
00:26:31,200 --> 00:26:33,520
due to the bite size and specific

650
00:26:33,520 --> 00:26:35,760
changes introduced to the system

651
00:26:35,760 --> 00:26:39,520
and it also allows like for

652
00:26:39,520 --> 00:26:41,360
more accurate positive and negative

653
00:26:41,360 --> 00:26:44,559
tests which are to be conducted

654
00:26:44,559 --> 00:26:47,919
and test reliability within uh ci cd can

655
00:26:47,919 --> 00:26:50,000
also be considered continuous

656
00:26:50,000 --> 00:26:51,120
reliability

657
00:26:51,120 --> 00:26:54,240
and with the continuous merging and

658
00:26:54,240 --> 00:26:55,120
releasing

659
00:26:55,120 --> 00:26:57,679
of new products and features knowing

660
00:26:57,679 --> 00:26:59,520
that the quality was

661
00:26:59,520 --> 00:27:01,440
top of mind throughout the entire

662
00:27:01,440 --> 00:27:02,559
process that

663
00:27:02,559 --> 00:27:04,559
assures that stock holders their

664
00:27:04,559 --> 00:27:06,799
investment and worthwhile

665
00:27:06,799 --> 00:27:11,440
so this was all about the session

666
00:27:11,440 --> 00:27:14,320
thank you and let me know that if there

667
00:27:14,320 --> 00:27:21,840
are any questions

