1
00:00:07,530 --> 00:00:11,470
[Music]

2
00:00:12,799 --> 00:00:14,160
hello everyone

3
00:00:14,160 --> 00:00:16,400
thank you for joining my name is itae

4
00:00:16,400 --> 00:00:17,279
shakuri

5
00:00:17,279 --> 00:00:19,680
i'm the director of open source at aqua

6
00:00:19,680 --> 00:00:21,039
security

7
00:00:21,039 --> 00:00:23,199
and i'm here today to talk to you about

8
00:00:23,199 --> 00:00:24,560
random security

9
00:00:24,560 --> 00:00:27,119
using a couple of very exciting

10
00:00:27,119 --> 00:00:28,000
technologies

11
00:00:28,000 --> 00:00:31,599
ebpf and oppa and

12
00:00:31,599 --> 00:00:34,640
i want to start this talk by actually

13
00:00:34,640 --> 00:00:36,960
sharing an example

14
00:00:36,960 --> 00:00:40,640
this is a a real example actually

15
00:00:40,640 --> 00:00:43,040
that our research team at aqua has

16
00:00:43,040 --> 00:00:44,079
discovered

17
00:00:44,079 --> 00:00:47,920
so this is a docker image on docker hub

18
00:00:47,920 --> 00:00:49,680
that was doing something useful you know

19
00:00:49,680 --> 00:00:51,920
maybe you've even used it

20
00:00:51,920 --> 00:00:55,760
and if you have used it you probably

21
00:00:55,760 --> 00:00:58,320
scanned it because this is what this

22
00:00:58,320 --> 00:01:00,559
what we do with container images

23
00:01:00,559 --> 00:01:03,080
we scan them for vulnerabilities for

24
00:01:03,080 --> 00:01:05,199
misconfigurations for known manual

25
00:01:05,199 --> 00:01:08,799
and so on and if you would take that

26
00:01:08,799 --> 00:01:09,520
image

27
00:01:09,520 --> 00:01:13,680
and scan it with any popular

28
00:01:13,680 --> 00:01:16,159
static image scanner it would be all

29
00:01:16,159 --> 00:01:16,960
green

30
00:01:16,960 --> 00:01:20,080
all the tests would pass

31
00:01:20,080 --> 00:01:23,119
and it would be seemingly innocent

32
00:01:23,119 --> 00:01:26,479
except it won't because it would try to

33
00:01:26,479 --> 00:01:27,600
do something

34
00:01:27,600 --> 00:01:30,799
bad once you ran it and the reason

35
00:01:30,799 --> 00:01:33,759
is that there was a malicious binary

36
00:01:33,759 --> 00:01:34,479
hidden

37
00:01:34,479 --> 00:01:37,360
in the entry point now this sounds very

38
00:01:37,360 --> 00:01:38,479
um

39
00:01:38,479 --> 00:01:41,680
sophisticated and maybe uh challenging

40
00:01:41,680 --> 00:01:42,720
but actually

41
00:01:42,720 --> 00:01:45,840
if we take a look at the entry point and

42
00:01:45,840 --> 00:01:47,119
you can see

43
00:01:47,119 --> 00:01:50,960
it right there um so you see this

44
00:01:50,960 --> 00:01:53,119
weird-looking string here that you may

45
00:01:53,119 --> 00:01:54,640
recognize as a

46
00:01:54,640 --> 00:01:58,640
base64 encoded uh artifact

47
00:01:58,640 --> 00:02:00,960
and you can see the following lines

48
00:02:00,960 --> 00:02:01,680
which

49
00:02:01,680 --> 00:02:04,799
basically decodes this uh string and

50
00:02:04,799 --> 00:02:05,280
then

51
00:02:05,280 --> 00:02:08,720
executes it so it's a pretty simple um

52
00:02:08,720 --> 00:02:11,280
even disappointing kind of techniques to

53
00:02:11,280 --> 00:02:12,720
hide something but it was

54
00:02:12,720 --> 00:02:15,440
extremely effective because it managed

55
00:02:15,440 --> 00:02:16,319
to evade

56
00:02:16,319 --> 00:02:20,959
pretty much every static image scanner

57
00:02:20,959 --> 00:02:23,760
due to the simple fact that this melissa

58
00:02:23,760 --> 00:02:24,480
malicious

59
00:02:24,480 --> 00:02:27,599
image was not existent at the time

60
00:02:27,599 --> 00:02:30,800
that the container was scanned it only

61
00:02:30,800 --> 00:02:34,959
kind of appeared at runtime after the

62
00:02:34,959 --> 00:02:39,519
the code in the entry point was executed

63
00:02:39,519 --> 00:02:42,959
and my point here is that

64
00:02:42,959 --> 00:02:45,519
static image scanning when we discuss it

65
00:02:45,519 --> 00:02:47,440
in the context of container security

66
00:02:47,440 --> 00:02:48,959
you know it's a staple of container

67
00:02:48,959 --> 00:02:50,400
security it's something that we've been

68
00:02:50,400 --> 00:02:51,840
doing for a lot of time and it's a

69
00:02:51,840 --> 00:02:53,200
really important

70
00:02:53,200 --> 00:02:55,760
practice that we have managed to adopt

71
00:02:55,760 --> 00:02:57,920
but it has its blind spots

72
00:02:57,920 --> 00:03:01,920
and by simply relying on that

73
00:03:01,920 --> 00:03:05,280
tools we were also overlooking

74
00:03:05,280 --> 00:03:08,400
some entire categories of risks actually

75
00:03:08,400 --> 00:03:12,000
such as the one that i just demonstrated

76
00:03:12,000 --> 00:03:14,480
which brings me to discuss random

77
00:03:14,480 --> 00:03:16,480
security

78
00:03:16,480 --> 00:03:20,000
so runtime security is kind of taking

79
00:03:20,000 --> 00:03:22,879
the the opposite approach uh in term

80
00:03:22,879 --> 00:03:24,319
instead of shifting left

81
00:03:24,319 --> 00:03:26,959
we're trying to shift right and to look

82
00:03:26,959 --> 00:03:27,360
at

83
00:03:27,360 --> 00:03:30,480
the workloads at the containers while

84
00:03:30,480 --> 00:03:31,200
they run

85
00:03:31,200 --> 00:03:32,799
and this is the conclusion that we

86
00:03:32,799 --> 00:03:34,640
reached earlier

87
00:03:34,640 --> 00:03:37,040
by discussing that example that the only

88
00:03:37,040 --> 00:03:39,440
way to really know what the container is

89
00:03:39,440 --> 00:03:42,959
going to do at running time is to run it

90
00:03:42,959 --> 00:03:46,159
right so this is what we're going to do

91
00:03:46,159 --> 00:03:49,360
and when we run the containers in the

92
00:03:49,360 --> 00:03:50,480
production

93
00:03:50,480 --> 00:03:52,640
what we're trying to do with this

94
00:03:52,640 --> 00:03:54,879
runtime security solution

95
00:03:54,879 --> 00:03:57,519
is to detect suspicious behavior at

96
00:03:57,519 --> 00:03:58,400
runtime

97
00:03:58,400 --> 00:04:00,239
this is the goal that we're trying to

98
00:04:00,239 --> 00:04:01,920
achieve here this is

99
00:04:01,920 --> 00:04:04,640
what the solution that i'm going to

100
00:04:04,640 --> 00:04:05,280
discuss

101
00:04:05,280 --> 00:04:08,080
today uh is going to help you achieve

102
00:04:08,080 --> 00:04:08,640
and

103
00:04:08,640 --> 00:04:11,920
um we have a project uh that it

104
00:04:11,920 --> 00:04:14,640
that is called tracy it's an open source

105
00:04:14,640 --> 00:04:16,478
completely open source no secrets

106
00:04:16,478 --> 00:04:17,199
they're

107
00:04:17,199 --> 00:04:19,358
uh completely free on github so if you

108
00:04:19,358 --> 00:04:20,798
go to github.com

109
00:04:20,798 --> 00:04:24,560
aqua security slash tracy um you can see

110
00:04:24,560 --> 00:04:28,639
everything about tracy how it works

111
00:04:28,639 --> 00:04:32,000
what it tries to detect and how and uh

112
00:04:32,000 --> 00:04:33,600
throughout this talk i'm going to

113
00:04:33,600 --> 00:04:35,440
introduce you to this tool and

114
00:04:35,440 --> 00:04:38,639
specifically how this tool

115
00:04:38,639 --> 00:04:42,000
uh leverages ebpf and oppa in order

116
00:04:42,000 --> 00:04:46,240
to achieve runtime security

117
00:04:46,960 --> 00:04:50,160
okay so let's discuss random security

118
00:04:50,160 --> 00:04:52,560
architectures in general even regardless

119
00:04:52,560 --> 00:04:53,199
of

120
00:04:53,199 --> 00:04:56,479
tracy pretty much every random

121
00:04:56,479 --> 00:04:58,160
security solution will have the

122
00:04:58,160 --> 00:04:59,840
following um

123
00:04:59,840 --> 00:05:02,479
architecture where there is there are

124
00:05:02,479 --> 00:05:05,360
two components basically at play here

125
00:05:05,360 --> 00:05:08,800
one is the monitoring part this is the

126
00:05:08,800 --> 00:05:09,759
part

127
00:05:09,759 --> 00:05:12,800
that uh deals with uh monitoring

128
00:05:12,800 --> 00:05:13,919
everything that happens

129
00:05:13,919 --> 00:05:16,800
on the operating system right we are

130
00:05:16,800 --> 00:05:18,560
trying to protect our servers our

131
00:05:18,560 --> 00:05:20,479
production probably

132
00:05:20,479 --> 00:05:24,479
um so we will install some components

133
00:05:24,479 --> 00:05:26,560
onto that servers that will have

134
00:05:26,560 --> 00:05:28,880
visibility into every single thing that

135
00:05:28,880 --> 00:05:30,639
happens we want to capture

136
00:05:30,639 --> 00:05:33,440
as much information in as much detail as

137
00:05:33,440 --> 00:05:34,639
possible

138
00:05:34,639 --> 00:05:36,960
in order for us to make the detections

139
00:05:36,960 --> 00:05:38,400
later on so that

140
00:05:38,400 --> 00:05:42,320
part basically just produces raw data

141
00:05:42,320 --> 00:05:46,000
a lot of events and then we take those

142
00:05:46,000 --> 00:05:49,039
events we take this raw data and we fit

143
00:05:49,039 --> 00:05:50,320
it into

144
00:05:50,320 --> 00:05:51,919
the other component which is the

145
00:05:51,919 --> 00:05:53,520
detection engine this

146
00:05:53,520 --> 00:05:56,720
is a separate component that uh is

147
00:05:56,720 --> 00:05:57,680
looking

148
00:05:57,680 --> 00:06:00,240
into that stream of events and it is

149
00:06:00,240 --> 00:06:02,000
trying to find

150
00:06:02,000 --> 00:06:05,520
uh patterns suspicious patterns based on

151
00:06:05,520 --> 00:06:08,639
predefined rules that we will give it so

152
00:06:08,639 --> 00:06:12,160
um there are rules that we ship with

153
00:06:12,160 --> 00:06:13,520
tracy you can

154
00:06:13,520 --> 00:06:15,120
write your own rules as well but

155
00:06:15,120 --> 00:06:16,639
basically you

156
00:06:16,639 --> 00:06:18,800
you give it something to look for you

157
00:06:18,800 --> 00:06:20,560
you kind of teach it

158
00:06:20,560 --> 00:06:22,720
what a suspicious pattern might look

159
00:06:22,720 --> 00:06:24,639
like and then it

160
00:06:24,639 --> 00:06:27,120
looks for that for those patterns within

161
00:06:27,120 --> 00:06:29,919
the stream of incoming events

162
00:06:29,919 --> 00:06:32,319
this is a very very very very very high

163
00:06:32,319 --> 00:06:33,600
level overview

164
00:06:33,600 --> 00:06:36,960
of tracy or random security solution

165
00:06:36,960 --> 00:06:39,600
and you know the title of the talk so

166
00:06:39,600 --> 00:06:40,400
you know there are

167
00:06:40,400 --> 00:06:44,080
two core technologies that play here

168
00:06:44,080 --> 00:06:47,280
one ebpf for monitoring

169
00:06:47,280 --> 00:06:50,319
uh the operating system so

170
00:06:50,319 --> 00:06:53,919
ebpf is a very exciting

171
00:06:53,919 --> 00:06:56,240
linux technology it's part of linux part

172
00:06:56,240 --> 00:06:58,080
of the linux kernel

173
00:06:58,080 --> 00:07:02,240
and in a nutshell it allows us to

174
00:07:02,240 --> 00:07:05,199
instrument the operating system and

175
00:07:05,199 --> 00:07:06,080
attach

176
00:07:06,080 --> 00:07:09,120
to very interesting

177
00:07:09,120 --> 00:07:12,319
points in the kernel workflow

178
00:07:12,319 --> 00:07:14,479
and actually executes our own code in

179
00:07:14,479 --> 00:07:16,319
there so this is the

180
00:07:16,319 --> 00:07:18,479
this is the actually the the uniqueness

181
00:07:18,479 --> 00:07:19,840
about ebpf

182
00:07:19,840 --> 00:07:22,639
that it allows us to run our own code

183
00:07:22,639 --> 00:07:23,759
there

184
00:07:23,759 --> 00:07:25,360
so that we can collect whatever

185
00:07:25,360 --> 00:07:26,880
information we might need

186
00:07:26,880 --> 00:07:29,280
and we can do it in a very safe and

187
00:07:29,280 --> 00:07:31,599
reliable and performant way

188
00:07:31,599 --> 00:07:34,639
so that you will you will not be

189
00:07:34,639 --> 00:07:35,599
affected by this

190
00:07:35,599 --> 00:07:37,919
overhead i'll talk a little bit more

191
00:07:37,919 --> 00:07:39,840
about ebtf

192
00:07:39,840 --> 00:07:43,199
soon and the other technology that is

193
00:07:43,199 --> 00:07:44,960
helping us

194
00:07:44,960 --> 00:07:48,560
build tracy is the open policy agent

195
00:07:48,560 --> 00:07:51,680
for short opa oppa is a

196
00:07:51,680 --> 00:07:55,199
graduated cncf project that deals with

197
00:07:55,199 --> 00:07:56,160
policies

198
00:07:56,160 --> 00:07:59,199
and policy enforcement it was meant for

199
00:07:59,199 --> 00:08:00,160
scenarios like

200
00:08:00,160 --> 00:08:03,759
uh authentication uh authorizations so

201
00:08:03,759 --> 00:08:05,360
you can define

202
00:08:05,360 --> 00:08:08,720
the uh the rules the policies

203
00:08:08,720 --> 00:08:10,800
that you want um that you want to

204
00:08:10,800 --> 00:08:12,560
enforce and and hope

205
00:08:12,560 --> 00:08:14,720
and oppa gives you the language first of

206
00:08:14,720 --> 00:08:16,160
all to describe

207
00:08:16,160 --> 00:08:18,160
those policies and then the tool to

208
00:08:18,160 --> 00:08:19,360
enforce them

209
00:08:19,360 --> 00:08:22,720
another popular uh scenario that we see

210
00:08:22,720 --> 00:08:25,360
oppa at play is with kubernetes for

211
00:08:25,360 --> 00:08:26,160
example

212
00:08:26,160 --> 00:08:29,520
it is an admission controller so it will

213
00:08:29,520 --> 00:08:29,840
uh

214
00:08:29,840 --> 00:08:32,719
receive all of the user requests to

215
00:08:32,719 --> 00:08:34,479
create resources in kubernetes and you

216
00:08:34,479 --> 00:08:36,559
can define policies of

217
00:08:36,559 --> 00:08:38,958
what kind of things you want to allow or

218
00:08:38,958 --> 00:08:40,080
to deny

219
00:08:40,080 --> 00:08:43,120
and oppa can help you enforce that

220
00:08:43,120 --> 00:08:46,480
we use oppa slightly

221
00:08:46,480 --> 00:08:49,519
in a slight creative way because

222
00:08:49,519 --> 00:08:52,399
we think that the incoming events we see

223
00:08:52,399 --> 00:08:52,800
them

224
00:08:52,800 --> 00:08:56,480
as input documents and we express

225
00:08:56,480 --> 00:09:00,160
open policies to help us

226
00:09:00,160 --> 00:09:02,480
look for the specific patterns that we

227
00:09:02,480 --> 00:09:04,560
want to look within those events

228
00:09:04,560 --> 00:09:07,120
and we will also see talk more about

229
00:09:07,120 --> 00:09:08,399
oppo and see an example

230
00:09:08,399 --> 00:09:13,040
for that later in the talk

231
00:09:13,120 --> 00:09:15,120
all right so what we're going to do next

232
00:09:15,120 --> 00:09:16,160
is to

233
00:09:16,160 --> 00:09:19,760
zoom into each one of those components

234
00:09:19,760 --> 00:09:23,120
and see see them at play

235
00:09:23,120 --> 00:09:25,920
let's start with the first one about uh

236
00:09:25,920 --> 00:09:28,800
monitoring the monitoring component

237
00:09:28,800 --> 00:09:32,800
and to discuss that we first need to

238
00:09:32,800 --> 00:09:36,160
understand this um

239
00:09:36,160 --> 00:09:38,959
mental model of how the operating system

240
00:09:38,959 --> 00:09:39,839
works and

241
00:09:39,839 --> 00:09:42,560
what it means basically operating system

242
00:09:42,560 --> 00:09:44,560
tracing

243
00:09:44,560 --> 00:09:46,610
so this is a very common uh

244
00:09:46,610 --> 00:09:48,000
[Music]

245
00:09:48,000 --> 00:09:49,920
common diagram where you have your

246
00:09:49,920 --> 00:09:51,200
application

247
00:09:51,200 --> 00:09:55,200
it's running on the computer uh there is

248
00:09:55,200 --> 00:09:57,200
hardware to the computer right and your

249
00:09:57,200 --> 00:09:59,279
application is trying to make use of it

250
00:09:59,279 --> 00:10:02,079
let's say it's trying to create a file

251
00:10:02,079 --> 00:10:03,360
or it's trying to

252
00:10:03,360 --> 00:10:06,079
communicate over the network or whatever

253
00:10:06,079 --> 00:10:09,360
it needs to do with the computer

254
00:10:09,360 --> 00:10:11,680
actually the hardware itself is

255
00:10:11,680 --> 00:10:15,200
inaccessible to the application directly

256
00:10:15,200 --> 00:10:17,519
in every modern operating system

257
00:10:17,519 --> 00:10:19,440
including linux

258
00:10:19,440 --> 00:10:21,680
the kernel which is the component of the

259
00:10:21,680 --> 00:10:23,040
operating system

260
00:10:23,040 --> 00:10:24,720
that is in charge of managing the

261
00:10:24,720 --> 00:10:26,880
hardware is the only

262
00:10:26,880 --> 00:10:30,079
component that can actually touch the

263
00:10:30,079 --> 00:10:32,079
the hardware

264
00:10:32,079 --> 00:10:34,480
so the kernel is the only way that we

265
00:10:34,480 --> 00:10:35,600
can touch the hardware

266
00:10:35,600 --> 00:10:38,079
how can we do something simple like open

267
00:10:38,079 --> 00:10:38,959
a file

268
00:10:38,959 --> 00:10:40,880
because the file exists on disk we need

269
00:10:40,880 --> 00:10:43,680
to interact with the disk somehow

270
00:10:43,680 --> 00:10:46,720
so uh the way the the mechanism

271
00:10:46,720 --> 00:10:49,600
that operating systems lets us

272
00:10:49,600 --> 00:10:50,560
communicate

273
00:10:50,560 --> 00:10:52,959
with the hardware is via system calls

274
00:10:52,959 --> 00:10:53,680
system call

275
00:10:53,680 --> 00:10:56,959
is a common interface where

276
00:10:56,959 --> 00:11:00,320
the kernel exposes these system calls

277
00:11:00,320 --> 00:11:02,320
basically think of them like functions

278
00:11:02,320 --> 00:11:04,079
that you can call from the outside

279
00:11:04,079 --> 00:11:07,120
and by calling the system call let's say

280
00:11:07,120 --> 00:11:09,440
the open system call which is a real

281
00:11:09,440 --> 00:11:10,959
system call in linux

282
00:11:10,959 --> 00:11:12,959
you can ask the kernel to open a file

283
00:11:12,959 --> 00:11:15,279
for you

284
00:11:15,279 --> 00:11:18,640
so let's go through uh

285
00:11:18,640 --> 00:11:21,839
this uh these layers from the top to the

286
00:11:21,839 --> 00:11:22,720
bottom

287
00:11:22,720 --> 00:11:25,200
you the application developer or someone

288
00:11:25,200 --> 00:11:26,839
who uses an off-the-shelf

289
00:11:26,839 --> 00:11:29,519
application the application is trying to

290
00:11:29,519 --> 00:11:31,040
open a file

291
00:11:31,040 --> 00:11:33,600
probably the coder whether it's written

292
00:11:33,600 --> 00:11:35,040
in any language

293
00:11:35,040 --> 00:11:37,600
node.js python c it doesn't really

294
00:11:37,600 --> 00:11:38,480
matter

295
00:11:38,480 --> 00:11:40,720
it's going to use some library that will

296
00:11:40,720 --> 00:11:42,640
call into another library that is called

297
00:11:42,640 --> 00:11:44,959
into a lower level library which will

298
00:11:44,959 --> 00:11:46,959
eventually

299
00:11:46,959 --> 00:11:50,399
call a system call and that system call

300
00:11:50,399 --> 00:11:52,959
will be handled by the kernel the kernel

301
00:11:52,959 --> 00:11:54,959
has access to the hardware

302
00:11:54,959 --> 00:11:58,399
and via probably some device driver will

303
00:11:58,399 --> 00:12:00,639
actually move the needle read the bytes

304
00:12:00,639 --> 00:12:02,079
and return the result

305
00:12:02,079 --> 00:12:06,480
to eu and the reason that i'm um

306
00:12:06,480 --> 00:12:09,680
sharing this this at this moment is to

307
00:12:09,680 --> 00:12:12,000
show you exactly where ebpf

308
00:12:12,000 --> 00:12:15,120
fits in ebpf lets us plug right

309
00:12:15,120 --> 00:12:17,680
there between the system code and the

310
00:12:17,680 --> 00:12:18,560
kernel

311
00:12:18,560 --> 00:12:21,440
and this is the perfect place for us to

312
00:12:21,440 --> 00:12:22,160
be

313
00:12:22,160 --> 00:12:25,440
if we want to if we want visibility into

314
00:12:25,440 --> 00:12:27,200
everything that happens

315
00:12:27,200 --> 00:12:28,959
on the computer because it doesn't

316
00:12:28,959 --> 00:12:31,200
really matter whether the application

317
00:12:31,200 --> 00:12:33,440
is written in whatever language whether

318
00:12:33,440 --> 00:12:35,360
it's running in a container

319
00:12:35,360 --> 00:12:38,800
or in a vm or whether it's privileged or

320
00:12:38,800 --> 00:12:39,680
not

321
00:12:39,680 --> 00:12:42,560
none of it matters all of the code that

322
00:12:42,560 --> 00:12:43,519
is being

323
00:12:43,519 --> 00:12:45,600
executed on the computer and is trying

324
00:12:45,600 --> 00:12:47,279
to access the hardware

325
00:12:47,279 --> 00:12:50,639
is going to eventually go through us

326
00:12:50,639 --> 00:12:53,440
thanks to ebpf and this is where we have

327
00:12:53,440 --> 00:12:54,800
the opportunity

328
00:12:54,800 --> 00:12:57,760
to examine what's going on but more than

329
00:12:57,760 --> 00:12:58,800
that

330
00:12:58,800 --> 00:13:00,800
unlike other instrumentation

331
00:13:00,800 --> 00:13:02,480
technologies that lets you just

332
00:13:02,480 --> 00:13:05,600
log the calls in this case

333
00:13:05,600 --> 00:13:08,959
we can actually run our own code

334
00:13:08,959 --> 00:13:11,920
at that point and we can and our code by

335
00:13:11,920 --> 00:13:14,079
the way runs in the kernel so we have

336
00:13:14,079 --> 00:13:17,200
a lot of visibility into everything that

337
00:13:17,200 --> 00:13:18,480
happens at that point

338
00:13:18,480 --> 00:13:23,040
we can collect additional information

339
00:13:26,000 --> 00:13:29,360
sorry collect additional information

340
00:13:29,360 --> 00:13:32,720
and provide a lot of contextual

341
00:13:32,720 --> 00:13:35,920
information around the the raw event

342
00:13:35,920 --> 00:13:37,839
and this is what helps us create very

343
00:13:37,839 --> 00:13:39,279
high quality

344
00:13:39,279 --> 00:13:42,399
uh events uh with accuracy and

345
00:13:42,399 --> 00:13:45,279
reliability and the result of this is

346
00:13:45,279 --> 00:13:45,760
that

347
00:13:45,760 --> 00:13:48,880
the ebpf probe this thing that we send

348
00:13:48,880 --> 00:13:50,160
into the kernel to help us

349
00:13:50,160 --> 00:13:53,440
collect the data will tell us yeah

350
00:13:53,440 --> 00:13:57,440
an open system call was detected here

351
00:13:57,440 --> 00:13:58,399
and this is

352
00:13:58,399 --> 00:13:59,680
all of the information that i can

353
00:13:59,680 --> 00:14:03,600
extract at this point

354
00:14:03,600 --> 00:14:05,600
all right so this is operating system

355
00:14:05,600 --> 00:14:07,279
tracing that we can

356
00:14:07,279 --> 00:14:10,480
achieve using ebpf we discussed

357
00:14:10,480 --> 00:14:12,399
system calls there are a lot of system

358
00:14:12,399 --> 00:14:13,839
calls in linux

359
00:14:13,839 --> 00:14:16,880
and the good news is that tracy allows

360
00:14:16,880 --> 00:14:18,959
you to trace pretty much all of them

361
00:14:18,959 --> 00:14:21,519
out of the box today i counted it just

362
00:14:21,519 --> 00:14:22,880
before this calls

363
00:14:22,880 --> 00:14:27,199
just before this uh talk it was a 353

364
00:14:27,199 --> 00:14:29,440
system calls that we support in tracy

365
00:14:29,440 --> 00:14:32,000
it's a lot it's it gives you everything

366
00:14:32,000 --> 00:14:34,399
all of the information that you may need

367
00:14:34,399 --> 00:14:36,480
in order to make quality detections

368
00:14:36,480 --> 00:14:37,920
later on

369
00:14:37,920 --> 00:14:41,279
but the interesting part is that

370
00:14:41,279 --> 00:14:45,120
on top of those system calls

371
00:14:45,120 --> 00:14:48,560
tracy also gives you access to other

372
00:14:48,560 --> 00:14:50,160
kernel events

373
00:14:50,160 --> 00:14:53,279
these are specific uh

374
00:14:53,279 --> 00:14:56,000
points within the kernel that we chose

375
00:14:56,000 --> 00:14:57,120
to instrument

376
00:14:57,120 --> 00:15:00,320
manually in order to give you

377
00:15:00,320 --> 00:15:02,720
more information that is more meaningful

378
00:15:02,720 --> 00:15:04,480
in a security context because

379
00:15:04,480 --> 00:15:05,839
because this is where we are at we're

380
00:15:05,839 --> 00:15:08,560
trying to detect suspicious behavior

381
00:15:08,560 --> 00:15:11,360
so those other uh kernel events which i

382
00:15:11,360 --> 00:15:12,000
will demonstrate

383
00:15:12,000 --> 00:15:15,600
in a second will give you access to

384
00:15:15,600 --> 00:15:17,920
more reliable information more accurate

385
00:15:17,920 --> 00:15:20,880
information and more secure information

386
00:15:20,880 --> 00:15:24,079
and we keep adding more events to tracy

387
00:15:24,079 --> 00:15:27,440
every day um probably by the next time

388
00:15:27,440 --> 00:15:30,959
you'll see this uh recording uh

389
00:15:30,959 --> 00:15:33,680
the numbers will be different uh but

390
00:15:33,680 --> 00:15:35,279
what i want to do next is

391
00:15:35,279 --> 00:15:38,240
to demonstrate what tracy ebpf looks

392
00:15:38,240 --> 00:15:39,519
like

393
00:15:39,519 --> 00:15:41,920
by the way in the tracy code base we

394
00:15:41,920 --> 00:15:42,959
actually

395
00:15:42,959 --> 00:15:45,360
uh keep it that way that the the

396
00:15:45,360 --> 00:15:46,959
monitoring part is separate from the

397
00:15:46,959 --> 00:15:48,160
detection part

398
00:15:48,160 --> 00:15:50,959
so we call the monitoring part tracy

399
00:15:50,959 --> 00:15:52,839
ebpf

400
00:15:52,839 --> 00:15:56,399
and yeah and now we can

401
00:15:56,399 --> 00:15:59,680
see it in action

402
00:16:00,160 --> 00:16:02,560
all right so i moved over to my terminal

403
00:16:02,560 --> 00:16:04,240
here

404
00:16:04,240 --> 00:16:08,000
and uh tracy abpf is now uh an

405
00:16:08,000 --> 00:16:08,959
executable

406
00:16:08,959 --> 00:16:11,759
is a command that you can run and i can

407
00:16:11,759 --> 00:16:13,839
tell it first of all to just list

408
00:16:13,839 --> 00:16:19,040
all of the events that it can trace

409
00:16:20,000 --> 00:16:23,199
so what you see here is a huge list of

410
00:16:23,199 --> 00:16:26,959
all of the system calls and other um

411
00:16:26,959 --> 00:16:29,279
other kernel events that we can trace in

412
00:16:29,279 --> 00:16:31,360
tracy and for each one of them you can

413
00:16:31,360 --> 00:16:32,079
see

414
00:16:32,079 --> 00:16:34,880
what kind of information you can expect

415
00:16:34,880 --> 00:16:36,800
to receive

416
00:16:36,800 --> 00:16:42,000
from this event let's start tracy

417
00:16:42,000 --> 00:16:45,120
with no arguments which will start a

418
00:16:45,120 --> 00:16:47,199
general purpose trace

419
00:16:47,199 --> 00:16:49,600
it will just try to trace everything

420
00:16:49,600 --> 00:16:50,399
that happens

421
00:16:50,399 --> 00:16:51,920
and you can see already that things are

422
00:16:51,920 --> 00:16:54,399
happening here maybe try to open

423
00:16:54,399 --> 00:16:56,240
a file here and you can see more things

424
00:16:56,240 --> 00:16:58,560
that are happening let's stop the trace

425
00:16:58,560 --> 00:17:00,959
and just in a couple of seconds we

426
00:17:00,959 --> 00:17:02,160
captured

427
00:17:02,160 --> 00:17:05,679
almost 150 events and uh

428
00:17:05,679 --> 00:17:08,160
this is because you know it's a it's a

429
00:17:08,160 --> 00:17:09,439
linux

430
00:17:09,439 --> 00:17:11,760
machine it's alive it's doing things all

431
00:17:11,760 --> 00:17:12,959
the time

432
00:17:12,959 --> 00:17:15,760
and uh we can see a glimpse into what we

433
00:17:15,760 --> 00:17:17,760
were able to capture here

434
00:17:17,760 --> 00:17:19,919
at what time what user what was the

435
00:17:19,919 --> 00:17:21,039
command

436
00:17:21,039 --> 00:17:25,039
process ids what is the exact event

437
00:17:25,039 --> 00:17:28,559
and the arguments of that system

438
00:17:28,559 --> 00:17:31,840
for example we can see an open system

439
00:17:31,840 --> 00:17:33,120
call

440
00:17:33,120 --> 00:17:35,840
open add is a variant of open and you

441
00:17:35,840 --> 00:17:36,400
can see

442
00:17:36,400 --> 00:17:38,960
all of the arguments that were given to

443
00:17:38,960 --> 00:17:39,600
this

444
00:17:39,600 --> 00:17:41,840
system call and you can use this

445
00:17:41,840 --> 00:17:43,600
information to do very

446
00:17:43,600 --> 00:17:47,120
uh very interesting investigations

447
00:17:47,120 --> 00:17:51,360
let's do something else let's ask tracy

448
00:17:51,360 --> 00:17:56,559
to trace just the opennet system call

449
00:17:56,559 --> 00:17:59,760
if we do that um sorry i forgot

450
00:17:59,760 --> 00:18:04,400
to add it event uh i want

451
00:18:04,400 --> 00:18:07,360
to ask tracy to trace events of type

452
00:18:07,360 --> 00:18:08,960
opennet

453
00:18:08,960 --> 00:18:12,400
and now we see

454
00:18:12,400 --> 00:18:15,280
slightly reduced output still quite

455
00:18:15,280 --> 00:18:16,160
verbose but

456
00:18:16,160 --> 00:18:18,720
slightly reduced uh actually let's add

457
00:18:18,720 --> 00:18:20,880
another filter here

458
00:18:20,880 --> 00:18:23,120
let's ask tracy to only show us the

459
00:18:23,120 --> 00:18:25,280
output of the

460
00:18:25,280 --> 00:18:28,880
cat command right

461
00:18:28,880 --> 00:18:32,480
and i'm doing a cat down here

462
00:18:32,480 --> 00:18:34,480
for a file and you can see now a more

463
00:18:34,480 --> 00:18:35,679
digestible

464
00:18:35,679 --> 00:18:38,720
output these are all the open

465
00:18:38,720 --> 00:18:42,160
at events that happened from this

466
00:18:42,160 --> 00:18:44,000
cat command you can see it trying to

467
00:18:44,000 --> 00:18:45,360
open some files

468
00:18:45,360 --> 00:18:49,200
eventually also opening the test file

469
00:18:49,200 --> 00:18:53,360
that i asked it to open um

470
00:18:53,360 --> 00:18:55,280
and this is a good opportunity to also

471
00:18:55,280 --> 00:18:57,679
mention the other

472
00:18:57,679 --> 00:18:59,360
events that we add on top of system

473
00:18:59,360 --> 00:19:01,600
calls open edit is a system code

474
00:19:01,600 --> 00:19:04,720
and you can see here that um

475
00:19:04,720 --> 00:19:07,600
you get it access to the the real

476
00:19:07,600 --> 00:19:08,720
information that

477
00:19:08,720 --> 00:19:10,480
was given to the system called in this

478
00:19:10,480 --> 00:19:11,760
case test

479
00:19:11,760 --> 00:19:14,799
just the name of the file but uh there

480
00:19:14,799 --> 00:19:16,640
are many different ways to access a file

481
00:19:16,640 --> 00:19:17,520
in linux

482
00:19:17,520 --> 00:19:19,760
to reference a file so for example you

483
00:19:19,760 --> 00:19:20,880
can say

484
00:19:20,880 --> 00:19:23,440
the relative path the full path you can

485
00:19:23,440 --> 00:19:25,039
give it a drfd

486
00:19:25,039 --> 00:19:27,360
uh that changes the way that the path

487
00:19:27,360 --> 00:19:28,640
name is handled

488
00:19:28,640 --> 00:19:30,640
you can give it a file descriptor that

489
00:19:30,640 --> 00:19:32,000
is already opened

490
00:19:32,000 --> 00:19:33,760
this is linux so there's a lot of

491
00:19:33,760 --> 00:19:35,440
flexibility

492
00:19:35,440 --> 00:19:37,440
but what i can do here to make the

493
00:19:37,440 --> 00:19:40,080
output more usable

494
00:19:40,080 --> 00:19:44,799
is to add the security

495
00:19:44,799 --> 00:19:47,919
file open event

496
00:19:47,919 --> 00:19:50,559
this is an event that tracy is

497
00:19:50,559 --> 00:19:52,320
introducing on top of the open

498
00:19:52,320 --> 00:19:57,200
system code and i want to show you the

499
00:19:57,200 --> 00:20:00,559
differences this is the opennet system

500
00:20:00,559 --> 00:20:02,720
called same one that we've seen earlier

501
00:20:02,720 --> 00:20:04,960
that shows us the output of the tests

502
00:20:04,960 --> 00:20:07,280
the opening of the test file

503
00:20:07,280 --> 00:20:09,679
and this is the security file open that

504
00:20:09,679 --> 00:20:11,039
gives us

505
00:20:11,039 --> 00:20:14,720
the resolved file path

506
00:20:14,720 --> 00:20:17,520
to the real path to the real file that

507
00:20:17,520 --> 00:20:18,960
was

508
00:20:18,960 --> 00:20:21,679
that was opened so this is much more

509
00:20:21,679 --> 00:20:22,480
usable for

510
00:20:22,480 --> 00:20:24,960
us if we want to make some kind of

511
00:20:24,960 --> 00:20:25,919
assertions

512
00:20:25,919 --> 00:20:28,080
on this output in order to make

513
00:20:28,080 --> 00:20:29,200
detections

514
00:20:29,200 --> 00:20:32,799
moreover this event the reason it's

515
00:20:32,799 --> 00:20:34,400
called security is that it

516
00:20:34,400 --> 00:20:37,520
is more secure um i won't go into that

517
00:20:37,520 --> 00:20:39,440
we've written a very detailed blog post

518
00:20:39,440 --> 00:20:40,559
about that in the

519
00:20:40,559 --> 00:20:43,520
blog but system calls because they sit

520
00:20:43,520 --> 00:20:44,640
in the

521
00:20:44,640 --> 00:20:46,080
in the border between the user and the

522
00:20:46,080 --> 00:20:47,840
operating system the user has some

523
00:20:47,840 --> 00:20:50,240
influence on what they pass to this

524
00:20:50,240 --> 00:20:52,880
cause what kind of arguments and when

525
00:20:52,880 --> 00:20:53,520
and

526
00:20:53,520 --> 00:20:56,480
it is vulnerable to some kind of attacks

527
00:20:56,480 --> 00:20:57,200
while the

528
00:20:57,200 --> 00:21:00,640
security events

529
00:21:00,640 --> 00:21:04,880
which generally called in linux lsm um

530
00:21:04,880 --> 00:21:07,600
functions are not so it's also it's not

531
00:21:07,600 --> 00:21:08,880
only more usable

532
00:21:08,880 --> 00:21:10,880
it's also more secure to use this kind

533
00:21:10,880 --> 00:21:13,120
of events

534
00:21:13,120 --> 00:21:17,600
um i could also ask tracy to output

535
00:21:17,600 --> 00:21:21,120
the to format the output as a json

536
00:21:21,120 --> 00:21:25,439
and i could pipe this

537
00:21:25,679 --> 00:21:28,799
pipe this json stream into

538
00:21:28,799 --> 00:21:32,640
other tool that will you know look into

539
00:21:32,640 --> 00:21:34,799
for example the args you see here the

540
00:21:34,799 --> 00:21:36,400
arks property

541
00:21:36,400 --> 00:21:40,559
and we can look at the

542
00:21:40,799 --> 00:21:45,360
second argument here

543
00:21:45,360 --> 00:21:48,720
and you can further play with it and

544
00:21:48,720 --> 00:21:51,840
create your own kind of detection uh

545
00:21:51,840 --> 00:21:54,400
logic but we'll see that there's a much

546
00:21:54,400 --> 00:21:55,760
better way to do that

547
00:21:55,760 --> 00:21:58,960
soon all right so

548
00:21:58,960 --> 00:22:02,000
that was a quick uh segue just to show

549
00:22:02,000 --> 00:22:02,559
you

550
00:22:02,559 --> 00:22:04,400
what the raw data looks like the

551
00:22:04,400 --> 00:22:07,280
monitoring part of the random security

552
00:22:07,280 --> 00:22:10,400
solution of tracy let's move

553
00:22:10,400 --> 00:22:13,840
on to discuss the second component the

554
00:22:13,840 --> 00:22:16,080
detection component the detection engine

555
00:22:16,080 --> 00:22:20,480
like we call it so we're now zoomed in

556
00:22:20,480 --> 00:22:24,559
to the detection part we have

557
00:22:24,559 --> 00:22:28,000
on the left events flowing in

558
00:22:28,000 --> 00:22:31,919
from tracy ebpn this is raw data

559
00:22:31,919 --> 00:22:35,360
as we've seen and on the right we will

560
00:22:35,360 --> 00:22:38,559
produce detections these are

561
00:22:38,559 --> 00:22:40,640
alerts actionable alerts that the user

562
00:22:40,640 --> 00:22:41,919
can process

563
00:22:41,919 --> 00:22:45,120
so we've seen an example of how an event

564
00:22:45,120 --> 00:22:46,320
looks like

565
00:22:46,320 --> 00:22:48,320
i'm just formatting it here as json

566
00:22:48,320 --> 00:22:50,080
documents so it's easier easier to

567
00:22:50,080 --> 00:22:51,679
reason about

568
00:22:51,679 --> 00:22:54,720
and we have access to all of this

569
00:22:54,720 --> 00:22:56,799
information we just need to know

570
00:22:56,799 --> 00:22:59,840
what to look for um

571
00:22:59,840 --> 00:23:02,400
so this is where we are using the open

572
00:23:02,400 --> 00:23:03,200
policy

573
00:23:03,200 --> 00:23:06,240
engine more precisely more accurately uh

574
00:23:06,240 --> 00:23:10,720
the open policy agent uh

575
00:23:10,720 --> 00:23:13,600
the language that you write policies in

576
00:23:13,600 --> 00:23:14,880
is called regular

577
00:23:14,880 --> 00:23:18,400
so technically uh our our

578
00:23:18,400 --> 00:23:20,960
rule engine is able to process regal

579
00:23:20,960 --> 00:23:22,559
signatures this is how we call them

580
00:23:22,559 --> 00:23:25,360
regular signatures and it looks

581
00:23:25,360 --> 00:23:27,520
something like this

582
00:23:27,520 --> 00:23:32,480
so we ship tracy with a bunch of

583
00:23:32,480 --> 00:23:34,559
regular signatures for you you can also

584
00:23:34,559 --> 00:23:36,000
write your own you just create a new

585
00:23:36,000 --> 00:23:38,640
text file it looks something like this

586
00:23:38,640 --> 00:23:39,360
and uh

587
00:23:39,360 --> 00:23:43,439
let me just bring the pointer back

588
00:23:43,600 --> 00:23:48,480
um and you create a text file

589
00:23:48,480 --> 00:23:51,760
you you can declare some metadata for a

590
00:23:51,760 --> 00:23:54,400
prettier output but the interesting part

591
00:23:54,400 --> 00:23:56,080
is this block here

592
00:23:56,080 --> 00:23:58,640
uh you create a rule that is called

593
00:23:58,640 --> 00:24:00,880
tracey underscore match

594
00:24:00,880 --> 00:24:03,120
and within this rule you just give us a

595
00:24:03,120 --> 00:24:04,320
list of conditions

596
00:24:04,320 --> 00:24:05,919
that needs to be matched in order for

597
00:24:05,919 --> 00:24:08,799
this uh signature to

598
00:24:08,799 --> 00:24:12,159
detect so think of it like a big

599
00:24:12,159 --> 00:24:15,279
if else statement where you are only

600
00:24:15,279 --> 00:24:16,799
required to provide

601
00:24:16,799 --> 00:24:18,799
what's inside of the if what are the

602
00:24:18,799 --> 00:24:21,360
conditions that you are interested in

603
00:24:21,360 --> 00:24:24,240
and you have access to the input here so

604
00:24:24,240 --> 00:24:25,760
you can say things like

605
00:24:25,760 --> 00:24:29,840
input dot event name this is the name

606
00:24:29,840 --> 00:24:33,919
of the event so input.event name

607
00:24:33,919 --> 00:24:36,559
let's see if it equals to opennet this

608
00:24:36,559 --> 00:24:38,240
is the system call that we're interested

609
00:24:38,240 --> 00:24:39,279
in

610
00:24:39,279 --> 00:24:42,559
and then let's see if the

611
00:24:42,559 --> 00:24:46,799
input has an args field which it does

612
00:24:46,799 --> 00:24:49,840
and it's an array so let's just run

613
00:24:49,840 --> 00:24:50,880
through all of the

614
00:24:50,880 --> 00:24:53,919
elements in this array and look at the

615
00:24:53,919 --> 00:24:57,039
one called value look at the field

616
00:24:57,039 --> 00:24:57,840
called value

617
00:24:57,840 --> 00:25:00,880
of every one of those elements

618
00:25:00,880 --> 00:25:02,720
and let's call this file path because we

619
00:25:02,720 --> 00:25:05,440
know this is what it represents

620
00:25:05,440 --> 00:25:08,480
and then let's see if this file path

621
00:25:08,480 --> 00:25:11,600
equals to atc shadow which is a very

622
00:25:11,600 --> 00:25:14,960
uh well-known um

623
00:25:14,960 --> 00:25:18,000
file that uh that you don't want

624
00:25:18,000 --> 00:25:20,960
to manipulate with too much if if you do

625
00:25:20,960 --> 00:25:21,760
see

626
00:25:21,760 --> 00:25:24,400
uh this file being manipulated and

627
00:25:24,400 --> 00:25:25,840
without your knowledge then it's

628
00:25:25,840 --> 00:25:27,840
probably malicious so this is a very

629
00:25:27,840 --> 00:25:29,760
simple detection that will detect

630
00:25:29,760 --> 00:25:32,880
that but what i want to show you

631
00:25:32,880 --> 00:25:36,400
here is the really the simplicity

632
00:25:36,400 --> 00:25:39,279
of writing a new rule or a new signature

633
00:25:39,279 --> 00:25:39,679
for

634
00:25:39,679 --> 00:25:43,200
um for tracy and it all really

635
00:25:43,200 --> 00:25:45,919
thanks to opa thanks to rego writing

636
00:25:45,919 --> 00:25:47,520
something like this in code would

637
00:25:47,520 --> 00:25:48,080
probably

638
00:25:48,080 --> 00:25:51,760
result in um i don't know 50 lines of

639
00:25:51,760 --> 00:25:52,400
code

640
00:25:52,400 --> 00:25:54,720
that uh with a lot of loops and a lot of

641
00:25:54,720 --> 00:25:57,120
checks and a lot of

642
00:25:57,120 --> 00:25:59,360
a lot of stuff there here it's just

643
00:25:59,360 --> 00:26:00,320
three lines

644
00:26:00,320 --> 00:26:02,080
you know we just assert that the event

645
00:26:02,080 --> 00:26:04,559
name is opennet we just

646
00:26:04,559 --> 00:26:07,840
implicitly iterate and

647
00:26:07,840 --> 00:26:11,039
look into the elements and then do

648
00:26:11,039 --> 00:26:13,840
another assertion and that's it

649
00:26:13,840 --> 00:26:16,880
pretty neat i think um

650
00:26:16,880 --> 00:26:19,760
yeah and what i want to show you now is

651
00:26:19,760 --> 00:26:20,320
uh

652
00:26:20,320 --> 00:26:23,200
example for signatures that we have in

653
00:26:23,200 --> 00:26:24,720
tracy

654
00:26:24,720 --> 00:26:28,320
so i'm going to move over to my browser

655
00:26:28,320 --> 00:26:30,639
here

656
00:26:30,880 --> 00:26:33,360
and this is tracy on github aqua

657
00:26:33,360 --> 00:26:34,080
security

658
00:26:34,080 --> 00:26:38,159
tracy all the code for the ebpf part the

659
00:26:38,159 --> 00:26:40,080
monitoring part and the rules part

660
00:26:40,080 --> 00:26:42,240
is here i'm going to click into the

661
00:26:42,240 --> 00:26:43,360
rules part

662
00:26:43,360 --> 00:26:46,400
and signatures rego

663
00:26:46,400 --> 00:26:48,799
and you can see a few regular signatures

664
00:26:48,799 --> 00:26:51,200
here we keep adding more and more

665
00:26:51,200 --> 00:26:53,919
and let's look into for example this

666
00:26:53,919 --> 00:26:55,919
signature i chose this one because this

667
00:26:55,919 --> 00:26:57,440
one

668
00:26:57,440 --> 00:27:00,159
is maybe the most complicated one that

669
00:27:00,159 --> 00:27:00,720
we have

670
00:27:00,720 --> 00:27:03,200
but it's still pretty simple so it's

671
00:27:03,200 --> 00:27:04,559
really demonstrate

672
00:27:04,559 --> 00:27:07,919
the readability and expressiveness of

673
00:27:07,919 --> 00:27:10,159
this signatures language

674
00:27:10,159 --> 00:27:12,559
so it's a text file you declare some

675
00:27:12,559 --> 00:27:13,679
metadata here

676
00:27:13,679 --> 00:27:15,360
just so that the ui can show you

677
00:27:15,360 --> 00:27:16,960
something helpful

678
00:27:16,960 --> 00:27:19,520
you tell us what kind of events you are

679
00:27:19,520 --> 00:27:20,080
interested

680
00:27:20,080 --> 00:27:23,200
in subscribing to and that's this is

681
00:27:23,200 --> 00:27:25,360
the boilerplate and then you can see

682
00:27:25,360 --> 00:27:26,960
these tracing match

683
00:27:26,960 --> 00:27:30,480
blocks there are three here

684
00:27:30,480 --> 00:27:33,120
because this is a coding injection

685
00:27:33,120 --> 00:27:34,640
signature as you can see

686
00:27:34,640 --> 00:27:37,760
here and what it is looking for is

687
00:27:37,760 --> 00:27:39,840
indications that

688
00:27:39,840 --> 00:27:42,960
someone or something try to manipulate a

689
00:27:42,960 --> 00:27:43,840
running process

690
00:27:43,840 --> 00:27:46,960
at runtime and there are

691
00:27:46,960 --> 00:27:50,080
different ways different techniques to

692
00:27:50,080 --> 00:27:50,399
do

693
00:27:50,399 --> 00:27:54,159
that in linux right our research team

694
00:27:54,159 --> 00:27:57,039
has researched and investigated the

695
00:27:57,039 --> 00:27:57,600
different

696
00:27:57,600 --> 00:27:59,840
ways that someone might be able to

697
00:27:59,840 --> 00:28:01,200
manipulate

698
00:28:01,200 --> 00:28:04,080
a running processes image at runtime and

699
00:28:04,080 --> 00:28:05,840
it came up with these three

700
00:28:05,840 --> 00:28:08,480
ways so they just wrote them down

701
00:28:08,480 --> 00:28:10,399
codified them as rego

702
00:28:10,399 --> 00:28:13,360
code the first one is using the ptrace

703
00:28:13,360 --> 00:28:14,240
system call

704
00:28:14,240 --> 00:28:16,960
so we see if the event name is ptraced

705
00:28:16,960 --> 00:28:17,440
uh

706
00:28:17,440 --> 00:28:19,919
we look at the argument called request

707
00:28:19,919 --> 00:28:21,200
and you can see here a slightly

708
00:28:21,200 --> 00:28:22,799
different way to do that

709
00:28:22,799 --> 00:28:25,919
uh we also provide helper functions uh

710
00:28:25,919 --> 00:28:26,399
regular

711
00:28:26,399 --> 00:28:28,880
helper functions so you can ask

712
00:28:28,880 --> 00:28:29,679
something like

713
00:28:29,679 --> 00:28:31,440
give me just the value of the request

714
00:28:31,440 --> 00:28:33,200
argument without

715
00:28:33,200 --> 00:28:35,279
writing that more various code that

716
00:28:35,279 --> 00:28:36,480
you've seen earlier

717
00:28:36,480 --> 00:28:39,360
you get the result and you see whether

718
00:28:39,360 --> 00:28:39,760
the

719
00:28:39,760 --> 00:28:43,679
ptrace a request

720
00:28:43,679 --> 00:28:47,440
is p trace poke text poke text means

721
00:28:47,440 --> 00:28:48,080
that

722
00:28:48,080 --> 00:28:51,200
someone tried to manipulate the code

723
00:28:51,200 --> 00:28:54,480
of that of the program if it did

724
00:28:54,480 --> 00:28:56,840
then it's clearly a code injection

725
00:28:56,840 --> 00:28:59,279
behavior and there are other behaviors

726
00:28:59,279 --> 00:29:00,000
here let's see

727
00:29:00,000 --> 00:29:01,679
a more complicated one in this case

728
00:29:01,679 --> 00:29:03,360
we're interested in the security file

729
00:29:03,360 --> 00:29:05,279
open event

730
00:29:05,279 --> 00:29:08,559
and we want to see if the opened file

731
00:29:08,559 --> 00:29:10,399
looks something like this this is a

732
00:29:10,399 --> 00:29:12,480
regular expression so if

733
00:29:12,480 --> 00:29:15,120
if the file being opened is uh slash

734
00:29:15,120 --> 00:29:15,840
proc

735
00:29:15,840 --> 00:29:19,360
slash slash mem which is a special file

736
00:29:19,360 --> 00:29:21,760
handle that linux offers to manipulate

737
00:29:21,760 --> 00:29:23,039
the memory

738
00:29:23,039 --> 00:29:26,000
image and we also check whether it was

739
00:29:26,000 --> 00:29:26,399
open

740
00:29:26,399 --> 00:29:29,679
for write and not for read and if

741
00:29:29,679 --> 00:29:33,039
if so it's a detection uh here we can

742
00:29:33,039 --> 00:29:35,440
see another uh cool thing

743
00:29:35,440 --> 00:29:37,520
not only other helpful functions and so

744
00:29:37,520 --> 00:29:40,399
on uh we also see that we

745
00:29:40,399 --> 00:29:43,520
can you can also return a result from

746
00:29:43,520 --> 00:29:45,520
the detection it's not just a

747
00:29:45,520 --> 00:29:48,159
true false yes there was a detection you

748
00:29:48,159 --> 00:29:49,760
can also give us some

749
00:29:49,760 --> 00:29:53,440
evidence of uh give the user some

750
00:29:53,440 --> 00:29:55,760
evidence into what really happened

751
00:29:55,760 --> 00:29:57,360
and you know there are many different

752
00:29:57,360 --> 00:29:59,120
ways so we're not going to cover all the

753
00:29:59,120 --> 00:30:00,399
signatures just wanted to

754
00:30:00,399 --> 00:30:03,679
show you uh a real world

755
00:30:03,679 --> 00:30:06,320
signature that is one of the more

756
00:30:06,320 --> 00:30:07,440
complicated ones

757
00:30:07,440 --> 00:30:08,880
but i think it's actually pretty

758
00:30:08,880 --> 00:30:12,880
readable and approachable

759
00:30:13,840 --> 00:30:16,880
okay moving back to the slides we have

760
00:30:16,880 --> 00:30:18,080
covered

761
00:30:18,080 --> 00:30:21,279
the monitoring part we have covered

762
00:30:21,279 --> 00:30:24,480
the detection part and now let's zoom

763
00:30:24,480 --> 00:30:29,200
out and review the solution end to end

764
00:30:29,200 --> 00:30:32,000
we have the operating system which we

765
00:30:32,000 --> 00:30:32,559
now

766
00:30:32,559 --> 00:30:36,080
instrument using tracy's ebpf probe this

767
00:30:36,080 --> 00:30:36,320
is

768
00:30:36,320 --> 00:30:38,799
the the probe that we send into the

769
00:30:38,799 --> 00:30:39,360
kernel

770
00:30:39,360 --> 00:30:41,679
to report back to us about everything

771
00:30:41,679 --> 00:30:42,720
that happens

772
00:30:42,720 --> 00:30:45,600
it report it it reports it back to tracy

773
00:30:45,600 --> 00:30:46,960
ebpf

774
00:30:46,960 --> 00:30:49,120
which is the component that is in charge

775
00:30:49,120 --> 00:30:50,559
of monitoring

776
00:30:50,559 --> 00:30:53,840
tracy ebpf is then

777
00:30:53,840 --> 00:30:56,640
generating continuously generating an

778
00:30:56,640 --> 00:30:57,200
endless

779
00:30:57,200 --> 00:31:00,080
stream of events that represents

780
00:31:00,080 --> 00:31:01,760
everything that happens

781
00:31:01,760 --> 00:31:05,120
on the operating system and this

782
00:31:05,120 --> 00:31:08,960
uh this raw data is being uh fed into

783
00:31:08,960 --> 00:31:12,159
the tracy rules engine this is the rule

784
00:31:12,159 --> 00:31:13,600
engine

785
00:31:13,600 --> 00:31:17,440
which is loaded with um rego policies

786
00:31:17,440 --> 00:31:18,399
regular

787
00:31:18,399 --> 00:31:21,120
signatures each one of those signatures

788
00:31:21,120 --> 00:31:23,200
is always looking for a suspicious

789
00:31:23,200 --> 00:31:24,159
pattern

790
00:31:24,159 --> 00:31:27,760
and if it finds if one of the signature

791
00:31:27,760 --> 00:31:30,799
has found that pattern it will

792
00:31:30,799 --> 00:31:33,919
create an alert the alert that

793
00:31:33,919 --> 00:31:36,960
the detection itself is human readable

794
00:31:36,960 --> 00:31:38,399
is actionable unlike

795
00:31:38,399 --> 00:31:41,440
the the very verbose raw data this is

796
00:31:41,440 --> 00:31:42,399
something that you should

797
00:31:42,399 --> 00:31:44,960
understand and you should be able to

798
00:31:44,960 --> 00:31:46,720
respond to

799
00:31:46,720 --> 00:31:50,080
and you can also ask tracy to

800
00:31:50,080 --> 00:31:53,760
send this event to you in whatever

801
00:31:53,760 --> 00:31:55,679
preferred way you have for communication

802
00:31:55,679 --> 00:31:58,159
so you can ask tracy to send

803
00:31:58,159 --> 00:32:00,799
a message over a slack channel send you

804
00:32:00,799 --> 00:32:01,840
an email

805
00:32:01,840 --> 00:32:05,600
um open a jira ticket whatever

806
00:32:05,600 --> 00:32:08,640
using a very flexible webhook

807
00:32:08,640 --> 00:32:11,679
interface and this is how the runtime

808
00:32:11,679 --> 00:32:12,960
security

809
00:32:12,960 --> 00:32:16,480
looks like end to end in tracy

810
00:32:16,480 --> 00:32:19,440
and just to

811
00:32:20,000 --> 00:32:23,120
finish that demonstration i wanted to

812
00:32:23,120 --> 00:32:24,960
show you that in action

813
00:32:24,960 --> 00:32:27,720
actually i'm going to move over to our

814
00:32:27,720 --> 00:32:29,120
documentation

815
00:32:29,120 --> 00:32:32,559
very quickly um which

816
00:32:32,559 --> 00:32:35,519
is linked to from the github repository

817
00:32:35,519 --> 00:32:37,360
and i'm just going to copy this line

818
00:32:37,360 --> 00:32:38,080
over here

819
00:32:38,080 --> 00:32:40,159
this is the quick start example of how

820
00:32:40,159 --> 00:32:41,360
to run

821
00:32:41,360 --> 00:32:44,799
a tracy all together

822
00:32:44,799 --> 00:32:47,039
so

823
00:32:48,159 --> 00:32:51,519
this docker container aquasex

824
00:32:51,519 --> 00:32:54,640
tracy includes

825
00:32:54,640 --> 00:32:57,919
tracy ebpf and tracy rules and all of

826
00:32:57,919 --> 00:33:00,399
the signatures that we ship with tracy

827
00:33:00,399 --> 00:33:03,760
and it is set up so that it uh you know

828
00:33:03,760 --> 00:33:05,519
it sets everything up so that

829
00:33:05,519 --> 00:33:08,080
you immediately start monitoring and uh

830
00:33:08,080 --> 00:33:08,960
detecting

831
00:33:08,960 --> 00:33:12,080
things let's just run it like this and

832
00:33:12,080 --> 00:33:13,919
you can see that it has loaded

833
00:33:13,919 --> 00:33:17,039
some signatures and actually what i want

834
00:33:17,039 --> 00:33:17,679
to do now

835
00:33:17,679 --> 00:33:20,960
is to execute this test

836
00:33:20,960 --> 00:33:23,039
file and you can see that tracy has

837
00:33:23,039 --> 00:33:25,120
detected something

838
00:33:25,120 --> 00:33:27,519
this is a standard input output over

839
00:33:27,519 --> 00:33:28,480
socket

840
00:33:28,480 --> 00:33:31,519
which means that um

841
00:33:31,519 --> 00:33:34,559
tracy has detected that some

842
00:33:34,559 --> 00:33:37,919
someone has redirected the input or

843
00:33:37,919 --> 00:33:38,559
output

844
00:33:38,559 --> 00:33:42,720
of some process into a remote endpoint

845
00:33:42,720 --> 00:33:45,039
and it even gives you the remote

846
00:33:45,039 --> 00:33:45,760
endpoint

847
00:33:45,760 --> 00:33:48,720
that we detected and what was the

848
00:33:48,720 --> 00:33:50,399
command what was the container name

849
00:33:50,399 --> 00:33:53,200
and so on so this is something that you

850
00:33:53,200 --> 00:33:53,919
can actually

851
00:33:53,919 --> 00:33:57,200
understand and react to and uh hopefully

852
00:33:57,200 --> 00:33:59,679
mitigate

853
00:33:59,760 --> 00:34:02,880
all right great um

854
00:34:02,880 --> 00:34:06,559
so uh i hope that you learned uh about

855
00:34:06,559 --> 00:34:09,918
uh random security today uh

856
00:34:09,918 --> 00:34:12,879
i invite you to go over to github.com

857
00:34:12,879 --> 00:34:15,520
aqua security slash tracy

858
00:34:15,520 --> 00:34:18,960
we have uh discussions over at github

859
00:34:18,960 --> 00:34:21,839
so if you are trying out tracy you have

860
00:34:21,839 --> 00:34:22,879
a question

861
00:34:22,879 --> 00:34:24,879
you have a suggestion you just want to

862
00:34:24,879 --> 00:34:27,359
reach out and say something

863
00:34:27,359 --> 00:34:30,000
please go to our discussions area and

864
00:34:30,000 --> 00:34:31,760
start the discussion we'll be happy to

865
00:34:31,760 --> 00:34:33,119
talk with you

866
00:34:33,119 --> 00:34:36,320
and uh try out tracy give us a star and

867
00:34:36,320 --> 00:34:38,480
uh tell us what you think if you want to

868
00:34:38,480 --> 00:34:40,480
get in touch with me personally you can

869
00:34:40,480 --> 00:34:41,679
find me over twitter

870
00:34:41,679 --> 00:34:46,000
at itaisk ita ysk and uh with that

871
00:34:46,000 --> 00:34:48,560
i wanna thank you i hope you enjoyed

872
00:34:48,560 --> 00:34:50,000
this talk and i hope you enjoyed the

873
00:34:50,000 --> 00:34:51,599
rest of the conference

874
00:34:51,599 --> 00:34:56,720
thank you

