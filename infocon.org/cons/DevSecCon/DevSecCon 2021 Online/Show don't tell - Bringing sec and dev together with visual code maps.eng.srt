1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,559 --> 00:00:12,960
hi

3
00:00:12,960 --> 00:00:15,120
my name is peter dorak and today i'm

4
00:00:15,120 --> 00:00:16,480
going to demonstrate how to bring

5
00:00:16,480 --> 00:00:18,080
security engineers and developers

6
00:00:18,080 --> 00:00:18,880
together

7
00:00:18,880 --> 00:00:22,560
with the help of visual code labs

8
00:00:22,560 --> 00:00:25,680
a few words about myself i'm a technical

9
00:00:25,680 --> 00:00:27,359
product leader at appliance and i have

10
00:00:27,359 --> 00:00:29,199
been building products for developers

11
00:00:29,199 --> 00:00:31,199
and technical audiences in startups and

12
00:00:31,199 --> 00:00:31,679
small

13
00:00:31,679 --> 00:00:34,640
age companies for over 15 years but i'm

14
00:00:34,640 --> 00:00:36,480
not busy working on innovative products

15
00:00:36,480 --> 00:00:37,680
for developers

16
00:00:37,680 --> 00:00:39,840
i enjoy riding my bikes and playing loud

17
00:00:39,840 --> 00:00:42,160
music

18
00:00:42,800 --> 00:00:44,640
these are the main points that i'm going

19
00:00:44,640 --> 00:00:46,399
to cover in this presentation

20
00:00:46,399 --> 00:00:48,480
demonstrating how visual code maps

21
00:00:48,480 --> 00:00:50,399
recording from security pen tests

22
00:00:50,399 --> 00:00:52,480
improve collaboration between security

23
00:00:52,480 --> 00:00:54,320
and development teams

24
00:00:54,320 --> 00:00:56,480
and how they can help organizations make

25
00:00:56,480 --> 00:00:58,399
their application safer

26
00:00:58,399 --> 00:01:01,440
in a shorter time let me introduce the

27
00:01:01,440 --> 00:01:02,719
concept of code maps

28
00:01:02,719 --> 00:01:06,559
and then jump into a demo

29
00:01:06,560 --> 00:01:08,720
let me start with a statement our

30
00:01:08,720 --> 00:01:11,119
current workflow is broken

31
00:01:11,119 --> 00:01:13,040
security teams are experts in finding

32
00:01:13,040 --> 00:01:15,920
design related security vulnerabilities

33
00:01:15,920 --> 00:01:17,840
particularly those that allude typical

34
00:01:17,840 --> 00:01:19,439
code scanning tools

35
00:01:19,439 --> 00:01:21,520
but finding those security flaws is only

36
00:01:21,520 --> 00:01:22,640
half of the battle

37
00:01:22,640 --> 00:01:24,720
developers have to understand the flaw

38
00:01:24,720 --> 00:01:27,200
find the root cause fix it with the test

39
00:01:27,200 --> 00:01:30,000
and ensure that the code stays fixed

40
00:01:30,000 --> 00:01:31,119
this workflow

41
00:01:31,119 --> 00:01:33,920
find communicate fix and monitor is

42
00:01:33,920 --> 00:01:34,720
broken

43
00:01:34,720 --> 00:01:36,560
and it's leaving companies exposed to

44
00:01:36,560 --> 00:01:38,560
harmful attacks and developers left

45
00:01:38,560 --> 00:01:40,079
holding the bag

46
00:01:40,079 --> 00:01:41,840
here's where the problem lies while

47
00:01:41,840 --> 00:01:43,759
security teams only produce a slew of

48
00:01:43,759 --> 00:01:45,840
artifacts in an effort to document

49
00:01:45,840 --> 00:01:48,159
the vulnerabilities they find these

50
00:01:48,159 --> 00:01:49,680
artifacts are not optimized for

51
00:01:49,680 --> 00:01:51,200
developers

52
00:01:51,200 --> 00:01:53,280
it takes far too long for developers to

53
00:01:53,280 --> 00:01:55,200
wait through static pen test reports to

54
00:01:55,200 --> 00:01:56,960
understand flaws

55
00:01:56,960 --> 00:01:58,960
find the root cause and implement fixes

56
00:01:58,960 --> 00:02:00,719
that won't impact the larger code base

57
00:02:00,719 --> 00:02:02,079
later on

58
00:02:02,079 --> 00:02:04,560
and that's time no company can afford to

59
00:02:04,560 --> 00:02:05,680
lose

60
00:02:05,680 --> 00:02:07,600
both from the security and engineering

61
00:02:07,600 --> 00:02:10,478
resource standpoint

62
00:02:12,640 --> 00:02:14,640
what security and development teams need

63
00:02:14,640 --> 00:02:16,319
is a more efficient and productive

64
00:02:16,319 --> 00:02:17,200
process

65
00:02:17,200 --> 00:02:19,440
for working together and i'm going to

66
00:02:19,440 --> 00:02:21,360
show how they can do this with an app

67
00:02:21,360 --> 00:02:22,160
map an

68
00:02:22,160 --> 00:02:24,720
open source tool and data framework that

69
00:02:24,720 --> 00:02:25,440
records

70
00:02:25,440 --> 00:02:28,000
and maps application code as testers

71
00:02:28,000 --> 00:02:29,920
probe the application

72
00:02:29,920 --> 00:02:33,280
so what is that map ipap is like google

73
00:02:33,280 --> 00:02:34,959
maps for a code

74
00:02:34,959 --> 00:02:37,519
and we also call them code maps the

75
00:02:37,519 --> 00:02:38,640
mapping feature

76
00:02:38,640 --> 00:02:41,840
shows you how functions web services

77
00:02:41,840 --> 00:02:45,280
data stores security io and dependent

78
00:02:45,280 --> 00:02:47,360
services all work together

79
00:02:47,360 --> 00:02:48,879
appmap is different from any other

80
00:02:48,879 --> 00:02:50,480
software intelligence tools you have

81
00:02:50,480 --> 00:02:51,280
used

82
00:02:51,280 --> 00:02:52,879
because it collects information about

83
00:02:52,879 --> 00:02:57,280
how it works and the application runs

84
00:02:57,680 --> 00:03:00,959
appmap is primarily built for developers

85
00:03:00,959 --> 00:03:02,879
they can use these interactive code maps

86
00:03:02,879 --> 00:03:04,720
to quickly orient themselves in

87
00:03:04,720 --> 00:03:07,200
unfamiliar codes understand how

88
00:03:07,200 --> 00:03:09,360
monolithic applications work

89
00:03:09,360 --> 00:03:11,360
troubleshoot stubborn bugs or

90
00:03:11,360 --> 00:03:13,440
communicate co-design updates to their

91
00:03:13,440 --> 00:03:14,400
peers during

92
00:03:14,400 --> 00:03:17,440
code reviews all that makes code maps a

93
00:03:17,440 --> 00:03:19,360
perfect tool for recording

94
00:03:19,360 --> 00:03:21,280
exploring and analyzing security

95
00:03:21,280 --> 00:03:23,360
vulnerabilities as well

96
00:03:23,360 --> 00:03:25,280
app maps make it very easy to spot

97
00:03:25,280 --> 00:03:27,840
problematic code or database commands

98
00:03:27,840 --> 00:03:29,760
and then navigate to the root cause

99
00:03:29,760 --> 00:03:31,680
revealing literal blueprints of code

100
00:03:31,680 --> 00:03:33,920
flaws in applications

101
00:03:33,920 --> 00:03:35,920
and because recording code maps is

102
00:03:35,920 --> 00:03:37,760
simple and automated

103
00:03:37,760 --> 00:03:39,519
they are convenient for other teams to

104
00:03:39,519 --> 00:03:42,480
use as well including the security teams

105
00:03:42,480 --> 00:03:44,640
making them a great technical resource

106
00:03:44,640 --> 00:03:48,319
to add to pen test reports

107
00:03:49,519 --> 00:03:52,239
let me now show how code maps of

108
00:03:52,239 --> 00:03:54,080
security vulnerabilities are recorded in

109
00:03:54,080 --> 00:03:55,439
action

110
00:03:55,439 --> 00:03:57,200
i'm starting this demo as a security

111
00:03:57,200 --> 00:03:59,760
engineer who is performing a pen test

112
00:03:59,760 --> 00:04:01,840
my demo application is the well-known

113
00:04:01,840 --> 00:04:03,840
budget store that is riddled with

114
00:04:03,840 --> 00:04:05,040
security nightmares

115
00:04:05,040 --> 00:04:07,679
in its code

116
00:04:13,200 --> 00:04:16,399
so here is my application

117
00:04:16,639 --> 00:04:17,918
but here is a quick glance on this

118
00:04:17,918 --> 00:04:19,680
startup configuration

119
00:04:19,680 --> 00:04:21,600
i'm adding an appmap recording agent to

120
00:04:21,600 --> 00:04:23,840
the startup parameters of the app

121
00:04:23,840 --> 00:04:26,639
the agent can be easily added to any dev

122
00:04:26,639 --> 00:04:28,000
or test environment

123
00:04:28,000 --> 00:04:30,800
this is a java example but python ruby

124
00:04:30,800 --> 00:04:32,479
javascript and php languages are

125
00:04:32,479 --> 00:04:36,400
supported in a very similar way

126
00:04:37,199 --> 00:04:39,840
my application is now running and only

127
00:04:39,840 --> 00:04:40,880
for my test

128
00:04:40,880 --> 00:04:42,880
i will record a new code map of my

129
00:04:42,880 --> 00:04:45,199
attack with start stop controls

130
00:04:45,199 --> 00:04:48,880
in this web browser extension

131
00:04:49,520 --> 00:04:51,120
similar recording controls are also

132
00:04:51,120 --> 00:04:52,880
available for scripts

133
00:04:52,880 --> 00:04:56,080
and in popular code editors my first

134
00:04:56,080 --> 00:04:58,800
test is a simple classic example of

135
00:04:58,800 --> 00:05:00,560
reliance on cookies without proper

136
00:05:00,560 --> 00:05:02,320
variation of data access

137
00:05:02,320 --> 00:05:05,599
when i open my basket

138
00:05:06,320 --> 00:05:08,560
as an unsigned user the upgrades a new

139
00:05:08,560 --> 00:05:09,680
basket for me

140
00:05:09,680 --> 00:05:13,199
there is a new basket id

141
00:05:13,199 --> 00:05:15,440
in a session and it's set to a value

142
00:05:15,440 --> 00:05:18,000
which is larger than 1.

143
00:05:18,000 --> 00:05:22,320
let me set the basket to 1 and see what

144
00:05:22,840 --> 00:05:24,240
happens

145
00:05:24,240 --> 00:05:26,639
yep i have just accessed someone else's

146
00:05:26,639 --> 00:05:27,600
basket

147
00:05:27,600 --> 00:05:30,479
so this concludes my first test let me

148
00:05:30,479 --> 00:05:32,000
now finish the recording

149
00:05:32,000 --> 00:05:33,520
and inspect what has just happened in

150
00:05:33,520 --> 00:05:35,919
the code of the application

151
00:05:35,919 --> 00:05:38,479
the recorded app map is saved by the

152
00:05:38,479 --> 00:05:40,240
extension in mapmap clouds

153
00:05:40,240 --> 00:05:42,880
and opens in a new tab i can now inspect

154
00:05:42,880 --> 00:05:45,039
what code components and what code flows

155
00:05:45,039 --> 00:05:48,000
were executed during the test

156
00:05:48,000 --> 00:05:49,840
i can see that there were two calls to

157
00:05:49,840 --> 00:05:52,639
the basket jsp made during the test

158
00:05:52,639 --> 00:05:55,759
this is the first call

159
00:06:00,160 --> 00:06:03,680
i can see that the new blast record was

160
00:06:03,680 --> 00:06:05,280
created in database

161
00:06:05,280 --> 00:06:08,080
then fetched from the database and then

162
00:06:08,080 --> 00:06:10,080
additional details were fetched

163
00:06:10,080 --> 00:06:13,919
for my basket from the database as well

164
00:06:15,039 --> 00:06:21,280
this is the second call

165
00:06:21,280 --> 00:06:23,440
i can see that when the session id was

166
00:06:23,440 --> 00:06:24,560
present

167
00:06:24,560 --> 00:06:27,120
the application went straight to

168
00:06:27,120 --> 00:06:28,479
fetching the information about the

169
00:06:28,479 --> 00:06:30,000
basket from the database

170
00:06:30,000 --> 00:06:34,080
without doing any data access checks

171
00:06:34,080 --> 00:06:37,280
i can now save this app map and share

172
00:06:37,280 --> 00:06:38,160
the links

173
00:06:38,160 --> 00:06:40,400
with my developers as a part of my

174
00:06:40,400 --> 00:06:43,280
pentest report

175
00:06:43,280 --> 00:06:46,319
they can open it in their code editors

176
00:06:46,319 --> 00:06:48,960
and keep working from there so let me

177
00:06:48,960 --> 00:06:50,240
switch

178
00:06:50,240 --> 00:06:53,039
rows now

179
00:06:54,960 --> 00:07:00,400
let me go to my code editor

180
00:07:01,520 --> 00:07:05,280
and i can see and i can open the same

181
00:07:05,280 --> 00:07:07,199
app map as the pen tester directly in a

182
00:07:07,199 --> 00:07:09,520
code

183
00:07:09,520 --> 00:07:12,880
close to my sources so i can see the app

184
00:07:12,880 --> 00:07:14,240
here

185
00:07:14,240 --> 00:07:17,280
then i now inspect the code i can poke

186
00:07:17,280 --> 00:07:17,840
around

187
00:07:17,840 --> 00:07:20,080
and match what the outmap shows with the

188
00:07:20,080 --> 00:07:21,680
actual source code

189
00:07:21,680 --> 00:07:23,840
so i can see here what happens when the

190
00:07:23,840 --> 00:07:26,240
cookies are present

191
00:07:26,240 --> 00:07:28,240
and that the application fetches the

192
00:07:28,240 --> 00:07:30,240
data straight from the database

193
00:07:30,240 --> 00:07:33,199
without making any checks or what

194
00:07:33,199 --> 00:07:35,039
happens where a new user

195
00:07:35,039 --> 00:07:37,039
is opening a basket and how it's created

196
00:07:37,039 --> 00:07:39,759
on his behalf

197
00:07:40,080 --> 00:07:43,039
so this example is intentionally simple

198
00:07:43,039 --> 00:07:44,479
and the code is not written or

199
00:07:44,479 --> 00:07:46,479
structured like real application

200
00:07:46,479 --> 00:07:48,560
but i can apply the same approach for a

201
00:07:48,560 --> 00:07:50,160
real application code

202
00:07:50,160 --> 00:07:53,039
i'll show how such an example works in a

203
00:07:53,039 --> 00:07:54,240
moment

204
00:07:54,240 --> 00:07:56,160
before i move to the second demo let me

205
00:07:56,160 --> 00:07:58,319
quickly show examples of app maps

206
00:07:58,319 --> 00:08:00,960
of other vulnerabilities that are found

207
00:08:00,960 --> 00:08:02,879
in the budget store

208
00:08:02,879 --> 00:08:05,840
this is a recording of sql injection i

209
00:08:05,840 --> 00:08:07,360
can see

210
00:08:07,360 --> 00:08:10,080
how the unsonicized parameters to the

211
00:08:10,080 --> 00:08:13,680
login jsp page

212
00:08:13,680 --> 00:08:17,520
flow through the jsp functionality

213
00:08:17,520 --> 00:08:19,840
all the way to the compromised sql

214
00:08:19,840 --> 00:08:22,400
selects

215
00:08:22,879 --> 00:08:26,000
and here

216
00:08:26,000 --> 00:08:28,080
is an example of an app showing a

217
00:08:28,080 --> 00:08:30,240
cross-site request for journey

218
00:08:30,240 --> 00:08:34,320
where unsonitized comment

219
00:08:38,839 --> 00:08:41,839
leads to unauthorized access of the

220
00:08:41,839 --> 00:08:45,279
change password service

221
00:08:45,279 --> 00:08:47,600
hijacking the administrator's password

222
00:08:47,600 --> 00:08:50,240
in a process

223
00:08:52,399 --> 00:08:55,760
this concludes my first demo and let's

224
00:08:55,760 --> 00:08:59,680
move on to the second demo application

225
00:09:03,920 --> 00:09:06,000
my second demo application is the rails

226
00:09:06,000 --> 00:09:08,800
sample app sixth edition a very popular

227
00:09:08,800 --> 00:09:10,880
resource for mastering the ruby on rails

228
00:09:10,880 --> 00:09:12,160
framework

229
00:09:12,160 --> 00:09:15,200
it is a modern twitter-like app that is

230
00:09:15,200 --> 00:09:16,480
properly designed

231
00:09:16,480 --> 00:09:18,800
coded and that also has great test

232
00:09:18,800 --> 00:09:20,080
coverage

233
00:09:20,080 --> 00:09:21,600
one of our community members discovered

234
00:09:21,600 --> 00:09:23,680
a weakness in the app if you know the

235
00:09:23,680 --> 00:09:24,800
direct url

236
00:09:24,800 --> 00:09:26,560
you can look up registered users in

237
00:09:26,560 --> 00:09:29,599
their details without being

238
00:09:34,839 --> 00:09:36,160
authenticated

239
00:09:36,160 --> 00:09:38,640
here is the application i'm going to

240
00:09:38,640 --> 00:09:41,120
start recording

241
00:09:41,120 --> 00:09:44,720
and access the url directly

242
00:09:49,680 --> 00:09:52,080
when i stop recording i get an app map

243
00:09:52,080 --> 00:09:54,959
which will show me

244
00:10:01,440 --> 00:10:04,240
that the application fetches registered

245
00:10:04,240 --> 00:10:05,680
users data

246
00:10:05,680 --> 00:10:10,479
without any checks for authentication

247
00:10:13,040 --> 00:10:14,800
and access additional information about

248
00:10:14,800 --> 00:10:19,760
the user

249
00:10:19,760 --> 00:10:22,800
so as a developer i can now go

250
00:10:22,800 --> 00:10:24,640
and create an automated test that will

251
00:10:24,640 --> 00:10:26,640
replicate the problem

252
00:10:26,640 --> 00:10:29,680
record it create an app map and compare

253
00:10:29,680 --> 00:10:31,279
it to the origin lab map

254
00:10:31,279 --> 00:10:34,560
provided by the pentester

255
00:10:36,000 --> 00:10:38,000
here is my code editor for my ruby

256
00:10:38,000 --> 00:10:39,360
application

257
00:10:39,360 --> 00:10:42,640
and i have just written this simple test

258
00:10:42,640 --> 00:10:45,360
the test checks whether the user is

259
00:10:45,360 --> 00:10:46,079
logged in

260
00:10:46,079 --> 00:10:49,200
and if not expected him to be redirected

261
00:10:49,200 --> 00:10:50,880
to the login url

262
00:10:50,880 --> 00:10:53,600
so when i run the test the test should

263
00:10:53,600 --> 00:10:54,399
fail

264
00:10:54,399 --> 00:10:55,839
because at this point the application

265
00:10:55,839 --> 00:10:57,920
returns real data okay

266
00:10:57,920 --> 00:11:00,480
the test fails and i can take a look at

267
00:11:00,480 --> 00:11:01,279
the app map

268
00:11:01,279 --> 00:11:04,640
which has been recorded from my test

269
00:11:04,640 --> 00:11:08,079
when i look at the details i can see

270
00:11:08,079 --> 00:11:11,279
that the test is remarkably similar

271
00:11:11,279 --> 00:11:13,600
to the test recorded to the the app map

272
00:11:13,600 --> 00:11:14,320
is recorded

273
00:11:14,320 --> 00:11:16,880
is similar to the app map recorded from

274
00:11:16,880 --> 00:11:18,560
the pen test

275
00:11:18,560 --> 00:11:20,800
the code simply retrieves the user

276
00:11:20,800 --> 00:11:22,079
information

277
00:11:22,079 --> 00:11:25,359
and then additional details

278
00:11:26,079 --> 00:11:31,199
so i can fix my code now

279
00:11:41,519 --> 00:11:44,560
clear on the test

280
00:11:46,079 --> 00:11:49,359
and see the new results

281
00:11:51,279 --> 00:11:53,760
well because i have fed fingers i have

282
00:11:53,760 --> 00:11:54,880
to

283
00:11:54,880 --> 00:11:58,959
correct my typing errors

284
00:11:58,959 --> 00:12:02,079
here under test again

285
00:12:03,279 --> 00:12:06,560
okay and the test now passes

286
00:12:06,560 --> 00:12:08,720
because this app map is so similar to

287
00:12:08,720 --> 00:12:10,720
the record by the pentester

288
00:12:10,720 --> 00:12:13,600
i now have a high degree of confidence

289
00:12:13,600 --> 00:12:15,200
that i've actually fixed the reported

290
00:12:15,200 --> 00:12:16,079
problem

291
00:12:16,079 --> 00:12:18,560
and then when the pentester replicates

292
00:12:18,560 --> 00:12:19,760
the problem later

293
00:12:19,760 --> 00:12:22,079
in my fixed code he will not be able to

294
00:12:22,079 --> 00:12:24,000
do so

295
00:12:24,000 --> 00:12:26,320
so let me look at the app map recorded

296
00:12:26,320 --> 00:12:29,519
from the fixed code

297
00:12:30,240 --> 00:12:33,680
as you can see there are no sql commands

298
00:12:33,680 --> 00:12:38,480
in the code trace anymore

299
00:12:38,480 --> 00:12:41,839
and basically at this point when now the

300
00:12:41,839 --> 00:12:44,240
user is not authenticated

301
00:12:44,240 --> 00:12:47,040
uh the endpoint returns back redirect to

302
00:12:47,040 --> 00:12:49,839
the login page

303
00:12:49,920 --> 00:12:51,680
as a pentester i can very quickly verify

304
00:12:51,680 --> 00:12:52,959
the new behavior

305
00:12:52,959 --> 00:12:55,680
in the application again so when i

306
00:12:55,680 --> 00:12:56,560
reload the app

307
00:12:56,560 --> 00:12:58,880
you see that i no longer see the data

308
00:12:58,880 --> 00:13:02,320
but i'm redirected to the login

309
00:13:04,240 --> 00:13:07,120
i can now attach both app maps with the

310
00:13:07,120 --> 00:13:07,680
fix

311
00:13:07,680 --> 00:13:10,720
and with the issue to my code review and

312
00:13:10,720 --> 00:13:12,240
make it easier for my peers to

313
00:13:12,240 --> 00:13:14,399
understand the nature of my fix

314
00:13:14,399 --> 00:13:18,000
and make sure that it is well designed

315
00:13:18,000 --> 00:13:21,839
for my code base

316
00:13:22,639 --> 00:13:27,920
okay let's go back to my presentation

317
00:13:27,920 --> 00:13:30,320
so in this short demo i have

318
00:13:30,320 --> 00:13:32,639
demonstrated how visual code maps can

319
00:13:32,639 --> 00:13:34,399
complement existing tools and

320
00:13:34,399 --> 00:13:35,680
documentation

321
00:13:35,680 --> 00:13:38,399
in a process of discovery communication

322
00:13:38,399 --> 00:13:38,959
fixing

323
00:13:38,959 --> 00:13:42,320
and reviews of code flaws so what are

324
00:13:42,320 --> 00:13:44,320
the app maps changing in the work of

325
00:13:44,320 --> 00:13:46,720
security engineers and developers

326
00:13:46,720 --> 00:13:49,519
as a security engineer i can complement

327
00:13:49,519 --> 00:13:51,440
my report with code maps of my attacks

328
00:13:51,440 --> 00:13:52,240
that will help

329
00:13:52,240 --> 00:13:55,360
other teams understand how and why

330
00:13:55,360 --> 00:13:58,800
my attacks worked as a developer

331
00:13:58,800 --> 00:14:01,279
a glance at a code map attached to a pen

332
00:14:01,279 --> 00:14:02,000
test report

333
00:14:02,000 --> 00:14:04,240
quickly reveals that a part of my code

334
00:14:04,240 --> 00:14:05,360
is vulnerable

335
00:14:05,360 --> 00:14:07,120
how to build automated tests to

336
00:14:07,120 --> 00:14:08,480
replicate the issue

337
00:14:08,480 --> 00:14:10,160
and then i can use the maps to validate

338
00:14:10,160 --> 00:14:12,240
that the issue is indeed properly fixed

339
00:14:12,240 --> 00:14:14,560
without any side effects

340
00:14:14,560 --> 00:14:17,120
additionally after delivering the fix i

341
00:14:17,120 --> 00:14:18,959
can use codemarks to document my

342
00:14:18,959 --> 00:14:19,920
solution

343
00:14:19,920 --> 00:14:22,320
this will speed up the code reviews but

344
00:14:22,320 --> 00:14:24,639
also work as an example of how to write

345
00:14:24,639 --> 00:14:25,440
create and

346
00:14:25,440 --> 00:14:30,160
clean and secure code for others thank

347
00:14:30,160 --> 00:14:32,240
you for watching my presentation

348
00:14:32,240 --> 00:14:34,560
if you have any questions please join

349
00:14:34,560 --> 00:14:36,959
the q a session later

350
00:14:36,959 --> 00:14:39,920
visit us on naplan.com and join our

351
00:14:39,920 --> 00:14:41,120
discord server

352
00:14:41,120 --> 00:14:50,480
we are a friendly folks good bye

