1
00:00:07,550 --> 00:00:11,510
[Music]

2
00:00:12,000 --> 00:00:14,639
hello uh thanks for joining my session

3
00:00:14,639 --> 00:00:16,640
it's a pleasure to be here presenting at

4
00:00:16,640 --> 00:00:19,199
devsecond24 i will be talking about the

5
00:00:19,199 --> 00:00:21,600
risk of cicd pipeline poisoning via code

6
00:00:21,600 --> 00:00:24,080
build and basically security around the

7
00:00:24,080 --> 00:00:27,199
cic pipelines a bit in general

8
00:00:27,199 --> 00:00:29,279
in enterprises we attempt to make it

9
00:00:29,279 --> 00:00:31,199
secure we harden it we configure in a

10
00:00:31,199 --> 00:00:33,680
way that is aromatic so we build trust

11
00:00:33,680 --> 00:00:35,760
our goal is actually to automate and

12
00:00:35,760 --> 00:00:37,680
make sure that every time we give an

13
00:00:37,680 --> 00:00:39,840
input we have a trusted application at

14
00:00:39,840 --> 00:00:42,079
the end of this process however i will

15
00:00:42,079 --> 00:00:43,680
demonstrate that with a very simple

16
00:00:43,680 --> 00:00:45,680
action it's actually possible to break

17
00:00:45,680 --> 00:00:48,239
this trust and introduce some new risks

18
00:00:48,239 --> 00:00:50,480
into your cic pipelines if you have them

19
00:00:50,480 --> 00:00:52,320
in aws

20
00:00:52,320 --> 00:00:54,640
before getting into the topic i would

21
00:00:54,640 --> 00:00:57,280
like to speak a bit about myself my name

22
00:00:57,280 --> 00:01:00,079
is asir rivera fernandez and i work at

23
00:01:00,079 --> 00:01:02,480
pwc belgium i work at the department of

24
00:01:02,480 --> 00:01:05,040
cyber privacy but i'm originally spanish

25
00:01:05,040 --> 00:01:06,400
from the north

26
00:01:06,400 --> 00:01:08,799
region the basque country i started

27
00:01:08,799 --> 00:01:10,080
studying

28
00:01:10,080 --> 00:01:12,240
it in my bachelor in spain and then i

29
00:01:12,240 --> 00:01:13,920
moved all the way to the other side of

30
00:01:13,920 --> 00:01:15,119
sweden

31
00:01:15,119 --> 00:01:17,119
of europe into sweden where i did my

32
00:01:17,119 --> 00:01:18,799
master's thesis and i tried to come

33
00:01:18,799 --> 00:01:20,799
slowly backwards towards spain and i

34
00:01:20,799 --> 00:01:22,240
ended up in belgium doing my master's

35
00:01:22,240 --> 00:01:24,560
thesis where i now work and live

36
00:01:24,560 --> 00:01:27,759
um i do enjoy uh brainstorming and all

37
00:01:27,759 --> 00:01:29,520
these crazy sessions in which people put

38
00:01:29,520 --> 00:01:31,920
crazy ideas on the table um most of the

39
00:01:31,920 --> 00:01:33,600
times they are useless but for those

40
00:01:33,600 --> 00:01:35,840
that actually uh work out i think it's

41
00:01:35,840 --> 00:01:38,640
really worth it and i like football i

42
00:01:38,640 --> 00:01:41,280
played through all my life i guess as a

43
00:01:41,280 --> 00:01:43,680
spanish person it's kind of mandatory

44
00:01:43,680 --> 00:01:45,759
and i enjoy board games and i also like

45
00:01:45,759 --> 00:01:48,000
cooking but i'm not that good at it

46
00:01:48,000 --> 00:01:50,640
okay uh so let's get into the topic why

47
00:01:50,640 --> 00:01:52,960
did i look into security for cic

48
00:01:52,960 --> 00:01:54,799
pipelines in the cloud

49
00:01:54,799 --> 00:01:56,640
well it covers two of my passions the

50
00:01:56,640 --> 00:01:58,479
first one is secure development

51
00:01:58,479 --> 00:02:00,320
application security and the second one

52
00:02:00,320 --> 00:02:02,719
is of course cloud security and like

53
00:02:02,719 --> 00:02:05,040
most of the people in the world i got

54
00:02:05,040 --> 00:02:06,799
into cloud i started to learn about the

55
00:02:06,799 --> 00:02:08,878
services how they actually

56
00:02:08,878 --> 00:02:11,760
work together what are the possibilities

57
00:02:11,760 --> 00:02:13,599
basically the building blocks

58
00:02:13,599 --> 00:02:15,760
but when i started looking into more

59
00:02:15,760 --> 00:02:18,000
specific cases for enterprises that may

60
00:02:18,000 --> 00:02:19,440
require really

61
00:02:19,440 --> 00:02:21,040
specific

62
00:02:21,040 --> 00:02:23,520
cicd pipelines i think it is start to

63
00:02:23,520 --> 00:02:25,599
become a bit more complex in the sense

64
00:02:25,599 --> 00:02:26,480
that

65
00:02:26,480 --> 00:02:28,319
the cloud service has been designed to

66
00:02:28,319 --> 00:02:29,920
be used in a specific way although it

67
00:02:29,920 --> 00:02:32,400
covers a wide range of use cases it may

68
00:02:32,400 --> 00:02:34,640
be that it doesn't fit together and out

69
00:02:34,640 --> 00:02:36,959
of this i started

70
00:02:36,959 --> 00:02:39,120
thinking is it possible that some of

71
00:02:39,120 --> 00:02:41,120
these configurations that we adapt to

72
00:02:41,120 --> 00:02:43,280
our needs may break or affect the

73
00:02:43,280 --> 00:02:46,560
security posture of these cic pipelines

74
00:02:46,560 --> 00:02:48,400
so i decided to start by looking into

75
00:02:48,400 --> 00:02:51,200
aws for not really particular

76
00:02:51,200 --> 00:02:52,239
reason

77
00:02:52,239 --> 00:02:53,840
the goal is actually to move on and

78
00:02:53,840 --> 00:02:55,920
evaluate the other cloud providers as

79
00:02:55,920 --> 00:02:58,319
well and i took the area that i like

80
00:02:58,319 --> 00:03:00,560
which is devsecops

81
00:03:00,560 --> 00:03:02,159
and i looked into the cicd pipeline

82
00:03:02,159 --> 00:03:03,760
related services i did some risk

83
00:03:03,760 --> 00:03:05,840
analysis after deep dive some threat

84
00:03:05,840 --> 00:03:07,519
modelling and the goal is for me to

85
00:03:07,519 --> 00:03:09,680
really understand what key aspects i

86
00:03:09,680 --> 00:03:11,200
need to take into account when setting

87
00:03:11,200 --> 00:03:13,280
up secure ci cds

88
00:03:13,280 --> 00:03:15,920
so as i said i looked into the

89
00:03:15,920 --> 00:03:19,200
common aws managed services for csct

90
00:03:19,200 --> 00:03:21,599
pipelines code pipeline for the

91
00:03:21,599 --> 00:03:24,400
pipeline execution and management

92
00:03:24,400 --> 00:03:27,040
code commit for the git repositories and

93
00:03:27,040 --> 00:03:29,200
code management then for the building

94
00:03:29,200 --> 00:03:30,879
part there is code build which via

95
00:03:30,879 --> 00:03:33,120
containers it allows to execute this

96
00:03:33,120 --> 00:03:35,519
task for configuring compiling the code

97
00:03:35,519 --> 00:03:37,440
into a valid application

98
00:03:37,440 --> 00:03:39,519
and this computing power can also be

99
00:03:39,519 --> 00:03:41,840
used for unit tests or any other kind of

100
00:03:41,840 --> 00:03:43,200
testing that you need but you can also

101
00:03:43,200 --> 00:03:44,400
easily hook

102
00:03:44,400 --> 00:03:46,480
third-party solutions and last there is

103
00:03:46,480 --> 00:03:48,319
the codeploy for the

104
00:03:48,319 --> 00:03:50,560
automation of the deployment part quite

105
00:03:50,560 --> 00:03:52,159
simple

106
00:03:52,159 --> 00:03:54,640
i also looked into other

107
00:03:54,640 --> 00:03:57,280
concepts so source package

108
00:03:57,280 --> 00:03:59,680
once more very simple is basically

109
00:03:59,680 --> 00:04:01,920
taking the git repository that is stored

110
00:04:01,920 --> 00:04:04,159
in code commit and packaging it in a zip

111
00:04:04,159 --> 00:04:06,080
file and is used by code build as an

112
00:04:06,080 --> 00:04:07,840
input in order to actually do the

113
00:04:07,840 --> 00:04:09,840
compilation and the configuration of the

114
00:04:09,840 --> 00:04:11,280
final application

115
00:04:11,280 --> 00:04:12,959
and in this case include source code

116
00:04:12,959 --> 00:04:14,640
configuration files

117
00:04:14,640 --> 00:04:15,680
typical

118
00:04:15,680 --> 00:04:17,120
git repository

119
00:04:17,120 --> 00:04:18,238
resources

120
00:04:18,238 --> 00:04:20,000
then we have the artifact package which

121
00:04:20,000 --> 00:04:21,918
is basically the output of this code

122
00:04:21,918 --> 00:04:24,160
build and it contains the application

123
00:04:24,160 --> 00:04:26,639
bundle already ready for deployment also

124
00:04:26,639 --> 00:04:28,479
includes configuration files for the

125
00:04:28,479 --> 00:04:31,360
server and a scripts that you maybe need

126
00:04:31,360 --> 00:04:33,600
to run in order to configure install and

127
00:04:33,600 --> 00:04:36,800
adapt the environment to the new version

128
00:04:36,800 --> 00:04:39,120
and this artifact package is used by

129
00:04:39,120 --> 00:04:41,280
code deploy in order to install this

130
00:04:41,280 --> 00:04:43,440
application at the end of the of the

131
00:04:43,440 --> 00:04:45,199
pipeline and we are going to focus on

132
00:04:45,199 --> 00:04:47,520
server deployment although

133
00:04:47,520 --> 00:04:50,080
artifact packages and codeploy support

134
00:04:50,080 --> 00:04:52,639
also serverless via a container orlando

135
00:04:52,639 --> 00:04:54,320
functions

136
00:04:54,320 --> 00:04:56,160
and last another two concepts the

137
00:04:56,160 --> 00:04:58,960
builder spec file um very simple file it

138
00:04:58,960 --> 00:05:00,880
just contains the environment variables

139
00:05:00,880 --> 00:05:03,520
parameters and commands to be used and

140
00:05:03,520 --> 00:05:05,440
executed within the code build container

141
00:05:05,440 --> 00:05:07,759
basically step by step what the

142
00:05:07,759 --> 00:05:09,360
container needs to do to

143
00:05:09,360 --> 00:05:11,520
take the source code prepare it compile

144
00:05:11,520 --> 00:05:14,240
it and get a final application

145
00:05:14,240 --> 00:05:15,440
and

146
00:05:15,440 --> 00:05:18,080
second the app spec file which is really

147
00:05:18,080 --> 00:05:20,320
similar once more a file with scripts

148
00:05:20,320 --> 00:05:23,440
and commands to be executed this one is

149
00:05:23,440 --> 00:05:26,400
run at the server and is done via the

150
00:05:26,400 --> 00:05:28,479
code deploy agent which is an agent

151
00:05:28,479 --> 00:05:30,320
service that is installed on on the

152
00:05:30,320 --> 00:05:32,800
services that code deploy will call to

153
00:05:32,800 --> 00:05:35,039
request to do a new deployment

154
00:05:35,039 --> 00:05:36,160
um

155
00:05:36,160 --> 00:05:37,440
as i mentioned before there are

156
00:05:37,440 --> 00:05:40,240
different deployments supported so landa

157
00:05:40,240 --> 00:05:42,400
and container are not really shown here

158
00:05:42,400 --> 00:05:44,400
because we are focusing on the

159
00:05:44,400 --> 00:05:46,560
server deployment

160
00:05:46,560 --> 00:05:48,400
and i also looked into what kind of

161
00:05:48,400 --> 00:05:50,800
interactions and actions we can actually

162
00:05:50,800 --> 00:05:53,199
do with these services which type of

163
00:05:53,199 --> 00:05:55,199
functionalities they provide not just

164
00:05:55,199 --> 00:05:58,479
the common ones automated ones by aws

165
00:05:58,479 --> 00:06:00,639
but everything you can actually do with

166
00:06:00,639 --> 00:06:03,199
these services and i came across this

167
00:06:03,199 --> 00:06:05,759
very simple action the star build action

168
00:06:05,759 --> 00:06:08,080
it belongs to code build and basically

169
00:06:08,080 --> 00:06:09,199
as the

170
00:06:09,199 --> 00:06:11,120
description states it starts running new

171
00:06:11,120 --> 00:06:12,639
build makes a lot of sense because

172
00:06:12,639 --> 00:06:14,880
somehow we need to tell code bill how to

173
00:06:14,880 --> 00:06:15,919
start

174
00:06:15,919 --> 00:06:17,440
the job

175
00:06:17,440 --> 00:06:19,120
and i also looked into who actually

176
00:06:19,120 --> 00:06:22,319
should have access to these

177
00:06:23,199 --> 00:06:25,360
actions in which

178
00:06:25,360 --> 00:06:28,080
it is a quite hard task because you

179
00:06:28,080 --> 00:06:29,440
cannot really go

180
00:06:29,440 --> 00:06:30,880
to enterprises and ask them please

181
00:06:30,880 --> 00:06:32,400
provide me your

182
00:06:32,400 --> 00:06:34,800
policies your access policies because

183
00:06:34,800 --> 00:06:37,759
that's quite private uh so i had to find

184
00:06:37,759 --> 00:06:39,280
something to use a space line and i use

185
00:06:39,280 --> 00:06:42,000
the aws managed policies uh which they

186
00:06:42,000 --> 00:06:44,000
are created and managed by aws security

187
00:06:44,000 --> 00:06:45,360
engineers and identity and access

188
00:06:45,360 --> 00:06:47,120
management engineers and they are

189
00:06:47,120 --> 00:06:48,479
created with

190
00:06:48,479 --> 00:06:51,919
two support basic roles uh for example

191
00:06:51,919 --> 00:06:52,880
the

192
00:06:52,880 --> 00:06:55,759
administrator developer or read-only for

193
00:06:55,759 --> 00:06:58,400
codel so both of them the administrator

194
00:06:58,400 --> 00:07:00,720
and the developer have the access to the

195
00:07:00,720 --> 00:07:02,319
star build action so they both kind of

196
00:07:02,319 --> 00:07:03,280
start

197
00:07:03,280 --> 00:07:05,120
a build makes a lot of sense the admin

198
00:07:05,120 --> 00:07:07,039
may need to troubleshoot something the

199
00:07:07,039 --> 00:07:09,039
developer may need here or there to test

200
00:07:09,039 --> 00:07:10,720
a small thing so why not start a new

201
00:07:10,720 --> 00:07:11,840
build

202
00:07:11,840 --> 00:07:14,720
however the policy states clearly that

203
00:07:14,720 --> 00:07:16,639
the developer doesn't have access rights

204
00:07:16,639 --> 00:07:18,560
to administer the pipeline or the code

205
00:07:18,560 --> 00:07:20,240
build project so no default

206
00:07:20,240 --> 00:07:22,560
configurations can be changed

207
00:07:22,560 --> 00:07:24,160
this means that you can be sure that

208
00:07:24,160 --> 00:07:26,160
your administrator will harden and

209
00:07:26,160 --> 00:07:27,759
configure the pipeline in a way that is

210
00:07:27,759 --> 00:07:30,000
secure you can build your trust on that

211
00:07:30,000 --> 00:07:31,680
one and the developer is only going to

212
00:07:31,680 --> 00:07:34,080
be able to use it without modifying

213
00:07:34,080 --> 00:07:36,560
things however this is not completely

214
00:07:36,560 --> 00:07:37,759
true

215
00:07:37,759 --> 00:07:39,840
because i found that you can have used

216
00:07:39,840 --> 00:07:42,240
the star build functionality to perform

217
00:07:42,240 --> 00:07:43,039
three

218
00:07:43,039 --> 00:07:44,639
abuse cases the first one you could

219
00:07:44,639 --> 00:07:46,720
exfiltrate sensitive data this is

220
00:07:46,720 --> 00:07:48,080
security

221
00:07:48,080 --> 00:07:50,080
related resources like passwords

222
00:07:50,080 --> 00:07:51,520
configuration

223
00:07:51,520 --> 00:07:54,080
files etc science certificates you name

224
00:07:54,080 --> 00:07:56,080
it or even intellectual property because

225
00:07:56,080 --> 00:07:57,680
the application that you are building

226
00:07:57,680 --> 00:07:59,360
could actually be sold to customers

227
00:07:59,360 --> 00:08:00,080
right

228
00:08:00,080 --> 00:08:01,440
second and you can tamper with

229
00:08:01,440 --> 00:08:03,440
application the same way that

230
00:08:03,440 --> 00:08:05,840
the building process is going to happen

231
00:08:05,840 --> 00:08:08,400
you can spice it a bit and add some

232
00:08:08,400 --> 00:08:10,879
malware or malicious functionality like

233
00:08:10,879 --> 00:08:13,280
backdoors that then it could be

234
00:08:13,280 --> 00:08:15,280
deployed in the server or distributed to

235
00:08:15,280 --> 00:08:17,440
customers so it doesn't sound that good

236
00:08:17,440 --> 00:08:19,520
and third

237
00:08:19,520 --> 00:08:21,360
i can i will demonstrate that you can

238
00:08:21,360 --> 00:08:22,319
run

239
00:08:22,319 --> 00:08:24,000
privileged commands in the deployment

240
00:08:24,000 --> 00:08:26,160
server this is done if you are using the

241
00:08:26,160 --> 00:08:28,720
full aws cicd

242
00:08:28,720 --> 00:08:30,720
services including code pipeline code

243
00:08:30,720 --> 00:08:32,958
build and code deploy as the key points

244
00:08:32,958 --> 00:08:34,399
of your pipeline

245
00:08:34,399 --> 00:08:36,559
of course to achieve this

246
00:08:36,559 --> 00:08:37,839
the developer

247
00:08:37,839 --> 00:08:39,679
doesn't just start running a build and

248
00:08:39,679 --> 00:08:41,599
there are a couple of functionalities

249
00:08:41,599 --> 00:08:43,679
extra that the documentation includes

250
00:08:43,679 --> 00:08:46,240
but may not be that clear at first sight

251
00:08:46,240 --> 00:08:48,320
the first one first functionality is via

252
00:08:48,320 --> 00:08:50,800
the artifacts override parameter and it

253
00:08:50,800 --> 00:08:52,720
allows the developer to start a build

254
00:08:52,720 --> 00:08:55,440
and modify for this build only and the

255
00:08:55,440 --> 00:08:56,800
output of the

256
00:08:56,800 --> 00:08:58,640
artifact package so what comes out of

257
00:08:58,640 --> 00:09:00,720
code wheel normally is stored in an s3

258
00:09:00,720 --> 00:09:03,040
bucket but for this build only you can

259
00:09:03,040 --> 00:09:05,519
actually define a new one

260
00:09:05,519 --> 00:09:07,360
the fact that the it mentions for this

261
00:09:07,360 --> 00:09:08,880
build only it kind of gives the sense

262
00:09:08,880 --> 00:09:10,720
that it's not

263
00:09:10,720 --> 00:09:12,880
really powerful and also it does not

264
00:09:12,880 --> 00:09:14,720
really break what the uh developer

265
00:09:14,720 --> 00:09:16,240
policy mentioned you cannot really

266
00:09:16,240 --> 00:09:18,080
change the default configuration only

267
00:09:18,080 --> 00:09:19,519
for this build so

268
00:09:19,519 --> 00:09:21,279
why wouldn't you give it

269
00:09:21,279 --> 00:09:23,519
and then the second parameter even more

270
00:09:23,519 --> 00:09:25,279
powerful is the build aspect override

271
00:09:25,279 --> 00:09:27,519
which allows um developer to define a

272
00:09:27,519 --> 00:09:29,200
new build spec file so i already

273
00:09:29,200 --> 00:09:31,040
mentioned this determines which commands

274
00:09:31,040 --> 00:09:32,399
are executed in the container so

275
00:09:32,399 --> 00:09:34,560
basically for this one only you can

276
00:09:34,560 --> 00:09:37,279
define what the container will execute

277
00:09:37,279 --> 00:09:39,440
so how can you leverage this to

278
00:09:39,440 --> 00:09:41,360
exfiltrate sensitive data the first

279
00:09:41,360 --> 00:09:43,680
option you can just ask code bill to run

280
00:09:43,680 --> 00:09:45,200
a normal

281
00:09:45,200 --> 00:09:47,040
compilation executions on normal build

282
00:09:47,040 --> 00:09:49,760
tasks and a state please store it in my

283
00:09:49,760 --> 00:09:51,839
own s3 bucket instead of on the one that

284
00:09:51,839 --> 00:09:52,720
is

285
00:09:52,720 --> 00:09:54,399
on the enterprise account and it's

286
00:09:54,399 --> 00:09:55,600
actually hardened where you don't have

287
00:09:55,600 --> 00:09:58,080
access to at the end you get a valid

288
00:09:58,080 --> 00:10:00,160
application bundle that you could put in

289
00:10:00,160 --> 00:10:01,920
the black market or make it publicly

290
00:10:01,920 --> 00:10:03,839
available and if you render prices

291
00:10:03,839 --> 00:10:05,120
making profit out of selling that

292
00:10:05,120 --> 00:10:06,959
application well

293
00:10:06,959 --> 00:10:08,880
yeah it's a bitcoin this version good

294
00:10:08,880 --> 00:10:11,600
luck with new features there is a new

295
00:10:11,600 --> 00:10:13,839
option a second option sorry

296
00:10:13,839 --> 00:10:15,920
which is using the build aspect override

297
00:10:15,920 --> 00:10:17,839
parameter in this case since you can

298
00:10:17,839 --> 00:10:19,440
define which commands run in the

299
00:10:19,440 --> 00:10:22,079
container you can ask please do some scp

300
00:10:22,079 --> 00:10:23,839
or some post requests take those

301
00:10:23,839 --> 00:10:26,000
resources out into my own server and

302
00:10:26,000 --> 00:10:27,680
it's a very similar approach gaining

303
00:10:27,680 --> 00:10:29,360
access to sensitive data science

304
00:10:29,360 --> 00:10:31,360
certificates whatever that the container

305
00:10:31,360 --> 00:10:33,360
has access to as part of the building

306
00:10:33,360 --> 00:10:35,519
process it can be accentuated

307
00:10:35,519 --> 00:10:37,120
to do this of course you need to get

308
00:10:37,120 --> 00:10:39,040
access to the internet but by default

309
00:10:39,040 --> 00:10:40,560
the containers used by code will

310
00:10:40,560 --> 00:10:42,800
actually leverage this access so it

311
00:10:42,800 --> 00:10:44,880
should be dual second tamper with

312
00:10:44,880 --> 00:10:47,760
application similar approach a developer

313
00:10:47,760 --> 00:10:50,079
can define with uh

314
00:10:50,079 --> 00:10:52,000
which commands are going to be executed

315
00:10:52,000 --> 00:10:54,959
in the server sorry in the container

316
00:10:54,959 --> 00:10:56,880
so these

317
00:10:56,880 --> 00:10:58,800
commands can actually

318
00:10:58,800 --> 00:11:01,040
modify the artifact package that is the

319
00:11:01,040 --> 00:11:02,800
outcome of the build

320
00:11:02,800 --> 00:11:04,000
process

321
00:11:04,000 --> 00:11:05,600
including some malware for example

322
00:11:05,600 --> 00:11:07,600
modifying the actual source code to

323
00:11:07,600 --> 00:11:09,839
inject new functionalities you name it

324
00:11:09,839 --> 00:11:11,360
this artifact package can be then

325
00:11:11,360 --> 00:11:13,760
selected for delivery to installing

326
00:11:13,760 --> 00:11:16,959
servers or to be sold to customers

327
00:11:16,959 --> 00:11:18,640
and third run privilege commands in

328
00:11:18,640 --> 00:11:20,800
deployment server once more similar

329
00:11:20,800 --> 00:11:23,680
approach build a spec file overwrite

330
00:11:23,680 --> 00:11:25,760
to determine what the container runs

331
00:11:25,760 --> 00:11:27,279
this container has access to the

332
00:11:27,279 --> 00:11:28,720
artifact package

333
00:11:28,720 --> 00:11:30,399
and this artifact package if you are

334
00:11:30,399 --> 00:11:34,000
using the full aws code

335
00:11:34,000 --> 00:11:36,160
services it will contain this app spec

336
00:11:36,160 --> 00:11:38,160
file this app spec file as mentioned

337
00:11:38,160 --> 00:11:39,600
before will contain the commands to

338
00:11:39,600 --> 00:11:41,519
execute on the server so once this

339
00:11:41,519 --> 00:11:43,839
artifact package is selected for

340
00:11:43,839 --> 00:11:45,040
deployment

341
00:11:45,040 --> 00:11:47,279
your commands will execute i'm aware

342
00:11:47,279 --> 00:11:48,880
that i mentioned is privilege commands

343
00:11:48,880 --> 00:11:50,800
and you don't really need a zero day or

344
00:11:50,800 --> 00:11:52,320
any kind of privilege escalation

345
00:11:52,320 --> 00:11:54,000
technique you can use

346
00:11:54,000 --> 00:11:56,959
app spec file features like the run as

347
00:11:56,959 --> 00:11:59,279
property and then the and code deploy

348
00:11:59,279 --> 00:12:01,360
agent will run the commands as roots for

349
00:12:01,360 --> 00:12:03,519
you

350
00:12:04,320 --> 00:12:06,320
there is a small problem here is

351
00:12:06,320 --> 00:12:08,160
in order for this to actually work we

352
00:12:08,160 --> 00:12:10,720
need that our artifact package it's

353
00:12:10,720 --> 00:12:12,800
actually selected for deployment this is

354
00:12:12,800 --> 00:12:14,639
done if your package is the latest

355
00:12:14,639 --> 00:12:16,560
version for example but it doesn't work

356
00:12:16,560 --> 00:12:19,519
like this with uh code pipeline

357
00:12:19,519 --> 00:12:21,680
because a code pipeline randomizes the

358
00:12:21,680 --> 00:12:23,200
name of every package for every

359
00:12:23,200 --> 00:12:25,040
execution so source package artifact

360
00:12:25,040 --> 00:12:26,959
package any other package that you are

361
00:12:26,959 --> 00:12:28,399
building throughout your pipeline will

362
00:12:28,399 --> 00:12:30,480
have a randomized name this helps code

363
00:12:30,480 --> 00:12:32,160
pipeline to keep the versioning but you

364
00:12:32,160 --> 00:12:33,839
cannot guess the number so we need to

365
00:12:33,839 --> 00:12:36,839
find out which is the name of this

366
00:12:36,839 --> 00:12:39,760
randomized artifact so i looked into it

367
00:12:39,760 --> 00:12:40,639
also

368
00:12:40,639 --> 00:12:42,160
and there are two options of course code

369
00:12:42,160 --> 00:12:44,160
pipeline knows which randomized name it

370
00:12:44,160 --> 00:12:46,320
generated it needs to keep track of it

371
00:12:46,320 --> 00:12:47,920
and the second option call build needs

372
00:12:47,920 --> 00:12:49,920
to know it because at some point during

373
00:12:49,920 --> 00:12:52,320
the execution it was able to write to

374
00:12:52,320 --> 00:12:54,560
store the legitimate artifact in an s3

375
00:12:54,560 --> 00:12:56,800
bucket so the first option needs one

376
00:12:56,800 --> 00:12:58,560
action code pipeline list action

377
00:12:58,560 --> 00:12:59,760
executions

378
00:12:59,760 --> 00:13:00,959
and

379
00:13:00,959 --> 00:13:02,240
this one is

380
00:13:02,240 --> 00:13:04,560
not included as part of the code build

381
00:13:04,560 --> 00:13:06,480
policy so it can be that your developers

382
00:13:06,480 --> 00:13:08,639
don't have it however it's quite a low

383
00:13:08,639 --> 00:13:09,600
risk

384
00:13:09,600 --> 00:13:11,600
action and it will allow the developers

385
00:13:11,600 --> 00:13:13,680
to keep track and monitor the pipeline

386
00:13:13,680 --> 00:13:15,519
execution so to see all the green lights

387
00:13:15,519 --> 00:13:17,760
step by step so it's quite likely that

388
00:13:17,760 --> 00:13:19,519
they have it however it's not really a

389
00:13:19,519 --> 00:13:21,200
problem because the other one the code

390
00:13:21,200 --> 00:13:22,399
will option

391
00:13:22,399 --> 00:13:23,920
you need two actions but both are

392
00:13:23,920 --> 00:13:26,720
included as part of the developer policy

393
00:13:26,720 --> 00:13:29,040
that i showed before the aws management

394
00:13:29,040 --> 00:13:30,480
so if you are using that one your

395
00:13:30,480 --> 00:13:32,320
developers will have all three actions

396
00:13:32,320 --> 00:13:34,800
required

397
00:13:34,800 --> 00:13:37,920
so how does it actually work

398
00:13:37,920 --> 00:13:40,720
well i will showcase

399
00:13:40,720 --> 00:13:42,480
the steps and i will

400
00:13:42,480 --> 00:13:44,560
use the code pipeline portion in tester

401
00:13:44,560 --> 00:13:46,079
which is a tool that i have developed

402
00:13:46,079 --> 00:13:48,160
composed of an api for monitoring

403
00:13:48,160 --> 00:13:50,240
purposes and a script that is actually

404
00:13:50,240 --> 00:13:51,920
the one doing the actions with the goal

405
00:13:51,920 --> 00:13:54,160
of automating the steps that a developer

406
00:13:54,160 --> 00:13:56,320
could do to abuse the star build action

407
00:13:56,320 --> 00:13:58,480
it's available on github so feel free to

408
00:13:58,480 --> 00:14:00,240
go and have a look

409
00:14:00,240 --> 00:14:03,199
and how does it work basically it is in

410
00:14:03,199 --> 00:14:05,040
the build phase where the script is

411
00:14:05,040 --> 00:14:07,600
actually going to do most of the job

412
00:14:07,600 --> 00:14:10,240
uh which is at this phase codepython has

413
00:14:10,240 --> 00:14:12,399
generated this randomized name so at

414
00:14:12,399 --> 00:14:14,959
that point a code our script the tool is

415
00:14:14,959 --> 00:14:16,800
going to request the name once it's

416
00:14:16,800 --> 00:14:18,880
found it will ask goldbill to start a

417
00:14:18,880 --> 00:14:20,959
new poisoned build this is going to

418
00:14:20,959 --> 00:14:22,880
happen kind of parallel to the

419
00:14:22,880 --> 00:14:25,360
legitimate build so the legitimate will

420
00:14:25,360 --> 00:14:27,279
always finish before the legitimate

421
00:14:27,279 --> 00:14:29,120
build package

422
00:14:29,120 --> 00:14:30,560
artifact package will be stored in the

423
00:14:30,560 --> 00:14:33,040
s3 packet and then we will start a

424
00:14:33,040 --> 00:14:35,600
poisson build in this case

425
00:14:35,600 --> 00:14:36,320
we

426
00:14:36,320 --> 00:14:38,320
have used of course we use the override

427
00:14:38,320 --> 00:14:41,040
parameters so the artifact override will

428
00:14:41,040 --> 00:14:43,279
specify the randomized name of the

429
00:14:43,279 --> 00:14:45,440
legitimate package so when it is stored

430
00:14:45,440 --> 00:14:48,240
it overrides the good one and the second

431
00:14:48,240 --> 00:14:50,079
we leverage the builder spec

432
00:14:50,079 --> 00:14:52,480
override to inject our own malicious

433
00:14:52,480 --> 00:14:54,959
voice on the script but the tool doesn't

434
00:14:54,959 --> 00:14:57,760
do any harm to your system so it's okay

435
00:14:57,760 --> 00:15:01,040
it does two tasks the first one is uh

436
00:15:01,040 --> 00:15:03,760
it sends a post request to the cbpd api

437
00:15:03,760 --> 00:15:05,760
for monitoring purposes also to

438
00:15:05,760 --> 00:15:07,920
demonstrate that the container or the

439
00:15:07,920 --> 00:15:10,240
server where these are executed

440
00:15:10,240 --> 00:15:11,600
have access to the internet and

441
00:15:11,600 --> 00:15:14,399
demonstrate that um data celebration is

442
00:15:14,399 --> 00:15:17,920
possible and the second task

443
00:15:17,920 --> 00:15:20,639
is to create a file this happens at

444
00:15:20,639 --> 00:15:22,240
container site and

445
00:15:22,240 --> 00:15:23,440
in this case

446
00:15:23,440 --> 00:15:24,399
the

447
00:15:24,399 --> 00:15:26,399
file is stored at the artifact package

448
00:15:26,399 --> 00:15:28,160
to demonstrate that you can tamper with

449
00:15:28,160 --> 00:15:29,839
the artifact package to include other

450
00:15:29,839 --> 00:15:31,920
things and it also happens at the server

451
00:15:31,920 --> 00:15:34,000
where a file is created at the root

452
00:15:34,000 --> 00:15:36,000
directory with root access right of

453
00:15:36,000 --> 00:15:38,639
course to demonstrate the risk of

454
00:15:38,639 --> 00:15:41,680
code execution and i have a live

455
00:15:41,680 --> 00:15:45,599
environment demonstration for this

456
00:15:47,199 --> 00:15:48,959
so i have a nice video in the left hand

457
00:15:48,959 --> 00:15:50,959
side you will see the enterprise point

458
00:15:50,959 --> 00:15:53,199
of view the aws environment there you go

459
00:15:53,199 --> 00:15:54,959
the hello world pipeline

460
00:15:54,959 --> 00:15:57,680
in this case you have the source and the

461
00:15:57,680 --> 00:15:59,440
build phases with code commit code build

462
00:15:59,440 --> 00:16:01,360
and then there is

463
00:16:01,360 --> 00:16:03,440
others which covers the manual approval

464
00:16:03,440 --> 00:16:05,440
so all those unit tests etc you can put

465
00:16:05,440 --> 00:16:07,279
them there and the deploy via code

466
00:16:07,279 --> 00:16:09,759
deploy of course the enterprise also has

467
00:16:09,759 --> 00:16:12,079
a deployment server which i will show in

468
00:16:12,079 --> 00:16:14,479
a second

469
00:16:15,199 --> 00:16:17,759
there we go it's just a basic

470
00:16:17,759 --> 00:16:19,199
amazon

471
00:16:19,199 --> 00:16:21,199
linux 2 ami there's nothing really

472
00:16:21,199 --> 00:16:23,120
installed i want just to show that the

473
00:16:23,120 --> 00:16:24,800
root directory is

474
00:16:24,800 --> 00:16:26,639
clean it doesn't contain any strange

475
00:16:26,639 --> 00:16:28,399
files

476
00:16:28,399 --> 00:16:32,639
so i will list it can take a second

477
00:16:35,120 --> 00:16:37,040
there you go there is no cppt was here

478
00:16:37,040 --> 00:16:39,199
file which is the one that our uh tool

479
00:16:39,199 --> 00:16:40,959
will request to be generated when

480
00:16:40,959 --> 00:16:42,000
poisoning

481
00:16:42,000 --> 00:16:43,600
and now it will show you the part of the

482
00:16:43,600 --> 00:16:46,399
developer so the ctpd tool the script

483
00:16:46,399 --> 00:16:47,680
will be in the right hand side and the

484
00:16:47,680 --> 00:16:50,079
api will be shown in the left hand side

485
00:16:50,079 --> 00:16:51,600
there you go so in the left you see the

486
00:16:51,600 --> 00:16:54,320
api which contains the url the url and

487
00:16:54,320 --> 00:16:56,560
the key that is provided to the script

488
00:16:56,560 --> 00:16:58,079
in the right hand side so we will target

489
00:16:58,079 --> 00:16:59,839
the hello world pipeline and we will

490
00:16:59,839 --> 00:17:01,759
provide url and

491
00:17:01,759 --> 00:17:03,680
api key and there is also the

492
00:17:03,680 --> 00:17:05,359
credentials of the user in between that

493
00:17:05,359 --> 00:17:07,039
i will show in a moment there you go the

494
00:17:07,039 --> 00:17:09,439
irf dev this one has only one inline

495
00:17:09,439 --> 00:17:11,280
policy with two actions there is no

496
00:17:11,280 --> 00:17:13,679
other type of boundaries and it provides

497
00:17:13,679 --> 00:17:15,599
the code pipeline options so list action

498
00:17:15,599 --> 00:17:17,359
executions and star build there are no

499
00:17:17,359 --> 00:17:19,839
groups so no extra actions allowed and

500
00:17:19,839 --> 00:17:21,439
this is the access key the only one that

501
00:17:21,439 --> 00:17:23,039
is provided to the script so that the

502
00:17:23,039 --> 00:17:25,520
script can call the services on behalf

503
00:17:25,520 --> 00:17:27,599
of the developer so now let's see it in

504
00:17:27,599 --> 00:17:29,360
action i start the script

505
00:17:29,360 --> 00:17:31,440
which you see it is not allowed to do

506
00:17:31,440 --> 00:17:32,720
code build of course it doesn't have

507
00:17:32,720 --> 00:17:34,320
those access so it went for the code

508
00:17:34,320 --> 00:17:36,640
pipeline option and i start an execution

509
00:17:36,640 --> 00:17:38,000
of the pipeline

510
00:17:38,000 --> 00:17:40,000
in this case the source works quite fast

511
00:17:40,000 --> 00:17:41,600
but we're not really interested into the

512
00:17:41,600 --> 00:17:43,600
source package we are interested into

513
00:17:43,600 --> 00:17:45,360
the artifact package name

514
00:17:45,360 --> 00:17:47,120
so the build goes on

515
00:17:47,120 --> 00:17:48,799
in the next phase and here the

516
00:17:48,799 --> 00:17:51,039
legitimate one is running at some point

517
00:17:51,039 --> 00:17:53,200
code pipeline is going to notify code

518
00:17:53,200 --> 00:17:56,400
bill the name of the randomized

519
00:17:56,400 --> 00:17:58,320
new artifact package and our tool is

520
00:17:58,320 --> 00:18:00,240
going to be able to find it there you go

521
00:18:00,240 --> 00:18:02,000
at that point it does the two steps the

522
00:18:02,000 --> 00:18:04,240
first one is to start a new poison build

523
00:18:04,240 --> 00:18:06,880
so our poison bill is already ongoing

524
00:18:06,880 --> 00:18:09,120
and it reached out to the api to notify

525
00:18:09,120 --> 00:18:10,799
i poisoned a new

526
00:18:10,799 --> 00:18:13,120
execution and it will now monitor it so

527
00:18:13,120 --> 00:18:14,559
you can see the table there will be a

528
00:18:14,559 --> 00:18:17,200
moment in which the

529
00:18:17,200 --> 00:18:19,919
container will reach out to the api

530
00:18:19,919 --> 00:18:21,679
it may take a few seconds normally it's

531
00:18:21,679 --> 00:18:24,799
under 30 seconds but there it is and now

532
00:18:24,799 --> 00:18:26,640
uh i just go and continue with the

533
00:18:26,640 --> 00:18:29,280
execution as normal manual approval

534
00:18:29,280 --> 00:18:31,120
everybody all the stakeholders were okay

535
00:18:31,120 --> 00:18:32,880
with the results so why not let's go on

536
00:18:32,880 --> 00:18:34,720
and we go to the deploy phase here

537
00:18:34,720 --> 00:18:36,880
similar the server needs to download the

538
00:18:36,880 --> 00:18:39,600
package it will open our voice and one

539
00:18:39,600 --> 00:18:41,520
and take the app spec file and it will

540
00:18:41,520 --> 00:18:43,919
reach out to the cpt api

541
00:18:43,919 --> 00:18:47,280
this may take a few seconds

542
00:18:47,520 --> 00:18:49,440
there we go so it already notified most

543
00:18:49,440 --> 00:18:52,000
likely our file is already stored

544
00:18:52,000 --> 00:18:53,440
and the deploy phase still needs to

545
00:18:53,440 --> 00:18:55,520
finish so for the sake of all the green

546
00:18:55,520 --> 00:18:58,000
lights let's wait for it there it is i

547
00:18:58,000 --> 00:18:59,440
go back to the

548
00:18:59,440 --> 00:19:01,840
server

549
00:19:02,880 --> 00:19:04,559
and i will do exactly the same process

550
00:19:04,559 --> 00:19:07,840
we'll just list the root directory to

551
00:19:07,840 --> 00:19:11,200
show you that the file is actually there

552
00:19:11,200 --> 00:19:13,919
let's wait a few seconds

553
00:19:13,919 --> 00:19:16,400
there it is created as root

554
00:19:16,400 --> 00:19:18,640
so that's basically it from a

555
00:19:18,640 --> 00:19:19,520
live

556
00:19:19,520 --> 00:19:20,640
demo

557
00:19:20,640 --> 00:19:21,679
now

558
00:19:21,679 --> 00:19:23,840
when i realized about this potential

559
00:19:23,840 --> 00:19:26,160
risk i put them under

560
00:19:26,160 --> 00:19:28,400
the view of experts in the team and we

561
00:19:28,400 --> 00:19:31,200
try to be critical and evaluate whether

562
00:19:31,200 --> 00:19:32,640
these risks are actually relevant for

563
00:19:32,640 --> 00:19:35,919
the real world because is a exfiltration

564
00:19:35,919 --> 00:19:37,760
really an issue since our developers can

565
00:19:37,760 --> 00:19:40,080
already read the code and

566
00:19:40,080 --> 00:19:41,280
read the documentation so they have a

567
00:19:41,280 --> 00:19:43,679
lot of information and this is true

568
00:19:43,679 --> 00:19:46,320
but putting aside the security related

569
00:19:46,320 --> 00:19:48,080
passwords configuration signing

570
00:19:48,080 --> 00:19:49,840
certificates in

571
00:19:49,840 --> 00:19:51,919
many enterprises in confidential

572
00:19:51,919 --> 00:19:54,160
projects the code base is divided into

573
00:19:54,160 --> 00:19:55,760
different layers

574
00:19:55,760 --> 00:19:58,000
this can be components libraries or even

575
00:19:58,000 --> 00:19:59,760
branches and the access is actually

576
00:19:59,760 --> 00:20:01,679
segregated so in this case this allows

577
00:20:01,679 --> 00:20:04,080
bypassing those cases because code build

578
00:20:04,080 --> 00:20:06,240
requires access to the full source code

579
00:20:06,240 --> 00:20:07,919
and not only a part of the developer may

580
00:20:07,919 --> 00:20:10,240
have access to second tampering is

581
00:20:10,240 --> 00:20:12,000
really a problem i mean our developers

582
00:20:12,000 --> 00:20:13,520
can write the code that gets into the

583
00:20:13,520 --> 00:20:15,600
pipeline and it's true and this is a

584
00:20:15,600 --> 00:20:17,440
known risk and that is why in a secure

585
00:20:17,440 --> 00:20:20,000
sdlc environment security controls are

586
00:20:20,000 --> 00:20:22,400
implemented like peerco review to avoid

587
00:20:22,400 --> 00:20:24,240
that one person only can actually just

588
00:20:24,240 --> 00:20:25,440
push code that ends up in the

589
00:20:25,440 --> 00:20:27,679
application to avoid

590
00:20:27,679 --> 00:20:29,039
these

591
00:20:29,039 --> 00:20:30,960
rogue developers however code build

592
00:20:30,960 --> 00:20:33,280
allows to bypass those and inject code

593
00:20:33,280 --> 00:20:35,039
directly during the building process so

594
00:20:35,039 --> 00:20:37,440
there is no real way to check it

595
00:20:37,440 --> 00:20:39,200
third is execution really a problem

596
00:20:39,200 --> 00:20:41,919
especially in modern and very agile

597
00:20:41,919 --> 00:20:43,840
csd pipelines developers become really

598
00:20:43,840 --> 00:20:45,520
important and they often have access

599
00:20:45,520 --> 00:20:47,679
throughout the full pipeline including

600
00:20:47,679 --> 00:20:49,600
the the server instance to do some

601
00:20:49,600 --> 00:20:51,600
configuration tasks or other

602
00:20:51,600 --> 00:20:53,520
installation tasks that are required and

603
00:20:53,520 --> 00:20:55,120
this is true but in that case this is a

604
00:20:55,120 --> 00:20:57,039
risk that is known accepted and

605
00:20:57,039 --> 00:20:58,720
potentially security controls are

606
00:20:58,720 --> 00:21:01,120
implemented to limit the access of that

607
00:21:01,120 --> 00:21:03,360
developer however with this list code

608
00:21:03,360 --> 00:21:06,159
build allows you to find a sadly way to

609
00:21:06,159 --> 00:21:09,039
get into the server and potentially you

610
00:21:09,039 --> 00:21:10,720
will never find out what actually went

611
00:21:10,720 --> 00:21:13,360
wrong unless you are aware of this

612
00:21:13,360 --> 00:21:14,720
potential risk

613
00:21:14,720 --> 00:21:16,400
and last these developers are actually

614
00:21:16,400 --> 00:21:17,919
our colleagues we have coffee with them

615
00:21:17,919 --> 00:21:20,000
we have lunch with them so we should

616
00:21:20,000 --> 00:21:21,919
trust them right and that's true but i

617
00:21:21,919 --> 00:21:23,679
would like you to consider some other

618
00:21:23,679 --> 00:21:25,840
cases like credentials can be linked it

619
00:21:25,840 --> 00:21:27,919
couldn't be the first time that

620
00:21:27,919 --> 00:21:30,240
github a repository that is publicly

621
00:21:30,240 --> 00:21:32,880
available contains developer credentials

622
00:21:32,880 --> 00:21:34,640
and there are others like black mailing

623
00:21:34,640 --> 00:21:37,600
or other types of breaches right

624
00:21:37,600 --> 00:21:40,480
so um we took all this and we notified

625
00:21:40,480 --> 00:21:42,480
aws because we thought this is an issue

626
00:21:42,480 --> 00:21:45,520
this should not really be allowed or at

627
00:21:45,520 --> 00:21:47,120
least it should be more

628
00:21:47,120 --> 00:21:48,880
obvious that this action is more than

629
00:21:48,880 --> 00:21:50,960
just start running a build and we

630
00:21:50,960 --> 00:21:52,720
thought somehow that the problem was on

631
00:21:52,720 --> 00:21:53,919
the

632
00:21:53,919 --> 00:21:56,480
software level so the design

633
00:21:56,480 --> 00:21:59,280
of this functionality was not properly

634
00:21:59,280 --> 00:22:02,320
thought from a security mindset because

635
00:22:02,320 --> 00:22:03,840
it allows quite a lot of

636
00:22:03,840 --> 00:22:05,280
powerful actions

637
00:22:05,280 --> 00:22:07,760
but aws responded that this is intended

638
00:22:07,760 --> 00:22:08,720
behavior

639
00:22:08,720 --> 00:22:10,480
star build

640
00:22:10,480 --> 00:22:12,159
functions as they expect there is

641
00:22:12,159 --> 00:22:14,080
nothing but and this is true and they

642
00:22:14,080 --> 00:22:15,840
also state that is the

643
00:22:15,840 --> 00:22:18,240
responsibility of the customer to define

644
00:22:18,240 --> 00:22:20,960
who actually has access to this action

645
00:22:20,960 --> 00:22:22,880
and whatnot we can discuss whether it is

646
00:22:22,880 --> 00:22:24,799
properly explained how

647
00:22:24,799 --> 00:22:26,960
critical it is and whether they use it

648
00:22:26,960 --> 00:22:29,120
or not in their policies in a more uh

649
00:22:29,120 --> 00:22:31,280
easy or more um

650
00:22:31,280 --> 00:22:34,640
confidential uh level manner um but yeah

651
00:22:34,640 --> 00:22:36,400
it's the way it is it's their their

652
00:22:36,400 --> 00:22:38,880
decision so it's basically our problem

653
00:22:38,880 --> 00:22:40,640
to take care of it that's why i would

654
00:22:40,640 --> 00:22:41,760
like to

655
00:22:41,760 --> 00:22:43,520
propose a couple of approaches that you

656
00:22:43,520 --> 00:22:46,159
can reduce or mitigate these risks the

657
00:22:46,159 --> 00:22:48,400
first one is if you can deny

658
00:22:48,400 --> 00:22:50,240
the access to the star reaction just do

659
00:22:50,240 --> 00:22:52,880
it let's go and put it explicit denied

660
00:22:52,880 --> 00:22:56,080
um and then automate execution at the

661
00:22:56,080 --> 00:22:57,919
start of the pipeline execution this can

662
00:22:57,919 --> 00:22:59,840
be done via hook so every time new code

663
00:22:59,840 --> 00:23:01,520
is pushed to the master branch start a

664
00:23:01,520 --> 00:23:04,240
new pipeline execution why not

665
00:23:04,240 --> 00:23:06,559
i know that this does not fit everybody

666
00:23:06,559 --> 00:23:08,559
because some specific needs

667
00:23:08,559 --> 00:23:10,640
will require your developers to somehow

668
00:23:10,640 --> 00:23:12,640
start in a more manual fashion these

669
00:23:12,640 --> 00:23:14,720
deals and if that is the case i see two

670
00:23:14,720 --> 00:23:16,480
options the first one is

671
00:23:16,480 --> 00:23:18,960
your users don't require these override

672
00:23:18,960 --> 00:23:21,200
parameters and in that case you can use

673
00:23:21,200 --> 00:23:22,880
a lambda function as a proxy so the

674
00:23:22,880 --> 00:23:24,799
developer will call the lambda function

675
00:23:24,799 --> 00:23:26,559
and the lambda function will call the

676
00:23:26,559 --> 00:23:28,720
star build on behalf of the developer

677
00:23:28,720 --> 00:23:29,840
without

678
00:23:29,840 --> 00:23:30,880
using

679
00:23:30,880 --> 00:23:32,720
the override parameters

680
00:23:32,720 --> 00:23:34,320
the second option and the most complex

681
00:23:34,320 --> 00:23:36,480
one is if you really need those override

682
00:23:36,480 --> 00:23:38,480
parameters for your developers in this

683
00:23:38,480 --> 00:23:40,880
case the best option is to rethink your

684
00:23:40,880 --> 00:23:43,679
cicd pipeline so identify and evaluate

685
00:23:43,679 --> 00:23:45,440
those sensitive tasks like co-signing

686
00:23:45,440 --> 00:23:47,600
for example and then split them make

687
00:23:47,600 --> 00:23:48,960
sure that they are in different code

688
00:23:48,960 --> 00:23:50,480
build projects and that they are ordered

689
00:23:50,480 --> 00:23:52,159
your dream is important because if you

690
00:23:52,159 --> 00:23:54,960
allow human access to a task prior to

691
00:23:54,960 --> 00:23:56,960
for example that co-signing everything

692
00:23:56,960 --> 00:23:58,640
that happened before has effect so if

693
00:23:58,640 --> 00:24:00,559
new code is introduced it is signed and

694
00:24:00,559 --> 00:24:02,320
then it becomes trusted

695
00:24:02,320 --> 00:24:04,400
and last deny access especially to the

696
00:24:04,400 --> 00:24:06,880
sensitive tasks and as many tasks as you

697
00:24:06,880 --> 00:24:08,799
can of course

698
00:24:08,799 --> 00:24:10,960
so that is everything from my side has

699
00:24:10,960 --> 00:24:12,480
been a great pleasure to be here with

700
00:24:12,480 --> 00:24:14,320
you today i hope you enjoyed it as much

701
00:24:14,320 --> 00:24:16,320
as i did and i hope to see you soon i

702
00:24:16,320 --> 00:24:18,400
will be answering your questions in the

703
00:24:18,400 --> 00:24:20,559
chat so feel free to comment and share

704
00:24:20,559 --> 00:24:21,600
your

705
00:24:21,600 --> 00:24:25,158
questions of course

