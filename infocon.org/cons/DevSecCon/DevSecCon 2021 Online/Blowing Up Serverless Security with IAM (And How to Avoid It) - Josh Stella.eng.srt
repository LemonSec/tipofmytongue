1
00:00:07,530 --> 00:00:10,730
[Music]

2
00:00:12,000 --> 00:00:12,960
hi my name is

3
00:00:12,960 --> 00:00:14,960
josh stella and i'm going to be talking

4
00:00:14,960 --> 00:00:16,480
to you today about

5
00:00:16,480 --> 00:00:19,520
serverless security and particularly

6
00:00:19,520 --> 00:00:22,160
how folks can leverage it hackers that

7
00:00:22,160 --> 00:00:23,119
is to

8
00:00:23,119 --> 00:00:24,560
steal your data and get into your

9
00:00:24,560 --> 00:00:27,680
accounts and how you can prevent them

10
00:00:27,680 --> 00:00:29,439
a lot of this is going to be focused on

11
00:00:29,439 --> 00:00:32,238
iam and aws but the concepts

12
00:00:32,238 --> 00:00:34,640
are similar across the different cloud

13
00:00:34,640 --> 00:00:35,840
providers

14
00:00:35,840 --> 00:00:38,879
i am the co-founder and ceo cto

15
00:00:38,879 --> 00:00:42,719
of fugue fugue is a cloud security

16
00:00:42,719 --> 00:00:45,120
software company sas company and this is

17
00:00:45,120 --> 00:00:47,120
really all i've done for about a decade

18
00:00:47,120 --> 00:00:49,440
prior to founding fugue

19
00:00:49,440 --> 00:00:52,800
i was a principal essay at aws

20
00:00:52,800 --> 00:00:55,840
focused on national security

21
00:00:55,840 --> 00:00:57,840
kinds of environments department of

22
00:00:57,840 --> 00:00:59,920
defense and and so on

23
00:00:59,920 --> 00:01:02,559
so uh so i've spent about the last 10

24
00:01:02,559 --> 00:01:04,239
years working on this stuff

25
00:01:04,239 --> 00:01:06,640
and hopefully uh that gives me a few

26
00:01:06,640 --> 00:01:08,479
things to to tell you about that

27
00:01:08,479 --> 00:01:10,560
that will make you think all right what

28
00:01:10,560 --> 00:01:12,400
we're gonna do today we've only got a

29
00:01:12,400 --> 00:01:13,920
half hour so we're going to go pretty

30
00:01:13,920 --> 00:01:14,720
quick

31
00:01:14,720 --> 00:01:17,119
uh i'm going to set the table on server

32
00:01:17,119 --> 00:01:19,119
security and iam

33
00:01:19,119 --> 00:01:22,240
i'm going to do a deep dive into

34
00:01:22,240 --> 00:01:23,720
i am and other kinds of

35
00:01:23,720 --> 00:01:25,920
misconfigurations in serverless cloud

36
00:01:25,920 --> 00:01:27,119
environments because they are

37
00:01:27,119 --> 00:01:30,240
fundamentally different than

38
00:01:30,240 --> 00:01:32,320
data center kinds of environments or

39
00:01:32,320 --> 00:01:33,360
virtual machine

40
00:01:33,360 --> 00:01:35,439
oriented kinds of environments i'm going

41
00:01:35,439 --> 00:01:37,360
to give you some recommendations and

42
00:01:37,360 --> 00:01:40,720
we'll have some q a all right

43
00:01:40,720 --> 00:01:43,840
uh let's just dive in so why do we need

44
00:01:43,840 --> 00:01:44,159
to

45
00:01:44,159 --> 00:01:47,040
rethink security in a serverless world

46
00:01:47,040 --> 00:01:47,600
uh

47
00:01:47,600 --> 00:01:50,960
it's becau for a number of reasons uh

48
00:01:50,960 --> 00:01:53,600
the principle one is that serverless

49
00:01:53,600 --> 00:01:55,280
applications are fundamentally

50
00:01:55,280 --> 00:01:57,439
distributed applications

51
00:01:57,439 --> 00:02:00,719
a lot of what would be handled uh kind

52
00:02:00,719 --> 00:02:02,079
of in memory

53
00:02:02,079 --> 00:02:04,079
you know one function talking to another

54
00:02:04,079 --> 00:02:05,680
on the same server

55
00:02:05,680 --> 00:02:08,160
in a serverless application is a network

56
00:02:08,160 --> 00:02:10,080
call it's going across

57
00:02:10,080 --> 00:02:12,720
a network boundary uh very often those

58
00:02:12,720 --> 00:02:14,239
network boundaries are kind of

59
00:02:14,239 --> 00:02:17,920
invisible and so iam identity and access

60
00:02:17,920 --> 00:02:20,720
management on aws and similar

61
00:02:20,720 --> 00:02:23,599
kinds of uh services on you know azure

62
00:02:23,599 --> 00:02:24,560
and google

63
00:02:24,560 --> 00:02:27,680
really define that network okay

64
00:02:27,680 --> 00:02:30,080
and and and this is a new way to think

65
00:02:30,080 --> 00:02:31,519
about iam

66
00:02:31,519 --> 00:02:34,640
iam is the fundamental network in

67
00:02:34,640 --> 00:02:35,360
serverless

68
00:02:35,360 --> 00:02:37,680
applications and uh we'll come back to

69
00:02:37,680 --> 00:02:38,959
that quite a bit

70
00:02:38,959 --> 00:02:40,599
all right and many of those

71
00:02:40,599 --> 00:02:42,200
misconfiguration potential

72
00:02:42,200 --> 00:02:43,519
misconfigurations

73
00:02:43,519 --> 00:02:46,800
involving iam in in in serverless

74
00:02:46,800 --> 00:02:50,000
are not seen as problems

75
00:02:50,000 --> 00:02:52,920
by compliance frameworks like nist

76
00:02:52,920 --> 00:02:54,160
800-53

77
00:02:54,160 --> 00:02:57,680
or you know sock 2 or

78
00:02:57,680 --> 00:03:00,879
cis those grew

79
00:03:00,879 --> 00:03:03,680
out of a more traditional software

80
00:03:03,680 --> 00:03:04,879
architecture

81
00:03:04,879 --> 00:03:07,040
uh running on more traditional servers

82
00:03:07,040 --> 00:03:08,800
and they they think of the world that

83
00:03:08,800 --> 00:03:10,879
way serverless is very very different

84
00:03:10,879 --> 00:03:12,879
and so they're not always going to be

85
00:03:12,879 --> 00:03:15,760
super helpful to you

86
00:03:15,760 --> 00:03:17,840
therefore a lot of these things aren't a

87
00:03:17,840 --> 00:03:19,680
lot of these potential misconfigurations

88
00:03:19,680 --> 00:03:21,760
these dangerous configurations

89
00:03:21,760 --> 00:03:25,040
exploitable configurations are not seen

90
00:03:25,040 --> 00:03:26,480
as vulnerabilities

91
00:03:26,480 --> 00:03:30,080
by your security teams so you might be

92
00:03:30,080 --> 00:03:32,400
passing audits and the security teams

93
00:03:32,400 --> 00:03:34,400
happy and still have

94
00:03:34,400 --> 00:03:35,840
these vulnerabilities in your

95
00:03:35,840 --> 00:03:37,519
environment uh

96
00:03:37,519 --> 00:03:41,680
also things uh you know only become

97
00:03:41,680 --> 00:03:43,959
apparent a lot of these these

98
00:03:43,959 --> 00:03:45,360
misconfigurations

99
00:03:45,360 --> 00:03:47,280
in the full context of the environment

100
00:03:47,280 --> 00:03:48,799
you know if you're talking about a

101
00:03:48,799 --> 00:03:50,799
lambda function you can think about the

102
00:03:50,799 --> 00:03:52,720
security of the particular lambda

103
00:03:52,720 --> 00:03:53,519
function

104
00:03:53,519 --> 00:03:56,560
on its own and that's fine but uh

105
00:03:56,560 --> 00:03:59,599
much more important is where it sits and

106
00:03:59,599 --> 00:04:00,799
what it's talking to

107
00:04:00,799 --> 00:04:02,560
and what's around it and what are those

108
00:04:02,560 --> 00:04:03,920
connections

109
00:04:03,920 --> 00:04:07,920
all right this combination makes these

110
00:04:07,920 --> 00:04:09,120
things

111
00:04:09,120 --> 00:04:11,840
really common in serverless environments

112
00:04:11,840 --> 00:04:13,200
it's really common

113
00:04:13,200 --> 00:04:17,358
for people to make security mistakes

114
00:04:17,358 --> 00:04:20,880
when designing a serverless architecture

115
00:04:20,880 --> 00:04:24,000
and that means a lot of applications

116
00:04:24,000 --> 00:04:26,080
built this way are exploitable

117
00:04:26,080 --> 00:04:29,280
and in the cloud very often uh when you

118
00:04:29,280 --> 00:04:29,680
are

119
00:04:29,680 --> 00:04:32,800
exploited when you are hacked

120
00:04:32,800 --> 00:04:35,680
you don't know about it even afterwards

121
00:04:35,680 --> 00:04:36,960
unless the hacker

122
00:04:36,960 --> 00:04:39,280
you know asks you for money or you know

123
00:04:39,280 --> 00:04:40,800
brags on the internet or

124
00:04:40,800 --> 00:04:43,919
something like this so um so it's a it's

125
00:04:43,919 --> 00:04:44,800
a real problem

126
00:04:44,800 --> 00:04:47,440
it's a it's a complex problem all right

127
00:04:47,440 --> 00:04:48,400
i want to talk

128
00:04:48,400 --> 00:04:51,840
about the shared responsibility model in

129
00:04:51,840 --> 00:04:52,880
cloud

130
00:04:52,880 --> 00:04:55,199
uh because this is where serverless is

131
00:04:55,199 --> 00:04:56,000
really your

132
00:04:56,000 --> 00:04:58,320
friend okay so what the shared

133
00:04:58,320 --> 00:05:00,479
responsibility model is and this

134
00:05:00,479 --> 00:05:02,560
presentation is talking about aws

135
00:05:02,560 --> 00:05:04,880
specifically of course fugue our product

136
00:05:04,880 --> 00:05:06,400
works on you know all three of the big

137
00:05:06,400 --> 00:05:07,759
cloud providers but

138
00:05:07,759 --> 00:05:11,120
just i had to pick one to uh to deep

139
00:05:11,120 --> 00:05:13,120
dive on so we're doing aws and that's

140
00:05:13,120 --> 00:05:15,919
where i came from uh so the shared

141
00:05:15,919 --> 00:05:17,600
responsibility model

142
00:05:17,600 --> 00:05:20,400
really says uh for security of your

143
00:05:20,400 --> 00:05:22,160
applications

144
00:05:22,160 --> 00:05:25,600
uh there's the stuff aws is responsible

145
00:05:25,600 --> 00:05:27,440
for or microsoft or google

146
00:05:27,440 --> 00:05:29,600
and there's the stuff you're responsible

147
00:05:29,600 --> 00:05:30,560
for

148
00:05:30,560 --> 00:05:33,520
and so on this diagram from aws you can

149
00:05:33,520 --> 00:05:34,960
see the orange stuff

150
00:05:34,960 --> 00:05:37,120
is what they're taking responsibility

151
00:05:37,120 --> 00:05:39,120
for so that's things down at the bottom

152
00:05:39,120 --> 00:05:39,759
like

153
00:05:39,759 --> 00:05:43,120
actual physical locations you know can

154
00:05:43,120 --> 00:05:46,160
somebody walk into a data center uh you

155
00:05:46,160 --> 00:05:48,080
know uh who doesn't have authorization

156
00:05:48,080 --> 00:05:49,199
and things like that

157
00:05:49,199 --> 00:05:51,680
and that's expressed in regions and azs

158
00:05:51,680 --> 00:05:53,600
and edge locations

159
00:05:53,600 --> 00:05:55,120
and then there's the network that

160
00:05:55,120 --> 00:05:57,759
connects the cloud together the aws

161
00:05:57,759 --> 00:05:59,039
cloud together

162
00:05:59,039 --> 00:06:02,960
and then there are the the services uh

163
00:06:02,960 --> 00:06:06,000
themselves but not the configuration of

164
00:06:06,000 --> 00:06:07,440
the services the

165
00:06:07,440 --> 00:06:09,199
the maintenance of the services the

166
00:06:09,199 --> 00:06:11,680
compute storage database networking

167
00:06:11,680 --> 00:06:14,000
services and of course there's also

168
00:06:14,000 --> 00:06:15,120
software that

169
00:06:15,120 --> 00:06:17,199
they offer higher order software so

170
00:06:17,199 --> 00:06:19,039
that's what aws are saying that

171
00:06:19,039 --> 00:06:21,680
they are responsible for everything else

172
00:06:21,680 --> 00:06:23,120
is you

173
00:06:23,120 --> 00:06:25,919
and that means uh all of your data

174
00:06:25,919 --> 00:06:28,000
encryption all of your network layer all

175
00:06:28,000 --> 00:06:30,479
of your identity and access management

176
00:06:30,479 --> 00:06:33,319
your operating systems your firewall

177
00:06:33,319 --> 00:06:34,960
configurations

178
00:06:34,960 --> 00:06:37,360
uh all the customer data that's all on

179
00:06:37,360 --> 00:06:38,479
you

180
00:06:38,479 --> 00:06:40,639
okay so the reason i'm showing this in

181
00:06:40,639 --> 00:06:42,720
in a serverless context

182
00:06:42,720 --> 00:06:45,680
is uh fugue in our in our early version

183
00:06:45,680 --> 00:06:48,400
of our product

184
00:06:48,400 --> 00:06:50,560
we were building on top of virtual

185
00:06:50,560 --> 00:06:53,039
machines we were building on top of ec2

186
00:06:53,039 --> 00:06:56,400
instances and later

187
00:06:56,400 --> 00:07:00,479
we re-architected to be pretty much 100

188
00:07:00,479 --> 00:07:03,039
serverless function as a service using

189
00:07:03,039 --> 00:07:05,039
lambda and some containers but we

190
00:07:05,039 --> 00:07:07,120
we try to stick with lambda where we can

191
00:07:07,120 --> 00:07:08,639
and the beauty of this

192
00:07:08,639 --> 00:07:12,000
is there's so much of the

193
00:07:12,000 --> 00:07:15,039
the attack surface that we have shifted

194
00:07:15,039 --> 00:07:17,120
to aws by doing this

195
00:07:17,120 --> 00:07:20,080
so we don't run any operating systems it

196
00:07:20,080 --> 00:07:21,680
was really interesting we were getting a

197
00:07:21,680 --> 00:07:23,039
sock 2 audit

198
00:07:23,039 --> 00:07:24,080
and they said what's your how do you

199
00:07:24,080 --> 00:07:26,000
patch your operating systems in your

200
00:07:26,000 --> 00:07:27,520
production environment we said well we

201
00:07:27,520 --> 00:07:29,120
don't we don't manage any operating

202
00:07:29,120 --> 00:07:31,599
systems in our production environment

203
00:07:31,599 --> 00:07:34,639
and that's that's a beautiful thing aws

204
00:07:34,639 --> 00:07:36,960
and microsoft etc the csps are really

205
00:07:36,960 --> 00:07:38,479
good at that stuff

206
00:07:38,479 --> 00:07:40,560
and they do this all day for a living

207
00:07:40,560 --> 00:07:43,919
and there is no business benefit to me

208
00:07:43,919 --> 00:07:44,400
uh

209
00:07:44,400 --> 00:07:47,840
uh to fugue for uh maintaining operating

210
00:07:47,840 --> 00:07:48,479
systems

211
00:07:48,479 --> 00:07:50,800
it doesn't do anything for us it's just

212
00:07:50,800 --> 00:07:51,759
overhead

213
00:07:51,759 --> 00:07:54,560
so and risk so so when you're doing

214
00:07:54,560 --> 00:07:55,440
serverless

215
00:07:55,440 --> 00:07:58,479
you're shifting a lot of

216
00:07:58,479 --> 00:08:02,479
the uh the responsibility back onto the

217
00:08:02,479 --> 00:08:04,240
cloud service provider

218
00:08:04,240 --> 00:08:07,280
and that is a really good thing

219
00:08:07,280 --> 00:08:10,160
however you have to understand that when

220
00:08:10,160 --> 00:08:11,919
you do that

221
00:08:11,919 --> 00:08:14,000
and you're going to the the distributed

222
00:08:14,000 --> 00:08:15,680
architecture that i was talking about

223
00:08:15,680 --> 00:08:18,319
before in serverless uh where you're

224
00:08:18,319 --> 00:08:20,240
going to have a lot more connections

225
00:08:20,240 --> 00:08:21,440
between things

226
00:08:21,440 --> 00:08:24,240
and a lot more objects connected you

227
00:08:24,240 --> 00:08:26,960
have to understand uh the cost of that

228
00:08:26,960 --> 00:08:28,960
which is that you you really need to

229
00:08:28,960 --> 00:08:29,360
take

230
00:08:29,360 --> 00:08:32,958
ownership of uh how you are

231
00:08:32,958 --> 00:08:34,559
securing those interactions in that

232
00:08:34,559 --> 00:08:36,320
distributed system and that's what we're

233
00:08:36,320 --> 00:08:37,679
going to focus on

234
00:08:37,679 --> 00:08:41,360
today all right that's all my slides

235
00:08:41,360 --> 00:08:42,880
i think i have a couple at the end just

236
00:08:42,880 --> 00:08:44,880
with some suggestions and so on

237
00:08:44,880 --> 00:08:46,880
but i'm not a i'm not a big fan of

238
00:08:46,880 --> 00:08:48,000
slides

239
00:08:48,000 --> 00:08:50,480
uh i'm gonna white board today mostly

240
00:08:50,480 --> 00:08:51,360
all right

241
00:08:51,360 --> 00:08:54,399
so some core concepts around cloud

242
00:08:54,399 --> 00:08:56,000
security

243
00:08:56,000 --> 00:08:59,040
so one core concept in cloud security

244
00:08:59,040 --> 00:09:02,080
uh is how you describe

245
00:09:02,080 --> 00:09:05,279
policies that allow things to talk to

246
00:09:05,279 --> 00:09:06,080
each other

247
00:09:06,080 --> 00:09:09,120
so again using aws today when we're

248
00:09:09,120 --> 00:09:11,200
doing these kinds of policies

249
00:09:11,200 --> 00:09:16,160
there are a few primary

250
00:09:16,160 --> 00:09:19,279
kinds of things

251
00:09:19,279 --> 00:09:22,399
so we have principles a principle is

252
00:09:22,399 --> 00:09:24,640
like a user

253
00:09:24,640 --> 00:09:28,160
you know maybe this one's me but it can

254
00:09:28,160 --> 00:09:29,600
also be

255
00:09:29,600 --> 00:09:32,240
a i'll just put a lambda in here and

256
00:09:32,240 --> 00:09:34,160
call it foo

257
00:09:34,160 --> 00:09:36,320
a principle can also be a piece of your

258
00:09:36,320 --> 00:09:38,160
architecture a piece of your application

259
00:09:38,160 --> 00:09:41,200
and this is in fact how you

260
00:09:41,200 --> 00:09:43,920
uh do security and connections in these

261
00:09:43,920 --> 00:09:46,000
serverless architectures okay

262
00:09:46,000 --> 00:09:50,240
so principles are actors principles are

263
00:09:50,240 --> 00:09:52,000
if you ever did uml you would have

264
00:09:52,000 --> 00:09:54,240
actors right they're things that

265
00:09:54,240 --> 00:09:58,320
set uh other events in motion all right

266
00:09:58,320 --> 00:10:01,040
so we've got principles and then we have

267
00:10:01,040 --> 00:10:03,360
actions

268
00:10:03,360 --> 00:10:05,920
and that's stuff like you know get

269
00:10:05,920 --> 00:10:08,399
object

270
00:10:10,480 --> 00:10:12,720
from an s3 bucket there are thousands

271
00:10:12,720 --> 00:10:14,640
and thousands of these actions in any of

272
00:10:14,640 --> 00:10:16,240
these clouds

273
00:10:16,240 --> 00:10:19,440
um you know ec2 alone has

274
00:10:19,440 --> 00:10:22,880
over 400 different actions that are

275
00:10:22,880 --> 00:10:25,600
that are in that service and what you're

276
00:10:25,600 --> 00:10:26,320
going to find

277
00:10:26,320 --> 00:10:29,680
is that uh pretty much the entire

278
00:10:29,680 --> 00:10:31,760
capability of the cloud with very very

279
00:10:31,760 --> 00:10:33,440
few exceptions things you have to pick

280
00:10:33,440 --> 00:10:34,640
up a phone for

281
00:10:34,640 --> 00:10:36,480
are going to be done through these

282
00:10:36,480 --> 00:10:38,959
actions it's just a big long list

283
00:10:38,959 --> 00:10:43,680
of verbs all right and then we have

284
00:10:44,839 --> 00:10:47,279
resources

285
00:10:47,279 --> 00:10:49,839
well i i'm not drawing too well today so

286
00:10:49,839 --> 00:10:52,240
resources are things like uh let's have

287
00:10:52,240 --> 00:10:53,279
an s3 bucket

288
00:10:53,279 --> 00:10:56,560
we'll call it bar and uh you know

289
00:10:56,560 --> 00:11:00,160
uh you might have a a container

290
00:11:00,160 --> 00:11:03,279
you might have other lambdas

291
00:11:03,279 --> 00:11:06,160
you might have an rds database but

292
00:11:06,160 --> 00:11:06,959
resources

293
00:11:06,959 --> 00:11:11,120
are the instances of cloud services

294
00:11:11,120 --> 00:11:12,320
they're the actual

295
00:11:12,320 --> 00:11:16,160
things the things that have you know ids

296
00:11:16,160 --> 00:11:19,200
associated with them all right so

297
00:11:19,200 --> 00:11:23,120
there is a default policy

298
00:11:23,120 --> 00:11:28,640
in aws for all of these interactions

299
00:11:28,640 --> 00:11:31,680
which is deny

300
00:11:31,760 --> 00:11:35,760
okay so if a principal like let's say

301
00:11:35,760 --> 00:11:39,040
josh over here i want

302
00:11:39,040 --> 00:11:42,160
to get an object from s3

303
00:11:42,160 --> 00:11:45,200
so i want to be able to call get object

304
00:11:45,200 --> 00:11:49,120
on this s3 bucket well out of the box

305
00:11:49,120 --> 00:11:52,399
i'm going to get denied because

306
00:11:52,399 --> 00:11:56,079
first of all i don't have a

307
00:11:56,079 --> 00:12:01,200
allowance to use the get object action

308
00:12:01,200 --> 00:12:04,560
and then i also don't have allowance

309
00:12:04,560 --> 00:12:08,160
to talk to the s3 bucket called bar

310
00:12:08,160 --> 00:12:12,079
so policies are how we open

311
00:12:12,079 --> 00:12:14,320
these connections up in the cloud

312
00:12:14,320 --> 00:12:16,320
between different things

313
00:12:16,320 --> 00:12:18,880
okay and they can be extremely limited

314
00:12:18,880 --> 00:12:20,320
you might have a policy and

315
00:12:20,320 --> 00:12:23,600
in this case expresses iam that uh

316
00:12:23,600 --> 00:12:26,800
only allows me to see one s3 bucket

317
00:12:26,800 --> 00:12:29,279
and you know really really restricts me

318
00:12:29,279 --> 00:12:31,440
where we get in trouble

319
00:12:31,440 --> 00:12:34,240
is when those policies are overly

320
00:12:34,240 --> 00:12:35,279
general

321
00:12:35,279 --> 00:12:38,399
or kind of overly liberal too permissive

322
00:12:38,399 --> 00:12:40,800
we open up too much stuff it's very

323
00:12:40,800 --> 00:12:42,720
common for example

324
00:12:42,720 --> 00:12:45,600
in in iam policies which is largely

325
00:12:45,600 --> 00:12:45,920
where

326
00:12:45,920 --> 00:12:47,120
we're going to be talking about today

327
00:12:47,120 --> 00:12:49,279
there are other kinds uh

328
00:12:49,279 --> 00:12:54,399
to use like resource star like any s3

329
00:12:54,399 --> 00:12:56,160
and that can make sense but in

330
00:12:56,160 --> 00:12:57,519
serverless it really doesn't

331
00:12:57,519 --> 00:13:00,160
and we'll get into why okay but the idea

332
00:13:00,160 --> 00:13:01,600
here is

333
00:13:01,600 --> 00:13:04,560
the way you can connect things in a

334
00:13:04,560 --> 00:13:05,279
functional

335
00:13:05,279 --> 00:13:08,639
graph you know data flow or whatever uh

336
00:13:08,639 --> 00:13:11,600
is through these allowances to talk to

337
00:13:11,600 --> 00:13:12,399
each other

338
00:13:12,399 --> 00:13:15,600
to perform specific actions on specific

339
00:13:15,600 --> 00:13:18,000
resources all right that's just the way

340
00:13:18,000 --> 00:13:19,440
this stuff is done

341
00:13:19,440 --> 00:13:21,680
and and if you think about that well

342
00:13:21,680 --> 00:13:23,440
let's let's graph that out let's let's

343
00:13:23,440 --> 00:13:25,440
diagram that and talk about

344
00:13:25,440 --> 00:13:28,079
what what the implications are because

345
00:13:28,079 --> 00:13:29,040
typically in a

346
00:13:29,040 --> 00:13:32,560
in a uh serverless application

347
00:13:32,560 --> 00:13:35,680
you're gonna have a lot of functions

348
00:13:35,680 --> 00:13:38,720
okay quite quite a lot um let's talk

349
00:13:38,720 --> 00:13:39,120
about

350
00:13:39,120 --> 00:13:41,600
just uh you know a a good starting

351
00:13:41,600 --> 00:13:42,399
architecture

352
00:13:42,399 --> 00:13:44,240
you want some kind of a gateway maybe

353
00:13:44,240 --> 00:13:49,839
you start with you know the api gateway

354
00:13:50,880 --> 00:13:53,199
right and then you'll probably have a

355
00:13:53,199 --> 00:13:55,360
number of kind of

356
00:13:55,360 --> 00:13:58,880
handler lambdas for the different kinds

357
00:13:58,880 --> 00:14:00,320
of requests that come in through your

358
00:14:00,320 --> 00:14:02,000
application through that gateway

359
00:14:02,000 --> 00:14:04,639
so that's a very typical pattern

360
00:14:04,639 --> 00:14:06,240
depending on

361
00:14:06,240 --> 00:14:08,320
you know what the request is coming

362
00:14:08,320 --> 00:14:09,760
through the gateway it gets routed to

363
00:14:09,760 --> 00:14:10,959
the appropriate

364
00:14:10,959 --> 00:14:13,920
initial function which then sets off a

365
00:14:13,920 --> 00:14:15,040
chain of events

366
00:14:15,040 --> 00:14:17,360
and very typically what you'll have in

367
00:14:17,360 --> 00:14:18,880
serverless functions are kind of way

368
00:14:18,880 --> 00:14:20,240
back here somewhere

369
00:14:20,240 --> 00:14:23,600
you'll have excuse me

370
00:14:23,600 --> 00:14:26,560
things like your database right or you

371
00:14:26,560 --> 00:14:28,079
might have s3 you're going to have

372
00:14:28,079 --> 00:14:29,600
persistence

373
00:14:29,600 --> 00:14:31,600
data persistence somewhere and then

374
00:14:31,600 --> 00:14:33,360
you're going to have a chain

375
00:14:33,360 --> 00:14:36,959
of functions typically sometimes

376
00:14:36,959 --> 00:14:40,399
they're uh going to persistent storage

377
00:14:40,399 --> 00:14:42,000
and then that fires another function and

378
00:14:42,000 --> 00:14:43,440
sometimes it's direct

379
00:14:43,440 --> 00:14:45,360
but you're probably going to have a lot

380
00:14:45,360 --> 00:14:47,360
of these guys

381
00:14:47,360 --> 00:14:49,199
sitting out here that get chained

382
00:14:49,199 --> 00:14:52,240
together in different ways

383
00:14:52,240 --> 00:14:55,279
all right and some of the because each

384
00:14:55,279 --> 00:14:55,839
function

385
00:14:55,839 --> 00:14:58,160
i mean a well-designed serverless

386
00:14:58,160 --> 00:15:00,320
application in my opinion

387
00:15:00,320 --> 00:15:03,440
uh should have item potency

388
00:15:03,440 --> 00:15:06,800
at a function level um it should

389
00:15:06,800 --> 00:15:08,800
generally speaking except for things

390
00:15:08,800 --> 00:15:10,720
that are going to persist in storage

391
00:15:10,720 --> 00:15:13,199
which should be few you should limit

392
00:15:13,199 --> 00:15:14,720
where you do that

393
00:15:14,720 --> 00:15:16,560
because that creates vulnerability and

394
00:15:16,560 --> 00:15:17,920
it also creates complexity and

395
00:15:17,920 --> 00:15:20,880
dependency just architecturally

396
00:15:20,880 --> 00:15:21,920
you're going to have these things

397
00:15:21,920 --> 00:15:23,839
talking to each other so if i come in

398
00:15:23,839 --> 00:15:24,399
and say

399
00:15:24,399 --> 00:15:26,160
okay i'm just going to use a blue pen

400
00:15:26,160 --> 00:15:27,760
here i

401
00:15:27,760 --> 00:15:31,120
as some user some guy out on the

402
00:15:31,120 --> 00:15:32,320
internet

403
00:15:32,320 --> 00:15:35,440
or lady out on the internet asks my app

404
00:15:35,440 --> 00:15:37,440
to do something therefore hits the api

405
00:15:37,440 --> 00:15:39,120
gateway maybe it's with a

406
00:15:39,120 --> 00:15:41,920
an api call maybe it's a web browser

407
00:15:41,920 --> 00:15:43,519
invocation whatever it is they hit the

408
00:15:43,519 --> 00:15:45,920
front of it

409
00:15:46,000 --> 00:15:47,920
and that's going to get routed to one of

410
00:15:47,920 --> 00:15:50,480
these lambdas now let's say

411
00:15:50,480 --> 00:15:53,440
that this particular function requires a

412
00:15:53,440 --> 00:15:55,600
path through these lambdas

413
00:15:55,600 --> 00:15:58,800
that looks like this

414
00:16:01,920 --> 00:16:04,800
okay so step one was api gateway to

415
00:16:04,800 --> 00:16:06,000
initial lambda

416
00:16:06,000 --> 00:16:08,399
step two is initial lambda fires and

417
00:16:08,399 --> 00:16:10,399
maybe it fires a couple of lambdas

418
00:16:10,399 --> 00:16:12,959
uh but let's just focus on this kind of

419
00:16:12,959 --> 00:16:14,800
southern root i've drawn here

420
00:16:14,800 --> 00:16:18,240
uh lambda a uh i'll just

421
00:16:18,240 --> 00:16:21,199
name it here let's call this a and b

422
00:16:21,199 --> 00:16:22,480
lambda a

423
00:16:22,480 --> 00:16:25,759
invokes lambda b and

424
00:16:25,759 --> 00:16:28,959
lambda b drops something in s3 and when

425
00:16:28,959 --> 00:16:30,320
that gets dropped in

426
00:16:30,320 --> 00:16:34,000
s3 lambda c is looking at that s3

427
00:16:34,000 --> 00:16:36,959
bucket performs some function write

428
00:16:36,959 --> 00:16:38,880
something to a database

429
00:16:38,880 --> 00:16:41,680
and then uh somewhere along the line

430
00:16:41,680 --> 00:16:42,800
here

431
00:16:42,800 --> 00:16:46,240
maybe it also uh talks to uh

432
00:16:46,240 --> 00:16:49,519
this guy and that goes back and returns

433
00:16:49,519 --> 00:16:51,680
back out to the user

434
00:16:51,680 --> 00:16:54,800
right so what we're doing here is we're

435
00:16:54,800 --> 00:16:59,360
we're tracing the flow of invocations

436
00:16:59,360 --> 00:17:02,560
and actions that these serverless

437
00:17:02,560 --> 00:17:03,680
objects

438
00:17:03,680 --> 00:17:06,959
need to have in order to perform their

439
00:17:06,959 --> 00:17:08,079
function

440
00:17:08,079 --> 00:17:10,799
so this is going to be done through

441
00:17:10,799 --> 00:17:11,199
their

442
00:17:11,199 --> 00:17:14,640
iam role and let me let me

443
00:17:14,640 --> 00:17:16,720
switch to a web browser and just show

444
00:17:16,720 --> 00:17:18,000
you that

445
00:17:18,000 --> 00:17:19,760
briefly i'm actually show i'm going to

446
00:17:19,760 --> 00:17:21,599
show you an ec2 instance but

447
00:17:21,599 --> 00:17:24,480
it works the same way so this is this is

448
00:17:24,480 --> 00:17:25,839
our product feud

449
00:17:25,839 --> 00:17:28,799
we do these diagrams for you this is not

450
00:17:28,799 --> 00:17:30,720
a

451
00:17:30,720 --> 00:17:32,160
this is not a pitch session but it's

452
00:17:32,160 --> 00:17:34,320
really handy because fugue will

453
00:17:34,320 --> 00:17:36,559
let you explore all the details of your

454
00:17:36,559 --> 00:17:38,640
configuration and find security flaws

455
00:17:38,640 --> 00:17:41,760
so here i've selected an ec2 instance

456
00:17:41,760 --> 00:17:44,720
and you can see right here it has an iam

457
00:17:44,720 --> 00:17:45,840
instance profile

458
00:17:45,840 --> 00:17:49,440
profile and an iam role now

459
00:17:49,440 --> 00:17:52,799
what what those are are the permissions

460
00:17:52,799 --> 00:17:55,280
the allowances right the holes through

461
00:17:55,280 --> 00:17:57,200
the deny walls

462
00:17:57,200 --> 00:18:00,720
that that compute infrastructure has

463
00:18:00,720 --> 00:18:03,760
we've assigned it to it and so this is a

464
00:18:03,760 --> 00:18:04,799
really really

465
00:18:04,799 --> 00:18:07,200
powerful idea because as you're

466
00:18:07,200 --> 00:18:08,799
constructing

467
00:18:08,799 --> 00:18:11,200
you know your application you don't

468
00:18:11,200 --> 00:18:12,840
really have to worry about

469
00:18:12,840 --> 00:18:15,280
network you don't have to worry about

470
00:18:15,280 --> 00:18:16,160
what

471
00:18:16,160 --> 00:18:19,440
subnet something is in or having axles

472
00:18:19,440 --> 00:18:21,360
or any of that stuff and you really

473
00:18:21,360 --> 00:18:23,360
i mean security groups become left much

474
00:18:23,360 --> 00:18:24,640
less important in these serverless

475
00:18:24,640 --> 00:18:25,760
applications

476
00:18:25,760 --> 00:18:27,280
for the most part than they are in other

477
00:18:27,280 --> 00:18:30,160
kinds because you're really defining

478
00:18:30,160 --> 00:18:31,760
the ability for these things to talk to

479
00:18:31,760 --> 00:18:33,919
each other through their iam roles

480
00:18:33,919 --> 00:18:37,520
so i teach a lot of classes

481
00:18:37,520 --> 00:18:40,720
on uh on security in the cloud you can

482
00:18:40,720 --> 00:18:42,000
check out our youtube channel there's a

483
00:18:42,000 --> 00:18:42,880
bunch up there

484
00:18:42,880 --> 00:18:46,320
um but uh uh you know uh this one is

485
00:18:46,320 --> 00:18:48,080
focused on service in the other ones i

486
00:18:48,080 --> 00:18:49,679
will often say

487
00:18:49,679 --> 00:18:53,440
try not to proliferate iam roles try not

488
00:18:53,440 --> 00:18:54,080
to make

489
00:18:54,080 --> 00:18:58,000
too too many of them because if you do

490
00:18:58,000 --> 00:19:00,720
uh you're gonna have to manage them and

491
00:19:00,720 --> 00:19:02,720
that becomes its own burden

492
00:19:02,720 --> 00:19:05,280
well if you're doing serverless that's a

493
00:19:05,280 --> 00:19:06,880
burden you're gonna have to take on

494
00:19:06,880 --> 00:19:10,240
is my my opinion so what you what your

495
00:19:10,240 --> 00:19:11,280
what your goal

496
00:19:11,280 --> 00:19:13,440
here is as you're defining these

497
00:19:13,440 --> 00:19:15,039
policies and i'm going to use what

498
00:19:15,039 --> 00:19:16,559
should i use i'll use a

499
00:19:16,559 --> 00:19:20,799
green marker you want only

500
00:19:20,799 --> 00:19:24,320
the actual uh you know transactions on

501
00:19:24,320 --> 00:19:24,640
the

502
00:19:24,640 --> 00:19:28,720
only the actions to only the resources

503
00:19:28,720 --> 00:19:31,200
that that lambda needs that that

504
00:19:31,200 --> 00:19:32,559
function needs you don't want

505
00:19:32,559 --> 00:19:36,640
any other so you don't want uh like

506
00:19:36,640 --> 00:19:39,919
you could for example have a lambda a uh

507
00:19:39,919 --> 00:19:40,799
could have uh

508
00:19:40,799 --> 00:19:44,400
the ability to do uh an execute on

509
00:19:44,400 --> 00:19:47,600
lambda b or an execute on

510
00:19:47,600 --> 00:19:50,640
all lambdas all lambdas is bad don't do

511
00:19:50,640 --> 00:19:51,600
that you want it

512
00:19:51,600 --> 00:19:54,960
only on b well when you start thinking

513
00:19:54,960 --> 00:19:57,120
or whatever the collection of lambdas

514
00:19:57,120 --> 00:20:00,000
it needs to execute because execute

515
00:20:00,000 --> 00:20:01,200
allowance

516
00:20:01,200 --> 00:20:03,679
right permission to execute is dangerous

517
00:20:03,679 --> 00:20:04,480
it's dangerous

518
00:20:04,480 --> 00:20:07,039
if a hacker gets a hold of it oh i

519
00:20:07,039 --> 00:20:08,640
should talk about what hackers are going

520
00:20:08,640 --> 00:20:10,720
to try to do

521
00:20:10,720 --> 00:20:13,039
so what hackers are are always trying to

522
00:20:13,039 --> 00:20:15,440
do in the cloud

523
00:20:15,440 --> 00:20:16,960
and and even when they break into

524
00:20:16,960 --> 00:20:18,960
servers you know servers

525
00:20:18,960 --> 00:20:21,039
compute instances or containers

526
00:20:21,039 --> 00:20:22,559
typically what they don't really care

527
00:20:22,559 --> 00:20:23,280
about that

528
00:20:23,280 --> 00:20:24,799
it's a means to an end what they're

529
00:20:24,799 --> 00:20:26,480
trying to get

530
00:20:26,480 --> 00:20:29,360
are api keys almost always they are

531
00:20:29,360 --> 00:20:30,559
trying to get api

532
00:20:30,559 --> 00:20:33,840
keys that provide those permissions and

533
00:20:33,840 --> 00:20:36,000
allowances i was talking about

534
00:20:36,000 --> 00:20:39,039
okay so when that lambda is invoked it

535
00:20:39,039 --> 00:20:40,480
invokes with

536
00:20:40,480 --> 00:20:43,520
a a set of permissions and if you can

537
00:20:43,520 --> 00:20:44,880
get a hold of

538
00:20:44,880 --> 00:20:47,440
its permissions then you can use them to

539
00:20:47,440 --> 00:20:48,000
your own

540
00:20:48,000 --> 00:20:52,000
end and do exploration for example

541
00:20:52,000 --> 00:20:56,159
uh 90 of hacking is discovery

542
00:20:56,159 --> 00:20:59,679
you know it may be 95 maybe 99.

543
00:20:59,679 --> 00:21:02,320
mostly it's learning about the

544
00:21:02,320 --> 00:21:03,520
environment

545
00:21:03,520 --> 00:21:06,640
so so if a hacker manages to get a hold

546
00:21:06,640 --> 00:21:07,200
of

547
00:21:07,200 --> 00:21:08,960
api keys that are being used in your

548
00:21:08,960 --> 00:21:10,720
application

549
00:21:10,720 --> 00:21:13,120
um you don't want them to be able to do

550
00:21:13,120 --> 00:21:14,640
much with

551
00:21:14,640 --> 00:21:17,840
you want a very limited blast radius so

552
00:21:17,840 --> 00:21:19,760
you'll read a lot about in the in the

553
00:21:19,760 --> 00:21:21,919
news you know i think it was uh

554
00:21:21,919 --> 00:21:24,720
the the several of the uber breaches

555
00:21:24,720 --> 00:21:25,120
where

556
00:21:25,120 --> 00:21:27,919
there were admin level api keys in a

557
00:21:27,919 --> 00:21:31,679
github repo that a hacker got to

558
00:21:31,679 --> 00:21:34,320
uh that that were long lived that's

559
00:21:34,320 --> 00:21:36,320
really bad don't ever do that

560
00:21:36,320 --> 00:21:38,320
don't ever have long-lived

561
00:21:38,320 --> 00:21:40,400
administrative api keys unless it's a

562
00:21:40,400 --> 00:21:40,960
total

563
00:21:40,960 --> 00:21:42,559
junk environment like a sandbox or

564
00:21:42,559 --> 00:21:44,080
something uh so what

565
00:21:44,080 --> 00:21:46,720
in in serverless what you're what you're

566
00:21:46,720 --> 00:21:48,000
wanting to do

567
00:21:48,000 --> 00:21:50,640
is have the most limited allowance as

568
00:21:50,640 --> 00:21:52,880
you can the least permissive

569
00:21:52,880 --> 00:21:56,080
right uh the least privilege uh in the

570
00:21:56,080 --> 00:21:56,640
system

571
00:21:56,640 --> 00:21:58,159
but you're doing this on this big

572
00:21:58,159 --> 00:22:00,400
distributed graph

573
00:22:00,400 --> 00:22:03,440
and that gets really complex so

574
00:22:03,440 --> 00:22:06,320
one recommendation that i think the only

575
00:22:06,320 --> 00:22:07,039
kind of

576
00:22:07,039 --> 00:22:10,640
sane way to handle this is to make

577
00:22:10,640 --> 00:22:13,520
automation of building those policies

578
00:22:13,520 --> 00:22:16,799
part of your application development

579
00:22:16,799 --> 00:22:18,799
so every time you deploy a version of

580
00:22:18,799 --> 00:22:20,240
the app you know we have hundreds of

581
00:22:20,240 --> 00:22:21,440
lambdas

582
00:22:21,440 --> 00:22:24,559
a few we do you know billions of

583
00:22:24,559 --> 00:22:25,520
processes

584
00:22:25,520 --> 00:22:27,520
with those you know we we manage

585
00:22:27,520 --> 00:22:28,960
millions of

586
00:22:28,960 --> 00:22:32,000
cloud security uh resources for

587
00:22:32,000 --> 00:22:35,360
cloud security for our customers and

588
00:22:35,360 --> 00:22:38,000
when we deploy a new lambda or modify an

589
00:22:38,000 --> 00:22:38,960
existing one

590
00:22:38,960 --> 00:22:42,080
part of the job is to make sure it

591
00:22:42,080 --> 00:22:45,120
is least privileged and that its

592
00:22:45,120 --> 00:22:48,960
permissions are automatically built

593
00:22:48,960 --> 00:22:50,880
as part of it being built it's just

594
00:22:50,880 --> 00:22:52,080
another part

595
00:22:52,080 --> 00:22:55,200
of writing that piece of the app and i

596
00:22:55,200 --> 00:22:56,720
think that's the only

597
00:22:56,720 --> 00:22:59,760
really um kind of sane way to deal with

598
00:22:59,760 --> 00:23:01,360
what is a pretty

599
00:23:01,360 --> 00:23:04,880
a pretty complex scenario

600
00:23:04,880 --> 00:23:07,600
uh so if you automate these things

601
00:23:07,600 --> 00:23:09,679
you're going to end up with a lot of iam

602
00:23:09,679 --> 00:23:11,600
roles and a lot of policies and that's

603
00:23:11,600 --> 00:23:12,240
okay

604
00:23:12,240 --> 00:23:14,320
in serverless so i do we're getting

605
00:23:14,320 --> 00:23:16,000
close to the end of our time and i do

606
00:23:16,000 --> 00:23:17,360
want to talk about

607
00:23:17,360 --> 00:23:19,280
some things other than just how to

608
00:23:19,280 --> 00:23:20,559
construct your iam

609
00:23:20,559 --> 00:23:22,240
in a half an hour i have to cover this

610
00:23:22,240 --> 00:23:24,400
at a pretty high level but um

611
00:23:24,400 --> 00:23:26,240
again on our youtube channel we've got

612
00:23:26,240 --> 00:23:28,880
uh deeper content on this stuff

613
00:23:28,880 --> 00:23:32,080
as well all right so that's our

614
00:23:32,080 --> 00:23:33,760
that's our deep dive for today but i

615
00:23:33,760 --> 00:23:34,840
want to get to some of these

616
00:23:34,840 --> 00:23:36,400
recommendations

617
00:23:36,400 --> 00:23:38,320
all right so right at the top least

618
00:23:38,320 --> 00:23:41,039
privilege one iam role for function

619
00:23:41,039 --> 00:23:43,679
um other things to focus on be really

620
00:23:43,679 --> 00:23:44,559
careful

621
00:23:44,559 --> 00:23:47,679
about cross account iam that can that

622
00:23:47,679 --> 00:23:49,600
can expose you in ways that

623
00:23:49,600 --> 00:23:52,480
are hard to even be aware of or see and

624
00:23:52,480 --> 00:23:54,000
it's quite dangerous so

625
00:23:54,000 --> 00:23:56,320
so if you're doing any cross account iam

626
00:23:56,320 --> 00:23:57,200
stuff

627
00:23:57,200 --> 00:24:00,240
um you're going to need to be especially

628
00:24:00,240 --> 00:24:03,600
uh careful and and and keep track of

629
00:24:03,600 --> 00:24:04,240
exactly

630
00:24:04,240 --> 00:24:06,240
what's doing what and have a lot of

631
00:24:06,240 --> 00:24:07,360
governance there

632
00:24:07,360 --> 00:24:08,640
and that's these are the kinds of things

633
00:24:08,640 --> 00:24:10,320
that you know our product and others can

634
00:24:10,320 --> 00:24:11,760
help you with too

635
00:24:11,760 --> 00:24:15,360
um yeah we didn't really talk about uh a

636
00:24:15,360 --> 00:24:18,400
code injection um in one form of this

637
00:24:18,400 --> 00:24:21,120
uh of this talk we actually go into

638
00:24:21,120 --> 00:24:22,799
source code for a lambda to show you

639
00:24:22,799 --> 00:24:23,360
where

640
00:24:23,360 --> 00:24:26,480
you can make errors um

641
00:24:26,480 --> 00:24:28,720
but in in the world of serverless you

642
00:24:28,720 --> 00:24:29,679
you don't have an

643
00:24:29,679 --> 00:24:32,480
operating system to hack into so the

644
00:24:32,480 --> 00:24:33,120
hacker

645
00:24:33,120 --> 00:24:35,360
is very often they're either attacking

646
00:24:35,360 --> 00:24:37,360
straight against the api

647
00:24:37,360 --> 00:24:41,039
uh csp api or they're

648
00:24:41,039 --> 00:24:43,440
trying to hack into the function itself

649
00:24:43,440 --> 00:24:44,880
and get the permissions and go from

650
00:24:44,880 --> 00:24:45,600
there

651
00:24:45,600 --> 00:24:47,679
so you have to be you still have to

652
00:24:47,679 --> 00:24:48,799
write secure

653
00:24:48,799 --> 00:24:50,159
code you have to write secure

654
00:24:50,159 --> 00:24:52,000
application code so

655
00:24:52,000 --> 00:24:55,279
a good idea uh to do code reviews and in

656
00:24:55,279 --> 00:24:56,320
particular

657
00:24:56,320 --> 00:24:59,360
uh look out for event injection

658
00:24:59,360 --> 00:25:03,039
types of uh potential breaches

659
00:25:03,039 --> 00:25:04,480
all right delete lambdas you're no

660
00:25:04,480 --> 00:25:06,400
longer using uh delete

661
00:25:06,400 --> 00:25:08,400
everything you're no longer using stuff

662
00:25:08,400 --> 00:25:09,440
you've forgotten about

663
00:25:09,440 --> 00:25:12,880
orphaned infrastructure often is

664
00:25:12,880 --> 00:25:15,840
a really wonderful attack surface for

665
00:25:15,840 --> 00:25:16,720
hackers

666
00:25:16,720 --> 00:25:18,640
because you're probably not maintaining

667
00:25:18,640 --> 00:25:20,880
it and if it's still sitting out there

668
00:25:20,880 --> 00:25:24,320
even if you're not really using it

669
00:25:24,320 --> 00:25:26,400
it probably still has permissions to do

670
00:25:26,400 --> 00:25:29,679
stuff so that's a really bad combination

671
00:25:29,679 --> 00:25:32,720
um so get rid of stuff you're not using

672
00:25:32,720 --> 00:25:34,720
all right it within the actual

673
00:25:34,720 --> 00:25:37,039
serverless functions themselves

674
00:25:37,039 --> 00:25:39,440
you want to minimize the dependencies

675
00:25:39,440 --> 00:25:40,880
and you want to keep them

676
00:25:40,880 --> 00:25:43,520
up to date so that you're avoiding uh

677
00:25:43,520 --> 00:25:45,520
vulnerabilities in your libraries right

678
00:25:45,520 --> 00:25:46,880
and there are products out there you

679
00:25:46,880 --> 00:25:48,320
know center type

680
00:25:48,320 --> 00:25:53,520
uh and others that can help with that um

681
00:25:53,520 --> 00:25:55,600
okay uh yeah this this is this next

682
00:25:55,600 --> 00:25:57,039
one's an interesting one don't use the

683
00:25:57,039 --> 00:25:59,200
lambda execution environment

684
00:25:59,200 --> 00:26:02,559
to store user data or events this avoids

685
00:26:02,559 --> 00:26:04,400
potential for data leaking across

686
00:26:04,400 --> 00:26:06,240
invocations so this is something a lot

687
00:26:06,240 --> 00:26:08,080
of folks don't think about

688
00:26:08,080 --> 00:26:11,840
but if you are storing any data

689
00:26:11,840 --> 00:26:15,760
in that lambda the next time that lambda

690
00:26:15,760 --> 00:26:16,799
gets invoked

691
00:26:16,799 --> 00:26:20,640
that data might still be around

692
00:26:20,640 --> 00:26:24,559
and in very often in these architectures

693
00:26:24,559 --> 00:26:26,400
that is not going to be for the same

694
00:26:26,400 --> 00:26:28,640
user right so user a

695
00:26:28,640 --> 00:26:31,520
comes in and invokes that lambda to log

696
00:26:31,520 --> 00:26:33,279
in or whatever

697
00:26:33,279 --> 00:26:35,600
and then the next time that lambda gets

698
00:26:35,600 --> 00:26:36,400
invoked

699
00:26:36,400 --> 00:26:39,600
it's a different user but there may be

700
00:26:39,600 --> 00:26:41,840
data cached sitting in that execution

701
00:26:41,840 --> 00:26:44,320
environment from user a's login

702
00:26:44,320 --> 00:26:46,720
when user b gets there and if user b is

703
00:26:46,720 --> 00:26:47,760
a hacker

704
00:26:47,760 --> 00:26:50,960
and is exploiting that uh that lambda in

705
00:26:50,960 --> 00:26:52,480
order to

706
00:26:52,480 --> 00:26:54,080
do things like you know extract

707
00:26:54,080 --> 00:26:56,159
information from it they might get

708
00:26:56,159 --> 00:26:57,760
uh user data there they might get

709
00:26:57,760 --> 00:26:59,919
dangerous data there so be aware of that

710
00:26:59,919 --> 00:27:01,520
that anything that you are bringing into

711
00:27:01,520 --> 00:27:03,039
the execution environment

712
00:27:03,039 --> 00:27:07,760
memory wise data wise is potentially

713
00:27:07,760 --> 00:27:12,320
a cross invocation data leak

714
00:27:12,320 --> 00:27:15,440
all right uh yeah avoid executing shell

715
00:27:15,440 --> 00:27:17,679
scripts within lambdas if possible i i

716
00:27:17,679 --> 00:27:19,360
this says especially if handling user

717
00:27:19,360 --> 00:27:20,799
input i would say just

718
00:27:20,799 --> 00:27:24,640
just avoid it um it opens up a whole

719
00:27:24,640 --> 00:27:26,000
other realm

720
00:27:26,000 --> 00:27:29,360
of potential error um

721
00:27:29,360 --> 00:27:31,279
yeah lambdas shouldn't be sitting there

722
00:27:31,279 --> 00:27:33,600
on the the with a public ip address in

723
00:27:33,600 --> 00:27:34,240
front of

724
00:27:34,240 --> 00:27:36,640
you know just exposed to the world uh

725
00:27:36,640 --> 00:27:37,840
you should be putting them behind

726
00:27:37,840 --> 00:27:39,760
something like the api gateway

727
00:27:39,760 --> 00:27:42,159
and using the appropriate authentication

728
00:27:42,159 --> 00:27:44,000
mechanisms and api gateway which are

729
00:27:44,000 --> 00:27:45,679
which are really good

730
00:27:45,679 --> 00:27:48,799
all right and yeah protect your apis

731
00:27:48,799 --> 00:27:50,000
with a waff

732
00:27:50,000 --> 00:27:52,000
uh including apis in front of lambda

733
00:27:52,000 --> 00:27:54,159
functions so they're

734
00:27:54,159 --> 00:27:55,919
you still have to be worried about that

735
00:27:55,919 --> 00:27:57,440
application security

736
00:27:57,440 --> 00:27:59,520
all right so some key takeaways uh

737
00:27:59,520 --> 00:28:00,720
serverless security

738
00:28:00,720 --> 00:28:04,000
is deeply architectural it's it has to

739
00:28:04,000 --> 00:28:05,520
be built into your architecture when

740
00:28:05,520 --> 00:28:06,640
you're doing serverless

741
00:28:06,640 --> 00:28:08,880
because your your architecture is no

742
00:28:08,880 --> 00:28:10,799
longer function calling function in

743
00:28:10,799 --> 00:28:11,520
memory

744
00:28:11,520 --> 00:28:13,840
it's function calling function over a

745
00:28:13,840 --> 00:28:14,640
distributed

746
00:28:14,640 --> 00:28:17,600
network and but you still do need to

747
00:28:17,600 --> 00:28:19,440
write secure code so each lambda needs

748
00:28:19,440 --> 00:28:20,960
to be secure and the way you string them

749
00:28:20,960 --> 00:28:21,760
together

750
00:28:21,760 --> 00:28:25,200
needs to be secure um yeah a new

751
00:28:25,200 --> 00:28:26,960
serverless code can still contain the

752
00:28:26,960 --> 00:28:27,600
old

753
00:28:27,600 --> 00:28:30,640
well-known vulnerabilities of course you

754
00:28:30,640 --> 00:28:31,600
know if you're using

755
00:28:31,600 --> 00:28:34,720
a library that uh has a

756
00:28:34,720 --> 00:28:38,720
cve on it you're still using a library

757
00:28:38,720 --> 00:28:41,279
that can be exploited so

758
00:28:41,279 --> 00:28:43,039
we've talked about this a lot i am as

759
00:28:43,039 --> 00:28:44,880
your primary vulnerability service not

760
00:28:44,880 --> 00:28:46,240
the only one

761
00:28:46,240 --> 00:28:49,120
um lambdas can be reused across multiple

762
00:28:49,120 --> 00:28:51,039
requests and data remains available for

763
00:28:51,039 --> 00:28:53,840
future invocations

764
00:28:53,840 --> 00:28:55,360
this is an interesting one that i didn't

765
00:28:55,360 --> 00:28:56,880
talk about

766
00:28:56,880 --> 00:28:58,559
usually people think about putting

767
00:28:58,559 --> 00:29:00,000
things in vpcs as

768
00:29:00,000 --> 00:29:02,640
a security benefit in the case of

769
00:29:02,640 --> 00:29:03,440
lambdas

770
00:29:03,440 --> 00:29:06,399
arguably it's the opposite that when you

771
00:29:06,399 --> 00:29:08,240
put them in vpcs what you're actually

772
00:29:08,240 --> 00:29:09,279
doing

773
00:29:09,279 --> 00:29:12,799
is allowing other ways to get to them

774
00:29:12,799 --> 00:29:15,919
through policy so vpcs can provide an

775
00:29:15,919 --> 00:29:18,159
attacker with a path they wouldn't have

776
00:29:18,159 --> 00:29:19,679
and they don't necessarily add to your

777
00:29:19,679 --> 00:29:21,679
security posture you have to look at

778
00:29:21,679 --> 00:29:23,039
your specific app

779
00:29:23,039 --> 00:29:25,200
to do your own analysis of this but i

780
00:29:25,200 --> 00:29:26,799
think usually

781
00:29:26,799 --> 00:29:28,880
it's it's worse not better from a

782
00:29:28,880 --> 00:29:30,640
security perspective to use

783
00:29:30,640 --> 00:29:34,399
vpcs all right uh define core secure

784
00:29:34,399 --> 00:29:35,360
configurations

785
00:29:35,360 --> 00:29:37,919
and use those in a base template for

786
00:29:37,919 --> 00:29:38,960
lambda instances

787
00:29:38,960 --> 00:29:41,360
in terms of limiting your dependencies

788
00:29:41,360 --> 00:29:43,679
and so on you don't want a proliferation

789
00:29:43,679 --> 00:29:46,399
of you know code libraries and

790
00:29:46,399 --> 00:29:48,799
dependencies across your your fleet

791
00:29:48,799 --> 00:29:51,520
you really want to manage those uh yeah

792
00:29:51,520 --> 00:29:52,960
use the tool that can evaluate your

793
00:29:52,960 --> 00:29:54,559
cloud configurations for security and

794
00:29:54,559 --> 00:29:55,760
compliance

795
00:29:55,760 --> 00:29:57,120
we can help you with that there are

796
00:29:57,120 --> 00:29:59,520
other vendors

797
00:29:59,520 --> 00:30:01,840
oh right ec2 resources that are sitting

798
00:30:01,840 --> 00:30:03,360
in your environment

799
00:30:03,360 --> 00:30:05,840
can be a really nice attack factor for

800
00:30:05,840 --> 00:30:08,000
going after your servers

801
00:30:08,000 --> 00:30:11,440
so be very aware of that and uh

802
00:30:11,440 --> 00:30:13,919
you know compliance rules aren't going

803
00:30:13,919 --> 00:30:15,600
to aren't going to help you much here

804
00:30:15,600 --> 00:30:16,960
you really have to be thinking in a

805
00:30:16,960 --> 00:30:19,200
serverless way and you want to think

806
00:30:19,200 --> 00:30:21,200
about you know least privilege

807
00:30:21,200 --> 00:30:25,039
etc okay so here

808
00:30:25,039 --> 00:30:28,000
is my contact info i'm around for some q

809
00:30:28,000 --> 00:30:28,720
a

810
00:30:28,720 --> 00:30:31,600
and uh it's been fun talking to you uh

811
00:30:31,600 --> 00:30:33,039
you can reach me at josh

812
00:30:33,039 --> 00:30:36,080
fugue co not dot com but co

813
00:30:36,080 --> 00:30:38,720
and uh uh thanks much for uh for

814
00:30:38,720 --> 00:30:42,240
attending the session i hope you enjoyed

815
00:30:43,799 --> 00:30:46,799
it

