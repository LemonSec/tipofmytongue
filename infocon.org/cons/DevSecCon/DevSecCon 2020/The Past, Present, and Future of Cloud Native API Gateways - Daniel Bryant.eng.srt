1
00:00:00,080 --> 00:00:01,360
short session but i want to introduce

2
00:00:01,360 --> 00:00:03,280
daniel actually as a as one of my

3
00:00:03,280 --> 00:00:04,480
personal friends as well i think we've

4
00:00:04,480 --> 00:00:06,000
known each other for almost a decade now

5
00:00:06,000 --> 00:00:06,399
many

6
00:00:06,399 --> 00:00:08,800
years i mean yeah um so yeah daniel

7
00:00:08,800 --> 00:00:10,240
daniel works as uh

8
00:00:10,240 --> 00:00:12,080
a technical an independent technical

9
00:00:12,080 --> 00:00:13,840
consultant and product architect at data

10
00:00:13,840 --> 00:00:14,480
one

11
00:00:14,480 --> 00:00:17,920
um and uh yeah daniel's a really amazing

12
00:00:17,920 --> 00:00:19,359
community person as well helping with

13
00:00:19,359 --> 00:00:20,160
the ljc

14
00:00:20,160 --> 00:00:22,640
helping with uh a bunch of other kind of

15
00:00:22,640 --> 00:00:23,439
uh you know

16
00:00:23,439 --> 00:00:26,160
cloud native uh cloud native uh

17
00:00:26,160 --> 00:00:28,000
communities and things like that as well

18
00:00:28,000 --> 00:00:30,480
so yeah without further ado i'm going to

19
00:00:30,480 --> 00:00:32,079
pass straight over to you so you have

20
00:00:32,079 --> 00:00:34,399
the maximum time down cheers and we

21
00:00:34,399 --> 00:00:35,840
share my screen i think

22
00:00:35,840 --> 00:00:39,040
let's add that to string we are all set

23
00:00:39,040 --> 00:00:41,200
and if i press play we should be good to

24
00:00:41,200 --> 00:00:42,879
go yeah so welcome everyone to the past

25
00:00:42,879 --> 00:00:45,039
present and future of cloud native api

26
00:00:45,039 --> 00:00:45,920
gateways

27
00:00:45,920 --> 00:00:47,600
so this is going to be quite a whistle

28
00:00:47,600 --> 00:00:48,960
stop tour and quite

29
00:00:48,960 --> 00:00:50,399
sort of the overview slides because you

30
00:00:50,399 --> 00:00:52,480
know with 20 25 minutes and that's i

31
00:00:52,480 --> 00:00:54,079
think that's probably the best focus

32
00:00:54,079 --> 00:00:56,320
the tldr like if you're if you don't

33
00:00:56,320 --> 00:00:57,840
want to pay attention to the whole 25

34
00:00:57,840 --> 00:00:58,559
minutes the

35
00:00:58,559 --> 00:01:02,000
the key tldrs are the api gateways edge

36
00:01:02,000 --> 00:01:03,600
gateways have undergone a series of

37
00:01:03,600 --> 00:01:04,640
evolutions

38
00:01:04,640 --> 00:01:06,479
and primarily this has been driven by

39
00:01:06,479 --> 00:01:09,840
architecture up to this point

40
00:01:09,840 --> 00:01:11,360
adapting things adopting things like

41
00:01:11,360 --> 00:01:13,280
micro services and kubernetes yeah that

42
00:01:13,280 --> 00:01:14,960
changes the architecture for sure but

43
00:01:14,960 --> 00:01:16,799
also the workflow as well and this

44
00:01:16,799 --> 00:01:19,119
actually has a big impact on how you

45
00:01:19,119 --> 00:01:22,479
work with api gateways

46
00:01:22,560 --> 00:01:25,759
one key message i want to take away is

47
00:01:25,759 --> 00:01:28,159
choosing your cloud api gateway should

48
00:01:28,159 --> 00:01:29,600
be done intentionally

49
00:01:29,600 --> 00:01:31,439
i think if you're going to kubernetes

50
00:01:31,439 --> 00:01:32,799
you're going to the cloud one of the

51
00:01:32,799 --> 00:01:34,560
biggest mistakes i see in a general

52
00:01:34,560 --> 00:01:37,119
sort of theme is folks don't make

53
00:01:37,119 --> 00:01:38,640
intentional choices around their

54
00:01:38,640 --> 00:01:39,360
platform

55
00:01:39,360 --> 00:01:41,600
kubernetes is a fantastic bit of kit but

56
00:01:41,600 --> 00:01:43,520
it's really a foundation for building a

57
00:01:43,520 --> 00:01:44,640
platform on top

58
00:01:44,640 --> 00:01:46,399
there's there's many kind of parts that

59
00:01:46,399 --> 00:01:47,680
of that platform

60
00:01:47,680 --> 00:01:49,600
but the api gateway how you get traffic

61
00:01:49,600 --> 00:01:51,520
in is a super important part

62
00:01:51,520 --> 00:01:52,720
so that's kind of my pitch today for the

63
00:01:52,720 --> 00:01:54,799
next 20 or so minutes and this is me as

64
00:01:54,799 --> 00:01:55,360
i mentioned

65
00:01:55,360 --> 00:01:57,759
definitely java is my native language at

66
00:01:57,759 --> 00:01:59,600
daniel bryan uk on the interwebs on

67
00:01:59,600 --> 00:02:01,439
twitter github etc

68
00:02:01,439 --> 00:02:02,799
i do work as a product architect it's a

69
00:02:02,799 --> 00:02:04,560
date wire now you can find me on

70
00:02:04,560 --> 00:02:06,399
info queue writing as well and i've

71
00:02:06,399 --> 00:02:07,840
written a book recently my buddy abraham

72
00:02:07,840 --> 00:02:09,679
rambrez also from the london java

73
00:02:09,679 --> 00:02:10,878
community as simon mentioned

74
00:02:10,878 --> 00:02:12,400
and you can grab that book as well if

75
00:02:12,400 --> 00:02:13,760
you want to know more my thoughts and

76
00:02:13,760 --> 00:02:15,280
abraham's thoughts around continuous

77
00:02:15,280 --> 00:02:17,599
delivery as well

78
00:02:17,599 --> 00:02:19,040
i'm going to mention the word edge a

79
00:02:19,040 --> 00:02:20,720
bunch of times and it is an overloaded

80
00:02:20,720 --> 00:02:21,200
term

81
00:02:21,200 --> 00:02:23,760
edge computing iot you know data center

82
00:02:23,760 --> 00:02:24,640
these kind of things

83
00:02:24,640 --> 00:02:25,760
when i mention the edge for the next

84
00:02:25,760 --> 00:02:27,680
like 20 minutes or so it's really about

85
00:02:27,680 --> 00:02:29,520
the boundary between your users

86
00:02:29,520 --> 00:02:31,360
and your data center so it's the point

87
00:02:31,360 --> 00:02:32,800
kind of the connection point between

88
00:02:32,800 --> 00:02:34,720
when users are coming into your system

89
00:02:34,720 --> 00:02:36,400
they're accessing your back end services

90
00:02:36,400 --> 00:02:37,840
accessing the functionality you're

91
00:02:37,840 --> 00:02:39,360
providing as an organization

92
00:02:39,360 --> 00:02:41,280
it may be paid for maybe not but the

93
00:02:41,280 --> 00:02:42,879
edge is a super important part where

94
00:02:42,879 --> 00:02:44,160
your users

95
00:02:44,160 --> 00:02:46,160
and the bad actors first interact with

96
00:02:46,160 --> 00:02:48,000
your system

97
00:02:48,000 --> 00:02:49,599
now the first thesis i want to mention

98
00:02:49,599 --> 00:02:50,959
is that i think the evolution of the

99
00:02:50,959 --> 00:02:52,800
edge up to this point has been driven

100
00:02:52,800 --> 00:02:53,519
primarily by

101
00:02:53,519 --> 00:02:56,080
application architecture and you know i

102
00:02:56,080 --> 00:02:57,920
started my career late 90s kind of

103
00:02:57,920 --> 00:03:00,080
just before i went to university and

104
00:03:00,080 --> 00:03:01,920
java was the thing yeah i learned java

105
00:03:01,920 --> 00:03:05,360
java ee ejbs became a thing for right

106
00:03:05,360 --> 00:03:07,760
for good or bad around 97 and this is

107
00:03:07,760 --> 00:03:08,720
kind of the architecture we were

108
00:03:08,720 --> 00:03:09,680
building

109
00:03:09,680 --> 00:03:11,519
and we put hardware load balances in

110
00:03:11,519 --> 00:03:13,440
front of this stuff you know we did all

111
00:03:13,440 --> 00:03:15,599
application logic in ejbs and java

112
00:03:15,599 --> 00:03:16,959
but the hardware load balancer was

113
00:03:16,959 --> 00:03:18,640
controlled by the system admins

114
00:03:18,640 --> 00:03:20,159
and their primary responsibility was

115
00:03:20,159 --> 00:03:21,680
making sure our apps were highly

116
00:03:21,680 --> 00:03:22,480
scalable

117
00:03:22,480 --> 00:03:24,159
and they were available too and there

118
00:03:24,159 --> 00:03:25,599
might be some load balancing going on as

119
00:03:25,599 --> 00:03:26,879
we're you know multiple instances at the

120
00:03:26,879 --> 00:03:28,799
back end

121
00:03:28,799 --> 00:03:30,799
going say 2000's you know like racking

122
00:03:30,799 --> 00:03:31,760
and stacking was getting a lot more

123
00:03:31,760 --> 00:03:33,360
popular in like commodity hardware

124
00:03:33,360 --> 00:03:34,720
google was sort of talking about this

125
00:03:34,720 --> 00:03:36,720
this kind of thing many of us were still

126
00:03:36,720 --> 00:03:38,720
building java apps.net apps

127
00:03:38,720 --> 00:03:41,200
ruby became a thing rails around 2003 i

128
00:03:41,200 --> 00:03:43,120
think but it was primarily monolithic

129
00:03:43,120 --> 00:03:43,920
apps

130
00:03:43,920 --> 00:03:45,200
the interesting thing in terms of the

131
00:03:45,200 --> 00:03:47,200
api gateway space or the edge space

132
00:03:47,200 --> 00:03:50,319
was that things moved to software

133
00:03:50,319 --> 00:03:52,560
engine x plays the trail aj proxy blaze

134
00:03:52,560 --> 00:03:54,480
the trail the apache web server was a

135
00:03:54,480 --> 00:03:56,560
big deal as well

136
00:03:56,560 --> 00:03:58,159
this was pretty much the same as the

137
00:03:58,159 --> 00:04:00,159
hardware load balancer the sysadmins

138
00:04:00,159 --> 00:04:02,080
controlled it was all about availability

139
00:04:02,080 --> 00:04:03,439
all about scalability

140
00:04:03,439 --> 00:04:04,640
and really we were just swapping

141
00:04:04,640 --> 00:04:06,319
hardware for software which was more

142
00:04:06,319 --> 00:04:07,040
malleable

143
00:04:07,040 --> 00:04:08,560
cheaper we could run it on commodity

144
00:04:08,560 --> 00:04:10,319
hardware

145
00:04:10,319 --> 00:04:12,239
2005 is when i left uni is kind of when

146
00:04:12,239 --> 00:04:14,640
i went into the real working world

147
00:04:14,640 --> 00:04:16,880
this was all about web 2.0 this really

148
00:04:16,880 --> 00:04:18,399
was a thing back in the day like it's as

149
00:04:18,399 --> 00:04:19,519
crazy it might seem now

150
00:04:19,519 --> 00:04:20,959
it was all about e-commerce you know

151
00:04:20,959 --> 00:04:22,639
amazon kicking off and bunch of other

152
00:04:22,639 --> 00:04:23,680
interesting companies doing

153
00:04:23,680 --> 00:04:26,320
interesting things and the big driver

154
00:04:26,320 --> 00:04:29,199
we're on dynamic websites was ajax this

155
00:04:29,199 --> 00:04:30,400
thing called ajax

156
00:04:30,400 --> 00:04:32,000
and before we used to do request

157
00:04:32,000 --> 00:04:33,680
response you know user make a request

158
00:04:33,680 --> 00:04:35,759
we'd send all the html back to the

159
00:04:35,759 --> 00:04:36,400
browser

160
00:04:36,400 --> 00:04:37,919
they make another request we send all

161
00:04:37,919 --> 00:04:40,639
the html back the thing that ajax gave

162
00:04:40,639 --> 00:04:43,360
us was the xml http request object or

163
00:04:43,360 --> 00:04:45,360
more correctly the xml http request

164
00:04:45,360 --> 00:04:45,919
object

165
00:04:45,919 --> 00:04:48,240
gave us ajax and this allowed us to

166
00:04:48,240 --> 00:04:50,320
dynamically load bits of the web page it

167
00:04:50,320 --> 00:04:51,919
kind of is the precursor to things like

168
00:04:51,919 --> 00:04:52,800
single page

169
00:04:52,800 --> 00:04:55,280
applications and this fundamentally

170
00:04:55,280 --> 00:04:56,080
changed the way

171
00:04:56,080 --> 00:04:57,520
clients were interacting with the back

172
00:04:57,520 --> 00:04:59,280
end no longer was it request

173
00:04:59,280 --> 00:05:01,120
big response it could be you know

174
00:05:01,120 --> 00:05:02,320
initially a big request

175
00:05:02,320 --> 00:05:04,320
response but then lots of little and

176
00:05:04,320 --> 00:05:06,240
responses as we've dynamically updated

177
00:05:06,240 --> 00:05:07,680
the page

178
00:05:07,680 --> 00:05:09,440
this led to something called application

179
00:05:09,440 --> 00:05:11,360
delivery controllers at the edge

180
00:05:11,360 --> 00:05:13,759
coined by i think it's the f5 team cisco

181
00:05:13,759 --> 00:05:15,680
citrix all those good folks

182
00:05:15,680 --> 00:05:17,360
this was primarily aimed at system

183
00:05:17,360 --> 00:05:19,600
administrators but it was more about

184
00:05:19,600 --> 00:05:21,680
application acceleration

185
00:05:21,680 --> 00:05:23,520
so we're trying to do like sl tls

186
00:05:23,520 --> 00:05:25,840
offload we maybe do some caching

187
00:05:25,840 --> 00:05:27,280
varnish with super popular back in the

188
00:05:27,280 --> 00:05:29,039
companies i was working with doing some

189
00:05:29,039 --> 00:05:29,759
compression

190
00:05:29,759 --> 00:05:32,080
some zipping some low balancing as well

191
00:05:32,080 --> 00:05:33,520
but this is all about making these

192
00:05:33,520 --> 00:05:37,280
little interactions as fast as possible

193
00:05:37,280 --> 00:05:39,120
it moved again from hardware to software

194
00:05:39,120 --> 00:05:40,880
and there's still a mix in play now

195
00:05:40,880 --> 00:05:43,840
f5 is some fantastic big-ip stuff nginx

196
00:05:43,840 --> 00:05:45,440
do a lot of stuff around this with them

197
00:05:45,440 --> 00:05:46,400
with their

198
00:05:46,400 --> 00:05:48,400
software-based adcs as well and there's

199
00:05:48,400 --> 00:05:49,840
many other companies i'm just picking on

200
00:05:49,840 --> 00:05:51,600
a couple here

201
00:05:51,600 --> 00:05:52,800
if we sort of move into the eye

202
00:05:52,800 --> 00:05:54,639
generation 2010s

203
00:05:54,639 --> 00:05:56,160
this is when the proliferation of api is

204
00:05:56,160 --> 00:05:57,520
kicked off so i was doing a whole bunch

205
00:05:57,520 --> 00:05:59,039
of work around google maps at the time

206
00:05:59,039 --> 00:06:00,000
using their api

207
00:06:00,000 --> 00:06:01,759
stripe for payments saying grid for

208
00:06:01,759 --> 00:06:03,360
emails this kind of stuff

209
00:06:03,360 --> 00:06:04,800
and this is when we saw the rise of the

210
00:06:04,800 --> 00:06:06,720
first generation api gateways things

211
00:06:06,720 --> 00:06:08,319
like kong were kind of pitching around

212
00:06:08,319 --> 00:06:09,280
this time

213
00:06:09,280 --> 00:06:11,120
not only were they aimed at system

214
00:06:11,120 --> 00:06:13,360
administrators but also api developers

215
00:06:13,360 --> 00:06:15,280
it was about creating an ecosystem

216
00:06:15,280 --> 00:06:18,160
potentially even monetizing your apis

217
00:06:18,160 --> 00:06:20,800
you're managing the apis we're moving

218
00:06:20,800 --> 00:06:21,199
less

219
00:06:21,199 --> 00:06:23,360
perhaps from or as much maybe with layer

220
00:06:23,360 --> 00:06:25,120
four tcp kind of control

221
00:06:25,120 --> 00:06:27,520
but also to layer seven like http

222
00:06:27,520 --> 00:06:29,120
control where we're looking at metadata

223
00:06:29,120 --> 00:06:30,240
and the http headers

224
00:06:30,240 --> 00:06:32,000
we're adding auth perhaps in the http

225
00:06:32,000 --> 00:06:34,160
headers this is move from layer four to

226
00:06:34,160 --> 00:06:35,120
layer seven

227
00:06:35,120 --> 00:06:36,880
and the developers were we were more in

228
00:06:36,880 --> 00:06:39,039
the mix now we were at an equal stake in

229
00:06:39,039 --> 00:06:40,720
this gateway as much as assist admins

230
00:06:40,720 --> 00:06:42,560
did as well

231
00:06:42,560 --> 00:06:44,639
think about 2015 like five or so years

232
00:06:44,639 --> 00:06:46,080
ago you know the rise of all the

233
00:06:46,080 --> 00:06:47,759
unicorns and so forth they were

234
00:06:47,759 --> 00:06:48,720
struggling

235
00:06:48,720 --> 00:06:50,560
famously led to the monolith being

236
00:06:50,560 --> 00:06:52,720
decomposed into like smaller services

237
00:06:52,720 --> 00:06:53,919
you know there was so were going on in

238
00:06:53,919 --> 00:06:55,440
the background in enterprises anyway but

239
00:06:55,440 --> 00:06:56,240
this is kind of like

240
00:06:56,240 --> 00:06:58,800
you know hipster we still need the adc

241
00:06:58,800 --> 00:07:00,080
in front of it we still needed to do

242
00:07:00,080 --> 00:07:02,240
caching tls offload that kind of thing

243
00:07:02,240 --> 00:07:04,319
but we were breaking up the monolith

244
00:07:04,319 --> 00:07:07,199
and this then led to the monolith being

245
00:07:07,199 --> 00:07:08,720
sort of a central routing place or

246
00:07:08,720 --> 00:07:10,000
central routing place

247
00:07:10,000 --> 00:07:11,759
so some folks start pulling out that

248
00:07:11,759 --> 00:07:14,720
functionality into a core api gateway

249
00:07:14,720 --> 00:07:16,639
so we have the adc up front doing tls

250
00:07:16,639 --> 00:07:18,240
offload caching bunch of other stuff

251
00:07:18,240 --> 00:07:20,240
we had an api gateway maybe managing you

252
00:07:20,240 --> 00:07:23,199
know things like authentication

253
00:07:23,199 --> 00:07:24,800
a lot of cross-cutting concerns like

254
00:07:24,800 --> 00:07:26,240
rate limiting are being pulled up into

255
00:07:26,240 --> 00:07:27,199
the gateway

256
00:07:27,199 --> 00:07:28,960
and then the the monolith the mini lift

257
00:07:28,960 --> 00:07:30,479
is just another service that we're

258
00:07:30,479 --> 00:07:31,199
routing through

259
00:07:31,199 --> 00:07:33,280
the api gateway kind of provides a nice

260
00:07:33,280 --> 00:07:35,280
interface if you haven't read um chris

261
00:07:35,280 --> 00:07:36,400
richardson's book

262
00:07:36,400 --> 00:07:37,440
uh it's really good book on

263
00:07:37,440 --> 00:07:38,960
microservices he talks a lot about the

264
00:07:38,960 --> 00:07:40,319
api gateway pattern

265
00:07:40,319 --> 00:07:42,080
christian poster fantastic work in this

266
00:07:42,080 --> 00:07:43,840
space too it's about that common

267
00:07:43,840 --> 00:07:45,039
interface of you know

268
00:07:45,039 --> 00:07:48,080
developers interacting with the back end

269
00:07:48,080 --> 00:07:49,919
again targeted assist admins and api

270
00:07:49,919 --> 00:07:51,360
developers centralizing the

271
00:07:51,360 --> 00:07:52,639
cross-cutting concerns

272
00:07:52,639 --> 00:07:54,000
and we're doing all these things like i

273
00:07:54,000 --> 00:07:55,120
mentioned like the rate limiting

274
00:07:55,120 --> 00:07:56,080
monitoring routing

275
00:07:56,080 --> 00:07:57,680
we as developers need to control this

276
00:07:57,680 --> 00:07:59,120
but we need to sync up what we're doing

277
00:07:59,120 --> 00:08:00,560
in the applications

278
00:08:00,560 --> 00:08:02,240
into the gateways now which is an

279
00:08:02,240 --> 00:08:04,960
interesting challenge

280
00:08:05,199 --> 00:08:07,840
if we move into cloud native apps this

281
00:08:07,840 --> 00:08:09,440
is all about microservices

282
00:08:09,440 --> 00:08:10,960
the next generation of modular

283
00:08:10,960 --> 00:08:12,560
modernization you know think about david

284
00:08:12,560 --> 00:08:14,800
palmas 1970s probably even before that

285
00:08:14,800 --> 00:08:15,440
as well

286
00:08:15,440 --> 00:08:17,440
modularization was a thing we we don't

287
00:08:17,440 --> 00:08:18,879
always learn our lessons in it we you

288
00:08:18,879 --> 00:08:20,319
know we keep reinventing the wheel

289
00:08:20,319 --> 00:08:22,080
microservices is kind of the latest

290
00:08:22,080 --> 00:08:24,080
evolution of that it's all about scaling

291
00:08:24,080 --> 00:08:25,440
the development efforts

292
00:08:25,440 --> 00:08:27,360
independent releasing of functionality

293
00:08:27,360 --> 00:08:29,680
and scaling components independently

294
00:08:29,680 --> 00:08:32,000
this has kind of led to many

295
00:08:32,000 --> 00:08:34,240
technologies rising up to support this

296
00:08:34,240 --> 00:08:36,799
microservices is an architecture docker

297
00:08:36,799 --> 00:08:38,799
containers kubernetes all these good

298
00:08:38,799 --> 00:08:40,399
things that support our deployment of

299
00:08:40,399 --> 00:08:41,519
these services

300
00:08:41,519 --> 00:08:43,679
it now means that this api gateway has

301
00:08:43,679 --> 00:08:45,920
to rank to many different locations

302
00:08:45,920 --> 00:08:49,040
vms in the cloud vm's on-prem kubernetes

303
00:08:49,040 --> 00:08:50,880
this functions as a service

304
00:08:50,880 --> 00:08:52,959
multiple protocols different load

305
00:08:52,959 --> 00:08:54,000
balancing requirements different

306
00:08:54,000 --> 00:08:55,760
author requirements different kind of

307
00:08:55,760 --> 00:08:57,200
cross-functional concerns and

308
00:08:57,200 --> 00:08:58,399
requirements

309
00:08:58,399 --> 00:09:01,040
this is is leading to a new a new kind

310
00:09:01,040 --> 00:09:02,880
of definition of an api gateway

311
00:09:02,880 --> 00:09:04,720
in my mind the team at datawire we're

312
00:09:04,720 --> 00:09:06,480
talking about this quite a lot

313
00:09:06,480 --> 00:09:09,360
cloud api gateways need the api gateway

314
00:09:09,360 --> 00:09:10,560
management capabilities

315
00:09:10,560 --> 00:09:13,040
authentication dev portal top line

316
00:09:13,040 --> 00:09:13,920
metrics

317
00:09:13,920 --> 00:09:17,040
503s latency all that kind of thing it

318
00:09:17,040 --> 00:09:19,279
needs the adc like functionality so um

319
00:09:19,279 --> 00:09:20,720
cross function requirements timeouts

320
00:09:20,720 --> 00:09:22,640
retries rate rate limiting

321
00:09:22,640 --> 00:09:24,160
but you also need now to think about

322
00:09:24,160 --> 00:09:25,839
real-time service discovery

323
00:09:25,839 --> 00:09:27,360
kubernetes you know keeps your service

324
00:09:27,360 --> 00:09:29,040
running but the location may disappear

325
00:09:29,040 --> 00:09:30,480
and come back different places in the

326
00:09:30,480 --> 00:09:31,279
cluster

327
00:09:31,279 --> 00:09:33,440
vms kind of similar functions are

328
00:09:33,440 --> 00:09:34,560
ephemeral by nature

329
00:09:34,560 --> 00:09:37,120
scale to zero scale up and so forth this

330
00:09:37,120 --> 00:09:37,600
is kind of

331
00:09:37,600 --> 00:09:39,279
these are the three key capabilities you

332
00:09:39,279 --> 00:09:42,640
need in a cloud api gateway these days

333
00:09:42,640 --> 00:09:44,800
so this is really you know now when we

334
00:09:44,800 --> 00:09:46,240
as engineers are interacting with this

335
00:09:46,240 --> 00:09:48,160
edge interacting with the api gateway

336
00:09:48,160 --> 00:09:49,760
we're often combining all the things

337
00:09:49,760 --> 00:09:52,240
i've talked about you know adc

338
00:09:52,240 --> 00:09:54,399
load balancers api management service

339
00:09:54,399 --> 00:09:56,160
discovery it's quite a lot to think

340
00:09:56,160 --> 00:09:57,600
about to us and we as kind of

341
00:09:57,600 --> 00:09:59,120
full stack engineers this is another

342
00:09:59,120 --> 00:10:00,640
thing perhaps to think about

343
00:10:00,640 --> 00:10:03,120
but microservices really lead to this

344
00:10:03,120 --> 00:10:04,959
even bigger change

345
00:10:04,959 --> 00:10:07,040
and this is the notion of devon call or

346
00:10:07,040 --> 00:10:08,480
you know you build it you run it there's

347
00:10:08,480 --> 00:10:09,760
a bunch of names

348
00:10:09,760 --> 00:10:11,440
we as engineers now being forced to take

349
00:10:11,440 --> 00:10:13,600
more responsibility we have the ideas we

350
00:10:13,600 --> 00:10:15,279
work closely with folks have ideas we

351
00:10:15,279 --> 00:10:15,839
code

352
00:10:15,839 --> 00:10:18,720
we test we deploy we release we look at

353
00:10:18,720 --> 00:10:20,320
the metrics and then we iterate as fast

354
00:10:20,320 --> 00:10:21,839
as we can

355
00:10:21,839 --> 00:10:23,120
this is kind of netflix folks are

356
00:10:23,120 --> 00:10:24,880
calling this full cycle development

357
00:10:24,880 --> 00:10:26,560
it's kind of not in full stack full

358
00:10:26,560 --> 00:10:28,480
cycle in the engineers are taking

359
00:10:28,480 --> 00:10:29,920
increasing responsibility

360
00:10:29,920 --> 00:10:31,680
but we are relying heavily on the

361
00:10:31,680 --> 00:10:34,000
platform folks on the sre teams

362
00:10:34,000 --> 00:10:35,279
the platform folks are building out

363
00:10:35,279 --> 00:10:36,959
these awesome platforms they're giving

364
00:10:36,959 --> 00:10:38,079
and study like

365
00:10:38,079 --> 00:10:41,040
apis sdks we can interact with and we

366
00:10:41,040 --> 00:10:41,760
can also

367
00:10:41,760 --> 00:10:43,760
um it's all about self-service you know

368
00:10:43,760 --> 00:10:45,360
we can use their tools they may provide

369
00:10:45,360 --> 00:10:46,320
us tools

370
00:10:46,320 --> 00:10:47,760
you may be having like an in-house

371
00:10:47,760 --> 00:10:49,519
platform team or you may be kind of

372
00:10:49,519 --> 00:10:51,440
outsourcing it to amazon and relying on

373
00:10:51,440 --> 00:10:51,839
their

374
00:10:51,839 --> 00:10:54,640
ui their api their tooling but we as

375
00:10:54,640 --> 00:10:56,399
developers now quite often responsible

376
00:10:56,399 --> 00:10:57,040
from

377
00:10:57,040 --> 00:10:59,600
you know idea to code to release and

378
00:10:59,600 --> 00:11:01,680
iterating back

379
00:11:01,680 --> 00:11:03,360
this really from in my mind you know

380
00:11:03,360 --> 00:11:05,200
it's very much a change in workflow

381
00:11:05,200 --> 00:11:07,920
yeah so i think really the thesis we had

382
00:11:07,920 --> 00:11:09,519
up front about the evolution of the edge

383
00:11:09,519 --> 00:11:11,040
being driven by application architecture

384
00:11:11,040 --> 00:11:12,320
is probably still valid

385
00:11:12,320 --> 00:11:14,240
but also we need to think about the

386
00:11:14,240 --> 00:11:17,279
application developer workflow now yeah

387
00:11:17,279 --> 00:11:18,880
and this really you know my work at data

388
00:11:18,880 --> 00:11:20,240
i've seen this a lot and i definitely

389
00:11:20,240 --> 00:11:21,760
saw this when i was consulting too

390
00:11:21,760 --> 00:11:23,680
there's the two biggest challenges i see

391
00:11:23,680 --> 00:11:24,959
when you're moving to the cloud moving

392
00:11:24,959 --> 00:11:26,320
to things like kubernetes

393
00:11:26,320 --> 00:11:28,720
in relation to the edge one is scaling

394
00:11:28,720 --> 00:11:30,160
the management of the edge

395
00:11:30,160 --> 00:11:32,079
yeah when i was a developer you know i'm

396
00:11:32,079 --> 00:11:33,760
i'm building my monolith or whatever

397
00:11:33,760 --> 00:11:35,600
it's nice and easy i had libraries to do

398
00:11:35,600 --> 00:11:37,680
caching libraries to do you know

399
00:11:37,680 --> 00:11:39,760
expose rest apis or whatever and the

400
00:11:39,760 --> 00:11:41,600
platform folks looked after the api

401
00:11:41,600 --> 00:11:42,000
gateway

402
00:11:42,000 --> 00:11:44,959
for me on my team if i wanted to modify

403
00:11:44,959 --> 00:11:46,959
the api gateway say to open a port or

404
00:11:46,959 --> 00:11:48,160
new protocol support

405
00:11:48,160 --> 00:11:49,839
i'd typically raise a ticket the ops

406
00:11:49,839 --> 00:11:51,279
team would do some good work they may

407
00:11:51,279 --> 00:11:52,320
ask some questions

408
00:11:52,320 --> 00:11:54,160
and you know it goes round raising

409
00:11:54,160 --> 00:11:55,600
tickets is never super efficient you

410
00:11:55,600 --> 00:11:57,040
know we as developers want to go super

411
00:11:57,040 --> 00:11:57,680
fast

412
00:11:57,680 --> 00:11:59,680
now we can't if we're doing this kind of

413
00:11:59,680 --> 00:12:01,120
it works in the monolith days

414
00:12:01,120 --> 00:12:02,240
it doesn't really work in this kind of

415
00:12:02,240 --> 00:12:04,560
cloud native days

416
00:12:04,560 --> 00:12:06,399
we're pulling more and more stuff up

417
00:12:06,399 --> 00:12:07,680
from the monolith now

418
00:12:07,680 --> 00:12:08,880
because you know there's many services

419
00:12:08,880 --> 00:12:10,880
we're pulling it up into the api gateway

420
00:12:10,880 --> 00:12:12,800
the api gateway does off there's retries

421
00:12:12,800 --> 00:12:14,720
there's caching and there's many

422
00:12:14,720 --> 00:12:16,000
services now

423
00:12:16,000 --> 00:12:17,760
we can't possibly be raising tickets for

424
00:12:17,760 --> 00:12:19,440
all this stuff yeah you know it simply

425
00:12:19,440 --> 00:12:21,120
won't scale i i need to you know expose

426
00:12:21,120 --> 00:12:22,000
a new protocol

427
00:12:22,000 --> 00:12:23,760
i have to raise a ticket or i want to

428
00:12:23,760 --> 00:12:25,040
put some cashing onto my

429
00:12:25,040 --> 00:12:27,519
um my service i have to raise a ticket

430
00:12:27,519 --> 00:12:29,360
we're trying to go fast this full cycle

431
00:12:29,360 --> 00:12:30,079
ownership thing

432
00:12:30,079 --> 00:12:33,519
just it just doesn't work the second big

433
00:12:33,519 --> 00:12:35,279
challenge we see is supporting diverse

434
00:12:35,279 --> 00:12:37,040
edge requirements so we all love our

435
00:12:37,040 --> 00:12:39,200
rest of course our jason air http

436
00:12:39,200 --> 00:12:40,480
um but we're now we're bringing in

437
00:12:40,480 --> 00:12:41,839
things like grpc we're bringing in

438
00:12:41,839 --> 00:12:43,519
things like websockets for streaming

439
00:12:43,519 --> 00:12:44,800
and again these have suddenly different

440
00:12:44,800 --> 00:12:47,200
ways of doing auth perhaps doing caching

441
00:12:47,200 --> 00:12:49,920
you know these kind of things um and i

442
00:12:49,920 --> 00:12:52,160
might also want to mix and match my

443
00:12:52,160 --> 00:12:53,440
cross-functional requirements

444
00:12:53,440 --> 00:12:55,920
some services want auth some may not

445
00:12:55,920 --> 00:12:57,920
some may want retry some may not

446
00:12:57,920 --> 00:12:59,440
one service might want to bring cashing

447
00:12:59,440 --> 00:13:00,959
in and again if i'm raising all these

448
00:13:00,959 --> 00:13:02,240
tickets and we're trying to support all

449
00:13:02,240 --> 00:13:03,279
these different things

450
00:13:03,279 --> 00:13:04,720
you know we it's really quite

451
00:13:04,720 --> 00:13:06,000
challenging we need the gateway to

452
00:13:06,000 --> 00:13:07,519
support these things and allow us to

453
00:13:07,519 --> 00:13:08,560
compose

454
00:13:08,560 --> 00:13:11,360
and sort of modularize our protocols and

455
00:13:11,360 --> 00:13:11,600
our

456
00:13:11,600 --> 00:13:14,800
cross-functional requirements

457
00:13:15,040 --> 00:13:17,200
now i see three strategies out in the

458
00:13:17,200 --> 00:13:18,240
wild and

459
00:13:18,240 --> 00:13:19,440
folks you know they're moving to

460
00:13:19,440 --> 00:13:20,560
kubernetes they've probably got like an

461
00:13:20,560 --> 00:13:22,639
existing stack an existing api gateway

462
00:13:22,639 --> 00:13:23,279
maybe

463
00:13:23,279 --> 00:13:25,040
and as they move into kubernetes they

464
00:13:25,040 --> 00:13:26,639
broadly follow into

465
00:13:26,639 --> 00:13:28,720
fall into these three categories folks

466
00:13:28,720 --> 00:13:30,240
either deploy an additional

467
00:13:30,240 --> 00:13:32,720
kubernetes based api gateway and link

468
00:13:32,720 --> 00:13:34,480
that up to their current one

469
00:13:34,480 --> 00:13:36,320
they extend the current gateway kind of

470
00:13:36,320 --> 00:13:38,399
into the kubernetes cluster

471
00:13:38,399 --> 00:13:40,720
or they go all in on on the cluster and

472
00:13:40,720 --> 00:13:42,320
they so the customer may be like

473
00:13:42,320 --> 00:13:43,600
new stack goes in there for managing the

474
00:13:43,600 --> 00:13:45,440
edge managing apis and

475
00:13:45,440 --> 00:13:46,959
any of the sort of vintage systems the

476
00:13:46,959 --> 00:13:48,959
core systems are still around they rank

477
00:13:48,959 --> 00:13:51,920
from kubernetes out to these these um

478
00:13:51,920 --> 00:13:53,360
older world systems

479
00:13:53,360 --> 00:13:56,000
the money making systems i'm sure there

480
00:13:56,000 --> 00:13:56,639
is other

481
00:13:56,639 --> 00:13:58,560
other sort of um strategies around there

482
00:13:58,560 --> 00:13:59,680
and i'm not going to argue

483
00:13:59,680 --> 00:14:02,880
like these are so best or worst here

484
00:14:02,880 --> 00:14:04,399
i've got my bias working at dead aware

485
00:14:04,399 --> 00:14:05,760
we're kind of in you know very much

486
00:14:05,760 --> 00:14:07,600
with ambassador we're looking at the um

487
00:14:07,600 --> 00:14:09,279
strategy three but i've seen

488
00:14:09,279 --> 00:14:11,519
combinations work of all different um of

489
00:14:11,519 --> 00:14:12,560
all different technologies and all

490
00:14:12,560 --> 00:14:13,680
different strategies here so i'll kind

491
00:14:13,680 --> 00:14:14,880
of run through in the next like

492
00:14:14,880 --> 00:14:16,800
ten or 5 minutes or so i'll just give

493
00:14:16,800 --> 00:14:18,079
you a whistle stop tour i've written

494
00:14:18,079 --> 00:14:19,440
about this on the website so you can pop

495
00:14:19,440 --> 00:14:20,800
along and if you want to know more about

496
00:14:20,800 --> 00:14:22,639
the strategies the challenges how you

497
00:14:22,639 --> 00:14:25,120
implement it these kind of things

498
00:14:25,120 --> 00:14:26,480
the first one i want to talk about is

499
00:14:26,480 --> 00:14:28,560
deploying an additional kubernetes api

500
00:14:28,560 --> 00:14:29,519
gateway

501
00:14:29,519 --> 00:14:30,800
so this is like folks they spin up a

502
00:14:30,800 --> 00:14:33,040
kubernetes cluster they deploy an api

503
00:14:33,040 --> 00:14:34,079
gateway into it

504
00:14:34,079 --> 00:14:36,000
or an ingress for example or a service

505
00:14:36,000 --> 00:14:38,079
load balancer and they basically

506
00:14:38,079 --> 00:14:40,240
pass through certain routes or certain

507
00:14:40,240 --> 00:14:41,920
endpoints from their existing api

508
00:14:41,920 --> 00:14:42,720
gateway

509
00:14:42,720 --> 00:14:45,519
into the cluster so like slash new world

510
00:14:45,519 --> 00:14:46,639
goes through into the

511
00:14:46,639 --> 00:14:48,959
kubernetes api gateway slash old world

512
00:14:48,959 --> 00:14:50,079
would go into the old

513
00:14:50,079 --> 00:14:52,639
and gateway some folks split at the api

514
00:14:52,639 --> 00:14:54,079
gateway layer some plugs

515
00:14:54,079 --> 00:14:56,240
split at the kind of layer 4 layer so

516
00:14:56,240 --> 00:14:58,000
they say this ip goes here or this

517
00:14:58,000 --> 00:14:59,199
domain name goes here

518
00:14:59,199 --> 00:15:01,120
this domain name goes to here but it's

519
00:15:01,120 --> 00:15:03,360
fundamentally about spinning up a new

520
00:15:03,360 --> 00:15:06,480
um a new api gateway within kubernetes

521
00:15:06,480 --> 00:15:09,120
the pros are that it's very easy to get

522
00:15:09,120 --> 00:15:09,760
started

523
00:15:09,760 --> 00:15:11,040
you know you can spin up a kind of like

524
00:15:11,040 --> 00:15:12,079
team that just looks after the

525
00:15:12,079 --> 00:15:13,920
kubernetes cluster deploys an api

526
00:15:13,920 --> 00:15:14,560
gateway

527
00:15:14,560 --> 00:15:15,760
and kind of matches it up with the

528
00:15:15,760 --> 00:15:18,000
existing one increment incremental

529
00:15:18,000 --> 00:15:18,880
migration

530
00:15:18,880 --> 00:15:21,839
super easy in this use case two the

531
00:15:21,839 --> 00:15:24,000
challenges are working with two gateways

532
00:15:24,000 --> 00:15:25,519
you've now got one gateway doing a

533
00:15:25,519 --> 00:15:27,360
pass-through potentially and there might

534
00:15:27,360 --> 00:15:28,959
be different like subtle nuances i've

535
00:15:28,959 --> 00:15:30,320
seen like you know one gateway strips

536
00:15:30,320 --> 00:15:31,839
headers the other one doesn't i've had

537
00:15:31,839 --> 00:15:33,600
some crazy bugs dealing with these kind

538
00:15:33,600 --> 00:15:34,240
of things

539
00:15:34,240 --> 00:15:35,680
and you are fundamentally working you

540
00:15:35,680 --> 00:15:37,279
know with two gateways

541
00:15:37,279 --> 00:15:39,199
easy to get started operationally a bit

542
00:15:39,199 --> 00:15:42,719
challenging as time progresses

543
00:15:42,959 --> 00:15:44,720
the second strategy is around extending

544
00:15:44,720 --> 00:15:46,720
the existing api gateway so this is

545
00:15:46,720 --> 00:15:48,639
about taking your existing gateway maybe

546
00:15:48,639 --> 00:15:50,800
put some plugins in some scripts

547
00:15:50,800 --> 00:15:52,959
and that will then synchronize the

548
00:15:52,959 --> 00:15:55,279
location of your services in kubernetes

549
00:15:55,279 --> 00:15:55,600
like

550
00:15:55,600 --> 00:15:58,399
with an ip address into routes and

551
00:15:58,399 --> 00:16:00,240
endpoints into the api gateway

552
00:16:00,240 --> 00:16:01,759
so you're not necessarily like do have a

553
00:16:01,759 --> 00:16:03,519
second api gateway in the kubernetes

554
00:16:03,519 --> 00:16:04,240
cluster

555
00:16:04,240 --> 00:16:05,759
but you're you're kind of bypassing that

556
00:16:05,759 --> 00:16:07,360
or you're routing directly from the api

557
00:16:07,360 --> 00:16:08,720
gateway you've got now

558
00:16:08,720 --> 00:16:11,360
into the kubernetes cluster often you do

559
00:16:11,360 --> 00:16:12,880
this by having some kind of controller

560
00:16:12,880 --> 00:16:14,399
in there so i've seen some like the f5

561
00:16:14,399 --> 00:16:15,440
team for example they have this

562
00:16:15,440 --> 00:16:16,880
controller that sits in your kubernetes

563
00:16:16,880 --> 00:16:17,759
cluster

564
00:16:17,759 --> 00:16:19,600
it watches the api of kubernetes when

565
00:16:19,600 --> 00:16:21,040
you make a new deployment of the service

566
00:16:21,040 --> 00:16:23,040
and put some annotations on that service

567
00:16:23,040 --> 00:16:24,639
the controller watches what's going on

568
00:16:24,639 --> 00:16:26,160
says ah new service deployed

569
00:16:26,160 --> 00:16:28,079
new annotation says they want to expose

570
00:16:28,079 --> 00:16:29,279
this endpoint here

571
00:16:29,279 --> 00:16:31,120
and then the controller makes the

572
00:16:31,120 --> 00:16:33,440
out-of-band requests to your api gateway

573
00:16:33,440 --> 00:16:34,959
maybe a hardware gateway

574
00:16:34,959 --> 00:16:36,959
via the control plane for that gateway

575
00:16:36,959 --> 00:16:38,959
it may call some sdks calls may

576
00:16:38,959 --> 00:16:40,880
apis but we don't really care about that

577
00:16:40,880 --> 00:16:43,199
we define our our world in kubernetes

578
00:16:43,199 --> 00:16:45,600
and the controller is is synchronizing

579
00:16:45,600 --> 00:16:47,920
with the existing api gateway

580
00:16:47,920 --> 00:16:49,680
now the pros again super easy to get

581
00:16:49,680 --> 00:16:51,360
started yeah um

582
00:16:51,360 --> 00:16:52,880
the and you can also leverage all your

583
00:16:52,880 --> 00:16:55,040
existing kind of kit in this world

584
00:16:55,040 --> 00:16:57,040
the challenges i found is is the split

585
00:16:57,040 --> 00:16:58,800
between the old world and the new world

586
00:16:58,800 --> 00:17:00,720
and you often have to do sort of one

587
00:17:00,720 --> 00:17:02,720
workflow for deploying into kubernetes

588
00:17:02,720 --> 00:17:03,839
so i write my service

589
00:17:03,839 --> 00:17:06,559
write my yaml put some annotations on it

590
00:17:06,559 --> 00:17:07,359
and that then

591
00:17:07,359 --> 00:17:09,839
that then deploys and exposes my service

592
00:17:09,839 --> 00:17:12,000
but if i'm modifying the old world

593
00:17:12,000 --> 00:17:13,599
the core and the vintage world

594
00:17:13,599 --> 00:17:14,959
completely different workflow because

595
00:17:14,959 --> 00:17:16,959
yaml is not recognized in the old world

596
00:17:16,959 --> 00:17:18,640
and that in sort of having this notion

597
00:17:18,640 --> 00:17:20,079
of single source of truth gets a bit

598
00:17:20,079 --> 00:17:21,119
tricky like what

599
00:17:21,119 --> 00:17:22,720
what happens if you get a clashing route

600
00:17:22,720 --> 00:17:24,400
who who wins in this kind of thing

601
00:17:24,400 --> 00:17:25,839
like does the new world win does the old

602
00:17:25,839 --> 00:17:28,000
world win and i've struggled as well

603
00:17:28,000 --> 00:17:30,080
with the annotations available on some

604
00:17:30,080 --> 00:17:30,480
of the

605
00:17:30,480 --> 00:17:33,360
um controllers so you can always do

606
00:17:33,360 --> 00:17:34,240
everything

607
00:17:34,240 --> 00:17:36,559
as a developer um from a self-service

608
00:17:36,559 --> 00:17:38,080
perspective the annotations like the

609
00:17:38,080 --> 00:17:39,679
full functionality of the existing api

610
00:17:39,679 --> 00:17:40,320
gateway

611
00:17:40,320 --> 00:17:42,720
can't be controlled with all the api so

612
00:17:42,720 --> 00:17:43,760
all the annotations

613
00:17:43,760 --> 00:17:45,360
so you often have to go out of band

614
00:17:45,360 --> 00:17:47,360
anyway raise a ticket with the ops team

615
00:17:47,360 --> 00:17:49,840
they modify the api gateway and so forth

616
00:17:49,840 --> 00:17:51,840
again super easy to get um started

617
00:17:51,840 --> 00:17:53,440
you know you're leveraging your all your

618
00:17:53,440 --> 00:17:55,120
existing um investments so this is quite

619
00:17:55,120 --> 00:17:56,799
a popular strategy to be honest

620
00:17:56,799 --> 00:17:58,640
um and you do sort of bypass some of the

621
00:17:58,640 --> 00:18:00,000
kubernetes networking challenges

622
00:18:00,000 --> 00:18:01,679
dealing with ingress and things but i've

623
00:18:01,679 --> 00:18:02,960
just found this kind of single source of

624
00:18:02,960 --> 00:18:04,480
truth can cause a bit of friction going

625
00:18:04,480 --> 00:18:06,799
forward

626
00:18:06,880 --> 00:18:08,240
the third strategy is deploying an

627
00:18:08,240 --> 00:18:10,240
in-cluster edge stack so this is using

628
00:18:10,240 --> 00:18:12,320
sort of more modern kind of technology

629
00:18:12,320 --> 00:18:14,320
um you see envoy pop-up a lot here but

630
00:18:14,320 --> 00:18:16,000
of course engine x nature proxy and

631
00:18:16,000 --> 00:18:17,840
traffic have a sort of a horse in this

632
00:18:17,840 --> 00:18:18,720
race too

633
00:18:18,720 --> 00:18:20,640
but this is about putting your entire

634
00:18:20,640 --> 00:18:22,240
edge stack so typically there's a waff

635
00:18:22,240 --> 00:18:23,200
involved you know

636
00:18:23,200 --> 00:18:25,919
for load balancer api gateway dev portal

637
00:18:25,919 --> 00:18:26,720
you're putting this

638
00:18:26,720 --> 00:18:28,559
all in the kubernetes cluster and

639
00:18:28,559 --> 00:18:29,919
therefore you get the benefits of you

640
00:18:29,919 --> 00:18:31,440
can configure it like any other

641
00:18:31,440 --> 00:18:32,799
kubernetes service

642
00:18:32,799 --> 00:18:34,480
everything's done via yaml you have

643
00:18:34,480 --> 00:18:36,000
controllers sort of you know looking at

644
00:18:36,000 --> 00:18:37,440
what's going on and making changes and

645
00:18:37,440 --> 00:18:38,400
so forth

646
00:18:38,400 --> 00:18:39,679
this is you know this is kind of your

647
00:18:39,679 --> 00:18:41,120
green field this is probably what you're

648
00:18:41,120 --> 00:18:42,080
going to do because you've got no

649
00:18:42,080 --> 00:18:44,160
existing investment in an api gateway

650
00:18:44,160 --> 00:18:45,280
but if you're in the old world if you

651
00:18:45,280 --> 00:18:47,280
have core systems vintage systems

652
00:18:47,280 --> 00:18:49,120
this is a big stretch to do off the bat

653
00:18:49,120 --> 00:18:50,960
often folks do strategy two

654
00:18:50,960 --> 00:18:52,960
with a goal to get to strategy three

655
00:18:52,960 --> 00:18:54,799
eventually get rid of their old world as

656
00:18:54,799 --> 00:18:55,360
they

657
00:18:55,360 --> 00:18:57,679
move to the new world everything is

658
00:18:57,679 --> 00:18:58,640
running in the cluster here as you can

659
00:18:58,640 --> 00:19:00,240
see in the diagram here

660
00:19:00,240 --> 00:19:01,919
the pros is you know it's it's super

661
00:19:01,919 --> 00:19:03,840
simple once you get up and running

662
00:19:03,840 --> 00:19:05,440
there's a single stack single source of

663
00:19:05,440 --> 00:19:07,200
truth for your config and you can do

664
00:19:07,200 --> 00:19:08,240
things like git ops

665
00:19:08,240 --> 00:19:09,600
i haven't got time to go into gitops

666
00:19:09,600 --> 00:19:10,880
here today but it's sort of emerging as

667
00:19:10,880 --> 00:19:12,720
a best practice in the kubernetes world

668
00:19:12,720 --> 00:19:15,760
we define all our operational um kind of

669
00:19:15,760 --> 00:19:18,000
all our configuration uh using git and

670
00:19:18,000 --> 00:19:19,600
then we sort of drive the deployment of

671
00:19:19,600 --> 00:19:19,919
this

672
00:19:19,919 --> 00:19:22,480
via a git repo uh the the weworks team

673
00:19:22,480 --> 00:19:23,919
alexis and company have done fantastic

674
00:19:23,919 --> 00:19:24,880
work in this space

675
00:19:24,880 --> 00:19:26,000
if you want to know more about git ops

676
00:19:26,000 --> 00:19:27,840
definitely pop over to their website but

677
00:19:27,840 --> 00:19:29,360
these are these are good practices that

678
00:19:29,360 --> 00:19:30,320
are hard to do in

679
00:19:30,320 --> 00:19:31,919
with the other strategies this notion of

680
00:19:31,919 --> 00:19:33,520
a single source of truth in you know

681
00:19:33,520 --> 00:19:34,720
kubernetes ammo or

682
00:19:34,720 --> 00:19:37,360
custom resource definitions the cons are

683
00:19:37,360 --> 00:19:39,120
obvious yeah it's a potentially a large

684
00:19:39,120 --> 00:19:40,480
architectural shift

685
00:19:40,480 --> 00:19:41,840
you know we've got a lot of investment

686
00:19:41,840 --> 00:19:43,520
in our existing stack for example

687
00:19:43,520 --> 00:19:44,640
the platform team are gonna have to

688
00:19:44,640 --> 00:19:46,640
learn all new technologies that envoy is

689
00:19:46,640 --> 00:19:48,160
very different from hardware load

690
00:19:48,160 --> 00:19:48,960
balancers

691
00:19:48,960 --> 00:19:51,039
and you know there's lots of new things

692
00:19:51,039 --> 00:19:52,320
to learn this can be quite scary for

693
00:19:52,320 --> 00:19:54,480
folks to mix with the the full leap

694
00:19:54,480 --> 00:19:57,600
into this new world so

695
00:19:57,600 --> 00:19:59,200
that was a bit of a whistle stop tour i

696
00:19:59,200 --> 00:20:00,720
i wanted to really get you thinking

697
00:20:00,720 --> 00:20:02,159
today about about these things

698
00:20:02,159 --> 00:20:05,200
like the key message really is the

699
00:20:05,200 --> 00:20:06,480
future is definitely pointing towards

700
00:20:06,480 --> 00:20:07,919
things like software it's pointing

701
00:20:07,919 --> 00:20:09,200
towards things like sort of smaller

702
00:20:09,200 --> 00:20:11,440
services functions this these things

703
00:20:11,440 --> 00:20:13,120
you need to be really intentional about

704
00:20:13,120 --> 00:20:14,720
how you build your platform

705
00:20:14,720 --> 00:20:16,480
i see many many folks kind of just fall

706
00:20:16,480 --> 00:20:18,000
into a platform you're almost like

707
00:20:18,000 --> 00:20:19,280
the joke is kind of you're building a

708
00:20:19,280 --> 00:20:21,039
platform one sprint at a time

709
00:20:21,039 --> 00:20:23,200
we put a bash script on here we put you

710
00:20:23,200 --> 00:20:24,960
know a bit of kubernetes yaml on here

711
00:20:24,960 --> 00:20:26,080
before you know it you've got this

712
00:20:26,080 --> 00:20:28,240
horrible monster of a platform

713
00:20:28,240 --> 00:20:30,320
sitting on top of kubernetes yeah and

714
00:20:30,320 --> 00:20:32,159
like thinking there's many things within

715
00:20:32,159 --> 00:20:33,679
a kubernetes platform

716
00:20:33,679 --> 00:20:35,919
but the edge is really important how you

717
00:20:35,919 --> 00:20:37,520
get traffic from your users into the

718
00:20:37,520 --> 00:20:39,440
back end is super super important

719
00:20:39,440 --> 00:20:40,799
so the conclusion i'm going to leave you

720
00:20:40,799 --> 00:20:42,720
with is there's this definite move from

721
00:20:42,720 --> 00:20:44,080
hardware to software

722
00:20:44,080 --> 00:20:46,240
yeah software is more malleable tends to

723
00:20:46,240 --> 00:20:48,320
be cheaper easier to scale these kind of

724
00:20:48,320 --> 00:20:49,120
things

725
00:20:49,120 --> 00:20:51,200
there's a move like with a rise of envoy

726
00:20:51,200 --> 00:20:52,640
is a very popular proxy

727
00:20:52,640 --> 00:20:53,760
and but all the other proxies are kind

728
00:20:53,760 --> 00:20:55,600
of catching up now but there's a move

729
00:20:55,600 --> 00:20:56,880
from this layer seven

730
00:20:56,880 --> 00:20:59,600
sorry layer four tcp level to layer

731
00:20:59,600 --> 00:21:00,320
seven

732
00:21:00,320 --> 00:21:02,080
so a lot of the api gateways now all the

733
00:21:02,080 --> 00:21:04,480
proxies are application layer aware

734
00:21:04,480 --> 00:21:06,880
they understand http metadata they're

735
00:21:06,880 --> 00:21:08,799
headers they understand kafka headers

736
00:21:08,799 --> 00:21:11,120
they understand them rabbitmq amqp

737
00:21:11,120 --> 00:21:12,880
headers and they can do intelligent

738
00:21:12,880 --> 00:21:14,880
things based on that layer 7 data

739
00:21:14,880 --> 00:21:16,159
they're not just making decisions based

740
00:21:16,159 --> 00:21:17,039
on therefore

741
00:21:17,039 --> 00:21:19,120
on ip addresses and ports and things

742
00:21:19,120 --> 00:21:20,559
they're making decisions based on layer

743
00:21:20,559 --> 00:21:21,840
7.

744
00:21:21,840 --> 00:21:23,200
there's a move from like centralized

745
00:21:23,200 --> 00:21:24,960
management to decentralized i as a

746
00:21:24,960 --> 00:21:26,799
developer want to go as fast as possible

747
00:21:26,799 --> 00:21:28,559
the platform needs to be self-service i

748
00:21:28,559 --> 00:21:29,840
need to be able to open ports i need to

749
00:21:29,840 --> 00:21:31,520
be able to put new protocols in i need

750
00:21:31,520 --> 00:21:32,799
to be able to mix and match my

751
00:21:32,799 --> 00:21:36,080
cross-functional requirements

752
00:21:36,159 --> 00:21:37,760
adopting kubernetes microservices

753
00:21:37,760 --> 00:21:39,280
clearly changes the architecture but it

754
00:21:39,280 --> 00:21:40,960
changes the workflow the biggest

755
00:21:40,960 --> 00:21:42,559
change for me you know with adopting

756
00:21:42,559 --> 00:21:44,720
like doing java and kubernetes and stuff

757
00:21:44,720 --> 00:21:46,400
it's just a different workflow i'm now

758
00:21:46,400 --> 00:21:47,919
responsible for building a container i'm

759
00:21:47,919 --> 00:21:49,600
responsible for deploying that container

760
00:21:49,600 --> 00:21:50,960
i'm responsible for releasing that

761
00:21:50,960 --> 00:21:52,880
functionality via the edge

762
00:21:52,880 --> 00:21:54,080
and now i have to scale the edge

763
00:21:54,080 --> 00:21:56,159
management we can't all crowd around one

764
00:21:56,159 --> 00:21:58,480
edge config file anymore and i also want

765
00:21:58,480 --> 00:22:00,000
to be able to mix and match my cross

766
00:22:00,000 --> 00:22:01,360
functional requirements bit of rate

767
00:22:01,360 --> 00:22:02,159
limiting here

768
00:22:02,159 --> 00:22:04,320
bit of auth here different caching over

769
00:22:04,320 --> 00:22:06,159
here and i want to support

770
00:22:06,159 --> 00:22:07,919
multiple protocols because i may even be

771
00:22:07,919 --> 00:22:09,679
exposing like kafka at the edge say

772
00:22:09,679 --> 00:22:11,039
because you know i've got like an iot

773
00:22:11,039 --> 00:22:12,880
device that's talking to kafka to a

774
00:22:12,880 --> 00:22:15,520
kafka cluster

775
00:22:15,520 --> 00:22:17,120
the really one key message you know i

776
00:22:17,120 --> 00:22:18,799
focus on on the api focus on the edge

777
00:22:18,799 --> 00:22:19,760
that's what i'm doing these days and

778
00:22:19,760 --> 00:22:20,799
what i enjoy

779
00:22:20,799 --> 00:22:23,120
but the key message is if you are moving

780
00:22:23,120 --> 00:22:24,080
to the cloud

781
00:22:24,080 --> 00:22:26,559
moving to things like kubernetes choose

782
00:22:26,559 --> 00:22:28,559
your solutions intentionally i i've made

783
00:22:28,559 --> 00:22:29,760
this mistake i've put my hand up and

784
00:22:29,760 --> 00:22:30,320
saying you know

785
00:22:30,320 --> 00:22:31,840
a few years ago i was working on mesos

786
00:22:31,840 --> 00:22:33,520
pre-kubernetes did a big companies as

787
00:22:33,520 --> 00:22:34,480
well at that time

788
00:22:34,480 --> 00:22:37,120
and we were not making all the right

789
00:22:37,120 --> 00:22:38,080
decisions up front

790
00:22:38,080 --> 00:22:39,280
uh you don't want to make every decision

791
00:22:39,280 --> 00:22:40,559
up front but we weren't being

792
00:22:40,559 --> 00:22:41,840
intentional with the design of our

793
00:22:41,840 --> 00:22:43,760
platform so the key message really today

794
00:22:43,760 --> 00:22:45,600
is if you are moving to this new world

795
00:22:45,600 --> 00:22:46,799
you may have an investment in the old

796
00:22:46,799 --> 00:22:49,360
world just think about your end goal

797
00:22:49,360 --> 00:22:51,600
think about the journey from a to b when

798
00:22:51,600 --> 00:22:53,520
you really really need to invest in your

799
00:22:53,520 --> 00:22:54,720
platform as a product

800
00:22:54,720 --> 00:22:56,159
or maybe you want to buy a platform

801
00:22:56,159 --> 00:22:58,240
that's totally cool too but really do

802
00:22:58,240 --> 00:22:59,440
you think about the platform

803
00:22:59,440 --> 00:23:01,360
and i say you know my biases start at

804
00:23:01,360 --> 00:23:02,799
the edge because that is where the

805
00:23:02,799 --> 00:23:03,919
traffic is going to be coming in that's

806
00:23:03,919 --> 00:23:05,039
where users first

807
00:23:05,039 --> 00:23:08,480
interact with the systems so whistles up

808
00:23:08,480 --> 00:23:09,520
tour if you want to learn more pop

809
00:23:09,520 --> 00:23:10,480
alongs to get ambassador

810
00:23:10,480 --> 00:23:12,480
website i've got like nice uh kelsey and

811
00:23:12,480 --> 00:23:14,000
the team put together a nice um

812
00:23:14,000 --> 00:23:15,120
landing page there if you want to know

813
00:23:15,120 --> 00:23:16,640
more about kubernetes platforms we've

814
00:23:16,640 --> 00:23:17,679
linked off to a bunch of other

815
00:23:17,679 --> 00:23:18,559
interesting folks

816
00:23:18,559 --> 00:23:20,159
as well i'm doing a bunch of podcasts

817
00:23:20,159 --> 00:23:21,280
with datawire so hit me up if you want

818
00:23:21,280 --> 00:23:22,799
to jump on the podcast at some time

819
00:23:22,799 --> 00:23:25,440
chat to matt klein last week paris as

820
00:23:25,440 --> 00:23:26,799
possible of us and bunch of other

821
00:23:26,799 --> 00:23:27,679
interesting folks

822
00:23:27,679 --> 00:23:29,039
uh of course that i'm always on the blog

823
00:23:29,039 --> 00:23:31,039
on am getting bastard too

824
00:23:31,039 --> 00:23:32,480
find me in the all the talk slack i'll

825
00:23:32,480 --> 00:23:34,000
be track hosting for the next um a

826
00:23:34,000 --> 00:23:35,120
couple hours to

827
00:23:35,120 --> 00:23:37,039
hit me up on github or twitter at daniel

828
00:23:37,039 --> 00:23:38,640
bryant uk but at that point i'll hand

829
00:23:38,640 --> 00:23:40,240
back to you simon if you're still there

830
00:23:40,240 --> 00:23:43,279
and we can take questions awesome thank

831
00:23:43,279 --> 00:23:44,480
you very much daniel

832
00:23:44,480 --> 00:23:47,120
and um yeah let's uh in fact what i'm

833
00:23:47,120 --> 00:23:48,240
going to do i'm going to pull our next

834
00:23:48,240 --> 00:23:50,000
speaker in as well why not let's let's

835
00:23:50,000 --> 00:23:53,440
do this as well

836
00:23:53,440 --> 00:23:55,200
okay so uh yeah i have a couple of

837
00:23:55,200 --> 00:23:57,120
questions um

838
00:23:57,120 --> 00:23:59,039
one was about a couple of resources that

839
00:23:59,039 --> 00:24:01,919
you mentioned um

840
00:24:01,919 --> 00:24:04,960
before regarding microservices uh so one

841
00:24:04,960 --> 00:24:07,120
was a book by chris richardson uh yes

842
00:24:07,120 --> 00:24:09,200
remember the other was a sam newman one

843
00:24:09,200 --> 00:24:10,400
uh i mean i'm loving it i've got

844
00:24:10,400 --> 00:24:11,840
samuel's actually over here and

845
00:24:11,840 --> 00:24:13,360
i can definitely dump any links simon

846
00:24:13,360 --> 00:24:15,360
into like the slack letter on i'll look

847
00:24:15,360 --> 00:24:16,960
through the presentation and see but

848
00:24:16,960 --> 00:24:18,240
yeah definitely chris mission sam

849
00:24:18,240 --> 00:24:19,760
newman's books fantastic

850
00:24:19,760 --> 00:24:21,120
off the top head oh i mentioned

851
00:24:21,120 --> 00:24:23,039
christian poster as well christian's

852
00:24:23,039 --> 00:24:25,120
like got some fantastic blog posts

853
00:24:25,120 --> 00:24:26,320
awesome thank you yeah and the links

854
00:24:26,320 --> 00:24:28,240
will be cool in the in the in the slack

855
00:24:28,240 --> 00:24:28,960
afterwards

856
00:24:28,960 --> 00:24:30,559
uh one question justin if you're a

857
00:24:30,559 --> 00:24:32,000
complete beginner with regards to

858
00:24:32,000 --> 00:24:33,679
kubernetes where is a good place to

859
00:24:33,679 --> 00:24:34,880
start assuming

860
00:24:34,880 --> 00:24:37,200
understanding the fundamentals of

861
00:24:37,200 --> 00:24:38,799
networking and things like that exists

862
00:24:38,799 --> 00:24:39,840
already

863
00:24:39,840 --> 00:24:41,120
yeah it's a great question it's one i

864
00:24:41,120 --> 00:24:42,880
get a lot and let's be honest like

865
00:24:42,880 --> 00:24:44,799
containers and kubernetes are not simple

866
00:24:44,799 --> 00:24:46,640
i forget this sometimes i'm steeped in

867
00:24:46,640 --> 00:24:47,840
it day in day out

868
00:24:47,840 --> 00:24:49,360
i think the kubernetes docks are very

869
00:24:49,360 --> 00:24:51,039
good and there's also a blog um

870
00:24:51,039 --> 00:24:53,840
also a nice o'reilly book by i might get

871
00:24:53,840 --> 00:24:54,799
this wrong but i think it's kelsey

872
00:24:54,799 --> 00:24:55,600
hightower

873
00:24:55,600 --> 00:24:57,840
brendan burns and joe bader that is a

874
00:24:57,840 --> 00:24:59,360
really nice resource if you've got like

875
00:24:59,360 --> 00:25:00,480
if you like paper books or if you want

876
00:25:00,480 --> 00:25:01,520
to jump on like what was

877
00:25:01,520 --> 00:25:03,919
safari um i've learned a lot from kelsey

878
00:25:03,919 --> 00:25:05,279
jo and the team over the years in

879
00:25:05,279 --> 00:25:06,000
brendan

880
00:25:06,000 --> 00:25:07,760
and that's my often my starting point

881
00:25:07,760 --> 00:25:09,120
grab the o'reilly book

882
00:25:09,120 --> 00:25:10,720
have a look through it'll give you a

883
00:25:10,720 --> 00:25:12,559
good jumping off point to learn all the

884
00:25:12,559 --> 00:25:15,840
other things i mentioned

