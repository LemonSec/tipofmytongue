1
00:00:00,030 --> 00:00:03,720
up next is Aaron Peretti who literally

2
00:00:03,720 --> 00:00:06,930
wrote the book on ooofff 2.0 he's the

3
00:00:06,930 --> 00:00:10,410
author of OAuth 2.0 simplified you may

4
00:00:10,410 --> 00:00:12,630
have seen him in Wired magazine or Fast

5
00:00:12,630 --> 00:00:15,210
Company or at octane please welcome

6
00:00:15,210 --> 00:00:19,529
Aaron perky thank you very much so so

7
00:00:19,529 --> 00:00:20,970
I'm happy to be here this is a really

8
00:00:20,970 --> 00:00:22,920
cool event excited to be sharing this

9
00:00:22,920 --> 00:00:25,080
with you I'm going to talk about how to

10
00:00:25,080 --> 00:00:28,380
hack ooofff and just an FYI this

11
00:00:28,380 --> 00:00:30,539
presentation is actually recorded I'm

12
00:00:30,539 --> 00:00:31,800
live right now you're gonna see my

13
00:00:31,800 --> 00:00:34,380
recording in a minute and that means I

14
00:00:34,380 --> 00:00:36,420
get to be on slack with you all

15
00:00:36,420 --> 00:00:39,540
answering Q&A live so feel free to chat

16
00:00:39,540 --> 00:00:41,100
with me on slack while this is going and

17
00:00:41,100 --> 00:00:42,930
I'll jump in at the end and answer

18
00:00:42,930 --> 00:00:46,309
questions that have come in as well so

19
00:00:46,309 --> 00:00:49,590
thank you and here we go hi everybody I

20
00:00:49,590 --> 00:00:51,570
am super excited to be here today and

21
00:00:51,570 --> 00:00:53,820
talk to you all about how to hack oo-ahh

22
00:00:53,820 --> 00:00:56,520
I'm Erin perky I'm a senior security

23
00:00:56,520 --> 00:00:58,739
architect octa I'm also a member of the

24
00:00:58,739 --> 00:01:01,199
OAuth working group at the IETF and I've

25
00:01:01,199 --> 00:01:02,489
been in the web standards space for

26
00:01:02,489 --> 00:01:03,629
quite a long time now

27
00:01:03,629 --> 00:01:05,069
if you've ever Google anything about

28
00:01:05,069 --> 00:01:06,659
OAuth you've probably landed on the

29
00:01:06,659 --> 00:01:08,729
website I maintain which is Oh a net

30
00:01:08,729 --> 00:01:10,740
it's a good list of a lot of great

31
00:01:10,740 --> 00:01:12,780
resources for finding things about OAuth

32
00:01:12,780 --> 00:01:14,520
and if you ever see anything wrong with

33
00:01:14,520 --> 00:01:16,409
it please feel free to contribute the

34
00:01:16,409 --> 00:01:17,850
link is at the bottom and you can add

35
00:01:17,850 --> 00:01:19,710
your own resources and things you find

36
00:01:19,710 --> 00:01:21,210
on there alright so a couple of

37
00:01:21,210 --> 00:01:23,220
housekeeping things please feel free to

38
00:01:23,220 --> 00:01:25,500
ask questions as we go I will be keeping

39
00:01:25,500 --> 00:01:27,540
an eye on the Q&A here as we are working

40
00:01:27,540 --> 00:01:29,070
through this content and I will be

41
00:01:29,070 --> 00:01:31,229
answering questions there also the slide

42
00:01:31,229 --> 00:01:33,299
from this talk are on my website at Aron

43
00:01:33,299 --> 00:01:35,490
PK comm so feel free to go there and

44
00:01:35,490 --> 00:01:37,170
that way you can find the links to all

45
00:01:37,170 --> 00:01:38,280
the things I'm mentioning in these

46
00:01:38,280 --> 00:01:40,470
slides so before we talk about how to

47
00:01:40,470 --> 00:01:41,189
hack ooofff

48
00:01:41,189 --> 00:01:43,020
I want to talk a little bit about what a

49
00:01:43,020 --> 00:01:46,020
auth is and set the scene for how some

50
00:01:46,020 --> 00:01:47,729
of these things take place if you ever

51
00:01:47,729 --> 00:01:49,439
tried to re anything online about OAuth

52
00:01:49,439 --> 00:01:51,540
I apologize because it can often feel

53
00:01:51,540 --> 00:01:53,040
like trying to find your way through a

54
00:01:53,040 --> 00:01:56,189
maze of content and is not obvious how

55
00:01:56,189 --> 00:01:58,079
these things fit together Oh auth is not

56
00:01:58,079 --> 00:02:00,210
just one spec it's made up of a whole

57
00:02:00,210 --> 00:02:02,369
bunch of specs so it can be pretty

58
00:02:02,369 --> 00:02:04,170
overwhelming trying to figure out how to

59
00:02:04,170 --> 00:02:06,090
navigate this and where these things

60
00:02:06,090 --> 00:02:07,950
line up and how they fit together so

61
00:02:07,950 --> 00:02:10,139
instead of going through the specs we're

62
00:02:10,139 --> 00:02:11,370
actually gonna take a step back and

63
00:02:11,370 --> 00:02:13,080
first talk about how we got them off in

64
00:02:13,080 --> 00:02:13,890
the first place

65
00:02:13,890 --> 00:02:15,390
so do you remember seeing this kind of

66
00:02:15,390 --> 00:02:16,890
thing online like I don't know 10 years

67
00:02:16,890 --> 00:02:19,140
ago or so this was a very common pattern

68
00:02:19,140 --> 00:02:21,060
on the internet a long time ago we look

69
00:02:21,060 --> 00:02:22,890
at this now we say like oh hi I would

70
00:02:22,890 --> 00:02:24,420
never put my email address and password

71
00:02:24,420 --> 00:02:26,550
into some random application like Yelp

72
00:02:26,550 --> 00:02:29,430
right but it was very common at the time

73
00:02:29,430 --> 00:02:32,100
to do this because you know this new app

74
00:02:32,100 --> 00:02:33,930
like Yelp would launch and it would ask

75
00:02:33,930 --> 00:02:35,640
you to enter your password for your

76
00:02:35,640 --> 00:02:37,950
email address in order for it to go and

77
00:02:37,950 --> 00:02:39,270
find your friends to see if they are

78
00:02:39,270 --> 00:02:41,790
already using Yelp which is like a very

79
00:02:41,790 --> 00:02:44,130
cool feature but this is a terrible way

80
00:02:44,130 --> 00:02:45,720
to do that and we understand that now

81
00:02:45,720 --> 00:02:47,610
but it wasn't limited to just yell it

82
00:02:47,610 --> 00:02:49,709
was also like Facebook doing this can

83
00:02:49,709 --> 00:02:51,870
you imagine if now Facebook would be

84
00:02:51,870 --> 00:02:53,640
collecting people's email addresses and

85
00:02:53,640 --> 00:02:55,290
passwords that would not go over well

86
00:02:55,290 --> 00:02:57,660
but users were happily giving their

87
00:02:57,660 --> 00:02:59,489
logins should be services because they

88
00:02:59,489 --> 00:03:01,350
actually did want what the application

89
00:03:01,350 --> 00:03:03,780
was promising which was the ability to

90
00:03:03,780 --> 00:03:05,489
find their friends so what we're looking

91
00:03:05,489 --> 00:03:07,590
for is a solution for how do we let

92
00:03:07,590 --> 00:03:09,930
applications access the contacts in

93
00:03:09,930 --> 00:03:13,019
their API but not have it also access

94
00:03:13,019 --> 00:03:15,420
the person's emails and that was the

95
00:03:15,420 --> 00:03:16,980
original problem that oh I set up this

96
00:03:16,980 --> 00:03:18,299
hall which was how can we let an

97
00:03:18,299 --> 00:03:20,450
application access data in an API

98
00:03:20,450 --> 00:03:22,500
without giving that application your

99
00:03:22,500 --> 00:03:24,299
password and originally it was always

100
00:03:24,299 --> 00:03:26,340
about third party access to data it was

101
00:03:26,340 --> 00:03:28,350
about Yelp wanting access to your Google

102
00:03:28,350 --> 00:03:30,360
account or last.fm wanting to access

103
00:03:30,360 --> 00:03:32,820
your listing data in Spotify or buffer

104
00:03:32,820 --> 00:03:34,650
wants to post to your Twitter account it

105
00:03:34,650 --> 00:03:35,970
was always about that third party access

106
00:03:35,970 --> 00:03:38,190
and the result of the OAuth flow is that

107
00:03:38,190 --> 00:03:39,780
the application that has an access token

108
00:03:39,780 --> 00:03:42,180
which it can use to go make API requests

109
00:03:42,180 --> 00:03:43,860
after the OAuth flow is complete and the

110
00:03:43,860 --> 00:03:45,989
user has allowed the application access

111
00:03:45,989 --> 00:03:48,329
their account that application will have

112
00:03:48,329 --> 00:03:49,950
an access token which is a string of

113
00:03:49,950 --> 00:03:51,239
characters that doesn't mean anything to

114
00:03:51,239 --> 00:03:53,010
the application now a string of

115
00:03:53,010 --> 00:03:54,510
characters is then used in an API

116
00:03:54,510 --> 00:03:57,030
request to access that API what's

117
00:03:57,030 --> 00:03:58,440
interesting is that nothing in this

118
00:03:58,440 --> 00:04:00,510
process actually tells the application

119
00:04:00,510 --> 00:04:02,250
about the user doesn't actually tell the

120
00:04:02,250 --> 00:04:03,959
application who logged in and that's

121
00:04:03,959 --> 00:04:06,390
totally fine both was not created as a

122
00:04:06,390 --> 00:04:08,310
single sign-on protocol or as a way to

123
00:04:08,310 --> 00:04:11,130
talk about user identity it was created

124
00:04:11,130 --> 00:04:13,590
to access API so I like to use this

125
00:04:13,590 --> 00:04:15,060
analogy of checking you down a hotel

126
00:04:15,060 --> 00:04:16,560
which seems like a funny idea right now

127
00:04:16,560 --> 00:04:18,478
you go to the front desk you give that

128
00:04:18,478 --> 00:04:20,579
person your ID and your credit card they

129
00:04:20,579 --> 00:04:22,019
give you back this hotel key

130
00:04:22,019 --> 00:04:24,419
you take that hotel key and you swipe

131
00:04:24,419 --> 00:04:25,770
the key on the door and the door lets

132
00:04:25,770 --> 00:04:27,720
you in now in order for this

133
00:04:27,720 --> 00:04:29,730
to work the key card doesn't actually

134
00:04:29,730 --> 00:04:31,860
need to represent you a person it just

135
00:04:31,860 --> 00:04:33,600
needs to represent that you have access

136
00:04:33,600 --> 00:04:35,910
to this door so the door doesn't even

137
00:04:35,910 --> 00:04:37,950
care about who you are door just cares

138
00:04:37,950 --> 00:04:40,470
about whether this key card has access

139
00:04:40,470 --> 00:04:43,170
so in terms the person at the front desk

140
00:04:43,170 --> 00:04:45,420
is the authorization server the key card

141
00:04:45,420 --> 00:04:47,700
is the access token and the door is the

142
00:04:47,700 --> 00:04:50,100
API with that kind of background out of

143
00:04:50,100 --> 00:04:52,140
the way let's now talk about how of'

144
00:04:52,140 --> 00:04:54,540
works just enough so that we can see

145
00:04:54,540 --> 00:04:56,040
where some of the holes are because

146
00:04:56,040 --> 00:04:57,540
they're poking out in order to actually

147
00:04:57,540 --> 00:04:59,940
break it so all of oh uh is modeled

148
00:04:59,940 --> 00:05:01,950
around these five roles these are roles

149
00:05:01,950 --> 00:05:03,780
to find in the spec the terms at the

150
00:05:03,780 --> 00:05:05,940
bottom are the spectrums for them those

151
00:05:05,940 --> 00:05:07,170
are the words that you'll find the spec

152
00:05:07,170 --> 00:05:09,510
like resource owner and resource server

153
00:05:09,510 --> 00:05:11,400
those aren't typically things that we

154
00:05:11,400 --> 00:05:12,690
use in a conversation when we talk about

155
00:05:12,690 --> 00:05:15,420
this instead we talk about users and API

156
00:05:15,420 --> 00:05:17,130
is and applications but they're

157
00:05:17,130 --> 00:05:19,650
basically interchangeable and we have to

158
00:05:19,650 --> 00:05:21,419
remember that these are roles not

159
00:05:21,419 --> 00:05:24,090
actually components so the application

160
00:05:24,090 --> 00:05:26,040
might be a mobile app but it might also

161
00:05:26,040 --> 00:05:28,050
be a web server app it doesn't matter

162
00:05:28,050 --> 00:05:29,400
where that application is running

163
00:05:29,400 --> 00:05:31,650
we always model it the same way and oh

164
00:05:31,650 --> 00:05:33,720
and talk about that application getting

165
00:05:33,720 --> 00:05:34,530
an access to

166
00:05:34,530 --> 00:05:36,450
similarly the OAuth server and the API

167
00:05:36,450 --> 00:05:38,070
are sometimes part of the same piece of

168
00:05:38,070 --> 00:05:40,200
software like how github has a built in

169
00:05:40,200 --> 00:05:43,110
OS or as part of its same software but

170
00:05:43,110 --> 00:05:44,729
in some cases you might be using an

171
00:05:44,729 --> 00:05:47,040
external server either as like an open

172
00:05:47,040 --> 00:05:48,750
source project or as a service like

173
00:05:48,750 --> 00:05:49,800
octave or auth0

174
00:05:49,800 --> 00:05:52,229
but again it doesn't matter how these

175
00:05:52,229 --> 00:05:54,030
things are configured we still talk

176
00:05:54,030 --> 00:05:56,310
about these roles the same way so let's

177
00:05:56,310 --> 00:05:58,260
start by going over the most common oaah

178
00:05:58,260 --> 00:06:00,780
flow the authorization code flow so the

179
00:06:00,780 --> 00:06:02,940
flow starts off with the user visiting

180
00:06:02,940 --> 00:06:04,680
the applications website or launching

181
00:06:04,680 --> 00:06:06,300
the mobile app and then they click the

182
00:06:06,300 --> 00:06:08,490
button that says login and that is them

183
00:06:08,490 --> 00:06:09,840
expressing interest in using this

184
00:06:09,840 --> 00:06:11,610
application so they are saying I would

185
00:06:11,610 --> 00:06:13,020
like to use this application the app

186
00:06:13,020 --> 00:06:14,910
says great don't give me your password I

187
00:06:14,910 --> 00:06:17,040
can't use your password so instead go

188
00:06:17,040 --> 00:06:19,050
over to the OAuth server and log in

189
00:06:19,050 --> 00:06:21,840
there and does that by creating a URL to

190
00:06:21,840 --> 00:06:23,370
the OAuth server with a bunch of stuff

191
00:06:23,370 --> 00:06:24,900
in the query string that describes the

192
00:06:24,900 --> 00:06:27,720
request things like its own identifier

193
00:06:27,720 --> 00:06:30,240
and what kind of data it's requesting so

194
00:06:30,240 --> 00:06:31,530
that causes the user to land at the

195
00:06:31,530 --> 00:06:33,690
OAuth server where they then login and

196
00:06:33,690 --> 00:06:35,520
then they will see this prompt asking

197
00:06:35,520 --> 00:06:37,560
them do you allow this request if they

198
00:06:37,560 --> 00:06:39,450
click yes the OAuth server generates a

199
00:06:39,450 --> 00:06:41,100
one-time-use authorization

200
00:06:41,100 --> 00:06:43,380
code and sends it back in a redirect to

201
00:06:43,380 --> 00:06:45,540
the users browser to have the users

202
00:06:45,540 --> 00:06:46,830
browser deliver back to the application

203
00:06:46,830 --> 00:06:49,020
now this is an important step because

204
00:06:49,020 --> 00:06:51,570
what's actually going on here is the

205
00:06:51,570 --> 00:06:52,740
OAuth servers trying to get this

206
00:06:52,740 --> 00:06:54,420
authorization code to the application

207
00:06:54,420 --> 00:06:56,610
but the only way it has to do that is by

208
00:06:56,610 --> 00:06:58,650
telling the users browser to deliver to

209
00:06:58,650 --> 00:07:00,810
the application itself so once the

210
00:07:00,810 --> 00:07:02,370
application has the authorization code

211
00:07:02,370 --> 00:07:04,410
it can now go and get an access token

212
00:07:04,410 --> 00:07:06,930
and does that by making a post request

213
00:07:06,930 --> 00:07:08,730
back to the OAuth server to exchange

214
00:07:08,730 --> 00:07:11,100
that this is a step where it can also

215
00:07:11,100 --> 00:07:14,220
include a secret its own password so

216
00:07:14,220 --> 00:07:15,930
that the OAuth server knows that that

217
00:07:15,930 --> 00:07:18,060
code was not stolen in that redirect

218
00:07:18,060 --> 00:07:20,520
step so the OAuth server validates that

219
00:07:20,520 --> 00:07:22,530
request checks the client secret and

220
00:07:22,530 --> 00:07:24,360
creates an access token and returns it

221
00:07:24,360 --> 00:07:26,460
in the response now the application can

222
00:07:26,460 --> 00:07:28,350
go use the access token to request data

223
00:07:28,350 --> 00:07:30,570
from the API so the blue lines on top

224
00:07:30,570 --> 00:07:32,610
are really called front Channel that's

225
00:07:32,610 --> 00:07:33,840
the idea where we're actually using the

226
00:07:33,840 --> 00:07:35,310
user's browser to move data between

227
00:07:35,310 --> 00:07:37,710
parties the pink lines are the

228
00:07:37,710 --> 00:07:39,480
back-channel and that's the sort of more

229
00:07:39,480 --> 00:07:41,670
normal one where we're sending data from

230
00:07:41,670 --> 00:07:44,760
a client to a server over HTTP there's a

231
00:07:44,760 --> 00:07:46,530
lot of benefits in the back channel that

232
00:07:46,530 --> 00:07:48,360
we often take for granted even because

233
00:07:48,360 --> 00:07:50,010
it's over HTTPS we can validate a

234
00:07:50,010 --> 00:07:51,750
certificate so the client knows it's

235
00:07:51,750 --> 00:07:53,280
talking to the right server once that

236
00:07:53,280 --> 00:07:54,930
connection is established it's encrypted

237
00:07:54,930 --> 00:07:57,270
so that data can't be tampered with in

238
00:07:57,270 --> 00:07:59,220
transit and the response becomes back

239
00:07:59,220 --> 00:08:01,140
can be trusted immediately because it's

240
00:08:01,140 --> 00:08:02,430
part of that same connection that was

241
00:08:02,430 --> 00:08:03,900
established I like to think of this as

242
00:08:03,900 --> 00:08:05,790
hand delivering a message where you can

243
00:08:05,790 --> 00:08:07,530
walk up to somebody you can hand them a

244
00:08:07,530 --> 00:08:09,660
thing you can see them they can see you

245
00:08:09,660 --> 00:08:11,730
you can say they took it you can be sure

246
00:08:11,730 --> 00:08:13,350
that nobody else stole it in that

247
00:08:13,350 --> 00:08:15,150
process sending data over the front

248
00:08:15,150 --> 00:08:17,040
channel is more like throwing it over a

249
00:08:17,040 --> 00:08:18,780
wall and just kind of hoping they catch

250
00:08:18,780 --> 00:08:21,210
it where you can't actually be sure that

251
00:08:21,210 --> 00:08:22,680
they caught it you can't tell if

252
00:08:22,680 --> 00:08:24,450
somebody's stolen mid-flight you can't

253
00:08:24,450 --> 00:08:25,800
tell if it just landed on the floor and

254
00:08:25,800 --> 00:08:27,990
on the other type is a similar problem

255
00:08:27,990 --> 00:08:29,760
which is that on that side you can't

256
00:08:29,760 --> 00:08:31,260
actually be sure where it's coming from

257
00:08:31,260 --> 00:08:33,240
you don't actually know if it's from the

258
00:08:33,240 --> 00:08:35,280
real OS server or from a fake OAuth

259
00:08:35,280 --> 00:08:36,929
server so you might be wondering well

260
00:08:36,929 --> 00:08:38,280
why do we use the front channel at all

261
00:08:38,280 --> 00:08:40,890
then if it's so risky or insecure it

262
00:08:40,890 --> 00:08:42,330
does have a few really important

263
00:08:42,330 --> 00:08:44,070
properties that it turns out is very

264
00:08:44,070 --> 00:08:47,280
useful in o1 it's the way that we can

265
00:08:47,280 --> 00:08:48,990
actually be sure that the user was in

266
00:08:48,990 --> 00:08:50,550
front of their computer when they logged

267
00:08:50,550 --> 00:08:52,770
in because it's the OAuth server that is

268
00:08:52,770 --> 00:08:54,390
collecting their password but also

269
00:08:54,390 --> 00:08:55,410
import

270
00:08:55,410 --> 00:08:57,240
it's a way for applications to be able

271
00:08:57,240 --> 00:08:59,250
to receive data even when they don't

272
00:08:59,250 --> 00:09:02,130
have a public IP address which for

273
00:09:02,130 --> 00:09:04,200
things like mobile phones or JavaScript

274
00:09:04,200 --> 00:09:06,120
apps turns out is really important okay

275
00:09:06,120 --> 00:09:08,250
so that was a quick overview of what a

276
00:09:08,250 --> 00:09:10,470
lot is if you're curious about more of

277
00:09:10,470 --> 00:09:12,240
how that works and the different

278
00:09:12,240 --> 00:09:15,000
environments I often run in do check out

279
00:09:15,000 --> 00:09:17,399
my videos on YouTube search for aquifer

280
00:09:17,399 --> 00:09:18,720
developers or just search for my name

281
00:09:18,720 --> 00:09:20,880
Aaron Becky and you'll find a bunch of

282
00:09:20,880 --> 00:09:23,250
videos about OAuth that talks about that

283
00:09:23,250 --> 00:09:26,130
part in more detail now let's move on to

284
00:09:26,130 --> 00:09:28,529
the hacks so it turns out there's a lot

285
00:09:28,529 --> 00:09:30,899
of ways Tac Toe auth in fact most of

286
00:09:30,899 --> 00:09:32,610
them are documented in the specs

287
00:09:32,610 --> 00:09:35,430
themselves there's a handful of attacks

288
00:09:35,430 --> 00:09:37,290
documented in the core the original

289
00:09:37,290 --> 00:09:39,450
document there was a later security

290
00:09:39,450 --> 00:09:41,520
document put out there was a document

291
00:09:41,520 --> 00:09:43,260
put out about specifically OAuth and

292
00:09:43,260 --> 00:09:45,060
mobile apps which again talks about some

293
00:09:45,060 --> 00:09:47,459
of the particular aspects unique to the

294
00:09:47,459 --> 00:09:49,800
mobile app environment there's also a

295
00:09:49,800 --> 00:09:51,870
new document called OAuth 2 security

296
00:09:51,870 --> 00:09:53,790
best current practice and that is a huge

297
00:09:53,790 --> 00:09:56,339
list of other ways that this can kind of

298
00:09:56,339 --> 00:09:58,410
go wrong so I'm gonna save you from that

299
00:09:58,410 --> 00:10:00,390
because those are well documented and

300
00:10:00,390 --> 00:10:02,490
well understood instead I want to focus

301
00:10:02,490 --> 00:10:04,050
on a couple of attacks that happen in

302
00:10:04,050 --> 00:10:05,760
the real world that actually resulted in

303
00:10:05,760 --> 00:10:08,160
some pretty big press headlines so I'm

304
00:10:08,160 --> 00:10:10,290
gonna start off with this one which is

305
00:10:10,290 --> 00:10:12,420
well understood now and in fact a lot of

306
00:10:12,420 --> 00:10:14,430
security has been based around the fact

307
00:10:14,430 --> 00:10:15,870
that that's happened a long time ago but

308
00:10:15,870 --> 00:10:17,970
it's a good place to start so Twitter

309
00:10:17,970 --> 00:10:20,160
back in 2013 there were a bunch of

310
00:10:20,160 --> 00:10:22,170
headlines that came out about how

311
00:10:22,170 --> 00:10:24,270
Twitter's API keys were stolen or leaked

312
00:10:24,270 --> 00:10:25,529
or whatever you wanted to call it so

313
00:10:25,529 --> 00:10:27,690
what happened was someone went and

314
00:10:27,690 --> 00:10:29,250
downloaded all the Twitter apps on all

315
00:10:29,250 --> 00:10:31,020
the different platforms like iPhone

316
00:10:31,020 --> 00:10:33,180
Android Windows Phone and then we

317
00:10:33,180 --> 00:10:34,740
compiled them and extracted the strings

318
00:10:34,740 --> 00:10:36,540
out of them and then posted all those

319
00:10:36,540 --> 00:10:38,760
API keys on get up the result of this

320
00:10:38,760 --> 00:10:41,579
hack was that basically anybody can now

321
00:10:41,579 --> 00:10:44,070
impersonate the Twitter apps so what I

322
00:10:44,070 --> 00:10:45,270
mean by that is that any of the

323
00:10:45,270 --> 00:10:46,470
permissions that the Twitter apps

324
00:10:46,470 --> 00:10:48,000
themselves might have that other

325
00:10:48,000 --> 00:10:50,390
third-party developers couldn't get now

326
00:10:50,390 --> 00:10:52,440
anybody could get those permissions and

327
00:10:52,440 --> 00:10:55,350
the lesson here that we learned was you

328
00:10:55,350 --> 00:10:58,050
can't put secrets in native apps it just

329
00:10:58,050 --> 00:11:00,089
doesn't work there's no way to do it

330
00:11:00,089 --> 00:11:02,010
because anybody who downloads that app

331
00:11:02,010 --> 00:11:04,320
is downloading that secret and can just

332
00:11:04,320 --> 00:11:06,089
you compile it so this was actually one

333
00:11:06,089 --> 00:11:07,870
of the major problems with OAuth

334
00:11:07,870 --> 00:11:09,970
which that it was entirely based around

335
00:11:09,970 --> 00:11:12,910
this idea of using a secret for that

336
00:11:12,910 --> 00:11:14,529
application to sign requests and that

337
00:11:14,529 --> 00:11:16,089
secret was always provisioned by the

338
00:11:16,089 --> 00:11:17,320
developer and then put into the

339
00:11:17,320 --> 00:11:18,790
application which works fine for

340
00:11:18,790 --> 00:11:21,190
web-based apps where users don't have

341
00:11:21,190 --> 00:11:22,450
access to the source code

342
00:11:22,450 --> 00:11:24,070
but when we're talking about mobile apps

343
00:11:24,070 --> 00:11:26,650
these users download those apps download

344
00:11:26,650 --> 00:11:28,240
the secrets with them and can extract

345
00:11:28,240 --> 00:11:30,520
them like we saw so that was a major

346
00:11:30,520 --> 00:11:31,990
problem with OAuth 1 and that was

347
00:11:31,990 --> 00:11:33,670
actually a huge motivator in deciding to

348
00:11:33,670 --> 00:11:36,040
start a new version of the spec so both

349
00:11:36,040 --> 00:11:38,230
to avoids the need for a client secret

350
00:11:38,230 --> 00:11:41,080
in cases where we can't use one because

351
00:11:41,080 --> 00:11:43,330
of this additional extension at it - Oh

352
00:11:43,330 --> 00:11:46,540
pixie pkc II which stands for prove key

353
00:11:46,540 --> 00:11:48,310
for code exchange is basically a

354
00:11:48,310 --> 00:11:50,529
solution for how to do OAuth with

355
00:11:50,529 --> 00:11:52,300
applications that can't use a secret so

356
00:11:52,300 --> 00:11:53,650
if your application can't use a secret

357
00:11:53,650 --> 00:11:55,000
you might remember that that first

358
00:11:55,000 --> 00:11:56,860
diagram we looked at of how o F works

359
00:11:56,860 --> 00:11:58,779
that one of the last steps there

360
00:11:58,779 --> 00:12:00,339
included the application using its

361
00:12:00,339 --> 00:12:02,170
secret to authenticate to the OAuth sir

362
00:12:02,170 --> 00:12:04,210
we don't have a secret so what are we

363
00:12:04,210 --> 00:12:04,660
gonna do

364
00:12:04,660 --> 00:12:05,800
let's now walk through the flow again

365
00:12:05,800 --> 00:12:08,260
but look at what's changed so it starts

366
00:12:08,260 --> 00:12:09,820
off the same the user clicks on the

367
00:12:09,820 --> 00:12:11,350
application and says I would like to use

368
00:12:11,350 --> 00:12:13,330
this application please login now this

369
00:12:13,330 --> 00:12:15,700
time the app first generates a new

370
00:12:15,700 --> 00:12:18,250
secret random secret for this request

371
00:12:18,250 --> 00:12:20,860
stores internally and then calculates a

372
00:12:20,860 --> 00:12:22,930
hash of that secret then when it builds

373
00:12:22,930 --> 00:12:24,670
a URL that it's going to launch the user

374
00:12:24,670 --> 00:12:26,440
into a browser it includes that hash

375
00:12:26,440 --> 00:12:28,810
value in that URL so that causes the

376
00:12:28,810 --> 00:12:30,520
user's browser to deliver the hash to

377
00:12:30,520 --> 00:12:32,290
the OAuth server now the OAuth server

378
00:12:32,290 --> 00:12:34,180
still again gets these err to login and

379
00:12:34,180 --> 00:12:36,459
prompts them for permission and then

380
00:12:36,459 --> 00:12:38,470
issues a temporary code but it also

381
00:12:38,470 --> 00:12:41,680
remembers the hashed value so now the

382
00:12:41,680 --> 00:12:43,930
user's browser delivers that temporary

383
00:12:43,930 --> 00:12:46,240
code back to the application and now the

384
00:12:46,240 --> 00:12:48,100
application is ready to go and exchange

385
00:12:48,100 --> 00:12:50,110
that code for an access token this time

386
00:12:50,110 --> 00:12:51,730
because it doesn't have a pre registered

387
00:12:51,730 --> 00:12:54,010
client secret it does have that secret

388
00:12:54,010 --> 00:12:55,240
that it's holding onto from when it

389
00:12:55,240 --> 00:12:57,339
started the request so it includes that

390
00:12:57,339 --> 00:12:59,440
raw secret value in this request and

391
00:12:59,440 --> 00:13:02,320
what that does is it lets the OAuth

392
00:13:02,320 --> 00:13:04,300
server say okay well when I issued that

393
00:13:04,300 --> 00:13:06,730
code I remember seeing this hashed value

394
00:13:06,730 --> 00:13:09,850
so that means whoever's gonna get this

395
00:13:09,850 --> 00:13:12,310
code now has to prove that they were the

396
00:13:12,310 --> 00:13:14,200
ones that started the request and to do

397
00:13:14,200 --> 00:13:16,030
that if they include the secret they use

398
00:13:16,030 --> 00:13:18,490
to generate that hash Yohan said we're

399
00:13:18,490 --> 00:13:20,350
gonna hash that value itself and compare

400
00:13:20,350 --> 00:13:21,939
the two hashes to see if they match

401
00:13:21,939 --> 00:13:23,409
and then it can respond with the access

402
00:13:23,409 --> 00:13:24,999
token and then we're done and everything

403
00:13:24,999 --> 00:13:26,859
moves on the good news is this is often

404
00:13:26,859 --> 00:13:28,599
just handled by a library for use of the

405
00:13:28,599 --> 00:13:30,759
app off library for ios and android and

406
00:13:30,759 --> 00:13:33,189
javascript does this for you often times

407
00:13:33,189 --> 00:13:35,319
if you're using a company's product it's

408
00:13:35,319 --> 00:13:37,089
sdk will also be doing this under the

409
00:13:37,089 --> 00:13:39,069
hood all right let's talk about the next

410
00:13:39,069 --> 00:13:41,289
one and this is about hacking JSON web

411
00:13:41,289 --> 00:13:44,229
tokens or J WTS so these headlines were

412
00:13:44,229 --> 00:13:46,899
going around around 2015 when a whole

413
00:13:46,899 --> 00:13:48,189
bunch of libraries were found to be

414
00:13:48,189 --> 00:13:50,259
vulnerable to the same problem and that

415
00:13:50,259 --> 00:13:51,699
was that many libraries were actually

416
00:13:51,699 --> 00:13:53,769
not validating JSON web tokens properly

417
00:13:53,769 --> 00:13:55,809
so let's dig into this a little bit and

418
00:13:55,809 --> 00:13:57,339
see what's going on Jayson web tokens

419
00:13:57,339 --> 00:13:59,349
are often used for API authentication

420
00:13:59,349 --> 00:14:01,569
where your access token might be

421
00:14:01,569 --> 00:14:03,549
adjacent web token here's what a basin

422
00:14:03,549 --> 00:14:05,499
web token looks like it is a long string

423
00:14:05,499 --> 00:14:07,449
of characters it always starts with e YJ

424
00:14:07,449 --> 00:14:08,769
and if you look closely there are two

425
00:14:08,769 --> 00:14:10,179
dots somewhere in there and those

426
00:14:10,179 --> 00:14:12,129
separated into a three-part token

427
00:14:12,129 --> 00:14:13,479
there's a header of payload and a

428
00:14:13,479 --> 00:14:15,459
signature without being able to validate

429
00:14:15,459 --> 00:14:17,499
this somebody could go in here modify

430
00:14:17,499 --> 00:14:19,689
the payload the middle part change data

431
00:14:19,689 --> 00:14:21,599
change a username change the permission

432
00:14:21,599 --> 00:14:24,819
things like that and then repackage it

433
00:14:24,819 --> 00:14:26,919
up and then send it to the API and try

434
00:14:26,919 --> 00:14:29,139
to make API requests if it's not

435
00:14:29,139 --> 00:14:30,759
validating it properly it would then

436
00:14:30,759 --> 00:14:32,379
just read whatever data is in the middle

437
00:14:32,379 --> 00:14:33,999
and then the attacker is in so the thing

438
00:14:33,999 --> 00:14:35,649
about JSON web tokens is that the header

439
00:14:35,649 --> 00:14:38,379
part talks sort of about the token one

440
00:14:38,379 --> 00:14:39,639
of the things in the header is a

441
00:14:39,639 --> 00:14:41,499
description of how the token was signed

442
00:14:41,499 --> 00:14:42,699
and there's a couple of different

443
00:14:42,699 --> 00:14:44,349
options available to you if you're

444
00:14:44,349 --> 00:14:45,999
creating a JSON web token one of the

445
00:14:45,999 --> 00:14:48,459
signing mechanisms is rs.25 six and

446
00:14:48,459 --> 00:14:50,919
that's an asymmetrical algorithm where

447
00:14:50,919 --> 00:14:52,959
you use a public key to verify and a

448
00:14:52,959 --> 00:14:54,909
private key to sign now it just so

449
00:14:54,909 --> 00:14:56,709
happens so there's also a signing

450
00:14:56,709 --> 00:14:59,169
algorithm called nut and that means

451
00:14:59,169 --> 00:15:00,399
there's no signature

452
00:15:00,399 --> 00:15:02,499
so the hack here is a you go get a real

453
00:15:02,499 --> 00:15:04,059
access token that's probably signed

454
00:15:04,059 --> 00:15:07,059
using rs.25 six then you go inside the

455
00:15:07,059 --> 00:15:08,529
token you change the data you want in

456
00:15:08,529 --> 00:15:10,689
the middle part the payload and then you

457
00:15:10,689 --> 00:15:12,399
change the signing algorithm to none and

458
00:15:12,399 --> 00:15:14,289
then make an API request and then if

459
00:15:14,289 --> 00:15:16,119
that server first looks at the header to

460
00:15:16,119 --> 00:15:18,279
decide how to validate the token it'll

461
00:15:18,279 --> 00:15:19,899
see the signing algorithm none and it

462
00:15:19,899 --> 00:15:21,609
will skip checking the signature at all

463
00:15:21,609 --> 00:15:23,829
and now it'll just believe whatever you

464
00:15:23,829 --> 00:15:25,509
put into the token which is clearly

465
00:15:25,509 --> 00:15:27,669
wrong and that was the problem there's

466
00:15:27,669 --> 00:15:29,079
another more subtle version of this

467
00:15:29,079 --> 00:15:30,669
attack where you actually put in

468
00:15:30,669 --> 00:15:32,649
asymmetric algorithm into the header

469
00:15:32,649 --> 00:15:34,569
instead and then what happens is you

470
00:15:34,569 --> 00:15:35,350
send the

471
00:15:35,350 --> 00:15:36,970
server your modified access token

472
00:15:36,970 --> 00:15:39,400
telling it that it's asymmetric signing

473
00:15:39,400 --> 00:15:42,130
algorithm it'll go then find the public

474
00:15:42,130 --> 00:15:44,200
key which it was gonna use to verify the

475
00:15:44,200 --> 00:15:46,450
asymmetric signature but it treats it as

476
00:15:46,450 --> 00:15:48,610
a shared secret instead which basically

477
00:15:48,610 --> 00:15:50,770
means you can use that same public key

478
00:15:50,770 --> 00:15:52,450
to actually create the real signature

479
00:15:52,450 --> 00:15:54,220
because if it's treated as a shared

480
00:15:54,220 --> 00:15:55,810
secret you can create a signature just

481
00:15:55,810 --> 00:15:57,550
like anybody else can with that key that

482
00:15:57,550 --> 00:15:59,140
one's a little trickier because your

483
00:15:59,140 --> 00:16:00,790
resource server will think it's actually

484
00:16:00,790 --> 00:16:02,800
validating your signature because it is

485
00:16:02,800 --> 00:16:04,840
it just happens that anybody could have

486
00:16:04,840 --> 00:16:05,950
created that signature so it's

487
00:16:05,950 --> 00:16:08,050
meaningless so what's the takeaway here

488
00:16:08,050 --> 00:16:10,540
takeaway is that that JSON web token

489
00:16:10,540 --> 00:16:12,370
header which talks about how to validate

490
00:16:12,370 --> 00:16:15,010
the token is untrusted information

491
00:16:15,010 --> 00:16:16,750
before you validate the signature and

492
00:16:16,750 --> 00:16:19,120
you have to treat it as such basically

493
00:16:19,120 --> 00:16:21,610
what that means is never actually let

494
00:16:21,610 --> 00:16:23,680
the header determine what signing

495
00:16:23,680 --> 00:16:25,510
algorithm is used instead when you go to

496
00:16:25,510 --> 00:16:26,980
validate adjacent web token you should

497
00:16:26,980 --> 00:16:28,810
only use signing methods that you know

498
00:16:28,810 --> 00:16:30,280
are safe and that you know you're

499
00:16:30,280 --> 00:16:32,170
expecting which is probably just the

500
00:16:32,170 --> 00:16:34,150
asymmetric ones thankfully most recent

501
00:16:34,150 --> 00:16:35,980
web token libraries around 2015-2016

502
00:16:35,980 --> 00:16:38,200
actually fix this by requiring you to

503
00:16:38,200 --> 00:16:40,330
tell it which signing algorithms you are

504
00:16:40,330 --> 00:16:42,100
expecting when you go to validate a

505
00:16:42,100 --> 00:16:43,720
token that way you can't be tricked into

506
00:16:43,720 --> 00:16:45,970
accepting assigning other than from the

507
00:16:45,970 --> 00:16:47,920
header itself all right let's move on to

508
00:16:47,920 --> 00:16:50,620
one of the more subtle ones this is what

509
00:16:50,620 --> 00:16:52,360
I like to call an OAuth phishing attack

510
00:16:52,360 --> 00:16:54,370
so in 2017 there was this attack on

511
00:16:54,370 --> 00:16:56,290
Google's ooofff which resulted in

512
00:16:56,290 --> 00:16:58,330
headlines like this it had various names

513
00:16:58,330 --> 00:17:00,580
like an OAuth worm or a phishing attack

514
00:17:00,580 --> 00:17:02,770
but let's take a look at how it worked

515
00:17:02,770 --> 00:17:04,240
first of all do you see anything wrong

516
00:17:04,240 --> 00:17:06,010
with this picture I'll give you a second

517
00:17:06,010 --> 00:17:07,900
to look closely you might notice that we

518
00:17:07,900 --> 00:17:09,849
are really on the real Google OAuth

519
00:17:09,849 --> 00:17:12,040
server it's accounts.google.com there's

520
00:17:12,040 --> 00:17:14,380
a secure lock icon in the address bar so

521
00:17:14,380 --> 00:17:15,670
we know this is actually a page served

522
00:17:15,670 --> 00:17:17,829
by Google this is not a fake page but

523
00:17:17,829 --> 00:17:19,599
it's a little bit suspicious that Google

524
00:17:19,599 --> 00:17:22,480
Docs is requesting access to my contacts

525
00:17:22,480 --> 00:17:23,920
for example one

526
00:17:23,920 --> 00:17:25,869
why doesn't he access to my contacts but

527
00:17:25,869 --> 00:17:28,240
also why does it need permission because

528
00:17:28,240 --> 00:17:31,180
it's Google and theoretically Google

529
00:17:31,180 --> 00:17:32,830
already has access to everything inside

530
00:17:32,830 --> 00:17:34,300
right but how about if I click this

531
00:17:34,300 --> 00:17:36,340
little arrow next to Google Docs and

532
00:17:36,340 --> 00:17:38,200
then I seen the application developer

533
00:17:38,200 --> 00:17:40,420
who built it and also the URL I'm going

534
00:17:40,420 --> 00:17:42,330
to be sent you when I authorize this app

535
00:17:42,330 --> 00:17:45,640
what is Doc's cloud on info well I can

536
00:17:45,640 --> 00:17:47,020
be pretty sure it's not actually Google

537
00:17:47,020 --> 00:17:48,640
whatever that is it looks

538
00:17:48,640 --> 00:17:50,800
vicious now if anybody clicked that it

539
00:17:50,800 --> 00:17:52,300
we pretty obvious that this link is

540
00:17:52,300 --> 00:17:54,100
wrong at this point the problem is that

541
00:17:54,100 --> 00:17:56,830
it's too easy to skip past this and not

542
00:17:56,830 --> 00:17:59,140
actually click that so in OAuth in order

543
00:17:59,140 --> 00:18:01,090
to start a flow you just need to create

544
00:18:01,090 --> 00:18:02,830
a URL and get someone to click on it

545
00:18:02,830 --> 00:18:04,180
typically that's the link that says

546
00:18:04,180 --> 00:18:06,010
login but you could actually deliver

547
00:18:06,010 --> 00:18:07,990
that link any way you can think of you

548
00:18:07,990 --> 00:18:10,090
could send it in a bitly link over SMS

549
00:18:10,090 --> 00:18:12,640
you could put it in an email for example

550
00:18:12,640 --> 00:18:14,110
and get someone to click on it and

551
00:18:14,110 --> 00:18:16,240
because anybody can make this link you

552
00:18:16,240 --> 00:18:17,920
can transmit it to anybody and start an

553
00:18:17,920 --> 00:18:19,840
OAuth flow when they click it so the way

554
00:18:19,840 --> 00:18:22,480
to spread was that the attacker just got

555
00:18:22,480 --> 00:18:24,700
one person to click on this link and as

556
00:18:24,700 --> 00:18:27,070
soon as one person did it granted this

557
00:18:27,070 --> 00:18:29,290
application access to that person's

558
00:18:29,290 --> 00:18:31,330
address book and the ability to send

559
00:18:31,330 --> 00:18:34,360
email from their account and then this

560
00:18:34,360 --> 00:18:37,000
worm can go and use the Google API is to

561
00:18:37,000 --> 00:18:39,580
actually send an email to everybody in

562
00:18:39,580 --> 00:18:41,980
their address book and now that email is

563
00:18:41,980 --> 00:18:44,500
not actually a fake email it's not spam

564
00:18:44,500 --> 00:18:46,120
it's coming from a real Google account

565
00:18:46,120 --> 00:18:48,130
going to a real Google account and that

566
00:18:48,130 --> 00:18:49,600
was probably why this was so convincing

567
00:18:49,600 --> 00:18:51,490
because Google's spam filters couldn't

568
00:18:51,490 --> 00:18:52,600
flag it because it looked like

569
00:18:52,600 --> 00:18:54,280
legitimate email at first and what's the

570
00:18:54,280 --> 00:18:56,470
contents of that email it's this message

571
00:18:56,470 --> 00:18:58,750
that says so-and-so shared a file with

572
00:18:58,750 --> 00:19:00,250
you click here to view it in Google Docs

573
00:19:00,250 --> 00:19:02,110
now if you got this email it's going to

574
00:19:02,110 --> 00:19:03,730
be from somebody in your address book

575
00:19:03,730 --> 00:19:05,530
and it's actually a real email - not

576
00:19:05,530 --> 00:19:07,840
from a fake address it's from them so

577
00:19:07,840 --> 00:19:09,370
then you go and you click the open and

578
00:19:09,370 --> 00:19:11,380
Doc's button and you get taken through

579
00:19:11,380 --> 00:19:12,820
Google you're not even taken to a

580
00:19:12,820 --> 00:19:14,860
phishing site you're taken to the actual

581
00:19:14,860 --> 00:19:17,170
Google page where you're then prompted

582
00:19:17,170 --> 00:19:19,210
with this and then and because you're

583
00:19:19,210 --> 00:19:20,470
already thinking about Google Docs

584
00:19:20,470 --> 00:19:21,940
you're more likely to just click through

585
00:19:21,940 --> 00:19:24,010
right here and not even think too much

586
00:19:24,010 --> 00:19:26,170
about it and as soon as you do now the

587
00:19:26,170 --> 00:19:27,610
attacker has an access token to your

588
00:19:27,610 --> 00:19:29,200
account and can repeat the process and

589
00:19:29,200 --> 00:19:31,420
that's how it spiraled out of control so

590
00:19:31,420 --> 00:19:34,630
within about 40 minutes of this starting

591
00:19:34,630 --> 00:19:36,850
it had spread so far that Google

592
00:19:36,850 --> 00:19:38,410
actually had to tweet this out and be

593
00:19:38,410 --> 00:19:40,900
like hey we're investigating this don't

594
00:19:40,900 --> 00:19:43,120
click on that link we're looking into it

595
00:19:43,120 --> 00:19:45,160
meanwhile on reddit where this had been

596
00:19:45,160 --> 00:19:46,900
reported there were Google engineer

597
00:19:46,900 --> 00:19:48,370
that's chiming in being like okay we're

598
00:19:48,370 --> 00:19:50,200
looking at it oh we found out what's

599
00:19:50,200 --> 00:19:52,810
going on and we disabled the app and at

600
00:19:52,810 --> 00:19:54,430
that point the next time anybody clicked

601
00:19:54,430 --> 00:19:56,140
that link they just saw this error page

602
00:19:56,140 --> 00:19:57,550
because what they did was they just

603
00:19:57,550 --> 00:19:59,560
disabled the client ID but if you think

604
00:19:59,560 --> 00:20:01,210
about it that didn't actually solve the

605
00:20:01,210 --> 00:20:02,080
problem that just

606
00:20:02,080 --> 00:20:03,940
that particular instance because the

607
00:20:03,940 --> 00:20:05,769
problem is actually a lot deeper the

608
00:20:05,769 --> 00:20:07,960
problem is that it's a phishing attack

609
00:20:07,960 --> 00:20:10,059
and phishing attacks often don't have a

610
00:20:10,059 --> 00:20:12,309
technical solution because it's all

611
00:20:12,309 --> 00:20:14,409
about teaching users what to expect and

612
00:20:14,409 --> 00:20:16,539
not to sort of blindly trust things and

613
00:20:16,539 --> 00:20:18,130
a lot of the reasons that worked was

614
00:20:18,130 --> 00:20:20,140
because that screen that asked for the

615
00:20:20,140 --> 00:20:21,640
users permission was so convincing

616
00:20:21,640 --> 00:20:23,620
because it was Google's screen and they

617
00:20:23,620 --> 00:20:24,820
didn't do a good enough job of

618
00:20:24,820 --> 00:20:26,919
preventing people from impersonating

619
00:20:26,919 --> 00:20:29,529
Google Apps so how could they have

620
00:20:29,529 --> 00:20:31,059
stopped this well for one they can make

621
00:20:31,059 --> 00:20:32,380
sure the developers can't go and name

622
00:20:32,380 --> 00:20:34,630
applications with the word Google on

623
00:20:34,630 --> 00:20:36,789
them because really only Google should

624
00:20:36,789 --> 00:20:38,620
be able to do that but they went a few

625
00:20:38,620 --> 00:20:40,539
steps farther and this is now having

626
00:20:40,539 --> 00:20:42,370
ripple effects throughout a whole bunch

627
00:20:42,370 --> 00:20:43,659
of related products

628
00:20:43,659 --> 00:20:45,760
shortly after this attack they launched

629
00:20:45,760 --> 00:20:48,399
some pretty big changes to their API

630
00:20:48,399 --> 00:20:50,590
policies one they actually now require

631
00:20:50,590 --> 00:20:52,840
that applications request only the bare

632
00:20:52,840 --> 00:20:53,919
minimum permissions they need to

633
00:20:53,919 --> 00:20:55,750
function instead of requesting a broad

634
00:20:55,750 --> 00:20:57,340
range of permissions they also now

635
00:20:57,340 --> 00:20:58,899
recommend requesting permissions in

636
00:20:58,899 --> 00:21:01,750
context so instead of clicking a link to

637
00:21:01,750 --> 00:21:03,100
log in to an app and having it request

638
00:21:03,100 --> 00:21:05,769
everything all once you first just log

639
00:21:05,769 --> 00:21:07,450
in and then when it needs to go send an

640
00:21:07,450 --> 00:21:09,070
email for you it will then request that

641
00:21:09,070 --> 00:21:11,440
permission we also call that incremental

642
00:21:11,440 --> 00:21:13,389
authorization one of the other things

643
00:21:13,389 --> 00:21:14,620
they did was they actually called out a

644
00:21:14,620 --> 00:21:17,200
few specific scopes as restricted scopes

645
00:21:17,200 --> 00:21:20,080
and those are things like sending email

646
00:21:20,080 --> 00:21:22,269
from a user's account or accessing files

647
00:21:22,269 --> 00:21:24,340
in their Google Drive and for those

648
00:21:24,340 --> 00:21:26,260
restricted scopes if your application

649
00:21:26,260 --> 00:21:28,210
needs them your application actually has

650
00:21:28,210 --> 00:21:29,580
to go through a security assessment

651
00:21:29,580 --> 00:21:33,730
which is a manual review process and in

652
00:21:33,730 --> 00:21:35,320
their documentation they actually say

653
00:21:35,320 --> 00:21:37,480
that this process might cost anywhere

654
00:21:37,480 --> 00:21:38,860
between fifteen thousand and seventy

655
00:21:38,860 --> 00:21:40,690
five thousand dollars so basically what

656
00:21:40,690 --> 00:21:42,340
this did was a whole bunch of these

657
00:21:42,340 --> 00:21:44,440
smaller services that use Gmail for like

658
00:21:44,440 --> 00:21:46,269
email marketing automation they all just

659
00:21:46,269 --> 00:21:47,679
suddenly have a shutdown because they

660
00:21:47,679 --> 00:21:50,260
couldn't afford that kind of fee so

661
00:21:50,260 --> 00:21:52,179
that's not my favorite solution to this

662
00:21:52,179 --> 00:21:53,889
problem because the fields have been

663
00:21:53,889 --> 00:21:55,659
heavy-handed and I recognize that it's

664
00:21:55,659 --> 00:21:57,100
really a design problem which is very

665
00:21:57,100 --> 00:21:58,690
hard to solve but we can look at some

666
00:21:58,690 --> 00:21:59,980
other companies to see how they've

667
00:21:59,980 --> 00:22:02,019
handled a similar problem this is github

668
00:22:02,019 --> 00:22:03,940
authorization screen and if you notice

669
00:22:03,940 --> 00:22:05,350
on this one it looks very different from

670
00:22:05,350 --> 00:22:07,450
Google but down at the bottom next to

671
00:22:07,450 --> 00:22:09,460
that green authorize button it actually

672
00:22:09,460 --> 00:22:11,020
shows the website that you'll be taken

673
00:22:11,020 --> 00:22:12,940
to when you click it and that's super

674
00:22:12,940 --> 00:22:14,740
helpful because then as a user you might

675
00:22:14,740 --> 00:22:15,260
recognize

676
00:22:15,260 --> 00:22:17,210
oh well this clearly isn't the real

677
00:22:17,210 --> 00:22:18,470
application I thought it was going to

678
00:22:18,470 --> 00:22:19,580
because I don't recognize this web

679
00:22:19,580 --> 00:22:21,560
address so really this problem is all

680
00:22:21,560 --> 00:22:23,330
about just making sure users are well

681
00:22:23,330 --> 00:22:24,920
informed when they're granting

682
00:22:24,920 --> 00:22:26,570
permissions to other applications to

683
00:22:26,570 --> 00:22:28,910
access their account overall so it's a

684
00:22:28,910 --> 00:22:30,860
hard problem and there are several

685
00:22:30,860 --> 00:22:32,540
different kinds of solutions as you can

686
00:22:32,540 --> 00:22:34,610
see some more heavy-handed than others

687
00:22:34,610 --> 00:22:36,320
all right the last one I want to talk

688
00:22:36,320 --> 00:22:38,540
about is Facebook this made major

689
00:22:38,540 --> 00:22:41,510
headlines in 2018 50 million accounts

690
00:22:41,510 --> 00:22:43,190
were hacked now normally when there's

691
00:22:43,190 --> 00:22:45,020
like a large-scale hack like this it's

692
00:22:45,020 --> 00:22:46,670
actually something pretty silly like

693
00:22:46,670 --> 00:22:48,230
it's somebody left the database publicly

694
00:22:48,230 --> 00:22:50,330
exposed to the Internet or someone just

695
00:22:50,330 --> 00:22:53,060
stole a password dump and then try it on

696
00:22:53,060 --> 00:22:54,830
some other service but this one caught

697
00:22:54,830 --> 00:22:57,110
my eye because normally companies will

698
00:22:57,110 --> 00:23:00,110
just sort of write a high-level apology

699
00:23:00,110 --> 00:23:02,030
email and send that out via the press

700
00:23:02,030 --> 00:23:03,860
releases but this was actually so

701
00:23:03,860 --> 00:23:05,960
serious the Facebook put out a lot of

702
00:23:05,960 --> 00:23:07,580
information about exactly what went

703
00:23:07,580 --> 00:23:09,530
wrong here so on their security blog

704
00:23:09,530 --> 00:23:11,270
they actually have a lot of details that

705
00:23:11,270 --> 00:23:12,620
we can look into to try to learn

706
00:23:12,620 --> 00:23:14,420
something from this so from their own

707
00:23:14,420 --> 00:23:16,580
post this was a phrase that the VP of

708
00:23:16,580 --> 00:23:18,680
Product used to describes the attack the

709
00:23:18,680 --> 00:23:20,390
vulnerability was the result of the

710
00:23:20,390 --> 00:23:22,640
interaction of three distinct bugs and

711
00:23:22,640 --> 00:23:24,860
this is also very interesting because it

712
00:23:24,860 --> 00:23:27,050
wasn't just one problem and when we look

713
00:23:27,050 --> 00:23:28,760
at these three bugs you'll see that

714
00:23:28,760 --> 00:23:30,530
individually each of these doesn't

715
00:23:30,530 --> 00:23:32,840
actually seem that bad and seems like it

716
00:23:32,840 --> 00:23:34,610
couldn't cause something at this scale

717
00:23:34,610 --> 00:23:36,470
it's only once you stack them up it

718
00:23:36,470 --> 00:23:38,210
becomes the problem so let's dig in and

719
00:23:38,210 --> 00:23:39,890
that was really useful for being able to

720
00:23:39,890 --> 00:23:41,540
test out your privacy settings you can

721
00:23:41,540 --> 00:23:42,980
make sure that this one post you made

722
00:23:42,980 --> 00:23:44,750
was hidden to these particular people

723
00:23:44,750 --> 00:23:46,730
and confirm it by checking out what your

724
00:23:46,730 --> 00:23:48,260
page looked like to them so that's where

725
00:23:48,260 --> 00:23:49,850
this all starts so here's the text from

726
00:23:49,850 --> 00:23:51,650
their statement first new as is a

727
00:23:51,650 --> 00:23:53,420
privacy feature that lets you see what

728
00:23:53,420 --> 00:23:55,130
your page looks like somebody else this

729
00:23:55,130 --> 00:23:56,960
is supposed to be a view only interface

730
00:23:56,960 --> 00:23:59,210
however for one type of composer the

731
00:23:59,210 --> 00:24:00,740
little box lets you post into your

732
00:24:00,740 --> 00:24:02,900
profile the one that lets you wish

733
00:24:02,900 --> 00:24:04,930
friends a happy birthday the view as

734
00:24:04,930 --> 00:24:07,160
incorrectly offered the ability to post

735
00:24:07,160 --> 00:24:09,950
a video but again bites off whatever

736
00:24:09,950 --> 00:24:11,480
right that's not a big deal worst you

737
00:24:11,480 --> 00:24:13,070
can do is like upload a video to your

738
00:24:13,070 --> 00:24:14,900
own wall okay so hold that one in your

739
00:24:14,900 --> 00:24:16,580
head for a second now second they

740
00:24:16,580 --> 00:24:18,230
launched a new version of its video

741
00:24:18,230 --> 00:24:20,090
uploader and that version had a bug

742
00:24:20,090 --> 00:24:22,520
where it generated an access token that

743
00:24:22,520 --> 00:24:23,900
had the permissions of the Facebook

744
00:24:23,900 --> 00:24:25,880
mobile app now this is starting to sound

745
00:24:25,880 --> 00:24:28,070
a little bit suspicious because what do

746
00:24:28,070 --> 00:24:28,999
you mean a generator

747
00:24:28,999 --> 00:24:30,799
an access token that sounds to me like

748
00:24:30,799 --> 00:24:32,779
they're letting one part of their system

749
00:24:32,779 --> 00:24:35,539
just sort of assert things on behalf of

750
00:24:35,539 --> 00:24:36,769
some other part of the application

751
00:24:36,769 --> 00:24:38,689
without actually checking it but again

752
00:24:38,689 --> 00:24:40,359
by itself this wouldn't be so bad

753
00:24:40,359 --> 00:24:43,069
because all that really could happen was

754
00:24:43,069 --> 00:24:45,049
that you could use that access token to

755
00:24:45,049 --> 00:24:46,489
post to your own account or read your

756
00:24:46,489 --> 00:24:48,829
own data okay so hold that one in your

757
00:24:48,829 --> 00:24:49,189
head

758
00:24:49,189 --> 00:24:51,529
third when the video uploader appeared

759
00:24:51,529 --> 00:24:53,539
as part of the view as it generated an

760
00:24:53,539 --> 00:24:56,119
access token not for you the viewer but

761
00:24:56,119 --> 00:24:58,039
instead for the profile you were viewing

762
00:24:58,039 --> 00:25:00,889
now this is bad this is clearly bad

763
00:25:00,889 --> 00:25:02,989
because now I'm able to get an access

764
00:25:02,989 --> 00:25:05,629
token for somebody else's account but

765
00:25:05,629 --> 00:25:08,839
again if it were only this it wouldn't

766
00:25:08,839 --> 00:25:10,939
have been that bad because the view as

767
00:25:10,939 --> 00:25:12,699
was supposed to be a read-only interface

768
00:25:12,699 --> 00:25:14,479
so I would have ended up with a

769
00:25:14,479 --> 00:25:16,129
read-only access token to their account

770
00:25:16,129 --> 00:25:18,469
but when you stack these if you use the

771
00:25:18,469 --> 00:25:20,149
view as feature that somebody else's

772
00:25:20,149 --> 00:25:22,129
page you end up with an access token

773
00:25:22,129 --> 00:25:24,079
belonging to that user that had the

774
00:25:24,079 --> 00:25:25,819
permissions of the Facebook mobile app

775
00:25:25,819 --> 00:25:27,799
which basically means it can do

776
00:25:27,799 --> 00:25:29,509
everything and that's why I started

777
00:25:29,509 --> 00:25:31,699
cascading out of control so what's the

778
00:25:31,699 --> 00:25:33,469
moral of the story here this is again a

779
00:25:33,469 --> 00:25:35,029
pretty tricky one because again each of

780
00:25:35,029 --> 00:25:37,159
these bugs did not seem that bad on

781
00:25:37,159 --> 00:25:39,229
their own but I think the thing that

782
00:25:39,229 --> 00:25:40,789
kind of ties it all together is that

783
00:25:40,789 --> 00:25:42,679
it's really important to keep clean

784
00:25:42,679 --> 00:25:44,329
security boundaries between these

785
00:25:44,329 --> 00:25:45,589
different parts of your application

786
00:25:45,589 --> 00:25:47,299
don't let Park with your application

787
00:25:47,299 --> 00:25:49,189
pretend to be other parts or pretend to

788
00:25:49,189 --> 00:25:51,409
be users we have the OE framework for a

789
00:25:51,409 --> 00:25:53,779
reason and that's what lets us make sure

790
00:25:53,779 --> 00:25:55,909
that the user was involved when issuing

791
00:25:55,909 --> 00:25:58,189
an access token for that user and that

792
00:25:58,189 --> 00:25:59,779
is all I have for you today I hope you

793
00:25:59,779 --> 00:26:01,369
enjoyed this please feel free to get in

794
00:26:01,369 --> 00:26:03,229
touch with me on Twitter or via my

795
00:26:03,229 --> 00:26:04,819
website if you have more questions or

796
00:26:04,819 --> 00:26:06,319
would like to chat more about this you

797
00:26:06,319 --> 00:26:07,909
can get a copy of my book at OSU

798
00:26:07,909 --> 00:26:09,949
simplified calm the book goes into a lot

799
00:26:09,949 --> 00:26:11,599
more detail on all different things you

800
00:26:11,599 --> 00:26:13,189
need to know about building co-author

801
00:26:13,189 --> 00:26:15,379
applications and servers I also have cat

802
00:26:15,379 --> 00:26:17,029
stickers available on that website as

803
00:26:17,029 --> 00:26:20,130
well thank you so much

804
00:26:20,130 --> 00:26:25,980
all right thank you all very much any

805
00:26:25,980 --> 00:26:29,310
more questions to answer here yes so

806
00:26:29,310 --> 00:26:31,410
first of all and we got a lot of

807
00:26:31,410 --> 00:26:34,230
discussion about the examples you

808
00:26:34,230 --> 00:26:36,180
provided which people were very enamored

809
00:26:36,180 --> 00:26:38,760
by those examples the first question was

810
00:26:38,760 --> 00:26:40,320
was did you have permission to talk

811
00:26:40,320 --> 00:26:43,650
about each one of those cases oh this is

812
00:26:43,650 --> 00:26:45,780
all based on public information that I I

813
00:26:45,780 --> 00:26:48,330
was not involved in any of these myself

814
00:26:48,330 --> 00:26:50,580
these were not things that I was I was

815
00:26:50,580 --> 00:26:52,170
not working on at the companies where

816
00:26:52,170 --> 00:26:54,030
these were involved so this is based on

817
00:26:54,030 --> 00:26:56,220
my own either speculation based on

818
00:26:56,220 --> 00:26:58,410
public information or just understanding

819
00:26:58,410 --> 00:27:00,390
of the OAuth framework so let's talk

820
00:27:00,390 --> 00:27:01,860
about the Google one for just a second

821
00:27:01,860 --> 00:27:04,380
if it has a Google Docs user or as a

822
00:27:04,380 --> 00:27:07,530
Google Apps for domain user you actually

823
00:27:07,530 --> 00:27:09,480
interact with that dialog several times

824
00:27:09,480 --> 00:27:11,100
a day if somebody sends that you would

825
00:27:11,100 --> 00:27:13,560
document outside your domain you may

826
00:27:13,560 --> 00:27:15,360
very well that may that screen may very

827
00:27:15,360 --> 00:27:17,370
well pop up would Google have been able

828
00:27:17,370 --> 00:27:20,850
to use the github strategy somehow to

829
00:27:20,850 --> 00:27:23,250
have mitigated the users being used to

830
00:27:23,250 --> 00:27:24,600
clicking through and approving that

831
00:27:24,600 --> 00:27:27,300
every time what's the github strategy

832
00:27:27,300 --> 00:27:29,190
where you show where it's coming home

833
00:27:29,190 --> 00:27:31,290
and I mentioned on that context I guess

834
00:27:31,290 --> 00:27:35,010
um yeah I'm actually so I don't I I do

835
00:27:35,010 --> 00:27:38,430
use google domain at work but I haven't

836
00:27:38,430 --> 00:27:39,810
seen that maybe because I don't usually

837
00:27:39,810 --> 00:27:41,280
share files from outside of that domain

838
00:27:41,280 --> 00:27:43,380
so I'm not actually super familiar with

839
00:27:43,380 --> 00:27:45,300
what you're talking about there okay um

840
00:27:45,300 --> 00:27:49,260
but the if it's like authorizing one org

841
00:27:49,260 --> 00:27:51,270
to get data from another org is that the

842
00:27:51,270 --> 00:27:52,890
kind of thing you're talking about well

843
00:27:52,890 --> 00:27:55,050
I think it's just as a as a heavy user

844
00:27:55,050 --> 00:27:56,790
you get this screen up that pops up a

845
00:27:56,790 --> 00:27:58,410
lot where it just basically asks you and

846
00:27:58,410 --> 00:27:59,670
you know it's Google because the domain

847
00:27:59,670 --> 00:28:01,620
is correct at the top right but it just

848
00:28:01,620 --> 00:28:03,660
asks you to basically approve several

849
00:28:03,660 --> 00:28:04,650
times a day and I'm just wondering if

850
00:28:04,650 --> 00:28:06,930
there's a way to train the users not or

851
00:28:06,930 --> 00:28:08,220
when that is legitimate and when it's

852
00:28:08,220 --> 00:28:10,290
not because of that yeah that's a tough

853
00:28:10,290 --> 00:28:11,730
one especially if it's if it's multiple

854
00:28:11,730 --> 00:28:12,930
times a day and you kind of get

855
00:28:12,930 --> 00:28:15,330
overloaded with that prompt you're more

856
00:28:15,330 --> 00:28:17,190
likely to just click through without

857
00:28:17,190 --> 00:28:20,040
reading it which is a problem so I'm I'm

858
00:28:20,040 --> 00:28:21,150
curious about that I'll have to look

859
00:28:21,150 --> 00:28:23,250
into that one a really easy one is how

860
00:28:23,250 --> 00:28:24,690
do you pronounce and now I don't even

861
00:28:24,690 --> 00:28:25,800
know how to pronounce it cuz I don't

862
00:28:25,800 --> 00:28:30,120
know how to say it but that's JWT the

863
00:28:30,120 --> 00:28:33,240
official pronunciation is jot I would

864
00:28:33,240 --> 00:28:33,990
say I'll probably say

865
00:28:33,990 --> 00:28:37,410
ja or JWT 50/50 depending on I don't

866
00:28:37,410 --> 00:28:40,290
know what but job is the official friend

867
00:28:40,290 --> 00:28:41,610
well you're you're the author of the

868
00:28:41,610 --> 00:28:43,170
book so whatever you say is you know

869
00:28:43,170 --> 00:28:45,210
that's gonna be absolutely authoritative

870
00:28:45,210 --> 00:28:48,390
so and how do you build protect or air

871
00:28:48,390 --> 00:28:51,750
build protect or build a safer robust

872
00:28:51,750 --> 00:28:56,370
JWT so the main fix there is to not let

873
00:28:56,370 --> 00:28:58,770
the external that the header which is

874
00:28:58,770 --> 00:29:00,840
essentially unsanitized external data

875
00:29:00,840 --> 00:29:02,790
don't let that affect how you validate

876
00:29:02,790 --> 00:29:05,790
it so have a an own list of algorithms

877
00:29:05,790 --> 00:29:08,130
that you use have an own list of keys

878
00:29:08,130 --> 00:29:10,080
that you know how to go find without

879
00:29:10,080 --> 00:29:12,480
having to look at the token before you

880
00:29:12,480 --> 00:29:14,010
go and do the validation and if you're

881
00:29:14,010 --> 00:29:16,110
doing that then you're you're safe

882
00:29:16,110 --> 00:29:20,100
there's also a new spec JSON web token

883
00:29:20,100 --> 00:29:22,440
best practices which documents a lot of

884
00:29:22,440 --> 00:29:23,940
that kind of things and more so

885
00:29:23,940 --> 00:29:25,770
definitely look that up oh that's great

886
00:29:25,770 --> 00:29:27,450
so and then the final question is is

887
00:29:27,450 --> 00:29:29,100
given the jeaious libraries have the

888
00:29:29,100 --> 00:29:31,440
fixed JWT issues are they still

889
00:29:31,440 --> 00:29:33,300
recommended as the kind of token to use

890
00:29:33,300 --> 00:29:36,200
or is there another perhaps safer kind

891
00:29:36,200 --> 00:29:38,970
this is kind of uh this is kind of a

892
00:29:38,970 --> 00:29:41,010
controversial one right now so jason web

893
00:29:41,010 --> 00:29:43,140
token was originally it was made for

894
00:29:43,140 --> 00:29:44,880
open to connect and it's being used in a

895
00:29:44,880 --> 00:29:46,590
whole host of things now even sometimes

896
00:29:46,590 --> 00:29:47,940
out of the web space like that it's

897
00:29:47,940 --> 00:29:48,840
actually being used in telephone

898
00:29:48,840 --> 00:29:52,320
networks now it is also used very often

899
00:29:52,320 --> 00:29:54,330
as though OAuth access tokens like I

900
00:29:54,330 --> 00:29:57,900
mentioned an example and there's a new

901
00:29:57,900 --> 00:29:59,820
spec coming out very soon which talks

902
00:29:59,820 --> 00:30:02,040
about best practices for using JSON web

903
00:30:02,040 --> 00:30:04,800
tokens as access tokens now if you're

904
00:30:04,800 --> 00:30:06,179
following all that correctly and doing

905
00:30:06,179 --> 00:30:08,340
everything right and you know as

906
00:30:08,340 --> 00:30:10,920
documented you're probably fine there

907
00:30:10,920 --> 00:30:13,320
are however some other token formats

908
00:30:13,320 --> 00:30:16,770
that might be like easier to not mess up

909
00:30:16,770 --> 00:30:19,050
is what I would say because like if

910
00:30:19,050 --> 00:30:20,730
you're doing JSON web tokens correctly

911
00:30:20,730 --> 00:30:22,890
they're fine but there are those kinds

912
00:30:22,890 --> 00:30:24,540
of things that can mess you up and and

913
00:30:24,540 --> 00:30:26,190
make these huge problems so there are

914
00:30:26,190 --> 00:30:28,290
other token formats you could use that

915
00:30:28,290 --> 00:30:30,840
are maybe less easy to mess up there's

916
00:30:30,840 --> 00:30:32,910
also options of using of making access

917
00:30:32,910 --> 00:30:34,890
tokens that are not structured tokens at

918
00:30:34,890 --> 00:30:36,240
all just random strings at you store in

919
00:30:36,240 --> 00:30:37,650
database which is also a fine option

920
00:30:37,650 --> 00:30:39,750
there's different trade-offs but yeah

921
00:30:39,750 --> 00:30:41,730
well thank you very very much that we

922
00:30:41,730 --> 00:30:43,200
had a lot of folks asked about videos

923
00:30:43,200 --> 00:30:45,059
being available there these week talks

924
00:30:45,059 --> 00:30:47,010
are being recorded we really do

925
00:30:47,010 --> 00:30:48,000
appreciate

926
00:30:48,000 --> 00:30:50,160
joining us today and it was a fantastic

927
00:30:50,160 --> 00:30:53,930
talk all right thank you so much

