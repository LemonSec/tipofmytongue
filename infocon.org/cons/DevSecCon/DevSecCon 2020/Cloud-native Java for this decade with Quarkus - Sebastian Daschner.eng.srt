1
00:00:00,399 --> 00:00:01,920
yeah awesome welcome fashion how are you

2
00:00:01,920 --> 00:00:03,439
doing hello

3
00:00:03,439 --> 00:00:05,359
pretty good okay so you and i know each

4
00:00:05,359 --> 00:00:06,480
other from the conference scene we

5
00:00:06,480 --> 00:00:08,080
promised you that many times along the

6
00:00:08,080 --> 00:00:09,599
way don't we so i won't take up too much

7
00:00:09,599 --> 00:00:11,920
of your time

8
00:00:12,160 --> 00:00:13,679
i won't take up too much of your time

9
00:00:13,679 --> 00:00:14,960
and if i just if you wouldn't mind

10
00:00:14,960 --> 00:00:16,880
sharing your screens bashing we'll just

11
00:00:16,880 --> 00:00:19,840
absolutely find that it's roughly 25

12
00:00:19,840 --> 00:00:21,439
minutes for the talk and then i'll keep

13
00:00:21,439 --> 00:00:22,960
a lookout for questions too folks you've

14
00:00:22,960 --> 00:00:24,080
got questions

15
00:00:24,080 --> 00:00:25,760
jump along the slack and pop your

16
00:00:25,760 --> 00:00:27,119
questions in there i'll queue them up

17
00:00:27,119 --> 00:00:28,240
for sebastian at the end

18
00:00:28,240 --> 00:00:29,439
i'll give you a five minute warning

19
00:00:29,439 --> 00:00:33,199
session you can ignore me feel free to

20
00:00:33,440 --> 00:00:35,600
let me just share your screen screen

21
00:00:35,600 --> 00:00:36,559
right now

22
00:00:36,559 --> 00:00:38,640
perfect looks good i'll disappear off

23
00:00:38,640 --> 00:00:41,120
special away to you thank you very much

24
00:00:41,120 --> 00:00:43,280
awesome yeah thanks a lot and welcome as

25
00:00:43,280 --> 00:00:45,280
well from my side for the session on

26
00:00:45,280 --> 00:00:48,079
cloud native java for this decade with

27
00:00:48,079 --> 00:00:48,960
quarkus

28
00:00:48,960 --> 00:00:51,760
and what that corklist is about so um

29
00:00:51,760 --> 00:00:53,520
yeah i want to jump right in because we

30
00:00:53,520 --> 00:00:55,199
don't have too much time so

31
00:00:55,199 --> 00:00:56,719
my name is sebastian i do some stuff

32
00:00:56,719 --> 00:00:58,719
with java and i want to

33
00:00:58,719 --> 00:01:01,760
introduce some corkus

34
00:01:01,760 --> 00:01:04,319
for you and we have a little bit of live

35
00:01:04,319 --> 00:01:06,159
code actually or mostly live code

36
00:01:06,159 --> 00:01:07,680
and a little bit of talking let's put it

37
00:01:07,680 --> 00:01:10,560
that way and why that is the modern way

38
00:01:10,560 --> 00:01:11,600
how to build

39
00:01:11,600 --> 00:01:14,479
a cloud native java for the cloud for

40
00:01:14,479 --> 00:01:15,600
containerized

41
00:01:15,600 --> 00:01:18,080
workloads so it's called a supersonic

42
00:01:18,080 --> 00:01:19,360
subatomic java

43
00:01:19,360 --> 00:01:21,600
and there's a few things to it

44
00:01:21,600 --> 00:01:22,560
especially there is

45
00:01:22,560 --> 00:01:25,119
some build time optimization going on

46
00:01:25,119 --> 00:01:26,159
which really really

47
00:01:26,159 --> 00:01:29,119
makes sense in terms of how to build

48
00:01:29,119 --> 00:01:30,159
applications but

49
00:01:30,159 --> 00:01:32,240
actually i mostly want to show you some

50
00:01:32,240 --> 00:01:35,200
code so i have a project that is called

51
00:01:35,200 --> 00:01:37,759
a coffee shop project here because i

52
00:01:37,759 --> 00:01:39,520
like coffee

53
00:01:39,520 --> 00:01:42,200
and that is using quark as in version

54
00:01:42,200 --> 00:01:44,880
1.3.2 i think that just has been out

55
00:01:44,880 --> 00:01:47,439
now and just because i'm brave enough i

56
00:01:47,439 --> 00:01:49,119
use java 14.

57
00:01:49,119 --> 00:01:51,360
so you should all upgrade that's the

58
00:01:51,360 --> 00:01:52,399
latest version

59
00:01:52,399 --> 00:01:54,640
uh until a few months from now so we're

60
00:01:54,640 --> 00:01:56,399
moving really really quickly

61
00:01:56,399 --> 00:01:59,439
and in this project i just want to show

62
00:01:59,439 --> 00:01:59,759
you

63
00:01:59,759 --> 00:02:02,000
some things that you might be familiar

64
00:02:02,000 --> 00:02:03,439
with if you uh know

65
00:02:03,439 --> 00:02:06,320
enterprise java from the past and that

66
00:02:06,320 --> 00:02:07,439
is actually one of the

67
00:02:07,439 --> 00:02:09,919
um interesting takeaways of corkus that

68
00:02:09,919 --> 00:02:12,239
we can use a lot of known apis

69
00:02:12,239 --> 00:02:15,599
it does not reinvent the wheel all over

70
00:02:15,599 --> 00:02:16,239
again

71
00:02:16,239 --> 00:02:19,360
but it just has some pragmatic

72
00:02:19,360 --> 00:02:22,239
extensions or additions if you want that

73
00:02:22,239 --> 00:02:24,000
really makes sense so for example what i

74
00:02:24,000 --> 00:02:25,200
want to start with

75
00:02:25,200 --> 00:02:28,239
uh is an http resource

76
00:02:28,239 --> 00:02:30,160
so we have some you know rest going on

77
00:02:30,160 --> 00:02:32,480
with some coffee orders

78
00:02:32,480 --> 00:02:34,319
i didn't want to live code all of that

79
00:02:34,319 --> 00:02:36,239
just because to get into the

80
00:02:36,239 --> 00:02:39,120
interesting details and uh what that is

81
00:02:39,120 --> 00:02:39,599
it isn't

82
00:02:39,599 --> 00:02:41,440
a resource here where we can just you

83
00:02:41,440 --> 00:02:44,080
know read create read update delete some

84
00:02:44,080 --> 00:02:46,640
some coffee orders here and it already

85
00:02:46,640 --> 00:02:47,599
um includes

86
00:02:47,599 --> 00:02:50,000
some some stuff here so let me just like

87
00:02:50,000 --> 00:02:50,959
run this

88
00:02:50,959 --> 00:02:53,519
we could build this application i use

89
00:02:53,519 --> 00:02:54,160
maiden

90
00:02:54,160 --> 00:02:56,160
using maven package and we will see it

91
00:02:56,160 --> 00:02:57,200
builds uh

92
00:02:57,200 --> 00:02:59,440
fairly quickly i say fairly because it

93
00:02:59,440 --> 00:03:02,080
does much much more than just compiling

94
00:03:02,080 --> 00:03:04,239
it has a quarkus plug-in and it says

95
00:03:04,239 --> 00:03:05,920
builds and it does

96
00:03:05,920 --> 00:03:08,640
um some optimization that basically does

97
00:03:08,640 --> 00:03:10,159
some what is called tree shaking for

98
00:03:10,159 --> 00:03:12,000
your application to only include the

99
00:03:12,000 --> 00:03:12,879
stuff

100
00:03:12,879 --> 00:03:15,680
that you need when you run so this is

101
00:03:15,680 --> 00:03:17,840
already um

102
00:03:17,840 --> 00:03:19,280
quite interesting but actually what i

103
00:03:19,280 --> 00:03:20,959
want to show you just because it's

104
00:03:20,959 --> 00:03:22,000
faster

105
00:03:22,000 --> 00:03:24,560
um is this corgis development mode quark

106
00:03:24,560 --> 00:03:25,680
is call on def

107
00:03:25,680 --> 00:03:28,000
and this is really interesting for us

108
00:03:28,000 --> 00:03:28,799
because it

109
00:03:28,799 --> 00:03:30,560
starts up our application in a mode

110
00:03:30,560 --> 00:03:32,080
where we can just

111
00:03:32,080 --> 00:03:34,159
change some code and then watch the

112
00:03:34,159 --> 00:03:35,519
changes being reflected

113
00:03:35,519 --> 00:03:37,680
in this case in a local process so what

114
00:03:37,680 --> 00:03:38,720
it does i can

115
00:03:38,720 --> 00:03:41,519
fire up localhost 8080 and now it's

116
00:03:41,519 --> 00:03:42,400
already running

117
00:03:42,400 --> 00:03:44,799
there's no resource here because my

118
00:03:44,799 --> 00:03:46,400
resource is called orders

119
00:03:46,400 --> 00:03:48,080
or actually what we can have a look at

120
00:03:48,080 --> 00:03:49,440
first is a

121
00:03:49,440 --> 00:03:52,959
health check resource that's also there

122
00:03:52,959 --> 00:03:55,200
that also uses micro profile micro

123
00:03:55,200 --> 00:03:56,799
profile health if you're familiar with

124
00:03:56,799 --> 00:03:57,200
that

125
00:03:57,200 --> 00:04:00,480
so again i used a known api

126
00:04:00,480 --> 00:04:02,720
where it doesn't reinvent the wheel i

127
00:04:02,720 --> 00:04:04,159
can quickly show you that

128
00:04:04,159 --> 00:04:07,200
so this uses just some micro profile

129
00:04:07,200 --> 00:04:07,920
code

130
00:04:07,920 --> 00:04:09,920
and again if you're familiar with that

131
00:04:09,920 --> 00:04:11,840
api you know you don't have to learn new

132
00:04:11,840 --> 00:04:13,760
stuff you just apply it

133
00:04:13,760 --> 00:04:15,519
things that are also available in other

134
00:04:15,519 --> 00:04:17,440
enterprise runtimes already

135
00:04:17,440 --> 00:04:19,279
so i think that's a pretty pretty cool

136
00:04:19,279 --> 00:04:20,880
solution to be a little bit

137
00:04:20,880 --> 00:04:23,280
pragmatic but what i want to do now is

138
00:04:23,280 --> 00:04:24,560
to get some coffee

139
00:04:24,560 --> 00:04:28,880
uh right so i can query my copy order

140
00:04:28,880 --> 00:04:30,479
let's make this bigger and as you can

141
00:04:30,479 --> 00:04:32,400
see that is an empty json array there's

142
00:04:32,400 --> 00:04:34,160
no order in the system

143
00:04:34,160 --> 00:04:36,240
so if you have a look into the resource

144
00:04:36,240 --> 00:04:37,199
what's going on

145
00:04:37,199 --> 00:04:39,520
it's basically is calling this method

146
00:04:39,520 --> 00:04:42,479
http get method in my jax or s resource

147
00:04:42,479 --> 00:04:44,320
and then it includes something that is

148
00:04:44,320 --> 00:04:46,160
called jsonp json for

149
00:04:46,160 --> 00:04:49,759
pragmatic a programmatic api

150
00:04:49,759 --> 00:04:52,000
creation and i have a json array that i

151
00:04:52,000 --> 00:04:52,880
can just

152
00:04:52,880 --> 00:04:55,759
create here using java 8 streams and

153
00:04:55,759 --> 00:04:57,360
lambdas and things like that

154
00:04:57,360 --> 00:05:00,639
just to build some coffee order

155
00:05:00,639 --> 00:05:02,639
let's also have a look into our order

156
00:05:02,639 --> 00:05:04,800
actually so that's going to be our

157
00:05:04,800 --> 00:05:06,960
main domain object what that is because

158
00:05:06,960 --> 00:05:09,759
we want to create an order in a second

159
00:05:09,759 --> 00:05:11,520
and an order contains some you know like

160
00:05:11,520 --> 00:05:13,680
identifier some type which is an enum

161
00:05:13,680 --> 00:05:15,120
you know depending on what we would like

162
00:05:15,120 --> 00:05:16,080
to order

163
00:05:16,080 --> 00:05:18,639
things like that and some status you

164
00:05:18,639 --> 00:05:20,880
know what's the status of our order

165
00:05:20,880 --> 00:05:23,360
and as you can see that is to be

166
00:05:23,360 --> 00:05:24,080
returned

167
00:05:24,080 --> 00:05:27,199
in this json p format

168
00:05:27,199 --> 00:05:30,000
but also when we want to create an order

169
00:05:30,000 --> 00:05:31,520
we can map this

170
00:05:31,520 --> 00:05:34,479
into our rest resource and here you can

171
00:05:34,479 --> 00:05:35,360
also see

172
00:05:35,360 --> 00:05:37,280
well if you're familiar with that that

173
00:05:37,280 --> 00:05:39,120
is actually beam validation also

174
00:05:39,120 --> 00:05:41,840
java standard that is included that

175
00:05:41,840 --> 00:05:43,360
works with plain jack cerres

176
00:05:43,360 --> 00:05:45,680
as always if you're familiar with that

177
00:05:45,680 --> 00:05:46,639
and this also

178
00:05:46,639 --> 00:05:49,840
uses the json b binding here where i

179
00:05:49,840 --> 00:05:50,960
already have some

180
00:05:50,960 --> 00:05:53,280
annotations that just modify how that's

181
00:05:53,280 --> 00:05:54,080
going to be

182
00:05:54,080 --> 00:05:57,440
bound to my to my java objects so that

183
00:05:57,440 --> 00:05:59,199
is just you know the nice story

184
00:05:59,199 --> 00:06:03,360
to um be able to you know code with

185
00:06:03,360 --> 00:06:06,560
with some some more ease when i just

186
00:06:06,560 --> 00:06:08,160
want to invoke this then it already

187
00:06:08,160 --> 00:06:10,400
tells me 400 bad requests why because i

188
00:06:10,400 --> 00:06:11,199
need to set

189
00:06:11,199 --> 00:06:13,280
the type so that's good news it

190
00:06:13,280 --> 00:06:14,319
integrates

191
00:06:14,319 --> 00:06:16,560
with this validation already and i of

192
00:06:16,560 --> 00:06:18,000
course need to set

193
00:06:18,000 --> 00:06:19,759
well i want to order let's say some

194
00:06:19,759 --> 00:06:22,160
espresso right and now this order

195
00:06:22,160 --> 00:06:24,880
is um in our system and i can go and hit

196
00:06:24,880 --> 00:06:25,919
that url

197
00:06:25,919 --> 00:06:28,319
and then i can um return just a single

198
00:06:28,319 --> 00:06:29,120
order that

199
00:06:29,120 --> 00:06:31,120
we saw it in the code was mapped by

200
00:06:31,120 --> 00:06:32,319
jsonp

201
00:06:32,319 --> 00:06:34,400
so i think that's uh that's already

202
00:06:34,400 --> 00:06:36,400
pretty cool to start with

203
00:06:36,400 --> 00:06:38,400
uh but now of course we want to like do

204
00:06:38,400 --> 00:06:40,639
a little bit more with it and

205
00:06:40,639 --> 00:06:44,000
change some code so what i have here i

206
00:06:44,000 --> 00:06:46,400
have that is a cdi bean application

207
00:06:46,400 --> 00:06:47,199
scope bean

208
00:06:47,199 --> 00:06:49,280
that actually just stores my coffee

209
00:06:49,280 --> 00:06:50,720
orders here in a

210
00:06:50,720 --> 00:06:53,039
concurrent hash map in memory which is

211
00:06:53,039 --> 00:06:54,639
obviously not the best idea

212
00:06:54,639 --> 00:06:56,479
if i want to have multiple applications

213
00:06:56,479 --> 00:06:58,800
in my cloud setting or if i just want to

214
00:06:58,800 --> 00:06:59,759
start and

215
00:06:59,759 --> 00:07:03,680
stop in startup again so what i want to

216
00:07:03,680 --> 00:07:05,440
include just for some live coding is a

217
00:07:05,440 --> 00:07:08,000
database and now it's already getting

218
00:07:08,000 --> 00:07:09,360
a little bit interesting if we do some

219
00:07:09,360 --> 00:07:11,280
local development like how to run you

220
00:07:11,280 --> 00:07:12,720
know like some database

221
00:07:12,720 --> 00:07:14,720
setup in the most efficient way there

222
00:07:14,720 --> 00:07:16,000
have been tons of solutions

223
00:07:16,000 --> 00:07:18,479
out there which when all of them may be

224
00:07:18,479 --> 00:07:19,759
super efficient

225
00:07:19,759 --> 00:07:22,000
and nowadays it's really it's a really

226
00:07:22,000 --> 00:07:23,599
good idea to run stuff in docker

227
00:07:23,599 --> 00:07:25,120
containers also

228
00:07:25,120 --> 00:07:27,599
when developing locally so this is what

229
00:07:27,599 --> 00:07:29,520
i'm actually mostly doing

230
00:07:29,520 --> 00:07:31,759
my app here right now is just running in

231
00:07:31,759 --> 00:07:33,440
a process started with maiden

232
00:07:33,440 --> 00:07:35,120
but actually what i want to have i want

233
00:07:35,120 --> 00:07:36,800
to just run a database

234
00:07:36,800 --> 00:07:40,080
where i have some script already so just

235
00:07:40,080 --> 00:07:42,560
stop my application again and i run a

236
00:07:42,560 --> 00:07:44,000
database that runs up

237
00:07:44,000 --> 00:07:47,440
my postgres database so assuming that is

238
00:07:47,440 --> 00:07:48,879
the database that i want to

239
00:07:48,879 --> 00:07:51,039
have for some local development that i

240
00:07:51,039 --> 00:07:54,960
could um already fill with some

241
00:07:54,960 --> 00:07:56,960
with some entries with some tables and

242
00:07:56,960 --> 00:07:58,879
so on and so forth and now actually i

243
00:07:58,879 --> 00:08:00,160
want to

244
00:08:00,160 --> 00:08:03,360
go and take my coffee order to well have

245
00:08:03,360 --> 00:08:04,639
some persistence

246
00:08:04,639 --> 00:08:05,919
and that is where it's already quite

247
00:08:05,919 --> 00:08:08,000
interesting what quark is does so if you

248
00:08:08,000 --> 00:08:09,840
have a look into the guides

249
00:08:09,840 --> 00:08:12,080
that is probably the best starting point

250
00:08:12,080 --> 00:08:14,080
to not only getting started but also if

251
00:08:14,080 --> 00:08:15,599
you're already familiar you know

252
00:08:15,599 --> 00:08:17,919
how to do things this is i think a very

253
00:08:17,919 --> 00:08:18,800
good um

254
00:08:18,800 --> 00:08:20,479
documentation how to do things and then

255
00:08:20,479 --> 00:08:21,840
you will find um

256
00:08:21,840 --> 00:08:24,479
find a guide how to do persistence and

257
00:08:24,479 --> 00:08:26,400
how to use you know jpa

258
00:08:26,400 --> 00:08:28,720
this api that you might be familiar with

259
00:08:28,720 --> 00:08:30,879
and also using a thing

260
00:08:30,879 --> 00:08:33,200
uh that is probably new to you that's

261
00:08:33,200 --> 00:08:34,640
called panache

262
00:08:34,640 --> 00:08:37,279
um like a framework that just gives you

263
00:08:37,279 --> 00:08:38,640
a little bit easier access

264
00:08:38,640 --> 00:08:40,399
a little bit similar a few ideas what

265
00:08:40,399 --> 00:08:43,039
spring data can do

266
00:08:43,039 --> 00:08:45,040
and what i want to do now i want to

267
00:08:45,040 --> 00:08:46,640
include this

268
00:08:46,640 --> 00:08:50,080
into my coffee order while you know my

269
00:08:50,080 --> 00:08:51,680
application is running

270
00:08:51,680 --> 00:08:53,360
so first of all i need to configure the

271
00:08:53,360 --> 00:08:55,480
database so i have my

272
00:08:55,480 --> 00:08:56,959
application.properties

273
00:08:56,959 --> 00:08:59,040
which is also not a standard but i think

274
00:08:59,040 --> 00:09:00,800
a very pragmatic way how to configure

275
00:09:00,800 --> 00:09:01,519
your app

276
00:09:01,519 --> 00:09:03,040
and i say well please set up a

277
00:09:03,040 --> 00:09:05,760
persistence for i call this coffee shop

278
00:09:05,760 --> 00:09:08,320
db that's going to be my database and

279
00:09:08,320 --> 00:09:10,480
now

280
00:09:10,480 --> 00:09:13,839
these are just some properties localhost

281
00:09:13,839 --> 00:09:15,600
that i can set you know the driver and

282
00:09:15,600 --> 00:09:17,040
all this access and so on

283
00:09:17,040 --> 00:09:20,080
and that is the url in my containerized

284
00:09:20,080 --> 00:09:20,720
environment

285
00:09:20,720 --> 00:09:22,880
and the same is true for kubernetes

286
00:09:22,880 --> 00:09:24,320
environment thanks to

287
00:09:24,320 --> 00:09:26,720
services and external services and all

288
00:09:26,720 --> 00:09:28,240
these things i can use

289
00:09:28,240 --> 00:09:30,720
a hostname resolution to just say oh

290
00:09:30,720 --> 00:09:32,560
just point it to coffeeshopdb

291
00:09:32,560 --> 00:09:34,640
wherever that is and then the dns

292
00:09:34,640 --> 00:09:36,480
resolution will just point it to

293
00:09:36,480 --> 00:09:39,200
the actual instance the same is true

294
00:09:39,200 --> 00:09:39,920
locally

295
00:09:39,920 --> 00:09:42,080
if you use a docker with docker networks

296
00:09:42,080 --> 00:09:43,680
or docker compose you know you can just

297
00:09:43,680 --> 00:09:45,760
use the container name or service name

298
00:09:45,760 --> 00:09:48,880
and that works really well if you want

299
00:09:48,880 --> 00:09:50,320
to have a different setup and that's

300
00:09:50,320 --> 00:09:51,440
already you know the

301
00:09:51,440 --> 00:09:54,720
harder things to con configure with the

302
00:09:54,720 --> 00:09:56,000
development mode you can

303
00:09:56,000 --> 00:09:58,720
use this what's called profile um like a

304
00:09:58,720 --> 00:10:00,800
meter or some pseudo

305
00:10:00,800 --> 00:10:03,040
setting for a local host to say okay if

306
00:10:03,040 --> 00:10:04,640
you run locally then actually i need to

307
00:10:04,640 --> 00:10:05,200
config

308
00:10:05,200 --> 00:10:06,720
i need to access my container my

309
00:10:06,720 --> 00:10:08,800
database differently with that locally

310
00:10:08,800 --> 00:10:09,680
published port

311
00:10:09,680 --> 00:10:11,519
right so this is why i run the local

312
00:10:11,519 --> 00:10:13,360
host here all right

313
00:10:13,360 --> 00:10:15,360
and then in this case now i want to add

314
00:10:15,360 --> 00:10:16,959
some persistence right

315
00:10:16,959 --> 00:10:19,360
so if we're familiar with jpa we know

316
00:10:19,360 --> 00:10:20,959
well this is probably supposed to be an

317
00:10:20,959 --> 00:10:22,640
entity and it's going to be a

318
00:10:22,640 --> 00:10:24,320
let's give it a nice table name like

319
00:10:24,320 --> 00:10:27,519
orders right if i can type

320
00:10:27,519 --> 00:10:30,000
i didn't get my coffee as you can see

321
00:10:30,000 --> 00:10:31,600
orders

322
00:10:31,600 --> 00:10:34,000
perfect and now what i could do while i

323
00:10:34,000 --> 00:10:35,600
could use all of these annotations and

324
00:10:35,600 --> 00:10:37,040
ghettos and setters

325
00:10:37,040 --> 00:10:38,640
that i'm used to but actually what i

326
00:10:38,640 --> 00:10:40,160
will do differently now

327
00:10:40,160 --> 00:10:41,920
and you can see this in the guides that

328
00:10:41,920 --> 00:10:44,079
is a somewhat best practice or

329
00:10:44,079 --> 00:10:47,120
an approach to say now please don't

330
00:10:47,120 --> 00:10:49,040
throw something against your screen as a

331
00:10:49,040 --> 00:10:51,120
java developer this is a little bit un

332
00:10:51,120 --> 00:10:53,360
uh unnatural to us to say okay we

333
00:10:53,360 --> 00:10:55,120
actually make these fields public

334
00:10:55,120 --> 00:10:58,240
and i will extend this class for

335
00:10:58,240 --> 00:11:01,519
a panache entity or in my case an

336
00:11:01,519 --> 00:11:04,160
entity base the difference is the base

337
00:11:04,160 --> 00:11:05,040
doesn't define

338
00:11:05,040 --> 00:11:07,200
an id because i actually want to have my

339
00:11:07,200 --> 00:11:08,800
own id definition

340
00:11:08,800 --> 00:11:10,720
my uu id should be the id and that

341
00:11:10,720 --> 00:11:12,720
should be a generated value

342
00:11:12,720 --> 00:11:14,720
and then all of the other fields are

343
00:11:14,720 --> 00:11:15,839
going to be sierra

344
00:11:15,839 --> 00:11:18,959
serialized and that's it so all that's

345
00:11:18,959 --> 00:11:20,560
all i need in order

346
00:11:20,560 --> 00:11:22,959
um to have a persistent entity with

347
00:11:22,959 --> 00:11:23,839
panache

348
00:11:23,839 --> 00:11:25,920
so which i think is pretty cool because

349
00:11:25,920 --> 00:11:27,120
now what we can do

350
00:11:27,120 --> 00:11:30,160
i think i need to start yeah

351
00:11:30,160 --> 00:11:32,880
my application and i hope that already

352
00:11:32,880 --> 00:11:34,079
works

353
00:11:34,079 --> 00:11:36,880
now what we can do we of course get some

354
00:11:36,880 --> 00:11:37,839
compile errors

355
00:11:37,839 --> 00:11:40,399
that doesn't matter um i can just you

356
00:11:40,399 --> 00:11:42,240
know continue coding and use this

357
00:11:42,240 --> 00:11:45,440
uh a live reload approach so first of

358
00:11:45,440 --> 00:11:46,880
all i can get rid of my

359
00:11:46,880 --> 00:11:49,040
of my map where i stored my orders and

360
00:11:49,040 --> 00:11:50,480
now i can say okay

361
00:11:50,480 --> 00:11:51,920
actually and this looks a little bit

362
00:11:51,920 --> 00:11:53,600
weird in the beginning

363
00:11:53,600 --> 00:11:55,839
use coffee order now the class with a

364
00:11:55,839 --> 00:11:57,040
static method

365
00:11:57,040 --> 00:12:00,639
dot find all or list all just list all

366
00:12:00,639 --> 00:12:01,600
orders

367
00:12:01,600 --> 00:12:04,160
that's it and then it will do basically

368
00:12:04,160 --> 00:12:04,639
the

369
00:12:04,639 --> 00:12:06,399
same thing like you would do using an

370
00:12:06,399 --> 00:12:08,639
entity manager to find all of the coffee

371
00:12:08,639 --> 00:12:10,000
orders and so on and so forth

372
00:12:10,000 --> 00:12:13,120
you can further order them you can sort

373
00:12:13,120 --> 00:12:14,079
them or you can

374
00:12:14,079 --> 00:12:16,480
have some extra queries if you want to

375
00:12:16,480 --> 00:12:17,839
extend this

376
00:12:17,839 --> 00:12:20,720
to get the order same coffee order find

377
00:12:20,720 --> 00:12:21,040
by

378
00:12:21,040 --> 00:12:24,160
id and that's the id and that's it so

379
00:12:24,160 --> 00:12:25,760
um in the past there was a pattern

380
00:12:25,760 --> 00:12:27,600
called active records which is a little

381
00:12:27,600 --> 00:12:28,240
bit

382
00:12:28,240 --> 00:12:31,279
similar i would say i at first i wasn't

383
00:12:31,279 --> 00:12:32,880
quite sure what to think of this

384
00:12:32,880 --> 00:12:35,279
approach to be honest and i wasn't quite

385
00:12:35,279 --> 00:12:36,560
sure whether i like it

386
00:12:36,560 --> 00:12:39,680
it also depends on your um on your

387
00:12:39,680 --> 00:12:41,200
hierarchy in your domain model whether

388
00:12:41,200 --> 00:12:43,120
you'll be able to for example extend a

389
00:12:43,120 --> 00:12:44,480
class and all these things

390
00:12:44,480 --> 00:12:47,120
good news is you can always roll back to

391
00:12:47,120 --> 00:12:48,399
a normal jpa

392
00:12:48,399 --> 00:12:49,920
approach so you can have you know

393
00:12:49,920 --> 00:12:51,519
goddess and setters where with the

394
00:12:51,519 --> 00:12:53,279
annotations you can have just a normal

395
00:12:53,279 --> 00:12:55,040
jpa entity you don't need to extend

396
00:12:55,040 --> 00:12:55,920
anything

397
00:12:55,920 --> 00:12:57,600
there's even something called panache

398
00:12:57,600 --> 00:12:59,839
repository which is i think very similar

399
00:12:59,839 --> 00:13:01,680
to spring data repositories which is

400
00:13:01,680 --> 00:13:03,279
also very cool approach

401
00:13:03,279 --> 00:13:05,920
but this is even less code so if it can

402
00:13:05,920 --> 00:13:07,440
go with that approach i think it does

403
00:13:07,440 --> 00:13:08,560
make sense

404
00:13:08,560 --> 00:13:11,200
and then coffee order same for persist

405
00:13:11,200 --> 00:13:13,120
we can just persist in order

406
00:13:13,120 --> 00:13:15,680
in this case the persist doesn't return

407
00:13:15,680 --> 00:13:17,440
anything so we can say okay

408
00:13:17,440 --> 00:13:20,959
now the order id should be set so

409
00:13:20,959 --> 00:13:22,880
in this case i just want to return the

410
00:13:22,880 --> 00:13:24,720
order because we actually need this in

411
00:13:24,720 --> 00:13:26,480
our repository

412
00:13:26,480 --> 00:13:29,200
and that's pretty much it so i think

413
00:13:29,200 --> 00:13:30,480
that's a

414
00:13:30,480 --> 00:13:33,440
nice approach just to do persistent now

415
00:13:33,440 --> 00:13:35,600
of course all of these

416
00:13:35,600 --> 00:13:37,279
getters don't exist anymore so let me

417
00:13:37,279 --> 00:13:39,680
just quickly fix that

418
00:13:39,680 --> 00:13:41,680
this including the id because we just

419
00:13:41,680 --> 00:13:42,800
removed all of them

420
00:13:42,800 --> 00:13:44,800
and then actually i think the first

421
00:13:44,800 --> 00:13:46,079
approach failed because it didn't

422
00:13:46,079 --> 00:13:46,959
compile

423
00:13:46,959 --> 00:13:48,560
and then we can just restart our

424
00:13:48,560 --> 00:13:50,480
application and try this approach

425
00:13:50,480 --> 00:13:53,680
uh with our persistence now and again i

426
00:13:53,680 --> 00:13:55,040
think that's just a nice

427
00:13:55,040 --> 00:13:58,240
way to integrate this very cleanly

428
00:13:58,240 --> 00:14:00,320
and that's one of the reasons what i

429
00:14:00,320 --> 00:14:02,720
like about quark is it's very pragmatic

430
00:14:02,720 --> 00:14:05,199
so it allows you to do a lot of stuff

431
00:14:05,199 --> 00:14:06,160
just easier

432
00:14:06,160 --> 00:14:08,160
you probably also know this there is no

433
00:14:08,160 --> 00:14:10,160
jax a rest application so we don't need

434
00:14:10,160 --> 00:14:11,920
to sub class what we always did with

435
00:14:11,920 --> 00:14:12,880
this jax rest

436
00:14:12,880 --> 00:14:15,519
configuration if not and just it assumes

437
00:14:15,519 --> 00:14:17,279
slash the root resource

438
00:14:17,279 --> 00:14:19,680
which is true for us and now let's do

439
00:14:19,680 --> 00:14:21,680
the curl again

440
00:14:21,680 --> 00:14:24,079
so this should be up and running again

441
00:14:24,079 --> 00:14:26,079
yes and then i say orders which now is

442
00:14:26,079 --> 00:14:26,560
empty

443
00:14:26,560 --> 00:14:28,160
because now actually the database is

444
00:14:28,160 --> 00:14:30,000
empty but now if i create

445
00:14:30,000 --> 00:14:33,120
a new order like an espresso okay

446
00:14:33,120 --> 00:14:35,199
transaction is not active yes one thing

447
00:14:35,199 --> 00:14:36,880
i of course forgot

448
00:14:36,880 --> 00:14:38,560
it's not your fault you can shout at the

449
00:14:38,560 --> 00:14:40,480
screen at the stream

450
00:14:40,480 --> 00:14:43,440
but i need to make that transactional

451
00:14:43,440 --> 00:14:45,600
because probably as you know

452
00:14:45,600 --> 00:14:48,320
a cdi beam is not transactional per

453
00:14:48,320 --> 00:14:49,839
default unlike a

454
00:14:49,839 --> 00:14:52,639
ejb bean in the past and we have to make

455
00:14:52,639 --> 00:14:53,680
all of these methods

456
00:14:53,680 --> 00:14:55,680
transactional now or just the class

457
00:14:55,680 --> 00:14:56,800
transactional

458
00:14:56,800 --> 00:15:00,560
and then let's see now this will

459
00:15:00,560 --> 00:15:02,320
now you see the feature of the hot

460
00:15:02,320 --> 00:15:04,160
reload approach it would just reload

461
00:15:04,160 --> 00:15:05,199
your application

462
00:15:05,199 --> 00:15:08,399
and then let's make this again and just

463
00:15:08,399 --> 00:15:09,279
display

464
00:15:09,279 --> 00:15:12,000
my orders now my orders are in the

465
00:15:12,000 --> 00:15:12,880
system

466
00:15:12,880 --> 00:15:16,399
that's good news and now let me just

467
00:15:16,399 --> 00:15:18,639
be brave and stop and restart my

468
00:15:18,639 --> 00:15:19,839
application

469
00:15:19,839 --> 00:15:22,000
i now hope if i did everything correctly

470
00:15:22,000 --> 00:15:22,880
it doesn't

471
00:15:22,880 --> 00:15:25,279
it doesn't kill my tables but leave them

472
00:15:25,279 --> 00:15:26,000
in the database

473
00:15:26,000 --> 00:15:27,920
and then it should just after it has

474
00:15:27,920 --> 00:15:30,320
been started up

475
00:15:30,320 --> 00:15:32,560
show my orders again you can of course

476
00:15:32,560 --> 00:15:33,440
set up the

477
00:15:33,440 --> 00:15:35,120
uh the properties here what you're

478
00:15:35,120 --> 00:15:36,880
probably familiar with from hibernate

479
00:15:36,880 --> 00:15:37,279
and then

480
00:15:37,279 --> 00:15:39,279
now my orders are in the system again

481
00:15:39,279 --> 00:15:41,199
and i can use that approach

482
00:15:41,199 --> 00:15:43,360
so that's just one of many many things

483
00:15:43,360 --> 00:15:44,959
that i wanted to show you where i think

484
00:15:44,959 --> 00:15:45,519
it's

485
00:15:45,519 --> 00:15:48,160
it's kind of cool to include persistence

486
00:15:48,160 --> 00:15:49,759
in such an easy way

487
00:15:49,759 --> 00:15:52,399
um as compared to uh to the past in an

488
00:15:52,399 --> 00:15:53,519
enterprise app

489
00:15:53,519 --> 00:15:55,120
where actually what i need to configure

490
00:15:55,120 --> 00:15:56,800
are these two dependencies

491
00:15:56,800 --> 00:16:00,320
um orm panache dependency and then of

492
00:16:00,320 --> 00:16:02,560
course my my driver in my case postgres

493
00:16:02,560 --> 00:16:04,480
and then these properties that i that

494
00:16:04,480 --> 00:16:06,399
are set up so this works

495
00:16:06,399 --> 00:16:10,000
um with that approach and then

496
00:16:10,000 --> 00:16:12,480
while we can run this as you can as you

497
00:16:12,480 --> 00:16:14,160
can see

498
00:16:14,160 --> 00:16:16,000
now a little bit more to the cloud

499
00:16:16,000 --> 00:16:18,320
native side of things

500
00:16:18,320 --> 00:16:21,279
and what that is so you probably um you

501
00:16:21,279 --> 00:16:23,120
know would run your application in

502
00:16:23,120 --> 00:16:25,199
docker containers so now actually at

503
00:16:25,199 --> 00:16:26,399
first i only run

504
00:16:26,399 --> 00:16:28,880
my process locally but what i can do of

505
00:16:28,880 --> 00:16:29,920
course i can

506
00:16:29,920 --> 00:16:33,120
run things in docker containers and

507
00:16:33,120 --> 00:16:34,959
now a few things so that is my docker

508
00:16:34,959 --> 00:16:36,560
file that i use

509
00:16:36,560 --> 00:16:39,360
and i almost always actually use quark

510
00:16:39,360 --> 00:16:40,880
is in the jvm mode

511
00:16:40,880 --> 00:16:43,680
so you probably might um you know

512
00:16:43,680 --> 00:16:46,079
connect in your head corkers with

513
00:16:46,079 --> 00:16:48,800
running applications natively which

514
00:16:48,800 --> 00:16:50,399
definitely is one of the big benefits

515
00:16:50,399 --> 00:16:51,920
that you can do with quarkus

516
00:16:51,920 --> 00:16:53,759
uh that you can actually compile it down

517
00:16:53,759 --> 00:16:56,000
to a native um executable image

518
00:16:56,000 --> 00:16:59,440
with uh growl vm and substrate um but

519
00:16:59,440 --> 00:17:01,519
i actually think it makes a lot of sense

520
00:17:01,519 --> 00:17:04,079
to just run it in plain jvm mode

521
00:17:04,079 --> 00:17:07,199
for a bunch of reasons so first of all

522
00:17:07,199 --> 00:17:10,559
if your ops team for example is used to

523
00:17:10,559 --> 00:17:10,959
run

524
00:17:10,959 --> 00:17:13,280
things in a specific jvm you know you

525
00:17:13,280 --> 00:17:15,199
know hotspot or any other

526
00:17:15,199 --> 00:17:17,199
jvm of your choice then it's the same

527
00:17:17,199 --> 00:17:18,400
thing you just run

528
00:17:18,400 --> 00:17:20,559
yet another app yet another executable

529
00:17:20,559 --> 00:17:21,439
jar

530
00:17:21,439 --> 00:17:24,640
on that on that jvm

531
00:17:24,640 --> 00:17:26,959
and you get a big big improvement in

532
00:17:26,959 --> 00:17:28,960
resource consumption and startup time

533
00:17:28,960 --> 00:17:31,840
already in plain jvm mode why because

534
00:17:31,840 --> 00:17:34,640
the biggest benefit of

535
00:17:34,640 --> 00:17:37,679
let me just make a clean package for now

536
00:17:37,679 --> 00:17:38,880
to clean and build this again the

537
00:17:38,880 --> 00:17:40,880
biggest benefit of what quarkx does

538
00:17:40,880 --> 00:17:43,360
is the build time optimization so what

539
00:17:43,360 --> 00:17:45,200
it does it takes all of these

540
00:17:45,200 --> 00:17:47,440
dependencies all of these inversions of

541
00:17:47,440 --> 00:17:48,880
control that we have

542
00:17:48,880 --> 00:17:50,799
and basically resolves them at build

543
00:17:50,799 --> 00:17:52,720
time and you already get you know

544
00:17:52,720 --> 00:17:55,840
direct code direct invocation so there's

545
00:17:55,840 --> 00:17:57,919
no reflection there's no inversion of

546
00:17:57,919 --> 00:17:59,440
control going on where you just have to

547
00:17:59,440 --> 00:18:00,240
manually

548
00:18:00,240 --> 00:18:01,919
grab all of your beans together no

549
00:18:01,919 --> 00:18:03,200
they're already there if you know what

550
00:18:03,200 --> 00:18:04,160
you use and it just

551
00:18:04,160 --> 00:18:06,559
starts and this is why it starts up that

552
00:18:06,559 --> 00:18:07,200
quickly

553
00:18:07,200 --> 00:18:09,919
even in jvm mode and only that allows

554
00:18:09,919 --> 00:18:11,760
you to compile it down to native if you

555
00:18:11,760 --> 00:18:13,360
want using raw vm

556
00:18:13,360 --> 00:18:15,120
and that makes it you know even faster

557
00:18:15,120 --> 00:18:17,120
and better

558
00:18:17,120 --> 00:18:19,520
but another reason what i always

559
00:18:19,520 --> 00:18:20,400
advocate

560
00:18:20,400 --> 00:18:23,600
for um basically docker images

561
00:18:23,600 --> 00:18:26,080
is trying to separate your application

562
00:18:26,080 --> 00:18:27,440
from the runtime

563
00:18:27,440 --> 00:18:30,000
so having making use of this docker

564
00:18:30,000 --> 00:18:31,919
layer approach and of the caches

565
00:18:31,919 --> 00:18:34,960
of this layered file system so what you

566
00:18:34,960 --> 00:18:36,880
have here is this docker file where i

567
00:18:36,880 --> 00:18:38,720
just built my application and if i say

568
00:18:38,720 --> 00:18:41,200
docker builds

569
00:18:41,200 --> 00:18:43,840
and that just builds up my app and this

570
00:18:43,840 --> 00:18:45,360
runs very very quickly

571
00:18:45,360 --> 00:18:47,520
uh because only in the beginning it adds

572
00:18:47,520 --> 00:18:49,039
all of my dependencies

573
00:18:49,039 --> 00:18:51,679
and then what it does it just adds my

574
00:18:51,679 --> 00:18:52,080
app

575
00:18:52,080 --> 00:18:54,640
which you can see is pretty tiny it's

576
00:18:54,640 --> 00:18:55,280
just

577
00:18:55,280 --> 00:18:58,400
kilobytes and actually the rest is the

578
00:18:58,400 --> 00:19:00,240
remaining things are contained in this

579
00:19:00,240 --> 00:19:01,280
lip folder

580
00:19:01,280 --> 00:19:03,679
and the docker file maintains that well

581
00:19:03,679 --> 00:19:06,080
the jvm version docker file so with the

582
00:19:06,080 --> 00:19:07,600
native image you still have everything

583
00:19:07,600 --> 00:19:08,559
in an image

584
00:19:08,559 --> 00:19:10,480
which is comparably small but then if

585
00:19:10,480 --> 00:19:12,080
you do docker um

586
00:19:12,080 --> 00:19:14,880
push and pull uh you always have to well

587
00:19:14,880 --> 00:19:15,760
basically ship

588
00:19:15,760 --> 00:19:18,000
and push and pull everything or at least

589
00:19:18,000 --> 00:19:18,960
that big uh

590
00:19:18,960 --> 00:19:21,520
layer and not just your thin layer

591
00:19:21,520 --> 00:19:22,400
application

592
00:19:22,400 --> 00:19:24,240
so i think that does make a make a

593
00:19:24,240 --> 00:19:25,600
difference here

594
00:19:25,600 --> 00:19:27,679
let me see okay that is still running

595
00:19:27,679 --> 00:19:29,280
let me

596
00:19:29,280 --> 00:19:32,080
run this application now that's chrome

597
00:19:32,080 --> 00:19:33,360
port 8080 and

598
00:19:33,360 --> 00:19:36,840
actually for my no local setup i need a

599
00:19:36,840 --> 00:19:38,080
network

600
00:19:38,080 --> 00:19:40,240
that is just my setup here because then

601
00:19:40,240 --> 00:19:42,799
it wants to connect to the database

602
00:19:42,799 --> 00:19:44,720
and now this error just says well the

603
00:19:44,720 --> 00:19:46,799
table already exists so that's just a

604
00:19:46,799 --> 00:19:47,600
warning

605
00:19:47,600 --> 00:19:50,320
and now i can say okay look localhost

606
00:19:50,320 --> 00:19:51,280
8080

607
00:19:51,280 --> 00:19:54,559
perfect orders and there are my coffee

608
00:19:54,559 --> 00:19:55,600
orders again

609
00:19:55,600 --> 00:19:57,520
now this is my quarkx application that

610
00:19:57,520 --> 00:19:59,200
runs in a docker container

611
00:19:59,200 --> 00:20:01,679
locally so that is now my um locally

612
00:20:01,679 --> 00:20:02,320
running

613
00:20:02,320 --> 00:20:04,960
uh corkus app in a container so both

614
00:20:04,960 --> 00:20:05,360
this

615
00:20:05,360 --> 00:20:07,600
and the database now running in a

616
00:20:07,600 --> 00:20:09,120
container and then

617
00:20:09,120 --> 00:20:12,559
i can basically use that also for local

618
00:20:12,559 --> 00:20:13,600
development

619
00:20:13,600 --> 00:20:17,120
and well further deploy it speaking of

620
00:20:17,120 --> 00:20:18,640
which

621
00:20:18,640 --> 00:20:21,840
let's have a look into kubernetes just

622
00:20:21,840 --> 00:20:23,760
very quickly i want to deploy this

623
00:20:23,760 --> 00:20:27,120
app now to a kubernetes setup i have

624
00:20:27,120 --> 00:20:29,120
kubernetes cluster in the cloud a

625
00:20:29,120 --> 00:20:31,280
managed cluster in the ibm cloud here

626
00:20:31,280 --> 00:20:33,600
you can equally well set up anything you

627
00:20:33,600 --> 00:20:35,120
know that is kubernetes you can have a

628
00:20:35,120 --> 00:20:37,200
mini cube on your local laptop you can

629
00:20:37,200 --> 00:20:37,679
have

630
00:20:37,679 --> 00:20:39,760
mini shifts for openshift cluster you

631
00:20:39,760 --> 00:20:41,679
can have managed openshift somewhere

632
00:20:41,679 --> 00:20:43,200
that's also kubernetes

633
00:20:43,200 --> 00:20:45,760
whatever you would like to have so i

634
00:20:45,760 --> 00:20:46,799
have a

635
00:20:46,799 --> 00:20:48,640
kubernetes cluster right here that i

636
00:20:48,640 --> 00:20:51,039
just created actually before

637
00:20:51,039 --> 00:20:54,080
and which now it should be empty yes so

638
00:20:54,080 --> 00:20:55,600
there is nothing running

639
00:20:55,600 --> 00:20:57,360
and now what i can do i just want to

640
00:20:57,360 --> 00:20:59,200
deploy that

641
00:20:59,200 --> 00:21:03,120
using well some yemel of course

642
00:21:03,120 --> 00:21:05,039
there are actually other ways to do this

643
00:21:05,039 --> 00:21:07,039
uh with quarkx so there are some corpus

644
00:21:07,039 --> 00:21:08,640
extensions and plug-in where you can say

645
00:21:08,640 --> 00:21:09,679
okay you can

646
00:21:09,679 --> 00:21:11,919
actually write something where you don't

647
00:21:11,919 --> 00:21:14,159
even uh we're not even required to write

648
00:21:14,159 --> 00:21:15,840
a docker file or to write these yaml

649
00:21:15,840 --> 00:21:16,400
files

650
00:21:16,400 --> 00:21:18,880
i actually like to do it this way where

651
00:21:18,880 --> 00:21:20,960
i have you know the control of these

652
00:21:20,960 --> 00:21:22,880
files that's a little bit a question

653
00:21:22,880 --> 00:21:24,320
which approach you want to

654
00:21:24,320 --> 00:21:27,280
want to take also usually in your devops

655
00:21:27,280 --> 00:21:29,360
approach it

656
00:21:29,360 --> 00:21:30,880
you need some more control over what

657
00:21:30,880 --> 00:21:33,120
you're doing uh within your team

658
00:21:33,120 --> 00:21:34,799
so this is just if you're familiar with

659
00:21:34,799 --> 00:21:36,880
kubernetes um of course the kubernetes

660
00:21:36,880 --> 00:21:38,400
service some deployment where i just

661
00:21:38,400 --> 00:21:40,480
deploy all of that stuff

662
00:21:40,480 --> 00:21:42,240
then i'm also actually running an istio

663
00:21:42,240 --> 00:21:43,919
cluster here so i have this is geo

664
00:21:43,919 --> 00:21:44,640
gateway

665
00:21:44,640 --> 00:21:46,080
and of course a virtual service

666
00:21:46,080 --> 00:21:48,720
destination rule and all these things

667
00:21:48,720 --> 00:21:52,080
i think the kubernetes and istio

668
00:21:52,080 --> 00:21:55,600
a project does a good job at um

669
00:21:55,600 --> 00:21:57,360
at documenting that if you're wondering

670
00:21:57,360 --> 00:21:59,280
what all of that is but now we don't

671
00:21:59,280 --> 00:22:00,480
care we just apply it

672
00:22:00,480 --> 00:22:01,919
throw it against the cluster and then it

673
00:22:01,919 --> 00:22:03,919
creates a bunch of stuff here

674
00:22:03,919 --> 00:22:05,520
and one thing that is already pretty

675
00:22:05,520 --> 00:22:07,919
cool it just starts up very quickly

676
00:22:07,919 --> 00:22:09,919
as you saw i mean the app starts very

677
00:22:09,919 --> 00:22:11,360
quickly so now it's already up and

678
00:22:11,360 --> 00:22:13,039
running and ready we don't have to wait

679
00:22:13,039 --> 00:22:13,919
for anything

680
00:22:13,919 --> 00:22:19,200
and i can already curl and query my app

681
00:22:19,200 --> 00:22:21,360
let me run my magic script that gets me

682
00:22:21,360 --> 00:22:23,280
the ip address of my cluster and then i

683
00:22:23,280 --> 00:22:24,960
say well just orders

684
00:22:24,960 --> 00:22:27,600
and i see um now my coffee order so i

685
00:22:27,600 --> 00:22:29,120
can have a look at this health check and

686
00:22:29,120 --> 00:22:29,919
now i see

687
00:22:29,919 --> 00:22:32,000
well sorry sebastian we have lost your

688
00:22:32,000 --> 00:22:33,679
screen there mate

689
00:22:33,679 --> 00:22:36,720
sorry yeah no no thanks thanks for

690
00:22:36,720 --> 00:22:38,240
letting me know that's actually a good

691
00:22:38,240 --> 00:22:39,520
point

692
00:22:39,520 --> 00:22:45,440
um i don't know what just happened

693
00:22:45,440 --> 00:22:49,919
okay let me just try to restart

694
00:22:49,919 --> 00:22:52,480
no worries using my it's it's actually

695
00:22:52,480 --> 00:22:53,760
very interesting setup

696
00:22:53,760 --> 00:22:55,919
that i have here using a second computer

697
00:22:55,919 --> 00:22:57,600
and

698
00:22:57,600 --> 00:23:00,720
um that that grabs both of this

699
00:23:00,720 --> 00:23:03,600
this camera and the screen and um was

700
00:23:03,600 --> 00:23:05,039
actually

701
00:23:05,039 --> 00:23:08,320
supposed to now let me do this again

702
00:23:08,320 --> 00:23:10,559
which i which is funny because it

703
00:23:10,559 --> 00:23:12,480
happened many times that it started bef

704
00:23:12,480 --> 00:23:14,400
that it crashed before starting but it

705
00:23:14,400 --> 00:23:15,600
never happened that it's

706
00:23:15,600 --> 00:23:19,360
basically crashed while

707
00:23:19,679 --> 00:23:21,760
we unplug this again so sorry for that

708
00:23:21,760 --> 00:23:24,000
um

709
00:23:25,360 --> 00:23:29,440
okay let's see if not then i just like

710
00:23:29,440 --> 00:23:30,400
talk it through

711
00:23:30,400 --> 00:23:33,280
uh i can um talk a lot on this slide so

712
00:23:33,280 --> 00:23:34,480
you've got about seven minutes left

713
00:23:34,480 --> 00:23:36,559
sebastian's under pressure

714
00:23:36,559 --> 00:23:39,440
let me just do one more thing to i'll

715
00:23:39,440 --> 00:23:39,760
just

716
00:23:39,760 --> 00:23:42,480
quickly stop uh sharing because i know

717
00:23:42,480 --> 00:23:45,039
trying to

718
00:23:45,120 --> 00:23:48,240
try to reconnect that just actually this

719
00:23:48,240 --> 00:23:49,679
should be this setup so

720
00:23:49,679 --> 00:23:51,279
now you can see me full screen and i

721
00:23:51,279 --> 00:23:53,200
just trying to restart

722
00:23:53,200 --> 00:23:56,320
it uses obs under the hood with uh which

723
00:23:56,320 --> 00:23:59,039
is actually very interesting uh approach

724
00:23:59,039 --> 00:24:00,480
if you're ever wondering you know how to

725
00:24:00,480 --> 00:24:01,200
do all of these

726
00:24:01,200 --> 00:24:03,760
uh live streams and stuff so that's a

727
00:24:03,760 --> 00:24:05,039
very powerful

728
00:24:05,039 --> 00:24:08,799
uh approach i would say um

729
00:24:08,799 --> 00:24:11,039
where if you've seen like other videos

730
00:24:11,039 --> 00:24:12,400
that i did where you can do something

731
00:24:12,400 --> 00:24:13,200
they do look cool

732
00:24:13,200 --> 00:24:14,720
yeah yeah i'm liking this your video

733
00:24:14,720 --> 00:24:16,799
skills are very good exactly oh yeah

734
00:24:16,799 --> 00:24:18,080
there we go okay

735
00:24:18,080 --> 00:24:20,400
again let me just quickly make this

736
00:24:20,400 --> 00:24:22,320
differently

737
00:24:22,320 --> 00:24:25,919
off that you see me full screen like

738
00:24:25,919 --> 00:24:27,039
this and i'm just

739
00:24:27,039 --> 00:24:30,799
trying to share the other screen again

740
00:24:31,360 --> 00:24:35,679
um nope oh wait a second that was still

741
00:24:35,679 --> 00:24:40,720
oh yeah shoot the screen

742
00:24:40,720 --> 00:24:43,279
yeah that's it just gotta give a shout

743
00:24:43,279 --> 00:24:45,120
out to naveen for nudging me on this one

744
00:24:45,120 --> 00:24:46,000
and andy as well

745
00:24:46,000 --> 00:24:46,960
they mentioned they missed the

746
00:24:46,960 --> 00:24:49,520
kubernetes stuff yes now you should be

747
00:24:49,520 --> 00:24:51,760
able to see some nice yaml again

748
00:24:51,760 --> 00:24:53,440
i'll disappear thanks special good stuff

749
00:24:53,440 --> 00:24:55,919
perfect yeah thanks for letting me know

750
00:24:55,919 --> 00:24:58,960
um all right so now actually we have

751
00:24:58,960 --> 00:24:59,520
this

752
00:24:59,520 --> 00:25:02,320
up and running in kubernetes so that was

753
00:25:02,320 --> 00:25:03,279
i would say quite

754
00:25:03,279 --> 00:25:05,679
uh quite easy fairly easy and quite

755
00:25:05,679 --> 00:25:06,640
quick to do

756
00:25:06,640 --> 00:25:09,120
and also a big enabler is just that we

757
00:25:09,120 --> 00:25:10,559
have this um

758
00:25:10,559 --> 00:25:13,279
hot reload mode and just the fact that

759
00:25:13,279 --> 00:25:14,240
starts up that

760
00:25:14,240 --> 00:25:16,799
uh quarkx starts up so quickly i have a

761
00:25:16,799 --> 00:25:18,240
bunch of resources for you that you

762
00:25:18,240 --> 00:25:19,520
might have

763
00:25:19,520 --> 00:25:21,200
a look at so that's actually a longer

764
00:25:21,200 --> 00:25:23,279
post that i uh wrote

765
00:25:23,279 --> 00:25:25,600
um this is something that i found is

766
00:25:25,600 --> 00:25:26,960
interesting as well

767
00:25:26,960 --> 00:25:30,080
how to run a different jvm actually um

768
00:25:30,080 --> 00:25:33,039
with corkus so i show how to do open j9

769
00:25:33,039 --> 00:25:33,679
and if i

770
00:25:33,679 --> 00:25:35,279
um in this video and if you paid

771
00:25:35,279 --> 00:25:36,640
attention that's actually what i'm

772
00:25:36,640 --> 00:25:38,320
running here as well

773
00:25:38,320 --> 00:25:39,679
and in this video i'm doing some

774
00:25:39,679 --> 00:25:41,520
comparison like if you do nothing else

775
00:25:41,520 --> 00:25:43,120
than just swapping the base image you

776
00:25:43,120 --> 00:25:43,840
already save

777
00:25:43,840 --> 00:25:45,520
a lot of resource consumption like you

778
00:25:45,520 --> 00:25:47,039
save a lot of memory

779
00:25:47,039 --> 00:25:48,960
yourself especially interesting if you

780
00:25:48,960 --> 00:25:51,200
actually want to run a corkus in jvm

781
00:25:51,200 --> 00:25:52,960
mode in production

782
00:25:52,960 --> 00:25:55,360
and another thing is that's quite

783
00:25:55,360 --> 00:25:56,240
interesting

784
00:25:56,240 --> 00:25:58,320
is that you can run this uh call in dev

785
00:25:58,320 --> 00:25:59,679
mode that we all really

786
00:25:59,679 --> 00:26:01,760
really like because it's just so

787
00:26:01,760 --> 00:26:03,039
efficient to use

788
00:26:03,039 --> 00:26:04,960
you can run this in containers also

789
00:26:04,960 --> 00:26:06,960
there's a thing called corkus a colon

790
00:26:06,960 --> 00:26:07,919
remote dev

791
00:26:07,919 --> 00:26:10,559
for a remote dev approach and in this

792
00:26:10,559 --> 00:26:11,360
video i just

793
00:26:11,360 --> 00:26:12,960
showing you how to build this up it's

794
00:26:12,960 --> 00:26:14,720
not quite straightforward

795
00:26:14,720 --> 00:26:16,400
um you have to you know do some things

796
00:26:16,400 --> 00:26:18,000
like write another docker file that

797
00:26:18,000 --> 00:26:19,120
includes maven

798
00:26:19,120 --> 00:26:21,679
and corkers and and these things uh so i

799
00:26:21,679 --> 00:26:22,240
show you

800
00:26:22,240 --> 00:26:24,400
uh this how to get started and then it

801
00:26:24,400 --> 00:26:25,440
might be a little bit

802
00:26:25,440 --> 00:26:29,200
easier other than that

803
00:26:29,200 --> 00:26:31,840
some key takeaways so i think quarkx is

804
00:26:31,840 --> 00:26:33,520
a very interesting and modern approach

805
00:26:33,520 --> 00:26:34,559
how to do cloud

806
00:26:34,559 --> 00:26:36,720
native java and especially that it

807
00:26:36,720 --> 00:26:37,600
builds upon

808
00:26:37,600 --> 00:26:40,159
existing and known apis right you

809
00:26:40,159 --> 00:26:42,400
probably have used cdi in the past

810
00:26:42,400 --> 00:26:45,120
jax arrest jpa and you know all these

811
00:26:45,120 --> 00:26:46,559
things you don't have to reinvent

812
00:26:46,559 --> 00:26:49,760
veal which really really makes sense the

813
00:26:49,760 --> 00:26:51,360
point that it cares about the developer

814
00:26:51,360 --> 00:26:52,000
experience

815
00:26:52,000 --> 00:26:54,159
as well you saw this approach of the hot

816
00:26:54,159 --> 00:26:55,200
reload approach

817
00:26:55,200 --> 00:26:56,559
you probably have seen videos in the

818
00:26:56,559 --> 00:26:58,159
past so i didn't spend too much time on

819
00:26:58,159 --> 00:26:59,679
it but you know you saw me coding and

820
00:26:59,679 --> 00:27:01,760
then just reloading immediately

821
00:27:01,760 --> 00:27:04,159
and that just really really makes sense

822
00:27:04,159 --> 00:27:05,440
because we humans

823
00:27:05,440 --> 00:27:07,520
just easily get distracted right if i

824
00:27:07,520 --> 00:27:09,440
have to wait just 10 seconds for

825
00:27:09,440 --> 00:27:10,640
something to start up

826
00:27:10,640 --> 00:27:12,000
you might say well it's not a big

827
00:27:12,000 --> 00:27:13,840
difference actually it is

828
00:27:13,840 --> 00:27:15,520
because if i have to wait one second

829
00:27:15,520 --> 00:27:17,279
then i just wait for it right but

830
00:27:17,279 --> 00:27:19,360
if i have to wait 10 seconds well i'll

831
00:27:19,360 --> 00:27:21,120
check my smartphone i will look into

832
00:27:21,120 --> 00:27:22,880
slack check the emails and then i'm

833
00:27:22,880 --> 00:27:24,320
distracted and then i'm gone

834
00:27:24,320 --> 00:27:26,480
right so we need to have that immediate

835
00:27:26,480 --> 00:27:28,640
feedback to keep in there to stay in

836
00:27:28,640 --> 00:27:30,399
that flow

837
00:27:30,399 --> 00:27:32,240
i think it's especially interesting if

838
00:27:32,240 --> 00:27:34,080
you already have some investment in

839
00:27:34,080 --> 00:27:36,960
ee means your developers are known to

840
00:27:36,960 --> 00:27:39,279
these apis or you actually have some

841
00:27:39,279 --> 00:27:41,600
ee apps and it's actually quite

842
00:27:41,600 --> 00:27:43,440
straightforward from my experience to

843
00:27:43,440 --> 00:27:44,080
migrate

844
00:27:44,080 --> 00:27:46,799
those to quarkx because you know a known

845
00:27:46,799 --> 00:27:49,039
code known apis and then you have to

846
00:27:49,039 --> 00:27:52,320
change the runtime only and you can go

847
00:27:52,320 --> 00:27:54,480
native with that which is i think a very

848
00:27:54,480 --> 00:27:55,520
very cool feature

849
00:27:55,520 --> 00:27:57,600
to really save resource consumption and

850
00:27:57,600 --> 00:27:59,039
actually a big enabler for

851
00:27:59,039 --> 00:28:01,600
cloud offerings to basically save

852
00:28:01,600 --> 00:28:03,679
yourself a lot of lot of money

853
00:28:03,679 --> 00:28:05,679
because if you run the same runtime with

854
00:28:05,679 --> 00:28:07,039
now you know a small

855
00:28:07,039 --> 00:28:09,440
fraction of the resource consumption you

856
00:28:09,440 --> 00:28:11,279
either can scale up much easier

857
00:28:11,279 --> 00:28:13,360
or you just save a lot of money by

858
00:28:13,360 --> 00:28:14,320
scaling down your

859
00:28:14,320 --> 00:28:15,919
your cloud resources i probably

860
00:28:15,919 --> 00:28:17,200
shouldn't say that because i work for a

861
00:28:17,200 --> 00:28:18,399
cloud provider but

862
00:28:18,399 --> 00:28:21,039
it's really really good for if you run

863
00:28:21,039 --> 00:28:21,520
um

864
00:28:21,520 --> 00:28:24,320
your offerings uh there in this approach

865
00:28:24,320 --> 00:28:25,919
and if you want to get started quark is

866
00:28:25,919 --> 00:28:26,320
guys

867
00:28:26,320 --> 00:28:28,480
definitely uh your friend i will share

868
00:28:28,480 --> 00:28:30,640
some more resources but that's a good

869
00:28:30,640 --> 00:28:31,120
way

870
00:28:31,120 --> 00:28:33,760
to document that and basically uh to get

871
00:28:33,760 --> 00:28:35,919
to get started with that

872
00:28:35,919 --> 00:28:37,520
and then actually i want to open it up

873
00:28:37,520 --> 00:28:39,760
for questions thanks a lot for already

874
00:28:39,760 --> 00:28:41,279
for your attention if you follow the

875
00:28:41,279 --> 00:28:42,320
first link there

876
00:28:42,320 --> 00:28:44,399
uh you will get to a page uh that shows

877
00:28:44,399 --> 00:28:46,080
you some additional resources and some

878
00:28:46,080 --> 00:28:47,760
videos that are created

879
00:28:47,760 --> 00:28:50,559
and i hope that is interesting for you

880
00:28:50,559 --> 00:28:51,760
superstar sebastian

881
00:28:51,760 --> 00:28:52,720
really enjoyable there and well

882
00:28:52,720 --> 00:28:54,399
recovered on that uh that issue that's

883
00:28:54,399 --> 00:28:55,039
never

884
00:28:55,039 --> 00:28:58,480
fun recovering live yeah we've got time

885
00:28:58,480 --> 00:29:00,159
for one question i think it's a quick

886
00:29:00,159 --> 00:29:01,200
one if that's all right because we've

887
00:29:01,200 --> 00:29:02,480
only got like a minute to be left

888
00:29:02,480 --> 00:29:04,720
andy muir mentioned about a live reload

889
00:29:04,720 --> 00:29:05,520
is cool

890
00:29:05,520 --> 00:29:08,559
however for a bdd slash tdd approach

891
00:29:08,559 --> 00:29:10,159
what does it bring to the table because

892
00:29:10,159 --> 00:29:11,760
really i'm writing my test first

893
00:29:11,760 --> 00:29:14,480
then i'm coding yes oh actually a lot so

894
00:29:14,480 --> 00:29:15,760
that's a very good question

895
00:29:15,760 --> 00:29:18,799
um if you so in general um

896
00:29:18,799 --> 00:29:20,720
besides cdd if you have something that

897
00:29:20,720 --> 00:29:21,840
you can test

898
00:29:21,840 --> 00:29:23,760
locally where you have um you know code

899
00:29:23,760 --> 00:29:25,919
level tests where you don't even start

900
00:29:25,919 --> 00:29:27,279
your app well then there's no difference

901
00:29:27,279 --> 00:29:28,640
you just you know run your tests in your

902
00:29:28,640 --> 00:29:29,760
ide and you can just

903
00:29:29,760 --> 00:29:31,440
very quickly test your business logic

904
00:29:31,440 --> 00:29:33,440
and re-run you know your unit test or

905
00:29:33,440 --> 00:29:35,440
junit or whatever you have

906
00:29:35,440 --> 00:29:36,799
but i think it is actually a huge

907
00:29:36,799 --> 00:29:38,799
enabler if you want to test more

908
00:29:38,799 --> 00:29:40,799
end-to-end approaches like system tests

909
00:29:40,799 --> 00:29:41,600
locally

910
00:29:41,600 --> 00:29:43,039
where you say you start up your app you

911
00:29:43,039 --> 00:29:44,559
start up your database the backend that

912
00:29:44,559 --> 00:29:45,120
you have

913
00:29:45,120 --> 00:29:47,760
and then you fire your system test again

914
00:29:47,760 --> 00:29:49,360
your application directly

915
00:29:49,360 --> 00:29:51,679
and this approach allows you to program

916
00:29:51,679 --> 00:29:52,399
really with

917
00:29:52,399 --> 00:29:54,240
you know high efficiency because you

918
00:29:54,240 --> 00:29:55,919
don't have to wait right you change your

919
00:29:55,919 --> 00:29:57,440
application and it just quickly change

920
00:29:57,440 --> 00:29:58,480
you rerun your test

921
00:29:58,480 --> 00:30:00,240
it already connects against it and it's

922
00:30:00,240 --> 00:30:02,159
already there to change so you know then

923
00:30:02,159 --> 00:30:02,559
your

924
00:30:02,559 --> 00:30:04,320
test breaks okay now you have to update

925
00:30:04,320 --> 00:30:05,840
your tests or the other way around

926
00:30:05,840 --> 00:30:07,440
but you can very quickly get that

927
00:30:07,440 --> 00:30:08,960
feedback so i think it

928
00:30:08,960 --> 00:30:11,440
and actually it does enable you a lot

929
00:30:11,440 --> 00:30:12,799
especially if you do your testing

930
00:30:12,799 --> 00:30:14,159
approach on a more end-to-end

931
00:30:14,159 --> 00:30:15,120
perspective

932
00:30:15,120 --> 00:30:16,960
um locally great we're answering

933
00:30:16,960 --> 00:30:18,320
questions i reckon this is a good topic

934
00:30:18,320 --> 00:30:19,600
for the slack channel as well i reckon

935
00:30:19,600 --> 00:30:19,919
andy

936
00:30:19,919 --> 00:30:21,039
some follow-up questions there i like

937
00:30:21,039 --> 00:30:23,200
your pitch back again thanks once again

938
00:30:23,200 --> 00:30:24,480
we're going to go for a 10-minute break

939
00:30:24,480 --> 00:30:25,760
now if that's all right for everyone but

940
00:30:25,760 --> 00:30:27,200
yeah join me in thanking

941
00:30:27,200 --> 00:30:29,880
sebastian on the slack thank you again

942
00:30:29,880 --> 00:30:32,880
soon

