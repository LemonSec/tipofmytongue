1
00:00:00,000 --> 00:00:02,700
speaker so our next speaker coming up

2
00:00:02,700 --> 00:00:06,509
here is Mike Milner hey Mike how are you

3
00:00:06,509 --> 00:00:09,620
good thanks how's it going

4
00:00:09,620 --> 00:00:12,509
very good so you're director of

5
00:00:12,509 --> 00:00:14,639
application security technology at Trend

6
00:00:14,639 --> 00:00:18,539
Micro that's right I manage product

7
00:00:18,539 --> 00:00:21,000
strategy for our cloud one application

8
00:00:21,000 --> 00:00:24,869
security products okay terrific well so

9
00:00:24,869 --> 00:00:25,910
Mike's going to talk to us about

10
00:00:25,910 --> 00:00:28,650
observability for security and audit and

11
00:00:28,650 --> 00:00:31,380
I can I got a pretty good idea what that

12
00:00:31,380 --> 00:00:33,149
means but I'm gonna let you just take it

13
00:00:33,149 --> 00:00:35,040
away and explain it to them right after

14
00:00:35,040 --> 00:00:37,920
I remind everybody put your questions

15
00:00:37,920 --> 00:00:41,010
into the Q&A tab to the right of the

16
00:00:41,010 --> 00:00:43,649
screen here and when we get to the end

17
00:00:43,649 --> 00:00:45,960
of Mike's talk we'll be able to address

18
00:00:45,960 --> 00:00:47,670
those questions for you as well

19
00:00:47,670 --> 00:00:50,190
so without further ado here you go Mike

20
00:00:50,190 --> 00:00:53,820
I'm gonna turn it over to you great

21
00:00:53,820 --> 00:00:56,340
thank you very much so as I said my name

22
00:00:56,340 --> 00:00:59,430
is Mike I'm an engineer and a developer

23
00:00:59,430 --> 00:01:01,800
and I've been working in the security

24
00:01:01,800 --> 00:01:06,860
space for just under 20 years now so

25
00:01:06,860 --> 00:01:09,390
first I want to start this talk by

26
00:01:09,390 --> 00:01:12,049
saying hello from Nova Scotia Canada I

27
00:01:12,049 --> 00:01:14,340
want to send up my hope that everyone's

28
00:01:14,340 --> 00:01:16,860
staying safe and a big thank you to all

29
00:01:16,860 --> 00:01:21,240
of you for staying home you can see love

30
00:01:21,240 --> 00:01:24,750
from my daughter up here as well and of

31
00:01:24,750 --> 00:01:26,130
course big thank you to the event

32
00:01:26,130 --> 00:01:28,350
organizers thank you so much for making

33
00:01:28,350 --> 00:01:30,180
all this possible and thank you to

34
00:01:30,180 --> 00:01:32,159
everyone for all the help you're giving

35
00:01:32,159 --> 00:01:37,200
to support the kovat 19 efforts so I

36
00:01:37,200 --> 00:01:39,180
spend a lot of my time thinking about

37
00:01:39,180 --> 00:01:41,790
applications security as I said I

38
00:01:41,790 --> 00:01:44,670
managed product strategy for part of

39
00:01:44,670 --> 00:01:46,979
cloud one we focus a lot on protecting

40
00:01:46,979 --> 00:01:50,070
modern applications in the cloud with

41
00:01:50,070 --> 00:01:53,850
serverless technologies OPSEC is not a

42
00:01:53,850 --> 00:01:57,270
new field the first public disclosure of

43
00:01:57,270 --> 00:01:59,790
our discussion I should say of SQL

44
00:01:59,790 --> 00:02:04,140
injection happened back in 1998 but like

45
00:02:04,140 --> 00:02:05,939
anything I'm always looking at other

46
00:02:05,939 --> 00:02:07,680
industries other parts of our own

47
00:02:07,680 --> 00:02:10,050
industry for inspiration on how we can

48
00:02:10,050 --> 00:02:10,780
make

49
00:02:10,780 --> 00:02:14,740
OPSEC better observability has become a

50
00:02:14,740 --> 00:02:17,230
bit of a catch-all term for in my

51
00:02:17,230 --> 00:02:19,569
opinion a lot of great things coming out

52
00:02:19,569 --> 00:02:22,900
of or tied with the DevOps culture the

53
00:02:22,900 --> 00:02:26,830
DevOps movement this idea that if you

54
00:02:26,830 --> 00:02:30,190
can't measure it you can't improve it so

55
00:02:30,190 --> 00:02:32,140
I want to take a look at some of these

56
00:02:32,140 --> 00:02:34,900
DevOps changes and technology that's

57
00:02:34,900 --> 00:02:37,810
really enabled DevOps for some

58
00:02:37,810 --> 00:02:44,170
inspiration depending on your industry

59
00:02:44,170 --> 00:02:46,840
and and perhaps how long you've been in

60
00:02:46,840 --> 00:02:50,769
the industry you might recognize this if

61
00:02:50,769 --> 00:02:53,320
you've ever used V PC networking and

62
00:02:53,320 --> 00:02:55,209
something like Amazon you know this is

63
00:02:55,209 --> 00:02:56,680
what it used to look like before the

64
00:02:56,680 --> 00:03:00,010
cloud I'm starting with this picture

65
00:03:00,010 --> 00:03:02,590
because it it Ellis traits in my minds

66
00:03:02,590 --> 00:03:06,640
one of the big shifts and an enabler zuv

67
00:03:06,640 --> 00:03:10,510
DevOps this concept of cloud API is

68
00:03:10,510 --> 00:03:14,200
defining infrastructure all of this

69
00:03:14,200 --> 00:03:18,400
complexity can be reduced to some API

70
00:03:18,400 --> 00:03:21,760
calls that are completely reproducible

71
00:03:21,760 --> 00:03:25,630
and going even further you can manage

72
00:03:25,630 --> 00:03:29,890
all of the definition of this in files

73
00:03:29,890 --> 00:03:31,840
that can be version controlled and

74
00:03:31,840 --> 00:03:34,239
changes can be peer reviewed this idea

75
00:03:34,239 --> 00:03:38,530
of infrastructure is code so this

76
00:03:38,530 --> 00:03:40,480
changed this technology that's really

77
00:03:40,480 --> 00:03:44,109
enabled DevOps is also really great from

78
00:03:44,109 --> 00:03:46,150
a security perspective by having

79
00:03:46,150 --> 00:03:48,430
everything controlled by an API and

80
00:03:48,430 --> 00:03:51,519
version controlled in files makes it

81
00:03:51,519 --> 00:03:54,340
very easy to to log and track all the

82
00:03:54,340 --> 00:03:57,070
changes and see why changes were made

83
00:03:57,070 --> 00:03:59,609
and go back in time using something like

84
00:03:59,609 --> 00:04:02,470
AWS cloud trail to understand exactly

85
00:04:02,470 --> 00:04:05,470
what was changed when and by whom

86
00:04:05,470 --> 00:04:09,730
I mean I look at this picture and you

87
00:04:09,730 --> 00:04:11,560
can kinda see just there in the middle

88
00:04:11,560 --> 00:04:13,180
what's that little yellow wire that

89
00:04:13,180 --> 00:04:16,180
snakes over to the blue side that's

90
00:04:16,180 --> 00:04:19,000
supposed to be there how long has it

91
00:04:19,000 --> 00:04:21,849
been there who put it there that's hard

92
00:04:21,849 --> 00:04:23,919
to answer when it's physical

93
00:04:23,919 --> 00:04:24,730
infrastructure

94
00:04:24,730 --> 00:04:27,280
but much easier to answer when you can

95
00:04:27,280 --> 00:04:28,930
leverage these cloud technologies to

96
00:04:28,930 --> 00:04:32,290
really dig in and understand so how does

97
00:04:32,290 --> 00:04:38,440
this apply to application security in my

98
00:04:38,440 --> 00:04:41,860
kind of hand-wavy definitions I kind of

99
00:04:41,860 --> 00:04:44,200
look at DevOps is really continuously

100
00:04:44,200 --> 00:04:46,840
ensuring your app works the way that you

101
00:04:46,840 --> 00:04:52,420
intend it to work and app SEC is really

102
00:04:52,420 --> 00:04:55,630
continuously ensuring that nobody can

103
00:04:55,630 --> 00:04:57,040
make your app work in a way that you

104
00:04:57,040 --> 00:05:00,460
didn't intend it to work so you can see

105
00:05:00,460 --> 00:05:04,270
they're they're very similar so can we

106
00:05:04,270 --> 00:05:06,160
leverage some of the same technologies

107
00:05:06,160 --> 00:05:10,750
the same mindset the same tooling to get

108
00:05:10,750 --> 00:05:12,310
some of the same benefits that we're

109
00:05:12,310 --> 00:05:14,230
seeing in DevOps which is completely

110
00:05:14,230 --> 00:05:17,200
transforming the industry and kind of

111
00:05:17,200 --> 00:05:19,690
get some of these improvements in app

112
00:05:19,690 --> 00:05:21,550
sec as well I'm sure you've heard the

113
00:05:21,550 --> 00:05:25,840
name dev sac ops it's really this

114
00:05:25,840 --> 00:05:28,060
concept of of using some of the same

115
00:05:28,060 --> 00:05:30,160
technologies and working closer together

116
00:05:30,160 --> 00:05:32,500
to get some better outcomes on all sides

117
00:05:32,500 --> 00:05:37,090
I find these definitions highlight some

118
00:05:37,090 --> 00:05:38,920
of the the differences in how we look at

119
00:05:38,920 --> 00:05:42,190
things if you've got a bug in your

120
00:05:42,190 --> 00:05:44,920
software and a user is using it

121
00:05:44,920 --> 00:05:46,570
something's not going to work the way

122
00:05:46,570 --> 00:05:48,520
they want it to and they're going to

123
00:05:48,520 --> 00:05:50,620
complain they're gonna open a bug so you

124
00:05:50,620 --> 00:05:53,370
usually hear about bugs fairly quickly

125
00:05:53,370 --> 00:05:59,020
maybe too quickly for some and that is

126
00:05:59,020 --> 00:06:01,930
kind of a short time window from bug -

127
00:06:01,930 --> 00:06:03,790
when you're aware of the bug and when

128
00:06:03,790 --> 00:06:06,670
you can try to fix the bug another big

129
00:06:06,670 --> 00:06:09,430
difference between kind of that idea of

130
00:06:09,430 --> 00:06:12,370
developing a knapsack bug versus

131
00:06:12,370 --> 00:06:17,590
vulnerability is the intent behind it if

132
00:06:17,590 --> 00:06:20,380
a user stumbles across a bug they want

133
00:06:20,380 --> 00:06:21,700
it fixed because they want to use the

134
00:06:21,700 --> 00:06:24,310
product successfully if an attacker

135
00:06:24,310 --> 00:06:27,370
finds a vulnerability they really don't

136
00:06:27,370 --> 00:06:28,690
want you to know about it they don't

137
00:06:28,690 --> 00:06:30,550
want you to fix it because they want

138
00:06:30,550 --> 00:06:33,220
time to exploit it to cause harm to use

139
00:06:33,220 --> 00:06:36,430
your resources so the disclosure cycle

140
00:06:36,430 --> 00:06:38,590
for vulnerabilities is usually

141
00:06:38,590 --> 00:06:42,720
much longer than four bugs a

142
00:06:42,720 --> 00:06:45,010
vulnerability might exist in your system

143
00:06:45,010 --> 00:06:47,440
for a long time it might take you a long

144
00:06:47,440 --> 00:06:49,150
time to find it there's countless

145
00:06:49,150 --> 00:06:51,730
vulnerabilities that you might never

146
00:06:51,730 --> 00:06:53,320
find and hopefully attackers don't

147
00:06:53,320 --> 00:06:56,170
either but that time scale difference

148
00:06:56,170 --> 00:06:59,530
really changes how we investigate and

149
00:06:59,530 --> 00:07:02,950
look at them so let's take a look at

150
00:07:02,950 --> 00:07:05,980
some of the DevOps tooling that lets us

151
00:07:05,980 --> 00:07:08,230
move fast and fix bugs and see where it

152
00:07:08,230 --> 00:07:12,340
can help us for app sec so I've just put

153
00:07:12,340 --> 00:07:14,650
a handful of examples up here that have

154
00:07:14,650 --> 00:07:18,970
been very helpful for solving bugs you

155
00:07:18,970 --> 00:07:21,490
know solving production issues slowdowns

156
00:07:21,490 --> 00:07:23,880
that type of thing system monitoring

157
00:07:23,880 --> 00:07:26,650
looking at how your systems are

158
00:07:26,650 --> 00:07:29,560
performing CPU memory those kind of

159
00:07:29,560 --> 00:07:32,230
traditional metrics network monitoring

160
00:07:32,230 --> 00:07:34,660
for really deep problems if something's

161
00:07:34,660 --> 00:07:36,190
really not working being able to go

162
00:07:36,190 --> 00:07:38,380
right down to the network level look at

163
00:07:38,380 --> 00:07:40,900
packets look at IP addresses trace

164
00:07:40,900 --> 00:07:43,030
exactly what's happening hugely

165
00:07:43,030 --> 00:07:44,350
beneficial if you've got issues

166
00:07:44,350 --> 00:07:47,620
affecting that low level more on the

167
00:07:47,620 --> 00:07:49,690
application side you've got just good

168
00:07:49,690 --> 00:07:51,910
old logs your application is logging

169
00:07:51,910 --> 00:07:54,730
data if there's a bug you can go in and

170
00:07:54,730 --> 00:07:56,440
look at those logs see if there's

171
00:07:56,440 --> 00:07:58,000
anything there that will give you a clue

172
00:07:58,000 --> 00:08:00,730
if not maybe you adjust the log levels

173
00:08:00,730 --> 00:08:03,160
put it down to debug look at those debug

174
00:08:03,160 --> 00:08:05,670
log level data much more information

175
00:08:05,670 --> 00:08:08,260
hopefully help you again zero in on the

176
00:08:08,260 --> 00:08:11,020
bug fix it deploy that code and then

177
00:08:11,020 --> 00:08:12,640
usually you're gonna bump the log level

178
00:08:12,640 --> 00:08:17,110
back up to the default APM application

179
00:08:17,110 --> 00:08:18,970
performance monitoring and distributed

180
00:08:18,970 --> 00:08:22,300
tracing this idea of being able to look

181
00:08:22,300 --> 00:08:24,790
at a single request coming in and track

182
00:08:24,790 --> 00:08:28,320
all of the interactions as it hits this

183
00:08:28,320 --> 00:08:31,960
various parts of your infrastructure can

184
00:08:31,960 --> 00:08:34,630
also be hugely valuable from a security

185
00:08:34,630 --> 00:08:36,970
investigation point of view if somebody

186
00:08:36,970 --> 00:08:39,429
can send a bad request tracing where

187
00:08:39,429 --> 00:08:41,650
that hits if it's hitting other micro

188
00:08:41,650 --> 00:08:44,860
services generating SQL queries API

189
00:08:44,860 --> 00:08:47,140
queries all these things that are very

190
00:08:47,140 --> 00:08:49,840
useful for understanding how a system

191
00:08:49,840 --> 00:08:52,390
works for a bug finding

192
00:08:52,390 --> 00:08:55,329
is also very useful for for security

193
00:08:55,329 --> 00:08:58,240
investigation and then the last one

194
00:08:58,240 --> 00:09:00,760
version tracking really just all of that

195
00:09:00,760 --> 00:09:03,940
whole build pipeline understanding what

196
00:09:03,940 --> 00:09:06,670
code is running where when it's changed

197
00:09:06,670 --> 00:09:09,550
why it's changed how it effects that's

198
00:09:09,550 --> 00:09:11,980
hugely important for DevOps but if

199
00:09:11,980 --> 00:09:13,779
there's a bug in that code that ends up

200
00:09:13,779 --> 00:09:15,339
being a vulnerability this is also

201
00:09:15,339 --> 00:09:21,550
hugely valuable for security so all of

202
00:09:21,550 --> 00:09:25,260
this data like I said is useful for both

203
00:09:25,260 --> 00:09:27,880
but because of that time scale

204
00:09:27,880 --> 00:09:30,010
difference there's a bit of an issue

205
00:09:30,010 --> 00:09:33,550
with that for bugs you're usually

206
00:09:33,550 --> 00:09:37,180
looking at very short term you want to

207
00:09:37,180 --> 00:09:40,300
understand what's wrong with your

208
00:09:40,300 --> 00:09:41,980
product right now what's wrong with the

209
00:09:41,980 --> 00:09:44,079
system now or at least in the very short

210
00:09:44,079 --> 00:09:47,050
history because these bugs you generally

211
00:09:47,050 --> 00:09:48,970
find them quickly you can fix them

212
00:09:48,970 --> 00:09:50,470
quickly you don't need to retain this

213
00:09:50,470 --> 00:09:54,610
data for that long with a security

214
00:09:54,610 --> 00:09:58,089
perspective that shifts event like we

215
00:09:58,089 --> 00:10:00,250
talked about on the last slide and the

216
00:10:00,250 --> 00:10:01,779
security side of things you might not

217
00:10:01,779 --> 00:10:04,060
even know there's a vulnerability for a

218
00:10:04,060 --> 00:10:08,829
long time and when you do find it if you

219
00:10:08,829 --> 00:10:10,720
find it yourself you want to be able to

220
00:10:10,720 --> 00:10:13,930
look back and understand how that's been

221
00:10:13,930 --> 00:10:16,329
impacting your infrastructure some great

222
00:10:16,329 --> 00:10:18,940
examples I'm sure you know if the

223
00:10:18,940 --> 00:10:21,310
shellshock phoner ability this is a

224
00:10:21,310 --> 00:10:22,959
vulnerability that was intrinsic and a

225
00:10:22,959 --> 00:10:26,050
lot of applications for a long time but

226
00:10:26,050 --> 00:10:28,690
once it was disclosed we people were

227
00:10:28,690 --> 00:10:30,399
able to quickly fix their infrastructure

228
00:10:30,399 --> 00:10:33,910
hopefully quickly but what you'd really

229
00:10:33,910 --> 00:10:35,860
like to do at that point is look back in

230
00:10:35,860 --> 00:10:38,890
history and say were we being exploited

231
00:10:38,890 --> 00:10:40,660
by this did we ever see this on our

232
00:10:40,660 --> 00:10:44,490
infrastructure that's an example where

233
00:10:44,490 --> 00:10:47,079
having a long history of some of this

234
00:10:47,079 --> 00:10:50,740
data would be hugely valuable the struts

235
00:10:50,740 --> 00:10:54,490
to vulnerability or vulnerabilities when

236
00:10:54,490 --> 00:10:56,949
those were disclosed being able to look

237
00:10:56,949 --> 00:10:59,130
at your infrastructure today understand

238
00:10:59,130 --> 00:11:01,720
when your fixes are going on but then

239
00:11:01,720 --> 00:11:04,089
also look back in history to understand

240
00:11:04,089 --> 00:11:06,010
we're seeing this was this hit

241
00:11:06,010 --> 00:11:09,580
yes hugely valuable a lot of cases you

242
00:11:09,580 --> 00:11:12,040
might find out over a breach after the

243
00:11:12,040 --> 00:11:12,550
fact

244
00:11:12,550 --> 00:11:15,040
maybe information is disclosed somebody

245
00:11:15,040 --> 00:11:17,500
finds it on the dark web and now you

246
00:11:17,500 --> 00:11:19,900
have to try to figure out where that

247
00:11:19,900 --> 00:11:22,660
data came from being able to look back

248
00:11:22,660 --> 00:11:25,390
in history find out what requests were

249
00:11:25,390 --> 00:11:27,010
coming in what tables they were hitting

250
00:11:27,010 --> 00:11:29,770
all of that can be hugely valuable but

251
00:11:29,770 --> 00:11:32,230
it means storing data for a lot longer

252
00:11:32,230 --> 00:11:35,230
than these tools are traditionally

253
00:11:35,230 --> 00:11:38,820
designed to do so what I wanted to do is

254
00:11:38,820 --> 00:11:41,140
kind of look at that concept look at

255
00:11:41,140 --> 00:11:42,940
these tools look at those types of

256
00:11:42,940 --> 00:11:46,270
security investigations and try to kind

257
00:11:46,270 --> 00:11:48,700
of come up with what would be the

258
00:11:48,700 --> 00:11:50,350
perfect world if we could kind of build

259
00:11:50,350 --> 00:11:54,130
something ourselves so if we were able

260
00:11:54,130 --> 00:11:56,680
to keep this data for longer what would

261
00:11:56,680 --> 00:12:01,000
we want to keep so of course everything

262
00:12:01,000 --> 00:12:03,970
right now that's not always possible but

263
00:12:03,970 --> 00:12:05,740
here's some examples that I thought of

264
00:12:05,740 --> 00:12:07,630
just off the top of my head that could

265
00:12:07,630 --> 00:12:09,580
be very beneficial for security

266
00:12:09,580 --> 00:12:13,570
investigation the first packets coming

267
00:12:13,570 --> 00:12:15,340
in you're probably familiar with the

268
00:12:15,340 --> 00:12:18,340
heartbleed vulnerability this was a bug

269
00:12:18,340 --> 00:12:23,140
in the OpenSSL library where in the TLS

270
00:12:23,140 --> 00:12:25,750
session establishment there was actually

271
00:12:25,750 --> 00:12:27,430
a vulnerability that could be used to

272
00:12:27,430 --> 00:12:31,480
extract processed memory so let's say

273
00:12:31,480 --> 00:12:33,580
let's keep all of the raw packets coming

274
00:12:33,580 --> 00:12:36,040
in from the internet let's store those

275
00:12:36,040 --> 00:12:38,410
so that if we ever find out about a new

276
00:12:38,410 --> 00:12:40,600
heartbleed we can go back through that

277
00:12:40,600 --> 00:12:42,340
was raw packets and find out whether

278
00:12:42,340 --> 00:12:44,920
anybody was exploiting their systems

279
00:12:44,920 --> 00:12:48,160
using that technique after TLS is

280
00:12:48,160 --> 00:12:50,710
terminated let's keep the raw HTTP

281
00:12:50,710 --> 00:12:53,170
packets that gives us every byte that's

282
00:12:53,170 --> 00:12:55,120
coming in off the network our HTTP

283
00:12:55,120 --> 00:12:58,300
headers the request body payloads JSON

284
00:12:58,300 --> 00:13:01,570
XML whatever it is let's just keep it

285
00:13:01,570 --> 00:13:05,860
all in there as HTTP headers as well

286
00:13:05,860 --> 00:13:08,350
those are big factor in a lot of attacks

287
00:13:08,350 --> 00:13:11,650
so let's keep those kind of - the

288
00:13:11,650 --> 00:13:15,250
distributed tracing an APM concept let's

289
00:13:15,250 --> 00:13:18,160
keep these request IDs of the requests

290
00:13:18,160 --> 00:13:18,960
coming in that

291
00:13:18,960 --> 00:13:20,970
that unique trace header that we use to

292
00:13:20,970 --> 00:13:22,680
track all of those requests through the

293
00:13:22,680 --> 00:13:25,610
system let's keep those as well

294
00:13:25,610 --> 00:13:27,720
assuming a lot of these requests are

295
00:13:27,720 --> 00:13:30,090
authenticated request let's keep the

296
00:13:30,090 --> 00:13:32,580
session IDs so that we can then trace

297
00:13:32,580 --> 00:13:34,050
those back into our authentication

298
00:13:34,050 --> 00:13:37,200
system so that for every request we know

299
00:13:37,200 --> 00:13:40,950
who did it what user count when when

300
00:13:40,950 --> 00:13:42,090
they authenticated how they

301
00:13:42,090 --> 00:13:44,850
authenticated and then just this concept

302
00:13:44,850 --> 00:13:47,460
of runtime IDs so let's keep track of

303
00:13:47,460 --> 00:13:49,230
what parts of our infrastructure are

304
00:13:49,230 --> 00:13:52,020
involved in serving this request what

305
00:13:52,020 --> 00:13:54,060
version of code was running at that

306
00:13:54,060 --> 00:13:56,790
moment so that if we do find a bug in

307
00:13:56,790 --> 00:13:59,250
historical software we can look at all

308
00:13:59,250 --> 00:14:01,020
the requests that hit a particular

309
00:14:01,020 --> 00:14:04,560
version of our code and while we're at

310
00:14:04,560 --> 00:14:07,530
it all that logging why not keep all the

311
00:14:07,530 --> 00:14:09,180
logs that were generated as part of

312
00:14:09,180 --> 00:14:12,060
every request and if we're able to if

313
00:14:12,060 --> 00:14:14,190
our infrastructure allows it can we just

314
00:14:14,190 --> 00:14:16,410
keep the debug block records for all of

315
00:14:16,410 --> 00:14:20,310
these as well if our applications making

316
00:14:20,310 --> 00:14:22,440
queries can we keep the SQL queries

317
00:14:22,440 --> 00:14:24,690
associated with each request so that

318
00:14:24,690 --> 00:14:26,940
every request coming in if it made

319
00:14:26,940 --> 00:14:29,610
selects or modified data can we keep all

320
00:14:29,610 --> 00:14:33,900
that data now two big problems that jump

321
00:14:33,900 --> 00:14:36,930
out immediately is it's a lot of data if

322
00:14:36,930 --> 00:14:38,400
you're storing this for every request

323
00:14:38,400 --> 00:14:40,400
and you want to keep it for a long time

324
00:14:40,400 --> 00:14:42,360
that's going to be expensive

325
00:14:42,360 --> 00:14:45,180
a lot of that mindset comes back to

326
00:14:45,180 --> 00:14:46,650
those original tools that are designed

327
00:14:46,650 --> 00:14:49,740
for DevOps because they're designed to

328
00:14:49,740 --> 00:14:52,380
look at near-term data they're optimized

329
00:14:52,380 --> 00:14:55,200
for fast recall of that very recent data

330
00:14:55,200 --> 00:14:57,870
and often because of that it's very

331
00:14:57,870 --> 00:15:01,050
expensive to keep data for a long time

332
00:15:01,050 --> 00:15:03,060
because they're designed to keep that

333
00:15:03,060 --> 00:15:06,690
data in hot indexes fastly queryable so

334
00:15:06,690 --> 00:15:08,610
you're either paying a huge amount to

335
00:15:08,610 --> 00:15:11,960
store that data in those fast indexes or

336
00:15:11,960 --> 00:15:13,800
maybe you're just slowing down

337
00:15:13,800 --> 00:15:15,870
everything by bogging it down with all

338
00:15:15,870 --> 00:15:18,810
this old data so storing this volume of

339
00:15:18,810 --> 00:15:21,680
data might be very expensive

340
00:15:21,680 --> 00:15:24,830
there's also definitely issues with

341
00:15:24,830 --> 00:15:28,320
storing of personal information inside

342
00:15:28,320 --> 00:15:31,590
all of this you know these raw packets

343
00:15:31,590 --> 00:15:32,610
these detail

344
00:15:32,610 --> 00:15:34,740
of a request is potentially a lot of

345
00:15:34,740 --> 00:15:37,110
personal information so depending on

346
00:15:37,110 --> 00:15:39,329
your industry your may or may not be

347
00:15:39,329 --> 00:15:41,670
able to store this at the raw level you

348
00:15:41,670 --> 00:15:43,350
might have to strip out some personal

349
00:15:43,350 --> 00:15:46,200
data or sensitive data obviously you

350
00:15:46,200 --> 00:15:48,149
need to comply with that but for this

351
00:15:48,149 --> 00:15:50,160
example I'm just looking at the scenario

352
00:15:50,160 --> 00:15:54,390
of what if we could keep it off so what

353
00:15:54,390 --> 00:15:57,510
I did is I went through and I picked a

354
00:15:57,510 --> 00:16:01,380
sample API in this case from a real

355
00:16:01,380 --> 00:16:03,779
running infrastructure and I just tried

356
00:16:03,779 --> 00:16:05,519
to attach some numbers onto this data

357
00:16:05,519 --> 00:16:08,220
how big is it looking at those raw

358
00:16:08,220 --> 00:16:11,130
packets the generator requests the raw

359
00:16:11,130 --> 00:16:13,320
packets of a request itself the headers

360
00:16:13,320 --> 00:16:16,320
all those queries logs and for this

361
00:16:16,320 --> 00:16:20,459
particular API all of this data adds up

362
00:16:20,459 --> 00:16:24,740
to around three kilobytes per request

363
00:16:24,740 --> 00:16:26,850
now clearly this is going to be

364
00:16:26,850 --> 00:16:29,220
different if this is a maybe a web app

365
00:16:29,220 --> 00:16:32,160
that's serving giant HTML pages or big

366
00:16:32,160 --> 00:16:35,540
CSS files or JavaScript or if it's

367
00:16:35,540 --> 00:16:37,890
serving images or something like that

368
00:16:37,890 --> 00:16:39,990
but this is just one example with an API

369
00:16:39,990 --> 00:16:43,170
so all of that raw data works out to

370
00:16:43,170 --> 00:16:46,100
around three kilobytes per request and

371
00:16:46,100 --> 00:16:51,690
not compressed so that'll give us a data

372
00:16:51,690 --> 00:16:53,970
point again might be very different for

373
00:16:53,970 --> 00:16:55,949
you for your apps but it gives us

374
00:16:55,949 --> 00:17:01,740
something to talk about and if we look

375
00:17:01,740 --> 00:17:05,069
at that volume of data and let's try to

376
00:17:05,069 --> 00:17:06,929
categorize it in terms of overall

377
00:17:06,929 --> 00:17:10,619
storage so I picked some sample kind of

378
00:17:10,619 --> 00:17:12,449
numbers of what if we had a million

379
00:17:12,449 --> 00:17:16,410
requests per day we saw from the last

380
00:17:16,410 --> 00:17:18,209
slide that we'd be looking at around

381
00:17:18,209 --> 00:17:20,760
three kilobytes per request so that

382
00:17:20,760 --> 00:17:23,429
works out to roughly three gigabytes per

383
00:17:23,429 --> 00:17:29,030
day of new data generated now if your

384
00:17:29,030 --> 00:17:31,470
system is different if you have ten

385
00:17:31,470 --> 00:17:33,660
million instead of one million you're

386
00:17:33,660 --> 00:17:35,070
gonna have ten times the data 30

387
00:17:35,070 --> 00:17:36,960
gigabytes instead of three so obviously

388
00:17:36,960 --> 00:17:38,820
it will change depending on your

389
00:17:38,820 --> 00:17:41,490
application but again this is a point to

390
00:17:41,490 --> 00:17:44,910
talk about so three gigabytes per day

391
00:17:44,910 --> 00:17:46,470
what if we just wanted to

392
00:17:46,470 --> 00:17:51,059
store that long-term storage so I'm very

393
00:17:51,059 --> 00:17:53,970
familiar with AWS so I went to the AWS

394
00:17:53,970 --> 00:17:57,780
price list for s3 this data is not going

395
00:17:57,780 --> 00:18:00,240
to be looked at all the time it's mainly

396
00:18:00,240 --> 00:18:03,049
for investigating so I kind of went with

397
00:18:03,049 --> 00:18:06,030
infrequent access the kind of archival

398
00:18:06,030 --> 00:18:09,780
storage levels with s3 the first is s3

399
00:18:09,780 --> 00:18:12,780
standard infrequent access it's still

400
00:18:12,780 --> 00:18:15,210
millisecond response time but it's

401
00:18:15,210 --> 00:18:18,090
designed for you know less less frequent

402
00:18:18,090 --> 00:18:20,360
access and that works out to be around

403
00:18:20,360 --> 00:18:23,429
one and a quarter cents per gigabyte per

404
00:18:23,429 --> 00:18:27,240
month h3 sorry s3 glacier

405
00:18:27,240 --> 00:18:30,360
a little bit longer retrieval time or

406
00:18:30,360 --> 00:18:32,730
slower retrieval time still well within

407
00:18:32,730 --> 00:18:34,770
the window of what we would need for

408
00:18:34,770 --> 00:18:37,650
this type of application and for that

409
00:18:37,650 --> 00:18:40,590
it's you know 0.4 cents per gigabyte per

410
00:18:40,590 --> 00:18:43,559
month and then for the really slow stuff

411
00:18:43,559 --> 00:18:47,450
they've got s3 glacier deep archive

412
00:18:47,450 --> 00:18:51,230
12-hour access time but as you can see

413
00:18:51,230 --> 00:18:56,220
even cheaper again so here's some

414
00:18:56,220 --> 00:18:58,350
technology enabled by the cloud just

415
00:18:58,350 --> 00:18:59,909
like that stuff we talked about with

416
00:18:59,909 --> 00:19:03,120
api's and cloud trail can we leverage

417
00:19:03,120 --> 00:19:05,159
some of this cloud technology and cloud

418
00:19:05,159 --> 00:19:08,520
pricing to perhaps make some of this

419
00:19:08,520 --> 00:19:10,260
long-term retrieval for security

420
00:19:10,260 --> 00:19:12,840
possible where maybe it wouldn't have

421
00:19:12,840 --> 00:19:16,530
been possible before so let's do the

422
00:19:16,530 --> 00:19:20,730
math if we're looking at let's say one

423
00:19:20,730 --> 00:19:23,220
year retention so we want to keep all

424
00:19:23,220 --> 00:19:26,280
this stuff for a full year that three

425
00:19:26,280 --> 00:19:30,260
kilobytes per request multiplied out to

426
00:19:30,260 --> 00:19:33,480
a million requests works out to be just

427
00:19:33,480 --> 00:19:36,450
over one terabyte of data being retained

428
00:19:36,450 --> 00:19:40,650
at any given time if we multiply out the

429
00:19:40,650 --> 00:19:44,010
prices s3 infrequent access it works out

430
00:19:44,010 --> 00:19:50,039
it's only about $13 1375 per month you

431
00:19:50,039 --> 00:19:51,929
can see s3 glaciers if it cheaper and

432
00:19:51,929 --> 00:19:54,990
deep archive even cheaper again almost

433
00:19:54,990 --> 00:19:57,870
just a dollar a month in terms of

434
00:19:57,870 --> 00:20:00,020
storage this is huge

435
00:20:00,020 --> 00:20:04,940
this is very very cheap for storage it's

436
00:20:04,940 --> 00:20:08,570
lets us store all this data but a key

437
00:20:08,570 --> 00:20:10,640
part in any system like this we want to

438
00:20:10,640 --> 00:20:12,080
be able to investigate we want to be

439
00:20:12,080 --> 00:20:15,429
able to pull out the data that we need

440
00:20:15,429 --> 00:20:18,740
so again

441
00:20:18,740 --> 00:20:21,400
leveraging some cloud technology I

442
00:20:21,400 --> 00:20:25,850
looked at this feature of AWS s3 select

443
00:20:25,850 --> 00:20:29,990
and s3 Glaser select what this does is

444
00:20:29,990 --> 00:20:32,960
it in a sense lets AWS do the searching

445
00:20:32,960 --> 00:20:35,390
and filtering on their side and you just

446
00:20:35,390 --> 00:20:37,580
retrieve the actual data that matches

447
00:20:37,580 --> 00:20:40,400
your filter as long as you're storing

448
00:20:40,400 --> 00:20:46,190
data in CSV files JSON or park' a format

449
00:20:46,190 --> 00:20:48,050
that's very popular for for big data

450
00:20:48,050 --> 00:20:56,270
searches excuse me if you're storing

451
00:20:56,270 --> 00:20:59,120
your data in one of those formats you

452
00:20:59,120 --> 00:21:02,210
can actually issue an ask a select query

453
00:21:02,210 --> 00:21:06,020
to s3 it's going to look through your

454
00:21:06,020 --> 00:21:08,480
data and take that query that you

455
00:21:08,480 --> 00:21:10,400
specify which looks very much like an

456
00:21:10,400 --> 00:21:13,309
SQL query and it's going to find all the

457
00:21:13,309 --> 00:21:16,550
matching rows and return only those rows

458
00:21:16,550 --> 00:21:20,240
and with JSON and park' you can actually

459
00:21:20,240 --> 00:21:22,130
have nested structures more advanced

460
00:21:22,130 --> 00:21:24,980
structures so you can store all of this

461
00:21:24,980 --> 00:21:27,920
data and when it returns it it can

462
00:21:27,920 --> 00:21:31,070
return it as CSV or JSON that gives you

463
00:21:31,070 --> 00:21:34,820
just the matching rows so that's really

464
00:21:34,820 --> 00:21:37,130
the the next step or the final step in

465
00:21:37,130 --> 00:21:41,059
being able to query this bulk data so

466
00:21:41,059 --> 00:21:43,130
for my hypothetical example that you saw

467
00:21:43,130 --> 00:21:47,900
there it's let's see every request

468
00:21:47,900 --> 00:21:49,970
stored a million requests a day we're

469
00:21:49,970 --> 00:21:52,520
storing that for a year and it's going

470
00:21:52,520 --> 00:21:56,179
to cost us maybe $14 a month

471
00:21:56,179 --> 00:21:58,970
in in terms of raw costs and then the

472
00:21:58,970 --> 00:22:02,270
query costs which we can control as we

473
00:22:02,270 --> 00:22:04,550
make the queries depending on how

474
00:22:04,550 --> 00:22:06,500
frequently we want or sorry I guess how

475
00:22:06,500 --> 00:22:11,090
quickly we want the results so with a

476
00:22:11,090 --> 00:22:13,640
few bits of cloud technology

477
00:22:13,640 --> 00:22:17,420
we're able to really enable some new app

478
00:22:17,420 --> 00:22:19,790
set capability in much the same way that

479
00:22:19,790 --> 00:22:21,980
cloud technology has enabled a lot of

480
00:22:21,980 --> 00:22:25,490
new DevOps technology and I hope it also

481
00:22:25,490 --> 00:22:29,000
serves to to show that maybe you're a

482
00:22:29,000 --> 00:22:31,460
developer and you don't know a lot about

483
00:22:31,460 --> 00:22:33,890
app sack but there's a good chance that

484
00:22:33,890 --> 00:22:35,870
you know a lot about those DevOps tools

485
00:22:35,870 --> 00:22:38,990
that I talked about so if you know a lot

486
00:22:38,990 --> 00:22:40,580
about those tools you actually already

487
00:22:40,580 --> 00:22:42,530
know a lot about how app sack

488
00:22:42,530 --> 00:22:45,530
investigations work so being able to

489
00:22:45,530 --> 00:22:47,540
leverage them for both purposes has a

490
00:22:47,540 --> 00:22:51,650
lot of advantage so next steps for me

491
00:22:51,650 --> 00:22:54,410
for this topic there's a few other

492
00:22:54,410 --> 00:22:56,450
aspects that I wanted to look at as well

493
00:22:56,450 --> 00:22:59,210
so open telemetry is a nice open project

494
00:22:59,210 --> 00:23:02,390
that's designed mainly around APM style

495
00:23:02,390 --> 00:23:05,270
technology this concept of if you're

496
00:23:05,270 --> 00:23:07,100
going to instrument an application and

497
00:23:07,100 --> 00:23:09,890
do deep instrumentation get those SQL

498
00:23:09,890 --> 00:23:12,860
queries the file access can you do it as

499
00:23:12,860 --> 00:23:16,250
well for app sake I mean in the products

500
00:23:16,250 --> 00:23:19,250
that we build we focus a lot on stopping

501
00:23:19,250 --> 00:23:22,100
the bad requests which of course you

502
00:23:22,100 --> 00:23:24,560
want to do but you don't always know

503
00:23:24,560 --> 00:23:26,690
they're bad rate at that moment so

504
00:23:26,690 --> 00:23:28,490
having technology like this to be able

505
00:23:28,490 --> 00:23:30,710
to look at all those requests that you

506
00:23:30,710 --> 00:23:32,990
thought were good and find the bad ones

507
00:23:32,990 --> 00:23:36,950
has a huge value another aspects things

508
00:23:36,950 --> 00:23:39,010
that can be logged application lifecycle

509
00:23:39,010 --> 00:23:42,230
containers and pods starting up stopping

510
00:23:42,230 --> 00:23:44,600
tracking all the versions of code a

511
00:23:44,600 --> 00:23:48,770
lower level tracing eb PF kernel tracing

512
00:23:48,770 --> 00:23:51,200
OS tracing looking at files being

513
00:23:51,200 --> 00:23:53,990
accessed processes being start hosts

514
00:23:53,990 --> 00:23:55,670
network connections being established

515
00:23:55,670 --> 00:23:59,000
all that stuff again hugely hugely

516
00:23:59,000 --> 00:24:01,820
valuable so I hope some of this has

517
00:24:01,820 --> 00:24:03,920
given you a bit of inspiration

518
00:24:03,920 --> 00:24:06,470
I hope it's given you a bit of a thought

519
00:24:06,470 --> 00:24:08,540
on maybe if you're looking at things

520
00:24:08,540 --> 00:24:10,970
from the DevOps perspective how that can

521
00:24:10,970 --> 00:24:12,980
be beneficial for security if you're

522
00:24:12,980 --> 00:24:14,300
looking at the security perspective

523
00:24:14,300 --> 00:24:16,550
maybe you should be tapping into some of

524
00:24:16,550 --> 00:24:18,890
these DevOps tools that developers are

525
00:24:18,890 --> 00:24:21,830
already using these aren't two separate

526
00:24:21,830 --> 00:24:23,480
disciplines they're definitely tightly

527
00:24:23,480 --> 00:24:26,390
coupled so thank you very much for

528
00:24:26,390 --> 00:24:27,470
taking the time with

529
00:24:27,470 --> 00:24:32,809
today and that's all I have for you on

530
00:24:32,809 --> 00:24:34,010
the auctions

531
00:24:34,010 --> 00:24:36,919
well thank you Mike so much first of all

532
00:24:36,919 --> 00:24:39,500
for a great presentation and a reminder

533
00:24:39,500 --> 00:24:41,000
again folks if you have questions for

534
00:24:41,000 --> 00:24:43,039
Mike you can put them into the Q&A

535
00:24:43,039 --> 00:24:46,480
widget to the right of the stream

536
00:24:46,480 --> 00:24:49,880
looking right now I don't see questions

537
00:24:49,880 --> 00:24:56,419
out there at the moment just somebody in

538
00:24:56,419 --> 00:24:57,890
slack saying that you're a fantastic

539
00:24:57,890 --> 00:25:00,440
presenter I have to agree oh thank you

540
00:25:00,440 --> 00:25:03,919
very much you know are you gonna be

541
00:25:03,919 --> 00:25:05,510
around in slack for a little while Mike

542
00:25:05,510 --> 00:25:07,730
yes I'll be in slack you can find me

543
00:25:07,730 --> 00:25:09,980
Mike Milner you can also reach me at

544
00:25:09,980 --> 00:25:11,929
Twitter I just noticed I don't actually

545
00:25:11,929 --> 00:25:13,970
have it up on my last slide but at

546
00:25:13,970 --> 00:25:16,610
secret Mike you can find it in the venue

547
00:25:16,610 --> 00:25:18,110
feel free to reach out with questions

548
00:25:18,110 --> 00:25:20,720
suggestions inspiration I love hearing

549
00:25:20,720 --> 00:25:23,120
about it all someone else thinks you

550
00:25:23,120 --> 00:25:25,549
have a great radio voice are you with

551
00:25:25,549 --> 00:25:25,970
that

552
00:25:25,970 --> 00:25:29,120
so I'd have to agree awesome well thank

553
00:25:29,120 --> 00:25:31,730
you so much Mike we'll let you go then

554
00:25:31,730 --> 00:25:36,820
and folks we're gonna take real

