1
00:00:00,000 --> 00:00:02,399
rocha can you hear me yes i can hear you

2
00:00:02,399 --> 00:00:04,480
hello perfect stuff

3
00:00:04,480 --> 00:00:07,120
so piatra if you share your screen your

4
00:00:07,120 --> 00:00:08,960
screen is shared already so let me add

5
00:00:08,960 --> 00:00:09,280
that

6
00:00:09,280 --> 00:00:12,719
in and um whereabouts in the world are

7
00:00:12,719 --> 00:00:14,719
you peatra

8
00:00:14,719 --> 00:00:17,440
uh well a few words about me i'm uh

9
00:00:17,440 --> 00:00:19,199
self-employed as a remote freelancer

10
00:00:19,199 --> 00:00:20,720
gunner and this is actually the place

11
00:00:20,720 --> 00:00:22,320
where i've been working for the past few

12
00:00:22,320 --> 00:00:22,880
years

13
00:00:22,880 --> 00:00:24,640
i also work as a trainer for a few

14
00:00:24,640 --> 00:00:26,720
companies one of them being samantha's

15
00:00:26,720 --> 00:00:29,679
and i also give talks about java

16
00:00:29,679 --> 00:00:31,199
architecture and stuff

17
00:00:31,199 --> 00:00:32,800
actually today i was supposed to give a

18
00:00:32,800 --> 00:00:35,040
talk on devops florence about java 14

19
00:00:35,040 --> 00:00:37,760
to dive deeply but unfortunately this

20
00:00:37,760 --> 00:00:39,040
can happen so

21
00:00:39,040 --> 00:00:41,040
uh fortunately we have this online

22
00:00:41,040 --> 00:00:43,280
conversation uh today

23
00:00:43,280 --> 00:00:46,239
absolutely so you've got um 30 minutes

24
00:00:46,239 --> 00:00:46,640
now

25
00:00:46,640 --> 00:00:48,960
um we'll uh we'll have some q a before

26
00:00:48,960 --> 00:00:50,559
the end of that and i'm going to hand

27
00:00:50,559 --> 00:00:51,760
over to you

28
00:00:51,760 --> 00:00:54,719
yeah the next talk thanks very much

29
00:00:54,719 --> 00:00:55,440
thank you

30
00:00:55,440 --> 00:00:58,320
so just to finish talking about myself

31
00:00:58,320 --> 00:00:58,960
it's uh

32
00:00:58,960 --> 00:01:01,920
i've been uh with java since 1.3 and in

33
00:01:01,920 --> 00:01:04,080
backported some code to 1.2

34
00:01:04,080 --> 00:01:06,000
so you see i'm haunted by java even when

35
00:01:06,000 --> 00:01:08,080
i'm on holiday so i think i've seen

36
00:01:08,080 --> 00:01:10,560
quite a few releases and quite a few

37
00:01:10,560 --> 00:01:12,640
just my share of new features being

38
00:01:12,640 --> 00:01:13,840
released that's why

39
00:01:13,840 --> 00:01:16,720
today i'd like to show you the one of

40
00:01:16,720 --> 00:01:17,680
the new features

41
00:01:17,680 --> 00:01:20,880
uh in in java which is records and just

42
00:01:20,880 --> 00:01:22,400
before we start a little uh

43
00:01:22,400 --> 00:01:24,960
stairs you know safe harbor stepping

44
00:01:24,960 --> 00:01:26,720
from my uh from my side

45
00:01:26,720 --> 00:01:29,840
so just you know don't trust ultimately

46
00:01:29,840 --> 00:01:31,280
everything you see on the internet

47
00:01:31,280 --> 00:01:34,079
try to verify it on your own and okay so

48
00:01:34,079 --> 00:01:36,240
records records in java

49
00:01:36,240 --> 00:01:39,520
they are a preview feature um in java 14

50
00:01:39,520 --> 00:01:41,520
of course which was released like uh

51
00:01:41,520 --> 00:01:44,320
not even a month ago i think and they

52
00:01:44,320 --> 00:01:45,600
are implementation of

53
00:01:45,600 --> 00:01:48,880
uh jab three five nine and to

54
00:01:48,880 --> 00:01:51,439
play with records to understand records

55
00:01:51,439 --> 00:01:52,799
to to give a take

56
00:01:52,799 --> 00:01:54,880
get a taste of them you need to enable

57
00:01:54,880 --> 00:01:56,320
preview features

58
00:01:56,320 --> 00:01:59,200
uh so it would take too much so i just

59
00:01:59,200 --> 00:02:00,719
prepared two links for you and the

60
00:02:00,719 --> 00:02:02,320
slides will be shared of course after

61
00:02:02,320 --> 00:02:05,600
after this talk so you can check out in

62
00:02:05,600 --> 00:02:07,200
in slides or you can also check out a

63
00:02:07,200 --> 00:02:09,440
video from davos belgium previous year

64
00:02:09,440 --> 00:02:10,560
when i ex

65
00:02:10,560 --> 00:02:12,239
explained how to enable them what's

66
00:02:12,239 --> 00:02:13,599
important what's not important

67
00:02:13,599 --> 00:02:15,360
i'll just show you quickly how to do

68
00:02:15,360 --> 00:02:17,280
that uh in intellij

69
00:02:17,280 --> 00:02:19,280
so you have your project you go to your

70
00:02:19,280 --> 00:02:20,560
project and then

71
00:02:20,560 --> 00:02:23,680
you go to module settings

72
00:02:23,680 --> 00:02:25,760
and in the module settings you have to

73
00:02:25,760 --> 00:02:27,040
select here uh

74
00:02:27,040 --> 00:02:29,280
the language level us 14 preview you

75
00:02:29,280 --> 00:02:30,480
have to accept a

76
00:02:30,480 --> 00:02:32,239
you know a kind of agreement that you

77
00:02:32,239 --> 00:02:33,360
know what you're doing that you're

78
00:02:33,360 --> 00:02:34,400
saying and so on

79
00:02:34,400 --> 00:02:37,599
and so it has to be uh 14 preview that's

80
00:02:37,599 --> 00:02:38,160
available

81
00:02:38,160 --> 00:02:41,120
in 2020.1 and of course you need to run

82
00:02:41,120 --> 00:02:42,720
it using um

83
00:02:42,720 --> 00:02:46,080
jdk 14 so unless you don't have it

84
00:02:46,080 --> 00:02:47,760
installed now you you will have to do

85
00:02:47,760 --> 00:02:50,640
that so one option to do that is just to

86
00:02:50,640 --> 00:02:51,040
go

87
00:02:51,040 --> 00:02:54,959
uh here and now click uh add sdks and

88
00:02:54,959 --> 00:02:55,680
you can select

89
00:02:55,680 --> 00:02:58,000
download jdk and see you can select

90
00:02:58,000 --> 00:02:59,120
adobe

91
00:02:59,120 --> 00:03:02,560
jdk sorry open jdk or adobe open jdk 14

92
00:03:02,560 --> 00:03:04,000
and it will get downloaded

93
00:03:04,000 --> 00:03:06,480
to your home folder and you can use it

94
00:03:06,480 --> 00:03:08,080
you can run it so it's really

95
00:03:08,080 --> 00:03:10,400
like installing new java versions it's

96
00:03:10,400 --> 00:03:12,159
really a breeze and it's not an issue to

97
00:03:12,159 --> 00:03:13,760
do that every six months

98
00:03:13,760 --> 00:03:16,239
uh so once you have uh the preview

99
00:03:16,239 --> 00:03:16,959
features

100
00:03:16,959 --> 00:03:19,440
enabled uh you can play with the records

101
00:03:19,440 --> 00:03:21,280
or of course also text

102
00:03:21,280 --> 00:03:23,360
text blocks and other cool stuff but

103
00:03:23,360 --> 00:03:24,799
today we're focusing on the on the

104
00:03:24,799 --> 00:03:25,519
records

105
00:03:25,519 --> 00:03:27,760
so what are these records they are the

106
00:03:27,760 --> 00:03:29,920
new their new kind of type declaration

107
00:03:29,920 --> 00:03:32,000
in java in java 14.

108
00:03:32,000 --> 00:03:34,480
and record is a restricted form of a

109
00:03:34,480 --> 00:03:35,519
class

110
00:03:35,519 --> 00:03:39,040
um so kind of like a nm for example

111
00:03:39,040 --> 00:03:40,959
and of course they implement if you have

112
00:03:40,959 --> 00:03:43,360
a class which is a record

113
00:03:43,360 --> 00:03:46,000
they all the instances implement and the

114
00:03:46,000 --> 00:03:48,080
class implements java lang record

115
00:03:48,080 --> 00:03:50,560
and this is the way you declare them so

116
00:03:50,560 --> 00:03:51,440
instead of saying

117
00:03:51,440 --> 00:03:53,920
class you just say record then you put

118
00:03:53,920 --> 00:03:54,879
the name

119
00:03:54,879 --> 00:03:57,439
of the record you'd like to have and

120
00:03:57,439 --> 00:03:58,319
then you go

121
00:03:58,319 --> 00:04:00,159
pretty much like uh you know for a

122
00:04:00,159 --> 00:04:01,519
method declaration or

123
00:04:01,519 --> 00:04:03,360
uh constructed declaration you select

124
00:04:03,360 --> 00:04:05,599
the type and the name the type and the

125
00:04:05,599 --> 00:04:06,640
name and so on

126
00:04:06,640 --> 00:04:09,120
uh so i think we'll do it this way i'll

127
00:04:09,120 --> 00:04:10,799
try to go through the slides quickly and

128
00:04:10,799 --> 00:04:12,159
then we'll uh

129
00:04:12,159 --> 00:04:14,159
dive into the code because i think the

130
00:04:14,159 --> 00:04:15,599
code might be even more interesting than

131
00:04:15,599 --> 00:04:16,798
the slides

132
00:04:16,798 --> 00:04:20,720
um so what records have uh

133
00:04:20,720 --> 00:04:23,120
they have a name of course uh as you can

134
00:04:23,120 --> 00:04:24,880
as you have seen the previous record was

135
00:04:24,880 --> 00:04:25,199
named

136
00:04:25,199 --> 00:04:27,280
complex uh it's by the way it's about

137
00:04:27,280 --> 00:04:28,880
this you know complex number

138
00:04:28,880 --> 00:04:31,600
uh you can see here on wikipedia how it

139
00:04:31,600 --> 00:04:32,639
works it's just not

140
00:04:32,639 --> 00:04:35,520
2d point is it's a it's a number uh and

141
00:04:35,520 --> 00:04:37,360
so on so you can add them multiply them

142
00:04:37,360 --> 00:04:38,720
and so on and so on

143
00:04:38,720 --> 00:04:42,400
and uh let me go back here uh so they

144
00:04:42,400 --> 00:04:43,440
have a name

145
00:04:43,440 --> 00:04:46,000
and they have record components they

146
00:04:46,000 --> 00:04:47,520
they don't have to be any record

147
00:04:47,520 --> 00:04:48,240
components

148
00:04:48,240 --> 00:04:51,199
uh but then it would work i'm not sure

149
00:04:51,199 --> 00:04:51,680
if

150
00:04:51,680 --> 00:04:53,600
it makes much sense to have a record

151
00:04:53,600 --> 00:04:54,880
without any components

152
00:04:54,880 --> 00:04:57,520
aka fields so i guess you'd like to have

153
00:04:57,520 --> 00:04:58,720
some

154
00:04:58,720 --> 00:05:01,039
and then these record components become

155
00:05:01,039 --> 00:05:03,039
actually private final fields

156
00:05:03,039 --> 00:05:06,479
so records are immutable and the shallow

157
00:05:06,479 --> 00:05:07,280
level

158
00:05:07,280 --> 00:05:09,680
so you cannot alter the field once your

159
00:05:09,680 --> 00:05:11,840
record instance has been created

160
00:05:11,840 --> 00:05:13,919
and the they also have generated

161
00:05:13,919 --> 00:05:15,759
accessors so we have

162
00:05:15,759 --> 00:05:18,000
thanks to these accessors a way to get

163
00:05:18,000 --> 00:05:19,759
values from these fields

164
00:05:19,759 --> 00:05:22,080
and they have generated constructors

165
00:05:22,080 --> 00:05:24,320
compact one and canonical one we'll get

166
00:05:24,320 --> 00:05:25,199
to that what does

167
00:05:25,199 --> 00:05:27,039
what that means and they also have

168
00:05:27,039 --> 00:05:29,360
generated methods like equals hash code

169
00:05:29,360 --> 00:05:29,759
and

170
00:05:29,759 --> 00:05:32,160
to string and they take into account all

171
00:05:32,160 --> 00:05:32,880
these uh

172
00:05:32,880 --> 00:05:36,000
components or fields you've declared uh

173
00:05:36,000 --> 00:05:36,479
in the

174
00:05:36,479 --> 00:05:39,520
in the in this record what records can

175
00:05:39,520 --> 00:05:41,840
is they can also define constructors

176
00:05:41,840 --> 00:05:43,919
meaning you can redefine a compact or

177
00:05:43,919 --> 00:05:45,680
canonical constructor you can also have

178
00:05:45,680 --> 00:05:47,039
a custom one if you really

179
00:05:47,039 --> 00:05:50,320
need to due to whatever reason and they

180
00:05:50,320 --> 00:05:51,680
can also have their own

181
00:05:51,680 --> 00:05:53,680
implementation of generated methods say

182
00:05:53,680 --> 00:05:55,680
you can provide your own implementation

183
00:05:55,680 --> 00:05:57,440
of equals or hash code or

184
00:05:57,440 --> 00:05:59,360
the accessors or tostring if that's

185
00:05:59,360 --> 00:06:00,880
really needed they can

186
00:06:00,880 --> 00:06:02,720
also have extra methods you're not

187
00:06:02,720 --> 00:06:04,240
limited you can have any other

188
00:06:04,240 --> 00:06:07,440
methods if you think your record needs a

189
00:06:07,440 --> 00:06:10,479
fancy fancy method

190
00:06:10,479 --> 00:06:12,639
uh then you can add it and they can also

191
00:06:12,639 --> 00:06:14,639
have static fields and methods

192
00:06:14,639 --> 00:06:17,919
um like constants and and and

193
00:06:17,919 --> 00:06:20,080
starting methods so and they go they can

194
00:06:20,080 --> 00:06:21,919
also implement interfaces

195
00:06:21,919 --> 00:06:24,639
uh so there's no limitation in here what

196
00:06:24,639 --> 00:06:25,280
records

197
00:06:25,280 --> 00:06:28,560
can't is that they cannot extend

198
00:06:28,560 --> 00:06:30,560
any other class or they cannot be

199
00:06:30,560 --> 00:06:32,400
extended pretty much like in them your

200
00:06:32,400 --> 00:06:34,000
inum cannot extend any class

201
00:06:34,000 --> 00:06:36,000
and then in them cannot be extended it's

202
00:06:36,000 --> 00:06:38,080
just like you know comes from directly

203
00:06:38,080 --> 00:06:38,400
from

204
00:06:38,400 --> 00:06:39,919
javelin in them and records come

205
00:06:39,919 --> 00:06:42,240
directly from uh java lang record and

206
00:06:42,240 --> 00:06:43,280
that's pretty much it

207
00:06:43,280 --> 00:06:46,400
we can you can use interfaces if you

208
00:06:46,400 --> 00:06:47,039
need to

209
00:06:47,039 --> 00:06:49,840
more inheritance uh they have no setters

210
00:06:49,840 --> 00:06:50,720
and they have

211
00:06:50,720 --> 00:06:52,560
no getters i mean these are not

212
00:06:52,560 --> 00:06:54,639
generated in theoretically you could

213
00:06:54,639 --> 00:06:57,520
create some but i mean to act like once

214
00:06:57,520 --> 00:06:58,240
but then

215
00:06:58,240 --> 00:07:00,479
i i think you would just deny the

216
00:07:00,479 --> 00:07:02,000
purpose the records were

217
00:07:02,000 --> 00:07:04,639
introduced or or brought to java and

218
00:07:04,639 --> 00:07:05,759
they cannot have

219
00:07:05,759 --> 00:07:08,479
any extra instant fields so what's

220
00:07:08,479 --> 00:07:09,599
declared in the

221
00:07:09,599 --> 00:07:11,360
in the record declaration becomes a

222
00:07:11,360 --> 00:07:13,199
field and you cannot have any other

223
00:07:13,199 --> 00:07:13,840
extra

224
00:07:13,840 --> 00:07:17,759
fields beside that so records

225
00:07:17,759 --> 00:07:20,319
and this is maybe a thing that confuses

226
00:07:20,319 --> 00:07:21,759
lots of people because people were

227
00:07:21,759 --> 00:07:23,039
saying you know there were all these

228
00:07:23,039 --> 00:07:24,960
flame wars on twitter and elsewhere

229
00:07:24,960 --> 00:07:27,440
that uh we don't need uh anymore beans

230
00:07:27,440 --> 00:07:29,120
we don't need project lombok and so on

231
00:07:29,120 --> 00:07:30,319
because

232
00:07:30,319 --> 00:07:33,599
records i'm not so sure records are not

233
00:07:33,599 --> 00:07:34,479
java beans

234
00:07:34,479 --> 00:07:37,120
records are records they don't follow

235
00:07:37,120 --> 00:07:37,759
this

236
00:07:37,759 --> 00:07:39,599
javabean convention because they don't

237
00:07:39,599 --> 00:07:42,160
have getters they have accessors

238
00:07:42,160 --> 00:07:44,319
and what they are are exactly these they

239
00:07:44,319 --> 00:07:46,240
are poachers plain old java objects with

240
00:07:46,240 --> 00:07:48,319
accessories but not getters

241
00:07:48,319 --> 00:07:50,879
and maybe it's easier to you if you

242
00:07:50,879 --> 00:07:51,919
think about them

243
00:07:51,919 --> 00:07:54,879
as named tuples so in some programming

244
00:07:54,879 --> 00:07:55,919
languages or

245
00:07:55,919 --> 00:07:58,400
like in a circle you we have tuples and

246
00:07:58,400 --> 00:08:00,639
these tuples are not anonymous but like

247
00:08:00,639 --> 00:08:02,479
pretty much everything in java if not

248
00:08:02,479 --> 00:08:04,080
everything they have a name

249
00:08:04,080 --> 00:08:07,520
so your record has a name as a class and

250
00:08:07,520 --> 00:08:10,160
then all the components they also have

251
00:08:10,160 --> 00:08:10,720
names

252
00:08:10,720 --> 00:08:12,319
so everything is named that's why they

253
00:08:12,319 --> 00:08:14,080
named tuples this is the way to think

254
00:08:14,080 --> 00:08:15,759
about records they're not java beans

255
00:08:15,759 --> 00:08:16,560
they named

256
00:08:16,560 --> 00:08:20,160
couples um records can be nested and

257
00:08:20,160 --> 00:08:22,080
that's really useful that's very handy

258
00:08:22,080 --> 00:08:23,759
because they can be nested pretty much

259
00:08:23,759 --> 00:08:24,319
like

260
00:08:24,319 --> 00:08:27,280
static classes so they don't have you

261
00:08:27,280 --> 00:08:29,120
know reference to a state of the

262
00:08:29,120 --> 00:08:31,039
author class or the class in which they

263
00:08:31,039 --> 00:08:32,240
are nested

264
00:08:32,240 --> 00:08:34,320
and uh they're very handy in this way

265
00:08:34,320 --> 00:08:35,519
for streams uh

266
00:08:35,519 --> 00:08:38,559
like reduce and collectors you know um

267
00:08:38,559 --> 00:08:40,479
there was always this this thing that

268
00:08:40,479 --> 00:08:42,240
let's say we don't have any

269
00:08:42,240 --> 00:08:44,159
out parameters and you know returning

270
00:08:44,159 --> 00:08:46,320
value by a parameter is really uh

271
00:08:46,320 --> 00:08:47,839
let's be honest it's it's it's a kind of

272
00:08:47,839 --> 00:08:50,640
ugly approach so we weren't able to

273
00:08:50,640 --> 00:08:53,040
return like two strings two things sorry

274
00:08:53,040 --> 00:08:54,399
two three the

275
00:08:54,399 --> 00:08:56,320
things and so on from a single method

276
00:08:56,320 --> 00:08:58,160
invocation so that's why we returned

277
00:08:58,160 --> 00:09:00,800
arrays collections or sometimes we had a

278
00:09:00,800 --> 00:09:01,839
custom beams

279
00:09:01,839 --> 00:09:03,839
and now we can just use records which

280
00:09:03,839 --> 00:09:05,040
are easy to define

281
00:09:05,040 --> 00:09:06,560
and we don't need anything else that's

282
00:09:06,560 --> 00:09:08,000
right where that's where they come

283
00:09:08,000 --> 00:09:09,360
really handy

284
00:09:09,360 --> 00:09:12,640
and reflection of records yeah so we

285
00:09:12,640 --> 00:09:14,000
have a new method

286
00:09:14,000 --> 00:09:16,720
in a class and it's uh it's record it's

287
00:09:16,720 --> 00:09:18,800
a link to the java deck so i can

288
00:09:18,800 --> 00:09:21,279
uh i think you can you can follow that

289
00:09:21,279 --> 00:09:23,360
so just like we have is in them

290
00:09:23,360 --> 00:09:26,399
in class now we have is record uh which

291
00:09:26,399 --> 00:09:27,279
means uh

292
00:09:27,279 --> 00:09:28,880
i mean you can call it and check it if

293
00:09:28,880 --> 00:09:31,040
the object you have in hand is a record

294
00:09:31,040 --> 00:09:32,000
or not

295
00:09:32,000 --> 00:09:34,880
and also we have get record components

296
00:09:34,880 --> 00:09:36,480
because

297
00:09:36,480 --> 00:09:38,080
they know whatever bins they have

298
00:09:38,080 --> 00:09:39,920
components so this is the method you

299
00:09:39,920 --> 00:09:41,600
should be using and this will

300
00:09:41,600 --> 00:09:43,760
give you an array of all the components

301
00:09:43,760 --> 00:09:45,120
being used

302
00:09:45,120 --> 00:09:47,360
but one thing to remember before you try

303
00:09:47,360 --> 00:09:48,320
to do anything

304
00:09:48,320 --> 00:09:52,399
with reflection watch this

305
00:09:53,080 --> 00:09:58,549
[Music]

306
00:09:58,800 --> 00:10:01,120
yeah so please don't overuse reflection

307
00:10:01,120 --> 00:10:02,880
i mean you violate oop

308
00:10:02,880 --> 00:10:06,880
and stuff and sorry i had to stop it

309
00:10:06,880 --> 00:10:10,079
okay and

310
00:10:10,079 --> 00:10:11,839
serialization of the records i mean

311
00:10:11,839 --> 00:10:13,519
records are serialized in a bit

312
00:10:13,519 --> 00:10:14,480
different way than

313
00:10:14,480 --> 00:10:16,079
in the other objects i mean this

314
00:10:16,079 --> 00:10:18,640
realization is like

315
00:10:18,640 --> 00:10:21,120
nothing fancy but they are reconstructed

316
00:10:21,120 --> 00:10:23,120
using their constructor

317
00:10:23,120 --> 00:10:25,279
so it's the constructor that's going to

318
00:10:25,279 --> 00:10:26,560
be called again

319
00:10:26,560 --> 00:10:29,680
when you have to deserialize uh

320
00:10:29,680 --> 00:10:33,519
your uh record object basically and

321
00:10:33,519 --> 00:10:35,760
what's maybe even more important is that

322
00:10:35,760 --> 00:10:37,519
libraries and frameworks kind of need to

323
00:10:37,519 --> 00:10:38,480
adapt because

324
00:10:38,480 --> 00:10:40,640
they are not bins they have no getters

325
00:10:40,640 --> 00:10:42,560
they have accessor so

326
00:10:42,560 --> 00:10:44,720
uh they need to be aware of this is

327
00:10:44,720 --> 00:10:46,399
record and then fetch the record

328
00:10:46,399 --> 00:10:48,079
components and so on to

329
00:10:48,079 --> 00:10:51,760
uh you know uh get uh perhaps uh

330
00:10:51,760 --> 00:10:53,680
get them working properly i mean like uh

331
00:10:53,680 --> 00:10:55,279
jpa jackson

332
00:10:55,279 --> 00:10:58,480
uh you know json and stuff okay so let's

333
00:10:58,480 --> 00:11:00,240
go to the code so see

334
00:11:00,240 --> 00:11:02,800
this is a little program i'm using for a

335
00:11:02,800 --> 00:11:04,959
record so i have two complex number

336
00:11:04,959 --> 00:11:07,600
two complex numbers and this is a yeah

337
00:11:07,600 --> 00:11:08,399
uh let's

338
00:11:08,399 --> 00:11:11,760
let's give it a spin

339
00:11:12,160 --> 00:11:15,200
what's going on okay i know i know i

340
00:11:15,200 --> 00:11:16,000
hope i know

341
00:11:16,000 --> 00:11:18,160
okay yeah so it's running it says hello

342
00:11:18,160 --> 00:11:19,760
records and we have these

343
00:11:19,760 --> 00:11:23,200
two uh i mean this is the the result of

344
00:11:23,200 --> 00:11:24,959
the multiplication and this is the you

345
00:11:24,959 --> 00:11:26,880
know we have just this complex and it

346
00:11:26,880 --> 00:11:27,279
got

347
00:11:27,279 --> 00:11:30,720
printed here see very nicely so let's go

348
00:11:30,720 --> 00:11:31,600
to this

349
00:11:31,600 --> 00:11:34,000
complex record see it was declared as a

350
00:11:34,000 --> 00:11:34,959
record

351
00:11:34,959 --> 00:11:39,279
um so it has two components a real part

352
00:11:39,279 --> 00:11:40,720
and imaginary part we can

353
00:11:40,720 --> 00:11:43,279
define extra methods like add subtract

354
00:11:43,279 --> 00:11:44,880
multiply and so on

355
00:11:44,880 --> 00:11:47,440
and we can override this string method

356
00:11:47,440 --> 00:11:49,360
but it's not necessary if i don't do

357
00:11:49,360 --> 00:11:50,639
that

358
00:11:50,639 --> 00:11:53,760
and we run this program again see

359
00:11:53,760 --> 00:11:55,920
now you have the default implementation

360
00:11:55,920 --> 00:11:58,079
of the complex

361
00:11:58,079 --> 00:12:00,639
being shown or used in this print line

362
00:12:00,639 --> 00:12:01,360
so this is

363
00:12:01,360 --> 00:12:03,760
basically how you can create your record

364
00:12:03,760 --> 00:12:04,560
and you can

365
00:12:04,560 --> 00:12:06,480
toss some extra methods if you really

366
00:12:06,480 --> 00:12:09,360
need to um

367
00:12:09,360 --> 00:12:12,720
yeah so uh let's

368
00:12:12,720 --> 00:12:14,720
take a look at some valid examples of

369
00:12:14,720 --> 00:12:15,760
records

370
00:12:15,760 --> 00:12:18,639
um so like like i said you can have a

371
00:12:18,639 --> 00:12:20,480
record without any field

372
00:12:20,480 --> 00:12:23,040
or a component you can have just one you

373
00:12:23,040 --> 00:12:24,240
can have

374
00:12:24,240 --> 00:12:27,680
custom methods uh you can also have

375
00:12:27,680 --> 00:12:30,320
static members like a field or a method

376
00:12:30,320 --> 00:12:31,920
by the way the code is online don't

377
00:12:31,920 --> 00:12:32,480
worry

378
00:12:32,480 --> 00:12:34,000
if i'm going too fast because we have a

379
00:12:34,000 --> 00:12:36,480
lot to cover uh then you'll be able to

380
00:12:36,480 --> 00:12:39,040
like what this code through again don't

381
00:12:39,040 --> 00:12:39,920
worry

382
00:12:39,920 --> 00:12:42,000
and of course we we can do something

383
00:12:42,000 --> 00:12:43,200
like this so we can

384
00:12:43,200 --> 00:12:45,920
you have a mutable field i don't think

385
00:12:45,920 --> 00:12:46,240
it's

386
00:12:46,240 --> 00:12:49,040
uh it's good approach but technically it

387
00:12:49,040 --> 00:12:50,959
it's possible it will compile it will

388
00:12:50,959 --> 00:12:51,600
run

389
00:12:51,600 --> 00:12:54,399
and we can have custom to string method

390
00:12:54,399 --> 00:12:55,360
like in here

391
00:12:55,360 --> 00:12:57,680
and we can also override equals and hash

392
00:12:57,680 --> 00:12:59,040
code if really needed but

393
00:12:59,040 --> 00:13:01,040
please remember they need to obey their

394
00:13:01,040 --> 00:13:02,079
contracts you know

395
00:13:02,079 --> 00:13:03,839
they have to be symmetric transitive and

396
00:13:03,839 --> 00:13:05,519
stuff and

397
00:13:05,519 --> 00:13:08,160
we can also override uh the access

398
00:13:08,160 --> 00:13:09,760
source if we need to because let's say

399
00:13:09,760 --> 00:13:11,120
we would like to have a

400
00:13:11,120 --> 00:13:12,880
side effect i don't know why would you

401
00:13:12,880 --> 00:13:14,480
need to have a side effect but let's say

402
00:13:14,480 --> 00:13:16,160
you need a to have a side effect

403
00:13:16,160 --> 00:13:18,720
in in access or then it's still possible

404
00:13:18,720 --> 00:13:20,639
to overwrite this uh

405
00:13:20,639 --> 00:13:23,920
or like create this accessor on your own

406
00:13:23,920 --> 00:13:26,480
and then we have this constructors you

407
00:13:26,480 --> 00:13:27,920
see based on this

408
00:13:27,920 --> 00:13:30,160
record declaration custom canonical

409
00:13:30,160 --> 00:13:32,079
constructor i have here

410
00:13:32,079 --> 00:13:35,120
four components a b c and d

411
00:13:35,120 --> 00:13:37,360
and let's say i'd like to assert that a

412
00:13:37,360 --> 00:13:38,880
is not equal to b

413
00:13:38,880 --> 00:13:41,600
and c is not equal to d because business

414
00:13:41,600 --> 00:13:42,639
logic

415
00:13:42,639 --> 00:13:45,680
and uh then i don't need to even do that

416
00:13:45,680 --> 00:13:47,199
but i can do that i mean then i'm

417
00:13:47,199 --> 00:13:48,240
overwriting this

418
00:13:48,240 --> 00:13:50,480
canonical constructor and even until j

419
00:13:50,480 --> 00:13:51,920
tells me it's not needed because it's

420
00:13:51,920 --> 00:13:52,959
grayed out

421
00:13:52,959 --> 00:13:54,560
and of course i can have some side

422
00:13:54,560 --> 00:13:56,560
effects uh just you know for the sake of

423
00:13:56,560 --> 00:13:57,440
demonstration

424
00:13:57,440 --> 00:14:00,560
but we can also have you see uh not this

425
00:14:00,560 --> 00:14:02,880
canonical constructor which is

426
00:14:02,880 --> 00:14:04,639
pretty much too verbose because it's

427
00:14:04,639 --> 00:14:06,720
repeating this code over and over again

428
00:14:06,720 --> 00:14:09,440
so we can have this compact format which

429
00:14:09,440 --> 00:14:11,120
doesn't have this argument

430
00:14:11,120 --> 00:14:12,720
list at all and pretty much it's the

431
00:14:12,720 --> 00:14:15,120
same logic so we don't have to call this

432
00:14:15,120 --> 00:14:18,399
uh and and repeat this uh

433
00:14:18,399 --> 00:14:20,880
these arguments still it's going to work

434
00:14:20,880 --> 00:14:21,680
the same way

435
00:14:21,680 --> 00:14:23,680
and we can also have custom if you

436
00:14:23,680 --> 00:14:24,800
really need to you can

437
00:14:24,800 --> 00:14:27,440
have custom constructor like this so see

438
00:14:27,440 --> 00:14:30,160
i have two integers length and hash and

439
00:14:30,160 --> 00:14:30,639
i'm

440
00:14:30,639 --> 00:14:32,880
going to call them with with a string

441
00:14:32,880 --> 00:14:33,839
and then i can

442
00:14:33,839 --> 00:14:35,680
take a link and hash code of the string

443
00:14:35,680 --> 00:14:37,360
by the way uh

444
00:14:37,360 --> 00:14:40,079
if you haven't noticed we can't name a

445
00:14:40,079 --> 00:14:42,160
component as a hash code because of the

446
00:14:42,160 --> 00:14:43,279
method name clash

447
00:14:43,279 --> 00:14:44,959
of course so that's why it has to be

448
00:14:44,959 --> 00:14:46,720
remain enhanced

449
00:14:46,720 --> 00:14:48,639
and the records can't implement can

450
00:14:48,639 --> 00:14:50,079
implement interfaces here

451
00:14:50,079 --> 00:14:52,800
this one is implementing comparable uh

452
00:14:52,800 --> 00:14:53,360
so c

453
00:14:53,360 --> 00:14:56,000
can do pretty much a lot of stuff uh

454
00:14:56,000 --> 00:14:57,360
what we can't do

455
00:14:57,360 --> 00:15:00,399
is they cannot extend anything else see

456
00:15:00,399 --> 00:15:02,480
i cannot extend java today i mean that

457
00:15:02,480 --> 00:15:04,240
would be a stupid idea anyway but

458
00:15:04,240 --> 00:15:06,480
let's say i'd like to do that to

459
00:15:06,480 --> 00:15:08,399
whatever reason i can't do that

460
00:15:08,399 --> 00:15:11,360
and also classes cannot extend records

461
00:15:11,360 --> 00:15:13,120
like records are final

462
00:15:13,120 --> 00:15:16,639
um and they don't they you don't have

463
00:15:16,639 --> 00:15:18,240
an option to have an extra field see

464
00:15:18,240 --> 00:15:19,920
it's not going to compile

465
00:15:19,920 --> 00:15:22,639
uh what does it say um oh yeah make

466
00:15:22,639 --> 00:15:24,720
static see so it's possible to have

467
00:15:24,720 --> 00:15:26,480
static fields but not regular

468
00:15:26,480 --> 00:15:29,600
uh instance uh fields and of course we

469
00:15:29,600 --> 00:15:32,160
can't have anything like getters let's

470
00:15:32,160 --> 00:15:32,800
say we

471
00:15:32,800 --> 00:15:34,959
would like to mimic the approach with um

472
00:15:34,959 --> 00:15:36,480
accessors we'd like to have something

473
00:15:36,480 --> 00:15:36,880
like

474
00:15:36,880 --> 00:15:39,279
setter or something citric we can't

475
00:15:39,279 --> 00:15:40,160
define this

476
00:15:40,160 --> 00:15:42,160
it's not going to work because this is a

477
00:15:42,160 --> 00:15:43,199
private final

478
00:15:43,199 --> 00:15:47,040
field so it's impossible um yeah else

479
00:15:47,040 --> 00:15:49,680
this code is going to run i hope yeah

480
00:15:49,680 --> 00:15:50,320
see it

481
00:15:50,320 --> 00:15:53,519
says i'm accessing 12 because uh here

482
00:15:53,519 --> 00:15:55,440
i'm accessing the no setters field which

483
00:15:55,440 --> 00:15:56,800
is 12

484
00:15:56,800 --> 00:16:00,399
because here it's initialized as 12.

485
00:16:00,399 --> 00:16:03,759
okay so let's talk about the um

486
00:16:03,759 --> 00:16:06,839
yeah nesting i think nesting is quite a

487
00:16:06,839 --> 00:16:07,759
nice uh

488
00:16:07,759 --> 00:16:09,680
feature and this is actually i think the

489
00:16:09,680 --> 00:16:12,480
primary usage of records i mean

490
00:16:12,480 --> 00:16:14,480
this is what i would expect to see in in

491
00:16:14,480 --> 00:16:15,920
real code you know like

492
00:16:15,920 --> 00:16:18,240
production after a year or something

493
00:16:18,240 --> 00:16:18,959
like now

494
00:16:18,959 --> 00:16:20,639
when the records are not the preview

495
00:16:20,639 --> 00:16:22,480
feature anymore and

496
00:16:22,480 --> 00:16:24,079
perhaps we'll have a pattern matching

497
00:16:24,079 --> 00:16:26,560
you know with the composition and stuff

498
00:16:26,560 --> 00:16:29,680
for now we don't have it anyway see

499
00:16:29,680 --> 00:16:32,880
uh just as i have this inside class

500
00:16:32,880 --> 00:16:36,160
and it's uh if i make it static i can't

501
00:16:36,160 --> 00:16:38,480
access this include this field from the

502
00:16:38,480 --> 00:16:39,600
enclosing

503
00:16:39,600 --> 00:16:42,959
class like uh this field i can't do that

504
00:16:42,959 --> 00:16:45,600
and pretty much the same works for uh

505
00:16:45,600 --> 00:16:46,399
records as

506
00:16:46,399 --> 00:16:48,560
you see it's impossible because this

507
00:16:48,560 --> 00:16:50,079
would mean that the state of this and

508
00:16:50,079 --> 00:16:50,959
closing class

509
00:16:50,959 --> 00:16:53,360
would leak here and it doesn't have to

510
00:16:53,360 --> 00:16:54,240
be final

511
00:16:54,240 --> 00:16:56,639
uh sometimes uh i mean it could be

512
00:16:56,639 --> 00:16:57,839
mutating and

513
00:16:57,839 --> 00:17:01,759
and stuff so that would uh make this um

514
00:17:01,759 --> 00:17:03,120
record depend on the state of the

515
00:17:03,120 --> 00:17:05,199
enclosing class that's why

516
00:17:05,199 --> 00:17:07,599
this is illegal so nesting records is

517
00:17:07,599 --> 00:17:08,480
like nesting

518
00:17:08,480 --> 00:17:11,039
static classes more or less and when it

519
00:17:11,039 --> 00:17:13,599
becomes handy i mean this is the example

520
00:17:13,599 --> 00:17:17,119
i used for team collector of java 12

521
00:17:17,119 --> 00:17:20,799
and previously i had to have this

522
00:17:20,799 --> 00:17:23,520
uh boilerplate code just to you know

523
00:17:23,520 --> 00:17:25,359
perform the reduce operation

524
00:17:25,359 --> 00:17:27,520
so i had to have the account and some

525
00:17:27,520 --> 00:17:29,760
and yeah now we know it's canonical

526
00:17:29,760 --> 00:17:30,720
constructor

527
00:17:30,720 --> 00:17:33,520
and this custom to string method uh to

528
00:17:33,520 --> 00:17:35,600
show the results and now instead of this

529
00:17:35,600 --> 00:17:36,240
code

530
00:17:36,240 --> 00:17:39,600
to make something like this work so i'm

531
00:17:39,600 --> 00:17:41,280
just you know where i have a stream of

532
00:17:41,280 --> 00:17:42,960
integers and i'm getting uh

533
00:17:42,960 --> 00:17:45,360
to collect two collectors one counting

534
00:17:45,360 --> 00:17:46,640
and one summing lungs

535
00:17:46,640 --> 00:17:48,799
now i can just use count in some

536
00:17:48,799 --> 00:17:50,880
constructor but it's not this code which

537
00:17:50,880 --> 00:17:52,000
is commented out

538
00:17:52,000 --> 00:17:55,039
here see this static class doesn't exist

539
00:17:55,039 --> 00:17:55,600
anymore

540
00:17:55,600 --> 00:17:58,320
what i have instead is that in this main

541
00:17:58,320 --> 00:18:00,240
method i mean inside the method

542
00:18:00,240 --> 00:18:03,280
i have defined this count in some record

543
00:18:03,280 --> 00:18:05,600
with two components count and sum and

544
00:18:05,600 --> 00:18:06,320
this

545
00:18:06,320 --> 00:18:08,880
is a single line that replaces all these

546
00:18:08,880 --> 00:18:10,320
lines commented out

547
00:18:10,320 --> 00:18:13,520
below so see i can use them

548
00:18:13,520 --> 00:18:16,880
in reduce here uh to initialize

549
00:18:16,880 --> 00:18:20,080
as accumulator and as a combiner see

550
00:18:20,080 --> 00:18:22,160
it's going to work and also here

551
00:18:22,160 --> 00:18:25,760
um when i'm using the tin collector

552
00:18:25,760 --> 00:18:29,120
so uh really i think that

553
00:18:29,120 --> 00:18:32,160
uh nesting records uh to pass

554
00:18:32,160 --> 00:18:34,000
something like this or to avoid you know

555
00:18:34,000 --> 00:18:35,200
this two element

556
00:18:35,200 --> 00:18:37,840
long array or something like this is

557
00:18:37,840 --> 00:18:38,960
really handy i mean

558
00:18:38,960 --> 00:18:41,520
i would say uh this is the primary usage

559
00:18:41,520 --> 00:18:42,000
i see

560
00:18:42,000 --> 00:18:44,160
for records let's see if this code runs

561
00:18:44,160 --> 00:18:45,440
yes it runs

562
00:18:45,440 --> 00:18:47,520
so we've summed up the numbers we've

563
00:18:47,520 --> 00:18:48,559
counted them

564
00:18:48,559 --> 00:18:50,960
and both the reduce and think collector

565
00:18:50,960 --> 00:18:51,600
produce

566
00:18:51,600 --> 00:18:53,840
the same results and even the statistics

567
00:18:53,840 --> 00:18:55,760
if we call the statistics from a long

568
00:18:55,760 --> 00:18:56,480
string

569
00:18:56,480 --> 00:18:59,360
okay so we have still a few minutes

570
00:18:59,360 --> 00:19:01,600
before um

571
00:19:01,600 --> 00:19:05,200
before uh q a so let's take a look about

572
00:19:05,200 --> 00:19:06,240
this reflection

573
00:19:06,240 --> 00:19:09,520
so i have a simple record here

574
00:19:09,520 --> 00:19:11,760
see reflection check and i have just an

575
00:19:11,760 --> 00:19:12,640
inum

576
00:19:12,640 --> 00:19:15,679
and i have a bean with certain

577
00:19:15,679 --> 00:19:18,000
so this is a just integer and string and

578
00:19:18,000 --> 00:19:19,120
this is like uid

579
00:19:19,120 --> 00:19:22,320
and string and of course like to make it

580
00:19:22,320 --> 00:19:24,240
really big i need a constructor i need

581
00:19:24,240 --> 00:19:26,480
getters i need a setter for the mutating

582
00:19:26,480 --> 00:19:27,760
field to string

583
00:19:27,760 --> 00:19:30,720
uh equals and hashcode like pretty much

584
00:19:30,720 --> 00:19:31,360
uh

585
00:19:31,360 --> 00:19:34,240
a lot of code and here i it's just

586
00:19:34,240 --> 00:19:35,120
everything i need

587
00:19:35,120 --> 00:19:37,520
uh provided i'm not going to mutate this

588
00:19:37,520 --> 00:19:39,039
string and of course this is an integer

589
00:19:39,039 --> 00:19:41,039
and this is a uid but it's not that

590
00:19:41,039 --> 00:19:41,679
important

591
00:19:41,679 --> 00:19:44,880
what's really uh funny i think

592
00:19:44,880 --> 00:19:48,320
with this like when you take a look uh

593
00:19:48,320 --> 00:19:50,480
i have two objects this is an inum and

594
00:19:50,480 --> 00:19:51,440
this is this

595
00:19:51,440 --> 00:19:55,440
record so uh when i give him a spin

596
00:19:55,440 --> 00:19:58,880
maybe we could uh we could run it

597
00:19:58,880 --> 00:20:02,559
yeah you see that the first one is

598
00:20:02,559 --> 00:20:05,520
an anim because i have this is in a

599
00:20:05,520 --> 00:20:06,000
method

600
00:20:06,000 --> 00:20:08,400
on a class and here i have this record

601
00:20:08,400 --> 00:20:09,280
method on a

602
00:20:09,280 --> 00:20:11,600
class as well and it says this thing

603
00:20:11,600 --> 00:20:14,080
created here is a record of course

604
00:20:14,080 --> 00:20:17,039
and i can read this record components

605
00:20:17,039 --> 00:20:18,240
and they will me

606
00:20:18,240 --> 00:20:20,240
they will give me you know the accessor

607
00:20:20,240 --> 00:20:22,159
methods the values everything i mean the

608
00:20:22,159 --> 00:20:23,440
code is down there

609
00:20:23,440 --> 00:20:26,240
um i mean as for reflection it's not the

610
00:20:26,240 --> 00:20:27,679
most beautiful piece of the code

611
00:20:27,679 --> 00:20:30,000
but what's really important here is like

612
00:20:30,000 --> 00:20:31,600
when you take a look at this describe

613
00:20:31,600 --> 00:20:33,280
bin properties and we are just trying to

614
00:20:33,280 --> 00:20:34,960
describe bin properties of the record

615
00:20:34,960 --> 00:20:36,720
and of the bin i have shown you

616
00:20:36,720 --> 00:20:39,520
just a second ago then you can see that

617
00:20:39,520 --> 00:20:40,480
properties

618
00:20:40,480 --> 00:20:43,440
for uh for this uh record reflection

619
00:20:43,440 --> 00:20:44,159
check

620
00:20:44,159 --> 00:20:47,360
i mean there's just one property and

621
00:20:47,360 --> 00:20:49,840
this property is actually the uh

622
00:20:49,840 --> 00:20:52,000
get class method and it's a single

623
00:20:52,000 --> 00:20:53,440
property following the javabean

624
00:20:53,440 --> 00:20:55,120
convention because every object of

625
00:20:55,120 --> 00:20:56,720
course needs to define its class so it

626
00:20:56,720 --> 00:20:57,280
has to

627
00:20:57,280 --> 00:21:00,559
have this get class method uh whereas uh

628
00:21:00,559 --> 00:21:04,240
bin info for this for this

629
00:21:04,240 --> 00:21:06,880
being with regular setter and stuff has

630
00:21:06,880 --> 00:21:08,799
more of course because see it has

631
00:21:08,799 --> 00:21:10,880
not only this get class method but it

632
00:21:10,880 --> 00:21:11,840
also has this

633
00:21:11,840 --> 00:21:15,120
get id and also has this

634
00:21:15,120 --> 00:21:18,400
uh set string field and so on and get

635
00:21:18,400 --> 00:21:19,840
string field of course because

636
00:21:19,840 --> 00:21:23,600
this property is a mutating one so

637
00:21:23,600 --> 00:21:26,960
see from this um you know bin info

638
00:21:26,960 --> 00:21:28,240
description you can see

639
00:21:28,240 --> 00:21:30,880
that again records are not java beans

640
00:21:30,880 --> 00:21:31,919
they're something

641
00:21:31,919 --> 00:21:34,880
different i mean it's like comparing uh

642
00:21:34,880 --> 00:21:36,880
i know peaches to apples i mean they're

643
00:21:36,880 --> 00:21:38,640
both fruits they look very tasty

644
00:21:38,640 --> 00:21:40,559
that you can't exchange them in every

645
00:21:40,559 --> 00:21:42,240
recipe basically

646
00:21:42,240 --> 00:21:44,799
what might be um interesting is like

647
00:21:44,799 --> 00:21:45,760
yeah i have this

648
00:21:45,760 --> 00:21:47,760
serialization demo so we can give it a

649
00:21:47,760 --> 00:21:49,360
spin you can run it

650
00:21:49,360 --> 00:21:53,039
and uh you can see that there's a slight

651
00:21:53,039 --> 00:21:54,720
difference in the byte format

652
00:21:54,720 --> 00:21:57,200
but uh beside that what's really

653
00:21:57,200 --> 00:21:58,000
important that

654
00:21:58,000 --> 00:22:01,280
we are going to deserialize here um

655
00:22:01,280 --> 00:22:04,320
this uh just a record and see

656
00:22:04,320 --> 00:22:07,520
uh it says the serializing object and

657
00:22:07,520 --> 00:22:09,919
here we have this object deserialized

658
00:22:09,919 --> 00:22:13,919
um and this uh line is quite interesting

659
00:22:13,919 --> 00:22:14,320
because

660
00:22:14,320 --> 00:22:16,559
if we take a look in here in the

661
00:22:16,559 --> 00:22:18,000
civilization record check

662
00:22:18,000 --> 00:22:21,760
you see this is the code i'm calling in

663
00:22:21,760 --> 00:22:24,240
compact constructor which means that

664
00:22:24,240 --> 00:22:26,080
this constructor is being used

665
00:22:26,080 --> 00:22:28,480
when the objects uh which are records

666
00:22:28,480 --> 00:22:29,919
are being deserialized

667
00:22:29,919 --> 00:22:32,320
so it's not like fancy clumsy methods

668
00:22:32,320 --> 00:22:33,360
it's just a regular

669
00:22:33,360 --> 00:22:36,640
constructor uh so i'm really happy that

670
00:22:36,640 --> 00:22:39,919
someone uh and of course

671
00:22:39,919 --> 00:22:41,760
by someone i mean the java authors and

672
00:22:41,760 --> 00:22:43,280
architects decided to clean this stuff

673
00:22:43,280 --> 00:22:43,919
up

674
00:22:43,919 --> 00:22:46,559
and also we have this json jsonification

675
00:22:46,559 --> 00:22:47,919
uh example

676
00:22:47,919 --> 00:22:50,159
and it's one thing uh let's run it

677
00:22:50,159 --> 00:22:50,960
because

678
00:22:50,960 --> 00:22:54,000
it might be shocking at the first uh

679
00:22:54,000 --> 00:22:56,320
first time you run it so basically i

680
00:22:56,320 --> 00:22:57,039
have this

681
00:22:57,039 --> 00:23:00,320
bin and i have this record and uh

682
00:23:00,320 --> 00:23:02,799
what i'm trying to do see i'm having the

683
00:23:02,799 --> 00:23:04,720
mapper of

684
00:23:04,720 --> 00:23:06,960
jackson from foster xml and i'm trying

685
00:23:06,960 --> 00:23:09,360
to write this value as a string

686
00:23:09,360 --> 00:23:12,080
and it's working by why it's working

687
00:23:12,080 --> 00:23:13,600
it's working in the case of being

688
00:23:13,600 --> 00:23:14,799
because i

689
00:23:14,799 --> 00:23:18,000
have here something uh yeah i have the

690
00:23:18,000 --> 00:23:20,960
annotation json property on the field i

691
00:23:20,960 --> 00:23:22,240
don't have a getter see

692
00:23:22,240 --> 00:23:24,640
if i get is commended out and i have

693
00:23:24,640 --> 00:23:26,559
something which is like the accessor so

694
00:23:26,559 --> 00:23:28,159
if i comment this out

695
00:23:28,159 --> 00:23:31,200
and try to run it again uh it's not

696
00:23:31,200 --> 00:23:33,440
going to work because

697
00:23:33,440 --> 00:23:35,600
jackson thinks this bean has no

698
00:23:35,600 --> 00:23:37,039
properties at all

699
00:23:37,039 --> 00:23:39,039
and we can fix that in three ways we can

700
00:23:39,039 --> 00:23:41,440
have this constructor we can have this

701
00:23:41,440 --> 00:23:42,480
uh

702
00:23:42,480 --> 00:23:44,400
access or any other method providing

703
00:23:44,400 --> 00:23:46,799
this as annotated as json property or we

704
00:23:46,799 --> 00:23:47,120
can

705
00:23:47,120 --> 00:23:49,840
annotate the adjacent property just the

706
00:23:49,840 --> 00:23:50,400
field

707
00:23:50,400 --> 00:23:51,919
and this is what we can do of course

708
00:23:51,919 --> 00:23:53,679
beside custom serializers and

709
00:23:53,679 --> 00:23:55,600
civilizations and stuff

710
00:23:55,600 --> 00:23:58,720
and so let me uncomment this to run

711
00:23:58,720 --> 00:24:02,080
and for this uh record check see this

712
00:24:02,080 --> 00:24:04,799
was handled properly by jackson only

713
00:24:04,799 --> 00:24:06,880
because i had this annotation

714
00:24:06,880 --> 00:24:09,760
on the record component if i get rid of

715
00:24:09,760 --> 00:24:12,000
this

716
00:24:12,960 --> 00:24:15,520
it's not going to work again because

717
00:24:15,520 --> 00:24:17,279
we're creating record

718
00:24:17,279 --> 00:24:21,039
and but in this line it's not going to

719
00:24:21,039 --> 00:24:22,080
work because

720
00:24:22,080 --> 00:24:24,559
uh jackson doesn't know how to sterilize

721
00:24:24,559 --> 00:24:25,760
this record

722
00:24:25,760 --> 00:24:28,559
by default because it's not aware of the

723
00:24:28,559 --> 00:24:30,400
records at this at the moment

724
00:24:30,400 --> 00:24:32,960
i mean at least this version i was using

725
00:24:32,960 --> 00:24:34,080
somewhere here in

726
00:24:34,080 --> 00:24:37,520
in uh in pom uh and that's uh

727
00:24:37,520 --> 00:24:40,720
what version with that yeah 2103 so it

728
00:24:40,720 --> 00:24:41,679
wasn't aware of

729
00:24:41,679 --> 00:24:43,200
existence of records that's why it

730
00:24:43,200 --> 00:24:45,600
couldn't serialize and visualize records

731
00:24:45,600 --> 00:24:46,080
uh

732
00:24:46,080 --> 00:24:47,919
by default so you see all these

733
00:24:47,919 --> 00:24:49,200
libraries like for

734
00:24:49,200 --> 00:24:52,799
jason sorry yeah jason gps and stuff i

735
00:24:52,799 --> 00:24:53,840
think they need to

736
00:24:53,840 --> 00:24:57,200
uh adjust for something like this

737
00:24:57,200 --> 00:24:59,600
and you know just a quick way to fix it

738
00:24:59,600 --> 00:25:02,320
is basically to annotate everything as

739
00:25:02,320 --> 00:25:05,360
i mean every um component as uh

740
00:25:05,360 --> 00:25:08,320
json property and then this annotation

741
00:25:08,320 --> 00:25:10,400
will be passed down both to

742
00:25:10,400 --> 00:25:13,840
fields both to uh the accessor so it's

743
00:25:13,840 --> 00:25:16,000
going to work like this

744
00:25:16,000 --> 00:25:20,320
um yeah so i think it's pretty much okay

745
00:25:20,320 --> 00:25:23,039
we're going to the q a uh i guess just

746
00:25:23,039 --> 00:25:25,039
one thing before i finish please always

747
00:25:25,039 --> 00:25:26,880
and for everyone not on this event and

748
00:25:26,880 --> 00:25:28,480
not only me but every speaker provided

749
00:25:28,480 --> 00:25:29,200
feedback

750
00:25:29,200 --> 00:25:31,120
in any form if you really wish you can

751
00:25:31,120 --> 00:25:33,200
send me a paper card or just another

752
00:25:33,200 --> 00:25:34,880
card i mean it's hard these days but

753
00:25:34,880 --> 00:25:36,159
still it's possible

754
00:25:36,159 --> 00:25:38,880
and uh this is a little poll uh it's

755
00:25:38,880 --> 00:25:41,440
totally anonymous so please go to

756
00:25:41,440 --> 00:25:43,440
go to this link and tell me what you

757
00:25:43,440 --> 00:25:45,200
think about this presentation

758
00:25:45,200 --> 00:25:49,120
um thank you and here

759
00:25:49,120 --> 00:25:52,799
yeah here's the link for the code and uh

760
00:25:52,799 --> 00:25:55,600
here we have the link for the slide and

761
00:25:55,600 --> 00:25:57,120
also my twitter handle if you're if

762
00:25:57,120 --> 00:25:58,240
you're interested in that

763
00:25:58,240 --> 00:26:02,320
uh back to this studio can you hear me

764
00:26:02,320 --> 00:26:04,880
we can indeed and thank you very much

765
00:26:04,880 --> 00:26:05,440
for that

766
00:26:05,440 --> 00:26:08,320
so it's q a time so if you've got any

767
00:26:08,320 --> 00:26:09,360
questions please

768
00:26:09,360 --> 00:26:11,679
drop them into the slack channel or onto

769
00:26:11,679 --> 00:26:12,559
the slido

770
00:26:12,559 --> 00:26:15,600
um i've got a a question here

771
00:26:15,600 --> 00:26:18,799
yes from and karam

772
00:26:18,799 --> 00:26:21,919
asks what problem is the new type record

773
00:26:21,919 --> 00:26:24,400
trying to solve it seems very similar to

774
00:26:24,400 --> 00:26:27,840
class with some limitations

775
00:26:27,840 --> 00:26:29,840
i would say i mean in my personal

776
00:26:29,840 --> 00:26:32,240
reading records are somewhere in between

777
00:26:32,240 --> 00:26:33,600
java beans

778
00:26:33,600 --> 00:26:37,120
and indians so this is the part of this

779
00:26:37,120 --> 00:26:39,679
story i've heard for generics i've heard

780
00:26:39,679 --> 00:26:40,159
for

781
00:26:40,159 --> 00:26:42,559
uh enums you know it's just like just

782
00:26:42,559 --> 00:26:43,600
like for java five

783
00:26:43,600 --> 00:26:45,120
everyone was like but the code is

784
00:26:45,120 --> 00:26:46,799
working we're using uh it

785
00:26:46,799 --> 00:26:48,720
i mean our code in production why would

786
00:26:48,720 --> 00:26:49,919
why would we need that

787
00:26:49,919 --> 00:26:53,440
i think it's to have less code

788
00:26:53,440 --> 00:26:55,760
because you know you know how it works

789
00:26:55,760 --> 00:26:56,480
uh

790
00:26:56,480 --> 00:26:58,480
you need to add a field and then there

791
00:26:58,480 --> 00:27:00,480
are you know basically two parties one

792
00:27:00,480 --> 00:27:02,080
part is using lombok

793
00:27:02,080 --> 00:27:04,480
uh or some any other author generator to

794
00:27:04,480 --> 00:27:06,320
have a you know like bins with

795
00:27:06,320 --> 00:27:08,960
proper and correctly implemented equals

796
00:27:08,960 --> 00:27:10,640
hash code to string and so on

797
00:27:10,640 --> 00:27:13,679
because uh these are generated or

798
00:27:13,679 --> 00:27:14,159
there's

799
00:27:14,159 --> 00:27:15,919
the the the other group of developers

800
00:27:15,919 --> 00:27:17,760
who say no no we're going to

801
00:27:17,760 --> 00:27:21,120
regenerate the methods um

802
00:27:21,120 --> 00:27:23,520
uh you know on our own in our ide i'm

803
00:27:23,520 --> 00:27:25,120
just going to regenerate to string

804
00:27:25,120 --> 00:27:28,080
equals hash code add these new getters

805
00:27:28,080 --> 00:27:29,360
and stuff

806
00:27:29,360 --> 00:27:32,399
thing is whatever you do it has its pros

807
00:27:32,399 --> 00:27:33,919
for sure but they also have these cones

808
00:27:33,919 --> 00:27:35,120
you need to remember you have to

809
00:27:35,120 --> 00:27:36,399
regenerate this code

810
00:27:36,399 --> 00:27:38,799
and you have also a dependency to lombok

811
00:27:38,799 --> 00:27:39,760
you know which is

812
00:27:39,760 --> 00:27:41,600
not something great and not what you'd

813
00:27:41,600 --> 00:27:43,039
like to have in every

814
00:27:43,039 --> 00:27:45,919
uh project whereas for records uh you

815
00:27:45,919 --> 00:27:47,200
don't have these issues

816
00:27:47,200 --> 00:27:49,600
and if you'd like to avoid a you know a

817
00:27:49,600 --> 00:27:51,120
large piece of boilerplate

818
00:27:51,120 --> 00:27:54,000
bulletproof code records are are awesome

819
00:27:54,000 --> 00:27:54,880
i mean they're not

820
00:27:54,880 --> 00:27:57,200
most probably for gpa entities but to

821
00:27:57,200 --> 00:27:58,000
return

822
00:27:58,000 --> 00:28:00,640
a few things from one method called

823
00:28:00,640 --> 00:28:03,200
they're perfect to use with streams

824
00:28:03,200 --> 00:28:05,039
with collectors with reduce they're

825
00:28:05,039 --> 00:28:06,559
perfect i mean i see

826
00:28:06,559 --> 00:28:09,200
perfect fits for records it's just

827
00:28:09,200 --> 00:28:10,640
they're not going to replace

828
00:28:10,640 --> 00:28:14,080
beans uh or or other stuff but just as

829
00:28:14,080 --> 00:28:16,159
we needed enems we just weren't

830
00:28:16,159 --> 00:28:18,159
aware of this i think we're going to use

831
00:28:18,159 --> 00:28:19,200
any

832
00:28:19,200 --> 00:28:21,760
records moreover what's coming in the

833
00:28:21,760 --> 00:28:23,919
future versions of java is this pattern

834
00:28:23,919 --> 00:28:24,880
matching with

835
00:28:24,880 --> 00:28:26,960
distractors so we're not only going to

836
00:28:26,960 --> 00:28:28,720
have these constructors we're also going

837
00:28:28,720 --> 00:28:29,200
to have

838
00:28:29,200 --> 00:28:31,760
the deconstructors so we will be able to

839
00:28:31,760 --> 00:28:34,559
much easily on records i believe

840
00:28:34,559 --> 00:28:36,799
okay and do you know if the

841
00:28:36,799 --> 00:28:38,720
implementation of records will change

842
00:28:38,720 --> 00:28:41,200
because it's a it's a preview feature

843
00:28:41,200 --> 00:28:44,480
uh i i can't tell that i mean i don't

844
00:28:44,480 --> 00:28:45,360
see it in

845
00:28:45,360 --> 00:28:47,600
other people's brains so uh maybe that's

846
00:28:47,600 --> 00:28:48,399
good

847
00:28:48,399 --> 00:28:51,360
i can tell that i think there's uh

848
00:28:51,360 --> 00:28:53,279
certainly a risk that they will change

849
00:28:53,279 --> 00:28:55,440
and moreover i'm not sure if i would use

850
00:28:55,440 --> 00:28:57,520
them in production right now

851
00:28:57,520 --> 00:28:59,840
unless i would be running uh the whole

852
00:28:59,840 --> 00:29:01,440
infrastructure because i'm not sure if

853
00:29:01,440 --> 00:29:03,360
there are any cloud providers like uh

854
00:29:03,360 --> 00:29:05,120
you know providing java 14

855
00:29:05,120 --> 00:29:06,480
unless of course you have your own

856
00:29:06,480 --> 00:29:09,039
dockers and so on and the other thing is

857
00:29:09,039 --> 00:29:09,919
that maybe

858
00:29:09,919 --> 00:29:12,320
uh if you rely on the implementation

859
00:29:12,320 --> 00:29:13,520
details too much

860
00:29:13,520 --> 00:29:16,559
uh like for java 15 or 16 you'll need to

861
00:29:16,559 --> 00:29:18,320
rewrite your code so if you have like a

862
00:29:18,320 --> 00:29:19,440
tiny micro service

863
00:29:19,440 --> 00:29:21,440
and you host on your own why not why not

864
00:29:21,440 --> 00:29:23,039
give it a spin that's why it's called

865
00:29:23,039 --> 00:29:24,080
preview features so

866
00:29:24,080 --> 00:29:25,520
for us to preview and provide the

867
00:29:25,520 --> 00:29:27,360
feedback but you know

868
00:29:27,360 --> 00:29:29,200
as a long-term investment in something

869
00:29:29,200 --> 00:29:30,559
you don't host on your own

870
00:29:30,559 --> 00:29:32,480
or people are running it on your own i

871
00:29:32,480 --> 00:29:34,880
mean on-premise i'm not so sure records

872
00:29:34,880 --> 00:29:38,240
are meant to be used right now cool and

873
00:29:38,240 --> 00:29:39,919
do you think the use of records can

874
00:29:39,919 --> 00:29:42,399
improve performance

875
00:29:42,399 --> 00:29:45,360
honestly i don't know i i haven't

876
00:29:45,360 --> 00:29:49,439
checked that this way i mean um

877
00:29:49,520 --> 00:29:50,880
i really don't know i wish i could

878
00:29:50,880 --> 00:29:52,640
answer this question but i would need to

879
00:29:52,640 --> 00:29:53,520
check

880
00:29:53,520 --> 00:29:56,399
that's a good one good question cool

881
00:29:56,399 --> 00:29:58,399
thank you so much for joining us pierce

882
00:29:58,399 --> 00:30:00,640
it's been a pleasure to have you here um

883
00:30:00,640 --> 00:30:01,679
we're about to head

884
00:30:01,679 --> 00:30:04,799
into a break now um

885
00:30:04,799 --> 00:30:06,559
for uh for a quick refreshment but

886
00:30:06,559 --> 00:30:08,000
please do remember that we're trying to

887
00:30:08,000 --> 00:30:09,440
raise money for the world health

888
00:30:09,440 --> 00:30:11,679
organization covered 19 solidarity

889
00:30:11,679 --> 00:30:13,039
response fund

890
00:30:13,039 --> 00:30:14,960
if you want to help us out we've already

891
00:30:14,960 --> 00:30:17,200
raised over 70 000

892
00:30:17,200 --> 00:30:18,880
um by doing this event if you want to

893
00:30:18,880 --> 00:30:20,240
help out you can head on

894
00:30:20,240 --> 00:30:22,720
over to ordertalks.org forward slash

895
00:30:22,720 --> 00:30:23,600
tickets

896
00:30:23,600 --> 00:30:25,440
click the register button and buy a

897
00:30:25,440 --> 00:30:27,120
donation ticket that's all you need to

898
00:30:27,120 --> 00:30:27,760
do

899
00:30:27,760 --> 00:30:30,720
so have a nice break um go grab yourself

900
00:30:30,720 --> 00:30:31,760
a refreshment

901
00:30:31,760 --> 00:30:34,559
and we will see you again very soon when

902
00:30:34,559 --> 00:30:36,320
the java track continues

903
00:30:36,320 --> 00:30:40,879
thanks very much thank you

