1
00:00:00,060 --> 00:00:04,049
good morning okay if you can unmute for

2
00:00:04,049 --> 00:00:05,279
me and we can see if the sound is

3
00:00:05,279 --> 00:00:06,480
working I think the sound is working

4
00:00:06,480 --> 00:00:08,760
right yeah good morning Brian can you

5
00:00:08,760 --> 00:00:09,150
hear me

6
00:00:09,150 --> 00:00:11,340
I can't hear you perfectly so that's

7
00:00:11,340 --> 00:00:13,259
that that's the the the the good thing

8
00:00:13,259 --> 00:00:15,120
of having a few minutes mins left we are

9
00:00:15,120 --> 00:00:16,699
live on stream but that doesn't matter

10
00:00:16,699 --> 00:00:19,320
if you can share your screen already I

11
00:00:19,320 --> 00:00:22,320
will I will mix it in whenever we are we

12
00:00:22,320 --> 00:00:25,170
are ready to go you will be instructed

13
00:00:25,170 --> 00:00:28,140
how how this will work and I will just

14
00:00:28,140 --> 00:00:30,480
give you a short introduction in a few

15
00:00:30,480 --> 00:00:32,460
seconds and now we just keep rolling

16
00:00:32,460 --> 00:00:35,790
because the stream is rolling anyway so

17
00:00:35,790 --> 00:00:38,340
you know what the time frame is let's go

18
00:00:38,340 --> 00:00:43,649
for it right and I see your screen is is

19
00:00:43,649 --> 00:00:47,489
coming up amazing so again we already

20
00:00:47,489 --> 00:00:49,530
have the second order the first talk we

21
00:00:49,530 --> 00:00:51,300
are up to the second one already it's

22
00:00:51,300 --> 00:00:54,149
going way fast faster than I would

23
00:00:54,149 --> 00:00:57,329
imagine but again we have a few more

24
00:00:57,329 --> 00:01:00,570
hours to go I would say picking up a 24

25
00:01:00,570 --> 00:01:03,149
hour conference is well we will see

26
00:01:03,149 --> 00:01:05,580
afterwards how I will be at the end of

27
00:01:05,580 --> 00:01:09,299
this whole Trek welcome Jorge I love

28
00:01:09,299 --> 00:01:10,590
that you being here and you're going to

29
00:01:10,590 --> 00:01:12,360
talk about async javascript error

30
00:01:12,360 --> 00:01:16,259
handling I cannot see your screen yet

31
00:01:16,259 --> 00:01:18,799
have you shared your screen or did you

32
00:01:18,799 --> 00:01:23,630
if you want to please try to do it again

33
00:01:23,630 --> 00:01:27,000
and in the meantime I will just keep

34
00:01:27,000 --> 00:01:29,729
keep talking I see Jorge screen and I

35
00:01:29,729 --> 00:01:34,549
will add it to the stream right now and

36
00:01:34,549 --> 00:01:39,360
we see his screen alright Jorge the I

37
00:01:39,360 --> 00:01:42,299
pronounce correctly yeah that's correct

38
00:01:42,299 --> 00:01:45,090
Jorge Jorge Jorge this is Spanish right

39
00:01:45,090 --> 00:01:50,729
the name is Spanish amazing ok amazing I

40
00:01:50,729 --> 00:01:53,100
would say the floor is yours to give it

41
00:01:53,100 --> 00:01:55,439
a go and I will jump in five minutes

42
00:01:55,439 --> 00:01:57,600
before the end with questions that are

43
00:01:57,600 --> 00:01:59,820
coming up in the slide Oh or in the TREC

44
00:01:59,820 --> 00:02:02,009
JavaScript thing it can be that somebody

45
00:02:02,009 --> 00:02:03,810
else will come up but one of the hosts

46
00:02:03,810 --> 00:02:05,729
will come up probably will be me so

47
00:02:05,729 --> 00:02:07,759
let's give it a go

48
00:02:07,759 --> 00:02:11,179
thank you Brian

49
00:02:11,200 --> 00:02:14,710
yeah so hello everybody good morning I'm

50
00:02:14,710 --> 00:02:17,290
very proud to be part of this welcome to

51
00:02:17,290 --> 00:02:19,569
my chalk in the all the talks online

52
00:02:19,569 --> 00:02:24,300
organizer by snakes and other partners

53
00:02:24,300 --> 00:02:27,280
so today I'm gonna be talking about a

54
00:02:27,280 --> 00:02:32,530
bit dissipate it's a very introductory

55
00:02:32,530 --> 00:02:36,640
to async error handling in in JavaScript

56
00:02:36,640 --> 00:02:43,209
and some snippets and some helpful

57
00:02:43,209 --> 00:02:45,160
tricks that you could use when working

58
00:02:45,160 --> 00:02:48,850
with JavaScript Nadia's async traces and

59
00:02:48,850 --> 00:02:52,090
errors in general which always comes

60
00:02:52,090 --> 00:02:56,350
handy right so yeah I think so I'm

61
00:02:56,350 --> 00:02:58,390
basing the in Spain at the minute and

62
00:02:58,390 --> 00:03:02,410
it's 11:00 in the morning so hello and

63
00:03:02,410 --> 00:03:04,269
good morning good afternoon and good

64
00:03:04,269 --> 00:03:07,930
evening to everyone that's listening and

65
00:03:07,930 --> 00:03:10,360
the hostler industry more that will join

66
00:03:10,360 --> 00:03:13,420
later Sydney Singapore Shanghai New

67
00:03:13,420 --> 00:03:16,720
Delhi School London San Francisco New

68
00:03:16,720 --> 00:03:19,290
Zealand lots of people from New Zealand

69
00:03:19,290 --> 00:03:22,829
welcome to my talk now I need to breathe

70
00:03:22,829 --> 00:03:25,840
usually when I'm delivering talks in

71
00:03:25,840 --> 00:03:28,989
from a wider audience I I usually have

72
00:03:28,989 --> 00:03:31,420
to breathe like two times or three times

73
00:03:31,420 --> 00:03:36,160
before I come into into the topic but

74
00:03:36,160 --> 00:03:38,290
now it feels like I'm talking to the

75
00:03:38,290 --> 00:03:41,290
wall you know and I stay good I know

76
00:03:41,290 --> 00:03:43,209
that you're you're back there listening

77
00:03:43,209 --> 00:03:46,060
to me I hope you appreciate this talk

78
00:03:46,060 --> 00:03:48,489
and you learn something new today so

79
00:03:48,489 --> 00:03:50,950
yeah my name is Jorge so if I haven't

80
00:03:50,950 --> 00:03:55,120
introduced myself yet the Brian did and

81
00:03:55,120 --> 00:03:56,799
I'm an engineer I am working at the

82
00:03:56,799 --> 00:04:01,209
moment at a Dyson and with the connected

83
00:04:01,209 --> 00:04:03,730
products and I'm a senior engineer

84
00:04:03,730 --> 00:04:08,799
trying to trying to make the connection

85
00:04:08,799 --> 00:04:11,079
between the Dyson products like the

86
00:04:11,079 --> 00:04:15,450
robot vacuum cleaners purifiers etc and

87
00:04:15,450 --> 00:04:17,680
to connect to the cloud as seamless

88
00:04:17,680 --> 00:04:19,899
seamless as possible

89
00:04:19,899 --> 00:04:23,410
and yet my background is no J yes I can

90
00:04:23,410 --> 00:04:24,940
do a little bit of seashore

91
00:04:24,940 --> 00:04:28,390
Leo : and yeah this this time it's gonna

92
00:04:28,390 --> 00:04:31,150
be only JavaScript right you can find my

93
00:04:31,150 --> 00:04:34,300
webpage and there on the corner and also

94
00:04:34,300 --> 00:04:37,780
my twitter handle feel free to visit so

95
00:04:37,780 --> 00:04:40,900
when I start a talk I usually have a

96
00:04:40,900 --> 00:04:42,970
whole time where I ask the audience to

97
00:04:42,970 --> 00:04:45,280
raise their hands and get starting to

98
00:04:45,280 --> 00:04:48,310
the topic to see and how what's the

99
00:04:48,310 --> 00:04:51,760
level of the audience but this time is

100
00:04:51,760 --> 00:04:56,320
not gonna be possible so yeah please use

101
00:04:56,320 --> 00:04:58,150
the comment sections follow me on

102
00:04:58,150 --> 00:05:00,490
Twitter like and subscribe all that

103
00:05:00,490 --> 00:05:03,640
right let's get into the topic I'm gonna

104
00:05:03,640 --> 00:05:06,520
talk a bit about try-catch blocks in

105
00:05:06,520 --> 00:05:09,130
JavaScript how do you handle errors and

106
00:05:09,130 --> 00:05:10,960
then what is a synchronous programming

107
00:05:10,960 --> 00:05:12,400
and how do you do

108
00:05:12,400 --> 00:05:13,990
how do you do a synchronous programming

109
00:05:13,990 --> 00:05:17,430
inside no yes then a little bit about

110
00:05:17,430 --> 00:05:22,060
arrow stack traces and new functionality

111
00:05:22,060 --> 00:05:24,550
from node 12 that was released last year

112
00:05:24,550 --> 00:05:28,360
I hope with this asynchronous stack

113
00:05:28,360 --> 00:05:34,060
traces so this is a how simple

114
00:05:34,060 --> 00:05:35,919
javascript code looks like we have a

115
00:05:35,919 --> 00:05:38,560
function we say it's go to the beach at

116
00:05:38,560 --> 00:05:40,510
the moment if the location is pained you

117
00:05:40,510 --> 00:05:42,100
cannot go to the beach because we are in

118
00:05:42,100 --> 00:05:45,070
lockdown as most of the most of the

119
00:05:45,070 --> 00:05:47,830
countries are there but yeah else return

120
00:05:47,830 --> 00:05:50,410
true right so if I try to go to the

121
00:05:50,410 --> 00:05:53,050
beach in the Antarctica continent

122
00:05:53,050 --> 00:05:57,760
I can else if I if it gives me a if it

123
00:05:57,760 --> 00:05:59,500
returns force

124
00:05:59,500 --> 00:06:02,140
I'll log a failure right so this is

125
00:06:02,140 --> 00:06:04,900
simple code we all know this is a the

126
00:06:04,900 --> 00:06:07,840
way you handle the errors in synchronous

127
00:06:07,840 --> 00:06:10,780
code so we are not throw in an error but

128
00:06:10,780 --> 00:06:13,510
we are returning to all force and and

129
00:06:13,510 --> 00:06:18,160
then we can act accordingly right now if

130
00:06:18,160 --> 00:06:20,140
we want to do this if we want to get

131
00:06:20,140 --> 00:06:23,440
into their async wall it's gonna be a

132
00:06:23,440 --> 00:06:26,020
bit more complicated given that when you

133
00:06:26,020 --> 00:06:29,080
schedule an asynchronous call you know

134
00:06:29,080 --> 00:06:31,060
from where it's coming where it's going

135
00:06:31,060 --> 00:06:34,840
who who called it and at what time

136
00:06:34,840 --> 00:06:37,390
before what afterward it's very

137
00:06:37,390 --> 00:06:38,370
complicated

138
00:06:38,370 --> 00:06:41,330
right so first let me quickly explain

139
00:06:41,330 --> 00:06:43,710
the synchronous programming as most of

140
00:06:43,710 --> 00:06:45,630
you know is a design pattern which

141
00:06:45,630 --> 00:06:47,550
ensure that non-blocking code execution

142
00:06:47,550 --> 00:06:50,790
so when you schedule an async task you

143
00:06:50,790 --> 00:06:52,770
can the code can continue execute

144
00:06:52,770 --> 00:06:55,080
executing all the tasks synchronous or

145
00:06:55,080 --> 00:06:57,630
asynchronous while be a single stack

146
00:06:57,630 --> 00:07:01,320
task is in the background and executing

147
00:07:01,320 --> 00:07:03,870
itself so JavaScript is a synchronous in

148
00:07:03,870 --> 00:07:06,900
nature and so is know so if you are

149
00:07:06,900 --> 00:07:09,750
trying to get into JavaScript I know yes

150
00:07:09,750 --> 00:07:11,220
you should

151
00:07:11,220 --> 00:07:13,289
it's it's a mess that you learned how to

152
00:07:13,289 --> 00:07:14,940
the basic of asynchronous programming

153
00:07:14,940 --> 00:07:18,900
and and yeah the code executes we had

154
00:07:18,900 --> 00:07:20,820
without having any dependency and no

155
00:07:20,820 --> 00:07:22,350
other so it doesn't depend another

156
00:07:22,350 --> 00:07:24,510
course it just you trigger the action

157
00:07:24,510 --> 00:07:26,789
and it's us in the background executing

158
00:07:26,789 --> 00:07:29,340
and then it will come come back when it

159
00:07:29,340 --> 00:07:32,160
has a proper we saw and this is in this

160
00:07:32,160 --> 00:07:33,780
improves the system efficiency on top

161
00:07:33,780 --> 00:07:36,360
because you can do several things as

162
00:07:36,360 --> 00:07:39,690
synchrony synchronously and if you type

163
00:07:39,690 --> 00:07:43,080
a little bit born into a Singh work in

164
00:07:43,080 --> 00:07:45,810
JavaScript and ideas you you should

165
00:07:45,810 --> 00:07:48,030
realize there is no really a synchronous

166
00:07:48,030 --> 00:07:49,770
it's no it's not like you are doing a

167
00:07:49,770 --> 00:07:52,770
lot of things in parallel but it gives

168
00:07:52,770 --> 00:07:55,950
you the feel I think of an async task

169
00:07:55,950 --> 00:07:58,860
and it won't block the main threat so

170
00:07:58,860 --> 00:08:00,750
the method is it's gonna continue

171
00:08:00,750 --> 00:08:03,300
spinning and when the background task

172
00:08:03,300 --> 00:08:06,630
has everything ready it will be turned

173
00:08:06,630 --> 00:08:08,400
to there it will return to the main

174
00:08:08,400 --> 00:08:13,340
threat so in the beginning there was

175
00:08:13,340 --> 00:08:14,490
callbacks

176
00:08:14,490 --> 00:08:18,240
there were callbacks and using callbacks

177
00:08:18,240 --> 00:08:22,020
is how you will program a async

178
00:08:22,020 --> 00:08:24,270
functionalities using javascript on

179
00:08:24,270 --> 00:08:28,530
ideas but then that's that's that's way

180
00:08:28,530 --> 00:08:33,929
to all I think it was es6 so yeah under

181
00:08:33,929 --> 00:08:36,708
introduced it what they call promises

182
00:08:36,708 --> 00:08:39,630
which are a way of better understanding

183
00:08:39,630 --> 00:08:42,750
the callbacks so in this code we have

184
00:08:42,750 --> 00:08:44,400
the function go to the beach that

185
00:08:44,400 --> 00:08:47,220
returns a new promise that resolves in

186
00:08:47,220 --> 00:08:51,900
one second or a thousand milliseconds so

187
00:08:51,900 --> 00:08:55,690
whenever you call go to the beach it's

188
00:08:55,690 --> 00:08:58,840
gonna wait one second yeah it's gonna

189
00:08:58,840 --> 00:09:00,400
wait one second in the background and

190
00:09:00,400 --> 00:09:02,800
then return so it's taking you one

191
00:09:02,800 --> 00:09:05,230
second literally two to go to the beach

192
00:09:05,230 --> 00:09:06,400
right I don't know maybe to

193
00:09:06,400 --> 00:09:10,030
teleportation or whatever but and so yes

194
00:09:10,030 --> 00:09:12,040
we have our async function go to the

195
00:09:12,040 --> 00:09:16,690
beach and then we have this little

196
00:09:16,690 --> 00:09:20,710
snippet that is top then and which helps

197
00:09:20,710 --> 00:09:23,440
you concatenate actions so basically

198
00:09:23,440 --> 00:09:26,350
when you call go to the go to the beach

199
00:09:26,350 --> 00:09:28,870
function it's not gonna block the main

200
00:09:28,870 --> 00:09:30,610
thread the method is gonna continue

201
00:09:30,610 --> 00:09:32,860
doing whatever it needs to do serve in

202
00:09:32,860 --> 00:09:35,500
HTTP requests or and any other things

203
00:09:35,500 --> 00:09:38,620
and then when go to the beach resolves

204
00:09:38,620 --> 00:09:41,260
after one second the function does

205
00:09:41,260 --> 00:09:43,650
inside the den it's gonna be execute

206
00:09:43,650 --> 00:09:47,050
that's why it's called then so in this

207
00:09:47,050 --> 00:09:49,440
code we have is go to the beach

208
00:09:49,440 --> 00:09:53,350
Antarctica then success right so what

209
00:09:53,350 --> 00:09:56,080
this executes is it cause go to the

210
00:09:56,080 --> 00:09:59,020
beach it waits for a second and then it

211
00:09:59,020 --> 00:10:03,760
prints success so this is the very basic

212
00:10:03,760 --> 00:10:08,830
sample with promises now we can

213
00:10:08,830 --> 00:10:10,570
introduce more things as I explained

214
00:10:10,570 --> 00:10:14,020
while you're doing this icing task when

215
00:10:14,020 --> 00:10:16,270
when you schedule an async task you can

216
00:10:16,270 --> 00:10:19,510
do things on the main thread so for

217
00:10:19,510 --> 00:10:21,910
example what if we want to go to the to

218
00:10:21,910 --> 00:10:24,070
the beach but you need to turn the radio

219
00:10:24,070 --> 00:10:25,840
I do want to turn the radio on in the

220
00:10:25,840 --> 00:10:27,520
meantime so while you are driving to the

221
00:10:27,520 --> 00:10:29,700
beach you want to be listen to the radio

222
00:10:29,700 --> 00:10:32,590
so that's that's why this is useful this

223
00:10:32,590 --> 00:10:34,930
asynchronous programming so in here we

224
00:10:34,930 --> 00:10:37,360
have go to the beach again Antarctica

225
00:10:37,360 --> 00:10:41,860
then success and we print we have that

226
00:10:41,860 --> 00:10:43,810
line console.log turning on the radio in

227
00:10:43,810 --> 00:10:48,610
the meantime which appears to be appears

228
00:10:48,610 --> 00:10:51,250
that it's going to be execute after go

229
00:10:51,250 --> 00:10:53,590
to the beach but because go to the beach

230
00:10:53,590 --> 00:10:55,870
is an a an async function an async task

231
00:10:55,870 --> 00:10:58,030
is gonna be on the background and it's

232
00:10:58,030 --> 00:11:00,490
gonna last one second to resolve the

233
00:11:00,490 --> 00:11:03,640
console.log walk on and will be printed

234
00:11:03,640 --> 00:11:06,070
before they go to the beach

235
00:11:06,070 --> 00:11:08,200
because console.log is a synchronous

236
00:11:08,200 --> 00:11:09,460
function and it's not waiting for

237
00:11:09,460 --> 00:11:12,670
anything so this is when an async

238
00:11:12,670 --> 00:11:17,560
function comes to - to help us being

239
00:11:17,560 --> 00:11:20,320
more performing and having more output

240
00:11:20,320 --> 00:11:22,510
and executing more actions in the same

241
00:11:22,510 --> 00:11:26,320
in the same amount of time so what we

242
00:11:26,320 --> 00:11:29,110
have here now let's let's keep adding

243
00:11:29,110 --> 00:11:33,820
things now using this async stuff we can

244
00:11:33,820 --> 00:11:36,880
continue adding more and more actions

245
00:11:36,880 --> 00:11:39,910
into it for example and well I'm gonna

246
00:11:39,910 --> 00:11:42,400
skip this because this is nature code

247
00:11:42,400 --> 00:11:45,450
and we don't have much time left

248
00:11:45,450 --> 00:11:49,420
basically when we go to the beach after

249
00:11:49,420 --> 00:11:53,140
we write to the beach we console.log CSS

250
00:11:53,140 --> 00:11:56,530
and then we make pocket a little pita

251
00:11:56,530 --> 00:11:59,620
pocket a tortilla is basically a Spanish

252
00:11:59,620 --> 00:12:01,600
language right with tortilla most of you

253
00:12:01,600 --> 00:12:05,590
may know what tortillas so yeah when we

254
00:12:05,590 --> 00:12:08,440
write to the beach we print success and

255
00:12:08,440 --> 00:12:10,870
then we make pocket on a tortilla and

256
00:12:10,870 --> 00:12:13,090
then when boca del tortilla is done

257
00:12:13,090 --> 00:12:17,830
which is we do it in one second we print

258
00:12:17,830 --> 00:12:20,530
ricotta is ready if there's any other in

259
00:12:20,530 --> 00:12:23,740
here we catch it with the catch

260
00:12:23,740 --> 00:12:28,630
expression and we print the lock with

261
00:12:28,630 --> 00:12:30,910
Quinn failure right so the problem with

262
00:12:30,910 --> 00:12:36,090
this is that we you're not in control of

263
00:12:36,090 --> 00:12:38,830
what the errors and what the single

264
00:12:38,830 --> 00:12:40,570
actions and how to respond to the single

265
00:12:40,570 --> 00:12:43,960
actions you can have all this dot then

266
00:12:43,960 --> 00:12:47,050
and do it like a waterfall to the end of

267
00:12:47,050 --> 00:12:48,400
the end of the end of the end on that

268
00:12:48,400 --> 00:12:50,980
and they catch all the errors it's going

269
00:12:50,980 --> 00:12:54,340
to be difficult if you want to action

270
00:12:54,340 --> 00:12:57,340
over go to the beach or over make a

271
00:12:57,340 --> 00:12:59,500
tortilla if there's a failure in dos

272
00:12:59,500 --> 00:13:02,760
it's gonna be cut in the main catch

273
00:13:02,760 --> 00:13:08,400
section so how can we make this better

274
00:13:09,510 --> 00:13:14,230
basically because this promises to be

275
00:13:14,230 --> 00:13:17,020
it's a bit difficult to understand and

276
00:13:17,020 --> 00:13:18,940
to work with the errors

277
00:13:18,940 --> 00:13:22,300
and a new operator if you want to call

278
00:13:22,300 --> 00:13:25,000
it like that it was introduced to no js'

279
00:13:25,000 --> 00:13:28,020
and JavaScript which is async/await

280
00:13:28,020 --> 00:13:33,280
now what async/await is it's a lot of

281
00:13:33,280 --> 00:13:36,520
people define it as the sugar on the top

282
00:13:36,520 --> 00:13:39,130
of promises so we still have promises in

283
00:13:39,130 --> 00:13:41,350
the background but this is an easier way

284
00:13:41,350 --> 00:13:44,920
of writing the code so we have this

285
00:13:44,920 --> 00:13:48,730
awaiting here and it's gonna wait for go

286
00:13:48,730 --> 00:13:51,010
to the beach function to finish before

287
00:13:51,010 --> 00:13:53,860
executing the next line of code so it's

288
00:13:53,860 --> 00:13:57,370
similar to that but we don't need to put

289
00:13:57,370 --> 00:13:59,350
that dot then it's always gonna be await

290
00:13:59,350 --> 00:14:01,480
this function away these of the function

291
00:14:01,480 --> 00:14:03,280
await this function await this function

292
00:14:03,280 --> 00:14:06,280
and everything is gonna look it's gonna

293
00:14:06,280 --> 00:14:09,370
be executed sequentially no J's is going

294
00:14:09,370 --> 00:14:11,890
to wait for each of their a syntax to

295
00:14:11,890 --> 00:14:16,360
return to execute the next time now what

296
00:14:16,360 --> 00:14:20,830
happens in looking at this code now it's

297
00:14:20,830 --> 00:14:23,650
not that easy to catch the errors in the

298
00:14:23,650 --> 00:14:26,440
promises we have this dot catch we will

299
00:14:26,440 --> 00:14:29,110
catch the error thrown by the promise or

300
00:14:29,110 --> 00:14:31,300
the failure thrown by the promise in

301
00:14:31,300 --> 00:14:33,850
this code now we have a single line an

302
00:14:33,850 --> 00:14:35,740
expression that is a wait go to the

303
00:14:35,740 --> 00:14:38,260
beach so it doesn't have any dot then or

304
00:14:38,260 --> 00:14:41,830
any dot catch how do we do that well now

305
00:14:41,830 --> 00:14:45,070
it's when they try catch expression or

306
00:14:45,070 --> 00:14:48,610
try catch block or logical block comes

307
00:14:48,610 --> 00:14:50,920
into action on the left-hand side you

308
00:14:50,920 --> 00:14:54,430
have a simple block so you have a try

309
00:14:54,430 --> 00:14:56,560
and in a catch try it's gonna try

310
00:14:56,560 --> 00:14:58,660
execute whatever is inside that block

311
00:14:58,660 --> 00:15:00,940
and if there's any error is gonna throw

312
00:15:00,940 --> 00:15:04,060
and it's gonna be handled in the catch

313
00:15:04,060 --> 00:15:07,600
block so this way we can have on the

314
00:15:07,600 --> 00:15:11,350
right-hand side a try catch over they go

315
00:15:11,350 --> 00:15:16,030
to beach fun function so if there's a

316
00:15:16,030 --> 00:15:17,770
minute if there's any error we

317
00:15:17,770 --> 00:15:22,120
console.log the error now how does this

318
00:15:22,120 --> 00:15:24,700
work if we want to do several action

319
00:15:24,700 --> 00:15:26,260
like for example male cat on a tortilla

320
00:15:26,260 --> 00:15:29,560
so we have a way to go to the beach

321
00:15:29,560 --> 00:15:32,290
after that's execute whippin success

322
00:15:32,290 --> 00:15:32,769
then

323
00:15:32,769 --> 00:15:35,050
wait maybe cut a tortilla after that's

324
00:15:35,050 --> 00:15:36,939
done then we print pocket a tortilla is

325
00:15:36,939 --> 00:15:39,189
ready and if there's any arrow we have

326
00:15:39,189 --> 00:15:40,959
this try-catch that's going to print the

327
00:15:40,959 --> 00:15:46,199
failure now we have now all this

328
00:15:46,199 --> 00:15:49,420
sequence of events that we execute one

329
00:15:49,420 --> 00:15:52,209
after the other but what about if we

330
00:15:52,209 --> 00:15:55,089
want to try and catch arrows on the

331
00:15:55,089 --> 00:15:57,429
maple cutter a tortilla function not on

332
00:15:57,429 --> 00:16:01,149
the global try-catch block we will end

333
00:16:01,149 --> 00:16:03,549
up like something we will end up with

334
00:16:03,549 --> 00:16:06,279
something like that where we need to put

335
00:16:06,279 --> 00:16:08,799
two different try catches one try catch

336
00:16:08,799 --> 00:16:10,779
for the function for the action of going

337
00:16:10,779 --> 00:16:12,790
to the beach and another try catch for

338
00:16:12,790 --> 00:16:16,179
the action of make a tortilla right so

339
00:16:16,179 --> 00:16:19,569
now this code is easy to read and but

340
00:16:19,569 --> 00:16:22,959
after some time writing if the code is

341
00:16:22,959 --> 00:16:24,279
complicated and you have a lot of

342
00:16:24,279 --> 00:16:27,399
function a lot of actions you probably

343
00:16:27,399 --> 00:16:30,309
are gonna have a lot of try catches and

344
00:16:30,309 --> 00:16:32,649
your code is all gonna look like try

345
00:16:32,649 --> 00:16:35,139
this try this try this try this strategy

346
00:16:35,139 --> 00:16:38,499
Scott Scott Scott Scott Scott so it's a

347
00:16:38,499 --> 00:16:41,139
little bit unbearable when when you have

348
00:16:41,139 --> 00:16:48,910
a lot of functions now this whoa now I

349
00:16:48,910 --> 00:16:51,759
start the landing go :

350
00:16:51,759 --> 00:16:55,059
and I'd year ago are year and a half ago

351
00:16:55,059 --> 00:17:00,610
um and I've always been a I've always

352
00:17:00,610 --> 00:17:03,459
wondered how the error handling was

353
00:17:03,459 --> 00:17:05,319
different to the other scrip unto their

354
00:17:05,319 --> 00:17:07,599
language that I knew and so this is an

355
00:17:07,599 --> 00:17:10,270
example of how to handle the errors the

356
00:17:10,270 --> 00:17:13,500
Golan way where you have this function

357
00:17:13,500 --> 00:17:16,720
data based or query and that function

358
00:17:16,720 --> 00:17:19,779
will return to objects or two variables

359
00:17:19,779 --> 00:17:22,000
it will return data and it will return

360
00:17:22,000 --> 00:17:25,750
error right so now we could easily check

361
00:17:25,750 --> 00:17:31,210
if error is it's Nolan or and then at if

362
00:17:31,210 --> 00:17:34,149
there is any error how is this different

363
00:17:34,149 --> 00:17:36,490
to the try-catch we had well the

364
00:17:36,490 --> 00:17:39,820
behavior is the same but you get rid of

365
00:17:39,820 --> 00:17:42,669
all the try/catch palaver and then just

366
00:17:42,669 --> 00:17:46,330
have only one line that acts if there is

367
00:17:46,330 --> 00:17:50,170
never so the execution will continue and

368
00:17:50,170 --> 00:17:53,470
yes we just do a check if there's an

369
00:17:53,470 --> 00:17:56,260
error then I do something we don't have

370
00:17:56,260 --> 00:17:58,780
this try block and then catch the error

371
00:17:58,780 --> 00:18:02,770
and get the catch block so it looks too

372
00:18:02,770 --> 00:18:05,620
much to me it looks a bit neater it's a

373
00:18:05,620 --> 00:18:08,830
short way of defining things this is an

374
00:18:08,830 --> 00:18:11,980
alternative way of handling the errors

375
00:18:11,980 --> 00:18:13,690
I'm not saying that usually and stop

376
00:18:13,690 --> 00:18:15,550
using try catch e try caches are always

377
00:18:15,550 --> 00:18:18,940
useful but this is I just wanted to

378
00:18:18,940 --> 00:18:21,130
share with you another way of handling

379
00:18:21,130 --> 00:18:23,260
errors so this is how you're doing the

380
00:18:23,260 --> 00:18:26,350
Gollum way now if we want to apply this

381
00:18:26,350 --> 00:18:31,690
to JavaScript this is gonna be a little

382
00:18:31,690 --> 00:18:33,730
bit difficult to explain but basically

383
00:18:33,730 --> 00:18:36,430
this is the same code we had but now the

384
00:18:36,430 --> 00:18:39,460
functions would return an array with two

385
00:18:39,460 --> 00:18:42,190
values the first value is the error and

386
00:18:42,190 --> 00:18:44,320
the second value is a respond so

387
00:18:44,320 --> 00:18:49,300
whenever something goes right we send we

388
00:18:49,300 --> 00:18:51,490
send back as have we solo the function

389
00:18:51,490 --> 00:18:55,210
the error being no and the result and if

390
00:18:55,210 --> 00:18:57,940
something goes bad then we we just

391
00:18:57,940 --> 00:19:00,400
return the error so in the code we can

392
00:19:00,400 --> 00:19:04,240
do what we saw in in the Golan way we

393
00:19:04,240 --> 00:19:06,220
execute the function and save the error

394
00:19:06,220 --> 00:19:08,140
and the response and if there is any

395
00:19:08,140 --> 00:19:11,200
error we act else we continue the

396
00:19:11,200 --> 00:19:14,170
execution you see now the difference

397
00:19:14,170 --> 00:19:15,520
between the two patterns so we don't

398
00:19:15,520 --> 00:19:18,730
need a try caches but we need to

399
00:19:18,730 --> 00:19:21,010
implement this we a way of returning two

400
00:19:21,010 --> 00:19:22,930
values one if the arrow and the other

401
00:19:22,930 --> 00:19:25,720
one is that we saw so in loose

402
00:19:25,720 --> 00:19:27,840
convenient but may be a little bit

403
00:19:27,840 --> 00:19:34,480
complicated or combo leti so then also I

404
00:19:34,480 --> 00:19:39,610
took this idea from from a blog written

405
00:19:39,610 --> 00:19:44,650
by a guy whose last name is ghost name

406
00:19:44,650 --> 00:19:48,190
I'd know who's first the first name but

407
00:19:48,190 --> 00:19:51,220
yeah you have the link in in that and so

408
00:19:51,220 --> 00:19:54,610
he came with with this little function

409
00:19:54,610 --> 00:19:58,660
which is called - and it's a promise and

410
00:19:58,660 --> 00:20:00,070
it will do

411
00:20:00,070 --> 00:20:03,429
the return it will handle there it will

412
00:20:03,429 --> 00:20:05,019
handle returning the right values for

413
00:20:05,019 --> 00:20:07,450
you so you don't have to return this

414
00:20:07,450 --> 00:20:11,080
we array you just call this function a

415
00:20:11,080 --> 00:20:13,659
will handle if the promise is successful

416
00:20:13,659 --> 00:20:15,639
then it will return the error as new and

417
00:20:15,639 --> 00:20:18,820
will return the data if the promise or

418
00:20:18,820 --> 00:20:21,759
the function the async function was not

419
00:20:21,759 --> 00:20:24,039
successful then it will be shown the

420
00:20:24,039 --> 00:20:26,559
array with the arrow button or return

421
00:20:26,559 --> 00:20:28,509
the data so that's exactly what we want

422
00:20:28,509 --> 00:20:31,840
now if we use this function the code

423
00:20:31,840 --> 00:20:34,029
looks like this a little bit easier for

424
00:20:34,029 --> 00:20:36,039
implementing the function so you can see

425
00:20:36,039 --> 00:20:38,559
they go to beach function and they make

426
00:20:38,559 --> 00:20:40,509
work identity a function no longer have

427
00:20:40,509 --> 00:20:43,840
this return array weird thing now we

428
00:20:43,840 --> 00:20:47,169
have it in the main two function up here

429
00:20:47,169 --> 00:20:50,019
so whenever in our main code when we

430
00:20:50,019 --> 00:20:52,629
call go to the beach we call it with a

431
00:20:52,629 --> 00:20:55,029
two function which is going to convert

432
00:20:55,029 --> 00:20:57,869
that result of the promise into this a

433
00:20:57,869 --> 00:21:01,419
new format that we have with the where

434
00:21:01,419 --> 00:21:03,190
we have an array where the first object

435
00:21:03,190 --> 00:21:04,809
is the arrow and the second updated at

436
00:21:04,809 --> 00:21:07,989
a-- so this is how it looks like I think

437
00:21:07,989 --> 00:21:10,720
it's pretty it's pretty neat and I

438
00:21:10,720 --> 00:21:12,940
encourage you to to try on your own

439
00:21:12,940 --> 00:21:15,759
projects to try it on the no triple or

440
00:21:15,759 --> 00:21:19,269
quit and no Jes program and and just

441
00:21:19,269 --> 00:21:22,809
play with with it yeah this is a

442
00:21:22,809 --> 00:21:26,499
comparison where before we had so before

443
00:21:26,499 --> 00:21:29,049
it's on the right hand side you can see

444
00:21:29,049 --> 00:21:32,080
the Tri caches and now we have this led

445
00:21:32,080 --> 00:21:35,229
error response we save the around the

446
00:21:35,229 --> 00:21:36,909
response and then active there's an

447
00:21:36,909 --> 00:21:41,559
error so yeah I found this on the on

448
00:21:41,559 --> 00:21:46,090
this block from Dima Dima Dima and say

449
00:21:46,090 --> 00:21:47,200
hi to him of me

450
00:21:47,200 --> 00:21:49,779
and so the my Grossman came up with this

451
00:21:49,779 --> 00:21:52,119
nice blog post explaining all this

452
00:21:52,119 --> 00:21:55,779
better than I have but yeah you can you

453
00:21:55,779 --> 00:21:57,970
can go to his blog and and check it out

454
00:21:57,970 --> 00:22:00,700
basically at the end of the post he says

455
00:22:00,700 --> 00:22:03,009
that this is a different way of looking

456
00:22:03,009 --> 00:22:05,229
at how to handle async/await

457
00:22:05,229 --> 00:22:10,029
errors for no reason you should not use

458
00:22:10,029 --> 00:22:13,029
try catch and start using this this is

459
00:22:13,029 --> 00:22:13,900
just another night

460
00:22:13,900 --> 00:22:16,960
a way of handling the errors and it's up

461
00:22:16,960 --> 00:22:20,290
to you to choose either of those in the

462
00:22:20,290 --> 00:22:24,760
right situation now let's jump to a

463
00:22:24,760 --> 00:22:27,340
different topic now that we so we have

464
00:22:27,340 --> 00:22:31,180
handle now errors in JavaScript async

465
00:22:31,180 --> 00:22:33,550
errors in JavaScript using this golem

466
00:22:33,550 --> 00:22:37,540
way and this golden snippet now let

467
00:22:37,540 --> 00:22:43,950
let's look at let's look now at how to

468
00:22:43,950 --> 00:22:46,480
what happens with the stack trace with

469
00:22:46,480 --> 00:22:48,730
the errors when you get the errors so I

470
00:22:48,730 --> 00:22:51,400
mentioned before that when you were

471
00:22:51,400 --> 00:22:53,590
getting errors if when you call a Nation

472
00:22:53,590 --> 00:22:55,360
function right it's executing the

473
00:22:55,360 --> 00:22:57,790
background so now the main thread keeps

474
00:22:57,790 --> 00:22:59,950
executing things and when the TAS in the

475
00:22:59,950 --> 00:23:01,810
background finishes it returns a result

476
00:23:01,810 --> 00:23:03,280
to the main thread so now the main

477
00:23:03,280 --> 00:23:04,870
thread can continue and act on the

478
00:23:04,870 --> 00:23:06,670
result of their of that background test

479
00:23:06,670 --> 00:23:08,980
the thing in here is that the main

480
00:23:08,980 --> 00:23:13,210
thread have lost context of what was the

481
00:23:13,210 --> 00:23:15,820
background test I mean when was it

482
00:23:15,820 --> 00:23:18,960
called for what was it was it called and

483
00:23:18,960 --> 00:23:21,580
what is the expecting when was it

484
00:23:21,580 --> 00:23:24,580
executed everything it has no no

485
00:23:24,580 --> 00:23:26,800
background to it or little background to

486
00:23:26,800 --> 00:23:28,780
it and you have to come up with all

487
00:23:28,780 --> 00:23:34,300
sorts of code and patterns to to be able

488
00:23:34,300 --> 00:23:36,010
to tell what's happening with that

489
00:23:36,010 --> 00:23:38,380
request or they dot then and don't catch

490
00:23:38,380 --> 00:23:41,590
that we have been seen but if there's an

491
00:23:41,590 --> 00:23:45,220
error right when when the background

492
00:23:45,220 --> 00:23:47,980
tasks a raises an error it goes to the

493
00:23:47,980 --> 00:23:49,630
main thread and then the main thread is

494
00:23:49,630 --> 00:23:51,820
gonna go okay I had this TAS in the

495
00:23:51,820 --> 00:23:54,490
background that has thrown an error okay

496
00:23:54,490 --> 00:23:56,710
I can see the error but I don't know

497
00:23:56,710 --> 00:23:58,780
what it's coming from so I don't

498
00:23:58,780 --> 00:24:01,900
remember who called it I just know that

499
00:24:01,900 --> 00:24:03,820
it returned an error so I'm just gonna

500
00:24:03,820 --> 00:24:07,960
show this error to the user but really I

501
00:24:07,960 --> 00:24:10,090
don't know what it's coming from so

502
00:24:10,090 --> 00:24:13,810
that's the problem with async functions

503
00:24:13,810 --> 00:24:16,840
I when they are throwing errors so in

504
00:24:16,840 --> 00:24:18,970
here I'm gonna try to explain how can

505
00:24:18,970 --> 00:24:21,760
you get more context or tell the code to

506
00:24:21,760 --> 00:24:24,490
get more context about your error to be

507
00:24:24,490 --> 00:24:26,560
able to debug your code so when you see

508
00:24:26,560 --> 00:24:27,399
the whole stack

509
00:24:27,399 --> 00:24:28,989
you can see okay this function was

510
00:24:28,989 --> 00:24:30,849
called by this function that was called

511
00:24:30,849 --> 00:24:32,169
by this function that was called by this

512
00:24:32,169 --> 00:24:33,609
function and then you go to the code and

513
00:24:33,609 --> 00:24:37,179
find about right so this is again the

514
00:24:37,179 --> 00:24:39,489
simple go to beach program with the

515
00:24:39,489 --> 00:24:41,320
Antarctica and now we have the maple

516
00:24:41,320 --> 00:24:43,210
cattle a tortilla inside they go to

517
00:24:43,210 --> 00:24:46,989
beach function what happens if we

518
00:24:46,989 --> 00:24:50,409
execute this code because mate pocketed

519
00:24:50,409 --> 00:24:52,779
a tortilla function is not defined they

520
00:24:52,779 --> 00:24:54,700
go to the beach function it's gonna

521
00:24:54,700 --> 00:24:57,039
throw and now the main thread wants one

522
00:24:57,039 --> 00:24:58,210
no-work

523
00:24:58,210 --> 00:25:01,899
where from where did it come from and

524
00:25:01,899 --> 00:25:03,999
it's gonna print this I hope you can see

525
00:25:03,999 --> 00:25:06,549
it when we execute by the stack trace we

526
00:25:06,549 --> 00:25:09,279
get preference our maple cat idea is not

527
00:25:09,279 --> 00:25:12,489
defined at go to the beach and the mud

528
00:25:12,489 --> 00:25:15,070
stack trace line four so it's telling us

529
00:25:15,070 --> 00:25:15,849
okay

530
00:25:15,849 --> 00:25:18,940
maple kata a tortilla Dakota fail was

531
00:25:18,940 --> 00:25:21,339
inside they go to the beach function but

532
00:25:21,339 --> 00:25:23,229
I don't know anything else I don't know

533
00:25:23,229 --> 00:25:25,059
when was it call it doesn't show what's

534
00:25:25,059 --> 00:25:26,950
this line right this line here inside

535
00:25:26,950 --> 00:25:30,519
the main async program it's not telling

536
00:25:30,519 --> 00:25:33,549
us where or who called they go to the

537
00:25:33,549 --> 00:25:35,529
beach which resulted in an error because

538
00:25:35,529 --> 00:25:38,889
may balk identity is not defined now

539
00:25:38,889 --> 00:25:41,710
that's a problem because it's difficult

540
00:25:41,710 --> 00:25:46,080
to debug now so what can we do this

541
00:25:46,080 --> 00:25:50,349
little bit of a trick that you can

542
00:25:50,349 --> 00:25:53,710
implement in node and so you have the

543
00:25:53,710 --> 00:25:54,820
function go to the beach

544
00:25:54,820 --> 00:25:56,679
another very beginning of the function

545
00:25:56,679 --> 00:26:01,330
you save the stack trace so you're you

546
00:26:01,330 --> 00:26:03,580
saving a variable was a context of that

547
00:26:03,580 --> 00:26:05,619
function so you know so the program

548
00:26:05,619 --> 00:26:09,219
knows who called a when when did it call

549
00:26:09,219 --> 00:26:12,249
it with with permit what parameters and

550
00:26:12,249 --> 00:26:15,460
what line and everything so we create a

551
00:26:15,460 --> 00:26:18,219
snapshot of the stack and we save it

552
00:26:18,219 --> 00:26:21,190
into a variable now when we try a maple

553
00:26:21,190 --> 00:26:22,149
cutter a tortilla

554
00:26:22,149 --> 00:26:24,279
because make baccata a tortilla is not

555
00:26:24,279 --> 00:26:27,009
defined then we're gonna catch the error

556
00:26:27,009 --> 00:26:29,769
and we're gonna say okay this function

557
00:26:29,769 --> 00:26:31,899
it's not here I'm gonna add it to my

558
00:26:31,899 --> 00:26:34,359
statuaries do I'm gonna put it on my

559
00:26:34,359 --> 00:26:36,639
stack trace so that they the arrow

560
00:26:36,639 --> 00:26:38,559
contains hold information possible and

561
00:26:38,559 --> 00:26:41,170
I'm gonna throw the whole arrow up

562
00:26:41,170 --> 00:26:44,470
now the main function will have all the

563
00:26:44,470 --> 00:26:46,390
context because you will see the whole

564
00:26:46,390 --> 00:26:49,150
stack trace because we save the stack

565
00:26:49,150 --> 00:26:51,280
trace the moment we call the function so

566
00:26:51,280 --> 00:26:53,350
now the stack trace and all information

567
00:26:53,350 --> 00:26:55,900
about the context is a store in a in a

568
00:26:55,900 --> 00:26:58,390
variable right and and we can use it so

569
00:26:58,390 --> 00:27:00,760
it will look like this when you execute

570
00:27:00,760 --> 00:27:04,480
pet a stack trace it will make Bach

571
00:27:04,480 --> 00:27:07,120
identity yeah it's not defined and you

572
00:27:07,120 --> 00:27:09,400
see the whole stack trace and you can

573
00:27:09,400 --> 00:27:13,630
tell from where go to the beach was cool

574
00:27:13,630 --> 00:27:16,780
and it was go in this line at users

575
00:27:16,780 --> 00:27:19,990
where the stack trace line 16 go to the

576
00:27:19,990 --> 00:27:22,420
beach go to the beach that's never in my

577
00:27:22,420 --> 00:27:24,700
pocket that idea so that looks a little

578
00:27:24,700 --> 00:27:27,790
bit better and easier to debug than this

579
00:27:27,790 --> 00:27:32,470
right now this was happening on all

580
00:27:32,470 --> 00:27:36,640
persons of know up until no 12 so what

581
00:27:36,640 --> 00:27:39,880
happened with no 12 which is now LTS by

582
00:27:39,880 --> 00:27:42,190
the way so you should be using it it was

583
00:27:42,190 --> 00:27:44,590
released last year on April last year

584
00:27:44,590 --> 00:27:47,650
and a new functionality that he brought

585
00:27:47,650 --> 00:27:51,940
order it brings is a in now stores there

586
00:27:51,940 --> 00:27:55,840
it does for you this way of storing a

587
00:27:55,840 --> 00:27:57,880
stack it does it for you in the

588
00:27:57,880 --> 00:28:00,880
background in the behind the scenes so

589
00:28:00,880 --> 00:28:02,680
you don't have to do this saving and it

590
00:28:02,680 --> 00:28:04,480
will do it for you so you can see in

591
00:28:04,480 --> 00:28:07,350
here when we execute so this line is for

592
00:28:07,350 --> 00:28:09,250
executing my code with different

593
00:28:09,250 --> 00:28:10,690
versions of node inside the local

594
00:28:10,690 --> 00:28:13,120
container so you could see when we've

595
00:28:13,120 --> 00:28:18,040
run my bad stack trace with no 10 we get

596
00:28:18,040 --> 00:28:20,050
this party started which is not telling

597
00:28:20,050 --> 00:28:22,540
us anything but when you run it with no

598
00:28:22,540 --> 00:28:27,070
12 you can see this new extra line which

599
00:28:27,070 --> 00:28:30,010
is telling us from where or who call

600
00:28:30,010 --> 00:28:35,260
they go to the beach function now this

601
00:28:35,260 --> 00:28:37,690
is a lot better so you should be using

602
00:28:37,690 --> 00:28:42,250
no yeah no yeah yes 12 and and now it

603
00:28:42,250 --> 00:28:44,410
looks in this is simple it looks a very

604
00:28:44,410 --> 00:28:46,570
it looks very simple because it's sample

605
00:28:46,570 --> 00:28:48,400
is very simple but now if you have a

606
00:28:48,400 --> 00:28:50,320
more complicated example for example

607
00:28:50,320 --> 00:28:52,150
this one from there from the rising

608
00:28:52,150 --> 00:28:54,669
stack blog and what we have server

609
00:28:54,669 --> 00:28:57,369
function that called themselves you lost

610
00:28:57,369 --> 00:28:58,809
the stack because they are always in

611
00:28:58,809 --> 00:29:01,330
conscience in here you can see a

612
00:29:01,330 --> 00:29:06,330
comparison when you secure a with with a

613
00:29:06,330 --> 00:29:10,899
noble thing of note it's gonna it's

614
00:29:10,899 --> 00:29:12,609
gonna it's not gonna tell you from what

615
00:29:12,609 --> 00:29:14,379
it comes but when you're security with

616
00:29:14,379 --> 00:29:16,869
no 12 it's gonna tell you that you was

617
00:29:16,869 --> 00:29:19,539
go from the function way to and that was

618
00:29:19,539 --> 00:29:21,369
go from the function wait one and that

619
00:29:21,369 --> 00:29:23,200
was called from whatever functions so

620
00:29:23,200 --> 00:29:28,029
you have the whole stack trace now that

621
00:29:28,029 --> 00:29:31,450
looks better so basically if you are not

622
00:29:31,450 --> 00:29:33,850
using no idea yes but yet you should

623
00:29:33,850 --> 00:29:36,129
migrate or yopo yes or no yes 12 which

624
00:29:36,129 --> 00:29:38,499
is the LCS now I don't know how many

625
00:29:38,499 --> 00:29:41,259
times we have left I think a little bit

626
00:29:41,259 --> 00:29:43,379
sir I'll carry on

627
00:29:43,379 --> 00:29:47,830
so yeah doing a recap and there's a

628
00:29:47,830 --> 00:29:49,419
beautiful alternative way for everyone

629
00:29:49,419 --> 00:29:51,009
huddle in JavaScript which is they go

630
00:29:51,009 --> 00:29:53,019
long way I'm not telling you not to use

631
00:29:53,019 --> 00:29:55,509
the try-catch blocks but you should

632
00:29:55,509 --> 00:29:59,289
definitely give this a part in a try and

633
00:29:59,289 --> 00:30:01,809
also if you're trying to if you your

634
00:30:01,809 --> 00:30:03,940
program has a scene functions

635
00:30:03,940 --> 00:30:07,359
you better use no des 12 which has

636
00:30:07,359 --> 00:30:10,179
better support support from for acing

637
00:30:10,179 --> 00:30:14,799
functions and for acing stack traces be

638
00:30:14,799 --> 00:30:18,399
happy be kind and stay safe these are

639
00:30:18,399 --> 00:30:21,429
the resources I use I'm gonna be sharing

640
00:30:21,429 --> 00:30:24,129
the slides later on in the in a slack in

641
00:30:24,129 --> 00:30:26,409
Twitter and I'm gonna update them to

642
00:30:26,409 --> 00:30:30,129
jihad to my D hub - you can go you can

643
00:30:30,129 --> 00:30:32,859
visit all those blog posts and get more

644
00:30:32,859 --> 00:30:34,450
insights and more details from what I

645
00:30:34,450 --> 00:30:37,629
have explained here I hope it was useful

646
00:30:37,629 --> 00:30:39,850
and you'll learn some today something

647
00:30:39,850 --> 00:30:40,119
today

648
00:30:40,119 --> 00:30:43,419
now it's time for the questions please

649
00:30:43,419 --> 00:30:45,249
use the comment section I don't know

650
00:30:45,249 --> 00:30:47,619
where you have it here here yeah it's on

651
00:30:47,619 --> 00:30:49,509
the right which is I guess ways that

652
00:30:49,509 --> 00:30:51,820
maybe this this way maybe on the screen

653
00:30:51,820 --> 00:30:53,409
yeah what's the point in different

654
00:30:53,409 --> 00:30:58,840
directions and anyway this is a really

655
00:30:58,840 --> 00:30:59,889
really awesome there's a couple of

656
00:30:59,889 --> 00:31:03,129
couple comments questions one I'd love

657
00:31:03,129 --> 00:31:05,259
to hear what you think about the the

658
00:31:05,259 --> 00:31:07,799
alternate

659
00:31:08,200 --> 00:31:10,360
we alternate to some of the things that

660
00:31:10,360 --> 00:31:15,039
you've shown is is tasks either have you

661
00:31:15,039 --> 00:31:16,509
seen that on github is that is that

662
00:31:16,509 --> 00:31:19,090
something that you're familiar with or

663
00:31:19,090 --> 00:31:21,309
or able to kind of compare the two

664
00:31:21,309 --> 00:31:25,779
approaches right so I haven't used this

665
00:31:25,779 --> 00:31:28,210
new approach in any production code

666
00:31:28,210 --> 00:31:30,820
I've just used it for my little toy boy

667
00:31:30,820 --> 00:31:34,320
yet I'm very happy with it

668
00:31:34,320 --> 00:31:37,230
so far I haven't seen any like big

669
00:31:37,230 --> 00:31:40,799
drawbacks to the new approach and I I

670
00:31:40,799 --> 00:31:43,239
have to say that I quite like it because

671
00:31:43,239 --> 00:31:46,330
it you can you don't have to write the

672
00:31:46,330 --> 00:31:47,980
whole function the whole TriCaster is

673
00:31:47,980 --> 00:31:50,679
less lines of code and I think I'm

674
00:31:50,679 --> 00:31:52,239
already tired of using try catch you

675
00:31:52,239 --> 00:31:55,169
know all over the place and so I'm

676
00:31:55,169 --> 00:31:57,700
personally and this is a personal

677
00:31:57,700 --> 00:31:59,830
opinion I prefer the way of having this

678
00:31:59,830 --> 00:32:02,950
if error and then do something so I just

679
00:32:02,950 --> 00:32:05,320
encourage everyone to to give it a try

680
00:32:05,320 --> 00:32:08,590
and and see which option fit better to

681
00:32:08,590 --> 00:32:11,049
each project or to each programming

682
00:32:11,049 --> 00:32:14,470
personality I guess awesome question

683
00:32:14,470 --> 00:32:16,779
about the error dot stack G are you

684
00:32:16,779 --> 00:32:18,960
aware of any performance penalty that

685
00:32:18,960 --> 00:32:23,109
introduces and no I'm not aware of that

686
00:32:23,109 --> 00:32:25,119
as I said I haven't I haven't tried this

687
00:32:25,119 --> 00:32:27,909
code in production no I have perform any

688
00:32:27,909 --> 00:32:32,470
performer no load testing on this maybe

689
00:32:32,470 --> 00:32:35,529
if you try googling for that you might

690
00:32:35,529 --> 00:32:38,200
find some articles that are doing that

691
00:32:38,200 --> 00:32:40,269
but no I haven't I haven't done that

692
00:32:40,269 --> 00:32:43,149
check by myself okay awesome and in the

693
00:32:43,149 --> 00:32:44,649
in the final minute just a quick

694
00:32:44,649 --> 00:32:45,700
question what do you think of the

695
00:32:45,700 --> 00:32:48,070
biggest gotchas for people who are who

696
00:32:48,070 --> 00:32:50,109
are doing async programming for the

697
00:32:50,109 --> 00:32:53,379
first time compared to the normal

698
00:32:53,379 --> 00:32:57,539
typical program alright so one of the

699
00:32:57,539 --> 00:33:00,369
one of the main problems that I found is

700
00:33:00,369 --> 00:33:02,859
trying to understand how to how this

701
00:33:02,859 --> 00:33:05,320
stack traces and the errors were working

702
00:33:05,320 --> 00:33:07,869
and how to handle them that's why I'm

703
00:33:07,869 --> 00:33:11,440
making this presentation yeah I'd say

704
00:33:11,440 --> 00:33:14,169
that was one of the main hurdles but if

705
00:33:14,169 --> 00:33:18,100
you said this was a very big inner

706
00:33:18,100 --> 00:33:21,280
session so if you are learning

707
00:33:21,280 --> 00:33:24,520
javascript or Nadia's and and trying to

708
00:33:24,520 --> 00:33:29,200
get into the async/await wall the more

709
00:33:29,200 --> 00:33:34,360
blog posts you read and the more the

710
00:33:34,360 --> 00:33:37,180
more samples you write sample code you

711
00:33:37,180 --> 00:33:38,110
don't need to write a whole application

712
00:33:38,110 --> 00:33:42,190
but I I really encourage people to write

713
00:33:42,190 --> 00:33:44,260
their own little programs and play with

714
00:33:44,260 --> 00:33:47,380
it play using a way not using a way

715
00:33:47,380 --> 00:33:49,990
using promises promises here promises

716
00:33:49,990 --> 00:33:52,600
there and they will after some tries

717
00:33:52,600 --> 00:33:54,700
they will understand and realize and

718
00:33:54,700 --> 00:33:57,790
come to you and the idea will come to

719
00:33:57,790 --> 00:34:00,070
your mind and say oh now I understand it

720
00:34:00,070 --> 00:34:02,410
because it's a little bit tricky to

721
00:34:02,410 --> 00:34:04,060
understand and sometimes you can say

722
00:34:04,060 --> 00:34:05,950
okay why this function is triggering now

723
00:34:05,950 --> 00:34:09,159
I wasn't expecting it or yeah it should

724
00:34:09,159 --> 00:34:10,570
be waiting for the next function because

725
00:34:10,570 --> 00:34:13,110
I told it to await and it's not working

726
00:34:13,110 --> 00:34:17,290
but yeah after after playing with it you

727
00:34:17,290 --> 00:34:19,810
you you'll be able to grab that

728
00:34:19,810 --> 00:34:22,989
knowledge and and yeah and basically

729
00:34:22,989 --> 00:34:25,409
also with a lot of articles I'm

730
00:34:25,409 --> 00:34:27,940
conscious that the articles within

731
00:34:27,940 --> 00:34:30,659
several articles might be a little bit

732
00:34:30,659 --> 00:34:33,070
confusing because each article has at

733
00:34:33,070 --> 00:34:36,370
some point of view on this thing but in

734
00:34:36,370 --> 00:34:39,219
the end this is code this is it is what

735
00:34:39,219 --> 00:34:41,110
it is and it has the same behavior for

736
00:34:41,110 --> 00:34:43,090
everyone so no matter from which point

737
00:34:43,090 --> 00:34:45,520
of view you are looking at it you

738
00:34:45,520 --> 00:34:48,668
probably always have the same if you

739
00:34:48,668 --> 00:34:50,668
understand it you're gonna be able to

740
00:34:50,668 --> 00:34:54,280
write code in this way awesome oh hey

741
00:34:54,280 --> 00:34:55,540
we're out of time now but thank you very

742
00:34:55,540 --> 00:34:57,250
very much for your session I really

743
00:34:57,250 --> 00:34:58,510
really appreciate it and thank you for

744
00:34:58,510 --> 00:35:02,020
supporting all the talks next up we have

745
00:35:02,020 --> 00:35:04,240
what do we have we have a break next up

746
00:35:04,240 --> 00:35:06,810
and then followed

