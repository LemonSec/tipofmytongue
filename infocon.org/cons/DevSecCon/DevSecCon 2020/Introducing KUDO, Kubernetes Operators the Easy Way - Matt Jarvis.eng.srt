1
00:00:00,080 --> 00:00:01,920
up now we have matt jarvis the director

2
00:00:01,920 --> 00:00:03,360
of community from our friends

3
00:00:03,360 --> 00:00:06,720
at d2iq so let me pull matt into the

4
00:00:06,720 --> 00:00:08,240
stream

5
00:00:08,240 --> 00:00:10,080
there we are hey matt how's it going

6
00:00:10,080 --> 00:00:12,240
good thank you it's a bit early for

7
00:00:12,240 --> 00:00:14,400
conference talks but

8
00:00:14,400 --> 00:00:16,800
it's again it's a little bit early for

9
00:00:16,800 --> 00:00:19,119
standard conference talks

10
00:00:19,119 --> 00:00:20,960
so whereabouts you calling in from today

11
00:00:20,960 --> 00:00:23,199
matt i'm in the lake district in the uk

12
00:00:23,199 --> 00:00:26,080
oh beautiful lovely team i you you must

13
00:00:26,080 --> 00:00:27,359
be yeah must have been beautiful there

14
00:00:27,359 --> 00:00:29,039
over this last weekend also in the nice

15
00:00:29,039 --> 00:00:29,599
sun

16
00:00:29,599 --> 00:00:32,238
very nice indeed excellent well well

17
00:00:32,238 --> 00:00:34,239
welcome to uh all the talks matt it's

18
00:00:34,239 --> 00:00:35,760
great to have you

19
00:00:35,760 --> 00:00:38,000
so so matt you're the senior director of

20
00:00:38,000 --> 00:00:39,760
community and evangelism so what does

21
00:00:39,760 --> 00:00:40,800
that mean

22
00:00:40,800 --> 00:00:43,360
uh so i'm responsible for all our

23
00:00:43,360 --> 00:00:44,399
worldwide

24
00:00:44,399 --> 00:00:46,960
uh developer advocacy and evangelism

25
00:00:46,960 --> 00:00:47,680
programs

26
00:00:47,680 --> 00:00:51,680
and also for a strategy around how we

27
00:00:51,680 --> 00:00:54,079
consume and contribute to open source

28
00:00:54,079 --> 00:00:54,960
awesome and

29
00:00:54,960 --> 00:00:57,920
briefly what is what does d2 iq do what

30
00:00:57,920 --> 00:00:59,039
are they what do they do in the

31
00:00:59,039 --> 00:01:00,399
community and what do they do in terms

32
00:01:00,399 --> 00:01:01,280
of a business

33
00:01:01,280 --> 00:01:03,680
so d2iq some of you may be more familiar

34
00:01:03,680 --> 00:01:05,438
with our previous name mesosphere so

35
00:01:05,438 --> 00:01:06,960
we've been around in the container space

36
00:01:06,960 --> 00:01:08,320
for a very long time

37
00:01:08,320 --> 00:01:10,479
around apache mesos to start with the

38
00:01:10,479 --> 00:01:12,479
company was actually created by

39
00:01:12,479 --> 00:01:15,439
um one of the founders of apache mesos

40
00:01:15,439 --> 00:01:15,840
and

41
00:01:15,840 --> 00:01:18,799
um you know over the last few years we

42
00:01:18,799 --> 00:01:19,520
have uh

43
00:01:19,520 --> 00:01:22,560
also diversified into products around

44
00:01:22,560 --> 00:01:23,920
kubernetes and the cloud native

45
00:01:23,920 --> 00:01:25,439
ecosystem

46
00:01:25,439 --> 00:01:26,720
awesome and today we're going to be

47
00:01:26,720 --> 00:01:28,960
talking about uh kubernetes up

48
00:01:28,960 --> 00:01:30,960
kubernetes operators the easy way

49
00:01:30,960 --> 00:01:32,400
introducing kudos so

50
00:01:32,400 --> 00:01:34,400
without further ado matt i'll pass over

51
00:01:34,400 --> 00:01:36,159
to you uh because i know we're short on

52
00:01:36,159 --> 00:01:39,200
time so uh you have the helm

53
00:01:39,200 --> 00:01:41,600
thank you simon yeah good morning folks

54
00:01:41,600 --> 00:01:43,200
um

55
00:01:43,200 --> 00:01:46,159
let's just queue this up uh so this is

56
00:01:46,159 --> 00:01:46,560
me

57
00:01:46,560 --> 00:01:48,960
matt jarvis director of community at d2

58
00:01:48,960 --> 00:01:50,240
iq

59
00:01:50,240 --> 00:01:52,880
and um just to set the scene for what

60
00:01:52,880 --> 00:01:54,000
we're going to be talking about

61
00:01:54,000 --> 00:01:56,640
today um so kubernetes and other

62
00:01:56,640 --> 00:01:58,240
orchestration systems

63
00:01:58,240 --> 00:02:00,159
built around the idea of declarative

64
00:02:00,159 --> 00:02:02,000
state work very well for the

65
00:02:02,000 --> 00:02:04,240
uh for stateless applications so

66
00:02:04,240 --> 00:02:05,200
stateless app

67
00:02:05,200 --> 00:02:07,040
as many of us will know is a program

68
00:02:07,040 --> 00:02:09,038
that doesn't save client data

69
00:02:09,038 --> 00:02:10,878
generated in one session for use in the

70
00:02:10,878 --> 00:02:12,319
next session with that client

71
00:02:12,319 --> 00:02:14,239
so every session is carried out as if it

72
00:02:14,239 --> 00:02:15,680
was the first time

73
00:02:15,680 --> 00:02:18,239
and responses aren't dependent upon data

74
00:02:18,239 --> 00:02:19,760
from that previous session

75
00:02:19,760 --> 00:02:21,440
in practice what this means is that we

76
00:02:21,440 --> 00:02:23,040
can generally start to stop our

77
00:02:23,040 --> 00:02:25,599
stateless application it will just

78
00:02:25,599 --> 00:02:29,200
start executing so in general we run

79
00:02:29,200 --> 00:02:30,720
this kind of application behind the load

80
00:02:30,720 --> 00:02:31,519
balancer

81
00:02:31,519 --> 00:02:33,280
and we can scale these up scale these

82
00:02:33,280 --> 00:02:35,120
down just by removing

83
00:02:35,120 --> 00:02:37,440
adding or removing instances and we can

84
00:02:37,440 --> 00:02:38,160
also deploy

85
00:02:38,160 --> 00:02:40,560
new versions pretty easily by simply

86
00:02:40,560 --> 00:02:42,959
replacing all of the running instances

87
00:02:42,959 --> 00:02:44,400
and we can have various ordering

88
00:02:44,400 --> 00:02:46,720
strategies for performing these tasks

89
00:02:46,720 --> 00:02:48,560
blue green deployments for testing new

90
00:02:48,560 --> 00:02:49,760
versions

91
00:02:49,760 --> 00:02:51,680
but fundamentally the management of them

92
00:02:51,680 --> 00:02:53,599
is is pretty much binary we're either

93
00:02:53,599 --> 00:02:55,280
running or we're not

94
00:02:55,280 --> 00:02:57,120
and status apps are kind of

95
00:02:57,120 --> 00:02:59,120
intrinsically intertwined in the move

96
00:02:59,120 --> 00:03:01,920
towards microservices architectures

97
00:03:01,920 --> 00:03:03,519
where we connect together many very

98
00:03:03,519 --> 00:03:05,040
simple applications

99
00:03:05,040 --> 00:03:06,239
which each have a particular

100
00:03:06,239 --> 00:03:08,640
well-bounded function and i guess to the

101
00:03:08,640 --> 00:03:10,480
adoption of container technologies to

102
00:03:10,480 --> 00:03:11,360
manage them

103
00:03:11,360 --> 00:03:12,720
because they're fundamentally well

104
00:03:12,720 --> 00:03:14,720
suited to the patterns that systems like

105
00:03:14,720 --> 00:03:16,239
kubernetes give us

106
00:03:16,239 --> 00:03:17,920
uh we just declare that we want a

107
00:03:17,920 --> 00:03:19,599
specific number of an application to

108
00:03:19,599 --> 00:03:20,400
exist

109
00:03:20,400 --> 00:03:22,560
and kubernetes will create them for us

110
00:03:22,560 --> 00:03:24,480
and again it's basically this idea of

111
00:03:24,480 --> 00:03:26,319
binary processor either running or we're

112
00:03:26,319 --> 00:03:28,239
not and we don't have to worry about any

113
00:03:28,239 --> 00:03:29,920
complex operations

114
00:03:29,920 --> 00:03:31,840
to configure them before we start

115
00:03:31,840 --> 00:03:34,480
deploying

116
00:03:35,120 --> 00:03:37,120
so if all our applications were

117
00:03:37,120 --> 00:03:38,640
stateless then the world of

118
00:03:38,640 --> 00:03:40,799
application deployment would be super

119
00:03:40,799 --> 00:03:41,760
simple

120
00:03:41,760 --> 00:03:43,760
and sometimes in our industry you could

121
00:03:43,760 --> 00:03:45,760
get the idea that that's the case in the

122
00:03:45,760 --> 00:03:46,319
era

123
00:03:46,319 --> 00:03:48,799
of microservices um but unfortunately

124
00:03:48,799 --> 00:03:50,159
that's not actually true

125
00:03:50,159 --> 00:03:51,920
uh the second class of applications are

126
00:03:51,920 --> 00:03:53,519
state full

127
00:03:53,519 --> 00:03:55,519
where the app's retaining data or state

128
00:03:55,519 --> 00:03:57,599
across its entire life cycle

129
00:03:57,599 --> 00:03:59,599
and whilst older more monolithic

130
00:03:59,599 --> 00:04:02,080
applications like sql databases fit into

131
00:04:02,080 --> 00:04:03,280
this paradigm

132
00:04:03,280 --> 00:04:04,879
uh there are also a lot of architectures

133
00:04:04,879 --> 00:04:06,640
where the individual elements making up

134
00:04:06,640 --> 00:04:08,239
a particular service are actually

135
00:04:08,239 --> 00:04:10,560
clustered together in some way they

136
00:04:10,560 --> 00:04:12,879
might be sharing state data between them

137
00:04:12,879 --> 00:04:15,030
or they need to be synchronized together

138
00:04:15,030 --> 00:04:16,720
[Music]

139
00:04:16,720 --> 00:04:20,238
and this is a whole area of computer

140
00:04:20,238 --> 00:04:21,918
science unto itself but typically these

141
00:04:21,918 --> 00:04:23,919
kinds of applications have a set of life

142
00:04:23,919 --> 00:04:25,199
cycle states

143
00:04:25,199 --> 00:04:28,000
that require a logical ordering of

144
00:04:28,000 --> 00:04:28,560
actions

145
00:04:28,560 --> 00:04:31,759
in order to maintain operation um

146
00:04:31,759 --> 00:04:33,840
in general we can't just stop and start

147
00:04:33,840 --> 00:04:34,880
instances

148
00:04:34,880 --> 00:04:36,479
and expect the overall service to

149
00:04:36,479 --> 00:04:38,880
continue to operate we might need to

150
00:04:38,880 --> 00:04:41,360
wait for rebalancing of data or there

151
00:04:41,360 --> 00:04:43,440
might be multiple steps involved in an

152
00:04:43,440 --> 00:04:44,960
upgrade operation

153
00:04:44,960 --> 00:04:46,720
and that applies not just to upgrades

154
00:04:46,720 --> 00:04:48,560
but it applies to scaling to failure

155
00:04:48,560 --> 00:04:49,759
scenarios

156
00:04:49,759 --> 00:04:52,720
and these operational strategies require

157
00:04:52,720 --> 00:04:55,600
domain specific knowledge to manage them

158
00:04:55,600 --> 00:04:56,960
so they tend to be unique to the

159
00:04:56,960 --> 00:04:59,280
application uh those operations for a

160
00:04:59,280 --> 00:05:01,520
cassandra cluster for example are

161
00:05:01,520 --> 00:05:05,919
different from a uh from a kafka cluster

162
00:05:05,919 --> 00:05:07,759
and kubernetes was originally very

163
00:05:07,759 --> 00:05:09,840
focused on stateless application

164
00:05:09,840 --> 00:05:11,680
architecture one of the fundamental

165
00:05:11,680 --> 00:05:13,280
features of kubernetes is that the

166
00:05:13,280 --> 00:05:14,400
scheduler can move

167
00:05:14,400 --> 00:05:16,880
pods around between agents um which

168
00:05:16,880 --> 00:05:18,880
works fine for stateless applications

169
00:05:18,880 --> 00:05:21,199
but not so well for state full which

170
00:05:21,199 --> 00:05:22,800
tend to like their storage and

171
00:05:22,800 --> 00:05:24,800
networking um not to change

172
00:05:24,800 --> 00:05:27,360
during operation unless we handle them

173
00:05:27,360 --> 00:05:31,600
in a very specific operational way

174
00:05:31,840 --> 00:05:33,199
so in order to try to handle the

175
00:05:33,199 --> 00:05:34,960
complexities of state full apps

176
00:05:34,960 --> 00:05:36,880
um kubernetes added this concept of

177
00:05:36,880 --> 00:05:38,400
stateful sets

178
00:05:38,400 --> 00:05:40,720
which does give us this idea of of

179
00:05:40,720 --> 00:05:43,120
stable network stable storage

180
00:05:43,120 --> 00:05:45,039
but this still doesn't really solve all

181
00:05:45,039 --> 00:05:46,720
our problems because kubernetes still

182
00:05:46,720 --> 00:05:49,039
doesn't know what's actually going on

183
00:05:49,039 --> 00:05:54,240
um inside pods inside our applications

184
00:05:54,560 --> 00:05:57,759
so uh the emerging solution over the

185
00:05:57,759 --> 00:05:59,120
last couple of years this problem is the

186
00:05:59,120 --> 00:06:00,319
operator pattern

187
00:06:00,319 --> 00:06:02,720
um operators basically encapsulate

188
00:06:02,720 --> 00:06:04,880
operational tasks in code

189
00:06:04,880 --> 00:06:07,520
and we can either run those via apis we

190
00:06:07,520 --> 00:06:10,160
can run them automatically or scheduled

191
00:06:10,160 --> 00:06:12,639
so we can orchestrate application

192
00:06:12,639 --> 00:06:13,600
specific

193
00:06:13,600 --> 00:06:16,479
lifecycle actions using uh kubernetes

194
00:06:16,479 --> 00:06:18,080
apis

195
00:06:18,080 --> 00:06:20,000
so those operators encode the main

196
00:06:20,000 --> 00:06:21,919
specific knowledge about the

197
00:06:21,919 --> 00:06:23,680
life cycle actions required for an

198
00:06:23,680 --> 00:06:25,919
application how do i scale it how to

199
00:06:25,919 --> 00:06:26,880
upgrade it

200
00:06:26,880 --> 00:06:29,280
how do i deal with failure scenarios and

201
00:06:29,280 --> 00:06:30,720
they achieve all of that

202
00:06:30,720 --> 00:06:35,840
using native um kubernetes apis

203
00:06:37,759 --> 00:06:39,840
so what are operators well when we

204
00:06:39,840 --> 00:06:41,520
install an operator we like to get the

205
00:06:41,520 --> 00:06:43,600
operator itself the controller that's

206
00:06:43,600 --> 00:06:45,440
the code that manages the lifecycle of

207
00:06:45,440 --> 00:06:46,880
that particular thing

208
00:06:46,880 --> 00:06:48,720
and this is where that domain specific

209
00:06:48,720 --> 00:06:50,960
knowledge is encapsulated

210
00:06:50,960 --> 00:06:52,720
and we'll also likely get a bunch of

211
00:06:52,720 --> 00:06:55,280
custom resource definitions crds

212
00:06:55,280 --> 00:06:57,520
which extend the kubernetes api to

213
00:06:57,520 --> 00:06:59,440
address new resource types

214
00:06:59,440 --> 00:07:01,759
so you can then put data into those

215
00:07:01,759 --> 00:07:02,639
types and

216
00:07:02,639 --> 00:07:05,599
instantiate them but um in general these

217
00:07:05,599 --> 00:07:07,120
have been unique so the operator has

218
00:07:07,120 --> 00:07:08,479
been purpose built for

219
00:07:08,479 --> 00:07:11,520
for each application

220
00:07:11,919 --> 00:07:14,479
and uh there have been two main ways of

221
00:07:14,479 --> 00:07:15,919
building operators there are a bunch of

222
00:07:15,919 --> 00:07:16,880
other ones but

223
00:07:16,880 --> 00:07:18,960
the first one's the operator framework

224
00:07:18,960 --> 00:07:21,520
this originated core os

225
00:07:21,520 --> 00:07:24,240
mainly developed by by red hat and and

226
00:07:24,240 --> 00:07:25,199
by ibm

227
00:07:25,199 --> 00:07:27,919
and whilst you can build operators using

228
00:07:27,919 --> 00:07:29,759
ansible or helm charts there

229
00:07:29,759 --> 00:07:32,400
is also a go sdk and for complex

230
00:07:32,400 --> 00:07:34,400
operators you really need to build using

231
00:07:34,400 --> 00:07:36,319
that go sdk

232
00:07:36,319 --> 00:07:38,319
and then there's a coup builder project

233
00:07:38,319 --> 00:07:40,800
and that's part of sig api machinery

234
00:07:40,800 --> 00:07:42,880
and if that's focused on extending the

235
00:07:42,880 --> 00:07:44,800
kubernetes api and again you need to

236
00:07:44,800 --> 00:07:46,479
write a lot of go to build

237
00:07:46,479 --> 00:07:50,400
operators using using this

238
00:07:51,199 --> 00:07:53,520
so building operators can be very

239
00:07:53,520 --> 00:07:54,240
complex

240
00:07:54,240 --> 00:07:56,879
and requires a lot of knowledge about

241
00:07:56,879 --> 00:07:57,280
the

242
00:07:57,280 --> 00:07:59,919
internals of kubernetes requires go

243
00:07:59,919 --> 00:08:00,879
expertise

244
00:08:00,879 --> 00:08:02,720
as well as requiring that domain

245
00:08:02,720 --> 00:08:04,080
specific knowledge about your

246
00:08:04,080 --> 00:08:05,120
application

247
00:08:05,120 --> 00:08:07,199
and the engineering effort which goes

248
00:08:07,199 --> 00:08:09,280
into high quality operators

249
00:08:09,280 --> 00:08:11,440
can be very considerable so as an

250
00:08:11,440 --> 00:08:12,560
example one of the

251
00:08:12,560 --> 00:08:14,560
major nosql vendors has an operator

252
00:08:14,560 --> 00:08:17,039
that's very feature rich

253
00:08:17,039 --> 00:08:19,680
but it's over 40 000 lines of code and

254
00:08:19,680 --> 00:08:20,720
took

255
00:08:20,720 --> 00:08:22,720
more than one man year of effort to

256
00:08:22,720 --> 00:08:24,720
write and even something

257
00:08:24,720 --> 00:08:27,840
like the lcd operator which is um

258
00:08:27,840 --> 00:08:30,240
ncd has a fairly uh simple set of life

259
00:08:30,240 --> 00:08:31,360
cycle states

260
00:08:31,360 --> 00:08:36,240
has got around 9000 um lines of code

261
00:08:37,360 --> 00:08:38,880
so kudo takes a slightly different

262
00:08:38,880 --> 00:08:40,799
approach kudo is an acronym for the

263
00:08:40,799 --> 00:08:42,719
kubernetes universal declarative

264
00:08:42,719 --> 00:08:43,760
operator

265
00:08:43,760 --> 00:08:45,680
and rather than implementing a custom

266
00:08:45,680 --> 00:08:47,519
operator for each application

267
00:08:47,519 --> 00:08:49,839
um kudo provides a universal operator

268
00:08:49,839 --> 00:08:51,279
with the concept

269
00:08:51,279 --> 00:08:54,880
of plans built into it which allows you

270
00:08:54,880 --> 00:08:56,800
operated developers to define a lot of

271
00:08:56,800 --> 00:08:58,560
the code declaratively

272
00:08:58,560 --> 00:09:01,839
um in yaml so it it basically kind of

273
00:09:01,839 --> 00:09:03,760
defines this framework for

274
00:09:03,760 --> 00:09:06,640
operational sequencing and actioning and

275
00:09:06,640 --> 00:09:08,399
allows you to define

276
00:09:08,399 --> 00:09:10,080
run books and ship that with your

277
00:09:10,080 --> 00:09:12,320
application and it's a fully open source

278
00:09:12,320 --> 00:09:12,880
project

279
00:09:12,880 --> 00:09:16,240
um licensed under under apache 2 and

280
00:09:16,240 --> 00:09:18,720
we're actively working to to build um

281
00:09:18,720 --> 00:09:22,080
community around it

282
00:09:22,080 --> 00:09:23,920
in comparison to those other ways of

283
00:09:23,920 --> 00:09:25,200
building operators then

284
00:09:25,200 --> 00:09:27,920
um kudos polymorphic so it will become

285
00:09:27,920 --> 00:09:29,839
an operator for

286
00:09:29,839 --> 00:09:33,120
any application for which you write um a

287
00:09:33,120 --> 00:09:35,600
a kudo operator so it has a single

288
00:09:35,600 --> 00:09:36,640
controller

289
00:09:36,640 --> 00:09:38,880
and it can create pretty complete

290
00:09:38,880 --> 00:09:39,920
operators without

291
00:09:39,920 --> 00:09:41,440
needing either deep knowledge of

292
00:09:41,440 --> 00:09:43,279
kubernetes or

293
00:09:43,279 --> 00:09:46,959
necessarily writing any code

294
00:09:46,959 --> 00:09:48,320
so there's some core concepts that we

295
00:09:48,320 --> 00:09:49,600
need to understand when we talk about

296
00:09:49,600 --> 00:09:50,880
what kudo is

297
00:09:50,880 --> 00:09:53,279
and firstly in in kudo terminology an

298
00:09:53,279 --> 00:09:54,240
operator

299
00:09:54,240 --> 00:09:57,040
is the the description of a deployable

300
00:09:57,040 --> 00:09:59,680
service represented as a crd object in

301
00:09:59,680 --> 00:10:02,479
your cluster

302
00:10:02,959 --> 00:10:04,560
and then secondly we've got this idea of

303
00:10:04,560 --> 00:10:06,480
operative version and this represents

304
00:10:06,480 --> 00:10:08,240
the particular implementation of an

305
00:10:08,240 --> 00:10:08,959
operator

306
00:10:08,959 --> 00:10:11,120
and it contains all the objects

307
00:10:11,120 --> 00:10:13,519
parameters plans and stuff that that you

308
00:10:13,519 --> 00:10:15,120
need for that operator and we'll look at

309
00:10:15,120 --> 00:10:15,440
that

310
00:10:15,440 --> 00:10:17,839
a little bit in the demo so the purpose

311
00:10:17,839 --> 00:10:19,360
of the operator version really is to

312
00:10:19,360 --> 00:10:20,160
provide

313
00:10:20,160 --> 00:10:22,240
all the details necessary for kudo to

314
00:10:22,240 --> 00:10:24,160
become an operator for a specific

315
00:10:24,160 --> 00:10:25,440
capability

316
00:10:25,440 --> 00:10:27,519
and also for a particular version of

317
00:10:27,519 --> 00:10:29,519
that software so it's a specific version

318
00:10:29,519 --> 00:10:31,440
of a deployable application

319
00:10:31,440 --> 00:10:33,680
including configuration and life cycle

320
00:10:33,680 --> 00:10:34,800
books for

321
00:10:34,800 --> 00:10:36,480
anything you want to do deployment

322
00:10:36,480 --> 00:10:38,240
upgrades rollbacks it's a complete

323
00:10:38,240 --> 00:10:39,200
definition

324
00:10:39,200 --> 00:10:41,519
of the application to be installed and

325
00:10:41,519 --> 00:10:45,360
with parameters that we can override

326
00:10:45,519 --> 00:10:47,920
and then the instance is the crd which

327
00:10:47,920 --> 00:10:49,600
ties a particular application

328
00:10:49,600 --> 00:10:50,959
instantiation

329
00:10:50,959 --> 00:10:52,880
to an operator version so this is an

330
00:10:52,880 --> 00:10:54,640
actual deployment of the thing we're

331
00:10:54,640 --> 00:10:55,600
controlling

332
00:10:55,600 --> 00:10:57,760
using kudo and when you create an

333
00:10:57,760 --> 00:10:59,839
instance you provide or override

334
00:10:59,839 --> 00:11:01,760
parameters that were in the operator

335
00:11:01,760 --> 00:11:02,640
version

336
00:11:02,640 --> 00:11:05,040
and we can have multiple instances in an

337
00:11:05,040 --> 00:11:06,640
operator version in our cluster and this

338
00:11:06,640 --> 00:11:08,000
is so that we can run

339
00:11:08,000 --> 00:11:09,519
different versions of particular

340
00:11:09,519 --> 00:11:13,040
applications that we're running

341
00:11:13,120 --> 00:11:15,360
so plans are kind of the core concept of

342
00:11:15,360 --> 00:11:16,880
how kudo operators

343
00:11:16,880 --> 00:11:18,640
convey progress through service

344
00:11:18,640 --> 00:11:20,560
management operations like deployment

345
00:11:20,560 --> 00:11:22,560
like scaling like upgrading

346
00:11:22,560 --> 00:11:25,600
um a plan is composed of phases and

347
00:11:25,600 --> 00:11:26,720
these contain

348
00:11:26,720 --> 00:11:28,880
steps and these in turn are made up of

349
00:11:28,880 --> 00:11:31,600
tasks so plans orchestrate tasks through

350
00:11:31,600 --> 00:11:33,519
phases and steps

351
00:11:33,519 --> 00:11:36,399
um both phases and steps can be

352
00:11:36,399 --> 00:11:38,480
configured with an execution strategy

353
00:11:38,480 --> 00:11:38,959
either

354
00:11:38,959 --> 00:11:42,720
serial or parallel

355
00:11:42,720 --> 00:11:45,360
uh kudo also includes a cli extension to

356
00:11:45,360 --> 00:11:47,279
cube kettle which allows us to run

357
00:11:47,279 --> 00:11:49,600
um kudo specific commands natively in

358
00:11:49,600 --> 00:11:51,040
kube kettle and we'll look at some of

359
00:11:51,040 --> 00:11:51,760
those

360
00:11:51,760 --> 00:11:56,720
in the uh in the demo

361
00:11:56,720 --> 00:11:59,360
so um this is a a high-level

362
00:11:59,360 --> 00:12:01,200
architecture diagram of what kudo looks

363
00:12:01,200 --> 00:12:02,880
like in practice so we have our kudo

364
00:12:02,880 --> 00:12:04,720
controller deployed into our

365
00:12:04,720 --> 00:12:08,959
cluster with a set of default kudo crds

366
00:12:08,959 --> 00:12:11,839
um we have our kudo uh cli extension to

367
00:12:11,839 --> 00:12:12,880
kubecuttle

368
00:12:12,880 --> 00:12:15,200
and then we can get operators either

369
00:12:15,200 --> 00:12:16,000
from um

370
00:12:16,000 --> 00:12:18,399
the upstream github repository or from

371
00:12:18,399 --> 00:12:19,600
our local file system

372
00:12:19,600 --> 00:12:21,120
and then installed into our cluster

373
00:12:21,120 --> 00:12:22,560
there we can see we've got the kafka

374
00:12:22,560 --> 00:12:24,079
operator

375
00:12:24,079 --> 00:12:26,079
with two different kafka versions in

376
00:12:26,079 --> 00:12:28,000
operator version crds and then an

377
00:12:28,000 --> 00:12:30,000
instance of one of those

378
00:12:30,000 --> 00:12:33,600
one of those operators

379
00:12:33,920 --> 00:12:36,240
right so let's look at what this looks

380
00:12:36,240 --> 00:12:37,040
like

381
00:12:37,040 --> 00:12:53,839
in practice let's just change this over

382
00:13:12,000 --> 00:13:13,360
[Music]

383
00:13:13,360 --> 00:13:16,720
are we seeing that window there ah there

384
00:13:16,720 --> 00:13:17,440
we go

385
00:13:17,440 --> 00:13:21,440
okay cool right so i've got a um

386
00:13:21,440 --> 00:13:24,160
uh uh checkout of the upstream github

387
00:13:24,160 --> 00:13:25,920
repository so let's just check take a

388
00:13:25,920 --> 00:13:27,680
look at what one of these operators

389
00:13:27,680 --> 00:13:29,760
looks like and this is the zookeeper

390
00:13:29,760 --> 00:13:30,800
operator this is a fairly

391
00:13:30,800 --> 00:13:32,000
straightforward one

392
00:13:32,000 --> 00:13:34,079
and these kudo operators all have this

393
00:13:34,079 --> 00:13:36,399
standardized layout

394
00:13:36,399 --> 00:13:38,160
so at the top level here we have our

395
00:13:38,160 --> 00:13:39,440
operator yaml

396
00:13:39,440 --> 00:13:42,160
and in here we can see that we've got

397
00:13:42,160 --> 00:13:44,160
all our versions we've also got

398
00:13:44,160 --> 00:13:46,800
um our task definitions with the

399
00:13:46,800 --> 00:13:49,199
resources that apply to that particular

400
00:13:49,199 --> 00:13:49,839
task

401
00:13:49,839 --> 00:13:51,839
so these resources here will be applied

402
00:13:51,839 --> 00:13:53,839
when that task is applied

403
00:13:53,839 --> 00:13:55,600
and then we also have our plan

404
00:13:55,600 --> 00:13:57,839
definitions here and we can see for the

405
00:13:57,839 --> 00:13:59,760
particular step for this deploy step we

406
00:13:59,760 --> 00:14:01,360
can see what tasks are going to be

407
00:14:01,360 --> 00:14:03,199
deployed are going to be

408
00:14:03,199 --> 00:14:07,199
executed for that deploy step

409
00:14:08,079 --> 00:14:11,120
so this is just an empty kubernetes

410
00:14:11,120 --> 00:14:14,720
cluster that i deployed earlier

411
00:14:15,680 --> 00:14:19,199
and at this point if we

412
00:14:20,399 --> 00:14:21,760
look for whether we've got any operators

413
00:14:21,760 --> 00:14:23,120
here our cluster actually doesn't even

414
00:14:23,120 --> 00:14:25,199
know what an operator is

415
00:14:25,199 --> 00:14:26,639
um so the first thing that we're going

416
00:14:26,639 --> 00:14:29,360
to do is to install kudo and kudo gives

417
00:14:29,360 --> 00:14:30,240
us a very nice

418
00:14:30,240 --> 00:14:33,440
shortcut to do this in kudo init through

419
00:14:33,440 --> 00:14:34,000
our

420
00:14:34,000 --> 00:14:37,199
cli extension and now if we

421
00:14:37,199 --> 00:14:39,360
uh take a look at what crds we've got

422
00:14:39,360 --> 00:14:40,880
deployed into our cluster we can see

423
00:14:40,880 --> 00:14:42,800
that we've got our standard

424
00:14:42,800 --> 00:14:45,040
kudo crds have been deployed as part of

425
00:14:45,040 --> 00:14:48,000
that nip process

426
00:14:52,720 --> 00:14:54,399
and we've also got a bunch of api

427
00:14:54,399 --> 00:14:55,920
resources that are

428
00:14:55,920 --> 00:15:00,719
in the api group of kudo.dev

429
00:15:02,880 --> 00:15:04,639
and we can see that we've got our kudo

430
00:15:04,639 --> 00:15:06,480
um controller manager pod

431
00:15:06,480 --> 00:15:08,639
running name spaced in the kudo system

432
00:15:08,639 --> 00:15:09,760
name space

433
00:15:09,760 --> 00:15:11,199
so the first thing i'm going to go ahead

434
00:15:11,199 --> 00:15:13,360
and do here is to install

435
00:15:13,360 --> 00:15:15,680
a zookeeper cluster and i'm just going

436
00:15:15,680 --> 00:15:17,360
to use the the defaults here from the

437
00:15:17,360 --> 00:15:18,959
upstream repository so

438
00:15:18,959 --> 00:15:20,800
when i call kudo install like this it's

439
00:15:20,800 --> 00:15:22,000
just going to install

440
00:15:22,000 --> 00:15:25,760
the zookeeper operator from the upstream

441
00:15:25,760 --> 00:15:28,800
repository and let's take a look at some

442
00:15:28,800 --> 00:15:30,240
of the things that we can do with the

443
00:15:30,240 --> 00:15:31,759
cli extension

444
00:15:31,759 --> 00:15:34,880
so i can look at which um which plans

445
00:15:34,880 --> 00:15:36,880
that package has and these are the same

446
00:15:36,880 --> 00:15:38,880
that we looked at when we looked at the

447
00:15:38,880 --> 00:15:42,639
checkout of the actual operator

448
00:15:49,279 --> 00:15:52,880
this isn't quite kicked off yet

449
00:15:52,880 --> 00:15:54,480
there we go so we can now see that our

450
00:15:54,480 --> 00:15:57,199
deploy plan is starting

451
00:15:57,199 --> 00:15:59,759
and we can see what uh which phase and

452
00:15:59,759 --> 00:16:03,600
steps that's actually executing

453
00:16:05,600 --> 00:16:07,600
and if we describe that instance we can

454
00:16:07,600 --> 00:16:08,800
see that we get

455
00:16:08,800 --> 00:16:11,279
a bunch of plan related um information

456
00:16:11,279 --> 00:16:12,320
in our described

457
00:16:12,320 --> 00:16:15,199
output here as well as a lot of metadata

458
00:16:15,199 --> 00:16:15,759
about

459
00:16:15,759 --> 00:16:19,199
what's actually happening there

460
00:16:21,519 --> 00:16:23,519
if we start to look at our pods we

461
00:16:23,519 --> 00:16:24,639
should see that we've got

462
00:16:24,639 --> 00:16:27,600
um our zookeeper pods are now um up and

463
00:16:27,600 --> 00:16:29,920
running

464
00:16:33,440 --> 00:16:36,480
and i know that this this operator one

465
00:16:36,480 --> 00:16:36,880
of the

466
00:16:36,880 --> 00:16:38,560
the elements of this operator is a

467
00:16:38,560 --> 00:16:41,519
stateful set of three instances of a

468
00:16:41,519 --> 00:16:44,480
zookeeper cluster

469
00:16:48,560 --> 00:16:50,720
so now if we get operators our cluster

470
00:16:50,720 --> 00:16:52,480
knows about what operators are and we

471
00:16:52,480 --> 00:16:54,480
can also see that we have a zookeeper

472
00:16:54,480 --> 00:16:55,600
operator

473
00:16:55,600 --> 00:16:58,480
installed there

474
00:16:58,639 --> 00:17:00,320
and we can see that we have the

475
00:17:00,320 --> 00:17:05,199
zookeeper 0.3.0 operator version

476
00:17:05,199 --> 00:17:09,439
and if we describe the operator version

477
00:17:09,439 --> 00:17:12,559
um what we can see here is that um

478
00:17:12,559 --> 00:17:14,160
there is a ton of things that are

479
00:17:14,160 --> 00:17:16,319
contained within that crd

480
00:17:16,319 --> 00:17:18,640
and that's basically all of the things

481
00:17:18,640 --> 00:17:19,839
that were defined

482
00:17:19,839 --> 00:17:23,199
in our um in our operator on disk

483
00:17:23,199 --> 00:17:25,520
so in our params file we can see that

484
00:17:25,520 --> 00:17:27,119
these are all the parameters which this

485
00:17:27,119 --> 00:17:28,079
operator

486
00:17:28,079 --> 00:17:30,480
um sets defaults for and allows you to

487
00:17:30,480 --> 00:17:31,520
override

488
00:17:31,520 --> 00:17:33,120
and then if we look in our templates

489
00:17:33,120 --> 00:17:35,280
folder

490
00:17:35,280 --> 00:17:37,760
we can see that these yaml files uh

491
00:17:37,760 --> 00:17:38,400
contain

492
00:17:38,400 --> 00:17:40,559
um parameters that are that are

493
00:17:40,559 --> 00:17:42,080
templated so that

494
00:17:42,080 --> 00:17:44,240
kudo when it when it runs these yaml

495
00:17:44,240 --> 00:17:45,840
files will

496
00:17:45,840 --> 00:17:49,039
interpret those those parameters as per

497
00:17:49,039 --> 00:17:51,840
configuration

498
00:17:55,600 --> 00:18:00,160
so let's just see what status our

499
00:18:00,160 --> 00:18:02,799
zookeeper

500
00:18:03,200 --> 00:18:06,160
cluster is that now

501
00:18:07,840 --> 00:18:09,520
so that's almost complete that's just

502
00:18:09,520 --> 00:18:15,840
validating excuse me

503
00:18:19,440 --> 00:18:21,440
so our zookeeper deployment phase is now

504
00:18:21,440 --> 00:18:22,799
complete so the next thing that we're

505
00:18:22,799 --> 00:18:24,799
going to go and do

506
00:18:24,799 --> 00:18:27,120
is uh install a kafka cluster which

507
00:18:27,120 --> 00:18:29,679
depends on that zookeeper cluster

508
00:18:29,679 --> 00:18:31,039
so i'm going to do this one slightly

509
00:18:31,039 --> 00:18:33,039
differently so i'm going to install the

510
00:18:33,039 --> 00:18:35,760
operator itself for kafka but i'm not

511
00:18:35,760 --> 00:18:37,360
going to actually create an instance of

512
00:18:37,360 --> 00:18:37,919
it

513
00:18:37,919 --> 00:18:40,000
so that's put the the kafka operator

514
00:18:40,000 --> 00:18:41,280
into our

515
00:18:41,280 --> 00:18:44,880
cluster and this is the

516
00:18:44,880 --> 00:18:47,600
the operator out of the uh the upstream

517
00:18:47,600 --> 00:18:48,720
repository

518
00:18:48,720 --> 00:18:50,799
uh so we can see it's got it's fairly um

519
00:18:50,799 --> 00:18:51,760
straightforward it's

520
00:18:51,760 --> 00:18:53,840
not got very much uh configuration there

521
00:18:53,840 --> 00:18:55,039
so what i'm gonna

522
00:18:55,039 --> 00:18:57,919
go and install a newer version of that

523
00:18:57,919 --> 00:18:59,200
from

524
00:18:59,200 --> 00:19:02,480
my git checkout

525
00:19:08,559 --> 00:19:10,559
so now when i'm when i'm in this git

526
00:19:10,559 --> 00:19:12,559
checkout what i can do here is

527
00:19:12,559 --> 00:19:15,200
list uh that was the same command that i

528
00:19:15,200 --> 00:19:15,919
just run

529
00:19:15,919 --> 00:19:18,160
uh against the repository i'm now

530
00:19:18,160 --> 00:19:19,039
running against

531
00:19:19,039 --> 00:19:21,280
my local checkout and you can see in

532
00:19:21,280 --> 00:19:22,960
this version of the kafka operator

533
00:19:22,960 --> 00:19:24,640
there's a lot more configuration

534
00:19:24,640 --> 00:19:27,760
options a lot more plans and tasks

535
00:19:27,760 --> 00:19:32,240
and i can also do the same with tasks

536
00:19:32,240 --> 00:19:33,600
so i can list the tasks that are

537
00:19:33,600 --> 00:19:35,520
available from this local um

538
00:19:35,520 --> 00:19:39,840
this local uh kit checkout

539
00:19:41,840 --> 00:19:45,600
and i can do the same with parameters

540
00:19:45,600 --> 00:19:47,760
so what i'm going to do is again use the

541
00:19:47,760 --> 00:19:50,160
cli extension to install

542
00:19:50,160 --> 00:19:53,280
a version of this this local kafka

543
00:19:53,280 --> 00:19:55,200
operator

544
00:19:55,200 --> 00:19:59,120
and as we see we're installing uh here

545
00:19:59,120 --> 00:20:01,200
from this particular checkout and what

546
00:20:01,200 --> 00:20:03,120
i'm doing here is overriding

547
00:20:03,120 --> 00:20:05,039
uh one of the parameters i could do this

548
00:20:05,039 --> 00:20:06,640
using a gamma file but i'm just going to

549
00:20:06,640 --> 00:20:10,080
override it on the command line

550
00:20:15,600 --> 00:20:18,080
and again we can see from our from our

551
00:20:18,080 --> 00:20:20,799
kudo cli extension

552
00:20:20,799 --> 00:20:23,120
that uh our deploy plan is now in

553
00:20:23,120 --> 00:20:24,320
progress

554
00:20:24,320 --> 00:20:27,440
um if we look at what pods we've got

555
00:20:27,440 --> 00:20:31,280
uh deploying here we can see that we've

556
00:20:31,280 --> 00:20:32,559
got the first um

557
00:20:32,559 --> 00:20:35,600
pod which is actually setting up um

558
00:20:35,600 --> 00:20:38,320
setting up uh tls certificates between

559
00:20:38,320 --> 00:20:38,960
our

560
00:20:38,960 --> 00:20:43,120
our uh our kafka instances

561
00:20:45,919 --> 00:20:49,039
and again we can describe that

562
00:20:49,039 --> 00:20:51,360
describe that instance and see all of

563
00:20:51,360 --> 00:20:55,039
that planned status within the describe

564
00:21:00,840 --> 00:21:02,559
command

565
00:21:02,559 --> 00:21:04,400
so let's just see what holds we're

566
00:21:04,400 --> 00:21:07,679
starting to get deployed there

567
00:21:09,520 --> 00:21:11,919
let's watch that for a second so what

568
00:21:11,919 --> 00:21:13,440
we're expecting to see here

569
00:21:13,440 --> 00:21:16,559
any second is for um for the uh

570
00:21:16,559 --> 00:21:20,080
um kafka um instances to start deploying

571
00:21:20,080 --> 00:21:21,280
into our cluster

572
00:21:21,280 --> 00:21:23,280
now that uh the first stage has run

573
00:21:23,280 --> 00:21:24,799
which was um to

574
00:21:24,799 --> 00:21:27,840
generate um certificates this is going

575
00:21:27,840 --> 00:21:28,799
to take a

576
00:21:28,799 --> 00:21:31,840
a little bit of time here

577
00:21:37,280 --> 00:21:39,280
and there goes our first uh our first

578
00:21:39,280 --> 00:21:45,840
kafka instance starting to deploy

579
00:21:52,559 --> 00:21:54,720
and we've now got a second pod again

580
00:21:54,720 --> 00:21:56,400
generating tls certificates

581
00:21:56,400 --> 00:21:58,480
for the next uh kafka instance which

582
00:21:58,480 --> 00:22:13,840
will start to deploy any second

583
00:22:26,720 --> 00:22:41,840
here's a second kafka instance coming up

584
00:22:53,840 --> 00:22:55,840
so while we're waiting for that to uh to

585
00:22:55,840 --> 00:22:57,039
deploy let's just

586
00:22:57,039 --> 00:22:59,760
um cut back to the presentation and i'll

587
00:22:59,760 --> 00:23:01,679
take you through some of the roadmap for

588
00:23:01,679 --> 00:23:04,640
for kudo and we'll come back to this um

589
00:23:04,640 --> 00:23:09,440
at the end

590
00:23:09,440 --> 00:23:12,640
once this is finished

591
00:23:13,200 --> 00:23:16,240
it's gonna be a little while okay let's

592
00:23:16,240 --> 00:23:23,840
uh just come out of there

593
00:23:24,050 --> 00:23:27,290
[Music]

594
00:23:33,600 --> 00:23:36,799
okay so we'll come back to the demo

595
00:23:36,799 --> 00:23:39,600
in a second

596
00:23:42,240 --> 00:23:44,880
uh so we have a um a bunch of stuff on

597
00:23:44,880 --> 00:23:47,840
the roadmap kudos changing very rapidly

598
00:23:47,840 --> 00:23:49,360
um here's some of the some of the things

599
00:23:49,360 --> 00:23:50,880
that are coming up that that are pretty

600
00:23:50,880 --> 00:23:51,840
cool so

601
00:23:51,840 --> 00:23:53,840
we've got this idea of dynamic crds

602
00:23:53,840 --> 00:23:55,600
where we don't have to define all our

603
00:23:55,600 --> 00:23:56,640
crds

604
00:23:56,640 --> 00:24:01,039
um at uh instantiation of kudo or when

605
00:24:01,039 --> 00:24:03,039
we deploy that operator so

606
00:24:03,039 --> 00:24:06,000
um these could be created on the fly by

607
00:24:06,000 --> 00:24:07,600
by an ops person who wants to

608
00:24:07,600 --> 00:24:10,559
modify our particular plan is executed

609
00:24:10,559 --> 00:24:11,840
and there's a bunch of work going on

610
00:24:11,840 --> 00:24:12,880
about how we

611
00:24:12,880 --> 00:24:15,520
um can take um existing things like helm

612
00:24:15,520 --> 00:24:17,360
charts and extend those into kudo

613
00:24:17,360 --> 00:24:18,480
operators

614
00:24:18,480 --> 00:24:20,880
and there's work going on around looking

615
00:24:20,880 --> 00:24:23,520
at uh

616
00:24:23,520 --> 00:24:25,919
candidates for replacing some of the the

617
00:24:25,919 --> 00:24:27,279
yaml here managing these

618
00:24:27,279 --> 00:24:30,080
long complex yaml files can be uh can be

619
00:24:30,080 --> 00:24:31,360
pretty tiresome

620
00:24:31,360 --> 00:24:33,200
and then um one of the new things that's

621
00:24:33,200 --> 00:24:35,279
just landed that we saw actually in that

622
00:24:35,279 --> 00:24:36,720
kafka instance is a

623
00:24:36,720 --> 00:24:38,640
the concept of pipe tasks where we can

624
00:24:38,640 --> 00:24:41,600
create uh take the output of one task

625
00:24:41,600 --> 00:24:44,720
and uh and pipe it into the uh into the

626
00:24:44,720 --> 00:24:47,840
input of another task

627
00:25:00,159 --> 00:25:02,000
okay that's completed so let's just

628
00:25:02,000 --> 00:25:15,120
switch back to our demo again

629
00:25:15,120 --> 00:25:20,159
okay let's switch back yeah that's great

630
00:25:20,159 --> 00:25:23,360
okay so uh now we should have um

631
00:25:23,360 --> 00:25:26,400
a fully functioning uh kafka cluster up

632
00:25:26,400 --> 00:25:28,000
and running

633
00:25:28,000 --> 00:25:31,200
so if we now uh look at the uh

634
00:25:31,200 --> 00:25:34,159
logs in our um one of our kafka pods we

635
00:25:34,159 --> 00:25:36,559
can see that's valid output from a uh

636
00:25:36,559 --> 00:25:39,200
from a working kafka cluster and just to

637
00:25:39,200 --> 00:25:41,039
prove that that is working

638
00:25:41,039 --> 00:25:44,880
we can start a um a shell in in our

639
00:25:44,880 --> 00:25:48,640
cluster and then

640
00:25:48,960 --> 00:25:50,960
i'm just going to connect to the uh

641
00:25:50,960 --> 00:25:52,240
kafka

642
00:25:52,240 --> 00:25:53,919
metrics port there and we can see we're

643
00:25:53,919 --> 00:25:56,080
getting metrics out of our kafka cluster

644
00:25:56,080 --> 00:25:59,360
so we effectively deployed um two uh

645
00:25:59,360 --> 00:26:01,360
a highly available category cluster and

646
00:26:01,360 --> 00:26:02,960
a zookeeper cluster with a couple of

647
00:26:02,960 --> 00:26:03,840
commands

648
00:26:03,840 --> 00:26:07,120
uh using kudo so

649
00:26:07,120 --> 00:26:11,470
let's just come out of here

650
00:26:11,470 --> 00:26:14,519
[Music]

651
00:26:22,840 --> 00:26:24,880
slides

652
00:26:24,880 --> 00:26:27,679
okay so we're coming up to time here

653
00:26:27,679 --> 00:26:29,300
let's go back to my slides again

654
00:26:29,300 --> 00:26:32,399
[Music]

655
00:26:33,360 --> 00:26:36,480
yeah okay cool um so um we'd love

656
00:26:36,480 --> 00:26:38,400
more folks to get involved with the with

657
00:26:38,400 --> 00:26:40,799
the um development or using of kudos so

658
00:26:40,799 --> 00:26:42,159
there's a bunch of ways that you can

659
00:26:42,159 --> 00:26:43,760
find out more if any of this has been

660
00:26:43,760 --> 00:26:44,480
interesting

661
00:26:44,480 --> 00:26:47,039
uh there's the kudo website at kudo.dev

662
00:26:47,039 --> 00:26:49,520
and the kuda builder organization

663
00:26:49,520 --> 00:26:52,640
in in github has all the code for kudo

664
00:26:52,640 --> 00:26:54,159
the operators and everything else in

665
00:26:54,159 --> 00:26:54,880
there

666
00:26:54,880 --> 00:26:58,159
um the development team uh all a hangout

667
00:26:58,159 --> 00:26:58,559
in

668
00:26:58,559 --> 00:27:02,080
kudo on the kubernetes slack and you can

669
00:27:02,080 --> 00:27:02,559
also

670
00:27:02,559 --> 00:27:05,840
uh join the mailing list which is in the

671
00:27:05,840 --> 00:27:07,279
link below and hopefully these

672
00:27:07,279 --> 00:27:10,080
these slides will be shared um and we

673
00:27:10,080 --> 00:27:10,799
also have a

674
00:27:10,799 --> 00:27:13,919
uh bi-weekly community meeting which

675
00:27:13,919 --> 00:27:18,399
is uh on thursdays at 10 a.m pacific

676
00:27:18,399 --> 00:27:19,919
although i think we're starting to move

677
00:27:19,919 --> 00:27:22,159
that around now to be friendly to more

678
00:27:22,159 --> 00:27:23,200
time zones

679
00:27:23,200 --> 00:27:25,600
um thank you for listening and i'm happy

680
00:27:25,600 --> 00:27:26,399
to uh

681
00:27:26,399 --> 00:27:28,960
take any questions awesome thank you

682
00:27:28,960 --> 00:27:30,080
matt we have a couple

683
00:27:30,080 --> 00:27:32,799
uh coming through on uh on slider one uh

684
00:27:32,799 --> 00:27:34,960
i'll break into this one

685
00:27:34,960 --> 00:27:37,679
um will operator replace helm for

686
00:27:37,679 --> 00:27:39,360
packaging applications

687
00:27:39,360 --> 00:27:41,520
uh i think they're kind of two two use

688
00:27:41,520 --> 00:27:43,760
cases really i mean

689
00:27:43,760 --> 00:27:46,720
operators tend to be um more about long

690
00:27:46,720 --> 00:27:47,760
running life cycle

691
00:27:47,760 --> 00:27:51,120
actions for for more complex distributed

692
00:27:51,120 --> 00:27:51,840
apps

693
00:27:51,840 --> 00:27:53,679
and so i see there definitely been a

694
00:27:53,679 --> 00:27:56,000
place in the ecosystem for both of them

695
00:27:56,000 --> 00:27:58,399
um clearly helm is is uh much more

696
00:27:58,399 --> 00:28:01,039
widely used than operators are generally

697
00:28:01,039 --> 00:28:02,799
at the minute you know the operator

698
00:28:02,799 --> 00:28:04,480
space is still um

699
00:28:04,480 --> 00:28:07,679
kind of emerging but but for for more

700
00:28:07,679 --> 00:28:09,360
complex applications that have more

701
00:28:09,360 --> 00:28:10,720
complex life cycle

702
00:28:10,720 --> 00:28:13,279
states and for complex application

703
00:28:13,279 --> 00:28:14,399
stacks

704
00:28:14,399 --> 00:28:16,640
um i think that's the sweet spot for

705
00:28:16,640 --> 00:28:18,159
operators

706
00:28:18,159 --> 00:28:21,120
awesome thank you and also uh for people

707
00:28:21,120 --> 00:28:22,559
who are starting out what

708
00:28:22,559 --> 00:28:24,240
uh what are the best tutorials or

709
00:28:24,240 --> 00:28:26,000
workshops that people can kind of get

710
00:28:26,000 --> 00:28:27,039
hands on

711
00:28:27,039 --> 00:28:29,200
uh and experiment with yeah so there's

712
00:28:29,200 --> 00:28:31,200
there's a bunch of stuff on kudo.dev

713
00:28:31,200 --> 00:28:33,039
um there's a really good getting started

714
00:28:33,039 --> 00:28:34,960
guide um you know hopefully from the

715
00:28:34,960 --> 00:28:36,640
demo here you saw it's pretty

716
00:28:36,640 --> 00:28:38,399
straightforward to start to start

717
00:28:38,399 --> 00:28:39,840
actually using these things

718
00:28:39,840 --> 00:28:43,039
but there's a bunch of tutorials and

719
00:28:43,039 --> 00:28:45,200
a lot more information about the uh

720
00:28:45,200 --> 00:28:46,960
internals of kudo if you're interested

721
00:28:46,960 --> 00:28:48,320
in digging in

722
00:28:48,320 --> 00:28:49,520
and getting involved with the

723
00:28:49,520 --> 00:28:51,279
development of it so check out the

724
00:28:51,279 --> 00:28:52,799
website

725
00:28:52,799 --> 00:28:54,720
awesome thank you very much i think

726
00:28:54,720 --> 00:28:56,399
that's pretty much at

727
00:28:56,399 --> 00:28:58,880
time now and those are all questions

728
00:28:58,880 --> 00:29:00,320
that we have so matt

729
00:29:00,320 --> 00:29:02,000
uh thank you very much for the support

730
00:29:02,000 --> 00:29:03,840
of all the talks and thank you thank you

731
00:29:03,840 --> 00:29:05,200
for a great session

732
00:29:05,200 --> 00:29:08,240
thank you no worries have a good rest of

733
00:29:08,240 --> 00:29:10,880
day

