1
00:00:00,080 --> 00:00:03,199
club how are you i'm fine well i'm at

2
00:00:03,199 --> 00:00:03,600
home

3
00:00:03,600 --> 00:00:05,759
probably like most of you like the rest

4
00:00:05,759 --> 00:00:07,200
of us absolutely

5
00:00:07,200 --> 00:00:10,719
um and whereabouts are you sorry anybody

6
00:00:10,719 --> 00:00:12,400
tuning in for anybody tuning in that

7
00:00:12,400 --> 00:00:14,080
doesn't know where home is for you where

8
00:00:14,080 --> 00:00:15,040
is that

9
00:00:15,040 --> 00:00:17,520
i am living in france but close to

10
00:00:17,520 --> 00:00:18,160
geneva

11
00:00:18,160 --> 00:00:19,920
so very close to the swiss border which

12
00:00:19,920 --> 00:00:22,000
is close at the moment that feels very

13
00:00:22,000 --> 00:00:22,960
funny because

14
00:00:22,960 --> 00:00:26,160
well funny because i've been working

15
00:00:26,160 --> 00:00:27,439
there for like

16
00:00:27,439 --> 00:00:30,880
12 last years and now i i cannot go

17
00:00:30,880 --> 00:00:32,479
there

18
00:00:32,479 --> 00:00:35,680
so it's very strange i mean

19
00:00:35,680 --> 00:00:38,079
very strange times it's very strange for

20
00:00:38,079 --> 00:00:40,079
everyone and everyone's getting used to

21
00:00:40,079 --> 00:00:40,960
um

22
00:00:40,960 --> 00:00:42,719
staying at home but it's uh it's a

23
00:00:42,719 --> 00:00:44,320
worthwhile thing to do

24
00:00:44,320 --> 00:00:47,200
um and we will have to to do so and

25
00:00:47,200 --> 00:00:47,920
hopefully we'll

26
00:00:47,920 --> 00:00:50,480
we'll see some positives at some time

27
00:00:50,480 --> 00:00:50,960
soon

28
00:00:50,960 --> 00:00:54,239
so um nicola if you could share your

29
00:00:54,239 --> 00:00:55,199
screen

30
00:00:55,199 --> 00:00:59,440
sure i will get that readied

31
00:00:59,440 --> 00:01:01,440
and hand over to you for the next

32
00:01:01,440 --> 00:01:03,919
session

33
00:01:08,080 --> 00:01:11,200
great stuff so let's add that in

34
00:01:11,200 --> 00:01:14,240
there we go how does it work for you

35
00:01:14,240 --> 00:01:17,600
that's looking good for me great so

36
00:01:17,600 --> 00:01:19,920
without further ado i'm going to hand

37
00:01:19,920 --> 00:01:21,680
over and i think you

38
00:01:21,680 --> 00:01:23,840
you get the added bonus of an extra

39
00:01:23,840 --> 00:01:25,280
minute so

40
00:01:25,280 --> 00:01:28,560
um let's do this let's kick off now and

41
00:01:28,560 --> 00:01:29,840
we'll speak to you afterwards with some

42
00:01:29,840 --> 00:01:32,000
q a okay

43
00:01:32,000 --> 00:01:35,040
thanks mark um so thanks

44
00:01:35,040 --> 00:01:37,759
everybody to be here i just listened to

45
00:01:37,759 --> 00:01:38,320
the

46
00:01:38,320 --> 00:01:40,479
half of the last talk it's very hard for

47
00:01:40,479 --> 00:01:42,880
me now to to start because

48
00:01:42,880 --> 00:01:45,680
i will be trying to do something serious

49
00:01:45,680 --> 00:01:45,920
and

50
00:01:45,920 --> 00:01:48,720
and the the last session was so fun

51
00:01:48,720 --> 00:01:49,280
that's

52
00:01:49,280 --> 00:01:51,680
uh it's going not to be easy but i will

53
00:01:51,680 --> 00:01:53,119
try my best

54
00:01:53,119 --> 00:01:55,840
um i'm nicola frankel for nearly the

55
00:01:55,840 --> 00:01:57,280
last 20 years

56
00:01:57,280 --> 00:01:59,600
i've been working in software i was a

57
00:01:59,600 --> 00:02:01,280
developer i was a team lead i was an

58
00:02:01,280 --> 00:02:02,159
architect

59
00:02:02,159 --> 00:02:04,240
a couple of years ago i decided to

60
00:02:04,240 --> 00:02:06,719
become a developer advocate

61
00:02:06,719 --> 00:02:09,840
and i've lots i mean

62
00:02:09,840 --> 00:02:12,560
being a consultant you do a lot of

63
00:02:12,560 --> 00:02:14,080
serious stuff again

64
00:02:14,080 --> 00:02:16,800
and you have deadlines you meet them

65
00:02:16,800 --> 00:02:17,599
sometimes

66
00:02:17,599 --> 00:02:21,200
well hopefully um and but you are always

67
00:02:21,200 --> 00:02:22,000
trying to bring

68
00:02:22,000 --> 00:02:25,360
business value whereas i'm

69
00:02:25,360 --> 00:02:27,360
i wouldn't say crazy but i'm pretty

70
00:02:27,360 --> 00:02:29,280
creative and so being a developer

71
00:02:29,280 --> 00:02:31,360
advocate allows me to

72
00:02:31,360 --> 00:02:33,519
present you some crazy ideas that i've

73
00:02:33,519 --> 00:02:34,720
had so

74
00:02:34,720 --> 00:02:37,760
this talk is one of them i work for a

75
00:02:37,760 --> 00:02:39,680
company called hazelcast

76
00:02:39,680 --> 00:02:42,160
we have two products the first one is

77
00:02:42,160 --> 00:02:42,720
called

78
00:02:42,720 --> 00:02:45,040
an in-memory data grid and basically in

79
00:02:45,040 --> 00:02:45,760
a few words

80
00:02:45,760 --> 00:02:47,440
it's just like a bunch of data

81
00:02:47,440 --> 00:02:49,120
structures that

82
00:02:49,120 --> 00:02:52,319
can be distributed over the network and

83
00:02:52,319 --> 00:02:55,120
so you have an api which looks like for

84
00:02:55,120 --> 00:02:56,080
example a map

85
00:02:56,080 --> 00:02:57,920
but then the data is all over the

86
00:02:57,920 --> 00:02:59,519
network and the second

87
00:02:59,519 --> 00:03:02,080
is jets which i will have a few words

88
00:03:02,080 --> 00:03:02,879
afterwards

89
00:03:02,879 --> 00:03:06,560
so i will be very fast on that

90
00:03:07,040 --> 00:03:08,720
let's start by talking about something

91
00:03:08,720 --> 00:03:10,480
that most of you know continuous

92
00:03:10,480 --> 00:03:11,360
integration

93
00:03:11,360 --> 00:03:14,400
continuous integration like in the

94
00:03:14,400 --> 00:03:15,440
legacy way

95
00:03:15,440 --> 00:03:18,800
is well you like integrate all your code

96
00:03:18,800 --> 00:03:20,319
together you merge all your

97
00:03:20,319 --> 00:03:22,959
your your code from developers together

98
00:03:22,959 --> 00:03:24,480
then you compile it you

99
00:03:24,480 --> 00:03:26,159
check that it compiles then you do your

100
00:03:26,159 --> 00:03:28,560
test you check that tests to run

101
00:03:28,560 --> 00:03:30,480
then you package then you do some

102
00:03:30,480 --> 00:03:32,000
integration testing perhaps

103
00:03:32,000 --> 00:03:34,560
you do some containerization you store

104
00:03:34,560 --> 00:03:35,360
it in the

105
00:03:35,360 --> 00:03:38,560
registry and in general this

106
00:03:38,560 --> 00:03:41,519
is the good stuff that everybody should

107
00:03:41,519 --> 00:03:42,560
do

108
00:03:42,560 --> 00:03:46,159
um but since like more than a decade we

109
00:03:46,159 --> 00:03:48,400
some companies have been trying to do

110
00:03:48,400 --> 00:03:50,159
better to go further

111
00:03:50,159 --> 00:03:53,360
um so continuous integration probably

112
00:03:53,360 --> 00:03:56,400
everybody does it at least everybody

113
00:03:56,400 --> 00:03:58,080
should do it

114
00:03:58,080 --> 00:04:00,560
a continuous delivery is much harder

115
00:04:00,560 --> 00:04:02,080
because it means that uh

116
00:04:02,080 --> 00:04:05,360
you you need to put the artifact

117
00:04:05,360 --> 00:04:08,239
at the right place until somebody

118
00:04:08,239 --> 00:04:09,200
decides hey

119
00:04:09,200 --> 00:04:12,959
let's let's make it real and then press

120
00:04:12,959 --> 00:04:14,959
the button and then

121
00:04:14,959 --> 00:04:18,798
it's deployed and if we go even a step

122
00:04:18,798 --> 00:04:19,440
further

123
00:04:19,440 --> 00:04:22,560
we have a continuous deployment um

124
00:04:22,560 --> 00:04:25,520
so in that case we could say that a

125
00:04:25,520 --> 00:04:26,800
commit

126
00:04:26,800 --> 00:04:29,360
directly after the end of the the

127
00:04:29,360 --> 00:04:30,960
continuous pipeline

128
00:04:30,960 --> 00:04:34,320
delivers it into production and

129
00:04:34,320 --> 00:04:37,199
the end goal is to have no manual

130
00:04:37,199 --> 00:04:37,840
decision

131
00:04:37,840 --> 00:04:39,680
everything is automated and of course

132
00:04:39,680 --> 00:04:42,400
there is no downtime um

133
00:04:42,400 --> 00:04:44,639
i i'm saying continuous integration and

134
00:04:44,639 --> 00:04:45,840
continuous delivery

135
00:04:45,840 --> 00:04:48,160
and continuous deployments you you might

136
00:04:48,160 --> 00:04:50,000
see ci cd a lot

137
00:04:50,000 --> 00:04:51,759
uh in a lot of different places you

138
00:04:51,759 --> 00:04:53,600
should be very very cautious about that

139
00:04:53,600 --> 00:04:54,960
because as i mentioned continuous

140
00:04:54,960 --> 00:04:56,080
integration

141
00:04:56,080 --> 00:04:58,720
should be a given and it's pretty much

142
00:04:58,720 --> 00:05:00,240
industrialized today

143
00:05:00,240 --> 00:05:01,919
continuous delivery and continuous

144
00:05:01,919 --> 00:05:03,600
deployment they are very hard

145
00:05:03,600 --> 00:05:07,919
and not a lot of companies do it already

146
00:05:08,400 --> 00:05:10,639
and so the traditional deployment model

147
00:05:10,639 --> 00:05:11,520
on the gvm

148
00:05:11,520 --> 00:05:14,160
is well you stop the gvm whether you are

149
00:05:14,160 --> 00:05:16,160
running a fat jar or running

150
00:05:16,160 --> 00:05:19,199
an application server or just even a

151
00:05:19,199 --> 00:05:21,759
satellite container you stop the gvm

152
00:05:21,759 --> 00:05:23,759
you take your new artifact you will

153
00:05:23,759 --> 00:05:25,600
write the old artifact

154
00:05:25,600 --> 00:05:28,720
and you start the gtm again and

155
00:05:28,720 --> 00:05:31,440
if you have been working for like a

156
00:05:31,440 --> 00:05:33,919
traditional company that's not an issue

157
00:05:33,919 --> 00:05:36,320
you have a web server a proxy then you

158
00:05:36,320 --> 00:05:37,199
set

159
00:05:37,199 --> 00:05:39,759
like a little screen saying hey sorry we

160
00:05:39,759 --> 00:05:41,600
are we are done for the moment

161
00:05:41,600 --> 00:05:45,759
um but unfortunately it's not super

162
00:05:45,759 --> 00:05:48,880
cool now to do that like for example

163
00:05:48,880 --> 00:05:52,639
uh gmail or facebook or i mean

164
00:05:52,639 --> 00:05:54,960
every application of those big companies

165
00:05:54,960 --> 00:05:56,400
they there are not

166
00:05:56,400 --> 00:05:58,720
loads to have done time and a lot of

167
00:05:58,720 --> 00:06:00,560
people they are expecting

168
00:06:00,560 --> 00:06:03,520
not uh your application not to be down

169
00:06:03,520 --> 00:06:05,840
at any point in time

170
00:06:05,840 --> 00:06:08,319
also the problem is if you are like

171
00:06:08,319 --> 00:06:10,160
selling stuff for example if you are an

172
00:06:10,160 --> 00:06:11,120
e-commerce shop

173
00:06:11,120 --> 00:06:14,560
then every every second every minute of

174
00:06:14,560 --> 00:06:15,840
downtime is

175
00:06:15,840 --> 00:06:17,600
a second hour minute you don't sell

176
00:06:17,600 --> 00:06:20,000
anywhere where potential customers they

177
00:06:20,000 --> 00:06:23,120
go to buy elsewhere so you so

178
00:06:23,120 --> 00:06:25,919
you in general you you want to be always

179
00:06:25,919 --> 00:06:27,680
up

180
00:06:27,680 --> 00:06:29,280
and of course there are there are ways

181
00:06:29,280 --> 00:06:30,880
to do that um

182
00:06:30,880 --> 00:06:33,360
we have been talking about like a blue

183
00:06:33,360 --> 00:06:35,600
green deployment for long time so the

184
00:06:35,600 --> 00:06:38,560
the gist of blue green deployment is you

185
00:06:38,560 --> 00:06:40,000
have two

186
00:06:40,000 --> 00:06:42,639
two completely uh similar environments

187
00:06:42,639 --> 00:06:43,680
one is green

188
00:06:43,680 --> 00:06:46,240
the other one is blue and then at some

189
00:06:46,240 --> 00:06:48,400
point you will just switch the arrow

190
00:06:48,400 --> 00:06:50,160
from the green to the blue

191
00:06:50,160 --> 00:06:52,880
and the blue one will become your new

192
00:06:52,880 --> 00:06:54,720
production environment

193
00:06:54,720 --> 00:06:57,599
um it's not that easy of course the

194
00:06:57,599 --> 00:06:59,840
problem is always in the database

195
00:06:59,840 --> 00:07:01,919
because then there are two ways to

196
00:07:01,919 --> 00:07:03,919
handle that either

197
00:07:03,919 --> 00:07:07,039
like you keep a copy of the data on each

198
00:07:07,039 --> 00:07:08,479
environment but then

199
00:07:08,479 --> 00:07:10,560
when you switch the arrow you must also

200
00:07:10,560 --> 00:07:12,319
copy all the data from

201
00:07:12,319 --> 00:07:14,479
one environment or the other or you keep

202
00:07:14,479 --> 00:07:16,319
a single database but then

203
00:07:16,319 --> 00:07:18,960
the question arises how do you handle

204
00:07:18,960 --> 00:07:21,039
schema changes in your database if you

205
00:07:21,039 --> 00:07:21,759
have

206
00:07:21,759 --> 00:07:24,479
a sql application well there are a

207
00:07:24,479 --> 00:07:25,919
couple of issues they are

208
00:07:25,919 --> 00:07:29,199
they are they are possible uh to manage

209
00:07:29,199 --> 00:07:32,319
but it's a lot of work

210
00:07:32,319 --> 00:07:34,560
kubernetes decided to make everything

211
00:07:34,560 --> 00:07:36,639
easier then you you have these rolling

212
00:07:36,639 --> 00:07:38,960
updates then you can have those nodes

213
00:07:38,960 --> 00:07:41,120
and then they can be updated

214
00:07:41,120 --> 00:07:44,000
like one after the other but in the end

215
00:07:44,000 --> 00:07:45,280
still you have an issue with the

216
00:07:45,280 --> 00:07:47,680
database

217
00:07:47,680 --> 00:07:50,720
so this is not easy stuff this creates

218
00:07:50,720 --> 00:07:51,199
problem

219
00:07:51,199 --> 00:07:54,319
in the delivery pipeline like your your

220
00:07:54,319 --> 00:07:56,080
developers they need to handle those

221
00:07:56,080 --> 00:07:57,440
schema changes

222
00:07:57,440 --> 00:07:59,919
and then the project managers needs to

223
00:07:59,919 --> 00:08:01,280
schedule them

224
00:08:01,280 --> 00:08:03,759
it's not an easy problem so i have this

225
00:08:03,759 --> 00:08:04,319
crazy

226
00:08:04,319 --> 00:08:07,680
idea that what if we could change the

227
00:08:07,680 --> 00:08:08,879
byte code

228
00:08:08,879 --> 00:08:12,560
of a running gvm so the the gm just

229
00:08:12,560 --> 00:08:15,039
keeps running and then the class is

230
00:08:15,039 --> 00:08:16,400
reloaded

231
00:08:16,400 --> 00:08:20,000
um and yeah we we shall we shall try to

232
00:08:20,000 --> 00:08:20,479
do that

233
00:08:20,479 --> 00:08:23,840
but uh before we go uh in the demo i

234
00:08:23,840 --> 00:08:27,360
need to tell a bit about how it works

235
00:08:27,360 --> 00:08:30,000
so first there is something that's

236
00:08:30,000 --> 00:08:31,039
present in gvm

237
00:08:31,039 --> 00:08:34,559
called the attach api and the attach api

238
00:08:34,559 --> 00:08:37,599
allows you to load an agent

239
00:08:37,599 --> 00:08:40,640
so you you i will go a bit afterwards

240
00:08:40,640 --> 00:08:41,919
into the agent part

241
00:08:41,919 --> 00:08:44,080
i i think there was a talk before about

242
00:08:44,080 --> 00:08:46,080
agents so probably some of you already

243
00:08:46,080 --> 00:08:47,440
know about it

244
00:08:47,440 --> 00:08:49,920
um but basically it's just a piece of

245
00:08:49,920 --> 00:08:50,959
code

246
00:08:50,959 --> 00:08:54,240
that you will attach to another gvm

247
00:08:54,240 --> 00:08:57,200
so you will just put this agent into

248
00:08:57,200 --> 00:08:58,480
this other gvm

249
00:08:58,480 --> 00:09:00,880
and the good thing is you don't need to

250
00:09:00,880 --> 00:09:01,519
run

251
00:09:01,519 --> 00:09:04,240
this original production gvm your your

252
00:09:04,240 --> 00:09:06,480
application doesn't need to run in debug

253
00:09:06,480 --> 00:09:07,440
mode it can run

254
00:09:07,440 --> 00:09:10,000
in standard mode of course you have

255
00:09:10,000 --> 00:09:10,800
requirements

256
00:09:10,800 --> 00:09:13,040
and there are two requirements the first

257
00:09:13,040 --> 00:09:15,920
is you need to run on the same system

258
00:09:15,920 --> 00:09:18,320
it can be a contender it can be a normal

259
00:09:18,320 --> 00:09:19,040
machine but

260
00:09:19,040 --> 00:09:21,279
it must run on the same system and the

261
00:09:21,279 --> 00:09:23,200
second requirement is you must know the

262
00:09:23,200 --> 00:09:27,360
pid of the gvm you want to attach to

263
00:09:27,360 --> 00:09:29,600
the attach api is pretty simple

264
00:09:29,600 --> 00:09:31,279
basically you have this

265
00:09:31,279 --> 00:09:34,640
class where you say oh i need to

266
00:09:34,640 --> 00:09:38,000
get a handle on the virtual machine and

267
00:09:38,000 --> 00:09:41,519
afterwards i need to load the agents

268
00:09:41,519 --> 00:09:44,480
and this is done so if there are a

269
00:09:44,480 --> 00:09:44,959
couple

270
00:09:44,959 --> 00:09:48,080
of sorry implementation for each machine

271
00:09:48,080 --> 00:09:50,320
here on my own i have a hotspot mutual

272
00:09:50,320 --> 00:09:52,640
machine i will show you how it works

273
00:09:52,640 --> 00:09:55,600
and then afterwards you need to run this

274
00:09:55,600 --> 00:09:58,000
agent

275
00:09:58,560 --> 00:10:01,680
and agents there are jars like simple

276
00:10:01,680 --> 00:10:03,200
jars so this is java

277
00:10:03,200 --> 00:10:06,560
code with specific metadata

278
00:10:06,560 --> 00:10:08,079
and there are parts of the

279
00:10:08,079 --> 00:10:09,760
instrumentation api that

280
00:10:09,760 --> 00:10:11,760
allows you to change the byte code of

281
00:10:11,760 --> 00:10:13,920
running application

282
00:10:13,920 --> 00:10:16,720
there are two kinds of agents the first

283
00:10:16,720 --> 00:10:17,519
one probably

284
00:10:17,519 --> 00:10:20,160
most of you know about them because they

285
00:10:20,160 --> 00:10:21,040
are set on

286
00:10:21,040 --> 00:10:24,399
at startup and that's how a lot of

287
00:10:24,399 --> 00:10:27,839
monitoring tools work already so

288
00:10:27,839 --> 00:10:31,120
instead of calling java.jor your jar

289
00:10:31,120 --> 00:10:33,680
you have this additional parameter

290
00:10:33,680 --> 00:10:34,399
called

291
00:10:34,399 --> 00:10:37,279
dash java agent and you you set the pass

292
00:10:37,279 --> 00:10:38,640
to the drawer

293
00:10:38,640 --> 00:10:41,600
and and when it starts then the agent

294
00:10:41,600 --> 00:10:43,440
will run its magic

295
00:10:43,440 --> 00:10:46,560
the thing is it can only be run when you

296
00:10:46,560 --> 00:10:47,760
start

297
00:10:47,760 --> 00:10:50,000
a new gvm so that's why it's called

298
00:10:50,000 --> 00:10:51,279
static

299
00:10:51,279 --> 00:10:54,720
now our issue is we already have this

300
00:10:54,720 --> 00:10:57,760
jvm running and we need to do stuff on

301
00:10:57,760 --> 00:11:01,120
it like to load new code and this is the

302
00:11:01,120 --> 00:11:03,920
dynamic agent and this is loaded by the

303
00:11:03,920 --> 00:11:04,399
attach

304
00:11:04,399 --> 00:11:06,800
api

305
00:11:08,000 --> 00:11:11,279
as i mentioned you have like a a

306
00:11:11,279 --> 00:11:14,560
an agent is just a simple jar where you

307
00:11:14,560 --> 00:11:15,120
have

308
00:11:15,120 --> 00:11:18,480
additional metadata so in a normal jar

309
00:11:18,480 --> 00:11:19,040
at this

310
00:11:19,040 --> 00:11:22,399
as this main class on the static agent

311
00:11:22,399 --> 00:11:24,560
you have a pre-made class and on the

312
00:11:24,560 --> 00:11:27,360
dynamic agent you have an edge in class

313
00:11:27,360 --> 00:11:29,519
and then you've got an entry point where

314
00:11:29,519 --> 00:11:30,399
you you want

315
00:11:30,399 --> 00:11:33,440
code to run when the agent is triggered

316
00:11:33,440 --> 00:11:35,760
on the static one it's called pre-main

317
00:11:35,760 --> 00:11:38,000
and on the dynamic one it's called edges

318
00:11:38,000 --> 00:11:38,720
main

319
00:11:38,720 --> 00:11:42,000
for the rest there are regular jars

320
00:11:42,000 --> 00:11:45,360
so you can have like java agents you can

321
00:11:45,360 --> 00:11:47,200
have cutling agents you can have closure

322
00:11:47,200 --> 00:11:48,720
agents you can have whatever you want

323
00:11:48,720 --> 00:11:49,279
agents

324
00:11:49,279 --> 00:11:52,959
they are just like jars

325
00:11:54,360 --> 00:11:57,200
instrumentation so once you've got a

326
00:11:57,200 --> 00:11:57,920
handle

327
00:11:57,920 --> 00:12:02,480
uh here you have this like

328
00:12:02,480 --> 00:12:04,959
interface called instrumentation that is

329
00:12:04,959 --> 00:12:06,000
passed

330
00:12:06,000 --> 00:12:09,279
by the gfm and you can do pretty cool

331
00:12:09,279 --> 00:12:10,399
stuff with that

332
00:12:10,399 --> 00:12:13,360
with that uh interface basically you can

333
00:12:13,360 --> 00:12:14,000
change

334
00:12:14,000 --> 00:12:15,760
a class implementation there are some

335
00:12:15,760 --> 00:12:17,760
limitations i will come back to them

336
00:12:17,760 --> 00:12:18,639
later

337
00:12:18,639 --> 00:12:21,680
and also every time you receive bytecode

338
00:12:21,680 --> 00:12:22,560
you can you can

339
00:12:22,560 --> 00:12:25,600
do automatic transformation so here

340
00:12:25,600 --> 00:12:28,079
is a little class diagram you see this

341
00:12:28,079 --> 00:12:29,760
is what you will receive from the

342
00:12:29,760 --> 00:12:32,399
pre-men or the agent main static

343
00:12:32,399 --> 00:12:35,279
uh method and you can add a class

344
00:12:35,279 --> 00:12:36,880
transformer that's

345
00:12:36,880 --> 00:12:39,760
like apply automatic transformation of

346
00:12:39,760 --> 00:12:40,480
the code

347
00:12:40,480 --> 00:12:43,360
or you can do something very cool called

348
00:12:43,360 --> 00:12:44,880
redefine class and

349
00:12:44,880 --> 00:12:47,600
that's what is interesting so basically

350
00:12:47,600 --> 00:12:48,800
you will

351
00:12:48,800 --> 00:12:52,079
have a class that is already loaded and

352
00:12:52,079 --> 00:12:56,800
you will put the new byte array of the

353
00:12:56,800 --> 00:12:59,920
the the byte codes

354
00:12:59,920 --> 00:13:03,120
uh to this class and then the gvm will

355
00:13:03,120 --> 00:13:05,600
reload it on the fly will redefine it on

356
00:13:05,600 --> 00:13:08,160
the fly

357
00:13:09,360 --> 00:13:12,959
now we have the last issue is imagine

358
00:13:12,959 --> 00:13:13,760
that

359
00:13:13,760 --> 00:13:16,880
we want to do this continuous deployment

360
00:13:16,880 --> 00:13:20,000
so we need to move the byte code from

361
00:13:20,000 --> 00:13:24,160
let's say our machine to production

362
00:13:24,160 --> 00:13:26,959
one way to do that is to do batching so

363
00:13:26,959 --> 00:13:27,680
let's say like

364
00:13:27,680 --> 00:13:31,120
every five minutes we will take bytecode

365
00:13:31,120 --> 00:13:34,639
put it in production the issue with

366
00:13:34,639 --> 00:13:37,680
that approach is that well sometimes we

367
00:13:37,680 --> 00:13:39,760
don't have nothing to do so every five

368
00:13:39,760 --> 00:13:41,279
minutes we will put

369
00:13:41,279 --> 00:13:44,720
uh stuff that is not really interesting

370
00:13:44,720 --> 00:13:47,680
and otherwise we might change every

371
00:13:47,680 --> 00:13:48,399
minute

372
00:13:48,399 --> 00:13:51,120
and then we will get only the last

373
00:13:51,120 --> 00:13:52,240
changes

374
00:13:52,240 --> 00:13:55,279
from five minutes so

375
00:13:55,279 --> 00:13:57,839
instead of doing batching it's better to

376
00:13:57,839 --> 00:13:59,519
do streaming the good thing about

377
00:13:59,519 --> 00:14:00,079
streaming

378
00:14:00,079 --> 00:14:02,639
it's it's uninterrupted it takes the

379
00:14:02,639 --> 00:14:03,279
changes

380
00:14:03,279 --> 00:14:06,240
as they come and they flow regularly and

381
00:14:06,240 --> 00:14:07,440
if you have been doing

382
00:14:07,440 --> 00:14:10,160
reactive programming or even driven

383
00:14:10,160 --> 00:14:11,199
programming

384
00:14:11,199 --> 00:14:14,880
that's exactly what we want to do

385
00:14:15,279 --> 00:14:18,240
there are a lot of um in-memory stream

386
00:14:18,240 --> 00:14:18,880
processing

387
00:14:18,880 --> 00:14:20,880
engines available there are some that

388
00:14:20,880 --> 00:14:22,320
are available on the cloud

389
00:14:22,320 --> 00:14:25,760
so every big cloud provider has its own

390
00:14:25,760 --> 00:14:28,320
but you can also have open source

391
00:14:28,320 --> 00:14:30,720
products that you can leverage sir at

392
00:14:30,720 --> 00:14:34,160
flink or jets uh you also have this

393
00:14:34,160 --> 00:14:36,959
uh apache beam project which is quite

394
00:14:36,959 --> 00:14:39,680
interesting because it tries to abstract

395
00:14:39,680 --> 00:14:42,399
under an additional api some of the

396
00:14:42,399 --> 00:14:42,959
above

397
00:14:42,959 --> 00:14:45,279
well the issue is that since it's not a

398
00:14:45,279 --> 00:14:47,120
standard like string processing is not a

399
00:14:47,120 --> 00:14:48,079
standard

400
00:14:48,079 --> 00:14:51,920
and not everybody uh cooperated with

401
00:14:51,920 --> 00:14:52,480
beam

402
00:14:52,480 --> 00:14:55,120
then it's a very leaky abstraction but i

403
00:14:55,120 --> 00:14:55,519
think

404
00:14:55,519 --> 00:14:59,120
it's it's a great idea anyway so you you

405
00:14:59,120 --> 00:15:00,480
have all the stuff

406
00:15:00,480 --> 00:15:03,120
and because uh yeah uh i know better

407
00:15:03,120 --> 00:15:04,720
hazel costs i can talk

408
00:15:04,720 --> 00:15:07,040
to you a bit about hazel cost but most

409
00:15:07,040 --> 00:15:08,639
of them work in the same way

410
00:15:08,639 --> 00:15:11,360
so we are apache to license it's a

411
00:15:11,360 --> 00:15:12,399
single jar

412
00:15:12,399 --> 00:15:14,079
and you can do batching or streaming in

413
00:15:14,079 --> 00:15:16,160
the same api

414
00:15:16,160 --> 00:15:19,199
and this is basically what

415
00:15:19,199 --> 00:15:22,240
a streaming engine does it takes data

416
00:15:22,240 --> 00:15:25,760
from sources it

417
00:15:25,760 --> 00:15:28,399
reads them you can read from several

418
00:15:28,399 --> 00:15:30,959
sources and try to combine them together

419
00:15:30,959 --> 00:15:32,959
and then because you do streaming you

420
00:15:32,959 --> 00:15:34,959
might want to do aggregation over

421
00:15:34,959 --> 00:15:37,600
windows or rolling windows or fixed time

422
00:15:37,600 --> 00:15:38,720
windows

423
00:15:38,720 --> 00:15:41,120
then you can do some computation and

424
00:15:41,120 --> 00:15:42,079
transformation

425
00:15:42,079 --> 00:15:45,839
and then you write them in syncs

426
00:15:45,839 --> 00:15:48,880
and if you have been doing etl

427
00:15:48,880 --> 00:15:51,920
extract transform load in batch then you

428
00:15:51,920 --> 00:15:52,560
do

429
00:15:52,560 --> 00:15:54,880
the reading port and then you do the

430
00:15:54,880 --> 00:15:55,920
transform port

431
00:15:55,920 --> 00:15:58,240
and then you do the writing port all the

432
00:15:58,240 --> 00:15:58,959
same

433
00:15:58,959 --> 00:16:01,920
so by doing streaming you you have other

434
00:16:01,920 --> 00:16:04,079
capabilities that are not leveraged

435
00:16:04,079 --> 00:16:06,000
in what i will show you but they might

436
00:16:06,000 --> 00:16:08,639
be interesting anyway

437
00:16:08,639 --> 00:16:11,279
and this is my my design this is what uh

438
00:16:11,279 --> 00:16:13,759
this crazy ad is all about

439
00:16:13,759 --> 00:16:17,120
um so i have my source class that

440
00:16:17,120 --> 00:16:19,920
will get generated every time i change

441
00:16:19,920 --> 00:16:22,399
my source.java every time i compile it

442
00:16:22,399 --> 00:16:25,040
then i will create the source.class and

443
00:16:25,040 --> 00:16:26,720
i have a jet job

444
00:16:26,720 --> 00:16:30,560
that like runs into a streaming gvm

445
00:16:30,560 --> 00:16:33,519
and every time it detects a change it

446
00:16:33,519 --> 00:16:34,480
will put it

447
00:16:34,480 --> 00:16:37,360
in a data store in that case it will be

448
00:16:37,360 --> 00:16:39,040
in memory data grids but

449
00:16:39,040 --> 00:16:42,959
you can put it anywhere and afterwards

450
00:16:42,959 --> 00:16:47,120
i have my production gvm which runs its

451
00:16:47,120 --> 00:16:50,480
own app like in its own

452
00:16:50,480 --> 00:16:54,079
edge of the world i will take this

453
00:16:54,079 --> 00:16:54,959
injection

454
00:16:54,959 --> 00:16:58,079
gvm i will take the path to the jar and

455
00:16:58,079 --> 00:17:00,000
using the attach api

456
00:17:00,000 --> 00:17:03,600
i will make it so that here this app

457
00:17:03,600 --> 00:17:06,959
now will be registered to all changes

458
00:17:06,959 --> 00:17:08,000
that happened

459
00:17:08,000 --> 00:17:11,760
in the data store so every time the job

460
00:17:11,760 --> 00:17:15,199
puts new data which in that case

461
00:17:15,199 --> 00:17:18,240
is byte code into the data store then

462
00:17:18,240 --> 00:17:19,439
the app

463
00:17:19,439 --> 00:17:22,640
will be uh we listen and then we'll be

464
00:17:22,640 --> 00:17:23,760
notified

465
00:17:23,760 --> 00:17:28,400
and then we'll be able to redefine it

466
00:17:28,400 --> 00:17:31,520
here is a little sequence diagram so i

467
00:17:31,520 --> 00:17:32,160
have

468
00:17:32,160 --> 00:17:34,960
first i need to start the jet job that

469
00:17:34,960 --> 00:17:35,440
will

470
00:17:35,440 --> 00:17:38,960
just loop over reading

471
00:17:38,960 --> 00:17:41,600
all classes and then if the byte code

472
00:17:41,600 --> 00:17:43,840
has changed put the byte code into

473
00:17:43,840 --> 00:17:46,880
the data store and then i will

474
00:17:46,880 --> 00:17:49,600
load the agents which will attach itself

475
00:17:49,600 --> 00:17:50,960
to the production gvm

476
00:17:50,960 --> 00:17:52,960
and the production gdm as i mentioned

477
00:17:52,960 --> 00:17:55,200
will subscribe to changes

478
00:17:55,200 --> 00:17:58,000
from the map so every time there is a

479
00:17:58,000 --> 00:17:58,720
change

480
00:17:58,720 --> 00:18:01,280
then it will read and redefine the byte

481
00:18:01,280 --> 00:18:04,399
code on the fly

482
00:18:04,720 --> 00:18:08,080
and perhaps i have some time for a demo

483
00:18:08,080 --> 00:18:12,000
because i try to be very very fast

484
00:18:13,360 --> 00:18:15,280
do you have some do i have some time for

485
00:18:15,280 --> 00:18:17,678
a demo

486
00:18:18,960 --> 00:18:21,600
yeah absolutely i believe perfect

487
00:18:21,600 --> 00:18:23,760
looking at the schedule right now

488
00:18:23,760 --> 00:18:27,280
you have another 15 minutes

489
00:18:27,280 --> 00:18:30,960
perfect um that's the good so i i have

490
00:18:30,960 --> 00:18:31,760
these

491
00:18:31,760 --> 00:18:35,440
projects and here is my

492
00:18:35,440 --> 00:18:38,799
production gvm so i have a hello servlet

493
00:18:38,799 --> 00:18:42,000
i use as you can see i will be so i'm

494
00:18:42,000 --> 00:18:43,520
running the normal stuff

495
00:18:43,520 --> 00:18:47,280
and the production servlets will just

496
00:18:47,280 --> 00:18:50,960
do local

497
00:18:52,240 --> 00:18:56,240
local hawaii well

498
00:18:56,240 --> 00:18:59,039
forget about it i will just be much much

499
00:18:59,039 --> 00:19:00,880
faster like that

500
00:19:00,880 --> 00:19:04,000
here it says hello worlds

501
00:19:04,000 --> 00:19:06,160
it says hello world and it's running and

502
00:19:06,160 --> 00:19:08,480
i'm happy with my production

503
00:19:08,480 --> 00:19:11,760
now what i will be doing is i will be

504
00:19:11,760 --> 00:19:13,280
running my jet job

505
00:19:13,280 --> 00:19:18,160
again normal stuff so no debug

506
00:19:18,160 --> 00:19:22,400
so now i have a jet job that reads

507
00:19:22,400 --> 00:19:25,760
class files and every time it

508
00:19:25,760 --> 00:19:29,120
sends the classify results

509
00:19:29,120 --> 00:19:32,400
to the output and also if there is a

510
00:19:32,400 --> 00:19:33,440
change

511
00:19:33,440 --> 00:19:36,160
it will put it in the imdg in the data

512
00:19:36,160 --> 00:19:37,679
store

513
00:19:37,679 --> 00:19:40,880
and now the magic happens here i have

514
00:19:40,880 --> 00:19:41,679
this attach

515
00:19:41,679 --> 00:19:45,520
api so this attach api will

516
00:19:45,520 --> 00:19:49,440
attach itself to the production gvm

517
00:19:49,440 --> 00:19:52,880
and it has run and it's finished

518
00:19:52,880 --> 00:19:56,640
now we can see that the main

519
00:19:56,640 --> 00:20:00,000
the the stupid servlet now seems to have

520
00:20:00,000 --> 00:20:02,480
been doing something strange there is

521
00:20:02,480 --> 00:20:04,840
like hazel cost related

522
00:20:04,840 --> 00:20:08,400
logging now i will

523
00:20:08,400 --> 00:20:11,039
so here

524
00:20:11,760 --> 00:20:14,080
is the work this is my production i

525
00:20:14,080 --> 00:20:15,600
shouldn't access it

526
00:20:15,600 --> 00:20:18,840
what i will access is the copy of the

527
00:20:18,840 --> 00:20:21,840
production

528
00:20:23,280 --> 00:20:26,720
this is what i want to change this

529
00:20:26,720 --> 00:20:29,520
will get compiled this will generate the

530
00:20:29,520 --> 00:20:30,880
class file

531
00:20:30,880 --> 00:20:34,240
jets will read it we'll put it in the

532
00:20:34,240 --> 00:20:35,200
mdg

533
00:20:35,200 --> 00:20:39,919
and then the the final production gvm

534
00:20:39,919 --> 00:20:42,320
will change redefine the class so if i

535
00:20:42,320 --> 00:20:43,760
say hello

536
00:20:43,760 --> 00:20:48,480
all the box online and now i just

537
00:20:48,480 --> 00:20:51,120
compile it

538
00:21:01,440 --> 00:21:04,559
and if i curl again

539
00:21:10,000 --> 00:21:13,360
it's done so i have changed

540
00:21:13,360 --> 00:21:17,120
the codes live and the gvm was never

541
00:21:17,120 --> 00:21:18,400
down

542
00:21:18,400 --> 00:21:20,640
so perhaps since i have a bit of time i

543
00:21:20,640 --> 00:21:23,440
can show a bit of codes

544
00:21:23,440 --> 00:21:26,720
stuffs that might be interesting so the

545
00:21:26,720 --> 00:21:28,400
attach api

546
00:21:28,400 --> 00:21:31,679
here the usage is very very simple as i

547
00:21:31,679 --> 00:21:32,960
mentioned

548
00:21:32,960 --> 00:21:36,960
you need to attach yourself to a gvm

549
00:21:36,960 --> 00:21:39,200
and then to atta sorry this is kotlin

550
00:21:39,200 --> 00:21:40,159
but this

551
00:21:40,159 --> 00:21:43,360
this is exactly the same um so you need

552
00:21:43,360 --> 00:21:45,520
to attach yourself

553
00:21:45,520 --> 00:21:48,480
you need to pass the pid and because i'm

554
00:21:48,480 --> 00:21:49,760
super super lazy

555
00:21:49,760 --> 00:21:52,240
instead of checking every time the pid

556
00:21:52,240 --> 00:21:54,400
which wouldn't be super feasible

557
00:21:54,400 --> 00:21:57,600
is i just use the process handle and to

558
00:21:57,600 --> 00:21:58,080
filter

559
00:21:58,080 --> 00:22:01,360
the one the the one pid that

560
00:22:01,360 --> 00:22:04,880
has this main production class

561
00:22:04,880 --> 00:22:08,080
so this is how i get the pid and then i

562
00:22:08,080 --> 00:22:11,200
load the agent and the agent

563
00:22:11,200 --> 00:22:14,320
has already been compiled so

564
00:22:14,320 --> 00:22:17,678
here you can see there is

565
00:22:18,640 --> 00:22:22,240
this update agent jar

566
00:22:22,640 --> 00:22:26,640
this one comes from

567
00:22:26,640 --> 00:22:28,960
here

568
00:22:30,960 --> 00:22:33,200
my computer is a bit sluggish it's not

569
00:22:33,200 --> 00:22:41,039
you it's me

570
00:22:41,039 --> 00:22:44,480
and here you see the agent mend method

571
00:22:44,480 --> 00:22:46,600
that i talked about you see the

572
00:22:46,600 --> 00:22:49,600
instrumentation here that i'm using that

573
00:22:49,600 --> 00:22:51,120
is passed for me

574
00:22:51,120 --> 00:22:54,720
and what i'm doing is i will

575
00:22:54,720 --> 00:22:58,080
create a client of this just job and

576
00:22:58,080 --> 00:23:01,440
every time there is a change on this

577
00:23:01,440 --> 00:23:04,559
like map of byte codes then

578
00:23:04,559 --> 00:23:07,440
i will call this entry listener and this

579
00:23:07,440 --> 00:23:08,880
entry listener is past the

580
00:23:08,880 --> 00:23:09,919
instrumentation

581
00:23:09,919 --> 00:23:12,799
and basically what i'm doing is i will

582
00:23:12,799 --> 00:23:13,440
get

583
00:23:13,440 --> 00:23:16,960
the key so in this map the class name is

584
00:23:16,960 --> 00:23:17,919
the key

585
00:23:17,919 --> 00:23:21,280
and the key value is the byte codes

586
00:23:21,280 --> 00:23:24,799
and i will just use it create

587
00:23:24,799 --> 00:23:28,159
a new class definition put the class

588
00:23:28,159 --> 00:23:32,960
put the byte code and redefine the class

589
00:23:32,960 --> 00:23:36,159
finally what i need to do is to have the

590
00:23:36,159 --> 00:23:38,080
job itself

591
00:23:38,080 --> 00:23:41,760
so the job itself is here

592
00:23:48,159 --> 00:23:51,440
i defined a pipeline and

593
00:23:51,440 --> 00:23:55,200
if you have been doing some um javad

594
00:23:55,200 --> 00:23:58,799
streams it reads very fluently so you

595
00:23:58,799 --> 00:24:02,000
read from something called classes and

596
00:24:02,000 --> 00:24:04,880
classes is the way to access

597
00:24:04,880 --> 00:24:08,880
well the the byte codes so

598
00:24:08,880 --> 00:24:11,440
here you have something called the class

599
00:24:11,440 --> 00:24:12,559
pass reader

600
00:24:12,559 --> 00:24:15,919
where i read every time i read

601
00:24:15,919 --> 00:24:20,320
the file system and then i stream

602
00:24:20,320 --> 00:24:24,000
all files that it has detected

603
00:24:24,000 --> 00:24:27,200
what i do not to override my

604
00:24:27,200 --> 00:24:31,600
pipeline is i only

605
00:24:31,600 --> 00:24:34,799
stream changes so once

606
00:24:34,799 --> 00:24:37,360
the byte code has been loaded into the

607
00:24:37,360 --> 00:24:38,559
imdg

608
00:24:38,559 --> 00:24:41,200
then it knows where it is and i check

609
00:24:41,200 --> 00:24:41,600
for

610
00:24:41,600 --> 00:24:44,559
change and if there is no change i don't

611
00:24:44,559 --> 00:24:46,320
stream it downwards because it would be

612
00:24:46,320 --> 00:24:46,799
very

613
00:24:46,799 --> 00:24:50,320
stupid to redefine classes with the same

614
00:24:50,320 --> 00:24:51,919
byte codes

615
00:24:51,919 --> 00:24:56,320
and here you have all the gist of it

616
00:24:56,320 --> 00:24:59,360
and now there are like perhaps some

617
00:24:59,360 --> 00:25:02,880
questions um i will just finish

618
00:25:02,880 --> 00:25:08,240
the slides because this is not the end

619
00:25:08,799 --> 00:25:11,840
so this demo is just a crazy idea it's a

620
00:25:11,840 --> 00:25:12,320
demo

621
00:25:12,320 --> 00:25:14,080
it's a park it's a prototype call it

622
00:25:14,080 --> 00:25:15,440
however you want there

623
00:25:15,440 --> 00:25:17,760
there are there are limitations um if

624
00:25:17,760 --> 00:25:19,760
you come from a world where basically

625
00:25:19,760 --> 00:25:20,880
you have jars

626
00:25:20,880 --> 00:25:23,679
and you take them and you version them

627
00:25:23,679 --> 00:25:26,320
and you say i know this version 1.0 is

628
00:25:26,320 --> 00:25:27,279
in production

629
00:25:27,279 --> 00:25:30,320
this will feel very strange to you now

630
00:25:30,320 --> 00:25:31,760
the issue when you start doing

631
00:25:31,760 --> 00:25:33,440
continuous deployments

632
00:25:33,440 --> 00:25:37,120
uh is you you don't have this mindset oh

633
00:25:37,120 --> 00:25:40,240
here i have version 1.0 in

634
00:25:40,240 --> 00:25:43,200
in production probably what you have is

635
00:25:43,200 --> 00:25:45,600
up to a commit in production

636
00:25:45,600 --> 00:25:47,679
this is a change of mindset which i

637
00:25:47,679 --> 00:25:49,039
agree is very very

638
00:25:49,039 --> 00:25:52,080
hard to do um the instrumentation

639
00:25:52,080 --> 00:25:55,279
api uh allows you

640
00:25:55,279 --> 00:25:58,240
to do to load new classes here i didn't

641
00:25:58,240 --> 00:25:58,720
do

642
00:25:58,720 --> 00:26:00,960
that because i've been lazy and you can

643
00:26:00,960 --> 00:26:02,559
do it on your own

644
00:26:02,559 --> 00:26:04,720
uh there is a very hard definition of

645
00:26:04,720 --> 00:26:06,240
the redefine classes

646
00:26:06,240 --> 00:26:09,120
uh it tells you you cannot add or remove

647
00:26:09,120 --> 00:26:10,960
fields or methods you can

648
00:26:10,960 --> 00:26:12,880
not change the signature of method or

649
00:26:12,880 --> 00:26:14,880
you cannot change the inheritance

650
00:26:14,880 --> 00:26:15,760
hierarchy

651
00:26:15,760 --> 00:26:18,880
which for me are it's very constrained

652
00:26:18,880 --> 00:26:21,279
which means still that you can actually

653
00:26:21,279 --> 00:26:23,600
change the body of every method

654
00:26:23,600 --> 00:26:26,559
it still gives you a lot of power

655
00:26:26,559 --> 00:26:28,320
something i didn't write but

656
00:26:28,320 --> 00:26:30,720
having the attach api is of course a

657
00:26:30,720 --> 00:26:32,080
security risk

658
00:26:32,080 --> 00:26:34,080
so you need to be clear about that and

659
00:26:34,080 --> 00:26:35,200
to think whether

660
00:26:35,200 --> 00:26:39,520
uh the pros are bigger than the cons

661
00:26:39,520 --> 00:26:41,679
we can do some improvements because of

662
00:26:41,679 --> 00:26:43,760
course the goal is not to stream for the

663
00:26:43,760 --> 00:26:44,640
developer

664
00:26:44,640 --> 00:26:46,320
machine because you might have many

665
00:26:46,320 --> 00:26:48,559
developers uh you can combine what i

666
00:26:48,559 --> 00:26:49,520
showed you

667
00:26:49,520 --> 00:26:51,840
with your ci pipeline with your

668
00:26:51,840 --> 00:26:53,760
continuous integration pipeline

669
00:26:53,760 --> 00:26:56,080
so instead of streaming for the machine

670
00:26:56,080 --> 00:26:57,360
of the developer

671
00:26:57,360 --> 00:27:00,720
you can still commit to git

672
00:27:00,720 --> 00:27:04,080
then it gets compiled tested whatever

673
00:27:04,080 --> 00:27:04,880
whatever

674
00:27:04,880 --> 00:27:07,840
until what you wanted and then the

675
00:27:07,840 --> 00:27:08,480
folder

676
00:27:08,480 --> 00:27:10,960
at the end will be the source of the

677
00:27:10,960 --> 00:27:12,400
stream

678
00:27:12,400 --> 00:27:15,760
and of course you can also uh be wanting

679
00:27:15,760 --> 00:27:16,240
to do

680
00:27:16,240 --> 00:27:18,720
to add additional metadata in each class

681
00:27:18,720 --> 00:27:20,399
in that case so you can have still have

682
00:27:20,399 --> 00:27:21,520
git tags

683
00:27:21,520 --> 00:27:24,960
um and and then you can like transform

684
00:27:24,960 --> 00:27:27,440
each each time you you load the class or

685
00:27:27,440 --> 00:27:28,240
even in

686
00:27:28,240 --> 00:27:30,559
during streaming you can add this

687
00:27:30,559 --> 00:27:33,679
additional metadata also what you can do

688
00:27:33,679 --> 00:27:37,600
be doing using streaming is add like a

689
00:27:37,600 --> 00:27:39,600
secure stamp so that

690
00:27:39,600 --> 00:27:41,840
the gvm that loads the new byte code

691
00:27:41,840 --> 00:27:45,679
knows it comes from a secured source

692
00:27:45,679 --> 00:27:48,159
uh so thanks for your attention uh you

693
00:27:48,159 --> 00:27:49,679
can read my blog you can follow me on

694
00:27:49,679 --> 00:27:52,080
twitter and uh more importantly you can

695
00:27:52,080 --> 00:27:52,720
get

696
00:27:52,720 --> 00:27:55,440
uh the repo uh everything is on github

697
00:27:55,440 --> 00:27:56,960
so if you have

698
00:27:56,960 --> 00:27:59,760
also crazy better crazy ideas of

699
00:27:59,760 --> 00:28:01,440
improvements or whatever

700
00:28:01,440 --> 00:28:05,760
uh well you're welcome

701
00:28:05,840 --> 00:28:09,039
great stuff thank you so much nichola

702
00:28:09,039 --> 00:28:11,520
so um yeah there's there's some

703
00:28:11,520 --> 00:28:13,520
resources uh blog there that you can go

704
00:28:13,520 --> 00:28:14,480
to if you've

705
00:28:14,480 --> 00:28:17,360
got any um questions that nobody that

706
00:28:17,360 --> 00:28:18,799
you haven't posted

707
00:28:18,799 --> 00:28:20,880
at the moment um it looks like you've

708
00:28:20,880 --> 00:28:22,000
done such a good job

709
00:28:22,000 --> 00:28:23,200
that you've answered everyone's

710
00:28:23,200 --> 00:28:24,399
questions before they've asked them

711
00:28:24,399 --> 00:28:25,440
which is always

712
00:28:25,440 --> 00:28:29,440
a bonus as far as i'm concerned um

713
00:28:29,440 --> 00:28:30,880
so if people want to learn more

714
00:28:30,880 --> 00:28:32,559
obviously they can go to your

715
00:28:32,559 --> 00:28:34,960
to your blog um are there any other

716
00:28:34,960 --> 00:28:36,000
resources

717
00:28:36,000 --> 00:28:38,399
um that you found helpful that you might

718
00:28:38,399 --> 00:28:40,000
want to share with people

719
00:28:40,000 --> 00:28:43,279
yes of course the attach api um

720
00:28:43,279 --> 00:28:46,399
the uh instrumentation api um i

721
00:28:46,399 --> 00:28:48,960
the my the blog post because i always

722
00:28:48,960 --> 00:28:50,799
always try to write a blog post before

723
00:28:50,799 --> 00:28:52,080
doing a session

724
00:28:52,080 --> 00:28:55,120
uh is under review right now um if

725
00:28:55,120 --> 00:28:56,320
people are interested

726
00:28:56,320 --> 00:28:58,320
then i will tweet it when it's published

727
00:28:58,320 --> 00:29:00,000
and in the blog post there are

728
00:29:00,000 --> 00:29:03,440
references to uh all those like api

729
00:29:03,440 --> 00:29:06,880
that might be interesting

730
00:29:06,960 --> 00:29:08,720
great so something has just come through

731
00:29:08,720 --> 00:29:11,039
the stream that grace has just picked up

732
00:29:11,039 --> 00:29:12,080
on i can't see

733
00:29:12,080 --> 00:29:15,039
it um and it says is your listener or

734
00:29:15,039 --> 00:29:17,520
agent

735
00:29:17,760 --> 00:29:20,960
actually um i can't i can read slack if

736
00:29:20,960 --> 00:29:21,840
you want that

737
00:29:21,840 --> 00:29:23,600
i am not sure how to phrase that but

738
00:29:23,600 --> 00:29:25,039
it's basically

739
00:29:25,039 --> 00:29:28,080
the overhead introduction

740
00:29:28,080 --> 00:29:32,320
uh do you know where

741
00:29:32,320 --> 00:29:34,559
where the question is it's not on slack

742
00:29:34,559 --> 00:29:36,640
i am trying to find it right now

743
00:29:36,640 --> 00:29:39,200
it says is your listener or agent will

744
00:29:39,200 --> 00:29:40,000
not make any

745
00:29:40,000 --> 00:29:41,760
overhead on production it's actually in

746
00:29:41,760 --> 00:29:44,240
um in the slido stream

747
00:29:44,240 --> 00:29:46,880
ah okay um so of course there is always

748
00:29:46,880 --> 00:29:48,320
overhead i mean if

749
00:29:48,320 --> 00:29:51,919
a a listener is just like

750
00:29:51,919 --> 00:29:55,200
a new a thread that constantly checks so

751
00:29:55,200 --> 00:29:56,240
basically yes

752
00:29:56,240 --> 00:30:00,640
of course there is a slight overhead um

753
00:30:00,640 --> 00:30:03,840
i mean it's up to you um it's like

754
00:30:03,840 --> 00:30:04,880
monitoring

755
00:30:04,880 --> 00:30:06,840
monitoring your application it's

756
00:30:06,840 --> 00:30:08,720
overhead um

757
00:30:08,720 --> 00:30:11,600
but in some cases i would say monitoring

758
00:30:11,600 --> 00:30:13,120
in most cases

759
00:30:13,120 --> 00:30:15,200
it's better to be a bit slower but you

760
00:30:15,200 --> 00:30:17,039
know where you are going instead of

761
00:30:17,039 --> 00:30:20,559
be going very very fast um here there

762
00:30:20,559 --> 00:30:22,080
are there are pros and cons

763
00:30:22,080 --> 00:30:25,200
as i mentioned uh i i don't

764
00:30:25,200 --> 00:30:28,240
think a lot of people will

765
00:30:28,240 --> 00:30:30,880
require this a lot of people are still

766
00:30:30,880 --> 00:30:31,679
used to

767
00:30:31,679 --> 00:30:34,799
doing this like downtime

768
00:30:34,799 --> 00:30:37,600
and now uptime again starting and

769
00:30:37,600 --> 00:30:39,919
stopping and starting the gvm again

770
00:30:39,919 --> 00:30:43,120
um but if you want to have

771
00:30:43,120 --> 00:30:46,159
code deployment with no downtime um i

772
00:30:46,159 --> 00:30:47,520
guess this is a pretty cool

773
00:30:47,520 --> 00:30:51,679
uh prototype that you can build on

774
00:30:51,679 --> 00:30:54,559
cool thank you very much cheers so much

775
00:30:54,559 --> 00:30:55,039
for

776
00:30:55,039 --> 00:30:58,000
joining us today thanks for having me

777
00:30:58,000 --> 00:31:00,000
hey no problem thanks so much and

778
00:31:00,000 --> 00:31:02,799
um uh in a second i'm going to bring in

779
00:31:02,799 --> 00:31:03,760
grace

780
00:31:03,760 --> 00:31:07,840
and thanks nicholas take care

