1
00:00:00,030 --> 00:00:02,460
alright everybody we are back and we are

2
00:00:02,460 --> 00:00:04,890
just about ready to bring in our next

3
00:00:04,890 --> 00:00:08,730
speaker so our next speaker is andreas

4
00:00:08,730 --> 00:00:09,360
fault

5
00:00:09,360 --> 00:00:12,330
and he is a managing consulting managing

6
00:00:12,330 --> 00:00:14,280
consultant excuse me for Nova tech

7
00:00:14,280 --> 00:00:17,070
consulting so andreas good to have you

8
00:00:17,070 --> 00:00:20,420
with us how are you oh I'm fine things

9
00:00:20,420 --> 00:00:24,900
how are you there we go I am doing well

10
00:00:24,900 --> 00:00:26,699
thank you so you're gonna tell us about

11
00:00:26,699 --> 00:00:29,939
some of the basics with oauth2 yes and

12
00:00:29,939 --> 00:00:33,450
open ID connect awesome well with that I

13
00:00:33,450 --> 00:00:35,370
will bring in your screen and we will

14
00:00:35,370 --> 00:00:37,380
send you on your way

15
00:00:37,380 --> 00:00:39,600
thank you very much remember folks enter

16
00:00:39,600 --> 00:00:43,260
your questions into the Q&A panel and at

17
00:00:43,260 --> 00:00:45,300
the end of Andreas's talk we'll have

18
00:00:45,300 --> 00:00:47,340
time to cover those questions all right

19
00:00:47,340 --> 00:00:50,340
with that address it's all yours yeah

20
00:00:50,340 --> 00:01:04,110
thank you very much so so so welcome to

21
00:01:04,110 --> 00:01:09,500
my talk and it should see my slides now

22
00:01:11,030 --> 00:01:15,689
okay we are talking about basics of our

23
00:01:15,689 --> 00:01:18,619
to and open IT connect

24
00:01:18,619 --> 00:01:22,650
so about me I'm andreas as already

25
00:01:22,650 --> 00:01:26,070
mentioned I am from Germany located at

26
00:01:26,070 --> 00:01:29,729
stood cuts working for a company called

27
00:01:29,729 --> 00:01:33,829
neurotic consulting I'm also on Twitter

28
00:01:33,829 --> 00:01:37,590
where you can contact me and and we also

29
00:01:37,590 --> 00:01:40,890
offer some some epic offerings like to

30
00:01:40,890 --> 00:01:42,509
open a to connect trainings and

31
00:01:42,509 --> 00:01:44,640
consulting and also security for

32
00:01:44,640 --> 00:01:48,270
developers trainings so that's all for

33
00:01:48,270 --> 00:01:51,659
my side so we have much to do and today

34
00:01:51,659 --> 00:01:53,880
so I will start with an introduction to

35
00:01:53,880 --> 00:01:58,740
o out - so our - is basically defined by

36
00:01:58,740 --> 00:02:02,130
- RFC's which stands for request for

37
00:02:02,130 --> 00:02:07,619
comments and I see six seven six six

38
00:02:07,619 --> 00:02:10,080
seven four nine or six seven five zero

39
00:02:10,080 --> 00:02:13,250
are the basic ones

40
00:02:13,250 --> 00:02:18,020
for all too so if you hurt maybe of or

41
00:02:18,020 --> 00:02:20,150
two you may ask yourself why do we

42
00:02:20,150 --> 00:02:22,910
really need our to and opener to connect

43
00:02:22,910 --> 00:02:25,790
so the first question would be do you

44
00:02:25,790 --> 00:02:29,180
really like implementing your own

45
00:02:29,180 --> 00:02:35,030
authentication so you're implementing

46
00:02:35,030 --> 00:02:38,390
your own authentication it's really hard

47
00:02:38,390 --> 00:02:41,030
so you have to deal with different

48
00:02:41,030 --> 00:02:43,280
clients like mobile clients like web

49
00:02:43,280 --> 00:02:46,970
clients maybe some devices you have to

50
00:02:46,970 --> 00:02:48,760
implement password policies so that

51
00:02:48,760 --> 00:02:52,209
people don't use just short passwords

52
00:02:52,209 --> 00:02:54,200
maybe you also have to introduce

53
00:02:54,200 --> 00:02:56,750
multi-factor authentication you have to

54
00:02:56,750 --> 00:02:59,920
deal with secure password storage with

55
00:02:59,920 --> 00:03:03,050
dealing with crypto like like different

56
00:03:03,050 --> 00:03:05,270
hashing algorithms which one is safe

57
00:03:05,270 --> 00:03:08,390
which one is not also with other flows

58
00:03:08,390 --> 00:03:12,410
reset password stuff around it so reset

59
00:03:12,410 --> 00:03:14,450
passwords password questions and all

60
00:03:14,450 --> 00:03:16,910
that stuff also brute force prevention

61
00:03:16,910 --> 00:03:20,090
is a big thing so so lots of stuff to do

62
00:03:20,090 --> 00:03:23,540
around a login which seems to be simple

63
00:03:23,540 --> 00:03:26,060
but you can do so many things really

64
00:03:26,060 --> 00:03:29,540
wrong and so it's not fun implementing

65
00:03:29,540 --> 00:03:33,200
your own authentication and even even

66
00:03:33,200 --> 00:03:40,459
it's not much fun if you want to do that

67
00:03:40,459 --> 00:03:44,360
in multiple way locations like for

68
00:03:44,360 --> 00:03:47,810
example in micro service architectures

69
00:03:47,810 --> 00:03:49,700
in micro service architectures you have

70
00:03:49,700 --> 00:03:53,750
to do that in for several times so you

71
00:03:53,750 --> 00:03:56,840
have several servers in place and for

72
00:03:56,840 --> 00:03:58,910
all these servers you have to implement

73
00:03:58,910 --> 00:04:01,400
the same authentication again and again

74
00:04:01,400 --> 00:04:04,340
and also your credentials flow to your

75
00:04:04,340 --> 00:04:07,370
clients flow to the resource server so

76
00:04:07,370 --> 00:04:09,320
they are spread everywhere these

77
00:04:09,320 --> 00:04:11,120
credentials and every resource server

78
00:04:11,120 --> 00:04:13,519
has to deal with password storage with

79
00:04:13,519 --> 00:04:16,970
the same mechanisms again and again so

80
00:04:16,970 --> 00:04:19,488
you implement it multiple times and in

81
00:04:19,488 --> 00:04:21,649
one resource server may be more secure

82
00:04:21,649 --> 00:04:24,860
than the other one for example so that's

83
00:04:24,860 --> 00:04:27,170
a big issue especially for Mike

84
00:04:27,170 --> 00:04:28,910
servus I texture nowadays we have

85
00:04:28,910 --> 00:04:33,470
multiple resource servers in place so

86
00:04:33,470 --> 00:04:35,840
that's the case for our to wear these

87
00:04:35,840 --> 00:04:39,920
sneaks in so this sentence is basically

88
00:04:39,920 --> 00:04:45,290
from the spec of IRC six seven four nine

89
00:04:45,290 --> 00:04:50,770
so it's about what 2.0 I mean it tells

90
00:04:50,770 --> 00:04:56,180
that the authorization framework enables

91
00:04:56,180 --> 00:04:58,490
a third party application to obtain

92
00:04:58,490 --> 00:05:01,610
limited access to an HTTP service either

93
00:05:01,610 --> 00:05:04,610
on behalf of a resource server or on its

94
00:05:04,610 --> 00:05:07,160
own behalf and so the important things

95
00:05:07,160 --> 00:05:09,530
are the third-party applications also

96
00:05:09,530 --> 00:05:11,510
another application like another client

97
00:05:11,510 --> 00:05:15,410
and you can give this client limited

98
00:05:15,410 --> 00:05:18,830
access and on behalf of a resource

99
00:05:18,830 --> 00:05:21,350
server the resource L owner is typically

100
00:05:21,350 --> 00:05:23,630
the user that is sitting in front of the

101
00:05:23,630 --> 00:05:27,410
computer and so that's the main idea of

102
00:05:27,410 --> 00:05:28,340
r2

103
00:05:28,340 --> 00:05:32,600
um so maybe our two brings in a new

104
00:05:32,600 --> 00:05:34,910
component called the authorization

105
00:05:34,910 --> 00:05:37,520
server so we already had a resource

106
00:05:37,520 --> 00:05:40,250
owner the clients we have to resell

107
00:05:40,250 --> 00:05:42,170
server now we also have the

108
00:05:42,170 --> 00:05:44,690
authorization server and we don't deal

109
00:05:44,690 --> 00:05:46,880
with passwords anymore in that new world

110
00:05:46,880 --> 00:05:51,950
we only deal with access tokens now so

111
00:05:51,950 --> 00:05:55,280
and the only location where you deal

112
00:05:55,280 --> 00:05:58,700
with credentials now is only the

113
00:05:58,700 --> 00:06:00,200
authorization server only the

114
00:06:00,200 --> 00:06:01,730
authorization server knows all the

115
00:06:01,730 --> 00:06:03,890
credentials the passwords that the user

116
00:06:03,890 --> 00:06:08,030
names and all that stuff so the resource

117
00:06:08,030 --> 00:06:10,370
server the client and the resource owner

118
00:06:10,370 --> 00:06:13,400
do not have to care about dealing with

119
00:06:13,400 --> 00:06:16,010
that their to passwords anymore so they

120
00:06:16,010 --> 00:06:18,290
just have an access token to access the

121
00:06:18,290 --> 00:06:21,860
resource server instead so this is a

122
00:06:21,860 --> 00:06:27,560
really basic protocol flow of our to the

123
00:06:27,560 --> 00:06:30,230
first step is always better resource

124
00:06:30,230 --> 00:06:35,480
owner authorizes the clients to use some

125
00:06:35,480 --> 00:06:37,880
some data of the resource or not I'm

126
00:06:37,880 --> 00:06:41,039
like his email address for example

127
00:06:41,039 --> 00:06:44,669
for this the recess owner thank you sir

128
00:06:44,669 --> 00:06:46,860
typically authenticates at the

129
00:06:46,860 --> 00:06:48,900
authorization server at the first place

130
00:06:48,900 --> 00:06:52,319
and then that what is called the

131
00:06:52,319 --> 00:06:55,229
authorization grant is kicked off so we

132
00:06:55,229 --> 00:06:57,270
will see that step by step now

133
00:06:57,270 --> 00:07:02,719
so the first step you may be recognized

134
00:07:02,809 --> 00:07:06,960
that you often have already used or our

135
00:07:06,960 --> 00:07:11,159
- without even noticing that it is Oda

136
00:07:11,159 --> 00:07:15,240
or - actually so so typically you do try

137
00:07:15,240 --> 00:07:17,399
to log in to get out for example with

138
00:07:17,399 --> 00:07:19,649
some demo github client as seen here on

139
00:07:19,649 --> 00:07:23,249
the left then you have to log in give

140
00:07:23,249 --> 00:07:27,719
username and passwords to get up that

141
00:07:27,719 --> 00:07:30,360
the second screen you notice is also a

142
00:07:30,360 --> 00:07:33,270
big benefit of using or - already you

143
00:07:33,270 --> 00:07:35,309
get usually the two-factor

144
00:07:35,309 --> 00:07:39,020
authentication for free if we use our -

145
00:07:39,020 --> 00:07:41,550
authorization service yet the usual

146
00:07:41,550 --> 00:07:43,740
implementation and bring in the - or

147
00:07:43,740 --> 00:07:46,800
factor authentication by default like

148
00:07:46,800 --> 00:07:48,930
github so you can use AUP key for

149
00:07:48,930 --> 00:07:51,499
example as a second factor as seen here

150
00:07:51,499 --> 00:07:56,009
you just use that and then you come to

151
00:07:56,009 --> 00:07:59,370
the final step of our - you have to

152
00:07:59,370 --> 00:08:02,550
confirm the consent page on that page

153
00:08:02,550 --> 00:08:06,830
you can still deny access to the client

154
00:08:06,830 --> 00:08:10,349
for your data or you can just prove that

155
00:08:10,349 --> 00:08:12,990
it's okay that the client uses your

156
00:08:12,990 --> 00:08:15,779
notification data or some personal user

157
00:08:15,779 --> 00:08:18,629
data of yours and if that is fine you

158
00:08:18,629 --> 00:08:20,399
can improve that and then you can just

159
00:08:20,399 --> 00:08:24,419
use the application so that's the basic

160
00:08:24,419 --> 00:08:27,389
basics of the first step to authorize

161
00:08:27,389 --> 00:08:30,689
the client in or - so next step would be

162
00:08:30,689 --> 00:08:33,000
that the client receives what is called

163
00:08:33,000 --> 00:08:36,990
an authorization grant authorization

164
00:08:36,990 --> 00:08:38,578
plant is the proof

165
00:08:38,578 --> 00:08:40,380
while the authorization server that

166
00:08:40,380 --> 00:08:43,139
Theresa's owner has authorized the

167
00:08:43,139 --> 00:08:47,010
client correctly to use his data and an

168
00:08:47,010 --> 00:08:49,529
authorization grant can be different

169
00:08:49,529 --> 00:08:51,480
things so that's the most interesting

170
00:08:51,480 --> 00:08:53,760
part of our - especially from the client

171
00:08:53,760 --> 00:08:54,690
side

172
00:08:54,690 --> 00:08:56,190
so it's typically credential

173
00:08:56,190 --> 00:08:57,870
representing the resource owners

174
00:08:57,870 --> 00:09:00,600
authorization and this is typically then

175
00:09:00,600 --> 00:09:02,639
exchanged for an access token in the

176
00:09:02,639 --> 00:09:05,279
next step and we come to the

177
00:09:05,279 --> 00:09:08,250
authorization grant types in some

178
00:09:08,250 --> 00:09:12,209
minutes and if you have this

179
00:09:12,209 --> 00:09:14,850
authorization grant and the clients can

180
00:09:14,850 --> 00:09:17,279
exchange this authorization grant to an

181
00:09:17,279 --> 00:09:20,730
access token also wire the authorization

182
00:09:20,730 --> 00:09:23,759
server on the right hand side you can

183
00:09:23,759 --> 00:09:27,149
see the response of that authorization

184
00:09:27,149 --> 00:09:29,759
server so what you get back is typically

185
00:09:29,759 --> 00:09:34,560
an access token of token Triborough so

186
00:09:34,560 --> 00:09:37,170
that's also standard with some expiry

187
00:09:37,170 --> 00:09:41,100
times or so one hour for example and

188
00:09:41,100 --> 00:09:42,899
your what you also get is a refresh

189
00:09:42,899 --> 00:09:49,589
token um a refresh token is used to

190
00:09:49,589 --> 00:09:51,540
always get a new access token if the

191
00:09:51,540 --> 00:09:54,839
access token is expired so imagine that

192
00:09:54,839 --> 00:10:00,120
the user the user experience will would

193
00:10:00,120 --> 00:10:02,579
be really bad if you have to have to

194
00:10:02,579 --> 00:10:05,430
login every five minutes because the

195
00:10:05,430 --> 00:10:09,600
access token is expired and the Refresh

196
00:10:09,600 --> 00:10:12,389
token deals to improve that user

197
00:10:12,389 --> 00:10:15,269
experience in that way that if the

198
00:10:15,269 --> 00:10:17,370
access token is expired you can use the

199
00:10:17,370 --> 00:10:19,620
Refresh token to send it or or Tracy

200
00:10:19,620 --> 00:10:21,990
authorization server and just exchange

201
00:10:21,990 --> 00:10:24,509
the Refresh token to a fresh access

202
00:10:24,509 --> 00:10:27,329
token again you never can access a

203
00:10:27,329 --> 00:10:29,189
resource server if using the Refresh

204
00:10:29,189 --> 00:10:33,120
token that's only used for exchanging

205
00:10:33,120 --> 00:10:36,779
into a new access token if you have the

206
00:10:36,779 --> 00:10:38,790
access token then on the final step the

207
00:10:38,790 --> 00:10:40,559
client can request the protected

208
00:10:40,559 --> 00:10:45,269
resource at a resource server which is

209
00:10:45,269 --> 00:10:48,540
called a tobira token put in the

210
00:10:48,540 --> 00:10:51,360
authorization header which is just a

211
00:10:51,360 --> 00:10:53,639
normal HTTP header that has to be

212
00:10:53,639 --> 00:10:56,269
transmitted to the resource server and

213
00:10:56,269 --> 00:10:59,790
after transmitting that bearer token in

214
00:10:59,790 --> 00:11:02,550
the header you can access what is the

215
00:11:02,550 --> 00:11:05,300
protected resource

216
00:11:06,750 --> 00:11:11,129
as I've mentioned the authorization

217
00:11:11,129 --> 00:11:14,970
server is the central part here or our

218
00:11:14,970 --> 00:11:17,699
two defines three different protocol

219
00:11:17,699 --> 00:11:20,129
endpoints that are provided usually by

220
00:11:20,129 --> 00:11:21,720
an authorization server you have the

221
00:11:21,720 --> 00:11:23,730
authorization endpoint which deals with

222
00:11:23,730 --> 00:11:26,069
all that authorization stuff with

223
00:11:26,069 --> 00:11:29,310
authorization grants handling and this

224
00:11:29,310 --> 00:11:31,379
typically only deals with the resource

225
00:11:31,379 --> 00:11:33,689
owner directly so no client interaction

226
00:11:33,689 --> 00:11:35,819
is involved here so no client will ever

227
00:11:35,819 --> 00:11:38,939
see username passwords and stuff like

228
00:11:38,939 --> 00:11:40,740
that so that's the target of that

229
00:11:40,740 --> 00:11:43,860
authorization endpoint when you exchange

230
00:11:43,860 --> 00:11:46,860
the grants into a token that's done by

231
00:11:46,860 --> 00:11:48,629
the token endpoint of the authorization

232
00:11:48,629 --> 00:11:51,660
server and the third one is it called

233
00:11:51,660 --> 00:11:54,779
token introspection endpoint this

234
00:11:54,779 --> 00:11:57,660
endpoint deals to validate access tokens

235
00:11:57,660 --> 00:11:59,399
that are issued by the authorization

236
00:11:59,399 --> 00:12:02,519
server so you can always validate sense

237
00:12:02,519 --> 00:12:04,470
the X is talking to that endpoint and

238
00:12:04,470 --> 00:12:10,889
check if that token is still well it so

239
00:12:10,889 --> 00:12:12,779
I talked about the authorization grant

240
00:12:12,779 --> 00:12:19,019
Ives for this I will just get back to

241
00:12:19,019 --> 00:12:23,490
some odd history so oh I initially

242
00:12:23,490 --> 00:12:27,660
started already in the year 2007 when

243
00:12:27,660 --> 00:12:33,990
odd version 1.0 was introduced it was

244
00:12:33,990 --> 00:12:37,399
then finally released as IFC in year

245
00:12:37,399 --> 00:12:41,730
2010 as revision a because they already

246
00:12:41,730 --> 00:12:44,189
detected some security problems in the

247
00:12:44,189 --> 00:12:47,790
original specification and two years

248
00:12:47,790 --> 00:12:51,899
later or out 2.0 already was introduced

249
00:12:51,899 --> 00:12:56,250
because what one had some really nasty

250
00:12:56,250 --> 00:12:59,459
drop back so it was used for for cases

251
00:12:59,459 --> 00:13:02,089
where it was never intended for us also

252
00:13:02,089 --> 00:13:06,089
r2 was invented to improved it a year

253
00:13:06,089 --> 00:13:09,540
back later we already got the fret motor

254
00:13:09,540 --> 00:13:12,740
for our two with new security

255
00:13:12,740 --> 00:13:20,309
remediations 2015 was introduction of

256
00:13:20,309 --> 00:13:21,000
the

257
00:13:21,000 --> 00:13:23,220
web talk which we'll be talking about in

258
00:13:23,220 --> 00:13:27,060
some minutes 2015 we got to prove key

259
00:13:27,060 --> 00:13:28,770
for code exchange we will also talk

260
00:13:28,770 --> 00:13:30,990
about it in some minutes and the most

261
00:13:30,990 --> 00:13:33,630
important part now which deals with the

262
00:13:33,630 --> 00:13:35,940
authorization grants now the next slide

263
00:13:35,940 --> 00:13:38,910
is the security best current practice

264
00:13:38,910 --> 00:13:42,090
which just was started last year and is

265
00:13:42,090 --> 00:13:46,380
in the final steps of specification this

266
00:13:46,380 --> 00:13:49,290
weeks now and also we will see a new

267
00:13:49,290 --> 00:13:53,100
allowed 2.1 specification coming out

268
00:13:53,100 --> 00:13:58,140
later this year and so that our 2.1

269
00:13:58,140 --> 00:14:00,120
authorization framework specification

270
00:14:00,120 --> 00:14:02,690
which is currently worked on really hard

271
00:14:02,690 --> 00:14:06,810
will bring some really important changes

272
00:14:06,810 --> 00:14:12,030
to or 2 so our terrorization code grants

273
00:14:12,030 --> 00:14:15,330
will be extended by what is called pixie

274
00:14:15,330 --> 00:14:17,970
proof key for kody exchange we will come

275
00:14:17,970 --> 00:14:21,330
to that in the next slide the implicit

276
00:14:21,330 --> 00:14:25,050
grant where you may know that this is

277
00:14:25,050 --> 00:14:27,600
used for for the single page application

278
00:14:27,600 --> 00:14:29,910
so far will be omitted from the spec

279
00:14:29,910 --> 00:14:32,339
because the implicit flow is regarded as

280
00:14:32,339 --> 00:14:33,480
the dangerous flow

281
00:14:33,480 --> 00:14:36,020
nowadays and should not be used anymore

282
00:14:36,020 --> 00:14:38,310
also the resource owner password

283
00:14:38,310 --> 00:14:41,130
credentials grant will be omitted from

284
00:14:41,130 --> 00:14:44,100
the spec so so the password credentials

285
00:14:44,100 --> 00:14:48,330
grant contradicts all the targets of our

286
00:14:48,330 --> 00:14:51,780
tool basically so it's it's the same

287
00:14:51,780 --> 00:14:54,780
flow as before all the credentials flow

288
00:14:54,780 --> 00:14:57,540
to each client with that flow and this

289
00:14:57,540 --> 00:14:59,640
is really bad so it's omitted from the

290
00:14:59,640 --> 00:15:02,850
spec and also redirect you or your eyes

291
00:15:02,850 --> 00:15:05,760
must be compared now by exact string

292
00:15:05,760 --> 00:15:08,580
matching there was lots of attacks going

293
00:15:08,580 --> 00:15:13,500
on on to by allowing wildcards and

294
00:15:13,500 --> 00:15:16,650
redirect your eyes which is always a bad

295
00:15:16,650 --> 00:15:20,700
idea also refresh tokens should either

296
00:15:20,700 --> 00:15:23,070
be Center constraint it by by a mutual

297
00:15:23,070 --> 00:15:26,130
TLS for example all should should be

298
00:15:26,130 --> 00:15:28,650
one-time usage only suits who also

299
00:15:28,650 --> 00:15:31,830
reduced attack surface and also pure

300
00:15:31,830 --> 00:15:33,990
tokens must not be sent in the query

301
00:15:33,990 --> 00:15:34,880
string of you

302
00:15:34,880 --> 00:15:39,050
anymore you can read all that in the new

303
00:15:39,050 --> 00:15:42,350
spec that is coming up I have put all

304
00:15:42,350 --> 00:15:45,079
the links in the slides will be shared

305
00:15:45,079 --> 00:15:50,089
later so this brings us to the new

306
00:15:50,089 --> 00:15:54,110
authorization grant as of or our 2.1 for

307
00:15:54,110 --> 00:15:57,759
each line type except that klein cretons

308
00:15:57,759 --> 00:16:01,279
blind Teresa's owner client we have the

309
00:16:01,279 --> 00:16:03,500
same authorization grant so that's quite

310
00:16:03,500 --> 00:16:06,170
simple now for all typical clients where

311
00:16:06,170 --> 00:16:08,389
user interaction is involved where the

312
00:16:08,389 --> 00:16:10,519
user has to type in username password

313
00:16:10,519 --> 00:16:11,540
and stuff like that

314
00:16:11,540 --> 00:16:14,930
always use authorization code plus that

315
00:16:14,930 --> 00:16:18,440
pixie edition and there you can also

316
00:16:18,440 --> 00:16:22,250
reuse refresh tokens with restriction

317
00:16:22,250 --> 00:16:26,050
that they are only usable for one time

318
00:16:26,050 --> 00:16:29,089
there's a special client type called the

319
00:16:29,089 --> 00:16:30,529
resource owner client where you

320
00:16:30,529 --> 00:16:33,920
typically have the client s resource

321
00:16:33,920 --> 00:16:36,350
owners also no user interaction involved

322
00:16:36,350 --> 00:16:38,300
this is used for machines and machine

323
00:16:38,300 --> 00:16:40,880
communications then you have to use the

324
00:16:40,880 --> 00:16:44,209
client cadenzas authorization so you

325
00:16:44,209 --> 00:16:46,579
only have two different authorization

326
00:16:46,579 --> 00:16:49,310
grants now authorization code with pixie

327
00:16:49,310 --> 00:16:55,699
and client code engines so that pixie

328
00:16:55,699 --> 00:16:57,949
stuff is an addition to the

329
00:16:57,949 --> 00:17:00,740
authorization code flow and that's

330
00:17:00,740 --> 00:17:03,079
because public clients like for example

331
00:17:03,079 --> 00:17:05,630
single page application which runs in

332
00:17:05,630 --> 00:17:11,240
the browser cannot hide static secrets

333
00:17:11,240 --> 00:17:13,490
so imagine you have the client secret

334
00:17:13,490 --> 00:17:16,069
which is required by the authorization

335
00:17:16,069 --> 00:17:19,669
code flow originally stored somewhere on

336
00:17:19,669 --> 00:17:21,530
your JavaScript code and the browser

337
00:17:21,530 --> 00:17:23,900
everybody could just wrap the client

338
00:17:23,900 --> 00:17:26,599
secret so it's not safe anymore and that

339
00:17:26,599 --> 00:17:29,780
proof key for code exchange just changes

340
00:17:29,780 --> 00:17:32,780
that it adds a dynamic secret instead

341
00:17:32,780 --> 00:17:34,880
instead of the static secret so you

342
00:17:34,880 --> 00:17:36,770
cannot grab the secret anymore

343
00:17:36,770 --> 00:17:39,940
it's just regenerated for each request

344
00:17:39,940 --> 00:17:45,559
in a new way so every client has to

345
00:17:45,559 --> 00:17:47,480
create a random key that called a code

346
00:17:47,480 --> 00:17:48,680
verifier

347
00:17:48,680 --> 00:17:51,530
and when requesting the authorization

348
00:17:51,530 --> 00:17:53,900
from the authorization server it has to

349
00:17:53,900 --> 00:17:56,930
hash that coat very far we shot 256

350
00:17:56,930 --> 00:17:59,060
which is called the code challenge send

351
00:17:59,060 --> 00:18:03,770
that together with with all the stuff

352
00:18:03,770 --> 00:18:07,220
that is used to get a authorization code

353
00:18:07,220 --> 00:18:09,560
and then when exchanging the

354
00:18:09,560 --> 00:18:12,050
authorization code to an access token

355
00:18:12,050 --> 00:18:14,510
then you have to present the original

356
00:18:14,510 --> 00:18:16,520
code verifier and authorization server

357
00:18:16,520 --> 00:18:19,400
just rehashes the code verifier and

358
00:18:19,400 --> 00:18:22,090
checks if it has the same code

359
00:18:22,090 --> 00:18:29,150
challenged and for the first request to

360
00:18:29,150 --> 00:18:34,280
show basically how the authorization

361
00:18:34,280 --> 00:18:36,440
code flow basically works I have some

362
00:18:36,440 --> 00:18:39,530
small demo prepared um mmm

363
00:18:39,530 --> 00:18:43,580
I hope you can see that I have a typical

364
00:18:43,580 --> 00:18:48,940
or 2.0 client the first step would be to

365
00:18:48,940 --> 00:18:51,350
initiate your authorization request to

366
00:18:51,350 --> 00:18:55,340
the authorization server so if I have in

367
00:18:55,340 --> 00:18:59,330
it just click that button to initiate an

368
00:18:59,330 --> 00:19:01,070
authorization request what you now see

369
00:19:01,070 --> 00:19:03,470
is that we get redirected through the

370
00:19:03,470 --> 00:19:05,870
authorization server which is a keyed

371
00:19:05,870 --> 00:19:13,190
lock in that example now just login into

372
00:19:13,190 --> 00:19:16,700
that server and what I get back now is

373
00:19:16,700 --> 00:19:19,520
that authorization code so you typically

374
00:19:19,520 --> 00:19:23,360
won't see this step in usual application

375
00:19:23,360 --> 00:19:25,550
so usual applications do that in one

376
00:19:25,550 --> 00:19:27,350
rush to get an authorization code back

377
00:19:27,350 --> 00:19:29,390
and then they exchange it in the next

378
00:19:29,390 --> 00:19:29,630
step

379
00:19:29,630 --> 00:19:33,770
already into an access tool in that demo

380
00:19:33,770 --> 00:19:36,380
client we can see it authorization code

381
00:19:36,380 --> 00:19:40,580
it's a really long random string and the

382
00:19:40,580 --> 00:19:42,890
important stuff here as well is that it

383
00:19:42,890 --> 00:19:45,200
only has is valid for two minutes

384
00:19:45,200 --> 00:19:47,780
exactly so because it's always done in

385
00:19:47,780 --> 00:19:50,360
one rush the authorization codes can

386
00:19:50,360 --> 00:19:53,450
have a really short lifetime so in the

387
00:19:53,450 --> 00:19:55,430
next step I just regress the token and

388
00:19:55,430 --> 00:19:59,600
what I get back is the access token in

389
00:19:59,600 --> 00:20:01,510
that case it's a JSON web token

390
00:20:01,510 --> 00:20:05,200
so so these are typical that these three

391
00:20:05,200 --> 00:20:07,600
steps which we have the authorization

392
00:20:07,600 --> 00:20:10,780
step arrghh and then that we get back to

393
00:20:10,780 --> 00:20:18,370
code and exchange that to a tote so that

394
00:20:18,370 --> 00:20:25,330
was basically allowed to r2 in fact it's

395
00:20:25,330 --> 00:20:27,340
not an authentication protocol and as

396
00:20:27,340 --> 00:20:31,540
always a lot of confusion going on by

397
00:20:31,540 --> 00:20:33,940
people misusing or r2 as an

398
00:20:33,940 --> 00:20:37,150
authentication protocol r2 does not

399
00:20:37,150 --> 00:20:41,320
specify anything to use for

400
00:20:41,320 --> 00:20:44,919
identification of an user so typically

401
00:20:44,919 --> 00:20:48,490
or r2 has no jason vector defined so

402
00:20:48,490 --> 00:20:50,500
JSON web tokens come into play with

403
00:20:50,500 --> 00:20:53,110
almighty connect almighty connects

404
00:20:53,110 --> 00:20:57,160
started to to make jason web tokens

405
00:20:57,160 --> 00:21:02,770
mandatory as ID talks so I have a sample

406
00:21:02,770 --> 00:21:07,240
prepared to to differentiate or two to

407
00:21:07,240 --> 00:21:10,270
open ID connect so all our two is

408
00:21:10,270 --> 00:21:12,400
typically compared to two what we call

409
00:21:12,400 --> 00:21:15,179
the valid parking model in the US and

410
00:21:15,179 --> 00:21:19,030
you have a famished delegation you just

411
00:21:19,030 --> 00:21:21,910
give your car key to a the servant that

412
00:21:21,910 --> 00:21:24,490
parks your car for just one reason to

413
00:21:24,490 --> 00:21:26,590
park your car so with a limited

414
00:21:26,590 --> 00:21:28,540
permission he cannot go on holiday with

415
00:21:28,540 --> 00:21:30,460
your car or to his own things with your

416
00:21:30,460 --> 00:21:33,580
car that's not allowed and the second

417
00:21:33,580 --> 00:21:36,040
case is open ID Connect so if you try to

418
00:21:36,040 --> 00:21:39,580
check-in in some hotel usually you have

419
00:21:39,580 --> 00:21:42,400
to show your identifications so it's not

420
00:21:42,400 --> 00:21:44,559
sufficient to give the car key to your

421
00:21:44,559 --> 00:21:47,679
that hotel registration to check-in so

422
00:21:47,679 --> 00:21:49,570
that's typically an open ID connect

423
00:21:49,570 --> 00:21:53,950
model for authentication and automatic

424
00:21:53,950 --> 00:21:56,740
Connect is based on our two

425
00:21:56,740 --> 00:21:59,559
authorization framework which makes it

426
00:21:59,559 --> 00:22:01,419
really important to understand or to

427
00:22:01,419 --> 00:22:05,020
basically and but it brings also into

428
00:22:05,020 --> 00:22:07,299
the table that JavaScript object signing

429
00:22:07,299 --> 00:22:09,700
and encryption stuff like JSON web

430
00:22:09,700 --> 00:22:12,370
tokens like the JSON web signature to

431
00:22:12,370 --> 00:22:15,929
sign a JSON web token or JSON web keys

432
00:22:15,929 --> 00:22:19,500
to get a public key to validate signed

433
00:22:19,500 --> 00:22:23,400
to chasten that talks for example and so

434
00:22:23,400 --> 00:22:25,860
what brings open ID connects so it's

435
00:22:25,860 --> 00:22:28,320
based on or to actually it bring has the

436
00:22:28,320 --> 00:22:30,420
same flows the authorization code club

437
00:22:30,420 --> 00:22:32,880
if that pixie stuff for example or the

438
00:22:32,880 --> 00:22:35,040
client credentials flow and the most

439
00:22:35,040 --> 00:22:37,470
important thing now what is edit is the

440
00:22:37,470 --> 00:22:40,260
ID token this token holds all the

441
00:22:40,260 --> 00:22:43,140
identity information of a user I mean

442
00:22:43,140 --> 00:22:47,760
and it's only to be used by the client

443
00:22:47,760 --> 00:22:50,130
side never sent ID talking studio

444
00:22:50,130 --> 00:22:53,280
beckons you still get an access token in

445
00:22:53,280 --> 00:22:56,640
addition to the ID token that is sent to

446
00:22:56,640 --> 00:22:59,040
the backends what you also get is the

447
00:22:59,040 --> 00:23:00,960
user end for endpoint so instead of

448
00:23:00,960 --> 00:23:03,270
putting all the stuff in the ID token

449
00:23:03,270 --> 00:23:06,120
you can you may also just use your

450
00:23:06,120 --> 00:23:08,549
access token and ask the user info

451
00:23:08,549 --> 00:23:11,400
endpoint about identity information we

452
00:23:11,400 --> 00:23:14,160
also have a hybrid grant flow

453
00:23:14,160 --> 00:23:17,220
introduced by up mighty connect which is

454
00:23:17,220 --> 00:23:19,710
basically a shortcut to the

455
00:23:19,710 --> 00:23:22,650
authorization code flow so you get the

456
00:23:22,650 --> 00:23:25,220
identity the ID token back without

457
00:23:25,220 --> 00:23:27,990
further redirection and the access token

458
00:23:27,990 --> 00:23:30,440
gets back with the redirected flow and

459
00:23:30,440 --> 00:23:33,530
you also have an open ID provider

460
00:23:33,530 --> 00:23:35,910
configuration information to look up all

461
00:23:35,910 --> 00:23:37,799
the configuration parameters you need to

462
00:23:37,799 --> 00:23:41,360
configure at line four of my reconnect

463
00:23:41,360 --> 00:23:45,030
so this is typically a JSON web token it

464
00:23:45,030 --> 00:23:47,250
says type JWT

465
00:23:47,250 --> 00:23:52,740
he has a key ID to to look up the

466
00:23:52,740 --> 00:23:55,950
correct public public key to validate

467
00:23:55,950 --> 00:23:58,260
such talking because typical JSON web

468
00:23:58,260 --> 00:24:01,830
token should also hold a signature to

469
00:24:01,830 --> 00:24:03,990
verify that the token is issued by the

470
00:24:03,990 --> 00:24:06,150
correct authorization server and nobody

471
00:24:06,150 --> 00:24:09,630
has changed the token in between the

472
00:24:09,630 --> 00:24:12,059
authorization server issuing and the

473
00:24:12,059 --> 00:24:14,730
resource server and you typically have

474
00:24:14,730 --> 00:24:17,130
some some entries like a subject which

475
00:24:17,130 --> 00:24:20,660
is the unique identification of a user

476
00:24:20,660 --> 00:24:23,340
audience and issuer for example the

477
00:24:23,340 --> 00:24:26,580
expiration dates issued at time for

478
00:24:26,580 --> 00:24:29,250
example and much more you can basically

479
00:24:29,250 --> 00:24:31,320
everything in the payload of such

480
00:24:31,320 --> 00:24:33,030
adjacent backtalk you need like

481
00:24:33,030 --> 00:24:35,460
authorization information email

482
00:24:35,460 --> 00:24:37,530
addresses first name last name and or

483
00:24:37,530 --> 00:24:43,620
what else in up mighty connect and also

484
00:24:43,620 --> 00:24:45,690
into r2 you can basically use two types

485
00:24:45,690 --> 00:24:48,900
of tokens for access token so ID tokens

486
00:24:48,900 --> 00:24:50,700
are always chasing web tokens but for

487
00:24:50,700 --> 00:24:52,980
access token you can also use reference

488
00:24:52,980 --> 00:24:57,710
tokens or you might use JSON web tokens

489
00:24:57,710 --> 00:25:00,720
but a good thing for for JSON web tokens

490
00:25:00,720 --> 00:25:03,840
are that you can be validated offline so

491
00:25:03,840 --> 00:25:05,190
you don't have to contact the

492
00:25:05,190 --> 00:25:07,590
authorization server again the opaque

493
00:25:07,590 --> 00:25:09,600
token always needs the authorization

494
00:25:09,600 --> 00:25:13,890
server to be validated um also a good

495
00:25:13,890 --> 00:25:16,080
advantage for JSON web tokens they are

496
00:25:16,080 --> 00:25:18,690
not protocol agnostic so so you can even

497
00:25:18,690 --> 00:25:23,150
send a JSON web token to some-some BPM

498
00:25:23,150 --> 00:25:26,010
process engine or you can send it to to

499
00:25:26,010 --> 00:25:29,850
to Kafka or what else that's not

500
00:25:29,850 --> 00:25:31,770
possible for packet ohms because they

501
00:25:31,770 --> 00:25:34,440
always have to be validated or HTTP

502
00:25:34,440 --> 00:25:40,650
somehow so that brings us already to the

503
00:25:40,650 --> 00:25:44,040
last page to dirty up my reconnect or to

504
00:25:44,040 --> 00:25:46,920
summary so always use Open ID Connect if

505
00:25:46,920 --> 00:25:50,340
you want to achieve authentication not

506
00:25:50,340 --> 00:25:52,620
only the delegated permission model of

507
00:25:52,620 --> 00:25:57,120
or - so with with an end user always use

508
00:25:57,120 --> 00:25:59,340
authorization code flow with that pixie

509
00:25:59,340 --> 00:26:02,100
edition without an end user in place

510
00:26:02,100 --> 00:26:03,570
before machine to machine communication

511
00:26:03,570 --> 00:26:06,930
used language in Seussville do not use

512
00:26:06,930 --> 00:26:09,030
implicit or whistles or no password

513
00:26:09,030 --> 00:26:11,070
grunts anymore it's not advised to use

514
00:26:11,070 --> 00:26:12,270
these anymore

515
00:26:12,270 --> 00:26:15,870
ID tongs must must be Jason web talks

516
00:26:15,870 --> 00:26:18,810
access tokens may be JSON web tokens and

517
00:26:18,810 --> 00:26:21,990
all also important always validate

518
00:26:21,990 --> 00:26:24,120
tokens and keep their lifetime really

519
00:26:24,120 --> 00:26:26,460
short so access tokens typically only

520
00:26:26,460 --> 00:26:31,110
have a lifetime of five minutes so thank

521
00:26:31,110 --> 00:26:36,030
you very much so you have any questions

522
00:26:36,030 --> 00:26:38,790
Thank You Andrea so yeah we've got a few

523
00:26:38,790 --> 00:26:40,980
minutes for questions we've got a couple

524
00:26:40,980 --> 00:26:42,919
here

525
00:26:42,919 --> 00:26:46,080
four scenarios where a redirect is not

526
00:26:46,080 --> 00:26:48,659
an option what's the answer from the new

527
00:26:48,659 --> 00:26:51,210
spec if they remove the resource owner

528
00:26:51,210 --> 00:26:58,230
password credentials grant yes that's a

529
00:26:58,230 --> 00:27:02,250
big issue yes that depends also if you

530
00:27:02,250 --> 00:27:04,860
need a user integer into place if you

531
00:27:04,860 --> 00:27:06,179
have a machine to machine communication

532
00:27:06,179 --> 00:27:08,730
then just use the language engine so

533
00:27:08,730 --> 00:27:13,559
that does not need any redirection so

534
00:27:13,559 --> 00:27:17,580
but typically you can only use

535
00:27:17,580 --> 00:27:20,370
authorization code flow an hour these

536
00:27:20,370 --> 00:27:22,649
days so which has two redirects or so

537
00:27:22,649 --> 00:27:26,340
that's the bad thing it depends on what

538
00:27:26,340 --> 00:27:29,159
client you actually want to use for for

539
00:27:29,159 --> 00:27:31,559
that or two things also if you have a

540
00:27:31,559 --> 00:27:36,720
really old legacy system then if you can

541
00:27:36,720 --> 00:27:38,789
take the risk you may still use the

542
00:27:38,789 --> 00:27:41,490
password credentials flow but that's the

543
00:27:41,490 --> 00:27:44,870
only really the only exception to use it

544
00:27:44,870 --> 00:27:48,659
okay another question that came in from

545
00:27:48,659 --> 00:27:51,570
a pen testers point of view what are

546
00:27:51,570 --> 00:27:53,279
some of the different test cases or

547
00:27:53,279 --> 00:27:56,039
attacks we can perform to test off and

548
00:27:56,039 --> 00:28:01,080
open ID implementations oh that's really

549
00:28:01,080 --> 00:28:08,490
hot and regular master classes right yes

550
00:28:08,490 --> 00:28:11,279
so the spec groups itself did a really

551
00:28:11,279 --> 00:28:14,879
great job to to to do automatic

552
00:28:14,879 --> 00:28:19,409
verification models for checking if the

553
00:28:19,409 --> 00:28:23,220
our two model is secure and so that's

554
00:28:23,220 --> 00:28:26,580
done pretty much these days so they want

555
00:28:26,580 --> 00:28:28,559
to make sure that the next iteration of

556
00:28:28,559 --> 00:28:33,210
our 2.1 is not becoming insecure in two

557
00:28:33,210 --> 00:28:36,600
more months again so that's why they put

558
00:28:36,600 --> 00:28:38,580
in an automatic verification model

559
00:28:38,580 --> 00:28:41,039
already in place maybe go to it at

560
00:28:41,039 --> 00:28:43,049
especially it's like like Daniel fete

561
00:28:43,049 --> 00:28:45,419
for example which is a German guy which

562
00:28:45,419 --> 00:28:48,480
is very nice we did all that model stuff

563
00:28:48,480 --> 00:28:50,879
and you can ask him for example so just

564
00:28:50,879 --> 00:28:52,830
contact Daniel Fett for example he's

565
00:28:52,830 --> 00:28:54,490
also on Twitter

566
00:28:54,490 --> 00:28:56,830
okay and I know - you mentioned the

567
00:28:56,830 --> 00:28:58,450
threat model before that's out there I

568
00:28:58,450 --> 00:29:01,180
think just that might be a good option

569
00:29:01,180 --> 00:29:02,530
for people to take a look at that threat

570
00:29:02,530 --> 00:29:04,060
model - and I may give you some ideas

571
00:29:04,060 --> 00:29:05,650
from a pen testing perspective where you

572
00:29:05,650 --> 00:29:07,690
want to look yes the doctor better

573
00:29:07,690 --> 00:29:10,450
option is that that new security best

574
00:29:10,450 --> 00:29:12,970
practice mod documentation that they put

575
00:29:12,970 --> 00:29:17,530
out awesome another question this one

576
00:29:17,530 --> 00:29:21,280
comes from slack hey Andreas where

577
00:29:21,280 --> 00:29:23,680
should the refresh token be stored it

578
00:29:23,680 --> 00:29:25,830
should not be on the client right

579
00:29:25,830 --> 00:29:29,830
because if so I can see a need for an

580
00:29:29,830 --> 00:29:32,170
access took or no need for an access

581
00:29:32,170 --> 00:29:35,080
token at all if I have both am I not

582
00:29:35,080 --> 00:29:38,350
seeing something yes that's a good

583
00:29:38,350 --> 00:29:40,630
question so browsers are not a good

584
00:29:40,630 --> 00:29:43,420
place to store secrets anymore so so

585
00:29:43,420 --> 00:29:46,660
that's why we also look for other

586
00:29:46,660 --> 00:29:48,760
patterns like like a back-end for

587
00:29:48,760 --> 00:29:50,440
front-end pattern for example you might

588
00:29:50,440 --> 00:29:52,750
have seen that pattern already so so

589
00:29:52,750 --> 00:29:54,880
where the backend deals with that whole

590
00:29:54,880 --> 00:29:57,910
'quran flow and you only have a client

591
00:29:57,910 --> 00:30:01,660
which has the same site cookie which

592
00:30:01,660 --> 00:30:06,100
then is transmitted to the backend for

593
00:30:06,100 --> 00:30:10,000
front-end so I'll indicate so that's the

594
00:30:10,000 --> 00:30:11,710
typical pattern to solve that problem

595
00:30:11,710 --> 00:30:20,860
nowadays okay let's just disappeared if

596
00:30:20,860 --> 00:30:23,110
I have an app like Facebook it can't be

597
00:30:23,110 --> 00:30:25,690
another way to authenticate the user if

598
00:30:25,690 --> 00:30:27,940
he doesn't have his credential I can use

599
00:30:27,940 --> 00:30:31,980
password grant type for this case I

600
00:30:31,980 --> 00:30:35,790
don't know if I got this right

601
00:30:35,790 --> 00:30:38,380
yeah I think they're asking can I use a

602
00:30:38,380 --> 00:30:41,610
password grant type

603
00:30:43,570 --> 00:30:45,039
I'm not totally sure if they're asking

604
00:30:45,039 --> 00:30:49,600
about using OAuth as authentication or

605
00:30:49,600 --> 00:30:51,369
if this is a question about open ID

606
00:30:51,369 --> 00:30:53,729
maybe while we take that one too slack

607
00:30:53,729 --> 00:30:57,039
last question then I think before we let

608
00:30:57,039 --> 00:31:00,940
you go I can we use open HSM solution to

609
00:31:00,940 --> 00:31:07,149
store the credentials you mean that the

610
00:31:07,149 --> 00:31:08,619
credentials on the authorization server

611
00:31:08,619 --> 00:31:13,989
site yeah yeah the storing the

612
00:31:13,989 --> 00:31:16,690
credentials this is it implementation

613
00:31:16,690 --> 00:31:18,460
detail of the authorization server also

614
00:31:18,460 --> 00:31:22,659
so if you have for example use active

615
00:31:22,659 --> 00:31:25,659
directory on Microsoft Azure there I'm

616
00:31:25,659 --> 00:31:28,299
sure they store that in some some HSM

617
00:31:28,299 --> 00:31:32,440
already ok awesome so I'm sure you can

618
00:31:32,440 --> 00:31:33,849
be available in slack for a little while

619
00:31:33,849 --> 00:31:36,129
yes yeah of course yeah

620
00:31:36,129 --> 00:31:38,320
so we've got a break coming up now folks

621
00:31:38,320 --> 00:31:40,779
and you can definitely talk with Andres

622
00:31:40,779 --> 00:31:42,159
more in slack I know there's some

623
00:31:42,159 --> 00:31:44,619
conversation going on there already one

624
00:31:44,619 --> 00:31:46,869
last thing to the person who mentioned I

625
00:31:46,869 --> 00:31:48,429
had the question about pen testing

626
00:31:48,429 --> 00:31:50,529
before we do have a talk coming up later

627
00:31:50,529 --> 00:31:53,830
today that is going to discuss some of

628
00:31:53,830 --> 00:31:57,099
the ways to hack or off and so perhaps

629
00:31:57,099 --> 00:31:58,960
that might be another talk for you to

630
00:31:58,960 --> 00:32:00,999
check out that might have some helpful

631
00:32:00,999 --> 00:32:03,580
information for you there is proactive

632
00:32:03,580 --> 00:32:06,389
it a more attacking stuff on that

633
00:32:06,389 --> 00:32:07,629
perfect

634
00:32:07,629 --> 00:32:11,049
now all right and various thank you so

635
00:32:11,049 --> 00:32:12,849
much and thanks everybody we are gonna

636
00:32:12,849 --> 00:32:14,830
go to break here and we will come back

637
00:32:14,830 --> 00:32:15,609
soon

638
00:32:15,609 --> 00:32:18,749
yeah bye

