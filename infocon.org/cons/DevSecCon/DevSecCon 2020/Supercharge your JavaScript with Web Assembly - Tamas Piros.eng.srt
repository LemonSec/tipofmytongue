1
00:00:00,000 --> 00:00:03,300
that's how you I am well thank you how

2
00:00:03,300 --> 00:00:04,680
are you excellent

3
00:00:04,680 --> 00:00:06,450
I'm not too bad thank you doing doing

4
00:00:06,450 --> 00:00:08,370
well it seems to be going well so far so

5
00:00:08,370 --> 00:00:11,219
yeah Tomas is a developer advocate at

6
00:00:11,219 --> 00:00:13,170
Cloud nari cloud Nair is actually

7
00:00:13,170 --> 00:00:14,759
something we use it's Nick as well so

8
00:00:14,759 --> 00:00:17,070
we're we're big fans of everything you

9
00:00:17,070 --> 00:00:20,460
do at Cloud nari and and yeah nobody

10
00:00:20,460 --> 00:00:22,320
give too much of an intro tell us cuz I

11
00:00:22,320 --> 00:00:24,480
know it's up against the clock so I'll

12
00:00:24,480 --> 00:00:27,269
hard straight over to you and looking

13
00:00:27,269 --> 00:00:29,820
forward to the session all right thank

14
00:00:29,820 --> 00:00:31,650
you very much and also thank you for

15
00:00:31,650 --> 00:00:35,579
this opportunity so while I'm sharing my

16
00:00:35,579 --> 00:00:40,860
screen here is that visible consuming

17
00:00:40,860 --> 00:00:46,050
screen yes can I think and is this to

18
00:00:46,050 --> 00:00:46,649
the working

19
00:00:46,649 --> 00:00:49,980
hopefully it is okay so as I said thank

20
00:00:49,980 --> 00:00:52,079
you very much for this opportunity and

21
00:00:52,079 --> 00:00:54,539
I'm here to talk to you about JavaScript

22
00:00:54,539 --> 00:00:56,309
and this thing called web assembly so

23
00:00:56,309 --> 00:00:58,079
the greens take a look at what you can

24
00:00:58,079 --> 00:00:59,520
do with the combination of these two

25
00:00:59,520 --> 00:01:00,989
languages so I have a quick

26
00:01:00,989 --> 00:01:03,239
introductions we just reintroduce myself

27
00:01:03,239 --> 00:01:04,979
release my name is Tomas I work as a

28
00:01:04,979 --> 00:01:06,840
developer evangelist at the company

29
00:01:06,840 --> 00:01:09,330
called cloud meri I also run a training

30
00:01:09,330 --> 00:01:10,860
business and it's happened to be a

31
00:01:10,860 --> 00:01:12,570
Google developer expert in web

32
00:01:12,570 --> 00:01:14,820
technology you can also find me on

33
00:01:14,820 --> 00:01:17,280
Twitter you see the Twitter handle just

34
00:01:17,280 --> 00:01:19,439
below my picture here I'm going to share

35
00:01:19,439 --> 00:01:21,240
the slides and some additional resources

36
00:01:21,240 --> 00:01:23,400
about my talk on Twitter so please

37
00:01:23,400 --> 00:01:25,680
follow me if you'd like to get access to

38
00:01:25,680 --> 00:01:29,509
that now before we start thought to

39
00:01:29,509 --> 00:01:32,490
share a joke with you okay so the

40
00:01:32,490 --> 00:01:34,920
question is why do you program is leave

41
00:01:34,920 --> 00:01:37,530
their dope the answer to that question

42
00:01:37,530 --> 00:01:41,189
is because they don't get a raise now it

43
00:01:41,189 --> 00:01:43,259
may be very early for some of you or too

44
00:01:43,259 --> 00:01:44,670
late for some of you and you may not

45
00:01:44,670 --> 00:01:48,380
getting this joke arrays and arrays so

46
00:01:48,380 --> 00:01:51,600
that was that was joke here anyway so

47
00:01:51,600 --> 00:01:53,280
what we're going to talk about today is

48
00:01:53,280 --> 00:01:55,020
really you know the web platform and

49
00:01:55,020 --> 00:01:56,579
however somebody

50
00:01:56,579 --> 00:01:58,710
arrived to the scene and how it's

51
00:01:58,710 --> 00:02:01,710
changing the way we can create web

52
00:02:01,710 --> 00:02:04,710
applications so this image you see on my

53
00:02:04,710 --> 00:02:07,560
slide here is how the web platform used

54
00:02:07,560 --> 00:02:11,160
to look like in 2018 before so think

55
00:02:11,160 --> 00:02:13,460
about the web Clough was having these

56
00:02:13,460 --> 00:02:16,010
components we have a virtual machine and

57
00:02:16,010 --> 00:02:18,500
we have the Web API so the web api's

58
00:02:18,500 --> 00:02:20,510
would be the standard api's that you'd

59
00:02:20,510 --> 00:02:22,910
be using from javascript things like the

60
00:02:22,910 --> 00:02:25,340
fetch API for example and then you have

61
00:02:25,340 --> 00:02:26,960
the virtual machine inside the browser

62
00:02:26,960 --> 00:02:29,660
which was able to execute your

63
00:02:29,660 --> 00:02:32,300
JavaScript code and tradition is

64
00:02:32,300 --> 00:02:35,540
speaking the web aware of three

65
00:02:35,540 --> 00:02:37,480
languages so you can run JavaScript

66
00:02:37,480 --> 00:02:40,310
browsers also understood HTML and CSS

67
00:02:40,310 --> 00:02:42,230
and that was it it was the web platform

68
00:02:42,230 --> 00:02:47,780
in 2018 and as we know the web itself is

69
00:02:47,780 --> 00:02:50,210
progressing at an incredible pace it has

70
00:02:50,210 --> 00:02:53,420
lots of new framework lots of new things

71
00:02:53,420 --> 00:02:56,360
that you can in the web and JavaScript

72
00:02:56,360 --> 00:02:59,690
the language itself is also progressing

73
00:02:59,690 --> 00:03:01,970
at an incredible pace so there's lots of

74
00:03:01,970 --> 00:03:04,640
you know new ways to write javascript

75
00:03:04,640 --> 00:03:06,500
code in the previous talk we just heard

76
00:03:06,500 --> 00:03:08,390
about you know async await and how

77
00:03:08,390 --> 00:03:10,730
promises were before that's we promised

78
00:03:10,730 --> 00:03:12,740
these async await and you know who knows

79
00:03:12,740 --> 00:03:14,870
what's going to be the next big thing

80
00:03:14,870 --> 00:03:18,200
for JavaScript but it has certain limits

81
00:03:18,200 --> 00:03:21,440
right javascript is really just a

82
00:03:21,440 --> 00:03:23,480
scripting language for the web and

83
00:03:23,480 --> 00:03:25,610
therefore it has a lot of limitation as

84
00:03:25,610 --> 00:03:27,890
I said because of the ecosystem is

85
00:03:27,890 --> 00:03:32,990
growing we are getting much better our

86
00:03:32,990 --> 00:03:34,280
JavaScript is getting much better

87
00:03:34,280 --> 00:03:36,410
capabilities but still there are lots of

88
00:03:36,410 --> 00:03:38,090
things that we can do with JavaScript

89
00:03:38,090 --> 00:03:40,940
for example it's very difficult to

90
00:03:40,940 --> 00:03:44,270
achieve low-level tasks right so if you

91
00:03:44,270 --> 00:03:48,500
want to do some low-level processor

92
00:03:48,500 --> 00:03:50,330
intensive tasks each other script it's

93
00:03:50,330 --> 00:03:51,470
really going to be very difficult

94
00:03:51,470 --> 00:03:54,200
because javascript was a language I was

95
00:03:54,200 --> 00:03:55,910
created for something else

96
00:03:55,910 --> 00:03:58,520
it's not for you know memory management

97
00:03:58,520 --> 00:04:01,370
and doing low-level tasks and therefore

98
00:04:01,370 --> 00:04:03,350
if you want to attempt that because

99
00:04:03,350 --> 00:04:04,790
there are some things that you can do

100
00:04:04,790 --> 00:04:07,640
but you're going to pay a performance

101
00:04:07,640 --> 00:04:09,230
cost because you're going to introduce

102
00:04:09,230 --> 00:04:11,450
some performance impacts which you know

103
00:04:11,450 --> 00:04:13,340
you'd rather not do in a web-based

104
00:04:13,340 --> 00:04:16,670
environment so what is the solution well

105
00:04:16,670 --> 00:04:18,709
there's this thing called web assembly

106
00:04:18,709 --> 00:04:21,560
which was created in 2015 and as you can

107
00:04:21,560 --> 00:04:23,600
see I put asterisk on the slide here

108
00:04:23,600 --> 00:04:27,370
because before web assembly in 2000

109
00:04:27,370 --> 00:04:30,790
and 13 Mozilla created this thing with a

110
00:04:30,790 --> 00:04:35,949
s MJ s and s le jia's allowed people to

111
00:04:35,949 --> 00:04:39,220
run their application written in the C

112
00:04:39,220 --> 00:04:41,800
language as a web application

113
00:04:41,800 --> 00:04:44,770
this is predating webassembly because

114
00:04:44,770 --> 00:04:46,510
this was created before and this allowed

115
00:04:46,510 --> 00:04:48,430
a very similar functionality to what

116
00:04:48,430 --> 00:04:51,220
webassembly can allow us to do today and

117
00:04:51,220 --> 00:04:54,010
what's great and if you've been

118
00:04:54,010 --> 00:04:57,100
following the news surrounding web

119
00:04:57,100 --> 00:04:59,740
assembly is the fact that you know this

120
00:04:59,740 --> 00:05:02,530
is very recent actually so last year in

121
00:05:02,530 --> 00:05:04,060
this syllabus at the end of the year

122
00:05:04,060 --> 00:05:07,360
weber Sally became a w3c recommendation

123
00:05:07,360 --> 00:05:09,760
which means that now web assembly is

124
00:05:09,760 --> 00:05:11,860
something official that's a spec you

125
00:05:11,860 --> 00:05:14,050
know people can work on this and it's

126
00:05:14,050 --> 00:05:17,580
all part of the official web ecosystem

127
00:05:17,580 --> 00:05:20,110
so what is web assembly well I have this

128
00:05:20,110 --> 00:05:24,280
description from Monica's website which

129
00:05:24,280 --> 00:05:26,650
says web assembly is a low-level

130
00:05:26,650 --> 00:05:28,960
assembly like language a compact binary

131
00:05:28,960 --> 00:05:30,760
format that runs with near native

132
00:05:30,760 --> 00:05:32,860
performance and provides languages such

133
00:05:32,860 --> 00:05:35,710
as C C++ and rust with a compilation

134
00:05:35,710 --> 00:05:37,750
target so that they can run on the web

135
00:05:37,750 --> 00:05:41,860
so this is a very difficult explanation

136
00:05:41,860 --> 00:05:44,020
whatever assembly is and I've come up

137
00:05:44,020 --> 00:05:46,599
with a much simpler one on my own which

138
00:05:46,599 --> 00:05:48,250
I'm going to share with you and it just

139
00:05:48,250 --> 00:05:50,919
says you can run native apps on the web

140
00:05:50,919 --> 00:05:54,039
ok so this is the true power of assembly

141
00:05:54,039 --> 00:05:58,090
we can have applications or libraries of

142
00:05:58,090 --> 00:06:00,460
functionality written in a lower level

143
00:06:00,460 --> 00:06:04,260
language such as C or C++ and we and now

144
00:06:04,260 --> 00:06:06,639
execute that or you use those functions

145
00:06:06,639 --> 00:06:10,930
and run them in a web context ok so

146
00:06:10,930 --> 00:06:15,460
that's the essence of assembly so what

147
00:06:15,460 --> 00:06:17,199
some of the functions or this function

148
00:06:17,199 --> 00:06:20,440
that you create in C or C++ can be

149
00:06:20,440 --> 00:06:22,599
exposed to JavaScript so what that means

150
00:06:22,599 --> 00:06:25,300
is you have a library that does say

151
00:06:25,300 --> 00:06:28,120
image manipulation using C it's either

152
00:06:28,120 --> 00:06:29,800
something that you've brought or you

153
00:06:29,800 --> 00:06:31,990
want to leverage someone else's library

154
00:06:31,990 --> 00:06:34,599
and functions you can select what

155
00:06:34,599 --> 00:06:36,669
functions are then going to be exposed

156
00:06:36,669 --> 00:06:39,520
to JavaScript and in your way

157
00:06:39,520 --> 00:06:41,680
contacts in your HTML page inside the

158
00:06:41,680 --> 00:06:44,139
script element using standard JavaScript

159
00:06:44,139 --> 00:06:46,210
you can actually invoke that function

160
00:06:46,210 --> 00:06:48,789
plus parameters bit and do additional

161
00:06:48,789 --> 00:06:51,039
things and I prepared a few demos who've

162
00:06:51,039 --> 00:06:54,490
been to take a look at these as well now

163
00:06:54,490 --> 00:06:58,750
there's one thing that I've seen to pop

164
00:06:58,750 --> 00:07:00,940
up every now and then here and their own

165
00:07:00,940 --> 00:07:02,949
on the Internet in in various blog posts

166
00:07:02,949 --> 00:07:06,009
and and and other articles and there are

167
00:07:06,009 --> 00:07:07,780
some people claiming that web assembly

168
00:07:07,780 --> 00:07:09,669
is going to replace JavaScript right so

169
00:07:09,669 --> 00:07:11,530
we have to forget about javascript and

170
00:07:11,530 --> 00:07:13,720
web assembly is the next big thing now

171
00:07:13,720 --> 00:07:16,539
that's not really true actually it's

172
00:07:16,539 --> 00:07:19,270
actually slightly incorrect as well

173
00:07:19,270 --> 00:07:22,150
because web assembly was not created to

174
00:07:22,150 --> 00:07:25,060
to replace JavaScript or to eliminate

175
00:07:25,060 --> 00:07:28,060
JavaScript web assembly is great for

176
00:07:28,060 --> 00:07:30,880
enhancing and for augmenting JavaScript

177
00:07:30,880 --> 00:07:33,759
basically games extra powers to

178
00:07:33,759 --> 00:07:35,740
JavaScript which the JavaScript language

179
00:07:35,740 --> 00:07:39,909
by design does not have okay so whoever

180
00:07:39,909 --> 00:07:41,830
some is not here to replace in

181
00:07:41,830 --> 00:07:45,460
JavaScript so we had a look at how the

182
00:07:45,460 --> 00:07:48,130
web platform used to look like in 2018

183
00:07:48,130 --> 00:07:50,110
how does it look today

184
00:07:50,110 --> 00:07:52,509
so today we still have the web api try

185
00:07:52,509 --> 00:07:54,400
so there's the big list of web api s and

186
00:07:54,400 --> 00:07:56,469
we also have the virtual machine inside

187
00:07:56,469 --> 00:07:58,150
the browser that is capable of executing

188
00:07:58,150 --> 00:08:01,930
JavaScript code but today that virtual

189
00:08:01,930 --> 00:08:06,639
machine is also capable of executing web

190
00:08:06,639 --> 00:08:09,849
assembly code okay so now as of today

191
00:08:09,849 --> 00:08:12,940
the web officially supports these four

192
00:08:12,940 --> 00:08:14,680
languages or understands these four

193
00:08:14,680 --> 00:08:18,190
languages HTML CSS JavaScript and web

194
00:08:18,190 --> 00:08:21,099
assembly is this is official and of

195
00:08:21,099 --> 00:08:24,310
course if we have web assembly we must

196
00:08:24,310 --> 00:08:26,919
have something to work with the web

197
00:08:26,919 --> 00:08:28,569
assembly functions and there's this

198
00:08:28,569 --> 00:08:30,340
thing called the web assembly JavaScript

199
00:08:30,340 --> 00:08:34,029
API okay and it has a lot of methods and

200
00:08:34,029 --> 00:08:36,429
all of these methods allow us to work

201
00:08:36,429 --> 00:08:39,309
with web assembly code and we can do

202
00:08:39,309 --> 00:08:41,049
things like loading a web assembly

203
00:08:41,049 --> 00:08:43,120
module we can create a new member in

204
00:08:43,120 --> 00:08:46,000
table instances and those are so

205
00:08:46,000 --> 00:08:48,430
basically module represents a bar

206
00:08:48,430 --> 00:08:50,800
assembly binary that has been compiled

207
00:08:50,800 --> 00:08:53,660
by the browser into executable machine

208
00:08:53,660 --> 00:08:55,610
dude let me have the memory and table

209
00:08:55,610 --> 00:08:56,779
earrings and say so the memories that

210
00:08:56,779 --> 00:08:58,879
resizable arrayed of her and the table

211
00:08:58,879 --> 00:09:01,040
is a resized type of array of references

212
00:09:01,040 --> 00:09:04,329
in other words a table would contain

213
00:09:04,329 --> 00:09:07,220
functions for example from webassembly

214
00:09:07,220 --> 00:09:09,769
that we want to pass on to to our

215
00:09:09,769 --> 00:09:12,560
JavaScript code and Devo kit for example

216
00:09:12,560 --> 00:09:15,139
and then what we also have is this

217
00:09:15,139 --> 00:09:19,790
instance which is just a a module that

218
00:09:19,790 --> 00:09:22,910
is combined or paired with state found

219
00:09:22,910 --> 00:09:24,800
in the memory and a table and what's

220
00:09:24,800 --> 00:09:27,110
really interesting about this instance

221
00:09:27,110 --> 00:09:28,850
we're talking about an instance of a web

222
00:09:28,850 --> 00:09:32,240
assembly script essentially is that it

223
00:09:32,240 --> 00:09:35,509
acts just like a JavaScript module would

224
00:09:35,509 --> 00:09:38,269
act okay so it has kind of the same

225
00:09:38,269 --> 00:09:41,660
functionality as I'm es2015 module with

226
00:09:41,660 --> 00:09:43,970
have meaning that it has exports and

227
00:09:43,970 --> 00:09:47,810
imports that work seamlessly under the

228
00:09:47,810 --> 00:09:51,019
hood so the question is how can you

229
00:09:51,019 --> 00:09:53,259
create web assembly or how can you

230
00:09:53,259 --> 00:09:56,029
utilize a web based on the code and

231
00:09:56,029 --> 00:09:58,009
there's a bunch of ways that you can

232
00:09:58,009 --> 00:10:00,769
utilize here so I'm going to share these

233
00:10:00,769 --> 00:10:03,680
two ways that I've actually used so you

234
00:10:03,680 --> 00:10:05,329
either have the option to write some

235
00:10:05,329 --> 00:10:08,389
code in a very low-level language like C

236
00:10:08,389 --> 00:10:09,350
or C++

237
00:10:09,350 --> 00:10:11,420
whereas I say here in the slide any

238
00:10:11,420 --> 00:10:15,079
other LLVM supported so Olivia I used to

239
00:10:15,079 --> 00:10:17,959
send low-level virtual machine which I

240
00:10:17,959 --> 00:10:20,870
think they changed the the name because

241
00:10:20,870 --> 00:10:23,029
what they refer to as the virtual

242
00:10:23,029 --> 00:10:25,370
machine 20-25 years ago has now

243
00:10:25,370 --> 00:10:27,709
fundamentally changed so you can think

244
00:10:27,709 --> 00:10:32,060
of LLVM as a compiler infrastructure or

245
00:10:32,060 --> 00:10:34,370
a set of compiler to chains right so for

246
00:10:34,370 --> 00:10:36,889
example Objective C is another LLVM

247
00:10:36,889 --> 00:10:39,290
supported language for example so you

248
00:10:39,290 --> 00:10:42,079
have some code written in C or C++ and

249
00:10:42,079 --> 00:10:43,939
then you can use this tool called

250
00:10:43,939 --> 00:10:47,600
Emscripten which basically compiles your

251
00:10:47,600 --> 00:10:51,949
C or C++ code into assembly and if you

252
00:10:51,949 --> 00:10:54,649
produce a web assembly file which we

253
00:10:54,649 --> 00:10:56,990
have a thought WAF time where wisdom

254
00:10:56,990 --> 00:11:00,110
extension once you have that file you

255
00:11:00,110 --> 00:11:02,990
can load that file into the browser and

256
00:11:02,990 --> 00:11:06,199
then you can consume it via JavaScript

257
00:11:06,199 --> 00:11:07,260
okay so you can

258
00:11:07,260 --> 00:11:09,540
acts as the functions that you created

259
00:11:09,540 --> 00:11:12,870
in in C and C++ essentially now there's

260
00:11:12,870 --> 00:11:15,270
another way to create web assembly fires

261
00:11:15,270 --> 00:11:18,300
you don't necessarily need to use LLVM

262
00:11:18,300 --> 00:11:20,040
supported languages because there are

263
00:11:20,040 --> 00:11:23,850
some other languages that today compile

264
00:11:23,850 --> 00:11:27,090
to web sampling so for example dotnet

265
00:11:27,090 --> 00:11:30,960
languages Java Ruby or even go have

266
00:11:30,960 --> 00:11:32,850
compilation targets so you can write

267
00:11:32,850 --> 00:11:35,490
some code in Ruby or Ingo and you can

268
00:11:35,490 --> 00:11:37,830
compile it down to web assembly and then

269
00:11:37,830 --> 00:11:39,030
the process is going to be the same

270
00:11:39,030 --> 00:11:40,980
because you load that webassembly binary

271
00:11:40,980 --> 00:11:43,140
into the browser and you can consume it

272
00:11:43,140 --> 00:11:47,280
by a JavaScript and the list of

273
00:11:47,280 --> 00:11:49,170
languages that you can use to create

274
00:11:49,170 --> 00:11:53,100
wesam files is really really really long

275
00:11:53,100 --> 00:11:55,200
right so there's a person who collected

276
00:11:55,200 --> 00:11:58,350
all these languages on github and here's

277
00:11:58,350 --> 00:12:00,930
a link you can take that and this

278
00:12:00,930 --> 00:12:03,330
particular represent actually also tells

279
00:12:03,330 --> 00:12:06,210
whether the language has full support

280
00:12:06,210 --> 00:12:08,460
for creating web assembly files partial

281
00:12:08,460 --> 00:12:12,600
support in progress or plans to to

282
00:12:12,600 --> 00:12:14,280
support web assembly but the list is

283
00:12:14,280 --> 00:12:16,740
really really long so the good news is

284
00:12:16,740 --> 00:12:18,690
that if you used some background

285
00:12:18,690 --> 00:12:21,540
language before you can well it's very

286
00:12:21,540 --> 00:12:23,340
likely that you can now create web

287
00:12:23,340 --> 00:12:25,590
somebody as well and play around with to

288
00:12:25,590 --> 00:12:28,200
try it out so as you can see c-sharp

289
00:12:28,200 --> 00:12:32,190
o Java PHP Python and also and I learned

290
00:12:32,190 --> 00:12:33,360
this quite recently

291
00:12:33,360 --> 00:12:36,690
typescript can compile to web assembly

292
00:12:36,690 --> 00:12:38,400
so even if you dress to the typescript

293
00:12:38,400 --> 00:12:40,650
developer you can now create AB assembly

294
00:12:40,650 --> 00:12:42,330
and play around with bubble sample

295
00:12:42,330 --> 00:12:44,420
itself and see how it works

296
00:12:44,420 --> 00:12:47,850
ok so let me give you a quick demo I

297
00:12:47,850 --> 00:12:50,490
prepared two separate demos and then I'm

298
00:12:50,490 --> 00:12:53,160
going to also show you a larger project

299
00:12:53,160 --> 00:12:55,170
that I worked on for a few weeks

300
00:12:55,170 --> 00:13:00,000
actually so let me change to my editor

301
00:13:00,000 --> 00:13:04,410
here Oh quick and you will have access

302
00:13:04,410 --> 00:13:06,810
to the code repository here because I

303
00:13:06,810 --> 00:13:10,590
teach this on github as well so I have

304
00:13:10,590 --> 00:13:12,830
two examples right I have a very simple

305
00:13:12,830 --> 00:13:17,280
ski file that is going to take a number

306
00:13:17,280 --> 00:13:18,990
and it's green to square that number

307
00:13:18,990 --> 00:13:21,059
okay so this is a very very

308
00:13:21,059 --> 00:13:25,139
simple code written in C I used this

309
00:13:25,139 --> 00:13:27,689
particular M script and command to

310
00:13:27,689 --> 00:13:31,439
generate a JavaScript file called square

311
00:13:31,439 --> 00:13:34,829
Doge is so square that GS is going to be

312
00:13:34,829 --> 00:13:38,129
loading a file called square del twisdom

313
00:13:38,129 --> 00:13:41,009
so by running this piece of code here I

314
00:13:41,009 --> 00:13:43,589
managed to generate a web assembly file

315
00:13:43,589 --> 00:13:45,629
and the JavaScript file as well so that

316
00:13:45,629 --> 00:13:48,299
I can invoke that web assembly file okay

317
00:13:48,299 --> 00:13:52,799
and then what I did I put into an HTML

318
00:13:52,799 --> 00:13:55,619
page I am using the web assembly

319
00:13:55,619 --> 00:13:59,999
JavaScript API to load the actual method

320
00:13:59,999 --> 00:14:02,639
from my C file which is called in square

321
00:14:02,639 --> 00:14:05,969
I specify the parameter that I need to

322
00:14:05,969 --> 00:14:08,399
pass in or the type of parameter so in

323
00:14:08,399 --> 00:14:10,439
this case I'm going to pass a number or

324
00:14:10,439 --> 00:14:12,479
an integer and I'm also going to return

325
00:14:12,479 --> 00:14:16,829
an integer and then I have right up here

326
00:14:16,829 --> 00:14:19,249
I will have a very simple input button

327
00:14:19,249 --> 00:14:21,779
calculate button and if I press the

328
00:14:21,779 --> 00:14:23,699
calculate button under the hood what I'm

329
00:14:23,699 --> 00:14:26,519
going to be doing is invoking the web

330
00:14:26,519 --> 00:14:29,759
assembly int square function that I

331
00:14:29,759 --> 00:14:32,729
wrote in C now this example is just

332
00:14:32,729 --> 00:14:35,129
showing you how to invoke something in C

333
00:14:35,129 --> 00:14:36,899
I know this is not really meaningful

334
00:14:36,899 --> 00:14:38,669
because you can square numbers in

335
00:14:38,669 --> 00:14:40,649
JavaScript but that's not the point of

336
00:14:40,649 --> 00:14:42,509
this demo the point of this demo is to

337
00:14:42,509 --> 00:14:44,909
show you how to load first of all how to

338
00:14:44,909 --> 00:14:48,419
create something using Emscripten

339
00:14:48,419 --> 00:14:50,669
and then how to load that into the

340
00:14:50,669 --> 00:14:54,649
browser and then use that so if I go to

341
00:14:54,649 --> 00:14:57,989
localhost:8080 I have this input box

342
00:14:57,989 --> 00:15:01,259
here I put two and I get four back which

343
00:15:01,259 --> 00:15:04,379
is where so if I put four then I get 16

344
00:15:04,379 --> 00:15:07,259
which is 4 squared right so what happens

345
00:15:07,259 --> 00:15:11,519
here is from my HTML I can invoke a

346
00:15:11,519 --> 00:15:14,759
method in a web assembly binary and at

347
00:15:14,759 --> 00:15:18,059
webassembly Barney was created from a C

348
00:15:18,059 --> 00:15:20,699
file which is so here so essentially

349
00:15:20,699 --> 00:15:22,799
this is the function that gets invoked

350
00:15:22,799 --> 00:15:25,799
and executed by the browser okay very

351
00:15:25,799 --> 00:15:28,169
simple example the other example that I

352
00:15:28,169 --> 00:15:31,919
have is using go so I mentioned you can

353
00:15:31,919 --> 00:15:35,230
also use known and all the llv

354
00:15:35,230 --> 00:15:37,780
supported languages such as go so what

355
00:15:37,780 --> 00:15:41,050
happens here is instead of squaring the

356
00:15:41,050 --> 00:15:43,450
number and I'll have a GU function

357
00:15:43,450 --> 00:15:46,690
called cube which is going to return a

358
00:15:46,690 --> 00:15:51,960
number multiply three times okay the way

359
00:15:51,960 --> 00:15:56,110
go is different from from C and C++ and

360
00:15:56,110 --> 00:15:58,150
how you need to work with Emscripten to

361
00:15:58,150 --> 00:16:00,310
generate the web assembly file is code

362
00:16:00,310 --> 00:16:04,060
has go exposes this JavaScript global

363
00:16:04,060 --> 00:16:07,600
object so from within cool context you

364
00:16:07,600 --> 00:16:09,730
can actually access the document object

365
00:16:09,730 --> 00:16:13,810
inside your HTML page and you can call

366
00:16:13,810 --> 00:16:16,450
things like get element by ID and then

367
00:16:16,450 --> 00:16:19,900
set the inner HTML of the particular

368
00:16:19,900 --> 00:16:22,570
elements that you're capturing here and

369
00:16:22,570 --> 00:16:25,120
then using this J's global you can set

370
00:16:25,120 --> 00:16:28,840
the cube function that you created so

371
00:16:28,840 --> 00:16:30,730
basically exposing this cube function

372
00:16:30,730 --> 00:16:33,640
here to be a globally available object

373
00:16:33,640 --> 00:16:37,450
inside my HTML page which means if I

374
00:16:37,450 --> 00:16:40,810
open the go example is that I can go

375
00:16:40,810 --> 00:16:44,440
ahead and fetch the web Samba file and I

376
00:16:44,440 --> 00:16:46,840
didn't show that to you but this was the

377
00:16:46,840 --> 00:16:50,020
command that I ran to create my rubber

378
00:16:50,020 --> 00:16:53,140
75 is on this go file that I have here

379
00:16:53,140 --> 00:16:56,670
and then I live in the web assembly file

380
00:16:56,670 --> 00:16:59,530
here's the module here's the instance

381
00:16:59,530 --> 00:17:01,240
the things that we talked about so I get

382
00:17:01,240 --> 00:17:04,329
access to those and notice that for the

383
00:17:04,329 --> 00:17:08,710
buttons on click handler I pass in the

384
00:17:08,710 --> 00:17:11,680
cube method and I pass in the value of

385
00:17:11,680 --> 00:17:15,460
the input of the input text as well

386
00:17:15,460 --> 00:17:17,980
which is aligned before here right so I

387
00:17:17,980 --> 00:17:20,319
can actually access the cube methods

388
00:17:20,319 --> 00:17:22,839
because it is being exposed by going by

389
00:17:22,839 --> 00:17:25,960
so many binary globally inside my HTML

390
00:17:25,960 --> 00:17:33,000
page so if I now go to slash index go I

391
00:17:33,000 --> 00:17:35,710
can have the input boss and if I put two

392
00:17:35,710 --> 00:17:39,310
here I now get eight so I'm now using

393
00:17:39,310 --> 00:17:41,740
the cube function okay so again this is

394
00:17:41,740 --> 00:17:45,490
a very simple example because you can do

395
00:17:45,490 --> 00:17:47,110
mathematical operations inside

396
00:17:47,110 --> 00:17:49,010
JavaScript as well without a problem

397
00:17:49,010 --> 00:17:50,560
but I'm just showing you that you can

398
00:17:50,560 --> 00:17:53,630
you know access these functions that you

399
00:17:53,630 --> 00:17:57,620
created using cool or C okay so let's

400
00:17:57,620 --> 00:17:59,750
take a look at that March complex the

401
00:17:59,750 --> 00:18:02,690
example let me put this away and this is

402
00:18:02,690 --> 00:18:04,310
going to be a much larger project as you

403
00:18:04,310 --> 00:18:06,020
can see because I have more files here

404
00:18:06,020 --> 00:18:09,220
but before we get to that let me

405
00:18:09,220 --> 00:18:13,070
oops wait I need to I think first go and

406
00:18:13,070 --> 00:18:16,520
shut down this so ever because we need a

407
00:18:16,520 --> 00:18:18,880
new one here

408
00:18:18,880 --> 00:18:21,920
okay just using an HTTP server to serve

409
00:18:21,920 --> 00:18:26,030
up the the contents of this folder and

410
00:18:26,030 --> 00:18:29,390
refresh okay image check so what we're

411
00:18:29,390 --> 00:18:30,560
going to do here is going to be

412
00:18:30,560 --> 00:18:34,120
something very interesting because I

413
00:18:34,120 --> 00:18:36,920
mentioned that you know I work for cloud

414
00:18:36,920 --> 00:18:39,170
nori and I've prepared a very quick demo

415
00:18:39,170 --> 00:18:41,420
of what plaudit can do for you so that

416
00:18:41,420 --> 00:18:43,280
you understand the demo that I created

417
00:18:43,280 --> 00:18:46,520
using vocal and JavaScript so what you

418
00:18:46,520 --> 00:18:50,150
have here is a standard you know cloud

419
00:18:50,150 --> 00:18:53,030
image that we upload it to that has been

420
00:18:53,030 --> 00:18:57,230
uploaded cloud Neri no changes to the

421
00:18:57,230 --> 00:19:01,040
image this is an image which is a JPEG

422
00:19:01,040 --> 00:19:05,270
image and the size of it is 583

423
00:19:05,270 --> 00:19:05,960
kilobytes

424
00:19:05,960 --> 00:19:08,960
now what cloudy allows us to do is to

425
00:19:08,960 --> 00:19:13,820
pass in the various options to the army

426
00:19:13,820 --> 00:19:17,060
to the URL so I typed in F Auto and

427
00:19:17,060 --> 00:19:17,870
Kyoto

428
00:19:17,870 --> 00:19:20,210
so now Cloud Nuri is going to take a

429
00:19:20,210 --> 00:19:22,280
look at the browser is going to say okay

430
00:19:22,280 --> 00:19:25,220
you are looking at this image using

431
00:19:25,220 --> 00:19:28,580
Google Chrome now Google Chrome supports

432
00:19:28,580 --> 00:19:30,980
an image format called web pee-soaked

433
00:19:30,980 --> 00:19:33,890
allowed me will in fact render a web p

434
00:19:33,890 --> 00:19:36,050
image and send it back to us so if I

435
00:19:36,050 --> 00:19:38,240
take a look at the headers now notice

436
00:19:38,240 --> 00:19:40,100
that the content type comes back as

437
00:19:40,100 --> 00:19:44,060
image by P and the file size is also

438
00:19:44,060 --> 00:19:45,890
just 32 kilobytes

439
00:19:45,890 --> 00:19:47,870
there's a massive optimization happening

440
00:19:47,870 --> 00:19:50,930
here behind the scenes okay I can change

441
00:19:50,930 --> 00:19:52,400
the width and I can do all sorts of

442
00:19:52,400 --> 00:19:55,700
interesting things there so what my

443
00:19:55,700 --> 00:19:59,690
project does here is that it should be

444
00:19:59,690 --> 00:20:01,850
nice that I can take a look at

445
00:20:01,850 --> 00:20:04,760
the returned image from cloudy and say

446
00:20:04,760 --> 00:20:06,650
okay that's a WebP image or that's a PNG

447
00:20:06,650 --> 00:20:08,690
oh that's a JPEG looked great but I

448
00:20:08,690 --> 00:20:11,690
wanted to go a level deeper I wanted to

449
00:20:11,690 --> 00:20:14,720
know if it's a PNG does it support

450
00:20:14,720 --> 00:20:17,419
transparency does it have interlacing if

451
00:20:17,419 --> 00:20:20,000
it's a web P which kind of web be

452
00:20:20,000 --> 00:20:20,840
container

453
00:20:20,840 --> 00:20:23,059
do we use and these are the type of

454
00:20:23,059 --> 00:20:25,460
questions that you can't really answer

455
00:20:25,460 --> 00:20:27,440
just by using javascript you need

456
00:20:27,440 --> 00:20:30,500
something that is able to process the

457
00:20:30,500 --> 00:20:32,990
image at a much lower level and this is

458
00:20:32,990 --> 00:20:34,850
in fact what I'm doing here so I have

459
00:20:34,850 --> 00:20:38,870
various goo files for example if I open

460
00:20:38,870 --> 00:20:42,440
the PNP check I acts as the image data

461
00:20:42,440 --> 00:20:44,929
buffer and I can take of the carrots you

462
00:20:44,929 --> 00:20:47,480
know various pieces and and bytes from

463
00:20:47,480 --> 00:20:50,330
the image data buffer so for PNG files I

464
00:20:50,330 --> 00:20:52,640
went through the PNG spec and I read

465
00:20:52,640 --> 00:20:55,400
that you know by its location number 24

466
00:20:55,400 --> 00:20:58,039
tells you what kind of PNG

467
00:20:58,039 --> 00:21:00,049
you're looking at but it's greyscale

468
00:21:00,049 --> 00:21:03,559
true color index color right whether it

469
00:21:03,559 --> 00:21:06,860
has interlacing over that uses the atom

470
00:21:06,860 --> 00:21:09,350
seven interlace or not and all these

471
00:21:09,350 --> 00:21:11,600
pieces of information I could access

472
00:21:11,600 --> 00:21:14,870
using go in a very easy way right so I

473
00:21:14,870 --> 00:21:18,230
can now use this to generate PNG info

474
00:21:18,230 --> 00:21:23,179
and eventually using the jpg the PNG and

475
00:21:23,179 --> 00:21:25,039
the web feed check and go fast as I've

476
00:21:25,039 --> 00:21:30,200
wrote I get to basically take a look at

477
00:21:30,200 --> 00:21:31,789
the images that come back from crowding

478
00:21:31,789 --> 00:21:36,080
and get is really neat and and low level

479
00:21:36,080 --> 00:21:38,030
details and just show that to users who

480
00:21:38,030 --> 00:21:40,190
are interested so let's take a look at

481
00:21:40,190 --> 00:21:42,830
an example and I also passed in the user

482
00:21:42,830 --> 00:21:45,710
agent because as I said Cloud Murray is

483
00:21:45,710 --> 00:21:48,500
aware whether you look at the image from

484
00:21:48,500 --> 00:21:51,200
Chrome or Safari or Firefox and it's

485
00:21:51,200 --> 00:21:53,179
going to generate the appropriate image

486
00:21:53,179 --> 00:21:57,260
so I'm using a photo for this particular

487
00:21:57,260 --> 00:21:59,690
black card or JP which is just a car and

488
00:21:59,690 --> 00:22:02,380
I'm going to hit check using Chrome and

489
00:22:02,380 --> 00:22:05,000
what we get back is a JPEG here two

490
00:22:05,000 --> 00:22:07,700
sides and here's a quality which is you

491
00:22:07,700 --> 00:22:11,090
know did cloud you reduce the quality of

492
00:22:11,090 --> 00:22:13,660
the image or not

493
00:22:13,660 --> 00:22:16,060
if I changes to with 500 for example

494
00:22:16,060 --> 00:22:17,890
which is going to generate an image on

495
00:22:17,890 --> 00:22:19,990
the service side that is that has a

496
00:22:19,990 --> 00:22:23,140
width of 500 we're going to check and

497
00:22:23,140 --> 00:22:26,260
now this time we get a wet B and I can

498
00:22:26,260 --> 00:22:28,990
see okay this is a low C where P that

499
00:22:28,990 --> 00:22:30,820
does not have an alpha channel and in

500
00:22:30,820 --> 00:22:33,040
fact it uses vp8 container now I'm not

501
00:22:33,040 --> 00:22:34,870
going to get into the details of how web

502
00:22:34,870 --> 00:22:36,400
he works with there's a bunch of

503
00:22:36,400 --> 00:22:40,660
containers like web the vp8 we p8l and

504
00:22:40,660 --> 00:22:46,510
BPA X I think the basic drive what kind

505
00:22:46,510 --> 00:22:48,820
of weapon you're talking about and I can

506
00:22:48,820 --> 00:22:52,390
go ahead and for example change the user

507
00:22:52,390 --> 00:22:54,640
agent which is only possible in chrome

508
00:22:54,640 --> 00:22:57,970
by using the network conditions tab I'm

509
00:22:57,970 --> 00:23:02,140
going to say ok so I'm now pretending of

510
00:23:02,140 --> 00:23:04,930
I'm Safari all right so this also

511
00:23:04,930 --> 00:23:07,600
updates here and I'm going to hit the

512
00:23:07,600 --> 00:23:11,620
track and now I'm getting the JPEG which

513
00:23:11,620 --> 00:23:14,500
is against quality 88 but what if I now

514
00:23:14,500 --> 00:23:17,980
do sake you undergo Auto so remove the

515
00:23:17,980 --> 00:23:19,900
quality or reduce the quality of the

516
00:23:19,900 --> 00:23:21,640
image in a wait list not affecting the

517
00:23:21,640 --> 00:23:25,030
human eye so let's go and do a check and

518
00:23:25,030 --> 00:23:28,000
now I get quality 77 and the size went

519
00:23:28,000 --> 00:23:30,700
down I could also you know were create

520
00:23:30,700 --> 00:23:34,690
various PNG images let's try a PNG

521
00:23:34,690 --> 00:23:39,220
example I think that is the right PNG is

522
00:23:39,220 --> 00:23:42,460
output here okay so that particular

523
00:23:42,460 --> 00:23:44,620
image as you can see there's a lot of

524
00:23:44,620 --> 00:23:46,450
information that I read about PNG so

525
00:23:46,450 --> 00:23:49,120
it's PNG 32 that's the size it has a bit

526
00:23:49,120 --> 00:23:51,790
depth of 8 it's color type a true colour

527
00:23:51,790 --> 00:23:54,520
with alpha and it doesn't use internally

528
00:23:54,520 --> 00:23:57,370
sync so there's a lot of things that you

529
00:23:57,370 --> 00:24:00,010
can now achieve and see because I have

530
00:24:00,010 --> 00:24:03,280
access to all the lower level interfaces

531
00:24:03,280 --> 00:24:06,700
by a goal that I need to do further

532
00:24:06,700 --> 00:24:09,520
analysis of my images and this is just

533
00:24:09,520 --> 00:24:11,080
scratching the surface right because now

534
00:24:11,080 --> 00:24:13,960
you could do any sort of low-level

535
00:24:13,960 --> 00:24:15,910
processing not just for images for

536
00:24:15,910 --> 00:24:18,640
videos for anything else I've seen some

537
00:24:18,640 --> 00:24:20,170
examples where someone took an entire

538
00:24:20,170 --> 00:24:23,470
game which was written in I'm forgetting

539
00:24:23,470 --> 00:24:25,480
maybe C++ or some other language and now

540
00:24:25,480 --> 00:24:27,539
they are able to run it

541
00:24:27,539 --> 00:24:29,999
on the web so I prepared a few resources

542
00:24:29,999 --> 00:24:31,289
for you as I said I'm going to share

543
00:24:31,289 --> 00:24:33,629
these slides there's a sample repository

544
00:24:33,629 --> 00:24:36,059
that is a bunch of case studies from

545
00:24:36,059 --> 00:24:38,129
Google who by the way released that app

546
00:24:38,129 --> 00:24:40,309
calls crucial app which also uses

547
00:24:40,309 --> 00:24:42,629
webassembly and hood they have a few

548
00:24:42,629 --> 00:24:45,869
very good articles that are related to

549
00:24:45,869 --> 00:24:48,450
memory management and lower level

550
00:24:48,450 --> 00:24:51,139
processing and they do comparison

551
00:24:51,139 --> 00:24:54,359
between JavaScript and web assembly and

552
00:24:54,359 --> 00:24:57,210
how they perform in various browsers

553
00:24:57,210 --> 00:25:00,359
it's a very interesting article for you

554
00:25:00,359 --> 00:25:02,239
to read if you're interested in this and

555
00:25:02,239 --> 00:25:05,580
with that thank you very much and of

556
00:25:05,580 --> 00:25:07,559
course we have a few minutes I think for

557
00:25:07,559 --> 00:25:09,899
Q&A so if you have any questions then

558
00:25:09,899 --> 00:25:13,979
actually it's don't hesitate to ask away

559
00:25:13,979 --> 00:25:15,989
absolutely yes a please please do ask

560
00:25:15,989 --> 00:25:17,609
your questions either on the on the

561
00:25:17,609 --> 00:25:21,019
sites or through slack if you prefer

562
00:25:21,019 --> 00:25:26,639
yeah questions come in one about the

563
00:25:26,639 --> 00:25:33,239
usage of of of webassembly GGC it mostly

564
00:25:33,239 --> 00:25:35,580
is people who are trying to do something

565
00:25:35,580 --> 00:25:37,710
that is better suited in a different

566
00:25:37,710 --> 00:25:39,840
language or is it because people have

567
00:25:39,840 --> 00:25:41,519
existing legacy code that they're trying

568
00:25:41,519 --> 00:25:44,669
to pull in and as a result rather than

569
00:25:44,669 --> 00:25:46,830
try and rewrite they just they just you

570
00:25:46,830 --> 00:25:48,899
know hanging out with with with

571
00:25:48,899 --> 00:25:51,299
webassembly shirk

572
00:25:51,299 --> 00:25:54,720
both these are actually you know the two

573
00:25:54,720 --> 00:25:56,399
valid use cases that you just mentioned

574
00:25:56,399 --> 00:25:59,039
so first of all there are some things

575
00:25:59,039 --> 00:26:02,609
that you can't force say JavaScript into

576
00:26:02,609 --> 00:26:04,799
doing right so for example JavaScript

577
00:26:04,799 --> 00:26:08,700
won't be able to to read and parse web P

578
00:26:08,700 --> 00:26:11,940
files because for that you need the the

579
00:26:11,940 --> 00:26:17,489
C library that has some web P or bleep

580
00:26:17,489 --> 00:26:19,609
leave that P I think that's the package

581
00:26:19,609 --> 00:26:21,809
you can't use that in chapala script you

582
00:26:21,809 --> 00:26:23,970
need something that is compatible with

583
00:26:23,970 --> 00:26:25,889
that library to use that right so that's

584
00:26:25,889 --> 00:26:28,799
one use case the use cases yes if you

585
00:26:28,799 --> 00:26:31,440
have some code that you've wrote in C or

586
00:26:31,440 --> 00:26:34,470
C++ that does something very specific

587
00:26:34,470 --> 00:26:37,169
something very low-level it is now very

588
00:26:37,169 --> 00:26:40,440
easy to just pour that into the web

589
00:26:40,440 --> 00:26:41,510
application until you

590
00:26:41,510 --> 00:26:43,940
that so these these are two absolutely

591
00:26:43,940 --> 00:26:45,920
very news cases these are this is what

592
00:26:45,920 --> 00:26:48,680
people use what buy something for cool

593
00:26:48,680 --> 00:26:50,380
and another question about the the

594
00:26:50,380 --> 00:26:53,630
performance in it obviously my

595
00:26:53,630 --> 00:26:56,270
background is more Java based so I see

596
00:26:56,270 --> 00:26:57,950
similar kana lot performance issues when

597
00:26:57,950 --> 00:26:59,750
people trying to use J&I or something

598
00:26:59,750 --> 00:27:01,310
like that what is the kind of

599
00:27:01,310 --> 00:27:03,050
performance hit that you see when when

600
00:27:03,050 --> 00:27:06,440
dropping into a native language so

601
00:27:06,440 --> 00:27:08,660
that's exactly what an article that I

602
00:27:08,660 --> 00:27:10,910
just mentioned towards the end of the

603
00:27:10,910 --> 00:27:13,280
talk is about so it's it's probably

604
00:27:13,280 --> 00:27:16,010
takes like a good 40 minutes to read but

605
00:27:16,010 --> 00:27:18,350
basically what Google did was they

606
00:27:18,350 --> 00:27:21,290
created the web assembly binary using I

607
00:27:21,290 --> 00:27:23,540
think there was a ste or C++ example

608
00:27:23,540 --> 00:27:25,580
that was a rough example and maybe

609
00:27:25,580 --> 00:27:27,650
another one and in the JavaScript

610
00:27:27,650 --> 00:27:29,890
example and then they run across through

611
00:27:29,890 --> 00:27:32,450
various modern browsers then they

612
00:27:32,450 --> 00:27:34,850
measured all sorts of metrics and very

613
00:27:34,850 --> 00:27:35,990
interesting to see there was one

614
00:27:35,990 --> 00:27:38,060
particular browser where the JavaScript

615
00:27:38,060 --> 00:27:40,310
code execution took about eight or nine

616
00:27:40,310 --> 00:27:43,370
seconds whereas the same cool that they

617
00:27:43,370 --> 00:27:47,720
wrote in C or Russ took about literally

618
00:27:47,720 --> 00:27:50,960
BOM points I know eight seconds right so

619
00:27:50,960 --> 00:27:52,580
it depends on what you're trying to do

620
00:27:52,580 --> 00:27:56,420
and how complex your your code

621
00:27:56,420 --> 00:27:59,320
neck-tacular is going to be but I fold

622
00:27:59,320 --> 00:28:02,180
because however somebody is optimized

623
00:28:02,180 --> 00:28:04,130
for you know lower level language visit

624
00:28:04,130 --> 00:28:07,700
as you know types support for types and

625
00:28:07,700 --> 00:28:09,380
variables and other things the code

626
00:28:09,380 --> 00:28:11,450
execution is by default in a virtual

627
00:28:11,450 --> 00:28:12,980
environment and in the virtual machine

628
00:28:12,980 --> 00:28:14,840
in the browser is going to be a lot

629
00:28:14,840 --> 00:28:19,070
faster than say very complex JavaScript

630
00:28:19,070 --> 00:28:21,440
but do you read that article so I'm

631
00:28:21,440 --> 00:28:23,180
going to be on my screen or tell them

632
00:28:23,180 --> 00:28:25,160
about basically I'm going to set aside

633
00:28:25,160 --> 00:28:30,470
and do read that article by Google does

634
00:28:30,470 --> 00:28:34,760
go into the details of this also thank

635
00:28:34,760 --> 00:28:37,130
you very very much to us really really

636
00:28:37,130 --> 00:28:40,400
appreciate your support or Mme and thank

637
00:28:40,400 --> 00:28:41,710
you for the great session as well

638
00:28:41,710 --> 00:28:43,250
alright Cheers

639
00:28:43,250 --> 00:28:45,680
enjoy the rest of the sessions will be

640
00:28:45,680 --> 00:28:48,160
thank you bye

