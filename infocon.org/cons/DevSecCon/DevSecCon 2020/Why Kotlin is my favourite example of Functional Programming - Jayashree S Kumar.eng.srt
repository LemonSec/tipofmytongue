1
00:00:00,399 --> 00:00:02,080
fantastic so jay is actually a colleague

2
00:00:02,080 --> 00:00:04,400
of mine from bangalore so welcome

3
00:00:04,400 --> 00:00:07,920
must be very late there so sorry

4
00:00:08,160 --> 00:00:11,200
do you have you frozen oh

5
00:00:11,200 --> 00:00:14,639
it looks like she's right but yeah

6
00:00:14,639 --> 00:00:16,480
sometimes these things happen maybe she

7
00:00:16,480 --> 00:00:17,840
can reconnect in a

8
00:00:17,840 --> 00:00:21,039
second ah

9
00:00:21,039 --> 00:00:24,160
hi grace i can hey yes you're back

10
00:00:24,160 --> 00:00:27,519
and you're back no problem at all

11
00:00:27,519 --> 00:00:29,119
uh so welcome and i believe you're going

12
00:00:29,119 --> 00:00:31,199
to be talking about uh kotlin

13
00:00:31,199 --> 00:00:32,960
as a great example of functional

14
00:00:32,960 --> 00:00:34,960
programming is that right

15
00:00:34,960 --> 00:00:37,360
yes right great fantastic if you could

16
00:00:37,360 --> 00:00:38,800
share your screen i'll add it to the

17
00:00:38,800 --> 00:00:42,160
stream and then we can get going

18
00:00:42,840 --> 00:00:43,910
sure

19
00:00:43,910 --> 00:00:45,520
[Music]

20
00:00:45,520 --> 00:00:47,039
and again if anyone has any questions

21
00:00:47,039 --> 00:00:48,719
for jeffrey uh you can add them to the

22
00:00:48,719 --> 00:00:49,920
slack channel

23
00:00:49,920 --> 00:00:52,559
or to slido and i will ask them

24
00:00:52,559 --> 00:00:54,719
afterwards

25
00:00:54,719 --> 00:00:57,360
fantastic let me add that there and get

26
00:00:57,360 --> 00:00:59,359
you going

27
00:00:59,359 --> 00:01:02,559
okay thanks grace and um

28
00:01:02,559 --> 00:01:04,959
hi everyone thanks for joining uh today

29
00:01:04,959 --> 00:01:06,000
my topic is

30
00:01:06,000 --> 00:01:08,000
why katlin is becoming a favorite

31
00:01:08,000 --> 00:01:11,280
example of functional programming for me

32
00:01:11,280 --> 00:01:14,320
i am jaishayas kumar i am an ibm

33
00:01:14,320 --> 00:01:17,119
javascript library developer

34
00:01:17,119 --> 00:01:19,600
i have extensively worked on ibm java's

35
00:01:19,600 --> 00:01:21,600
testing site recently i moved on to

36
00:01:21,600 --> 00:01:23,200
development i'm interested in

37
00:01:23,200 --> 00:01:25,119
innovations as well

38
00:01:25,119 --> 00:01:27,119
while i'm not at work all these things

39
00:01:27,119 --> 00:01:29,119
keep me busy

40
00:01:29,119 --> 00:01:32,560
and let's get started so i'm

41
00:01:32,560 --> 00:01:34,640
uh what why and how person and that's

42
00:01:34,640 --> 00:01:37,439
how i've structured this talk as well

43
00:01:37,439 --> 00:01:40,560
in my aside like you'll see like what

44
00:01:40,560 --> 00:01:41,600
why and how about

45
00:01:41,600 --> 00:01:43,280
kotlin and the functional programming

46
00:01:43,280 --> 00:01:44,640
languages

47
00:01:44,640 --> 00:01:46,640
and uh some of my favorite concepts i'll

48
00:01:46,640 --> 00:01:48,159
be introducing them to you

49
00:01:48,159 --> 00:01:51,280
with the code but my conclusion to begin

50
00:01:51,280 --> 00:01:51,920
with

51
00:01:51,920 --> 00:01:55,280
what is scotland i'm sure most of you

52
00:01:55,280 --> 00:01:57,200
would have already known it but for the

53
00:01:57,200 --> 00:01:59,680
some who don't know this is a very brief

54
00:01:59,680 --> 00:02:01,040
introduction

55
00:02:01,040 --> 00:02:03,600
kotlin is a statically type programming

56
00:02:03,600 --> 00:02:05,360
general purpose programming language

57
00:02:05,360 --> 00:02:06,960
which is created by jeffriends

58
00:02:06,960 --> 00:02:11,280
but now it's open sourced it mainly

59
00:02:11,280 --> 00:02:14,080
it can compile down to java by coach

60
00:02:14,080 --> 00:02:14,720
that

61
00:02:14,720 --> 00:02:17,760
along with its 100 interoperability

62
00:02:17,760 --> 00:02:20,640
with java is what i feel has led to its

63
00:02:20,640 --> 00:02:21,760
popularity

64
00:02:21,760 --> 00:02:23,680
it also compiles down to javascript

65
00:02:23,680 --> 00:02:25,360
which can be run on your browser

66
00:02:25,360 --> 00:02:28,319
or your node.js and also the native site

67
00:02:28,319 --> 00:02:28,800
there is

68
00:02:28,800 --> 00:02:30,480
lots of things happening in kotlin you

69
00:02:30,480 --> 00:02:31,760
know this is a new language in the

70
00:02:31,760 --> 00:02:32,879
modern language

71
00:02:32,879 --> 00:02:36,560
but yeah that's for another time kotlin

72
00:02:36,560 --> 00:02:38,400
gives you the best blend of both

73
00:02:38,400 --> 00:02:40,000
operating or

74
00:02:40,000 --> 00:02:41,760
object oriented and functional

75
00:02:41,760 --> 00:02:43,120
programming language

76
00:02:43,120 --> 00:02:46,800
so that is why this this language has

77
00:02:46,800 --> 00:02:50,640
some substance to it what is

78
00:02:50,640 --> 00:02:52,319
functional programming language

79
00:02:52,319 --> 00:02:53,920
different people have different

80
00:02:53,920 --> 00:02:56,160
definitions for it but functional

81
00:02:56,160 --> 00:02:57,360
programming is simply

82
00:02:57,360 --> 00:03:00,480
programming with functions

83
00:03:00,480 --> 00:03:03,040
yeah it's a type of declarative type of

84
00:03:03,040 --> 00:03:04,000
programming language

85
00:03:04,000 --> 00:03:07,040
where you focus on what to solve rather

86
00:03:07,040 --> 00:03:07,519
than our

87
00:03:07,519 --> 00:03:10,400
imperative type where you see how it

88
00:03:10,400 --> 00:03:12,000
could be solved

89
00:03:12,000 --> 00:03:15,120
uh yeah functional programming

90
00:03:15,120 --> 00:03:18,159
actually treats most of your functions

91
00:03:18,159 --> 00:03:22,239
as your mathematical equations

92
00:03:22,239 --> 00:03:26,640
it yeah it uses immutable data

93
00:03:26,640 --> 00:03:30,000
it is easy to write use and test

94
00:03:30,000 --> 00:03:32,799
these programs uh one such function

95
00:03:32,799 --> 00:03:33,519
would be like

96
00:03:33,519 --> 00:03:36,879
uh if one plus two is equal to three

97
00:03:36,879 --> 00:03:39,840
always then you could easily replace the

98
00:03:39,840 --> 00:03:41,280
expression with three

99
00:03:41,280 --> 00:03:43,599
without having any any other

100
00:03:43,599 --> 00:03:44,959
repercussions that is like

101
00:03:44,959 --> 00:03:48,959
no side effects in pure functions

102
00:03:50,640 --> 00:03:53,519
the famous hello world program in kotlin

103
00:03:53,519 --> 00:03:53,920
so

104
00:03:53,920 --> 00:03:55,599
you would see functions are the first

105
00:03:55,599 --> 00:03:57,439
class citizens here you don't need to

106
00:03:57,439 --> 00:03:58,560
have a class

107
00:03:58,560 --> 00:04:01,439
defined to start your to define your

108
00:04:01,439 --> 00:04:02,400
function

109
00:04:02,400 --> 00:04:04,560
uh the have done away with the

110
00:04:04,560 --> 00:04:05,439
semicolons

111
00:04:05,439 --> 00:04:07,519
it's optional and yeah they've removed

112
00:04:07,519 --> 00:04:10,080
the new key i being a java developer

113
00:04:10,080 --> 00:04:12,720
and comparing kotlin mostly to java

114
00:04:12,720 --> 00:04:13,519
language

115
00:04:13,519 --> 00:04:17,199
so well the types are on your right hand

116
00:04:17,199 --> 00:04:17,839
side

117
00:04:17,839 --> 00:04:20,320
and it has a very strong type influence

118
00:04:20,320 --> 00:04:22,079
even if you don't

119
00:04:22,079 --> 00:04:24,560
mention the type the compiler is strong

120
00:04:24,560 --> 00:04:26,560
smart enough to understand it

121
00:04:26,560 --> 00:04:28,639
there are two types of variables in

122
00:04:28,639 --> 00:04:30,160
kotlin one is val

123
00:04:30,160 --> 00:04:33,280
which is immutable or read-only while

124
00:04:33,280 --> 00:04:36,240
there is another var which is your

125
00:04:36,240 --> 00:04:37,280
traditional

126
00:04:37,280 --> 00:04:40,479
uh variables by immutable i

127
00:04:40,479 --> 00:04:44,400
say if i try to give name is equal to hi

128
00:04:44,400 --> 00:04:47,520
again then my i'll get a compiler error

129
00:04:47,520 --> 00:04:48,080
saying

130
00:04:48,080 --> 00:04:51,520
val cannot be reassigned this

131
00:04:51,520 --> 00:04:55,280
basic next now that we know what kotlin

132
00:04:55,280 --> 00:04:56,160
is

133
00:04:56,160 --> 00:05:00,000
why why should you give kotlin

134
00:05:00,000 --> 00:05:02,320
your time why should you even think

135
00:05:02,320 --> 00:05:05,600
about functional programming

136
00:05:05,600 --> 00:05:07,919
functional programming has existed since

137
00:05:07,919 --> 00:05:09,039
1958

138
00:05:09,039 --> 00:05:11,280
since lisp has come out and there were

139
00:05:11,280 --> 00:05:12,160
lots of

140
00:05:12,160 --> 00:05:15,680
new famous languages like haskell scala

141
00:05:15,680 --> 00:05:18,880
or camel but why do you think that

142
00:05:18,880 --> 00:05:21,199
we have started looking into functional

143
00:05:21,199 --> 00:05:22,479
programming all over

144
00:05:22,479 --> 00:05:25,600
again since six years ago

145
00:05:25,600 --> 00:05:28,880
my thoughts some of my my thoughts are

146
00:05:28,880 --> 00:05:29,520
that

147
00:05:29,520 --> 00:05:31,600
because of the availability of the

148
00:05:31,600 --> 00:05:32,639
highly parallel

149
00:05:32,639 --> 00:05:34,720
multi-core architectures that we have in

150
00:05:34,720 --> 00:05:36,400
our hand now which calls for

151
00:05:36,400 --> 00:05:38,320
high concurrency where parallel

152
00:05:38,320 --> 00:05:40,080
executions can happen

153
00:05:40,080 --> 00:05:42,479
for high concurrency you might need

154
00:05:42,479 --> 00:05:44,400
immutability in your code design

155
00:05:44,400 --> 00:05:46,880
and immutability is one of the

156
00:05:46,880 --> 00:05:48,400
cornerstones of functional programming

157
00:05:48,400 --> 00:05:50,160
language

158
00:05:50,160 --> 00:05:52,639
one more reason is nowadays the

159
00:05:52,639 --> 00:05:54,479
compilers and run things are better you

160
00:05:54,479 --> 00:05:54,960
don't

161
00:05:54,960 --> 00:05:57,360
have to be a geek to sit and write a

162
00:05:57,360 --> 00:05:59,360
functional programming language you pick

163
00:05:59,360 --> 00:06:00,560
any modern language

164
00:06:00,560 --> 00:06:02,720
with the features and you're all set you

165
00:06:02,720 --> 00:06:03,919
could just go

166
00:06:03,919 --> 00:06:07,280
writing on it and the last uh

167
00:06:07,280 --> 00:06:10,720
thing that i believe is because java got

168
00:06:10,720 --> 00:06:12,000
it mainstream

169
00:06:12,000 --> 00:06:14,720
you can argue with me later but um if

170
00:06:14,720 --> 00:06:15,199
you

171
00:06:15,199 --> 00:06:18,639
remember in 2014 when java

172
00:06:18,639 --> 00:06:21,280
introduced lambdas and stream api that

173
00:06:21,280 --> 00:06:21,840
is when

174
00:06:21,840 --> 00:06:23,840
we started discussing about functional

175
00:06:23,840 --> 00:06:25,680
programming all over again

176
00:06:25,680 --> 00:06:28,319
that is because javascript is the king

177
00:06:28,319 --> 00:06:29,120
and it has

178
00:06:29,120 --> 00:06:31,120
large fan following so anything that

179
00:06:31,120 --> 00:06:32,319
java gets

180
00:06:32,319 --> 00:06:35,360
does it gets talked about so that was

181
00:06:35,360 --> 00:06:37,440
part of our functional programming

182
00:06:37,440 --> 00:06:41,680
and why kotlin uh because

183
00:06:41,680 --> 00:06:44,000
it is a modern language it gives you

184
00:06:44,000 --> 00:06:44,720
lots of

185
00:06:44,720 --> 00:06:46,880
synthetic sugar it has cherry picked

186
00:06:46,880 --> 00:06:48,720
some of the best features from the new

187
00:06:48,720 --> 00:06:50,560
modern languages and it's giving it to

188
00:06:50,560 --> 00:06:51,120
you

189
00:06:51,120 --> 00:06:52,720
uh one more thing is it's

190
00:06:52,720 --> 00:06:54,160
interoperability with

191
00:06:54,160 --> 00:06:57,520
the java yeah just modern concise and

192
00:06:57,520 --> 00:06:57,840
safe

193
00:06:57,840 --> 00:07:00,319
but with its two variables of val and

194
00:07:00,319 --> 00:07:01,520
var

195
00:07:01,520 --> 00:07:06,000
uh makes sure of the safety type safety

196
00:07:06,000 --> 00:07:08,960
that again i'll talk about it later it

197
00:07:08,960 --> 00:07:10,720
does has even though it is a modern

198
00:07:10,720 --> 00:07:11,520
language

199
00:07:11,520 --> 00:07:15,520
which just uh was released in 2017

200
00:07:15,520 --> 00:07:17,759
even though it started in 2011 but its

201
00:07:17,759 --> 00:07:19,759
first release was in 2017

202
00:07:19,759 --> 00:07:22,000
there are lots of tools and supports by

203
00:07:22,000 --> 00:07:23,120
jetbrain there is like

204
00:07:23,120 --> 00:07:26,080
id intellij ide it works on eclipse as

205
00:07:26,080 --> 00:07:26,400
well

206
00:07:26,400 --> 00:07:29,759
and since google made it one of

207
00:07:29,759 --> 00:07:32,240
the first class languages for android

208
00:07:32,240 --> 00:07:33,039
developers

209
00:07:33,039 --> 00:07:35,520
kotlin has been seeing its popularity

210
00:07:35,520 --> 00:07:36,720
rates

211
00:07:36,720 --> 00:07:39,919
it has a very simple learning curve ah

212
00:07:39,919 --> 00:07:42,960
since the first time when i was

213
00:07:42,960 --> 00:07:45,680
asking what is scotland i started

214
00:07:45,680 --> 00:07:46,879
writing a program

215
00:07:46,879 --> 00:07:49,759
it took me hardly to us yeah just to get

216
00:07:49,759 --> 00:07:50,879
started but then

217
00:07:50,879 --> 00:07:53,280
it's it really is very easy for you to

218
00:07:53,280 --> 00:07:54,560
learn

219
00:07:54,560 --> 00:07:56,560
now that you guys know all the other

220
00:07:56,560 --> 00:07:58,319
programming languages

221
00:07:58,319 --> 00:08:01,199
uh and it has been slowly raising up in

222
00:08:01,199 --> 00:08:02,000
the github

223
00:08:02,000 --> 00:08:05,599
uh ranks now it is completely fifteen

224
00:08:05,599 --> 00:08:08,720
uh it is in may most of the static

225
00:08:08,720 --> 00:08:12,000
statistics kotlin is said least disliked

226
00:08:12,000 --> 00:08:12,400
the

227
00:08:12,400 --> 00:08:15,919
most popular and even in 2019 and

228
00:08:15,919 --> 00:08:18,800
19 it was one of the four languages

229
00:08:18,800 --> 00:08:19,520
which peop

230
00:08:19,520 --> 00:08:23,120
developers wanted to learn

231
00:08:23,759 --> 00:08:26,400
then yes of course lots of apps on

232
00:08:26,400 --> 00:08:27,039
google

233
00:08:27,039 --> 00:08:28,879
are now written in content there were

234
00:08:28,879 --> 00:08:30,160
multiple

235
00:08:30,160 --> 00:08:33,360
uh apps which were slowly which were

236
00:08:33,360 --> 00:08:35,200
written in java which have gotten

237
00:08:35,200 --> 00:08:37,679
converted into kotlin

238
00:08:37,679 --> 00:08:39,679
these should be enough reasons for us to

239
00:08:39,679 --> 00:08:42,880
give kotlin some face

240
00:08:43,120 --> 00:08:46,640
next what and why are done i will

241
00:08:46,640 --> 00:08:49,040
tell about how you can go about using

242
00:08:49,040 --> 00:08:51,599
the cotton

243
00:08:53,680 --> 00:08:56,959
yeah uh in in how i'm gonna introduce

244
00:08:56,959 --> 00:08:58,240
some of the functional

245
00:08:58,240 --> 00:09:00,959
programming concepts that i like and

246
00:09:00,959 --> 00:09:01,360
i'll

247
00:09:01,360 --> 00:09:05,760
be showing how it is written in kotlin

248
00:09:06,320 --> 00:09:09,519
so lambdas essentially

249
00:09:09,519 --> 00:09:12,160
lambdas are anonymous functions in any

250
00:09:12,160 --> 00:09:13,360
programming language

251
00:09:13,360 --> 00:09:15,440
but in kotlin they're not in portland

252
00:09:15,440 --> 00:09:17,760
there's also anonymous functions as well

253
00:09:17,760 --> 00:09:21,200
so in kotlin lambdas are your addoc

254
00:09:21,200 --> 00:09:22,720
functions which were you can write

255
00:09:22,720 --> 00:09:24,240
whenever you want

256
00:09:24,240 --> 00:09:27,519
and uh kotlin gives yeah uh

257
00:09:27,519 --> 00:09:30,160
in java lambdas were introduced in java

258
00:09:30,160 --> 00:09:30,959
8

259
00:09:30,959 --> 00:09:34,000
but kotlin was the first thing a first

260
00:09:34,000 --> 00:09:35,680
programming language which made it

261
00:09:35,680 --> 00:09:38,160
available for the android developers

262
00:09:38,160 --> 00:09:40,480
it also has very powerful lambda

263
00:09:40,480 --> 00:09:41,279
features

264
00:09:41,279 --> 00:09:44,000
not just the simple thing that we were

265
00:09:44,000 --> 00:09:45,120
working on java

266
00:09:45,120 --> 00:09:47,920
but then uh in kotlin it gives the

267
00:09:47,920 --> 00:09:48,640
compiler

268
00:09:48,640 --> 00:09:51,519
takes care of kotlin as a first class

269
00:09:51,519 --> 00:09:52,880
feature

270
00:09:52,880 --> 00:09:55,200
and most of the android developers have

271
00:09:55,200 --> 00:09:57,040
been using it and have been very

272
00:09:57,040 --> 00:10:01,120
happy about it here i have

273
00:10:01,120 --> 00:10:05,760
the variable double gets

274
00:10:05,760 --> 00:10:08,640
the value of the lambda where i'm gonna

275
00:10:08,640 --> 00:10:09,600
give

276
00:10:09,600 --> 00:10:11,680
take an integer multiply it by two and

277
00:10:11,680 --> 00:10:12,800
give it a

278
00:10:12,800 --> 00:10:15,360
chord of block into curly braces and

279
00:10:15,360 --> 00:10:17,279
passed as an expression is lambda

280
00:10:17,279 --> 00:10:19,120
in kotlin that is what is happening

281
00:10:19,120 --> 00:10:21,440
there ah if the same thing

282
00:10:21,440 --> 00:10:24,160
the same thing in kotlin as anonymous

283
00:10:24,160 --> 00:10:25,680
functions would have been a named

284
00:10:25,680 --> 00:10:28,000
function double which takes an integer

285
00:10:28,000 --> 00:10:30,079
and returns integer but in

286
00:10:30,079 --> 00:10:32,000
with lambda you could just simply put

287
00:10:32,000 --> 00:10:33,360
your code into the

288
00:10:33,360 --> 00:10:37,279
curly braces and most of the times uh

289
00:10:37,279 --> 00:10:40,720
lambdas take single parameters so kotlin

290
00:10:40,720 --> 00:10:45,120
allows you to use the keyword it

291
00:10:45,120 --> 00:10:47,360
the compiler is smart enough to

292
00:10:47,360 --> 00:10:49,120
understand the signature of it at a

293
00:10:49,120 --> 00:10:50,560
later time you could just go ahead and

294
00:10:50,560 --> 00:10:51,519
do

295
00:10:51,519 --> 00:10:54,480
it into two and it will still understand

296
00:10:54,480 --> 00:10:55,279
so when i

297
00:10:55,279 --> 00:11:01,279
call double two i get my answer

298
00:11:01,279 --> 00:11:04,480
next one is next feature is the higher

299
00:11:04,480 --> 00:11:05,680
order function

300
00:11:05,680 --> 00:11:08,320
so higher order function is nothing but

301
00:11:08,320 --> 00:11:09,760
a function

302
00:11:09,760 --> 00:11:12,720
taking a function as a parameter and our

303
00:11:12,720 --> 00:11:13,200
or

304
00:11:13,200 --> 00:11:16,240
returning the function is higher order

305
00:11:16,240 --> 00:11:17,200
function basically

306
00:11:17,200 --> 00:11:19,519
lambdas are also part of higher order

307
00:11:19,519 --> 00:11:20,560
functions

308
00:11:20,560 --> 00:11:25,120
if you see here i have uh defined a

309
00:11:25,120 --> 00:11:27,920
higher order function galaxy which takes

310
00:11:27,920 --> 00:11:29,279
two integer values

311
00:11:29,279 --> 00:11:32,560
and it also takes a parameter function

312
00:11:32,560 --> 00:11:35,839
i mean which is called operation

313
00:11:35,839 --> 00:11:38,959
it returns the operation which is like

314
00:11:38,959 --> 00:11:40,320
the result of

315
00:11:40,320 --> 00:11:42,480
whatever operation that happens within

316
00:11:42,480 --> 00:11:44,160
that uh whatever

317
00:11:44,160 --> 00:11:46,160
result of the function operator from

318
00:11:46,160 --> 00:11:48,240
operation function

319
00:11:48,240 --> 00:11:51,920
i am then declaring uh some function

320
00:11:51,920 --> 00:11:54,959
which is similar to the operation

321
00:11:54,959 --> 00:11:56,000
function that i've already

322
00:11:56,000 --> 00:11:59,040
defined why i'm doing this is in kotlin

323
00:11:59,040 --> 00:11:59,600
you can

324
00:11:59,600 --> 00:12:03,600
pass uh you can pass

325
00:12:03,600 --> 00:12:06,000
a function as a parameter to another

326
00:12:06,000 --> 00:12:07,120
higher order function

327
00:12:07,120 --> 00:12:09,440
in two ways one is by passing an

328
00:12:09,440 --> 00:12:11,440
existing

329
00:12:11,440 --> 00:12:15,519
function or you could write a lambda

330
00:12:15,519 --> 00:12:18,720
lambda function and pass it on in uh

331
00:12:18,720 --> 00:12:22,079
uh for for my variable sum

332
00:12:22,079 --> 00:12:25,360
i'm doing i'm uh passing the

333
00:12:25,360 --> 00:12:27,600
existing function the path that i use

334
00:12:27,600 --> 00:12:28,800
this double colon

335
00:12:28,800 --> 00:12:31,360
in kotlin the double colon would

336
00:12:31,360 --> 00:12:32,399
reference

337
00:12:32,399 --> 00:12:35,600
the function by its name passing three

338
00:12:35,600 --> 00:12:38,880
four in the sum then uh

339
00:12:38,880 --> 00:12:41,600
yeah in the next way i'm passing the two

340
00:12:41,600 --> 00:12:44,800
integers and then i'm passing the lambda

341
00:12:44,800 --> 00:12:49,920
for the uh calci higher order function

342
00:12:50,079 --> 00:12:54,079
my result would be 7 and 12.

343
00:12:54,079 --> 00:12:56,240
here in this higher order function you

344
00:12:56,240 --> 00:12:58,079
saw the function

345
00:12:58,079 --> 00:13:01,200
taking a function has a parameter

346
00:13:01,200 --> 00:13:04,320
now we'll see a higher order function

347
00:13:04,320 --> 00:13:07,839
returning a function

348
00:13:08,079 --> 00:13:11,680
so here i have uh defined

349
00:13:11,680 --> 00:13:14,320
a higher order function operation which

350
00:13:14,320 --> 00:13:14,800
actually

351
00:13:14,800 --> 00:13:18,480
returns a function then i'm defining

352
00:13:18,480 --> 00:13:21,760
a square function which is similar or

353
00:13:21,760 --> 00:13:22,320
which

354
00:13:22,320 --> 00:13:25,440
has the same signature as operation in

355
00:13:25,440 --> 00:13:27,120
my main function a method

356
00:13:27,120 --> 00:13:29,920
when ah the variable function actually

357
00:13:29,920 --> 00:13:30,959
gets the result

358
00:13:30,959 --> 00:13:33,040
of operation which is nothing but the

359
00:13:33,040 --> 00:13:34,480
square function

360
00:13:34,480 --> 00:13:37,360
so now when i call the a function as 2

361
00:13:37,360 --> 00:13:37,680
for

362
00:13:37,680 --> 00:13:40,320
function func with 2 it's actually

363
00:13:40,320 --> 00:13:42,560
executing the square

364
00:13:42,560 --> 00:13:46,720
okay i hope i'm not confused

365
00:13:46,720 --> 00:13:50,480
so when i call from 2 it is

366
00:13:50,480 --> 00:13:52,720
uh i mean function is already got the

367
00:13:52,720 --> 00:13:53,760
square function

368
00:13:53,760 --> 00:13:57,680
as its value and when i pass 2 into it

369
00:13:57,680 --> 00:14:00,079
it is executing the square function and

370
00:14:00,079 --> 00:14:01,120
giving me the

371
00:14:01,120 --> 00:14:03,839
value s4

372
00:14:05,440 --> 00:14:08,320
kotlin language as such doesn't has all

373
00:14:08,320 --> 00:14:09,920
the things necessary for

374
00:14:09,920 --> 00:14:12,480
uh giving the higher order function but

375
00:14:12,480 --> 00:14:13,120
it

376
00:14:13,120 --> 00:14:16,639
because of its in interoperability

377
00:14:16,639 --> 00:14:19,360
it makes use of java collections hugely

378
00:14:19,360 --> 00:14:21,120
so the building blocks of these higher

379
00:14:21,120 --> 00:14:21,920
order functions

380
00:14:21,920 --> 00:14:26,320
are your filter map and for each so

381
00:14:26,320 --> 00:14:29,760
yeah kotlin can make use all of these

382
00:14:29,760 --> 00:14:31,680
sting

383
00:14:31,680 --> 00:14:35,199
i am using the lambda

384
00:14:35,199 --> 00:14:38,399
i've used multiple lambda

385
00:14:42,320 --> 00:14:44,800
yeah the next feature and one of my

386
00:14:44,800 --> 00:14:46,880
favorite feature is closure

387
00:14:46,880 --> 00:14:50,160
ah so what is closure closure is

388
00:14:50,160 --> 00:14:53,199
something which you will get mainly in

389
00:14:53,199 --> 00:14:54,959
functional programming itself

390
00:14:54,959 --> 00:14:59,360
which stores your state of the function

391
00:14:59,360 --> 00:15:03,440
wherever so let let's see the program

392
00:15:03,440 --> 00:15:06,639
to understand it much better i'm i have

393
00:15:06,639 --> 00:15:08,240
my closure maker

394
00:15:08,240 --> 00:15:11,199
function which returns nothing unit is

395
00:15:11,199 --> 00:15:13,199
equivalent to void in java

396
00:15:13,199 --> 00:15:16,399
it takes a variable num

397
00:15:16,399 --> 00:15:19,199
which is to 0 and then it keeps

398
00:15:19,199 --> 00:15:20,720
returning a print

399
00:15:20,720 --> 00:15:22,880
println statement where i'm incrementing

400
00:15:22,880 --> 00:15:24,320
the num

401
00:15:24,320 --> 00:15:27,600
in my main function i make instance of

402
00:15:27,600 --> 00:15:28,720
the closure maker

403
00:15:28,720 --> 00:15:32,240
my counter and my counter one if you see

404
00:15:32,240 --> 00:15:35,040
i call my counter four times then i call

405
00:15:35,040 --> 00:15:36,639
my counter two times

406
00:15:36,639 --> 00:15:39,759
and again and my counter one once the

407
00:15:39,759 --> 00:15:40,880
result here

408
00:15:40,880 --> 00:15:44,399
is the first time it is like first time

409
00:15:44,399 --> 00:15:48,480
my counter 1 has the variable num

410
00:15:48,480 --> 00:15:51,120
it has the reference to the variable num

411
00:15:51,120 --> 00:15:53,360
and it keeps incrementing it

412
00:15:53,360 --> 00:15:56,000
as i keep calling the uh instance again

413
00:15:56,000 --> 00:15:56,880
and again

414
00:15:56,880 --> 00:16:00,959
while i call my counter to closure

415
00:16:00,959 --> 00:16:04,240
my counter 2 has a different uh variable

416
00:16:04,240 --> 00:16:05,519
reference for num

417
00:16:05,519 --> 00:16:08,480
and it starts from 0 and one but

418
00:16:08,480 --> 00:16:10,480
remember when i come back and call my my

419
00:16:10,480 --> 00:16:11,199
count to one

420
00:16:11,199 --> 00:16:14,560
closure instance it is it go it retains

421
00:16:14,560 --> 00:16:15,440
the state

422
00:16:15,440 --> 00:16:17,839
of this function so it still has the

423
00:16:17,839 --> 00:16:18,880
three stored in it

424
00:16:18,880 --> 00:16:22,800
so when it gets plus a plus plus we i

425
00:16:22,800 --> 00:16:26,160
get my result as 4 so this

426
00:16:26,160 --> 00:16:29,680
is very important where you

427
00:16:29,680 --> 00:16:34,320
uh you want the state to be retained

428
00:16:34,320 --> 00:16:36,560
the cases uh multiple cases where you

429
00:16:36,560 --> 00:16:39,440
will be requiring it

430
00:16:39,440 --> 00:16:43,120
just tell it yeah the next

431
00:16:43,120 --> 00:16:46,959
uh feature are the extension functions

432
00:16:46,959 --> 00:16:50,880
so kotlin allows you to extend

433
00:16:50,880 --> 00:16:54,079
any function type

434
00:16:54,079 --> 00:16:56,079
so that you will be able to make use of

435
00:16:56,079 --> 00:16:57,759
new functionalities without

436
00:16:57,759 --> 00:17:00,880
inheriting the class so here i am

437
00:17:00,880 --> 00:17:04,240
extending and function swap to the

438
00:17:04,240 --> 00:17:07,359
mutable list to the receiver mutable

439
00:17:07,359 --> 00:17:08,240
list

440
00:17:08,240 --> 00:17:11,839
and when i use the swap on the mutable

441
00:17:11,839 --> 00:17:12,240
list

442
00:17:12,240 --> 00:17:15,679
in instance i'll be able to easily

443
00:17:15,679 --> 00:17:18,959
use it even without inheriting this from

444
00:17:18,959 --> 00:17:22,480
a different class so now

445
00:17:22,480 --> 00:17:26,160
uh my abc's value will be i'm swapping

446
00:17:26,160 --> 00:17:33,840
the 0th and the second location 3 to 1.

447
00:17:34,559 --> 00:17:37,200
next features are a composition and

448
00:17:37,200 --> 00:17:38,960
curling

449
00:17:38,960 --> 00:17:41,919
kotlin provides partial functional

450
00:17:41,919 --> 00:17:42,559
programming

451
00:17:42,559 --> 00:17:45,360
it it in its main libraries it doesn't

452
00:17:45,360 --> 00:17:45,760
have

453
00:17:45,760 --> 00:17:48,080
everything to do all of these things but

454
00:17:48,080 --> 00:17:49,200
there are the

455
00:17:49,200 --> 00:17:51,200
libraries available outside if you see

456
00:17:51,200 --> 00:17:53,120
the org functional

457
00:17:53,120 --> 00:17:55,520
if you import them you will be able to

458
00:17:55,520 --> 00:17:57,280
do this composition and curry

459
00:17:57,280 --> 00:18:00,640
so what is composition it is like

460
00:18:00,640 --> 00:18:03,679
composing by as the name says

461
00:18:03,679 --> 00:18:07,200
it is adding two functions

462
00:18:07,200 --> 00:18:10,080
and uh two or more functions and making

463
00:18:10,080 --> 00:18:11,760
a new function

464
00:18:11,760 --> 00:18:14,799
in my program here i have a function add

465
00:18:14,799 --> 00:18:15,360
phi

466
00:18:15,360 --> 00:18:17,840
where i'm given a lambda where my

467
00:18:17,840 --> 00:18:18,880
integer

468
00:18:18,880 --> 00:18:22,080
plus 5 is the output and i have

469
00:18:22,080 --> 00:18:23,840
multiplied by 2

470
00:18:23,840 --> 00:18:26,320
i'm doing my integer into 2 then i'm

471
00:18:26,320 --> 00:18:28,240
creating a new function

472
00:18:28,240 --> 00:18:31,760
new function uh whose value

473
00:18:31,760 --> 00:18:33,840
i'm giving it to the variable multiply

474
00:18:33,840 --> 00:18:34,799
by two and

475
00:18:34,799 --> 00:18:38,160
add five how i'm creating it is

476
00:18:38,160 --> 00:18:40,960
i'm gonna add the second function use

477
00:18:40,960 --> 00:18:42,559
the compose keyboard

478
00:18:42,559 --> 00:18:45,919
and multiply by two so the

479
00:18:45,919 --> 00:18:49,280
output of the first uh

480
00:18:49,280 --> 00:18:51,120
first function which is multiplied by

481
00:18:51,120 --> 00:18:53,679
two is given as the input

482
00:18:53,679 --> 00:18:56,880
to the second function add 5 finally now

483
00:18:56,880 --> 00:18:58,640
i can simply call

484
00:18:58,640 --> 00:19:01,679
multiply by 2 and add 5 and i can pass

485
00:19:01,679 --> 00:19:02,880
my value there

486
00:19:02,880 --> 00:19:06,080
that would be like i have

487
00:19:06,080 --> 00:19:09,039
two things and i have apples and mangos

488
00:19:09,039 --> 00:19:09,679
and

489
00:19:09,679 --> 00:19:13,120
making a fruit salad out there uh

490
00:19:13,120 --> 00:19:16,160
yeah while currying is total

491
00:19:16,160 --> 00:19:18,880
opposite to composition where if you

492
00:19:18,880 --> 00:19:20,880
have a function that takes two or more

493
00:19:20,880 --> 00:19:22,000
parameters

494
00:19:22,000 --> 00:19:25,120
you will split it into functions

495
00:19:25,120 --> 00:19:27,679
that will take single parameter every

496
00:19:27,679 --> 00:19:28,480
time

497
00:19:28,480 --> 00:19:31,840
for instance i have i have my variable

498
00:19:31,840 --> 00:19:34,640
i have my lambda function where ah some

499
00:19:34,640 --> 00:19:36,000
two ins

500
00:19:36,000 --> 00:19:38,320
will be uh taking two integers and

501
00:19:38,320 --> 00:19:39,360
giving me the

502
00:19:39,360 --> 00:19:42,880
some of it but instead of letting it

503
00:19:42,880 --> 00:19:46,400
take two integers i want it to be

504
00:19:46,400 --> 00:19:50,000
carried and take single individual

505
00:19:50,000 --> 00:19:52,720
uh parameters and then give me uh the

506
00:19:52,720 --> 00:19:53,760
same result that

507
00:19:53,760 --> 00:19:56,799
it would do yeah

508
00:19:56,799 --> 00:20:00,160
so the result for the power here

509
00:20:00,160 --> 00:20:03,760
if you do some to end i mean uh imagine

510
00:20:03,760 --> 00:20:05,120
i have a something

511
00:20:05,120 --> 00:20:08,240
function and then i give

512
00:20:08,240 --> 00:20:10,880
i give two parameters i will only be

513
00:20:10,880 --> 00:20:12,400
able to pass them as two

514
00:20:12,400 --> 00:20:14,799
comma four i won't be able to do the

515
00:20:14,799 --> 00:20:15,919
same uh some

516
00:20:15,919 --> 00:20:18,799
as two closed braces and four it'll

517
00:20:18,799 --> 00:20:19,760
throw me an

518
00:20:19,760 --> 00:20:22,880
invalid error but the same can be curry

519
00:20:22,880 --> 00:20:25,919
i'm doing some to ins dot curry

520
00:20:25,919 --> 00:20:28,880
and then i'm able to make use of my new

521
00:20:28,880 --> 00:20:29,600
function

522
00:20:29,600 --> 00:20:33,520
creed or the new function value which is

523
00:20:33,520 --> 00:20:38,960
yeah the result will still be same

524
00:20:43,919 --> 00:20:47,679
okay i think uh because i was very

525
00:20:47,679 --> 00:20:50,000
worried i would talk a lot of things

526
00:20:50,000 --> 00:20:52,320
i just cut down everything to keep it

527
00:20:52,320 --> 00:20:54,000
short and this is all

528
00:20:54,000 --> 00:20:57,520
kind of i had i can

529
00:20:57,520 --> 00:21:00,080
talk about more controversies about the

530
00:21:00,080 --> 00:21:00,880
clinton thing but

531
00:21:00,880 --> 00:21:03,440
maybe maybe i think that should be

532
00:21:03,440 --> 00:21:04,159
enough

533
00:21:04,159 --> 00:21:05,840
advice book i'll just go to my

534
00:21:05,840 --> 00:21:07,919
conclusion and

535
00:21:07,919 --> 00:21:10,720
i'll let you guys ask me some questions

536
00:21:10,720 --> 00:21:11,919
uh

537
00:21:11,919 --> 00:21:17,840
yeah uh

538
00:21:28,240 --> 00:21:31,679
um i already reached my conclusion so

539
00:21:31,679 --> 00:21:34,480
all i wanted to say was functional

540
00:21:34,480 --> 00:21:36,320
programming is a journey

541
00:21:36,320 --> 00:21:39,679
but then once you get to know it see it

542
00:21:39,679 --> 00:21:43,200
and see how easily you could make use of

543
00:21:43,200 --> 00:21:44,720
it in your programming language that's

544
00:21:44,720 --> 00:21:45,600
when you get

545
00:21:45,600 --> 00:21:48,159
start getting comfortable with it and uh

546
00:21:48,159 --> 00:21:48,960
see its

547
00:21:48,960 --> 00:21:52,400
advantages uh of using

548
00:21:52,400 --> 00:21:56,400
it in your programming language and then

549
00:21:56,400 --> 00:21:59,840
uh yeah you'll stick to it so kotlin for

550
00:21:59,840 --> 00:22:00,320
me

551
00:22:00,320 --> 00:22:02,559
made learning functional programming

552
00:22:02,559 --> 00:22:03,760
easier

553
00:22:03,760 --> 00:22:06,480
i was able to write all of this code

554
00:22:06,480 --> 00:22:07,039
very

555
00:22:07,039 --> 00:22:09,440
uh simply as i kept reading i was able

556
00:22:09,440 --> 00:22:10,840
to understand it

557
00:22:10,840 --> 00:22:14,960
so yes and

558
00:22:14,960 --> 00:22:17,280
even though i'm a big java fan java

559
00:22:17,280 --> 00:22:18,480
owing to its

560
00:22:18,480 --> 00:22:21,360
massiveness and 25 decades of code

561
00:22:21,360 --> 00:22:23,440
attached it's not that easy for it to

562
00:22:23,440 --> 00:22:24,960
take all the new features and

563
00:22:24,960 --> 00:22:28,400
implement it but then the

564
00:22:28,400 --> 00:22:31,280
when i realized that i could do both

565
00:22:31,280 --> 00:22:31,840
kotlin

566
00:22:31,840 --> 00:22:34,559
and java together that in conjunction

567
00:22:34,559 --> 00:22:35,360
that really

568
00:22:35,360 --> 00:22:38,559
made me happy and i've been using them

569
00:22:38,559 --> 00:22:40,799
in my external projects to see how

570
00:22:40,799 --> 00:22:41,600
kotlin would

571
00:22:41,600 --> 00:22:45,360
actually work yeah

572
00:22:45,360 --> 00:22:48,480
so to each its own programming language

573
00:22:48,480 --> 00:22:50,880
but i would really urge you guys to go

574
00:22:50,880 --> 00:22:51,679
give kotlin

575
00:22:51,679 --> 00:22:53,919
and functional programming a chance take

576
00:22:53,919 --> 00:22:55,840
a look at it if you like it

577
00:22:55,840 --> 00:22:58,240
go and we could go and contribute to

578
00:22:58,240 --> 00:22:59,840
kotlin uh

579
00:22:59,840 --> 00:23:02,000
or i mean in github kotlin is there

580
00:23:02,000 --> 00:23:03,200
could contribute to the

581
00:23:03,200 --> 00:23:06,720
uh by the pr's and you could build this

582
00:23:06,720 --> 00:23:07,600
new language

583
00:23:07,600 --> 00:23:10,640
the better way that you want so

584
00:23:10,640 --> 00:23:14,159
yeah i had only so much

585
00:23:14,159 --> 00:23:16,720
thank you that was really interesting uh

586
00:23:16,720 --> 00:23:18,720
we've got some questions actually on

587
00:23:18,720 --> 00:23:21,520
the stream so let me ask you the first

588
00:23:21,520 --> 00:23:22,400
one so

589
00:23:22,400 --> 00:23:25,120
in your opinion what was the best or a

590
00:23:25,120 --> 00:23:27,280
really good resource to learn kotlin

591
00:23:27,280 --> 00:23:30,400
is there any course that you'd recommend

592
00:23:30,400 --> 00:23:35,039
ah the course or the materials that

593
00:23:35,039 --> 00:23:37,360
kotlin or this made available including

594
00:23:37,360 --> 00:23:38,720
the cochlear implants they're

595
00:23:38,720 --> 00:23:42,000
very very good i didn't have to go out

596
00:23:42,000 --> 00:23:42,720
and read

597
00:23:42,720 --> 00:23:45,840
any anything other than what hotline

598
00:23:45,840 --> 00:23:48,960
accounts had or sorry i do have

599
00:23:48,960 --> 00:23:51,039
certain links that i'll be sharing where

600
00:23:51,039 --> 00:23:52,159
i was able to

601
00:23:52,159 --> 00:23:54,159
uh immediately write the programs for

602
00:23:54,159 --> 00:23:55,600
whatever i was learning

603
00:23:55,600 --> 00:23:58,880
and uh check check on it but

604
00:23:58,880 --> 00:24:02,080
otherwise yes i was following uh

605
00:24:02,080 --> 00:24:06,240
harry uh his uh presentations everywhere

606
00:24:06,240 --> 00:24:10,559
so these were what helped me in portland

607
00:24:10,559 --> 00:24:11,760
if you could share this on the slack

608
00:24:11,760 --> 00:24:14,799
that would be fantastic yes

609
00:24:14,799 --> 00:24:17,120
great and uh we had here another

610
00:24:17,120 --> 00:24:18,799
question so they wanted to know

611
00:24:18,799 --> 00:24:20,320
uh we've got an anonymous person asking

612
00:24:20,320 --> 00:24:21,760
if they wanted to know if you'd had the

613
00:24:21,760 --> 00:24:23,679
chance to compare kotlin and groovy

614
00:24:23,679 --> 00:24:26,880
in terms of performance at all ah

615
00:24:26,880 --> 00:24:30,960
not sorry no worries absolutely fine

616
00:24:30,960 --> 00:24:32,880
so there's another question here asking

617
00:24:32,880 --> 00:24:34,080
in a few cases

618
00:24:34,080 --> 00:24:36,240
kotlin works faster than java especially

619
00:24:36,240 --> 00:24:38,000
performing incremental builds

620
00:24:38,000 --> 00:24:40,000
but java is still supreme when it comes

621
00:24:40,000 --> 00:24:41,840
to clean building

622
00:24:41,840 --> 00:24:44,559
is it still super easy yes yes it is

623
00:24:44,559 --> 00:24:45,039
true

624
00:24:45,039 --> 00:24:48,240
uh but then in the latest uh uh kotlin

625
00:24:48,240 --> 00:24:52,080
uh 103.70 that they did uh

626
00:24:52,080 --> 00:24:55,039
public release in january 2020 they

627
00:24:55,039 --> 00:24:57,120
tried to fix this problem they tried to

628
00:24:57,120 --> 00:25:00,159
bring down the build time uh

629
00:25:00,159 --> 00:25:03,120
properly because they are the community

630
00:25:03,120 --> 00:25:03,840
is aware

631
00:25:03,840 --> 00:25:06,720
of certain things very quickly while the

632
00:25:06,720 --> 00:25:07,279
other

633
00:25:07,279 --> 00:25:10,159
doesn't like the i mean like the

634
00:25:10,159 --> 00:25:10,720
engineer

635
00:25:10,720 --> 00:25:13,600
said java is clean but kotlin it still

636
00:25:13,600 --> 00:25:14,000
needs

637
00:25:14,000 --> 00:25:17,200
work they but the improvement

638
00:25:17,200 --> 00:25:20,480
of the work is still going on okay great

639
00:25:20,480 --> 00:25:22,799
thank you uh and then we've got another

640
00:25:22,799 --> 00:25:24,000
question saying

641
00:25:24,000 --> 00:25:26,720
so you said in your presentation how

642
00:25:26,720 --> 00:25:28,799
kotlin doesn't offer a complete

643
00:25:28,799 --> 00:25:30,320
functional programming instead of as

644
00:25:30,320 --> 00:25:33,039
partial is that a disadvantage to kotlin

645
00:25:33,039 --> 00:25:34,559
does that does that make any difference

646
00:25:34,559 --> 00:25:36,320
how did you find that

647
00:25:36,320 --> 00:25:38,880
no it doesn't that's because we have

648
00:25:38,880 --> 00:25:40,960
these extra libraries which work

649
00:25:40,960 --> 00:25:43,520
absolutely fine as if they they are part

650
00:25:43,520 --> 00:25:44,240
of scotland

651
00:25:44,240 --> 00:25:47,440
so you are not disadvantaged at all i

652
00:25:47,440 --> 00:25:49,679
didn't see any performance lag as well

653
00:25:49,679 --> 00:25:52,559
it is as simple as you using the

654
00:25:52,559 --> 00:25:54,320
third-party libraries in java

655
00:25:54,320 --> 00:25:58,080
so it's great and you said you moved

656
00:25:58,080 --> 00:25:59,520
from so you were originally a

657
00:25:59,520 --> 00:26:01,200
java programmer and then you started

658
00:26:01,200 --> 00:26:03,279
learning kotlin what do you think

659
00:26:03,279 --> 00:26:06,080
is your the hardest part about learning

660
00:26:06,080 --> 00:26:07,200
kotlin we've said about

661
00:26:07,200 --> 00:26:09,200
the ease of being able to move between

662
00:26:09,200 --> 00:26:11,440
java and kotlin and use them it together

663
00:26:11,440 --> 00:26:14,640
what's the hardest part the hardest part

664
00:26:14,640 --> 00:26:18,240
is bringing it back to my work

665
00:26:18,240 --> 00:26:21,440
i'm just learning kotlin outside as my

666
00:26:21,440 --> 00:26:24,400
uh interest applications it's because

667
00:26:24,400 --> 00:26:26,559
i'm a java developer i could never even

668
00:26:26,559 --> 00:26:29,279
imagine uh bringing kotlin into my work

669
00:26:29,279 --> 00:26:30,400
that was

670
00:26:30,400 --> 00:26:33,679
that is hardest for me but uh other than

671
00:26:33,679 --> 00:26:35,360
that

672
00:26:35,360 --> 00:26:39,039
yeah maybe i'm curated to just

673
00:26:39,039 --> 00:26:41,360
work along the applications that i've

674
00:26:41,360 --> 00:26:42,159
read about

675
00:26:42,159 --> 00:26:44,880
it and i've not seen its actual use in

676
00:26:44,880 --> 00:26:45,919
the development

677
00:26:45,919 --> 00:26:48,720
so maybe that's why i haven't hit my

678
00:26:48,720 --> 00:26:50,080
hardest here

679
00:26:50,080 --> 00:26:52,000
yep no right and we have another

680
00:26:52,000 --> 00:26:53,440
question which is

681
00:26:53,440 --> 00:26:55,279
uh as kotlin is still in improvement

682
00:26:55,279 --> 00:26:56,799
mode uh we cannot just move in

683
00:26:56,799 --> 00:26:58,480
production from java to kotlin your

684
00:26:58,480 --> 00:27:00,080
thoughts

685
00:27:00,080 --> 00:27:04,080
yes absolutely you you cannot move

686
00:27:04,080 --> 00:27:06,880
uh even though multiple uh companies

687
00:27:06,880 --> 00:27:07,279
like

688
00:27:07,279 --> 00:27:10,720
netflix twitter and uh uber have been

689
00:27:10,720 --> 00:27:11,200
moving

690
00:27:11,200 --> 00:27:14,000
parts of the module from java to kotlin

691
00:27:14,000 --> 00:27:15,120
they have had

692
00:27:15,120 --> 00:27:17,840
uh both advantage and disadvantage we

693
00:27:17,840 --> 00:27:20,720
don't get to hear all that but then

694
00:27:20,720 --> 00:27:24,240
unless you're sure unless you have a

695
00:27:24,240 --> 00:27:27,039
fully uh working kotlin developers in

696
00:27:27,039 --> 00:27:27,840
your team

697
00:27:27,840 --> 00:27:30,159
and your project is small to begin with

698
00:27:30,159 --> 00:27:31,919
you shouldn't simply jump in and

699
00:27:31,919 --> 00:27:35,360
bring your complete java production into

700
00:27:35,360 --> 00:27:37,600
kotlin you could just start off in bits

701
00:27:37,600 --> 00:27:39,200
and pieces

702
00:27:39,200 --> 00:27:41,520
that would be the way to go like seeing

703
00:27:41,520 --> 00:27:44,080
all the other companies

704
00:27:44,080 --> 00:27:45,760
uh we got a few people asking for your

705
00:27:45,760 --> 00:27:47,279
twitter handle what's your twitter

706
00:27:47,279 --> 00:27:48,720
handle

707
00:27:48,720 --> 00:27:52,080
uh sorry my twitter handle yeah

708
00:27:52,080 --> 00:27:55,760
yeah it is uh j s h r e e s k

709
00:27:55,760 --> 00:27:57,039
cool and if you can place it on the

710
00:27:57,039 --> 00:27:59,120
slack afterwards that would be great yes

711
00:27:59,120 --> 00:28:01,360
and then one last question before you go

712
00:28:01,360 --> 00:28:02,480
is kotlin good

713
00:28:02,480 --> 00:28:06,559
for creating uh microservices

714
00:28:06,960 --> 00:28:10,559
the um the kotlin native that i

715
00:28:10,559 --> 00:28:13,760
uh spoke about there is uh talk and

716
00:28:13,760 --> 00:28:14,399
research

717
00:28:14,399 --> 00:28:17,279
going on on create building uh using it

718
00:28:17,279 --> 00:28:17,679
for

719
00:28:17,679 --> 00:28:20,799
creating micro services but uh i

720
00:28:20,799 --> 00:28:24,159
personally haven't tested so i maybe i'm

721
00:28:24,159 --> 00:28:24,640
not

722
00:28:24,640 --> 00:28:26,960
right person to answer that question but

723
00:28:26,960 --> 00:28:28,480
i'll get back

724
00:28:28,480 --> 00:28:30,080
okay yeah absolutely you can post in the

725
00:28:30,080 --> 00:28:31,360
slack later on about that if you'd like

726
00:28:31,360 --> 00:28:32,080
to

727
00:28:32,080 --> 00:28:33,679
fantastic thank you so much joshie and

728
00:28:33,679 --> 00:28:35,039
for everyone who i haven't answered

729
00:28:35,039 --> 00:28:36,480
their questions please post them in our

730
00:28:36,480 --> 00:28:37,279
slack channel

731
00:28:37,279 --> 00:28:38,799
uh jay will be around afterwards to

732
00:28:38,799 --> 00:28:40,720
answer all of them but thank you so much

733
00:28:40,720 --> 00:28:42,480
for presenting such an interesting talk

734
00:28:42,480 --> 00:28:45,200
appreciate it thank you very much no

735
00:28:45,200 --> 00:28:47,840
worries thank you

