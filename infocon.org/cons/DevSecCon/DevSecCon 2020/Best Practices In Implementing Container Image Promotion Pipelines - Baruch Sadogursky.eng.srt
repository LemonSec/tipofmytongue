1
00:00:00,480 --> 00:00:02,320
and uh and what are you going to be

2
00:00:02,320 --> 00:00:03,840
talking about today there looks like

3
00:00:03,840 --> 00:00:05,279
best practices and implementing

4
00:00:05,279 --> 00:00:07,520
container image promotion pipeline

5
00:00:07,520 --> 00:00:08,480
sounds interesting

6
00:00:08,480 --> 00:00:11,120
that's a mouthful but it's basically how

7
00:00:11,120 --> 00:00:12,240
we

8
00:00:12,240 --> 00:00:15,599
how we deal better with docker images

9
00:00:15,599 --> 00:00:18,640
and where it usually bites us

10
00:00:18,640 --> 00:00:21,039
in the hours and how can we avoid it for

11
00:00:21,039 --> 00:00:22,640
the future

12
00:00:22,640 --> 00:00:24,880
cool cool and uh your role uh you're

13
00:00:24,880 --> 00:00:26,640
you're a jfrogger developer advocate

14
00:00:26,640 --> 00:00:27,439
jfrog

15
00:00:27,439 --> 00:00:30,240
yeah i'm head of devops advocacy jfrog

16
00:00:30,240 --> 00:00:31,920
and also chief sticker officer

17
00:00:31,920 --> 00:00:35,040
which is a very very important role as

18
00:00:35,040 --> 00:00:38,160
as we know yeah yeah so it's it's

19
00:00:38,160 --> 00:00:38,960
basically

20
00:00:38,960 --> 00:00:41,120
speaking and stickers the important

21
00:00:41,120 --> 00:00:42,559
parts of of the rail

22
00:00:42,559 --> 00:00:44,719
yeah and how how has a how is the role

23
00:00:44,719 --> 00:00:46,719
of a chief sticker officer been affected

24
00:00:46,719 --> 00:00:47,440
by uh

25
00:00:47,440 --> 00:00:49,680
by obviously this uh working from home

26
00:00:49,680 --> 00:00:51,840
oh i cannot ship stickers anymore

27
00:00:51,840 --> 00:00:54,079
that must be tough it must be tough yeah

28
00:00:54,079 --> 00:00:55,039
absolutely

29
00:00:55,039 --> 00:00:57,039
so baruch we're get we're against the

30
00:00:57,039 --> 00:00:58,239
clock i don't want to take any much more

31
00:00:58,239 --> 00:00:59,600
of your time so i'll

32
00:00:59,600 --> 00:01:01,120
i'll bring your presentation and i'll

33
00:01:01,120 --> 00:01:02,960
pass it right over to you

34
00:01:02,960 --> 00:01:06,159
perfect all right okay so let's see how

35
00:01:06,159 --> 00:01:06,960
this thing

36
00:01:06,960 --> 00:01:08,740
works um

37
00:01:08,740 --> 00:01:10,080
[Music]

38
00:01:10,080 --> 00:01:12,799
if i do that you should see the next

39
00:01:12,799 --> 00:01:14,720
slide

40
00:01:14,720 --> 00:01:18,640
uh if i do that

41
00:01:18,640 --> 00:01:21,119
you should see the next slide perfect

42
00:01:21,119 --> 00:01:22,400
yes it works

43
00:01:22,400 --> 00:01:24,640
now yeah that's one of the one of the

44
00:01:24,640 --> 00:01:26,960
disclaimers that i wanted to make and

45
00:01:26,960 --> 00:01:27,680
that's

46
00:01:27,680 --> 00:01:29,600
although we have a containers in the

47
00:01:29,600 --> 00:01:30,720
title uh

48
00:01:30,720 --> 00:01:32,960
we're going to talk about docker because

49
00:01:32,960 --> 00:01:34,240
everybody say

50
00:01:34,240 --> 00:01:37,920
containers but mostly mean docker

51
00:01:37,920 --> 00:01:40,799
and with docker we have and we as an

52
00:01:40,799 --> 00:01:41,520
industry

53
00:01:41,520 --> 00:01:44,960
have a very um interesting relationship

54
00:01:44,960 --> 00:01:47,920
i would say it's um it's love and hate

55
00:01:47,920 --> 00:01:49,040
relationship

56
00:01:49,040 --> 00:01:51,759
because it is amazing it is an amazing

57
00:01:51,759 --> 00:01:52,399
tool

58
00:01:52,399 --> 00:01:54,799
it definitely revolutionized everything

59
00:01:54,799 --> 00:01:56,799
we know about software delivery

60
00:01:56,799 --> 00:01:59,920
no doubt about it but the more we learn

61
00:01:59,920 --> 00:02:00,560
it

62
00:02:00,560 --> 00:02:03,520
the more we discover stuff that we don't

63
00:02:03,520 --> 00:02:05,119
really like

64
00:02:05,119 --> 00:02:08,160
and this is vn diagram and you can kind

65
00:02:08,160 --> 00:02:09,199
of

66
00:02:09,199 --> 00:02:12,400
try it for yourself in mind

67
00:02:12,400 --> 00:02:14,959
and think about software that you like

68
00:02:14,959 --> 00:02:17,280
and software that you know really well

69
00:02:17,280 --> 00:02:19,040
and you will see that they are really

70
00:02:19,040 --> 00:02:21,280
not not a lot of interchange there

71
00:02:21,280 --> 00:02:24,239
and docker is not um is not an exception

72
00:02:24,239 --> 00:02:25,440
and i think

73
00:02:25,440 --> 00:02:28,239
most of the problems that we see when we

74
00:02:28,239 --> 00:02:30,720
speak to our users and customers and

75
00:02:30,720 --> 00:02:32,879
friends in the industry in the community

76
00:02:32,879 --> 00:02:36,800
is that um a lot of people find it hard

77
00:02:36,800 --> 00:02:40,000
to completely trust what docker is doing

78
00:02:40,000 --> 00:02:40,800
for them

79
00:02:40,800 --> 00:02:42,560
in the end of the day they have some

80
00:02:42,560 --> 00:02:43,840
software in production

81
00:02:43,840 --> 00:02:45,840
that they should have confidence that

82
00:02:45,840 --> 00:02:47,519
it's a good software

83
00:02:47,519 --> 00:02:51,680
and it's not always the case

84
00:02:51,680 --> 00:02:55,040
well sometimes it's fine sometimes

85
00:02:55,040 --> 00:02:59,599
not so much so um

86
00:02:59,599 --> 00:03:01,040
this is what we're going to talk about

87
00:03:01,040 --> 00:03:02,959
how we're going to fix it as simon

88
00:03:02,959 --> 00:03:04,400
already mentioned my name is baroque

89
00:03:04,400 --> 00:03:06,080
sarugurski i'm the chief security

90
00:03:06,080 --> 00:03:06,720
officer

91
00:03:06,720 --> 00:03:09,760
and head of devops advocacy in jfrog and

92
00:03:09,760 --> 00:03:13,040
on this slide the most important part uh

93
00:03:13,040 --> 00:03:16,319
is my twitter handle at jaybarroch but

94
00:03:16,319 --> 00:03:19,360
i hope you'll find me useful and

95
00:03:19,360 --> 00:03:21,440
entertaining and follow me on twitter

96
00:03:21,440 --> 00:03:23,760
don't worry my twitter handle is come

97
00:03:23,760 --> 00:03:26,000
comfortably on every slide

98
00:03:26,000 --> 00:03:28,480
and this is a disclaimer it's more like

99
00:03:28,480 --> 00:03:30,239
a california thing

100
00:03:30,239 --> 00:03:32,799
and it's late in california so i don't

101
00:03:32,799 --> 00:03:34,959
know if anyone from there listening

102
00:03:34,959 --> 00:03:37,120
but i'll make it anyway this is an

103
00:03:37,120 --> 00:03:39,680
amazing um

104
00:03:39,680 --> 00:03:43,440
uh a chart from an amazing book called

105
00:03:43,440 --> 00:03:45,519
the culture map by erin meyer

106
00:03:45,519 --> 00:03:48,640
if you work in multicultural environment

107
00:03:48,640 --> 00:03:50,799
organization and you are you definitely

108
00:03:50,799 --> 00:03:52,400
should read this book

109
00:03:52,400 --> 00:03:55,680
and that's a chart that plotting um

110
00:03:55,680 --> 00:03:59,280
cultures of emotional expressive

111
00:03:59,280 --> 00:04:01,200
expressiveness access and

112
00:04:01,200 --> 00:04:02,720
confrontational access

113
00:04:02,720 --> 00:04:05,280
and you can see that the more most

114
00:04:05,280 --> 00:04:06,400
emotionally expensive and

115
00:04:06,400 --> 00:04:07,680
confrontational people

116
00:04:07,680 --> 00:04:10,319
are from israel and russia and i happen

117
00:04:10,319 --> 00:04:11,599
to be from both

118
00:04:11,599 --> 00:04:15,040
so i might say some controversial and

119
00:04:15,040 --> 00:04:16,238
offensive things

120
00:04:16,238 --> 00:04:18,959
during today's talks please don't be

121
00:04:18,959 --> 00:04:20,880
offended or do be offended but at least

122
00:04:20,880 --> 00:04:21,279
know

123
00:04:21,279 --> 00:04:23,440
where it comes from the most important

124
00:04:23,440 --> 00:04:25,520
slide of this presentation is this

125
00:04:25,520 --> 00:04:27,199
i prepared a special page for you

126
00:04:27,199 --> 00:04:28,880
jefford.com show notes

127
00:04:28,880 --> 00:04:31,040
you go there after the talk and you will

128
00:04:31,040 --> 00:04:32,800
find the slides already there

129
00:04:32,800 --> 00:04:35,280
the video that will upload shortly all

130
00:04:35,280 --> 00:04:36,720
the links that i mentioned

131
00:04:36,720 --> 00:04:39,520
including the culture map by the way a

132
00:04:39,520 --> 00:04:41,600
place to comment to rate this talk

133
00:04:41,600 --> 00:04:44,720
and a very nice raffle with a very nice

134
00:04:44,720 --> 00:04:46,400
price it's a nintendo switch

135
00:04:46,400 --> 00:04:49,520
definitely worth participating so

136
00:04:49,520 --> 00:04:52,400
um if you don't remember the url of the

137
00:04:52,400 --> 00:04:53,360
j4.com

138
00:04:53,360 --> 00:04:55,600
show notes it is also in the bottom of

139
00:04:55,600 --> 00:04:56,639
every page

140
00:04:56,639 --> 00:04:58,960
very very simple to remember okay now

141
00:04:58,960 --> 00:05:00,800
let's talk about patterns we're here to

142
00:05:00,800 --> 00:05:01,919
talk about patterns

143
00:05:01,919 --> 00:05:05,360
and when we um um

144
00:05:05,360 --> 00:05:07,120
encounter something new for example

145
00:05:07,120 --> 00:05:08,400
promotion of images

146
00:05:08,400 --> 00:05:10,880
we usually ask if we already have an

147
00:05:10,880 --> 00:05:12,160
existing pattern

148
00:05:12,160 --> 00:05:14,320
and it should we adapt it should we

149
00:05:14,320 --> 00:05:16,080
change it how should we change it

150
00:05:16,080 --> 00:05:20,000
now with promotion uh of of artifacts

151
00:05:20,000 --> 00:05:22,000
uh we're doing them for the forever

152
00:05:22,000 --> 00:05:23,520
because that's actually

153
00:05:23,520 --> 00:05:25,919
um continuous integration pipelines and

154
00:05:25,919 --> 00:05:27,759
of course we know how to do it

155
00:05:27,759 --> 00:05:30,400
uh basically what we do is we implement

156
00:05:30,400 --> 00:05:31,919
a promotion pyramid

157
00:05:31,919 --> 00:05:34,960
uh when we have um

158
00:05:34,960 --> 00:05:38,400
uh two accesses the the the deploy time

159
00:05:38,400 --> 00:05:40,800
and this is how long the bill takes and

160
00:05:40,800 --> 00:05:42,400
the amount of binaries

161
00:05:42,400 --> 00:05:44,960
uh and that's how many binaries we have

162
00:05:44,960 --> 00:05:47,039
in the beginning the tests are very very

163
00:05:47,039 --> 00:05:47,919
fast

164
00:05:47,919 --> 00:05:49,759
but we have tons of binaries that will

165
00:05:49,759 --> 00:05:51,440
be your unit tests

166
00:05:51,440 --> 00:05:54,400
as the this pyramid progresses less and

167
00:05:54,400 --> 00:05:56,080
less binaries survive

168
00:05:56,080 --> 00:05:59,120
those tests and the tests uh take more

169
00:05:59,120 --> 00:06:00,880
and more time in the end of the day

170
00:06:00,880 --> 00:06:04,720
we have um the the chosen ones

171
00:06:04,720 --> 00:06:07,919
who are which are of good quality and

172
00:06:07,919 --> 00:06:10,400
also deserve to be promoted to

173
00:06:10,400 --> 00:06:11,199
production

174
00:06:11,199 --> 00:06:13,199
so this is i mean this is not new i

175
00:06:13,199 --> 00:06:14,800
really hope you all

176
00:06:14,800 --> 00:06:17,919
um you all know and use it um

177
00:06:17,919 --> 00:06:21,120
now what is pipeline pipeline is and

178
00:06:21,120 --> 00:06:22,160
that's the view of

179
00:06:22,160 --> 00:06:24,080
kind of the same pipeline but laid on

180
00:06:24,080 --> 00:06:25,759
the side the pipeline

181
00:06:25,759 --> 00:06:30,160
is um once you build your artifacts

182
00:06:30,160 --> 00:06:33,360
once you finished your um

183
00:06:33,360 --> 00:06:36,880
ci your build

184
00:06:36,880 --> 00:06:38,720
this this is where the pipeline actually

185
00:06:38,720 --> 00:06:41,440
begins we have those artifacts

186
00:06:41,440 --> 00:06:44,960
that we promote if quality requirements

187
00:06:44,960 --> 00:06:45,919
are hit

188
00:06:45,919 --> 00:06:49,280
between quality gates so those locks are

189
00:06:49,280 --> 00:06:50,720
the quality gates

190
00:06:50,720 --> 00:06:52,400
and then in the each and every

191
00:06:52,400 --> 00:06:54,400
environment we deploy

192
00:06:54,400 --> 00:06:56,479
sorry in each and every environment we

193
00:06:56,479 --> 00:06:59,199
deploy this set of artifacts that are

194
00:06:59,199 --> 00:07:01,039
ready for this environment because they

195
00:07:01,039 --> 00:07:02,479
pass the quality gates

196
00:07:02,479 --> 00:07:04,960
and then this is how the artifacts are

197
00:07:04,960 --> 00:07:05,840
promoted

198
00:07:05,840 --> 00:07:08,479
from one environment to another until

199
00:07:08,479 --> 00:07:10,639
they get all the way to production

200
00:07:10,639 --> 00:07:12,720
now again this is not new i really

201
00:07:12,720 --> 00:07:13,919
expect you all to

202
00:07:13,919 --> 00:07:16,720
actually know that and in the end of the

203
00:07:16,720 --> 00:07:18,160
day

204
00:07:18,160 --> 00:07:20,960
what's different in docker one of the

205
00:07:20,960 --> 00:07:22,800
things which are different

206
00:07:22,800 --> 00:07:26,319
is that docker have a very very

207
00:07:26,319 --> 00:07:28,960
very powerful build system built inside

208
00:07:28,960 --> 00:07:30,400
docker and that's the docker build

209
00:07:30,400 --> 00:07:31,199
command

210
00:07:31,199 --> 00:07:33,280
right you just write a relatively simple

211
00:07:33,280 --> 00:07:34,240
docker file

212
00:07:34,240 --> 00:07:36,960
you build it it creates very it creates

213
00:07:36,960 --> 00:07:39,120
a docker image very very fast

214
00:07:39,120 --> 00:07:42,319
and instead of starting dragging those

215
00:07:42,319 --> 00:07:45,360
large images around from one place to

216
00:07:45,360 --> 00:07:47,199
another in your pipeline

217
00:07:47,199 --> 00:07:49,919
it's very tempting to actually docker

218
00:07:49,919 --> 00:07:51,280
build all the things

219
00:07:51,280 --> 00:07:53,520
and instead of promoting the images

220
00:07:53,520 --> 00:07:55,520
promote the docker file itself

221
00:07:55,520 --> 00:07:58,000
and promoting of a text file through

222
00:07:58,000 --> 00:07:59,120
something really

223
00:07:59,120 --> 00:08:00,960
simple to achieve all you need to do for

224
00:08:00,960 --> 00:08:03,759
that is you know just target

225
00:08:03,759 --> 00:08:06,000
in git and saying now this docker file

226
00:08:06,000 --> 00:08:07,039
is development

227
00:08:07,039 --> 00:08:09,680
now this docker file is staging and now

228
00:08:09,680 --> 00:08:11,360
this docker file in production

229
00:08:11,360 --> 00:08:14,080
so instead in our diagram here instead

230
00:08:14,080 --> 00:08:15,120
of promoting

231
00:08:15,120 --> 00:08:17,360
builder artifacts and promoted we

232
00:08:17,360 --> 00:08:18,160
promote

233
00:08:18,160 --> 00:08:20,960
the docker build file and build it in

234
00:08:20,960 --> 00:08:22,960
each and every environment

235
00:08:22,960 --> 00:08:25,759
this is easy and very tempting now the

236
00:08:25,759 --> 00:08:28,080
problem with that that fast and easy and

237
00:08:28,080 --> 00:08:29,039
cheap builds

238
00:08:29,039 --> 00:08:32,240
are not always the way to go running

239
00:08:32,240 --> 00:08:34,958
build in every environment is not a

240
00:08:34,958 --> 00:08:36,640
really good idea

241
00:08:36,640 --> 00:08:38,640
and it's not a really good idea i'll

242
00:08:38,640 --> 00:08:40,320
make you i'll explain you why

243
00:08:40,320 --> 00:08:43,599
now for this um for this slide

244
00:08:43,599 --> 00:08:46,160
when i prepared it i wanted to create

245
00:08:46,160 --> 00:08:46,640
the most

246
00:08:46,640 --> 00:08:49,200
hideous the most unstable the most

247
00:08:49,200 --> 00:08:50,320
horrifying

248
00:08:50,320 --> 00:08:54,240
um docker uh build file ever

249
00:08:54,240 --> 00:08:56,320
and and it was supposed to be completely

250
00:08:56,320 --> 00:08:57,680
fake but then

251
00:08:57,680 --> 00:08:59,360
i just went to the internet and i

252
00:08:59,360 --> 00:09:01,600
discovered that i don't need to fake

253
00:09:01,600 --> 00:09:03,120
anything the reality

254
00:09:03,120 --> 00:09:05,839
is above my wildest imagination let's

255
00:09:05,839 --> 00:09:06,240
look

256
00:09:06,240 --> 00:09:09,600
at this file that i actually found used

257
00:09:09,600 --> 00:09:12,000
in production by a lot of folks and

258
00:09:12,000 --> 00:09:12,800
obviously

259
00:09:12,800 --> 00:09:15,600
the link to the proof that that's a real

260
00:09:15,600 --> 00:09:16,160
um

261
00:09:16,160 --> 00:09:19,519
real file is in jeffree.com show notes

262
00:09:19,519 --> 00:09:20,320
you can go there

263
00:09:20,320 --> 00:09:22,399
and find a link to git repo where this

264
00:09:22,399 --> 00:09:24,080
file actually exists

265
00:09:24,080 --> 00:09:26,080
so what's what's the problem with this

266
00:09:26,080 --> 00:09:27,760
file everything

267
00:09:27,760 --> 00:09:31,279
every line in this docker file

268
00:09:31,279 --> 00:09:33,680
retrieves a latest version of the

269
00:09:33,680 --> 00:09:34,560
dependency

270
00:09:34,560 --> 00:09:38,240
each time it is built this is a latest

271
00:09:38,240 --> 00:09:39,040
version

272
00:09:39,040 --> 00:09:41,440
this is a latest version this is a

273
00:09:41,440 --> 00:09:42,560
latest version

274
00:09:42,560 --> 00:09:46,399
and this is latest version everything

275
00:09:46,399 --> 00:09:49,760
is relying on the latest now you can see

276
00:09:49,760 --> 00:09:50,399
the problem

277
00:09:50,399 --> 00:09:53,120
obviously when i'm going to build this

278
00:09:53,120 --> 00:09:55,920
file multiple times during my pipeline

279
00:09:55,920 --> 00:09:59,200
i have a very high risk of actually

280
00:09:59,200 --> 00:09:59,760
getting

281
00:09:59,760 --> 00:10:02,480
different docker image every time and

282
00:10:02,480 --> 00:10:03,680
this is where

283
00:10:03,680 --> 00:10:06,560
our insecurity about docker actually

284
00:10:06,560 --> 00:10:07,839
proves to be right

285
00:10:07,839 --> 00:10:12,079
um if i wrote this file in development

286
00:10:12,079 --> 00:10:14,399
and created a container that i'm happy

287
00:10:14,399 --> 00:10:15,120
with

288
00:10:15,120 --> 00:10:19,040
but during my pipeline each time i build

289
00:10:19,040 --> 00:10:19,440
i

290
00:10:19,440 --> 00:10:21,440
get a different container what i will

291
00:10:21,440 --> 00:10:23,279
end up in production is not what i

292
00:10:23,279 --> 00:10:24,079
assumed

293
00:10:24,079 --> 00:10:25,760
i have in production and that's exactly

294
00:10:25,760 --> 00:10:27,680
where the problem is so let's see if we

295
00:10:27,680 --> 00:10:29,040
can figure we if we can

296
00:10:29,040 --> 00:10:30,959
we can fix it obviously there are some

297
00:10:30,959 --> 00:10:33,120
fix so here is an example

298
00:10:33,120 --> 00:10:35,760
i can actually nail the version of

299
00:10:35,760 --> 00:10:37,440
dependency

300
00:10:37,440 --> 00:10:40,560
of my base version will it fix it

301
00:10:40,560 --> 00:10:44,000
to an extent obviously it's better but

302
00:10:44,000 --> 00:10:47,040
it is allowed two four images

303
00:10:47,040 --> 00:10:49,680
to actually override the best the base

304
00:10:49,680 --> 00:10:50,160
uh

305
00:10:50,160 --> 00:10:52,880
the the the versioned image because tag

306
00:10:52,880 --> 00:10:54,560
is not immutable in docker

307
00:10:54,560 --> 00:10:58,240
i can push new ubuntu 19.04

308
00:10:58,240 --> 00:11:01,839
every time and still call it ubuntu 1904

309
00:11:01,839 --> 00:11:05,040
will i do it probably not but sometimes

310
00:11:05,040 --> 00:11:05,519
also

311
00:11:05,519 --> 00:11:07,839
yes for example if i want to push a

312
00:11:07,839 --> 00:11:09,920
security update

313
00:11:09,920 --> 00:11:11,680
it doesn't mean that i don't want i

314
00:11:11,680 --> 00:11:13,440
don't need to push a security update

315
00:11:13,440 --> 00:11:14,000
into the same

316
00:11:14,000 --> 00:11:16,399
version but it definitely means that

317
00:11:16,399 --> 00:11:18,959
this declaration is not stable

318
00:11:18,959 --> 00:11:21,839
what is stable is checksum because

319
00:11:21,839 --> 00:11:23,600
checksum always relate

320
00:11:23,600 --> 00:11:26,800
to a defined set of bytes

321
00:11:26,800 --> 00:11:29,360
so this never changed the problem is

322
00:11:29,360 --> 00:11:30,800
this is completely

323
00:11:30,800 --> 00:11:33,680
not useful because if i will ask you

324
00:11:33,680 --> 00:11:35,760
what version of ubuntu i refer to

325
00:11:35,760 --> 00:11:38,000
you will never know more so you won't

326
00:11:38,000 --> 00:11:40,399
even know if that's a valid checksum

327
00:11:40,399 --> 00:11:43,040
or is it just me fall asleep at the

328
00:11:43,040 --> 00:11:43,760
keyboard

329
00:11:43,760 --> 00:11:46,480
while waiting for my session like simon

330
00:11:46,480 --> 00:11:47,680
did

331
00:11:47,680 --> 00:11:50,959
maybe it's not valid at all now

332
00:11:50,959 --> 00:11:54,160
can we fix those probably we can

333
00:11:54,160 --> 00:11:57,920
if you know python and if you know

334
00:11:57,920 --> 00:12:00,000
node.js you know how to lock the

335
00:12:00,000 --> 00:12:01,040
versions

336
00:12:01,040 --> 00:12:04,240
um of of those but

337
00:12:04,240 --> 00:12:07,120
let's say how about this how many of you

338
00:12:07,120 --> 00:12:07,519
know

339
00:12:07,519 --> 00:12:09,760
how to nail all the versions inside

340
00:12:09,760 --> 00:12:10,560
maven

341
00:12:10,560 --> 00:12:13,920
i mean andres knows how many people know

342
00:12:13,920 --> 00:12:16,480
except of andres that's a good question

343
00:12:16,480 --> 00:12:18,560
and how about that i might have a script

344
00:12:18,560 --> 00:12:18,880
that

345
00:12:18,880 --> 00:12:21,040
just goes to the internet and download

346
00:12:21,040 --> 00:12:22,320
random stuff

347
00:12:22,320 --> 00:12:25,120
how can i lock the version and make this

348
00:12:25,120 --> 00:12:26,000
immutable

349
00:12:26,000 --> 00:12:29,200
well i probably can't so basically my

350
00:12:29,200 --> 00:12:29,680
point

351
00:12:29,680 --> 00:12:33,040
is this is where the problem is

352
00:12:33,040 --> 00:12:35,440
i have docker build that i run every

353
00:12:35,440 --> 00:12:36,079
time

354
00:12:36,079 --> 00:12:39,760
and i'm in danger of having a different

355
00:12:39,760 --> 00:12:42,800
image built on every stage so

356
00:12:42,800 --> 00:12:46,000
this is a no no when we want to build a

357
00:12:46,000 --> 00:12:47,279
promotion pipeline

358
00:12:47,279 --> 00:12:50,240
we have to do it with immutable and

359
00:12:50,240 --> 00:12:51,120
stable

360
00:12:51,120 --> 00:12:55,200
binaries what we want to get is this

361
00:12:55,200 --> 00:12:58,240
we build it only once and then we

362
00:12:58,240 --> 00:12:59,519
promote it

363
00:12:59,519 --> 00:13:01,920
through those quality gates the same

364
00:13:01,920 --> 00:13:03,600
artifact that we created

365
00:13:03,600 --> 00:13:06,240
promote through the pipeline through the

366
00:13:06,240 --> 00:13:08,639
quality gates to production

367
00:13:08,639 --> 00:13:10,880
and i mentioned gates a lot what's

368
00:13:10,880 --> 00:13:12,639
what's the story with gates why i'm so

369
00:13:12,639 --> 00:13:13,920
obsessed with gates

370
00:13:13,920 --> 00:13:16,560
the thing is it's very important to have

371
00:13:16,560 --> 00:13:17,360
those gates

372
00:13:17,360 --> 00:13:20,320
so qa won't test images which are not

373
00:13:20,320 --> 00:13:21,519
ready to qa

374
00:13:21,519 --> 00:13:24,000
we want stage images which are not ready

375
00:13:24,000 --> 00:13:24,959
to stage

376
00:13:24,959 --> 00:13:27,680
and definitely we won't get anything

377
00:13:27,680 --> 00:13:28,399
that is not

378
00:13:28,399 --> 00:13:31,519
ready in production to production

379
00:13:31,519 --> 00:13:33,760
it sounds obvious but the question is

380
00:13:33,760 --> 00:13:35,360
how easy it is

381
00:13:35,360 --> 00:13:38,959
to create those rigid quality gates

382
00:13:38,959 --> 00:13:42,079
and let's see what our options are how

383
00:13:42,079 --> 00:13:43,360
do we separate

384
00:13:43,360 --> 00:13:45,680
dev from prod that's the question that

385
00:13:45,680 --> 00:13:47,760
we need to answer

386
00:13:47,760 --> 00:13:50,880
so first option is using docker labels

387
00:13:50,880 --> 00:13:54,399
i can label um an image and say well

388
00:13:54,399 --> 00:13:55,360
this image now

389
00:13:55,360 --> 00:13:56,610
is um

390
00:13:56,610 --> 00:13:58,560
[Music]

391
00:13:58,560 --> 00:14:02,480
stage dev stage qa stage prod

392
00:14:02,480 --> 00:14:05,920
this is nice but i cannot attach

393
00:14:05,920 --> 00:14:10,079
any kind of row-based authentication

394
00:14:10,079 --> 00:14:13,040
to the labels it means that if i have a

395
00:14:13,040 --> 00:14:15,199
production cluster of kubernetes

396
00:14:15,199 --> 00:14:18,000
it can access the images which are

397
00:14:18,000 --> 00:14:18,720
labeled

398
00:14:18,720 --> 00:14:21,680
to development which the same is as they

399
00:14:21,680 --> 00:14:22,000
can

400
00:14:22,000 --> 00:14:24,399
uh um they can access the images that

401
00:14:24,399 --> 00:14:25,920
which are uh labeled to

402
00:14:25,920 --> 00:14:27,839
uh to prod and that's obviously a

403
00:14:27,839 --> 00:14:30,079
problem we want to prevent that let's

404
00:14:30,079 --> 00:14:30,800
see what

405
00:14:30,800 --> 00:14:33,040
other options we have this is not so

406
00:14:33,040 --> 00:14:35,199
good the second one using docker

407
00:14:35,199 --> 00:14:36,320
repositories

408
00:14:36,320 --> 00:14:37,680
we're going to talk a little bit about

409
00:14:37,680 --> 00:14:39,920
the confusion in the name repositories

410
00:14:39,920 --> 00:14:43,120
but in docker repositories are

411
00:14:43,120 --> 00:14:46,320
directories in your registry

412
00:14:46,320 --> 00:14:50,240
this is nice i can have directory

413
00:14:50,240 --> 00:14:53,360
for um dev for

414
00:14:53,360 --> 00:14:56,560
staging and for prod let's say

415
00:14:56,560 --> 00:15:00,000
in each and every image that i have

416
00:15:00,000 --> 00:15:03,360
but and and there is and there is a

417
00:15:03,360 --> 00:15:05,839
role-based authentication so i can do it

418
00:15:05,839 --> 00:15:06,959
but

419
00:15:06,959 --> 00:15:10,160
for each image i create i need to create

420
00:15:10,160 --> 00:15:13,279
new set of those directories so this is

421
00:15:13,279 --> 00:15:14,320
better

422
00:15:14,320 --> 00:15:17,839
still not very useful what i actually

423
00:15:17,839 --> 00:15:21,120
want is separate registry per

424
00:15:21,120 --> 00:15:25,360
environment i want this to be a registry

425
00:15:25,360 --> 00:15:29,199
that only the integration cluster can

426
00:15:29,199 --> 00:15:30,079
reach

427
00:15:30,079 --> 00:15:32,959
this to be a registry that only a system

428
00:15:32,959 --> 00:15:33,600
testing

429
00:15:33,600 --> 00:15:36,560
cluster can reach and this to be a

430
00:15:36,560 --> 00:15:37,360
registry

431
00:15:37,360 --> 00:15:40,320
that only the production cluster of

432
00:15:40,320 --> 00:15:42,079
kubernetes can reach

433
00:15:42,079 --> 00:15:44,480
so this is what i want to do how hard

434
00:15:44,480 --> 00:15:45,600
can it be

435
00:15:45,600 --> 00:15:48,720
well not so easy

436
00:15:48,720 --> 00:15:50,560
sometimes we have very strange

437
00:15:50,560 --> 00:15:52,959
limitations on our systems and you

438
00:15:52,959 --> 00:15:54,639
may be old enough to remember the

439
00:15:54,639 --> 00:15:58,320
limitation of a 640 kilobytes of ram

440
00:15:58,320 --> 00:16:01,360
that should be enough for um everybody

441
00:16:01,360 --> 00:16:02,800
according to bill gates

442
00:16:02,800 --> 00:16:06,399
docker has a little bit the same

443
00:16:06,399 --> 00:16:09,600
this is how docker tag works when you

444
00:16:09,600 --> 00:16:12,320
push something or tag something or pull

445
00:16:12,320 --> 00:16:13,199
something

446
00:16:13,199 --> 00:16:17,120
you mention the host and then the port

447
00:16:17,120 --> 00:16:20,240
and then the user and then the name

448
00:16:20,240 --> 00:16:23,440
of the image and then the version

449
00:16:23,440 --> 00:16:27,360
this prevents us to actually mention

450
00:16:27,360 --> 00:16:30,560
which registry do we want to address

451
00:16:30,560 --> 00:16:34,160
inside a single host so

452
00:16:34,160 --> 00:16:36,480
how can we have more than one registry

453
00:16:36,480 --> 00:16:37,600
per host now

454
00:16:37,600 --> 00:16:41,600
if there is no way to specify it

455
00:16:42,160 --> 00:16:45,040
now how can we support this how can we

456
00:16:45,040 --> 00:16:45,680
say

457
00:16:45,680 --> 00:16:49,279
host and then docker dev

458
00:16:49,279 --> 00:16:51,600
for development registry and docker prod

459
00:16:51,600 --> 00:16:53,120
for production registry

460
00:16:53,120 --> 00:16:56,880
how can we support that the problem is

461
00:16:56,880 --> 00:16:58,880
no one thought about this scenario and

462
00:16:58,880 --> 00:17:01,199
now obviously everybody use

463
00:17:01,199 --> 00:17:05,520
the a docker tag specification and

464
00:17:05,520 --> 00:17:08,959
it's very very hard to use so first we

465
00:17:08,959 --> 00:17:09,919
can panic

466
00:17:09,919 --> 00:17:13,199
but also we can actually use for example

467
00:17:13,199 --> 00:17:15,599
virtual hosts or virtual posts

468
00:17:15,599 --> 00:17:18,640
we can come with so this is how it works

469
00:17:18,640 --> 00:17:21,039
when you run docker tag it actually

470
00:17:21,039 --> 00:17:22,480
translates to

471
00:17:22,480 --> 00:17:25,520
host and port and then the name what we

472
00:17:25,520 --> 00:17:26,160
can do

473
00:17:26,160 --> 00:17:30,240
is so we have um we can rewrite

474
00:17:30,240 --> 00:17:33,520
this url to actually be this url

475
00:17:33,520 --> 00:17:36,400
and we can rewrite it by saying okay i

476
00:17:36,400 --> 00:17:38,280
create a fake port

477
00:17:38,280 --> 00:17:41,919
5001 all the requests of this port

478
00:17:41,919 --> 00:17:45,039
won't be routed to a real port but it's

479
00:17:45,039 --> 00:17:48,400
instead will be routed to some

480
00:17:48,400 --> 00:17:51,600
url which actually be a registry a

481
00:17:51,600 --> 00:17:52,960
separate registry

482
00:17:52,960 --> 00:17:56,080
under my host that's one option

483
00:17:56,080 --> 00:17:59,440
the option the other option is

484
00:17:59,440 --> 00:18:02,720
abuse we can actually use

485
00:18:02,720 --> 00:18:06,160
the username here to express a registry

486
00:18:06,160 --> 00:18:06,720
name

487
00:18:06,720 --> 00:18:09,840
if we don't separate our

488
00:18:09,840 --> 00:18:12,880
images to include the username and most

489
00:18:12,880 --> 00:18:14,320
of the people don't

490
00:18:14,320 --> 00:18:18,000
this token is actually available for us

491
00:18:18,000 --> 00:18:20,240
to use it as a docker registry and then

492
00:18:20,240 --> 00:18:22,640
we don't need the url rewrite and we

493
00:18:22,640 --> 00:18:23,520
don't need

494
00:18:23,520 --> 00:18:25,679
the reverse proxy to do the rewrite for

495
00:18:25,679 --> 00:18:27,600
us which is cool

496
00:18:27,600 --> 00:18:30,559
so okay so now we have different

497
00:18:30,559 --> 00:18:31,679
registries per

498
00:18:31,679 --> 00:18:34,720
per host and the next question will be

499
00:18:34,720 --> 00:18:37,760
how do i promote how do i move

500
00:18:37,760 --> 00:18:41,440
the image from dev to staging

501
00:18:41,440 --> 00:18:44,799
to prod should i pull

502
00:18:44,799 --> 00:18:48,400
 and push with large docker images

503
00:18:48,400 --> 00:18:51,440
that would be obviously a disaster so

504
00:18:51,440 --> 00:18:53,679
instead here is a solution that might

505
00:18:53,679 --> 00:18:55,919
work this is an example of such a tool

506
00:18:55,919 --> 00:18:57,360
and this is a free

507
00:18:57,360 --> 00:18:59,679
jeffrow container registry that you can

508
00:18:59,679 --> 00:19:01,039
download today on prem

509
00:19:01,039 --> 00:19:04,160
or get a free in the cloud

510
00:19:04,160 --> 00:19:06,400
and you can see here how we and jeffrey

511
00:19:06,400 --> 00:19:07,520
tried to fix that

512
00:19:07,520 --> 00:19:10,400
that's not the only tool that uses it so

513
00:19:10,400 --> 00:19:12,320
look for the right tool for you

514
00:19:12,320 --> 00:19:14,960
this is just an example so what we have

515
00:19:14,960 --> 00:19:16,400
are three different types of

516
00:19:16,400 --> 00:19:17,440
repositories

517
00:19:17,440 --> 00:19:19,919
the local and those are the registers

518
00:19:19,919 --> 00:19:20,720
you can have them

519
00:19:20,720 --> 00:19:24,080
as much as you want the remote which is

520
00:19:24,080 --> 00:19:25,280
a proxy

521
00:19:25,280 --> 00:19:28,000
registry for your dependencies that come

522
00:19:28,000 --> 00:19:28,400
from

523
00:19:28,400 --> 00:19:31,600
outside registers and virtual that kind

524
00:19:31,600 --> 00:19:32,080
of

525
00:19:32,080 --> 00:19:36,160
exposes any set of repositories that you

526
00:19:36,160 --> 00:19:36,840
want

527
00:19:36,840 --> 00:19:40,480
from um from the other repositories

528
00:19:40,480 --> 00:19:42,240
from the other register that you have

529
00:19:42,240 --> 00:19:43,840
and then you have your developer

530
00:19:43,840 --> 00:19:46,320
that only interacts with this virtual

531
00:19:46,320 --> 00:19:47,120
registry

532
00:19:47,120 --> 00:19:49,280
and it has every and they have

533
00:19:49,280 --> 00:19:50,720
everything for their exposure they can

534
00:19:50,720 --> 00:19:52,640
do whatever they like they can push they

535
00:19:52,640 --> 00:19:53,840
can pull etc

536
00:19:53,840 --> 00:19:56,960
we have our ci server be it that's

537
00:19:56,960 --> 00:19:58,880
decked on but it can be jenkins it can

538
00:19:58,880 --> 00:20:00,640
be jeffree pipelines it can be whatever

539
00:20:00,640 --> 00:20:01,360
you like

540
00:20:01,360 --> 00:20:04,799
it builds those docker images and then

541
00:20:04,799 --> 00:20:07,280
pushes them to the right registry and

542
00:20:07,280 --> 00:20:08,240
that will be

543
00:20:08,240 --> 00:20:11,200
the dev local but then using a simple

544
00:20:11,200 --> 00:20:12,240
api call

545
00:20:12,240 --> 00:20:15,840
or in our example also jfrog cli

546
00:20:15,840 --> 00:20:18,960
can promote those images from one

547
00:20:18,960 --> 00:20:21,600
registry to another without actually

548
00:20:21,600 --> 00:20:22,880
changing anything

549
00:20:22,880 --> 00:20:25,520
because the underlying file system

550
00:20:25,520 --> 00:20:26,559
remains the same

551
00:20:26,559 --> 00:20:28,559
it's just the visibility of the image

552
00:20:28,559 --> 00:20:29,919
that the changes

553
00:20:29,919 --> 00:20:33,280
and it appears in different registers

554
00:20:33,280 --> 00:20:35,200
and that's exactly what we need because

555
00:20:35,200 --> 00:20:36,480
then all

556
00:20:36,480 --> 00:20:39,919
our clusters actually can only see one

557
00:20:39,919 --> 00:20:43,200
registry at a time and can only see

558
00:20:43,200 --> 00:20:46,000
the correct registry that they need but

559
00:20:46,000 --> 00:20:47,120
we also get

560
00:20:47,120 --> 00:20:49,760
the promotion which is absolutely free

561
00:20:49,760 --> 00:20:50,559
now

562
00:20:50,559 --> 00:20:52,080
as i mentioned there is a little bit of

563
00:20:52,080 --> 00:20:53,840
confusion between

564
00:20:53,840 --> 00:20:55,760
registries and repositories there's to

565
00:20:55,760 --> 00:20:56,880
clarify

566
00:20:56,880 --> 00:20:59,039
repository in docker is a top level

567
00:20:59,039 --> 00:21:00,559
directory in a registry

568
00:21:00,559 --> 00:21:02,559
repository in the rest of the

569
00:21:02,559 --> 00:21:03,919
terminology is

570
00:21:03,919 --> 00:21:05,760
the registry so when i talk about

571
00:21:05,760 --> 00:21:07,679
repositories in artifactory

572
00:21:07,679 --> 00:21:10,640
i actually mean different registers and

573
00:21:10,640 --> 00:21:11,679
this

574
00:21:11,679 --> 00:21:16,000
uh this way of going about it provide us

575
00:21:16,000 --> 00:21:16,960
a triple

576
00:21:16,960 --> 00:21:19,679
three-way win so we have single point of

577
00:21:19,679 --> 00:21:21,679
access to multiple registers when needed

578
00:21:21,679 --> 00:21:24,320
for the developer uses the virtual um

579
00:21:24,320 --> 00:21:25,280
registry

580
00:21:25,280 --> 00:21:28,960
uh completely isolated environments our

581
00:21:28,960 --> 00:21:31,280
clusters can only see one register at a

582
00:21:31,280 --> 00:21:32,400
time and

583
00:21:32,400 --> 00:21:34,240
immediate and free promotions between

584
00:21:34,240 --> 00:21:36,000
because when we move

585
00:21:36,000 --> 00:21:37,600
images between the registries we

586
00:21:37,600 --> 00:21:39,039
actually don't move anything

587
00:21:39,039 --> 00:21:42,480
so that's a win-win-win another issue

588
00:21:42,480 --> 00:21:44,880
that we encounter a lot is obviously

589
00:21:44,880 --> 00:21:45,600
latest

590
00:21:45,600 --> 00:21:48,080
should we use it should we not use it

591
00:21:48,080 --> 00:21:49,360
it's very comfortable

592
00:21:49,360 --> 00:21:52,960
but it also very dangerous because when

593
00:21:52,960 --> 00:21:54,559
you use latest you don't really know

594
00:21:54,559 --> 00:21:57,679
what version of the docker image you use

595
00:21:57,679 --> 00:22:00,159
inside jeffree container registry there

596
00:22:00,159 --> 00:22:02,000
is a solution for that as well

597
00:22:02,000 --> 00:22:05,360
so you can see here how in the latest

598
00:22:05,360 --> 00:22:07,919
we actually can attach any metadata

599
00:22:07,919 --> 00:22:08,640
obviously on

600
00:22:08,640 --> 00:22:12,000
any artifact but here it's an example of

601
00:22:12,000 --> 00:22:15,280
how we use these properties to say

602
00:22:15,280 --> 00:22:18,640
to which version this latest actually

603
00:22:18,640 --> 00:22:21,600
refers to we say this latest is actually

604
00:22:21,600 --> 00:22:23,600
the same as version 26

605
00:22:23,600 --> 00:22:26,480
and this is how we have simplicity of

606
00:22:26,480 --> 00:22:27,280
the latest

607
00:22:27,280 --> 00:22:29,760
but also always knows what version it

608
00:22:29,760 --> 00:22:30,960
really means

609
00:22:30,960 --> 00:22:32,960
as long as the promote we promoted

610
00:22:32,960 --> 00:22:34,480
immutable artifact and did the right

611
00:22:34,480 --> 00:22:36,080
thing

612
00:22:36,080 --> 00:22:37,840
now obviously we need to take care of

613
00:22:37,840 --> 00:22:39,360
other dependencies as well

614
00:22:39,360 --> 00:22:42,559
that's for security and for immutability

615
00:22:42,559 --> 00:22:44,240
and this is something that you can do as

616
00:22:44,240 --> 00:22:44,880
well

617
00:22:44,880 --> 00:22:48,320
with the proxying registry that proxies

618
00:22:48,320 --> 00:22:49,039
others

619
00:22:49,039 --> 00:22:52,240
you can cache your from images

620
00:22:52,240 --> 00:22:54,880
and make sure that they don't change in

621
00:22:54,880 --> 00:22:55,919
your environment

622
00:22:55,919 --> 00:22:59,280
in your build even if they changed in

623
00:22:59,280 --> 00:23:01,760
docker hub because you cached the

624
00:23:01,760 --> 00:23:03,520
version that you actually use

625
00:23:03,520 --> 00:23:06,799
and then what you put inside your

626
00:23:06,799 --> 00:23:10,640
image is um also immutable because it

627
00:23:10,640 --> 00:23:11,679
also comes

628
00:23:11,679 --> 00:23:14,080
from the jeffree container registry the

629
00:23:14,080 --> 00:23:15,679
generic repository

630
00:23:15,679 --> 00:23:19,039
allows you to have any file for example

631
00:23:19,039 --> 00:23:21,840
your infrastructure dependencies and

632
00:23:21,840 --> 00:23:22,320
your

633
00:23:22,320 --> 00:23:24,720
application itself so when everything

634
00:23:24,720 --> 00:23:26,240
comes from your

635
00:23:26,240 --> 00:23:30,159
local artifact repository manager

636
00:23:30,159 --> 00:23:32,480
you are actually guaranteed to have a

637
00:23:32,480 --> 00:23:33,919
repeatable build

638
00:23:33,919 --> 00:23:36,960
so on your dependencies your base image

639
00:23:36,960 --> 00:23:38,960
cached from docker hub your

640
00:23:38,960 --> 00:23:40,080
infrastructure

641
00:23:40,080 --> 00:23:43,039
saved for whatever use and your

642
00:23:43,039 --> 00:23:44,000
application

643
00:23:44,000 --> 00:23:47,039
um and your application files as well so

644
00:23:47,039 --> 00:23:47,919
with that

645
00:23:47,919 --> 00:23:52,320
conclusions you build only once

646
00:23:52,320 --> 00:23:55,679
and and then you promo you separate

647
00:23:55,679 --> 00:23:56,880
environments

648
00:23:56,880 --> 00:23:59,120
and you promote what you have built

649
00:23:59,120 --> 00:24:01,200
through those environments

650
00:24:01,200 --> 00:24:04,400
you own your dependencies and this is

651
00:24:04,400 --> 00:24:05,520
the basics

652
00:24:05,520 --> 00:24:08,240
so with that thank you very much i'm

653
00:24:08,240 --> 00:24:08,960
edgy bar

654
00:24:08,960 --> 00:24:11,279
on twitter now for sure you want to

655
00:24:11,279 --> 00:24:12,240
follow me

656
00:24:12,240 --> 00:24:14,559
um when you praise this talk on twitter

657
00:24:14,559 --> 00:24:16,000
don't forget to mention

658
00:24:16,000 --> 00:24:17,679
all the talks conf because they will

659
00:24:17,679 --> 00:24:19,600
retweet and we both will get some

660
00:24:19,600 --> 00:24:20,880
promotion out of it

661
00:24:20,880 --> 00:24:23,120
and as i mentioned jeffrook.com show

662
00:24:23,120 --> 00:24:25,440
notes the slides the video

663
00:24:25,440 --> 00:24:28,400
all the links are there um and obviously

664
00:24:28,400 --> 00:24:29,279
the amazing

665
00:24:29,279 --> 00:24:31,440
ruffle if you want to scan a qr code you

666
00:24:31,440 --> 00:24:32,320
can do that

667
00:24:32,320 --> 00:24:34,880
as well with that back to simon thank

668
00:24:34,880 --> 00:24:36,080
you very much

669
00:24:36,080 --> 00:24:38,240
awesome thank you very much brooke and

670
00:24:38,240 --> 00:24:40,240
for everyone who has questions

671
00:24:40,240 --> 00:24:42,480
uh you can add them in these cloud

672
00:24:42,480 --> 00:24:43,760
native slido

673
00:24:43,760 --> 00:24:46,480
and there's also the uh the cloud native

674
00:24:46,480 --> 00:24:47,360
um

675
00:24:47,360 --> 00:24:50,720
uh slack that you're welcome to uh

676
00:24:50,720 --> 00:24:52,799
to ask questions and say well brandon

677
00:24:52,799 --> 00:24:53,919
says very well done

678
00:24:53,919 --> 00:24:55,440
thank you very much thank you very much

679
00:24:55,440 --> 00:24:57,200
brandon um

680
00:24:57,200 --> 00:25:00,559
so so what's um what's

681
00:25:00,559 --> 00:25:03,360
i think i think you know when building

682
00:25:03,360 --> 00:25:05,120
building regularly is one of the kind of

683
00:25:05,120 --> 00:25:06,720
things that very often

684
00:25:06,720 --> 00:25:09,360
eliminates vulnerabilities building too

685
00:25:09,360 --> 00:25:10,400
regularly and

686
00:25:10,400 --> 00:25:12,240
and the build you know as you rightly

687
00:25:12,240 --> 00:25:14,159
say kind of gets unstable because you

688
00:25:14,159 --> 00:25:16,880
you don't know what you're getting um so

689
00:25:16,880 --> 00:25:18,480
where's the balance in terms of how

690
00:25:18,480 --> 00:25:18,880
often

691
00:25:18,880 --> 00:25:20,400
you think people should rebuild should

692
00:25:20,400 --> 00:25:22,080
they rebuild periodically

693
00:25:22,080 --> 00:25:23,679
should they rebuild based on security

694
00:25:23,679 --> 00:25:25,120
vulnerabilities or should they be

695
00:25:25,120 --> 00:25:27,279
you know should it be something else

696
00:25:27,279 --> 00:25:30,159
simon i expected this question from

697
00:25:30,159 --> 00:25:32,720
uh someone who works for a security

698
00:25:32,720 --> 00:25:34,880
company that deals with vulnerabilities

699
00:25:34,880 --> 00:25:36,640
thank you and that's a great question

700
00:25:36,640 --> 00:25:38,159
because i kind of i

701
00:25:38,159 --> 00:25:40,960
i left a bomb over there when i said oh

702
00:25:40,960 --> 00:25:41,279
no no

703
00:25:41,279 --> 00:25:43,520
no don't take the latest ubuntu because

704
00:25:43,520 --> 00:25:45,039
they will push the curative in your

705
00:25:45,039 --> 00:25:46,960
abilities and it will break your build

706
00:25:46,960 --> 00:25:49,200
and i could imagine simon's head goes

707
00:25:49,200 --> 00:25:50,480
like what

708
00:25:50,480 --> 00:25:54,159
shut up well it is it is an interesting

709
00:25:54,159 --> 00:25:56,000
dilemma right because you do want

710
00:25:56,000 --> 00:25:58,799
sometimes to get the latest ubuntu 1404

711
00:25:58,799 --> 00:26:00,000
because there are security

712
00:26:00,000 --> 00:26:01,919
vulnerabilities there and this is

713
00:26:01,919 --> 00:26:04,640
fine you should get the latest but it

714
00:26:04,640 --> 00:26:06,159
shouldn't be the one

715
00:26:06,159 --> 00:26:08,960
which is automatically used as the base

716
00:26:08,960 --> 00:26:09,600
image

717
00:26:09,600 --> 00:26:12,320
for your production environment so what

718
00:26:12,320 --> 00:26:13,039
you do

719
00:26:13,039 --> 00:26:14,799
you have your experimentation

720
00:26:14,799 --> 00:26:16,480
environment in which

721
00:26:16,480 --> 00:26:19,279
you can even be on the latest you know

722
00:26:19,279 --> 00:26:19,760
what

723
00:26:19,760 --> 00:26:22,240
run the latest from docker hub and use

724
00:26:22,240 --> 00:26:23,520
the latest ubuntu

725
00:26:23,520 --> 00:26:26,559
and see if the build breaks if the build

726
00:26:26,559 --> 00:26:27,440
doesn't break

727
00:26:27,440 --> 00:26:30,080
then you embrace this version and you

728
00:26:30,080 --> 00:26:31,279
say oh you know what

729
00:26:31,279 --> 00:26:34,480
this is still good now i take it i own

730
00:26:34,480 --> 00:26:34,960
it

731
00:26:34,960 --> 00:26:38,640
i cache it in my um in my registry

732
00:26:38,640 --> 00:26:41,679
and this will be my new base what we

733
00:26:41,679 --> 00:26:42,559
don't want

734
00:26:42,559 --> 00:26:44,720
is every time we build something

735
00:26:44,720 --> 00:26:46,720
especially when it automatically goes to

736
00:26:46,720 --> 00:26:47,360
production

737
00:26:47,360 --> 00:26:49,360
is just download random files from

738
00:26:49,360 --> 00:26:51,360
internet this is a no no

739
00:26:51,360 --> 00:26:54,640
checking periodically for new versions

740
00:26:54,640 --> 00:26:55,600
that include

741
00:26:55,600 --> 00:26:58,960
uh important patches as security venue

742
00:26:58,960 --> 00:26:59,520
abilities

743
00:26:59,520 --> 00:27:02,320
is absolutely a best practice and who do

744
00:27:02,320 --> 00:27:02,880
you feel

745
00:27:02,880 --> 00:27:04,480
who do you feel should own that decision

746
00:27:04,480 --> 00:27:06,400
in terms of when something gets promoted

747
00:27:06,400 --> 00:27:07,679
into the um

748
00:27:07,679 --> 00:27:11,360
into the registry um so

749
00:27:11,360 --> 00:27:14,159
this we have now it's not about who

750
00:27:14,159 --> 00:27:16,159
right we don't want people in process

751
00:27:16,159 --> 00:27:18,399
at all what we want people to do is to

752
00:27:18,399 --> 00:27:19,679
build pipelines

753
00:27:19,679 --> 00:27:21,760
now we need to have pipelines of

754
00:27:21,760 --> 00:27:22,960
different maturities

755
00:27:22,960 --> 00:27:24,559
obviously the pipeline that goes into

756
00:27:24,559 --> 00:27:26,720
production shouldn't be messed with

757
00:27:26,720 --> 00:27:28,880
but we need to experiment we have the

758
00:27:28,880 --> 00:27:30,320
machines to spin

759
00:27:30,320 --> 00:27:32,320
any number of environments in any number

760
00:27:32,320 --> 00:27:34,159
of of uh

761
00:27:34,159 --> 00:27:36,720
of pipelines and one of the pipelines

762
00:27:36,720 --> 00:27:37,279
definitely

763
00:27:37,279 --> 00:27:39,360
should be the one that tries different

764
00:27:39,360 --> 00:27:41,120
latest from different places

765
00:27:41,120 --> 00:27:44,320
and see what actually survives and if

766
00:27:44,320 --> 00:27:46,640
the experiment is successful we pulled

767
00:27:46,640 --> 00:27:48,399
bunch of new dependencies

768
00:27:48,399 --> 00:27:50,960
are and now our application is now more

769
00:27:50,960 --> 00:27:51,760
secure

770
00:27:51,760 --> 00:27:54,320
faster or we can actually use new

771
00:27:54,320 --> 00:27:55,039
features

772
00:27:55,039 --> 00:27:58,080
that we that came with those latest

773
00:27:58,080 --> 00:28:01,360
this is where our green experimentation

774
00:28:01,360 --> 00:28:03,440
pipeline will be a good sign for us

775
00:28:03,440 --> 00:28:06,000
to actually own all those dependencies

776
00:28:06,000 --> 00:28:07,200
stash them in

777
00:28:07,200 --> 00:28:10,240
our repository manager and start relying

778
00:28:10,240 --> 00:28:10,960
on them

779
00:28:10,960 --> 00:28:13,039
in the production pipeline that actually

780
00:28:13,039 --> 00:28:15,520
takes it to production

781
00:28:15,520 --> 00:28:17,600
awesome uh baruch we're at time thank

782
00:28:17,600 --> 00:28:18,799
you very very much

783
00:28:18,799 --> 00:28:21,679
uh been an amazing session uh as always

784
00:28:21,679 --> 00:28:22,080
and

785
00:28:22,080 --> 00:28:23,440
thank you very much for supporting all

786
00:28:23,440 --> 00:28:25,120
the talks as well really appreciate both

787
00:28:25,120 --> 00:28:25,760
your and

788
00:28:25,760 --> 00:28:28,159
uh jay frog's uh support uh during the

789
00:28:28,159 --> 00:28:28,799
whole conference

790
00:28:28,799 --> 00:28:30,960
this is uh our pleasure thank you for

791
00:28:30,960 --> 00:28:33,279
doing that that's for a good cause

792
00:28:33,279 --> 00:28:35,760
amazing speakers keep rocking and your

793
00:28:35,760 --> 00:28:37,600
sensation is next so good luck

794
00:28:37,600 --> 00:28:39,520
thank you very much brick and see you

795
00:28:39,520 --> 00:28:40,960
soon hopefully

796
00:28:40,960 --> 00:28:43,840
bye

