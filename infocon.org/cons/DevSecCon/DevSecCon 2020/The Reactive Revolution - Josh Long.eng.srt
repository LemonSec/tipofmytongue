1
00:00:00,000 --> 00:00:04,200
and Starbucks man Josh long all right

2
00:00:04,200 --> 00:00:06,330
get stuff thank you so much your screen

3
00:00:06,330 --> 00:00:11,240
what do I do we I will just that's Derek

4
00:00:11,240 --> 00:00:12,570
we're good

5
00:00:12,570 --> 00:00:16,109
relax I'm so excited so thank you both

6
00:00:16,109 --> 00:00:18,510
of you for kicking us off I appreciate

7
00:00:18,510 --> 00:00:21,230
every else being here there's a you know

8
00:00:21,230 --> 00:00:23,010
normally I don't think a lot of good

9
00:00:23,010 --> 00:00:24,420
places that you could be a better me

10
00:00:24,420 --> 00:00:27,119
right now and and that's to some extent

11
00:00:27,119 --> 00:00:28,980
kind of true but let's be honest you're

12
00:00:28,980 --> 00:00:30,779
probably at home and that's okay it's a

13
00:00:30,779 --> 00:00:33,030
good cause this is a we can do this but

14
00:00:33,030 --> 00:00:34,170
we don't have a lot of time I just

15
00:00:34,170 --> 00:00:36,239
learned that we have about 30 minutes to

16
00:00:36,239 --> 00:00:39,420
cover this so uh let's get going now my

17
00:00:39,420 --> 00:00:41,219
name is Josh long it's a you know very

18
00:00:41,219 --> 00:00:42,899
nice of you two to join us all today

19
00:00:42,899 --> 00:00:44,550
we're gonna talk about the reactive

20
00:00:44,550 --> 00:00:45,780
revolution there's a several things that

21
00:00:45,780 --> 00:00:47,489
you should know first of all we got a

22
00:00:47,489 --> 00:00:48,690
new book called reactive spring about

23
00:00:48,690 --> 00:00:50,610
which you know in which I talk a lot

24
00:00:50,610 --> 00:00:52,440
more about the topic that we're gonna

25
00:00:52,440 --> 00:00:54,780
cover today the podcast I do is on

26
00:00:54,780 --> 00:00:56,730
bootiful podcast at him you can find it

27
00:00:56,730 --> 00:00:58,770
on all the places where you find good

28
00:00:58,770 --> 00:01:00,539
podcasts and of course the code for the

29
00:01:00,539 --> 00:01:03,359
presentation is there at github comm

30
00:01:03,359 --> 00:01:05,030
Josh wrong the reactive revolution now

31
00:01:05,030 --> 00:01:06,869
let's talk about what we're gonna be

32
00:01:06,869 --> 00:01:08,220
talking about here let's talk about why

33
00:01:08,220 --> 00:01:10,470
we care about reactive programming we

34
00:01:10,470 --> 00:01:11,970
all want to handle more users we all

35
00:01:11,970 --> 00:01:13,080
want to make better use of our resources

36
00:01:13,080 --> 00:01:15,659
and of course that's made a bit more

37
00:01:15,659 --> 00:01:16,680
difficult right now because of the way

38
00:01:16,680 --> 00:01:18,570
that we use threads on the JVM thirds

39
00:01:18,570 --> 00:01:21,000
are expensive and unfortunately if you

40
00:01:21,000 --> 00:01:22,380
log into existing systems you'll see

41
00:01:22,380 --> 00:01:24,570
that the JVM is used to build services

42
00:01:24,570 --> 00:01:26,130
and if you look at the use of those JVM

43
00:01:26,130 --> 00:01:28,200
services you'll see that this CP usage

44
00:01:28,200 --> 00:01:29,729
is actually fairly low because the

45
00:01:29,729 --> 00:01:31,740
services are mostly idle all the threads

46
00:01:31,740 --> 00:01:32,850
are in a wait state waiting for

47
00:01:32,850 --> 00:01:34,439
something to happen but not otherwise

48
00:01:34,439 --> 00:01:38,930
doing anything CP usage is low because

49
00:01:38,930 --> 00:01:41,009
most of the time they're doing input and

50
00:01:41,009 --> 00:01:42,780
output this is because input and output

51
00:01:42,780 --> 00:01:44,280
any sort of environments is based on

52
00:01:44,280 --> 00:01:46,470
synchronous and blocking Java i/o input

53
00:01:46,470 --> 00:01:49,049
stream when you call dot read on the

54
00:01:49,049 --> 00:01:52,079
input stream in an interface the client

55
00:01:52,079 --> 00:01:54,060
thread stalls it sits there waiting for

56
00:01:54,060 --> 00:01:56,399
the next byte but we don't know when the

57
00:01:56,399 --> 00:01:58,500
next byte will arrive we don't know if

58
00:01:58,500 --> 00:02:00,000
it will arrive and we shouldn't write

59
00:02:00,000 --> 00:02:02,969
code that is so dependent on the next

60
00:02:02,969 --> 00:02:04,350
byte being there we shouldn't be writing

61
00:02:04,350 --> 00:02:07,170
code that is so prone to failure such

62
00:02:07,170 --> 00:02:09,030
code will have to we'll have no way to

63
00:02:09,030 --> 00:02:11,129
exit save for some exception perhaps a

64
00:02:11,129 --> 00:02:12,180
timeout and worse

65
00:02:12,180 --> 00:02:13,829
it monopolizes a thread that

66
00:02:13,829 --> 00:02:15,480
some other thing in the system could or

67
00:02:15,480 --> 00:02:17,670
should be using instead so what we need

68
00:02:17,670 --> 00:02:18,989
is a programming model that flips that

69
00:02:18,989 --> 00:02:20,129
around it gives us the ability to say

70
00:02:20,129 --> 00:02:22,769
hey when there is data available call me

71
00:02:22,769 --> 00:02:23,159
back

72
00:02:23,159 --> 00:02:24,360
give me the ability to continue

73
00:02:24,360 --> 00:02:26,790
processing when I can but no sooner and

74
00:02:26,790 --> 00:02:28,650
in the meantime don't keep this thread

75
00:02:28,650 --> 00:02:30,659
open let somebody else we use a thread

76
00:02:30,659 --> 00:02:31,859
while something else in the background

77
00:02:31,859 --> 00:02:34,019
you know babysits that file descriptor

78
00:02:34,019 --> 00:02:35,310
waiting for that data to arrive

79
00:02:35,310 --> 00:02:37,709
that's the essence the crux of reactive

80
00:02:37,709 --> 00:02:39,390
programming it gives us a programming

81
00:02:39,390 --> 00:02:41,220
model that lets us contend with latent

82
00:02:41,220 --> 00:02:43,260
potentially unlimited potentially faulty

83
00:02:43,260 --> 00:02:45,510
and certainly asynchronous streams of

84
00:02:45,510 --> 00:02:47,609
data there's a much more natural way

85
00:02:47,609 --> 00:02:49,590
this is a much more natural way to sort

86
00:02:49,590 --> 00:02:50,730
of view the world when you think about

87
00:02:50,730 --> 00:02:54,750
it as a result all programming is the

88
00:02:54,750 --> 00:02:55,769
one kind of thing where it's all

89
00:02:55,769 --> 00:02:57,569
reactive it's all these sort of

90
00:02:57,569 --> 00:02:59,400
asynchronous reactive data types it

91
00:02:59,400 --> 00:03:00,389
becomes very easy to compose

92
00:03:00,389 --> 00:03:02,159
applications written in the style so

93
00:03:02,159 --> 00:03:03,060
that's what we're gonna talk about today

94
00:03:03,060 --> 00:03:04,379
my friends that's we're gonna look at

95
00:03:04,379 --> 00:03:05,879
today and of course in order to do that

96
00:03:05,879 --> 00:03:07,079
we're gonna build a new application

97
00:03:07,079 --> 00:03:09,359
we're gonna do that by going to my

98
00:03:09,359 --> 00:03:11,040
second favorite place on the internet

99
00:03:11,040 --> 00:03:12,930
after production obviously I love

100
00:03:12,930 --> 00:03:14,250
production and you should love

101
00:03:14,250 --> 00:03:16,049
production as well but what we're gonna

102
00:03:16,049 --> 00:03:17,090
do is we're gonna build an application

103
00:03:17,090 --> 00:03:19,199
on my second favorite place on the

104
00:03:19,199 --> 00:03:20,760
internet after production so if you

105
00:03:20,760 --> 00:03:22,319
haven't already gotten to production you

106
00:03:22,319 --> 00:03:23,970
can begin your journey here let's start

107
00:03:23,970 --> 00:03:26,010
that spring that i/o now I'm gonna make

108
00:03:26,010 --> 00:03:27,599
that a little bit larger and you can see

109
00:03:27,599 --> 00:03:28,530
that there's a few things that have

110
00:03:28,530 --> 00:03:29,970
changed about start to spring today or

111
00:03:29,970 --> 00:03:32,040
recently first of all dark mode how cool

112
00:03:32,040 --> 00:03:34,379
is that I agree it's the best and also a

113
00:03:34,379 --> 00:03:36,780
new user interface so there you go we're

114
00:03:36,780 --> 00:03:38,579
gonna build an application using maven

115
00:03:38,579 --> 00:03:40,949
we use two to three om four we can use

116
00:03:40,949 --> 00:03:43,229
Java I am gonna use Java 11 or 14

117
00:03:43,229 --> 00:03:45,209
anything works just fine but really you

118
00:03:45,209 --> 00:03:47,129
should be using Java 11 or later

119
00:03:47,129 --> 00:03:50,459
ideally Java 14 and we're gonna build a

120
00:03:50,459 --> 00:03:52,229
new service and the service is gonna be

121
00:03:52,229 --> 00:03:54,419
called service and we're gonna bring in

122
00:03:54,419 --> 00:03:55,500
certain dependencies that we need to go

123
00:03:55,500 --> 00:03:57,870
to to get the job done so I'm gonna

124
00:03:57,870 --> 00:03:59,250
bring in the reactive web support we're

125
00:03:59,250 --> 00:04:00,989
gonna bring in the reactive MongoDB

126
00:04:00,989 --> 00:04:04,859
support MongoDB okay we're gonna bring

127
00:04:04,859 --> 00:04:07,590
in post quiz to L we're gonna bring in

128
00:04:07,590 --> 00:04:10,739
the reactive we've got that we don't

129
00:04:10,739 --> 00:04:12,479
want our socket as well so we got

130
00:04:12,479 --> 00:04:14,250
reactive lab we've got reactive MongoDB

131
00:04:14,250 --> 00:04:16,529
we've got PostgreSQL we've got our

132
00:04:16,529 --> 00:04:19,260
sockets um I think that's enough I think

133
00:04:19,260 --> 00:04:21,209
that's pretty much everything I want in

134
00:04:21,209 --> 00:04:22,139
order to be able to build this

135
00:04:22,139 --> 00:04:23,969
application so again pretty lightweight

136
00:04:23,969 --> 00:04:25,080
stuff but notice that we had to choose

137
00:04:25,080 --> 00:04:26,849
the reactive variants of these various

138
00:04:26,849 --> 00:04:27,480
dependencies or

139
00:04:27,480 --> 00:04:28,800
to get the job done so let's hit

140
00:04:28,800 --> 00:04:31,890
generate better give us a new zip file

141
00:04:31,890 --> 00:04:34,110
I'm gonna close slack because goodness

142
00:04:34,110 --> 00:04:37,410
knows I don't want to you know sandpit

143
00:04:37,410 --> 00:04:38,580
in the middle of a presentation just

144
00:04:38,580 --> 00:04:39,930
staring at slack and going what's going

145
00:04:39,930 --> 00:04:41,880
on why do why do people say the things

146
00:04:41,880 --> 00:04:43,620
that they say so here we go you a Oh

147
00:04:43,620 --> 00:04:46,170
serviced at zip opening this up in my

148
00:04:46,170 --> 00:04:48,570
freshly installed 2020 that one

149
00:04:48,570 --> 00:04:51,240
installation I'm IntelliJ so pretty so

150
00:04:51,240 --> 00:04:56,220
nice there we go don't show me this

151
00:04:56,220 --> 00:04:57,870
again I'll click this every time I've

152
00:04:57,870 --> 00:04:59,520
restarted IntelliJ I've said don't show

153
00:04:59,520 --> 00:05:01,410
me it again and it shows it to me every

154
00:05:01,410 --> 00:05:03,450
time so I I get there's a disconnect

155
00:05:03,450 --> 00:05:05,070
between my my definition of don't show

156
00:05:05,070 --> 00:05:07,080
it again and its definition

157
00:05:07,080 --> 00:05:10,200
so here we go we got a new application

158
00:05:10,200 --> 00:05:12,060
I'm hoping you can see that let me make

159
00:05:12,060 --> 00:05:13,440
the fun just a little larger here

160
00:05:13,440 --> 00:05:20,520
friends font one flat font and that's

161
00:05:20,520 --> 00:05:21,990
twenty two that'll be hopefully large

162
00:05:21,990 --> 00:05:22,920
enough so we can build an application

163
00:05:22,920 --> 00:05:24,870
that saves data to the database we've

164
00:05:24,870 --> 00:05:26,490
got a couple databases here that are

165
00:05:26,490 --> 00:05:28,920
that are usable so I've got MongoDB

166
00:05:28,920 --> 00:05:29,910
running my local machine in the

167
00:05:29,910 --> 00:05:32,370
background and I've got PostgreSQL so

168
00:05:32,370 --> 00:05:34,290
for now we're not gonna use PostgreSQL

169
00:05:34,290 --> 00:05:39,300
so let's comment out the oh I don't have

170
00:05:39,300 --> 00:05:41,040
the our socket bit so do i I could've

171
00:05:41,040 --> 00:05:43,200
sworn I chose him oh that's my problem

172
00:05:43,200 --> 00:05:45,690
so look at that archie b c CI i can

173
00:05:45,690 --> 00:05:47,520
retroactively lis add to it and just go

174
00:05:47,520 --> 00:05:49,230
explore and then just copy and paste the

175
00:05:49,230 --> 00:05:51,690
bits that I neglected to grab the first

176
00:05:51,690 --> 00:05:53,160
time around so here we go

177
00:05:53,160 --> 00:05:55,740
reactive MongoDB everything in between

178
00:05:55,740 --> 00:05:58,320
the dependencies I just like to watch it

179
00:05:58,320 --> 00:05:59,700
just copy paste at all I guess right

180
00:05:59,700 --> 00:06:03,690
I'll here we go copy paste good fixed it

181
00:06:03,690 --> 00:06:06,300
so now I'm gonna comment out the MongoDB

182
00:06:06,300 --> 00:06:08,190
so I'm gonna comment out the RTV C bits

183
00:06:08,190 --> 00:06:16,190
here get rid of that get rid of that and

184
00:06:16,190 --> 00:06:18,540
we're gonna get rid of that okay so now

185
00:06:18,540 --> 00:06:19,950
I have an application that's just gonna

186
00:06:19,950 --> 00:06:21,390
talk to MongoDB by default it'll connect

187
00:06:21,390 --> 00:06:23,040
to localhost I'm gonna write data to the

188
00:06:23,040 --> 00:06:24,690
database and I'm gonna use that spring

189
00:06:24,690 --> 00:06:26,400
data or M that's running in the

190
00:06:26,400 --> 00:06:27,660
background there to do the work for me

191
00:06:27,660 --> 00:06:29,580
so I'll create a an object to be mapped

192
00:06:29,580 --> 00:06:31,740
to fields in the database and I'll

193
00:06:31,740 --> 00:06:33,780
describe those fields with annotations

194
00:06:33,780 --> 00:06:34,530
thusly

195
00:06:34,530 --> 00:06:36,660
so document and so on this is the

196
00:06:36,660 --> 00:06:37,650
essence of what I want to do but of

197
00:06:37,650 --> 00:06:38,880
course I need getters and setters and

198
00:06:38,880 --> 00:06:41,060
all that kind of stuff so I could do you

199
00:06:41,060 --> 00:06:42,500
all that stuff myself or I could use

200
00:06:42,500 --> 00:06:44,660
Lombok which I've also apparently

201
00:06:44,660 --> 00:06:46,480
neglected to add here so let's do that

202
00:06:46,480 --> 00:06:51,740
Lombok okay control space explore and

203
00:06:51,740 --> 00:06:54,100
just go from Lombok there we are okay

204
00:06:54,100 --> 00:06:56,389
good stuff now

205
00:06:56,389 --> 00:06:57,980
Lombok is a compile time annotation

206
00:06:57,980 --> 00:06:59,270
processor it'll make it easier for me to

207
00:06:59,270 --> 00:07:02,150
to generate the getters and setters that

208
00:07:02,150 --> 00:07:03,710
kind of stuff that i need to do the work

209
00:07:03,710 --> 00:07:07,180
let's see here

210
00:07:08,139 --> 00:07:16,400
may then re-import please good there we

211
00:07:16,400 --> 00:07:18,590
go at all arts constructor at no arts

212
00:07:18,590 --> 00:07:20,090
constructor good stuff so there's the

213
00:07:20,090 --> 00:07:21,500
essence of our entity now we're gonna

214
00:07:21,500 --> 00:07:22,850
create a repository and this repository

215
00:07:22,850 --> 00:07:24,320
is just going to be an interface that we

216
00:07:24,320 --> 00:07:26,510
extend from the spring data reactive

217
00:07:26,510 --> 00:07:28,970
MongoDB project reactive crud repository

218
00:07:28,970 --> 00:07:30,530
now this repository is gonna manage

219
00:07:30,530 --> 00:07:33,229
instances of reservation whose primary

220
00:07:33,229 --> 00:07:34,970
keys of type string this is the

221
00:07:34,970 --> 00:07:36,020
interface that we don't have to

222
00:07:36,020 --> 00:07:37,400
implement ourselves or several different

223
00:07:37,400 --> 00:07:38,900
methods here whose names are fairly

224
00:07:38,900 --> 00:07:40,550
straightforward same fine fine by ID

225
00:07:40,550 --> 00:07:42,740
check of exists County etc what is

226
00:07:42,740 --> 00:07:44,720
interesting are the parameter types are

227
00:07:44,720 --> 00:07:46,490
accepted the first of which is a

228
00:07:46,490 --> 00:07:48,710
reactive stream type so from Oregon

229
00:07:48,710 --> 00:07:50,840
reactive streams dot publisher reactive

230
00:07:50,840 --> 00:07:51,830
screen publisher publishes data

231
00:07:51,830 --> 00:07:53,990
asynchronously and out-of-band to a

232
00:07:53,990 --> 00:07:55,640
subscriber the subscriber listens for

233
00:07:55,640 --> 00:07:57,440
the data processes each new message in

234
00:07:57,440 --> 00:07:59,000
the our next method or the on-air method

235
00:07:59,000 --> 00:08:00,169
if they're errors when it's done

236
00:08:00,169 --> 00:08:02,240
processing it calls on complete I'm

237
00:08:02,240 --> 00:08:03,950
gonna first connects to the publisher it

238
00:08:03,950 --> 00:08:05,750
is given a subscription the subscription

239
00:08:05,750 --> 00:08:07,669
is very very important the subscription

240
00:08:07,669 --> 00:08:09,770
is what a subscriber uses to control the

241
00:08:09,770 --> 00:08:11,539
rate of production by requesting more or

242
00:08:11,539 --> 00:08:13,430
less of the data this is called flow

243
00:08:13,430 --> 00:08:15,590
control or alternatively back pressure

244
00:08:15,590 --> 00:08:17,870
you can also cancel the production of

245
00:08:17,870 --> 00:08:19,400
the data so here the consumer it

246
00:08:19,400 --> 00:08:20,840
controls the rate of consumption this

247
00:08:20,840 --> 00:08:23,150
creates and promotes stabler services

248
00:08:23,150 --> 00:08:25,520
okay this is very important we also have

249
00:08:25,520 --> 00:08:26,810
a processor which is a bridge as a

250
00:08:26,810 --> 00:08:28,430
source and a sink if you understand

251
00:08:28,430 --> 00:08:30,860
these very very simple four types then

252
00:08:30,860 --> 00:08:31,850
you understand the reactive stream

253
00:08:31,850 --> 00:08:33,169
specification that's it that's the

254
00:08:33,169 --> 00:08:35,150
entire thing they're very useful but

255
00:08:35,150 --> 00:08:36,559
their race is Spartan so what we want is

256
00:08:36,559 --> 00:08:39,349
two specializations one that describes a

257
00:08:39,349 --> 00:08:41,419
single you know value kind of like a

258
00:08:41,419 --> 00:08:42,950
completable future that's called a mono

259
00:08:42,950 --> 00:08:45,589
it's also a publisher and another one

260
00:08:45,589 --> 00:08:47,810
that describes a infinite potentially

261
00:08:47,810 --> 00:08:49,490
infinite stream of values called a flux

262
00:08:49,490 --> 00:08:51,920
it's a publisher as well both these have

263
00:08:51,920 --> 00:08:54,010
come from project reactor which is a

264
00:08:54,010 --> 00:08:55,070
spring

265
00:08:55,070 --> 00:08:56,780
team project that doesn't depend on

266
00:08:56,780 --> 00:08:58,640
spring right spring depends on it but

267
00:08:58,640 --> 00:09:01,130
you don't need to swing to use it this

268
00:09:01,130 --> 00:09:03,320
project also provides lots of operators

269
00:09:03,320 --> 00:09:05,090
that we can use to compose our reactive

270
00:09:05,090 --> 00:09:07,130
stream so we now have the service

271
00:09:07,130 --> 00:09:09,590
application we have our repository let's

272
00:09:09,590 --> 00:09:10,940
write some sample data to the database

273
00:09:10,940 --> 00:09:11,990
okay

274
00:09:11,990 --> 00:09:14,810
and I'm gonna create a beam that listens

275
00:09:14,810 --> 00:09:17,290
for an event so application ready event

276
00:09:17,290 --> 00:09:22,040
okay ready event class public void go

277
00:09:22,040 --> 00:09:24,200
right and it's just gonna be a regular

278
00:09:24,200 --> 00:09:25,730
spring component that we're going to use

279
00:09:25,730 --> 00:09:27,830
we're gonna inject a final reservation

280
00:09:27,830 --> 00:09:31,580
repository here we are and inject that

281
00:09:31,580 --> 00:09:33,080
into the constructor using the required

282
00:09:33,080 --> 00:09:35,030
arts instructor again from Lombok now

283
00:09:35,030 --> 00:09:36,980
there's my basic application my basic

284
00:09:36,980 --> 00:09:38,630
object I'm gonna create some names here

285
00:09:38,630 --> 00:09:39,920
and just write them to the database so

286
00:09:39,920 --> 00:09:41,870
my name is Josh it's nice to meet you

287
00:09:41,870 --> 00:09:43,400
let's go through some names in the

288
00:09:43,400 --> 00:09:47,360
spring team Medora Cornelia we've got vo

289
00:09:47,360 --> 00:09:54,410
left we've got you shin we've got that's

290
00:09:54,410 --> 00:09:56,600
a five I guess we need some other spring

291
00:09:56,600 --> 00:09:59,000
people there we go we've got who else do

292
00:09:59,000 --> 00:10:00,440
we have out there in the world that is

293
00:10:00,440 --> 00:10:03,080
um Oh Simon he's not here but I haven't

294
00:10:03,080 --> 00:10:04,910
talked to him all day there we go

295
00:10:04,910 --> 00:10:08,120
names okay so some names there and for

296
00:10:08,120 --> 00:10:11,540
each name we're gonna visit that and

297
00:10:11,540 --> 00:10:13,640
turn it into a reservation like so so

298
00:10:13,640 --> 00:10:14,960
there we go and then for each one of

299
00:10:14,960 --> 00:10:16,130
those I'm gonna save it to the database

300
00:10:16,130 --> 00:10:18,590
now I could I could and probably should

301
00:10:18,590 --> 00:10:20,180
just expect it out to a separate

302
00:10:20,180 --> 00:10:21,740
variable and then visit each one like

303
00:10:21,740 --> 00:10:24,290
this if I say map R and then I say

304
00:10:24,290 --> 00:10:27,410
reservation repository to save what's

305
00:10:27,410 --> 00:10:28,910
gonna happen is that it's going to be

306
00:10:28,910 --> 00:10:32,270
turn a publisher right so it's gonna

307
00:10:32,270 --> 00:10:34,340
return a publisher of mono it's a

308
00:10:34,340 --> 00:10:35,720
publisher of reservation so it's a it's

309
00:10:35,720 --> 00:10:37,370
an aggregate type its container type and

310
00:10:37,370 --> 00:10:40,190
this map method aggregates the nested

311
00:10:40,190 --> 00:10:42,070
method so it'll be a publisher of

312
00:10:42,070 --> 00:10:44,810
publisher of reservation I don't want

313
00:10:44,810 --> 00:10:46,580
two nested publishers I want just one so

314
00:10:46,580 --> 00:10:48,440
what I'm gonna do is I'm gonna unpack

315
00:10:48,440 --> 00:10:50,660
that intermediate type I'm gonna flatten

316
00:10:50,660 --> 00:10:54,050
basically the types they're similar but

317
00:10:54,050 --> 00:10:55,910
separate from flattening the curve which

318
00:10:55,910 --> 00:10:57,200
we should all be doing right so there we

319
00:10:57,200 --> 00:11:00,380
go flat map save and there's my now

320
00:11:00,380 --> 00:11:02,000
stream of reservations that have been

321
00:11:02,000 --> 00:11:03,770
saved into the database if I run this

322
00:11:03,770 --> 00:11:05,420
program right now as written nothing

323
00:11:05,420 --> 00:11:07,280
will happen I need to actually subscribe

324
00:11:07,280 --> 00:11:08,899
ok subscription acts

325
00:11:08,899 --> 00:11:10,610
forces these publishers to actually

326
00:11:10,610 --> 00:11:12,259
execute by default they're like pipes

327
00:11:12,259 --> 00:11:13,970
into which you have put data but nothing

328
00:11:13,970 --> 00:11:16,399
flows okay so I'm gonna say map 1 dot

329
00:11:16,399 --> 00:11:18,889
subscribe and then as I do that I can

330
00:11:18,889 --> 00:11:21,050
actually put a consumer in there Java a

331
00:11:21,050 --> 00:11:23,300
consumer and print out the results if I

332
00:11:23,300 --> 00:11:24,920
want ok so that's a very simple thing to

333
00:11:24,920 --> 00:11:26,749
do I could clean this up a little bit I

334
00:11:26,749 --> 00:11:28,100
like to clean this up you know tease out

335
00:11:28,100 --> 00:11:29,839
the variables a little bit here good

336
00:11:29,839 --> 00:11:33,379
stuff good stuff and then subscribe okay

337
00:11:33,379 --> 00:11:36,139
so there's the whole pipeline as just

338
00:11:36,139 --> 00:11:38,779
one sort of thing um I want you want to

339
00:11:38,779 --> 00:11:40,999
save things but I want to delete

340
00:11:40,999 --> 00:11:42,110
everything in the database first I want

341
00:11:42,110 --> 00:11:43,970
to reset I'm gonna do delete all but

342
00:11:43,970 --> 00:11:45,470
that's an asynchronous reactive stream

343
00:11:45,470 --> 00:11:46,759
so remember that could all happen on

344
00:11:46,759 --> 00:11:48,110
separate threads so I want to use

345
00:11:48,110 --> 00:11:50,179
operators to guarantee a deterministic

346
00:11:50,179 --> 00:11:51,949
ordering on a safe delete everything and

347
00:11:51,949 --> 00:11:53,959
only then after all that's done only

348
00:11:53,959 --> 00:11:55,939
then don't want to write the data to the

349
00:11:55,939 --> 00:11:58,790
database and only then finally do I want

350
00:11:58,790 --> 00:12:00,679
to find all the data and only then

351
00:12:00,679 --> 00:12:02,389
finally don't want to subscribe and

352
00:12:02,389 --> 00:12:05,300
print out each of the records ok so good

353
00:12:05,300 --> 00:12:07,309
stuff there's the entire pipeline now if

354
00:12:07,309 --> 00:12:08,959
I run this code right now it'll work

355
00:12:08,959 --> 00:12:12,740
let's try that out but I'm gonna then

356
00:12:12,740 --> 00:12:14,420
want to create an HTTP endpoint ok so

357
00:12:14,420 --> 00:12:16,730
one thing I could do as per normal as as

358
00:12:16,730 --> 00:12:17,990
you might expect if you've ever used

359
00:12:17,990 --> 00:12:18,709
spring MVC

360
00:12:18,709 --> 00:12:22,309
is to create a reservation MVC or HTTP

361
00:12:22,309 --> 00:12:24,620
controller right so it should be

362
00:12:24,620 --> 00:12:26,660
controller or rest control actually

363
00:12:26,660 --> 00:12:28,129
that's what I want here isn't it surest

364
00:12:28,129 --> 00:12:30,230
controller so it's gonna be private

365
00:12:30,230 --> 00:12:35,029
final reservation repository ok

366
00:12:35,029 --> 00:12:39,920
and that get mapping I can do this just

367
00:12:39,920 --> 00:12:41,149
like I've done a million times before

368
00:12:41,149 --> 00:12:42,529
and I'm sure you probably have as well

369
00:12:42,529 --> 00:12:44,629
so here I'm just creating a HTTP

370
00:12:44,629 --> 00:12:46,459
endpoint that'll read the data from the

371
00:12:46,459 --> 00:12:49,850
repository and return it to the client

372
00:12:49,850 --> 00:12:50,929
ok so that's a very straightforward

373
00:12:50,929 --> 00:12:52,309
thing to do I should create a

374
00:12:52,309 --> 00:12:54,170
constructor here as well I quite like

375
00:12:54,170 --> 00:12:55,999
the style it's the spring MVC style it's

376
00:12:55,999 --> 00:12:58,370
very familiar if you're very used it but

377
00:12:58,370 --> 00:13:00,920
these days I much prefer the new

378
00:13:00,920 --> 00:13:02,600
functional reactive style like this so

379
00:13:02,600 --> 00:13:07,869
at beam router function server responds

380
00:13:07,869 --> 00:13:13,069
ok routes here we go and I'm going to

381
00:13:13,069 --> 00:13:15,339
return

382
00:13:15,889 --> 00:13:24,959
okay okay that build and it'll be a get

383
00:13:24,959 --> 00:13:26,939
forward slash reservations

384
00:13:26,939 --> 00:13:29,730
so I'm providing the same basic setup

385
00:13:29,730 --> 00:13:31,230
here I'm providing a lambda that gets

386
00:13:31,230 --> 00:13:35,069
called that gets invoked in in service

387
00:13:35,069 --> 00:13:36,899
of the response okay so the response is

388
00:13:36,899 --> 00:13:38,490
just gonna be a reactive stream that I'm

389
00:13:38,490 --> 00:13:40,050
gonna get from that repository which is

390
00:13:40,050 --> 00:13:41,220
the collaborating object which I'll just

391
00:13:41,220 --> 00:13:44,910
inject here so RR and I'll say RR that

392
00:13:44,910 --> 00:13:48,089
find all reservation dot class okay so

393
00:13:48,089 --> 00:13:50,879
there's the reactive stream good stuff

394
00:13:50,879 --> 00:13:53,999
there's the pre-written code we start

395
00:13:53,999 --> 00:13:56,610
that now so far if this works you'll

396
00:13:56,610 --> 00:13:58,199
have seen that I've been able to write

397
00:13:58,199 --> 00:13:59,730
data to the database I've got MongoDB

398
00:13:59,730 --> 00:14:01,619
you've got my HTTP endpoint you can see

399
00:14:01,619 --> 00:14:03,360
that that data has reflected here in the

400
00:14:03,360 --> 00:14:05,850
console um if I go to the browser I can

401
00:14:05,850 --> 00:14:07,649
go here localhost 8080 reservations

402
00:14:07,649 --> 00:14:09,720
there's the the Jason that comes back so

403
00:14:09,720 --> 00:14:11,850
it's all working but these are this is a

404
00:14:11,850 --> 00:14:13,649
no SQL data store right now and there

405
00:14:13,649 --> 00:14:14,670
are many different noise killed data

406
00:14:14,670 --> 00:14:17,519
stores which twitch you should become

407
00:14:17,519 --> 00:14:18,569
familiar if you haven't already and

408
00:14:18,569 --> 00:14:19,949
there's a lot of good options there we

409
00:14:19,949 --> 00:14:22,319
support reactive variants specifically

410
00:14:22,319 --> 00:14:23,850
separate code bases for different

411
00:14:23,850 --> 00:14:24,959
reactive different technologies so

412
00:14:24,959 --> 00:14:26,519
Google Cloud Fire store and spanner

413
00:14:26,519 --> 00:14:28,579
Cassandra cosmos DB from Microsoft Azure

414
00:14:28,579 --> 00:14:31,829
Redis neo4j Couchbase elasticsearch etc

415
00:14:31,829 --> 00:14:33,720
but people often ask well what about SQL

416
00:14:33,720 --> 00:14:35,790
what about SQL data stores like post

417
00:14:35,790 --> 00:14:37,470
quiz and so on and so in this case we

418
00:14:37,470 --> 00:14:39,660
have an abstraction called r2 DBC which

419
00:14:39,660 --> 00:14:40,860
is a reactive relational database

420
00:14:40,860 --> 00:14:42,720
connectivity abstraction and it's built

421
00:14:42,720 --> 00:14:43,709
on top of the reactive stream

422
00:14:43,709 --> 00:14:45,149
specification which we've been using all

423
00:14:45,149 --> 00:14:46,589
this time so I'm gonna go ahead and

424
00:14:46,589 --> 00:14:49,259
comment out MongoDB and I'll bring in

425
00:14:49,259 --> 00:14:52,679
the appropriate types here so this is no

426
00:14:52,679 --> 00:14:54,600
longer a document right that only makes

427
00:14:54,600 --> 00:14:56,699
sense in the MongoDB context and this

428
00:14:56,699 --> 00:14:57,990
was gonna have a monotonically

429
00:14:57,990 --> 00:15:00,179
incrementing primary key but otherwise

430
00:15:00,179 --> 00:15:01,790
it's basically the same code as before

431
00:15:01,790 --> 00:15:05,959
so let's go ahead and restart that it is

432
00:15:05,959 --> 00:15:08,129
stunning to watch how slow compilation

433
00:15:08,129 --> 00:15:10,170
becomes once you have a screen caster on

434
00:15:10,170 --> 00:15:12,749
your screen when you're recording things

435
00:15:12,749 --> 00:15:15,540
on the machine oops what did I do wrong

436
00:15:15,540 --> 00:15:17,809
there or I forgot to provide a URL so

437
00:15:17,809 --> 00:15:22,110
application spring that RT b c dot

438
00:15:22,110 --> 00:15:27,390
URL r2 b c URL r2 DBC

439
00:15:27,390 --> 00:15:32,730
post quiz okay localhost

440
00:15:32,730 --> 00:15:39,269
orders username orders password orders

441
00:15:39,269 --> 00:15:54,300
okay let me start this some other error

442
00:15:54,300 --> 00:16:03,930
is it can I oughta generate of just

443
00:16:03,930 --> 00:16:06,589
really feel like that should be easy

444
00:16:06,589 --> 00:16:11,180
let's get rid of this by the way and

445
00:16:11,209 --> 00:16:23,279
integer that's confusing do I have the

446
00:16:23,279 --> 00:16:31,100
table here t-sql new orders orders t

447
00:16:31,519 --> 00:16:39,300
select all from reservation okay D or

448
00:16:39,300 --> 00:16:43,290
reservation it's got a primary key

449
00:16:43,290 --> 00:16:44,430
automatically okay

450
00:16:44,430 --> 00:16:45,570
doesn't really matter I'm gonna go back

451
00:16:45,570 --> 00:16:47,760
to MongoDB do not have time to figure

452
00:16:47,760 --> 00:16:48,660
out what happened in the latest

453
00:16:48,660 --> 00:16:51,120
milestone there I'm using another it's

454
00:16:51,120 --> 00:16:53,640
still using MongoDB in that error right

455
00:16:53,640 --> 00:16:58,829
below oh wait what why is it's an even

456
00:16:58,829 --> 00:17:01,110
build okay thanks buddy

457
00:17:01,110 --> 00:17:05,280
care programming for the wind so maven

458
00:17:05,280 --> 00:17:11,119
do your thing just this once okay good

459
00:17:11,119 --> 00:17:20,040
son of a gun okay compiling it's really

460
00:17:20,040 --> 00:17:21,540
I just I I already asked it to compile

461
00:17:21,540 --> 00:17:23,010
minutes ago years ago it's been

462
00:17:23,010 --> 00:17:29,940
compiling for this time okay come on you

463
00:17:29,940 --> 00:17:30,690
can do it

464
00:17:30,690 --> 00:17:32,490
there we go thanks buddy Matt for the

465
00:17:32,490 --> 00:17:34,429
win so there we go so select all from

466
00:17:34,429 --> 00:17:36,780
reservation we're back it's working Matt

467
00:17:36,780 --> 00:17:38,550
Cornelia Beauvoir there are our names so

468
00:17:38,550 --> 00:17:39,840
now we've got Dan Davis we've got a

469
00:17:39,840 --> 00:17:41,250
single date datastore we

470
00:17:41,250 --> 00:17:43,170
eight records coming from JSON this is

471
00:17:43,170 --> 00:17:44,490
not new this is not particularly useful

472
00:17:44,490 --> 00:17:45,960
you could have done this yesterday with

473
00:17:45,960 --> 00:17:47,970
JDBC and servlets what I showed you all

474
00:17:47,970 --> 00:17:49,020
this for us to make you understand that

475
00:17:49,020 --> 00:17:50,910
you have parity it's just as easy to do

476
00:17:50,910 --> 00:17:52,560
today what you could have done yesterday

477
00:17:52,560 --> 00:17:54,570
and the nonreactive rules that said your

478
00:17:54,570 --> 00:17:56,670
options are not limited at these very

479
00:17:56,670 --> 00:17:57,930
simple things where reactive programming

480
00:17:57,930 --> 00:17:59,250
really comes into its own is where you

481
00:17:59,250 --> 00:18:00,630
can do things that would have otherwise

482
00:18:00,630 --> 00:18:02,220
monopolized a thread in the old world so

483
00:18:02,220 --> 00:18:03,960
imagine a chat system or a stock ticker

484
00:18:03,960 --> 00:18:05,700
anything that requires a liveliness that

485
00:18:05,700 --> 00:18:07,230
would have required a client to make a

486
00:18:07,230 --> 00:18:08,790
connection to a service and keep a

487
00:18:08,790 --> 00:18:10,560
socket open in the old world that would

488
00:18:10,560 --> 00:18:12,660
have required a thread the monopolize

489
00:18:12,660 --> 00:18:14,430
are dedicated to that socket but now we

490
00:18:14,430 --> 00:18:16,170
can decouple that link keeping the

491
00:18:16,170 --> 00:18:17,340
socket open it doesn't mean keeping a

492
00:18:17,340 --> 00:18:19,410
thread open I can have thousands and

493
00:18:19,410 --> 00:18:20,670
thousands of file descriptors in my

494
00:18:20,670 --> 00:18:21,930
operating system they're open but I

495
00:18:21,930 --> 00:18:23,280
cannot have thousands and thousands of

496
00:18:23,280 --> 00:18:24,810
threads right the computer doesn't like

497
00:18:24,810 --> 00:18:26,580
so what we are gonna do is we're gonna

498
00:18:26,580 --> 00:18:29,070
be using the reactive support here to

499
00:18:29,070 --> 00:18:30,240
build a web socket endpoint that

500
00:18:30,240 --> 00:18:33,240
produces an infinite stream of greetings

501
00:18:33,240 --> 00:18:35,250
okay so greeting service and I'm gonna

502
00:18:35,250 --> 00:18:38,670
create two dto so class reading request

503
00:18:38,670 --> 00:18:43,200
and class greeting response okay now

504
00:18:43,200 --> 00:18:48,240
this is gonna be a dto okay nothing

505
00:18:48,240 --> 00:18:49,800
special about them just three

506
00:18:49,800 --> 00:18:52,710
annotations to make them provide all the

507
00:18:52,710 --> 00:18:55,200
normal machinery of a Java Bean okay so

508
00:18:55,200 --> 00:18:56,940
the name is gonna be the thing that we

509
00:18:56,940 --> 00:19:00,200
send in and the response will be the

510
00:19:00,200 --> 00:19:02,550
message that we get back okay so two

511
00:19:02,550 --> 00:19:05,250
details one has a an envelope for a name

512
00:19:05,250 --> 00:19:06,810
and the other one has an infinite stream

513
00:19:06,810 --> 00:19:08,130
or the other one it represents the

514
00:19:08,130 --> 00:19:09,570
messages can be sent back we're gonna

515
00:19:09,570 --> 00:19:11,040
create a service I guess we can create a

516
00:19:11,040 --> 00:19:15,990
service so publisher of greetings

517
00:19:15,990 --> 00:19:20,960
response okay greet given a greeting

518
00:19:20,960 --> 00:19:24,540
request okay so here I'm just gonna

519
00:19:24,540 --> 00:19:26,100
create an infinite stream I'll say flux

520
00:19:26,100 --> 00:19:29,670
dot from stream stream dot generate new

521
00:19:29,670 --> 00:19:34,230
supplier okay new greetings response

522
00:19:34,230 --> 00:19:40,860
hello request dot get name at instant

523
00:19:40,860 --> 00:19:45,780
dot now okay got to string so I'm gonna

524
00:19:45,780 --> 00:19:46,980
create an infinite stream but I want to

525
00:19:46,980 --> 00:19:48,570
actually stagger the results of that

526
00:19:48,570 --> 00:19:50,370
stream by one second I'm gonna introduce

527
00:19:50,370 --> 00:19:52,170
a little bit of time here and I can do

528
00:19:52,170 --> 00:19:53,910
that because I have a scheduler you

529
00:19:53,910 --> 00:19:55,140
the scenes that's one of the things that

530
00:19:55,140 --> 00:19:56,850
moves the flow of execution from one

531
00:19:56,850 --> 00:19:58,470
thread to another in our application

532
00:19:58,470 --> 00:20:00,870
that scheduler is what makes reactor so

533
00:20:00,870 --> 00:20:02,850
darn good at Tetris packing up our

534
00:20:02,850 --> 00:20:04,290
different threads and making sure we get

535
00:20:04,290 --> 00:20:05,670
the most efficiency out of it as

536
00:20:05,670 --> 00:20:07,530
possible so now I've got the scheduler

537
00:20:07,530 --> 00:20:08,670
and you don't have to worry about that

538
00:20:08,670 --> 00:20:10,140
scheduler by the way by default you have

539
00:20:10,140 --> 00:20:12,900
one thread per core and you can override

540
00:20:12,900 --> 00:20:13,980
the scheduler if you want so you can

541
00:20:13,980 --> 00:20:15,900
actually provide a custom one here for

542
00:20:15,900 --> 00:20:17,850
example but you don't need to do that if

543
00:20:17,850 --> 00:20:19,890
you ever if you ever find that you are

544
00:20:19,890 --> 00:20:21,270
starved for threads that means you're

545
00:20:21,270 --> 00:20:22,620
doing something it's blocking the

546
00:20:22,620 --> 00:20:23,880
threads which you shouldn't do and if

547
00:20:23,880 --> 00:20:25,320
you want to find out where you're doing

548
00:20:25,320 --> 00:20:26,580
that we have a nice Java agent you can

549
00:20:26,580 --> 00:20:28,530
use called block down here's block down

550
00:20:28,530 --> 00:20:30,720
it's a job agent that we built for you

551
00:20:30,720 --> 00:20:33,120
it detects silly blocking interactions

552
00:20:33,120 --> 00:20:34,200
on the thread which you should never do

553
00:20:34,200 --> 00:20:36,720
anyway so now I've got our service or

554
00:20:36,720 --> 00:20:38,550
infinite green service I want to export

555
00:20:38,550 --> 00:20:40,140
that and then consume it so what I'm

556
00:20:40,140 --> 00:20:41,460
gonna do is I'm gonna make this an hour

557
00:20:41,460 --> 00:20:43,620
socket service I could use WebSockets

558
00:20:43,620 --> 00:20:45,600
I could even try service and events but

559
00:20:45,600 --> 00:20:47,430
for service interactions I'm gonna use

560
00:20:47,430 --> 00:20:49,110
our socket our sockets a very nice fit

561
00:20:49,110 --> 00:20:52,440
for for high-speed services so what I've

562
00:20:52,440 --> 00:20:53,400
done is I've got added Springwood

563
00:20:53,400 --> 00:20:55,950
starters our socket to the classpath our

564
00:20:55,950 --> 00:20:57,420
socket you have to understand is a

565
00:20:57,420 --> 00:20:59,130
protocol that was designed by engineers

566
00:20:59,130 --> 00:21:00,660
who came from Netflix who work at

567
00:21:00,660 --> 00:21:03,540
Facebook and it's a very simple binary

568
00:21:03,540 --> 00:21:09,180
protocol that does not care about you

569
00:21:09,180 --> 00:21:11,040
know it doesn't have any limitation so

570
00:21:11,040 --> 00:21:12,360
it doesn't care what protocol you use or

571
00:21:12,360 --> 00:21:14,280
what payload use it's not like G RPC

572
00:21:14,280 --> 00:21:15,360
where you have to have Google protocol

573
00:21:15,360 --> 00:21:17,250
buffers it does a completely

574
00:21:17,250 --> 00:21:19,080
bi-directional communication so it's not

575
00:21:19,080 --> 00:21:20,910
like the HTTP where you're limited to

576
00:21:20,910 --> 00:21:23,250
request response it's um you know it's

577
00:21:23,250 --> 00:21:24,960
it's just generally a very very flexible

578
00:21:24,960 --> 00:21:27,960
protocol and we supported out of box and

579
00:21:27,960 --> 00:21:31,020
that's because in part the Java client

580
00:21:31,020 --> 00:21:32,640
that Facebook built to support this

581
00:21:32,640 --> 00:21:34,920
natively reactive wire protocol is built

582
00:21:34,920 --> 00:21:36,780
on reactor so it's trivial for us to

583
00:21:36,780 --> 00:21:38,340
then provide a programming model as I

584
00:21:38,340 --> 00:21:40,170
just demonstrated here around our socket

585
00:21:40,170 --> 00:21:42,090
so now I've got this our socket service

586
00:21:42,090 --> 00:21:43,500
whoops OH

587
00:21:43,500 --> 00:21:46,110
70 70 I've got this our socket service

588
00:21:46,110 --> 00:21:47,790
up and running and I've got my regular

589
00:21:47,790 --> 00:21:49,620
HTTP service let's go ahead and build a

590
00:21:49,620 --> 00:21:53,190
client to consume all that ok we'll go

591
00:21:53,190 --> 00:21:56,400
back to the initializer here ok and

592
00:21:56,400 --> 00:21:58,140
we're gonna rebuild and build a new

593
00:21:58,140 --> 00:22:00,360
thing here called a client okay and

594
00:22:00,360 --> 00:22:01,320
we're gonna add a few different

595
00:22:01,320 --> 00:22:03,480
dependencies that we want so we want the

596
00:22:03,480 --> 00:22:07,080
reactive web support we want the

597
00:22:07,080 --> 00:22:10,940
for j4j bits we want that we want the

598
00:22:10,940 --> 00:22:14,580
Lombok we want our Sukkot

599
00:22:14,580 --> 00:22:16,470
certainly okay so we got reactive web

600
00:22:16,470 --> 00:22:19,260
resilience 4j Lombok and our Sukkot

601
00:22:19,260 --> 00:22:21,240
seems good enough for me we got 2.3 L M

602
00:22:21,240 --> 00:22:23,730
for the only mistake I made was I didn't

603
00:22:23,730 --> 00:22:25,440
choose double n that's an easy enough

604
00:22:25,440 --> 00:22:29,640
fix all we gotta do is actually I think

605
00:22:29,640 --> 00:22:30,899
I'll just delete it and try again

606
00:22:30,899 --> 00:22:32,070
because I don't wanna have to do the

607
00:22:32,070 --> 00:22:33,720
move and dance once we get up and

608
00:22:33,720 --> 00:22:36,750
running so here we go Java 11 just for

609
00:22:36,750 --> 00:22:41,820
the wind Explorer generate good now

610
00:22:41,820 --> 00:22:43,260
here's my client when opened it up in

611
00:22:43,260 --> 00:22:45,179
the IDE as well this is gonna be any old

612
00:22:45,179 --> 00:22:46,350
client that would talk to in the old

613
00:22:46,350 --> 00:22:47,250
service and this is really the

614
00:22:47,250 --> 00:22:49,500
wheelhouse for reactive programming okay

615
00:22:49,500 --> 00:22:51,179
I'm gonna tell intelligent to not show

616
00:22:51,179 --> 00:22:53,010
this again could've sworn I just did

617
00:22:53,010 --> 00:22:56,519
that isn't that funny deja vu so I'm I'm

618
00:22:56,519 --> 00:22:57,990
gonna hit client application and this

619
00:22:57,990 --> 00:22:59,159
applications gonna be a thing that

620
00:22:59,159 --> 00:23:01,289
consumes the other other service and

621
00:23:01,289 --> 00:23:02,669
there's a lot of patterns here right so

622
00:23:02,669 --> 00:23:04,019
I'm gonna start up the application on

623
00:23:04,019 --> 00:23:08,250
the on a random port so be a 1990 okay

624
00:23:08,250 --> 00:23:11,370
that'll be a HTTP endpoint actually you

625
00:23:11,370 --> 00:23:13,200
know what better yet we can tell not to

626
00:23:13,200 --> 00:23:15,809
create a web application at all so

627
00:23:15,809 --> 00:23:22,710
application type where application type

628
00:23:22,710 --> 00:23:25,620
equals none okay so I have a reactive

629
00:23:25,620 --> 00:23:28,350
application and we've got web flex we've

630
00:23:28,350 --> 00:23:30,090
got our socket I don't know if we're

631
00:23:30,090 --> 00:23:31,350
gonna need this that's just nice to have

632
00:23:31,350 --> 00:23:33,000
any class but just a case that's a

633
00:23:33,000 --> 00:23:35,460
circuit breaker okay so now what we'll

634
00:23:35,460 --> 00:23:37,380
do is want to call that downstream

635
00:23:37,380 --> 00:23:38,820
service and there's a you know a few

636
00:23:38,820 --> 00:23:40,230
different ways to do this one is we

637
00:23:40,230 --> 00:23:42,929
create a HTTP call right and a reactive

638
00:23:42,929 --> 00:23:44,880
web a client call so this would be our

639
00:23:44,880 --> 00:23:47,639
HTTP client in order to build this we

640
00:23:47,639 --> 00:23:49,799
just return a web client we just inject

641
00:23:49,799 --> 00:23:53,940
the web client builder like so and we

642
00:23:53,940 --> 00:23:57,360
say build your dot build good or in

643
00:23:57,360 --> 00:23:59,010
order to talk to our socket code we need

644
00:23:59,010 --> 00:24:01,500
to have an our socket requester okay so

645
00:24:01,500 --> 00:24:05,940
we say our socket or socket to me baby

646
00:24:05,940 --> 00:24:10,769
okay and builder and return builder dot

647
00:24:10,769 --> 00:24:12,450
and here the protocol is actually

648
00:24:12,450 --> 00:24:15,120
stateful so a lot of times they use HTTP

649
00:24:15,120 --> 00:24:16,950
the protocol disconnects on each call

650
00:24:16,950 --> 00:24:18,990
but here our socket maintains a

651
00:24:18,990 --> 00:24:19,950
connection through the life of the

652
00:24:19,950 --> 00:24:20,880
application

653
00:24:20,880 --> 00:24:22,110
of course you can you might have to

654
00:24:22,110 --> 00:24:23,330
reconnect and all that stuff and that's

655
00:24:23,330 --> 00:24:25,560
doable but basically you build you

656
00:24:25,560 --> 00:24:27,270
connect once and then you can make calls

657
00:24:27,270 --> 00:24:28,590
much more efficiently than what if you

658
00:24:28,590 --> 00:24:30,060
were not using something like our socket

659
00:24:30,060 --> 00:24:32,130
so now I've gotten HDD client and an

660
00:24:32,130 --> 00:24:34,380
HTTP service let's build an HTTP client

661
00:24:34,380 --> 00:24:35,910
that uses that so I'm gonna build a

662
00:24:35,910 --> 00:24:39,540
thing that injects the HTTP client so it

663
00:24:39,540 --> 00:24:41,850
should be client web client here we go

664
00:24:41,850 --> 00:24:45,240
and it'll be a beam that'll just be

665
00:24:45,240 --> 00:24:46,500
invoked when the application starts up

666
00:24:46,500 --> 00:24:49,350
it's an application vendor and here all

667
00:24:49,350 --> 00:24:51,090
I'm gonna do is I'm gonna I'm gonna

668
00:24:51,090 --> 00:24:53,730
write code that makes that Network call

669
00:24:53,730 --> 00:24:55,800
using HTTP so I can do this very easily

670
00:24:55,800 --> 00:24:58,110
I can say it's to be to get that URI

671
00:24:58,110 --> 00:25:02,190
HTTP localhost 8080 forward slash

672
00:25:02,190 --> 00:25:04,260
reservations and the data that comes

673
00:25:04,260 --> 00:25:05,820
back I'm gonna retrieve it and turn it

674
00:25:05,820 --> 00:25:09,270
into the Java reservation DTO so I've

675
00:25:09,270 --> 00:25:10,890
got that on the server side I'm gonna do

676
00:25:10,890 --> 00:25:12,720
something terrible here again something

677
00:25:12,720 --> 00:25:14,550
you should never ever do I'm gonna copy

678
00:25:14,550 --> 00:25:17,340
and paste code so here we go there's

679
00:25:17,340 --> 00:25:20,340
this and I'm going to take my

680
00:25:20,340 --> 00:25:24,660
reservation as well paste that here and

681
00:25:24,660 --> 00:25:25,880
get rid of the ID

682
00:25:25,880 --> 00:25:28,320
goodness so now we've got our

683
00:25:28,320 --> 00:25:30,630
reservation detail we can now bind the

684
00:25:30,630 --> 00:25:32,190
resulting JSON from that HTTP endpoint

685
00:25:32,190 --> 00:25:34,710
to reservation object and I'm gonna

686
00:25:34,710 --> 00:25:36,120
create a I'm just gonna stream through

687
00:25:36,120 --> 00:25:37,350
all the reservations so I can say

688
00:25:37,350 --> 00:25:40,110
reservation dot flux or subscribe and I

689
00:25:40,110 --> 00:25:42,180
want to subscribe and print out the

690
00:25:42,180 --> 00:25:43,860
results I'll use a logger here I'm check

691
00:25:43,860 --> 00:25:48,000
that through Lombok I don't say log info

692
00:25:48,000 --> 00:25:50,460
ok now as I make this network call keep

693
00:25:50,460 --> 00:25:51,750
in mind what's happening I'm making a

694
00:25:51,750 --> 00:25:53,190
network call to the service even

695
00:25:53,190 --> 00:25:54,750
ignoring the hard-coded user name and

696
00:25:54,750 --> 00:25:56,310
pass our host and port here which is

697
00:25:56,310 --> 00:25:57,960
almost a bad even ignoring the

698
00:25:57,960 --> 00:25:59,580
hard-coded host important here I should

699
00:25:59,580 --> 00:26:00,840
be using something like a client-side

700
00:26:00,840 --> 00:26:03,000
load balancer so they can reference I

701
00:26:03,000 --> 00:26:05,310
can look up services instance service

702
00:26:05,310 --> 00:26:06,540
instances through the service registry

703
00:26:06,540 --> 00:26:08,670
or I should and in the worst case at

704
00:26:08,670 --> 00:26:10,500
least use DNS but for now I've got a

705
00:26:10,500 --> 00:26:11,700
hard-coded host in port

706
00:26:11,700 --> 00:26:12,990
you've been ignoring that assuming I was

707
00:26:12,990 --> 00:26:15,450
doing something correct can I assume the

708
00:26:15,450 --> 00:26:16,590
best service is always gonna be

709
00:26:16,590 --> 00:26:17,910
available that it'll always produce a

710
00:26:17,910 --> 00:26:20,100
response well certainly not right so I

711
00:26:20,100 --> 00:26:21,540
want to take advantage of some of the

712
00:26:21,540 --> 00:26:23,520
inbuilt operators that we have here to

713
00:26:23,520 --> 00:26:26,010
make our code a little bit more robust

714
00:26:26,010 --> 00:26:29,220
so if there's an error ok I want to I

715
00:26:29,220 --> 00:26:30,960
want to default to a value so I can say

716
00:26:30,960 --> 00:26:33,590
ok on arrow resume provide a

717
00:26:33,590 --> 00:26:34,850
fall back and actual what I want to do

718
00:26:34,850 --> 00:26:36,950
zone get the names so I'm gonna map each

719
00:26:36,950 --> 00:26:40,309
reservation to its name that's a you

720
00:26:40,309 --> 00:26:41,570
know I'm doing some sort of very

721
00:26:41,570 --> 00:26:44,480
scenario LM mapping over the results

722
00:26:44,480 --> 00:26:46,340
there okay so now I'm gonna say for each

723
00:26:46,340 --> 00:26:48,110
one that comes back if it doesn't

724
00:26:48,110 --> 00:26:49,340
produce a responsive if there's an

725
00:26:49,340 --> 00:26:51,830
exception just return eeeek okay now

726
00:26:51,830 --> 00:26:55,669
what about this is you're wearing what

727
00:26:55,669 --> 00:26:56,230
is it

728
00:26:56,230 --> 00:27:00,350
twenty minutes yeah two minute oh okay

729
00:27:00,350 --> 00:27:02,210
well if I want to get a retry I can

730
00:27:02,210 --> 00:27:05,510
retry therefore one I can also do what

731
00:27:05,510 --> 00:27:06,919
else can I do I can do timeouts as well

732
00:27:06,919 --> 00:27:08,240
so a lot of options that are there built

733
00:27:08,240 --> 00:27:12,919
in there so iteration dot of seconds etc

734
00:27:12,919 --> 00:27:14,750
right I can timeout one second so a lot

735
00:27:14,750 --> 00:27:15,860
of options there I encourage you to look

736
00:27:15,860 --> 00:27:18,320
at that what about our our socket client

737
00:27:18,320 --> 00:27:23,149
okay our socket requester our client our

738
00:27:23,149 --> 00:27:26,029
socket client application runner our

739
00:27:26,029 --> 00:27:29,720
socket client and here I'm gonna use the

740
00:27:29,720 --> 00:27:30,980
our socket request that we just built

741
00:27:30,980 --> 00:27:34,429
return args okay

742
00:27:34,429 --> 00:27:38,330
and I'll say our socket requester our

743
00:27:38,330 --> 00:27:41,960
socket requests are dots route the route

744
00:27:41,960 --> 00:27:43,760
is the greetings endpoint they're the

745
00:27:43,760 --> 00:27:44,899
data that I'm going to send in there's a

746
00:27:44,899 --> 00:27:51,679
new greetings request okay all the talks

747
00:27:51,679 --> 00:27:54,020
and they dinner that I'm gonna get back

748
00:27:54,020 --> 00:27:57,470
is a greetings response I'm just gonna

749
00:27:57,470 --> 00:27:58,970
visit each one of those as well so I'll

750
00:27:58,970 --> 00:28:01,880
say I subscribe log info so now let's

751
00:28:01,880 --> 00:28:03,860
just format the code and run the

752
00:28:03,860 --> 00:28:07,279
application fingers and eyes crossed you

753
00:28:07,279 --> 00:28:08,330
can see that it's very easy to make

754
00:28:08,330 --> 00:28:09,529
these Network calls assuming I typed

755
00:28:09,529 --> 00:28:11,210
everything correctly which statistically

756
00:28:11,210 --> 00:28:20,570
not likely okay so this service didn't

757
00:28:20,570 --> 00:28:22,960
produce the right HTTP response but the

758
00:28:22,960 --> 00:28:25,220
the greetings response started to

759
00:28:25,220 --> 00:28:26,750
produce the responses but then of course

760
00:28:26,750 --> 00:28:28,700
the HTTP server shutdown I should have

761
00:28:28,700 --> 00:28:29,870
done something to keep the thread alive

762
00:28:29,870 --> 00:28:33,590
like system heed that in that read but

763
00:28:33,590 --> 00:28:35,179
either way you can see what I'm trying

764
00:28:35,179 --> 00:28:36,470
to show you so my friends reactive

765
00:28:36,470 --> 00:28:37,700
programming gives you a way to do not

766
00:28:37,700 --> 00:28:39,260
just what you can do before and with

767
00:28:39,260 --> 00:28:40,520
more ease because now everything is the

768
00:28:40,520 --> 00:28:41,780
same kind of datatype it's all

769
00:28:41,780 --> 00:28:43,760
publishers all the way down but it also

770
00:28:43,760 --> 00:28:44,750
gives you the ability to do more

771
00:28:44,750 --> 00:28:47,000
interesting things like really really

772
00:28:47,000 --> 00:28:47,610
easy

773
00:28:47,610 --> 00:28:49,050
composition there you go I just did it

774
00:28:49,050 --> 00:28:51,120
with the system that in and you can see

775
00:28:51,120 --> 00:28:52,650
it was able to get the HTTP response and

776
00:28:52,650 --> 00:28:54,510
they never ending reactive stream of our

777
00:28:54,510 --> 00:28:56,400
socket requests and responses I want to

778
00:28:56,400 --> 00:28:58,080
thank all of you for joining me today I

779
00:28:58,080 --> 00:29:00,090
want you to stay home stay safe you know

780
00:29:00,090 --> 00:29:01,710
flatten the curve thank you so much for

781
00:29:01,710 --> 00:29:03,630
time thank you all the talks for having

782
00:29:03,630 --> 00:29:08,510
me I appreciate it thanks Josh thanks

