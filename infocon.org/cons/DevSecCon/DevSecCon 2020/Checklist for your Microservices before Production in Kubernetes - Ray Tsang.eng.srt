1
00:00:00,979 --> 00:00:04,350
okay cool well thank you so much for

2
00:00:04,350 --> 00:00:07,049
having me here and thanks to all the

3
00:00:07,049 --> 00:00:09,330
organizers for organizing this and also

4
00:00:09,330 --> 00:00:12,809
the attendees so my name is Ray I'm a

5
00:00:12,809 --> 00:00:14,190
developer advocate for Google cloud

6
00:00:14,190 --> 00:00:16,830
platform and I love Java and Java

7
00:00:16,830 --> 00:00:19,949
campaign as well but I also like a lot

8
00:00:19,949 --> 00:00:22,199
of the architecture and also deployment

9
00:00:22,199 --> 00:00:25,050
in production systems and so I am also

10
00:00:25,050 --> 00:00:26,849
very involved with the communities

11
00:00:26,849 --> 00:00:28,650
ecosystem as well if you have any

12
00:00:28,650 --> 00:00:30,300
questions about this session please pay

13
00:00:30,300 --> 00:00:32,488
me on twitter which is at saben is it

14
00:00:32,488 --> 00:00:35,250
okay since we only have about 30 minutes

15
00:00:35,250 --> 00:00:37,710
I'm gonna move really quickly quickly in

16
00:00:37,710 --> 00:00:39,059
the end of last year some more

17
00:00:39,059 --> 00:00:41,879
information on other links too but you

18
00:00:41,879 --> 00:00:43,530
know this photo though is very special

19
00:00:43,530 --> 00:00:45,960
for me so a second technology I love I

20
00:00:45,960 --> 00:00:46,649
love to travel

21
00:00:46,649 --> 00:00:48,930
given the current situation I cannot go

22
00:00:48,930 --> 00:00:51,090
anywhere so you know I do miss the

23
00:00:51,090 --> 00:00:53,820
traveling but well I'm traveling I also

24
00:00:53,820 --> 00:00:55,590
take a lot of photos and this photo is

25
00:00:55,590 --> 00:00:57,920
very special to me I was a fat Packer

26
00:00:57,920 --> 00:00:59,910
many many years ago I was backpacking

27
00:00:59,910 --> 00:01:02,579
for about four months and came across

28
00:01:02,579 --> 00:01:05,010
the city in China where if you don't

29
00:01:05,010 --> 00:01:07,140
really have cheap places for backpackers

30
00:01:07,140 --> 00:01:09,390
to stay they only had expensive hotels

31
00:01:09,390 --> 00:01:11,760
and so as a backpacker had to ask around

32
00:01:11,760 --> 00:01:14,130
like what do I do in this case and two

33
00:01:14,130 --> 00:01:15,810
people two different people told me

34
00:01:15,810 --> 00:01:18,689
independently that if you take a bus out

35
00:01:18,689 --> 00:01:21,150
somewhere like a few hours out and then

36
00:01:21,150 --> 00:01:23,130
transfer to a car that they will take

37
00:01:23,130 --> 00:01:25,110
you to an entrance of a desert and be

38
00:01:25,110 --> 00:01:27,240
walking the desert for four hours in

39
00:01:27,240 --> 00:01:29,790
southwest direction then you're going to

40
00:01:29,790 --> 00:01:31,829
find these oases and then you can stay

41
00:01:31,829 --> 00:01:34,530
there for free and I heard the word free

42
00:01:34,530 --> 00:01:37,320
in asked which bus do I take okay as a

43
00:01:37,320 --> 00:01:39,540
backpacker danger was not in my mind

44
00:01:39,540 --> 00:01:41,970
it's just about free okay so I don't

45
00:01:41,970 --> 00:01:43,290
know if anyone here hiking does it

46
00:01:43,290 --> 00:01:45,030
before but this is why it feels like the

47
00:01:45,030 --> 00:01:47,490
sand is really really soft and when

48
00:01:47,490 --> 00:01:49,770
somebody tells you that go Southwest for

49
00:01:49,770 --> 00:01:51,899
four hours in the desert that you can

50
00:01:51,899 --> 00:01:53,430
see that we have all these sand dunes it

51
00:01:53,430 --> 00:01:54,509
doesn't matter what's in front of you

52
00:01:54,509 --> 00:01:57,180
you go in that one direction okay and so

53
00:01:57,180 --> 00:01:58,680
you're going up and down up and down and

54
00:01:58,680 --> 00:02:00,030
you're going to pull your legs out from

55
00:02:00,030 --> 00:02:02,070
the sand and take the next step up and

56
00:02:02,070 --> 00:02:03,479
down these sand dunes with a heavy pack

57
00:02:03,479 --> 00:02:06,240
with water in what stretchers it was

58
00:02:06,240 --> 00:02:08,280
hard it was difficult they reminded me

59
00:02:08,280 --> 00:02:11,068
of work as a Java developer writing j2ee

60
00:02:11,068 --> 00:02:13,200
application and here I thought I was on

61
00:02:13,200 --> 00:02:13,860
vacation

62
00:02:13,860 --> 00:02:16,110
however the in was absolutely beautiful

63
00:02:16,110 --> 00:02:18,810
this is the actual photo from the Aces

64
00:02:18,810 --> 00:02:21,180
obviously I survived so I found always

65
00:02:21,180 --> 00:02:23,730
this and it's beautiful and I said

66
00:02:23,730 --> 00:02:25,680
engineer this is what I'd like to get to

67
00:02:25,680 --> 00:02:28,290
for my applications as well I want to

68
00:02:28,290 --> 00:02:31,410
get my application to production and the

69
00:02:31,410 --> 00:02:33,180
road to production is not always easy

70
00:02:33,180 --> 00:02:35,340
sometimes we meet these obstacles and

71
00:02:35,340 --> 00:02:37,380
that we have to solve them along the way

72
00:02:37,380 --> 00:02:40,380
and I see my job as you know hopefully

73
00:02:40,380 --> 00:02:42,270
being able to help you you know through

74
00:02:42,270 --> 00:02:44,070
this journey so that you don't have a

75
00:02:44,070 --> 00:02:47,310
bad time okay so as easy as possible and

76
00:02:47,310 --> 00:02:48,780
that's I'm going to show you today just

77
00:02:48,780 --> 00:02:51,060
a few things I learned as I helped an

78
00:02:51,060 --> 00:02:52,620
internal project to go into production

79
00:02:52,620 --> 00:02:54,780
and there are many many things that we

80
00:02:54,780 --> 00:02:56,760
need to check against to make sure that

81
00:02:56,760 --> 00:02:59,340
we are ready for production system okay

82
00:02:59,340 --> 00:03:01,650
and the first thing is that local

83
00:03:01,650 --> 00:03:03,330
development is not production okay so

84
00:03:03,330 --> 00:03:04,770
what I'm going to talk about today is

85
00:03:04,770 --> 00:03:07,500
what developers can do on the local

86
00:03:07,500 --> 00:03:09,840
development side for my application so

87
00:03:09,840 --> 00:03:11,160
that my application is ready for

88
00:03:11,160 --> 00:03:13,200
production however it will be almost

89
00:03:13,200 --> 00:03:14,880
impossible to bring that production

90
00:03:14,880 --> 00:03:16,730
environment down to my local environment

91
00:03:16,730 --> 00:03:19,019
because production is just so hard

92
00:03:19,019 --> 00:03:20,790
there's so many more things to consider

93
00:03:20,790 --> 00:03:23,130
so many more things to run and if you

94
00:03:23,130 --> 00:03:24,540
make your local development production

95
00:03:24,540 --> 00:03:26,610
you might as well just develop against

96
00:03:26,610 --> 00:03:28,890
production anyways right but in local

97
00:03:28,890 --> 00:03:31,739
development what I want to focus on is

98
00:03:31,739 --> 00:03:33,840
just the developer productivity and what

99
00:03:33,840 --> 00:03:35,640
engineers should be focusing on is the

100
00:03:35,640 --> 00:03:39,480
design of your application and we need

101
00:03:39,480 --> 00:03:41,040
to start off by just understanding that

102
00:03:41,040 --> 00:03:43,110
you know on the left hand side this

103
00:03:43,110 --> 00:03:44,910
development on the right hand side is

104
00:03:44,910 --> 00:03:46,350
the full production environment and

105
00:03:46,350 --> 00:03:47,970
there are so many things that's

106
00:03:47,970 --> 00:03:50,040
different so how can we actually bridge

107
00:03:50,040 --> 00:03:52,200
these two gap well we need to understand

108
00:03:52,200 --> 00:03:53,459
the contracts between your application

109
00:03:53,459 --> 00:03:56,370
in the tool the order platform that's

110
00:03:56,370 --> 00:03:58,290
orchestrating your application ok and

111
00:03:58,290 --> 00:04:00,390
once we understand these contracts we

112
00:04:00,390 --> 00:04:01,800
can go back and make sure that we

113
00:04:01,800 --> 00:04:04,050
conform to these contracts in now we

114
00:04:04,050 --> 00:04:06,510
will have a much easier time when we go

115
00:04:06,510 --> 00:04:08,100
into a production environment that has a

116
00:04:08,100 --> 00:04:10,200
lot more you know considerations that's

117
00:04:10,200 --> 00:04:11,790
being built in but as long as you're

118
00:04:11,790 --> 00:04:13,650
here to these contracts you're going to

119
00:04:13,650 --> 00:04:15,690
have an easier time as you move upwards

120
00:04:15,690 --> 00:04:17,579
to your environment and this has to do

121
00:04:17,579 --> 00:04:19,440
with application lifecycle configuration

122
00:04:19,440 --> 00:04:22,320
metrics log collection and how your

123
00:04:22,320 --> 00:04:24,300
container image is constructed so I'm

124
00:04:24,300 --> 00:04:25,590
going through some of these in more

125
00:04:25,590 --> 00:04:27,480
detail but first remember

126
00:04:27,480 --> 00:04:29,850
this all starts from your application it

127
00:04:29,850 --> 00:04:31,680
has nothing to do with kubernetes in

128
00:04:31,680 --> 00:04:34,110
fact if you recall you know years ago

129
00:04:34,110 --> 00:04:36,390
five years ten years ago we didn't have

130
00:04:36,390 --> 00:04:38,400
communities but your application still

131
00:04:38,400 --> 00:04:40,110
run somewhere and you still have to

132
00:04:40,110 --> 00:04:42,570
follow these design principles tomorrow

133
00:04:42,570 --> 00:04:45,000
there may or may not be kubernetes in

134
00:04:45,000 --> 00:04:46,680
which case you still have to make sure

135
00:04:46,680 --> 00:04:48,030
your application is properly designed

136
00:04:48,030 --> 00:04:50,820
and one of the most known patterns right

137
00:04:50,820 --> 00:04:52,380
now and most popular is thrill factor

138
00:04:52,380 --> 00:04:54,630
app still constantly surprised by how

139
00:04:54,630 --> 00:04:56,070
many people who haven't heard about this

140
00:04:56,070 --> 00:04:58,440
I hope everyone now understands this and

141
00:04:58,440 --> 00:04:59,310
have heard about it

142
00:04:59,310 --> 00:05:01,350
income factor apps there are actually 12

143
00:05:01,350 --> 00:05:02,880
different things that you should look

144
00:05:02,880 --> 00:05:04,920
for and implement a design for your

145
00:05:04,920 --> 00:05:08,190
application and everyone here even if

146
00:05:08,190 --> 00:05:09,810
you'd never heard about it you should at

147
00:05:09,810 --> 00:05:12,000
least have one factor because the first

148
00:05:12,000 --> 00:05:15,210
factor is checking your code it is 20/20

149
00:05:15,210 --> 00:05:17,520
everyone should be checking in our code

150
00:05:17,520 --> 00:05:20,070
and this is just one of the factors but

151
00:05:20,070 --> 00:05:21,720
there's but everyone should have no

152
00:05:21,720 --> 00:05:24,480
excuse not checking your code but many

153
00:05:24,480 --> 00:05:26,460
of these factors really really also help

154
00:05:26,460 --> 00:05:28,470
with being able to the point the

155
00:05:28,470 --> 00:05:30,690
application into communities to write

156
00:05:30,690 --> 00:05:32,580
this is completely just about your app

157
00:05:32,580 --> 00:05:34,350
but it just so happened it's also very

158
00:05:34,350 --> 00:05:36,510
useful for communities deployment so for

159
00:05:36,510 --> 00:05:38,460
example being able to externalize your

160
00:05:38,460 --> 00:05:41,070
configuration so you don't baking the

161
00:05:41,070 --> 00:05:43,200
config or any of the secrets into your

162
00:05:43,200 --> 00:05:45,420
app into a container image that is super

163
00:05:45,420 --> 00:05:47,670
super important without you are able to

164
00:05:47,670 --> 00:05:50,070
scale out your process we are the

165
00:05:50,070 --> 00:05:52,080
process model and now your processes are

166
00:05:52,080 --> 00:05:53,580
stateless right all these are just

167
00:05:53,580 --> 00:05:55,620
basically some principles that happens

168
00:05:55,620 --> 00:05:58,350
to be really really useful so number one

169
00:05:58,350 --> 00:06:00,930
so make sure you follow and study some

170
00:06:00,930 --> 00:06:03,030
of these factors and implement as much

171
00:06:03,030 --> 00:06:05,970
as you can the second of this is that

172
00:06:05,970 --> 00:06:07,440
again this is all by your application

173
00:06:07,440 --> 00:06:09,090
you should be able to test your

174
00:06:09,090 --> 00:06:10,620
application locally okay

175
00:06:10,620 --> 00:06:12,450
now what I mean by that is that you

176
00:06:12,450 --> 00:06:14,820
should not depend on allows the external

177
00:06:14,820 --> 00:06:17,400
stuff in order to run your test even if

178
00:06:17,400 --> 00:06:18,720
you are developing against kubernetes

179
00:06:18,720 --> 00:06:20,430
you should still be able to test your

180
00:06:20,430 --> 00:06:22,760
application repeatedly and consistently

181
00:06:22,760 --> 00:06:25,050
even just from your local environment

182
00:06:25,050 --> 00:06:27,990
and um but you might be asking well wait

183
00:06:27,990 --> 00:06:29,280
a second but sometimes I depend on

184
00:06:29,280 --> 00:06:30,870
another service sometime that depends on

185
00:06:30,870 --> 00:06:33,480
you know another database where I do

186
00:06:33,480 --> 00:06:36,150
need to test against a real database how

187
00:06:36,150 --> 00:06:38,310
do I bring those things up well first of

188
00:06:38,310 --> 00:06:39,810
all for services usually actually have

189
00:06:39,810 --> 00:06:41,460
mocks right so make sure you

190
00:06:41,460 --> 00:06:43,110
top marks services they can't just bring

191
00:06:43,110 --> 00:06:44,850
into an application so we can do that

192
00:06:44,850 --> 00:06:47,400
mock tests if you do need to use any

193
00:06:47,400 --> 00:06:51,060
external components like for example

194
00:06:51,060 --> 00:06:52,289
your reasoning post-crisis equip it

195
00:06:52,289 --> 00:06:53,789
database were you using my super

196
00:06:53,789 --> 00:06:55,440
database you want to test against those

197
00:06:55,440 --> 00:06:57,509
databases then another tool that's

198
00:06:57,509 --> 00:06:59,039
really really powerful especially for

199
00:06:59,039 --> 00:07:00,810
java application is called test

200
00:07:00,810 --> 00:07:02,789
containers and test containers can work

201
00:07:02,789 --> 00:07:05,039
also for other languages too but then

202
00:07:05,039 --> 00:07:06,180
let me just show you what this looks

203
00:07:06,180 --> 00:07:09,509
like in a typical Java based unit

204
00:07:09,509 --> 00:07:12,330
testing okay so in my unit test here I'm

205
00:07:12,330 --> 00:07:14,130
going to test against a repository that

206
00:07:14,130 --> 00:07:17,009
has crud operations to my database but

207
00:07:17,009 --> 00:07:19,229
rather than connecting to our shared

208
00:07:19,229 --> 00:07:22,440
death database or a you know a QA

209
00:07:22,440 --> 00:07:24,539
database what I'm going to do is to use

210
00:07:24,539 --> 00:07:27,240
test containers to in familiarly spin up

211
00:07:27,240 --> 00:07:30,900
a container that has my mock data with

212
00:07:30,900 --> 00:07:33,060
my username password that's completely

213
00:07:33,060 --> 00:07:35,909
used for testing I can even use any post

214
00:07:35,909 --> 00:07:37,710
quest images here that you might

215
00:07:37,710 --> 00:07:39,210
actually want to use in your production

216
00:07:39,210 --> 00:07:40,979
environment of course this is not a

217
00:07:40,979 --> 00:07:42,810
production database but it's pretty

218
00:07:42,810 --> 00:07:45,000
close in terms of version right and now

219
00:07:45,000 --> 00:07:46,650
you can simulate a lot of the things and

220
00:07:46,650 --> 00:07:49,139
then you can use this container metadata

221
00:07:49,139 --> 00:07:51,389
to configure your own application to

222
00:07:51,389 --> 00:07:53,789
connect to it and so if I were to run

223
00:07:53,789 --> 00:07:55,740
this unit test right now everything is

224
00:07:55,740 --> 00:07:57,900
self-contained it does use docker behind

225
00:07:57,900 --> 00:07:59,729
the scenes but as I'll run this unit

226
00:07:59,729 --> 00:08:02,009
test weather unit I starts is going to

227
00:08:02,009 --> 00:08:03,930
start up the container for me bootstrap

228
00:08:03,930 --> 00:08:05,789
my post quest database for example you

229
00:08:05,789 --> 00:08:07,349
can start off other containers too and

230
00:08:07,349 --> 00:08:09,389
then make sure my applications connect

231
00:08:09,389 --> 00:08:10,860
you to that database with the right

232
00:08:10,860 --> 00:08:12,750
credentials and now I can run my test

233
00:08:12,750 --> 00:08:15,360
and then I can do this repeatedly and

234
00:08:15,360 --> 00:08:17,849
consistently because I'm not depending

235
00:08:17,849 --> 00:08:19,500
on any external data that could be

236
00:08:19,500 --> 00:08:21,240
modified by somebody else so this is

237
00:08:21,240 --> 00:08:23,370
super important make sure you can run

238
00:08:23,370 --> 00:08:25,259
your tests locally and you can't do

239
00:08:25,259 --> 00:08:27,900
things reproducible ok and fix any flaky

240
00:08:27,900 --> 00:08:30,090
tests anything that's flaky that is not

241
00:08:30,090 --> 00:08:32,070
good this is just a basic design

242
00:08:32,070 --> 00:08:34,589
principles right however for the

243
00:08:34,589 --> 00:08:36,929
application life cycle within criminales

244
00:08:36,929 --> 00:08:38,219
this is something you thought you do

245
00:08:38,219 --> 00:08:39,958
need to think about so make sure that

246
00:08:39,958 --> 00:08:41,849
your application has the proper

247
00:08:41,849 --> 00:08:43,679
lifecycle hooks and there are a few

248
00:08:43,679 --> 00:08:46,350
things here a number one is how will

249
00:08:46,350 --> 00:08:48,510
criminales know that your applications

250
00:08:48,510 --> 00:08:50,339
is live and this is what we call the

251
00:08:50,339 --> 00:08:52,199
liveness probe it should be a simple

252
00:08:52,199 --> 00:08:53,820
probe that checks against your

253
00:08:53,820 --> 00:08:54,960
application that

254
00:08:54,960 --> 00:08:56,700
simply tells communities is your

255
00:08:56,700 --> 00:08:59,040
application life and if it's not a life

256
00:08:59,040 --> 00:09:00,120
is in trouble

257
00:09:00,120 --> 00:09:02,490
failed its liveness probe so that

258
00:09:02,490 --> 00:09:04,530
communities can automatically restart

259
00:09:04,530 --> 00:09:06,000
your application okay so this is a

260
00:09:06,000 --> 00:09:07,500
contract that you will have with

261
00:09:07,500 --> 00:09:09,900
kubernetes in the second part of it is

262
00:09:09,900 --> 00:09:12,510
the readiness probe the Rendon's probe

263
00:09:12,510 --> 00:09:13,830
is a little bit different from the

264
00:09:13,830 --> 00:09:16,170
liveness probe okay so if liveness Pro

265
00:09:16,170 --> 00:09:18,570
fails then communities will restore your

266
00:09:18,570 --> 00:09:20,460
application thinking that your

267
00:09:20,460 --> 00:09:22,290
application will automatically recover

268
00:09:22,290 --> 00:09:25,440
if we just simply restart it okay for

269
00:09:25,440 --> 00:09:27,300
the readiness probe this is the profile

270
00:09:27,300 --> 00:09:30,180
you will use if your application is

271
00:09:30,180 --> 00:09:32,040
ready to serve but you might be saying

272
00:09:32,040 --> 00:09:34,650
wait a second my application is alive so

273
00:09:34,650 --> 00:09:35,700
it's ready to serve

274
00:09:35,700 --> 00:09:38,940
right in some cases yes but many of the

275
00:09:38,940 --> 00:09:41,400
larger enterprise application that may

276
00:09:41,400 --> 00:09:43,590
not be the case why because your

277
00:09:43,590 --> 00:09:46,350
application could be alive but it needs

278
00:09:46,350 --> 00:09:48,330
to do some other initialization like

279
00:09:48,330 --> 00:09:50,400
preload some beta preload some stuff

280
00:09:50,400 --> 00:09:52,170
into the cache you know make sure all

281
00:09:52,170 --> 00:09:54,300
the connections are established right to

282
00:09:54,300 --> 00:09:56,460
gain to that ready state so that you are

283
00:09:56,460 --> 00:09:58,320
actually ready to serve the very first

284
00:09:58,320 --> 00:10:00,750
request if you don't have this then

285
00:10:00,750 --> 00:10:02,130
companies will send a request to your

286
00:10:02,130 --> 00:10:04,680
application and you might still be

287
00:10:04,680 --> 00:10:07,320
loading this cached data from the

288
00:10:07,320 --> 00:10:09,360
database so that your first requires

289
00:10:09,360 --> 00:10:11,460
will be really slow potentially right so

290
00:10:11,460 --> 00:10:13,830
you can use this kind of contract to

291
00:10:13,830 --> 00:10:15,630
tell communities when to start serving

292
00:10:15,630 --> 00:10:18,270
traffic as soon as you turn this on

293
00:10:18,270 --> 00:10:20,610
then kubernetes will then enlist your

294
00:10:20,610 --> 00:10:22,740
application instance into the load

295
00:10:22,740 --> 00:10:24,690
balancer and then sending the request

296
00:10:24,690 --> 00:10:27,000
over okay I'm gonna show a demo of this

297
00:10:27,000 --> 00:10:29,820
later as we go into communities itself

298
00:10:29,820 --> 00:10:30,930
but this is from your application

299
00:10:30,930 --> 00:10:33,660
perspective you need to have lightness

300
00:10:33,660 --> 00:10:35,670
probe and ready this probe that can't be

301
00:10:35,670 --> 00:10:38,700
configured later and then your

302
00:10:38,700 --> 00:10:40,710
application should also have some kind

303
00:10:40,710 --> 00:10:42,450
of contract in terms of how to shut down

304
00:10:42,450 --> 00:10:45,540
gracefully okay so for example if you're

305
00:10:45,540 --> 00:10:48,030
writing a unlined transactional

306
00:10:48,030 --> 00:10:49,590
application and you have all these

307
00:10:49,590 --> 00:10:51,300
in-flight transactions that's coming in

308
00:10:51,300 --> 00:10:53,490
and when could Nettie's want to shut you

309
00:10:53,490 --> 00:10:53,760
down

310
00:10:53,760 --> 00:10:56,070
because you're scaling in or that your

311
00:10:56,070 --> 00:10:57,540
application is having trouble is trying

312
00:10:57,540 --> 00:10:59,580
to restart you then it's going to send

313
00:10:59,580 --> 00:11:02,280
you a six-term signal and you should be

314
00:11:02,280 --> 00:11:04,290
able to respond to this signal and say

315
00:11:04,290 --> 00:11:06,390
hey kubernetes trying to shut me down

316
00:11:06,390 --> 00:11:08,620
and so let me go ahead and

317
00:11:08,620 --> 00:11:11,140
up what that means is that you need to

318
00:11:11,140 --> 00:11:13,360
finish all the invite transactions you

319
00:11:13,360 --> 00:11:14,890
need to have any of the background

320
00:11:14,890 --> 00:11:16,720
processes or thread pores to be shut

321
00:11:16,720 --> 00:11:18,370
down and make sure that all of those

322
00:11:18,370 --> 00:11:21,130
work is complete and potentially if you

323
00:11:21,130 --> 00:11:23,200
don't want to receive any new traffic

324
00:11:23,200 --> 00:11:25,120
you will then fill the rating this probe

325
00:11:25,120 --> 00:11:27,160
right so if you turn that off then

326
00:11:27,160 --> 00:11:28,540
kubernetes will then stop sending

327
00:11:28,540 --> 00:11:30,820
traffic to you but you do have all of

328
00:11:30,820 --> 00:11:33,100
these incoming connections that's really

329
00:11:33,100 --> 00:11:34,960
established so these are unified

330
00:11:34,960 --> 00:11:37,030
connections in flight transactions you

331
00:11:37,030 --> 00:11:38,920
need to make sure that you finish

332
00:11:38,920 --> 00:11:41,080
serving those requests as well and then

333
00:11:41,080 --> 00:11:43,120
you shut down gracefully when you're

334
00:11:43,120 --> 00:11:45,330
ready if you don't shut down gracefully

335
00:11:45,330 --> 00:11:47,560
there are some configurations that you

336
00:11:47,560 --> 00:11:50,260
can configure in companies that will

337
00:11:50,260 --> 00:11:51,700
then forcefully shut you down

338
00:11:51,700 --> 00:11:54,580
so in that case rather than sick turn 4

339
00:11:54,580 --> 00:11:55,960
you're going to get this is sick kill

340
00:11:55,960 --> 00:11:57,880
and that will just shut you structure

341
00:11:57,880 --> 00:11:59,500
your application down and this is

342
00:11:59,500 --> 00:12:00,820
configured through something called the

343
00:12:00,820 --> 00:12:04,150
graceful period right so by default the

344
00:12:04,150 --> 00:12:06,070
grace period is about 30 seconds if I

345
00:12:06,070 --> 00:12:07,450
could recall correctly so if your

346
00:12:07,450 --> 00:12:08,860
application doesn't shut down in 30

347
00:12:08,860 --> 00:12:11,380
seconds if you would just forcefully

348
00:12:11,380 --> 00:12:13,330
kill it and then you are at risk of

349
00:12:13,330 --> 00:12:14,800
potentially losing some in-flight

350
00:12:14,800 --> 00:12:17,050
transactions on the other hand you can

351
00:12:17,050 --> 00:12:20,200
also increase this graceful period to a

352
00:12:20,200 --> 00:12:22,660
number that is proper for your

353
00:12:22,660 --> 00:12:24,370
application so these are the things that

354
00:12:24,370 --> 00:12:26,770
you need to be checking against okay so

355
00:12:26,770 --> 00:12:29,860
life cycle the hook with the lightness

356
00:12:29,860 --> 00:12:32,020
probe and Ready's probe and being able

357
00:12:32,020 --> 00:12:34,680
to gracefully shutdown as well and

358
00:12:34,680 --> 00:12:37,390
receiving those singles another thing

359
00:12:37,390 --> 00:12:38,680
that you need to check is just don't

360
00:12:38,680 --> 00:12:40,900
write to the file system if you are

361
00:12:40,900 --> 00:12:42,940
writing an application that is mean to

362
00:12:42,940 --> 00:12:45,250
be in ephemeral like stateless and scale

363
00:12:45,250 --> 00:12:47,620
out and scale in automatically and those

364
00:12:47,620 --> 00:12:49,810
are running as a container definitely

365
00:12:49,810 --> 00:12:51,280
please do not write to the file system

366
00:12:51,280 --> 00:12:53,110
in most cases that's not necessary and

367
00:12:53,110 --> 00:12:55,090
the reason I bring this up is because

368
00:12:55,090 --> 00:12:57,070
many many of the more traditional

369
00:12:57,070 --> 00:12:59,650
applications we tend to write logs to

370
00:12:59,650 --> 00:13:01,690
the file system those are not the best

371
00:13:01,690 --> 00:13:03,460
practices in communities what you should

372
00:13:03,460 --> 00:13:05,110
be doing is to just string the logs to

373
00:13:05,110 --> 00:13:08,500
STD out and usually the communities

374
00:13:08,500 --> 00:13:10,330
installation like on Google Cloud

375
00:13:10,330 --> 00:13:12,550
we will ingest whatever that you send to

376
00:13:12,550 --> 00:13:14,650
STD out and we will send those things

377
00:13:14,650 --> 00:13:16,870
directly to a centralized logger so

378
00:13:16,870 --> 00:13:18,610
there's no need to write to the log file

379
00:13:18,610 --> 00:13:20,710
another problem is that in a traditional

380
00:13:20,710 --> 00:13:22,420
VM the law

381
00:13:22,420 --> 00:13:24,220
are automatically rotated what that

382
00:13:24,220 --> 00:13:26,260
means is that you may be writing the log

383
00:13:26,260 --> 00:13:29,320
file but then only to a certain amount

384
00:13:29,320 --> 00:13:31,540
certain sizes and then it gets garbage

385
00:13:31,540 --> 00:13:33,070
collected because there is log rotator

386
00:13:33,070 --> 00:13:35,680
behind the scenes in containers those

387
00:13:35,680 --> 00:13:37,960
rotate a seaman that may not exist and

388
00:13:37,960 --> 00:13:40,120
so your log file can accumulate and

389
00:13:40,120 --> 00:13:41,770
definitely do not write data either

390
00:13:41,770 --> 00:13:44,380
because your data is going to be straw

391
00:13:44,380 --> 00:13:46,180
in the container file system which are

392
00:13:46,180 --> 00:13:47,860
going to be ephemeral so the next time

393
00:13:47,860 --> 00:13:49,930
you start your container of the data be

394
00:13:49,930 --> 00:13:52,270
gone so just remember don't write to the

395
00:13:52,270 --> 00:13:54,130
file system the easiest way to make this

396
00:13:54,130 --> 00:13:56,260
check is to just make your file system

397
00:13:56,260 --> 00:13:58,870
read-only and once you do that you're

398
00:13:58,870 --> 00:14:00,700
going to see all these issue popping up

399
00:14:00,700 --> 00:14:02,470
and now you can get rid of those things

400
00:14:02,470 --> 00:14:04,110
that's right into the file system

401
00:14:04,110 --> 00:14:06,520
so just to recap some other

402
00:14:06,520 --> 00:14:08,380
consideration for the application to a

403
00:14:08,380 --> 00:14:11,820
factor app repeatable local tests

404
00:14:11,820 --> 00:14:13,780
respecting the application lifecycle

405
00:14:13,780 --> 00:14:16,390
hooks having the health checks and the

406
00:14:16,390 --> 00:14:17,890
course full shutdown now two other

407
00:14:17,890 --> 00:14:18,940
things that's really important

408
00:14:18,940 --> 00:14:20,770
externalize about configuration that is

409
00:14:20,770 --> 00:14:22,420
really just part of this fill factor app

410
00:14:22,420 --> 00:14:24,490
you do not want to store any credentials

411
00:14:24,490 --> 00:14:26,470
in your container image or inside of

412
00:14:26,470 --> 00:14:28,810
your application and the final piece of

413
00:14:28,810 --> 00:14:31,090
it is the matrix right how is your

414
00:14:31,090 --> 00:14:34,210
application going to relay the matrix

415
00:14:34,210 --> 00:14:36,910
information like QPS latency information

416
00:14:36,910 --> 00:14:39,550
or any of the other application specific

417
00:14:39,550 --> 00:14:43,090
SLO so you need to define our strategy

418
00:14:43,090 --> 00:14:46,540
somehow most of the people writing these

419
00:14:46,540 --> 00:14:49,720
applications in targeting criminals the

420
00:14:49,720 --> 00:14:51,130
metrics are usually collected by

421
00:14:51,130 --> 00:14:52,930
Prometheus so make sure that your

422
00:14:52,930 --> 00:14:55,150
application exposes the matrix be

423
00:14:55,150 --> 00:14:57,310
Epimetheus endpoint and if you're using

424
00:14:57,310 --> 00:14:59,350
Prometheus otherwise you know whatever

425
00:14:59,350 --> 00:15:02,080
matrix vendor that you use make sure

426
00:15:02,080 --> 00:15:04,470
that those things are in there too right

427
00:15:04,470 --> 00:15:07,450
now then once you have your application

428
00:15:07,450 --> 00:15:10,300
design properly respecting the contracts

429
00:15:10,300 --> 00:15:12,490
then we can move into containers now

430
00:15:12,490 --> 00:15:14,980
this is actually the most difficult part

431
00:15:14,980 --> 00:15:17,110
however this tune is your easier way to

432
00:15:17,110 --> 00:15:19,720
do it but this is what I usually see for

433
00:15:19,720 --> 00:15:21,790
example for a Java developer to build

434
00:15:21,790 --> 00:15:24,370
your docker file okay so they say from

435
00:15:24,370 --> 00:15:26,650
open JDK copy the source

436
00:15:26,650 --> 00:15:28,810
do the built-ins on docker for some

437
00:15:28,810 --> 00:15:31,690
reason and then copy the copy out the

438
00:15:31,690 --> 00:15:33,350
final boot or if

439
00:15:33,350 --> 00:15:35,600
which is in this case a jar file and

440
00:15:35,600 --> 00:15:38,780
then I have seen this in mini docker

441
00:15:38,780 --> 00:15:40,640
file they tried to copy in some

442
00:15:40,640 --> 00:15:43,070
credentials like a surface account or

443
00:15:43,070 --> 00:15:46,250
some token they need into this container

444
00:15:46,250 --> 00:15:48,770
image and then finally they run a Java -

445
00:15:48,770 --> 00:15:52,490
our app that you are right and they ship

446
00:15:52,490 --> 00:15:54,260
it to production and that is really

447
00:15:54,260 --> 00:15:56,780
really bad we really really need to have

448
00:15:56,780 --> 00:15:58,280
some more discipline in terms of

449
00:15:58,280 --> 00:15:59,840
understanding and writing these darker

450
00:15:59,840 --> 00:16:02,510
files and if possible don't write them

451
00:16:02,510 --> 00:16:04,310
at all ok so let's see what's wrong with

452
00:16:04,310 --> 00:16:06,440
this docker file or first of all on the

453
00:16:06,440 --> 00:16:09,080
top which the hip which JDK version am I

454
00:16:09,080 --> 00:16:11,660
going to be using without specifying it

455
00:16:11,660 --> 00:16:13,310
is going to use the latest version of

456
00:16:13,310 --> 00:16:15,830
the openjdk same thing for any other

457
00:16:15,830 --> 00:16:19,040
runtime like node or go or whatever and

458
00:16:19,040 --> 00:16:21,050
this is bad - because you always need to

459
00:16:21,050 --> 00:16:22,610
know what version of the runtime you are

460
00:16:22,610 --> 00:16:24,620
trying to use especially for open JDK

461
00:16:24,620 --> 00:16:27,260
for Java applications the wrong gtk

462
00:16:27,260 --> 00:16:29,570
versions may cause you a lot of pain

463
00:16:29,570 --> 00:16:32,000
because they are now continue aware they

464
00:16:32,000 --> 00:16:33,590
actually do not understand how much

465
00:16:33,590 --> 00:16:35,330
resource you can use in the container so

466
00:16:35,330 --> 00:16:37,070
you always want to know which version

467
00:16:37,070 --> 00:16:39,320
you're trying to use and try to use the

468
00:16:39,320 --> 00:16:41,630
newest one obviously and then it's the

469
00:16:41,630 --> 00:16:43,190
second part of it is out the source file

470
00:16:43,190 --> 00:16:44,810
ends up in a container I have seen this

471
00:16:44,810 --> 00:16:47,120
before if you anyone gets into your

472
00:16:47,120 --> 00:16:48,680
container for whatever reason however

473
00:16:48,680 --> 00:16:50,510
they get into it you're going to see

474
00:16:50,510 --> 00:16:52,520
your source code it's bad and then if

475
00:16:52,520 --> 00:16:54,710
you're building in this way then the

476
00:16:54,710 --> 00:16:56,330
package is anything that you download an

477
00:16:56,330 --> 00:16:58,040
intermediary when you're abusing this

478
00:16:58,040 --> 00:16:59,630
container we're also saying the

479
00:16:59,630 --> 00:17:03,380
container they can go away in um the jar

480
00:17:03,380 --> 00:17:05,420
file itself is really really big so it

481
00:17:05,420 --> 00:17:08,000
could be 80 100 megabytes large and this

482
00:17:08,000 --> 00:17:09,680
is not really optimized for container

483
00:17:09,680 --> 00:17:11,900
either and finally obviously these

484
00:17:11,900 --> 00:17:13,939
secrets or configuration they should all

485
00:17:13,939 --> 00:17:16,160
be externalized you do not want them to

486
00:17:16,160 --> 00:17:18,380
be in the container that you put into a

487
00:17:18,380 --> 00:17:20,930
container registry right and finally the

488
00:17:20,930 --> 00:17:23,810
most important part is who is the user

489
00:17:23,810 --> 00:17:26,449
running this overwhelmingly all of these

490
00:17:26,449 --> 00:17:27,829
space images are going to be running

491
00:17:27,829 --> 00:17:30,410
your application as root and in the

492
00:17:30,410 --> 00:17:32,900
production environment that's not the

493
00:17:32,900 --> 00:17:34,880
best idea even in containers you should

494
00:17:34,880 --> 00:17:36,230
do not want to run your application on

495
00:17:36,230 --> 00:17:37,970
its root and nobody really checks

496
00:17:37,970 --> 00:17:39,740
against these things so these are just a

497
00:17:39,740 --> 00:17:41,030
few things you really really need to

498
00:17:41,030 --> 00:17:43,390
check against right so here is a little

499
00:17:43,390 --> 00:17:45,950
optimized version of this it's not the

500
00:17:45,950 --> 00:17:46,590
the

501
00:17:46,590 --> 00:17:48,210
best version of it but still somewhat

502
00:17:48,210 --> 00:17:50,190
optimized so rather than you know

503
00:17:50,190 --> 00:17:53,250
building in the same continent image in

504
00:17:53,250 --> 00:17:55,020
this case we're using multistage build

505
00:17:55,020 --> 00:17:57,929
so that the beauty of the fact is in a

506
00:17:57,929 --> 00:18:00,210
separate container layer that will never

507
00:18:00,210 --> 00:18:01,799
show up in your production container

508
00:18:01,799 --> 00:18:02,460
okay

509
00:18:02,460 --> 00:18:04,710
in the second thing inside we specify

510
00:18:04,710 --> 00:18:06,900
the runtime environment with the tag so

511
00:18:06,900 --> 00:18:08,460
in this case I really really want to use

512
00:18:08,460 --> 00:18:12,059
Java 8 update to 42 that is continuing

513
00:18:12,059 --> 00:18:14,130
aware and I'm also picking and choosing

514
00:18:14,130 --> 00:18:16,470
whether I want to use a GRE which is the

515
00:18:16,470 --> 00:18:18,179
Java runtime environment or the GDK

516
00:18:18,179 --> 00:18:20,880
right if I run my application a java

517
00:18:20,880 --> 00:18:22,380
application I just need a runtime

518
00:18:22,380 --> 00:18:23,700
environment I don't need to do

519
00:18:23,700 --> 00:18:26,340
compilation so I don't need to JDK right

520
00:18:26,340 --> 00:18:27,809
and that's going to reduce the size of

521
00:18:27,809 --> 00:18:30,000
your container image and then don't run

522
00:18:30,000 --> 00:18:31,860
this size route so you specify the user

523
00:18:31,860 --> 00:18:34,649
right and then any optimized other

524
00:18:34,649 --> 00:18:36,929
things and this will get you to a much

525
00:18:36,929 --> 00:18:40,830
better place however a friend of mine

526
00:18:40,830 --> 00:18:43,980
Matt rainbow who works at octa it's a

527
00:18:43,980 --> 00:18:45,299
security company that writes

528
00:18:45,299 --> 00:18:48,120
authentication and SSL and he famously

529
00:18:48,120 --> 00:18:49,770
says friends don't let friends write

530
00:18:49,770 --> 00:18:53,070
authentication why because education is

531
00:18:53,070 --> 00:18:56,250
tedious it's repetitive and easy to get

532
00:18:56,250 --> 00:18:58,919
wrong I'm going to steal that and say

533
00:18:58,919 --> 00:19:00,390
friend a lot friends write docker files

534
00:19:00,390 --> 00:19:02,549
why because the doctor files are also

535
00:19:02,549 --> 00:19:04,770
very easy to make mistakes and it's also

536
00:19:04,770 --> 00:19:07,020
really easy to make wrong and also is

537
00:19:07,020 --> 00:19:09,510
really repetitive right so when possible

538
00:19:09,510 --> 00:19:12,570
use another tool that can automate these

539
00:19:12,570 --> 00:19:14,970
things and then automatically implement

540
00:19:14,970 --> 00:19:16,919
the best practices so there are two

541
00:19:16,919 --> 00:19:19,230
projects out there like jib now you can

542
00:19:19,230 --> 00:19:21,330
use with Java or you can use something

543
00:19:21,330 --> 00:19:23,580
like a cloud native view pack in both

544
00:19:23,580 --> 00:19:24,990
cases they are going to be able to

545
00:19:24,990 --> 00:19:27,059
analyze your application and then feed

546
00:19:27,059 --> 00:19:29,010
you through their own pipeline which is

547
00:19:29,010 --> 00:19:30,809
already codified with the best practices

548
00:19:30,809 --> 00:19:33,240
and it will automatically analyze your

549
00:19:33,240 --> 00:19:36,029
application and out comes the container

550
00:19:36,029 --> 00:19:38,130
so you can build your application

551
00:19:38,130 --> 00:19:41,070
containers without any docker file at

552
00:19:41,070 --> 00:19:43,620
all so for example I'm gonna go here to

553
00:19:43,620 --> 00:19:46,289
my in this case a java application if I

554
00:19:46,289 --> 00:19:47,929
want to use to build my application

555
00:19:47,929 --> 00:19:50,520
all I need to do is to add a little

556
00:19:50,520 --> 00:19:52,830
plugin and I just need to go to my

557
00:19:52,830 --> 00:19:55,820
coming in line in this case and say

558
00:19:55,820 --> 00:19:59,100
event Jude and I do not need a docker

559
00:19:59,100 --> 00:20:00,360
file at all and

560
00:20:00,360 --> 00:20:02,400
this will automatically analyze and

561
00:20:02,400 --> 00:20:06,240
create the container for me with most of

562
00:20:06,240 --> 00:20:08,850
the best practices and uh oh yeah I need

563
00:20:08,850 --> 00:20:11,730
to you know specify the registry for

564
00:20:11,730 --> 00:20:15,480
example let me just do that yeah we can

565
00:20:15,480 --> 00:20:17,780
do this again okay

566
00:20:17,780 --> 00:20:21,660
super easy and much much better than

567
00:20:21,660 --> 00:20:23,730
having to write docker file over and

568
00:20:23,730 --> 00:20:27,090
over again okay now for containers

569
00:20:27,090 --> 00:20:29,070
here's the little quick checklist just

570
00:20:29,070 --> 00:20:31,080
make sure that you know what's in the

571
00:20:31,080 --> 00:20:33,299
container image I have opened up

572
00:20:33,299 --> 00:20:35,610
container images before that somebody

573
00:20:35,610 --> 00:20:37,470
else put used and there were source code

574
00:20:37,470 --> 00:20:39,750
in there especially for compiled

575
00:20:39,750 --> 00:20:42,030
languages that's not necessary that loss

576
00:20:42,030 --> 00:20:44,250
of these intermediate build artifacts

577
00:20:44,250 --> 00:20:46,380
like maven the entire maven central is

578
00:20:46,380 --> 00:20:47,700
in there which is not necessary

579
00:20:47,700 --> 00:20:50,700
potentially right or sometimes they get

580
00:20:50,700 --> 00:20:51,900
the right reasoning there I don't know

581
00:20:51,900 --> 00:20:53,549
how they even got in there but you know

582
00:20:53,549 --> 00:20:55,140
when you say copy everything in there I

583
00:20:55,140 --> 00:20:56,880
guess you get to keep directories so be

584
00:20:56,880 --> 00:20:58,490
careful with this always double-check

585
00:20:58,490 --> 00:21:00,630
and then you want to optimize a little

586
00:21:00,630 --> 00:21:02,340
bit more and just make sure you don't

587
00:21:02,340 --> 00:21:04,710
run as root and especially if you're

588
00:21:04,710 --> 00:21:06,840
using Java make sure its container where

589
00:21:06,840 --> 00:21:08,850
and that used towards whenever possible

590
00:21:08,850 --> 00:21:12,720
okay now finally to kubernetes once you

591
00:21:12,720 --> 00:21:14,309
have the container in your application

592
00:21:14,309 --> 00:21:16,830
here's going to be the easier part now

593
00:21:16,830 --> 00:21:19,980
you can use kubernetes to use the

594
00:21:19,980 --> 00:21:22,140
contracts that you have just adhere to

595
00:21:22,140 --> 00:21:24,600
so for example I'm going to open up my

596
00:21:24,600 --> 00:21:27,090
communities file here there are a couple

597
00:21:27,090 --> 00:21:29,970
of things that you must do number one is

598
00:21:29,970 --> 00:21:32,730
this content emerge in production

599
00:21:32,730 --> 00:21:34,799
environment always version your

600
00:21:34,799 --> 00:21:37,200
container image with the tag so rather

601
00:21:37,200 --> 00:21:39,960
than running latest always do like the

602
00:21:39,960 --> 00:21:42,120
one or you have your own version scheme

603
00:21:42,120 --> 00:21:44,610
so make sure you always have your image

604
00:21:44,610 --> 00:21:47,760
with the container tag here and always

605
00:21:47,760 --> 00:21:50,429
externalize your configuration using in

606
00:21:50,429 --> 00:21:53,400
VAR config map or secrets and here are

607
00:21:53,400 --> 00:21:55,470
the two very important thing one is

608
00:21:55,470 --> 00:21:56,370
called resource

609
00:21:56,370 --> 00:21:59,160
okay so resource is how much CPU and

610
00:21:59,160 --> 00:22:01,679
memory your application can use this is

611
00:22:01,679 --> 00:22:04,169
super important why if you don't specify

612
00:22:04,169 --> 00:22:06,690
it then your application is going to

613
00:22:06,690 --> 00:22:09,330
think that it owns the whole machine

614
00:22:09,330 --> 00:22:11,490
okay so if your machine has 16 gigabytes

615
00:22:11,490 --> 00:22:14,279
of RAM your application will fail

616
00:22:14,279 --> 00:22:16,499
that you can use all 16 gigabytes of RAM

617
00:22:16,499 --> 00:22:19,590
but in kubernetes we will be bundling or

618
00:22:19,590 --> 00:22:21,389
a bin packing multiple application

619
00:22:21,389 --> 00:22:24,330
instances into a single host so if every

620
00:22:24,330 --> 00:22:25,830
single one of them thinks they can use

621
00:22:25,830 --> 00:22:28,769
16 megabytes or gigabytes of RAM then

622
00:22:28,769 --> 00:22:30,389
you're going to run into out of memory

623
00:22:30,389 --> 00:22:33,659
issue very quickly okay so in this case

624
00:22:33,659 --> 00:22:34,979
where you want to set our two things

625
00:22:34,979 --> 00:22:37,469
once the request so this is the minimum

626
00:22:37,469 --> 00:22:39,989
amount of memory and CPU that your

627
00:22:39,989 --> 00:22:42,090
application needs so this will be used

628
00:22:42,090 --> 00:22:43,859
to make sure that hey I'm going to

629
00:22:43,859 --> 00:22:46,139
schedule you to a host that at least

630
00:22:46,139 --> 00:22:48,119
have this much memory and CPU available

631
00:22:48,119 --> 00:22:50,609
okay but you also want to set a limit

632
00:22:50,609 --> 00:22:52,769
this is how much you can use at maximum

633
00:22:52,769 --> 00:22:55,019
so this is how much you can burst to so

634
00:22:55,019 --> 00:22:56,580
even though I give you one CPU

635
00:22:56,580 --> 00:22:59,339
allocation at the beginning but now you

636
00:22:59,339 --> 00:23:01,049
can actually use as much as two CPUs

637
00:23:01,049 --> 00:23:03,749
when you need to okay similarly with

638
00:23:03,749 --> 00:23:05,820
memory now one thing to watch out for

639
00:23:05,820 --> 00:23:07,469
here is that for the memory if you

640
00:23:07,469 --> 00:23:09,929
exceed the memory that we will kill or

641
00:23:09,929 --> 00:23:11,210
try to shut down your application

642
00:23:11,210 --> 00:23:13,679
because memory is not compressible so if

643
00:23:13,679 --> 00:23:15,719
we see the memory limit will shut you

644
00:23:15,719 --> 00:23:16,229
down

645
00:23:16,229 --> 00:23:19,229
going through the sixth term signal but

646
00:23:19,229 --> 00:23:21,479
if you do exceed the CPU allocation will

647
00:23:21,479 --> 00:23:23,039
just throttle your application so you

648
00:23:23,039 --> 00:23:26,399
just become slower okay and then you

649
00:23:26,399 --> 00:23:28,080
need to remember the liveness probe in

650
00:23:28,080 --> 00:23:29,369
the redness probe that you created

651
00:23:29,369 --> 00:23:31,649
earlier you need to configure those with

652
00:23:31,649 --> 00:23:34,320
kubernetes as well so for example live

653
00:23:34,320 --> 00:23:36,599
this probe I need to use it via HTTP GET

654
00:23:36,599 --> 00:23:38,969
so I can hit the end point and render

655
00:23:38,969 --> 00:23:40,649
this probe I do the same thing however

656
00:23:40,649 --> 00:23:42,599
this is the most important thing you

657
00:23:42,599 --> 00:23:43,859
have to really think about every

658
00:23:43,859 --> 00:23:46,379
application may be different which is an

659
00:23:46,379 --> 00:23:48,299
initial delay seconds which is when

660
00:23:48,299 --> 00:23:50,219
we'll deliver this probe start to check

661
00:23:50,219 --> 00:23:53,039
and how many times will count as a

662
00:23:53,039 --> 00:23:55,859
failure and how often do we actually

663
00:23:55,859 --> 00:23:58,950
check okay so if your application takes

664
00:23:58,950 --> 00:24:01,469
ten minutes to start its true story it

665
00:24:01,469 --> 00:24:03,029
could happen or even five minutes you

666
00:24:03,029 --> 00:24:05,639
start then your initial delay second has

667
00:24:05,639 --> 00:24:07,859
to be reconfigured zero will be too

668
00:24:07,859 --> 00:24:10,320
short ten second will be too short if

669
00:24:10,320 --> 00:24:11,820
your application takes five minutes to

670
00:24:11,820 --> 00:24:14,159
start maybe you check after five minutes

671
00:24:14,159 --> 00:24:17,159
right so that will be 200 seconds and

672
00:24:17,159 --> 00:24:19,429
then you write because otherwise if the

673
00:24:19,429 --> 00:24:21,989
liveness probe kicks in too early and

674
00:24:21,989 --> 00:24:24,720
within the first 30 seconds you fail

675
00:24:24,720 --> 00:24:26,940
three times but your application is

676
00:24:26,940 --> 00:24:28,080
still starting you

677
00:24:28,080 --> 00:24:29,490
were going through this infinite loop of

678
00:24:29,490 --> 00:24:32,460
restarting you will never start and you

679
00:24:32,460 --> 00:24:33,870
definitely have to watch out for it I

680
00:24:33,870 --> 00:24:35,220
have seen application going to this

681
00:24:35,220 --> 00:24:37,890
infinite a failure loop restart loops

682
00:24:37,890 --> 00:24:40,440
just because it starts to slowly and

683
00:24:40,440 --> 00:24:42,870
this configuration hasn't been

684
00:24:42,870 --> 00:24:46,049
configured wait okay

685
00:24:46,049 --> 00:24:47,669
and then you always want to check in the

686
00:24:47,669 --> 00:24:49,470
mo file this is the final bit I'm gonna

687
00:24:49,470 --> 00:24:52,230
gonna talk about all the mo files that

688
00:24:52,230 --> 00:24:54,299
you create for companies always checking

689
00:24:54,299 --> 00:24:56,190
them in somewhere I cannot stress this

690
00:24:56,190 --> 00:24:58,320
enough this is going to save you if you

691
00:24:58,320 --> 00:25:00,299
accidentally wiped out some environment

692
00:25:00,299 --> 00:25:02,130
then you can recreate this environment

693
00:25:02,130 --> 00:25:03,870
very very quickly with the same Yama

694
00:25:03,870 --> 00:25:06,360
files that you used before because it

695
00:25:06,360 --> 00:25:07,710
because you check the name now you can

696
00:25:07,710 --> 00:25:10,019
just do keep CTO apply and then you can

697
00:25:10,019 --> 00:25:11,669
get the same environment up and running

698
00:25:11,669 --> 00:25:16,590
in no time okay so I think that's almost

699
00:25:16,590 --> 00:25:19,019
the time that I have with a couple

700
00:25:19,019 --> 00:25:21,059
minutes for questions so I'm gonna go to

701
00:25:21,059 --> 00:25:23,220
their last slide here which is a just a

702
00:25:23,220 --> 00:25:25,080
little more obviously 30 minutes it's

703
00:25:25,080 --> 00:25:26,970
really short but if you want to learn

704
00:25:26,970 --> 00:25:29,279
more with the more advanced topics here

705
00:25:29,279 --> 00:25:30,990
are some of the links you can try with

706
00:25:30,990 --> 00:25:33,360
recorded talks and even pro laughs okay

707
00:25:33,360 --> 00:25:36,450
cool awesome rate thank you very much so

708
00:25:36,450 --> 00:25:39,419
I do have one question so when it comes

709
00:25:39,419 --> 00:25:42,299
to using the jib tool so like that makes

710
00:25:42,299 --> 00:25:44,309
sense it's like I'm definitely not an

711
00:25:44,309 --> 00:25:46,289
expert when it comes to putting together

712
00:25:46,289 --> 00:25:49,380
docker file so kind of unloading that

713
00:25:49,380 --> 00:25:50,750
off to like some sort of tool that

714
00:25:50,750 --> 00:25:52,950
introduces best practices and all that

715
00:25:52,950 --> 00:25:55,320
into it it's good but what can you do to

716
00:25:55,320 --> 00:25:58,919
kind of make sure that you know like

717
00:25:58,919 --> 00:26:00,720
something suddenly doesn't change your

718
00:26:00,720 --> 00:26:01,889
docker file and then all of a sudden

719
00:26:01,889 --> 00:26:04,080
something that was working before is all

720
00:26:04,080 --> 00:26:05,429
sudden breaking and you don't know why

721
00:26:05,429 --> 00:26:07,110
like can you kind of set like I want

722
00:26:07,110 --> 00:26:08,760
this specific verse in the Java or

723
00:26:08,760 --> 00:26:11,250
something like that but what is the

724
00:26:11,250 --> 00:26:13,860
configurations you can do with that yep

725
00:26:13,860 --> 00:26:16,380
so if you're using a docker file then

726
00:26:16,380 --> 00:26:18,690
where you set this you know think

727
00:26:18,690 --> 00:26:20,159
version off Java or at the base image

728
00:26:20,159 --> 00:26:22,919
the echo seems moved from block if

729
00:26:22,919 --> 00:26:25,409
you're using did before example we also

730
00:26:25,409 --> 00:26:27,090
have configuration here so I can say

731
00:26:27,090 --> 00:26:30,539
from inmate and then I can say open JDK

732
00:26:30,539 --> 00:26:34,440
for example 8 you at 1 2 42 here are

733
00:26:34,440 --> 00:26:37,049
nice limb right and this way whenever

734
00:26:37,049 --> 00:26:38,850
this image is being beaut you'll use

735
00:26:38,850 --> 00:26:40,590
this same base image over and over again

736
00:26:40,590 --> 00:26:42,000
and I will give you

737
00:26:42,000 --> 00:26:45,570
consistency okay great great yeah and I

738
00:26:45,570 --> 00:26:47,220
guess there's there's pie I'm guessing

739
00:26:47,220 --> 00:26:49,770
just a lot of options when it comes to

740
00:26:49,770 --> 00:26:51,300
this configuration to make sure yeah

741
00:26:51,300 --> 00:26:54,240
anything that you need you can pass in

742
00:26:54,240 --> 00:26:55,560
there as if you're writing your own dico

743
00:26:55,560 --> 00:26:56,970
file but you don't actually have to

744
00:26:56,970 --> 00:26:58,710
specify all that stuff if you don't need

745
00:26:58,710 --> 00:27:01,950
to that's right yeah and and similarly

746
00:27:01,950 --> 00:27:04,620
here I do need to go out like what user

747
00:27:04,620 --> 00:27:07,410
do I want to run this application s even

748
00:27:07,410 --> 00:27:09,450
which you need to call this out because

749
00:27:09,450 --> 00:27:11,940
also by default is going to use what's

750
00:27:11,940 --> 00:27:14,310
defaulting this face image and every

751
00:27:14,310 --> 00:27:15,510
base image from they have a different

752
00:27:15,510 --> 00:27:17,550
user and group that you may need to use

753
00:27:17,550 --> 00:27:19,790
so you do need to configure this as well

754
00:27:19,790 --> 00:27:22,650
nice yeah this is really useful

755
00:27:22,650 --> 00:27:27,540
particularly the jib tool becoming a bit

756
00:27:27,540 --> 00:27:30,390
more familiar just before you Paul

757
00:27:30,390 --> 00:27:32,850
Sarkozy I kind of mentioned it but now

758
00:27:32,850 --> 00:27:35,370
you know a very good I guess you could

759
00:27:35,370 --> 00:27:38,190
say layup and that you mentioned it now

760
00:27:38,190 --> 00:27:40,110
you kind of went further in depth into

761
00:27:40,110 --> 00:27:41,130
it so I apply I actually have to

762
00:27:41,130 --> 00:27:43,290
consider using that and some of my tools

763
00:27:43,290 --> 00:27:46,290
are some of my tests right one question

764
00:27:46,290 --> 00:27:48,330
I do also have is like I really love

765
00:27:48,330 --> 00:27:50,280
test containers have you done anything

766
00:27:50,280 --> 00:27:53,070
when it comes to like how to share like

767
00:27:53,070 --> 00:27:54,420
data volumes or something for like a

768
00:27:54,420 --> 00:27:56,670
database or any like that may be back in

769
00:27:56,670 --> 00:27:58,800
beta you maybe want to have your test or

770
00:27:58,800 --> 00:28:00,930
have you just also kind of mostly just

771
00:28:00,930 --> 00:28:03,780
filter around it with it as well yeah so

772
00:28:03,780 --> 00:28:05,790
for the test data depends on the

773
00:28:05,790 --> 00:28:07,410
framework that you use right so for

774
00:28:07,410 --> 00:28:09,570
example in spring boot you should be

775
00:28:09,570 --> 00:28:11,310
able to depend on spring boots to be

776
00:28:11,310 --> 00:28:13,260
able to run through the innate sequel or

777
00:28:13,260 --> 00:28:15,750
data sequel and that would just be

778
00:28:15,750 --> 00:28:17,940
pulled out that spring boot data data

779
00:28:17,940 --> 00:28:19,710
container oh sorry the spring boot data

780
00:28:19,710 --> 00:28:23,760
a people component sorry and which you

781
00:28:23,760 --> 00:28:26,480
could be always being able to re

782
00:28:26,480 --> 00:28:28,680
reestablish the same test cases how you

783
00:28:28,680 --> 00:28:32,490
expect otherwise you will be you know

784
00:28:32,490 --> 00:28:34,710
testing against either steal data or

785
00:28:34,710 --> 00:28:37,710
data that somebody else changed yeah

786
00:28:37,710 --> 00:28:40,770
great yeah that that's good at this test

787
00:28:40,770 --> 00:28:43,620
containers one of my friend Rob Lynch he

788
00:28:43,620 --> 00:28:46,200
introduced me to that about two or three

789
00:28:46,200 --> 00:28:49,200
years ago now and it's been really cool

790
00:28:49,200 --> 00:28:53,220
to see that tool growing popularity

791
00:28:53,220 --> 00:28:54,990
because like it just does exactly what

792
00:28:54,990 --> 00:28:55,740
you want and

793
00:28:55,740 --> 00:28:57,210
it solves like a really important quote

794
00:28:57,210 --> 00:28:59,520
issue kind of like oh you want to

795
00:28:59,520 --> 00:29:01,170
actually test against the Postgres

796
00:29:01,170 --> 00:29:02,520
database but you don't want to have like

797
00:29:02,520 --> 00:29:04,020
your testing to go missing or whatever

798
00:29:04,020 --> 00:29:05,790
it might be or the database me down when

799
00:29:05,790 --> 00:29:09,330
you run your test so any violin watching

800
00:29:09,330 --> 00:29:11,429
like definitely consider using test

801
00:29:11,429 --> 00:29:13,590
containers for your integration test it

802
00:29:13,590 --> 00:29:16,380
will definitely help a lot so I think

803
00:29:16,380 --> 00:29:18,660
we're at time that we also have a break

804
00:29:18,660 --> 00:29:20,490
after this so if there's anything else

805
00:29:20,490 --> 00:29:22,590
you want and maybe cuts on we do have a

806
00:29:22,590 --> 00:29:24,360
couple more minutes if you want or we

807
00:29:24,360 --> 00:29:28,980
can just go ahead and end it here yeah I

808
00:29:28,980 --> 00:29:30,600
just want to say thank you again for

809
00:29:30,600 --> 00:29:33,150
hosting it and thanks oh the organizer

810
00:29:33,150 --> 00:29:36,120
is for putting this together it's really

811
00:29:36,120 --> 00:29:37,890
impressive what everyone has

812
00:29:37,890 --> 00:29:40,800
accomplished so far yeah all right thank

813
00:29:40,800 --> 00:29:43,320
you right and also make sure to consider

814
00:29:43,320 --> 00:29:46,320
buying tickets help donate I believe the

815
00:29:46,320 --> 00:29:49,080
funds are going to who and obviously the

816
00:29:49,080 --> 00:29:51,210
reason we're having this is because of

817
00:29:51,210 --> 00:29:53,130
the Cova pandemic and you know donate

818
00:29:53,130 --> 00:29:57,120
you can I also help with resolving or

819
00:29:57,120 --> 00:29:58,740
help maybe mitigate some of the problems

820
00:29:58,740 --> 00:30:00,690
with Cove at 19 or maybe hopefully

821
00:30:00,690 --> 00:30:02,790
actually more convenient you're out

822
00:30:02,790 --> 00:30:04,890
there pretty or vexing out here pretty

823
00:30:04,890 --> 00:30:07,170
soon as well so all right thank you very

824
00:30:07,170 --> 00:30:09,059
much ray and thank you very well sand I

825
00:30:09,059 --> 00:30:12,920
think we're going on a like said about

