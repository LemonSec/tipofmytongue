1
00:00:00,030 --> 00:00:02,820
how's everyone doing I know these are

2
00:00:02,820 --> 00:00:04,230
all gonna be rhetorical questions so I'm

3
00:00:04,230 --> 00:00:06,270
going to keep talking my name is Andrew

4
00:00:06,270 --> 00:00:08,610
I'm a systems engineer and I work for a

5
00:00:08,610 --> 00:00:10,920
company called solace we make an

6
00:00:10,920 --> 00:00:12,480
advanced event broker and a platform

7
00:00:12,480 --> 00:00:14,519
around it to help you build the venture

8
00:00:14,519 --> 00:00:16,550
of an applications enterprise-grade

9
00:00:16,550 --> 00:00:20,550
event-driven applications so just a

10
00:00:20,550 --> 00:00:22,590
little bit of background on this talk

11
00:00:22,590 --> 00:00:25,769
before I jump in as a systems engineer I

12
00:00:25,769 --> 00:00:27,869
do a lot of work for proof-of-concept

13
00:00:27,869 --> 00:00:31,289
stuff and pre-sales work ISO developer

14
00:00:31,289 --> 00:00:32,969
workshops or demos and that kind of

15
00:00:32,969 --> 00:00:35,520
stuff so I have to build a lot of small

16
00:00:35,520 --> 00:00:37,410
projects pretty frequently that that's

17
00:00:37,410 --> 00:00:39,870
basically what my job is so javascript

18
00:00:39,870 --> 00:00:42,660
has been invaluable to me there are

19
00:00:42,660 --> 00:00:44,309
libraries for every part of the stack

20
00:00:44,309 --> 00:00:46,230
and they all play very nicely together

21
00:00:46,230 --> 00:00:48,840
so it's it's it's my language of choice

22
00:00:48,840 --> 00:00:50,489
I've been using it for around four years

23
00:00:50,489 --> 00:00:52,649
and I'm gonna give this talk

24
00:00:52,649 --> 00:00:54,420
event-driven javascript across the stack

25
00:00:54,420 --> 00:00:56,640
and what I hope for you to take away

26
00:00:56,640 --> 00:00:59,340
from it is just a list of the libraries

27
00:00:59,340 --> 00:01:01,379
that I've used um I found a couple good

28
00:01:01,379 --> 00:01:03,270
ones that are pretty useful for a lot of

29
00:01:03,270 --> 00:01:05,909
different demo use cases as well as

30
00:01:05,909 --> 00:01:07,530
seeing how easy it is to connect all

31
00:01:07,530 --> 00:01:10,619
these applications together using solace

32
00:01:10,619 --> 00:01:12,600
which is the technology in the company I

33
00:01:12,600 --> 00:01:15,930
work for if you haven't seen

34
00:01:15,930 --> 00:01:18,119
event-driven programming before just

35
00:01:18,119 --> 00:01:19,890
stick with me try to learn something new

36
00:01:19,890 --> 00:01:21,689
and I apologize for any signs in the

37
00:01:21,689 --> 00:01:23,100
background I do live in the city right

38
00:01:23,100 --> 00:01:24,390
now so I'm not sure if there will be

39
00:01:24,390 --> 00:01:30,380
more all right I'm gonna get started so

40
00:01:32,119 --> 00:01:35,009
yeah off the top what let's give an

41
00:01:35,009 --> 00:01:36,900
overview of the demo I'd built first

42
00:01:36,900 --> 00:01:39,630
before I jump into the libraries so I

43
00:01:39,630 --> 00:01:41,579
was assigned to an account and they had

44
00:01:41,579 --> 00:01:44,460
an industry 4.0 use case if you're not

45
00:01:44,460 --> 00:01:46,020
familiar with what that means it just

46
00:01:46,020 --> 00:01:48,270
means that there's a trend right now in

47
00:01:48,270 --> 00:01:51,990
industry to connect everything and then

48
00:01:51,990 --> 00:01:54,030
to use that data using whatever tools we

49
00:01:54,030 --> 00:01:55,740
have at our disposal to make intelligent

50
00:01:55,740 --> 00:01:58,320
business and manufacturing decisions

51
00:01:58,320 --> 00:02:02,430
based off that raw data so this

52
00:02:02,430 --> 00:02:04,950
prospects to use case they had factories

53
00:02:04,950 --> 00:02:07,860
spread across regions and then they had

54
00:02:07,860 --> 00:02:10,500
a centralized ntral HQ where they had

55
00:02:10,500 --> 00:02:13,500
their engineers and management work as

56
00:02:13,500 --> 00:02:13,800
well

57
00:02:13,800 --> 00:02:16,520
they're on-premise computing environment

58
00:02:16,520 --> 00:02:18,750
so basically what they wanted to do is

59
00:02:18,750 --> 00:02:20,070
take the raw data that was being

60
00:02:20,070 --> 00:02:22,260
produced in those connected devices at

61
00:02:22,260 --> 00:02:26,190
each factory finally through some magic

62
00:02:26,190 --> 00:02:28,110
infrastructure and spoiler alert and

63
00:02:28,110 --> 00:02:30,780
then eventually get it to HQ in their

64
00:02:30,780 --> 00:02:33,150
on-premise computing environment so they

65
00:02:33,150 --> 00:02:35,040
can do things like story classify it

66
00:02:35,040 --> 00:02:38,160
aggregated or potentially alert out

67
00:02:38,160 --> 00:02:40,020
engineers or interested parties in the

68
00:02:40,020 --> 00:02:41,940
data or the data products produced from

69
00:02:41,940 --> 00:02:45,240
the raw data and of course they want

70
00:02:45,240 --> 00:02:47,010
real-time command and control dashboards

71
00:02:47,010 --> 00:02:48,540
because this is 2020 I mean what else

72
00:02:48,540 --> 00:02:51,360
are we gonna build right so my job as a

73
00:02:51,360 --> 00:02:55,020
systems engineer was was this first was

74
00:02:55,020 --> 00:02:58,250
to come up with a semi realistic problem

75
00:02:58,250 --> 00:03:01,800
that was relevant to their use case the

76
00:03:01,800 --> 00:03:04,710
second was to design a solution to that

77
00:03:04,710 --> 00:03:06,390
made-up problem that proved and

78
00:03:06,390 --> 00:03:09,500
visualized how my company's software

79
00:03:09,500 --> 00:03:11,610
supports the protocols and event flows

80
00:03:11,610 --> 00:03:13,620
required by that prospects use case and

81
00:03:13,620 --> 00:03:16,850
then lastly my job my job is to build it

82
00:03:16,850 --> 00:03:19,910
so quickly I'm gonna go through the the

83
00:03:19,910 --> 00:03:23,540
dummy user problem that I posed to

84
00:03:23,540 --> 00:03:26,489
myself to solve I'm gonna look something

85
00:03:26,489 --> 00:03:28,410
like this so I said let's determine a

86
00:03:28,410 --> 00:03:30,239
factory's product output based on how

87
00:03:30,239 --> 00:03:33,180
many boxes exit the factory on a single

88
00:03:33,180 --> 00:03:35,100
conveyor belt and you see at the bottom

89
00:03:35,100 --> 00:03:36,690
of waiting my hands and the boxes are

90
00:03:36,690 --> 00:03:40,709
neatly separated so I might look

91
00:03:40,709 --> 00:03:42,630
something like that and then display the

92
00:03:42,630 --> 00:03:44,220
product counts in real-time on a

93
00:03:44,220 --> 00:03:45,959
dashboard for your engineers your

94
00:03:45,959 --> 00:03:48,260
technicians management to act on and

95
00:03:48,260 --> 00:03:50,459
potentially send signals command and

96
00:03:50,459 --> 00:03:54,600
control signals back to those sensors so

97
00:03:54,600 --> 00:03:57,600
if we pick apart this solution there's a

98
00:03:57,600 --> 00:03:59,489
proximity sensor is what you call it and

99
00:03:59,489 --> 00:04:02,400
that's a connected device that emits a

100
00:04:02,400 --> 00:04:06,330
constant stream of distance readings so

101
00:04:06,330 --> 00:04:07,770
we need to take those distance street

102
00:04:07,770 --> 00:04:10,080
readings and then interpret them somehow

103
00:04:10,080 --> 00:04:13,110
we want the product counts right so what

104
00:04:13,110 --> 00:04:15,120
that would look like is this so if

105
00:04:15,120 --> 00:04:16,640
there's no box in front of the sensor

106
00:04:16,640 --> 00:04:18,750
the wave is going to hit the back of the

107
00:04:18,750 --> 00:04:20,339
conveyor belt and that'll be the

108
00:04:20,339 --> 00:04:22,710
baseline distance and then if a box

109
00:04:22,710 --> 00:04:24,780
passes in front of it well the distance

110
00:04:24,780 --> 00:04:26,220
will decrease so that's going to be a

111
00:04:26,220 --> 00:04:27,660
triggered state and then

112
00:04:27,660 --> 00:04:29,970
once it finishes passing it it'll revert

113
00:04:29,970 --> 00:04:35,220
back to the baseline state so right the

114
00:04:35,220 --> 00:04:37,560
the distance is great but it means

115
00:04:37,560 --> 00:04:39,750
nothing to us and unless we interpret it

116
00:04:39,750 --> 00:04:41,700
like I just explained so we need some

117
00:04:41,700 --> 00:04:44,700
sort of application for that a stateful

118
00:04:44,700 --> 00:04:48,930
application and then for the final

119
00:04:48,930 --> 00:04:51,210
component for the dashboard we need to

120
00:04:51,210 --> 00:04:54,180
take those interpreted proximity

121
00:04:54,180 --> 00:04:57,120
readings in product counts and then in

122
00:04:57,120 --> 00:05:00,060
some in some way push them to the the

123
00:05:00,060 --> 00:05:02,070
the dashboard for then engineers and

124
00:05:02,070 --> 00:05:04,950
management to be able to act on what

125
00:05:04,950 --> 00:05:05,880
that looks like is we're gonna

126
00:05:05,880 --> 00:05:08,850
predefined some intervals that in our

127
00:05:08,850 --> 00:05:10,920
state machine we're gonna publish out

128
00:05:10,920 --> 00:05:13,080
the the product counts that we were

129
00:05:13,080 --> 00:05:16,560
producing from those streams of raw data

130
00:05:16,560 --> 00:05:18,750
and then we'll reset the count and on

131
00:05:18,750 --> 00:05:22,740
the interval and write to note this is

132
00:05:22,740 --> 00:05:25,770
real time so we're pushing out events to

133
00:05:25,770 --> 00:05:27,270
this dashboard the dashboard isn't

134
00:05:27,270 --> 00:05:30,060
pulling a database in the product count

135
00:05:30,060 --> 00:05:32,370
example isn't perfect for this but it's

136
00:05:32,370 --> 00:05:34,050
good enough to show that this is how it

137
00:05:34,050 --> 00:05:36,390
works right the big point here is the

138
00:05:36,390 --> 00:05:39,290
event flow not exactly the dummy problem

139
00:05:39,290 --> 00:05:43,169
so recap there are three things I need

140
00:05:43,169 --> 00:05:45,750
to build so I had a proximity sensor

141
00:05:45,750 --> 00:05:48,800
connected device that's IOT there's a

142
00:05:48,800 --> 00:05:51,840
basic processor application and then

143
00:05:51,840 --> 00:05:55,890
there's a dashboard component so given

144
00:05:55,890 --> 00:05:57,240
that it's 20/20 I'm gonna use Java

145
00:05:57,240 --> 00:05:59,250
JavaScript for everything I'd be crazy

146
00:05:59,250 --> 00:06:02,280
if I didn't write and I also needed the

147
00:06:02,280 --> 00:06:04,500
data to flow like this so I have from

148
00:06:04,500 --> 00:06:06,060
the proximity sensor I'm gonna publish

149
00:06:06,060 --> 00:06:10,590
raw proximity distance readings to that

150
00:06:10,590 --> 00:06:12,150
application that's going to interpret

151
00:06:12,150 --> 00:06:15,540
them the processor is going to send the

152
00:06:15,540 --> 00:06:18,060
product counts in real time out to that

153
00:06:18,060 --> 00:06:20,520
command and control dashboard and then

154
00:06:20,520 --> 00:06:22,410
potentially if an engineer wants to it

155
00:06:22,410 --> 00:06:24,900
should be able to send a control out to

156
00:06:24,900 --> 00:06:28,410
those proximity sensors so if I were to

157
00:06:28,410 --> 00:06:30,780
build this using rest that'd be pretty

158
00:06:30,780 --> 00:06:32,550
difficult as I scaled out my number of

159
00:06:32,550 --> 00:06:34,590
proximity sensors I would need some sort

160
00:06:34,590 --> 00:06:36,750
of way to identify and then communicate

161
00:06:36,750 --> 00:06:39,510
with these individual sensors

162
00:06:39,510 --> 00:06:41,520
maybe I expose in a

163
00:06:41,520 --> 00:06:43,440
yeah I'm it I don't really know how I

164
00:06:43,440 --> 00:06:47,099
designed this so you can just use solace

165
00:06:47,099 --> 00:06:48,660
for it it's so much easier when you use

166
00:06:48,660 --> 00:06:51,030
solace right or event-driven our

167
00:06:51,030 --> 00:06:53,819
architecture so this is what the

168
00:06:53,819 --> 00:06:55,409
architecture diagram of the demo looks

169
00:06:55,409 --> 00:06:58,770
like you have n number of proximity

170
00:06:58,770 --> 00:07:00,900
sensors that are integrated with a

171
00:07:00,900 --> 00:07:03,210
Raspberry Pi board and I have a node

172
00:07:03,210 --> 00:07:05,569
application running on that Raspberry Pi

173
00:07:05,569 --> 00:07:08,690
right so from there I'm going to publish

174
00:07:08,690 --> 00:07:13,500
the proximity distance readings into my

175
00:07:13,500 --> 00:07:15,360
event broker a message broker if you're

176
00:07:15,360 --> 00:07:18,060
more comfortable with that term and then

177
00:07:18,060 --> 00:07:20,400
from there I'm going to subscribe to the

178
00:07:20,400 --> 00:07:22,139
topic that these distance readings are

179
00:07:22,139 --> 00:07:24,330
being published on and receive them in

180
00:07:24,330 --> 00:07:26,789
my proximity reading processor I'll

181
00:07:26,789 --> 00:07:28,830
interpret them as product countless in

182
00:07:28,830 --> 00:07:30,300
published product accounts on an

183
00:07:30,300 --> 00:07:33,389
integral backing to solace and then from

184
00:07:33,389 --> 00:07:35,580
there I'm able to receive those product

185
00:07:35,580 --> 00:07:38,159
accounts on my react dashboard and if I

186
00:07:38,159 --> 00:07:40,409
click a button I'd like that to traverse

187
00:07:40,409 --> 00:07:42,539
back and traverse out to the proximity

188
00:07:42,539 --> 00:07:45,690
sensor that it's addressed to so notice

189
00:07:45,690 --> 00:07:47,909
how solace is taking care of all the

190
00:07:47,909 --> 00:07:50,880
topic routing and the filtering and the

191
00:07:50,880 --> 00:07:55,050
connectivity details so I have a quick

192
00:07:55,050 --> 00:07:59,639
video of what that looks like so here's

193
00:07:59,639 --> 00:08:03,090
my table I click into my sensor and then

194
00:08:03,090 --> 00:08:04,860
you can see that the product accounts

195
00:08:04,860 --> 00:08:06,960
are starting to stream in in real time

196
00:08:06,960 --> 00:08:09,270
and then if I click stop

197
00:08:09,270 --> 00:08:11,430
so is you a command that's going to send

198
00:08:11,430 --> 00:08:15,180
it out to the sensor with this ID you

199
00:08:15,180 --> 00:08:16,620
can see that the product counts are

200
00:08:16,620 --> 00:08:17,940
starting to go down to zero and I'm

201
00:08:17,940 --> 00:08:20,400
gonna restart it it'll start sending

202
00:08:20,400 --> 00:08:25,460
back out accurate product accounts right

203
00:08:25,520 --> 00:08:27,440
alright cool

204
00:08:27,440 --> 00:08:29,639
you probably care more about the

205
00:08:29,639 --> 00:08:32,578
JavaScript stuff so let's get to that

206
00:08:32,578 --> 00:08:34,529
so first what did I what javascript

207
00:08:34,529 --> 00:08:36,809
libraries did I use to build the the

208
00:08:36,809 --> 00:08:41,520
proximity sensor app 9595 describes

209
00:08:41,520 --> 00:08:43,229
themselves as the JavaScript robotics

210
00:08:43,229 --> 00:08:46,230
and IOT platform and I will tell you

211
00:08:46,230 --> 00:08:50,010
that their API is dead simple it in a

212
00:08:50,010 --> 00:08:51,930
nutshell what it is is it gives you

213
00:08:51,930 --> 00:08:53,670
callbacks for different types of

214
00:08:53,670 --> 00:08:55,990
connected device you

215
00:08:55,990 --> 00:08:58,420
so the callback triggers whenever that

216
00:08:58,420 --> 00:09:01,690
board event happens and it's been tested

217
00:09:01,690 --> 00:09:03,490
against arduino-compatible as well as

218
00:09:03,490 --> 00:09:06,610
non arduino compatible boards so that

219
00:09:06,610 --> 00:09:07,959
means you get a lot of bang for your

220
00:09:07,959 --> 00:09:09,850
buck with this library so if you learned

221
00:09:09,850 --> 00:09:11,440
johnny-five you basically have a Swiss

222
00:09:11,440 --> 00:09:13,000
Army knife tool that you can apply to

223
00:09:13,000 --> 00:09:15,880
any IOT use case or demo that you may

224
00:09:15,880 --> 00:09:19,300
need to create right it's got a pretty

225
00:09:19,300 --> 00:09:22,300
good community as well at over 10k stars

226
00:09:22,300 --> 00:09:25,060
on github and then specifically if

227
00:09:25,060 --> 00:09:26,290
you're interested in building out a

228
00:09:26,290 --> 00:09:28,540
proximity sensor like I did for my demo

229
00:09:28,540 --> 00:09:30,610
my manager put together a really

230
00:09:30,610 --> 00:09:32,769
thorough code lab that walks through the

231
00:09:32,769 --> 00:09:34,149
setup assembly and purchasing

232
00:09:34,149 --> 00:09:36,970
instructions that I used for it for this

233
00:09:36,970 --> 00:09:39,370
demo you can see the Bourdon in here a

234
00:09:39,370 --> 00:09:42,190
link to it here I'm in code lab it's

235
00:09:42,190 --> 00:09:43,779
it's like a code tutorial with

236
00:09:43,779 --> 00:09:46,420
screenshots and sections it's initiative

237
00:09:46,420 --> 00:09:49,389
by it by Google but we have solace have

238
00:09:49,389 --> 00:09:50,829
a couple code labs and you can see them

239
00:09:50,829 --> 00:09:55,480
there as well so next up let's just look

240
00:09:55,480 --> 00:09:59,050
at the the processor application and for

241
00:09:59,050 --> 00:10:02,740
this I used X state I so X state is

242
00:10:02,740 --> 00:10:04,569
JavaScript library for state machines

243
00:10:04,569 --> 00:10:06,699
and state charts as you can see by the

244
00:10:06,699 --> 00:10:09,009
NPM trends chart they went from I think

245
00:10:09,009 --> 00:10:12,579
50k to 500k this this library is

246
00:10:12,579 --> 00:10:14,079
absolutely blowing up in the community

247
00:10:14,079 --> 00:10:16,899
it's super popular both in front-end and

248
00:10:16,899 --> 00:10:18,579
now it's starting to creep into you to

249
00:10:18,579 --> 00:10:22,000
full stack a little bit so I only have

250
00:10:22,000 --> 00:10:24,100
25 minutes here so I don't have time to

251
00:10:24,100 --> 00:10:26,529
do it any justice but I'll give you

252
00:10:26,529 --> 00:10:28,120
three benefits of using a state machine

253
00:10:28,120 --> 00:10:31,240
right now an explicit state machine is

254
00:10:31,240 --> 00:10:33,370
easier to reason about an implicit one

255
00:10:33,370 --> 00:10:34,870
that's spread across your codebase in

256
00:10:34,870 --> 00:10:37,449
all applications are a state machine so

257
00:10:37,449 --> 00:10:39,100
you can't say that my app isn't a state

258
00:10:39,100 --> 00:10:42,040
machine state machines represent your

259
00:10:42,040 --> 00:10:44,620
application state as a graph which lets

260
00:10:44,620 --> 00:10:47,170
it be visualized this is a bigger

261
00:10:47,170 --> 00:10:48,670
benefit than you might think if you're

262
00:10:48,670 --> 00:10:49,839
sharing your code with a bunch of

263
00:10:49,839 --> 00:10:51,040
developers and you just shoot them a

264
00:10:51,040 --> 00:10:52,990
link and it's a visual of the app state

265
00:10:52,990 --> 00:10:55,329
how powerful is that and then you can

266
00:10:55,329 --> 00:10:57,069
just dive right into the the area you

267
00:10:57,069 --> 00:10:59,680
need to and then lastly you have state

268
00:10:59,680 --> 00:11:01,240
machines prevent illegal states and

269
00:11:01,240 --> 00:11:02,860
illegal transitions because everything's

270
00:11:02,860 --> 00:11:05,949
explicit so my workflow for using this

271
00:11:05,949 --> 00:11:08,260
was to first jump into the visualizer

272
00:11:08,260 --> 00:11:09,250
tool

273
00:11:09,250 --> 00:11:12,340
to model the processor states right the

274
00:11:12,340 --> 00:11:13,990
box is passing in front of that sensor

275
00:11:13,990 --> 00:11:15,820
the different the baseline say the

276
00:11:15,820 --> 00:11:17,560
triggered state the intervals all that's

277
00:11:17,560 --> 00:11:19,480
handled with the X state but I started

278
00:11:19,480 --> 00:11:20,860
at the visual tool then I implemented

279
00:11:20,860 --> 00:11:24,010
the actual logic and I think that's a

280
00:11:24,010 --> 00:11:25,390
great workflow that more people she

281
00:11:25,390 --> 00:11:29,530
agrees next up let's check out the react

282
00:11:29,530 --> 00:11:32,650
dashboard so use reach arts for the

283
00:11:32,650 --> 00:11:35,980
charts you saw there are a couple good

284
00:11:35,980 --> 00:11:37,660
charting libraries and react but this

285
00:11:37,660 --> 00:11:39,910
one's built on top of d3 it's the most

286
00:11:39,910 --> 00:11:42,820
popular one if I'm not mistaken at 13.7

287
00:11:42,820 --> 00:11:44,950
K getting up stars I don't have a ton to

288
00:11:44,950 --> 00:11:46,570
say about it besides that it's very easy

289
00:11:46,570 --> 00:11:50,470
to use react window pretty much the same

290
00:11:50,470 --> 00:11:54,280
the the lists you saw where react window

291
00:11:54,280 --> 00:11:56,670
this is my go-to library for anything

292
00:11:56,670 --> 00:11:59,290
list related if you're not doing

293
00:11:59,290 --> 00:12:01,420
something super complicated this library

294
00:12:01,420 --> 00:12:03,640
is probably more than enough to handle

295
00:12:03,640 --> 00:12:11,530
your needs and then this might be the

296
00:12:11,530 --> 00:12:13,270
the most tangible take away from my talk

297
00:12:13,270 --> 00:12:17,590
if you're if your react user is use Emer

298
00:12:17,590 --> 00:12:19,540
I found this library thanks to someone

299
00:12:19,540 --> 00:12:22,540
on Twitter I forget you but thank

300
00:12:22,540 --> 00:12:25,300
immutable you state so if you look over

301
00:12:25,300 --> 00:12:29,710
here instead of calling it set the state

302
00:12:29,710 --> 00:12:33,190
with the the tuple that it returns it

303
00:12:33,190 --> 00:12:35,350
gives you basically produce if you're

304
00:12:35,350 --> 00:12:37,720
using Emmer if you're familiar with that

305
00:12:37,720 --> 00:12:39,940
but dead simple API for immutable state

306
00:12:39,940 --> 00:12:42,160
in react apps awesome library don't

307
00:12:42,160 --> 00:12:45,010
can't recommend it enough and then

308
00:12:45,010 --> 00:12:47,020
lastly the the common libraries across

309
00:12:47,020 --> 00:12:50,110
all the apps so if you notice I have

310
00:12:50,110 --> 00:12:52,390
these these purple boxes with MQTT in

311
00:12:52,390 --> 00:12:55,420
them and they sit between every single

312
00:12:55,420 --> 00:13:00,130
application and in silos pub/sub plus so

313
00:13:00,130 --> 00:13:02,440
I guess I'll start here so if you're

314
00:13:02,440 --> 00:13:06,820
asking what's mqtt it's a protocol that

315
00:13:06,820 --> 00:13:08,890
was designed primarily for an internet

316
00:13:08,890 --> 00:13:11,220
of things like lightweight pub/sub

317
00:13:11,220 --> 00:13:14,680
message transport but it's it's more

318
00:13:14,680 --> 00:13:16,900
generic than that and a lot of people

319
00:13:16,900 --> 00:13:18,430
describe it as a protocol it doesn't do

320
00:13:18,430 --> 00:13:20,590
too much and it doesn't do too little so

321
00:13:20,590 --> 00:13:22,480
my advice to you is if you would like

322
00:13:22,480 --> 00:13:23,560
to learn more about event-driven

323
00:13:23,560 --> 00:13:25,870
programming especially with JavaScript

324
00:13:25,870 --> 00:13:28,690
I think MQTT is a great place to start

325
00:13:28,690 --> 00:13:30,339
it's a really good protocol it's got

326
00:13:30,339 --> 00:13:32,980
great community backing and it's gonna

327
00:13:32,980 --> 00:13:37,529
expose you to a lot of different ways to

328
00:13:37,529 --> 00:13:41,589
program or to jump into event driven

329
00:13:41,589 --> 00:13:43,120
programming when I wanted to say they're

330
00:13:43,120 --> 00:13:44,230
so

331
00:13:44,230 --> 00:13:46,720
and then lastly Emer so if you use

332
00:13:46,720 --> 00:13:48,610
javascript you probably want immutable

333
00:13:48,610 --> 00:13:51,670
data types immers a crowd crowd favorite

334
00:13:51,670 --> 00:13:55,290
right now and it has a dead simple API

335
00:13:56,220 --> 00:13:59,199
next up so let's look at the event flows

336
00:13:59,199 --> 00:14:05,110
I showed you a demo of it first I have a

337
00:14:05,110 --> 00:14:09,279
sensor publishing into two solace using

338
00:14:09,279 --> 00:14:13,600
MQTT I have my processor application and

339
00:14:13,600 --> 00:14:16,510
it's it's X state here is mqtt in and

340
00:14:16,510 --> 00:14:20,589
then MQTT out i have empty TT out to my

341
00:14:20,589 --> 00:14:23,500
reach arts the chart and then I have n

342
00:14:23,500 --> 00:14:28,209
QT t out to my sensor from react from

343
00:14:28,209 --> 00:14:32,170
from the button press so what does that

344
00:14:32,170 --> 00:14:38,279
look like in code something like this so

345
00:14:38,279 --> 00:14:42,639
the if you navigate excuse me I forgot

346
00:14:42,639 --> 00:14:44,019
its line I'm going to come back to it

347
00:14:44,019 --> 00:14:47,350
empty Tiki bas is then PTT client for

348
00:14:47,350 --> 00:14:49,930
nodejs in the browser and I found that

349
00:14:49,930 --> 00:14:52,269
they have the best Doc's in terms of n

350
00:14:52,269 --> 00:14:54,399
ki TT clients so if you've never used

351
00:14:54,399 --> 00:14:56,769
one before start here and look at all

352
00:14:56,769 --> 00:15:01,290
the the event callbacks that you get

353
00:15:01,290 --> 00:15:03,130
because they do a great job of

354
00:15:03,130 --> 00:15:05,410
documenting it and client lifecycle

355
00:15:05,410 --> 00:15:08,230
events you get but basically you just

356
00:15:08,230 --> 00:15:11,220
need to connect a client to the broker

357
00:15:11,220 --> 00:15:13,540
using whatever credential using a host

358
00:15:13,540 --> 00:15:16,019
URL username and password and then

359
00:15:16,019 --> 00:15:19,139
that's it you can subscribe and publish

360
00:15:19,139 --> 00:15:23,079
so you subscribe to a topic and then any

361
00:15:23,079 --> 00:15:26,110
time and another application publishes a

362
00:15:26,110 --> 00:15:30,550
message on that topic the the

363
00:15:30,550 --> 00:15:31,870
subscribing application is going to

364
00:15:31,870 --> 00:15:35,500
receive it and in 25 minutes I don't

365
00:15:35,500 --> 00:15:36,250
have a

366
00:15:36,250 --> 00:15:38,470
a lot of time to dive into why this is a

367
00:15:38,470 --> 00:15:40,290
really good way to build applications

368
00:15:40,290 --> 00:15:43,660
but if you google solace in topic

369
00:15:43,660 --> 00:15:45,850
hierarchy best practices you'll be able

370
00:15:45,850 --> 00:15:47,380
to learn a lot more and see how it

371
00:15:47,380 --> 00:15:52,600
really buys you a lot so your micro

372
00:15:52,600 --> 00:15:54,280
services are then completely decoupled

373
00:15:54,280 --> 00:15:57,490
you're able to scale out it's it's air

374
00:15:57,490 --> 00:16:00,220
handling your micro services don't have

375
00:16:00,220 --> 00:16:02,170
to think about retry logic they get to

376
00:16:02,170 --> 00:16:04,450
stay to their single purpose I mean it's

377
00:16:04,450 --> 00:16:06,280
just a really really easy way to build

378
00:16:06,280 --> 00:16:08,650
things because all you do is kind of you

379
00:16:08,650 --> 00:16:10,330
pick apart I'm jumping back to the

380
00:16:10,330 --> 00:16:13,870
architecture diagram right now you pick

381
00:16:13,870 --> 00:16:16,030
apart the problem you look at what you

382
00:16:16,030 --> 00:16:18,040
have to build and then you just assume

383
00:16:18,040 --> 00:16:19,690
that everything can talk to to

384
00:16:19,690 --> 00:16:21,310
everything else because you have an

385
00:16:21,310 --> 00:16:23,340
event broker that's doing that hard work

386
00:16:23,340 --> 00:16:27,360
so solid supports any to any protocol

387
00:16:27,360 --> 00:16:29,380
translation for loop for the the

388
00:16:29,380 --> 00:16:31,120
protocols that we support so while I

389
00:16:31,120 --> 00:16:33,160
used MQTT for all these different

390
00:16:33,160 --> 00:16:35,050
applications it didn't have to be the

391
00:16:35,050 --> 00:16:37,320
case I could have also used AMQP

392
00:16:37,320 --> 00:16:39,520
WebSockets I could have used rest if I

393
00:16:39,520 --> 00:16:41,890
needed to so when you have an event

394
00:16:41,890 --> 00:16:44,050
broker what it opens up just a ton of

395
00:16:44,050 --> 00:16:47,380
doors to just build things at an

396
00:16:47,380 --> 00:16:49,780
incredible speed compared to if you had

397
00:16:49,780 --> 00:16:52,089
to think about api's and point-to-point

398
00:16:52,089 --> 00:16:53,950
connections and then trying to scale

399
00:16:53,950 --> 00:16:56,920
that out it's a nightmare so I once you

400
00:16:56,920 --> 00:16:58,780
once you start programming and building

401
00:16:58,780 --> 00:17:00,490
things using an event broker you really

402
00:17:00,490 --> 00:17:06,730
can't go back yeah that's that's about

403
00:17:06,730 --> 00:17:09,069
it for my talk I will say I love

404
00:17:09,069 --> 00:17:10,720
JavaScript because it has open source

405
00:17:10,720 --> 00:17:13,630
libraries across the stack it's super

406
00:17:13,630 --> 00:17:15,490
easy to use I can use it for my web

407
00:17:15,490 --> 00:17:17,050
development you can get into arts

408
00:17:17,050 --> 00:17:19,089
graphics animations in turn of things

409
00:17:19,089 --> 00:17:21,699
data visualization you can seethe and

410
00:17:21,699 --> 00:17:22,900
then the more serious stuff right

411
00:17:22,900 --> 00:17:24,609
functional programming state machines

412
00:17:24,609 --> 00:17:28,209
and server-side frameworks so it's

413
00:17:28,209 --> 00:17:31,180
really a language that acts as a bridge

414
00:17:31,180 --> 00:17:33,190
across a stack so all your developers

415
00:17:33,190 --> 00:17:36,780
can share can teach each other you can

416
00:17:36,780 --> 00:17:40,270
it's really good in terms of a team

417
00:17:40,270 --> 00:17:43,210
dynamic but then the problem is when you

418
00:17:43,210 --> 00:17:44,530
have all these different libraries to

419
00:17:44,530 --> 00:17:46,720
choose from that's not always a good

420
00:17:46,720 --> 00:17:47,950
thing like it may be you get the

421
00:17:47,950 --> 00:17:49,779
factionalism between three

422
00:17:49,779 --> 00:17:53,109
act and maybe a view fan or in a really

423
00:17:53,109 --> 00:17:55,509
offend right but if you have an event

424
00:17:55,509 --> 00:17:58,719
broker with any to any protocol and API

425
00:17:58,719 --> 00:18:01,479
translation all you all these different

426
00:18:01,479 --> 00:18:03,489
libraries connect with each other super

427
00:18:03,489 --> 00:18:05,679
easy and then you can just keep building

428
00:18:05,679 --> 00:18:07,659
awesome things which is really what you

429
00:18:07,659 --> 00:18:10,259
want to be doing as a developer right so

430
00:18:10,259 --> 00:18:13,719
with that that's about the end of my

431
00:18:13,719 --> 00:18:17,259
talk if you scan this link you'd be able

432
00:18:17,259 --> 00:18:19,479
to sign up for a solace cloud account

433
00:18:19,479 --> 00:18:21,340
which will give you access to a fully

434
00:18:21,340 --> 00:18:24,009
featured event broker which will help

435
00:18:24,009 --> 00:18:25,509
you build the things that I showed and

436
00:18:25,509 --> 00:18:28,149
connecting to it using em TTT I'm gonna

437
00:18:28,149 --> 00:18:30,549
quickly play this video so if you looked

438
00:18:30,549 --> 00:18:33,879
at the MT TT client config you saw that

439
00:18:33,879 --> 00:18:35,589
there is a host URL so I'm gonna show

440
00:18:35,589 --> 00:18:37,239
you from scratch I'm spinning up a

441
00:18:37,239 --> 00:18:38,889
service and I'm gonna show you how to

442
00:18:38,889 --> 00:18:43,479
reach that that URL I think so I select

443
00:18:43,479 --> 00:18:47,070
a region I'm gonna enter my service name

444
00:18:47,070 --> 00:18:55,119
and all the talks example and this is an

445
00:18:55,119 --> 00:18:56,859
entirely free tier by the way no credit

446
00:18:56,859 --> 00:19:00,039
card required so great my service is up

447
00:19:00,039 --> 00:19:06,489
and then if I go to the connect tab you

448
00:19:06,489 --> 00:19:08,889
can see there so you get all the

449
00:19:08,889 --> 00:19:11,019
connection details pre-populated copy

450
00:19:11,019 --> 00:19:13,389
paste it into your your mqtt client and

451
00:19:13,389 --> 00:19:17,699
you're off in in off to the races

452
00:19:19,649 --> 00:19:22,330
we've that up for two seconds if you're

453
00:19:22,330 --> 00:19:23,679
having a hard time scanning it that's

454
00:19:23,679 --> 00:19:25,359
the link if you want to plot your phone

455
00:19:25,359 --> 00:19:28,359
and scan it and then also we have a

456
00:19:28,359 --> 00:19:29,859
developer site for all things

457
00:19:29,859 --> 00:19:32,169
event-driven architecture we have

458
00:19:32,169 --> 00:19:35,919
JavaScript examples messaging basics if

459
00:19:35,919 --> 00:19:39,339
you want more of an in-depth materials

460
00:19:39,339 --> 00:19:43,629
around around that solace and more it's

461
00:19:43,629 --> 00:19:46,179
a good first stop for developers you can

462
00:19:46,179 --> 00:19:50,879
scan that or Google solace developers

463
00:19:50,879 --> 00:19:53,289
I've included some some additional

464
00:19:53,289 --> 00:19:55,479
resources if I do get to share these out

465
00:19:55,479 --> 00:19:57,729
I will probably share this deck out on

466
00:19:57,729 --> 00:19:59,229
my Twitter and you can see my handle

467
00:19:59,229 --> 00:20:02,000
there Andrew underscored bites

468
00:20:02,000 --> 00:20:04,350
and with that I'll open up for Scott

469
00:20:04,350 --> 00:20:05,669
sure your eyes some questions

470
00:20:05,669 --> 00:20:08,429
well thanks Andrew appreciate that I've

471
00:20:08,429 --> 00:20:10,590
got a couple of questions here I'll read

472
00:20:10,590 --> 00:20:13,919
them out what the first question is

473
00:20:13,919 --> 00:20:17,419
where can I learn more about

474
00:20:17,419 --> 00:20:21,539
event-driven architecture I would say

475
00:20:21,539 --> 00:20:26,789
the solace developer website is best you

476
00:20:26,789 --> 00:20:31,980
can see even under here yeah use cases

477
00:20:31,980 --> 00:20:34,799
what is pub/sub resources so it's it's

478
00:20:34,799 --> 00:20:36,510
not just about our product we really

479
00:20:36,510 --> 00:20:38,250
talk about event-driven architecture in

480
00:20:38,250 --> 00:20:41,159
general we give you a very wide overview

481
00:20:41,159 --> 00:20:45,269
of messaging basics what a topic is from

482
00:20:45,269 --> 00:20:46,919
from the very start so I would start I

483
00:20:46,919 --> 00:20:48,529
would start with this website for sure

484
00:20:48,529 --> 00:20:52,529
ok the next question here is what what

485
00:20:52,529 --> 00:20:55,799
alternatives did you have other than X

486
00:20:55,799 --> 00:20:58,320
state to manage the state of your

487
00:20:58,320 --> 00:21:02,450
application that's a good question I

488
00:21:02,450 --> 00:21:05,399
could have just used local variables in

489
00:21:05,399 --> 00:21:07,200
a bunch of guards and conditionals right

490
00:21:07,200 --> 00:21:09,059
that's how a lot of people would have

491
00:21:09,059 --> 00:21:12,210
built it but recently I've committed to

492
00:21:12,210 --> 00:21:14,580
learning state machines and trying to

493
00:21:14,580 --> 00:21:17,789
understand I or just get better at them

494
00:21:17,789 --> 00:21:19,740
and once once you get familiar with the

495
00:21:19,740 --> 00:21:22,380
the API that it exposes in the different

496
00:21:22,380 --> 00:21:24,750
parts of a state machine it's pretty

497
00:21:24,750 --> 00:21:26,399
much the same as just using local

498
00:21:26,399 --> 00:21:29,279
variables and conditionals and guards

499
00:21:29,279 --> 00:21:32,610
and that kind of stuff the next question

500
00:21:32,610 --> 00:21:34,679
here is more related to the same topic

501
00:21:34,679 --> 00:21:38,610
of state you used state X would you

502
00:21:38,610 --> 00:21:43,260
recommend against for example view X if

503
00:21:43,260 --> 00:21:46,799
you use view because state X works for

504
00:21:46,799 --> 00:21:49,529
all frameworks that's right and I would

505
00:21:49,529 --> 00:21:53,610
I would say stick to things that you can

506
00:21:53,610 --> 00:21:56,970
use across your stack why would you you

507
00:21:56,970 --> 00:22:00,240
don't want to be locked in to a single

508
00:22:00,240 --> 00:22:03,000
framework just like you don't want to be

509
00:22:03,000 --> 00:22:05,460
locked into proprietary technology so

510
00:22:05,460 --> 00:22:07,019
you want to keep everything open you

511
00:22:07,019 --> 00:22:08,580
want to use open protocols you want to

512
00:22:08,580 --> 00:22:10,710
use libraries that you can share across

513
00:22:10,710 --> 00:22:12,690
the different applications in your

514
00:22:12,690 --> 00:22:15,420
system whenever possible and

515
00:22:15,420 --> 00:22:16,710
is possible here so I would recommend

516
00:22:16,710 --> 00:22:22,500
using AK State very good I don't see any

517
00:22:22,500 --> 00:22:24,900
more questions at this point let's just

518
00:22:24,900 --> 00:22:27,690
give it about a second or two to see if

519
00:22:27,690 --> 00:22:29,730
anything else pops up or if anyone has a

520
00:22:29,730 --> 00:22:32,720
follow-up question

521
00:22:43,860 --> 00:22:46,500
nope I don't see anything so thank you

522
00:22:46,500 --> 00:22:48,720
so much for your time appreciated Cheers

523
00:22:48,720 --> 00:22:51,930
everyone's safe stay help me

524
00:22:51,930 --> 00:22:53,370
we're running into a break at this point

525
00:22:53,370 --> 00:22:55,860
so we'll continue right after the break

526
00:22:55,860 --> 00:22:57,979
and

