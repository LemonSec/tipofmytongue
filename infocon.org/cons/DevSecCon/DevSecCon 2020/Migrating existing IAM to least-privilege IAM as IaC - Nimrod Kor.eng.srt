1
00:00:00,000 --> 00:00:03,210
please to present our next ger a Nimrod

2
00:00:03,210 --> 00:00:05,549
Corps who is going to be talking to us

3
00:00:05,549 --> 00:00:10,559
about migrating existing I am to lease

4
00:00:10,559 --> 00:00:14,639
privilege I am as an IAC so I will leave

5
00:00:14,639 --> 00:00:18,090
it to you to take away did you have your

6
00:00:18,090 --> 00:00:20,130
presentation and ready to rock and roll

7
00:00:20,130 --> 00:00:23,400
or are you just speaking I do I'm ready

8
00:00:23,400 --> 00:00:26,519
thank you very much good all right yep

9
00:00:26,519 --> 00:00:29,070
all right so hello everyone I'm really

10
00:00:29,070 --> 00:00:31,050
happy to be here I hope everybody is

11
00:00:31,050 --> 00:00:33,270
saying safe during these crazy crawler

12
00:00:33,270 --> 00:00:36,780
times I mean rather I'll be talking

13
00:00:36,780 --> 00:00:39,570
about how you can use open source and

14
00:00:39,570 --> 00:00:42,960
automations to help you least privileged

15
00:00:42,960 --> 00:00:46,020
your current existing areas I am and how

16
00:00:46,020 --> 00:00:51,000
you can simplify using these tools so a

17
00:00:51,000 --> 00:00:52,829
little bit about myself I'm a solution

18
00:00:52,829 --> 00:00:55,199
architect at bridge crew rich who is the

19
00:00:55,199 --> 00:00:56,910
cloud security startup found out about a

20
00:00:56,910 --> 00:00:59,219
year ago with a mission to make cloud

21
00:00:59,219 --> 00:01:01,620
security simple I can talk about it a

22
00:01:01,620 --> 00:01:04,309
lot but let's leave it for another talk

23
00:01:04,309 --> 00:01:06,570
generally I've been working for a couple

24
00:01:06,570 --> 00:01:07,920
of years now on AWS

25
00:01:07,920 --> 00:01:09,780
I love open source I'm an active

26
00:01:09,780 --> 00:01:12,659
contributor for a few libraries mainly

27
00:01:12,659 --> 00:01:15,450
around AWS and terraform and I'm also

28
00:01:15,450 --> 00:01:17,250
the author of air I am which is a new

29
00:01:17,250 --> 00:01:20,369
open source I hope you will all be a fan

30
00:01:20,369 --> 00:01:22,619
of by the end of this talk but let's

31
00:01:22,619 --> 00:01:24,689
take it slowly let's start talking about

32
00:01:24,689 --> 00:01:31,710
I am so I am or AWS I am is the service

33
00:01:31,710 --> 00:01:35,390
AWS gives for you to manage all of the

34
00:01:35,390 --> 00:01:38,579
privileges in your account that includes

35
00:01:38,579 --> 00:01:41,400
what all of your users and servers can

36
00:01:41,400 --> 00:01:43,920
and cannot do to put it in simpler terms

37
00:01:43,920 --> 00:01:49,470
but you have the AWS aside to ask more

38
00:01:49,470 --> 00:01:52,590
questions about it so I like to view I

39
00:01:52,590 --> 00:01:56,520
am as kind of a root system it allows in

40
00:01:56,520 --> 00:01:59,700
its essence access to things be servers

41
00:01:59,700 --> 00:02:03,570
API is actions and so forth generally

42
00:02:03,570 --> 00:02:06,119
when you start in the cloud you usually

43
00:02:06,119 --> 00:02:08,250
start out small with a simple set up

44
00:02:08,250 --> 00:02:11,910
maybe you deploy an ec2 instance you

45
00:02:11,910 --> 00:02:13,400
have it with the public

46
00:02:13,400 --> 00:02:16,069
and you let it serve some request from

47
00:02:16,069 --> 00:02:20,209
your app the reason or the big advantage

48
00:02:20,209 --> 00:02:23,390
we all use the cloud is that is the fact

49
00:02:23,390 --> 00:02:25,010
that the cloud allows us to scale and

50
00:02:25,010 --> 00:02:27,530
grow without the overhead of hardware

51
00:02:27,530 --> 00:02:32,510
and servers and all of that stuff so it

52
00:02:32,510 --> 00:02:35,510
is very easy to see that when the

53
00:02:35,510 --> 00:02:38,360
instance starts getting scaled out you

54
00:02:38,360 --> 00:02:40,579
can simply maybe add a little balancer

55
00:02:40,579 --> 00:02:43,450
put an auto scaling group create a more

56
00:02:43,450 --> 00:02:46,280
robust infrastructure but that will

57
00:02:46,280 --> 00:02:48,140
require more than just one or tweak

58
00:02:48,140 --> 00:02:50,510
users and on a c2 instance right

59
00:02:50,510 --> 00:02:53,180
it will require a set of rules a few

60
00:02:53,180 --> 00:02:56,510
users maybe different privileges for

61
00:02:56,510 --> 00:02:58,310
different users someone only have access

62
00:02:58,310 --> 00:03:01,220
to the code that the instance is run

63
00:03:01,220 --> 00:03:03,560
some will need access to manage the auto

64
00:03:03,560 --> 00:03:05,569
scaling and the load balancer and so

65
00:03:05,569 --> 00:03:08,390
forth if we take it a few months or even

66
00:03:08,390 --> 00:03:12,730
years forward we'll have a lot a lot of

67
00:03:12,730 --> 00:03:15,650
extra endpoints and resources we would

68
00:03:15,650 --> 00:03:17,569
have probably grown so we have a lot of

69
00:03:17,569 --> 00:03:19,970
users and roles you might have a

70
00:03:19,970 --> 00:03:22,579
database system you might want to have

71
00:03:22,579 --> 00:03:25,190
more micro services that these instances

72
00:03:25,190 --> 00:03:28,569
talk to and this distributed system

73
00:03:28,569 --> 00:03:31,400
requires a lot of roles a lot of users

74
00:03:31,400 --> 00:03:34,040
all having different access sometimes to

75
00:03:34,040 --> 00:03:36,519
the same resources with different levels

76
00:03:36,519 --> 00:03:39,410
sometimes different resources and this

77
00:03:39,410 --> 00:03:42,680
creates a network that is very hard to

78
00:03:42,680 --> 00:03:48,199
control and see so since this is a

79
00:03:48,199 --> 00:03:51,079
security talk the main question that

80
00:03:51,079 --> 00:03:54,709
arises from I am is who has access to

81
00:03:54,709 --> 00:03:58,220
what right if this service allows giving

82
00:03:58,220 --> 00:04:01,400
access and revoking access the only

83
00:04:01,400 --> 00:04:03,379
answer I want to get from it is who has

84
00:04:03,379 --> 00:04:06,230
access to what let's turn on with a

85
00:04:06,230 --> 00:04:09,859
simple example the question who has

86
00:04:09,859 --> 00:04:11,329
admin access to the account is a

87
00:04:11,329 --> 00:04:15,199
question almost everyone who wants to

88
00:04:15,199 --> 00:04:16,459
look at the privileges in the account

89
00:04:16,459 --> 00:04:18,978
asks so the natural answer would be to

90
00:04:18,978 --> 00:04:20,839
go to the administrator access policy

91
00:04:20,839 --> 00:04:23,479
and I am and see who uses that policy

92
00:04:23,479 --> 00:04:26,150
who has a policy attached so for this

93
00:04:26,150 --> 00:04:26,750
example

94
00:04:26,750 --> 00:04:28,940
count that I used a few weeks ago but

95
00:04:28,940 --> 00:04:30,410
you can see that the administrator

96
00:04:30,410 --> 00:04:32,720
access policy is attached to a group and

97
00:04:32,720 --> 00:04:35,690
to two roles that doesn't completely

98
00:04:35,690 --> 00:04:38,300
answer our question because whichever

99
00:04:38,300 --> 00:04:40,460
user is a member of that group will also

100
00:04:40,460 --> 00:04:42,650
be an admin so you have to go into that

101
00:04:42,650 --> 00:04:44,720
group and list all the users that are

102
00:04:44,720 --> 00:04:46,700
part of that group great so we have

103
00:04:46,700 --> 00:04:48,740
eleven users in the group or admin and

104
00:04:48,740 --> 00:04:52,370
two roles so now I believe I know who

105
00:04:52,370 --> 00:04:54,770
all the admin users in the account are

106
00:04:54,770 --> 00:04:57,230
right well almost

107
00:04:57,230 --> 00:05:00,400
see I am allows you to write custom

108
00:05:00,400 --> 00:05:03,440
policies in JSON syntax just like this

109
00:05:03,440 --> 00:05:05,960
one this is an example for a policy

110
00:05:05,960 --> 00:05:07,880
that's been that I found on a specific

111
00:05:07,880 --> 00:05:10,100
role in the environment and you can see

112
00:05:10,100 --> 00:05:12,260
that it allows all actions and all

113
00:05:12,260 --> 00:05:15,860
resources that's what I call admin this

114
00:05:15,860 --> 00:05:18,800
policy will not make this the the role

115
00:05:18,800 --> 00:05:21,860
or the user that has it be flagged as

116
00:05:21,860 --> 00:05:24,590
admin anywhere in AWS so you have these

117
00:05:24,590 --> 00:05:26,660
rogue entities which you will have to

118
00:05:26,660 --> 00:05:28,700
find to know all the admins in the

119
00:05:28,700 --> 00:05:32,570
account arm so this example shows us two

120
00:05:32,570 --> 00:05:35,720
different recurring issues in I am first

121
00:05:35,720 --> 00:05:38,240
is that I am is very easy to be bypassed

122
00:05:38,240 --> 00:05:41,440
you can have a user have its own

123
00:05:41,440 --> 00:05:44,900
policies and it can be limited but if

124
00:05:44,900 --> 00:05:47,390
you just attach another policy or add it

125
00:05:47,390 --> 00:05:51,470
to a group or replace a simple condition

126
00:05:51,470 --> 00:05:54,470
with the store you might make that

127
00:05:54,470 --> 00:05:57,380
entity at that moment over privileged

128
00:05:57,380 --> 00:06:00,710
without knowing the second thing is that

129
00:06:00,710 --> 00:06:03,500
I am supports complex relationships so

130
00:06:03,500 --> 00:06:05,330
let's say you have a user of course the

131
00:06:05,330 --> 00:06:07,130
user can have the privileges directly

132
00:06:07,130 --> 00:06:09,440
attached to him but as we've just seen

133
00:06:09,440 --> 00:06:11,360
it can also be a member of group and get

134
00:06:11,360 --> 00:06:12,800
the privileges that are assigned to that

135
00:06:12,800 --> 00:06:16,040
group relevant for him but that's not

136
00:06:16,040 --> 00:06:18,380
all a user can also assume a role which

137
00:06:18,380 --> 00:06:20,060
has its own set of policies and that

138
00:06:20,060 --> 00:06:22,130
role can assume a role and have that set

139
00:06:22,130 --> 00:06:24,530
of policies and privileges so A to D

140
00:06:24,530 --> 00:06:26,479
complex to understand what are the exact

141
00:06:26,479 --> 00:06:28,370
period bearers of each user and broening

142
00:06:28,370 --> 00:06:30,880
the account

143
00:06:31,340 --> 00:06:34,700
another issue that is hard to solve is

144
00:06:34,700 --> 00:06:38,240
the enforcement of patterns in Aiea for

145
00:06:38,240 --> 00:06:41,330
example let's say I have 8 employees who

146
00:06:41,330 --> 00:06:43,580
are working on my AWS account and I made

147
00:06:43,580 --> 00:06:46,070
sure one day that all of them have FFA

148
00:06:46,070 --> 00:06:48,020
enabled because they use console for

149
00:06:48,020 --> 00:06:51,530
access using their passwords and then we

150
00:06:51,530 --> 00:06:54,440
brought onto new employees and to enable

151
00:06:54,440 --> 00:06:56,600
MFA you have to do it yourself so until

152
00:06:56,600 --> 00:06:58,940
they said it they don't have an affair

153
00:06:58,940 --> 00:07:01,010
enabled and I'm not getting notified

154
00:07:01,010 --> 00:07:03,170
that they don't have an MFA enabled I'll

155
00:07:03,170 --> 00:07:05,950
have to find out about that by myself

156
00:07:05,950 --> 00:07:08,060
another problem is that it's hard to

157
00:07:08,060 --> 00:07:10,940
trace and verify usage just a pheasant I

158
00:07:10,940 --> 00:07:12,860
gave someone a specific set of

159
00:07:12,860 --> 00:07:14,630
privileges doesn't mean he actually

160
00:07:14,630 --> 00:07:17,360
needs them today and he actually uses

161
00:07:17,360 --> 00:07:20,690
them let's see in a simple example that

162
00:07:20,690 --> 00:07:23,090
hits these two problems on the on the

163
00:07:23,090 --> 00:07:27,380
nail so we had this list of 11 admins

164
00:07:27,380 --> 00:07:29,060
right these are the 11

165
00:07:29,060 --> 00:07:30,560
Esmond from the group we just saw before

166
00:07:30,560 --> 00:07:33,110
and if you look at their access key age

167
00:07:33,110 --> 00:07:36,080
will notice that 10 out of the 11 users

168
00:07:36,080 --> 00:07:39,080
have all the access keys access fees

169
00:07:39,080 --> 00:07:40,880
should be up to 90 days old that's why

170
00:07:40,880 --> 00:07:42,710
the one with the 70 days has a green

171
00:07:42,710 --> 00:07:45,050
check box on it all the rest are all

172
00:07:45,050 --> 00:07:46,310
that's easy that should be at least

173
00:07:46,310 --> 00:07:49,730
rotated if not deleted but that's not

174
00:07:49,730 --> 00:07:51,440
everything we can also note that there

175
00:07:51,440 --> 00:07:54,290
are 4 users here admin users who have

176
00:07:54,290 --> 00:07:56,750
password and do not have MFA enable so

177
00:07:56,750 --> 00:07:58,490
all four of these are prone to

178
00:07:58,490 --> 00:08:00,590
brute-force attacks it will be to

179
00:08:00,590 --> 00:08:01,490
account takeover

180
00:08:01,490 --> 00:08:05,390
they are admins in the account and last

181
00:08:05,390 --> 00:08:07,220
but not least we also have to add means

182
00:08:07,220 --> 00:08:09,200
here who have now who have not used

183
00:08:09,200 --> 00:08:11,870
their credentials for over 200 days bear

184
00:08:11,870 --> 00:08:14,090
in mind that they have static AWS

185
00:08:14,090 --> 00:08:17,590
credentials available and active and

186
00:08:17,590 --> 00:08:22,150
they haven't used it for over 200 days

187
00:08:22,150 --> 00:08:25,490
ok so we found a bunch of problems we

188
00:08:25,490 --> 00:08:28,220
found a bunch of things that we need to

189
00:08:28,220 --> 00:08:33,140
take care of how can we solve it so here

190
00:08:33,140 --> 00:08:35,210
is a simple manual kind of process that

191
00:08:35,210 --> 00:08:39,100
can help you resolve all these problems

192
00:08:39,100 --> 00:08:42,080
first the first phase would be to get

193
00:08:42,080 --> 00:08:44,240
all the configurations get all the usage

194
00:08:44,240 --> 00:08:44,889
and

195
00:08:44,889 --> 00:08:48,189
the entities so you know who uses who

196
00:08:48,189 --> 00:08:50,980
has access to what and also who uses

197
00:08:50,980 --> 00:08:53,980
what then the first question is very

198
00:08:53,980 --> 00:08:55,929
easy whether the entity isn't used or

199
00:08:55,929 --> 00:08:59,079
not the next question we want to answer

200
00:08:59,079 --> 00:09:01,509
the next task we need to accomplish is

201
00:09:01,509 --> 00:09:03,459
to analyze which privileges are both

202
00:09:03,459 --> 00:09:06,489
given and used let's say a user is being

203
00:09:06,489 --> 00:09:08,859
used does he need all of the privileges

204
00:09:08,859 --> 00:09:12,899
that he has or can that be scaled down

205
00:09:12,899 --> 00:09:15,759
next thing we need to do is create a

206
00:09:15,759 --> 00:09:17,949
recommendation that means not just well

207
00:09:17,949 --> 00:09:21,040
this user doesn't need access to VPC it

208
00:09:21,040 --> 00:09:24,100
means we need to group the users who

209
00:09:24,100 --> 00:09:26,019
need the same level of access

210
00:09:26,019 --> 00:09:30,489
maybe modifying policies in our

211
00:09:30,489 --> 00:09:32,559
fine-grained level and not just remove

212
00:09:32,559 --> 00:09:35,470
the entire policy and then the final

213
00:09:35,470 --> 00:09:37,359
thing is also of course to get approval

214
00:09:37,359 --> 00:09:39,249
from the relevant stakeholders you don't

215
00:09:39,249 --> 00:09:41,799
want to miss other people's stuff just

216
00:09:41,799 --> 00:09:43,689
because you they aren't using it right

217
00:09:43,689 --> 00:09:44,169
now

218
00:09:44,169 --> 00:09:47,699
and finally implementing the changes so

219
00:09:47,699 --> 00:09:50,919
how long will that manual process take

220
00:09:50,919 --> 00:09:55,139
you well these are approximations that I

221
00:09:55,139 --> 00:09:58,629
from my experience of running this few

222
00:09:58,629 --> 00:10:02,169
times so collecting all the data and

223
00:10:02,169 --> 00:10:04,829
building it in a good Google sheet or

224
00:10:04,829 --> 00:10:07,720
Excel or whichever tool you like will

225
00:10:07,720 --> 00:10:09,339
take you about an hour because you need

226
00:10:09,339 --> 00:10:12,429
to make a few API calls collect the data

227
00:10:12,429 --> 00:10:15,669
organize it and so forth you also then

228
00:10:15,669 --> 00:10:17,799
need to analyze which privileges are

229
00:10:17,799 --> 00:10:20,559
both given and used you need to go to

230
00:10:20,559 --> 00:10:22,329
the console you use the assets advisor

231
00:10:22,329 --> 00:10:24,549
you need to go through every policy and

232
00:10:24,549 --> 00:10:27,429
statement and see what are the services

233
00:10:27,429 --> 00:10:28,929
and the privileges that that are being

234
00:10:28,929 --> 00:10:31,619
given by every statement in the policy

235
00:10:31,619 --> 00:10:33,939
then it takes a little while to create

236
00:10:33,939 --> 00:10:35,649
the actual recommendation if you build

237
00:10:35,649 --> 00:10:37,329
everything up to this point

238
00:10:37,329 --> 00:10:41,439
well the longest part I'd say was to get

239
00:10:41,439 --> 00:10:43,019
approvals from relevant stakeholders

240
00:10:43,019 --> 00:10:47,109
this means finding holes in the calendar

241
00:10:47,109 --> 00:10:49,389
for the relevant people usually they're

242
00:10:49,389 --> 00:10:52,059
very busy because they are the

243
00:10:52,059 --> 00:10:54,759
bottleneck and finally after you have

244
00:10:54,759 --> 00:10:56,860
their approval the action changes will

245
00:10:56,860 --> 00:10:58,270
take you well that depends

246
00:10:58,270 --> 00:11:00,070
what you use but if you use the console

247
00:11:00,070 --> 00:11:01,870
it will take you about an hour because

248
00:11:01,870 --> 00:11:03,550
for example you can't delete multiple

249
00:11:03,550 --> 00:11:06,150
rolls at once or multiple users at once

250
00:11:06,150 --> 00:11:09,280
if you use the CLI you can delete

251
00:11:09,280 --> 00:11:10,960
multiple rolls but you have to make sure

252
00:11:10,960 --> 00:11:12,310
all the policies are they attached

253
00:11:12,310 --> 00:11:14,320
beforehand you'll have to go bow and

254
00:11:14,320 --> 00:11:16,420
roll off the Roll and detach all of the

255
00:11:16,420 --> 00:11:18,610
policies so you can delete them at once

256
00:11:18,610 --> 00:11:22,870
so it takes a long time and after you've

257
00:11:22,870 --> 00:11:26,020
done this once or twice or four times

258
00:11:26,020 --> 00:11:28,840
like me or even more you understand that

259
00:11:28,840 --> 00:11:31,780
things that are happening again and

260
00:11:31,780 --> 00:11:33,670
again there's no reason to solve them as

261
00:11:33,670 --> 00:11:35,800
if they're it's the first time we meet

262
00:11:35,800 --> 00:11:40,060
them so today I'm really happy to

263
00:11:40,060 --> 00:11:42,790
announce I am it's a new open-source

264
00:11:42,790 --> 00:11:45,850
tool that we launched we as a bridge

265
00:11:45,850 --> 00:11:47,710
crew it's completely open-source you can

266
00:11:47,710 --> 00:11:49,990
find it in the make over there let me

267
00:11:49,990 --> 00:11:55,630
hop over to my browser and you can see

268
00:11:55,630 --> 00:11:58,330
it's a Python tool it's completely

269
00:11:58,330 --> 00:12:00,430
open-source feel free to contribute to

270
00:12:00,430 --> 00:12:03,580
use it to test it we'll walk through it

271
00:12:03,580 --> 00:12:06,430
and see how it helps us in this workflow

272
00:12:06,430 --> 00:12:11,530
to resolve our issues so let's start

273
00:12:11,530 --> 00:12:14,920
with the what we want to achieve using

274
00:12:14,920 --> 00:12:18,190
the automated cleanup so first of all

275
00:12:18,190 --> 00:12:20,200
want to identify the unused entities I

276
00:12:20,200 --> 00:12:21,730
think that's the easiest and most

277
00:12:21,730 --> 00:12:23,920
productive way to start with your

278
00:12:23,920 --> 00:12:26,890
cleanup and right-sizing by entities I

279
00:12:26,890 --> 00:12:29,230
don't mean just unused users and roles I

280
00:12:29,230 --> 00:12:31,450
also mean finding policies that are

281
00:12:31,450 --> 00:12:33,870
attached to users or roles but their

282
00:12:33,870 --> 00:12:38,410
privileges are not being used secondly

283
00:12:38,410 --> 00:12:40,900
we want to detect drifts that means

284
00:12:40,900 --> 00:12:43,060
changes in your environment policies

285
00:12:43,060 --> 00:12:45,370
that were edited policies that were

286
00:12:45,370 --> 00:12:47,770
added and also enable rollback so let's

287
00:12:47,770 --> 00:12:49,660
say you don't like to change or you

288
00:12:49,660 --> 00:12:51,100
don't like the change that you made

289
00:12:51,100 --> 00:12:54,250
afterwards you want to enable a simple

290
00:12:54,250 --> 00:12:55,720
and easy rollback that will make

291
00:12:55,720 --> 00:12:59,020
everything work again you want to be

292
00:12:59,020 --> 00:13:01,180
able to handle scales of over a thousand

293
00:13:01,180 --> 00:13:04,240
entities and I can guarantee you that in

294
00:13:04,240 --> 00:13:06,370
most environments if you include all the

295
00:13:06,370 --> 00:13:07,990
policy attachment and all the user

296
00:13:07,990 --> 00:13:10,360
memberships all of the roles you'll

297
00:13:10,360 --> 00:13:11,820
reach that threshold

298
00:13:11,820 --> 00:13:14,130
very easily and it's hard to manage that

299
00:13:14,130 --> 00:13:18,930
using the console or the API you want to

300
00:13:18,930 --> 00:13:20,700
support stakeholder approval you want to

301
00:13:20,700 --> 00:13:23,210
be able to talk to them not using email

302
00:13:23,210 --> 00:13:26,490
or slack or meetings you want to be able

303
00:13:26,490 --> 00:13:29,100
to do it natively in tools that they use

304
00:13:29,100 --> 00:13:31,740
and finally if you want to reduce the

305
00:13:31,740 --> 00:13:34,770
time to right-size the previous manual

306
00:13:34,770 --> 00:13:37,710
cleanup timeline that I showed you is

307
00:13:37,710 --> 00:13:42,150
way too long so what does this to do

308
00:13:42,150 --> 00:13:44,550
what does air I am do air I am pulls

309
00:13:44,550 --> 00:13:48,270
data from AWS I am api's and AWS access

310
00:13:48,270 --> 00:13:52,320
advisor ApS analyzes them and produces

311
00:13:52,320 --> 00:13:55,650
in the end turn phone code that you can

312
00:13:55,650 --> 00:13:59,610
use to deploy and remove and edit and

313
00:13:59,610 --> 00:14:02,810
update all of your I am infrastructure

314
00:14:02,810 --> 00:14:05,880
what the what are the people resist is

315
00:14:05,880 --> 00:14:09,360
to you needs so it needs read access to

316
00:14:09,360 --> 00:14:12,570
I am and that's it it does not do any

317
00:14:12,570 --> 00:14:14,880
modifications by itself to run the

318
00:14:14,880 --> 00:14:16,590
modifications you need to apply the

319
00:14:16,590 --> 00:14:18,510
terraform and that it will be used using

320
00:14:18,510 --> 00:14:20,820
whichever credentials you choose but the

321
00:14:20,820 --> 00:14:22,530
tool does not do any modification to

322
00:14:22,530 --> 00:14:28,950
your account by itself great so let's

323
00:14:28,950 --> 00:14:31,170
dive into the tool the first command is

324
00:14:31,170 --> 00:14:33,420
called find unused and what it does is

325
00:14:33,420 --> 00:14:35,670
collects all the entities from I am and

326
00:14:35,670 --> 00:14:37,980
reaches them with usage and checks

327
00:14:37,980 --> 00:14:40,080
whether the entity is in use or not so

328
00:14:40,080 --> 00:14:42,210
it's the first part of our workflow it's

329
00:14:42,210 --> 00:14:46,860
very easy to codify but it's hard to do

330
00:14:46,860 --> 00:14:49,560
it when you do it manually so let's do a

331
00:14:49,560 --> 00:14:52,490
quick demo what do you think about that

332
00:14:52,490 --> 00:14:55,830
watch the terminal will hit err I am

333
00:14:55,830 --> 00:15:00,870
fine unused so I already run it once so

334
00:15:00,870 --> 00:15:03,630
I have data locally and see it says it's

335
00:15:03,630 --> 00:15:09,120
so here you see it says we using local

336
00:15:09,120 --> 00:15:10,890
data that's because I ran it locally

337
00:15:10,890 --> 00:15:12,840
otherwise we'll have a few minutes of it

338
00:15:12,840 --> 00:15:14,640
collecting all the data from all the

339
00:15:14,640 --> 00:15:17,220
api's and then it starts telling me what

340
00:15:17,220 --> 00:15:19,200
it found so you'll see we have four

341
00:15:19,200 --> 00:15:22,680
users in this account who are unused we

342
00:15:22,680 --> 00:15:24,920
have

343
00:15:26,320 --> 00:15:29,029
we have no unused access skills which is

344
00:15:29,029 --> 00:15:30,800
good we have no unused console.log in

345
00:15:30,800 --> 00:15:33,050
profiles we also have three roles which

346
00:15:33,050 --> 00:15:35,810
are unused to groups which are redundant

347
00:15:35,810 --> 00:15:38,060
one policy and even one policy

348
00:15:38,060 --> 00:15:40,370
attachment which is unused all of these

349
00:15:40,370 --> 00:15:42,680
should be can be deleted without

350
00:15:42,680 --> 00:15:47,980
affecting your AWS environment at all so

351
00:15:47,980 --> 00:15:51,170
we found what what the unused next up is

352
00:15:51,170 --> 00:15:54,110
to create the permissions baseline so

353
00:15:54,110 --> 00:15:56,060
the next command I'd want to show you is

354
00:15:56,060 --> 00:15:58,250
called recommend groups what it does is

355
00:15:58,250 --> 00:16:00,980
take all of your users filter out all

356
00:16:00,980 --> 00:16:04,339
the unused of course and then split the

357
00:16:04,339 --> 00:16:07,490
users into groups according to logic the

358
00:16:07,490 --> 00:16:10,160
current logic today splits it into three

359
00:16:10,160 --> 00:16:12,380
groups the admin group which are the

360
00:16:12,380 --> 00:16:16,399
active admin users and roles the second

361
00:16:16,399 --> 00:16:19,190
group is student only users so the

362
00:16:19,190 --> 00:16:21,740
active admin users the second group is

363
00:16:21,740 --> 00:16:23,450
called power users it's all the users

364
00:16:23,450 --> 00:16:26,000
who have any right access to the account

365
00:16:26,000 --> 00:16:28,670
and the third group is read-only so that

366
00:16:28,670 --> 00:16:32,540
group will have only read access to any

367
00:16:32,540 --> 00:16:37,339
type of service that you use in AWS so

368
00:16:37,339 --> 00:16:39,680
that command will create the permissions

369
00:16:39,680 --> 00:16:42,020
basically we need it will also help us

370
00:16:42,020 --> 00:16:43,430
create a recommendation but it's not

371
00:16:43,430 --> 00:16:44,779
there yet why not

372
00:16:44,779 --> 00:16:46,940
because as you'll see in a minute the

373
00:16:46,940 --> 00:16:49,250
recommendation is not something that we

374
00:16:49,250 --> 00:16:52,580
can act on it's all outputted in CLI or

375
00:16:52,580 --> 00:16:54,380
maybe it has playbooks but it's not

376
00:16:54,380 --> 00:16:56,060
something that we can go to the relevant

377
00:16:56,060 --> 00:16:57,980
stakeholder and tell him that's the

378
00:16:57,980 --> 00:17:00,260
recommendation that's a plan so let's

379
00:17:00,260 --> 00:17:02,839
jump over to the terminal real quick and

380
00:17:02,839 --> 00:17:04,010
see it in action

381
00:17:04,010 --> 00:17:10,420
so the command err IM recommend groups

382
00:17:10,449 --> 00:17:14,959
so what it does now use the result of

383
00:17:14,959 --> 00:17:17,420
the previous command the find unused and

384
00:17:17,420 --> 00:17:20,839
outputs well we found two active users

385
00:17:20,839 --> 00:17:22,880
in the account one is an active admin

386
00:17:22,880 --> 00:17:25,550
and the other one is called s3 user one

387
00:17:25,550 --> 00:17:27,800
and requires partial write to the

388
00:17:27,800 --> 00:17:31,010
account so it's in the power users for

389
00:17:31,010 --> 00:17:32,480
this specific account we did not find

390
00:17:32,480 --> 00:17:35,890
any read-only users so that was not also

391
00:17:35,890 --> 00:17:38,480
recommended but it would be if

392
00:17:38,480 --> 00:17:44,150
were any users like that great so we're

393
00:17:44,150 --> 00:17:46,250
almost there we already have a

394
00:17:46,250 --> 00:17:49,490
recommendation now we need to build it

395
00:17:49,490 --> 00:17:51,290
into something we can talk about and not

396
00:17:51,290 --> 00:17:55,429
just wave with so the net the next and

397
00:17:55,429 --> 00:17:57,230
last command is called terraform and

398
00:17:57,230 --> 00:17:59,000
that actually creates a recommendation

399
00:17:59,000 --> 00:18:02,120
in terraform let me jump over to the

400
00:18:02,120 --> 00:18:05,030
terminal real quick so it's called air I

401
00:18:05,030 --> 00:18:08,299
am terraform and when you run it what

402
00:18:08,299 --> 00:18:10,130
will happen is it will take the results

403
00:18:10,130 --> 00:18:12,620
of the previous commands it will create

404
00:18:12,620 --> 00:18:14,419
the terraform code and start inputting

405
00:18:14,419 --> 00:18:17,270
the entities if you'll take a look right

406
00:18:17,270 --> 00:18:18,620
now you'll see that I'm getting the

407
00:18:18,620 --> 00:18:20,270
exception that the resource is already

408
00:18:20,270 --> 00:18:21,830
already managed by terraform that's

409
00:18:21,830 --> 00:18:23,960
because I ran it beforehand to save us

410
00:18:23,960 --> 00:18:27,200
waiting for 53 API calls and creations

411
00:18:27,200 --> 00:18:29,510
of terraform state files so I'll cut

412
00:18:29,510 --> 00:18:34,010
this off but let's try it without the

413
00:18:34,010 --> 00:18:37,690
import and see what it says

414
00:18:40,780 --> 00:18:42,080
great

415
00:18:42,080 --> 00:18:44,270
so now it should just create terrible

416
00:18:44,270 --> 00:18:47,059
files and as you can see it says it

417
00:18:47,059 --> 00:18:48,710
migrated the current I am set up to

418
00:18:48,710 --> 00:18:51,740
terraform it migrated 6 users for groups

419
00:18:51,740 --> 00:18:55,370
4 rolls and 18 policies to terraform i

420
00:18:55,370 --> 00:18:58,280
can specify my own custom directory but

421
00:18:58,280 --> 00:19:00,710
for now the default is called results so

422
00:19:00,710 --> 00:19:03,890
let's open results and you see that

423
00:19:03,890 --> 00:19:06,500
there are actual teraphim files for open

424
00:19:06,500 --> 00:19:08,960
one for example groups know if you can

425
00:19:08,960 --> 00:19:11,240
see that but this is the telephone

426
00:19:11,240 --> 00:19:12,890
configuration of all the rooms in the

427
00:19:12,890 --> 00:19:15,350
account including the unused including

428
00:19:15,350 --> 00:19:18,260
group attachments and so on if you're

429
00:19:18,260 --> 00:19:19,940
wondering about user memberships

430
00:19:19,940 --> 00:19:21,650
that's what are the users file but if

431
00:19:21,650 --> 00:19:23,870
you go here and search for membership

432
00:19:23,870 --> 00:19:27,200
you'll see all the memberships for

433
00:19:27,200 --> 00:19:29,450
example my user name Arad is in the

434
00:19:29,450 --> 00:19:36,400
admin and so forth cool so now we can

435
00:19:36,400 --> 00:19:40,040
create a terraform how can we talk about

436
00:19:40,040 --> 00:19:41,450
it with the relevant stakeholders how

437
00:19:41,450 --> 00:19:43,130
can we take it to the next level and

438
00:19:43,130 --> 00:19:45,799
actually get their approval or their

439
00:19:45,799 --> 00:19:48,700
change your quests and move forward

440
00:19:48,700 --> 00:19:50,900
since we are moving everything to

441
00:19:50,900 --> 00:19:52,400
infrastructure its code I

442
00:19:52,400 --> 00:19:55,940
a see you can use code now and your pcs

443
00:19:55,940 --> 00:19:58,310
of your choice I like github but

444
00:19:58,310 --> 00:20:00,920
whatever you like to create a pull

445
00:20:00,920 --> 00:20:04,010
request and start working through there

446
00:20:04,010 --> 00:20:06,140
which is a native tool for more DevOps

447
00:20:06,140 --> 00:20:07,910
and developers it's something that

448
00:20:07,910 --> 00:20:09,350
everyone can see and completely

449
00:20:09,350 --> 00:20:12,860
understand from via so I'll show you an

450
00:20:12,860 --> 00:20:16,250
example of what I did what I did is I

451
00:20:16,250 --> 00:20:19,760
created a new repository for my I am set

452
00:20:19,760 --> 00:20:23,120
up in terraform I committed the output

453
00:20:23,120 --> 00:20:25,190
of the first error from command two to

454
00:20:25,190 --> 00:20:27,770
master so now I have all the groups here

455
00:20:27,770 --> 00:20:30,220
as well

456
00:20:30,760 --> 00:20:33,710
so let's go to groups at TF you'll see

457
00:20:33,710 --> 00:20:35,810
the code that I just showed you in my

458
00:20:35,810 --> 00:20:39,470
home computer and what I'll do now is I

459
00:20:39,470 --> 00:20:41,720
run the command again but this time

460
00:20:41,720 --> 00:20:46,670
without unused so what it does now is

461
00:20:46,670 --> 00:20:48,860
filter out the unused and create new

462
00:20:48,860 --> 00:20:52,160
Terra from files in place to see it

463
00:20:52,160 --> 00:20:53,960
filtered out eleven entities from

464
00:20:53,960 --> 00:20:56,390
terraform and it finally created

465
00:20:56,390 --> 00:20:58,130
successfully two users

466
00:20:58,130 --> 00:21:00,170
two groups one roles and seventeen

467
00:21:00,170 --> 00:21:05,600
policies so let's open results again so

468
00:21:05,600 --> 00:21:07,640
you see the same files exist but they've

469
00:21:07,640 --> 00:21:10,580
edit been edited just now let's dive

470
00:21:10,580 --> 00:21:12,590
into one of them and you see that we

471
00:21:12,590 --> 00:21:14,330
only have the groups that are still

472
00:21:14,330 --> 00:21:16,730
active with the relevant policy

473
00:21:16,730 --> 00:21:18,590
attachments if you'll technically note

474
00:21:18,590 --> 00:21:20,060
that the users will see that also the

475
00:21:20,060 --> 00:21:22,670
unused users were removed and all DDA

476
00:21:22,670 --> 00:21:25,610
only the active users remain here so I

477
00:21:25,610 --> 00:21:28,340
can commit this change to a different

478
00:21:28,340 --> 00:21:31,580
branch which is what I did and now when

479
00:21:31,580 --> 00:21:33,530
I open a pull request between my branch

480
00:21:33,530 --> 00:21:35,870
and master you can actually see the

481
00:21:35,870 --> 00:21:37,760
changes that I would like to incur in

482
00:21:37,760 --> 00:21:39,320
the attack on the account I would like

483
00:21:39,320 --> 00:21:41,330
to delete it without members I would

484
00:21:41,330 --> 00:21:42,680
like to delete the group without

485
00:21:42,680 --> 00:21:45,080
policies I would have to detach these

486
00:21:45,080 --> 00:21:47,840
policies from this group and I can

487
00:21:47,840 --> 00:21:50,090
actually start talking about the

488
00:21:50,090 --> 00:21:52,430
policies directly from here with the

489
00:21:52,430 --> 00:21:55,280
relevant stakeholders so let's say the

490
00:21:55,280 --> 00:21:57,050
stakeholder doesn't want me to remove

491
00:21:57,050 --> 00:21:58,700
the organizational account access role

492
00:21:58,700 --> 00:22:02,330
you can just type it here I will copy

493
00:22:02,330 --> 00:22:04,790
this code back into this file roles

494
00:22:04,790 --> 00:22:06,140
committed and

495
00:22:06,140 --> 00:22:08,030
when everything is approved I can merge

496
00:22:08,030 --> 00:22:11,799
it to map to master so the last part is

497
00:22:11,799 --> 00:22:15,320
how do i implement the changes so there

498
00:22:15,320 --> 00:22:17,299
are many many tools in many ways to

499
00:22:17,299 --> 00:22:19,900
implement to apply the terraform changes

500
00:22:19,900 --> 00:22:24,140
see ICD pipelines and so forth so that's

501
00:22:24,140 --> 00:22:27,590
not something that we it requires high

502
00:22:27,590 --> 00:22:29,450
high level of privileges and it's

503
00:22:29,450 --> 00:22:31,070
something that everyone does already

504
00:22:31,070 --> 00:22:33,380
everyone deploys changes to their

505
00:22:33,380 --> 00:22:35,630
production so we that's not part of the

506
00:22:35,630 --> 00:22:38,330
tool the tool is only for building their

507
00:22:38,330 --> 00:22:40,160
recommendations and gathering all the

508
00:22:40,160 --> 00:22:46,580
data for that great so let's say I ran

509
00:22:46,580 --> 00:22:50,000
area and once I got all the changes I

510
00:22:50,000 --> 00:22:52,850
got it approved I ran it what now what

511
00:22:52,850 --> 00:22:54,040
do I do next

512
00:22:54,040 --> 00:22:58,210
so my recommendation to you guys is to

513
00:22:58,210 --> 00:23:01,520
Brennan run it on a regular basis why

514
00:23:01,520 --> 00:23:03,950
well it will help you identify drifts in

515
00:23:03,950 --> 00:23:06,470
existing configurations are changes in

516
00:23:06,470 --> 00:23:09,049
usage status so that the user uses a

517
00:23:09,049 --> 00:23:11,090
specific privilege but he he stops

518
00:23:11,090 --> 00:23:12,919
because he moved to a different team or

519
00:23:12,919 --> 00:23:13,910
they move to a different architecture

520
00:23:13,910 --> 00:23:16,100
the only way you would know this is to

521
00:23:16,100 --> 00:23:18,919
run this again once in a while it will

522
00:23:18,919 --> 00:23:20,090
also help you identify new

523
00:23:20,090 --> 00:23:22,010
configurations let's say someone

524
00:23:22,010 --> 00:23:24,320
modified an existing policy and made a

525
00:23:24,320 --> 00:23:26,660
mistake of replacing everything with sir

526
00:23:26,660 --> 00:23:29,030
now everything works for him you won't

527
00:23:29,030 --> 00:23:31,660
know it until you run this tool again

528
00:23:31,660 --> 00:23:34,309
that's the second thing I really

529
00:23:34,309 --> 00:23:36,110
recommend for you guys is to start using

530
00:23:36,110 --> 00:23:38,030
static analysis tools to identify bad

531
00:23:38,030 --> 00:23:41,450
practices in your inner infrastructure

532
00:23:41,450 --> 00:23:45,200
is code so let's dive a bit into that

533
00:23:45,200 --> 00:23:48,020
I'd love to recommend to over create

534
00:23:48,020 --> 00:23:50,000
open source tools for this one is Chekov

535
00:23:50,000 --> 00:23:51,950
Chekov identify the bad practices in

536
00:23:51,950 --> 00:23:54,380
terraform in general and also I am in

537
00:23:54,380 --> 00:23:56,780
terraform Jerome specifically also

538
00:23:56,780 --> 00:23:58,610
integrates with your CI CD to avoid

539
00:23:58,610 --> 00:24:00,650
general security issues in terraform

540
00:24:00,650 --> 00:24:02,240
before they are deployed to the real

541
00:24:02,240 --> 00:24:04,540
world so it's recommended

542
00:24:04,540 --> 00:24:07,880
regardless also another really cool tool

543
00:24:07,880 --> 00:24:10,520
is sales forces policy sentry policy

544
00:24:10,520 --> 00:24:13,640
century helps you create new policies

545
00:24:13,640 --> 00:24:15,530
from scratch so let's say you have a

546
00:24:15,530 --> 00:24:17,870
service and you feel that it has too

547
00:24:17,870 --> 00:24:18,800
much

548
00:24:18,800 --> 00:24:21,560
and its privileges are too wide you can

549
00:24:21,560 --> 00:24:23,900
use policy sentry to create using simple

550
00:24:23,900 --> 00:24:26,570
crew than llamo syntax the policy that

551
00:24:26,570 --> 00:24:29,990
you want copied in its output is in the

552
00:24:29,990 --> 00:24:32,840
policy JSON you just paste it in your

553
00:24:32,840 --> 00:24:34,970
role and you're set and you're good to

554
00:24:34,970 --> 00:24:37,490
go next time you run error in that

555
00:24:37,490 --> 00:24:40,100
policy will be refactored in to

556
00:24:40,100 --> 00:24:42,320
terraform and you can follow the changes

557
00:24:42,320 --> 00:24:46,970
from there I do want to call a few other

558
00:24:46,970 --> 00:24:49,660
great tools for I am right sizing and

559
00:24:49,660 --> 00:24:53,180
identify problems yeah these tools are

560
00:24:53,180 --> 00:24:55,550
good for your actual AWS environments

561
00:24:55,550 --> 00:24:57,380
and not for infrastructure it's code the

562
00:24:57,380 --> 00:24:59,150
first set of tools cloud tracker or

563
00:24:59,150 --> 00:25:02,090
Artemis repo kid they use crouch real

564
00:25:02,090 --> 00:25:04,880
data to identify specific API calls and

565
00:25:04,880 --> 00:25:06,620
specific privileges much more

566
00:25:06,620 --> 00:25:08,990
fine-grained than AWS access advisor

567
00:25:08,990 --> 00:25:11,300
used by err I am the problem is that

568
00:25:11,300 --> 00:25:13,420
cloud trail isn't a hundred percent

569
00:25:13,420 --> 00:25:15,440
doesn't have a hundred percent coverage

570
00:25:15,440 --> 00:25:17,630
of all the calls and all the API is in

571
00:25:17,630 --> 00:25:20,060
AWS so if you need to take extra care

572
00:25:20,060 --> 00:25:21,830
when you take action based on these

573
00:25:21,830 --> 00:25:24,470
tools another really cool tool is called

574
00:25:24,470 --> 00:25:27,050
P mapper principle mate mapper by NC C

575
00:25:27,050 --> 00:25:29,240
group it allows to identify all the

576
00:25:29,240 --> 00:25:30,800
possible privilege escalations in the

577
00:25:30,800 --> 00:25:33,470
account what does that mean so I'll give

578
00:25:33,470 --> 00:25:35,990
an example this is a great part of a

579
00:25:35,990 --> 00:25:38,000
graph that's the output of Pima per and

580
00:25:38,000 --> 00:25:40,610
what you see here is that these three

581
00:25:40,610 --> 00:25:44,030
are entities you have two roles and one

582
00:25:44,030 --> 00:25:47,600
user can assume these for example these

583
00:25:47,600 --> 00:25:48,860
roles you can see that through the

584
00:25:48,860 --> 00:25:50,720
arrows so you know that all the people

585
00:25:50,720 --> 00:25:52,970
is that this user has you can also

586
00:25:52,970 --> 00:25:54,770
assume this role and I have all the

587
00:25:54,770 --> 00:25:57,380
privileges that that Bowl has so this

588
00:25:57,380 --> 00:25:58,850
helps you build a graph of all the

589
00:25:58,850 --> 00:26:01,100
privileges privilege escalations in the

590
00:26:01,100 --> 00:26:03,770
account and identify which connections

591
00:26:03,770 --> 00:26:09,320
you want to cut that's all for today I

592
00:26:09,320 --> 00:26:10,100
hope you enjoyed it

593
00:26:10,100 --> 00:26:18,040
do you have any questions that was

594
00:26:18,040 --> 00:26:20,350
tastic thank you so very much I am

595
00:26:20,350 --> 00:26:26,140
looking right now we see her to see what

596
00:26:26,140 --> 00:26:31,540
we have for questions and right now I'm

597
00:26:31,540 --> 00:26:37,660
not seeing anything in the QA and I am

598
00:26:37,660 --> 00:26:41,440
not seeing anything in slack are you

599
00:26:41,440 --> 00:26:42,940
going to be sticking around in our slack

600
00:26:42,940 --> 00:26:46,410
for a little bit I will for sure

601
00:26:46,410 --> 00:26:49,750
fantastic alright well thank you again

602
00:26:49,750 --> 00:26:53,050
so much for being with us today

603
00:26:53,050 --> 00:26:56,350
and have a good one we're going to be

604
00:26:56,350 --> 00:27:00,480
moving to a break shortly and

