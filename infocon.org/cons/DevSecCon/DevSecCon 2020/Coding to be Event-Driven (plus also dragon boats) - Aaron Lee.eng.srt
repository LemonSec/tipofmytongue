1
00:00:00,160 --> 00:00:01,920
hi everybody i'm uh i'm aaron from

2
00:00:01,920 --> 00:00:03,360
solace and uh

3
00:00:03,360 --> 00:00:05,120
i'm here to talk to you today about uh

4
00:00:05,120 --> 00:00:06,640
event driven design

5
00:00:06,640 --> 00:00:09,440
and uh event driven coding coding how to

6
00:00:09,440 --> 00:00:10,240
be event driven

7
00:00:10,240 --> 00:00:12,799
can you see my slides just matt is that

8
00:00:12,799 --> 00:00:14,320
good yeah

9
00:00:14,320 --> 00:00:16,960
looks good okay excellent all right so

10
00:00:16,960 --> 00:00:17,920
and some dragon boats

11
00:00:17,920 --> 00:00:21,199
so uh events are pretty important right

12
00:00:21,199 --> 00:00:23,359
uh events are are the kind of the center

13
00:00:23,359 --> 00:00:24,560
of the universe everything in the

14
00:00:24,560 --> 00:00:25,840
universe is event driven

15
00:00:25,840 --> 00:00:27,840
right every time like an inventory is

16
00:00:27,840 --> 00:00:30,480
updated in your kind of inventory system

17
00:00:30,480 --> 00:00:32,960
um every time a sensor trips off in your

18
00:00:32,960 --> 00:00:34,399
infrastructure somewhere an event is

19
00:00:34,399 --> 00:00:35,440
being generated

20
00:00:35,440 --> 00:00:37,920
you know every time a stock price ticks

21
00:00:37,920 --> 00:00:38,719
that's an event

22
00:00:38,719 --> 00:00:40,000
everything everything in your

23
00:00:40,000 --> 00:00:41,760
infrastructure could be represented

24
00:00:41,760 --> 00:00:43,440
as events these days and modern

25
00:00:43,440 --> 00:00:45,120
enterprises are moving towards

26
00:00:45,120 --> 00:00:46,800
this fully event-driven kind of

27
00:00:46,800 --> 00:00:48,239
architectures and systems so

28
00:00:48,239 --> 00:00:50,399
events are important but you know

29
00:00:50,399 --> 00:00:51,840
backing up a little bit here

30
00:00:51,840 --> 00:00:53,199
um you know didn't always used to be

31
00:00:53,199 --> 00:00:55,039
this way software has historically been

32
00:00:55,039 --> 00:00:56,160
kind of monolithic

33
00:00:56,160 --> 00:00:58,320
proprietary batch oriented systems

34
00:00:58,320 --> 00:00:59,680
usually with the database kind of at the

35
00:00:59,680 --> 00:01:00,800
center of its core

36
00:01:00,800 --> 00:01:02,320
but we started to move away from that

37
00:01:02,320 --> 00:01:04,479
like looking at more decomposing these

38
00:01:04,479 --> 00:01:05,920
big monolithic systems into micro

39
00:01:05,920 --> 00:01:06,640
services

40
00:01:06,640 --> 00:01:08,640
but that just increases the complexity

41
00:01:08,640 --> 00:01:10,240
in terms of communication between all

42
00:01:10,240 --> 00:01:11,760
these different components

43
00:01:11,760 --> 00:01:13,040
and there's also a move towards more

44
00:01:13,040 --> 00:01:15,600
real-time communications right so rather

45
00:01:15,600 --> 00:01:16,400
than you know

46
00:01:16,400 --> 00:01:17,840
at the end of the day kind of your

47
00:01:17,840 --> 00:01:19,280
inventory being updated or your bank

48
00:01:19,280 --> 00:01:20,560
account being tabulated

49
00:01:20,560 --> 00:01:22,159
you know customers businesses are

50
00:01:22,159 --> 00:01:24,159
requiring things to be real time updated

51
00:01:24,159 --> 00:01:24,880
constantly

52
00:01:24,880 --> 00:01:26,560
and that's just driving up the volume of

53
00:01:26,560 --> 00:01:28,400
data that's being sent around between

54
00:01:28,400 --> 00:01:29,840
all of these different systems so

55
00:01:29,840 --> 00:01:32,240
looking for ways to increase efficiency

56
00:01:32,240 --> 00:01:33,840
and turning towards more event driven

57
00:01:33,840 --> 00:01:35,520
architectures

58
00:01:35,520 --> 00:01:36,960
you know and as things have moved into

59
00:01:36,960 --> 00:01:38,640
the into the cloud you know we've been

60
00:01:38,640 --> 00:01:40,159
looking for ways to make sure

61
00:01:40,159 --> 00:01:41,439
how these kind of different components

62
00:01:41,439 --> 00:01:42,720
can talk to each other you know the

63
00:01:42,720 --> 00:01:43,680
internet was built

64
00:01:43,680 --> 00:01:46,000
on you know rest over http you know

65
00:01:46,000 --> 00:01:47,360
everything understands rest

66
00:01:47,360 --> 00:01:49,200
uh every web server every proxy every

67
00:01:49,200 --> 00:01:50,640
firewall um

68
00:01:50,640 --> 00:01:52,720
so you know when we moved to the cloud

69
00:01:52,720 --> 00:01:54,079
it just seemed like a really easy and

70
00:01:54,079 --> 00:01:55,040
quick way to make

71
00:01:55,040 --> 00:01:56,880
you know our our applications talk to

72
00:01:56,880 --> 00:01:59,439
you the other you know restful apis

73
00:01:59,439 --> 00:02:01,600
but is rest always the best you know not

74
00:02:01,600 --> 00:02:03,200
necessarily right there is a need

75
00:02:03,200 --> 00:02:05,680
uh to invent more kind of efficient

76
00:02:05,680 --> 00:02:07,360
asynchronous bidirectional protocols

77
00:02:07,360 --> 00:02:08,318
like web sockets

78
00:02:08,318 --> 00:02:09,119
and that's what we're going to talk

79
00:02:09,119 --> 00:02:11,520
about today contrasting uh event driven

80
00:02:11,520 --> 00:02:12,080
coding

81
00:02:12,080 --> 00:02:15,200
and rest restful applications so i'm

82
00:02:15,200 --> 00:02:16,400
just uh just for something a little bit

83
00:02:16,400 --> 00:02:17,040
fun

84
00:02:17,040 --> 00:02:18,800
i'm going to throw in this uh just

85
00:02:18,800 --> 00:02:20,400
dragon boat game so let's build

86
00:02:20,400 --> 00:02:22,239
ourselves a distributed application

87
00:02:22,239 --> 00:02:24,560
uh internet enabled application uh we're

88
00:02:24,560 --> 00:02:25,760
gonna hopefully have a couple different

89
00:02:25,760 --> 00:02:27,200
players from a couple around the world

90
00:02:27,200 --> 00:02:28,239
it should work for nowhere

91
00:02:28,239 --> 00:02:29,360
wherever you are so you're gonna need

92
00:02:29,360 --> 00:02:31,599
either your phone or your laptop

93
00:02:31,599 --> 00:02:34,080
uh maybe a chrome tab or something and

94
00:02:34,080 --> 00:02:34,800
you're gonna head

95
00:02:34,800 --> 00:02:36,640
over to uh let me just switch it over

96
00:02:36,640 --> 00:02:38,560
here you're gonna head over to this url

97
00:02:38,560 --> 00:02:39,640
here so

98
00:02:39,640 --> 00:02:42,560
sg.cellus.com dv and you're gonna

99
00:02:42,560 --> 00:02:44,160
essentially join my little dragon boat

100
00:02:44,160 --> 00:02:45,599
race we're gonna use this as a bit of a

101
00:02:45,599 --> 00:02:46,720
kind of an explainer

102
00:02:46,720 --> 00:02:49,120
uh as to as to how this all works so i'm

103
00:02:49,120 --> 00:02:50,000
just gonna give it

104
00:02:50,000 --> 00:02:51,440
like a minute or so for people to kind

105
00:02:51,440 --> 00:02:53,200
of join in uh

106
00:02:53,200 --> 00:02:55,200
hopefully uh hopefully this all works

107
00:02:55,200 --> 00:02:56,720
all right we got one joiner so far

108
00:02:56,720 --> 00:02:57,040
that's

109
00:02:57,040 --> 00:02:59,280
excellent uh i don't i don't know how

110
00:02:59,280 --> 00:03:01,360
many people are watching this thing so

111
00:03:01,360 --> 00:03:04,400
hopefully we have at least a few uh i'll

112
00:03:04,400 --> 00:03:05,599
give it a few minutes so

113
00:03:05,599 --> 00:03:08,319
again either your phone or your laptop

114
00:03:08,319 --> 00:03:09,840
chrome tab would be fine

115
00:03:09,840 --> 00:03:11,599
uh just type in this url and it should

116
00:03:11,599 --> 00:03:13,040
add you to the team

117
00:03:13,040 --> 00:03:15,760
and it should assign you a team color so

118
00:03:15,760 --> 00:03:16,879
essentially what's gonna happen

119
00:03:16,879 --> 00:03:19,200
is i'm going to start the race there's

120
00:03:19,200 --> 00:03:20,159
going to be a basically a little

121
00:03:20,159 --> 00:03:21,040
countdown

122
00:03:21,040 --> 00:03:23,120
and uh once the race starts all you have

123
00:03:23,120 --> 00:03:24,159
to do is either

124
00:03:24,159 --> 00:03:26,159
tap on your phone or click anywhere in

125
00:03:26,159 --> 00:03:27,599
the background anywhere in this blue

126
00:03:27,599 --> 00:03:30,080
area and it will row your boat every

127
00:03:30,080 --> 00:03:30,799
time you click

128
00:03:30,799 --> 00:03:32,799
you'll row the boat and so the first one

129
00:03:32,799 --> 00:03:34,560
across the finish line wins

130
00:03:34,560 --> 00:03:37,519
and uh if you are one of the top three

131
00:03:37,519 --> 00:03:38,879
rowers at the end of the game we're

132
00:03:38,879 --> 00:03:39,519
gonna have a

133
00:03:39,519 --> 00:03:41,120
you know give you a ranking if you're a

134
00:03:41,120 --> 00:03:43,760
top three rower please ping me on slack

135
00:03:43,760 --> 00:03:46,480
uh in the uh all the talks slack channel

136
00:03:46,480 --> 00:03:46,959
uh

137
00:03:46,959 --> 00:03:49,680
uh or personally directly and uh i'm

138
00:03:49,680 --> 00:03:51,200
gonna send you a little prize a little

139
00:03:51,200 --> 00:03:52,480
prize for the top three people so

140
00:03:52,480 --> 00:03:53,360
screenshot

141
00:03:53,360 --> 00:03:55,040
your you know your your top three

142
00:03:55,040 --> 00:03:57,280
placement and send it to me on slack

143
00:03:57,280 --> 00:04:00,239
okay so uh that's pretty good 24 people

144
00:04:00,239 --> 00:04:01,599
i'm gonna i'm gonna start the race so

145
00:04:01,599 --> 00:04:02,400
essentially yeah

146
00:04:02,400 --> 00:04:04,799
when it starts countdown uh just start

147
00:04:04,799 --> 00:04:06,560
tapping anywhere as fast as you can use

148
00:04:06,560 --> 00:04:08,000
as many fingers as you can

149
00:04:08,000 --> 00:04:15,840
uh and uh here we go

150
00:04:16,560 --> 00:04:19,279
all right and they are off tap tap tap

151
00:04:19,279 --> 00:04:20,798
tap tap all right yellow and green are

152
00:04:20,798 --> 00:04:22,560
pulling ahead pink is in behind oh

153
00:04:22,560 --> 00:04:24,000
yellow is actually pulling ahead quite a

154
00:04:24,000 --> 00:04:24,320
bit

155
00:04:24,320 --> 00:04:26,080
come on pink come on orange tap as fast

156
00:04:26,080 --> 00:04:27,919
as you can many fingers as you want tap

157
00:04:27,919 --> 00:04:28,880
tap tap

158
00:04:28,880 --> 00:04:30,240
oh it's going to be close it's going to

159
00:04:30,240 --> 00:04:32,080
be close yellow

160
00:04:32,080 --> 00:04:34,800
wins congratulations yellow team all

161
00:04:34,800 --> 00:04:36,479
right so if you were the one two or

162
00:04:36,479 --> 00:04:37,120
three

163
00:04:37,120 --> 00:04:39,520
wow someone clicked very very fast so if

164
00:04:39,520 --> 00:04:40,639
you're in the top three let's say the

165
00:04:40,639 --> 00:04:42,240
top five if you're in the top five

166
00:04:42,240 --> 00:04:44,320
take a screenshot of your ranking send

167
00:04:44,320 --> 00:04:45,440
it to me on slack

168
00:04:45,440 --> 00:04:46,720
and i'll get in touch with you for a

169
00:04:46,720 --> 00:04:49,360
little a little prize afterwards okay

170
00:04:49,360 --> 00:04:52,000
so simple little silly little game right

171
00:04:52,000 --> 00:04:53,360
if we're gonna build this thing what

172
00:04:53,360 --> 00:04:54,320
would we need well

173
00:04:54,320 --> 00:04:56,080
you're gonna need obviously some kind of

174
00:04:56,080 --> 00:04:57,440
somewhere to host this thing some web

175
00:04:57,440 --> 00:04:58,000
server

176
00:04:58,000 --> 00:04:58,720
you're gonna need some kind of

177
00:04:58,720 --> 00:05:00,639
controller application that is kind of

178
00:05:00,639 --> 00:05:02,560
managing the whole state of the game

179
00:05:02,560 --> 00:05:04,720
assigning teams starting the race you

180
00:05:04,720 --> 00:05:06,560
know keeping track of who's in the lead

181
00:05:06,560 --> 00:05:07,600
uh you're gonna need some kind of

182
00:05:07,600 --> 00:05:09,280
display and obviously some kind of

183
00:05:09,280 --> 00:05:11,280
mobile front-end device for all you

184
00:05:11,280 --> 00:05:11,759
players

185
00:05:11,759 --> 00:05:15,199
out there right um now this talk could

186
00:05:15,199 --> 00:05:15,759
have been

187
00:05:15,759 --> 00:05:17,199
been done in the in the javascript

188
00:05:17,199 --> 00:05:19,120
stream or the java stream it could

189
00:05:19,120 --> 00:05:21,520
go either way um because i think most of

190
00:05:21,520 --> 00:05:22,639
the stuff in this talk is actually

191
00:05:22,639 --> 00:05:23,840
fairly applicable

192
00:05:23,840 --> 00:05:26,000
to both now because this is an

193
00:05:26,000 --> 00:05:27,600
internet-enabled application

194
00:05:27,600 --> 00:05:29,600
you know can i use rest can i use rest

195
00:05:29,600 --> 00:05:31,360
to make all of this game

196
00:05:31,360 --> 00:05:34,000
essentially work now rest over http is

197
00:05:34,000 --> 00:05:36,000
very common and it's very common in even

198
00:05:36,000 --> 00:05:38,320
modern micro service architectures you

199
00:05:38,320 --> 00:05:39,360
know everything has

200
00:05:39,360 --> 00:05:42,160
a rest api everybody's used to get and

201
00:05:42,160 --> 00:05:44,800
post and put and patch

202
00:05:44,800 --> 00:05:46,160
great for making service calls

203
00:05:46,160 --> 00:05:47,600
especially when you want a response

204
00:05:47,600 --> 00:05:49,039
coming back from the other side

205
00:05:49,039 --> 00:05:51,120
the thing is though rest architecture is

206
00:05:51,120 --> 00:05:52,800
client server by definition

207
00:05:52,800 --> 00:05:54,880
right it's from the back it's from the

208
00:05:54,880 --> 00:05:56,639
client into the back end

209
00:05:56,639 --> 00:05:59,680
not a server to client rest over http

210
00:05:59,680 --> 00:06:01,120
is point to point you know you're

211
00:06:01,120 --> 00:06:03,280
talking to a specific url or uri

212
00:06:03,280 --> 00:06:06,080
when you make your address and http at a

213
00:06:06,080 --> 00:06:07,680
network level is actually a synchronous

214
00:06:07,680 --> 00:06:09,120
protocol right you're blocking waiting

215
00:06:09,120 --> 00:06:10,400
for that 200 okay

216
00:06:10,400 --> 00:06:12,160
or that 503 to come back from the other

217
00:06:12,160 --> 00:06:13,840
side so is rest

218
00:06:13,840 --> 00:06:16,639
always the best um you know sometimes

219
00:06:16,639 --> 00:06:18,160
yes sometimes no

220
00:06:18,160 --> 00:06:20,240
uh it's not always it's not always the

221
00:06:20,240 --> 00:06:21,360
best so let's take a look

222
00:06:21,360 --> 00:06:23,840
at some possible issues looking at our

223
00:06:23,840 --> 00:06:25,680
game as to where maybe rest doesn't

224
00:06:25,680 --> 00:06:26,160
quite

225
00:06:26,160 --> 00:06:28,639
uh fit the bill so an easy one to start

226
00:06:28,639 --> 00:06:30,160
off in a micro service architecture is

227
00:06:30,160 --> 00:06:31,120
service discovery

228
00:06:31,120 --> 00:06:32,479
if you if you have some kind of

229
00:06:32,479 --> 00:06:34,240
centralized service discovery mechanism

230
00:06:34,240 --> 00:06:35,919
then you know it's kind of easy to find

231
00:06:35,919 --> 00:06:37,440
where things are running what services

232
00:06:37,440 --> 00:06:39,199
are available to your application

233
00:06:39,199 --> 00:06:41,360
uh to find out where things are but if

234
00:06:41,360 --> 00:06:42,479
you didn't have this

235
00:06:42,479 --> 00:06:44,160
you know how would your rest application

236
00:06:44,160 --> 00:06:45,680
go about kind of finding where

237
00:06:45,680 --> 00:06:47,360
you know the game is you know what if

238
00:06:47,360 --> 00:06:48,800
there are multiple games what if games

239
00:06:48,800 --> 00:06:50,720
are starting and stopping dynamically

240
00:06:50,720 --> 00:06:52,160
you know how would you do that with a

241
00:06:52,160 --> 00:06:53,840
restful based application

242
00:06:53,840 --> 00:06:55,039
i'm going to show you a cool way to do

243
00:06:55,039 --> 00:06:57,360
it using event driven publish subscribe

244
00:06:57,360 --> 00:06:59,280
later on

245
00:06:59,280 --> 00:07:01,120
how about the start of the race right um

246
00:07:01,120 --> 00:07:02,720
so basically we need oh we've all joined

247
00:07:02,720 --> 00:07:04,240
the race we need some way of saying okay

248
00:07:04,240 --> 00:07:05,440
we're going to start the race

249
00:07:05,440 --> 00:07:07,039
um which is essentially a

250
00:07:07,039 --> 00:07:08,800
server-to-client kind of communication

251
00:07:08,800 --> 00:07:10,400
right i need to signal from the back end

252
00:07:10,400 --> 00:07:11,919
to all of the mobile devices out there

253
00:07:11,919 --> 00:07:13,039
that something's starting

254
00:07:13,039 --> 00:07:14,560
so if you're using rest that'd be quite

255
00:07:14,560 --> 00:07:17,039
difficult so one option that is commonly

256
00:07:17,039 --> 00:07:18,080
used is to pull

257
00:07:18,080 --> 00:07:19,759
right all the mobile devices will pull

258
00:07:19,759 --> 00:07:21,759
the back end to find out if

259
00:07:21,759 --> 00:07:23,120
you know has the race started has the

260
00:07:23,120 --> 00:07:24,880
race started has the race started

261
00:07:24,880 --> 00:07:27,120
every 10 seconds but if it's every 10

262
00:07:27,120 --> 00:07:28,400
seconds you might miss the start of the

263
00:07:28,400 --> 00:07:30,720
race so instead now you pull faster

264
00:07:30,720 --> 00:07:32,639
you pull every one second has the race

265
00:07:32,639 --> 00:07:34,160
started has the race started but now you

266
00:07:34,160 --> 00:07:34,960
are essentially just

267
00:07:34,960 --> 00:07:36,880
hammering your back end with all these

268
00:07:36,880 --> 00:07:38,880
no walk essentially queries

269
00:07:38,880 --> 00:07:42,319
so polling is never an efficient way

270
00:07:42,319 --> 00:07:44,479
of gathering data and checking for state

271
00:07:44,479 --> 00:07:46,080
change we're going to talk about that

272
00:07:46,080 --> 00:07:49,120
a little bit later on now because this

273
00:07:49,120 --> 00:07:51,199
is a like a simulation or a really high

274
00:07:51,199 --> 00:07:52,639
tech simulation we want to make sure

275
00:07:52,639 --> 00:07:53,599
that you know

276
00:07:53,599 --> 00:07:55,520
we send each and every event as it

277
00:07:55,520 --> 00:07:57,199
occurs right each and every row

278
00:07:57,199 --> 00:07:59,039
in case there's a close uh finish line

279
00:07:59,039 --> 00:08:00,319
finish so

280
00:08:00,319 --> 00:08:01,759
if i'm doing using a synchronous

281
00:08:01,759 --> 00:08:03,440
protocol you know if i'm connecting over

282
00:08:03,440 --> 00:08:04,240
the when

283
00:08:04,240 --> 00:08:06,560
and i have say a 100 millisecond round

284
00:08:06,560 --> 00:08:07,280
trip time

285
00:08:07,280 --> 00:08:09,840
i can only send about 10 events per

286
00:08:09,840 --> 00:08:10,960
second

287
00:08:10,960 --> 00:08:12,720
with that kind of round trip time so

288
00:08:12,720 --> 00:08:14,240
it's not always using a synchronous

289
00:08:14,240 --> 00:08:16,160
protocol like http is not always the

290
00:08:16,160 --> 00:08:16,800
best

291
00:08:16,800 --> 00:08:18,240
maybe i want to use a protocol that's

292
00:08:18,240 --> 00:08:19,840
meant for streaming it's meant for

293
00:08:19,840 --> 00:08:21,840
asynchronous delivery

294
00:08:21,840 --> 00:08:23,520
a couple stretch goals could be kind of

295
00:08:23,520 --> 00:08:25,199
like client to client communication

296
00:08:25,199 --> 00:08:26,639
what if everybody on the pink team or

297
00:08:26,639 --> 00:08:27,919
everybody on the green team wanted to

298
00:08:27,919 --> 00:08:28,879
talk to each other

299
00:08:28,879 --> 00:08:30,240
you know some way of kind of not going

300
00:08:30,240 --> 00:08:31,520
through the web server how would you do

301
00:08:31,520 --> 00:08:32,719
that with rest

302
00:08:32,719 --> 00:08:34,320
it'd be very difficult well all of our

303
00:08:34,320 --> 00:08:35,760
mobile devices are scattered throughout

304
00:08:35,760 --> 00:08:37,679
the internet how would you find them

305
00:08:37,679 --> 00:08:41,760
uh using rest it's much more difficult

306
00:08:41,760 --> 00:08:43,599
and how about you know for some kind of

307
00:08:43,599 --> 00:08:45,440
way of doing uh analytics you want to

308
00:08:45,440 --> 00:08:46,959
like capture all the data as it's

309
00:08:46,959 --> 00:08:48,080
flowing over your

310
00:08:48,080 --> 00:08:49,920
game you know without changing any of

311
00:08:49,920 --> 00:08:51,360
the code is it possible

312
00:08:51,360 --> 00:08:53,120
that we can kind of listen to all this

313
00:08:53,120 --> 00:08:55,040
data flowing through the game

314
00:08:55,040 --> 00:08:57,760
uh you know um as it's happening now we

315
00:08:57,760 --> 00:08:59,519
could listen to you know if it was rest

316
00:08:59,519 --> 00:09:00,800
and we're using a web server we could

317
00:09:00,800 --> 00:09:01,440
scrape

318
00:09:01,440 --> 00:09:03,680
the log files off that web server but

319
00:09:03,680 --> 00:09:05,040
you know is there a better way to do

320
00:09:05,040 --> 00:09:05,839
this

321
00:09:05,839 --> 00:09:07,920
is there a better way yeah so let's park

322
00:09:07,920 --> 00:09:09,440
that for now let's just talk a little

323
00:09:09,440 --> 00:09:10,080
bit about

324
00:09:10,080 --> 00:09:12,399
uh event driven design event driven uh

325
00:09:12,399 --> 00:09:13,519
coding

326
00:09:13,519 --> 00:09:15,760
so what does it mean to be event driven

327
00:09:15,760 --> 00:09:17,519
now if you're a software developer oh

328
00:09:17,519 --> 00:09:19,040
wait hold on i'm gonna back up what does

329
00:09:19,040 --> 00:09:20,640
it mean to be event driven right

330
00:09:20,640 --> 00:09:22,800
real time this is kind of my opinion of

331
00:09:22,800 --> 00:09:24,320
it but you know people might differ

332
00:09:24,320 --> 00:09:25,040
about that but

333
00:09:25,040 --> 00:09:28,720
real time reactive asynchronous

334
00:09:28,720 --> 00:09:31,040
non-blocking and decoupled or loosely

335
00:09:31,040 --> 00:09:32,240
coupled architectures

336
00:09:32,240 --> 00:09:34,000
so this is all of these things will give

337
00:09:34,000 --> 00:09:36,080
rise to producing applications that are

338
00:09:36,080 --> 00:09:37,200
more efficient and the higher

339
00:09:37,200 --> 00:09:38,959
performance

340
00:09:38,959 --> 00:09:40,959
event driven applications but it's not

341
00:09:40,959 --> 00:09:42,480
always necessarily easier

342
00:09:42,480 --> 00:09:44,240
sometimes designing to be event driven

343
00:09:44,240 --> 00:09:45,839
you know like including asynchronous

344
00:09:45,839 --> 00:09:46,640
non-blocking

345
00:09:46,640 --> 00:09:47,760
the code can be a little bit more

346
00:09:47,760 --> 00:09:49,760
complex it's not as easy but you do

347
00:09:49,760 --> 00:09:51,920
get benefits from that now if you've

348
00:09:51,920 --> 00:09:54,000
ever done any gui programming out there

349
00:09:54,000 --> 00:09:55,760
like java swing or any kind of gui

350
00:09:55,760 --> 00:09:57,839
toolkit you've already done event driven

351
00:09:57,839 --> 00:09:58,560
programming

352
00:09:58,560 --> 00:10:00,480
right every time you click a button or

353
00:10:00,480 --> 00:10:02,240
move a window or resize something

354
00:10:02,240 --> 00:10:05,120
events are being fired uh from your gui

355
00:10:05,120 --> 00:10:06,640
framework into your application for your

356
00:10:06,640 --> 00:10:08,000
application to respond to

357
00:10:08,000 --> 00:10:10,000
you know um same thing with video game

358
00:10:10,000 --> 00:10:11,279
design when i was in high school we used

359
00:10:11,279 --> 00:10:12,160
to make video games

360
00:10:12,160 --> 00:10:13,600
so every time you know the fire button's

361
00:10:13,600 --> 00:10:14,800
pressed or the joysticks move you're

362
00:10:14,800 --> 00:10:16,480
responding to these user events

363
00:10:16,480 --> 00:10:18,320
but events exist everywhere you know

364
00:10:18,320 --> 00:10:20,240
every time you tap your card to pay

365
00:10:20,240 --> 00:10:23,120
uh for uh you know your subway or every

366
00:10:23,120 --> 00:10:25,040
time you push a button for an elevator

367
00:10:25,040 --> 00:10:27,040
um every time something changes state in

368
00:10:27,040 --> 00:10:28,399
your system every time your database

369
00:10:28,399 --> 00:10:30,079
gets updated these are events that can

370
00:10:30,079 --> 00:10:30,480
be

371
00:10:30,480 --> 00:10:33,279
you know sent and broadcast and other

372
00:10:33,279 --> 00:10:34,959
systems downstream systems that want to

373
00:10:34,959 --> 00:10:36,079
know about these events

374
00:10:36,079 --> 00:10:37,600
uh they can like kind of listen to that

375
00:10:37,600 --> 00:10:40,000
event as it as it occurs

376
00:10:40,000 --> 00:10:42,560
but in terms of coding coding for events

377
00:10:42,560 --> 00:10:44,000
we're not always taught this way early

378
00:10:44,000 --> 00:10:45,440
on you know we when we first learn

379
00:10:45,440 --> 00:10:47,120
programming you know we call a method

380
00:10:47,120 --> 00:10:48,800
the method gets put onto the stack it

381
00:10:48,800 --> 00:10:50,160
runs some computation

382
00:10:50,160 --> 00:10:51,680
and then when the result is done you

383
00:10:51,680 --> 00:10:53,519
know it kind of returns pops off the

384
00:10:53,519 --> 00:10:54,800
stack and you know we're in the same

385
00:10:54,800 --> 00:10:55,440
thread

386
00:10:55,440 --> 00:10:56,800
you know it's kind of like a blocking

387
00:10:56,800 --> 00:10:58,560
call it's almost like a service oriented

388
00:10:58,560 --> 00:10:59,519
architecture

389
00:10:59,519 --> 00:11:01,440
but when we design for event driven

390
00:11:01,440 --> 00:11:03,120
typically it's done with non-blocking

391
00:11:03,120 --> 00:11:04,480
calls and you're going to use

392
00:11:04,480 --> 00:11:05,680
callbacks you're going to register

393
00:11:05,680 --> 00:11:07,920
callbacks to asynchronously respond to

394
00:11:07,920 --> 00:11:08,480
you

395
00:11:08,480 --> 00:11:11,279
when the computation for example is

396
00:11:11,279 --> 00:11:12,160
complete

397
00:11:12,160 --> 00:11:14,320
so let's take a look at a couple uh

398
00:11:14,320 --> 00:11:15,440
design patterns

399
00:11:15,440 --> 00:11:16,880
some of them you may know some of them

400
00:11:16,880 --> 00:11:18,800
you may not um

401
00:11:18,800 --> 00:11:20,640
that are used in event driven or uh

402
00:11:20,640 --> 00:11:22,959
coding so the observer pattern

403
00:11:22,959 --> 00:11:25,200
uh or the subject observer pattern this

404
00:11:25,200 --> 00:11:26,240
is the gui pattern

405
00:11:26,240 --> 00:11:28,240
right this is the you know i want to

406
00:11:28,240 --> 00:11:29,279
click a button and

407
00:11:29,279 --> 00:11:31,360
you want me to tell me when this button

408
00:11:31,360 --> 00:11:32,720
is is clicked

409
00:11:32,720 --> 00:11:34,560
so you're going to have a subject this

410
00:11:34,560 --> 00:11:35,839
is perhaps your your button

411
00:11:35,839 --> 00:11:37,519
you're going to have some observers this

412
00:11:37,519 --> 00:11:39,200
could be your applications and every

413
00:11:39,200 --> 00:11:41,120
time the subject changes state

414
00:11:41,120 --> 00:11:42,959
it notifies the observers that something

415
00:11:42,959 --> 00:11:44,560
is occurring this way

416
00:11:44,560 --> 00:11:46,880
your observers aren't constantly asking

417
00:11:46,880 --> 00:11:47,760
the subject

418
00:11:47,760 --> 00:11:49,360
if this state has been changed you know

419
00:11:49,360 --> 00:11:51,200
what kind of weird gui toolkit would it

420
00:11:51,200 --> 00:11:51,519
be

421
00:11:51,519 --> 00:11:53,600
if you had to constantly pull your

422
00:11:53,600 --> 00:11:54,720
button every

423
00:11:54,720 --> 00:11:56,320
couple seconds to find out if it's been

424
00:11:56,320 --> 00:11:58,000
clicked you know that's a very

425
00:11:58,000 --> 00:11:59,519
inefficient very strange design just

426
00:11:59,519 --> 00:12:00,880
tell me when something has occurred

427
00:12:00,880 --> 00:12:02,399
and i can react to that in an

428
00:12:02,399 --> 00:12:04,000
event-driven way so

429
00:12:04,000 --> 00:12:07,360
the observer design pattern

430
00:12:07,360 --> 00:12:10,000
uh the reactor pattern uh this is used a

431
00:12:10,000 --> 00:12:10,399
lot

432
00:12:10,399 --> 00:12:13,279
in i o type applications web servers for

433
00:12:13,279 --> 00:12:14,240
example

434
00:12:14,240 --> 00:12:16,480
and it's um it's meant to increase

435
00:12:16,480 --> 00:12:18,000
throughput and reduce the number of

436
00:12:18,000 --> 00:12:19,279
threads possibly that you

437
00:12:19,279 --> 00:12:21,279
have in your design older web servers

438
00:12:21,279 --> 00:12:22,880
had kind of like one thread per

439
00:12:22,880 --> 00:12:23,519
connection

440
00:12:23,519 --> 00:12:25,040
and it kind of relied on the thread

441
00:12:25,040 --> 00:12:26,880
scheduling of the os to kind of manage

442
00:12:26,880 --> 00:12:28,160
uh kind of which thread was being

443
00:12:28,160 --> 00:12:30,000
serviced but you know that can cause a

444
00:12:30,000 --> 00:12:31,120
lot of contact switching

445
00:12:31,120 --> 00:12:33,120
and you know be rather inefficient so

446
00:12:33,120 --> 00:12:34,639
the reactor pattern is

447
00:12:34,639 --> 00:12:36,399
essentially you might have events coming

448
00:12:36,399 --> 00:12:38,079
in here you know this could be a tcp

449
00:12:38,079 --> 00:12:40,320
socket or some kind of stream of events

450
00:12:40,320 --> 00:12:41,360
um you're going to have

451
00:12:41,360 --> 00:12:43,760
a thread a single thread as an event

452
00:12:43,760 --> 00:12:44,639
loop that's actually

453
00:12:44,639 --> 00:12:46,079
listening to these events and then

454
00:12:46,079 --> 00:12:48,399
dispatching them out to a bunch of

455
00:12:48,399 --> 00:12:50,639
scalable worker threads in the back end

456
00:12:50,639 --> 00:12:52,880
so as the load increases as the rate

457
00:12:52,880 --> 00:12:54,800
of events coming in increases you can

458
00:12:54,800 --> 00:12:56,560
scale out the number of worker threads

459
00:12:56,560 --> 00:12:56,959
here

460
00:12:56,959 --> 00:12:58,800
makes this dynamically these could be

461
00:12:58,800 --> 00:13:00,639
micro services for example right

462
00:13:00,639 --> 00:13:02,079
and basically once they're done

463
00:13:02,079 --> 00:13:03,839
computing this data you know they're

464
00:13:03,839 --> 00:13:05,519
passed back to this event loop which can

465
00:13:05,519 --> 00:13:06,480
then request it so

466
00:13:06,480 --> 00:13:08,639
your processing is not happening here

467
00:13:08,639 --> 00:13:10,320
this guy is just dispatching

468
00:13:10,320 --> 00:13:12,240
uh data and requests between these

469
00:13:12,240 --> 00:13:13,360
back-end services

470
00:13:13,360 --> 00:13:15,200
so makes for a very reactive very

471
00:13:15,200 --> 00:13:16,880
responsive design

472
00:13:16,880 --> 00:13:19,120
and it's used typically in a lot of web

473
00:13:19,120 --> 00:13:20,160
servers

474
00:13:20,160 --> 00:13:23,200
reactive nginx node.js uses this

475
00:13:23,200 --> 00:13:25,040
a lot of high performance consuming

476
00:13:25,040 --> 00:13:26,399
applications that need to process a lot

477
00:13:26,399 --> 00:13:27,040
of data

478
00:13:27,040 --> 00:13:30,320
use the reactor pattern

479
00:13:30,320 --> 00:13:33,200
so the publish subscribe pattern this is

480
00:13:33,200 --> 00:13:34,800
not really a software design pattern

481
00:13:34,800 --> 00:13:35,760
this is more of a

482
00:13:35,760 --> 00:13:39,279
communication pattern and it's used

483
00:13:39,279 --> 00:13:41,360
kind of to decouple your publishers and

484
00:13:41,360 --> 00:13:43,040
your consumers of data so

485
00:13:43,040 --> 00:13:45,440
similar to the observer pattern this one

486
00:13:45,440 --> 00:13:46,480
is used

487
00:13:46,480 --> 00:13:48,880
to kind of to notify downstream

488
00:13:48,880 --> 00:13:50,399
consumers that an event has occurred and

489
00:13:50,399 --> 00:13:51,600
this is typically done

490
00:13:51,600 --> 00:13:53,680
using an event broker and this is what

491
00:13:53,680 --> 00:13:54,880
solas my company

492
00:13:54,880 --> 00:13:56,560
that i work for this is what we produce

493
00:13:56,560 --> 00:13:57,920
we make event brokers

494
00:13:57,920 --> 00:13:58,639
so you're going to have your

495
00:13:58,639 --> 00:14:00,480
applications that are producing events

496
00:14:00,480 --> 00:14:02,959
they send a message as the piece of data

497
00:14:02,959 --> 00:14:04,800
and they send it to a topic and then

498
00:14:04,800 --> 00:14:06,959
consuming applications or consuming guys

499
00:14:06,959 --> 00:14:08,399
that want to know about this event that

500
00:14:08,399 --> 00:14:10,639
occurs they subscribe to this particular

501
00:14:10,639 --> 00:14:12,160
topic they subscribe to get these

502
00:14:12,160 --> 00:14:13,120
notifications

503
00:14:13,120 --> 00:14:15,519
so that when it's being done they are

504
00:14:15,519 --> 00:14:16,480
notified

505
00:14:16,480 --> 00:14:18,800
so the event broker the guy in the

506
00:14:18,800 --> 00:14:19,519
middle here

507
00:14:19,519 --> 00:14:21,680
basically handles all this dispatching

508
00:14:21,680 --> 00:14:23,519
and the consumers and the publishers

509
00:14:23,519 --> 00:14:24,560
don't have to know

510
00:14:24,560 --> 00:14:26,480
exactly who is sending the data or how

511
00:14:26,480 --> 00:14:28,000
many people are actually receiving it

512
00:14:28,000 --> 00:14:29,839
so very decoupled architecture and

513
00:14:29,839 --> 00:14:31,760
allows for very scalable architecture

514
00:14:31,760 --> 00:14:34,000
as we're going to see in just a bit so

515
00:14:34,000 --> 00:14:35,199
what is an event broker

516
00:14:35,199 --> 00:14:36,720
it's a middleware component that sits

517
00:14:36,720 --> 00:14:38,399
kind of in the middle of your your

518
00:14:38,399 --> 00:14:40,160
applications and it allows you to do

519
00:14:40,160 --> 00:14:42,160
different kind of data exchange or event

520
00:14:42,160 --> 00:14:42,720
exchange

521
00:14:42,720 --> 00:14:45,680
patterns such as request reply uh you

522
00:14:45,680 --> 00:14:47,440
know which is more the http restful

523
00:14:47,440 --> 00:14:48,240
style

524
00:14:48,240 --> 00:14:49,760
publish subscribe which is kind of

525
00:14:49,760 --> 00:14:51,839
one-to-many style of distribution

526
00:14:51,839 --> 00:14:54,079
point-to-point which is one-to-one kind

527
00:14:54,079 --> 00:14:55,120
of locked-in

528
00:14:55,120 --> 00:14:57,760
distribution possibly replay you know a

529
00:14:57,760 --> 00:14:58,639
number of different

530
00:14:58,639 --> 00:15:00,959
uh styles of sending data between

531
00:15:00,959 --> 00:15:01,760
applications

532
00:15:01,760 --> 00:15:03,839
uh using kind of a centralized uh

533
00:15:03,839 --> 00:15:06,079
broker-based uh architecture

534
00:15:06,079 --> 00:15:07,760
now it should be allowed for efficient

535
00:15:07,760 --> 00:15:09,279
communication you know you want it to be

536
00:15:09,279 --> 00:15:11,279
efficient bi-directional asynchronous

537
00:15:11,279 --> 00:15:14,880
uh for example now there are a lot of

538
00:15:14,880 --> 00:15:16,079
players in the space

539
00:15:16,079 --> 00:15:17,120
you know there's some that are

540
00:15:17,120 --> 00:15:18,880
cloud-based only there are some that are

541
00:15:18,880 --> 00:15:20,240
on-prem only there's some that are

542
00:15:20,240 --> 00:15:22,079
commercial some that are open source

543
00:15:22,079 --> 00:15:24,240
some that supports only web stuff some

544
00:15:24,240 --> 00:15:25,360
that supports only

545
00:15:25,360 --> 00:15:27,760
you know kind of tcp based communication

546
00:15:27,760 --> 00:15:29,600
so you know solas kind of does

547
00:15:29,600 --> 00:15:31,199
a bit of everything i'll give you some

548
00:15:31,199 --> 00:15:32,320
links at the end if you want to go check

549
00:15:32,320 --> 00:15:33,519
it out

550
00:15:33,519 --> 00:15:35,519
now um previously there was a lot of

551
00:15:35,519 --> 00:15:37,360
proprietary standards with regards to

552
00:15:37,360 --> 00:15:38,480
kind of event

553
00:15:38,480 --> 00:15:40,240
oriented or message oriented like

554
00:15:40,240 --> 00:15:41,920
communication um but

555
00:15:41,920 --> 00:15:44,240
like rest how rest became a standard and

556
00:15:44,240 --> 00:15:45,600
the internet kind of got built on it

557
00:15:45,600 --> 00:15:46,240
there are now

558
00:15:46,240 --> 00:15:48,639
standards in uh messaging or event

559
00:15:48,639 --> 00:15:49,759
communication as well

560
00:15:49,759 --> 00:15:51,759
so two of the big ones uh kind of open

561
00:15:51,759 --> 00:15:54,000
source ones are mqtt

562
00:15:54,000 --> 00:15:56,639
this is a pub sub uh protocol

563
00:15:56,639 --> 00:15:58,000
lightweight protocol that was built for

564
00:15:58,000 --> 00:15:59,040
iot

565
00:15:59,040 --> 00:16:02,079
um amqp is a little bit more heavyweight

566
00:16:02,079 --> 00:16:03,839
to the more enterprise grade in terms of

567
00:16:03,839 --> 00:16:05,199
standards

568
00:16:05,199 --> 00:16:08,000
obviously websocket is a transport jms

569
00:16:08,000 --> 00:16:09,360
is an api so these are not all

570
00:16:09,360 --> 00:16:10,160
equivalent

571
00:16:10,160 --> 00:16:11,839
um you know but there are standards that

572
00:16:11,839 --> 00:16:13,680
have emerged and are very kind of common

573
00:16:13,680 --> 00:16:14,079
now

574
00:16:14,079 --> 00:16:15,920
uh with regards to building applications

575
00:16:15,920 --> 00:16:18,000
that do uh kind of pub sub

576
00:16:18,000 --> 00:16:20,560
and event driven distribution now if

577
00:16:20,560 --> 00:16:22,800
you've ever used a messaging api or an

578
00:16:22,800 --> 00:16:24,800
event driven api this is very much

579
00:16:24,800 --> 00:16:26,399
a very basic idea of what it actually

580
00:16:26,399 --> 00:16:28,079
looks like you're going to have an api

581
00:16:28,079 --> 00:16:29,360
that allows you to connect to some

582
00:16:29,360 --> 00:16:30,560
broker some host

583
00:16:30,560 --> 00:16:32,000
you're going to be able to disconnect

584
00:16:32,000 --> 00:16:33,360
you're going to want to subscribe or

585
00:16:33,360 --> 00:16:35,040
unsubscribe to topics this is how the

586
00:16:35,040 --> 00:16:36,000
consumers receive

587
00:16:36,000 --> 00:16:38,639
data uh if you're using persistent

588
00:16:38,639 --> 00:16:39,279
messaging

589
00:16:39,279 --> 00:16:40,720
or persistent data you might need to

590
00:16:40,720 --> 00:16:42,240
have a queue in there to act as a

591
00:16:42,240 --> 00:16:43,920
persistent storage

592
00:16:43,920 --> 00:16:45,680
uh when you send a message you're going

593
00:16:45,680 --> 00:16:47,199
to publish that message onto a

594
00:16:47,199 --> 00:16:48,720
particular destination send it to a

595
00:16:48,720 --> 00:16:50,399
particular topic

596
00:16:50,399 --> 00:16:52,800
and this on receive this is the callback

597
00:16:52,800 --> 00:16:54,240
interface this is what makes your whole

598
00:16:54,240 --> 00:16:56,399
application event driven from a consumer

599
00:16:56,399 --> 00:16:58,000
perspective you know when a piece of

600
00:16:58,000 --> 00:16:59,759
data arrives for that consumer

601
00:16:59,759 --> 00:17:02,399
uh this on message or on receive method

602
00:17:02,399 --> 00:17:04,720
will be run by the api to signal that

603
00:17:04,720 --> 00:17:06,000
something has occurred

604
00:17:06,000 --> 00:17:07,439
great here's your piece of data here's

605
00:17:07,439 --> 00:17:09,679
your message um it's all event driven i

606
00:17:09,679 --> 00:17:11,039
don't have to be polling

607
00:17:11,039 --> 00:17:13,760
a broker with my consumer to find out if

608
00:17:13,760 --> 00:17:14,400
there's

609
00:17:14,400 --> 00:17:17,599
uh if there's new data now

610
00:17:17,599 --> 00:17:19,599
topics are used to route the data in

611
00:17:19,599 --> 00:17:21,119
solace we do topics this way they're

612
00:17:21,119 --> 00:17:22,160
kind of hierarchical

613
00:17:22,160 --> 00:17:23,760
which allows for very descriptive kind

614
00:17:23,760 --> 00:17:25,439
of ways of kind of sending data and

615
00:17:25,439 --> 00:17:26,160
tagging

616
00:17:26,160 --> 00:17:28,240
the message when you get sent it's

617
00:17:28,240 --> 00:17:29,760
hierarchical as you can see

618
00:17:29,760 --> 00:17:31,360
which allows us to do cool things with

619
00:17:31,360 --> 00:17:32,960
wild cards so some

620
00:17:32,960 --> 00:17:34,720
pub sub brokers don't allow the use of

621
00:17:34,720 --> 00:17:36,160
wild cards or kind of topics are

622
00:17:36,160 --> 00:17:36,880
considered very

623
00:17:36,880 --> 00:17:39,760
flat very much like a label uh whereas

624
00:17:39,760 --> 00:17:40,720
in solace

625
00:17:40,720 --> 00:17:42,640
we have the ability to use wild cards

626
00:17:42,640 --> 00:17:44,799
same with mqtt if you're familiar with

627
00:17:44,799 --> 00:17:46,640
that as a protocol they also offer the

628
00:17:46,640 --> 00:17:47,840
ability to do wild cards

629
00:17:47,840 --> 00:17:49,760
so a consumer can use a wild card

630
00:17:49,760 --> 00:17:52,000
subscription and receive many many

631
00:17:52,000 --> 00:17:54,080
uh topics that match that particular

632
00:17:54,080 --> 00:17:55,919
wildcard think of it as a very

633
00:17:55,919 --> 00:18:00,000
basic or simple kind of regex expression

634
00:18:00,000 --> 00:18:02,160
now but okay so i got these topics i

635
00:18:02,160 --> 00:18:03,120
have all these topics between my

636
00:18:03,120 --> 00:18:05,039
applications i've designed them all

637
00:18:05,039 --> 00:18:06,799
now how can i do code generation from

638
00:18:06,799 --> 00:18:08,080
that you know i don't maybe you want to

639
00:18:08,080 --> 00:18:08,480
write

640
00:18:08,480 --> 00:18:10,320
uh use your api i also want to use

641
00:18:10,320 --> 00:18:11,919
something that's a little more generic

642
00:18:11,919 --> 00:18:14,000
you know in the rest space this has

643
00:18:14,000 --> 00:18:15,200
existed a lot of

644
00:18:15,200 --> 00:18:17,600
rest applications tooling uh exists

645
00:18:17,600 --> 00:18:18,720
because of open api

646
00:18:18,720 --> 00:18:20,960
swagger you know many of us know that

647
00:18:20,960 --> 00:18:22,160
you can specify this uh

648
00:18:22,160 --> 00:18:23,919
definition of your of your rest

649
00:18:23,919 --> 00:18:25,760
application you can go off and do code

650
00:18:25,760 --> 00:18:26,559
generation

651
00:18:26,559 --> 00:18:28,640
you can do management of this governance

652
00:18:28,640 --> 00:18:29,679
and you can kind of look

653
00:18:29,679 --> 00:18:31,840
at uh you know it's very easy there's a

654
00:18:31,840 --> 00:18:32,720
lot of tooling

655
00:18:32,720 --> 00:18:34,799
that's built for uh for restful

656
00:18:34,799 --> 00:18:35,919
applications

657
00:18:35,919 --> 00:18:38,480
you know but if i'm building a you know

658
00:18:38,480 --> 00:18:40,080
event driven a publish subscribe

659
00:18:40,080 --> 00:18:40,799
application

660
00:18:40,799 --> 00:18:42,720
what exists for doing that so there's a

661
00:18:42,720 --> 00:18:44,400
new initiative fairly new initiative

662
00:18:44,400 --> 00:18:47,039
called async api it's open source uh

663
00:18:47,039 --> 00:18:47,760
quite a few

664
00:18:47,760 --> 00:18:50,240
of our friends and competitors are

665
00:18:50,240 --> 00:18:51,440
partnered with these guys

666
00:18:51,440 --> 00:18:53,840
and it allows you to specify a a

667
00:18:53,840 --> 00:18:54,960
specification

668
00:18:54,960 --> 00:18:57,679
to kind of govern uh the uh publish and

669
00:18:57,679 --> 00:18:59,280
subscribe semantics in terms of

670
00:18:59,280 --> 00:19:01,600
topics but also in terms of the payload

671
00:19:01,600 --> 00:19:04,000
of what data your applications

672
00:19:04,000 --> 00:19:06,240
and your your distributed applications

673
00:19:06,240 --> 00:19:07,440
are expecting

674
00:19:07,440 --> 00:19:08,960
and so solas our company has gone off

675
00:19:08,960 --> 00:19:10,720
and built this kind of portal that is

676
00:19:10,720 --> 00:19:12,000
doing for event driven

677
00:19:12,000 --> 00:19:13,840
what uh you know restful applications

678
00:19:13,840 --> 00:19:15,919
have with you know kind of like uh

679
00:19:15,919 --> 00:19:18,400
api management and api portals so it

680
00:19:18,400 --> 00:19:20,000
allows you to do documentation

681
00:19:20,000 --> 00:19:22,400
uh design as an architect you can design

682
00:19:22,400 --> 00:19:24,000
an application just using kind of like a

683
00:19:24,000 --> 00:19:25,600
point-and-click interface you decide to

684
00:19:25,600 --> 00:19:27,039
find your topic spaces

685
00:19:27,039 --> 00:19:29,200
and all this stuff that you can do uh

686
00:19:29,200 --> 00:19:30,880
with a restful application you can now

687
00:19:30,880 --> 00:19:31,919
do using event drive

688
00:19:31,919 --> 00:19:34,080
so check out async api i'll put a i'll

689
00:19:34,080 --> 00:19:35,360
put a link up at the

690
00:19:35,360 --> 00:19:38,080
end but very very cool stuff allows you

691
00:19:38,080 --> 00:19:38,799
to do

692
00:19:38,799 --> 00:19:40,559
uh things like code generation for

693
00:19:40,559 --> 00:19:42,000
spring cloud streams

694
00:19:42,000 --> 00:19:45,360
for node.js go takes the specification

695
00:19:45,360 --> 00:19:47,600
and builds boilerplate code

696
00:19:47,600 --> 00:19:49,360
that allows you to essentially do the

697
00:19:49,360 --> 00:19:51,440
marshalling unmarshaling of the data

698
00:19:51,440 --> 00:19:53,919
so that you know as a developer you just

699
00:19:53,919 --> 00:19:55,760
now have to write the business logic you

700
00:19:55,760 --> 00:19:57,280
know all the boilerplate code gets kind

701
00:19:57,280 --> 00:19:58,720
of made for you all the publishing and

702
00:19:58,720 --> 00:20:00,160
subscribing and the topics

703
00:20:00,160 --> 00:20:01,919
it's all managed uh by your code

704
00:20:01,919 --> 00:20:03,120
generation you just need to write the

705
00:20:03,120 --> 00:20:04,559
business logic there

706
00:20:04,559 --> 00:20:06,720
so pretty cool stuff we're very excited

707
00:20:06,720 --> 00:20:08,320
to be partnered with async api

708
00:20:08,320 --> 00:20:10,559
go check that out uh as a developer it's

709
00:20:10,559 --> 00:20:11,520
pretty neat

710
00:20:11,520 --> 00:20:13,760
so going back quickly to our our dragon

711
00:20:13,760 --> 00:20:15,760
boat just just before we wrap up here

712
00:20:15,760 --> 00:20:17,280
you know we've talked about publish

713
00:20:17,280 --> 00:20:19,120
subscribe event driven kind of

714
00:20:19,120 --> 00:20:20,799
one-to-many communication

715
00:20:20,799 --> 00:20:22,640
um you know if we're going to build this

716
00:20:22,640 --> 00:20:24,159
you know if we're not using rest

717
00:20:24,159 --> 00:20:25,840
how would we build this in a better way

718
00:20:25,840 --> 00:20:28,159
well i would say use publish subscribe

719
00:20:28,159 --> 00:20:30,400
use a solace event broker or maybe some

720
00:20:30,400 --> 00:20:32,080
other event broker that you want

721
00:20:32,080 --> 00:20:34,240
one that supports websocket connections

722
00:20:34,240 --> 00:20:35,200
one that supports

723
00:20:35,200 --> 00:20:37,679
multi-protocols and multiple languages

724
00:20:37,679 --> 00:20:38,480
java c

725
00:20:38,480 --> 00:20:41,600
c sharp dot net um obviously

726
00:20:41,600 --> 00:20:43,360
uh you know there's different different

727
00:20:43,360 --> 00:20:45,360
ways of doing this but this is how

728
00:20:45,360 --> 00:20:46,720
my game actually made so even though

729
00:20:46,720 --> 00:20:48,159
this is actually the game was running on

730
00:20:48,159 --> 00:20:49,120
a solus broker

731
00:20:49,120 --> 00:20:51,919
there's actually no solace api code uh

732
00:20:51,919 --> 00:20:53,360
in there so all of the kind of like

733
00:20:53,360 --> 00:20:54,400
interactions we're doing

734
00:20:54,400 --> 00:20:56,640
was actually using an open protocol

735
00:20:56,640 --> 00:20:57,840
called mqtt

736
00:20:57,840 --> 00:21:01,120
and we support uh mqtt amqp rest

737
00:21:01,120 --> 00:21:03,760
and a couple other ones as well so

738
00:21:03,760 --> 00:21:05,280
here's the topic space that the game

739
00:21:05,280 --> 00:21:06,159
actually uses

740
00:21:06,159 --> 00:21:08,080
so you can see it's hierarchical there

741
00:21:08,080 --> 00:21:10,320
are kind of ids at different levels

742
00:21:10,320 --> 00:21:13,280
and it allows all of our applications to

743
00:21:13,280 --> 00:21:15,440
communicate in kind of a many-to-many

744
00:21:15,440 --> 00:21:18,240
kind of mesh based event mesh uh kind of

745
00:21:18,240 --> 00:21:19,520
architecture

746
00:21:19,520 --> 00:21:21,840
so going back to those five previous uh

747
00:21:21,840 --> 00:21:23,520
kind of issues that we had

748
00:21:23,520 --> 00:21:25,520
service discovery you know when i start

749
00:21:25,520 --> 00:21:27,440
the game i start the back end controller

750
00:21:27,440 --> 00:21:28,640
it subscribes to what's called a

751
00:21:28,640 --> 00:21:30,320
well-known topic you know a topic

752
00:21:30,320 --> 00:21:31,440
essentially a service

753
00:21:31,440 --> 00:21:33,120
that's saying hey this is my my

754
00:21:33,120 --> 00:21:34,640
well-known topic

755
00:21:34,640 --> 00:21:36,400
when your game when your phone connects

756
00:21:36,400 --> 00:21:38,000
it publishes one message

757
00:21:38,000 --> 00:21:40,080
on that particular topic and even if i

758
00:21:40,080 --> 00:21:41,840
have multiple race engines running in

759
00:21:41,840 --> 00:21:42,720
the background

760
00:21:42,720 --> 00:21:45,039
because of publish subscribe one to many

761
00:21:45,039 --> 00:21:46,559
every one of those race engines will get

762
00:21:46,559 --> 00:21:48,240
a copy of that one message

763
00:21:48,240 --> 00:21:49,760
and they can then respond back with

764
00:21:49,760 --> 00:21:51,840
their details so a very easy way to kind

765
00:21:51,840 --> 00:21:52,640
of find out

766
00:21:52,640 --> 00:21:54,480
who is out there running by using

767
00:21:54,480 --> 00:21:56,480
publish subscribe

768
00:21:56,480 --> 00:21:58,240
at the start of the race you know so

769
00:21:58,240 --> 00:21:59,679
when we've all joined one race

770
00:21:59,679 --> 00:22:02,080
uh we all subscribe all of the phones

771
00:22:02,080 --> 00:22:03,760
out there we all subscribe to

772
00:22:03,760 --> 00:22:06,880
a race topic a special id that now all i

773
00:22:06,880 --> 00:22:08,720
need to do with my back end controller

774
00:22:08,720 --> 00:22:11,360
is send a single message on this

775
00:22:11,360 --> 00:22:12,159
particular

776
00:22:12,159 --> 00:22:14,720
special topic you know the race id slash

777
00:22:14,720 --> 00:22:15,280
marks

778
00:22:15,280 --> 00:22:16,880
and all of the phones out there because

779
00:22:16,880 --> 00:22:18,799
your subscribers will get it so again

780
00:22:18,799 --> 00:22:20,159
using publish subscribe

781
00:22:20,159 --> 00:22:23,360
but now in a reverse way so um you know

782
00:22:23,360 --> 00:22:25,600
from from client from server out to

783
00:22:25,600 --> 00:22:26,880
client so bi-directional

784
00:22:26,880 --> 00:22:29,679
communication being able to send each

785
00:22:29,679 --> 00:22:31,120
and every row event you know choosing an

786
00:22:31,120 --> 00:22:33,039
asynchronous streaming protocol

787
00:22:33,039 --> 00:22:36,159
such as mqtt such as amqp or one of

788
00:22:36,159 --> 00:22:37,200
solas's protocols

789
00:22:37,200 --> 00:22:38,880
allows you to send many many you know

790
00:22:38,880 --> 00:22:40,720
thousands perhaps of messages

791
00:22:40,720 --> 00:22:43,120
per second even across long links not

792
00:22:43,120 --> 00:22:44,880
waiting for that blocking call

793
00:22:44,880 --> 00:22:46,400
to come back so from a communication

794
00:22:46,400 --> 00:22:48,320
perspective choose a protocol that's

795
00:22:48,320 --> 00:22:49,200
that's right for you

796
00:22:49,200 --> 00:22:50,960
and from an application perspective

797
00:22:50,960 --> 00:22:52,320
ensure that your thread

798
00:22:52,320 --> 00:22:54,159
is not blocking waiting for each

799
00:22:54,159 --> 00:22:55,840
individual response you know the

800
00:22:55,840 --> 00:22:57,120
acknowledgement to come back from the

801
00:22:57,120 --> 00:22:57,919
other side

802
00:22:57,919 --> 00:22:59,679
so build your application and choose

803
00:22:59,679 --> 00:23:01,360
your communication protocols to be as

804
00:23:01,360 --> 00:23:04,240
efficient as possible

805
00:23:04,240 --> 00:23:07,120
and uh yeah finally i guess the you know

806
00:23:07,120 --> 00:23:08,720
kind of the many to many the client to

807
00:23:08,720 --> 00:23:09,760
client communication

808
00:23:09,760 --> 00:23:11,600
again using publish subscribe if

809
00:23:11,600 --> 00:23:13,280
everybody on the green team subscribe to

810
00:23:13,280 --> 00:23:14,159
green topics

811
00:23:14,159 --> 00:23:15,520
you know just need to publish one

812
00:23:15,520 --> 00:23:16,720
message on that green topic and

813
00:23:16,720 --> 00:23:18,000
everybody will get it

814
00:23:18,000 --> 00:23:19,840
so publish subscribe is a very flexible

815
00:23:19,840 --> 00:23:21,039
way of making your applications

816
00:23:21,039 --> 00:23:22,559
communicate and ensure that data is

817
00:23:22,559 --> 00:23:23,039
going

818
00:23:23,039 --> 00:23:25,360
to wherever it needs to and finally the

819
00:23:25,360 --> 00:23:27,760
last one was the analytics right

820
00:23:27,760 --> 00:23:29,360
could we build something where we can

821
00:23:29,360 --> 00:23:31,360
listen to all the data going across

822
00:23:31,360 --> 00:23:33,760
our mesh our application without

823
00:23:33,760 --> 00:23:35,520
actually changing any code

824
00:23:35,520 --> 00:23:36,960
and again because we're using publish

825
00:23:36,960 --> 00:23:39,120
subscribe i can now just create

826
00:23:39,120 --> 00:23:41,679
a new consumer perhaps i'm using a queue

827
00:23:41,679 --> 00:23:43,039
if i want to use persistence

828
00:23:43,039 --> 00:23:46,080
and i subscribe it to all of the topics

829
00:23:46,080 --> 00:23:48,080
so this is in solace this is essentially

830
00:23:48,080 --> 00:23:50,159
a multi-level wildcard it's saying

831
00:23:50,159 --> 00:23:51,760
any data that starts with that first

832
00:23:51,760 --> 00:23:54,400
level of vote i'll get a copy of it

833
00:23:54,400 --> 00:23:56,720
and now this other endpoint now just

834
00:23:56,720 --> 00:23:58,320
receives a copy of everything

835
00:23:58,320 --> 00:24:00,400
without changing any of this code so a

836
00:24:00,400 --> 00:24:01,679
very future

837
00:24:01,679 --> 00:24:04,559
flexible forward uh kind of design uh

838
00:24:04,559 --> 00:24:06,320
using publish subscribe

839
00:24:06,320 --> 00:24:09,039
so check out uh you know thanks thanks

840
00:24:09,039 --> 00:24:10,720
very much i think that's about the right

841
00:24:10,720 --> 00:24:11,760
amount of time

842
00:24:11,760 --> 00:24:13,600
um here's a couple links the dragon boat

843
00:24:13,600 --> 00:24:15,440
code is on on github it's it's

844
00:24:15,440 --> 00:24:17,679
it is uh you know javascript so perhaps

845
00:24:17,679 --> 00:24:18,880
the java people don't really care too

846
00:24:18,880 --> 00:24:19,679
much about that

847
00:24:19,679 --> 00:24:21,520
check out some of our uh spring cloud

848
00:24:21,520 --> 00:24:23,120
stream code generation stuff where we

849
00:24:23,120 --> 00:24:24,960
can take an async api

850
00:24:24,960 --> 00:24:28,400
uh schema and generate code uh from that

851
00:24:28,400 --> 00:24:30,080
and in the middle here is a link to the

852
00:24:30,080 --> 00:24:31,760
solus developer portal we'll re where i

853
00:24:31,760 --> 00:24:32,320
have

854
00:24:32,320 --> 00:24:34,000
we have lots of kind of information on

855
00:24:34,000 --> 00:24:35,919
different apis and protocols

856
00:24:35,919 --> 00:24:38,880
and all sorts of stuff so thanks again

857
00:24:38,880 --> 00:24:40,799
and just reminder the top five people

858
00:24:40,799 --> 00:24:42,480
who won their dragon boat race just send

859
00:24:42,480 --> 00:24:44,000
me a screenshot on slack

860
00:24:44,000 --> 00:24:46,960
and i'll get back to you so all right so

861
00:24:46,960 --> 00:24:47,279
all right

862
00:24:47,279 --> 00:24:50,400
perfect timing thanks matt well done

863
00:24:50,400 --> 00:24:52,320
we have a number of questions so i'm

864
00:24:52,320 --> 00:24:53,840
going to start just in the order that

865
00:24:53,840 --> 00:24:54,960
they've been asked

866
00:24:54,960 --> 00:24:57,200
uh when would you use java event driven

867
00:24:57,200 --> 00:24:59,200
rather than client driven or javascript

868
00:24:59,200 --> 00:25:00,480
programming

869
00:25:00,480 --> 00:25:03,840
um so it really kind of depends um i

870
00:25:03,840 --> 00:25:06,000
am a java guy by trade so a lot of my

871
00:25:06,000 --> 00:25:06,960
back end

872
00:25:06,960 --> 00:25:08,880
knowledge uh like when i usually deploy

873
00:25:08,880 --> 00:25:10,720
onto a server i'll use java for the back

874
00:25:10,720 --> 00:25:11,440
end

875
00:25:11,440 --> 00:25:13,440
and then for the for the gui side i'll

876
00:25:13,440 --> 00:25:14,960
typically use javascript because

877
00:25:14,960 --> 00:25:17,520
it's much easier to kind of do things on

878
00:25:17,520 --> 00:25:18,480
in a browser

879
00:25:18,480 --> 00:25:20,640
so if you have a broker that supports

880
00:25:20,640 --> 00:25:23,120
both javascript and java apis or

881
00:25:23,120 --> 00:25:24,240
protocols

882
00:25:24,240 --> 00:25:25,520
it just allows you to mix and match and

883
00:25:25,520 --> 00:25:27,520
choose whatever you want so in solids we

884
00:25:27,520 --> 00:25:28,960
support multiple protocols and each one

885
00:25:28,960 --> 00:25:30,000
of those protocols has

886
00:25:30,000 --> 00:25:31,919
apis for a bunch of different languages

887
00:25:31,919 --> 00:25:33,360
so you don't necessarily have to choose

888
00:25:33,360 --> 00:25:35,360
only java or only javascript you can

889
00:25:35,360 --> 00:25:37,679
truly have a mix and match kind of

890
00:25:37,679 --> 00:25:39,520
choose your own flavor

891
00:25:39,520 --> 00:25:41,440
which allows you to choose a python api

892
00:25:41,440 --> 00:25:42,720
or a go api

893
00:25:42,720 --> 00:25:44,400
um and kind of mix and match and build

894
00:25:44,400 --> 00:25:45,760
this application kind of choose

895
00:25:45,760 --> 00:25:47,120
whatever language that you want that

896
00:25:47,120 --> 00:25:49,039
you're most comfortable with

897
00:25:49,039 --> 00:25:51,679
cool so out of the open standards you

898
00:25:51,679 --> 00:25:53,600
mentioned what's the easiest one

899
00:25:53,600 --> 00:25:55,039
to use for someone that wants to build

900
00:25:55,039 --> 00:25:56,799
their first event driven

901
00:25:56,799 --> 00:26:00,480
app mqtt by far it is great i use it for

902
00:26:00,480 --> 00:26:02,240
all my demos now it's a very

903
00:26:02,240 --> 00:26:04,400
lightweight publish subscribe api the

904
00:26:04,400 --> 00:26:05,919
apis are very very simple

905
00:26:05,919 --> 00:26:09,360
uh solace apis uh we have a lot of

906
00:26:09,360 --> 00:26:10,880
features built into our broker lots of

907
00:26:10,880 --> 00:26:12,000
really cool stuff

908
00:26:12,000 --> 00:26:13,679
um but if you don't necessarily need

909
00:26:13,679 --> 00:26:15,360
that level of complexity i would say

910
00:26:15,360 --> 00:26:16,480
mqdt

911
00:26:16,480 --> 00:26:18,159
check it out lightweight pub sub it

912
00:26:18,159 --> 00:26:19,840
supports the topic hierarchies

913
00:26:19,840 --> 00:26:21,279
it supports wild cards at different

914
00:26:21,279 --> 00:26:23,440
levels and solos supports both

915
00:26:23,440 --> 00:26:25,200
that and other protocols so you can

916
00:26:25,200 --> 00:26:27,600
start with a solace broker or there are

917
00:26:27,600 --> 00:26:29,679
you know other mqtt brokers out there as

918
00:26:29,679 --> 00:26:31,600
well but yeah mqtt

919
00:26:31,600 --> 00:26:34,720
all the way for sure and i'm assuming

920
00:26:34,720 --> 00:26:36,400
because you have a link to the dragon

921
00:26:36,400 --> 00:26:38,480
boat code that that's open source

922
00:26:38,480 --> 00:26:41,360
uh it is it uh yeah yeah it's it's it's

923
00:26:41,360 --> 00:26:41,760
not

924
00:26:41,760 --> 00:26:43,279
it's not the best code to learn how to

925
00:26:43,279 --> 00:26:44,960
do event driven coding like

926
00:26:44,960 --> 00:26:46,320
probably the majority of the code in

927
00:26:46,320 --> 00:26:48,159
there is kind of state machine and

928
00:26:48,159 --> 00:26:49,679
graphics and stuff like that

929
00:26:49,679 --> 00:26:51,679
like the actual publish subscribe like

930
00:26:51,679 --> 00:26:53,840
most applications the amount of io

931
00:26:53,840 --> 00:26:56,320
code you know is usually very very small

932
00:26:56,320 --> 00:26:58,159
right most applications are more around

933
00:26:58,159 --> 00:27:01,120
graphics or user interface or you know

934
00:27:01,120 --> 00:27:02,720
the logic of it right so

935
00:27:02,720 --> 00:27:04,320
the amount of code that's in there just

936
00:27:04,320 --> 00:27:06,480
for you know the solace parts or the

937
00:27:06,480 --> 00:27:08,320
mqtt parts is actually quite small

938
00:27:08,320 --> 00:27:09,679
but yeah if you want to take that code

939
00:27:09,679 --> 00:27:11,039
and just kind of take a look at it it's

940
00:27:11,039 --> 00:27:12,159
pretty bad it's not

941
00:27:12,159 --> 00:27:13,760
it's my code it's i never really cleaned

942
00:27:13,760 --> 00:27:16,320
it up much so

943
00:27:16,320 --> 00:27:17,679
i thought it was a great way to start a

944
00:27:17,679 --> 00:27:21,039
presentation right you get an

945
00:27:25,039 --> 00:27:26,880
another question uh what benefit do i

946
00:27:26,880 --> 00:27:28,960
get using solace over another broker

947
00:27:28,960 --> 00:27:30,480
like kafka

948
00:27:30,480 --> 00:27:33,919
uh so uh well i you know that's that's

949
00:27:33,919 --> 00:27:34,960
that's a pretty long

950
00:27:34,960 --> 00:27:39,120
uh so uh solace offers kind of more

951
00:27:39,120 --> 00:27:40,399
multi-protocol standards

952
00:27:40,399 --> 00:27:42,159
uh we do support replay which is kind of

953
00:27:42,159 --> 00:27:44,240
a fundamental uh requirement in kafka

954
00:27:44,240 --> 00:27:45,279
for their kind of

955
00:27:45,279 --> 00:27:48,240
um their kind of recovery mechanism we

956
00:27:48,240 --> 00:27:49,600
offer a cloud native

957
00:27:49,600 --> 00:27:51,600
software broker as well as a hardware

958
00:27:51,600 --> 00:27:52,880
appliance so like kind of like if you're

959
00:27:52,880 --> 00:27:54,640
an enterprise customer you can scale up

960
00:27:54,640 --> 00:27:55,679
very easily

961
00:27:55,679 --> 00:27:58,960
um kafka is more for kind of

962
00:27:58,960 --> 00:28:00,880
uh kafka is more like as almost as a

963
00:28:00,880 --> 00:28:02,320
database right it's really kind of built

964
00:28:02,320 --> 00:28:03,919
and smells themselves as a database

965
00:28:03,919 --> 00:28:07,360
as a persistent uh event store um kafka

966
00:28:07,360 --> 00:28:08,480
essentially becomes

967
00:28:08,480 --> 00:28:10,399
a consumer of data off of solace we have

968
00:28:10,399 --> 00:28:12,240
many customers that use solace as their

969
00:28:12,240 --> 00:28:13,440
kind of many-to-many

970
00:28:13,440 --> 00:28:14,880
event-driven mesh between their

971
00:28:14,880 --> 00:28:16,880
applications and kafka will just be

972
00:28:16,880 --> 00:28:18,640
a consumer off of that pulling all that

973
00:28:18,640 --> 00:28:20,240
data down into

974
00:28:20,240 --> 00:28:21,600
putting into their analytics and stuff

975
00:28:21,600 --> 00:28:23,679
like that on our website i'm sure if you

976
00:28:23,679 --> 00:28:25,679
just google solace versus kafka

977
00:28:25,679 --> 00:28:28,559
we have some uh uh you know some

978
00:28:28,559 --> 00:28:30,399
documentation there i have a video on

979
00:28:30,399 --> 00:28:31,600
youtube actually that kind of talks

980
00:28:31,600 --> 00:28:32,080
about

981
00:28:32,080 --> 00:28:34,080
in terms of topics um there's there's

982
00:28:34,080 --> 00:28:35,279
some stuff up on the web so

983
00:28:35,279 --> 00:28:37,200
i'd say just google it and uh it'll

984
00:28:37,200 --> 00:28:39,520
you'll get more information so

985
00:28:39,520 --> 00:28:41,200
all right so you got one minute for this

986
00:28:41,200 --> 00:28:43,279
last one does solace provide an event

987
00:28:43,279 --> 00:28:46,080
portal to enable design of architectures

988
00:28:46,080 --> 00:28:47,919
similar to an api portal you talked

989
00:28:47,919 --> 00:28:49,760
about that's right yeah so

990
00:28:49,760 --> 00:28:53,440
if you head over to uh cloud.solas.com

991
00:28:53,440 --> 00:28:55,120
you can sign up for a free

992
00:28:55,120 --> 00:28:57,200
cloud account uh we send you an email

993
00:28:57,200 --> 00:28:58,399
gives you a notification

994
00:28:58,399 --> 00:29:00,559
uh and in our cloud console it allows

995
00:29:00,559 --> 00:29:02,559
you to spin up one free broker

996
00:29:02,559 --> 00:29:04,399
that gives you like 50 connections uh

997
00:29:04,399 --> 00:29:06,080
but it will also you can actually ask

998
00:29:06,080 --> 00:29:06,720
and request

999
00:29:06,720 --> 00:29:09,440
access to the event portal so our event

1000
00:29:09,440 --> 00:29:10,799
portal is actually being

1001
00:29:10,799 --> 00:29:12,960
uh it's brand new i don't think it's

1002
00:29:12,960 --> 00:29:15,039
even gone ga yet it's getting ga i think

1003
00:29:15,039 --> 00:29:15,360
in

1004
00:29:15,360 --> 00:29:17,919
a week or two um and it will allow you

1005
00:29:17,919 --> 00:29:19,039
to do things like

1006
00:29:19,039 --> 00:29:21,760
design applications schemas topics and

1007
00:29:21,760 --> 00:29:23,279
click and drag basically

1008
00:29:23,279 --> 00:29:24,720
uh the interactions and the

1009
00:29:24,720 --> 00:29:26,320
relationships between them so

1010
00:29:26,320 --> 00:29:28,960
um i wish i threw in a slide or two just

1011
00:29:28,960 --> 00:29:29,760
uh just because i

1012
00:29:29,760 --> 00:29:31,919
did actually have some time but uh yeah

1013
00:29:31,919 --> 00:29:32,960
check it out um

1014
00:29:32,960 --> 00:29:34,720
again maybe on youtube i think we do

1015
00:29:34,720 --> 00:29:35,919
have a couple of videos that kind of

1016
00:29:35,919 --> 00:29:36,880
give a demo of it

1017
00:29:36,880 --> 00:29:38,399
so if you go to the solace youtube

1018
00:29:38,399 --> 00:29:40,559
channel and event portal you'll be able

1019
00:29:40,559 --> 00:29:40,880
to see

1020
00:29:40,880 --> 00:29:42,799
kind of a demo of what it looks like so

1021
00:29:42,799 --> 00:29:44,480
cool so if you want to throw some links

1022
00:29:44,480 --> 00:29:45,039
in slack

1023
00:29:45,039 --> 00:29:48,399
in the uh the java track

1024
00:29:48,399 --> 00:29:50,799
track dash java that'd be great thanks

1025
00:29:50,799 --> 00:29:51,919
all right okay thanks matt thanks

1026
00:29:51,919 --> 00:29:55,840
everybody okay bye-bye

