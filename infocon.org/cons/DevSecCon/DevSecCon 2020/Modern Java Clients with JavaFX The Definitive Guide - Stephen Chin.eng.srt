1
00:00:00,000 --> 00:00:02,080
i'm gonna i'm gonna let him have his 30

2
00:00:02,080 --> 00:00:03,199
seconds

3
00:00:03,199 --> 00:00:04,640
until we're live here but maybe i'll

4
00:00:04,640 --> 00:00:05,920
bring him on because he's got a cool

5
00:00:05,920 --> 00:00:07,120
background

6
00:00:07,120 --> 00:00:09,040
so i like that hello steven how are you

7
00:00:09,040 --> 00:00:12,399
hey how are you doing matt

8
00:00:13,040 --> 00:00:15,280
um so the talk's been going today it

9
00:00:15,280 --> 00:00:18,240
looks like looks like a lot of fun here

10
00:00:18,240 --> 00:00:21,840
yeah it's been fun but you know

11
00:00:21,840 --> 00:00:23,840
good times cool i'm going to talk a

12
00:00:23,840 --> 00:00:24,960
little bit about um

13
00:00:24,960 --> 00:00:28,400
javafx technology now um

14
00:00:28,400 --> 00:00:30,160
i think there's been a lot of

15
00:00:30,160 --> 00:00:31,679
interesting movement in this and

16
00:00:31,679 --> 00:00:34,800
particularly with the java 14 release um

17
00:00:34,800 --> 00:00:36,320
you see more momentum because there's

18
00:00:36,320 --> 00:00:38,000
already support for um

19
00:00:38,000 --> 00:00:40,559
java 14 with gluon and mobile

20
00:00:40,559 --> 00:00:42,840
technologies

21
00:00:42,840 --> 00:00:59,840
um so let me share my my slides here

22
00:01:02,320 --> 00:01:05,360
ah okay i think it worked

23
00:01:05,360 --> 00:01:07,200
okay so um i'm going to talk a little

24
00:01:07,200 --> 00:01:09,600
bit about java client and javafx

25
00:01:09,600 --> 00:01:11,600
technology

26
00:01:11,600 --> 00:01:15,119
and let's start from the beginning

27
00:01:15,119 --> 00:01:16,880
of where all this technology came from

28
00:01:16,880 --> 00:01:20,360
so javafx actually dates back to

29
00:01:20,360 --> 00:01:24,000
2006 um with a platform called

30
00:01:24,000 --> 00:01:26,960
form follows function this was developed

31
00:01:26,960 --> 00:01:29,439
by christopher oliver

32
00:01:29,439 --> 00:01:32,799
and it was the um the early stages of

33
00:01:32,799 --> 00:01:34,799
javafx that had a scripting language

34
00:01:34,799 --> 00:01:38,000
which was kind of javascript desk

35
00:01:38,000 --> 00:01:40,240
it allowed you to build uis quickly

36
00:01:40,240 --> 00:01:42,000
without worrying about null pointers

37
00:01:42,000 --> 00:01:45,600
um complex binding and came with a

38
00:01:45,600 --> 00:01:48,880
um with a cool graphics library which

39
00:01:48,880 --> 00:01:51,920
allowed you to build um user interfaces

40
00:01:51,920 --> 00:01:54,079
very quickly

41
00:01:54,079 --> 00:01:55,520
for those of you who remember this it

42
00:01:55,520 --> 00:01:57,840
was actually based on piccolo 2d

43
00:01:57,840 --> 00:02:00,159
which was a zooming user interface

44
00:02:00,159 --> 00:02:01,200
framework

45
00:02:01,200 --> 00:02:04,320
written on top of java td and when

46
00:02:04,320 --> 00:02:07,600
um sun acquired c beyond

47
00:02:07,600 --> 00:02:09,679
they also took this technology and they

48
00:02:09,679 --> 00:02:11,038
turned it into what we now know as

49
00:02:11,038 --> 00:02:12,640
javafx

50
00:02:12,640 --> 00:02:14,959
the 1-0 release of javafx happened back

51
00:02:14,959 --> 00:02:17,520
in 2008

52
00:02:17,520 --> 00:02:21,120
and this was um i think

53
00:02:21,120 --> 00:02:25,040
a a time for javafx where um

54
00:02:25,040 --> 00:02:26,879
it was really um coming out for the

55
00:02:26,879 --> 00:02:28,239
first time um

56
00:02:28,239 --> 00:02:31,280
replacing legacy technologies like swing

57
00:02:31,280 --> 00:02:33,680
and um i was actually doing some ui work

58
00:02:33,680 --> 00:02:35,360
at the time

59
00:02:35,360 --> 00:02:37,840
with josh marinacci and he recommended

60
00:02:37,840 --> 00:02:38,800
to give

61
00:02:38,800 --> 00:02:41,200
javafx a try for my widget framework and

62
00:02:41,200 --> 00:02:42,879
so i started back on the really really

63
00:02:42,879 --> 00:02:44,400
early days of

64
00:02:44,400 --> 00:02:47,599
job fx back in javafx 10.

65
00:02:47,599 --> 00:02:50,640
um in 2011 java

66
00:02:50,640 --> 00:02:53,519
fx2 came out and um this actually

67
00:02:53,519 --> 00:02:56,640
removed the ui language javafx script

68
00:02:56,640 --> 00:02:58,640
so at first it was seemed like a loss

69
00:02:58,640 --> 00:03:00,879
not having kind of the um

70
00:03:00,879 --> 00:03:02,159
visual scripting language and the

71
00:03:02,159 --> 00:03:04,560
binding support and a lot of the um

72
00:03:04,560 --> 00:03:06,000
the vision for what christopher oliver

73
00:03:06,000 --> 00:03:07,599
had for javafx

74
00:03:07,599 --> 00:03:09,920
but it actually made it more accessible

75
00:03:09,920 --> 00:03:11,680
to a larger body of java developers you

76
00:03:11,680 --> 00:03:12,720
don't need to learn a new

77
00:03:12,720 --> 00:03:16,560
jvm language to use javafx

78
00:03:16,560 --> 00:03:18,800
also it now gave you a lot more

79
00:03:18,800 --> 00:03:20,239
capabilities

80
00:03:20,239 --> 00:03:22,319
since it was just a pure java library

81
00:03:22,319 --> 00:03:23,840
you could use it with other

82
00:03:23,840 --> 00:03:26,640
scripting languages and jvm languages

83
00:03:26,640 --> 00:03:27,920
and um

84
00:03:27,920 --> 00:03:31,760
back in um when that change was made

85
00:03:31,760 --> 00:03:34,480
it also a couple years later got bundled

86
00:03:34,480 --> 00:03:35,599
together

87
00:03:35,599 --> 00:03:37,920
with the um java runtime so job sc7

88
00:03:37,920 --> 00:03:38,879
update six

89
00:03:38,879 --> 00:03:41,680
included bundling of javafx um so you

90
00:03:41,680 --> 00:03:44,080
could use it together with the jdk

91
00:03:44,080 --> 00:03:46,560
um and um it was finally fully

92
00:03:46,560 --> 00:03:48,239
integrated in java

93
00:03:48,239 --> 00:03:51,680
um 2014 and java 8.

94
00:03:51,680 --> 00:03:54,959
um it was more most recently removed

95
00:03:54,959 --> 00:03:56,000
from the jdk

96
00:03:56,000 --> 00:04:00,400
back in 2018 and jdk 11 and

97
00:04:00,400 --> 00:04:02,640
this was this was a sad moment for for

98
00:04:02,640 --> 00:04:04,879
all of us big job fx fans that it was no

99
00:04:04,879 --> 00:04:06,799
longer shipped together with

100
00:04:06,799 --> 00:04:09,920
the java language um now i have a a

101
00:04:09,920 --> 00:04:13,040
short um clip to share with you guys but

102
00:04:13,040 --> 00:04:14,879
i'm going to switch audio sources just

103
00:04:14,879 --> 00:04:16,639
for a sec

104
00:04:16,639 --> 00:04:19,440
so you guys can hear this and you're

105
00:04:19,440 --> 00:04:20,639
going to you're going to hear it through

106
00:04:20,639 --> 00:04:21,839
my microphone

107
00:04:21,839 --> 00:04:23,360
because i couldn't get the audio loop

108
00:04:23,360 --> 00:04:25,759
working

109
00:04:25,759 --> 00:04:27,360
all right so let's see let's hopefully

110
00:04:27,360 --> 00:04:30,240
this comes across

111
00:04:34,479 --> 00:04:43,840
i'll be back

112
00:04:44,320 --> 00:04:46,960
okay so in the in the famous words of um

113
00:04:46,960 --> 00:04:48,479
schwarzenegger

114
00:04:48,479 --> 00:04:51,680
um javafx technology has made a

115
00:04:51,680 --> 00:04:56,160
resurgence and um now you can use

116
00:04:56,160 --> 00:04:58,320
javafx technology with builds which are

117
00:04:58,320 --> 00:05:00,080
shipped by gluon

118
00:05:00,080 --> 00:05:02,479
um which is a small company founded by

119
00:05:02,479 --> 00:05:03,759
johann vos

120
00:05:03,759 --> 00:05:06,880
who is also the actually the currently

121
00:05:06,880 --> 00:05:08,960
the only external open jdk contributor

122
00:05:08,960 --> 00:05:10,000
so he's contributing

123
00:05:10,000 --> 00:05:13,120
to javafx

124
00:05:13,120 --> 00:05:16,960
in the open they've released builds for

125
00:05:16,960 --> 00:05:21,039
java 11 java 12 java 13 and now java 14.

126
00:05:21,039 --> 00:05:22,880
they also picked up maintenance of scene

127
00:05:22,880 --> 00:05:24,400
builder which is

128
00:05:24,400 --> 00:05:25,840
really the best way to get started with

129
00:05:25,840 --> 00:05:27,840
javafx technology

130
00:05:27,840 --> 00:05:29,199
and we'll talk about this some more but

131
00:05:29,199 --> 00:05:31,280
they do java on mobile technology so you

132
00:05:31,280 --> 00:05:33,199
can run javafx

133
00:05:33,199 --> 00:05:36,840
on ios and also on android using their

134
00:05:36,840 --> 00:05:38,000
technology

135
00:05:38,000 --> 00:05:42,000
um and just as a

136
00:05:42,000 --> 00:05:44,960
short um intersperse for for folks

137
00:05:44,960 --> 00:05:46,160
watching the talk

138
00:05:46,160 --> 00:05:49,199
you don't need to take any notes or

139
00:05:49,199 --> 00:05:52,800
um or i'm writing down for this talk

140
00:05:52,800 --> 00:05:54,400
because all the slides are available

141
00:05:54,400 --> 00:05:58,080
at this url um jfrogge.com show notes

142
00:05:58,080 --> 00:05:59,680
so right before the talk i posted the

143
00:05:59,680 --> 00:06:02,560
full deck of slides um there for you

144
00:06:02,560 --> 00:06:04,319
also there's a video of this talk so

145
00:06:04,319 --> 00:06:05,840
we'll post um the video when it's

146
00:06:05,840 --> 00:06:06,800
released

147
00:06:06,800 --> 00:06:08,720
and um we're going to do a raffle for

148
00:06:08,720 --> 00:06:10,639
three nintendo switches

149
00:06:10,639 --> 00:06:13,280
so if like me you have a couple kids at

150
00:06:13,280 --> 00:06:13,759
home

151
00:06:13,759 --> 00:06:16,720
who are bored all the time because their

152
00:06:16,720 --> 00:06:18,319
schoolwork takes two hours and the rest

153
00:06:18,319 --> 00:06:19,440
of the time they're

154
00:06:19,440 --> 00:06:21,120
looking for things to do and you know

155
00:06:21,120 --> 00:06:22,240
bugging you while you're trying to do

156
00:06:22,240 --> 00:06:23,199
work

157
00:06:23,199 --> 00:06:25,680
um the best cure for that is animal

158
00:06:25,680 --> 00:06:26,639
crossing

159
00:06:26,639 --> 00:06:28,000
which my daughter was playing most of

160
00:06:28,000 --> 00:06:30,880
today so um highly recommended that

161
00:06:30,880 --> 00:06:33,120
you enter the raffle but also get your

162
00:06:33,120 --> 00:06:34,720
kids animal crossing because it's a

163
00:06:34,720 --> 00:06:36,240
great way for them to

164
00:06:36,240 --> 00:06:37,520
to spend time actually speaking of

165
00:06:37,520 --> 00:06:39,280
animal crossing there is a

166
00:06:39,280 --> 00:06:42,080
a conference which is done entirely in

167
00:06:42,080 --> 00:06:44,319
animal crossing as a virtual conference

168
00:06:44,319 --> 00:06:47,199
um i think it's called devops desert

169
00:06:47,199 --> 00:06:48,560
island

170
00:06:48,560 --> 00:06:49,840
anyway if you're into devops that's a

171
00:06:49,840 --> 00:06:51,919
nice conference to check out

172
00:06:51,919 --> 00:06:53,840
okay so i think the best way to get

173
00:06:53,840 --> 00:06:55,280
started with learning job effects

174
00:06:55,280 --> 00:06:56,639
technology is

175
00:06:56,639 --> 00:06:59,840
scene builder and i'm gonna

176
00:06:59,840 --> 00:07:01,599
actually show you guys scene builder

177
00:07:01,599 --> 00:07:03,840
right now

178
00:07:04,560 --> 00:07:07,440
so this is the ui you can start with a

179
00:07:07,440 --> 00:07:09,680
shell of an application on the

180
00:07:09,680 --> 00:07:12,720
the left side here it gives you a view

181
00:07:12,720 --> 00:07:14,240
of all the different controls

182
00:07:14,240 --> 00:07:16,400
and containers you can add in so i

183
00:07:16,400 --> 00:07:17,840
already have a master

184
00:07:17,840 --> 00:07:20,000
detail view here and some some menus

185
00:07:20,000 --> 00:07:21,919
added in but let's

186
00:07:21,919 --> 00:07:23,759
let's add some additional controls into

187
00:07:23,759 --> 00:07:26,240
here we could put

188
00:07:26,240 --> 00:07:30,240
a full full html editor

189
00:07:30,240 --> 00:07:33,039
we could add images into here and of

190
00:07:33,039 --> 00:07:34,160
course we need to

191
00:07:34,160 --> 00:07:35,520
we need to choose something wonderful

192
00:07:35,520 --> 00:07:38,159
for an image

193
00:07:39,599 --> 00:07:45,840
let's choose only the finest

194
00:07:45,919 --> 00:07:48,319
stuff from our motorcycle tours around

195
00:07:48,319 --> 00:07:50,240
japan given the current situation we

196
00:07:50,240 --> 00:07:51,919
can't actually

197
00:07:51,919 --> 00:07:53,919
cruise around the world anymore but we

198
00:07:53,919 --> 00:07:57,120
can we can have nice photos of that

199
00:07:57,120 --> 00:07:58,639
so this gives you an idea of how to mock

200
00:07:58,639 --> 00:08:00,240
up a ui

201
00:08:00,240 --> 00:08:02,879
really quickly and you can view it since

202
00:08:02,879 --> 00:08:04,720
this application is written in javafx

203
00:08:04,720 --> 00:08:05,440
you can actually

204
00:08:05,440 --> 00:08:09,199
um view it right from here

205
00:08:09,199 --> 00:08:11,440
um and it's it's a it's a functional

206
00:08:11,440 --> 00:08:12,479
user interface

207
00:08:12,479 --> 00:08:14,800
so um this actually is a is a

208
00:08:14,800 --> 00:08:16,400
functioning

209
00:08:16,400 --> 00:08:18,800
javafx application that lets you test it

210
00:08:18,800 --> 00:08:19,919
out

211
00:08:19,919 --> 00:08:21,039
and then you can bring it right into

212
00:08:21,039 --> 00:08:22,560
your id and continue editing it from

213
00:08:22,560 --> 00:08:23,919
there the way scene builder works is it

214
00:08:23,919 --> 00:08:26,080
only generates an xml definition of your

215
00:08:26,080 --> 00:08:27,280
ui

216
00:08:27,280 --> 00:08:30,720
you can generate the xml you can also

217
00:08:30,720 --> 00:08:33,200
map controller objects and

218
00:08:33,200 --> 00:08:35,039
[Music]

219
00:08:35,039 --> 00:08:37,039
here's one of the samples from the book

220
00:08:37,039 --> 00:08:39,120
hello world javafx and you know same

221
00:08:39,120 --> 00:08:41,919
idea it has a very simple scene graph

222
00:08:41,919 --> 00:08:46,080
with some labels um some visual effects

223
00:08:46,080 --> 00:08:48,880
i believe there is like a drop shadow

224
00:08:48,880 --> 00:08:50,000
and

225
00:08:50,000 --> 00:08:51,680
a bloom effect and some other stuff

226
00:08:51,680 --> 00:08:54,080
which which is layered on top of this to

227
00:08:54,080 --> 00:08:54,720
create nice

228
00:08:54,720 --> 00:08:57,279
visuals so scene builder is the quickest

229
00:08:57,279 --> 00:08:58,800
way to get started with javafx

230
00:08:58,800 --> 00:09:01,920
technology and quickly explore

231
00:09:01,920 --> 00:09:06,880
what you can do with the technology

232
00:09:06,880 --> 00:09:08,480
there's a bunch of companies which are

233
00:09:08,480 --> 00:09:11,120
using javafx today to build commercial

234
00:09:11,120 --> 00:09:11,920
applications

235
00:09:11,920 --> 00:09:13,920
um one example of is mint training and

236
00:09:13,920 --> 00:09:16,000
resource management which

237
00:09:16,000 --> 00:09:18,880
um they do complex user interfaces for

238
00:09:18,880 --> 00:09:20,320
um

239
00:09:20,320 --> 00:09:23,440
for doing management of um flights and

240
00:09:23,440 --> 00:09:24,000
crews

241
00:09:24,000 --> 00:09:26,240
and um probably right now they're not

242
00:09:26,240 --> 00:09:27,760
getting a whole lot of business but you

243
00:09:27,760 --> 00:09:29,120
can see that you can do

244
00:09:29,120 --> 00:09:31,440
really complex uis with gantt charts and

245
00:09:31,440 --> 00:09:32,800
different visual paradigms which would

246
00:09:32,800 --> 00:09:34,959
be relatively hard to um

247
00:09:34,959 --> 00:09:36,720
it's a code up in a web user interface

248
00:09:36,720 --> 00:09:39,600
also mobile applications

249
00:09:39,600 --> 00:09:41,360
um we'll talk a bit more about mobile

250
00:09:41,360 --> 00:09:42,959
applications in a bit but you can build

251
00:09:42,959 --> 00:09:44,560
mobile applications for is and for

252
00:09:44,560 --> 00:09:47,279
android um it's entirely cross-platform

253
00:09:47,279 --> 00:09:49,519
so it'll run on desktop it'll run on

254
00:09:49,519 --> 00:09:51,360
mobile devices and from the end user

255
00:09:51,360 --> 00:09:52,640
standpoint that you don't even know that

256
00:09:52,640 --> 00:09:54,800
you're running

257
00:09:54,800 --> 00:09:57,680
a javafx application because it compiles

258
00:09:57,680 --> 00:09:58,800
down to native code and

259
00:09:58,800 --> 00:10:01,920
installs like a normal application so

260
00:10:01,920 --> 00:10:02,640
this is the

261
00:10:02,640 --> 00:10:05,680
devoxx conference application again very

262
00:10:05,680 --> 00:10:07,360
sad that they're not able to run their

263
00:10:07,360 --> 00:10:09,600
physical conferences i think the the

264
00:10:09,600 --> 00:10:12,320
most recent casualty was um

265
00:10:12,320 --> 00:10:15,200
um devoxx paris which had to get or

266
00:10:15,200 --> 00:10:18,000
france which had to get postponed again

267
00:10:18,000 --> 00:10:19,519
but hopefully they're also able to

268
00:10:19,519 --> 00:10:21,600
restart conferences soon

269
00:10:21,600 --> 00:10:23,519
and here's another example which is a

270
00:10:23,519 --> 00:10:25,360
nasa project the nasa deep space

271
00:10:25,360 --> 00:10:27,600
trajectory explorer

272
00:10:27,600 --> 00:10:30,959
and this is an example of a very complex

273
00:10:30,959 --> 00:10:32,640
visualization

274
00:10:32,640 --> 00:10:36,320
using libraries for calculating

275
00:10:36,320 --> 00:10:39,519
paths of projectiles in space

276
00:10:39,519 --> 00:10:40,959
and it's something which would be very

277
00:10:40,959 --> 00:10:42,959
hard for you to build in other

278
00:10:42,959 --> 00:10:45,360
technologies because you need both

279
00:10:45,360 --> 00:10:50,079
an advanced 3d library as well as

280
00:10:50,079 --> 00:10:51,920
to take advantage of large java

281
00:10:51,920 --> 00:10:53,200
scientific libraries for the

282
00:10:53,200 --> 00:10:55,600
calculations

283
00:10:55,600 --> 00:10:58,560
so the the project which did this diane

284
00:10:58,560 --> 00:10:58,880
is

285
00:10:58,880 --> 00:11:00,480
one of the leads and she was nice enough

286
00:11:00,480 --> 00:11:02,079
to both contribute

287
00:11:02,079 --> 00:11:04,800
um it is a use case and also send us

288
00:11:04,800 --> 00:11:05,760
some photos

289
00:11:05,760 --> 00:11:08,560
with live examples from the project so

290
00:11:08,560 --> 00:11:09,680
speaking of 3d

291
00:11:09,680 --> 00:11:11,680
let me walk you through some quick

292
00:11:11,680 --> 00:11:13,839
examples of how you can do 3d technology

293
00:11:13,839 --> 00:11:15,519
in javafx

294
00:11:15,519 --> 00:11:17,680
you start with basic shapes boxes

295
00:11:17,680 --> 00:11:21,360
cylinders spheres or or meshes

296
00:11:21,360 --> 00:11:24,320
and then on top of the meshes you do

297
00:11:24,320 --> 00:11:25,920
texture mapping to provide

298
00:11:25,920 --> 00:11:29,040
a little bit of um

299
00:11:29,040 --> 00:11:32,079
more realism to simple objects

300
00:11:32,079 --> 00:11:33,680
and this allows you to create fairly

301
00:11:33,680 --> 00:11:36,640
complex visuals and scene graphs without

302
00:11:36,640 --> 00:11:38,079
a lot of

303
00:11:38,079 --> 00:11:41,519
processing or 3d work and the final bit

304
00:11:41,519 --> 00:11:42,480
is you slack

305
00:11:42,480 --> 00:11:44,240
stack lights on top of this so you can

306
00:11:44,240 --> 00:11:46,560
have point lights ambient lights

307
00:11:46,560 --> 00:11:49,120
um you can choose where these exist in

308
00:11:49,120 --> 00:11:52,000
3d space and this is how you illuminate

309
00:11:52,000 --> 00:11:54,880
the um the 3d scenes so let me give you

310
00:11:54,880 --> 00:11:56,000
guys some examples

311
00:11:56,000 --> 00:12:00,639
of this so let's look at

312
00:12:00,639 --> 00:12:05,279
how you create some basic objects first

313
00:12:05,760 --> 00:12:10,000
i'm going to make this bigger

314
00:12:10,000 --> 00:12:13,440
if i can get the key binding right

315
00:12:16,240 --> 00:12:19,360
okay so um here's a simple code example

316
00:12:19,360 --> 00:12:22,480
for getting a new sphere setting the

317
00:12:22,480 --> 00:12:24,639
size of the sphere translating it

318
00:12:24,639 --> 00:12:27,120
um a cylinder same thing and then also

319
00:12:27,120 --> 00:12:28,560
moving it into um

320
00:12:28,560 --> 00:12:30,959
so it's not on top of the the sphere and

321
00:12:30,959 --> 00:12:33,279
then finally a box

322
00:12:33,279 --> 00:12:34,639
and then putting the sphere cylinder in

323
00:12:34,639 --> 00:12:37,120
the box into the scene graph creating

324
00:12:37,120 --> 00:12:40,160
some rotation on it and then

325
00:12:40,160 --> 00:12:42,160
this has no lighting but there's a

326
00:12:42,160 --> 00:12:43,519
default um

327
00:12:43,519 --> 00:12:46,560
ambient light which is included on this

328
00:12:46,560 --> 00:12:49,839
um let's see if i can

329
00:12:50,480 --> 00:12:53,839
run it okay so here

330
00:12:53,839 --> 00:12:56,959
is what the um scene looks like with

331
00:12:56,959 --> 00:12:59,519
the three objects the um sphere the box

332
00:12:59,519 --> 00:13:00,000
and the

333
00:13:00,000 --> 00:13:04,839
cylinder um all in the the 3d visual

334
00:13:04,839 --> 00:13:07,839
space

335
00:13:08,560 --> 00:13:10,399
um so that's a quick example of running

336
00:13:10,399 --> 00:13:11,600
something with

337
00:13:11,600 --> 00:13:13,680
simple objects now of course we talked

338
00:13:13,680 --> 00:13:15,200
about you ideally you want to do some

339
00:13:15,200 --> 00:13:17,120
sort of mapping

340
00:13:17,120 --> 00:13:18,839
on top of this so let's look at an

341
00:13:18,839 --> 00:13:20,959
example

342
00:13:20,959 --> 00:13:24,399
where we map onto a sphere we're going

343
00:13:24,399 --> 00:13:25,440
to

344
00:13:25,440 --> 00:13:29,920
define a mesh and do a mercator mapping

345
00:13:29,920 --> 00:13:33,360
onto it so here's our

346
00:13:33,360 --> 00:13:38,800
standard flat mercator mapping in a jpeg

347
00:13:41,920 --> 00:13:46,320
the code here turns that into an image

348
00:13:46,320 --> 00:13:49,279
then sets it up as a material and then

349
00:13:49,279 --> 00:13:51,680
applies that using a diffuse map to a

350
00:13:51,680 --> 00:13:54,639
to a sphere um then it adds the the

351
00:13:54,639 --> 00:13:56,079
sphere to the scene

352
00:13:56,079 --> 00:13:57,760
and in addition we're setting up some

353
00:13:57,760 --> 00:13:59,760
mouse handlers here so when you

354
00:13:59,760 --> 00:14:02,160
when you um click and drag on the the

355
00:14:02,160 --> 00:14:03,920
sphere it will change the

356
00:14:03,920 --> 00:14:17,839
angle and the orientation of the sphere

357
00:14:19,279 --> 00:14:21,519
okay and here we can see the um the

358
00:14:21,519 --> 00:14:23,680
sphere running

359
00:14:23,680 --> 00:14:26,160
with the mapping on it and then you can

360
00:14:26,160 --> 00:14:27,839
you can kind of navigate the globe by

361
00:14:27,839 --> 00:14:29,360
dragging left and right

362
00:14:29,360 --> 00:14:31,040
and that changes the rotation of the

363
00:14:31,040 --> 00:14:34,160
sphere which then rotates it with the um

364
00:14:34,160 --> 00:14:36,399
the mapped properties on it so really

365
00:14:36,399 --> 00:14:38,320
easy to create

366
00:14:38,320 --> 00:14:45,680
nice visual effects in 3d

367
00:14:45,680 --> 00:14:48,240
okay let's look at a more complicated 3d

368
00:14:48,240 --> 00:14:48,880
example

369
00:14:48,880 --> 00:14:54,079
so let's do

370
00:14:55,680 --> 00:14:58,000
we can do a light demo to show some of

371
00:14:58,000 --> 00:15:00,240
the the lighting so this one

372
00:15:00,240 --> 00:15:02,960
this particular example has um

373
00:15:02,960 --> 00:15:04,399
[Music]

374
00:15:04,399 --> 00:15:06,240
three different light sources or two

375
00:15:06,240 --> 00:15:08,240
different light sources

376
00:15:08,240 --> 00:15:11,360
it has a red light and a blue light and

377
00:15:11,360 --> 00:15:13,920
we can move these lights in space to

378
00:15:13,920 --> 00:15:15,199
illuminate a um

379
00:15:15,199 --> 00:15:17,199
a square so we're adding the lights to

380
00:15:17,199 --> 00:15:18,880
the scene writing a square to the screen

381
00:15:18,880 --> 00:15:21,199
and then adding some sliders

382
00:15:21,199 --> 00:15:23,600
um when i was talking about binding

383
00:15:23,600 --> 00:15:24,240
earlier

384
00:15:24,240 --> 00:15:26,959
the um library way of doing this in

385
00:15:26,959 --> 00:15:29,360
javafx is on any property

386
00:15:29,360 --> 00:15:31,040
there's additional functions to bind and

387
00:15:31,040 --> 00:15:32,560
when you create a bi-directional binding

388
00:15:32,560 --> 00:15:35,759
this will bind the property to

389
00:15:35,759 --> 00:15:37,440
both ways if you update the property it

390
00:15:37,440 --> 00:15:39,199
updates the slider if you update the

391
00:15:39,199 --> 00:15:40,639
slider it updates the properties this is

392
00:15:40,639 --> 00:15:42,399
a nice way to

393
00:15:42,399 --> 00:15:43,920
directly tie together things in your

394
00:15:43,920 --> 00:15:47,519
visual scene with ui elements

395
00:15:53,279 --> 00:15:54,880
and if we run this example you can see

396
00:15:54,880 --> 00:15:56,959
we have a we have a square

397
00:15:56,959 --> 00:15:58,320
and then we have a couple lights so we

398
00:15:58,320 --> 00:16:00,000
have a red light

399
00:16:00,000 --> 00:16:02,320
so i'll pull that to the side here and

400
00:16:02,320 --> 00:16:04,160
then we have a blue light

401
00:16:04,160 --> 00:16:06,560
so if only the red light or only the

402
00:16:06,560 --> 00:16:07,920
blue light's illuminating you can see

403
00:16:07,920 --> 00:16:08,480
that

404
00:16:08,480 --> 00:16:10,560
that point lights illuminate the squares

405
00:16:10,560 --> 00:16:12,480
the sides of the square and the other

406
00:16:12,480 --> 00:16:14,880
side of the score is black

407
00:16:14,880 --> 00:16:18,639
now we can hopefully move the blue light

408
00:16:18,639 --> 00:16:21,360
to be on top of the red light so now

409
00:16:21,360 --> 00:16:23,759
we're blending colors

410
00:16:23,759 --> 00:16:25,680
so we're blending to create a nice um

411
00:16:25,680 --> 00:16:27,440
purple shade

412
00:16:27,440 --> 00:16:30,000
and if we if we get the lights just

413
00:16:30,000 --> 00:16:31,680
right

414
00:16:31,680 --> 00:16:34,880
we should be able to

415
00:16:35,680 --> 00:16:37,440
pull it out and then illuminate all

416
00:16:37,440 --> 00:16:39,519
sides of the cube

417
00:16:39,519 --> 00:16:41,759
there we go so now i have it kind of

418
00:16:41,759 --> 00:16:43,199
like directly in front of the cube and

419
00:16:43,199 --> 00:16:44,560
now we're illuminating all three faces

420
00:16:44,560 --> 00:16:47,758
of the cube in a nice purple

421
00:16:48,839 --> 00:16:51,839
tone

422
00:16:54,560 --> 00:16:56,560
okay and let's let's look at one more 3d

423
00:16:56,560 --> 00:16:58,720
example before we um

424
00:16:58,720 --> 00:17:02,079
before we move on um okay so this

425
00:17:02,079 --> 00:17:03,839
this is this is a good example and i

426
00:17:03,839 --> 00:17:06,000
have a slide about this as well but um

427
00:17:06,000 --> 00:17:07,760
one of the other things which they which

428
00:17:07,760 --> 00:17:09,199
they did on the

429
00:17:09,199 --> 00:17:11,039
nasa deep space trajectory explorer

430
00:17:11,039 --> 00:17:13,359
project is they also created a

431
00:17:13,359 --> 00:17:16,880
um a library called fxyz which

432
00:17:16,880 --> 00:17:19,359
they use for some more complex 3d

433
00:17:19,359 --> 00:17:21,199
calculations

434
00:17:21,199 --> 00:17:22,880
and so this is an example of one of the

435
00:17:22,880 --> 00:17:25,280
um one of the different library objects

436
00:17:25,280 --> 00:17:26,799
they have which is a spring mesh and

437
00:17:26,799 --> 00:17:28,799
then you can set complex properties like

438
00:17:28,799 --> 00:17:29,919
the radius

439
00:17:29,919 --> 00:17:33,360
the pitch the length and

440
00:17:33,360 --> 00:17:36,240
create more complex visual elements with

441
00:17:36,240 --> 00:17:37,600
less coding

442
00:17:37,600 --> 00:17:39,840
so here's an example of a a rainbow

443
00:17:39,840 --> 00:17:41,600
colored spring mesh so you can see it's

444
00:17:41,600 --> 00:17:43,760
really easy to create complex

445
00:17:43,760 --> 00:17:46,720
visual effects with the base java 3d

446
00:17:46,720 --> 00:17:47,440
libraries

447
00:17:47,440 --> 00:17:49,440
javafx 3d libraries and you can do even

448
00:17:49,440 --> 00:17:52,240
more complicated examples by using

449
00:17:52,240 --> 00:17:55,280
third-party libraries

450
00:17:55,520 --> 00:17:58,720
um okay so let's talk a bit

451
00:17:58,720 --> 00:18:02,080
about packaging your platform and

452
00:18:02,080 --> 00:18:05,520
there's there's three big um pieces of

453
00:18:05,520 --> 00:18:06,080
advice

454
00:18:06,080 --> 00:18:08,960
which um i i want to give people who

455
00:18:08,960 --> 00:18:10,480
maybe have done

456
00:18:10,480 --> 00:18:11,840
client development in the past or

457
00:18:11,840 --> 00:18:13,200
currently doing client development are

458
00:18:13,200 --> 00:18:14,640
looking at

459
00:18:14,640 --> 00:18:16,960
how you do things today with kind of

460
00:18:16,960 --> 00:18:18,240
best practices for rich client

461
00:18:18,240 --> 00:18:19,840
applications today

462
00:18:19,840 --> 00:18:22,320
so the first one is when you package

463
00:18:22,320 --> 00:18:24,000
your application

464
00:18:24,000 --> 00:18:26,640
um a big consideration used to be the

465
00:18:26,640 --> 00:18:27,280
size

466
00:18:27,280 --> 00:18:30,960
of your application so folks optimize

467
00:18:30,960 --> 00:18:32,640
for having the smallest possible

468
00:18:32,640 --> 00:18:35,840
distributable object but if you look at

469
00:18:35,840 --> 00:18:36,640
the growth

470
00:18:36,640 --> 00:18:40,000
of the size of applications and this is

471
00:18:40,000 --> 00:18:42,400
an example on ios

472
00:18:42,400 --> 00:18:46,240
um of how large applications have gotten

473
00:18:46,240 --> 00:18:48,080
you you see regular see applications you

474
00:18:48,080 --> 00:18:49,679
download from the store that are two

475
00:18:49,679 --> 00:18:51,520
gigabytes and larger even from large

476
00:18:51,520 --> 00:18:52,559
companies

477
00:18:52,559 --> 00:18:56,320
so um i think in general the size and

478
00:18:56,320 --> 00:18:58,640
storage of devices has been going up

479
00:18:58,640 --> 00:19:00,400
um the amount of space your application

480
00:19:00,400 --> 00:19:02,080
consumes is less of an issue

481
00:19:02,080 --> 00:19:03,440
and this gives you more packaging

482
00:19:03,440 --> 00:19:05,280
capabilities because now you can package

483
00:19:05,280 --> 00:19:06,720
not only your application

484
00:19:06,720 --> 00:19:08,480
but you can package the platform that it

485
00:19:08,480 --> 00:19:11,600
runs on together with it

486
00:19:11,600 --> 00:19:14,640
so what works but is not recommended

487
00:19:14,640 --> 00:19:16,480
is to package your application as a fat

488
00:19:16,480 --> 00:19:18,720
jar this is the smallest

489
00:19:18,720 --> 00:19:21,280
possible distribution of your package

490
00:19:21,280 --> 00:19:23,200
because it just includes the code

491
00:19:23,200 --> 00:19:26,320
but the problem is that often your users

492
00:19:26,320 --> 00:19:27,600
won't have the right version of java

493
00:19:27,600 --> 00:19:28,559
installed

494
00:19:28,559 --> 00:19:30,240
or they'll have issues running it from

495
00:19:30,240 --> 00:19:32,400
the command line and this gives a really

496
00:19:32,400 --> 00:19:33,840
bad experience to folks who are trying

497
00:19:33,840 --> 00:19:36,320
to use your application

498
00:19:36,320 --> 00:19:38,960
also applets are deprecated now that's

499
00:19:38,960 --> 00:19:40,480
been taken out

500
00:19:40,480 --> 00:19:42,240
and webstart also has been officially

501
00:19:42,240 --> 00:19:44,480
deprecated so um

502
00:19:44,480 --> 00:19:46,640
really what you'd prefer to do is to use

503
00:19:46,640 --> 00:19:47,840
either j-link

504
00:19:47,840 --> 00:19:51,280
or j-package j-link allows you to link

505
00:19:51,280 --> 00:19:52,400
together the

506
00:19:52,400 --> 00:19:54,480
java runtime together with modular

507
00:19:54,480 --> 00:19:55,600
applications

508
00:19:55,600 --> 00:19:57,120
so this way you can package your entire

509
00:19:57,120 --> 00:19:59,039
application together as one bundle

510
00:19:59,039 --> 00:20:01,200
um jpackage was just released in java

511
00:20:01,200 --> 00:20:02,159
14.

512
00:20:02,159 --> 00:20:04,880
this was previously the java the java

513
00:20:04,880 --> 00:20:06,480
packager which was part of the job fx

514
00:20:06,480 --> 00:20:08,080
distribution they pulled it back into

515
00:20:08,080 --> 00:20:09,360
the java core

516
00:20:09,360 --> 00:20:10,880
and um this is really the best way to

517
00:20:10,880 --> 00:20:12,480
package up your applications if you're

518
00:20:12,480 --> 00:20:15,200
doing it for um for desktop or for um

519
00:20:15,200 --> 00:20:17,679
mobile so give the new j package

520
00:20:17,679 --> 00:20:21,039
capability a try in java 14.

521
00:20:21,039 --> 00:20:24,240
also using technologies like growl which

522
00:20:24,240 --> 00:20:25,440
i'm sure you've been hearing about since

523
00:20:25,440 --> 00:20:26,880
it's getting quite popular

524
00:20:26,880 --> 00:20:30,159
via microservice frameworks like corkus

525
00:20:30,159 --> 00:20:31,679
you can do native image support and

526
00:20:31,679 --> 00:20:33,440
package up your application as a

527
00:20:33,440 --> 00:20:36,480
native binary and another exciting way

528
00:20:36,480 --> 00:20:37,840
to package your applications as i

529
00:20:37,840 --> 00:20:38,320
mentioned

530
00:20:38,320 --> 00:20:42,159
web start is deprecated

531
00:20:42,159 --> 00:20:46,320
but our friends at um

532
00:20:46,840 --> 00:20:51,039
caracoon has started up a project to

533
00:20:51,039 --> 00:20:54,080
relaunch webstart

534
00:20:54,080 --> 00:20:57,200
as a as a fully supported distribution

535
00:20:57,200 --> 00:20:57,919
so

536
00:20:57,919 --> 00:20:59,600
you can use openwebstart it's an open

537
00:20:59,600 --> 00:21:01,440
source project

538
00:21:01,440 --> 00:21:02,960
allows you to do web start and it's

539
00:21:02,960 --> 00:21:04,960
being supported by caracoon

540
00:21:04,960 --> 00:21:07,200
which is a a great company which has

541
00:21:07,200 --> 00:21:08,559
been supporting

542
00:21:08,559 --> 00:21:11,280
client java technologies for a while so

543
00:21:11,280 --> 00:21:13,120
i highly recommend checking out that

544
00:21:13,120 --> 00:21:18,239
if you require a web distribution

545
00:21:18,480 --> 00:21:20,799
the second best practice when you're

546
00:21:20,799 --> 00:21:22,400
talking about how you ship your job

547
00:21:22,400 --> 00:21:23,280
applications

548
00:21:23,280 --> 00:21:25,520
is you really want to target mobile

549
00:21:25,520 --> 00:21:27,200
first

550
00:21:27,200 --> 00:21:29,200
in a lot of cases folks think about

551
00:21:29,200 --> 00:21:30,960
doing things

552
00:21:30,960 --> 00:21:35,280
for um they think about doing things for

553
00:21:35,280 --> 00:21:36,240
their um

554
00:21:36,240 --> 00:21:38,960
desktop first but if you look at the

555
00:21:38,960 --> 00:21:41,120
utilization of web traffic

556
00:21:41,120 --> 00:21:44,320
um over half the web traffic now goes

557
00:21:44,320 --> 00:21:46,080
to mobile devices instead of the desktop

558
00:21:46,080 --> 00:21:47,520
devices and

559
00:21:47,520 --> 00:21:49,600
often building a mobile interface first

560
00:21:49,600 --> 00:21:51,600
is much much easier

561
00:21:51,600 --> 00:21:54,640
than building a desktop user interface

562
00:21:54,640 --> 00:21:56,320
and then reducing functionality to make

563
00:21:56,320 --> 00:21:57,679
a mobile version of it so if you're

564
00:21:57,679 --> 00:22:00,640
doing a cross-platform desktop

565
00:22:00,640 --> 00:22:03,360
and mobile application it's a lot easier

566
00:22:03,360 --> 00:22:04,960
to get started on mobile

567
00:22:04,960 --> 00:22:06,799
build the basic functionality and then

568
00:22:06,799 --> 00:22:08,640
you know build an expanded version if

569
00:22:08,640 --> 00:22:09,760
you want to do it also

570
00:22:09,760 --> 00:22:12,240
on on tablets for larger screens and

571
00:22:12,240 --> 00:22:14,159
then on desktop for um

572
00:22:14,159 --> 00:22:17,039
for even larger screens um gluon

573
00:22:17,039 --> 00:22:17,919
supports

574
00:22:17,919 --> 00:22:20,480
mobile developments so they can do

575
00:22:20,480 --> 00:22:21,520
native images

576
00:22:21,520 --> 00:22:23,520
from growl vm this allows you to publish

577
00:22:23,520 --> 00:22:25,200
to ios applications

578
00:22:25,200 --> 00:22:27,760
and also android applications they look

579
00:22:27,760 --> 00:22:30,080
just like native applications

580
00:22:30,080 --> 00:22:31,760
it gives you all the performance

581
00:22:31,760 --> 00:22:34,000
benefits of just in time compilation but

582
00:22:34,000 --> 00:22:35,600
with the ahead of time compilation

583
00:22:35,600 --> 00:22:37,120
that's accomplished through using

584
00:22:37,120 --> 00:22:40,320
growls of technology

585
00:22:40,320 --> 00:22:43,520
you can do this on open jdk

586
00:22:43,520 --> 00:22:46,320
11 or higher so it's also supported up

587
00:22:46,320 --> 00:22:48,000
to open jdk 14 which was recently

588
00:22:48,000 --> 00:22:48,799
released

589
00:22:48,799 --> 00:22:50,720
there's gradle and maven plugins to

590
00:22:50,720 --> 00:22:52,400
easily do the development

591
00:22:52,400 --> 00:22:53,840
and then you have id supports with

592
00:22:53,840 --> 00:22:55,600
plugins for intellij

593
00:22:55,600 --> 00:22:58,320
for clips and for netbeans so um there's

594
00:22:58,320 --> 00:22:58,960
some great

595
00:22:58,960 --> 00:23:02,080
examples of this as well we have a great

596
00:23:02,080 --> 00:23:04,240
book example as well

597
00:23:04,240 --> 00:23:06,840
to show how you can quickly spin up a

598
00:23:06,840 --> 00:23:08,159
project

599
00:23:08,159 --> 00:23:09,840
and i'm going to show you guys just

600
00:23:09,840 --> 00:23:12,240
running it on on desktop but it's

601
00:23:12,240 --> 00:23:14,640
very easy to build an application which

602
00:23:14,640 --> 00:23:16,480
will work across multiple different

603
00:23:16,480 --> 00:23:17,840
screens

604
00:23:17,840 --> 00:23:20,840
and allow you to build rich client

605
00:23:20,840 --> 00:23:23,840
interfaces

606
00:23:25,440 --> 00:23:28,320
and i think the the last kind of best

607
00:23:28,320 --> 00:23:29,600
practice when you're building

608
00:23:29,600 --> 00:23:31,919
applications today is you really want to

609
00:23:31,919 --> 00:23:33,840
be building for the cloud

610
00:23:33,840 --> 00:23:36,480
a great example this is eto board which

611
00:23:36,480 --> 00:23:38,880
is a javafx application designed for

612
00:23:38,880 --> 00:23:41,120
scrum teams working together it

613
00:23:41,120 --> 00:23:43,039
synchronizes across different sites it's

614
00:23:43,039 --> 00:23:44,640
doing back-end synchronization on the

615
00:23:44,640 --> 00:23:46,320
cloud so this is

616
00:23:46,320 --> 00:23:48,159
like a best practice architecture for

617
00:23:48,159 --> 00:23:50,559
how you want to build applications

618
00:23:50,559 --> 00:23:52,000
so don't just think about building for

619
00:23:52,000 --> 00:23:54,320
desktop rebuilding for individual users

620
00:23:54,320 --> 00:23:56,240
take advantage of rest apis take

621
00:23:56,240 --> 00:23:58,320
advantage of cloud back-ends

622
00:23:58,320 --> 00:24:00,880
and a we have a great example of this in

623
00:24:00,880 --> 00:24:02,799
the book as well which is

624
00:24:02,799 --> 00:24:05,600
a weather application what this

625
00:24:05,600 --> 00:24:06,320
application

626
00:24:06,320 --> 00:24:09,679
does is it talks to a backend

627
00:24:09,679 --> 00:24:13,120
weather service so we're in this case

628
00:24:13,120 --> 00:24:16,000
we're talking to

629
00:24:17,440 --> 00:24:21,760
open openweathermap.org

630
00:24:21,760 --> 00:24:24,080
um calling their weather api getting

631
00:24:24,080 --> 00:24:25,360
back a request

632
00:24:25,360 --> 00:24:28,240
and um this allows you to either take

633
00:24:28,240 --> 00:24:29,919
advantage of third-party services or

634
00:24:29,919 --> 00:24:31,039
have your own

635
00:24:31,039 --> 00:24:34,080
rest api operating in the back end

636
00:24:34,080 --> 00:24:37,360
it uses json libraries jackson to do the

637
00:24:37,360 --> 00:24:39,600
the parsing of the library on the data

638
00:24:39,600 --> 00:24:41,520
it gets back

639
00:24:41,520 --> 00:24:44,080
and it's it's fairly simple to to get up

640
00:24:44,080 --> 00:24:46,080
and running so i'm to

641
00:24:46,080 --> 00:24:49,840
run this application and show you guys

642
00:24:49,919 --> 00:24:51,760
a quick example of pulling back weather

643
00:24:51,760 --> 00:24:54,799
and we currently have it set for

644
00:24:54,799 --> 00:24:56,559
for london which i think is appropriate

645
00:24:56,559 --> 00:24:59,360
since the london job user group

646
00:24:59,360 --> 00:25:01,679
and simon were kind of instrumental in

647
00:25:01,679 --> 00:25:02,799
founding v-jug

648
00:25:02,799 --> 00:25:06,000
and that's where all the talks comes

649
00:25:06,000 --> 00:25:07,039
from

650
00:25:07,039 --> 00:25:10,240
um so very unusual it's clear weather in

651
00:25:10,240 --> 00:25:12,320
london so the world is clearly not

652
00:25:12,320 --> 00:25:13,360
normal

653
00:25:13,360 --> 00:25:16,480
5.31 degrees celsius um

654
00:25:16,480 --> 00:25:19,279
and um i think it's it's humidity 75

655
00:25:19,279 --> 00:25:20,080
percent

656
00:25:20,080 --> 00:25:21,679
the last one was humidity what does it

657
00:25:21,679 --> 00:25:23,600
say yeah get humidity so that is

658
00:25:23,600 --> 00:25:25,120
relatively high humidity maybe it's

659
00:25:25,120 --> 00:25:28,480
going to start raining soon

660
00:25:28,480 --> 00:25:30,080
so a really simple example and then if

661
00:25:30,080 --> 00:25:32,159
we wanted to to change the city it's as

662
00:25:32,159 --> 00:25:34,960
easy as just

663
00:25:34,960 --> 00:25:38,159
updating the code rewriting the sample

664
00:25:38,159 --> 00:25:39,600
and then you're

665
00:25:39,600 --> 00:25:43,840
and then you're up and running

666
00:25:47,200 --> 00:25:48,960
okay so you can see we have we have some

667
00:25:48,960 --> 00:25:50,400
beautiful mist in

668
00:25:50,400 --> 00:25:53,919
in bangalore right now so really easy up

669
00:25:53,919 --> 00:25:55,279
and running and the other thing we can

670
00:25:55,279 --> 00:25:55,679
do

671
00:25:55,679 --> 00:25:58,480
is i have a little gradle task here to

672
00:25:58,480 --> 00:26:00,799
to publish this whole application

673
00:26:00,799 --> 00:26:04,159
and deploy it to artifactory

674
00:26:04,159 --> 00:26:07,679
um so let's let's check out our build in

675
00:26:07,679 --> 00:26:11,840
the browser

676
00:26:12,880 --> 00:26:16,960
that's clearly not the right ui url

677
00:26:17,919 --> 00:26:20,720
okay so i i'm logged in now let's check

678
00:26:20,720 --> 00:26:22,480
out the build we just deployed so this

679
00:26:22,480 --> 00:26:24,480
is the

680
00:26:24,480 --> 00:26:27,039
the last build of the um weather app and

681
00:26:27,039 --> 00:26:28,400
the other thing which i have here so

682
00:26:28,400 --> 00:26:29,520
it's great for um

683
00:26:29,520 --> 00:26:32,320
seeing dependencies so we can see the

684
00:26:32,320 --> 00:26:34,400
weather app which we deployed

685
00:26:34,400 --> 00:26:37,200
and you can also see vulnerabilities as

686
00:26:37,200 --> 00:26:38,640
well so this one was

687
00:26:38,640 --> 00:26:42,880
scanned by x-ray um and we can see that

688
00:26:42,880 --> 00:26:46,720
unfortunately i i have some security

689
00:26:46,720 --> 00:26:47,520
issues in my

690
00:26:47,520 --> 00:26:49,200
in my code base so i'm depending upon

691
00:26:49,200 --> 00:26:50,720
things which

692
00:26:50,720 --> 00:26:53,840
which i shouldn't be depending upon so

693
00:26:53,840 --> 00:26:55,520
we can see what the exact issue is so

694
00:26:55,520 --> 00:26:56,960
this is the jackson api i mentioned

695
00:26:56,960 --> 00:26:59,360
we're using for json parsing

696
00:26:59,360 --> 00:27:03,039
in the weather api and i'm relying upon

697
00:27:03,039 --> 00:27:04,720
an older version

698
00:27:04,720 --> 00:27:07,200
which allows remote code execution if

699
00:27:07,200 --> 00:27:08,640
you're connecting to a bad

700
00:27:08,640 --> 00:27:11,679
service which could send back things um

701
00:27:11,679 --> 00:27:14,640
yeah so i should probably upgrade my

702
00:27:14,640 --> 00:27:17,600
version of jackson in my demo

703
00:27:17,600 --> 00:27:19,360
okay so a quick example of how you can

704
00:27:19,360 --> 00:27:21,440
call back to a rest api

705
00:27:21,440 --> 00:27:23,840
and also how you can check your your

706
00:27:23,840 --> 00:27:25,840
binaries as well

707
00:27:25,840 --> 00:27:29,760
so i don't always use binaries but when

708
00:27:29,760 --> 00:27:30,720
i do

709
00:27:30,720 --> 00:27:34,399
sync them with jfrog artifactory um

710
00:27:34,399 --> 00:27:37,440
i want to thank the my co-authors

711
00:27:37,440 --> 00:27:41,760
um johan voss jose pedro

712
00:27:41,760 --> 00:27:45,919
gail and paul anderson jim weaver

713
00:27:45,919 --> 00:27:47,600
all the other folks who helped us out on

714
00:27:47,600 --> 00:27:49,840
the um on the book

715
00:27:49,840 --> 00:27:53,360
and um we published the definitive guide

716
00:27:53,360 --> 00:27:55,919
to modern java clients at javafx

717
00:27:55,919 --> 00:27:57,600
it's a great reference or just a way of

718
00:27:57,600 --> 00:27:59,840
getting started with java technology

719
00:27:59,840 --> 00:28:01,279
has all the examples i showed you and

720
00:28:01,279 --> 00:28:03,679
more and as i mentioned we're going to

721
00:28:03,679 --> 00:28:04,000
be

722
00:28:04,000 --> 00:28:06,159
raffling three nintendo switches and you

723
00:28:06,159 --> 00:28:08,799
can find all the slides for this talk

724
00:28:08,799 --> 00:28:11,440
um as well as the we'll eventually post

725
00:28:11,440 --> 00:28:13,520
the video on the url here that you see

726
00:28:13,520 --> 00:28:16,399
on screen

727
00:28:16,399 --> 00:28:18,880
so with that i want to thank you guys

728
00:28:18,880 --> 00:28:20,320
for attending the

729
00:28:20,320 --> 00:28:23,520
um the java rich client talk

730
00:28:23,520 --> 00:28:25,120
and if you have any questions that you

731
00:28:25,120 --> 00:28:27,440
want to ask me um i'll be in slack and

732
00:28:27,440 --> 00:28:29,279
i'll be happy to answer the questions in

733
00:28:29,279 --> 00:28:31,600
slack that you guys have

734
00:28:31,600 --> 00:28:33,279
and i hope you guys learned a little bit

735
00:28:33,279 --> 00:28:35,600
about deploying java for mobile

736
00:28:35,600 --> 00:28:37,360
technology

737
00:28:37,360 --> 00:28:39,360
how you can use it to develop rich

738
00:28:39,360 --> 00:28:41,120
client applications quickly using scene

739
00:28:41,120 --> 00:28:42,080
builder which i'd

740
00:28:42,080 --> 00:28:43,919
highly recommend as a good starting

741
00:28:43,919 --> 00:28:45,520
place and

742
00:28:45,520 --> 00:28:48,000
i hope you guys have a good journey um

743
00:28:48,000 --> 00:28:51,279
learning about rich client technology

744
00:28:51,279 --> 00:28:53,760
thank you steven uh by the way i dig

745
00:28:53,760 --> 00:28:54,480
your background

746
00:28:54,480 --> 00:28:55,919
that's pretty cool it's like some video

747
00:28:55,919 --> 00:28:57,679
background that like the light flicker

748
00:28:57,679 --> 00:28:58,799
and everything

749
00:28:58,799 --> 00:29:00,399
it's pretty neat cool cool glad you

750
00:29:00,399 --> 00:29:02,559
liked it matt you're also the first one

751
00:29:02,559 --> 00:29:02,799
i

752
00:29:02,799 --> 00:29:04,640
i've ever heard that calls it ios

753
00:29:04,640 --> 00:29:05,840
instead of ios

754
00:29:05,840 --> 00:29:08,960
is that on purpose or um

755
00:29:08,960 --> 00:29:11,200
that that's because i i'm like one of

756
00:29:11,200 --> 00:29:12,000
those geeks who

757
00:29:12,000 --> 00:29:13,840
reads things first and then

758
00:29:13,840 --> 00:29:15,679
pronunciation sticks

759
00:29:15,679 --> 00:29:17,919
right right i could say that yeah so

760
00:29:17,919 --> 00:29:18,720
there is a question

761
00:29:18,720 --> 00:29:21,840
in slack uh with more remote working um

762
00:29:21,840 --> 00:29:23,440
they're wondering if you think laptop

763
00:29:23,440 --> 00:29:25,120
and desktop will make a comeback over

764
00:29:25,120 --> 00:29:26,799
mobile

765
00:29:26,799 --> 00:29:30,000
that that's a great question um you know

766
00:29:30,000 --> 00:29:30,880
actually

767
00:29:30,880 --> 00:29:33,360
this is a little side but so my i have

768
00:29:33,360 --> 00:29:35,039
my mobile phone here

769
00:29:35,039 --> 00:29:38,559
and i i got so tired of um logging in

770
00:29:38,559 --> 00:29:38,960
and

771
00:29:38,960 --> 00:29:40,399
punching on my mobile phone when i'm

772
00:29:40,399 --> 00:29:42,080
sitting next to my computer

773
00:29:42,080 --> 00:29:44,720
that i i screen share it to my desktop

774
00:29:44,720 --> 00:29:45,600
so i can just

775
00:29:45,600 --> 00:29:47,840
click on it with the mouse and keyboard

776
00:29:47,840 --> 00:29:48,640
so

777
00:29:48,640 --> 00:29:51,919
maybe maybe he has a good point yeah

778
00:29:51,919 --> 00:29:53,760
all right all right well thanks for your

779
00:29:53,760 --> 00:29:55,520
time and have a great night

780
00:29:55,520 --> 00:29:57,440
cool thanks a lot matt thanks for having

781
00:29:57,440 --> 00:30:01,840
me here and enjoy the next talk

