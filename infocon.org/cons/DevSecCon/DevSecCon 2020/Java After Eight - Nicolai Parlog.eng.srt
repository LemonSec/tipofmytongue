1
00:00:00,000 --> 00:00:04,160
oh hey nikolai hey how are you doing

2
00:00:04,160 --> 00:00:06,240
i'm doing fine given the circumstances

3
00:00:06,240 --> 00:00:08,240
absolutely

4
00:00:08,240 --> 00:00:11,360
um very quickly just below here you can

5
00:00:11,360 --> 00:00:11,759
see

6
00:00:11,759 --> 00:00:13,519
there's a there's a ticker and it's

7
00:00:13,519 --> 00:00:15,839
going visit all the

8
00:00:15,839 --> 00:00:18,240
click slash tickets and also somewhere

9
00:00:18,240 --> 00:00:19,600
up here up here we're going with the

10
00:00:19,600 --> 00:00:19,920
right

11
00:00:19,920 --> 00:00:22,160
here somewhere yeah i think up there is

12
00:00:22,160 --> 00:00:24,000
a donate button which i have not noticed

13
00:00:24,000 --> 00:00:25,359
before now so i've been telling everyone

14
00:00:25,359 --> 00:00:26,400
to go to this

15
00:00:26,400 --> 00:00:28,880
but if you click donate then you can

16
00:00:28,880 --> 00:00:30,720
help to raise money

17
00:00:30,720 --> 00:00:32,479
um for the world health organization

18
00:00:32,479 --> 00:00:34,880
solidarity response fund which we're all

19
00:00:34,880 --> 00:00:36,079
trying to do today obviously we're

20
00:00:36,079 --> 00:00:37,040
trying to

21
00:00:37,040 --> 00:00:38,399
learn loads of stuff share loads of

22
00:00:38,399 --> 00:00:40,640
things as well but if we could

23
00:00:40,640 --> 00:00:44,239
also find a way to um if you've got

24
00:00:44,239 --> 00:00:45,200
anything at all

25
00:00:45,200 --> 00:00:48,320
um to give um that will help victims of

26
00:00:48,320 --> 00:00:51,360
of coronavirus cover 19 um outbreak then

27
00:00:51,360 --> 00:00:53,520
it will be really super appreciated

28
00:00:53,520 --> 00:00:55,680
so with that said i'm going to hand over

29
00:00:55,680 --> 00:00:56,800
to grace

30
00:00:56,800 --> 00:00:58,719
who's going to bring nikolai in

31
00:00:58,719 --> 00:01:00,559
fantastic thanks so much

32
00:01:00,559 --> 00:01:02,160
hi nick welcome so you're going to be

33
00:01:02,160 --> 00:01:04,400
presenting java after eight

34
00:01:04,400 --> 00:01:07,760
is that right yes that's fantastic so

35
00:01:07,760 --> 00:01:09,680
if anyone is interested in learning

36
00:01:09,680 --> 00:01:11,600
about you know what are the advantages

37
00:01:11,600 --> 00:01:12,560
of moving from

38
00:01:12,560 --> 00:01:15,600
java 8 to 2 sort of more recent versions

39
00:01:15,600 --> 00:01:17,360
of java all the way up to 14

40
00:01:17,360 --> 00:01:18,960
then this is the talk you need to be

41
00:01:18,960 --> 00:01:21,200
watching get on this stream

42
00:01:21,200 --> 00:01:22,880
uh right do you have a screen to share

43
00:01:22,880 --> 00:01:25,200
for a single eye yes don't i yet

44
00:01:25,200 --> 00:01:28,640
no i don't if you want to call me i will

45
00:01:28,640 --> 00:01:29,759
add it to the stream

46
00:01:29,759 --> 00:01:31,920
and if anyone's got any questions please

47
00:01:31,920 --> 00:01:34,079
keep posting them to either slido or our

48
00:01:34,079 --> 00:01:35,439
slack channel

49
00:01:35,439 --> 00:01:36,960
and we will ask them in our q a

50
00:01:36,960 --> 00:01:40,079
afterwards but with no further ado we're

51
00:01:40,079 --> 00:01:41,680
bang on time so i'll let you start

52
00:01:41,680 --> 00:01:44,479
over to you thank you grace uh so here

53
00:01:44,479 --> 00:01:45,680
we are java after eight

54
00:01:45,680 --> 00:01:48,399
uh i'm nikolai um i'll talk about myself

55
00:01:48,399 --> 00:01:50,000
later if we have time left because we

56
00:01:50,000 --> 00:01:51,040
only have 30 minutes

57
00:01:51,040 --> 00:01:53,119
and to quote brian getz i prepared way

58
00:01:53,119 --> 00:01:54,399
too much so i'm going to talk way too

59
00:01:54,399 --> 00:01:55,600
fast

60
00:01:55,600 --> 00:01:57,280
so the plan for today is we're going to

61
00:01:57,280 --> 00:01:58,719
start with the java 8 code base

62
00:01:58,719 --> 00:01:59,759
and we're going to take it to all the

63
00:01:59,759 --> 00:02:01,759
way to java 14 and you're going to see

64
00:02:01,759 --> 00:02:02,960
how much changes

65
00:02:02,960 --> 00:02:04,479
i'm not going to explain these features

66
00:02:04,479 --> 00:02:06,159
in detail there's not enough time for

67
00:02:06,159 --> 00:02:06,719
that

68
00:02:06,719 --> 00:02:09,199
this fills entire courses i'm just going

69
00:02:09,199 --> 00:02:09,840
to show you

70
00:02:09,840 --> 00:02:11,280
a bunch of the features and just very

71
00:02:11,280 --> 00:02:12,800
quickly in a spotlight so you see how

72
00:02:12,800 --> 00:02:15,840
much the code evolves over time

73
00:02:15,840 --> 00:02:18,800
if you go to slides.codfx.org right now

74
00:02:18,800 --> 00:02:20,160
you will see on the top right corner

75
00:02:20,160 --> 00:02:21,200
java after eight

76
00:02:21,200 --> 00:02:22,480
and if you click it you will see the

77
00:02:22,480 --> 00:02:24,160
very slides that i'm showing here and

78
00:02:24,160 --> 00:02:26,239
also contains links to a demo code base

79
00:02:26,239 --> 00:02:27,840
which is the one i'm working on here

80
00:02:27,840 --> 00:02:29,200
and then there's one which presents

81
00:02:29,200 --> 00:02:31,360
these features in a little more

82
00:02:31,360 --> 00:02:33,200
meaningful way i'm not just like banging

83
00:02:33,200 --> 00:02:34,879
them okay

84
00:02:34,879 --> 00:02:36,959
let's start with java 8. uh that's where

85
00:02:36,959 --> 00:02:38,319
we're going to take start with the code

86
00:02:38,319 --> 00:02:40,160
base and just quickly look at that uh

87
00:02:40,160 --> 00:02:43,360
java 8 was released in march 2014 which

88
00:02:43,360 --> 00:02:43,760
by

89
00:02:43,760 --> 00:02:46,879
computer measurements is ages ago

90
00:02:46,879 --> 00:02:48,720
and free support by oracle ended but you

91
00:02:48,720 --> 00:02:50,400
can still get free support

92
00:02:50,400 --> 00:02:53,519
uh from under the roof of red hat

93
00:02:53,519 --> 00:02:56,879
um they're maintaining the java 8 update

94
00:02:56,879 --> 00:02:57,599
project

95
00:02:57,599 --> 00:03:00,720
until june 2023

96
00:03:00,720 --> 00:03:03,599
and it's a good release to be on it has

97
00:03:03,599 --> 00:03:04,000
a solid

98
00:03:04,000 --> 00:03:05,760
feature set good performance it is

99
00:03:05,760 --> 00:03:07,120
stable and

100
00:03:07,120 --> 00:03:09,120
it does see occasional back ports of

101
00:03:09,120 --> 00:03:10,640
newer features

102
00:03:10,640 --> 00:03:12,480
but at the same time it does get dated

103
00:03:12,480 --> 00:03:14,080
and you can tell with each

104
00:03:14,080 --> 00:03:17,440
release java version um it gets dated

105
00:03:17,440 --> 00:03:18,239
more and more

106
00:03:18,239 --> 00:03:19,680
so there are many new language features

107
00:03:19,680 --> 00:03:21,680
and menu and improved apis and jvm

108
00:03:21,680 --> 00:03:22,480
features

109
00:03:22,480 --> 00:03:24,000
and even though a few of the jvm

110
00:03:24,000 --> 00:03:25,760
features get back ported

111
00:03:25,760 --> 00:03:27,920
um most of the the other things

112
00:03:27,920 --> 00:03:29,200
obviously don't

113
00:03:29,200 --> 00:03:30,799
and in certain cases you can expect

114
00:03:30,799 --> 00:03:32,879
better performance as well

115
00:03:32,879 --> 00:03:34,720
and so as i said we're now going to

116
00:03:34,720 --> 00:03:35,920
start with java 8. we're going to look

117
00:03:35,920 --> 00:03:37,440
at a java 8 code base that

118
00:03:37,440 --> 00:03:39,120
hopefully everybody agrees looks kind of

119
00:03:39,120 --> 00:03:40,560
okay and then we're going to make it

120
00:03:40,560 --> 00:03:41,680
better

121
00:03:41,680 --> 00:03:43,200
so yeah let's do that that was what

122
00:03:43,200 --> 00:03:44,959
we're going to spend most of the talk on

123
00:03:44,959 --> 00:03:48,000
on this java code base right here so

124
00:03:48,000 --> 00:03:49,280
i'm going to quickly walk you through

125
00:03:49,280 --> 00:03:51,120
the project and then we're going to

126
00:03:51,120 --> 00:03:52,239
start changing it

127
00:03:52,239 --> 00:03:55,680
so what does this project do at input

128
00:03:55,680 --> 00:03:59,280
it takes articles

129
00:03:59,280 --> 00:04:01,200
sorry blog posts which are markdown

130
00:04:01,200 --> 00:04:02,959
formats or something like this

131
00:04:02,959 --> 00:04:05,200
right this is a blog post here's the

132
00:04:05,200 --> 00:04:06,159
text

133
00:04:06,159 --> 00:04:09,120
and up here you had some metadata um

134
00:04:09,120 --> 00:04:10,560
front matter is what it's called in in

135
00:04:10,560 --> 00:04:12,319
markdown blog posts like the title and

136
00:04:12,319 --> 00:04:14,159
some tags and some dates and stuff

137
00:04:14,159 --> 00:04:15,599
and this is basically a recommendation

138
00:04:15,599 --> 00:04:17,358
engine it takes this as input

139
00:04:17,358 --> 00:04:20,639
and an output it generates a json file

140
00:04:20,639 --> 00:04:21,839
which by the way should be somewhere

141
00:04:21,839 --> 00:04:24,240
down here um

142
00:04:24,240 --> 00:04:26,400
no not yet but yeah we'll see that later

143
00:04:26,400 --> 00:04:27,840
so it generates a json file that

144
00:04:27,840 --> 00:04:28,639
basically says

145
00:04:28,639 --> 00:04:30,479
given this article these are the three

146
00:04:30,479 --> 00:04:33,120
articles uh to read next

147
00:04:33,120 --> 00:04:34,479
and how does it do that it's very

148
00:04:34,479 --> 00:04:36,800
straightforward it reads these files

149
00:04:36,800 --> 00:04:38,800
and for that it uses the classes that

150
00:04:38,800 --> 00:04:40,160
are in this package here you

151
00:04:40,160 --> 00:04:42,880
see the slack class here which is

152
00:04:42,880 --> 00:04:44,000
basically like a wrapper around the

153
00:04:44,000 --> 00:04:45,040
string value

154
00:04:45,040 --> 00:04:47,520
right this is the slack here and then

155
00:04:47,520 --> 00:04:48,240
you have the

156
00:04:48,240 --> 00:04:49,440
well you don't need the class for the

157
00:04:49,440 --> 00:04:50,800
date we already have a class for that in

158
00:04:50,800 --> 00:04:51,360
java

159
00:04:51,360 --> 00:04:53,120
there's a class for the title and for

160
00:04:53,120 --> 00:04:55,280
for the tags and you know you can see a

161
00:04:55,280 --> 00:04:56,000
good represent

162
00:04:56,000 --> 00:04:59,199
to error correspondence between uh the

163
00:04:59,199 --> 00:05:00,560
front matter here and the classes here

164
00:05:00,560 --> 00:05:02,000
and then the article is of course the

165
00:05:02,000 --> 00:05:02,800
front matter

166
00:05:02,800 --> 00:05:04,800
plus you know all that stuff down here

167
00:05:04,800 --> 00:05:06,479
right you can see that it has

168
00:05:06,479 --> 00:05:08,720
a title and some text and a date and

169
00:05:08,720 --> 00:05:10,560
stuff like that and then

170
00:05:10,560 --> 00:05:12,000
we walked through a couple of classes

171
00:05:12,000 --> 00:05:13,280
they're just going to show the packages

172
00:05:13,280 --> 00:05:14,240
very quickly

173
00:05:14,240 --> 00:05:16,960
um there's a genealogist here which you

174
00:05:16,960 --> 00:05:17,520
know because

175
00:05:17,520 --> 00:05:19,280
this is about relationships i figured

176
00:05:19,280 --> 00:05:21,120
i'm going to use gene energized

177
00:05:21,120 --> 00:05:24,560
terminology here so um

178
00:05:24,560 --> 00:05:27,120
this is this is an api so this is the

179
00:05:27,120 --> 00:05:28,880
api there's a genealogist which just

180
00:05:28,880 --> 00:05:29,520
takes

181
00:05:29,520 --> 00:05:32,240
takes an article and compares these and

182
00:05:32,240 --> 00:05:33,280
um

183
00:05:33,280 --> 00:05:35,520
then we have a genealogy here which puts

184
00:05:35,520 --> 00:05:36,720
all these together

185
00:05:36,720 --> 00:05:40,160
it basically takes um

186
00:05:40,160 --> 00:05:41,840
a bunch of genealogists which can

187
00:05:41,840 --> 00:05:43,280
compare individual articles

188
00:05:43,280 --> 00:05:45,600
a bunch of articles and a way to weight

189
00:05:45,600 --> 00:05:46,639
these results

190
00:05:46,639 --> 00:05:49,360
and spews out a bunch of relations and

191
00:05:49,360 --> 00:05:52,960
those relations would then be um

192
00:05:52,960 --> 00:05:54,639
if this article in this other article

193
00:05:54,639 --> 00:05:56,000
what score did they have

194
00:05:56,000 --> 00:05:56,960
and that's that input to the

195
00:05:56,960 --> 00:05:59,520
recommendation engine in the end

196
00:05:59,520 --> 00:06:02,880
uh the recommendation would be uh

197
00:06:02,880 --> 00:06:04,479
here a bunch of arctic so here's an

198
00:06:04,479 --> 00:06:06,000
article and here are a bunch of articles

199
00:06:06,000 --> 00:06:07,280
that recommended for it

200
00:06:07,280 --> 00:06:10,400
right so fairly straightforward um the

201
00:06:10,400 --> 00:06:12,560
main class binds all of this together

202
00:06:12,560 --> 00:06:15,440
and we're going to quickly run this

203
00:06:15,440 --> 00:06:16,400
let's go

204
00:06:16,400 --> 00:06:19,680
here and quickly

205
00:06:19,680 --> 00:06:23,280
there we go um i'm using sdk main for

206
00:06:23,280 --> 00:06:25,120
this which i can only recommend

207
00:06:25,120 --> 00:06:27,120
uh lookup sdk main if you don't use it

208
00:06:27,120 --> 00:06:28,400
already it's really great if you work

209
00:06:28,400 --> 00:06:30,160
with different java versions

210
00:06:30,160 --> 00:06:32,720
and if we now run this we're going to

211
00:06:32,720 --> 00:06:34,240
build this with maven in the background

212
00:06:34,240 --> 00:06:35,759
this is what it's doing right now

213
00:06:35,759 --> 00:06:37,120
and then it's running the program 10

214
00:06:37,120 --> 00:06:39,280
times so we can get a little bit better

215
00:06:39,280 --> 00:06:40,800
of a performance impression

216
00:06:40,800 --> 00:06:42,960
right this is not a proper performance

217
00:06:42,960 --> 00:06:43,840
measurement

218
00:06:43,840 --> 00:06:46,240
but still it takes about let's say 0.9

219
00:06:46,240 --> 00:06:47,039
seconds

220
00:06:47,039 --> 00:06:49,120
um to run this and the code base this

221
00:06:49,120 --> 00:06:50,800
may be more important has about

222
00:06:50,800 --> 00:06:54,400
1650 lines so 1 654 lines of code

223
00:06:54,400 --> 00:06:55,759
and you know the words and characters

224
00:06:55,759 --> 00:06:57,039
maybe not that important but we're going

225
00:06:57,039 --> 00:06:59,039
to keep those in mind as well

226
00:06:59,039 --> 00:07:00,639
and now we should see oh the

227
00:07:00,639 --> 00:07:02,560
recommendations are here you can see the

228
00:07:02,560 --> 00:07:04,160
output here

229
00:07:04,160 --> 00:07:05,440
so for example if you've read the

230
00:07:05,440 --> 00:07:07,280
article java 8 as the optional strict

231
00:07:07,280 --> 00:07:08,720
approach then also

232
00:07:08,720 --> 00:07:10,400
read these other articles because

233
00:07:10,400 --> 00:07:12,080
apparently they're they're

234
00:07:12,080 --> 00:07:15,440
related that's where we are java 8

235
00:07:15,440 --> 00:07:17,599
was not it's the pipe sorry the code

236
00:07:17,599 --> 00:07:19,520
base uses lots of stream pipelines

237
00:07:19,520 --> 00:07:21,680
optional that kind of stuff and a bunch

238
00:07:21,680 --> 00:07:22,720
of other

239
00:07:22,720 --> 00:07:24,960
apis and now as i said we're going to do

240
00:07:24,960 --> 00:07:25,840
the upgrade

241
00:07:25,840 --> 00:07:28,319
we're going to move to java 9. so what

242
00:07:28,319 --> 00:07:30,080
do we do for the java 9 upgrade probably

243
00:07:30,080 --> 00:07:32,240
you heard that's a scary update to make

244
00:07:32,240 --> 00:07:34,080
um i'm one of those people that

245
00:07:34,080 --> 00:07:35,680
occasionally say that

246
00:07:35,680 --> 00:07:41,039
but really it doesn't have to be hard

247
00:07:41,360 --> 00:07:44,400
let's switch to java 9 here

248
00:07:44,400 --> 00:07:47,280
now let's run it

249
00:07:47,440 --> 00:07:50,400
and there you go that was the java 9

250
00:07:50,400 --> 00:07:51,280
update

251
00:07:51,280 --> 00:07:53,199
see it's not hard you just need a

252
00:07:53,199 --> 00:07:55,440
project which has zero dependencies

253
00:07:55,440 --> 00:07:57,680
and just 600 lines of code and there you

254
00:07:57,680 --> 00:07:59,520
go then it's very easy

255
00:07:59,520 --> 00:08:03,199
um so now we're on java 9 and the first

256
00:08:03,199 --> 00:08:04,560
thing i would like to show you is the

257
00:08:04,560 --> 00:08:06,479
module system

258
00:08:06,479 --> 00:08:08,160
like as much as i love it going into

259
00:08:08,160 --> 00:08:09,919
that takes a while and

260
00:08:09,919 --> 00:08:11,919
i'm going to do a lot of editing and a

261
00:08:11,919 --> 00:08:13,440
couple of small files

262
00:08:13,440 --> 00:08:14,639
and we just don't have time for that

263
00:08:14,639 --> 00:08:16,879
today but if you go to that repository

264
00:08:16,879 --> 00:08:18,720
you will see an individual checkout

265
00:08:18,720 --> 00:08:20,560
which does just that right so if you go

266
00:08:20,560 --> 00:08:22,000
to

267
00:08:22,000 --> 00:08:25,440
the git history you will see

268
00:08:25,440 --> 00:08:27,919
that there's a branch here upgrades and

269
00:08:27,919 --> 00:08:29,039
that branch

270
00:08:29,039 --> 00:08:31,759
contains these commits which say use

271
00:08:31,759 --> 00:08:33,519
upgrade to java 9 use the module system

272
00:08:33,519 --> 00:08:34,958
use collection factory methods use

273
00:08:34,958 --> 00:08:35,760
option or

274
00:08:35,760 --> 00:08:37,039
so you can see all these individual

275
00:08:37,039 --> 00:08:39,200
features and the diffs that were needed

276
00:08:39,200 --> 00:08:40,479
to make them work

277
00:08:40,479 --> 00:08:43,919
so um we're gonna skip the module system

278
00:08:43,919 --> 00:08:46,080
as as much as it paints me and we're

279
00:08:46,080 --> 00:08:48,080
gonna do something which is much simpler

280
00:08:48,080 --> 00:08:51,120
um but maybe even more fun

281
00:08:51,120 --> 00:08:52,399
we're gonna have a look at these areas

282
00:08:52,399 --> 00:08:54,560
as list calls these are quite common

283
00:08:54,560 --> 00:08:56,399
this codebase they're common in tests

284
00:08:56,399 --> 00:08:58,399
they're common even in the in the sorry

285
00:08:58,399 --> 00:08:59,920
uh in the regular code

286
00:08:59,920 --> 00:09:02,080
and what they do is well they want to

287
00:09:02,080 --> 00:09:04,160
create take these two items and put them

288
00:09:04,160 --> 00:09:04,959
into a list

289
00:09:04,959 --> 00:09:07,760
and areas list is the best kind of way

290
00:09:07,760 --> 00:09:08,480
to do that

291
00:09:08,480 --> 00:09:11,040
even though it's not a good way and

292
00:09:11,040 --> 00:09:12,240
since java 9

293
00:09:12,240 --> 00:09:15,040
we can go with list other and that's the

294
00:09:15,040 --> 00:09:16,320
collection factories

295
00:09:16,320 --> 00:09:19,279
that were introduced

296
00:09:20,480 --> 00:09:23,680
in java nine and basically every array s

297
00:09:23,680 --> 00:09:24,160
list

298
00:09:24,160 --> 00:09:26,640
like all of them uh can be replaced with

299
00:09:26,640 --> 00:09:28,800
that right so these these all

300
00:09:28,800 --> 00:09:31,920
um become much saner and much more

301
00:09:31,920 --> 00:09:33,519
straightforward to find right let's

302
00:09:33,519 --> 00:09:34,720
start off makes more sense you're

303
00:09:34,720 --> 00:09:36,720
probably going to look there

304
00:09:36,720 --> 00:09:40,399
much more than if you're looking for um

305
00:09:40,399 --> 00:09:41,760
but if you want to create a list then to

306
00:09:41,760 --> 00:09:43,120
think about oh yeah this is areas as

307
00:09:43,120 --> 00:09:44,399
listing

308
00:09:44,399 --> 00:09:46,720
now what else you don't can on you

309
00:09:46,720 --> 00:09:48,720
cannot only create lists like that you

310
00:09:48,720 --> 00:09:50,080
can also create other collections

311
00:09:50,080 --> 00:09:52,080
also maps so let's have a look at this

312
00:09:52,080 --> 00:09:53,200
here for this

313
00:09:53,200 --> 00:09:55,200
test i need a couple of these weights

314
00:09:55,200 --> 00:09:56,880
for weight um

315
00:09:56,880 --> 00:09:59,680
it needs a relation whatever that is

316
00:09:59,680 --> 00:10:00,720
doesn't matter too much

317
00:10:00,720 --> 00:10:02,880
and a weight which is a number right so

318
00:10:02,880 --> 00:10:04,880
it maps from relation type to a double

319
00:10:04,880 --> 00:10:08,160
and i need that for these tests to work

320
00:10:08,160 --> 00:10:09,600
so what i do the thing that you have to

321
00:10:09,600 --> 00:10:11,360
do here right you create the list and

322
00:10:11,360 --> 00:10:12,880
the map and then you put stuff in and

323
00:10:12,880 --> 00:10:14,480
then there you go

324
00:10:14,480 --> 00:10:18,000
do you know what with java 9 we can

325
00:10:18,000 --> 00:10:19,839
instead do this we can say the weights

326
00:10:19,839 --> 00:10:24,800
are this and now it's map dot off

327
00:10:24,800 --> 00:10:28,880
and oh sorry there's there's that

328
00:10:28,880 --> 00:10:32,000
and now we're just going to say

329
00:10:32,000 --> 00:10:35,440
let's multiply editing here

330
00:10:35,600 --> 00:10:38,079
that's that so we create a map of these

331
00:10:38,079 --> 00:10:39,360
two pairs

332
00:10:39,360 --> 00:10:43,279
or basically key value key value

333
00:10:43,279 --> 00:10:45,920
and then wait a moment like we just need

334
00:10:45,920 --> 00:10:47,760
that map to put it in here now this is a

335
00:10:47,760 --> 00:10:50,079
one-liner we can inline this i'm gonna

336
00:10:50,079 --> 00:10:51,600
use the integer inline function i'm

337
00:10:51,600 --> 00:10:53,600
gonna inline that here and then i might

338
00:10:53,600 --> 00:10:54,320
realize

339
00:10:54,320 --> 00:10:56,240
oh look at that i don't need a

340
00:10:56,240 --> 00:10:59,120
constructor after all

341
00:10:59,120 --> 00:11:01,440
and if you've ever had to create static

342
00:11:01,440 --> 00:11:02,480
initializers

343
00:11:02,480 --> 00:11:04,480
just so you could populate a collection

344
00:11:04,480 --> 00:11:06,079
that you have an aesthetic field

345
00:11:06,079 --> 00:11:07,519
then you know the pain of like feeling

346
00:11:07,519 --> 00:11:09,120
like i have to create this piece of code

347
00:11:09,120 --> 00:11:09,440
that

348
00:11:09,440 --> 00:11:10,880
all it really does is puts two things

349
00:11:10,880 --> 00:11:12,480
into a map or into a set

350
00:11:12,480 --> 00:11:14,640
and now you can um get away with this

351
00:11:14,640 --> 00:11:15,920
and put this into a one-liner

352
00:11:15,920 --> 00:11:19,200
will properly format this

353
00:11:19,200 --> 00:11:21,600
right something like this you could even

354
00:11:21,600 --> 00:11:24,079
read well

355
00:11:25,440 --> 00:11:28,320
there are a couple of more of these

356
00:11:28,320 --> 00:11:29,600
places all around the code base but i'm

357
00:11:29,600 --> 00:11:31,600
not going to go through all of them

358
00:11:31,600 --> 00:11:33,680
let's instead go to optional option also

359
00:11:33,680 --> 00:11:35,440
got improvements

360
00:11:35,440 --> 00:11:39,279
we're going to see that best i think

361
00:11:39,279 --> 00:11:42,399
one of them little places is here

362
00:11:42,399 --> 00:11:44,000
so this is the configuration that's

363
00:11:44,000 --> 00:11:45,920
being parsed into an output file

364
00:11:45,920 --> 00:11:48,079
sorry the configuration so it contains a

365
00:11:48,079 --> 00:11:49,440
path to an output file the

366
00:11:49,440 --> 00:11:51,600
recommendation station that i showed you

367
00:11:51,600 --> 00:11:53,519
and if the configuration does configure

368
00:11:53,519 --> 00:11:55,040
the output file you know then i want to

369
00:11:55,040 --> 00:11:56,480
do this and otherwise

370
00:11:56,480 --> 00:11:59,760
i want to do this now

371
00:11:59,760 --> 00:12:00,959
this is an optional because you know

372
00:12:00,959 --> 00:12:03,360
maybe there is no file configured

373
00:12:03,360 --> 00:12:05,360
and because this is this was written on

374
00:12:05,360 --> 00:12:06,880
java 8 i still have to do this

375
00:12:06,880 --> 00:12:08,880
if it's present then do this or else do

376
00:12:08,880 --> 00:12:10,000
that because in java

377
00:12:10,000 --> 00:12:12,560
8 you had an if present method but you

378
00:12:12,560 --> 00:12:13,519
didn't have

379
00:12:13,519 --> 00:12:15,360
a way to say well if what do i do if

380
00:12:15,360 --> 00:12:17,279
it's not present

381
00:12:17,279 --> 00:12:18,639
and now we have that it's called if

382
00:12:18,639 --> 00:12:20,800
present or else

383
00:12:20,800 --> 00:12:24,720
we're going to say um

384
00:12:24,720 --> 00:12:27,120
i'm gonna put a lambda in here sorry

385
00:12:27,120 --> 00:12:28,639
that's probably not a good way to write

386
00:12:28,639 --> 00:12:29,440
file

387
00:12:29,440 --> 00:12:31,839
file

388
00:12:33,200 --> 00:12:35,440
file and now we're gonna have an else

389
00:12:35,440 --> 00:12:36,880
and the else branch doesn't have any

390
00:12:36,880 --> 00:12:39,440
input right because the option is empty

391
00:12:39,440 --> 00:12:42,160
and so we could do this so if you like

392
00:12:42,160 --> 00:12:43,680
these functional approaches

393
00:12:43,680 --> 00:12:46,560
uh then this will make make it possible

394
00:12:46,560 --> 00:12:47,920
to have an else branch that is also

395
00:12:47,920 --> 00:12:50,160
functional

396
00:12:50,160 --> 00:12:53,519
let's go to e-pills so what what do we

397
00:12:53,519 --> 00:12:54,079
do here

398
00:12:54,079 --> 00:12:56,160
utils is you saw the output right uh

399
00:12:56,160 --> 00:12:57,120
when you ran this

400
00:12:57,120 --> 00:12:58,959
this output process id and made your

401
00:12:58,959 --> 00:13:00,480
java version

402
00:13:00,480 --> 00:13:03,120
figure out the process id is not trivial

403
00:13:03,120 --> 00:13:04,240
in java

404
00:13:04,240 --> 00:13:06,240
so the problem with that is that oh

405
00:13:06,240 --> 00:13:08,000
sorry not youtubes where am i going this

406
00:13:08,000 --> 00:13:09,519
process detail sorry

407
00:13:09,519 --> 00:13:12,320
um getting the process id is not trivial

408
00:13:12,320 --> 00:13:13,760
so there are a bunch of different ways

409
00:13:13,760 --> 00:13:14,399
to do this

410
00:13:14,399 --> 00:13:16,160
and they might fail different operating

411
00:13:16,160 --> 00:13:18,240
system and different java versions

412
00:13:18,240 --> 00:13:19,920
so what you want to do is you want to

413
00:13:19,920 --> 00:13:21,680
implement a bunch of these

414
00:13:21,680 --> 00:13:23,200
and then you want to figure out which

415
00:13:23,200 --> 00:13:25,040
one worked so basically you want to run

416
00:13:25,040 --> 00:13:26,000
this one

417
00:13:26,000 --> 00:13:28,240
or you want to do this or you want to do

418
00:13:28,240 --> 00:13:29,760
this

419
00:13:29,760 --> 00:13:32,240
basically stop once you found something

420
00:13:32,240 --> 00:13:33,200
that worked

421
00:13:33,200 --> 00:13:35,279
and the way to do this in java 8 is you

422
00:13:35,279 --> 00:13:36,399
run right so you

423
00:13:36,399 --> 00:13:37,920
execute one method and then you get back

424
00:13:37,920 --> 00:13:39,760
an optional and then you check if it's

425
00:13:39,760 --> 00:13:40,639
present you're done

426
00:13:40,639 --> 00:13:42,480
right you return this but if it's not

427
00:13:42,480 --> 00:13:44,639
present then you do another call

428
00:13:44,639 --> 00:13:46,240
and then you do another call and these

429
00:13:46,240 --> 00:13:48,160
chains are really annoying what you

430
00:13:48,160 --> 00:13:49,440
would like to do is to

431
00:13:49,440 --> 00:13:51,440
recover from an empty optional into a

432
00:13:51,440 --> 00:13:52,959
non-empty optional

433
00:13:52,959 --> 00:13:55,680
you can do something like get pit from

434
00:13:55,680 --> 00:13:58,000
you would think hey wait can i do this

435
00:13:58,000 --> 00:14:01,040
can i do get pit from an xbean or else

436
00:14:01,040 --> 00:14:02,480
yeah but then you have to provide a

437
00:14:02,480 --> 00:14:04,639
specific value

438
00:14:04,639 --> 00:14:06,399
but i don't have a specific value here i

439
00:14:06,399 --> 00:14:08,800
just want to try a next thing that also

440
00:14:08,800 --> 00:14:09,920
returns an optional

441
00:14:09,920 --> 00:14:11,279
and we can do that now the method is

442
00:14:11,279 --> 00:14:14,160
called or with or

443
00:14:14,160 --> 00:14:17,040
let's say let's see do the correction

444
00:14:17,040 --> 00:14:17,839
factories

445
00:14:17,839 --> 00:14:19,760
with or we can say do the first optional

446
00:14:19,760 --> 00:14:21,120
bearing operation

447
00:14:21,120 --> 00:14:24,160
and if that didn't work by the second

448
00:14:24,160 --> 00:14:25,680
optional bearing operation

449
00:14:25,680 --> 00:14:27,600
and if that didn't work well then try

450
00:14:27,600 --> 00:14:29,600
the third one and you see where this is

451
00:14:29,600 --> 00:14:30,480
going

452
00:14:30,480 --> 00:14:32,639
um to know what surprise there will be a

453
00:14:32,639 --> 00:14:35,600
fourth one here as well

454
00:14:38,399 --> 00:14:44,160
and oh forgot the opponents

455
00:14:44,160 --> 00:14:47,360
right this is so damn useful

456
00:14:47,360 --> 00:14:49,600
i wrote my own uh utility method for

457
00:14:49,600 --> 00:14:51,440
java 8 to do this which i can give a

458
00:14:51,440 --> 00:14:53,279
bunch of suppliers of optional and gives

459
00:14:53,279 --> 00:14:54,959
me the first non-empty option back so

460
00:14:54,959 --> 00:14:56,720
that's that's pretty cool that makes us

461
00:14:56,720 --> 00:14:58,399
go much shorter and much easier to read

462
00:14:58,399 --> 00:15:00,160
too right we didn't just spend

463
00:15:00,160 --> 00:15:02,160
spare lines we also made the code more

464
00:15:02,160 --> 00:15:03,680
expressive because this very clearly

465
00:15:03,680 --> 00:15:04,880
says what we want to do we want to do

466
00:15:04,880 --> 00:15:05,360
this

467
00:15:05,360 --> 00:15:08,480
or that or that or that

468
00:15:08,800 --> 00:15:11,040
but java did not only change it only

469
00:15:11,040 --> 00:15:12,079
changed a bunch of small

470
00:15:12,079 --> 00:15:14,079
apis it also provides a bunch of new

471
00:15:14,079 --> 00:15:15,680
ones and extended new ones

472
00:15:15,680 --> 00:15:18,000
and the thing is we don't even need to

473
00:15:18,000 --> 00:15:18,959
do this anymore

474
00:15:18,959 --> 00:15:22,720
because get this what we can do is

475
00:15:22,720 --> 00:15:27,279
we can say a process handle a current

476
00:15:27,279 --> 00:15:31,279
or this id amazing huh

477
00:15:31,279 --> 00:15:32,800
two rocket science right there took java

478
00:15:32,800 --> 00:15:34,560
like 20 years to get a good way to find

479
00:15:34,560 --> 00:15:36,399
its own process id

480
00:15:36,399 --> 00:15:38,160
and the same is true for the other part

481
00:15:38,160 --> 00:15:40,800
of this api by the way uh no all of this

482
00:15:40,800 --> 00:15:41,600
goes away

483
00:15:41,600 --> 00:15:45,120
this is all garbage now and the same is

484
00:15:45,120 --> 00:15:46,880
true for the get java version

485
00:15:46,880 --> 00:15:48,800
right so here we take java version and

486
00:15:48,800 --> 00:15:50,639
then we parse it we check is it one dot

487
00:15:50,639 --> 00:15:52,399
or is it just a dot or you know

488
00:15:52,399 --> 00:15:54,079
maybe we just try to parse an end and

489
00:15:54,079 --> 00:15:55,839
things can go wrong and all of that

490
00:15:55,839 --> 00:15:59,360
also became unnecessary you can just say

491
00:15:59,360 --> 00:16:02,480
i think it's run time got version

492
00:16:02,480 --> 00:16:04,639
and now we could say well it's not

493
00:16:04,639 --> 00:16:05,680
called major anymore

494
00:16:05,680 --> 00:16:06,880
it's not going to go into that i'm just

495
00:16:06,880 --> 00:16:09,759
going to use major here

496
00:16:09,759 --> 00:16:12,079
and there we are this goes away now too

497
00:16:12,079 --> 00:16:14,480
so this entire utility class

498
00:16:14,480 --> 00:16:18,240
uh or process detects class

499
00:16:18,240 --> 00:16:20,000
only super fluids nobody needs that

500
00:16:20,000 --> 00:16:22,240
because now java has proper apis to find

501
00:16:22,240 --> 00:16:23,440
process ids

502
00:16:23,440 --> 00:16:26,800
and its own major version there's also

503
00:16:26,800 --> 00:16:28,560
in stream improvement

504
00:16:28,560 --> 00:16:30,959
um but also that takes a bit to go into

505
00:16:30,959 --> 00:16:31,680
i don't want to

506
00:16:31,680 --> 00:16:33,600
show it in detail but i want to explain

507
00:16:33,600 --> 00:16:35,199
quickly what it does where do i find it

508
00:16:35,199 --> 00:16:36,959
right it's article factory so as you can

509
00:16:36,959 --> 00:16:38,720
see i have my nodes right next to me

510
00:16:38,720 --> 00:16:40,320
because no way can i remember all of

511
00:16:40,320 --> 00:16:42,480
this

512
00:16:43,360 --> 00:16:46,240
let's have a look at this method it

513
00:16:46,240 --> 00:16:48,320
takes a list of string which is a

514
00:16:48,320 --> 00:16:50,959
list of lines from the markdown file and

515
00:16:50,959 --> 00:16:52,639
it's supposed to extract the front

516
00:16:52,639 --> 00:16:53,839
matter

517
00:16:53,839 --> 00:16:55,759
uh let's see the front matter remember

518
00:16:55,759 --> 00:16:57,440
somewhere down here there was a markdown

519
00:16:57,440 --> 00:16:58,800
file

520
00:16:58,800 --> 00:17:01,040
it wants it looks for these lines so it

521
00:17:01,040 --> 00:17:02,560
goes until it defines the first three

522
00:17:02,560 --> 00:17:03,360
dashes

523
00:17:03,360 --> 00:17:04,799
and then you continue going until the

524
00:17:04,799 --> 00:17:06,720
last the second three dashes that's what

525
00:17:06,720 --> 00:17:07,760
it does

526
00:17:07,760 --> 00:17:10,959
and with a for loop it looks like this

527
00:17:10,959 --> 00:17:13,760
which is not really easy to read let's

528
00:17:13,760 --> 00:17:14,559
have a look

529
00:17:14,559 --> 00:17:16,480
what how this looks with the new drop

530
00:17:16,480 --> 00:17:19,119
one intake while

531
00:17:19,119 --> 00:17:21,919
because with stream api now gives you a

532
00:17:21,919 --> 00:17:22,959
chance

533
00:17:22,959 --> 00:17:25,280
to say another stream the the diff is a

534
00:17:25,280 --> 00:17:27,039
bit noisy we're focusing

535
00:17:27,039 --> 00:17:29,440
um on the right hand side here ignore

536
00:17:29,440 --> 00:17:30,960
the colors for a second wait oh you know

537
00:17:30,960 --> 00:17:31,280
what

538
00:17:31,280 --> 00:17:33,120
let's do this differently let's check

539
00:17:33,120 --> 00:17:34,320
out

540
00:17:34,320 --> 00:17:38,559
uh the final version i can show you here

541
00:17:38,559 --> 00:17:41,440
there it is what we're doing now is

542
00:17:41,440 --> 00:17:42,960
we're saying

543
00:17:42,960 --> 00:17:45,679
start with these lines and then drop

544
00:17:45,679 --> 00:17:46,480
lines

545
00:17:46,480 --> 00:17:48,160
until we find the first front meta

546
00:17:48,160 --> 00:17:49,520
separator

547
00:17:49,520 --> 00:17:50,960
then skip that one because we don't want

548
00:17:50,960 --> 00:17:52,559
to add that front meter separator

549
00:17:52,559 --> 00:17:54,799
and then take lines until we find the

550
00:17:54,799 --> 00:17:55,679
second one

551
00:17:55,679 --> 00:17:59,440
basically what this is this is

552
00:17:59,440 --> 00:18:02,720
skip until because you not skip right

553
00:18:02,720 --> 00:18:04,559
skip takes a specific number and doesn't

554
00:18:04,559 --> 00:18:04,880
skip

555
00:18:04,880 --> 00:18:07,039
until this thing becomes true or false

556
00:18:07,039 --> 00:18:08,160
it's a mind bender

557
00:18:08,160 --> 00:18:10,960
some some of those and this is then um

558
00:18:10,960 --> 00:18:12,320
the first one is skip

559
00:18:12,320 --> 00:18:14,960
and the other one what's the other one

560
00:18:14,960 --> 00:18:16,799
called

561
00:18:16,799 --> 00:18:20,000
limit i mean this is limit until never

562
00:18:20,000 --> 00:18:21,280
mind whether it's until so basically

563
00:18:21,280 --> 00:18:22,320
what i'm saying is

564
00:18:22,320 --> 00:18:23,520
the first one is skipped with a

565
00:18:23,520 --> 00:18:24,799
predicate and the second one is limit

566
00:18:24,799 --> 00:18:26,320
with a predicate and that didn't exist

567
00:18:26,320 --> 00:18:28,240
before and java javan i introduced them

568
00:18:28,240 --> 00:18:32,320
and that's going to make a bunch of um

569
00:18:32,400 --> 00:18:35,520
stream pipelines or make stream pipeline

570
00:18:35,520 --> 00:18:36,960
viable in a situation where it wasn't

571
00:18:36,960 --> 00:18:37,440
before

572
00:18:37,440 --> 00:18:39,840
so that's a really great improvement so

573
00:18:39,840 --> 00:18:41,440
what it does checked out is the final

574
00:18:41,440 --> 00:18:42,799
version

575
00:18:42,799 --> 00:18:45,120
which contains all the java 9 fixes are

576
00:18:45,120 --> 00:18:46,559
we already on java 9 right

577
00:18:46,559 --> 00:18:50,639
so but now we can run it

578
00:18:50,720 --> 00:18:53,600
and if we do we'll see that

579
00:18:53,600 --> 00:18:55,679
unfortunately the runtime increases a

580
00:18:55,679 --> 00:18:57,840
bit

581
00:18:58,559 --> 00:19:00,799
you see here right so we lost about 0.2

582
00:19:00,799 --> 00:19:02,240
seconds roughly

583
00:19:02,240 --> 00:19:04,000
which is quite a lot but we dropped 100

584
00:19:04,000 --> 00:19:05,760
lines of code that's not too bad

585
00:19:05,760 --> 00:19:06,960
and these two things are mostly

586
00:19:06,960 --> 00:19:09,039
unrelated so the the increase in runtime

587
00:19:09,039 --> 00:19:09,679
is

588
00:19:09,679 --> 00:19:13,679
because of some other internal changes

589
00:19:13,760 --> 00:19:15,520
yes so that's java 9. now let's go to

590
00:19:15,520 --> 00:19:18,720
java 10. once again

591
00:19:18,720 --> 00:19:20,720
so the updated java 9 that i just made i

592
00:19:20,720 --> 00:19:23,120
admit a real-life update may take a bit

593
00:19:23,120 --> 00:19:24,000
more time

594
00:19:24,000 --> 00:19:26,640
but going to java 10 really usually just

595
00:19:26,640 --> 00:19:28,400
takes as much time as i do here you may

596
00:19:28,400 --> 00:19:30,559
have to update some dependencies

597
00:19:30,559 --> 00:19:33,760
and um what maybe makes uh what's maybe

598
00:19:33,760 --> 00:19:35,760
the biggest feature in java 10

599
00:19:35,760 --> 00:19:38,000
is var and i know var is a testy

600
00:19:38,000 --> 00:19:39,520
discussion now you want

601
00:19:39,520 --> 00:19:41,200
can i use var everywhere do i not want

602
00:19:41,200 --> 00:19:42,640
to use bar everywhere

603
00:19:42,640 --> 00:19:45,600
um there's a good discussion to be had

604
00:19:45,600 --> 00:19:46,960
about that there's some good advice by

605
00:19:46,960 --> 00:19:48,000
the oracle people

606
00:19:48,000 --> 00:19:49,600
but here let's have a look at this line

607
00:19:49,600 --> 00:19:52,400
it says config config is config create

608
00:19:52,400 --> 00:19:53,760
okay i think we can agree that this is

609
00:19:53,760 --> 00:19:56,559
clearly a config and this is a genealogy

610
00:19:56,559 --> 00:19:58,480
and this is a recommender so i think in

611
00:19:58,480 --> 00:20:00,320
these cases very straightforward that

612
00:20:00,320 --> 00:20:01,440
well

613
00:20:01,440 --> 00:20:03,440
this is what this is which is what this

614
00:20:03,440 --> 00:20:04,480
is

615
00:20:04,480 --> 00:20:06,000
now here we can already start to argue

616
00:20:06,000 --> 00:20:07,520
can i use var here

617
00:20:07,520 --> 00:20:09,440
i don't know i have an opinion on that

618
00:20:09,440 --> 00:20:10,720
but let's not go into that

619
00:20:10,720 --> 00:20:13,200
but java 10 if you use var all the way

620
00:20:13,200 --> 00:20:14,000
it really

621
00:20:14,000 --> 00:20:16,640
changes the code base quite a lot um and

622
00:20:16,640 --> 00:20:17,919
depending on where you are on that you

623
00:20:17,919 --> 00:20:18,240
might

624
00:20:18,240 --> 00:20:20,240
think it's the better for the worse i

625
00:20:20,240 --> 00:20:22,559
think in many cases it makes it better

626
00:20:22,559 --> 00:20:24,320
and actually i would use var here so

627
00:20:24,320 --> 00:20:28,400
there you go um another cool thing is

628
00:20:28,400 --> 00:20:30,799
that collect we often use collectors

629
00:20:30,799 --> 00:20:31,919
right so let's say

630
00:20:31,919 --> 00:20:34,080
i just randomly put up some collector we

631
00:20:34,080 --> 00:20:36,640
use here we have to collect it to a map

632
00:20:36,640 --> 00:20:38,720
and what do we do with this map it turns

633
00:20:38,720 --> 00:20:40,880
out that we get from it but we don't

634
00:20:40,880 --> 00:20:42,159
actually change it anymore

635
00:20:42,159 --> 00:20:43,760
and i think that's quite common quite

636
00:20:43,760 --> 00:20:46,000
often the result of a stream pipeline

637
00:20:46,000 --> 00:20:47,520
should really be unmod should not be

638
00:20:47,520 --> 00:20:49,200
modified anymore or not

639
00:20:49,200 --> 00:20:50,880
should be should not be but you you

640
00:20:50,880 --> 00:20:52,159
don't want it to be modified anymore you

641
00:20:52,159 --> 00:20:53,760
think okay i put this result together

642
00:20:53,760 --> 00:20:55,679
i'm not going to hand this around but i

643
00:20:55,679 --> 00:20:57,520
don't need it to be modified anymore

644
00:20:57,520 --> 00:20:59,039
and there's now a collector which is

645
00:20:59,039 --> 00:21:01,440
called to unmodifiable map

646
00:21:01,440 --> 00:21:03,360
and the same exists for to unmodifiable

647
00:21:03,360 --> 00:21:05,039
set and to unmodify the list

648
00:21:05,039 --> 00:21:06,799
and they create the same instances that

649
00:21:06,799 --> 00:21:09,200
list.off or settle off would create

650
00:21:09,200 --> 00:21:12,720
and also um what we have

651
00:21:12,720 --> 00:21:16,400
now is a copy constructor basically or

652
00:21:16,400 --> 00:21:17,360
copy method

653
00:21:17,360 --> 00:21:19,679
so here we get a map and we do the good

654
00:21:19,679 --> 00:21:20,480
thing here

655
00:21:20,480 --> 00:21:22,320
and we create it we defensively create a

656
00:21:22,320 --> 00:21:23,840
copy

657
00:21:23,840 --> 00:21:26,000
and then also we check whether either of

658
00:21:26,000 --> 00:21:27,600
the values was now because i don't like

659
00:21:27,600 --> 00:21:30,639
knowledge shouldn't be in there

660
00:21:30,960 --> 00:21:33,520
what you can do now is you since java 10

661
00:21:33,520 --> 00:21:34,960
you can say map copy off

662
00:21:34,960 --> 00:21:37,280
of that other map and then not only do

663
00:21:37,280 --> 00:21:38,240
you get

664
00:21:38,240 --> 00:21:41,520
a an unmodified copy but b you get these

665
00:21:41,520 --> 00:21:42,480
now checks

666
00:21:42,480 --> 00:21:45,360
and c as a bonus if this already was one

667
00:21:45,360 --> 00:21:47,200
of these unmodifiable maps

668
00:21:47,200 --> 00:21:49,760
then you get the same instance back here

669
00:21:49,760 --> 00:21:51,919
so then there is no additional wrapping

670
00:21:51,919 --> 00:21:54,039
which is pretty neat because if you use

671
00:21:54,039 --> 00:21:55,360
collections.unmodifiable

672
00:21:55,360 --> 00:21:57,600
then you will get an additional wrapper

673
00:21:57,600 --> 00:21:59,760
every single time

674
00:21:59,760 --> 00:22:02,480
and that's already pretty much all there

675
00:22:02,480 --> 00:22:03,360
is to it

676
00:22:03,360 --> 00:22:07,280
on java 10. i'm not i'm going to skip

677
00:22:07,280 --> 00:22:09,120
application class data sharing

678
00:22:09,120 --> 00:22:10,960
because that takes way too long to go

679
00:22:10,960 --> 00:22:12,960
into

680
00:22:12,960 --> 00:22:16,720
and i broke because i did not update

681
00:22:16,720 --> 00:22:19,520
to java 10.

682
00:22:24,720 --> 00:22:26,640
okay java 11 did not bring a whole lot

683
00:22:26,640 --> 00:22:28,400
of big features it didn't change

684
00:22:28,400 --> 00:22:31,600
um it didn't change the language

685
00:22:31,600 --> 00:22:34,000
at all and most of the api changes were

686
00:22:34,000 --> 00:22:34,960
rather small

687
00:22:34,960 --> 00:22:36,960
i just want to show you one thing that i

688
00:22:36,960 --> 00:22:38,320
think is pretty cool

689
00:22:38,320 --> 00:22:41,840
which is here

690
00:22:43,760 --> 00:22:47,360
is do you see this a filter that checks

691
00:22:47,360 --> 00:22:48,880
whether something is not

692
00:22:48,880 --> 00:22:50,799
empty specifically a filter that checks

693
00:22:50,799 --> 00:22:52,320
whether something

694
00:22:52,320 --> 00:22:54,080
is not the case right so you're

695
00:22:54,080 --> 00:22:56,880
basically inverting a boolean check here

696
00:22:56,880 --> 00:22:59,039
which is a bit unfortunate because you

697
00:22:59,039 --> 00:23:00,320
could do this

698
00:23:00,320 --> 00:23:02,080
otherwise if you were not negating you

699
00:23:02,080 --> 00:23:03,600
could do this

700
00:23:03,600 --> 00:23:06,080
and now you can you can say gratitude

701
00:23:06,080 --> 00:23:08,159
not very small methods it's a static

702
00:23:08,159 --> 00:23:10,000
method that is on predicate

703
00:23:10,000 --> 00:23:13,360
um and i can say predicate not or oh

704
00:23:13,360 --> 00:23:13,919
wait

705
00:23:13,919 --> 00:23:16,159
i didn't go to java 11 actually but i

706
00:23:16,159 --> 00:23:17,919
kind of have to do that

707
00:23:17,919 --> 00:23:22,960
to make use of those apis

708
00:23:22,960 --> 00:23:25,200
yeah on java 11. i'll see all these

709
00:23:25,200 --> 00:23:26,720
updates piece of cake

710
00:23:26,720 --> 00:23:28,480
um if you add a static import it says

711
00:23:28,480 --> 00:23:29,919
filter if not empty well

712
00:23:29,919 --> 00:23:31,919
i smuggled in the if there but filter

713
00:23:31,919 --> 00:23:33,039
not string is empty

714
00:23:33,039 --> 00:23:35,360
i think that's at least as readable as

715
00:23:35,360 --> 00:23:36,799
what was there before and you couldn't

716
00:23:36,799 --> 00:23:38,480
accidentally miss the exclamation point

717
00:23:38,480 --> 00:23:40,400
so i think that's uh that's a good

718
00:23:40,400 --> 00:23:43,279
improvement right there

719
00:23:43,520 --> 00:23:46,400
now if we go to java 12 then the big

720
00:23:46,400 --> 00:23:48,240
headline feature in java 12 is switch

721
00:23:48,240 --> 00:23:49,760
expressions

722
00:23:49,760 --> 00:23:52,400
but for the life of me i couldn't force

723
00:23:52,400 --> 00:23:52,960
a switch

724
00:23:52,960 --> 00:23:54,960
into this code base it just doesn't work

725
00:23:54,960 --> 00:23:56,960
there's nothing to switch over here

726
00:23:56,960 --> 00:23:58,559
so one of the coolest features that java

727
00:23:58,559 --> 00:24:01,120
introduced i can't even show you here

728
00:24:01,120 --> 00:24:03,760
that's really too bad there were also a

729
00:24:03,760 --> 00:24:05,279
couple of other cool things that were

730
00:24:05,279 --> 00:24:06,880
added for example there's a tea in

731
00:24:06,880 --> 00:24:08,080
collector

732
00:24:08,080 --> 00:24:09,919
like with drop wire and take while not

733
00:24:09,919 --> 00:24:11,360
trivial to explain

734
00:24:11,360 --> 00:24:13,120
are not actually not trivial to show in

735
00:24:13,120 --> 00:24:15,760
code but the the high level explanation

736
00:24:15,760 --> 00:24:16,159
i

737
00:24:16,159 --> 00:24:18,799
i think that's fairly easy to grasp what

738
00:24:18,799 --> 00:24:20,720
a teeing collector is

739
00:24:20,720 --> 00:24:23,440
is you take you give a t in collector

740
00:24:23,440 --> 00:24:24,640
three things

741
00:24:24,640 --> 00:24:26,640
one other collector and another other

742
00:24:26,640 --> 00:24:28,640
collector and what it will do is it will

743
00:24:28,640 --> 00:24:29,520
take

744
00:24:29,520 --> 00:24:31,679
any stream element and pass them to both

745
00:24:31,679 --> 00:24:33,279
of these collectors

746
00:24:33,279 --> 00:24:35,679
and the third thing you give it is a way

747
00:24:35,679 --> 00:24:39,039
to combine the results of the collectors

748
00:24:39,039 --> 00:24:43,120
okay let's see the result of that

749
00:24:43,120 --> 00:24:46,559
so that's java 12 that's here and now we

750
00:24:46,559 --> 00:24:47,279
go to

751
00:24:47,279 --> 00:24:50,080
relation

752
00:24:50,400 --> 00:24:55,520
and we're gonna see that somewhere

753
00:24:56,880 --> 00:24:59,760
um aggregate

754
00:25:00,400 --> 00:25:04,559
where is it god damn it

755
00:25:05,120 --> 00:25:09,360
and i'm missing something keying

756
00:25:09,360 --> 00:25:14,960
what the hell yeah it looks like

757
00:25:14,960 --> 00:25:16,640
i want to replace this shouldn't this be

758
00:25:16,640 --> 00:25:18,960
in here

759
00:25:21,679 --> 00:25:25,360
oh i see let me quickly check

760
00:25:25,360 --> 00:25:29,840
i checked out the wrong

761
00:25:33,760 --> 00:25:35,440
i'll fix this on a sec i checked out the

762
00:25:35,440 --> 00:25:37,440
wrong commit well i can

763
00:25:37,440 --> 00:25:39,279
check out the right one though i think i

764
00:25:39,279 --> 00:25:41,360
will manage to do that

765
00:25:41,360 --> 00:25:42,260
that would be

766
00:25:42,260 --> 00:25:44,880
[Music]

767
00:25:44,880 --> 00:25:48,080
um this one

768
00:25:48,080 --> 00:25:50,559
yeah that's the one now this should

769
00:25:50,559 --> 00:25:51,440
change

770
00:25:51,440 --> 00:25:53,679
there we go okay so there's a clean

771
00:25:53,679 --> 00:25:55,120
collector here once again we have to

772
00:25:55,120 --> 00:25:57,039
make the update here

773
00:25:57,039 --> 00:26:00,320
um we already have the update

774
00:26:00,320 --> 00:26:02,720
oh yeah intellij just took a second okay

775
00:26:02,720 --> 00:26:04,400
so what does this clean collector do

776
00:26:04,400 --> 00:26:06,000
this one is already an advanced use but

777
00:26:06,000 --> 00:26:07,679
what it basically does it passes off to

778
00:26:07,679 --> 00:26:10,080
this collector

779
00:26:10,080 --> 00:26:11,440
and then to this collector averaging

780
00:26:11,440 --> 00:26:13,120
double which already exists

781
00:26:13,120 --> 00:26:15,919
and then it takes the result of both and

782
00:26:15,919 --> 00:26:17,919
combines that

783
00:26:17,919 --> 00:26:19,679
and that's really handy if for example

784
00:26:19,679 --> 00:26:21,600
you have a collector that does averaging

785
00:26:21,600 --> 00:26:22,400
double

786
00:26:22,400 --> 00:26:23,760
and there's another collector that does

787
00:26:23,760 --> 00:26:25,600
a sum both of those exist

788
00:26:25,600 --> 00:26:27,120
you can now say oh i have numbers i want

789
00:26:27,120 --> 00:26:28,480
to have both of these results i want to

790
00:26:28,480 --> 00:26:29,760
have the sum and the double

791
00:26:29,760 --> 00:26:31,279
sorry and the average so you know you

792
00:26:31,279 --> 00:26:35,279
pass off to both and you get back

793
00:26:35,279 --> 00:26:38,400
a result the reason of each collector

794
00:26:38,400 --> 00:26:39,440
and then you can combine them

795
00:26:39,440 --> 00:26:42,320
so that's pretty cool okay let's go to

796
00:26:42,320 --> 00:26:43,600
java

797
00:26:43,600 --> 00:26:48,320
let's go immediately to 13. sorry 14.

798
00:26:48,320 --> 00:26:52,640
let's go to 14. to show you two more

799
00:26:52,640 --> 00:26:54,480
language features one of them was

800
00:26:54,480 --> 00:26:56,480
a preview feature in 13 that's text

801
00:26:56,480 --> 00:26:58,159
blocks and the other one is a preview

802
00:26:58,159 --> 00:26:59,039
feature

803
00:26:59,039 --> 00:27:02,720
um in 14. so

804
00:27:02,720 --> 00:27:06,799
textblocks we are creating json right

805
00:27:06,799 --> 00:27:10,720
and the thing is that creating json

806
00:27:10,720 --> 00:27:12,320
you think why can i use the library for

807
00:27:12,320 --> 00:27:14,000
that and yeah sure you can create a user

808
00:27:14,000 --> 00:27:14,880
library for that but

809
00:27:14,880 --> 00:27:16,159
on the other hand do you really want to

810
00:27:16,159 --> 00:27:18,320
use a library for just these couple of

811
00:27:18,320 --> 00:27:19,600
lines of code

812
00:27:19,600 --> 00:27:21,360
nah i mean it's really all you would

813
00:27:21,360 --> 00:27:23,279
replace

814
00:27:23,279 --> 00:27:25,840
so you know i put this together on my

815
00:27:25,840 --> 00:27:26,640
own here

816
00:27:26,640 --> 00:27:27,570
with um

817
00:27:27,570 --> 00:27:30,480
[Music]

818
00:27:30,480 --> 00:27:31,919
i put this together here with like

819
00:27:31,919 --> 00:27:34,000
string concatenation and tabs and a new

820
00:27:34,000 --> 00:27:36,240
line so it looks good and all that's of

821
00:27:36,240 --> 00:27:37,840
course horrible to write out and think

822
00:27:37,840 --> 00:27:39,279
there are a couple more cases where you

823
00:27:39,279 --> 00:27:39,760
want to write

824
00:27:39,760 --> 00:27:42,240
nicely formatted multiline strings but

825
00:27:42,240 --> 00:27:43,360
it's just

826
00:27:43,360 --> 00:27:46,559
hard to do that in java right now

827
00:27:46,559 --> 00:27:50,240
and with text blocks we can do this

828
00:27:50,240 --> 00:27:52,159
look at this it's actually readable you

829
00:27:52,159 --> 00:27:54,080
can oh this is json right it looks like

830
00:27:54,080 --> 00:27:56,399
jason i mean there's a placeholder here

831
00:27:56,399 --> 00:27:57,919
but on that it looks like jason that's

832
00:27:57,919 --> 00:28:00,559
that's really nice and now the single

833
00:28:00,559 --> 00:28:03,200
the single quotation mark it's no longer

834
00:28:03,200 --> 00:28:04,960
special because it's not a delimiter so

835
00:28:04,960 --> 00:28:06,480
that means you don't have to escape it

836
00:28:06,480 --> 00:28:07,520
you still can escape

837
00:28:07,520 --> 00:28:08,880
and have to escape all kinds of stuff

838
00:28:08,880 --> 00:28:10,880
you can add tabs and new lines

839
00:28:10,880 --> 00:28:13,440
so escaping still works but you don't

840
00:28:13,440 --> 00:28:14,399
have to escape

841
00:28:14,399 --> 00:28:15,760
the single quotation mark anymore which

842
00:28:15,760 --> 00:28:18,880
is really good and of course

843
00:28:18,880 --> 00:28:20,559
the biggest the headline feature of java

844
00:28:20,559 --> 00:28:22,320
14

845
00:28:22,320 --> 00:28:24,640
clearly that's records i will use it

846
00:28:24,640 --> 00:28:26,320
here

847
00:28:26,320 --> 00:28:27,760
actually all of these classes become

848
00:28:27,760 --> 00:28:30,480
records straightforward they're all just

849
00:28:30,480 --> 00:28:31,919
a wrap around something else right i

850
00:28:31,919 --> 00:28:32,480
want to go

851
00:28:32,480 --> 00:28:34,960
to the good domain-driven design and i

852
00:28:34,960 --> 00:28:36,480
don't want to have just strings running

853
00:28:36,480 --> 00:28:38,000
around everything like a description is

854
00:28:38,000 --> 00:28:39,520
a string and a title is a string and

855
00:28:39,520 --> 00:28:40,960
then you have a constructor with five

856
00:28:40,960 --> 00:28:41,919
string arguments

857
00:28:41,919 --> 00:28:43,360
and i want to have a proper type for a

858
00:28:43,360 --> 00:28:45,279
description but then you end up with

859
00:28:45,279 --> 00:28:46,960
these classes which just are like take

860
00:28:46,960 --> 00:28:48,480
tons of lines of code for

861
00:28:48,480 --> 00:28:51,600
getter and constructor and equals and

862
00:28:51,600 --> 00:28:53,679
hashcode and tostring

863
00:28:53,679 --> 00:28:55,200
all what you really want to say is look

864
00:28:55,200 --> 00:28:56,960
i have a small class which just

865
00:28:56,960 --> 00:28:58,880
wraps around a string and that's it and

866
00:28:58,880 --> 00:29:01,679
with java 14 you can finally do that

867
00:29:01,679 --> 00:29:04,240
and even though there's tons more in 12

868
00:29:04,240 --> 00:29:06,640
and 30 and 14 they had to skip

869
00:29:06,640 --> 00:29:08,080
and there's if you take a look at the

870
00:29:08,080 --> 00:29:10,399
slides then you will see let's just pick

871
00:29:10,399 --> 00:29:12,159
some example here in java 10

872
00:29:12,159 --> 00:29:14,000
i want to show you all of this which i

873
00:29:14,000 --> 00:29:15,440
didn't but then

874
00:29:15,440 --> 00:29:17,279
there's even more that i didn't even

875
00:29:17,279 --> 00:29:18,480
plan on showing you

876
00:29:18,480 --> 00:29:19,919
and that's the case for all of these

877
00:29:19,919 --> 00:29:21,840
java versions right so even

878
00:29:21,840 --> 00:29:24,640
with what i didn't show you right now

879
00:29:24,640 --> 00:29:26,080
but it's in the code base

880
00:29:26,080 --> 00:29:27,600
there's even more stuff that didn't even

881
00:29:27,600 --> 00:29:29,440
make into the code base so what i'm

882
00:29:29,440 --> 00:29:31,520
really trying to tell you here is that

883
00:29:31,520 --> 00:29:32,960
um oh yeah we should basically we should

884
00:29:32,960 --> 00:29:35,840
have a final run though

885
00:29:36,720 --> 00:29:38,000
we're gonna have to wrap up in just one

886
00:29:38,000 --> 00:29:40,320
minute time for q a yes

887
00:29:40,320 --> 00:29:44,559
okay uh number 14.

888
00:29:44,559 --> 00:29:46,320
new java versions they're awesome now

889
00:29:46,320 --> 00:29:47,600
let's go to q a sorry

890
00:29:47,600 --> 00:29:49,760
okay great no worries there is uh i mean

891
00:29:49,760 --> 00:29:51,120
one of the questions that i think might

892
00:29:51,120 --> 00:29:52,720
solve a lot of this is is there a url

893
00:29:52,720 --> 00:29:54,000
for the code so that they can access

894
00:29:54,000 --> 00:29:56,240
it outside of the session yes it's in

895
00:29:56,240 --> 00:29:57,360
the slides go to

896
00:29:57,360 --> 00:29:59,960
and i will tweet it later go to

897
00:29:59,960 --> 00:30:01,520
slides.codfx.org

898
00:30:01,520 --> 00:30:03,360
and then you'll see it in the top right

899
00:30:03,360 --> 00:30:04,720
corner and there's slide deck and this

900
00:30:04,720 --> 00:30:06,159
slide deck there's links to the slides

901
00:30:06,159 --> 00:30:07,440
fantastic and if you could post that in

902
00:30:07,440 --> 00:30:08,399
the slack channel that would be really

903
00:30:08,399 --> 00:30:10,640
helpful yes i will definitely fantastic

904
00:30:10,640 --> 00:30:13,360
and then we have another one which is uh

905
00:30:13,360 --> 00:30:14,399
we've got a question from someone

906
00:30:14,399 --> 00:30:16,000
anonymous saying should we go to

907
00:30:16,000 --> 00:30:18,000
the latest so version 14 or stick with

908
00:30:18,000 --> 00:30:20,320
any lts ones

909
00:30:20,320 --> 00:30:21,840
that depends on your project uh if

910
00:30:21,840 --> 00:30:23,919
you're confident that you can update

911
00:30:23,919 --> 00:30:25,360
your code your dependencies and your

912
00:30:25,360 --> 00:30:27,520
tools every six months um then

913
00:30:27,520 --> 00:30:29,760
i would go with the latest releases if

914
00:30:29,760 --> 00:30:31,360
you feel like that may be too big of a

915
00:30:31,360 --> 00:30:31,840
risk

916
00:30:31,840 --> 00:30:34,799
for whatever reason then stick to lts

917
00:30:34,799 --> 00:30:36,320
just one last word for me

918
00:30:36,320 --> 00:30:38,399
we just lost a quarter of the code base

919
00:30:38,399 --> 00:30:39,679
over these migrations

920
00:30:39,679 --> 00:30:41,919
and i i would say we get we lost no

921
00:30:41,919 --> 00:30:43,520
expressiveness whatsoever quite the

922
00:30:43,520 --> 00:30:44,080
opposite

923
00:30:44,080 --> 00:30:45,840
we made the cost more expressive not

924
00:30:45,840 --> 00:30:48,000
denser but more expressive

925
00:30:48,000 --> 00:30:50,399
and it's a 70 75 percent of the code and

926
00:30:50,399 --> 00:30:51,520
it got a bit faster too

927
00:30:51,520 --> 00:30:54,000
look at that amazing so if anyone's not

928
00:30:54,000 --> 00:30:55,840
convinced hopefully that's convinced you

929
00:30:55,840 --> 00:30:57,519
um any other questions i didn't answer

930
00:30:57,519 --> 00:30:58,960
that people want answered by nikolai

931
00:30:58,960 --> 00:30:59,919
please head over to the

932
00:30:59,919 --> 00:31:01,200
slack channel and he'll be able to

933
00:31:01,200 --> 00:31:03,039
answer them in the next meal break which

934
00:31:03,039 --> 00:31:04,159
is coming up

935
00:31:04,159 --> 00:31:06,399
okay great yeah i'll see you there

936
00:31:06,399 --> 00:31:07,440
appreciate it

937
00:31:07,440 --> 00:31:09,840
bye

