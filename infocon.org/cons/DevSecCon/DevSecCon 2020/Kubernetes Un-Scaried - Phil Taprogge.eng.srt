1
00:00:00,880 --> 00:00:02,960
ah we're back my mistake hey phil

2
00:00:02,960 --> 00:00:04,560
welcome welcome back everyone

3
00:00:04,560 --> 00:00:06,480
uh we'll say uh thanks for joining us

4
00:00:06,480 --> 00:00:07,919
today uh

5
00:00:07,919 --> 00:00:10,080
please do pop along to the slack so bit

6
00:00:10,080 --> 00:00:10,960
dot lee

7
00:00:10,960 --> 00:00:13,840
slash atto dash slack to join in the

8
00:00:13,840 --> 00:00:14,639
conversation

9
00:00:14,639 --> 00:00:16,000
please also feel free to donate to the

10
00:00:16,000 --> 00:00:18,320
coverage 19 solidarity response fund

11
00:00:18,320 --> 00:00:20,080
uh we're raising some fantastic money

12
00:00:20,080 --> 00:00:21,359
for that so please do pop along the

13
00:00:21,359 --> 00:00:23,119
website learn more about donating

14
00:00:23,119 --> 00:00:24,560
i won't take up too much for your time

15
00:00:24,560 --> 00:00:26,240
there phil because it's a short session

16
00:00:26,240 --> 00:00:27,199
but the title

17
00:00:27,199 --> 00:00:29,679
sounds superb yeah kubernetes unscared

18
00:00:29,679 --> 00:00:31,679
which i think we could all benefit from

19
00:00:31,679 --> 00:00:33,600
so without further ado let me add

20
00:00:33,600 --> 00:00:36,480
your screen in there i shall disappear

21
00:00:36,480 --> 00:00:37,280
uh

22
00:00:37,280 --> 00:00:41,120
and over to you all right thank you very

23
00:00:41,120 --> 00:00:41,600
much

24
00:00:41,600 --> 00:00:44,480
uh thanks to all the talks for having me

25
00:00:44,480 --> 00:00:46,239
i've never done this virtually before so

26
00:00:46,239 --> 00:00:47,680
this is going to be interesting

27
00:00:47,680 --> 00:00:50,079
um hope you'll bear with me i hope you

28
00:00:50,079 --> 00:00:50,879
can all see

29
00:00:50,879 --> 00:00:53,440
my presentation if not uh somebody will

30
00:00:53,440 --> 00:00:55,199
have to poke me

31
00:00:55,199 --> 00:00:57,280
um to begin with a little bit about

32
00:00:57,280 --> 00:00:59,760
myself my name is phil taproger

33
00:00:59,760 --> 00:01:03,440
i am the um sre lead at

34
00:01:03,440 --> 00:01:06,640
sneak i'm also resident nerd

35
00:01:06,640 --> 00:01:11,280
and a certified kubernetes fanboy

36
00:01:11,280 --> 00:01:14,320
i am i've been into sort of

37
00:01:14,320 --> 00:01:16,560
infrastructure and cloud computing jobs

38
00:01:16,560 --> 00:01:18,159
platform engineering jobs for the past

39
00:01:18,159 --> 00:01:19,920
five six years

40
00:01:19,920 --> 00:01:22,799
um and i genuinely believe kubernetes is

41
00:01:22,799 --> 00:01:23,360
one of the

42
00:01:23,360 --> 00:01:25,840
most profoundly game-changing

43
00:01:25,840 --> 00:01:27,759
technologies that has come about in the

44
00:01:27,759 --> 00:01:28,479
past

45
00:01:28,479 --> 00:01:32,240
decade so let's talk about kubernetes

46
00:01:32,240 --> 00:01:35,040
um there's a lot to talk about strap in

47
00:01:35,040 --> 00:01:36,799
and bear with me

48
00:01:36,799 --> 00:01:39,520
um i'd like to begin with asking and

49
00:01:39,520 --> 00:01:41,759
then answering my own question

50
00:01:41,759 --> 00:01:45,119
what actually is kubernetes and

51
00:01:45,119 --> 00:01:47,600
you know as a question a lot of people

52
00:01:47,600 --> 00:01:49,040
kind of sort of know and if you look at

53
00:01:49,040 --> 00:01:49,520
the

54
00:01:49,520 --> 00:01:51,759
uh sort of blog posts on the internet

55
00:01:51,759 --> 00:01:52,640
and whatnot

56
00:01:52,640 --> 00:01:55,840
you'll find many high level explanations

57
00:01:55,840 --> 00:01:56,479
and they all

58
00:01:56,479 --> 00:01:59,520
boil down to pretty much one thing

59
00:01:59,520 --> 00:02:01,439
and that is it's a container

60
00:02:01,439 --> 00:02:03,840
orchestrator so what's that mean

61
00:02:03,840 --> 00:02:06,479
well it runs our containers for us to

62
00:02:06,479 --> 00:02:08,080
which i then usually ask

63
00:02:08,080 --> 00:02:11,520
so what does docker do so obviously

64
00:02:11,520 --> 00:02:13,520
there's there's more to it than that

65
00:02:13,520 --> 00:02:16,000
uh daniel riek from red hat once

66
00:02:16,000 --> 00:02:17,360
famously said

67
00:02:17,360 --> 00:02:19,680
openshift red hats kubernetes

68
00:02:19,680 --> 00:02:22,959
distribution is the new enterprise linux

69
00:02:22,959 --> 00:02:25,920
and as there's a big statement right

70
00:02:25,920 --> 00:02:28,160
kelsey hightower once famously tweeted

71
00:02:28,160 --> 00:02:30,720
kubernetes is not the colonel it's

72
00:02:30,720 --> 00:02:32,400
systemd

73
00:02:32,400 --> 00:02:35,519
and i think kelsey actually was was spot

74
00:02:35,519 --> 00:02:36,080
on

75
00:02:36,080 --> 00:02:40,239
with that remark because at the core

76
00:02:40,239 --> 00:02:43,760
kubernetes is just a bunch

77
00:02:43,760 --> 00:02:47,360
of state machines just like systemd

78
00:02:47,360 --> 00:02:49,760
what's a state machine well it's a

79
00:02:49,760 --> 00:02:51,200
mathematical model that helps us

80
00:02:51,200 --> 00:02:52,720
understand compute

81
00:02:52,720 --> 00:02:56,000
it's a system that has states and it has

82
00:02:56,000 --> 00:02:58,000
rules for transitioning from one state

83
00:02:58,000 --> 00:02:59,440
to another

84
00:02:59,440 --> 00:03:02,239
in kubernetes there are control loops

85
00:03:02,239 --> 00:03:02,800
they

86
00:03:02,800 --> 00:03:04,400
have states and those states are

87
00:03:04,400 --> 00:03:06,239
represented by the api

88
00:03:06,239 --> 00:03:09,440
objects your deployments your pods and

89
00:03:09,440 --> 00:03:10,959
they have rules for changing from one

90
00:03:10,959 --> 00:03:13,280
state to another that are driven by

91
00:03:13,280 --> 00:03:16,400
changes to these api objects

92
00:03:16,400 --> 00:03:19,760
a kubernetes control loop looks at state

93
00:03:19,760 --> 00:03:22,800
in the api server when that state

94
00:03:22,800 --> 00:03:23,760
changes

95
00:03:23,760 --> 00:03:26,799
it does one of two things or both

96
00:03:26,799 --> 00:03:30,000
it either interacts with an external

97
00:03:30,000 --> 00:03:31,920
system like a cloud provider or the

98
00:03:31,920 --> 00:03:33,280
docker daemon

99
00:03:33,280 --> 00:03:37,440
or it writes a change to the api

100
00:03:37,440 --> 00:03:41,040
itself so let's look at an example for

101
00:03:41,040 --> 00:03:41,760
that

102
00:03:41,760 --> 00:03:43,680
and just a word of warning i did try and

103
00:03:43,680 --> 00:03:45,519
find a better diagram that

104
00:03:45,519 --> 00:03:47,599
visualizes this unfortunately i couldn't

105
00:03:47,599 --> 00:03:50,480
find one that wasn't copyrighted

106
00:03:50,480 --> 00:03:51,920
so i had to make my own and you'll

107
00:03:51,920 --> 00:03:53,599
quickly see that they don't pay me for

108
00:03:53,599 --> 00:03:54,000
my

109
00:03:54,000 --> 00:03:56,720
graphics design skills but um bear with

110
00:03:56,720 --> 00:03:57,920
me

111
00:03:57,920 --> 00:03:59,519
so what happens when you create

112
00:03:59,519 --> 00:04:01,760
deployment say the deployment

113
00:04:01,760 --> 00:04:03,760
in kubernetes you'll probably know this

114
00:04:03,760 --> 00:04:05,599
is a

115
00:04:05,599 --> 00:04:07,920
high level object that expresses a

116
00:04:07,920 --> 00:04:10,720
desire to run a number of containers

117
00:04:10,720 --> 00:04:13,280
somewhere on the cluster so how do we

118
00:04:13,280 --> 00:04:14,480
get from the deployment

119
00:04:14,480 --> 00:04:18,160
to a container you create a deployment

120
00:04:18,160 --> 00:04:20,720
either through cube control apply or

121
00:04:20,720 --> 00:04:21,358
through

122
00:04:21,358 --> 00:04:23,840
a client sdk or even just a curl with a

123
00:04:23,840 --> 00:04:24,880
post

124
00:04:24,880 --> 00:04:26,720
and the api server will receive your

125
00:04:26,720 --> 00:04:28,800
deployment and it will write that

126
00:04:28,800 --> 00:04:31,680
to etcd persisted and that's all it does

127
00:04:31,680 --> 00:04:33,440
the api server doesn't actually do

128
00:04:33,440 --> 00:04:36,639
anything it gives us authentication

129
00:04:36,639 --> 00:04:39,040
authorization it gives us validation but

130
00:04:39,040 --> 00:04:39,759
it doesn't

131
00:04:39,759 --> 00:04:43,120
do anything as such for that

132
00:04:43,120 --> 00:04:46,560
you need controllers and most kubernetes

133
00:04:46,560 --> 00:04:48,000
controllers are bundled up in a thing

134
00:04:48,000 --> 00:04:49,280
called controller manager

135
00:04:49,280 --> 00:04:51,360
but they're all independent pieces of

136
00:04:51,360 --> 00:04:53,199
code each one doing just one

137
00:04:53,199 --> 00:04:56,479
thing in our case there is a thing

138
00:04:56,479 --> 00:04:58,080
called the deployments controller

139
00:04:58,080 --> 00:04:59,360
and the deployments controller is

140
00:04:59,360 --> 00:05:01,440
interested in changes to deployment

141
00:05:01,440 --> 00:05:02,960
objects

142
00:05:02,960 --> 00:05:05,199
so the develop deployments controller

143
00:05:05,199 --> 00:05:06,400
will find out that there is a new

144
00:05:06,400 --> 00:05:08,160
deployment that was just created

145
00:05:08,160 --> 00:05:10,320
and they could have happened a second

146
00:05:10,320 --> 00:05:11,759
ago it could have happened five

147
00:05:11,759 --> 00:05:14,960
hours ago it doesn't care it always does

148
00:05:14,960 --> 00:05:16,240
the same thing

149
00:05:16,240 --> 00:05:18,960
it knows for a deployment there should

150
00:05:18,960 --> 00:05:20,320
be a replica set

151
00:05:20,320 --> 00:05:22,479
set that matches that deployment it will

152
00:05:22,479 --> 00:05:24,160
check is there one

153
00:05:24,160 --> 00:05:26,160
in this case there isn't so it'll create

154
00:05:26,160 --> 00:05:28,160
one it'll write a new api object it'll

155
00:05:28,160 --> 00:05:29,759
copy some of the details from the

156
00:05:29,759 --> 00:05:30,400
deployment

157
00:05:30,400 --> 00:05:33,280
like the pod spec the replica account

158
00:05:33,280 --> 00:05:35,600
and write that into a replica set object

159
00:05:35,600 --> 00:05:37,360
persist that through the api and then it

160
00:05:37,360 --> 00:05:38,720
goes back to sleep

161
00:05:38,720 --> 00:05:41,840
there's no containers there is however a

162
00:05:41,840 --> 00:05:44,240
replica set controller that now wakes up

163
00:05:44,240 --> 00:05:45,919
having been informed that there is a new

164
00:05:45,919 --> 00:05:48,320
replica set and it does a very similar

165
00:05:48,320 --> 00:05:49,440
thing it knows

166
00:05:49,440 --> 00:05:51,120
for every replica set there should be a

167
00:05:51,120 --> 00:05:53,520
number of pod objects indicated by the

168
00:05:53,520 --> 00:05:55,680
replica account

169
00:05:55,680 --> 00:05:58,560
it checks are there these pod objects

170
00:05:58,560 --> 00:05:59,759
and if there aren't

171
00:05:59,759 --> 00:06:03,919
it will write some to the kubernetes api

172
00:06:03,919 --> 00:06:06,160
but pods aren't containers pods again

173
00:06:06,160 --> 00:06:08,479
are just a desire they express a desire

174
00:06:08,479 --> 00:06:09,919
to run a container somewhere on the

175
00:06:09,919 --> 00:06:10,960
cluster

176
00:06:10,960 --> 00:06:14,160
so we need to find the compute resources

177
00:06:14,160 --> 00:06:17,199
to run those containers and that's where

178
00:06:17,199 --> 00:06:18,960
the scheduler comes in

179
00:06:18,960 --> 00:06:20,800
the scheduler has a bit more of a

180
00:06:20,800 --> 00:06:23,120
specialized taste it looks for

181
00:06:23,120 --> 00:06:25,440
specifically pod objects that are

182
00:06:25,440 --> 00:06:26,800
instead pending

183
00:06:26,800 --> 00:06:28,960
and that do not have a value in their

184
00:06:28,960 --> 00:06:30,319
node field

185
00:06:30,319 --> 00:06:32,080
when it finds those it looks at the

186
00:06:32,080 --> 00:06:34,080
nodes available on the cluster

187
00:06:34,080 --> 00:06:37,280
it picks whichever way it does a node

188
00:06:37,280 --> 00:06:39,759
that is best suited to run

189
00:06:39,759 --> 00:06:41,600
that particular container it looks at

190
00:06:41,600 --> 00:06:43,680
things like

191
00:06:43,680 --> 00:06:45,759
node selectors it looks at resource

192
00:06:45,759 --> 00:06:48,639
requests it looks at what the nodes have

193
00:06:48,639 --> 00:06:49,520
to offer

194
00:06:49,520 --> 00:06:50,960
and it will then pick a node it will

195
00:06:50,960 --> 00:06:52,639
write that node's name

196
00:06:52,639 --> 00:06:55,280
into the node field of the pod and it'll

197
00:06:55,280 --> 00:06:56,720
go back to sleep

198
00:06:56,720 --> 00:06:58,000
now i hear you cry what sort of

199
00:06:58,000 --> 00:06:59,199
scheduler is this that doesn't actually

200
00:06:59,199 --> 00:07:01,039
schedule anything

201
00:07:01,039 --> 00:07:04,319
but in fact it does because by doing so

202
00:07:04,319 --> 00:07:07,520
it gives cubelet which as you probably

203
00:07:07,520 --> 00:07:08,479
know is the

204
00:07:08,479 --> 00:07:10,319
node agent that runs on every node in

205
00:07:10,319 --> 00:07:12,400
the cluster enough information to

206
00:07:12,400 --> 00:07:13,199
realize

207
00:07:13,199 --> 00:07:15,520
that this pending pod with its name on

208
00:07:15,520 --> 00:07:16,240
it

209
00:07:16,240 --> 00:07:18,080
is something that this particular

210
00:07:18,080 --> 00:07:20,319
cubelet should be responsible for

211
00:07:20,319 --> 00:07:23,039
and cubelet has another control loop

212
00:07:23,039 --> 00:07:25,199
that says for every pod with my name on

213
00:07:25,199 --> 00:07:26,639
there should be a docker container on

214
00:07:26,639 --> 00:07:27,759
this machine

215
00:07:27,759 --> 00:07:29,759
there isn't one currently so it will

216
00:07:29,759 --> 00:07:30,880
construct the

217
00:07:30,880 --> 00:07:33,520
docker run command that will make that

218
00:07:33,520 --> 00:07:34,800
container appear

219
00:07:34,800 --> 00:07:36,479
it'll update the status of the pod

220
00:07:36,479 --> 00:07:38,160
indicating that that is now running and

221
00:07:38,160 --> 00:07:38,479
now

222
00:07:38,479 --> 00:07:41,360
finally we get to a point where we've

223
00:07:41,360 --> 00:07:42,560
actually got the container that we're

224
00:07:42,560 --> 00:07:44,960
looking for

225
00:07:44,960 --> 00:07:46,960
so why is this sort of convoluted

226
00:07:46,960 --> 00:07:48,479
process so

227
00:07:48,479 --> 00:07:53,758
powerful it's because

228
00:07:54,000 --> 00:07:56,800
every one of these components by being

229
00:07:56,800 --> 00:07:58,000
so independent

230
00:07:58,000 --> 00:08:00,000
is by design and by default

231
00:08:00,000 --> 00:08:01,360
self-correcting

232
00:08:01,360 --> 00:08:03,599
everything will eventually fall into

233
00:08:03,599 --> 00:08:04,720
place when

234
00:08:04,720 --> 00:08:07,840
the stars align as it were there were no

235
00:08:07,840 --> 00:08:09,520
timing or orderliness guarantees to

236
00:08:09,520 --> 00:08:12,080
begin with so all of these control loops

237
00:08:12,080 --> 00:08:14,479
have to look at the world afresh every

238
00:08:14,479 --> 00:08:15,280
time

239
00:08:15,280 --> 00:08:18,960
they run and when something goes wrong

240
00:08:18,960 --> 00:08:21,280
once that problem is resolved everything

241
00:08:21,280 --> 00:08:22,879
will come back together there's no need

242
00:08:22,879 --> 00:08:24,479
to restart anything

243
00:08:24,479 --> 00:08:26,400
these control loops don't carry states

244
00:08:26,400 --> 00:08:28,160
so they can fail and can come back and

245
00:08:28,160 --> 00:08:30,080
just pick up where they left off

246
00:08:30,080 --> 00:08:31,680
and they don't talk to each other they

247
00:08:31,680 --> 00:08:33,200
only ever communicate

248
00:08:33,200 --> 00:08:37,760
by way of changing state in the api

249
00:08:37,760 --> 00:08:39,440
you know looking at the previous example

250
00:08:39,440 --> 00:08:41,360
what happens when the scheduler wakes up

251
00:08:41,360 --> 00:08:43,279
and there are no nodes available for

252
00:08:43,279 --> 00:08:45,440
your container they're all busy

253
00:08:45,440 --> 00:08:47,440
well it will mark that part as unskilled

254
00:08:47,440 --> 00:08:49,200
unscheduleable and then it goes back to

255
00:08:49,200 --> 00:08:50,320
sleep it recues it

256
00:08:50,320 --> 00:08:52,399
basically saying i'll get back to you

257
00:08:52,399 --> 00:08:55,040
and from that point on it will retry

258
00:08:55,040 --> 00:08:57,920
for days and even weeks if it has to

259
00:08:57,920 --> 00:08:59,519
knowing that eventually there will be

260
00:08:59,519 --> 00:09:01,040
compute power again and when that

261
00:09:01,040 --> 00:09:01,839
happens

262
00:09:01,839 --> 00:09:04,080
it'll run the container and everything

263
00:09:04,080 --> 00:09:08,080
will come back together

264
00:09:08,080 --> 00:09:11,040
why am i telling you all this mainly

265
00:09:11,040 --> 00:09:11,680
because

266
00:09:11,680 --> 00:09:13,600
there's actually two reasons the first

267
00:09:13,600 --> 00:09:15,200
one is because it makes kubernetes

268
00:09:15,200 --> 00:09:17,279
incredibly extensible

269
00:09:17,279 --> 00:09:18,959
each one of these control loops is

270
00:09:18,959 --> 00:09:20,720
independent it does one thing you can

271
00:09:20,720 --> 00:09:21,680
rely on it

272
00:09:21,680 --> 00:09:23,920
and you can add control loops into this

273
00:09:23,920 --> 00:09:25,279
mix that will all

274
00:09:25,279 --> 00:09:27,279
play nice with what's whatever's already

275
00:09:27,279 --> 00:09:28,320
there

276
00:09:28,320 --> 00:09:30,560
in other complex systems if you want to

277
00:09:30,560 --> 00:09:31,920
make a change and have it work

278
00:09:31,920 --> 00:09:35,279
you have to understand a lot of

279
00:09:35,279 --> 00:09:36,800
how everything plays together how the

280
00:09:36,800 --> 00:09:38,880
communication paths work

281
00:09:38,880 --> 00:09:40,959
if you've ever tried to contribute say

282
00:09:40,959 --> 00:09:42,320
to the linux kernel

283
00:09:42,320 --> 00:09:46,160
uh that's a lot of work with kubernetes

284
00:09:46,160 --> 00:09:48,640
all you need to know is how you need to

285
00:09:48,640 --> 00:09:49,360
manipulate

286
00:09:49,360 --> 00:09:51,360
state in order to get the result you

287
00:09:51,360 --> 00:09:53,360
want that's the only way communication

288
00:09:53,360 --> 00:09:56,000
ever happens

289
00:09:56,000 --> 00:09:59,839
the second reason is because you have to

290
00:09:59,839 --> 00:10:02,880
do monitoring differently than you used

291
00:10:02,880 --> 00:10:03,279
to

292
00:10:03,279 --> 00:10:05,760
in a system that consists of you know

293
00:10:05,760 --> 00:10:07,040
discrete hardware

294
00:10:07,040 --> 00:10:08,720
you know something goes down you want to

295
00:10:08,720 --> 00:10:10,320
know about it so that you can go and fix

296
00:10:10,320 --> 00:10:11,680
it

297
00:10:11,680 --> 00:10:14,079
on kubernetes you really want to have at

298
00:10:14,079 --> 00:10:15,600
least two of everything

299
00:10:15,600 --> 00:10:18,480
okay kubernetes makes that easy and once

300
00:10:18,480 --> 00:10:19,920
you have two of everything

301
00:10:19,920 --> 00:10:21,839
and you have a system that is

302
00:10:21,839 --> 00:10:23,200
self-healing

303
00:10:23,200 --> 00:10:26,000
you no longer want to alert on the thing

304
00:10:26,000 --> 00:10:27,600
is broken

305
00:10:27,600 --> 00:10:31,040
but rather the thing has been broken

306
00:10:31,040 --> 00:10:33,519
for longer than you would expect and

307
00:10:33,519 --> 00:10:35,279
trust that in the meantime

308
00:10:35,279 --> 00:10:37,040
you know the the other one of the two

309
00:10:37,040 --> 00:10:38,880
that you should have um

310
00:10:38,880 --> 00:10:40,880
will take over and you ideally don't

311
00:10:40,880 --> 00:10:42,079
have any

312
00:10:42,079 --> 00:10:45,200
customer facing impact as the system

313
00:10:45,200 --> 00:10:47,680
realigns itself and things come back

314
00:10:47,680 --> 00:10:51,040
together fall back into place

315
00:10:52,880 --> 00:10:57,279
this extensibility is important

316
00:10:57,279 --> 00:11:01,040
because kubernetes like many things that

317
00:11:01,040 --> 00:11:02,560
came out of google

318
00:11:02,560 --> 00:11:04,800
strictly follows an 80 20 rule it does a

319
00:11:04,800 --> 00:11:06,480
lot of things for a lot of people

320
00:11:06,480 --> 00:11:08,800
but not everything will always work for

321
00:11:08,800 --> 00:11:11,120
everyone just as it is

322
00:11:11,120 --> 00:11:12,560
also there's a couple of areas where

323
00:11:12,560 --> 00:11:14,160
they kind of forgot

324
00:11:14,160 --> 00:11:16,399
a few things that you know aren't really

325
00:11:16,399 --> 00:11:17,680
very well covered and we'll look at a

326
00:11:17,680 --> 00:11:19,680
couple of those in a minute

327
00:11:19,680 --> 00:11:23,519
um but because of the way it is built it

328
00:11:23,519 --> 00:11:24,480
is actually quite

329
00:11:24,480 --> 00:11:27,200
easy for anyone to add custom

330
00:11:27,200 --> 00:11:28,000
controllers

331
00:11:28,000 --> 00:11:29,839
into the mix and with relatively little

332
00:11:29,839 --> 00:11:32,000
investment you can unlock

333
00:11:32,000 --> 00:11:34,640
a lot of potential if you're interested

334
00:11:34,640 --> 00:11:36,560
or after this talk will be interested in

335
00:11:36,560 --> 00:11:37,920
doing something like this i recommend

336
00:11:37,920 --> 00:11:39,440
you have a look at cube builder

337
00:11:39,440 --> 00:11:42,480
which provides you with a framework on

338
00:11:42,480 --> 00:11:43,120
how to

339
00:11:43,120 --> 00:11:45,040
build custom controllers for kubernetes

340
00:11:45,040 --> 00:11:46,399
with a lot of scaffolding

341
00:11:46,399 --> 00:11:50,320
that makes it even easier um

342
00:11:50,320 --> 00:11:53,519
but to look at an example of this

343
00:11:53,519 --> 00:11:55,760
i'd like to point at managing

344
00:11:55,760 --> 00:11:57,920
configuration

345
00:11:57,920 --> 00:12:00,480
you will probably know that pods can

346
00:12:00,480 --> 00:12:02,480
consume config maps and secrets

347
00:12:02,480 --> 00:12:05,839
either as environment variables or as

348
00:12:05,839 --> 00:12:08,880
mounted volumes and

349
00:12:08,880 --> 00:12:11,600
that's great you know we love separating

350
00:12:11,600 --> 00:12:13,040
code and config

351
00:12:13,040 --> 00:12:15,680
but what happens when the configuration

352
00:12:15,680 --> 00:12:17,760
changes

353
00:12:17,760 --> 00:12:19,680
well if it's consumed as environment

354
00:12:19,680 --> 00:12:22,000
variables we're kind of screwed that the

355
00:12:22,000 --> 00:12:23,680
environment for a process can't really

356
00:12:23,680 --> 00:12:24,079
change

357
00:12:24,079 --> 00:12:26,079
after the fact so the container would

358
00:12:26,079 --> 00:12:28,720
need to restart to pick up those changes

359
00:12:28,720 --> 00:12:31,040
but cubelet doesn't know that that

360
00:12:31,040 --> 00:12:33,200
restart is necessary

361
00:12:33,200 --> 00:12:34,720
and even if you're consuming the

362
00:12:34,720 --> 00:12:36,880
configuration as files which

363
00:12:36,880 --> 00:12:38,880
will eventually change on the container

364
00:12:38,880 --> 00:12:40,160
file system

365
00:12:40,160 --> 00:12:43,200
to represent manifest that change

366
00:12:43,200 --> 00:12:45,600
it is now your processes responsibility

367
00:12:45,600 --> 00:12:47,600
to monitor those files

368
00:12:47,600 --> 00:12:50,880
and reload on change some process can do

369
00:12:50,880 --> 00:12:51,200
that

370
00:12:51,200 --> 00:12:53,760
some processes can't so the results are

371
00:12:53,760 --> 00:12:55,519
very inconsistent

372
00:12:55,519 --> 00:12:58,320
and in my my previous job this this bit

373
00:12:58,320 --> 00:12:59,279
us a few times

374
00:12:59,279 --> 00:13:02,720
early on and um you know after a couple

375
00:13:02,720 --> 00:13:04,160
of incidents

376
00:13:04,160 --> 00:13:07,200
i decided that enough was enough and i

377
00:13:07,200 --> 00:13:08,160
figured you know what's a platform

378
00:13:08,160 --> 00:13:08,880
engineer to do

379
00:13:08,880 --> 00:13:11,040
well you write a custom controller and

380
00:13:11,040 --> 00:13:14,079
that's where wave came from

381
00:13:14,079 --> 00:13:17,519
and wave is a surprisingly simple

382
00:13:17,519 --> 00:13:19,440
piece of code that really only does one

383
00:13:19,440 --> 00:13:20,959
thing it looks

384
00:13:20,959 --> 00:13:22,639
at all the conflict maps and all the

385
00:13:22,639 --> 00:13:24,240
secrets that

386
00:13:24,240 --> 00:13:27,519
a deployment port spec reference

387
00:13:27,519 --> 00:13:29,200
and it then calculates a hash over their

388
00:13:29,200 --> 00:13:30,560
contents

389
00:13:30,560 --> 00:13:33,120
it stores that hash with the pod spec in

390
00:13:33,120 --> 00:13:34,639
the deployment

391
00:13:34,639 --> 00:13:37,360
and then it watches for changes if

392
00:13:37,360 --> 00:13:38,160
someone now

393
00:13:38,160 --> 00:13:41,279
changes a config map it will update that

394
00:13:41,279 --> 00:13:41,760
hash

395
00:13:41,760 --> 00:13:43,680
and write that updated hash into the

396
00:13:43,680 --> 00:13:45,680
deployments pod spec

397
00:13:45,680 --> 00:13:48,160
and because the pod spec has now changed

398
00:13:48,160 --> 00:13:49,760
we get the same effect that

399
00:13:49,760 --> 00:13:51,440
that as when anything else in the

400
00:13:51,440 --> 00:13:53,519
deployment changes say you change the

401
00:13:53,519 --> 00:13:56,480
the i don't know the command line of the

402
00:13:56,480 --> 00:13:58,399
container or the container image

403
00:13:58,399 --> 00:14:00,399
it will trigger a rollout so the

404
00:14:00,399 --> 00:14:02,000
deployment controller will kick in it'll

405
00:14:02,000 --> 00:14:03,600
make a new replica set the rep like i

406
00:14:03,600 --> 00:14:05,600
said will make new pods and it will

407
00:14:05,600 --> 00:14:07,199
honor all of your

408
00:14:07,199 --> 00:14:09,600
min available and max surge and you know

409
00:14:09,600 --> 00:14:11,440
that we didn't need to reinvent that

410
00:14:11,440 --> 00:14:12,160
wheel

411
00:14:12,160 --> 00:14:15,279
at all the only thing that wave does is

412
00:14:15,279 --> 00:14:15,680
it

413
00:14:15,680 --> 00:14:18,399
triggers that well-known well-understood

414
00:14:18,399 --> 00:14:19,199
process

415
00:14:19,199 --> 00:14:23,599
by making a change to the deployment

416
00:14:25,519 --> 00:14:28,079
another of these gaps is secrets

417
00:14:28,079 --> 00:14:29,440
management

418
00:14:29,440 --> 00:14:31,279
kubernetes secrets aren't really very

419
00:14:31,279 --> 00:14:32,800
very secret they are

420
00:14:32,800 --> 00:14:34,880
great for consuming in cluster because

421
00:14:34,880 --> 00:14:37,920
they're just basic d4 encoder plain text

422
00:14:37,920 --> 00:14:39,920
um but they're not very great for

423
00:14:39,920 --> 00:14:43,040
storing or managing outside

424
00:14:43,040 --> 00:14:44,560
and there are a number of solutions for

425
00:14:44,560 --> 00:14:47,120
this but all of the good ones

426
00:14:47,120 --> 00:14:49,839
follow the same pattern they give you a

427
00:14:49,839 --> 00:14:52,079
custom resource that is a proxy to your

428
00:14:52,079 --> 00:14:53,199
secret that is

429
00:14:53,199 --> 00:14:55,519
safe to store safe to handle but

430
00:14:55,519 --> 00:14:57,279
contains enough information

431
00:14:57,279 --> 00:14:59,839
for a controller on the cluster to

432
00:14:59,839 --> 00:15:02,959
recreate the actual secrets object

433
00:15:02,959 --> 00:15:05,360
on the cluster itself and keep them in

434
00:15:05,360 --> 00:15:06,399
sync

435
00:15:06,399 --> 00:15:09,600
one example is bitnami's cl secrets

436
00:15:09,600 --> 00:15:10,320
controller

437
00:15:10,320 --> 00:15:13,440
which uses asymmetric cryptography with

438
00:15:13,440 --> 00:15:13,839
a

439
00:15:13,839 --> 00:15:16,880
key held on the cluster that allows the

440
00:15:16,880 --> 00:15:18,560
cluster to decrypt an otherwise

441
00:15:18,560 --> 00:15:20,639
encrypted sealed secret object that you

442
00:15:20,639 --> 00:15:22,399
can store and get

443
00:15:22,399 --> 00:15:25,360
um and that is is safe because only the

444
00:15:25,360 --> 00:15:25,920
cluster

445
00:15:25,920 --> 00:15:29,040
itself has the key to decrypt it another

446
00:15:29,040 --> 00:15:29,360
one

447
00:15:29,360 --> 00:15:31,440
is the external kubernetes external

448
00:15:31,440 --> 00:15:32,639
secrets which can

449
00:15:32,639 --> 00:15:35,199
keep a secret object in sync with for

450
00:15:35,199 --> 00:15:36,240
example

451
00:15:36,240 --> 00:15:39,920
information stored in aws secret manager

452
00:15:39,920 --> 00:15:41,600
but in both cases

453
00:15:41,600 --> 00:15:45,600
you have an object that is kept in sync

454
00:15:45,600 --> 00:15:47,440
with another object and that's done by a

455
00:15:47,440 --> 00:15:50,000
controller

456
00:15:50,079 --> 00:15:51,920
speaking of cluster state you know i

457
00:15:51,920 --> 00:15:54,000
said storing in git that in fact

458
00:15:54,000 --> 00:15:55,440
is one of the big challenges you have

459
00:15:55,440 --> 00:15:57,199
when you want to run kubernetes

460
00:15:57,199 --> 00:15:59,440
in a large deployment in production how

461
00:15:59,440 --> 00:16:00,560
do you manage

462
00:16:00,560 --> 00:16:02,480
that desired state when everything is

463
00:16:02,480 --> 00:16:04,240
changing all the time and so many hands

464
00:16:04,240 --> 00:16:05,680
are involved

465
00:16:05,680 --> 00:16:07,279
and the best practice that is emerging

466
00:16:07,279 --> 00:16:09,120
on that is using git

467
00:16:09,120 --> 00:16:11,199
a practice called git ops where your

468
00:16:11,199 --> 00:16:13,519
operations are triggered by changes to

469
00:16:13,519 --> 00:16:14,639
git

470
00:16:14,639 --> 00:16:16,800
so you have a git repository that is

471
00:16:16,800 --> 00:16:18,240
already versioned

472
00:16:18,240 --> 00:16:21,680
you put your for example your raw yaml

473
00:16:21,680 --> 00:16:23,600
objects into that repository

474
00:16:23,600 --> 00:16:26,320
and you use a controller to continuously

475
00:16:26,320 --> 00:16:28,800
keep the cluster in sync with what's

476
00:16:28,800 --> 00:16:31,839
in that repository one example that does

477
00:16:31,839 --> 00:16:33,519
this is argo cd and it would strongly

478
00:16:33,519 --> 00:16:34,399
encourage you

479
00:16:34,399 --> 00:16:36,959
to take a look at that approach if you

480
00:16:36,959 --> 00:16:39,440
plan to run kubernetes in a

481
00:16:39,440 --> 00:16:43,680
large production capacity

482
00:16:44,720 --> 00:16:47,279
another thing you'll have to look at is

483
00:16:47,279 --> 00:16:48,959
obviously monitoring and alerting

484
00:16:48,959 --> 00:16:51,120
there's a lot of moving parts a lot more

485
00:16:51,120 --> 00:16:51,839
than

486
00:16:51,839 --> 00:16:54,880
you know systems of old used to have and

487
00:16:54,880 --> 00:16:56,480
there's a lot more data that you need to

488
00:16:56,480 --> 00:16:58,880
understand what really is going on

489
00:16:58,880 --> 00:17:00,959
you don't want to just deploy prometheus

490
00:17:00,959 --> 00:17:02,639
and grafana and call it a day

491
00:17:02,639 --> 00:17:04,160
spend some time actually building good

492
00:17:04,160 --> 00:17:06,799
dashboards that tell you a story

493
00:17:06,799 --> 00:17:08,959
i promise you future on-call you will be

494
00:17:08,959 --> 00:17:11,359
very grateful for those

495
00:17:11,359 --> 00:17:13,599
and you want to build your alerts around

496
00:17:13,599 --> 00:17:15,199
persistent errors

497
00:17:15,199 --> 00:17:19,039
not spikes not short changes that should

498
00:17:19,039 --> 00:17:21,599
really be correcting themselves

499
00:17:21,599 --> 00:17:23,359
you know ideally you want to look at

500
00:17:23,359 --> 00:17:25,359
leading indicators things like

501
00:17:25,359 --> 00:17:28,400
increasing latencies increasing

502
00:17:28,400 --> 00:17:30,000
requests per second these sorts of

503
00:17:30,000 --> 00:17:32,320
things so that ideally you can take

504
00:17:32,320 --> 00:17:33,039
action

505
00:17:33,039 --> 00:17:35,679
before something breaks a lot of this

506
00:17:35,679 --> 00:17:37,120
stuff can be automated

507
00:17:37,120 --> 00:17:39,120
for example you know horizontal port

508
00:17:39,120 --> 00:17:41,520
auto scalers allow you to scale out

509
00:17:41,520 --> 00:17:44,880
your compute capacity as your

510
00:17:44,880 --> 00:17:48,320
load increases but where

511
00:17:48,320 --> 00:17:50,080
those systems fail you want to be

512
00:17:50,080 --> 00:17:51,679
alerted of those

513
00:17:51,679 --> 00:17:55,360
trends and lastly of course

514
00:17:55,360 --> 00:17:56,720
you want to make use of your error

515
00:17:56,720 --> 00:17:59,440
budgets nothing is ever 100

516
00:17:59,440 --> 00:18:02,880
up and understanding how much down is

517
00:18:02,880 --> 00:18:04,000
acceptable to you

518
00:18:04,000 --> 00:18:07,280
allows you to build alerts that only

519
00:18:07,280 --> 00:18:09,280
really fire when it's necessary

520
00:18:09,280 --> 00:18:11,280
and don't distract you and leave you

521
00:18:11,280 --> 00:18:12,400
time to work

522
00:18:12,400 --> 00:18:16,880
on things um that are more important

523
00:18:17,200 --> 00:18:19,440
lastly i did promise in the blurb and

524
00:18:19,440 --> 00:18:20,799
answer to the question should you roll

525
00:18:20,799 --> 00:18:22,559
your own cluster

526
00:18:22,559 --> 00:18:23,919
and i guess i should probably come

527
00:18:23,919 --> 00:18:26,840
through with that uh the answer is it is

528
00:18:26,840 --> 00:18:30,000
complicated but

529
00:18:30,000 --> 00:18:32,559
i will say nothing that i've described

530
00:18:32,559 --> 00:18:33,600
so far

531
00:18:33,600 --> 00:18:35,679
requires you to self-host all of the

532
00:18:35,679 --> 00:18:36,799
stuff that i've talked about writing

533
00:18:36,799 --> 00:18:38,080
custom controllers

534
00:18:38,080 --> 00:18:41,600
uh doing your alerting based on uh these

535
00:18:41,600 --> 00:18:43,280
their metrics all of that can be done in

536
00:18:43,280 --> 00:18:45,440
gke can be done on eks it can be done on

537
00:18:45,440 --> 00:18:46,480
openshift any

538
00:18:46,480 --> 00:18:49,520
sort of kubernetes will do but

539
00:18:49,520 --> 00:18:52,559
do remember the 80 20 rule basically if

540
00:18:52,559 --> 00:18:53,280
your

541
00:18:53,280 --> 00:18:56,880
payloads are reasonably similar

542
00:18:56,880 --> 00:18:59,200
to what about 80 of everybody else is

543
00:18:59,200 --> 00:19:00,320
doing

544
00:19:00,320 --> 00:19:02,400
you're probably going to be just fine

545
00:19:02,400 --> 00:19:03,360
with

546
00:19:03,360 --> 00:19:06,400
gke eks what have you

547
00:19:06,400 --> 00:19:08,000
and if you're doing something

548
00:19:08,000 --> 00:19:10,559
particularly unusual

549
00:19:10,559 --> 00:19:11,840
you'll have to do some extra work

550
00:19:11,840 --> 00:19:14,080
anyways to make kubernetes work for you

551
00:19:14,080 --> 00:19:16,080
and you'll need good engineers for that

552
00:19:16,080 --> 00:19:17,440
and if you have those

553
00:19:17,440 --> 00:19:19,120
self-hosting kubernetes isn't actually

554
00:19:19,120 --> 00:19:20,880
all that difficult we used to do it we

555
00:19:20,880 --> 00:19:23,200
had four five production clusters

556
00:19:23,200 --> 00:19:26,240
we managed those with a team of three

557
00:19:26,240 --> 00:19:26,880
engineers

558
00:19:26,880 --> 00:19:30,960
and we had maybe one on-call paged event

559
00:19:30,960 --> 00:19:34,400
a month thereabouts so so that can be

560
00:19:34,400 --> 00:19:35,120
done

561
00:19:35,120 --> 00:19:37,520
but really it comes down to what your

562
00:19:37,520 --> 00:19:39,120
payloads look like

563
00:19:39,120 --> 00:19:40,960
you know one example when we started

564
00:19:40,960 --> 00:19:42,640
using kubernetes that was like one

565
00:19:42,640 --> 00:19:45,280
five times we didn't even have ingresses

566
00:19:45,280 --> 00:19:46,799
yet

567
00:19:46,799 --> 00:19:49,840
and at that point we discovered a

568
00:19:49,840 --> 00:19:52,960
um a problem i would argue a bug in the

569
00:19:52,960 --> 00:19:55,039
way that container resource limits

570
00:19:55,039 --> 00:19:58,320
were implemented that led to in the

571
00:19:58,320 --> 00:19:59,520
worst case

572
00:19:59,520 --> 00:20:01,760
an almost 100 millisecond delay being

573
00:20:01,760 --> 00:20:04,159
added on every hub of a request

574
00:20:04,159 --> 00:20:06,400
through a network network of

575
00:20:06,400 --> 00:20:07,679
microservices

576
00:20:07,679 --> 00:20:09,120
you can imagine if you've got to go

577
00:20:09,120 --> 00:20:11,280
through 10 plus microservices in order

578
00:20:11,280 --> 00:20:13,120
to service a customer request

579
00:20:13,120 --> 00:20:14,640
and in the worst case you add 100

580
00:20:14,640 --> 00:20:16,240
milliseconds at each hop

581
00:20:16,240 --> 00:20:20,480
that quickly adds up so

582
00:20:20,480 --> 00:20:22,080
for for us at the time we were doing

583
00:20:22,080 --> 00:20:23,679
real-time communication

584
00:20:23,679 --> 00:20:26,400
apis that wasn't really acceptable and

585
00:20:26,400 --> 00:20:28,240
so we ended up

586
00:20:28,240 --> 00:20:30,320
actually running a fork of kubernetes

587
00:20:30,320 --> 00:20:31,919
for a couple of versions

588
00:20:31,919 --> 00:20:34,640
until a fix for that got integrated into

589
00:20:34,640 --> 00:20:36,159
the mainline code base

590
00:20:36,159 --> 00:20:38,080
and we could only do that because we

591
00:20:38,080 --> 00:20:39,200
controlled

592
00:20:39,200 --> 00:20:41,679
the control plane the api server the

593
00:20:41,679 --> 00:20:42,880
controller manager

594
00:20:42,880 --> 00:20:46,080
cubelet if we had been on

595
00:20:46,080 --> 00:20:48,240
something like gke we wouldn't have had

596
00:20:48,240 --> 00:20:49,280
a prayer

597
00:20:49,280 --> 00:20:52,320
so we made that decision because we knew

598
00:20:52,320 --> 00:20:54,000
real time stuff was fairly new and

599
00:20:54,000 --> 00:20:55,520
kubernetes was fairly new

600
00:20:55,520 --> 00:20:58,080
and not many people were doing it it

601
00:20:58,080 --> 00:20:59,919
turned out to be the right decision

602
00:20:59,919 --> 00:21:01,840
but really that's the question you

603
00:21:01,840 --> 00:21:03,520
should be asking yourselves

604
00:21:03,520 --> 00:21:06,159
am i doing something unusual am i doing

605
00:21:06,159 --> 00:21:07,200
something

606
00:21:07,200 --> 00:21:09,280
new or am i just doing what everybody

607
00:21:09,280 --> 00:21:11,120
else is doing in which case

608
00:21:11,120 --> 00:21:14,240
host it will serve you just fine and

609
00:21:14,240 --> 00:21:15,120
with that

610
00:21:15,120 --> 00:21:17,039
um i hope there should be some time for

611
00:21:17,039 --> 00:21:18,480
questions i did not look

612
00:21:18,480 --> 00:21:21,200
at the time maybe perfect phil perfect

613
00:21:21,200 --> 00:21:22,159
yeah thanks very much for that

614
00:21:22,159 --> 00:21:23,440
that was really good and yeah you've got

615
00:21:23,440 --> 00:21:25,200
uh we got like seven eight minutes

616
00:21:25,200 --> 00:21:26,960
luxury amount of time for questions

617
00:21:26,960 --> 00:21:29,679
yeah so i've got a couple uh racked up

618
00:21:29,679 --> 00:21:30,480
the first one

619
00:21:30,480 --> 00:21:32,720
uh from chris scotsman said uh phil you

620
00:21:32,720 --> 00:21:33,840
mentioned monitoring

621
00:21:33,840 --> 00:21:35,520
uh investing time in building good

622
00:21:35,520 --> 00:21:37,760
dashboards are there any existing

623
00:21:37,760 --> 00:21:39,760
grafana dashboards for kubernetes

624
00:21:39,760 --> 00:21:43,039
based on best practices

625
00:21:43,039 --> 00:21:45,200
i'm sure they are there are uh i'm

626
00:21:45,200 --> 00:21:47,919
afraid i don't really know many because

627
00:21:47,919 --> 00:21:49,440
as i said when when we started using

628
00:21:49,440 --> 00:21:51,360
kubernetes uh back in my previous

629
00:21:51,360 --> 00:21:52,159
company

630
00:21:52,159 --> 00:21:54,880
that was fairly early on so we built our

631
00:21:54,880 --> 00:21:56,240
own set of dashboards

632
00:21:56,240 --> 00:21:59,280
and so i never really had a need

633
00:21:59,280 --> 00:22:02,240
to look elsewhere um it is always a good

634
00:22:02,240 --> 00:22:03,039
idea though

635
00:22:03,039 --> 00:22:05,760
to have a look around um these sorts of

636
00:22:05,760 --> 00:22:06,640
challenges

637
00:22:06,640 --> 00:22:09,919
are not unique to you um

638
00:22:09,919 --> 00:22:11,760
you know running kubernetes is something

639
00:22:11,760 --> 00:22:13,200
that's becoming more popular

640
00:22:13,200 --> 00:22:15,360
so more and more people are looking into

641
00:22:15,360 --> 00:22:16,240
solutions

642
00:22:16,240 --> 00:22:18,320
to common problems dashboards are one of

643
00:22:18,320 --> 00:22:19,440
them um

644
00:22:19,440 --> 00:22:20,880
i know there are resources out there

645
00:22:20,880 --> 00:22:22,559
unfortunately i can't point you to one

646
00:22:22,559 --> 00:22:23,520
right now

647
00:22:23,520 --> 00:22:25,360
no way i'll just quickly check in i know

648
00:22:25,360 --> 00:22:26,720
um the prometheus folks have got some

649
00:22:26,720 --> 00:22:28,159
really good stuff the gravana website

650
00:22:28,159 --> 00:22:29,679
itself has got a bunch of cool things

651
00:22:29,679 --> 00:22:30,799
and some of my friends are talking if

652
00:22:30,799 --> 00:22:32,400
you're running service mesh like istio

653
00:22:32,400 --> 00:22:34,159
kiyali is well worth looking at

654
00:22:34,159 --> 00:22:37,840
oh yeah yeah yeah we did run kiyalikali

655
00:22:37,840 --> 00:22:40,400
is great because it visualizes the flow

656
00:22:40,400 --> 00:22:42,320
through your service mesh in a way that

657
00:22:42,320 --> 00:22:44,559
makes it a lot easier to pinpoint where

658
00:22:44,559 --> 00:22:45,840
problems are

659
00:22:45,840 --> 00:22:47,919
yeah i found that very useful and what

660
00:22:47,919 --> 00:22:49,039
the other question here

661
00:22:49,039 --> 00:22:50,320
is you mentioned a lot of cool stuff

662
00:22:50,320 --> 00:22:52,240
there if there if someone is

663
00:22:52,240 --> 00:22:53,760
investigating communities where should

664
00:22:53,760 --> 00:22:54,000
they

665
00:22:54,000 --> 00:22:57,600
start investigating as in you want to

666
00:22:57,600 --> 00:22:59,280
play around with it

667
00:22:59,280 --> 00:23:01,280
or looking to run sort of in production

668
00:23:01,280 --> 00:23:02,720
i guess is the

669
00:23:02,720 --> 00:23:05,760
is this i think if you're new to

670
00:23:05,760 --> 00:23:06,799
kubernetes

671
00:23:06,799 --> 00:23:09,120
running kubernetes yourself to begin

672
00:23:09,120 --> 00:23:09,919
with is

673
00:23:09,919 --> 00:23:13,280
always a good idea um gke makes it

674
00:23:13,280 --> 00:23:15,120
incredibly easy

675
00:23:15,120 --> 00:23:17,919
um just spin up a cluster and within

676
00:23:17,919 --> 00:23:19,919
minutes you can run your cube control

677
00:23:19,919 --> 00:23:22,000
and you can try out whatever it is you

678
00:23:22,000 --> 00:23:23,679
want to try out

679
00:23:23,679 --> 00:23:27,360
um if you want to run kubernetes in

680
00:23:27,360 --> 00:23:28,559
production

681
00:23:28,559 --> 00:23:30,240
really that that's where where i would

682
00:23:30,240 --> 00:23:32,480
start and then add to that

683
00:23:32,480 --> 00:23:34,240
all the things that make a production

684
00:23:34,240 --> 00:23:36,720
ready monitoring alerting

685
00:23:36,720 --> 00:23:40,320
um looking at you know you know what

686
00:23:40,320 --> 00:23:41,039
sort of

687
00:23:41,039 --> 00:23:42,880
workloads are you going to be running

688
00:23:42,880 --> 00:23:44,320
you'll want to think about

689
00:23:44,320 --> 00:23:46,640
what sizes and shapes of nodes your

690
00:23:46,640 --> 00:23:48,240
cluster will need

691
00:23:48,240 --> 00:23:50,960
um but it is because everything is is so

692
00:23:50,960 --> 00:23:52,080
componentized

693
00:23:52,080 --> 00:23:54,960
uh it's a system that is very easily

694
00:23:54,960 --> 00:23:55,679
sort of sort of

695
00:23:55,679 --> 00:23:57,200
you know built out of building blocks

696
00:23:57,200 --> 00:23:59,520
you can start simple and as your needs

697
00:23:59,520 --> 00:24:00,240
evolve

698
00:24:00,240 --> 00:24:03,919
you add bits to your cluster

699
00:24:04,080 --> 00:24:05,919
another question from tim nicholas can

700
00:24:05,919 --> 00:24:07,840
you give some other examples of what

701
00:24:07,840 --> 00:24:10,159
now might be non-standard or off the

702
00:24:10,159 --> 00:24:11,919
beaten path when it comes to running

703
00:24:11,919 --> 00:24:14,480
workloads on kubernetes where is the

704
00:24:14,480 --> 00:24:17,440
edge of normal now

705
00:24:17,440 --> 00:24:19,360
i would say the edge of normal is moving

706
00:24:19,360 --> 00:24:21,279
very very quickly

707
00:24:21,279 --> 00:24:24,400
so it's as kubernetes becomes more

708
00:24:24,400 --> 00:24:25,600
mainstream

709
00:24:25,600 --> 00:24:28,400
and more companies look at moving their

710
00:24:28,400 --> 00:24:29,760
existing payloads

711
00:24:29,760 --> 00:24:32,240
to kubernetes they are investing and

712
00:24:32,240 --> 00:24:34,559
thankfully sharing a lot of effort

713
00:24:34,559 --> 00:24:36,799
in in how to make that happen when we

714
00:24:36,799 --> 00:24:37,679
started

715
00:24:37,679 --> 00:24:39,919
really the only thing that worked well

716
00:24:39,919 --> 00:24:41,760
was something like

717
00:24:41,760 --> 00:24:43,039
you know your your ecommerce

718
00:24:43,039 --> 00:24:45,039
applications you know a web shop or

719
00:24:45,039 --> 00:24:46,000
something

720
00:24:46,000 --> 00:24:48,640
trying to do real time on kubernetes was

721
00:24:48,640 --> 00:24:50,080
very unusual

722
00:24:50,080 --> 00:24:53,520
that's changed now um

723
00:24:53,520 --> 00:24:55,679
i think the the niche where you're

724
00:24:55,679 --> 00:24:57,679
really doing something new

725
00:24:57,679 --> 00:25:00,159
is becoming smaller and smaller i would

726
00:25:00,159 --> 00:25:00,960
say one thing

727
00:25:00,960 --> 00:25:04,000
certainly that is not very

728
00:25:04,000 --> 00:25:07,120
commonly done is running

729
00:25:07,120 --> 00:25:10,720
things like databases of large large

730
00:25:10,720 --> 00:25:12,080
scale databases

731
00:25:12,080 --> 00:25:14,640
in cluster and that's because cloud

732
00:25:14,640 --> 00:25:16,559
providers make it incredibly easy to

733
00:25:16,559 --> 00:25:16,960
just

734
00:25:16,960 --> 00:25:20,000
buy in your rds or your cloud sql uh

735
00:25:20,000 --> 00:25:23,360
database as a service and sit that next

736
00:25:23,360 --> 00:25:25,360
to your kubernetes cluster

737
00:25:25,360 --> 00:25:28,799
if you're running on bare metal or or

738
00:25:28,799 --> 00:25:29,919
for some other reason

739
00:25:29,919 --> 00:25:33,279
you can't or don't want to use that

740
00:25:33,279 --> 00:25:35,360
that's an area where you may want to

741
00:25:35,360 --> 00:25:37,440
invest some time in engineering effort

742
00:25:37,440 --> 00:25:39,360
to build good solutions that allow you

743
00:25:39,360 --> 00:25:41,279
to run those payloads

744
00:25:41,279 --> 00:25:42,880
in the same sort of automated

745
00:25:42,880 --> 00:25:45,440
self-healing way as everything else

746
00:25:45,440 --> 00:25:48,080
super time for one more question uh phil

747
00:25:48,080 --> 00:25:49,679
if i was going to run kubernetes

748
00:25:49,679 --> 00:25:51,840
locally what's your favorite tool or

749
00:25:51,840 --> 00:25:54,400
recommended way of doing this

750
00:25:54,400 --> 00:25:58,000
oh so um

751
00:25:58,720 --> 00:26:02,159
what is it what is it called this kind

752
00:26:02,159 --> 00:26:05,279
is what i would kind is is relatively

753
00:26:05,279 --> 00:26:07,600
relatively new um people used to use

754
00:26:07,600 --> 00:26:09,679
mini cube a lot but mini cube

755
00:26:09,679 --> 00:26:13,039
fiddles a lot with with vms and is

756
00:26:13,039 --> 00:26:15,120
very heavy weight and can be more effort

757
00:26:15,120 --> 00:26:17,520
than it's worth sometimes sometimes

758
00:26:17,520 --> 00:26:21,520
kind instead tries to build a kubernetes

759
00:26:21,520 --> 00:26:22,080
cluster

760
00:26:22,080 --> 00:26:24,240
out of docker containers so each node

761
00:26:24,240 --> 00:26:26,159
becomes a docker container running

762
00:26:26,159 --> 00:26:27,600
docker in docker

763
00:26:27,600 --> 00:26:29,120
and as long as your machine has enough

764
00:26:29,120 --> 00:26:32,000
resources it's fairly quickly to spin up

765
00:26:32,000 --> 00:26:35,279
it works pretty much instantly and

766
00:26:35,279 --> 00:26:38,000
it's very good for experimenting we use

767
00:26:38,000 --> 00:26:38,640
kind

768
00:26:38,640 --> 00:26:40,799
for like end-to-end and integration

769
00:26:40,799 --> 00:26:42,400
tests of kubernetes

770
00:26:42,400 --> 00:26:44,400
payloads and certainly i think that's

771
00:26:44,400 --> 00:26:46,799
where i would start if you don't want to

772
00:26:46,799 --> 00:26:48,480
go to a cloud provider and spin up a

773
00:26:48,480 --> 00:26:50,159
hosted cluster there

774
00:26:50,159 --> 00:26:51,919
super thanks so well really appreciate

775
00:26:51,919 --> 00:26:53,600
your time fantastic presentation would

776
00:26:53,600 --> 00:26:55,200
please join me in thanking phil on the

777
00:26:55,200 --> 00:26:55,760
slack

778
00:26:55,760 --> 00:26:56,880
uh we'll see you on the slackville

779
00:26:56,880 --> 00:26:58,080
there's more questions there if that's

780
00:26:58,080 --> 00:26:59,039
okay with you

781
00:26:59,039 --> 00:27:00,480
absolutely thank you very much thanks

782
00:27:00,480 --> 00:27:04,880
again for your time

