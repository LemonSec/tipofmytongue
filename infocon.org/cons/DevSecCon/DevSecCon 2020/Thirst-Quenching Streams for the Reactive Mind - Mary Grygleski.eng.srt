1
00:00:00,000 --> 00:00:04,350
and hi everybody my name is Mary

2
00:00:04,350 --> 00:00:07,589
cholesky I'm a developer advocate at IBM

3
00:00:07,589 --> 00:00:10,679
and I'm with the Java developer advocacy

4
00:00:10,679 --> 00:00:13,980
team all my teammates there are four of

5
00:00:13,980 --> 00:00:14,610
us

6
00:00:14,610 --> 00:00:18,270
pratik Billy Sebastian they already did

7
00:00:18,270 --> 00:00:21,840
their presentation earlier today so so

8
00:00:21,840 --> 00:00:24,359
if you miss it I guess we can look up

9
00:00:24,359 --> 00:00:27,420
the recording later so without further

10
00:00:27,420 --> 00:00:30,510
ado thank you very much for coming to my

11
00:00:30,510 --> 00:00:34,050
talk it is late in the day I'm in

12
00:00:34,050 --> 00:00:37,590
Chicago so central US central day time

13
00:00:37,590 --> 00:00:42,149
so I'll start to talk I'm on my team I'm

14
00:00:42,149 --> 00:00:44,399
responsible for doing things that are

15
00:00:44,399 --> 00:00:47,010
related to reactive so as such you know

16
00:00:47,010 --> 00:00:50,579
reactive is a a it's still a word of a

17
00:00:50,579 --> 00:00:54,989
lot of cause I think it's just making

18
00:00:54,989 --> 00:00:56,789
people like wonder what it is I mean

19
00:00:56,789 --> 00:00:58,260
there are groups of people who are

20
00:00:58,260 --> 00:00:59,850
working on things that are you know

21
00:00:59,850 --> 00:01:01,920
quite deep into it but they're also at

22
00:01:01,920 --> 00:01:04,709
the same time a lot of us do I feel

23
00:01:04,709 --> 00:01:07,680
probably churning out code you know for

24
00:01:07,680 --> 00:01:09,840
the current production systems in some

25
00:01:09,840 --> 00:01:11,970
like legacy systems so it's kind of

26
00:01:11,970 --> 00:01:14,939
curious about reactive so was I actually

27
00:01:14,939 --> 00:01:18,390
before coming to IBM I was also been

28
00:01:18,390 --> 00:01:20,790
very curious about reactive and I so I

29
00:01:20,790 --> 00:01:23,430
got a chance to work on this and I'm

30
00:01:23,430 --> 00:01:25,860
kind of excited to because it is such as

31
00:01:25,860 --> 00:01:28,979
a pretty exciting field that promises a

32
00:01:28,979 --> 00:01:31,770
lot so let's take a look right now - I

33
00:01:31,770 --> 00:01:34,110
only get like 20 minutes so so this is

34
00:01:34,110 --> 00:01:35,790
actually it turns out to be a lightning

35
00:01:35,790 --> 00:01:39,030
talk of what I had done have done with

36
00:01:39,030 --> 00:01:41,189
this which would have been like a normal

37
00:01:41,189 --> 00:01:43,649
45 minutes talk but this one will be

38
00:01:43,649 --> 00:01:46,110
shorter so I won't be able to get into a

39
00:01:46,110 --> 00:01:49,049
lot of the details but as such - if you

40
00:01:49,049 --> 00:01:51,600
were at a session earlier with Josh and

41
00:01:51,600 --> 00:01:53,399
actually he spend a lot of time talking

42
00:01:53,399 --> 00:01:56,909
about like spring reactor and react and

43
00:01:56,909 --> 00:01:59,369
also our socket so that kind of helped

44
00:01:59,369 --> 00:02:01,409
me and if you have been there you this

45
00:02:01,409 --> 00:02:04,259
probably will if you just go back a

46
00:02:04,259 --> 00:02:06,329
little bit to some like details so

47
00:02:06,329 --> 00:02:08,720
without further ado sorry I'm kind of

48
00:02:08,720 --> 00:02:11,099
taking a bit too long to talk about this

49
00:02:11,099 --> 00:02:14,010
so so let me kind of quickly

50
00:02:14,010 --> 00:02:16,110
then go through the reactive concepts

51
00:02:16,110 --> 00:02:18,180
again so essentially when we talk about

52
00:02:18,180 --> 00:02:21,569
reactive you know in general t would

53
00:02:21,569 --> 00:02:24,120
like different aspects of it so reactive

54
00:02:24,120 --> 00:02:26,370
programming it's really the programming

55
00:02:26,370 --> 00:02:29,400
on a module on a component level you are

56
00:02:29,400 --> 00:02:31,409
dealing with programs that are written

57
00:02:31,409 --> 00:02:34,230
in using a functional style and a

58
00:02:34,230 --> 00:02:36,750
reactive systems actually brings it to

59
00:02:36,750 --> 00:02:40,230
another level up and as such to where

60
00:02:40,230 --> 00:02:41,909
when we're dealing with systems nowadays

61
00:02:41,909 --> 00:02:45,209
we have many components and that's

62
00:02:45,209 --> 00:02:47,129
actually is the power of reactive

63
00:02:47,129 --> 00:02:50,940
systems is it's able to tie together a

64
00:02:50,940 --> 00:02:55,170
system that's four components and pieces

65
00:02:55,170 --> 00:02:58,319
to it that are all isolated in time and

66
00:02:58,319 --> 00:03:02,459
space and as such to the way you know it

67
00:03:02,459 --> 00:03:05,599
is the purpose of such is that it it

68
00:03:05,599 --> 00:03:07,650
essentially is there's also a

69
00:03:07,650 --> 00:03:10,379
specification as it's a it comes out is

70
00:03:10,379 --> 00:03:13,019
called reactive manifesto so reactive

71
00:03:13,019 --> 00:03:15,989
manifesto essentially has four tenants

72
00:03:15,989 --> 00:03:19,430
to it which is responsiveness elasticity

73
00:03:19,430 --> 00:03:22,650
resiliency and message driven so I'll go

74
00:03:22,650 --> 00:03:24,930
I will go into a lot of the details but

75
00:03:24,930 --> 00:03:26,730
there are links to it in which you can

76
00:03:26,730 --> 00:03:29,250
look that up and then get more details

77
00:03:29,250 --> 00:03:31,799
into it and then comes through the

78
00:03:31,799 --> 00:03:33,989
reactive streams and which is the focus

79
00:03:33,989 --> 00:03:37,590
of my talk today so reactive streams are

80
00:03:37,590 --> 00:03:40,410
such is the specification that actually

81
00:03:40,410 --> 00:03:43,650
deals with asynchronous processing and

82
00:03:43,650 --> 00:03:46,919
handling of non blocking back pressure

83
00:03:46,919 --> 00:03:50,340
and let's then go into it and take a

84
00:03:50,340 --> 00:03:53,669
look into that but first of all to when

85
00:03:53,669 --> 00:03:56,760
you when we talk about reactive systems

86
00:03:56,760 --> 00:03:58,919
right there like many mechanisms of

87
00:03:58,919 --> 00:04:01,970
making systems to be more responsive

88
00:04:01,970 --> 00:04:05,730
scalable and resilient so these are some

89
00:04:05,730 --> 00:04:08,069
of the mechanisms that you know as how

90
00:04:08,069 --> 00:04:10,199
do we achieve that so essentially for

91
00:04:10,199 --> 00:04:11,819
reactive systems we are dealing with

92
00:04:11,819 --> 00:04:14,940
systems that are distributed and we need

93
00:04:14,940 --> 00:04:19,620
to handle concurrency and also I here to

94
00:04:19,620 --> 00:04:22,019
I'm basically talking about concurrency

95
00:04:22,019 --> 00:04:25,380
versus parallel because concurrency you

96
00:04:25,380 --> 00:04:27,110
are dealing with tasks

97
00:04:27,110 --> 00:04:29,479
that actually in fact they are maybe

98
00:04:29,479 --> 00:04:33,020
liking the single threat are inside CPU

99
00:04:33,020 --> 00:04:34,669
you can only process the task

100
00:04:34,669 --> 00:04:36,949
essentially they make you think you are

101
00:04:36,949 --> 00:04:39,050
doing concurrently but it's actually a

102
00:04:39,050 --> 00:04:43,069
task that's being like process like one

103
00:04:43,069 --> 00:04:45,289
at a time kind of like that but where

104
00:04:45,289 --> 00:04:47,569
it's like parallelism is parallel

105
00:04:47,569 --> 00:04:49,370
processing deals with like the hardware

106
00:04:49,370 --> 00:04:50,719
level you do need to have multiple

107
00:04:50,719 --> 00:04:54,050
processor and basically like each you

108
00:04:54,050 --> 00:04:56,330
know processor can have a threat and

109
00:04:56,330 --> 00:04:58,759
that handles it and so multiprocessor

110
00:04:58,759 --> 00:05:01,099
will enable the parallelism and then

111
00:05:01,099 --> 00:05:03,680
when we also to when we get into a bit

112
00:05:03,680 --> 00:05:05,750
more to what makes it possible is really

113
00:05:05,750 --> 00:05:08,960
the event-driven style of architecture

114
00:05:08,960 --> 00:05:11,569
and message driven way of doing things

115
00:05:11,569 --> 00:05:13,370
and there's actually there are two

116
00:05:13,370 --> 00:05:15,979
separate things for event-driven in

117
00:05:15,979 --> 00:05:18,949
stealing with messages that are being

118
00:05:18,949 --> 00:05:21,050
admitted it's like you know publish and

119
00:05:21,050 --> 00:05:23,750
subscribe scenario so the message comes

120
00:05:23,750 --> 00:05:26,810
out and it doesn't have a specific

121
00:05:26,810 --> 00:05:29,090
address telling it where to go to it's

122
00:05:29,090 --> 00:05:31,699
basically up to the subscriber the

123
00:05:31,699 --> 00:05:33,680
consumer that are interested in it or

124
00:05:33,680 --> 00:05:36,500
some events that will actually make you

125
00:05:36,500 --> 00:05:39,050
know they to trigger something to happen

126
00:05:39,050 --> 00:05:41,330
and so the subscriber will then do

127
00:05:41,330 --> 00:05:43,400
something about this data whereas for

128
00:05:43,400 --> 00:05:45,650
message driven we're talking about

129
00:05:45,650 --> 00:05:48,349
messages that have a source and a

130
00:05:48,349 --> 00:05:52,339
destination and they actually have a and

131
00:05:52,339 --> 00:05:54,949
it knows where where these going to

132
00:05:54,949 --> 00:05:57,289
there's an address and then there's also

133
00:05:57,289 --> 00:05:59,589
a synchronous versus asynchronous

134
00:05:59,589 --> 00:06:01,550
processing that we're we're talking

135
00:06:01,550 --> 00:06:04,729
about in reactive processing so in

136
00:06:04,729 --> 00:06:06,889
reactive systems there's very often it's

137
00:06:06,889 --> 00:06:09,830
actually always the case in which we're

138
00:06:09,830 --> 00:06:12,110
talking about a synchronous style of

139
00:06:12,110 --> 00:06:14,330
processing in which request goes out and

140
00:06:14,330 --> 00:06:16,310
it doesn't wait for anything to happen

141
00:06:16,310 --> 00:06:17,560
to come back

142
00:06:17,560 --> 00:06:19,969
whereas for synchronous processing which

143
00:06:19,969 --> 00:06:22,610
is also like a traditional legacy way of

144
00:06:22,610 --> 00:06:24,409
doing things is that when you look at

145
00:06:24,409 --> 00:06:28,189
our code it's being modeled as such so

146
00:06:28,189 --> 00:06:30,529
that there's set of data and it you know

147
00:06:30,529 --> 00:06:33,169
some request comes in and then it gets

148
00:06:33,169 --> 00:06:35,599
processed and then it basically during

149
00:06:35,599 --> 00:06:38,330
processing the the requester will wait

150
00:06:38,330 --> 00:06:40,700
for the results to come back so that's

151
00:06:40,700 --> 00:06:42,950
synchronous and then there's also

152
00:06:42,950 --> 00:06:45,080
non-blocking versus blocking i/o

153
00:06:45,080 --> 00:06:48,020
on that level so non-blocking is not

154
00:06:48,020 --> 00:06:50,300
actually the same as in synchronous to

155
00:06:50,300 --> 00:06:52,430
non-blocking we're essentially talking

156
00:06:52,430 --> 00:06:55,550
about IO so when input comes in it

157
00:06:55,550 --> 00:06:57,410
doesn't really wait it drops things off

158
00:06:57,410 --> 00:06:59,660
and then it goes on whereas for blocking

159
00:06:59,660 --> 00:07:01,850
is really input comes in and basically

160
00:07:01,850 --> 00:07:04,370
it's where the input will go in and wait

161
00:07:04,370 --> 00:07:07,760
for the output to come back and actually

162
00:07:07,760 --> 00:07:10,220
for reactive I also got a question that

163
00:07:10,220 --> 00:07:12,200
I've been asked to they are saying you

164
00:07:12,200 --> 00:07:14,600
know I've got a question in which they

165
00:07:14,600 --> 00:07:16,370
are saying that if there are lots of

166
00:07:16,370 --> 00:07:19,100
processing how does you know the system

167
00:07:19,100 --> 00:07:22,070
scale up or down and currently if you

168
00:07:22,070 --> 00:07:23,690
think about it yeah we can add more

169
00:07:23,690 --> 00:07:26,090
hardware to it but that's not the case

170
00:07:26,090 --> 00:07:29,450
for reactive way of doing things and

171
00:07:29,450 --> 00:07:31,520
we're talking about reactive it's also

172
00:07:31,520 --> 00:07:33,620
making use of some threats but the

173
00:07:33,620 --> 00:07:35,150
threats are basically in the use of

174
00:07:35,150 --> 00:07:37,190
space versus internal space and

175
00:07:37,190 --> 00:07:39,200
essentially in reactive way too it

176
00:07:39,200 --> 00:07:41,480
doesn't spawn off more threats to handle

177
00:07:41,480 --> 00:07:44,900
your your tasks because as such the

178
00:07:44,900 --> 00:07:47,960
kernel will process your let's say a

179
00:07:47,960 --> 00:07:50,510
java application you need some work to

180
00:07:50,510 --> 00:07:52,580
be done so it's a thread spawns off and

181
00:07:52,580 --> 00:07:54,590
the thread would then run essentially on

182
00:07:54,590 --> 00:07:56,240
use of space but when it gets processed

183
00:07:56,240 --> 00:07:58,370
it gets context switch over to the

184
00:07:58,370 --> 00:08:00,500
kernel so the cognate kernel would then

185
00:08:00,500 --> 00:08:03,410
process you know the process whatever

186
00:08:03,410 --> 00:08:05,360
you doing and then basically will switch

187
00:08:05,360 --> 00:08:07,820
back to the Illusive space and give give

188
00:08:07,820 --> 00:08:10,160
the results back or whatever it is back

189
00:08:10,160 --> 00:08:13,160
so you can see if if we have like too

190
00:08:13,160 --> 00:08:14,780
many threats then they will become like

191
00:08:14,780 --> 00:08:18,050
very busy it makes your code very busy

192
00:08:18,050 --> 00:08:21,020
so reactive is basically making use of

193
00:08:21,020 --> 00:08:22,970
messaging inside your use of space and

194
00:08:22,970 --> 00:08:25,010
it doesn't need to actually sponsor up

195
00:08:25,010 --> 00:08:28,610
or threats to handle processing so

196
00:08:28,610 --> 00:08:33,760
that's that and I'll go to the next site

197
00:08:34,390 --> 00:08:38,200
okay and also give giving a bit of a

198
00:08:38,200 --> 00:08:40,610
programming basics to when we go back to

199
00:08:40,610 --> 00:08:42,650
reactive programming just want to

200
00:08:42,650 --> 00:08:47,090
explain reactive systems in a you know

201
00:08:47,090 --> 00:08:50,500
kind of basic you know kind of in a time

202
00:08:50,500 --> 00:08:53,510
timeline so if you look into it I'm

203
00:08:53,510 --> 00:08:54,620
using all right smart

204
00:08:54,620 --> 00:08:57,230
to explain so especially to their that

205
00:08:57,230 --> 00:08:59,750
the top line in here is basically a

206
00:08:59,750 --> 00:09:02,330
stream that comes down and and there's

207
00:09:02,330 --> 00:09:04,760
no data in this case and the second case

208
00:09:04,760 --> 00:09:06,800
is that there are data coming in and it

209
00:09:06,800 --> 00:09:09,080
goes one two three and then basically

210
00:09:09,080 --> 00:09:10,730
there's like a perpendicular line

211
00:09:10,730 --> 00:09:12,950
perpendicular line in here it's

212
00:09:12,950 --> 00:09:15,290
basically means that his stream has

213
00:09:15,290 --> 00:09:17,900
terminated it's finished processing the

214
00:09:17,900 --> 00:09:20,300
third one in here you can see two

215
00:09:20,300 --> 00:09:22,520
instead there's an X and essentially an

216
00:09:22,520 --> 00:09:25,400
error in photo and event so in some ways

217
00:09:25,400 --> 00:09:28,790
to it is you know it in reactive

218
00:09:28,790 --> 00:09:31,160
programming is that it basically you're

219
00:09:31,160 --> 00:09:33,860
treating the data error event as the

220
00:09:33,860 --> 00:09:36,310
first class citizen just like any other

221
00:09:36,310 --> 00:09:39,620
events that happens and then the bottom

222
00:09:39,620 --> 00:09:42,410
one here is that the in the time line

223
00:09:42,410 --> 00:09:44,930
data is being processed and this one

224
00:09:44,930 --> 00:09:47,630
indicates a stream that's open it keeps

225
00:09:47,630 --> 00:09:55,940
like receiving data and also this is an

226
00:09:55,940 --> 00:09:58,250
example a basic example of how you do

227
00:09:58,250 --> 00:10:01,670
reactive programming so over here is

228
00:10:01,670 --> 00:10:03,920
that if you look at I'm using a code

229
00:10:03,920 --> 00:10:06,920
from our extra so an observable

230
00:10:06,920 --> 00:10:10,250
essentially is basically is your data

231
00:10:10,250 --> 00:10:12,470
represent your data stream so in this

232
00:10:12,470 --> 00:10:14,690
case it's in the code there you see that

233
00:10:14,690 --> 00:10:17,210
it is reading in the stream of one two

234
00:10:17,210 --> 00:10:18,740
and three so if you look into the time

235
00:10:18,740 --> 00:10:22,160
line you see time line you have one two

236
00:10:22,160 --> 00:10:23,870
and three this represents the marble

237
00:10:23,870 --> 00:10:25,790
represents each of them have carry some

238
00:10:25,790 --> 00:10:28,760
data and then using an operator it

239
00:10:28,760 --> 00:10:30,410
operates on the stream and it's

240
00:10:30,410 --> 00:10:33,410
basically for example here is a map

241
00:10:33,410 --> 00:10:36,110
operator it does a trance transformation

242
00:10:36,110 --> 00:10:39,500
so this is yeah sorry it's a functional

243
00:10:39,500 --> 00:10:42,110
style so basically to is that they

244
00:10:42,110 --> 00:10:44,840
transformed the number of the variable

245
00:10:44,840 --> 00:10:47,300
that comes in in this case is if it's

246
00:10:47,300 --> 00:10:50,330
one it will multiply them by ten and so

247
00:10:50,330 --> 00:10:54,410
in this case you see then it processes

248
00:10:54,410 --> 00:10:56,690
it takes in the stream and it transforms

249
00:10:56,690 --> 00:10:59,510
each one of them and essentially to

250
00:10:59,510 --> 00:11:01,280
within the same command line statement

251
00:11:01,280 --> 00:11:02,990
you do it the consumer will do a

252
00:11:02,990 --> 00:11:05,270
subscribe and the subscriber is

253
00:11:05,270 --> 00:11:07,310
basically consumes the result so the

254
00:11:07,310 --> 00:11:08,430
result what you

255
00:11:08,430 --> 00:11:10,860
see in here the output will comes out as

256
00:11:10,860 --> 00:11:14,640
item 10 item 20 and item 30 so you can

257
00:11:14,640 --> 00:11:16,410
take a look to if you're interested this

258
00:11:16,410 --> 00:11:19,200
rx mobile comm has a lot of examples of

259
00:11:19,200 --> 00:11:21,390
many different kinds of operators that

260
00:11:21,390 --> 00:11:24,830
helps you in your reactive programming

261
00:11:25,730 --> 00:11:29,400
okay and also then talking a little

262
00:11:29,400 --> 00:11:31,680
further than about streams and giving

263
00:11:31,680 --> 00:11:33,600
you some fundamentals essentially we're

264
00:11:33,600 --> 00:11:35,670
dealing with data that flows in streams

265
00:11:35,670 --> 00:11:37,890
and the model we're using is really

266
00:11:37,890 --> 00:11:41,040
producer and consumer so in this case

267
00:11:41,040 --> 00:11:44,360
we're looking at producer coming in and

268
00:11:44,360 --> 00:11:46,710
basically it flows down the stream and

269
00:11:46,710 --> 00:11:48,840
there's some intermediate processing on

270
00:11:48,840 --> 00:11:52,830
a certain stage and then then it keeps

271
00:11:52,830 --> 00:11:55,500
going and the next stage and next stage

272
00:11:55,500 --> 00:11:58,740
is and eventually to is that your data

273
00:11:58,740 --> 00:12:00,210
will flow from the producer to the

274
00:12:00,210 --> 00:12:02,910
consumer and that's the beauty to of

275
00:12:02,910 --> 00:12:05,280
doing reactive streams because then it

276
00:12:05,280 --> 00:12:07,890
will mean that as long as the the

277
00:12:07,890 --> 00:12:10,650
reactive streams implementation conforms

278
00:12:10,650 --> 00:12:13,170
to the reactive stream specification you

279
00:12:13,170 --> 00:12:15,090
can essentially mix and match different

280
00:12:15,090 --> 00:12:17,100
types of library that are handling

281
00:12:17,100 --> 00:12:19,350
streams because each of these streams

282
00:12:19,350 --> 00:12:21,720
they are independently operated even

283
00:12:21,720 --> 00:12:23,790
within it your producer and consumer for

284
00:12:23,790 --> 00:12:25,680
example so you can basically chain

285
00:12:25,680 --> 00:12:27,990
together many kind of streams that are

286
00:12:27,990 --> 00:12:33,950
from different you know constructs to so

287
00:12:33,950 --> 00:12:37,320
and here too one thing to note is that

288
00:12:37,320 --> 00:12:40,500
for stream processing we have what we

289
00:12:40,500 --> 00:12:43,140
call like pushed stream and also like

290
00:12:43,140 --> 00:12:45,360
actually I should say a push model

291
00:12:45,360 --> 00:12:47,970
versus a pull model so push is

292
00:12:47,970 --> 00:12:49,920
essentially upstream will pushes the

293
00:12:49,920 --> 00:12:52,920
data to the downstream but the pool is

294
00:12:52,920 --> 00:12:54,810
really downstream will pull the data

295
00:12:54,810 --> 00:12:56,760
from the upstream and by this the

296
00:12:56,760 --> 00:12:59,160
upstream upstream is referring to the

297
00:12:59,160 --> 00:13:00,720
producer and the downstream is the

298
00:13:00,720 --> 00:13:04,850
consumer that's what I would look at so

299
00:13:04,850 --> 00:13:08,420
and let's take a look so from push from

300
00:13:08,420 --> 00:13:12,150
upstream we have a producer that emits

301
00:13:12,150 --> 00:13:15,960
data and from there it then sends

302
00:13:15,960 --> 00:13:18,510
without being asked explicitly to do

303
00:13:18,510 --> 00:13:20,730
whatever consumer that has subscribed to

304
00:13:20,730 --> 00:13:22,290
the data it will get sent

305
00:13:22,290 --> 00:13:26,130
there so that's push wears for pool its

306
00:13:26,130 --> 00:13:28,350
downstream is initiates and then pose

307
00:13:28,350 --> 00:13:31,320
from the upstream so over here here is a

308
00:13:31,320 --> 00:13:33,630
consumer it needs something so it meets

309
00:13:33,630 --> 00:13:36,060
data in it be initiate essentially it's

310
00:13:36,060 --> 00:13:38,730
doing a pull in Co for MS mean for

311
00:13:38,730 --> 00:13:40,620
subscribe so you do a subscribe

312
00:13:40,620 --> 00:13:43,709
it's basically initiate so it then like

313
00:13:43,709 --> 00:13:45,660
post data so when the producer knows

314
00:13:45,660 --> 00:13:47,550
that somebody is needing it then

315
00:13:47,550 --> 00:13:49,680
basically then they were amidst data and

316
00:13:49,680 --> 00:13:52,440
and that would then travel downstream to

317
00:13:52,440 --> 00:13:55,949
the consumer okay

318
00:13:55,949 --> 00:14:00,240
okay so next and apologize to us a

319
00:14:00,240 --> 00:14:03,120
little bit maybe incoherent today but

320
00:14:03,120 --> 00:14:05,209
it's my first time doing an online

321
00:14:05,209 --> 00:14:08,519
presentation like this so anyway so I'm

322
00:14:08,519 --> 00:14:10,589
now booting into the next part which is

323
00:14:10,589 --> 00:14:13,050
I'll talk a bit then about reactive

324
00:14:13,050 --> 00:14:16,199
screams a little more specification so

325
00:14:16,199 --> 00:14:18,569
it comes out from Java 9 it's

326
00:14:18,569 --> 00:14:21,240
essentially the flow as part of JDK the

327
00:14:21,240 --> 00:14:26,209
flow API and so it this is essentially

328
00:14:26,209 --> 00:14:29,339
you know the or that reactive streams is

329
00:14:29,339 --> 00:14:32,370
is the package name and reactive streams

330
00:14:32,370 --> 00:14:34,680
it's only an specification and it

331
00:14:34,680 --> 00:14:37,980
doesn't have any implementation to it so

332
00:14:37,980 --> 00:14:41,100
essentially it in ordinary your

333
00:14:41,100 --> 00:14:43,230
application level you probably do not

334
00:14:43,230 --> 00:14:45,300
want to deal with these reactive streams

335
00:14:45,300 --> 00:14:47,610
directly now as such they're only

336
00:14:47,610 --> 00:14:52,649
actually for interfaces in this

337
00:14:52,649 --> 00:14:54,690
specification so it sounds simple but

338
00:14:54,690 --> 00:14:56,310
that's such if you can if you don't

339
00:14:56,310 --> 00:14:58,440
descend screams it's actually the for

340
00:14:58,440 --> 00:15:01,170
interfaces can become quite a challenge

341
00:15:01,170 --> 00:15:06,600
too so as such then there the suggestion

342
00:15:06,600 --> 00:15:08,040
is that you don't want to implement your

343
00:15:08,040 --> 00:15:10,500
react extreme and then you'll be wanting

344
00:15:10,500 --> 00:15:14,010
to use like service provider to do it so

345
00:15:14,010 --> 00:15:15,660
it essentially is it's meant to be for

346
00:15:15,660 --> 00:15:18,810
FBI service provider interface but it

347
00:15:18,810 --> 00:15:20,790
does come with the TC case so the

348
00:15:20,790 --> 00:15:24,060
competitive test compatibility tips so

349
00:15:24,060 --> 00:15:26,100
to kind of verify that it conforms to

350
00:15:26,100 --> 00:15:28,439
the standard and the good thing about

351
00:15:28,439 --> 00:15:30,149
this reactive streams is that it

352
00:15:30,149 --> 00:15:33,060
encourages interoperability so as you

353
00:15:33,060 --> 00:15:34,800
can see you have different streams that

354
00:15:34,800 --> 00:15:36,600
they kind of flow and

355
00:15:36,600 --> 00:15:37,980
you can have different constructs you

356
00:15:37,980 --> 00:15:39,680
know you can have a spring reactor

357
00:15:39,680 --> 00:15:42,660
portion of your of your system Explo

358
00:15:42,660 --> 00:15:45,060
that often you go into like vertex and

359
00:15:45,060 --> 00:15:48,000
you actually can hook all them up in

360
00:15:48,000 --> 00:15:50,149
that way your application in that way so

361
00:15:50,149 --> 00:15:52,579
over here you can take a look - they're

362
00:15:52,579 --> 00:15:54,839
essentially these are the major players

363
00:15:54,839 --> 00:15:57,690
right now these are all by the way all

364
00:15:57,690 --> 00:16:00,360
open source projects - so you have I

365
00:16:00,360 --> 00:16:02,610
purposefully grouped together spring

366
00:16:02,610 --> 00:16:05,339
reactor and the RX essentially are it's

367
00:16:05,339 --> 00:16:07,380
Java the very active extension which

368
00:16:07,380 --> 00:16:09,810
actually originated from Microsoft and

369
00:16:09,810 --> 00:16:13,649
then Netflix ported it to rx Java I put

370
00:16:13,649 --> 00:16:14,970
them together is because it's

371
00:16:14,970 --> 00:16:16,740
essentially the same engineering team

372
00:16:16,740 --> 00:16:19,290
that worked on implementing the reactive

373
00:16:19,290 --> 00:16:21,839
strips and then the next one would be

374
00:16:21,839 --> 00:16:24,420
perfect and that's a good foundation

375
00:16:24,420 --> 00:16:27,660
project and then after streams - and

376
00:16:27,660 --> 00:16:29,490
comes from like them and what used to be

377
00:16:29,490 --> 00:16:33,470
called type C or type type safe yeah and

378
00:16:33,470 --> 00:16:37,470
then we also to have Michael profile -

379
00:16:37,470 --> 00:16:39,209
now Michael profile is also in the

380
00:16:39,209 --> 00:16:42,540
Eclipse projects - and and that also

381
00:16:42,540 --> 00:16:45,509
they started supporting the reactive

382
00:16:45,509 --> 00:16:47,310
streams at one point one specification

383
00:16:47,310 --> 00:16:51,959
since last July and then another one

384
00:16:51,959 --> 00:16:53,759
which is quite interesting is the

385
00:16:53,759 --> 00:16:56,430
reactive socket which actually now it's

386
00:16:56,430 --> 00:16:58,980
part of the reactive power it's actually

387
00:16:58,980 --> 00:17:00,899
I should say from the reactive

388
00:17:00,899 --> 00:17:04,380
foundation that that's where it's

389
00:17:04,380 --> 00:17:05,970
basically being focused on the our

390
00:17:05,970 --> 00:17:08,909
socket is on there and there and I'll

391
00:17:08,909 --> 00:17:10,470
talk a little in my next set of slides

392
00:17:10,470 --> 00:17:15,030
so so again let me go back a little bit

393
00:17:15,030 --> 00:17:17,669
so this is the what I mentioned earlier

394
00:17:17,669 --> 00:17:20,789
about the reactive streams API so

395
00:17:20,789 --> 00:17:22,199
essentially there are only four

396
00:17:22,199 --> 00:17:24,179
interfaces you see that there is

397
00:17:24,179 --> 00:17:26,609
publisher so the publisher is

398
00:17:26,609 --> 00:17:29,760
essentially do is subscribe subscribe

399
00:17:29,760 --> 00:17:33,150
call and then then we have subscriber

400
00:17:33,150 --> 00:17:35,159
interface and that essentially has the

401
00:17:35,159 --> 00:17:37,830
unsubscribe and on next on Erin

402
00:17:37,830 --> 00:17:41,370
uncomplete so these two - like you can't

403
00:17:41,370 --> 00:17:43,500
just have publisher and subscriber in a

404
00:17:43,500 --> 00:17:45,690
reactive streams type of stream

405
00:17:45,690 --> 00:17:49,580
operation because okay

406
00:17:49,580 --> 00:17:52,490
and because the thing is that we will

407
00:17:52,490 --> 00:17:54,170
also need the processor because that's

408
00:17:54,170 --> 00:17:56,660
responsible for processing between the

409
00:17:56,660 --> 00:17:58,850
publisher and subscriber and essentially

410
00:17:58,850 --> 00:18:00,890
there's also a subscription essentially

411
00:18:00,890 --> 00:18:02,960
it's keeping track of the subscription

412
00:18:02,960 --> 00:18:05,510
that that the subscriber is having right

413
00:18:05,510 --> 00:18:10,910
now okay so then let me kind of go a

414
00:18:10,910 --> 00:18:12,830
little bit into each one of them quickly

415
00:18:12,830 --> 00:18:15,950
so spring reactor came out from a

416
00:18:15,950 --> 00:18:18,970
pivotal but now it's actually VMware and

417
00:18:18,970 --> 00:18:22,820
so it has a reactor core and it and they

418
00:18:22,820 --> 00:18:25,580
also handle they also actually it's

419
00:18:25,580 --> 00:18:27,320
called their libraries called web hooks

420
00:18:27,320 --> 00:18:30,320
and what what what web flux is really

421
00:18:30,320 --> 00:18:32,930
what it is is essentially is what is

422
00:18:32,930 --> 00:18:35,300
their way of handling multistream is

423
00:18:35,300 --> 00:18:38,960
flux so from 0 to n items that those

424
00:18:38,960 --> 00:18:41,540
streams are handled by what and then if

425
00:18:41,540 --> 00:18:44,270
isn't zero to one that's called mono and

426
00:18:44,270 --> 00:18:47,690
that's how they're being like designers

427
00:18:47,690 --> 00:18:51,380
and if you have gone to a Josh long talk

428
00:18:51,380 --> 00:18:54,410
the talk earlier he has actually example

429
00:18:54,410 --> 00:18:58,790
of how spring reactors now has a tight

430
00:18:58,790 --> 00:19:01,460
integration to or I shouldn't say like

431
00:19:01,460 --> 00:19:03,380
tight but they actually into place very

432
00:19:03,380 --> 00:19:06,440
well with the are socket right now so

433
00:19:06,440 --> 00:19:08,050
that's there's something new in there

434
00:19:08,050 --> 00:19:11,690
and now then I also bring in reactive

435
00:19:11,690 --> 00:19:16,160
extensions are extrapolates an API for

436
00:19:16,160 --> 00:19:18,530
asynchronous programming with observable

437
00:19:18,530 --> 00:19:20,560
streams and this is the link to it

438
00:19:20,560 --> 00:19:23,750
essentially to reactive extensions

439
00:19:23,750 --> 00:19:27,230
it's basically version one our

440
00:19:27,230 --> 00:19:29,240
extravagant has what it's called

441
00:19:29,240 --> 00:19:30,920
observable and that one doesn't have

442
00:19:30,920 --> 00:19:33,620
back pressure support and then our java

443
00:19:33,620 --> 00:19:36,770
2 is actually now called flowable and

444
00:19:36,770 --> 00:19:39,770
that actually has back pressure support

445
00:19:39,770 --> 00:19:41,570
and by the way all of this through

446
00:19:41,570 --> 00:19:43,400
spring reactor also has back pressure

447
00:19:43,400 --> 00:19:49,580
support as well so not sure how how it

448
00:19:49,580 --> 00:19:55,900
gets me to do okay

449
00:19:55,900 --> 00:19:59,500
now I also been another popular

450
00:19:59,500 --> 00:20:03,100
framework it's becoming actually quite

451
00:20:03,100 --> 00:20:06,250
popular because of this quite easy and

452
00:20:06,250 --> 00:20:08,080
straightforward direct news is called

453
00:20:08,080 --> 00:20:11,020
vertex and it's a reactive framework it

454
00:20:11,020 --> 00:20:12,910
makes use of their verticals model which

455
00:20:12,910 --> 00:20:16,780
is similar to the akka actor model it

456
00:20:16,780 --> 00:20:19,660
has essentially it has an event bus the

457
00:20:19,660 --> 00:20:22,900
vertex event box bus it has its vertex

458
00:20:22,900 --> 00:20:25,990
run time so the event bus essentially is

459
00:20:25,990 --> 00:20:28,300
the one that kind of handles all the

460
00:20:28,300 --> 00:20:30,910
requests that come that comes in and and

461
00:20:30,910 --> 00:20:34,240
that's how it it is actually the core

462
00:20:34,240 --> 00:20:37,920
mechanism of enabling the reactive

463
00:20:37,920 --> 00:20:43,270
mechanism in there and also through a

464
00:20:43,270 --> 00:20:46,510
note to point out is that vertex it's

465
00:20:46,510 --> 00:20:48,910
also those framework that's being used

466
00:20:48,910 --> 00:20:51,760
by Korkis which is a Red Hat a new new

467
00:20:51,760 --> 00:20:53,860
library that comes out of it has about a

468
00:20:53,860 --> 00:20:56,290
year ago so that's actually the reactive

469
00:20:56,290 --> 00:20:58,720
engine behind corporates as well so it's

470
00:20:58,720 --> 00:21:01,870
like to point that out and another

471
00:21:01,870 --> 00:21:04,710
implementation that's popular which is

472
00:21:04,710 --> 00:21:07,030
actually Arthur screams and Cumberland

473
00:21:07,030 --> 00:21:10,000
like bent and over here to I just have

474
00:21:10,000 --> 00:21:12,100
some highlights of it it's basically

475
00:21:12,100 --> 00:21:15,640
akka streams is quite kind of a

476
00:21:15,640 --> 00:21:17,650
rebellious nature because it says while

477
00:21:17,650 --> 00:21:19,510
I wanted the couple from the reactive

478
00:21:19,510 --> 00:21:22,180
streams interface so how it passes

479
00:21:22,180 --> 00:21:23,970
stream data you know between the

480
00:21:23,970 --> 00:21:27,340
individual operators it's actually quite

481
00:21:27,340 --> 00:21:30,130
interesting so something that can keep a

482
00:21:30,130 --> 00:21:33,220
note off and basically the API are also

483
00:21:33,220 --> 00:21:35,260
is quite minimal and consistent - and

484
00:21:35,260 --> 00:21:37,690
they basically advertise themselves like

485
00:21:37,690 --> 00:21:40,570
being explicitness open magic so what

486
00:21:40,570 --> 00:21:42,490
you see is essentially what you get and

487
00:21:42,490 --> 00:21:45,930
it's actually makes heavy use up come

488
00:21:45,930 --> 00:21:49,270
composition and also it provides tooling

489
00:21:49,270 --> 00:21:51,760
to handle all of the back pressure quite

490
00:21:51,760 --> 00:21:54,090
well too

491
00:21:54,090 --> 00:21:56,860
then now we also look into like

492
00:21:56,860 --> 00:21:58,929
microphone file again micro profile is

493
00:21:58,929 --> 00:22:00,760
interesting because it's focused it's

494
00:22:00,760 --> 00:22:04,360
more about on micro services and that's

495
00:22:04,360 --> 00:22:08,049
actually it's a very intensive strength

496
00:22:08,049 --> 00:22:10,840
to and also to a note 2.0 is that

497
00:22:10,840 --> 00:22:13,240
reactive streams are actually quite

498
00:22:13,240 --> 00:22:16,420
perfect to be used utilized in a micro

499
00:22:16,420 --> 00:22:19,840
services architecture because of how how

500
00:22:19,840 --> 00:22:22,780
similar in in concepts it is between

501
00:22:22,780 --> 00:22:24,370
reactive streams and micro services

502
00:22:24,370 --> 00:22:27,970
being components being isolated in time

503
00:22:27,970 --> 00:22:28,480
and space

504
00:22:28,480 --> 00:22:31,780
kind of concept so look into here is

505
00:22:31,780 --> 00:22:34,140
that their support support like

506
00:22:34,140 --> 00:22:36,790
decoupling a temporal decoupling and

507
00:22:36,790 --> 00:22:40,600
location transparency okay so now

508
00:22:40,600 --> 00:22:43,840
there's also a our socket which I kind

509
00:22:43,840 --> 00:22:45,220
of mentioned earlier as a reactive

510
00:22:45,220 --> 00:22:47,290
socket is a binary protocol for use on

511
00:22:47,290 --> 00:22:49,299
byte stream transports and there are

512
00:22:49,299 --> 00:22:51,400
four models and the thing I would like

513
00:22:51,400 --> 00:22:53,590
to point out is that you can have our

514
00:22:53,590 --> 00:22:55,720
socket that has carrier requests in a

515
00:22:55,720 --> 00:22:58,090
response you can have fire-and-forget

516
00:22:58,090 --> 00:23:01,299
and then request an extreme and also

517
00:23:01,299 --> 00:23:02,650
what is interesting is it's a

518
00:23:02,650 --> 00:23:04,780
bi-directional so you basically can keep

519
00:23:04,780 --> 00:23:07,240
the socket open to it and data can

520
00:23:07,240 --> 00:23:09,730
travel like in bi-directional so that's

521
00:23:09,730 --> 00:23:12,460
a kind of a strong point about them and

522
00:23:12,460 --> 00:23:14,799
the one thing I like to point out this

523
00:23:14,799 --> 00:23:16,510
one I borrow from the spring run

524
00:23:16,510 --> 00:23:21,130
platform like slide is about reactive

525
00:23:21,130 --> 00:23:23,350
foundation and the our socket which I

526
00:23:23,350 --> 00:23:25,240
mentioned earlier so these are the

527
00:23:25,240 --> 00:23:27,010
companies reactive foundation that are

528
00:23:27,010 --> 00:23:29,650
supported by net to fire Facebook like

529
00:23:29,650 --> 00:23:32,260
been Alibaba pivotal which is the M

530
00:23:32,260 --> 00:23:35,020
where now and people go so essentially a

531
00:23:35,020 --> 00:23:37,059
quick note is that our socket is a layer

532
00:23:37,059 --> 00:23:39,250
five and six communication protocol

533
00:23:39,250 --> 00:23:41,140
that's based on reactive streams and

534
00:23:41,140 --> 00:23:43,990
it's promising to be very very fast and

535
00:23:43,990 --> 00:23:46,799
also the back pressure flow control is

536
00:23:46,799 --> 00:23:49,570
it's actually quite sophisticated as

537
00:23:49,570 --> 00:23:52,299
well so yeah please take a look into it

538
00:23:52,299 --> 00:23:57,820
when you get a chance and some

539
00:23:57,820 --> 00:24:01,150
additional info to about a particular

540
00:24:01,150 --> 00:24:03,070
specification which isn't part of the

541
00:24:03,070 --> 00:24:05,890
reactive streams is the OSGi library

542
00:24:05,890 --> 00:24:07,590
that has a push

543
00:24:07,590 --> 00:24:11,080
specifications are seven but this one is

544
00:24:11,080 --> 00:24:13,330
actually is a purely is a push stream

545
00:24:13,330 --> 00:24:15,010
that also like makes you thought their

546
00:24:15,010 --> 00:24:18,310
OSGi the promises as well and there's no

547
00:24:18,310 --> 00:24:20,320
dependency on the rest of the OSGi

548
00:24:20,320 --> 00:24:22,840
specification and framework I guess

549
00:24:22,840 --> 00:24:26,080
except for the OSGi promise so so yeah

550
00:24:26,080 --> 00:24:27,430
if you're interested so you can also

551
00:24:27,430 --> 00:24:29,680
check them out they are pure a very pure

552
00:24:29,680 --> 00:24:32,020
push stream push kind of stream

553
00:24:32,020 --> 00:24:35,590
processing model and also let me then

554
00:24:35,590 --> 00:24:37,210
point out too quickly is that the

555
00:24:37,210 --> 00:24:40,600
reactive streams comparing to if you

556
00:24:40,600 --> 00:24:42,100
look into reactive streams the for

557
00:24:42,100 --> 00:24:43,930
interfaces how it maps to the push

558
00:24:43,930 --> 00:24:46,510
stream to you know publisher maps to

559
00:24:46,510 --> 00:24:48,670
push event source subscriber to push

560
00:24:48,670 --> 00:24:51,310
event consumer and the subscription to

561
00:24:51,310 --> 00:24:53,320
all to close the bow and processor to

562
00:24:53,320 --> 00:24:57,790
push stream so okay so let me see I

563
00:24:57,790 --> 00:25:00,160
think I not sure that enough time I

564
00:25:00,160 --> 00:25:02,590
wanted to just quickly show a use case

565
00:25:02,590 --> 00:25:05,980
of using a CSV file watcher it's

566
00:25:05,980 --> 00:25:09,400
basically I you know three minutes Oh

567
00:25:09,400 --> 00:25:11,740
two minutes okay I guess then I may not

568
00:25:11,740 --> 00:25:14,140
have enough time to be kind of

569
00:25:14,140 --> 00:25:16,530
indicating but I'll I may just quickly

570
00:25:16,530 --> 00:25:20,620
let me see if I can switch but I do need

571
00:25:20,620 --> 00:25:27,550
to stop by share and then I have to okay

572
00:25:27,550 --> 00:25:39,580
oh okay okay sorry

573
00:25:39,580 --> 00:25:43,179
took a minute so this actually is I was

574
00:25:43,179 --> 00:25:44,619
going to quickly show up very very

575
00:25:44,619 --> 00:25:47,980
quickly he showed this sample that I

576
00:25:47,980 --> 00:25:50,320
have and basically making use of ARCA

577
00:25:50,320 --> 00:25:53,590
streams so but the quick thing 2.0 is

578
00:25:53,590 --> 00:25:56,649
that essentially over here it's like

579
00:25:56,649 --> 00:25:59,169
it's a sample case in which is it

580
00:25:59,169 --> 00:26:01,860
watches for file changes inside a

581
00:26:01,860 --> 00:26:04,330
directory so in my case I actually

582
00:26:04,330 --> 00:26:08,830
quickly look at this this is my you know

583
00:26:08,830 --> 00:26:11,739
a configuration in here so I basically

584
00:26:11,739 --> 00:26:14,580
files in the slash temp data directory

585
00:26:14,580 --> 00:26:17,799
so if you go back over here I just

586
00:26:17,799 --> 00:26:19,869
wanted to quickly point out if I have

587
00:26:19,869 --> 00:26:23,379
time and it's basically the flow so you

588
00:26:23,379 --> 00:26:26,919
can take a look into the flow that's how

589
00:26:26,919 --> 00:26:28,929
we start like the flow is basically it

590
00:26:28,929 --> 00:26:30,759
takes and it takes a flat map any

591
00:26:30,759 --> 00:26:33,220
context you know from from a path from

592
00:26:33,220 --> 00:26:34,539
your directory

593
00:26:34,539 --> 00:26:37,720
and I think another thing I wanted to

594
00:26:37,720 --> 00:26:43,869
point out is a ok sorry let me take a

595
00:26:43,869 --> 00:26:52,210
look ok and the source in here so this

596
00:26:52,210 --> 00:26:54,789
this is the source file that basically

597
00:26:54,789 --> 00:26:56,619
if there are in any new files that are

598
00:26:56,619 --> 00:26:59,889
off this path there live is basically it

599
00:26:59,889 --> 00:27:03,590
will read from it this case and

600
00:27:03,590 --> 00:27:05,519
[Music]

601
00:27:05,519 --> 00:27:10,720
basically sorry ok hello IO here so this

602
00:27:10,720 --> 00:27:12,789
is the thing this this is our this kind

603
00:27:12,789 --> 00:27:14,649
of up interest is that if there are new

604
00:27:14,649 --> 00:27:16,570
files and basically this directory

605
00:27:16,570 --> 00:27:20,309
changed source changes source is already

606
00:27:20,309 --> 00:27:25,359
basically implements the Java niño the

607
00:27:25,359 --> 00:27:27,489
non-blocking i/o watch service so

608
00:27:27,489 --> 00:27:31,090
basically this is where it is watching

609
00:27:31,090 --> 00:27:34,029
for what is going on in in your

610
00:27:34,029 --> 00:27:35,919
directory so let me get then quickly

611
00:27:35,919 --> 00:27:39,609
show it to you run it if I have one more

612
00:27:39,609 --> 00:27:40,539
minute

613
00:27:40,539 --> 00:27:45,159
oh and then I do need to bring my well

614
00:27:45,159 --> 00:27:46,419
you don't have another minute we're at

615
00:27:46,419 --> 00:27:48,100
the end but we're also going into it

616
00:27:48,100 --> 00:27:49,929
we're going into a break so I'll give it

617
00:27:49,929 --> 00:27:52,000
a minute

618
00:27:52,000 --> 00:27:55,150
thank you Matt yes sorry yes okay but I

619
00:27:55,150 --> 00:27:58,030
do and I apologize right now because my

620
00:27:58,030 --> 00:28:01,570
I meet I do need to search for my Oh

621
00:28:01,570 --> 00:28:04,600
actually I don't need to but let me uh I

622
00:28:04,600 --> 00:28:07,750
just have to bring my browser back into

623
00:28:07,750 --> 00:28:12,550
here okay that's that sorry okay so I

624
00:28:12,550 --> 00:28:17,129
just wanted so we see that it is running

625
00:28:20,370 --> 00:28:25,480
8080 so you can see that over here right

626
00:28:25,480 --> 00:28:27,760
so this is running so what I'll do is

627
00:28:27,760 --> 00:28:30,100
that I'll drop a file which I already

628
00:28:30,100 --> 00:28:32,560
have we just see your ID we don't see

629
00:28:32,560 --> 00:28:34,540
another screen oh you don't

630
00:28:34,540 --> 00:28:38,560
oh you see my ID wait so you do you see

631
00:28:38,560 --> 00:28:44,500
my hope oh I'm sorry I think I wasn't

632
00:28:44,500 --> 00:28:51,580
sharing it after share my screen I

633
00:28:51,580 --> 00:29:07,720
believe I'm sorry why is it not yep I'm

634
00:29:07,720 --> 00:29:10,650
not sure how I can get my own ice cream

635
00:29:10,650 --> 00:29:14,260
okay actually this is what can you see

636
00:29:14,260 --> 00:29:16,240
now yeah okay

637
00:29:16,240 --> 00:29:20,340
so basically - I'll just drop a file

638
00:29:20,340 --> 00:29:23,110
I'll just drop a file into there so

639
00:29:23,110 --> 00:29:26,920
basically this this is my program why is

640
00:29:26,920 --> 00:29:30,150
it not okay

641
00:29:34,550 --> 00:29:36,950
what I did was I just just now like drop

642
00:29:36,950 --> 00:29:40,340
a file into the /m slash data directory

643
00:29:40,340 --> 00:29:42,740
so once it's received and it's basically

644
00:29:42,740 --> 00:29:45,110
comes back and immediately it will it

645
00:29:45,110 --> 00:29:47,390
will read it and also then in tells you

646
00:29:47,390 --> 00:29:50,120
to like the data that's contained inside

647
00:29:50,120 --> 00:29:54,590
it so yeah so essentially that's just a

648
00:29:54,590 --> 00:29:58,060
simple example to illustrate that so

649
00:29:58,060 --> 00:30:01,010
okay cool oh yeah all right so I think

650
00:30:01,010 --> 00:30:03,500
I'm over time already so what do you

651
00:30:03,500 --> 00:30:05,210
have any final slides you want to show

652
00:30:05,210 --> 00:30:06,830
because I can ask you one of the

653
00:30:06,830 --> 00:30:09,230
questions that was posed in nice well

654
00:30:09,230 --> 00:30:12,830
sure yeah let me I do have to go back to

655
00:30:12,830 --> 00:30:15,350
my screen you're right and I apologize

656
00:30:15,350 --> 00:30:19,640
okay that's right that's the beauty of

657
00:30:19,640 --> 00:30:21,770
you know present yeah before a break

658
00:30:21,770 --> 00:30:26,030
yeah okay yes actually it's perfect it's

659
00:30:26,030 --> 00:30:29,090
my last slide so this is this how you

660
00:30:29,090 --> 00:30:33,500
can contact me and IBM cloud then all

661
00:30:33,500 --> 00:30:37,520
these resources connect you know link to

662
00:30:37,520 --> 00:30:39,310
where you can find some resources

663
00:30:39,310 --> 00:30:42,470
general and this one it's actually a

664
00:30:42,470 --> 00:30:45,710
reactive streams resources to all the

665
00:30:45,710 --> 00:30:49,550
links are in here too so and I can make

666
00:30:49,550 --> 00:30:52,550
this available to Jake and then yep and

667
00:30:52,550 --> 00:30:54,680
then sorry just one more thing is I will

668
00:30:54,680 --> 00:30:56,480
be running a reactive Java podcast

669
00:30:56,480 --> 00:30:58,760
meaning series and coming to summer I'm

670
00:30:58,760 --> 00:31:00,590
already doing some recording so please

671
00:31:00,590 --> 00:31:03,770
follow me Twitter handle and then

672
00:31:03,770 --> 00:31:06,080
another thing is a please this is call

673
00:31:06,080 --> 00:31:08,900
for koto RG and this is in you know in

674
00:31:08,900 --> 00:31:11,960
the spirit of fighting to cope it 19 IBM

675
00:31:11,960 --> 00:31:14,210
has this call for code challenge so

676
00:31:14,210 --> 00:31:16,640
folks can sign in and join the heck up

677
00:31:16,640 --> 00:31:19,550
up for that so call for Co Dorothy and

678
00:31:19,550 --> 00:31:21,800
that's all thank you

679
00:31:21,800 --> 00:31:24,380
so the one question I have for you thank

680
00:31:24,380 --> 00:31:26,840
you very much so it's excellent what is

681
00:31:26,840 --> 00:31:29,320
the common use case for reactive streams

682
00:31:29,320 --> 00:31:31,580
sounds like maybe it fits wear something

683
00:31:31,580 --> 00:31:33,860
like ActiveMQ fill the gap before for

684
00:31:33,860 --> 00:31:38,240
guaranteed messaging that part is true

685
00:31:38,240 --> 00:31:43,010
it that that will be that message to you

686
00:31:43,010 --> 00:31:47,090
is definitely that that one but I always

687
00:31:47,090 --> 00:31:48,290
like to tell folks

688
00:31:48,290 --> 00:31:50,660
that what would be really neat is doing

689
00:31:50,660 --> 00:31:53,960
IOT if if you imagine like a big project

690
00:31:53,960 --> 00:31:55,730
you're collecting some data that

691
00:31:55,730 --> 00:31:58,520
streaming in from many locations let's

692
00:31:58,520 --> 00:32:00,020
say if you run a farm you have many

693
00:32:00,020 --> 00:32:02,570
locations and you need to collect some

694
00:32:02,570 --> 00:32:04,670
data from your farm you have 2,000 acre

695
00:32:04,670 --> 00:32:07,550
you install these devices they all data

696
00:32:07,550 --> 00:32:10,130
maybe get collected maybe like you know

697
00:32:10,130 --> 00:32:12,770
rainfall or something and water whatever

698
00:32:12,770 --> 00:32:14,900
and you can actually reactive streams

699
00:32:14,900 --> 00:32:17,810
would be like a very perfect use case

700
00:32:17,810 --> 00:32:19,970
for that because then it handles data

701
00:32:19,970 --> 00:32:22,070
coming in in streaming fashion they all

702
00:32:22,070 --> 00:32:23,570
come in at the same time or different

703
00:32:23,570 --> 00:32:26,210
times and asynchronous and it's very

704
00:32:26,210 --> 00:32:28,340
than tripping so there will be a really

705
00:32:28,340 --> 00:32:31,010
good case cool yeah

706
00:32:31,010 --> 00:32:33,200
well thank you so much for speaking

707
00:32:33,200 --> 00:32:35,750
tonight and I hope you have an excellent

708
00:32:35,750 --> 00:32:39,020
evening I thank you so much Matt and

709
00:32:39,020 --> 00:32:40,790
thank you everybody for watching five

710
00:32:40,790 --> 00:32:44,590
okay Mary bye-bye

