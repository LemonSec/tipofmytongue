1
00:00:00,080 --> 00:00:01,920
rams but uh the next session let's talk

2
00:00:01,920 --> 00:00:04,080
about istio and talk about istio for for

3
00:00:04,080 --> 00:00:04,400
uh

4
00:00:04,400 --> 00:00:06,560
i'm not even sure the the the conference

5
00:00:06,560 --> 00:00:07,440
yet so

6
00:00:07,440 --> 00:00:10,160
the next session is uh from ram vernam

7
00:00:10,160 --> 00:00:11,519
uh istio is faster

8
00:00:11,519 --> 00:00:13,920
smaller and easier than ever before so

9
00:00:13,920 --> 00:00:15,440
let me uh let me go ahead

10
00:00:15,440 --> 00:00:18,400
and pull uh there we go paul rahman hey

11
00:00:18,400 --> 00:00:19,840
ram how's it going

12
00:00:19,840 --> 00:00:21,760
hey simon how's it going pretty good

13
00:00:21,760 --> 00:00:24,080
we've been going going well so far yeah

14
00:00:24,080 --> 00:00:25,439
going well so fast let me give a quick

15
00:00:25,439 --> 00:00:26,480
introduction to ram

16
00:00:26,480 --> 00:00:29,439
ram is an ibm uh a technical product

17
00:00:29,439 --> 00:00:30,880
manager and developer

18
00:00:30,880 --> 00:00:33,280
for ibm we're current focus on the ibm

19
00:00:33,280 --> 00:00:35,040
cloud kubernetes service

20
00:00:35,040 --> 00:00:36,399
and uh and so ram you've been doing a

21
00:00:36,399 --> 00:00:38,559
lot of work on istio that's right

22
00:00:38,559 --> 00:00:40,800
yeah i've been um on the istio project

23
00:00:40,800 --> 00:00:42,399
for like a year and a half now

24
00:00:42,399 --> 00:00:44,079
so i'm on the istio steering committee

25
00:00:44,079 --> 00:00:45,520
as well and i kind of lead some of the

26
00:00:45,520 --> 00:00:47,200
developmental efforts from

27
00:00:47,200 --> 00:00:50,000
from ibm's side awesome so i won't take

28
00:00:50,000 --> 00:00:51,199
up any more of your time because i know

29
00:00:51,199 --> 00:00:52,239
we're a couple of minutes late already

30
00:00:52,239 --> 00:00:52,800
so uh

31
00:00:52,800 --> 00:00:55,120
we can go touch over uh but i'll i'll

32
00:00:55,120 --> 00:00:57,120
hand over to you

33
00:00:57,120 --> 00:00:59,920
great um so i should be sharing my

34
00:00:59,920 --> 00:01:01,199
screen let me know when

35
00:01:01,199 --> 00:01:04,159
you see my press slide it should be out

36
00:01:04,159 --> 00:01:06,400
now

37
00:01:07,760 --> 00:01:10,880
you see it yep it's awesome

38
00:01:10,880 --> 00:01:13,119
cool so uh so in today's session i want

39
00:01:13,119 --> 00:01:15,520
to kind of give a quick overview of

40
00:01:15,520 --> 00:01:17,520
what istio is in case there's you know

41
00:01:17,520 --> 00:01:18,880
likely people on the call that don't

42
00:01:18,880 --> 00:01:19,600
know

43
00:01:19,600 --> 00:01:21,360
exactly what a service mesh is or how it

44
00:01:21,360 --> 00:01:22,799
kind of operates but

45
00:01:22,799 --> 00:01:24,640
and then really focus on what are the

46
00:01:24,640 --> 00:01:27,280
major improvements that went into istio

47
00:01:27,280 --> 00:01:30,079
over the last um you know like six

48
00:01:30,079 --> 00:01:32,079
months to a year or so

49
00:01:32,079 --> 00:01:33,600
because the community really focused on

50
00:01:33,600 --> 00:01:35,520
making it faster smaller and easier so i

51
00:01:35,520 --> 00:01:36,880
want to highlight some of the

52
00:01:36,880 --> 00:01:40,320
work that the community has done um so

53
00:01:40,320 --> 00:01:42,640
why istio or backing up little why do

54
00:01:42,640 --> 00:01:44,079
you need a service mesh right

55
00:01:44,079 --> 00:01:46,079
so now a lot of companies have adopted

56
00:01:46,079 --> 00:01:48,320
microservices architecture

57
00:01:48,320 --> 00:01:50,399
it's great kubernetes is great from a

58
00:01:50,399 --> 00:01:52,320
container orchestration perspective you

59
00:01:52,320 --> 00:01:54,000
know being able to stand up a container

60
00:01:54,000 --> 00:01:56,079
tying those pieces together but then

61
00:01:56,079 --> 00:01:57,759
they're starting to look up

62
00:01:57,759 --> 00:01:59,439
and look at the world from a micro

63
00:01:59,439 --> 00:02:00,880
service point of view instead of a

64
00:02:00,880 --> 00:02:02,240
container point of view

65
00:02:02,240 --> 00:02:03,680
and seeing that there's some additional

66
00:02:03,680 --> 00:02:05,439
challenges that they need to tackle

67
00:02:05,439 --> 00:02:07,200
things like security so they want like

68
00:02:07,200 --> 00:02:08,639
mutual tls

69
00:02:08,639 --> 00:02:11,200
within their cluster from one container

70
00:02:11,200 --> 00:02:13,760
or one pod talking to another pod

71
00:02:13,760 --> 00:02:15,280
they want to be able to do canary

72
00:02:15,280 --> 00:02:17,200
deployments and a b testing

73
00:02:17,200 --> 00:02:20,000
with different versions of your services

74
00:02:20,000 --> 00:02:22,000
your containers inside your cluster

75
00:02:22,000 --> 00:02:24,160
and then dynamically route traffic to

76
00:02:24,160 --> 00:02:26,720
one version or another

77
00:02:26,720 --> 00:02:28,400
from a cluster administration

78
00:02:28,400 --> 00:02:30,400
perspective to do it dynamically to see

79
00:02:30,400 --> 00:02:32,000
how the system behaves

80
00:02:32,000 --> 00:02:34,319
being able to inject fault into some of

81
00:02:34,319 --> 00:02:35,599
your microservices

82
00:02:35,599 --> 00:02:37,760
to see if it will take down the entire

83
00:02:37,760 --> 00:02:39,519
system or will you have cascading

84
00:02:39,519 --> 00:02:40,319
failures so

85
00:02:40,319 --> 00:02:43,440
testing and then policy management

86
00:02:43,440 --> 00:02:45,680
you know being able to say that only

87
00:02:45,680 --> 00:02:47,280
this service is allowed to talk to that

88
00:02:47,280 --> 00:02:48,480
service but

89
00:02:48,480 --> 00:02:50,319
my ui service is not allowed to talk

90
00:02:50,319 --> 00:02:52,319
directly to my database service

91
00:02:52,319 --> 00:02:54,000
things like that and then last but not

92
00:02:54,000 --> 00:02:55,360
least there's telemetry

93
00:02:55,360 --> 00:02:57,840
which is being able to get a complete

94
00:02:57,840 --> 00:02:59,200
end-to-end view

95
00:02:59,200 --> 00:03:02,640
of how your entire application stack

96
00:03:02,640 --> 00:03:04,959
is is deployed and then how traffic is

97
00:03:04,959 --> 00:03:06,319
flowing through

98
00:03:06,319 --> 00:03:09,440
your entire your entire mesh

99
00:03:09,440 --> 00:03:12,239
so um i'm showing a diagram here of kind

100
00:03:12,239 --> 00:03:14,080
of how the istio architecture the

101
00:03:14,080 --> 00:03:16,480
classic istio architecture um and i've

102
00:03:16,480 --> 00:03:18,959
chose this version this is 1.1 version

103
00:03:18,959 --> 00:03:20,000
because i think that

104
00:03:20,000 --> 00:03:23,280
um most people that have

105
00:03:23,280 --> 00:03:25,599
that have used istio are familiar with

106
00:03:25,599 --> 00:03:27,200
this architecture so i want to just get

107
00:03:27,200 --> 00:03:29,519
everyone up to speed to this point

108
00:03:29,519 --> 00:03:30,879
if you look at the very top of the

109
00:03:30,879 --> 00:03:32,560
architecture where you have service a

110
00:03:32,560 --> 00:03:34,720
and service b if you have them both

111
00:03:34,720 --> 00:03:35,680
deployed to

112
00:03:35,680 --> 00:03:38,319
your let's say your kubernetes cluster

113
00:03:38,319 --> 00:03:38,799
without

114
00:03:38,799 --> 00:03:40,319
istio if service a wants to talk to

115
00:03:40,319 --> 00:03:42,879
service b it'll just use the dns that is

116
00:03:42,879 --> 00:03:45,040
inside kubernetes get the ip address of

117
00:03:45,040 --> 00:03:46,000
service b

118
00:03:46,000 --> 00:03:47,760
and just start talking to it directly

119
00:03:47,760 --> 00:03:49,760
and there's not much you can do to

120
00:03:49,760 --> 00:03:52,319
to control this communication now if you

121
00:03:52,319 --> 00:03:54,080
have istio installed

122
00:03:54,080 --> 00:03:57,280
istio can automatically embed this proxy

123
00:03:57,280 --> 00:04:00,239
that runs the proxy itself runs in a

124
00:04:00,239 --> 00:04:01,280
container but

125
00:04:01,280 --> 00:04:03,599
it'll run inside the same pod as your

126
00:04:03,599 --> 00:04:04,879
application container

127
00:04:04,879 --> 00:04:06,879
so now in one kubernetes pod there's

128
00:04:06,879 --> 00:04:08,000
your container

129
00:04:08,000 --> 00:04:10,239
and the istio proxy container and this

130
00:04:10,239 --> 00:04:12,080
proxy is programmed to intercept

131
00:04:12,080 --> 00:04:14,640
all incoming and outgoing traffic to

132
00:04:14,640 --> 00:04:15,680
your container

133
00:04:15,680 --> 00:04:17,358
so now one service a wants to talk to

134
00:04:17,358 --> 00:04:20,079
service b the proxy on service a side

135
00:04:20,079 --> 00:04:21,839
will intercept that request

136
00:04:21,839 --> 00:04:24,000
it can check to see if there's any

137
00:04:24,000 --> 00:04:25,280
policies in place

138
00:04:25,280 --> 00:04:26,880
to see if that communication is allowed

139
00:04:26,880 --> 00:04:28,400
to happen and

140
00:04:28,400 --> 00:04:30,560
so we'll check the hto mixer component

141
00:04:30,560 --> 00:04:32,400
the mixer policy component

142
00:04:32,400 --> 00:04:34,479
and then if it's allowed to then it'll

143
00:04:34,479 --> 00:04:35,600
it will

144
00:04:35,600 --> 00:04:37,680
start talking to the kim to the proxy on

145
00:04:37,680 --> 00:04:38,800
the receiving end

146
00:04:38,800 --> 00:04:41,360
on the on service b side if you have

147
00:04:41,360 --> 00:04:43,199
mutual tls configured it will start

148
00:04:43,199 --> 00:04:44,720
upgrading the traffic

149
00:04:44,720 --> 00:04:46,720
and then you know proceed on with the

150
00:04:46,720 --> 00:04:48,000
communication

151
00:04:48,000 --> 00:04:49,840
once this communication happens out of

152
00:04:49,840 --> 00:04:51,520
ban each one of those proxies will

153
00:04:51,520 --> 00:04:52,160
report

154
00:04:52,160 --> 00:04:53,840
telemetry information of what just

155
00:04:53,840 --> 00:04:55,840
happened back to the istio mixer

156
00:04:55,840 --> 00:04:57,280
component

157
00:04:57,280 --> 00:04:58,720
a couple of the other components on the

158
00:04:58,720 --> 00:05:00,800
bottom pilot

159
00:05:00,800 --> 00:05:02,960
and galley they're responsible for

160
00:05:02,960 --> 00:05:04,160
receiving

161
00:05:04,160 --> 00:05:06,240
your istio configuration so a user will

162
00:05:06,240 --> 00:05:08,160
write istio config as like kubernetes

163
00:05:08,160 --> 00:05:08,800
ymo

164
00:05:08,800 --> 00:05:11,360
and apply it to kubernetes so the api

165
00:05:11,360 --> 00:05:13,039
server will receive it

166
00:05:13,039 --> 00:05:14,720
that's the galley component it'll pass

167
00:05:14,720 --> 00:05:16,800
it over to pilot pilot will convert

168
00:05:16,800 --> 00:05:20,400
that yamo to envoy configuration

169
00:05:20,400 --> 00:05:22,639
and then send that config to each one of

170
00:05:22,639 --> 00:05:24,560
those proxies you have inside of your

171
00:05:24,560 --> 00:05:25,600
cluster

172
00:05:25,600 --> 00:05:27,759
the the piece on the bottom right istio

173
00:05:27,759 --> 00:05:29,680
citadel is the security

174
00:05:29,680 --> 00:05:32,560
component it is responsible for

175
00:05:32,560 --> 00:05:34,320
generating certificates for that mutual

176
00:05:34,320 --> 00:05:34,960
tls

177
00:05:34,960 --> 00:05:37,199
so it's a certificate authority it

178
00:05:37,199 --> 00:05:38,880
generates certificates for each one of

179
00:05:38,880 --> 00:05:39,440
your

180
00:05:39,440 --> 00:05:41,840
services provides strong identity

181
00:05:41,840 --> 00:05:43,360
certificate generation

182
00:05:43,360 --> 00:05:46,000
uh regeneration rollouts etc it handles

183
00:05:46,000 --> 00:05:48,720
everything for you

184
00:05:49,120 --> 00:05:52,320
some of the main configuration elements

185
00:05:52,320 --> 00:05:53,680
that you need to know

186
00:05:53,680 --> 00:05:57,120
when you're starting to use istio are

187
00:05:57,120 --> 00:05:59,039
or the following the first thing you'll

188
00:05:59,039 --> 00:06:01,199
need is the istio gateway object

189
00:06:01,199 --> 00:06:03,520
so this is essentially your load

190
00:06:03,520 --> 00:06:05,919
balancer that sits at the edge of your

191
00:06:05,919 --> 00:06:06,960
of your mesh

192
00:06:06,960 --> 00:06:09,280
so this is where you define you know

193
00:06:09,280 --> 00:06:10,080
your host

194
00:06:10,080 --> 00:06:12,000
and a port so this is where you want to

195
00:06:12,000 --> 00:06:13,360
listen to traffic

196
00:06:13,360 --> 00:06:14,880
you know for traffic coming into your

197
00:06:14,880 --> 00:06:16,479
cluster in this example

198
00:06:16,479 --> 00:06:18,880
i want to listen on mybookstore.com and

199
00:06:18,880 --> 00:06:20,000
all traffic on port

200
00:06:20,000 --> 00:06:23,199
80 on uh using on http protocol

201
00:06:23,199 --> 00:06:25,199
and that's it so that's kind of like

202
00:06:25,199 --> 00:06:26,560
your load balancer

203
00:06:26,560 --> 00:06:28,880
just receives traffic but it doesn't do

204
00:06:28,880 --> 00:06:30,240
any routing yet

205
00:06:30,240 --> 00:06:33,120
so routing aspect comes in the next

206
00:06:33,120 --> 00:06:34,240
configuration which is

207
00:06:34,240 --> 00:06:36,479
istio virtual service so now you can

208
00:06:36,479 --> 00:06:39,039
bind a virtual service to a gateway

209
00:06:39,039 --> 00:06:41,759
and then say that you know all of these

210
00:06:41,759 --> 00:06:43,600
uri matches you know if it's slash

211
00:06:43,600 --> 00:06:44,720
product page slash

212
00:06:44,720 --> 00:06:47,039
x slash y if it matches any of these

213
00:06:47,039 --> 00:06:48,240
uris

214
00:06:48,240 --> 00:06:49,919
then if you look at the bottom of the

215
00:06:49,919 --> 00:06:52,080
yemo then there's a destination

216
00:06:52,080 --> 00:06:53,759
and that's your service and say okay if

217
00:06:53,759 --> 00:06:55,599
it matches any of these uris

218
00:06:55,599 --> 00:06:57,759
then go ahead and send traffic to my

219
00:06:57,759 --> 00:06:59,039
product page service

220
00:06:59,039 --> 00:07:03,840
on on that particular port

221
00:07:03,840 --> 00:07:07,120
moving on this is also virtual services

222
00:07:07,120 --> 00:07:09,360
also how you can do canary testing

223
00:07:09,360 --> 00:07:12,160
so if you wanted a subset of your users

224
00:07:12,160 --> 00:07:13,120
to get a different

225
00:07:13,120 --> 00:07:15,840
version of one of your services it's as

226
00:07:15,840 --> 00:07:18,400
simple as this configuration file

227
00:07:18,400 --> 00:07:20,960
this is saying that you know if in the

228
00:07:20,960 --> 00:07:22,160
header

229
00:07:22,160 --> 00:07:24,639
there's a value for end user and it

230
00:07:24,639 --> 00:07:25,280
matches

231
00:07:25,280 --> 00:07:28,880
json then that only that one user will

232
00:07:28,880 --> 00:07:30,000
get routed to version

233
00:07:30,000 --> 00:07:32,479
two everyone else will just get routed

234
00:07:32,479 --> 00:07:34,319
to to version one

235
00:07:34,319 --> 00:07:35,919
so that's an easy way for you to

236
00:07:35,919 --> 00:07:38,400
dynamically do canary testing

237
00:07:38,400 --> 00:07:41,039
now you can also do things like this

238
00:07:41,039 --> 00:07:42,800
example is showing header match but you

239
00:07:42,800 --> 00:07:45,840
can also do

240
00:07:45,840 --> 00:07:47,599
on various values that are part of the

241
00:07:47,599 --> 00:07:50,240
header right like all firefox users get

242
00:07:50,240 --> 00:07:51,199
version two

243
00:07:51,199 --> 00:07:53,120
all mobile users get version three and

244
00:07:53,120 --> 00:07:55,759
things like that

245
00:07:55,759 --> 00:07:57,599
you can also do traffic shifting so if

246
00:07:57,599 --> 00:07:59,039
you wanted to be very precise

247
00:07:59,039 --> 00:08:02,160
and say i wanted 96 of my traffic to go

248
00:08:02,160 --> 00:08:02,879
to version one

249
00:08:02,879 --> 00:08:05,440
and four percent to version three things

250
00:08:05,440 --> 00:08:07,360
like that kubernetes out of the box

251
00:08:07,360 --> 00:08:09,360
can't give you that granular control you

252
00:08:09,360 --> 00:08:10,639
can only control

253
00:08:10,639 --> 00:08:13,120
based on the number of pods instances of

254
00:08:13,120 --> 00:08:14,319
pods you have running

255
00:08:14,319 --> 00:08:16,240
whereas with istio you can say i want

256
00:08:16,240 --> 00:08:18,000
you can be very specific

257
00:08:18,000 --> 00:08:19,840
and and do traffic shifting down to the

258
00:08:19,840 --> 00:08:22,719
percentage level

259
00:08:24,479 --> 00:08:27,520
you can also do fault injection so this

260
00:08:27,520 --> 00:08:29,360
example is showing that

261
00:08:29,360 --> 00:08:31,199
it builds on the previous header match

262
00:08:31,199 --> 00:08:32,479
json example

263
00:08:32,479 --> 00:08:35,519
but this time it says for json if the

264
00:08:35,519 --> 00:08:37,599
header matches end user json

265
00:08:37,599 --> 00:08:39,839
then that one user will get a seven

266
00:08:39,839 --> 00:08:41,760
second delay when they're trying to talk

267
00:08:41,760 --> 00:08:42,880
to the rating service

268
00:08:42,880 --> 00:08:45,120
a hundred percent of the time so this is

269
00:08:45,120 --> 00:08:46,880
another way for you to you know make

270
00:08:46,880 --> 00:08:49,279
sure that you're testing your system for

271
00:08:49,279 --> 00:08:51,839
uh for false so if for some reason one

272
00:08:51,839 --> 00:08:52,839
of your services

273
00:08:52,839 --> 00:08:55,920
decided responds a little slow you don't

274
00:08:55,920 --> 00:08:57,839
want any cascading failure so this is an

275
00:08:57,839 --> 00:08:58,959
easy way to test

276
00:08:58,959 --> 00:09:00,720
and you can test you know directly in

277
00:09:00,720 --> 00:09:02,160
your production instance if you wanted

278
00:09:02,160 --> 00:09:02,480
to

279
00:09:02,480 --> 00:09:04,800
because you're you're restricting it to

280
00:09:04,800 --> 00:09:09,839
your subset of your users

281
00:09:10,480 --> 00:09:14,000
policies um this is that example i

282
00:09:14,000 --> 00:09:15,839
covered before where you don't want your

283
00:09:15,839 --> 00:09:18,480
ui to talk to your database service

284
00:09:18,480 --> 00:09:20,959
so with kubernetes there it's kind of

285
00:09:20,959 --> 00:09:21,760
all

286
00:09:21,760 --> 00:09:24,560
all or nothing right so with istio you

287
00:09:24,560 --> 00:09:25,519
can do

288
00:09:25,519 --> 00:09:28,800
really like level layer seven type of

289
00:09:28,800 --> 00:09:31,680
um access control this example is

290
00:09:31,680 --> 00:09:32,560
showing that

291
00:09:32,560 --> 00:09:35,440
you know principles and only this

292
00:09:35,440 --> 00:09:36,640
particular

293
00:09:36,640 --> 00:09:39,200
service account is able to make a get

294
00:09:39,200 --> 00:09:40,000
request

295
00:09:40,000 --> 00:09:42,000
to the details service and then you can

296
00:09:42,000 --> 00:09:43,360
bind that service account to a

297
00:09:43,360 --> 00:09:44,080
particular

298
00:09:44,080 --> 00:09:46,320
uh to a particular service so you can

299
00:09:46,320 --> 00:09:47,680
get really granular

300
00:09:47,680 --> 00:09:50,399
on you know the exact verbs the exact

301
00:09:50,399 --> 00:09:51,120
type of

302
00:09:51,120 --> 00:09:53,360
http request that you that each one of

303
00:09:53,360 --> 00:09:54,160
your services

304
00:09:54,160 --> 00:09:56,320
is allowed to make allowed to call one

305
00:09:56,320 --> 00:09:58,000
another so it really is about like you

306
00:09:58,000 --> 00:09:59,519
know building resiliency

307
00:09:59,519 --> 00:10:02,320
uh inside your service so that's kind of

308
00:10:02,320 --> 00:10:05,360
like an istio overview um

309
00:10:05,360 --> 00:10:08,160
so now i have like 15 minutes left maybe

310
00:10:08,160 --> 00:10:09,600
10 15 minutes left

311
00:10:09,600 --> 00:10:11,279
so now let's talk about you know what

312
00:10:11,279 --> 00:10:12,640
changed in the last six

313
00:10:12,640 --> 00:10:14,320
six months and then what to expect in

314
00:10:14,320 --> 00:10:16,560
the coming future

315
00:10:16,560 --> 00:10:19,200
the the big feedback we got with istio

316
00:10:19,200 --> 00:10:21,680
1.1 istio 1.1 is when

317
00:10:21,680 --> 00:10:24,000
we told the community and our customers

318
00:10:24,000 --> 00:10:26,079
that like hey listen istio is enterprise

319
00:10:26,079 --> 00:10:26,800
ready

320
00:10:26,800 --> 00:10:28,959
um it's production ready we're ready for

321
00:10:28,959 --> 00:10:30,720
you to deploy it at scale

322
00:10:30,720 --> 00:10:32,720
and then give us your feedback but you

323
00:10:32,720 --> 00:10:33,760
know we

324
00:10:33,760 --> 00:10:35,440
uh we believe it's ready for you to do

325
00:10:35,440 --> 00:10:37,040
it and a lot of customers took us up on

326
00:10:37,040 --> 00:10:37,680
it and

327
00:10:37,680 --> 00:10:40,320
and they sure definitely did that some

328
00:10:40,320 --> 00:10:41,440
of the feedback we got

329
00:10:41,440 --> 00:10:43,200
was that incremental adoption is

330
00:10:43,200 --> 00:10:44,640
difficult so

331
00:10:44,640 --> 00:10:47,920
adding one service at a time to istio to

332
00:10:47,920 --> 00:10:49,200
test how it's behaving

333
00:10:49,200 --> 00:10:52,320
has has been challenging um

334
00:10:52,320 --> 00:10:54,079
difficult to debug when things are not

335
00:10:54,079 --> 00:10:56,160
working um because

336
00:10:56,160 --> 00:10:58,079
there's a lot of kind of behind the

337
00:10:58,079 --> 00:11:00,160
scenes things going on with the envoy

338
00:11:00,160 --> 00:11:00,800
proxy

339
00:11:00,800 --> 00:11:02,880
intercepting requests and istio

340
00:11:02,880 --> 00:11:04,800
configuring those envoys

341
00:11:04,800 --> 00:11:06,399
when things don't work when you have a

342
00:11:06,399 --> 00:11:09,040
bad configuration you don't really know

343
00:11:09,040 --> 00:11:11,839
how to debug unless you're like an envoy

344
00:11:11,839 --> 00:11:13,279
expert and you're able to read your

345
00:11:13,279 --> 00:11:15,600
proxy logs

346
00:11:15,600 --> 00:11:17,760
installation is difficult istio did

347
00:11:17,760 --> 00:11:20,320
expose a ton of configuration knobs

348
00:11:20,320 --> 00:11:22,240
because we're trying to satisfy all

349
00:11:22,240 --> 00:11:24,160
users right

350
00:11:24,160 --> 00:11:27,040
we supported multiple environments we

351
00:11:27,040 --> 00:11:28,320
supported multiple

352
00:11:28,320 --> 00:11:31,360
cloud providers kubernetes environments

353
00:11:31,360 --> 00:11:33,360
we wanted you to be able to deploy

354
00:11:33,360 --> 00:11:35,040
single cluster multi-cluster

355
00:11:35,040 --> 00:11:37,680
and we just gave you you know everything

356
00:11:37,680 --> 00:11:39,440
you wanted to do configure that you know

357
00:11:39,440 --> 00:11:40,640
we let you configure

358
00:11:40,640 --> 00:11:43,200
using these these helm values and that

359
00:11:43,200 --> 00:11:43,760
became

360
00:11:43,760 --> 00:11:45,600
very difficult for users to figure out

361
00:11:45,600 --> 00:11:46,959
what they need to set

362
00:11:46,959 --> 00:11:49,200
as far as best practices for their

363
00:11:49,200 --> 00:11:51,120
production and dev and evaluation

364
00:11:51,120 --> 00:11:52,480
environments

365
00:11:52,480 --> 00:11:54,399
some customers deployed it at massive

366
00:11:54,399 --> 00:11:56,639
scale like 10 000

367
00:11:56,639 --> 00:11:58,560
i said thousand plus but like up to 10

368
00:11:58,560 --> 00:11:59,680
000 services

369
00:11:59,680 --> 00:12:01,680
and started reporting problems of the

370
00:12:01,680 --> 00:12:02,800
istio control plan

371
00:12:02,800 --> 00:12:06,079
footprint going up um you know

372
00:12:06,079 --> 00:12:08,000
applying configuration and seeing a

373
00:12:08,000 --> 00:12:09,600
spike in resource usage

374
00:12:09,600 --> 00:12:10,959
you know temporarily while that

375
00:12:10,959 --> 00:12:12,880
configuration got rolled out

376
00:12:12,880 --> 00:12:16,079
and then the they also reported problems

377
00:12:16,079 --> 00:12:17,519
with policy enforcement

378
00:12:17,519 --> 00:12:20,160
if you have policies in place that means

379
00:12:20,160 --> 00:12:20,639
that

380
00:12:20,639 --> 00:12:22,720
every single time one pod needs to talk

381
00:12:22,720 --> 00:12:24,959
to another pod the proxy needs to check

382
00:12:24,959 --> 00:12:26,880
the mixer policy component to see if

383
00:12:26,880 --> 00:12:27,760
that

384
00:12:27,760 --> 00:12:30,079
that transaction is is allowed now that

385
00:12:30,079 --> 00:12:32,480
you can do some level of caching but

386
00:12:32,480 --> 00:12:33,920
but it still added quite a lot of

387
00:12:33,920 --> 00:12:35,839
latency to it

388
00:12:35,839 --> 00:12:37,519
so we decided to tax all of these

389
00:12:37,519 --> 00:12:39,519
feedbacks from mysterio 1.1

390
00:12:39,519 --> 00:12:43,839
and now we're at istio 1.5 for reference

391
00:12:43,839 --> 00:12:46,880
the big improvements were in usability

392
00:12:46,880 --> 00:12:49,760
we invested a bunch in the istio ctl

393
00:12:49,760 --> 00:12:51,600
command line interface

394
00:12:51,600 --> 00:12:54,800
being able to now describe any service

395
00:12:54,800 --> 00:12:56,800
or pod istio ctl describe

396
00:12:56,800 --> 00:12:58,399
service and then you provide the name of

397
00:12:58,399 --> 00:13:00,160
the service or the name of the pod

398
00:13:00,160 --> 00:13:02,000
and it will introspect the configuration

399
00:13:02,000 --> 00:13:03,519
that's applied to that

400
00:13:03,519 --> 00:13:05,680
to that service and give you easy to

401
00:13:05,680 --> 00:13:06,959
read output

402
00:13:06,959 --> 00:13:09,200
so the top right example is showing that

403
00:13:09,200 --> 00:13:11,839
this service is listening on port 9080

404
00:13:11,839 --> 00:13:14,399
the mutual tls is configured for

405
00:13:14,399 --> 00:13:15,200
permissive

406
00:13:15,200 --> 00:13:17,360
clients are configured to talk to this

407
00:13:17,360 --> 00:13:19,680
pod using mutual tls automatically

408
00:13:19,680 --> 00:13:21,600
it shows which ingress gateway the

409
00:13:21,600 --> 00:13:23,519
particular service is exposed on

410
00:13:23,519 --> 00:13:26,880
and what uris it's configured to listen

411
00:13:26,880 --> 00:13:28,399
on so that makes it very easy to

412
00:13:28,399 --> 00:13:30,079
immediately debug when something is not

413
00:13:30,079 --> 00:13:31,920
working you just describe your service

414
00:13:31,920 --> 00:13:34,320
and then check it out um it still comes

415
00:13:34,320 --> 00:13:36,000
with various dashboards

416
00:13:36,000 --> 00:13:40,000
um kiali grafana jaeger et cetera for

417
00:13:40,000 --> 00:13:40,480
you to

418
00:13:40,480 --> 00:13:42,399
get all your observability information

419
00:13:42,399 --> 00:13:44,079
we made it really easy to launch those

420
00:13:44,079 --> 00:13:46,560
dashboards by just typing istioctl

421
00:13:46,560 --> 00:13:48,880
dashboard kiali or dashboard grafana

422
00:13:48,880 --> 00:13:51,600
graphic dashboard jager etc

423
00:13:51,600 --> 00:13:53,040
and then another one i want to highlight

424
00:13:53,040 --> 00:13:55,360
is istio ctl analyze

425
00:13:55,360 --> 00:13:56,959
this allows you to check your

426
00:13:56,959 --> 00:13:59,199
configuration files before you apply it

427
00:13:59,199 --> 00:14:01,680
so if you have your yamo your istio yamo

428
00:14:01,680 --> 00:14:04,480
you can just do analyze and then give it

429
00:14:04,480 --> 00:14:05,120
that

430
00:14:05,120 --> 00:14:07,360
that configuration file the dash k

431
00:14:07,360 --> 00:14:09,279
option tells it to check that gamo

432
00:14:09,279 --> 00:14:10,959
against your kubernetes

433
00:14:10,959 --> 00:14:13,680
server itself to see if it's compatible

434
00:14:13,680 --> 00:14:14,560
if you have

435
00:14:14,560 --> 00:14:16,320
if you're referencing gateways that

436
00:14:16,320 --> 00:14:17,839
don't exist or if you're referencing

437
00:14:17,839 --> 00:14:20,160
virtual services that don't exist

438
00:14:20,160 --> 00:14:22,639
a lot of people you know got in trouble

439
00:14:22,639 --> 00:14:23,360
by

440
00:14:23,360 --> 00:14:26,000
just basically writing bad yaml that

441
00:14:26,000 --> 00:14:28,000
they weren't able to get feedback on so

442
00:14:28,000 --> 00:14:30,240
this was a big improvement for for users

443
00:14:30,240 --> 00:14:31,040
to

444
00:14:31,040 --> 00:14:33,120
add this check into their pipeline you

445
00:14:33,120 --> 00:14:34,880
know and not apply things that's going

446
00:14:34,880 --> 00:14:37,760
to break their system

447
00:14:38,000 --> 00:14:41,519
um we talked about how the istio policy

448
00:14:41,519 --> 00:14:44,399
mixer policy added a lot of performance

449
00:14:44,399 --> 00:14:45,920
hit in terms of latency as it needs to

450
00:14:45,920 --> 00:14:46,480
do that

451
00:14:46,480 --> 00:14:49,680
out of band check so in the future

452
00:14:49,680 --> 00:14:53,760
now we're moving all of that logic

453
00:14:53,760 --> 00:14:56,160
to the proxy itself and getting rid of

454
00:14:56,160 --> 00:14:58,800
that out-of-band mixer component

455
00:14:58,800 --> 00:15:01,519
so normal policy checks like

456
00:15:01,519 --> 00:15:03,120
authentication and authorizations have

457
00:15:03,120 --> 00:15:04,399
already been moved

458
00:15:04,399 --> 00:15:06,320
using authentication and authorization

459
00:15:06,320 --> 00:15:09,680
apis which are very simple to use

460
00:15:09,680 --> 00:15:11,600
the proxies used to report all telemetry

461
00:15:11,600 --> 00:15:13,120
information to the mixer telemetry

462
00:15:13,120 --> 00:15:14,000
component

463
00:15:14,000 --> 00:15:15,360
now they don't do that or they don't

464
00:15:15,360 --> 00:15:17,440
have to do that they they can

465
00:15:17,440 --> 00:15:19,680
serve proxy they can serve their

466
00:15:19,680 --> 00:15:21,680
telemetry endpoints directly from the

467
00:15:21,680 --> 00:15:22,639
proxy itself

468
00:15:22,639 --> 00:15:25,279
so you can then now deploy a prometheus

469
00:15:25,279 --> 00:15:26,880
agent which will scrape the metrics

470
00:15:26,880 --> 00:15:28,320
directly from each one of the

471
00:15:28,320 --> 00:15:31,839
the proxies and then any extensions that

472
00:15:31,839 --> 00:15:32,959
you want to write

473
00:15:32,959 --> 00:15:35,199
for istio in the past have been through

474
00:15:35,199 --> 00:15:37,600
uh istio mixer component

475
00:15:37,600 --> 00:15:40,240
now we're it's the proxy envoy now

476
00:15:40,240 --> 00:15:41,680
supports webassembly

477
00:15:41,680 --> 00:15:45,279
web assembly is a binary

478
00:15:45,279 --> 00:15:47,759
artifact originally meant you know to

479
00:15:47,759 --> 00:15:49,440
run in browsers and stuff

480
00:15:49,440 --> 00:15:51,440
but this allows developers to write

481
00:15:51,440 --> 00:15:53,360
various extensions package it up into

482
00:15:53,360 --> 00:15:54,320
this nice

483
00:15:54,320 --> 00:15:56,480
binary format and hand it over to the

484
00:15:56,480 --> 00:15:58,800
proxy and the proxy will run it directly

485
00:15:58,800 --> 00:16:00,880
in the proxy itself and not call

486
00:16:00,880 --> 00:16:04,160
any other endpoint so they you know

487
00:16:04,160 --> 00:16:04,959
these

488
00:16:04,959 --> 00:16:07,279
will cause you know huge amounts of

489
00:16:07,279 --> 00:16:09,120
performance improvements

490
00:16:09,120 --> 00:16:11,680
both in terms of like memory footprint

491
00:16:11,680 --> 00:16:14,399
and cpu resource utilization as well as

492
00:16:14,399 --> 00:16:17,440
latency itself

493
00:16:18,480 --> 00:16:21,440
installation we simplified installation

494
00:16:21,440 --> 00:16:22,480
by providing

495
00:16:22,480 --> 00:16:25,360
a couple of new things we created this

496
00:16:25,360 --> 00:16:28,160
istio operator configuration file

497
00:16:28,160 --> 00:16:32,320
this allows you to easily define exactly

498
00:16:32,320 --> 00:16:34,160
what you want your istio control plane

499
00:16:34,160 --> 00:16:35,680
to look like you know what components do

500
00:16:35,680 --> 00:16:37,199
you want to enable and how to configure

501
00:16:37,199 --> 00:16:37,839
them

502
00:16:37,839 --> 00:16:40,959
so all of those helm values

503
00:16:40,959 --> 00:16:44,160
knobs are now easily configurable

504
00:16:44,160 --> 00:16:45,120
through this mesh

505
00:16:45,120 --> 00:16:47,759
file that has a good set of defaults and

506
00:16:47,759 --> 00:16:49,360
you only overwrite anything that you

507
00:16:49,360 --> 00:16:50,880
want to change

508
00:16:50,880 --> 00:16:52,639
so if i wanted to just a default

509
00:16:52,639 --> 00:16:54,880
installation of istio this file would

510
00:16:54,880 --> 00:16:57,120
only be like four or five lines long

511
00:16:57,120 --> 00:16:58,399
this example is showing some

512
00:16:58,399 --> 00:17:01,120
customizations now once i apply this

513
00:17:01,120 --> 00:17:03,360
once i create this istio operator

514
00:17:03,360 --> 00:17:04,160
configuration

515
00:17:04,160 --> 00:17:06,559
file there's two ways i can use it to

516
00:17:06,559 --> 00:17:08,000
deploy istio

517
00:17:08,000 --> 00:17:10,240
i can do istio manifest apply which will

518
00:17:10,240 --> 00:17:11,119
take this

519
00:17:11,119 --> 00:17:12,799
configuration file generate all the

520
00:17:12,799 --> 00:17:14,720
necessary like kubernetes artifacts the

521
00:17:14,720 --> 00:17:16,799
deployments the services etc

522
00:17:16,799 --> 00:17:18,799
and just apply it to your kubernetes

523
00:17:18,799 --> 00:17:20,000
cluster

524
00:17:20,000 --> 00:17:22,319
or you can use the new server side

525
00:17:22,319 --> 00:17:23,280
controller so

526
00:17:23,280 --> 00:17:26,319
a true kubernetes operator you would

527
00:17:26,319 --> 00:17:27,839
apply this configuration directly to

528
00:17:27,839 --> 00:17:29,039
your cluster

529
00:17:29,039 --> 00:17:30,559
there would be an operator that's

530
00:17:30,559 --> 00:17:32,080
running inside of your cluster

531
00:17:32,080 --> 00:17:34,720
that listens to that configuration file

532
00:17:34,720 --> 00:17:35,520
and then

533
00:17:35,520 --> 00:17:37,440
and then applies changes directly in the

534
00:17:37,440 --> 00:17:38,720
cluster itself

535
00:17:38,720 --> 00:17:40,640
so if you apply any new version of this

536
00:17:40,640 --> 00:17:42,480
is to your operator api then

537
00:17:42,480 --> 00:17:44,240
the controller will pick up the changes

538
00:17:44,240 --> 00:17:46,559
and and keep it updated

539
00:17:46,559 --> 00:17:48,960
uh moving forward i think you know this

540
00:17:48,960 --> 00:17:49,600
will be

541
00:17:49,600 --> 00:17:52,880
a a pretty primary you use case

542
00:17:52,880 --> 00:17:55,440
for installing istio especially for like

543
00:17:55,440 --> 00:17:57,280
platform administrators

544
00:17:57,280 --> 00:18:00,320
the traditional helm installation we're

545
00:18:00,320 --> 00:18:02,400
looking to deprecate it there's still

546
00:18:02,400 --> 00:18:04,240
some users that have a very

547
00:18:04,240 --> 00:18:07,440
strong desire to to keep it as you know

548
00:18:07,440 --> 00:18:09,440
they use helm as part of their existing

549
00:18:09,440 --> 00:18:10,799
pipelines and they want

550
00:18:10,799 --> 00:18:14,320
to maintain consistency so so keep on

551
00:18:14,320 --> 00:18:15,600
the lookout for

552
00:18:15,600 --> 00:18:17,520
the so what will happen with the current

553
00:18:17,520 --> 00:18:20,960
current is to your home installation

554
00:18:21,200 --> 00:18:22,960
a big architecture change that istio

555
00:18:22,960 --> 00:18:24,799
went through recently is that we moved

556
00:18:24,799 --> 00:18:26,400
away from microservices

557
00:18:26,400 --> 00:18:28,400
and this is hilarious because you know

558
00:18:28,400 --> 00:18:30,000
istio is there to help you

559
00:18:30,000 --> 00:18:33,039
with your microservices and istio itself

560
00:18:33,039 --> 00:18:35,039
was built using microservices but then

561
00:18:35,039 --> 00:18:36,240
we decided that

562
00:18:36,240 --> 00:18:37,760
istio itself doesn't need to do

563
00:18:37,760 --> 00:18:39,520
microservices

564
00:18:39,520 --> 00:18:41,440
the advantages of microservices you know

565
00:18:41,440 --> 00:18:42,880
being able to write each individual

566
00:18:42,880 --> 00:18:44,720
service in different language

567
00:18:44,720 --> 00:18:46,720
you know being able to deploy them

568
00:18:46,720 --> 00:18:48,400
independently

569
00:18:48,400 --> 00:18:50,640
being able to upgrade manage each

570
00:18:50,640 --> 00:18:52,160
lifecycle independently we're not doing

571
00:18:52,160 --> 00:18:53,440
any of that in this field all the

572
00:18:53,440 --> 00:18:54,880
services are written and go

573
00:18:54,880 --> 00:18:56,320
they all get deployed together they all

574
00:18:56,320 --> 00:18:58,559
get upgraded together so it didn't make

575
00:18:58,559 --> 00:19:00,720
sense for istio itself to have all of

576
00:19:00,720 --> 00:19:01,760
these

577
00:19:01,760 --> 00:19:05,280
these various pods so in istio

578
00:19:05,280 --> 00:19:08,400
1.5 we moved back to

579
00:19:08,400 --> 00:19:10,799
monolith monolithic architecture and now

580
00:19:10,799 --> 00:19:11,760
there's this one

581
00:19:11,760 --> 00:19:14,960
istiod component which comprises of

582
00:19:14,960 --> 00:19:18,240
the istio galley pilot um citadel

583
00:19:18,240 --> 00:19:21,679
etc so this tremendously reduces the

584
00:19:21,679 --> 00:19:23,280
istio

585
00:19:23,280 --> 00:19:26,240
footprint itself as well as performance

586
00:19:26,240 --> 00:19:29,039
it makes installation much more easier

587
00:19:29,039 --> 00:19:30,799
makes debugging much more easier it's

588
00:19:30,799 --> 00:19:32,720
just overall you know much more simple

589
00:19:32,720 --> 00:19:35,600
from an istio administration perspective

590
00:19:35,600 --> 00:19:37,360
so now for the hdo control plane there's

591
00:19:37,360 --> 00:19:39,600
only one sdod component

592
00:19:39,600 --> 00:19:41,679
now for data plane components like

593
00:19:41,679 --> 00:19:43,520
ingress gateway and egress gateway

594
00:19:43,520 --> 00:19:45,280
are additional pods that you can

595
00:19:45,280 --> 00:19:48,559
configure on top of it

596
00:19:50,960 --> 00:19:53,919
um in the past if you wanted to enable

597
00:19:53,919 --> 00:19:57,440
security mutual tls from pod to pod

598
00:19:57,440 --> 00:20:00,880
communication it used to require you to

599
00:20:00,880 --> 00:20:03,120
configure each one of them manually

600
00:20:03,120 --> 00:20:04,720
using using yaml

601
00:20:04,720 --> 00:20:05,679
you would have had to write a

602
00:20:05,679 --> 00:20:07,760
destination rule to tell the client side

603
00:20:07,760 --> 00:20:09,520
to upgrade traffic to

604
00:20:09,520 --> 00:20:12,720
to mtls and then on the on the server

605
00:20:12,720 --> 00:20:13,200
side

606
00:20:13,200 --> 00:20:14,799
you would have had to create a policy

607
00:20:14,799 --> 00:20:17,440
that says i only accept

608
00:20:17,440 --> 00:20:20,720
mtls traffic we don't you don't need

609
00:20:20,720 --> 00:20:21,760
that anymore you don't need this

610
00:20:21,760 --> 00:20:23,440
destination rule anymore

611
00:20:23,440 --> 00:20:26,720
um now istio by default is configured

612
00:20:26,720 --> 00:20:29,600
to automatically determine if if it can

613
00:20:29,600 --> 00:20:30,559
do mtls

614
00:20:30,559 --> 00:20:33,360
while truck talking to another service

615
00:20:33,360 --> 00:20:34,960
that has a sidecar enabled then it'll

616
00:20:34,960 --> 00:20:36,640
automatically just bump it up and start

617
00:20:36,640 --> 00:20:37,360
doing it

618
00:20:37,360 --> 00:20:38,880
and which makes you know incremental

619
00:20:38,880 --> 00:20:41,039
adoption you know much more simple

620
00:20:41,039 --> 00:20:42,960
because it just eliminates that step of

621
00:20:42,960 --> 00:20:44,400
you having to figure out

622
00:20:44,400 --> 00:20:47,039
you know what services will support mtls

623
00:20:47,039 --> 00:20:48,480
and what services don't

624
00:20:48,480 --> 00:20:49,919
and now you're just kind of offloading

625
00:20:49,919 --> 00:20:53,760
that istio to to figure it out

626
00:20:54,799 --> 00:20:58,080
um performance is something that we get

627
00:20:58,080 --> 00:20:59,600
asked a lot with istio

628
00:20:59,600 --> 00:21:02,960
right you're adding pieces that are

629
00:21:02,960 --> 00:21:04,880
that are intercepting traffic so there's

630
00:21:04,880 --> 00:21:07,520
obviously going to be some latency

631
00:21:07,520 --> 00:21:10,799
so this is a good summary

632
00:21:10,799 --> 00:21:12,960
reference point for you to keep in mind

633
00:21:12,960 --> 00:21:13,919
when

634
00:21:13,919 --> 00:21:16,960
evaluating istio so with istio we do a

635
00:21:16,960 --> 00:21:17,760
load test

636
00:21:17,760 --> 00:21:20,720
with a thousand services in a cluster

637
00:21:20,720 --> 00:21:22,080
and two thousand side cars because

638
00:21:22,080 --> 00:21:24,159
there's two proxies

639
00:21:24,159 --> 00:21:25,840
because two instances of the of the

640
00:21:25,840 --> 00:21:28,159
service is running and we run 70 000

641
00:21:28,159 --> 00:21:30,320
requests per second through the match so

642
00:21:30,320 --> 00:21:31,600
in that scenario

643
00:21:31,600 --> 00:21:34,080
um is each one of those istio proxies

644
00:21:34,080 --> 00:21:36,240
that run next to your container will use

645
00:21:36,240 --> 00:21:38,880
um half of vcpu and 50 megabytes of

646
00:21:38,880 --> 00:21:40,080
memory per

647
00:21:40,080 --> 00:21:41,760
thousand requests per minute that's

648
00:21:41,760 --> 00:21:45,840
going through that one sidecar

649
00:21:45,919 --> 00:21:48,799
as far as latency if you talk pod to pod

650
00:21:48,799 --> 00:21:50,720
that means there's two proxies

651
00:21:50,720 --> 00:21:52,960
one on the server one on the client side

652
00:21:52,960 --> 00:21:55,440
those proxies together add about 2.8

653
00:21:55,440 --> 00:21:57,600
milliseconds of latency

654
00:21:57,600 --> 00:22:00,240
with a kilobyte of traffic going through

655
00:22:00,240 --> 00:22:02,400
a thousand requests per second and 16

656
00:22:02,400 --> 00:22:04,400
connections

657
00:22:04,400 --> 00:22:07,200
um pilot which like the istio's main

658
00:22:07,200 --> 00:22:08,480
control plane component

659
00:22:08,480 --> 00:22:11,679
um with with you know a thousand

660
00:22:11,679 --> 00:22:12,720
services

661
00:22:12,720 --> 00:22:16,159
we'll use one vcpu and 1.5 gigabytes of

662
00:22:16,159 --> 00:22:16,720
memory

663
00:22:16,720 --> 00:22:18,640
so this is the state of performance for

664
00:22:18,640 --> 00:22:20,080
istio 1.5

665
00:22:20,080 --> 00:22:23,120
compared to 1.1 or 1.0 you know this

666
00:22:23,120 --> 00:22:26,480
totally blows it out of the water

667
00:22:26,480 --> 00:22:29,679
but really you know this is hard for you

668
00:22:29,679 --> 00:22:31,679
you really need to evaluate what istio

669
00:22:31,679 --> 00:22:34,320
will add in terms of performance

670
00:22:34,320 --> 00:22:37,200
in your own cluster we had many users

671
00:22:37,200 --> 00:22:39,120
report that istio actually increased

672
00:22:39,120 --> 00:22:40,080
their performance

673
00:22:40,080 --> 00:22:42,559
because they were doing all of these

674
00:22:42,559 --> 00:22:43,679
load balancing

675
00:22:43,679 --> 00:22:46,720
all of the the the tls termination

676
00:22:46,720 --> 00:22:49,840
and initiation logic they were doing all

677
00:22:49,840 --> 00:22:51,919
of that inside of their own application

678
00:22:51,919 --> 00:22:52,640
code

679
00:22:52,640 --> 00:22:54,720
and after they added istio you know they

680
00:22:54,720 --> 00:22:56,400
got to remove all of those pieces from

681
00:22:56,400 --> 00:22:57,679
their application

682
00:22:57,679 --> 00:22:59,840
and and they realized that hey you know

683
00:22:59,840 --> 00:23:02,799
envoy is able to do it at a much faster

684
00:23:02,799 --> 00:23:06,320
um is able to do it much faster than we

685
00:23:06,320 --> 00:23:08,159
were doing it in our in our java code

686
00:23:08,159 --> 00:23:09,200
for example

687
00:23:09,200 --> 00:23:11,520
so it really depends and you know your

688
00:23:11,520 --> 00:23:12,480
you know your luck

689
00:23:12,480 --> 00:23:14,880
may vary on in terms of performance but

690
00:23:14,880 --> 00:23:16,159
this is a good

691
00:23:16,159 --> 00:23:19,200
kind of reference point

692
00:23:20,080 --> 00:23:22,480
um with that i want to say you know like

693
00:23:22,480 --> 00:23:23,919
thank you you know for you to get

694
00:23:23,919 --> 00:23:24,640
started with

695
00:23:24,640 --> 00:23:26,480
istio there's multiple ways you can go

696
00:23:26,480 --> 00:23:28,960
to istio.io and download istio and just

697
00:23:28,960 --> 00:23:30,320
deploy it to your own

698
00:23:30,320 --> 00:23:33,200
kubernetes cluster minicube or whatever

699
00:23:33,200 --> 00:23:34,240
um

700
00:23:34,240 --> 00:23:37,520
various platforms now offer managed

701
00:23:37,520 --> 00:23:38,480
istio

702
00:23:38,480 --> 00:23:41,200
so i work for ibm cloud so our ibm cloud

703
00:23:41,200 --> 00:23:42,960
kubernetes service has a single

704
00:23:42,960 --> 00:23:45,360
istio managed disto add-on you just

705
00:23:45,360 --> 00:23:46,320
click a button and

706
00:23:46,320 --> 00:23:48,159
and installs istio on your cluster for

707
00:23:48,159 --> 00:23:50,000
you and then we manage

708
00:23:50,000 --> 00:23:51,840
the entire life cycle of istio keeping

709
00:23:51,840 --> 00:23:53,679
it upgraded et cetera

710
00:23:53,679 --> 00:23:55,360
if you're running you know red hat open

711
00:23:55,360 --> 00:23:56,960
shift istio

712
00:23:56,960 --> 00:23:59,440
is provided using red hat openshift

713
00:23:59,440 --> 00:24:00,480
service mesh

714
00:24:00,480 --> 00:24:03,120
through the istio through red hat

715
00:24:03,120 --> 00:24:04,880
operator hub

716
00:24:04,880 --> 00:24:07,200
same way you install the service mesh

717
00:24:07,200 --> 00:24:08,799
through the operator and it installs it

718
00:24:08,799 --> 00:24:09,679
to your cluster

719
00:24:09,679 --> 00:24:11,840
and then you can use the operator life

720
00:24:11,840 --> 00:24:12,960
cycle to keep

721
00:24:12,960 --> 00:24:15,120
to keep things updated so getting

722
00:24:15,120 --> 00:24:16,240
started with istio

723
00:24:16,240 --> 00:24:19,600
is very easy um

724
00:24:19,600 --> 00:24:21,840
it's only now up to you to to go ahead

725
00:24:21,840 --> 00:24:23,679
and you know try it out you know use

726
00:24:23,679 --> 00:24:26,480
some of the new ctl ux improvements to

727
00:24:26,480 --> 00:24:27,440
add one

728
00:24:27,440 --> 00:24:30,159
service at a time to to the to your

729
00:24:30,159 --> 00:24:30,960
istio mesh

730
00:24:30,960 --> 00:24:33,360
and see how it behaves and then you know

731
00:24:33,360 --> 00:24:34,960
before long hopefully you'll be able to

732
00:24:34,960 --> 00:24:35,760
add all of your

733
00:24:35,760 --> 00:24:37,840
services to to the service mesh and then

734
00:24:37,840 --> 00:24:39,039
the service mesh

735
00:24:39,039 --> 00:24:42,960
layer just becomes transparent to you

736
00:24:44,480 --> 00:24:46,000
awesome brown thank you very much really

737
00:24:46,000 --> 00:24:47,520
appreciate that session and um

738
00:24:47,520 --> 00:24:49,279
i'd love to i'd love to invite people to

739
00:24:49,279 --> 00:24:51,120
ask uh ask questions uh either through

740
00:24:51,120 --> 00:24:52,799
slido or or through the through the

741
00:24:52,799 --> 00:24:53,360
slack

742
00:24:53,360 --> 00:24:55,440
um i'm curious about the um when you're

743
00:24:55,440 --> 00:24:57,120
talking about the the

744
00:24:57,120 --> 00:24:58,880
uh the feedback that you got after the

745
00:24:58,880 --> 00:25:00,159
one one release

746
00:25:00,159 --> 00:25:01,520
what people was this feedback from

747
00:25:01,520 --> 00:25:03,120
people in production or was it people

748
00:25:03,120 --> 00:25:06,000
kind of like doing proof of concepts

749
00:25:06,000 --> 00:25:08,080
and the second part of that is is is

750
00:25:08,080 --> 00:25:09,120
once they got that

751
00:25:09,120 --> 00:25:10,880
the newer features that like like you

752
00:25:10,880 --> 00:25:12,480
said um

753
00:25:12,480 --> 00:25:14,320
how did that change you know where they

754
00:25:14,320 --> 00:25:15,760
where they were using or how much they

755
00:25:15,760 --> 00:25:16,799
were using it

756
00:25:16,799 --> 00:25:19,039
absolutely i think it's both right but

757
00:25:19,039 --> 00:25:20,960
most of our users

758
00:25:20,960 --> 00:25:23,520
in the one 1.1 time frame were

759
00:25:23,520 --> 00:25:24,960
evaluating istio

760
00:25:24,960 --> 00:25:28,240
and with with immediate goals

761
00:25:28,240 --> 00:25:30,960
to they had goals like they need to

762
00:25:30,960 --> 00:25:32,480
secure their entire cluster

763
00:25:32,480 --> 00:25:34,640
all pottapod communication had to be

764
00:25:34,640 --> 00:25:36,559
mutual tls so that was their goal so

765
00:25:36,559 --> 00:25:37,840
then they were starting to evaluate

766
00:25:37,840 --> 00:25:39,279
istio

767
00:25:39,279 --> 00:25:41,520
that's how we started getting feedback

768
00:25:41,520 --> 00:25:43,279
we got feedback through you know

769
00:25:43,279 --> 00:25:46,480
the through github issues through our

770
00:25:46,480 --> 00:25:49,120
our discuss uh through our slack so just

771
00:25:49,120 --> 00:25:50,640
from all the issues that are opened up

772
00:25:50,640 --> 00:25:52,080
is where we gathered most of this

773
00:25:52,080 --> 00:25:53,039
feedback

774
00:25:53,039 --> 00:25:54,960
um and and you can you can tell right

775
00:25:54,960 --> 00:25:56,320
based on the number of issues you're

776
00:25:56,320 --> 00:25:57,440
getting the number of questions you're

777
00:25:57,440 --> 00:25:58,559
getting on slack where

778
00:25:58,559 --> 00:26:00,640
people are getting really hung up on so

779
00:26:00,640 --> 00:26:01,600
that's kind of where we

780
00:26:01,600 --> 00:26:04,159
got the feedback from there are several

781
00:26:04,159 --> 00:26:05,360
podcasts of

782
00:26:05,360 --> 00:26:07,919
um big clients that have used istio and

783
00:26:07,919 --> 00:26:08,880
production

784
00:26:08,880 --> 00:26:10,400
and and outline some of these

785
00:26:10,400 --> 00:26:12,480
performance problems like that mixer

786
00:26:12,480 --> 00:26:14,480
problem where we're where they really

787
00:26:14,480 --> 00:26:16,240
you know told us yeah this is this is

788
00:26:16,240 --> 00:26:17,520
going to be a blocker

789
00:26:17,520 --> 00:26:19,360
as we go up to more and more services

790
00:26:19,360 --> 00:26:20,880
that's why we really put our

791
00:26:20,880 --> 00:26:23,840
to put our efforts on that but yeah

792
00:26:23,840 --> 00:26:25,360
recently we've been getting the same

793
00:26:25,360 --> 00:26:26,799
feedback from

794
00:26:26,799 --> 00:26:30,159
the customers that it's it's

795
00:26:30,159 --> 00:26:31,600
significantly better we know that

796
00:26:31,600 --> 00:26:33,200
because they have more and more services

797
00:26:33,200 --> 00:26:33,760
deployed

798
00:26:33,760 --> 00:26:36,000
and running as part of the mesh with

799
00:26:36,000 --> 00:26:39,120
with no problems

800
00:26:39,120 --> 00:26:41,120
awesome ram thank you very very much uh

801
00:26:41,120 --> 00:26:42,400
there's no

802
00:26:42,400 --> 00:26:44,559
no other questions in right now there is

803
00:26:44,559 --> 00:26:46,320
sorry one question here

804
00:26:46,320 --> 00:26:50,159
um uh from mehmet uh have there been any

805
00:26:50,159 --> 00:26:52,320
thought into which logs are valuable

806
00:26:52,320 --> 00:26:55,039
to security and what's the best way to

807
00:26:55,039 --> 00:26:56,159
extract them

808
00:26:56,159 --> 00:26:59,360
uh into a cm for istio

809
00:26:59,360 --> 00:27:03,279
s-i-e-m for istio s-i-e-m

810
00:27:03,279 --> 00:27:05,039
i don't know what s-i-e-m is do you know

811
00:27:05,039 --> 00:27:06,880
simon i'm not sure no

812
00:27:06,880 --> 00:27:10,640
okay i'll take a look

813
00:27:10,640 --> 00:27:13,679
uh if meema wants to uh elaborate on

814
00:27:13,679 --> 00:27:16,480
that one a little bit

815
00:27:16,799 --> 00:27:19,440
so i assume like if i assume properly

816
00:27:19,440 --> 00:27:21,039
that you know when you say security logs

817
00:27:21,039 --> 00:27:22,320
you're talking about

818
00:27:22,320 --> 00:27:25,760
encryption and audit logs

819
00:27:25,760 --> 00:27:27,760
all of those you can enable istio

820
00:27:27,760 --> 00:27:29,679
control plane level logging

821
00:27:29,679 --> 00:27:31,679
and and have access to all of those logs

822
00:27:31,679 --> 00:27:33,279
because there are just pods running

823
00:27:33,279 --> 00:27:36,240
inside of your cluster

824
00:27:36,240 --> 00:27:37,760
right it looks like it's security

825
00:27:37,760 --> 00:27:39,760
information and event management

826
00:27:39,760 --> 00:27:43,279
gotcha um so i guess uh intelligent

827
00:27:43,279 --> 00:27:44,880
security analytics through ibm or

828
00:27:44,880 --> 00:27:47,039
something like that i guess

829
00:27:47,039 --> 00:27:49,760
yeah i haven't seen anything where we're

830
00:27:49,760 --> 00:27:51,039
directly integrating

831
00:27:51,039 --> 00:27:54,080
istio control plane events to

832
00:27:54,080 --> 00:27:55,919
one of these you know like audit

833
00:27:55,919 --> 00:27:57,919
management or or any type of event

834
00:27:57,919 --> 00:27:58,799
management

835
00:27:58,799 --> 00:28:01,440
systems but i i don't see any reason why

836
00:28:01,440 --> 00:28:02,799
you'd not be able to do that i think you

837
00:28:02,799 --> 00:28:05,279
know writing a new webassembly plugin

838
00:28:05,279 --> 00:28:06,640
would be a great way to get that

839
00:28:06,640 --> 00:28:08,640
integration going cool

840
00:28:08,640 --> 00:28:11,440
all the information is there yeah yeah

841
00:28:11,440 --> 00:28:13,279
excellent thank you very much uh

842
00:28:13,279 --> 00:28:14,159
if you wanted to continue the

843
00:28:14,159 --> 00:28:16,480
conversation pl please feel uh more than

844
00:28:16,480 --> 00:28:17,279
welcome to

845
00:28:17,279 --> 00:28:20,559
to go into the cloud native uh track

846
00:28:20,559 --> 00:28:22,720
channel on slack and uh you're more than

847
00:28:22,720 --> 00:28:24,000
welcome to discuss

848
00:28:24,000 --> 00:28:27,840
thank you thank you very much

