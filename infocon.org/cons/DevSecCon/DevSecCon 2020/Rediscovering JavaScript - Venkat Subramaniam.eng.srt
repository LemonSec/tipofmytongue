1
00:00:00,000 --> 00:00:02,399
there we are hey banker how are you good

2
00:00:02,399 --> 00:00:04,380
seeing you good to see you as well now

3
00:00:04,380 --> 00:00:06,060
we would normally meet on a Java truck

4
00:00:06,060 --> 00:00:08,460
because my background is Java Venkat

5
00:00:08,460 --> 00:00:09,929
your background is well anything

6
00:00:09,929 --> 00:00:11,099
anything that you can do on a computer

7
00:00:11,099 --> 00:00:13,920
basically right it's you you cover a

8
00:00:13,920 --> 00:00:15,740
wide range of different ecosystems

9
00:00:15,740 --> 00:00:21,960
well time so research what can we see so

10
00:00:21,960 --> 00:00:24,150
for those who don't know Venkat Venkat

11
00:00:24,150 --> 00:00:27,750
is a very well renowned author speaker

12
00:00:27,750 --> 00:00:31,050
and actually won the one of the you know

13
00:00:31,050 --> 00:00:33,600
most humble and best humans around as

14
00:00:33,600 --> 00:00:34,340
well

15
00:00:34,340 --> 00:00:36,899
Venkat is their founder of agile

16
00:00:36,899 --> 00:00:39,210
developer you can catch a whole bunch of

17
00:00:39,210 --> 00:00:41,940
Venkat s-- sessions online as well as

18
00:00:41,940 --> 00:00:43,590
some of their courses and things like

19
00:00:43,590 --> 00:00:45,329
that they he does on agile developer so

20
00:00:45,329 --> 00:00:48,210
well well worth going to going to see

21
00:00:48,210 --> 00:00:50,340
more of what Venkat does if you haven't

22
00:00:50,340 --> 00:00:52,649
haven't heard him speak before so today

23
00:00:52,649 --> 00:00:53,730
Venkat you're gonna be talking about

24
00:00:53,730 --> 00:00:55,710
rediscovering JavaScript right so this

25
00:00:55,710 --> 00:00:57,989
is are we talking about people who who

26
00:00:57,989 --> 00:01:00,030
once did JavaScript then went away maybe

27
00:01:00,030 --> 00:01:02,250
to a better language like Java let's say

28
00:01:02,250 --> 00:01:03,960
and now they need to rediscover

29
00:01:03,960 --> 00:01:06,750
JavaScript well JavaScript itself has

30
00:01:06,750 --> 00:01:08,880
changed a lot over time and I want to

31
00:01:08,880 --> 00:01:10,619
talk about what's really new and nice

32
00:01:10,619 --> 00:01:19,259
and cool in JavaScript if you're able to

33
00:01:19,259 --> 00:01:21,030
see my screen awesome so let's get

34
00:01:21,030 --> 00:01:23,700
started thank you so hey everybody

35
00:01:23,700 --> 00:01:25,439
thanks for joining us I'm gonna talk

36
00:01:25,439 --> 00:01:27,150
about some amazing features in

37
00:01:27,150 --> 00:01:29,909
JavaScript well JavaScript was that very

38
00:01:29,909 --> 00:01:33,509
scary language once upon a time and it

39
00:01:33,509 --> 00:01:35,939
had several problems in it well but then

40
00:01:35,939 --> 00:01:38,640
a lot of clean up and modern JavaScript

41
00:01:38,640 --> 00:01:40,530
is very approachable and that's what I

42
00:01:40,530 --> 00:01:42,509
want to focus on today in the next about

43
00:01:42,509 --> 00:01:45,390
20 or so minutes behind with us so some

44
00:01:45,390 --> 00:01:46,950
of the beautiful features of JavaScript

45
00:01:46,950 --> 00:01:49,220
that I really have come to like are

46
00:01:49,220 --> 00:01:51,990
things that have include I introduced

47
00:01:51,990 --> 00:01:54,240
error and make it really pleasant to use

48
00:01:54,240 --> 00:01:55,920
the language but one of the things we

49
00:01:55,920 --> 00:01:57,180
have to be really careful about

50
00:01:57,180 --> 00:02:00,119
javascript is unlike languages like Java

51
00:02:00,119 --> 00:02:02,640
and a lot of other languages JavaScript

52
00:02:02,640 --> 00:02:05,490
doesn't have the luxury of deprecating

53
00:02:05,490 --> 00:02:07,469
features and the reason is there are

54
00:02:07,469 --> 00:02:09,780
going to be old browsers that are going

55
00:02:09,780 --> 00:02:12,120
to still process all the code you send

56
00:02:12,120 --> 00:02:13,410
towards them there

57
00:02:13,410 --> 00:02:16,050
a lot of old JavaScript that are thrown

58
00:02:16,050 --> 00:02:18,750
towards new browsers as well so from

59
00:02:18,750 --> 00:02:21,270
both points of view javascript cannot

60
00:02:21,270 --> 00:02:23,430
really simply say Oh out with the old in

61
00:02:23,430 --> 00:02:25,170
with the new that doesn't work in

62
00:02:25,170 --> 00:02:27,510
JavaScript it's for us to really use

63
00:02:27,510 --> 00:02:30,270
tools like es lint and make sure that we

64
00:02:30,270 --> 00:02:32,910
don't use features anymore that are not

65
00:02:32,910 --> 00:02:35,070
really good features one of them is a

66
00:02:35,070 --> 00:02:38,040
bar well bar is evil we don't want to

67
00:02:38,040 --> 00:02:40,410
use bar and thought has several problems

68
00:02:40,410 --> 00:02:43,170
in it for example if you take an example

69
00:02:43,170 --> 00:02:45,420
of a bar right here you can see the

70
00:02:45,420 --> 00:02:47,600
value is a hundred now why in the world

71
00:02:47,600 --> 00:02:51,720
would anyone redefine a variable that's

72
00:02:51,720 --> 00:02:54,330
being defined already but for allowed

73
00:02:54,330 --> 00:02:56,250
you to do that in the past which doesn't

74
00:02:56,250 --> 00:02:58,710
make any sense at all secondly vore had

75
00:02:58,710 --> 00:03:01,260
other problems as well for example in

76
00:03:01,260 --> 00:03:04,020
terms of not regarding block scoping

77
00:03:04,020 --> 00:03:06,810
well all that is gone now thankfully if

78
00:03:06,810 --> 00:03:09,330
we could using far and the

79
00:03:09,330 --> 00:03:11,760
recommendation is to use a Const as much

80
00:03:11,760 --> 00:03:14,130
as possible and you select otherwise

81
00:03:14,130 --> 00:03:16,170
let's quickly take a look at an example

82
00:03:16,170 --> 00:03:16,830
here

83
00:03:16,830 --> 00:03:19,590
so I say let max equal to hundred and

84
00:03:19,590 --> 00:03:21,900
I'm gonna say let max equal to one

85
00:03:21,900 --> 00:03:24,690
notice we get an error and the reason is

86
00:03:24,690 --> 00:03:27,720
we cannot be define a variable that's

87
00:03:27,720 --> 00:03:30,209
being defined already with the length of

88
00:03:30,209 --> 00:03:33,450
course you can read assign a value you

89
00:03:33,450 --> 00:03:35,940
just cannot read define a variable well

90
00:03:35,940 --> 00:03:37,920
that's cool so instead of using var we

91
00:03:37,920 --> 00:03:40,050
could use let but there's one problem

92
00:03:40,050 --> 00:03:43,470
with left as well so the recommendation

93
00:03:43,470 --> 00:03:48,720
is quit using bar well use let only if

94
00:03:48,720 --> 00:03:52,110
Const is not an options now Y is

95
00:03:52,110 --> 00:03:55,320
constant better well the reason is Const

96
00:03:55,320 --> 00:03:59,070
is the you know go-to syntax if you will

97
00:03:59,070 --> 00:04:01,620
for defining variables Y because a

98
00:04:01,620 --> 00:04:04,459
constant treats its variable as a

99
00:04:04,459 --> 00:04:07,590
constant with a little caveat here it is

100
00:04:07,590 --> 00:04:10,830
kind of like final in Java or it's kind

101
00:04:10,830 --> 00:04:13,709
of like read-only in c-sharp so in other

102
00:04:13,709 --> 00:04:16,108
words it only predicts that reference

103
00:04:16,108 --> 00:04:18,630
not the object itself but that's still

104
00:04:18,630 --> 00:04:21,000
really useful why so let's take a look

105
00:04:21,000 --> 00:04:23,580
at an example it was a factor equal to

106
00:04:23,580 --> 00:04:25,680
two right here and I'm going to create

107
00:04:25,680 --> 00:04:27,330
let's say of

108
00:04:27,330 --> 00:04:30,449
printed right there is equal to give an

109
00:04:30,449 --> 00:04:33,539
element I want a printout element x

110
00:04:33,539 --> 00:04:36,629
factor now I call the printed function

111
00:04:36,629 --> 00:04:38,969
right here if you will and I'm gonna

112
00:04:38,969 --> 00:04:41,699
pass let's say F for now we know that 4

113
00:04:41,699 --> 00:04:45,030
times 2 is 8 and so we can look at the

114
00:04:45,030 --> 00:04:47,580
output of what we see here it's 8 no

115
00:04:47,580 --> 00:04:50,219
surprise about it now what if I were to

116
00:04:50,219 --> 00:04:54,840
change factor to a 0 right here now the

117
00:04:54,840 --> 00:04:57,840
question is what is the output over here

118
00:04:57,840 --> 00:05:00,300
now you know I can't see you but I will

119
00:05:00,300 --> 00:05:02,009
assume you're virtually raising your

120
00:05:02,009 --> 00:05:02,400
hand

121
00:05:02,400 --> 00:05:05,159
Lissie hand if you think the output is

122
00:05:05,159 --> 00:05:07,800
still 8 well raise your hand if you

123
00:05:07,800 --> 00:05:10,590
think the output is gonna be 0 but raise

124
00:05:10,590 --> 00:05:14,120
your hand if you think boy I'm really

125
00:05:14,120 --> 00:05:17,280
confused well that's the camp I belong

126
00:05:17,280 --> 00:05:19,500
in I usually use this question as an

127
00:05:19,500 --> 00:05:21,539
interview question I would ask this

128
00:05:21,539 --> 00:05:23,639
question and if a candidate tries to

129
00:05:23,639 --> 00:05:26,520
answer they are fired already because

130
00:05:26,520 --> 00:05:29,009
the right answer is are you stupid

131
00:05:29,009 --> 00:05:31,139
well the reason is I don't want to write

132
00:05:31,139 --> 00:05:33,330
code like this on a write code that's

133
00:05:33,330 --> 00:05:36,060
maintainable no clearly we can run bet

134
00:05:36,060 --> 00:05:37,800
Cordillera and see what the result is

135
00:05:37,800 --> 00:05:40,080
but that's really not the point I don't

136
00:05:40,080 --> 00:05:41,849
want code that kind of makes me confused

137
00:05:41,849 --> 00:05:45,360
and wonder what's going on so what if I

138
00:05:45,360 --> 00:05:48,750
change this to a Const instant notice I

139
00:05:48,750 --> 00:05:51,690
get an error on line number 9 because I

140
00:05:51,690 --> 00:05:54,629
cannot modify the reference are the

141
00:05:54,629 --> 00:05:56,729
variable that's being defined as a

142
00:05:56,729 --> 00:06:00,000
constant so constant is your friend well

143
00:06:00,000 --> 00:06:01,650
this is a game where I would like to use

144
00:06:01,650 --> 00:06:03,810
tools like yes lint where I can

145
00:06:03,810 --> 00:06:06,569
configure it to say if I don't use a

146
00:06:06,569 --> 00:06:09,150
constant where it could be used give me

147
00:06:09,150 --> 00:06:11,819
an error so prefer constant as much as

148
00:06:11,819 --> 00:06:14,610
you can and use let only when conscious

149
00:06:14,610 --> 00:06:17,490
not an option and quit using part well

150
00:06:17,490 --> 00:06:19,379
likewise there are a few other

151
00:06:19,379 --> 00:06:21,569
interesting additional things that are

152
00:06:21,569 --> 00:06:23,639
replacing all things and one of them is

153
00:06:23,639 --> 00:06:26,460
arguments so what is an argument let's

154
00:06:26,460 --> 00:06:28,650
take a quick look here so let's say we

155
00:06:28,650 --> 00:06:31,889
have a function called max which is

156
00:06:31,889 --> 00:06:34,919
taking 8 and B and all I'm gonna do here

157
00:06:34,919 --> 00:06:38,370
is if a is greater than B I'm gonna

158
00:06:38,370 --> 00:06:41,160
output let's say a otherwise I

159
00:06:41,160 --> 00:06:43,680
go ahead and say output in this case oh

160
00:06:43,680 --> 00:06:47,040
let's say well it's called max with 1 &

161
00:06:47,040 --> 00:06:50,490
2 no surprise over here it said to what

162
00:06:50,490 --> 00:06:55,500
if I called Max with a 3 and 1 or 1 for

163
00:06:55,500 --> 00:06:58,050
example hey that's great also it worked

164
00:06:58,050 --> 00:07:02,490
but what if I said max with 4 and maybe

165
00:07:02,490 --> 00:07:05,220
a 12 and a 2

166
00:07:05,220 --> 00:07:07,920
well gosh that seems to work as well

167
00:07:07,920 --> 00:07:10,020
what just went but you know what went on

168
00:07:10,020 --> 00:07:10,500
here

169
00:07:10,500 --> 00:07:13,470
well JavaScript isn't complain if you

170
00:07:13,470 --> 00:07:16,020
give more arguments than the number of

171
00:07:16,020 --> 00:07:18,510
parameters that you have in a function

172
00:07:18,510 --> 00:07:21,390
why that's because JavaScript treats you

173
00:07:21,390 --> 00:07:23,880
like a guest in its house it doesn't say

174
00:07:23,880 --> 00:07:25,830
you're stupid it just kind of smiles

175
00:07:25,830 --> 00:07:28,500
away so but what really happened here is

176
00:07:28,500 --> 00:07:32,370
every single function in JavaScript is

177
00:07:32,370 --> 00:07:35,700
actually a var art function so in the

178
00:07:35,700 --> 00:07:38,460
case of Java C sharp C++ a lot of other

179
00:07:38,460 --> 00:07:40,590
languages you write functions that take

180
00:07:40,590 --> 00:07:42,870
you know specific number of arguments in

181
00:07:42,870 --> 00:07:45,420
one way and functions that take variable

182
00:07:45,420 --> 00:07:46,770
number of arguments in a different way

183
00:07:46,770 --> 00:07:49,620
in Java every function takes variable

184
00:07:49,620 --> 00:07:51,540
number of arguments so how do you really

185
00:07:51,540 --> 00:07:54,450
get to these arguments well the old way

186
00:07:54,450 --> 00:07:56,850
of doing it was to use what are called

187
00:07:56,850 --> 00:08:00,870
arguments well unfortunately though this

188
00:08:00,870 --> 00:08:03,810
had its own problems arguments were not

189
00:08:03,810 --> 00:08:06,390
really an array so you couldn't treat it

190
00:08:06,390 --> 00:08:08,130
as an array and you couldn't use the

191
00:08:08,130 --> 00:08:10,919
function of style code in here let's

192
00:08:10,919 --> 00:08:12,810
take a quick example of how we can write

193
00:08:12,810 --> 00:08:15,300
this code using arguments and refactor

194
00:08:15,300 --> 00:08:19,110
to be much better so let's say 1 & 3 and

195
00:08:19,110 --> 00:08:22,980
let's say 6 and oh maybe a 2 I don't

196
00:08:22,980 --> 00:08:24,990
know find what's the maximum of all of

197
00:08:24,990 --> 00:08:27,180
these and maybe I want to just return it

198
00:08:27,180 --> 00:08:29,730
so here's a way we could do this using

199
00:08:29,730 --> 00:08:32,130
arguments not a very pleasant way of

200
00:08:32,130 --> 00:08:34,530
doing it notice if I don't put anything

201
00:08:34,530 --> 00:08:36,929
here it actually takes very blunt of

202
00:08:36,929 --> 00:08:39,179
arguments so it's not very intuitive the

203
00:08:39,179 --> 00:08:42,059
code is not self-describing secondly we

204
00:08:42,059 --> 00:08:45,120
could say over here let arguments let's

205
00:08:45,120 --> 00:08:48,690
say large is equal to arguments of 0

206
00:08:48,690 --> 00:08:50,880
let's say me and eventually I want to

207
00:08:50,880 --> 00:08:53,430
return let's say the large in this

208
00:08:53,430 --> 00:08:54,810
particular case which is a

209
00:08:54,810 --> 00:08:56,880
one but that's not a right answer yet so

210
00:08:56,880 --> 00:08:59,640
then we can say far we could say let a

211
00:08:59,640 --> 00:09:02,520
you know an element okay in this case or

212
00:09:02,520 --> 00:09:05,670
maybe we could say like I equal to 0 I

213
00:09:05,670 --> 00:09:08,850
less say an argument start length

214
00:09:08,850 --> 00:09:11,070
oh what a boring way to write this code

215
00:09:11,070 --> 00:09:11,820
isn't it

216
00:09:11,820 --> 00:09:13,560
this is not going to invite any friends

217
00:09:13,560 --> 00:09:16,529
at all excuse me then we could say if

218
00:09:16,529 --> 00:09:20,970
large is let's say less than well

219
00:09:20,970 --> 00:09:24,450
arguments of I we could then say may be

220
00:09:24,450 --> 00:09:28,080
large in this case is equal to the

221
00:09:28,080 --> 00:09:31,230
arguments of I and we can find out what

222
00:09:31,230 --> 00:09:33,029
the largest again that's not very

223
00:09:33,029 --> 00:09:34,980
pleasant code to write but we could

224
00:09:34,980 --> 00:09:36,300
write the code like this

225
00:09:36,300 --> 00:09:38,880
so if large is less than so large

226
00:09:38,880 --> 00:09:42,320
started with the 0 and if large is

227
00:09:42,320 --> 00:09:45,870
excuse me less than arguments of I we

228
00:09:45,870 --> 00:09:48,720
want to say that large is equal to the

229
00:09:48,720 --> 00:09:51,120
value of arguments are high and kind of

230
00:09:51,120 --> 00:09:52,890
iterate through this and check for the

231
00:09:52,890 --> 00:09:56,550
value well obviously if the large is the

232
00:09:56,550 --> 00:09:58,620
value that we want to be large value and

233
00:09:58,620 --> 00:10:00,630
we want to be able to determine that now

234
00:10:00,630 --> 00:10:02,250
obviously that's still not working we

235
00:10:02,250 --> 00:10:03,810
could you know Spence I'm looking at it

236
00:10:03,810 --> 00:10:05,790
debugging it but why not simply he was a

237
00:10:05,790 --> 00:10:07,500
nice functional style be done with it

238
00:10:07,500 --> 00:10:10,620
and also arguments is not a array like

239
00:10:10,620 --> 00:10:12,660
you mentioned so if I were to say type

240
00:10:12,660 --> 00:10:16,220
off our arguments the instance of array

241
00:10:16,220 --> 00:10:18,930
notice that it says false it's not an

242
00:10:18,930 --> 00:10:21,360
array which is really unpleasant as you

243
00:10:21,360 --> 00:10:23,430
can see in this case now what can we do

244
00:10:23,430 --> 00:10:25,440
about all of this well c'mon I'm messing

245
00:10:25,440 --> 00:10:27,960
with all of that let's simply use what

246
00:10:27,960 --> 00:10:30,120
is called a vest for Monica so we can

247
00:10:30,120 --> 00:10:32,760
say in numbers over here now the good

248
00:10:32,760 --> 00:10:34,890
news about numbers tears because a

249
00:10:34,890 --> 00:10:37,680
number such a instance of array and

250
00:10:37,680 --> 00:10:40,170
notice it says true so that's a good

251
00:10:40,170 --> 00:10:42,240
news it's an array so you can treat it

252
00:10:42,240 --> 00:10:44,640
as an array which means I could do

253
00:10:44,640 --> 00:10:47,339
something like this number start reduce

254
00:10:47,339 --> 00:10:49,110
for example I'm a big fan of a

255
00:10:49,110 --> 00:10:51,570
functional style of coding we could say

256
00:10:51,570 --> 00:10:54,270
a large comma element and then we could

257
00:10:54,270 --> 00:10:57,810
simply say if large is less than the

258
00:10:57,810 --> 00:11:00,380
element then return the element

259
00:11:00,380 --> 00:11:03,420
otherwise I want to return may be the

260
00:11:03,420 --> 00:11:06,270
large value itself now notice how easy

261
00:11:06,270 --> 00:11:07,770
that was to write the code

262
00:11:07,770 --> 00:11:10,560
in the functional style and we can of

263
00:11:10,560 --> 00:11:12,300
course use a traditional far loop if we

264
00:11:12,300 --> 00:11:14,640
really wanted to but we not required to

265
00:11:14,640 --> 00:11:16,860
as you can see in this case so that's

266
00:11:16,860 --> 00:11:19,890
the rest parameter now obviously in this

267
00:11:19,890 --> 00:11:22,140
case that's not really nice but what if

268
00:11:22,140 --> 00:11:24,510
I really had an array to begin with

269
00:11:24,510 --> 00:11:27,510
so constant array is equal to let's say

270
00:11:27,510 --> 00:11:31,170
1 2 & 4 and I want to be able to call

271
00:11:31,170 --> 00:11:34,680
max with let's say array not quite what

272
00:11:34,680 --> 00:11:35,940
we wanted isn't it

273
00:11:35,940 --> 00:11:38,460
we really wanted a result before what

274
00:11:38,460 --> 00:11:39,450
went wrong here

275
00:11:39,450 --> 00:11:41,700
well because it's passing the array as a

276
00:11:41,700 --> 00:11:45,270
value but numbers itself is an array so

277
00:11:45,270 --> 00:11:47,850
it wrapped them away inside of an array

278
00:11:47,850 --> 00:11:50,280
that's not what we really wanted but

279
00:11:50,280 --> 00:11:51,780
what if I wanted to really do this

280
00:11:51,780 --> 00:11:53,910
correctly well we could try something

281
00:11:53,910 --> 00:11:57,900
like this we could try to really explode

282
00:11:57,900 --> 00:12:00,600
those values or spread those values as

283
00:12:00,600 --> 00:12:04,260
discrete values well that'd work but if

284
00:12:04,260 --> 00:12:05,790
I were to write code like this my

285
00:12:05,790 --> 00:12:08,340
comment would be I need another job

286
00:12:08,340 --> 00:12:10,740
that's boring well this is where the

287
00:12:10,740 --> 00:12:13,770
spread operator comes in so you can say

288
00:12:13,770 --> 00:12:16,680
max and then you can say arguments and

289
00:12:16,680 --> 00:12:18,240
call it wait a minute

290
00:12:18,240 --> 00:12:21,270
we use three dots here and three dots

291
00:12:21,270 --> 00:12:21,810
here

292
00:12:21,810 --> 00:12:24,450
what gives well sit back for a second

293
00:12:24,450 --> 00:12:28,860
what is plus plus is both a binary and a

294
00:12:28,860 --> 00:12:32,070
unary operator in programming isn't it

295
00:12:32,070 --> 00:12:35,640
similarly dot dot dot he's both a rest

296
00:12:35,640 --> 00:12:39,600
and a thread operator so it's a rest on

297
00:12:39,600 --> 00:12:42,750
the receiving end and it's a thread on

298
00:12:42,750 --> 00:12:45,540
the sending end hey our order and SS

299
00:12:45,540 --> 00:12:48,240
easy to remember rest on the receive and

300
00:12:48,240 --> 00:12:51,270
send on the spread on the send so this

301
00:12:51,270 --> 00:12:53,100
is a spring but what's really cool about

302
00:12:53,100 --> 00:12:55,800
spread is there are so many things you

303
00:12:55,800 --> 00:12:57,900
can do with it so you don't have to use

304
00:12:57,900 --> 00:13:00,900
a spread with the rest of the coin for

305
00:13:00,900 --> 00:13:03,810
example great name one common name to

306
00:13:03,810 --> 00:13:06,840
let's say over here output let's say

307
00:13:06,840 --> 00:13:10,590
hello and I'm going to say name one and

308
00:13:10,590 --> 00:13:14,340
let's say name to well if I want to call

309
00:13:14,340 --> 00:13:16,710
this I can say greet and I could say

310
00:13:16,710 --> 00:13:19,890
Jack comma Jill for example are still

311
00:13:19,890 --> 00:13:21,140
different values

312
00:13:21,140 --> 00:13:23,540
in here well that's great at work but

313
00:13:23,540 --> 00:13:26,480
what if I had a constant means equal to

314
00:13:26,480 --> 00:13:30,230
oh let's say Jack comma Jill already in

315
00:13:30,230 --> 00:13:32,269
a collection well look at the beauty of

316
00:13:32,269 --> 00:13:35,420
this you could call greet with names and

317
00:13:35,420 --> 00:13:37,730
you can use a spread right there as well

318
00:13:37,730 --> 00:13:39,890
but like spread is my second most

319
00:13:39,890 --> 00:13:41,750
favorite feature let's look at a couple

320
00:13:41,750 --> 00:13:43,550
of more things you can do with spread

321
00:13:43,550 --> 00:13:46,640
suppose you had in this case uh names as

322
00:13:46,640 --> 00:13:49,100
you saw here we'll call it names one

323
00:13:49,100 --> 00:13:51,440
what I want to call at constant Eames

324
00:13:51,440 --> 00:13:55,160
who let's say is equal to let's say in

325
00:13:55,160 --> 00:13:58,130
this case a Tom cometary of our other

326
00:13:58,130 --> 00:14:00,470
good friends we have so I want to be

327
00:14:00,470 --> 00:14:03,019
able to combine these two well we could

328
00:14:03,019 --> 00:14:06,200
say names one as an array we could

329
00:14:06,200 --> 00:14:09,649
explode that and then we could say names

330
00:14:09,649 --> 00:14:13,279
too and we could really combine the two

331
00:14:13,279 --> 00:14:16,490
arrays together if you will or you can

332
00:14:16,490 --> 00:14:18,470
even insert an element right in the

333
00:14:18,470 --> 00:14:20,720
middle like for example you could say

334
00:14:20,720 --> 00:14:23,329
spike over here and you could add

335
00:14:23,329 --> 00:14:25,730
another element to this collection if

336
00:14:25,730 --> 00:14:28,070
you really want to do very powerful as

337
00:14:28,070 --> 00:14:30,199
you can see similarly can use a spread

338
00:14:30,199 --> 00:14:33,260
operator for objects as well not just

339
00:14:33,260 --> 00:14:36,260
array very very powerful features as you

340
00:14:36,260 --> 00:14:39,470
can see similarly you also have a nice

341
00:14:39,470 --> 00:14:42,350
little default parameters given to us

342
00:14:42,350 --> 00:14:44,480
all so let me cut on default really

343
00:14:44,480 --> 00:14:47,510
quickly so constant greet equals to

344
00:14:47,510 --> 00:14:50,029
let's say a function will call it as

345
00:14:50,029 --> 00:14:52,940
name and I want to simply say output

346
00:14:52,940 --> 00:14:55,640
hello and then I'm going to provide the

347
00:14:55,640 --> 00:14:58,100
name given to us so we could say for

348
00:14:58,100 --> 00:15:01,339
example something along the lines of oh

349
00:15:01,339 --> 00:15:05,480
we could say greet let's say Sarah here

350
00:15:05,480 --> 00:15:08,240
and call this function now obviously it

351
00:15:08,240 --> 00:15:10,370
says hello Sarah but what if we want to

352
00:15:10,370 --> 00:15:12,860
give a message when we call this maybe

353
00:15:12,860 --> 00:15:15,170
we can say hello insert up that we want

354
00:15:15,170 --> 00:15:17,660
to say yeah hi how do you pass suddenly

355
00:15:17,660 --> 00:15:20,990
a second parameter called hi well if you

356
00:15:20,990 --> 00:15:23,230
were to come and change this to a

357
00:15:23,230 --> 00:15:26,360
smedium message and if you change this

358
00:15:26,360 --> 00:15:29,180
to a dollar message this is not going to

359
00:15:29,180 --> 00:15:31,610
go really well because of the first line

360
00:15:31,610 --> 00:15:34,560
for existing code is going to say

361
00:15:34,560 --> 00:15:36,749
Dussehra well sir I just fun friended

362
00:15:36,749 --> 00:15:38,579
you on Facebook that's not a nice way to

363
00:15:38,579 --> 00:15:40,589
treat anybody well how do you deal with

364
00:15:40,589 --> 00:15:43,350
this well what you can do here is you

365
00:15:43,350 --> 00:15:47,009
can give a default value of hello so the

366
00:15:47,009 --> 00:15:48,779
old code our existing code still works

367
00:15:48,779 --> 00:15:51,329
as it's supposed to and you can use a

368
00:15:51,329 --> 00:15:54,259
new parameter not only that these can be

369
00:15:54,259 --> 00:15:57,120
expressions as well so this could become

370
00:15:57,120 --> 00:15:59,819
an expression if you will and that

371
00:15:59,819 --> 00:16:01,410
expression could actually use the

372
00:16:01,410 --> 00:16:03,990
previous parameter in the expression if

373
00:16:03,990 --> 00:16:05,970
you want to make it a lot more flexible

374
00:16:05,970 --> 00:16:08,790
very powerful as you can see and finally

375
00:16:08,790 --> 00:16:10,709
on this note I will touch on and

376
00:16:10,709 --> 00:16:13,589
enhanced for-loop as well so if you have

377
00:16:13,589 --> 00:16:16,649
a collection of names equal to let's say

378
00:16:16,649 --> 00:16:19,470
Tom comma Jerry well you don't have to

379
00:16:19,470 --> 00:16:22,709
really use the old for loop the boring

380
00:16:22,709 --> 00:16:26,399
like I equal to zero I less man syntax

381
00:16:26,399 --> 00:16:29,970
you could write a very fluent syntax for

382
00:16:29,970 --> 00:16:32,550
example you could say a constant hey

383
00:16:32,550 --> 00:16:36,300
what a relief name of names and simply

384
00:16:36,300 --> 00:16:39,029
print out a name right there and of

385
00:16:39,029 --> 00:16:40,709
course what about the index if you

386
00:16:40,709 --> 00:16:43,170
really wanted to get the index this is

387
00:16:43,170 --> 00:16:45,720
where he can mix destructuring with this

388
00:16:45,720 --> 00:16:49,379
as well so you can say entries over here

389
00:16:49,379 --> 00:16:53,040
and then you can be structure into it by

390
00:16:53,040 --> 00:16:56,220
simply providing an I comma name and you

391
00:16:56,220 --> 00:16:58,740
can see that you can get the index value

392
00:16:58,740 --> 00:17:02,910
and also you can get the value in the

393
00:17:02,910 --> 00:17:06,720
particular index as well very easily by

394
00:17:06,720 --> 00:17:10,230
using a very nice little syntax of or D

395
00:17:10,230 --> 00:17:13,289
structuring if you will along with the

396
00:17:13,289 --> 00:17:15,959
fluent enhanced for-loop so makes life

397
00:17:15,959 --> 00:17:18,929
really a pleasant to work with well

398
00:17:18,929 --> 00:17:20,819
quickly arrow functions are pretty

399
00:17:20,819 --> 00:17:23,010
awesome they reduce the burden of

400
00:17:23,010 --> 00:17:24,929
writing functions you gotta be careful

401
00:17:24,929 --> 00:17:27,359
the semantical mismatch between regular

402
00:17:27,359 --> 00:17:29,220
functions and arrow functions I would

403
00:17:29,220 --> 00:17:31,409
have time to go through them in here but

404
00:17:31,409 --> 00:17:33,210
something to take a look at you already

405
00:17:33,210 --> 00:17:35,850
saw me use template literals quite a bit

406
00:17:35,850 --> 00:17:38,549
so those are template literals which I

407
00:17:38,549 --> 00:17:41,010
love you to expand expressions while

408
00:17:41,010 --> 00:17:43,260
you're creating strings and keep in mind

409
00:17:43,260 --> 00:17:45,570
these are back pics are not really a

410
00:17:45,570 --> 00:17:48,270
single quote or a double quote and

411
00:17:48,270 --> 00:17:50,670
opteka trolls are really useful as well

412
00:17:50,670 --> 00:17:53,970
and in that you can really you create an

413
00:17:53,970 --> 00:17:57,210
object very easily by tying a local

414
00:17:57,210 --> 00:18:00,240
variable to a property very nicely so

415
00:18:00,240 --> 00:18:03,030
for example if I had a name is equal to

416
00:18:03,030 --> 00:18:05,760
let's say in this case same and if I

417
00:18:05,760 --> 00:18:09,090
also had a constant age is equal to 2

418
00:18:09,090 --> 00:18:10,950
and if I really wanted to create a

419
00:18:10,950 --> 00:18:14,430
person is equal to name is name let's

420
00:18:14,430 --> 00:18:17,520
say and then I'm gonna say age is equal

421
00:18:17,520 --> 00:18:20,040
to age well these are local variables

422
00:18:20,040 --> 00:18:23,550
being tied to a proper B but you don't

423
00:18:23,550 --> 00:18:25,680
have to really go that route you can

424
00:18:25,680 --> 00:18:28,230
simply remove those and nicely use an

425
00:18:28,230 --> 00:18:30,120
object literal well this may not make

426
00:18:30,120 --> 00:18:32,160
sense in a simple example like this but

427
00:18:32,160 --> 00:18:34,500
when used with the structuring it can be

428
00:18:34,500 --> 00:18:37,110
really powerful so what is d structuring

429
00:18:37,110 --> 00:18:39,540
in under a minute be structurally is one

430
00:18:39,540 --> 00:18:42,360
of my favorite features in JavaScript

431
00:18:42,360 --> 00:18:45,480
you can nicely extract properties from

432
00:18:45,480 --> 00:18:48,030
objects if you will so for example if I

433
00:18:48,030 --> 00:18:50,850
have an array let's say in this case 1 2

434
00:18:50,850 --> 00:18:51,630
& 3

435
00:18:51,630 --> 00:18:53,910
well what if I want to get the values of

436
00:18:53,910 --> 00:18:56,460
the array you could say first is equal

437
00:18:56,460 --> 00:18:59,400
to arrays 0 for example and you can say

438
00:18:59,400 --> 00:19:04,290
a third is equal to RA 2 you could get

439
00:19:04,290 --> 00:19:06,090
the values like this and then you could

440
00:19:06,090 --> 00:19:08,130
print the first if you will and you

441
00:19:08,130 --> 00:19:11,280
could print B a third one here as well

442
00:19:11,280 --> 00:19:13,890
but that's kind of boring isn't it well

443
00:19:13,890 --> 00:19:17,640
you can simply say comma second comma

444
00:19:17,640 --> 00:19:21,170
third like this and then you can simply

445
00:19:21,170 --> 00:19:23,970
restructure read an array into those

446
00:19:23,970 --> 00:19:24,510
deals

447
00:19:24,510 --> 00:19:27,360
what if I don't care about the second in

448
00:19:27,360 --> 00:19:29,910
reality well you don't have to really

449
00:19:29,910 --> 00:19:32,070
just put a little comma and as a

450
00:19:32,070 --> 00:19:35,220
placeholder and you can get that or what

451
00:19:35,220 --> 00:19:37,860
if you want to get everything else and I

452
00:19:37,860 --> 00:19:40,500
can say all else and use a spread and

453
00:19:40,500 --> 00:19:43,260
get everything else into it as well

454
00:19:43,260 --> 00:19:45,150
there isn't that pretty awesome

455
00:19:45,150 --> 00:19:47,610
well that is B structuring and you can

456
00:19:47,610 --> 00:19:49,620
do the similar things with objects as

457
00:19:49,620 --> 00:19:51,900
well and then finally just to quickly

458
00:19:51,900 --> 00:19:55,470
mention about classes well it used to be

459
00:19:55,470 --> 00:19:57,690
really a pain in the neck to create

460
00:19:57,690 --> 00:20:01,500
classes in JavaScript now it feels

461
00:20:01,500 --> 00:20:05,180
like wiping Java code so class car

462
00:20:05,180 --> 00:20:07,890
constructor and in this case I'm gonna

463
00:20:07,890 --> 00:20:10,890
take a year and I'll say this doc year

464
00:20:10,890 --> 00:20:14,340
equal to year and set the value when I

465
00:20:14,340 --> 00:20:17,040
can say for example this dart kilometer

466
00:20:17,040 --> 00:20:19,860
is equal to zero as well but then I can

467
00:20:19,860 --> 00:20:22,530
write a function called distance this is

468
00:20:22,530 --> 00:20:24,300
going to simply return let's say this

469
00:20:24,300 --> 00:20:28,650
dart km well constant car equal to new

470
00:20:28,650 --> 00:20:32,250
car let's say 2020 and then I'm gonna

471
00:20:32,250 --> 00:20:34,650
simply output car dog distance as a

472
00:20:34,650 --> 00:20:36,990
function but what if I don't want the

473
00:20:36,990 --> 00:20:38,790
function I want to treat it like a

474
00:20:38,790 --> 00:20:41,490
property well unlike Java where

475
00:20:41,490 --> 00:20:43,440
properties are not implemented in an

476
00:20:43,440 --> 00:20:45,870
elegant way JavaScript does something

477
00:20:45,870 --> 00:20:48,420
like c-sharp you can write a proper be

478
00:20:48,420 --> 00:20:51,930
using a get and as a result you treat it

479
00:20:51,930 --> 00:20:54,570
like it's a field but it's actually a

480
00:20:54,570 --> 00:20:57,150
function that executes behind the scenes

481
00:20:57,150 --> 00:21:00,030
so you can perform logic in determining

482
00:21:00,030 --> 00:21:03,390
that value as well very powerful so to

483
00:21:03,390 --> 00:21:05,670
summarize what we talked about here a

484
00:21:05,670 --> 00:21:08,310
very powerful set of features as you can

485
00:21:08,310 --> 00:21:11,430
see that gives us the ability to write

486
00:21:11,430 --> 00:21:14,040
code if with greater fluency greater

487
00:21:14,040 --> 00:21:16,260
elegance and and makes of her life

488
00:21:16,260 --> 00:21:19,290
really easy and reduces a lot of errors

489
00:21:19,290 --> 00:21:22,320
so JavaScript has come a long way and it

490
00:21:22,320 --> 00:21:25,020
almost feels right when we write code in

491
00:21:25,020 --> 00:21:27,450
JavaScript it is definitely a language I

492
00:21:27,450 --> 00:21:31,020
have been fearful in the past but in all

493
00:21:31,020 --> 00:21:33,690
honesty if I can say aloud it's a

494
00:21:33,690 --> 00:21:35,370
language I've started to fall in love

495
00:21:35,370 --> 00:21:37,740
with over the past few years and and I

496
00:21:37,740 --> 00:21:40,050
definitely enjoy it hope that was useful

497
00:21:40,050 --> 00:21:42,750
I would be delighted to listen to some

498
00:21:42,750 --> 00:21:45,420
of your questions or comments if you

499
00:21:45,420 --> 00:21:50,460
have any summon if you want to look at

500
00:21:50,460 --> 00:21:53,460
the questions for me sorry I was on I

501
00:21:53,460 --> 00:21:54,870
was always on me

502
00:21:54,870 --> 00:21:56,970
thank you very much Vanko always amazed

503
00:21:56,970 --> 00:21:59,910
at the how fluent you are and switching

504
00:21:59,910 --> 00:22:01,200
between languages and things like that

505
00:22:01,200 --> 00:22:04,500
but awesome I guess my first my first

506
00:22:04,500 --> 00:22:09,009
question you said you're almost enjoying

507
00:22:09,009 --> 00:22:12,200
JavaScript's upright like that right yep

508
00:22:12,200 --> 00:22:14,419
what's the what's the bit you need do

509
00:22:14,419 --> 00:22:16,970
you feel that that will make you enjoy

510
00:22:16,970 --> 00:22:20,690
it what so javascript is a dynamically

511
00:22:20,690 --> 00:22:23,570
typed language and one of my concerns

512
00:22:23,570 --> 00:22:25,849
often time is you don't have to support

513
00:22:25,849 --> 00:22:29,960
off compile time verification now you

514
00:22:29,960 --> 00:22:32,119
know I'm a big fan of automated testing

515
00:22:32,119 --> 00:22:34,460
so I write tests and write code but a

516
00:22:34,460 --> 00:22:38,119
lot of times I do feel like an early you

517
00:22:38,119 --> 00:22:41,119
know ever a fail fast is much better as

518
00:22:41,119 --> 00:22:43,399
much as I want to see my test fail if I

519
00:22:43,399 --> 00:22:45,379
make a mistake I would rather get that

520
00:22:45,379 --> 00:22:48,169
failure before I run that test itself

521
00:22:48,169 --> 00:22:50,330
that's a little part you know I wish

522
00:22:50,330 --> 00:22:52,609
there were a better way to to handle

523
00:22:52,609 --> 00:22:55,099
that but again you lose some who gained

524
00:22:55,099 --> 00:22:57,619
some as well so it's really a balance at

525
00:22:57,619 --> 00:23:02,059
the point awesome so first questions

526
00:23:02,059 --> 00:23:03,979
straight away which is always the

527
00:23:03,979 --> 00:23:05,749
question which you tend to get when I

528
00:23:05,749 --> 00:23:08,479
when when I hear you speaking what is

529
00:23:08,479 --> 00:23:10,729
the idea you're using it's textmate

530
00:23:10,729 --> 00:23:14,179
right yes it is textmate and if people

531
00:23:14,179 --> 00:23:16,940
want to know how to configure this it's

532
00:23:16,940 --> 00:23:20,090
a free presentation I have on agile

533
00:23:20,090 --> 00:23:23,269
learner calm and go to agile owner calm

534
00:23:23,269 --> 00:23:25,369
and tight textmate and you can look at

535
00:23:25,369 --> 00:23:27,379
the free presentation or people can ask

536
00:23:27,379 --> 00:23:30,379
the question for that on Twitter or by

537
00:23:30,379 --> 00:23:32,210
email and I'll be more than happy to

538
00:23:32,210 --> 00:23:33,679
send the link to help you set yourself

539
00:23:33,679 --> 00:23:35,809
you can set this up for JavaScript Java

540
00:23:35,809 --> 00:23:38,450
Python almost any language I program in

541
00:23:38,450 --> 00:23:42,499
I use the same set oh I'm sorry I don't

542
00:23:42,499 --> 00:23:46,009
learn it oh that's why I dono calm and

543
00:23:46,009 --> 00:23:48,320
this type text made on them you I'll

544
00:23:48,320 --> 00:23:51,529
I'll drop that drop that link into into

545
00:23:51,529 --> 00:23:55,129
the chat as well so Ryan is asking in in

546
00:23:55,129 --> 00:23:56,720
slack Ryan asks when choosing the

547
00:23:56,720 --> 00:23:57,979
language for a new project

548
00:23:57,979 --> 00:24:00,320
DJ's jobs could ever typed script given

549
00:24:00,320 --> 00:24:01,970
the choice yeah so that's a really good

550
00:24:01,970 --> 00:24:05,239
question and you know in all honesty I

551
00:24:05,239 --> 00:24:09,559
am perfectly comfortable with JavaScript

552
00:24:09,559 --> 00:24:12,019
and I mentioned that you know compiler

553
00:24:12,019 --> 00:24:13,639
check would be nice to have that's one

554
00:24:13,639 --> 00:24:15,109
of the things that pipes would gives you

555
00:24:15,109 --> 00:24:17,029
but at the same time remember that

556
00:24:17,029 --> 00:24:19,729
typescript compiles down to JavaScript

557
00:24:19,729 --> 00:24:21,799
and and there are a few rough edges

558
00:24:21,799 --> 00:24:22,730
around

559
00:24:22,730 --> 00:24:24,200
and types tube does have a few

560
00:24:24,200 --> 00:24:25,640
interesting features that you know

561
00:24:25,640 --> 00:24:27,260
JavaScript doesn't have but I should

562
00:24:27,260 --> 00:24:28,549
also doesn't have a few things that

563
00:24:28,549 --> 00:24:30,679
JavaScript cast so on the balance I

564
00:24:30,679 --> 00:24:32,720
generally tend to stay with JavaScript

565
00:24:32,720 --> 00:24:35,480
most of the time I just don't feel the

566
00:24:35,480 --> 00:24:38,030
need personally for typescript even

567
00:24:38,030 --> 00:24:39,590
though the compiler support can be

568
00:24:39,590 --> 00:24:42,049
really useful but but that has not drawn

569
00:24:42,049 --> 00:24:44,330
me towards that I know both the

570
00:24:44,330 --> 00:24:46,640
languages fairly well but I tend to

571
00:24:46,640 --> 00:24:48,080
really stick to JavaScript most of the

572
00:24:48,080 --> 00:24:50,540
time most and yeah John actually just

573
00:24:50,540 --> 00:24:51,980
mentioned as well regarding that your

574
00:24:51,980 --> 00:24:55,280
concerns with JavaScript typescript does

575
00:24:55,280 --> 00:24:57,410
give you that kind of compile time

576
00:24:57,410 --> 00:24:59,390
insurance as well which is similar to we

577
00:24:59,390 --> 00:25:01,700
just said like well yeah another

578
00:25:01,700 --> 00:25:04,370
question from Naveen what are the new

579
00:25:04,370 --> 00:25:06,410
features that you expect JavaScript to

580
00:25:06,410 --> 00:25:07,549
support which it doesn't currently

581
00:25:07,549 --> 00:25:10,580
support oh there are languages if while

582
00:25:10,580 --> 00:25:13,669
being quite a bit and and there are a

583
00:25:13,669 --> 00:25:16,100
lot of things that were happening I I'm

584
00:25:16,100 --> 00:25:18,830
not sure if I like everything they are

585
00:25:18,830 --> 00:25:21,799
supporting or are planning to support

586
00:25:21,799 --> 00:25:24,470
again you know it's a future I don't

587
00:25:24,470 --> 00:25:26,090
know what the future is it depends on

588
00:25:26,090 --> 00:25:27,890
how things they ball a lot of things are

589
00:25:27,890 --> 00:25:30,590
fluid there are there are a lot of

590
00:25:30,590 --> 00:25:32,720
features that are in different languages

591
00:25:32,720 --> 00:25:34,490
I'm a huge fan of languages like you

592
00:25:34,490 --> 00:25:38,750
know Scala Cartland Python Haskell you

593
00:25:38,750 --> 00:25:41,419
know if JavaScript can provide lays

594
00:25:41,419 --> 00:25:43,669
evaluations don't be something really

595
00:25:43,669 --> 00:25:46,370
awesome that would be you know pushing

596
00:25:46,370 --> 00:25:47,870
us towards you know Thomas had

597
00:25:47,870 --> 00:25:50,000
functional style of coding for a long

598
00:25:50,000 --> 00:25:51,799
time but it's not a functional language

599
00:25:51,799 --> 00:25:54,500
by any stretch of imagination if I if I

600
00:25:54,500 --> 00:25:56,000
were to work for one thing

601
00:25:56,000 --> 00:26:03,950
laziness would be awesome sorry

602
00:26:03,950 --> 00:26:08,330
have you tried j/s doc in in i des which

603
00:26:08,330 --> 00:26:11,480
is to provide you some additional

604
00:26:11,480 --> 00:26:14,030
support there which maybe maybe you can

605
00:26:14,030 --> 00:26:16,429
usually yeah if that request me to use

606
00:26:16,429 --> 00:26:23,240
ideas and I still refer if you stuck

607
00:26:23,240 --> 00:26:25,970
between an IDE and slack with you which

608
00:26:25,970 --> 00:26:28,870
direction would you tell

609
00:26:30,500 --> 00:26:33,900
[Laughter]

610
00:26:34,520 --> 00:26:35,810
okay so I think there's no more

611
00:26:35,810 --> 00:26:38,840
questions on our slide I think there's a

612
00:26:38,840 --> 00:26:41,300
number of people typing in slack here we

613
00:26:41,300 --> 00:26:43,030
go

614
00:26:43,030 --> 00:26:45,770
okay venca here's a good one from and

615
00:26:45,770 --> 00:26:47,870
this is Naveen again what's your opinion

616
00:26:47,870 --> 00:26:50,030
on JavaScript over Java on the server

617
00:26:50,030 --> 00:26:51,290
side so I guess we're mostly talking

618
00:26:51,290 --> 00:26:55,400
about node here no js' yeah and and yeah

619
00:26:55,400 --> 00:26:57,140
a couple of people say fiber also says

620
00:26:57,140 --> 00:26:58,850
that's it that's also going to interest

621
00:26:58,850 --> 00:27:01,310
them as well in terms of what you would

622
00:27:01,310 --> 00:27:02,780
what you would pick on the service oh

623
00:27:02,780 --> 00:27:05,690
yes so so the you know I'll generalize

624
00:27:05,690 --> 00:27:08,030
this to any language question I normally

625
00:27:08,030 --> 00:27:13,010
get as I is 15 different languages and I

626
00:27:13,010 --> 00:27:15,260
often say that I change languages like I

627
00:27:15,260 --> 00:27:17,930
changed my shirt or our underwear for

628
00:27:17,930 --> 00:27:19,490
that matter doesn't really matter

629
00:27:19,490 --> 00:27:22,820
well but the point really is it really

630
00:27:22,820 --> 00:27:25,790
comes down to that environment if I have

631
00:27:25,790 --> 00:27:28,940
a lot of Java code I have to talk to if

632
00:27:28,940 --> 00:27:31,760
I have to talk to the JVM libraries and

633
00:27:31,760 --> 00:27:34,310
installations yes absolutely I will use

634
00:27:34,310 --> 00:27:37,100
Java for that purpose if my team is

635
00:27:37,100 --> 00:27:40,190
extremely comfortable with Java or if I

636
00:27:40,190 --> 00:27:43,730
really need a you know think of a much

637
00:27:43,730 --> 00:27:46,250
beyond that design by contract versus

638
00:27:46,250 --> 00:27:48,800
designed by capability a statically

639
00:27:48,800 --> 00:27:51,110
typed language like Java gives you

640
00:27:51,110 --> 00:27:53,750
design by contract dynamic type

641
00:27:53,750 --> 00:27:55,220
languages give you designed by

642
00:27:55,220 --> 00:27:57,890
capability and and these two are you

643
00:27:57,890 --> 00:27:59,630
know two different approaches to doing

644
00:27:59,630 --> 00:28:01,970
things and and either attending

645
00:28:01,970 --> 00:28:04,760
server-side code in languages like Java

646
00:28:04,760 --> 00:28:07,250
I've also written server-side code in

647
00:28:07,250 --> 00:28:09,830
dynamic type languages and if I have a

648
00:28:09,830 --> 00:28:12,530
really good amount of discipline with

649
00:28:12,530 --> 00:28:15,020
automated testing then I don't have a

650
00:28:15,020 --> 00:28:17,540
fear to go back and forth between them

651
00:28:17,540 --> 00:28:20,630
and so my usual decision is you know the

652
00:28:20,630 --> 00:28:23,900
team the environment the libraries have

653
00:28:23,900 --> 00:28:26,330
to integrate with it back it is not just

654
00:28:26,330 --> 00:28:28,160
a single entity there's a lot of stuff I

655
00:28:28,160 --> 00:28:30,050
have to integrate with and that that

656
00:28:30,050 --> 00:28:32,150
makes a decision if it's a greenfield

657
00:28:32,150 --> 00:28:34,580
project I don't have much to depend on I

658
00:28:34,580 --> 00:28:37,340
would then say hey you know pick your a

659
00:28:37,340 --> 00:28:39,260
choice based on your preference if it's

660
00:28:39,260 --> 00:28:41,240
not a greenfield that environment

661
00:28:41,240 --> 00:28:42,920
usually dictates where you have to go I

662
00:28:42,920 --> 00:28:44,960
know that's a non-committal answer I

663
00:28:44,960 --> 00:28:46,730
normally don't want to say big this and

664
00:28:46,730 --> 00:28:49,370
I definitely don't ever you know say

665
00:28:49,370 --> 00:28:51,440
that in public to say that's what you

666
00:28:51,440 --> 00:28:52,880
have to do because I would be really

667
00:28:52,880 --> 00:28:55,090
naive to make such a recommendation

668
00:28:55,090 --> 00:28:57,770
awesome there's another question in

669
00:28:57,770 --> 00:29:02,179
slack but if I ask just in with timing

670
00:29:02,179 --> 00:29:03,890
in mind for the next talk if you

671
00:29:03,890 --> 00:29:05,990
wouldn't mind going into slack and I

672
00:29:05,990 --> 00:29:07,640
apologize but going into slack for a

673
00:29:07,640 --> 00:29:09,559
short time and and answering that

674
00:29:09,559 --> 00:29:12,440
that'll be awesome thank the mask thank

675
00:29:12,440 --> 00:29:13,850
you again thank you for supporting this

676
00:29:13,850 --> 00:29:16,070
great cause and we really appreciate

677
00:29:16,070 --> 00:29:18,140
your time if you want to hear more from

678
00:29:18,140 --> 00:29:20,299
Venkat and you should you should go to

679
00:29:20,299 --> 00:29:23,000
agile learner comm for more great

680
00:29:23,000 --> 00:29:25,340
content from from Poquette thank you so

681
00:29:25,340 --> 00:29:26,600
much everybody

682
00:29:26,600 --> 00:29:29,529
it's me teasing

