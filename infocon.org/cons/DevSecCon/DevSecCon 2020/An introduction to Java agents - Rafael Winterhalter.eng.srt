1
00:00:00,080 --> 00:00:02,320
we're on the java track will be uh

2
00:00:02,320 --> 00:00:03,280
raphael

3
00:00:03,280 --> 00:00:06,560
um raphael you can uh raphael winterhalt

4
00:00:06,560 --> 00:00:08,800
is that the right pronunciation it's not

5
00:00:08,800 --> 00:00:09,679
german

6
00:00:09,679 --> 00:00:17,520
really good it's german yeah so um

7
00:00:17,520 --> 00:00:19,680
well sometimes my my high school german

8
00:00:19,680 --> 00:00:21,439
comes comes back a little

9
00:00:21,439 --> 00:00:23,920
anyway um without further ado it's uh

10
00:00:23,920 --> 00:00:26,240
it's a quarter past i want to give the

11
00:00:26,240 --> 00:00:28,160
stage to raphael if you can share your

12
00:00:28,160 --> 00:00:30,240
screen i will blend it in for you

13
00:00:30,240 --> 00:00:32,800
give it a go

14
00:00:33,920 --> 00:00:37,840
summer screen here and see you

15
00:00:37,840 --> 00:00:39,680
i see your screen coming up i will

16
00:00:39,680 --> 00:00:41,680
mingle it in and we see it over there

17
00:00:41,680 --> 00:00:44,320
let's go all right so yeah thanks for

18
00:00:44,320 --> 00:00:45,280
having me first of all

19
00:00:45,280 --> 00:00:48,480
i'm glad to be at the conference again

20
00:00:48,480 --> 00:00:51,440
i'm starting to miss it and it's good we

21
00:00:51,440 --> 00:00:53,120
can come together and collect some money

22
00:00:53,120 --> 00:00:54,879
for the real show now that it's very

23
00:00:54,879 --> 00:00:55,440
needless

24
00:00:55,440 --> 00:00:58,800
i guess more than before um

25
00:00:58,800 --> 00:01:00,800
yeah and i'm giving a talk i was

26
00:01:00,800 --> 00:01:02,239
supposed to give

27
00:01:02,239 --> 00:01:05,920
pretty soon again about java agents

28
00:01:05,920 --> 00:01:08,240
which is what i work with the most i'm

29
00:01:08,240 --> 00:01:09,520
the author behind a

30
00:01:09,520 --> 00:01:12,479
library called bite body which is mainly

31
00:01:12,479 --> 00:01:13,760
meant for code manipulation and

32
00:01:13,760 --> 00:01:15,520
generation and also for java agent

33
00:01:15,520 --> 00:01:17,119
generation and what i want to do today

34
00:01:17,119 --> 00:01:18,080
with you in just

35
00:01:18,080 --> 00:01:20,240
half an hour um as you see from the

36
00:01:20,240 --> 00:01:22,400
title i i can't do the definitive

37
00:01:22,400 --> 00:01:23,840
guide to java agents for the

38
00:01:23,840 --> 00:01:25,759
introductory one i want to explain to

39
00:01:25,759 --> 00:01:26,960
you what java agents are

40
00:01:26,960 --> 00:01:29,600
um also explain to you what they can do

41
00:01:29,600 --> 00:01:31,119
and what they are used uh

42
00:01:31,119 --> 00:01:33,759
for i'm sure any of you have has used

43
00:01:33,759 --> 00:01:35,600
the java agent in some

44
00:01:35,600 --> 00:01:37,920
regards before i try to create an

45
00:01:37,920 --> 00:01:39,840
understanding of what they can do what

46
00:01:39,840 --> 00:01:41,600
they do and what kind of

47
00:01:41,600 --> 00:01:43,119
implications that has for the

48
00:01:43,119 --> 00:01:44,720
applications you're on and how you can

49
00:01:44,720 --> 00:01:47,759
develop one yourself so we start with

50
00:01:47,759 --> 00:01:49,360
the most basic question which is

51
00:01:49,360 --> 00:01:52,840
what is a java agent and a java agent

52
00:01:52,840 --> 00:01:55,680
is nothing more like if you

53
00:01:55,680 --> 00:01:58,399
consider a main method we all know

54
00:01:58,399 --> 00:02:00,000
that's an entry point to a java

55
00:02:00,000 --> 00:02:02,159
java application a java agent is

56
00:02:02,159 --> 00:02:03,439
basically an extension of

57
00:02:03,439 --> 00:02:06,799
this entry mechanism so while we can

58
00:02:06,799 --> 00:02:08,160
specify a main class

59
00:02:08,160 --> 00:02:11,520
in a jar file java agent this is the

60
00:02:11,520 --> 00:02:12,959
same more or less but instead of

61
00:02:12,959 --> 00:02:15,200
specifying a main class as a main method

62
00:02:15,200 --> 00:02:17,680
you specify a pre-main class

63
00:02:17,680 --> 00:02:20,400
with a pre-main method and by running

64
00:02:20,400 --> 00:02:21,280
this

65
00:02:21,280 --> 00:02:24,000
premium method you can basically extend

66
00:02:24,000 --> 00:02:25,360
any java program

67
00:02:25,360 --> 00:02:27,680
by additional code but you can deliver

68
00:02:27,680 --> 00:02:29,760
this agent an additional artifact so

69
00:02:29,760 --> 00:02:31,599
it doesn't have to be blended with the

70
00:02:31,599 --> 00:02:33,120
application you actually write into this

71
00:02:33,120 --> 00:02:35,120
while it's popular with tool vendors

72
00:02:35,120 --> 00:02:37,680
basically um you can add something to

73
00:02:37,680 --> 00:02:38,959
your application that for example

74
00:02:38,959 --> 00:02:40,800
monitor something or add some

75
00:02:40,800 --> 00:02:43,120
some logging some setup of some sort

76
00:02:43,120 --> 00:02:44,959
without having to compile these two

77
00:02:44,959 --> 00:02:46,560
artifacts together

78
00:02:46,560 --> 00:02:48,480
you can have several of those they will

79
00:02:48,480 --> 00:02:49,920
just be executed in the order you

80
00:02:49,920 --> 00:02:51,920
specify them

81
00:02:51,920 --> 00:02:54,080
even more advanced way of using java

82
00:02:54,080 --> 00:02:55,440
agents however is to

83
00:02:55,440 --> 00:02:59,840
specify uh so-called dynamic agents

84
00:02:59,840 --> 00:03:01,760
where you can take a running java

85
00:03:01,760 --> 00:03:03,760
process and you can enrich this already

86
00:03:03,760 --> 00:03:05,360
executing java process

87
00:03:05,360 --> 00:03:07,040
and while it is running with additional

88
00:03:07,040 --> 00:03:08,640
code and again you just

89
00:03:08,640 --> 00:03:11,519
create a java file you have some class

90
00:03:11,519 --> 00:03:12,400
where you implement

91
00:03:12,400 --> 00:03:15,599
a public static void agent main method

92
00:03:15,599 --> 00:03:18,720
and add a manifest entry that says

93
00:03:18,720 --> 00:03:21,760
agent clause and points to that class

94
00:03:21,760 --> 00:03:22,159
that

95
00:03:22,159 --> 00:03:24,159
contains this method then you can tell

96
00:03:24,159 --> 00:03:25,920
the jvm to basically load

97
00:03:25,920 --> 00:03:27,599
an additional jar file while it is

98
00:03:27,599 --> 00:03:30,159
running and to execute additional code

99
00:03:30,159 --> 00:03:32,400
and again you can have more of those and

100
00:03:32,400 --> 00:03:34,080
those will just run in its own

101
00:03:34,080 --> 00:03:36,480
thread until they complete and in

102
00:03:36,480 --> 00:03:38,959
parallel to a program and this is how

103
00:03:38,959 --> 00:03:41,040
a lot of modern tooling just scans for

104
00:03:41,040 --> 00:03:42,159
example for java

105
00:03:42,159 --> 00:03:45,440
to machine process ids and find these uh

106
00:03:45,440 --> 00:03:47,760
processes and and enriches them without

107
00:03:47,760 --> 00:03:48,720
your

108
00:03:48,720 --> 00:03:51,920
exit doing so so you can um

109
00:03:51,920 --> 00:03:54,000
develop some tooling based on that and

110
00:03:54,000 --> 00:03:55,840
for example look into a jvm when it's

111
00:03:55,840 --> 00:03:57,120
starting to crash and

112
00:03:57,120 --> 00:03:59,760
explore things despite not having known

113
00:03:59,760 --> 00:04:00,400
this

114
00:04:00,400 --> 00:04:03,760
demand when you started your debian so

115
00:04:03,760 --> 00:04:05,920
basically this is what java ages are and

116
00:04:05,920 --> 00:04:07,360
that's no big magic to it it's the

117
00:04:07,360 --> 00:04:08,879
standard feature that the jvm has

118
00:04:08,879 --> 00:04:09,760
supported

119
00:04:09,760 --> 00:04:12,879
since java 5 in a fairly basic manner

120
00:04:12,879 --> 00:04:14,879
and but it has supported very

121
00:04:14,879 --> 00:04:17,279
comprehensively since javascript

122
00:04:17,279 --> 00:04:20,000
ever since the tooling space for the jvm

123
00:04:20,000 --> 00:04:21,759
has grown by a lot and this is why you

124
00:04:21,759 --> 00:04:22,160
get

125
00:04:22,160 --> 00:04:23,600
a lot of good tooling for the java

126
00:04:23,600 --> 00:04:25,360
virtual machine that you can find for

127
00:04:25,360 --> 00:04:26,880
other

128
00:04:26,880 --> 00:04:28,800
platforms because it is very easy to

129
00:04:28,800 --> 00:04:30,080
write these programs and

130
00:04:30,080 --> 00:04:32,400
hopefully after the talk you can start

131
00:04:32,400 --> 00:04:34,720
writing your own small tools

132
00:04:34,720 --> 00:04:36,639
right so how does a static java agent

133
00:04:36,639 --> 00:04:38,639
one that you specify and as a three main

134
00:04:38,639 --> 00:04:39,600
method

135
00:04:39,600 --> 00:04:41,440
look like it can look like that as

136
00:04:41,440 --> 00:04:43,600
simple as that so if you write this

137
00:04:43,600 --> 00:04:45,280
pre-entry class and you

138
00:04:45,280 --> 00:04:47,280
write a pre-made method in it you can

139
00:04:47,280 --> 00:04:49,360
just print some arguments

140
00:04:49,360 --> 00:04:50,960
and of course this is a hello world

141
00:04:50,960 --> 00:04:52,400
example of a java agent

142
00:04:52,400 --> 00:04:54,320
very useful in itself but you can

143
00:04:54,320 --> 00:04:56,000
potentially imagine

144
00:04:56,000 --> 00:04:59,360
how this can be useful in

145
00:04:59,360 --> 00:05:00,960
a context for example let's say you want

146
00:05:00,960 --> 00:05:03,199
to set up some configuration

147
00:05:03,199 --> 00:05:04,880
based on environment variables and you

148
00:05:04,880 --> 00:05:06,320
don't want to hard code this into your

149
00:05:06,320 --> 00:05:07,919
application because it only affects a

150
00:05:07,919 --> 00:05:08,639
certain

151
00:05:08,639 --> 00:05:11,280
runtime environment then you can

152
00:05:11,280 --> 00:05:13,199
implement the setup once as a java agent

153
00:05:13,199 --> 00:05:14,639
and you can just prepend it to any

154
00:05:14,639 --> 00:05:16,320
application you run this environment and

155
00:05:16,320 --> 00:05:17,600
map for example

156
00:05:17,600 --> 00:05:19,520
environment variable names to system

157
00:05:19,520 --> 00:05:20,800
properties that you need to set

158
00:05:20,800 --> 00:05:23,680
so that would be a simple application

159
00:05:23,680 --> 00:05:24,479
right

160
00:05:24,479 --> 00:05:26,800
and the dynamic agent isn't much harder

161
00:05:26,800 --> 00:05:27,600
to do

162
00:05:27,600 --> 00:05:29,520
of course now you don't specify that

163
00:05:29,520 --> 00:05:30,639
when you run the

164
00:05:30,639 --> 00:05:33,360
java main method but at a later point in

165
00:05:33,360 --> 00:05:33,840
time

166
00:05:33,840 --> 00:05:36,560
the jvm contains a special virtual

167
00:05:36,560 --> 00:05:37,600
machine api

168
00:05:37,600 --> 00:05:40,960
for that you just tell this api

169
00:05:40,960 --> 00:05:43,360
what the kit is of the java process then

170
00:05:43,360 --> 00:05:44,720
you tell it to load some

171
00:05:44,720 --> 00:05:47,759
jar file um with some argument and

172
00:05:47,759 --> 00:05:49,680
it will be loaded right so you can do

173
00:05:49,680 --> 00:05:51,520
this from some other process

174
00:05:51,520 --> 00:05:54,080
on the same machine and as long as it's

175
00:05:54,080 --> 00:05:55,759
owned as long as your process is owned

176
00:05:55,759 --> 00:05:56,960
by the same user

177
00:05:56,960 --> 00:05:59,440
you can inject this jar file into any

178
00:05:59,440 --> 00:06:01,039
virtual machine

179
00:06:01,039 --> 00:06:03,520
more or less and for example if you use

180
00:06:03,520 --> 00:06:04,960
j visual vm

181
00:06:04,960 --> 00:06:07,120
if you ever wondered how jvzoo vm can

182
00:06:07,120 --> 00:06:08,240
look into

183
00:06:08,240 --> 00:06:10,160
a running java process it will do

184
00:06:10,160 --> 00:06:11,440
exactly that you will tell

185
00:06:11,440 --> 00:06:15,680
jvzoom what pid you want to connect to

186
00:06:15,680 --> 00:06:18,639
it will have a java agent placed

187
00:06:18,639 --> 00:06:20,240
somewhere and on the file system of your

188
00:06:20,240 --> 00:06:21,039
machine

189
00:06:21,039 --> 00:06:22,560
and if you're logged in with the same

190
00:06:22,560 --> 00:06:24,639
user as this java process that you want

191
00:06:24,639 --> 00:06:26,960
to monitor with j visual vm you can

192
00:06:26,960 --> 00:06:31,280
do so by attaching the jvisual vm agent

193
00:06:31,280 --> 00:06:32,000
and it will then

194
00:06:32,000 --> 00:06:34,240
basically display data that the agent

195
00:06:34,240 --> 00:06:35,039
sends back

196
00:06:35,039 --> 00:06:37,280
to the graphical user interfaces how all

197
00:06:37,280 --> 00:06:39,840
the tooling works in the jvm or ls

198
00:06:39,840 --> 00:06:41,600
and also more advanced and commercial

199
00:06:41,600 --> 00:06:44,720
tooling of course basis of that

200
00:06:44,720 --> 00:06:48,400
so so far so good now we know how

201
00:06:48,400 --> 00:06:50,000
you implement a java agent or what a

202
00:06:50,000 --> 00:06:52,479
java agent is and

203
00:06:52,479 --> 00:06:56,080
and technically you can now already run

204
00:06:56,080 --> 00:06:57,919
code in a foreign jvm process but this

205
00:06:57,919 --> 00:06:59,840
is not what makes java agents

206
00:06:59,840 --> 00:07:01,599
exciting so we've seen in last slide

207
00:07:01,599 --> 00:07:04,080
that java agent takes a single argument

208
00:07:04,080 --> 00:07:05,599
of pipe string that contains the

209
00:07:05,599 --> 00:07:07,280
argument that you provide to this agent

210
00:07:07,280 --> 00:07:08,160
so you

211
00:07:08,160 --> 00:07:11,039
tell the java agent for example that you

212
00:07:11,039 --> 00:07:12,080
want to print

213
00:07:12,080 --> 00:07:14,880
my agent as hello world example or

214
00:07:14,880 --> 00:07:17,280
something else but you can also

215
00:07:17,280 --> 00:07:19,919
supply a second uh optional argument

216
00:07:19,919 --> 00:07:21,440
that you can specify but you didn't have

217
00:07:21,440 --> 00:07:22,160
to and

218
00:07:22,160 --> 00:07:24,160
this type of argument has to be of

219
00:07:24,160 --> 00:07:25,599
instrumentation

220
00:07:25,599 --> 00:07:27,680
and instrumentation is basically an

221
00:07:27,680 --> 00:07:28,720
interface that

222
00:07:28,720 --> 00:07:30,560
implements a lot of low-level

223
00:07:30,560 --> 00:07:32,160
functionality access

224
00:07:32,160 --> 00:07:34,800
for the jvm and the most interesting one

225
00:07:34,800 --> 00:07:36,000
is probably

226
00:07:36,000 --> 00:07:39,039
the possibility of registering a class

227
00:07:39,039 --> 00:07:40,720
file transformer

228
00:07:40,720 --> 00:07:42,960
a class browse performer is an interface

229
00:07:42,960 --> 00:07:44,960
that implements a single method

230
00:07:44,960 --> 00:07:46,960
where whenever a class is loaded in a

231
00:07:46,960 --> 00:07:48,240
java virtual machine

232
00:07:48,240 --> 00:07:50,879
you will be receiving a callback from

233
00:07:50,879 --> 00:07:52,319
the java virtual machine with the

234
00:07:52,319 --> 00:07:55,039
possibility to transform the class

235
00:07:55,039 --> 00:07:56,720
this is of course useful if you for

236
00:07:56,720 --> 00:07:58,319
example want to write monitoring

237
00:07:58,319 --> 00:07:59,280
services

238
00:07:59,280 --> 00:08:01,599
so you for example want to change a

239
00:08:01,599 --> 00:08:02,479
class that

240
00:08:02,479 --> 00:08:05,759
implements some some method to always

241
00:08:05,759 --> 00:08:07,919
extract some data to prometheus for

242
00:08:07,919 --> 00:08:09,360
example then you can

243
00:08:09,360 --> 00:08:11,440
instead of hard coding this into the

244
00:08:11,440 --> 00:08:12,800
method in question

245
00:08:12,800 --> 00:08:14,879
you can just tell the jvm that you want

246
00:08:14,879 --> 00:08:16,479
to be notified whenever a class is

247
00:08:16,479 --> 00:08:17,680
loaded and

248
00:08:17,680 --> 00:08:19,520
basically change the class that you

249
00:08:19,520 --> 00:08:20,960
actually load

250
00:08:20,960 --> 00:08:24,840
to include your enriched

251
00:08:24,840 --> 00:08:27,680
behavior because a java class file is

252
00:08:27,680 --> 00:08:29,919
more or less nothing more than a byte

253
00:08:29,919 --> 00:08:32,000
array right so

254
00:08:32,000 --> 00:08:33,919
so all you need to do is you have to

255
00:08:33,919 --> 00:08:35,440
find the bytes in question that have

256
00:08:35,440 --> 00:08:36,719
this particular meaning you want to

257
00:08:36,719 --> 00:08:37,599
change and then

258
00:08:37,599 --> 00:08:39,519
you can adjust the behavior of any class

259
00:08:39,519 --> 00:08:41,599
that exists in the jvm

260
00:08:41,599 --> 00:08:44,399
right the same you can do also with the

261
00:08:44,399 --> 00:08:46,000
dynamic agent but problem with the

262
00:08:46,000 --> 00:08:47,760
dynamic agent is that you don't know

263
00:08:47,760 --> 00:08:49,040
when you attach to

264
00:08:49,040 --> 00:08:51,600
jvm so potentially classes are already

265
00:08:51,600 --> 00:08:53,360
loaded when you install your

266
00:08:53,360 --> 00:08:55,839
cloud file transformer but fortunately

267
00:08:55,839 --> 00:08:57,120
jvm cannot only

268
00:08:57,120 --> 00:08:59,760
transform classes it is also capable of

269
00:08:59,760 --> 00:09:01,440
re-transforming classes that have

270
00:09:01,440 --> 00:09:02,560
already loaded

271
00:09:02,560 --> 00:09:04,480
so you can actually change the behavior

272
00:09:04,480 --> 00:09:06,880
of a java application completely while

273
00:09:06,880 --> 00:09:09,360
executing and this is this gives you a

274
00:09:09,360 --> 00:09:11,120
possibility to not even

275
00:09:11,120 --> 00:09:13,519
delay the startup of an app for example

276
00:09:13,519 --> 00:09:14,800
if you want to monitor you can just

277
00:09:14,800 --> 00:09:16,000
attach in parallel

278
00:09:16,000 --> 00:09:17,600
and then basically patch the java

279
00:09:17,600 --> 00:09:19,200
virtual machine to do what you need

280
00:09:19,200 --> 00:09:22,080
what you need to do right all you need

281
00:09:22,080 --> 00:09:23,440
to do is you have to provide the second

282
00:09:23,440 --> 00:09:25,120
argument here with um

283
00:09:25,120 --> 00:09:26,480
telling the jvm that you actually do

284
00:09:26,480 --> 00:09:28,160
want to retransform and then you have to

285
00:09:28,160 --> 00:09:31,279
tell it what classes those are

286
00:09:31,279 --> 00:09:34,320
all right so um how does this work

287
00:09:34,320 --> 00:09:37,279
uh you all know that when you compile a

288
00:09:37,279 --> 00:09:38,800
java source code file

289
00:09:38,800 --> 00:09:40,880
this is translated into a java class

290
00:09:40,880 --> 00:09:42,000
file and you've seen

291
00:09:42,000 --> 00:09:43,519
these class files those are packed and

292
00:09:43,519 --> 00:09:45,200
packaged together into a jar file where

293
00:09:45,200 --> 00:09:45,680
they

294
00:09:45,680 --> 00:09:47,600
still exist and you can look at those

295
00:09:47,600 --> 00:09:49,120
java class files

296
00:09:49,120 --> 00:09:52,720
are very very similar to java

297
00:09:52,720 --> 00:09:55,839
source files in the content they provide

298
00:09:55,839 --> 00:09:59,440
they just display it in a more machine

299
00:09:59,440 --> 00:10:00,959
friendly manner but they don't do

300
00:10:00,959 --> 00:10:03,120
any big transformations or performance

301
00:10:03,120 --> 00:10:04,399
optimizations

302
00:10:04,399 --> 00:10:07,120
it's only at run time when the java

303
00:10:07,120 --> 00:10:09,040
virtual machine executes your code

304
00:10:09,040 --> 00:10:11,360
that these class files which are more or

305
00:10:11,360 --> 00:10:13,440
less byte arrays are compiled to machine

306
00:10:13,440 --> 00:10:14,320
code

307
00:10:14,320 --> 00:10:16,880
so what you can do is that you can take

308
00:10:16,880 --> 00:10:18,640
these class files at runtime

309
00:10:18,640 --> 00:10:20,079
where they are represented as byte

310
00:10:20,079 --> 00:10:22,480
arrays and you basically

311
00:10:22,480 --> 00:10:24,959
adjust this byte array by adding a few

312
00:10:24,959 --> 00:10:26,560
instructions

313
00:10:26,560 --> 00:10:29,040
to display the behavior that you want to

314
00:10:29,040 --> 00:10:30,800
display so for example if you invoke a

315
00:10:30,800 --> 00:10:31,519
method

316
00:10:31,519 --> 00:10:34,079
and this method call will have a certain

317
00:10:34,079 --> 00:10:35,680
byte placed in the bytecode at a

318
00:10:35,680 --> 00:10:36,959
particular location

319
00:10:36,959 --> 00:10:38,640
and if you look up the java to machine

320
00:10:38,640 --> 00:10:40,800
specification it specifies what byte in

321
00:10:40,800 --> 00:10:41,760
this byte array

322
00:10:41,760 --> 00:10:44,079
means what by knowing that as with the

323
00:10:44,079 --> 00:10:45,040
geometric machine

324
00:10:45,040 --> 00:10:47,600
specification is very precise and very

325
00:10:47,600 --> 00:10:48,720
well maintained

326
00:10:48,720 --> 00:10:51,200
you can reliably transform any code that

327
00:10:51,200 --> 00:10:53,200
you want to transform

328
00:10:53,200 --> 00:10:55,600
right but of course it's it's a bit of

329
00:10:55,600 --> 00:10:57,279
an effort to understand all this and

330
00:10:57,279 --> 00:10:58,800
this is why people like me

331
00:10:58,800 --> 00:11:01,200
or create libraries like fightbody which

332
00:11:01,200 --> 00:11:02,880
hopefully

333
00:11:02,880 --> 00:11:05,440
make this deep understanding of drawer

334
00:11:05,440 --> 00:11:07,279
by code obsolete to you where you can

335
00:11:07,279 --> 00:11:08,720
then rather focus on

336
00:11:08,720 --> 00:11:10,160
the actual logic that you want to

337
00:11:10,160 --> 00:11:12,880
implement but before i show you what i

338
00:11:12,880 --> 00:11:14,880
try to show you two real world examples

339
00:11:14,880 --> 00:11:17,760
of java agents that i hope everybody

340
00:11:17,760 --> 00:11:19,360
has encountered in some way in their

341
00:11:19,360 --> 00:11:21,200
career to explain to you or make

342
00:11:21,200 --> 00:11:23,200
you understand why this is actually

343
00:11:23,200 --> 00:11:24,959
something that we use every day more or

344
00:11:24,959 --> 00:11:25,839
less

345
00:11:25,839 --> 00:11:28,320
so as a first example take the mokilo

346
00:11:28,320 --> 00:11:29,279
library

347
00:11:29,279 --> 00:11:32,480
for years we've been

348
00:11:32,480 --> 00:11:34,959
just subclassing any of your classes to

349
00:11:34,959 --> 00:11:35,760
create mocks

350
00:11:35,760 --> 00:11:38,480
so we have created mocks in mojito by

351
00:11:38,480 --> 00:11:39,040
just

352
00:11:39,040 --> 00:11:40,959
taking your class and by subclassing it

353
00:11:40,959 --> 00:11:42,800
and overriding all of its methods

354
00:11:42,800 --> 00:11:44,959
and the overriding methods we can make

355
00:11:44,959 --> 00:11:46,959
use of virtual dispatch

356
00:11:46,959 --> 00:11:48,480
and then of course change the behavior

357
00:11:48,480 --> 00:11:50,000
by these overrides so we have used

358
00:11:50,000 --> 00:11:51,519
bytebody for instance

359
00:11:51,519 --> 00:11:53,519
to create subclasses and then these

360
00:11:53,519 --> 00:11:54,560
subclasses were

361
00:11:54,560 --> 00:11:57,200
a representation of the mobs but in

362
00:11:57,200 --> 00:11:59,120
recent years for the recent two years we

363
00:11:59,120 --> 00:12:01,519
have started to use java agents for that

364
00:12:01,519 --> 00:12:03,200
when kotlin came along and became

365
00:12:03,200 --> 00:12:05,120
popular and the reason for that is that

366
00:12:05,120 --> 00:12:07,200
kotlin defines final classes by default

367
00:12:07,200 --> 00:12:08,639
with final methods

368
00:12:08,639 --> 00:12:10,320
where this approach didn't work anymore

369
00:12:10,320 --> 00:12:12,079
and there was of course a demand

370
00:12:12,079 --> 00:12:15,360
in mocking coding classes since uh

371
00:12:15,360 --> 00:12:17,200
we are running java and we can use

372
00:12:17,200 --> 00:12:19,200
agents what we do is we attach a java

373
00:12:19,200 --> 00:12:21,360
agent to our own java process

374
00:12:21,360 --> 00:12:22,959
and then what we do is we take your

375
00:12:22,959 --> 00:12:24,480
class that you want to mock

376
00:12:24,480 --> 00:12:27,600
and we inline the mock into the

377
00:12:27,600 --> 00:12:29,839
method you want to want to be able to

378
00:12:29,839 --> 00:12:31,120
mock right so

379
00:12:31,120 --> 00:12:34,560
by by inlining the code by basically

380
00:12:34,560 --> 00:12:36,240
representing your class file

381
00:12:36,240 --> 00:12:39,040
as a byte array again finding the the

382
00:12:39,040 --> 00:12:40,959
location of your method in this byte

383
00:12:40,959 --> 00:12:41,680
array

384
00:12:41,680 --> 00:12:43,680
and then adding a few lines of code in

385
00:12:43,680 --> 00:12:45,279
the beginning of every method

386
00:12:45,279 --> 00:12:47,360
we can then check within the method if

387
00:12:47,360 --> 00:12:48,959
we are currently a mocked instance and

388
00:12:48,959 --> 00:12:50,560
then apply the mocking logic

389
00:12:50,560 --> 00:12:52,560
or if you're not a mock instance if you

390
00:12:52,560 --> 00:12:54,320
apply the regular logic

391
00:12:54,320 --> 00:12:56,240
and this works then um without you

392
00:12:56,240 --> 00:12:58,480
noticing and it works the final classes

393
00:12:58,480 --> 00:12:59,680
and final methods and it's

394
00:12:59,680 --> 00:13:02,560
been pretty well adopted um in the in

395
00:13:02,560 --> 00:13:03,680
the javascript

396
00:13:03,680 --> 00:13:06,240
another application i can just tell the

397
00:13:06,240 --> 00:13:08,000
example of a monitoring tool i've been

398
00:13:08,000 --> 00:13:09,680
working with for a year as a consultant

399
00:13:09,680 --> 00:13:10,560
once

400
00:13:10,560 --> 00:13:12,079
which which uses this approach is in

401
00:13:12,079 --> 00:13:14,160
stoner and i guess you all have

402
00:13:14,160 --> 00:13:16,399
used some apm tooling in your life and

403
00:13:16,399 --> 00:13:17,760
they all work similar

404
00:13:17,760 --> 00:13:20,000
they go into your java process too they

405
00:13:20,000 --> 00:13:22,160
scan pits for java processes

406
00:13:22,160 --> 00:13:24,480
then they install basically a general

407
00:13:24,480 --> 00:13:25,519
agent

408
00:13:25,519 --> 00:13:27,360
look a bit around in jvm what they need

409
00:13:27,360 --> 00:13:29,440
to do then they can load

410
00:13:29,440 --> 00:13:33,360
certain modules for supporting

411
00:13:33,360 --> 00:13:35,040
transactions in your code for example it

412
00:13:35,040 --> 00:13:37,360
might discover that you use the database

413
00:13:37,360 --> 00:13:40,320
by finding jdbc driver classes on your

414
00:13:40,320 --> 00:13:41,680
class path and then

415
00:13:41,680 --> 00:13:43,839
will basically transform the methods

416
00:13:43,839 --> 00:13:46,320
that do the jdbc calls to measure the

417
00:13:46,320 --> 00:13:48,639
execution time it takes them right and

418
00:13:48,639 --> 00:13:49,440
then you can

419
00:13:49,440 --> 00:13:51,440
extract all this data and generate

420
00:13:51,440 --> 00:13:53,199
traces and all so forth that you

421
00:13:53,199 --> 00:13:55,519
um typically see on dashboard to user

422
00:13:55,519 --> 00:13:56,639
action tool

423
00:13:56,639 --> 00:13:58,560
then also you can update these by just

424
00:13:58,560 --> 00:14:00,320
attaching them so they can just

425
00:14:00,320 --> 00:14:02,000
work in the background with you how do

426
00:14:02,000 --> 00:14:03,680
you ordering about

427
00:14:03,680 --> 00:14:05,120
writing your app in a certain way you're

428
00:14:05,120 --> 00:14:07,839
integrating against a specific api

429
00:14:07,839 --> 00:14:11,040
right back how much time okay halfway

430
00:14:11,040 --> 00:14:12,959
through it was actually pretty good

431
00:14:12,959 --> 00:14:15,839
right so so how does this work um and

432
00:14:15,839 --> 00:14:16,959
ideally i

433
00:14:16,959 --> 00:14:18,959
in the long talk i would start out now

434
00:14:18,959 --> 00:14:20,320
with giving you a

435
00:14:20,320 --> 00:14:22,160
tailored byte code and how you can do it

436
00:14:22,160 --> 00:14:23,600
with tools like asm

437
00:14:23,600 --> 00:14:26,639
which is exciting it's very insightful

438
00:14:26,639 --> 00:14:28,720
to do this once in your life if you find

439
00:14:28,720 --> 00:14:29,360
the time to

440
00:14:29,360 --> 00:14:32,079
to actually manipulate by code directly

441
00:14:32,079 --> 00:14:33,360
because you kind of

442
00:14:33,360 --> 00:14:35,519
get a grip of the essence of java class

443
00:14:35,519 --> 00:14:38,480
files and this is a gateway

444
00:14:38,480 --> 00:14:40,560
to understanding how the jvm works

445
00:14:40,560 --> 00:14:41,600
better because you

446
00:14:41,600 --> 00:14:43,440
if you work with the open jdk code for

447
00:14:43,440 --> 00:14:45,519
example the jdk codespace

448
00:14:45,519 --> 00:14:47,279
you need to understand how bytecode

449
00:14:47,279 --> 00:14:48,639
looks like and how

450
00:14:48,639 --> 00:14:50,959
classes are represented to to find this

451
00:14:50,959 --> 00:14:52,800
entry into openjdk

452
00:14:52,800 --> 00:14:54,560
but if you just want to write something

453
00:14:54,560 --> 00:14:55,920
something that does

454
00:14:55,920 --> 00:14:58,079
something practical it's often useful to

455
00:14:58,079 --> 00:15:00,320
use a more high level api and

456
00:15:00,320 --> 00:15:02,160
the library that i create white body is

457
00:15:02,160 --> 00:15:04,320
trying to give you that

458
00:15:04,320 --> 00:15:06,399
so with bite body you basically just

459
00:15:06,399 --> 00:15:07,760
have a declarative

460
00:15:07,760 --> 00:15:10,639
dsl that tells you um or tells fight

461
00:15:10,639 --> 00:15:12,160
body what you want to do and in this

462
00:15:12,160 --> 00:15:12,880
case

463
00:15:12,880 --> 00:15:15,680
we tell by body to find all classes that

464
00:15:15,680 --> 00:15:16,800
have a super type

465
00:15:16,800 --> 00:15:19,600
that is named my target user type then

466
00:15:19,600 --> 00:15:21,199
we want to transform

467
00:15:21,199 --> 00:15:24,240
this type and to include

468
00:15:24,240 --> 00:15:26,880
a so-called advice to our hello world

469
00:15:26,880 --> 00:15:27,680
advice

470
00:15:27,680 --> 00:15:30,240
on every method that is just a method so

471
00:15:30,240 --> 00:15:32,639
no constructors just met it

472
00:15:32,639 --> 00:15:34,399
and the hello world advice is now what

473
00:15:34,399 --> 00:15:35,680
we want to inline

474
00:15:35,680 --> 00:15:37,759
as you can expect hopefully or if it's

475
00:15:37,759 --> 00:15:39,519
the goal of the api to be

476
00:15:39,519 --> 00:15:43,040
intuitive at least on every entry of a

477
00:15:43,040 --> 00:15:43,519
method

478
00:15:43,519 --> 00:15:46,880
in any subclass of my target user type

479
00:15:46,880 --> 00:15:48,639
we will now print the line system output

480
00:15:48,639 --> 00:15:49,519
in hello world

481
00:15:49,519 --> 00:15:51,360
as a first thing and if you don't

482
00:15:51,360 --> 00:15:53,120
believe me that that works i

483
00:15:53,120 --> 00:15:54,800
challenge you of course to copy paste

484
00:15:54,800 --> 00:15:56,720
this code compile it

485
00:15:56,720 --> 00:15:59,360
and add a manifest entry to this agent

486
00:15:59,360 --> 00:16:00,880
main class attach it to any

487
00:16:00,880 --> 00:16:02,880
virtual machine that you want to and you

488
00:16:02,880 --> 00:16:04,880
will seeing these hello world

489
00:16:04,880 --> 00:16:07,440
lines showing up and you can take a jvm

490
00:16:07,440 --> 00:16:09,759
that has been running for a year

491
00:16:09,759 --> 00:16:12,560
and and of course this is not useful

492
00:16:12,560 --> 00:16:14,160
again this is a hello world example but

493
00:16:14,160 --> 00:16:15,920
you can imagine what

494
00:16:15,920 --> 00:16:17,839
the advantage of something like this can

495
00:16:17,839 --> 00:16:19,199
be if you have a

496
00:16:19,199 --> 00:16:22,399
application that misbehaves all of a

497
00:16:22,399 --> 00:16:23,839
sudden and you want to see what's going

498
00:16:23,839 --> 00:16:25,199
on but you can't really

499
00:16:25,199 --> 00:16:26,880
kill the jvm because it's running in

500
00:16:26,880 --> 00:16:28,720
production and there's no

501
00:16:28,720 --> 00:16:31,360
fallover uh because it's old system

502
00:16:31,360 --> 00:16:32,160
where this was

503
00:16:32,160 --> 00:16:34,959
a thing you did and you can still try to

504
00:16:34,959 --> 00:16:36,000
extract

505
00:16:36,000 --> 00:16:38,160
logging data and some frameworks have

506
00:16:38,160 --> 00:16:39,680
support for that actually like

507
00:16:39,680 --> 00:16:43,199
uh here and for example they they

508
00:16:43,199 --> 00:16:44,639
are very aware of the by code to

509
00:16:44,639 --> 00:16:46,240
generate so if you want to have logging

510
00:16:46,240 --> 00:16:47,759
it's done by java agent that you have to

511
00:16:47,759 --> 00:16:50,320
attach so that's not in normal code

512
00:16:50,320 --> 00:16:52,800
so and this has been proven useful to

513
00:16:52,800 --> 00:16:53,600
many people

514
00:16:53,600 --> 00:16:55,600
over the time that you can actually look

515
00:16:55,600 --> 00:16:58,560
into running kvms if you want to

516
00:16:58,560 --> 00:17:02,240
right so this works by basically just

517
00:17:02,240 --> 00:17:02,800
taking

518
00:17:02,800 --> 00:17:04,480
your user type your chooser type in the

519
00:17:04,480 --> 00:17:06,079
subtype of user type right

520
00:17:06,079 --> 00:17:07,839
it's also going to be instrumented so if

521
00:17:07,839 --> 00:17:09,599
there's a method through a bad body will

522
00:17:09,599 --> 00:17:11,520
basically just take the advice code and

523
00:17:11,520 --> 00:17:12,559
inline it there

524
00:17:12,559 --> 00:17:14,319
so we'll copy paste it through the

525
00:17:14,319 --> 00:17:16,240
target location and now it's executed so

526
00:17:16,240 --> 00:17:18,079
you have changed the running program

527
00:17:18,079 --> 00:17:21,280
to represent this new source file right

528
00:17:21,280 --> 00:17:22,880
you can also just say that you want to

529
00:17:22,880 --> 00:17:24,640
re-transform existing classes in this

530
00:17:24,640 --> 00:17:26,720
case you will automatically pick up any

531
00:17:26,720 --> 00:17:29,120
class that has been loaded previously

532
00:17:29,120 --> 00:17:32,080
and re-transform it once it's discovered

533
00:17:32,080 --> 00:17:34,080
right and that's as easy as i hope it

534
00:17:34,080 --> 00:17:35,280
should be and

535
00:17:35,280 --> 00:17:37,520
it's still pretty performant and i

536
00:17:37,520 --> 00:17:38,720
invite you if you want to

537
00:17:38,720 --> 00:17:40,320
learn more about how to do it just try

538
00:17:40,320 --> 00:17:42,720
it out it should be that easy

539
00:17:42,720 --> 00:17:46,000
all right of course it's a very rich api

540
00:17:46,000 --> 00:17:47,679
advice that's basically what you use for

541
00:17:47,679 --> 00:17:49,360
agent mainly

542
00:17:49,360 --> 00:17:51,919
you can add method at the beginning of a

543
00:17:51,919 --> 00:17:54,000
method you can also add method

544
00:17:54,000 --> 00:17:56,400
code at code at the end of a method so

545
00:17:56,400 --> 00:17:58,080
bite body will do then it will copy

546
00:17:58,080 --> 00:17:59,600
every return statement instead of

547
00:17:59,600 --> 00:18:01,440
returning it will assign the value to a

548
00:18:01,440 --> 00:18:02,960
temporary variable

549
00:18:02,960 --> 00:18:05,520
on them on the stack and then inline the

550
00:18:05,520 --> 00:18:06,400
exit code

551
00:18:06,400 --> 00:18:09,679
and then return values

552
00:18:09,679 --> 00:18:12,080
you can also access method arguments for

553
00:18:12,080 --> 00:18:13,520
example by just

554
00:18:13,520 --> 00:18:15,600
adding arguments to your advice as well

555
00:18:15,600 --> 00:18:17,440
and then

556
00:18:17,440 --> 00:18:20,320
referencing them so by adding a single

557
00:18:20,320 --> 00:18:22,240
argument to your answer advice

558
00:18:22,240 --> 00:18:24,559
type value string value you can now

559
00:18:24,559 --> 00:18:26,160
access that

560
00:18:26,160 --> 00:18:29,679
and then the actual code will um

561
00:18:29,679 --> 00:18:32,960
yeah still run as before you can also uh

562
00:18:32,960 --> 00:18:36,000
change arguments so if you want this

563
00:18:36,000 --> 00:18:37,039
method to print

564
00:18:37,039 --> 00:18:40,320
through bar instead of two then and this

565
00:18:40,320 --> 00:18:42,880
is the way you would do it right

566
00:18:42,880 --> 00:18:45,200
and now you can think about already

567
00:18:45,200 --> 00:18:45,919
think about

568
00:18:45,919 --> 00:18:47,919
implementing actual useful things right

569
00:18:47,919 --> 00:18:50,080
you can example if you want to monitor

570
00:18:50,080 --> 00:18:52,160
the performance of something in a

571
00:18:52,160 --> 00:18:53,360
general manner

572
00:18:53,360 --> 00:18:55,360
you can for example communicate a

573
00:18:55,360 --> 00:18:57,120
timestamp from the end advice to the

574
00:18:57,120 --> 00:18:58,160
exit advice

575
00:18:58,160 --> 00:19:00,720
and then you then receive this value in

576
00:19:00,720 --> 00:19:02,640
the exit advice and take the time again

577
00:19:02,640 --> 00:19:04,880
you can subtract these two numbers and

578
00:19:04,880 --> 00:19:08,480
get the execution time of um

579
00:19:08,480 --> 00:19:11,280
of the method and more or less i mean

580
00:19:11,280 --> 00:19:12,880
there's a lot of open source code that

581
00:19:12,880 --> 00:19:13,440
also

582
00:19:13,440 --> 00:19:16,000
is opening up for for looking into how

583
00:19:16,000 --> 00:19:17,120
it's implemented but

584
00:19:17,120 --> 00:19:20,640
um i can say the dog uses uh right body

585
00:19:20,640 --> 00:19:22,640
and stana uses fight body

586
00:19:22,640 --> 00:19:24,480
stage monitor used by buddy they do

587
00:19:24,480 --> 00:19:26,160
nothing more than that really

588
00:19:26,160 --> 00:19:28,080
they they basically implement this

589
00:19:28,080 --> 00:19:29,520
advice right

590
00:19:29,520 --> 00:19:32,559
and then they communicate the timestamp

591
00:19:32,559 --> 00:19:34,480
from the enter advice we exit the device

592
00:19:34,480 --> 00:19:35,919
and measure the execution time of a

593
00:19:35,919 --> 00:19:36,640
method

594
00:19:36,640 --> 00:19:37,760
and then they can print it to a

595
00:19:37,760 --> 00:19:39,360
dashboard and of course there's a much

596
00:19:39,360 --> 00:19:41,679
much more to it to actually

597
00:19:41,679 --> 00:19:44,160
make this data digestible but but the

598
00:19:44,160 --> 00:19:46,160
extraction mechanism is

599
00:19:46,160 --> 00:19:50,000
more or less that simple right

600
00:19:50,000 --> 00:19:52,480
right and there's a lot of properties

601
00:19:52,480 --> 00:19:54,000
that you can use to extract

602
00:19:54,000 --> 00:19:57,520
information of an advice method um and i

603
00:19:57,520 --> 00:19:59,360
won't go through all of them i've done

604
00:19:59,360 --> 00:20:00,559
this in other talks

605
00:20:00,559 --> 00:20:04,400
on this topic but um yeah

606
00:20:04,400 --> 00:20:06,720
it's in the javadocs and i hope i have

607
00:20:06,720 --> 00:20:08,080
given you enough to

608
00:20:08,080 --> 00:20:11,360
self-educate from there right um

609
00:20:11,360 --> 00:20:14,080
i have um five minutes left before we go

610
00:20:14,080 --> 00:20:15,600
into q a

611
00:20:15,600 --> 00:20:17,919
so i'll just quickly run through class

612
00:20:17,919 --> 00:20:19,600
load the hierarchies because when you

613
00:20:19,600 --> 00:20:21,919
develop agents you will very quickly

614
00:20:21,919 --> 00:20:22,960
realize that that's the biggest

615
00:20:22,960 --> 00:20:24,799
frustration you have to face

616
00:20:24,799 --> 00:20:27,280
any jvm is composed of three class

617
00:20:27,280 --> 00:20:29,679
loaders the boot class loader and

618
00:20:29,679 --> 00:20:32,559
loading java length string and so forth

619
00:20:32,559 --> 00:20:34,000
the extension class loader which was

620
00:20:34,000 --> 00:20:36,799
a mechanism to override um things in the

621
00:20:36,799 --> 00:20:38,559
boot class crossbar

622
00:20:38,559 --> 00:20:40,240
value and the system class loader which

623
00:20:40,240 --> 00:20:41,760
is basically the class loader

624
00:20:41,760 --> 00:20:43,600
for the class part and normal

625
00:20:43,600 --> 00:20:46,000
applications just work like this

626
00:20:46,000 --> 00:20:47,760
since java 9 we have the platform class

627
00:20:47,760 --> 00:20:50,240
loader because extension was rather

628
00:20:50,240 --> 00:20:54,320
obsolete which allows some extensions to

629
00:20:54,320 --> 00:20:57,039
jvm like java sql modules and before

630
00:20:57,039 --> 00:20:58,400
which aren't supposed to

631
00:20:58,400 --> 00:21:01,760
have poor privileges um but of course

632
00:21:01,760 --> 00:21:03,360
web servers tomcat for example

633
00:21:03,360 --> 00:21:06,880
uses um these additional class loaders

634
00:21:06,880 --> 00:21:08,640
and then you have osgi and you have

635
00:21:08,640 --> 00:21:10,000
people that implement custom class

636
00:21:10,000 --> 00:21:10,799
loaders

637
00:21:10,799 --> 00:21:13,200
and those all uh create boundaries of

638
00:21:13,200 --> 00:21:14,320
visibility because

639
00:21:14,320 --> 00:21:16,000
agents are always loaded on the system

640
00:21:16,000 --> 00:21:18,400
class loader so you might not be able to

641
00:21:18,400 --> 00:21:19,919
access application classes

642
00:21:19,919 --> 00:21:21,840
so when you want to write advice where

643
00:21:21,840 --> 00:21:23,039
you for example

644
00:21:23,039 --> 00:21:25,440
access hd requests and http response

645
00:21:25,440 --> 00:21:26,799
objects which are

646
00:21:26,799 --> 00:21:30,080
types provided by tomcat then those

647
00:21:30,080 --> 00:21:31,600
types might not be available to your

648
00:21:31,600 --> 00:21:33,039
advice class so when you write your

649
00:21:33,039 --> 00:21:34,000
advice

650
00:21:34,000 --> 00:21:37,039
um here hp client advice might not be

651
00:21:37,039 --> 00:21:38,320
loadable because

652
00:21:38,320 --> 00:21:40,400
the system class loader does not know

653
00:21:40,400 --> 00:21:42,840
about http client

654
00:21:42,840 --> 00:21:45,280
um right so

655
00:21:45,280 --> 00:21:46,880
so in order to avoid this fightbody has

656
00:21:46,880 --> 00:21:48,720
a mechanism again to

657
00:21:48,720 --> 00:21:52,880
um to avoid this bias of class loading

658
00:21:52,880 --> 00:21:54,240
visibility boundaries

659
00:21:54,240 --> 00:21:56,320
and um so if you tried it out and you

660
00:21:56,320 --> 00:21:58,480
want to write more ambitious app apps

661
00:21:58,480 --> 00:22:02,320
should look into um the advice

662
00:22:02,320 --> 00:22:04,400
mechanism for avoiding classes interests

663
00:22:04,400 --> 00:22:06,320
and then you just specify a string and

664
00:22:06,320 --> 00:22:09,520
fight but you will take care of that

665
00:22:09,760 --> 00:22:12,960
uh so yeah yeah let's see

666
00:22:12,960 --> 00:22:15,760
um yeah so last last point i can go

667
00:22:15,760 --> 00:22:16,159
through

668
00:22:16,159 --> 00:22:18,880
is self-attaching for our agents like as

669
00:22:18,880 --> 00:22:20,480
i suggested for mosquito

670
00:22:20,480 --> 00:22:23,600
how does this work um well

671
00:22:23,600 --> 00:22:25,679
you can self-attach by just finding out

672
00:22:25,679 --> 00:22:27,039
where you're currently

673
00:22:27,039 --> 00:22:30,240
um like placed so you find your own pit

674
00:22:30,240 --> 00:22:32,960
and unfortunately jvm has an api for

675
00:22:32,960 --> 00:22:33,919
that since java

676
00:22:33,919 --> 00:22:35,919
9 is also possible before it's much more

677
00:22:35,919 --> 00:22:37,200
complex

678
00:22:37,200 --> 00:22:39,200
and then you just attach to your own jar

679
00:22:39,200 --> 00:22:40,559
file which you can find out by

680
00:22:40,559 --> 00:22:41,840
the protection domain of your class

681
00:22:41,840 --> 00:22:44,159
loader then um this

682
00:22:44,159 --> 00:22:47,280
agent so your pseudo agent just writes

683
00:22:47,280 --> 00:22:49,520
this rotation instance to some static

684
00:22:49,520 --> 00:22:51,919
globally available field future static

685
00:22:51,919 --> 00:22:53,039
of course there

686
00:22:53,039 --> 00:22:55,840
um and then you can just read it from

687
00:22:55,840 --> 00:22:57,039
any location of your

688
00:22:57,039 --> 00:23:00,159
jvm and rokita does exactly that so

689
00:23:00,159 --> 00:23:02,080
unfortunately in java 9 there will also

690
00:23:02,080 --> 00:23:03,520
added the restrictions that you cannot

691
00:23:03,520 --> 00:23:04,799
self-attach anymore

692
00:23:04,799 --> 00:23:07,200
but that's easily available by just

693
00:23:07,200 --> 00:23:08,000
basically just

694
00:23:08,000 --> 00:23:09,919
spinning up a new jvm process which gets

695
00:23:09,919 --> 00:23:11,760
a new pit and then you just

696
00:23:11,760 --> 00:23:14,080
use this additional process to attach

697
00:23:14,080 --> 00:23:15,120
back to yourself

698
00:23:15,120 --> 00:23:17,280
because now the new fit is allowed to

699
00:23:17,280 --> 00:23:18,880
again

700
00:23:18,880 --> 00:23:20,080
you're being able to do the same thing

701
00:23:20,080 --> 00:23:21,679
but this is why since java in mojito

702
00:23:21,679 --> 00:23:22,799
inline mode making

703
00:23:22,799 --> 00:23:26,080
takes about twice as long to start off

704
00:23:26,080 --> 00:23:27,600
yeah but there's work to work around for

705
00:23:27,600 --> 00:23:30,000
everything so um with bike body it's

706
00:23:30,000 --> 00:23:30,640
again

707
00:23:30,640 --> 00:23:32,320
a bit simpler you just call bike body

708
00:23:32,320 --> 00:23:33,919
agent install and get an instance so it

709
00:23:33,919 --> 00:23:36,080
does everything for you in the most

710
00:23:36,080 --> 00:23:37,760
efficient way possible

711
00:23:37,760 --> 00:23:41,039
and you can also attach different apis

712
00:23:41,039 --> 00:23:44,000
so it requires a jdk attached module

713
00:23:44,000 --> 00:23:45,760
being available which only is in

714
00:23:45,760 --> 00:23:49,200
jdk and but i have made an effort to

715
00:23:49,200 --> 00:23:51,279
re-implement the entire attach api

716
00:23:51,279 --> 00:23:54,480
in native code based on jna

717
00:23:54,480 --> 00:23:57,520
so since fight body 1.9

718
00:23:57,520 --> 00:23:59,760
you can entirely avoid the restrictions

719
00:23:59,760 --> 00:24:01,279
imposed by the jvm

720
00:24:01,279 --> 00:24:03,520
and just attach to any jvm also on

721
00:24:03,520 --> 00:24:04,400
hotspot

722
00:24:04,400 --> 00:24:07,120
and openg9 but even on solaris i made it

723
00:24:07,120 --> 00:24:08,000
work so

724
00:24:08,000 --> 00:24:11,039
yeah you can try this out if you have

725
00:24:11,039 --> 00:24:13,919
an app that wants that as well all right

726
00:24:13,919 --> 00:24:14,960
and now it's

727
00:24:14,960 --> 00:24:17,360
five minutes to go in my and we should

728
00:24:17,360 --> 00:24:18,080
start q a

729
00:24:18,080 --> 00:24:20,880
am i right there you are completely

730
00:24:20,880 --> 00:24:22,720
right you are completely on time as

731
00:24:22,720 --> 00:24:25,120
well amazing thank you i i i appreciate

732
00:24:25,120 --> 00:24:26,000
that

733
00:24:26,000 --> 00:24:28,880
and yeah well the last one yeah yeah we

734
00:24:28,880 --> 00:24:29,279
just

735
00:24:29,279 --> 00:24:31,360
we just leave that one uh one up so

736
00:24:31,360 --> 00:24:33,279
people can i can see that slide i've got

737
00:24:33,279 --> 00:24:34,799
a couple of questions for you from both

738
00:24:34,799 --> 00:24:36,080
the slido and the

739
00:24:36,080 --> 00:24:39,360
and the track or the the slack uh track

740
00:24:39,360 --> 00:24:42,640
uh first one is can two attached jvm

741
00:24:42,640 --> 00:24:44,400
agents have conflicts

742
00:24:44,400 --> 00:24:47,919
uh yeah absolutely so um what one agent

743
00:24:47,919 --> 00:24:49,039
can do is it can

744
00:24:49,039 --> 00:24:51,760
be implemented poorly and basically undo

745
00:24:51,760 --> 00:24:53,279
the transformations of the previous

746
00:24:53,279 --> 00:24:54,320
agent

747
00:24:54,320 --> 00:24:57,840
which is um of course a bug in the agent

748
00:24:57,840 --> 00:25:00,880
which often only gets discovered

749
00:25:00,880 --> 00:25:03,440
once you run through agents then it's up

750
00:25:03,440 --> 00:25:04,159
to

751
00:25:04,159 --> 00:25:07,039
finding out which agent is to blame yeah

752
00:25:07,039 --> 00:25:09,039
you can use fight body my body

753
00:25:09,039 --> 00:25:10,720
tries to be sensible for it and it

754
00:25:10,720 --> 00:25:12,880
should work without any problems

755
00:25:12,880 --> 00:25:14,480
there are exceptions if you hard code

756
00:25:14,480 --> 00:25:16,559
locations in your methods for example

757
00:25:16,559 --> 00:25:18,799
then if the first agent transforms this

758
00:25:18,799 --> 00:25:19,919
method in a way that

759
00:25:19,919 --> 00:25:21,520
the second transfer transformation

760
00:25:21,520 --> 00:25:22,960
doesn't work anymore then of course

761
00:25:22,960 --> 00:25:26,400
it cancels probably yep um

762
00:25:26,400 --> 00:25:27,679
is there a restriction on how many

763
00:25:27,679 --> 00:25:29,600
agents you can you can connect or is

764
00:25:29,600 --> 00:25:30,240
that

765
00:25:30,240 --> 00:25:33,520
like as many as you basically want uh as

766
00:25:33,520 --> 00:25:34,559
long as you don't run

767
00:25:34,559 --> 00:25:36,240
out of memory for loading classes you

768
00:25:36,240 --> 00:25:37,600
can exact

769
00:25:37,600 --> 00:25:40,240
faster well there's probably a limit but

770
00:25:40,240 --> 00:25:41,440
yeah

771
00:25:41,440 --> 00:25:43,600
can we can we also programmatically

772
00:25:43,600 --> 00:25:45,440
detach agents

773
00:25:45,440 --> 00:25:48,080
so an agent is done executing once the

774
00:25:48,080 --> 00:25:50,000
three main method or the agent main

775
00:25:50,000 --> 00:25:51,200
method

776
00:25:51,200 --> 00:25:54,480
is completed so if you have

777
00:25:54,480 --> 00:25:57,600
then basically completed your your your

778
00:25:57,600 --> 00:25:58,640
business then

779
00:25:58,640 --> 00:26:00,320
you're done anyways if you want to

780
00:26:00,320 --> 00:26:01,840
basically undo

781
00:26:01,840 --> 00:26:03,520
the transformations you have applied and

782
00:26:03,520 --> 00:26:05,760
rightfully has an additional method on

783
00:26:05,760 --> 00:26:07,200
its own class file transformer

784
00:26:07,200 --> 00:26:08,400
implementation where you can just call

785
00:26:08,400 --> 00:26:09,600
dot reset and then

786
00:26:09,600 --> 00:26:13,279
all uh changes are reset

787
00:26:13,279 --> 00:26:15,120
but you have to trigger it it doesn't

788
00:26:15,120 --> 00:26:16,320
automatically happen

789
00:26:16,320 --> 00:26:20,480
after completing the pre manual hma

790
00:26:21,039 --> 00:26:23,120
if we look at for instance native images

791
00:26:23,120 --> 00:26:24,480
from from growl vm

792
00:26:24,480 --> 00:26:28,080
um can java agents still be used

793
00:26:28,080 --> 00:26:30,799
uh yes and no so the general answer is

794
00:26:30,799 --> 00:26:31,919
no but doesn't

795
00:26:31,919 --> 00:26:33,520
because there's no byte code anymore so

796
00:26:33,520 --> 00:26:35,200
you can't transform it but there's an

797
00:26:35,200 --> 00:26:35,760
effort

798
00:26:35,760 --> 00:26:38,799
to um implement

799
00:26:38,799 --> 00:26:41,760
an api that allows applying agents in

800
00:26:41,760 --> 00:26:43,279
build time but it's not

801
00:26:43,279 --> 00:26:46,159
as mature as i would wish it was at this

802
00:26:46,159 --> 00:26:46,880
phone

803
00:26:46,880 --> 00:26:48,400
but what you can do in bite body it has

804
00:26:48,400 --> 00:26:50,640
a maven the gradle plugin so you can try

805
00:26:50,640 --> 00:26:51,120
at least

806
00:26:51,120 --> 00:26:53,440
for non-jvm classes so everything that's

807
00:26:53,440 --> 00:26:55,440
a library or your own code

808
00:26:55,440 --> 00:26:58,159
you can transform them during build time

809
00:26:58,159 --> 00:26:58,720
and then

810
00:26:58,720 --> 00:27:02,480
just native compile those

811
00:27:03,200 --> 00:27:07,600
um a question over here and i hope i uh

812
00:27:07,600 --> 00:27:10,000
i read it out correctly what kind of

813
00:27:10,000 --> 00:27:11,520
typical operation

814
00:27:11,520 --> 00:27:13,679
logic would make sense to be done with

815
00:27:13,679 --> 00:27:14,720
java agents

816
00:27:14,720 --> 00:27:16,559
without incurring a significant

817
00:27:16,559 --> 00:27:18,320
performance penalty

818
00:27:18,320 --> 00:27:20,720
so typically it's performance monitoring

819
00:27:20,720 --> 00:27:21,360
tooling

820
00:27:21,360 --> 00:27:23,760
and that basically it tries to be

821
00:27:23,760 --> 00:27:24,640
independent

822
00:27:24,640 --> 00:27:26,480
uh from the code base because it's

823
00:27:26,480 --> 00:27:27,919
developed by a different company and

824
00:27:27,919 --> 00:27:30,159
normally close to it and security

825
00:27:30,159 --> 00:27:31,600
startups for example they

826
00:27:31,600 --> 00:27:33,600
they try to build agents that

827
00:27:33,600 --> 00:27:35,360
automatically detect svl injection but

828
00:27:35,360 --> 00:27:36,559
of course you have a

829
00:27:36,559 --> 00:27:38,880
minor at the minimum a minor performance

830
00:27:38,880 --> 00:27:39,600
penalty

831
00:27:39,600 --> 00:27:40,960
but the good thing is that jvms

832
00:27:40,960 --> 00:27:42,960
typically aren't at their executional

833
00:27:42,960 --> 00:27:43,600
limit

834
00:27:43,600 --> 00:27:45,520
a lot of modern applications struggle

835
00:27:45,520 --> 00:27:48,240
with io thanks to microservices

836
00:27:48,240 --> 00:27:51,520
there's a lot of cpu um available so as

837
00:27:51,520 --> 00:27:52,480
long as you

838
00:27:52,480 --> 00:27:55,840
don't use 100 cpu then agents can be

839
00:27:55,840 --> 00:27:59,360
effectively neutral to your performance

840
00:27:59,360 --> 00:28:01,440
unless you're a cpu bound which you

841
00:28:01,440 --> 00:28:02,960
typically know

842
00:28:02,960 --> 00:28:05,039
so you basically use it for tooling that

843
00:28:05,039 --> 00:28:06,559
want to that way when you want to

844
00:28:06,559 --> 00:28:08,080
measure things debug things

845
00:28:08,080 --> 00:28:10,080
make sure that you intercept kind of

846
00:28:10,080 --> 00:28:11,600
things that kind of

847
00:28:11,600 --> 00:28:14,320
all right um one one last question and

848
00:28:14,320 --> 00:28:16,000
that is a question for me personally

849
00:28:16,000 --> 00:28:19,520
i uh when you can attach to a jvm

850
00:28:19,520 --> 00:28:22,559
uh that might be a security risk right

851
00:28:22,559 --> 00:28:23,039
if you

852
00:28:23,039 --> 00:28:24,640
if you can connect to the machine and

853
00:28:24,640 --> 00:28:27,039
you can connect to the to the pit id

854
00:28:27,039 --> 00:28:30,399
um you can potentially interfere with

855
00:28:30,399 --> 00:28:31,360
that

856
00:28:31,360 --> 00:28:34,399
so how can you prevent this so

857
00:28:34,399 --> 00:28:35,440
you can know from a programmer

858
00:28:35,440 --> 00:28:37,919
perspective yeah so the the api is

859
00:28:37,919 --> 00:28:39,520
considered safe from the

860
00:28:39,520 --> 00:28:41,600
open jdk point of view because only the

861
00:28:41,600 --> 00:28:43,840
same user the same operating system user

862
00:28:43,840 --> 00:28:45,760
is allowed to attach to jvm

863
00:28:45,760 --> 00:28:48,799
that's secured by the attached mechanism

864
00:28:48,799 --> 00:28:50,640
but the only real way if you really want

865
00:28:50,640 --> 00:28:53,120
to prevent it for jvm is to delete the

866
00:28:53,120 --> 00:28:54,799
socket file and that's

867
00:28:54,799 --> 00:28:57,520
placed in a given location on depending

868
00:28:57,520 --> 00:28:59,039
on operating system

869
00:28:59,039 --> 00:29:00,159
and there's a bit of a different

870
00:29:00,159 --> 00:29:01,760
mechanism in windows for example because

871
00:29:01,760 --> 00:29:03,840
they don't have unix sockets obviously

872
00:29:03,840 --> 00:29:05,520
if you delete this file it's effectively

873
00:29:05,520 --> 00:29:07,760
impossible to ever attach to jvm again

874
00:29:07,760 --> 00:29:09,919
what you also can do is you can kill the

875
00:29:09,919 --> 00:29:12,159
attachment thread so you can

876
00:29:12,159 --> 00:29:14,399
basically start an agent and then block

877
00:29:14,399 --> 00:29:16,559
the attachment thread forever then no

878
00:29:16,559 --> 00:29:18,399
agent will ever be able to use the

879
00:29:18,399 --> 00:29:19,760
thread again

880
00:29:19,760 --> 00:29:23,279
um yeah so but but normally if you came

881
00:29:23,279 --> 00:29:25,360
as far as being able to execute a

882
00:29:25,360 --> 00:29:26,080
program

883
00:29:26,080 --> 00:29:28,240
the same operating system user on a

884
00:29:28,240 --> 00:29:29,679
physical machine

885
00:29:29,679 --> 00:29:32,080
and if an attacker got that far you

886
00:29:32,080 --> 00:29:33,039
already

887
00:29:33,039 --> 00:29:35,520
yeah you are already already screwed but

888
00:29:35,520 --> 00:29:37,039
you don't want to know how many docker

889
00:29:37,039 --> 00:29:39,120
containers are run by root for instance

890
00:29:39,120 --> 00:29:39,360
so

891
00:29:39,360 --> 00:29:42,240
yeah yeah all right i'm gonna i'm gonna

892
00:29:42,240 --> 00:29:43,919
cut it off here i want to thank you

893
00:29:43,919 --> 00:29:46,480
so much rafael for uh for this talk i'm

894
00:29:46,480 --> 00:29:46,960
gonna

895
00:29:46,960 --> 00:29:48,559
unshare your screen still with just two

896
00:29:48,559 --> 00:29:50,879
of us and

