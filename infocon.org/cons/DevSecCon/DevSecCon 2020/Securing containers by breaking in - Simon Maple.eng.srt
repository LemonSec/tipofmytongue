1
00:00:00,000 --> 00:00:03,040
awesome thank you very much so um i'm

2
00:00:03,040 --> 00:00:04,799
gonna put this full screen

3
00:00:04,799 --> 00:00:08,000
hopefully you can see my screen um so

4
00:00:08,000 --> 00:00:08,400
yeah

5
00:00:08,400 --> 00:00:10,400
this is uh this is a session i wasn't

6
00:00:10,400 --> 00:00:12,400
expecting to give uh

7
00:00:12,400 --> 00:00:15,599
24 hours ago but it snuck in at the last

8
00:00:15,599 --> 00:00:17,359
moment just because unfortunately we had

9
00:00:17,359 --> 00:00:18,240
uh

10
00:00:18,240 --> 00:00:20,560
we had one person uh pull out for uh

11
00:00:20,560 --> 00:00:22,640
unforeseen circumstances so

12
00:00:22,640 --> 00:00:24,720
so this is a this is a bonus session

13
00:00:24,720 --> 00:00:27,359
which is around securing containers

14
00:00:27,359 --> 00:00:29,119
um and we're going to be doing some live

15
00:00:29,119 --> 00:00:30,800
hacking as well

16
00:00:30,800 --> 00:00:33,360
um i may be a little bit quieter than

17
00:00:33,360 --> 00:00:35,280
usual just because i've been told

18
00:00:35,280 --> 00:00:38,399
uh that if i wake my kids i'm in serious

19
00:00:38,399 --> 00:00:39,520
trouble right now and it's

20
00:00:39,520 --> 00:00:41,360
just uh it's just gone five in the

21
00:00:41,360 --> 00:00:42,640
morning so um

22
00:00:42,640 --> 00:00:44,559
so if you hear a grown man crying i've

23
00:00:44,559 --> 00:00:45,680
been too noisy

24
00:00:45,680 --> 00:00:47,760
a little bit about me before we get

25
00:00:47,760 --> 00:00:50,239
started um i'm very heavily into my

26
00:00:50,239 --> 00:00:51,280
community uh

27
00:00:51,280 --> 00:00:53,920
focus so i founded the virtual jug maybe

28
00:00:53,920 --> 00:00:54,399
five

29
00:00:54,399 --> 00:00:56,719
five years ago six years ago we have

30
00:00:56,719 --> 00:00:58,800
almost 17 000 people there so if you're

31
00:00:58,800 --> 00:00:59,840
a java

32
00:00:59,840 --> 00:01:01,840
uh developer then that's a great place

33
00:01:01,840 --> 00:01:03,920
for you uh also if you're in london and

34
00:01:03,920 --> 00:01:05,360
a java developer

35
00:01:05,360 --> 00:01:07,200
we have the london java user group which

36
00:01:07,200 --> 00:01:08,400
i'm a co-leader of

37
00:01:08,400 --> 00:01:11,520
um i'm also a co-leader with sami on on

38
00:01:11,520 --> 00:01:13,040
my devsecops and a number of other

39
00:01:13,040 --> 00:01:15,040
people as well which is a security

40
00:01:15,040 --> 00:01:18,640
uh and devsecops focused uh

41
00:01:18,640 --> 00:01:21,280
meetup group which is uh which is

42
00:01:21,280 --> 00:01:22,000
available

43
00:01:22,000 --> 00:01:25,040
uh for free for great sessions

44
00:01:25,040 --> 00:01:26,400
like some of the ones that you've seen

45
00:01:26,400 --> 00:01:28,320
today uh or yesterday

46
00:01:28,320 --> 00:01:31,200
on this uh on this conference um tammy

47
00:01:31,200 --> 00:01:32,400
who's also on the

48
00:01:32,400 --> 00:01:34,400
on the helping with this conference runs

49
00:01:34,400 --> 00:01:35,840
devsecond and i'm

50
00:01:35,840 --> 00:01:38,000
a part of that as well which is physical

51
00:01:38,000 --> 00:01:39,759
conference and there's some other stuff

52
00:01:39,759 --> 00:01:40,000
there

53
00:01:40,000 --> 00:01:42,159
as well which i do but my role as sami

54
00:01:42,159 --> 00:01:43,040
mentioned was

55
00:01:43,040 --> 00:01:44,560
in the developer relations and community

56
00:01:44,560 --> 00:01:46,640
group at snick uh very very pleased to

57
00:01:46,640 --> 00:01:48,399
be here today to talk to you

58
00:01:48,399 --> 00:01:51,360
about how we can secure uh containers

59
00:01:51,360 --> 00:01:51,840
but

60
00:01:51,840 --> 00:01:53,360
let's talk about it a little bit wider

61
00:01:53,360 --> 00:01:55,600
to start off with about uh the cloud

62
00:01:55,600 --> 00:01:57,200
native space and how we can

63
00:01:57,200 --> 00:01:59,360
how we can think about kind of securing

64
00:01:59,360 --> 00:02:01,439
uh cloud native first so

65
00:02:01,439 --> 00:02:03,200
when we think about how we deploy apps

66
00:02:03,200 --> 00:02:05,280
to a cloud platform for example

67
00:02:05,280 --> 00:02:08,639
um in history we tended to do that

68
00:02:08,639 --> 00:02:11,038
more as monoliths and when we pass

69
00:02:11,038 --> 00:02:12,560
things as monoliths we have

70
00:02:12,560 --> 00:02:15,599
a number of large host vms which contain

71
00:02:15,599 --> 00:02:18,319
large apps which sit on top of a single

72
00:02:18,319 --> 00:02:19,440
operating system

73
00:02:19,440 --> 00:02:20,879
and there are a number of functions in

74
00:02:20,879 --> 00:02:22,800
that app you might actually have one app

75
00:02:22,800 --> 00:02:23,440
with

76
00:02:23,440 --> 00:02:25,680
uh you know one massive function like

77
00:02:25,680 --> 00:02:26,480
the kind of

78
00:02:26,480 --> 00:02:28,560
do some work or do you know to do kind

79
00:02:28,560 --> 00:02:29,760
of function

80
00:02:29,760 --> 00:02:31,760
but typically it's not broken down into

81
00:02:31,760 --> 00:02:33,519
micro services

82
00:02:33,519 --> 00:02:36,000
however um oh actually before i before i

83
00:02:36,000 --> 00:02:37,040
say that as well

84
00:02:37,040 --> 00:02:38,879
you see the split here between what is

85
00:02:38,879 --> 00:02:40,400
done by the cloud platform and what is

86
00:02:40,400 --> 00:02:41,840
done by the application

87
00:02:41,840 --> 00:02:43,440
and the application here contains

88
00:02:43,440 --> 00:02:45,040
everything that you would you know have

89
00:02:45,040 --> 00:02:46,000
in the in the

90
00:02:46,000 --> 00:02:48,800
in the uh the host vm almost and this is

91
00:02:48,800 --> 00:02:50,000
kind of like you know the the

92
00:02:50,000 --> 00:02:51,840
split of responsibility between the

93
00:02:51,840 --> 00:02:54,080
vendor and the people who are

94
00:02:54,080 --> 00:02:56,000
who are putting things onto that vm

95
00:02:56,000 --> 00:02:57,680
which is you as a user

96
00:02:57,680 --> 00:02:59,040
now when we move to a world of

97
00:02:59,040 --> 00:03:01,680
containers um we can still scale

98
00:03:01,680 --> 00:03:03,519
our vms there but we have containers

99
00:03:03,519 --> 00:03:05,280
within those vms and the containers

100
00:03:05,280 --> 00:03:06,239
within the vms

101
00:03:06,239 --> 00:03:08,239
have their own uh have their own

102
00:03:08,239 --> 00:03:09,440
operating systems

103
00:03:09,440 --> 00:03:11,440
uh you then have apps or functions

104
00:03:11,440 --> 00:03:12,800
within those contained within those

105
00:03:12,800 --> 00:03:13,440
containers

106
00:03:13,440 --> 00:03:15,040
and it lends itself more to a

107
00:03:15,040 --> 00:03:16,959
microservice kind of style

108
00:03:16,959 --> 00:03:19,120
within that you can have a container

109
00:03:19,120 --> 00:03:20,800
orchestrator maybe kubernetes or

110
00:03:20,800 --> 00:03:21,680
something like that

111
00:03:21,680 --> 00:03:24,000
but into the platform you actually get

112
00:03:24,000 --> 00:03:25,760
much much better hardware utilization

113
00:03:25,760 --> 00:03:26,239
and what

114
00:03:26,239 --> 00:03:28,480
what we mean by that is with the ability

115
00:03:28,480 --> 00:03:30,400
to have multiple containers

116
00:03:30,400 --> 00:03:32,720
you use more of the vm with the ability

117
00:03:32,720 --> 00:03:33,760
to scale

118
00:03:33,760 --> 00:03:36,319
uh certain containers but leave others

119
00:03:36,319 --> 00:03:37,440
you know as they are

120
00:03:37,440 --> 00:03:40,080
you have the ability to uh to use more

121
00:03:40,080 --> 00:03:40,799
of the

122
00:03:40,799 --> 00:03:42,720
hardware that you're sitting on plus you

123
00:03:42,720 --> 00:03:45,040
do have more os flexibility because

124
00:03:45,040 --> 00:03:47,280
you don't in the previous one have one

125
00:03:47,280 --> 00:03:49,040
os you can have different os's

126
00:03:49,040 --> 00:03:52,159
uh based on each container you obviously

127
00:03:52,159 --> 00:03:52,640
have

128
00:03:52,640 --> 00:03:54,400
a better cloud portability because

129
00:03:54,400 --> 00:03:55,920
you're coding to the container

130
00:03:55,920 --> 00:03:57,439
and as a result you can move those

131
00:03:57,439 --> 00:03:59,439
containers around with with less

132
00:03:59,439 --> 00:04:00,959
trouble than if you were to move your

133
00:04:00,959 --> 00:04:03,599
functions directly your apps directly

134
00:04:03,599 --> 00:04:05,040
into different containers that are

135
00:04:05,040 --> 00:04:06,799
native to those containers

136
00:04:06,799 --> 00:04:09,840
um better elasticity as well because of

137
00:04:09,840 --> 00:04:12,000
course you can grow containers or remove

138
00:04:12,000 --> 00:04:14,560
containers much more granularly

139
00:04:14,560 --> 00:04:16,238
and then when we move into even further

140
00:04:16,238 --> 00:04:18,399
into a serverless kind of space

141
00:04:18,399 --> 00:04:20,000
um you're actually just writing code

142
00:04:20,000 --> 00:04:21,519
you're writing functions and there's

143
00:04:21,519 --> 00:04:22,560
function scale

144
00:04:22,560 --> 00:04:24,560
um and you can you know you're

145
00:04:24,560 --> 00:04:26,400
effectively just dropping code

146
00:04:26,400 --> 00:04:27,919
with configuration and it's the

147
00:04:27,919 --> 00:04:29,919
configuration there which is more

148
00:04:29,919 --> 00:04:33,280
um more directly linked to the

149
00:04:33,280 --> 00:04:36,400
the uh the serverless vendor that you're

150
00:04:36,400 --> 00:04:37,040
using

151
00:04:37,040 --> 00:04:39,199
now everything is then pushed down into

152
00:04:39,199 --> 00:04:40,720
the vendor so the vendor takes care of

153
00:04:40,720 --> 00:04:42,000
the operating system

154
00:04:42,000 --> 00:04:44,960
the host vms which can obviously scale

155
00:04:44,960 --> 00:04:45,840
um

156
00:04:45,840 --> 00:04:48,080
the all you care about is the config and

157
00:04:48,080 --> 00:04:50,160
the uh and the applications

158
00:04:50,160 --> 00:04:51,360
so you don't have to worry about the

159
00:04:51,360 --> 00:04:53,520
hardware management no os management

160
00:04:53,520 --> 00:04:55,600
host setup the best cloud portability

161
00:04:55,600 --> 00:04:57,520
because other than the configuration

162
00:04:57,520 --> 00:04:59,280
which may be more vendor specific

163
00:04:59,280 --> 00:05:01,840
you can just move cloud around and of

164
00:05:01,840 --> 00:05:03,280
course you have the maximum

165
00:05:03,280 --> 00:05:06,000
elasticity as well which ultimately

166
00:05:06,000 --> 00:05:06,400
means

167
00:05:06,400 --> 00:05:09,919
as you as you have demand

168
00:05:09,919 --> 00:05:12,960
for the uh for the code

169
00:05:12,960 --> 00:05:14,960
for the you know different functions the

170
00:05:14,960 --> 00:05:16,560
different functions can individually

171
00:05:16,560 --> 00:05:18,080
scale and now we're going to be focusing

172
00:05:18,080 --> 00:05:19,759
on this middle one the containers

173
00:05:19,759 --> 00:05:22,320
and work out how we can kind of learn

174
00:05:22,320 --> 00:05:23,120
some tips

175
00:05:23,120 --> 00:05:25,280
about how we can go through uh different

176
00:05:25,280 --> 00:05:26,240
security

177
00:05:26,240 --> 00:05:28,560
potential security uh vulnerabilities or

178
00:05:28,560 --> 00:05:30,240
security issues in and around

179
00:05:30,240 --> 00:05:32,160
our configuration so let's go through a

180
00:05:32,160 --> 00:05:34,000
number of them and we'll talk through

181
00:05:34,000 --> 00:05:37,440
how we can how we can improve ourselves

182
00:05:37,440 --> 00:05:39,039
so one of the first ones that we're

183
00:05:39,039 --> 00:05:40,720
going to be talking about is preferring

184
00:05:40,720 --> 00:05:42,400
mineral based images what do we mean by

185
00:05:42,400 --> 00:05:45,680
this well a base image or a parent image

186
00:05:45,680 --> 00:05:48,639
we very often don't pick uh because you

187
00:05:48,639 --> 00:05:49,919
know

188
00:05:49,919 --> 00:05:52,880
it's it fits the exact purpose we need

189
00:05:52,880 --> 00:05:54,240
we very often pick it

190
00:05:54,240 --> 00:05:57,600
because it exists or it exists um and

191
00:05:57,600 --> 00:06:00,400
easy to get or exists and we inherit it

192
00:06:00,400 --> 00:06:02,479
from our parent image which goes all the

193
00:06:02,479 --> 00:06:04,160
way up to the to the base image that we

194
00:06:04,160 --> 00:06:04,880
use

195
00:06:04,880 --> 00:06:06,400
and one of the things that we need to

196
00:06:06,400 --> 00:06:08,400
realize is we need to be leaner

197
00:06:08,400 --> 00:06:11,039
about how we pull things in to our

198
00:06:11,039 --> 00:06:11,680
production

199
00:06:11,680 --> 00:06:13,199
and that includes the base the docker

200
00:06:13,199 --> 00:06:15,199
base images now if we look at the number

201
00:06:15,199 --> 00:06:17,440
of vulnerabilities that exist

202
00:06:17,440 --> 00:06:20,560
in uh open source linux distributions

203
00:06:20,560 --> 00:06:22,639
we can see that steadily increasing and

204
00:06:22,639 --> 00:06:24,400
and you know very very heavily

205
00:06:24,400 --> 00:06:26,800
in the last five or six years alone and

206
00:06:26,800 --> 00:06:28,720
a lot of this is due to the popularity

207
00:06:28,720 --> 00:06:30,319
of containers being thrown around and it

208
00:06:30,319 --> 00:06:32,000
being another attack vector

209
00:06:32,000 --> 00:06:35,120
uh for four people now it's very

210
00:06:35,120 --> 00:06:36,960
interesting here because we obviously

211
00:06:36,960 --> 00:06:38,639
you potentially can expect you know

212
00:06:38,639 --> 00:06:40,240
containers because they're being spun up

213
00:06:40,240 --> 00:06:40,560
and

214
00:06:40,560 --> 00:06:42,960
you know removed so quickly uh you would

215
00:06:42,960 --> 00:06:45,039
think that's maybe not the case because

216
00:06:45,039 --> 00:06:47,520
you know previously you'd think it would

217
00:06:47,520 --> 00:06:48,479
be slower

218
00:06:48,479 --> 00:06:51,360
to upgrade uh operating systems because

219
00:06:51,360 --> 00:06:52,639
people are running much more

220
00:06:52,639 --> 00:06:54,479
much much closer to the bare metal and

221
00:06:54,479 --> 00:06:55,759
are less likely to necessarily

222
00:06:55,759 --> 00:06:58,880
you know you spin those up all the time

223
00:06:58,880 --> 00:07:00,800
so they're more likely to get stale but

224
00:07:00,800 --> 00:07:02,400
here we can see a large number of

225
00:07:02,400 --> 00:07:04,080
vulnerabilities steadily increasing

226
00:07:04,080 --> 00:07:05,120
and when we see the number of

227
00:07:05,120 --> 00:07:06,560
vulnerabilities that exist in docker

228
00:07:06,560 --> 00:07:08,080
images and docker containers

229
00:07:08,080 --> 00:07:11,120
uh you can see this is the top 10 docker

230
00:07:11,120 --> 00:07:12,560
images this is actually a little bit old

231
00:07:12,560 --> 00:07:13,919
these are these stats probably about a

232
00:07:13,919 --> 00:07:14,800
year old

233
00:07:14,800 --> 00:07:16,720
but today's today's numbers are actually

234
00:07:16,720 --> 00:07:17,919
very very similar

235
00:07:17,919 --> 00:07:20,880
um i think the top 10 is still 30 and

236
00:07:20,880 --> 00:07:21,520
above

237
00:07:21,520 --> 00:07:23,440
and node i think has gone dropped a

238
00:07:23,440 --> 00:07:25,919
little bit but the key thing here is

239
00:07:25,919 --> 00:07:27,520
you're you have to understand that your

240
00:07:27,520 --> 00:07:29,039
docker containers are full of

241
00:07:29,039 --> 00:07:31,199
vulnerabilities os vulnerabilities

242
00:07:31,199 --> 00:07:35,120
and while some are are going to affect

243
00:07:35,120 --> 00:07:35,759
you and some

244
00:07:35,759 --> 00:07:38,240
aren't uh they're they're you know

245
00:07:38,240 --> 00:07:39,440
potentially

246
00:07:39,440 --> 00:07:43,440
the majority of them uh are maybe in

247
00:07:43,440 --> 00:07:45,520
pieces of the os that you're either not

248
00:07:45,520 --> 00:07:46,960
using or don't need

249
00:07:46,960 --> 00:07:49,120
to have for the success of your

250
00:07:49,120 --> 00:07:50,000
application to

251
00:07:50,000 --> 00:07:52,720
to actually run on it so choosing your

252
00:07:52,720 --> 00:07:54,160
your base image carefully we'll look at

253
00:07:54,160 --> 00:07:55,840
this a little bit more depth

254
00:07:55,840 --> 00:07:58,160
later choosing your base image is is

255
00:07:58,160 --> 00:08:00,879
very very key

256
00:08:00,879 --> 00:08:01,919
uh one of the other things that we're

257
00:08:01,919 --> 00:08:03,360
going to talk about here is the least

258
00:08:03,360 --> 00:08:04,800
privileged user and what do we mean by

259
00:08:04,800 --> 00:08:05,599
this well

260
00:08:05,599 --> 00:08:07,360
you know when we when we when we see a

261
00:08:07,360 --> 00:08:08,960
number of users uh

262
00:08:08,960 --> 00:08:11,919
running um as root you know we think

263
00:08:11,919 --> 00:08:13,840
it's the the cliche oh yeah surely no

264
00:08:13,840 --> 00:08:14,879
one will do that

265
00:08:14,879 --> 00:08:16,800
but one of the key things is in a docker

266
00:08:16,800 --> 00:08:19,520
file uh if you don't specify

267
00:08:19,520 --> 00:08:23,280
a a uh user um uh

268
00:08:23,280 --> 00:08:26,479
tag or a user what they call directive

269
00:08:26,479 --> 00:08:28,319
in your docker file then it will

270
00:08:28,319 --> 00:08:29,919
actually default to root

271
00:08:29,919 --> 00:08:32,719
so the default in a docker file if you

272
00:08:32,719 --> 00:08:34,000
don't specify a user

273
00:08:34,000 --> 00:08:36,719
is to provide all the privileges that

274
00:08:36,719 --> 00:08:38,159
are accessible for as

275
00:08:38,159 --> 00:08:39,839
a root user and what you want to be

276
00:08:39,839 --> 00:08:41,440
doing is selecting the least

277
00:08:41,440 --> 00:08:42,719
privileged user and the idea the

278
00:08:42,719 --> 00:08:44,720
security idea behind this is

279
00:08:44,720 --> 00:08:46,959
provide people with nothing and build up

280
00:08:46,959 --> 00:08:48,160
as required

281
00:08:48,160 --> 00:08:51,040
so when we think about what user we want

282
00:08:51,040 --> 00:08:51,760
a great

283
00:08:51,760 --> 00:08:53,680
best practice is to create your own user

284
00:08:53,680 --> 00:08:54,800
or your own group

285
00:08:54,800 --> 00:08:56,320
and here you can see i'm creating the

286
00:08:56,320 --> 00:08:58,800
user sj maple

287
00:08:58,800 --> 00:09:01,279
and a dedicated group just simply by

288
00:09:01,279 --> 00:09:02,800
using the user directive in the

289
00:09:02,800 --> 00:09:04,720
in the dockerfile and this is going to

290
00:09:04,720 --> 00:09:05,839
create a

291
00:09:05,839 --> 00:09:08,160
system user with no password no home

292
00:09:08,160 --> 00:09:09,600
directory no shell

293
00:09:09,600 --> 00:09:11,440
um we can add this to an existing group

294
00:09:11,440 --> 00:09:12,880
that we created beforehand

295
00:09:12,880 --> 00:09:16,080
and here we're using group ad to do that

296
00:09:16,080 --> 00:09:19,760
um and uh and yeah this is this is

297
00:09:19,760 --> 00:09:21,120
you know pretty much pretty much

298
00:09:21,120 --> 00:09:22,480
straightforward there's nothing there's

299
00:09:22,480 --> 00:09:23,839
nothing magic here

300
00:09:23,839 --> 00:09:25,760
but by adding this directive we're

301
00:09:25,760 --> 00:09:27,200
making sure we don't provide

302
00:09:27,200 --> 00:09:28,320
you know if something did happen in

303
00:09:28,320 --> 00:09:30,240
something you know we did get an exploit

304
00:09:30,240 --> 00:09:32,000
we didn't actually provide people with

305
00:09:32,000 --> 00:09:33,440
the world we provided people with a

306
00:09:33,440 --> 00:09:37,360
really limited set of things they can do

307
00:09:37,360 --> 00:09:38,720
and of course if you're if you're a

308
00:09:38,720 --> 00:09:40,640
node.js fan i'm not here to judge

309
00:09:40,640 --> 00:09:42,640
if you're an ogs fan and you like alpine

310
00:09:42,640 --> 00:09:43,680
images

311
00:09:43,680 --> 00:09:46,240
there's a great generic user for you

312
00:09:46,240 --> 00:09:47,120
that you can use

313
00:09:47,120 --> 00:09:49,760
already set which is called node uh so

314
00:09:49,760 --> 00:09:50,160
here's

315
00:09:50,160 --> 00:09:52,080
here's the the kind of node.js example

316
00:09:52,080 --> 00:09:53,519
which makes use of that

317
00:09:53,519 --> 00:09:57,120
of that generic node user

318
00:09:57,120 --> 00:10:00,240
um okay so um

319
00:10:00,240 --> 00:10:04,079
provide the least um you know possible

320
00:10:04,079 --> 00:10:07,920
uh permissions and uh

321
00:10:07,920 --> 00:10:09,920
and you know if you do get breached or

322
00:10:09,920 --> 00:10:11,519
you do get hacked you know you're not

323
00:10:11,519 --> 00:10:12,399
providing

324
00:10:12,399 --> 00:10:15,519
as much authorization as you

325
00:10:15,519 --> 00:10:18,880
as you require for that attacker okay

326
00:10:18,880 --> 00:10:21,040
number three sign and verify images to

327
00:10:21,040 --> 00:10:22,399
mitigate man in the middle attack so a

328
00:10:22,399 --> 00:10:24,000
man in the middle of taxes where

329
00:10:24,000 --> 00:10:26,560
uh some uh some malicious party exists

330
00:10:26,560 --> 00:10:27,519
between you

331
00:10:27,519 --> 00:10:29,120
and the artifact or the resource that

332
00:10:29,120 --> 00:10:31,440
you're trying to get and as a result

333
00:10:31,440 --> 00:10:35,040
it can intercept the the the file the

334
00:10:35,040 --> 00:10:36,560
the resource that you're trying to

335
00:10:36,560 --> 00:10:37,760
download

336
00:10:37,760 --> 00:10:40,720
potentially uh manipulate that in such a

337
00:10:40,720 --> 00:10:41,760
way maliciously

338
00:10:41,760 --> 00:10:44,800
and provide you with an untrusted uh

339
00:10:44,800 --> 00:10:47,920
resource which you believe to be real so

340
00:10:47,920 --> 00:10:49,600
we put a lot of trust into these images

341
00:10:49,600 --> 00:10:51,839
and and you know a lot of the time

342
00:10:51,839 --> 00:10:53,760
um they're gonna be the code that's

343
00:10:53,760 --> 00:10:54,800
gonna be the code that we run in

344
00:10:54,800 --> 00:10:56,000
production so it's really important to

345
00:10:56,000 --> 00:10:56,720
make sure

346
00:10:56,720 --> 00:10:58,959
that what is pushed by the publisher is

347
00:10:58,959 --> 00:11:01,440
the code that we are actually using so

348
00:11:01,440 --> 00:11:02,480
one of the things here

349
00:11:02,480 --> 00:11:05,360
is to prefer the signed images and here

350
00:11:05,360 --> 00:11:06,079
you can see

351
00:11:06,079 --> 00:11:08,240
on docker hub you can search for a

352
00:11:08,240 --> 00:11:10,000
docker certified image and these are

353
00:11:10,000 --> 00:11:11,600
these are these assigned images there's

354
00:11:11,600 --> 00:11:13,200
not too many of these because

355
00:11:13,200 --> 00:11:14,880
a lot of the time you don't necessarily

356
00:11:14,880 --> 00:11:16,320
see all publishers

357
00:11:16,320 --> 00:11:18,160
signing as they go through but we can

358
00:11:18,160 --> 00:11:19,760
sign images fairly straightforwardly

359
00:11:19,760 --> 00:11:21,120
using docker notary

360
00:11:21,120 --> 00:11:23,040
and this is the these are the docs here

361
00:11:23,040 --> 00:11:25,600
for the docker notary

362
00:11:25,600 --> 00:11:28,800
and notary verifies all uh or you know

363
00:11:28,800 --> 00:11:30,399
the image signature for us and

364
00:11:30,399 --> 00:11:33,279
and stops you from running an image if

365
00:11:33,279 --> 00:11:35,120
the signature of that image is invalid

366
00:11:35,120 --> 00:11:36,320
there's a couple of things that we can

367
00:11:36,320 --> 00:11:37,040
do here

368
00:11:37,040 --> 00:11:39,360
to also test what you uh what you know

369
00:11:39,360 --> 00:11:41,120
what you're pulling down

370
00:11:41,120 --> 00:11:42,959
and one of the ways of doing that is to

371
00:11:42,959 --> 00:11:45,200
enable docker content trust

372
00:11:45,200 --> 00:11:46,800
and this is a really nice way of

373
00:11:46,800 --> 00:11:48,399
experimenting with the verification and

374
00:11:48,399 --> 00:11:50,639
validating that what we're pulling down

375
00:11:50,639 --> 00:11:53,040
are certified images you can temporarily

376
00:11:53,040 --> 00:11:54,480
if you want if you wish

377
00:11:54,480 --> 00:11:56,800
enable docker content trust with that

378
00:11:56,800 --> 00:11:58,000
command there that i'm showing the

379
00:11:58,000 --> 00:12:00,160
export docker content trust equals one

380
00:12:00,160 --> 00:12:01,760
and what that will do is it will stop

381
00:12:01,760 --> 00:12:03,760
you from pulling an unsigned image so

382
00:12:03,760 --> 00:12:05,360
that pulling down an unsigned image will

383
00:12:05,360 --> 00:12:05,839
fail

384
00:12:05,839 --> 00:12:07,360
and you can see just by running with

385
00:12:07,360 --> 00:12:09,519
that which parts of your build are

386
00:12:09,519 --> 00:12:10,240
failing

387
00:12:10,240 --> 00:12:12,079
so making sure that you have trusted

388
00:12:12,079 --> 00:12:14,160
comment content to eliminate that

389
00:12:14,160 --> 00:12:17,519
uh that that that issue

390
00:12:17,519 --> 00:12:20,160
next up find and fix uh find fix and

391
00:12:20,160 --> 00:12:22,079
monitor for open source vulnerabilities

392
00:12:22,079 --> 00:12:23,519
in the operating system and this is this

393
00:12:23,519 --> 00:12:25,040
is really crucial so this is what i was

394
00:12:25,040 --> 00:12:26,240
talking uh

395
00:12:26,240 --> 00:12:28,000
about a little bit previously and we're

396
00:12:28,000 --> 00:12:29,360
going to go into a demo here with a with

397
00:12:29,360 --> 00:12:30,240
a live hack

398
00:12:30,240 --> 00:12:32,079
um when we think about when people

399
00:12:32,079 --> 00:12:34,079
actually test for this the sad thing is

400
00:12:34,079 --> 00:12:35,680
half of the people don't actually test

401
00:12:35,680 --> 00:12:36,480
for this

402
00:12:36,480 --> 00:12:39,839
and only uh 19 of people tests during

403
00:12:39,839 --> 00:12:40,639
development and

404
00:12:40,639 --> 00:12:42,240
of course there exists tools and there

405
00:12:42,240 --> 00:12:44,240
exists free tools uh i'm obviously going

406
00:12:44,240 --> 00:12:45,440
to be showing snick here

407
00:12:45,440 --> 00:12:47,279
uh but here's an example of how you can

408
00:12:47,279 --> 00:12:50,079
test uh in this case the docker node 10

409
00:12:50,079 --> 00:12:53,120
uh image uh passing a docker file this

410
00:12:53,120 --> 00:12:54,320
is how you can scan

411
00:12:54,320 --> 00:12:57,440
a doc file just to provide you with the

412
00:12:57,440 --> 00:12:57,920
list

413
00:12:57,920 --> 00:13:00,800
of uh list of vulnerabilities that exist

414
00:13:00,800 --> 00:13:01,360
in that

415
00:13:01,360 --> 00:13:04,160
image the second thing is after that

416
00:13:04,160 --> 00:13:05,600
this is just going to tell us the images

417
00:13:05,600 --> 00:13:06,079
that we

418
00:13:06,079 --> 00:13:07,920
the vulnerabilities that we have in that

419
00:13:07,920 --> 00:13:09,200
image the second thing is

420
00:13:09,200 --> 00:13:11,040
well what happens if a new vulnerability

421
00:13:11,040 --> 00:13:13,120
comes around that i don't know about

422
00:13:13,120 --> 00:13:16,000
that is after my testing what happens if

423
00:13:16,000 --> 00:13:17,279
a new vulnerability comes around

424
00:13:17,279 --> 00:13:19,120
that in in a container i've already

425
00:13:19,120 --> 00:13:21,519
deployed well one of the key things here

426
00:13:21,519 --> 00:13:23,279
is that almost half people probably

427
00:13:23,279 --> 00:13:25,279
won't even know that a new vulnerability

428
00:13:25,279 --> 00:13:25,920
exists

429
00:13:25,920 --> 00:13:27,839
and we can of course use again free

430
00:13:27,839 --> 00:13:29,040
tools here

431
00:13:29,040 --> 00:13:31,519
to to show how you can do a monitor what

432
00:13:31,519 --> 00:13:32,720
a monitor will do

433
00:13:32,720 --> 00:13:36,320
is it will provide you with uh a a

434
00:13:36,320 --> 00:13:38,240
an email or whatever however you choose

435
00:13:38,240 --> 00:13:39,360
to consume

436
00:13:39,360 --> 00:13:41,680
these these these report these

437
00:13:41,680 --> 00:13:42,800
notifications

438
00:13:42,800 --> 00:13:44,800
it'll provide you with the information

439
00:13:44,800 --> 00:13:46,639
that a new vulnerability exists

440
00:13:46,639 --> 00:13:49,199
and affects your current uh deployment

441
00:13:49,199 --> 00:13:49,680
so

442
00:13:49,680 --> 00:13:52,079
having the insight of which

443
00:13:52,079 --> 00:13:53,920
vulnerabilities exist before you go to

444
00:13:53,920 --> 00:13:55,680
production and if you can fix them

445
00:13:55,680 --> 00:13:57,839
as well as when new vulnerabilities come

446
00:13:57,839 --> 00:14:00,000
in is extremely important

447
00:14:00,000 --> 00:14:02,160
now because we test a lot of docker

448
00:14:02,160 --> 00:14:03,760
containers and we test a lot of app code

449
00:14:03,760 --> 00:14:04,720
as well

450
00:14:04,720 --> 00:14:06,240
we have a number of insights which we

451
00:14:06,240 --> 00:14:08,800
can share with you uh based on

452
00:14:08,800 --> 00:14:11,199
the uh based on what we see from the

453
00:14:11,199 --> 00:14:12,720
scans that people are running so these

454
00:14:12,720 --> 00:14:13,040
are

455
00:14:13,040 --> 00:14:14,959
this isn't necessarily across the entire

456
00:14:14,959 --> 00:14:17,120
ecosystem these are just the scans

457
00:14:17,120 --> 00:14:19,120
which people come to snook for so

458
00:14:19,120 --> 00:14:20,880
interestingly 44

459
00:14:20,880 --> 00:14:22,720
of docker image scans have known

460
00:14:22,720 --> 00:14:23,920
vulnerabilities

461
00:14:23,920 --> 00:14:26,880
uh where there were newer versions uh

462
00:14:26,880 --> 00:14:27,519
that

463
00:14:27,519 --> 00:14:30,160
had a more secure base image and this is

464
00:14:30,160 --> 00:14:31,040
really interesting so

465
00:14:31,040 --> 00:14:32,560
you know i totally agree with with

466
00:14:32,560 --> 00:14:33,920
baruch on the last session as well in

467
00:14:33,920 --> 00:14:34,240
that

468
00:14:34,240 --> 00:14:35,760
you don't necessarily want to constantly

469
00:14:35,760 --> 00:14:37,279
stay with latest because you don't

470
00:14:37,279 --> 00:14:38,480
necessarily know

471
00:14:38,480 --> 00:14:40,720
exactly what's coming in and it it's one

472
00:14:40,720 --> 00:14:42,480
of those kind of hard things to do

473
00:14:42,480 --> 00:14:44,399
but equally you don't want to be sat on

474
00:14:44,399 --> 00:14:46,320
a on such an old version

475
00:14:46,320 --> 00:14:47,680
that you know you're constantly getting

476
00:14:47,680 --> 00:14:49,519
newer vulnerabilities in and you're just

477
00:14:49,519 --> 00:14:51,120
staying on that version without picking

478
00:14:51,120 --> 00:14:51,440
up

479
00:14:51,440 --> 00:14:53,120
the fixes that exist in the latest

480
00:14:53,120 --> 00:14:54,399
version so there's there's a real

481
00:14:54,399 --> 00:14:55,920
balance between that

482
00:14:55,920 --> 00:14:57,519
and one other thing here is and this is

483
00:14:57,519 --> 00:14:59,199
where that balance exists

484
00:14:59,199 --> 00:15:00,959
one in five of docker images that were

485
00:15:00,959 --> 00:15:03,440
scanned um they can reduce the number

486
00:15:03,440 --> 00:15:05,279
of vulnerabilities just by rebuilding

487
00:15:05,279 --> 00:15:06,880
that docker image so by rebuilding the

488
00:15:06,880 --> 00:15:07,600
docker image

489
00:15:07,600 --> 00:15:09,839
you'll get that you'll pick up the newer

490
00:15:09,839 --> 00:15:11,279
os uh

491
00:15:11,279 --> 00:15:13,839
sorry os dependencies and and you will

492
00:15:13,839 --> 00:15:14,320
um

493
00:15:14,320 --> 00:15:16,079
you you get you'll effectively reduce

494
00:15:16,079 --> 00:15:17,680
the number of vulnerabilities so there's

495
00:15:17,680 --> 00:15:19,279
a complete balance there that you need

496
00:15:19,279 --> 00:15:19,760
to

497
00:15:19,760 --> 00:15:22,320
you need to be able to uh to use now of

498
00:15:22,320 --> 00:15:23,519
course a good step here

499
00:15:23,519 --> 00:15:25,519
is to use that minimal base image

500
00:15:25,519 --> 00:15:27,120
because using that minimal base image

501
00:15:27,120 --> 00:15:28,639
will reduce the overall number of

502
00:15:28,639 --> 00:15:29,440
vulnerabilities

503
00:15:29,440 --> 00:15:31,040
because the overall number of packages

504
00:15:31,040 --> 00:15:33,920
that we have is it doesn't exist

505
00:15:33,920 --> 00:15:35,199
now we're going to talk about i'm going

506
00:15:35,199 --> 00:15:37,199
to do a live hack here and we're going

507
00:15:37,199 --> 00:15:38,639
to be talking about one specific

508
00:15:38,639 --> 00:15:40,160
vulnerability which is exists

509
00:15:40,160 --> 00:15:42,240
in an image magic package and and many

510
00:15:42,240 --> 00:15:44,079
of you who are familiar with containers

511
00:15:44,079 --> 00:15:45,759
and familiar with osbn abilities

512
00:15:45,759 --> 00:15:47,279
will have likely heard of this package

513
00:15:47,279 --> 00:15:49,279
before and and we're going to be talking

514
00:15:49,279 --> 00:15:50,240
about this

515
00:15:50,240 --> 00:15:52,720
this this attack vector where we can

516
00:15:52,720 --> 00:15:54,000
pass in an input

517
00:15:54,000 --> 00:15:56,880
uh that provides uh that is not

518
00:15:56,880 --> 00:15:57,600
validated

519
00:15:57,600 --> 00:16:00,240
and we can effectively break out of that

520
00:16:00,240 --> 00:16:02,320
and then start uh start hacking

521
00:16:02,320 --> 00:16:05,680
our environment so um let me just

522
00:16:05,680 --> 00:16:08,399
pull this up so okay i'm going to come

523
00:16:08,399 --> 00:16:10,800
actually look there's the uh

524
00:16:10,800 --> 00:16:12,639
let's give you a behind-the-scenes tour

525
00:16:12,639 --> 00:16:15,360
of uh of what we're using to uh hello

526
00:16:15,360 --> 00:16:17,360
there's sam there's sam over there

527
00:16:17,360 --> 00:16:18,959
uh this is this is what we're doing to

528
00:16:18,959 --> 00:16:20,880
stream this is called stream yard

529
00:16:20,880 --> 00:16:22,959
it's part of the behind the scenes tools

530
00:16:22,959 --> 00:16:24,959
that we that we use and i can

531
00:16:24,959 --> 00:16:26,399
from here show you a whole bunch of

532
00:16:26,399 --> 00:16:28,240
things what should i do sam shall i

533
00:16:28,240 --> 00:16:30,079
i know i'm gonna put a banner up to say

534
00:16:30,079 --> 00:16:31,600
uh should we say we're having some

535
00:16:31,600 --> 00:16:33,680
difficulties stay tuned yep there we go

536
00:16:33,680 --> 00:16:35,360
we can say uh let's donate let's have

537
00:16:35,360 --> 00:16:36,800
5.8 awesome

538
00:16:36,800 --> 00:16:38,560
so this is this is the really nice uh

539
00:16:38,560 --> 00:16:39,680
this is the really nice let's bring

540
00:16:39,680 --> 00:16:41,600
sammy in shall we hey sami how's it

541
00:16:41,600 --> 00:16:42,160
going

542
00:16:42,160 --> 00:16:44,959
wow how am i doing sam you're doing

543
00:16:44,959 --> 00:16:46,959
wonderfully i was just waiting to see

544
00:16:46,959 --> 00:16:48,639
something interesting and then you

545
00:16:48,639 --> 00:16:51,360
got um and it's like oh finally

546
00:16:51,360 --> 00:16:53,600
something

547
00:16:53,680 --> 00:16:55,759
speaker awesome well i'll remove you for

548
00:16:55,759 --> 00:16:56,800
now and

549
00:16:56,800 --> 00:17:00,079
uh and we'll talk with sam in a bit but

550
00:17:00,079 --> 00:17:01,759
okay you want to see my uh you don't

551
00:17:01,759 --> 00:17:03,360
want to see my my slack

552
00:17:03,360 --> 00:17:06,880
okay here we go so um this is this is

553
00:17:06,880 --> 00:17:07,839
what i want so

554
00:17:07,839 --> 00:17:10,160
here we go we have a docker container um

555
00:17:10,160 --> 00:17:11,839
if i cut this docker file

556
00:17:11,839 --> 00:17:14,559
uh you can see we're running off wheezy

557
00:17:14,559 --> 00:17:16,240
debian wheezy which is uh one of the

558
00:17:16,240 --> 00:17:17,760
vulnerable versions of

559
00:17:17,760 --> 00:17:20,000
which has this image magic issue uh

560
00:17:20,000 --> 00:17:21,039
we're just gonna pull down

561
00:17:21,039 --> 00:17:22,959
we're gonna do an npm install uh and

562
00:17:22,959 --> 00:17:24,959
we're gonna run npm exposing a couple of

563
00:17:24,959 --> 00:17:25,599
ports

564
00:17:25,599 --> 00:17:28,000
um so for here all i need to do is just

565
00:17:28,000 --> 00:17:28,960
uh

566
00:17:28,960 --> 00:17:32,960
uh run the docker and we'll pull

567
00:17:34,080 --> 00:17:35,840
okay so we have that running servers

568
00:17:35,840 --> 00:17:38,880
listening already now if i come over to

569
00:17:38,880 --> 00:17:42,960
uh let me just get rid of this so you

570
00:17:42,960 --> 00:17:45,840
don't have to see that every single time

571
00:17:45,840 --> 00:17:46,799
uh okay

572
00:17:46,799 --> 00:17:51,679
so um and i'll jump over to

573
00:17:51,679 --> 00:17:54,080
this one here if i refresh this you can

574
00:17:54,080 --> 00:17:55,440
actually see this running this is our

575
00:17:55,440 --> 00:17:56,880
this is our application which is running

576
00:17:56,880 --> 00:17:58,000
in the docker container

577
00:17:58,000 --> 00:18:01,039
if i choose a file here let's um let's

578
00:18:01,039 --> 00:18:01,919
grab

579
00:18:01,919 --> 00:18:05,039
ah let's grab the sponsors so if i open

580
00:18:05,039 --> 00:18:05,679
that file

581
00:18:05,679 --> 00:18:06,880
all this is going to do is it's going to

582
00:18:06,880 --> 00:18:09,280
convert it to a different size okay this

583
00:18:09,280 --> 00:18:10,960
is part of what image magic does

584
00:18:10,960 --> 00:18:13,360
if i resize that there's our sponsors

585
00:18:13,360 --> 00:18:14,000
thank you very much

586
00:18:14,000 --> 00:18:15,280
to our sponsors who do we have there we

587
00:18:15,280 --> 00:18:17,520
have rapid7 we have trend micro we have

588
00:18:17,520 --> 00:18:18,720
ibm atlanta

589
00:18:18,720 --> 00:18:22,000
new relic snick uh the

590
00:18:22,000 --> 00:18:23,919
the new stack octa thank you to all

591
00:18:23,919 --> 00:18:25,280
these wonderful sponsors

592
00:18:25,280 --> 00:18:28,000
um and we can basically just resize this

593
00:18:28,000 --> 00:18:28,400
so

594
00:18:28,400 --> 00:18:30,400
that's all great but let's let's do

595
00:18:30,400 --> 00:18:32,080
something a little bit more interesting

596
00:18:32,080 --> 00:18:35,360
um if i do an ls here uh i'm going to

597
00:18:35,360 --> 00:18:37,440
actually pass in something like this and

598
00:18:37,440 --> 00:18:39,360
let's count this so you can see

599
00:18:39,360 --> 00:18:41,679
what's in here so i'm going to actually

600
00:18:41,679 --> 00:18:43,360
do some some regular stuff i'm going to

601
00:18:43,360 --> 00:18:44,080
fill

602
00:18:44,080 --> 00:18:45,840
uh and here's a url but look i'm

603
00:18:45,840 --> 00:18:47,039
actually going to break out of this and

604
00:18:47,039 --> 00:18:48,600
i'm going to touch a new file called

605
00:18:48,600 --> 00:18:51,440
rce1 so let's in this case uh

606
00:18:51,440 --> 00:18:53,840
run this and see what happens so if i

607
00:18:53,840 --> 00:18:54,640
come here

608
00:18:54,640 --> 00:18:57,280
and i say yes let's in let's indeed add

609
00:18:57,280 --> 00:18:58,559
another file

610
00:18:58,559 --> 00:19:01,200
and in this case i'm in the wrong place

611
00:19:01,200 --> 00:19:01,760
now

612
00:19:01,760 --> 00:19:05,120
let's come here let's go over to the

613
00:19:05,120 --> 00:19:08,400
uh sam again let's go

614
00:19:08,400 --> 00:19:12,880
over here and into my

615
00:19:12,880 --> 00:19:16,039
file into my exploits and run

616
00:19:16,039 --> 00:19:19,200
rte1 let's do a resize of that

617
00:19:19,200 --> 00:19:20,720
image success we don't actually see a

618
00:19:20,720 --> 00:19:22,320
file here but let's

619
00:19:22,320 --> 00:19:25,760
jump into my docker

620
00:19:25,760 --> 00:19:27,520
image so we're just going to do an exact

621
00:19:27,520 --> 00:19:28,880
just to get a console

622
00:19:28,880 --> 00:19:31,760
and here if i do an ls all of a sudden

623
00:19:31,760 --> 00:19:32,960
if i was to do an

624
00:19:32,960 --> 00:19:35,919
ls minus one uh it's 35 minutes past the

625
00:19:35,919 --> 00:19:37,440
hour it is indeed

626
00:19:37,440 --> 00:19:40,320
um we can see that file has been touched

627
00:19:40,320 --> 00:19:41,679
okay so this time

628
00:19:41,679 --> 00:19:43,200
let's do something a little bit more

629
00:19:43,200 --> 00:19:45,000
interesting let's cap

630
00:19:45,000 --> 00:19:48,160
rce2 and here we can see what we're

631
00:19:48,160 --> 00:19:48,799
going to do

632
00:19:48,799 --> 00:19:50,720
is we're going to go w get and we're

633
00:19:50,720 --> 00:19:53,039
going to grab um

634
00:19:53,039 --> 00:19:55,799
a file that is being served called

635
00:19:55,799 --> 00:19:57,919
rsr.sh so here what we're going to first

636
00:19:57,919 --> 00:19:58,480
do

637
00:19:58,480 --> 00:20:01,200
is in this directory which is the

638
00:20:01,200 --> 00:20:02,559
exploits directory

639
00:20:02,559 --> 00:20:04,080
we're going to want to share we're going

640
00:20:04,080 --> 00:20:06,000
to want to serve this file so let me go

641
00:20:06,000 --> 00:20:07,120
to serve dot

642
00:20:07,120 --> 00:20:09,520
and now this is going to be working just

643
00:20:09,520 --> 00:20:10,159
fine

644
00:20:10,159 --> 00:20:11,840
um there you go i'm telling everyone to

645
00:20:11,840 --> 00:20:13,360
update and look there's my update

646
00:20:13,360 --> 00:20:14,159
available

647
00:20:14,159 --> 00:20:16,400
um so here now we're going to be we're

648
00:20:16,400 --> 00:20:18,559
going to be pulling in this ardol s8 so

649
00:20:18,559 --> 00:20:20,240
we're pulling in a potentially malicious

650
00:20:20,240 --> 00:20:20,880
file

651
00:20:20,880 --> 00:20:23,760
let me have a look at that r.s.h and

652
00:20:23,760 --> 00:20:24,799
what's that going to do well it's going

653
00:20:24,799 --> 00:20:25,600
to double you get

654
00:20:25,600 --> 00:20:28,080
net cap um we're going to um we're going

655
00:20:28,080 --> 00:20:29,919
to extract it we're going to run it

656
00:20:29,919 --> 00:20:31,360
i'm going to make it and run it and

657
00:20:31,360 --> 00:20:34,000
we're going to ping uh something a a

658
00:20:34,000 --> 00:20:36,720
port 3131 let's go and make that

659
00:20:36,720 --> 00:20:37,600
available

660
00:20:37,600 --> 00:20:40,480
uh netcat running now 3131 this is just

661
00:20:40,480 --> 00:20:41,919
sitting here listening

662
00:20:41,919 --> 00:20:44,960
um and uh yeah that's pretty much all we

663
00:20:44,960 --> 00:20:46,640
need to do there so

664
00:20:46,640 --> 00:20:48,799
if i just do an ls there you can see

665
00:20:48,799 --> 00:20:50,960
rce1 is there there's nothing else

666
00:20:50,960 --> 00:20:54,400
there no netcat or anything like that so

667
00:20:54,400 --> 00:20:57,360
let's try and actually run this now and

668
00:20:57,360 --> 00:20:58,480
see what we can

669
00:20:58,480 --> 00:21:01,840
see what we can do so let's yes indeed

670
00:21:01,840 --> 00:21:05,760
run that and run rce2

671
00:21:05,760 --> 00:21:09,760
let's resize huh it seems to just be

672
00:21:09,760 --> 00:21:12,000
spinning i wonder what it's doing so

673
00:21:12,000 --> 00:21:14,400
let's come back over here and have a

674
00:21:14,400 --> 00:21:16,000
look what it's doing here in our docker

675
00:21:16,000 --> 00:21:17,520
container if i do an ls

676
00:21:17,520 --> 00:21:19,600
well look it looks like we've got netcat

677
00:21:19,600 --> 00:21:21,280
uh we've instructed it we've

678
00:21:21,280 --> 00:21:23,679
untied it uh it's most likely running

679
00:21:23,679 --> 00:21:24,559
right now

680
00:21:24,559 --> 00:21:27,360
has to come over here to my uh to my

681
00:21:27,360 --> 00:21:29,120
local this isn't running in docker this

682
00:21:29,120 --> 00:21:30,400
is just running on my local

683
00:21:30,400 --> 00:21:33,039
uh machine and that's type ls all of a

684
00:21:33,039 --> 00:21:34,799
sudden we've effectively got our own

685
00:21:34,799 --> 00:21:36,720
almost like this reverse kind of proxy

686
00:21:36,720 --> 00:21:38,159
reverse shell

687
00:21:38,159 --> 00:21:41,520
into the uh into the container um

688
00:21:41,520 --> 00:21:43,760
so from here from my local machine let's

689
00:21:43,760 --> 00:21:45,200
just do some interesting things let's do

690
00:21:45,200 --> 00:21:46,640
a ps minus ef

691
00:21:46,640 --> 00:21:48,640
there we go process is running on that

692
00:21:48,640 --> 00:21:50,000
local on that container

693
00:21:50,000 --> 00:21:53,360
let's do an ls of slash etc password

694
00:21:53,360 --> 00:21:54,720
let's see if we've got

695
00:21:54,720 --> 00:21:59,840
uh some

696
00:22:00,159 --> 00:22:02,480
oh let's look sorry let's do a cat of

697
00:22:02,480 --> 00:22:03,280
etc

698
00:22:03,280 --> 00:22:04,720
slash password that's what i really

699
00:22:04,720 --> 00:22:06,400
wanted to do so it's still early here

700
00:22:06,400 --> 00:22:08,240
there we go there's our atc password

701
00:22:08,240 --> 00:22:09,520
so now we can see this really

702
00:22:09,520 --> 00:22:11,440
interesting hack straight into this

703
00:22:11,440 --> 00:22:14,799
environment so a couple of things then

704
00:22:14,799 --> 00:22:18,720
um let me go jump right here to this

705
00:22:18,720 --> 00:22:20,880
presentation a couple of things how long

706
00:22:20,880 --> 00:22:22,720
have we got left let's have a look we've

707
00:22:22,720 --> 00:22:23,360
got

708
00:22:23,360 --> 00:22:26,559
about 15 few more minutes maybe

709
00:22:26,559 --> 00:22:30,080
um so here we have input improper input

710
00:22:30,080 --> 00:22:31,280
validation we've got a number of things

711
00:22:31,280 --> 00:22:32,400
here that we could do

712
00:22:32,400 --> 00:22:33,919
if we don't need image magic we can

713
00:22:33,919 --> 00:22:35,919
remove the package we maybe find a

714
00:22:35,919 --> 00:22:38,159
a slimmer uh version that doesn't have

715
00:22:38,159 --> 00:22:39,760
this we can maybe remove it we could

716
00:22:39,760 --> 00:22:40,559
maybe

717
00:22:40,559 --> 00:22:42,159
go to a different base image that has

718
00:22:42,159 --> 00:22:43,600
fewer vulnerabilities there are a number

719
00:22:43,600 --> 00:22:44,240
of things

720
00:22:44,240 --> 00:22:47,600
that we can do here so

721
00:22:47,600 --> 00:22:49,360
let's do a few more before we uh before

722
00:22:49,360 --> 00:22:51,440
we finish uh use a linter

723
00:22:51,440 --> 00:22:53,520
linter is a very very important thing as

724
00:22:53,520 --> 00:22:55,120
a developer to use here we have

725
00:22:55,120 --> 00:22:58,480
halo link and halo link can look at our

726
00:22:58,480 --> 00:23:00,799
look at our files uh like our docker

727
00:23:00,799 --> 00:23:01,919
file for example

728
00:23:01,919 --> 00:23:04,080
and it can say tell us to say use copy

729
00:23:04,080 --> 00:23:05,679
instead of ad for files and folders and

730
00:23:05,679 --> 00:23:07,039
things like that very very

731
00:23:07,039 --> 00:23:10,000
useful things that we can do um another

732
00:23:10,000 --> 00:23:11,600
thing we can do is find and fix

733
00:23:11,600 --> 00:23:13,280
uh vulnerabilities that exist in our

734
00:23:13,280 --> 00:23:14,960
open source libraries as well

735
00:23:14,960 --> 00:23:16,960
i can give you a quick demo of that uh

736
00:23:16,960 --> 00:23:18,799
towards the end if we have time

737
00:23:18,799 --> 00:23:20,799
but one of the key things here is that

738
00:23:20,799 --> 00:23:22,400
when the when i can because our

739
00:23:22,400 --> 00:23:23,919
containers are much better

740
00:23:23,919 --> 00:23:26,640
at keeping up to date with our os

741
00:23:26,640 --> 00:23:28,559
attackers are targeting the os

742
00:23:28,559 --> 00:23:31,120
less and they're targeting our our

743
00:23:31,120 --> 00:23:32,400
applications more

744
00:23:32,400 --> 00:23:34,400
so as a result what we can see here is

745
00:23:34,400 --> 00:23:35,840
the code that you write is very very

746
00:23:35,840 --> 00:23:38,559
small compared to the application uh

747
00:23:38,559 --> 00:23:40,240
that you deploy in that application can

748
00:23:40,240 --> 00:23:40,960
contain

749
00:23:40,960 --> 00:23:43,600
direct and transitive dependencies and

750
00:23:43,600 --> 00:23:45,520
we can see the number of uh

751
00:23:45,520 --> 00:23:47,200
packages which are indexed in the

752
00:23:47,200 --> 00:23:49,279
different open source ecosystems

753
00:23:49,279 --> 00:23:51,200
is is growing massively and we're well

754
00:23:51,200 --> 00:23:53,200
over a million now in npm

755
00:23:53,200 --> 00:23:56,080
and dependencies exist both in our

756
00:23:56,080 --> 00:23:57,440
transitive dependencies

757
00:23:57,440 --> 00:23:59,600
as well as our direct dependencies and

758
00:23:59,600 --> 00:24:00,799
here you can see

759
00:24:00,799 --> 00:24:03,600
you know largely specifically for npm

760
00:24:03,600 --> 00:24:04,400
and maven

761
00:24:04,400 --> 00:24:05,919
they we have more vulnerabilities here

762
00:24:05,919 --> 00:24:08,080
in our transitives and that is largely

763
00:24:08,080 --> 00:24:08,640
because

764
00:24:08,640 --> 00:24:10,400
we have a larger number of transitives

765
00:24:10,400 --> 00:24:12,640
than we do in uh direct dependencies

766
00:24:12,640 --> 00:24:14,000
so it's very very important to

767
00:24:14,000 --> 00:24:15,840
understand all the packages and all the

768
00:24:15,840 --> 00:24:18,000
dependencies that we're pulling in

769
00:24:18,000 --> 00:24:19,520
as well as where the vulnerabilities

770
00:24:19,520 --> 00:24:22,480
exist that we also pull in

771
00:24:22,480 --> 00:24:25,679
okay not too many more slides um one of

772
00:24:25,679 --> 00:24:27,120
the things that here that we can suggest

773
00:24:27,120 --> 00:24:29,120
is to also use multi-stage build

774
00:24:29,120 --> 00:24:31,279
for small and secure images so what this

775
00:24:31,279 --> 00:24:32,480
is talking about really

776
00:24:32,480 --> 00:24:34,640
is the idea that when we are building

777
00:24:34,640 --> 00:24:36,400
our image we do a number of things

778
00:24:36,400 --> 00:24:38,159
before we are ready to go to production

779
00:24:38,159 --> 00:24:40,720
and if we take something like golang or

780
00:24:40,720 --> 00:24:42,320
or java for example

781
00:24:42,320 --> 00:24:43,679
we need to be able to build that

782
00:24:43,679 --> 00:24:45,840
application first that could include

783
00:24:45,840 --> 00:24:47,440
compilation and other things

784
00:24:47,440 --> 00:24:49,919
now the compiler will obviously produce

785
00:24:49,919 --> 00:24:51,840
uh some executable that can run on a

786
00:24:51,840 --> 00:24:52,880
virtual machine

787
00:24:52,880 --> 00:24:56,080
uh on an operating system um

788
00:24:56,080 --> 00:24:59,520
sometimes without dependencies um but

789
00:24:59,520 --> 00:25:01,440
this is a good reason for why docker has

790
00:25:01,440 --> 00:25:03,600
this kind of multi-stage capability

791
00:25:03,600 --> 00:25:06,720
it allows us to select

792
00:25:06,720 --> 00:25:08,960
what which kind of uh which kind of

793
00:25:08,960 --> 00:25:10,320
artifacts and files

794
00:25:10,320 --> 00:25:13,919
um don't really exist or you

795
00:25:13,919 --> 00:25:15,600
don't really have a reason to be in

796
00:25:15,600 --> 00:25:17,279
production and as a result

797
00:25:17,279 --> 00:25:19,760
you can have multiple temporary images

798
00:25:19,760 --> 00:25:20,799
that you can

799
00:25:20,799 --> 00:25:23,840
remove during the build process so you

800
00:25:23,840 --> 00:25:24,720
only keep

801
00:25:24,720 --> 00:25:26,640
the latest image with the information

802
00:25:26,640 --> 00:25:28,000
that you want to copy into

803
00:25:28,000 --> 00:25:30,799
it that you want to push into production

804
00:25:30,799 --> 00:25:32,159
so you might have a couple of

805
00:25:32,159 --> 00:25:34,799
uh images here for a golan docker

806
00:25:34,799 --> 00:25:35,520
application

807
00:25:35,520 --> 00:25:37,679
one which is a large image built with

808
00:25:37,679 --> 00:25:39,600
large lots of dev dependencies

809
00:25:39,600 --> 00:25:41,200
in order to build your application and

810
00:25:41,200 --> 00:25:42,720
run your tests to make sure everything

811
00:25:42,720 --> 00:25:44,080
is ready to go to production

812
00:25:44,080 --> 00:25:45,840
but image b is a much thinner

813
00:25:45,840 --> 00:25:48,320
application a much thinner image

814
00:25:48,320 --> 00:25:50,799
in terms of just the footprint and the

815
00:25:50,799 --> 00:25:52,480
number of libraries that you deploy into

816
00:25:52,480 --> 00:25:52,720
it

817
00:25:52,720 --> 00:25:54,880
and it only has the artifacts required

818
00:25:54,880 --> 00:25:56,080
to run that application

819
00:25:56,080 --> 00:25:58,240
rather than build that application so in

820
00:25:58,240 --> 00:25:59,120
summary

821
00:25:59,120 --> 00:26:00,400
um there are a number of things here

822
00:26:00,400 --> 00:26:02,320
that you can do um

823
00:26:02,320 --> 00:26:04,720
and you know it's important to it's

824
00:26:04,720 --> 00:26:06,320
important to at least think about all of

825
00:26:06,320 --> 00:26:07,520
them and understand

826
00:26:07,520 --> 00:26:10,000
which ones and how you can add this into

827
00:26:10,000 --> 00:26:11,600
your pipeline

828
00:26:11,600 --> 00:26:13,120
but at that stage given that we've only

829
00:26:13,120 --> 00:26:14,799
got a a few minutes left

830
00:26:14,799 --> 00:26:17,200
i'm happy to take any questions uh and

831
00:26:17,200 --> 00:26:18,480
in lieu of questions i can obviously

832
00:26:18,480 --> 00:26:19,679
show you another hack

833
00:26:19,679 --> 00:26:22,480
so let me pass over to uh let me pass

834
00:26:22,480 --> 00:26:24,240
over to sammy and

835
00:26:24,240 --> 00:26:26,640
uh we're actually don't have anything

836
00:26:26,640 --> 00:26:27,360
specific

837
00:26:27,360 --> 00:26:30,559
on um the channels at the moment

838
00:26:30,559 --> 00:26:32,960
um but if anyone does have a question to

839
00:26:32,960 --> 00:26:34,559
bring them in but if you want to show

840
00:26:34,559 --> 00:26:34,880
the

841
00:26:34,880 --> 00:26:36,559
simple how we wait we've got three

842
00:26:36,559 --> 00:26:38,240
minutes can you do it in three minutes

843
00:26:38,240 --> 00:26:41,760
i can i can try uh what i need to do

844
00:26:41,760 --> 00:26:43,279
first is i need to do a doc

845
00:26:43,279 --> 00:26:48,000
let's do a docker compose uh

846
00:26:48,799 --> 00:26:50,000
okay so let's bring this docker

847
00:26:50,000 --> 00:26:51,120
container up and what this docker

848
00:26:51,120 --> 00:26:52,320
container is going to be

849
00:26:52,320 --> 00:26:55,679
going to show us is a uh let me get back

850
00:26:55,679 --> 00:26:58,159
a couple uh what this what this is going

851
00:26:58,159 --> 00:27:00,880
to show us is a nice little application

852
00:27:00,880 --> 00:27:05,039
which is going to be running on 3001

853
00:27:05,039 --> 00:27:06,240
i think it's there there we go it's a

854
00:27:06,240 --> 00:27:08,080
goof application and this is just a

855
00:27:08,080 --> 00:27:09,600
regular to do application but what we

856
00:27:09,600 --> 00:27:10,240
have is

857
00:27:10,240 --> 00:27:12,960
uh something which is uh serving us uh

858
00:27:12,960 --> 00:27:14,159
some html on

859
00:27:14,159 --> 00:27:15,919
from this public application i've

860
00:27:15,919 --> 00:27:17,440
already actually scanned this

861
00:27:17,440 --> 00:27:18,320
application

862
00:27:18,320 --> 00:27:20,720
in and if i look for the uh if i look

863
00:27:20,720 --> 00:27:21,600
for the

864
00:27:21,600 --> 00:27:23,840
uh directory traversal here it is

865
00:27:23,840 --> 00:27:25,200
directory traversal in

866
00:27:25,200 --> 00:27:28,480
st this is the this is the package which

867
00:27:28,480 --> 00:27:29,760
is serving us this

868
00:27:29,760 --> 00:27:31,760
uh serving us this file so what we're

869
00:27:31,760 --> 00:27:32,799
going to do is we're going to traverse

870
00:27:32,799 --> 00:27:34,159
the directories we're going to traverse

871
00:27:34,159 --> 00:27:36,159
this public directory to try and get to

872
00:27:36,159 --> 00:27:37,360
a space

873
00:27:37,360 --> 00:27:40,080
that we shouldn't have access to so this

874
00:27:40,080 --> 00:27:40,720
is going to be

875
00:27:40,720 --> 00:27:43,039
a hack to view the file system on a

876
00:27:43,039 --> 00:27:44,080
docker container

877
00:27:44,080 --> 00:27:46,159
whereby we're accessing it through the

878
00:27:46,159 --> 00:27:47,600
application so previously

879
00:27:47,600 --> 00:27:50,000
we were doing it with an os package now

880
00:27:50,000 --> 00:27:51,279
we're doing it with an application

881
00:27:51,279 --> 00:27:51,840
package

882
00:27:51,840 --> 00:27:53,840
so if i call you make this a little bit

883
00:27:53,840 --> 00:27:54,960
bigger if i

884
00:27:54,960 --> 00:27:58,000
call um

885
00:27:59,279 --> 00:28:02,080
that same address got two minutes left

886
00:28:02,080 --> 00:28:03,200
just under two minutes

887
00:28:03,200 --> 00:28:05,840
so if i call that you can see uh that's

888
00:28:05,840 --> 00:28:07,840
the same html that we just showed one

889
00:28:07,840 --> 00:28:08,640
minute left

890
00:28:08,640 --> 00:28:09,679
but i'm going to do a direct quick

891
00:28:09,679 --> 00:28:12,000
reversal so i do a dot dot slash we can

892
00:28:12,000 --> 00:28:12,559
see

893
00:28:12,559 --> 00:28:14,480
that the st package has recognized we're

894
00:28:14,480 --> 00:28:15,760
doing a dot dot slash

895
00:28:15,760 --> 00:28:17,760
so we can see we're at the home page so

896
00:28:17,760 --> 00:28:19,600
the thing here which we need to do

897
00:28:19,600 --> 00:28:22,399
is represent these dots as percent to e

898
00:28:22,399 --> 00:28:23,039
percent

899
00:28:23,039 --> 00:28:26,080
to e and this is gonna uh this is gonna

900
00:28:26,080 --> 00:28:28,399
represent the dots if it with the url

901
00:28:28,399 --> 00:28:30,480
uh mapping and now you can see we've

902
00:28:30,480 --> 00:28:31,840
broken out of that public

903
00:28:31,840 --> 00:28:34,480
and by doing that i can now have a look

904
00:28:34,480 --> 00:28:36,000
at my package json

905
00:28:36,000 --> 00:28:38,880
that exists uh in the application i can

906
00:28:38,880 --> 00:28:40,320
also continue that

907
00:28:40,320 --> 00:28:42,399
all the way back if i wanted to let's

908
00:28:42,399 --> 00:28:43,360
see

909
00:28:43,360 --> 00:28:46,880
which user in uh all the way back

910
00:28:46,880 --> 00:28:48,799
to the root and then have a look at my

911
00:28:48,799 --> 00:28:50,159
etc

912
00:28:50,159 --> 00:28:52,799
password

913
00:28:53,360 --> 00:28:55,679
and there's our atc password the fix for

914
00:28:55,679 --> 00:28:57,279
this is actually pretty simple

915
00:28:57,279 --> 00:28:59,600
uh all we would actually need to do here

916
00:28:59,600 --> 00:29:01,760
is upgrade to a zero to five

917
00:29:01,760 --> 00:29:03,360
which i can do automatically by creating

918
00:29:03,360 --> 00:29:05,200
a pull request or i can actually and

919
00:29:05,200 --> 00:29:07,360
this is just using the snick free tool

920
00:29:07,360 --> 00:29:09,440
or i can or i can choose to do that

921
00:29:09,440 --> 00:29:10,399
manually

922
00:29:10,399 --> 00:29:13,279
but that is my two minute hack uh sammy

923
00:29:13,279 --> 00:29:14,960
uh i was about to say over to you but i

924
00:29:14,960 --> 00:29:15,360
think

925
00:29:15,360 --> 00:29:18,879
with me now right

