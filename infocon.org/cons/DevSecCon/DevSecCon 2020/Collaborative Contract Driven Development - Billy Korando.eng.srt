1
00:00:00,240 --> 00:00:02,000
yeah we are we are now going back to

2
00:00:02,000 --> 00:00:03,360
sessions and uh

3
00:00:03,360 --> 00:00:05,520
with me right now we have uh billy

4
00:00:05,520 --> 00:00:07,839
corrando billy how are you

5
00:00:07,839 --> 00:00:10,559
hey simon i'm good how are you nazi bad

6
00:00:10,559 --> 00:00:12,799
not too bad holding up all right so far

7
00:00:12,799 --> 00:00:15,839
so um yeah good to have you on billy

8
00:00:15,839 --> 00:00:17,119
this is this your first session

9
00:00:17,119 --> 00:00:19,840
on the on the on the conference today

10
00:00:19,840 --> 00:00:20,560
yes it is

11
00:00:20,560 --> 00:00:22,560
it is normally so i'm going to spoil

12
00:00:22,560 --> 00:00:24,160
with this one

13
00:00:24,160 --> 00:00:25,840
and you do in fact you're doing some uh

14
00:00:25,840 --> 00:00:26,960
you're doing some track hosting a little

15
00:00:26,960 --> 00:00:28,640
bit later for us as well right

16
00:00:28,640 --> 00:00:31,199
that i am so looking forward to that

17
00:00:31,199 --> 00:00:32,558
excellent so you're seeing it from a few

18
00:00:32,558 --> 00:00:33,520
sides today

19
00:00:33,520 --> 00:00:34,880
yeah well welcome welcome to the

20
00:00:34,880 --> 00:00:37,040
conference um and that billy you're a

21
00:00:37,040 --> 00:00:39,120
developer advocate at ibm

22
00:00:39,120 --> 00:00:40,719
yep that's correct i'm a developer

23
00:00:40,719 --> 00:00:43,040
advocate kind of focusing on cloud and

24
00:00:43,040 --> 00:00:43,600
spring

25
00:00:43,600 --> 00:00:44,640
and we're going to kind of just see a

26
00:00:44,640 --> 00:00:45,920
little bit of both of that here in a few

27
00:00:45,920 --> 00:00:47,039
minutes so

28
00:00:47,039 --> 00:00:48,960
wow wow that's awesome to have a having

29
00:00:48,960 --> 00:00:50,399
a spring advocate

30
00:00:50,399 --> 00:00:53,680
yeah i know you always expect that

31
00:00:53,680 --> 00:00:54,960
yeah absolutely i mean remember when i

32
00:00:54,960 --> 00:00:56,640
was years and years ago when i was at

33
00:00:56,640 --> 00:00:57,440
ibm

34
00:00:57,440 --> 00:00:59,680
you know full fully behind the the the

35
00:00:59,680 --> 00:01:01,840
java ee as they are now of course

36
00:01:01,840 --> 00:01:03,600
but uh yeah i wouldn't wouldn't have

37
00:01:03,600 --> 00:01:05,119
thought there would be a spring advocate

38
00:01:05,119 --> 00:01:06,479
but it's wonderful to see support in the

39
00:01:06,479 --> 00:01:08,080
wider ecosystem and it's a great

40
00:01:08,080 --> 00:01:11,040
great great thing to do um so uh billy

41
00:01:11,040 --> 00:01:12,720
you're also a big community person right

42
00:01:12,720 --> 00:01:14,240
you're you're one of the co-leads of the

43
00:01:14,240 --> 00:01:16,000
kansas city jug

44
00:01:16,000 --> 00:01:17,439
that's correct yep and actually we're

45
00:01:17,439 --> 00:01:19,040
gonna i'm gonna be uh doing some more

46
00:01:19,040 --> 00:01:20,720
live stream hosting with that tomorrow

47
00:01:20,720 --> 00:01:23,280
so definitely uh check that out uh you

48
00:01:23,280 --> 00:01:25,360
can find us on at caseyjug

49
00:01:25,360 --> 00:01:28,640
on twitter and uh micah silverman with

50
00:01:28,640 --> 00:01:30,320
octa is actually going to be doing a

51
00:01:30,320 --> 00:01:31,759
presentation on spring

52
00:01:31,759 --> 00:01:36,240
and ujs tomorrow about a couple hours

53
00:01:36,240 --> 00:01:38,960
later from now tomorrow so it'll be

54
00:01:38,960 --> 00:01:41,040
pretty good awesome and so today you're

55
00:01:41,040 --> 00:01:42,799
talking about collaborative contract

56
00:01:42,799 --> 00:01:45,520
the ribbon driven development billy

57
00:01:45,520 --> 00:01:46,560
what's that right

58
00:01:46,560 --> 00:01:48,880
what does that mean billy so pretty much

59
00:01:48,880 --> 00:01:49,759
uh we're gonna

60
00:01:49,759 --> 00:01:51,680
get into it and we're gonna kind of look

61
00:01:51,680 --> 00:01:53,040
a bit at um

62
00:01:53,040 --> 00:01:54,799
what is contract driven development

63
00:01:54,799 --> 00:01:56,240
because even though it's been around for

64
00:01:56,240 --> 00:01:57,119
a little bit

65
00:01:57,119 --> 00:01:59,200
um it's probably still something that

66
00:01:59,200 --> 00:02:01,439
hasn't really penetrated that far

67
00:02:01,439 --> 00:02:04,479
into the development world um and then

68
00:02:04,479 --> 00:02:06,000
we're going to look at to see how we can

69
00:02:06,000 --> 00:02:07,439
actually do it in a more collaborative

70
00:02:07,439 --> 00:02:08,560
fashion to where

71
00:02:08,560 --> 00:02:11,038
it's not just you have to have a bunch

72
00:02:11,038 --> 00:02:13,360
of very specific java idiomatic

73
00:02:13,360 --> 00:02:16,000
uh tools to do it that anyone can do it

74
00:02:16,000 --> 00:02:17,680
um whether you're a javascript developer

75
00:02:17,680 --> 00:02:18,959
c-sharp developer

76
00:02:18,959 --> 00:02:21,520
python or whatever it might be you can

77
00:02:21,520 --> 00:02:22,319
actually

78
00:02:22,319 --> 00:02:24,720
uh do contract driven development and

79
00:02:24,720 --> 00:02:26,560
kind of help your organization be

80
00:02:26,560 --> 00:02:28,080
a little bit more agile a little bit

81
00:02:28,080 --> 00:02:29,840
more following good like

82
00:02:29,840 --> 00:02:32,720
continuous delivery practices awesome

83
00:02:32,720 --> 00:02:34,080
that sounds that sounds awesome well i

84
00:02:34,080 --> 00:02:35,440
won't check up any more of your

85
00:02:35,440 --> 00:02:37,280
time i'll hand it over to you and i'll

86
00:02:37,280 --> 00:02:38,640
leave you in the most capable hands of

87
00:02:38,640 --> 00:02:40,319
brian as well he's also

88
00:02:40,319 --> 00:02:41,920
also here in the background on this on

89
00:02:41,920 --> 00:02:44,080
this session so over to you billy

90
00:02:44,080 --> 00:02:46,239
all right thank you very much simon so

91
00:02:46,239 --> 00:02:47,200
yes uh

92
00:02:47,200 --> 00:02:49,280
our presentation we're gonna be looking

93
00:02:49,280 --> 00:02:50,400
at collaborative contract driven

94
00:02:50,400 --> 00:02:51,120
development

95
00:02:51,120 --> 00:02:52,959
you can find me at billy crandall on

96
00:02:52,959 --> 00:02:54,800
twitter you can also feel free to email

97
00:02:54,800 --> 00:02:57,680
me at william.corando at ibm.com

98
00:02:57,680 --> 00:02:59,599
um at the bottom of the screen here you

99
00:02:59,599 --> 00:03:01,200
can see this is a link to

100
00:03:01,200 --> 00:03:03,680
this presentation so you can follow that

101
00:03:03,680 --> 00:03:04,959
i will also have a link

102
00:03:04,959 --> 00:03:07,360
um at the end of this presentation to

103
00:03:07,360 --> 00:03:09,040
the github repository which actually has

104
00:03:09,040 --> 00:03:09,519
more

105
00:03:09,519 --> 00:03:11,440
full presentation from this because i've

106
00:03:11,440 --> 00:03:13,599
had to kind of bring it back down to fit

107
00:03:13,599 --> 00:03:14,800
the format

108
00:03:14,800 --> 00:03:17,040
um and it also has the code examples

109
00:03:17,040 --> 00:03:19,200
that i'll be getting into

110
00:03:19,200 --> 00:03:22,879
also if you leave this presentation with

111
00:03:22,879 --> 00:03:25,040
an intense desire to know more

112
00:03:25,040 --> 00:03:27,840
i do a lot of blogging on my personal

113
00:03:27,840 --> 00:03:29,920
blog at billycrander.com specifically

114
00:03:29,920 --> 00:03:31,360
about automated testing

115
00:03:31,360 --> 00:03:33,200
so you can check it out there i've

116
00:03:33,200 --> 00:03:34,959
specifically covered contract dividend

117
00:03:34,959 --> 00:03:36,400
development a couple of times

118
00:03:36,400 --> 00:03:37,760
and i probably will have some more here

119
00:03:37,760 --> 00:03:39,440
in the future as well so

120
00:03:39,440 --> 00:03:41,040
if you kind of want to get more in-depth

121
00:03:41,040 --> 00:03:44,319
on it definitely check that out

122
00:03:44,319 --> 00:03:47,280
so as i kind of mentioning with simon at

123
00:03:47,280 --> 00:03:48,239
the start of this

124
00:03:48,239 --> 00:03:50,959
is while contract event development

125
00:03:50,959 --> 00:03:52,799
isn't particularly new

126
00:03:52,799 --> 00:03:54,959
it hasn't really seen widespread

127
00:03:54,959 --> 00:03:56,959
adoption within the software developer

128
00:03:56,959 --> 00:03:57,680
community

129
00:03:57,680 --> 00:03:59,840
so before getting into the depths of

130
00:03:59,840 --> 00:04:01,439
this presentation just to give you an

131
00:04:01,439 --> 00:04:03,920
overall idea of what contractor

132
00:04:03,920 --> 00:04:05,599
development is let's just take a very

133
00:04:05,599 --> 00:04:07,760
high level view and pretty much what it

134
00:04:07,760 --> 00:04:09,680
is is you have your service

135
00:04:09,680 --> 00:04:11,599
you have your client and of course they

136
00:04:11,599 --> 00:04:13,360
interact with one another so

137
00:04:13,360 --> 00:04:15,840
if a client sends a request to some sort

138
00:04:15,840 --> 00:04:17,680
of endpoint and maybe even like a post

139
00:04:17,680 --> 00:04:19,040
request that's going to have some sort

140
00:04:19,040 --> 00:04:20,238
of request body

141
00:04:20,238 --> 00:04:22,160
within it that's going to go to the

142
00:04:22,160 --> 00:04:23,280
service

143
00:04:23,280 --> 00:04:24,960
and the service is going to respond back

144
00:04:24,960 --> 00:04:27,040
you know it could be 200 in this case

145
00:04:27,040 --> 00:04:30,400
or it could be 400 500 well 500

146
00:04:30,400 --> 00:04:31,520
when they really put this within

147
00:04:31,520 --> 00:04:33,440
contract of involvement um

148
00:04:33,440 --> 00:04:35,440
but you would have some sort of response

149
00:04:35,440 --> 00:04:37,680
based upon that kind of request

150
00:04:37,680 --> 00:04:39,680
and what contract driven development is

151
00:04:39,680 --> 00:04:41,280
this actually writing this out in a

152
00:04:41,280 --> 00:04:43,040
programmatic fashion that can be tested

153
00:04:43,040 --> 00:04:43,919
against

154
00:04:43,919 --> 00:04:47,199
um as to what's going on without

155
00:04:47,199 --> 00:04:49,120
actually having to interact with a real

156
00:04:49,120 --> 00:04:52,240
live service so

157
00:04:52,240 --> 00:04:54,160
what does this mean how does it actually

158
00:04:54,160 --> 00:04:55,840
help you with contractor development i

159
00:04:55,840 --> 00:04:57,840
kind of think back to this scene from

160
00:04:57,840 --> 00:04:59,680
it's only sunny in philadelphia when one

161
00:04:59,680 --> 00:05:01,199
of the characters charlie

162
00:05:01,199 --> 00:05:03,280
is going to go burn trash and a couple

163
00:05:03,280 --> 00:05:04,960
of other characters mac and dennis try

164
00:05:04,960 --> 00:05:05,919
to stop him

165
00:05:05,919 --> 00:05:07,520
and he's like i'm going to burn this to

166
00:05:07,520 --> 00:05:09,120
turn into stars

167
00:05:09,120 --> 00:05:10,960
but they're like you know what that

168
00:05:10,960 --> 00:05:12,560
doesn't sound right but i don't know

169
00:05:12,560 --> 00:05:13,199
enough to

170
00:05:13,199 --> 00:05:16,000
say it's wrong so how can we relate this

171
00:05:16,000 --> 00:05:17,600
how does contract driven development

172
00:05:17,600 --> 00:05:19,120
actually help us

173
00:05:19,120 --> 00:05:21,919
based on my career um i thought about

174
00:05:21,919 --> 00:05:24,320
three common things i ran into

175
00:05:24,320 --> 00:05:26,160
and how contractor development could

176
00:05:26,160 --> 00:05:27,680
actually help with that so let's kind of

177
00:05:27,680 --> 00:05:28,000
go

178
00:05:28,000 --> 00:05:29,759
through these scenarios using my

179
00:05:29,759 --> 00:05:31,520
favorite thing gifts

180
00:05:31,520 --> 00:05:32,960
so in this first one we're going to be

181
00:05:32,960 --> 00:05:35,120
looking at like a existing poorly

182
00:05:35,120 --> 00:05:36,479
defined service

183
00:05:36,479 --> 00:05:38,240
like this like some sort of generic

184
00:05:38,240 --> 00:05:39,680
customer service it doesn't matter

185
00:05:39,680 --> 00:05:42,240
too much so we had here and so it's like

186
00:05:42,240 --> 00:05:43,840
they need customer information

187
00:05:43,840 --> 00:05:46,400
and this client and it's like okay

188
00:05:46,400 --> 00:05:47,520
here's this customer service

189
00:05:47,520 --> 00:05:49,680
did you read documentation yeah it's a

190
00:05:49,680 --> 00:05:51,360
word doc and you're calling called get

191
00:05:51,360 --> 00:05:53,039
customers to get customer information so

192
00:05:53,039 --> 00:05:53,759
hp get

193
00:05:53,759 --> 00:05:56,319
good customers but it's post endpoints

194
00:05:56,319 --> 00:05:57,039
so

195
00:05:57,039 --> 00:05:58,479
nothing's going back and eventually

196
00:05:58,479 --> 00:06:00,479
they're going to get back here a 405

197
00:06:00,479 --> 00:06:01,120
error

198
00:06:01,120 --> 00:06:02,960
they should be using post okay so they

199
00:06:02,960 --> 00:06:05,280
try doing posts to get customers

200
00:06:05,280 --> 00:06:07,360
still getting nothing back well there's

201
00:06:07,360 --> 00:06:09,280
an aussie header of course so they send

202
00:06:09,280 --> 00:06:10,400
that

203
00:06:10,400 --> 00:06:13,840
and now it fails to 500 and it fails

204
00:06:13,840 --> 00:06:14,720
because well

205
00:06:14,720 --> 00:06:16,400
their database was brought down for

206
00:06:16,400 --> 00:06:19,039
maintenance and they get back like a

207
00:06:19,039 --> 00:06:22,720
http 200 but it has an error code in it

208
00:06:22,720 --> 00:06:24,160
but nobody knows what the error code

209
00:06:24,160 --> 00:06:25,680
means or what it really means when an

210
00:06:25,680 --> 00:06:27,600
error like that happens

211
00:06:27,600 --> 00:06:30,080
so it's just like a poorly defined or

212
00:06:30,080 --> 00:06:31,039
undocumented

213
00:06:31,039 --> 00:06:34,240
api so you know it and maybe it's also

214
00:06:34,240 --> 00:06:36,400
within like a bad format like a pdf or a

215
00:06:36,400 --> 00:06:38,000
word doc or something like that that's

216
00:06:38,000 --> 00:06:38,720
not really

217
00:06:38,720 --> 00:06:40,400
easy to kind of translate into

218
00:06:40,400 --> 00:06:42,400
programmatic use

219
00:06:42,400 --> 00:06:43,919
uh you could also have inconsistent

220
00:06:43,919 --> 00:06:45,680
behaviors of patterns so like you have

221
00:06:45,680 --> 00:06:48,000
an endpoint called get customer info

222
00:06:48,000 --> 00:06:50,319
but instead of being a git it's actually

223
00:06:50,319 --> 00:06:51,759
a post which

224
00:06:51,759 --> 00:06:53,199
you know if you want to follow rush or

225
00:06:53,199 --> 00:06:54,960
not that's fine but it can be kind of

226
00:06:54,960 --> 00:06:55,919
confusing

227
00:06:55,919 --> 00:06:57,919
for some client or some user of that

228
00:06:57,919 --> 00:06:59,520
service to see that

229
00:06:59,520 --> 00:07:00,960
um and then they're going to get the

230
00:07:00,960 --> 00:07:02,800
wrong idea and it makes it really hard

231
00:07:02,800 --> 00:07:03,919
to just kind of

232
00:07:03,919 --> 00:07:06,880
actually use that service and then

233
00:07:06,880 --> 00:07:07,360
finally

234
00:07:07,360 --> 00:07:08,560
you have problems when you're testing

235
00:07:08,560 --> 00:07:10,479
against a live service

236
00:07:10,479 --> 00:07:12,400
some back-end service could go down like

237
00:07:12,400 --> 00:07:14,160
a database or maybe some other service

238
00:07:14,160 --> 00:07:14,479
that

239
00:07:14,479 --> 00:07:16,720
that service depends upon that causes it

240
00:07:16,720 --> 00:07:18,960
to any request to it to fail but it has

241
00:07:18,960 --> 00:07:20,400
nothing to do

242
00:07:20,400 --> 00:07:22,160
with the requests the client are sending

243
00:07:22,160 --> 00:07:24,080
it so it can be very difficult confusing

244
00:07:24,080 --> 00:07:25,440
when you're developing against it to

245
00:07:25,440 --> 00:07:26,000
know

246
00:07:26,000 --> 00:07:27,840
wait is this fairly happening because

247
00:07:27,840 --> 00:07:29,120
i'm using it wrong

248
00:07:29,120 --> 00:07:30,479
or because there's actually something

249
00:07:30,479 --> 00:07:32,479
wrong with the service

250
00:07:32,479 --> 00:07:35,120
so that's kind of one set of problems

251
00:07:35,120 --> 00:07:36,639
another one is it's like okay we're

252
00:07:36,639 --> 00:07:38,160
gonna use some new development we kind

253
00:07:38,160 --> 00:07:39,599
of went through our whole

254
00:07:39,599 --> 00:07:41,520
like design process and now we're

255
00:07:41,520 --> 00:07:43,680
actually ready to get going developments

256
00:07:43,680 --> 00:07:45,680
and oftentimes what happens though is

257
00:07:45,680 --> 00:07:47,440
the backend service developer

258
00:07:47,440 --> 00:07:49,520
they everyone has to wait the clients

259
00:07:49,520 --> 00:07:50,639
have to wait until that service

260
00:07:50,639 --> 00:07:52,479
developer kind of has something ready so

261
00:07:52,479 --> 00:07:54,000
they can test and build again so it's

262
00:07:54,000 --> 00:07:56,319
like oh is that api finalize that

263
00:07:56,319 --> 00:07:59,360
well now they're updating the model and

264
00:07:59,360 --> 00:08:00,720
you know they want to do some work but

265
00:08:00,720 --> 00:08:02,240
now that service developer got pulled

266
00:08:02,240 --> 00:08:03,680
into a prod issue

267
00:08:03,680 --> 00:08:06,080
so while they're on work and that pride

268
00:08:06,080 --> 00:08:07,440
issue all these

269
00:08:07,440 --> 00:08:09,759
features order summary address form and

270
00:08:09,759 --> 00:08:10,560
so on

271
00:08:10,560 --> 00:08:12,240
they're all kind of stuck while they're

272
00:08:12,240 --> 00:08:13,919
waiting for that service developer to

273
00:08:13,919 --> 00:08:14,560
kind of get

274
00:08:14,560 --> 00:08:17,840
back onto the project so kind of what's

275
00:08:17,840 --> 00:08:18,720
going on here

276
00:08:18,720 --> 00:08:21,520
is you can't really develop in parallel

277
00:08:21,520 --> 00:08:22,800
the clients really

278
00:08:22,800 --> 00:08:24,639
i mean they can maybe do some work ahead

279
00:08:24,639 --> 00:08:26,319
of time but really they're dependent

280
00:08:26,319 --> 00:08:28,000
upon that service developer actually

281
00:08:28,000 --> 00:08:29,039
having at least

282
00:08:29,039 --> 00:08:31,039
some nominal you know minimal viable

283
00:08:31,039 --> 00:08:32,958
product service available

284
00:08:32,958 --> 00:08:34,880
for them to actually work and develop

285
00:08:34,880 --> 00:08:36,399
against

286
00:08:36,399 --> 00:08:38,880
and what this means is now your timeline

287
00:08:38,880 --> 00:08:40,000
giving that service about

288
00:08:40,000 --> 00:08:41,839
feature out to production and used by

289
00:08:41,839 --> 00:08:44,159
users is impacted by delays in both the

290
00:08:44,159 --> 00:08:46,000
service and client developers so if a

291
00:08:46,000 --> 00:08:47,760
service developer is pulled into a

292
00:08:47,760 --> 00:08:50,000
product for a week or is on vacation for

293
00:08:50,000 --> 00:08:51,760
a week or sick for a week

294
00:08:51,760 --> 00:08:54,240
you're back you're the way bye week if a

295
00:08:54,240 --> 00:08:55,360
client developer

296
00:08:55,360 --> 00:08:57,279
is similarly going to be impacted by a

297
00:08:57,279 --> 00:08:59,360
week because of something coming up

298
00:08:59,360 --> 00:09:00,880
you know that's going to add two whole

299
00:09:00,880 --> 00:09:02,320
weeks to that timeline whereas if

300
00:09:02,320 --> 00:09:04,000
they're both looking in parallel

301
00:09:04,000 --> 00:09:06,720
you know maybe you we won't be impacted

302
00:09:06,720 --> 00:09:07,760
by that at all

303
00:09:07,760 --> 00:09:11,760
or maybe only impacted by a week

304
00:09:11,839 --> 00:09:14,560
also then like once a service developer

305
00:09:14,560 --> 00:09:15,040
finally

306
00:09:15,040 --> 00:09:17,360
has some minimal service available a

307
00:09:17,360 --> 00:09:18,880
client developer maybe has to get back

308
00:09:18,880 --> 00:09:20,320
up to speed on how

309
00:09:20,320 --> 00:09:22,320
they want to actually consume that

310
00:09:22,320 --> 00:09:24,240
service because they kind of forgot what

311
00:09:24,240 --> 00:09:24,959
they're going to do

312
00:09:24,959 --> 00:09:26,800
because it's been a week in a month or

313
00:09:26,800 --> 00:09:28,800
longer since they actually had a lot of

314
00:09:28,800 --> 00:09:29,519
those design

315
00:09:29,519 --> 00:09:32,560
meetings finally

316
00:09:32,560 --> 00:09:34,640
we just have like this actively used

317
00:09:34,640 --> 00:09:37,200
service there and sometimes you know

318
00:09:37,200 --> 00:09:39,360
someone makes a change to a back-end

319
00:09:39,360 --> 00:09:40,240
service you know

320
00:09:40,240 --> 00:09:42,399
someone like perhaps myself uh when i

321
00:09:42,399 --> 00:09:43,680
was still actually doing real

322
00:09:43,680 --> 00:09:44,800
development work

323
00:09:44,800 --> 00:09:46,640
you know they see something like api get

324
00:09:46,640 --> 00:09:48,160
customers and like oh that's that's not

325
00:09:48,160 --> 00:09:49,600
properly restful they're going to change

326
00:09:49,600 --> 00:09:50,800
the customers

327
00:09:50,800 --> 00:09:52,480
and they just push it out and they don't

328
00:09:52,480 --> 00:09:54,800
tell anyone about it and so sometimes

329
00:09:54,800 --> 00:09:56,240
like this happens

330
00:09:56,240 --> 00:09:58,640
a change gets pushed to production oh

331
00:09:58,640 --> 00:10:01,040
when did it go to pride

332
00:10:01,040 --> 00:10:02,640
it went last night well at least now you

333
00:10:02,640 --> 00:10:04,640
know what all the predators are about

334
00:10:04,640 --> 00:10:06,480
but now this poor client developer is

335
00:10:06,480 --> 00:10:07,760
going to have to stay late to get it

336
00:10:07,760 --> 00:10:08,480
fixed

337
00:10:08,480 --> 00:10:09,920
and oh yeah by the way that service

338
00:10:09,920 --> 00:10:12,000
developers also pushed up a customer

339
00:10:12,000 --> 00:10:13,200
model change

340
00:10:13,200 --> 00:10:14,800
again without telling the client

341
00:10:14,800 --> 00:10:16,640
developer and they're always the last

342
00:10:16,640 --> 00:10:17,760
one about these changes

343
00:10:17,760 --> 00:10:19,440
once they get to production and now they

344
00:10:19,440 --> 00:10:20,959
have their hairs on fire

345
00:10:20,959 --> 00:10:24,079
trying to put out this production issue

346
00:10:24,079 --> 00:10:26,240
so again you just have a breaking api

347
00:10:26,240 --> 00:10:27,519
change not caught

348
00:10:27,519 --> 00:10:30,079
in pillow production because maybe just

349
00:10:30,079 --> 00:10:30,880
no one knew

350
00:10:30,880 --> 00:10:32,399
a new change was going to production or

351
00:10:32,399 --> 00:10:34,240
just didn't know that this change

352
00:10:34,240 --> 00:10:36,079
was going to have this sort of impact

353
00:10:36,079 --> 00:10:37,760
maybe the developer

354
00:10:37,760 --> 00:10:39,200
when they were making that change then

355
00:10:39,200 --> 00:10:40,560
themselves realized it was going to kind

356
00:10:40,560 --> 00:10:42,240
of have this impact

357
00:10:42,240 --> 00:10:43,839
and then also another problem is just

358
00:10:43,839 --> 00:10:45,200
like the service developers they pretty

359
00:10:45,200 --> 00:10:46,000
much have the full

360
00:10:46,000 --> 00:10:48,320
control over what the api design looks

361
00:10:48,320 --> 00:10:50,480
like and that can be maybe an unpleasant

362
00:10:50,480 --> 00:10:52,000
experience for client developers because

363
00:10:52,000 --> 00:10:53,040
maybe that model

364
00:10:53,040 --> 00:10:54,480
maybe the end points aren't set up to

365
00:10:54,480 --> 00:10:57,760
work that well for what they need

366
00:10:57,760 --> 00:11:01,040
so this is the overall case for contract

367
00:11:01,040 --> 00:11:02,800
driven development and what it is

368
00:11:02,800 --> 00:11:04,480
so let's start digging into a little bit

369
00:11:04,480 --> 00:11:07,360
more looking at spring cloud contracts

370
00:11:07,360 --> 00:11:08,800
so why should you consider it well it's

371
00:11:08,800 --> 00:11:10,800
a very active project uh

372
00:11:10,800 --> 00:11:12,480
there's ongoing changes and features

373
00:11:12,480 --> 00:11:13,760
being added so it's not something that

374
00:11:13,760 --> 00:11:14,000
was

375
00:11:14,000 --> 00:11:16,320
just had an initial release a couple of

376
00:11:16,320 --> 00:11:17,600
years ago and hasn't really been touched

377
00:11:17,600 --> 00:11:18,000
since

378
00:11:18,000 --> 00:11:20,800
it's ongoing and in active development

379
00:11:20,800 --> 00:11:22,800
it's also interoperable with other tools

380
00:11:22,800 --> 00:11:24,320
and standards like open api

381
00:11:24,320 --> 00:11:27,519
packed swagger it also has really great

382
00:11:27,519 --> 00:11:29,120
documentation support with spring red

383
00:11:29,120 --> 00:11:29,839
stocks

384
00:11:29,839 --> 00:11:32,640
which is backed by ascii doctor and it

385
00:11:32,640 --> 00:11:34,320
also has polyglot support which kind of

386
00:11:34,320 --> 00:11:35,920
gives you that collaborative portion i

387
00:11:35,920 --> 00:11:37,360
was talking about early on

388
00:11:37,360 --> 00:11:40,240
when i was talking to simon at the intro

389
00:11:40,240 --> 00:11:42,000
anyways you can read more about it here

390
00:11:42,000 --> 00:11:44,959
at the project link so what does this

391
00:11:44,959 --> 00:11:45,600
contract

392
00:11:45,600 --> 00:11:46,880
look like well there's a couple

393
00:11:46,880 --> 00:11:48,480
different ways to write contracts

394
00:11:48,480 --> 00:11:49,839
initially when spring crowd

395
00:11:49,839 --> 00:11:51,519
spring cloud contractors are miserably

396
00:11:51,519 --> 00:11:53,600
released it was on groovy

397
00:11:53,600 --> 00:11:55,760
and here's a very simple contract

398
00:11:55,760 --> 00:11:58,160
showing an example of doing a post

399
00:11:58,160 --> 00:12:00,959
so here we have like a method post to

400
00:12:00,959 --> 00:12:03,279
api persons with a body of

401
00:12:03,279 --> 00:12:05,200
name john doe and he's going to give

402
00:12:05,200 --> 00:12:07,200
back a status of 201

403
00:12:07,200 --> 00:12:09,440
which means creative and then it's going

404
00:12:09,440 --> 00:12:10,320
to have a link

405
00:12:10,320 --> 00:12:13,680
to that new person's object here's what

406
00:12:13,680 --> 00:12:15,279
the exact same kind of request would

407
00:12:15,279 --> 00:12:15,920
look like

408
00:12:15,920 --> 00:12:18,560
if you're using yaml so there's groovy

409
00:12:18,560 --> 00:12:19,360
there's yaml

410
00:12:19,360 --> 00:12:21,839
i believe there's kotlin and i think

411
00:12:21,839 --> 00:12:22,639
there might be

412
00:12:22,639 --> 00:12:24,320
one other i think it actually could also

413
00:12:24,320 --> 00:12:27,040
even be in now native java as well

414
00:12:27,040 --> 00:12:29,519
as a contract writing service uh but i

415
00:12:29,519 --> 00:12:30,800
haven't done that i've

416
00:12:30,800 --> 00:12:32,399
only done work with the groovy and the

417
00:12:32,399 --> 00:12:34,480
yaml

418
00:12:34,480 --> 00:12:36,959
so there's so this is what the contracts

419
00:12:36,959 --> 00:12:38,720
look like so who's actually writing them

420
00:12:38,720 --> 00:12:40,399
so there's actually two different ways

421
00:12:40,399 --> 00:12:42,560
of writing contracts well they're both

422
00:12:42,560 --> 00:12:43,920
the same kind of contract but there's

423
00:12:43,920 --> 00:12:45,760
two different methodologies

424
00:12:45,760 --> 00:12:47,680
so one of them is the producer-driven

425
00:12:47,680 --> 00:12:49,440
contract where the producer of the

426
00:12:49,440 --> 00:12:51,360
service or the developer of the service

427
00:12:51,360 --> 00:12:52,639
writes the contract they'd be like hey

428
00:12:52,639 --> 00:12:54,480
the apa will look like this the client

429
00:12:54,480 --> 00:12:55,920
and the client's like okay that's good

430
00:12:55,920 --> 00:12:57,200
they have something to develop against

431
00:12:57,200 --> 00:12:58,560
that's awesome

432
00:12:58,560 --> 00:13:01,440
another way is consumer driven club

433
00:13:01,440 --> 00:13:03,600
contract where a client says hey

434
00:13:03,600 --> 00:13:06,000
i need this from the api and they write

435
00:13:06,000 --> 00:13:07,200
out a contract

436
00:13:07,200 --> 00:13:10,240
and then the server or the producer uh

437
00:13:10,240 --> 00:13:12,399
the producer developer will then write

438
00:13:12,399 --> 00:13:14,079
those out

439
00:13:14,079 --> 00:13:15,600
so it's important to understand though

440
00:13:15,600 --> 00:13:17,200
that whether it's a consumer-driven

441
00:13:17,200 --> 00:13:19,120
contract or a producer-driven contract

442
00:13:19,120 --> 00:13:20,639
the contracts will look the same they'll

443
00:13:20,639 --> 00:13:22,000
both have this request

444
00:13:22,000 --> 00:13:24,720
and this response look and so on it's

445
00:13:24,720 --> 00:13:25,200
just

446
00:13:25,200 --> 00:13:28,320
a methodology but kind of a push versus

447
00:13:28,320 --> 00:13:28,720
pull

448
00:13:28,720 --> 00:13:31,360
for how api should be developed and

449
00:13:31,360 --> 00:13:32,399
built

450
00:13:32,399 --> 00:13:33,519
if it's producer producer-driven

451
00:13:33,519 --> 00:13:35,680
contract the producer of the service the

452
00:13:35,680 --> 00:13:37,120
producer developer is going to be like

453
00:13:37,120 --> 00:13:37,600
saying

454
00:13:37,600 --> 00:13:39,519
pushing out what the contract is going

455
00:13:39,519 --> 00:13:40,720
to look like

456
00:13:40,720 --> 00:13:42,480
whereas consumer driven it's the

457
00:13:42,480 --> 00:13:44,079
consumer kind of pulling

458
00:13:44,079 --> 00:13:46,800
that api in ways they want it and need

459
00:13:46,800 --> 00:13:48,399
it to be

460
00:13:48,399 --> 00:13:50,399
one advanced consumer driven contract

461
00:13:50,399 --> 00:13:52,240
over producer is

462
00:13:52,240 --> 00:13:53,920
maybe going to avoid some of that yagni

463
00:13:53,920 --> 00:13:55,760
that you're not going to need it

464
00:13:55,760 --> 00:13:58,560
because all the api features and end

465
00:13:58,560 --> 00:14:00,320
points are being built based upon a

466
00:14:00,320 --> 00:14:02,240
specific need for clients

467
00:14:02,240 --> 00:14:04,000
not the producer trying to assume what

468
00:14:04,000 --> 00:14:06,240
the clients actually need

469
00:14:06,240 --> 00:14:08,480
by the way both methodologies work and

470
00:14:08,480 --> 00:14:09,519
both are much

471
00:14:09,519 --> 00:14:11,680
a much improvement over not doing

472
00:14:11,680 --> 00:14:14,480
contract driven developments

473
00:14:14,480 --> 00:14:17,680
but also if you want to do actual uh

474
00:14:17,680 --> 00:14:20,160
consumer-driven contracts a lot of times

475
00:14:20,160 --> 00:14:21,680
they're not going to be java developers

476
00:14:21,680 --> 00:14:22,079
that

477
00:14:22,079 --> 00:14:24,320
are going to be writing them um so you

478
00:14:24,320 --> 00:14:26,720
need to have language independent tools

479
00:14:26,720 --> 00:14:28,000
so java developers are going to have a

480
00:14:28,000 --> 00:14:29,680
jdk they're going to bathe in to have a

481
00:14:29,680 --> 00:14:31,440
java friendly ide

482
00:14:31,440 --> 00:14:33,120
that's probably not going to be the case

483
00:14:33,120 --> 00:14:34,560
for javascript developers

484
00:14:34,560 --> 00:14:37,040
or other type of developers but now

485
00:14:37,040 --> 00:14:38,959
docker has become fairly universal

486
00:14:38,959 --> 00:14:40,399
and of course every developer is going

487
00:14:40,399 --> 00:14:42,480
to have a text editor

488
00:14:42,480 --> 00:14:44,560
so about two years ago spring cloud

489
00:14:44,560 --> 00:14:45,519
contract

490
00:14:45,519 --> 00:14:47,360
developed some docker images that can

491
00:14:47,360 --> 00:14:49,440
encapsulate all the java

492
00:14:49,440 --> 00:14:51,839
and spring cloud contract logic within

493
00:14:51,839 --> 00:14:53,199
these docker images

494
00:14:53,199 --> 00:14:54,800
and they have it for both doing the

495
00:14:54,800 --> 00:14:58,079
producer and the consumer side of it

496
00:14:58,079 --> 00:15:00,240
and so with that you can then use it to

497
00:15:00,240 --> 00:15:02,000
validate the contract so you write these

498
00:15:02,000 --> 00:15:02,720
contracts out

499
00:15:02,720 --> 00:15:04,560
you make sure the service actually meets

500
00:15:04,560 --> 00:15:06,639
that contract you can also use that

501
00:15:06,639 --> 00:15:08,480
using the docker image not necessarily

502
00:15:08,480 --> 00:15:10,240
depending again upon like having

503
00:15:10,240 --> 00:15:13,360
java and maven and stuff like that

504
00:15:13,360 --> 00:15:15,920
and so if these contracts work then what

505
00:15:15,920 --> 00:15:16,399
you get

506
00:15:16,399 --> 00:15:18,320
is a subs artifact that combines all

507
00:15:18,320 --> 00:15:20,320
these contracts together

508
00:15:20,320 --> 00:15:22,160
into something that's shareable which

509
00:15:22,160 --> 00:15:23,920
then you can put into your artifact

510
00:15:23,920 --> 00:15:25,519
repository whether it's

511
00:15:25,519 --> 00:15:27,920
internal or external to your company

512
00:15:27,920 --> 00:15:29,519
because maybe have external clients

513
00:15:29,519 --> 00:15:31,199
which are using your services

514
00:15:31,199 --> 00:15:32,480
all the same you can kind of do that

515
00:15:32,480 --> 00:15:34,240
there to share it to have the current

516
00:15:34,240 --> 00:15:35,040
state

517
00:15:35,040 --> 00:15:38,560
of what that service looks like

518
00:15:38,560 --> 00:15:41,279
or the api you can also again create

519
00:15:41,279 --> 00:15:42,320
documentation

520
00:15:42,320 --> 00:15:44,639
based upon these contracts and again

521
00:15:44,639 --> 00:15:45,440
because these

522
00:15:45,440 --> 00:15:47,040
contracts are being validated against

523
00:15:47,040 --> 00:15:48,560
the actual current version of the

524
00:15:48,560 --> 00:15:49,279
service

525
00:15:49,279 --> 00:15:51,360
you're gonna have a lot of uh confidence

526
00:15:51,360 --> 00:15:53,040
that this documentation is gonna be

527
00:15:53,040 --> 00:15:55,600
up to date with what the actual service

528
00:15:55,600 --> 00:15:56,880
currently looks like

529
00:15:56,880 --> 00:15:58,240
you're not going to have documentation

530
00:15:58,240 --> 00:15:59,839
that was made when the service was first

531
00:15:59,839 --> 00:16:01,440
released but has since become

532
00:16:01,440 --> 00:16:04,560
badly out of date

533
00:16:04,560 --> 00:16:05,839
and then finally you can have these

534
00:16:05,839 --> 00:16:08,240
clients they can actually then test

535
00:16:08,240 --> 00:16:11,519
against these stubs artifacts um

536
00:16:11,519 --> 00:16:13,839
or you can and you can also again use

537
00:16:13,839 --> 00:16:15,199
docker to do this

538
00:16:15,199 --> 00:16:17,120
or you can even have them test just

539
00:16:17,120 --> 00:16:18,800
directly against the contracts

540
00:16:18,800 --> 00:16:20,560
which can help with doing that parallel

541
00:16:20,560 --> 00:16:22,160
development so that way

542
00:16:22,160 --> 00:16:23,839
once those contracts are actually

543
00:16:23,839 --> 00:16:25,600
written both the producer

544
00:16:25,600 --> 00:16:27,680
and the client can actually go ahead our

545
00:16:27,680 --> 00:16:28,639
consumer

546
00:16:28,639 --> 00:16:30,399
and go ahead and start developing and

547
00:16:30,399 --> 00:16:34,240
just develop to meet those contracts

548
00:16:35,040 --> 00:16:36,720
so quickly just to kind of review all

549
00:16:36,720 --> 00:16:38,320
this we can write the contracts to

550
00:16:38,320 --> 00:16:40,639
define the behavior of the api

551
00:16:40,639 --> 00:16:42,959
and the contracts validate the api

552
00:16:42,959 --> 00:16:44,320
matches the behavior

553
00:16:44,320 --> 00:16:45,600
you can bundle the contracts as a

554
00:16:45,600 --> 00:16:47,440
shareable artifact you can generate

555
00:16:47,440 --> 00:16:49,519
documentation from the contracts

556
00:16:49,519 --> 00:16:52,079
and the clients can test and develop

557
00:16:52,079 --> 00:16:53,519
against the artifact

558
00:16:53,519 --> 00:16:55,680
and what's critical is is those last

559
00:16:55,680 --> 00:16:56,800
four points

560
00:16:56,800 --> 00:16:59,440
except for against the develop portion

561
00:16:59,440 --> 00:17:00,480
would all be

562
00:17:00,480 --> 00:17:02,320
automated so that way you're always

563
00:17:02,320 --> 00:17:04,559
checking against it so that way

564
00:17:04,559 --> 00:17:05,839
if someone trying to make a change to

565
00:17:05,839 --> 00:17:08,240
the api or change the contract

566
00:17:08,240 --> 00:17:09,919
you're not going to actually break

567
00:17:09,919 --> 00:17:11,760
people in production or something like

568
00:17:11,760 --> 00:17:13,119
that

569
00:17:13,119 --> 00:17:15,119
all right so that was a whole lot of

570
00:17:15,119 --> 00:17:16,400
words what does this

571
00:17:16,400 --> 00:17:20,160
actually look like in the real world

572
00:17:20,160 --> 00:17:22,480
so here i have a really simple produce

573
00:17:22,480 --> 00:17:23,599
service

574
00:17:23,599 --> 00:17:25,919
and i have a few endpoints a couple of

575
00:17:25,919 --> 00:17:29,280
gift endpoints a post endpoint

576
00:17:29,280 --> 00:17:31,679
and so then i based upon that some

577
00:17:31,679 --> 00:17:33,440
contracts

578
00:17:33,440 --> 00:17:38,160
so here i have my code repository

579
00:17:38,160 --> 00:17:42,160
and again um in this i have both the

580
00:17:42,160 --> 00:17:44,960
client the producer and then the

581
00:17:44,960 --> 00:17:46,960
contracts i'm writing against and again

582
00:17:46,960 --> 00:17:48,559
you can access this you can kind of look

583
00:17:48,559 --> 00:17:49,360
at it all

584
00:17:49,360 --> 00:17:53,039
later but um we're going to look at this

585
00:17:53,039 --> 00:17:55,120
one so we have this one contract

586
00:17:55,120 --> 00:17:57,039
it's called find produce by specific

587
00:17:57,039 --> 00:17:59,120
name and so what's going to do is

588
00:17:59,120 --> 00:18:02,480
do a get to this endpoint

589
00:18:02,480 --> 00:18:04,480
and it's going to expect that a couple

590
00:18:04,480 --> 00:18:07,679
of apple items to be returned

591
00:18:07,679 --> 00:18:10,640
now if we go back into my code we can

592
00:18:10,640 --> 00:18:11,520
see here

593
00:18:11,520 --> 00:18:14,640
we have a git mapping for name

594
00:18:14,640 --> 00:18:17,679
and it's at api v1 produce so

595
00:18:17,679 --> 00:18:20,799
that's how that relates to this api v1

596
00:18:20,799 --> 00:18:21,600
produce

597
00:18:21,600 --> 00:18:23,840
in this case taking the variable apple

598
00:18:23,840 --> 00:18:25,280
in

599
00:18:25,280 --> 00:18:27,440
and that's what it does here so if i was

600
00:18:27,440 --> 00:18:28,400
to comment this

601
00:18:28,400 --> 00:18:31,600
out oops don't want to delete comment

602
00:18:31,600 --> 00:18:32,799
out

603
00:18:32,799 --> 00:18:35,840
and then execute these tests and while

604
00:18:35,840 --> 00:18:38,000
they're executing i'll show you this

605
00:18:38,000 --> 00:18:40,160
so in maven if i was just doing as a

606
00:18:40,160 --> 00:18:41,360
java developer i would

607
00:18:41,360 --> 00:18:44,559
configure this on maven and here i'm

608
00:18:44,559 --> 00:18:45,360
saying

609
00:18:45,360 --> 00:18:48,559
go look for the contracts out here at

610
00:18:48,559 --> 00:18:51,840
my github w grando produce contracts

611
00:18:51,840 --> 00:18:55,200
and a run and test against them

612
00:18:55,200 --> 00:18:57,520
so we had four test runs and that was

613
00:18:57,520 --> 00:18:59,760
because

614
00:18:59,760 --> 00:19:02,880
we have four contracts out here add

615
00:19:02,880 --> 00:19:04,880
produce add failed find all and find

616
00:19:04,880 --> 00:19:07,840
produce by name so four contracts

617
00:19:07,840 --> 00:19:10,480
four tests and then one failed and that

618
00:19:10,480 --> 00:19:11,919
failed because

619
00:19:11,919 --> 00:19:15,039
i commented out this git mapping for

620
00:19:15,039 --> 00:19:16,160
producer

621
00:19:16,160 --> 00:19:18,559
so now the contracts don't match what is

622
00:19:18,559 --> 00:19:19,840
written in them

623
00:19:19,840 --> 00:19:23,280
if i uncomment this out i can run the

624
00:19:23,280 --> 00:19:24,320
test again

625
00:19:24,320 --> 00:19:27,200
analysis succeed because now the api

626
00:19:27,200 --> 00:19:28,240
actually matches

627
00:19:28,240 --> 00:19:31,760
what's in the contracts

628
00:19:32,160 --> 00:19:34,559
so this is great so this is a good way

629
00:19:34,559 --> 00:19:35,760
of making sure

630
00:19:35,760 --> 00:19:38,559
a good ci cd process where if i make a

631
00:19:38,559 --> 00:19:39,039
change

632
00:19:39,039 --> 00:19:42,799
to this code here and i commit it to a

633
00:19:42,799 --> 00:19:44,320
repository and have it go through our

634
00:19:44,320 --> 00:19:45,760
cicd process

635
00:19:45,760 --> 00:19:47,760
it's going to test every time against

636
00:19:47,760 --> 00:19:49,600
those 16 contracts and make sure i'm

637
00:19:49,600 --> 00:19:52,640
going to actually meet it now let's

638
00:19:52,640 --> 00:19:54,880
think about it from the client side the

639
00:19:54,880 --> 00:19:55,919
client is going to

640
00:19:55,919 --> 00:19:57,520
want to be able to develop and test as

641
00:19:57,520 --> 00:19:59,600
well without maybe necessarily having to

642
00:19:59,600 --> 00:20:01,679
wait for me to actually get a service

643
00:20:01,679 --> 00:20:05,600
out and running so

644
00:20:05,600 --> 00:20:07,679
let's see let me make sure i'm in the

645
00:20:07,679 --> 00:20:10,320
right area

646
00:20:11,039 --> 00:20:14,080
yes there we go so

647
00:20:14,080 --> 00:20:17,919
here as i mentioned the

648
00:20:17,919 --> 00:20:20,480
spring cloud contracts team they created

649
00:20:20,480 --> 00:20:22,000
some docker images

650
00:20:22,000 --> 00:20:24,480
to encapsulate all this logic so let's

651
00:20:24,480 --> 00:20:26,720
let's see what it looks like to actually

652
00:20:26,720 --> 00:20:29,840
um use one of those so here i created a

653
00:20:29,840 --> 00:20:30,400
script

654
00:20:30,400 --> 00:20:32,080
for just running one of these docker

655
00:20:32,080 --> 00:20:34,240
images and so

656
00:20:34,240 --> 00:20:38,080
you have the spring cloud contract um

657
00:20:38,080 --> 00:20:41,760
docker image and um

658
00:20:41,760 --> 00:20:44,080
here i'm saying i'm gonna be you're

659
00:20:44,080 --> 00:20:45,039
gonna use these

660
00:20:45,039 --> 00:20:46,960
maven coordinates of com ibm developer

661
00:20:46,960 --> 00:20:48,640
producer service

662
00:20:48,640 --> 00:20:51,120
and this is the same like use the most

663
00:20:51,120 --> 00:20:52,720
recent version out there and it's going

664
00:20:52,720 --> 00:20:55,760
to be running at port 9876

665
00:20:55,760 --> 00:20:57,679
and then it's saying to look again to

666
00:20:57,679 --> 00:21:00,480
here to my github repository

667
00:21:00,480 --> 00:21:02,640
um to pull in these contracts to

668
00:21:02,640 --> 00:21:05,440
actually run this produce service

669
00:21:05,440 --> 00:21:10,080
now if i quit out there and i run this

670
00:21:10,080 --> 00:21:13,200
i'm going to get a example or

671
00:21:13,200 --> 00:21:16,400
a big service behind or a

672
00:21:16,400 --> 00:21:19,200
mock service running behind us under

673
00:21:19,200 --> 00:21:20,799
spring cloud contract

674
00:21:20,799 --> 00:21:22,640
you can see here is actually using

675
00:21:22,640 --> 00:21:24,799
wiremock it's kind of

676
00:21:24,799 --> 00:21:26,480
reading in those contracts consuming

677
00:21:26,480 --> 00:21:28,559
them and then using json

678
00:21:28,559 --> 00:21:32,159
um to kind of mock out those requests

679
00:21:32,159 --> 00:21:36,360
so if i go here to whoa the host

680
00:21:36,360 --> 00:21:40,080
9876 produce and apple

681
00:21:40,080 --> 00:21:41,679
i will go ahead and kind of get that

682
00:21:41,679 --> 00:21:45,600
response back based upon that contract

683
00:21:45,600 --> 00:21:48,960
and now if i quickly start

684
00:21:48,960 --> 00:21:51,520
up a little service that myself and a

685
00:21:51,520 --> 00:21:54,159
colleague helped put together

686
00:21:54,159 --> 00:21:56,960
actually let me just go up a couple

687
00:21:56,960 --> 00:21:58,320
there we go

688
00:21:58,320 --> 00:22:01,600
um so yeah npm run start run contract

689
00:22:01,600 --> 00:22:02,960
it's just going to start up a very

690
00:22:02,960 --> 00:22:03,520
simple

691
00:22:03,520 --> 00:22:06,799
angular application

692
00:22:07,760 --> 00:22:09,520
if we give it a couple of moments i'll

693
00:22:09,520 --> 00:22:10,960
get started here

694
00:22:10,960 --> 00:22:12,159
but one of the things that could be

695
00:22:12,159 --> 00:22:14,799
really interesting about this is

696
00:22:14,799 --> 00:22:16,240
one thing that's totally a little bit

697
00:22:16,240 --> 00:22:17,919
difficult about doing

698
00:22:17,919 --> 00:22:19,760
uh automated testing on front-end

699
00:22:19,760 --> 00:22:21,919
applications is sometimes they depend

700
00:22:21,919 --> 00:22:22,480
upon

701
00:22:22,480 --> 00:22:24,880
some back-end live service and sometimes

702
00:22:24,880 --> 00:22:26,400
that data can change

703
00:22:26,400 --> 00:22:28,559
on you that could cause a test to fail

704
00:22:28,559 --> 00:22:30,400
but again that test is failing

705
00:22:30,400 --> 00:22:32,880
not because something actually changed

706
00:22:32,880 --> 00:22:34,480
in the code but because of some

707
00:22:34,480 --> 00:22:36,640
back-end data change that could have

708
00:22:36,640 --> 00:22:37,600
just happened

709
00:22:37,600 --> 00:22:39,360
and so now you're having family test you

710
00:22:39,360 --> 00:22:40,880
kind of lose faith in those tests

711
00:22:40,880 --> 00:22:41,919
because

712
00:22:41,919 --> 00:22:44,640
um they're uh just giving you false

713
00:22:44,640 --> 00:22:45,280
negatives

714
00:22:45,280 --> 00:22:47,039
about failures when they're not actually

715
00:22:47,039 --> 00:22:48,400
broken

716
00:22:48,400 --> 00:22:52,080
so anyways here these four returns are

717
00:22:52,080 --> 00:22:52,880
coming from

718
00:22:52,880 --> 00:22:56,320
this mock service here

719
00:22:56,320 --> 00:22:59,039
uh whoops

720
00:23:00,320 --> 00:23:02,559
that fingering there we go so here we go

721
00:23:02,559 --> 00:23:03,679
like these four

722
00:23:03,679 --> 00:23:06,240
returns in json and that's what we're

723
00:23:06,240 --> 00:23:07,919
getting back here so like this service

724
00:23:07,919 --> 00:23:08,159
is

725
00:23:08,159 --> 00:23:10,240
actually talking to this mock service

726
00:23:10,240 --> 00:23:12,320
here if we put in

727
00:23:12,320 --> 00:23:15,520
apple we'll get two requests back here

728
00:23:15,520 --> 00:23:17,120
this is a very simple example but i

729
00:23:17,120 --> 00:23:19,280
think it's a pretty interesting

730
00:23:19,280 --> 00:23:22,960
use case for how contract testing

731
00:23:22,960 --> 00:23:25,120
can really help in other unexpected

732
00:23:25,120 --> 00:23:26,720
areas beyond just development and just

733
00:23:26,720 --> 00:23:28,320
beyond just the

734
00:23:28,320 --> 00:23:32,879
testing the validation of the api itself

735
00:23:34,480 --> 00:23:37,200
so some final points um while all this

736
00:23:37,200 --> 00:23:38,000
presentation

737
00:23:38,000 --> 00:23:40,240
i kind of focused on rest and http

738
00:23:40,240 --> 00:23:42,080
examples uh you can also use

739
00:23:42,080 --> 00:23:44,159
spring cloud contract for doing messages

740
00:23:44,159 --> 00:23:45,760
and event driven messages and stuff like

741
00:23:45,760 --> 00:23:46,640
that

742
00:23:46,640 --> 00:23:48,640
um it's also totally okay to change

743
00:23:48,640 --> 00:23:50,559
contracts you know we have at least in

744
00:23:50,559 --> 00:23:52,480
the us like contracts are written in

745
00:23:52,480 --> 00:23:54,640
zone and so on but it's fine to change

746
00:23:54,640 --> 00:23:55,200
them

747
00:23:55,200 --> 00:23:57,360
um they're there just to make sure that

748
00:23:57,360 --> 00:23:59,360
if someone either changes an api

749
00:23:59,360 --> 00:24:01,600
then the contract has to be updated to

750
00:24:01,600 --> 00:24:02,559
change it

751
00:24:02,559 --> 00:24:05,840
um it's just making sure unsolicited

752
00:24:05,840 --> 00:24:07,360
shapes can't get to production without

753
00:24:07,360 --> 00:24:08,799
anyone knowing is pretty much what it

754
00:24:08,799 --> 00:24:10,559
comes down to

755
00:24:10,559 --> 00:24:12,400
um also contract tests they're not

756
00:24:12,400 --> 00:24:13,840
acceptance tests or replacement for

757
00:24:13,840 --> 00:24:14,960
end-to-end tests

758
00:24:14,960 --> 00:24:17,039
they're just going to be part of a full

759
00:24:17,039 --> 00:24:18,320
test suite

760
00:24:18,320 --> 00:24:19,840
so not going to be testing things like

761
00:24:19,840 --> 00:24:22,880
resiliency timeouts performance edge

762
00:24:22,880 --> 00:24:25,039
cases and so on that's not the goal of

763
00:24:25,039 --> 00:24:27,440
end to end test it's just so overall

764
00:24:27,440 --> 00:24:28,960
what the api looks like what it's

765
00:24:28,960 --> 00:24:30,480
supposed to do given certain requests

766
00:24:30,480 --> 00:24:31,679
and response

767
00:24:31,679 --> 00:24:34,240
it's not trying to again test its cases

768
00:24:34,240 --> 00:24:35,360
you definitely can't stand

769
00:24:35,360 --> 00:24:37,120
performance because it's a mocked

770
00:24:37,120 --> 00:24:38,799
service all right

771
00:24:38,799 --> 00:24:41,039
so we're at the q a point so i hope you

772
00:24:41,039 --> 00:24:42,720
stick around for that

773
00:24:42,720 --> 00:24:45,279
um here are some links to all that and i

774
00:24:45,279 --> 00:24:46,000
will also

775
00:24:46,000 --> 00:24:49,360
get uh this um slides out to everyone

776
00:24:49,360 --> 00:24:51,200
here pretty soon and like the slack

777
00:24:51,200 --> 00:24:53,440
channel and on twitter so people can

778
00:24:53,440 --> 00:24:55,039
kind of get to this code and check it

779
00:24:55,039 --> 00:24:57,600
out for themselves

780
00:24:57,600 --> 00:25:00,720
so all right any question hey man

781
00:25:00,720 --> 00:25:02,799
yeah i just i just took over from uh

782
00:25:02,799 --> 00:25:05,120
from simon i mean uh it's european time

783
00:25:05,120 --> 00:25:05,600
zone

784
00:25:05,600 --> 00:25:07,919
and um some people do need to sleep i

785
00:25:07,919 --> 00:25:08,640
however will

786
00:25:08,640 --> 00:25:12,880
go on for the for the whole night

787
00:25:13,279 --> 00:25:14,720
yeah i've got the big cup of coffee

788
00:25:14,720 --> 00:25:16,480
going on and we are um

789
00:25:16,480 --> 00:25:18,320
we're going straight on but the first

790
00:25:18,320 --> 00:25:19,679
thing i want to ask you personally is

791
00:25:19,679 --> 00:25:20,080
like

792
00:25:20,080 --> 00:25:22,320
if i want to start with that contract

793
00:25:22,320 --> 00:25:23,760
contract testing because i see the

794
00:25:23,760 --> 00:25:25,200
benefits of it but

795
00:25:25,200 --> 00:25:28,320
um as you know if i'm running

796
00:25:28,320 --> 00:25:31,679
a somewhat older application

797
00:25:31,679 --> 00:25:34,559
um house and well we do we do have

798
00:25:34,559 --> 00:25:35,360
services

799
00:25:35,360 --> 00:25:38,720
though and so i so it it i get it

800
00:25:38,720 --> 00:25:41,919
that that things like contract testing

801
00:25:41,919 --> 00:25:42,559
you should be

802
00:25:42,559 --> 00:25:44,480
uh can be interesting for me how should

803
00:25:44,480 --> 00:25:48,000
i start i mean i find that difficult

804
00:25:48,000 --> 00:25:51,039
so how would you like um

805
00:25:51,039 --> 00:25:52,559
so it's like a new service or maybe have

806
00:25:52,559 --> 00:25:53,919
like an existing service you just kind

807
00:25:53,919 --> 00:25:55,520
of want to write some contracts for

808
00:25:55,520 --> 00:25:57,840
it yeah probably probably some some

809
00:25:57,840 --> 00:25:59,039
existing service because

810
00:25:59,039 --> 00:26:00,799
most of the time it's not the case that

811
00:26:00,799 --> 00:26:02,159
you run

812
00:26:02,159 --> 00:26:04,000
something from a clean sheet or you can

813
00:26:04,000 --> 00:26:05,360
you can start from the beginning

814
00:26:05,360 --> 00:26:08,960
but well a lot of us need to maintain um

815
00:26:08,960 --> 00:26:11,919
older applications absolutely absolutely

816
00:26:11,919 --> 00:26:13,840
and and so for that

817
00:26:13,840 --> 00:26:16,799
is um you could just kind of go ahead

818
00:26:16,799 --> 00:26:18,720
for even an existing service out there

819
00:26:18,720 --> 00:26:20,000
just kind of go back

820
00:26:20,000 --> 00:26:23,679
and um knowing how your service

821
00:26:23,679 --> 00:26:26,640
looks write out some of these contracts

822
00:26:26,640 --> 00:26:27,840
and

823
00:26:27,840 --> 00:26:30,159
make sure that they um test them to make

824
00:26:30,159 --> 00:26:31,360
sure that your api

825
00:26:31,360 --> 00:26:34,480
actually matches to them and

826
00:26:34,480 --> 00:26:36,559
once you feel like the contracts you've

827
00:26:36,559 --> 00:26:38,480
written actually match the current

828
00:26:38,480 --> 00:26:40,400
behavior the api or the expected

829
00:26:40,400 --> 00:26:41,919
behavior the api

830
00:26:41,919 --> 00:26:43,600
you can then actually then start using

831
00:26:43,600 --> 00:26:45,360
them to test to make sure that the api

832
00:26:45,360 --> 00:26:47,200
is continuing to meet

833
00:26:47,200 --> 00:26:49,600
um the expectations of those contracts

834
00:26:49,600 --> 00:26:51,520
and then you can start using

835
00:26:51,520 --> 00:26:53,520
those contracts kind of as i was sewing

836
00:26:53,520 --> 00:26:54,799
here at the end

837
00:26:54,799 --> 00:26:58,159
as a stand-in for testing um against

838
00:26:58,159 --> 00:26:59,679
that api without actually having hit

839
00:26:59,679 --> 00:27:01,039
that live service which again kind of

840
00:27:01,039 --> 00:27:02,480
comes with that

841
00:27:02,480 --> 00:27:04,320
problems of like a database or some

842
00:27:04,320 --> 00:27:06,000
backing service being down which would

843
00:27:06,000 --> 00:27:06,480
cause

844
00:27:06,480 --> 00:27:09,360
some tests to fail uh of course you know

845
00:27:09,360 --> 00:27:11,279
kind of retroactively going back

846
00:27:11,279 --> 00:27:12,720
can sometimes be a little bit more

847
00:27:12,720 --> 00:27:14,480
difficult um

848
00:27:14,480 --> 00:27:18,080
but uh it's definitely not impossible

849
00:27:18,080 --> 00:27:20,080
especially since this can be somewhat

850
00:27:20,080 --> 00:27:22,080
black box type of testing where you

851
00:27:22,080 --> 00:27:25,039
don't necessarily

852
00:27:25,200 --> 00:27:27,600
have to have you know re-engineer your

853
00:27:27,600 --> 00:27:28,480
code

854
00:27:28,480 --> 00:27:32,840
to meet all the ends and needs of the

855
00:27:32,840 --> 00:27:34,720
test

856
00:27:34,720 --> 00:27:37,520
what do you say is the biggest pitfall

857
00:27:37,520 --> 00:27:37,919
uh

858
00:27:37,919 --> 00:27:41,279
people take when doing contract testing

859
00:27:41,279 --> 00:27:46,000
uh so some of the biggest pitfalls is

860
00:27:46,000 --> 00:27:47,840
i guess maybe giving up halfway through

861
00:27:47,840 --> 00:27:49,520
or like not trying to test out

862
00:27:49,520 --> 00:27:54,240
every um well i guess a pitfall would be

863
00:27:54,240 --> 00:27:56,880
not actually having the test represent

864
00:27:56,880 --> 00:27:57,520
what the eight

865
00:27:57,520 --> 00:28:00,880
behind a behind behavior really is and

866
00:28:00,880 --> 00:28:03,200
maybe only say like doing happy path

867
00:28:03,200 --> 00:28:05,279
testing um stuff like that so like here

868
00:28:05,279 --> 00:28:06,960
this is like an example of a successful

869
00:28:06,960 --> 00:28:07,760
request

870
00:28:07,760 --> 00:28:09,840
but you aren't limited to only doing

871
00:28:09,840 --> 00:28:11,919
successful requests you can also do

872
00:28:11,919 --> 00:28:15,120
what happens if like um here

873
00:28:15,120 --> 00:28:17,600
like the client doesn't send like a

874
00:28:17,600 --> 00:28:20,000
required field like name or something

875
00:28:20,000 --> 00:28:22,080
and then i can send back a 400 saying

876
00:28:22,080 --> 00:28:24,559
hey there's a missing value required so

877
00:28:24,559 --> 00:28:26,080
you want to make sure your contracts

878
00:28:26,080 --> 00:28:28,880
fully cover the full behavior of the api

879
00:28:28,880 --> 00:28:30,559
that accurately represents what the api

880
00:28:30,559 --> 00:28:32,000
is supposed to be doing

881
00:28:32,000 --> 00:28:35,200
um if you just kind of hand wave it or

882
00:28:35,200 --> 00:28:36,559
don't you know really

883
00:28:36,559 --> 00:28:38,399
make an attempt to follow what the api

884
00:28:38,399 --> 00:28:39,840
is supposed to be doing

885
00:28:39,840 --> 00:28:42,159
then yeah those tests aren't going to be

886
00:28:42,159 --> 00:28:43,600
of much value to you are there going to

887
00:28:43,600 --> 00:28:46,959
be limited value at least

888
00:28:48,240 --> 00:28:52,480
okay um well that that is that is about

889
00:28:52,480 --> 00:28:53,120
it

890
00:28:53,120 --> 00:28:55,760
i get it awesome so um yeah we have we

891
00:28:55,760 --> 00:28:57,279
have one minute left and i'm actually

892
00:28:57,279 --> 00:28:57,919
just like

893
00:28:57,919 --> 00:28:59,679
waiting waiting for the for the next

894
00:28:59,679 --> 00:29:01,200
speaker i'm waiting for uh

895
00:29:01,200 --> 00:29:04,240
let me see who's next rafael uh

896
00:29:04,240 --> 00:29:07,919
uh will be next so uh billy i want to um

897
00:29:07,919 --> 00:29:10,840
i want to honestly thank you for uh

898
00:29:10,840 --> 00:29:12,000
absolutely

899
00:29:12,000 --> 00:29:13,760
uh let me see if in the meantime there

900
00:29:13,760 --> 00:29:15,919
are new questions because i don't

901
00:29:15,919 --> 00:29:19,600
see them on slidell so

902
00:29:19,600 --> 00:29:23,679
nope okay all right

903
00:29:23,679 --> 00:29:26,720
oh oh there's one we have we have still

904
00:29:26,720 --> 00:29:27,840
one minute so uh

905
00:29:27,840 --> 00:29:29,919
is there any way to know how many

906
00:29:29,919 --> 00:29:31,520
clients are consuming a particular

907
00:29:31,520 --> 00:29:34,080
endpoint or resource

908
00:29:34,080 --> 00:29:37,279
uh uh

909
00:29:37,279 --> 00:29:39,200
i don't know i guess you can maybe

910
00:29:39,200 --> 00:29:40,480
design a system

911
00:29:40,480 --> 00:29:42,559
like there wouldn't be an intrinsic way

912
00:29:42,559 --> 00:29:44,240
of doing that within spring cloud

913
00:29:44,240 --> 00:29:47,919
contract but maybe you could kind of see

914
00:29:47,919 --> 00:29:49,279
like how many people are pulling down

915
00:29:49,279 --> 00:29:51,600
the stubs or something to test against

916
00:29:51,600 --> 00:29:52,320
it

917
00:29:52,320 --> 00:29:54,640
um that's about the only thing and that

918
00:29:54,640 --> 00:29:56,159
would probably be some more advanced

919
00:29:56,159 --> 00:29:58,000
orchestration in your ops

920
00:29:58,000 --> 00:30:01,919
or um pipeline

921
00:30:02,159 --> 00:30:04,880
all right well let's cut it off thank

922
00:30:04,880 --> 00:30:05,520
you for uh

923
00:30:05,520 --> 00:30:08,080
for joining us and uh thank you see

924
00:30:08,080 --> 00:30:09,880
y'all later

925
00:30:09,880 --> 00:30:12,880
absolutely

