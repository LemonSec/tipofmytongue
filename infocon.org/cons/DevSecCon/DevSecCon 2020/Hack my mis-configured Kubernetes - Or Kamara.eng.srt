1
00:00:00,560 --> 00:00:03,120
oh how are you doing i'm great simon how

2
00:00:03,120 --> 00:00:04,000
are you

3
00:00:04,000 --> 00:00:05,680
not too bad thank you oh yeah i

4
00:00:05,680 --> 00:00:07,359
recognized the shirt now i know where i

5
00:00:07,359 --> 00:00:11,679
recognized you so oh you're in tel aviv

6
00:00:11,679 --> 00:00:13,679
yeah i'm listening to all of you it's a

7
00:00:13,679 --> 00:00:15,280
little bit a little bit tough to hear

8
00:00:15,280 --> 00:00:16,400
you wonder if you can move the mic a

9
00:00:16,400 --> 00:00:18,000
little bit closer

10
00:00:18,000 --> 00:00:19,920
yeah is it okay now that's a little bit

11
00:00:19,920 --> 00:00:21,680
better yeah um so maybe uh

12
00:00:21,680 --> 00:00:23,039
i'll i'll probably put the put the

13
00:00:23,039 --> 00:00:25,279
volume up as well maybe it's me um

14
00:00:25,279 --> 00:00:26,960
yeah thank you very much for joining or

15
00:00:26,960 --> 00:00:29,039
uh you're a you're a um

16
00:00:29,039 --> 00:00:30,880
a development team lead at snick right

17
00:00:30,880 --> 00:00:32,320
uh huh and what

18
00:00:32,320 --> 00:00:34,239
team do you work on uh so i'm

19
00:00:34,239 --> 00:00:35,520
celebrating two years

20
00:00:35,520 --> 00:00:38,640
today really congratulations happy

21
00:00:38,640 --> 00:00:42,399
birthday yeah thank you excellent and uh

22
00:00:42,399 --> 00:00:43,760
and the talk you're giving today is hack

23
00:00:43,760 --> 00:00:46,640
my misconfigured kubernetes

24
00:00:46,640 --> 00:00:48,559
exactly tell me don't tell me people are

25
00:00:48,559 --> 00:00:50,000
misconfiguring kubernetes i don't

26
00:00:50,000 --> 00:00:52,079
believe it

27
00:00:52,079 --> 00:00:55,199
how big is this so i think it's a big

28
00:00:55,199 --> 00:00:55,840
problem

29
00:00:55,840 --> 00:00:57,920
i think that it's still we'll talk about

30
00:00:57,920 --> 00:00:59,199
it but it's still kind of

31
00:00:59,199 --> 00:01:02,800
a gap of education uh people still not

32
00:01:02,800 --> 00:01:04,879
familiar too much with the environment

33
00:01:04,879 --> 00:01:06,159
and the risks

34
00:01:06,159 --> 00:01:08,799
that can uh can be a part of it uh so

35
00:01:08,799 --> 00:01:11,280
yeah this is what we're gonna talk about

36
00:01:11,280 --> 00:01:12,960
sounds sounds like a good session and

37
00:01:12,960 --> 00:01:14,720
i'll pass over to you as i know you it's

38
00:01:14,720 --> 00:01:16,080
uh it's a it's a short one these

39
00:01:16,080 --> 00:01:16,799
sessions so

40
00:01:16,799 --> 00:01:18,400
uh i don't want to take up too much of

41
00:01:18,400 --> 00:01:26,240
your time so or over to you

42
00:01:26,240 --> 00:01:28,799
so hopefully you can see my screen right

43
00:01:28,799 --> 00:01:29,280
now

44
00:01:29,280 --> 00:01:32,400
um it's a huge purple

45
00:01:32,400 --> 00:01:35,920
slide with a key dog on it so

46
00:01:35,920 --> 00:01:39,680
again my name is uh or camara as a

47
00:01:39,680 --> 00:01:42,000
as would like software team-related

48
00:01:42,000 --> 00:01:43,200
sneaks nick again

49
00:01:43,200 --> 00:01:46,479
is a is a developer first

50
00:01:46,479 --> 00:01:49,360
security company that helps organization

51
00:01:49,360 --> 00:01:50,640
to use open source

52
00:01:50,640 --> 00:01:54,079
components and for snake i worked

53
00:01:54,079 --> 00:01:55,840
as a security engineer in the government

54
00:01:55,840 --> 00:01:58,159
of israel and then this made a picture

55
00:01:58,159 --> 00:02:00,159
one year ago in an amazing trip in new

56
00:02:00,159 --> 00:02:02,880
zealand this is me those days

57
00:02:02,880 --> 00:02:06,159
uh doing zoom sessions all day long

58
00:02:06,159 --> 00:02:09,440
uh so in this talk i'm gonna talk about

59
00:02:09,440 --> 00:02:11,360
potential attack vectors

60
00:02:11,360 --> 00:02:13,840
uh in the cloud environment and we'll

61
00:02:13,840 --> 00:02:14,720
talk about

62
00:02:14,720 --> 00:02:16,959
the complexity in this world what's a

63
00:02:16,959 --> 00:02:18,560
little bit different in this world

64
00:02:18,560 --> 00:02:20,879
and then we do kind of drill down and

65
00:02:20,879 --> 00:02:22,800
talk about kubernetes

66
00:02:22,800 --> 00:02:26,080
pod pod configurations more specifically

67
00:02:26,080 --> 00:02:27,280
we're going to talk about

68
00:02:27,280 --> 00:02:28,800
security context and resource

69
00:02:28,800 --> 00:02:31,040
limitations uh we're going to

70
00:02:31,040 --> 00:02:33,680
talk about the usage and how useful are

71
00:02:33,680 --> 00:02:34,560
they

72
00:02:34,560 --> 00:02:36,640
but also talk about the security risks

73
00:02:36,640 --> 00:02:37,760
that are part of those

74
00:02:37,760 --> 00:02:41,680
configurations so i think that the main

75
00:02:41,680 --> 00:02:42,720
question is is

76
00:02:42,720 --> 00:02:44,720
how well configured is your cloud

77
00:02:44,720 --> 00:02:46,239
environment and i wanted to start with a

78
00:02:46,239 --> 00:02:47,760
good example

79
00:02:47,760 --> 00:02:50,000
uh i probably will all familiar with the

80
00:02:50,000 --> 00:02:51,040
ack of

81
00:02:51,040 --> 00:02:54,239
capital one so basically it was a huge

82
00:02:54,239 --> 00:02:54,800
one

83
00:02:54,800 --> 00:02:56,800
i think it's affected around like one

84
00:02:56,800 --> 00:03:00,000
million users only in the us

85
00:03:00,000 --> 00:03:02,640
and around like one million dollars in

86
00:03:02,640 --> 00:03:03,519
costs

87
00:03:03,519 --> 00:03:06,319
so it's a great example for two things

88
00:03:06,319 --> 00:03:07,920
the first one is misconfiguration

89
00:03:07,920 --> 00:03:08,400
because

90
00:03:08,400 --> 00:03:11,360
a capital one actually admitted that

91
00:03:11,360 --> 00:03:13,760
there was a problem in the configuration

92
00:03:13,760 --> 00:03:16,400
and the second part was the amount of

93
00:03:16,400 --> 00:03:17,440
potential

94
00:03:17,440 --> 00:03:19,360
security pitfalls that we should all be

95
00:03:19,360 --> 00:03:20,640
aware of

96
00:03:20,640 --> 00:03:24,560
so the actual steps in the act itself

97
00:03:24,560 --> 00:03:27,200
were like several steps into several

98
00:03:27,200 --> 00:03:28,640
areas so the first one

99
00:03:28,640 --> 00:03:30,560
was a misconfigured load balancer the

100
00:03:30,560 --> 00:03:33,120
second one is what was a vulnerable app

101
00:03:33,120 --> 00:03:36,239
which is with an srf vulnerability and

102
00:03:36,239 --> 00:03:36,799
the sec

103
00:03:36,799 --> 00:03:40,159
the third thing was an over permissive

104
00:03:40,159 --> 00:03:43,120
s3 bucket so all of those together

105
00:03:43,120 --> 00:03:45,680
basically help the attacker

106
00:03:45,680 --> 00:03:49,440
do the actor do the attack so

107
00:03:49,440 --> 00:03:50,799
i would like us to talk a little bit

108
00:03:50,799 --> 00:03:52,879
about the ownerships of uh

109
00:03:52,879 --> 00:03:55,120
developers those days in the cloud

110
00:03:55,120 --> 00:03:56,239
environment so

111
00:03:56,239 --> 00:03:57,519
we have the source code of the

112
00:03:57,519 --> 00:03:59,599
application itself right this is an

113
00:03:59,599 --> 00:04:01,840
example for a python app

114
00:04:01,840 --> 00:04:03,920
uh i just built so i need to make sure

115
00:04:03,920 --> 00:04:05,200
that the

116
00:04:05,200 --> 00:04:07,680
the application by itself is here we

117
00:04:07,680 --> 00:04:08,799
have the third body

118
00:04:08,799 --> 00:04:11,439
con dependencies of the application so

119
00:04:11,439 --> 00:04:13,599
this is the requirementstxt file for my

120
00:04:13,599 --> 00:04:14,640
python app

121
00:04:14,640 --> 00:04:15,840
and i need to make sure all the

122
00:04:15,840 --> 00:04:18,399
dependencies are secured

123
00:04:18,399 --> 00:04:20,399
and then we are wrapping the application

124
00:04:20,399 --> 00:04:22,320
inside the docker file so we have like

125
00:04:22,320 --> 00:04:23,840
the base image and we have all of the

126
00:04:23,840 --> 00:04:25,520
components of the base image

127
00:04:25,520 --> 00:04:27,840
and we have all the os packages that

128
00:04:27,840 --> 00:04:29,919
we're installing is part of the

129
00:04:29,919 --> 00:04:32,080
uh the docker image so you need to make

130
00:04:32,080 --> 00:04:33,840
sure they are secured as well

131
00:04:33,840 --> 00:04:35,919
and then we have like all of that all of

132
00:04:35,919 --> 00:04:38,240
the cloud all of the platform itself so

133
00:04:38,240 --> 00:04:39,759
infrastructure is code files like

134
00:04:39,759 --> 00:04:40,960
terraforms

135
00:04:40,960 --> 00:04:44,400
also a potential risk a security risk

136
00:04:44,400 --> 00:04:45,840
and last but not least the thing we're

137
00:04:45,840 --> 00:04:47,040
going to talk about today is the

138
00:04:47,040 --> 00:04:48,560
kubernetes files

139
00:04:48,560 --> 00:04:50,320
and and this is like an example for

140
00:04:50,320 --> 00:04:52,080
deployment file again

141
00:04:52,080 --> 00:04:54,639
like a place to to make sure that where

142
00:04:54,639 --> 00:04:55,120
there

143
00:04:55,120 --> 00:04:58,320
are no mistakes so yeah too many things

144
00:04:58,320 --> 00:04:58,960
to

145
00:04:58,960 --> 00:05:01,840
to worry about and again today we're

146
00:05:01,840 --> 00:05:03,440
going to talk about kubernetes security

147
00:05:03,440 --> 00:05:04,720
so just two quotes

148
00:05:04,720 --> 00:05:06,800
i wanted to start with the first one is

149
00:05:06,800 --> 00:05:08,720
about the fact that security

150
00:05:08,720 --> 00:05:11,120
of kubernetes is not it's not that

151
00:05:11,120 --> 00:05:12,080
simple

152
00:05:12,080 --> 00:05:14,800
and someone might say it's it's a bit

153
00:05:14,800 --> 00:05:16,000
complicated

154
00:05:16,000 --> 00:05:18,880
and and the second one is that it's apps

155
00:05:18,880 --> 00:05:20,160
to the devops team

156
00:05:20,160 --> 00:05:22,080
and the website teams to implement those

157
00:05:22,080 --> 00:05:24,160
configuration and enforce those

158
00:05:24,160 --> 00:05:26,320
and i will add that in my opinion it's

159
00:05:26,320 --> 00:05:28,560
also part of the developers

160
00:05:28,560 --> 00:05:31,919
to do these jobs as well so

161
00:05:31,919 --> 00:05:34,800
now let's talk about specific

162
00:05:34,800 --> 00:05:36,400
configuration as part of the

163
00:05:36,400 --> 00:05:38,560
of kubernetes the first one will be

164
00:05:38,560 --> 00:05:40,639
security context

165
00:05:40,639 --> 00:05:42,800
so for those of you if you're not

166
00:05:42,800 --> 00:05:44,800
familiar with security context basically

167
00:05:44,800 --> 00:05:45,520
defines

168
00:05:45,520 --> 00:05:48,160
privilege and access control setting for

169
00:05:48,160 --> 00:05:48,800
the pod

170
00:05:48,800 --> 00:05:50,479
or the container itself so this is how

171
00:05:50,479 --> 00:05:52,400
it looks like this is my

172
00:05:52,400 --> 00:05:55,680
ad and my pod object and more

173
00:05:55,680 --> 00:05:56,720
specifically

174
00:05:56,720 --> 00:05:59,680
this is the security context area and

175
00:05:59,680 --> 00:06:00,720
here we can see like

176
00:06:00,720 --> 00:06:03,120
two different attributes that we're

177
00:06:03,120 --> 00:06:04,840
going to talk about today privilege and

178
00:06:04,840 --> 00:06:06,639
capabilities

179
00:06:06,639 --> 00:06:08,240
so the first one is again privileged

180
00:06:08,240 --> 00:06:10,639
parts so what exactly are privileged

181
00:06:10,639 --> 00:06:11,120
spots

182
00:06:11,120 --> 00:06:13,919
privilege support basically let the

183
00:06:13,919 --> 00:06:14,720
containers

184
00:06:14,720 --> 00:06:17,759
access and use the host resources

185
00:06:17,759 --> 00:06:20,000
and basically think about scenarios

186
00:06:20,000 --> 00:06:21,039
where you need to

187
00:06:21,039 --> 00:06:23,280
access the graphic card or the network

188
00:06:23,280 --> 00:06:25,120
stack for all of those you actually

189
00:06:25,120 --> 00:06:28,080
actually need to use the hosts resources

190
00:06:28,080 --> 00:06:28,720
and

191
00:06:28,720 --> 00:06:31,039
the the security risk is quite trivial

192
00:06:31,039 --> 00:06:31,759
here

193
00:06:31,759 --> 00:06:34,639
and so basically processors in

194
00:06:34,639 --> 00:06:36,000
privileged containers

195
00:06:36,000 --> 00:06:39,280
mean that exactly root processes on the

196
00:06:39,280 --> 00:06:40,639
host itself

197
00:06:40,639 --> 00:06:43,199
uh in other words if we have an attacker

198
00:06:43,199 --> 00:06:43,840
on the

199
00:06:43,840 --> 00:06:46,319
on this pod they can basically do

200
00:06:46,319 --> 00:06:48,400
anything they want

201
00:06:48,400 --> 00:06:51,120
so the solution is in this case is quite

202
00:06:51,120 --> 00:06:52,000
simple

203
00:06:52,000 --> 00:06:55,759
uh do not set privileged setting to true

204
00:06:55,759 --> 00:06:57,840
and there are some cases i gotta say

205
00:06:57,840 --> 00:07:00,720
where you where you can use this option

206
00:07:00,720 --> 00:07:03,919
and and use actually privileged

207
00:07:03,919 --> 00:07:05,680
containers but you need to be around the

208
00:07:05,680 --> 00:07:07,680
consequences

209
00:07:07,680 --> 00:07:09,280
so let's start with an example with the

210
00:07:09,280 --> 00:07:11,120
demo so in this demo we'll have two

211
00:07:11,120 --> 00:07:12,080
different apps

212
00:07:12,080 --> 00:07:15,199
the first one will be an isolated app

213
00:07:15,199 --> 00:07:17,919
that basically writes files to the disk

214
00:07:17,919 --> 00:07:19,599
like a secret file with

215
00:07:19,599 --> 00:07:22,400
credit cards and with details of credit

216
00:07:22,400 --> 00:07:23,840
cards the second app

217
00:07:23,840 --> 00:07:25,440
is basically a vulnerable app and this

218
00:07:25,440 --> 00:07:27,360
volatile app contains

219
00:07:27,360 --> 00:07:29,919
rc remote code execution vulnerability

220
00:07:29,919 --> 00:07:31,440
in the app itself

221
00:07:31,440 --> 00:07:35,199
and also the it's also a privileged

222
00:07:35,199 --> 00:07:38,400
pod and this is the problem so this is

223
00:07:38,400 --> 00:07:40,080
our node and basically

224
00:07:40,080 --> 00:07:42,400
the two apps running on the same node it

225
00:07:42,400 --> 00:07:44,080
basically means that both of them are

226
00:07:44,080 --> 00:07:45,440
using the same

227
00:07:45,440 --> 00:07:48,720
docker engine uh

228
00:07:48,720 --> 00:07:51,039
and also the docker layers are stored on

229
00:07:51,039 --> 00:07:53,039
the same local storage

230
00:07:53,039 --> 00:07:55,840
so in other words an attacker can

231
00:07:55,840 --> 00:07:56,639
basically

232
00:07:56,639 --> 00:08:00,639
access all of the all of the files

233
00:08:00,639 --> 00:08:03,520
of the payment and with an access to the

234
00:08:03,520 --> 00:08:05,520
vulnerable port can basically access

235
00:08:05,520 --> 00:08:08,800
the files of the payment application

236
00:08:08,800 --> 00:08:13,840
so now let's go into a demo

237
00:08:14,020 --> 00:08:17,159
[Music]

238
00:08:22,639 --> 00:08:26,720
yeah so what you can see here is like

239
00:08:26,720 --> 00:08:31,199
uh can you see my terminal yeah

240
00:08:31,199 --> 00:08:33,760
uh so in this example we will see like

241
00:08:33,760 --> 00:08:34,320
this uh

242
00:08:34,320 --> 00:08:36,880
two applications so we have like the the

243
00:08:36,880 --> 00:08:38,958
web application with a privilege

244
00:08:38,958 --> 00:08:42,320
truth and i'm using

245
00:08:42,320 --> 00:08:44,240
basically using mini cube to run

246
00:08:44,240 --> 00:08:46,000
everything so we can see like

247
00:08:46,000 --> 00:08:49,279
the deployments that we have just a

248
00:08:49,279 --> 00:08:51,680
second

249
00:08:52,800 --> 00:08:56,560
thank you froze yeah

250
00:08:56,560 --> 00:08:57,920
so we can see the deployments that we

251
00:08:57,920 --> 00:08:59,760
have like those two deployments and we

252
00:08:59,760 --> 00:09:01,120
have the pods

253
00:09:01,120 --> 00:09:05,040
and we have an ingress to access this

254
00:09:05,040 --> 00:09:07,040
application and this is basically our

255
00:09:07,040 --> 00:09:09,120
application so we have two parts here

256
00:09:09,120 --> 00:09:11,120
the first one is more like

257
00:09:11,120 --> 00:09:14,399
uh just a place to post feedbacks and to

258
00:09:14,399 --> 00:09:16,480
output photos the second one is to

259
00:09:16,480 --> 00:09:16,959
support

260
00:09:16,959 --> 00:09:18,800
our app so let's start by supporting our

261
00:09:18,800 --> 00:09:20,839
app so i'm gonna

262
00:09:20,839 --> 00:09:25,680
donate like one dollar

263
00:09:25,680 --> 00:09:29,040
uh using simon credit card

264
00:09:29,040 --> 00:09:32,240
and yeah we donated one dollar and now

265
00:09:32,240 --> 00:09:34,000
let's see what we can do as an actor on

266
00:09:34,000 --> 00:09:34,720
this

267
00:09:34,720 --> 00:09:37,040
on this website so the first thing i

268
00:09:37,040 --> 00:09:39,600
wanted and what i'm going to do

269
00:09:39,600 --> 00:09:41,920
is trying to upload something different

270
00:09:41,920 --> 00:09:43,360
than an image

271
00:09:43,360 --> 00:09:45,200
and i'm actually going to upload a shell

272
00:09:45,200 --> 00:09:47,600
script

273
00:09:48,320 --> 00:09:51,279
and this short script this is the

274
00:09:51,279 --> 00:09:52,720
shuttle script basically

275
00:09:52,720 --> 00:09:55,360
this shell script is the example for the

276
00:09:55,360 --> 00:09:56,000
rce

277
00:09:56,000 --> 00:09:58,240
inside the app so once i uploaded the

278
00:09:58,240 --> 00:10:00,000
search script into the application

279
00:10:00,000 --> 00:10:03,519
i can now access it using the app

280
00:10:03,519 --> 00:10:06,079
and run commands on the on the pod

281
00:10:06,079 --> 00:10:07,680
itself

282
00:10:07,680 --> 00:10:10,800
so now when we uploaded the uh

283
00:10:10,800 --> 00:10:13,600
the shell script we can now access it

284
00:10:13,600 --> 00:10:14,800
using curl commands

285
00:10:14,800 --> 00:10:18,000
so i'm taking the id of the getting the

286
00:10:18,000 --> 00:10:21,360
ip of the of the server

287
00:10:21,360 --> 00:10:23,040
so i'm going to switch all of the

288
00:10:23,040 --> 00:10:26,399
articles with this one

289
00:10:29,440 --> 00:10:31,519
now i need the name of the of the file

290
00:10:31,519 --> 00:10:32,720
itself

291
00:10:32,720 --> 00:10:37,680
so when i inspect this page

292
00:10:37,680 --> 00:10:40,000
i'm gonna click on that this is the name

293
00:10:40,000 --> 00:10:41,600
of the file itself so i'm gonna

294
00:10:41,600 --> 00:10:47,839
replace it with it in my template

295
00:10:53,120 --> 00:10:55,040
so now basically what we have are

296
00:10:55,040 --> 00:10:56,160
current commands

297
00:10:56,160 --> 00:10:59,279
that we can access as an actor as an

298
00:10:59,279 --> 00:11:00,720
attacker to the

299
00:11:00,720 --> 00:11:03,760
uh the pods and try to to get some

300
00:11:03,760 --> 00:11:04,880
information so the first thing we're

301
00:11:04,880 --> 00:11:06,399
going to do is just to make sure that we

302
00:11:06,399 --> 00:11:06,720
are

303
00:11:06,720 --> 00:11:09,120
actually running on the same pods so

304
00:11:09,120 --> 00:11:10,800
we're going to run a you name

305
00:11:10,800 --> 00:11:14,000
command and this is like the results

306
00:11:14,000 --> 00:11:16,320
so this is the name of the machine that

307
00:11:16,320 --> 00:11:17,360
we're running on

308
00:11:17,360 --> 00:11:18,880
just for validation we're going to do

309
00:11:18,880 --> 00:11:20,399
the same thing

310
00:11:20,399 --> 00:11:23,040
from uh from the pod itself so we're

311
00:11:23,040 --> 00:11:23,760
gonna

312
00:11:23,760 --> 00:11:26,720
exec into the pod itself this is the

313
00:11:26,720 --> 00:11:28,000
name of the pod

314
00:11:28,000 --> 00:11:29,200
and we're going to run the you name

315
00:11:29,200 --> 00:11:31,839
command again

316
00:11:31,839 --> 00:11:33,600
and you can see that the output the

317
00:11:33,600 --> 00:11:35,360
result is exactly

318
00:11:35,360 --> 00:11:38,560
the same thing so next thing we're going

319
00:11:38,560 --> 00:11:39,360
to do is an

320
00:11:39,360 --> 00:11:42,560
as a macro we're going to uh create a

321
00:11:42,560 --> 00:11:45,119
new deer

322
00:11:46,160 --> 00:11:49,360
and under temp host and the

323
00:11:49,360 --> 00:11:52,399
next thing i'm gonna do is to do a let's

324
00:11:52,399 --> 00:11:53,920
run a let's command

325
00:11:53,920 --> 00:11:56,320
and check how many files do we have on

326
00:11:56,320 --> 00:11:57,519
this in this gear

327
00:11:57,519 --> 00:11:59,200
so right now we have nothing we have

328
00:11:59,200 --> 00:12:00,720
zero files in this gear

329
00:12:00,720 --> 00:12:02,880
so next thing we're going to do is to

330
00:12:02,880 --> 00:12:04,399
mount and this is like the interesting

331
00:12:04,399 --> 00:12:05,440
part we can mount

332
00:12:05,440 --> 00:12:08,959
the os file system into the deal we just

333
00:12:08,959 --> 00:12:10,880
created so this is the command

334
00:12:10,880 --> 00:12:13,440
we're running we're running mount of uh

335
00:12:13,440 --> 00:12:14,480
wda1

336
00:12:14,480 --> 00:12:18,320
into temp host so run this command

337
00:12:18,320 --> 00:12:20,160
and hopefully it's worked let's see if

338
00:12:20,160 --> 00:12:22,160
it actually works so let's check

339
00:12:22,160 --> 00:12:26,639
the files under the and the the aux deer

340
00:12:26,639 --> 00:12:28,399
but before we had nothing like when we

341
00:12:28,399 --> 00:12:30,240
run the ls command but now we actually

342
00:12:30,240 --> 00:12:31,519
can see

343
00:12:31,519 --> 00:12:34,800
some uh directories after we

344
00:12:34,800 --> 00:12:37,600
after we create run the mount command

345
00:12:37,600 --> 00:12:39,839
now

346
00:12:40,160 --> 00:12:43,200
when we actually can access the hosts

347
00:12:43,200 --> 00:12:44,160
file system

348
00:12:44,160 --> 00:12:46,880
we can look for all of the files named

349
00:12:46,880 --> 00:12:48,079
cards json and

350
00:12:48,079 --> 00:12:50,320
let's assume that the sophisticated

351
00:12:50,320 --> 00:12:51,440
actor already

352
00:12:51,440 --> 00:12:52,880
investigated the network and they

353
00:12:52,880 --> 00:12:54,000
realized like the name of the

354
00:12:54,000 --> 00:12:56,240
interesting files

355
00:12:56,240 --> 00:12:58,240
so now we're going to run the file

356
00:12:58,240 --> 00:12:59,279
command

357
00:12:59,279 --> 00:13:03,200
a find command now we have like

358
00:13:03,200 --> 00:13:06,480
the name of the file and just want to

359
00:13:06,480 --> 00:13:07,519
say that this

360
00:13:07,519 --> 00:13:11,040
those two like this path is basically

361
00:13:11,040 --> 00:13:13,200
part of the docker layers you see it's

362
00:13:13,200 --> 00:13:14,079
like that

363
00:13:14,079 --> 00:13:16,399
where the docker basically the docker

364
00:13:16,399 --> 00:13:17,200
engine

365
00:13:17,200 --> 00:13:20,160
keeps all the layers under the overlay

366
00:13:20,160 --> 00:13:20,720
to

367
00:13:20,720 --> 00:13:22,560
a directory and now we are access

368
00:13:22,560 --> 00:13:23,920
accessing the

369
00:13:23,920 --> 00:13:26,160
docker layers themselves so i'm going to

370
00:13:26,160 --> 00:13:27,600
take

371
00:13:27,600 --> 00:13:30,079
this one

372
00:13:31,360 --> 00:13:34,480
and i'm going to the

373
00:13:34,480 --> 00:13:36,639
content of this on this file okay so we

374
00:13:36,639 --> 00:13:37,600
have basically we have

375
00:13:37,600 --> 00:13:40,560
two different uh two different files

376
00:13:40,560 --> 00:13:42,480
because each one of them is a different

377
00:13:42,480 --> 00:13:49,199
layer so i'm gonna take the second one

378
00:13:49,199 --> 00:13:52,639
and now we can see the credit card from

379
00:13:52,639 --> 00:13:55,120
the second from the second part okay so

380
00:13:55,120 --> 00:13:56,720
this is actually the problem and now

381
00:13:56,720 --> 00:13:58,880
let's see how we can solve it

382
00:13:58,880 --> 00:14:02,079
so let's turn this privilege into false

383
00:14:02,079 --> 00:14:04,880
you can also drop it let's turn it into

384
00:14:04,880 --> 00:14:05,680
false

385
00:14:05,680 --> 00:14:07,600
and now we're gonna clean all of our

386
00:14:07,600 --> 00:14:09,680
environment i have a nice

387
00:14:09,680 --> 00:14:12,800
uh script for creating the environment

388
00:14:12,800 --> 00:14:16,079
all over again but you can see here

389
00:14:16,079 --> 00:14:19,920
is that the new pods are being created

390
00:14:19,920 --> 00:14:24,479
now let's try to do exactly the same

391
00:14:28,839 --> 00:14:30,079
thing

392
00:14:30,079 --> 00:14:32,960
i'm gonna i'm gonna upload

393
00:14:32,960 --> 00:14:34,240
[Music]

394
00:14:34,240 --> 00:14:37,760
this php script again

395
00:14:38,240 --> 00:14:41,120
and i'm going to use exactly the same

396
00:14:41,120 --> 00:14:43,600
command that i just used before

397
00:14:43,600 --> 00:14:46,079
so the first one will be to create a

398
00:14:46,079 --> 00:14:48,719
camp deer

399
00:14:49,360 --> 00:14:51,040
i'm gonna check the content of the

400
00:14:51,040 --> 00:14:52,880
temple here i expected to see

401
00:14:52,880 --> 00:14:55,600
nothing and now i'm going to run the

402
00:14:55,600 --> 00:15:00,079
mount command now i expect to see

403
00:15:00,079 --> 00:15:04,079
something but i still see no results

404
00:15:04,079 --> 00:15:05,760
and the reason for that is because we

405
00:15:05,760 --> 00:15:07,360
change the privilege

406
00:15:07,360 --> 00:15:10,959
into false so if you wanna try to run

407
00:15:10,959 --> 00:15:11,600
this command

408
00:15:11,600 --> 00:15:14,720
inside the pod itself let's exact

409
00:15:14,720 --> 00:15:18,000
into the pod itself now let's run the

410
00:15:18,000 --> 00:15:20,720
mount command

411
00:15:21,040 --> 00:15:25,040
inside the pod itself and notice and

412
00:15:25,040 --> 00:15:28,560
doctor and i will see the permission

413
00:15:28,560 --> 00:15:29,519
denied

414
00:15:29,519 --> 00:15:33,120
error cool

415
00:15:33,120 --> 00:15:36,720
so let's go back to

416
00:15:36,720 --> 00:15:41,120
the presentation

417
00:15:41,120 --> 00:15:42,800
cool so we talked about privilege but

418
00:15:42,800 --> 00:15:44,800
next thing for us is to talk about

419
00:15:44,800 --> 00:15:47,120
boot containers so what exactly do we

420
00:15:47,120 --> 00:15:48,560
need root containers so

421
00:15:48,560 --> 00:15:50,800
root containers are useful for uh

422
00:15:50,800 --> 00:15:52,480
different type of actions that we wanted

423
00:15:52,480 --> 00:15:52,880
to

424
00:15:52,880 --> 00:15:55,759
with more permissions inside our as part

425
00:15:55,759 --> 00:15:57,199
of our application or inside our

426
00:15:57,199 --> 00:15:59,920
pods for example installing packages or

427
00:15:59,920 --> 00:16:02,079
accessing specific files in the

428
00:16:02,079 --> 00:16:06,000
uh on the disk network operations or

429
00:16:06,000 --> 00:16:09,040
mounting volumes all of this stuff for

430
00:16:09,040 --> 00:16:10,639
all this stuff we actually need

431
00:16:10,639 --> 00:16:14,160
to we need the root users

432
00:16:14,160 --> 00:16:17,600
and i think the important

433
00:16:17,600 --> 00:16:20,079
part here is that we can easily forget

434
00:16:20,079 --> 00:16:21,199
or

435
00:16:21,199 --> 00:16:24,639
or kind of a misdefect our images can

436
00:16:24,639 --> 00:16:25,759
run as root so

437
00:16:25,759 --> 00:16:27,600
in this docker file in this simple

438
00:16:27,600 --> 00:16:29,600
docker file you can see that i'm just

439
00:16:29,600 --> 00:16:33,759
using the base image php cli

440
00:16:33,759 --> 00:16:37,920
and then basically i i'm doing nothing

441
00:16:37,920 --> 00:16:39,279
related to the user

442
00:16:39,279 --> 00:16:41,279
but it's the the results of this docker

443
00:16:41,279 --> 00:16:42,959
fund when we will actually build it

444
00:16:42,959 --> 00:16:45,120
the result will be an image within with

445
00:16:45,120 --> 00:16:46,000
a root

446
00:16:46,000 --> 00:16:49,120
user um so

447
00:16:49,120 --> 00:16:51,199
for from the security perspective again

448
00:16:51,199 --> 00:16:52,480
it's kind of trivial but

449
00:16:52,480 --> 00:16:54,240
root services make it easier for the

450
00:16:54,240 --> 00:16:55,839
attacker to take

451
00:16:55,839 --> 00:16:57,680
privileged actions and again like we

452
00:16:57,680 --> 00:16:58,880
mentioned before accessing

453
00:16:58,880 --> 00:17:01,040
files exploring the network accessing

454
00:17:01,040 --> 00:17:02,880
other containers

455
00:17:02,880 --> 00:17:04,079
so let's talk a little bit about the

456
00:17:04,079 --> 00:17:06,000
solutions um

457
00:17:06,000 --> 00:17:08,400
the first one can be linux capabilities

458
00:17:08,400 --> 00:17:09,439
so it's another

459
00:17:09,439 --> 00:17:12,640
option under the security context and

460
00:17:12,640 --> 00:17:14,640
basically noticeabilities are an option

461
00:17:14,640 --> 00:17:16,640
to grant specific permissions to your

462
00:17:16,640 --> 00:17:18,400
application to your service

463
00:17:18,400 --> 00:17:21,359
and it's basically help you to prevent

464
00:17:21,359 --> 00:17:22,400
granting a full

465
00:17:22,400 --> 00:17:25,439
boot access for application so the first

466
00:17:25,439 --> 00:17:27,839
recommendation is to start by dropping

467
00:17:27,839 --> 00:17:29,679
all of the capabilities of your

468
00:17:29,679 --> 00:17:31,600
application and then gradually

469
00:17:31,600 --> 00:17:33,840
add those capabilities you actually need

470
00:17:33,840 --> 00:17:35,760
your application actually needs

471
00:17:35,760 --> 00:17:39,039
so let's try it

472
00:17:39,360 --> 00:17:41,679
uh so this is my docker file i'm using

473
00:17:41,679 --> 00:17:43,360
like a php

474
00:17:43,360 --> 00:17:46,720
and and this is my this is my

475
00:17:46,720 --> 00:17:48,400
deployment so you can see that i'm not

476
00:17:48,400 --> 00:17:51,120
running a privileged pub

477
00:17:51,120 --> 00:17:54,240
and now what we're going to try to do

478
00:17:54,240 --> 00:17:57,039
is to run inside the pod itself and to

479
00:17:57,039 --> 00:17:57,360
run

480
00:17:57,360 --> 00:18:00,400
net command nmap is basically kind of a

481
00:18:00,400 --> 00:18:02,000
tool it's a free tool

482
00:18:02,000 --> 00:18:04,320
for network scanning and it's commonly

483
00:18:04,320 --> 00:18:05,280
used with

484
00:18:05,280 --> 00:18:07,760
by attackers to discover hosts and

485
00:18:07,760 --> 00:18:09,919
services and computers in the network

486
00:18:09,919 --> 00:18:12,640
so you can see that i in the terminal i

487
00:18:12,640 --> 00:18:13,840
basically

488
00:18:13,840 --> 00:18:16,880
ran the anime command and then i

489
00:18:16,880 --> 00:18:19,200
the end of quran actually found like a

490
00:18:19,200 --> 00:18:20,400
different

491
00:18:20,400 --> 00:18:22,720
the payment service in the network so

492
00:18:22,720 --> 00:18:24,000
now i can think that

493
00:18:24,000 --> 00:18:27,120
this payment service and if for example

494
00:18:27,120 --> 00:18:28,320
this permit service

495
00:18:28,320 --> 00:18:30,559
as a vulnerability inside it maybe i can

496
00:18:30,559 --> 00:18:31,760
access it

497
00:18:31,760 --> 00:18:34,960
um like using the uh

498
00:18:34,960 --> 00:18:38,559
like using the the network so now

499
00:18:38,559 --> 00:18:42,240
let's try to solve it and

500
00:18:42,240 --> 00:18:45,600
what we're gonna do right now is to drop

501
00:18:45,600 --> 00:18:50,000
all the capabilities of this part

502
00:18:50,400 --> 00:18:53,440
so we basically add drop all i'm gonna

503
00:18:53,440 --> 00:18:55,440
clean up my environment and i'm going to

504
00:18:55,440 --> 00:18:58,240
build everything again

505
00:18:58,240 --> 00:19:00,559
and you can see that newports are being

506
00:19:00,559 --> 00:19:01,760
created right now

507
00:19:01,760 --> 00:19:03,840
so we have viewports running and we're

508
00:19:03,840 --> 00:19:04,960
going to exec

509
00:19:04,960 --> 00:19:08,000
into one of those into our web

510
00:19:08,000 --> 00:19:11,039
deployment file

511
00:19:11,039 --> 00:19:12,559
and we're going to try to do exactly the

512
00:19:12,559 --> 00:19:14,720
same thing

513
00:19:14,720 --> 00:19:18,000
we're gonna we're going to find the ip

514
00:19:18,000 --> 00:19:19,840
of our pod and we're going to run the

515
00:19:19,840 --> 00:19:22,960
endnote command again

516
00:19:22,960 --> 00:19:26,240
so exactly the same thing as before

517
00:19:26,240 --> 00:19:29,120
but now we have failed to open the

518
00:19:29,120 --> 00:19:30,480
network device

519
00:19:30,480 --> 00:19:32,320
and if we're going to try to do ping as

520
00:19:32,320 --> 00:19:33,679
well we also

521
00:19:33,679 --> 00:19:36,080
got operational permitted so the reason

522
00:19:36,080 --> 00:19:38,320
for that is that basically nmap sends

523
00:19:38,320 --> 00:19:39,280
and receive

524
00:19:39,280 --> 00:19:42,240
roll packets row packets uh so it's neat

525
00:19:42,240 --> 00:19:43,280
to access

526
00:19:43,280 --> 00:19:46,320
the raw network socket of the

527
00:19:46,320 --> 00:19:49,360
of the of the part and this is why

528
00:19:49,360 --> 00:19:52,559
nmap and also ping commands

529
00:19:52,559 --> 00:19:56,160
must run as a route so basically we

530
00:19:56,160 --> 00:19:59,200
just blocked it locked it

531
00:19:59,200 --> 00:20:01,840
and now let's go to the second option

532
00:20:01,840 --> 00:20:03,520
and the second option is

533
00:20:03,520 --> 00:20:06,799
the uh the option of run is not good

534
00:20:06,799 --> 00:20:08,640
and i guess you can understand from the

535
00:20:08,640 --> 00:20:10,480
name it basically means that

536
00:20:10,480 --> 00:20:13,760
we can make sure or cubelet won't start

537
00:20:13,760 --> 00:20:14,640
the container

538
00:20:14,640 --> 00:20:17,840
if the if it runs as a root

539
00:20:17,840 --> 00:20:20,080
so the simple recommendation is just

540
00:20:20,080 --> 00:20:21,280
turn it on

541
00:20:21,280 --> 00:20:23,440
if you don't need if you don't need a

542
00:20:23,440 --> 00:20:25,200
good container

543
00:20:25,200 --> 00:20:27,440
let's see this example so we're going to

544
00:20:27,440 --> 00:20:30,480
use exactly the same setup again

545
00:20:30,480 --> 00:20:33,360
let's remove the capabilities option and

546
00:20:33,360 --> 00:20:35,280
let's turn on that one is known root

547
00:20:35,280 --> 00:20:37,520
option

548
00:20:37,520 --> 00:20:38,400
so we're going to clean up the

549
00:20:38,400 --> 00:20:40,559
environment again and

550
00:20:40,559 --> 00:20:43,760
run the build option

551
00:20:46,320 --> 00:20:49,120
and what if you see right now that one

552
00:20:49,120 --> 00:20:50,720
of the new pod one of the

553
00:20:50,720 --> 00:20:53,440
web deployments failed with create

554
00:20:53,440 --> 00:20:54,320
container

555
00:20:54,320 --> 00:20:57,039
config error and when we will try to run

556
00:20:57,039 --> 00:20:58,799
a describe command of this

557
00:20:58,799 --> 00:21:01,120
container we will see the error and the

558
00:21:01,120 --> 00:21:03,760
error is just a second

559
00:21:03,760 --> 00:21:06,799
and the error is container as run is not

560
00:21:06,799 --> 00:21:07,200
root

561
00:21:07,200 --> 00:21:09,520
and image will run as root so basically

562
00:21:09,520 --> 00:21:11,200
we managed to block

563
00:21:11,200 --> 00:21:14,320
this this

564
00:21:14,320 --> 00:21:18,080
root container great

565
00:21:18,080 --> 00:21:20,080
so let next thing and last thing we're

566
00:21:20,080 --> 00:21:21,360
going to talk about are

567
00:21:21,360 --> 00:21:24,400
resource limitation basically we're

568
00:21:24,400 --> 00:21:25,760
talking about different type

569
00:21:25,760 --> 00:21:28,799
of security issues uh

570
00:21:28,799 --> 00:21:30,320
i think resource limitation is a great

571
00:21:30,320 --> 00:21:32,400
example for

572
00:21:32,400 --> 00:21:36,080
um like the bed the behavior of defaults

573
00:21:36,080 --> 00:21:39,200
in kubernetes config world and

574
00:21:39,200 --> 00:21:41,440
one thing we should like this like uh

575
00:21:41,440 --> 00:21:42,720
one thing we should definitely

576
00:21:42,720 --> 00:21:46,240
be aware of like the defaults so two

577
00:21:46,240 --> 00:21:48,640
to two resource resources that we are

578
00:21:48,640 --> 00:21:50,240
talking about like cpu

579
00:21:50,240 --> 00:21:54,080
and memory uh and basically by default

580
00:21:54,080 --> 00:21:56,799
ports are running with unbounded limits

581
00:21:56,799 --> 00:21:59,039
so it means that a single pod

582
00:21:59,039 --> 00:22:01,280
can consume all the memory and all the

583
00:22:01,280 --> 00:22:02,799
cpu

584
00:22:02,799 --> 00:22:05,039
that are available on the node itself

585
00:22:05,039 --> 00:22:07,039
and it also means that kubernetes

586
00:22:07,039 --> 00:22:09,200
might kill the application or other

587
00:22:09,200 --> 00:22:10,960
application in the same node

588
00:22:10,960 --> 00:22:14,720
when we will reach the those limits

589
00:22:14,720 --> 00:22:16,559
and so again defaults are never good and

590
00:22:16,559 --> 00:22:17,919
we should be aware of them

591
00:22:17,919 --> 00:22:19,840
and the best thing to do in this case is

592
00:22:19,840 --> 00:22:22,159
to manually assign those resources

593
00:22:22,159 --> 00:22:25,280
according to your application

594
00:22:25,280 --> 00:22:28,799
so the first scenario of the cpu i think

595
00:22:28,799 --> 00:22:30,559
it's the simple case because

596
00:22:30,559 --> 00:22:34,320
basically uh when your application

597
00:22:34,320 --> 00:22:36,640
hit the cpu limits there is a throttling

598
00:22:36,640 --> 00:22:37,919
mechanism

599
00:22:37,919 --> 00:22:40,320
that will prevent the application from

600
00:22:40,320 --> 00:22:41,840
taking all the the resource

601
00:22:41,840 --> 00:22:44,880
of the cpu resource and in this case

602
00:22:44,880 --> 00:22:46,720
basically kubernetes will not

603
00:22:46,720 --> 00:22:49,760
terminate your applications um but

604
00:22:49,760 --> 00:22:51,760
the worst case scenario will be that it

605
00:22:51,760 --> 00:22:53,280
will only affect

606
00:22:53,280 --> 00:22:55,280
the performance so everything will run

607
00:22:55,280 --> 00:22:57,280
slower but

608
00:22:57,280 --> 00:22:58,799
like all the applications will still be

609
00:22:58,799 --> 00:23:01,120
alive

610
00:23:01,440 --> 00:23:04,240
the like a different scenario is with

611
00:23:04,240 --> 00:23:04,960
memory because

612
00:23:04,960 --> 00:23:08,400
memory you cannot compress memory right

613
00:23:08,400 --> 00:23:11,440
and so if we will reach

614
00:23:11,440 --> 00:23:14,400
the memory limit kubernetes will start

615
00:23:14,400 --> 00:23:14,960
killing

616
00:23:14,960 --> 00:23:18,000
our reports so the worst case scenario

617
00:23:18,000 --> 00:23:20,640
from uh like a security perspective is

618
00:23:20,640 --> 00:23:21,280
kind of

619
00:23:21,280 --> 00:23:24,000
a dos attack denial of service attack

620
00:23:24,000 --> 00:23:24,720
where

621
00:23:24,720 --> 00:23:26,720
attackers can actually block legitimate

622
00:23:26,720 --> 00:23:28,559
users from accessing

623
00:23:28,559 --> 00:23:31,200
our application and i think that even

624
00:23:31,200 --> 00:23:32,000
more

625
00:23:32,000 --> 00:23:33,280
like the worse than the worst case

626
00:23:33,280 --> 00:23:36,159
scenario is a dos attack

627
00:23:36,159 --> 00:23:39,120
that that like will block other

628
00:23:39,120 --> 00:23:40,159
applications

629
00:23:40,159 --> 00:23:41,760
and this in the same node that they're

630
00:23:41,760 --> 00:23:43,279
running on say no

631
00:23:43,279 --> 00:23:45,120
and this is like the the demo that we're

632
00:23:45,120 --> 00:23:50,960
going to see right now

633
00:23:50,960 --> 00:23:54,320
let me share my

634
00:24:00,320 --> 00:24:03,520
so in this demo we can see two different

635
00:24:03,520 --> 00:24:04,400
applications

636
00:24:04,400 --> 00:24:06,960
the first one is like an innocent app

637
00:24:06,960 --> 00:24:08,559
where we can see the

638
00:24:08,559 --> 00:24:11,039
free available memory on this

639
00:24:11,039 --> 00:24:12,159
application

640
00:24:12,159 --> 00:24:14,400
and the second one is the vulnerable app

641
00:24:14,400 --> 00:24:16,840
where attackers can actually

642
00:24:16,840 --> 00:24:20,000
consume memory for example by a dos

643
00:24:20,000 --> 00:24:20,799
attack

644
00:24:20,799 --> 00:24:22,159
so the first thing we're going to do is

645
00:24:22,159 --> 00:24:23,840
try to allocate

646
00:24:23,840 --> 00:24:26,720
megabytes from the vulnerable app and

647
00:24:26,720 --> 00:24:27,919
what you can see right now

648
00:24:27,919 --> 00:24:30,480
is that we see a drop in the amount of

649
00:24:30,480 --> 00:24:30,960
free

650
00:24:30,960 --> 00:24:33,279
available megabytes in the innocent app

651
00:24:33,279 --> 00:24:34,640
let's do it again let's

652
00:24:34,640 --> 00:24:38,080
try to allocate 200 megabytes

653
00:24:38,080 --> 00:24:42,799
and you can see a drop in the

654
00:24:42,799 --> 00:24:46,320
not right now let's try it again

655
00:24:46,320 --> 00:24:48,080
yeah you can see that there is a drop in

656
00:24:48,080 --> 00:24:49,440
the available

657
00:24:49,440 --> 00:24:52,480
megabytes okay

658
00:24:52,480 --> 00:24:56,000
so now what we can do is try to turn on

659
00:24:56,000 --> 00:24:59,120
the resource limitation

660
00:24:59,120 --> 00:25:02,559
i'm going to to limit the memory to uh

661
00:25:02,559 --> 00:25:05,679
50 megabytes try to clean our

662
00:25:05,679 --> 00:25:07,600
environment

663
00:25:07,600 --> 00:25:11,679
let's try to build everything again

664
00:25:11,679 --> 00:25:13,840
so you can see that i got two new

665
00:25:13,840 --> 00:25:15,039
deployments

666
00:25:15,039 --> 00:25:18,320
i upline up two

667
00:25:19,440 --> 00:25:21,440
now let's make sure that everything is

668
00:25:21,440 --> 00:25:22,799
running

669
00:25:22,799 --> 00:25:25,039
yeah and now let's try to allocate again

670
00:25:25,039 --> 00:25:28,400
the same 200 megabytes

671
00:25:28,400 --> 00:25:30,400
well we just we just failed and

672
00:25:30,400 --> 00:25:31,440
basically we failed

673
00:25:31,440 --> 00:25:34,080
because kubernetes uh like blocked us

674
00:25:34,080 --> 00:25:35,520
from allocating all of those

675
00:25:35,520 --> 00:25:38,960
megabytes and basically let's just write

676
00:25:38,960 --> 00:25:39,919
to our

677
00:25:39,919 --> 00:25:41,919
10 megabytes you can see that it's

678
00:25:41,919 --> 00:25:44,720
actually working okay so i'm allocating

679
00:25:44,720 --> 00:25:48,480
10 megabytes uh but i cannot allocate

680
00:25:48,480 --> 00:25:51,679
like more than 50.

681
00:25:54,480 --> 00:25:58,000
go back to my slides

682
00:25:59,360 --> 00:26:02,400
so so basically in this demo

683
00:26:02,400 --> 00:26:05,520
uh we basically explain why

684
00:26:05,520 --> 00:26:07,760
we need to do to put proper boundaries

685
00:26:07,760 --> 00:26:09,600
to our application

686
00:26:09,600 --> 00:26:11,360
and we need to make sure that they don't

687
00:26:11,360 --> 00:26:13,440
consume too much resources

688
00:26:13,440 --> 00:26:14,720
that might affect like other

689
00:26:14,720 --> 00:26:18,320
applications on the same note

690
00:26:18,320 --> 00:26:20,640
so let's talk about some conclusions uh

691
00:26:20,640 --> 00:26:22,240
what we talked about we talked about the

692
00:26:22,240 --> 00:26:22,960
ownership

693
00:26:22,960 --> 00:26:24,720
of the developers in the cloud

694
00:26:24,720 --> 00:26:26,000
environments uh

695
00:26:26,000 --> 00:26:27,520
and the fact that it's getting bigger

696
00:26:27,520 --> 00:26:30,080
and bigger and also about the fact that

697
00:26:30,080 --> 00:26:32,240
kubernetes is part of it right

698
00:26:32,240 --> 00:26:33,360
kubernetes is a

699
00:26:33,360 --> 00:26:35,840
and kubernetes security is part of your

700
00:26:35,840 --> 00:26:36,480
uh

701
00:26:36,480 --> 00:26:39,279
services part of the application uh we

702
00:26:39,279 --> 00:26:40,159
talked about

703
00:26:40,159 --> 00:26:42,480
security context and we talked about a

704
00:26:42,480 --> 00:26:43,440
different type

705
00:26:43,440 --> 00:26:46,880
of security and

706
00:26:46,880 --> 00:26:48,960
security risk of like default security

707
00:26:48,960 --> 00:26:50,840
risk like resource

708
00:26:50,840 --> 00:26:53,200
limitation so

709
00:26:53,200 --> 00:26:55,200
kubernetes security is hard but it's

710
00:26:55,200 --> 00:26:57,120
it's definitely doable

711
00:26:57,120 --> 00:26:58,960
and i think that the developers should

712
00:26:58,960 --> 00:27:01,360
be familiar with the kubernetes risks

713
00:27:01,360 --> 00:27:03,840
as inseparable variable part of the

714
00:27:03,840 --> 00:27:05,440
application

715
00:27:05,440 --> 00:27:08,480
and but at the same time we need to help

716
00:27:08,480 --> 00:27:10,080
them right we need to use the proper

717
00:27:10,080 --> 00:27:11,200
tools

718
00:27:11,200 --> 00:27:14,480
uh so like everything will be easier

719
00:27:14,480 --> 00:27:16,159
as part of the development process but

720
00:27:16,159 --> 00:27:18,240
we also need to allow them

721
00:27:18,240 --> 00:27:21,279
to get familiar with those risks and

722
00:27:21,279 --> 00:27:24,399
again it's all about education

723
00:27:24,399 --> 00:27:27,039
and another concept that i think that

724
00:27:27,039 --> 00:27:28,960
kind of connected

725
00:27:28,960 --> 00:27:31,279
really good with the previous slide is

726
00:27:31,279 --> 00:27:33,039
that we need to help the developers by

727
00:27:33,039 --> 00:27:34,240
using those tools

728
00:27:34,240 --> 00:27:36,320
and adding them to the pipeline so

729
00:27:36,320 --> 00:27:37,360
automatically

730
00:27:37,360 --> 00:27:39,760
catching all of those security issues as

731
00:27:39,760 --> 00:27:41,039
soon as possible

732
00:27:41,039 --> 00:27:43,200
during the development process will

733
00:27:43,200 --> 00:27:44,880
basically help us

734
00:27:44,880 --> 00:27:48,080
remove those issues in production and

735
00:27:48,080 --> 00:27:50,720
fix them as soon as possible

736
00:27:50,720 --> 00:27:52,960
so what did we talked about so other

737
00:27:52,960 --> 00:27:55,200
important type of security components as

738
00:27:55,200 --> 00:27:56,640
part of the

739
00:27:56,640 --> 00:27:59,760
kubernetes config like our back road

740
00:27:59,760 --> 00:28:01,440
base access control

741
00:28:01,440 --> 00:28:04,320
the network policy other interesting

742
00:28:04,320 --> 00:28:05,200
features

743
00:28:05,200 --> 00:28:08,240
under the security context uh so

744
00:28:08,240 --> 00:28:09,760
please make sure you're familiar with

745
00:28:09,760 --> 00:28:12,080
those and at least yeah like you know

746
00:28:12,080 --> 00:28:14,240
what's the the proper the proper

747
00:28:14,240 --> 00:28:16,640
behavior in your environment

748
00:28:16,640 --> 00:28:19,440
uh we also because we're like a lot of

749
00:28:19,440 --> 00:28:21,440
time we also skipped the

750
00:28:21,440 --> 00:28:23,840
tools you can use other tools you can

751
00:28:23,840 --> 00:28:25,360
use to help you as part of

752
00:28:25,360 --> 00:28:29,200
that of this process so if i manage to

753
00:28:29,200 --> 00:28:30,720
if i've managed to convince you that

754
00:28:30,720 --> 00:28:31,440
security

755
00:28:31,440 --> 00:28:33,840
uh kubernetes security is important so

756
00:28:33,840 --> 00:28:35,679
please check out this list

757
00:28:35,679 --> 00:28:38,159
and the last one in this list is the the

758
00:28:38,159 --> 00:28:40,000
product that my team is working on at

759
00:28:40,000 --> 00:28:41,039
the moment

760
00:28:41,039 --> 00:28:44,880
so again just take a look on all of them

761
00:28:44,880 --> 00:28:47,120
so thank you very much uh thank you for

762
00:28:47,120 --> 00:28:48,880
your time i really hope you enjoy

763
00:28:48,880 --> 00:28:50,880
you can find me on twitter you can find

764
00:28:50,880 --> 00:28:52,399
me a link in

765
00:28:52,399 --> 00:28:56,320
and that's it wonderful thank you very

766
00:28:56,320 --> 00:28:57,279
much oh

767
00:28:57,279 --> 00:29:00,000
got a quick minute uh there's uh just

768
00:29:00,000 --> 00:29:01,279
checking for questions if you don't have

769
00:29:01,279 --> 00:29:02,799
any questions please do ping them

770
00:29:02,799 --> 00:29:03,360
through

771
00:29:03,360 --> 00:29:05,679
um or would you would you say there is a

772
00:29:05,679 --> 00:29:06,799
um

773
00:29:06,799 --> 00:29:09,200
in in terms of uh one of the biggest

774
00:29:09,200 --> 00:29:10,559
problems with this

775
00:29:10,559 --> 00:29:12,880
kind of vulnerabilities and issues in

776
00:29:12,880 --> 00:29:14,240
configuration

777
00:29:14,240 --> 00:29:16,480
do you think it's an insecure default

778
00:29:16,480 --> 00:29:17,679
issue or do you think

779
00:29:17,679 --> 00:29:20,960
it's an education for users issue

780
00:29:20,960 --> 00:29:24,000
so i i think it's both of them

781
00:29:24,000 --> 00:29:26,000
like obviously there is a problem of the

782
00:29:26,000 --> 00:29:27,120
defaults

783
00:29:27,120 --> 00:29:29,360
and like you need to make sure that like

784
00:29:29,360 --> 00:29:30,240
you're not using

785
00:29:30,240 --> 00:29:32,159
any defaults or if the defaults are

786
00:29:32,159 --> 00:29:34,000
appropriate your own environment

787
00:29:34,000 --> 00:29:36,240
but i think that it's also the problem

788
00:29:36,240 --> 00:29:37,279
of the education

789
00:29:37,279 --> 00:29:39,440
because if people are not familiar like

790
00:29:39,440 --> 00:29:40,799
if the developers

791
00:29:40,799 --> 00:29:43,200
are not familiar with those issues at

792
00:29:43,200 --> 00:29:44,000
all

793
00:29:44,000 --> 00:29:46,240
then like they will stay with the part

794
00:29:46,240 --> 00:29:47,520
of the application but they will not

795
00:29:47,520 --> 00:29:48,399
stay with that

796
00:29:48,399 --> 00:29:50,320
they will not talk about the security

797
00:29:50,320 --> 00:29:52,399
risks in the environment itself like in

798
00:29:52,399 --> 00:29:54,399
kubernetes itself

799
00:29:54,399 --> 00:29:57,520
so it's both of them awesome thank you

800
00:29:57,520 --> 00:29:58,240
very much or

801
00:29:58,240 --> 00:30:00,000
really appreciate your time on the on

802
00:30:00,000 --> 00:30:02,159
the on the conference thank you very

803
00:30:02,159 --> 00:30:03,520
much for your support

804
00:30:03,520 --> 00:30:06,960
thank you and uh and yeah we'll uh we'll

805
00:30:06,960 --> 00:30:09,360
jump into a 15-minute coffee break

806
00:30:09,360 --> 00:30:11,440
and then we will be in the final stretch

807
00:30:11,440 --> 00:30:13,440
the last hour of the conference so thank

808
00:30:13,440 --> 00:30:15,120
you to oran thank you to snick for

809
00:30:15,120 --> 00:30:17,760
for your sponsorship and hosting and uh

810
00:30:17,760 --> 00:30:18,840
see you all

811
00:30:18,840 --> 00:30:21,840
soon

