1
00:00:00,160 --> 00:00:02,879
good oh deal but already a great start

2
00:00:02,879 --> 00:00:03,520
yeah

3
00:00:03,520 --> 00:00:05,040
awesome stuff i'll disappear over to you

4
00:00:05,040 --> 00:00:06,560
xander uh

5
00:00:06,560 --> 00:00:09,920
good morning everyone um i apologize

6
00:00:09,920 --> 00:00:12,080
i found the uh the camera that was

7
00:00:12,080 --> 00:00:13,120
sitting under the

8
00:00:13,120 --> 00:00:16,880
table it's about from 1990

9
00:00:17,279 --> 00:00:20,160
so i'm sure you've heard a lot of talks

10
00:00:20,160 --> 00:00:21,520
about

11
00:00:21,520 --> 00:00:23,600
containers um this is a talk about

12
00:00:23,600 --> 00:00:25,439
cloud-native build packs which is a

13
00:00:25,439 --> 00:00:28,880
a way to make containers

14
00:00:29,039 --> 00:00:30,800
i'm i'm gonna just introduce myself my

15
00:00:30,800 --> 00:00:32,079
name is xander

16
00:00:32,079 --> 00:00:35,040
mackey um i work at vmware i used to

17
00:00:35,040 --> 00:00:36,719
work at pivotal i came into vmware

18
00:00:36,719 --> 00:00:37,760
through the acquisition

19
00:00:37,760 --> 00:00:39,920
um for about two years i've been there

20
00:00:39,920 --> 00:00:41,840
working on various aspects of the cloud

21
00:00:41,840 --> 00:00:43,680
foundry product

22
00:00:43,680 --> 00:00:45,360
i've been an open source contributor for

23
00:00:45,360 --> 00:00:47,360
a while

24
00:00:47,360 --> 00:00:49,680
and i had a lot of weird jobs before i

25
00:00:49,680 --> 00:00:50,480
was in software

26
00:00:50,480 --> 00:00:52,320
i was a cheese maker etc feel free to

27
00:00:52,320 --> 00:00:54,879
ask me about those things on the

28
00:00:54,879 --> 00:00:57,360
q a at the end that's a picture of

29
00:00:57,360 --> 00:00:58,399
someone named xander

30
00:00:58,399 --> 00:01:00,160
mackey who's not me that isn't a weird

31
00:01:00,160 --> 00:01:01,920
job i had but there's a guy with the

32
00:01:01,920 --> 00:01:03,600
sturgeon funny picture for the morning

33
00:01:03,600 --> 00:01:06,799
okay quick disclaimer um this is a

34
00:01:06,799 --> 00:01:08,400
really high level introductory talk

35
00:01:08,400 --> 00:01:08,799
about

36
00:01:08,799 --> 00:01:10,880
uh cloud native cloud-native bill packs

37
00:01:10,880 --> 00:01:12,000
um

38
00:01:12,000 --> 00:01:13,760
you don't necessarily need docker

39
00:01:13,760 --> 00:01:15,600
experience to get something out of this

40
00:01:15,600 --> 00:01:16,960
talk although having used docker a

41
00:01:16,960 --> 00:01:18,560
little bit would be helpful i'm going to

42
00:01:18,560 --> 00:01:18,960
show

43
00:01:18,960 --> 00:01:22,000
some demos that do use docker but

44
00:01:22,000 --> 00:01:25,520
no no means required this should be an

45
00:01:25,520 --> 00:01:26,960
invitation for you to dig more

46
00:01:26,960 --> 00:01:29,439
into the subject i hope you feel like uh

47
00:01:29,439 --> 00:01:30,799
excited about it like maybe it's

48
00:01:30,799 --> 00:01:31,840
something you want to explore and i'm

49
00:01:31,840 --> 00:01:33,119
going to talk about some resources at

50
00:01:33,119 --> 00:01:33,600
the end

51
00:01:33,600 --> 00:01:38,159
to give you more okay quick agenda

52
00:01:38,159 --> 00:01:40,640
um i'm gonna just give us some

53
00:01:40,640 --> 00:01:42,880
vocabulary so we're on the same level

54
00:01:42,880 --> 00:01:45,280
um level set uh with respect to

55
00:01:45,280 --> 00:01:46,079
containers and

56
00:01:46,079 --> 00:01:49,200
particularly container images um i'm

57
00:01:49,200 --> 00:01:50,640
gonna spend the bulk of the talk

58
00:01:50,640 --> 00:01:52,320
no surprise talking about cloud-native

59
00:01:52,320 --> 00:01:54,159
build packs

60
00:01:54,159 --> 00:01:56,079
i'm going to give a quick little bit at

61
00:01:56,079 --> 00:01:57,680
the end about you know really why you'd

62
00:01:57,680 --> 00:01:58,399
want to use them

63
00:01:58,399 --> 00:02:01,280
to dive into the details of that and

64
00:02:01,280 --> 00:02:01,759
then

65
00:02:01,759 --> 00:02:04,640
share some resources

66
00:02:04,799 --> 00:02:07,759
okay so when people talk about

67
00:02:07,759 --> 00:02:09,840
containers and i'm sort of assuming

68
00:02:09,840 --> 00:02:12,959
uh the audience here has heard of them

69
00:02:12,959 --> 00:02:14,480
i'm gonna just bring us down to the

70
00:02:14,480 --> 00:02:16,160
roots um which

71
00:02:16,160 --> 00:02:18,239
for me containers always start with the

72
00:02:18,239 --> 00:02:19,520
container image

73
00:02:19,520 --> 00:02:23,040
um you know if a container is a process

74
00:02:23,040 --> 00:02:24,640
with a context

75
00:02:24,640 --> 00:02:25,840
the container image is all about

76
00:02:25,840 --> 00:02:27,680
producing that context

77
00:02:27,680 --> 00:02:29,840
um it's almost like a little bento box

78
00:02:29,840 --> 00:02:31,360
you know you go to the store you get

79
00:02:31,360 --> 00:02:32,480
everything you need

80
00:02:32,480 --> 00:02:35,360
for your lunch here we have a container

81
00:02:35,360 --> 00:02:36,400
that has

82
00:02:36,400 --> 00:02:39,840
your app code environment

83
00:02:39,840 --> 00:02:43,040
for your app like configuration whatever

84
00:02:43,040 --> 00:02:44,319
it might be

85
00:02:44,319 --> 00:02:47,440
um the container image might have

86
00:02:47,440 --> 00:02:48,560
operating system bits that your

87
00:02:48,560 --> 00:02:50,879
application requires image magic

88
00:02:50,879 --> 00:02:53,680
for you know parsing stuff and making

89
00:02:53,680 --> 00:02:55,280
security bugs

90
00:02:55,280 --> 00:02:56,879
um and of course it will have

91
00:02:56,879 --> 00:02:58,720
dependencies of your application

92
00:02:58,720 --> 00:03:00,720
that are part of your code like node

93
00:03:00,720 --> 00:03:02,800
modules every container image is full of

94
00:03:02,800 --> 00:03:04,319
node modules

95
00:03:04,319 --> 00:03:06,640
and once you have one of these images

96
00:03:06,640 --> 00:03:08,800
this is where the power of

97
00:03:08,800 --> 00:03:12,400
the container image comes you can

98
00:03:12,400 --> 00:03:15,040
duplicate it you can size it up you can

99
00:03:15,040 --> 00:03:16,560
shrink it down

100
00:03:16,560 --> 00:03:18,159
based on the resource needs of the

101
00:03:18,159 --> 00:03:20,000
application or or

102
00:03:20,000 --> 00:03:22,800
the requirements uh at the time now you

103
00:03:22,800 --> 00:03:23,840
can

104
00:03:23,840 --> 00:03:25,599
you know copy it a thousand different

105
00:03:25,599 --> 00:03:26,720
places in a lot of different

106
00:03:26,720 --> 00:03:27,840
environments you can port

107
00:03:27,840 --> 00:03:29,920
you can move it around it's a portable

108
00:03:29,920 --> 00:03:31,120
artifact

109
00:03:31,120 --> 00:03:33,599
um and you know you get the same

110
00:03:33,599 --> 00:03:34,319
experience

111
00:03:34,319 --> 00:03:35,840
running it on your local computer as you

112
00:03:35,840 --> 00:03:38,480
would in the cloud potentially

113
00:03:38,480 --> 00:03:41,280
a big copy out there but um you know

114
00:03:41,280 --> 00:03:42,480
that's kind of the

115
00:03:42,480 --> 00:03:45,440
the goal that we're getting at so when i

116
00:03:45,440 --> 00:03:47,440
say container image i might people

117
00:03:47,440 --> 00:03:49,599
might say docker image some people would

118
00:03:49,599 --> 00:03:50,720
say oci

119
00:03:50,720 --> 00:03:53,920
container image um but just

120
00:03:53,920 --> 00:03:56,000
this is all about how do we build

121
00:03:56,000 --> 00:03:58,480
container images

122
00:03:58,480 --> 00:04:00,959
okay so going back in history a little

123
00:04:00,959 --> 00:04:01,840
bit um

124
00:04:01,840 --> 00:04:02,959
we're not going to go as far back as

125
00:04:02,959 --> 00:04:05,439
this picture but uh

126
00:04:05,439 --> 00:04:08,159
build packs have a history that runs a

127
00:04:08,159 --> 00:04:09,120
little bit

128
00:04:09,120 --> 00:04:11,360
you know sort of parallel and then now

129
00:04:11,360 --> 00:04:12,959
it is intertwined with that of

130
00:04:12,959 --> 00:04:14,080
containers um

131
00:04:14,080 --> 00:04:18,238
starting in 2011 heroku which is a

132
00:04:18,238 --> 00:04:21,279
platform as a service provider

133
00:04:21,279 --> 00:04:23,840
they started using this term build packs

134
00:04:23,840 --> 00:04:25,600
it was potentially around before but for

135
00:04:25,600 --> 00:04:25,919
them

136
00:04:25,919 --> 00:04:28,320
it was a way of describing uh one of

137
00:04:28,320 --> 00:04:30,479
their secret sauces which is

138
00:04:30,479 --> 00:04:32,639
take source code turn it into something

139
00:04:32,639 --> 00:04:34,000
that can run on the platform

140
00:04:34,000 --> 00:04:37,040
super easily truth be told is when i was

141
00:04:37,040 --> 00:04:38,240
learning to develop i

142
00:04:38,240 --> 00:04:40,400
learned on heroku i did the you know

143
00:04:40,400 --> 00:04:41,680
michael hartle

144
00:04:41,680 --> 00:04:45,040
rails tutorial get push heroku master

145
00:04:45,040 --> 00:04:46,720
turn your rails app into something that

146
00:04:46,720 --> 00:04:48,880
runs that i didn't need to worry about

147
00:04:48,880 --> 00:04:51,120
as a new developer how i took that

148
00:04:51,120 --> 00:04:52,400
source code

149
00:04:52,400 --> 00:04:53,919
and it got turned into something that

150
00:04:53,919 --> 00:04:55,680
could run somewhere

151
00:04:55,680 --> 00:04:58,320
okay so keeping that sort of platform as

152
00:04:58,320 --> 00:04:59,199
a service

153
00:04:59,199 --> 00:05:02,880
abstraction in your mind

154
00:05:02,880 --> 00:05:05,919
2013 comes along docker blows on the

155
00:05:05,919 --> 00:05:06,400
scene

156
00:05:06,400 --> 00:05:09,280
democratizes the use of containers for

157
00:05:09,280 --> 00:05:10,080
developers

158
00:05:10,080 --> 00:05:12,960
um i think you know the big innovation

159
00:05:12,960 --> 00:05:14,639
that docker had

160
00:05:14,639 --> 00:05:16,639
in addition to just making turning on a

161
00:05:16,639 --> 00:05:18,240
container in your

162
00:05:18,240 --> 00:05:21,120
you know your local machine really easy

163
00:05:21,120 --> 00:05:22,800
was the dockerfile it was a

164
00:05:22,800 --> 00:05:26,160
way of porting portably moving around

165
00:05:26,160 --> 00:05:27,840
the artifact

166
00:05:27,840 --> 00:05:30,720
that your container was built out of it

167
00:05:30,720 --> 00:05:32,320
was a way of describing the entire

168
00:05:32,320 --> 00:05:33,199
environment

169
00:05:33,199 --> 00:05:36,000
docker file let you build something on

170
00:05:36,000 --> 00:05:37,680
your local computer send someone in the

171
00:05:37,680 --> 00:05:39,600
docker image

172
00:05:39,600 --> 00:05:41,440
and then they could turn that same thing

173
00:05:41,440 --> 00:05:43,199
on in their

174
00:05:43,199 --> 00:05:46,400
uh environment you also had cloud

175
00:05:46,400 --> 00:05:48,960
foundry in 2013. that's another paz

176
00:05:48,960 --> 00:05:51,360
platform as a service provider which has

177
00:05:51,360 --> 00:05:53,919
a history that continues along today

178
00:05:53,919 --> 00:05:56,560
cloud foundry took the ideas that heroku

179
00:05:56,560 --> 00:05:58,000
had

180
00:05:58,000 --> 00:05:59,759
come up with around build packs and

181
00:05:59,759 --> 00:06:01,120
iterated on their own thing they have a

182
00:06:01,120 --> 00:06:02,960
lot of different enterprise spin to it

183
00:06:02,960 --> 00:06:03,600
and they work

184
00:06:03,600 --> 00:06:06,160
offline things like that but they sort

185
00:06:06,160 --> 00:06:06,720
of

186
00:06:06,720 --> 00:06:08,319
came up with a parallel track of build

187
00:06:08,319 --> 00:06:10,800
packing um and then in 2015

188
00:06:10,800 --> 00:06:12,800
you had kubernetes kubernetes becomes

189
00:06:12,800 --> 00:06:14,080
now you know

190
00:06:14,080 --> 00:06:17,199
in 2020 the in some ways the de facto

191
00:06:17,199 --> 00:06:19,280
standard for where containers run

192
00:06:19,280 --> 00:06:21,120
when you're running in production it's a

193
00:06:21,120 --> 00:06:22,800
universal container

194
00:06:22,800 --> 00:06:27,520
platform and so it makes sense to target

195
00:06:27,520 --> 00:06:29,280
that platform it makes sense to target

196
00:06:29,280 --> 00:06:31,120
the container image

197
00:06:31,120 --> 00:06:33,039
if you're trying to do something like

198
00:06:33,039 --> 00:06:35,120
build a platform as a service like

199
00:06:35,120 --> 00:06:37,199
experience

200
00:06:37,199 --> 00:06:40,960
2018 the cloud native buildbacks project

201
00:06:40,960 --> 00:06:41,600
was born

202
00:06:41,600 --> 00:06:45,440
this is a cncf chartered project

203
00:06:45,440 --> 00:06:48,880
folks at spring folks at heroku

204
00:06:48,880 --> 00:06:51,440
um folks at cloud foundry came together

205
00:06:51,440 --> 00:06:52,960
and decided that they wanted

206
00:06:52,960 --> 00:06:55,360
to marry the best of the paz experience

207
00:06:55,360 --> 00:06:56,720
the best of the

208
00:06:56,720 --> 00:06:58,400
you know really simple take my source

209
00:06:58,400 --> 00:06:59,840
code turn it into something that can run

210
00:06:59,840 --> 00:07:00,960
and i don't really care

211
00:07:00,960 --> 00:07:03,680
about the details to you know with the

212
00:07:03,680 --> 00:07:05,440
best of container technologies so now

213
00:07:05,440 --> 00:07:07,039
cloud native build packs

214
00:07:07,039 --> 00:07:10,080
were born it's 20 20.

215
00:07:10,080 --> 00:07:11,280
we've been working on the project a

216
00:07:11,280 --> 00:07:12,880
little while we're incubating in the

217
00:07:12,880 --> 00:07:13,680
cncf

218
00:07:13,680 --> 00:07:16,479
we're working on that and we're working

219
00:07:16,479 --> 00:07:17,680
on 1-0

220
00:07:17,680 --> 00:07:20,000
hopefully what we'll also get in 2020 is

221
00:07:20,000 --> 00:07:21,759
uh is you

222
00:07:21,759 --> 00:07:24,160
more people in the project that's really

223
00:07:24,160 --> 00:07:24,800
the big goal

224
00:07:24,800 --> 00:07:28,720
of this year okay

225
00:07:28,720 --> 00:07:31,039
so that's the history um the big picture

226
00:07:31,039 --> 00:07:31,840
of what i'm going to

227
00:07:31,840 --> 00:07:35,440
show you uh with how cloud native build

228
00:07:35,440 --> 00:07:36,400
packs work

229
00:07:36,400 --> 00:07:40,560
is depicted here your source code

230
00:07:40,560 --> 00:07:43,759
up on the left um

231
00:07:43,759 --> 00:07:47,520
is combined with build packs by a

232
00:07:47,520 --> 00:07:48,800
platform

233
00:07:48,800 --> 00:07:51,759
um and then it runs and it turns into an

234
00:07:51,759 --> 00:07:54,080
application container image

235
00:07:54,080 --> 00:07:55,520
this won't necessarily make sense right

236
00:07:55,520 --> 00:07:56,720
now but i'm going to show you some

237
00:07:56,720 --> 00:07:58,319
demonstrations and hopefully

238
00:07:58,319 --> 00:08:00,720
we'll dig into the details a little more

239
00:08:00,720 --> 00:08:02,240
okay

240
00:08:02,240 --> 00:08:04,800
quick demo

241
00:08:09,199 --> 00:08:13,840
okay i am going to

242
00:08:16,879 --> 00:08:19,919
do show this okay so this is a

243
00:08:19,919 --> 00:08:22,160
demo of pack building a really simple

244
00:08:22,160 --> 00:08:23,360
ruby app

245
00:08:23,360 --> 00:08:26,319
the app has a gem file and it has a

246
00:08:26,319 --> 00:08:28,080
simple route

247
00:08:28,080 --> 00:08:31,280
it's a sinatra route

248
00:08:32,240 --> 00:08:35,919
it just when you curl it at the

249
00:08:35,919 --> 00:08:40,240
root it'll return hello world

250
00:08:41,039 --> 00:08:42,958
building this app into a container image

251
00:08:42,958 --> 00:08:44,560
is simple as executing

252
00:08:44,560 --> 00:08:49,279
pack build and then giving it a name

253
00:08:49,360 --> 00:08:51,440
pac is a cli that we maintain as part of

254
00:08:51,440 --> 00:08:52,880
the project i'm just going to expand

255
00:08:52,880 --> 00:08:54,880
that

256
00:08:54,880 --> 00:08:57,760
so you see that

257
00:08:57,920 --> 00:09:02,480
we downloaded ruby

258
00:09:02,480 --> 00:09:06,000
and we got some ruby gems going

259
00:09:06,000 --> 00:09:08,399
and then in the end we exported an image

260
00:09:08,399 --> 00:09:09,839
sample app so we're going to run that

261
00:09:09,839 --> 00:09:12,160
image

262
00:09:12,320 --> 00:09:14,080
okay so i said you didn't really need

263
00:09:14,080 --> 00:09:16,160
docker this is a pretty

264
00:09:16,160 --> 00:09:18,080
basic simple docker invocation that lets

265
00:09:18,080 --> 00:09:19,760
you turn the container on

266
00:09:19,760 --> 00:09:23,839
in your local computer to see

267
00:09:24,240 --> 00:09:25,120
here we're going to run in the

268
00:09:25,120 --> 00:09:27,519
background

269
00:09:27,519 --> 00:09:29,920
curl it

270
00:09:31,360 --> 00:09:34,800
okay we see hello world cool

271
00:09:35,040 --> 00:09:38,240
so as as usual you know the requirements

272
00:09:38,240 --> 00:09:39,680
change someone says i don't want to say

273
00:09:39,680 --> 00:09:41,600
hello world i want to say something else

274
00:09:41,600 --> 00:09:45,040
um i don't know let's let's

275
00:09:45,040 --> 00:09:48,720
let's let's modify it okay so you need

276
00:09:48,720 --> 00:09:50,399
to rebuild your app

277
00:09:50,399 --> 00:09:53,360
very easy now it says hello everyone

278
00:09:53,360 --> 00:09:55,200
okay cool

279
00:09:55,200 --> 00:09:57,600
um well we want to rebuild our container

280
00:09:57,600 --> 00:09:58,800
how simple is that

281
00:09:58,800 --> 00:10:00,720
really going to be the same thing pack

282
00:10:00,720 --> 00:10:04,640
build my app

283
00:10:04,640 --> 00:10:05,519
and there will be a couple of

284
00:10:05,519 --> 00:10:07,360
interesting things to note about this

285
00:10:07,360 --> 00:10:09,760
second run

286
00:10:09,760 --> 00:10:13,279
which i'll talk you through okay so

287
00:10:13,279 --> 00:10:16,240
that was a lot faster

288
00:10:16,640 --> 00:10:18,640
why well we didn't have to download the

289
00:10:18,640 --> 00:10:20,480
down download the gems we were

290
00:10:20,480 --> 00:10:22,399
able to reuse them we were able to reuse

291
00:10:22,399 --> 00:10:24,240
uh the ruby layer

292
00:10:24,240 --> 00:10:26,640
um really all that we had to rebuild was

293
00:10:26,640 --> 00:10:28,079
the app layer which is really all that

294
00:10:28,079 --> 00:10:33,200
changed which is nice um

295
00:10:33,200 --> 00:10:36,079
pac has sort of smart caching it isn't

296
00:10:36,079 --> 00:10:38,079
just about the file identity

297
00:10:38,079 --> 00:10:40,640
um there's sort of business business

298
00:10:40,640 --> 00:10:42,079
logic if you will the build packs

299
00:10:42,079 --> 00:10:42,880
themselves

300
00:10:42,880 --> 00:10:46,399
know about when or when they should be

301
00:10:46,399 --> 00:10:50,000
changing their cache um so we

302
00:10:50,000 --> 00:10:53,120
booted it up a second time we curled it

303
00:10:53,120 --> 00:10:55,360
and we see that we get the new app

304
00:10:55,360 --> 00:11:00,320
pretty simple

305
00:11:00,320 --> 00:11:03,519
okay going back to the presentation so

306
00:11:03,519 --> 00:11:07,040
what did we see oops

307
00:11:12,880 --> 00:11:16,880
okay so what did we see did a pack build

308
00:11:16,880 --> 00:11:20,079
we gave it a name we ran it

309
00:11:20,079 --> 00:11:23,360
it's a modification we rebuilt it

310
00:11:23,360 --> 00:11:25,360
and we ran re-ran it there's a pretty

311
00:11:25,360 --> 00:11:26,480
simple loop

312
00:11:26,480 --> 00:11:28,000
but one you'd probably go through a lot

313
00:11:28,000 --> 00:11:29,200
as a developer you know make

314
00:11:29,200 --> 00:11:30,959
modifications rebuild the thing and the

315
00:11:30,959 --> 00:11:32,320
niceties you get with

316
00:11:32,320 --> 00:11:36,000
smart caching um show that you know the

317
00:11:36,000 --> 00:11:36,880
second time

318
00:11:36,880 --> 00:11:39,360
you do something well it's gonna be a

319
00:11:39,360 --> 00:11:40,720
lot faster you're not gonna you're gonna

320
00:11:40,720 --> 00:11:42,480
have a faster loop um

321
00:11:42,480 --> 00:11:44,800
so at a high level we took our source

322
00:11:44,800 --> 00:11:46,000
code

323
00:11:46,000 --> 00:11:47,519
this is the cloud-native build packs

324
00:11:47,519 --> 00:11:49,360
colors uh

325
00:11:49,360 --> 00:11:51,279
we turned it into a container image in a

326
00:11:51,279 --> 00:11:53,680
pretty seamless way

327
00:11:53,680 --> 00:11:56,000
you'll notice i didn't have to write any

328
00:11:56,000 --> 00:11:57,440
sort of file in that

329
00:11:57,440 --> 00:12:01,040
in that folder there's no docker file um

330
00:12:01,040 --> 00:12:02,320
there's nothing that describes the

331
00:12:02,320 --> 00:12:05,519
dependencies of the application anywhere

332
00:12:05,519 --> 00:12:07,519
the build packs themselves detect all

333
00:12:07,519 --> 00:12:08,880
that

334
00:12:08,880 --> 00:12:11,440
so we got out of that an application

335
00:12:11,440 --> 00:12:12,240
image that's

336
00:12:12,240 --> 00:12:14,160
fully runnable reproducible deployable

337
00:12:14,160 --> 00:12:16,000
without me as a developer having to

338
00:12:16,000 --> 00:12:17,760
write a docker file

339
00:12:17,760 --> 00:12:22,839
um bill pax did that magic for me

340
00:12:22,839 --> 00:12:25,440
so let's talk a little bit about what

341
00:12:25,440 --> 00:12:26,079
happens

342
00:12:26,079 --> 00:12:28,560
when a build pack executes a build pack

343
00:12:28,560 --> 00:12:30,480
has two parts

344
00:12:30,480 --> 00:12:33,360
um one of the nice things we provide is

345
00:12:33,360 --> 00:12:34,800
something called detect

346
00:12:34,800 --> 00:12:37,920
which makes it so that you don't

347
00:12:37,920 --> 00:12:39,519
necessarily have to know what build

348
00:12:39,519 --> 00:12:41,279
packs you want to use

349
00:12:41,279 --> 00:12:43,120
build packs have logic that says yeah i

350
00:12:43,120 --> 00:12:45,200
apply to this thing

351
00:12:45,200 --> 00:12:47,200
and then they might be then used later

352
00:12:47,200 --> 00:12:49,440
for your build there's a there's two

353
00:12:49,440 --> 00:12:52,160
phases of build execution there's the

354
00:12:52,160 --> 00:12:52,720
detect

355
00:12:52,720 --> 00:12:55,360
and then there's the build in detection

356
00:12:55,360 --> 00:12:56,959
all build packs are potentially

357
00:12:56,959 --> 00:13:00,480
uh in in contention uh and they have

358
00:13:00,480 --> 00:13:02,399
logic to say oh yeah

359
00:13:02,399 --> 00:13:04,399
i i know about package.json i know how

360
00:13:04,399 --> 00:13:06,959
to do mpm stuff i should i should do my

361
00:13:06,959 --> 00:13:08,560
work i know how to do java stuff i

362
00:13:08,560 --> 00:13:10,000
should do my work

363
00:13:10,000 --> 00:13:13,440
um at that point the platform which in

364
00:13:13,440 --> 00:13:14,720
this case is pac

365
00:13:14,720 --> 00:13:16,160
but there's a few other build pack

366
00:13:16,160 --> 00:13:18,839
platforms we'll select the build packs

367
00:13:18,839 --> 00:13:20,000
that

368
00:13:20,000 --> 00:13:22,000
are going to be used for this particular

369
00:13:22,000 --> 00:13:23,120
build

370
00:13:23,120 --> 00:13:24,639
and they'll do their work they'll be

371
00:13:24,639 --> 00:13:26,240
they'll be executed one after the other

372
00:13:26,240 --> 00:13:27,200
um

373
00:13:27,200 --> 00:13:29,120
they'll download building runtime

374
00:13:29,120 --> 00:13:30,800
dependencies you know

375
00:13:30,800 --> 00:13:34,000
ruby rubygems they'll

376
00:13:34,000 --> 00:13:36,240
compile node modules if they have native

377
00:13:36,240 --> 00:13:37,279
code

378
00:13:37,279 --> 00:13:40,079
um they'll you know build your source

379
00:13:40,079 --> 00:13:42,000
code if it's a go app

380
00:13:42,000 --> 00:13:43,680
that sort of stuff and the final thing

381
00:13:43,680 --> 00:13:44,880
they'll do is they'll set the launch

382
00:13:44,880 --> 00:13:46,480
command the thing that when you docker

383
00:13:46,480 --> 00:13:47,440
run the container

384
00:13:47,440 --> 00:13:49,600
or the containers the container image is

385
00:13:49,600 --> 00:13:51,040
annotated with

386
00:13:51,040 --> 00:13:53,279
the process name and the arguments that

387
00:13:53,279 --> 00:13:55,839
turn it on

388
00:13:55,920 --> 00:13:59,760
okay so all that's sort of magical but

389
00:13:59,760 --> 00:14:01,839
peeling back the hood a little bit one

390
00:14:01,839 --> 00:14:03,519
of the things that makes this work is a

391
00:14:03,519 --> 00:14:04,720
concept that we

392
00:14:04,720 --> 00:14:07,360
have called a stack a stack is a

393
00:14:07,360 --> 00:14:08,079
collection

394
00:14:08,079 --> 00:14:10,800
of two things it's a build time

395
00:14:10,800 --> 00:14:12,000
environment and it's a runtime

396
00:14:12,000 --> 00:14:14,000
environment

397
00:14:14,000 --> 00:14:16,320
and those are really just images they're

398
00:14:16,320 --> 00:14:17,199
containers

399
00:14:17,199 --> 00:14:19,360
that are spun up when we do build and

400
00:14:19,360 --> 00:14:20,880
run um

401
00:14:20,880 --> 00:14:23,040
that are used as a context for your

402
00:14:23,040 --> 00:14:24,639
application

403
00:14:24,639 --> 00:14:27,839
so when we did a pack build um

404
00:14:27,839 --> 00:14:29,519
we were running it on something called a

405
00:14:29,519 --> 00:14:31,519
builder image

406
00:14:31,519 --> 00:14:33,199
builder image is a collection of build

407
00:14:33,199 --> 00:14:35,760
packs with something called a life cycle

408
00:14:35,760 --> 00:14:38,320
which is a sort of the orc piece that is

409
00:14:38,320 --> 00:14:40,480
at the heart of all of this

410
00:14:40,480 --> 00:14:43,920
and the build image of this of a stack

411
00:14:43,920 --> 00:14:44,639
build packs

412
00:14:44,639 --> 00:14:47,120
are compatible with a particular stack

413
00:14:47,120 --> 00:14:48,959
they then have a build contacts with

414
00:14:48,959 --> 00:14:51,920
via the build image and they might have

415
00:14:51,920 --> 00:14:52,639
things

416
00:14:52,639 --> 00:14:54,560
like gcc accessible during build that

417
00:14:54,560 --> 00:14:55,920
they wouldn't necessarily need during

418
00:14:55,920 --> 00:14:57,040
run we have a

419
00:14:57,040 --> 00:15:00,079
there's a stack called a slim

420
00:15:00,079 --> 00:15:02,079
i think it's called slim tiny it's

421
00:15:02,079 --> 00:15:04,000
called tiny that has

422
00:15:04,000 --> 00:15:07,279
you know some gcc and the go compiler

423
00:15:07,279 --> 00:15:09,199
uh in the build image and it has nothing

424
00:15:09,199 --> 00:15:10,800
in the run image so you get really light

425
00:15:10,800 --> 00:15:14,160
lightweight binaries you can see this

426
00:15:14,160 --> 00:15:15,680
builders that are available

427
00:15:15,680 --> 00:15:17,680
pack as a command pack suggest builders

428
00:15:17,680 --> 00:15:19,440
at this point there's a few public

429
00:15:19,440 --> 00:15:21,199
builders available that are published by

430
00:15:21,199 --> 00:15:22,079
vmware

431
00:15:22,079 --> 00:15:25,360
and heroku and that is a community list

432
00:15:25,360 --> 00:15:28,560
so you know as people start to make

433
00:15:28,560 --> 00:15:30,240
builders that are

434
00:15:30,240 --> 00:15:33,199
sort of broadly trusted we're going to

435
00:15:33,199 --> 00:15:35,680
put those in the list

436
00:15:35,680 --> 00:15:40,240
okay so that was sort of mo um

437
00:15:40,240 --> 00:15:42,079
we're gonna talk through this big

438
00:15:42,079 --> 00:15:44,720
picture app big picture diagram again

439
00:15:44,720 --> 00:15:47,920
um pac in this case

440
00:15:47,920 --> 00:15:49,759
is the is a platform it's a build pack

441
00:15:49,759 --> 00:15:51,040
platform it's a cli

442
00:15:51,040 --> 00:15:53,440
in this case but uh it happens to be a

443
00:15:53,440 --> 00:15:54,560
platform too

444
00:15:54,560 --> 00:15:57,040
for running build packs there's another

445
00:15:57,040 --> 00:15:58,000
there's a few others

446
00:15:58,000 --> 00:15:59,920
there's something called kpac which is a

447
00:15:59,920 --> 00:16:01,279
built back platform that runs into

448
00:16:01,279 --> 00:16:02,959
kubernetes cluster that

449
00:16:02,959 --> 00:16:05,360
you know given a pointer to source code

450
00:16:05,360 --> 00:16:07,199
and a set of build packs will basically

451
00:16:07,199 --> 00:16:10,959
always keep a docker docker image

452
00:16:10,959 --> 00:16:14,000
up to date in a registry um it just

453
00:16:14,000 --> 00:16:15,120
monitors change

454
00:16:15,120 --> 00:16:16,800
changes for all the inputs and then when

455
00:16:16,800 --> 00:16:19,120
anything changes it builds a new image

456
00:16:19,120 --> 00:16:21,839
if the stack changes if the build image

457
00:16:21,839 --> 00:16:23,920
changes or the run image changes

458
00:16:23,920 --> 00:16:26,480
kpac will build a new version of that

459
00:16:26,480 --> 00:16:28,079
container image

460
00:16:28,079 --> 00:16:31,360
and make it available um so hopefully

461
00:16:31,360 --> 00:16:32,000
the

462
00:16:32,000 --> 00:16:33,680
high level makes a little more sense at

463
00:16:33,680 --> 00:16:35,360
this point

464
00:16:35,360 --> 00:16:38,959
okay i'm going to do another demo

465
00:16:38,959 --> 00:16:42,000
which is going to be live and

466
00:16:42,000 --> 00:16:44,800
wish me luck on that one okay i'm going

467
00:16:44,800 --> 00:16:45,120
to

468
00:16:45,120 --> 00:16:50,959
swap over to my terminal okay

469
00:16:50,959 --> 00:16:54,880
um so

470
00:16:54,880 --> 00:16:58,000
i showed a ruby app

471
00:16:58,000 --> 00:17:00,480
we have um in the build packs project we

472
00:17:00,480 --> 00:17:01,040
publish

473
00:17:01,040 --> 00:17:04,000
a repo called samples that has a bunch

474
00:17:04,000 --> 00:17:06,400
of examples of all these pieces

475
00:17:06,400 --> 00:17:08,240
there's a bunch there's like simple apps

476
00:17:08,240 --> 00:17:10,160
in there

477
00:17:10,160 --> 00:17:13,520
we use it a lot for our work

478
00:17:13,520 --> 00:17:15,280
there are examples of build packs in

479
00:17:15,280 --> 00:17:16,559
here

480
00:17:16,559 --> 00:17:20,720
the ruby app that i showed is from here

481
00:17:20,720 --> 00:17:24,799
um one of the other nice things

482
00:17:24,799 --> 00:17:30,080
you have in here are examples of stacks

483
00:17:30,080 --> 00:17:32,160
builder images something called packages

484
00:17:32,160 --> 00:17:33,280
which is a build pack

485
00:17:33,280 --> 00:17:36,400
that's published as a container image so

486
00:17:36,400 --> 00:17:37,760
you can store them in registries which

487
00:17:37,760 --> 00:17:39,039
is kind of cool

488
00:17:39,039 --> 00:17:43,120
um okay so back the cli

489
00:17:43,120 --> 00:17:44,480
get it through all the usual sources

490
00:17:44,480 --> 00:17:47,440
homebrew etc it has um

491
00:17:47,440 --> 00:17:49,520
you know it has a lot of commands i

492
00:17:49,520 --> 00:17:51,200
really only talked about pack build

493
00:17:51,200 --> 00:17:55,280
um a lot of the rest of this is um

494
00:17:55,280 --> 00:17:58,400
for people that are sort of maintaining

495
00:17:58,400 --> 00:18:01,440
environments like operators um we the

496
00:18:01,440 --> 00:18:03,280
people that maintain build packs use a

497
00:18:03,280 --> 00:18:05,280
lot of these to publish builders

498
00:18:05,280 --> 00:18:07,520
um

499
00:18:12,960 --> 00:18:14,640
um here's an here's a list of the

500
00:18:14,640 --> 00:18:16,160
builders that we have

501
00:18:16,160 --> 00:18:18,400
at the moment um and they have

502
00:18:18,400 --> 00:18:19,840
information about them that says you

503
00:18:19,840 --> 00:18:20,400
know

504
00:18:20,400 --> 00:18:22,160
what languages are available there's

505
00:18:22,160 --> 00:18:23,760
java node python

506
00:18:23,760 --> 00:18:26,640
go like there's a pretty broad uh suite

507
00:18:26,640 --> 00:18:28,400
of languages that you could build right

508
00:18:28,400 --> 00:18:30,559
now

509
00:18:32,799 --> 00:18:34,880
i'm going to for the purposes of the

510
00:18:34,880 --> 00:18:35,840
rest of this demo

511
00:18:35,840 --> 00:18:37,760
set the default builder to one of the

512
00:18:37,760 --> 00:18:42,640
sample builders

513
00:18:42,640 --> 00:18:45,840
um if i didn't

514
00:18:45,840 --> 00:18:47,840
necessarily set the default i could run

515
00:18:47,840 --> 00:18:50,639
a command like this

516
00:18:51,440 --> 00:18:53,840
pack build as we showed before this is

517
00:18:53,840 --> 00:18:55,360
the name of the container image i can

518
00:18:55,360 --> 00:18:58,640
tag it so i can change my tag if i want

519
00:18:58,640 --> 00:19:01,679
i can tell it what builder to use like

520
00:19:01,679 --> 00:19:02,640
what build

521
00:19:02,640 --> 00:19:04,240
what build context do i want to use i

522
00:19:04,240 --> 00:19:06,559
might know particular

523
00:19:06,559 --> 00:19:08,160
build packs are available on one versus

524
00:19:08,160 --> 00:19:10,320
the other and i want to use that

525
00:19:10,320 --> 00:19:12,000
and in this case i even really know what

526
00:19:12,000 --> 00:19:13,200
built back i want to use so i'm just

527
00:19:13,200 --> 00:19:24,480
going to try that one

528
00:19:24,480 --> 00:19:26,320
the first thing i did i had the no pull

529
00:19:26,320 --> 00:19:28,400
flag you could do this in an

530
00:19:28,400 --> 00:19:30,320
offline environment an environment where

531
00:19:30,320 --> 00:19:31,520
you don't necessarily want things to

532
00:19:31,520 --> 00:19:33,200
change things to change

533
00:19:33,200 --> 00:19:34,559
huh i don't know what's going on with

534
00:19:34,559 --> 00:19:36,799
that

535
00:19:37,600 --> 00:19:39,039
i don't know if my internet's being

536
00:19:39,039 --> 00:19:41,840
wonky or what

537
00:19:41,919 --> 00:19:44,240
um

538
00:19:44,960 --> 00:19:48,320
well hopefully the rest of these work

539
00:19:48,320 --> 00:19:54,639
okay um demos are always at risk right

540
00:20:01,840 --> 00:20:05,039
this invocation i'm

541
00:20:05,039 --> 00:20:08,559
including this publish flag

542
00:20:09,120 --> 00:20:13,039
and what publish does is it rather than

543
00:20:13,039 --> 00:20:15,280
putting the image in your local docker

544
00:20:15,280 --> 00:20:16,559
demon

545
00:20:16,559 --> 00:20:18,000
rather than storing it locally it's

546
00:20:18,000 --> 00:20:21,840
actually going to store it

547
00:20:21,840 --> 00:20:23,679
oh i already had a copy of that it's

548
00:20:23,679 --> 00:20:25,200
actually going to store it

549
00:20:25,200 --> 00:20:28,480
remotely which is pretty neat it'll

550
00:20:28,480 --> 00:20:30,720
target any container registry and put

551
00:20:30,720 --> 00:20:31,840
the image there

552
00:20:31,840 --> 00:20:34,720
and it will also be smart about reusing

553
00:20:34,720 --> 00:20:35,280
layers

554
00:20:35,280 --> 00:20:38,880
in a remote fashion so if i rebuild this

555
00:20:38,880 --> 00:20:39,679
thing

556
00:20:39,679 --> 00:20:41,760
um you know the first time it told me

557
00:20:41,760 --> 00:20:43,200
here's all the parts that went into

558
00:20:43,200 --> 00:20:44,799
building the container image

559
00:20:44,799 --> 00:20:48,080
if i rebuild this thing

560
00:20:49,840 --> 00:20:52,480
second time

561
00:20:58,799 --> 00:21:00,400
you'll notice that it's reusing a lot of

562
00:21:00,400 --> 00:21:01,760
things if you were to look inspect the

563
00:21:01,760 --> 00:21:02,640
network traffic

564
00:21:02,640 --> 00:21:04,640
you'd see that it isn't shipping new

565
00:21:04,640 --> 00:21:07,840
layers across the network to my registry

566
00:21:07,840 --> 00:21:10,880
it doesn't have to do that

567
00:21:10,880 --> 00:21:12,880
one of the other features that i'm

568
00:21:12,880 --> 00:21:14,320
showing sort of

569
00:21:14,320 --> 00:21:16,400
secretly is something called project

570
00:21:16,400 --> 00:21:18,080
tomml

571
00:21:18,080 --> 00:21:20,559
uh project tunnel is a way of basically

572
00:21:20,559 --> 00:21:22,400
defining a project um

573
00:21:22,400 --> 00:21:24,480
it's a pretty new feature in the in the

574
00:21:24,480 --> 00:21:26,000
built pack ecosystem

575
00:21:26,000 --> 00:21:30,720
but it lets you say um i know

576
00:21:30,720 --> 00:21:32,400
the build packs that apply to this

577
00:21:32,400 --> 00:21:34,400
particular application i know

578
00:21:34,400 --> 00:21:35,840
certain files i want to include certain

579
00:21:35,840 --> 00:21:37,760
files i want to exclude give annotations

580
00:21:37,760 --> 00:21:38,880
about it

581
00:21:38,880 --> 00:21:40,559
it makes it a little more ergonomic to

582
00:21:40,559 --> 00:21:44,240
sort of work with applications

583
00:21:44,240 --> 00:21:49,039
okay so that was a quick high level

584
00:21:49,280 --> 00:21:53,440
demo of some other stuff so

585
00:21:53,440 --> 00:21:54,720
hopefully at this point you've seen that

586
00:21:54,720 --> 00:21:56,720
you know building simple apps is pretty

587
00:21:56,720 --> 00:22:00,080
pretty easy with pack question is

588
00:22:00,080 --> 00:22:01,600
everyone's heard about docker files

589
00:22:01,600 --> 00:22:02,240
though

590
00:22:02,240 --> 00:22:04,720
why would you want to use this and one

591
00:22:04,720 --> 00:22:06,000
of the ways we'd like to think about it

592
00:22:06,000 --> 00:22:06,640
is not

593
00:22:06,640 --> 00:22:09,360
pac is not a competitor necessarily to

594
00:22:09,360 --> 00:22:11,039
docker files it's kind of a parallel

595
00:22:11,039 --> 00:22:12,559
experience it might optimize different

596
00:22:12,559 --> 00:22:13,200
things

597
00:22:13,200 --> 00:22:15,120
we're trying to optimize the experience

598
00:22:15,120 --> 00:22:16,480
for quick develop

599
00:22:16,480 --> 00:22:19,200
development and we also at the same time

600
00:22:19,200 --> 00:22:21,039
optimize the developer the operator

601
00:22:21,039 --> 00:22:22,080
experience you can

602
00:22:22,080 --> 00:22:24,480
very easily control what can go into a

603
00:22:24,480 --> 00:22:26,320
build pack if you're operating

604
00:22:26,320 --> 00:22:29,200
an environment i didn't really talk

605
00:22:29,200 --> 00:22:30,559
about that but that is a whole story

606
00:22:30,559 --> 00:22:32,000
that we have

607
00:22:32,000 --> 00:22:35,200
um from a developer running

608
00:22:35,200 --> 00:22:37,120
learning to write a good docker file is

609
00:22:37,120 --> 00:22:39,280
actually really hard

610
00:22:39,280 --> 00:22:42,080
docker publishes best practices um so

611
00:22:42,080 --> 00:22:43,280
when you're supposed to read a docker

612
00:22:43,280 --> 00:22:44,559
file you're supposed to uh you know

613
00:22:44,559 --> 00:22:46,159
create femoral containers okay i don't

614
00:22:46,159 --> 00:22:47,679
really know exactly what that means but

615
00:22:47,679 --> 00:22:49,919
i have to understand build context

616
00:22:49,919 --> 00:22:51,280
okay so i'm trying to follow all these

617
00:22:51,280 --> 00:22:54,080
things uh multi-stage builds okay

618
00:22:54,080 --> 00:22:56,559
i don't really know what that is um you

619
00:22:56,559 --> 00:22:58,320
know i just want to write my application

620
00:22:58,320 --> 00:23:01,120
okay i don't want to install unnecessary

621
00:23:01,120 --> 00:23:01,919
packages but

622
00:23:01,919 --> 00:23:03,840
how do i know if they're unnecessary how

623
00:23:03,840 --> 00:23:05,360
am i supposed to decouple it what about

624
00:23:05,360 --> 00:23:05,919
layers

625
00:23:05,919 --> 00:23:09,760
what is even that um you know

626
00:23:09,760 --> 00:23:11,600
eventually it gets a little ridiculous

627
00:23:11,600 --> 00:23:13,120
to try to do this well

628
00:23:13,120 --> 00:23:16,159
if all you want to do is just take your

629
00:23:16,159 --> 00:23:17,679
app and put it in the cloud it's not

630
00:23:17,679 --> 00:23:18,640
really a concern

631
00:23:18,640 --> 00:23:21,600
that you as a developer would have um

632
00:23:21,600 --> 00:23:23,600
you know this point docker is a pretty

633
00:23:23,600 --> 00:23:25,120
comfortable tool for some people but not

634
00:23:25,120 --> 00:23:26,880
everyone wants to become an expert in

635
00:23:26,880 --> 00:23:28,559
docker and not everyone needs to become

636
00:23:28,559 --> 00:23:29,600
an expert in docker

637
00:23:29,600 --> 00:23:32,960
and that's kind of why we built this

638
00:23:32,960 --> 00:23:36,559
another thing about docker is

639
00:23:36,559 --> 00:23:39,280
you know snick is a security vendor they

640
00:23:39,280 --> 00:23:40,240
make this claim

641
00:23:40,240 --> 00:23:43,360
that uh a lot of

642
00:23:43,360 --> 00:23:46,000
docker images that are out there online

643
00:23:46,000 --> 00:23:46,960
uh that are

644
00:23:46,960 --> 00:23:49,039
even running in production have you know

645
00:23:49,039 --> 00:23:50,000
vulnerabilities at the

646
00:23:50,000 --> 00:23:52,320
operating system package level uh it

647
00:23:52,320 --> 00:23:54,159
really could be as easy as rebuilding it

648
00:23:54,159 --> 00:23:55,760
if people knew about it

649
00:23:55,760 --> 00:23:58,960
um and a lot of it could be change

650
00:23:58,960 --> 00:24:00,799
could be fixed by swapping the base

651
00:24:00,799 --> 00:24:02,799
image um

652
00:24:02,799 --> 00:24:04,480
one thing that cloud-native build packs

653
00:24:04,480 --> 00:24:06,720
can do given the stack

654
00:24:06,720 --> 00:24:10,000
contract that i described is really

655
00:24:10,000 --> 00:24:12,320
easily swap out the base image so if a

656
00:24:12,320 --> 00:24:13,679
new version of

657
00:24:13,679 --> 00:24:15,600
you know the stack comes out which

658
00:24:15,600 --> 00:24:17,440
there's an entire team dedicated to

659
00:24:17,440 --> 00:24:18,000
publishing

660
00:24:18,000 --> 00:24:20,400
a stream of those things um it's very

661
00:24:20,400 --> 00:24:21,600
easy for you to take a

662
00:24:21,600 --> 00:24:24,000
an app image that you've built swap out

663
00:24:24,000 --> 00:24:25,760
the run image that underlies your

664
00:24:25,760 --> 00:24:27,200
application source code and just get a

665
00:24:27,200 --> 00:24:28,080
new version of it

666
00:24:28,080 --> 00:24:30,080
like that it doesn't really take a

667
00:24:30,080 --> 00:24:31,760
rebuild it's a simple

668
00:24:31,760 --> 00:24:35,120
simple operation so

669
00:24:35,120 --> 00:24:38,320
stepping back a bit as a developer

670
00:24:38,320 --> 00:24:40,640
you know why would i look at cloud

671
00:24:40,640 --> 00:24:42,159
native build packs

672
00:24:42,159 --> 00:24:43,600
i think for me it really comes down to

673
00:24:43,600 --> 00:24:44,880
the first bullet point and everything

674
00:24:44,880 --> 00:24:47,120
else sort of falls out of that

675
00:24:47,120 --> 00:24:49,760
the focus is on providing value for your

676
00:24:49,760 --> 00:24:51,520
end users as a developer you know

677
00:24:51,520 --> 00:24:53,520
it's not like the way that you build

678
00:24:53,520 --> 00:24:54,880
application containers is not really

679
00:24:54,880 --> 00:24:56,000
they don't care

680
00:24:56,000 --> 00:24:58,799
you know and you might not even want to

681
00:24:58,799 --> 00:24:59,600
care

682
00:24:59,600 --> 00:25:00,799
and cloud native build packs are

683
00:25:00,799 --> 00:25:02,559
something that gives you the ability to

684
00:25:02,559 --> 00:25:04,080
do this quickly and easily

685
00:25:04,080 --> 00:25:06,080
have other people care about the details

686
00:25:06,080 --> 00:25:07,600
of building container images and have

687
00:25:07,600 --> 00:25:09,440
that baked into the tools

688
00:25:09,440 --> 00:25:11,679
and have it be very simple for you to

689
00:25:11,679 --> 00:25:13,919
get up and running

690
00:25:13,919 --> 00:25:15,279
and there is a lot of complexity that

691
00:25:15,279 --> 00:25:16,960
you can unveil if you go

692
00:25:16,960 --> 00:25:19,919
if you dig deeper there is a lot of

693
00:25:19,919 --> 00:25:21,039
power

694
00:25:21,039 --> 00:25:23,520
but initially you know the experience of

695
00:25:23,520 --> 00:25:24,640
taking

696
00:25:24,640 --> 00:25:26,720
that ruby source turning it into a

697
00:25:26,720 --> 00:25:28,159
container image should be

698
00:25:28,159 --> 00:25:30,640
really simple um bill packs are also

699
00:25:30,640 --> 00:25:32,000
composable that's the nice thing about

700
00:25:32,000 --> 00:25:33,039
them docker files

701
00:25:33,039 --> 00:25:34,559
you can compose them it's it's a little

702
00:25:34,559 --> 00:25:36,400
hard um you know you can

703
00:25:36,400 --> 00:25:38,480
write from you know do multi-stage

704
00:25:38,480 --> 00:25:40,320
builds right from python use python to

705
00:25:40,320 --> 00:25:41,039
compile

706
00:25:41,039 --> 00:25:42,240
some other thing that you might need as

707
00:25:42,240 --> 00:25:45,120
a prerequisite for java blah blah blah

708
00:25:45,120 --> 00:25:47,520
but it becomes a little bit cumbersome

709
00:25:47,520 --> 00:25:48,640
build packs are

710
00:25:48,640 --> 00:25:50,880
built to be composable there you can

711
00:25:50,880 --> 00:25:51,679
chain them after

712
00:25:51,679 --> 00:25:53,919
one another and they can give

713
00:25:53,919 --> 00:25:55,760
dependencies to each other it's very

714
00:25:55,760 --> 00:25:56,480
easy

715
00:25:56,480 --> 00:25:58,240
and it's pretty easy to control what run

716
00:25:58,240 --> 00:25:59,520
what ends up in the runtime

717
00:25:59,520 --> 00:26:03,279
of the run image if you're a software

718
00:26:03,279 --> 00:26:04,159
vendor

719
00:26:04,159 --> 00:26:06,559
build packs are a nice way to distribute

720
00:26:06,559 --> 00:26:08,799
uh something like a runtime agent it's

721
00:26:08,799 --> 00:26:10,000
very easy to just

722
00:26:10,000 --> 00:26:12,400
stick to runtime in a layer on it on the

723
00:26:12,400 --> 00:26:15,279
app image and call it a day

724
00:26:15,279 --> 00:26:18,480
furthermore you can build

725
00:26:18,480 --> 00:26:21,360
you know most any app with the same set

726
00:26:21,360 --> 00:26:22,320
of build packs you don't need to

727
00:26:22,320 --> 00:26:24,320
customize them every time because

728
00:26:24,320 --> 00:26:26,559
vmware and heroku publish these suite of

729
00:26:26,559 --> 00:26:27,679
build packs

730
00:26:27,679 --> 00:26:30,960
that are broadly useful you don't have

731
00:26:30,960 --> 00:26:32,640
to write a docker file every time you

732
00:26:32,640 --> 00:26:33,919
want to build a new app

733
00:26:33,919 --> 00:26:35,760
you can basically say like yeah we trust

734
00:26:35,760 --> 00:26:37,679
these build packs they work

735
00:26:37,679 --> 00:26:39,919
and you don't have to think about that

736
00:26:39,919 --> 00:26:42,559
that concern anymore

737
00:26:42,559 --> 00:26:45,039
there's smart caching the layer

738
00:26:45,039 --> 00:26:45,760
rebuilding

739
00:26:45,760 --> 00:26:48,559
is quick build packs themselves have

740
00:26:48,559 --> 00:26:50,240
logic about when they should be cached

741
00:26:50,240 --> 00:26:50,640
and

742
00:26:50,640 --> 00:26:53,840
not um you know they know things like

743
00:26:53,840 --> 00:26:56,320
yeah the the file the touch times are

744
00:26:56,320 --> 00:26:58,159
important or yeah the

745
00:26:58,159 --> 00:27:00,720
hash of the you know package file is

746
00:27:00,720 --> 00:27:01,279
important

747
00:27:01,279 --> 00:27:03,760
um it isn't just about the identity of

748
00:27:03,760 --> 00:27:05,360
the binary or the

749
00:27:05,360 --> 00:27:09,200
the image the thing going into the layer

750
00:27:09,200 --> 00:27:11,039
and then rebasing is something that i

751
00:27:11,039 --> 00:27:12,640
didn't really demonstrate but i alluded

752
00:27:12,640 --> 00:27:14,559
to it's a nice thing that you can get

753
00:27:14,559 --> 00:27:16,080
nice property you get when you use build

754
00:27:16,080 --> 00:27:17,679
packs it makes it very easy

755
00:27:17,679 --> 00:27:19,840
to just take your app source code put it

756
00:27:19,840 --> 00:27:23,199
on a new version of the base image

757
00:27:23,679 --> 00:27:26,880
so resources to get more

758
00:27:26,880 --> 00:27:30,000
in more out we have build pack site io

759
00:27:30,000 --> 00:27:30,640
that has

760
00:27:30,640 --> 00:27:32,960
nice documentation and tutorials we have

761
00:27:32,960 --> 00:27:34,320
a slack it's

762
00:27:34,320 --> 00:27:35,679
very welcoming and growing a lot of

763
00:27:35,679 --> 00:27:37,760
contributors are there a lot of

764
00:27:37,760 --> 00:27:41,279
users are there um on github

765
00:27:41,279 --> 00:27:42,799
the samples repo that i did a lot of

766
00:27:42,799 --> 00:27:44,799
these demos from is a great place to get

767
00:27:44,799 --> 00:27:46,159
started to play around

768
00:27:46,159 --> 00:27:49,200
a pack cli is available on github um we

769
00:27:49,200 --> 00:27:50,640
also have a specification that's kind of

770
00:27:50,640 --> 00:27:52,159
an interesting aspect of the project

771
00:27:52,159 --> 00:27:55,039
it's specked out um and we have working

772
00:27:55,039 --> 00:27:56,000
groups

773
00:27:56,000 --> 00:27:58,480
um wednesdays and thursdays where we

774
00:27:58,480 --> 00:27:59,520
talk about

775
00:27:59,520 --> 00:28:01,360
we have an rfc process and we talk about

776
00:28:01,360 --> 00:28:03,440
changes to the specification and rfcs in

777
00:28:03,440 --> 00:28:04,559
that working group uh

778
00:28:04,559 --> 00:28:06,720
at the moment it's it's publicly it's

779
00:28:06,720 --> 00:28:08,559
technically public we're not very

780
00:28:08,559 --> 00:28:10,320
uh we haven't figured out a great way of

781
00:28:10,320 --> 00:28:12,480
sharing it out without you know having

782
00:28:12,480 --> 00:28:14,960
trolls jump in um but if you go to slack

783
00:28:14,960 --> 00:28:16,399
and ask you know anyone

784
00:28:16,399 --> 00:28:18,480
will be willing to invite you um we also

785
00:28:18,480 --> 00:28:19,679
have twitter so

786
00:28:19,679 --> 00:28:23,039
uh yeah that's it

787
00:28:23,039 --> 00:28:25,279
superb stuff sanders thank you very much

788
00:28:25,279 --> 00:28:26,799
great conversation going on on the slack

789
00:28:26,799 --> 00:28:27,840
as well so i encourage you if you've got

790
00:28:27,840 --> 00:28:28,960
some time afterwards to pop on and

791
00:28:28,960 --> 00:28:30,480
announced a few questions

792
00:28:30,480 --> 00:28:31,760
we have got um time for a couple

793
00:28:31,760 --> 00:28:34,240
questions here so omar asks uh rails and

794
00:28:34,240 --> 00:28:36,399
other platforms often do a hot reload in

795
00:28:36,399 --> 00:28:37,679
the dev environment

796
00:28:37,679 --> 00:28:40,240
how does this fit in with build packs

797
00:28:40,240 --> 00:28:41,440
yeah

798
00:28:41,440 --> 00:28:43,360
i don't know i actually haven't played

799
00:28:43,360 --> 00:28:46,000
with the the ruby build packs too much

800
00:28:46,000 --> 00:28:49,520
um i would definitely encourage you to

801
00:28:49,520 --> 00:28:51,679
to jump into the slack and ask about

802
00:28:51,679 --> 00:28:52,720
that uh

803
00:28:52,720 --> 00:28:54,880
pack slack someone was asking about it

804
00:28:54,880 --> 00:28:56,799
the other day and i think

805
00:28:56,799 --> 00:28:59,919
you know you can't necessarily get

806
00:28:59,919 --> 00:29:03,120
the the dev hot reload um because

807
00:29:03,120 --> 00:29:04,880
because when we build we're spinning up

808
00:29:04,880 --> 00:29:06,399
a build container

809
00:29:06,399 --> 00:29:08,960
we're we're working on uh part of the

810
00:29:08,960 --> 00:29:10,320
spec that actually would be

811
00:29:10,320 --> 00:29:12,720
like a develop workflow where it would

812
00:29:12,720 --> 00:29:13,919
basically

813
00:29:13,919 --> 00:29:17,440
be like build packs would define uh

814
00:29:17,440 --> 00:29:19,919
how to spin up a development container

815
00:29:19,919 --> 00:29:21,200
that then

816
00:29:21,200 --> 00:29:23,039
could be sort of an interim step um

817
00:29:23,039 --> 00:29:24,320
that's been discussed it's

818
00:29:24,320 --> 00:29:26,320
it was in the spec and we pulled it out

819
00:29:26,320 --> 00:29:27,600
because we hadn't implemented it but

820
00:29:27,600 --> 00:29:29,120
it's definitely been a line of

821
00:29:29,120 --> 00:29:30,640
discussion for a long time and if

822
00:29:30,640 --> 00:29:32,240
you go on that slack and poke people

823
00:29:32,240 --> 00:29:33,840
maybe you'll get your get your feature

824
00:29:33,840 --> 00:29:34,640
in

825
00:29:34,640 --> 00:29:36,399
yeah now loving the inner dev loop stuff

826
00:29:36,399 --> 00:29:37,679
and i think that hot reload is a very

827
00:29:37,679 --> 00:29:38,960
interesting feature so great to hear

828
00:29:38,960 --> 00:29:39,360
that you've

829
00:29:39,360 --> 00:29:40,320
considered that and looking at that

830
00:29:40,320 --> 00:29:42,000
inspect so yeah i encourage oma to jump

831
00:29:42,000 --> 00:29:42,399
in

832
00:29:42,399 --> 00:29:44,559
the slack and have a look at that so

833
00:29:44,559 --> 00:29:45,600
phil asks

834
00:29:45,600 --> 00:29:47,840
if i understood correctly multiple build

835
00:29:47,840 --> 00:29:50,159
packs can apply to a single project

836
00:29:50,159 --> 00:29:52,080
does the order in which they run mata

837
00:29:52,080 --> 00:29:54,559
and how is that determined

838
00:29:54,559 --> 00:29:57,279
the order does matter uh yeah it does

839
00:29:57,279 --> 00:29:58,960
matter because the final build pack is

840
00:29:58,960 --> 00:30:01,039
the one that sets the start command

841
00:30:01,039 --> 00:30:03,279
so if you know java app is the last one

842
00:30:03,279 --> 00:30:04,880
it'll be sort of assume that it's a java

843
00:30:04,880 --> 00:30:06,480
app you can modify that like

844
00:30:06,480 --> 00:30:08,480
the feature just went in where you can

845
00:30:08,480 --> 00:30:10,399
change you can like literally change

846
00:30:10,399 --> 00:30:11,279
that

847
00:30:11,279 --> 00:30:13,440
the process that runs when you start the

848
00:30:13,440 --> 00:30:14,880
container but yes

849
00:30:14,880 --> 00:30:16,480
the order doesn't matter in that sense

850
00:30:16,480 --> 00:30:18,320
and other than that

851
00:30:18,320 --> 00:30:21,200
the build packs that run before the

852
00:30:21,200 --> 00:30:22,720
final build pack are sort of known as

853
00:30:22,720 --> 00:30:24,240
like supply build packs

854
00:30:24,240 --> 00:30:27,919
they can provide dependencies upstream

855
00:30:27,919 --> 00:30:32,000
so they can say like i provide a python

856
00:30:32,000 --> 00:30:35,600
binary if a java agent

857
00:30:35,600 --> 00:30:39,520
needs python it can use it during build

858
00:30:39,520 --> 00:30:41,600
um it's available they might do things

859
00:30:41,600 --> 00:30:43,440
like modify the environment

860
00:30:43,440 --> 00:30:46,399
um but then that's it you know they

861
00:30:46,399 --> 00:30:48,080
might just add things to the path

862
00:30:48,080 --> 00:30:50,480
but that's it um so the order does

863
00:30:50,480 --> 00:30:52,000
matter and

864
00:30:52,000 --> 00:30:53,840
we sort of have a lot of smarts around

865
00:30:53,840 --> 00:30:55,679
automatic detection but if you have a

866
00:30:55,679 --> 00:30:57,440
more complicated case it's pretty easy

867
00:30:57,440 --> 00:30:59,600
for you to just say just build pack one

868
00:30:59,600 --> 00:31:00,799
dashes build pack two

869
00:31:00,799 --> 00:31:02,480
whatever or use a project tommel that's

870
00:31:02,480 --> 00:31:04,480
really the the simplest way to get a

871
00:31:04,480 --> 00:31:07,120
specific ordering of build packs

872
00:31:07,120 --> 00:31:08,880
super stuff santa perfect on timing

873
00:31:08,880 --> 00:31:09,840
there so thank you once again for

874
00:31:09,840 --> 00:31:11,279
joining us today and we'll definitely

875
00:31:11,279 --> 00:31:12,640
thank you in the slack too i encourage

876
00:31:12,640 --> 00:31:13,840
everyone to pop along to slack

877
00:31:13,840 --> 00:31:15,120
chat to xander there and ask any

878
00:31:15,120 --> 00:31:16,960
questions we haven't covered here

879
00:31:16,960 --> 00:31:19,840
we're going to take an hour but

