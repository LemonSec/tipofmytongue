1
00:00:00,320 --> 00:00:02,560
ray tang and robert halter if one of you

2
00:00:02,560 --> 00:00:04,000
wants to share their screen

3
00:00:04,000 --> 00:00:07,600
and i can blend it in into the stream

4
00:00:07,600 --> 00:00:11,840
okay uh yes i see the screen and the

5
00:00:11,840 --> 00:00:12,639
screen is

6
00:00:12,639 --> 00:00:16,079
up it is all yours good luck all right

7
00:00:16,079 --> 00:00:18,240
well thanks everyone for attending and

8
00:00:18,240 --> 00:00:19,439
joining this and uh

9
00:00:19,439 --> 00:00:22,320
you know it's tough times and uh i'm

10
00:00:22,320 --> 00:00:23,920
very happy to be here i'm ray i'm a

11
00:00:23,920 --> 00:00:26,080
developer advocate at google cloud

12
00:00:26,080 --> 00:00:29,760
um and i am doing a lot of work around

13
00:00:29,760 --> 00:00:30,880
dependency management

14
00:00:30,880 --> 00:00:33,200
uh here for our con libraries and so we

15
00:00:33,200 --> 00:00:35,360
created the site called glbp.dev

16
00:00:35,360 --> 00:00:36,480
and we're going to talk through some of

17
00:00:36,480 --> 00:00:38,960
the things that i learned and i learned

18
00:00:38,960 --> 00:00:40,079
everything from

19
00:00:40,079 --> 00:00:43,120
robert schulte thank you

20
00:00:43,120 --> 00:00:45,039
so my name is rose holton most people

21
00:00:45,039 --> 00:00:47,680
know me from apache maven i've done a

22
00:00:47,680 --> 00:00:48,320
couple of

23
00:00:48,320 --> 00:00:50,800
conferences uh and do a lot of talks

24
00:00:50,800 --> 00:00:51,440
about it

25
00:00:51,440 --> 00:00:54,960
uh just to explain uh how strong

26
00:00:54,960 --> 00:00:57,360
maven probably is but also sometimes how

27
00:00:57,360 --> 00:00:59,039
hard it is and especially this

28
00:00:59,039 --> 00:01:01,199
topic about dependency management it is

29
00:01:01,199 --> 00:01:02,559
tricky sometimes

30
00:01:02,559 --> 00:01:06,400
and uh well we only have 30 minutes so

31
00:01:06,400 --> 00:01:09,680
let's go yeah and for the record robert

32
00:01:09,680 --> 00:01:11,680
is in netherland i'm in the usa and

33
00:01:11,680 --> 00:01:12,479
we're doing this

34
00:01:12,479 --> 00:01:14,479
session jointly so this is pretty

35
00:01:14,479 --> 00:01:16,400
amazing

36
00:01:16,400 --> 00:01:18,000
so let's see the code so i have some

37
00:01:18,000 --> 00:01:19,439
simple code here to demonstrate some of

38
00:01:19,439 --> 00:01:20,479
the things and by the way

39
00:01:20,479 --> 00:01:21,759
these are all the issues that i

40
00:01:21,759 --> 00:01:24,240
personally ran into when i was using

41
00:01:24,240 --> 00:01:25,920
some of our client libraries are talks

42
00:01:25,920 --> 00:01:27,600
to google cloud platform and la

43
00:01:27,600 --> 00:01:29,920
has changed a lot has been fixed and uh

44
00:01:29,920 --> 00:01:31,439
i had to go back in time

45
00:01:31,439 --> 00:01:33,280
to figure out okay what happened which

46
00:01:33,280 --> 00:01:35,680
which with what old versions and uh

47
00:01:35,680 --> 00:01:37,840
to reproduce some of these issues okay

48
00:01:37,840 --> 00:01:39,040
so first of all

49
00:01:39,040 --> 00:01:40,640
uh this you know this is not the current

50
00:01:40,640 --> 00:01:42,320
state it's definitely much better

51
00:01:42,320 --> 00:01:44,079
uh but then uh but these are the issues

52
00:01:44,079 --> 00:01:45,920
that people run into constantly

53
00:01:45,920 --> 00:01:48,560
and with or without you know some of our

54
00:01:48,560 --> 00:01:49,439
libraries right

55
00:01:49,439 --> 00:01:51,759
so this is a very simple test uh i just

56
00:01:51,759 --> 00:01:52,960
created a test

57
00:01:52,960 --> 00:01:55,119
that simply uses a client library in

58
00:01:55,119 --> 00:01:57,360
this case which is a dependency

59
00:01:57,360 --> 00:01:58,880
and i'm using two different dependencies

60
00:01:58,880 --> 00:02:00,399
here i'm using the client library and

61
00:02:00,399 --> 00:02:01,280
also truth

62
00:02:01,280 --> 00:02:03,360
to do some validation right so in my

63
00:02:03,360 --> 00:02:04,880
maven palm.xml

64
00:02:04,880 --> 00:02:06,640
i have just two different dependencies

65
00:02:06,640 --> 00:02:08,560
here i have truth for validation

66
00:02:08,560 --> 00:02:10,878
and you'll have the api client library

67
00:02:10,878 --> 00:02:12,480
uh and robert will probably code this

68
00:02:12,480 --> 00:02:13,920
out which is that well if you're doing a

69
00:02:13,920 --> 00:02:15,120
test first of all

70
00:02:15,120 --> 00:02:17,280
put your dependency in the right scope

71
00:02:17,280 --> 00:02:18,560
so that it doesn't leak through the

72
00:02:18,560 --> 00:02:20,080
compile scope right so

73
00:02:20,080 --> 00:02:22,720
let's say the scope to test and uh we

74
00:02:22,720 --> 00:02:23,280
should

75
00:02:23,280 --> 00:02:24,800
the only two dependencies what could

76
00:02:24,800 --> 00:02:26,560
possibly go wrong right

77
00:02:26,560 --> 00:02:30,080
right well let's let's give it a try so

78
00:02:30,080 --> 00:02:32,640
i'm going to go ahead and run test

79
00:02:32,640 --> 00:02:35,519
from ide uh there we go so it's running

80
00:02:35,519 --> 00:02:37,040
the test right everything should be

81
00:02:37,040 --> 00:02:39,599
working but of course it doesn't work

82
00:02:39,599 --> 00:02:42,560
uh and this is the type of arrow that we

83
00:02:42,560 --> 00:02:43,200
always see

84
00:02:43,200 --> 00:02:45,280
when we uh at the wrong time when we

85
00:02:45,280 --> 00:02:46,800
have some kind of conflict with our

86
00:02:46,800 --> 00:02:47,760
dependencies

87
00:02:47,760 --> 00:02:50,640
and uh let me go back here um i'm not

88
00:02:50,640 --> 00:02:52,160
sure like how many people on the stream

89
00:02:52,160 --> 00:02:54,080
actually see these arrows no such method

90
00:02:54,080 --> 00:02:54,480
found

91
00:02:54,480 --> 00:02:56,480
or no such method arrow no such field

92
00:02:56,480 --> 00:02:59,040
arrow or a no class def found arrow

93
00:02:59,040 --> 00:03:01,360
what happened robert why do these things

94
00:03:01,360 --> 00:03:04,159
happen and how do i fix this

95
00:03:04,159 --> 00:03:07,120
so uh probably what happened is that you

96
00:03:07,120 --> 00:03:08,080
are picking up

97
00:03:08,080 --> 00:03:11,040
a different class than expected so there

98
00:03:11,040 --> 00:03:12,640
used to be some methods

99
00:03:12,640 --> 00:03:15,760
i'm not sure the czech argument

100
00:03:15,760 --> 00:03:17,760
and it doesn't exist anymore and what's

101
00:03:17,760 --> 00:03:18,959
kind of amazing it starts with

102
00:03:18,959 --> 00:03:20,959
com.google right

103
00:03:20,959 --> 00:03:24,080
yeah right yeah come down google the

104
00:03:24,080 --> 00:03:26,239
comment that's usually guava so at least

105
00:03:26,239 --> 00:03:27,360
we have some

106
00:03:27,360 --> 00:03:29,360
detective work here that we know that

107
00:03:29,360 --> 00:03:31,519
it's probably in guava somewhere

108
00:03:31,519 --> 00:03:33,440
so so there's probably a dependency

109
00:03:33,440 --> 00:03:36,000
conflict with this particular artifact

110
00:03:36,000 --> 00:03:39,280
how do we find out more well most

111
00:03:39,280 --> 00:03:42,080
most of the time what you do is let's

112
00:03:42,080 --> 00:03:44,080
see a dependency tree

113
00:03:44,080 --> 00:03:45,599
okay so i'm going to use maven

114
00:03:45,599 --> 00:03:47,360
dependency tree to show

115
00:03:47,360 --> 00:03:50,080
me like what is the result dependency

116
00:03:50,080 --> 00:03:52,000
that maven is actually going to be using

117
00:03:52,000 --> 00:03:52,319
right

118
00:03:52,319 --> 00:03:54,239
so i'm going to say even dependency tree

119
00:03:54,239 --> 00:03:55,599
and

120
00:03:55,599 --> 00:03:57,280
i don't know man like everything here

121
00:03:57,280 --> 00:03:59,439
looks i mean obviously there's a lot

122
00:03:59,439 --> 00:04:02,080
but there's nothing here that tells me

123
00:04:02,080 --> 00:04:02,560
hey

124
00:04:02,560 --> 00:04:04,480
by the way something could possibly have

125
00:04:04,480 --> 00:04:06,879
gone wrong now so this is the resolved

126
00:04:06,879 --> 00:04:10,159
dependency tree and you see also all the

127
00:04:10,159 --> 00:04:11,360
transitive dependencies

128
00:04:11,360 --> 00:04:13,680
even though you specified only two you

129
00:04:13,680 --> 00:04:14,400
will get

130
00:04:14,400 --> 00:04:16,880
also all the dependencies of those

131
00:04:16,880 --> 00:04:17,759
dependencies

132
00:04:17,759 --> 00:04:20,880
so right

133
00:04:20,880 --> 00:04:23,520
so what we can do is uh we can add for

134
00:04:23,520 --> 00:04:24,160
both

135
00:04:24,160 --> 00:04:26,960
to give you more information about

136
00:04:26,960 --> 00:04:28,639
dependencies

137
00:04:28,639 --> 00:04:31,600
so let me do the verbose uh this way we

138
00:04:31,600 --> 00:04:32,160
can see

139
00:04:32,160 --> 00:04:35,280
a lot more information let's see here

140
00:04:35,280 --> 00:04:38,800
uh-huh so for example i'm going to find

141
00:04:38,800 --> 00:04:40,400
any one of these things with this

142
00:04:40,400 --> 00:04:42,800
interesting line right so for example

143
00:04:42,800 --> 00:04:43,680
above java

144
00:04:43,680 --> 00:04:47,600
right uh it says 3.9 but it was omitted

145
00:04:47,600 --> 00:04:49,759
because it was conflicting with another

146
00:04:49,759 --> 00:04:51,680
dependency that's in the tree

147
00:04:51,680 --> 00:04:54,720
yes so so

148
00:04:54,720 --> 00:04:56,880
i guess we can figure out okay do we

149
00:04:56,880 --> 00:04:57,840
actually have some

150
00:04:57,840 --> 00:04:59,840
issue with guava in this case so this

151
00:04:59,840 --> 00:05:01,199
one i'm going to do i'm going to say

152
00:05:01,199 --> 00:05:03,280
maven dependency 3d verbose and

153
00:05:03,280 --> 00:05:05,039
let's do a grip right i usually just

154
00:05:05,039 --> 00:05:07,600
grade for the output here

155
00:05:07,600 --> 00:05:10,400
almost everybody uses graph almost

156
00:05:10,400 --> 00:05:12,240
everybody uses grip but uh but the

157
00:05:12,240 --> 00:05:14,080
result the result of this is really

158
00:05:14,080 --> 00:05:16,080
weird because now it feels like guava is

159
00:05:16,080 --> 00:05:17,600
dependent on guava which is depending on

160
00:05:17,600 --> 00:05:18,240
guava

161
00:05:18,240 --> 00:05:19,600
that does not make any sense what

162
00:05:19,600 --> 00:05:21,280
happened here right so

163
00:05:21,280 --> 00:05:24,479
you're missing context and

164
00:05:24,479 --> 00:05:26,479
what you see is that everybody first

165
00:05:26,479 --> 00:05:28,160
prints this to a file and then

166
00:05:28,160 --> 00:05:31,280
do a grab over there but there's a

167
00:05:31,280 --> 00:05:31,919
better

168
00:05:31,919 --> 00:05:34,400
solution and that's by adding the

169
00:05:34,400 --> 00:05:36,840
parameter

170
00:05:36,840 --> 00:05:39,840
includes

171
00:05:40,240 --> 00:05:43,039
the path to that specific library you're

172
00:05:43,039 --> 00:05:44,720
looking for

173
00:05:44,720 --> 00:05:47,360
so i can give it up the group id and

174
00:05:47,360 --> 00:05:49,280
also potentially the artifact id right

175
00:05:49,280 --> 00:05:50,000
yes

176
00:05:50,000 --> 00:05:52,560
you can do that so let's take a look at

177
00:05:52,560 --> 00:05:54,160
it this way and this is a really really

178
00:05:54,160 --> 00:05:56,000
good way for you to figure out if you

179
00:05:56,000 --> 00:05:57,840
actually have an issue with one of these

180
00:05:57,840 --> 00:05:58,720
artifacts

181
00:05:58,720 --> 00:06:01,520
and wow look at that um all of these

182
00:06:01,520 --> 00:06:02,400
guava

183
00:06:02,400 --> 00:06:04,479
versions are being imported by another

184
00:06:04,479 --> 00:06:06,400
translator dependency somewhere else

185
00:06:06,400 --> 00:06:09,440
and they are all over the place um

186
00:06:09,440 --> 00:06:12,080
now i guess one of the most commonly

187
00:06:12,080 --> 00:06:13,039
asked questions is

188
00:06:13,039 --> 00:06:15,039
why don't we just use both why can we

189
00:06:15,039 --> 00:06:16,479
have both of them

190
00:06:16,479 --> 00:06:20,319
right so how does the class path work um

191
00:06:20,319 --> 00:06:21,840
i guess in the class path if you have

192
00:06:21,840 --> 00:06:23,440
multiple classes uh

193
00:06:23,440 --> 00:06:25,600
it will pick the you can only pick one

194
00:06:25,600 --> 00:06:27,280
right exactly

195
00:06:27,280 --> 00:06:30,479
so it will first one it finds and

196
00:06:30,479 --> 00:06:33,520
maven has a similar strategy and

197
00:06:33,520 --> 00:06:35,919
it works like looking for the nearest

198
00:06:35,919 --> 00:06:37,360
dependency

199
00:06:37,360 --> 00:06:40,160
so the deeper you go into the in the

200
00:06:40,160 --> 00:06:40,560
tree

201
00:06:40,560 --> 00:06:43,600
of dependencies uh the the

202
00:06:43,600 --> 00:06:45,280
less likely it is that's the one being

203
00:06:45,280 --> 00:06:46,960
picked up

204
00:06:46,960 --> 00:06:49,039
so if you specify your dependency

205
00:06:49,039 --> 00:06:50,560
directly in your bomb file that's the

206
00:06:50,560 --> 00:06:51,919
one being used even though

207
00:06:51,919 --> 00:06:53,520
a transitive might have a different

208
00:06:53,520 --> 00:06:55,039
version

209
00:06:55,039 --> 00:06:58,080
uh-huh so for example if i uh in this

210
00:06:58,080 --> 00:06:59,120
case i guess

211
00:06:59,120 --> 00:07:00,720
a older version might have been picked

212
00:07:00,720 --> 00:07:02,400
up because it was closer

213
00:07:02,400 --> 00:07:06,000
to my uh my dependency uh tree

214
00:07:06,000 --> 00:07:08,160
and so the newer version got omitted in

215
00:07:08,160 --> 00:07:09,360
this case um

216
00:07:09,360 --> 00:07:11,919
and so we were potentially referring to

217
00:07:11,919 --> 00:07:13,280
a method that's only in the newer

218
00:07:13,280 --> 00:07:15,280
version but not in the older version

219
00:07:15,280 --> 00:07:19,199
exactly but um so one of the issue with

220
00:07:19,199 --> 00:07:21,199
this dependency problem is that it's

221
00:07:21,199 --> 00:07:23,199
really really hard to find especially

222
00:07:23,199 --> 00:07:25,360
you only discover it when you're running

223
00:07:25,360 --> 00:07:26,319
the app right

224
00:07:26,319 --> 00:07:27,840
you usually get it when you're running

225
00:07:27,840 --> 00:07:29,520
the app and go through that line of code

226
00:07:29,520 --> 00:07:30,400
because the linking

227
00:07:30,400 --> 00:07:33,360
is dynamic and it will be what are some

228
00:07:33,360 --> 00:07:34,560
of the techniques that we should be able

229
00:07:34,560 --> 00:07:36,240
to catch some of these problems early

230
00:07:36,240 --> 00:07:39,039
especially for this particular issue

231
00:07:39,039 --> 00:07:42,080
well in this case you're you probably

232
00:07:42,080 --> 00:07:44,080
want to use the enforce plugin

233
00:07:44,080 --> 00:07:45,919
most of the time if there's something

234
00:07:45,919 --> 00:07:47,520
you want to enforce

235
00:07:47,520 --> 00:07:49,280
during build just have a look at the

236
00:07:49,280 --> 00:07:51,919
enforcer plugin and it has a huge set

237
00:07:51,919 --> 00:07:54,319
of enforcer rules and you can also write

238
00:07:54,319 --> 00:07:55,840
them yourself actually

239
00:07:55,840 --> 00:07:57,520
but this one is interesting because the

240
00:07:57,520 --> 00:07:58,960
dependency convergence

241
00:07:58,960 --> 00:08:01,120
is one that verifies that all the

242
00:08:01,120 --> 00:08:02,720
versions of the dependencies are

243
00:08:02,720 --> 00:08:05,919
exactly the same which is kind of tricky

244
00:08:05,919 --> 00:08:08,879
but sometimes it's possible and the

245
00:08:08,879 --> 00:08:10,960
other one we have written is the upper

246
00:08:10,960 --> 00:08:13,120
bound and that ensures that you're using

247
00:08:13,120 --> 00:08:13,759
the

248
00:08:13,759 --> 00:08:16,879
latest of the specified dependencies but

249
00:08:16,879 --> 00:08:17,680
that ensures

250
00:08:17,680 --> 00:08:19,599
that it requires that all those

251
00:08:19,599 --> 00:08:21,440
dependencies are backwards compatible of

252
00:08:21,440 --> 00:08:22,800
course

253
00:08:22,800 --> 00:08:25,360
right so let's uh let's give it a try uh

254
00:08:25,360 --> 00:08:26,800
very quickly so here we have the

255
00:08:26,800 --> 00:08:27,759
dependency

256
00:08:27,759 --> 00:08:30,479
convergence plugin and if i were to add

257
00:08:30,479 --> 00:08:32,559
it to this particular pom file

258
00:08:32,559 --> 00:08:34,640
uh during the build in the build block

259
00:08:34,640 --> 00:08:35,760
viewed

260
00:08:35,760 --> 00:08:39,039
in plugins and like that right and now

261
00:08:39,039 --> 00:08:40,880
if i go back and do um even

262
00:08:40,880 --> 00:08:42,559
i'm gonna do maybe clean still is that

263
00:08:42,559 --> 00:08:43,839
right may even clean still that's why

264
00:08:43,839 --> 00:08:45,440
everybody does come on come on

265
00:08:45,440 --> 00:08:48,560
why why clean why install what we should

266
00:08:48,560 --> 00:08:49,200
do

267
00:08:49,200 --> 00:08:51,040
i want to make everything work right no

268
00:08:51,040 --> 00:08:54,000
no verified it's more than enough

269
00:08:54,000 --> 00:08:56,000
it's never been verified okay so don't

270
00:08:56,000 --> 00:08:57,360
do never end queens though

271
00:08:57,360 --> 00:08:59,279
uh you know what's after the discussion

272
00:08:59,279 --> 00:09:01,120
if you ask why and also you can ask

273
00:09:01,120 --> 00:09:02,240
andre some era

274
00:09:02,240 --> 00:09:04,240
uh we do not want you to use maven

275
00:09:04,240 --> 00:09:06,240
cleaning still uh in most cases maybe

276
00:09:06,240 --> 00:09:07,600
verify works right

277
00:09:07,600 --> 00:09:10,800
yeah okay so let's verify and this will

278
00:09:10,800 --> 00:09:12,800
run through the enforcer plug-in as well

279
00:09:12,800 --> 00:09:14,880
and it tells me right off the bat

280
00:09:14,880 --> 00:09:17,120
that i have all of these libraries that

281
00:09:17,120 --> 00:09:18,640
is having

282
00:09:18,640 --> 00:09:21,360
multiple versions in in the build and so

283
00:09:21,360 --> 00:09:22,000
we need to go

284
00:09:22,000 --> 00:09:24,399
ahead and resolve it uh or we can do the

285
00:09:24,399 --> 00:09:25,440
upper bound here

286
00:09:25,440 --> 00:09:27,200
uh with the upper bound rule in which

287
00:09:27,200 --> 00:09:28,720
case it only tells me the libraries

288
00:09:28,720 --> 00:09:30,160
that's using the older version as

289
00:09:30,160 --> 00:09:32,000
opposed to the newest version

290
00:09:32,000 --> 00:09:34,000
but let's say we have these issues how

291
00:09:34,000 --> 00:09:37,519
do we potentially resolve these

292
00:09:37,519 --> 00:09:40,560
right so there are in general there are

293
00:09:40,560 --> 00:09:41,040
two

294
00:09:41,040 --> 00:09:43,760
one is dependency management where you

295
00:09:43,760 --> 00:09:45,360
say okay

296
00:09:45,360 --> 00:09:48,320
i'm going to specify globally which

297
00:09:48,320 --> 00:09:50,640
version should be used and the other one

298
00:09:50,640 --> 00:09:51,120
is

299
00:09:51,120 --> 00:09:53,839
exclusions which is kind of dangerous

300
00:09:53,839 --> 00:09:54,800
because you

301
00:09:54,800 --> 00:09:58,000
if you exclude some code you are

302
00:09:58,000 --> 00:09:59,920
responsible that it's included somewhere

303
00:09:59,920 --> 00:10:01,120
else right

304
00:10:01,120 --> 00:10:05,279
nicely so by exclusion we

305
00:10:05,279 --> 00:10:07,200
uh we would explicitly exclude the

306
00:10:07,200 --> 00:10:09,120
offending um

307
00:10:09,120 --> 00:10:11,120
artifacts so in this case for example

308
00:10:11,120 --> 00:10:12,800
guava is the one that's offending

309
00:10:12,800 --> 00:10:14,880
we can go ahead and use the exclusion to

310
00:10:14,880 --> 00:10:17,200
exclude it explicitly so that

311
00:10:17,200 --> 00:10:18,720
in our maven tree we don't see this

312
00:10:18,720 --> 00:10:20,560
anymore um in like it

313
00:10:20,560 --> 00:10:22,320
i would look something like this so i

314
00:10:22,320 --> 00:10:23,760
can extrude guava from

315
00:10:23,760 --> 00:10:26,959
truth and now i only have guava 21 in my

316
00:10:26,959 --> 00:10:29,760
in my tree uh now dependency management

317
00:10:29,760 --> 00:10:31,519
though how does that look like

318
00:10:31,519 --> 00:10:34,800
it's uh management it's it looks almost

319
00:10:34,800 --> 00:10:35,360
the same as

320
00:10:35,360 --> 00:10:37,760
you specify dependencies but it just has

321
00:10:37,760 --> 00:10:39,120
an extra

322
00:10:39,120 --> 00:10:41,279
tag around it and in the in the end it's

323
00:10:41,279 --> 00:10:42,880
just a lookup table

324
00:10:42,880 --> 00:10:47,680
so it's looking for a dependency

325
00:10:47,680 --> 00:10:50,079
based on the group and art factory and

326
00:10:50,079 --> 00:10:51,760
okay if you have a specific version here

327
00:10:51,760 --> 00:10:54,079
that's the one that's being used

328
00:10:54,079 --> 00:10:56,640
i see yeah so for example if i want to

329
00:10:56,640 --> 00:10:57,279
overwrite

330
00:10:57,279 --> 00:10:59,360
all of the transitive defense dependency

331
00:10:59,360 --> 00:11:01,040
version for guava

332
00:11:01,040 --> 00:11:02,480
i can potentially use dependency

333
00:11:02,480 --> 00:11:05,120
management here and so now when maven is

334
00:11:05,120 --> 00:11:07,120
resolving come google guava with the

335
00:11:07,120 --> 00:11:08,079
guava artifact

336
00:11:08,079 --> 00:11:10,800
it will come here to see what version it

337
00:11:10,800 --> 00:11:12,160
should be using right

338
00:11:12,160 --> 00:11:15,200
right so um if that's the case let's go

339
00:11:15,200 --> 00:11:15,839
ahead and

340
00:11:15,839 --> 00:11:18,959
go to this example directory 3a

341
00:11:18,959 --> 00:11:23,440
uh 3 3b sorry 3b

342
00:11:23,440 --> 00:11:25,920
and if we run through the dependency

343
00:11:25,920 --> 00:11:26,800
tree again

344
00:11:26,800 --> 00:11:29,040
and c guava we should be able to see

345
00:11:29,040 --> 00:11:31,519
that all of the guava versions are now

346
00:11:31,519 --> 00:11:34,040
being managed up to in this case guava

347
00:11:34,040 --> 00:11:35,360
28.1

348
00:11:35,360 --> 00:11:37,040
right the original version may be this

349
00:11:37,040 --> 00:11:39,440
one but now with dependency management

350
00:11:39,440 --> 00:11:41,120
all of them are now aligned to the same

351
00:11:41,120 --> 00:11:43,200
version right pretty cool

352
00:11:43,200 --> 00:11:45,680
yeah so uh we can use dependency

353
00:11:45,680 --> 00:11:47,839
management to overwrite your translative

354
00:11:47,839 --> 00:11:49,279
or even direct dependency

355
00:11:49,279 --> 00:11:50,959
versions if you don't specify it and

356
00:11:50,959 --> 00:11:52,160
that's probably one of the best

357
00:11:52,160 --> 00:11:53,360
practices

358
00:11:53,360 --> 00:11:56,399
and you can say hey let's upgrade all

359
00:11:56,399 --> 00:11:58,399
the version to 21 or let's upgrade older

360
00:11:58,399 --> 00:11:59,519
version to 28

361
00:11:59,519 --> 00:12:01,360
uh and they will just go ahead and make

362
00:12:01,360 --> 00:12:02,639
that a reality

363
00:12:02,639 --> 00:12:04,560
that's pretty neat um yeah it's

364
00:12:04,560 --> 00:12:05,920
definitely one of the one first thing i

365
00:12:05,920 --> 00:12:06,959
learned from robert

366
00:12:06,959 --> 00:12:10,480
in solving all these issues

367
00:12:10,480 --> 00:12:13,920
okay now another thing though is

368
00:12:13,920 --> 00:12:16,480
that sometimes we run into issues where

369
00:12:16,480 --> 00:12:16,959
maybe

370
00:12:16,959 --> 00:12:18,480
we're using two different versions of

371
00:12:18,480 --> 00:12:20,399
guava that's not exactly compatible

372
00:12:20,399 --> 00:12:22,720
right a really old version like guava

373
00:12:22,720 --> 00:12:24,000
eight and then really new

374
00:12:24,000 --> 00:12:25,600
version they're just not going to be

375
00:12:25,600 --> 00:12:27,279
compatible and sometimes you may

376
00:12:27,279 --> 00:12:28,240
actually need to use

377
00:12:28,240 --> 00:12:31,360
both versions um and this can be the

378
00:12:31,360 --> 00:12:32,800
case where the newest version doesn't

379
00:12:32,800 --> 00:12:34,320
work with the dependency you're using

380
00:12:34,320 --> 00:12:35,600
but you need to use the new version

381
00:12:35,600 --> 00:12:36,399
anyway

382
00:12:36,399 --> 00:12:37,839
what do we do in those cases because

383
00:12:37,839 --> 00:12:39,519
that's really really difficult

384
00:12:39,519 --> 00:12:42,560
right so this is really the last thing

385
00:12:42,560 --> 00:12:43,680
you should think of

386
00:12:43,680 --> 00:12:46,639
uh but we have the maven shape plugin

387
00:12:46,639 --> 00:12:49,120
and what it can do it can relocate

388
00:12:49,120 --> 00:12:51,440
uh the cluster which means that it will

389
00:12:51,440 --> 00:12:52,160
change the

390
00:12:52,160 --> 00:12:55,920
package name in the end and also inside

391
00:12:55,920 --> 00:12:57,360
your code and based on that it is

392
00:12:57,360 --> 00:12:58,560
possible to have

393
00:12:58,560 --> 00:13:00,480
multiple versions of guava next to each

394
00:13:00,480 --> 00:13:02,320
other

395
00:13:02,320 --> 00:13:04,480
i see it's really tricky because from

396
00:13:04,480 --> 00:13:06,000
that moment on you cannot update

397
00:13:06,000 --> 00:13:08,639
it anymore

398
00:13:09,279 --> 00:13:11,040
so that you cannot update the guava

399
00:13:11,040 --> 00:13:12,800
version through your dependency

400
00:13:12,800 --> 00:13:15,440
uh transfer dependency anymore because

401
00:13:15,440 --> 00:13:15,920
it's now

402
00:13:15,920 --> 00:13:18,399
embedded encoded directly into your code

403
00:13:18,399 --> 00:13:19,040
as pos

404
00:13:19,040 --> 00:13:20,800
it's part of your code now right

405
00:13:20,800 --> 00:13:22,240
excellent yeah

406
00:13:22,240 --> 00:13:23,760
yeah but sometimes there's really no way

407
00:13:23,760 --> 00:13:26,079
around this especially of using hadoop

408
00:13:26,079 --> 00:13:27,680
i think a lot of people probably run

409
00:13:27,680 --> 00:13:29,839
into these things when using hadoop they

410
00:13:29,839 --> 00:13:30,639
do have

411
00:13:30,639 --> 00:13:32,480
a really old version of guava in the

412
00:13:32,480 --> 00:13:34,560
system class path uh and if you

413
00:13:34,560 --> 00:13:36,639
use anything that uses the newer version

414
00:13:36,639 --> 00:13:38,480
uh there are going to be dependency

415
00:13:38,480 --> 00:13:39,760
conflicts because of the

416
00:13:39,760 --> 00:13:41,279
things that robert talked about right

417
00:13:41,279 --> 00:13:43,120
because in the class path only

418
00:13:43,120 --> 00:13:45,360
one these one of these guava classes can

419
00:13:45,360 --> 00:13:46,480
exist

420
00:13:46,480 --> 00:13:48,399
and it will choose the system class path

421
00:13:48,399 --> 00:13:50,079
one uh overwhelmingly and now you're

422
00:13:50,079 --> 00:13:51,199
going to run into issue

423
00:13:51,199 --> 00:13:53,360
in this case you have to shade guava

424
00:13:53,360 --> 00:13:55,040
that's in your application so it does

425
00:13:55,040 --> 00:13:56,880
not conflict with what's in your system

426
00:13:56,880 --> 00:13:58,480
class path

427
00:13:58,480 --> 00:14:01,600
okay cool so that was pretty cool so at

428
00:14:01,600 --> 00:14:03,120
least we have enforcer plugins that can

429
00:14:03,120 --> 00:14:05,040
help us catch some of these things early

430
00:14:05,040 --> 00:14:06,800
which is super super cool you do not

431
00:14:06,800 --> 00:14:08,480
want to wait until later

432
00:14:08,480 --> 00:14:12,079
now let's see the next example uh 3e

433
00:14:12,079 --> 00:14:16,399
um let me see here 3e suspiciously named

434
00:14:16,399 --> 00:14:19,519
clash i wonder what that means

435
00:14:19,519 --> 00:14:22,240
so here again we have a bunch of

436
00:14:22,240 --> 00:14:23,360
dependencies where i'm using two

437
00:14:23,360 --> 00:14:24,399
dependencies here

438
00:14:24,399 --> 00:14:27,199
uh firebase uh you know a real-time

439
00:14:27,199 --> 00:14:27,839
serverless

440
00:14:27,839 --> 00:14:29,440
database that people can use which is

441
00:14:29,440 --> 00:14:31,440
great and pops up which is messaging so

442
00:14:31,440 --> 00:14:33,040
we got two dependencies here

443
00:14:33,040 --> 00:14:34,480
i'm following the best practices here

444
00:14:34,480 --> 00:14:36,880
i'm using dependency management to

445
00:14:36,880 --> 00:14:38,480
override some of the versions that was

446
00:14:38,480 --> 00:14:40,959
causing issues and i also have enforcer

447
00:14:40,959 --> 00:14:42,160
rule here too so i'm

448
00:14:42,160 --> 00:14:44,160
using the reinforce rule okay so let me

449
00:14:44,160 --> 00:14:46,399
go ahead and go through exception 3d

450
00:14:46,399 --> 00:14:50,240
oh which one is that one example 3e

451
00:14:50,240 --> 00:14:52,320
clash and we're just going to do a

452
00:14:52,320 --> 00:14:54,399
compile because this will also kick off

453
00:14:54,399 --> 00:14:55,440
the enforcer

454
00:14:55,440 --> 00:14:57,920
and everything is fine which is great

455
00:14:57,920 --> 00:14:59,839
right so we follow the best practices

456
00:14:59,839 --> 00:15:01,440
using foister and now we do live and

457
00:15:01,440 --> 00:15:01,920
test

458
00:15:01,920 --> 00:15:03,760
to run one of these tests and let's see

459
00:15:03,760 --> 00:15:05,839
what happens

460
00:15:05,839 --> 00:15:09,360
okay now again what happened

461
00:15:09,360 --> 00:15:11,600
robert i follow all the best practices

462
00:15:11,600 --> 00:15:13,199
what happened here

463
00:15:13,199 --> 00:15:15,279
we're seeing exactly the same message as

464
00:15:15,279 --> 00:15:17,279
before right

465
00:15:17,279 --> 00:15:21,079
so yeah and again

466
00:15:21,079 --> 00:15:26,000
com.google.com so it's got guava again

467
00:15:26,000 --> 00:15:28,000
it's always that way if you run into one

468
00:15:28,000 --> 00:15:29,759
of these issues you gotta find a package

469
00:15:29,759 --> 00:15:30,079
and

470
00:15:30,079 --> 00:15:31,920
you know it's it's qualified this case

471
00:15:31,920 --> 00:15:33,519
what happened what i follow everything

472
00:15:33,519 --> 00:15:35,199
we fixed previously why is it still

473
00:15:35,199 --> 00:15:37,279
happening

474
00:15:37,279 --> 00:15:40,639
well my guess is that there are multiple

475
00:15:40,639 --> 00:15:43,360
versions of this class on your class

476
00:15:43,360 --> 00:15:44,399
path

477
00:15:44,399 --> 00:15:46,800
uh-huh so even though we require upper

478
00:15:46,800 --> 00:15:48,000
bound we should only

479
00:15:48,000 --> 00:15:50,160
have one single guava artifact uh

480
00:15:50,160 --> 00:15:52,000
somehow another class is being

481
00:15:52,000 --> 00:15:53,519
introduced

482
00:15:53,519 --> 00:15:55,759
so again i guess we go to dependency

483
00:15:55,759 --> 00:15:57,199
tree and we see

484
00:15:57,199 --> 00:16:00,079
the verbose with the package for guava

485
00:16:00,079 --> 00:16:02,719
and let's see here

486
00:16:03,519 --> 00:16:05,360
that's pretty good but let's drop down a

487
00:16:05,360 --> 00:16:07,040
level right so let's remove the specific

488
00:16:07,040 --> 00:16:08,800
artifacts and let's go to

489
00:16:08,800 --> 00:16:11,759
just the package the group id and see

490
00:16:11,759 --> 00:16:12,800
what happened here

491
00:16:12,800 --> 00:16:14,399
and by the way this this particular

492
00:16:14,399 --> 00:16:16,000
thing was one of the hardest thing i

493
00:16:16,000 --> 00:16:17,360
ever had to troubleshoot

494
00:16:17,360 --> 00:16:20,480
because uh it's really

495
00:16:20,480 --> 00:16:22,639
weird that this actually happens but it

496
00:16:22,639 --> 00:16:23,680
does right

497
00:16:23,680 --> 00:16:26,079
and um and i think one of the things

498
00:16:26,079 --> 00:16:28,320
that we noticed was wait a second

499
00:16:28,320 --> 00:16:31,120
we have an artifact that's called guava

500
00:16:31,120 --> 00:16:32,079
right in this one

501
00:16:32,079 --> 00:16:36,399
another one that's called guava.jdk5

502
00:16:36,399 --> 00:16:38,320
now because it uses a different artifact

503
00:16:38,320 --> 00:16:40,560
name there's no way for maven to know

504
00:16:40,560 --> 00:16:42,000
that these two things are

505
00:16:42,000 --> 00:16:43,279
actually the same thing they're just

506
00:16:43,279 --> 00:16:45,600
different inversion and so

507
00:16:45,600 --> 00:16:47,839
now we are potentially introducing two

508
00:16:47,839 --> 00:16:49,360
artifacts to jar files

509
00:16:49,360 --> 00:16:51,279
but they both potentially have the same

510
00:16:51,279 --> 00:16:52,399
classes and

511
00:16:52,399 --> 00:16:54,160
if we go back to the class loading in

512
00:16:54,160 --> 00:16:56,000
the class path only one of these will be

513
00:16:56,000 --> 00:16:56,639
picked up

514
00:16:56,639 --> 00:16:58,240
so both of them will be in the classpad

515
00:16:58,240 --> 00:16:59,759
but only one of them will work

516
00:16:59,759 --> 00:17:02,320
and now we are potentially using the

517
00:17:02,320 --> 00:17:05,119
older version again and

518
00:17:05,119 --> 00:17:06,480
this one was not picked up by the

519
00:17:06,480 --> 00:17:08,240
required upper bound um

520
00:17:08,240 --> 00:17:10,799
the enforcer rule what do we do here

521
00:17:10,799 --> 00:17:12,959
this one was really really difficult

522
00:17:12,959 --> 00:17:14,959
yes this one is uh really difficult

523
00:17:14,959 --> 00:17:16,640
because even though i said it within

524
00:17:16,640 --> 00:17:19,599
five seconds and it was right

525
00:17:19,599 --> 00:17:22,799
you're definitely right yeah

526
00:17:22,799 --> 00:17:25,039
this is this requires quite a lot of

527
00:17:25,039 --> 00:17:26,079
analysis but

528
00:17:26,079 --> 00:17:28,960
um also we have now that we know that it

529
00:17:28,960 --> 00:17:30,400
was caused by a duplicate

530
00:17:30,400 --> 00:17:32,480
class there is a specific rule for that

531
00:17:32,480 --> 00:17:33,679
as well

532
00:17:33,679 --> 00:17:36,400
oh yeah yeah there you see oh there it

533
00:17:36,400 --> 00:17:36,720
is

534
00:17:36,720 --> 00:17:38,559
paint duplicate classes so what does

535
00:17:38,559 --> 00:17:40,320
this do

536
00:17:40,320 --> 00:17:42,640
well it goes through all your jar files

537
00:17:42,640 --> 00:17:44,880
and it's just a

538
00:17:44,880 --> 00:17:47,600
registering uh the classes being used

539
00:17:47,600 --> 00:17:48,320
and

540
00:17:48,320 --> 00:17:50,960
at the if it discovered some duplicates

541
00:17:50,960 --> 00:17:52,240
it will

542
00:17:52,240 --> 00:17:54,640
print them out and also mentioning which

543
00:17:54,640 --> 00:17:56,240
classes are duplicated

544
00:17:56,240 --> 00:17:58,840
and in which multiple jars they are

545
00:17:58,840 --> 00:18:00,080
located

546
00:18:00,080 --> 00:18:02,240
uh-huh interesting that's good so let's

547
00:18:02,240 --> 00:18:03,760
give it a try so i'm actually going to

548
00:18:03,760 --> 00:18:05,360
add this plug-in too i'm going to copy

549
00:18:05,360 --> 00:18:05,840
and paste

550
00:18:05,840 --> 00:18:08,799
as is right so i'm adding the spam

551
00:18:08,799 --> 00:18:10,480
people get classes you can configure

552
00:18:10,480 --> 00:18:13,600
a few other things um so let's uh try

553
00:18:13,600 --> 00:18:15,520
ahead let's go ahead and try to compile

554
00:18:15,520 --> 00:18:18,320
again and uh hopefully this will

555
00:18:18,320 --> 00:18:20,960
uh at the compilation time we see this

556
00:18:20,960 --> 00:18:22,720
issue right off the bat oh look at that

557
00:18:22,720 --> 00:18:24,960
all these classes are being duplicated

558
00:18:24,960 --> 00:18:27,520
in potentially multiple artifacts with

559
00:18:27,520 --> 00:18:28,720
different artifact id

560
00:18:28,720 --> 00:18:31,200
and by the way we do have a java library

561
00:18:31,200 --> 00:18:32,880
best practices rules now it's called

562
00:18:32,880 --> 00:18:34,000
jlbp

563
00:18:34,000 --> 00:18:36,240
so if you go to jlbp.dev there's a rule

564
00:18:36,240 --> 00:18:37,200
that says

565
00:18:37,200 --> 00:18:40,080
you know no no no new node 2 artifacts

566
00:18:40,080 --> 00:18:41,520
you have the same classes

567
00:18:41,520 --> 00:18:43,120
you should not duplicate classes in two

568
00:18:43,120 --> 00:18:44,720
different artifacts and uh

569
00:18:44,720 --> 00:18:46,480
this is uh something that's new that we

570
00:18:46,480 --> 00:18:48,240
added so we shouldn't see these issues

571
00:18:48,240 --> 00:18:49,120
anymore

572
00:18:49,120 --> 00:18:51,360
uh but now we can see the result of this

573
00:18:51,360 --> 00:18:52,320
look at that

574
00:18:52,320 --> 00:18:55,520
um yeah yeah so looking at the

575
00:18:55,520 --> 00:18:56,000
dependency

576
00:18:56,000 --> 00:18:57,840
tree was really hard but now in with

577
00:18:57,840 --> 00:19:00,000
this enforcer rule we can see the two

578
00:19:00,000 --> 00:19:01,760
offending artifacts right off the bat

579
00:19:01,760 --> 00:19:04,799
and this is really really good uh yeah i

580
00:19:04,799 --> 00:19:06,160
would highly recommend this for

581
00:19:06,160 --> 00:19:08,000
every one of your projects as well in

582
00:19:08,000 --> 00:19:09,360
case you want to avoid some of these

583
00:19:09,360 --> 00:19:10,160
issues

584
00:19:10,160 --> 00:19:12,720
okay cool so let's go back to the

585
00:19:12,720 --> 00:19:13,440
examples

586
00:19:13,440 --> 00:19:16,000
um let's uh let's look at example 3c

587
00:19:16,000 --> 00:19:16,640
that's another

588
00:19:16,640 --> 00:19:20,400
really really interesting one 3c

589
00:19:20,400 --> 00:19:22,960
suspiciously called misalignment so i'm

590
00:19:22,960 --> 00:19:24,000
going to go ahead and

591
00:19:24,000 --> 00:19:27,200
um again do my uh

592
00:19:27,200 --> 00:19:28,960
test here so i'm going to maven compile

593
00:19:28,960 --> 00:19:30,799
with some of the first rule so we added

594
00:19:30,799 --> 00:19:32,480
the required up and bound reinforcer

595
00:19:32,480 --> 00:19:33,360
rule here

596
00:19:33,360 --> 00:19:35,200
and we can see that the inverse rule

597
00:19:35,200 --> 00:19:37,919
actually failed and we can tell you that

598
00:19:37,919 --> 00:19:38,799
in this case

599
00:19:38,799 --> 00:19:40,320
there are two versions of this thing

600
00:19:40,320 --> 00:19:44,320
called grpc stop 1.0.1 and 1.10.1

601
00:19:44,320 --> 00:19:45,919
and because we need upper bounds so we

602
00:19:45,919 --> 00:19:48,160
should be using 1.10.1

603
00:19:48,160 --> 00:19:50,640
right and so i go back to dependency

604
00:19:50,640 --> 00:19:52,559
management here i'm using dependency

605
00:19:52,559 --> 00:19:54,320
management to override the version to

606
00:19:54,320 --> 00:19:55,760
the newest version

607
00:19:55,760 --> 00:19:57,600
so now i'm using all the things that we

608
00:19:57,600 --> 00:19:58,799
learned in the past

609
00:19:58,799 --> 00:20:02,559
15 minutes and let's do a compile again

610
00:20:02,559 --> 00:20:04,640
right robert i'm again following all the

611
00:20:04,640 --> 00:20:05,679
best practices that

612
00:20:05,679 --> 00:20:08,000
you have said so far so everything

613
00:20:08,000 --> 00:20:08,799
compiled

614
00:20:08,799 --> 00:20:12,639
and let's do another test yeah

615
00:20:13,120 --> 00:20:18,240
oh boy oh oh no okay not another one

616
00:20:18,240 --> 00:20:20,000
yes it's not guava anymore thank

617
00:20:20,000 --> 00:20:21,360
goodness right but

618
00:20:21,360 --> 00:20:23,360
uh but what is this now this is that no

619
00:20:23,360 --> 00:20:24,720
class that found

620
00:20:24,720 --> 00:20:26,960
so it's not no method found but not

621
00:20:26,960 --> 00:20:28,000
there's no class

622
00:20:28,000 --> 00:20:31,760
definition found um

623
00:20:32,320 --> 00:20:34,880
this one's difficult too it's um also

624
00:20:34,880 --> 00:20:35,600
difficult

625
00:20:35,600 --> 00:20:37,600
and you need to know a little bit about

626
00:20:37,600 --> 00:20:39,120
uh this project because

627
00:20:39,120 --> 00:20:41,760
this is a set of libraries that are

628
00:20:41,760 --> 00:20:43,120
always released uh

629
00:20:43,120 --> 00:20:46,400
at the same time right so what you would

630
00:20:46,400 --> 00:20:48,640
expect is that all their versions are

631
00:20:48,640 --> 00:20:50,000
exactly the same

632
00:20:50,000 --> 00:20:52,480
most people recognize this also from

633
00:20:52,480 --> 00:20:53,360
spring

634
00:20:53,360 --> 00:20:55,679
spring framework spring boot that these

635
00:20:55,679 --> 00:20:57,520
are a set of libraries and

636
00:20:57,520 --> 00:20:59,200
in general they should always have

637
00:20:59,200 --> 00:21:01,280
exactly the same version

638
00:21:01,280 --> 00:21:03,120
right because they're tightly coupled um

639
00:21:03,120 --> 00:21:04,799
i think another example will be

640
00:21:04,799 --> 00:21:06,880
neti right there are many different neti

641
00:21:06,880 --> 00:21:08,880
modules but they all have to be the same

642
00:21:08,880 --> 00:21:09,360
version

643
00:21:09,360 --> 00:21:12,799
otherwise you get into issues sl4j

644
00:21:12,799 --> 00:21:14,080
right some of these projects they have

645
00:21:14,080 --> 00:21:15,600
multiple modules and you should always

646
00:21:15,600 --> 00:21:17,280
use the same version of the

647
00:21:17,280 --> 00:21:19,120
the for all of the modules so in this

648
00:21:19,120 --> 00:21:20,480
case uh

649
00:21:20,480 --> 00:21:22,320
it was again very difficult but we had

650
00:21:22,320 --> 00:21:24,159
to go into the dependency tree

651
00:21:24,159 --> 00:21:26,240
to read this line by line and say okay

652
00:21:26,240 --> 00:21:29,200
here's the jrpc net version that's a 1.0

653
00:21:29,200 --> 00:21:32,559
0.1 but then the stop version is 1.10.1

654
00:21:32,559 --> 00:21:34,400
because it was introduced because we

655
00:21:34,400 --> 00:21:36,080
upgraded to the newest version

656
00:21:36,080 --> 00:21:38,159
but it obviously wasn't compatible with

657
00:21:38,159 --> 00:21:39,760
this other version so we have to upgrade

658
00:21:39,760 --> 00:21:41,360
all of these other versions too

659
00:21:41,360 --> 00:21:43,600
right they have to be aligned and this

660
00:21:43,600 --> 00:21:44,640
issue is what we call

661
00:21:44,640 --> 00:21:46,960
dependency misalignment so in this graph

662
00:21:46,960 --> 00:21:49,000
you can see that for grpc we have

663
00:21:49,000 --> 00:21:51,520
1.0.1 but then for one of the modules is

664
00:21:51,520 --> 00:21:52,640
1.10

665
00:21:52,640 --> 00:21:55,280
and they're misaligned in version so we

666
00:21:55,280 --> 00:21:56,320
haven't aligned it

667
00:21:56,320 --> 00:21:58,159
now what do we do in this case right i

668
00:21:58,159 --> 00:21:59,520
can obviously go back to dependency

669
00:21:59,520 --> 00:22:00,960
management but now i have to add these

670
00:22:00,960 --> 00:22:01,360
things

671
00:22:01,360 --> 00:22:04,000
myself as a user uh over and over again

672
00:22:04,000 --> 00:22:05,200
that's really annoying

673
00:22:05,200 --> 00:22:06,960
yes and you don't know if you're

674
00:22:06,960 --> 00:22:08,240
complete

675
00:22:08,240 --> 00:22:11,360
if you hate all the dependencies um

676
00:22:11,360 --> 00:22:15,200
right right now most uh libraries uh

677
00:22:15,200 --> 00:22:18,480
also provide a bomb file a bomb file

678
00:22:18,480 --> 00:22:20,880
file is a list of dependencies that are

679
00:22:20,880 --> 00:22:22,799
all part of

680
00:22:22,799 --> 00:22:25,200
this set of libraries that should have

681
00:22:25,200 --> 00:22:26,960
exactly the same version

682
00:22:26,960 --> 00:22:28,960
uh and you can add that to your own pom

683
00:22:28,960 --> 00:22:30,000
file it's in the end

684
00:22:30,000 --> 00:22:33,039
just one manage dependency and you add

685
00:22:33,039 --> 00:22:35,760
your project and that ensures that all

686
00:22:35,760 --> 00:22:39,120
the versions are in line with each other

687
00:22:39,120 --> 00:22:40,799
okay so in this case let's take a look

688
00:22:40,799 --> 00:22:42,159
at the grpc bomb

689
00:22:42,159 --> 00:22:45,440
so what's in the bomb file

690
00:22:46,080 --> 00:22:49,280
okay um yes

691
00:22:49,280 --> 00:22:51,200
so the bomb file is really just a set of

692
00:22:51,200 --> 00:22:52,559
dependency management

693
00:22:52,559 --> 00:22:55,760
uh blocks where the bomb file

694
00:22:55,760 --> 00:22:57,200
so rather than adding the dependency

695
00:22:57,200 --> 00:22:58,880
management in my own pump

696
00:22:58,880 --> 00:23:01,679
uh i can have this dependency management

697
00:23:01,679 --> 00:23:02,880
in a bomb

698
00:23:02,880 --> 00:23:05,520
and then i can then reuse these versions

699
00:23:05,520 --> 00:23:06,000
right

700
00:23:06,000 --> 00:23:09,360
yes uh-huh so which was the

701
00:23:09,360 --> 00:23:11,440
to do a copy paste of this and put it

702
00:23:11,440 --> 00:23:13,360
inside your own palm

703
00:23:13,360 --> 00:23:15,039
but that's kind of ugly of course so

704
00:23:15,039 --> 00:23:16,400
that's why

705
00:23:16,400 --> 00:23:22,640
bomb file uh concept and okay

706
00:23:22,640 --> 00:23:25,600
huh yep so let's take a quick look on

707
00:23:25,600 --> 00:23:26,559
how to do that

708
00:23:26,559 --> 00:23:30,159
so in this case uh what we can do is to

709
00:23:30,159 --> 00:23:32,960
import the bom that somebody else

710
00:23:32,960 --> 00:23:34,559
already created right in this case the

711
00:23:34,559 --> 00:23:35,600
grpc

712
00:23:35,600 --> 00:23:37,679
libraries have a single bomb that can

713
00:23:37,679 --> 00:23:39,360
then override older versions

714
00:23:39,360 --> 00:23:42,400
and align them together so like here is

715
00:23:42,400 --> 00:23:44,400
the bom file this is the palm with the

716
00:23:44,400 --> 00:23:46,159
dependency management inside

717
00:23:46,159 --> 00:23:49,120
and then to consume it we can use in our

718
00:23:49,120 --> 00:23:50,320
dependency management

719
00:23:50,320 --> 00:23:52,000
rather than copy and paste all of those

720
00:23:52,000 --> 00:23:53,919
things we come to this block

721
00:23:53,919 --> 00:23:56,000
and the important part here is the scope

722
00:23:56,000 --> 00:23:57,039
is import

723
00:23:57,039 --> 00:24:00,159
and the type is the palm and now

724
00:24:00,159 --> 00:24:02,159
everything that's in this file becomes

725
00:24:02,159 --> 00:24:03,520
part of yours as well

726
00:24:03,520 --> 00:24:06,880
is that the first way to say that yes

727
00:24:06,880 --> 00:24:09,200
yeah that's pretty much how it works yes

728
00:24:09,200 --> 00:24:10,159
nice

729
00:24:10,159 --> 00:24:13,039
very cool so with the alignment then uh

730
00:24:13,039 --> 00:24:15,120
this thing then should work and compile

731
00:24:15,120 --> 00:24:17,120
as well so that's uh that should be

732
00:24:17,120 --> 00:24:18,159
pretty awesome

733
00:24:18,159 --> 00:24:20,159
uh and by importing this bomb we can

734
00:24:20,159 --> 00:24:22,480
then overwrite all of these uh grpc

735
00:24:22,480 --> 00:24:23,440
libraries

736
00:24:23,440 --> 00:24:25,600
um but you know everyone should probably

737
00:24:25,600 --> 00:24:27,039
create a bomb like what are some of the

738
00:24:27,039 --> 00:24:29,760
practices here for creating the bomb

739
00:24:29,760 --> 00:24:33,039
right it all depends on if you are a

740
00:24:33,039 --> 00:24:36,240
library creator or framework creator if

741
00:24:36,240 --> 00:24:37,039
you're working on

742
00:24:37,039 --> 00:24:38,559
applications it doesn't really make

743
00:24:38,559 --> 00:24:41,360
sense i think but

744
00:24:41,360 --> 00:24:43,200
those librarian framework creators

745
00:24:43,200 --> 00:24:45,039
should also provide a bomb file if it's

746
00:24:45,039 --> 00:24:46,559
not there please ask them to

747
00:24:46,559 --> 00:24:49,679
also create one for you because

748
00:24:49,679 --> 00:24:52,080
as you can see it can give you a lot of

749
00:24:52,080 --> 00:24:55,039
headaches if you are not doing it right

750
00:24:55,039 --> 00:24:57,840
right so um and for library creators if

751
00:24:57,840 --> 00:24:58,880
especially if you're doing a

752
00:24:58,880 --> 00:25:00,000
multi-module project

753
00:25:00,000 --> 00:25:02,799
that's tightly coupled in this case jrpc

754
00:25:02,799 --> 00:25:03,279
neti

755
00:25:03,279 --> 00:25:05,360
and many many other things all of these

756
00:25:05,360 --> 00:25:06,559
things if you're creating something

757
00:25:06,559 --> 00:25:07,279
similar

758
00:25:07,279 --> 00:25:09,200
you should also create a bom so that

759
00:25:09,200 --> 00:25:10,320
your user can

760
00:25:10,320 --> 00:25:13,200
import the bom to configure the library

761
00:25:13,200 --> 00:25:14,080
versions right

762
00:25:14,080 --> 00:25:17,039
right now what should also go into the

763
00:25:17,039 --> 00:25:17,440
bom

764
00:25:17,440 --> 00:25:20,960
um it should um like for example if i'm

765
00:25:20,960 --> 00:25:21,520
using

766
00:25:21,520 --> 00:25:23,440
uh if i create a library that has that

767
00:25:23,440 --> 00:25:25,679
uses guava as the transfer dependencies

768
00:25:25,679 --> 00:25:28,000
should i be adding guava into my bum too

769
00:25:28,000 --> 00:25:30,000
so my user can use the same version of

770
00:25:30,000 --> 00:25:31,600
global that i want to use

771
00:25:31,600 --> 00:25:34,240
now you should only add those parts that

772
00:25:34,240 --> 00:25:35,200
are part of the

773
00:25:35,200 --> 00:25:37,760
multi-module project so those that are

774
00:25:37,760 --> 00:25:38,480
in sync with

775
00:25:38,480 --> 00:25:41,520
have to be in sync with each other i see

776
00:25:41,520 --> 00:25:43,600
so like in grpc again if i go back to

777
00:25:43,600 --> 00:25:45,840
this uh this example for grpc

778
00:25:45,840 --> 00:25:48,159
they only include the sub modules for

779
00:25:48,159 --> 00:25:49,279
grpc

780
00:25:49,279 --> 00:25:51,520
but not their translated dependencies

781
00:25:51,520 --> 00:25:53,039
right right

782
00:25:53,039 --> 00:25:56,240
um yeah very cool very cool

783
00:25:56,240 --> 00:26:00,080
wow that's amazing uh we are about

784
00:26:00,080 --> 00:26:03,200
15 what 20 minutes in 20 25 minutes in

785
00:26:03,200 --> 00:26:05,360
and uh we done a lot already

786
00:26:05,360 --> 00:26:07,520
um now the final thing here is that one

787
00:26:07,520 --> 00:26:09,440
of the things i do want to mention is um

788
00:26:09,440 --> 00:26:11,360
if all things fails another thing that's

789
00:26:11,360 --> 00:26:13,679
really really cool is linkage checker

790
00:26:13,679 --> 00:26:15,600
so this thing is created by the team

791
00:26:15,600 --> 00:26:17,840
here at google uh to help solve some of

792
00:26:17,840 --> 00:26:18,880
these problems

793
00:26:18,880 --> 00:26:21,200
and what this is surprisingly yet

794
00:26:21,200 --> 00:26:23,120
another enforcer rule like what

795
00:26:23,120 --> 00:26:24,880
robert said you can enforce and check

796
00:26:24,880 --> 00:26:26,799
these things with the reinforcer rule

797
00:26:26,799 --> 00:26:29,039
so this enforcer rule will do static

798
00:26:29,039 --> 00:26:29,919
analysis

799
00:26:29,919 --> 00:26:32,159
on your code to make sure that all the

800
00:26:32,159 --> 00:26:34,799
calls all the methods are reachable

801
00:26:34,799 --> 00:26:37,440
okay in the current resolutions so that

802
00:26:37,440 --> 00:26:39,440
you can detect these things early during

803
00:26:39,440 --> 00:26:40,880
the compilation time

804
00:26:40,880 --> 00:26:43,200
as opposed to runtime you don't want to

805
00:26:43,200 --> 00:26:44,880
figure these things out during runtime

806
00:26:44,880 --> 00:26:47,120
because that's already too late uh if

807
00:26:47,120 --> 00:26:48,880
all of these other best practices

808
00:26:48,880 --> 00:26:50,880
still doesn't find you the issue you

809
00:26:50,880 --> 00:26:52,080
should add this static

810
00:26:52,080 --> 00:26:54,080
analysis tool so you can find the issue

811
00:26:54,080 --> 00:26:56,000
early so you can definitely check this

812
00:26:56,000 --> 00:26:56,480
out

813
00:26:56,480 --> 00:26:59,520
okay so with that being said uh thank

814
00:26:59,520 --> 00:27:00,880
you so much for being here

815
00:27:00,880 --> 00:27:02,640
i just want to add that a lot of the

816
00:27:02,640 --> 00:27:04,159
things that you sell if

817
00:27:04,159 --> 00:27:05,440
especially if you are creating your own

818
00:27:05,440 --> 00:27:07,360
library all these rules

819
00:27:07,360 --> 00:27:09,720
and best practices are documented in

820
00:27:09,720 --> 00:27:11,039
jlbp.dev

821
00:27:11,039 --> 00:27:13,039
so please please go check it out it's

822
00:27:13,039 --> 00:27:15,039
got all the best practices in here

823
00:27:15,039 --> 00:27:17,039
all 20 of them that you should follow

824
00:27:17,039 --> 00:27:18,480
especially you are creating a new

825
00:27:18,480 --> 00:27:19,360
library

826
00:27:19,360 --> 00:27:21,039
so please please go there and check it

827
00:27:21,039 --> 00:27:22,399
out um but

828
00:27:22,399 --> 00:27:23,919
also very importantly for robert and

829
00:27:23,919 --> 00:27:26,240
maven uh i think you have something uh

830
00:27:26,240 --> 00:27:28,480
to add that's even more important

831
00:27:28,480 --> 00:27:30,320
well do you think i think brian has

832
00:27:30,320 --> 00:27:32,159
something to say right

833
00:27:32,159 --> 00:27:33,919
oh i have something to say that first of

834
00:27:33,919 --> 00:27:35,679
all we have to go in q a we've got three

835
00:27:35,679 --> 00:27:37,120
minutes left but i know what you're

836
00:27:37,120 --> 00:27:39,200
going to say that is that

837
00:27:39,200 --> 00:27:41,120
everybody is using or a lot of people

838
00:27:41,120 --> 00:27:42,240
are using maven

839
00:27:42,240 --> 00:27:45,520
and unfortunately we only have a handful

840
00:27:45,520 --> 00:27:46,960
of contributors so

841
00:27:46,960 --> 00:27:49,200
if you are using maven and you want to

842
00:27:49,200 --> 00:27:51,279
and you depend on maven

843
00:27:51,279 --> 00:27:53,600
just like the dependencies you bring in

844
00:27:53,600 --> 00:27:55,120
you wanted to want them to be healthy

845
00:27:55,120 --> 00:27:56,960
make sure that you also contribute to

846
00:27:56,960 --> 00:27:57,919
maven because

847
00:27:57,919 --> 00:28:00,240
we need your help if uh if we want to

848
00:28:00,240 --> 00:28:02,159
solve all the issues and just with for

849
00:28:02,159 --> 00:28:02,640
instance

850
00:28:02,640 --> 00:28:06,080
10 people that work on that

851
00:28:06,080 --> 00:28:09,200
and millions of people are using maven

852
00:28:09,200 --> 00:28:11,600
that might misalign but let me quickly

853
00:28:11,600 --> 00:28:13,440
go to a few questions because we have

854
00:28:13,440 --> 00:28:14,880
two minutes left and then the next

855
00:28:14,880 --> 00:28:16,320
speaker is all we're already

856
00:28:16,320 --> 00:28:19,520
up in my uh my backlog first of all

857
00:28:19,520 --> 00:28:21,279
always do we have always the question

858
00:28:21,279 --> 00:28:23,679
why shouldn't i be using maven clean

859
00:28:23,679 --> 00:28:25,120
install and i've got the question over

860
00:28:25,120 --> 00:28:26,480
here as well but the

861
00:28:26,480 --> 00:28:28,799
good one is the the good question is

862
00:28:28,799 --> 00:28:30,799
okay is there some

863
00:28:30,799 --> 00:28:32,320
cheat sheet or something which maven

864
00:28:32,320 --> 00:28:34,399
command i have to use when

865
00:28:34,399 --> 00:28:36,799
and so this person like i want to learn

866
00:28:36,799 --> 00:28:38,480
and i i think a lot of people are like

867
00:28:38,480 --> 00:28:39,520
that

868
00:28:39,520 --> 00:28:42,000
so uh how do you robert do you got any

869
00:28:42,000 --> 00:28:44,559
resources on that

870
00:28:44,559 --> 00:28:47,679
yes we have of course our website but it

871
00:28:47,679 --> 00:28:50,240
is an overload of information and it's

872
00:28:50,240 --> 00:28:52,559
probably quite hard to find

873
00:28:52,559 --> 00:28:56,320
especially this kind of questions

874
00:28:56,399 --> 00:28:59,120
i think uh if you understand the whole

875
00:28:59,120 --> 00:29:00,320
life cycle stuff

876
00:29:00,320 --> 00:29:02,640
and what clean does and what install

877
00:29:02,640 --> 00:29:04,240
does then you probably

878
00:29:04,240 --> 00:29:07,200
should understand why you don't need to

879
00:29:07,200 --> 00:29:10,080
clean and why you don't need the install

880
00:29:10,080 --> 00:29:12,640
so the short answer is clean will remove

881
00:29:12,640 --> 00:29:13,520
everything

882
00:29:13,520 --> 00:29:15,760
you've already done so it will remove

883
00:29:15,760 --> 00:29:16,960
the target directory

884
00:29:16,960 --> 00:29:20,559
and it will recompile remove of re

885
00:29:20,559 --> 00:29:23,520
uh add all those resources you already

886
00:29:23,520 --> 00:29:26,159
touched probably

887
00:29:26,159 --> 00:29:28,720
so in general it's just consuming

888
00:29:28,720 --> 00:29:30,399
resource consuming you don't need that

889
00:29:30,399 --> 00:29:31,360
and the install

890
00:29:31,360 --> 00:29:35,039
only what install does is copying

891
00:29:35,039 --> 00:29:37,919
those jar files to your local repository

892
00:29:37,919 --> 00:29:38,640
why

893
00:29:38,640 --> 00:29:41,279
you don't need it there yeah so

894
00:29:41,279 --> 00:29:41,840
basically

895
00:29:41,840 --> 00:29:43,679
so basic so basically what you say is

896
00:29:43,679 --> 00:29:45,120
make sure that you know every step

897
00:29:45,120 --> 00:29:46,080
within maven

898
00:29:46,080 --> 00:29:49,760
and what every step does yes all right

899
00:29:49,760 --> 00:29:51,919
um always got this kind of question as

900
00:29:51,919 --> 00:29:53,520
well

901
00:29:53,520 --> 00:29:55,919
are there similar things in gradle but i

902
00:29:55,919 --> 00:29:59,600
think you are the wrong person to ask

903
00:30:00,720 --> 00:30:03,120
but i do want you to announce it i mean

904
00:30:03,120 --> 00:30:04,799
robert is the chairman of maven

905
00:30:04,799 --> 00:30:08,240
and probably not using grade also uh

906
00:30:08,240 --> 00:30:10,640
i'm sorry to say that this this question

907
00:30:10,640 --> 00:30:12,080
is probably not going to be answered in

908
00:30:12,080 --> 00:30:12,960
this stream

909
00:30:12,960 --> 00:30:15,360
um guys i'm i'm moving forward i want to

910
00:30:15,360 --> 00:30:16,559
thank you for this

911
00:30:16,559 --> 00:30:18,640
uh this talk we are on a tight schedule

912
00:30:18,640 --> 00:30:20,799
so um it was a pleasure to have not one

913
00:30:20,799 --> 00:30:22,480
java champion but two java champions in

914
00:30:22,480 --> 00:30:23,440
my stream

915
00:30:23,440 --> 00:30:25,840
amazing to have you here and i will

916
00:30:25,840 --> 00:30:26,480
bring

917
00:30:26,480 --> 00:30:28,880
i will

