1
00:00:00,000 --> 00:00:02,399
let's go

2
00:00:03,840 --> 00:00:05,680
god it's i'm having such a hard time

3
00:00:05,680 --> 00:00:07,759
hearing you so i i feel like you just

4
00:00:07,759 --> 00:00:08,880
did a handoff so

5
00:00:08,880 --> 00:00:10,639
i guess we'll go ahead and get started

6
00:00:10,639 --> 00:00:12,400
uh hello everyone my name is maya

7
00:00:12,400 --> 00:00:14,880
i'm here today to talk to you about how

8
00:00:14,880 --> 00:00:17,119
to deploy and manage your grpc

9
00:00:17,119 --> 00:00:20,960
services on top of kubernetes

10
00:00:21,279 --> 00:00:23,840
i know everybody's like opinions about

11
00:00:23,840 --> 00:00:24,880
resume slides

12
00:00:24,880 --> 00:00:27,119
but during the day i'm a principal

13
00:00:27,119 --> 00:00:28,160
engineer

14
00:00:28,160 --> 00:00:31,119
working at indeed.com um outside of that

15
00:00:31,119 --> 00:00:33,200
i'm a mother of one i have a couple dogs

16
00:00:33,200 --> 00:00:34,559
plenty of hobbies

17
00:00:34,559 --> 00:00:37,200
and i contribute to open source a lot

18
00:00:37,200 --> 00:00:38,079
one of my biggest

19
00:00:38,079 --> 00:00:40,800
personal projects is working on a system

20
00:00:40,800 --> 00:00:42,840
to kind of identify how

21
00:00:42,840 --> 00:00:46,399
um project repositories uh depend and

22
00:00:46,399 --> 00:00:48,719
consume one another

23
00:00:48,719 --> 00:00:51,520
much of what i cover in the presentation

24
00:00:51,520 --> 00:00:52,640
presentation today

25
00:00:52,640 --> 00:00:54,719
stems from what i've learned working

26
00:00:54,719 --> 00:00:55,920
both

27
00:00:55,920 --> 00:00:57,520
on my side projects as well as my

28
00:00:57,520 --> 00:00:59,440
full-time job

29
00:00:59,440 --> 00:01:01,280
and i'm on social media everywhere so

30
00:01:01,280 --> 00:01:02,879
you can feel free to reach out and

31
00:01:02,879 --> 00:01:04,640
connect

32
00:01:04,640 --> 00:01:07,280
go from there

33
00:01:08,240 --> 00:01:10,880
in today's talk i'm going to spend most

34
00:01:10,880 --> 00:01:13,119
of it in a code editor and just kind of

35
00:01:13,119 --> 00:01:15,680
interactively walking through the

36
00:01:15,680 --> 00:01:17,360
project

37
00:01:17,360 --> 00:01:19,520
but i will kind of stop and give a

38
00:01:19,520 --> 00:01:20,799
little bit of background

39
00:01:20,799 --> 00:01:22,799
uh provide a high level overview of a

40
00:01:22,799 --> 00:01:26,640
system that we'll be working with

41
00:01:26,720 --> 00:01:28,320
and then even once you're kind of in the

42
00:01:28,320 --> 00:01:29,759
editor you'll notice i also try to

43
00:01:29,759 --> 00:01:31,840
include a lot of supporting context or

44
00:01:31,840 --> 00:01:33,040
documents along the way

45
00:01:33,040 --> 00:01:36,400
so um and then finally we'll

46
00:01:36,400 --> 00:01:40,560
wrap things up with a little bit of q a

47
00:01:40,560 --> 00:01:42,880
so first off grpc is an open source

48
00:01:42,880 --> 00:01:44,560
remote procedure call framework from

49
00:01:44,560 --> 00:01:45,520
google

50
00:01:45,520 --> 00:01:48,240
it's built on top of protocol buffers a

51
00:01:48,240 --> 00:01:50,880
tool that allows services to be defined

52
00:01:50,880 --> 00:01:54,079
in a language agnostic way as a result

53
00:01:54,079 --> 00:01:55,360
this makes the framework really

54
00:01:55,360 --> 00:01:56,399
versatile and

55
00:01:56,399 --> 00:01:59,600
able to support many different languages

56
00:01:59,600 --> 00:02:01,360
it's because of this that i've actually

57
00:02:01,360 --> 00:02:02,960
been working with it over the last three

58
00:02:02,960 --> 00:02:05,439
years across golang javascript

59
00:02:05,439 --> 00:02:09,360
node and java in this talk i'm not going

60
00:02:09,360 --> 00:02:10,239
to dive

61
00:02:10,239 --> 00:02:13,520
into like the depths or specific details

62
00:02:13,520 --> 00:02:14,160
about

63
00:02:14,160 --> 00:02:17,760
about grpc rather i'm going to focus on

64
00:02:17,760 --> 00:02:18,160
how

65
00:02:18,160 --> 00:02:19,520
to kind of configure some of its

66
00:02:19,520 --> 00:02:21,599
features and

67
00:02:21,599 --> 00:02:22,959
run it within an orchestrated

68
00:02:22,959 --> 00:02:25,599
environment like kubernetes

69
00:02:25,599 --> 00:02:26,959
specifically we're going to be looking

70
00:02:26,959 --> 00:02:28,239
at things like health checking and

71
00:02:28,239 --> 00:02:30,319
client-side load balancing

72
00:02:30,319 --> 00:02:31,519
how to pick kind of the right service

73
00:02:31,519 --> 00:02:34,000
for the right job if you want to look

74
00:02:34,000 --> 00:02:35,920
up for more information on grpc i

75
00:02:35,920 --> 00:02:37,360
definitely suggest checking out their

76
00:02:37,360 --> 00:02:38,879
website

77
00:02:38,879 --> 00:02:41,519
uh next up is kubernetes and god i

78
00:02:41,519 --> 00:02:43,200
really wish i didn't have to kind of

79
00:02:43,200 --> 00:02:45,280
do the whole intro here but uh for those

80
00:02:45,280 --> 00:02:47,040
that are unfamiliar it is

81
00:02:47,040 --> 00:02:49,599
a robust container orchestration

82
00:02:49,599 --> 00:02:50,160
platform

83
00:02:50,160 --> 00:02:51,599
it kind of provides a lot of the

84
00:02:51,599 --> 00:02:53,360
essential building blocks for developing

85
00:02:53,360 --> 00:02:54,239
and deploying

86
00:02:54,239 --> 00:02:57,519
uh containerized workloads um

87
00:02:57,519 --> 00:02:58,879
i know there's a lot of components

88
00:02:58,879 --> 00:03:00,640
within the kubernetes ecosystem

89
00:03:00,640 --> 00:03:02,640
so it's definitely a little overwhelming

90
00:03:02,640 --> 00:03:04,319
to get started

91
00:03:04,319 --> 00:03:05,920
i'm not going to be able to cover every

92
00:03:05,920 --> 00:03:08,319
element today but i do try to again

93
00:03:08,319 --> 00:03:10,879
kind of provide documentation link out

94
00:03:10,879 --> 00:03:13,280
to further context for folks

95
00:03:13,280 --> 00:03:17,120
where necessary the test system that we

96
00:03:17,120 --> 00:03:18,560
have is pretty easy

97
00:03:18,560 --> 00:03:20,959
i know this diagram is a lot to digest

98
00:03:20,959 --> 00:03:22,560
but there's really two main code

99
00:03:22,560 --> 00:03:23,599
components

100
00:03:23,599 --> 00:03:26,159
there's the client that will just kind

101
00:03:26,159 --> 00:03:28,000
of issue requests against the server and

102
00:03:28,000 --> 00:03:29,440
our server side component which will

103
00:03:29,440 --> 00:03:30,879
just echo back

104
00:03:30,879 --> 00:03:35,920
uh the host name of the server instance

105
00:03:36,080 --> 00:03:38,480
and then using configuration we're able

106
00:03:38,480 --> 00:03:40,400
to kind of deploy a single version

107
00:03:40,400 --> 00:03:44,560
of the server and then deploy three

108
00:03:44,560 --> 00:03:45,360
distinct

109
00:03:45,360 --> 00:03:50,239
versions of our uh client application

110
00:03:50,879 --> 00:03:53,120
uh now that we kind of have a sense for

111
00:03:53,120 --> 00:03:54,239
the system at large

112
00:03:54,239 --> 00:03:57,439
we're gonna be shift over and

113
00:03:57,439 --> 00:03:58,840
and kind of walk through the code

114
00:03:58,840 --> 00:04:01,120
repository for those that are interested

115
00:04:01,120 --> 00:04:02,560
in kind of following along at home all

116
00:04:02,560 --> 00:04:04,640
of this is available on github

117
00:04:04,640 --> 00:04:14,159
at that address

118
00:04:14,159 --> 00:04:15,680
so again the address for those that are

119
00:04:15,680 --> 00:04:17,440
interested uh the first thing you'll

120
00:04:17,440 --> 00:04:18,478
probably notice on

121
00:04:18,478 --> 00:04:20,160
here is i do provide instructions on

122
00:04:20,160 --> 00:04:22,079
like how you can kind of do this at home

123
00:04:22,079 --> 00:04:22,639
using

124
00:04:22,639 --> 00:04:25,840
a simple little kind server um and then

125
00:04:25,840 --> 00:04:27,280
kind of walking through each of the

126
00:04:27,280 --> 00:04:30,800
the yamls i do link to kind of the

127
00:04:30,800 --> 00:04:32,320
presentation outline that

128
00:04:32,320 --> 00:04:34,960
we're roughly going to follow today it

129
00:04:34,960 --> 00:04:36,160
includes everything about kind of the

130
00:04:36,160 --> 00:04:37,360
current cluster setup

131
00:04:37,360 --> 00:04:40,000
to some things to kind of keep an eye on

132
00:04:40,000 --> 00:04:40,720
as we move

133
00:04:40,720 --> 00:04:43,120
through it um first we are using a

134
00:04:43,120 --> 00:04:43,919
digitalocean

135
00:04:43,919 --> 00:04:47,360
hosted cluster i picked digitalocean for

136
00:04:47,360 --> 00:04:49,600
a few reasons one really easy to get

137
00:04:49,600 --> 00:04:50,720
started with but

138
00:04:50,720 --> 00:04:53,840
two they have support for http 2

139
00:04:53,840 --> 00:04:57,919
on um or at least grpc on their load

140
00:04:57,919 --> 00:04:59,440
balancers which

141
00:04:59,440 --> 00:05:01,600
uh was a really valuable play for you

142
00:05:01,600 --> 00:05:02,639
know some of the work that's being

143
00:05:02,639 --> 00:05:04,240
demonstrated here

144
00:05:04,240 --> 00:05:07,199
um and then i'm using a modern version

145
00:05:07,199 --> 00:05:09,840
of kubernetes i say 116.

146
00:05:09,840 --> 00:05:12,400
and i do often work with 117 but really

147
00:05:12,400 --> 00:05:13,759
just looking for something

148
00:05:13,759 --> 00:05:15,520
that's able to support the latest

149
00:05:15,520 --> 00:05:18,799
versions of the email

150
00:05:20,240 --> 00:05:22,080
so some key principles to keep in mind

151
00:05:22,080 --> 00:05:23,600
as we go throughout this presentation

152
00:05:23,600 --> 00:05:25,280
even if you're not working with go or

153
00:05:25,280 --> 00:05:27,520
anything like that the features that i'm

154
00:05:27,520 --> 00:05:29,680
trying to show are available in most of

155
00:05:29,680 --> 00:05:31,360
the languages today

156
00:05:31,360 --> 00:05:34,639
um and what's kind of even nicer when

157
00:05:34,639 --> 00:05:35,680
working across

158
00:05:35,680 --> 00:05:38,479
um kind of the go lane pro or the the

159
00:05:38,479 --> 00:05:40,320
grpc projects

160
00:05:40,320 --> 00:05:42,639
is i noticed that a lot of the features

161
00:05:42,639 --> 00:05:43,440
actually are

162
00:05:43,440 --> 00:05:45,360
implemented in very similar ways as well

163
00:05:45,360 --> 00:05:47,360
so you can kind of see elements between

164
00:05:47,360 --> 00:05:49,199
each of the libraries that

165
00:05:49,199 --> 00:05:53,280
um kind of stand out

166
00:05:53,280 --> 00:05:56,080
with grpc kind of your first entry point

167
00:05:56,080 --> 00:05:57,759
into your project is your proto

168
00:05:57,759 --> 00:05:58,720
definition

169
00:05:58,720 --> 00:06:01,120
it's where you define the messages that

170
00:06:01,120 --> 00:06:02,800
are kind of representing your requests

171
00:06:02,800 --> 00:06:04,479
and your responses

172
00:06:04,479 --> 00:06:06,319
it's where you write down kind of the

173
00:06:06,319 --> 00:06:08,080
service contract and the various

174
00:06:08,080 --> 00:06:09,919
operations that you can perform against

175
00:06:09,919 --> 00:06:11,759
that given instance

176
00:06:11,759 --> 00:06:15,039
these can be unary in the sense that you

177
00:06:15,039 --> 00:06:16,800
for every request that you issue you get

178
00:06:16,800 --> 00:06:18,400
one response

179
00:06:18,400 --> 00:06:21,039
or they can be stream-based calls

180
00:06:21,039 --> 00:06:22,639
whether that's a server-side streaming

181
00:06:22,639 --> 00:06:24,639
event or a client-side streaming event

182
00:06:24,639 --> 00:06:25,360
or even

183
00:06:25,360 --> 00:06:28,560
by die for chat heavy systems

184
00:06:28,560 --> 00:06:31,840
um any changes to this file

185
00:06:31,840 --> 00:06:35,840
go through the proto-c compiler

186
00:06:36,240 --> 00:06:38,000
for simplicity i use a go generate

187
00:06:38,000 --> 00:06:39,840
syntax but you could just take this

188
00:06:39,840 --> 00:06:41,759
proto-z line and kind of drop it into

189
00:06:41,759 --> 00:06:43,199
shell

190
00:06:43,199 --> 00:06:46,000
and invoke it directly this will end up

191
00:06:46,000 --> 00:06:46,800
producing

192
00:06:46,800 --> 00:06:49,599
a single file with kind of all the

193
00:06:49,599 --> 00:06:52,319
generated messages that you defined

194
00:06:52,319 --> 00:06:54,000
as well as kind of some server and

195
00:06:54,000 --> 00:06:56,400
client interfaces

196
00:06:56,400 --> 00:06:58,479
so demo client which is something you'll

197
00:06:58,479 --> 00:07:03,840
see later on

198
00:07:06,479 --> 00:07:08,560
next up is really kind of taking a look

199
00:07:08,560 --> 00:07:10,319
at the

200
00:07:10,319 --> 00:07:13,280
server model so like i said one of the

201
00:07:13,280 --> 00:07:15,039
things that code generation gives you is

202
00:07:15,039 --> 00:07:16,800
both a client and a server interface to

203
00:07:16,800 --> 00:07:18,000
adhere to

204
00:07:18,000 --> 00:07:20,960
you can implement you can implement that

205
00:07:20,960 --> 00:07:22,240
server interface and

206
00:07:22,240 --> 00:07:23,759
here i'm just providing a simple little

207
00:07:23,759 --> 00:07:27,440
echo function that kicks back the host

208
00:07:28,840 --> 00:07:30,160
name

209
00:07:30,160 --> 00:07:31,759
earlier in the code you can kind of see

210
00:07:31,759 --> 00:07:33,520
where we're starting up the server

211
00:07:33,520 --> 00:07:35,919
we can register any number of desired

212
00:07:35,919 --> 00:07:36,960
application

213
00:07:36,960 --> 00:07:39,360
or a desired grpc servers with the

214
00:07:39,360 --> 00:07:41,520
instance you can't register

215
00:07:41,520 --> 00:07:43,360
multiple of the same service so i

216
00:07:43,360 --> 00:07:45,280
couldn't do two instances of registered

217
00:07:45,280 --> 00:07:46,720
demo service

218
00:07:46,720 --> 00:07:48,160
but you could register you know demo

219
00:07:48,160 --> 00:07:49,599
service and then where i'm doing here

220
00:07:49,599 --> 00:07:51,120
where i'm registering the health service

221
00:07:51,120 --> 00:07:53,199
as well

222
00:07:53,199 --> 00:07:55,680
so grpc does provide a few services out

223
00:07:55,680 --> 00:07:56,319
of box

224
00:07:56,319 --> 00:07:59,039
one is reflection and one is health the

225
00:07:59,039 --> 00:07:59,840
health service

226
00:07:59,840 --> 00:08:01,520
server is really useful because it

227
00:08:01,520 --> 00:08:03,120
allows you to

228
00:08:03,120 --> 00:08:05,759
have your clients transparently check

229
00:08:05,759 --> 00:08:06,800
back-end

230
00:08:06,800 --> 00:08:09,520
serving status and if a server is unable

231
00:08:09,520 --> 00:08:11,280
to service traffic

232
00:08:11,280 --> 00:08:12,960
clients are smart enough to be able to

233
00:08:12,960 --> 00:08:14,960
pull those instances out of rotation

234
00:08:14,960 --> 00:08:19,120
and then kind of prefer instances with

235
00:08:19,120 --> 00:08:22,240
a healthy serving status

236
00:08:22,240 --> 00:08:23,680
to do this you just have to start up a

237
00:08:23,680 --> 00:08:26,240
new server register it and then

238
00:08:26,240 --> 00:08:28,000
spin up a background thread that can

239
00:08:28,000 --> 00:08:29,599
kind of go and inspect

240
00:08:29,599 --> 00:08:32,640
your system dependencies and then toggle

241
00:08:32,640 --> 00:08:40,240
serving serving status appropriately

242
00:08:40,240 --> 00:08:42,000
next up on the list is the client this

243
00:08:42,000 --> 00:08:43,519
is actually a lot more

244
00:08:43,519 --> 00:08:47,519
involved um i'll come back up to the

245
00:08:47,519 --> 00:08:50,160
the import here but first thing i wanted

246
00:08:50,160 --> 00:08:52,160
to call out was the service config which

247
00:08:52,160 --> 00:08:53,360
is used to configure

248
00:08:53,360 --> 00:08:55,279
configure a lot of the communication

249
00:08:55,279 --> 00:08:56,959
elements of

250
00:08:56,959 --> 00:09:00,720
um kind of grpc clients talking to the

251
00:09:00,720 --> 00:09:01,519
server

252
00:09:01,519 --> 00:09:03,120
specifically things like load balancing

253
00:09:03,120 --> 00:09:04,880
policy and the health check

254
00:09:04,880 --> 00:09:09,120
configs by default grpc uses a pick

255
00:09:09,120 --> 00:09:10,320
first strategy

256
00:09:10,320 --> 00:09:12,240
um you can see i'm overriding it to be a

257
00:09:12,240 --> 00:09:14,240
round robin approach here

258
00:09:14,240 --> 00:09:17,360
um that is any server instance that's

259
00:09:17,360 --> 00:09:18,480
returned

260
00:09:18,480 --> 00:09:23,839
will will actually be serving traffic

261
00:09:24,880 --> 00:09:26,959
the health check config allows you to

262
00:09:26,959 --> 00:09:28,399
specify the

263
00:09:28,399 --> 00:09:30,399
health check service name empty string

264
00:09:30,399 --> 00:09:32,240
tends to default to the global status of

265
00:09:32,240 --> 00:09:33,600
the service

266
00:09:33,600 --> 00:09:35,839
so here's kind of where we're

267
00:09:35,839 --> 00:09:38,880
initializing a lot of that health

268
00:09:38,880 --> 00:09:41,200
health check operations by providing the

269
00:09:41,200 --> 00:09:42,880
health check config there's kind of some

270
00:09:42,880 --> 00:09:45,120
plumbing that happens under the hood

271
00:09:45,120 --> 00:09:46,480
where you then also need to make sure

272
00:09:46,480 --> 00:09:48,720
that you import

273
00:09:48,720 --> 00:09:50,640
that health package so that way the the

274
00:09:50,640 --> 00:09:52,800
client probe gets initialized properly

275
00:09:52,800 --> 00:09:53,440
this is

276
00:09:53,440 --> 00:09:55,920
likely a go specific thing but it was

277
00:09:55,920 --> 00:09:58,160
something that i thought was really

278
00:09:58,160 --> 00:09:59,839
uh kind of dug it dug into the

279
00:09:59,839 --> 00:10:02,640
documentation

280
00:10:03,200 --> 00:10:04,720
the next element for the client is

281
00:10:04,720 --> 00:10:06,160
really a target address that it's going

282
00:10:06,160 --> 00:10:06,959
to dial

283
00:10:06,959 --> 00:10:08,640
um so this follows kind of a fully

284
00:10:08,640 --> 00:10:10,720
qualified uri syntax

285
00:10:10,720 --> 00:10:13,920
um the structure is here some good

286
00:10:13,920 --> 00:10:14,800
examples

287
00:10:14,800 --> 00:10:16,079
we're going to primarily work with the

288
00:10:16,079 --> 00:10:18,880
kube dns one inside of

289
00:10:18,880 --> 00:10:21,360
the demonstration today but there's

290
00:10:21,360 --> 00:10:23,920
other ones out there you can use console

291
00:10:23,920 --> 00:10:25,760
you name it i don't think this one's

292
00:10:25,760 --> 00:10:28,160
packaged out of box but

293
00:10:28,160 --> 00:10:31,920
i know people that have implemented them

294
00:10:31,920 --> 00:10:33,279
then if you wanted more information

295
00:10:33,279 --> 00:10:35,040
about how kind of name resolution works

296
00:10:35,040 --> 00:10:36,399
you can kind of go dig into it a little

297
00:10:36,399 --> 00:10:38,240
bit more there

298
00:10:38,240 --> 00:10:39,600
but generally that's how it works we're

299
00:10:39,600 --> 00:10:41,279
gonna let clients kind of pass in the

300
00:10:41,279 --> 00:10:42,640
targets they're dialing we're gonna use

301
00:10:42,640 --> 00:10:44,240
insecure communication just because it's

302
00:10:44,240 --> 00:10:45,839
a demo

303
00:10:45,839 --> 00:10:47,440
and then you see that it kind of just

304
00:10:47,440 --> 00:10:48,800
loops pinging the server to get

305
00:10:48,800 --> 00:10:51,359
information

306
00:10:52,880 --> 00:10:54,320
so we talked a little bit about load

307
00:10:54,320 --> 00:10:55,920
balancing health

308
00:10:55,920 --> 00:10:58,640
the grpc targets the docker file is

309
00:10:58,640 --> 00:10:59,200
probably

310
00:10:59,200 --> 00:11:01,839
the next good step i'm going to ignore

311
00:11:01,839 --> 00:11:03,200
some of the build stuff for now

312
00:11:03,200 --> 00:11:06,480
but it's probably worth noting that

313
00:11:06,480 --> 00:11:08,959
the one thing that i did pull in was a

314
00:11:08,959 --> 00:11:10,480
health probe

315
00:11:10,480 --> 00:11:12,560
the health probe is going to allow you

316
00:11:12,560 --> 00:11:14,720
to kind of poke and prod the service

317
00:11:14,720 --> 00:11:18,480
inspect its um health serving status

318
00:11:18,480 --> 00:11:22,399
and determine if it should be

319
00:11:22,399 --> 00:11:24,880
kind of available in kubernetes we'll

320
00:11:24,880 --> 00:11:26,160
get down to the manifest

321
00:11:26,160 --> 00:11:27,680
later that kind of enable this

322
00:11:27,680 --> 00:11:29,839
capability but having this binary on

323
00:11:29,839 --> 00:11:33,600
on the image is important

324
00:11:34,160 --> 00:11:36,320
and then gawk which is just the binary

325
00:11:36,320 --> 00:11:37,839
that's compiled from the source code

326
00:11:37,839 --> 00:11:38,959
that's here

327
00:11:38,959 --> 00:11:42,000
short for grpc on kubernetes and

328
00:11:42,000 --> 00:11:43,600
kind of one last little bit which we end

329
00:11:43,600 --> 00:11:45,120
up specifying a

330
00:11:45,120 --> 00:11:48,240
non-brute user and group

331
00:11:48,240 --> 00:11:50,240
just to kind of get around some of the

332
00:11:50,240 --> 00:11:51,440
issues that you see when running on

333
00:11:51,440 --> 00:11:53,440
kubernetes with

334
00:11:53,440 --> 00:11:56,320
strict pod security policies enabled if

335
00:11:56,320 --> 00:11:57,200
your container runs

336
00:11:57,200 --> 00:12:00,880
through it will likely not start up but

337
00:12:03,120 --> 00:12:05,680
so that's really it for the application

338
00:12:05,680 --> 00:12:06,560
kind of level

339
00:12:06,560 --> 00:12:08,720
of things we're going to kind of get

340
00:12:08,720 --> 00:12:10,000
into more of the the

341
00:12:10,000 --> 00:12:12,959
kubernetes specifics now um the first

342
00:12:12,959 --> 00:12:13,440
thing up

343
00:12:13,440 --> 00:12:15,760
is a namespace which allows you to kind

344
00:12:15,760 --> 00:12:16,720
of have a single

345
00:12:16,720 --> 00:12:18,639
isolated unit of work inside of

346
00:12:18,639 --> 00:12:19,920
kubernetes

347
00:12:19,920 --> 00:12:22,480
um they call them mini virtual clusters

348
00:12:22,480 --> 00:12:23,279
i look at that

349
00:12:23,279 --> 00:12:27,440
as little resource containers

350
00:12:27,440 --> 00:12:30,240
so i just created the grpc namespace i

351
00:12:30,240 --> 00:12:31,519
already have some of this stuff already

352
00:12:31,519 --> 00:12:33,519
set up but we'll get the watch going at

353
00:12:33,519 --> 00:12:34,639
least

354
00:12:34,639 --> 00:12:37,920
so there's nothing there once the

355
00:12:37,920 --> 00:12:39,760
namespace is set up we can start

356
00:12:39,760 --> 00:12:42,959
sending components into that namespace

357
00:12:42,959 --> 00:12:45,040
um primarily the the workloads that we

358
00:12:45,040 --> 00:12:47,760
want to see running

359
00:12:47,760 --> 00:12:49,600
so kubernetes workloads comes in

360
00:12:49,600 --> 00:12:51,680
multiple many different shapes and sizes

361
00:12:51,680 --> 00:12:53,279
i'm not going to walk through

362
00:12:53,279 --> 00:12:55,360
probably all of these today the one that

363
00:12:55,360 --> 00:12:56,480
we are using and

364
00:12:56,480 --> 00:12:58,160
you'll most likely end up being using in

365
00:12:58,160 --> 00:13:00,320
a lot of your projects is deployments

366
00:13:00,320 --> 00:13:02,480
um it's just a generic mechanism that

367
00:13:02,480 --> 00:13:03,600
lets you attach

368
00:13:03,600 --> 00:13:07,839
kind of rollout strategy to replica sets

369
00:13:12,399 --> 00:13:14,959
so if we apply the server deployment

370
00:13:14,959 --> 00:13:16,160
we'll see that

371
00:13:16,160 --> 00:13:18,880
the server instance gets applied and

372
00:13:18,880 --> 00:13:21,120
that one instance starts to come up

373
00:13:21,120 --> 00:13:23,680
um what's happening here is that even

374
00:13:23,680 --> 00:13:25,279
though we detect that it's running the

375
00:13:25,279 --> 00:13:26,880
health probe is waiting for the server

376
00:13:26,880 --> 00:13:27,760
to actually set

377
00:13:27,760 --> 00:13:30,399
its serving status to ready and then

378
00:13:30,399 --> 00:13:32,000
once the server is actually ready and

379
00:13:32,000 --> 00:13:34,480
starting to service traffic um does

380
00:13:34,480 --> 00:13:36,720
kubernetes actually detect

381
00:13:36,720 --> 00:13:40,320
um detect that it's

382
00:13:40,320 --> 00:13:42,560
able to do that this is done because we

383
00:13:42,560 --> 00:13:43,680
set

384
00:13:43,680 --> 00:13:47,040
the liveness and readiness probes on

385
00:13:47,040 --> 00:13:50,160
our deployment this really just says go

386
00:13:50,160 --> 00:13:52,079
execute this binary here's the address

387
00:13:52,079 --> 00:13:53,279
to point it to

388
00:13:53,279 --> 00:13:55,040
you can optionally specify a service

389
00:13:55,040 --> 00:13:57,439
address

390
00:13:57,519 --> 00:13:58,800
but each of these mean two different

391
00:13:58,800 --> 00:14:01,199
things liveness probes primarily when to

392
00:14:01,199 --> 00:14:02,079
detect an application

393
00:14:02,079 --> 00:14:04,880
degrades into broken states and can't

394
00:14:04,880 --> 00:14:06,800
recover except by restarting

395
00:14:06,800 --> 00:14:09,839
and then readiness probes are used to

396
00:14:09,839 --> 00:14:11,760
kind of determine when it shows up in

397
00:14:11,760 --> 00:14:13,120
dns records for

398
00:14:13,120 --> 00:14:15,920
coop dns that is that it can actually

399
00:14:15,920 --> 00:14:16,399
serve us

400
00:14:16,399 --> 00:14:19,120
and process traffic um we set the

401
00:14:19,120 --> 00:14:20,880
desired number of replicas the one for

402
00:14:20,880 --> 00:14:21,279
now

403
00:14:21,279 --> 00:14:23,760
um that was primarily because we can now

404
00:14:23,760 --> 00:14:24,480
show through

405
00:14:24,480 --> 00:14:25,839
like walk through a quick little scale

406
00:14:25,839 --> 00:14:27,600
event um

407
00:14:27,600 --> 00:14:29,440
one server is probably fine for the the

408
00:14:29,440 --> 00:14:31,120
sake of this demo but let's kind of get

409
00:14:31,120 --> 00:14:32,800
three instances going

410
00:14:32,800 --> 00:14:34,399
um because we really want to show that

411
00:14:34,399 --> 00:14:38,000
traffic is able to

412
00:14:38,160 --> 00:14:40,160
route between all backend instances not

413
00:14:40,160 --> 00:14:42,800
just one backend instance

414
00:14:42,800 --> 00:14:44,079
so you can see that the other two are

415
00:14:44,079 --> 00:14:45,920
slowly coming up um

416
00:14:45,920 --> 00:14:49,760
finally finally completely rolled out um

417
00:14:49,760 --> 00:14:51,279
and so we have servers to be able to

418
00:14:51,279 --> 00:14:53,360
process workloads

419
00:14:53,360 --> 00:14:55,040
that's not usually enough we want to be

420
00:14:55,040 --> 00:14:57,440
able to to actually make use of them

421
00:14:57,440 --> 00:14:59,519
before we can actually you know deploy

422
00:14:59,519 --> 00:15:00,880
any of our client code we

423
00:15:00,880 --> 00:15:04,639
need to attach some services to it

424
00:15:04,639 --> 00:15:07,279
services is kind of kubernetes generic

425
00:15:07,279 --> 00:15:08,160
language for

426
00:15:08,160 --> 00:15:10,399
how you kind of glue the various systems

427
00:15:10,399 --> 00:15:12,240
together

428
00:15:12,240 --> 00:15:14,320
most of these mechanisms result in some

429
00:15:14,320 --> 00:15:16,480
kind of dns record

430
00:15:16,480 --> 00:15:19,120
cluster ip creates an a record inside of

431
00:15:19,120 --> 00:15:21,440
coop dns

432
00:15:21,440 --> 00:15:23,279
node ports kind of build on top of the

433
00:15:23,279 --> 00:15:25,519
existing cluster ip semantic by

434
00:15:25,519 --> 00:15:27,680
exposing the service outside the cluster

435
00:15:27,680 --> 00:15:28,560
with

436
00:15:28,560 --> 00:15:31,040
a common port on every node of the node

437
00:15:31,040 --> 00:15:33,120
of it

438
00:15:33,120 --> 00:15:34,959
load balancers build on top of that but

439
00:15:34,959 --> 00:15:36,959
are primarily provided by your external

440
00:15:36,959 --> 00:15:38,959
cloud provider

441
00:15:38,959 --> 00:15:41,440
and then headless services which

442
00:15:41,440 --> 00:15:42,000
actually

443
00:15:42,000 --> 00:15:44,959
strip strip out the the cluster ip and

444
00:15:44,959 --> 00:15:46,800
expose the pod ips directly to their

445
00:15:46,800 --> 00:15:48,320
clients we'll we'll kind of get into

446
00:15:48,320 --> 00:15:48,720
each

447
00:15:48,720 --> 00:15:51,440
of these a little bit more later on um

448
00:15:51,440 --> 00:15:52,160
but

449
00:15:52,160 --> 00:15:55,199
this is kind of just a quick dump of uh

450
00:15:55,199 --> 00:15:56,480
all the different options that you

451
00:15:56,480 --> 00:15:58,639
really have in coop

452
00:15:58,639 --> 00:16:01,920
so quick little look at the cluster ip

453
00:16:01,920 --> 00:16:04,399
the head list so difference here really

454
00:16:04,399 --> 00:16:06,240
just setting cluster ip to none versus

455
00:16:06,240 --> 00:16:08,800
type equals cluster ip then load

456
00:16:08,800 --> 00:16:10,000
balancer

457
00:16:10,000 --> 00:16:13,600
just setting it to type load balancer

458
00:16:14,079 --> 00:16:16,000
i used to think name addresses to be

459
00:16:16,000 --> 00:16:17,680
able to make sure that each of them were

460
00:16:17,680 --> 00:16:21,120
were resolvable and easily

461
00:16:21,120 --> 00:16:24,639
easily targetable um so we'll go ahead

462
00:16:24,639 --> 00:16:25,920
and quickly

463
00:16:25,920 --> 00:16:28,800
apply that

464
00:16:29,839 --> 00:16:32,959
and then we should see these come up um

465
00:16:32,959 --> 00:16:34,399
the load balancer will take a minute or

466
00:16:34,399 --> 00:16:36,399
so to provision we're waiting on

467
00:16:36,399 --> 00:16:38,320
uh digitalocean to kind of go and

468
00:16:38,320 --> 00:16:40,320
provide us with that stable ip but

469
00:16:40,320 --> 00:16:41,680
we've got other things we can do in the

470
00:16:41,680 --> 00:16:43,440
meantime

471
00:16:43,440 --> 00:16:45,519
let's go ahead and start getting making

472
00:16:45,519 --> 00:16:48,000
some use of the

473
00:16:48,000 --> 00:16:51,199
cluster ip service so the way cluster ip

474
00:16:51,199 --> 00:16:51,839
works

475
00:16:51,839 --> 00:16:55,279
is clients will

476
00:16:55,279 --> 00:16:57,920
do kind of an ns lookup for the service

477
00:16:57,920 --> 00:16:58,320
thought

478
00:16:58,320 --> 00:17:00,880
you know whatever your target name is in

479
00:17:00,880 --> 00:17:03,279
this case it will be something like

480
00:17:03,279 --> 00:17:06,720
server cluster ip dot whatever the name

481
00:17:06,720 --> 00:17:08,160
space is

482
00:17:08,160 --> 00:17:12,000
dns will return back a service

483
00:17:12,000 --> 00:17:14,959
cider ip which is 10 dot in my case i'm

484
00:17:14,959 --> 00:17:16,640
using 10.43 but it's whatever your

485
00:17:16,640 --> 00:17:18,000
cluster is actually configured

486
00:17:18,000 --> 00:17:21,119
to in the example here digitalocean

487
00:17:21,119 --> 00:17:23,839
looks like they use 10.25

488
00:17:23,839 --> 00:17:26,799
or 245.

489
00:17:27,280 --> 00:17:30,240
that cluster ip will route to the coupe

490
00:17:30,240 --> 00:17:32,720
proxy instance which then ends up

491
00:17:32,720 --> 00:17:35,600
routing to one of the 10.42 addresses in

492
00:17:35,600 --> 00:17:37,520
the background

493
00:17:37,520 --> 00:17:39,200
this is great because it lets you make

494
00:17:39,200 --> 00:17:41,840
use of things like topology aware

495
00:17:41,840 --> 00:17:44,960
network routing but kind of the one

496
00:17:44,960 --> 00:17:46,960
downside is that grpc sees

497
00:17:46,960 --> 00:17:48,400
a single address and so it only

498
00:17:48,400 --> 00:17:50,160
establishes a single connection to its

499
00:17:50,160 --> 00:17:52,160
back end

500
00:17:52,160 --> 00:17:54,400
so the way that this ends up manifesting

501
00:17:54,400 --> 00:17:55,360
if we

502
00:17:55,360 --> 00:17:57,919
apply this we'll watch that roll out in

503
00:17:57,919 --> 00:17:58,960
a minute

504
00:17:58,960 --> 00:18:02,480
and then start detailing some

505
00:18:02,480 --> 00:18:06,240
logs you'll see that the the server

506
00:18:06,240 --> 00:18:08,160
only one instance or one server is

507
00:18:08,160 --> 00:18:12,000
really handling traffic at this point

508
00:18:12,240 --> 00:18:14,240
the cluster ip does give you failover

509
00:18:14,240 --> 00:18:15,760
type capabilities so if we went

510
00:18:15,760 --> 00:18:18,960
and deleted that pod um you can see that

511
00:18:18,960 --> 00:18:20,880
the traffic shifts from one instance to

512
00:18:20,880 --> 00:18:22,720
another and we can

513
00:18:22,720 --> 00:18:26,160
you know again do that

514
00:18:26,720 --> 00:18:28,320
and watch the same thing happen where

515
00:18:28,320 --> 00:18:30,320
traffic shifts from one instance to

516
00:18:30,320 --> 00:18:32,320
the next so it does give you some

517
00:18:32,320 --> 00:18:34,160
failover but it doesn't distribute load

518
00:18:34,160 --> 00:18:35,600
across the back end

519
00:18:35,600 --> 00:18:38,480
um some of this kind of comes from the

520
00:18:38,480 --> 00:18:40,720
way that coupe proxy is configured

521
00:18:40,720 --> 00:18:42,320
by default it's usually configured with

522
00:18:42,320 --> 00:18:43,919
ip tables you can

523
00:18:43,919 --> 00:18:46,960
configure it using ipvs to get load

524
00:18:46,960 --> 00:18:48,000
balancing support

525
00:18:48,000 --> 00:18:51,039
but there's much more detail on on this

526
00:18:51,039 --> 00:18:51,679
kind of

527
00:18:51,679 --> 00:18:55,120
in in the attached blog post

528
00:18:55,440 --> 00:18:59,679
but that's it really for cluster ips um

529
00:18:59,679 --> 00:19:03,039
the next one on our list is uh the

530
00:19:03,039 --> 00:19:04,080
headless service

531
00:19:04,080 --> 00:19:05,679
um and the way that the headless service

532
00:19:05,679 --> 00:19:07,919
works which is great is

533
00:19:07,919 --> 00:19:09,840
if you look up an address you're more or

534
00:19:09,840 --> 00:19:10,960
less returned to the

535
00:19:10,960 --> 00:19:14,480
ips of the pods

536
00:19:14,480 --> 00:19:17,200
that removes the 10.43 encapsulation and

537
00:19:17,200 --> 00:19:19,760
it lets grpc establish a connection for

538
00:19:19,760 --> 00:19:22,080
each backend server instance and drop

539
00:19:22,080 --> 00:19:24,320
traffic

540
00:19:24,320 --> 00:19:27,918
across each of them appropriately

541
00:19:28,640 --> 00:19:30,240
this is kind of great because this gives

542
00:19:30,240 --> 00:19:32,799
you the distribution of workload that

543
00:19:32,799 --> 00:19:34,400
you're looking for

544
00:19:34,400 --> 00:19:38,550
excuse me

545
00:19:38,550 --> 00:19:41,579
[Music]

546
00:19:44,400 --> 00:19:47,360
but it doesn't uh respect uh topology

547
00:19:47,360 --> 00:19:49,520
aware networking

548
00:19:49,520 --> 00:19:51,120
uh and so what that means is when you do

549
00:19:51,120 --> 00:19:53,039
that nslookup you're always going to get

550
00:19:53,039 --> 00:19:54,160
back

551
00:19:54,160 --> 00:19:57,679
the um full list of pods rather than

552
00:19:57,679 --> 00:19:59,360
the ones that are just on your hosts or

553
00:19:59,360 --> 00:20:01,280
the ones that are just on your node

554
00:20:01,280 --> 00:20:04,320
um so on and so forth so we just

555
00:20:04,320 --> 00:20:05,679
deployed the headless address if we

556
00:20:05,679 --> 00:20:06,000
actually

557
00:20:06,000 --> 00:20:08,880
go and tell those logs now we actually

558
00:20:08,880 --> 00:20:10,400
see that every instance

559
00:20:10,400 --> 00:20:14,880
of our back end is handling traffic um

560
00:20:14,880 --> 00:20:17,280
another disadvantage to this approach is

561
00:20:17,280 --> 00:20:18,240
that

562
00:20:18,240 --> 00:20:21,440
the cap the the dns lookup is cached and

563
00:20:21,440 --> 00:20:23,760
so if we scale our server instances down

564
00:20:23,760 --> 00:20:24,799
to two

565
00:20:24,799 --> 00:20:26,240
um we'll notice that you know it

566
00:20:26,240 --> 00:20:28,080
respects that and it starts to send

567
00:20:28,080 --> 00:20:30,640
all of its traffic to two instances but

568
00:20:30,640 --> 00:20:32,559
if we were to ever scale this back up to

569
00:20:32,559 --> 00:20:33,600
four

570
00:20:33,600 --> 00:20:35,440
there's a long lead time from the point

571
00:20:35,440 --> 00:20:37,440
where that scaling event happens

572
00:20:37,440 --> 00:20:40,000
to the point where the actual client

573
00:20:40,000 --> 00:20:42,000
realizes there are new dresses available

574
00:20:42,000 --> 00:20:42,799
so

575
00:20:42,799 --> 00:20:43,919
we're still waiting on a couple

576
00:20:43,919 --> 00:20:45,520
instances to get healthy so three are

577
00:20:45,520 --> 00:20:46,880
ready now which

578
00:20:46,880 --> 00:20:48,720
in should mean the client should pick up

579
00:20:48,720 --> 00:20:50,640
on it but we still see that only two

580
00:20:50,640 --> 00:20:52,880
instances are handling traffic

581
00:20:52,880 --> 00:20:56,080
um so something to be mindful of as you

582
00:20:56,080 --> 00:20:57,679
use headless services but they do

583
00:20:57,679 --> 00:21:02,720
provide a lot of great value

584
00:21:02,720 --> 00:21:05,039
so the last one that i wanted to cover

585
00:21:05,039 --> 00:21:06,799
was the load balancer ip and at this

586
00:21:06,799 --> 00:21:07,760
point you can see

587
00:21:07,760 --> 00:21:10,559
that um an external ip's been

588
00:21:10,559 --> 00:21:12,320
provisioned for us

589
00:21:12,320 --> 00:21:14,400
load balancers are a little interesting

590
00:21:14,400 --> 00:21:16,480
primarily because it requires

591
00:21:16,480 --> 00:21:19,039
an external cloud provider to do the

592
00:21:19,039 --> 00:21:20,559
provisioning of the load balancer for

593
00:21:20,559 --> 00:21:21,600
you

594
00:21:21,600 --> 00:21:23,280
but what's nice is that it gives you a

595
00:21:23,280 --> 00:21:25,120
great way to kind of expose services

596
00:21:25,120 --> 00:21:28,159
outside the cluster so here what we're

597
00:21:28,159 --> 00:21:29,679
going to do is configure our client pod

598
00:21:29,679 --> 00:21:31,840
to communicate with the load balancer

599
00:21:31,840 --> 00:21:33,440
that load balancer will then route

600
00:21:33,440 --> 00:21:35,679
between all of the physical nodes within

601
00:21:35,679 --> 00:21:37,120
your cluster

602
00:21:37,120 --> 00:21:41,440
which will then use the underlying

603
00:21:41,440 --> 00:21:43,600
proxy mode whether that's iptables or

604
00:21:43,600 --> 00:21:45,520
ipvs the route between your backend

605
00:21:45,520 --> 00:21:46,880
server pods

606
00:21:46,880 --> 00:21:50,080
so it's just going more or less post

607
00:21:50,080 --> 00:21:50,640
network

608
00:21:50,640 --> 00:21:58,559
to than the service sider range here

609
00:21:58,559 --> 00:22:00,159
so like i said this is great because it

610
00:22:00,159 --> 00:22:01,760
lets you expose services outside of the

611
00:22:01,760 --> 00:22:02,960
cluster

612
00:22:02,960 --> 00:22:05,840
um we'll quickly go and grab the

613
00:22:05,840 --> 00:22:09,120
provision load balancer's ip address

614
00:22:09,120 --> 00:22:12,480
and then we'll go and apply that to the

615
00:22:12,480 --> 00:22:13,679
cluster so we'll be creating

616
00:22:13,679 --> 00:22:16,720
now a load balanced client uh that load

617
00:22:16,720 --> 00:22:18,559
balance client's already up and running

618
00:22:18,559 --> 00:22:21,840
um like the last one we can go

619
00:22:21,840 --> 00:22:27,840
and tail its logs

620
00:22:28,880 --> 00:22:31,200
similar to the cluster ip you do see the

621
00:22:31,200 --> 00:22:33,039
the sticky sessions with your back end

622
00:22:33,039 --> 00:22:33,760
instances

623
00:22:33,760 --> 00:22:35,440
again kind of citing the behavior with

624
00:22:35,440 --> 00:22:37,120
ip tables here

625
00:22:37,120 --> 00:22:39,360
um and then similarly it does handle

626
00:22:39,360 --> 00:22:40,640
that fields

627
00:22:40,640 --> 00:22:44,799
that fail over in traffic from um

628
00:22:44,799 --> 00:22:48,320
one instance to another um and yeah

629
00:22:48,320 --> 00:22:49,919
the thing to be aware of is that this

630
00:22:49,919 --> 00:22:51,919
does have some

631
00:22:51,919 --> 00:22:54,960
user visible impact in that

632
00:22:54,960 --> 00:22:58,159
clients may end up seeing you know

633
00:22:58,159 --> 00:23:00,320
an rpc error here or there depending on

634
00:23:00,320 --> 00:23:01,280
when that

635
00:23:01,280 --> 00:23:03,120
that disconnect happens if it happens

636
00:23:03,120 --> 00:23:04,799
when the requests are being issued

637
00:23:04,799 --> 00:23:07,200
it's not going to impact them but just

638
00:23:07,200 --> 00:23:08,000
something to be aware

639
00:23:08,000 --> 00:23:11,600
of but

640
00:23:11,600 --> 00:23:15,918
that's all i have for y'all today

641
00:23:16,880 --> 00:23:20,640
thank you all right let's see if my

642
00:23:20,640 --> 00:23:22,159
sound is better now or is it still

643
00:23:22,159 --> 00:23:24,640
crappy

644
00:23:26,880 --> 00:23:30,240
i think that's not billy can you can you

645
00:23:30,240 --> 00:23:37,840
jump on please

646
00:23:40,080 --> 00:23:43,279
hey do you hear me yeah i can hear you

647
00:23:43,279 --> 00:23:47,120
oh great awesome

648
00:23:47,520 --> 00:23:50,159
so my my sound is kind of crappy uh i

649
00:23:50,159 --> 00:23:51,760
believe no it's gonna happen it sounds

650
00:23:51,760 --> 00:23:53,200
good

651
00:23:53,200 --> 00:23:56,480
all right it must be on my end then

652
00:23:56,480 --> 00:23:59,440
well um anyway i want to um thank you

653
00:23:59,440 --> 00:23:59,760
for

654
00:23:59,760 --> 00:24:02,000
uh for for your presentation at this

655
00:24:02,000 --> 00:24:04,000
point uh i do not have any

656
00:24:04,000 --> 00:24:06,880
any questions

