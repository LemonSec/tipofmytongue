1
00:00:01,280 --> 00:00:03,600
there i am hey there we go how are you

2
00:00:03,600 --> 00:00:04,319
doing lisa

3
00:00:04,319 --> 00:00:06,080
i'm doing great how are you mike oh

4
00:00:06,080 --> 00:00:08,240
great nice to meet you

5
00:00:08,240 --> 00:00:11,440
virtually thank you for uh helping to

6
00:00:11,440 --> 00:00:14,480
put on this awesome conference

7
00:00:14,480 --> 00:00:17,119
not a problem my pleasure um and i'm

8
00:00:17,119 --> 00:00:19,279
glad you volunteered to give this speech

9
00:00:19,279 --> 00:00:22,480
um this talk on uh and

10
00:00:22,480 --> 00:00:24,480
as i understand it your talk is gonna be

11
00:00:24,480 --> 00:00:26,080
about uh

12
00:00:26,080 --> 00:00:29,599
how to get uh testing bottlenecks uh out

13
00:00:29,599 --> 00:00:32,640
of your deployment pipelines right right

14
00:00:32,640 --> 00:00:33,200
okay

15
00:00:33,200 --> 00:00:34,880
it's going to be interesting so i'll

16
00:00:34,880 --> 00:00:36,480
leave you with the floor lisa

17
00:00:36,480 --> 00:00:38,399
and i'll just drop off and let you take

18
00:00:38,399 --> 00:00:40,160
over share my screen

19
00:00:40,160 --> 00:00:45,839
yeah thank you

20
00:00:50,480 --> 00:00:52,320
all right can people see my screen it

21
00:00:52,320 --> 00:00:54,000
looks like looks like people can see my

22
00:00:54,000 --> 00:00:54,800
screen

23
00:00:54,800 --> 00:00:58,320
all right so

24
00:00:58,320 --> 00:01:01,280
um yes i'm going to talk about getting

25
00:01:01,280 --> 00:01:03,199
those pesky testing bottlenecks out of

26
00:01:03,199 --> 00:01:04,879
your deployment pipelines

27
00:01:04,879 --> 00:01:08,320
and this talk is based on work i've done

28
00:01:08,320 --> 00:01:10,880
with people who know a lot more than i

29
00:01:10,880 --> 00:01:11,600
do

30
00:01:11,600 --> 00:01:14,080
abby bangser ashley hunzeberger alicia

31
00:01:14,080 --> 00:01:15,280
janet gregory and

32
00:01:15,280 --> 00:01:17,119
a lot of other people so it's a it's a

33
00:01:17,119 --> 00:01:18,479
collaborative effort

34
00:01:18,479 --> 00:01:21,280
and i'm happy to share these ideas and

35
00:01:21,280 --> 00:01:23,280
techniques with you

36
00:01:23,280 --> 00:01:26,560
and so a little bit about me i've worked

37
00:01:26,560 --> 00:01:27,600
as a

38
00:01:27,600 --> 00:01:30,640
hands-on tester for the past couple of

39
00:01:30,640 --> 00:01:31,280
decades

40
00:01:31,280 --> 00:01:33,840
on generally on cross-functional agile

41
00:01:33,840 --> 00:01:34,799
teams

42
00:01:34,799 --> 00:01:37,119
and learned a lot and and shared

43
00:01:37,119 --> 00:01:39,920
experiences together with janet gregory

44
00:01:39,920 --> 00:01:41,200
and the books that we've written

45
00:01:41,200 --> 00:01:42,240
together

46
00:01:42,240 --> 00:01:45,840
a video course a a live agile testing

47
00:01:45,840 --> 00:01:47,520
for the whole team course which is now

48
00:01:47,520 --> 00:01:50,079
a remote course and i recently joined

49
00:01:50,079 --> 00:01:52,159
outsystems it's more of my old systems

50
00:01:52,159 --> 00:01:52,880
jacket

51
00:01:52,880 --> 00:01:55,840
um yeah as a quality owner kind of a

52
00:01:55,840 --> 00:01:57,200
funny title but

53
00:01:57,200 --> 00:01:59,280
basically kind of helping all the

54
00:01:59,280 --> 00:02:00,640
engineering teams

55
00:02:00,640 --> 00:02:02,479
uh build more quality into the product

56
00:02:02,479 --> 00:02:04,399
and my focus is on observability

57
00:02:04,399 --> 00:02:06,560
which i don't know a huge amount about

58
00:02:06,560 --> 00:02:08,000
yet and i'm learning

59
00:02:08,000 --> 00:02:10,800
i'm always happy to talk on twitter or

60
00:02:10,800 --> 00:02:11,120
uh

61
00:02:11,120 --> 00:02:13,840
by email so feel free to contact me

62
00:02:13,840 --> 00:02:14,879
anytime

63
00:02:14,879 --> 00:02:17,920
and in my free time i i

64
00:02:17,920 --> 00:02:20,000
play with my three donkeys here in

65
00:02:20,000 --> 00:02:21,280
vermont they

66
00:02:21,280 --> 00:02:23,040
pull carts and do work around the farm

67
00:02:23,040 --> 00:02:26,560
so we have a lot of fun together

68
00:02:27,280 --> 00:02:30,160
so i'm going to talk about you know how

69
00:02:30,160 --> 00:02:31,680
do we succeed

70
00:02:31,680 --> 00:02:33,760
with continuous delivery or continuous

71
00:02:33,760 --> 00:02:35,280
deployment if you're if you're doing

72
00:02:35,280 --> 00:02:36,800
that or you're trying to work towards

73
00:02:36,800 --> 00:02:38,080
that

74
00:02:38,080 --> 00:02:39,680
and have confidence that you didn't

75
00:02:39,680 --> 00:02:40,959
break anything as you're doing these

76
00:02:40,959 --> 00:02:41,599
frequent

77
00:02:41,599 --> 00:02:44,959
small changes to production how do you

78
00:02:44,959 --> 00:02:46,000
make sure you don't have regression

79
00:02:46,000 --> 00:02:47,680
failures how you make sure

80
00:02:47,680 --> 00:02:49,920
that your latest change doesn't impact

81
00:02:49,920 --> 00:02:52,080
something unexpected

82
00:02:52,080 --> 00:02:54,160
but how do you do that and not get

83
00:02:54,160 --> 00:02:56,160
bogged down in testing

84
00:02:56,160 --> 00:02:58,720
and the secret behind it is it's a whole

85
00:02:58,720 --> 00:02:59,680
team effort

86
00:02:59,680 --> 00:03:03,280
that's what i'm going to talk about

87
00:03:03,760 --> 00:03:06,400
i've been lucky to be on teams that

88
00:03:06,400 --> 00:03:08,319
succeeded with continuous delivery even

89
00:03:08,319 --> 00:03:12,000
before we had that word and

90
00:03:12,000 --> 00:03:14,720
and i think one thing that made it

91
00:03:14,720 --> 00:03:15,840
possible was

92
00:03:15,840 --> 00:03:18,239
committing to having a high quality

93
00:03:18,239 --> 00:03:20,000
product the best quality that we could

94
00:03:20,000 --> 00:03:20,959
have

95
00:03:20,959 --> 00:03:23,680
and doing what we could do to overcome

96
00:03:23,680 --> 00:03:25,120
the obstacles to make that happen

97
00:03:25,120 --> 00:03:27,040
so that's basically what i'm just

98
00:03:27,040 --> 00:03:29,440
sharing

99
00:03:29,680 --> 00:03:33,360
so um

100
00:03:33,360 --> 00:03:35,120
jess humble on david farley's book

101
00:03:35,120 --> 00:03:36,799
continuous delivery

102
00:03:36,799 --> 00:03:40,159
when i read this back in

103
00:03:40,159 --> 00:03:41,920
2010 i might have actually read a

104
00:03:41,920 --> 00:03:44,319
manuscript that version of it in 2009

105
00:03:44,319 --> 00:03:45,920
my team was already doing this and i was

106
00:03:45,920 --> 00:03:48,400
so excited to find it had a name

107
00:03:48,400 --> 00:03:51,040
but chapter five of the book talks about

108
00:03:51,040 --> 00:03:53,200
manual test stages

109
00:03:53,200 --> 00:03:56,480
and and this really resonated with me

110
00:03:56,480 --> 00:03:59,040
as somebody whose primary specialty is

111
00:03:59,040 --> 00:04:00,159
testing

112
00:04:00,159 --> 00:04:02,400
the manual test stages of our deployment

113
00:04:02,400 --> 00:04:03,439
pipeline

114
00:04:03,439 --> 00:04:06,000
assert that the system is usable and

115
00:04:06,000 --> 00:04:07,760
fulfills its requirements

116
00:04:07,760 --> 00:04:09,439
detects any defects not caught by

117
00:04:09,439 --> 00:04:11,760
automated tests and verifies that it

118
00:04:11,760 --> 00:04:13,680
provides value to its users

119
00:04:13,680 --> 00:04:16,000
and so some of the stages as examples

120
00:04:16,000 --> 00:04:17,600
they gave were exploratory testing

121
00:04:17,600 --> 00:04:20,079
integration user acceptance testing i

122
00:04:20,079 --> 00:04:21,839
would add things like accessibility

123
00:04:21,839 --> 00:04:22,720
testing

124
00:04:22,720 --> 00:04:24,880
some types of security testing maybe

125
00:04:24,880 --> 00:04:26,160
manual

126
00:04:26,160 --> 00:04:28,479
i like to use the word human-centric

127
00:04:28,479 --> 00:04:30,240
rather than manual because manual i

128
00:04:30,240 --> 00:04:32,080
don't know it just has kind of a status

129
00:04:32,080 --> 00:04:34,160
problem with it but whatever you want to

130
00:04:34,160 --> 00:04:35,199
call it

131
00:04:35,199 --> 00:04:37,120
the things that we have to do to feel

132
00:04:37,120 --> 00:04:38,960
confident about our product and about

133
00:04:38,960 --> 00:04:41,040
our product quality

134
00:04:41,040 --> 00:04:43,280
and they are part of our deployment

135
00:04:43,280 --> 00:04:45,840
pipeline

136
00:04:46,400 --> 00:04:48,560
and in the book they said that manual

137
00:04:48,560 --> 00:04:49,520
test stages

138
00:04:49,520 --> 00:04:52,880
are common to all projects they assert

139
00:04:52,880 --> 00:04:54,880
the systems usable

140
00:04:54,880 --> 00:04:57,919
meets the customer needs

141
00:04:57,919 --> 00:05:00,960
um with the detect defects are automatic

142
00:05:00,960 --> 00:05:02,639
dismiss

143
00:05:02,639 --> 00:05:04,479
verify that we're given the value that

144
00:05:04,479 --> 00:05:06,479
we intend to give to our customers

145
00:05:06,479 --> 00:05:10,080
and and with those examples

146
00:05:10,080 --> 00:05:12,000
so they are part of the pipeline but

147
00:05:12,000 --> 00:05:14,240
there are often forgotten

148
00:05:14,240 --> 00:05:17,199
so one of the teams i was on more

149
00:05:17,199 --> 00:05:18,720
recently

150
00:05:18,720 --> 00:05:21,840
we wanted to move towards continuous

151
00:05:21,840 --> 00:05:22,800
delivery

152
00:05:22,800 --> 00:05:24,560
the holy grail everybody's doing it all

153
00:05:24,560 --> 00:05:26,000
the cool kids are doing continuous

154
00:05:26,000 --> 00:05:27,199
delivery

155
00:05:27,199 --> 00:05:30,720
and we had moved our

156
00:05:30,720 --> 00:05:33,120
our web-based application from a

157
00:05:33,120 --> 00:05:35,039
traditional serving environment

158
00:05:35,039 --> 00:05:37,520
to the cloud we had a deployment

159
00:05:37,520 --> 00:05:38,160
pipeline

160
00:05:38,160 --> 00:05:40,639
we had blue green deploy we had we had

161
00:05:40,639 --> 00:05:41,600
um

162
00:05:41,600 --> 00:05:44,800
all the things and so the development

163
00:05:44,800 --> 00:05:47,039
director proposed that we start

164
00:05:47,039 --> 00:05:49,520
deploying the production twice a week

165
00:05:49,520 --> 00:05:50,240
instead of just

166
00:05:50,240 --> 00:05:53,759
once a week and you know he pointed out

167
00:05:53,759 --> 00:05:55,759
the smaller changes

168
00:05:55,759 --> 00:05:58,240
meant less risk that's very true so

169
00:05:58,240 --> 00:05:58,880
lower

170
00:05:58,880 --> 00:06:01,759
risk of problems and regression failures

171
00:06:01,759 --> 00:06:03,680
but we were still struggling to fit in

172
00:06:03,680 --> 00:06:06,400
those manual testing activities

173
00:06:06,400 --> 00:06:09,520
so we still had like a manual regression

174
00:06:09,520 --> 00:06:11,280
checklist that we did every release

175
00:06:11,280 --> 00:06:13,440
and or every deploy and that doesn't

176
00:06:13,440 --> 00:06:15,120
really work when you're trying to deploy

177
00:06:15,120 --> 00:06:17,120
two times a week or even more times a

178
00:06:17,120 --> 00:06:17,919
week

179
00:06:17,919 --> 00:06:20,400
it's like oh how does how do you do that

180
00:06:20,400 --> 00:06:21,039
and

181
00:06:21,039 --> 00:06:24,080
we have a lot of challenges to overcome

182
00:06:24,080 --> 00:06:27,680
and so i was really feeling

183
00:06:27,680 --> 00:06:29,280
anxious about this and indeed we had a

184
00:06:29,280 --> 00:06:31,680
lot of struggles at first

185
00:06:31,680 --> 00:06:33,360
sometimes we couldn't release at all

186
00:06:33,360 --> 00:06:35,120
during the week much less twice a week

187
00:06:35,120 --> 00:06:35,759
because

188
00:06:35,759 --> 00:06:37,919
we were having a lot of problems and so

189
00:06:37,919 --> 00:06:39,440
i looked for

190
00:06:39,440 --> 00:06:40,880
things we could do to improve that

191
00:06:40,880 --> 00:06:43,280
situation we knew we had the manual

192
00:06:43,280 --> 00:06:44,479
testing activities

193
00:06:44,479 --> 00:06:45,680
we knew we wouldn't feel confident

194
00:06:45,680 --> 00:06:47,199
releasing without doing them but we

195
00:06:47,199 --> 00:06:48,400
weren't sure

196
00:06:48,400 --> 00:06:50,080
how that we weren't really thinking of

197
00:06:50,080 --> 00:06:53,680
them as part of our pipeline

198
00:06:54,880 --> 00:06:57,440
so one thing i learned from my co-author

199
00:06:57,440 --> 00:06:58,639
janet gregory is

200
00:06:58,639 --> 00:07:01,120
when you have a problem make it visible

201
00:07:01,120 --> 00:07:05,360
and talk together about it as a team

202
00:07:07,680 --> 00:07:11,440
so this is a

203
00:07:11,440 --> 00:07:14,240
example of a deployment pipeline doing

204
00:07:14,240 --> 00:07:16,400
continuous delivery

205
00:07:16,400 --> 00:07:19,280
and the stages in yellow are the manual

206
00:07:19,280 --> 00:07:20,479
ones the human

207
00:07:20,479 --> 00:07:24,319
the human centric ones and

208
00:07:24,319 --> 00:07:27,360
so doing those in line and if you're

209
00:07:27,360 --> 00:07:28,160
trying to do

210
00:07:28,160 --> 00:07:30,560
if you're trying to deliver multiple

211
00:07:30,560 --> 00:07:32,000
times a week or especially multiple

212
00:07:32,000 --> 00:07:33,120
times a day you

213
00:07:33,120 --> 00:07:35,039
obviously can't get those manual things

214
00:07:35,039 --> 00:07:37,280
done

215
00:07:37,280 --> 00:07:39,440
but i didn't really think about them as

216
00:07:39,440 --> 00:07:41,120
being a part of the pipeline until

217
00:07:41,120 --> 00:07:44,400
i sat down and actually visualize

218
00:07:44,400 --> 00:07:48,560
what our pipeline looks like so

219
00:07:48,560 --> 00:07:50,319
having these kind of visuals is really

220
00:07:50,319 --> 00:07:52,080
really helpful so somebody

221
00:07:52,080 --> 00:07:53,840
commits a change it's got to go through

222
00:07:53,840 --> 00:07:55,520
all these stages some of them are

223
00:07:55,520 --> 00:07:56,400
automated

224
00:07:56,400 --> 00:07:59,039
some of them aren't we need to be aware

225
00:07:59,039 --> 00:08:02,400
of what all those stages are

226
00:08:03,599 --> 00:08:06,160
and we know we can use things like

227
00:08:06,160 --> 00:08:07,919
release feature toggles

228
00:08:07,919 --> 00:08:10,160
and other techniques to take these

229
00:08:10,160 --> 00:08:12,080
manual testing activities and

230
00:08:12,080 --> 00:08:15,840
make them asynchronous and keep the new

231
00:08:15,840 --> 00:08:19,360
changes hidden in production turned off

232
00:08:19,360 --> 00:08:21,039
not let the user see it maybe expose

233
00:08:21,039 --> 00:08:23,919
them only to ourselves internally

234
00:08:23,919 --> 00:08:26,720
until we finish these other activities

235
00:08:26,720 --> 00:08:28,160
that take more time

236
00:08:28,160 --> 00:08:29,840
and feel confident to turn them on for

237
00:08:29,840 --> 00:08:31,280
everybody there are a lot of different

238
00:08:31,280 --> 00:08:32,799
techniques that you can

239
00:08:32,799 --> 00:08:35,120
use to do this canary lunches dark

240
00:08:35,120 --> 00:08:36,080
lunches

241
00:08:36,080 --> 00:08:39,679
um and so this made us conscious of yeah

242
00:08:39,679 --> 00:08:40,000
that's

243
00:08:40,000 --> 00:08:42,080
we we can use we're going to use feature

244
00:08:42,080 --> 00:08:43,760
flags and we're going to take these off

245
00:08:43,760 --> 00:08:47,120
offline and make a plan to make sure all

246
00:08:47,120 --> 00:08:49,279
these testing activities get done

247
00:08:49,279 --> 00:08:51,600
and know when we're ready to turn new

248
00:08:51,600 --> 00:08:53,120
changes in production on

249
00:08:53,120 --> 00:08:55,680
and just release when we feel confident

250
00:08:55,680 --> 00:08:57,680
about our code

251
00:08:57,680 --> 00:09:00,880
and so what does that mean

252
00:09:03,760 --> 00:09:05,920
so this is a thing i learned from from

253
00:09:05,920 --> 00:09:08,480
abby banker initially

254
00:09:08,480 --> 00:09:11,920
and abby

255
00:09:11,920 --> 00:09:14,880
made a card deck with all the potential

256
00:09:14,880 --> 00:09:16,880
stages she could think of for a pipeline

257
00:09:16,880 --> 00:09:19,279
static code analysis automated unit

258
00:09:19,279 --> 00:09:22,560
tests automated api tests deploying the

259
00:09:22,560 --> 00:09:24,080
test environments

260
00:09:24,080 --> 00:09:26,560
things that may be automated or manual

261
00:09:26,560 --> 00:09:27,680
and and

262
00:09:27,680 --> 00:09:29,920
honestly even if you didn't have

263
00:09:29,920 --> 00:09:31,600
anything automated you would still have

264
00:09:31,600 --> 00:09:32,800
a pipeline

265
00:09:32,800 --> 00:09:35,760
you still have steps or stages that any

266
00:09:35,760 --> 00:09:37,920
change in your code has to go through

267
00:09:37,920 --> 00:09:39,600
to make it out to production and get in

268
00:09:39,600 --> 00:09:41,279
front of customers

269
00:09:41,279 --> 00:09:44,000
and visualizing them using these kind of

270
00:09:44,000 --> 00:09:45,279
cards or now we would use

271
00:09:45,279 --> 00:09:49,040
online cards using some online

272
00:09:49,040 --> 00:09:51,600
collaboration tool like google jamboard

273
00:09:51,600 --> 00:09:52,880
or google draw or

274
00:09:52,880 --> 00:09:56,959
mirror or mural we've got lots of

275
00:09:56,959 --> 00:10:00,160
great online tools we can use for this

276
00:10:00,160 --> 00:10:03,680
visualize these different stages

277
00:10:03,680 --> 00:10:05,920
how do they look now how can we speed

278
00:10:05,920 --> 00:10:06,800
them up

279
00:10:06,800 --> 00:10:10,560
in particular for our testing activities

280
00:10:10,560 --> 00:10:12,560
how can we speed them up and because i

281
00:10:12,560 --> 00:10:16,160
talked about these manual test stages

282
00:10:16,160 --> 00:10:19,920
i think uh making the team aware of the

283
00:10:19,920 --> 00:10:21,839
manual test stages is the first step to

284
00:10:21,839 --> 00:10:23,120
solving the problem of

285
00:10:23,120 --> 00:10:24,399
how are we going to keep those from

286
00:10:24,399 --> 00:10:26,560
being bottlenecks what can we try

287
00:10:26,560 --> 00:10:28,480
what can we experiment with to remove

288
00:10:28,480 --> 00:10:29,600
those bottlenecks

289
00:10:29,600 --> 00:10:33,839
the answer may be

290
00:10:33,839 --> 00:10:35,760
hey we're not we're doing this manually

291
00:10:35,760 --> 00:10:37,120
now but it's actually something we could

292
00:10:37,120 --> 00:10:37,760
automate

293
00:10:37,760 --> 00:10:39,760
so let's automate it and then a lot of

294
00:10:39,760 --> 00:10:41,680
things aren't going to be automatable

295
00:10:41,680 --> 00:10:43,200
you can't automate all your exploratory

296
00:10:43,200 --> 00:10:43,760
testing

297
00:10:43,760 --> 00:10:45,200
you probably can't automate all your

298
00:10:45,200 --> 00:10:47,360
accessibility testing there

299
00:10:47,360 --> 00:10:50,079
um and and you can't do everything at

300
00:10:50,079 --> 00:10:51,600
once either so when you're first

301
00:10:51,600 --> 00:10:52,720
starting out with your deployment

302
00:10:52,720 --> 00:10:54,160
pipeline there may still be a lot of

303
00:10:54,160 --> 00:10:56,000
manual things so just look for where

304
00:10:56,000 --> 00:10:57,279
those bottlenecks are

305
00:10:57,279 --> 00:10:59,440
and think of experiments to try to get

306
00:10:59,440 --> 00:11:00,560
rid of them

307
00:11:00,560 --> 00:11:03,839
now this this activity of visualizing

308
00:11:03,839 --> 00:11:05,200
your pipeline

309
00:11:05,200 --> 00:11:07,120
it's a quick thing you can do this with

310
00:11:07,120 --> 00:11:08,320
your team

311
00:11:08,320 --> 00:11:11,040
in under an hour and get started with

312
00:11:11,040 --> 00:11:12,480
identifying bottlenecks and start

313
00:11:12,480 --> 00:11:13,360
working on those

314
00:11:13,360 --> 00:11:15,279
so it doesn't have to take a lot of time

315
00:11:15,279 --> 00:11:16,640
it's it's one of those small

316
00:11:16,640 --> 00:11:20,079
frugal experiments that you can try that

317
00:11:20,079 --> 00:11:22,320
um you know even if you find for some

318
00:11:22,320 --> 00:11:23,440
reason this doesn't help you

319
00:11:23,440 --> 00:11:25,839
you didn't waste a lot of time so i

320
00:11:25,839 --> 00:11:28,240
would urge you to give that a try

321
00:11:28,240 --> 00:11:32,240
and so look for the ways that you can

322
00:11:32,240 --> 00:11:34,320
identify first of all identify what are

323
00:11:34,320 --> 00:11:36,160
your manual test stages

324
00:11:36,160 --> 00:11:39,200
and then see how you can

325
00:11:39,200 --> 00:11:42,320
do different approaches such as

326
00:11:42,320 --> 00:11:44,720
using release feature toggles to keep

327
00:11:44,720 --> 00:11:46,000
them turned off in production

328
00:11:46,000 --> 00:11:48,720
until jury felt confident to turn them

329
00:11:48,720 --> 00:11:50,880
on

330
00:11:53,360 --> 00:11:56,399
now manual tests are an

331
00:11:56,399 --> 00:11:58,560
obvious bottleneck because we know it's

332
00:11:58,560 --> 00:12:00,160
like well we're releasing

333
00:12:00,160 --> 00:12:03,920
every day we're deploying every day um

334
00:12:03,920 --> 00:12:06,720
we can't do all of the automated

335
00:12:06,720 --> 00:12:08,399
exploration even if our changes are

336
00:12:08,399 --> 00:12:08,880
small

337
00:12:08,880 --> 00:12:10,800
it's probably going to take too long but

338
00:12:10,800 --> 00:12:12,320
there are other bottlenecks

339
00:12:12,320 --> 00:12:14,480
and those of you who've worked with

340
00:12:14,480 --> 00:12:15,920
automated tests for a while

341
00:12:15,920 --> 00:12:18,320
have probably experienced flaky tail

342
00:12:18,320 --> 00:12:20,079
degraded leaky tests

343
00:12:20,079 --> 00:12:21,600
so tests that fail and we're not sure

344
00:12:21,600 --> 00:12:23,279
why they failed maybe it was a timing

345
00:12:23,279 --> 00:12:23,680
issue

346
00:12:23,680 --> 00:12:26,079
maybe it really was i've i've been on

347
00:12:26,079 --> 00:12:26,880
teams where

348
00:12:26,880 --> 00:12:29,120
we flag tests as flaky which i think is

349
00:12:29,120 --> 00:12:30,560
a terrible thing to do but

350
00:12:30,560 --> 00:12:32,959
nevertheless we had done that and then

351
00:12:32,959 --> 00:12:34,800
when we took time to actually look into

352
00:12:34,800 --> 00:12:36,000
the flaky tests

353
00:12:36,000 --> 00:12:37,839
uh some of them were finding real

354
00:12:37,839 --> 00:12:39,040
production problems and it was just a

355
00:12:39,040 --> 00:12:42,079
timing issue that was hard to reproduce

356
00:12:42,079 --> 00:12:44,480
so be careful about that sometimes the

357
00:12:44,480 --> 00:12:47,120
feedback from the test is too slow

358
00:12:47,120 --> 00:12:49,920
so we really need to find ways to speed

359
00:12:49,920 --> 00:12:50,639
up

360
00:12:50,639 --> 00:12:52,720
the feedback from those tests or maybe

361
00:12:52,720 --> 00:12:53,839
refactor those tests

362
00:12:53,839 --> 00:12:57,120
maybe even delete some tests uh tests

363
00:12:57,120 --> 00:12:58,480
that we don't understand that aren't

364
00:12:58,480 --> 00:13:00,160
providing value

365
00:13:00,160 --> 00:13:03,200
may be better off without those tests

366
00:13:03,200 --> 00:13:05,519
sometimes tests maybe we've been running

367
00:13:05,519 --> 00:13:07,279
an automated test for five years and it

368
00:13:07,279 --> 00:13:09,279
never found a regression failure do we

369
00:13:09,279 --> 00:13:10,560
need to keep

370
00:13:10,560 --> 00:13:13,760
automating that i'm not sure so how can

371
00:13:13,760 --> 00:13:14,720
we

372
00:13:14,720 --> 00:13:17,440
go through all of our test suites and

373
00:13:17,440 --> 00:13:18,320
determine

374
00:13:18,320 --> 00:13:22,000
how to manage them so this is something

375
00:13:22,000 --> 00:13:23,040
i learned about

376
00:13:23,040 --> 00:13:27,360
from ashley hensberger and

377
00:13:28,079 --> 00:13:30,079
she has this available on github and

378
00:13:30,079 --> 00:13:32,079
this is something she used she works

379
00:13:32,079 --> 00:13:34,639
she works in a large development

380
00:13:34,639 --> 00:13:36,320
organization

381
00:13:36,320 --> 00:13:39,680
with web-based applications and um

382
00:13:39,680 --> 00:13:41,279
she came up with this test suite canvas

383
00:13:41,279 --> 00:13:43,279
it was inspired by katrina cookie's test

384
00:13:43,279 --> 00:13:45,040
suite canvas from katrina's excellent

385
00:13:45,040 --> 00:13:45,680
book

386
00:13:45,680 --> 00:13:48,720
a practical guide the testing and devops

387
00:13:48,720 --> 00:13:50,959
and the idea behind this is it's just a

388
00:13:50,959 --> 00:13:52,480
framework to help you have kind of a

389
00:13:52,480 --> 00:13:54,240
more structured conversation with your

390
00:13:54,240 --> 00:13:55,120
team

391
00:13:55,120 --> 00:13:58,240
about the different test suites

392
00:13:58,240 --> 00:14:01,440
that you have and i find it helpful to

393
00:14:01,440 --> 00:14:04,480
when i visualize that pipeline to

394
00:14:04,480 --> 00:14:06,399
make a note of what are the test suites

395
00:14:06,399 --> 00:14:08,160
and the test stages of those pipelines

396
00:14:08,160 --> 00:14:09,120
and talk about them

397
00:14:09,120 --> 00:14:12,399
talk about each suite one at a time or

398
00:14:12,399 --> 00:14:15,279
it could be that you have some tests you

399
00:14:15,279 --> 00:14:16,160
haven't automated

400
00:14:16,160 --> 00:14:18,399
and and you think you have a need for a

401
00:14:18,399 --> 00:14:20,000
particular automated test suite whether

402
00:14:20,000 --> 00:14:21,279
it's at the unit level

403
00:14:21,279 --> 00:14:25,600
api level or ui level um

404
00:14:25,600 --> 00:14:28,880
so i really like the questions on this

405
00:14:28,880 --> 00:14:30,000
test suite canvas that really

406
00:14:30,000 --> 00:14:31,519
gets you thinking first of all what's

407
00:14:31,519 --> 00:14:34,399
the purpose of the test

408
00:14:34,399 --> 00:14:36,560
well i was talking with a teammate of

409
00:14:36,560 --> 00:14:38,320
mine today and he noted that

410
00:14:38,320 --> 00:14:41,680
a lot of times when a test fails whoever

411
00:14:41,680 --> 00:14:43,440
goes to address that failure in the

412
00:14:43,440 --> 00:14:45,920
continuous integration

413
00:14:45,920 --> 00:14:47,440
doesn't necessarily take time to find

414
00:14:47,440 --> 00:14:48,880
out what was that test even trying to

415
00:14:48,880 --> 00:14:50,399
test they just want to make the test

416
00:14:50,399 --> 00:14:50,800
pass

417
00:14:50,800 --> 00:14:52,639
they just look at what happened and and

418
00:14:52,639 --> 00:14:55,199
do what they can to make that test pass

419
00:14:55,199 --> 00:14:58,000
especially if it's a flaky test but we

420
00:14:58,000 --> 00:14:58,720
really should

421
00:14:58,720 --> 00:15:00,480
be focusing on what's the purpose of the

422
00:15:00,480 --> 00:15:02,480
test is it a test we even need

423
00:15:02,480 --> 00:15:04,480
there's no reason to burden ourselves

424
00:15:04,480 --> 00:15:06,720
with unnecessary tests

425
00:15:06,720 --> 00:15:08,240
so what do we want to learn from this

426
00:15:08,240 --> 00:15:10,079
particular test suite

427
00:15:10,079 --> 00:15:12,959
what are the benefits who needs to know

428
00:15:12,959 --> 00:15:14,320
the results what are they going to do

429
00:15:14,320 --> 00:15:15,680
with those results

430
00:15:15,680 --> 00:15:17,519
so this these are things are important

431
00:15:17,519 --> 00:15:19,360
to talk about this

432
00:15:19,360 --> 00:15:21,040
i know this is really hard to read but

433
00:15:21,040 --> 00:15:22,639
um you can

434
00:15:22,639 --> 00:15:24,839
you can download it and and look at it

435
00:15:24,839 --> 00:15:27,040
yourself um

436
00:15:27,040 --> 00:15:30,959
and and i'm not going to go through each

437
00:15:30,959 --> 00:15:32,000
one of these because

438
00:15:32,000 --> 00:15:33,600
i'll check on my time here i don't have

439
00:15:33,600 --> 00:15:36,320
time uh but

440
00:15:36,320 --> 00:15:40,000
dependencies obviously what tools are

441
00:15:40,000 --> 00:15:42,480
there any external third-party tools or

442
00:15:42,480 --> 00:15:43,440
external systems

443
00:15:43,440 --> 00:15:46,320
your suites have to interact with

444
00:15:46,320 --> 00:15:47,440
constraints

445
00:15:47,440 --> 00:15:50,160
i think a lot of times a constraint can

446
00:15:50,160 --> 00:15:50,560
be

447
00:15:50,560 --> 00:15:53,759
even an emotional constraint or fear so

448
00:15:53,759 --> 00:15:55,759
maybe you have a particular especially

449
00:15:55,759 --> 00:15:57,519
with ui level tests i found this to be

450
00:15:57,519 --> 00:15:58,160
true

451
00:15:58,160 --> 00:16:00,560
the team tried to automate them before

452
00:16:00,560 --> 00:16:01,759
and

453
00:16:01,759 --> 00:16:03,199
something terrible happened they were

454
00:16:03,199 --> 00:16:05,360
very they took a lot of time to maintain

455
00:16:05,360 --> 00:16:06,720
and they took a lot of time to

456
00:16:06,720 --> 00:16:09,120
analyze when they failed and it's like

457
00:16:09,120 --> 00:16:10,560
we're kind of scared to try that again

458
00:16:10,560 --> 00:16:12,560
so that could be one of your constraints

459
00:16:12,560 --> 00:16:15,040
so thinking about what if it's going to

460
00:16:15,040 --> 00:16:16,399
be part of a pipeline how are you going

461
00:16:16,399 --> 00:16:17,839
to execute it

462
00:16:17,839 --> 00:16:20,079
are there any gates going into it or out

463
00:16:20,079 --> 00:16:21,199
of it

464
00:16:21,199 --> 00:16:25,759
test data that can be still be an issue

465
00:16:25,759 --> 00:16:27,360
you know we can generate test data that

466
00:16:27,360 --> 00:16:29,120
looks like production

467
00:16:29,120 --> 00:16:32,320
is it realistic enough or

468
00:16:32,320 --> 00:16:35,600
can we save time by using test doubles

469
00:16:35,600 --> 00:16:37,920
mocking out especially if we're testing

470
00:16:37,920 --> 00:16:38,959
with uh

471
00:16:38,959 --> 00:16:40,560
with third parties or external systems

472
00:16:40,560 --> 00:16:41,839
can we just mock that out we're just

473
00:16:41,839 --> 00:16:43,279
trying to test our code

474
00:16:43,279 --> 00:16:44,959
so think about how we can do that

475
00:16:44,959 --> 00:16:47,680
because it can speed the tests up

476
00:16:47,680 --> 00:16:49,279
now i think one of the most important

477
00:16:49,279 --> 00:16:51,199
things to talk about especially before

478
00:16:51,199 --> 00:16:51,680
you even

479
00:16:51,680 --> 00:16:53,519
implement an automated test suite into

480
00:16:53,519 --> 00:16:56,079
your ci pipeline is

481
00:16:56,079 --> 00:16:58,160
what is the engagement and failure

482
00:16:58,160 --> 00:16:59,120
response

483
00:16:59,120 --> 00:17:02,079
when that test fails how will we know

484
00:17:02,079 --> 00:17:02,800
and who

485
00:17:02,800 --> 00:17:04,480
will take responsibility for

486
00:17:04,480 --> 00:17:06,559
investigating it and making sure it gets

487
00:17:06,559 --> 00:17:07,599
fixed

488
00:17:07,599 --> 00:17:10,880
um i was on a team where

489
00:17:10,880 --> 00:17:14,160
we we had our

490
00:17:14,160 --> 00:17:16,319
our pipeline wired up so that if any

491
00:17:16,319 --> 00:17:18,000
test suite failed

492
00:17:18,000 --> 00:17:20,240
it would show up on the monitor and the

493
00:17:20,240 --> 00:17:21,599
dashboard

494
00:17:21,599 --> 00:17:24,079
there would see something in slack and

495
00:17:24,079 --> 00:17:26,000
yet people didn't see it because

496
00:17:26,000 --> 00:17:27,119
everybody on the team was pair

497
00:17:27,119 --> 00:17:28,400
programming and when you pair a program

498
00:17:28,400 --> 00:17:29,840
you don't necessarily notice anything

499
00:17:29,840 --> 00:17:31,360
else

500
00:17:31,360 --> 00:17:33,679
so we actually were had to actually

501
00:17:33,679 --> 00:17:35,360
think of an experiment to make sure we

502
00:17:35,360 --> 00:17:36,240
noticed

503
00:17:36,240 --> 00:17:37,760
failures and we actually hooked the

504
00:17:37,760 --> 00:17:40,320
build up to a flashing police light

505
00:17:40,320 --> 00:17:41,760
in the room i'm not sure what we would

506
00:17:41,760 --> 00:17:43,919
do now in remote i think in the

507
00:17:43,919 --> 00:17:46,080
now now that we're all working remotely

508
00:17:46,080 --> 00:17:47,679
maybe have something to pop up in

509
00:17:47,679 --> 00:17:49,360
everybody's ide

510
00:17:49,360 --> 00:17:51,360
to say oh the build fixed are you gonna

511
00:17:51,360 --> 00:17:52,559
be the one to fix it

512
00:17:52,559 --> 00:17:54,559
yeah click okay uh so there are

513
00:17:54,559 --> 00:17:56,240
different ways to alert the team

514
00:17:56,240 --> 00:17:57,840
i wouldn't do that ongoing but that

515
00:17:57,840 --> 00:17:59,520
might be something you have to do to

516
00:17:59,520 --> 00:18:01,600
to make it a habit but talk about it up

517
00:18:01,600 --> 00:18:04,160
front how is that going to work

518
00:18:04,160 --> 00:18:07,360
maintainability obviously a big

519
00:18:07,360 --> 00:18:09,360
cost custom maintainability is really

520
00:18:09,360 --> 00:18:10,880
important and you want

521
00:18:10,880 --> 00:18:12,640
less time maintaining things and more

522
00:18:12,640 --> 00:18:15,520
time for innovation

523
00:18:15,520 --> 00:18:18,160
so and how will we know this test suite

524
00:18:18,160 --> 00:18:20,080
is successful

525
00:18:20,080 --> 00:18:23,360
so going through this process

526
00:18:23,360 --> 00:18:25,679
talking about each of your test suites

527
00:18:25,679 --> 00:18:26,480
it's really

528
00:18:26,480 --> 00:18:29,520
helpful you can you can eliminate tests

529
00:18:29,520 --> 00:18:30,880
you may not need

530
00:18:30,880 --> 00:18:32,400
you can make tests more efficient or

531
00:18:32,400 --> 00:18:34,000
faster

532
00:18:34,000 --> 00:18:36,240
and and just make it a more smooth

533
00:18:36,240 --> 00:18:39,440
running process

534
00:18:41,600 --> 00:18:43,840
so

535
00:18:47,200 --> 00:18:49,600
get your team together use this test

536
00:18:49,600 --> 00:18:51,760
suite canvas download it from github

537
00:18:51,760 --> 00:18:54,160
and uh and have these conversations with

538
00:18:54,160 --> 00:18:56,080
your team about your test fees

539
00:18:56,080 --> 00:18:58,240
can you automate more of your manual

540
00:18:58,240 --> 00:19:00,240
tests can you get rid of any tests and

541
00:19:00,240 --> 00:19:01,440
again i'd really

542
00:19:01,440 --> 00:19:02,559
if you're afraid to get rid of your

543
00:19:02,559 --> 00:19:04,480
tests there's a lot of

544
00:19:04,480 --> 00:19:06,960
um aversion you know we're all kind of

545
00:19:06,960 --> 00:19:08,160
hoarders at heart

546
00:19:08,160 --> 00:19:10,799
it's like we maybe don't want to delete

547
00:19:10,799 --> 00:19:11,520
it but

548
00:19:11,520 --> 00:19:14,080
yeah put it in the garage turn the test

549
00:19:14,080 --> 00:19:16,880
off don't delete it yet

550
00:19:16,880 --> 00:19:18,720
uh see if anything happens over time did

551
00:19:18,720 --> 00:19:20,240
you really miss that test

552
00:19:20,240 --> 00:19:23,840
um so just that's nothing the minimum

553
00:19:23,840 --> 00:19:25,520
people minimum sounds like not enough

554
00:19:25,520 --> 00:19:26,480
but it's the minimum

555
00:19:26,480 --> 00:19:29,120
it's what you really really need and so

556
00:19:29,120 --> 00:19:32,480
keep your automated tests to a minimum

557
00:19:32,480 --> 00:19:35,600
and what you need to feel confident

558
00:19:35,600 --> 00:19:37,280
that your new changes didn't break any

559
00:19:37,280 --> 00:19:39,520
existing functionality

560
00:19:39,520 --> 00:19:40,880
automated regression tests don't

561
00:19:40,880 --> 00:19:42,559
generally find new bugs

562
00:19:42,559 --> 00:19:44,080
they can that's not really what they're

563
00:19:44,080 --> 00:19:45,679
designed to do but we're mainly making

564
00:19:45,679 --> 00:19:47,120
sure that our new changes didn't break

565
00:19:47,120 --> 00:19:48,480
something that our customers were

566
00:19:48,480 --> 00:19:51,200
already using and depending on

567
00:19:51,200 --> 00:19:54,559
so see what you can automate

568
00:19:55,440 --> 00:19:57,600
so we just need a lot of conversation

569
00:19:57,600 --> 00:20:00,160
this is my donkey marcella

570
00:20:00,160 --> 00:20:02,480
how do we fit testing activities into

571
00:20:02,480 --> 00:20:04,159
the idea of continuous delivery and

572
00:20:04,159 --> 00:20:05,360
deployment

573
00:20:05,360 --> 00:20:08,480
and keep our pipeline fast we really we

574
00:20:08,480 --> 00:20:11,520
need the ability to deploy to production

575
00:20:11,520 --> 00:20:12,720
quickly

576
00:20:12,720 --> 00:20:15,520
uh how can we do that and be confident

577
00:20:15,520 --> 00:20:16,559
about it

578
00:20:16,559 --> 00:20:19,280
i would just recommend it's getting your

579
00:20:19,280 --> 00:20:20,000
whole team together

580
00:20:20,000 --> 00:20:22,159
this is something that we need all the

581
00:20:22,159 --> 00:20:23,520
different specialties all the different

582
00:20:23,520 --> 00:20:24,880
expertise on the team

583
00:20:24,880 --> 00:20:26,720
to work together on try different

584
00:20:26,720 --> 00:20:28,960
experiments and see

585
00:20:28,960 --> 00:20:31,679
if we can shorten our feedback loops and

586
00:20:31,679 --> 00:20:33,679
improve our ability to get changes

587
00:20:33,679 --> 00:20:37,200
quickly and confidently into production

588
00:20:37,200 --> 00:20:41,120
um and i'll happy to share my slides i'm

589
00:20:41,120 --> 00:20:42,080
not sure how that's going over this

590
00:20:42,080 --> 00:20:43,440
conference but i'll for sure put them on

591
00:20:43,440 --> 00:20:44,960
slideshare or something like that

592
00:20:44,960 --> 00:20:47,520
and tweet where they are and put in the

593
00:20:47,520 --> 00:20:49,360
slack as well

594
00:20:49,360 --> 00:20:51,200
so these are a few of the resources that

595
00:20:51,200 --> 00:20:53,280
i refer to

596
00:20:53,280 --> 00:20:55,360
i don't think i mentioned accelerate but

597
00:20:55,360 --> 00:20:57,919
i just i just recommend that book

598
00:20:57,919 --> 00:20:59,760
every talk i do now because there's so

599
00:20:59,760 --> 00:21:01,679
much in it about

600
00:21:01,679 --> 00:21:03,120
practices with high performing teams and

601
00:21:03,120 --> 00:21:04,880
especially in relating

602
00:21:04,880 --> 00:21:07,760
to automated tests and that that needs

603
00:21:07,760 --> 00:21:08,320
to be

604
00:21:08,320 --> 00:21:10,559
something that developers own and have

605
00:21:10,559 --> 00:21:12,480
testers collaborate with them

606
00:21:12,480 --> 00:21:14,799
to create and also having testers on the

607
00:21:14,799 --> 00:21:17,360
team to do these manual test stages so

608
00:21:17,360 --> 00:21:19,200
that's actually discussed in the test

609
00:21:19,200 --> 00:21:20,720
automation chapter in the accelerate

610
00:21:20,720 --> 00:21:22,000
book as well

611
00:21:22,000 --> 00:21:25,200
so um those are

612
00:21:25,200 --> 00:21:28,080
those are my resources and now i welcome

613
00:21:28,080 --> 00:21:29,679
questions so i'm gonna go

614
00:21:29,679 --> 00:21:31,760
see if i can go back here and unshare my

615
00:21:31,760 --> 00:21:33,600
screen

616
00:21:33,600 --> 00:21:36,320
stop screen

617
00:21:38,159 --> 00:21:40,640
all right

618
00:21:41,760 --> 00:21:46,000
okay so so we have here

619
00:21:46,000 --> 00:21:48,159
one we have a couple of questions here

620
00:21:48,159 --> 00:21:49,200
and

621
00:21:49,200 --> 00:21:52,159
queued up so one of them is what do you

622
00:21:52,159 --> 00:21:53,120
think about

623
00:21:53,120 --> 00:21:56,159
website snapshot testing to catch

624
00:21:56,159 --> 00:21:58,640
individual changes you know are there

625
00:21:58,640 --> 00:22:00,000
specific tools you

626
00:22:00,000 --> 00:22:03,919
you can recommend um you know there are

627
00:22:03,919 --> 00:22:04,960
a whole bunch of

628
00:22:04,960 --> 00:22:06,720
tools out here and this is where machine

629
00:22:06,720 --> 00:22:08,720
learning has really

630
00:22:08,720 --> 00:22:13,280
uh shown advantages to help us because i

631
00:22:13,280 --> 00:22:15,039
you know a few years ago we had some

632
00:22:15,039 --> 00:22:17,039
visual diffing tools that

633
00:22:17,039 --> 00:22:18,240
we thought were great because it was

634
00:22:18,240 --> 00:22:19,919
better than staring at it by yourself

635
00:22:19,919 --> 00:22:20,799
and trying to

636
00:22:20,799 --> 00:22:22,960
look at two things side by side and see

637
00:22:22,960 --> 00:22:24,960
if you could swat changes

638
00:22:24,960 --> 00:22:26,640
but that still required a lot of human

639
00:22:26,640 --> 00:22:27,919
interaction this is something that's

640
00:22:27,919 --> 00:22:29,520
much better for machines to do so the

641
00:22:29,520 --> 00:22:30,960
machine learning tools

642
00:22:30,960 --> 00:22:34,720
or the the the you can train them

643
00:22:34,720 --> 00:22:37,840
the the tool to know

644
00:22:37,840 --> 00:22:41,039
what parts of your web page are pretty

645
00:22:41,039 --> 00:22:42,720
static and should never change so that

646
00:22:42,720 --> 00:22:44,080
you should be alerted if something does

647
00:22:44,080 --> 00:22:44,480
change

648
00:22:44,480 --> 00:22:46,000
and what parts are dynamic and we know

649
00:22:46,000 --> 00:22:46,960
those are going to change all the time

650
00:22:46,960 --> 00:22:48,080
don't look at them

651
00:22:48,080 --> 00:22:51,919
so um off the top of my head

652
00:22:51,919 --> 00:22:55,760
apple tools is is one mabel has a visual

653
00:22:55,760 --> 00:22:57,760
checking aspect to it i think maybe test

654
00:22:57,760 --> 00:22:58,320
im

655
00:22:58,320 --> 00:23:01,919
does as well um

656
00:23:01,919 --> 00:23:03,440
yeah there are a whole bunch of other

657
00:23:03,440 --> 00:23:05,440
testing tools and and probably too

658
00:23:05,440 --> 00:23:06,880
numerous to mention

659
00:23:06,880 --> 00:23:10,480
and and i would just say give them all a

660
00:23:10,480 --> 00:23:12,799
try see what works in your context but

661
00:23:12,799 --> 00:23:14,480
i think the ones that use machine

662
00:23:14,480 --> 00:23:15,919
learning um

663
00:23:15,919 --> 00:23:18,480
i think those have a big advantage got

664
00:23:18,480 --> 00:23:19,919
you

665
00:23:19,919 --> 00:23:23,840
okay let me check the other one

666
00:23:28,559 --> 00:23:33,200
so the other one is uh could you

667
00:23:33,200 --> 00:23:37,520
there we go here could you advise

668
00:23:37,520 --> 00:23:40,639
uh let's see here

669
00:23:42,080 --> 00:23:44,400
there we go that keeps showing me the

670
00:23:44,400 --> 00:23:45,440
same question

671
00:23:45,440 --> 00:23:48,559
yeah i know it seems to be coming here

672
00:23:48,559 --> 00:23:50,080
we go

673
00:23:50,080 --> 00:23:52,480
technology it's a blessing and a curse i

674
00:23:52,480 --> 00:23:54,720
know

675
00:23:56,240 --> 00:23:58,720
let's see if this one shows up uh could

676
00:23:58,720 --> 00:24:00,400
you advise

677
00:24:00,400 --> 00:24:03,440
uh thinking somebody's here clicking

678
00:24:03,440 --> 00:24:06,640
let me see could you advise us some

679
00:24:06,640 --> 00:24:07,760
actually that's the one you just

680
00:24:07,760 --> 00:24:09,919
answered right yeah uh

681
00:24:09,919 --> 00:24:12,400
what do you think about well not that's

682
00:24:12,400 --> 00:24:13,919
the one you just answered the one the

683
00:24:13,919 --> 00:24:14,640
one that's

684
00:24:14,640 --> 00:24:17,039
uh there the second one is do you advise

685
00:24:17,039 --> 00:24:18,240
some some

686
00:24:18,240 --> 00:24:23,120
tools look

687
00:24:28,640 --> 00:24:30,880
let me see here those two were the same

688
00:24:30,880 --> 00:24:32,400
the the other one is

689
00:24:32,400 --> 00:24:35,840
if manual tests uh run manually

690
00:24:35,840 --> 00:24:39,039
what frequency uh are they running

691
00:24:39,039 --> 00:24:42,720
and does every commit have manual tests

692
00:24:42,720 --> 00:24:46,000
run on do manual tests

693
00:24:46,000 --> 00:24:49,039
run on batch commits

694
00:24:49,039 --> 00:24:52,080
yeah that's uh that's really

695
00:24:52,080 --> 00:24:54,960
pretty context dependent that's what

696
00:24:54,960 --> 00:24:57,440
what your team is actually doing

697
00:24:57,440 --> 00:24:59,440
um you know obviously if you don't have

698
00:24:59,440 --> 00:25:00,880
a lot of regression tests

699
00:25:00,880 --> 00:25:03,679
automated uh you might have to do a lot

700
00:25:03,679 --> 00:25:04,960
of manual testing

701
00:25:04,960 --> 00:25:08,159
um and and

702
00:25:08,159 --> 00:25:11,919
um going back to modern tools and tools

703
00:25:11,919 --> 00:25:13,200
using machine learning and

704
00:25:13,200 --> 00:25:16,559
heuristics that are available to us now

705
00:25:16,559 --> 00:25:19,120
you know the holy grail to me is a test

706
00:25:19,120 --> 00:25:19,840
tool that will

707
00:25:19,840 --> 00:25:22,159
that will tell us which tests to run

708
00:25:22,159 --> 00:25:24,400
based on what was changed in the code

709
00:25:24,400 --> 00:25:26,720
so i think there might even be tools out

710
00:25:26,720 --> 00:25:28,240
there doing that now

711
00:25:28,240 --> 00:25:31,200
but in general i can tell you what what

712
00:25:31,200 --> 00:25:32,799
my teams have done so for example one

713
00:25:32,799 --> 00:25:34,640
team i was on

714
00:25:34,640 --> 00:25:36,480
we needed to do a lot of exploratory

715
00:25:36,480 --> 00:25:38,320
testing because we had a single page

716
00:25:38,320 --> 00:25:40,960
application javascript application that

717
00:25:40,960 --> 00:25:43,440
was had a lot of concurrent

718
00:25:43,440 --> 00:25:46,480
users and was really complex

719
00:25:46,480 --> 00:25:48,799
and we had thousands and thousands of

720
00:25:48,799 --> 00:25:50,080
automated tests

721
00:25:50,080 --> 00:25:52,080
but one little change could have

722
00:25:52,080 --> 00:25:53,760
unexpected impact so we had to do a lot

723
00:25:53,760 --> 00:25:56,000
of exploratory testing so

724
00:25:56,000 --> 00:25:58,799
a lot of trying scenarios as different

725
00:25:58,799 --> 00:26:00,880
user personas

726
00:26:00,880 --> 00:26:02,640
trying to trying to do lateral thinking

727
00:26:02,640 --> 00:26:05,200
on how how might our customers use this

728
00:26:05,200 --> 00:26:06,640
product looking at patterns of

729
00:26:06,640 --> 00:26:08,559
production usage and trying to

730
00:26:08,559 --> 00:26:11,200
replicate those so what we would do is

731
00:26:11,200 --> 00:26:12,559
at the story level

732
00:26:12,559 --> 00:26:15,520
as the developer pair worked on a story

733
00:26:15,520 --> 00:26:17,520
they would automate tests at every level

734
00:26:17,520 --> 00:26:18,640
unit api

735
00:26:18,640 --> 00:26:20,880
and ui level and then when they thought

736
00:26:20,880 --> 00:26:22,320
they were all done with the production

737
00:26:22,320 --> 00:26:23,120
code and the

738
00:26:23,120 --> 00:26:25,360
automated test code then they would do

739
00:26:25,360 --> 00:26:28,080
exploratory testing just on that story

740
00:26:28,080 --> 00:26:30,880
and then as we completed more stories

741
00:26:30,880 --> 00:26:31,360
for

742
00:26:31,360 --> 00:26:34,159
an epic or feature level then we had

743
00:26:34,159 --> 00:26:35,760
exploratory testing charters that were

744
00:26:35,760 --> 00:26:38,559
more end to end across the whole feature

745
00:26:38,559 --> 00:26:40,640
and then everybody in the team could

746
00:26:40,640 --> 00:26:43,360
collaborate to do that so at that point

747
00:26:43,360 --> 00:26:45,360
by then we had probably deployed the

748
00:26:45,360 --> 00:26:46,960
feature to production but it was turned

749
00:26:46,960 --> 00:26:48,400
off with the feature flag

750
00:26:48,400 --> 00:26:49,760
and then everybody joined in and did

751
00:26:49,760 --> 00:26:51,440
that exploratory testing

752
00:26:51,440 --> 00:26:54,080
and then when we felt good about that or

753
00:26:54,080 --> 00:26:55,840
sometimes we get together

754
00:26:55,840 --> 00:26:57,919
and do kind of a bug bash type test

755
00:26:57,919 --> 00:26:59,279
several people

756
00:26:59,279 --> 00:27:01,679
uh working doing charters or doing ad

757
00:27:01,679 --> 00:27:02,880
hoc testing

758
00:27:02,880 --> 00:27:05,760
on the new feature and then okay we feel

759
00:27:05,760 --> 00:27:06,320
confident

760
00:27:06,320 --> 00:27:08,480
let's turn it on of course we could also

761
00:27:08,480 --> 00:27:10,000
turn it back off real quick if anything

762
00:27:10,000 --> 00:27:11,200
really terrible happens so there are a

763
00:27:11,200 --> 00:27:13,120
lot of safeguards you can put in and

764
00:27:13,120 --> 00:27:15,360
we know that today's systems are so

765
00:27:15,360 --> 00:27:16,799
complex

766
00:27:16,799 --> 00:27:18,399
right and essentially distributed

767
00:27:18,399 --> 00:27:20,480
systems we're not going to be able to

768
00:27:20,480 --> 00:27:21,840
test everything we're not going to be

769
00:27:21,840 --> 00:27:22,880
able to reproduce

770
00:27:22,880 --> 00:27:24,720
in a production environment in our test

771
00:27:24,720 --> 00:27:26,399
environment so we also have to be

772
00:27:26,399 --> 00:27:28,640
prepared to have instrumented our code

773
00:27:28,640 --> 00:27:29,279
well

774
00:27:29,279 --> 00:27:31,760
have good observability and be watching

775
00:27:31,760 --> 00:27:33,360
what happens in production so we can

776
00:27:33,360 --> 00:27:35,520
respond quickly to any problems but

777
00:27:35,520 --> 00:27:37,679
again to respond quickly we need a fast

778
00:27:37,679 --> 00:27:39,279
pipeline we need for things to get

779
00:27:39,279 --> 00:27:40,720
through the pipeline quickly

780
00:27:40,720 --> 00:27:42,480
so we need that ability so we really

781
00:27:42,480 --> 00:27:44,159
want to make sure that we minimize

782
00:27:44,159 --> 00:27:47,679
any kind of bottlenecks gotcha

783
00:27:47,679 --> 00:27:49,840
well

784
00:27:58,080 --> 00:28:01,360
that's like abstract correct i i miss

785
00:28:01,360 --> 00:28:02,320
that

786
00:28:02,320 --> 00:28:05,039
sorry oh that that they don't there's

787
00:28:05,039 --> 00:28:06,559
wait there's one more question just

788
00:28:06,559 --> 00:28:07,919
popped in real quick

789
00:28:07,919 --> 00:28:10,799
uh what remote tools can be used to

790
00:28:10,799 --> 00:28:13,360
visualize a pipeline in a team

791
00:28:13,360 --> 00:28:15,200
and you know i think you could do it

792
00:28:15,200 --> 00:28:17,440
like with google jamboard because it has

793
00:28:17,440 --> 00:28:18,960
anything that kind of simulates sticky

794
00:28:18,960 --> 00:28:21,440
notes you could even do it with

795
00:28:21,440 --> 00:28:24,080
you could do it with a google slides so

796
00:28:24,080 --> 00:28:26,000
you could take a google slide

797
00:28:26,000 --> 00:28:29,279
and pre-populate it with a bunch of

798
00:28:29,279 --> 00:28:32,080
text boxes and then each text box could

799
00:28:32,080 --> 00:28:32,559
be

800
00:28:32,559 --> 00:28:36,480
or rectangle could be as a

801
00:28:36,480 --> 00:28:39,039
pipeline stage and then drag those

802
00:28:39,039 --> 00:28:39,520
around

803
00:28:39,520 --> 00:28:40,799
on your slide you can do this

804
00:28:40,799 --> 00:28:42,640
collaboratively we did something like

805
00:28:42,640 --> 00:28:44,080
this on my team last week

806
00:28:44,080 --> 00:28:45,679
and and then you can lay out your

807
00:28:45,679 --> 00:28:48,000
pipeline in a google slide

808
00:28:48,000 --> 00:28:49,679
so there are a lot of creative ways we

809
00:28:49,679 --> 00:28:51,200
can do this online

810
00:28:51,200 --> 00:28:54,240
and and i think it's good i think when

811
00:28:54,240 --> 00:28:55,279
we can get online

812
00:28:55,279 --> 00:28:58,640
and draw and type and drag things around

813
00:28:58,640 --> 00:28:59,520
together

814
00:28:59,520 --> 00:29:01,039
i think that's going to help our brains

815
00:29:01,039 --> 00:29:04,000
work better gotcha

816
00:29:04,000 --> 00:29:06,000
though i was saying earlier that that

817
00:29:06,000 --> 00:29:07,760
you're are you going to stick around in

818
00:29:07,760 --> 00:29:09,520
the devsecops track

819
00:29:09,520 --> 00:29:12,080
sure yeah yeah answer any questions if

820
00:29:12,080 --> 00:29:13,360
anybody has any

821
00:29:13,360 --> 00:29:15,279
i'd be happy to do that and i'll be i'll

822
00:29:15,279 --> 00:29:17,120
be i'll be watching i did i had a couple

823
00:29:17,120 --> 00:29:18,240
of work meetings this morning so i

824
00:29:18,240 --> 00:29:19,360
missed some of the conference and then i

825
00:29:19,360 --> 00:29:20,000
did another

826
00:29:20,000 --> 00:29:21,919
i did another talk for a meet up in

827
00:29:21,919 --> 00:29:24,320
ireland earlier too so i've had a busy

828
00:29:24,320 --> 00:29:24,799
day

829
00:29:24,799 --> 00:29:26,159
so now i'm looking forward to seeing

830
00:29:26,159 --> 00:29:28,640
more of these awesome talks sounds great

831
00:29:28,640 --> 00:29:30,559
well thank you for joining us thanks

832
00:29:30,559 --> 00:29:34,879
everybody take care

