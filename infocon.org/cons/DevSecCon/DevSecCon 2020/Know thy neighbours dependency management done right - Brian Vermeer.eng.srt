1
00:00:00,160 --> 00:00:02,480
yeah i'm going to talk about

2
00:00:02,480 --> 00:00:03,679
dependencies

3
00:00:03,679 --> 00:00:05,759
and that you need to know about your

4
00:00:05,759 --> 00:00:07,440
dependencies because

5
00:00:07,440 --> 00:00:11,040
as we are working with java

6
00:00:11,040 --> 00:00:13,040
application if you have questions please

7
00:00:13,040 --> 00:00:14,719
put them in the java track

8
00:00:14,719 --> 00:00:16,720
and uh i will try to answer them if we

9
00:00:16,720 --> 00:00:18,160
have enough time because we're already

10
00:00:18,160 --> 00:00:19,359
running a little late

11
00:00:19,359 --> 00:00:20,800
we're going to talk about dependencies

12
00:00:20,800 --> 00:00:23,439
today um as

13
00:00:23,439 --> 00:00:26,320
because we think uh about dependencies a

14
00:00:26,320 --> 00:00:26,880
little

15
00:00:26,880 --> 00:00:29,920
a bit lightly we treat our code our own

16
00:00:29,920 --> 00:00:30,320
code

17
00:00:30,320 --> 00:00:33,280
very specific if we look at it and we

18
00:00:33,280 --> 00:00:34,719
make it maintainable

19
00:00:34,719 --> 00:00:37,520
and and scalable but most of the times

20
00:00:37,520 --> 00:00:39,600
the dependencies are not that much

21
00:00:39,600 --> 00:00:42,399
a concern which is not a good case in my

22
00:00:42,399 --> 00:00:43,360
opinion

23
00:00:43,360 --> 00:00:46,160
so first of all you probably have seen

24
00:00:46,160 --> 00:00:47,280
me already on this

25
00:00:47,280 --> 00:00:49,280
stream a lot because i'm here for a few

26
00:00:49,280 --> 00:00:50,559
hours but i'm brian

27
00:00:50,559 --> 00:00:52,960
i am a java developer and a currently a

28
00:00:52,960 --> 00:00:54,320
developer advocate for sneak

29
00:00:54,320 --> 00:00:57,039
i do some work for community so i

30
00:00:57,039 --> 00:00:57,680
co-host

31
00:00:57,680 --> 00:01:00,399
co-run the virtual jack yeah java user

32
00:01:00,399 --> 00:01:02,160
group and the utrecht java user group

33
00:01:02,160 --> 00:01:04,319
and i am one of the co-leaders of the my

34
00:01:04,319 --> 00:01:05,680
devsecops

35
00:01:05,680 --> 00:01:08,880
uh virtual group which focuses on

36
00:01:08,880 --> 00:01:10,400
application secure application

37
00:01:10,400 --> 00:01:12,640
development and

38
00:01:12,640 --> 00:01:14,479
yeah appszack in general well let's

39
00:01:14,479 --> 00:01:15,840
continue because this is the most boring

40
00:01:15,840 --> 00:01:16,560
slide ever

41
00:01:16,560 --> 00:01:20,159
right dependencies why do we need to

42
00:01:20,159 --> 00:01:21,439
talk about dependencies

43
00:01:21,439 --> 00:01:24,080
well if you think about it like you

44
00:01:24,080 --> 00:01:25,439
treat your code

45
00:01:25,439 --> 00:01:28,240
very good i hope you have unit tests to

46
00:01:28,240 --> 00:01:29,520
test your own code

47
00:01:29,520 --> 00:01:32,400
we have things like well say code

48
00:01:32,400 --> 00:01:33,759
reviews in place

49
00:01:33,759 --> 00:01:36,159
or things like pair programming so we

50
00:01:36,159 --> 00:01:37,200
make our code

51
00:01:37,200 --> 00:01:40,000
as good as possible but if we look at

52
00:01:40,000 --> 00:01:42,000
the binary you put into production

53
00:01:42,000 --> 00:01:43,759
say this is the big yellow ball is that

54
00:01:43,759 --> 00:01:46,079
binary that you put into production

55
00:01:46,079 --> 00:01:48,079
if we compare that to the code that you

56
00:01:48,079 --> 00:01:49,439
actually wrote

57
00:01:49,439 --> 00:01:52,000
it's probably more or less like this or

58
00:01:52,000 --> 00:01:52,799
maybe even

59
00:01:52,799 --> 00:01:56,320
smaller because we depend a lot if in

60
00:01:56,320 --> 00:01:58,479
if you do java development but it also

61
00:01:58,479 --> 00:01:59,439
accounts for

62
00:01:59,439 --> 00:02:01,520
kotlin development npm development or

63
00:02:01,520 --> 00:02:02,880
whatever we call we

64
00:02:02,880 --> 00:02:06,719
we depend a lot on third-party

65
00:02:06,719 --> 00:02:09,360
frameworks and libraries and that's good

66
00:02:09,360 --> 00:02:11,599
because they do the heavy lifting for us

67
00:02:11,599 --> 00:02:13,920
so depending on them is for a good cost

68
00:02:13,920 --> 00:02:15,440
because we want to focus on business

69
00:02:15,440 --> 00:02:16,400
value

70
00:02:16,400 --> 00:02:19,040
however if we focus a lot on that blue

71
00:02:19,040 --> 00:02:19,680
dot

72
00:02:19,680 --> 00:02:22,720
and our own code on how good it is and

73
00:02:22,720 --> 00:02:25,680
we forget about the big yellow part

74
00:02:25,680 --> 00:02:29,760
is that fair let me give you an example

75
00:02:29,760 --> 00:02:31,760
so we have a spring serverless example

76
00:02:31,760 --> 00:02:33,200
here over here and this is a code

77
00:02:33,200 --> 00:02:35,560
snippet but the total code snippet was

78
00:02:35,560 --> 00:02:37,680
222 lines of code

79
00:02:37,680 --> 00:02:41,120
right kind of okay it was a demo

80
00:02:41,120 --> 00:02:43,440
application but still

81
00:02:43,440 --> 00:02:45,920
it had five direct dependencies and as

82
00:02:45,920 --> 00:02:47,440
we know dependencies bring in

83
00:02:47,440 --> 00:02:49,360
dependencies bringing in dependencies

84
00:02:49,360 --> 00:02:51,840
bringing in more dependencies right and

85
00:02:51,840 --> 00:02:52,879
it's spring

86
00:02:52,879 --> 00:02:54,800
so we don't know actually what we do

87
00:02:54,800 --> 00:02:55,920
because we bring a

88
00:02:55,920 --> 00:02:59,040
certain spring boot starter in

89
00:02:59,040 --> 00:03:02,080
in total is about 54 dependencies

90
00:03:02,080 --> 00:03:04,239
but the the amount of code you actually

91
00:03:04,239 --> 00:03:06,000
put into that binary

92
00:03:06,000 --> 00:03:09,840
is massive almost

93
00:03:09,840 --> 00:03:14,000
500 000 lines of code so basically

94
00:03:14,000 --> 00:03:16,159
the ratio is just one percent is less

95
00:03:16,159 --> 00:03:18,640
than one percent is your own code right

96
00:03:18,640 --> 00:03:20,239
so we do have to take care of these

97
00:03:20,239 --> 00:03:23,920
dependencies and how are you doing this

98
00:03:23,920 --> 00:03:27,280
well first we need to take care of how

99
00:03:27,280 --> 00:03:29,599
we choose our dependencies right

100
00:03:29,599 --> 00:03:32,400
i mean if we do it the right way let's

101
00:03:32,400 --> 00:03:34,239
look at how we pick our dependencies and

102
00:03:34,239 --> 00:03:35,360
how we

103
00:03:35,360 --> 00:03:38,000
choose the right one for the right job

104
00:03:38,000 --> 00:03:38,959
and that's the first

105
00:03:38,959 --> 00:03:41,440
thing already how can you see that a

106
00:03:41,440 --> 00:03:42,159
package

107
00:03:42,159 --> 00:03:43,920
that you depend on because that is a

108
00:03:43,920 --> 00:03:46,000
dependency is the right package

109
00:03:46,000 --> 00:03:49,440
for you well first of all it needs to

110
00:03:49,440 --> 00:03:51,120
solve the problem because you're trying

111
00:03:51,120 --> 00:03:52,000
to solve a problem

112
00:03:52,000 --> 00:03:55,040
with software in general but does the

113
00:03:55,040 --> 00:03:56,560
package that you import

114
00:03:56,560 --> 00:03:58,560
solves your problem or solves your

115
00:03:58,560 --> 00:04:00,400
problem only half

116
00:04:00,400 --> 00:04:02,480
or so actually does not solve your

117
00:04:02,480 --> 00:04:04,480
problem but just helps you a little

118
00:04:04,480 --> 00:04:07,280
so is it actually contributing to the

119
00:04:07,280 --> 00:04:09,519
features you want to make

120
00:04:09,519 --> 00:04:13,040
and that seems obvious but if not always

121
00:04:13,040 --> 00:04:13,680
is

122
00:04:13,680 --> 00:04:17,519
trust me then we come to the second one

123
00:04:17,519 --> 00:04:19,680
that is do i actually need that package

124
00:04:19,680 --> 00:04:22,960
for instance if i am a java developer

125
00:04:22,960 --> 00:04:24,160
and i'm working

126
00:04:24,160 --> 00:04:25,759
and i need to do to do some string

127
00:04:25,759 --> 00:04:28,800
manipulation and i'm using the string

128
00:04:28,800 --> 00:04:32,400
utils from apache common you actually

129
00:04:32,400 --> 00:04:34,320
need to import the whole apache

130
00:04:34,320 --> 00:04:37,440
common slang 3 library and i just want

131
00:04:37,440 --> 00:04:38,479
to use two

132
00:04:38,479 --> 00:04:41,440
functions in that library is that good

133
00:04:41,440 --> 00:04:41,840
enough

134
00:04:41,840 --> 00:04:44,720
reason or was it is it easy enough to do

135
00:04:44,720 --> 00:04:46,320
that string manipulation yourself at

136
00:04:46,320 --> 00:04:47,919
that point

137
00:04:47,919 --> 00:04:51,360
think about it okay so you have found a

138
00:04:51,360 --> 00:04:53,520
package that does the job for you

139
00:04:53,520 --> 00:04:55,840
then we need to see if that package is

140
00:04:55,840 --> 00:04:57,840
still good right

141
00:04:57,840 --> 00:04:59,680
and finding it on stack overflow with a

142
00:04:59,680 --> 00:05:01,600
code example is not a good reason to do

143
00:05:01,600 --> 00:05:02,320
so

144
00:05:02,320 --> 00:05:06,240
trust me i fell for that trap once

145
00:05:06,240 --> 00:05:10,720
or twice anyway we need to check if that

146
00:05:10,720 --> 00:05:13,440
dependency that package is still healthy

147
00:05:13,440 --> 00:05:13,840
so

148
00:05:13,840 --> 00:05:15,919
for instance how many contributors are

149
00:05:15,919 --> 00:05:17,440
there is it actively

150
00:05:17,440 --> 00:05:19,440
is it actively maintained are there

151
00:05:19,440 --> 00:05:21,199
newer versions out or is it actually

152
00:05:21,199 --> 00:05:23,680
already end of life one example if you

153
00:05:23,680 --> 00:05:25,840
want to do circuit breaking

154
00:05:25,840 --> 00:05:28,960
in java rest applications

155
00:05:28,960 --> 00:05:30,479
don't go for hysterics anymore because

156
00:05:30,479 --> 00:05:32,560
that is end of life although there are a

157
00:05:32,560 --> 00:05:35,600
bunch of examples on the internet maybe

158
00:05:35,600 --> 00:05:37,600
you need to try another another library

159
00:05:37,600 --> 00:05:38,639
that is

160
00:05:38,639 --> 00:05:40,240
still maintained and not end of life and

161
00:05:40,240 --> 00:05:42,400
still actively contributed to

162
00:05:42,400 --> 00:05:44,560
so say we have an example like here i'm

163
00:05:44,560 --> 00:05:46,160
having an example of the eclipse

164
00:05:46,160 --> 00:05:47,440
collections library

165
00:05:47,440 --> 00:05:49,440
i'm an active contributor to that so yes

166
00:05:49,440 --> 00:05:50,960
i'm doing some

167
00:05:50,960 --> 00:05:53,600
some advertisement on this open source

168
00:05:53,600 --> 00:05:54,240
library

169
00:05:54,240 --> 00:05:56,240
anyway as you can see over here and i'm

170
00:05:56,240 --> 00:05:58,160
looking at the maven repository view

171
00:05:58,160 --> 00:06:00,560
you see that this package is actively

172
00:06:00,560 --> 00:06:01,280
maintained

173
00:06:01,280 --> 00:06:03,319
the last version that came out was

174
00:06:03,319 --> 00:06:04,560
10.2.0

175
00:06:04,560 --> 00:06:08,319
and it was released in february 2020.

176
00:06:08,319 --> 00:06:10,479
fair enough last to buy one before was

177
00:06:10,479 --> 00:06:12,000
in january 2020 so

178
00:06:12,000 --> 00:06:14,639
actively you see that there are there is

179
00:06:14,639 --> 00:06:15,759
a cadence in that release

180
00:06:15,759 --> 00:06:18,240
every year there are a couple releases

181
00:06:18,240 --> 00:06:20,319
of this package so

182
00:06:20,319 --> 00:06:24,000
that seems legit right people are

183
00:06:24,000 --> 00:06:25,600
still releasing it people are still

184
00:06:25,600 --> 00:06:27,520
working on it so the next step what i

185
00:06:27,520 --> 00:06:28,800
normally do or what you normally shoot

186
00:06:28,800 --> 00:06:30,479
is like look for instance at the get up

187
00:06:30,479 --> 00:06:31,440
repo

188
00:06:31,440 --> 00:06:32,880
and if i look at the getter people i can

189
00:06:32,880 --> 00:06:34,479
get a bunch of stuff out of this

190
00:06:34,479 --> 00:06:36,800
this was a screenshot from yesterday

191
00:06:36,800 --> 00:06:38,080
from that same eclipse collections

192
00:06:38,080 --> 00:06:38,639
library

193
00:06:38,639 --> 00:06:40,240
and as you can see it's actively

194
00:06:40,240 --> 00:06:41,919
maintained the last

195
00:06:41,919 --> 00:06:44,560
um commit was 11 hours ago well

196
00:06:44,560 --> 00:06:46,639
yesterday 11 hours so a day and 11 hours

197
00:06:46,639 --> 00:06:47,600
ago

198
00:06:47,600 --> 00:06:49,039
and but you see there are a bunch of

199
00:06:49,039 --> 00:06:50,639
contributors on it so it's actively

200
00:06:50,639 --> 00:06:51,759
maintained

201
00:06:51,759 --> 00:06:54,319
um that it has a bunch of stars in the

202
00:06:54,319 --> 00:06:55,039
top you see

203
00:06:55,039 --> 00:06:57,199
1.4 k of stars so people like that

204
00:06:57,199 --> 00:06:58,880
library people are actively using

205
00:06:58,880 --> 00:07:00,880
library people are actively maintaining

206
00:07:00,880 --> 00:07:02,880
that library but what you also can do

207
00:07:02,880 --> 00:07:05,039
you can look at the issues

208
00:07:05,039 --> 00:07:07,199
if a certain issue hits the

209
00:07:07,199 --> 00:07:09,280
functionality that you want to implement

210
00:07:09,280 --> 00:07:11,039
because if you try that and you find out

211
00:07:11,039 --> 00:07:12,479
in production that something goes wrong

212
00:07:12,479 --> 00:07:13,280
you need to

213
00:07:13,280 --> 00:07:15,199
get it out again and need to fix it

214
00:07:15,199 --> 00:07:18,800
right and why is this important because

215
00:07:18,800 --> 00:07:20,240
you're depend on you're you're depending

216
00:07:20,240 --> 00:07:21,840
on it and you built your software on top

217
00:07:21,840 --> 00:07:22,319
of this

218
00:07:22,319 --> 00:07:24,560
so if something breaks and it's not

219
00:07:24,560 --> 00:07:26,880
maintained

220
00:07:26,880 --> 00:07:28,880
then you are in trouble and you need to

221
00:07:28,880 --> 00:07:30,240
fix it yourself

222
00:07:30,240 --> 00:07:33,919
need to rewrite make patches get it out

223
00:07:33,919 --> 00:07:35,520
and if it's actively maintained you can

224
00:07:35,520 --> 00:07:37,360
ask the contributors to

225
00:07:37,360 --> 00:07:40,720
help you with this so

226
00:07:40,720 --> 00:07:42,720
and then it's the third question is do i

227
00:07:42,720 --> 00:07:44,720
need all of this and again i use this

228
00:07:44,720 --> 00:07:46,400
eclipse uh collection library because

229
00:07:46,400 --> 00:07:48,240
it's quite a large package if you look

230
00:07:48,240 --> 00:07:51,199
at the size of the jar it's 9.8

231
00:07:51,199 --> 00:07:53,840
megabytes which is not that much for a

232
00:07:53,840 --> 00:07:56,160
java enterprise application

233
00:07:56,160 --> 00:07:59,360
but and that's a big but if you do

234
00:07:59,360 --> 00:08:01,680
for instance android development is this

235
00:08:01,680 --> 00:08:02,960
something you want

236
00:08:02,960 --> 00:08:04,560
and compared to what you actually use in

237
00:08:04,560 --> 00:08:06,960
the library if i'm just using

238
00:08:06,960 --> 00:08:09,680
an implementation of immutable list or a

239
00:08:09,680 --> 00:08:10,479
tuple

240
00:08:10,479 --> 00:08:12,720
is that actually worth it to put that

241
00:08:12,720 --> 00:08:13,759
9.8

242
00:08:13,759 --> 00:08:17,039
megabyte jar into my

243
00:08:17,039 --> 00:08:19,919
application you need to think about it

244
00:08:19,919 --> 00:08:21,199
if if if it's

245
00:08:21,199 --> 00:08:23,360
if it's okay for that and some people

246
00:08:23,360 --> 00:08:25,360
say it is but i would say if it's just

247
00:08:25,360 --> 00:08:27,120
a single collection or a single

248
00:08:27,120 --> 00:08:28,400
implementation

249
00:08:28,400 --> 00:08:30,080
maybe you can implement it yourself or

250
00:08:30,080 --> 00:08:31,520
find another library that's also

251
00:08:31,520 --> 00:08:33,519
actively maintained

252
00:08:33,519 --> 00:08:36,399
that is lighter because it might have

253
00:08:36,399 --> 00:08:40,080
performance impact right

254
00:08:40,080 --> 00:08:42,958
okay so we have our initial stack of

255
00:08:42,958 --> 00:08:44,320
dependencies

256
00:08:44,320 --> 00:08:46,720
then we come to that point like when to

257
00:08:46,720 --> 00:08:48,080
update dependencies

258
00:08:48,080 --> 00:08:49,920
well some people say i will never update

259
00:08:49,920 --> 00:08:51,200
my dependencies

260
00:08:51,200 --> 00:08:52,800
if it works if it doesn't break my unit

261
00:08:52,800 --> 00:08:54,800
tests it's fine

262
00:08:54,800 --> 00:08:58,000
i beg the difference first of all

263
00:08:58,000 --> 00:09:00,240
if you are working on an active

264
00:09:00,240 --> 00:09:02,560
application you need to upgrade right

265
00:09:02,560 --> 00:09:04,560
you need to upgrade for instance from

266
00:09:04,560 --> 00:09:06,480
java 8 to java

267
00:09:06,480 --> 00:09:10,959
11 and that can break things i mean

268
00:09:10,959 --> 00:09:12,640
first of all you have to look at your

269
00:09:12,640 --> 00:09:14,320
dependencies if you look at your

270
00:09:14,320 --> 00:09:16,000
dependencies your dependencies have

271
00:09:16,000 --> 00:09:18,560
indirect dependencies

272
00:09:18,560 --> 00:09:23,680
cool if you want to update

273
00:09:23,680 --> 00:09:26,080
check if it's still regularly released

274
00:09:26,080 --> 00:09:27,360
if it was regularly released in the

275
00:09:27,360 --> 00:09:28,800
beginning doesn't mean

276
00:09:28,800 --> 00:09:30,800
it's still there because if i use

277
00:09:30,800 --> 00:09:32,160
histrix five years ago

278
00:09:32,160 --> 00:09:35,920
it was perfectly fine not anymore right

279
00:09:35,920 --> 00:09:37,440
so you need to look at all these things

280
00:09:37,440 --> 00:09:39,200
that you did at the beginning

281
00:09:39,200 --> 00:09:41,839
plus the dependency health and we will

282
00:09:41,839 --> 00:09:43,680
get into dependent dependency health

283
00:09:43,680 --> 00:09:45,519
because if you don't do that things will

284
00:09:45,519 --> 00:09:47,200
break as i said

285
00:09:47,200 --> 00:09:50,480
i was in a um a project a few years ago

286
00:09:50,480 --> 00:09:52,800
and in that project we needed to uh

287
00:09:52,800 --> 00:09:54,399
convert from from an old java six

288
00:09:54,399 --> 00:09:55,600
version to

289
00:09:55,600 --> 00:09:57,279
java 8 at that point it was like seven

290
00:09:57,279 --> 00:09:58,640
years ago eight years ago

291
00:09:58,640 --> 00:10:00,399
and java 8 was at that point the newest

292
00:10:00,399 --> 00:10:02,399
one

293
00:10:02,399 --> 00:10:04,720
java 6 will already end of life but

294
00:10:04,720 --> 00:10:06,240
because people postponed

295
00:10:06,240 --> 00:10:07,920
to also update the the other

296
00:10:07,920 --> 00:10:10,640
dependencies by updating from java 6 to

297
00:10:10,640 --> 00:10:11,760
java 8 we had

298
00:10:11,760 --> 00:10:13,839
issues with the hibernate layer with

299
00:10:13,839 --> 00:10:15,680
spring because it was ancient and we

300
00:10:15,680 --> 00:10:16,800
need to

301
00:10:16,800 --> 00:10:19,760
like cut open the whole big monolithic

302
00:10:19,760 --> 00:10:20,800
application

303
00:10:20,800 --> 00:10:22,240
and make sure that all these

304
00:10:22,240 --> 00:10:23,920
dependencies were up to date again

305
00:10:23,920 --> 00:10:26,320
so you should take care of them because

306
00:10:26,320 --> 00:10:28,000
if you don't take the pain now

307
00:10:28,000 --> 00:10:30,560
if the pain is little then you need to

308
00:10:30,560 --> 00:10:32,000
pay take the pain later and the pain

309
00:10:32,000 --> 00:10:33,600
will be get what will be getting bigger

310
00:10:33,600 --> 00:10:35,839
bigger and larger right

311
00:10:35,839 --> 00:10:38,959
so take care of that so how

312
00:10:38,959 --> 00:10:41,200
can your package manager help with that

313
00:10:41,200 --> 00:10:43,440
well let for instant maven

314
00:10:43,440 --> 00:10:45,839
if we have maven you can use the maven

315
00:10:45,839 --> 00:10:46,959
versions plugin

316
00:10:46,959 --> 00:10:49,519
and i will just show you that because

317
00:10:49,519 --> 00:10:51,760
it's easier to show you

318
00:10:51,760 --> 00:10:55,040
say i have this application and you see

319
00:10:55,040 --> 00:10:58,000
this is my these are my dependencies

320
00:10:58,000 --> 00:10:59,120
right

321
00:10:59,120 --> 00:11:01,760
and i want to see if there are newer

322
00:11:01,760 --> 00:11:03,519
versions of these dependencies

323
00:11:03,519 --> 00:11:05,680
well let's go to the terminal and let's

324
00:11:05,680 --> 00:11:06,720
say

325
00:11:06,720 --> 00:11:10,079
maven version display dependency updates

326
00:11:10,079 --> 00:11:13,519
and by just running this maven will look

327
00:11:13,519 --> 00:11:14,959
for me and if there are

328
00:11:14,959 --> 00:11:16,640
newer versions of that dependencies and

329
00:11:16,640 --> 00:11:18,720
you see for all four dependencies

330
00:11:18,720 --> 00:11:21,120
there are newer versions available so

331
00:11:21,120 --> 00:11:23,440
you don't have to look it up manually

332
00:11:23,440 --> 00:11:25,760
you can use your package manager to do

333
00:11:25,760 --> 00:11:26,880
so

334
00:11:26,880 --> 00:11:28,880
so that also means that you can automate

335
00:11:28,880 --> 00:11:30,480
it you can automate this

336
00:11:30,480 --> 00:11:32,640
while you are building your new release

337
00:11:32,640 --> 00:11:34,399
in your ci pipeline and give a warning

338
00:11:34,399 --> 00:11:36,399
or give a report on that

339
00:11:36,399 --> 00:11:37,839
it doesn't mean you need to upgrade

340
00:11:37,839 --> 00:11:40,079
everything that's up to you if it's

341
00:11:40,079 --> 00:11:41,519
needed but at least you know there are

342
00:11:41,519 --> 00:11:42,880
newer versions

343
00:11:42,880 --> 00:11:45,839
right so i can see for all my versions

344
00:11:45,839 --> 00:11:46,959
over here i can

345
00:11:46,959 --> 00:11:50,240
update to a newer version and if i do

346
00:11:50,240 --> 00:11:50,639
that

347
00:11:50,639 --> 00:11:53,279
constantly you will see that the pane is

348
00:11:53,279 --> 00:11:54,399
easy because these are just

349
00:11:54,399 --> 00:11:56,480
minor versions and minor versions minor

350
00:11:56,480 --> 00:11:58,079
updates are not that big of a problem

351
00:11:58,079 --> 00:11:59,040
most of the time

352
00:11:59,040 --> 00:12:01,440
most of the time it will not break api

353
00:12:01,440 --> 00:12:03,040
and if it breaks api

354
00:12:03,040 --> 00:12:05,120
well you might still want to do it

355
00:12:05,120 --> 00:12:06,480
because if you do it later the pay will

356
00:12:06,480 --> 00:12:08,560
only get worse

357
00:12:08,560 --> 00:12:11,680
so getting back to my slide deck this

358
00:12:11,680 --> 00:12:13,360
was from maven and you can

359
00:12:13,360 --> 00:12:15,440
basically do the same for gradle gradle

360
00:12:15,440 --> 00:12:17,360
if you use dependency updates

361
00:12:17,360 --> 00:12:20,560
um you can look and if you you can you

362
00:12:20,560 --> 00:12:21,600
can see if you

363
00:12:21,600 --> 00:12:25,839
are if there are newer versions of that

364
00:12:26,320 --> 00:12:29,680
okay next one

365
00:12:30,160 --> 00:12:31,279
do you know if there's an issue with the

366
00:12:31,279 --> 00:12:33,279
dependencies for instance

367
00:12:33,279 --> 00:12:35,760
are there security problems let me check

368
00:12:35,760 --> 00:12:36,959
for that

369
00:12:36,959 --> 00:12:40,000
so say i have an application over here

370
00:12:40,000 --> 00:12:42,320
this is just a spring application and

371
00:12:42,320 --> 00:12:44,240
i'm using an ancient or an old spring

372
00:12:44,240 --> 00:12:45,839
boot

373
00:12:45,839 --> 00:12:48,560
implementation and i'm using the crud

374
00:12:48,560 --> 00:12:50,399
repository and i'm using spring data

375
00:12:50,399 --> 00:12:51,200
rest

376
00:12:51,200 --> 00:12:53,680
it is a gross grocery list and i already

377
00:12:53,680 --> 00:12:54,800
started up for you

378
00:12:54,800 --> 00:12:56,560
and if you look at over here it's

379
00:12:56,560 --> 00:12:58,160
startup

380
00:12:58,160 --> 00:13:02,079
if i ask for item slash one

381
00:13:02,079 --> 00:13:04,320
it will give me my first item on my

382
00:13:04,320 --> 00:13:05,519
grocery list

383
00:13:05,519 --> 00:13:08,240
if i look for item slash q it will give

384
00:13:08,240 --> 00:13:09,920
me the second item on my grocery list

385
00:13:09,920 --> 00:13:12,000
etc etc etc

386
00:13:12,000 --> 00:13:14,720
and spring data spring data rest helped

387
00:13:14,720 --> 00:13:16,320
me with creating

388
00:13:16,320 --> 00:13:18,160
a credit repository and making that

389
00:13:18,160 --> 00:13:19,440
corrupt repository into a rest

390
00:13:19,440 --> 00:13:20,079
repository

391
00:13:20,079 --> 00:13:22,160
so i do not have to do anything and if

392
00:13:22,160 --> 00:13:23,680
you test it from a functional

393
00:13:23,680 --> 00:13:24,639
perspective

394
00:13:24,639 --> 00:13:27,040
it looks great it works it works fine

395
00:13:27,040 --> 00:13:27,920
right

396
00:13:27,920 --> 00:13:32,839
cool but let's get into something else

397
00:13:32,839 --> 00:13:35,519
say i don't know and i don't test my

398
00:13:35,519 --> 00:13:36,800
dependency

399
00:13:36,800 --> 00:13:40,160
and i'm doing this like what

400
00:13:40,160 --> 00:13:42,399
i'm doing a curl command a curl patch

401
00:13:42,399 --> 00:13:43,680
command

402
00:13:43,680 --> 00:13:45,920
and in this curl patch command i know

403
00:13:45,920 --> 00:13:47,600
this version of

404
00:13:47,600 --> 00:13:49,839
spring data rest is vulnerable and in

405
00:13:49,839 --> 00:13:51,199
this vulnerability if i do a

406
00:13:51,199 --> 00:13:53,120
curl patch command i can utilize a

407
00:13:53,120 --> 00:13:55,120
spring expression language

408
00:13:55,120 --> 00:13:57,760
and i do this by inserting this json

409
00:13:57,760 --> 00:13:58,480
body

410
00:13:58,480 --> 00:14:00,839
with the spring expression language i

411
00:14:00,839 --> 00:14:02,480
can alter

412
00:14:02,480 --> 00:14:05,199
objects or i can make new instances of

413
00:14:05,199 --> 00:14:06,000
new objects

414
00:14:06,000 --> 00:14:08,000
right and what i do over here is i make

415
00:14:08,000 --> 00:14:09,760
an instance of the runtime

416
00:14:09,760 --> 00:14:14,720
and i give it the nth command

417
00:14:14,720 --> 00:14:17,600
and the endpoint i call it on is the

418
00:14:17,600 --> 00:14:19,600
endpoint for my first item on my grocery

419
00:14:19,600 --> 00:14:20,000
list

420
00:14:20,000 --> 00:14:24,000
so nothing special but by doing this

421
00:14:24,000 --> 00:14:25,600
you'll see i can do an arbitrary code

422
00:14:25,600 --> 00:14:27,760
injection or arbitrary code execution

423
00:14:27,760 --> 00:14:30,959
i can basically call any linux command

424
00:14:30,959 --> 00:14:32,320
that is available for me

425
00:14:32,320 --> 00:14:34,240
so if i don't know that this dependency

426
00:14:34,240 --> 00:14:36,000
is vulnerable

427
00:14:36,000 --> 00:14:39,199
and i keep it in you are in trouble

428
00:14:39,199 --> 00:14:41,760
you might be in trouble and how can you

429
00:14:41,760 --> 00:14:42,880
solve that well

430
00:14:42,880 --> 00:14:44,720
i did it already for you over here and i

431
00:14:44,720 --> 00:14:46,880
will enlarge it a bit so you can

432
00:14:46,880 --> 00:14:49,040
you can see what i did i did a sneak

433
00:14:49,040 --> 00:14:51,120
test and this is free software so you

434
00:14:51,120 --> 00:14:52,399
can you can use it

435
00:14:52,399 --> 00:14:56,079
right now just download it and do it um

436
00:14:56,079 --> 00:14:58,000
and it helps me on my command line to

437
00:14:58,000 --> 00:15:00,240
see that okay i need to update from one

438
00:15:00,240 --> 00:15:03,279
five five uh build snapshots to two one

439
00:15:03,279 --> 00:15:04,160
oh

440
00:15:04,160 --> 00:15:07,279
and to get rid of a bunch of these uh

441
00:15:07,279 --> 00:15:10,800
uh a bunch of these problems the same

442
00:15:10,800 --> 00:15:12,800
for another package to update so this

443
00:15:12,800 --> 00:15:14,480
gives you this helps you out and you can

444
00:15:14,480 --> 00:15:16,240
automate it again

445
00:15:16,240 --> 00:15:17,519
and this you can do on your local

446
00:15:17,519 --> 00:15:19,680
machine but also like this is another

447
00:15:19,680 --> 00:15:21,360
repository but i connected it to

448
00:15:21,360 --> 00:15:24,720
uh to to a scanning tool the sneak

449
00:15:24,720 --> 00:15:25,600
scanning tool

450
00:15:25,600 --> 00:15:27,440
for my repository and you see it scanned

451
00:15:27,440 --> 00:15:28,639
six hours ago

452
00:15:28,639 --> 00:15:31,360
so on a daily basis i scan my repository

453
00:15:31,360 --> 00:15:32,800
to see if there are problems

454
00:15:32,800 --> 00:15:33,839
and you see there are a bunch of

455
00:15:33,839 --> 00:15:35,920
problems over here and of course that's

456
00:15:35,920 --> 00:15:36,959
on purpose

457
00:15:36,959 --> 00:15:40,800
so use these tools to help to see if a

458
00:15:40,800 --> 00:15:43,120
dependency you have is vulnerable or has

459
00:15:43,120 --> 00:15:44,560
a security issue

460
00:15:44,560 --> 00:15:47,920
so you have a reason to get it out

461
00:15:47,920 --> 00:15:50,880
and what i want to say is if you are

462
00:15:50,880 --> 00:15:52,480
going to the latest and greatest in

463
00:15:52,480 --> 00:15:53,199
general

464
00:15:53,199 --> 00:15:55,440
the possibility that something goes

465
00:15:55,440 --> 00:15:56,560
wrong will get

466
00:15:56,560 --> 00:15:59,759
smaller but not impossible so you need

467
00:15:59,759 --> 00:16:01,199
to know

468
00:16:01,199 --> 00:16:02,959
how what the health of your dependency

469
00:16:02,959 --> 00:16:04,320
is and use that

470
00:16:04,320 --> 00:16:07,360
as one of the

471
00:16:07,360 --> 00:16:10,560
things to make sure that

472
00:16:10,560 --> 00:16:14,560
you're good up to speed right so okay

473
00:16:14,560 --> 00:16:16,880
our dependency uh are we know what we

474
00:16:16,880 --> 00:16:17,600
dependency

475
00:16:17,600 --> 00:16:19,199
our penalties can do and we know if the

476
00:16:19,199 --> 00:16:20,839
head of the dependencies are

477
00:16:20,839 --> 00:16:24,480
cool but then

478
00:16:24,480 --> 00:16:26,560
we end up with when to remove a

479
00:16:26,560 --> 00:16:27,759
dependency

480
00:16:27,759 --> 00:16:30,320
i mean i know there are a bunch of users

481
00:16:30,320 --> 00:16:31,839
out there that use maven

482
00:16:31,839 --> 00:16:34,240
and probably the most of the people over

483
00:16:34,240 --> 00:16:35,040
here

484
00:16:35,040 --> 00:16:36,880
use maven and have seen a palm file

485
00:16:36,880 --> 00:16:39,120
right

486
00:16:39,440 --> 00:16:41,759
this is a part of a palm file and this

487
00:16:41,759 --> 00:16:43,279
is a part of an old pump file

488
00:16:43,279 --> 00:16:46,320
on all projects i worked on like and i

489
00:16:46,320 --> 00:16:48,399
think about five years ago or something

490
00:16:48,399 --> 00:16:51,920
or even even even more um and the point

491
00:16:51,920 --> 00:16:52,560
with that

492
00:16:52,560 --> 00:16:54,320
with that pump file was it had a lot of

493
00:16:54,320 --> 00:16:56,959
dependencies and nobody knew anymore

494
00:16:56,959 --> 00:16:59,440
if the dependency was used why we use it

495
00:16:59,440 --> 00:17:00,079
and

496
00:17:00,079 --> 00:17:02,000
actually if i i snooped around on it and

497
00:17:02,000 --> 00:17:03,120
i looked into it

498
00:17:03,120 --> 00:17:04,319
and it had actually three

499
00:17:04,319 --> 00:17:08,640
implementations of a xml parser in it

500
00:17:08,640 --> 00:17:12,799
why do you need that second one

501
00:17:12,799 --> 00:17:14,319
isn't there already one that helps you

502
00:17:14,319 --> 00:17:16,079
and maybe we should convert that into

503
00:17:16,079 --> 00:17:17,199
one

504
00:17:17,199 --> 00:17:20,160
right so but there were also a bunch of

505
00:17:20,160 --> 00:17:22,880
dependencies that were not used anymore

506
00:17:22,880 --> 00:17:25,039
so why not get these out because you see

507
00:17:25,039 --> 00:17:27,039
that even if a dependency is in

508
00:17:27,039 --> 00:17:29,760
through things like reflection and stuff

509
00:17:29,760 --> 00:17:31,520
this code might be used or might be

510
00:17:31,520 --> 00:17:32,559
utilizable or

511
00:17:32,559 --> 00:17:35,039
whatever i mean it doesn't mean if it's

512
00:17:35,039 --> 00:17:36,640
not directly used

513
00:17:36,640 --> 00:17:38,559
it cannot be indirectly used so if you

514
00:17:38,559 --> 00:17:40,240
do not use it directly

515
00:17:40,240 --> 00:17:42,799
you might try to to cut it down and make

516
00:17:42,799 --> 00:17:43,679
your

517
00:17:43,679 --> 00:17:46,480
palm file or your gradle file as small

518
00:17:46,480 --> 00:17:48,000
as possible so you can actually see

519
00:17:48,000 --> 00:17:49,760
what's going on

520
00:17:49,760 --> 00:17:52,480
so how to do that well for instance we

521
00:17:52,480 --> 00:17:54,559
can use the maven dependency and analyze

522
00:17:54,559 --> 00:17:55,360
plugin

523
00:17:55,360 --> 00:17:58,080
and i will show that again because i

524
00:17:58,080 --> 00:17:59,520
have this maven dependency

525
00:17:59,520 --> 00:18:02,960
thing i showed you earlier and say i am

526
00:18:02,960 --> 00:18:06,559
doing i have that four

527
00:18:06,559 --> 00:18:09,120
i have these four dependencies right so

528
00:18:09,120 --> 00:18:09,919
i'm doing

529
00:18:09,919 --> 00:18:12,559
maven dependency analyze and it will

530
00:18:12,559 --> 00:18:14,480
analyze the dependencies

531
00:18:14,480 --> 00:18:16,480
that i'm using or not and i will just

532
00:18:16,480 --> 00:18:18,160
enlarge my screen a bit so you can

533
00:18:18,160 --> 00:18:18,720
actually

534
00:18:18,720 --> 00:18:21,679
see the stuff and what you see over here

535
00:18:21,679 --> 00:18:22,640
is that it gives

536
00:18:22,640 --> 00:18:26,720
back my unused but declared dependencies

537
00:18:26,720 --> 00:18:28,240
that it had found

538
00:18:28,240 --> 00:18:30,240
and one is a test dependency and one is

539
00:18:30,240 --> 00:18:32,080
a provided dependency well i'm not

540
00:18:32,080 --> 00:18:33,679
interested in my test dependencies i'm

541
00:18:33,679 --> 00:18:35,520
not interested in a provided dependency

542
00:18:35,520 --> 00:18:36,240
because

543
00:18:36,240 --> 00:18:38,480
well i need it well if you want to use

544
00:18:38,480 --> 00:18:40,640
lombok but in this case i might use it

545
00:18:40,640 --> 00:18:42,559
so it's not something you actually do

546
00:18:42,559 --> 00:18:43,760
but it's more

547
00:18:43,760 --> 00:18:45,760
now you can you can provide you can you

548
00:18:45,760 --> 00:18:47,360
can see it more or less as a runtime

549
00:18:47,360 --> 00:18:50,720
uh dependency right so what we can do

550
00:18:50,720 --> 00:18:53,760
is for instance view uh

551
00:18:53,760 --> 00:18:58,160
dash d ignore

552
00:18:58,160 --> 00:19:01,360
none compile

553
00:19:01,360 --> 00:19:04,640
by doing this it will only show me

554
00:19:04,640 --> 00:19:08,240
the the compile dependencies that i

555
00:19:08,240 --> 00:19:11,600
pull into my uh application

556
00:19:11,600 --> 00:19:14,400
and these and these are not used so i

557
00:19:14,400 --> 00:19:16,000
can now see that i

558
00:19:16,000 --> 00:19:17,679
i depend on a common line library and

559
00:19:17,679 --> 00:19:19,280
i'm actually not calling it

560
00:19:19,280 --> 00:19:21,280
so this is an indication it's not

561
00:19:21,280 --> 00:19:22,880
perfect trust me because

562
00:19:22,880 --> 00:19:24,559
the point is if you use spring boot

563
00:19:24,559 --> 00:19:26,240
starters for instance a spring boot

564
00:19:26,240 --> 00:19:26,880
starter

565
00:19:26,880 --> 00:19:28,320
has the has the issue that the spring

566
00:19:28,320 --> 00:19:30,640
boot starter is actually an empty jar

567
00:19:30,640 --> 00:19:33,840
with only a pump file in it and the

568
00:19:33,840 --> 00:19:37,600
analyze plugin will look if there is a

569
00:19:37,600 --> 00:19:38,080
reference

570
00:19:38,080 --> 00:19:40,480
to that jar or not so they will come up

571
00:19:40,480 --> 00:19:41,919
with these spring boot starters

572
00:19:41,919 --> 00:19:45,120
like they are unused and declared

573
00:19:45,120 --> 00:19:48,240
yes fair enough but it gives you an

574
00:19:48,240 --> 00:19:49,039
indication

575
00:19:49,039 --> 00:19:50,720
if there are unused dependencies and you

576
00:19:50,720 --> 00:19:52,880
can use this tool to cut down your palm

577
00:19:52,880 --> 00:19:53,360
into

578
00:19:53,360 --> 00:19:58,000
the most smallest one you actually need

579
00:19:59,520 --> 00:20:01,360
and getting back to gradle there are a

580
00:20:01,360 --> 00:20:03,679
bunch of plugins to to do so and

581
00:20:03,679 --> 00:20:06,320
well i've looked into the nebula plug-in

582
00:20:06,320 --> 00:20:07,600
which is a plug-in

583
00:20:07,600 --> 00:20:09,919
if i'm not mistaken created by the folks

584
00:20:09,919 --> 00:20:11,440
from from netflix

585
00:20:11,440 --> 00:20:14,400
uh it's a it's a gradle lind uh plugin

586
00:20:14,400 --> 00:20:15,120
and you can

587
00:20:15,120 --> 00:20:17,679
use the unused dependency rule like

588
00:20:17,679 --> 00:20:18,960
specified over here

589
00:20:18,960 --> 00:20:22,400
to do the same thing in gradle

590
00:20:22,400 --> 00:20:24,159
so both in maven and grail there are

591
00:20:24,159 --> 00:20:25,840
tools that can help you it's not a

592
00:20:25,840 --> 00:20:27,919
perfect tool like it will actually get

593
00:20:27,919 --> 00:20:29,919
everything out but it can help you

594
00:20:29,919 --> 00:20:32,559
maintain your dependencies and cut

595
00:20:32,559 --> 00:20:33,600
things out that not

596
00:20:33,600 --> 00:20:36,879
that are not needed anymore

597
00:20:40,559 --> 00:20:43,919
so i will go for a small recap because

598
00:20:43,919 --> 00:20:44,960
we only have

599
00:20:44,960 --> 00:20:47,200
30 minutes in this talk and i only have

600
00:20:47,200 --> 00:20:48,559
basically one minute left

601
00:20:48,559 --> 00:20:52,080
before q a starts so first of all

602
00:20:52,080 --> 00:20:53,520
think about how to deal with your

603
00:20:53,520 --> 00:20:56,240
dependencies make sure that you and your

604
00:20:56,240 --> 00:20:56,640
team

605
00:20:56,640 --> 00:20:58,799
have something have a strategy how to

606
00:20:58,799 --> 00:21:00,080
work with dependencies

607
00:21:00,080 --> 00:21:02,400
and if you want to create a strategy

608
00:21:02,400 --> 00:21:04,240
make sure that you think like

609
00:21:04,240 --> 00:21:07,120
why why am i implementing this uh

610
00:21:07,120 --> 00:21:08,799
dependency not just do it

611
00:21:08,799 --> 00:21:10,240
but use that as part of your code

612
00:21:10,240 --> 00:21:11,840
reviews for instance

613
00:21:11,840 --> 00:21:13,760
why are you including this dependency is

614
00:21:13,760 --> 00:21:15,280
this needed

615
00:21:15,280 --> 00:21:17,840
just like you like you like you look at

616
00:21:17,840 --> 00:21:18,720
your code

617
00:21:18,720 --> 00:21:20,559
in a very specific way look at the

618
00:21:20,559 --> 00:21:22,159
things you include as well

619
00:21:22,159 --> 00:21:23,760
you need to check your dependency health

620
00:21:23,760 --> 00:21:26,240
like is is it maintained but also

621
00:21:26,240 --> 00:21:28,640
is it still secure and if it's secure

622
00:21:28,640 --> 00:21:29,440
now it can

623
00:21:29,440 --> 00:21:32,240
be like insecure tomorrow because it

624
00:21:32,240 --> 00:21:34,000
takes time to find vulnerabilities

625
00:21:34,000 --> 00:21:36,080
and a vulnerability can pop up like in

626
00:21:36,080 --> 00:21:37,200
any time

627
00:21:37,200 --> 00:21:39,039
so make sure that you scan for these

628
00:21:39,039 --> 00:21:40,240
things

629
00:21:40,240 --> 00:21:41,679
make sure that the dependency health is

630
00:21:41,679 --> 00:21:44,000
checked over time so if it's good now it

631
00:21:44,000 --> 00:21:45,840
might it might be that

632
00:21:45,840 --> 00:21:48,480
like in a year or so this uh this

633
00:21:48,480 --> 00:21:49,919
project is out of date

634
00:21:49,919 --> 00:21:52,000
and if you see that for instance the

635
00:21:52,000 --> 00:21:53,280
amount of commits

636
00:21:53,280 --> 00:21:55,600
goes to go go down or that people are

637
00:21:55,600 --> 00:21:57,200
not actively maintaining it anymore that

638
00:21:57,200 --> 00:21:58,000
is a cue for you

639
00:21:58,000 --> 00:22:00,799
to get that dependency out and get a new

640
00:22:00,799 --> 00:22:02,799
version in or get a

641
00:22:02,799 --> 00:22:07,039
new project in that is well maintained

642
00:22:07,039 --> 00:22:10,080
i would say update often to newer

643
00:22:10,080 --> 00:22:11,120
version

644
00:22:11,120 --> 00:22:13,520
the better or the more better because

645
00:22:13,520 --> 00:22:14,480
increments are

646
00:22:14,480 --> 00:22:16,320
most the time are small and if you take

647
00:22:16,320 --> 00:22:17,520
the pay now

648
00:22:17,520 --> 00:22:20,320
you will have less pain than any if you

649
00:22:20,320 --> 00:22:22,080
postpone it to the end of

650
00:22:22,080 --> 00:22:23,600
whatever when you actually need it

651
00:22:23,600 --> 00:22:25,600
because if you need to implement

652
00:22:25,600 --> 00:22:27,919
a new application or a new framework and

653
00:22:27,919 --> 00:22:29,919
it's not compatible with a bunch of your

654
00:22:29,919 --> 00:22:33,440
uh with a bunch of your dependencies

655
00:22:33,440 --> 00:22:35,120
then you might be in trouble and then

656
00:22:35,120 --> 00:22:37,039
you need to do a whole lot of rework to

657
00:22:37,039 --> 00:22:37,360
just

658
00:22:37,360 --> 00:22:40,400
make it compile and make it run

659
00:22:40,400 --> 00:22:42,400
remu remove unused dependencies because

660
00:22:42,400 --> 00:22:43,840
you basically don't know what they are

661
00:22:43,840 --> 00:22:44,320
doing

662
00:22:44,320 --> 00:22:46,480
and it's just sanitization you all you

663
00:22:46,480 --> 00:22:47,919
also do not

664
00:22:47,919 --> 00:22:50,080
leave that code in right we do something

665
00:22:50,080 --> 00:22:51,520
like that code analysis to make sure

666
00:22:51,520 --> 00:22:53,120
that our code is compact and clean and

667
00:22:53,120 --> 00:22:54,000
maintainable

668
00:22:54,000 --> 00:22:55,679
because readable readability and

669
00:22:55,679 --> 00:22:57,120
maintainability is one of the most

670
00:22:57,120 --> 00:22:59,280
important things if you work in a team

671
00:22:59,280 --> 00:23:02,559
and last but not least try to use these

672
00:23:02,559 --> 00:23:03,840
tools as i just gave you

673
00:23:03,840 --> 00:23:06,320
these are just a few of these these

674
00:23:06,320 --> 00:23:07,760
tools but you can use these tools to

675
00:23:07,760 --> 00:23:09,600
automate as much as possible

676
00:23:09,600 --> 00:23:11,440
don't do this manually but make this

677
00:23:11,440 --> 00:23:12,960
part of your build process

678
00:23:12,960 --> 00:23:14,880
if you do that like with every maven

679
00:23:14,880 --> 00:23:16,080
build that you get a report and a

680
00:23:16,080 --> 00:23:16,799
warning like

681
00:23:16,799 --> 00:23:18,320
okay there are a bunch of things wrong

682
00:23:18,320 --> 00:23:20,080
or in your ci pipeline

683
00:23:20,080 --> 00:23:23,360
you will get actively pinged

684
00:23:23,360 --> 00:23:25,919
if there are issues with newer versions

685
00:23:25,919 --> 00:23:27,679
if there are issues with security for

686
00:23:27,679 --> 00:23:28,400
instance

687
00:23:28,400 --> 00:23:32,080
so you have a reason to update

688
00:23:32,080 --> 00:23:34,880
this is my recap and i will shut off my

689
00:23:34,880 --> 00:23:35,280
screen

690
00:23:35,280 --> 00:23:38,400
and see if there are any questions one

691
00:23:38,400 --> 00:23:39,600
second please

692
00:23:39,600 --> 00:23:41,200
normally there's a host doing this for

693
00:23:41,200 --> 00:23:43,360
me but i need to do it on myself

694
00:23:43,360 --> 00:23:46,240
on my own now so let me get over here

695
00:23:46,240 --> 00:23:48,640
let me get into the

696
00:23:48,640 --> 00:23:50,320
java track channel there are no

697
00:23:50,320 --> 00:23:51,760
questions there

698
00:23:51,760 --> 00:23:55,039
and let me see if there are questions

699
00:23:55,039 --> 00:23:59,440
in the slido

700
00:24:02,840 --> 00:24:05,840
uh

701
00:24:06,880 --> 00:24:09,840
uh should we uh should we write it

702
00:24:09,840 --> 00:24:11,600
ourselves for this for the small things

703
00:24:11,600 --> 00:24:14,080
but it's always dependable on um

704
00:24:14,080 --> 00:24:14,799
somebody asked

705
00:24:14,799 --> 00:24:16,559
should we write things ourselves for the

706
00:24:16,559 --> 00:24:19,039
smaller things that depends

707
00:24:19,039 --> 00:24:23,919
on um on on your situation in some cases

708
00:24:23,919 --> 00:24:25,600
yes if you do things like

709
00:24:25,600 --> 00:24:28,400
uh if if it's if it's easy for instance

710
00:24:28,400 --> 00:24:29,440
if i want to use

711
00:24:29,440 --> 00:24:33,200
the implementation of a tuple

712
00:24:33,200 --> 00:24:36,000
and i want to include the whole eclipse

713
00:24:36,000 --> 00:24:37,679
collection library in it

714
00:24:37,679 --> 00:24:39,200
i mean i can write it in three lines of

715
00:24:39,200 --> 00:24:40,960
code well maybe five

716
00:24:40,960 --> 00:24:42,720
so yeah that would but it's always a

717
00:24:42,720 --> 00:24:44,159
trade-off

718
00:24:44,159 --> 00:24:45,679
so it depends how much do you use if

719
00:24:45,679 --> 00:24:47,360
it's if i would say

720
00:24:47,360 --> 00:24:49,440
use as as little dependencies as

721
00:24:49,440 --> 00:24:51,520
possible but that's not always the case

722
00:24:51,520 --> 00:24:52,400
in enterprise

723
00:24:52,400 --> 00:24:54,880
uh java but take take it into a youtube

724
00:24:54,880 --> 00:24:56,320
account that's what i wanted to say but

725
00:24:56,320 --> 00:24:57,760
for small things if you can write it

726
00:24:57,760 --> 00:24:58,720
yourself

727
00:24:58,720 --> 00:25:00,720
and you can look at it yourself and you

728
00:25:00,720 --> 00:25:03,360
do like reviews on it why not

729
00:25:03,360 --> 00:25:06,400
right accept there's always exception

730
00:25:06,400 --> 00:25:08,159
don't do implementations of encryption

731
00:25:08,159 --> 00:25:10,640
for instance so

732
00:25:10,640 --> 00:25:14,880
take pick your battles um

733
00:25:14,880 --> 00:25:16,640
next question is what if we use

734
00:25:16,640 --> 00:25:18,799
artifactory on nexus for jars

735
00:25:18,799 --> 00:25:22,240
and it's not up to date yes i get that

736
00:25:22,240 --> 00:25:24,480
that's that's that's an issue then then

737
00:25:24,480 --> 00:25:26,799
but i think that's there for a reason if

738
00:25:26,799 --> 00:25:28,000
it's not up to date

739
00:25:28,000 --> 00:25:31,600
then you should um consult the architect

740
00:25:31,600 --> 00:25:32,799
or the one that the

741
00:25:32,799 --> 00:25:34,320
the person that is that is in charge

742
00:25:34,320 --> 00:25:36,000
over there like why don't we update

743
00:25:36,000 --> 00:25:36,799
these things

744
00:25:36,799 --> 00:25:38,640
for instance scan your dependencies if

745
00:25:38,640 --> 00:25:40,320
there are vulnerabilities in there

746
00:25:40,320 --> 00:25:43,360
if not then you're good to go

747
00:25:43,360 --> 00:25:46,640
but um probably there will be some

748
00:25:46,640 --> 00:25:50,159
some some some problems in there

749
00:25:50,159 --> 00:25:53,840
i'm getting paint i don't see it anymore

750
00:25:53,840 --> 00:25:57,120
but i think my time is up for now

751
00:25:57,120 --> 00:26:00,080
it's uh i've got one minute left so i

752
00:26:00,080 --> 00:26:01,039
see on the clock

753
00:26:01,039 --> 00:26:02,799
so um if you have any more questions

754
00:26:02,799 --> 00:26:04,559
please put them in the slack channel and

755
00:26:04,559 --> 00:26:06,400
i will answer them for you

756
00:26:06,400 --> 00:26:08,720
over there i want to thank you i want to

757
00:26:08,720 --> 00:26:10,559
thank sneak and i want to thank

758
00:26:10,559 --> 00:26:12,240
the all the talks organizations for

759
00:26:12,240 --> 00:26:14,240
doing this for raising money

760
00:26:14,240 --> 00:26:18,720
and wow thank you all for being here and

761
00:26:18,720 --> 00:26:22,880
for donating money

