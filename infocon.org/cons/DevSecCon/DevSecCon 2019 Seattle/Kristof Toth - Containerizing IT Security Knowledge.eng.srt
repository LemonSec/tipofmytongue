1
00:00:00,089 --> 00:00:02,100
like thank you very much everybody for

2
00:00:02,100 --> 00:00:05,549
waiting our next speaker is Kristoff tot

3
00:00:05,549 --> 00:00:08,010
will peek about continued rising IT

4
00:00:08,010 --> 00:00:17,420
security knowledge thank you guys so

5
00:00:17,420 --> 00:00:20,070
today I will be talking about containers

6
00:00:20,070 --> 00:00:23,130
and IT security if I could see my slides

7
00:00:23,130 --> 00:00:27,300
alright awesome so basically since you

8
00:00:27,300 --> 00:00:29,730
are all here we know that something is

9
00:00:29,730 --> 00:00:32,640
wrong with security I guess like all

10
00:00:32,640 --> 00:00:34,489
these vulnerabilities going around

11
00:00:34,489 --> 00:00:38,879
trouble breaches they forget installed C

12
00:00:38,879 --> 00:00:41,010
ICD pipelines implemented in the wrong

13
00:00:41,010 --> 00:00:44,610
way def suck ups everything so what

14
00:00:44,610 --> 00:00:46,200
could we do about this whole thing and

15
00:00:46,200 --> 00:00:47,969
why do these things happen because like

16
00:00:47,969 --> 00:00:50,250
it seems so that the whole industry is

17
00:00:50,250 --> 00:00:52,469
like standing around like this like it's

18
00:00:52,469 --> 00:00:54,390
fine it's all right this is the way

19
00:00:54,390 --> 00:00:56,969
things should be and nothing really

20
00:00:56,969 --> 00:00:58,710
nobody really feels responsible for

21
00:00:58,710 --> 00:01:01,859
these things so isn't it time to like

22
00:01:01,859 --> 00:01:04,530
just take a hold of ourselves and do

23
00:01:04,530 --> 00:01:09,869
something about it so why are we failing

24
00:01:09,869 --> 00:01:12,540
why is this the case and I think that

25
00:01:12,540 --> 00:01:15,240
the problem starts with the amount of

26
00:01:15,240 --> 00:01:17,070
programmers like it's growing really

27
00:01:17,070 --> 00:01:19,530
rapidly it actually doubles every few

28
00:01:19,530 --> 00:01:22,619
years this is a trend that is slowing

29
00:01:22,619 --> 00:01:24,900
down actually but it's still pretty

30
00:01:24,900 --> 00:01:28,020
strong and if you think about it this

31
00:01:28,020 --> 00:01:30,450
means that basically in every given

32
00:01:30,450 --> 00:01:32,700
point of time around half of the

33
00:01:32,700 --> 00:01:35,909
developers are juniors so like they are

34
00:01:35,909 --> 00:01:39,210
beginners and how do they get security

35
00:01:39,210 --> 00:01:42,090
right I mean I t's Act training is still

36
00:01:42,090 --> 00:01:44,820
a curiosity at most universities we

37
00:01:44,820 --> 00:01:47,040
don't really for example I finished at

38
00:01:47,040 --> 00:01:49,200
the Budapest University of Economics and

39
00:01:49,200 --> 00:01:50,939
technology and it was like a single

40
00:01:50,939 --> 00:01:53,189
course we had in IT security which was

41
00:01:53,189 --> 00:01:55,860
mandatory and that's all like how would

42
00:01:55,860 --> 00:01:57,990
you allocate your software developers to

43
00:01:57,990 --> 00:01:59,909
be conscious about security if that's

44
00:01:59,909 --> 00:02:01,619
the case it's just impossible and

45
00:02:01,619 --> 00:02:04,320
basically what's happening is we have a

46
00:02:04,320 --> 00:02:06,540
whole lot of engineers without proper

47
00:02:06,540 --> 00:02:08,250
background in security nothing

48
00:02:08,250 --> 00:02:09,350
whatsoever

49
00:02:09,350 --> 00:02:12,510
it's not really good and I think that we

50
00:02:12,510 --> 00:02:14,400
should do something about that and it's

51
00:02:14,400 --> 00:02:16,140
great that we are here at this

52
00:02:16,140 --> 00:02:18,540
conference because I mean we know there

53
00:02:18,540 --> 00:02:20,640
is something wrong and we are willing to

54
00:02:20,640 --> 00:02:23,550
do something about it but we need to get

55
00:02:23,550 --> 00:02:25,440
the word out to everybody else like

56
00:02:25,440 --> 00:02:27,480
people start to take security seriously

57
00:02:27,480 --> 00:02:31,430
and it's really everybody's job so

58
00:02:31,430 --> 00:02:34,860
there's no question about that and from

59
00:02:34,860 --> 00:02:37,020
my point of view I really feel like the

60
00:02:37,020 --> 00:02:40,380
missing link is education so like we

61
00:02:40,380 --> 00:02:42,660
have really good tools and we have

62
00:02:42,660 --> 00:02:45,630
lectures and great talks and conferences

63
00:02:45,630 --> 00:02:48,450
but it's just not accessible for any of

64
00:02:48,450 --> 00:02:51,390
anybody like if you go to university you

65
00:02:51,390 --> 00:02:52,950
will probably have one or two IT

66
00:02:52,950 --> 00:02:55,380
security classes and that's all but if

67
00:02:55,380 --> 00:02:58,080
you are learning to code from a coding

68
00:02:58,080 --> 00:03:00,900
Academy or on your own or something then

69
00:03:00,900 --> 00:03:04,530
you just won't meet security until there

70
00:03:04,530 --> 00:03:06,290
are there is trouble

71
00:03:06,290 --> 00:03:09,810
so at our company avato I am a software

72
00:03:09,810 --> 00:03:12,930
engineer and we've been working on a bit

73
00:03:12,930 --> 00:03:14,850
of a framework which helps you to create

74
00:03:14,850 --> 00:03:20,240
these interactive containers what is it

75
00:03:20,240 --> 00:03:23,010
basically it helps you create

76
00:03:23,010 --> 00:03:25,380
interactive tutorials which will guide

77
00:03:25,380 --> 00:03:29,700
users through a set of problems and it

78
00:03:29,700 --> 00:03:31,410
does that automatically so you won't

79
00:03:31,410 --> 00:03:33,660
have to be standing there and do your

80
00:03:33,660 --> 00:03:38,430
thing is it also interacts with itself

81
00:03:38,430 --> 00:03:42,180
so basically you take your users and sit

82
00:03:42,180 --> 00:03:43,560
them down in front of one of our

83
00:03:43,560 --> 00:03:45,870
containers and it will guide them to a

84
00:03:45,870 --> 00:03:48,750
set of exercises or problems for example

85
00:03:48,750 --> 00:03:51,780
if I created a website and it was

86
00:03:51,780 --> 00:03:54,209
vulnerable against sequel injection then

87
00:03:54,209 --> 00:03:56,760
we would instruct the user to attack

88
00:03:56,760 --> 00:03:58,650
that website and tell them how sequel

89
00:03:58,650 --> 00:04:00,930
injection works for instance and after

90
00:04:00,930 --> 00:04:03,270
he has exploited that vulnerability then

91
00:04:03,270 --> 00:04:04,680
we would pop up a code editor and

92
00:04:04,680 --> 00:04:06,810
something and explained to him or her

93
00:04:06,810 --> 00:04:09,870
how to fix it in real life and what's

94
00:04:09,870 --> 00:04:12,480
fun about it is that's essentially a

95
00:04:12,480 --> 00:04:14,970
hybrid of classic hacking labs and

96
00:04:14,970 --> 00:04:18,930
training videos so in order to start

97
00:04:18,930 --> 00:04:21,390
doing a CTF or something you need some

98
00:04:21,390 --> 00:04:22,820
knowledge previously so

99
00:04:22,820 --> 00:04:25,370
you have to know some aking basically

100
00:04:25,370 --> 00:04:27,590
but in this case you don't need to do

101
00:04:27,590 --> 00:04:29,210
that so you can just pick it up and it

102
00:04:29,210 --> 00:04:31,820
will explain to you what to do and we

103
00:04:31,820 --> 00:04:33,680
expose the whole thing through a browser

104
00:04:33,680 --> 00:04:36,920
so basically it's just a browser tab and

105
00:04:36,920 --> 00:04:38,660
you can open it and it will show you

106
00:04:38,660 --> 00:04:40,670
some software and you can hack it and

107
00:04:40,670 --> 00:04:43,490
fix it afterwards and the fun thing

108
00:04:43,490 --> 00:04:47,240
about it is it we just put it in regular

109
00:04:47,240 --> 00:04:49,190
docker containers and you can ship it

110
00:04:49,190 --> 00:04:51,530
and run them it's standard content

111
00:04:51,530 --> 00:04:53,960
there's nothing fancy about it all open

112
00:04:53,960 --> 00:04:57,140
technologies so basically it's hacking

113
00:04:57,140 --> 00:05:00,950
labs on crack if you will so now I would

114
00:05:00,950 --> 00:05:03,800
like to show you a bit of a demo on how

115
00:05:03,800 --> 00:05:05,480
this works it just I don't know like

116
00:05:05,480 --> 00:05:08,480
five minutes demo on a container like

117
00:05:08,480 --> 00:05:10,580
this so you can imagine better because

118
00:05:10,580 --> 00:05:12,080
it's one thing to talk about it and

119
00:05:12,080 --> 00:05:14,180
another one to see how it works in real

120
00:05:14,180 --> 00:05:20,060
life so give me a moment to open up our

121
00:05:20,060 --> 00:05:23,180
stuff alright so as you can see this is

122
00:05:23,180 --> 00:05:26,240
the platform of our company we basically

123
00:05:26,240 --> 00:05:28,190
run docker containers so when I could be

124
00:05:28,190 --> 00:05:29,960
stuck now button it will just spin up a

125
00:05:29,960 --> 00:05:36,050
container for you and once I open it you

126
00:05:36,050 --> 00:05:39,410
will see that here on the left side we

127
00:05:39,410 --> 00:05:41,330
have this little chat bot and it is

128
00:05:41,330 --> 00:05:43,010
explaining to you the steps you have to

129
00:05:43,010 --> 00:05:45,980
take to complete the challenge right

130
00:05:45,980 --> 00:05:48,740
there in the middle we have this web

131
00:05:48,740 --> 00:05:50,510
service thingy it's just a regular

132
00:05:50,510 --> 00:05:53,180
website and it's exposed to our

133
00:05:53,180 --> 00:05:54,920
framework basically this is the tutorial

134
00:05:54,920 --> 00:05:58,940
and direct object reference so the chat

135
00:05:58,940 --> 00:06:00,710
bot is explaining to you the steps I

136
00:06:00,710 --> 00:06:01,940
will just go through it quickly

137
00:06:01,940 --> 00:06:03,890
basically what you have to do is just

138
00:06:03,890 --> 00:06:07,100
log into this web service notice that

139
00:06:07,100 --> 00:06:10,190
this is real web server running its I

140
00:06:10,190 --> 00:06:12,140
don't know it's written in I think it's

141
00:06:12,140 --> 00:06:15,560
Python so it's just running and

142
00:06:15,560 --> 00:06:18,080
basically what I have to do is see what

143
00:06:18,080 --> 00:06:20,390
users are online and I can browse them

144
00:06:20,390 --> 00:06:23,510
and I can see that profile profiles as

145
00:06:23,510 --> 00:06:25,970
well and as you know direct object

146
00:06:25,970 --> 00:06:28,370
reference works like I'm just changing

147
00:06:28,370 --> 00:06:30,710
some references and trying to access

148
00:06:30,710 --> 00:06:32,330
and point which is not properly

149
00:06:32,330 --> 00:06:34,940
authenticated and I am able to access

150
00:06:34,940 --> 00:06:37,009
the profile of this hacker by just

151
00:06:37,009 --> 00:06:40,490
editing the the URL and this is not good

152
00:06:40,490 --> 00:06:43,100
and as you may have already noticed we

153
00:06:43,100 --> 00:06:45,620
have popped up this code editor and it

154
00:06:45,620 --> 00:06:48,050
will allow you to fix the bug and

155
00:06:48,050 --> 00:06:50,539
basically the chat bot is doing his job

156
00:06:50,539 --> 00:06:53,300
and explaining to you what to do but the

157
00:06:53,300 --> 00:06:54,919
part is that you have to implement this

158
00:06:54,919 --> 00:06:58,250
little authorized user function and deal

159
00:06:58,250 --> 00:07:00,759
with the authorization logic properly

160
00:07:00,759 --> 00:07:04,430
it's fun because this is a real code

161
00:07:04,430 --> 00:07:06,590
editor so it's actually called the

162
00:07:06,590 --> 00:07:08,630
monarch editor which is used by this reg

163
00:07:08,630 --> 00:07:11,960
to do code and if I do something wrong

164
00:07:11,960 --> 00:07:14,270
and try to deploy it you will be able to

165
00:07:14,270 --> 00:07:16,880
see that we got real stack this is

166
00:07:16,880 --> 00:07:19,099
really trying to run this piece of code

167
00:07:19,099 --> 00:07:21,289
which you are writing so this is not a

168
00:07:21,289 --> 00:07:23,889
mock-up it's it's the real software and

169
00:07:23,889 --> 00:07:30,130
if I fix it it should be able to deploy

170
00:07:30,130 --> 00:07:32,930
yep as you can see it's just a flask

171
00:07:32,930 --> 00:07:35,030
server and it's putting out the output

172
00:07:35,030 --> 00:07:37,729
of it and I will implement this little

173
00:07:37,729 --> 00:07:40,280
function by checking if the current user

174
00:07:40,280 --> 00:07:46,099
is the one I to try and deploy it as you

175
00:07:46,099 --> 00:07:48,260
can see the framework has detected that

176
00:07:48,260 --> 00:07:50,240
the solution was correct and right now

177
00:07:50,240 --> 00:07:51,889
it just continues along with the

178
00:07:51,889 --> 00:07:53,990
exercise so basically what we do is we

179
00:07:53,990 --> 00:07:56,539
usually run a set of unit tests against

180
00:07:56,539 --> 00:07:58,580
your code to check if it's correct or

181
00:07:58,580 --> 00:08:01,159
not but you could theoretically Vie

182
00:08:01,159 --> 00:08:03,409
write any logic to validate logic so the

183
00:08:03,409 --> 00:08:05,479
framework is flexible in that manner

184
00:08:05,479 --> 00:08:09,229
and now if I try to log in again and see

185
00:08:09,229 --> 00:08:11,690
if my little direct object reference

186
00:08:11,690 --> 00:08:14,030
still works I will find that the bug has

187
00:08:14,030 --> 00:08:17,240
been fixed so I wouldn't be able to

188
00:08:17,240 --> 00:08:19,669
access that yeah it's an authorization

189
00:08:19,669 --> 00:08:22,970
error and basically we have this little

190
00:08:22,970 --> 00:08:24,979
state machine which is tracking the

191
00:08:24,979 --> 00:08:27,530
user's progress and right now if I go

192
00:08:27,530 --> 00:08:29,659
back to the platform and check the

193
00:08:29,659 --> 00:08:31,190
solution it will tell me that I have

194
00:08:31,190 --> 00:08:32,549
solved this challenge and we saw

195
00:08:32,549 --> 00:08:36,240
some yeah so basically this is how it

196
00:08:36,240 --> 00:08:41,219
works what we are doing now is we have

197
00:08:41,219 --> 00:08:43,469
open source this whole framework which

198
00:08:43,469 --> 00:08:45,149
allows you to create challenges like

199
00:08:45,149 --> 00:08:55,260
this so where was I yeah so we had our

200
00:08:55,260 --> 00:08:58,500
demo and now what's the value of this so

201
00:08:58,500 --> 00:09:00,600
why would anybody want to use this why

202
00:09:00,600 --> 00:09:04,019
is this good basically this is a smart

203
00:09:04,019 --> 00:09:06,450
security sandbox so you have your basic

204
00:09:06,450 --> 00:09:09,089
hacking lab and it's smart so it tries

205
00:09:09,089 --> 00:09:11,160
to detect what you are doing and tries

206
00:09:11,160 --> 00:09:13,640
to guide you into the right direction

207
00:09:13,640 --> 00:09:17,579
it's the value is as I have previously

208
00:09:17,579 --> 00:09:19,800
explained you don't need any learning

209
00:09:19,800 --> 00:09:22,050
curve to do this for example if I were

210
00:09:22,050 --> 00:09:24,300
to organize the CTF at my company I

211
00:09:24,300 --> 00:09:26,790
would require to give some sort of

212
00:09:26,790 --> 00:09:28,500
training to the developers so that they

213
00:09:28,500 --> 00:09:31,980
can pick it up and hack but this is not

214
00:09:31,980 --> 00:09:33,510
the case with these tutorials because

215
00:09:33,510 --> 00:09:35,940
anybody could just open up on open them

216
00:09:35,940 --> 00:09:37,620
up on a browser and start playing around

217
00:09:37,620 --> 00:09:39,510
with them because the bat would explain

218
00:09:39,510 --> 00:09:41,579
to you what to do from the from the

219
00:09:41,579 --> 00:09:46,170
scratch it's also real software running

220
00:09:46,170 --> 00:09:48,029
in this container so we don't have to

221
00:09:48,029 --> 00:09:50,640
emulate anything anything that you can

222
00:09:50,640 --> 00:09:52,320
run in the regular docker container you

223
00:09:52,320 --> 00:09:55,020
can run in this framework this is really

224
00:09:55,020 --> 00:09:59,730
flexible and it's also like hands-on and

225
00:09:59,730 --> 00:10:02,610
self-guided so you don't have to have a

226
00:10:02,610 --> 00:10:04,290
trainer explaining the steps to the

227
00:10:04,290 --> 00:10:05,880
users they can just do it on their own

228
00:10:05,880 --> 00:10:08,190
and I think that's a great thing because

229
00:10:08,190 --> 00:10:10,620
for example if I were a professor at a

230
00:10:10,620 --> 00:10:12,000
university or something

231
00:10:12,000 --> 00:10:14,070
teaching IT security or just coding in

232
00:10:14,070 --> 00:10:16,470
general I could create a lab such as

233
00:10:16,470 --> 00:10:18,300
this for my students and give it out to

234
00:10:18,300 --> 00:10:20,010
them so that they can play around on

235
00:10:20,010 --> 00:10:22,230
their own and learn something useful

236
00:10:22,230 --> 00:10:24,600
it's even good for like homework

237
00:10:24,600 --> 00:10:27,839
assignment but still it's fun like every

238
00:10:27,839 --> 00:10:29,880
time I felt like I learned something new

239
00:10:29,880 --> 00:10:31,890
and valuable it was by experimenting

240
00:10:31,890 --> 00:10:34,470
with something on my own so it's one

241
00:10:34,470 --> 00:10:36,810
thing to read something about software

242
00:10:36,810 --> 00:10:38,790
in a textbook or programming in general

243
00:10:38,790 --> 00:10:40,500
and it's a completely other thing to

244
00:10:40,500 --> 00:10:41,550
play around with it

245
00:10:41,550 --> 00:10:45,660
real life another thing is that it's for

246
00:10:45,660 --> 00:10:48,630
you basically anybody can use it it's

247
00:10:48,630 --> 00:10:50,580
really good for trainers teachers

248
00:10:50,580 --> 00:10:53,430
security people we are trying to get

249
00:10:53,430 --> 00:10:55,019
this whole framework out the whole

250
00:10:55,019 --> 00:10:58,130
community so that anybody can use it

251
00:10:58,130 --> 00:11:00,660
it's good because it's fast and easy to

252
00:11:00,660 --> 00:11:02,970
develop if you know container technology

253
00:11:02,970 --> 00:11:04,860
you should be you should feel right at

254
00:11:04,860 --> 00:11:06,690
home it's not hard to put together a

255
00:11:06,690 --> 00:11:08,670
challenge like the one I have shown you

256
00:11:08,670 --> 00:11:10,880
before it's just a few hours of coding

257
00:11:10,880 --> 00:11:15,420
it's also free and open source basically

258
00:11:15,420 --> 00:11:17,279
no proprietary technology involved it's

259
00:11:17,279 --> 00:11:20,100
darker containers our part of the

260
00:11:20,100 --> 00:11:22,140
framework which is the front end and the

261
00:11:22,140 --> 00:11:23,700
back end which I will explain in detail

262
00:11:23,700 --> 00:11:27,200
a bit later is open source as well and

263
00:11:27,200 --> 00:11:29,760
basically you can run the whole thing

264
00:11:29,760 --> 00:11:32,790
locally so the demo I have shown you was

265
00:11:32,790 --> 00:11:34,890
running on our platform but that's not

266
00:11:34,890 --> 00:11:36,959
required this whole product is

267
00:11:36,959 --> 00:11:39,120
completely independent of our platform

268
00:11:39,120 --> 00:11:40,950
and you cannot it locally ship it

269
00:11:40,950 --> 00:11:43,290
anywhere it's just container so nothing

270
00:11:43,290 --> 00:11:47,430
fancy what do you get with all this

271
00:11:47,430 --> 00:11:49,529
basically what the framework gives you

272
00:11:49,529 --> 00:11:53,160
is a set of components as you have seen

273
00:11:53,160 --> 00:11:55,079
it's pretty smart in telling what the

274
00:11:55,079 --> 00:11:57,600
user is doing so offering help based on

275
00:11:57,600 --> 00:11:59,339
the context and things like that popping

276
00:11:59,339 --> 00:12:02,010
up the code editor when it's needed we

277
00:12:02,010 --> 00:12:03,959
use a state machine for that of some

278
00:12:03,959 --> 00:12:06,660
sorts we provide you an IDE in the

279
00:12:06,660 --> 00:12:08,910
browser console and a terminal for your

280
00:12:08,910 --> 00:12:11,040
regular developer needs to write code or

281
00:12:11,040 --> 00:12:13,980
I don't know display the results of unit

282
00:12:13,980 --> 00:12:17,279
tests or anything we also give you this

283
00:12:17,279 --> 00:12:19,170
little chat component you have seen on

284
00:12:19,170 --> 00:12:20,550
the left so that you can actually

285
00:12:20,550 --> 00:12:24,000
instruct the user if it's required you

286
00:12:24,000 --> 00:12:26,190
get process management live logs from

287
00:12:26,190 --> 00:12:29,250
the whole container and lots of mors of

288
00:12:29,250 --> 00:12:31,770
stuff it's pretty flexible in terms of

289
00:12:31,770 --> 00:12:33,899
what you can do with it and you can

290
00:12:33,899 --> 00:12:35,370
always pick and choose the things you

291
00:12:35,370 --> 00:12:39,630
would like how does it work so

292
00:12:39,630 --> 00:12:42,800
the demo was I think that it was pretty

293
00:12:42,800 --> 00:12:46,350
like it was good in the terms that you

294
00:12:46,350 --> 00:12:47,819
could see what's really happening but

295
00:12:47,819 --> 00:12:50,639
how we implement all this basically what

296
00:12:50,639 --> 00:12:53,040
we have is a set of processes running in

297
00:12:53,040 --> 00:12:55,649
a docker container we use the init

298
00:12:55,649 --> 00:12:57,690
system called tinnie to do this with

299
00:12:57,690 --> 00:13:01,500
supervisor dvc just supervisor for

300
00:13:01,500 --> 00:13:04,470
processes we need an init system to

301
00:13:04,470 --> 00:13:07,190
avoid zombie processes and stuff but it

302
00:13:07,190 --> 00:13:10,370
doesn't really matter it works fine

303
00:13:10,370 --> 00:13:12,690
another thing is that we have an engine

304
00:13:12,690 --> 00:13:14,490
app server serving the front end which

305
00:13:14,490 --> 00:13:16,199
is being written in angular it's a

306
00:13:16,199 --> 00:13:20,420
single page application and we have this

307
00:13:20,420 --> 00:13:22,500
communication daemon running in the

308
00:13:22,500 --> 00:13:24,660
bragin dodaf campaign container which is

309
00:13:24,660 --> 00:13:26,940
like the whole heart of the thing

310
00:13:26,940 --> 00:13:29,339
basically it talks with the front end it

311
00:13:29,339 --> 00:13:31,259
talks to the process it sends messages

312
00:13:31,259 --> 00:13:33,240
you can instrument the framework to do

313
00:13:33,240 --> 00:13:36,839
things with this demon it's used for art

314
00:13:36,839 --> 00:13:38,819
with C and Evan to advertise meant and

315
00:13:38,819 --> 00:13:42,269
it works over 0 mq so if you want to

316
00:13:42,269 --> 00:13:44,339
talk to the framework he would basically

317
00:13:44,339 --> 00:13:46,920
connect to a 0 mq socket and send some

318
00:13:46,920 --> 00:13:49,769
sort of messages to it it connects to

319
00:13:49,769 --> 00:13:52,980
the front end via WebSockets and the

320
00:13:52,980 --> 00:13:54,689
thing about it is that the whole front

321
00:13:54,689 --> 00:13:56,490
end is hidden from you so you don't have

322
00:13:56,490 --> 00:13:58,589
to deal with it it's comes it comes for

323
00:13:58,589 --> 00:14:00,839
free so you only have to talk to the

324
00:14:00,839 --> 00:14:02,910
processes and/or daemon and we will deal

325
00:14:02,910 --> 00:14:05,160
with the front end as we have to so you

326
00:14:05,160 --> 00:14:06,569
don't have to touch it basically you

327
00:14:06,569 --> 00:14:08,130
don't have to write JavaScript if you

328
00:14:08,130 --> 00:14:10,589
don't want to you can but you don't have

329
00:14:10,589 --> 00:14:13,649
to how does this whole like message

330
00:14:13,649 --> 00:14:16,829
broker daemon teeny work it's it uses a

331
00:14:16,829 --> 00:14:19,459
simple JSON based message format so

332
00:14:19,459 --> 00:14:23,100
basically what happens is that we wanted

333
00:14:23,100 --> 00:14:25,350
it wanted to keep it simple so we could

334
00:14:25,350 --> 00:14:27,949
have van from something like the bus or

335
00:14:27,949 --> 00:14:30,240
RabbitMQ or some sort of existing

336
00:14:30,240 --> 00:14:33,660
message broker but we felt like it would

337
00:14:33,660 --> 00:14:35,459
be too much of a learning curve we

338
00:14:35,459 --> 00:14:37,290
needed something really simple which can

339
00:14:37,290 --> 00:14:39,389
be used for instrumenting our framework

340
00:14:39,389 --> 00:14:41,880
and even that were Theismann and what we

341
00:14:41,880 --> 00:14:44,310
did was implement our own and even

342
00:14:44,310 --> 00:14:46,139
simple J's obvious matches message

343
00:14:46,139 --> 00:14:47,790
format basic

344
00:14:47,790 --> 00:14:50,490
as I have mentioned we are using this

345
00:14:50,490 --> 00:14:53,430
for the most procedural course so like

346
00:14:53,430 --> 00:14:56,210
for example writing to the IDE I can

347
00:14:56,210 --> 00:14:58,980
override the text that's there or write

348
00:14:58,980 --> 00:15:01,020
to the console and to recommend to the

349
00:15:01,020 --> 00:15:02,970
terminal switch the layouts these are

350
00:15:02,970 --> 00:15:06,630
all like control events it's also used

351
00:15:06,630 --> 00:15:09,200
for event advertisements so for instance

352
00:15:09,200 --> 00:15:13,620
if somebody entered anything into the

353
00:15:13,620 --> 00:15:15,870
IDE I would be able to write a process

354
00:15:15,870 --> 00:15:17,580
which will be able to detect that so

355
00:15:17,580 --> 00:15:20,940
like he doesn't have to save the file or

356
00:15:20,940 --> 00:15:22,920
anything I can just track it through a

357
00:15:22,920 --> 00:15:26,280
time but the user is doing this whole

358
00:15:26,280 --> 00:15:29,370
demon thingy it routes messages between

359
00:15:29,370 --> 00:15:32,070
0 and Q and the WebSockets so basically

360
00:15:32,070 --> 00:15:34,380
what we did is connect the front end

361
00:15:34,380 --> 00:15:38,220
component to an IPC mechanism and that's

362
00:15:38,220 --> 00:15:40,680
what allows us to do this whole

363
00:15:40,680 --> 00:15:43,710
interactive container thing basically we

364
00:15:43,710 --> 00:15:47,520
have implemented something that's that's

365
00:15:47,520 --> 00:15:51,030
useful for keeping the life things in a

366
00:15:51,030 --> 00:15:52,940
website so like WebSockets

367
00:15:52,940 --> 00:15:55,440
before WebSockets we could have use of

368
00:15:55,440 --> 00:15:57,690
some sort of long polling but WebSockets

369
00:15:57,690 --> 00:16:01,280
is just better bi-directional contact

370
00:16:01,280 --> 00:16:04,940
processes are connecting to it over 0 mq

371
00:16:04,940 --> 00:16:07,620
it uses the published socket and the

372
00:16:07,620 --> 00:16:08,700
whole socket I will show an

373
00:16:08,700 --> 00:16:10,650
architectural diagram later

374
00:16:10,650 --> 00:16:12,720
and for ease of use we have also

375
00:16:12,720 --> 00:16:14,520
implemented a little component which

376
00:16:14,520 --> 00:16:16,080
allows you to communicate with the

377
00:16:16,080 --> 00:16:18,890
daemon over regular named pipes like

378
00:16:18,890 --> 00:16:21,300
studyin and so that would be named pipes

379
00:16:21,300 --> 00:16:23,160
and you could just write a line of G's

380
00:16:23,160 --> 00:16:26,990
into it and tell it to do something

381
00:16:29,820 --> 00:16:32,220
here is the re-texture diagram basically

382
00:16:32,220 --> 00:16:34,320
how it works is we have this whole

383
00:16:34,320 --> 00:16:37,440
routing solution in the middle and we

384
00:16:37,440 --> 00:16:40,170
separate the whole thing here like this

385
00:16:40,170 --> 00:16:41,640
is the front end you don't have to deal

386
00:16:41,640 --> 00:16:43,140
with it we talk to it over WebSockets

387
00:16:43,140 --> 00:16:46,710
and then we have our internal handlers

388
00:16:46,710 --> 00:16:48,960
these are processes which are able to

389
00:16:48,960 --> 00:16:51,900
communicate with the framework we have

390
00:16:51,900 --> 00:16:54,330
some buildings like the IDE or the

391
00:16:54,330 --> 00:16:56,820
terminal or the FSM the state machine

392
00:16:56,820 --> 00:16:59,010
and you can also implement your own if

393
00:16:59,010 --> 00:17:01,860
you wanted to and basically this allows

394
00:17:01,860 --> 00:17:04,109
you to communicate with the framework

395
00:17:04,109 --> 00:17:06,869
respond to events and do anything you

396
00:17:06,869 --> 00:17:08,849
want to it's quite flexible in that

397
00:17:08,849 --> 00:17:11,310
regard and you could also use our

398
00:17:11,310 --> 00:17:13,589
messaging broker to create your own

399
00:17:13,589 --> 00:17:16,770
messages and talk to your own components

400
00:17:16,770 --> 00:17:18,869
you can get pretty fancy with it if you

401
00:17:18,869 --> 00:17:23,430
wanted to how do you use it so what's

402
00:17:23,430 --> 00:17:26,910
what's it all about basically our

403
00:17:26,910 --> 00:17:28,860
components are using this daemon to

404
00:17:28,860 --> 00:17:30,540
communicate so they are sending messages

405
00:17:30,540 --> 00:17:33,810
and instrumenting each other talking to

406
00:17:33,810 --> 00:17:36,300
each other you can control them with the

407
00:17:36,300 --> 00:17:38,850
json api and they also broadcast

408
00:17:38,850 --> 00:17:40,980
relevant events so for instance if the

409
00:17:40,980 --> 00:17:42,960
user entered something to the terminal i

410
00:17:42,960 --> 00:17:44,940
would be able to respond to that so

411
00:17:44,940 --> 00:17:47,130
let's say that the user has listed all

412
00:17:47,130 --> 00:17:48,930
the files in the current directory then

413
00:17:48,930 --> 00:17:51,150
i would be able to I don't know write a

414
00:17:51,150 --> 00:17:53,010
message to him that good luck

415
00:17:53,010 --> 00:17:54,720
next time you should list the other

416
00:17:54,720 --> 00:17:57,440
directory or something like that

417
00:17:57,440 --> 00:17:59,550
basically what you would do to implement

418
00:17:59,550 --> 00:18:01,460
the tutorial as I have shown you before

419
00:18:01,460 --> 00:18:04,320
is just fill up a container with the

420
00:18:04,320 --> 00:18:06,030
software you need so install of app

421
00:18:06,030 --> 00:18:08,730
server in it for example if you use Java

422
00:18:08,730 --> 00:18:11,430
you could implement the web server in

423
00:18:11,430 --> 00:18:13,500
spring and put it into the container run

424
00:18:13,500 --> 00:18:15,840
it and you would be able to expose it to

425
00:18:15,840 --> 00:18:17,670
our fountains and then you could

426
00:18:17,670 --> 00:18:19,830
instrument the framework to deal with

427
00:18:19,830 --> 00:18:22,230
the user interactivity stuff so for

428
00:18:22,230 --> 00:18:25,260
instance you could implement your app

429
00:18:25,260 --> 00:18:28,280
server such that if somebody managed to

430
00:18:28,280 --> 00:18:30,930
exploit it and hack it then it would

431
00:18:30,930 --> 00:18:32,430
tell the framework that that happened

432
00:18:32,430 --> 00:18:34,290
and then you could step into the next

433
00:18:34,290 --> 00:18:36,720
step or pop up a code editor so that the

434
00:18:36,720 --> 00:18:39,390
user could fix the code it's really

435
00:18:39,390 --> 00:18:41,580
flexible

436
00:18:41,580 --> 00:18:43,960
now I've been talking about how this

437
00:18:43,960 --> 00:18:46,540
whole thing's whole thing works and like

438
00:18:46,540 --> 00:18:50,020
what it does and why but I would like to

439
00:18:50,020 --> 00:18:53,410
show to you how it really does it I will

440
00:18:53,410 --> 00:18:56,650
do this again like an interactive demo

441
00:18:56,650 --> 00:18:59,770
style of thing where I will just start

442
00:18:59,770 --> 00:19:02,770
up it on my own machine locally and see

443
00:19:02,770 --> 00:19:07,120
what it does let's trot it out this is

444
00:19:07,120 --> 00:19:09,220
just a script which is calling darker

445
00:19:09,220 --> 00:19:12,070
internally this is also part of the

446
00:19:12,070 --> 00:19:13,840
whole framework and as you can see we

447
00:19:13,840 --> 00:19:16,150
have the output of the framework here

448
00:19:16,150 --> 00:19:18,640
basically it's just a simple docker

449
00:19:18,640 --> 00:19:20,950
container and after it has started

450
00:19:20,950 --> 00:19:23,740
successfully I will be able to just open

451
00:19:23,740 --> 00:19:29,200
it up and see what it does so as you can

452
00:19:29,200 --> 00:19:32,170
see this is just a mock-up exercise it

453
00:19:32,170 --> 00:19:34,720
doesn't really do anything but here we

454
00:19:34,720 --> 00:19:36,910
have a Python web server and we have the

455
00:19:36,910 --> 00:19:39,280
code for it here on the right you have

456
00:19:39,280 --> 00:19:41,290
the messaging but you have seen under

457
00:19:41,290 --> 00:19:43,780
simple term you know so let's see what I

458
00:19:43,780 --> 00:19:46,210
can do with it one part of the

459
00:19:46,210 --> 00:19:48,070
interactivity we have implemented this

460
00:19:48,070 --> 00:19:50,590
for example if I created a new file like

461
00:19:50,590 --> 00:19:56,560
let's say touch some file then you will

462
00:19:56,560 --> 00:19:59,470
be able to see that the ID has picked up

463
00:19:59,470 --> 00:20:01,360
on it that there's a new file in the

464
00:20:01,360 --> 00:20:02,950
current working directory and has

465
00:20:02,950 --> 00:20:05,200
displayed it in a new tab and I can

466
00:20:05,200 --> 00:20:07,480
select it afterwards basically we used

467
00:20:07,480 --> 00:20:09,850
in notify to do this from the Linux

468
00:20:09,850 --> 00:20:15,220
kernel and we we just combined it with

469
00:20:15,220 --> 00:20:16,960
our messaging daemon and we are sending

470
00:20:16,960 --> 00:20:18,970
messages to tell the idea that there's a

471
00:20:18,970 --> 00:20:21,510
new file and it should display a new tab

472
00:20:21,510 --> 00:20:26,430
if I were to write something to the file

473
00:20:26,430 --> 00:20:29,230
you can see that it it picks up on that

474
00:20:29,230 --> 00:20:31,780
also so like it's completely interactive

475
00:20:31,780 --> 00:20:35,890
and it does it real-time I can see that

476
00:20:35,890 --> 00:20:37,270
I'm writing to it right now

477
00:20:37,270 --> 00:20:40,600
I could even do something like

478
00:20:40,600 --> 00:20:45,830
right the script like why to do sleep 1

479
00:20:45,830 --> 00:20:54,939
and echo something the file undone and

480
00:20:55,210 --> 00:20:57,950
right now this will just keep on writing

481
00:20:57,950 --> 00:20:59,750
to the file something so it's just

482
00:20:59,750 --> 00:21:01,820
really interactive and works really

483
00:21:01,820 --> 00:21:03,890
of course this verse the other real

484
00:21:03,890 --> 00:21:05,990
hands so if I were to display the

485
00:21:05,990 --> 00:21:08,810
contents of the file I'm also able to

486
00:21:08,810 --> 00:21:11,060
write to the ID and you can see that

487
00:21:11,060 --> 00:21:14,650
it's filling up drive these

488
00:21:14,650 --> 00:21:16,850
interactivity thingies are provided by

489
00:21:16,850 --> 00:21:18,680
the framework for free so you don't have

490
00:21:18,680 --> 00:21:20,570
to do anything to be able to do this is

491
00:21:20,570 --> 00:21:23,330
just if you use our ID it just does

492
00:21:23,330 --> 00:21:28,190
these things yep another thing you can

493
00:21:28,190 --> 00:21:31,100
do is you can write to this messaging

494
00:21:31,100 --> 00:21:33,380
component to tell the user what to do

495
00:21:33,380 --> 00:21:36,650
basically how we expose our API is 2-0

496
00:21:36,650 --> 00:21:38,240
ampule sockets but it would be really

497
00:21:38,240 --> 00:21:40,190
hard for me to shoot show that through a

498
00:21:40,190 --> 00:21:42,110
terminal so I have to come up with

499
00:21:42,110 --> 00:21:44,600
something else I have mentioned

500
00:21:44,600 --> 00:21:46,910
previously that we expose our API

501
00:21:46,910 --> 00:21:50,180
through named pipes as well so what I'm

502
00:21:50,180 --> 00:21:53,030
able to do is just create a named pipe

503
00:21:53,030 --> 00:21:57,470
and we have this directory in the run

504
00:21:57,470 --> 00:22:02,000
folder and any pipe you create there the

505
00:22:02,000 --> 00:22:03,650
framework will detect it and connect to

506
00:22:03,650 --> 00:22:06,080
it and afterwards you will be able to

507
00:22:06,080 --> 00:22:07,550
use that PI to communicate with the

508
00:22:07,550 --> 00:22:09,860
framework read and send messages to it

509
00:22:09,860 --> 00:22:12,320
so I will create a send pipe for

510
00:22:12,320 --> 00:22:15,560
instance and in this case I will be able

511
00:22:15,560 --> 00:22:18,500
to just send commands to the pipe if

512
00:22:18,500 --> 00:22:21,830
everything went conducting let's see yep

513
00:22:21,830 --> 00:22:24,020
we have our pipe right there and let's

514
00:22:24,020 --> 00:22:26,360
write writing something to it to see

515
00:22:26,360 --> 00:22:27,190
what happens

516
00:22:27,190 --> 00:22:32,290
so I will just run the sand and as I

517
00:22:32,290 --> 00:22:34,810
have mentioned previously we use JSON to

518
00:22:34,810 --> 00:22:36,640
communicate because it's just plain

519
00:22:36,640 --> 00:22:38,230
simple you don't have to think about

520
00:22:38,230 --> 00:22:42,490
anything our framework uses a special

521
00:22:42,490 --> 00:22:45,010
format of J'son for addressing the key

522
00:22:45,010 --> 00:22:47,830
key is to tell where to send a message

523
00:22:47,830 --> 00:22:50,830
basically and we have this whole remote

524
00:22:50,830 --> 00:22:53,020
procedure call mechanism which enables

525
00:22:53,020 --> 00:22:55,840
us to to tell what to do so for instance

526
00:22:55,840 --> 00:22:58,990
I would be able to say message that

527
00:22:58,990 --> 00:23:05,160
sound and message would be I don't know

528
00:23:05,160 --> 00:23:07,990
something and in this case you can see

529
00:23:07,990 --> 00:23:10,480
that here is the message I have just

530
00:23:10,480 --> 00:23:14,560
sent this little thing is just John Cena

531
00:23:14,560 --> 00:23:17,230
stuff is just a fun way to show that if

532
00:23:17,230 --> 00:23:19,300
I enter something to the terminal I can

533
00:23:19,300 --> 00:23:21,820
detect that and do something to it so

534
00:23:21,820 --> 00:23:24,280
for instance if I told the user to

535
00:23:24,280 --> 00:23:26,800
delete the directory then I would

536
00:23:26,800 --> 00:23:30,310
monitor the terminal so if he entered

537
00:23:30,310 --> 00:23:31,720
the comment which would the director

538
00:23:31,720 --> 00:23:34,000
will check if the directory exists and

539
00:23:34,000 --> 00:23:38,080
tell him that it was correct solution so

540
00:23:38,080 --> 00:23:42,130
something like that for instance as you

541
00:23:42,130 --> 00:23:44,530
can see we have this web service here

542
00:23:44,530 --> 00:23:47,650
which I have mentioned and basically the

543
00:23:47,650 --> 00:23:50,110
source code of it is on the left here on

544
00:23:50,110 --> 00:23:52,180
the right side here so it's the real

545
00:23:52,180 --> 00:23:55,060
code running for instance if I was to I

546
00:23:55,060 --> 00:23:56,890
don't know write something which is not

547
00:23:56,890 --> 00:23:59,440
correct Python so that won't work the

548
00:23:59,440 --> 00:24:01,540
interpreter will fail on it and try to

549
00:24:01,540 --> 00:24:04,180
deploy it it will tell me that it didn't

550
00:24:04,180 --> 00:24:06,420
work and I should try something else and

551
00:24:06,420 --> 00:24:08,560
afterwards I would be able to see the

552
00:24:08,560 --> 00:24:11,230
host actress in the console so it just

553
00:24:11,230 --> 00:24:14,740
the real software running another thing

554
00:24:14,740 --> 00:24:17,500
is that these logs are completely live

555
00:24:17,500 --> 00:24:21,070
so if I were to fix my code and start

556
00:24:21,070 --> 00:24:23,680
clicking around on the website then you

557
00:24:23,680 --> 00:24:26,600
can see that the logs are coming

558
00:24:26,600 --> 00:24:28,820
so if I pick something then it will just

559
00:24:28,820 --> 00:24:31,460
tell me that it has sent a request to

560
00:24:31,460 --> 00:24:33,980
the server and this works with anything

561
00:24:33,980 --> 00:24:37,100
so you could implement this in java.net

562
00:24:37,100 --> 00:24:39,440
any language you want to the only thing

563
00:24:39,440 --> 00:24:42,050
you have to do is run it to supervisor

564
00:24:42,050 --> 00:24:44,060
and tell the framework which process you

565
00:24:44,060 --> 00:24:45,890
are interested in and it will be able to

566
00:24:45,890 --> 00:24:48,890
to read the logs of the process

567
00:24:48,890 --> 00:24:55,280
basically to like to prove that this is

568
00:24:55,280 --> 00:24:57,590
real code running for example we have

569
00:24:57,590 --> 00:24:59,360
this authenticate function here

570
00:24:59,360 --> 00:25:03,350
basically all it does is try to read the

571
00:25:03,350 --> 00:25:05,600
user from the database and validate if

572
00:25:05,600 --> 00:25:09,740
it's correct and it raises an invalidate

573
00:25:09,740 --> 00:25:11,660
card an invalid credentials error if

574
00:25:11,660 --> 00:25:14,330
it's not so what I will do is just tell

575
00:25:14,330 --> 00:25:17,150
it to return instead of doing that and

576
00:25:17,150 --> 00:25:19,940
basically what I did with this is now I

577
00:25:19,940 --> 00:25:24,500
can login with any user so I can just or

578
00:25:24,500 --> 00:25:29,150
I have something wrong yep there's a PI

579
00:25:29,150 --> 00:25:32,630
belated but as you can see I'm not

580
00:25:32,630 --> 00:25:34,610
really good at live demos but the

581
00:25:34,610 --> 00:25:36,470
framework will tell me what I did wrong

582
00:25:36,470 --> 00:25:39,230
so there is a permission error I'm

583
00:25:39,230 --> 00:25:40,910
trying to open a pipe which is not

584
00:25:40,910 --> 00:25:44,060
available right now so yeah this is like

585
00:25:44,060 --> 00:25:46,670
real code running and the fun thing

586
00:25:46,670 --> 00:25:50,360
about it is you can do this with any

587
00:25:50,360 --> 00:25:52,850
language ready so like you could just

588
00:25:52,850 --> 00:25:55,730
write a bar script or something and tell

589
00:25:55,730 --> 00:25:59,410
people what to do with it

590
00:25:59,410 --> 00:26:04,310
all right let's see what else we can do

591
00:26:04,310 --> 00:26:06,430
I have mentioned that the framework

592
00:26:06,430 --> 00:26:09,620
raises events of interesting interesting

593
00:26:09,620 --> 00:26:11,960
things that happened while the user is

594
00:26:11,960 --> 00:26:15,260
doing his stuff and for instance I will

595
00:26:15,260 --> 00:26:17,350
be able to create the script called

596
00:26:17,350 --> 00:26:20,350
notify

597
00:26:20,690 --> 00:26:25,080
here and let's write a basket to detect

598
00:26:25,080 --> 00:26:27,690
but the user has written to the ID for

599
00:26:27,690 --> 00:26:29,880
instance so in the beginning I would

600
00:26:29,880 --> 00:26:32,220
create two pipes to communicate with the

601
00:26:32,220 --> 00:26:38,280
framework I would create this pipe and I

602
00:26:38,280 --> 00:26:39,810
would create another one to receive

603
00:26:39,810 --> 00:26:44,400
messages as well there is nothing

604
00:26:44,400 --> 00:26:46,800
magical to these pipes so these are just

605
00:26:46,800 --> 00:26:49,110
regular named pipes like you could

606
00:26:49,110 --> 00:26:51,090
create them from any language or any way

607
00:26:51,090 --> 00:26:54,030
you would like to and afterwards I could

608
00:26:54,030 --> 00:26:56,700
set up a vial loop in which I would read

609
00:26:56,700 --> 00:26:59,580
the messages so this is just a bash way

610
00:26:59,580 --> 00:27:01,560
to read a line from a file basically

611
00:27:01,560 --> 00:27:02,880
it's nothing else

612
00:27:02,880 --> 00:27:08,040
free their line do something basically I

613
00:27:08,040 --> 00:27:10,500
will just display the message for now

614
00:27:10,500 --> 00:27:13,980
and let's see what happens this is how I

615
00:27:13,980 --> 00:27:20,990
can read the line from a file in bash

616
00:27:21,920 --> 00:27:24,750
all right so see what happens if I

617
00:27:24,750 --> 00:27:28,320
execute its script as you can see

618
00:27:28,320 --> 00:27:29,970
there's an arrow because the file

619
00:27:29,970 --> 00:27:31,950
already exists was the final issue and

620
00:27:31,950 --> 00:27:34,920
if I'm switching tabs you can see that

621
00:27:34,920 --> 00:27:37,110
there are events being grazed because I

622
00:27:37,110 --> 00:27:39,510
have switched tabs and basically what he

623
00:27:39,510 --> 00:27:41,310
would be able to you do from your own

624
00:27:41,310 --> 00:27:44,130
components is detect that somebody has

625
00:27:44,130 --> 00:27:46,350
switched files on the IDE and do

626
00:27:46,350 --> 00:27:50,210
something based on that or for instance

627
00:27:50,210 --> 00:27:54,390
if I was to I don't know send some other

628
00:27:54,390 --> 00:27:57,120
like I clicked on the web service and

629
00:27:57,120 --> 00:27:59,670
I'm getting the live logs like just

630
00:27:59,670 --> 00:28:01,830
printed out these are basically logs

631
00:28:01,830 --> 00:28:05,280
that are produced by the process and in

632
00:28:05,280 --> 00:28:07,200
the console it's displayed nicely of

633
00:28:07,200 --> 00:28:10,050
course but this is just the dump of a

634
00:28:10,050 --> 00:28:11,180
JSON

635
00:28:11,180 --> 00:28:13,760
thingy so it's not very nice okay so

636
00:28:13,760 --> 00:28:16,400
what can I do with this for instance I

637
00:28:16,400 --> 00:28:19,700
could do something like detecting

638
00:28:19,700 --> 00:28:21,530
somebody has written something to the ID

639
00:28:21,530 --> 00:28:26,440
so I would tell you that if the line

640
00:28:26,440 --> 00:28:29,690
let's say that the line contains

641
00:28:29,690 --> 00:28:35,780
something like I don't know cat then I

642
00:28:35,780 --> 00:28:39,710
would just just I don't know

643
00:28:39,710 --> 00:28:42,550
echo something and see what happens so

644
00:28:42,550 --> 00:28:48,410
in this case if I run this script you

645
00:28:48,410 --> 00:28:50,450
can see that it has printed it out

646
00:28:50,450 --> 00:28:52,340
several times already that's because

647
00:28:52,340 --> 00:28:54,830
that the file contains that string

648
00:28:54,830 --> 00:28:57,770
itself but if I was to switch to this

649
00:28:57,770 --> 00:29:00,320
other file which doesn't contain it then

650
00:29:00,320 --> 00:29:02,450
you can see that I'm writing writing

651
00:29:02,450 --> 00:29:04,520
writing and nothing happens and if I

652
00:29:04,520 --> 00:29:07,310
write cat then the terminal will start

653
00:29:07,310 --> 00:29:09,950
going down because that's the event I'm

654
00:29:09,950 --> 00:29:12,980
interested in and you could do anything

655
00:29:12,980 --> 00:29:17,180
with this so basically you could compile

656
00:29:17,180 --> 00:29:18,950
and run the code and see if it's correct

657
00:29:18,950 --> 00:29:21,770
or I don't know you could ask the user

658
00:29:21,770 --> 00:29:24,170
to enter some sort of specific command

659
00:29:24,170 --> 00:29:26,840
into your file and do that as well so

660
00:29:26,840 --> 00:29:29,360
it's really interactive and you can do

661
00:29:29,360 --> 00:29:34,030
anything with it all right

662
00:29:34,759 --> 00:29:36,919
another thing about the whole framework

663
00:29:36,919 --> 00:29:41,690
is that as you can see we have these

664
00:29:41,690 --> 00:29:45,320
little layouts on the side so you can

665
00:29:45,320 --> 00:29:47,840
switch between them dynamically during

666
00:29:47,840 --> 00:29:49,700
the tutorial and just show up the

667
00:29:49,700 --> 00:29:51,950
components you really need so there are

668
00:29:51,950 --> 00:29:53,330
challenges where you don't need a web

669
00:29:53,330 --> 00:29:55,279
service for instance then you could just

670
00:29:55,279 --> 00:29:57,889
hide it away and just display the ID and

671
00:29:57,889 --> 00:30:01,369
the terminal and stuff our API also

672
00:30:01,369 --> 00:30:03,889
allows you to switch layouts dynamically

673
00:30:03,889 --> 00:30:06,169
so you would be able to do something

674
00:30:06,169 --> 00:30:09,769
like I don't know this is the correct

675
00:30:09,769 --> 00:30:11,450
API message for doing something like

676
00:30:11,450 --> 00:30:18,940
this let's say front and that dashboard

677
00:30:19,779 --> 00:30:23,989
and let's say that I would like to

678
00:30:23,989 --> 00:30:27,230
change the layout to something like I

679
00:30:27,230 --> 00:30:32,149
don't know terminal only all our layouts

680
00:30:32,149 --> 00:30:34,190
have these names and these are

681
00:30:34,190 --> 00:30:36,769
documented in our API documentation so

682
00:30:36,769 --> 00:30:38,600
now that I send this machine messages I

683
00:30:38,600 --> 00:30:40,399
switch the layout to the terminal in

684
00:30:40,399 --> 00:30:42,859
layout and you could create your own

685
00:30:42,859 --> 00:30:44,960
commands as well and deal with them as

686
00:30:44,960 --> 00:30:47,419
you would like to another thing that you

687
00:30:47,419 --> 00:30:49,700
can do is that for instance we have this

688
00:30:49,700 --> 00:30:52,039
little web service here you could

689
00:30:52,039 --> 00:30:55,429
display a wearable for it for instance

690
00:30:55,429 --> 00:31:03,730
so if I were to say let's say bar and

691
00:31:03,730 --> 00:31:07,759
tell it true then it would display there

692
00:31:07,759 --> 00:31:10,039
where a bar and in this case I will be

693
00:31:10,039 --> 00:31:12,080
able to navigate video or do anything

694
00:31:12,080 --> 00:31:14,090
with it I would like to I could also

695
00:31:14,090 --> 00:31:17,029
like switch the URL of the iframe from

696
00:31:17,029 --> 00:31:19,190
the API I could reload the whole website

697
00:31:19,190 --> 00:31:22,450
I could do anything to it and it's

698
00:31:22,450 --> 00:31:25,309
really expand expand scible as well so

699
00:31:25,309 --> 00:31:27,350
if you would like to add any capability

700
00:31:27,350 --> 00:31:29,179
to the framework you are able to do so

701
00:31:29,179 --> 00:31:32,809
since it's open source and you can do it

702
00:31:32,809 --> 00:31:34,940
for anything you can use it for anything

703
00:31:34,940 --> 00:31:36,640
you would like to

704
00:31:36,640 --> 00:31:39,799
so yep basically that's how the

705
00:31:39,799 --> 00:31:44,029
framework works and operates and I guess

706
00:31:44,029 --> 00:31:46,100
that based on this little demonstration

707
00:31:46,100 --> 00:31:48,890
you will be able to imagine things to do

708
00:31:48,890 --> 00:31:51,860
with it so for the purposes of education

709
00:31:51,860 --> 00:31:54,230
you could I don't know educate your

710
00:31:54,230 --> 00:31:56,890
users to how to set up a cluster of

711
00:31:56,890 --> 00:31:59,210
services or whatever it's really

712
00:31:59,210 --> 00:32:01,549
flexible and this is just standard

713
00:32:01,549 --> 00:32:03,919
containers so you are able to run any

714
00:32:03,919 --> 00:32:08,440
code in it you would like to okay so

715
00:32:08,440 --> 00:32:17,779
let's go back to the slides and how is

716
00:32:17,779 --> 00:32:19,760
the licensing and how are we open

717
00:32:19,760 --> 00:32:21,679
sourcing this thing so basically we

718
00:32:21,679 --> 00:32:23,389
would like to give back to the community

719
00:32:23,389 --> 00:32:25,429
and if you would like to use this

720
00:32:25,429 --> 00:32:27,200
framework you can for any purpose

721
00:32:27,200 --> 00:32:30,850
basically it's licensed and the lesser

722
00:32:30,850 --> 00:32:34,730
GPL so basically you can do anything you

723
00:32:34,730 --> 00:32:36,529
want to do it it's really permissive

724
00:32:36,529 --> 00:32:39,320
it's free as in freedom it's Stormin

725
00:32:39,320 --> 00:32:41,299
approved and everything and it's

726
00:32:41,299 --> 00:32:43,340
available on github as well so you can

727
00:32:43,340 --> 00:32:46,100
just go on there and I don't know hit up

728
00:32:46,100 --> 00:32:49,010
or requests and do something to it so if

729
00:32:49,010 --> 00:32:50,960
this is something that you have liked

730
00:32:50,960 --> 00:32:53,899
then please please feel free to

731
00:32:53,899 --> 00:32:57,139
contribute and give back also you can

732
00:32:57,139 --> 00:33:00,380
just download it play around with it if

733
00:33:00,380 --> 00:33:01,970
you don't like it and throw it away but

734
00:33:01,970 --> 00:33:03,919
if you like it then you can contribute

735
00:33:03,919 --> 00:33:07,039
or create challenges you want to I think

736
00:33:07,039 --> 00:33:10,070
that basically if you want to give

737
00:33:10,070 --> 00:33:11,990
training to anybody this is something

738
00:33:11,990 --> 00:33:14,450
that's really nice to use so you just

739
00:33:14,450 --> 00:33:16,789
put together a few software examples

740
00:33:16,789 --> 00:33:19,610
into a container and use it and as I

741
00:33:19,610 --> 00:33:20,779
have told you this is completely

742
00:33:20,779 --> 00:33:23,480
independent of our company so you can

743
00:33:23,480 --> 00:33:24,070
run it low

744
00:33:24,070 --> 00:33:26,620
we run it in a server run it anymore so

745
00:33:26,620 --> 00:33:29,620
it's it's completely freed we you are

746
00:33:29,620 --> 00:33:32,020
not depending on anybody you have just

747
00:33:32,020 --> 00:33:35,290
the code and yeah basically that's it

748
00:33:35,290 --> 00:33:37,570
it's variable and github as I have said

749
00:33:37,570 --> 00:33:43,240
check it out I feel like this is

750
00:33:43,240 --> 00:33:45,010
something really trendy to do to

751
00:33:45,010 --> 00:33:47,290
open-source things nowadays but it's

752
00:33:47,290 --> 00:33:50,140
also something really useful because we

753
00:33:50,140 --> 00:33:52,270
can learn from each other a lot so for

754
00:33:52,270 --> 00:33:53,410
instance if you didn't like something

755
00:33:53,410 --> 00:33:55,960
about the demo then you could just go up

756
00:33:55,960 --> 00:33:57,760
on github read the code and change it

757
00:33:57,760 --> 00:34:00,940
and send me a pull request and it might

758
00:34:00,940 --> 00:34:05,110
be great so I think that basically

759
00:34:05,110 --> 00:34:08,139
that's all so thank you for listening

760
00:34:08,139 --> 00:34:10,929
and please feel free to shoot any

761
00:34:10,929 --> 00:34:16,440
questions if you have them yep

762
00:34:17,010 --> 00:34:19,409
that's a good question what you can do

763
00:34:19,409 --> 00:34:23,040
is pass the docker UNIX domain sockets

764
00:34:23,040 --> 00:34:25,500
as a volume and then you will be able to

765
00:34:25,500 --> 00:34:28,770
call it from a container it's a mess I

766
00:34:28,770 --> 00:34:30,719
know it doesn't sound good I wouldn't do

767
00:34:30,719 --> 00:34:33,590
it but you can do it if you want to

768
00:34:33,590 --> 00:34:37,280
basically what you could do is like

769
00:34:37,280 --> 00:34:39,899
instrumenting the docker Damon your

770
00:34:39,899 --> 00:34:41,460
container is running from it's not

771
00:34:41,460 --> 00:34:43,949
really advisable but if you were to run

772
00:34:43,949 --> 00:34:46,469
separate instances of darker then you

773
00:34:46,469 --> 00:34:48,869
could I don't know random in a VM and

774
00:34:48,869 --> 00:34:51,750
pass that socket in so it's possible to

775
00:34:51,750 --> 00:34:53,460
do but even the docker team wouldn't

776
00:34:53,460 --> 00:34:55,469
advise you to run docker in docker they

777
00:34:55,469 --> 00:34:57,330
only use it for developing dagger itself

778
00:34:57,330 --> 00:35:00,869
so you can do it but I would advise

779
00:35:00,869 --> 00:35:07,250
against it basically any other questions

780
00:35:11,680 --> 00:35:14,950
basically we are just using Dockers so

781
00:35:14,950 --> 00:35:17,619
it's using namespaces from the kernel

782
00:35:17,619 --> 00:35:19,539
but we are not touching it in any way

783
00:35:19,539 --> 00:35:22,210
whatsoever so these are like standard

784
00:35:22,210 --> 00:35:24,039
compliant container as you could run

785
00:35:24,039 --> 00:35:26,710
them with portman or something else not

786
00:35:26,710 --> 00:35:27,460
just docker

787
00:35:27,460 --> 00:35:32,079
so our tooling is dependent on docker

788
00:35:32,079 --> 00:35:34,690
so for example our streets are calling

789
00:35:34,690 --> 00:35:38,140
dr. bierd okarin docker whatever but if

790
00:35:38,140 --> 00:35:39,880
you were to build an image then you

791
00:35:39,880 --> 00:35:42,160
could run it with any other tooling as

792
00:35:42,160 --> 00:35:44,380
you like to so it's just the route

793
00:35:44,380 --> 00:35:50,910
afresh at that point anything else

794
00:35:55,610 --> 00:35:59,650
sorry could you repeat that

795
00:35:59,650 --> 00:36:02,450
yeah sure it would work with any process

796
00:36:02,450 --> 00:36:05,420
so how it works internally is I have

797
00:36:05,420 --> 00:36:08,120
mentioned that we use the process

798
00:36:08,120 --> 00:36:10,640
management system called supervisor to

799
00:36:10,640 --> 00:36:12,500
run processes in the container and

800
00:36:12,500 --> 00:36:15,020
basically what the supervisor thingie

801
00:36:15,020 --> 00:36:17,840
allows you to do is it allows you to

802
00:36:17,840 --> 00:36:20,510
tell which file the process is writing

803
00:36:20,510 --> 00:36:22,760
its logs do and what our framework does

804
00:36:22,760 --> 00:36:25,910
it takes that file and subscribes you

805
00:36:25,910 --> 00:36:27,950
notify events to it so the kernel would

806
00:36:27,950 --> 00:36:30,020
time even anything happen to that file

807
00:36:30,020 --> 00:36:31,610
and then I would read it and send it to

808
00:36:31,610 --> 00:36:34,400
the front end so that's how it works so

809
00:36:34,400 --> 00:36:36,980
it's completely generic you could use it

810
00:36:36,980 --> 00:36:38,810
for any language whatsoever which is

811
00:36:38,810 --> 00:36:41,570
capable of logging to a file so yeah

812
00:36:41,570 --> 00:36:42,680
that's how it works

813
00:36:42,680 --> 00:36:47,859
awesome any other questions

814
00:36:48,970 --> 00:36:59,780
all right great so thank you guys thank

815
00:36:59,780 --> 00:37:02,420
you and we've got a few minutes till

816
00:37:02,420 --> 00:37:05,060
lunch so about seven minutes or so so I

817
00:37:05,060 --> 00:37:06,620
would recommend get your last final

818
00:37:06,620 --> 00:37:09,080
stance on your vendor passports and

819
00:37:09,080 --> 00:37:11,240
posting those passports in the reception

820
00:37:11,240 --> 00:37:13,250
reception registration when you've done

821
00:37:13,250 --> 00:37:15,050
that and then lunch will be in the main

822
00:37:15,050 --> 00:37:17,330
room in about six seven minutes or so

823
00:37:17,330 --> 00:37:19,840
okay

