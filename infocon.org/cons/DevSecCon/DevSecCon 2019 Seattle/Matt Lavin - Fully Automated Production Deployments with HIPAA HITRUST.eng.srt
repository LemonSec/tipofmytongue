1
00:00:00,140 --> 00:00:08,010
I'm gangster are we ready okay

2
00:00:08,010 --> 00:00:10,580
I always just pointed out that this has

3
00:00:10,580 --> 00:00:13,590
wit instead of width so I'm gonna do it

4
00:00:13,590 --> 00:00:15,540
with a little bit of style here this is

5
00:00:15,540 --> 00:00:17,150
automated production deployment to wit

6
00:00:17,150 --> 00:00:23,010
HIPPA high-trust compliance the thing to

7
00:00:23,010 --> 00:00:26,130
know here is I am very impatient you can

8
00:00:26,130 --> 00:00:28,710
ask my team anybody I work with I like

9
00:00:28,710 --> 00:00:33,000
stuff to be done right away so I I want

10
00:00:33,000 --> 00:00:35,100
to see changes that I work on get to

11
00:00:35,100 --> 00:00:38,160
production fast if there's the bug fix I

12
00:00:38,160 --> 00:00:40,379
want it fixed and rolled out as quickly

13
00:00:40,379 --> 00:00:41,250
as possible

14
00:00:41,250 --> 00:00:43,980
I want security fixes out fast I want to

15
00:00:43,980 --> 00:00:47,690
know if customers like new features and

16
00:00:47,690 --> 00:00:50,010
please take my word that I'm a better

17
00:00:50,010 --> 00:00:52,379
developer than I am a presenter or slide

18
00:00:52,379 --> 00:00:58,680
creator so along this I go to these tech

19
00:00:58,680 --> 00:01:00,300
conferences and I see people like

20
00:01:00,300 --> 00:01:02,550
Netflix and Instagram delivering code

21
00:01:02,550 --> 00:01:05,700
you know a hundred times a day and it's

22
00:01:05,700 --> 00:01:08,280
awesome because they can really quickly

23
00:01:08,280 --> 00:01:09,750
iterate on new features for their

24
00:01:09,750 --> 00:01:12,750
customers and I'm always jealous when I

25
00:01:12,750 --> 00:01:14,250
leave there they've bought these great

26
00:01:14,250 --> 00:01:16,590
pipelines that they've built but they

27
00:01:16,590 --> 00:01:18,479
also have gigantic teams building them

28
00:01:18,479 --> 00:01:23,729
and I don't so I work a small company

29
00:01:23,729 --> 00:01:26,850
all growing larger every day called life

30
00:01:26,850 --> 00:01:29,939
omec and the other wrinkle is that all

31
00:01:29,939 --> 00:01:32,790
of our data is sensitive data so we

32
00:01:32,790 --> 00:01:36,090
manage the data for doctors and

33
00:01:36,090 --> 00:01:38,759
researchers to analyze their patients so

34
00:01:38,759 --> 00:01:40,619
you know some organizations have a

35
00:01:40,619 --> 00:01:43,020
question of is that sensitive is that

36
00:01:43,020 --> 00:01:45,450
personal and it's like a pretty safe

37
00:01:45,450 --> 00:01:47,130
assumption that everything in our

38
00:01:47,130 --> 00:01:49,159
organization is personal and sensitive

39
00:01:49,159 --> 00:01:54,030
so it's tempting to say well we just

40
00:01:54,030 --> 00:01:57,119
can't move as quickly as Instagram or

41
00:01:57,119 --> 00:01:59,070
Netflix because we have sensitive data

42
00:01:59,070 --> 00:02:02,340
and we're a small team and we want to

43
00:02:02,340 --> 00:02:06,060
maintain compliance but I'd like you

44
00:02:06,060 --> 00:02:08,610
guys to leave with the the hope that you

45
00:02:08,610 --> 00:02:10,840
really can so

46
00:02:10,840 --> 00:02:13,630
let me tell you about this cool idea I

47
00:02:13,630 --> 00:02:16,120
read recently it's called the suckers

48
00:02:16,120 --> 00:02:18,340
choice actually had already done this

49
00:02:18,340 --> 00:02:20,530
presentation before I learned the term

50
00:02:20,530 --> 00:02:24,190
but it just fits so nicely I think too

51
00:02:24,190 --> 00:02:26,020
many people stop when they say something

52
00:02:26,020 --> 00:02:28,660
like well you can have speed or security

53
00:02:28,660 --> 00:02:31,060
you know you can have quality or fast

54
00:02:31,060 --> 00:02:33,880
delivery and I think most of the time

55
00:02:33,880 --> 00:02:34,989
people are just kind of fooling

56
00:02:34,989 --> 00:02:39,340
themselves about that you can you can

57
00:02:39,340 --> 00:02:41,500
think you don't need to phrase it in

58
00:02:41,500 --> 00:02:43,540
terms of something or something else

59
00:02:43,540 --> 00:02:45,910
the suckers choice says just change the

60
00:02:45,910 --> 00:02:48,519
subject to say and so I want security

61
00:02:48,519 --> 00:02:51,819
and speed and so our kong is head of

62
00:02:51,819 --> 00:02:53,260
security for life Oh Megan so I said to

63
00:02:53,260 --> 00:02:55,390
him hey I want to go continuous delivery

64
00:02:55,390 --> 00:02:58,840
all the time with no humans and I just

65
00:02:58,840 --> 00:03:00,099
want to get everything done really fast

66
00:03:00,099 --> 00:03:02,620
and I want to maintain compliance how do

67
00:03:02,620 --> 00:03:05,410
we do that and he says um we can

68
00:03:05,410 --> 00:03:08,230
probably do that so we work together and

69
00:03:08,230 --> 00:03:10,330
I want to show you what we built it's

70
00:03:10,330 --> 00:03:14,290
possible quick overview the tools we use

71
00:03:14,290 --> 00:03:16,329
these are pretty standard but I'm gonna

72
00:03:16,329 --> 00:03:19,060
just I'm gonna refer to things kind of

73
00:03:19,060 --> 00:03:20,560
generically and some further slides so

74
00:03:20,560 --> 00:03:22,150
this keeps you what's what we're using

75
00:03:22,150 --> 00:03:22,870
in mind

76
00:03:22,870 --> 00:03:27,760
AWS we're fully AWS we use two or three

77
00:03:27,760 --> 00:03:30,370
accounts primarily two for this talk so

78
00:03:30,370 --> 00:03:31,569
we have a dev account than a production

79
00:03:31,569 --> 00:03:34,180
account we use get bitbucket

80
00:03:34,180 --> 00:03:36,040
which is really nice because bitbucket

81
00:03:36,040 --> 00:03:38,160
has extra API so that I'll refer to

82
00:03:38,160 --> 00:03:41,230
later we use Jenkins for all of our

83
00:03:41,230 --> 00:03:43,120
build test automation production

84
00:03:43,120 --> 00:03:46,569
deployments and we use JIRA to track

85
00:03:46,569 --> 00:03:49,540
bugs but key for this talk we also use

86
00:03:49,540 --> 00:03:51,940
JIRA to track change management requests

87
00:03:51,940 --> 00:03:54,069
for things like modifications of

88
00:03:54,069 --> 00:03:56,290
production or promotion of a build to

89
00:03:56,290 --> 00:03:59,470
production and finally we use security

90
00:03:59,470 --> 00:04:01,720
tools I didn't list them all but one is

91
00:04:01,720 --> 00:04:04,950
sneak or snake and

92
00:04:05,160 --> 00:04:10,170
yeah so here's the flow from a

93
00:04:10,170 --> 00:04:12,000
developer's machine to a change in

94
00:04:12,000 --> 00:04:15,120
production this is probably pretty

95
00:04:15,120 --> 00:04:16,470
standard I'm gonna go through each of

96
00:04:16,470 --> 00:04:19,470
these steps but we've got you know local

97
00:04:19,470 --> 00:04:21,420
deployment we've got peer reviews we've

98
00:04:21,420 --> 00:04:24,270
got deployment to dev we've got our

99
00:04:24,270 --> 00:04:26,190
change management request and then

100
00:04:26,190 --> 00:04:31,200
finally promotion to production so first

101
00:04:31,200 --> 00:04:33,780
up this should be I hope pretty standard

102
00:04:33,780 --> 00:04:34,590
for everyone

103
00:04:34,590 --> 00:04:36,780
local development on people's machines

104
00:04:36,780 --> 00:04:38,730
this is where you do regular testing

105
00:04:38,730 --> 00:04:42,440
this is where you do unit test creation

106
00:04:42,440 --> 00:04:45,810
we do continuous delivery and before you

107
00:04:45,810 --> 00:04:47,310
can even start to think about continuous

108
00:04:47,310 --> 00:04:48,780
delivery with security you have to think

109
00:04:48,780 --> 00:04:50,790
about continuous delivery with with

110
00:04:50,790 --> 00:04:53,820
quality and does it actually work so if

111
00:04:53,820 --> 00:04:55,770
you're not doing test cases we probably

112
00:04:55,770 --> 00:04:57,840
get to stop listening and just go work

113
00:04:57,840 --> 00:05:00,570
on that problem instead then come back

114
00:05:00,570 --> 00:05:04,800
and learn about security so every change

115
00:05:04,800 --> 00:05:07,260
we put into our master branch goes up

116
00:05:07,260 --> 00:05:09,710
under a pull request in bitbucket

117
00:05:09,710 --> 00:05:12,180
everything is peer reviewed by the team

118
00:05:12,180 --> 00:05:13,710
one of the things they check is that we

119
00:05:13,710 --> 00:05:18,120
have tests and then obviously the pull

120
00:05:18,120 --> 00:05:20,790
request has test automation running

121
00:05:20,790 --> 00:05:24,690
automatically as part of that so then of

122
00:05:24,690 --> 00:05:27,540
course you get the code review and this

123
00:05:27,540 --> 00:05:29,400
is where we will iterate over whether

124
00:05:29,400 --> 00:05:30,810
they've built the right thing whether

125
00:05:30,810 --> 00:05:32,400
there's bugs whether their style

126
00:05:32,400 --> 00:05:34,770
problems whether the test case actually

127
00:05:34,770 --> 00:05:39,570
passed when they run in Jenkins and you

128
00:05:39,570 --> 00:05:41,130
know it's iterative this is like one

129
00:05:41,130 --> 00:05:42,450
little bullet but this is obviously one

130
00:05:42,450 --> 00:05:44,430
of the slowest parts of the process

131
00:05:44,430 --> 00:05:46,410
finally team members click approve and

132
00:05:46,410 --> 00:05:48,510
it gets merged and when it merges it's

133
00:05:48,510 --> 00:05:51,900
gonna go into the dev account of our AWS

134
00:05:51,900 --> 00:05:54,240
account so this is an automatic deploy

135
00:05:54,240 --> 00:05:56,600
every change that goes into master

136
00:05:56,600 --> 00:06:00,410
deploys directly to our dev account and

137
00:06:00,410 --> 00:06:03,180
it's nice so it's this is like instant

138
00:06:03,180 --> 00:06:05,500
integration testing

139
00:06:05,500 --> 00:06:09,760
so after some amount of time Tim it

140
00:06:09,760 --> 00:06:12,160
depends on the team people decide that

141
00:06:12,160 --> 00:06:13,990
whatever's in dev is good enough to go

142
00:06:13,990 --> 00:06:17,020
up to production and so what we want to

143
00:06:17,020 --> 00:06:18,820
do is we want to create a change

144
00:06:18,820 --> 00:06:21,700
management ticket to track the changes

145
00:06:21,700 --> 00:06:24,430
we're making to production so we open a

146
00:06:24,430 --> 00:06:27,910
change management ticket later somebody

147
00:06:27,910 --> 00:06:32,790
approves the ticket and then finally the

148
00:06:32,790 --> 00:06:36,670
build will be deployed to production so

149
00:06:36,670 --> 00:06:38,470
I'm gonna go into all these steps in

150
00:06:38,470 --> 00:06:41,230
more detail but as a high-level that's

151
00:06:41,230 --> 00:06:45,730
how it goes so some key requirements we

152
00:06:45,730 --> 00:06:47,140
have because we want to maintain

153
00:06:47,140 --> 00:06:50,320
compliance a couple different one is

154
00:06:50,320 --> 00:06:52,060
that basically nobody can act alone to

155
00:06:52,060 --> 00:06:54,190
modify production this is probably our

156
00:06:54,190 --> 00:06:56,950
our biggest most key requirement I think

157
00:06:56,950 --> 00:06:59,260
the official phrases separation of duty

158
00:06:59,260 --> 00:07:02,620
where you can't have one person that

159
00:07:02,620 --> 00:07:04,990
just acts maliciously and make some

160
00:07:04,990 --> 00:07:07,930
modification to production so one key

161
00:07:07,930 --> 00:07:11,290
thing that human approvals in the CM

162
00:07:11,290 --> 00:07:13,390
process is is sort of guaranteeing that

163
00:07:13,390 --> 00:07:15,520
at least another person has to be

164
00:07:15,520 --> 00:07:17,650
involved in order to approve the

165
00:07:17,650 --> 00:07:20,370
production change now

166
00:07:20,370 --> 00:07:22,570
the other thing we want to do is we want

167
00:07:22,570 --> 00:07:23,740
to make sure that all of our changes to

168
00:07:23,740 --> 00:07:26,290
production are auditable and kind of the

169
00:07:26,290 --> 00:07:28,300
more history the more data we can get

170
00:07:28,300 --> 00:07:30,060
there the better

171
00:07:30,060 --> 00:07:32,860
that's gonna take time and you'll see

172
00:07:32,860 --> 00:07:34,960
that and we also want to verify that

173
00:07:34,960 --> 00:07:37,780
security scan to run scaredy cans secure

174
00:07:37,780 --> 00:07:42,180
security scans let us validate which

175
00:07:42,180 --> 00:07:43,990
vulnerabilities are in the packages we

176
00:07:43,990 --> 00:07:48,220
use and lets us um it less is just know

177
00:07:48,220 --> 00:07:50,169
sort of where we're exposed at that

178
00:07:50,169 --> 00:07:52,000
level this is where sneak would run or

179
00:07:52,000 --> 00:07:54,630
verrico something like that

180
00:07:54,630 --> 00:07:58,650
all right so here's where my impatience

181
00:07:58,650 --> 00:08:03,150
comes in the CM ticket both me creating

182
00:08:03,150 --> 00:08:07,430
it and somebody else approving it is was

183
00:08:07,430 --> 00:08:09,870
the slowest part of this process because

184
00:08:09,870 --> 00:08:13,050
it just takes I mean it's like you did

185
00:08:13,050 --> 00:08:14,130
all this work and then you got to go

186
00:08:14,130 --> 00:08:15,240
through and dig through all these change

187
00:08:15,240 --> 00:08:16,500
logs to try to figure out what you did

188
00:08:16,500 --> 00:08:17,700
just to create this ticket and then you

189
00:08:17,700 --> 00:08:19,020
gotta wait for somebody to be around to

190
00:08:19,020 --> 00:08:21,420
approve it and it's just know so we're

191
00:08:21,420 --> 00:08:24,720
gonna do a lot better so let me describe

192
00:08:24,720 --> 00:08:26,640
what we got so far this is our old

193
00:08:26,640 --> 00:08:30,740
process developer runs a job in Jenkins

194
00:08:30,740 --> 00:08:33,240
Jenkins will actually prompt the user to

195
00:08:33,240 --> 00:08:35,070
say tell me about all the things you

196
00:08:35,070 --> 00:08:36,690
changed tell me the build you'd like to

197
00:08:36,690 --> 00:08:38,309
promote tell me about the ID of that

198
00:08:38,309 --> 00:08:41,099
build tell me your rollback plan give me

199
00:08:41,099 --> 00:08:42,780
the full list of things that you would

200
00:08:42,780 --> 00:08:44,820
normally have to have and a change in a

201
00:08:44,820 --> 00:08:48,420
change request for production JIRA issue

202
00:08:48,420 --> 00:08:51,030
is then created based on that input and

203
00:08:51,030 --> 00:08:53,970
two things happened right JIRA will send

204
00:08:53,970 --> 00:08:56,460
emails to the human approvers again this

205
00:08:56,460 --> 00:08:59,130
is the old flow and in parallel it'll

206
00:08:59,130 --> 00:09:00,980
kick off another build that says deploy

207
00:09:00,980 --> 00:09:03,150
whenever that Jenkins thing I mean

208
00:09:03,150 --> 00:09:05,700
whatever that JIRA ticket is approved go

209
00:09:05,700 --> 00:09:07,290
ahead and like resume so we've got a

210
00:09:07,290 --> 00:09:09,510
Jenkins jobs it's just spinning waiting

211
00:09:09,510 --> 00:09:11,010
waiting waiting for people to approve

212
00:09:11,010 --> 00:09:12,810
and then you have this left side that

213
00:09:12,810 --> 00:09:15,090
flows down so you've got the JIRA emails

214
00:09:15,090 --> 00:09:15,480
go out

215
00:09:15,480 --> 00:09:17,430
you've got human approvers looking

216
00:09:17,430 --> 00:09:19,470
through what happened then they click

217
00:09:19,470 --> 00:09:23,130
approve Jenkins resumes and it deploys

218
00:09:23,130 --> 00:09:28,980
to production so the - right so here's

219
00:09:28,980 --> 00:09:30,210
where there's some possibility for

220
00:09:30,210 --> 00:09:33,180
improvement one is creating the ticket

221
00:09:33,180 --> 00:09:36,240
so yep we have to list out what changed

222
00:09:36,240 --> 00:09:39,200
that feels pretty pretty mechanical and

223
00:09:39,200 --> 00:09:42,150
a side note has anything been removed

224
00:09:42,150 --> 00:09:45,090
which is actually it's very mechanical

225
00:09:45,090 --> 00:09:46,530
but it's also very easy for a human to

226
00:09:46,530 --> 00:09:49,590
miss and then reviewing the change this

227
00:09:49,590 --> 00:09:51,570
is these are all then these don't take a

228
00:09:51,570 --> 00:09:54,390
human to do bitbucket PRS for all the

229
00:09:54,390 --> 00:09:57,630
changes that seems checkable all PR is

230
00:09:57,630 --> 00:09:59,610
reviewed by peers yeah

231
00:09:59,610 --> 00:10:01,800
seems okay and security scans like

232
00:10:01,800 --> 00:10:04,200
there's no reason for like an actual

233
00:10:04,200 --> 00:10:06,500
breathing person to do this

234
00:10:06,500 --> 00:10:11,220
so here's the new flow the new flow is

235
00:10:11,220 --> 00:10:14,820
developer runs a job to promote and they

236
00:10:14,820 --> 00:10:17,790
fill in an incredibly lame set of

237
00:10:17,790 --> 00:10:20,130
details instead of going through and

238
00:10:20,130 --> 00:10:21,510
listing out all the changes that

239
00:10:21,510 --> 00:10:23,280
happened since the last production

240
00:10:23,280 --> 00:10:28,080
deploy like you normally would do my

241
00:10:28,080 --> 00:10:30,180
personal favorite reason for approve or

242
00:10:30,180 --> 00:10:32,880
for promotion that says newer builds are

243
00:10:32,880 --> 00:10:34,830
better than older builds so I put that

244
00:10:34,830 --> 00:10:37,890
in there and then the change management

245
00:10:37,890 --> 00:10:39,480
ticket is created emails are sent to

246
00:10:39,480 --> 00:10:42,510
approvers but also we have this new

247
00:10:42,510 --> 00:10:44,190
thing called the change management bot

248
00:10:44,190 --> 00:10:47,430
and it says oh I see something happened

249
00:10:47,430 --> 00:10:49,740
here well I'm gonna go ahead and I'm

250
00:10:49,740 --> 00:10:51,810
gonna take over I'm gonna review the

251
00:10:51,810 --> 00:10:53,880
changes and if everything looks good to

252
00:10:53,880 --> 00:10:56,730
me I'm gonna just go ahead and move the

253
00:10:56,730 --> 00:10:58,980
ticket into implementing and it doesn't

254
00:10:58,980 --> 00:11:00,900
always do that it only does that if all

255
00:11:00,900 --> 00:11:03,600
the processes are followed but in the

256
00:11:03,600 --> 00:11:05,610
best case scenario I don't have to

257
00:11:05,610 --> 00:11:08,480
collect any more detail change logs and

258
00:11:08,480 --> 00:11:10,830
humans don't have to review those detail

259
00:11:10,830 --> 00:11:14,040
change logs again that's the best case

260
00:11:14,040 --> 00:11:18,390
scenario so here's the how the CM bot is

261
00:11:18,390 --> 00:11:20,730
actually implemented we have a web hook

262
00:11:20,730 --> 00:11:24,600
coming from JIRA we analyze bitbucket

263
00:11:24,600 --> 00:11:28,530
Jenkins and JIRA to track down all the

264
00:11:28,530 --> 00:11:30,030
details we need in order to make sure

265
00:11:30,030 --> 00:11:31,590
that all the correct processes are

266
00:11:31,590 --> 00:11:36,570
followed then we go in at the change

267
00:11:36,570 --> 00:11:38,670
management bought updates the change

268
00:11:38,670 --> 00:11:40,680
management description so it wipes out

269
00:11:40,680 --> 00:11:42,690
my lame new builds are better than old

270
00:11:42,690 --> 00:11:44,550
builds comment and it actually describes

271
00:11:44,550 --> 00:11:46,650
all the things that have happened since

272
00:11:46,650 --> 00:11:50,160
the last build and then we leave what I

273
00:11:50,160 --> 00:11:54,060
call a verdict which is yeah everything

274
00:11:54,060 --> 00:11:56,310
was good the guy the team followed all

275
00:11:56,310 --> 00:11:58,710
the right processes and I would approve

276
00:11:58,710 --> 00:12:00,800
or mmm

277
00:12:00,800 --> 00:12:02,690
no we found some deviations from what's

278
00:12:02,690 --> 00:12:05,420
normal and a human needs to get involved

279
00:12:05,420 --> 00:12:07,820
so the last step of course is then

280
00:12:07,820 --> 00:12:09,920
acting on that verdict so we either

281
00:12:09,920 --> 00:12:13,010
automatically approved a ticket or or

282
00:12:13,010 --> 00:12:18,350
not so let's go through how we collect

283
00:12:18,350 --> 00:12:20,420
up all that data what the change

284
00:12:20,420 --> 00:12:24,019
management bot is actually doing and how

285
00:12:24,019 --> 00:12:26,779
they all strings together so the bottom

286
00:12:26,779 --> 00:12:28,420
level of our stack is get commits

287
00:12:28,420 --> 00:12:30,769
nothing and surprise here one rule

288
00:12:30,769 --> 00:12:33,110
that's really easy to check is that all

289
00:12:33,110 --> 00:12:34,820
commits must be from a LIFO mech

290
00:12:34,820 --> 00:12:37,490
bitbucket user this is one advantage of

291
00:12:37,490 --> 00:12:39,800
using the life of the bit bucket API is

292
00:12:39,800 --> 00:12:41,930
that it'll actually tie your commits

293
00:12:41,930 --> 00:12:44,810
back to your like org users so you can

294
00:12:44,810 --> 00:12:46,850
kind of see right away is everyone who's

295
00:12:46,850 --> 00:12:48,500
making commits to this repo actually in

296
00:12:48,500 --> 00:12:50,930
your organization surprisingly that's

297
00:12:50,930 --> 00:12:52,160
not the easiest thing for a human

298
00:12:52,160 --> 00:12:54,700
reviewer to do if it wasn't for the tool

299
00:12:54,700 --> 00:12:57,050
we also ensure that all the commits are

300
00:12:57,050 --> 00:12:59,570
fast forwards or all the commits are

301
00:12:59,570 --> 00:13:02,390
merged commits not fast forwards and not

302
00:13:02,390 --> 00:13:05,810
squashes I'll go into why that is but

303
00:13:05,810 --> 00:13:07,250
basically we always want the tree to

304
00:13:07,250 --> 00:13:09,529
look like this so the merges are just

305
00:13:09,529 --> 00:13:13,520
plain merges and commits are from other

306
00:13:13,520 --> 00:13:15,649
people on the team this makes it really

307
00:13:15,649 --> 00:13:18,649
easy to analyze specifically when we get

308
00:13:18,649 --> 00:13:21,950
to this next level here pull requests so

309
00:13:21,950 --> 00:13:23,750
every merge and the master must be

310
00:13:23,750 --> 00:13:25,810
associated with a bitbucket pull request

311
00:13:25,810 --> 00:13:28,220
again the bitbucket API makes this

312
00:13:28,220 --> 00:13:31,970
pretty easy to do you can see bitbucket

313
00:13:31,970 --> 00:13:34,490
pull request links in the merge commits

314
00:13:34,490 --> 00:13:37,339
you can then fetch the bitbucket pull

315
00:13:37,339 --> 00:13:39,709
request you can compare the hashes to

316
00:13:39,709 --> 00:13:41,240
make sure that it's an exact match and

317
00:13:41,240 --> 00:13:43,070
not somebody just making it look like it

318
00:13:43,070 --> 00:13:45,740
is and you can go through the whole

319
00:13:45,740 --> 00:13:47,600
history of the pull request all the

320
00:13:47,600 --> 00:13:49,459
changes that were made and who approved

321
00:13:49,459 --> 00:13:51,949
it and you can really build up like very

322
00:13:51,949 --> 00:13:53,540
high confidence that all the changes are

323
00:13:53,540 --> 00:13:55,490
actually being approved by people who

324
00:13:55,490 --> 00:13:58,839
are not the author

325
00:13:59,540 --> 00:14:03,210
so every build that merges into master

326
00:14:03,210 --> 00:14:07,980
does Jenkins deploy into our dev account

327
00:14:07,980 --> 00:14:11,550
and this is also where we would have the

328
00:14:11,550 --> 00:14:15,959
logs for security scans so when the

329
00:14:15,959 --> 00:14:18,510
build runs it's gonna do the security

330
00:14:18,510 --> 00:14:19,890
scan it's gonna collect the data it's

331
00:14:19,890 --> 00:14:23,459
gonna put it in the console and the

332
00:14:23,459 --> 00:14:25,470
build actually points back to that merge

333
00:14:25,470 --> 00:14:29,279
commit as well so when we on the next

334
00:14:29,279 --> 00:14:31,529
step when we create the change

335
00:14:31,529 --> 00:14:33,120
management ticket to promote something

336
00:14:33,120 --> 00:14:37,020
we can link back to one build exactly so

337
00:14:37,020 --> 00:14:39,180
I'm saying I want to promote connect

338
00:14:39,180 --> 00:14:42,120
widget build one two three and that

339
00:14:42,120 --> 00:14:44,490
point that a specific Jenkins build that

340
00:14:44,490 --> 00:14:46,440
Jenkins build points to a specific merge

341
00:14:46,440 --> 00:14:49,560
commit that merge commit has all the PRS

342
00:14:49,560 --> 00:14:53,880
associated with it and so you can start

343
00:14:53,880 --> 00:14:56,580
to see how from a single change

344
00:14:56,580 --> 00:14:58,290
management request we can work backwards

345
00:14:58,290 --> 00:15:01,279
to this full list of artifacts and

346
00:15:01,279 --> 00:15:03,450
verify that sort of there's nothing

347
00:15:03,450 --> 00:15:06,080
phishing going on in this new promotion

348
00:15:06,080 --> 00:15:08,580
so this is sort of like shifting the

349
00:15:08,580 --> 00:15:10,170
table on its side we've gone to like

350
00:15:10,170 --> 00:15:12,930
bottom up and now we're gonna go one

351
00:15:12,930 --> 00:15:14,700
particular change management request

352
00:15:14,700 --> 00:15:16,620
first thing we're gonna do is we're

353
00:15:16,620 --> 00:15:18,089
going to say okay change management

354
00:15:18,089 --> 00:15:21,930
number three well this says I want to

355
00:15:21,930 --> 00:15:24,570
promote build three to production the

356
00:15:24,570 --> 00:15:25,680
first thing is gonna do is it's gonna

357
00:15:25,680 --> 00:15:27,570
look back and find whatever the last

358
00:15:27,570 --> 00:15:30,750
build was so maybe change management to

359
00:15:30,750 --> 00:15:32,700
was pointing at build two but you know

360
00:15:32,700 --> 00:15:34,190
they didn't have to promote that built

361
00:15:34,190 --> 00:15:36,750
maybe there was maybe we skipped we

362
00:15:36,750 --> 00:15:39,690
never committed merge number two up to

363
00:15:39,690 --> 00:15:43,560
prod so you're just gonna collect the

364
00:15:43,560 --> 00:15:45,839
last build that was associated with the

365
00:15:45,839 --> 00:15:47,310
change management ticket that was

366
00:15:47,310 --> 00:15:49,800
approved and deployed to production so

367
00:15:49,800 --> 00:15:51,300
you can imagine you've got two builds

368
00:15:51,300 --> 00:15:54,329
and then from underneath that you can

369
00:15:54,329 --> 00:15:56,640
collect all the merge commits and from

370
00:15:56,640 --> 00:15:57,810
there you can collect all the pull

371
00:15:57,810 --> 00:15:59,640
requests and you can just step through

372
00:15:59,640 --> 00:16:03,180
and meticulously verify and collect all

373
00:16:03,180 --> 00:16:05,160
the details of what changed who changed

374
00:16:05,160 --> 00:16:08,339
it who approved it did the test run like

375
00:16:08,339 --> 00:16:10,180
where they're security scans done

376
00:16:10,180 --> 00:16:12,970
and you can collect all that from what's

377
00:16:12,970 --> 00:16:15,160
in fraud now - what is going to be in

378
00:16:15,160 --> 00:16:24,970
fraud next so little pros and cons of

379
00:16:24,970 --> 00:16:26,980
the current approach versus the old

380
00:16:26,980 --> 00:16:30,490
approach so automation is extremely good

381
00:16:30,490 --> 00:16:33,040
at walking this full tree of all the

382
00:16:33,040 --> 00:16:34,600
changes that have been made since the

383
00:16:34,600 --> 00:16:39,100
last deploy I am not good at remembering

384
00:16:39,100 --> 00:16:40,750
what I did I'm not good at remembering

385
00:16:40,750 --> 00:16:42,670
what I did this morning let alone two

386
00:16:42,670 --> 00:16:45,160
days ago or three days ago

387
00:16:45,160 --> 00:16:48,280
so I'm bad at I've had it remembering it

388
00:16:48,280 --> 00:16:50,530
I'm also not very good at meticulously

389
00:16:50,530 --> 00:16:52,120
going through and collecting all of that

390
00:16:52,120 --> 00:16:54,520
data but the bots obviously can go

391
00:16:54,520 --> 00:16:56,680
through and list every commit every

392
00:16:56,680 --> 00:16:59,560
author every approval and it's a very

393
00:16:59,560 --> 00:17:01,570
very very accurate changelog of what's

394
00:17:01,570 --> 00:17:05,020
going into production so after its

395
00:17:05,020 --> 00:17:06,790
collected all that data the bot is

396
00:17:06,790 --> 00:17:09,819
really good at lifting it all out nice

397
00:17:09,819 --> 00:17:11,470
and pretty and I would never have done

398
00:17:11,470 --> 00:17:13,869
that I would have done like I said here

399
00:17:13,869 --> 00:17:16,030
I would have done exactly the minimum

400
00:17:16,030 --> 00:17:17,740
amount needed to get it approved by my

401
00:17:17,740 --> 00:17:20,530
security team right I don't have evil

402
00:17:20,530 --> 00:17:22,060
intentions I just have a lot to get done

403
00:17:22,060 --> 00:17:23,859
and I'm not particularly good at

404
00:17:23,859 --> 00:17:28,450
designing comments so automation is much

405
00:17:28,450 --> 00:17:29,470
faster than I am

406
00:17:29,470 --> 00:17:31,570
i digging through to collect all this

407
00:17:31,570 --> 00:17:33,190
data would take me significantly longer

408
00:17:33,190 --> 00:17:37,240
than you know API calls so here's an

409
00:17:37,240 --> 00:17:39,370
example of one of the commits one of the

410
00:17:39,370 --> 00:17:42,190
comments we put in our change management

411
00:17:42,190 --> 00:17:45,820
tickets so this is a good one you can

412
00:17:45,820 --> 00:17:47,170
see it said well I found the last

413
00:17:47,170 --> 00:17:49,870
approval was changed management number

414
00:17:49,870 --> 00:17:52,780
one one two six seven it was closed

415
00:17:52,780 --> 00:17:54,600
fraud because it deployed successfully

416
00:17:54,600 --> 00:17:58,720
the new build is connect widget 319 and

417
00:17:58,720 --> 00:18:01,480
it says that these are the changes so

418
00:18:01,480 --> 00:18:04,030
one merge commit with a linked pull

419
00:18:04,030 --> 00:18:07,450
request all green check boxes with a

420
00:18:07,450 --> 00:18:09,730
description of everything that's changed

421
00:18:09,730 --> 00:18:12,700
there so I would never have taken the

422
00:18:12,700 --> 00:18:14,620
time to make something just nice I would

423
00:18:14,620 --> 00:18:17,020
have said something like

424
00:18:17,020 --> 00:18:19,880
we mists we missed a property it's just

425
00:18:19,880 --> 00:18:22,490
a simple bug fix come on please you know

426
00:18:22,490 --> 00:18:24,170
something like that right but like this

427
00:18:24,170 --> 00:18:25,520
is fantastic and so you can look through

428
00:18:25,520 --> 00:18:30,290
and see it every single time now here's

429
00:18:30,290 --> 00:18:32,840
an example where things did not go as

430
00:18:32,840 --> 00:18:35,600
smoothly so in this case you can see the

431
00:18:35,600 --> 00:18:39,290
verdict on top which is no I'm not going

432
00:18:39,290 --> 00:18:41,330
to approve this for you this says

433
00:18:41,330 --> 00:18:45,170
something humans are needed because some

434
00:18:45,170 --> 00:18:47,540
deviations were found and it highlights

435
00:18:47,540 --> 00:18:50,570
the deviation amongst all the things

436
00:18:50,570 --> 00:18:52,250
that we're good right so we still have

437
00:18:52,250 --> 00:18:54,590
the audit log and we've got kind of

438
00:18:54,590 --> 00:18:56,690
overlaid with a judgment about whether

439
00:18:56,690 --> 00:18:58,880
those changes were good changes or not

440
00:18:58,880 --> 00:19:01,310
good changes so in this case you can see

441
00:19:01,310 --> 00:19:04,250
the last one it says there was a problem

442
00:19:04,250 --> 00:19:07,400
with the added zip file commit and it's

443
00:19:07,400 --> 00:19:09,440
because there was a commit author who

444
00:19:09,440 --> 00:19:12,200
didn't match a known user now you can

445
00:19:12,200 --> 00:19:14,450
see from the author tag that this was

446
00:19:14,450 --> 00:19:16,220
just like somebody hadn't quite set up

447
00:19:16,220 --> 00:19:18,140
his laptop for the first day of work and

448
00:19:18,140 --> 00:19:20,060
nobody caught it in the review process

449
00:19:20,060 --> 00:19:22,310
and so this is the kind of like this is

450
00:19:22,310 --> 00:19:23,870
great right like this caught what could

451
00:19:23,870 --> 00:19:26,150
have been a real problem it also gave

452
00:19:26,150 --> 00:19:29,680
the security team enough information to

453
00:19:29,680 --> 00:19:32,150
to make a judgment about whether this is

454
00:19:32,150 --> 00:19:34,880
right so like maybe Oracle looks at this

455
00:19:34,880 --> 00:19:38,180
and he says okay well who's Joe like you

456
00:19:38,180 --> 00:19:40,580
know but he's gonna know right away oh

457
00:19:40,580 --> 00:19:42,530
yeah sure Joe he's just hired the other

458
00:19:42,530 --> 00:19:44,330
day he hasn't configured his machine

459
00:19:44,330 --> 00:19:46,370
I'll approve this it sounds right I can

460
00:19:46,370 --> 00:19:47,870
look at the commit I can go just right

461
00:19:47,870 --> 00:19:50,240
to that commit so even when it does fall

462
00:19:50,240 --> 00:19:52,640
back to human approval it's still faster

463
00:19:52,640 --> 00:19:57,080
than it was before so we'll do a little

464
00:19:57,080 --> 00:20:00,830
pro and con for the approval side versus

465
00:20:00,830 --> 00:20:03,950
automation automation super good at

466
00:20:03,950 --> 00:20:06,320
going through and verifying that every

467
00:20:06,320 --> 00:20:08,060
change is exactly like it's required to

468
00:20:08,060 --> 00:20:10,700
be I'm gonna go through some edge cases

469
00:20:10,700 --> 00:20:12,560
next that humans would be very

470
00:20:12,560 --> 00:20:14,680
hard-pressed to catch

471
00:20:14,680 --> 00:20:16,270
the automation does not have a problem

472
00:20:16,270 --> 00:20:19,480
with that and human approvers just like

473
00:20:19,480 --> 00:20:21,700
human developers are vulnerable to being

474
00:20:21,700 --> 00:20:24,160
rushed and spot-checking changes right

475
00:20:24,160 --> 00:20:26,430
if they've got this is like their 50th

476
00:20:26,430 --> 00:20:28,840
change management ticket for the day

477
00:20:28,840 --> 00:20:30,250
and they've got something else going on

478
00:20:30,250 --> 00:20:32,350
or their kids has a soccer game I mean

479
00:20:32,350 --> 00:20:34,600
what's the chances that maybe they take

480
00:20:34,600 --> 00:20:35,440
a shortcut

481
00:20:35,440 --> 00:20:37,570
wait the automation is just never gonna

482
00:20:37,570 --> 00:20:40,510
do that so this is one of those cases

483
00:20:40,510 --> 00:20:43,330
where it's like you get better results

484
00:20:43,330 --> 00:20:47,050
and it's faster at the same time I mean

485
00:20:47,050 --> 00:20:49,570
this is this is just all this is all

486
00:20:49,570 --> 00:20:51,790
good stuff there's no reason to think

487
00:20:51,790 --> 00:20:54,160
that security has to be a slowdown this

488
00:20:54,160 --> 00:20:58,750
is more secure and quicker automation is

489
00:20:58,750 --> 00:21:01,420
good at catching edge cases and human

490
00:21:01,420 --> 00:21:03,970
approvers you know I give no good things

491
00:21:03,970 --> 00:21:06,880
about developers hmm that's weird

492
00:21:06,880 --> 00:21:09,850
so there's there's we have better things

493
00:21:09,850 --> 00:21:12,070
to do than this like the time that we

494
00:21:12,070 --> 00:21:14,440
get back we can work high-level features

495
00:21:14,440 --> 00:21:16,300
we can look at big picture security

496
00:21:16,300 --> 00:21:18,100
stuff we're not wasting our entire day

497
00:21:18,100 --> 00:21:20,290
reviewing changes of what happened in

498
00:21:20,290 --> 00:21:21,970
production right there's just no value

499
00:21:21,970 --> 00:21:25,380
in that not not for the business again

500
00:21:25,380 --> 00:21:28,470
automation is way faster than humans and

501
00:21:28,470 --> 00:21:32,110
automation never has a weekend or a

502
00:21:32,110 --> 00:21:36,670
sleepy or as a family problem than

503
00:21:36,670 --> 00:21:41,890
humans do so let's do the real you know

504
00:21:41,890 --> 00:21:43,690
hardcore why is this even better than

505
00:21:43,690 --> 00:21:45,309
not just is it faster and more

506
00:21:45,309 --> 00:21:47,320
meticulous but I think there's some real

507
00:21:47,320 --> 00:21:48,910
edge cases here that humans just are not

508
00:21:48,910 --> 00:21:52,840
capable of catching so the first one

509
00:21:52,840 --> 00:21:53,800
that jumped out to me when I started

510
00:21:53,800 --> 00:21:56,470
implementing this was detecting changes

511
00:21:56,470 --> 00:22:00,130
in merge commits so if you are familiar

512
00:22:00,130 --> 00:22:02,650
with git and particularly the tools like

513
00:22:02,650 --> 00:22:05,410
web tools you've got this PR that looks

514
00:22:05,410 --> 00:22:06,910
good and it's got a button that says

515
00:22:06,910 --> 00:22:10,660
merge right you click merge well no one

516
00:22:10,660 --> 00:22:13,179
on the team actually a no clue looks at

517
00:22:13,179 --> 00:22:14,539
that merge commit

518
00:22:14,539 --> 00:22:16,999
right like you approved the changes you

519
00:22:16,999 --> 00:22:19,609
were looking at and then you click the

520
00:22:19,609 --> 00:22:23,869
button and a new commit appeared and no

521
00:22:23,869 --> 00:22:26,389
one ever checked out that commit right

522
00:22:26,389 --> 00:22:27,829
like everyone just sort of assumes that

523
00:22:27,829 --> 00:22:30,349
the tool is doing the right thing no one

524
00:22:30,349 --> 00:22:31,969
is slipping extra code into that merge

525
00:22:31,969 --> 00:22:33,320
commit I mean you can easily make

526
00:22:33,320 --> 00:22:36,079
modifications in a merge commit but no

527
00:22:36,079 --> 00:22:38,119
one no one verifies that no one no one

528
00:22:38,119 --> 00:22:40,369
approves it and so one thing that the

529
00:22:40,369 --> 00:22:41,899
automation can do is it can actually go

530
00:22:41,899 --> 00:22:44,599
through and verify that all of the

531
00:22:44,599 --> 00:22:46,219
convert the merge commits are what I

532
00:22:46,219 --> 00:22:49,339
consider empty commits which is every

533
00:22:49,339 --> 00:22:52,099
change in the merge commit comes from

534
00:22:52,099 --> 00:22:54,169
either the target branch or the source

535
00:22:54,169 --> 00:22:57,109
branch and no one snuck anything in so

536
00:22:57,109 --> 00:23:00,799
even if a human is merging manually on

537
00:23:00,799 --> 00:23:02,329
the command line which some people can

538
00:23:02,329 --> 00:23:05,389
you know you do no one's sneaking

539
00:23:05,389 --> 00:23:07,279
something in so if there's a merge

540
00:23:07,279 --> 00:23:09,440
conflict in there somehow and they have

541
00:23:09,440 --> 00:23:11,690
to do a manual change the bots actually

542
00:23:11,690 --> 00:23:13,609
gonna catch that and say someone just

543
00:23:13,609 --> 00:23:15,109
made a change that was like non-trivial

544
00:23:15,109 --> 00:23:17,899
and wasn't approved by somebody else so

545
00:23:17,899 --> 00:23:22,399
humans gonna dig in and look at it the

546
00:23:22,399 --> 00:23:24,139
other case it's very very hard to catch

547
00:23:24,139 --> 00:23:26,059
especially with the UI's as they're

548
00:23:26,059 --> 00:23:27,139
currently written and I'm thinking

549
00:23:27,139 --> 00:23:29,569
github and bitbucket is that what

550
00:23:29,569 --> 00:23:30,919
happens when you have one PR with

551
00:23:30,919 --> 00:23:33,019
multiple committers so I commit

552
00:23:33,019 --> 00:23:36,169
something my team reviews then somebody

553
00:23:36,169 --> 00:23:39,289
else commits something and it sure looks

554
00:23:39,289 --> 00:23:41,329
like everyone's approved but that last

555
00:23:41,329 --> 00:23:44,119
change just went in is it like how does

556
00:23:44,119 --> 00:23:46,099
this work and the UI is unless you

557
00:23:46,099 --> 00:23:47,690
configure I'm just right or you're

558
00:23:47,690 --> 00:23:49,009
really good at looking at the activity

559
00:23:49,009 --> 00:23:51,729
page it's very easy to be confused and

560
00:23:51,729 --> 00:23:54,229
think that everyone has actually

561
00:23:54,229 --> 00:23:56,659
reviewed it but again this is where the

562
00:23:56,659 --> 00:23:58,999
bitbucket API is really great because

563
00:23:58,999 --> 00:24:01,519
you can look through the change log of

564
00:24:01,519 --> 00:24:04,009
when a commit was added who approved

565
00:24:04,009 --> 00:24:05,929
after that commit and you can really

566
00:24:05,929 --> 00:24:08,169
verify that every commit in the PR is

567
00:24:08,169 --> 00:24:11,149
actually actually being reviewed by

568
00:24:11,149 --> 00:24:14,089
other people I guess you can't you can't

569
00:24:14,089 --> 00:24:15,199
verify that they did a good job

570
00:24:15,199 --> 00:24:17,479
reviewing it but you can at least verify

571
00:24:17,479 --> 00:24:19,729
that they are saying that they did and

572
00:24:19,729 --> 00:24:22,249
clicking the button in line with all of

573
00:24:22,249 --> 00:24:24,280
the updates

574
00:24:24,280 --> 00:24:26,990
so something that surprised me when we

575
00:24:26,990 --> 00:24:29,210
first rolled this out is that we started

576
00:24:29,210 --> 00:24:32,750
detecting commits it had been removed so

577
00:24:32,750 --> 00:24:34,550
if you are looking through the history

578
00:24:34,550 --> 00:24:36,260
of what changed when you like craft your

579
00:24:36,260 --> 00:24:38,150
response for but these are all the

580
00:24:38,150 --> 00:24:39,800
things I've changed since the last of

581
00:24:39,800 --> 00:24:40,690
limited-production

582
00:24:40,690 --> 00:24:43,760
you don't see the stuff that like got

583
00:24:43,760 --> 00:24:47,660
taken out of the history but when you do

584
00:24:47,660 --> 00:24:51,440
a get revision to revision compare the

585
00:24:51,440 --> 00:24:52,910
bots can actually detect that and they

586
00:24:52,910 --> 00:24:54,920
can say hey you you actually took out

587
00:24:54,920 --> 00:24:58,220
some commits and in our case we say if

588
00:24:58,220 --> 00:24:59,840
you're taking commits out of production

589
00:24:59,840 --> 00:25:01,370
that's not something that's ever gonna

590
00:25:01,370 --> 00:25:03,020
be approved you're gonna have to get a

591
00:25:03,020 --> 00:25:07,040
human approval to explain it and then

592
00:25:07,040 --> 00:25:08,450
squash merges that are an odd case

593
00:25:08,450 --> 00:25:09,920
they're a bit like that merge commit

594
00:25:09,920 --> 00:25:13,040
case this is one that I don't love but

595
00:25:13,040 --> 00:25:15,290
we're kind of stuck with right now which

596
00:25:15,290 --> 00:25:19,610
is a squash commit it's saying I have

597
00:25:19,610 --> 00:25:23,150
all these changes and someone approved

598
00:25:23,150 --> 00:25:26,450
them and then I clicked squash because I

599
00:25:26,450 --> 00:25:28,790
like a pretty line in my kit history I

600
00:25:28,790 --> 00:25:30,830
mean it's for like so something right so

601
00:25:30,830 --> 00:25:32,870
you want the pretty line see I'll count

602
00:25:32,870 --> 00:25:34,280
this to a squash commit I'll get all

603
00:25:34,280 --> 00:25:36,800
that cruft of like back and forth and

604
00:25:36,800 --> 00:25:39,050
it'll just go into a single commit well

605
00:25:39,050 --> 00:25:40,910
the problem is like no one's reviewing

606
00:25:40,910 --> 00:25:43,100
that squash commit to verify that it's

607
00:25:43,100 --> 00:25:45,800
the same as the ones that you had done

608
00:25:45,800 --> 00:25:49,570
so if I was a malicious person I would I

609
00:25:49,570 --> 00:25:52,190
would get approvals and all my changes I

610
00:25:52,190 --> 00:25:55,850
would click squash and I would edit that

611
00:25:55,850 --> 00:25:57,530
commit so that it was different than

612
00:25:57,530 --> 00:25:59,570
what people had approved right and a

613
00:25:59,570 --> 00:26:02,570
human is very unlikely to catch that so

614
00:26:02,570 --> 00:26:04,460
in our case we just really can't handle

615
00:26:04,460 --> 00:26:06,110
it there's this is one place where the

616
00:26:06,110 --> 00:26:08,690
bitbucket API just kind of falls down

617
00:26:08,690 --> 00:26:11,150
once you've squashed it's lost the

618
00:26:11,150 --> 00:26:13,790
history for what had been approved like

619
00:26:13,790 --> 00:26:15,740
sort of pre squash and so I can't easily

620
00:26:15,740 --> 00:26:18,140
do a diff I'd love it if there was a way

621
00:26:18,140 --> 00:26:20,270
or if somebody has an idea of how you

622
00:26:20,270 --> 00:26:22,460
could make this work because it's

623
00:26:22,460 --> 00:26:25,850
something that bites us all the time you

624
00:26:25,850 --> 00:26:27,920
can see the last bullet here which is

625
00:26:27,920 --> 00:26:29,390
changing culture and this is something

626
00:26:29,390 --> 00:26:32,120
that I'm probably most excited about the

627
00:26:32,120 --> 00:26:34,440
changing culture not the last shame

628
00:26:34,440 --> 00:26:36,990
point but basically every single new

629
00:26:36,990 --> 00:26:38,940
higher clique squash because they think

630
00:26:38,940 --> 00:26:40,350
they're being nice and making it look

631
00:26:40,350 --> 00:26:42,480
pretty and then their team is blocked

632
00:26:42,480 --> 00:26:44,130
and has to have a human approve

633
00:26:44,130 --> 00:26:46,140
something and you know they quickly

634
00:26:46,140 --> 00:26:47,760
never click that button again and

635
00:26:47,760 --> 00:26:50,370
there's no way you can turn that off in

636
00:26:50,370 --> 00:26:51,420
the bitbucket

637
00:26:51,420 --> 00:26:54,150
UI right now it's really a shame I wish

638
00:26:54,150 --> 00:26:56,610
we could just say like for our org never

639
00:26:56,610 --> 00:26:59,790
never never allow squashing because we

640
00:26:59,790 --> 00:27:02,130
want that audit trail we want if someone

641
00:27:02,130 --> 00:27:03,750
was to look back at our history of get

642
00:27:03,750 --> 00:27:06,360
changes we want to see a link to an

643
00:27:06,360 --> 00:27:08,280
approval from peers for every single

644
00:27:08,280 --> 00:27:10,230
change right that's what it looks like

645
00:27:10,230 --> 00:27:11,520
in our change management ticket that's

646
00:27:11,520 --> 00:27:12,540
what it should look like in our get

647
00:27:12,540 --> 00:27:14,670
history and our bitbucket api's we want

648
00:27:14,670 --> 00:27:16,140
to see that really strict list of

649
00:27:16,140 --> 00:27:19,800
approvals all right so changing culture

650
00:27:19,800 --> 00:27:21,810
this is cool this is even cooler than

651
00:27:21,810 --> 00:27:26,700
moving quickly worst case scenario is

652
00:27:26,700 --> 00:27:28,650
that you fall back to human review so

653
00:27:28,650 --> 00:27:30,960
there's no trouble there's no jail

654
00:27:30,960 --> 00:27:33,270
nobody getting fired if you didn't

655
00:27:33,270 --> 00:27:34,650
follow the right processes but it's just

656
00:27:34,650 --> 00:27:36,270
like it was before you have to explain

657
00:27:36,270 --> 00:27:37,920
to somebody else why you made the

658
00:27:37,920 --> 00:27:41,810
changes you made not so bad but now

659
00:27:41,810 --> 00:27:44,550
because the worst case is to fall back

660
00:27:44,550 --> 00:27:46,530
to human review and human review is slow

661
00:27:46,530 --> 00:27:49,140
or inconvenient the team's really

662
00:27:49,140 --> 00:27:50,970
eagerly try to follow the right

663
00:27:50,970 --> 00:27:53,220
processes to avoid this like sort of

664
00:27:53,220 --> 00:27:55,920
slight penalty so you get this incentive

665
00:27:55,920 --> 00:27:57,720
of moving really quickly when all the

666
00:27:57,720 --> 00:28:00,030
security processes are followed and the

667
00:28:00,030 --> 00:28:02,640
team's naturally reinforce this behavior

668
00:28:02,640 --> 00:28:04,920
they're like please do not use squash

669
00:28:04,920 --> 00:28:06,780
newbie because I don't want to be

670
00:28:06,780 --> 00:28:09,270
blocked from promoting my bug fix you

671
00:28:09,270 --> 00:28:10,830
know on a Saturday morning right I'm

672
00:28:10,830 --> 00:28:12,750
rushing to get this done I don't want

673
00:28:12,750 --> 00:28:16,350
you to be the reason that slows me down

674
00:28:16,350 --> 00:28:18,990
and they don't say I don't want security

675
00:28:18,990 --> 00:28:21,030
team who's not working on Saturday to be

676
00:28:21,030 --> 00:28:22,800
the reason they're saying it's you who

677
00:28:22,800 --> 00:28:24,570
didn't follow the process right so you

678
00:28:24,570 --> 00:28:26,730
get this really nice this feature of

679
00:28:26,730 --> 00:28:32,510
like self-regulating teams and then

680
00:28:32,510 --> 00:28:34,310
the security team doesn't have to play

681
00:28:34,310 --> 00:28:37,250
the bad guy anymore right so in some

682
00:28:37,250 --> 00:28:38,600
ways the security team gets to be the

683
00:28:38,600 --> 00:28:41,480
hero here what happens is someone makes

684
00:28:41,480 --> 00:28:45,250
a change let's say they forgot to

685
00:28:45,250 --> 00:28:47,720
something happened with the PR and they

686
00:28:47,720 --> 00:28:48,950
accidentally merge before they should

687
00:28:48,950 --> 00:28:51,530
have and not every change was completely

688
00:28:51,530 --> 00:28:53,600
approved the change management bot says

689
00:28:53,600 --> 00:28:55,940
no no no no no like this isn't this is

690
00:28:55,940 --> 00:28:57,560
not legit you can't you can't deploy

691
00:28:57,560 --> 00:28:59,900
this and then the security team gets to

692
00:28:59,900 --> 00:29:02,090
come in and save the day they're like no

693
00:29:02,090 --> 00:29:04,400
let's go through it together right let's

694
00:29:04,400 --> 00:29:05,930
work together and we can fix it and so

695
00:29:05,930 --> 00:29:07,610
they actually come and sort of like

696
00:29:07,610 --> 00:29:10,670
rescue this otherwise broken state so I

697
00:29:10,670 --> 00:29:13,010
think just in terms of cultural dynamics

698
00:29:13,010 --> 00:29:16,790
and incentives having the tool do a lot

699
00:29:16,790 --> 00:29:19,070
of the grunt work check the processes is

700
00:29:19,070 --> 00:29:22,430
actually like a win for people in an

701
00:29:22,430 --> 00:29:28,040
organization so this lasts this fourth

702
00:29:28,040 --> 00:29:32,600
bullet here motivation this just came up

703
00:29:32,600 --> 00:29:36,470
last week we had a problem that I was

704
00:29:36,470 --> 00:29:38,750
working on it was a Saturday morning

705
00:29:38,750 --> 00:29:40,880
something was broken in production we

706
00:29:40,880 --> 00:29:45,890
needed to do a slight tweak to mmm maybe

707
00:29:45,890 --> 00:29:48,560
a dynamo configuration so one way I

708
00:29:48,560 --> 00:29:49,760
could have done it is I could have

709
00:29:49,760 --> 00:29:51,200
opened up a change management ticket

710
00:29:51,200 --> 00:29:54,110
that said and again I got to fill in

711
00:29:54,110 --> 00:29:55,760
details here so I say like oh I really

712
00:29:55,760 --> 00:29:57,770
want to modify this dynamo table because

713
00:29:57,770 --> 00:29:59,930
this thing's broken and I just give me

714
00:29:59,930 --> 00:30:01,490
manual access and I'll just make the

715
00:30:01,490 --> 00:30:02,480
change real quick and then I'll be done

716
00:30:02,480 --> 00:30:02,990
with it

717
00:30:02,990 --> 00:30:05,600
promise I'll write down what I did right

718
00:30:05,600 --> 00:30:08,240
and you know like that happens that's

719
00:30:08,240 --> 00:30:10,820
fine but it was Saturday and I knew I

720
00:30:10,820 --> 00:30:12,800
was gonna get a slow approval like I

721
00:30:12,800 --> 00:30:14,450
mean I wouldn't expect anyone to be

722
00:30:14,450 --> 00:30:17,960
working on a Saturday so but if I

723
00:30:17,960 --> 00:30:21,290
automate it if I did all of my changes

724
00:30:21,290 --> 00:30:23,930
as code and I could just find some team

725
00:30:23,930 --> 00:30:26,210
members to review my code for me well

726
00:30:26,210 --> 00:30:28,100
now I can promote it to prod I can

727
00:30:28,100 --> 00:30:29,570
deploy it I don't have to bug anyone

728
00:30:29,570 --> 00:30:31,760
well on other than my own teammates and

729
00:30:31,760 --> 00:30:34,970
my changes have been put into code right

730
00:30:34,970 --> 00:30:36,680
I could have tested them I have had to

731
00:30:36,680 --> 00:30:39,260
deploy to dev first so there's lots of

732
00:30:39,260 --> 00:30:42,320
things here that I kind of like motivate

733
00:30:42,320 --> 00:30:44,890
teams to do just by having this in

734
00:30:44,890 --> 00:30:56,190
of really fast deployments so the future

735
00:30:56,190 --> 00:30:58,960
there's a lot more you can do especially

736
00:30:58,960 --> 00:31:00,250
if you hook on to this notion of

737
00:31:00,250 --> 00:31:02,890
changing culture so one thing we could

738
00:31:02,890 --> 00:31:05,470
do starting at the bottom is more

739
00:31:05,470 --> 00:31:09,460
security scans so maybe we say well now

740
00:31:09,460 --> 00:31:12,280
in order to get to keep the fast

741
00:31:12,280 --> 00:31:16,030
approval to promotion you need to also

742
00:31:16,030 --> 00:31:19,870
scan with new security tool number three

743
00:31:19,870 --> 00:31:22,270
right and there you can say you don't

744
00:31:22,270 --> 00:31:25,150
have to do it I mean we will just have

745
00:31:25,150 --> 00:31:26,950
to manually verify all your changes if

746
00:31:26,950 --> 00:31:30,880
you don't but if you do well you can

747
00:31:30,880 --> 00:31:32,440
keep this really fast automatic

748
00:31:32,440 --> 00:31:35,080
promotion right and this is a nice way

749
00:31:35,080 --> 00:31:37,120
to have a conversation in my opinion and

750
00:31:37,120 --> 00:31:38,980
again I'm coming from the dev side of

751
00:31:38,980 --> 00:31:41,710
things I would say okay yeah that sounds

752
00:31:41,710 --> 00:31:43,390
fine right like I'm happy to implement

753
00:31:43,390 --> 00:31:44,530
this tool to keep this nice little

754
00:31:44,530 --> 00:31:47,200
carrot it's totally worth it to me to do

755
00:31:47,200 --> 00:31:52,510
that I'll jump to the top we use

756
00:31:52,510 --> 00:31:53,919
terraform for all of our changes to

757
00:31:53,919 --> 00:31:56,410
production infrastructure well and dev

758
00:31:56,410 --> 00:31:58,690
infrastructure and I think there's

759
00:31:58,690 --> 00:32:01,720
definitely room to improve even if

760
00:32:01,720 --> 00:32:04,660
everyone on the team has approved a

761
00:32:04,660 --> 00:32:07,809
deletion of a dynamo table maybe it

762
00:32:07,809 --> 00:32:09,970
makes sense to just never allow deleting

763
00:32:09,970 --> 00:32:12,669
dynamo tables as like a fully automated

764
00:32:12,669 --> 00:32:15,669
rollout to production and that's

765
00:32:15,669 --> 00:32:18,160
something that would be hard for a team

766
00:32:18,160 --> 00:32:22,030
to catch doing manual approvals Trekkies

767
00:32:22,030 --> 00:32:22,870
you're gonna dig through all the

768
00:32:22,870 --> 00:32:24,820
terraform file changes no but you know

769
00:32:24,820 --> 00:32:26,620
automation could catch that and it could

770
00:32:26,620 --> 00:32:29,140
flag it and then allowing automatic roll

771
00:32:29,140 --> 00:32:32,260
backs I said that it will catch when

772
00:32:32,260 --> 00:32:34,929
things get taken out but in some cases

773
00:32:34,929 --> 00:32:36,640
like a rollback you're very

774
00:32:36,640 --> 00:32:39,250
intentionally taking all changes since

775
00:32:39,250 --> 00:32:41,830
the last approval out and there's no

776
00:32:41,830 --> 00:32:43,299
reason why we couldn't say well if

777
00:32:43,299 --> 00:32:44,890
you're asking for every single change

778
00:32:44,890 --> 00:32:46,600
since the last approved failed to be

779
00:32:46,600 --> 00:32:48,760
taken out of production that's a lot

780
00:32:48,760 --> 00:32:51,610
like a rollback and if the last build

781
00:32:51,610 --> 00:32:53,830
was approved and maybe it's only been a

782
00:32:53,830 --> 00:32:55,530
day since that happened

783
00:32:55,530 --> 00:32:57,810
and maybe Pedro doodies going off maybe

784
00:32:57,810 --> 00:32:59,190
it just automatically allows the

785
00:32:59,190 --> 00:33:01,500
rollback I mean especially if Pedro GT

786
00:33:01,500 --> 00:33:03,170
was going off that could be a fantastic

787
00:33:03,170 --> 00:33:08,310
hook so there's a lot of work for sure

788
00:33:08,310 --> 00:33:10,650
and since we built it the first time

789
00:33:10,650 --> 00:33:13,230
through you heard our Kong yesterday

790
00:33:13,230 --> 00:33:15,600
talking about Jupiter 1 and Jupiter 1

791
00:33:15,600 --> 00:33:17,850
does a lot of data collection for you so

792
00:33:17,850 --> 00:33:19,950
if you don't want to re-implement all of

793
00:33:19,950 --> 00:33:22,860
this that I did they have been nice

794
00:33:22,860 --> 00:33:24,870
enough to open-source a library that

795
00:33:24,870 --> 00:33:26,970
will automatically make some of these

796
00:33:26,970 --> 00:33:29,100
judgments and data collections for you

797
00:33:29,100 --> 00:33:31,380
it's here the Jupiter 1 change

798
00:33:31,380 --> 00:33:34,590
management client it would save you an

799
00:33:34,590 --> 00:33:37,200
absolute enormous amount of time I wish

800
00:33:37,200 --> 00:33:39,000
that it had been there when we first had

801
00:33:39,000 --> 00:33:43,890
this idea but no no luck so you guys

802
00:33:43,890 --> 00:33:45,060
should definitely take advantage of it

803
00:33:45,060 --> 00:33:50,100
and thank you I think we have a couple

804
00:33:50,100 --> 00:33:51,180
time for questions

805
00:33:51,180 --> 00:33:53,540
a little bit

806
00:33:58,340 --> 00:34:00,990
if I don't get your question now just

807
00:34:00,990 --> 00:34:04,680
please write me my messages are open on

808
00:34:04,680 --> 00:34:09,929
Twitter so you can just write me so the

809
00:34:09,929 --> 00:34:12,570
open sort just work with get bucket I

810
00:34:12,570 --> 00:34:15,830
will work with the order like github

811
00:34:15,830 --> 00:34:20,370
okay I'm sure that it works with

812
00:34:20,370 --> 00:34:24,090
bitbucket right now I know that we have

813
00:34:24,090 --> 00:34:25,860
github integration in Jupiter one in

814
00:34:25,860 --> 00:34:29,280
general I don't know oh okay erica is

815
00:34:29,280 --> 00:34:30,630
telling me that his open-source version

816
00:34:30,630 --> 00:34:32,370
is actually better than my closed source

817
00:34:32,370 --> 00:34:35,489
version so that's a fail for me um we're

818
00:34:35,489 --> 00:34:38,250
gonna have to switch over yeah

819
00:34:38,250 --> 00:34:39,780
apparently the open source one has

820
00:34:39,780 --> 00:34:45,989
github too so we do something very

821
00:34:45,989 --> 00:34:50,130
similar and in my experience when you're

822
00:34:50,130 --> 00:34:51,960
working with auditors and they've seen

823
00:34:51,960 --> 00:34:54,210
the same solution patterns they never

824
00:34:54,210 --> 00:34:55,560
give it much thought they're just kind

825
00:34:55,560 --> 00:34:56,820
of saying oh we've seen this before a

826
00:34:56,820 --> 00:34:58,590
thousand times we're just gonna check

827
00:34:58,590 --> 00:35:00,360
our box when they see something like

828
00:35:00,360 --> 00:35:02,430
this all of a sudden they have to

829
00:35:02,430 --> 00:35:04,560
reinterpret all of the requirements and

830
00:35:04,560 --> 00:35:06,390
start making judgment calls and it

831
00:35:06,390 --> 00:35:11,270
invites this whack-a-mole game where I

832
00:35:11,270 --> 00:35:14,070
guess one of the areas we saw the the

833
00:35:14,070 --> 00:35:15,720
most whack-a-mole games is even nested

834
00:35:15,720 --> 00:35:16,830
relationships where they start to

835
00:35:16,830 --> 00:35:18,810
question who Heather who has

836
00:35:18,810 --> 00:35:21,390
authorization and access control to turn

837
00:35:21,390 --> 00:35:23,220
off PR requests who has authorization

838
00:35:23,220 --> 00:35:25,290
and access control to change things that

839
00:35:25,290 --> 00:35:26,490
you're depending on in JIRA so I'm

840
00:35:26,490 --> 00:35:28,770
curious what type of whack-a-mole games

841
00:35:28,770 --> 00:35:30,300
did you get into with with HIPAA

842
00:35:30,300 --> 00:35:33,600
auditors yeah I think you're right in

843
00:35:33,600 --> 00:35:35,370
some ways those béchamel are actually

844
00:35:35,370 --> 00:35:38,340
like kind of good questions in that they

845
00:35:38,340 --> 00:35:41,610
are almost more in line with like how

846
00:35:41,610 --> 00:35:43,200
you really secure your infrastructure

847
00:35:43,200 --> 00:35:45,810
than the normal types of questions but I

848
00:35:45,810 --> 00:35:47,670
can say that after going through

849
00:35:47,670 --> 00:35:50,220
auditors we've done this for two or

850
00:35:50,220 --> 00:35:53,340
maybe three years now the response has

851
00:35:53,340 --> 00:35:55,710
always been well you guys really know

852
00:35:55,710 --> 00:35:58,980
what you're doing yes it's different but

853
00:35:58,980 --> 00:36:02,310
this is really great this is a breeze so

854
00:36:02,310 --> 00:36:04,830
in general it's been positive

855
00:36:04,830 --> 00:36:06,570
but yeah I could see not everyone

856
00:36:06,570 --> 00:36:11,070
getting that same experience some places

857
00:36:11,070 --> 00:36:14,280
the compliance regime to do separation

858
00:36:14,280 --> 00:36:17,370
of duties the approval on the PR was

859
00:36:17,370 --> 00:36:19,980
somehow sufficient is that not true in

860
00:36:19,980 --> 00:36:22,290
your environment like like you already

861
00:36:22,290 --> 00:36:24,720
have a second person required for

862
00:36:24,720 --> 00:36:26,220
approval right so now it seems like you

863
00:36:26,220 --> 00:36:30,360
have three right yeah so so the part

864
00:36:30,360 --> 00:36:32,160
about no one can act alone is definitely

865
00:36:32,160 --> 00:36:34,350
that separation of duties aspect and so

866
00:36:34,350 --> 00:36:37,080
one side of it is all the changes have

867
00:36:37,080 --> 00:36:40,470
been reviewed by peers which is kind of

868
00:36:40,470 --> 00:36:42,330
separation but not quite and then

869
00:36:42,330 --> 00:36:43,440
there's a question of who makes the

870
00:36:43,440 --> 00:36:45,120
judgment about whether it goes into

871
00:36:45,120 --> 00:36:48,660
production and so in our case the bot is

872
00:36:48,660 --> 00:36:50,220
actually sort of acting as that

873
00:36:50,220 --> 00:36:53,190
separation to say you know these are

874
00:36:53,190 --> 00:36:54,990
well established rules that the

875
00:36:54,990 --> 00:36:56,670
organisation has already agreed upon and

876
00:36:56,670 --> 00:36:59,310
codified so that's sort of that that's

877
00:36:59,310 --> 00:37:05,840
that alternate identity I think did you

878
00:37:27,550 --> 00:37:29,800
yeah so the question was those green

879
00:37:29,800 --> 00:37:31,600
check boxes of those picked by the

880
00:37:31,600 --> 00:37:33,550
development teams or or picked at an

881
00:37:33,550 --> 00:37:35,110
organization or by like an independent

882
00:37:35,110 --> 00:37:39,430
party and we were a small company so we

883
00:37:39,430 --> 00:37:43,900
have one security team and for us it was

884
00:37:43,900 --> 00:37:47,020
a collaboration between what rules would

885
00:37:47,020 --> 00:37:49,570
be sufficient to make security and

886
00:37:49,570 --> 00:37:52,630
development both happy and they're

887
00:37:52,630 --> 00:37:54,490
implemented one time the teams don't get

888
00:37:54,490 --> 00:37:56,410
to pick on its an organization level

889
00:37:56,410 --> 00:37:58,540
this is what it means to be ready for

890
00:37:58,540 --> 00:38:06,840
production do we have any more questions

891
00:38:09,700 --> 00:38:12,010
so the way you have this setup it

892
00:38:12,010 --> 00:38:13,240
assumes that everybody's constantly

893
00:38:13,240 --> 00:38:17,200
checking into the trunk well it assumes

894
00:38:17,200 --> 00:38:20,799
that people are anything that goes out

895
00:38:20,799 --> 00:38:22,599
to our development environment or

896
00:38:22,599 --> 00:38:24,369
anything that's going to be promoted to

897
00:38:24,369 --> 00:38:27,250
production is ultimately going into

898
00:38:27,250 --> 00:38:29,770
master so then how do you deal what do

899
00:38:29,770 --> 00:38:31,690
you guys do branching do you do like and

900
00:38:31,690 --> 00:38:33,579
then how does is it all done through

901
00:38:33,579 --> 00:38:36,040
feature flags and then when a set of

902
00:38:36,040 --> 00:38:39,010
separate code branches have to be merged

903
00:38:39,010 --> 00:38:40,540
back in how do you deal with that big

904
00:38:40,540 --> 00:38:44,619
merge or do you not have that issue we

905
00:38:44,619 --> 00:38:46,720
do use feature flags a lot to avoid that

906
00:38:46,720 --> 00:38:49,240
issue we tend to go small interative

907
00:38:49,240 --> 00:38:53,500
changes like the launch dark approach to

908
00:38:53,500 --> 00:38:55,720
features so we don't get a lot of

909
00:38:55,720 --> 00:38:58,510
long-lived side feature branches you

910
00:38:58,510 --> 00:39:00,400
could do that and have it go to dev

911
00:39:00,400 --> 00:39:02,500
without a problem that that would mean

912
00:39:02,500 --> 00:39:04,150
you could very easily do a deploy to dev

913
00:39:04,150 --> 00:39:07,200
on a branch when it goes to production

914
00:39:07,200 --> 00:39:11,170
you're gonna have to merge and I haven't

915
00:39:11,170 --> 00:39:12,849
heard a lot of people doing like multi

916
00:39:12,849 --> 00:39:17,410
branch deploys to prod so that's not

917
00:39:17,410 --> 00:39:19,480
hasn't been an issue for us we do do

918
00:39:19,480 --> 00:39:21,160
lots of small changes instead of long

919
00:39:21,160 --> 00:39:23,670
branches

920
00:39:25,190 --> 00:39:27,650
okay so that's time let's give a hand

921
00:39:27,650 --> 00:39:29,240
format

922
00:39:29,240 --> 00:39:33,330
[Applause]

