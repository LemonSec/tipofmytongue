1
00:00:00,030 --> 00:00:06,270
so next up is see that we're ready okay

2
00:00:06,270 --> 00:00:09,059
so next up is of here he's a senior

3
00:00:09,059 --> 00:00:12,300
product manager at J frog so they go

4
00:00:12,300 --> 00:00:17,160
ahead hi guys I see that some people are

5
00:00:17,160 --> 00:00:18,029
still in the building

6
00:00:18,029 --> 00:00:21,660
I I was hoping that all of you will go

7
00:00:21,660 --> 00:00:24,180
and I'll be less stressed but this is

8
00:00:24,180 --> 00:00:26,400
what I have so I'm going to talk about

9
00:00:26,400 --> 00:00:29,310
software liquid software as the security

10
00:00:29,310 --> 00:00:31,920
solution for dev Cyclops delivery and I

11
00:00:31,920 --> 00:00:33,630
know that it's cryptic I'll try to

12
00:00:33,630 --> 00:00:36,239
explain I won't try to sell you anything

13
00:00:36,239 --> 00:00:38,250
in this session it's more of a vision

14
00:00:38,250 --> 00:00:40,350
and let's go

15
00:00:40,350 --> 00:00:44,940
so tell me if you've been there have you

16
00:00:44,940 --> 00:00:46,739
identified the vulnerability in your

17
00:00:46,739 --> 00:00:48,690
product and it took you a long time to

18
00:00:48,690 --> 00:00:50,399
test it before you could release it to

19
00:00:50,399 --> 00:00:54,739
customers yes it's not not only me

20
00:00:54,739 --> 00:00:56,760
customers know that you have a

21
00:00:56,760 --> 00:00:58,289
vulnerability because it's something

22
00:00:58,289 --> 00:01:00,750
totally public and they are pressing to

23
00:01:00,750 --> 00:01:03,210
get a solution but you want to test it

24
00:01:03,210 --> 00:01:06,570
before and they are pressing and you

25
00:01:06,570 --> 00:01:07,979
want to test it before have you been

26
00:01:07,979 --> 00:01:08,570
there

27
00:01:08,570 --> 00:01:14,280
right when you or when when you got

28
00:01:14,280 --> 00:01:16,560
there and you provided a fix it was not

29
00:01:16,560 --> 00:01:18,689
only a fix for that critical issue but

30
00:01:18,689 --> 00:01:21,509
also other fixes because it was a part

31
00:01:21,509 --> 00:01:26,600
of a bigger patch been there yeah and

32
00:01:26,600 --> 00:01:30,329
then it took the customers ages to

33
00:01:30,329 --> 00:01:32,880
deploy because they need to wait for the

34
00:01:32,880 --> 00:01:34,320
change window they were pressing very

35
00:01:34,320 --> 00:01:36,509
very hard and then when you brought it

36
00:01:36,509 --> 00:01:38,400
to them it takes them three months to

37
00:01:38,400 --> 00:01:43,079
deploy the patch been there and the

38
00:01:43,079 --> 00:01:45,420
worst of all you provided the patch and

39
00:01:45,420 --> 00:01:50,430
it includes another problem yeah yeah

40
00:01:50,430 --> 00:01:51,630
we've all been there

41
00:01:51,630 --> 00:01:56,729
so Who am I I'm with J frog some people

42
00:01:56,729 --> 00:01:58,290
do not know what j4 is but when you

43
00:01:58,290 --> 00:02:01,680
mentioned artifactory or bin tre some

44
00:02:01,680 --> 00:02:03,799
people say oh we're actually using you

45
00:02:03,799 --> 00:02:06,780
I'm the product manager for X ray which

46
00:02:06,780 --> 00:02:09,300
is our software composition analysis

47
00:02:09,300 --> 00:02:12,690
tool but I won't talk about that here I

48
00:02:12,690 --> 00:02:14,760
an Instagram not related in anything to

49
00:02:14,760 --> 00:02:16,710
anything that we're talking about and

50
00:02:16,710 --> 00:02:19,560
the hashtag and the link are related to

51
00:02:19,560 --> 00:02:22,080
what I'm going to talk about today one

52
00:02:22,080 --> 00:02:24,240
thing may be the reason that I've joined

53
00:02:24,240 --> 00:02:26,820
Jeff frog is the cool shirt that we have

54
00:02:26,820 --> 00:02:29,160
and this is the wall of all of the

55
00:02:29,160 --> 00:02:30,510
shirts that have been released

56
00:02:30,510 --> 00:02:32,520
throughout the years so if you want a

57
00:02:32,520 --> 00:02:34,260
cool shirt you can go later on to the

58
00:02:34,260 --> 00:02:37,740
booth and get a shirt do what I do I did

59
00:02:37,740 --> 00:02:39,360
just fill the survey with fictitious

60
00:02:39,360 --> 00:02:44,130
answers and get a shirt okay and the

61
00:02:44,130 --> 00:02:47,130
second part of Who am I is and I won't

62
00:02:47,130 --> 00:02:49,200
talk about all of that but the idea is

63
00:02:49,200 --> 00:02:50,850
that I've been in the industry for quite

64
00:02:50,850 --> 00:02:54,090
a long time and the thing that I'm going

65
00:02:54,090 --> 00:02:58,580
to talk about I witnessed them on my own

66
00:02:58,580 --> 00:03:01,920
flesh as we are saying so I've been

67
00:03:01,920 --> 00:03:04,110
developing in a lot of programming

68
00:03:04,110 --> 00:03:06,210
languages that some of you may not even

69
00:03:06,210 --> 00:03:08,430
heard about them or you've seen them in

70
00:03:08,430 --> 00:03:11,340
a movie or in a slide earlier today but

71
00:03:11,340 --> 00:03:12,750
I promise you that COBOL was a

72
00:03:12,750 --> 00:03:15,990
programming language and I was a

73
00:03:15,990 --> 00:03:20,370
developer and manage development for C

74
00:03:20,370 --> 00:03:23,010
and C++ Linux kernel user space and

75
00:03:23,010 --> 00:03:25,080
later on joined the cybersecurity

76
00:03:25,080 --> 00:03:29,430
industry in different companies so let's

77
00:03:29,430 --> 00:03:32,130
dive into the problem so there are three

78
00:03:32,130 --> 00:03:33,810
phases in the life cycle of a

79
00:03:33,810 --> 00:03:37,830
vulnerability identifying it fixing it

80
00:03:37,830 --> 00:03:41,600
and getting the fix to customers so

81
00:03:41,600 --> 00:03:44,550
identifying it many people talked about

82
00:03:44,550 --> 00:03:47,010
that today if you go downstairs

83
00:03:47,010 --> 00:03:48,480
many people will try to sell you

84
00:03:48,480 --> 00:03:53,310
solutions to that problem and I'm not

85
00:03:53,310 --> 00:03:56,040
going to talk about that it's already

86
00:03:56,040 --> 00:03:59,100
been discussed here fixing the

87
00:03:59,100 --> 00:04:01,470
vulnerability we've we're also talking

88
00:04:01,470 --> 00:04:06,209
about ways and there are always two

89
00:04:06,209 --> 00:04:08,250
types if I'll divide them I can divide

90
00:04:08,250 --> 00:04:11,010
them into these two types it's fixing

91
00:04:11,010 --> 00:04:12,800
your own code because the

92
00:04:12,800 --> 00:04:15,180
vulnerabilities in in your own code or

93
00:04:15,180 --> 00:04:19,260
in a third party and here the problems

94
00:04:19,260 --> 00:04:22,560
start so let's say that we know how to

95
00:04:22,560 --> 00:04:24,780
fix it but if we need to update a

96
00:04:24,780 --> 00:04:26,130
dependency in

97
00:04:26,130 --> 00:04:30,110
third party how many of you are

98
00:04:30,110 --> 00:04:33,270
constantly updating to the latest and

99
00:04:33,270 --> 00:04:37,170
greatest version no one yeah

100
00:04:37,170 --> 00:04:40,050
okay what do you use a third party that

101
00:04:40,050 --> 00:04:43,620
you can do it that easily okay yeah

102
00:04:43,620 --> 00:04:45,300
exactly it's not easy and in a lot of

103
00:04:45,300 --> 00:04:48,120
cases what we are saying if it if it

104
00:04:48,120 --> 00:04:50,670
works don't don't touch it right this is

105
00:04:50,670 --> 00:04:55,200
our standard approach and then after we

106
00:04:55,200 --> 00:04:57,930
fix it's a long testing cycle because

107
00:04:57,930 --> 00:05:01,410
again it's our change and other changes

108
00:05:01,410 --> 00:05:03,630
as well it's not only the fix for that

109
00:05:03,630 --> 00:05:08,370
problem and if it if it is working don't

110
00:05:08,370 --> 00:05:13,530
break it so one recent survey shows that

111
00:05:13,530 --> 00:05:16,920
although Java 10 and Java 11 are there

112
00:05:16,920 --> 00:05:22,290
in the market and are popular 83% of the

113
00:05:22,290 --> 00:05:27,620
developers using Java 8 right

114
00:05:27,620 --> 00:05:30,300
not nothing to say here I have no word

115
00:05:30,300 --> 00:05:33,720
without words okay so let's assume that

116
00:05:33,720 --> 00:05:36,420
we've fixed the problem we have a binary

117
00:05:36,420 --> 00:05:39,620
that we can deliver to our customers and

118
00:05:39,620 --> 00:05:42,750
then start the real problem and I'll

119
00:05:42,750 --> 00:05:49,140
talk mostly about that today so when you

120
00:05:49,140 --> 00:05:51,540
get to production when you are on the

121
00:05:51,540 --> 00:05:54,230
process of production how many of you

122
00:05:54,230 --> 00:05:57,030
found the bug in production after you've

123
00:05:57,030 --> 00:05:59,460
done the most intensive tests in-house

124
00:05:59,460 --> 00:06:03,390
you've done better testing and you run

125
00:06:03,390 --> 00:06:06,530
also acceptance tests at the customer I

126
00:06:06,530 --> 00:06:09,330
can tell you a story about back then

127
00:06:09,330 --> 00:06:13,380
when I was responsible for developing a

128
00:06:13,380 --> 00:06:15,360
kernel model to monitor to monitor

129
00:06:15,360 --> 00:06:18,240
database activity and we've provided

130
00:06:18,240 --> 00:06:21,930
we've developed a feature to db2 users

131
00:06:21,930 --> 00:06:27,120
that was asked for a long time and we've

132
00:06:27,120 --> 00:06:30,300
tested that new ability internally it

133
00:06:30,300 --> 00:06:33,270
was great we went to a beta the customer

134
00:06:33,270 --> 00:06:35,340
was very very satisfied we've done

135
00:06:35,340 --> 00:06:38,190
exactly what he wanted and then the

136
00:06:38,190 --> 00:06:40,009
first day that he put it in production

137
00:06:40,009 --> 00:06:44,789
it's a kernel model what happened his

138
00:06:44,789 --> 00:06:47,759
server crashed and we've done the best

139
00:06:47,759 --> 00:06:49,169
testing that we could have done but

140
00:06:49,169 --> 00:06:50,789
after we found the problem and we

141
00:06:50,789 --> 00:06:52,979
analyzed that we fat we came to find out

142
00:06:52,979 --> 00:06:55,229
what we need to do next in order to not

143
00:06:55,229 --> 00:06:57,770
fail in this specific one the next time

144
00:06:57,770 --> 00:07:00,300
but it shows us that the best testing

145
00:07:00,300 --> 00:07:02,880
that we will do we can always find

146
00:07:02,880 --> 00:07:07,139
something that fails us as we've talked

147
00:07:07,139 --> 00:07:10,830
before if we are wringing patches which

148
00:07:10,830 --> 00:07:12,750
are too big and in a lot of cases this

149
00:07:12,750 --> 00:07:13,770
is what's happening

150
00:07:13,770 --> 00:07:16,800
it brings problems with it it brings

151
00:07:16,800 --> 00:07:20,820
more risk and to the two examples the

152
00:07:20,820 --> 00:07:23,820
face time a vulnerability that Sankey

153
00:07:23,820 --> 00:07:25,919
identified something like a year ago I

154
00:07:25,919 --> 00:07:29,400
have no clue why it took Apple quite a

155
00:07:29,400 --> 00:07:32,340
long time to release it and it was not

156
00:07:32,340 --> 00:07:34,860
only that fix it was multiple fixes

157
00:07:34,860 --> 00:07:35,810
together

158
00:07:35,810 --> 00:07:38,490
Windows Server specs for sure it's a

159
00:07:38,490 --> 00:07:40,889
huge patch you need to wait and you need

160
00:07:40,889 --> 00:07:44,760
to have a downtime throughout these

161
00:07:44,760 --> 00:07:48,030
updates and then you also need to

162
00:07:48,030 --> 00:07:51,570
download it and if we are in the world

163
00:07:51,570 --> 00:07:55,289
we are going into of IOT devices ban

164
00:07:55,289 --> 00:07:56,940
which is also a question here and you

165
00:07:56,940 --> 00:07:58,500
are limited with the bandwidth and so

166
00:07:58,500 --> 00:08:02,570
you will fail in downloading big patches

167
00:08:02,570 --> 00:08:09,979
here an example of 33 updates waiting

168
00:08:11,209 --> 00:08:14,129
okay sometimes customers need to guess

169
00:08:14,129 --> 00:08:17,999
that there is a patch available how many

170
00:08:17,999 --> 00:08:21,479
of you have ever upgraded the software

171
00:08:21,479 --> 00:08:24,389
or hardware of their router you did that

172
00:08:24,389 --> 00:08:27,869
yeah how many of you did not okay

173
00:08:27,869 --> 00:08:29,550
do you know that if you go into the UI

174
00:08:29,550 --> 00:08:31,679
you will see that you you are

175
00:08:31,679 --> 00:08:36,328
potentially having a firmware update no

176
00:08:36,328 --> 00:08:37,559
one tells us about that it's that

177
00:08:37,559 --> 00:08:44,579
complex and hard and patches require

178
00:08:44,579 --> 00:08:46,759
downtime and as we've talked before it

179
00:08:46,759 --> 00:08:49,800
is a problem you are talking with

180
00:08:49,800 --> 00:08:51,389
enterprises my customers were

181
00:08:51,389 --> 00:08:53,220
enterprises we were deploying our

182
00:08:53,220 --> 00:08:56,819
solution at their servers we need to

183
00:08:56,819 --> 00:09:00,389
wait for a change window and it can take

184
00:09:00,389 --> 00:09:02,490
a long time getting there so one of the

185
00:09:02,490 --> 00:09:04,050
solution that in one of the companies

186
00:09:04,050 --> 00:09:06,029
that I worked with we developed was

187
00:09:06,029 --> 00:09:08,069
virtual patching you cannot patch your

188
00:09:08,069 --> 00:09:11,519
database we will provide you an external

189
00:09:11,519 --> 00:09:15,079
protection against this vulnerability

190
00:09:15,079 --> 00:09:19,500
but you don't have in a virtual patch

191
00:09:19,500 --> 00:09:21,480
for any vulnerability you don't know in

192
00:09:21,480 --> 00:09:23,009
some cases what the vulnerability is

193
00:09:23,009 --> 00:09:25,529
exactly about and so you cannot provide

194
00:09:25,529 --> 00:09:29,430
that and the testing even at the

195
00:09:29,430 --> 00:09:31,980
customer at all of our environment can

196
00:09:31,980 --> 00:09:36,930
take ages and so we get to the point

197
00:09:36,930 --> 00:09:38,550
that customers are not using the latest

198
00:09:38,550 --> 00:09:41,430
patches because they fear that it will

199
00:09:41,430 --> 00:09:44,819
break there are their tasks and they

200
00:09:44,819 --> 00:09:47,069
keep on being vulnerable and we have a

201
00:09:47,069 --> 00:09:51,029
great example from 2018 the NHS wanna

202
00:09:51,029 --> 00:09:55,170
cry they were using Windows XP which was

203
00:09:55,170 --> 00:09:58,170
17 years old there were already new

204
00:09:58,170 --> 00:10:01,050
Windows versions that are much better

205
00:10:01,050 --> 00:10:02,759
and getting security updates all the

206
00:10:02,759 --> 00:10:07,500
time and so the situation today is that

207
00:10:07,500 --> 00:10:11,009
when an update is available the question

208
00:10:11,009 --> 00:10:12,870
is do we want it or not if not then

209
00:10:12,870 --> 00:10:15,509
there is no issue but usually we want to

210
00:10:15,509 --> 00:10:19,050
have it are the risks in it if no we can

211
00:10:19,050 --> 00:10:21,389
update but most of the time if I'm a

212
00:10:21,389 --> 00:10:23,649
customer and you provide me an update

213
00:10:23,649 --> 00:10:25,990
there is a risk because I'm used to the

214
00:10:25,990 --> 00:10:28,990
level of the patches that you provide do

215
00:10:28,990 --> 00:10:31,180
we trust the update exactly the answer

216
00:10:31,180 --> 00:10:33,490
is usually no can we verify the update

217
00:10:33,490 --> 00:10:38,100
if no we're not updating it and if yes a

218
00:10:38,100 --> 00:10:40,920
verification and the verification is

219
00:10:40,920 --> 00:10:44,639
heavy so we have all of these goodies

220
00:10:44,639 --> 00:10:49,329
but we cannot touch them and if we

221
00:10:49,329 --> 00:10:52,209
compare the feature that we want and the

222
00:10:52,209 --> 00:10:55,120
acceptance test cost it's very it's one

223
00:10:55,120 --> 00:11:01,170
to the other so what is the solution

224
00:11:01,170 --> 00:11:03,879
what I am going to present to you is a

225
00:11:03,879 --> 00:11:06,449
vision that we call liquid software and

226
00:11:06,449 --> 00:11:10,629
it talks about continuous updates what

227
00:11:10,629 --> 00:11:12,999
does it mean it means that we want to

228
00:11:12,999 --> 00:11:15,430
get to a point that we are constantly

229
00:11:15,430 --> 00:11:18,279
updating the production environment of

230
00:11:18,279 --> 00:11:21,870
our customers in small chunks it's like

231
00:11:21,870 --> 00:11:25,389
a water flowing its contents lis flowing

232
00:11:25,389 --> 00:11:28,809
constantly flowing instead of a tract of

233
00:11:28,809 --> 00:11:30,990
water that arrives from time to time

234
00:11:30,990 --> 00:11:36,100
okay it is a vision it's not fully baked

235
00:11:36,100 --> 00:11:37,389
but this is something that we are

236
00:11:37,389 --> 00:11:41,079
thinking about and it requires a mindset

237
00:11:41,079 --> 00:11:44,769
switch same as we had to do before when

238
00:11:44,769 --> 00:11:49,319
we move to agile I remember being

239
00:11:49,319 --> 00:11:51,819
thinking that agile would not work in my

240
00:11:51,819 --> 00:11:53,949
project because it's a kernel model I

241
00:11:53,949 --> 00:11:56,170
cannot do that it's very very dangerous

242
00:11:56,170 --> 00:11:58,860
for that it's a mindset switch shift and

243
00:11:58,860 --> 00:12:01,689
as I'm saying as I said not everything

244
00:12:01,689 --> 00:12:06,569
is baked and if someone can do that

245
00:12:06,569 --> 00:12:09,819
revolution it's only one organization

246
00:12:09,819 --> 00:12:12,370
it's the dev Cyclops because it's the

247
00:12:12,370 --> 00:12:14,230
combination of the developers the

248
00:12:14,230 --> 00:12:17,110
operations and security together to come

249
00:12:17,110 --> 00:12:20,620
with with such a solution so in the next

250
00:12:20,620 --> 00:12:24,699
slide I'll show you some ideas so first

251
00:12:24,699 --> 00:12:27,089
of all it's not that it's totally

252
00:12:27,089 --> 00:12:30,699
science fiction we have today teams the

253
00:12:30,699 --> 00:12:32,649
elite teams that are able to deploy

254
00:12:32,649 --> 00:12:36,120
changes multiple times a day

255
00:12:36,120 --> 00:12:39,060
you can say it's only sass and it's us

256
00:12:39,060 --> 00:12:41,250
for sure it's much easier when you have

257
00:12:41,250 --> 00:12:43,320
control on the servers in which your

258
00:12:43,320 --> 00:12:47,010
product is running but first not all of

259
00:12:47,010 --> 00:12:49,950
the sass solutions are there it's only

260
00:12:49,950 --> 00:12:52,610
the elite teams that are there and

261
00:12:52,610 --> 00:12:55,380
second we have a lot of non sass

262
00:12:55,380 --> 00:12:58,710
solutions all of the companies that I've

263
00:12:58,710 --> 00:13:02,040
worked in required an on-prem deployment

264
00:13:02,040 --> 00:13:04,440
require required a product that is being

265
00:13:04,440 --> 00:13:07,170
run on the server of the customer that

266
00:13:07,170 --> 00:13:08,850
will not did not have a server of their

267
00:13:08,850 --> 00:13:15,540
own so let's talk about some continuous

268
00:13:15,540 --> 00:13:19,290
updates patterns first one is frequent

269
00:13:19,290 --> 00:13:23,760
updates it repeats all of the problem

270
00:13:23,760 --> 00:13:26,670
that we've talked about it takes a long

271
00:13:26,670 --> 00:13:30,030
time from one page to another a batch

272
00:13:30,030 --> 00:13:35,100
update contains a lot of changes and are

273
00:13:35,100 --> 00:13:38,310
large in size and so if we can get to a

274
00:13:38,310 --> 00:13:41,820
process that we deliver more frequently

275
00:13:41,820 --> 00:13:45,090
smaller patches it will be more

276
00:13:45,090 --> 00:13:48,240
successful and if we get there we'll

277
00:13:48,240 --> 00:13:50,490
create a trust in customers to be able

278
00:13:50,490 --> 00:13:52,980
to consume updates over time the fact

279
00:13:52,980 --> 00:13:54,750
that they don't trust it is because they

280
00:13:54,750 --> 00:13:56,340
are waiting a long time there are a lot

281
00:13:56,340 --> 00:13:58,560
of changes and each time it fixes their

282
00:13:58,560 --> 00:14:01,320
problem but introduces three potential

283
00:14:01,320 --> 00:14:07,830
others another pattern is what we call a

284
00:14:07,830 --> 00:14:11,040
canary release so I'm talking here about

285
00:14:11,040 --> 00:14:13,650
the cases that I don't have control over

286
00:14:13,650 --> 00:14:15,630
the servers in which it is running there

287
00:14:15,630 --> 00:14:20,250
are owned by our customers and so I

288
00:14:20,250 --> 00:14:23,010
don't want to send an update to all of

289
00:14:23,010 --> 00:14:26,010
the customers especially when it's the

290
00:14:26,010 --> 00:14:28,440
first release of this update I want to

291
00:14:28,440 --> 00:14:32,339
choose several Canaries which are in a

292
00:14:32,339 --> 00:14:34,500
lot of cases customers that we have

293
00:14:34,500 --> 00:14:38,550
partnership with and are also giving us

294
00:14:38,550 --> 00:14:40,620
visibility into their environment so

295
00:14:40,620 --> 00:14:42,450
that we'll see how it's really running

296
00:14:42,450 --> 00:14:45,730
in a production system

297
00:14:45,730 --> 00:14:48,279
I can tell you that in one of my

298
00:14:48,279 --> 00:14:51,600
previous companies we had several such

299
00:14:51,600 --> 00:14:55,919
customers that allowed us to do that

300
00:14:57,329 --> 00:15:05,889
observer ability so it is that we want

301
00:15:05,889 --> 00:15:08,859
to have more visibility into what's

302
00:15:08,859 --> 00:15:10,929
actually happening happening in our

303
00:15:10,929 --> 00:15:14,139
production environments and the way to

304
00:15:14,139 --> 00:15:16,569
do that is to collect data back from our

305
00:15:16,569 --> 00:15:18,639
production environments we sometimes

306
00:15:18,639 --> 00:15:21,279
call it call home we may call it in

307
00:15:21,279 --> 00:15:23,559
different ways but the idea is to

308
00:15:23,559 --> 00:15:26,319
constantly get data back this data can

309
00:15:26,319 --> 00:15:29,470
be used for deeper analysis in order to

310
00:15:29,470 --> 00:15:32,499
be able to identify what's the normal

311
00:15:32,499 --> 00:15:34,959
behavior what's abnormal behavior and

312
00:15:34,959 --> 00:15:41,709
improve over time one problem with

313
00:15:41,709 --> 00:15:45,629
patches is that as we talked before

314
00:15:45,629 --> 00:15:48,790
sometimes they may break even with all

315
00:15:48,790 --> 00:15:52,809
of our best testing and the idea here is

316
00:15:52,809 --> 00:15:57,009
to have a local automatic rollback so

317
00:15:57,009 --> 00:16:01,059
that I'm keeping the old version and I'm

318
00:16:01,059 --> 00:16:03,549
letting the new software run but I have

319
00:16:03,549 --> 00:16:07,149
a mechanism that can identify that it is

320
00:16:07,149 --> 00:16:11,139
not working automatically without the

321
00:16:11,139 --> 00:16:13,899
need for any human being to to be there

322
00:16:13,899 --> 00:16:16,509
we don't have like we have in sass some

323
00:16:16,509 --> 00:16:19,089
people in DevOps that can be looking

324
00:16:19,089 --> 00:16:21,730
from behind the scenes and can change

325
00:16:21,730 --> 00:16:23,529
stuff fast before the customer is using

326
00:16:23,529 --> 00:16:25,629
that is seeing the problem but rather we

327
00:16:25,629 --> 00:16:29,799
need that in an automatic way and this

328
00:16:29,799 --> 00:16:35,230
is also a need that requires some new

329
00:16:35,230 --> 00:16:38,679
way of thinking about how can I because

330
00:16:38,679 --> 00:16:40,480
this is something when I was first

331
00:16:40,480 --> 00:16:43,989
introduced into into that my my concern

332
00:16:43,989 --> 00:16:46,419
is that if you're using data in a

333
00:16:46,419 --> 00:16:47,919
database which is local to the

334
00:16:47,919 --> 00:16:51,459
deployment if you upgraded you start

335
00:16:51,459 --> 00:16:54,699
using a new schema and this schema if

336
00:16:54,699 --> 00:16:56,660
you now want to rollback this

337
00:16:56,660 --> 00:16:58,790
is not being you cannot use it and an

338
00:16:58,790 --> 00:17:01,519
old software cannot guess what would be

339
00:17:01,519 --> 00:17:03,379
the new schema in a new version you can

340
00:17:03,379 --> 00:17:06,650
always do a new version of the software

341
00:17:06,650 --> 00:17:09,049
can use the old schema but not the other

342
00:17:09,049 --> 00:17:09,819
way around

343
00:17:09,819 --> 00:17:13,730
but luckily today we have mechanisms

344
00:17:13,730 --> 00:17:16,159
especially with no sequel databases

345
00:17:16,159 --> 00:17:18,740
where the schema is not that strict as

346
00:17:18,740 --> 00:17:21,109
it was before and even if it's a

347
00:17:21,109 --> 00:17:23,059
relational databases there are ways to

348
00:17:23,059 --> 00:17:26,449
overcome that so this is something to

349
00:17:26,449 --> 00:17:28,940
take into account and there are places

350
00:17:28,940 --> 00:17:31,970
which are very critical like software

351
00:17:31,970 --> 00:17:36,530
that runs in a car such example where we

352
00:17:36,530 --> 00:17:38,150
already know that there is a common

353
00:17:38,150 --> 00:17:40,789
practice to run two parallel systems and

354
00:17:40,789 --> 00:17:43,789
so it can be that one of them is getting

355
00:17:43,789 --> 00:17:47,299
upgraded and only if everything is

356
00:17:47,299 --> 00:17:50,240
working ok we will upgrade the other one

357
00:17:50,240 --> 00:17:52,970
otherwise we will roll back this one

358
00:17:52,970 --> 00:17:55,750
which is broken

359
00:17:57,580 --> 00:18:01,730
there are downtime is totally important

360
00:18:01,730 --> 00:18:04,400
we want the fixes to be there for

361
00:18:04,400 --> 00:18:08,690
customers as soon as possible you know

362
00:18:08,690 --> 00:18:11,000
I've been talking with with customers

363
00:18:11,000 --> 00:18:12,970
that are complaining about the problem

364
00:18:12,970 --> 00:18:15,830
we provided them the patch they keep

365
00:18:15,830 --> 00:18:17,690
complaining about the problem we're

366
00:18:17,690 --> 00:18:20,179
asking them did you install the patch no

367
00:18:20,179 --> 00:18:23,539
we couldn't yet so it's it's a problem

368
00:18:23,539 --> 00:18:26,750
of the customers but it's our problem as

369
00:18:26,750 --> 00:18:30,230
well and so there are ideas and I won't

370
00:18:30,230 --> 00:18:34,640
get into that here in deep detail is to

371
00:18:34,640 --> 00:18:37,880
do the software upgrade in phases of

372
00:18:37,880 --> 00:18:41,210
different components if we're talking

373
00:18:41,210 --> 00:18:43,610
about micro services one that connects

374
00:18:43,610 --> 00:18:46,539
to the database and doing the data data

375
00:18:46,539 --> 00:18:50,330
abstraction we can connect it and it

376
00:18:50,330 --> 00:18:52,159
will work still with the old database

377
00:18:52,159 --> 00:18:54,559
version and so on there are ways to do

378
00:18:54,559 --> 00:18:56,929
that and you know I we don't have the

379
00:18:56,929 --> 00:18:59,179
solution for everything but we are

380
00:18:59,179 --> 00:19:01,730
software engineers and we have a way to

381
00:19:01,730 --> 00:19:04,270
solve any problem

382
00:19:04,270 --> 00:19:10,300
and having the ability to do the

383
00:19:10,300 --> 00:19:12,400
database migration from the old

384
00:19:12,400 --> 00:19:15,370
structure to the new structure while the

385
00:19:15,370 --> 00:19:17,620
software is running we don't need to

386
00:19:17,620 --> 00:19:20,050
have a downtime to do the database

387
00:19:20,050 --> 00:19:22,240
migration we can do it as the software

388
00:19:22,240 --> 00:19:24,850
is running it's not simple but it's

389
00:19:24,850 --> 00:19:31,990
doable and above all of these patterns

390
00:19:31,990 --> 00:19:36,309
there is the main pattern that we know

391
00:19:36,309 --> 00:19:40,059
from successful dev Cyclops and it is to

392
00:19:40,059 --> 00:19:42,120
automate everything we're talking about

393
00:19:42,120 --> 00:19:45,520
developing tools that will allow us to

394
00:19:45,520 --> 00:19:49,390
do this continuous updates so there are

395
00:19:49,390 --> 00:19:51,880
tools that will run on the customer

396
00:19:51,880 --> 00:19:54,670
server for example that will take care

397
00:19:54,670 --> 00:19:56,860
of doing a rollback an automatic

398
00:19:56,860 --> 00:19:58,870
rollback if needed everything must be

399
00:19:58,870 --> 00:20:01,809
automatic if it's manual it's it won't

400
00:20:01,809 --> 00:20:04,410
succeed this is where we are today and

401
00:20:04,410 --> 00:20:08,110
automation also include as much as

402
00:20:08,110 --> 00:20:12,130
possible testing that we can in the

403
00:20:12,130 --> 00:20:15,059
security aspect

404
00:20:19,190 --> 00:20:23,879
some other thoughts is to get to a point

405
00:20:23,879 --> 00:20:26,100
that we won't need to ask the customer

406
00:20:26,100 --> 00:20:28,979
do you want to update your version it

407
00:20:28,979 --> 00:20:31,979
will be trusted and fully automatic and

408
00:20:31,979 --> 00:20:34,440
we we are there in some cases in our

409
00:20:34,440 --> 00:20:37,950
phones in a lot of cases no one asked us

410
00:20:37,950 --> 00:20:43,080
whether we want to update the app as I

411
00:20:43,080 --> 00:20:46,950
will think it is a mindset shift or

412
00:20:46,950 --> 00:20:50,879
switch and it requires rethinking by

413
00:20:50,879 --> 00:20:53,609
developers so when you develop a feature

414
00:20:53,609 --> 00:20:56,399
you should think in advance about the

415
00:20:56,399 --> 00:21:02,279
ability to do a rolling update of the

416
00:21:02,279 --> 00:21:06,149
data of the schema to do a rollback you

417
00:21:06,149 --> 00:21:07,529
should develop your software in that

418
00:21:07,529 --> 00:21:10,200
version so that it will mean it will

419
00:21:10,200 --> 00:21:12,509
know how to work with the database of a

420
00:21:12,509 --> 00:21:19,349
fee of a future version and also to do

421
00:21:19,349 --> 00:21:23,909
what we want to direct customers to do

422
00:21:23,909 --> 00:21:26,639
we should also constantly update

423
00:21:26,639 --> 00:21:28,970
internally like you are doing our

424
00:21:28,970 --> 00:21:32,220
internal dependencies it's better to be

425
00:21:32,220 --> 00:21:34,830
in the latest and greatest and then

426
00:21:34,830 --> 00:21:36,720
we'll have less vulnerabilities and the

427
00:21:36,720 --> 00:21:38,609
fixes will be for the latest and

428
00:21:38,609 --> 00:21:40,470
greatest if if there is a vulnerability

429
00:21:40,470 --> 00:21:45,139
found in a open source component the

430
00:21:45,139 --> 00:21:47,970
case that they will fix the

431
00:21:47,970 --> 00:21:49,950
vulnerability for my old version that

432
00:21:49,950 --> 00:21:52,679
I'm using or if it's a third party from

433
00:21:52,679 --> 00:21:54,659
another vendor the case that they will

434
00:21:54,659 --> 00:21:58,169
say yes we'll update the vulnerability

435
00:21:58,169 --> 00:22:01,529
in that old patch is quite low in that

436
00:22:01,529 --> 00:22:03,599
old version it which it has a higher

437
00:22:03,599 --> 00:22:06,960
probability probability to happen in the

438
00:22:06,960 --> 00:22:10,919
in the newest version and someone said a

439
00:22:10,919 --> 00:22:13,109
lot of things that we're discussed here

440
00:22:13,109 --> 00:22:15,659
throughout this conference were around

441
00:22:15,659 --> 00:22:17,639
the thing that we are talking here I

442
00:22:17,639 --> 00:22:19,769
don't remember who it was yesterday but

443
00:22:19,769 --> 00:22:21,989
he mentioned that they are wrapping

444
00:22:21,989 --> 00:22:25,879
their dependencies with their own

445
00:22:25,879 --> 00:22:29,549
wrapper so that they have a standard API

446
00:22:29,549 --> 00:22:31,170
and if the

447
00:22:31,170 --> 00:22:33,810
dependency changes its API they are not

448
00:22:33,810 --> 00:22:36,150
breaking everything they just need to

449
00:22:36,150 --> 00:22:41,510
update the rapper to use the new API

450
00:22:44,060 --> 00:22:49,050
some more if we get there maybe we could

451
00:22:49,050 --> 00:22:50,940
simply push the libraries the new

452
00:22:50,940 --> 00:22:52,620
version of the library the new version

453
00:22:52,620 --> 00:22:56,690
of the dependency down there to the

454
00:22:56,690 --> 00:23:00,120
where we are running our product imagine

455
00:23:00,120 --> 00:23:04,200
that we will be able to push the this

456
00:23:04,200 --> 00:23:06,030
update of this library maybe with a

457
00:23:06,030 --> 00:23:08,910
wrapper and not everything that uses

458
00:23:08,910 --> 00:23:14,070
that even some customers that are

459
00:23:14,070 --> 00:23:16,290
running the acceptance test on their

460
00:23:16,290 --> 00:23:17,940
environment for the right reasons they

461
00:23:17,940 --> 00:23:20,220
don't trust us they have special use

462
00:23:20,220 --> 00:23:22,170
cases each time that they get a patch

463
00:23:22,170 --> 00:23:24,510
from us they are running it they're

464
00:23:24,510 --> 00:23:27,570
testing it so maybe we can integrate

465
00:23:27,570 --> 00:23:30,180
that into the process so that it is

466
00:23:30,180 --> 00:23:33,210
automatic for them so that we can push

467
00:23:33,210 --> 00:23:35,790
updates automatically it will run on the

468
00:23:35,790 --> 00:23:38,910
environment and if it falls if it fails

469
00:23:38,910 --> 00:23:41,010
they will simply not deploy that and we

470
00:23:41,010 --> 00:23:43,070
will get a notification about that

471
00:23:43,070 --> 00:23:47,210
as we were saying as I was saying before

472
00:23:47,210 --> 00:23:50,460
collect more information a lot of

473
00:23:50,460 --> 00:23:52,400
information we are in the metadata era

474
00:23:52,400 --> 00:23:55,050
from every deployment from everywhere

475
00:23:55,050 --> 00:23:59,400
and then we can process this information

476
00:23:59,400 --> 00:24:02,730
using AI for better understanding of

477
00:24:02,730 --> 00:24:06,420
what's happening and for incentives not

478
00:24:06,420 --> 00:24:08,130
incentives in for ideas for how to

479
00:24:08,130 --> 00:24:16,220
improve so if this vision happens

480
00:24:16,220 --> 00:24:19,909
when the update is available the

481
00:24:19,909 --> 00:24:22,129
question of do we want it is not really

482
00:24:22,129 --> 00:24:26,120
relevant because if yes for sure and if

483
00:24:26,120 --> 00:24:28,370
not it will be automatic we don't we

484
00:24:28,370 --> 00:24:31,789
will not need to ask this question are

485
00:24:31,789 --> 00:24:33,049
there any high risks

486
00:24:33,049 --> 00:24:37,220
no if not update but also if yes the

487
00:24:37,220 --> 00:24:39,769
trust in the vendor which we will be

488
00:24:39,769 --> 00:24:46,610
much higher and it will happen a lot of

489
00:24:46,610 --> 00:24:49,909
the ideas are already and again it's a

490
00:24:49,909 --> 00:24:52,549
vision are already described in in this

491
00:24:52,549 --> 00:24:57,100
book that you can get over the internet

492
00:24:57,100 --> 00:25:01,580
and with that I will thank you and we'll

493
00:25:01,580 --> 00:25:05,059
be happy to answer any question or

494
00:25:05,059 --> 00:25:07,909
rather we can make it a brainstorming

495
00:25:07,909 --> 00:25:11,110
session of ideas that you have around it

496
00:25:11,110 --> 00:25:13,650
yeah

497
00:25:13,650 --> 00:25:18,750
[Applause]

498
00:25:18,750 --> 00:25:22,320
in general I like the idea but so my day

499
00:25:22,320 --> 00:25:24,840
job is a software tester and I can see

500
00:25:24,840 --> 00:25:26,430
this making things really difficult if

501
00:25:26,430 --> 00:25:28,290
they're like what version does this repo

502
00:25:28,290 --> 00:25:30,360
in and we're doing continuous

503
00:25:30,360 --> 00:25:32,760
integration and all the parts are

504
00:25:32,760 --> 00:25:36,690
changing how do you see this interacting

505
00:25:36,690 --> 00:25:40,520
with like in-house testing for example

506
00:25:40,520 --> 00:25:44,190
so first of all again from my experience

507
00:25:44,190 --> 00:25:46,560
everything should become automatic and

508
00:25:46,560 --> 00:25:48,990
maybe I'll need more clarification about

509
00:25:48,990 --> 00:25:50,730
what you're asking but if you're making

510
00:25:50,730 --> 00:25:52,980
everything automatic the versioning as

511
00:25:52,980 --> 00:25:54,930
we are seizing as we see them today and

512
00:25:54,930 --> 00:25:57,090
we're using them would be less relevant

513
00:25:57,090 --> 00:25:58,950
it would be more of a metadata but

514
00:25:58,950 --> 00:26:01,050
customers would not talk about versions

515
00:26:01,050 --> 00:26:04,800
do you know what version of what phone

516
00:26:04,800 --> 00:26:07,050
do you use iPhone Android iPhone do you

517
00:26:07,050 --> 00:26:09,090
know what's the version internal version

518
00:26:09,090 --> 00:26:11,730
of your iPhone software you don't know

519
00:26:11,730 --> 00:26:14,940
is it really relevant we think that if

520
00:26:14,940 --> 00:26:16,470
we succeed it won't be relevant for

521
00:26:16,470 --> 00:26:19,110
customers it is relevant internally when

522
00:26:19,110 --> 00:26:23,340
we are doing any analysis did I manage

523
00:26:23,340 --> 00:26:29,629
to understand yeah

524
00:26:33,419 --> 00:26:35,099
yeah I can understand if there are no

525
00:26:35,099 --> 00:26:37,529
questions because it's more affair of a

526
00:26:37,529 --> 00:26:40,919
thought process that we are all running

527
00:26:40,919 --> 00:26:44,419
in and we're trying to push it forward

528
00:26:44,419 --> 00:26:47,960
okay thank you guys thank you

529
00:26:47,960 --> 00:26:53,249
[Applause]

