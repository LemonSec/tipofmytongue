1
00:00:06,330 --> 00:00:11,670
one my name is Morgan Roman hi they work

2
00:00:11,670 --> 00:00:15,300
with me and this is about how to prevent

3
00:00:15,300 --> 00:00:17,460
developers from doing bad things with

4
00:00:17,460 --> 00:00:19,290
your existing framework and essentially

5
00:00:19,290 --> 00:00:20,460
stopping them from shooting themselves

6
00:00:20,460 --> 00:00:22,740
in the foot okay I call it banning foot

7
00:00:22,740 --> 00:00:26,010
guns so quickly about me I work on the

8
00:00:26,010 --> 00:00:28,080
application security team I work at

9
00:00:28,080 --> 00:00:30,750
DocuSign I have two others standing over

10
00:00:30,750 --> 00:00:33,330
there and I want to give special thanks

11
00:00:33,330 --> 00:00:34,949
to a couple people who helped with

12
00:00:34,949 --> 00:00:38,250
building out this process and to

13
00:00:38,250 --> 00:00:40,290
ultimately decide what led to all this

14
00:00:40,290 --> 00:00:41,790
we were tired playing whack-a-mole

15
00:00:41,790 --> 00:00:43,650
with bugs and that's why you have me

16
00:00:43,650 --> 00:00:45,780
right there playing whack-a-mole at RSA

17
00:00:45,780 --> 00:00:49,320
at some vendor booth so want to

18
00:00:49,320 --> 00:00:50,729
introduce that and I want to make one

19
00:00:50,729 --> 00:00:53,580
thing very very clear I'm gonna use

20
00:00:53,580 --> 00:00:55,290
examples with lots of weird little

21
00:00:55,290 --> 00:00:58,049
frameworks and libraries it's this is a

22
00:00:58,049 --> 00:00:59,850
strategy it's not particular to any

23
00:00:59,850 --> 00:01:02,909
library and you can use this in whatever

24
00:01:02,909 --> 00:01:04,979
so if this example I will show you will

25
00:01:04,979 --> 00:01:06,720
be in.net you can totally use it in like

26
00:01:06,720 --> 00:01:08,280
a rails app or something like that and

27
00:01:08,280 --> 00:01:11,220
also if something confuses you and you

28
00:01:11,220 --> 00:01:12,240
just want to ask a question right away

29
00:01:12,240 --> 00:01:13,830
I'm actually totally open to just

30
00:01:13,830 --> 00:01:15,120
someone raising their hand and yelling

31
00:01:15,120 --> 00:01:18,090
it out because it's kind of fun alright

32
00:01:18,090 --> 00:01:21,390
so let me get to the very simple idea

33
00:01:21,390 --> 00:01:23,450
the whole principle behind this all and

34
00:01:23,450 --> 00:01:28,080
it's basically this you have a and B the

35
00:01:28,080 --> 00:01:30,510
developer or really anyone wants to get

36
00:01:30,510 --> 00:01:33,810
from A to B anyone know how you get from

37
00:01:33,810 --> 00:01:40,380
A to B straight-line that's it developer

38
00:01:40,380 --> 00:01:42,900
will always take the easy way the

39
00:01:42,900 --> 00:01:45,210
straight-line the issue and the entire

40
00:01:45,210 --> 00:01:47,100
crux of this presentation and this idea

41
00:01:47,100 --> 00:01:51,840
is this this is the secure way you have

42
00:01:51,840 --> 00:01:53,700
to do validation you have to do encoding

43
00:01:53,700 --> 00:01:55,080
you have to do with lots of logging you

44
00:01:55,080 --> 00:01:56,040
have to figure out what's going on

45
00:01:56,040 --> 00:01:57,780
behind the scenes right you have the

46
00:01:57,780 --> 00:01:59,670
secure way in the easy way and they are

47
00:01:59,670 --> 00:02:02,220
not the same and that is the entire

48
00:02:02,220 --> 00:02:04,530
principle and the whole goal is the

49
00:02:04,530 --> 00:02:06,750
following to make the secure way the

50
00:02:06,750 --> 00:02:09,419
easy way because the developer doesn't I

51
00:02:09,419 --> 00:02:10,830
mean they might care about the security

52
00:02:10,830 --> 00:02:12,450
but ultimately they will always just

53
00:02:12,450 --> 00:02:14,880
take the easy way to be able to ship

54
00:02:14,880 --> 00:02:19,080
faster so I want to nail this in really

55
00:02:19,080 --> 00:02:20,080
well

56
00:02:20,080 --> 00:02:26,470
this is bad this is good bad good we all

57
00:02:26,470 --> 00:02:31,960
got this all right so this is great

58
00:02:31,960 --> 00:02:34,240
right and this is like our ideal and I'm

59
00:02:34,240 --> 00:02:35,500
just kind of like here's the castle in

60
00:02:35,500 --> 00:02:37,930
the sky so the developers will do

61
00:02:37,930 --> 00:02:40,510
whatever is simplest right and if it's

62
00:02:40,510 --> 00:02:42,280
the simplest it's a lot easier to train

63
00:02:42,280 --> 00:02:44,710
and you won't get in anyone's way they

64
00:02:44,710 --> 00:02:46,270
won't have to make this tough decision

65
00:02:46,270 --> 00:02:50,470
like this guy so I also want to mention

66
00:02:50,470 --> 00:02:52,510
that I'm not really reinventing the

67
00:02:52,510 --> 00:02:54,280
wheel I'm sorry I'm not inventing the

68
00:02:54,280 --> 00:02:55,690
wheel here I'm just reusing something

69
00:02:55,690 --> 00:02:57,820
that's already been done and so I want

70
00:02:57,820 --> 00:02:59,590
to go through a handful of existing

71
00:02:59,590 --> 00:03:02,650
examples on what has already been done

72
00:03:02,650 --> 00:03:05,650
to do this exact same process so let's

73
00:03:05,650 --> 00:03:07,570
go into that just a little bit the first

74
00:03:07,570 --> 00:03:10,570
one is how to reduce XSS right so

75
00:03:10,570 --> 00:03:11,980
there's a lot of frameworks out there

76
00:03:11,980 --> 00:03:15,760
react to angular or whatever and by the

77
00:03:15,760 --> 00:03:17,170
way I will have a lot of code in this

78
00:03:17,170 --> 00:03:18,610
presentation they're just gonna be

79
00:03:18,610 --> 00:03:20,410
little snippets like this but if you

80
00:03:20,410 --> 00:03:21,940
want to take a minute to like take it in

81
00:03:21,940 --> 00:03:23,020
just let me know if I'm going a little

82
00:03:23,020 --> 00:03:28,030
fast but essentially react says okay

83
00:03:28,030 --> 00:03:30,280
instead of you know interpolating HTML

84
00:03:30,280 --> 00:03:32,350
or whatever user input inside the thing

85
00:03:32,350 --> 00:03:35,230
by default we will just encode whatever

86
00:03:35,230 --> 00:03:38,320
variables that you put into JSX

87
00:03:38,320 --> 00:03:42,130
but if you really absolutely need to and

88
00:03:42,130 --> 00:03:44,739
you can see on the second line have some

89
00:03:44,739 --> 00:03:46,810
dangerous HTML you know and then you get

90
00:03:46,810 --> 00:03:49,150
HTML in the page which is the essence of

91
00:03:49,150 --> 00:03:51,280
cross-site scripting is when one user

92
00:03:51,280 --> 00:03:53,290
can put HTML on the page that doesn't

93
00:03:53,290 --> 00:03:55,030
come from the website itself and it's

94
00:03:55,030 --> 00:03:56,610
able to take over another user's page

95
00:03:56,610 --> 00:04:00,640
then what you get is you get hey this is

96
00:04:00,640 --> 00:04:02,800
dangerous don't do this you scare them

97
00:04:02,800 --> 00:04:04,930
this is something Tonya talked about and

98
00:04:04,930 --> 00:04:07,000
I would quite liked you know that and I

99
00:04:07,000 --> 00:04:09,550
think it was Clint who did like date was

100
00:04:09,550 --> 00:04:12,550
it unsafe cryptography md5 hash or

101
00:04:12,550 --> 00:04:13,870
something like that which I absolutely

102
00:04:13,870 --> 00:04:15,970
loved but essentially the same concept

103
00:04:15,970 --> 00:04:18,339
is right here you developers will

104
00:04:18,339 --> 00:04:20,108
usually just not use this because like

105
00:04:20,108 --> 00:04:22,150
oh it looks dangerous right and it's not

106
00:04:22,150 --> 00:04:27,250
the default way so let's talk about

107
00:04:27,250 --> 00:04:29,830
string concatenation aka sequel

108
00:04:29,830 --> 00:04:33,090
injection so sequel injection

109
00:04:33,140 --> 00:04:35,720
basically it's just when you have a nice

110
00:04:35,720 --> 00:04:37,310
string that you're going to send into

111
00:04:37,310 --> 00:04:39,110
sequel to execute a sequel command and

112
00:04:39,110 --> 00:04:41,000
then you just so happen to have some

113
00:04:41,000 --> 00:04:43,130
user control parameter in it and then

114
00:04:43,130 --> 00:04:44,660
somebody you know they're they're real

115
00:04:44,660 --> 00:04:47,000
jerk and they just go ahead and put

116
00:04:47,000 --> 00:04:48,740
something horrible and they're like I

117
00:04:48,740 --> 00:04:51,620
don't know that and then dump the whole

118
00:04:51,620 --> 00:04:55,790
database not not the best thing in the

119
00:04:55,790 --> 00:04:58,520
world but as it turns out there's a

120
00:04:58,520 --> 00:05:00,470
thing called ORM S which is object

121
00:05:00,470 --> 00:05:02,600
relational mapper z-- and they usually

122
00:05:02,600 --> 00:05:04,400
just let you do most sequel commands

123
00:05:04,400 --> 00:05:06,590
without having you do dynamic sequel

124
00:05:06,590 --> 00:05:09,200
whatsoever and have you know basically

125
00:05:09,200 --> 00:05:11,090
handles all those situations so this is

126
00:05:11,090 --> 00:05:12,500
the exact same command on the second

127
00:05:12,500 --> 00:05:15,200
line which is just filter by you know

128
00:05:15,200 --> 00:05:16,670
the name whatever the user controlled

129
00:05:16,670 --> 00:05:18,860
variable is but I want to point out with

130
00:05:18,860 --> 00:05:21,110
this in both these cases the developers

131
00:05:21,110 --> 00:05:22,730
just wanted to query the database they

132
00:05:22,730 --> 00:05:23,990
didn't really want to shoot themselves

133
00:05:23,990 --> 00:05:25,940
in the foot they were just trying to do

134
00:05:25,940 --> 00:05:29,000
what their jobs so but we've already

135
00:05:29,000 --> 00:05:31,340
made it a lot safer just by introducing

136
00:05:31,340 --> 00:05:35,210
an ORM by having it go on this filter

137
00:05:35,210 --> 00:05:37,190
rather than dynamic sequel you just

138
00:05:37,190 --> 00:05:40,520
ruled out a lot of sequel injection all

139
00:05:40,520 --> 00:05:43,250
right let's talk about xxe in dotnet so

140
00:05:43,250 --> 00:05:46,270
by default in previous versions of.net

141
00:05:46,270 --> 00:05:48,830
they would allow you to get this bug

142
00:05:48,830 --> 00:05:50,900
called xxe which is essentially you

143
00:05:50,900 --> 00:05:53,660
define a variable in the DTD the

144
00:05:53,660 --> 00:05:56,240
document type definitions and that

145
00:05:56,240 --> 00:05:58,070
variable can access places on the

146
00:05:58,070 --> 00:06:00,110
filesystem do all sorts of nasty things

147
00:06:00,110 --> 00:06:03,440
explode the file to be massive a lot of

148
00:06:03,440 --> 00:06:06,110
nasty stuff right and then to turn it

149
00:06:06,110 --> 00:06:08,060
off you had to say prohibit this thing

150
00:06:08,060 --> 00:06:09,950
to true but by default it was just

151
00:06:09,950 --> 00:06:11,240
totally allowed because it was in the

152
00:06:11,240 --> 00:06:14,060
XML specification honestly the only

153
00:06:14,060 --> 00:06:15,860
people that ever use this were hackers

154
00:06:15,860 --> 00:06:18,650
so and I I mean I enjoyed it I find a

155
00:06:18,650 --> 00:06:20,810
lot of findings with this but nowadays

156
00:06:20,810 --> 00:06:23,930
since by default dotnet just says all

157
00:06:23,930 --> 00:06:25,610
right this is prohibited and you have to

158
00:06:25,610 --> 00:06:28,640
turn it back on then developers do it

159
00:06:28,640 --> 00:06:30,080
the safe way because it's on by default

160
00:06:30,080 --> 00:06:32,600
so you can just see this it reads from

161
00:06:32,600 --> 00:06:34,730
the filesystem right there and it'll

162
00:06:34,730 --> 00:06:38,390
evaluate it but I want to emphasize one

163
00:06:38,390 --> 00:06:40,400
more time the developers just wanted to

164
00:06:40,400 --> 00:06:42,200
parse XML they do not want to shoot

165
00:06:42,200 --> 00:06:45,820
themselves in the foot so

166
00:06:45,820 --> 00:06:47,620
how do we do this how do we make the

167
00:06:47,620 --> 00:06:48,880
easy way to the secure way so we've seen

168
00:06:48,880 --> 00:06:50,440
some examples that have been done before

169
00:06:50,440 --> 00:06:52,600
but obviously not all your problems have

170
00:06:52,600 --> 00:06:53,830
been solved otherwise we wouldn't be

171
00:06:53,830 --> 00:06:57,460
talking here right so I have a four step

172
00:06:57,460 --> 00:07:00,340
process that I just follow and I do this

173
00:07:00,340 --> 00:07:02,470
so basically I find the bad pattern

174
00:07:02,470 --> 00:07:05,920
right I make the I make sure that the

175
00:07:05,920 --> 00:07:07,420
bad pattern is just something I see a

176
00:07:07,420 --> 00:07:09,310
lot so if I see a lot of cross-site

177
00:07:09,310 --> 00:07:11,380
scripting in a site or I see a lot of

178
00:07:11,380 --> 00:07:13,540
rito-san decide for example for all

179
00:07:13,540 --> 00:07:15,190
sorts of reasons I'll just find that and

180
00:07:15,190 --> 00:07:17,290
then I'll make the safe pattern the

181
00:07:17,290 --> 00:07:19,180
default one so find a way of writing a

182
00:07:19,180 --> 00:07:20,200
wrapper class and I'll show you exactly

183
00:07:20,200 --> 00:07:22,510
how to do this and then I'll even show

184
00:07:22,510 --> 00:07:24,310
you how to train the developers and like

185
00:07:24,310 --> 00:07:26,890
the most efficient way and then a really

186
00:07:26,890 --> 00:07:28,660
quick way to build some tools to enforce

187
00:07:28,660 --> 00:07:29,800
these new rules because you don't want

188
00:07:29,800 --> 00:07:31,720
to just make a rule and then you can't

189
00:07:31,720 --> 00:07:32,950
do anything about it if someone breaks

190
00:07:32,950 --> 00:07:37,210
it so let's talk about an example read

191
00:07:37,210 --> 00:07:38,110
us

192
00:07:38,110 --> 00:07:40,510
this is regex denial service to explain

193
00:07:40,510 --> 00:07:42,940
what that is essentially if you have an

194
00:07:42,940 --> 00:07:45,340
inefficient regex or a user control

195
00:07:45,340 --> 00:07:47,740
budget regex that is inefficient you

196
00:07:47,740 --> 00:07:50,800
will basically open yourself up to

197
00:07:50,800 --> 00:07:52,780
saying okay this can be resolved in

198
00:07:52,780 --> 00:07:54,490
non-constant time it's basically having

199
00:07:54,490 --> 00:07:56,830
a for loop in a for loop so you have of

200
00:07:56,830 --> 00:07:57,490
n-squared

201
00:07:57,490 --> 00:07:59,320
for those who have taken computer

202
00:07:59,320 --> 00:08:01,870
science courses and the safe way you

203
00:08:01,870 --> 00:08:04,270
just wrap it in a timeout that's all it

204
00:08:04,270 --> 00:08:05,890
is so the developer has to remember

205
00:08:05,890 --> 00:08:07,750
every time they use regex

206
00:08:07,750 --> 00:08:10,510
to include that little time span from

207
00:08:10,510 --> 00:08:13,810
seconds right do they always remember

208
00:08:13,810 --> 00:08:15,130
does anyone think they will always

209
00:08:15,130 --> 00:08:19,000
remember you all right I'll talk to you

210
00:08:19,000 --> 00:08:21,090
later

211
00:08:21,450 --> 00:08:23,410
but they have to remember that and

212
00:08:23,410 --> 00:08:25,270
that's a that's not the best thing so

213
00:08:25,270 --> 00:08:27,250
here's some code to just make it safe by

214
00:08:27,250 --> 00:08:28,510
default by the way I kind of like

215
00:08:28,510 --> 00:08:30,400
sanitized it so be you know a lot

216
00:08:30,400 --> 00:08:32,860
shorter but essentially you don't really

217
00:08:32,860 --> 00:08:34,510
need to know everything that's going on

218
00:08:34,510 --> 00:08:37,570
here ultimately if I recommend you just

219
00:08:37,570 --> 00:08:39,099
have one of your app sack engineers or

220
00:08:39,099 --> 00:08:40,479
engineer write this if you're not the

221
00:08:40,479 --> 00:08:43,330
most technical person but ultimately the

222
00:08:43,330 --> 00:08:45,700
only thing is this default timeout is

223
00:08:45,700 --> 00:08:47,710
one second now you can make it two

224
00:08:47,710 --> 00:08:49,090
seconds it doesn't really matter it's

225
00:08:49,090 --> 00:08:50,770
just that there is a timeout and that's

226
00:08:50,770 --> 00:08:53,260
what makes it safe by default and then

227
00:08:53,260 --> 00:08:56,080
down below on the couple other lines I

228
00:08:56,080 --> 00:08:58,120
just had this my safe regex class

229
00:08:58,120 --> 00:08:59,020
inherit

230
00:08:59,020 --> 00:09:01,330
the rest of the base regex class and

231
00:09:01,330 --> 00:09:04,390
that's it any questions about this

232
00:09:04,390 --> 00:09:09,820
before I move on cool so here's the

233
00:09:09,820 --> 00:09:11,350
sample training now you can take a

234
00:09:11,350 --> 00:09:12,460
picture of this but I'm gonna give you a

235
00:09:12,460 --> 00:09:14,170
even better slide take a picture of what

236
00:09:14,170 --> 00:09:15,940
you'll actually have the template right

237
00:09:15,940 --> 00:09:18,220
and you just have basically two

238
00:09:18,220 --> 00:09:20,350
sentences explaining why this is bad

239
00:09:20,350 --> 00:09:21,670
what you should do instead

240
00:09:21,670 --> 00:09:23,530
and then the examples below and if you

241
00:09:23,530 --> 00:09:25,900
notice the examples below are very short

242
00:09:25,900 --> 00:09:27,910
very sweet it says what they shouldn't

243
00:09:27,910 --> 00:09:29,500
do and what they should do and they look

244
00:09:29,500 --> 00:09:30,790
about the same length so it doesn't look

245
00:09:30,790 --> 00:09:33,370
that much harder for the developer so

246
00:09:33,370 --> 00:09:35,260
here's actually the format take a

247
00:09:35,260 --> 00:09:36,670
picture of the slide because it's a good

248
00:09:36,670 --> 00:09:39,910
one right if you use the bad way the bad

249
00:09:39,910 --> 00:09:42,010
thing will happen instead use the good

250
00:09:42,010 --> 00:09:44,530
way since it stops the bad thing do not

251
00:09:44,530 --> 00:09:47,650
do this do this instead you basically

252
00:09:47,650 --> 00:09:49,240
have the entire template for most

253
00:09:49,240 --> 00:09:51,550
developer training right if you have a

254
00:09:51,550 --> 00:09:53,230
better idea go ahead and do it

255
00:09:53,230 --> 00:09:55,030
I found this extremely effective and

256
00:09:55,030 --> 00:10:00,550
just hey wanted done and I'll break this

257
00:10:00,550 --> 00:10:02,080
down a little bit so I really recommend

258
00:10:02,080 --> 00:10:04,780
you don't include Securi lingo so well I

259
00:10:04,780 --> 00:10:06,460
can just go here yeah there's x''k see

260
00:10:06,460 --> 00:10:07,630
everywhere right and people here will

261
00:10:07,630 --> 00:10:10,360
get me right but developers that would

262
00:10:10,360 --> 00:10:11,680
take a long time to explain and they

263
00:10:11,680 --> 00:10:13,240
just say oh you could write to the file

264
00:10:13,240 --> 00:10:15,550
system that's bad right and we can and

265
00:10:15,550 --> 00:10:17,710
you can talk about that and that way

266
00:10:17,710 --> 00:10:20,620
they get it right away also show the

267
00:10:20,620 --> 00:10:22,330
example how they intend to do it right

268
00:10:22,330 --> 00:10:24,520
before you show them the right way now

269
00:10:24,520 --> 00:10:26,710
there you may disagree with this but I

270
00:10:26,710 --> 00:10:28,450
quite like this and I've seen it be very

271
00:10:28,450 --> 00:10:33,190
effective and if you really want you can

272
00:10:33,190 --> 00:10:35,890
include a details about a loss so how

273
00:10:35,890 --> 00:10:37,660
often or when should you train the

274
00:10:37,660 --> 00:10:40,090
developers what I found a lot of success

275
00:10:40,090 --> 00:10:42,400
for is when the developer gets access to

276
00:10:42,400 --> 00:10:44,710
the project or repository because at

277
00:10:44,710 --> 00:10:47,050
that point they're usually very excited

278
00:10:47,050 --> 00:10:48,400
they want to put in their first commit

279
00:10:48,400 --> 00:10:50,980
and you say okay here are the rules

280
00:10:50,980 --> 00:10:54,330
welcome right and then on any sort of

281
00:10:54,330 --> 00:10:56,860
you know reasonable cadence so once a

282
00:10:56,860 --> 00:10:58,180
year or once every six months whatever

283
00:10:58,180 --> 00:10:59,860
you find is appropriate for where you

284
00:10:59,860 --> 00:11:00,880
work

285
00:11:00,880 --> 00:11:02,980
retrain for their specific department so

286
00:11:02,980 --> 00:11:04,840
if they're working on a Ruby project

287
00:11:04,840 --> 00:11:06,210
don't give them the dotnet training

288
00:11:06,210 --> 00:11:08,440
footprint plain simple right it's just

289
00:11:08,440 --> 00:11:12,670
not relevant to them and this way if you

290
00:11:12,670 --> 00:11:14,080
keep remembering to do this you're not

291
00:11:14,080 --> 00:11:18,880
this security guard because well doesn't

292
00:11:18,880 --> 00:11:21,370
look too effective and in fact we can do

293
00:11:21,370 --> 00:11:24,010
this in an automatic way so here's code

294
00:11:24,010 --> 00:11:26,170
analysis for regex denial of service and

295
00:11:26,170 --> 00:11:28,960
I'm a huge fan of a thing called deaf

296
00:11:28,960 --> 00:11:31,750
skin it's made by Microsoft it's free

297
00:11:31,750 --> 00:11:34,120
basically it's grep and with some JSON

298
00:11:34,120 --> 00:11:36,430
configuration files and I can break it

299
00:11:36,430 --> 00:11:38,710
down how it all works but ultimately you

300
00:11:38,710 --> 00:11:40,420
just look for a pattern like that now

301
00:11:40,420 --> 00:11:42,670
that's about 80% and that's all you need

302
00:11:42,670 --> 00:11:44,890
and if you really want to go more in

303
00:11:44,890 --> 00:11:47,230
depth in a more complex way you can just

304
00:11:47,230 --> 00:11:50,110
use something like Rosslyn or any other

305
00:11:50,110 --> 00:11:52,570
static analysis tool and this little

306
00:11:52,570 --> 00:11:54,010
code snippet right here just gets you

307
00:11:54,010 --> 00:11:59,620
the type for the whatever type that the

308
00:11:59,620 --> 00:12:00,940
class that you're looking at so you can

309
00:12:00,940 --> 00:12:04,720
ban classes alright this is a JSON file

310
00:12:04,720 --> 00:12:06,580
it looks painful to read I'm gonna break

311
00:12:06,580 --> 00:12:09,070
it down for you but this is the regex

312
00:12:09,070 --> 00:12:10,870
class rule very similar to what I use

313
00:12:10,870 --> 00:12:15,190
for dems def skin basically you start

314
00:12:15,190 --> 00:12:18,220
with a very simple rule it's just new

315
00:12:18,220 --> 00:12:19,990
regex and then I had to do a breakout

316
00:12:19,990 --> 00:12:23,310
for the parentheses very very simple

317
00:12:23,310 --> 00:12:25,540
it's very important that you have a

318
00:12:25,540 --> 00:12:27,520
clear description right and then maybe

319
00:12:27,520 --> 00:12:29,320
even link to some documentation if a

320
00:12:29,320 --> 00:12:31,060
developer ever sees this you might look

321
00:12:31,060 --> 00:12:32,740
through these first but if you add it to

322
00:12:32,740 --> 00:12:35,290
maybe your CI CD pipeline you want to

323
00:12:35,290 --> 00:12:36,700
make sure that it's developer friendly

324
00:12:36,700 --> 00:12:38,440
they know what to do they know what to

325
00:12:38,440 --> 00:12:40,420
use instead right so right there it says

326
00:12:40,420 --> 00:12:44,020
please use safe my safe regex class to

327
00:12:44,020 --> 00:12:46,780
generate this rather than the standard

328
00:12:46,780 --> 00:12:49,780
regex library and then by optional my

329
00:12:49,780 --> 00:12:51,280
optional thing this is one of the things

330
00:12:51,280 --> 00:12:52,630
I like about Def Jam is you'd have

331
00:12:52,630 --> 00:12:54,430
exclusions and they're really simple and

332
00:12:54,430 --> 00:12:58,930
it's very powerful all right well you

333
00:12:58,930 --> 00:13:01,240
were taking a picture I saw it you good

334
00:13:01,240 --> 00:13:05,340
okay I don't want to interrupt anybody

335
00:13:05,340 --> 00:13:07,510
so when you when should you do this

336
00:13:07,510 --> 00:13:10,810
right so while the developer is coding

337
00:13:10,810 --> 00:13:13,090
in the IDE IDE is great I work at a

338
00:13:13,090 --> 00:13:14,380
company where people use lots of

339
00:13:14,380 --> 00:13:16,090
different development tools and work on

340
00:13:16,090 --> 00:13:18,010
lots of different projects so it's a bit

341
00:13:18,010 --> 00:13:21,100
difficult to do and I couldn't really

342
00:13:21,100 --> 00:13:24,130
get adoption so instead I found out the

343
00:13:24,130 --> 00:13:25,810
developers are very open to feedback

344
00:13:25,810 --> 00:13:28,029
during pull requests so basically we

345
00:13:28,029 --> 00:13:30,220
include this as part of the CI CD

346
00:13:30,220 --> 00:13:31,900
pipeline right at that point when

347
00:13:31,900 --> 00:13:33,940
developers are most open to hearing for

348
00:13:33,940 --> 00:13:37,180
suggestions and also I recommend doing

349
00:13:37,180 --> 00:13:39,279
on your own cadence it's like if you say

350
00:13:39,279 --> 00:13:40,960
once a month months once a week whatever

351
00:13:40,960 --> 00:13:43,089
you choose for the entire code base that

352
00:13:43,089 --> 00:13:44,980
way you can catch anything that previous

353
00:13:44,980 --> 00:13:49,000
stuff didn't find and this place of

354
00:13:49,000 --> 00:13:51,970
course is target is the security team so

355
00:13:51,970 --> 00:13:55,210
we have made it very easy to stop regex

356
00:13:55,210 --> 00:13:57,790
now service in your entire code base all

357
00:13:57,790 --> 00:14:00,070
we did was find the bad pattern make it

358
00:14:00,070 --> 00:14:01,600
the safe pattern the default one and

359
00:14:01,600 --> 00:14:05,160
then build tools to enforce these rules

360
00:14:05,160 --> 00:14:10,540
easy let's talk about xxe so here's some

361
00:14:10,540 --> 00:14:12,850
code basically we have the sax parser

362
00:14:12,850 --> 00:14:14,529
now I'm not picking on them for any

363
00:14:14,529 --> 00:14:16,000
particular reason other than they just

364
00:14:16,000 --> 00:14:19,510
showed up but in their using Java and

365
00:14:19,510 --> 00:14:21,940
you get this same xxe problem so what

366
00:14:21,940 --> 00:14:25,750
you can do is simply inherit make your

367
00:14:25,750 --> 00:14:27,910
own safe you know sax parser and I

368
00:14:27,910 --> 00:14:29,710
recommend doing it the exact same way as

369
00:14:29,710 --> 00:14:32,830
they do so they use a factory method so

370
00:14:32,830 --> 00:14:34,150
I just say all right we're gonna use the

371
00:14:34,150 --> 00:14:36,730
factory method as well and then I just

372
00:14:36,730 --> 00:14:38,890
say do this and you make it safe by

373
00:14:38,890 --> 00:14:40,180
default and this way the developer

374
00:14:40,180 --> 00:14:42,430
doesn't have to remember that because I

375
00:14:42,430 --> 00:14:45,220
won't remember that crazy set feature

376
00:14:45,220 --> 00:14:49,660
URL thing and then you have the training

377
00:14:49,660 --> 00:14:51,910
this falls the same format as the slide

378
00:14:51,910 --> 00:14:53,440
I talked about that had that format

379
00:14:53,440 --> 00:14:55,870
essentially you just want to have

380
00:14:55,870 --> 00:14:58,270
something like okay don't use sax parser

381
00:14:58,270 --> 00:15:01,150
the bad thing will happen and then use

382
00:15:01,150 --> 00:15:03,910
my safe XML parser Factory and then it

383
00:15:03,910 --> 00:15:05,350
blocks the attacker from doing these

384
00:15:05,350 --> 00:15:08,020
kind of attacks and then you have a very

385
00:15:08,020 --> 00:15:10,030
clear example what's safe and what's

386
00:15:10,030 --> 00:15:15,339
unsafe and then voila here is your

387
00:15:15,339 --> 00:15:18,130
static analysis simple have the pattern

388
00:15:18,130 --> 00:15:20,950
once again it's meant to be about 80%

389
00:15:20,950 --> 00:15:23,709
good and but then again it's just a

390
00:15:23,709 --> 00:15:25,630
quick line of regex right there so you

391
00:15:25,630 --> 00:15:28,450
get it done very fast and then once

392
00:15:28,450 --> 00:15:30,250
again I want to emphasize having a good

393
00:15:30,250 --> 00:15:32,260
description good recommendation is vital

394
00:15:32,260 --> 00:15:35,410
for a good communication this one I went

395
00:15:35,410 --> 00:15:36,550
through very fast so are there any

396
00:15:36,550 --> 00:15:39,290
questions about this one

397
00:15:39,290 --> 00:15:42,410
cool you all get it very nice

398
00:15:42,410 --> 00:15:45,779
all right so we made it easy to stop xxe

399
00:15:45,779 --> 00:15:49,589
we followed these four steps and we just

400
00:15:49,589 --> 00:15:50,910
solved that across your entire code base

401
00:15:50,910 --> 00:15:53,399
congratulations now you just have to do

402
00:15:53,399 --> 00:15:56,730
the work all right let's talk about it

403
00:15:56,730 --> 00:15:58,560
another bug I like to call this one a

404
00:15:58,560 --> 00:16:03,258
fun one how'd you get an email like this

405
00:16:03,649 --> 00:16:12,000
anyone want to tell me what's fishy yep

406
00:16:12,000 --> 00:16:15,060
you're gonna get rerouted some big bank

407
00:16:15,060 --> 00:16:17,850
comm redirect some evil fishing site

408
00:16:17,850 --> 00:16:20,939
comm and you know you got to stop mr.

409
00:16:20,939 --> 00:16:22,500
robot from hacking you by giving him

410
00:16:22,500 --> 00:16:27,870
your username password obviously so this

411
00:16:27,870 --> 00:16:30,180
is an open redirect essentially you have

412
00:16:30,180 --> 00:16:32,129
a site that looks like it's legitimate

413
00:16:32,129 --> 00:16:33,689
but then it'll redirect you to somewhere

414
00:16:33,689 --> 00:16:37,920
evil and then they fish people so you

415
00:16:37,920 --> 00:16:40,319
trick users and even then actually can

416
00:16:40,319 --> 00:16:42,209
get cross-site scripting if you if the

417
00:16:42,209 --> 00:16:43,769
payload is this just this little

418
00:16:43,769 --> 00:16:45,480
JavaScript column whatever script you

419
00:16:45,480 --> 00:16:49,290
want and we often recommend people to

420
00:16:49,290 --> 00:16:50,639
use whitelist and then we often get

421
00:16:50,639 --> 00:16:53,750
stuff like this so once again audience

422
00:16:53,750 --> 00:16:56,720
participation let's play spot the bug

423
00:16:56,720 --> 00:16:59,129
anyone want to tell me what's wrong with

424
00:16:59,129 --> 00:17:08,449
this you're smiling so you know

425
00:17:17,930 --> 00:17:30,710
sorry I can't hear ya that's going you

426
00:17:30,710 --> 00:17:32,300
hope you're alright but that's that's

427
00:17:32,300 --> 00:17:35,540
that's a fun one the dot he's so he said

428
00:17:35,540 --> 00:17:37,910
that the dot is a wildcard character any

429
00:17:37,910 --> 00:17:40,610
character you want so it could be you

430
00:17:40,610 --> 00:17:45,320
know my safe website be calm and then

431
00:17:45,320 --> 00:17:48,890
whatever else you want in your URL what

432
00:17:48,890 --> 00:17:49,640
else is bad

433
00:17:49,640 --> 00:17:51,020
anyone want I also want to tell me

434
00:17:51,020 --> 00:18:00,140
what's bad yes clearly not well done all

435
00:18:00,140 --> 00:18:05,180
right yeah that's the bad part and then

436
00:18:05,180 --> 00:18:07,700
here are some things that'll get totally

437
00:18:07,700 --> 00:18:10,460
past this whitelist and by the way this

438
00:18:10,460 --> 00:18:12,230
comes from in a real example I've looked

439
00:18:12,230 --> 00:18:13,850
at before and I asked hey please fix

440
00:18:13,850 --> 00:18:15,410
this and then I get white lists like

441
00:18:15,410 --> 00:18:16,910
this and I'm like yeah I can break

442
00:18:16,910 --> 00:18:19,490
around that really fast they don't they

443
00:18:19,490 --> 00:18:21,320
don't check the protocol right so you

444
00:18:21,320 --> 00:18:23,390
can just okay cool

445
00:18:23,390 --> 00:18:26,060
put JavaScript alert they don't

446
00:18:26,060 --> 00:18:27,620
understand that the dots are wild cards

447
00:18:27,620 --> 00:18:29,510
and they don't check for like if it's a

448
00:18:29,510 --> 00:18:31,340
domain or subdomain so the string is

449
00:18:31,340 --> 00:18:36,890
terminated or not yeah oh I'm I'm sorry

450
00:18:36,890 --> 00:18:40,010
that's hard to read I should fix that

451
00:18:40,010 --> 00:18:44,120
but my safe web site XCOM evil website

452
00:18:44,120 --> 00:18:46,610
calm so bad sub domain but it still

453
00:18:46,610 --> 00:18:48,220
validates the regex

454
00:18:48,220 --> 00:18:51,260
then evil site calm and then in the

455
00:18:51,260 --> 00:18:53,990
query string so question mark foo equals

456
00:18:53,990 --> 00:18:56,480
my safe website com sorry for making

457
00:18:56,480 --> 00:18:58,010
this is hard to read and then the last

458
00:18:58,010 --> 00:18:59,510
one I give as an example it's JavaScript

459
00:18:59,510 --> 00:19:02,240
: alert and then my safe website calm

460
00:19:02,240 --> 00:19:05,030
because it would just totally validate

461
00:19:05,030 --> 00:19:08,600
the regex right there sorry any other

462
00:19:08,600 --> 00:19:12,400
questions about this slide but this idea

463
00:19:12,400 --> 00:19:15,710
cool so if you rely on the developer to

464
00:19:15,710 --> 00:19:18,200
always build this they might often make

465
00:19:18,200 --> 00:19:19,370
mistakes because they daren't thinking

466
00:19:19,370 --> 00:19:21,470
about crazy breakouts you know if you're

467
00:19:21,470 --> 00:19:22,760
the app second engineer you're the

468
00:19:22,760 --> 00:19:24,590
person who breaks things so the person

469
00:19:24,590 --> 00:19:28,059
they're the people that make things so

470
00:19:28,059 --> 00:19:29,529
often times now I'm going to show you

471
00:19:29,529 --> 00:19:30,639
the code for this one because it

472
00:19:30,639 --> 00:19:31,840
actually gets kind of annoying ly

473
00:19:31,840 --> 00:19:34,570
complex so I'll just explain it you make

474
00:19:34,570 --> 00:19:36,509
a safe redirect function or class

475
00:19:36,509 --> 00:19:39,549
depending what you decide and you just

476
00:19:39,549 --> 00:19:41,320
have like an internal redirect method

477
00:19:41,320 --> 00:19:44,289
that blocks all non HTTP protocols why

478
00:19:44,289 --> 00:19:46,559
do you need a redirect to an FTP site

479
00:19:46,559 --> 00:19:49,599
well you might but if you really need to

480
00:19:49,599 --> 00:19:51,940
you can add that's special case in there

481
00:19:51,940 --> 00:19:53,859
and then only Brett allows redirects to

482
00:19:53,859 --> 00:19:56,799
your site you can kind of assume these

483
00:19:56,799 --> 00:19:58,299
are safe and this is great because you

484
00:19:58,299 --> 00:20:00,099
rule out a huge amount of them because

485
00:20:00,099 --> 00:20:02,349
okay you're redirecting to a site you

486
00:20:02,349 --> 00:20:04,629
home and it's definitely not gonna have

487
00:20:04,629 --> 00:20:08,019
JavaScript in it great but then you can

488
00:20:08,019 --> 00:20:10,119
also add this external redirect for the

489
00:20:10,119 --> 00:20:11,589
times you do need to redirect to

490
00:20:11,589 --> 00:20:13,389
external sites and you can set this up

491
00:20:13,389 --> 00:20:15,429
to require a whitelist as part of the

492
00:20:15,429 --> 00:20:19,450
parameters and if the what is it if the

493
00:20:19,450 --> 00:20:21,729
developer puts in like an empty list you

494
00:20:21,729 --> 00:20:23,139
can pick that up with stack analysis

495
00:20:23,139 --> 00:20:25,719
fairly quickly so let's talk about some

496
00:20:25,719 --> 00:20:27,759
really basic rules that we can write and

497
00:20:27,759 --> 00:20:31,359
essentially grep for with dev skin like

498
00:20:31,359 --> 00:20:32,859
I said I'm I'm a fan of this tool but

499
00:20:32,859 --> 00:20:34,479
you can use whatever tool that suits you

500
00:20:34,479 --> 00:20:39,369
right you have this pattern so fairly

501
00:20:39,369 --> 00:20:41,499
simple find this redirect it's kind of

502
00:20:41,499 --> 00:20:42,789
one of those things you write and never

503
00:20:42,789 --> 00:20:44,499
read because you can see all those

504
00:20:44,499 --> 00:20:47,739
lovely question marks and you know back

505
00:20:47,739 --> 00:20:50,440
slashes and stuff and then you have sort

506
00:20:50,440 --> 00:20:52,299
of conditions that can you know say it's

507
00:20:52,299 --> 00:20:53,769
totally safe if you're using safe

508
00:20:53,769 --> 00:20:56,799
redirect and then I want to emphasize

509
00:20:56,799 --> 00:20:58,629
only aim for about 80% you're never

510
00:20:58,629 --> 00:21:00,279
going to get these perfect but if you

511
00:21:00,279 --> 00:21:02,379
aim to make it good you can get there

512
00:21:02,379 --> 00:21:05,529
pretty well and then you also have other

513
00:21:05,529 --> 00:21:07,570
rules and you can add things like oh if

514
00:21:07,570 --> 00:21:12,099
it's extraordinary for us to go take a

515
00:21:12,099 --> 00:21:13,629
look and make sure that the whitelist is

516
00:21:13,629 --> 00:21:15,609
good right so you have high priority

517
00:21:15,609 --> 00:21:17,259
rules and then low priority rules

518
00:21:17,259 --> 00:21:18,159
because things that you know are

519
00:21:18,159 --> 00:21:20,349
definitely hey you're not following the

520
00:21:20,349 --> 00:21:21,820
rules here or the ones there like you're

521
00:21:21,820 --> 00:21:22,869
probably doing the right thing let's

522
00:21:22,869 --> 00:21:25,659
just double check okay let's talk about

523
00:21:25,659 --> 00:21:28,359
another bug the dangers of server side

524
00:21:28,359 --> 00:21:32,919
request forgery basically if you can

525
00:21:32,919 --> 00:21:35,229
call one server and get it to talk to

526
00:21:35,229 --> 00:21:39,009
any other server so basically the server

527
00:21:39,009 --> 00:21:40,509
that you're talking to and you're able

528
00:21:40,509 --> 00:21:41,740
to get through the

529
00:21:41,740 --> 00:21:45,130
in this case is able to call other

530
00:21:45,130 --> 00:21:46,929
servers inside the data center and that

531
00:21:46,929 --> 00:21:49,809
variable is user controlled then you can

532
00:21:49,809 --> 00:21:51,190
just bypass the firewall because you

533
00:21:51,190 --> 00:21:52,900
could say well this this server is on

534
00:21:52,900 --> 00:21:55,570
the internal network fallout fairly

535
00:21:55,570 --> 00:21:57,730
useful you can get past a lot of IP

536
00:21:57,730 --> 00:22:00,190
whitelisting it's a great and powerful

537
00:22:00,190 --> 00:22:05,610
bug and you know it's kind of scary so

538
00:22:05,610 --> 00:22:08,050
what could you do with server side

539
00:22:08,050 --> 00:22:09,250
request forgery

540
00:22:09,250 --> 00:22:12,040
once again audience participation for

541
00:22:12,040 --> 00:22:13,929
those of you who know tell me what you

542
00:22:13,929 --> 00:22:15,790
think you can do with this just shout it

543
00:22:15,790 --> 00:22:21,130
out yep

544
00:22:21,130 --> 00:22:28,929
what's another one oh he sorry I should

545
00:22:28,929 --> 00:22:29,890
say that cuz he doesn't have a

546
00:22:29,890 --> 00:22:32,590
microphone call internal API internally

547
00:22:32,590 --> 00:22:35,410
sorry internal IPs and then use that to

548
00:22:35,410 --> 00:22:38,160
take down your system

549
00:22:38,640 --> 00:22:45,920
you got one sorry

550
00:22:45,920 --> 00:22:49,170
yeah metadata endpoints listen to those

551
00:22:49,170 --> 00:22:50,640
and get some private information

552
00:22:50,640 --> 00:22:54,390
exfiltrate that I like that one so I

553
00:22:54,390 --> 00:22:55,620
don't have that as an example for the

554
00:22:55,620 --> 00:23:00,030
answer so alright I'm just gonna give it

555
00:23:00,030 --> 00:23:02,040
to you so you get past them firewall and

556
00:23:02,040 --> 00:23:03,170
you call internal IPs

557
00:23:03,170 --> 00:23:06,030
you can call external servers with very

558
00:23:06,030 --> 00:23:07,740
long responses and this is a good way to

559
00:23:07,740 --> 00:23:09,780
have a denial service attack gets the

560
00:23:09,780 --> 00:23:11,580
server will you know take a very long

561
00:23:11,580 --> 00:23:14,790
time to parse it you do file read as it

562
00:23:14,790 --> 00:23:19,170
turns out that's fun and you can do a

563
00:23:19,170 --> 00:23:21,810
file right and what happens when you

564
00:23:21,810 --> 00:23:24,210
write the overwrite the default HTML in

565
00:23:24,210 --> 00:23:26,640
an iis server this is kind of obscure

566
00:23:26,640 --> 00:23:33,030
knowledge anyone know basically take the

567
00:23:33,030 --> 00:23:35,580
site down and you do that with one

568
00:23:35,580 --> 00:23:39,090
request it's quite fun got in trouble

569
00:23:39,090 --> 00:23:44,300
once now I can talk about that ok so

570
00:23:44,300 --> 00:23:47,490
sometimes you actually do have to make

571
00:23:47,490 --> 00:23:50,490
web calls right this is a feature and I

572
00:23:50,490 --> 00:23:52,200
have this horrifying acronym right there

573
00:23:52,200 --> 00:23:56,610
SSR FAS so it's horrible but it's

574
00:23:56,610 --> 00:23:58,140
something that a lot of applications do

575
00:23:58,140 --> 00:23:59,940
have to do like they have a web hook but

576
00:23:59,940 --> 00:24:01,770
you can make it a lot safer and just say

577
00:24:01,770 --> 00:24:05,160
hey don't use the standard HB request

578
00:24:05,160 --> 00:24:07,500
library use our safe wrapper class that

579
00:24:07,500 --> 00:24:09,630
blocks internal IPs have a built-in

580
00:24:09,630 --> 00:24:11,970
timeout blocks calls to the file system

581
00:24:11,970 --> 00:24:13,950
or like can limit certain things so it's

582
00:24:13,950 --> 00:24:15,840
like if it's doing an internal IP call

583
00:24:15,840 --> 00:24:17,850
and you're normally blocking that that's

584
00:24:17,850 --> 00:24:19,350
a great thing to law because that can

585
00:24:19,350 --> 00:24:21,270
usually pick up a lot of hackers because

586
00:24:21,270 --> 00:24:22,940
who else is doing that

587
00:24:22,940 --> 00:24:26,160
and you have the state version make sure

588
00:24:26,160 --> 00:24:29,610
inherits all the base abilities of your

589
00:24:29,610 --> 00:24:33,180
standard web client library ok we're

590
00:24:33,180 --> 00:24:36,000
gonna go over all these steps one more

591
00:24:36,000 --> 00:24:37,920
time because I want to hammer it in and

592
00:24:37,920 --> 00:24:40,710
hammer how you make the secure way and

593
00:24:40,710 --> 00:24:43,800
the easy way the same thing so you look

594
00:24:43,800 --> 00:24:45,750
for the bad pattern and what I like to

595
00:24:45,750 --> 00:24:47,880
do is I look for a common sort of sync

596
00:24:47,880 --> 00:24:49,170
if you think about it so everything

597
00:24:49,170 --> 00:24:52,200
boils down to one thing so if you're

598
00:24:52,200 --> 00:24:53,610
looking for sequel injection everything

599
00:24:53,610 --> 00:24:55,710
really boils down to dynamic sequel now

600
00:24:55,710 --> 00:24:57,450
there are other ways but everything

601
00:24:57,450 --> 00:24:58,670
really boils down to one

602
00:24:58,670 --> 00:25:00,110
thing in particular and if I see that

603
00:25:00,110 --> 00:25:02,750
I'm like oh I can abstract that pattern

604
00:25:02,750 --> 00:25:04,040
and make it safer

605
00:25:04,040 --> 00:25:06,650
so three examples that we went through

606
00:25:06,650 --> 00:25:10,040
in this case you know to do a regex and

607
00:25:10,040 --> 00:25:11,360
none'll service it has to reach a

608
00:25:11,360 --> 00:25:15,170
regular expression xec requires that you

609
00:25:15,170 --> 00:25:17,570
parse xml you can't do xxe with json I

610
00:25:17,570 --> 00:25:21,440
hope you can't and open redirects

611
00:25:21,440 --> 00:25:24,170
require some place redirecting that's

612
00:25:24,170 --> 00:25:26,090
how you that's how you find this right

613
00:25:26,090 --> 00:25:28,010
you find these sort of problems right

614
00:25:28,010 --> 00:25:34,070
there and then you make the safe pattern

615
00:25:34,070 --> 00:25:35,660
the default one so we did this one for

616
00:25:35,660 --> 00:25:37,970
reg external service but you have your

617
00:25:37,970 --> 00:25:40,610
like safe reg X or my safe reg X in this

618
00:25:40,610 --> 00:25:43,310
case and it has a default timeout you

619
00:25:43,310 --> 00:25:44,660
know you have a coder do this once right

620
00:25:44,660 --> 00:25:46,340
you might have to maintain this but it's

621
00:25:46,340 --> 00:25:51,290
worth maintaining and then finally you

622
00:25:51,290 --> 00:25:52,610
should train the developers use safe

623
00:25:52,610 --> 00:25:53,900
pattern if you haven't taken a picture

624
00:25:53,900 --> 00:25:56,000
of this it's super valuable and it's

625
00:25:56,000 --> 00:25:57,950
like my go-to because I don't like to

626
00:25:57,950 --> 00:26:00,710
write a lot of things but I do like

627
00:26:00,710 --> 00:26:02,240
having a template and just have ad lips

628
00:26:02,240 --> 00:26:05,060
and voila done right so this I this is

629
00:26:05,060 --> 00:26:06,020
my favorite thing

630
00:26:06,020 --> 00:26:07,700
and then always include an example

631
00:26:07,700 --> 00:26:10,720
because otherwise they won't get it and

632
00:26:10,720 --> 00:26:13,130
build tools to enforce the rules you

633
00:26:13,130 --> 00:26:14,240
don't have to use the same tools that I

634
00:26:14,240 --> 00:26:15,680
recommended there are a lot of good

635
00:26:15,680 --> 00:26:18,320
stuff out there use whatever that you

636
00:26:18,320 --> 00:26:19,910
like and it's easy for you to integrate

637
00:26:19,910 --> 00:26:21,710
with your system I'm just a fan because

638
00:26:21,710 --> 00:26:24,050
I know how to write regex and most

639
00:26:24,050 --> 00:26:25,880
people know how to edit the regex and

640
00:26:25,880 --> 00:26:28,220
it's fairly easy and I just have a super

641
00:26:28,220 --> 00:26:28,670
grab

642
00:26:28,670 --> 00:26:30,740
right and then make sure that it's only

643
00:26:30,740 --> 00:26:32,390
about 80% effective because otherwise

644
00:26:32,390 --> 00:26:33,800
you'll be spending hours and hours

645
00:26:33,800 --> 00:26:35,090
trying to fix it

646
00:26:35,090 --> 00:26:38,870
so finally go back to the main things

647
00:26:38,870 --> 00:26:40,910
find the bad pattern make a safe pattern

648
00:26:40,910 --> 00:26:43,490
build train the developers to use the

649
00:26:43,490 --> 00:26:45,560
safe pattern and build tools to enforce

650
00:26:45,560 --> 00:26:47,060
these rules so that way you don't always

651
00:26:47,060 --> 00:26:48,980
have to keep watching and you ultimately

652
00:26:48,980 --> 00:26:52,940
make this secure way the easy way all

653
00:26:52,940 --> 00:26:57,430
right thank you all any questions

654
00:26:57,670 --> 00:27:05,169
[Applause]

655
00:27:06,030 --> 00:27:08,590
cool I assume you all learned everything

656
00:27:08,590 --> 00:27:12,480
oh sorry

657
00:27:22,650 --> 00:27:25,090
he thinks it's great by the way yeah I

658
00:27:25,090 --> 00:27:28,390
think I think it's great in are there

659
00:27:28,390 --> 00:27:30,280
any bug classes you feel like this is

660
00:27:30,280 --> 00:27:33,160
not a good approach for I have not had

661
00:27:33,160 --> 00:27:37,270
the best well no there here's an example

662
00:27:37,270 --> 00:27:38,980
of where I've seen it work really well

663
00:27:38,980 --> 00:27:40,750
and the same bug class and then really

664
00:27:40,750 --> 00:27:42,430
badly on a different project so

665
00:27:42,430 --> 00:27:46,240
authorization issues so in one project

666
00:27:46,240 --> 00:27:48,040
basically all authorization went through

667
00:27:48,040 --> 00:27:49,720
one class so I just looked for every

668
00:27:49,720 --> 00:27:52,300
controller that didn't use that class

669
00:27:52,300 --> 00:27:53,470
and it was like well they did this for

670
00:27:53,470 --> 00:27:55,960
me like this is easy but then project

671
00:27:55,960 --> 00:27:57,970
where authorization was like you know

672
00:27:57,970 --> 00:28:01,180
weird layers and layers of calls like I

673
00:28:01,180 --> 00:28:02,560
just couldn't use this like it I

674
00:28:02,560 --> 00:28:04,660
couldn't find a common sink that's the

675
00:28:04,660 --> 00:28:07,930
main thing that like makes this useful

676
00:28:07,930 --> 00:28:09,850
or not is if you can find a common sink

677
00:28:09,850 --> 00:28:12,490
or a common point where the bug happens

678
00:28:12,490 --> 00:28:14,140
then you could probably use this but if

679
00:28:14,140 --> 00:28:17,980
you can't it's just not applicable cool

680
00:28:17,980 --> 00:28:21,420
does that answer it very well

681
00:28:27,730 --> 00:28:30,770
what coping so he asked what coping

682
00:28:30,770 --> 00:28:33,620
techniques to do that I have for working

683
00:28:33,620 --> 00:28:35,570
with organizations with thousands of

684
00:28:35,570 --> 00:28:37,970
code bases well I kind of work at one as

685
00:28:37,970 --> 00:28:41,630
you guys know we have way we have a lot

686
00:28:41,630 --> 00:28:43,760
of code bases and a lot of acquisitions

687
00:28:43,760 --> 00:28:47,450
the the main thing is I so I can't

688
00:28:47,450 --> 00:28:49,100
always hook into their CI CD pipelines

689
00:28:49,100 --> 00:28:52,340
and oftentimes it's gonna be in a

690
00:28:52,340 --> 00:28:53,420
completely different language I've never

691
00:28:53,420 --> 00:28:58,429
seen before but which is annoying but if

692
00:28:58,429 --> 00:29:00,170
I have seen it before I usually just

693
00:29:00,170 --> 00:29:02,240
have my my rules and I just run them

694
00:29:02,240 --> 00:29:03,530
again because that's what you can do

695
00:29:03,530 --> 00:29:05,450
with dev skin and I have it saved in a

696
00:29:05,450 --> 00:29:08,030
JSON file which is nice so I can reuse

697
00:29:08,030 --> 00:29:11,300
work I've done in cases where okay now

698
00:29:11,300 --> 00:29:13,760
we need to implement a new version of

699
00:29:13,760 --> 00:29:15,140
this library because it's you know a

700
00:29:15,140 --> 00:29:16,730
different code base or in a different

701
00:29:16,730 --> 00:29:19,280
version of the same framework or

702
00:29:19,280 --> 00:29:20,960
something like that you just have to do

703
00:29:20,960 --> 00:29:22,160
the like work on that and you have to

704
00:29:22,160 --> 00:29:25,670
choose the most what's the word like the

705
00:29:25,670 --> 00:29:28,250
most valuable applications to do do to

706
00:29:28,250 --> 00:29:33,830
do this on sure so I think maybe you

707
00:29:33,830 --> 00:29:35,420
just answered my question but it was a

708
00:29:35,420 --> 00:29:38,059
little unclear if you were pulling on a

709
00:29:38,059 --> 00:29:39,770
regular schedule and then running a tool

710
00:29:39,770 --> 00:29:41,900
or if you were blocking on the merge

711
00:29:41,900 --> 00:29:44,030
request or if you were pushing for them

712
00:29:44,030 --> 00:29:46,370
to run the tool in the IDE

713
00:29:46,370 --> 00:29:48,679
I don't do the IDE one but the other two

714
00:29:48,679 --> 00:29:51,440
I do so I I have not had a lot of luck

715
00:29:51,440 --> 00:29:53,840
with the IDE method because they just

716
00:29:53,840 --> 00:29:55,790
ended up too many projects and too many

717
00:29:55,790 --> 00:29:58,040
weird some people using sublime some

718
00:29:58,040 --> 00:30:00,110
people using Visual Studio etc etc right

719
00:30:00,110 --> 00:30:02,450
and it rather gets annoying riding a

720
00:30:02,450 --> 00:30:05,270
plugin for everything but I have found a

721
00:30:05,270 --> 00:30:06,920
lot of success on pull requests so

722
00:30:06,920 --> 00:30:09,559
though I highly recommend you just scan

723
00:30:09,559 --> 00:30:11,870
thered if you don't scan like everything

724
00:30:11,870 --> 00:30:14,210
in there PR but just the diff or every

725
00:30:14,210 --> 00:30:16,580
file in there PR and then scanning on a

726
00:30:16,580 --> 00:30:18,650
regular cadence I have a kind of timer

727
00:30:18,650 --> 00:30:20,450
that I just do this on a weekly basis

728
00:30:20,450 --> 00:30:22,660
and I just get you know Monday morning a

729
00:30:22,660 --> 00:30:25,280
kind of oh this is a weird thing and I

730
00:30:25,280 --> 00:30:26,990
might talk about this in a separate talk

731
00:30:26,990 --> 00:30:30,500
but ultimately I do get me a git commit

732
00:30:30,500 --> 00:30:31,669
from a week ago

733
00:30:31,669 --> 00:30:33,830
run the scan cuz it's fast enough to do

734
00:30:33,830 --> 00:30:35,480
that I do this it automatically happens

735
00:30:35,480 --> 00:30:35,750
it's

736
00:30:35,750 --> 00:30:39,080
don't even check until Monday do the

737
00:30:39,080 --> 00:30:41,000
scan on a git commit a week ago and then

738
00:30:41,000 --> 00:30:43,820
do the scan on I get commit now and then

739
00:30:43,820 --> 00:30:46,070
do the diff of that output of the tool

740
00:30:46,070 --> 00:30:48,320
and then I have all the new bad for that

741
00:30:48,320 --> 00:30:50,660
week and that gives me like a good thing

742
00:30:50,660 --> 00:30:56,960
to start on Monday morning sure in the

743
00:30:56,960 --> 00:30:59,980
world of dynamic languages where you can

744
00:30:59,980 --> 00:31:02,210
sometimes do frightening things with

745
00:31:02,210 --> 00:31:05,570
monkey patching and whatnot where do you

746
00:31:05,570 --> 00:31:08,150
find to be a useful place for for those

747
00:31:08,150 --> 00:31:10,880
types of tooling do you ever try and you

748
00:31:10,880 --> 00:31:13,460
know add logs every time someone calls

749
00:31:13,460 --> 00:31:16,400
the unsecure md5 thing by rewriting a

750
00:31:16,400 --> 00:31:19,370
thing or or is there a point where where

751
00:31:19,370 --> 00:31:20,900
you're like yeah I'll just stick with

752
00:31:20,900 --> 00:31:22,310
the static stuff because you don't you

753
00:31:22,310 --> 00:31:24,350
know it doesn't have side effects gotcha

754
00:31:24,350 --> 00:31:26,540
so he asked with dynamic language is

755
00:31:26,540 --> 00:31:29,570
some like Ruby Python JavaScript I mean

756
00:31:29,570 --> 00:31:31,670
even with dynamic languages you do write

757
00:31:31,670 --> 00:31:33,460
the code before you ship it thankfully

758
00:31:33,460 --> 00:31:36,050
so you do get to see the code and you do

759
00:31:36,050 --> 00:31:38,960
get to see the pattern so the example of

760
00:31:38,960 --> 00:31:42,530
open redirects you know if it's in like

761
00:31:42,530 --> 00:31:45,500
like in a node.js app I can think of

762
00:31:45,500 --> 00:31:47,240
essentially you most of them will have

763
00:31:47,240 --> 00:31:50,120
the pattern res dot redirect or response

764
00:31:50,120 --> 00:31:53,330
I'll redirect so why I like instead of

765
00:31:53,330 --> 00:31:55,250
using like a full thing like es Lent or

766
00:31:55,250 --> 00:31:57,680
like more complicated static analysis

767
00:31:57,680 --> 00:32:00,200
tools just using super grep or dev skim

768
00:32:00,200 --> 00:32:04,340
or whatever right or grab is it doesn't

769
00:32:04,340 --> 00:32:05,480
need to be able to parse the code it

770
00:32:05,480 --> 00:32:06,800
doesn't need to be able to compile it

771
00:32:06,800 --> 00:32:08,900
because he'll sometimes you can't

772
00:32:08,900 --> 00:32:10,640
compile it just for some reason requires

773
00:32:10,640 --> 00:32:12,560
ridiculous configurations or it's a

774
00:32:12,560 --> 00:32:14,210
dynamic language so you don't compile it

775
00:32:14,210 --> 00:32:17,210
so while I like that is that helps in

776
00:32:17,210 --> 00:32:18,440
that case but then again it's the

777
00:32:18,440 --> 00:32:19,820
dynamic language so who knows what it

778
00:32:19,820 --> 00:32:25,360
does and I think that's fine thank you

779
00:32:25,360 --> 00:32:28,750
well thank you all

