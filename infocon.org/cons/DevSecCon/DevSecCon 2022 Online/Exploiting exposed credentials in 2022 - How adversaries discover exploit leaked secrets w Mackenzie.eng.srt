1
00:00:00,470 --> 00:00:04,080
[Music]

2
00:00:04,080 --> 00:00:06,720
so next up we have mckenzie

3
00:00:06,720 --> 00:00:09,920
uh who is i'm sorry i'm my notes are

4
00:00:09,920 --> 00:00:12,080
slow as a developer advocate with a

5
00:00:12,080 --> 00:00:14,240
passion for devops and code security

6
00:00:14,240 --> 00:00:16,800
co-founder and former cto of a health

7
00:00:16,800 --> 00:00:18,240
tech startup

8
00:00:18,240 --> 00:00:20,080
and i'm not going to go any further i'll

9
00:00:20,080 --> 00:00:21,600
let him introduce himself more than that

10
00:00:21,600 --> 00:00:23,519
i'm really excited we are going to be

11
00:00:23,519 --> 00:00:26,000
talking about oh gosh he's got a long

12
00:00:26,000 --> 00:00:28,720
title too exploiting exposed credentials

13
00:00:28,720 --> 00:00:31,760
in 2022 how adversaries discover and

14
00:00:31,760 --> 00:00:35,200
exploit leaked secrets

15
00:00:35,200 --> 00:00:36,880
it leaks their secrets nobody would ever

16
00:00:36,880 --> 00:00:39,760
commit to their github repository a hash

17
00:00:39,760 --> 00:00:40,480
or

18
00:00:40,480 --> 00:00:42,000
share it on a

19
00:00:42,000 --> 00:00:45,120
live stream um or anything like that

20
00:00:45,120 --> 00:00:47,360
i've never done anything like that no no

21
00:00:47,360 --> 00:00:49,520
way all right let's bring mackenzie on

22
00:00:49,520 --> 00:00:51,520
hey mackenzie welcome

23
00:00:51,520 --> 00:00:54,000
hey guys how you doing good

24
00:00:54,000 --> 00:00:55,520
i'm well how are you

25
00:00:55,520 --> 00:00:57,120
good good good just chuckling just

26
00:00:57,120 --> 00:00:59,199
chuckling in the background if you're

27
00:00:59,199 --> 00:01:02,160
talking talking there but yeah no great

28
00:01:02,160 --> 00:01:03,920
great great to be here

29
00:01:03,920 --> 00:01:05,280
great to have you well without further

30
00:01:05,280 --> 00:01:06,880
ado we'll get out of your way and let

31
00:01:06,880 --> 00:01:09,520
you take it away

32
00:01:10,080 --> 00:01:12,479
well excellent so as um that was just

33
00:01:12,479 --> 00:01:15,280
being said um uh i have to work on

34
00:01:15,280 --> 00:01:17,119
shortening my titles a little bit but i

35
00:01:17,119 --> 00:01:19,040
always i'm just trying to get so much as

36
00:01:19,040 --> 00:01:21,040
much as i can in there but uh we'll be

37
00:01:21,040 --> 00:01:23,439
talking about exploiting uh secrets

38
00:01:23,439 --> 00:01:25,520
exploiting credentials

39
00:01:25,520 --> 00:01:27,360
what happens when you leak them how

40
00:01:27,360 --> 00:01:29,520
secrets are leaked how adversaries find

41
00:01:29,520 --> 00:01:31,520
them and and use them

42
00:01:31,520 --> 00:01:32,880
basically

43
00:01:32,880 --> 00:01:36,000
to attack your organizations

44
00:01:36,000 --> 00:01:38,560
so i i like to start i know most people

45
00:01:38,560 --> 00:01:40,799
probably kind of know what secrets are

46
00:01:40,799 --> 00:01:42,640
what digital authentication credentials

47
00:01:42,640 --> 00:01:44,560
are but i just want to start at the

48
00:01:44,560 --> 00:01:47,200
basics get everyone kind of up on the

49
00:01:47,200 --> 00:01:51,040
same page and then we can dive into some

50
00:01:51,040 --> 00:01:52,479
of the more technical meat of the

51
00:01:52,479 --> 00:01:53,920
presentation so let's start with like

52
00:01:53,920 --> 00:01:56,399
what are secrets so secrets i'm

53
00:01:56,399 --> 00:01:58,960
typically referring to uh things like

54
00:01:58,960 --> 00:02:01,439
api keys you know your credential pairs

55
00:02:01,439 --> 00:02:03,280
the credential pairs to your database

56
00:02:03,280 --> 00:02:05,280
could be security certificates it could

57
00:02:05,280 --> 00:02:07,360
be a whole range of things and the the

58
00:02:07,360 --> 00:02:08,959
key that they all have in common is that

59
00:02:08,959 --> 00:02:11,280
these are authentication strings right

60
00:02:11,280 --> 00:02:14,800
we use these to authenticate ourselves

61
00:02:14,800 --> 00:02:15,599
with

62
00:02:15,599 --> 00:02:16,400
um

63
00:02:16,400 --> 00:02:19,440
other systems internal services external

64
00:02:19,440 --> 00:02:20,560
services

65
00:02:20,560 --> 00:02:24,160
sas tools so these are really the crown

66
00:02:24,160 --> 00:02:26,000
jewels to your organization and

67
00:02:26,000 --> 00:02:27,760
attackers really

68
00:02:27,760 --> 00:02:30,560
want and also likely need these to be

69
00:02:30,560 --> 00:02:33,040
able to get into your systems

70
00:02:33,040 --> 00:02:35,120
they need they can use them to elevate

71
00:02:35,120 --> 00:02:37,519
their privileges they can move use them

72
00:02:37,519 --> 00:02:39,680
to what we call move laterally so

73
00:02:39,680 --> 00:02:41,519
leapfrog into different different

74
00:02:41,519 --> 00:02:43,599
services once they're inside so these

75
00:02:43,599 --> 00:02:44,959
are really the crown jewels of your

76
00:02:44,959 --> 00:02:47,040
organization and you really want to

77
00:02:47,040 --> 00:02:49,200
protect them but we're at a bit of a

78
00:02:49,200 --> 00:02:50,959
problem with secrets and that is that

79
00:02:50,959 --> 00:02:53,760
they're both highly sensitive that we

80
00:02:53,760 --> 00:02:55,440
need to protect

81
00:02:55,440 --> 00:02:57,519
and we need to distribute them widely

82
00:02:57,519 --> 00:02:59,920
because a lot of people need secrets to

83
00:02:59,920 --> 00:03:02,319
be able to do their job

84
00:03:02,319 --> 00:03:04,480
and this is a because of a pretty big

85
00:03:04,480 --> 00:03:07,440
shift in how we build software today

86
00:03:07,440 --> 00:03:08,400
because

87
00:03:08,400 --> 00:03:09,760
a way back

88
00:03:09,760 --> 00:03:12,480
way back when we used to build these

89
00:03:12,480 --> 00:03:14,640
monolithic applications these are things

90
00:03:14,640 --> 00:03:16,000
where

91
00:03:16,000 --> 00:03:18,239
the software needed everything to run

92
00:03:18,239 --> 00:03:19,680
was internal so everything that that

93
00:03:19,680 --> 00:03:22,159
software needed to run was inside it but

94
00:03:22,159 --> 00:03:24,480
now we can leverage lots of different

95
00:03:24,480 --> 00:03:26,959
systems so the simplest example is maybe

96
00:03:26,959 --> 00:03:28,480
a payment system right if you're

97
00:03:28,480 --> 00:03:30,319
building some software and application

98
00:03:30,319 --> 00:03:32,480
that needs to to process credit cards

99
00:03:32,480 --> 00:03:34,319
for payment are you going to build that

100
00:03:34,319 --> 00:03:36,239
all out yourself find out what the

101
00:03:36,239 --> 00:03:38,000
financial regulations are or are you

102
00:03:38,000 --> 00:03:39,840
just going to use stripe or paypal or

103
00:03:39,840 --> 00:03:41,680
some other service

104
00:03:41,680 --> 00:03:44,319
so we extrapolate this to a lot of areas

105
00:03:44,319 --> 00:03:46,879
in our organizations that could be open

106
00:03:46,879 --> 00:03:48,799
source components too that we're

107
00:03:48,799 --> 00:03:50,959
building on but it can be sas platforms

108
00:03:50,959 --> 00:03:53,599
it can be managed services can be cloud

109
00:03:53,599 --> 00:03:55,840
infrastructure so this change has meant

110
00:03:55,840 --> 00:03:57,120
that we need to handle a lot of these

111
00:03:57,120 --> 00:03:58,799
secrets right and it means we need to

112
00:03:58,799 --> 00:04:01,040
distribute them and create a huge number

113
00:04:01,040 --> 00:04:03,519
of these in any given application

114
00:04:03,519 --> 00:04:05,680
now the second problem is that code is

115
00:04:05,680 --> 00:04:07,840
actually a really leaky asset i want to

116
00:04:07,840 --> 00:04:09,760
give through some examples of kind of

117
00:04:09,760 --> 00:04:12,000
how code has leaked into the public

118
00:04:12,000 --> 00:04:13,040
realm

119
00:04:13,040 --> 00:04:15,200
but basically we don't have adequate

120
00:04:15,200 --> 00:04:16,959
protection around code and this is by

121
00:04:16,959 --> 00:04:19,759
design and is important because you know

122
00:04:19,759 --> 00:04:21,600
code is something that we collaborate on

123
00:04:21,600 --> 00:04:23,360
and we need to be able to do that but it

124
00:04:23,360 --> 00:04:25,199
means it's hard to protect

125
00:04:25,199 --> 00:04:27,840
so when we get secrets inside our code

126
00:04:27,840 --> 00:04:29,759
it creates a real problem and then the

127
00:04:29,759 --> 00:04:32,160
last kind of piece to this fragile

128
00:04:32,160 --> 00:04:35,040
pyramid is is that

129
00:04:35,040 --> 00:04:36,560
software developers are under a lot of

130
00:04:36,560 --> 00:04:38,560
pressure you know we're trying to get

131
00:04:38,560 --> 00:04:40,639
our release cycle shorter we have lots

132
00:04:40,639 --> 00:04:43,120
of competition uh we're building very

133
00:04:43,120 --> 00:04:44,400
very quickly

134
00:04:44,400 --> 00:04:46,560
so this all together kind of combines

135
00:04:46,560 --> 00:04:49,440
this perfect storm for these secrets you

136
00:04:49,440 --> 00:04:50,720
know these crown jewels of our

137
00:04:50,720 --> 00:04:53,280
organization to leak to kind of be

138
00:04:53,280 --> 00:04:55,520
exploited by attackers

139
00:04:55,520 --> 00:04:57,280
so just quickly we can give a pretty

140
00:04:57,280 --> 00:04:59,360
good example of kind of how many of

141
00:04:59,360 --> 00:05:01,199
these secrets are so let's say that

142
00:05:01,199 --> 00:05:04,320
we're building an application and i used

143
00:05:04,320 --> 00:05:07,039
the example about stripe before but we

144
00:05:07,039 --> 00:05:08,320
can extrapolate this to lots of

145
00:05:08,320 --> 00:05:10,240
different services right if we're

146
00:05:10,240 --> 00:05:12,080
building the application in a django

147
00:05:12,080 --> 00:05:14,160
framework or using django then we have

148
00:05:14,160 --> 00:05:16,639
django keys that we need to manage uh

149
00:05:16,639 --> 00:05:18,000
maybe we're connecting into twitter

150
00:05:18,000 --> 00:05:19,919
maybe we're using octa as our thought

151
00:05:19,919 --> 00:05:22,639
authentication maybe we're using algolia

152
00:05:22,639 --> 00:05:24,720
as our search function inside our

153
00:05:24,720 --> 00:05:26,800
application so all of these different

154
00:05:26,800 --> 00:05:28,800
systems need to leverage secrets to be

155
00:05:28,800 --> 00:05:30,560
able to connect to them and all of them

156
00:05:30,560 --> 00:05:32,000
can contain a lot of sensitive

157
00:05:32,000 --> 00:05:35,199
information or provide opportunities for

158
00:05:35,199 --> 00:05:37,520
adversaries to be able to jump between

159
00:05:37,520 --> 00:05:39,840
them and then once we've built our

160
00:05:39,840 --> 00:05:41,680
application right we're not done with

161
00:05:41,680 --> 00:05:43,840
secrets yet because we need to host this

162
00:05:43,840 --> 00:05:45,759
application we need to kind of make it

163
00:05:45,759 --> 00:05:47,759
accessible so our infrastructure that we

164
00:05:47,759 --> 00:05:50,320
use deals with secrets too maybe we're

165
00:05:50,320 --> 00:05:53,360
hosting this on our aws cloud

166
00:05:53,360 --> 00:05:55,759
and so now we need to deal with aws

167
00:05:55,759 --> 00:05:58,240
credentials you know we have to manage

168
00:05:58,240 --> 00:06:00,080
our code so we're dealing with git

169
00:06:00,080 --> 00:06:02,240
credentials we have uh testing being

170
00:06:02,240 --> 00:06:04,080
done in our ci cd pipelines when we're

171
00:06:04,080 --> 00:06:06,000
deploying apps we have credentials for

172
00:06:06,000 --> 00:06:07,759
those and they can be really sensitive

173
00:06:07,759 --> 00:06:10,080
i'll show an example of that right so

174
00:06:10,080 --> 00:06:11,919
once we've built our application and we

175
00:06:11,919 --> 00:06:13,759
have some inventory infrastructure in

176
00:06:13,759 --> 00:06:15,680
place people can access it right

177
00:06:15,680 --> 00:06:17,280
probably the marketing teams the sales

178
00:06:17,280 --> 00:06:19,120
teams are going to want integration so

179
00:06:19,120 --> 00:06:20,800
maybe we have salesforce integrations

180
00:06:20,800 --> 00:06:22,639
graphene slack all these other different

181
00:06:22,639 --> 00:06:25,360
areas so now we have more secrets to to

182
00:06:25,360 --> 00:06:27,120
deal with and we haven't even started

183
00:06:27,120 --> 00:06:29,360
talking about the internal microsystems

184
00:06:29,360 --> 00:06:31,759
or microservices that you're creating

185
00:06:31,759 --> 00:06:33,840
that also probably leverage secrets for

186
00:06:33,840 --> 00:06:36,319
authentication but aren't a named

187
00:06:36,319 --> 00:06:38,319
service like the other ones on here so

188
00:06:38,319 --> 00:06:40,639
this is oversimplified version but we

189
00:06:40,639 --> 00:06:43,039
can see that very quickly we can end up

190
00:06:43,039 --> 00:06:45,039
with hundreds thousands of these

191
00:06:45,039 --> 00:06:46,960
different services and then we can end

192
00:06:46,960 --> 00:06:48,960
up with hundreds and thousands of

193
00:06:48,960 --> 00:06:51,280
different credentials different secrets

194
00:06:51,280 --> 00:06:53,919
that we need to access them so this is

195
00:06:53,919 --> 00:06:56,720
largely kind of the problem of how many

196
00:06:56,720 --> 00:06:58,960
secrets that we are dealing with as an

197
00:06:58,960 --> 00:07:01,520
organization today

198
00:07:01,520 --> 00:07:03,599
now the the last part of that component

199
00:07:03,599 --> 00:07:05,759
is the unwanted distribution of these

200
00:07:05,759 --> 00:07:08,080
secrets now they can kind of leak in a

201
00:07:08,080 --> 00:07:09,919
lot of different ways but the number one

202
00:07:09,919 --> 00:07:12,160
way that we lose track of these secrets

203
00:07:12,160 --> 00:07:15,039
is through code uh particularly our

204
00:07:15,039 --> 00:07:17,360
version control systems so you can

205
00:07:17,360 --> 00:07:19,840
imagine a situation where a secret gets

206
00:07:19,840 --> 00:07:22,080
hard coded into source code right

207
00:07:22,080 --> 00:07:23,680
developers quickly trying to do

208
00:07:23,680 --> 00:07:26,240
something maybe they uh they hard code a

209
00:07:26,240 --> 00:07:27,759
credential to get something working

210
00:07:27,759 --> 00:07:29,199
maybe they're intending to remove it

211
00:07:29,199 --> 00:07:30,560
later before it goes on to the master

212
00:07:30,560 --> 00:07:32,560
but it ends up in our source code it

213
00:07:32,560 --> 00:07:34,880
ends up in our version control system

214
00:07:34,880 --> 00:07:37,199
now immediately this is then cloned onto

215
00:07:37,199 --> 00:07:39,280
multiple different developers machines

216
00:07:39,280 --> 00:07:41,680
right so we have now lost track of where

217
00:07:41,680 --> 00:07:43,599
that secrets ended up it's in our source

218
00:07:43,599 --> 00:07:44,879
code plus it's on all the different

219
00:07:44,879 --> 00:07:46,800
developers machines maybe it's been

220
00:07:46,800 --> 00:07:49,199
copied into uh into some messaging

221
00:07:49,199 --> 00:07:51,840
systems like slack

222
00:07:51,840 --> 00:07:54,319
it's probably backed up into different

223
00:07:54,319 --> 00:07:56,800
servers everywhere and it may even end

224
00:07:56,800 --> 00:07:59,599
up in a running application or end up in

225
00:07:59,599 --> 00:08:01,440
our deployment tools maybe in docker

226
00:08:01,440 --> 00:08:02,479
images

227
00:08:02,479 --> 00:08:05,680
and the key thing about this is that we

228
00:08:05,680 --> 00:08:06,720
actually

229
00:08:06,720 --> 00:08:10,639
have no visibility we have no idea where

230
00:08:10,639 --> 00:08:13,039
the secret has ended up so we don't even

231
00:08:13,039 --> 00:08:14,720
know that this secret has actually been

232
00:08:14,720 --> 00:08:16,000
compromised we don't know that this

233
00:08:16,000 --> 00:08:18,319
secret uh is in backups it's in

234
00:08:18,319 --> 00:08:20,879
different developers machines we don't

235
00:08:20,879 --> 00:08:23,120
know we can't restrict who has access to

236
00:08:23,120 --> 00:08:25,919
it so we end up with a problem that

237
00:08:25,919 --> 00:08:28,479
collectively we call secret sprawl

238
00:08:28,479 --> 00:08:30,960
right and attackers really rely on this

239
00:08:30,960 --> 00:08:33,760
concept of secret sprawl to be able to

240
00:08:33,760 --> 00:08:36,159
kind of exploit these secrets and i have

241
00:08:36,159 --> 00:08:38,000
a quick demo that i want to show you

242
00:08:38,000 --> 00:08:39,120
here today

243
00:08:39,120 --> 00:08:41,519
now they say you should never do live

244
00:08:41,519 --> 00:08:43,039
demos but we're going to give it a go

245
00:08:43,039 --> 00:08:45,440
and we'll hope for the best uh usually

246
00:08:45,440 --> 00:08:47,839
you can rely on bad guys pretty well

247
00:08:47,839 --> 00:08:50,240
so here i have a configuration file a

248
00:08:50,240 --> 00:08:52,880
python configuration file in a in a fake

249
00:08:52,880 --> 00:08:55,760
project and right here we have an aws

250
00:08:55,760 --> 00:08:58,800
credential now this aws credential isn't

251
00:08:58,800 --> 00:09:00,320
going to help you much if you want to do

252
00:09:00,320 --> 00:09:02,800
some bitcoin mining but what this is is

253
00:09:02,800 --> 00:09:04,480
a canary token

254
00:09:04,480 --> 00:09:06,640
now lewis briefly spoke about canary

255
00:09:06,640 --> 00:09:08,560
tokens in an earlier session

256
00:09:08,560 --> 00:09:09,440
here

257
00:09:09,440 --> 00:09:11,440
but essentially what this is going to do

258
00:09:11,440 --> 00:09:14,160
is every time someone tries to exploit

259
00:09:14,160 --> 00:09:16,080
this credential they're going to let me

260
00:09:16,080 --> 00:09:18,160
know it's going to notify me

261
00:09:18,160 --> 00:09:19,519
and what i'm going to do is i'm going to

262
00:09:19,519 --> 00:09:21,920
do the number one sin that you can do

263
00:09:21,920 --> 00:09:23,760
when dealing with secrets and i'm gonna

264
00:09:23,760 --> 00:09:25,440
push this secret

265
00:09:25,440 --> 00:09:27,200
or this file

266
00:09:27,200 --> 00:09:30,240
into a public git repository

267
00:09:30,240 --> 00:09:33,760
so i'm just gonna quickly do that

268
00:09:34,000 --> 00:09:36,150
no mackenzie don't do that

269
00:09:36,150 --> 00:09:38,480
[Laughter]

270
00:09:38,480 --> 00:09:39,440
ah

271
00:09:39,440 --> 00:09:42,160
it's done it's done now

272
00:09:42,160 --> 00:09:44,800
now what i have here is i have uh on my

273
00:09:44,800 --> 00:09:46,640
page i said this is a canary token

274
00:09:46,640 --> 00:09:48,320
what's gonna happen is this is gonna let

275
00:09:48,320 --> 00:09:50,320
me know every time someone tries and

276
00:09:50,320 --> 00:09:51,279
access

277
00:09:51,279 --> 00:09:54,720
that token and i have about

278
00:09:54,720 --> 00:09:57,440
20 minutes left on this presentation and

279
00:09:57,440 --> 00:09:58,880
i'm going to see at the end how many

280
00:09:58,880 --> 00:10:00,720
people between now and in 20 minutes

281
00:10:00,720 --> 00:10:03,839
have tried to access my aws credential

282
00:10:03,839 --> 00:10:05,200
right and i want to do this for a couple

283
00:10:05,200 --> 00:10:07,839
of reasons one is i want to show that

284
00:10:07,839 --> 00:10:10,480
that this problem is so widespread but i

285
00:10:10,480 --> 00:10:12,959
also want to show that actually source

286
00:10:12,959 --> 00:10:15,200
code is being monitored and there's a

287
00:10:15,200 --> 00:10:16,800
number of ways that attackers can do

288
00:10:16,800 --> 00:10:18,480
this and we'll i'll talk about that in a

289
00:10:18,480 --> 00:10:20,399
bit later

290
00:10:20,399 --> 00:10:21,760
but now

291
00:10:21,760 --> 00:10:25,360
uh let's have a look at some cases where

292
00:10:25,360 --> 00:10:26,800
attackers have been able to exploit

293
00:10:26,800 --> 00:10:28,880
these secrets in real life not just

294
00:10:28,880 --> 00:10:30,720
hypothetical examples like the one we're

295
00:10:30,720 --> 00:10:31,680
doing

296
00:10:31,680 --> 00:10:33,839
so in uber uber actually had two

297
00:10:33,839 --> 00:10:36,959
instances where the credentials were

298
00:10:36,959 --> 00:10:40,480
were exploited now one was because an

299
00:10:40,480 --> 00:10:42,959
employee of uber did exactly what i just

300
00:10:42,959 --> 00:10:45,600
did they just pushed credentials in a

301
00:10:45,600 --> 00:10:48,000
public personal git repository now the

302
00:10:48,000 --> 00:10:50,800
key is that this was actually code for

303
00:10:50,800 --> 00:10:51,920
uber

304
00:10:51,920 --> 00:10:53,920
and i'm not sure what caused it perhaps

305
00:10:53,920 --> 00:10:55,360
they got confused with repositories

306
00:10:55,360 --> 00:10:57,519
perhaps they misconfigured their git

307
00:10:57,519 --> 00:11:01,360
but this ended up publicly on that that

308
00:11:01,360 --> 00:11:04,160
employee's personal github account

309
00:11:04,160 --> 00:11:06,320
attackers found it and it gave access to

310
00:11:06,320 --> 00:11:07,920
an amazon s3 bucket where they were able

311
00:11:07,920 --> 00:11:10,800
to gain access to sensitive information

312
00:11:10,800 --> 00:11:14,000
they also had another example where

313
00:11:14,000 --> 00:11:15,839
in a private case where they had a

314
00:11:15,839 --> 00:11:18,959
private git repository so not public

315
00:11:18,959 --> 00:11:22,000
and inside this there was also amazon s3

316
00:11:22,000 --> 00:11:23,839
buckets that were hard coded into the

317
00:11:23,839 --> 00:11:25,920
source code so how did the attackers

318
00:11:25,920 --> 00:11:27,680
find these well it was actually because

319
00:11:27,680 --> 00:11:30,000
of poor password hygiene so these some

320
00:11:30,000 --> 00:11:31,920
employees were using the same passwords

321
00:11:31,920 --> 00:11:33,680
for multiple systems i think some of

322
00:11:33,680 --> 00:11:35,600
those other systems were compromised and

323
00:11:35,600 --> 00:11:37,120
then they used that password to gain

324
00:11:37,120 --> 00:11:39,040
access to git repositories where they

325
00:11:39,040 --> 00:11:41,120
found the sensitive information so this

326
00:11:41,120 --> 00:11:43,040
illustrates kind of

327
00:11:43,040 --> 00:11:45,040
quite well both the public and the

328
00:11:45,040 --> 00:11:47,440
private aspect of not having secrets

329
00:11:47,440 --> 00:11:49,839
inside your source code

330
00:11:49,839 --> 00:11:51,519
now another example and probably one of

331
00:11:51,519 --> 00:11:54,720
my favorite ones is that of code cov

332
00:11:54,720 --> 00:11:57,519
so code cough was compromised uh early

333
00:11:57,519 --> 00:12:00,560
last year in a supply chain attack uh so

334
00:12:00,560 --> 00:12:02,320
we we just heard from lauren about some

335
00:12:02,320 --> 00:12:04,560
supply chain attacks uh so i want to

336
00:12:04,560 --> 00:12:06,399
talk about about the code called supply

337
00:12:06,399 --> 00:12:08,880
chain attack so firstly what is uh

338
00:12:08,880 --> 00:12:12,560
codecov so code cov is a code coverage

339
00:12:12,560 --> 00:12:15,760
tool basically what this tool does is it

340
00:12:15,760 --> 00:12:16,639
tests

341
00:12:16,639 --> 00:12:18,480
how much of your code

342
00:12:18,480 --> 00:12:20,560
is being tested by the other tools it

343
00:12:20,560 --> 00:12:22,399
gives you a report of how much of your

344
00:12:22,399 --> 00:12:24,399
code is being tested by other tools

345
00:12:24,399 --> 00:12:26,560
so it does a very specific job it sits

346
00:12:26,560 --> 00:12:28,639
at your ci cd pipeline personally i

347
00:12:28,639 --> 00:12:30,800
think it's a great tool but this would

348
00:12:30,800 --> 00:12:32,720
be one of multiple tools that you would

349
00:12:32,720 --> 00:12:34,880
have at the time of their breach they

350
00:12:34,880 --> 00:12:38,160
had 20 000 users so it was a significant

351
00:12:38,160 --> 00:12:41,040
user base and some large companies which

352
00:12:41,040 --> 00:12:44,399
i'll talk about were using code cov

353
00:12:44,399 --> 00:12:46,240
so what actually happened

354
00:12:46,240 --> 00:12:49,440
so in code calls doc kind of public main

355
00:12:49,440 --> 00:12:51,040
docker image so anyone could have

356
00:12:51,040 --> 00:12:52,959
downloaded this people this is a docker

357
00:12:52,959 --> 00:12:55,440
image that people were using to run code

358
00:12:55,440 --> 00:12:58,240
cov inside this docker image there was a

359
00:12:58,240 --> 00:13:00,079
plain text file

360
00:13:00,079 --> 00:13:02,639
a plain text credential i should say

361
00:13:02,639 --> 00:13:04,240
this credential

362
00:13:04,240 --> 00:13:06,480
gave access to

363
00:13:06,480 --> 00:13:09,360
their source code so it gave access uh

364
00:13:09,360 --> 00:13:11,519
to yeah the ability for them not only to

365
00:13:11,519 --> 00:13:12,959
be able to access the source code for

366
00:13:12,959 --> 00:13:15,200
also be able to update their source code

367
00:13:15,200 --> 00:13:17,760
so the attackers found this plain text

368
00:13:17,760 --> 00:13:20,079
credential in again their public docker

369
00:13:20,079 --> 00:13:22,639
image and once they had that they were

370
00:13:22,639 --> 00:13:24,800
then able to inject

371
00:13:24,800 --> 00:13:25,600
some

372
00:13:25,600 --> 00:13:27,200
malicious code

373
00:13:27,200 --> 00:13:30,079
uh into codecov's code base now they did

374
00:13:30,079 --> 00:13:32,320
it in a batch uploaders file it was a

375
00:13:32,320 --> 00:13:34,560
fairly ugly file it was thousands of

376
00:13:34,560 --> 00:13:36,160
lines deep

377
00:13:36,160 --> 00:13:39,040
and they injected just one line of code

378
00:13:39,040 --> 00:13:40,800
and that line of code did something

379
00:13:40,800 --> 00:13:42,399
quite specific

380
00:13:42,399 --> 00:13:44,800
it basically said every time one of

381
00:13:44,800 --> 00:13:48,399
kodkov's 20 000 customers is is running

382
00:13:48,399 --> 00:13:50,720
it take all the environment variables

383
00:13:50,720 --> 00:13:52,880
that are available and send them to me

384
00:13:52,880 --> 00:13:55,040
send them to the attacker

385
00:13:55,040 --> 00:13:57,199
so when you're testing your application

386
00:13:57,199 --> 00:13:58,560
your application has to be able to build

387
00:13:58,560 --> 00:14:00,480
it has to be on a run so you have

388
00:14:00,480 --> 00:14:02,720
secrets in your environment variables

389
00:14:02,720 --> 00:14:04,000
right you may have to access your

390
00:14:04,000 --> 00:14:07,199
database your your systems now hopefully

391
00:14:07,199 --> 00:14:09,040
hopefully you're using different

392
00:14:09,040 --> 00:14:10,720
credentials to test than you are in

393
00:14:10,720 --> 00:14:13,120
production but it's not always the case

394
00:14:13,120 --> 00:14:14,720
and it's certainly not the case that

395
00:14:14,720 --> 00:14:17,040
test credentials aren't always sensitive

396
00:14:17,040 --> 00:14:19,360
because the adversaries were actually

397
00:14:19,360 --> 00:14:21,760
after a specific credential they were

398
00:14:21,760 --> 00:14:24,240
after the get credentials the github

399
00:14:24,240 --> 00:14:27,839
tokens for these customers because this

400
00:14:27,839 --> 00:14:29,279
was something that was in the

401
00:14:29,279 --> 00:14:31,120
environment variables when code calls

402
00:14:31,120 --> 00:14:33,199
was running so what were the attackers

403
00:14:33,199 --> 00:14:34,399
able to do

404
00:14:34,399 --> 00:14:36,720
they were able to move from codecov's

405
00:14:36,720 --> 00:14:39,519
docker image into their source code

406
00:14:39,519 --> 00:14:40,720
turn their source code to their

407
00:14:40,720 --> 00:14:42,639
application malicious and then move into

408
00:14:42,639 --> 00:14:45,040
the private code repositories of

409
00:14:45,040 --> 00:14:47,199
codecov's customers so who were these

410
00:14:47,199 --> 00:14:49,120
customers these customers were people

411
00:14:49,120 --> 00:14:52,079
like twilio monday.com

412
00:14:52,079 --> 00:14:53,440
hashicorp

413
00:14:53,440 --> 00:14:54,880
rapid7

414
00:14:54,880 --> 00:14:57,199
large companies with great security

415
00:14:57,199 --> 00:14:59,279
posture the attackers were able to

416
00:14:59,279 --> 00:15:02,079
access the private source code of these

417
00:15:02,079 --> 00:15:03,199
companies

418
00:15:03,199 --> 00:15:05,040
and these companies the ones that i've

419
00:15:05,040 --> 00:15:06,320
just named

420
00:15:06,320 --> 00:15:09,040
had to report that not only was their

421
00:15:09,040 --> 00:15:11,199
source code breached but actually they

422
00:15:11,199 --> 00:15:13,440
had secrets in their source code now

423
00:15:13,440 --> 00:15:16,399
that included hashicorp hashicorp is a

424
00:15:16,399 --> 00:15:19,279
fantastic company they coined the phrase

425
00:15:19,279 --> 00:15:21,199
secret sprawl and they build one of the

426
00:15:21,199 --> 00:15:23,279
best secret management products out

427
00:15:23,279 --> 00:15:26,240
there and even they had secrets in their

428
00:15:26,240 --> 00:15:28,079
source code so i'm willing to bet

429
00:15:28,079 --> 00:15:29,839
anything that if hashicorp has secrets

430
00:15:29,839 --> 00:15:32,320
in their source code you probably do too

431
00:15:32,320 --> 00:15:33,279
and

432
00:15:33,279 --> 00:15:35,199
source code isn't impenetrable this is

433
00:15:35,199 --> 00:15:37,360
one example how even if you do nothing

434
00:15:37,360 --> 00:15:38,399
wrong

435
00:15:38,399 --> 00:15:41,199
adversaries can perhaps access your

436
00:15:41,199 --> 00:15:43,360
private source code so

437
00:15:43,360 --> 00:15:45,360
this is a great example of kind of that

438
00:15:45,360 --> 00:15:46,880
supply chain

439
00:15:46,880 --> 00:15:48,800
attack going on

440
00:15:48,800 --> 00:15:50,320
now the other thing to think about with

441
00:15:50,320 --> 00:15:52,240
private source code is that they don't

442
00:15:52,240 --> 00:15:54,800
always remain private all right we have

443
00:15:54,800 --> 00:15:57,519
hundreds of headlines about private

444
00:15:57,519 --> 00:15:59,680
source code being made

445
00:15:59,680 --> 00:16:01,199
public or as i like to call it

446
00:16:01,199 --> 00:16:03,759
involuntarily open sourced

447
00:16:03,759 --> 00:16:06,240
so we have a lot of examples about these

448
00:16:06,240 --> 00:16:08,320
and this is another area where your

449
00:16:08,320 --> 00:16:10,560
source code in and of itself can be a

450
00:16:10,560 --> 00:16:11,920
vulnerability

451
00:16:11,920 --> 00:16:14,399
and i really like to to kind of focus in

452
00:16:14,399 --> 00:16:16,639
on that point because we know that our

453
00:16:16,639 --> 00:16:19,040
application can have a vulnerability and

454
00:16:19,040 --> 00:16:20,480
we know that that application can have a

455
00:16:20,480 --> 00:16:22,160
vulnerability because of maybe something

456
00:16:22,160 --> 00:16:24,560
we did in our source code but also our

457
00:16:24,560 --> 00:16:26,959
source code in and of itself

458
00:16:26,959 --> 00:16:31,040
can be a threat can be vulnerable

459
00:16:31,040 --> 00:16:32,959
so if we look at twitch twitch's source

460
00:16:32,959 --> 00:16:36,240
code for example that last year in

461
00:16:36,240 --> 00:16:37,920
october their source code was

462
00:16:37,920 --> 00:16:41,279
involuntary open source via a torrent uh

463
00:16:41,279 --> 00:16:43,519
we scanned twitch's source code and we

464
00:16:43,519 --> 00:16:47,199
found over 6 000 secrets inside here now

465
00:16:47,199 --> 00:16:49,199
that may sound like a lot but at the

466
00:16:49,199 --> 00:16:51,440
scale of twitch it's actually pretty

467
00:16:51,440 --> 00:16:53,759
standard in fact twitch beats the

468
00:16:53,759 --> 00:16:55,279
industry standard of what we typically

469
00:16:55,279 --> 00:16:57,279
would find in private source code for

470
00:16:57,279 --> 00:16:59,519
secrets but that doesn't matter because

471
00:16:59,519 --> 00:17:02,800
we still found 194 aws keys in twitch's

472
00:17:02,800 --> 00:17:05,679
source code 69 twilio keys a bunch of

473
00:17:05,679 --> 00:17:07,039
google keys

474
00:17:07,039 --> 00:17:08,799
and a whole bunch of other really

475
00:17:08,799 --> 00:17:10,319
sensitive information i have we have a

476
00:17:10,319 --> 00:17:13,119
whole report on it if you're interested

477
00:17:13,119 --> 00:17:15,039
but this just goes to so that private

478
00:17:15,039 --> 00:17:16,799
source code doesn't always remain

479
00:17:16,799 --> 00:17:18,480
private and when it does leak out

480
00:17:18,480 --> 00:17:21,039
publicly it can leak out whole much more

481
00:17:21,039 --> 00:17:23,280
than just your source code

482
00:17:23,280 --> 00:17:25,520
now in my opinion the attackers in this

483
00:17:25,520 --> 00:17:28,079
exact example actually did twitch a

484
00:17:28,079 --> 00:17:30,400
favor they did twitch a favor because

485
00:17:30,400 --> 00:17:32,320
they publicly announced that twitch's

486
00:17:32,320 --> 00:17:34,960
source code has been breached had they

487
00:17:34,960 --> 00:17:36,880
not done this then twitch may not have

488
00:17:36,880 --> 00:17:39,440
known that all these secrets inside were

489
00:17:39,440 --> 00:17:41,600
compromised because they were very

490
00:17:41,600 --> 00:17:43,520
quickly able to rotate a lot of these

491
00:17:43,520 --> 00:17:45,679
secrets so they were no longer a threat

492
00:17:45,679 --> 00:17:48,000
but the attackers could have sold them

493
00:17:48,000 --> 00:17:49,760
it happens regularly on the dark on the

494
00:17:49,760 --> 00:17:51,840
dark web where you can sell credential

495
00:17:51,840 --> 00:17:53,600
accesses into companies so it could have

496
00:17:53,600 --> 00:17:54,960
been a whole bunch

497
00:17:54,960 --> 00:17:55,840
worse

498
00:17:55,840 --> 00:17:58,240
now another example is that of samsung

499
00:17:58,240 --> 00:18:02,240
nvidia and microsoft now this year

500
00:18:02,240 --> 00:18:04,000
a lot of uh source code from these

501
00:18:04,000 --> 00:18:06,559
companies again great companies were

502
00:18:06,559 --> 00:18:09,600
involuntarily open sourced and again

503
00:18:09,600 --> 00:18:11,360
we were able to scan these and found

504
00:18:11,360 --> 00:18:13,919
huge amounts of secrets inside of them

505
00:18:13,919 --> 00:18:15,520
i'm just going to talk about a specific

506
00:18:15,520 --> 00:18:18,240
type of secret in the case of nvidia and

507
00:18:18,240 --> 00:18:21,200
that is that nvidia had their signing

508
00:18:21,200 --> 00:18:22,160
keys

509
00:18:22,160 --> 00:18:24,480
inside their git repositories and these

510
00:18:24,480 --> 00:18:27,520
signing keys were actually used to sign

511
00:18:27,520 --> 00:18:29,520
malware intended for windows so they

512
00:18:29,520 --> 00:18:31,919
were able to basically

513
00:18:31,919 --> 00:18:33,440
authenticate

514
00:18:33,440 --> 00:18:35,840
software that was actually malware and

515
00:18:35,840 --> 00:18:37,600
it was accepted by windows machines

516
00:18:37,600 --> 00:18:39,440
because of nvidia's signing keys they

517
00:18:39,440 --> 00:18:41,760
were in their private repositories

518
00:18:41,760 --> 00:18:44,559
now this breach is actually a result

519
00:18:44,559 --> 00:18:47,600
from the lapsis group now we later found

520
00:18:47,600 --> 00:18:49,600
out that lapses was a group of teenagers

521
00:18:49,600 --> 00:18:51,280
so this leads you to the question how

522
00:18:51,280 --> 00:18:53,039
did a group of teenagers

523
00:18:53,039 --> 00:18:56,799
breach the private source code of some

524
00:18:56,799 --> 00:18:58,480
incredible companies samsung and video

525
00:18:58,480 --> 00:19:00,720
microsoft are fantastic companies with

526
00:19:00,720 --> 00:19:03,039
great security posture so how do they do

527
00:19:03,039 --> 00:19:03,760
it

528
00:19:03,760 --> 00:19:06,640
well here's a screenshot from the lapses

529
00:19:06,640 --> 00:19:09,280
telegram channel basically saying that

530
00:19:09,280 --> 00:19:10,559
they're after

531
00:19:10,559 --> 00:19:12,320
insiders they're trying to recruit

532
00:19:12,320 --> 00:19:14,320
insiders specifically the message says

533
00:19:14,320 --> 00:19:16,160
that we're recruiting employees insiders

534
00:19:16,160 --> 00:19:17,760
at the following and then they give a

535
00:19:17,760 --> 00:19:20,000
list of different companies

536
00:19:20,000 --> 00:19:22,720
so i want you to think now about your

537
00:19:22,720 --> 00:19:25,679
source code and who has access to it so

538
00:19:25,679 --> 00:19:27,120
when we're thinking about our secrets

539
00:19:27,120 --> 00:19:29,039
i've said a lot it's my favorite phrase

540
00:19:29,039 --> 00:19:30,640
that the crown jewels of your

541
00:19:30,640 --> 00:19:32,960
organization right and as such most

542
00:19:32,960 --> 00:19:34,240
companies will have great secrets

543
00:19:34,240 --> 00:19:36,720
management they'll be tightly encrypted

544
00:19:36,720 --> 00:19:38,559
the access to those secrets will be

545
00:19:38,559 --> 00:19:40,240
tightly controlled

546
00:19:40,240 --> 00:19:42,480
so not everyone should or would have

547
00:19:42,480 --> 00:19:44,160
access to them in fact a select group of

548
00:19:44,160 --> 00:19:45,679
people would have access to a select

549
00:19:45,679 --> 00:19:47,760
certain group of credentials

550
00:19:47,760 --> 00:19:49,440
but if these credentials end up inside

551
00:19:49,440 --> 00:19:51,919
your source code now think about who has

552
00:19:51,919 --> 00:19:53,679
access to your source code

553
00:19:53,679 --> 00:19:55,200
your engineers obviously do your

554
00:19:55,200 --> 00:19:57,440
developers uh your product managers

555
00:19:57,440 --> 00:19:59,760
probably do your team leaders do and

556
00:19:59,760 --> 00:20:02,240
even your interns would so if someone's

557
00:20:02,240 --> 00:20:03,919
trying to access your company should

558
00:20:03,919 --> 00:20:05,600
they try and attack this the secrets

559
00:20:05,600 --> 00:20:06,799
management software which would be near

560
00:20:06,799 --> 00:20:08,799
impossible or do they try and find a

561
00:20:08,799 --> 00:20:10,960
disgruntled employee an intern that's

562
00:20:10,960 --> 00:20:12,799
had a bad day and give them a couple of

563
00:20:12,799 --> 00:20:14,480
grand so that you can access their

564
00:20:14,480 --> 00:20:16,880
private source code well that is exactly

565
00:20:16,880 --> 00:20:19,679
how lapses was able to breach and find

566
00:20:19,679 --> 00:20:22,320
secrets inside some of the largest

567
00:20:22,320 --> 00:20:25,918
companies that we have

568
00:20:26,000 --> 00:20:28,720
so i want to talk now about a report

569
00:20:28,720 --> 00:20:30,960
that will show kind of the scale of this

570
00:20:30,960 --> 00:20:32,799
how big of a problem are leaked

571
00:20:32,799 --> 00:20:35,520
credentials so each year so i work for

572
00:20:35,520 --> 00:20:37,760
get guardian we're a secret detection

573
00:20:37,760 --> 00:20:39,440
company and each year we release a

574
00:20:39,440 --> 00:20:41,200
report called the state of secrets

575
00:20:41,200 --> 00:20:42,559
report

576
00:20:42,559 --> 00:20:44,880
secret sprawl and this report looks at a

577
00:20:44,880 --> 00:20:47,280
number of different areas and how

578
00:20:47,280 --> 00:20:49,360
frequently we find secrets inside them

579
00:20:49,360 --> 00:20:51,760
so we look at uh secrets on

580
00:20:51,760 --> 00:20:54,159
public places like public github

581
00:20:54,159 --> 00:20:56,159
we look at secrets inside public docker

582
00:20:56,159 --> 00:20:57,679
images so we talked about code carve in

583
00:20:57,679 --> 00:20:59,280
their docker image and we also look at

584
00:20:59,280 --> 00:21:01,280
secrets inside pro private code

585
00:21:01,280 --> 00:21:03,280
repositories and then we publish these

586
00:21:03,280 --> 00:21:05,679
results and what we found in the types

587
00:21:05,679 --> 00:21:08,159
of secrets that we found

588
00:21:08,159 --> 00:21:10,799
so if you want to know how many secrets

589
00:21:10,799 --> 00:21:14,000
are exposed on github.com

590
00:21:14,000 --> 00:21:16,960
6 million secrets were leaked last year

591
00:21:16,960 --> 00:21:19,840
in 2021 so get guardian scans every

592
00:21:19,840 --> 00:21:22,159
single commit made to github.com if you

593
00:21:22,159 --> 00:21:24,640
pushed source code to github we scanned

594
00:21:24,640 --> 00:21:27,600
it um so six million credentials we

595
00:21:27,600 --> 00:21:29,919
found now this was from about 56 million

596
00:21:29,919 --> 00:21:31,919
users now github claim they have 75

597
00:21:31,919 --> 00:21:34,480
million users i'm sure they do but 56

598
00:21:34,480 --> 00:21:37,440
million users actually pushed code to

599
00:21:37,440 --> 00:21:39,919
github last year

600
00:21:39,919 --> 00:21:43,200
so this is a huge volume of code it's

601
00:21:43,200 --> 00:21:45,120
billions of commits

602
00:21:45,120 --> 00:21:47,679
and six million credentials is

603
00:21:47,679 --> 00:21:49,120
mind-blowing

604
00:21:49,120 --> 00:21:51,039
but it's not just us that kind of

605
00:21:51,039 --> 00:21:53,039
realize this adversaries realize this

606
00:21:53,039 --> 00:21:55,360
too and they actively monitor places

607
00:21:55,360 --> 00:21:57,840
like github for secrets so at the start

608
00:21:57,840 --> 00:21:59,679
of this talk i leaked a credential on

609
00:21:59,679 --> 00:22:01,120
github.com

610
00:22:01,120 --> 00:22:02,159
now

611
00:22:02,159 --> 00:22:03,840
i linked that in my personal private

612
00:22:03,840 --> 00:22:07,120
repository i'm not very active on github

613
00:22:07,120 --> 00:22:08,880
lately so there's no reason why attacker

614
00:22:08,880 --> 00:22:10,880
would be monitoring me but what actually

615
00:22:10,880 --> 00:22:13,919
happens is that github has a public api

616
00:22:13,919 --> 00:22:17,039
and this api updates regularly

617
00:22:17,039 --> 00:22:19,360
so basically what happens on github is

618
00:22:19,360 --> 00:22:22,320
not just public it's broadcast

619
00:22:22,320 --> 00:22:24,480
so if you leak something it's being

620
00:22:24,480 --> 00:22:27,360
broadcast to anyone and anyone can who

621
00:22:27,360 --> 00:22:30,480
monitors the github api so that is why

622
00:22:30,480 --> 00:22:32,080
i'm fairly confident at the end of this

623
00:22:32,080 --> 00:22:33,760
talk i'll be able to show some people

624
00:22:33,760 --> 00:22:34,799
that have tried to exploit the

625
00:22:34,799 --> 00:22:36,799
credentials that i've lost but i'm not

626
00:22:36,799 --> 00:22:38,960
alone six million credentials were

627
00:22:38,960 --> 00:22:41,039
pushed to github last year so a

628
00:22:41,039 --> 00:22:43,280
mind-blowing number so what type of

629
00:22:43,280 --> 00:22:45,200
secrets were leaked well the main

630
00:22:45,200 --> 00:22:47,520
category is what we call other so other

631
00:22:47,520 --> 00:22:49,919
is basically secrets that we uh that

632
00:22:49,919 --> 00:22:51,440
could could mean

633
00:22:51,440 --> 00:22:52,880
could be access to lots of different

634
00:22:52,880 --> 00:22:54,960
things they could be secrets being used

635
00:22:54,960 --> 00:22:56,799
for internal services they could be

636
00:22:56,799 --> 00:22:58,159
secrets

637
00:22:58,159 --> 00:23:00,000
it could be kind of private keys or

638
00:23:00,000 --> 00:23:02,240
certificates that we don't really know

639
00:23:02,240 --> 00:23:04,000
exactly what we do what they do but we

640
00:23:04,000 --> 00:23:05,440
know that they're secrets

641
00:23:05,440 --> 00:23:07,120
the second biggest category is data

642
00:23:07,120 --> 00:23:09,600
storage so your database access

643
00:23:09,600 --> 00:23:12,080
your amazon s3 buckets for example all

644
00:23:12,080 --> 00:23:13,919
of these are highly highly sensitive

645
00:23:13,919 --> 00:23:15,679
they can contain highly sensitive

646
00:23:15,679 --> 00:23:17,600
information we shouldn't be hard coding

647
00:23:17,600 --> 00:23:19,840
them into our source code we should be

648
00:23:19,840 --> 00:23:21,280
handling them correctly putting them as

649
00:23:21,280 --> 00:23:23,200
environment variables

650
00:23:23,200 --> 00:23:26,240
but 21 of the keys that we found

651
00:23:26,240 --> 00:23:28,159
you know over a million keys that we

652
00:23:28,159 --> 00:23:30,400
found were actually giving access to

653
00:23:30,400 --> 00:23:33,440
databases and data storage 15

654
00:23:33,440 --> 00:23:35,360
so just under a million were actually to

655
00:23:35,360 --> 00:23:37,039
cloud providers you don't need to be

656
00:23:37,039 --> 00:23:39,360
very imaginative to know

657
00:23:39,360 --> 00:23:40,880
what you can do with a cloud provider

658
00:23:40,880 --> 00:23:43,039
key you know you can set up bitcoin

659
00:23:43,039 --> 00:23:44,480
mining if you're not very imaginative

660
00:23:44,480 --> 00:23:46,799
you can launch ddos attacks you can

661
00:23:46,799 --> 00:23:48,720
divert computing power or if you really

662
00:23:48,720 --> 00:23:50,159
don't like someone you can just rack up

663
00:23:50,159 --> 00:23:52,559
a huge bill by stringing together large

664
00:23:52,559 --> 00:23:55,200
compute large computers uh and running

665
00:23:55,200 --> 00:23:58,799
up kind of unimaginable numbers so 15

666
00:23:58,799 --> 00:24:01,440
over well nearly a million keys last

667
00:24:01,440 --> 00:24:02,960
year that we found were for cloud

668
00:24:02,960 --> 00:24:04,960
providers then we also have kind of

669
00:24:04,960 --> 00:24:06,799
development tools and messaging systems

670
00:24:06,799 --> 00:24:08,559
and version control platforms and some

671
00:24:08,559 --> 00:24:10,400
other categories too you know my

672
00:24:10,400 --> 00:24:12,720
favorite is messaging systems because

673
00:24:12,720 --> 00:24:14,799
they're not very protected but it's very

674
00:24:14,799 --> 00:24:16,559
easy to launch an internal phishing

675
00:24:16,559 --> 00:24:18,480
campaign if you have keys that will give

676
00:24:18,480 --> 00:24:20,720
you access to the internal

677
00:24:20,720 --> 00:24:23,120
messaging systems

678
00:24:23,120 --> 00:24:26,480
we found over 500 github tokens

679
00:24:26,480 --> 00:24:28,480
in commit messages

680
00:24:28,480 --> 00:24:30,159
so if you don't understand this if

681
00:24:30,159 --> 00:24:31,440
you're not very familiar with git this

682
00:24:31,440 --> 00:24:32,880
is basically putting your password to

683
00:24:32,880 --> 00:24:34,799
your email in the subject line right so

684
00:24:34,799 --> 00:24:36,000
you're adding a message to say what

685
00:24:36,000 --> 00:24:37,279
you've changed and you're putting in

686
00:24:37,279 --> 00:24:39,679
your your your github token so why is

687
00:24:39,679 --> 00:24:41,440
this significant well it just shows that

688
00:24:41,440 --> 00:24:43,520
there's still lots of ambiguity and

689
00:24:43,520 --> 00:24:45,679
misunderstandings about how git works

690
00:24:45,679 --> 00:24:47,120
people are obviously thinking that this

691
00:24:47,120 --> 00:24:49,520
is how you authenticate themselves so

692
00:24:49,520 --> 00:24:51,039
these people could have access to lots

693
00:24:51,039 --> 00:24:52,720
of different information but they're

694
00:24:52,720 --> 00:24:55,120
prone for big configuration areas or

695
00:24:55,120 --> 00:24:57,679
even doing silly things like adding uh

696
00:24:57,679 --> 00:24:59,840
message adding secrets into commit

697
00:24:59,840 --> 00:25:01,520
messages

698
00:25:01,520 --> 00:25:03,360
and just very quickly if we look at kind

699
00:25:03,360 --> 00:25:05,360
of some of the cloud providers here we

700
00:25:05,360 --> 00:25:07,679
can actually see that the ones with the

701
00:25:07,679 --> 00:25:09,279
one secret that's on the right trend and

702
00:25:09,279 --> 00:25:11,760
that's down is aws keys we're finding

703
00:25:11,760 --> 00:25:14,080
less aws keys at the end of the year

704
00:25:14,080 --> 00:25:16,159
then it starts so that's great and this

705
00:25:16,159 --> 00:25:17,919
proves that we can actually make a

706
00:25:17,919 --> 00:25:20,000
difference because aws has done a great

707
00:25:20,000 --> 00:25:22,000
job in raising awareness around the fact

708
00:25:22,000 --> 00:25:23,840
that their keys are actually sensitive

709
00:25:23,840 --> 00:25:26,559
and shouldn't be made public

710
00:25:26,559 --> 00:25:28,799
but at the same time we also have new

711
00:25:28,799 --> 00:25:30,559
providers like planet scale and super

712
00:25:30,559 --> 00:25:32,640
bass that have come onto the market and

713
00:25:32,640 --> 00:25:35,440
already uh even just a couple of months

714
00:25:35,440 --> 00:25:36,799
after planet scale was kind of

715
00:25:36,799 --> 00:25:38,880
officially launched we started finding

716
00:25:38,880 --> 00:25:41,360
secrets to these providers uh

717
00:25:41,360 --> 00:25:43,120
on public github so proofs that we need

718
00:25:43,120 --> 00:25:44,720
to be really far ahead of the curve

719
00:25:44,720 --> 00:25:46,320
you're going to try and prevent leaked

720
00:25:46,320 --> 00:25:49,120
secrets um from kind of ending up in

721
00:25:49,120 --> 00:25:51,279
public spaces

722
00:25:51,279 --> 00:25:52,960
now the other area that we find secrets

723
00:25:52,960 --> 00:25:55,039
that we talked about is inside public

724
00:25:55,039 --> 00:25:57,760
docker images so this is docker hub so

725
00:25:57,760 --> 00:25:59,760
dockerhub.com is the largest place that

726
00:25:59,760 --> 00:26:02,240
you can store your docker images and

727
00:26:02,240 --> 00:26:03,200
there's

728
00:26:03,200 --> 00:26:04,960
over 8 million

729
00:26:04,960 --> 00:26:06,320
docker images that are currently

730
00:26:06,320 --> 00:26:08,400
available on docker hub and this was

731
00:26:08,400 --> 00:26:10,159
actually where you would download the

732
00:26:10,159 --> 00:26:12,000
code called docker image

733
00:26:12,000 --> 00:26:14,320
so we scanned uh

734
00:26:14,320 --> 00:26:16,559
ten thousand docker images to find out

735
00:26:16,559 --> 00:26:18,400
how many of them had secrets and we

736
00:26:18,400 --> 00:26:20,799
found that nearly five percent four

737
00:26:20,799 --> 00:26:22,159
point six percent if you want to be

738
00:26:22,159 --> 00:26:25,279
productive uh contained at least one

739
00:26:25,279 --> 00:26:28,480
secret one hard-coded plain text secret

740
00:26:28,480 --> 00:26:30,480
so we found out of the ten thousand that

741
00:26:30,480 --> 00:26:32,320
we found we found that we found a total

742
00:26:32,320 --> 00:26:34,480
of four thousand secrets one thousand

743
00:26:34,480 --> 00:26:37,200
two hundred of them were unique so there

744
00:26:37,200 --> 00:26:38,960
was a there was quite a few secrets

745
00:26:38,960 --> 00:26:40,880
being repeated inside those docker

746
00:26:40,880 --> 00:26:43,360
images but again you know it can be very

747
00:26:43,360 --> 00:26:46,559
confusing uh of kind of how to build uh

748
00:26:46,559 --> 00:26:48,559
docker images we see a lot that people

749
00:26:48,559 --> 00:26:50,559
add in a secret let's say to a package

750
00:26:50,559 --> 00:26:52,640
manager so they can access it in their

751
00:26:52,640 --> 00:26:55,840
docker file then they remove it later

752
00:26:55,840 --> 00:26:57,360
because they know that they shouldn't be

753
00:26:57,360 --> 00:26:59,520
there but actually you know like git you

754
00:26:59,520 --> 00:27:01,360
can go back in history same with docker

755
00:27:01,360 --> 00:27:03,039
you can go back in history when you

756
00:27:03,039 --> 00:27:05,200
build something it's built in layers if

757
00:27:05,200 --> 00:27:07,200
you add something in the first layer and

758
00:27:07,200 --> 00:27:09,279
then put layers on top of it that secret

759
00:27:09,279 --> 00:27:11,760
still exists so we found a huge amount

760
00:27:11,760 --> 00:27:15,360
of secrets inside docker images

761
00:27:15,360 --> 00:27:16,880
and the last area that i want to talk

762
00:27:16,880 --> 00:27:19,279
about before we kind of go back to the

763
00:27:19,279 --> 00:27:20,399
experiment

764
00:27:20,399 --> 00:27:21,760
is

765
00:27:21,760 --> 00:27:24,480
how frequently are secrets in private

766
00:27:24,480 --> 00:27:26,880
repositories so people have this false

767
00:27:26,880 --> 00:27:28,320
sense of security around private

768
00:27:28,320 --> 00:27:30,480
repositories that because it's behind

769
00:27:30,480 --> 00:27:32,480
some kind of authentication that it's

770
00:27:32,480 --> 00:27:34,240
secure but we just proved that source

771
00:27:34,240 --> 00:27:36,640
code is very leaky lots of examples of

772
00:27:36,640 --> 00:27:39,760
involuntarily open sourced source code

773
00:27:39,760 --> 00:27:43,200
so how much do we typically find inside

774
00:27:43,200 --> 00:27:45,840
private uh private source code so at get

775
00:27:45,840 --> 00:27:47,360
guardian we took the average of our

776
00:27:47,360 --> 00:27:50,000
larger customers so our larger customers

777
00:27:50,000 --> 00:27:51,840
the average of them was a company with

778
00:27:51,840 --> 00:27:56,640
about 400 developers so 400 engineers

779
00:27:56,640 --> 00:27:58,720
so a fairly sizable company now in a

780
00:27:58,720 --> 00:28:00,720
company this side we found around about

781
00:28:00,720 --> 00:28:03,120
1 000 unique secrets

782
00:28:03,120 --> 00:28:05,120
so that's huge so we look at twitch or

783
00:28:05,120 --> 00:28:06,399
twitch is a whole lot larger than that

784
00:28:06,399 --> 00:28:08,399
we found six thousand it's pretty much

785
00:28:08,399 --> 00:28:11,520
on par so it's a huge problem and you

786
00:28:11,520 --> 00:28:13,520
know unfortunately attackers know this

787
00:28:13,520 --> 00:28:14,399
too

788
00:28:14,399 --> 00:28:16,600
now each one of those

789
00:28:16,600 --> 00:28:19,679
1050 secrets were actually repeated on

790
00:28:19,679 --> 00:28:21,520
average 13 times throughout the git

791
00:28:21,520 --> 00:28:23,919
history out on different branches and in

792
00:28:23,919 --> 00:28:25,200
different areas

793
00:28:25,200 --> 00:28:26,880
so why is that significant well every

794
00:28:26,880 --> 00:28:28,480
time you find a secret you have to

795
00:28:28,480 --> 00:28:30,080
investigate it it doesn't matter if it's

796
00:28:30,080 --> 00:28:31,760
the same secret because you're probably

797
00:28:31,760 --> 00:28:33,840
not aware of that so if there's 13 if

798
00:28:33,840 --> 00:28:35,600
there's 13 of the same secret it's going

799
00:28:35,600 --> 00:28:38,000
to have to be investigated 13 times now

800
00:28:38,000 --> 00:28:39,679
in a couple of 400 developers there's

801
00:28:39,679 --> 00:28:41,919
typically four apsec engineers that

802
00:28:41,919 --> 00:28:43,440
means that each one of those attic

803
00:28:43,440 --> 00:28:45,919
engineers has to investigate

804
00:28:45,919 --> 00:28:48,799
kind of communicate with the developer

805
00:28:48,799 --> 00:28:52,640
rotate republish their keys

806
00:28:52,640 --> 00:28:53,919
3

807
00:28:53,919 --> 00:28:56,720
400 times a year

808
00:28:56,720 --> 00:28:59,039
you know that's huge amounts if you did

809
00:28:59,039 --> 00:29:00,880
that all day every day and nothing else

810
00:29:00,880 --> 00:29:02,320
and didn't work holidays and weekends

811
00:29:02,320 --> 00:29:03,360
you still wouldn't be able to get

812
00:29:03,360 --> 00:29:05,520
through it so this is how big of a

813
00:29:05,520 --> 00:29:07,440
problem that we have

814
00:29:07,440 --> 00:29:10,240
and unlike us attackers have time on

815
00:29:10,240 --> 00:29:11,919
their side they can they can sift

816
00:29:11,919 --> 00:29:13,600
through that amount of information to

817
00:29:13,600 --> 00:29:15,919
find that gem but we're under pressure

818
00:29:15,919 --> 00:29:17,520
so this illustrates the importance that

819
00:29:17,520 --> 00:29:19,520
not only do we need to be aware of this

820
00:29:19,520 --> 00:29:21,200
problem but we also need education and

821
00:29:21,200 --> 00:29:23,919
tools to be able to prevent it

822
00:29:23,919 --> 00:29:26,399
so quickly you know why does this happen

823
00:29:26,399 --> 00:29:28,559
well it happens for a number of reasons

824
00:29:28,559 --> 00:29:30,000
we've talked about a few of them

825
00:29:30,000 --> 00:29:32,000
misconfigured git repositories secrets

826
00:29:32,000 --> 00:29:33,760
buried in the history you know we have

827
00:29:33,760 --> 00:29:35,200
to understand that just because it's not

828
00:29:35,200 --> 00:29:37,279
in our current version doesn't mean we

829
00:29:37,279 --> 00:29:39,120
can't find it it could be on an obscure

830
00:29:39,120 --> 00:29:41,440
branch secrets exposed in logs or

831
00:29:41,440 --> 00:29:43,360
generated files

832
00:29:43,360 --> 00:29:46,080
including sensitive files like env in

833
00:29:46,080 --> 00:29:48,640
our repositories and also we're just

834
00:29:48,640 --> 00:29:50,559
seeing a lot of people actively managing

835
00:29:50,559 --> 00:29:52,559
secrets and get repositories not

836
00:29:52,559 --> 00:29:54,880
understanding how big of a problem that

837
00:29:54,880 --> 00:29:55,840
is

838
00:29:55,840 --> 00:29:58,320
so let's have a look at our experiment

839
00:29:58,320 --> 00:30:00,880
so about 20 minutes ago we linked a

840
00:30:00,880 --> 00:30:03,279
credential into github

841
00:30:03,279 --> 00:30:05,440
public github github.com

842
00:30:05,440 --> 00:30:06,320
this

843
00:30:06,320 --> 00:30:09,600
is how many times people have tried to

844
00:30:09,600 --> 00:30:12,159
exploit it since i've been talking now i

845
00:30:12,159 --> 00:30:14,240
do want to clarify a couple of things a

846
00:30:14,240 --> 00:30:16,000
lot of these ip addresses will be the

847
00:30:16,000 --> 00:30:18,320
same they'll be initially making a ping

848
00:30:18,320 --> 00:30:20,399
to try and find uh

849
00:30:20,399 --> 00:30:23,440
information so if we open up one of them

850
00:30:23,440 --> 00:30:26,080
we can see that this is from germany

851
00:30:26,080 --> 00:30:29,039
um and they're trying to find the

852
00:30:29,039 --> 00:30:30,880
account attributes

853
00:30:30,880 --> 00:30:32,480
well other people will probably be

854
00:30:32,480 --> 00:30:34,880
looking at different calls so here

855
00:30:34,880 --> 00:30:35,840
they're trying to get the caller

856
00:30:35,840 --> 00:30:37,919
identity so they're maybe initially

857
00:30:37,919 --> 00:30:39,919
trying to find cooler identities and

858
00:30:39,919 --> 00:30:42,960
then get more information as they go

859
00:30:42,960 --> 00:30:43,679
but

860
00:30:43,679 --> 00:30:45,840
a lot of these will be unique i see at

861
00:30:45,840 --> 00:30:48,640
least three countries here so

862
00:30:48,640 --> 00:30:51,039
in just 20 minutes

863
00:30:51,039 --> 00:30:52,559
a whole bunch of

864
00:30:52,559 --> 00:30:54,720
bots really have tried to exploit this

865
00:30:54,720 --> 00:30:56,799
secret so this just goes to show that if

866
00:30:56,799 --> 00:30:59,760
you leak a secret even if you catch it

867
00:30:59,760 --> 00:31:01,120
quickly

868
00:31:01,120 --> 00:31:02,799
even if you're aware of it and go back

869
00:31:02,799 --> 00:31:05,360
and remediate it people still probably

870
00:31:05,360 --> 00:31:06,799
have found it

871
00:31:06,799 --> 00:31:08,480
now i'm running out of time i'm getting

872
00:31:08,480 --> 00:31:10,159
to the end but i just want to make a

873
00:31:10,159 --> 00:31:12,000
kind of a quick word before i close up

874
00:31:12,000 --> 00:31:12,880
on

875
00:31:12,880 --> 00:31:15,679
how to prevent this well we need to use

876
00:31:15,679 --> 00:31:17,600
secrets management systems that was

877
00:31:17,600 --> 00:31:18,640
something

878
00:31:18,640 --> 00:31:20,559
that i think lewis brought up as well

879
00:31:20,559 --> 00:31:22,320
when talking about kubernetes we need to

880
00:31:22,320 --> 00:31:24,240
have good secrets management

881
00:31:24,240 --> 00:31:26,480
to be able to prevent this

882
00:31:26,480 --> 00:31:28,559
there's big tools like vaults there's

883
00:31:28,559 --> 00:31:30,480
key management systems that you can use

884
00:31:30,480 --> 00:31:32,559
if you're using you know cloud services

885
00:31:32,559 --> 00:31:33,840
understand what tool is going to be

886
00:31:33,840 --> 00:31:35,919
right to use and here's the key make

887
00:31:35,919 --> 00:31:38,399
sure it's usable so you actually use it

888
00:31:38,399 --> 00:31:39,919
never store secrets inside your git

889
00:31:39,919 --> 00:31:42,080
repositories i know it's tempting i know

890
00:31:42,080 --> 00:31:43,760
because it's a great way to share

891
00:31:43,760 --> 00:31:45,360
important information with everyone but

892
00:31:45,360 --> 00:31:47,519
we never should do it we have to make

893
00:31:47,519 --> 00:31:48,720
sure that we're using environment

894
00:31:48,720 --> 00:31:50,640
variables or other methods that we're

895
00:31:50,640 --> 00:31:53,200
not hard coded use short-lived

896
00:31:53,200 --> 00:31:55,200
credentials where possible or even

897
00:31:55,200 --> 00:31:56,799
better dynamic credentials so that

898
00:31:56,799 --> 00:31:59,679
they're being generated just in time

899
00:31:59,679 --> 00:32:01,440
so this means that if a credential is

900
00:32:01,440 --> 00:32:02,559
exposed

901
00:32:02,559 --> 00:32:04,320
you've set up a policy or you've set up

902
00:32:04,320 --> 00:32:06,399
a routine of rotating them so that it

903
00:32:06,399 --> 00:32:09,039
will not be a threat anymore restrict

904
00:32:09,039 --> 00:32:11,360
access the last one which or the fourth

905
00:32:11,360 --> 00:32:13,679
one restrict access to certain areas so

906
00:32:13,679 --> 00:32:15,760
that even if a credential is leaked that

907
00:32:15,760 --> 00:32:17,760
means that not anyone can use it they

908
00:32:17,760 --> 00:32:20,080
have to be coming from a select ip or a

909
00:32:20,080 --> 00:32:21,840
select area

910
00:32:21,840 --> 00:32:23,360
and then finally we need to add

911
00:32:23,360 --> 00:32:25,039
automated secrets detection so there's

912
00:32:25,039 --> 00:32:27,039
lots of different ways to detect secrets

913
00:32:27,039 --> 00:32:30,080
get guardian is who i work for we have

914
00:32:30,080 --> 00:32:31,679
automated sequence detection but we're

915
00:32:31,679 --> 00:32:33,440
not the only ones there's open source

916
00:32:33,440 --> 00:32:35,760
projects out there too too of course i

917
00:32:35,760 --> 00:32:37,440
think guardian's the best because i'm

918
00:32:37,440 --> 00:32:38,720
biased

919
00:32:38,720 --> 00:32:40,480
but the important thing is we need

920
00:32:40,480 --> 00:32:42,399
visibility so whatever tool is going to

921
00:32:42,399 --> 00:32:44,320
work for you then that should be the

922
00:32:44,320 --> 00:32:45,279
tools

923
00:32:45,279 --> 00:32:47,360
that we're using

924
00:32:47,360 --> 00:32:48,960
so that's it

925
00:32:48,960 --> 00:32:50,720
from me

926
00:32:50,720 --> 00:32:51,840
if you want to learn more about the

927
00:32:51,840 --> 00:32:54,159
research that i presented here's a

928
00:32:54,159 --> 00:32:56,080
random qr code i promise it won't do

929
00:32:56,080 --> 00:32:57,840
anything malicious

930
00:32:57,840 --> 00:32:58,640
but

931
00:32:58,640 --> 00:33:00,000
this will take you to a report called

932
00:33:00,000 --> 00:33:02,640
the state of secret sprawl report uh it

933
00:33:02,640 --> 00:33:04,559
will provide more information about what

934
00:33:04,559 --> 00:33:05,840
i talked about so if you want to learn

935
00:33:05,840 --> 00:33:08,720
more you can find out about that and i

936
00:33:08,720 --> 00:33:10,799
have it linked down below or you can

937
00:33:10,799 --> 00:33:13,440
follow me on my social media handles but

938
00:33:13,440 --> 00:33:15,200
i would like to to thank everyone for

939
00:33:15,200 --> 00:33:16,640
for putting this together and thanks for

940
00:33:16,640 --> 00:33:18,240
paying attention uh it was really

941
00:33:18,240 --> 00:33:20,399
fantastic to be able to present to to

942
00:33:20,399 --> 00:33:21,760
all of you even though i can't see your

943
00:33:21,760 --> 00:33:23,840
faces uh it's still great to have the

944
00:33:23,840 --> 00:33:25,200
opportunity to be able to talk about

945
00:33:25,200 --> 00:33:27,760
this to everyone so thank you

946
00:33:27,760 --> 00:33:30,159
that was fantastic mackenzie and i'm

947
00:33:30,159 --> 00:33:32,159
sorry but based on past sessions i don't

948
00:33:32,159 --> 00:33:33,519
think i can really trust you to scan

949
00:33:33,519 --> 00:33:36,960
that qr code and believe that it isn't

950
00:33:36,960 --> 00:33:38,640
you know what i don't believe you but

951
00:33:38,640 --> 00:33:40,880
you know the url is a little bit long i

952
00:33:40,880 --> 00:33:41,840
think

953
00:33:41,840 --> 00:33:44,159
i've always i i'm always amazed that

954
00:33:44,159 --> 00:33:46,159
even in like security conferences people

955
00:33:46,159 --> 00:33:48,000
will still scan it so you know i'm gonna

956
00:33:48,000 --> 00:33:49,440
still put it up there to see what

957
00:33:49,440 --> 00:33:50,320
happens

958
00:33:50,320 --> 00:33:52,080
it is convenient but that's that's

959
00:33:52,080 --> 00:33:53,679
sometimes how things go right when it's

960
00:33:53,679 --> 00:33:55,679
convenient that's how you get caught

961
00:33:55,679 --> 00:33:58,480
exactly exactly yeah so i had questions

962
00:33:58,480 --> 00:34:00,960
coming up but you were always answering

963
00:34:00,960 --> 00:34:02,799
them in your presentation so what

964
00:34:02,799 --> 00:34:05,039
william props to you on that i guess the

965
00:34:05,039 --> 00:34:07,679
only one i would ask that maybe i don't

966
00:34:07,679 --> 00:34:09,280
know if this is really a question to be

967
00:34:09,280 --> 00:34:10,560
asking because it's not necessarily

968
00:34:10,560 --> 00:34:11,520
something that's going to solve the

969
00:34:11,520 --> 00:34:12,960
problem but like are there any

970
00:34:12,960 --> 00:34:15,280
consequences for the folks that are

971
00:34:15,280 --> 00:34:17,440
doing malicious things when they're

972
00:34:17,440 --> 00:34:18,960
exfiltrating the they're getting these

973
00:34:18,960 --> 00:34:20,560
keys and that kind of thing is there is

974
00:34:20,560 --> 00:34:22,159
there something happening

975
00:34:22,159 --> 00:34:24,320
in the world right now to like

976
00:34:24,320 --> 00:34:26,320
cause maybe deterrence for people from

977
00:34:26,320 --> 00:34:28,079
doing something like this

978
00:34:28,079 --> 00:34:30,079
do you know there's not really that many

979
00:34:30,079 --> 00:34:32,560
deterrents for for for doing this

980
00:34:32,560 --> 00:34:34,800
because keys are so widely used by

981
00:34:34,800 --> 00:34:37,199
different people it's um you know it's

982
00:34:37,199 --> 00:34:39,679
it's hard to even know who the attacker

983
00:34:39,679 --> 00:34:41,440
is so we can find out their ip address

984
00:34:41,440 --> 00:34:43,199
but that's probably not their computer

985
00:34:43,199 --> 00:34:44,399
that's probably a service that they're

986
00:34:44,399 --> 00:34:46,000
using it's probably confisca it's

987
00:34:46,000 --> 00:34:47,918
probably observated a little bit so it's

988
00:34:47,918 --> 00:34:49,679
hard to track down

989
00:34:49,679 --> 00:34:51,839
um so you know

990
00:34:51,839 --> 00:34:53,359
it's

991
00:34:53,359 --> 00:34:55,839
the onus unfortunately in security is on

992
00:34:55,839 --> 00:34:56,800
us

993
00:34:56,800 --> 00:34:58,800
and not the bad guys and uh hopefully

994
00:34:58,800 --> 00:35:00,400
there will be a change in that but you

995
00:35:00,400 --> 00:35:02,079
know to talk about how ridiculous

996
00:35:02,079 --> 00:35:03,760
actually you know this problem is is

997
00:35:03,760 --> 00:35:06,160
that there was a developer working for

998
00:35:06,160 --> 00:35:08,720
dji that lead to credential

999
00:35:08,720 --> 00:35:10,880
that developer right it was

1000
00:35:10,880 --> 00:35:12,800
an honest mistake and it happens to

1001
00:35:12,800 --> 00:35:14,640
everyone and most companies would never

1002
00:35:14,640 --> 00:35:16,320
do this most companies understand that

1003
00:35:16,320 --> 00:35:18,240
this happens but dji had some

1004
00:35:18,240 --> 00:35:20,000
reputational damage because of that and

1005
00:35:20,000 --> 00:35:22,079
then they then prosecuted their employee

1006
00:35:22,079 --> 00:35:24,000
that developer for leaking a secret

1007
00:35:24,000 --> 00:35:25,359
which is terrible

1008
00:35:25,359 --> 00:35:27,280
so you know we need to change the game a

1009
00:35:27,280 --> 00:35:30,000
bit uh we need to be able to have more

1010
00:35:30,000 --> 00:35:30,880
more

1011
00:35:30,880 --> 00:35:33,119
uh kind of consequences for that because

1012
00:35:33,119 --> 00:35:34,800
at the moment we look we're focusing

1013
00:35:34,800 --> 00:35:36,720
totally on on the wrong things we're

1014
00:35:36,720 --> 00:35:39,200
humans we're gonna make errors it's just

1015
00:35:39,200 --> 00:35:40,320
how it is

1016
00:35:40,320 --> 00:35:42,240
yeah yeah absolutely

1017
00:35:42,240 --> 00:35:45,119
eric anything to add oh my it's just

1018
00:35:45,119 --> 00:35:46,720
like a fire hose of information it was

1019
00:35:46,720 --> 00:35:48,320
awesome um

1020
00:35:48,320 --> 00:35:50,400
i was curious uh if maybe this is in

1021
00:35:50,400 --> 00:35:52,400
your report or or you have an opinion

1022
00:35:52,400 --> 00:35:53,680
what about things like sealed secrets

1023
00:35:53,680 --> 00:35:56,160
where you're encrypting your

1024
00:35:56,160 --> 00:35:58,160
secret data in git and then you're

1025
00:35:58,160 --> 00:36:00,160
having to decrypt it after the fact any

1026
00:36:00,160 --> 00:36:03,119
uh experience with that any any thoughts

1027
00:36:03,119 --> 00:36:04,079
so

1028
00:36:04,079 --> 00:36:05,680
you know like there's there's the

1029
00:36:05,680 --> 00:36:07,280
security line that you should take and

1030
00:36:07,280 --> 00:36:08,560
the security line that you should take

1031
00:36:08,560 --> 00:36:10,160
is that you should you shouldn't do that

1032
00:36:10,160 --> 00:36:12,880
because that sealed file so you're

1033
00:36:12,880 --> 00:36:14,240
encrypting it it's still going to sprawl

1034
00:36:14,240 --> 00:36:16,480
everywhere and it's going to create risk

1035
00:36:16,480 --> 00:36:18,079
the security line is that you should use

1036
00:36:18,079 --> 00:36:19,599
something heavy and complicated like

1037
00:36:19,599 --> 00:36:21,119
vault and you should if you're a large

1038
00:36:21,119 --> 00:36:23,440
company i have a different opinion so i

1039
00:36:23,440 --> 00:36:25,520
have an opinion that we need to be using

1040
00:36:25,520 --> 00:36:27,119
secrets management but we need to use

1041
00:36:27,119 --> 00:36:28,800
appropriate secrets management for where

1042
00:36:28,800 --> 00:36:31,040
we where we are and the risk that we

1043
00:36:31,040 --> 00:36:33,920
have so you know if you're a team if

1044
00:36:33,920 --> 00:36:36,000
you're a small team if you're working on

1045
00:36:36,000 --> 00:36:39,280
some some local projects you know i as

1046
00:36:39,280 --> 00:36:41,760
long as it's using good encryption it

1047
00:36:41,760 --> 00:36:43,359
does increase your risk because it

1048
00:36:43,359 --> 00:36:44,640
sprawls

1049
00:36:44,640 --> 00:36:46,720
even though it's encrypted but if we can

1050
00:36:46,720 --> 00:36:48,560
rely on the encryption and we can make

1051
00:36:48,560 --> 00:36:50,880
sure that we don't uh leak those keys

1052
00:36:50,880 --> 00:36:53,200
then it can be a good solution if the

1053
00:36:53,200 --> 00:36:54,480
alternative is that you're just going to

1054
00:36:54,480 --> 00:36:56,320
share the secrets in plain text right

1055
00:36:56,320 --> 00:36:58,400
because secrets management can be so

1056
00:36:58,400 --> 00:37:00,880
heavy so i'm not sub against that if

1057
00:37:00,880 --> 00:37:02,400
it's appropriate for

1058
00:37:02,400 --> 00:37:03,280
your

1059
00:37:03,280 --> 00:37:04,160
you know

1060
00:37:04,160 --> 00:37:06,079
it is appropriate for what you're doing

1061
00:37:06,079 --> 00:37:07,839
if you're a large company you shouldn't

1062
00:37:07,839 --> 00:37:09,839
be doing that because you're a target

1063
00:37:09,839 --> 00:37:12,400
you should be using these heavy great

1064
00:37:12,400 --> 00:37:14,160
software but they're they can be

1065
00:37:14,160 --> 00:37:16,560
expensive they can be hard to set up um

1066
00:37:16,560 --> 00:37:18,560
so yeah i mean i i kind of like i kind

1067
00:37:18,560 --> 00:37:20,880
of i kind of get that and i think that

1068
00:37:20,880 --> 00:37:22,560
because it can be so complicated i mean

1069
00:37:22,560 --> 00:37:25,760
that's infinitely better than uh just

1070
00:37:25,760 --> 00:37:28,560
storing them in plain text and get so if

1071
00:37:28,560 --> 00:37:29,359
that's

1072
00:37:29,359 --> 00:37:30,880
if that's convenient for you if you're

1073
00:37:30,880 --> 00:37:32,720
actually going to use that method then

1074
00:37:32,720 --> 00:37:35,440
sure um that's that's that's a step in

1075
00:37:35,440 --> 00:37:36,880
the right direction and as long as you

1076
00:37:36,880 --> 00:37:38,800
grow with your maturity then i think

1077
00:37:38,800 --> 00:37:41,119
that's a fine first step but the

1078
00:37:41,119 --> 00:37:43,359
official line is no don't do that

1079
00:37:43,359 --> 00:37:45,120
just just just to cover

1080
00:37:45,120 --> 00:37:48,560
[Laughter]

1081
00:37:48,560 --> 00:37:49,680
all right one last question for you

1082
00:37:49,680 --> 00:37:51,119
mckenzie before we let you go and this

1083
00:37:51,119 --> 00:37:54,480
one comes from nicholas over on hoppin

1084
00:37:54,480 --> 00:37:56,880
they ask are there any tools suggested

1085
00:37:56,880 --> 00:37:58,560
for scanning git history and docker

1086
00:37:58,560 --> 00:38:01,599
images to list slash hash all found

1087
00:38:01,599 --> 00:38:02,640
secrets

1088
00:38:02,640 --> 00:38:04,400
to use during remediation and serve

1089
00:38:04,400 --> 00:38:05,760
rotation

1090
00:38:05,760 --> 00:38:08,079
yeah yeah absolutely so i i work for get

1091
00:38:08,079 --> 00:38:09,680
guardians so we're a tool that does that

1092
00:38:09,680 --> 00:38:11,839
we're free for developers or anyone with

1093
00:38:11,839 --> 00:38:14,000
less than 25 developers in their team

1094
00:38:14,000 --> 00:38:16,240
we'll scan your entire history uh you'll

1095
00:38:16,240 --> 00:38:17,920
have a nice dashboard we also have some

1096
00:38:17,920 --> 00:38:20,960
open source tools for it so obviously uh

1097
00:38:20,960 --> 00:38:22,800
that's the that's the tool that i'm that

1098
00:38:22,800 --> 00:38:24,560
i recommend and we can also scan you

1099
00:38:24,560 --> 00:38:26,560
know docker images and all these areas

1100
00:38:26,560 --> 00:38:28,720
so get guardian um

1101
00:38:28,720 --> 00:38:30,640
for sure but i always like to mention

1102
00:38:30,640 --> 00:38:32,960
some some other areas if you if you kind

1103
00:38:32,960 --> 00:38:34,400
of were looking more at open source

1104
00:38:34,400 --> 00:38:35,839
projects there are some great open

1105
00:38:35,839 --> 00:38:39,280
source detection tools out there um you

1106
00:38:39,280 --> 00:38:41,040
know they don't work in that large scale

1107
00:38:41,040 --> 00:38:42,880
enterprise things because they can get

1108
00:38:42,880 --> 00:38:44,880
pretty noisy but if you're just wanting

1109
00:38:44,880 --> 00:38:46,560
to experiment with with sequence

1110
00:38:46,560 --> 00:38:48,640
detection uh get guardians free but

1111
00:38:48,640 --> 00:38:50,560
there's also open source alternatives

1112
00:38:50,560 --> 00:38:53,040
out there um out there as well so if you

1113
00:38:53,040 --> 00:38:54,960
if you do a quick google search uh if

1114
00:38:54,960 --> 00:38:56,720
you look into it you'll find some great

1115
00:38:56,720 --> 00:38:59,200
options and ones that will fit into your

1116
00:38:59,200 --> 00:39:01,920
workflow i'm sure

1117
00:39:01,920 --> 00:39:04,000
excellent thank you for that answer as

1118
00:39:04,000 --> 00:39:05,760
well and thank you for a wonderful

1119
00:39:05,760 --> 00:39:07,119
session mackenzie we're going to let you

1120
00:39:07,119 --> 00:39:08,880
go have a good rest of your day and i

1121
00:39:08,880 --> 00:39:10,720
hope to see you around again soon

1122
00:39:10,720 --> 00:39:12,839
awesome thanks guys it was great to be

1123
00:39:12,839 --> 00:39:14,270
on you

1124
00:39:14,270 --> 00:39:17,750
[Music]

