1
00:00:00,470 --> 00:00:04,000
[Music]

2
00:00:04,000 --> 00:00:06,960
but our next guest ready now um johnny

3
00:00:06,960 --> 00:00:08,639
clifford is the founder and ceo of

4
00:00:08,639 --> 00:00:11,200
stackhawk um following on from from

5
00:00:11,200 --> 00:00:13,200
external threats in uh

6
00:00:13,200 --> 00:00:15,759
lock files and package managers um so

7
00:00:15,759 --> 00:00:18,160
stackhawk is an application security sas

8
00:00:18,160 --> 00:00:20,800
uh startup built to help developers find

9
00:00:20,800 --> 00:00:22,640
and fix security vulnerabilities in

10
00:00:22,640 --> 00:00:24,560
their code so thank you journey floor is

11
00:00:24,560 --> 00:00:25,920
yours

12
00:00:25,920 --> 00:00:28,240
oh thank you so much for having me happy

13
00:00:28,240 --> 00:00:31,720
to be here today

14
00:00:31,840 --> 00:00:35,840
hey grab my notes

15
00:00:36,800 --> 00:00:39,120
awesome thank you so much

16
00:00:39,120 --> 00:00:40,559
um so

17
00:00:40,559 --> 00:00:42,160
as was introduced my name is joni

18
00:00:42,160 --> 00:00:44,719
clippert i am the ceo and founder of

19
00:00:44,719 --> 00:00:46,000
stackhawk

20
00:00:46,000 --> 00:00:47,600
i have been building software for

21
00:00:47,600 --> 00:00:50,079
software developers since i graduated

22
00:00:50,079 --> 00:00:53,520
from my mba program in 2010

23
00:00:53,520 --> 00:00:56,399
and in 2019 i founded stackhawk to bring

24
00:00:56,399 --> 00:00:58,160
application security to the devops

25
00:00:58,160 --> 00:01:00,559
workflow by helping software developers

26
00:01:00,559 --> 00:01:02,480
find and fix security bugs in their code

27
00:01:02,480 --> 00:01:04,559
before they deployed abroad

28
00:01:04,559 --> 00:01:06,560
my co-founders and i saw an incredible

29
00:01:06,560 --> 00:01:09,040
opportunity to re-imagine application

30
00:01:09,040 --> 00:01:10,799
security through a software engineering

31
00:01:10,799 --> 00:01:11,760
lens

32
00:01:11,760 --> 00:01:14,080
so in this talk i'm going to share what

33
00:01:14,080 --> 00:01:16,240
key devops tenants have been sort of

34
00:01:16,240 --> 00:01:17,920
missing so far in the realm of

35
00:01:17,920 --> 00:01:19,520
application security

36
00:01:19,520 --> 00:01:21,759
that have somewhat hindered applica

37
00:01:21,759 --> 00:01:24,240
abstech from shifting left

38
00:01:24,240 --> 00:01:26,240
into the developer workflow and what we

39
00:01:26,240 --> 00:01:28,880
need to do to modernize the practice and

40
00:01:28,880 --> 00:01:32,798
rapidly deliver more secure software

41
00:01:33,360 --> 00:01:37,600
so devops is pervasive and it works and

42
00:01:37,600 --> 00:01:40,000
what i mean by this is that devops has

43
00:01:40,000 --> 00:01:41,759
unlocked the ability for companies to

44
00:01:41,759 --> 00:01:46,479
deliver value to their customers faster

45
00:01:46,479 --> 00:01:48,640
so over time we've seen pretty major

46
00:01:48,640 --> 00:01:52,000
shifts in tooling and processes

47
00:01:52,000 --> 00:01:54,159
that help us do just that and that is

48
00:01:54,159 --> 00:01:56,399
develop software quicker get features

49
00:01:56,399 --> 00:01:58,560
into the hands of our customers faster

50
00:01:58,560 --> 00:02:00,799
so agile you know unlock the ability to

51
00:02:00,799 --> 00:02:02,159
quickly plan

52
00:02:02,159 --> 00:02:03,680
develop and deliver software more

53
00:02:03,680 --> 00:02:06,560
rapidly um virtualization cloud and

54
00:02:06,560 --> 00:02:09,119
infrastructure as code removed that

55
00:02:09,119 --> 00:02:11,200
sysadmin bottleneck

56
00:02:11,200 --> 00:02:12,720
as we really empowered engineers to

57
00:02:12,720 --> 00:02:15,440
deploy and manage their resources

58
00:02:15,440 --> 00:02:17,200
and then we saw massive efficiencies

59
00:02:17,200 --> 00:02:18,720
with automation

60
00:02:18,720 --> 00:02:19,680
throughout the integration and

61
00:02:19,680 --> 00:02:21,920
deployment pipeline and then further

62
00:02:21,920 --> 00:02:24,239
unlocked speed with orienting to very

63
00:02:24,239 --> 00:02:26,400
small releases breaking up the monolith

64
00:02:26,400 --> 00:02:27,840
and investing in microservices

65
00:02:27,840 --> 00:02:30,720
architecture and containerization

66
00:02:30,720 --> 00:02:32,400
and then we really improved our uptime

67
00:02:32,400 --> 00:02:34,080
by creating the ability for software

68
00:02:34,080 --> 00:02:35,760
engineers who wrote the code to then

69
00:02:35,760 --> 00:02:37,920
manage that code in production

70
00:02:37,920 --> 00:02:40,640
so the next sort of most important area

71
00:02:40,640 --> 00:02:43,040
of investment is to empower our

72
00:02:43,040 --> 00:02:44,640
engineering teams when it comes to

73
00:02:44,640 --> 00:02:45,760
appsec

74
00:02:45,760 --> 00:02:47,360
and when we do this we unlock the

75
00:02:47,360 --> 00:02:49,360
ability to not only deliver software

76
00:02:49,360 --> 00:02:51,440
quickly but i'm more secure software

77
00:02:51,440 --> 00:02:53,760
quickly

78
00:02:53,760 --> 00:02:55,280
so whether you're part of a younger

79
00:02:55,280 --> 00:02:57,360
company born with the technical and

80
00:02:57,360 --> 00:02:59,760
cultural tenets of devops or part of a

81
00:02:59,760 --> 00:03:01,519
legacy enterprise that's undergoing

82
00:03:01,519 --> 00:03:03,360
digital transformation

83
00:03:03,360 --> 00:03:05,760
we invest in these principles to quickly

84
00:03:05,760 --> 00:03:08,159
respond to customer needs deliver high

85
00:03:08,159 --> 00:03:09,680
quality software

86
00:03:09,680 --> 00:03:11,519
and ultimately remain competitive as a

87
00:03:11,519 --> 00:03:13,120
business

88
00:03:13,120 --> 00:03:15,200
so why hasn't appsec followed the rest

89
00:03:15,200 --> 00:03:16,239
of sort of the

90
00:03:16,239 --> 00:03:18,800
product and engineering organization in

91
00:03:18,800 --> 00:03:21,680
shifting left

92
00:03:21,680 --> 00:03:23,680
as i was doing research for stackhawk i

93
00:03:23,680 --> 00:03:25,440
wanted to understand

94
00:03:25,440 --> 00:03:27,440
why security hadn't yet made it into the

95
00:03:27,440 --> 00:03:29,360
developer workflow

96
00:03:29,360 --> 00:03:31,840
i interviewed more than 50 cisos and

97
00:03:31,840 --> 00:03:34,560
security professionals ctos vpes across

98
00:03:34,560 --> 00:03:36,159
the entire stack and in a matter of

99
00:03:36,159 --> 00:03:38,080
weeks i found that we both had some

100
00:03:38,080 --> 00:03:39,920
cultural barriers and some technical

101
00:03:39,920 --> 00:03:42,319
barriers to current solutions

102
00:03:42,319 --> 00:03:44,239
as well as some pretty yeah as i

103
00:03:44,239 --> 00:03:47,280
mentioned meaningful cultural barriers

104
00:03:47,280 --> 00:03:49,360
so the most glaring thing that stood out

105
00:03:49,360 --> 00:03:50,319
to me

106
00:03:50,319 --> 00:03:52,400
was that the relationship between

107
00:03:52,400 --> 00:03:54,400
security and engineering was pretty

108
00:03:54,400 --> 00:03:56,080
deeply straight

109
00:03:56,080 --> 00:03:58,799
it wasn't too dissimilar from early days

110
00:03:58,799 --> 00:04:01,599
of sort of your traditional itops versus

111
00:04:01,599 --> 00:04:02,480
dev

112
00:04:02,480 --> 00:04:05,360
and it was maybe a little worse honestly

113
00:04:05,360 --> 00:04:06,239
um

114
00:04:06,239 --> 00:04:08,799
these teams have very different kpis and

115
00:04:08,799 --> 00:04:10,560
operational objectives

116
00:04:10,560 --> 00:04:13,280
so whereas your engineering teams and

117
00:04:13,280 --> 00:04:15,920
development teams care about focusing on

118
00:04:15,920 --> 00:04:17,600
business objectives

119
00:04:17,600 --> 00:04:19,600
security teams are aligned to reducing

120
00:04:19,600 --> 00:04:21,040
risk

121
00:04:21,040 --> 00:04:23,199
oftentimes in a way that can come across

122
00:04:23,199 --> 00:04:24,880
to the engineering team as at the

123
00:04:24,880 --> 00:04:27,600
expense of the business objective

124
00:04:27,600 --> 00:04:29,120
it fosters some kind of interesting

125
00:04:29,120 --> 00:04:30,800
cultural issues

126
00:04:30,800 --> 00:04:33,120
so you'd hear a lot of kind of lack of

127
00:04:33,120 --> 00:04:35,840
trust and empathy things like

128
00:04:35,840 --> 00:04:37,440
you talk to security folks about

129
00:04:37,440 --> 00:04:39,040
engineering being more involved in

130
00:04:39,040 --> 00:04:41,440
appsec and i'd hear oh you can't get

131
00:04:41,440 --> 00:04:42,880
software engineers to care about

132
00:04:42,880 --> 00:04:47,280
security to which i totally call bs

133
00:04:47,280 --> 00:04:49,520
from engineering i'd hear things

134
00:04:49,520 --> 00:04:51,759
um like the security department being

135
00:04:51,759 --> 00:04:53,919
the department of no or difficult to

136
00:04:53,919 --> 00:04:55,199
work with

137
00:04:55,199 --> 00:04:57,280
the next is a really important tenet of

138
00:04:57,280 --> 00:04:59,040
devops which is transparency and

139
00:04:59,040 --> 00:05:00,400
observability

140
00:05:00,400 --> 00:05:02,240
and that was something that was missing

141
00:05:02,240 --> 00:05:04,400
in the security discipline today in a

142
00:05:04,400 --> 00:05:06,240
lot of the tooling decisions that are

143
00:05:06,240 --> 00:05:07,120
made

144
00:05:07,120 --> 00:05:09,440
so developers commonly

145
00:05:09,440 --> 00:05:12,080
don't operate in security software this

146
00:05:12,080 --> 00:05:14,080
is changing which is good

147
00:05:14,080 --> 00:05:15,759
um there's a little trust that

148
00:05:15,759 --> 00:05:18,000
developers should be able to see or

149
00:05:18,000 --> 00:05:20,560
action on issues unless a security

150
00:05:20,560 --> 00:05:22,400
person tells them to

151
00:05:22,400 --> 00:05:24,880
which is really inefficient since the

152
00:05:24,880 --> 00:05:27,520
engineer is responsible for fixing the

153
00:05:27,520 --> 00:05:29,120
issue anyway

154
00:05:29,120 --> 00:05:31,120
and then lastly is a topic of

155
00:05:31,120 --> 00:05:32,560
empowerment

156
00:05:32,560 --> 00:05:34,639
so my co-founder scott gerlock was

157
00:05:34,639 --> 00:05:37,360
formerly the cisso of sendgrid

158
00:05:37,360 --> 00:05:39,600
and he would talk about how we want

159
00:05:39,600 --> 00:05:41,680
developers to care about security but we

160
00:05:41,680 --> 00:05:43,759
don't always trust them to take a first

161
00:05:43,759 --> 00:05:46,000
pass at assessment and resolution of

162
00:05:46,000 --> 00:05:47,199
issues

163
00:05:47,199 --> 00:05:49,360
so he comments on this tendency for

164
00:05:49,360 --> 00:05:52,479
security teams to buy appsx software

165
00:05:52,479 --> 00:05:54,080
and then lock it down so tight with

166
00:05:54,080 --> 00:05:55,360
approval gates everywhere it's

167
00:05:55,360 --> 00:05:59,280
impossible for software engineers to use

168
00:05:59,280 --> 00:06:00,160
and then

169
00:06:00,160 --> 00:06:02,720
if you set aside the cultural things

170
00:06:02,720 --> 00:06:05,199
there are a lot of technical challenges

171
00:06:05,199 --> 00:06:06,960
that i think companies face when trying

172
00:06:06,960 --> 00:06:09,840
to modernize appsec

173
00:06:09,840 --> 00:06:11,759
first thing is most tools in the market

174
00:06:11,759 --> 00:06:14,720
were built to run against production by

175
00:06:14,720 --> 00:06:16,960
the security team

176
00:06:16,960 --> 00:06:18,960
and there are several issues with the

177
00:06:18,960 --> 00:06:20,560
production bias and i'm going to double

178
00:06:20,560 --> 00:06:22,960
click on this in just a minute here

179
00:06:22,960 --> 00:06:24,800
second a lot of the tooling is really

180
00:06:24,800 --> 00:06:27,360
hard to configure and deploy

181
00:06:27,360 --> 00:06:29,440
many especially in the land of dast

182
00:06:29,440 --> 00:06:32,880
which is where stackhawk operates

183
00:06:32,880 --> 00:06:35,039
which is testing the running application

184
00:06:35,039 --> 00:06:36,960
it can be difficult to get those

185
00:06:36,960 --> 00:06:38,720
capabilities working in a repeatable

186
00:06:38,720 --> 00:06:39,840
manner

187
00:06:39,840 --> 00:06:41,840
um and making automation really

188
00:06:41,840 --> 00:06:43,199
difficult because a lot of the tools

189
00:06:43,199 --> 00:06:45,440
just weren't built for it

190
00:06:45,440 --> 00:06:47,360
um and most appsec tools were built with

191
00:06:47,360 --> 00:06:49,680
the idea that a human would manually run

192
00:06:49,680 --> 00:06:52,080
tests against an application

193
00:06:52,080 --> 00:06:54,000
and again this is starting to change

194
00:06:54,000 --> 00:06:56,080
which is really good

195
00:06:56,080 --> 00:06:57,759
third a lot of these tools generate a

196
00:06:57,759 --> 00:07:00,400
lot of noise so the output is super

197
00:07:00,400 --> 00:07:02,720
verbose and it's written in a very like

198
00:07:02,720 --> 00:07:05,199
security person language versus

199
00:07:05,199 --> 00:07:06,479
something that's really easy for a

200
00:07:06,479 --> 00:07:09,120
software engineer to quickly rock it and

201
00:07:09,120 --> 00:07:11,039
action on it

202
00:07:11,039 --> 00:07:11,759
and

203
00:07:11,759 --> 00:07:13,599
we all know that a key component to

204
00:07:13,599 --> 00:07:15,280
devops tooling

205
00:07:15,280 --> 00:07:17,599
is to really mitigate noise

206
00:07:17,599 --> 00:07:19,440
and ensure that a software engineer's

207
00:07:19,440 --> 00:07:21,520
attention is really only drawn to what

208
00:07:21,520 --> 00:07:23,759
is important so that they can keep

209
00:07:23,759 --> 00:07:26,639
moving on and delivering business value

210
00:07:26,639 --> 00:07:29,120
um and lastly there's a lot of conflict

211
00:07:29,120 --> 00:07:32,639
with some of how these tools were built

212
00:07:32,639 --> 00:07:33,680
and

213
00:07:33,680 --> 00:07:36,479
those tools running in a more modern

214
00:07:36,479 --> 00:07:39,759
developer tooling and processes system

215
00:07:39,759 --> 00:07:42,240
so on the previous slide we talked about

216
00:07:42,240 --> 00:07:44,240
security folks saying okay debs don't

217
00:07:44,240 --> 00:07:46,160
care about security but with this list

218
00:07:46,160 --> 00:07:48,000
of challenges it's like how can they

219
00:07:48,000 --> 00:07:49,840
afford to care about it it's really

220
00:07:49,840 --> 00:07:52,000
expensive to care

221
00:07:52,000 --> 00:07:53,599
um so we're going to talk about some

222
00:07:53,599 --> 00:07:55,919
ways that we can change this so in a

223
00:07:55,919 --> 00:07:57,280
world where

224
00:07:57,280 --> 00:07:58,879
software engineers are largely measured

225
00:07:58,879 --> 00:08:00,960
by delivering business value the cost of

226
00:08:00,960 --> 00:08:03,360
caring can be too high

227
00:08:03,360 --> 00:08:04,479
and then we're going to talk about how

228
00:08:04,479 --> 00:08:08,240
to how to lower that cost of care

229
00:08:08,560 --> 00:08:10,800
so we discussed that a lot of appstack

230
00:08:10,800 --> 00:08:12,400
tools in the market are built to run

231
00:08:12,400 --> 00:08:13,759
against code that's already been

232
00:08:13,759 --> 00:08:15,680
deployed to prod

233
00:08:15,680 --> 00:08:17,360
and they're designed to be operated by a

234
00:08:17,360 --> 00:08:19,039
security professional

235
00:08:19,039 --> 00:08:21,840
this orientation toward production and

236
00:08:21,840 --> 00:08:23,520
lack of involvement by the development

237
00:08:23,520 --> 00:08:25,599
team at the right time with the right

238
00:08:25,599 --> 00:08:28,560
context makes it impossible to modernize

239
00:08:28,560 --> 00:08:31,120
apsec

240
00:08:32,240 --> 00:08:33,760
please excuse me

241
00:08:33,760 --> 00:08:36,640
um so appsec tools as we just talked

242
00:08:36,640 --> 00:08:39,360
about are commonly run in prod

243
00:08:39,360 --> 00:08:40,719
by either

244
00:08:40,719 --> 00:08:43,200
the security team because prod is where

245
00:08:43,200 --> 00:08:45,200
they know the app the best

246
00:08:45,200 --> 00:08:47,360
or by a pen tester because that's their

247
00:08:47,360 --> 00:08:49,200
point of access

248
00:08:49,200 --> 00:08:51,440
in this context it makes sense that

249
00:08:51,440 --> 00:08:53,440
these tools to date have been designed

250
00:08:53,440 --> 00:08:55,279
for these groups

251
00:08:55,279 --> 00:08:57,680
however it's highly inefficient

252
00:08:57,680 --> 00:08:59,760
both groups struggle to instrument their

253
00:08:59,760 --> 00:09:01,839
tests because they're less familiar with

254
00:09:01,839 --> 00:09:03,760
how the application works

255
00:09:03,760 --> 00:09:05,920
so setting up an engagement can be a

256
00:09:05,920 --> 00:09:07,839
pretty heavy lift to get a really good

257
00:09:07,839 --> 00:09:09,279
assessment

258
00:09:09,279 --> 00:09:11,519
from there the primary value because

259
00:09:11,519 --> 00:09:13,680
that lift was so heavy just to get the

260
00:09:13,680 --> 00:09:15,200
technology running

261
00:09:15,200 --> 00:09:18,000
um these teams can really value the

262
00:09:18,000 --> 00:09:19,760
finding of things

263
00:09:19,760 --> 00:09:21,839
so the number of things found versus

264
00:09:21,839 --> 00:09:23,360
finding and fixing the right things are

265
00:09:23,360 --> 00:09:25,200
the most important things

266
00:09:25,200 --> 00:09:27,040
so the things we don't want to focus on

267
00:09:27,040 --> 00:09:28,959
is just like the number of issues that

268
00:09:28,959 --> 00:09:30,240
are found

269
00:09:30,240 --> 00:09:32,160
um and this can be really inefficient

270
00:09:32,160 --> 00:09:33,839
because the finders aren't the fixers it

271
00:09:33,839 --> 00:09:36,720
happens way too late in the process

272
00:09:36,720 --> 00:09:39,839
and when a team breaks someone's stuff

273
00:09:39,839 --> 00:09:41,519
oh look i found all these security bugs

274
00:09:41,519 --> 00:09:42,959
six months after you deployed this to

275
00:09:42,959 --> 00:09:44,240
production

276
00:09:44,240 --> 00:09:46,560
it kind of fosters that adversarial

277
00:09:46,560 --> 00:09:47,839
relationship

278
00:09:47,839 --> 00:09:49,839
so i'm not advocating that people

279
00:09:49,839 --> 00:09:51,920
shouldn't get pen tests or that the

280
00:09:51,920 --> 00:09:53,279
security team shouldn't even be involved

281
00:09:53,279 --> 00:09:55,200
that's not what i'm advocating for i'm

282
00:09:55,200 --> 00:09:57,519
just suggesting that the production

283
00:09:57,519 --> 00:10:00,080
environment is not the first place

284
00:10:00,080 --> 00:10:01,680
that we should be finding out about this

285
00:10:01,680 --> 00:10:05,680
kind of information for our applications

286
00:10:05,680 --> 00:10:08,000
um the next most critical part of the

287
00:10:08,000 --> 00:10:10,480
production bias is timing so as

288
00:10:10,480 --> 00:10:12,720
companies are rapidly more and more

289
00:10:12,720 --> 00:10:14,880
frequently like many times a day

290
00:10:14,880 --> 00:10:16,720
shipping code to prod

291
00:10:16,720 --> 00:10:19,040
if security is not baked into this

292
00:10:19,040 --> 00:10:21,200
workflow what we find is

293
00:10:21,200 --> 00:10:23,200
either you're not rapidly shifting

294
00:10:23,200 --> 00:10:26,640
shipping code in which case appsec is

295
00:10:26,640 --> 00:10:28,800
uh processes act as a barrier to

296
00:10:28,800 --> 00:10:31,120
shipping code or the security team is

297
00:10:31,120 --> 00:10:33,360
constantly playing catch up and that's

298
00:10:33,360 --> 00:10:35,760
what we actually find is to be the most

299
00:10:35,760 --> 00:10:37,839
common thing is that folks don't really

300
00:10:37,839 --> 00:10:39,600
feel like they have control or knowledge

301
00:10:39,600 --> 00:10:41,120
of the security of the code that they've

302
00:10:41,120 --> 00:10:44,079
put into production

303
00:10:45,279 --> 00:10:47,440
so it gets worse this always kind of

304
00:10:47,440 --> 00:10:50,000
makes me giggle but it shouldn't um when

305
00:10:50,000 --> 00:10:52,079
absec tools favor running in production

306
00:10:52,079 --> 00:10:52,959
like

307
00:10:52,959 --> 00:10:55,519
obviously the bugs be in prod

308
00:10:55,519 --> 00:10:56,240
so

309
00:10:56,240 --> 00:10:58,240
there will be a lot of times where we

310
00:10:58,240 --> 00:11:01,040
intentionally ship bugs to production

311
00:11:01,040 --> 00:11:02,880
but the intentionality is the important

312
00:11:02,880 --> 00:11:04,640
thing here so it should be done with

313
00:11:04,640 --> 00:11:06,240
eyes wide open and it should be a

314
00:11:06,240 --> 00:11:08,800
risk-based decision so you might know

315
00:11:08,800 --> 00:11:11,839
that exposure is super limited

316
00:11:11,839 --> 00:11:13,360
and that that issue will be fixed in the

317
00:11:13,360 --> 00:11:14,959
next sprint

318
00:11:14,959 --> 00:11:17,279
that's great but production is not the

319
00:11:17,279 --> 00:11:19,519
place that you should be finding if

320
00:11:19,519 --> 00:11:23,120
there are any security bugs

321
00:11:24,079 --> 00:11:26,560
the next part of the production bias is

322
00:11:26,560 --> 00:11:27,760
context

323
00:11:27,760 --> 00:11:30,560
so a check for security bugs and prod x

324
00:11:30,560 --> 00:11:33,920
period of time after it's been released

325
00:11:33,920 --> 00:11:35,519
is inefficient

326
00:11:35,519 --> 00:11:37,680
so engineers have moved on to other

327
00:11:37,680 --> 00:11:40,480
sprint tasks they're no longer in the

328
00:11:40,480 --> 00:11:42,399
context of their code

329
00:11:42,399 --> 00:11:45,040
and fixing involves context switching

330
00:11:45,040 --> 00:11:47,200
which can be very expensive

331
00:11:47,200 --> 00:11:50,160
so when scanning for bugs in production

332
00:11:50,160 --> 00:11:54,000
typically tools are scanning nfqdn like

333
00:11:54,000 --> 00:11:56,399
dub dub dub dot or app dot

334
00:11:56,399 --> 00:11:58,560
and the result can be especially with

335
00:11:58,560 --> 00:11:59,600
das

336
00:11:59,600 --> 00:12:02,079
a really long list of bugs that exist

337
00:12:02,079 --> 00:12:04,560
somewhere in the application

338
00:12:04,560 --> 00:12:06,160
and that makes it really difficult to

339
00:12:06,160 --> 00:12:08,839
identify the app or the service that's

340
00:12:08,839 --> 00:12:11,839
affected and it lasts excuse me lacks

341
00:12:11,839 --> 00:12:14,000
the context of the specific data that's

342
00:12:14,000 --> 00:12:16,000
handled by that service

343
00:12:16,000 --> 00:12:18,320
so you end up with a lot of like ticket

344
00:12:18,320 --> 00:12:19,440
shuffling

345
00:12:19,440 --> 00:12:21,440
trying to identify the service that was

346
00:12:21,440 --> 00:12:22,560
affected

347
00:12:22,560 --> 00:12:24,880
trying to identify the team who owns

348
00:12:24,880 --> 00:12:27,279
that service and then trying to work

349
00:12:27,279 --> 00:12:29,760
those issues into the sprint

350
00:12:29,760 --> 00:12:31,680
so when we talked about an inherent

351
00:12:31,680 --> 00:12:34,320
focus on the number of bugs found and

352
00:12:34,320 --> 00:12:36,880
then the percentage fixed over time as

353
00:12:36,880 --> 00:12:39,519
being a primary driver of value

354
00:12:39,519 --> 00:12:41,920
it also totally ignores the business

355
00:12:41,920 --> 00:12:44,000
context of the findings

356
00:12:44,000 --> 00:12:46,000
and trade-off decisions around business

357
00:12:46,000 --> 00:12:47,680
value generation

358
00:12:47,680 --> 00:12:50,560
so instead we really need to be engaging

359
00:12:50,560 --> 00:12:52,480
in discussions like

360
00:12:52,480 --> 00:12:54,720
how important is this application or

361
00:12:54,720 --> 00:12:56,480
service to the business

362
00:12:56,480 --> 00:12:58,959
should we be fixing all of the bugs on

363
00:12:58,959 --> 00:13:00,880
an internal application or just going

364
00:13:00,880 --> 00:13:02,160
fast on that

365
00:13:02,160 --> 00:13:04,639
and how should we think about our apps

366
00:13:04,639 --> 00:13:08,079
and the data that they handle

367
00:13:09,920 --> 00:13:12,800
so the production bias results in the

368
00:13:12,800 --> 00:13:15,360
wrong team and what i mean by that is

369
00:13:15,360 --> 00:13:17,600
the team that isn't ultimately going to

370
00:13:17,600 --> 00:13:19,200
fix the bug

371
00:13:19,200 --> 00:13:21,120
finding vulnerabilities at the wrong

372
00:13:21,120 --> 00:13:22,079
time

373
00:13:22,079 --> 00:13:23,920
because they're in production

374
00:13:23,920 --> 00:13:26,560
and without appropriate context

375
00:13:26,560 --> 00:13:30,399
of the app or the service that is um how

376
00:13:30,399 --> 00:13:32,480
that runs the data it handles and what

377
00:13:32,480 --> 00:13:35,839
it means to the business

378
00:13:36,320 --> 00:13:37,360
so

379
00:13:37,360 --> 00:13:40,399
this is how security-based development

380
00:13:40,399 --> 00:13:42,320
works and should work

381
00:13:42,320 --> 00:13:45,120
and i'm just going to read the slide

382
00:13:45,120 --> 00:13:46,959
because um

383
00:13:46,959 --> 00:13:50,399
it's poignant so when a team writes code

384
00:13:50,399 --> 00:13:52,560
they know that the syntax

385
00:13:52,560 --> 00:13:54,480
because it won't compile

386
00:13:54,480 --> 00:13:56,160
when a team merges code they know that

387
00:13:56,160 --> 00:13:58,160
there's a problem when it does emerge

388
00:13:58,160 --> 00:14:00,720
when a development team runs unit tests

389
00:14:00,720 --> 00:14:02,880
they know the code is wrong when it

390
00:14:02,880 --> 00:14:04,639
fails the unit test

391
00:14:04,639 --> 00:14:06,399
and when a team runs integration tests

392
00:14:06,399 --> 00:14:07,600
they know the code is wrong if it

393
00:14:07,600 --> 00:14:10,079
doesn't work as it's designed

394
00:14:10,079 --> 00:14:11,360
and when a team introduces a

395
00:14:11,360 --> 00:14:13,600
vulnerability they should know right

396
00:14:13,600 --> 00:14:15,600
away because it should fail a security

397
00:14:15,600 --> 00:14:17,760
test in pipeline just like the rest of

398
00:14:17,760 --> 00:14:20,160
the the checks and tests we put into our

399
00:14:20,160 --> 00:14:21,519
code base

400
00:14:21,519 --> 00:14:23,040
so at this point i super want to

401
00:14:23,040 --> 00:14:25,440
emphasize that instrumenting test driven

402
00:14:25,440 --> 00:14:27,199
security is something that engineering

403
00:14:27,199 --> 00:14:28,959
teams

404
00:14:28,959 --> 00:14:31,440
can and should do

405
00:14:31,440 --> 00:14:32,800
so even if they don't yet have a

406
00:14:32,800 --> 00:14:34,959
security team or function at their

407
00:14:34,959 --> 00:14:36,240
company

408
00:14:36,240 --> 00:14:38,240
it's something that an engineering team

409
00:14:38,240 --> 00:14:40,560
can totally run with just like they do

410
00:14:40,560 --> 00:14:42,839
the rest of their

411
00:14:42,839 --> 00:14:45,279
tests so let's talk about getting it

412
00:14:45,279 --> 00:14:46,639
right

413
00:14:46,639 --> 00:14:48,480
so what does the right team look like

414
00:14:48,480 --> 00:14:50,959
when it comes to appsec

415
00:14:50,959 --> 00:14:52,720
it's developers

416
00:14:52,720 --> 00:14:54,800
and informed stakeholders

417
00:14:54,800 --> 00:14:57,120
developers fix security issues so let's

418
00:14:57,120 --> 00:14:58,800
make them aware of those issues as the

419
00:14:58,800 --> 00:15:00,160
writing code

420
00:15:00,160 --> 00:15:02,240
and in this world we're reimagining the

421
00:15:02,240 --> 00:15:04,639
role of security as a coach

422
00:15:04,639 --> 00:15:06,399
whose responsibility is to enable the

423
00:15:06,399 --> 00:15:08,880
team to be successful

424
00:15:08,880 --> 00:15:11,440
so there's a ton of value in optimizing

425
00:15:11,440 --> 00:15:13,680
for the developer experience right it's

426
00:15:13,680 --> 00:15:16,000
super efficient because engineers are

427
00:15:16,000 --> 00:15:18,800
able to find and fix issues in flight

428
00:15:18,800 --> 00:15:21,279
it democratizes security information

429
00:15:21,279 --> 00:15:23,199
across the organization

430
00:15:23,199 --> 00:15:25,600
security becomes a standard discussion

431
00:15:25,600 --> 00:15:27,680
while we're building software

432
00:15:27,680 --> 00:15:30,160
it affords collaboration among teams at

433
00:15:30,160 --> 00:15:31,920
the right level

434
00:15:31,920 --> 00:15:34,240
and provides an opportunity for targeted

435
00:15:34,240 --> 00:15:35,600
education

436
00:15:35,600 --> 00:15:37,680
and then the security team is able to

437
00:15:37,680 --> 00:15:40,399
scale we all know that we cannot scale

438
00:15:40,399 --> 00:15:42,880
our security practices with humans

439
00:15:42,880 --> 00:15:44,959
we have to do it with automation and we

440
00:15:44,959 --> 00:15:46,320
have to do it with our software

441
00:15:46,320 --> 00:15:48,320
engineering teams

442
00:15:48,320 --> 00:15:51,040
so as a pro tip it's like absolutely

443
00:15:51,040 --> 00:15:52,079
leverage

444
00:15:52,079 --> 00:15:54,560
pen testers for security reviews

445
00:15:54,560 --> 00:15:57,279
tough business logic findings but not as

446
00:15:57,279 --> 00:15:58,959
a primary point of access to your

447
00:15:58,959 --> 00:16:01,920
security posture

448
00:16:03,040 --> 00:16:05,279
now let's talk about the right time

449
00:16:05,279 --> 00:16:07,120
so the right time to be checking for

450
00:16:07,120 --> 00:16:10,079
appsec bugs is pre-production

451
00:16:10,079 --> 00:16:11,839
we should be instrumenting our security

452
00:16:11,839 --> 00:16:14,639
tests in ci cd to give engineers

453
00:16:14,639 --> 00:16:17,199
feedback immediately on the different

454
00:16:17,199 --> 00:16:18,639
services and applications that they're

455
00:16:18,639 --> 00:16:19,839
working on

456
00:16:19,839 --> 00:16:22,000
so many of our customers are checking

457
00:16:22,000 --> 00:16:26,160
for appsec bugs on every pr or merge

458
00:16:26,160 --> 00:16:28,079
and this is ideal because if a security

459
00:16:28,079 --> 00:16:29,600
test fails

460
00:16:29,600 --> 00:16:31,680
you know you introduced a security bug

461
00:16:31,680 --> 00:16:34,160
in your latest change

462
00:16:34,160 --> 00:16:35,920
and then when we add the ability to test

463
00:16:35,920 --> 00:16:39,199
locally engineers can really tighten

464
00:16:39,199 --> 00:16:41,600
and quickly iterate on that fixed test

465
00:16:41,600 --> 00:16:44,240
loop if the new bug is identified

466
00:16:44,240 --> 00:16:46,560
so for appsec to modernize engineers

467
00:16:46,560 --> 00:16:48,160
need to be able to test while writing

468
00:16:48,160 --> 00:16:50,079
code and test while they're building

469
00:16:50,079 --> 00:16:51,519
code

470
00:16:51,519 --> 00:16:53,519
and our security teams need our tools

471
00:16:53,519 --> 00:16:54,880
need to play really well in these phases

472
00:16:54,880 --> 00:16:57,519
of development

473
00:16:57,920 --> 00:16:58,800
so

474
00:16:58,800 --> 00:17:01,120
the next piece is getting the right

475
00:17:01,120 --> 00:17:02,959
context

476
00:17:02,959 --> 00:17:06,319
so the right context for security bugs

477
00:17:06,319 --> 00:17:08,880
in your code is as you're writing it and

478
00:17:08,880 --> 00:17:11,039
when this happens engineers can fix

479
00:17:11,039 --> 00:17:13,199
really egregious security issues in

480
00:17:13,199 --> 00:17:14,240
flight

481
00:17:14,240 --> 00:17:16,160
and that's going to result in less bugs

482
00:17:16,160 --> 00:17:18,640
making it to production and less rework

483
00:17:18,640 --> 00:17:19,839
later

484
00:17:19,839 --> 00:17:22,079
next is in context of the application

485
00:17:22,079 --> 00:17:23,520
itself

486
00:17:23,520 --> 00:17:25,599
so the most important piece of context

487
00:17:25,599 --> 00:17:27,039
that comes through with real-time

488
00:17:27,039 --> 00:17:28,799
security testing

489
00:17:28,799 --> 00:17:30,640
is the context for the engineer of the

490
00:17:30,640 --> 00:17:32,720
application that they're working on

491
00:17:32,720 --> 00:17:34,160
so teams can leverage their

492
00:17:34,160 --> 00:17:36,400
microservices architecture to instrument

493
00:17:36,400 --> 00:17:39,280
security checks on smaller bits of code

494
00:17:39,280 --> 00:17:41,440
which make it easier to isolate and fix

495
00:17:41,440 --> 00:17:43,280
those security issues

496
00:17:43,280 --> 00:17:45,039
so teams should also be able to make

497
00:17:45,039 --> 00:17:47,120
better judgment calls when they know the

498
00:17:47,120 --> 00:17:49,200
job of the app that they're testing and

499
00:17:49,200 --> 00:17:52,160
the kind of data that it handles

500
00:17:52,160 --> 00:17:54,240
and then the third piece of context to

501
00:17:54,240 --> 00:17:57,280
get right is business context

502
00:17:57,280 --> 00:17:59,840
so we have to empower software engineers

503
00:17:59,840 --> 00:18:03,039
to fix the most important things not all

504
00:18:03,039 --> 00:18:05,200
the things while they're in context of

505
00:18:05,200 --> 00:18:06,320
their code

506
00:18:06,320 --> 00:18:08,080
and the security team really should be

507
00:18:08,080 --> 00:18:10,240
collaborating with engineering on

508
00:18:10,240 --> 00:18:12,240
assessing business risk

509
00:18:12,240 --> 00:18:13,679
and working across product and

510
00:18:13,679 --> 00:18:15,440
engineering to triage sort of those

511
00:18:15,440 --> 00:18:17,520
lesser severity issues based on

512
00:18:17,520 --> 00:18:22,240
resources business objectives and risk

513
00:18:23,039 --> 00:18:25,200
so when the right people

514
00:18:25,200 --> 00:18:27,600
are doing the right jobs there is a

515
00:18:27,600 --> 00:18:29,760
bridge built between security and

516
00:18:29,760 --> 00:18:31,039
development

517
00:18:31,039 --> 00:18:33,039
the goal of the security team becomes

518
00:18:33,039 --> 00:18:36,720
enabling the business to go faster safer

519
00:18:36,720 --> 00:18:38,799
and they lay the right foundations to

520
00:18:38,799 --> 00:18:40,559
focus on scaling that security

521
00:18:40,559 --> 00:18:42,799
organization within their company by

522
00:18:42,799 --> 00:18:44,559
empowering software engineers and

523
00:18:44,559 --> 00:18:46,000
helping to serve

524
00:18:46,000 --> 00:18:48,799
as educators around risk

525
00:18:48,799 --> 00:18:50,720
when this happens the development org

526
00:18:50,720 --> 00:18:53,679
can build more secure software we talked

527
00:18:53,679 --> 00:18:54,640
about that

528
00:18:54,640 --> 00:18:56,480
and when we automate the job of finding

529
00:18:56,480 --> 00:18:58,400
appsec bugs we empower software

530
00:18:58,400 --> 00:19:00,640
engineers to fix those issues in flight

531
00:19:00,640 --> 00:19:02,640
and security becomes a very natural part

532
00:19:02,640 --> 00:19:06,000
of the software development process

533
00:19:06,320 --> 00:19:07,360
so

534
00:19:07,360 --> 00:19:08,720
that was all very

535
00:19:08,720 --> 00:19:10,880
theory and high level and i wanted to

536
00:19:10,880 --> 00:19:14,160
show you a quick diagram of how a modern

537
00:19:14,160 --> 00:19:17,919
security workflow can work

538
00:19:18,559 --> 00:19:20,799
so this is how leading teams can

539
00:19:20,799 --> 00:19:22,480
introduce

540
00:19:22,480 --> 00:19:24,400
instrument security and ci cd next we're

541
00:19:24,400 --> 00:19:25,760
going to talk about a bunch of different

542
00:19:25,760 --> 00:19:28,320
different tooling to get started with

543
00:19:28,320 --> 00:19:29,440
but

544
00:19:29,440 --> 00:19:31,440
as you are sort of

545
00:19:31,440 --> 00:19:34,480
checking in code it compiles and builds

546
00:19:34,480 --> 00:19:36,880
at that point just in the same point

547
00:19:36,880 --> 00:19:38,880
that your unit tests are running your

548
00:19:38,880 --> 00:19:41,039
integration tests are running this is

549
00:19:41,039 --> 00:19:43,039
where your security tests should be

550
00:19:43,039 --> 00:19:44,720
running

551
00:19:44,720 --> 00:19:45,679
and then

552
00:19:45,679 --> 00:19:48,160
building tools and and pipelines that

553
00:19:48,160 --> 00:19:51,280
allow you to have some optionality here

554
00:19:51,280 --> 00:19:53,440
one you can run it async two you can run

555
00:19:53,440 --> 00:19:55,840
it in pipeline which means that if the

556
00:19:55,840 --> 00:19:57,600
security test passes

557
00:19:57,600 --> 00:19:59,520
it gets packaged it gets deployed it

558
00:19:59,520 --> 00:20:01,520
goes through its natural process if a

559
00:20:01,520 --> 00:20:03,760
security test fails you have the option

560
00:20:03,760 --> 00:20:05,679
to break a build

561
00:20:05,679 --> 00:20:08,159
go through finding details recreate the

562
00:20:08,159 --> 00:20:10,720
issue and then further triage that by

563
00:20:10,720 --> 00:20:12,080
either fixing it

564
00:20:12,080 --> 00:20:14,320
creating it or creating a jira ticket

565
00:20:14,320 --> 00:20:16,880
and then re-merging that code um back

566
00:20:16,880 --> 00:20:19,840
into your pipeline

567
00:20:19,840 --> 00:20:21,600
that is how sort of a more or more

568
00:20:21,600 --> 00:20:24,240
modern way of doing application security

569
00:20:24,240 --> 00:20:26,960
testing works

570
00:20:26,960 --> 00:20:27,840
so

571
00:20:27,840 --> 00:20:30,080
um i know at devsecond there is a

572
00:20:30,080 --> 00:20:32,799
variety of backgrounds so you might be

573
00:20:32,799 --> 00:20:34,320
thinking okay that's awesome i don't

574
00:20:34,320 --> 00:20:35,919
know where to start so if you're a

575
00:20:35,919 --> 00:20:38,080
software developer i'd start thinking

576
00:20:38,080 --> 00:20:39,919
about security testing

577
00:20:39,919 --> 00:20:41,840
just like you would integration testing

578
00:20:41,840 --> 00:20:43,919
or unit testing and as part of a

579
00:20:43,919 --> 00:20:45,840
required software delivery pipeline that

580
00:20:45,840 --> 00:20:47,760
the engineering org phones and

581
00:20:47,760 --> 00:20:49,200
instruments

582
00:20:49,200 --> 00:20:51,840
um from there i've included a couple

583
00:20:51,840 --> 00:20:54,480
great types of appsec tools that every

584
00:20:54,480 --> 00:20:57,440
company should be using so we've got sca

585
00:20:57,440 --> 00:20:59,840
or software composition analysis

586
00:20:59,840 --> 00:21:01,600
that really helps teams identify

587
00:21:01,600 --> 00:21:03,840
vulnerabilities in open source libraries

588
00:21:03,840 --> 00:21:05,440
or containers

589
00:21:05,440 --> 00:21:07,120
these tools compare versions of

590
00:21:07,120 --> 00:21:09,520
libraries or third-party components that

591
00:21:09,520 --> 00:21:11,520
you're using to known vols

592
00:21:11,520 --> 00:21:13,039
and an alert

593
00:21:13,039 --> 00:21:14,960
excuse me alerts users when it's time to

594
00:21:14,960 --> 00:21:18,159
update um next is das that's the world

595
00:21:18,159 --> 00:21:20,559
that we live in so dynamic application

596
00:21:20,559 --> 00:21:22,080
security testing

597
00:21:22,080 --> 00:21:24,480
which scans your running apps and apis

598
00:21:24,480 --> 00:21:26,320
for vulnerabilities

599
00:21:26,320 --> 00:21:29,280
it's an active scanner that can sort of

600
00:21:29,280 --> 00:21:31,039
simulate an attack on your app with

601
00:21:31,039 --> 00:21:32,080
inputs

602
00:21:32,080 --> 00:21:33,919
seeking outputs that indicate a present

603
00:21:33,919 --> 00:21:35,919
vulnerability so the nice thing about

604
00:21:35,919 --> 00:21:37,840
dast is since it reports successful

605
00:21:37,840 --> 00:21:40,720
attacks there are less false positives

606
00:21:40,720 --> 00:21:42,720
um so to get started if you're a

607
00:21:42,720 --> 00:21:46,000
software engineer you can skip step one

608
00:21:46,000 --> 00:21:48,880
on this slide because you know your app

609
00:21:48,880 --> 00:21:52,000
and simply choose an app or service

610
00:21:52,000 --> 00:21:54,240
and start scanning for appsec bugs

611
00:21:54,240 --> 00:21:56,159
choose the technology

612
00:21:56,159 --> 00:21:58,080
and just start scanning and pipeline and

613
00:21:58,080 --> 00:22:00,080
as you get comfortable you can layer in

614
00:22:00,080 --> 00:22:02,240
additional applications and technologies

615
00:22:02,240 --> 00:22:04,320
that provide a more robust security

616
00:22:04,320 --> 00:22:06,799
posture

617
00:22:07,039 --> 00:22:09,280
so that is it for me

618
00:22:09,280 --> 00:22:11,120
feel free to email me at joni

619
00:22:11,120 --> 00:22:13,440
stackhawk.com or visit stackhawk to

620
00:22:13,440 --> 00:22:15,440
learn more about how we're putting apsec

621
00:22:15,440 --> 00:22:17,600
in the hands of software engineers

622
00:22:17,600 --> 00:22:19,120
and i hope you enjoy the rest of the

623
00:22:19,120 --> 00:22:22,120
conference

624
00:22:26,159 --> 00:22:28,559
thank you jeremy um we do have a couple

625
00:22:28,559 --> 00:22:30,559
of questions um

626
00:22:30,559 --> 00:22:31,600
so

627
00:22:31,600 --> 00:22:32,960
uh

628
00:22:32,960 --> 00:22:35,679
the first is so how can developers

629
00:22:35,679 --> 00:22:37,280
watching this talk convince their

630
00:22:37,280 --> 00:22:39,120
management of the importance of that

631
00:22:39,120 --> 00:22:41,840
baked in security

632
00:22:41,840 --> 00:22:44,400
you know that's a great question

633
00:22:44,400 --> 00:22:45,600
i think

634
00:22:45,600 --> 00:22:48,080
as somebody who has managed software

635
00:22:48,080 --> 00:22:49,679
engineering teams and in more of a

636
00:22:49,679 --> 00:22:52,960
product capacity before my ceo hat was

637
00:22:52,960 --> 00:22:54,799
put on

638
00:22:54,799 --> 00:22:56,240
is the

639
00:22:56,240 --> 00:22:59,679
the disruption and the cost of unplanned

640
00:22:59,679 --> 00:23:00,640
work

641
00:23:00,640 --> 00:23:03,440
is really really hard on an organization

642
00:23:03,440 --> 00:23:05,200
because we're making a lot of promises

643
00:23:05,200 --> 00:23:08,240
with roadmap to our customers and to our

644
00:23:08,240 --> 00:23:10,080
business constituents

645
00:23:10,080 --> 00:23:11,760
and when you get a bunch of

646
00:23:11,760 --> 00:23:14,320
vulnerabilities dumped in your lap to

647
00:23:14,320 --> 00:23:16,159
disrupt a sprint

648
00:23:16,159 --> 00:23:18,799
it is very expensive for engineers to

649
00:23:18,799 --> 00:23:20,799
contact switch

650
00:23:20,799 --> 00:23:22,559
to fixing something maybe code that they

651
00:23:22,559 --> 00:23:25,360
haven't seen or touched for six months

652
00:23:25,360 --> 00:23:28,240
so that's a that's a very meaningful

653
00:23:28,240 --> 00:23:30,080
cost to the business

654
00:23:30,080 --> 00:23:31,440
because we're not we're switching

655
00:23:31,440 --> 00:23:32,880
context and we're not working on

656
00:23:32,880 --> 00:23:34,640
business value anymore

657
00:23:34,640 --> 00:23:36,559
and then two this is not the first thing

658
00:23:36,559 --> 00:23:39,360
that we lean on but

659
00:23:39,360 --> 00:23:41,679
if you're waiting to assess risk until

660
00:23:41,679 --> 00:23:43,039
production

661
00:23:43,039 --> 00:23:44,960
you you're instrumenting risk into your

662
00:23:44,960 --> 00:23:46,080
business

663
00:23:46,080 --> 00:23:48,799
um and so i would encourage folks to not

664
00:23:48,799 --> 00:23:50,640
do that especially if it can be

665
00:23:50,640 --> 00:23:53,440
automated as part of just actual

666
00:23:53,440 --> 00:23:56,640
traditional software delivery

667
00:23:56,880 --> 00:23:59,279
great thank you and uh

668
00:23:59,279 --> 00:24:00,640
catherine asks

669
00:24:00,640 --> 00:24:02,080
um do you have any recommendations for

670
00:24:02,080 --> 00:24:04,320
the catch-up portion so the example that

671
00:24:04,320 --> 00:24:06,400
she gave was running an sca tool that

672
00:24:06,400 --> 00:24:08,640
detected lots of vulnerabilities and

673
00:24:08,640 --> 00:24:10,240
generating so much feedback that the

674
00:24:10,240 --> 00:24:12,080
team then doesn't know how to prioritize

675
00:24:12,080 --> 00:24:14,559
which things they should fix

676
00:24:14,559 --> 00:24:17,039
yeah that's another great question so

677
00:24:17,039 --> 00:24:19,279
you know we spend a lot of time in the

678
00:24:19,279 --> 00:24:20,240
realm

679
00:24:20,240 --> 00:24:22,799
of dest and as we

680
00:24:22,799 --> 00:24:25,039
onboard our customers

681
00:24:25,039 --> 00:24:27,679
a very important place to start so

682
00:24:27,679 --> 00:24:29,440
they'll start running security tests on

683
00:24:29,440 --> 00:24:31,200
a certain application

684
00:24:31,200 --> 00:24:33,039
and we're like you've got to baseline

685
00:24:33,039 --> 00:24:36,000
that app so sit down with your team

686
00:24:36,000 --> 00:24:37,600
and make sure that you've triaged

687
00:24:37,600 --> 00:24:39,120
everything it's like either you know fix

688
00:24:39,120 --> 00:24:41,039
the most egregious issues

689
00:24:41,039 --> 00:24:42,640
make tickets if those are things that

690
00:24:42,640 --> 00:24:43,840
you want to fix with additional

691
00:24:43,840 --> 00:24:46,240
resources later or sometimes in tools

692
00:24:46,240 --> 00:24:47,919
you'll find false positives or things

693
00:24:47,919 --> 00:24:49,919
you're going to risk accept

694
00:24:49,919 --> 00:24:51,840
and it's really important to do that

695
00:24:51,840 --> 00:24:53,919
baselining because when you're running

696
00:24:53,919 --> 00:24:55,919
it in pipeline if something net new pops

697
00:24:55,919 --> 00:24:57,840
up it's like i have to pay attention to

698
00:24:57,840 --> 00:25:00,720
this and i have to fix this issue

699
00:25:00,720 --> 00:25:04,159
another thing not to be pitchy but um

700
00:25:04,159 --> 00:25:06,400
to help engineers focus on the right

701
00:25:06,400 --> 00:25:07,200
things

702
00:25:07,200 --> 00:25:10,000
just released an integration with sneak

703
00:25:10,000 --> 00:25:12,640
code so the sas product

704
00:25:12,640 --> 00:25:15,120
so what's really great about that is sas

705
00:25:15,120 --> 00:25:17,360
can find a whole lot of issues

706
00:25:17,360 --> 00:25:19,120
that may or may not be accessible to the

707
00:25:19,120 --> 00:25:20,159
internet

708
00:25:20,159 --> 00:25:23,120
and das shows we were actually able to

709
00:25:23,120 --> 00:25:25,120
successfully attack this it is it is

710
00:25:25,120 --> 00:25:26,640
accessible to the internet and it is

711
00:25:26,640 --> 00:25:28,799
vulnerable and by correlating those

712
00:25:28,799 --> 00:25:30,880
findings yes it was accessible from the

713
00:25:30,880 --> 00:25:32,720
internet here's the line of code that

714
00:25:32,720 --> 00:25:35,120
you need to go fix that helps a software

715
00:25:35,120 --> 00:25:37,600
engineer know exactly what to do while

716
00:25:37,600 --> 00:25:39,360
they're in context of their code and

717
00:25:39,360 --> 00:25:41,600
eliminates a lot of that noise

718
00:25:41,600 --> 00:25:44,240
our market and our tooling across all of

719
00:25:44,240 --> 00:25:46,080
them have a lot more work to do here to

720
00:25:46,080 --> 00:25:48,799
make sure that it is not a disruptive

721
00:25:48,799 --> 00:25:50,799
process for software engineers and to

722
00:25:50,799 --> 00:25:52,000
fix things

723
00:25:52,000 --> 00:25:53,039
but

724
00:25:53,039 --> 00:25:56,000
i think the leading companies get it

725
00:25:56,000 --> 00:25:57,440
we're aware of the problem and our best

726
00:25:57,440 --> 00:25:58,960
people are on it and we're working on

727
00:25:58,960 --> 00:26:02,000
fixing that for for software engineers

728
00:26:02,000 --> 00:26:03,600
i mean i think that's the kind of next

729
00:26:03,600 --> 00:26:05,440
stage of this problem really isn't it is

730
00:26:05,440 --> 00:26:07,120
being able to actually say

731
00:26:07,120 --> 00:26:08,159
i mean

732
00:26:08,159 --> 00:26:10,080
obviously i hold my hands up that i work

733
00:26:10,080 --> 00:26:11,840
for snakes so this is a familiar space

734
00:26:11,840 --> 00:26:15,360
for me but um you know where where

735
00:26:15,360 --> 00:26:16,880
you know is that code path actually

736
00:26:16,880 --> 00:26:18,799
being executed or you know in the

737
00:26:18,799 --> 00:26:21,360
context of uh you know of cloud

738
00:26:21,360 --> 00:26:23,440
deployments can i actually get to that

739
00:26:23,440 --> 00:26:25,760
you know and it's being able to and i

740
00:26:25,760 --> 00:26:28,720
think as an industry we're all starting

741
00:26:28,720 --> 00:26:30,960
to to get on that road but it's taking a

742
00:26:30,960 --> 00:26:34,000
very long time to be able to have the

743
00:26:34,000 --> 00:26:34,960
uh

744
00:26:34,960 --> 00:26:38,670
the the data and the you know the uh the

745
00:26:38,670 --> 00:26:40,559
[Music]

746
00:26:40,559 --> 00:26:42,720
frameworks to be able to make those

747
00:26:42,720 --> 00:26:44,159
connections

748
00:26:44,159 --> 00:26:46,320
you know to uh to say and you know it's

749
00:26:46,320 --> 00:26:48,159
taking infrastructure as code and all

750
00:26:48,159 --> 00:26:49,520
the rest of it so that we can actually

751
00:26:49,520 --> 00:26:52,720
say this is how something is in reality

752
00:26:52,720 --> 00:26:55,039
in production right now

753
00:26:55,039 --> 00:26:56,960
before we can start making those kind of

754
00:26:56,960 --> 00:26:59,440
uh those kind of calls

755
00:26:59,440 --> 00:27:01,279
and we have one more question from kevin

756
00:27:01,279 --> 00:27:02,799
joney who says uh

757
00:27:02,799 --> 00:27:04,559
how do i create a security awareness

758
00:27:04,559 --> 00:27:06,640
program for developers to ensure best

759
00:27:06,640 --> 00:27:08,799
practices in the sdlc and not engage in

760
00:27:08,799 --> 00:27:11,760
war with devops

761
00:27:12,799 --> 00:27:15,760
i'm not sure who kevin works

762
00:27:15,760 --> 00:27:16,559
well

763
00:27:16,559 --> 00:27:18,480
um

764
00:27:18,480 --> 00:27:19,600
listen

765
00:27:19,600 --> 00:27:21,679
engineers really care about the quality

766
00:27:21,679 --> 00:27:23,120
of their code

767
00:27:23,120 --> 00:27:25,279
there's a lot of pride associated with

768
00:27:25,279 --> 00:27:28,880
delivering great code to customers

769
00:27:28,880 --> 00:27:31,919
and it includes security right i i think

770
00:27:31,919 --> 00:27:35,279
to not engage in a war is to not let

771
00:27:35,279 --> 00:27:37,760
perfect be the enemy of good

772
00:27:37,760 --> 00:27:41,120
get tools that run in their processes in

773
00:27:41,120 --> 00:27:44,000
their systems you cannot take so dust

774
00:27:44,000 --> 00:27:46,159
like a legacy problem with dust is it

775
00:27:46,159 --> 00:27:48,080
could take like days to run you can't

776
00:27:48,080 --> 00:27:50,399
run that and hold one so you have to

777
00:27:50,399 --> 00:27:52,480
find tools i don't know like ours

778
00:27:52,480 --> 00:27:55,279
um that run very very quickly

779
00:27:55,279 --> 00:27:57,279
and they they're not in their way right

780
00:27:57,279 --> 00:27:59,520
it fits in their tooling

781
00:27:59,520 --> 00:28:02,240
you know uis and ides and experiences

782
00:28:02,240 --> 00:28:03,360
that say

783
00:28:03,360 --> 00:28:04,960
like this is the most important thing

784
00:28:04,960 --> 00:28:06,880
for you to fix you can kind of ignore

785
00:28:06,880 --> 00:28:08,720
the rest we'll get to it later

786
00:28:08,720 --> 00:28:10,480
pay attention here

787
00:28:10,480 --> 00:28:13,200
um and then get out of their way so you

788
00:28:13,200 --> 00:28:14,720
gotta enable them

789
00:28:14,720 --> 00:28:16,559
and get them started on the right things

790
00:28:16,559 --> 00:28:18,559
and then just be a partner

791
00:28:18,559 --> 00:28:21,440
we're seeing it a lot honestly that

792
00:28:21,440 --> 00:28:23,760
apsec teams know that in order to scale

793
00:28:23,760 --> 00:28:26,399
they have to have friends in software

794
00:28:26,399 --> 00:28:28,559
engineering and they have to be able to

795
00:28:28,559 --> 00:28:30,960
automate a lot of these things so

796
00:28:30,960 --> 00:28:33,520
it's common i i don't i'm not perfect i

797
00:28:33,520 --> 00:28:35,360
don't have all of the i don't have all

798
00:28:35,360 --> 00:28:36,960
of the answers but

799
00:28:36,960 --> 00:28:39,120
uh give them tools they can use and give

800
00:28:39,120 --> 00:28:40,559
them tools that are easy and empower

801
00:28:40,559 --> 00:28:42,080
them and trust them

802
00:28:42,080 --> 00:28:44,480
and you'll build a good relationship

803
00:28:44,480 --> 00:28:46,080
we did some survey

804
00:28:46,080 --> 00:28:47,520
uh in our cloud

805
00:28:47,520 --> 00:28:50,000
application security survey uh last year

806
00:28:50,000 --> 00:28:51,919
and you know a huge proportion of

807
00:28:51,919 --> 00:28:56,159
developers um filling out that survey uh

808
00:28:56,159 --> 00:28:57,440
were

809
00:28:57,440 --> 00:29:00,559
clearly uh deeply cared about security

810
00:29:00,559 --> 00:29:02,559
so you know i think some of these old

811
00:29:02,559 --> 00:29:03,840
kind of

812
00:29:03,840 --> 00:29:05,600
thought patterns of old developers are

813
00:29:05,600 --> 00:29:07,919
this way and security folks are that way

814
00:29:07,919 --> 00:29:10,640
you know uh uh are probably not not uh

815
00:29:10,640 --> 00:29:13,520
don't are not holding as true these days

816
00:29:13,520 --> 00:29:15,200
as maybe they were

817
00:29:15,200 --> 00:29:18,159
you know a decade ago or so

818
00:29:18,159 --> 00:29:20,720
i agree

819
00:29:20,720 --> 00:29:22,240
okay

820
00:29:22,240 --> 00:29:24,080
um

821
00:29:24,080 --> 00:29:25,919
so have we have we have we dealt with

822
00:29:25,919 --> 00:29:28,000
all these questions and there was one

823
00:29:28,000 --> 00:29:29,520
more if you just want to answer this one

824
00:29:29,520 --> 00:29:31,440
quickly journey um

825
00:29:31,440 --> 00:29:33,360
so jano asks are there any specific

826
00:29:33,360 --> 00:29:34,640
tools that you would recommend to get

827
00:29:34,640 --> 00:29:36,399
started with this test driven security

828
00:29:36,399 --> 00:29:40,520
you can probably think of one right

829
00:29:47,360 --> 00:29:50,409
[Music]

830
00:29:52,840 --> 00:29:56,320
um uh yes i i highly recommend you to

831
00:29:56,320 --> 00:29:59,279
check out stackhawk so what i love about

832
00:29:59,279 --> 00:30:02,399
our product is it's language agnostic so

833
00:30:02,399 --> 00:30:03,760
you can no matter sort of what your

834
00:30:03,760 --> 00:30:05,600
application is built in you can run

835
00:30:05,600 --> 00:30:07,279
tests against it

836
00:30:07,279 --> 00:30:09,440
and it also focuses on the api layer

837
00:30:09,440 --> 00:30:11,600
which is super important for modern apps

838
00:30:11,600 --> 00:30:13,440
that's where all the goodies live it's

839
00:30:13,440 --> 00:30:15,360
in that communication layer between back

840
00:30:15,360 --> 00:30:16,880
end and front end

841
00:30:16,880 --> 00:30:19,039
um and you can get started for free we

842
00:30:19,039 --> 00:30:21,039
even have a free product so if you want

843
00:30:21,039 --> 00:30:23,360
to just start playing around and getting

844
00:30:23,360 --> 00:30:25,200
to know different technologies i

845
00:30:25,200 --> 00:30:27,360
encourage you to try that out

846
00:30:27,360 --> 00:30:29,120
and then we have great friends at sneak

847
00:30:29,120 --> 00:30:30,159
that

848
00:30:30,159 --> 00:30:32,159
have built also great products and have

849
00:30:32,159 --> 00:30:35,120
free versions uh that you can start

850
00:30:35,120 --> 00:30:37,039
testing with that

851
00:30:37,039 --> 00:30:38,960
also integrate with ours and so those

852
00:30:38,960 --> 00:30:40,799
are really great places to start and

853
00:30:40,799 --> 00:30:42,559
then other companies have really good

854
00:30:42,559 --> 00:30:45,039
tools also so that last slide i don't

855
00:30:45,039 --> 00:30:46,159
know if you'll be making these slides

856
00:30:46,159 --> 00:30:48,399
available but it has a list of companies

857
00:30:48,399 --> 00:30:50,320
and technologies that i think are pretty

858
00:30:50,320 --> 00:30:52,000
developer first

859
00:30:52,000 --> 00:30:52,720
that

860
00:30:52,720 --> 00:30:55,600
folks can cook out

861
00:30:55,679 --> 00:30:57,519
great thank you very much joni that was

862
00:30:57,519 --> 00:31:00,240
a great talk i know we really enjoyed it

863
00:31:00,240 --> 00:31:02,240
so we'll uh we'll let you go at this

864
00:31:02,240 --> 00:31:04,240
point

865
00:31:04,240 --> 00:31:06,000
thank you so much have a great day

866
00:31:06,000 --> 00:31:07,120
everybody

867
00:31:07,120 --> 00:31:08,430
you too

868
00:31:08,430 --> 00:31:11,900
[Music]

