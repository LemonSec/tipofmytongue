1
00:00:00,470 --> 00:00:04,319
[Music]

2
00:00:04,560 --> 00:00:07,759
um next up we do have anime she's joined

3
00:00:07,759 --> 00:00:09,920
us for the next talk um so he's going to

4
00:00:09,920 --> 00:00:12,480
talk about intro um

5
00:00:12,480 --> 00:00:15,839
sorry infused security into your cdlc uh

6
00:00:15,839 --> 00:00:17,840
pipeline so thanks for joining us

7
00:00:17,840 --> 00:00:19,600
animesh

8
00:00:19,600 --> 00:00:21,760
thanks for having me i'm really excited

9
00:00:21,760 --> 00:00:24,000
listening the talks from the morning i

10
00:00:24,000 --> 00:00:25,519
found those very interesting and

11
00:00:25,519 --> 00:00:28,080
insightful and i hope that every one of

12
00:00:28,080 --> 00:00:31,199
you is doing good

13
00:00:31,199 --> 00:00:32,880
absolutely

14
00:00:32,880 --> 00:00:35,200
we're looking forward to your talk and

15
00:00:35,200 --> 00:00:37,920
we'll give you the stage

16
00:00:37,920 --> 00:00:40,559
sure thank you

17
00:00:40,879 --> 00:00:42,160
so uh

18
00:00:42,160 --> 00:00:44,559
hey guys uh a bit introduction about

19
00:00:44,559 --> 00:00:47,680
myself so i'm a developer advocate i uh

20
00:00:47,680 --> 00:00:49,280
advocate generally about open source

21
00:00:49,280 --> 00:00:50,800
cyber security

22
00:00:50,800 --> 00:00:52,559
uh being a passionate open source

23
00:00:52,559 --> 00:00:54,640
developer i have maintained some

24
00:00:54,640 --> 00:00:57,360
packages and generally you know take

25
00:00:57,360 --> 00:00:59,039
those packages that are being used to

26
00:00:59,039 --> 00:01:02,000
build bots and such more so today we'll

27
00:01:02,000 --> 00:01:04,959
be covering about uh many topics which

28
00:01:04,959 --> 00:01:07,920
are a part of sdlc at different phases

29
00:01:07,920 --> 00:01:09,600
whether it's requirement analysis

30
00:01:09,600 --> 00:01:12,720
testing deployment and etc so very

31
00:01:12,720 --> 00:01:14,479
briefly we'll be touching about the

32
00:01:14,479 --> 00:01:16,640
thread models what are those and how we

33
00:01:16,640 --> 00:01:18,720
can utilize them

34
00:01:18,720 --> 00:01:21,280
and as we have uh generally seen by

35
00:01:21,280 --> 00:01:23,520
using the github dependable board alerts

36
00:01:23,520 --> 00:01:25,600
like what are code scanning tools what

37
00:01:25,600 --> 00:01:28,320
categories they have how we can automate

38
00:01:28,320 --> 00:01:31,119
uh the security in our lifecycle model

39
00:01:31,119 --> 00:01:32,640
and what after

40
00:01:32,640 --> 00:01:36,560
uh once we have released our software

41
00:01:36,560 --> 00:01:38,720
so here it is let's go

42
00:01:38,720 --> 00:01:41,680
so uh basically thread modeling is not

43
00:01:41,680 --> 00:01:44,799
much uh it is used for optimizing

44
00:01:44,799 --> 00:01:46,799
applications and you know

45
00:01:46,799 --> 00:01:50,560
identifying potential security issues uh

46
00:01:50,560 --> 00:01:52,880
when performed correctly they provide a

47
00:01:52,880 --> 00:01:54,960
clear line of sight across the project

48
00:01:54,960 --> 00:01:56,560
software and

49
00:01:56,560 --> 00:01:58,880
help us to identify knowable security

50
00:01:58,880 --> 00:02:00,240
threats

51
00:02:00,240 --> 00:02:02,240
to an application like our application

52
00:02:02,240 --> 00:02:04,159
or the piece of a software and help us

53
00:02:04,159 --> 00:02:06,479
make a decision about how to address

54
00:02:06,479 --> 00:02:08,878
them even before

55
00:02:08,878 --> 00:02:10,800
and the best part is like even before

56
00:02:10,800 --> 00:02:12,160
the coding begins

57
00:02:12,160 --> 00:02:14,000
uh the threat modeling can be used to

58
00:02:14,000 --> 00:02:17,200
detect security issues which could arise

59
00:02:17,200 --> 00:02:19,680
at the later point of development

60
00:02:19,680 --> 00:02:22,400
and this is generally done at the early

61
00:02:22,400 --> 00:02:25,120
phase uh right between the requirement

62
00:02:25,120 --> 00:02:26,879
when we are checking the requirements

63
00:02:26,879 --> 00:02:28,319
and the planning part

64
00:02:28,319 --> 00:02:30,879
so uh this exercise actually help us

65
00:02:30,879 --> 00:02:33,360
like when where and how we can add the

66
00:02:33,360 --> 00:02:38,239
security to our ci cd pipelines iacs and

67
00:02:38,239 --> 00:02:40,080
understand whether the thread and the

68
00:02:40,080 --> 00:02:41,760
thread environment how will our

69
00:02:41,760 --> 00:02:44,239
application operate

70
00:02:44,239 --> 00:02:46,720
so basically there are four types uh

71
00:02:46,720 --> 00:02:48,959
four steps in which uh the thread

72
00:02:48,959 --> 00:02:51,680
modeling is conducted or utilized first

73
00:02:51,680 --> 00:02:53,200
is diagram

74
00:02:53,200 --> 00:02:55,920
right it's the first step um once the

75
00:02:55,920 --> 00:02:58,480
model is ready we check like what are we

76
00:02:58,480 --> 00:03:01,040
building what are what kind of

77
00:03:01,040 --> 00:03:04,640
dependencies will our software require

78
00:03:04,640 --> 00:03:08,000
what implementations will it do and what

79
00:03:08,000 --> 00:03:10,319
kind of access it has for example if

80
00:03:10,319 --> 00:03:13,040
it's a vm kind of thing so from vm we

81
00:03:13,040 --> 00:03:16,239
can access ssh keys uh public websites

82
00:03:16,239 --> 00:03:18,640
and much more similarly if it's an os it

83
00:03:18,640 --> 00:03:19,840
will

84
00:03:19,840 --> 00:03:22,560
basically build a complete overlay of

85
00:03:22,560 --> 00:03:23,920
how

86
00:03:23,920 --> 00:03:26,319
a person white might work upon or the

87
00:03:26,319 --> 00:03:27,760
environment

88
00:03:27,760 --> 00:03:30,640
uh then comes the second step like how

89
00:03:30,640 --> 00:03:32,959
do we identify threats and what threats

90
00:03:32,959 --> 00:03:33,920
there are

91
00:03:33,920 --> 00:03:36,159
so in this basically there is a detailed

92
00:03:36,159 --> 00:03:39,440
testing and checking using the model

93
00:03:39,440 --> 00:03:41,840
uh like what could go wrong uh which

94
00:03:41,840 --> 00:03:43,920
threads are still active whose solution

95
00:03:43,920 --> 00:03:47,200
have not been found uh and etc that

96
00:03:47,200 --> 00:03:49,200
whole detailing of threats are done at

97
00:03:49,200 --> 00:03:50,400
this step

98
00:03:50,400 --> 00:03:51,840
the third step that comes is the

99
00:03:51,840 --> 00:03:54,400
mitigation in mitigations once we have

100
00:03:54,400 --> 00:03:56,080
identified the threats like this are the

101
00:03:56,080 --> 00:03:57,760
threats that

102
00:03:57,760 --> 00:03:59,280
could basically

103
00:03:59,280 --> 00:04:02,239
 our operations our software part

104
00:04:02,239 --> 00:04:03,200
or

105
00:04:03,200 --> 00:04:06,000
create a security or privacy issues

106
00:04:06,000 --> 00:04:07,840
so once we have identified those threads

107
00:04:07,840 --> 00:04:10,080
uh more in mitigation we plans the

108
00:04:10,080 --> 00:04:12,879
solution if there is an existing plan or

109
00:04:12,879 --> 00:04:14,879
the solution we integrated with or

110
00:04:14,879 --> 00:04:17,040
keeping our pipeline and if it's not

111
00:04:17,040 --> 00:04:19,040
we've tried to build a solution around

112
00:04:19,040 --> 00:04:20,399
it

113
00:04:20,399 --> 00:04:22,800
then the last part comes as a validation

114
00:04:22,800 --> 00:04:25,440
once we have identified a model our

115
00:04:25,440 --> 00:04:28,240
model uh identify threads and mitigate

116
00:04:28,240 --> 00:04:30,800
it done everything then we see like how

117
00:04:30,800 --> 00:04:33,520
we have acted on each process steps

118
00:04:33,520 --> 00:04:36,240
um once we have validated like okay this

119
00:04:36,240 --> 00:04:38,720
is our this is our plan of action if

120
00:04:38,720 --> 00:04:40,880
such case arises and this is an edge

121
00:04:40,880 --> 00:04:43,680
case so if uh such edge cases arises

122
00:04:43,680 --> 00:04:46,000
will follow this plan and these plan are

123
00:04:46,000 --> 00:04:48,880
stored in our pipeline uh for

124
00:04:48,880 --> 00:04:49,919
uh

125
00:04:49,919 --> 00:04:52,880
basically on a standpoint of gpu so in

126
00:04:52,880 --> 00:04:54,400
any case if they

127
00:04:54,400 --> 00:04:56,800
actually go something wrong we can uh

128
00:04:56,800 --> 00:04:57,919
plan it

129
00:04:57,919 --> 00:05:00,080
so basically the more we plan the more

130
00:05:00,080 --> 00:05:02,479
uh and model these threads better the

131
00:05:02,479 --> 00:05:05,120
better we could we become uh to deal

132
00:05:05,120 --> 00:05:06,720
with them if those threads actually

133
00:05:06,720 --> 00:05:08,880
arises at the later stage of software

134
00:05:08,880 --> 00:05:11,840
development part

135
00:05:12,000 --> 00:05:14,720
so while it is true that vulnerabilities

136
00:05:14,720 --> 00:05:16,560
uh picked up earlier

137
00:05:16,560 --> 00:05:19,759
uh are easier to you know just uh go

138
00:05:19,759 --> 00:05:22,880
through or are cheaper to remediate

139
00:05:22,880 --> 00:05:26,320
they can't we can't always find all

140
00:05:26,320 --> 00:05:29,120
fundabilities or debug through our own

141
00:05:29,120 --> 00:05:31,280
here comes our code scanning tools like

142
00:05:31,280 --> 00:05:34,160
this uh this kind of tools actually help

143
00:05:34,160 --> 00:05:36,560
us to ensure and make sure that our

144
00:05:36,560 --> 00:05:39,520
software is as secure as possible

145
00:05:39,520 --> 00:05:43,840
and they have uh they are very stable so

146
00:05:44,400 --> 00:05:46,960
it will it develops well in their

147
00:05:46,960 --> 00:05:50,400
advantages so they are very scalable we

148
00:05:50,400 --> 00:05:53,600
can walk around it easily if there is

149
00:05:53,600 --> 00:05:56,960
any uh alert they um let us know

150
00:05:56,960 --> 00:05:59,199
immediately if there is any issue the

151
00:05:59,199 --> 00:06:01,520
best example being the dependable god

152
00:06:01,520 --> 00:06:04,000
and once they have identified the

153
00:06:04,000 --> 00:06:06,000
issue or the vulnerability they

154
00:06:06,000 --> 00:06:07,919
they actually sometimes

155
00:06:07,919 --> 00:06:09,039
um

156
00:06:09,039 --> 00:06:11,440
what should i say start the upgradation

157
00:06:11,440 --> 00:06:13,840
part or the fix for it but so that the

158
00:06:13,840 --> 00:06:15,680
potential issues or the security flaws

159
00:06:15,680 --> 00:06:18,319
can be fixed as soon as possible

160
00:06:18,319 --> 00:06:21,280
now uh this uh code scanning tools have

161
00:06:21,280 --> 00:06:23,280
multiple categories

162
00:06:23,280 --> 00:06:25,360
uh for example sas

163
00:06:25,360 --> 00:06:27,600
security secrets detection dependency

164
00:06:27,600 --> 00:06:30,960
scanning dots is nrsap so we'll discuss

165
00:06:30,960 --> 00:06:32,720
it in our detail

166
00:06:32,720 --> 00:06:34,639
the sas is generally known as a white

167
00:06:34,639 --> 00:06:37,759
boxing testing part so it is the most

168
00:06:37,759 --> 00:06:40,240
common and most widely used and it is

169
00:06:40,240 --> 00:06:42,400
also one of the earliest

170
00:06:42,400 --> 00:06:44,560
testing category that exists

171
00:06:44,560 --> 00:06:47,360
in this basically uh our application

172
00:06:47,360 --> 00:06:49,360
source code is scanned to discover any

173
00:06:49,360 --> 00:06:51,919
vulnerability that exists or that might

174
00:06:51,919 --> 00:06:54,160
exist which are already there in the

175
00:06:54,160 --> 00:06:55,280
book

176
00:06:55,280 --> 00:06:58,319
so because but there is a bar uh some

177
00:06:58,319 --> 00:06:59,280
virtual

178
00:06:59,280 --> 00:07:01,360
pinpoint because the sas does not

179
00:07:01,360 --> 00:07:03,680
require an application to be compiled or

180
00:07:03,680 --> 00:07:06,960
running while it's running so it does

181
00:07:06,960 --> 00:07:09,280
not detect the vulnerabilities which can

182
00:07:09,280 --> 00:07:11,440
be uh

183
00:07:11,440 --> 00:07:13,759
arise while running the application

184
00:07:13,759 --> 00:07:15,840
that is solved by the dust the dynamic

185
00:07:15,840 --> 00:07:17,440
application security testing will

186
00:07:17,440 --> 00:07:20,000
continue in a bit part later part

187
00:07:20,000 --> 00:07:21,919
the second part comes as a secure secret

188
00:07:21,919 --> 00:07:24,639
detection so for example if

189
00:07:24,639 --> 00:07:26,319
we have some other application or

190
00:07:26,319 --> 00:07:28,479
dependencies api's tool that we are

191
00:07:28,479 --> 00:07:32,080
using so the api keys become uh

192
00:07:32,080 --> 00:07:34,160
key points which can access our database

193
00:07:34,160 --> 00:07:36,960
or our application through if it's

194
00:07:36,960 --> 00:07:38,800
launched publicly

195
00:07:38,800 --> 00:07:41,199
so unlike sas which is concerned only

196
00:07:41,199 --> 00:07:43,280
with the current version of application

197
00:07:43,280 --> 00:07:45,199
secret detection is concerned with the

198
00:07:45,199 --> 00:07:47,280
history of the project so you might have

199
00:07:47,280 --> 00:07:49,520
seen while using get or github or get

200
00:07:49,520 --> 00:07:50,639
guardian

201
00:07:50,639 --> 00:07:53,440
uh if there is any previous version of

202
00:07:53,440 --> 00:07:55,919
source code which contains a hard coded

203
00:07:55,919 --> 00:07:59,520
secrets within it right then uh it shows

204
00:07:59,520 --> 00:08:01,919
like okay your security key is publicly

205
00:08:01,919 --> 00:08:05,759
available uh it's uh expired or such

206
00:08:05,759 --> 00:08:09,199
so what it does is it um

207
00:08:09,199 --> 00:08:12,319
it continues with the all version system

208
00:08:12,319 --> 00:08:14,319
uh it checks all the source codes and

209
00:08:14,319 --> 00:08:16,639
each versioning so to make sure that

210
00:08:16,639 --> 00:08:18,479
they are not there is no secret

211
00:08:18,479 --> 00:08:20,400
detections or

212
00:08:20,400 --> 00:08:23,280
such tools where it can be used uh being

213
00:08:23,280 --> 00:08:27,360
a popular example is mongodb url so when

214
00:08:27,360 --> 00:08:29,280
someone is using the connection strings

215
00:08:29,280 --> 00:08:31,440
in the secret detection part

216
00:08:31,440 --> 00:08:33,279
and has not stored in an environment

217
00:08:33,279 --> 00:08:34,399
variable

218
00:08:34,399 --> 00:08:36,320
and is hard coded in the application

219
00:08:36,320 --> 00:08:39,039
what happens is if it's public anyone

220
00:08:39,039 --> 00:08:41,519
can use those credentials and use in

221
00:08:41,519 --> 00:08:43,200
their application or access your

222
00:08:43,200 --> 00:08:45,680
application details or the database that

223
00:08:45,680 --> 00:08:47,839
you have built for your customers so

224
00:08:47,839 --> 00:08:48,959
this is a

225
00:08:48,959 --> 00:08:51,040
kind of database this leads to data

226
00:08:51,040 --> 00:08:53,519
breach or data leak generally

227
00:08:53,519 --> 00:08:55,519
the next part comes is the dependency

228
00:08:55,519 --> 00:08:58,480
scanning since uh nowadays most of the

229
00:08:58,480 --> 00:09:01,440
packages are open source and

230
00:09:01,440 --> 00:09:03,200
we have seen in a previous talks of

231
00:09:03,200 --> 00:09:05,279
which are with where this has been

232
00:09:05,279 --> 00:09:07,680
explained in much more detail

233
00:09:07,680 --> 00:09:08,399
uh

234
00:09:08,399 --> 00:09:10,240
what happens if there is a

235
00:09:10,240 --> 00:09:11,839
malicious

236
00:09:11,839 --> 00:09:14,640
core line of codes and such packages

237
00:09:14,640 --> 00:09:16,800
so here dependencies scanning help us to

238
00:09:16,800 --> 00:09:18,880
automatically find find any security

239
00:09:18,880 --> 00:09:21,360
vulnerabilities uh that are present in

240
00:09:21,360 --> 00:09:23,040
our current application or are being

241
00:09:23,040 --> 00:09:25,040
used in our application

242
00:09:25,040 --> 00:09:26,959
so when you are when we are developing

243
00:09:26,959 --> 00:09:28,959
and testing our application for example

244
00:09:28,959 --> 00:09:30,959
when our application is using an

245
00:09:30,959 --> 00:09:33,360
external open source library which is

246
00:09:33,360 --> 00:09:35,279
known to be vulnerable it uh it will

247
00:09:35,279 --> 00:09:37,760
show like okay it's at a high risk it's

248
00:09:37,760 --> 00:09:40,720
at a low risk at some such risk uh

249
00:09:40,720 --> 00:09:42,720
please audit it please fix it please use

250
00:09:42,720 --> 00:09:44,720
the force such kind of things

251
00:09:44,720 --> 00:09:46,880
so uh dependency scanning is very

252
00:09:46,880 --> 00:09:50,560
popular among folks who are uh building

253
00:09:50,560 --> 00:09:53,279
for and by the open source projects or

254
00:09:53,279 --> 00:09:54,160
are

255
00:09:54,160 --> 00:09:56,160
have built their online presence through

256
00:09:56,160 --> 00:09:56,959
that

257
00:09:56,959 --> 00:09:58,560
uh sync being one of the popular

258
00:09:58,560 --> 00:10:00,959
examples for dependency scanning

259
00:10:00,959 --> 00:10:02,560
it shows what vulnerabilities are

260
00:10:02,560 --> 00:10:04,959
present in your application and not

261
00:10:04,959 --> 00:10:07,360
uh then comes the dash the dynamic

262
00:10:07,360 --> 00:10:09,040
application security racing it's a

263
00:10:09,040 --> 00:10:12,079
popularly known as black box texting

264
00:10:12,079 --> 00:10:12,959
right

265
00:10:12,959 --> 00:10:15,040
uh it doesn't find vulnerabilities in a

266
00:10:15,040 --> 00:10:17,040
source code like sas

267
00:10:17,040 --> 00:10:19,120
instead it finds vulnerability while

268
00:10:19,120 --> 00:10:21,040
running the application like running uh

269
00:10:21,040 --> 00:10:23,279
sql injection and such part comes under

270
00:10:23,279 --> 00:10:25,760
dynamic application testing partner

271
00:10:25,760 --> 00:10:28,720
then comes iasd which is also sometimes

272
00:10:28,720 --> 00:10:31,440
called as gray box or

273
00:10:31,440 --> 00:10:32,880
what should i say

274
00:10:32,880 --> 00:10:35,680
basically gray box testing and it is uh

275
00:10:35,680 --> 00:10:39,279
it combines elements for both uh sas and

276
00:10:39,279 --> 00:10:41,839
does sign a maintain simultaneously so

277
00:10:41,839 --> 00:10:44,640
it is preferred in general cases

278
00:10:44,640 --> 00:10:47,680
like we know it source um it does both

279
00:10:47,680 --> 00:10:49,680
the running application part and the

280
00:10:49,680 --> 00:10:50,880
source code

281
00:10:50,880 --> 00:10:53,839
at once so many developers prefer uh

282
00:10:53,839 --> 00:10:54,880
using

283
00:10:54,880 --> 00:10:56,560
isd

284
00:10:56,560 --> 00:10:58,399
then the last part of the category is

285
00:10:58,399 --> 00:11:01,040
runtime applications of self protection

286
00:11:01,040 --> 00:11:04,320
rasp is known popularly it is uh

287
00:11:04,320 --> 00:11:06,800
configured on a server and kicks in only

288
00:11:06,800 --> 00:11:09,360
when an application runs right so it

289
00:11:09,360 --> 00:11:11,760
detects any attack on application in a

290
00:11:11,760 --> 00:11:13,440
real time basis

291
00:11:13,440 --> 00:11:17,360
so uh it protects uh malicious inputs or

292
00:11:17,360 --> 00:11:19,600
behavior by analyzing both the app's

293
00:11:19,600 --> 00:11:22,240
behavior as well as the context of that

294
00:11:22,240 --> 00:11:25,440
behavior so uh once both are deemed to

295
00:11:25,440 --> 00:11:29,600
be uh malicious the uh the alert is

296
00:11:29,600 --> 00:11:31,839
issue

297
00:11:33,200 --> 00:11:35,519
okay the next part comes our ci cd tool

298
00:11:35,519 --> 00:11:37,040
so it is always

299
00:11:37,040 --> 00:11:38,880
better to use you know

300
00:11:38,880 --> 00:11:40,880
or automate everything at the beginning

301
00:11:40,880 --> 00:11:43,120
of the part only so that

302
00:11:43,120 --> 00:11:45,040
when the code when you have written the

303
00:11:45,040 --> 00:11:47,519
code and you have issued the comment or

304
00:11:47,519 --> 00:11:50,320
there is a related code that are being

305
00:11:50,320 --> 00:11:52,880
merged into your package or your piece

306
00:11:52,880 --> 00:11:54,160
of code

307
00:11:54,160 --> 00:11:55,440
software

308
00:11:55,440 --> 00:11:58,480
uh then we build the ci pipeline for the

309
00:11:58,480 --> 00:12:00,639
unit test and integration test it's a

310
00:12:00,639 --> 00:12:03,600
very popular known thing so uh

311
00:12:03,600 --> 00:12:05,600
this actually helps us to know how our

312
00:12:05,600 --> 00:12:08,639
software is working as well as uh if we

313
00:12:08,639 --> 00:12:12,240
integrate our security codes or security

314
00:12:12,240 --> 00:12:14,880
pipelines in it it actually shows us

315
00:12:14,880 --> 00:12:17,920
okay this is the code uh that's are not

316
00:12:17,920 --> 00:12:20,000
running this is the reason

317
00:12:20,000 --> 00:12:20,800
or

318
00:12:20,800 --> 00:12:22,639
in the case of the security

319
00:12:22,639 --> 00:12:24,480
aspect that we are talking about

320
00:12:24,480 --> 00:12:26,399
it shows okay this codes are vulnerable

321
00:12:26,399 --> 00:12:29,040
it's not going to work or okay you have

322
00:12:29,040 --> 00:12:31,680
unleashed your environment variables and

323
00:12:31,680 --> 00:12:32,880
such

324
00:12:32,880 --> 00:12:35,680
right so security controls and tests are

325
00:12:35,680 --> 00:12:37,519
it's a very good practice to actually

326
00:12:37,519 --> 00:12:39,839
embed this at the early and everywhere

327
00:12:39,839 --> 00:12:43,600
in the our sdlc cycle because uh

328
00:12:43,600 --> 00:12:44,800
and they actually need to be in an

329
00:12:44,800 --> 00:12:47,279
automatic fashion okay because when this

330
00:12:47,279 --> 00:12:49,600
are in this foundations are in place we

331
00:12:49,600 --> 00:12:51,920
can actually add our security into

332
00:12:51,920 --> 00:12:54,079
development and the deployment cycle as

333
00:12:54,079 --> 00:12:56,480
well that's the cd pipeline

334
00:12:56,480 --> 00:12:59,200
so code developments uh it's a good

335
00:12:59,200 --> 00:13:01,519
practice that the code development uh

336
00:13:01,519 --> 00:13:03,040
codes from development part to the

337
00:13:03,040 --> 00:13:05,120
production part are generally carried

338
00:13:05,120 --> 00:13:08,720
out by uh the cicd pipeline only and

339
00:13:08,720 --> 00:13:11,440
only when the testing space stage is

340
00:13:11,440 --> 00:13:14,320
completed and approved by the reviewer

341
00:13:14,320 --> 00:13:16,720
or by whatever uh

342
00:13:16,720 --> 00:13:18,639
codes you have written or the test units

343
00:13:18,639 --> 00:13:21,519
we have applied so these actually help

344
00:13:21,519 --> 00:13:24,160
in um you know securing your

345
00:13:24,160 --> 00:13:28,000
software pipelines ci cd pipelines

346
00:13:28,000 --> 00:13:29,600
and the last part that we have come

347
00:13:29,600 --> 00:13:32,079
across as uh post release monitoring

348
00:13:32,079 --> 00:13:32,800
right

349
00:13:32,800 --> 00:13:36,320
so after we have deployed our uh

350
00:13:36,320 --> 00:13:38,480
a piece of software

351
00:13:38,480 --> 00:13:40,800
uh there is generally going to be more

352
00:13:40,800 --> 00:13:43,600
bugs and uh there could be some reports

353
00:13:43,600 --> 00:13:46,399
or something not functioning very well

354
00:13:46,399 --> 00:13:50,160
so uh this is actually uh something that

355
00:13:50,160 --> 00:13:52,240
should be taken care of at the start

356
00:13:52,240 --> 00:13:54,639
right because software development

357
00:13:54,639 --> 00:13:56,880
market is very competitive in general

358
00:13:56,880 --> 00:13:59,040
like every day there are many startups

359
00:13:59,040 --> 00:14:01,279
who are building sas products is

360
00:14:01,279 --> 00:14:02,880
products and much more

361
00:14:02,880 --> 00:14:04,079
and

362
00:14:04,079 --> 00:14:06,160
if you're not dealing well with such

363
00:14:06,160 --> 00:14:08,959
errors problems or security issues at

364
00:14:08,959 --> 00:14:10,880
worst or at the

365
00:14:10,880 --> 00:14:12,720
worst rate at worst it could lead to

366
00:14:12,720 --> 00:14:15,839
data breaches or leaks and it eventually

367
00:14:15,839 --> 00:14:17,920
 down your both your reputation

368
00:14:17,920 --> 00:14:19,920
of your software as well as your

369
00:14:19,920 --> 00:14:22,720
operation of it as we have seen

370
00:14:22,720 --> 00:14:25,120
in many such cases so

371
00:14:25,120 --> 00:14:27,519
when many uh when many companies or the

372
00:14:27,519 --> 00:14:30,160
many people have ideas to write for a

373
00:14:30,160 --> 00:14:32,240
piece of code they generally tend to

374
00:14:32,240 --> 00:14:33,839
focus on creating the functional

375
00:14:33,839 --> 00:14:35,839
requirement and it's it's genuine it's

376
00:14:35,839 --> 00:14:38,560
like a general uh thought okay like the

377
00:14:38,560 --> 00:14:40,320
functional requirements are the primary

378
00:14:40,320 --> 00:14:41,440
priority

379
00:14:41,440 --> 00:14:42,160
but

380
00:14:42,160 --> 00:14:44,959
uh writing security requirements along

381
00:14:44,959 --> 00:14:47,760
with this functional ones can actually

382
00:14:47,760 --> 00:14:50,959
ensure that your security is uh never an

383
00:14:50,959 --> 00:14:53,440
afterthought right so once you have uh

384
00:14:53,440 --> 00:14:55,199
it's not like you have uh

385
00:14:55,199 --> 00:14:57,279
uh if you have functional requirements

386
00:14:57,279 --> 00:15:00,079
are ready but uh after you have launched

387
00:15:00,079 --> 00:15:02,880
and then you will see what kind of uh

388
00:15:02,880 --> 00:15:05,199
security behavior it's exhibiting what

389
00:15:05,199 --> 00:15:08,079
vulnerabilities or uh problems it is uh

390
00:15:08,079 --> 00:15:10,399
uh causing what privacy issues there are

391
00:15:10,399 --> 00:15:11,680
and such

392
00:15:11,680 --> 00:15:13,920
so uh

393
00:15:13,920 --> 00:15:15,760
when uh when we

394
00:15:15,760 --> 00:15:18,399
think it at the beginning of the release

395
00:15:18,399 --> 00:15:20,959
rather than the post it actually helps

396
00:15:20,959 --> 00:15:24,000
out with our whole sdlc cycle starting

397
00:15:24,000 --> 00:15:25,519
from the

398
00:15:25,519 --> 00:15:27,519
requirement analysis to the designing

399
00:15:27,519 --> 00:15:29,519
then planning and then at the last

400
00:15:29,519 --> 00:15:32,720
deployment and the maintenance

401
00:15:32,720 --> 00:15:36,320
so once after uh we have deployed it is

402
00:15:36,320 --> 00:15:38,399
a very um

403
00:15:38,399 --> 00:15:40,720
good thought to actually do a continuous

404
00:15:40,720 --> 00:15:42,800
scan and monitoring to detect and

405
00:15:42,800 --> 00:15:45,040
prevent any kind of vulnerabilities that

406
00:15:45,040 --> 00:15:47,360
are arising or uh either through the

407
00:15:47,360 --> 00:15:48,510
feedbacks or

408
00:15:48,510 --> 00:15:49,839
[Music]

409
00:15:49,839 --> 00:15:51,920
deploying some csd tools to continuously

410
00:15:51,920 --> 00:15:53,199
check those

411
00:15:53,199 --> 00:15:56,000
and each software has their own uh

412
00:15:56,000 --> 00:15:57,839
period of life cycle right

413
00:15:57,839 --> 00:16:00,160
so it is uh it becomes a more important

414
00:16:00,160 --> 00:16:01,519
duty to

415
00:16:01,519 --> 00:16:03,920
actually maintain it very well when the

416
00:16:03,920 --> 00:16:05,680
software is at the tail end of its

417
00:16:05,680 --> 00:16:07,600
lifecycle because throughout the years

418
00:16:07,600 --> 00:16:09,920
throughout its working um at the peak

419
00:16:09,920 --> 00:16:13,040
period it has collected uh data it has

420
00:16:13,040 --> 00:16:15,120
worked with on multiple environments

421
00:16:15,120 --> 00:16:16,959
with multiple

422
00:16:16,959 --> 00:16:20,000
software integrations and much more so

423
00:16:20,000 --> 00:16:22,240
if at the tail end of its life cycle

424
00:16:22,240 --> 00:16:24,800
something mishap happens it becomes a

425
00:16:24,800 --> 00:16:26,320
more severe issue

426
00:16:26,320 --> 00:16:29,120
because all the data that it has stored

427
00:16:29,120 --> 00:16:32,320
or collected or is being used with it it

428
00:16:32,320 --> 00:16:34,639
might all get leaked

429
00:16:34,639 --> 00:16:37,120
that's why after the post release of the

430
00:16:37,120 --> 00:16:39,360
software it uh it is generally it

431
00:16:39,360 --> 00:16:41,759
becomes a harder part to actually you

432
00:16:41,759 --> 00:16:43,839
know check on and keep on checking

433
00:16:43,839 --> 00:16:46,480
whether okay this is going on well or

434
00:16:46,480 --> 00:16:48,560
this is not going on

435
00:16:48,560 --> 00:16:52,000
right and uh there are right now many

436
00:16:52,000 --> 00:16:54,880
more performance states and tools for

437
00:16:54,880 --> 00:16:57,600
actually using this like uh

438
00:16:57,600 --> 00:17:00,880
one being the grafana uh grafana is a

439
00:17:00,880 --> 00:17:02,800
basically it provides a very beautiful

440
00:17:02,800 --> 00:17:04,559
dashboard in which we can bring the

441
00:17:04,559 --> 00:17:06,720
diverse data set that we have collected

442
00:17:06,720 --> 00:17:09,119
through the feedbacks or by the reports

443
00:17:09,119 --> 00:17:11,839
generated the bug reports bug boundaries

444
00:17:11,839 --> 00:17:14,079
and generate alerts if the thresholds

445
00:17:14,079 --> 00:17:16,880
are broken uh alert thresholds are

446
00:17:16,880 --> 00:17:19,679
broken similarly stack storm is another

447
00:17:19,679 --> 00:17:21,839
which is known to

448
00:17:21,839 --> 00:17:23,280
known to cause

449
00:17:23,280 --> 00:17:26,720
uh fix for the problems when necessary

450
00:17:26,720 --> 00:17:30,240
it's being generally used by popular

451
00:17:30,240 --> 00:17:32,480
companies such as netflix data stacks

452
00:17:32,480 --> 00:17:34,000
and much more

453
00:17:34,000 --> 00:17:35,679
and one of the

454
00:17:35,679 --> 00:17:38,320
most uh what should i say

455
00:17:38,320 --> 00:17:39,760
uh good

456
00:17:39,760 --> 00:17:42,640
one of the best i found personally is

457
00:17:42,640 --> 00:17:45,039
the detectify like it's used for

458
00:17:45,039 --> 00:17:47,120
continuously scan developments and

459
00:17:47,120 --> 00:17:48,799
staging and the production environment

460
00:17:48,799 --> 00:17:49,520
so

461
00:17:49,520 --> 00:17:51,440
ah till your

462
00:17:51,440 --> 00:17:53,440
software is in a development process

463
00:17:53,440 --> 00:17:55,440
till it goes to the production and after

464
00:17:55,440 --> 00:17:57,440
that um

465
00:17:57,440 --> 00:17:59,919
detectify continuously keeps scanning on

466
00:17:59,919 --> 00:18:02,160
your

467
00:18:02,480 --> 00:18:04,799
software piece of codes at multiple

468
00:18:04,799 --> 00:18:06,720
location at multiple time according to

469
00:18:06,720 --> 00:18:08,480
what you have chosen

470
00:18:08,480 --> 00:18:10,640
and you can actually check whether at

471
00:18:10,640 --> 00:18:12,799
what point what error is caused or what

472
00:18:12,799 --> 00:18:15,760
alert is being issued what alert uh

473
00:18:15,760 --> 00:18:19,440
uh part is it like uh as we have uh it

474
00:18:19,440 --> 00:18:20,559
all goes through the thread modeling

475
00:18:20,559 --> 00:18:22,320
process and then the thread modeling

476
00:18:22,320 --> 00:18:23,600
presets are

477
00:18:23,600 --> 00:18:26,160
uh designing identify threads so

478
00:18:26,160 --> 00:18:26,960
there

479
00:18:26,960 --> 00:18:28,880
the threads are identified on the basis

480
00:18:28,880 --> 00:18:31,039
of its priority so adding to detectify

481
00:18:31,039 --> 00:18:32,880
does also the same thing

482
00:18:32,880 --> 00:18:35,280
uh it identifies and

483
00:18:35,280 --> 00:18:37,120
helps us to know the

484
00:18:37,120 --> 00:18:38,000
threads

485
00:18:38,000 --> 00:18:40,160
on the priority basis like it's high

486
00:18:40,160 --> 00:18:43,120
it's critical it's low it's medium it

487
00:18:43,120 --> 00:18:46,879
can be ignored and such

488
00:18:47,679 --> 00:18:49,200
so uh

489
00:18:49,200 --> 00:18:52,240
thank you uh i hope that you got to

490
00:18:52,240 --> 00:18:54,240
learn something more about

491
00:18:54,240 --> 00:18:57,280
such part and uh

492
00:18:57,280 --> 00:18:59,280
if there is something that you wish to

493
00:18:59,280 --> 00:19:02,240
ask you can ask

494
00:19:03,840 --> 00:19:06,240
i am generally active on my linkedin and

495
00:19:06,240 --> 00:19:08,559
the twitter where i tweet about or i

496
00:19:08,559 --> 00:19:10,160
tweet a lot about open source

497
00:19:10,160 --> 00:19:12,960
vulnerability cyber security um

498
00:19:12,960 --> 00:19:15,919
how i write few write-ups for hack the

499
00:19:15,919 --> 00:19:17,840
box and try acne

500
00:19:17,840 --> 00:19:19,280
so uh

501
00:19:19,280 --> 00:19:20,799
would love to get you and if you

502
00:19:20,799 --> 00:19:23,280
disagree at any point that i said we can

503
00:19:23,280 --> 00:19:24,559
discuss it over

504
00:19:24,559 --> 00:19:26,720
twitter or linkedin

505
00:19:26,720 --> 00:19:30,360
thanks for coming

506
00:19:39,760 --> 00:19:41,600
thank you so much for that animation

507
00:19:41,600 --> 00:19:43,760
that was a really good talk

508
00:19:43,760 --> 00:19:46,640
um if there are any questions for anime

509
00:19:46,640 --> 00:19:49,520
feel free to pop them in to um the

510
00:19:49,520 --> 00:19:51,120
session as well

511
00:19:51,120 --> 00:19:53,520
um we'll just see if there's anything

512
00:19:53,520 --> 00:19:56,320
that's come through

513
00:19:57,120 --> 00:19:58,799
perfect and you've shared your socials

514
00:19:58,799 --> 00:20:00,720
as well which is awesome so yes um he

515
00:20:00,720 --> 00:20:02,240
will be able to respond to those

516
00:20:02,240 --> 00:20:03,840
questions as well but thank you so much

517
00:20:03,840 --> 00:20:05,760
for that um and we'll let you go but

518
00:20:05,760 --> 00:20:07,120
yeah if there's any questions for an

519
00:20:07,120 --> 00:20:09,280
image feel free to drop them into his

520
00:20:09,280 --> 00:20:10,640
socials and i'm sure he'll be more than

521
00:20:10,640 --> 00:20:12,400
happy to answer but thank you so much

522
00:20:12,400 --> 00:20:14,400
for that talk

523
00:20:14,400 --> 00:20:16,559
thanks thank you and i'm really excited

524
00:20:16,559 --> 00:20:18,799
for the exciting ones i guess uh there

525
00:20:18,799 --> 00:20:21,360
are two more lined up for tomorrow ema

526
00:20:21,360 --> 00:20:22,480
and uh

527
00:20:22,480 --> 00:20:24,000
one more i forgot

528
00:20:24,000 --> 00:20:26,080
uh really excited to see all those and

529
00:20:26,080 --> 00:20:28,400
be a part of it thanks for having me

530
00:20:28,400 --> 00:20:30,559
thank you so much

531
00:20:30,559 --> 00:20:32,080
thank you so much anyways it was

532
00:20:32,080 --> 00:20:33,840
wonderful talk and we are looking

533
00:20:33,840 --> 00:20:36,240
forward to more content from you

534
00:20:36,240 --> 00:20:37,830
thank you

535
00:20:37,830 --> 00:20:41,300
[Music]

