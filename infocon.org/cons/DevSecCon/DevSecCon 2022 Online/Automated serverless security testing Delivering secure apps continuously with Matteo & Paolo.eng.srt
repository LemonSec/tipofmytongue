1
00:00:00,470 --> 00:00:04,319
[Music]

2
00:00:04,400 --> 00:00:07,359
um i think next up we do have matteo

3
00:00:07,359 --> 00:00:09,679
rossi and paulo stagley who will be

4
00:00:09,679 --> 00:00:11,440
talking to us about

5
00:00:11,440 --> 00:00:13,599
automating serverless security testing

6
00:00:13,599 --> 00:00:15,120
so obviously serverless is something

7
00:00:15,120 --> 00:00:18,240
that is increasing a lot in adoption um

8
00:00:18,240 --> 00:00:19,279
you know there's a lot of that that's

9
00:00:19,279 --> 00:00:21,359
happening so this is quite a

10
00:00:21,359 --> 00:00:23,680
um interesting topic and quite current

11
00:00:23,680 --> 00:00:25,359
as well um so we are definitely looking

12
00:00:25,359 --> 00:00:26,960
forward to the topic as well welcome

13
00:00:26,960 --> 00:00:28,160
mateo

14
00:00:28,160 --> 00:00:30,400
thank you very much hello everyone

15
00:00:30,400 --> 00:00:32,479
i'm quite excited after tanya it's an

16
00:00:32,479 --> 00:00:34,719
honor for me

17
00:00:34,719 --> 00:00:37,760
i agree with you that's our house is uh

18
00:00:37,760 --> 00:00:39,840
in front of you and now you're gonna all

19
00:00:39,840 --> 00:00:42,960
jump back for the talk

20
00:00:43,040 --> 00:00:46,160
have the uh i have the

21
00:00:46,160 --> 00:00:47,680
all the slides but

22
00:00:47,680 --> 00:00:50,000
paulo took in the second part of the

23
00:00:50,000 --> 00:00:52,079
episode of this speech

24
00:00:52,079 --> 00:00:53,280
so uh

25
00:00:53,280 --> 00:00:56,670
i can start now and we

26
00:00:56,670 --> 00:00:58,320
[Music]

27
00:00:58,320 --> 00:01:00,160
absolutely so you're going to start now

28
00:01:00,160 --> 00:01:02,480
and then paolo will join in right well

29
00:01:02,480 --> 00:01:04,799
okay but i i should i should

30
00:01:04,799 --> 00:01:06,320
he should uh

31
00:01:06,320 --> 00:01:10,080
already in the backstage but

32
00:01:10,640 --> 00:01:13,439
sure so we'll just pull your slides in

33
00:01:13,439 --> 00:01:15,840
yeah and get started with the talk

34
00:01:15,840 --> 00:01:18,080
um

35
00:01:20,000 --> 00:01:21,439
amazing

36
00:01:21,439 --> 00:01:23,040
yep

37
00:01:23,040 --> 00:01:24,560
okay

38
00:01:24,560 --> 00:01:26,400
perfect you're good to go mateo your

39
00:01:26,400 --> 00:01:28,560
stage is your uh all yours

40
00:01:28,560 --> 00:01:31,119
thank you very much so

41
00:01:31,119 --> 00:01:33,119
morning good morning everyone

42
00:01:33,119 --> 00:01:35,920
i'm mata rosie i am a

43
00:01:35,920 --> 00:01:39,040
security researcher in

44
00:01:39,040 --> 00:01:40,479
in contrast

45
00:01:40,479 --> 00:01:41,439
and

46
00:01:41,439 --> 00:01:45,280
in my past i'm jo i am a worker has a in

47
00:01:45,280 --> 00:01:49,040
a defensive and offensive

48
00:01:49,040 --> 00:01:53,439
field of security and also i

49
00:01:53,680 --> 00:01:56,479
i i was a software developer so i uh

50
00:01:56,479 --> 00:01:59,920
merged all the uh souls for

51
00:01:59,920 --> 00:02:00,640
for

52
00:02:00,640 --> 00:02:03,119
this talk and there is also paolo my

53
00:02:03,119 --> 00:02:04,640
colleagues

54
00:02:04,640 --> 00:02:07,759
hi everyone sorry for the inconvenience

55
00:02:07,759 --> 00:02:09,280
obviously chrome

56
00:02:09,280 --> 00:02:12,400
goes in the exact moment

57
00:02:12,400 --> 00:02:14,640
the stream starts so i'm hi everyone i'm

58
00:02:14,640 --> 00:02:16,000
paulus pali

59
00:02:16,000 --> 00:02:18,640
i'm senior security researcher at contra

60
00:02:18,640 --> 00:02:19,840
security

61
00:02:19,840 --> 00:02:22,400
uh in the past i worked at becky hughes

62
00:02:22,400 --> 00:02:25,040
for uh in cloud engineering and

63
00:02:25,040 --> 00:02:27,599
architecture for

64
00:02:27,599 --> 00:02:29,920
almost five years

65
00:02:29,920 --> 00:02:31,360
okay so

66
00:02:31,360 --> 00:02:34,560
we are starting to talking about a cloud

67
00:02:34,560 --> 00:02:37,120
native application service application

68
00:02:37,120 --> 00:02:38,080
and

69
00:02:38,080 --> 00:02:39,280
for us

70
00:02:39,280 --> 00:02:43,120
this kind of application is not only the

71
00:02:43,120 --> 00:02:45,360
development path pattern

72
00:02:45,360 --> 00:02:46,640
yes of course

73
00:02:46,640 --> 00:02:47,760
we don't

74
00:02:47,760 --> 00:02:49,440
have

75
00:02:49,440 --> 00:02:51,360
the difference from a monolithic

76
00:02:51,360 --> 00:02:54,400
application is quite clear in the

77
00:02:54,400 --> 00:02:57,440
cloud native application we have many

78
00:02:57,440 --> 00:03:00,159
many resources many metro services that

79
00:03:00,159 --> 00:03:01,599
are configured

80
00:03:01,599 --> 00:03:04,480
to talking each other with the events

81
00:03:04,480 --> 00:03:07,519
in monolithic application we have a

82
00:03:07,519 --> 00:03:10,800
great code base that handle all the flow

83
00:03:10,800 --> 00:03:12,640
of the data flow

84
00:03:12,640 --> 00:03:15,200
and to support to develop to create this

85
00:03:15,200 --> 00:03:17,680
kind of application we need to change

86
00:03:17,680 --> 00:03:20,080
all the phases of the

87
00:03:20,080 --> 00:03:21,360
development

88
00:03:21,360 --> 00:03:25,200
we have to change the cycle we cannot uh

89
00:03:25,200 --> 00:03:27,840
proceed with a waterfall approach when

90
00:03:27,840 --> 00:03:29,200
we try to develop this kind of

91
00:03:29,200 --> 00:03:32,720
application we need to go with the agile

92
00:03:32,720 --> 00:03:35,920
method but not only agile high fragile

93
00:03:35,920 --> 00:03:39,599
we needed to approach with the devops

94
00:03:39,599 --> 00:03:40,560
process

95
00:03:40,560 --> 00:03:42,640
the abscess ops process of course

96
00:03:42,640 --> 00:03:43,920
because

97
00:03:43,920 --> 00:03:47,519
we needed to deploy many times

98
00:03:47,519 --> 00:03:49,200
in production

99
00:03:49,200 --> 00:03:50,239
for day

100
00:03:50,239 --> 00:03:52,480
so we need to uh

101
00:03:52,480 --> 00:03:55,200
handle the security we need to handle

102
00:03:55,200 --> 00:03:58,560
this development in different way and so

103
00:03:58,560 --> 00:04:00,879
we have the many uh

104
00:04:00,879 --> 00:04:03,599
many steps to do to deploy in production

105
00:04:03,599 --> 00:04:06,400
and in this kind of application and so

106
00:04:06,400 --> 00:04:07,920
it's a

107
00:04:07,920 --> 00:04:11,439
mandatory need to automate every process

108
00:04:11,439 --> 00:04:14,560
every step to go to

109
00:04:14,560 --> 00:04:16,560
permit the application to go in

110
00:04:16,560 --> 00:04:18,320
production

111
00:04:18,320 --> 00:04:22,720
and also the developers the developers

112
00:04:22,720 --> 00:04:25,360
has more responsibility for

113
00:04:25,360 --> 00:04:27,680
this kind of application because every

114
00:04:27,680 --> 00:04:30,160
developer say usually

115
00:04:30,160 --> 00:04:31,919
needed to deploy in production more

116
00:04:31,919 --> 00:04:33,680
times for a day

117
00:04:33,680 --> 00:04:34,479
so

118
00:04:34,479 --> 00:04:36,479
of course more power

119
00:04:36,479 --> 00:04:39,040
bring more responsibility i don't

120
00:04:39,040 --> 00:04:41,680
remember who said that but

121
00:04:41,680 --> 00:04:43,440
and and so we needed to change

122
00:04:43,440 --> 00:04:46,639
completely uh this kind of approach

123
00:04:46,639 --> 00:04:49,120
we bring in an example of a cloud native

124
00:04:49,120 --> 00:04:51,759
application this is the this graph to

125
00:04:51,759 --> 00:04:54,560
represent a a small application from our

126
00:04:54,560 --> 00:04:58,560
customer so you can you can see it's a

127
00:04:58,560 --> 00:05:00,000
a huge

128
00:05:00,000 --> 00:05:01,919
number there is a huge number of

129
00:05:01,919 --> 00:05:03,199
components

130
00:05:03,199 --> 00:05:05,759
connected each other and communicate to

131
00:05:05,759 --> 00:05:08,000
each other with eagles

132
00:05:08,000 --> 00:05:10,800
so

133
00:05:10,800 --> 00:05:13,199
that's the testing manually this kind of

134
00:05:13,199 --> 00:05:15,680
application is really difficult it's

135
00:05:15,680 --> 00:05:17,759
really difficult to testing manually to

136
00:05:17,759 --> 00:05:19,600
deploy with a

137
00:05:19,600 --> 00:05:22,639
a single process now like i said before

138
00:05:22,639 --> 00:05:25,680
with a single deployment process

139
00:05:25,680 --> 00:05:28,800
uh like a monolithic application

140
00:05:28,800 --> 00:05:30,960
what means i have to change all the

141
00:05:30,960 --> 00:05:34,560
components together no i need to uh to

142
00:05:34,560 --> 00:05:37,520
have a devops approach change see a

143
00:05:37,520 --> 00:05:39,199
single component

144
00:05:39,199 --> 00:05:41,680
why while the other the other

145
00:05:41,680 --> 00:05:44,720
components continue to work with it

146
00:05:44,720 --> 00:05:46,720
so a agree blew up

147
00:05:46,720 --> 00:05:50,000
for example a a green blue meter to

148
00:05:50,000 --> 00:05:53,360
deploy in production

149
00:05:53,360 --> 00:05:56,160
you this is an aws application so you

150
00:05:56,160 --> 00:05:58,800
can see different components with

151
00:05:58,800 --> 00:06:01,680
different color the powerful one is

152
00:06:01,680 --> 00:06:04,880
a gateway so each video will expose the

153
00:06:04,880 --> 00:06:07,919
internally externally

154
00:06:07,919 --> 00:06:09,600
some endpoints

155
00:06:09,600 --> 00:06:12,240
and the orange components are the lambda

156
00:06:12,240 --> 00:06:13,600
why we're talking about orange

157
00:06:13,600 --> 00:06:17,199
components because the lambda is the

158
00:06:17,199 --> 00:06:20,800
component that contains the code

159
00:06:20,800 --> 00:06:23,120
developed by the developers by the cost

160
00:06:23,120 --> 00:06:25,280
the customer

161
00:06:25,280 --> 00:06:28,960
so uh we're talking about events

162
00:06:28,960 --> 00:06:30,960
the architecture

163
00:06:30,960 --> 00:06:33,039
of this kind of application is a event

164
00:06:33,039 --> 00:06:35,759
driving architecture so every components

165
00:06:35,759 --> 00:06:38,960
are talking each other using events the

166
00:06:38,960 --> 00:06:42,160
events trigger the execution of the

167
00:06:42,160 --> 00:06:44,720
components in that case we have a many

168
00:06:44,720 --> 00:06:46,000
trigger

169
00:06:46,000 --> 00:06:47,120
that

170
00:06:47,120 --> 00:06:49,280
sorry many components that generate

171
00:06:49,280 --> 00:06:52,080
events that trigger a lambda function

172
00:06:52,080 --> 00:06:54,880
the lambda function contains your code

173
00:06:54,880 --> 00:06:56,319
and

174
00:06:56,319 --> 00:06:58,240
and how its work the cloud service

175
00:06:58,240 --> 00:07:00,240
provider when

176
00:07:00,240 --> 00:07:02,560
an average trigger the lambda create a

177
00:07:02,560 --> 00:07:04,560
container boot up a container with your

178
00:07:04,560 --> 00:07:05,520
code

179
00:07:05,520 --> 00:07:08,800
run the code and after the execution

180
00:07:08,800 --> 00:07:11,680
terminates the container usually and

181
00:07:11,680 --> 00:07:14,160
this is a another another thing because

182
00:07:14,160 --> 00:07:16,479
the service provider

183
00:07:16,479 --> 00:07:19,120
for performance issue for

184
00:07:19,120 --> 00:07:23,759
issue for performance usually uh can not

185
00:07:23,759 --> 00:07:26,000
terminate the container but reuse it to

186
00:07:26,000 --> 00:07:28,880
handle in other events and this is bring

187
00:07:28,880 --> 00:07:31,759
some so you can bring some security

188
00:07:31,759 --> 00:07:34,400
events we're talking about later

189
00:07:34,400 --> 00:07:37,840
and so in that case your code inside the

190
00:07:37,840 --> 00:07:40,319
lambda and of course with your code

191
00:07:40,319 --> 00:07:41,680
usually

192
00:07:41,680 --> 00:07:45,759
there is also your mistake and your bags

193
00:07:45,759 --> 00:07:49,599
another overview about security aspects

194
00:07:49,599 --> 00:07:50,879
in the lambda

195
00:07:50,879 --> 00:07:53,199
the lambda usually is running in a

196
00:07:53,199 --> 00:07:56,000
container in a read-only environment

197
00:07:56,000 --> 00:07:58,240
except the tnp directory is the only

198
00:07:58,240 --> 00:08:00,720
directory where where you can write

199
00:08:00,720 --> 00:08:01,840
something

200
00:08:01,840 --> 00:08:04,639
it's not wired to the internet

201
00:08:04,639 --> 00:08:06,879
but can reach the internet

202
00:08:06,879 --> 00:08:09,840
this is mean you can talk about you can

203
00:08:09,840 --> 00:08:12,879
talk with the container

204
00:08:12,879 --> 00:08:15,120
with the api gateway with the other

205
00:08:15,120 --> 00:08:18,240
components that expose the service uh

206
00:08:18,240 --> 00:08:20,960
on internet and you cannot communicate

207
00:08:20,960 --> 00:08:22,960
directly with a container but the

208
00:08:22,960 --> 00:08:25,280
container can reach the internet and

209
00:08:25,280 --> 00:08:26,400
with the demo

210
00:08:26,400 --> 00:08:28,080
after the slides

211
00:08:28,080 --> 00:08:30,879
i can show you how to exploit a

212
00:08:30,879 --> 00:08:33,440
vulnerability inside a lambda and the

213
00:08:33,440 --> 00:08:36,159
lambda communicate

214
00:08:36,159 --> 00:08:38,719
to the internet some sensitive data so i

215
00:08:38,719 --> 00:08:41,120
can implement an exfiltration from that

216
00:08:41,120 --> 00:08:42,799
container

217
00:08:42,799 --> 00:08:43,919
the data

218
00:08:43,919 --> 00:08:45,440
usually is a temporary because the

219
00:08:45,440 --> 00:08:47,760
container is ephemeral but

220
00:08:47,760 --> 00:08:49,839
of course for performance issues

221
00:08:49,839 --> 00:08:51,360
sometimes

222
00:08:51,360 --> 00:08:52,839
a container can be

223
00:08:52,839 --> 00:08:57,440
reused and also the code it's inside the

224
00:08:57,440 --> 00:09:00,000
environment it's inside the container so

225
00:09:00,000 --> 00:09:01,519
if you have a

226
00:09:01,519 --> 00:09:04,640
local file inclusion vulnerability lfi

227
00:09:04,640 --> 00:09:08,080
you cannot lost the privacy of your code

228
00:09:08,080 --> 00:09:11,600
an attacker can explicate your code and

229
00:09:11,600 --> 00:09:13,519
also it can explicate the environment

230
00:09:13,519 --> 00:09:16,240
variables and in in this kind of in the

231
00:09:16,240 --> 00:09:18,240
container there is all the sensitive

232
00:09:18,240 --> 00:09:19,600
data the

233
00:09:19,600 --> 00:09:23,040
aws key secret key inside the container

234
00:09:23,040 --> 00:09:25,200
inside the environmental environment

235
00:09:25,200 --> 00:09:27,680
this is some

236
00:09:27,680 --> 00:09:28,959
aspects

237
00:09:28,959 --> 00:09:32,240
we need to understand to create a secure

238
00:09:32,240 --> 00:09:34,800
application

239
00:09:34,959 --> 00:09:37,600
so what could go wrong

240
00:09:37,600 --> 00:09:40,399
in that case uh this is a

241
00:09:40,399 --> 00:09:44,160
simple uh the simpler uh application we

242
00:09:44,160 --> 00:09:46,560
expose this application expose an api

243
00:09:46,560 --> 00:09:48,560
rest to the internet we have the client

244
00:09:48,560 --> 00:09:51,360
that communicates with the api gateway

245
00:09:51,360 --> 00:09:53,839
the api to generate an events that

246
00:09:53,839 --> 00:09:55,040
trigger

247
00:09:55,040 --> 00:09:57,279
the lambda the lambda

248
00:09:57,279 --> 00:09:59,680
run with a call with the contacts with

249
00:09:59,680 --> 00:10:02,160
the rule the rule is the permission the

250
00:10:02,160 --> 00:10:03,040
alarm

251
00:10:03,040 --> 00:10:04,399
used by the lambda

252
00:10:04,399 --> 00:10:06,880
inside the cloud service provider and so

253
00:10:06,880 --> 00:10:08,800
the lambda can access

254
00:10:08,800 --> 00:10:11,279
or read or write i don't know

255
00:10:11,279 --> 00:10:15,279
with a dynamodb instance so could go

256
00:10:15,279 --> 00:10:17,680
wrong with this kind of application i

257
00:10:17,680 --> 00:10:20,399
can test it using a

258
00:10:20,399 --> 00:10:23,120
always up application i can test i can

259
00:10:23,120 --> 00:10:26,160
generate http call to understand if this

260
00:10:26,160 --> 00:10:29,440
application is vulnerable or not

261
00:10:29,440 --> 00:10:30,320
yes

262
00:10:30,320 --> 00:10:33,680
it's true but uh this is a

263
00:10:33,680 --> 00:10:35,839
a kind of cloud native application

264
00:10:35,839 --> 00:10:38,160
what's happened if the events is not

265
00:10:38,160 --> 00:10:39,519
generated

266
00:10:39,519 --> 00:10:42,880
by the api gateway but by i don't know

267
00:10:42,880 --> 00:10:46,079
in alexa skill for example i don't think

268
00:10:46,079 --> 00:10:48,160
they always puts up working with the

269
00:10:48,160 --> 00:10:49,360
audio

270
00:10:49,360 --> 00:10:50,480
audio

271
00:10:50,480 --> 00:10:52,160
trace audio

272
00:10:52,160 --> 00:10:55,120
with multimedia and able to generate you

273
00:10:55,120 --> 00:10:56,720
know

274
00:10:56,720 --> 00:11:00,720
malicious payload in audio it is

275
00:11:00,720 --> 00:11:02,800
different it is a completely different

276
00:11:02,800 --> 00:11:05,519
and we cannot test with the

277
00:11:05,519 --> 00:11:08,959
common security tools

278
00:11:08,959 --> 00:11:09,839
and

279
00:11:09,839 --> 00:11:13,519
i will share with you a

280
00:11:13,519 --> 00:11:16,079
youtube link where um our head of

281
00:11:16,079 --> 00:11:18,320
research fall melamed

282
00:11:18,320 --> 00:11:21,120
try to exploit a sql injection

283
00:11:21,120 --> 00:11:23,120
vulnerability inside

284
00:11:23,120 --> 00:11:24,640
a

285
00:11:24,640 --> 00:11:26,800
an application

286
00:11:26,800 --> 00:11:30,480
with this architecture i i i shall

287
00:11:30,480 --> 00:11:33,440
after this speech

288
00:11:33,440 --> 00:11:34,720
so a quick

289
00:11:34,720 --> 00:11:36,240
demo uh

290
00:11:36,240 --> 00:11:39,839
i want to show you how we can exploit

291
00:11:39,839 --> 00:11:40,720
a

292
00:11:40,720 --> 00:11:42,720
famous spring vulnerability is not

293
00:11:42,720 --> 00:11:45,120
spring for shell but the other one the

294
00:11:45,120 --> 00:11:48,079
spring explosion language vulnerability

295
00:11:48,079 --> 00:11:50,480
this is these generate a remote code

296
00:11:50,480 --> 00:11:52,079
execution this

297
00:11:52,079 --> 00:11:53,839
is a bug

298
00:11:53,839 --> 00:11:56,399
and so i will show you how we can

299
00:11:56,399 --> 00:11:58,720
exploit this to exfiltrate some

300
00:11:58,720 --> 00:12:01,600
sensitive data from a container

301
00:12:01,600 --> 00:12:03,519
of course one of them effect it's not

302
00:12:03,519 --> 00:12:05,760
the effect so you can see

303
00:12:05,760 --> 00:12:09,279
i insert a payload in a header http

304
00:12:09,279 --> 00:12:12,000
header the root expression header from

305
00:12:12,000 --> 00:12:13,360
spring

306
00:12:13,360 --> 00:12:16,560
i run the uh i make the call with the

307
00:12:16,560 --> 00:12:19,279
postman in that case

308
00:12:19,279 --> 00:12:23,200
and i try to explicate this data using a

309
00:12:23,200 --> 00:12:25,200
server in my control

310
00:12:25,200 --> 00:12:27,360
and you can you see in the bottom part

311
00:12:27,360 --> 00:12:28,480
of the

312
00:12:28,480 --> 00:12:29,760
of the screen

313
00:12:29,760 --> 00:12:32,800
the secret key exfiltrated from the

314
00:12:32,800 --> 00:12:34,079
container

315
00:12:34,079 --> 00:12:38,160
what's happened what happens

316
00:12:38,160 --> 00:12:39,600
i uh

317
00:12:39,600 --> 00:12:42,320
if there is a bug a vulnerability inside

318
00:12:42,320 --> 00:12:44,800
the spring framework if you want to use

319
00:12:44,800 --> 00:12:46,800
spring spring framework in the lambda

320
00:12:46,800 --> 00:12:49,279
you can do you can use it

321
00:12:49,279 --> 00:12:50,800
and when you

322
00:12:50,800 --> 00:12:52,880
trigger the lambda

323
00:12:52,880 --> 00:12:54,800
the counter cloud service provider are

324
00:12:54,800 --> 00:12:57,839
going to call a function from the frame

325
00:12:57,839 --> 00:13:00,480
of the spring framework that function

326
00:13:00,480 --> 00:13:02,000
has a value

327
00:13:02,000 --> 00:13:04,240
this buggers can exploit it in this way

328
00:13:04,240 --> 00:13:07,120
with a simple payload inserting an http

329
00:13:07,120 --> 00:13:08,880
header and

330
00:13:08,880 --> 00:13:10,880
something can happen in that case i

331
00:13:10,880 --> 00:13:13,360
experienced the secret and so using that

332
00:13:13,360 --> 00:13:16,320
secret i can run some code in the same

333
00:13:16,320 --> 00:13:18,880
context of that lambda

334
00:13:18,880 --> 00:13:22,720
with the same permission of that land

335
00:13:22,720 --> 00:13:25,920
so it's quite clear that the

336
00:13:25,920 --> 00:13:28,320
one of one of the things that we we're

337
00:13:28,320 --> 00:13:29,680
going to lose

338
00:13:29,680 --> 00:13:32,160
when we approach with the cloud native

339
00:13:32,160 --> 00:13:33,760
application

340
00:13:33,760 --> 00:13:35,600
we lost the perimeter

341
00:13:35,600 --> 00:13:37,839
in the monolithic application we have a

342
00:13:37,839 --> 00:13:40,399
load balancer or reverse proxy in front

343
00:13:40,399 --> 00:13:42,560
of the application

344
00:13:42,560 --> 00:13:43,760
sorry

345
00:13:43,760 --> 00:13:45,519
in front of the verification and the

346
00:13:45,519 --> 00:13:49,360
load balancer route every a very cool to

347
00:13:49,360 --> 00:13:52,880
the components that have to handle that

348
00:13:52,880 --> 00:13:54,720
that flow

349
00:13:54,720 --> 00:13:56,160
and every

350
00:13:56,160 --> 00:13:58,320
after the load balancer every

351
00:13:58,320 --> 00:14:00,399
flow are handled by the monolithic

352
00:14:00,399 --> 00:14:02,079
application

353
00:14:02,079 --> 00:14:03,680
in the cloud the native application the

354
00:14:03,680 --> 00:14:06,240
serverless application doesn't

355
00:14:06,240 --> 00:14:08,000
it's not true it's not true anymore

356
00:14:08,000 --> 00:14:09,440
because okay

357
00:14:09,440 --> 00:14:11,680
i have an api gateway that

358
00:14:11,680 --> 00:14:12,560
root

359
00:14:12,560 --> 00:14:15,199
a single call a single kind of call but

360
00:14:15,199 --> 00:14:18,079
i i can have more api between

361
00:14:18,079 --> 00:14:21,120
that cool that trigger more different

362
00:14:21,120 --> 00:14:22,720
kind of lambda

363
00:14:22,720 --> 00:14:25,440
but also if i have to upload the file i

364
00:14:25,440 --> 00:14:27,760
have s3 bucket

365
00:14:27,760 --> 00:14:30,079
that take the file trigger and events

366
00:14:30,079 --> 00:14:32,639
and call another function so we we're

367
00:14:32,639 --> 00:14:35,440
going to lose this perimeter

368
00:14:35,440 --> 00:14:38,079
and so we needed to

369
00:14:38,079 --> 00:14:39,120
change

370
00:14:39,120 --> 00:14:42,240
the way how we secure the application

371
00:14:42,240 --> 00:14:45,440
we need to go to a zero thrust approach

372
00:14:45,440 --> 00:14:48,800
a least privileged approach to uh secure

373
00:14:48,800 --> 00:14:49,600
the

374
00:14:49,600 --> 00:14:52,480
the perimeter of each lambda

375
00:14:52,480 --> 00:14:55,680
and of course we have to go through the

376
00:14:55,680 --> 00:14:57,519
self-protecting code

377
00:14:57,519 --> 00:15:00,399
we we need to ha to harden each

378
00:15:00,399 --> 00:15:04,639
components of this kind of application

379
00:15:04,959 --> 00:15:07,440
another example in this case i talked

380
00:15:07,440 --> 00:15:09,360
about the list privilege approach you

381
00:15:09,360 --> 00:15:13,440
know we have a very simple uh

382
00:15:13,440 --> 00:15:15,000
lambda

383
00:15:15,000 --> 00:15:17,440
2020 line of code

384
00:15:17,440 --> 00:15:19,519
this is a

385
00:15:19,519 --> 00:15:22,320
lambda that creates that place

386
00:15:22,320 --> 00:15:24,160
in order in e-commerce in a

387
00:15:24,160 --> 00:15:27,360
cloud-the-native e-commerce and you can

388
00:15:27,360 --> 00:15:29,199
see in uh

389
00:15:29,199 --> 00:15:32,959
in this line we have a dynamodb instance

390
00:15:32,959 --> 00:15:35,040
a table or the stable

391
00:15:35,040 --> 00:15:38,079
and we can see the code

392
00:15:38,079 --> 00:15:40,240
going to put an item inside that table

393
00:15:40,240 --> 00:15:43,440
no only one order

394
00:15:43,440 --> 00:15:46,959
so the context the rule used by this uh

395
00:15:46,959 --> 00:15:52,160
uh this function is a this this is

396
00:15:52,160 --> 00:15:55,680
the rule is uh the permission of how

397
00:15:55,680 --> 00:15:58,720
the lambda can do

398
00:15:58,720 --> 00:15:59,759
um

399
00:15:59,759 --> 00:16:02,560
in that case we have an action so the

400
00:16:02,560 --> 00:16:06,320
permission and the resources over uh

401
00:16:06,320 --> 00:16:07,839
used by the

402
00:16:07,839 --> 00:16:10,320
in that case this lambda can do any

403
00:16:10,320 --> 00:16:12,240
action in dynamic b

404
00:16:12,240 --> 00:16:14,880
in any table of this distance of

405
00:16:14,880 --> 00:16:16,560
dynamodb

406
00:16:16,560 --> 00:16:19,839
it's quite to open permission

407
00:16:19,839 --> 00:16:21,519
so we we see

408
00:16:21,519 --> 00:16:25,199
we use only pathetic so we can

409
00:16:25,199 --> 00:16:27,519
harden this rule and

410
00:16:27,519 --> 00:16:31,040
put only the patent action to

411
00:16:31,040 --> 00:16:32,079
avoid

412
00:16:32,079 --> 00:16:32,880
this

413
00:16:32,880 --> 00:16:35,440
lambda make some other

414
00:16:35,440 --> 00:16:36,639
action

415
00:16:36,639 --> 00:16:38,720
and of course the resource

416
00:16:38,720 --> 00:16:42,160
only the orders database or orders table

417
00:16:42,160 --> 00:16:44,480
the all the access to the other tables

418
00:16:44,480 --> 00:16:49,040
is not unused in islam so why give the

419
00:16:49,040 --> 00:16:50,959
permission you know

420
00:16:50,959 --> 00:16:53,279
so it's quite easy to do this manually

421
00:16:53,279 --> 00:16:55,279
with a only one function

422
00:16:55,279 --> 00:16:56,160
of

423
00:16:56,160 --> 00:16:59,920
20 hundred line of code 20 uh line of

424
00:16:59,920 --> 00:17:03,839
code but what's happened if you have the

425
00:17:03,839 --> 00:17:05,520
of lambda code

426
00:17:05,520 --> 00:17:06,720
more long

427
00:17:06,720 --> 00:17:07,760
more

428
00:17:07,760 --> 00:17:09,520
under the line of code of under the

429
00:17:09,520 --> 00:17:11,359
lambda it's quite difficult to do this

430
00:17:11,359 --> 00:17:14,079
uh manually and so we need to automate

431
00:17:14,079 --> 00:17:15,439
these process

432
00:17:15,439 --> 00:17:19,599
using a der cycle that is approach

433
00:17:19,599 --> 00:17:21,599
so we're talking about uh available

434
00:17:21,599 --> 00:17:23,359
driving application now

435
00:17:23,359 --> 00:17:24,880
so we're talking about the change

436
00:17:24,880 --> 00:17:27,679
approach change how we can see

437
00:17:27,679 --> 00:17:28,559
how

438
00:17:28,559 --> 00:17:31,600
you can see the security in the cloud

439
00:17:31,600 --> 00:17:34,480
native application and also

440
00:17:34,480 --> 00:17:37,120
i think everyone knew the top 10 hour

441
00:17:37,120 --> 00:17:39,600
was that also was the

442
00:17:39,600 --> 00:17:42,160
change the top 10 adapter to the cloud

443
00:17:42,160 --> 00:17:44,799
native application in the case

444
00:17:44,799 --> 00:17:47,679
i show you the top 10 for a service

445
00:17:47,679 --> 00:17:49,840
application and of course the first one

446
00:17:49,840 --> 00:17:52,400
is event injection we're talking about

447
00:17:52,400 --> 00:17:55,039
event drive and application so it's a

448
00:17:55,039 --> 00:17:56,799
natural it's obviously

449
00:17:56,799 --> 00:17:57,760
so

450
00:17:57,760 --> 00:18:00,960
uh paulo up to you thank you very much

451
00:18:00,960 --> 00:18:04,760
guys thank you very much

452
00:18:15,919 --> 00:18:16,799
so

453
00:18:16,799 --> 00:18:17,760
um

454
00:18:17,760 --> 00:18:20,080
how we can test uh serverless

455
00:18:20,080 --> 00:18:21,600
application

456
00:18:21,600 --> 00:18:24,240
uh let's see how low we can okay

457
00:18:24,240 --> 00:18:28,160
now we can see okay thank you sorry

458
00:18:28,160 --> 00:18:29,120
um

459
00:18:29,120 --> 00:18:31,280
so how we can test a serverless

460
00:18:31,280 --> 00:18:33,679
application i have taken

461
00:18:33,679 --> 00:18:37,520
uh this example from aws case studies

462
00:18:37,520 --> 00:18:39,120
website

463
00:18:39,120 --> 00:18:40,559
uh it's a

464
00:18:40,559 --> 00:18:43,600
from from the irobot roomba

465
00:18:43,600 --> 00:18:44,640
system

466
00:18:44,640 --> 00:18:47,840
this is just uh one flow of the entire

467
00:18:47,840 --> 00:18:51,520
system but it's a good uh simple example

468
00:18:51,520 --> 00:18:53,520
uh to see uh

469
00:18:53,520 --> 00:18:57,840
for for the torque so as you can see

470
00:18:58,080 --> 00:19:00,480
a device

471
00:19:00,480 --> 00:19:04,640
sorry a device in a robot roomba try to

472
00:19:04,640 --> 00:19:07,600
register himself on the system so you

473
00:19:07,600 --> 00:19:08,640
have an

474
00:19:08,640 --> 00:19:10,720
api exposed using

475
00:19:10,720 --> 00:19:14,240
api gateway api gateway trigger

476
00:19:14,240 --> 00:19:15,679
lambda

477
00:19:15,679 --> 00:19:17,360
that talk

478
00:19:17,360 --> 00:19:20,880
with the ws iot and send a message into

479
00:19:20,880 --> 00:19:22,320
the queue

480
00:19:22,320 --> 00:19:25,120
the message in the queue trigger uh

481
00:19:25,120 --> 00:19:26,320
um

482
00:19:26,320 --> 00:19:28,080
another lambda

483
00:19:28,080 --> 00:19:29,120
that

484
00:19:29,120 --> 00:19:31,760
called another lambda that completed the

485
00:19:31,760 --> 00:19:35,200
registration process adding

486
00:19:35,200 --> 00:19:36,960
the the right information in the

487
00:19:36,960 --> 00:19:38,799
registry

488
00:19:38,799 --> 00:19:43,360
setting the policies and the iot rules

489
00:19:44,160 --> 00:19:46,799
a simple application and let's see what

490
00:19:46,799 --> 00:19:48,960
we can do with traditional application

491
00:19:48,960 --> 00:19:51,200
security tools

492
00:19:51,200 --> 00:19:54,240
on this application how we can test it

493
00:19:54,240 --> 00:19:57,360
let's start with the easy one sca and

494
00:19:57,360 --> 00:19:59,120
image scanning

495
00:19:59,120 --> 00:19:59,840
uh

496
00:19:59,840 --> 00:20:02,640
so you can you you can run sneak or

497
00:20:02,640 --> 00:20:06,240
clear or any other tool there are many

498
00:20:06,240 --> 00:20:09,440
also open source and provided also by

499
00:20:09,440 --> 00:20:12,159
a cloud service provider

500
00:20:12,159 --> 00:20:13,679
with this

501
00:20:13,679 --> 00:20:16,080
type of tools you fix

502
00:20:16,080 --> 00:20:18,240
the problems that you import using the

503
00:20:18,240 --> 00:20:20,720
third-party library so which is a

504
00:20:20,720 --> 00:20:22,159
good thing

505
00:20:22,159 --> 00:20:24,640
as we have seen recently with the

506
00:20:24,640 --> 00:20:25,679
most

507
00:20:25,679 --> 00:20:27,200
important

508
00:20:27,200 --> 00:20:28,799
vulnerabilities

509
00:20:28,799 --> 00:20:30,880
but this

510
00:20:30,880 --> 00:20:33,919
this scan covers a small part of your

511
00:20:33,919 --> 00:20:35,039
application

512
00:20:35,039 --> 00:20:38,240
it doesn't cover your code

513
00:20:38,240 --> 00:20:40,159
the infrastructure that support your

514
00:20:40,159 --> 00:20:42,559
code and the configuration

515
00:20:42,559 --> 00:20:45,840
as mateo was talking a few minutes ago

516
00:20:45,840 --> 00:20:47,039
of your

517
00:20:47,039 --> 00:20:49,440
lambdas and yours and your cloud

518
00:20:49,440 --> 00:20:52,000
services

519
00:20:52,159 --> 00:20:55,840
uh the next infrastructure is code uh

520
00:20:55,840 --> 00:20:58,720
fantastic thing so we can shift left we

521
00:20:58,720 --> 00:21:00,000
can

522
00:21:00,000 --> 00:21:00,840
do

523
00:21:00,840 --> 00:21:03,280
devops we can run

524
00:21:03,280 --> 00:21:05,600
a security scan

525
00:21:05,600 --> 00:21:06,880
of your

526
00:21:06,880 --> 00:21:09,039
terraform template or if you're using

527
00:21:09,039 --> 00:21:11,039
polumi you can

528
00:21:11,039 --> 00:21:12,159
scan

529
00:21:12,159 --> 00:21:13,440
your code

530
00:21:13,440 --> 00:21:14,480
but

531
00:21:14,480 --> 00:21:16,480
again we have

532
00:21:16,480 --> 00:21:19,919
zero code coverage limited visibility

533
00:21:19,919 --> 00:21:22,159
and also we don't have prioritization

534
00:21:22,159 --> 00:21:24,080
because these type of tools

535
00:21:24,080 --> 00:21:26,480
for example

536
00:21:26,480 --> 00:21:29,760
give you that as a result that you have

537
00:21:29,760 --> 00:21:32,720
hundreds of public buckets

538
00:21:32,720 --> 00:21:35,520
without so much context so you have to

539
00:21:35,520 --> 00:21:37,760
go and check each one of them but

540
00:21:37,760 --> 00:21:40,159
if you are for example exposing a

541
00:21:40,159 --> 00:21:42,159
website is lazy to have

542
00:21:42,159 --> 00:21:44,720
public buckets and but maybe in some

543
00:21:44,720 --> 00:21:47,120
cases no so you have to check one by one

544
00:21:47,120 --> 00:21:50,720
and is uh is adding effort and noise to

545
00:21:50,720 --> 00:21:54,799
your to your um to your work

546
00:21:55,039 --> 00:21:59,120
i asked so iest is the modern upset tool

547
00:21:59,120 --> 00:22:00,559
i think is the

548
00:22:00,559 --> 00:22:02,640
most accurate and reliable tool that we

549
00:22:02,640 --> 00:22:05,840
have today enables devsecops

550
00:22:05,840 --> 00:22:07,039
but

551
00:22:07,039 --> 00:22:08,240
again

552
00:22:08,240 --> 00:22:10,080
in this environment we don't have

553
00:22:10,080 --> 00:22:12,799
servers to instruments so it's difficult

554
00:22:12,799 --> 00:22:15,440
to put in place ios in a serverless

555
00:22:15,440 --> 00:22:18,000
environment

556
00:22:18,720 --> 00:22:19,840
dust

557
00:22:19,840 --> 00:22:22,159
duster is another

558
00:22:22,159 --> 00:22:24,480
great tool

559
00:22:24,480 --> 00:22:26,480
but it needs uh

560
00:22:26,480 --> 00:22:28,640
endpoints to be tested

561
00:22:28,640 --> 00:22:31,200
it needs the response to uh

562
00:22:31,200 --> 00:22:32,559
to be checked

563
00:22:32,559 --> 00:22:34,960
and in serverless environment

564
00:22:34,960 --> 00:22:38,320
is not always the case uh looking at

565
00:22:38,320 --> 00:22:39,840
these

566
00:22:39,840 --> 00:22:42,559
at our example

567
00:22:42,559 --> 00:22:43,600
uh

568
00:22:43,600 --> 00:22:46,720
you you may be able to test the this api

569
00:22:46,720 --> 00:22:50,320
exposed by the by the gateway and maybe

570
00:22:50,320 --> 00:22:53,120
the code of this lambda if the lambda is

571
00:22:53,120 --> 00:22:56,480
synchronous but in many cases

572
00:22:56,480 --> 00:22:57,679
the

573
00:22:57,679 --> 00:23:00,640
we have an asynchronous response like we

574
00:23:00,640 --> 00:23:03,280
got your request you are all set

575
00:23:03,280 --> 00:23:06,320
uh that's it so you don't have

576
00:23:06,320 --> 00:23:09,280
something to check in the response

577
00:23:09,280 --> 00:23:11,840
uh so again maybe you are able to

578
00:23:11,840 --> 00:23:14,080
to test this part of your application

579
00:23:14,080 --> 00:23:15,919
but for sure you are not able to test

580
00:23:15,919 --> 00:23:18,240
this part that is triggered by the

581
00:23:18,240 --> 00:23:20,559
queue message so you is

582
00:23:20,559 --> 00:23:23,280
not possible to reach and to cover this

583
00:23:23,280 --> 00:23:25,760
piece of code using

584
00:23:25,760 --> 00:23:27,280
using dust

585
00:23:27,280 --> 00:23:28,500
so

586
00:23:28,500 --> 00:23:30,559
[Music]

587
00:23:30,559 --> 00:23:33,120
you may have nothing to test

588
00:23:33,120 --> 00:23:36,360
with dust

589
00:23:37,200 --> 00:23:39,919
sasta is another great tool that can

590
00:23:39,919 --> 00:23:41,039
give you

591
00:23:41,039 --> 00:23:43,120
uh great feedback on the code of all

592
00:23:43,120 --> 00:23:45,200
your lambdas you can run fast on all

593
00:23:45,200 --> 00:23:48,880
your lambdas even if maybe you may have

594
00:23:48,880 --> 00:23:51,840
some uh issues on scaling if you have a

595
00:23:51,840 --> 00:23:53,360
lot of lambdas

596
00:23:53,360 --> 00:23:55,840
but the main issue with sasta is the

597
00:23:55,840 --> 00:23:57,520
fact that you don't have context you

598
00:23:57,520 --> 00:23:59,520
lose the context because

599
00:23:59,520 --> 00:24:01,840
serverless is not just code is code and

600
00:24:01,840 --> 00:24:03,200
infrastructure

601
00:24:03,200 --> 00:24:06,080
and sas tools are not able to are not

602
00:24:06,080 --> 00:24:08,159
configured to look at the

603
00:24:08,159 --> 00:24:10,640
infrastructure and the configuration

604
00:24:10,640 --> 00:24:12,320
so you may

605
00:24:12,320 --> 00:24:14,320
lose

606
00:24:14,320 --> 00:24:17,120
context and also you may

607
00:24:17,120 --> 00:24:18,960
have some difficulties due to the flow

608
00:24:18,960 --> 00:24:21,279
because the flow

609
00:24:21,279 --> 00:24:23,520
is not

610
00:24:23,520 --> 00:24:25,919
linear so you may have in the in the

611
00:24:25,919 --> 00:24:27,919
middle of your lambda accord to another

612
00:24:27,919 --> 00:24:29,600
cloud native service

613
00:24:29,600 --> 00:24:30,559
and

614
00:24:30,559 --> 00:24:34,000
so the the tool can provide you

615
00:24:34,000 --> 00:24:34,880
a

616
00:24:34,880 --> 00:24:37,520
strange result or increase the number of

617
00:24:37,520 --> 00:24:39,760
faults positive so

618
00:24:39,760 --> 00:24:41,440
as you can see

619
00:24:41,440 --> 00:24:42,720
uh

620
00:24:42,720 --> 00:24:44,640
there are um

621
00:24:44,640 --> 00:24:46,799
many tools each one of them is giving

622
00:24:46,799 --> 00:24:49,039
you something so it's good to run

623
00:24:49,039 --> 00:24:51,919
but it's also a lot of effort put them

624
00:24:51,919 --> 00:24:54,000
in place in a serverless environment and

625
00:24:54,000 --> 00:24:56,960
maybe it's not worth it because

626
00:24:56,960 --> 00:24:58,640
the results are not

627
00:24:58,640 --> 00:25:02,080
effective uh in addition to this uh

628
00:25:02,080 --> 00:25:03,760
there is another key

629
00:25:03,760 --> 00:25:06,400
point in in cloud native and serverless

630
00:25:06,400 --> 00:25:09,200
environment that is scaling so

631
00:25:09,200 --> 00:25:14,640
uh it may be enough or if you have

632
00:25:14,640 --> 00:25:16,320
few lambdas

633
00:25:16,320 --> 00:25:17,200
but

634
00:25:17,200 --> 00:25:20,240
what if you start having

635
00:25:20,240 --> 00:25:22,640
thousands or if not million as we have

636
00:25:22,640 --> 00:25:25,679
seen in some of our customers lambdas so

637
00:25:25,679 --> 00:25:28,080
in that case you have a lot of services

638
00:25:28,080 --> 00:25:29,600
it's difficult to understand what is

639
00:25:29,600 --> 00:25:32,000
connected to what

640
00:25:32,000 --> 00:25:34,240
also you are you have frequent

641
00:25:34,240 --> 00:25:36,240
deployments because

642
00:25:36,240 --> 00:25:38,080
devops and cloud

643
00:25:38,080 --> 00:25:40,799
are environments that

644
00:25:40,799 --> 00:25:43,440
increase the number of deployments

645
00:25:43,440 --> 00:25:44,880
you obviously

646
00:25:44,880 --> 00:25:46,720
if you have many lambdas you have many

647
00:25:46,720 --> 00:25:48,720
developers and

648
00:25:48,720 --> 00:25:50,799
the number of upsec

649
00:25:50,799 --> 00:25:53,440
people remain normally the same

650
00:25:53,440 --> 00:25:56,320
so it's uh and as matteo was showing

651
00:25:56,320 --> 00:25:57,279
before

652
00:25:57,279 --> 00:25:59,520
security is not even the same in a

653
00:25:59,520 --> 00:26:02,799
surprise environment so

654
00:26:03,520 --> 00:26:06,080
basically you you may lose what the

655
00:26:06,080 --> 00:26:08,240
focus on what's important because as you

656
00:26:08,240 --> 00:26:10,880
know in security uh

657
00:26:10,880 --> 00:26:12,880
it's not possible to look at everything

658
00:26:12,880 --> 00:26:15,039
so you have to prioritize based on the

659
00:26:15,039 --> 00:26:17,039
risk of

660
00:26:17,039 --> 00:26:20,559
of of of vulnerabilities and

661
00:26:20,559 --> 00:26:23,440
so with all this noise and all these

662
00:26:23,440 --> 00:26:26,240
things to look at you can lose the focus

663
00:26:26,240 --> 00:26:29,200
on what's important

664
00:26:29,360 --> 00:26:32,080
so we suggest to have a different

665
00:26:32,080 --> 00:26:35,520
approach with a different mindset

666
00:26:35,520 --> 00:26:40,320
that is installing us an agent in our in

667
00:26:40,320 --> 00:26:41,220
your

668
00:26:41,220 --> 00:26:42,480
[Music]

669
00:26:42,480 --> 00:26:44,320
cloud environment

670
00:26:44,320 --> 00:26:46,640
using a seamless and fully automated

671
00:26:46,640 --> 00:26:48,640
onboarding that is possible in the cloud

672
00:26:48,640 --> 00:26:50,159
with few clicks

673
00:26:50,159 --> 00:26:52,880
and then this uh agent can run a full

674
00:26:52,880 --> 00:26:54,640
discovery of

675
00:26:54,640 --> 00:26:56,720
of your of your cloud environment

676
00:26:56,720 --> 00:26:58,480
looking at resources

677
00:26:58,480 --> 00:27:00,320
the relation between the resources the

678
00:27:00,320 --> 00:27:02,320
interfaces policies

679
00:27:02,320 --> 00:27:04,480
and also all the services that are used

680
00:27:04,480 --> 00:27:06,400
within the environment

681
00:27:06,400 --> 00:27:08,320
when the discovery is done

682
00:27:08,320 --> 00:27:11,440
we can the agent can run an analysis

683
00:27:11,440 --> 00:27:14,000
that look at your code first and

684
00:27:14,000 --> 00:27:16,400
foremost then are the weaknesses at the

685
00:27:16,400 --> 00:27:18,880
other surface the flows that you have in

686
00:27:18,880 --> 00:27:21,520
your system

687
00:27:21,520 --> 00:27:24,159
so that then using this information the

688
00:27:24,159 --> 00:27:27,120
agent can generate and execute dedicated

689
00:27:27,120 --> 00:27:29,919
attacks on resources and flows

690
00:27:29,919 --> 00:27:31,919
for example if you have a lambda

691
00:27:31,919 --> 00:27:33,440
triggered by

692
00:27:33,440 --> 00:27:36,320
an s3 bucket

693
00:27:37,120 --> 00:27:40,720
we can the system can generate

694
00:27:40,720 --> 00:27:44,640
dedicated attacks to see if the the

695
00:27:44,640 --> 00:27:46,720
the lambda is vulnerable to local file

696
00:27:46,720 --> 00:27:51,600
inclusion or other type of attacks

697
00:27:51,840 --> 00:27:52,720
so

698
00:27:52,720 --> 00:27:56,559
when going continuing in the flow

699
00:27:56,559 --> 00:27:59,600
as as we have an agent installed

700
00:27:59,600 --> 00:28:02,480
in the in the environment we can see we

701
00:28:02,480 --> 00:28:05,120
are internally so we can see

702
00:28:05,120 --> 00:28:05,919
uh

703
00:28:05,919 --> 00:28:06,720
if

704
00:28:06,720 --> 00:28:08,320
the simulation

705
00:28:08,320 --> 00:28:10,159
have an effect so if there is a real

706
00:28:10,159 --> 00:28:14,159
exploit or not so we are not like dust

707
00:28:14,159 --> 00:28:15,039
uh

708
00:28:15,039 --> 00:28:17,679
that we are outside so and we test the

709
00:28:17,679 --> 00:28:19,360
application as a black box in this case

710
00:28:19,360 --> 00:28:22,399
we are in and we can check many we can

711
00:28:22,399 --> 00:28:24,559
check the logs we can check the database

712
00:28:24,559 --> 00:28:25,760
we can check

713
00:28:25,760 --> 00:28:28,720
we can use many uh services and tools to

714
00:28:28,720 --> 00:28:32,399
check if we have a real exploit and show

715
00:28:32,399 --> 00:28:35,919
and and send it back to you

716
00:28:35,919 --> 00:28:38,399
in addition to reporting and integration

717
00:28:38,399 --> 00:28:39,520
because maybe if there is a

718
00:28:39,520 --> 00:28:42,320
vulnerability or some or some findings

719
00:28:42,320 --> 00:28:44,799
you can send a message

720
00:28:44,799 --> 00:28:47,200
into a slack channel

721
00:28:47,200 --> 00:28:48,720
the nice thing is that we can also

722
00:28:48,720 --> 00:28:51,120
continuously monitor the environment for

723
00:28:51,120 --> 00:28:54,399
changes and drift so if a developer

724
00:28:54,399 --> 00:28:57,200
add a new api or

725
00:28:57,200 --> 00:28:58,960
change the code of the lambda we can

726
00:28:58,960 --> 00:29:01,919
change what has been changed

727
00:29:01,919 --> 00:29:04,320
in order to have a faster

728
00:29:04,320 --> 00:29:06,480
feedback loop

729
00:29:06,480 --> 00:29:08,880
and give immediate feedback without

730
00:29:08,880 --> 00:29:11,679
doing anything without any action from

731
00:29:11,679 --> 00:29:13,840
the developer

732
00:29:13,840 --> 00:29:15,760
and so you can

733
00:29:15,760 --> 00:29:18,480
keep the environment under control so in

734
00:29:18,480 --> 00:29:21,039
this in with this uh

735
00:29:21,039 --> 00:29:22,320
approach

736
00:29:22,320 --> 00:29:24,960
uh also if someone creates something new

737
00:29:24,960 --> 00:29:26,960
we can run again

738
00:29:26,960 --> 00:29:28,799
the complete analysis if it's a new

739
00:29:28,799 --> 00:29:31,520
system or a new land or a new service

740
00:29:31,520 --> 00:29:33,600
and and

741
00:29:33,600 --> 00:29:35,840
do the loop again

742
00:29:35,840 --> 00:29:38,640
so we have we can make continuously

743
00:29:38,640 --> 00:29:41,200
monitoring and continuous scanning of

744
00:29:41,200 --> 00:29:44,480
your cloud environment without

745
00:29:44,480 --> 00:29:46,159
intervention

746
00:29:46,159 --> 00:29:47,760
or

747
00:29:47,760 --> 00:29:49,919
something similar so let's see

748
00:29:49,919 --> 00:29:53,679
an example a very simple example

749
00:29:53,679 --> 00:29:57,520
so if mario the developer had a

750
00:29:57,520 --> 00:29:59,360
new api

751
00:29:59,360 --> 00:30:03,840
uh that trigger alanda we can identify

752
00:30:03,840 --> 00:30:04,960
the flow

753
00:30:04,960 --> 00:30:07,600
of of these of this

754
00:30:07,600 --> 00:30:09,200
api

755
00:30:09,200 --> 00:30:10,880
so we can see that

756
00:30:10,880 --> 00:30:12,880
it triggered the lambda that then upload

757
00:30:12,880 --> 00:30:16,399
a file into a bucket that then notify a

758
00:30:16,399 --> 00:30:17,520
lambda

759
00:30:17,520 --> 00:30:20,559
and the lambda send an email to to the

760
00:30:20,559 --> 00:30:21,600
customer

761
00:30:21,600 --> 00:30:22,480
so

762
00:30:22,480 --> 00:30:25,360
we can scan these

763
00:30:25,360 --> 00:30:28,000
flow for vulnerabilities we can scan

764
00:30:28,000 --> 00:30:29,919
each component

765
00:30:29,919 --> 00:30:32,720
in isolation by themselves and

766
00:30:32,720 --> 00:30:34,880
we may be able to identify a

767
00:30:34,880 --> 00:30:38,640
vulnerability in this function

768
00:30:38,640 --> 00:30:41,039
so we can get the result

769
00:30:41,039 --> 00:30:43,120
maybe we're able to get the access key

770
00:30:43,120 --> 00:30:45,600
and so we can identify the impact

771
00:30:45,600 --> 00:30:48,559
of that vulnerability so you can see

772
00:30:48,559 --> 00:30:49,440
that the

773
00:30:49,440 --> 00:30:52,799
the the yestery bucket the function

774
00:30:52,799 --> 00:30:54,960
the email for the customer and maybe

775
00:30:54,960 --> 00:30:56,720
more important

776
00:30:56,720 --> 00:30:57,760
the

777
00:30:57,760 --> 00:31:00,320
dynamodb tables can be accessed

778
00:31:00,320 --> 00:31:02,399
by a potential attacker

779
00:31:02,399 --> 00:31:06,559
if is able to exploit that vulnerability

780
00:31:06,960 --> 00:31:09,600
so this is it uh

781
00:31:09,600 --> 00:31:13,039
we are at just few words so our contrast

782
00:31:13,039 --> 00:31:14,960
we recently

783
00:31:14,960 --> 00:31:16,640
released a

784
00:31:16,640 --> 00:31:18,880
cli uh

785
00:31:18,880 --> 00:31:20,000
we

786
00:31:20,000 --> 00:31:22,720
called the code sec by contrast

787
00:31:22,720 --> 00:31:23,760
is uh

788
00:31:23,760 --> 00:31:26,640
for serverless so you can use it for

789
00:31:26,640 --> 00:31:27,600
free

790
00:31:27,600 --> 00:31:28,480
and

791
00:31:28,480 --> 00:31:30,480
you can start playing with it you can

792
00:31:30,480 --> 00:31:33,519
get result in less than one minute

793
00:31:33,519 --> 00:31:36,080
and you can see uh if

794
00:31:36,080 --> 00:31:38,799
result for your lambdas you can you can

795
00:31:38,799 --> 00:31:40,320
have a least privileged approach as

796
00:31:40,320 --> 00:31:42,720
mateo was talking before you can see if

797
00:31:42,720 --> 00:31:44,000
there are

798
00:31:44,000 --> 00:31:47,840
vulnerabilities and so on so feel free

799
00:31:47,840 --> 00:31:49,519
you are more than welcome to go to the

800
00:31:49,519 --> 00:31:52,000
website and start playing with it

801
00:31:52,000 --> 00:31:55,600
your feedback is more than welcome

802
00:31:55,600 --> 00:31:57,600
at contrast we also

803
00:31:57,600 --> 00:32:00,640
contributed uh to a couple of

804
00:32:00,640 --> 00:32:03,519
os projects the serverless top 10 as

805
00:32:03,519 --> 00:32:06,399
mateo was mentioning before

806
00:32:06,399 --> 00:32:08,559
and also the classical

807
00:32:08,559 --> 00:32:11,600
vulnerable application developed

808
00:32:11,600 --> 00:32:14,399
using serverless technology for testing

809
00:32:14,399 --> 00:32:15,600
purposes

810
00:32:15,600 --> 00:32:19,120
thank you very much for joining us

811
00:32:21,279 --> 00:32:22,880
feel free to reach out

812
00:32:22,880 --> 00:32:25,200
with for with your questions

813
00:32:25,200 --> 00:32:27,440
we will be more than happy to

814
00:32:27,440 --> 00:32:29,120
sure

815
00:32:29,120 --> 00:32:31,840
thank you so much mateo and paulo it was

816
00:32:31,840 --> 00:32:33,919
amazing i was just going through every

817
00:32:33,919 --> 00:32:36,559
part of it and you really stitched it

818
00:32:36,559 --> 00:32:38,559
very well especially service is

819
00:32:38,559 --> 00:32:40,480
something which is right now needed the

820
00:32:40,480 --> 00:32:41,360
most

821
00:32:41,360 --> 00:32:42,640
yes

822
00:32:42,640 --> 00:32:45,279
yeah yeah it was totally amazing and a

823
00:32:45,279 --> 00:32:48,240
lot of people are waiting for you on

824
00:32:48,240 --> 00:32:50,880
the uh the channel that we have on uh so

825
00:32:50,880 --> 00:32:52,880
please do check out check that out and

826
00:32:52,880 --> 00:32:54,480
yes everyone

827
00:32:54,480 --> 00:32:58,159
do uh join us on discord as well now

828
00:32:58,159 --> 00:33:00,799
before we head out uh i do see one

829
00:33:00,799 --> 00:33:02,240
question for you

830
00:33:02,240 --> 00:33:03,840
um

831
00:33:03,840 --> 00:33:05,600
oh actually

832
00:33:05,600 --> 00:33:08,159
uh they've actually said that it's good

833
00:33:08,159 --> 00:33:10,880
great work team security in serverless

834
00:33:10,880 --> 00:33:14,559
cloud any eta for codesec sca

835
00:33:14,559 --> 00:33:16,399
which is software composition analysis

836
00:33:16,399 --> 00:33:17,519
is

837
00:33:17,519 --> 00:33:22,320
i think is a planet for this summer

838
00:33:22,320 --> 00:33:24,880
so a few weeks

839
00:33:24,880 --> 00:33:28,159
of and you will be able to use also sca

840
00:33:28,159 --> 00:33:30,240
at the moment we have only

841
00:33:30,240 --> 00:33:32,880
serverless and scan

842
00:33:32,880 --> 00:33:36,640
amazing so coming very shortly yes

843
00:33:36,640 --> 00:33:39,519
keep an eye out for that yeah and and

844
00:33:39,519 --> 00:33:42,080
please please uh send us feedback so

845
00:33:42,080 --> 00:33:45,200
it's is we made this for developers

846
00:33:45,200 --> 00:33:46,320
so

847
00:33:46,320 --> 00:33:48,720
we because we want to help developers

848
00:33:48,720 --> 00:33:51,519
secure their serverless environment and

849
00:33:51,519 --> 00:33:53,600
or any other application with sca and

850
00:33:53,600 --> 00:33:54,640
scan

851
00:33:54,640 --> 00:33:55,519
so

852
00:33:55,519 --> 00:33:58,799
but and we need your feedback uh to make

853
00:33:58,799 --> 00:34:00,880
it better

854
00:34:00,880 --> 00:34:02,960
sure thank you so much for joining us

855
00:34:02,960 --> 00:34:05,600
and please do join us uh for the chat at

856
00:34:05,600 --> 00:34:07,440
this discord and we look forward to

857
00:34:07,440 --> 00:34:09,760
having you in the future sessions as

858
00:34:09,760 --> 00:34:10,800
well

859
00:34:10,800 --> 00:34:12,800
thank you very much for having us a

860
00:34:12,800 --> 00:34:17,399
pleasure thank you thank you

