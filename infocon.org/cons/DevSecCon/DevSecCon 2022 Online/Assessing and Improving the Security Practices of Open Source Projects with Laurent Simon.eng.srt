1
00:00:00,470 --> 00:00:04,319
[Music]

2
00:00:04,400 --> 00:00:06,080
and our next speaker

3
00:00:06,080 --> 00:00:08,800
is laurent simon is a security engineer

4
00:00:08,800 --> 00:00:10,719
in the google open source security team

5
00:00:10,719 --> 00:00:12,559
he works on tooling for software

6
00:00:12,559 --> 00:00:14,880
development life cycle and supply chain

7
00:00:14,880 --> 00:00:16,640
integrity and will be talking to us

8
00:00:16,640 --> 00:00:17,920
about assessing and improving the

9
00:00:17,920 --> 00:00:19,840
security practices of open source

10
00:00:19,840 --> 00:00:22,080
projects so without further ado let's

11
00:00:22,080 --> 00:00:24,240
bring lauren on

12
00:00:24,240 --> 00:00:26,800
hey there how you doing

13
00:00:26,800 --> 00:00:29,760
hi i'm doing well how about you guys

14
00:00:29,760 --> 00:00:32,479
doing well doing well thank you

15
00:00:32,479 --> 00:00:34,399
i'm excited to hear about what you have

16
00:00:34,399 --> 00:00:36,160
to share with us so eric and i are going

17
00:00:36,160 --> 00:00:38,879
to jump off and let you take it away

18
00:00:38,879 --> 00:00:41,760
okay cool thanks

19
00:00:43,280 --> 00:00:44,559
all right

20
00:00:44,559 --> 00:00:46,640
hi everyone so uh yeah thanks for the

21
00:00:46,640 --> 00:00:47,760
intro

22
00:00:47,760 --> 00:00:49,920
i'm laurent i'm a security engineer at

23
00:00:49,920 --> 00:00:52,000
google and today i'll be talking about a

24
00:00:52,000 --> 00:00:53,920
project called scorecard

25
00:00:53,920 --> 00:00:55,840
which can help you assess and improve

26
00:00:55,840 --> 00:00:59,600
the security of open source project

27
00:00:59,600 --> 00:01:01,359
so i work at google as a security

28
00:01:01,359 --> 00:01:03,199
engineer i spend a lot of my time

29
00:01:03,199 --> 00:01:05,600
working with the open ssf

30
00:01:05,600 --> 00:01:07,600
on two of their main projects the

31
00:01:07,600 --> 00:01:09,760
scorecard project which is the topic of

32
00:01:09,760 --> 00:01:10,799
this talk

33
00:01:10,799 --> 00:01:12,560
and the salsa project

34
00:01:12,560 --> 00:01:15,280
which is a framework that helps secure

35
00:01:15,280 --> 00:01:18,960
your resil your release pipeline

36
00:01:18,960 --> 00:01:20,159
so not

37
00:01:20,159 --> 00:01:21,759
i'm not sure everyone knows about the

38
00:01:21,759 --> 00:01:24,240
open ssf so let me say a few words about

39
00:01:24,240 --> 00:01:26,640
it the open ssf is the open source

40
00:01:26,640 --> 00:01:28,240
security foundation

41
00:01:28,240 --> 00:01:29,920
it's an organization where multiple

42
00:01:29,920 --> 00:01:31,759
companies collaborate

43
00:01:31,759 --> 00:01:33,840
to help improve the security of open

44
00:01:33,840 --> 00:01:35,280
source software

45
00:01:35,280 --> 00:01:37,600
we do this by writing tools such as

46
00:01:37,600 --> 00:01:40,560
scorecard we provide consulting perform

47
00:01:40,560 --> 00:01:43,040
code audits and sometimes also publish

48
00:01:43,040 --> 00:01:44,880
best practice documents

49
00:01:44,880 --> 00:01:46,000
everything

50
00:01:46,000 --> 00:01:48,640
in the open ssf is is open

51
00:01:48,640 --> 00:01:51,119
so we have public working groups slack

52
00:01:51,119 --> 00:01:52,240
channels

53
00:01:52,240 --> 00:01:54,240
bi-weekly meetings that are open for

54
00:01:54,240 --> 00:01:56,399
everyone to join if you're interested

55
00:01:56,399 --> 00:01:59,040
take a look at the openssf.org

56
00:01:59,040 --> 00:02:02,719
and join join the conversation

57
00:02:02,799 --> 00:02:05,280
all right so um as most of you may know

58
00:02:05,280 --> 00:02:07,280
most of the third-party dependencies in

59
00:02:07,280 --> 00:02:08,720
modern software

60
00:02:08,720 --> 00:02:11,840
come from open source around 90 of them

61
00:02:11,840 --> 00:02:14,319
and several critical pieces of software

62
00:02:14,319 --> 00:02:15,440
we use

63
00:02:15,440 --> 00:02:17,120
every day in production

64
00:02:17,120 --> 00:02:20,080
such as kubernetes or openssl come from

65
00:02:20,080 --> 00:02:22,720
open source

66
00:02:22,720 --> 00:02:24,959
however supply chain attacks are on the

67
00:02:24,959 --> 00:02:28,000
rise and attackers are realizing that

68
00:02:28,000 --> 00:02:30,640
it's much easier to attack the supply

69
00:02:30,640 --> 00:02:33,360
chain than it is to find bugs in the

70
00:02:33,360 --> 00:02:35,200
actual software

71
00:02:35,200 --> 00:02:36,959
and over the past two years we've seen

72
00:02:36,959 --> 00:02:39,360
significant rise in these attacks as

73
00:02:39,360 --> 00:02:44,560
illustrated in this in this slide here

74
00:02:45,680 --> 00:02:48,000
in this slide we have tried to visualize

75
00:02:48,000 --> 00:02:50,160
the various components of the supply

76
00:02:50,160 --> 00:02:51,360
chain

77
00:02:51,360 --> 00:02:53,040
and as you can see there are quite a lot

78
00:02:53,040 --> 00:02:55,120
of places where an attacker could try to

79
00:02:55,120 --> 00:02:58,000
target your project

80
00:02:58,000 --> 00:03:00,080
starting by just sending malicious pull

81
00:03:00,080 --> 00:03:03,280
requests to exploit an overprivileged c

82
00:03:03,280 --> 00:03:05,040
i run where you run your tests for

83
00:03:05,040 --> 00:03:06,080
example

84
00:03:06,080 --> 00:03:08,000
and i'll show a demo of this uh later in

85
00:03:08,000 --> 00:03:10,000
this talk

86
00:03:10,000 --> 00:03:11,840
an attacker could also compromise your

87
00:03:11,840 --> 00:03:14,480
software source control system

88
00:03:14,480 --> 00:03:16,640
which happened in the php attack a

89
00:03:16,640 --> 00:03:18,800
couple of years ago

90
00:03:18,800 --> 00:03:20,080
you could an attacker could also

91
00:03:20,080 --> 00:03:22,239
compromise your build pipeline

92
00:03:22,239 --> 00:03:24,480
that happened to solar wind

93
00:03:24,480 --> 00:03:26,640
or an attacker could also try to

94
00:03:26,640 --> 00:03:29,200
compromise package manager account

95
00:03:29,200 --> 00:03:31,360
this happened about just two weeks ago

96
00:03:31,360 --> 00:03:33,200
researchers showed that they could

97
00:03:33,200 --> 00:03:35,440
register expired domains

98
00:03:35,440 --> 00:03:38,560
and initiate reset password to take over

99
00:03:38,560 --> 00:03:41,280
package manager accounts

100
00:03:41,280 --> 00:03:43,599
and last but not least we see often

101
00:03:43,599 --> 00:03:44,720
attacks

102
00:03:44,720 --> 00:03:45,599
attacks

103
00:03:45,599 --> 00:03:47,599
sorry attacks

104
00:03:47,599 --> 00:03:50,480
named typo squatting where attackers

105
00:03:50,480 --> 00:03:51,680
registers

106
00:03:51,680 --> 00:03:54,239
common names or look-alike names in the

107
00:03:54,239 --> 00:03:56,560
hope of tricking users to install those

108
00:03:56,560 --> 00:03:59,439
dependencies instead of the the genuine

109
00:03:59,439 --> 00:04:01,760
dependencies

110
00:04:01,760 --> 00:04:03,599
because of this

111
00:04:03,599 --> 00:04:05,360
you know large

112
00:04:05,360 --> 00:04:06,400
attack

113
00:04:06,400 --> 00:04:07,840
attack surface

114
00:04:07,840 --> 00:04:09,760
this is why the open ssf scorecard

115
00:04:09,760 --> 00:04:13,359
project was created

116
00:04:13,680 --> 00:04:17,040
in a nutshell scorecard is a tool that

117
00:04:17,040 --> 00:04:19,839
assesses a number of important security

118
00:04:19,839 --> 00:04:22,800
risks with a software development cycle

119
00:04:22,800 --> 00:04:24,800
for projects that are natively developed

120
00:04:24,800 --> 00:04:26,840
on

121
00:04:26,840 --> 00:04:29,759
github scorecard can check whether you

122
00:04:29,759 --> 00:04:31,680
are following good practices

123
00:04:31,680 --> 00:04:33,919
for example are you using continuous

124
00:04:33,919 --> 00:04:36,560
testing fuzzing static analysis

125
00:04:36,560 --> 00:04:38,880
this is an important signal because it

126
00:04:38,880 --> 00:04:41,840
reduces it reduces the chance of bugs

127
00:04:41,840 --> 00:04:44,000
and it catches the catches them early in

128
00:04:44,000 --> 00:04:46,560
the development cycle

129
00:04:46,560 --> 00:04:48,639
scorecard will also check whether you

130
00:04:48,639 --> 00:04:50,960
are updating your dependencies

131
00:04:50,960 --> 00:04:53,360
or go also beyond that it will check

132
00:04:53,360 --> 00:04:54,880
whether you have safe configuration

133
00:04:54,880 --> 00:04:57,199
settings on github

134
00:04:57,199 --> 00:04:59,280
one important setting is the so-called

135
00:04:59,280 --> 00:05:01,840
branch protection setting which prevents

136
00:05:01,840 --> 00:05:03,919
code changes from by malicious

137
00:05:03,919 --> 00:05:05,440
developers

138
00:05:05,440 --> 00:05:08,080
we have other checks such as the webhook

139
00:05:08,080 --> 00:05:09,440
webhook check

140
00:05:09,440 --> 00:05:11,840
which will verify whether you have

141
00:05:11,840 --> 00:05:14,400
enabled authentication in your web web

142
00:05:14,400 --> 00:05:17,520
hook configuration

143
00:05:17,680 --> 00:05:19,600
scorecard doesn't just look at good

144
00:05:19,600 --> 00:05:22,639
practices it also warns about

145
00:05:22,639 --> 00:05:25,680
empty patterns for example if you have a

146
00:05:25,680 --> 00:05:27,840
secret which is accessible to an

147
00:05:27,840 --> 00:05:29,520
untrusted pull request

148
00:05:29,520 --> 00:05:32,080
scorecard will warn you about that

149
00:05:32,080 --> 00:05:35,039
scorecard will also warn you about um

150
00:05:35,039 --> 00:05:38,080
whether your ci runs or on github which

151
00:05:38,080 --> 00:05:40,160
are called github workflows

152
00:05:40,160 --> 00:05:41,919
it will warn you if they are if they are

153
00:05:41,919 --> 00:05:43,440
over privileged

154
00:05:43,440 --> 00:05:45,280
and this is really important because an

155
00:05:45,280 --> 00:05:47,840
attacker could abuse those permissions

156
00:05:47,840 --> 00:05:50,639
bypass code reviews and change your code

157
00:05:50,639 --> 00:05:52,639
again i'll show a demo of this later in

158
00:05:52,639 --> 00:05:55,039
the talk

159
00:05:55,759 --> 00:05:57,840
there are two main use cases where we

160
00:05:57,840 --> 00:06:00,720
think scorecard is beneficial

161
00:06:00,720 --> 00:06:03,199
the first is to improve the security of

162
00:06:03,199 --> 00:06:04,720
your own project

163
00:06:04,720 --> 00:06:07,039
and it can help you reduce the risk that

164
00:06:07,039 --> 00:06:08,639
your code will be tampered with by an

165
00:06:08,639 --> 00:06:10,080
attacker

166
00:06:10,080 --> 00:06:12,160
second you can use scorecard to assess

167
00:06:12,160 --> 00:06:14,479
the risk of your dependencies

168
00:06:14,479 --> 00:06:16,800
for example scorecard can warn you if

169
00:06:16,800 --> 00:06:18,840
your dependencies appear to not be

170
00:06:18,840 --> 00:06:21,759
maintained and that is that is a signal

171
00:06:21,759 --> 00:06:24,800
which uh tells you that the dependencies

172
00:06:24,800 --> 00:06:26,800
are likely not to receive security

173
00:06:26,800 --> 00:06:28,720
updates

174
00:06:28,720 --> 00:06:30,720
so let's see some examples

175
00:06:30,720 --> 00:06:32,800
and let's start with how you can use

176
00:06:32,800 --> 00:06:36,479
scorecard to assess your dependencies

177
00:06:36,479 --> 00:06:38,479
so this is pretty simple all you have to

178
00:06:38,479 --> 00:06:41,680
do is run the cli in this example we are

179
00:06:41,680 --> 00:06:44,160
running a scorecard against a repo

180
00:06:44,160 --> 00:06:45,039
called

181
00:06:45,039 --> 00:06:49,199
sum slash repo minus dependency

182
00:06:49,199 --> 00:06:51,039
scorecard will output some warnings

183
00:06:51,039 --> 00:06:53,759
about security risks for example the top

184
00:06:53,759 --> 00:06:56,160
warning indicates that the project

185
00:06:56,160 --> 00:06:58,880
exposes a secret to untrusted pull

186
00:06:58,880 --> 00:07:01,880
request

187
00:07:02,080 --> 00:07:03,840
the second warning indicates that the

188
00:07:03,840 --> 00:07:04,800
project

189
00:07:04,800 --> 00:07:07,599
uses the default ci permission

190
00:07:07,599 --> 00:07:10,160
uh which includes the ability

191
00:07:10,160 --> 00:07:12,240
to push code directly to the to the

192
00:07:12,240 --> 00:07:16,840
repository which is really dangerous

193
00:07:17,440 --> 00:07:19,680
and this last warning indicates that the

194
00:07:19,680 --> 00:07:21,599
project does not declare its

195
00:07:21,599 --> 00:07:24,720
dependencies in an immutable way

196
00:07:24,720 --> 00:07:26,319
so if the dependency is later

197
00:07:26,319 --> 00:07:28,800
compromised and becomes malicious

198
00:07:28,800 --> 00:07:30,560
your project would automatically

199
00:07:30,560 --> 00:07:33,120
download this malicious dependency

200
00:07:33,120 --> 00:07:35,520
and it could compromise the project or a

201
00:07:35,520 --> 00:07:38,000
binary that you've compiled

202
00:07:38,000 --> 00:07:40,000
this happened recently with the npm

203
00:07:40,000 --> 00:07:43,039
caller package attack

204
00:07:43,759 --> 00:07:46,160
if you are using go in your project the

205
00:07:46,160 --> 00:07:49,599
official pkg.go the dev website now

206
00:07:49,599 --> 00:07:52,080
integrates better with scorecard

207
00:07:52,080 --> 00:07:54,400
at the bottom right of the image you see

208
00:07:54,400 --> 00:07:55,599
a link

209
00:07:55,599 --> 00:07:58,160
and if you click on it it takes you to a

210
00:07:58,160 --> 00:08:00,240
website called debs.dev

211
00:08:00,240 --> 00:08:02,000
which shows you all the scorecard

212
00:08:02,000 --> 00:08:04,080
results for a package

213
00:08:04,080 --> 00:08:05,919
it gives you results for each of the

214
00:08:05,919 --> 00:08:08,560
check and also an aggregate score

215
00:08:08,560 --> 00:08:12,800
in this case it's 5.2 out of 10.

216
00:08:12,800 --> 00:08:14,319
all right so now let's move on on how

217
00:08:14,319 --> 00:08:17,599
you can use scorecard in your project

218
00:08:17,599 --> 00:08:21,199
and install scorecard as a github action

219
00:08:21,199 --> 00:08:23,199
so for this i need to share a different

220
00:08:23,199 --> 00:08:27,080
tab so bear with me

221
00:08:32,559 --> 00:08:33,760
one second

222
00:08:33,760 --> 00:08:36,159
all right

223
00:08:36,159 --> 00:08:39,360
all right so this is a project i created

224
00:08:39,360 --> 00:08:42,719
scorecard minus example

225
00:08:42,719 --> 00:08:44,240
so what you do if you want to install

226
00:08:44,240 --> 00:08:46,080
scorecard you go to that security tab

227
00:08:46,080 --> 00:08:47,600
here

228
00:08:47,600 --> 00:08:49,279
all right and then you go to the left

229
00:08:49,279 --> 00:08:52,320
code scanning alerts

230
00:08:52,959 --> 00:08:54,480
i have already installed scorecard on

231
00:08:54,480 --> 00:08:56,480
this repository so some alerts are

232
00:08:56,480 --> 00:08:58,640
already populated but ignore this for a

233
00:08:58,640 --> 00:09:01,519
second uh i'll show you uh we will go

234
00:09:01,519 --> 00:09:03,440
through some of them in a second

235
00:09:03,440 --> 00:09:04,720
if you want to install scroll card the

236
00:09:04,720 --> 00:09:06,800
first time on the top right corner here

237
00:09:06,800 --> 00:09:10,000
you have a button add scanning tool

238
00:09:10,000 --> 00:09:12,560
click on it

239
00:09:13,680 --> 00:09:17,519
and here you can search for scorecard

240
00:09:19,040 --> 00:09:22,839
and click configure

241
00:09:24,399 --> 00:09:27,760
so this automatically populates the

242
00:09:27,760 --> 00:09:30,320
workflow file for scorecard to run

243
00:09:30,320 --> 00:09:32,240
and all you have to do is

244
00:09:32,240 --> 00:09:34,720
push that to your repository

245
00:09:34,720 --> 00:09:38,399
scorecard runs daily uh every every day

246
00:09:38,399 --> 00:09:40,000
and also on every push to the main

247
00:09:40,000 --> 00:09:40,959
branch

248
00:09:40,959 --> 00:09:43,200
and as soon as scorecard runs you will

249
00:09:43,200 --> 00:09:45,519
get alerts populated in the scanning

250
00:09:45,519 --> 00:09:46,800
dashboard

251
00:09:46,800 --> 00:09:48,560
that i showed earlier

252
00:09:48,560 --> 00:09:50,480
something that i want to mention is that

253
00:09:50,480 --> 00:09:51,519
uh

254
00:09:51,519 --> 00:09:54,080
scorecard takes a path token as an

255
00:09:54,080 --> 00:09:56,000
optional input

256
00:09:56,000 --> 00:09:58,160
you don't have to declare one but if you

257
00:09:58,160 --> 00:09:59,519
don't uh

258
00:09:59,519 --> 00:10:01,120
the branch protection check will be

259
00:10:01,120 --> 00:10:04,399
disabled and this is due to a limitation

260
00:10:04,399 --> 00:10:07,440
of the current github github apis and

261
00:10:07,440 --> 00:10:09,200
we're working with github to try to

262
00:10:09,200 --> 00:10:10,880
resolve this problem

263
00:10:10,880 --> 00:10:13,279
so let's cancel the changes

264
00:10:13,279 --> 00:10:16,880
and look at some of the results

265
00:10:16,880 --> 00:10:18,399
scanning results

266
00:10:18,399 --> 00:10:19,360
all right

267
00:10:19,360 --> 00:10:22,720
so for example if i click on the fuzzing

268
00:10:22,720 --> 00:10:24,720
check

269
00:10:24,720 --> 00:10:25,920
right here

270
00:10:25,920 --> 00:10:28,160
you can see that scorecard is

271
00:10:28,160 --> 00:10:30,079
complaining that the project is not

272
00:10:30,079 --> 00:10:32,880
fuzzed which is which is correct

273
00:10:32,880 --> 00:10:35,200
and there's other kind of

274
00:10:35,200 --> 00:10:37,600
checks as you can see let's look at a

275
00:10:37,600 --> 00:10:38,800
a critical

276
00:10:38,800 --> 00:10:42,560
result that scorecard

277
00:10:42,959 --> 00:10:44,560
a critical alert

278
00:10:44,560 --> 00:10:46,959
so here in this alert scorecard is

279
00:10:46,959 --> 00:10:48,959
complaining and claiming that there is a

280
00:10:48,959 --> 00:10:51,680
script injection vulnerability

281
00:10:51,680 --> 00:10:53,920
in this file pre-submit.yaml

282
00:10:53,920 --> 00:10:56,800
due to this uh variable

283
00:10:56,800 --> 00:10:58,320
all right so let's quick let's take a

284
00:10:58,320 --> 00:11:01,839
look at the file

285
00:11:02,000 --> 00:11:04,160
so roughly speaking what's happening

286
00:11:04,160 --> 00:11:06,079
here is that this

287
00:11:06,079 --> 00:11:08,160
workflow is run on every pull

288
00:11:08,160 --> 00:11:09,920
every pull request

289
00:11:09,920 --> 00:11:11,600
and it roughly does the following it

290
00:11:11,600 --> 00:11:13,600
does a bunch of printing so it looks

291
00:11:13,600 --> 00:11:15,760
pretty innocuous

292
00:11:15,760 --> 00:11:17,200
but it turns out that this is actually a

293
00:11:17,200 --> 00:11:18,800
vulnerable workflow

294
00:11:18,800 --> 00:11:20,800
and to understand why uh you have to

295
00:11:20,800 --> 00:11:23,200
know that when github runs these scripts

296
00:11:23,200 --> 00:11:24,240
right here

297
00:11:24,240 --> 00:11:27,200
it basically substitutes the variable

298
00:11:27,200 --> 00:11:29,519
right here with the title of the pull

299
00:11:29,519 --> 00:11:32,000
request provided by not by a potential

300
00:11:32,000 --> 00:11:33,200
attacker

301
00:11:33,200 --> 00:11:36,079
this allows someone who sends a pull

302
00:11:36,079 --> 00:11:40,160
request to gain remote code execution

303
00:11:40,160 --> 00:11:42,240
so don't take my word for it uh let's

304
00:11:42,240 --> 00:11:43,839
just demo it right now that we can

305
00:11:43,839 --> 00:11:45,120
actually

306
00:11:45,120 --> 00:11:46,320
uh

307
00:11:46,320 --> 00:11:48,320
get uh remote code execution so as you

308
00:11:48,320 --> 00:11:50,079
can see the last commit

309
00:11:50,079 --> 00:11:52,079
on this repo is here from two hours ago

310
00:11:52,079 --> 00:11:54,480
it's called updatetest.txt

311
00:11:54,480 --> 00:11:57,200
so let's um

312
00:11:57,200 --> 00:12:01,040
let's create a pull request real quick

313
00:12:01,040 --> 00:12:04,639
let's call it hello

314
00:12:05,839 --> 00:12:09,480
create a pull request

315
00:12:12,320 --> 00:12:14,880
all right and let's change the title

316
00:12:14,880 --> 00:12:16,320
oops

317
00:12:16,320 --> 00:12:17,360
this

318
00:12:17,360 --> 00:12:20,360
second

319
00:12:24,560 --> 00:12:26,639
all right i'm back okay so let's create

320
00:12:26,639 --> 00:12:28,639
the pull request with this

321
00:12:28,639 --> 00:12:31,680
weird looking title

322
00:12:32,079 --> 00:12:33,760
all this is really doing is it's

323
00:12:33,760 --> 00:12:35,920
escaping the double quote and then

324
00:12:35,920 --> 00:12:39,600
pulling some content and executing it

325
00:12:39,600 --> 00:12:40,480
all right

326
00:12:40,480 --> 00:12:43,040
if we look at the actions

327
00:12:43,040 --> 00:12:44,720
that are being you can see that the

328
00:12:44,720 --> 00:12:46,000
pre-submit has

329
00:12:46,000 --> 00:12:47,760
kicked off it's being run

330
00:12:47,760 --> 00:12:48,880
there's no interaction from the

331
00:12:48,880 --> 00:12:50,399
maintainer

332
00:12:50,399 --> 00:12:53,200
the job has completed

333
00:12:53,200 --> 00:12:56,160
if we look at the

334
00:12:56,160 --> 00:12:58,240
we can see that it it claimed devsec

335
00:12:58,240 --> 00:13:01,279
concrete was here which was the

336
00:13:01,279 --> 00:13:03,519
uh the title which is a word that was in

337
00:13:03,519 --> 00:13:05,360
the title of the pull request right here

338
00:13:05,360 --> 00:13:08,000
and we can verify that the

339
00:13:08,000 --> 00:13:10,079
there's a new commit that just happened

340
00:13:10,079 --> 00:13:11,680
um

341
00:13:11,680 --> 00:13:13,440
which is uh basically the remote code

342
00:13:13,440 --> 00:13:15,680
execution gave us access to push

343
00:13:15,680 --> 00:13:17,760
directly to the to the main branch of

344
00:13:17,760 --> 00:13:19,600
the repo

345
00:13:19,600 --> 00:13:23,120
right so let's go back to the slides

346
00:13:31,920 --> 00:13:33,360
all right

347
00:13:33,360 --> 00:13:35,360
so that that was that's the end of the

348
00:13:35,360 --> 00:13:39,120
demo uh let me real quickly say uh a few

349
00:13:39,120 --> 00:13:40,560
give you a few announcements we have

350
00:13:40,560 --> 00:13:42,880
plenty of things coming up uh with the

351
00:13:42,880 --> 00:13:45,199
scorecard project we have badges coming

352
00:13:45,199 --> 00:13:47,279
up soon a website

353
00:13:47,279 --> 00:13:48,399
we are also

354
00:13:48,399 --> 00:13:50,480
improving the scorecard action

355
00:13:50,480 --> 00:13:53,199
so that you can more easily view

356
00:13:53,199 --> 00:13:55,600
the results for your dependencies

357
00:13:55,600 --> 00:13:57,120
and also i'd like to give a shout out to

358
00:13:57,120 --> 00:13:59,360
this project allstar

359
00:13:59,360 --> 00:14:00,800
which is an app

360
00:14:00,800 --> 00:14:03,360
from the open ssf which which helps you

361
00:14:03,360 --> 00:14:06,240
enforce policies at scale for scorecard

362
00:14:06,240 --> 00:14:08,560
results

363
00:14:08,560 --> 00:14:10,240
so uh thanks everyone that's the end of

364
00:14:10,240 --> 00:14:11,839
my talk um

365
00:14:11,839 --> 00:14:14,560
just a plug like the openssf community

366
00:14:14,560 --> 00:14:16,560
is open and if you're interested in

367
00:14:16,560 --> 00:14:18,320
joining the conversation and get

368
00:14:18,320 --> 00:14:20,639
involved involved click the link on the

369
00:14:20,639 --> 00:14:21,519
slide

370
00:14:21,519 --> 00:14:23,920
thank you

371
00:14:24,000 --> 00:14:25,920
wow that was really really eye-opening

372
00:14:25,920 --> 00:14:27,279
laurent um

373
00:14:27,279 --> 00:14:30,320
i had not seen that attack vector before

374
00:14:30,320 --> 00:14:32,399
through github pr's and the titles of it

375
00:14:32,399 --> 00:14:34,079
like that that that is super interesting

376
00:14:34,079 --> 00:14:35,680
and thank you for uh bringing that to

377
00:14:35,680 --> 00:14:37,120
everyone's attention there

378
00:14:37,120 --> 00:14:40,800
eric david did we have any questions

379
00:14:42,320 --> 00:14:44,399
i think we just got one from katherine

380
00:14:44,399 --> 00:14:46,079
it says would i be able to enable

381
00:14:46,079 --> 00:14:49,040
scorecard in get lab

382
00:14:49,040 --> 00:14:50,560
yeah so we're working on it we don't

383
00:14:50,560 --> 00:14:53,680
have support for it yet um

384
00:14:53,680 --> 00:14:56,959
but uh yeah it's in the pipeline

385
00:14:56,959 --> 00:14:58,880
we have prioritized github for now

386
00:14:58,880 --> 00:15:00,320
because they have

387
00:15:00,320 --> 00:15:02,959
more of the market share but yeah it's

388
00:15:02,959 --> 00:15:04,160
in the pipeline

389
00:15:04,160 --> 00:15:05,199
uh

390
00:15:05,199 --> 00:15:08,079
and if uh anyone wants to help like pull

391
00:15:08,079 --> 00:15:09,680
requests are welcome

392
00:15:09,680 --> 00:15:11,040
in this case probably a lot of pull

393
00:15:11,040 --> 00:15:12,880
requests

394
00:15:12,880 --> 00:15:14,959
excellent and again shout out to open

395
00:15:14,959 --> 00:15:17,360
ssf for folks to check out and start

396
00:15:17,360 --> 00:15:18,800
contributing and be part of as well

397
00:15:18,800 --> 00:15:21,279
thank you so much laurent and uh

398
00:15:21,279 --> 00:15:22,959
appreciate you being here yeah thanks

399
00:15:22,959 --> 00:15:24,720
for having me

400
00:15:24,720 --> 00:15:26,310
see you bye everyone

401
00:15:26,310 --> 00:15:29,790
[Music]

