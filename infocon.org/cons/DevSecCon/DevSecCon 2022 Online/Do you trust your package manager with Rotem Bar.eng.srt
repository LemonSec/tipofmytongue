1
00:00:00,470 --> 00:00:04,319
[Music]

2
00:00:04,400 --> 00:00:08,160
ah there we go fantastic hello rotom

3
00:00:08,160 --> 00:00:10,559
hello how are you that's a great flag

4
00:00:10,559 --> 00:00:12,639
you've got in the background there

5
00:00:12,639 --> 00:00:15,120
thanks it's from my last defcon i spoke

6
00:00:15,120 --> 00:00:16,560
over a little bit

7
00:00:16,560 --> 00:00:19,760
fantastic so our next week uh rotenbar

8
00:00:19,760 --> 00:00:22,480
um is head of marketplace integrations

9
00:00:22,480 --> 00:00:24,720
at cybersecurity and you're going to be

10
00:00:24,720 --> 00:00:26,880
talking to us about package managers and

11
00:00:26,880 --> 00:00:29,439
security uh road terms so i will keep

12
00:00:29,439 --> 00:00:31,279
the show on the road and i'll pass

13
00:00:31,279 --> 00:00:33,280
straight over to you

14
00:00:33,280 --> 00:00:35,680
and uh the floor is yours

15
00:00:35,680 --> 00:00:38,160
great so i'm walten and i'm going to

16
00:00:38,160 --> 00:00:40,399
talk about package managers

17
00:00:40,399 --> 00:00:42,399
and part of like

18
00:00:42,399 --> 00:00:44,800
what i do actually i'm a cyber paladin

19
00:00:44,800 --> 00:00:47,280
already took 20 years now

20
00:00:47,280 --> 00:00:49,760
and i'm building a marketplace on

21
00:00:49,760 --> 00:00:51,280
application security marketplace at

22
00:00:51,280 --> 00:00:52,960
cyber security

23
00:00:52,960 --> 00:00:55,199
cyber security is helping organizations

24
00:00:55,199 --> 00:00:57,360
all over the world protect their cicd

25
00:00:57,360 --> 00:00:58,719
pipelines

26
00:00:58,719 --> 00:01:01,840
and because i'm building and looking at

27
00:01:01,840 --> 00:01:04,159
all the different attacks that govern

28
00:01:04,159 --> 00:01:06,799
their past even in software supply

29
00:01:06,799 --> 00:01:07,760
chains

30
00:01:07,760 --> 00:01:09,600
i decided to talk a bit about package

31
00:01:09,600 --> 00:01:13,119
managers about how they

32
00:01:13,119 --> 00:01:14,960
how you can what you can trust and what

33
00:01:14,960 --> 00:01:17,040
you cannot trust in these different

34
00:01:17,040 --> 00:01:19,360
package manuals so i'm going to focus on

35
00:01:19,360 --> 00:01:21,920
a few and i will give a lot of examples

36
00:01:21,920 --> 00:01:23,920
and i hope you will enjoy

37
00:01:23,920 --> 00:01:26,960
um i do a lot of bug bounty as well so

38
00:01:26,960 --> 00:01:29,439
there's a bug is a group

39
00:01:29,439 --> 00:01:31,439
i'm organizing once a month we have some

40
00:01:31,439 --> 00:01:33,360
meetups and i'm just hacking and

41
00:01:33,360 --> 00:01:36,479
building stuff since 2002 since the army

42
00:01:36,479 --> 00:01:38,960
and all over the place automotive

43
00:01:38,960 --> 00:01:41,680
company satellites production plans

44
00:01:41,680 --> 00:01:44,240
banks whatever you want

45
00:01:44,240 --> 00:01:47,360
i i help protect them and less hacking

46
00:01:47,360 --> 00:01:49,680
into them but this is a part of what i

47
00:01:49,680 --> 00:01:50,640
do

48
00:01:50,640 --> 00:01:52,159
but today i will talk about package

49
00:01:52,159 --> 00:01:53,680
managers

50
00:01:53,680 --> 00:01:55,200
so

51
00:01:55,200 --> 00:01:57,680
if you go to wikipedia and you try to

52
00:01:57,680 --> 00:01:59,680
look what is a package manager

53
00:01:59,680 --> 00:02:02,079
it's actually a program that wants to

54
00:02:02,079 --> 00:02:04,399
install upgrade and configure

55
00:02:04,399 --> 00:02:06,399
and remove programs from the computer

56
00:02:06,399 --> 00:02:09,119
but most importantly it does it in a

57
00:02:09,119 --> 00:02:11,280
consistent manner it means that if you

58
00:02:11,280 --> 00:02:12,800
want to install something it will

59
00:02:12,800 --> 00:02:15,200
install every time the same package

60
00:02:15,200 --> 00:02:16,879
that you want and you won't have any

61
00:02:16,879 --> 00:02:18,000
surprises

62
00:02:18,000 --> 00:02:19,840
and this is now

63
00:02:19,840 --> 00:02:22,800
in my presentation i will show you where

64
00:02:22,800 --> 00:02:24,720
it goes good and where it goes about the

65
00:02:24,720 --> 00:02:27,360
different areas in these package manuals

66
00:02:27,360 --> 00:02:29,680
so back in the old days

67
00:02:29,680 --> 00:02:32,319
i was downloading lots of stuff and i

68
00:02:32,319 --> 00:02:35,519
used the get right because i wanted to

69
00:02:35,519 --> 00:02:36,959
download it all night and then

70
00:02:36,959 --> 00:02:39,200
disconnect from the internet uh

71
00:02:39,200 --> 00:02:41,200
now nobody discussed from the internet

72
00:02:41,200 --> 00:02:43,040
but then you had to have different

73
00:02:43,040 --> 00:02:45,280
programs that help you manage manage

74
00:02:45,280 --> 00:02:48,440
your download

75
00:02:50,239 --> 00:02:52,319
and more easier ways to install and you

76
00:02:52,319 --> 00:02:54,160
can just like say i want to have a

77
00:02:54,160 --> 00:02:56,720
package like called dragons i just pip

78
00:02:56,720 --> 00:02:58,720
install dragons and magically appears

79
00:02:58,720 --> 00:03:01,200
inside my computer and magically all the

80
00:03:01,200 --> 00:03:03,360
versions everything happens

81
00:03:03,360 --> 00:03:04,560
and even

82
00:03:04,560 --> 00:03:06,959
i'm so lazy and today we are we are very

83
00:03:06,959 --> 00:03:10,319
lazy so we even can just clone a repo or

84
00:03:10,319 --> 00:03:11,040
have

85
00:03:11,040 --> 00:03:12,720
a different uh project we want to

86
00:03:12,720 --> 00:03:15,360
install do npm style or paper style or

87
00:03:15,360 --> 00:03:18,080
whatever install and it just knows from

88
00:03:18,080 --> 00:03:19,680
a configuration file

89
00:03:19,680 --> 00:03:22,159
exactly what i wanted to install

90
00:03:22,159 --> 00:03:24,400
installed it i don't even know why it

91
00:03:24,400 --> 00:03:26,799
installed and how it installed and

92
00:03:26,799 --> 00:03:29,680
it's kind of black magic

93
00:03:29,680 --> 00:03:30,640
from

94
00:03:30,640 --> 00:03:33,360
this area today so we are

95
00:03:33,360 --> 00:03:35,040
we are having

96
00:03:35,040 --> 00:03:36,640
much lots of trust in the package

97
00:03:36,640 --> 00:03:38,560
managers themselves to install whatever

98
00:03:38,560 --> 00:03:41,040
they want to install

99
00:03:41,040 --> 00:03:42,799
but we are talking about a lot about

100
00:03:42,799 --> 00:03:44,640
package manuals and i want to talk a bit

101
00:03:44,640 --> 00:03:47,040
about what is what is a package

102
00:03:47,040 --> 00:03:48,410
so a package can be

103
00:03:48,410 --> 00:03:49,599
[Music]

104
00:03:49,599 --> 00:03:51,760
a lot of stuff it can be a very large

105
00:03:51,760 --> 00:03:53,080
package that has a

106
00:03:53,080 --> 00:03:54,400
[Applause]

107
00:03:54,400 --> 00:03:55,760
years of

108
00:03:55,760 --> 00:03:58,080
changes and lots of people working on it

109
00:03:58,080 --> 00:04:01,360
and it can be something like is a number

110
00:04:01,360 --> 00:04:03,680
i get i gave an example over here it is

111
00:04:03,680 --> 00:04:06,080
number is a npm package

112
00:04:06,080 --> 00:04:08,720
it has 250 million

113
00:04:08,720 --> 00:04:10,560
downloads per month

114
00:04:10,560 --> 00:04:12,560
it has four gigabytes to download i

115
00:04:12,560 --> 00:04:13,840
don't know what's a gigabyte downloading

116
00:04:13,840 --> 00:04:16,000
github but it's a gigabyte download i

117
00:04:16,000 --> 00:04:18,160
think it should be millionaire but it

118
00:04:18,160 --> 00:04:20,238
had like so many downloads and basically

119
00:04:20,238 --> 00:04:22,639
if you look at the code this is the code

120
00:04:22,639 --> 00:04:24,400
it just

121
00:04:24,400 --> 00:04:26,960
does like i think seven eight lines of

122
00:04:26,960 --> 00:04:28,479
code and that's it

123
00:04:28,479 --> 00:04:30,560
and it was maintained it was last

124
00:04:30,560 --> 00:04:32,800
updated i think five years ago if i'm

125
00:04:32,800 --> 00:04:35,680
not mistaken uh and if you you can see

126
00:04:35,680 --> 00:04:38,800
there's an open ssf there

127
00:04:38,800 --> 00:04:41,600
a program that goes over the most common

128
00:04:41,600 --> 00:04:43,040
packages and

129
00:04:43,040 --> 00:04:45,120
sees

130
00:04:45,120 --> 00:04:47,199
and sees a what's their skulls and they

131
00:04:47,199 --> 00:04:49,199
have different categories and you can

132
00:04:49,199 --> 00:04:50,000
see

133
00:04:50,000 --> 00:04:51,520
it wasn't maintained it doesn't have

134
00:04:51,520 --> 00:04:53,360
code reviews it doesn't have a best

135
00:04:53,360 --> 00:04:54,800
practices

136
00:04:54,800 --> 00:04:56,639
it does have a license and that does

137
00:04:56,639 --> 00:04:58,800
have different stuff so it got a 4.8

138
00:04:58,800 --> 00:04:59,759
scope

139
00:04:59,759 --> 00:05:02,800
and everybody uses it you have 250

140
00:05:02,800 --> 00:05:04,800
million downloads a month

141
00:05:04,800 --> 00:05:06,960
and the big question over here is what

142
00:05:06,960 --> 00:05:08,320
will happen

143
00:05:08,320 --> 00:05:10,400
if someone one day will change this

144
00:05:10,400 --> 00:05:12,479
package a maintainer

145
00:05:12,479 --> 00:05:16,639
can go and add this two lines of code

146
00:05:16,639 --> 00:05:19,280
and you know that hack system just is

147
00:05:19,280 --> 00:05:20,880
something that is really bad that you

148
00:05:20,880 --> 00:05:22,639
don't want it to be happening in your

149
00:05:22,639 --> 00:05:25,840
computer and with the moment he will

150
00:05:25,840 --> 00:05:29,360
update it it will start new new

151
00:05:29,360 --> 00:05:31,360
packages and new programs that want to

152
00:05:31,360 --> 00:05:32,720
download

153
00:05:32,720 --> 00:05:35,120
this specific package we'll download the

154
00:05:35,120 --> 00:05:37,520
new code and we'll run it inside the

155
00:05:37,520 --> 00:05:38,720
development

156
00:05:38,720 --> 00:05:40,960
computers inside the ci cd inside

157
00:05:40,960 --> 00:05:42,960
different areas

158
00:05:42,960 --> 00:05:44,560
and the

159
00:05:44,560 --> 00:05:47,120
question is who can change this package

160
00:05:47,120 --> 00:05:50,080
so we have the maintainer itself

161
00:05:50,080 --> 00:05:50,880
now

162
00:05:50,880 --> 00:05:53,600
we have like carlos and faker and there

163
00:05:53,600 --> 00:05:56,720
are a lot of now because of a

164
00:05:56,720 --> 00:05:59,280
different politics and wall stuff

165
00:05:59,280 --> 00:06:01,680
people just say yeah i'm maintaining

166
00:06:01,680 --> 00:06:03,840
this package i i'm the maintainer i can

167
00:06:03,840 --> 00:06:06,479
change it i will add this code

168
00:06:06,479 --> 00:06:08,800
uh to the package and

169
00:06:08,800 --> 00:06:11,919
just ruin it for everybody and sometimes

170
00:06:11,919 --> 00:06:13,440
the people just like pull the plug on

171
00:06:13,440 --> 00:06:16,160
the package or they change something or

172
00:06:16,160 --> 00:06:18,319
they do other stuff and

173
00:06:18,319 --> 00:06:20,639
and the thing is it starts breaking or

174
00:06:20,639 --> 00:06:23,039
even can hack into different uh

175
00:06:23,039 --> 00:06:24,639
uh areas

176
00:06:24,639 --> 00:06:27,520
the other way is hackers if i have let's

177
00:06:27,520 --> 00:06:30,960
say we have the ui puzzle js or call rc

178
00:06:30,960 --> 00:06:33,440
these packages were hacked and someone

179
00:06:33,440 --> 00:06:36,960
got a the password of me it's very easy

180
00:06:36,960 --> 00:06:38,880
to find the email of the maintainer and

181
00:06:38,880 --> 00:06:41,840
then find his password over

182
00:06:41,840 --> 00:06:44,080
in other ways like phishing attacks and

183
00:06:44,080 --> 00:06:46,240
stuff like that they can hack in they

184
00:06:46,240 --> 00:06:48,479
can hack the account of their maintainer

185
00:06:48,479 --> 00:06:49,840
and then

186
00:06:49,840 --> 00:06:52,479
and then again inject code and have fun

187
00:06:52,479 --> 00:06:53,919
with the packages

188
00:06:53,919 --> 00:06:56,240
the first thing is confusion attacks

189
00:06:56,240 --> 00:06:58,800
uh alex adolson showed us i think last

190
00:06:58,800 --> 00:07:00,319
year two years ago

191
00:07:00,319 --> 00:07:02,720
dependency confusion attacks the way

192
00:07:02,720 --> 00:07:06,000
that if you have private repositories

193
00:07:06,000 --> 00:07:08,479
and public repositories and you update

194
00:07:08,479 --> 00:07:10,560
something in the public repository which

195
00:07:10,560 --> 00:07:11,680
is private

196
00:07:11,680 --> 00:07:14,240
and package managers get confused and

197
00:07:14,240 --> 00:07:16,400
can download by mistake something from

198
00:07:16,400 --> 00:07:17,919
the public repository and start from the

199
00:07:17,919 --> 00:07:19,120
private one

200
00:07:19,120 --> 00:07:21,280
and this is this was a very interesting

201
00:07:21,280 --> 00:07:23,039
attack and he was able to hack lots of

202
00:07:23,039 --> 00:07:26,000
companies and lots of different areas

203
00:07:26,000 --> 00:07:27,759
and so the question is why is this

204
00:07:27,759 --> 00:07:29,039
happening

205
00:07:29,039 --> 00:07:30,960
and this is happening because we are all

206
00:07:30,960 --> 00:07:32,160
lazy

207
00:07:32,160 --> 00:07:35,280
and we don't want to have fixed versions

208
00:07:35,280 --> 00:07:37,759
and in the dependencies like all the

209
00:07:37,759 --> 00:07:40,560
package managers have different areas of

210
00:07:40,560 --> 00:07:42,160
supporting this

211
00:07:42,160 --> 00:07:44,720
and the package i can say i don't want

212
00:07:44,720 --> 00:07:47,440
1.21 but i want every time it will be

213
00:07:47,440 --> 00:07:49,680
upgraded automatically to upgrade my

214
00:07:49,680 --> 00:07:51,840
package so i want to i won't need to

215
00:07:51,840 --> 00:07:55,440
have different types of uh

216
00:07:55,440 --> 00:07:57,599
development and the adding and checking

217
00:07:57,599 --> 00:08:00,879
and verifying i trust the package to be

218
00:08:00,879 --> 00:08:03,759
that everything will be okay this is why

219
00:08:03,759 --> 00:08:04,960
we have this

220
00:08:04,960 --> 00:08:05,919
character

221
00:08:05,919 --> 00:08:07,840
that says you can

222
00:08:07,840 --> 00:08:10,400
you can upgrade any

223
00:08:10,400 --> 00:08:13,599
minor and the patch version in the

224
00:08:13,599 --> 00:08:16,479
semi-semantic version over here

225
00:08:16,479 --> 00:08:17,360
um

226
00:08:17,360 --> 00:08:19,840
to fight these problems and to fight and

227
00:08:19,840 --> 00:08:22,000
to find a way that we can create

228
00:08:22,000 --> 00:08:24,960
reproducible bills and have

229
00:08:24,960 --> 00:08:28,080
to know exactly what we want so

230
00:08:28,080 --> 00:08:31,680
we created log files and log files mean

231
00:08:31,680 --> 00:08:34,799
i know you wanted to have 1.21 but

232
00:08:34,799 --> 00:08:37,120
actually one the developer tested and

233
00:08:37,120 --> 00:08:39,519
the the pipeline test that the in the

234
00:08:39,519 --> 00:08:42,559
testing area and in the developer

235
00:08:42,559 --> 00:08:43,440
machine

236
00:08:43,440 --> 00:08:45,920
actually what he checked what was the

237
00:08:45,920 --> 00:08:47,440
1.4.8

238
00:08:47,440 --> 00:08:48,399
version

239
00:08:48,399 --> 00:08:50,720
and actually this one the version had

240
00:08:50,720 --> 00:08:53,519
this this integrity this shaft 512

241
00:08:53,519 --> 00:08:55,200
integrity and this is what was

242
00:08:55,200 --> 00:08:57,200
downloaded so anybody in the future that

243
00:08:57,200 --> 00:08:59,040
wants to download this

244
00:08:59,040 --> 00:09:02,959
version should go to the log file and

245
00:09:02,959 --> 00:09:04,800
should not download anything else if you

246
00:09:04,800 --> 00:09:07,800
download

247
00:09:08,320 --> 00:09:11,519
please stop downloading installing the

248
00:09:11,519 --> 00:09:14,560
and check what what was the difference

249
00:09:14,560 --> 00:09:16,240
and this means that now developers need

250
00:09:16,240 --> 00:09:18,160
to update the log files

251
00:09:18,160 --> 00:09:21,360
additionally to update the json files

252
00:09:21,360 --> 00:09:22,880
that's in npm

253
00:09:22,880 --> 00:09:24,800
but the question here is what can go

254
00:09:24,800 --> 00:09:27,120
wrong and this goes into a research i've

255
00:09:27,120 --> 00:09:28,320
done

256
00:09:28,320 --> 00:09:29,040
and

257
00:09:29,040 --> 00:09:31,839
lots of other people are also

258
00:09:31,839 --> 00:09:35,200
done in the internet this past year and

259
00:09:35,200 --> 00:09:37,040
even a photo pack

260
00:09:37,040 --> 00:09:38,080
about

261
00:09:38,080 --> 00:09:40,720
package manuals and if you can uh this

262
00:09:40,720 --> 00:09:43,279
is not a live show so i don't have uh

263
00:09:43,279 --> 00:09:46,399
i i cannot ask the crowd over here but

264
00:09:46,399 --> 00:09:50,800
if you look at this docker file and

265
00:09:50,800 --> 00:09:53,040
you probably can see a few problems i

266
00:09:53,040 --> 00:09:54,640
will go and show you the different

267
00:09:54,640 --> 00:09:56,800
problems that i found maybe you can find

268
00:09:56,800 --> 00:09:57,760
one

269
00:09:57,760 --> 00:09:59,040
but

270
00:09:59,040 --> 00:10:01,279
the docker file if you use the latest

271
00:10:01,279 --> 00:10:02,800
dockerfile

272
00:10:02,800 --> 00:10:05,200
every time you will upgrade

273
00:10:05,200 --> 00:10:06,160
it will

274
00:10:06,160 --> 00:10:07,519
upgrade

275
00:10:07,519 --> 00:10:08,399
every

276
00:10:08,399 --> 00:10:10,720
every time someone will push a new tag

277
00:10:10,720 --> 00:10:13,200
into the docker a hub for instance or

278
00:10:13,200 --> 00:10:15,040
vcr whatever

279
00:10:15,040 --> 00:10:17,200
it will download the latest version and

280
00:10:17,200 --> 00:10:19,600
not from a specific tag or even a

281
00:10:19,600 --> 00:10:20,800
specific

282
00:10:20,800 --> 00:10:23,200
hash that we wanted to use

283
00:10:23,200 --> 00:10:25,200
the other thing is over here you didn't

284
00:10:25,200 --> 00:10:27,040
see in the pack we added only the

285
00:10:27,040 --> 00:10:30,240
package.json by mistake to the dongle

286
00:10:30,240 --> 00:10:31,120
file

287
00:10:31,120 --> 00:10:32,079
and now

288
00:10:32,079 --> 00:10:34,800
we then copy the log file into it so

289
00:10:34,800 --> 00:10:37,120
what happened is inside a double file it

290
00:10:37,120 --> 00:10:38,320
didn't know

291
00:10:38,320 --> 00:10:42,000
which versions were locked and it they

292
00:10:42,000 --> 00:10:43,600
guessed and wanted the internet and went

293
00:10:43,600 --> 00:10:46,800
to the latest copies and downloaded the

294
00:10:46,800 --> 00:10:48,800
the new versions with the manual virus

295
00:10:48,800 --> 00:10:51,040
whatever we had over there

296
00:10:51,040 --> 00:10:53,120
and the other thing is if you go to the

297
00:10:53,120 --> 00:10:54,880
left you have npmi

298
00:10:54,880 --> 00:10:57,200
npm install does

299
00:10:57,200 --> 00:10:59,760
actually np install updates the lock

300
00:10:59,760 --> 00:11:00,880
file

301
00:11:00,880 --> 00:11:04,000
and it doesn't it it tries to go away

302
00:11:04,000 --> 00:11:06,560
and find the water the locked versions

303
00:11:06,560 --> 00:11:08,079
but if it doesn't find it doesn't force

304
00:11:08,079 --> 00:11:11,360
you to use the locked options npmci what

305
00:11:11,360 --> 00:11:13,839
it's supposed to do is

306
00:11:13,839 --> 00:11:16,160
validate the log file and validate it's

307
00:11:16,160 --> 00:11:18,240
only the locked version that in the

308
00:11:18,240 --> 00:11:20,079
package dock

309
00:11:20,079 --> 00:11:21,920
and this happens in all the languages

310
00:11:21,920 --> 00:11:24,800
not only in npm but i'm focusing on npm

311
00:11:24,800 --> 00:11:25,920
because

312
00:11:25,920 --> 00:11:28,000
actually they had much many problems in

313
00:11:28,000 --> 00:11:30,399
the last year and it's a good resource

314
00:11:30,399 --> 00:11:32,160
ground

315
00:11:32,160 --> 00:11:33,120
so

316
00:11:33,120 --> 00:11:34,399
i went to

317
00:11:34,399 --> 00:11:36,880
for instance into amazon

318
00:11:36,880 --> 00:11:39,839
in the past and when i was creating a

319
00:11:39,839 --> 00:11:42,480
new lambda function i thought the docker

320
00:11:42,480 --> 00:11:43,360
file

321
00:11:43,360 --> 00:11:44,959
had uh

322
00:11:44,959 --> 00:11:47,200
the same problem the copy packet json

323
00:11:47,200 --> 00:11:49,600
and they didn't copy the log files and

324
00:11:49,600 --> 00:11:51,600
this means that this was the default

325
00:11:51,600 --> 00:11:54,000
template for

326
00:11:54,000 --> 00:11:55,680
lambda functions that everybody that

327
00:11:55,680 --> 00:11:58,639
uses the different template

328
00:11:58,639 --> 00:11:59,920
vulnerable

329
00:11:59,920 --> 00:12:03,120
so i contacted the aws and we fixed it

330
00:12:03,120 --> 00:12:05,200
and now every time they added the

331
00:12:05,200 --> 00:12:06,480
asterisk so

332
00:12:06,480 --> 00:12:09,440
it will also copy the log files but also

333
00:12:09,440 --> 00:12:12,320
there's a recommendation to run npmcr

334
00:12:12,320 --> 00:12:14,000
minus mass production because it's much

335
00:12:14,000 --> 00:12:15,120
more secure

336
00:12:15,120 --> 00:12:18,160
uh running npmcr now the npm install npm

337
00:12:18,160 --> 00:12:19,120
install

338
00:12:19,120 --> 00:12:21,920
doesn't verify the log file itself so in

339
00:12:21,920 --> 00:12:25,040
production we always

340
00:12:25,040 --> 00:12:27,920
recommend to use the log files

341
00:12:27,920 --> 00:12:29,920
and this is one thing i want you to

342
00:12:29,920 --> 00:12:31,200
learn from and see from this

343
00:12:31,200 --> 00:12:35,040
presentation use the log files don't uh

344
00:12:35,040 --> 00:12:36,320
don't

345
00:12:36,320 --> 00:12:38,880
delete them don't disregard them you

346
00:12:38,880 --> 00:12:41,040
make make sure you use them even if they

347
00:12:41,040 --> 00:12:43,040
are there and if they are not there

348
00:12:43,040 --> 00:12:44,399
you just

349
00:12:44,399 --> 00:12:46,480
it's very important for

350
00:12:46,480 --> 00:12:48,320
the healthy the help from the csc

351
00:12:48,320 --> 00:12:49,519
environment

352
00:12:49,519 --> 00:12:53,360
so using npmci let's say we installed

353
00:12:53,360 --> 00:12:55,519
axios with a specific version and they

354
00:12:55,519 --> 00:12:58,639
have this package like a file and when i

355
00:12:58,639 --> 00:13:01,720
do npmci because it found

356
00:13:01,720 --> 00:13:05,760
0.21.4 and psi should always install the

357
00:13:05,760 --> 00:13:07,680
21.4 function

358
00:13:07,680 --> 00:13:09,279
and this is happening

359
00:13:09,279 --> 00:13:11,760
this is how it should behave and this is

360
00:13:11,760 --> 00:13:15,040
how it behaves in npm6

361
00:13:15,040 --> 00:13:15,760
and

362
00:13:15,760 --> 00:13:17,680
if you can see when we changed it in the

363
00:13:17,680 --> 00:13:19,839
package json i was lazy i went to the

364
00:13:19,839 --> 00:13:21,760
github changed it

365
00:13:21,760 --> 00:13:25,839
to dot one it did npnci and it failed it

366
00:13:25,839 --> 00:13:28,320
failed the build and then

367
00:13:28,320 --> 00:13:30,399
it couldn't continue until we change it

368
00:13:30,399 --> 00:13:32,839
back or update the package lock

369
00:13:32,839 --> 00:13:35,279
file the thing is

370
00:13:35,279 --> 00:13:38,160
i investigated npm seven and the in the

371
00:13:38,160 --> 00:13:40,480
start of the npm eight also

372
00:13:40,480 --> 00:13:42,720
and i found out that when i do the same

373
00:13:42,720 --> 00:13:44,880
thing with npm seven

374
00:13:44,880 --> 00:13:47,199
nothing happened like it didn't it say

375
00:13:47,199 --> 00:13:48,480
yeah okay

376
00:13:48,480 --> 00:13:49,839
it's great

377
00:13:49,839 --> 00:13:52,560
you changed it so maybe i'll just

378
00:13:52,560 --> 00:13:53,760
add uh

379
00:13:53,760 --> 00:13:55,600
install the the version you wanted to do

380
00:13:55,600 --> 00:13:58,160
it so it didn't look at the log file at

381
00:13:58,160 --> 00:14:00,320
all and actually because there was a

382
00:14:00,320 --> 00:14:02,720
change in the package.json and didn't

383
00:14:02,720 --> 00:14:04,240
find it in dogfight it went and

384
00:14:04,240 --> 00:14:05,440
downloaded

385
00:14:05,440 --> 00:14:07,920
a different version a 22 version because

386
00:14:07,920 --> 00:14:10,240
the 20 version was the latest

387
00:14:10,240 --> 00:14:14,560
so it was kind of a mind-blowing event

388
00:14:14,560 --> 00:14:17,360
for me you know i saw that ci doesn't

389
00:14:17,360 --> 00:14:18,639
really work

390
00:14:18,639 --> 00:14:20,320
and this went i went to the internet and

391
00:14:20,320 --> 00:14:22,639
then i uh i saw actually before i wanted

392
00:14:22,639 --> 00:14:26,959
the internet i saw also i did another

393
00:14:26,959 --> 00:14:28,160
game

394
00:14:28,160 --> 00:14:30,560
if i created the empty log file with

395
00:14:30,560 --> 00:14:32,880
only on an empty json

396
00:14:32,880 --> 00:14:35,360
it just worked it added everything so if

397
00:14:35,360 --> 00:14:37,839
you want to bypass all protections you

398
00:14:37,839 --> 00:14:39,519
can create a package lock

399
00:14:39,519 --> 00:14:42,000
with an empty json file that

400
00:14:42,000 --> 00:14:44,480
continues without asking questions

401
00:14:44,480 --> 00:14:47,519
uh unfortunately we fixed it after one

402
00:14:47,519 --> 00:14:49,040
year like npm

403
00:14:49,040 --> 00:14:51,360
fixed it uh i went to the github and i

404
00:14:51,360 --> 00:14:53,600
wanted the issues and saw someone

405
00:14:53,600 --> 00:14:56,160
saying yeah last year the npm succeeds

406
00:14:56,160 --> 00:14:58,959
when package lock doesn't match so i

407
00:14:58,959 --> 00:15:01,360
tried to understand we opened the cv for

408
00:15:01,360 --> 00:15:02,320
it

409
00:15:02,320 --> 00:15:05,600
i think the cv got a critical base call

410
00:15:05,600 --> 00:15:08,079
but i don't know if it's that

411
00:15:08,079 --> 00:15:10,560
i would give it a seven point something

412
00:15:10,560 --> 00:15:12,560
another 9.8

413
00:15:12,560 --> 00:15:14,800
still it's not shell shock but it's

414
00:15:14,800 --> 00:15:17,279
really interesting to see that

415
00:15:17,279 --> 00:15:19,360
um

416
00:15:19,360 --> 00:15:20,880
this was

417
00:15:20,880 --> 00:15:23,120
getting serious and after a while they

418
00:15:23,120 --> 00:15:24,480
fixed it uh

419
00:15:24,480 --> 00:15:26,480
get up one and fix this

420
00:15:26,480 --> 00:15:28,720
problem and now in the latest npm

421
00:15:28,720 --> 00:15:32,160
version i don't i think 81.4 and above

422
00:15:32,160 --> 00:15:34,720
it doesn't happen anymore

423
00:15:34,720 --> 00:15:36,560
but if you go to

424
00:15:36,560 --> 00:15:39,440
npm and look into the issues you see

425
00:15:39,440 --> 00:15:41,199
there are other issues when you use

426
00:15:41,199 --> 00:15:43,440
overrides it doesn't work correctly when

427
00:15:43,440 --> 00:15:45,519
you use the integrity is sometimes not

428
00:15:45,519 --> 00:15:47,279
repaired automatically by npm and not

429
00:15:47,279 --> 00:15:49,199
noticed so there are still different

430
00:15:49,199 --> 00:15:50,880
problems and

431
00:15:50,880 --> 00:15:52,560
and i think one thing we need to learn

432
00:15:52,560 --> 00:15:55,199
about this that

433
00:15:55,199 --> 00:15:57,199
the packages themselves the package

434
00:15:57,199 --> 00:16:00,000
managers are there to help you download

435
00:16:00,000 --> 00:16:02,560
the files but you cannot trust them

436
00:16:02,560 --> 00:16:05,279
entirely not to have bugs in them and

437
00:16:05,279 --> 00:16:07,120
not to have like they're constantly

438
00:16:07,120 --> 00:16:09,279
trying to improve but you should verify

439
00:16:09,279 --> 00:16:11,120
yourself all the packages and verify

440
00:16:11,120 --> 00:16:12,160
yourself

441
00:16:12,160 --> 00:16:15,759
and that the integrity is uh

442
00:16:15,759 --> 00:16:18,000
properly and before you download and

443
00:16:18,000 --> 00:16:19,519
after you download you need to make sure

444
00:16:19,519 --> 00:16:21,600
because the package manager some will do

445
00:16:21,600 --> 00:16:24,160
it from you some will not some will say

446
00:16:24,160 --> 00:16:26,160
they do and will

447
00:16:26,160 --> 00:16:28,399
not do it correctly or not understand

448
00:16:28,399 --> 00:16:30,240
and this is a game that we need to

449
00:16:30,240 --> 00:16:31,519
understand play

450
00:16:31,519 --> 00:16:33,360
until we have like a

451
00:16:33,360 --> 00:16:36,399
proper rfc or way to verify

452
00:16:36,399 --> 00:16:37,199
that

453
00:16:37,199 --> 00:16:38,880
what you wanted to download was really

454
00:16:38,880 --> 00:16:40,959
downloaded and that's it and

455
00:16:40,959 --> 00:16:42,639
i don't think i don't know if there's a

456
00:16:42,639 --> 00:16:46,320
standoff today for downloading packages

457
00:16:46,320 --> 00:16:49,199
and this gives me to another bug that i

458
00:16:49,199 --> 00:16:50,880
found last year and this is actually i

459
00:16:50,880 --> 00:16:52,480
spoke at def con

460
00:16:52,480 --> 00:16:54,399
last year about

461
00:16:54,399 --> 00:16:57,040
a different malicious code analysis

462
00:16:57,040 --> 00:16:59,440
and i was investigating scanners and the

463
00:16:59,440 --> 00:17:01,120
security scanners and how i can make

464
00:17:01,120 --> 00:17:04,240
them execute code so if i'm a hacker how

465
00:17:04,240 --> 00:17:05,520
can i attack

466
00:17:05,520 --> 00:17:08,480
the scanners that are scanning my code

467
00:17:08,480 --> 00:17:10,480
and i found out that the same problem

468
00:17:10,480 --> 00:17:12,559
happens also on npm

469
00:17:12,559 --> 00:17:14,959
so i'm saying npm but it also happens in

470
00:17:14,959 --> 00:17:17,359
different package rentals so i will show

471
00:17:17,359 --> 00:17:18,799
you this

472
00:17:18,799 --> 00:17:19,760
soon

473
00:17:19,760 --> 00:17:23,119
but if we go into npm and

474
00:17:23,119 --> 00:17:25,520
i want to find a way to

475
00:17:25,520 --> 00:17:27,439
run it safely without running any

476
00:17:27,439 --> 00:17:29,440
scripts without running

477
00:17:29,440 --> 00:17:31,120
any code that can happen from the

478
00:17:31,120 --> 00:17:32,480
package.json

479
00:17:32,480 --> 00:17:33,600
from

480
00:17:33,600 --> 00:17:35,360
the different areas of the repository i

481
00:17:35,360 --> 00:17:37,360
just want to install to download the

482
00:17:37,360 --> 00:17:39,840
packages and do nothing with them

483
00:17:39,840 --> 00:17:41,919
and this is why we have npmcr you might

484
00:17:41,919 --> 00:17:45,200
as well signal scripts we can download

485
00:17:45,200 --> 00:17:48,480
the we can download the files and they

486
00:17:48,480 --> 00:17:50,960
under pre-install post install

487
00:17:50,960 --> 00:17:53,360
all the scripts they shouldn't work

488
00:17:53,360 --> 00:17:55,440
and this is a good practice because

489
00:17:55,440 --> 00:17:58,000
sometimes when we use a

490
00:17:58,000 --> 00:18:00,480
package managers we have credentials to

491
00:18:00,480 --> 00:18:03,919
our repository and the other different

492
00:18:03,919 --> 00:18:06,960
credentials to push stuff to say a cd

493
00:18:06,960 --> 00:18:08,559
and we don't want to

494
00:18:08,559 --> 00:18:10,799
mix the different environments so i want

495
00:18:10,799 --> 00:18:13,120
them not to run any script

496
00:18:13,120 --> 00:18:15,200
so for instance if i want to

497
00:18:15,200 --> 00:18:16,400
have a

498
00:18:16,400 --> 00:18:19,600
secure way i have an npm token i run it

499
00:18:19,600 --> 00:18:21,280
with management signal scripts and then

500
00:18:21,280 --> 00:18:23,200
unsucks the ampere token and run my post

501
00:18:23,200 --> 00:18:26,320
install scripts so and this way i'm but

502
00:18:26,320 --> 00:18:27,919
i'm more secure human they don't have

503
00:18:27,919 --> 00:18:32,240
any way of a leakage of a npm token

504
00:18:32,240 --> 00:18:35,360
the thing is that npm does look for

505
00:18:35,360 --> 00:18:37,840
dot npm lc files and this is by

506
00:18:37,840 --> 00:18:40,960
definition and these dot npm lc have

507
00:18:40,960 --> 00:18:42,559
instructions of

508
00:18:42,559 --> 00:18:44,799
what npm should do

509
00:18:44,799 --> 00:18:45,760
so

510
00:18:45,760 --> 00:18:47,440
if you go and

511
00:18:47,440 --> 00:18:50,240
you put let's say a dot and pmlc inside

512
00:18:50,240 --> 00:18:51,679
your repo

513
00:18:51,679 --> 00:18:54,240
then when npm will run

514
00:18:54,240 --> 00:18:57,200
it will have to look full let's say npm

515
00:18:57,200 --> 00:18:59,840
6 looks for unload script and in this

516
00:18:59,840 --> 00:19:02,240
download script i can inject a

517
00:19:02,240 --> 00:19:04,160
javascript script

518
00:19:04,160 --> 00:19:06,720
inside my environment

519
00:19:06,720 --> 00:19:07,679
and

520
00:19:07,679 --> 00:19:10,880
inside my own repo that will execute and

521
00:19:10,880 --> 00:19:13,039
this is a way to bypass the minus my

522
00:19:13,039 --> 00:19:15,280
signal scripts actually it's not really

523
00:19:15,280 --> 00:19:18,480
bypassing you because ignoscripts wasn't

524
00:19:18,480 --> 00:19:21,120
never was never intended into

525
00:19:21,120 --> 00:19:22,960
not running scripts in different ways it

526
00:19:22,960 --> 00:19:27,520
was only intended to not run scripts and

527
00:19:27,520 --> 00:19:29,520
in the post and style and green style

528
00:19:29,520 --> 00:19:31,280
and all the

529
00:19:31,280 --> 00:19:32,640
all the live sites

530
00:19:32,640 --> 00:19:34,240
script life cycle

531
00:19:34,240 --> 00:19:35,360
so

532
00:19:35,360 --> 00:19:37,440
it's a bit confusing and there is no

533
00:19:37,440 --> 00:19:39,679
real way to prevent

534
00:19:39,679 --> 00:19:41,039
npm to

535
00:19:41,039 --> 00:19:42,000
run it

536
00:19:42,000 --> 00:19:44,400
in lpn 7 and 8 they fixed it and there's

537
00:19:44,400 --> 00:19:46,640
no unload script anymore but you can

538
00:19:46,640 --> 00:19:49,039
just replace the git

539
00:19:49,039 --> 00:19:52,559
shell file with evil get and then

540
00:19:52,559 --> 00:19:54,320
do they happen the same it will just

541
00:19:54,320 --> 00:19:57,360
like create the same

542
00:19:57,600 --> 00:19:59,280
same option the thing is over here you

543
00:19:59,280 --> 00:20:01,520
will need to create another npm a

544
00:20:01,520 --> 00:20:04,480
package that gets from a get repository

545
00:20:04,480 --> 00:20:08,000
instead from the uninstall npm

546
00:20:08,000 --> 00:20:10,320
so the attack scenario is pretty

547
00:20:10,320 --> 00:20:12,320
interesting the developer can add data

548
00:20:12,320 --> 00:20:15,440
and pmlc file push it into

549
00:20:15,440 --> 00:20:17,679
his repository even it's a local

550
00:20:17,679 --> 00:20:19,840
repository if it goes through different

551
00:20:19,840 --> 00:20:22,740
scanners or different the jenkins

552
00:20:22,740 --> 00:20:24,960
[Music]

553
00:20:24,960 --> 00:20:26,880
ci build

554
00:20:26,880 --> 00:20:30,240
build files the ci pipelines can go and

555
00:20:30,240 --> 00:20:32,400
run and they

556
00:20:32,400 --> 00:20:35,200
execute npm and then you can run cisco

557
00:20:35,200 --> 00:20:36,159
they

558
00:20:36,159 --> 00:20:37,600
steal the site secrets they have

559
00:20:37,600 --> 00:20:39,840
production access network access

560
00:20:39,840 --> 00:20:42,480
it is a part of jenkins is also a code

561
00:20:42,480 --> 00:20:45,280
execution as a service platform but

562
00:20:45,280 --> 00:20:47,600
you never intended to become from and

563
00:20:47,600 --> 00:20:50,000
from the packet json itself from from

564
00:20:50,000 --> 00:20:52,080
different areas over here

565
00:20:52,080 --> 00:20:54,480
but this also happens in python if for

566
00:20:54,480 --> 00:20:57,440
instance someone has a pip install

567
00:20:57,440 --> 00:20:59,760
and the paper star is looking for sata

568
00:20:59,760 --> 00:21:01,679
py and set up cfg

569
00:21:01,679 --> 00:21:02,480
then

570
00:21:02,480 --> 00:21:04,159
set up your wise python

571
00:21:04,159 --> 00:21:05,440
you can just like

572
00:21:05,440 --> 00:21:07,520
put whatever code you want over the day

573
00:21:07,520 --> 00:21:10,400
and it will just work and there's no

574
00:21:10,400 --> 00:21:12,880
it's by definition

575
00:21:12,880 --> 00:21:15,280
imposing python and running python so

576
00:21:15,280 --> 00:21:17,760
you don't have anything really to do

577
00:21:17,760 --> 00:21:20,720
about here there is like very refined in

578
00:21:20,720 --> 00:21:23,440
the setup cfd it's much more hard but

579
00:21:23,440 --> 00:21:25,679
setup cfg now usually

580
00:21:25,679 --> 00:21:28,640
is invoked by setup ui i think i think

581
00:21:28,640 --> 00:21:30,320
in the future like those changes now

582
00:21:30,320 --> 00:21:32,480
that you can run it without but it's

583
00:21:32,480 --> 00:21:35,039
still not mature enough

584
00:21:35,039 --> 00:21:36,760
uh again with

585
00:21:36,760 --> 00:21:38,799
requirements.txt so you have a different

586
00:21:38,799 --> 00:21:41,200
way to install requirements.txt

587
00:21:41,200 --> 00:21:42,240
and

588
00:21:42,240 --> 00:21:44,320
you can just like say give a list of

589
00:21:44,320 --> 00:21:45,600
requirements

590
00:21:45,600 --> 00:21:49,039
and over here in the requirements file

591
00:21:49,039 --> 00:21:51,280
usually it's a line by line but you can

592
00:21:51,280 --> 00:21:52,880
have special flags

593
00:21:52,880 --> 00:21:54,799
the minus r flag

594
00:21:54,799 --> 00:21:56,559
tells access

595
00:21:56,559 --> 00:21:58,320
another requirements file from a

596
00:21:58,320 --> 00:22:00,480
different source you can put a file like

597
00:22:00,480 --> 00:22:03,840
etc plus wd and get the log files

598
00:22:03,840 --> 00:22:06,000
and they pass the led into the log files

599
00:22:06,000 --> 00:22:07,840
or you can just like access the local

600
00:22:07,840 --> 00:22:10,799
network by http and have a sslf target

601
00:22:10,799 --> 00:22:12,880
and start attacking in

602
00:22:12,880 --> 00:22:15,120
resources outside inside the area of the

603
00:22:15,120 --> 00:22:16,159
network

604
00:22:16,159 --> 00:22:18,559
so it's pretty cool to how to abuse all

605
00:22:18,559 --> 00:22:20,320
this functionality

606
00:22:20,320 --> 00:22:22,960
and the same goes for ruby it's just a

607
00:22:22,960 --> 00:22:26,080
gem file just ruby fire that is executed

608
00:22:26,080 --> 00:22:27,840
so the same thing happens

609
00:22:27,840 --> 00:22:29,280
and this is like

610
00:22:29,280 --> 00:22:31,440
by definition package managers will

611
00:22:31,440 --> 00:22:33,120
execute code

612
00:22:33,120 --> 00:22:35,520
and we need to understand this and we

613
00:22:35,520 --> 00:22:36,640
need to

614
00:22:36,640 --> 00:22:38,960
understand that this is what they do

615
00:22:38,960 --> 00:22:40,559
and put the product

616
00:22:40,559 --> 00:22:41,840
protections

617
00:22:41,840 --> 00:22:43,760
around it too so when we execute

618
00:22:43,760 --> 00:22:45,679
something and we know it has access to

619
00:22:45,679 --> 00:22:48,240
different artifact uh repositories it

620
00:22:48,240 --> 00:22:50,080
has access to

621
00:22:50,080 --> 00:22:52,159
a secrets it has exited the

622
00:22:52,159 --> 00:22:53,440
environmental variables it will have

623
00:22:53,440 --> 00:22:55,679
absolutely access to everything

624
00:22:55,679 --> 00:22:56,880
and

625
00:22:56,880 --> 00:22:59,760
someone with enough intent will be able

626
00:22:59,760 --> 00:23:02,480
to execute code or folder even if it's a

627
00:23:02,480 --> 00:23:04,559
static configuration file that doesn't

628
00:23:04,559 --> 00:23:05,840
allow you to

629
00:23:05,840 --> 00:23:08,000
execute code

630
00:23:08,000 --> 00:23:09,520
i think the last thing i want to talk

631
00:23:09,520 --> 00:23:11,440
about

632
00:23:11,440 --> 00:23:13,919
is auditing

633
00:23:13,919 --> 00:23:17,120
and if we see other things so

634
00:23:17,120 --> 00:23:19,919
we have lots of security auditing and

635
00:23:19,919 --> 00:23:21,280
different we have

636
00:23:21,280 --> 00:23:23,919
lots of tools but also npm gives us out

637
00:23:23,919 --> 00:23:25,360
of the box

638
00:23:25,360 --> 00:23:29,039
a security auditing for vulnerabilities

639
00:23:29,039 --> 00:23:31,200
and this is uh usually i just like

640
00:23:31,200 --> 00:23:33,600
install the package i do npm edit or

641
00:23:33,600 --> 00:23:36,240
just even by default when i install it

642
00:23:36,240 --> 00:23:37,919
tells me how many vulnerabilities you

643
00:23:37,919 --> 00:23:40,159
have inside the package

644
00:23:40,159 --> 00:23:43,279
and it's very reassuring that to know

645
00:23:43,279 --> 00:23:45,279
okay there's a critical

646
00:23:45,279 --> 00:23:48,320
vulnerability i will update it

647
00:23:48,320 --> 00:23:49,039
so

648
00:23:49,039 --> 00:23:51,760
i'm going into when i'm signing like

649
00:23:51,760 --> 00:23:54,240
pack result for 4.2 point zero and i

650
00:23:54,240 --> 00:23:55,279
know there's a high severity

651
00:23:55,279 --> 00:23:57,840
vulnerability then npm will just tell me

652
00:23:57,840 --> 00:23:59,039
there's a one high stability

653
00:23:59,039 --> 00:24:00,880
vulnerability you should fix it

654
00:24:00,880 --> 00:24:05,039
uh maybe 4.2.1 will be fixed or when

655
00:24:05,039 --> 00:24:07,279
they go to the latest version and then

656
00:24:07,279 --> 00:24:08,640
we should have a

657
00:24:08,640 --> 00:24:11,360
proper way to fix vulnerabilities

658
00:24:11,360 --> 00:24:13,840
don't just not use log files and then

659
00:24:13,840 --> 00:24:16,000
they will do latest all the time because

660
00:24:16,000 --> 00:24:17,600
we will have the problems from this

661
00:24:17,600 --> 00:24:20,400
start so we need to make sure we have

662
00:24:20,400 --> 00:24:22,080
log files we need to make sure we have

663
00:24:22,080 --> 00:24:23,840
these vulnerabilities and when there's

664
00:24:23,840 --> 00:24:26,799
availability act upon it install

665
00:24:26,799 --> 00:24:28,480
uh upgrade the

666
00:24:28,480 --> 00:24:30,720
availability upgrade the package and

667
00:24:30,720 --> 00:24:33,520
test it before we're just automatically

668
00:24:33,520 --> 00:24:37,679
testing a viruses new viruses

669
00:24:37,679 --> 00:24:38,480
but

670
00:24:38,480 --> 00:24:40,880
what i understood in there i found out

671
00:24:40,880 --> 00:24:41,919
in

672
00:24:41,919 --> 00:24:43,919
npm project 6

673
00:24:43,919 --> 00:24:47,440
when you give an alias to a package

674
00:24:47,440 --> 00:24:50,480
then it won't validate the package

675
00:24:50,480 --> 00:24:53,120
so if i gave like pack results from the

676
00:24:53,120 --> 00:24:55,520
same alias exactly

677
00:24:55,520 --> 00:24:57,919
as packers although so it does nothing

678
00:24:57,919 --> 00:25:00,080
for the code and it actually works as

679
00:25:00,080 --> 00:25:03,840
intended but npm audit or even other

680
00:25:03,840 --> 00:25:07,199
package scanning

681
00:25:08,640 --> 00:25:10,720
solutions will not

682
00:25:10,720 --> 00:25:13,279
will not see this alias and will be

683
00:25:13,279 --> 00:25:15,679
fooled by the syntax i don't know why it

684
00:25:15,679 --> 00:25:17,919
really happens but it will find zero

685
00:25:17,919 --> 00:25:19,600
vulnerabilities

686
00:25:19,600 --> 00:25:21,520
they actually fixed it in the

687
00:25:21,520 --> 00:25:24,159
uh version and the latest in npm seven

688
00:25:24,159 --> 00:25:25,840
and then eight

689
00:25:25,840 --> 00:25:28,880
and then you can see there are different

690
00:25:28,880 --> 00:25:30,240
ways so

691
00:25:30,240 --> 00:25:33,440
to bypass this so if we go to

692
00:25:33,440 --> 00:25:34,960
uh

693
00:25:34,960 --> 00:25:36,240
out of store

694
00:25:36,240 --> 00:25:38,640
package let's say github.com

695
00:25:38,640 --> 00:25:40,880
i go to the github depositor itself

696
00:25:40,880 --> 00:25:43,760
still npm does some magic and goes and

697
00:25:43,760 --> 00:25:45,600
tries to resolve the pack resolver and

698
00:25:45,600 --> 00:25:48,400
it knows the github and goes

699
00:25:48,400 --> 00:25:50,880
and find that this has a vulnerability

700
00:25:50,880 --> 00:25:53,200
that's pretty cool that it was succeeded

701
00:25:53,200 --> 00:25:55,120
in doing it

702
00:25:55,120 --> 00:25:58,240
but when i'm going into and i i try to

703
00:25:58,240 --> 00:26:00,400
play with the syntax a bit and find out

704
00:26:00,400 --> 00:26:01,760
how to

705
00:26:01,760 --> 00:26:03,840
bypass it so if i go

706
00:26:03,840 --> 00:26:06,320
and download it from a specific git and

707
00:26:06,320 --> 00:26:09,600
i added a dot after the github.com

708
00:26:09,600 --> 00:26:12,720
then i successfully bypassed

709
00:26:12,720 --> 00:26:15,679
the protection of like the mapping that

710
00:26:15,679 --> 00:26:16,960
lpm did

711
00:26:16,960 --> 00:26:17,760
and

712
00:26:17,760 --> 00:26:20,320
was able to

713
00:26:20,320 --> 00:26:23,039
download without any audit and this

714
00:26:23,039 --> 00:26:26,400
means that if i'm a package

715
00:26:26,400 --> 00:26:27,520
if i'm a

716
00:26:27,520 --> 00:26:30,240
package maintainer oh i have some code i

717
00:26:30,240 --> 00:26:32,480
can add this

718
00:26:32,480 --> 00:26:35,679
piece of code and the audit will not

719
00:26:35,679 --> 00:26:37,679
find it it will not find the any

720
00:26:37,679 --> 00:26:40,000
vulnerability inside it

721
00:26:40,000 --> 00:26:43,039
which means that also the security team

722
00:26:43,039 --> 00:26:45,120
will not know about

723
00:26:45,120 --> 00:26:46,960
it will not know that there's a

724
00:26:46,960 --> 00:26:48,640
vulnerability but it will not know also

725
00:26:48,640 --> 00:26:49,520
that

726
00:26:49,520 --> 00:26:51,520
the package might have skipped this

727
00:26:51,520 --> 00:26:53,520
vulnerability so

728
00:26:53,520 --> 00:26:55,600
like i i asked them and then we talked

729
00:26:55,600 --> 00:26:57,120
about in the other circuit i talked to

730
00:26:57,120 --> 00:26:59,600
the npm team to check if we can add an

731
00:26:59,600 --> 00:27:02,480
rfc another like not found zero

732
00:27:02,480 --> 00:27:04,720
vulnerabilities but how many

733
00:27:04,720 --> 00:27:06,640
packages were skipped in the process of

734
00:27:06,640 --> 00:27:09,360
testing it because we have this package

735
00:27:09,360 --> 00:27:11,600
that is skipped and it didn't it didn't

736
00:27:11,600 --> 00:27:13,679
succeed in violating this

737
00:27:13,679 --> 00:27:17,200
and checking if it's vulnerable or not

738
00:27:17,200 --> 00:27:19,360
and because it depends on the cursive

739
00:27:19,360 --> 00:27:21,279
then you have a problem

740
00:27:21,279 --> 00:27:24,080
that even if you have this awesome

741
00:27:24,080 --> 00:27:25,760
project and you have

742
00:27:25,760 --> 00:27:28,399
a dependency but this dependency has out

743
00:27:28,399 --> 00:27:30,399
of stone dependency that you want aware

744
00:27:30,399 --> 00:27:32,320
of you will still still see zero

745
00:27:32,320 --> 00:27:34,880
vulnerabilities and you don't even know

746
00:27:34,880 --> 00:27:35,679
that

747
00:27:35,679 --> 00:27:38,240
it did some kind of cheating and

748
00:27:38,240 --> 00:27:40,559
bypassing the whole production of

749
00:27:40,559 --> 00:27:42,960
in the future and this is a good way to

750
00:27:42,960 --> 00:27:45,600
add in malware or add in a version that

751
00:27:45,600 --> 00:27:47,440
in the future you can just update it and

752
00:27:47,440 --> 00:27:49,360
it will automatically update

753
00:27:49,360 --> 00:27:50,159
and

754
00:27:50,159 --> 00:27:51,360
so

755
00:27:51,360 --> 00:27:53,840
it's a good way and it's uh too bad that

756
00:27:53,840 --> 00:27:56,159
we don't

757
00:27:56,159 --> 00:27:58,399
validate our own vulnerabilities and

758
00:27:58,399 --> 00:28:01,679
this is something that i want also to

759
00:28:01,679 --> 00:28:04,080
think about that you should always

760
00:28:04,080 --> 00:28:06,159
even that you have inside this package

761
00:28:06,159 --> 00:28:09,039
of angels you have s bomb and

762
00:28:09,039 --> 00:28:11,440
suffer bill of materials and you have an

763
00:28:11,440 --> 00:28:13,039
already analysis and you have all the

764
00:28:13,039 --> 00:28:14,320
tools

765
00:28:14,320 --> 00:28:15,840
you should trust them

766
00:28:15,840 --> 00:28:17,440
that they

767
00:28:17,440 --> 00:28:18,399
they

768
00:28:18,399 --> 00:28:20,799
want you to get a job but they don't

769
00:28:20,799 --> 00:28:23,600
want they they don't do the more

770
00:28:23,600 --> 00:28:26,480
advanced uh

771
00:28:26,480 --> 00:28:29,679
testing and you should have a

772
00:28:29,679 --> 00:28:31,919
solution that creates

773
00:28:31,919 --> 00:28:33,520
proper s-bomb creates public

774
00:28:33,520 --> 00:28:35,840
vulnerability analysis proper

775
00:28:35,840 --> 00:28:37,840
testing and

776
00:28:37,840 --> 00:28:40,320
most importantly that you know when it

777
00:28:40,320 --> 00:28:42,159
fails when it doesn't do

778
00:28:42,159 --> 00:28:45,279
so you need to know what it that it does

779
00:28:45,279 --> 00:28:48,240
be able to get the phenomenons but also

780
00:28:48,240 --> 00:28:49,360
that it

781
00:28:49,360 --> 00:28:51,520
failed is for some reasons over

782
00:28:51,520 --> 00:28:54,000
some or somewhere

783
00:28:54,000 --> 00:28:55,760
uh we had

784
00:28:55,760 --> 00:28:58,080
actually last week there was a bit of

785
00:28:58,080 --> 00:28:59,520
talking about the npm package

786
00:28:59,520 --> 00:29:02,080
maintenance and then someone just like

787
00:29:02,080 --> 00:29:04,720
filed and they create a tool that to

788
00:29:04,720 --> 00:29:06,000
check

789
00:29:06,000 --> 00:29:08,880
unregistered domains so if we have uh

790
00:29:08,880 --> 00:29:11,120
maintain them

791
00:29:11,120 --> 00:29:14,159
that is a maintainer for a very known

792
00:29:14,159 --> 00:29:16,720
package but his domain got expired

793
00:29:16,720 --> 00:29:18,799
someone can just buy the domain

794
00:29:18,799 --> 00:29:20,960
and then reset the password into his

795
00:29:20,960 --> 00:29:22,480
account

796
00:29:22,480 --> 00:29:23,840
so this is a

797
00:29:23,840 --> 00:29:26,080
something that happened and then here we

798
00:29:26,080 --> 00:29:28,240
saw lots of people starting to scan all

799
00:29:28,240 --> 00:29:30,399
the packages and found like what eleven

800
00:29:30,399 --> 00:29:31,360
thousand

801
00:29:31,360 --> 00:29:32,080
a

802
00:29:32,080 --> 00:29:34,640
hijackable packages and there was a bit

803
00:29:34,640 --> 00:29:37,840
of a lot of noise in the week uh last

804
00:29:37,840 --> 00:29:39,760
two weeks i think

805
00:29:39,760 --> 00:29:41,600
and just you should know

806
00:29:41,600 --> 00:29:44,399
you cannot fully trust the maintainers

807
00:29:44,399 --> 00:29:46,799
because they created a package they

808
00:29:46,799 --> 00:29:48,880
sometimes they forgot about it sometimes

809
00:29:48,880 --> 00:29:51,440
they didn't continue they are people

810
00:29:51,440 --> 00:29:53,919
they are hackable also they have domains

811
00:29:53,919 --> 00:29:56,399
that are hackable and the dns and

812
00:29:56,399 --> 00:29:57,200
there's

813
00:29:57,200 --> 00:29:58,799
the whole game and it's very hard to

814
00:29:58,799 --> 00:30:01,039
protect everything over here

815
00:30:01,039 --> 00:30:02,880
so your next task is to find all

816
00:30:02,880 --> 00:30:04,320
applications in your organization

817
00:30:04,320 --> 00:30:05,679
organizations

818
00:30:05,679 --> 00:30:09,840
that the maintainers don't have an email

819
00:30:10,080 --> 00:30:12,320
that don't have a domain or the domain

820
00:30:12,320 --> 00:30:14,960
expired this is very hard to do

821
00:30:14,960 --> 00:30:17,919
it's nobody is really doing it and if

822
00:30:17,919 --> 00:30:19,840
you will do it you will see how much

823
00:30:19,840 --> 00:30:23,200
problems you have inside all of the

824
00:30:23,200 --> 00:30:24,880
packages

825
00:30:24,880 --> 00:30:27,200
so a quick recap

826
00:30:27,200 --> 00:30:29,360
package managers install what they want

827
00:30:29,360 --> 00:30:31,919
they execute unwanted scripts they added

828
00:30:31,919 --> 00:30:33,039
checks

829
00:30:33,039 --> 00:30:34,640
easily bypassed

830
00:30:34,640 --> 00:30:36,880
and just random people maintain packages

831
00:30:36,880 --> 00:30:39,600
and everybody uses them

832
00:30:39,600 --> 00:30:42,159
but we rely on open source we cannot

833
00:30:42,159 --> 00:30:44,480
live without package managers if you

834
00:30:44,480 --> 00:30:46,960
will tell a developer now

835
00:30:46,960 --> 00:30:48,159
not to use

836
00:30:48,159 --> 00:30:49,600
any package manager it would be a

837
00:30:49,600 --> 00:30:51,200
problem for that they

838
00:30:51,200 --> 00:30:53,440
like it's part of our day-to-day life i

839
00:30:53,440 --> 00:30:55,039
use it every day

840
00:30:55,039 --> 00:30:57,360
but we need to know how to protect

841
00:30:57,360 --> 00:30:58,720
ourselves

842
00:30:58,720 --> 00:31:01,039
so we need to make sure we use log files

843
00:31:01,039 --> 00:31:03,120
to verify log files on the news to

844
00:31:03,120 --> 00:31:05,279
manage our correct software materials

845
00:31:05,279 --> 00:31:07,200
database

846
00:31:07,200 --> 00:31:09,120
and to monitor for every package

847
00:31:09,120 --> 00:31:11,440
download that is not in my

848
00:31:11,440 --> 00:31:13,440
software with materials

849
00:31:13,440 --> 00:31:15,519
i want to make sure that packet managers

850
00:31:15,519 --> 00:31:17,519
don't have any permissions

851
00:31:17,519 --> 00:31:19,200
put them in a container put this

852
00:31:19,200 --> 00:31:21,120
container in a box put it in another

853
00:31:21,120 --> 00:31:22,240
sandbox

854
00:31:22,240 --> 00:31:24,399
give them as many much minimal

855
00:31:24,399 --> 00:31:26,000
approaches as possible

856
00:31:26,000 --> 00:31:28,080
monitor what they do

857
00:31:28,080 --> 00:31:30,960
treat them as viruses

858
00:31:30,960 --> 00:31:31,440
and or

859
00:31:31,440 --> 00:31:34,000
least with a permission and just don't

860
00:31:34,000 --> 00:31:36,159
let them do anything

861
00:31:36,159 --> 00:31:39,919
i know they need the internet access so

862
00:31:41,200 --> 00:31:42,720
and

863
00:31:42,720 --> 00:31:44,960
from other checks just like one other

864
00:31:44,960 --> 00:31:46,320
checks with external

865
00:31:46,320 --> 00:31:48,480
checks with external tools make sure

866
00:31:48,480 --> 00:31:50,720
you're taking in account also the

867
00:31:50,720 --> 00:31:52,960
specification file itself and also the

868
00:31:52,960 --> 00:31:54,480
log files don't

869
00:31:54,480 --> 00:31:55,279
you

870
00:31:55,279 --> 00:31:58,559
if also you have a log file sometimes

871
00:31:58,559 --> 00:32:00,720
it will be lost in the way sometimes you

872
00:32:00,720 --> 00:32:02,000
will have a

873
00:32:02,000 --> 00:32:03,279
differences a difference between the

874
00:32:03,279 --> 00:32:05,440
specification file and log file what

875
00:32:05,440 --> 00:32:07,519
would happen you you don't you cannot

876
00:32:07,519 --> 00:32:10,399
rely the the package manager will always

877
00:32:10,399 --> 00:32:12,240
use only the log file or user

878
00:32:12,240 --> 00:32:14,799
specification file or maybe a developer

879
00:32:14,799 --> 00:32:18,320
will remove it and delete it

880
00:32:18,320 --> 00:32:20,000
at the end the

881
00:32:20,000 --> 00:32:21,679
most important thing

882
00:32:21,679 --> 00:32:23,600
you can do is make sure that in the

883
00:32:23,600 --> 00:32:24,960
binary and the

884
00:32:24,960 --> 00:32:26,559
container itself

885
00:32:26,559 --> 00:32:29,120
you have the same packages that are well

886
00:32:29,120 --> 00:32:30,320
supposed to be in the log file and

887
00:32:30,320 --> 00:32:32,559
responsibility in the specification file

888
00:32:32,559 --> 00:32:34,559
and this is the way to validate that

889
00:32:34,559 --> 00:32:37,279
it's everything is there to and

890
00:32:37,279 --> 00:32:39,360
enough nothing to drift enough nothing

891
00:32:39,360 --> 00:32:42,880
moved into production and if you have

892
00:32:42,880 --> 00:32:44,799
out of stock packages just verify them

893
00:32:44,799 --> 00:32:47,760
manually i would just like say

894
00:32:47,760 --> 00:32:49,360
everything that is

895
00:32:49,360 --> 00:32:51,039
not inside the package manager

896
00:32:51,039 --> 00:32:53,519
repositories you have to verify manually

897
00:32:53,519 --> 00:32:55,600
you have to check it to test it and if

898
00:32:55,600 --> 00:32:56,880
there's a change

899
00:32:56,880 --> 00:32:58,880
and i'll sign it and make sure that

900
00:32:58,880 --> 00:33:00,159
everything is

901
00:33:00,159 --> 00:33:02,480
valid over there

902
00:33:02,480 --> 00:33:05,279
any questions

903
00:33:05,600 --> 00:33:08,879
i don't know how much time we have

904
00:33:09,120 --> 00:33:11,200
thanks for adam um i think we've we've

905
00:33:11,200 --> 00:33:12,480
got a minute or two so we'll take a

906
00:33:12,480 --> 00:33:14,240
couple of questions i think andy had one

907
00:33:14,240 --> 00:33:16,559
for you

908
00:33:18,480 --> 00:33:20,240
hi thanks for the talk that was really

909
00:33:20,240 --> 00:33:22,000
fabulous um

910
00:33:22,000 --> 00:33:23,440
that the main hijack you were talking

911
00:33:23,440 --> 00:33:24,799
about at the end

912
00:33:24,799 --> 00:33:25,600
um

913
00:33:25,600 --> 00:33:26,799
there's lots of things that we can do

914
00:33:26,799 --> 00:33:29,360
there um and it looks like a lot of the

915
00:33:29,360 --> 00:33:30,559
a lot of the problems that you

916
00:33:30,559 --> 00:33:32,080
demonstrated there were to do with

917
00:33:32,080 --> 00:33:34,480
malicious updates to maybe an untrusted

918
00:33:34,480 --> 00:33:36,240
developer something like this

919
00:33:36,240 --> 00:33:38,080
do you think there's a space for code

920
00:33:38,080 --> 00:33:39,200
signing

921
00:33:39,200 --> 00:33:40,080
in

922
00:33:40,080 --> 00:33:43,039
the package registry

923
00:33:46,000 --> 00:33:47,120
people

924
00:33:47,120 --> 00:33:48,799
first of all yes i think like code

925
00:33:48,799 --> 00:33:50,480
signing is everybody's talking about it

926
00:33:50,480 --> 00:33:53,200
and it's the next thing that people want

927
00:33:53,200 --> 00:33:56,080
to start to do it's a code signing from

928
00:33:56,080 --> 00:33:59,279
cosine commits and the code calls a code

929
00:33:59,279 --> 00:34:01,120
signing even

930
00:34:01,120 --> 00:34:03,440
different areas inside the packet itself

931
00:34:03,440 --> 00:34:07,360
you see we have integrity but it's uh

932
00:34:07,360 --> 00:34:08,800
it's not enough

933
00:34:08,800 --> 00:34:09,599
and

934
00:34:09,599 --> 00:34:12,719
the more we have ways that we can sign

935
00:34:12,719 --> 00:34:15,199
different areas if i can sign the code

936
00:34:15,199 --> 00:34:17,520
and then sign the container and sign

937
00:34:17,520 --> 00:34:19,918
everything else and validate the

938
00:34:19,918 --> 00:34:21,440
everything inside the container and

939
00:34:21,440 --> 00:34:23,599
inside the build systems so validate

940
00:34:23,599 --> 00:34:25,359
everything inside of the

941
00:34:25,359 --> 00:34:27,199
different steps in the way

942
00:34:27,199 --> 00:34:29,520
it will be much more

943
00:34:29,520 --> 00:34:31,359
easier the thing is

944
00:34:31,359 --> 00:34:33,040
when you validate something when you

945
00:34:33,040 --> 00:34:34,560
sign something you need to make sure you

946
00:34:34,560 --> 00:34:36,800
have the proper solutions and the proper

947
00:34:36,800 --> 00:34:39,760
security controls that you just

948
00:34:39,760 --> 00:34:42,719
not just sign on blindly you need to

949
00:34:42,719 --> 00:34:45,599
verify it and then sign it so if someone

950
00:34:45,599 --> 00:34:49,359
adds a very like execution code

951
00:34:49,359 --> 00:34:51,440
so maybe this time some static analysis

952
00:34:51,440 --> 00:34:53,520
and then after doing static analysis

953
00:34:53,520 --> 00:34:56,639
sign it automatically

954
00:34:59,520 --> 00:35:00,800
yes

955
00:35:00,800 --> 00:35:03,040
okay and uh

956
00:35:03,040 --> 00:35:04,560
one more question are there any

957
00:35:04,560 --> 00:35:07,359
statistics of the prevalence of attempts

958
00:35:07,359 --> 00:35:08,960
of attacks within the most popular

959
00:35:08,960 --> 00:35:11,040
package managers

960
00:35:11,040 --> 00:35:14,240
um this is hard actually i don't

961
00:35:14,240 --> 00:35:16,240
i didn't play with statistics like i'm

962
00:35:16,240 --> 00:35:18,640
all on the defending side and looking at

963
00:35:18,640 --> 00:35:20,480
different like from the overall view and

964
00:35:20,480 --> 00:35:22,320
trying to find the problems of the

965
00:35:22,320 --> 00:35:23,280
future

966
00:35:23,280 --> 00:35:26,240
i don't do too much incident response

967
00:35:26,240 --> 00:35:28,640
so i don't know what statistics but we

968
00:35:28,640 --> 00:35:32,000
do see that like in the past

969
00:35:32,000 --> 00:35:34,480
like we had because of code com for

970
00:35:34,480 --> 00:35:37,040
instance a lot of uh shares started

971
00:35:37,040 --> 00:35:39,680
popping up around the world

972
00:35:39,680 --> 00:35:42,400
when they had their ipo uh

973
00:35:42,400 --> 00:35:43,280
risk

974
00:35:43,280 --> 00:35:45,359
that they were hacked today because

975
00:35:45,359 --> 00:35:47,760
their whole code base was still could

976
00:35:47,760 --> 00:35:49,520
have been stolen

977
00:35:49,520 --> 00:35:51,599
so we do have different

978
00:35:51,599 --> 00:35:53,839
risks over there but

979
00:35:53,839 --> 00:35:56,240
because every company because it happens

980
00:35:56,240 --> 00:35:58,400
inside the companies themselves

981
00:35:58,400 --> 00:36:00,400
and it's not like public public

982
00:36:00,400 --> 00:36:02,160
information i don't think we will ever

983
00:36:02,160 --> 00:36:05,520
have proper statistics

984
00:36:06,640 --> 00:36:08,880
okay that makes sense great um thank you

985
00:36:08,880 --> 00:36:12,310
very much rhodam excellent thank you

986
00:36:12,310 --> 00:36:15,779
[Music]

