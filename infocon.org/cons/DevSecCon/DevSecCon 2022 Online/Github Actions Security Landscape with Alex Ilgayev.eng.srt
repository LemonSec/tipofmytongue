1
00:00:00,470 --> 00:00:04,319
[Music]

2
00:00:04,480 --> 00:00:06,720
thank you thank you right okay we're

3
00:00:06,720 --> 00:00:08,559
moving swiftly on

4
00:00:08,559 --> 00:00:11,599
uh our next speaker is alex ilgiev um

5
00:00:11,599 --> 00:00:14,160
alex is a senior security researcher at

6
00:00:14,160 --> 00:00:16,480
sci code and we're going to be talking

7
00:00:16,480 --> 00:00:19,840
about github actions so um alex if you

8
00:00:19,840 --> 00:00:21,600
want to share your screen

9
00:00:21,600 --> 00:00:25,119
yeah share my screen yeah

10
00:00:25,119 --> 00:00:28,119
work

11
00:00:33,440 --> 00:00:34,719
yeah

12
00:00:34,719 --> 00:00:35,640
can you see it right

13
00:00:35,640 --> 00:00:36,719
[Music]

14
00:00:36,719 --> 00:00:38,879
the floor is yours

15
00:00:38,879 --> 00:00:41,520
yeah thanks for introducing me matt

16
00:00:41,520 --> 00:00:44,399
so the best topic will be github action

17
00:00:44,399 --> 00:00:47,120
security landscape um i'm alex from

18
00:00:47,120 --> 00:00:48,160
cyclone

19
00:00:48,160 --> 00:00:50,559
and i'll present you our latest unique

20
00:00:50,559 --> 00:00:53,520
research of uh github actions internals

21
00:00:53,520 --> 00:00:55,840
including how we discover and disclose

22
00:00:55,840 --> 00:00:58,239
some critical vulnerabilities in several

23
00:00:58,239 --> 00:01:00,640
popular open source projects that were

24
00:01:00,640 --> 00:01:02,559
using github actions

25
00:01:02,559 --> 00:01:06,000
so let's start with the agenda

26
00:01:06,159 --> 00:01:08,159
if we explore this talk

27
00:01:08,159 --> 00:01:09,280
the

28
00:01:09,280 --> 00:01:12,000
security landscape of github actions and

29
00:01:12,000 --> 00:01:13,600
first we'll learn what is github actions

30
00:01:13,600 --> 00:01:15,520
and why is this really a powerful build

31
00:01:15,520 --> 00:01:17,040
system

32
00:01:17,040 --> 00:01:18,280
then we'll learn what kind of

33
00:01:18,280 --> 00:01:20,720
misconfigurations it can have

34
00:01:20,720 --> 00:01:22,479
we focus on the code ejection is the

35
00:01:22,479 --> 00:01:25,040
main scenario of the exploit

36
00:01:25,040 --> 00:01:26,720
then we understand what could be the

37
00:01:26,720 --> 00:01:29,280
consequences by exploring the github

38
00:01:29,280 --> 00:01:32,240
actions internals and finally we'll

39
00:01:32,240 --> 00:01:34,159
explore some of the possible mitigations

40
00:01:34,159 --> 00:01:37,119
to stop the such attacks

41
00:01:37,119 --> 00:01:39,439
so as the privacy said i'm alex selgaiv

42
00:01:39,439 --> 00:01:41,360
i'm a senior security researcher at

43
00:01:41,360 --> 00:01:44,159
cyclone previously i were investigating

44
00:01:44,159 --> 00:01:46,159
a malware threats and checkpoint

45
00:01:46,159 --> 00:01:47,680
research

46
00:01:47,680 --> 00:01:49,680
i love anything that relates to security

47
00:01:49,680 --> 00:01:51,439
and hacking so don't hesitate to reach

48
00:01:51,439 --> 00:01:55,320
out to me as full twitter

49
00:01:55,520 --> 00:01:58,079
so let's talk a bit about github for

50
00:01:58,079 --> 00:02:00,479
most of its history github was all about

51
00:02:00,479 --> 00:02:03,119
storing source code in 2018 they

52
00:02:03,119 --> 00:02:04,399
announced that they are going in a

53
00:02:04,399 --> 00:02:06,159
different but related direction by

54
00:02:06,159 --> 00:02:08,239
launching github bachchan which is a

55
00:02:08,239 --> 00:02:11,120
cicd platform allowing github developers

56
00:02:11,120 --> 00:02:14,160
to automate development workflows easily

57
00:02:14,160 --> 00:02:16,319
since then github actions has become

58
00:02:16,319 --> 00:02:19,120
extremely popular mainly due to its rich

59
00:02:19,120 --> 00:02:22,319
marketplace containing more than 12 000

60
00:02:22,319 --> 00:02:24,800
actions and free hosted runners for

61
00:02:24,800 --> 00:02:26,720
public repositories

62
00:02:26,720 --> 00:02:29,680
by now github has over 73 million

63
00:02:29,680 --> 00:02:32,160
developers and more than 200 million

64
00:02:32,160 --> 00:02:34,959
repositories

65
00:02:35,200 --> 00:02:36,879
before we go deeper into the

66
00:02:36,879 --> 00:02:38,400
misconfigurations

67
00:02:38,400 --> 00:02:41,120
we found let's first understand the

68
00:02:41,120 --> 00:02:44,160
possible usages of github action

69
00:02:44,160 --> 00:02:46,560
the most popular use cases use case

70
00:02:46,560 --> 00:02:48,800
would be probably building your code

71
00:02:48,800 --> 00:02:50,480
into a container

72
00:02:50,480 --> 00:02:53,280
and uploading to your chosen registry

73
00:02:53,280 --> 00:02:57,200
could be dockerhub jfrog ecr gcr and

74
00:02:57,200 --> 00:02:58,879
many many more

75
00:02:58,879 --> 00:03:01,599
other possible usages could be creating

76
00:03:01,599 --> 00:03:04,239
scheduled tasks to scan vulnerabilities

77
00:03:04,239 --> 00:03:07,040
in your repository it could be running

78
00:03:07,040 --> 00:03:09,760
tests or stacking static analysis for a

79
00:03:09,760 --> 00:03:11,040
pull request

80
00:03:11,040 --> 00:03:13,920
could be automatic labeling for issues

81
00:03:13,920 --> 00:03:16,640
based on some predefined logic it could

82
00:03:16,640 --> 00:03:18,959
be sending issues to ticket handling

83
00:03:18,959 --> 00:03:22,879
system and much much more

84
00:03:23,280 --> 00:03:25,519
so what is github actions workflow looks

85
00:03:25,519 --> 00:03:26,480
like

86
00:03:26,480 --> 00:03:29,280
so basically it is a yaml file that

87
00:03:29,280 --> 00:03:31,040
contains a name

88
00:03:31,040 --> 00:03:34,000
a triggered event and jobs

89
00:03:34,000 --> 00:03:36,319
the triggered event in this case is a

90
00:03:36,319 --> 00:03:39,440
push event this means that for every a

91
00:03:39,440 --> 00:03:41,760
new push to the repository for every

92
00:03:41,760 --> 00:03:45,120
commit this event will be triggered

93
00:03:45,120 --> 00:03:46,959
and the job in this

94
00:03:46,959 --> 00:03:49,200
in this example contains

95
00:03:49,200 --> 00:03:50,640
a single step

96
00:03:50,640 --> 00:03:53,840
that just echoes hello world

97
00:03:53,840 --> 00:03:56,959
if we put this a workflow file into the

98
00:03:56,959 --> 00:03:59,680
path of that github slash workload

99
00:03:59,680 --> 00:04:01,280
workflow space

100
00:04:01,280 --> 00:04:02,720
in github

101
00:04:02,720 --> 00:04:05,200
and that's it github action service will

102
00:04:05,200 --> 00:04:08,400
trigger this workflow whenever we push a

103
00:04:08,400 --> 00:04:11,280
new a code to the repository

104
00:04:11,280 --> 00:04:14,640
simple as that

105
00:04:14,640 --> 00:04:16,399
to understand the vulnerabilities we

106
00:04:16,399 --> 00:04:18,160
need first to understand some core

107
00:04:18,160 --> 00:04:20,478
mechanics of github action

108
00:04:20,478 --> 00:04:23,680
the entity that runs the job is called

109
00:04:23,680 --> 00:04:26,639
github runner and is actually an open

110
00:04:26,639 --> 00:04:29,600
source project maintained by github

111
00:04:29,600 --> 00:04:31,440
this runner fetches

112
00:04:31,440 --> 00:04:34,479
the job from github action service and

113
00:04:34,479 --> 00:04:36,000
executes them

114
00:04:36,000 --> 00:04:38,160
this runner could be could be run either

115
00:04:38,160 --> 00:04:41,040
on a github hosted machine or the more

116
00:04:41,040 --> 00:04:43,840
the which is the more popular solution

117
00:04:43,840 --> 00:04:46,560
or in a self-hosted machine

118
00:04:46,560 --> 00:04:49,440
if a github hosted machine is used it is

119
00:04:49,440 --> 00:04:52,080
also run as an ephemeral environment

120
00:04:52,080 --> 00:04:54,639
this means that each job will run on

121
00:04:54,639 --> 00:04:57,919
completely clean vm isolated machine and

122
00:04:57,919 --> 00:05:00,080
once the job is over the environment

123
00:05:00,080 --> 00:05:02,160
will be deleted

124
00:05:02,160 --> 00:05:03,600
in addition

125
00:05:03,600 --> 00:05:06,240
for each job github creates a temporary

126
00:05:06,240 --> 00:05:08,800
token which can be used to access a

127
00:05:08,800 --> 00:05:11,120
github api for various stats

128
00:05:11,120 --> 00:05:13,759
such tasks could be updating issues

129
00:05:13,759 --> 00:05:19,120
comments full request codes and nmo

130
00:05:19,120 --> 00:05:20,960
so let's understand this github token

131
00:05:20,960 --> 00:05:24,240
and why is why it is used here the

132
00:05:24,240 --> 00:05:27,120
standard method to access github api

133
00:05:27,120 --> 00:05:30,000
is via personal access token

134
00:05:30,000 --> 00:05:32,800
this token contains the same permissions

135
00:05:32,800 --> 00:05:34,960
as the user who issued it

136
00:05:34,960 --> 00:05:37,600
this token has two main drawbacks

137
00:05:37,600 --> 00:05:40,080
it can be quite permissive because it

138
00:05:40,080 --> 00:05:43,120
isn't limited to specific repositories

139
00:05:43,120 --> 00:05:45,199
and it is usually active for a long

140
00:05:45,199 --> 00:05:47,280
duration which is problematic if it

141
00:05:47,280 --> 00:05:48,560
leaks

142
00:05:48,560 --> 00:05:51,199
to overcome using these tokens github

143
00:05:51,199 --> 00:05:53,039
came up with an idea to create a

144
00:05:53,039 --> 00:05:56,000
temporary token called github token on

145
00:05:56,000 --> 00:05:58,080
each invocation

146
00:05:58,080 --> 00:06:00,560
this token receives default license

147
00:06:00,560 --> 00:06:03,039
permissions for most of the events but

148
00:06:03,039 --> 00:06:05,759
it has several limitations

149
00:06:05,759 --> 00:06:07,199
this token

150
00:06:07,199 --> 00:06:09,600
a scope is for the repository on which

151
00:06:09,600 --> 00:06:12,319
the actions are executed

152
00:06:12,319 --> 00:06:14,240
and this token is valid during the

153
00:06:14,240 --> 00:06:17,680
action executed period or 24 hours at

154
00:06:17,680 --> 00:06:19,120
most

155
00:06:19,120 --> 00:06:21,919
it uses default parameters for many many

156
00:06:21,919 --> 00:06:25,680
actions for example the checkout action

157
00:06:25,680 --> 00:06:27,759
and fourth pull request for public

158
00:06:27,759 --> 00:06:30,319
repositories will receive at most read

159
00:06:30,319 --> 00:06:34,759
permissions for this github token

160
00:06:35,039 --> 00:06:37,440
another core mechanic of github actions

161
00:06:37,440 --> 00:06:38,800
is secrets

162
00:06:38,800 --> 00:06:40,880
using secrets is an integral part of

163
00:06:40,880 --> 00:06:42,800
creating meaningful github actions

164
00:06:42,800 --> 00:06:44,080
workflows

165
00:06:44,080 --> 00:06:46,080
when you store secrets in github they

166
00:06:46,080 --> 00:06:48,479
are well encrypted and whenever an

167
00:06:48,479 --> 00:06:50,960
action is requesting one of the secrets

168
00:06:50,960 --> 00:06:53,199
it is decrypted and sent as part of the

169
00:06:53,199 --> 00:06:54,960
running command

170
00:06:54,960 --> 00:06:57,360
examples of such secrets could be cloud

171
00:06:57,360 --> 00:07:00,960
tokens such as aws gcp azure access

172
00:07:00,960 --> 00:07:03,440
tokens it could be artifact registry

173
00:07:03,440 --> 00:07:06,880
tokens such as docker hub and more

174
00:07:06,880 --> 00:07:09,440
guitar github separate secrets into free

175
00:07:09,440 --> 00:07:11,759
layer of exposure organization

176
00:07:11,759 --> 00:07:15,199
repository and repository environment

177
00:07:15,199 --> 00:07:17,039
the first one is secrets defined in

178
00:07:17,039 --> 00:07:18,960
ongoing organization

179
00:07:18,960 --> 00:07:21,440
these secrets are exposed to all the

180
00:07:21,440 --> 00:07:23,360
repositories to all the workflows in all

181
00:07:23,360 --> 00:07:26,479
the repositories in that organization

182
00:07:26,479 --> 00:07:28,479
in addition you could also define for

183
00:07:28,479 --> 00:07:30,479
each secret

184
00:07:30,479 --> 00:07:32,479
it could be limited to specific

185
00:07:32,479 --> 00:07:34,720
repositories

186
00:07:34,720 --> 00:07:36,560
the second exposure level is in the

187
00:07:36,560 --> 00:07:39,120
repository level this means that it will

188
00:07:39,120 --> 00:07:41,120
be exposed to all the

189
00:07:41,120 --> 00:07:43,840
actions in that

190
00:07:43,840 --> 00:07:46,560
and the third one is secretly defined in

191
00:07:46,560 --> 00:07:48,639
repository environment which we'll talk

192
00:07:48,639 --> 00:07:52,240
later in the mitigation part

193
00:07:52,960 --> 00:07:54,720
now that we learned about gita actions

194
00:07:54,720 --> 00:07:57,520
and why is it a powerful ci cd system

195
00:07:57,520 --> 00:08:00,639
let's understand what code ejection is

196
00:08:00,639 --> 00:08:03,280
we created a sample workflow that does

197
00:08:03,280 --> 00:08:05,840
the following

198
00:08:05,840 --> 00:08:08,080
this workflow will be triggered whenever

199
00:08:08,080 --> 00:08:09,680
a new issue

200
00:08:09,680 --> 00:08:12,319
is created a new issue on github and it

201
00:08:12,319 --> 00:08:14,319
contains one job that's called issue

202
00:08:14,319 --> 00:08:15,360
check and

203
00:08:15,360 --> 00:08:17,120
single step

204
00:08:17,120 --> 00:08:19,199
and we'll run this batch script

205
00:08:19,199 --> 00:08:21,599
this script checks that

206
00:08:21,599 --> 00:08:23,840
if that issue title

207
00:08:23,840 --> 00:08:27,199
contains the word bug in the issue

208
00:08:27,199 --> 00:08:30,720
it will trigger a github api request

209
00:08:30,720 --> 00:08:35,440
and update that issue with the label bug

210
00:08:35,440 --> 00:08:37,760
this workflow could be used to

211
00:08:37,760 --> 00:08:40,399
for example to triage issues

212
00:08:40,399 --> 00:08:42,559
easily

213
00:08:42,559 --> 00:08:43,599
so it's

214
00:08:43,599 --> 00:08:45,920
in this workflow we can see this curly

215
00:08:45,920 --> 00:08:47,600
bracket

216
00:08:47,600 --> 00:08:49,600
double curly brackets this is another

217
00:08:49,600 --> 00:08:51,519
mechanism that allows the workflow

218
00:08:51,519 --> 00:08:54,480
developers to use additional information

219
00:08:54,480 --> 00:08:56,399
from the trigger event

220
00:08:56,399 --> 00:08:58,000
in this example we have several such

221
00:08:58,000 --> 00:09:00,800
usages we have the this usage for the

222
00:09:00,800 --> 00:09:02,640
issue title

223
00:09:02,640 --> 00:09:05,360
we have the usage of the secret of

224
00:09:05,360 --> 00:09:07,440
github token we're using the gita token

225
00:09:07,440 --> 00:09:09,680
which we'll describe previously

226
00:09:09,680 --> 00:09:11,839
and we have the issue url which we are

227
00:09:11,839 --> 00:09:16,399
using to invoke the appropriate api call

228
00:09:16,399 --> 00:09:18,640
so at first sight this workflow looks

229
00:09:18,640 --> 00:09:19,839
innocent

230
00:09:19,839 --> 00:09:22,480
but i'm actually a malicious title

231
00:09:22,480 --> 00:09:24,560
could alter this bash script and run a

232
00:09:24,560 --> 00:09:26,000
control code

233
00:09:26,000 --> 00:09:28,320
for example

234
00:09:28,320 --> 00:09:30,240
if we send this

235
00:09:30,240 --> 00:09:34,720
this title for that workflow

236
00:09:34,720 --> 00:09:38,160
this title actually inserts the the

237
00:09:38,160 --> 00:09:39,519
celtic code

238
00:09:39,519 --> 00:09:42,240
to the runner and managed to execute

239
00:09:42,240 --> 00:09:44,399
this code we managed to execute

240
00:09:44,399 --> 00:09:47,040
this figlet which prints this pretty

241
00:09:47,040 --> 00:09:49,279
cycle text

242
00:09:49,279 --> 00:09:52,160
because we we managed to uh

243
00:09:52,160 --> 00:09:54,320
we managed to execute code and on the

244
00:09:54,320 --> 00:09:56,720
runner

245
00:09:58,320 --> 00:10:01,360
so is it a bug or a feature

246
00:10:01,360 --> 00:10:03,279
you may think this is a bug but it is

247
00:10:03,279 --> 00:10:05,360
actually mentioned on github

248
00:10:05,360 --> 00:10:07,120
documentation

249
00:10:07,120 --> 00:10:09,920
it says that when you create workflows

250
00:10:09,920 --> 00:10:11,680
you should always always consider

251
00:10:11,680 --> 00:10:13,760
whether your code might execute

252
00:10:13,760 --> 00:10:16,800
untrusted input from the attacker

253
00:10:16,800 --> 00:10:19,279
well but are all the project owners or

254
00:10:19,279 --> 00:10:21,360
maintainers aware of this

255
00:10:21,360 --> 00:10:24,240
let's check it out

256
00:10:24,320 --> 00:10:25,839
github released

257
00:10:25,839 --> 00:10:28,880
a new web tool called called a github

258
00:10:28,880 --> 00:10:30,160
code search

259
00:10:30,160 --> 00:10:32,000
which is still in its career phase

260
00:10:32,000 --> 00:10:35,360
you're welcome to sign up and try it out

261
00:10:35,360 --> 00:10:38,160
so naturally we run a few queries using

262
00:10:38,160 --> 00:10:40,079
that tool and we were shocked by amount

263
00:10:40,079 --> 00:10:41,760
of results we found

264
00:10:41,760 --> 00:10:43,760
we looked for suspicious patterns such

265
00:10:43,760 --> 00:10:44,959
as the

266
00:10:44,959 --> 00:10:47,760
run command and usage of untrusted input

267
00:10:47,760 --> 00:10:49,839
inside the trunk command

268
00:10:49,839 --> 00:10:52,000
and find many results vulnerable for

269
00:10:52,000 --> 00:10:54,160
these bags

270
00:10:54,160 --> 00:10:56,480
not every vulnerability is exploitable

271
00:10:56,480 --> 00:10:59,200
and we met a similar situation

272
00:10:59,200 --> 00:11:00,399
many repositories

273
00:11:00,399 --> 00:11:01,680
that contained

274
00:11:01,680 --> 00:11:03,680
such injection issues

275
00:11:03,680 --> 00:11:05,519
had conditional statements before the

276
00:11:05,519 --> 00:11:07,360
vulnerable command

277
00:11:07,360 --> 00:11:09,760
which denied the potential attack

278
00:11:09,760 --> 00:11:11,680
while it reduced the attack surface we

279
00:11:11,680 --> 00:11:13,600
still suggest such repositories to

280
00:11:13,600 --> 00:11:15,760
remove the vulnerable command because

281
00:11:15,760 --> 00:11:17,920
these conditional statements

282
00:11:17,920 --> 00:11:20,399
could be removed in the future

283
00:11:20,399 --> 00:11:22,160
so we can say it now that we found an

284
00:11:22,160 --> 00:11:25,519
extremely widespread issue

285
00:11:25,519 --> 00:11:28,160
we identified dozens of repositories

286
00:11:28,160 --> 00:11:29,920
that share these vulnerabilities in

287
00:11:29,920 --> 00:11:31,920
their github action workflow

288
00:11:31,920 --> 00:11:34,079
for each repository we reported it to

289
00:11:34,079 --> 00:11:35,760
the maintainers and they fixed it

290
00:11:35,760 --> 00:11:37,120
immediately

291
00:11:37,120 --> 00:11:39,120
out of these dozens of repositories we

292
00:11:39,120 --> 00:11:41,680
can observe the most popular ones this

293
00:11:41,680 --> 00:11:44,160
list contains the following product

294
00:11:44,160 --> 00:11:46,959
a liquid base which is a popular tool to

295
00:11:46,959 --> 00:11:49,839
deploy database schema changes

296
00:11:49,839 --> 00:11:51,920
a dynamo which is a visual programming

297
00:11:51,920 --> 00:11:54,639
tool that autodesk sponsor

298
00:11:54,639 --> 00:11:57,760
fauna which is a transactional database

299
00:11:57,760 --> 00:11:59,120
wire which is an open source

300
00:11:59,120 --> 00:12:00,959
communication platform

301
00:12:00,959 --> 00:12:03,200
astro is a static site builder and much

302
00:12:03,200 --> 00:12:04,880
much more

303
00:12:04,880 --> 00:12:06,880
liquid based on its own

304
00:12:06,880 --> 00:12:08,320
claims that its product has been

305
00:12:08,320 --> 00:12:11,360
downloaded 75 million times so we can

306
00:12:11,360 --> 00:12:14,160
safely say that when we sum up the users

307
00:12:14,160 --> 00:12:15,519
of all these tools we could reach

308
00:12:15,519 --> 00:12:18,720
millions of users

309
00:12:19,440 --> 00:12:21,360
the consequences of such build

310
00:12:21,360 --> 00:12:24,079
compromise are quite disastrous the

311
00:12:24,079 --> 00:12:27,040
first major impact is exposing secrets

312
00:12:27,040 --> 00:12:28,959
of the vulnerable workflow

313
00:12:28,959 --> 00:12:30,880
such secrets could be cloud tokens and

314
00:12:30,880 --> 00:12:33,440
additional sensitive assets

315
00:12:33,440 --> 00:12:35,760
the second major impact is the ability

316
00:12:35,760 --> 00:12:38,240
of the attacker to commit malicious code

317
00:12:38,240 --> 00:12:40,480
to into the repository

318
00:12:40,480 --> 00:12:42,480
this can cause a critical supply chain

319
00:12:42,480 --> 00:12:44,720
incidents as an attacker can introduce

320
00:12:44,720 --> 00:12:47,279
vectors deployed to end users end users

321
00:12:47,279 --> 00:12:49,600
or organization environments

322
00:12:49,600 --> 00:12:51,200
a much smaller risk would be the

323
00:12:51,200 --> 00:12:53,360
malicious actor ability to run botnet

324
00:12:53,360 --> 00:12:54,959
soccer miners using the runner

325
00:12:54,959 --> 00:12:57,680
infrastructure

326
00:12:58,079 --> 00:12:59,920
so to demonstrate the ability of the

327
00:12:59,920 --> 00:13:02,800
attacker to expose secrets we created an

328
00:13:02,800 --> 00:13:04,720
intentionally vulnerable workflow which

329
00:13:04,720 --> 00:13:07,040
will follow us in the example

330
00:13:07,040 --> 00:13:09,120
this workflow will be triggered whenever

331
00:13:09,120 --> 00:13:11,680
a new issue is created similar as

332
00:13:11,680 --> 00:13:13,200
previously

333
00:13:13,200 --> 00:13:15,760
it will contain a single job i first it

334
00:13:15,760 --> 00:13:18,639
will contain environment variable

335
00:13:18,639 --> 00:13:20,560
github token that will receive the value

336
00:13:20,560 --> 00:13:21,279
of

337
00:13:21,279 --> 00:13:22,959
of the github token

338
00:13:22,959 --> 00:13:25,440
soon we'll see why we defined it

339
00:13:25,440 --> 00:13:27,519
and contains a single job that's called

340
00:13:27,519 --> 00:13:30,160
one job and three steps

341
00:13:30,160 --> 00:13:32,959
the first steps would be a checkout

342
00:13:32,959 --> 00:13:36,240
command which basically does git clone

343
00:13:36,240 --> 00:13:38,399
to the repository to the runner

344
00:13:38,399 --> 00:13:40,959
environment

345
00:13:41,519 --> 00:13:43,839
then it will print the issue title and

346
00:13:43,839 --> 00:13:46,720
the issue description

347
00:13:46,720 --> 00:13:48,639
and finally it will

348
00:13:48,639 --> 00:13:51,680
it will call a github api

349
00:13:51,680 --> 00:13:54,480
and update this issue with a

350
00:13:54,480 --> 00:13:56,639
new label

351
00:13:56,639 --> 00:13:59,120
this will be new issue

352
00:13:59,120 --> 00:14:00,800
in this process it will use another

353
00:14:00,800 --> 00:14:04,560
secret that called the bot token

354
00:14:04,560 --> 00:14:06,880
so as we showed previously

355
00:14:06,880 --> 00:14:08,560
this run step

356
00:14:08,560 --> 00:14:10,560
is vulnerable to code injection we are

357
00:14:10,560 --> 00:14:13,600
not sanitizing the the title

358
00:14:13,600 --> 00:14:17,199
the the issue title and the issue body

359
00:14:17,199 --> 00:14:19,040
this means that an attacker could

360
00:14:19,040 --> 00:14:22,079
compromise the built workflow in this

361
00:14:22,079 --> 00:14:24,240
exact step

362
00:14:24,240 --> 00:14:25,839
what could be the consequences of such

363
00:14:25,839 --> 00:14:26,800
attack

364
00:14:26,800 --> 00:14:28,959
first it could it could get that an

365
00:14:28,959 --> 00:14:31,120
attacker could get the github token and

366
00:14:31,120 --> 00:14:33,199
use it for malicious purposes

367
00:14:33,199 --> 00:14:35,440
and we could get both token

368
00:14:35,440 --> 00:14:38,160
and also use it for malicious purposes

369
00:14:38,160 --> 00:14:40,240
so we try to understand how an attacker

370
00:14:40,240 --> 00:14:42,480
could do that for both past and future

371
00:14:42,480 --> 00:14:47,360
steps that have been used in this action

372
00:14:47,600 --> 00:14:50,480
to achieve that we created a small setup

373
00:14:50,480 --> 00:14:53,279
to test the runner internals

374
00:14:53,279 --> 00:14:55,120
instead of repeating the process of

375
00:14:55,120 --> 00:14:57,040
tweaking the injection and inspecting

376
00:14:57,040 --> 00:14:59,360
the results we wanted to create a

377
00:14:59,360 --> 00:15:02,399
reversal to ease the exploration

378
00:15:02,399 --> 00:15:05,839
for that we use the popular tool ngrok

379
00:15:05,839 --> 00:15:07,519
if you're not familiar with it it allows

380
00:15:07,519 --> 00:15:09,600
you to turn a traffic whether http or

381
00:15:09,600 --> 00:15:11,839
tcp to a personal computer

382
00:15:11,839 --> 00:15:13,680
even when it's behind the nut or

383
00:15:13,680 --> 00:15:15,760
firewall

384
00:15:15,760 --> 00:15:17,839
so we're on the following steps

385
00:15:17,839 --> 00:15:21,199
first we set up an engroc on

386
00:15:21,199 --> 00:15:24,399
tcp and on mode on the port 10000 which

387
00:15:24,399 --> 00:15:27,600
is our chosen local port

388
00:15:27,600 --> 00:15:29,759
then we received from angular cloud the

389
00:15:29,759 --> 00:15:32,079
endpoint which we'll use later in this

390
00:15:32,079 --> 00:15:34,959
in the remote script

391
00:15:35,040 --> 00:15:37,920
we run netcat on port 1000 to listen for

392
00:15:37,920 --> 00:15:39,680
the reverse shell

393
00:15:39,680 --> 00:15:42,560
and finally we could send the malicious

394
00:15:42,560 --> 00:15:46,479
script to finalize the reversion

395
00:15:46,959 --> 00:15:50,399
so when we send this specific

396
00:15:50,399 --> 00:15:52,720
issue title

397
00:15:52,720 --> 00:15:54,880
for this specific endpoint we received

398
00:15:54,880 --> 00:15:57,519
from the end rock

399
00:15:57,519 --> 00:15:59,199
we will get our

400
00:15:59,199 --> 00:16:03,120
reversal almost immed immediately

401
00:16:03,120 --> 00:16:04,959
after we got this we started scanning

402
00:16:04,959 --> 00:16:07,360
the machine and do some reconnaissance

403
00:16:07,360 --> 00:16:11,120
there we won't overly overload you with

404
00:16:11,120 --> 00:16:12,880
with all the details you're welcome to

405
00:16:12,880 --> 00:16:15,600
check the full technical block for that

406
00:16:15,600 --> 00:16:17,839
but we show some of their main findings

407
00:16:17,839 --> 00:16:21,040
in the next part

408
00:16:21,360 --> 00:16:23,120
so let's go back to the to our previous

409
00:16:23,120 --> 00:16:24,880
example

410
00:16:24,880 --> 00:16:26,639
the first method would be

411
00:16:26,639 --> 00:16:28,079
getting secrets for environment

412
00:16:28,079 --> 00:16:29,440
variables

413
00:16:29,440 --> 00:16:31,360
because we defined the github token free

414
00:16:31,360 --> 00:16:33,680
environment variable an attacker could

415
00:16:33,680 --> 00:16:35,680
simply enumerate all the variables and

416
00:16:35,680 --> 00:16:37,440
receive that easily

417
00:16:37,440 --> 00:16:39,040
you can observe the code that could

418
00:16:39,040 --> 00:16:41,279
execute to fetch the token

419
00:16:41,279 --> 00:16:44,160
this is pretty simple

420
00:16:44,160 --> 00:16:46,320
the second method attacker could apply

421
00:16:46,320 --> 00:16:48,880
for stealing the token is through the

422
00:16:48,880 --> 00:16:51,839
checkout step

423
00:16:51,839 --> 00:16:53,199
we explain the checkout command is

424
00:16:53,199 --> 00:16:55,360
basically a git clone to the repository

425
00:16:55,360 --> 00:16:57,040
and creates a local instance of your

426
00:16:57,040 --> 00:16:58,000
code

427
00:16:58,000 --> 00:17:00,000
behind the scenes it sends the github

428
00:17:00,000 --> 00:17:02,839
token as a default parameter to external

429
00:17:02,839 --> 00:17:04,400
action

430
00:17:04,400 --> 00:17:05,760
in addition whenever we clone a

431
00:17:05,760 --> 00:17:07,119
repository

432
00:17:07,119 --> 00:17:09,599
using credentials the git utility

433
00:17:09,599 --> 00:17:15,520
creates a that git slash a config file

434
00:17:15,520 --> 00:17:17,839
containing the credential used to clone

435
00:17:17,839 --> 00:17:19,520
that repository

436
00:17:19,520 --> 00:17:22,079
so if that check of depth was used as an

437
00:17:22,079 --> 00:17:24,720
attacker we can fetch that git git that

438
00:17:24,720 --> 00:17:27,119
bit config file to get authorization and

439
00:17:27,119 --> 00:17:29,360
type it through basic before decoding

440
00:17:29,360 --> 00:17:33,840
and we get our github token again

441
00:17:34,960 --> 00:17:37,520
the third method is a bit more complex

442
00:17:37,520 --> 00:17:39,840
during our reconnaissance we understood

443
00:17:39,840 --> 00:17:41,600
that each

444
00:17:41,600 --> 00:17:44,160
each run command we have two this run

445
00:17:44,160 --> 00:17:45,679
command each run comment before it's

446
00:17:45,679 --> 00:17:48,559
been executed it's also saved as a shell

447
00:17:48,559 --> 00:17:51,200
file in the runner environment

448
00:17:51,200 --> 00:17:54,160
so because our attacker is execute has

449
00:17:54,160 --> 00:17:56,320
got code execution at this point

450
00:17:56,320 --> 00:17:59,120
it is not seeing the second run command

451
00:17:59,120 --> 00:18:01,919
here so it sees only this one

452
00:18:01,919 --> 00:18:03,280
so when we

453
00:18:03,280 --> 00:18:05,280
going into round temp director which

454
00:18:05,280 --> 00:18:07,760
contains this shell file we have a

455
00:18:07,760 --> 00:18:09,200
single

456
00:18:09,200 --> 00:18:11,360
single shell file that contains the same

457
00:18:11,360 --> 00:18:14,559
script script as we see in the cml file

458
00:18:14,559 --> 00:18:17,120
but instead of these placeholders we

459
00:18:17,120 --> 00:18:19,360
have the real values that github action

460
00:18:19,360 --> 00:18:21,600
service inserted

461
00:18:21,600 --> 00:18:25,280
so potentially if we'll manage to get

462
00:18:25,280 --> 00:18:26,960
if we if

463
00:18:26,960 --> 00:18:27,760
this

464
00:18:27,760 --> 00:18:31,840
shell file contains secrets in

465
00:18:31,840 --> 00:18:34,160
in it so we as an attacker will manage

466
00:18:34,160 --> 00:18:36,320
to get this if we manage to get the

467
00:18:36,320 --> 00:18:38,080
script

468
00:18:38,080 --> 00:18:40,640
the only issue that we don't have the

469
00:18:40,640 --> 00:18:43,200
second script yet because we managed to

470
00:18:43,200 --> 00:18:45,679
execute only on the first one

471
00:18:45,679 --> 00:18:48,080
the possible solution simple solution

472
00:18:48,080 --> 00:18:50,480
will be to put some persistent script on

473
00:18:50,480 --> 00:18:52,720
the runner and wait

474
00:18:52,720 --> 00:18:54,960
when the second script will be written

475
00:18:54,960 --> 00:18:57,360
to the to the disk to that folder and

476
00:18:57,360 --> 00:18:59,360
when it happens we can fetch it

477
00:18:59,360 --> 00:19:01,600
immediately

478
00:19:01,600 --> 00:19:03,200
so our uh

479
00:19:03,200 --> 00:19:05,360
our steps would be creating some server

480
00:19:05,360 --> 00:19:08,400
that records all post requests creating

481
00:19:08,400 --> 00:19:10,640
some scripts that are called modified

482
00:19:10,640 --> 00:19:12,799
shell scripts in that directory

483
00:19:12,799 --> 00:19:15,280
and said send them to some designated

484
00:19:15,280 --> 00:19:17,440
server we pack that script in some

485
00:19:17,440 --> 00:19:19,520
docker containers to use the deployment

486
00:19:19,520 --> 00:19:22,480
and run it in this attachment

487
00:19:22,480 --> 00:19:24,400
this could this will be the running

488
00:19:24,400 --> 00:19:25,360
command

489
00:19:25,360 --> 00:19:29,120
we soon see how it works in a demo

490
00:19:29,120 --> 00:19:30,799
these were the simple methods attacker

491
00:19:30,799 --> 00:19:32,799
could apply sophisticated attackers

492
00:19:32,799 --> 00:19:34,880
could apply a more advanced method for

493
00:19:34,880 --> 00:19:37,840
example inspecting the memory of the of

494
00:19:37,840 --> 00:19:39,760
the runner worker process or trying to

495
00:19:39,760 --> 00:19:42,960
extract some secrets from them could be

496
00:19:42,960 --> 00:19:44,240
monitoring the

497
00:19:44,240 --> 00:19:45,919
created processes or monitoring the

498
00:19:45,919 --> 00:19:47,679
network traffic and

499
00:19:47,679 --> 00:19:50,320
etc

500
00:19:50,640 --> 00:19:52,400
so let's start with the demos

501
00:19:52,400 --> 00:19:54,320
for the first demo we'll show how we

502
00:19:54,320 --> 00:19:56,559
manage to exfiltrate

503
00:19:56,559 --> 00:19:58,720
the secrets in two steps in the first

504
00:19:58,720 --> 00:20:00,400
step we'll

505
00:20:00,400 --> 00:20:02,559
exit the github token which is quite

506
00:20:02,559 --> 00:20:04,000
simple and the second step will

507
00:20:04,000 --> 00:20:07,360
extracted the bot token which comes as

508
00:20:07,360 --> 00:20:10,880
after we put the persistent script

509
00:20:10,880 --> 00:20:13,520
so let's see the demo

510
00:20:13,520 --> 00:20:16,799
first we set up the server

511
00:20:16,799 --> 00:20:19,200
then this is our demo repository we're

512
00:20:19,200 --> 00:20:21,440
sending the malicious

513
00:20:21,440 --> 00:20:23,440
the malicious issue title

514
00:20:23,440 --> 00:20:25,440
this data contains several commands as

515
00:20:25,440 --> 00:20:27,600
explained it will exfiltrate it in in

516
00:20:27,600 --> 00:20:29,120
two steps

517
00:20:29,120 --> 00:20:31,120
the first one will be sending the github

518
00:20:31,120 --> 00:20:34,400
token to our server as we can see now

519
00:20:34,400 --> 00:20:36,000
and the second step

520
00:20:36,000 --> 00:20:38,320
we put some docker a container that will

521
00:20:38,320 --> 00:20:39,360
monitor

522
00:20:39,360 --> 00:20:41,600
that whenever a the new

523
00:20:41,600 --> 00:20:44,240
file will be written it will be sent

524
00:20:44,240 --> 00:20:46,559
you could see that on the second step we

525
00:20:46,559 --> 00:20:48,880
receive the entire

526
00:20:48,880 --> 00:20:51,200
script as we've seen in the example

527
00:20:51,200 --> 00:20:54,320
together with the secrets we wanted to

528
00:20:54,320 --> 00:20:56,240
fetch

529
00:20:56,240 --> 00:20:58,240
so for the second demo

530
00:20:58,240 --> 00:20:59,679
um

531
00:20:59,679 --> 00:21:02,080
we will commit code to the repository

532
00:21:02,080 --> 00:21:03,919
for that we created some

533
00:21:03,919 --> 00:21:06,080
simple another bash script

534
00:21:06,080 --> 00:21:09,520
that receives the file that once we want

535
00:21:09,520 --> 00:21:11,600
to commit and the path

536
00:21:11,600 --> 00:21:14,080
and it does some git configurations very

537
00:21:14,080 --> 00:21:17,120
simple it fetches the file and just

538
00:21:17,120 --> 00:21:19,280
git commit and get push it it's quite

539
00:21:19,280 --> 00:21:22,400
simple nothing nothing fancy here

540
00:21:22,400 --> 00:21:24,080
on the runner part

541
00:21:24,080 --> 00:21:25,919
we're going to

542
00:21:25,919 --> 00:21:28,880
fetch this script which on the left side

543
00:21:28,880 --> 00:21:30,720
give it the right permissions and then

544
00:21:30,720 --> 00:21:32,640
just run it

545
00:21:32,640 --> 00:21:35,360
so let's see that in demo

546
00:21:35,360 --> 00:21:37,280
you can see our repository contains one

547
00:21:37,280 --> 00:21:40,240
folder and a file

548
00:21:41,520 --> 00:21:45,639
we're creating a new issue

549
00:21:49,520 --> 00:21:52,080
this issue has some several steps as we

550
00:21:52,080 --> 00:21:53,919
previously showed first is fetching the

551
00:21:53,919 --> 00:21:55,440
script

552
00:21:55,440 --> 00:21:58,320
and then it gives the right permissions

553
00:21:58,320 --> 00:22:00,880
and then it runs the the script together

554
00:22:00,880 --> 00:22:02,880
with its input the first one will be the

555
00:22:02,880 --> 00:22:04,880
file that we want could commit

556
00:22:04,880 --> 00:22:06,880
and second will be the the path of that

557
00:22:06,880 --> 00:22:08,720
file

558
00:22:08,720 --> 00:22:11,200
so now that we check the repository

559
00:22:11,200 --> 00:22:13,919
we can see that has an additional file

560
00:22:13,919 --> 00:22:15,039
that we

561
00:22:15,039 --> 00:22:17,600
committed

562
00:22:17,679 --> 00:22:19,520
okay

563
00:22:19,520 --> 00:22:21,840
it has an additional file

564
00:22:21,840 --> 00:22:24,080
that we just managed to commit

565
00:22:24,080 --> 00:22:25,679
in addition you could see

566
00:22:25,679 --> 00:22:26,480
the

567
00:22:26,480 --> 00:22:28,320
commit message

568
00:22:28,320 --> 00:22:29,840
this is the innocent commit message

569
00:22:29,840 --> 00:22:31,679
which we created

570
00:22:31,679 --> 00:22:33,200
and we maintained our name which we

571
00:22:33,200 --> 00:22:35,200
managed to forge

572
00:22:35,200 --> 00:22:38,080
pretty cool right

573
00:22:38,960 --> 00:22:39,760
so

574
00:22:39,760 --> 00:22:41,600
after we show the possible consequences

575
00:22:41,600 --> 00:22:42,480
of build

576
00:22:42,480 --> 00:22:44,559
pipeline compromise let's see how can we

577
00:22:44,559 --> 00:22:46,960
mitigate it

578
00:22:46,960 --> 00:22:49,840
the first one will be to avoid run steps

579
00:22:49,840 --> 00:22:53,520
for example instead of issuing a call

580
00:22:53,520 --> 00:22:54,400
request

581
00:22:54,400 --> 00:22:57,120
to github api to update

582
00:22:57,120 --> 00:22:58,880
the

583
00:22:58,880 --> 00:23:01,679
tablet the issue with specific label

584
00:23:01,679 --> 00:23:03,760
we can use an external action record

585
00:23:03,760 --> 00:23:06,159
labeler for in this example

586
00:23:06,159 --> 00:23:08,320
that does exactly the same it contains

587
00:23:08,320 --> 00:23:09,520
the parameter

588
00:23:09,520 --> 00:23:12,000
for the label you want to update even if

589
00:23:12,000 --> 00:23:15,120
this issue title contains some code it

590
00:23:15,120 --> 00:23:17,520
won't be executed because it sanitized

591
00:23:17,520 --> 00:23:20,879
it as a input parameter

592
00:23:21,679 --> 00:23:23,679
the second mitigation which is the most

593
00:23:23,679 --> 00:23:25,520
effective in this method will be to

594
00:23:25,520 --> 00:23:27,840
sanitizing the input

595
00:23:27,840 --> 00:23:30,640
for example instead of using the issue

596
00:23:30,640 --> 00:23:33,039
title and the body

597
00:23:33,039 --> 00:23:36,159
inside the run inside the run script we

598
00:23:36,159 --> 00:23:38,640
could extract it and define it as an

599
00:23:38,640 --> 00:23:41,120
intermediate environment variable in

600
00:23:41,120 --> 00:23:43,919
like in this example and use that

601
00:23:43,919 --> 00:23:45,440
variable

602
00:23:45,440 --> 00:23:48,000
inside the run script

603
00:23:48,000 --> 00:23:50,240
so same way the summaries previously

604
00:23:50,240 --> 00:23:52,080
even if this title description will

605
00:23:52,080 --> 00:23:53,679
contain a

606
00:23:53,679 --> 00:23:56,240
code it won't be executed because it's

607
00:23:56,240 --> 00:23:59,200
treated as a text

608
00:24:00,480 --> 00:24:02,159
another effective method for post

609
00:24:02,159 --> 00:24:04,080
exploitation would be to limit talk

610
00:24:04,080 --> 00:24:06,240
information

611
00:24:06,240 --> 00:24:08,640
inside our yaml file inside the workflow

612
00:24:08,640 --> 00:24:11,679
file we could add a permission tag

613
00:24:11,679 --> 00:24:13,279
which will indicate the permissions that

614
00:24:13,279 --> 00:24:15,760
the github token will receive

615
00:24:15,760 --> 00:24:17,840
because in our example we use the github

616
00:24:17,840 --> 00:24:20,960
token only to to clone the code and to

617
00:24:20,960 --> 00:24:23,360
update the issue with no no we don't

618
00:24:23,360 --> 00:24:25,440
need more than this permissions for the

619
00:24:25,440 --> 00:24:26,960
github token

620
00:24:26,960 --> 00:24:28,960
this is an effective method for any kind

621
00:24:28,960 --> 00:24:32,880
of exploitation not only this this one

622
00:24:32,880 --> 00:24:35,039
so even if the attacker has managed to

623
00:24:35,039 --> 00:24:36,880
exploit a and

624
00:24:36,880 --> 00:24:38,880
your vulnerable workflow and execute

625
00:24:38,880 --> 00:24:41,039
code you won't be able to do much with

626
00:24:41,039 --> 00:24:41,760
the

627
00:24:41,760 --> 00:24:44,879
with a lower permission

628
00:24:45,279 --> 00:24:47,200
another method will be which require

629
00:24:47,200 --> 00:24:49,120
approval for outside collaborators which

630
00:24:49,120 --> 00:24:50,480
is mainly applied for public

631
00:24:50,480 --> 00:24:51,840
repositories

632
00:24:51,840 --> 00:24:54,000
github has introduced some mitigations

633
00:24:54,000 --> 00:24:56,559
that new collaborators

634
00:24:56,559 --> 00:24:59,360
for a repositories won't be able to run

635
00:24:59,360 --> 00:25:01,840
workflows unless some maintainer will

636
00:25:01,840 --> 00:25:04,320
approve them manually which is this

637
00:25:04,320 --> 00:25:05,200
option

638
00:25:05,200 --> 00:25:07,679
this is a quite good mitigation but it's

639
00:25:07,679 --> 00:25:09,520
a more robust one

640
00:25:09,520 --> 00:25:11,760
with required approval for all

641
00:25:11,760 --> 00:25:13,120
for every committed outside

642
00:25:13,120 --> 00:25:15,120
collaborators make because they could

643
00:25:15,120 --> 00:25:18,640
this could be bypassed quite easily

644
00:25:18,640 --> 00:25:20,559
and the last mitigation would be to use

645
00:25:20,559 --> 00:25:22,720
environments and branch protections this

646
00:25:22,720 --> 00:25:25,200
is quite a new mitigation

647
00:25:25,200 --> 00:25:28,480
that happens in a github enterprise it

648
00:25:28,480 --> 00:25:30,240
allows you to define define several

649
00:25:30,240 --> 00:25:31,679
environments

650
00:25:31,679 --> 00:25:33,440
for your workflows for example

651
00:25:33,440 --> 00:25:36,320
production staging testing each such

652
00:25:36,320 --> 00:25:38,400
environment contains its specific

653
00:25:38,400 --> 00:25:41,039
secrets and these environments could be

654
00:25:41,039 --> 00:25:44,320
protected for like a branch protection

655
00:25:44,320 --> 00:25:45,200
rule

656
00:25:45,200 --> 00:25:47,120
so this is quite effective methods to

657
00:25:47,120 --> 00:25:50,239
protect your secrets

658
00:25:50,960 --> 00:25:53,039
so what will be the takeaways from this

659
00:25:53,039 --> 00:25:55,279
code from this doctor

660
00:25:55,279 --> 00:25:57,120
first of all

661
00:25:57,120 --> 00:25:58,880
even when github does most of the work

662
00:25:58,880 --> 00:26:01,039
from handling the build pipeline for you

663
00:26:01,039 --> 00:26:03,440
and for the security including ephemeral

664
00:26:03,440 --> 00:26:06,320
environments and vm-based isolation we

665
00:26:06,320 --> 00:26:07,919
are showing that it still can be

666
00:26:07,919 --> 00:26:09,919
compromised this is the most important

667
00:26:09,919 --> 00:26:12,320
takeaway from this talk

668
00:26:12,320 --> 00:26:14,720
as we saw in github

669
00:26:14,720 --> 00:26:17,679
best practices paper it delegates some

670
00:26:17,679 --> 00:26:19,760
of the responsibilities for securing the

671
00:26:19,760 --> 00:26:22,080
workflows to the developers

672
00:26:22,080 --> 00:26:24,159
the issue i'm developing myself i know

673
00:26:24,159 --> 00:26:26,880
that developers make mistakes so this

674
00:26:26,880 --> 00:26:29,919
should be handled carefully

675
00:26:29,919 --> 00:26:31,919
the consequences of build pipeline

676
00:26:31,919 --> 00:26:34,080
compromise can be quite disastrous and

677
00:26:34,080 --> 00:26:36,559
could expose sensitive secrets and cause

678
00:26:36,559 --> 00:26:39,360
potential supply chain attacks

679
00:26:39,360 --> 00:26:40,960
and last one

680
00:26:40,960 --> 00:26:42,960
gita gives you the tools for securing

681
00:26:42,960 --> 00:26:45,039
the build such as limiting permissions

682
00:26:45,039 --> 00:26:47,440
and secrets sanitizing input variables

683
00:26:47,440 --> 00:26:48,559
and more

684
00:26:48,559 --> 00:26:52,960
we highly advise you to use them

685
00:26:52,960 --> 00:26:54,880
so that's it uh

686
00:26:54,880 --> 00:26:56,559
thank you very much for listening thank

687
00:26:56,559 --> 00:26:59,360
you for just account for hosting me here

688
00:26:59,360 --> 00:27:02,080
you're welcome to check the full

689
00:27:02,080 --> 00:27:04,159
text technical details in our blog in

690
00:27:04,159 --> 00:27:05,600
cycle blog

691
00:27:05,600 --> 00:27:07,120
and if you have any questions i'm

692
00:27:07,120 --> 00:27:09,840
welcome to answer it

693
00:27:09,840 --> 00:27:11,200
thank you alex that was super

694
00:27:11,200 --> 00:27:12,240
interesting

695
00:27:12,240 --> 00:27:15,360
um i i've got a question i mean

696
00:27:15,360 --> 00:27:16,240
have

697
00:27:16,240 --> 00:27:19,440
have you seen any or heard of any

698
00:27:19,440 --> 00:27:21,200
examples of these kind of attacks

699
00:27:21,200 --> 00:27:24,320
happening in the wild

700
00:27:24,559 --> 00:27:27,279
and personally i haven't

701
00:27:27,279 --> 00:27:28,640
but the

702
00:27:28,640 --> 00:27:31,200
supply chain attacks happens in the wild

703
00:27:31,200 --> 00:27:33,360
all the time this is just some specific

704
00:27:33,360 --> 00:27:35,200
potential supply chain attachment and we

705
00:27:35,200 --> 00:27:36,720
didn't heard it but it doesn't matter

706
00:27:36,720 --> 00:27:39,360
that didn't happen

707
00:27:39,360 --> 00:27:40,480
we just

708
00:27:40,480 --> 00:27:43,520
want to to prevent it from happening

709
00:27:43,520 --> 00:27:47,279
yeah i mean i suppose it's you know

710
00:27:47,279 --> 00:27:50,000
obviously having access to to to tools

711
00:27:50,000 --> 00:27:52,640
like github has been fantastically

712
00:27:52,640 --> 00:27:55,120
productive in lots of ways hasn't it you

713
00:27:55,120 --> 00:27:58,159
know that people no longer have to kind

714
00:27:58,159 --> 00:27:59,679
of run all this infrastructure

715
00:27:59,679 --> 00:28:01,440
themselves but you know it definitely

716
00:28:01,440 --> 00:28:02,559
does

717
00:28:02,559 --> 00:28:06,559
open up the the possibilities for uh for

718
00:28:06,559 --> 00:28:08,480
for attacks and i think

719
00:28:08,480 --> 00:28:10,320
you know i mean

720
00:28:10,320 --> 00:28:13,440
as more and more tools uh start to

721
00:28:13,440 --> 00:28:15,520
become parts of these these sort of

722
00:28:15,520 --> 00:28:17,520
things it is developed very quickly i

723
00:28:17,520 --> 00:28:19,440
mean this attack

724
00:28:19,440 --> 00:28:22,240
landscape will will increase

725
00:28:22,240 --> 00:28:24,880
over the years i can ensure that

726
00:28:24,880 --> 00:28:26,399
yeah i mean you can see there's already

727
00:28:26,399 --> 00:28:29,039
a move to to push editors into

728
00:28:29,039 --> 00:28:31,039
cloud-based platforms isn't there as you

729
00:28:31,039 --> 00:28:32,320
know so

730
00:28:32,320 --> 00:28:34,240
you start to think about

731
00:28:34,240 --> 00:28:36,240
what what the what the possibilities are

732
00:28:36,240 --> 00:28:38,240
for being able to attack

733
00:28:38,240 --> 00:28:41,360
attack your code right in the editor is

734
00:28:41,360 --> 00:28:43,600
also worrying

735
00:28:43,600 --> 00:28:46,159
right well i think that's that's uh all

736
00:28:46,159 --> 00:28:48,799
the questions we had time for so thank

737
00:28:48,799 --> 00:28:50,640
you alex hopefully you'll stick around

738
00:28:50,640 --> 00:28:52,480
for the rest of the conference

739
00:28:52,480 --> 00:28:53,520
thank you very much thank you for

740
00:28:53,520 --> 00:28:54,720
helping

741
00:28:54,720 --> 00:28:56,640
absolute pleasure thank you for for

742
00:28:56,640 --> 00:28:59,190
contributing

743
00:28:59,190 --> 00:29:02,660
[Music]

