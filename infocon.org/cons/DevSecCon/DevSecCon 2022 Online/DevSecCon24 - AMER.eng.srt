1
00:11:05,040 --> 00:11:07,200
[Music]

2
00:11:07,200 --> 00:11:08,770
so

3
00:11:08,770 --> 00:11:32,240
[Music]

4
00:11:32,240 --> 00:11:35,240
so

5
00:11:36,170 --> 00:11:55,149
[Music]

6
00:12:13,839 --> 00:12:16,839
so

7
00:12:19,880 --> 00:12:57,360
[Music]

8
00:12:57,360 --> 00:12:58,860
so

9
00:12:58,860 --> 00:13:07,370
[Music]

10
00:13:14,959 --> 00:13:18,800
hello and welcome to devsecond24

11
00:13:18,800 --> 00:13:20,399
i'm brian clark

12
00:13:20,399 --> 00:13:23,120
and i'm eric smalling and we're your

13
00:13:23,120 --> 00:13:25,279
hosts for the americas region of the

14
00:13:25,279 --> 00:13:26,720
conference

15
00:13:26,720 --> 00:13:29,120
how you doing today eric i am doing

16
00:13:29,120 --> 00:13:30,959
wonderful how are you sir i'm doing

17
00:13:30,959 --> 00:13:32,720
wonderful as well even better now after

18
00:13:32,720 --> 00:13:34,800
listening to that little tune i know i

19
00:13:34,800 --> 00:13:36,000
heard you played a lot of the

20
00:13:36,000 --> 00:13:37,440
instruments in that

21
00:13:37,440 --> 00:13:40,240
yes yes in another life another timeline

22
00:13:40,240 --> 00:13:42,639
um you're you're so talented man

23
00:13:42,639 --> 00:13:45,199
i'm impressed i really like the horns

24
00:13:45,199 --> 00:13:46,800
i'm a big fan of saxophone and hearing

25
00:13:46,800 --> 00:13:48,560
that little going off in there loving it

26
00:13:48,560 --> 00:13:51,440
anyway so how should we uh get everybody

27
00:13:51,440 --> 00:13:52,959
acquainted with the americas region eric

28
00:13:52,959 --> 00:13:55,760
what do we got in store for today

29
00:13:55,760 --> 00:13:58,959
wow what don't we have in store

30
00:13:58,959 --> 00:14:00,399
um we've got all sorts of good stuff

31
00:14:00,399 --> 00:14:03,360
today we've got um well i mean if you're

32
00:14:03,360 --> 00:14:06,079
new to the platform welcome and know

33
00:14:06,079 --> 00:14:07,519
that you know we have a chat right next

34
00:14:07,519 --> 00:14:08,880
to us if you've got any comments you

35
00:14:08,880 --> 00:14:10,880
want to make you can comment right in

36
00:14:10,880 --> 00:14:13,199
the stage or event we'll be trying to

37
00:14:13,199 --> 00:14:14,959
watch both of those

38
00:14:14,959 --> 00:14:17,519
um and uh

39
00:14:17,519 --> 00:14:18,720
if you

40
00:14:18,720 --> 00:14:20,720
look for the sessions in the uh what i'm

41
00:14:20,720 --> 00:14:22,000
looking at the screen over on the side

42
00:14:22,000 --> 00:14:24,079
here um

43
00:14:24,079 --> 00:14:26,079
go go set up your your agenda and your

44
00:14:26,079 --> 00:14:27,360
sessions go make sure you're getting

45
00:14:27,360 --> 00:14:29,360
into all the right talks

46
00:14:29,360 --> 00:14:31,839
um

47
00:14:32,320 --> 00:14:34,079
yeah and that's all over on the hop-in

48
00:14:34,079 --> 00:14:35,600
platform so if you're watching over on

49
00:14:35,600 --> 00:14:37,839
youtube that's fine um and that's good

50
00:14:37,839 --> 00:14:39,680
and all but if you'd like to you head on

51
00:14:39,680 --> 00:14:40,959
over to the hop and platform where you

52
00:14:40,959 --> 00:14:43,120
have a little bit more access to things

53
00:14:43,120 --> 00:14:45,279
like the sponsor booths and

54
00:14:45,279 --> 00:14:47,040
uh some of the more navigation

55
00:14:47,040 --> 00:14:48,959
capabilities that eric was just talking

56
00:14:48,959 --> 00:14:50,639
about where you can set up an agenda see

57
00:14:50,639 --> 00:14:52,560
the schedule a bit more detail and add

58
00:14:52,560 --> 00:14:54,399
it to your your calendar so that you can

59
00:14:54,399 --> 00:14:56,320
see what's going on get reminders for

60
00:14:56,320 --> 00:14:58,160
those sessions that you really want to

61
00:14:58,160 --> 00:15:00,720
tune into but i assure you you're going

62
00:15:00,720 --> 00:15:01,680
to want to tune in to all of them

63
00:15:01,680 --> 00:15:03,199
because we have a lot of great sessions

64
00:15:03,199 --> 00:15:05,839
in store for the americas regions but

65
00:15:05,839 --> 00:15:07,920
i don't want to say or create any

66
00:15:07,920 --> 00:15:10,079
competition or anything like that but

67
00:15:10,079 --> 00:15:11,199
the past

68
00:15:11,199 --> 00:15:13,040
regions were fantastic and i think we

69
00:15:13,040 --> 00:15:14,399
have a hard

70
00:15:14,399 --> 00:15:16,880
a hard set to compete with what what

71
00:15:16,880 --> 00:15:18,079
happened there were there any that stood

72
00:15:18,079 --> 00:15:20,079
out to you at all eric by chance well

73
00:15:20,079 --> 00:15:21,600
you know they say that they say you

74
00:15:21,600 --> 00:15:23,040
saved the best for last and that would

75
00:15:23,040 --> 00:15:24,839
be us

76
00:15:24,839 --> 00:15:28,000
right uh i

77
00:15:28,000 --> 00:15:30,160
i honestly uh don't have one that i can

78
00:15:30,160 --> 00:15:31,680
pick on top of the other ones what about

79
00:15:31,680 --> 00:15:32,720
you did you have one that you liked the

80
00:15:32,720 --> 00:15:34,480
best no i didn't i'm not going to put

81
00:15:34,480 --> 00:15:36,079
myself in that position i was more so

82
00:15:36,079 --> 00:15:37,839
putting you in that position

83
00:15:37,839 --> 00:15:39,920
i know i say that i see that this is

84
00:15:39,920 --> 00:15:43,360
what you get for hosting with me buddy

85
00:15:43,360 --> 00:15:45,440
but yeah no lots of excellent uh

86
00:15:45,440 --> 00:15:47,600
sessions that happened in the apj region

87
00:15:47,600 --> 00:15:50,320
and the mia regions and wonderful hosts

88
00:15:50,320 --> 00:15:51,680
that were

89
00:15:51,680 --> 00:15:53,680
hosting things throughout those as well

90
00:15:53,680 --> 00:15:55,040
so shout out to all of them and shout

91
00:15:55,040 --> 00:15:56,399
out to the team behind the scenes that

92
00:15:56,399 --> 00:15:58,880
have been putting on the conference thus

93
00:15:58,880 --> 00:15:59,839
far

94
00:15:59,839 --> 00:16:01,680
very sleek deprived i'm sure but they

95
00:16:01,680 --> 00:16:03,839
have put on a great conference so far

96
00:16:03,839 --> 00:16:04,880
we're going to keep that going in the

97
00:16:04,880 --> 00:16:06,720
americas region

98
00:16:06,720 --> 00:16:08,000
i'm really looking forward to the first

99
00:16:08,000 --> 00:16:09,440
to the keynote that nilu is going to be

100
00:16:09,440 --> 00:16:11,120
doing with us um

101
00:16:11,120 --> 00:16:13,279
so uh she works at thoughtworks and i

102
00:16:13,279 --> 00:16:15,120
actually am an honorary thoughtworks

103
00:16:15,120 --> 00:16:16,720
alumni because i worked with them so

104
00:16:16,720 --> 00:16:19,440
much back in uh and earlier in my career

105
00:16:19,440 --> 00:16:22,079
but i never hired on with them so um i i

106
00:16:22,079 --> 00:16:23,759
always enjoy seeing thought workers come

107
00:16:23,759 --> 00:16:24,720
and talk

108
00:16:24,720 --> 00:16:26,880
and i looked a bit at what she's going

109
00:16:26,880 --> 00:16:27,920
to be talking about i'm going to be

110
00:16:27,920 --> 00:16:30,800
riveted and taking notes i'm sure

111
00:16:30,800 --> 00:16:32,720
um anything else we need to talk about

112
00:16:32,720 --> 00:16:34,560
before we get

113
00:16:34,560 --> 00:16:36,160
i think we can save some of the stuff uh

114
00:16:36,160 --> 00:16:38,160
in between sessions that we go on here

115
00:16:38,160 --> 00:16:40,079
um because we want to stay on track we

116
00:16:40,079 --> 00:16:42,480
don't want to get off time right are you

117
00:16:42,480 --> 00:16:44,160
are you a pretty punctual person because

118
00:16:44,160 --> 00:16:45,360
i'm not

119
00:16:45,360 --> 00:16:47,759
absolutely of course i am okay good good

120
00:16:47,759 --> 00:16:49,600
so you can keep us on track all right so

121
00:16:49,600 --> 00:16:51,360
i think without further ado let's bring

122
00:16:51,360 --> 00:16:55,839
nilu on to start up sessions there

123
00:16:59,759 --> 00:17:01,440
hey hey nilo

124
00:17:01,440 --> 00:17:03,040
let's unmute you

125
00:17:03,040 --> 00:17:06,079
hold on a second there

126
00:17:08,400 --> 00:17:10,799
needle feel free to unmute your mic

127
00:17:10,799 --> 00:17:13,679
uh in there

128
00:17:14,400 --> 00:17:16,720
now can you help me

129
00:17:16,720 --> 00:17:17,599
yes

130
00:17:17,599 --> 00:17:18,799
i'm getting a little bit of feedback i

131
00:17:18,799 --> 00:17:19,760
don't know if that's just on my side

132
00:17:19,760 --> 00:17:21,599
eric do you hear that as well yeah i'm

133
00:17:21,599 --> 00:17:24,160
getting a little feedback

134
00:17:24,160 --> 00:17:25,760
um

135
00:17:25,760 --> 00:17:27,439
can you hear me now

136
00:17:27,439 --> 00:17:28,799
yeah we hear you but it's a little bit

137
00:17:28,799 --> 00:17:31,200
staticky the mic sounds distorted a bit

138
00:17:31,200 --> 00:17:33,039
for some reason okay just give me a

139
00:17:33,039 --> 00:17:34,080
second

140
00:17:34,080 --> 00:17:36,240
sure

141
00:17:36,559 --> 00:17:38,240
all right we'll give nilu a moment to

142
00:17:38,240 --> 00:17:39,919
get that sorted out in the meantime we

143
00:17:39,919 --> 00:17:42,000
can catch up on some of the other uh

144
00:17:42,000 --> 00:17:43,600
housekeeping items that we wanted to

145
00:17:43,600 --> 00:17:44,720
share with you all so we mentioned

146
00:17:44,720 --> 00:17:46,880
navigating through the agenda over on

147
00:17:46,880 --> 00:17:49,039
hoppin the sponsor booths right so all

148
00:17:49,039 --> 00:17:50,960
the sponsors are running live events

149
00:17:50,960 --> 00:17:52,799
throughout the conference today there's

150
00:17:52,799 --> 00:17:54,240
gonna be extra content there some

151
00:17:54,240 --> 00:17:56,160
giveaways at their booths so head on

152
00:17:56,160 --> 00:17:57,840
over to the sponsor section in the hop

153
00:17:57,840 --> 00:18:00,080
in platform so you can find that at the

154
00:18:00,080 --> 00:18:01,760
navigation bar to check them out and say

155
00:18:01,760 --> 00:18:02,480
hi

156
00:18:02,480 --> 00:18:04,320
in addition to that we have a discord

157
00:18:04,320 --> 00:18:06,240
community a devsecton discord if you

158
00:18:06,240 --> 00:18:08,720
want to find out and get connected with

159
00:18:08,720 --> 00:18:10,480
other developers other security

160
00:18:10,480 --> 00:18:13,039
practitioners devops folks

161
00:18:13,039 --> 00:18:15,200
sneak people and everybody in the

162
00:18:15,200 --> 00:18:17,039
community to connect and learn more and

163
00:18:17,039 --> 00:18:19,120
level up your skills in this space the

164
00:18:19,120 --> 00:18:21,200
devsecond discord is a fantastic place

165
00:18:21,200 --> 00:18:23,440
to do that in order to get the invite to

166
00:18:23,440 --> 00:18:25,039
join that you don't have to do anything

167
00:18:25,039 --> 00:18:26,559
special just the link to get there if

168
00:18:26,559 --> 00:18:28,400
you go to devsecond.com

169
00:18:28,400 --> 00:18:31,440
there is a link on there that says join

170
00:18:31,440 --> 00:18:33,520
the community and that will give you the

171
00:18:33,520 --> 00:18:35,280
link to join the discord says find us on

172
00:18:35,280 --> 00:18:37,120
discord so feel free to check that out

173
00:18:37,120 --> 00:18:39,039
when you get a moment

174
00:18:39,039 --> 00:18:41,440
so let's bring nilu back on and see if

175
00:18:41,440 --> 00:18:43,280
we got things sorted out there

176
00:18:43,280 --> 00:18:46,559
hey neelo hi can you hear me now yes

177
00:18:46,559 --> 00:18:50,000
fantastic much better okay great uh so

178
00:18:50,000 --> 00:18:52,640
let me share my screen sure

179
00:18:52,640 --> 00:18:54,799
and i think um what was happening there

180
00:18:54,799 --> 00:18:57,440
is your your microphone you know no pun

181
00:18:57,440 --> 00:18:59,440
intended intentionally right there but

182
00:18:59,440 --> 00:19:01,520
uh it was going full throttle right it

183
00:19:01,520 --> 00:19:02,640
was like

184
00:19:02,640 --> 00:19:05,200
overpowered and ready for your next

185
00:19:05,200 --> 00:19:06,400
session that you're going to be speaking

186
00:19:06,400 --> 00:19:07,840
to us about

187
00:19:07,840 --> 00:19:10,080
yeah i think i had to reset a reset it a

188
00:19:10,080 --> 00:19:11,760
little bit but uh can you see the screen

189
00:19:11,760 --> 00:19:13,280
now

190
00:19:13,280 --> 00:19:16,720
yes we have it we're ready to go and uh

191
00:19:16,720 --> 00:19:18,400
if you want to take it away feel free to

192
00:19:18,400 --> 00:19:20,000
go ahead

193
00:19:20,000 --> 00:19:22,720
thanks thanks eric uh thanks a lot for

194
00:19:22,720 --> 00:19:24,880
having me here at devsecond

195
00:19:24,880 --> 00:19:26,240
so um

196
00:19:26,240 --> 00:19:28,640
it all starts a few years ago actually

197
00:19:28,640 --> 00:19:30,320
and i was just thinking about the the

198
00:19:30,320 --> 00:19:31,919
entire subject that i wanted to talk

199
00:19:31,919 --> 00:19:34,960
about a few years ago when i joined my

200
00:19:34,960 --> 00:19:37,919
current organization um those days where

201
00:19:37,919 --> 00:19:40,320
the pre pandemic days when we used to go

202
00:19:40,320 --> 00:19:42,080
around meeting people

203
00:19:42,080 --> 00:19:44,799
so i was pretty excited i

204
00:19:44,799 --> 00:19:47,120
went around talking to the tech leads

205
00:19:47,120 --> 00:19:48,640
tech architects

206
00:19:48,640 --> 00:19:51,360
i wanted to meet the heads of tech and

207
00:19:51,360 --> 00:19:53,679
security and you know i was trying to

208
00:19:53,679 --> 00:19:56,160
understand at the time what is their

209
00:19:56,160 --> 00:19:58,400
one main problem statement that they

210
00:19:58,400 --> 00:20:01,039
were trying to solve uh and that i could

211
00:20:01,039 --> 00:20:02,320
help with

212
00:20:02,320 --> 00:20:05,039
uh and almost unanimously everybody was

213
00:20:05,039 --> 00:20:07,120
talking about just one thing you know uh

214
00:20:07,120 --> 00:20:09,440
the main ask was to

215
00:20:09,440 --> 00:20:11,520
make security more proactive given that

216
00:20:11,520 --> 00:20:13,840
it was an agile development environment

217
00:20:13,840 --> 00:20:16,559
and they wanted the teams to be enabled

218
00:20:16,559 --> 00:20:18,880
to do security on their own

219
00:20:18,880 --> 00:20:22,400
and interestingly uh having been from uh

220
00:20:22,400 --> 00:20:23,760
you know an offensive security

221
00:20:23,760 --> 00:20:25,679
background and having done security the

222
00:20:25,679 --> 00:20:28,400
typical way for a long time many of us

223
00:20:28,400 --> 00:20:31,440
would uh sort of dread the idea of

224
00:20:31,440 --> 00:20:33,600
letting go you know losing that control

225
00:20:33,600 --> 00:20:36,799
that many of us as security teams have

226
00:20:36,799 --> 00:20:39,360
um and that felt a bit out of place for

227
00:20:39,360 --> 00:20:40,799
me as well

228
00:20:40,799 --> 00:20:42,799
but i kept that in mind i came back and

229
00:20:42,799 --> 00:20:44,320
i was thinking of you know how do we

230
00:20:44,320 --> 00:20:45,679
tackle this

231
00:20:45,679 --> 00:20:47,840
this particular problem statement that

232
00:20:47,840 --> 00:20:49,440
was given

233
00:20:49,440 --> 00:20:51,200
and i kept thinking about it while i was

234
00:20:51,200 --> 00:20:52,640
you know into automation and doing

235
00:20:52,640 --> 00:20:55,120
assessments and other things

236
00:20:55,120 --> 00:20:56,559
so um

237
00:20:56,559 --> 00:20:59,360
one day i was just talking to someone

238
00:20:59,360 --> 00:21:01,919
and they just sort of threw this

239
00:21:01,919 --> 00:21:03,679
statement on me while they were talking

240
00:21:03,679 --> 00:21:05,039
and very casually you know they

241
00:21:05,039 --> 00:21:05,919
mentioned

242
00:21:05,919 --> 00:21:08,400
um culture eats started strategy for

243
00:21:08,400 --> 00:21:09,840
breakfast

244
00:21:09,840 --> 00:21:12,320
and this is a famous quote by peter

245
00:21:12,320 --> 00:21:13,679
drucker and

246
00:21:13,679 --> 00:21:15,760
at that time it was new to me

247
00:21:15,760 --> 00:21:16,880
and

248
00:21:16,880 --> 00:21:18,640
it just struck me when they said that

249
00:21:18,640 --> 00:21:21,200
and i was thinking about it for quite a

250
00:21:21,200 --> 00:21:23,520
while and when and then i realized how

251
00:21:23,520 --> 00:21:25,600
true that is

252
00:21:25,600 --> 00:21:27,679
so essentially here what what he's

253
00:21:27,679 --> 00:21:29,039
trying to say is

254
00:21:29,039 --> 00:21:31,280
whether you have strategy and tactics

255
00:21:31,280 --> 00:21:32,960
and they have their own importance if

256
00:21:32,960 --> 00:21:35,039
you want to succeed at an organization

257
00:21:35,039 --> 00:21:36,320
scale

258
00:21:36,320 --> 00:21:37,679
culture is something that you need to

259
00:21:37,679 --> 00:21:39,039
focus on

260
00:21:39,039 --> 00:21:41,280
so that is what stayed with me

261
00:21:41,280 --> 00:21:43,679
but just for us to understand and the

262
00:21:43,679 --> 00:21:45,440
rationale behind what what we are going

263
00:21:45,440 --> 00:21:48,159
to discuss further um i wanted to also

264
00:21:48,159 --> 00:21:50,000
show you this other side you know which

265
00:21:50,000 --> 00:21:53,039
is more logical to the whole thing is in

266
00:21:53,039 --> 00:21:54,720
the past few years we've been seeing

267
00:21:54,720 --> 00:21:56,960
attack trends moving from you know the

268
00:21:56,960 --> 00:22:00,559
network side to the application side and

269
00:22:00,559 --> 00:22:02,559
now the new attack surface is more like

270
00:22:02,559 --> 00:22:04,559
cloud and it has moved to you know the

271
00:22:04,559 --> 00:22:06,640
supply chain and we are seeing more and

272
00:22:06,640 --> 00:22:09,200
more attacks happening in this area

273
00:22:09,200 --> 00:22:11,120
it could be because of changing

274
00:22:11,120 --> 00:22:12,400
technology

275
00:22:12,400 --> 00:22:14,159
or newer environments

276
00:22:14,159 --> 00:22:16,799
or even the ease of provisioning systems

277
00:22:16,799 --> 00:22:19,120
and scaling them these days

278
00:22:19,120 --> 00:22:21,520
but whatever be the reason when you when

279
00:22:21,520 --> 00:22:23,280
you look at it a little more deeply for

280
00:22:23,280 --> 00:22:24,880
example if you just pick up the supply

281
00:22:24,880 --> 00:22:26,640
chain attacks that have been

282
00:22:26,640 --> 00:22:29,039
so prevalent these days you will see

283
00:22:29,039 --> 00:22:31,039
that many or most of these have happened

284
00:22:31,039 --> 00:22:32,480
because of either

285
00:22:32,480 --> 00:22:34,640
for example insecure pipeline components

286
00:22:34,640 --> 00:22:36,960
or insecure product

287
00:22:36,960 --> 00:22:39,600
or just unmanaged secrets

288
00:22:39,600 --> 00:22:41,919
and the common denominator in all of

289
00:22:41,919 --> 00:22:44,480
this is that we as development teams

290
00:22:44,480 --> 00:22:46,559
have left something open or

291
00:22:46,559 --> 00:22:50,158
misconfigured or something like that

292
00:22:50,480 --> 00:22:51,840
now

293
00:22:51,840 --> 00:22:53,280
the other thing that i was thinking

294
00:22:53,280 --> 00:22:55,360
about when i was thinking of this is

295
00:22:55,360 --> 00:22:56,559
that

296
00:22:56,559 --> 00:22:58,159
given that there is a lot of change

297
00:22:58,159 --> 00:22:59,919
there are a lot of variables there is

298
00:22:59,919 --> 00:23:02,080
something else that has changed as well

299
00:23:02,080 --> 00:23:03,919
for these kind of attacks to be very

300
00:23:03,919 --> 00:23:06,240
very prevalent now

301
00:23:06,240 --> 00:23:09,039
so and that's when i i thought about uh

302
00:23:09,039 --> 00:23:11,039
agile we have been

303
00:23:11,039 --> 00:23:13,520
working in the waterfall model for quite

304
00:23:13,520 --> 00:23:16,240
a few years long time back and most of

305
00:23:16,240 --> 00:23:18,880
us or many of us have in the last decade

306
00:23:18,880 --> 00:23:21,520
been moving to primarily agile forms of

307
00:23:21,520 --> 00:23:23,200
development

308
00:23:23,200 --> 00:23:25,280
agile as many of us would know is

309
00:23:25,280 --> 00:23:27,360
hydrated incremental you know it's time

310
00:23:27,360 --> 00:23:28,880
boxed

311
00:23:28,880 --> 00:23:31,120
but one primary thing about agile

312
00:23:31,120 --> 00:23:33,919
development is it is it has it is very

313
00:23:33,919 --> 00:23:35,360
fast paced you know there are faster

314
00:23:35,360 --> 00:23:36,799
releases the faster deployments

315
00:23:36,799 --> 00:23:40,080
happening and the context is evolving uh

316
00:23:40,080 --> 00:23:42,400
very very fast

317
00:23:42,400 --> 00:23:44,720
um what happened in in the this this

318
00:23:44,720 --> 00:23:47,520
last few years was that uh the speed of

319
00:23:47,520 --> 00:23:49,679
development and agile was so fast that

320
00:23:49,679 --> 00:23:51,679
operations had to catch up they had to

321
00:23:51,679 --> 00:23:53,279
automate a lot of things

322
00:23:53,279 --> 00:23:55,200
and i would say it worked wonderfully

323
00:23:55,200 --> 00:23:56,799
for them

324
00:23:56,799 --> 00:23:59,039
but the idea is can we equate that with

325
00:23:59,039 --> 00:24:00,880
security or will it equally work for

326
00:24:00,880 --> 00:24:03,200
security

327
00:24:03,200 --> 00:24:05,120
so when you look at the products which

328
00:24:05,120 --> 00:24:06,400
are available now there are a lot of

329
00:24:06,400 --> 00:24:08,720
products in the market to do

330
00:24:08,720 --> 00:24:10,880
product security of sorts but

331
00:24:10,880 --> 00:24:13,840
um you can in fact do code reviews uh

332
00:24:13,840 --> 00:24:15,679
you can do dependency checking you can

333
00:24:15,679 --> 00:24:18,000
do dynamic testing infrastructure

334
00:24:18,000 --> 00:24:20,000
assessments or even container scanning a

335
00:24:20,000 --> 00:24:22,559
lot of things that we can do

336
00:24:22,559 --> 00:24:24,720
however even in that

337
00:24:24,720 --> 00:24:25,520
that

338
00:24:25,520 --> 00:24:27,679
attack surface you will see that things

339
00:24:27,679 --> 00:24:31,360
like business logic issues api security

340
00:24:31,360 --> 00:24:33,039
issues around idols or session

341
00:24:33,039 --> 00:24:35,039
management a lot of these kind of issues

342
00:24:35,039 --> 00:24:36,880
which are not picked up by these

343
00:24:36,880 --> 00:24:39,360
products

344
00:24:40,159 --> 00:24:42,320
so i wanted to actually give you a quick

345
00:24:42,320 --> 00:24:44,480
idea of the extended attack surface that

346
00:24:44,480 --> 00:24:46,880
we are actually dealing with in terms of

347
00:24:46,880 --> 00:24:50,159
development um as it's a very rough uh

348
00:24:50,159 --> 00:24:51,919
sort of an indicator of what i'm trying

349
00:24:51,919 --> 00:24:53,919
to say but you know you understand in

350
00:24:53,919 --> 00:24:55,279
terms of these are the components in

351
00:24:55,279 --> 00:24:57,279
terms of the agile development

352
00:24:57,279 --> 00:24:59,360
environment you will have a developer

353
00:24:59,360 --> 00:25:00,960
who has you know who's pushing in the

354
00:25:00,960 --> 00:25:03,520
custom code to source control and then

355
00:25:03,520 --> 00:25:05,120
there are a bunch of libraries that

356
00:25:05,120 --> 00:25:06,159
people in

357
00:25:06,159 --> 00:25:08,720
um we build that and you know create our

358
00:25:08,720 --> 00:25:11,279
container artifacts and essentially push

359
00:25:11,279 --> 00:25:13,520
that to production

360
00:25:13,520 --> 00:25:15,760
now it's not just these systems there

361
00:25:15,760 --> 00:25:17,520
are many other systems like at the back

362
00:25:17,520 --> 00:25:19,440
end like the data stores or databases

363
00:25:19,440 --> 00:25:21,360
that you're dealing with other public or

364
00:25:21,360 --> 00:25:22,799
private repositories from where you're

365
00:25:22,799 --> 00:25:24,320
pulling in your images

366
00:25:24,320 --> 00:25:25,840
uh and these are not just these

367
00:25:25,840 --> 00:25:27,919
instances that we are talking about when

368
00:25:27,919 --> 00:25:29,679
we say development

369
00:25:29,679 --> 00:25:31,919
particularly in agile we are also

370
00:25:31,919 --> 00:25:33,919
talking about all of these various

371
00:25:33,919 --> 00:25:36,880
actors who could be vulnerable or could

372
00:25:36,880 --> 00:25:39,120
be compromised in one way or another

373
00:25:39,120 --> 00:25:41,039
that means the real attack surface is

374
00:25:41,039 --> 00:25:43,279
not just any of these components which

375
00:25:43,279 --> 00:25:45,039
could be vulnerable

376
00:25:45,039 --> 00:25:46,799
in fact i think there is there is a talk

377
00:25:46,799 --> 00:25:49,120
on the on ci fuzzing uh later today

378
00:25:49,120 --> 00:25:50,559
which you should definitely watch i will

379
00:25:50,559 --> 00:25:52,720
look out look out for it individually

380
00:25:52,720 --> 00:25:54,159
there are a lot of vulnerabilities that

381
00:25:54,159 --> 00:25:57,120
we can exploit for these components

382
00:25:57,120 --> 00:25:59,360
but there are also a lot that can be

383
00:25:59,360 --> 00:26:01,440
done for the actors themselves who are

384
00:26:01,440 --> 00:26:03,520
maybe configuring these systems setting

385
00:26:03,520 --> 00:26:06,559
them up or writing the code base

386
00:26:06,559 --> 00:26:08,240
that means that

387
00:26:08,240 --> 00:26:10,559
there are a lot of other attacks that

388
00:26:10,559 --> 00:26:12,080
can happen as well like there are supply

389
00:26:12,080 --> 00:26:13,120
chain issues

390
00:26:13,120 --> 00:26:14,960
the social including phishing endpoint

391
00:26:14,960 --> 00:26:17,840
issues um and as you would remember

392
00:26:17,840 --> 00:26:19,840
recently uh you know there were a lot of

393
00:26:19,840 --> 00:26:22,159
zero days that sort of gave us a

394
00:26:22,159 --> 00:26:25,039
rollercoaster right so those things are

395
00:26:25,039 --> 00:26:27,120
there as well

396
00:26:27,120 --> 00:26:29,840
so that brings us to the other point

397
00:26:29,840 --> 00:26:30,799
which is

398
00:26:30,799 --> 00:26:32,559
uh the other layer which you generally

399
00:26:32,559 --> 00:26:34,720
talk about which is people

400
00:26:34,720 --> 00:26:36,880
and people becomes then the central

401
00:26:36,880 --> 00:26:39,520
stage of if you are trying to make any

402
00:26:39,520 --> 00:26:41,919
long-term lasting impact in terms of

403
00:26:41,919 --> 00:26:44,559
security

404
00:26:45,840 --> 00:26:47,919
um when you talk about people in an

405
00:26:47,919 --> 00:26:50,080
agile development environment um the

406
00:26:50,080 --> 00:26:52,640
main set of folks that you will think of

407
00:26:52,640 --> 00:26:55,120
or who should be the centerpiece of your

408
00:26:55,120 --> 00:26:57,200
or the target audience that you have

409
00:26:57,200 --> 00:27:00,080
would be the development teams right so

410
00:27:00,080 --> 00:27:01,279
when you're mainly dealing with the

411
00:27:01,279 --> 00:27:03,200
developers or development teams what is

412
00:27:03,200 --> 00:27:04,880
it that you're supposed to look at when

413
00:27:04,880 --> 00:27:06,799
you're trying to actually drive a

414
00:27:06,799 --> 00:27:09,200
mindset change for them

415
00:27:09,200 --> 00:27:11,279
so essentially first try and understand

416
00:27:11,279 --> 00:27:13,039
what are their development challenges

417
00:27:13,039 --> 00:27:14,799
many times as security teams we forget

418
00:27:14,799 --> 00:27:16,720
to even think about it

419
00:27:16,720 --> 00:27:18,159
they're already being agile they're

420
00:27:18,159 --> 00:27:20,240
working towards you know faster time to

421
00:27:20,240 --> 00:27:22,000
markets they're working towards

422
00:27:22,000 --> 00:27:23,919
performance indicators that they have to

423
00:27:23,919 --> 00:27:25,520
meet usability environments that they

424
00:27:25,520 --> 00:27:27,120
have to meet and all of that they are

425
00:27:27,120 --> 00:27:29,279
doing in a in entitled delivery

426
00:27:29,279 --> 00:27:31,360
timelines

427
00:27:31,360 --> 00:27:34,080
then uh before you go to them with the

428
00:27:34,080 --> 00:27:35,760
with the product for automation it's

429
00:27:35,760 --> 00:27:37,520
important to understand what is their

430
00:27:37,520 --> 00:27:40,399
current tech context like for example

431
00:27:40,399 --> 00:27:41,919
how do they manage their dependencies

432
00:27:41,919 --> 00:27:44,000
currently right what is working for them

433
00:27:44,000 --> 00:27:47,039
what is the process of prs

434
00:27:47,039 --> 00:27:47,760
and

435
00:27:47,760 --> 00:27:49,840
if you are going to introduce a process

436
00:27:49,840 --> 00:27:51,120
change for them

437
00:27:51,120 --> 00:27:53,039
it's also important to see where they

438
00:27:53,039 --> 00:27:55,760
are in terms of for example awareness to

439
00:27:55,760 --> 00:27:57,520
even pick up that process and make the

440
00:27:57,520 --> 00:27:59,760
right sense of it and not just make it a

441
00:27:59,760 --> 00:28:03,840
checklist in their entire kind of things

442
00:28:03,919 --> 00:28:06,159
um and hence i

443
00:28:06,159 --> 00:28:07,120
came back

444
00:28:07,120 --> 00:28:08,880
i'm so so sorry to interrupt but i just

445
00:28:08,880 --> 00:28:09,919
want to give you a heads up that we're

446
00:28:09,919 --> 00:28:11,440
getting a lot of that static audio

447
00:28:11,440 --> 00:28:13,840
feedback again so if you can potentially

448
00:28:13,840 --> 00:28:15,760
reset and we'll just pause here for a

449
00:28:15,760 --> 00:28:16,799
moment

450
00:28:16,799 --> 00:28:18,240
okay

451
00:28:18,240 --> 00:28:21,200
and try whatever you did last time to um

452
00:28:21,200 --> 00:28:23,039
to fix that audio issue let's let's try

453
00:28:23,039 --> 00:28:25,440
doing that

454
00:28:26,080 --> 00:28:26,880
some

455
00:28:26,880 --> 00:28:28,240
all right just a moment folks we'll get

456
00:28:28,240 --> 00:28:29,039
the

457
00:28:29,039 --> 00:28:32,720
audio sorted out and continue on here

458
00:28:34,960 --> 00:28:36,559
thank you all for your patience

459
00:28:36,559 --> 00:28:38,000
appreciate it

460
00:28:38,000 --> 00:28:39,840
good to see everybody lively in the chat

461
00:28:39,840 --> 00:28:41,600
seeing folks joining from all over

462
00:28:41,600 --> 00:28:44,559
california arizona michigan florida

463
00:28:44,559 --> 00:28:46,240
hey nila welcome back

464
00:28:46,240 --> 00:28:48,640
hi can you hear me now yes and you sound

465
00:28:48,640 --> 00:28:50,399
crystal clear again

466
00:28:50,399 --> 00:28:52,480
let's hope it doesn't uh happen but just

467
00:28:52,480 --> 00:28:54,159
a heads up it may happen progressively

468
00:28:54,159 --> 00:28:55,840
over time it seems like it's building up

469
00:28:55,840 --> 00:28:58,720
but so i may pop in again it's a heads

470
00:28:58,720 --> 00:29:00,720
up sorry about that

471
00:29:00,720 --> 00:29:02,240
okay just give me one

472
00:29:02,240 --> 00:29:04,320
sure

473
00:29:04,320 --> 00:29:07,760
southwest florida we got toronto

474
00:29:07,760 --> 00:29:09,760
where else are you all coming from new

475
00:29:09,760 --> 00:29:12,399
orleans louisiana

476
00:29:12,399 --> 00:29:14,640
love to see it love to see it

477
00:29:14,640 --> 00:29:17,120
ohio

478
00:29:17,120 --> 00:29:18,799
what else what else

479
00:29:18,799 --> 00:29:20,480
spain thank you so much for joining us

480
00:29:20,480 --> 00:29:22,480
from spain daniel

481
00:29:22,480 --> 00:29:24,880
uh tampa casey good to see you welcome

482
00:29:24,880 --> 00:29:28,880
from tampa denmark indiana colombia holy

483
00:29:28,880 --> 00:29:30,399
moly all over the place this is

484
00:29:30,399 --> 00:29:31,840
fantastic

485
00:29:31,840 --> 00:29:34,159
maryland quebec

486
00:29:34,159 --> 00:29:37,200
washington dc

487
00:29:37,760 --> 00:29:39,840
hey

488
00:29:39,840 --> 00:29:41,279
can you hear me now

489
00:29:41,279 --> 00:29:43,440
yes very good

490
00:29:43,440 --> 00:29:46,080
okay okay

491
00:29:46,080 --> 00:29:47,600
just give me a second

492
00:29:47,600 --> 00:29:50,320
sure no problem

493
00:29:50,320 --> 00:29:52,640
i know how how it can feel so

494
00:29:52,640 --> 00:29:54,159
like no worries about the technical

495
00:29:54,159 --> 00:29:55,440
difficulties and stuff like that we'll

496
00:29:55,440 --> 00:29:57,279
get through it and we can uh adjust

497
00:29:57,279 --> 00:29:59,760
timing on things too okay

498
00:29:59,760 --> 00:30:02,240
cool no problem all right so

499
00:30:02,240 --> 00:30:03,760
just to continue

500
00:30:03,760 --> 00:30:05,360
where i left

501
00:30:05,360 --> 00:30:06,480
yeah thanks

502
00:30:06,480 --> 00:30:07,679
um

503
00:30:07,679 --> 00:30:09,840
when i came back and started uh

504
00:30:09,840 --> 00:30:11,440
looking at you know how do you drive

505
00:30:11,440 --> 00:30:14,320
that mindset change um it was something

506
00:30:14,320 --> 00:30:15,440
that

507
00:30:15,440 --> 00:30:17,440
i was looking at more from a people

508
00:30:17,440 --> 00:30:18,960
standpoint and how do we bring about

509
00:30:18,960 --> 00:30:20,880
that cultural change

510
00:30:20,880 --> 00:30:23,200
i started designing a security change

511
00:30:23,200 --> 00:30:24,799
program that would bring about that

512
00:30:24,799 --> 00:30:25,679
change

513
00:30:25,679 --> 00:30:27,919
and the idea and goal for us was to

514
00:30:27,919 --> 00:30:30,159
actually have security champions

515
00:30:30,159 --> 00:30:34,080
uh in every team who would sort of

516
00:30:34,080 --> 00:30:36,720
catapult security into the the projects

517
00:30:36,720 --> 00:30:38,320
and and stay close and drive that

518
00:30:38,320 --> 00:30:39,760
culture change

519
00:30:39,760 --> 00:30:41,039
um

520
00:30:41,039 --> 00:30:43,679
so whenever you are in that journey as a

521
00:30:43,679 --> 00:30:44,960
security team when you're trying to

522
00:30:44,960 --> 00:30:47,200
design a program yourself there are some

523
00:30:47,200 --> 00:30:48,960
key considerations to look at when

524
00:30:48,960 --> 00:30:51,039
you're starting that so the first thing

525
00:30:51,039 --> 00:30:53,120
is keep the problem statement in mind

526
00:30:53,120 --> 00:30:54,880
many times there are so many issues that

527
00:30:54,880 --> 00:30:56,480
we are dealing with that you know we get

528
00:30:56,480 --> 00:30:58,320
into rabbit holes so you have to

529
00:30:58,320 --> 00:30:59,760
understand what is the problem that you

530
00:30:59,760 --> 00:31:02,159
are solving for and how relevant it is

531
00:31:02,159 --> 00:31:04,159
for your target audience in this case

532
00:31:04,159 --> 00:31:05,600
the development teams

533
00:31:05,600 --> 00:31:07,360
and what kind of outcomes you're looking

534
00:31:07,360 --> 00:31:08,320
at

535
00:31:08,320 --> 00:31:10,000
secondly look at the stakeholders that

536
00:31:10,000 --> 00:31:12,159
you have it could be the participants

537
00:31:12,159 --> 00:31:14,399
the development teams themselves uh it

538
00:31:14,399 --> 00:31:15,760
could also be

539
00:31:15,760 --> 00:31:17,600
for example influencers and projects

540
00:31:17,600 --> 00:31:19,600
right who you want to work with to take

541
00:31:19,600 --> 00:31:21,039
this further ahead

542
00:31:21,039 --> 00:31:22,799
also the leaders in your organization

543
00:31:22,799 --> 00:31:24,799
and stuff like that

544
00:31:24,799 --> 00:31:27,120
and finally also look at basic things

545
00:31:27,120 --> 00:31:28,559
like tech stacks you know what are the

546
00:31:28,559 --> 00:31:30,320
technical constraints where the budget

547
00:31:30,320 --> 00:31:32,320
you're working with the timelines that

548
00:31:32,320 --> 00:31:34,080
you're working with things like for

549
00:31:34,080 --> 00:31:36,080
example timeline is not just delivery

550
00:31:36,080 --> 00:31:37,919
timelines but also the time that the

551
00:31:37,919 --> 00:31:39,600
teams will have to invest

552
00:31:39,600 --> 00:31:43,600
in your program once that rolls out

553
00:31:43,600 --> 00:31:45,840
secondly when you're creating a program

554
00:31:45,840 --> 00:31:47,760
always keep in mind to make it lean

555
00:31:47,760 --> 00:31:49,200
because you're doing it for an agile

556
00:31:49,200 --> 00:31:51,760
development environment so for example

557
00:31:51,760 --> 00:31:54,720
in in our case when i started we had

558
00:31:54,720 --> 00:31:56,799
this whole nine step process

559
00:31:56,799 --> 00:31:59,200
to go through to the right outcome and

560
00:31:59,200 --> 00:32:01,600
it did work for us for the initial

561
00:32:01,600 --> 00:32:02,880
pilots

562
00:32:02,880 --> 00:32:05,600
but what we did was soon we came back to

563
00:32:05,600 --> 00:32:08,080
brainstorm and make it much

564
00:32:08,080 --> 00:32:10,399
uh leaner from that perspective so that

565
00:32:10,399 --> 00:32:12,880
we could roll it out to you know larger

566
00:32:12,880 --> 00:32:14,480
set of teams because we were to work

567
00:32:14,480 --> 00:32:16,559
with hundreds of teams after that so we

568
00:32:16,559 --> 00:32:18,880
made it very simple three-step process

569
00:32:18,880 --> 00:32:21,360
on including onboarding where we would

570
00:32:21,360 --> 00:32:22,880
focus on awareness

571
00:32:22,880 --> 00:32:25,120
workshops where we would focus on more

572
00:32:25,120 --> 00:32:27,279
practical high-intensity tasks which we

573
00:32:27,279 --> 00:32:30,000
would enable the the sect charms for and

574
00:32:30,000 --> 00:32:33,279
followed by governance

575
00:32:33,440 --> 00:32:34,799
when you are defining any process

576
00:32:34,799 --> 00:32:37,760
changes that you want uh them to pick up

577
00:32:37,760 --> 00:32:40,080
the teams to pick up for your program

578
00:32:40,080 --> 00:32:42,559
it's very essential when doing that for

579
00:32:42,559 --> 00:32:44,559
an agile environment is to align with

580
00:32:44,559 --> 00:32:46,640
the key hi agile rituals

581
00:32:46,640 --> 00:32:48,320
uh that way is what happens is it

582
00:32:48,320 --> 00:32:49,919
ensures that it becomes a practice for

583
00:32:49,919 --> 00:32:52,000
them and and that it becomes more like

584
00:32:52,000 --> 00:32:53,840
muscle memory right when they're doing

585
00:32:53,840 --> 00:32:56,399
development so in our case when uh we

586
00:32:56,399 --> 00:32:58,799
had threat modeling like at at the heart

587
00:32:58,799 --> 00:33:00,559
of what we were trying to enable them

588
00:33:00,559 --> 00:33:01,360
for

589
00:33:01,360 --> 00:33:02,480
and um

590
00:33:02,480 --> 00:33:04,320
for example for iterations right we

591
00:33:04,320 --> 00:33:06,880
would have a sprint plan or an initial

592
00:33:06,880 --> 00:33:09,279
iteration planning meeting so when that

593
00:33:09,279 --> 00:33:11,760
ritual happens we made sure that we are

594
00:33:11,760 --> 00:33:13,519
looking at we are the teams are picking

595
00:33:13,519 --> 00:33:15,760
up the features right at that time for

596
00:33:15,760 --> 00:33:17,679
which feature would be threat modeled

597
00:33:17,679 --> 00:33:19,679
you know in that iteration

598
00:33:19,679 --> 00:33:22,880
secondly rotate and i trade so uh it's

599
00:33:22,880 --> 00:33:25,840
important to have frequent but smaller

600
00:33:25,840 --> 00:33:27,440
threat modelings in in this in this

601
00:33:27,440 --> 00:33:29,600
parlance is to do it more frequently but

602
00:33:29,600 --> 00:33:31,919
in small sizes so for example rather

603
00:33:31,919 --> 00:33:33,760
than doing an entire thread modeling for

604
00:33:33,760 --> 00:33:36,240
an entire application we would

605
00:33:36,240 --> 00:33:38,320
rather focus on smaller threat modeling

606
00:33:38,320 --> 00:33:41,279
on features but do it more frequently

607
00:33:41,279 --> 00:33:42,799
thirdly make it official you know

608
00:33:42,799 --> 00:33:45,279
whatever threats that came out of our

609
00:33:45,279 --> 00:33:46,960
threat modeling's we're supposed to go

610
00:33:46,960 --> 00:33:48,960
to the project dashboard so for example

611
00:33:48,960 --> 00:33:51,200
your jira or your confluence you can add

612
00:33:51,200 --> 00:33:53,760
it to that directly

613
00:33:53,760 --> 00:33:56,480
secure your source so it's good to start

614
00:33:56,480 --> 00:33:59,039
with secure defaults uh create for

615
00:33:59,039 --> 00:34:01,120
example baseline secure baseline images

616
00:34:01,120 --> 00:34:05,279
or or harden configuration or a safer

617
00:34:05,279 --> 00:34:07,279
code base to start off with totally

618
00:34:07,279 --> 00:34:09,440
depends on the program that you are

619
00:34:09,440 --> 00:34:10,719
going for

620
00:34:10,719 --> 00:34:13,280
in our case for example we had in terms

621
00:34:13,280 --> 00:34:14,960
of threat modeling because that was at

622
00:34:14,960 --> 00:34:16,879
the core of this program we were

623
00:34:16,879 --> 00:34:18,639
focusing on giving them an initial set

624
00:34:18,639 --> 00:34:20,800
of scenarios that they could look in the

625
00:34:20,800 --> 00:34:22,879
context of which were generally the

626
00:34:22,879 --> 00:34:25,280
commonly occurring scenarios for for our

627
00:34:25,280 --> 00:34:26,719
teams

628
00:34:26,719 --> 00:34:28,960
and lastly uh

629
00:34:28,960 --> 00:34:30,879
leverage the pipeline so

630
00:34:30,879 --> 00:34:32,639
i think this has been discussed a lot

631
00:34:32,639 --> 00:34:35,280
and tremendously in in devsecops so i

632
00:34:35,280 --> 00:34:37,839
will not uh speak too much about it it's

633
00:34:37,839 --> 00:34:39,520
important it's a very special place in

634
00:34:39,520 --> 00:34:40,960
development where you can add and

635
00:34:40,960 --> 00:34:43,280
automate a lot of stuff so leverage that

636
00:34:43,280 --> 00:34:45,040
but ensure that you have the right kind

637
00:34:45,040 --> 00:34:47,760
of api set for it for example when does

638
00:34:47,760 --> 00:34:50,399
it really break the build you know or do

639
00:34:50,399 --> 00:34:52,960
you have the slas to go ahead and fix

640
00:34:52,960 --> 00:34:54,800
the high critical issues that you found

641
00:34:54,800 --> 00:34:58,320
in that particular run

642
00:34:58,720 --> 00:34:59,520
so

643
00:34:59,520 --> 00:35:00,960
before

644
00:35:00,960 --> 00:35:03,520
going in with it we had the onboarding

645
00:35:03,520 --> 00:35:05,520
process where we're looking at awareness

646
00:35:05,520 --> 00:35:07,760
but some important things to

647
00:35:07,760 --> 00:35:09,119
do when you're going for developer

648
00:35:09,119 --> 00:35:11,839
awareness is apart from the general

649
00:35:11,839 --> 00:35:13,200
awareness that you're looking at it's

650
00:35:13,200 --> 00:35:15,760
also important to look at role specific

651
00:35:15,760 --> 00:35:18,079
trainings uh in the sense that what can

652
00:35:18,079 --> 00:35:20,480
they do in their respective roles so we

653
00:35:20,480 --> 00:35:22,800
know that a developer can code securely

654
00:35:22,800 --> 00:35:24,640
um a ba

655
00:35:24,640 --> 00:35:25,920
they will be gathering requirements

656
00:35:25,920 --> 00:35:27,680
right so they should be explicitly

657
00:35:27,680 --> 00:35:30,000
asking for security requirements as well

658
00:35:30,000 --> 00:35:31,920
and they should be adding that as

659
00:35:31,920 --> 00:35:34,000
acceptance criteria in their stories as

660
00:35:34,000 --> 00:35:36,000
well so those are the kind of things

661
00:35:36,000 --> 00:35:37,680
that you want to tell them and how to do

662
00:35:37,680 --> 00:35:38,800
that

663
00:35:38,800 --> 00:35:40,560
so that the securities everyone's

664
00:35:40,560 --> 00:35:42,960
responsibility actually becomes true

665
00:35:42,960 --> 00:35:43,760
um

666
00:35:43,760 --> 00:35:45,040
secondly there are many times that we

667
00:35:45,040 --> 00:35:46,800
create a lot of these baselines and

668
00:35:46,800 --> 00:35:49,119
checklists and you know um

669
00:35:49,119 --> 00:35:50,800
even images and stuff that i was talking

670
00:35:50,800 --> 00:35:52,720
about but many times developers may not

671
00:35:52,720 --> 00:35:53,680
have

672
00:35:53,680 --> 00:35:56,160
uh awareness around that so do they know

673
00:35:56,160 --> 00:35:58,079
where it is can they just pick up and

674
00:35:58,079 --> 00:35:59,680
run with it when they are starting off

675
00:35:59,680 --> 00:36:00,800
their projects

676
00:36:00,800 --> 00:36:03,440
is something you should ask yourself

677
00:36:03,440 --> 00:36:06,640
and lastly look at a format of awareness

678
00:36:06,640 --> 00:36:09,440
where they can stay updated there are so

679
00:36:09,440 --> 00:36:11,760
many new attacks coming up every day are

680
00:36:11,760 --> 00:36:14,079
they updated about these recent patches

681
00:36:14,079 --> 00:36:16,240
uh any recent issues that affect their

682
00:36:16,240 --> 00:36:17,760
systems

683
00:36:17,760 --> 00:36:19,280
so things like that should be discussed

684
00:36:19,280 --> 00:36:21,520
very very frequently and one efficient

685
00:36:21,520 --> 00:36:24,160
way of doing that we figured was to

686
00:36:24,160 --> 00:36:26,720
uh create and nurture a community of all

687
00:36:26,720 --> 00:36:28,720
of these people so we create a community

688
00:36:28,720 --> 00:36:31,040
of created a community of sectrans where

689
00:36:31,040 --> 00:36:33,440
everyone uh especially sections and the

690
00:36:33,440 --> 00:36:34,880
development teams could actually

691
00:36:34,880 --> 00:36:37,839
interact around more hands-on fixes and

692
00:36:37,839 --> 00:36:39,200
you know talking to each other about

693
00:36:39,200 --> 00:36:41,440
these daily issues which they could then

694
00:36:41,440 --> 00:36:43,280
pick up and and you know discuss with

695
00:36:43,280 --> 00:36:45,760
each other and as well

696
00:36:45,760 --> 00:36:48,720
um in our case neelu i'm i'm so so sorry

697
00:36:48,720 --> 00:36:50,800
to interrupt again i don't mean to keep

698
00:36:50,800 --> 00:36:52,079
doing this to you but that's that it

699
00:36:52,079 --> 00:36:54,240
keeps creeping back in somehow for some

700
00:36:54,240 --> 00:36:56,560
reason

701
00:36:56,800 --> 00:37:00,480
oh should i go back to that or

702
00:37:01,200 --> 00:37:04,079
i i don't think it's when you yeah

703
00:37:04,079 --> 00:37:05,040
okay

704
00:37:05,040 --> 00:37:06,560
i'll let nilu

705
00:37:06,560 --> 00:37:08,480
sort that out one more time

706
00:37:08,480 --> 00:37:10,880
and then we'll pick things back up but

707
00:37:10,880 --> 00:37:12,640
while we're at this little pause here

708
00:37:12,640 --> 00:37:14,560
folks a reminder if you have questions

709
00:37:14,560 --> 00:37:16,079
cue them up in the chat room and we'll

710
00:37:16,079 --> 00:37:17,920
be sure to grab them and do our best to

711
00:37:17,920 --> 00:37:19,040
include them towards the end of the

712
00:37:19,040 --> 00:37:21,359
session to ask on stream on the stage

713
00:37:21,359 --> 00:37:23,520
and on stream

714
00:37:23,520 --> 00:37:25,520
all right neelu you're muted can you

715
00:37:25,520 --> 00:37:28,240
hear me now yeah yeah is it

716
00:37:28,240 --> 00:37:29,520
do you know if there's anything in

717
00:37:29,520 --> 00:37:31,119
particular that's causing it or what

718
00:37:31,119 --> 00:37:33,520
what's uh allowing you to get back to

719
00:37:33,520 --> 00:37:34,880
clear

720
00:37:34,880 --> 00:37:36,880
clear audio

721
00:37:36,880 --> 00:37:39,520
maybe we can help you

722
00:37:39,520 --> 00:37:41,520
oh this is maybe this because of the mic

723
00:37:41,520 --> 00:37:42,960
i can remove the mic just give me a

724
00:37:42,960 --> 00:37:45,920
second okay

725
00:37:48,400 --> 00:37:50,480
all right so yeah get those questions

726
00:37:50,480 --> 00:37:51,760
queued up for us and we'll get them

727
00:37:51,760 --> 00:37:53,680
asked towards the end of the session

728
00:37:53,680 --> 00:37:56,079
and uh go from there i hope you're all

729
00:37:56,079 --> 00:37:57,839
enjoying it and again thanks for letting

730
00:37:57,839 --> 00:37:59,599
us know everyone where you're joining

731
00:37:59,599 --> 00:38:01,920
from it's really awesome to see like all

732
00:38:01,920 --> 00:38:03,119
over the world

733
00:38:03,119 --> 00:38:05,280
so it's like both both blessing and the

734
00:38:05,280 --> 00:38:07,280
curse technology right the blessing is

735
00:38:07,280 --> 00:38:08,640
we can join from all over the world

736
00:38:08,640 --> 00:38:10,800
right now for this this session the

737
00:38:10,800 --> 00:38:12,560
curse is technology is causing some

738
00:38:12,560 --> 00:38:15,760
static audio issues for us unfortunately

739
00:38:15,760 --> 00:38:17,280
here we go hello

740
00:38:17,280 --> 00:38:20,800
is this okay yeah i can hear you

741
00:38:20,800 --> 00:38:22,800
seems fairly clear

742
00:38:22,800 --> 00:38:24,480
all right let's go from there if you

743
00:38:24,480 --> 00:38:25,680
want to share your screen again we'll

744
00:38:25,680 --> 00:38:28,560
get that back on stream

745
00:38:28,560 --> 00:38:30,960
and go from there

746
00:38:30,960 --> 00:38:31,920
cool

747
00:38:31,920 --> 00:38:34,880
so um for us we were looking at so in

748
00:38:34,880 --> 00:38:37,200
terms of awareness uh we were looking at

749
00:38:37,200 --> 00:38:39,520
agile threat modelling and uh what we

750
00:38:39,520 --> 00:38:42,079
were particularly trying to do is apart

751
00:38:42,079 --> 00:38:43,599
from the academic side of it you know

752
00:38:43,599 --> 00:38:45,520
apart from understanding how to do a

753
00:38:45,520 --> 00:38:48,480
strike based threat modeling uh quickly

754
00:38:48,480 --> 00:38:50,560
we were looking at how to operationalize

755
00:38:50,560 --> 00:38:52,320
this better we were looking at uh

756
00:38:52,320 --> 00:38:53,920
essentially telling them how you can

757
00:38:53,920 --> 00:38:55,760
time it better rather than running into

758
00:38:55,760 --> 00:38:57,119
rabbit holes

759
00:38:57,119 --> 00:38:59,200
we were trying to tell them

760
00:38:59,200 --> 00:39:01,839
or teaching them around

761
00:39:01,839 --> 00:39:03,359
getting together and adding their

762
00:39:03,359 --> 00:39:04,720
perspective when they're doing threat

763
00:39:04,720 --> 00:39:06,720
modeling how do they prioritize issues

764
00:39:06,720 --> 00:39:09,200
so once you have the threads out how do

765
00:39:09,200 --> 00:39:11,119
you prioritize the issues and add them

766
00:39:11,119 --> 00:39:12,640
to your project dashboard how do you

767
00:39:12,640 --> 00:39:14,480
turn them into either acceptance

768
00:39:14,480 --> 00:39:18,320
criteria or stories um and or tasks for

769
00:39:18,320 --> 00:39:20,000
that matter and then add them to the

770
00:39:20,000 --> 00:39:21,599
project dashboard so these were the

771
00:39:21,599 --> 00:39:23,280
practical aspects that we wanted to

772
00:39:23,280 --> 00:39:25,119
focus on something that they could pick

773
00:39:25,119 --> 00:39:27,200
up would be more hands-on for them and

774
00:39:27,200 --> 00:39:28,640
they could pick up and do it in a more

775
00:39:28,640 --> 00:39:31,440
agile fashion

776
00:39:31,680 --> 00:39:33,839
for communication uh one important thing

777
00:39:33,839 --> 00:39:36,000
to understand is try and leverage as

778
00:39:36,000 --> 00:39:37,520
many channels of communication as

779
00:39:37,520 --> 00:39:38,800
possible

780
00:39:38,800 --> 00:39:40,000
emails

781
00:39:40,000 --> 00:39:42,000
you know chat channels create channels

782
00:39:42,000 --> 00:39:44,720
if there are not any um but

783
00:39:44,720 --> 00:39:46,800
uh in an agile development environment

784
00:39:46,800 --> 00:39:48,720
what i have seen works best is the face

785
00:39:48,720 --> 00:39:51,760
to face communication and that

786
00:39:51,760 --> 00:39:53,760
i think stays for a very long period of

787
00:39:53,760 --> 00:39:54,560
time

788
00:39:54,560 --> 00:39:55,920
in the past couple of years that has

789
00:39:55,920 --> 00:39:57,920
become really difficult but even when

790
00:39:57,920 --> 00:40:00,079
wherever you can interact with smaller

791
00:40:00,079 --> 00:40:02,400
groups uh or pair with you know

792
00:40:02,400 --> 00:40:04,480
developer teams rather than just

793
00:40:04,480 --> 00:40:06,400
remotely or working in silos and just

794
00:40:06,400 --> 00:40:10,240
sending an email and forgetting about it

795
00:40:10,240 --> 00:40:12,079
one thing to keep in mind as a security

796
00:40:12,079 --> 00:40:14,720
team is to change our own mindset before

797
00:40:14,720 --> 00:40:16,880
we go to the developers asking them to

798
00:40:16,880 --> 00:40:20,319
change the mindset so in this case uh

799
00:40:20,319 --> 00:40:22,640
focus on people interactions rather than

800
00:40:22,640 --> 00:40:24,960
you know set standards that you may have

801
00:40:24,960 --> 00:40:26,960
um remember that

802
00:40:26,960 --> 00:40:28,800
to make

803
00:40:28,800 --> 00:40:30,480
you know the function secure you will

804
00:40:30,480 --> 00:40:32,160
have to make security functional so

805
00:40:32,160 --> 00:40:35,839
always go with a working solution

806
00:40:36,000 --> 00:40:38,319
third very important is to collaborate

807
00:40:38,319 --> 00:40:40,400
with their teams as much as possible you

808
00:40:40,400 --> 00:40:42,000
know sit down pair with developers or

809
00:40:42,000 --> 00:40:43,599
pair with devops and and all of these

810
00:40:43,599 --> 00:40:45,119
individual roles and understand what

811
00:40:45,119 --> 00:40:46,560
their challenges are

812
00:40:46,560 --> 00:40:47,839
and lastly

813
00:40:47,839 --> 00:40:50,319
uh adapt to changes in technology

814
00:40:50,319 --> 00:40:53,119
technology for for development teams is

815
00:40:53,119 --> 00:40:55,119
actually changing really fast so we

816
00:40:55,119 --> 00:40:57,359
should adapt to technology as much as

817
00:40:57,359 --> 00:40:59,839
possible

818
00:41:00,079 --> 00:41:02,319
how do you engage uh the developers

819
00:41:02,319 --> 00:41:03,920
which in our case we were mostly looking

820
00:41:03,920 --> 00:41:06,000
at sections and their engagement one

821
00:41:06,000 --> 00:41:08,400
thing that uh that i would like to share

822
00:41:08,400 --> 00:41:10,720
is uh rather than you know whenever we

823
00:41:10,720 --> 00:41:12,160
go to the team sometimes we make that

824
00:41:12,160 --> 00:41:14,800
mistake of throwing in security words or

825
00:41:14,800 --> 00:41:16,400
keywords or jargons like for example

826
00:41:16,400 --> 00:41:17,920
rather than telling them

827
00:41:17,920 --> 00:41:21,040
zero trust on the first day it's always

828
00:41:21,040 --> 00:41:22,880
good to start off with discussing more

829
00:41:22,880 --> 00:41:26,319
concrete and actionable tasks um or

830
00:41:26,319 --> 00:41:28,720
items that they can take up maybe before

831
00:41:28,720 --> 00:41:30,640
the next stand up you know something

832
00:41:30,640 --> 00:41:32,319
like that

833
00:41:32,319 --> 00:41:34,160
secondly keep them motivated as much as

834
00:41:34,160 --> 00:41:36,640
possible and aware of of the recent

835
00:41:36,640 --> 00:41:39,920
issues uh one great way of motivating uh

836
00:41:39,920 --> 00:41:42,400
these set of folks is to let them own

837
00:41:42,400 --> 00:41:44,400
their journey right let them own the

838
00:41:44,400 --> 00:41:46,000
changes that they want to make in their

839
00:41:46,000 --> 00:41:48,079
projects be it automation be around

840
00:41:48,079 --> 00:41:50,000
adding some other controls and process

841
00:41:50,000 --> 00:41:51,760
changes and stuff like that once you

842
00:41:51,760 --> 00:41:53,599
have told them what the goal is uh let

843
00:41:53,599 --> 00:41:55,680
them own that

844
00:41:55,680 --> 00:41:57,520
uh and lastly you can also gamify the

845
00:41:57,520 --> 00:41:59,040
experience right so across your

846
00:41:59,040 --> 00:42:01,839
organization or delivery organization

847
00:42:01,839 --> 00:42:03,440
if you're looking at engaging these

848
00:42:03,440 --> 00:42:05,680
people or all the development teams way

849
00:42:05,680 --> 00:42:08,319
more it's always good to gamify that how

850
00:42:08,319 --> 00:42:09,920
can you do that maybe you know you might

851
00:42:09,920 --> 00:42:11,920
have heard of the systems of badges or

852
00:42:11,920 --> 00:42:14,079
levels different levels in security so

853
00:42:14,079 --> 00:42:15,440
it's always good to create something

854
00:42:15,440 --> 00:42:17,680
like that where they can move from one

855
00:42:17,680 --> 00:42:19,760
batch to another and always look forward

856
00:42:19,760 --> 00:42:21,839
to something new so that sort of brings

857
00:42:21,839 --> 00:42:23,440
in a healthy competition as well for

858
00:42:23,440 --> 00:42:25,440
them

859
00:42:25,440 --> 00:42:27,119
so rather than giving them a one-time

860
00:42:27,119 --> 00:42:29,119
solution it's

861
00:42:29,119 --> 00:42:31,520
rather good to teach them how to fish

862
00:42:31,520 --> 00:42:33,520
that's the idea

863
00:42:33,520 --> 00:42:35,280
so all of this works well in a smaller

864
00:42:35,280 --> 00:42:37,760
scale and it worked well for our pilots

865
00:42:37,760 --> 00:42:38,640
also

866
00:42:38,640 --> 00:42:41,440
but when you move on to address this at

867
00:42:41,440 --> 00:42:43,280
scale like with you know in our case it

868
00:42:43,280 --> 00:42:44,880
was hundreds of teams that we were going

869
00:42:44,880 --> 00:42:47,280
to roll it out um i have some more

870
00:42:47,280 --> 00:42:48,720
learnings to share

871
00:42:48,720 --> 00:42:51,040
first thing is simplify the goals as

872
00:42:51,040 --> 00:42:52,880
much as possible so that everyone

873
00:42:52,880 --> 00:42:54,319
including

874
00:42:54,319 --> 00:42:57,200
a developer or a leader understands it

875
00:42:57,200 --> 00:42:59,040
equally well and everyone is on the same

876
00:42:59,040 --> 00:43:01,040
page you know that ways it becomes very

877
00:43:01,040 --> 00:43:02,960
easy to interpret solutions that you are

878
00:43:02,960 --> 00:43:05,839
recommending as well

879
00:43:07,040 --> 00:43:08,560
atomic success

880
00:43:08,560 --> 00:43:09,359
is

881
00:43:09,359 --> 00:43:13,200
very important before you get successful

882
00:43:13,200 --> 00:43:14,960
which means that for if you're

883
00:43:14,960 --> 00:43:17,200
introducing a process of practice always

884
00:43:17,200 --> 00:43:19,440
try and test it on some of the teams it

885
00:43:19,440 --> 00:43:21,920
has to succeed in in a unit scale so

886
00:43:21,920 --> 00:43:23,359
whether you're looking at unit being

887
00:43:23,359 --> 00:43:26,000
your project or it being your squad or

888
00:43:26,000 --> 00:43:29,040
streams uh it should succeed or succeed

889
00:43:29,040 --> 00:43:30,960
there and work well there for it to

890
00:43:30,960 --> 00:43:34,160
function well at scale

891
00:43:34,880 --> 00:43:37,040
thirdly uh having a set of secure

892
00:43:37,040 --> 00:43:39,040
defaults really helps so whatever be

893
00:43:39,040 --> 00:43:40,319
your program that you're building it

894
00:43:40,319 --> 00:43:42,319
around it's good to have a set of secure

895
00:43:42,319 --> 00:43:44,560
defaults to start off with now what it

896
00:43:44,560 --> 00:43:47,599
really helps with is to give that

897
00:43:47,599 --> 00:43:50,240
a quick win to to the developers also

898
00:43:50,240 --> 00:43:52,000
and once they have that quick win it's

899
00:43:52,000 --> 00:43:53,680
like a win-win situation where they can

900
00:43:53,680 --> 00:43:55,440
start psychologically at a stronger

901
00:43:55,440 --> 00:43:57,440
place and then they stick for a longer

902
00:43:57,440 --> 00:43:59,920
time to the changes that you might have

903
00:43:59,920 --> 00:44:03,200
recommended through your program

904
00:44:04,079 --> 00:44:06,560
um the other thing that is important

905
00:44:06,560 --> 00:44:09,280
while doing that is remember what you're

906
00:44:09,280 --> 00:44:10,960
in for so you are trying to drive a

907
00:44:10,960 --> 00:44:13,040
mindset change and it's very important

908
00:44:13,040 --> 00:44:17,599
to build a mindset for edge cases so

909
00:44:17,760 --> 00:44:19,599
essentially take them through the entire

910
00:44:19,599 --> 00:44:21,280
journey that you will have as as a

911
00:44:21,280 --> 00:44:22,720
security person right if you were

912
00:44:22,720 --> 00:44:24,720
playing all of these roles you would ask

913
00:44:24,720 --> 00:44:26,960
yourself questions or try to answer some

914
00:44:26,960 --> 00:44:28,800
of those security questions are they

915
00:44:28,800 --> 00:44:30,319
asking those questions do they have a

916
00:44:30,319 --> 00:44:32,000
critical mindset

917
00:44:32,000 --> 00:44:33,760
while they are playing their role within

918
00:44:33,760 --> 00:44:35,359
the development team so that is

919
00:44:35,359 --> 00:44:37,599
something to look for

920
00:44:37,599 --> 00:44:40,000
leverage automation wherever possible

921
00:44:40,000 --> 00:44:42,240
once they start you know identifying

922
00:44:42,240 --> 00:44:44,240
threats early on in the life cycle they

923
00:44:44,240 --> 00:44:46,720
will start seeing more

924
00:44:46,720 --> 00:44:48,960
things or issues that can be predicted

925
00:44:48,960 --> 00:44:51,760
early on and or are recurring and can be

926
00:44:51,760 --> 00:44:53,760
automated so for example if there is a

927
00:44:53,760 --> 00:44:55,839
solution to add

928
00:44:55,839 --> 00:44:58,319
stages right to a certain type of

929
00:44:58,319 --> 00:44:59,440
pipeline and you're dealing with

930
00:44:59,440 --> 00:45:01,760
multiple different kind of ci's in your

931
00:45:01,760 --> 00:45:04,079
environment then what's created for one

932
00:45:04,079 --> 00:45:06,079
can be reused for another always

933
00:45:06,079 --> 00:45:07,680
depending on how many different teams

934
00:45:07,680 --> 00:45:09,839
are using that so leverage that as much

935
00:45:09,839 --> 00:45:12,000
as possible

936
00:45:12,000 --> 00:45:14,240
when you're introducing processes or

937
00:45:14,240 --> 00:45:16,640
practices uh it's important that they're

938
00:45:16,640 --> 00:45:18,880
effective so the first thing to ensure

939
00:45:18,880 --> 00:45:20,720
that is that you align with your agile

940
00:45:20,720 --> 00:45:22,640
development life cycle you know the

941
00:45:22,640 --> 00:45:24,960
delivery timelines the life cycle

942
00:45:24,960 --> 00:45:27,119
and the rituals like i was talking about

943
00:45:27,119 --> 00:45:28,400
and you are when you are adding

944
00:45:28,400 --> 00:45:30,240
practices uh ensure that they are

945
00:45:30,240 --> 00:45:32,640
effective and they're driving a behavior

946
00:45:32,640 --> 00:45:35,200
change so if you have an option of

947
00:45:35,200 --> 00:45:37,119
two processes or two different ways of

948
00:45:37,119 --> 00:45:39,280
doing something similar it's always good

949
00:45:39,280 --> 00:45:41,119
to bank on the one that will drive the

950
00:45:41,119 --> 00:45:44,560
behavior change in the long run

951
00:45:44,720 --> 00:45:47,440
and lastly communicate the why i think

952
00:45:47,440 --> 00:45:48,640
this is something that i cannot

953
00:45:48,640 --> 00:45:50,880
emphasize enough uh i

954
00:45:50,880 --> 00:45:53,440
realized this only when we you know

955
00:45:53,440 --> 00:45:55,280
started addressing this issue at scale

956
00:45:55,280 --> 00:45:56,560
and then we started working with

957
00:45:56,560 --> 00:45:58,400
hundreds of spectrums

958
00:45:58,400 --> 00:46:01,599
the initial part of clearing the why

959
00:46:01,599 --> 00:46:04,160
becomes or helps you way

960
00:46:04,160 --> 00:46:06,400
longer in the program or until much

961
00:46:06,400 --> 00:46:07,920
later you know so

962
00:46:07,920 --> 00:46:10,079
for us this is an ongoing program and

963
00:46:10,079 --> 00:46:12,480
once this why part is clear for all of

964
00:46:12,480 --> 00:46:14,400
them and all the stakeholders

965
00:46:14,400 --> 00:46:15,920
there are much lesser questions and

966
00:46:15,920 --> 00:46:18,480
there are way more solutions so the

967
00:46:18,480 --> 00:46:20,560
overall attitude of

968
00:46:20,560 --> 00:46:22,800
uh your target audience will definitely

969
00:46:22,800 --> 00:46:24,720
improve and become way more positive if

970
00:46:24,720 --> 00:46:28,079
you have clarified the why for them

971
00:46:28,079 --> 00:46:30,000
so some of the results from what we had

972
00:46:30,000 --> 00:46:32,640
done earlier um for this

973
00:46:32,640 --> 00:46:34,480
we started with a pilot a bunch of teams

974
00:46:34,480 --> 00:46:36,560
and then we started doubling up on how

975
00:46:36,560 --> 00:46:40,240
many teams we wanted to roll this out to

976
00:46:40,240 --> 00:46:42,960
um some of the the early wins for us

977
00:46:42,960 --> 00:46:45,040
where uh essentially discovering

978
00:46:45,040 --> 00:46:47,440
hundreds of threats we soon started

979
00:46:47,440 --> 00:46:49,040
discovering hundreds of threats

980
00:46:49,040 --> 00:46:51,119
alongside the sec champs and the

981
00:46:51,119 --> 00:46:53,359
development teams and also fixing the

982
00:46:53,359 --> 00:46:55,760
high critical issues from there

983
00:46:55,760 --> 00:46:57,359
sec champs soon became the point of

984
00:46:57,359 --> 00:46:59,200
contact for security and everybody

985
00:46:59,200 --> 00:47:00,880
started reaching out to them internally

986
00:47:00,880 --> 00:47:03,280
and externally for anything to do with

987
00:47:03,280 --> 00:47:05,680
security so now everybody become way

988
00:47:05,680 --> 00:47:07,520
more proactive

989
00:47:07,520 --> 00:47:09,520
and one of the things that

990
00:47:09,520 --> 00:47:11,359
definitely changed for us which was not

991
00:47:11,359 --> 00:47:13,280
the goal of the program but was quite

992
00:47:13,280 --> 00:47:15,280
interesting is that the entire push

993
00:47:15,280 --> 00:47:17,520
model that security generally struggles

994
00:47:17,520 --> 00:47:20,559
with became a full model so initially we

995
00:47:20,559 --> 00:47:22,240
would reach out to teams for them to

996
00:47:22,240 --> 00:47:23,520
enroll for

997
00:47:23,520 --> 00:47:25,280
the sec jam program

998
00:47:25,280 --> 00:47:27,920
and as of today all the new teams that

999
00:47:27,920 --> 00:47:29,920
are coming up they reach out to us

1000
00:47:29,920 --> 00:47:31,520
directly to enroll for the program

1001
00:47:31,520 --> 00:47:32,559
themselves

1002
00:47:32,559 --> 00:47:34,559
uh or even for that matter for doing a

1003
00:47:34,559 --> 00:47:37,599
threat modeling so they would loop us in

1004
00:47:37,599 --> 00:47:38,880
when they are doing a threat modeling or

1005
00:47:38,880 --> 00:47:40,319
let us know that how many issues they

1006
00:47:40,319 --> 00:47:43,599
have and uh what are they prioritizing

1007
00:47:43,599 --> 00:47:45,920
so that makes the job of if you have

1008
00:47:45,920 --> 00:47:48,559
been a security team uh that makes your

1009
00:47:48,559 --> 00:47:51,119
job much much easier than working in a

1010
00:47:51,119 --> 00:47:53,599
push module

1011
00:47:53,599 --> 00:47:56,720
so in an ideal setup how the people will

1012
00:47:56,720 --> 00:47:58,559
play a role in the development would be

1013
00:47:58,559 --> 00:48:00,960
something like this where you are going

1014
00:48:00,960 --> 00:48:02,000
to

1015
00:48:02,000 --> 00:48:03,520
ensure that the development teams are

1016
00:48:03,520 --> 00:48:04,880
going through their role specific

1017
00:48:04,880 --> 00:48:07,040
awareness but also the tech stack

1018
00:48:07,040 --> 00:48:09,440
specific trainings you know because

1019
00:48:09,440 --> 00:48:10,720
before you start development you

1020
00:48:10,720 --> 00:48:12,000
generally know what is the kind of tech

1021
00:48:12,000 --> 00:48:14,640
stack that you are going to work with

1022
00:48:14,640 --> 00:48:16,640
when you are in the design phase

1023
00:48:16,640 --> 00:48:18,400
leverage threat modeling

1024
00:48:18,400 --> 00:48:21,520
to identify threads early on but not in

1025
00:48:21,520 --> 00:48:24,720
silos or not only with a security expert

1026
00:48:24,720 --> 00:48:26,480
but the entire team should be involved

1027
00:48:26,480 --> 00:48:28,640
along with your sec champs if you have

1028
00:48:28,640 --> 00:48:29,920
any

1029
00:48:29,920 --> 00:48:31,599
once you have your security backlog

1030
00:48:31,599 --> 00:48:34,079
created ensure that all of these

1031
00:48:34,079 --> 00:48:36,880
security acceptance criteria or stories

1032
00:48:36,880 --> 00:48:39,119
or features that you may have discussed

1033
00:48:39,119 --> 00:48:42,000
are moving to the project dashboard and

1034
00:48:42,000 --> 00:48:45,040
you allocate the developer a deaf pair

1035
00:48:45,040 --> 00:48:46,800
or a bandwidth for that

1036
00:48:46,800 --> 00:48:48,559
to address that issue

1037
00:48:48,559 --> 00:48:50,720
uh once you start development definitely

1038
00:48:50,720 --> 00:48:53,200
leverage automation um for every

1039
00:48:53,200 --> 00:48:55,440
everything including sas or dust or you

1040
00:48:55,440 --> 00:48:56,800
know your container scanning and things

1041
00:48:56,800 --> 00:48:59,599
like that but towards the end of it uh

1042
00:48:59,599 --> 00:49:02,160
take time to have sort of a retro like

1043
00:49:02,160 --> 00:49:04,720
reflect upon or inspect upon what are

1044
00:49:04,720 --> 00:49:07,440
the issues that you got from

1045
00:49:07,440 --> 00:49:09,760
the threat modeling that you did or from

1046
00:49:09,760 --> 00:49:11,839
the automated runs or even for example

1047
00:49:11,839 --> 00:49:13,280
if you are doing an external vendor

1048
00:49:13,280 --> 00:49:15,119
assessment what are the kind of issues

1049
00:49:15,119 --> 00:49:16,960
you are getting how many of those are

1050
00:49:16,960 --> 00:49:18,800
really recurring which can be coded

1051
00:49:18,800 --> 00:49:20,960
right or can be coded into security unit

1052
00:49:20,960 --> 00:49:23,040
tests for example or can be addressed

1053
00:49:23,040 --> 00:49:25,040
through design or through acceptance

1054
00:49:25,040 --> 00:49:28,800
criteria in your future stories

1055
00:49:28,800 --> 00:49:30,720
so for a mature security team it will

1056
00:49:30,720 --> 00:49:33,680
mostly look like this where they are

1057
00:49:33,680 --> 00:49:35,440
it's much easier for them to get into

1058
00:49:35,440 --> 00:49:37,680
security huddles like huddles in the

1059
00:49:37,680 --> 00:49:39,280
sense you can just pick up a feature and

1060
00:49:39,280 --> 00:49:41,359
start looking at doing a quick threat

1061
00:49:41,359 --> 00:49:42,880
modeling or or

1062
00:49:42,880 --> 00:49:45,040
checking the workflow for security

1063
00:49:45,040 --> 00:49:46,000
threats

1064
00:49:46,000 --> 00:49:47,520
iterative threat modeling become a

1065
00:49:47,520 --> 00:49:49,119
common thing

1066
00:49:49,119 --> 00:49:50,800
when you're defining the acceptance

1067
00:49:50,800 --> 00:49:52,960
criteria for your stories it should show

1068
00:49:52,960 --> 00:49:54,640
the security validations essentially

1069
00:49:54,640 --> 00:49:56,720
should be showing in those those stories

1070
00:49:56,720 --> 00:49:59,200
as well which can be tested later by a

1071
00:49:59,200 --> 00:50:00,640
qa

1072
00:50:00,640 --> 00:50:02,880
um of course leverage automation as much

1073
00:50:02,880 --> 00:50:04,000
as possible

1074
00:50:04,000 --> 00:50:04,800
and

1075
00:50:04,800 --> 00:50:08,640
add security to the definition of done

1076
00:50:08,640 --> 00:50:11,040
so a story is essentially not done until

1077
00:50:11,040 --> 00:50:13,680
its security done

1078
00:50:13,680 --> 00:50:15,520
finally

1079
00:50:15,520 --> 00:50:17,760
focus on the process and pipeline to

1080
00:50:17,760 --> 00:50:20,160
ensure that you can gain velocity and

1081
00:50:20,160 --> 00:50:21,920
ensure coverage when you are trying your

1082
00:50:21,920 --> 00:50:24,079
change program

1083
00:50:24,079 --> 00:50:26,319
understand that the ecosystem should be

1084
00:50:26,319 --> 00:50:28,400
secured by design rather than the

1085
00:50:28,400 --> 00:50:30,880
individual components in your supply

1086
00:50:30,880 --> 00:50:32,480
chain

1087
00:50:32,480 --> 00:50:35,680
and lastly leverage culture to add

1088
00:50:35,680 --> 00:50:39,920
security to your organizational fabric

1089
00:50:39,920 --> 00:50:40,960
so

1090
00:50:40,960 --> 00:50:42,400
there'll be many things that you might

1091
00:50:42,400 --> 00:50:44,559
do or to you know bring in smaller

1092
00:50:44,559 --> 00:50:46,880
changes add controls in place

1093
00:50:46,880 --> 00:50:49,200
um have automation in place from time to

1094
00:50:49,200 --> 00:50:50,000
time

1095
00:50:50,000 --> 00:50:53,040
but if we are driving the mindset change

1096
00:50:53,040 --> 00:50:56,000
it's better to play the long game

1097
00:50:56,000 --> 00:50:58,319
thank you

1098
00:51:04,720 --> 00:51:06,640
that was excellent nilu and a round of

1099
00:51:06,640 --> 00:51:09,280
applause for uh dealing with all the the

1100
00:51:09,280 --> 00:51:11,760
technical issues too there

1101
00:51:11,760 --> 00:51:14,079
you handled it very smoothly so

1102
00:51:14,079 --> 00:51:18,400
i know how to do it live yes

1103
00:51:18,800 --> 00:51:20,800
i know how jarring that can be and you

1104
00:51:20,800 --> 00:51:22,800
you handle it so professionally needle

1105
00:51:22,800 --> 00:51:24,559
so well done on that and uh thank you

1106
00:51:24,559 --> 00:51:26,960
for that excellent session so i think do

1107
00:51:26,960 --> 00:51:28,800
we yeah if you have a few more minutes

1108
00:51:28,800 --> 00:51:30,000
here we have a couple questions for you

1109
00:51:30,000 --> 00:51:32,559
if you don't mind that sound good

1110
00:51:32,559 --> 00:51:33,359
sure

1111
00:51:33,359 --> 00:51:35,359
okay great all right so first question

1112
00:51:35,359 --> 00:51:37,359
that came up was i believe it was

1113
00:51:37,359 --> 00:51:39,839
kavitha over in hopkins thank you kavisa

1114
00:51:39,839 --> 00:51:41,040
for the question

1115
00:51:41,040 --> 00:51:42,720
and uh

1116
00:51:42,720 --> 00:51:44,960
their question was what tools were used

1117
00:51:44,960 --> 00:51:46,960
in the process journey are there any in

1118
00:51:46,960 --> 00:51:48,319
particular that you could call out and

1119
00:51:48,319 --> 00:51:50,400
share with folks that enabled some of

1120
00:51:50,400 --> 00:51:51,760
what you learned and shared through this

1121
00:51:51,760 --> 00:51:54,000
process

1122
00:51:54,000 --> 00:51:56,559
so for us when we were driving the sec

1123
00:51:56,559 --> 00:51:58,319
champ program particularly so we have

1124
00:51:58,319 --> 00:52:00,720
other automation specific programs where

1125
00:52:00,720 --> 00:52:02,400
we have tools which we recommend you

1126
00:52:02,400 --> 00:52:04,400
know for adding controls because this

1127
00:52:04,400 --> 00:52:06,480
was mostly a people focus program and we

1128
00:52:06,480 --> 00:52:08,319
were looking at agile threat modelings

1129
00:52:08,319 --> 00:52:11,040
uh that is a framework that we have

1130
00:52:11,040 --> 00:52:13,040
sort of created in within thought books

1131
00:52:13,040 --> 00:52:14,880
and that's what we used

1132
00:52:14,880 --> 00:52:16,559
particularly for agile threat modeling

1133
00:52:16,559 --> 00:52:19,200
it's based on top of microsoft stride

1134
00:52:19,200 --> 00:52:21,119
model itself but a faster and much

1135
00:52:21,119 --> 00:52:23,520
quicker way of doing it we did not use

1136
00:52:23,520 --> 00:52:25,680
um specifically any tools there are

1137
00:52:25,680 --> 00:52:27,680
tools for threat modeling as well

1138
00:52:27,680 --> 00:52:29,920
but given that our organization is more

1139
00:52:29,920 --> 00:52:31,599
like a service-based organization there

1140
00:52:31,599 --> 00:52:33,760
are you know multiple clients and

1141
00:52:33,760 --> 00:52:35,680
different tech stacks different

1142
00:52:35,680 --> 00:52:36,960
compliance requirements you know the

1143
00:52:36,960 --> 00:52:38,800
context is entirely different for all

1144
00:52:38,800 --> 00:52:39,920
the clients

1145
00:52:39,920 --> 00:52:40,800
so

1146
00:52:40,800 --> 00:52:44,880
we kept it simple and we kept it agile

1147
00:52:44,880 --> 00:52:46,319
excellent excellent

1148
00:52:46,319 --> 00:52:47,520
um

1149
00:52:47,520 --> 00:52:48,880
the one thing that hit home for me and

1150
00:52:48,880 --> 00:52:49,839
we have a couple more questions but

1151
00:52:49,839 --> 00:52:51,040
really quick one thing that hit home for

1152
00:52:51,040 --> 00:52:52,319
me was when you

1153
00:52:52,319 --> 00:52:54,240
uh talked about security as part of your

1154
00:52:54,240 --> 00:52:56,160
definition of done

1155
00:52:56,160 --> 00:52:58,160
you like it really brought me back into

1156
00:52:58,160 --> 00:53:00,000
recalling some of my earlier developer

1157
00:53:00,000 --> 00:53:01,839
days where we as a team were defining

1158
00:53:01,839 --> 00:53:03,680
this definition of done and we didn't

1159
00:53:03,680 --> 00:53:05,520
have security included in there honestly

1160
00:53:05,520 --> 00:53:06,960
speaking but we had things like testing

1161
00:53:06,960 --> 00:53:10,160
and like what like deploying it in a

1162
00:53:10,160 --> 00:53:11,520
staging environment to make sure it

1163
00:53:11,520 --> 00:53:14,559
works there and so this that like thank

1164
00:53:14,559 --> 00:53:16,319
you for sharing that part in there and

1165
00:53:16,319 --> 00:53:17,760
like i'm thinking back like how did we

1166
00:53:17,760 --> 00:53:19,760
not think about okay how do we include

1167
00:53:19,760 --> 00:53:22,720
security in that definition of done too

1168
00:53:22,720 --> 00:53:25,119
so uh that's it's just awesome to see

1169
00:53:25,119 --> 00:53:26,880
and i think this can be super helpful to

1170
00:53:26,880 --> 00:53:29,520
older me as well um and folks that were

1171
00:53:29,520 --> 00:53:31,040
there so one more question i think we'll

1172
00:53:31,040 --> 00:53:34,079
take real quick and that is um

1173
00:53:34,079 --> 00:53:35,920
were there separate

1174
00:53:35,920 --> 00:53:38,240
were separate projects created for cloud

1175
00:53:38,240 --> 00:53:39,760
and on-premise applications throughout

1176
00:53:39,760 --> 00:53:42,480
this

1177
00:53:42,480 --> 00:53:43,920
um

1178
00:53:43,920 --> 00:53:46,400
we were so we were essentially working

1179
00:53:46,400 --> 00:53:48,880
on a security change program

1180
00:53:48,880 --> 00:53:51,520
and we were not delivering any projects

1181
00:53:51,520 --> 00:53:54,079
however we were dealing with uh if i

1182
00:53:54,079 --> 00:53:55,520
understand your

1183
00:53:55,520 --> 00:53:57,440
question correctly correct me if i'm

1184
00:53:57,440 --> 00:53:59,119
wrong we were dealing with various

1185
00:53:59,119 --> 00:54:01,200
projects some of them were on cloud some

1186
00:54:01,200 --> 00:54:02,880
some of them were on-prem

1187
00:54:02,880 --> 00:54:04,160
and uh

1188
00:54:04,160 --> 00:54:05,839
in fact some of them were also purely

1189
00:54:05,839 --> 00:54:08,000
infrastructure projects right so the

1190
00:54:08,000 --> 00:54:09,680
agile threat modeling one for example

1191
00:54:09,680 --> 00:54:11,520
for us it was threat modeling we were

1192
00:54:11,520 --> 00:54:14,240
working on we when we talked to about

1193
00:54:14,240 --> 00:54:15,680
threat modeling it would be different

1194
00:54:15,680 --> 00:54:18,079
for for example specifically for

1195
00:54:18,079 --> 00:54:20,160
applications or just web applications or

1196
00:54:20,160 --> 00:54:22,079
mobile applications right because you

1197
00:54:22,079 --> 00:54:23,440
look at different issues which are

1198
00:54:23,440 --> 00:54:26,400
commonly found in mobile rather than web

1199
00:54:26,400 --> 00:54:28,000
so web would be different mobile would

1200
00:54:28,000 --> 00:54:29,359
be different infrastructure will be

1201
00:54:29,359 --> 00:54:30,400
different because then you might

1202
00:54:30,400 --> 00:54:31,920
actually do an infrastructure threat

1203
00:54:31,920 --> 00:54:33,040
modeling

1204
00:54:33,040 --> 00:54:34,720
and also architecture review from that

1205
00:54:34,720 --> 00:54:36,480
perspective so

1206
00:54:36,480 --> 00:54:38,559
this context was different for us and

1207
00:54:38,559 --> 00:54:40,319
with cloud we would definitely have or

1208
00:54:40,319 --> 00:54:43,040
look into different scenarios for cloud

1209
00:54:43,040 --> 00:54:44,880
so that was the degree of difference

1210
00:54:44,880 --> 00:54:47,440
that we were following um within that

1211
00:54:47,440 --> 00:54:49,040
also there were many uh you know

1212
00:54:49,040 --> 00:54:50,960
subdivisions but we didn't go that far

1213
00:54:50,960 --> 00:54:52,480
we wanted to keep it simple so that

1214
00:54:52,480 --> 00:54:54,400
everybody could pick up and understand

1215
00:54:54,400 --> 00:54:56,480
for example if you are looking at mobile

1216
00:54:56,480 --> 00:54:57,599
then

1217
00:54:57,599 --> 00:54:59,440
you should go for also mobile top 10

1218
00:54:59,440 --> 00:55:01,200
issues rather than just blindly looking

1219
00:55:01,200 --> 00:55:03,200
at the web top 10 you know so just

1220
00:55:03,200 --> 00:55:05,440
giving an example from obvious

1221
00:55:05,440 --> 00:55:07,520
there are very contextual issues to look

1222
00:55:07,520 --> 00:55:09,440
at and that's what we are focusing on uh

1223
00:55:09,440 --> 00:55:11,119
during our model

1224
00:55:11,119 --> 00:55:12,799
gotcha that makes a lot of sense and

1225
00:55:12,799 --> 00:55:14,160
thank everybody that was posting some of

1226
00:55:14,160 --> 00:55:15,599
the questions in there

1227
00:55:15,599 --> 00:55:17,440
uh eric do we have any more questions

1228
00:55:17,440 --> 00:55:20,240
maybe that are coming to mind for you or

1229
00:55:20,240 --> 00:55:23,680
um yeah well simon asked one i was

1230
00:55:23,680 --> 00:55:27,200
should i find it in our list

1231
00:55:27,520 --> 00:55:29,280
i'm just going to ask it from the chat

1232
00:55:29,280 --> 00:55:32,319
it says uh when you say iterative threat

1233
00:55:32,319 --> 00:55:34,240
modeling what triggers an update to the

1234
00:55:34,240 --> 00:55:36,640
threat model that was created before

1235
00:55:36,640 --> 00:55:39,200
would bug fixes or minor improvements

1236
00:55:39,200 --> 00:55:41,520
counts

1237
00:55:41,520 --> 00:55:44,880
yeah that's a good question so when when

1238
00:55:44,880 --> 00:55:47,040
we say i did a threat modeling it is to

1239
00:55:47,040 --> 00:55:48,480
pick up a bunch of features right so

1240
00:55:48,480 --> 00:55:50,799
when you start developing uh

1241
00:55:50,799 --> 00:55:52,240
your services

1242
00:55:52,240 --> 00:55:54,000
you would have certain features being

1243
00:55:54,000 --> 00:55:56,880
added uh with every release generally it

1244
00:55:56,880 --> 00:55:58,720
will not all happen at one go like it

1245
00:55:58,720 --> 00:56:01,040
happens in waterfall so when you have a

1246
00:56:01,040 --> 00:56:03,280
bunch of features which are being added

1247
00:56:03,280 --> 00:56:05,520
uh with with in every iteration or you

1248
00:56:05,520 --> 00:56:06,880
know every couple of titration you will

1249
00:56:06,880 --> 00:56:08,880
have a bunch of new features coming up

1250
00:56:08,880 --> 00:56:11,119
we would pick up a bunch of features and

1251
00:56:11,119 --> 00:56:13,119
then start white boarding and threat

1252
00:56:13,119 --> 00:56:15,280
modeling around it and that is what we

1253
00:56:15,280 --> 00:56:17,200
call iterative because it would be you

1254
00:56:17,200 --> 00:56:18,720
know every one or two iterations we

1255
00:56:18,720 --> 00:56:20,319
would have a threat modeling because we

1256
00:56:20,319 --> 00:56:22,319
would have new set of features that we

1257
00:56:22,319 --> 00:56:24,960
would threat model on

1258
00:56:24,960 --> 00:56:26,079
that's great

1259
00:56:26,079 --> 00:56:28,480
great way to keep things fresh um as the

1260
00:56:28,480 --> 00:56:30,400
as the application changes

1261
00:56:30,400 --> 00:56:31,920
you know one of the things that actually

1262
00:56:31,920 --> 00:56:33,280
i i'm going to steal this i'm going to

1263
00:56:33,280 --> 00:56:35,280
quote you on this one i loved when you

1264
00:56:35,280 --> 00:56:36,640
said

1265
00:56:36,640 --> 00:56:38,160
you need to

1266
00:56:38,160 --> 00:56:40,079
hopefully i won't butcher this to make

1267
00:56:40,079 --> 00:56:42,000
the functionality secure you need to

1268
00:56:42,000 --> 00:56:45,040
make secure security functional that is

1269
00:56:45,040 --> 00:56:47,119
like a genius quote i love that thank

1270
00:56:47,119 --> 00:56:49,599
you so much

1271
00:56:49,599 --> 00:56:51,119
yeah you realize so much of that once

1272
00:56:51,119 --> 00:56:53,440
you are on the agile side of things that

1273
00:56:53,440 --> 00:56:54,319
you know

1274
00:56:54,319 --> 00:56:56,240
but just to add to the previous answer i

1275
00:56:56,240 --> 00:56:57,040
think

1276
00:56:57,040 --> 00:56:58,799
just to clarify it further if you have

1277
00:56:58,799 --> 00:57:00,640
already done a threat modeling for your

1278
00:57:00,640 --> 00:57:02,480
entire application or your entire

1279
00:57:02,480 --> 00:57:04,480
service for example

1280
00:57:04,480 --> 00:57:06,000
and you are then making a change whether

1281
00:57:06,000 --> 00:57:08,960
it's a bug fix or your it's an update uh

1282
00:57:08,960 --> 00:57:10,480
you will have to look at functionally

1283
00:57:10,480 --> 00:57:12,559
what you have really added sometimes

1284
00:57:12,559 --> 00:57:14,960
minor enhancements should not we should

1285
00:57:14,960 --> 00:57:16,880
not go to that depth because then that

1286
00:57:16,880 --> 00:57:19,280
will that makes it too much

1287
00:57:19,280 --> 00:57:21,280
to a micro level and you may not end up

1288
00:57:21,280 --> 00:57:23,440
getting too many threads so when you're

1289
00:57:23,440 --> 00:57:24,960
looking at the roi because you're also

1290
00:57:24,960 --> 00:57:26,640
counting time of how many times you're

1291
00:57:26,640 --> 00:57:28,559
getting into a threat modeling it's good

1292
00:57:28,559 --> 00:57:30,720
to see what is if it's a major change

1293
00:57:30,720 --> 00:57:32,160
that you have done a major update that

1294
00:57:32,160 --> 00:57:34,240
you have done if you have something

1295
00:57:34,240 --> 00:57:35,920
majorly functional that has been added

1296
00:57:35,920 --> 00:57:38,000
or changed to you know go about doing

1297
00:57:38,000 --> 00:57:41,839
another threat modeling for that change

1298
00:57:42,240 --> 00:57:43,599
very cool

1299
00:57:43,599 --> 00:57:46,559
excellent well thank you nilu so much

1300
00:57:46,559 --> 00:57:49,359
this was super insightful and uh you did

1301
00:57:49,359 --> 00:57:51,680
an amazing job appreciate you helping us

1302
00:57:51,680 --> 00:57:53,520
kick off the america's region for

1303
00:57:53,520 --> 00:57:55,599
devsecond and we'll hope to see you

1304
00:57:55,599 --> 00:57:56,960
again soon we'll see you in the in the

1305
00:57:56,960 --> 00:58:01,359
chat maybe on over on hoppin and youtube

1306
00:58:01,359 --> 00:58:03,680
thank you thanks brian thanks eddie

1307
00:58:03,680 --> 00:58:05,440
thank you

1308
00:58:05,440 --> 00:58:07,599
all right folks let's jump right into

1309
00:58:07,599 --> 00:58:09,760
our next session what do we got in store

1310
00:58:09,760 --> 00:58:12,640
for everybody next eric you know next

1311
00:58:12,640 --> 00:58:16,319
session is on ci fuzzing with uh

1312
00:58:16,319 --> 00:58:17,760
jonathan metzman

1313
00:58:17,760 --> 00:58:20,240
and um this is actually very timely i

1314
00:58:20,240 --> 00:58:21,839
was just watching when i was at kubecon

1315
00:58:21,839 --> 00:58:24,400
i was looking at fuzzing testing

1316
00:58:24,400 --> 00:58:26,079
automation and things like that so i'm

1317
00:58:26,079 --> 00:58:28,319
very curious to see jonathan's take on

1318
00:58:28,319 --> 00:58:29,280
this

1319
00:58:29,280 --> 00:58:31,040
so fuzzing is like well let's get

1320
00:58:31,040 --> 00:58:33,520
jonathan in here i gotta know

1321
00:58:33,520 --> 00:58:35,440
hey jonathan good to see you yeah good

1322
00:58:35,440 --> 00:58:37,599
to be here uh i'll go over what uh

1323
00:58:37,599 --> 00:58:39,839
fuzzing is so uh don't worry okay

1324
00:58:39,839 --> 00:58:41,040
because i'm thinking like stuffed

1325
00:58:41,040 --> 00:58:43,200
animals they're fuzzy i don't know i'm

1326
00:58:43,200 --> 00:58:44,880
i'm still it's a lot it's a lot to do

1327
00:58:44,880 --> 00:58:46,720
with it yeah oh really okay good i'm on

1328
00:58:46,720 --> 00:58:48,640
the right track well without further ado

1329
00:58:48,640 --> 00:58:50,400
i'll let you take it away and thank you

1330
00:58:50,400 --> 00:58:52,000
for joining us

1331
00:58:52,000 --> 00:58:54,720
yeah um

1332
00:58:54,880 --> 00:58:57,599
so uh you know as i was introduced my

1333
00:58:57,599 --> 00:59:00,480
name is jonathan um and you know today i

1334
00:59:00,480 --> 00:59:02,880
want to talk to you all about uh ci

1335
00:59:02,880 --> 00:59:05,040
fuzzing from first principles meaning i

1336
00:59:05,040 --> 00:59:06,160
want to go through sort of like the

1337
00:59:06,160 --> 00:59:08,480
history of fuzzing and how it went from

1338
00:59:08,480 --> 00:59:09,280
like

1339
00:59:09,280 --> 00:59:11,200
uh a tool for

1340
00:59:11,200 --> 00:59:13,040
shadowy hackers into something that's

1341
00:59:13,040 --> 00:59:15,280
just you know useful in any developers

1342
00:59:15,280 --> 00:59:16,640
like toolkit

1343
00:59:16,640 --> 00:59:17,440
um

1344
00:59:17,440 --> 00:59:18,559
just a quick

1345
00:59:18,559 --> 00:59:20,000
background on me

1346
00:59:20,000 --> 00:59:21,680
uh i've been at google working on

1347
00:59:21,680 --> 00:59:24,880
fuzzing for five years almost um first

1348
00:59:24,880 --> 00:59:26,960
on chrome's security team and then on

1349
00:59:26,960 --> 00:59:29,200
google's open source security team uh

1350
00:59:29,200 --> 00:59:30,799
today though i'm just only like

1351
00:59:30,799 --> 00:59:34,240
representing myself not my company

1352
00:59:34,240 --> 00:59:38,079
so uh some background on what fuzzing is

1353
00:59:38,079 --> 00:59:42,240
so uh fuzzing is a process uh automated

1354
00:59:42,240 --> 00:59:44,960
process where you take randomized inputs

1355
00:59:44,960 --> 00:59:47,119
and feed them to a program in order to

1356
00:59:47,119 --> 00:59:49,119
find bugs in that program

1357
00:59:49,119 --> 00:59:51,680
and typically these bugs are crashes

1358
00:59:51,680 --> 00:59:53,599
just because uh

1359
00:59:53,599 --> 00:59:54,960
you know

1360
00:59:54,960 --> 00:59:56,640
crashes are just like the easiest way to

1361
00:59:56,640 --> 00:59:58,000
tell that there's something went wrong

1362
00:59:58,000 --> 00:59:59,440
in a program it's not application

1363
00:59:59,440 --> 01:00:00,640
specific

1364
01:00:00,640 --> 01:00:02,880
and crashes are also pretty interesting

1365
01:00:02,880 --> 01:00:05,200
um from a security perspective when

1366
01:00:05,200 --> 01:00:08,160
dealing with uh cnc plus plus programs

1367
01:00:08,160 --> 01:00:08,880
so

1368
01:00:08,880 --> 01:00:11,680
in addition to uh possibly being denial

1369
01:00:11,680 --> 01:00:14,079
of service issues uh crashes could mean

1370
01:00:14,079 --> 01:00:15,920
that there's like sort of uh memory

1371
01:00:15,920 --> 01:00:17,200
corruption going on like you know if

1372
01:00:17,200 --> 01:00:20,079
there's a seg fault perhaps maybe like

1373
01:00:20,079 --> 01:00:22,000
you know a more skilled attacker could

1374
01:00:22,000 --> 01:00:24,000
use it to gain control of the program

1375
01:00:24,000 --> 01:00:25,280
counter so

1376
01:00:25,280 --> 01:00:26,400
um

1377
01:00:26,400 --> 01:00:28,079
fuzzing has really been thought of as

1378
01:00:28,079 --> 01:00:30,400
like a security technique although it's

1379
01:00:30,400 --> 01:00:32,000
also good for finding you know sort of

1380
01:00:32,000 --> 01:00:34,000
other like stability bugs

1381
01:00:34,000 --> 01:00:35,440
um

1382
01:00:35,440 --> 01:00:36,640
now

1383
01:00:36,640 --> 01:00:38,960
it basically works by uh

1384
01:00:38,960 --> 01:00:42,000
similar to how this like uh

1385
01:00:42,000 --> 01:00:44,079
snippet i have on the slide illustrates

1386
01:00:44,079 --> 01:00:46,160
it you just basically in an infinite

1387
01:00:46,160 --> 01:00:50,240
loop uh create a new input and pass that

1388
01:00:50,240 --> 01:00:51,760
input to the code that you want to test

1389
01:00:51,760 --> 01:00:55,799
and just watch for crashes

1390
01:00:56,160 --> 01:00:57,200
now

1391
01:00:57,200 --> 01:00:59,680
fuzzing um if you were to like

1392
01:00:59,680 --> 01:01:01,839
have a just like a generic mutator that

1393
01:01:01,839 --> 01:01:03,920
just flipped random bits and you were

1394
01:01:03,920 --> 01:01:06,240
fuzzing something like a pdf reader you

1395
01:01:06,240 --> 01:01:08,160
probably wouldn't get very far into the

1396
01:01:08,160 --> 01:01:10,319
pdf reader just because you know it'll

1397
01:01:10,319 --> 01:01:12,400
reject a lot of your inputs as invalid

1398
01:01:12,400 --> 01:01:13,200
so

1399
01:01:13,200 --> 01:01:16,160
typically uh at this stage uh in fuzzing

1400
01:01:16,160 --> 01:01:19,280
people would write format aware fuzzers

1401
01:01:19,280 --> 01:01:20,559
that

1402
01:01:20,559 --> 01:01:22,079
that you know just are basically right

1403
01:01:22,079 --> 01:01:24,000
they're aware of the format that they're

1404
01:01:24,000 --> 01:01:25,359
uh targeting

1405
01:01:25,359 --> 01:01:27,760
and so um like if we were fuzzing like a

1406
01:01:27,760 --> 01:01:31,040
pdf reader you know my pdf mutator would

1407
01:01:31,040 --> 01:01:33,520
know about uh pdf files and you know it

1408
01:01:33,520 --> 01:01:36,400
could do things like add pages uh

1409
01:01:36,400 --> 01:01:38,799
you know remove images add forms stuff

1410
01:01:38,799 --> 01:01:40,720
like that rather than just like you know

1411
01:01:40,720 --> 01:01:42,720
more like primitive uh operations like

1412
01:01:42,720 --> 01:01:44,240
bit flips

1413
01:01:44,240 --> 01:01:45,839
but this is obviously like a huge pain

1414
01:01:45,839 --> 01:01:48,079
to do um you know like in order to do

1415
01:01:48,079 --> 01:01:49,200
that you probably have to read like the

1416
01:01:49,200 --> 01:01:52,000
pdf spec which uh as someone who's done

1417
01:01:52,000 --> 01:01:53,920
that i could tell you is not very fun

1418
01:01:53,920 --> 01:01:55,440
and you know like we just want to find

1419
01:01:55,440 --> 01:01:56,640
bugs like we don't want to spend our

1420
01:01:56,640 --> 01:01:58,160
time doing this so

1421
01:01:58,160 --> 01:02:00,240
uh at this point really fuzzing was just

1422
01:02:00,240 --> 01:02:01,839
like a technique used by highly

1423
01:02:01,839 --> 01:02:04,000
motivated uh individuals which really

1424
01:02:04,000 --> 01:02:07,119
just means like attackers

1425
01:02:08,880 --> 01:02:09,599
so

1426
01:02:09,599 --> 01:02:11,440
around eight years ago though there was

1427
01:02:11,440 --> 01:02:14,079
a big advance made in the fuzzing world

1428
01:02:14,079 --> 01:02:16,079
called coverage guided fuzzing

1429
01:02:16,079 --> 01:02:19,760
and this was pioneered by tools like afl

1430
01:02:19,760 --> 01:02:22,480
and lib fuzzer and really helped uh

1431
01:02:22,480 --> 01:02:24,799
shift fuzzing left and that you know it

1432
01:02:24,799 --> 01:02:27,280
could become a tool that's accessible to

1433
01:02:27,280 --> 01:02:29,599
ordinary developers who aren't maybe

1434
01:02:29,599 --> 01:02:31,119
highly motivated but are just like

1435
01:02:31,119 --> 01:02:33,440
somewhat motivated and so

1436
01:02:33,440 --> 01:02:36,079
uh these fuzzers are

1437
01:02:36,079 --> 01:02:38,720
uh have mutators that are generic

1438
01:02:38,720 --> 01:02:41,359
their mutators do things like the bit

1439
01:02:41,359 --> 01:02:43,280
flips and you know changing the values

1440
01:02:43,280 --> 01:02:45,119
of ascii integers

1441
01:02:45,119 --> 01:02:47,680
but the coverage guided magic is what

1442
01:02:47,680 --> 01:02:49,760
allows it to actually effectively fuzz

1443
01:02:49,760 --> 01:02:50,559
so

1444
01:02:50,559 --> 01:02:53,680
after each uh iteration or

1445
01:02:53,680 --> 01:02:55,760
execution on a test case provided by the

1446
01:02:55,760 --> 01:02:56,720
fuzzer

1447
01:02:56,720 --> 01:02:59,520
the fuzzer looks at what parts of the

1448
01:02:59,520 --> 01:03:02,799
targeted code were executed and if

1449
01:03:02,799 --> 01:03:05,839
anything new is executed it adds the

1450
01:03:05,839 --> 01:03:07,760
test case that it just created through

1451
01:03:07,760 --> 01:03:09,440
this list of test cases called like the

1452
01:03:09,440 --> 01:03:11,119
corpus and

1453
01:03:11,119 --> 01:03:13,599
it for further mutation and so you could

1454
01:03:13,599 --> 01:03:16,079
see how like after a couple rounds of

1455
01:03:16,079 --> 01:03:18,079
you know this we found some new behavior

1456
01:03:18,079 --> 01:03:20,160
then another new behavior then another

1457
01:03:20,160 --> 01:03:22,079
new behavior that we're getting deeper

1458
01:03:22,079 --> 01:03:24,640
and deeper into the program and so this

1459
01:03:24,640 --> 01:03:26,400
really like you know and with infinite

1460
01:03:26,400 --> 01:03:28,319
time like you'd cover the entire state

1461
01:03:28,319 --> 01:03:31,280
space of the program so um this really

1462
01:03:31,280 --> 01:03:33,680
made it easy to fuzz without having to

1463
01:03:33,680 --> 01:03:35,280
spend lots of time

1464
01:03:35,280 --> 01:03:37,760
you know writing like custom mutators or

1465
01:03:37,760 --> 01:03:40,400
generators

1466
01:03:42,400 --> 01:03:44,480
and another uh

1467
01:03:44,480 --> 01:03:46,559
development that really brought

1468
01:03:46,559 --> 01:03:48,559
fuzzing into like i'd say like almost

1469
01:03:48,559 --> 01:03:50,160
like the mainstream of just like

1470
01:03:50,160 --> 01:03:53,440
software development was uh the

1471
01:03:53,440 --> 01:03:55,520
birth of just sort of fuzzing

1472
01:03:55,520 --> 01:03:57,280
infrastructure so

1473
01:03:57,280 --> 01:03:59,039
i'm most familiar with cluster fuzz

1474
01:03:59,039 --> 01:04:01,200
because that's google's fuzzing

1475
01:04:01,200 --> 01:04:03,280
infrastructure which you know was made

1476
01:04:03,280 --> 01:04:05,359
around the same time as afl

1477
01:04:05,359 --> 01:04:06,960
and

1478
01:04:06,960 --> 01:04:10,319
what it does is it automates a lot of

1479
01:04:10,319 --> 01:04:12,000
the like sort of tedious work that you

1480
01:04:12,000 --> 01:04:14,319
would have to do around fuzzing um such

1481
01:04:14,319 --> 01:04:16,400
as like you know checking that your bugs

1482
01:04:16,400 --> 01:04:19,039
are unique because you know fuzzers do

1483
01:04:19,039 --> 01:04:20,319
like execute

1484
01:04:20,319 --> 01:04:22,640
uh thousands and thousands of test cases

1485
01:04:22,640 --> 01:04:24,160
and you'll probably get the same crash

1486
01:04:24,160 --> 01:04:25,440
many times and so you're going to want

1487
01:04:25,440 --> 01:04:28,079
to like you know root cause that and not

1488
01:04:28,079 --> 01:04:29,680
you know look into each of those

1489
01:04:29,680 --> 01:04:31,920
separately um you know crash

1490
01:04:31,920 --> 01:04:33,760
minimization just

1491
01:04:33,760 --> 01:04:35,039
you take my word for that there's like a

1492
01:04:35,039 --> 01:04:36,400
lot of tedious steps that you would have

1493
01:04:36,400 --> 01:04:38,559
to do as a developer fuzzing on your own

1494
01:04:38,559 --> 01:04:39,599
machine

1495
01:04:39,599 --> 01:04:40,880
and cluster buzz pretty much like

1496
01:04:40,880 --> 01:04:43,200
automated all of that so that you could

1497
01:04:43,200 --> 01:04:45,039
continuously fuzz and all you would need

1498
01:04:45,039 --> 01:04:47,440
to do is sort of write fuzzers and fix

1499
01:04:47,440 --> 01:04:50,000
bugs and the way it worked is uh you

1500
01:04:50,000 --> 01:04:51,039
have

1501
01:04:51,039 --> 01:04:52,559
automated builders that just

1502
01:04:52,559 --> 01:04:56,319
continuously produce builds um of uh

1503
01:04:56,319 --> 01:04:58,240
cluster bus was developed for chrome so

1504
01:04:58,240 --> 01:04:59,920
you know these builders are

1505
01:04:59,920 --> 01:05:02,559
built chrome and chrome fuzzers

1506
01:05:02,559 --> 01:05:03,839
and

1507
01:05:03,839 --> 01:05:06,240
it uploaded uh those builds

1508
01:05:06,240 --> 01:05:08,799
to uh google cloud storage where it was

1509
01:05:08,799 --> 01:05:10,960
then consumed by cluster fuzz and what i

1510
01:05:10,960 --> 01:05:12,720
mean by consumed is

1511
01:05:12,720 --> 01:05:15,200
cluster fuzz ran the fuzzers and with

1512
01:05:15,200 --> 01:05:17,440
any crashes it sort of triaged them

1513
01:05:17,440 --> 01:05:19,760
automatically filed bugs against

1514
01:05:19,760 --> 01:05:21,520
developers and then

1515
01:05:21,520 --> 01:05:23,200
every day would check that the bug was

1516
01:05:23,200 --> 01:05:25,119
fixed and if so it would close the bug

1517
01:05:25,119 --> 01:05:26,640
and so right like as you can see like

1518
01:05:26,640 --> 01:05:28,799
the only manual steps are these like

1519
01:05:28,799 --> 01:05:31,680
sort of writing fuzzers and fixing bugs

1520
01:05:31,680 --> 01:05:33,599
and this workflow like worked really

1521
01:05:33,599 --> 01:05:36,400
well on chrome and we extended it to

1522
01:05:36,400 --> 01:05:37,520
other parts

1523
01:05:37,520 --> 01:05:40,079
of google like chrome os uh android like

1524
01:05:40,079 --> 01:05:43,520
internal code um

1525
01:05:43,760 --> 01:05:46,720
and like it's very tailored towards uh

1526
01:05:46,720 --> 01:05:48,880
what we can do as google right so you

1527
01:05:48,880 --> 01:05:51,200
know we run cluster fuzz on hundreds of

1528
01:05:51,200 --> 01:05:53,680
thousands of cores uh we run you know

1529
01:05:53,680 --> 01:05:55,200
probably in like the thousands of

1530
01:05:55,200 --> 01:05:58,480
fuzzers and we found uh over like 50 000

1531
01:05:58,480 --> 01:06:00,079
bugs that we've reported with cluster

1532
01:06:00,079 --> 01:06:01,680
fuzz like over the years

1533
01:06:01,680 --> 01:06:02,799
um

1534
01:06:02,799 --> 01:06:05,359
and you know other big companies like um

1535
01:06:05,359 --> 01:06:07,760
you know microsoft uh has sort of has a

1536
01:06:07,760 --> 01:06:09,520
similar tool called like one fuzz which

1537
01:06:09,520 --> 01:06:10,799
is basically like their version of

1538
01:06:10,799 --> 01:06:13,039
cluster fuzz right so i think this model

1539
01:06:13,039 --> 01:06:14,720
works pretty well for

1540
01:06:14,720 --> 01:06:15,680
um

1541
01:06:15,680 --> 01:06:18,160
you know large comp basically like the t

1542
01:06:18,160 --> 01:06:20,400
the companies that have people um

1543
01:06:20,400 --> 01:06:22,079
developing these tools just because it's

1544
01:06:22,079 --> 01:06:24,000
just very tailored towards the needs of

1545
01:06:24,000 --> 01:06:26,480
the company um but

1546
01:06:26,480 --> 01:06:27,359
you know

1547
01:06:27,359 --> 01:06:30,240
if you're just an ordinary developer who

1548
01:06:30,240 --> 01:06:31,599
doesn't want to think too much about

1549
01:06:31,599 --> 01:06:33,440
fuzzing but wants some of the benefits

1550
01:06:33,440 --> 01:06:35,039
is this really sort of like what you

1551
01:06:35,039 --> 01:06:37,520
want or need um

1552
01:06:37,520 --> 01:06:39,280
you know are there costs to having such

1553
01:06:39,280 --> 01:06:44,000
like a fancy uh arc fancy infrastructure

1554
01:06:44,000 --> 01:06:46,160
and of course uh i wouldn't be here if

1555
01:06:46,160 --> 01:06:48,079
there weren't um

1556
01:06:48,079 --> 01:06:50,880
you know this fancy infrastructure uh is

1557
01:06:50,880 --> 01:06:53,599
difficult to set up uh it's pretty heavy

1558
01:06:53,599 --> 01:06:55,280
weight and so there's a lot of just sort

1559
01:06:55,280 --> 01:06:56,240
of like

1560
01:06:56,240 --> 01:06:57,920
uh different like

1561
01:06:57,920 --> 01:07:00,880
uh parts you have to set up um

1562
01:07:00,880 --> 01:07:02,400
they're not these infrastructures are

1563
01:07:02,400 --> 01:07:05,280
not very portable uh they tend to be

1564
01:07:05,280 --> 01:07:07,280
written for the cloud of the company

1565
01:07:07,280 --> 01:07:09,920
developing them so for example like

1566
01:07:09,920 --> 01:07:11,520
uh

1567
01:07:11,520 --> 01:07:14,400
cluster fuzz doesn't run that well out

1568
01:07:14,400 --> 01:07:16,240
doesn't run as well outside of google

1569
01:07:16,240 --> 01:07:18,160
cloud as it does inside of google cloud

1570
01:07:18,160 --> 01:07:19,839
there's some features that you can't get

1571
01:07:19,839 --> 01:07:21,760
and i think the same is uh true for one

1572
01:07:21,760 --> 01:07:23,520
fuzz and azure you know microsoft's

1573
01:07:23,520 --> 01:07:24,960
cloud

1574
01:07:24,960 --> 01:07:26,559
um and

1575
01:07:26,559 --> 01:07:28,559
another uh problem just like with this

1576
01:07:28,559 --> 01:07:31,760
approach that uh in my mind is that um

1577
01:07:31,760 --> 01:07:32,559
you know

1578
01:07:32,559 --> 01:07:34,480
it's continuous but it's sort of not

1579
01:07:34,480 --> 01:07:36,559
really continuous integration

1580
01:07:36,559 --> 01:07:38,240
it's

1581
01:07:38,240 --> 01:07:39,599
being done after the point of

1582
01:07:39,599 --> 01:07:41,119
integration and you know i don't think

1583
01:07:41,119 --> 01:07:42,880
that's ideal because

1584
01:07:42,880 --> 01:07:44,640
a developer like after they've committed

1585
01:07:44,640 --> 01:07:46,240
code like should be able to sort of like

1586
01:07:46,240 --> 01:07:47,839
you know forget about it and move on to

1587
01:07:47,839 --> 01:07:50,799
the next uh feature rather than you know

1588
01:07:50,799 --> 01:07:52,319
having to fix issues in it that were

1589
01:07:52,319 --> 01:07:53,839
discovered like a day or two later like

1590
01:07:53,839 --> 01:07:56,799
that's never fun and so i think just

1591
01:07:56,799 --> 01:07:58,799
sort of the the point at which cluster

1592
01:07:58,799 --> 01:08:00,640
fuzz is sitting um

1593
01:08:00,640 --> 01:08:04,240
is not ideal for this purpose

1594
01:08:06,559 --> 01:08:09,280
so to address this problem uh we spent a

1595
01:08:09,280 --> 01:08:11,119
fair amount of effort moving fuzzing

1596
01:08:11,119 --> 01:08:12,960
into uh ci

1597
01:08:12,960 --> 01:08:15,920
and to support fuzzing nci we uh wrote a

1598
01:08:15,920 --> 01:08:18,319
tool called cluster fuzz light

1599
01:08:18,319 --> 01:08:21,359
cluster buzz light can run in common ci

1600
01:08:21,359 --> 01:08:23,679
systems such as like github actions and

1601
01:08:23,679 --> 01:08:25,198
it's actually meant to be very portable

1602
01:08:25,198 --> 01:08:26,479
to other ones

1603
01:08:26,479 --> 01:08:27,279
um

1604
01:08:27,279 --> 01:08:29,359
and what clusterfuzz light does is it

1605
01:08:29,359 --> 01:08:31,120
can fuzz your code changes such as like

1606
01:08:31,120 --> 01:08:33,839
your pull requests or commits and catch

1607
01:08:33,839 --> 01:08:36,080
bugs in them uh before they land instead

1608
01:08:36,080 --> 01:08:38,719
of you know fuzzing uh your code after

1609
01:08:38,719 --> 01:08:40,799
it lands and giving you bugs like a few

1610
01:08:40,799 --> 01:08:43,759
days later and because it's lightweight

1611
01:08:43,759 --> 01:08:47,120
um it's very trivial to uh set up uh and

1612
01:08:47,120 --> 01:08:48,799
like port to other platforms and just

1613
01:08:48,799 --> 01:08:50,719
low maintenance in general

1614
01:08:50,719 --> 01:08:53,198
even though it actually is using uh

1615
01:08:53,198 --> 01:08:55,439
cluster fuzz uh cluster fuzz's code base

1616
01:08:55,439 --> 01:08:58,158
underneath the hood

1617
01:08:58,238 --> 01:09:01,040
um and just like as proof of uh it being

1618
01:09:01,040 --> 01:09:04,560
like effective and uh easy to use is uh

1619
01:09:04,560 --> 01:09:07,198
our users like we have um

1620
01:09:07,198 --> 01:09:09,279
you know over like a hundred users

1621
01:09:09,279 --> 01:09:12,080
mostly from oss fuzz that are using uh

1622
01:09:12,080 --> 01:09:14,479
cluster fuzz lite for finding bugs in

1623
01:09:14,479 --> 01:09:17,120
their code uh you know before they land

1624
01:09:17,120 --> 01:09:19,120
and you know we found hundreds of

1625
01:09:19,120 --> 01:09:23,599
crashes in those projects code

1626
01:09:24,479 --> 01:09:26,960
and so the way cluster fuzz light works

1627
01:09:26,960 --> 01:09:28,880
is intended to make you know fuzzing

1628
01:09:28,880 --> 01:09:31,759
like you would run unit tests uh in ci

1629
01:09:31,759 --> 01:09:32,640
so

1630
01:09:32,640 --> 01:09:34,560
pretty much like any other ci tool um

1631
01:09:34,560 --> 01:09:36,399
this is cluster fuzz light in github

1632
01:09:36,399 --> 01:09:37,520
actions

1633
01:09:37,520 --> 01:09:39,120
you uh

1634
01:09:39,120 --> 01:09:40,640
you get like a pull request and cluster

1635
01:09:40,640 --> 01:09:43,040
fuzz light kicks off fuzzing it and if

1636
01:09:43,040 --> 01:09:44,479
it finds a crash

1637
01:09:44,479 --> 01:09:47,920
it uh reports like a failed status um by

1638
01:09:47,920 --> 01:09:49,600
the way ci fuzz is just like an old name

1639
01:09:49,600 --> 01:09:51,759
for cluster fuzz light so reports a

1640
01:09:51,759 --> 01:09:53,920
failed status and you know makes

1641
01:09:53,920 --> 01:09:55,600
available the inputs that cause the

1642
01:09:55,600 --> 01:09:57,360
crash for you to uh you know so you

1643
01:09:57,360 --> 01:09:59,280
could reproduce it on your own

1644
01:09:59,280 --> 01:10:02,080
and lets you view uh the output of the

1645
01:10:02,080 --> 01:10:04,800
crash so like here's the stack trace

1646
01:10:04,800 --> 01:10:06,960
from a crash that cluster fuzz light

1647
01:10:06,960 --> 01:10:08,000
found

1648
01:10:08,000 --> 01:10:10,960
in openssl uh and this crash

1649
01:10:10,960 --> 01:10:13,280
or this bug rather wasn't actually

1650
01:10:13,280 --> 01:10:15,360
merged into the open ssl code base

1651
01:10:15,360 --> 01:10:16,960
because cluster fuzz light caught it

1652
01:10:16,960 --> 01:10:20,080
before it could be merged

1653
01:10:20,480 --> 01:10:23,280
so hopefully i sold you pretty well on

1654
01:10:23,280 --> 01:10:26,320
um you know cluster fuzz light uh let's

1655
01:10:26,320 --> 01:10:28,800
maybe dive into a bit uh for of how it

1656
01:10:28,800 --> 01:10:31,600
works just because i think um you know

1657
01:10:31,600 --> 01:10:33,600
there's a lot maybe i could learn from

1658
01:10:33,600 --> 01:10:36,480
sort of you know the devops community on

1659
01:10:36,480 --> 01:10:38,320
what works well in ci and maybe you know

1660
01:10:38,320 --> 01:10:40,320
some people like will like some of the

1661
01:10:40,320 --> 01:10:42,239
um you know compromises and trade-offs

1662
01:10:42,239 --> 01:10:43,360
we made

1663
01:10:43,360 --> 01:10:44,800
so

1664
01:10:44,800 --> 01:10:47,040
fuzzing is not so like clusterfuck's

1665
01:10:47,040 --> 01:10:48,159
light was not as simple as just like

1666
01:10:48,159 --> 01:10:50,159
plopping uh

1667
01:10:50,159 --> 01:10:52,159
fuzzing into ci and calling it a day

1668
01:10:52,159 --> 01:10:53,520
just because fuzzing is sort of like

1669
01:10:53,520 --> 01:10:55,840
ill-suited towards ci i think

1670
01:10:55,840 --> 01:10:56,640
um

1671
01:10:56,640 --> 01:10:58,800
or at least like how fuzzing was done

1672
01:10:58,800 --> 01:11:00,719
before cluster buzz light

1673
01:11:00,719 --> 01:11:03,440
uh fuzzing uh you know relies on like

1674
01:11:03,440 --> 01:11:05,280
non-determinism uh you know there's

1675
01:11:05,280 --> 01:11:07,199
randomized inputs and that's not great

1676
01:11:07,199 --> 01:11:09,600
in a ci system because you want you know

1677
01:11:09,600 --> 01:11:10,840
errors to be

1678
01:11:10,840 --> 01:11:13,120
reproducible uh so that you know devs

1679
01:11:13,120 --> 01:11:15,360
know what they did wrong um

1680
01:11:15,360 --> 01:11:17,440
another problem is just like speed right

1681
01:11:17,440 --> 01:11:19,520
so fuzzing uh

1682
01:11:19,520 --> 01:11:20,560
may need

1683
01:11:20,560 --> 01:11:21,840
like you never know really when you're

1684
01:11:21,840 --> 01:11:24,239
done fuzzing necessarily um you know

1685
01:11:24,239 --> 01:11:25,520
it's always possible that they're more

1686
01:11:25,520 --> 01:11:27,120
bugs it's not like a sound technique

1687
01:11:27,120 --> 01:11:29,520
that like proves the absence of bugs

1688
01:11:29,520 --> 01:11:31,600
uh but we can't spend like hours so and

1689
01:11:31,600 --> 01:11:33,840
you probably will find more bugs the

1690
01:11:33,840 --> 01:11:35,760
longer you spend fuzzing uh but you

1691
01:11:35,760 --> 01:11:37,199
can't you know we can't spend hours

1692
01:11:37,199 --> 01:11:39,199
fuzzing on a pull request and block it

1693
01:11:39,199 --> 01:11:41,040
from landing like you know no dev is

1694
01:11:41,040 --> 01:11:42,560
gonna put up with that

1695
01:11:42,560 --> 01:11:44,719
uh and finally um there's an issue of

1696
01:11:44,719 --> 01:11:47,040
like fuzzer selection that i'm gonna uh

1697
01:11:47,040 --> 01:11:50,560
touch on uh in a bit

1698
01:11:53,199 --> 01:11:56,480
so first uh the non-determinism um

1699
01:11:56,480 --> 01:11:58,239
there are two really bad ways that like

1700
01:11:58,239 --> 01:12:00,320
non-determinism and fuzzing could really

1701
01:12:00,320 --> 01:12:01,840
burn um

1702
01:12:01,840 --> 01:12:04,400
someone use doing fuzzing in ci with

1703
01:12:04,400 --> 01:12:06,320
like a naive approach so

1704
01:12:06,320 --> 01:12:08,719
um if our fuzzers were non-deterministic

1705
01:12:08,719 --> 01:12:09,840
in ci

1706
01:12:09,840 --> 01:12:11,920
uh what they could do is convince

1707
01:12:11,920 --> 01:12:13,840
developers that they introduced a bug

1708
01:12:13,840 --> 01:12:16,080
that they didn't in fact introduce so

1709
01:12:16,080 --> 01:12:18,880
for example suppose alice uh

1710
01:12:18,880 --> 01:12:21,520
commits a code on monday that contains a

1711
01:12:21,520 --> 01:12:24,080
bug and because you know fuzzers are

1712
01:12:24,080 --> 01:12:26,320
like unsound it just happens to miss

1713
01:12:26,320 --> 01:12:27,440
that bug

1714
01:12:27,440 --> 01:12:31,760
uh but later bob on tuesday uh is has a

1715
01:12:31,760 --> 01:12:34,560
pull request up and the fuzzer happens

1716
01:12:34,560 --> 01:12:36,560
to find alice's bug now

1717
01:12:36,560 --> 01:12:38,400
uh well like bob is not going to be

1718
01:12:38,400 --> 01:12:41,760
happy that you know we're failing on uh

1719
01:12:41,760 --> 01:12:43,440
we're failing on his pull requests and

1720
01:12:43,440 --> 01:12:47,040
not on alice's so that's one issue and

1721
01:12:47,040 --> 01:12:48,480
another one that's perhaps even more

1722
01:12:48,480 --> 01:12:50,960
insidious is convincing you that you fix

1723
01:12:50,960 --> 01:12:53,440
the bug when you actually have it so

1724
01:12:53,440 --> 01:12:55,840
uh the way this would work is you know

1725
01:12:55,840 --> 01:12:59,440
if let's say suppose that uh

1726
01:12:59,440 --> 01:13:02,239
ci fuzzing work capable of finding

1727
01:13:02,239 --> 01:13:04,960
alice's bug like in her pull request

1728
01:13:04,960 --> 01:13:06,719
and then she tried making a fix but the

1729
01:13:06,719 --> 01:13:09,040
fix was incomplete and

1730
01:13:09,040 --> 01:13:10,719
she puts up the pull request for review

1731
01:13:10,719 --> 01:13:13,600
again and ci fuzzing kicks off and this

1732
01:13:13,600 --> 01:13:15,760
time due to randomness like it misses

1733
01:13:15,760 --> 01:13:18,640
her bug well to her it's gonna look like

1734
01:13:18,640 --> 01:13:22,159
that bug was um fixed and so that's

1735
01:13:22,159 --> 01:13:24,960
obviously like quite bad so

1736
01:13:24,960 --> 01:13:26,640
to deal with this uh we do a couple

1737
01:13:26,640 --> 01:13:28,560
different things um the first like the

1738
01:13:28,560 --> 01:13:30,880
simplest uh like low-hanging fruit was

1739
01:13:30,880 --> 01:13:34,000
just you know using a fixed uh random

1740
01:13:34,000 --> 01:13:36,239
see fixed seed for the random number

1741
01:13:36,239 --> 01:13:37,360
generator

1742
01:13:37,360 --> 01:13:39,679
uh and this kind of reduces the number

1743
01:13:39,679 --> 01:13:42,239
of bugs that we find overall probably

1744
01:13:42,239 --> 01:13:44,560
but it gives us more determinism which i

1745
01:13:44,560 --> 01:13:46,400
think is more important in like a ci

1746
01:13:46,400 --> 01:13:48,080
fuzzing system then you know

1747
01:13:48,080 --> 01:13:50,159
completeness is not as important as some

1748
01:13:50,159 --> 01:13:51,920
of these other properties

1749
01:13:51,920 --> 01:13:53,120
um

1750
01:13:53,120 --> 01:13:54,880
and then the other technique that we use

1751
01:13:54,880 --> 01:13:58,000
is uh we only report novel crashes so

1752
01:13:58,000 --> 01:14:01,520
back to like the alice and bob case um

1753
01:14:01,520 --> 01:14:04,480
what cluster fuzz light actually does is

1754
01:14:04,480 --> 01:14:06,400
uh if there's a crash in bob's pull

1755
01:14:06,400 --> 01:14:09,360
request it'll download an old build of

1756
01:14:09,360 --> 01:14:11,280
the fuzzers and see if that crash could

1757
01:14:11,280 --> 01:14:13,280
be reproduced in the old build

1758
01:14:13,280 --> 01:14:14,800
and if a crash could be reproduced in

1759
01:14:14,800 --> 01:14:17,920
the old build then we know that the

1760
01:14:17,920 --> 01:14:19,600
code that we're testing you know bob's

1761
01:14:19,600 --> 01:14:20,800
pull request

1762
01:14:20,800 --> 01:14:22,800
did not introduce it so

1763
01:14:22,800 --> 01:14:24,400
clusterfuz lite actually won't report

1764
01:14:24,400 --> 01:14:26,640
the bug in that case um

1765
01:14:26,640 --> 01:14:29,280
and hopefully like if you're just doing

1766
01:14:29,280 --> 01:14:30,800
that you might end up like missing bugs

1767
01:14:30,800 --> 01:14:32,719
but hopefully like you'll have another

1768
01:14:32,719 --> 01:14:34,640
um you know longer running fuzzing

1769
01:14:34,640 --> 01:14:36,719
process that could catch that later

1770
01:14:36,719 --> 01:14:38,960
uh

1771
01:14:39,280 --> 01:14:41,679
so that's for non-determinism now uh

1772
01:14:41,679 --> 01:14:43,920
speed is another problem right like i

1773
01:14:43,920 --> 01:14:46,880
pointed out that we'll find less bugs uh

1774
01:14:46,880 --> 01:14:48,800
if we we'll probably find less bugs if

1775
01:14:48,800 --> 01:14:50,880
we fuzz for 10 minutes rather than two

1776
01:14:50,880 --> 01:14:53,840
hours but you know what do we do so here

1777
01:14:53,840 --> 01:14:56,239
i made the very scientific decision to

1778
01:14:56,239 --> 01:14:58,400
do fuzz for 10 minutes and you know of

1779
01:14:58,400 --> 01:14:59,840
course that's the balance the two goals

1780
01:14:59,840 --> 01:15:01,679
of how do we get results back to

1781
01:15:01,679 --> 01:15:04,080
developers quick enough versus how do we

1782
01:15:04,080 --> 01:15:04,960
um

1783
01:15:04,960 --> 01:15:06,640
you know how do we find as many bugs as

1784
01:15:06,640 --> 01:15:08,159
possible

1785
01:15:08,159 --> 01:15:09,199
uh

1786
01:15:09,199 --> 01:15:11,120
and i think there's some so and there's

1787
01:15:11,120 --> 01:15:12,960
some anecdotal evidence that this like

1788
01:15:12,960 --> 01:15:14,960
10 minutes is enough uh you know some

1789
01:15:14,960 --> 01:15:16,320
developers say that like most of their

1790
01:15:16,320 --> 01:15:18,480
issues are caught by cluster fuzz light

1791
01:15:18,480 --> 01:15:21,520
uh before they even get to oss fuzz

1792
01:15:21,520 --> 01:15:23,920
um and i've actually looked at like some

1793
01:15:23,920 --> 01:15:26,640
data from oss fuzz and there's data to

1794
01:15:26,640 --> 01:15:29,040
support this uh claim too

1795
01:15:29,040 --> 01:15:31,520
about like 40 of bugs of new bugs that

1796
01:15:31,520 --> 01:15:34,960
were uh found uh during fuzzing uh were

1797
01:15:34,960 --> 01:15:37,679
found like pretty soon after the bug was

1798
01:15:37,679 --> 01:15:39,760
introduced and so there's actually a

1799
01:15:39,760 --> 01:15:41,520
reason to think that this bug could be

1800
01:15:41,520 --> 01:15:44,719
found faster um on cluster fuzz light

1801
01:15:44,719 --> 01:15:49,280
than it could in uh cluster fuzz but um

1802
01:15:49,280 --> 01:15:50,960
but yeah like i

1803
01:15:50,960 --> 01:15:52,159
there's at least like you know around

1804
01:15:52,159 --> 01:15:54,480
like 40 of the bugs that we we could

1805
01:15:54,480 --> 01:15:56,560
find if we could find uh around 40

1806
01:15:56,560 --> 01:15:58,320
percent of the bugs that we would find

1807
01:15:58,320 --> 01:16:00,239
with this heavyweight infrastructure you

1808
01:16:00,239 --> 01:16:01,679
know if clusterful's light can provide

1809
01:16:01,679 --> 01:16:03,520
that and you know

1810
01:16:03,520 --> 01:16:05,679
take like 10 of the effort and 10 of the

1811
01:16:05,679 --> 01:16:06,400
cost

1812
01:16:06,400 --> 01:16:10,239
i think that's like quite a big win

1813
01:16:12,960 --> 01:16:15,199
and uh finally the last like smart

1814
01:16:15,199 --> 01:16:18,000
feature of um or like adaptation we made

1815
01:16:18,000 --> 01:16:18,880
uh

1816
01:16:18,880 --> 01:16:21,840
to ci for cluster fuzz light was uh

1817
01:16:21,840 --> 01:16:24,480
deciding which fuzzer to run so fuzzers

1818
01:16:24,480 --> 01:16:25,920
are kind of like um

1819
01:16:25,920 --> 01:16:28,560
chips in that like people who write one

1820
01:16:28,560 --> 01:16:30,800
tend to do more than one so here you

1821
01:16:30,800 --> 01:16:31,760
could see

1822
01:16:31,760 --> 01:16:34,239
uh like fuzzers in systemd and you can

1823
01:16:34,239 --> 01:16:35,520
see that there's at least like four that

1824
01:16:35,520 --> 01:16:36,960
begin with the letter b right and there

1825
01:16:36,960 --> 01:16:38,960
are actually many more fuzzers right so

1826
01:16:38,960 --> 01:16:40,239
how do you when you have like a pull

1827
01:16:40,239 --> 01:16:41,840
request that you're testing how do you

1828
01:16:41,840 --> 01:16:44,640
know which one of these to run um

1829
01:16:44,640 --> 01:16:46,800
and what cluster fuzz light does

1830
01:16:46,800 --> 01:16:49,600
is it will download coverage reports for

1831
01:16:49,600 --> 01:16:52,800
each buzzer and it'll take the diff uh

1832
01:16:52,800 --> 01:16:55,440
that it's actually testing and see oh

1833
01:16:55,440 --> 01:16:57,440
this fuzzer covers the code that's been

1834
01:16:57,440 --> 01:16:59,679
changed i'll run that fuzzer and if the

1835
01:16:59,679 --> 01:17:01,520
fuzzer doesn't cover that code then it

1836
01:17:01,520 --> 01:17:03,280
doesn't get run and so we can more

1837
01:17:03,280 --> 01:17:05,840
efficiently spend the 10 minutes

1838
01:17:05,840 --> 01:17:07,840
that we have the fuzz running fuzzers

1839
01:17:07,840 --> 01:17:09,920
that could actually find bugs introduced

1840
01:17:09,920 --> 01:17:11,679
by the change

1841
01:17:11,679 --> 01:17:13,199
than we would if we were just running

1842
01:17:13,199 --> 01:17:16,678
every single fuzzer

1843
01:17:18,560 --> 01:17:20,560
uh and customized light has a lot of

1844
01:17:20,560 --> 01:17:22,800
like just features that cluster fuzz

1845
01:17:22,800 --> 01:17:25,199
does um

1846
01:17:25,199 --> 01:17:26,719
such as like support for different

1847
01:17:26,719 --> 01:17:29,360
sanitizers uh which are good for finding

1848
01:17:29,360 --> 01:17:30,800
different kinds of like

1849
01:17:30,800 --> 01:17:33,120
issues in c and c plus code like

1850
01:17:33,120 --> 01:17:35,040
undefined behavior or use of

1851
01:17:35,040 --> 01:17:38,239
uninitialized values uh it also supports

1852
01:17:38,239 --> 01:17:39,199
um

1853
01:17:39,199 --> 01:17:41,360
other languages such as like rust go

1854
01:17:41,360 --> 01:17:42,400
python

1855
01:17:42,400 --> 01:17:44,400
and java and i know i've sort of focused

1856
01:17:44,400 --> 01:17:46,480
a little bit on cnc plus plus and that's

1857
01:17:46,480 --> 01:17:47,760
just sort of where fuzzing has had the

1858
01:17:47,760 --> 01:17:50,480
most success but um it's definitely a

1859
01:17:50,480 --> 01:17:53,199
useful tool for non-cnc plus plus uh

1860
01:17:53,199 --> 01:17:54,480
projects

1861
01:17:54,480 --> 01:17:56,159
um

1862
01:17:56,159 --> 01:17:57,679
and uh

1863
01:17:57,679 --> 01:17:58,880
yeah so

1864
01:17:58,880 --> 01:18:01,840
in addition to providing like

1865
01:18:01,840 --> 01:18:03,760
ci style fuzzing where we're testing

1866
01:18:03,760 --> 01:18:06,080
code changes uh cluster fuzz light could

1867
01:18:06,080 --> 01:18:07,440
actually um

1868
01:18:07,440 --> 01:18:09,199
provide some of the

1869
01:18:09,199 --> 01:18:12,159
core features of cluster fuzz uh for

1870
01:18:12,159 --> 01:18:14,400
example like just long-running uh

1871
01:18:14,400 --> 01:18:16,400
fuzzing jobs that take multiple hours

1872
01:18:16,400 --> 01:18:18,560
and like asynchronously reports bugs

1873
01:18:18,560 --> 01:18:19,760
which is just like the main thing

1874
01:18:19,760 --> 01:18:21,199
cluster fuzz does

1875
01:18:21,199 --> 01:18:23,600
uh that could be done by cluster fuzz

1876
01:18:23,600 --> 01:18:26,320
light using just like the cron uh

1877
01:18:26,320 --> 01:18:28,480
functionality of ci systems like github

1878
01:18:28,480 --> 01:18:30,960
actions uh and another cool feature that

1879
01:18:30,960 --> 01:18:33,520
classifies light offers uh are coverage

1880
01:18:33,520 --> 01:18:35,600
reports which i mentioned before are

1881
01:18:35,600 --> 01:18:37,360
useful for determining which fuzzer to

1882
01:18:37,360 --> 01:18:40,000
run but are also just nice for

1883
01:18:40,000 --> 01:18:42,239
developers because they could see uh

1884
01:18:42,239 --> 01:18:43,920
which parts of the code

1885
01:18:43,920 --> 01:18:45,440
are being tested during fuzzing and

1886
01:18:45,440 --> 01:18:48,559
which parts are being missed

1887
01:18:50,320 --> 01:18:51,280
so

1888
01:18:51,280 --> 01:18:53,760
now hopefully um

1889
01:18:53,760 --> 01:18:56,400
you know we have enough background to

1890
01:18:56,400 --> 01:18:58,000
like understand what cluster fuzz light

1891
01:18:58,000 --> 01:19:00,400
does and you know maybe some of you are

1892
01:19:00,400 --> 01:19:01,600
eager to see

1893
01:19:01,600 --> 01:19:03,120
how you can use it

1894
01:19:03,120 --> 01:19:05,280
so

1895
01:19:05,679 --> 01:19:06,960
um

1896
01:19:06,960 --> 01:19:08,719
as i said like it should be very easy to

1897
01:19:08,719 --> 01:19:10,640
set up cluster fuzz light it's built for

1898
01:19:10,640 --> 01:19:12,560
this purpose um you know we have many

1899
01:19:12,560 --> 01:19:15,040
users and that sort of evidence for that

1900
01:19:15,040 --> 01:19:17,040
uh the first thing you need to do to use

1901
01:19:17,040 --> 01:19:18,480
cluster fuzz light

1902
01:19:18,480 --> 01:19:19,520
is

1903
01:19:19,520 --> 01:19:22,480
write lib fuzzer harnesses um this is

1904
01:19:22,480 --> 01:19:24,320
basically just

1905
01:19:24,320 --> 01:19:26,400
consists of implementing like an api

1906
01:19:26,400 --> 01:19:28,719
that lib fuzzer will call into and this

1907
01:19:28,719 --> 01:19:30,640
api just needs to accept like a byte

1908
01:19:30,640 --> 01:19:32,960
buffer and you pass that byte buffer to

1909
01:19:32,960 --> 01:19:35,040
the code you want to fuzz

1910
01:19:35,040 --> 01:19:37,040
um

1911
01:19:37,040 --> 01:19:39,360
this is fairly easy to do like you see

1912
01:19:39,360 --> 01:19:41,920
this example uh from openssl or i think

1913
01:19:41,920 --> 01:19:45,679
boring ssl uh is only about 20 lines um

1914
01:19:45,679 --> 01:19:46,880
and there's a lot more details on

1915
01:19:46,880 --> 01:19:49,600
writing the buzzer harnesses uh at the

1916
01:19:49,600 --> 01:19:51,679
lib buzzer documentation

1917
01:19:51,679 --> 01:19:53,120
um

1918
01:19:53,120 --> 01:19:54,480
and then the next step is just sort of

1919
01:19:54,480 --> 01:19:56,480
like configuration so that cluster fuzz

1920
01:19:56,480 --> 01:19:59,280
light can build your fuzzers uh

1921
01:19:59,280 --> 01:20:00,400
this starts

1922
01:20:00,400 --> 01:20:01,920
this just consists of a bunch of other

1923
01:20:01,920 --> 01:20:05,440
small files so first you've got um

1924
01:20:05,440 --> 01:20:08,480
a yaml file that just declares the

1925
01:20:08,480 --> 01:20:11,120
language your project is written in um

1926
01:20:11,120 --> 01:20:13,040
you got like a docker file just to

1927
01:20:13,040 --> 01:20:14,560
install any dependencies you need to

1928
01:20:14,560 --> 01:20:15,440
build

1929
01:20:15,440 --> 01:20:17,760
the project and then finally you have a

1930
01:20:17,760 --> 01:20:19,440
bash script that is really just a

1931
01:20:19,440 --> 01:20:21,199
wrapper around your own build system to

1932
01:20:21,199 --> 01:20:24,719
build uh fuzzers uh for your project

1933
01:20:24,719 --> 01:20:27,280
and that's really all you need um

1934
01:20:27,280 --> 01:20:28,000
to

1935
01:20:28,000 --> 01:20:28,800
like

1936
01:20:28,800 --> 01:20:31,360
support any of the core functionality of

1937
01:20:31,360 --> 01:20:32,960
cluster fuzz light

1938
01:20:32,960 --> 01:20:35,120
but to actually uh run it you're going

1939
01:20:35,120 --> 01:20:36,800
to need to you know figure out where

1940
01:20:36,800 --> 01:20:39,120
where you want to do that and so um i

1941
01:20:39,120 --> 01:20:41,040
think i've like mentioned it a few times

1942
01:20:41,040 --> 01:20:43,360
but like it can be run cluster buzz

1943
01:20:43,360 --> 01:20:44,719
light could be run in different ci

1944
01:20:44,719 --> 01:20:46,639
systems so we sport like google cloud

1945
01:20:46,639 --> 01:20:49,600
build we support pro um you know it's

1946
01:20:49,600 --> 01:20:52,080
easy to add support for other systems

1947
01:20:52,080 --> 01:20:53,840
and of course we support like github

1948
01:20:53,840 --> 01:20:56,239
actions which i i think have probably

1949
01:20:56,239 --> 01:20:58,000
like exploded somewhat in popularity

1950
01:20:58,000 --> 01:20:59,760
just because you know so much code is

1951
01:20:59,760 --> 01:21:01,600
developed on github and this just makes

1952
01:21:01,600 --> 01:21:05,360
it convenient um so

1953
01:21:05,360 --> 01:21:08,080
to to you know take advantage of cluster

1954
01:21:08,080 --> 01:21:09,520
fuzz light once you've done those

1955
01:21:09,520 --> 01:21:11,199
previous steps you basically could just

1956
01:21:11,199 --> 01:21:14,639
like copy and paste uh these you know 20

1957
01:21:14,639 --> 01:21:18,080
line uh or 30 line workflow files uh to

1958
01:21:18,080 --> 01:21:21,600
use uh cluster fuzz lite um so it you

1959
01:21:21,600 --> 01:21:23,440
know it's really trivial to set up i

1960
01:21:23,440 --> 01:21:26,159
think especially especially if you know

1961
01:21:26,159 --> 01:21:27,600
like fuzzing already and like you

1962
01:21:27,600 --> 01:21:29,760
familiar with fuzzing um

1963
01:21:29,760 --> 01:21:32,159
and you know actually the this previous

1964
01:21:32,159 --> 01:21:34,639
process is actually quite similar to oss

1965
01:21:34,639 --> 01:21:36,960
fuzz so you know if you've used oss fuzz

1966
01:21:36,960 --> 01:21:40,239
on an open source project and you now

1967
01:21:40,239 --> 01:21:42,239
are on a proprietary project and want to

1968
01:21:42,239 --> 01:21:43,679
use um

1969
01:21:43,679 --> 01:21:45,440
you know want to do fuzzing uh you

1970
01:21:45,440 --> 01:21:46,880
should be pretty familiar with this

1971
01:21:46,880 --> 01:21:49,280
process

1972
01:21:49,679 --> 01:21:52,560
so uh some like future ideas uh for

1973
01:21:52,560 --> 01:21:54,000
extending this even further that i've

1974
01:21:54,000 --> 01:21:56,159
had um just because we got a bit of time

1975
01:21:56,159 --> 01:21:58,639
left uh so i mentioned

1976
01:21:58,639 --> 01:22:01,120
that clusterfuzz light can use

1977
01:22:01,120 --> 01:22:03,920
uh coverage information and diffs to

1978
01:22:03,920 --> 01:22:05,040
target

1979
01:22:05,040 --> 01:22:06,719
you know to run fuzzers that actually

1980
01:22:06,719 --> 01:22:07,679
affect

1981
01:22:07,679 --> 01:22:10,800
the change code but one thing that would

1982
01:22:10,800 --> 01:22:12,400
be interesting is

1983
01:22:12,400 --> 01:22:14,080
if we know which code has changed could

1984
01:22:14,080 --> 01:22:16,560
we tell the fuzzer to focus on that

1985
01:22:16,560 --> 01:22:18,719
particular area of the code

1986
01:22:18,719 --> 01:22:21,199
and there are some tools that

1987
01:22:21,199 --> 01:22:22,719
have been released that do stuff like

1988
01:22:22,719 --> 01:22:25,360
this and maybe they would be useful in a

1989
01:22:25,360 --> 01:22:27,760
ci context actually one reason why i'm

1990
01:22:27,760 --> 01:22:29,120
not using i think like the current

1991
01:22:29,120 --> 01:22:31,040
generation of them is just because i

1992
01:22:31,040 --> 01:22:33,120
think it's um i was a bit worried about

1993
01:22:33,120 --> 01:22:34,400
like the speed

1994
01:22:34,400 --> 01:22:35,679
uh

1995
01:22:35,679 --> 01:22:37,920
like there's some extra steps and if it

1996
01:22:37,920 --> 01:22:40,159
slows down fuzzing uh it's probably not

1997
01:22:40,159 --> 01:22:42,320
worth it for me

1998
01:22:42,320 --> 01:22:43,840
but if the fuzzer were capable of

1999
01:22:43,840 --> 01:22:46,080
knowing um what it's fuzzing you know

2000
01:22:46,080 --> 01:22:47,600
maybe we could use better heuristics

2001
01:22:47,600 --> 01:22:49,120
than just quitting after 10 minutes like

2002
01:22:49,120 --> 01:22:51,120
maybe we could say you know if we've

2003
01:22:51,120 --> 01:22:53,760
tested this code like a billion times uh

2004
01:22:53,760 --> 01:22:55,440
just quit because you know we're pretty

2005
01:22:55,440 --> 01:22:57,520
confident there's no bugs in there

2006
01:22:57,520 --> 01:22:59,840
and finally like i think one thing that

2007
01:22:59,840 --> 01:23:01,520
uh is sort of lacking so right like i

2008
01:23:01,520 --> 01:23:03,760
said fuzzing uh sort of started on

2009
01:23:03,760 --> 01:23:05,520
people's like desktops and i want to

2010
01:23:05,520 --> 01:23:07,199
make it user friendly like i want to

2011
01:23:07,199 --> 01:23:09,280
make it maybe end up back on the user's

2012
01:23:09,280 --> 01:23:11,360
desktop but be user friendly this time

2013
01:23:11,360 --> 01:23:13,280
in a way that like developers would use

2014
01:23:13,280 --> 01:23:15,360
and not just um you know like hackers

2015
01:23:15,360 --> 01:23:18,159
would use so right like

2016
01:23:18,159 --> 01:23:19,920
you don't only run unit tests into your

2017
01:23:19,920 --> 01:23:22,159
ci you run it locally maybe like you

2018
01:23:22,159 --> 01:23:23,920
should have a way to quickly run these

2019
01:23:23,920 --> 01:23:26,000
uh fuzzers in like a cluster fuzz light

2020
01:23:26,000 --> 01:23:29,679
style way uh locally

2021
01:23:30,320 --> 01:23:32,239
so to conclude my talk uh you should

2022
01:23:32,239 --> 01:23:33,760
fuzz your code because if you don't

2023
01:23:33,760 --> 01:23:35,440
someone else will and find

2024
01:23:35,440 --> 01:23:37,199
vulnerabilities in them

2025
01:23:37,199 --> 01:23:39,440
uh in your code and

2026
01:23:39,440 --> 01:23:42,400
ci fuzzing can really help catch a lot

2027
01:23:42,400 --> 01:23:44,239
of vulnerabilities uh before they're

2028
01:23:44,239 --> 01:23:47,360
merged into your code and really um you

2029
01:23:47,360 --> 01:23:48,639
know

2030
01:23:48,639 --> 01:23:50,719
real it's like a very cheap way to get a

2031
01:23:50,719 --> 01:23:52,800
lot of the benefits of continuous

2032
01:23:52,800 --> 01:23:55,120
fuzzing and finally uh cluster fuzz

2033
01:23:55,120 --> 01:23:58,320
light makes it very easy to fuzz as part

2034
01:23:58,320 --> 01:24:00,480
of ci

2035
01:24:00,480 --> 01:24:02,800
so to end off um

2036
01:24:02,800 --> 01:24:05,760
uh we could do a q a but um here's just

2037
01:24:05,760 --> 01:24:08,480
like my contact info and a link to the

2038
01:24:08,480 --> 01:24:11,120
uh cluster fuzz light repo um and if you

2039
01:24:11,120 --> 01:24:12,560
have any questions you know feel free to

2040
01:24:12,560 --> 01:24:16,400
ask them now or uh reach out to me by uh

2041
01:24:16,400 --> 01:24:18,480
you know by email or file an issue i'm

2042
01:24:18,480 --> 01:24:22,559
very eager to like help people thanks

2043
01:24:23,600 --> 01:24:25,199
nice jonathan that was that was super

2044
01:24:25,199 --> 01:24:28,400
insightful and interesting um thanks and

2045
01:24:28,400 --> 01:24:30,080
i had i'll be honest with you i had to

2046
01:24:30,080 --> 01:24:31,840
step away for a moment and i came back

2047
01:24:31,840 --> 01:24:33,520
and the first thing i heard was cluster

2048
01:24:33,520 --> 01:24:35,600
fuzz and i just burst it out laughing

2049
01:24:35,600 --> 01:24:37,600
because you know i love the play on the

2050
01:24:37,600 --> 01:24:39,440
name there yeah it's one of the better

2051
01:24:39,440 --> 01:24:41,840
name tools we have yeah yeah as somebody

2052
01:24:41,840 --> 01:24:44,320
zach curtis in the chat said uh please

2053
01:24:44,320 --> 01:24:46,080
tell me the next name will be fuzz

2054
01:24:46,080 --> 01:24:47,760
lightyear

2055
01:24:47,760 --> 01:24:50,159
uh there's some other like uh people

2056
01:24:50,159 --> 01:24:51,600
involved in fuzzing that wanted to name

2057
01:24:51,600 --> 01:24:53,760
some tool that but that's not uh i think

2058
01:24:53,760 --> 01:24:55,520
we're not gonna go with that name okay

2059
01:24:55,520 --> 01:24:57,199
okay fair enough fair enough

2060
01:24:57,199 --> 01:24:58,880
cool i was going to call it diet cluster

2061
01:24:58,880 --> 01:25:01,760
fuzz initially though

2062
01:25:02,719 --> 01:25:04,719
the european version apparently yeah

2063
01:25:04,719 --> 01:25:06,880
yeah exactly the light beer

2064
01:25:06,880 --> 01:25:08,800
so steve asked a couple questions i

2065
01:25:08,800 --> 01:25:10,159
paraphrased one because i think you

2066
01:25:10,159 --> 01:25:11,600
might have answered it when you show the

2067
01:25:11,600 --> 01:25:13,760
demonstration but the the first being

2068
01:25:13,760 --> 01:25:15,120
that and um

2069
01:25:15,120 --> 01:25:16,560
forgive me steve if i paraphrase this

2070
01:25:16,560 --> 01:25:18,239
incorrectly but does implementing

2071
01:25:18,239 --> 01:25:19,600
fuzzing in our pipelines require

2072
01:25:19,600 --> 01:25:21,360
deploying the applications and do you

2073
01:25:21,360 --> 01:25:23,199
have any experiences in implementing it

2074
01:25:23,199 --> 01:25:25,280
like that so i'm not

2075
01:25:25,280 --> 01:25:27,040
yeah do you want to go on no go go right

2076
01:25:27,040 --> 01:25:29,760
ahead yeah so i'm not entirely uh

2077
01:25:29,760 --> 01:25:32,400
100 sure what you mean by deploying like

2078
01:25:32,400 --> 01:25:34,159
i think like i guess if you had some

2079
01:25:34,159 --> 01:25:35,760
like sort of cms like you would mean

2080
01:25:35,760 --> 01:25:37,840
like deploying the entire cms to like a

2081
01:25:37,840 --> 01:25:41,440
web server um typically uh these fuzzers

2082
01:25:41,440 --> 01:25:43,280
that i'm talking about are run on like

2083
01:25:43,280 --> 01:25:45,199
almost like the unit test level

2084
01:25:45,199 --> 01:25:46,560
uh so

2085
01:25:46,560 --> 01:25:48,320
you know you wouldn't involve

2086
01:25:48,320 --> 01:25:50,159
um deploying your whole application you

2087
01:25:50,159 --> 01:25:51,600
would just like

2088
01:25:51,600 --> 01:25:52,480
you know

2089
01:25:52,480 --> 01:25:53,199
be

2090
01:25:53,199 --> 01:25:54,560
writing something that looks like a unit

2091
01:25:54,560 --> 01:25:57,199
has to test like a parser or you know

2092
01:25:57,199 --> 01:25:58,719
just like a smaller component than like

2093
01:25:58,719 --> 01:26:00,639
a whole web app i'd say yeah when you

2094
01:26:00,639 --> 01:26:02,639
were showing it it reminded me of uh

2095
01:26:02,639 --> 01:26:03,760
fixture testing where you write a

2096
01:26:03,760 --> 01:26:06,560
harness around a a piece of code or a

2097
01:26:06,560 --> 01:26:08,800
section or a library and and you're

2098
01:26:08,800 --> 01:26:10,239
latching into it like you know like a

2099
01:26:10,239 --> 01:26:12,000
wiring harness would be right yeah

2100
01:26:12,000 --> 01:26:14,800
exactly yeah very cool uh

2101
01:26:14,800 --> 01:26:17,840
a second question there was

2102
01:26:17,840 --> 01:26:19,760
is there support for containers or does

2103
01:26:19,760 --> 01:26:20,880
the application need to be running

2104
01:26:20,880 --> 01:26:23,280
locally for cluster fuzz light

2105
01:26:23,280 --> 01:26:25,520
um so all of the cluster fuzz light

2106
01:26:25,520 --> 01:26:28,480
really sort of happens in docker um

2107
01:26:28,480 --> 01:26:30,159
uh and that's actually like maybe like a

2108
01:26:30,159 --> 01:26:31,760
restriction like you know if you can't

2109
01:26:31,760 --> 01:26:34,960
build your project then like ubuntu um

2110
01:26:34,960 --> 01:26:36,880
like right now we're not like

2111
01:26:36,880 --> 01:26:37,679
uh

2112
01:26:37,679 --> 01:26:39,760
supporting other other sorts of like you

2113
01:26:39,760 --> 01:26:43,120
know distros or os's um

2114
01:26:43,120 --> 01:26:44,480
it doesn't need the application doesn't

2115
01:26:44,480 --> 01:26:46,080
need to be running at all really and and

2116
01:26:46,080 --> 01:26:47,679
not locally like you know clusterful's

2117
01:26:47,679 --> 01:26:49,600
lights really like up like it was really

2118
01:26:49,600 --> 01:26:51,679
built to run on github actions and so

2119
01:26:51,679 --> 01:26:53,199
you know it definitely doesn't need

2120
01:26:53,199 --> 01:26:55,920
anything local

2121
01:26:55,920 --> 01:26:58,080
very cool so i had a question my own

2122
01:26:58,080 --> 01:26:59,520
actually while you were talking about it

2123
01:26:59,520 --> 01:27:01,440
um so

2124
01:27:01,440 --> 01:27:04,080
if fuzzing finds an actual defect in the

2125
01:27:04,080 --> 01:27:06,159
code and um would it would it be a

2126
01:27:06,159 --> 01:27:08,480
normal process then for me to go and add

2127
01:27:08,480 --> 01:27:10,320
unit tests to

2128
01:27:10,320 --> 01:27:11,679
wrap around that so i'm not having to

2129
01:27:11,679 --> 01:27:13,760
rely just on the fuzzers to find you

2130
01:27:13,760 --> 01:27:15,199
know you don't want to use a fuzzer for

2131
01:27:15,199 --> 01:27:17,280
regression i guess right

2132
01:27:17,280 --> 01:27:19,520
yeah actually so um like we definitely

2133
01:27:19,520 --> 01:27:21,600
recommended that uh in the past cluster

2134
01:27:21,600 --> 01:27:24,000
buzz light actually uh will catch like

2135
01:27:24,000 --> 01:27:25,840
just like automatically um you know

2136
01:27:25,840 --> 01:27:27,040
catch any regressions that it's

2137
01:27:27,040 --> 01:27:28,719
previously found so

2138
01:27:28,719 --> 01:27:29,520
um

2139
01:27:29,520 --> 01:27:31,440
yeah like you can rely like and it can

2140
01:27:31,440 --> 01:27:33,600
determine like we can deterministically

2141
01:27:33,600 --> 01:27:36,800
find them uh so like you can't you you

2142
01:27:36,800 --> 01:27:40,000
can but yeah it's pretty common um like

2143
01:27:40,000 --> 01:27:42,400
in chrome when someone uh would find

2144
01:27:42,400 --> 01:27:44,639
like uh you know if they were like a bug

2145
01:27:44,639 --> 01:27:47,040
in v8 chrome's javascript engine

2146
01:27:47,040 --> 01:27:48,400
um that were found through fuzzing

2147
01:27:48,400 --> 01:27:49,760
people would oftentimes write like a

2148
01:27:49,760 --> 01:27:52,239
unit test uh just to ensure that you

2149
01:27:52,239 --> 01:27:53,920
know that bug wasn't reintroduced right

2150
01:27:53,920 --> 01:27:55,440
just to deterministically ensure it

2151
01:27:55,440 --> 01:27:56,560
rather than like relying on the

2152
01:27:56,560 --> 01:27:59,040
randomness

2153
01:27:59,040 --> 01:28:00,639
very cool ryan

2154
01:28:00,639 --> 01:28:02,400
anything you wanted to ask yeah yeah my

2155
01:28:02,400 --> 01:28:04,000
so my question was i believe i saw at

2156
01:28:04,000 --> 01:28:05,360
one point in your slides that the

2157
01:28:05,360 --> 01:28:06,639
programming languages that are currently

2158
01:28:06,639 --> 01:28:08,320
supported is there potential and it was

2159
01:28:08,320 --> 01:28:11,840
like c c plus plus python rust is there

2160
01:28:11,840 --> 01:28:14,239
potential in the future to expand what

2161
01:28:14,239 --> 01:28:16,159
programming languages and ecosystems are

2162
01:28:16,159 --> 01:28:17,199
supported

2163
01:28:17,199 --> 01:28:20,080
yeah so i think like probably any ll any

2164
01:28:20,080 --> 01:28:21,840
lvm language will be pretty easy to

2165
01:28:21,840 --> 01:28:23,520
support um just because like a lot of

2166
01:28:23,520 --> 01:28:25,679
our tooling works well with that

2167
01:28:25,679 --> 01:28:26,880
uh

2168
01:28:26,880 --> 01:28:28,400
i think we're looking to expand it to

2169
01:28:28,400 --> 01:28:30,159
javascript but um

2170
01:28:30,159 --> 01:28:31,760
i i don't i don't know i'm not i'm not

2171
01:28:31,760 --> 01:28:33,440
hip enough to know what other languages

2172
01:28:33,440 --> 01:28:35,040
there are besides those that people

2173
01:28:35,040 --> 01:28:36,320
would want to i guess maybe like

2174
01:28:36,320 --> 01:28:38,719
php uh is probably another pretty

2175
01:28:38,719 --> 01:28:40,639
popular one that we're gonna miss or

2176
01:28:40,639 --> 01:28:41,679
pearl but

2177
01:28:41,679 --> 01:28:44,159
yeah i i don't really see us

2178
01:28:44,159 --> 01:28:46,000
uh at least like a lot of these tools

2179
01:28:46,000 --> 01:28:48,080
end up um getting developed by like

2180
01:28:48,080 --> 01:28:49,679
colleagues of mine and like since you

2181
01:28:49,679 --> 01:28:51,760
know we don't really use like php very

2182
01:28:51,760 --> 01:28:53,440
much like it's just probably

2183
01:28:53,440 --> 01:28:54,560
you know someone else would have to

2184
01:28:54,560 --> 01:28:56,400
implement it so you're telling me q

2185
01:28:56,400 --> 01:28:58,239
basic is that of the question

2186
01:28:58,239 --> 01:29:00,000
uh yeah probably

2187
01:29:00,000 --> 01:29:02,159
okay damn all right

2188
01:29:02,159 --> 01:29:04,000
well thank you so much jonathan this was

2189
01:29:04,000 --> 01:29:05,840
uh super helpful appreciate you joining

2190
01:29:05,840 --> 01:29:08,080
us and teaching me and everyone else

2191
01:29:08,080 --> 01:29:11,120
here about fuzzing and uh yeah

2192
01:29:11,120 --> 01:29:15,360
appreciate you yeah thanks see you

2193
01:29:16,080 --> 01:29:17,280
that was cool

2194
01:29:17,280 --> 01:29:20,320
very very cool so uh next up folks we're

2195
01:29:20,320 --> 01:29:22,159
gonna jump right into the next session

2196
01:29:22,159 --> 01:29:24,800
it is threat modeling kubernetes a light

2197
01:29:24,800 --> 01:29:27,120
speed introduction and i just realized

2198
01:29:27,120 --> 01:29:28,960
that we had some speaker bios in our

2199
01:29:28,960 --> 01:29:30,880
overall rundown sheet so sorry for the

2200
01:29:30,880 --> 01:29:32,080
previous speakers but i'm going to do a

2201
01:29:32,080 --> 01:29:33,199
quick little

2202
01:29:33,199 --> 01:29:35,440
read short read through of bio here for

2203
01:29:35,440 --> 01:29:37,360
lewis who's going to be our next speaker

2204
01:29:37,360 --> 01:29:40,719
luis orchestrates containers by day and

2205
01:29:40,719 --> 01:29:42,639
hacks them at night

2206
01:29:42,639 --> 01:29:44,400
he's consulted in many roles from

2207
01:29:44,400 --> 01:29:46,800
developing software on bare metal to

2208
01:29:46,800 --> 01:29:49,600
building the infrastructure in the cloud

2209
01:29:49,600 --> 01:29:51,360
he's the head of training at control

2210
01:29:51,360 --> 01:29:55,000
plane and he's our next speaker for

2211
01:29:55,000 --> 01:29:58,800
devsecond24 let's bring louis on

2212
01:29:58,800 --> 01:29:59,760
hey guys

2213
01:29:59,760 --> 01:30:01,600
was that pretty good

2214
01:30:01,600 --> 01:30:03,440
it's always terrifying to hear your

2215
01:30:03,440 --> 01:30:05,760
buyers

2216
01:30:05,760 --> 01:30:07,280
what did i write about myself those

2217
01:30:07,280 --> 01:30:09,920
months ago what kind of mood was i in

2218
01:30:09,920 --> 01:30:12,320
and no you did a fabulous job thank you

2219
01:30:12,320 --> 01:30:14,719
for such a lovely introduction

2220
01:30:14,719 --> 01:30:16,239
no problem so are you saying i have a i

2221
01:30:16,239 --> 01:30:18,159
have a career in voice over work someday

2222
01:30:18,159 --> 01:30:19,760
please hey

2223
01:30:19,760 --> 01:30:22,000
take my money um yes

2224
01:30:22,000 --> 01:30:23,600
take take my slide deck if you want

2225
01:30:23,600 --> 01:30:26,159
actually um

2226
01:30:26,320 --> 01:30:28,719
yeah definitely i yeah

2227
01:30:28,719 --> 01:30:29,920
all right cool well i'm looking forward

2228
01:30:29,920 --> 01:30:31,679
to hearing more about this and me and

2229
01:30:31,679 --> 01:30:35,360
eric will leave you to it cool well

2230
01:30:35,360 --> 01:30:37,120
again thank you for such a lovely

2231
01:30:37,120 --> 01:30:38,400
introduction

2232
01:30:38,400 --> 01:30:40,639
hey everyone uh hope you're having a

2233
01:30:40,639 --> 01:30:42,800
great day wherever you're based um i'm

2234
01:30:42,800 --> 01:30:44,880
based over in europe um disclose more

2235
01:30:44,880 --> 01:30:46,719
information on that in a moment uh but

2236
01:30:46,719 --> 01:30:48,320
this talk is about threat modelling

2237
01:30:48,320 --> 01:30:50,880
kubernetes at light speed

2238
01:30:50,880 --> 01:30:52,960
um that might be a lie but we will

2239
01:30:52,960 --> 01:30:55,520
figure it out now um if you want to get

2240
01:30:55,520 --> 01:30:57,840
a hold of me best find me on twitter um

2241
01:30:57,840 --> 01:31:00,880
feel free to hit me in videos as well

2242
01:31:00,880 --> 01:31:02,639
um but yes

2243
01:31:02,639 --> 01:31:04,960
i work for this company called control

2244
01:31:04,960 --> 01:31:08,560
plane and so we do dev setups um

2245
01:31:08,560 --> 01:31:10,639
we just like security we like tough

2246
01:31:10,639 --> 01:31:12,960
problems to solve so if you're doing

2247
01:31:12,960 --> 01:31:14,560
anything in the cloud and you want to be

2248
01:31:14,560 --> 01:31:16,639
more secure and you've got some problems

2249
01:31:16,639 --> 01:31:18,880
then please feel free to reach out to us

2250
01:31:18,880 --> 01:31:19,760
um

2251
01:31:19,760 --> 01:31:23,040
we just love solving difficult issues

2252
01:31:23,040 --> 01:31:25,840
now whilst i do have your attention um

2253
01:31:25,840 --> 01:31:28,159
one of my favorite speakers he likes to

2254
01:31:28,159 --> 01:31:29,760
draw attention to

2255
01:31:29,760 --> 01:31:31,760
other issues outside of what we're

2256
01:31:31,760 --> 01:31:33,360
talking about today so i'm just going to

2257
01:31:33,360 --> 01:31:34,960
take a moment of your time just to talk

2258
01:31:34,960 --> 01:31:36,639
about mental health

2259
01:31:36,639 --> 01:31:39,280
i suffer from depression and i know i'm

2260
01:31:39,280 --> 01:31:41,920
not the only one who does

2261
01:31:41,920 --> 01:31:43,360
this talk that you're about to hear

2262
01:31:43,360 --> 01:31:45,280
today is all about standing up and

2263
01:31:45,280 --> 01:31:47,600
having your voice heard um

2264
01:31:47,600 --> 01:31:48,960
and so that's

2265
01:31:48,960 --> 01:31:50,400
what i'd like just to pass on to at this

2266
01:31:50,400 --> 01:31:52,639
moment your problems are your problems

2267
01:31:52,639 --> 01:31:56,080
and they are valid um you are not alone

2268
01:31:56,080 --> 01:31:58,159
if you do suffer from depression then

2269
01:31:58,159 --> 01:31:59,600
please raise your voice make sure that

2270
01:31:59,600 --> 01:32:01,440
other people know because you're awesome

2271
01:32:01,440 --> 01:32:04,239
and fantastic

2272
01:32:04,400 --> 01:32:06,719
now the other mitigation for this talk

2273
01:32:06,719 --> 01:32:09,440
is that i am always learning um and i'm

2274
01:32:09,440 --> 01:32:11,040
really happy with that

2275
01:32:11,040 --> 01:32:12,639
maybe my role of head of training

2276
01:32:12,639 --> 01:32:14,880
probably alludes to that at points

2277
01:32:14,880 --> 01:32:17,920
the terms that i use of what i know of

2278
01:32:17,920 --> 01:32:19,840
and i appreciate the time and effort

2279
01:32:19,840 --> 01:32:21,440
that it takes to write maintain and

2280
01:32:21,440 --> 01:32:23,520
contribute to open source so any

2281
01:32:23,520 --> 01:32:25,440
terminology that i use during this talk

2282
01:32:25,440 --> 01:32:27,600
today might feel aggressive because we

2283
01:32:27,600 --> 01:32:30,000
are dealing with bad things happening

2284
01:32:30,000 --> 01:32:32,400
if i do offend you in any way please

2285
01:32:32,400 --> 01:32:34,320
feel free to reach out to me and survive

2286
01:32:34,320 --> 01:32:37,280
can continue to learn

2287
01:32:37,440 --> 01:32:39,360
but let's get into this now what is

2288
01:32:39,360 --> 01:32:41,120
threat modeling so fret modeling is

2289
01:32:41,120 --> 01:32:43,199
identifying and enumerating threats and

2290
01:32:43,199 --> 01:32:44,880
vulnerabilities we're devising

2291
01:32:44,880 --> 01:32:46,880
mitigations and we're prioritizing

2292
01:32:46,880 --> 01:32:48,800
residual risks and we're escalating

2293
01:32:48,800 --> 01:32:51,440
through the most important risks

2294
01:32:51,440 --> 01:32:53,120
you should try to build the first fret

2295
01:32:53,120 --> 01:32:54,560
of the first version of threat modeling

2296
01:32:54,560 --> 01:32:56,719
without outside influence then you can

2297
01:32:56,719 --> 01:32:58,719
pull in external sources to cross-check

2298
01:32:58,719 --> 01:33:00,400
for groups thinking

2299
01:33:00,400 --> 01:33:02,719
fret modeling can be performed at any

2300
01:33:02,719 --> 01:33:04,719
stage of a project but to cope with

2301
01:33:04,719 --> 01:33:07,360
smith's how soon is now the earlier you

2302
01:33:07,360 --> 01:33:09,360
start the better it will be

2303
01:33:09,360 --> 01:33:12,000
and this isn't a shift left

2304
01:33:12,000 --> 01:33:14,159
from to someone else from the security

2305
01:33:14,159 --> 01:33:15,040
team

2306
01:33:15,040 --> 01:33:16,880
this is about being for me a decent

2307
01:33:16,880 --> 01:33:18,719
human being and respecting other

2308
01:33:18,719 --> 01:33:20,719
people's information and lives but we'll

2309
01:33:20,719 --> 01:33:24,480
discuss more about that during the talk

2310
01:33:24,480 --> 01:33:26,560
now diversity uh for frat modeling we

2311
01:33:26,560 --> 01:33:28,639
need everyone involved so race gender

2312
01:33:28,639 --> 01:33:31,040
age all shapes and sizes everyone should

2313
01:33:31,040 --> 01:33:32,560
be involved with threat modeling

2314
01:33:32,560 --> 01:33:34,320
absolutely everyone

2315
01:33:34,320 --> 01:33:35,840
from development

2316
01:33:35,840 --> 01:33:38,639
operations qa product business

2317
01:33:38,639 --> 01:33:40,480
stakeholders security

2318
01:33:40,480 --> 01:33:42,239
even about where you work if you're back

2319
01:33:42,239 --> 01:33:44,639
into an office then pro you might want

2320
01:33:44,639 --> 01:33:46,639
to potentially speak to people who are

2321
01:33:46,639 --> 01:33:48,080
at the front desk or people who are

2322
01:33:48,080 --> 01:33:50,239
serving you food because all these

2323
01:33:50,239 --> 01:33:52,159
people have part of this process that

2324
01:33:52,159 --> 01:33:55,519
keeps the product moving

2325
01:33:56,400 --> 01:33:57,280
now

2326
01:33:57,280 --> 01:34:01,040
i also help out in ctfs at kubecon um

2327
01:34:01,040 --> 01:34:03,760
for security days um i didn't

2328
01:34:03,760 --> 01:34:05,280
i can't really remember saying this

2329
01:34:05,280 --> 01:34:06,960
quote um and i don't really know where

2330
01:34:06,960 --> 01:34:08,480
it came from

2331
01:34:08,480 --> 01:34:10,159
but my point is is that i felt

2332
01:34:10,159 --> 01:34:11,600
comfortable to share this whilst i was

2333
01:34:11,600 --> 01:34:13,600
on stage and this alludes to imposter

2334
01:34:13,600 --> 01:34:15,840
syndrome um i see the best in everyone

2335
01:34:15,840 --> 01:34:17,440
else but i don't really think too much

2336
01:34:17,440 --> 01:34:19,440
about myself at times

2337
01:34:19,440 --> 01:34:20,880
i think that i'm not the only one who

2338
01:34:20,880 --> 01:34:22,800
feels like that as an industry we focus

2339
01:34:22,800 --> 01:34:24,159
on what we don't know rather than what

2340
01:34:24,159 --> 01:34:25,760
we do know

2341
01:34:25,760 --> 01:34:27,679
now ian is someone who i have the utmost

2342
01:34:27,679 --> 01:34:29,760
respect for and

2343
01:34:29,760 --> 01:34:31,840
ian gives me insane stuff like this

2344
01:34:31,840 --> 01:34:33,360
gives me the confidence to be here to

2345
01:34:33,360 --> 01:34:35,040
stand in front of you today

2346
01:34:35,040 --> 01:34:36,880
so make sure that you're more like ian

2347
01:34:36,880 --> 01:34:38,000
and make sure that you can empower

2348
01:34:38,000 --> 01:34:39,440
others to make sure that they feel

2349
01:34:39,440 --> 01:34:40,800
comfortable in sharing what their

2350
01:34:40,800 --> 01:34:42,639
opinions are so that their voice can be

2351
01:34:42,639 --> 01:34:44,880
heard

2352
01:34:45,440 --> 01:34:47,360
now how to fret model we're going to go

2353
01:34:47,360 --> 01:34:48,800
through these four steps throughout this

2354
01:34:48,800 --> 01:34:51,600
talk today what are we building what can

2355
01:34:51,600 --> 01:34:53,360
go wrong once it's built

2356
01:34:53,360 --> 01:34:55,280
what are we going to do about the things

2357
01:34:55,280 --> 01:34:57,199
that can go wrong and are we doing a

2358
01:34:57,199 --> 01:34:58,639
good job

2359
01:34:58,639 --> 01:35:00,800
now this stage have a think about why

2360
01:35:00,800 --> 01:35:03,119
not run this threat modeling workshop at

2361
01:35:03,119 --> 01:35:05,600
your own at your own place

2362
01:35:05,600 --> 01:35:07,040
let's get you into a position where you

2363
01:35:07,040 --> 01:35:08,560
can talk with confidence to be able to

2364
01:35:08,560 --> 01:35:10,960
run this workshop

2365
01:35:10,960 --> 01:35:12,639
so back to our points

2366
01:35:12,639 --> 01:35:15,760
wtf are we building here um

2367
01:35:15,760 --> 01:35:17,840
we have an assumption here on this talk

2368
01:35:17,840 --> 01:35:19,040
that you've got a bit of an

2369
01:35:19,040 --> 01:35:21,199
understanding as to kubernetes we're

2370
01:35:21,199 --> 01:35:22,480
going to be more focused towards threat

2371
01:35:22,480 --> 01:35:24,800
modeling aspect um

2372
01:35:24,800 --> 01:35:26,800
if you do have questions again i'll

2373
01:35:26,800 --> 01:35:28,000
share my twitter handle at the end

2374
01:35:28,000 --> 01:35:29,520
please feel free to drop me a message

2375
01:35:29,520 --> 01:35:31,360
it's my day job but equally i love

2376
01:35:31,360 --> 01:35:34,080
helping others

2377
01:35:35,360 --> 01:35:38,960
so your business the way you work is not

2378
01:35:38,960 --> 01:35:41,040
my business unless i do work with you

2379
01:35:41,040 --> 01:35:42,400
but let's leave that

2380
01:35:42,400 --> 01:35:44,719
my point here is is that all businesses

2381
01:35:44,719 --> 01:35:46,400
are again different shapes and sizes you

2382
01:35:46,400 --> 01:35:47,600
might be working for a large

2383
01:35:47,600 --> 01:35:49,920
multinational corporation that's existed

2384
01:35:49,920 --> 01:35:52,719
since some would say the dawn of time

2385
01:35:52,719 --> 01:35:54,800
and some other people in this conference

2386
01:35:54,800 --> 01:35:56,400
today they might have created their

2387
01:35:56,400 --> 01:35:58,639
startup this morning um

2388
01:35:58,639 --> 01:35:59,920
and now you're just trying to figure out

2389
01:35:59,920 --> 01:36:02,000
the product that you need to launch

2390
01:36:02,000 --> 01:36:02,800
now

2391
01:36:02,800 --> 01:36:05,119
that's not all businesses are the shape

2392
01:36:05,119 --> 01:36:07,360
and size and and this is also the same

2393
01:36:07,360 --> 01:36:08,960
for your adversary so we're going to

2394
01:36:08,960 --> 01:36:10,480
have a look at different types of

2395
01:36:10,480 --> 01:36:13,199
adversaries that we might have

2396
01:36:13,199 --> 01:36:14,480
later

2397
01:36:14,480 --> 01:36:15,679
in the talk

2398
01:36:15,679 --> 01:36:18,400
but what type of damage can be inflicted

2399
01:36:18,400 --> 01:36:20,320
so we could have reputational damage or

2400
01:36:20,320 --> 01:36:21,840
financial loss

2401
01:36:21,840 --> 01:36:23,520
threats represent potential ways for

2402
01:36:23,520 --> 01:36:25,679
information information assets can be

2403
01:36:25,679 --> 01:36:26,880
attacked

2404
01:36:26,880 --> 01:36:28,639
let's use an example of an information

2405
01:36:28,639 --> 01:36:31,520
outset so is anyone watching this talk

2406
01:36:31,520 --> 01:36:33,920
right now are you willing to uh send me

2407
01:36:33,920 --> 01:36:35,840
your credit card number and potentially

2408
01:36:35,840 --> 01:36:39,520
cvv number in the chat

2409
01:36:39,520 --> 01:36:41,040
hopefully you don't

2410
01:36:41,040 --> 01:36:43,360
but um and i hope that's because you

2411
01:36:43,360 --> 01:36:45,040
don't feel comfortable to do so and you

2412
01:36:45,040 --> 01:36:46,880
don't want to share that information

2413
01:36:46,880 --> 01:36:49,679
equally i've got some post-it notes here

2414
01:36:49,679 --> 01:36:51,679
so this is my database um so if you do

2415
01:36:51,679 --> 01:36:54,080
send me your credit card then i will

2416
01:36:54,080 --> 01:36:55,920
store it here and again i really hope at

2417
01:36:55,920 --> 01:36:57,360
the stage no one is sending me for

2418
01:36:57,360 --> 01:37:00,560
credit card details if you are

2419
01:37:00,560 --> 01:37:02,719
we'll figure that problem afterwards

2420
01:37:02,719 --> 01:37:05,119
now in either case frets can exist which

2421
01:37:05,119 --> 01:37:07,040
if realized could compromise one or more

2422
01:37:07,040 --> 01:37:08,560
of the following key priorities of the

2423
01:37:08,560 --> 01:37:11,520
data so we've got confidentiality so

2424
01:37:11,520 --> 01:37:13,360
if i got access to your credit card and

2425
01:37:13,360 --> 01:37:15,679
your cvd did itself a credit card number

2426
01:37:15,679 --> 01:37:18,159
then i've got access to some information

2427
01:37:18,159 --> 01:37:20,639
integrity so

2428
01:37:20,639 --> 01:37:22,960
if i want to pay say let's talk about

2429
01:37:22,960 --> 01:37:25,679
james say i want to pay james five uh

2430
01:37:25,679 --> 01:37:28,320
pounds um but if andy modifies the

2431
01:37:28,320 --> 01:37:31,119
request that i send then andy might

2432
01:37:31,119 --> 01:37:32,080
receive

2433
01:37:32,080 --> 01:37:34,320
that 10 pounds that's an issue with our

2434
01:37:34,320 --> 01:37:36,960
integrity finally we have availability

2435
01:37:36,960 --> 01:37:38,800
so am i available to complete this

2436
01:37:38,800 --> 01:37:41,119
transaction can i actually send this

2437
01:37:41,119 --> 01:37:43,839
request across

2438
01:37:45,199 --> 01:37:48,239
now back to our case studies um there

2439
01:37:48,239 --> 01:37:49,600
should be a scheme in place for how

2440
01:37:49,600 --> 01:37:51,360
important the information is

2441
01:37:51,360 --> 01:37:52,080
so

2442
01:37:52,080 --> 01:37:54,000
how much money is your business willing

2443
01:37:54,000 --> 01:37:56,159
to lose so let's put a figure on that

2444
01:37:56,159 --> 01:37:58,480
man let's say 400 thousand and we'll use

2445
01:37:58,480 --> 01:37:59,920
dollars as we're now in the american

2446
01:37:59,920 --> 01:38:01,119
time zone

2447
01:38:01,119 --> 01:38:03,520
um if you're a startup if you've just

2448
01:38:03,520 --> 01:38:05,119
started up your business today and

2449
01:38:05,119 --> 01:38:07,600
you're counting the pennies then four

2450
01:38:07,600 --> 01:38:10,400
thousand dollars is a lot four hundred

2451
01:38:10,400 --> 01:38:12,159
thousand dollars in stanley is a lot of

2452
01:38:12,159 --> 01:38:14,000
money and that's a risk that you might

2453
01:38:14,000 --> 01:38:16,320
not be able to afford whereas if you're

2454
01:38:16,320 --> 01:38:18,080
a multinational company then that could

2455
01:38:18,080 --> 01:38:19,040
be

2456
01:38:19,040 --> 01:38:21,280
cheaper essentially than fixing a

2457
01:38:21,280 --> 01:38:23,119
problem

2458
01:38:23,119 --> 01:38:24,560
but let's look at it from a different

2459
01:38:24,560 --> 01:38:26,159
perspective now so instead of talking

2460
01:38:26,159 --> 01:38:29,199
about money let's talk about data so how

2461
01:38:29,199 --> 01:38:31,920
much customer data could you lose

2462
01:38:31,920 --> 01:38:33,600
so let's say the customer data in this

2463
01:38:33,600 --> 01:38:36,000
instance is the name the postal address

2464
01:38:36,000 --> 01:38:38,719
and a personal contact number

2465
01:38:38,719 --> 01:38:40,560
now if you have a startup again then you

2466
01:38:40,560 --> 01:38:41,920
might say to yourself well actually

2467
01:38:41,920 --> 01:38:44,400
we've our customer base is potentially

2468
01:38:44,400 --> 01:38:48,320
just our family and some close friends

2469
01:38:48,480 --> 01:38:50,400
it's a risk i guess we're willing to

2470
01:38:50,400 --> 01:38:51,199
take

2471
01:38:51,199 --> 01:38:53,119
whereas if you're a multinational bank

2472
01:38:53,119 --> 01:38:54,960
for instance and it's

2473
01:38:54,960 --> 01:38:57,600
associated with people's life savings

2474
01:38:57,600 --> 01:38:59,280
all of a sudden that name address and

2475
01:38:59,280 --> 01:39:00,800
personal mobile number if that

2476
01:39:00,800 --> 01:39:02,239
information gets out into the public

2477
01:39:02,239 --> 01:39:04,880
then that is a huge cost from reputation

2478
01:39:04,880 --> 01:39:06,560
from fines

2479
01:39:06,560 --> 01:39:08,639
everything else

2480
01:39:08,639 --> 01:39:10,080
so

2481
01:39:10,080 --> 01:39:11,520
i guess that's almost like a joke to an

2482
01:39:11,520 --> 01:39:12,800
extent because i don't think that would

2483
01:39:12,800 --> 01:39:15,040
happen but there's also a serious aspect

2484
01:39:15,040 --> 01:39:17,840
to this and that is loss of life so what

2485
01:39:17,840 --> 01:39:19,600
happens when a secret needs to be a

2486
01:39:19,600 --> 01:39:20,639
secret

2487
01:39:20,639 --> 01:39:22,719
so you might have personal life choices

2488
01:39:22,719 --> 01:39:25,119
and they might not be aligned with safer

2489
01:39:25,119 --> 01:39:27,440
politics where you live or other

2490
01:39:27,440 --> 01:39:29,199
religious people around you

2491
01:39:29,199 --> 01:39:30,800
what happens if someone finds out that

2492
01:39:30,800 --> 01:39:32,400
personal identifying

2493
01:39:32,400 --> 01:39:33,600
personal information that you thought

2494
01:39:33,600 --> 01:39:35,920
was secret what happens if they find out

2495
01:39:35,920 --> 01:39:38,239
and also military what happens if

2496
01:39:38,239 --> 01:39:40,560
someone's identified as being somewhere

2497
01:39:40,560 --> 01:39:41,840
because they're running around a track

2498
01:39:41,840 --> 01:39:43,920
and they keep an er like on their track

2499
01:39:43,920 --> 01:39:46,560
time says and sharing with others

2500
01:39:46,560 --> 01:39:48,159
and this isn't just down to the person

2501
01:39:48,159 --> 01:39:50,239
in this instance either this is also by

2502
01:39:50,239 --> 01:39:52,480
the people around them as well it's

2503
01:39:52,480 --> 01:39:54,639
quite quick and easy to find information

2504
01:39:54,639 --> 01:39:56,880
on people so if they can be identified

2505
01:39:56,880 --> 01:39:58,800
and other people around them then this

2506
01:39:58,800 --> 01:40:00,320
could all go wrong so i hope i have your

2507
01:40:00,320 --> 01:40:01,600
attention when i say that this

2508
01:40:01,600 --> 01:40:05,360
information is really important to us

2509
01:40:05,360 --> 01:40:06,800
now let's have a look at our adversary

2510
01:40:06,800 --> 01:40:08,480
matrix here so we're going to start in

2511
01:40:08,480 --> 01:40:09,679
the top left and we're going to look at

2512
01:40:09,679 --> 01:40:12,080
a vandal now a vandal is someone that i

2513
01:40:12,080 --> 01:40:13,440
would say

2514
01:40:13,440 --> 01:40:15,280
does a little bit of this for fun and

2515
01:40:15,280 --> 01:40:17,840
they look at youtube videos um i guess

2516
01:40:17,840 --> 01:40:18,880
they don't think they're breaking the

2517
01:40:18,880 --> 01:40:21,119
world it might be like

2518
01:40:21,119 --> 01:40:22,159
back at school you might have been

2519
01:40:22,159 --> 01:40:23,199
looking at running quake or

2520
01:40:23,199 --> 01:40:25,760
counter-strike on your school network

2521
01:40:25,760 --> 01:40:27,920
that to me is a script kitty

2522
01:40:27,920 --> 01:40:30,000
um

2523
01:40:30,000 --> 01:40:30,880
now

2524
01:40:30,880 --> 01:40:32,800
you going on from script kitty you might

2525
01:40:32,800 --> 01:40:35,040
have a motivated individual

2526
01:40:35,040 --> 01:40:37,920
so who is a motivated individual well if

2527
01:40:37,920 --> 01:40:39,360
you're doing a startup they might be a

2528
01:40:39,360 --> 01:40:41,280
competing starter

2529
01:40:41,280 --> 01:40:45,040
um this might be someone who's taken uh

2530
01:40:45,040 --> 01:40:47,280
just doesn't play doesn't like you this

2531
01:40:47,280 --> 01:40:49,280
could be this could be someone that you

2532
01:40:49,280 --> 01:40:50,800
came and said hi to you but you didn't

2533
01:40:50,800 --> 01:40:51,920
recognize them and they've taken it

2534
01:40:51,920 --> 01:40:53,920
personally they might be motivated in a

2535
01:40:53,920 --> 01:40:56,480
way that they want to just uh

2536
01:40:56,480 --> 01:40:57,840
either take down your website for a

2537
01:40:57,840 --> 01:41:00,719
moment or just make you look bad

2538
01:41:00,719 --> 01:41:02,719
now with such terrible things to say i'd

2539
01:41:02,719 --> 01:41:04,480
like to introduce you to freddie and

2540
01:41:04,480 --> 01:41:08,880
freddie is an amazing amazing person um

2541
01:41:08,880 --> 01:41:11,040
they recently came up to where i'm based

2542
01:41:11,040 --> 01:41:13,520
i'm a chapter leader um and they gave a

2543
01:41:13,520 --> 01:41:15,119
walkthrough about hack the box and how

2544
01:41:15,119 --> 01:41:16,480
they do it

2545
01:41:16,480 --> 01:41:18,159
if you're interested in learning more

2546
01:41:18,159 --> 01:41:20,320
about these techniques about how you can

2547
01:41:20,320 --> 01:41:22,159
breach um from that perspective then

2548
01:41:22,159 --> 01:41:23,840
this is someone i definitely recommend

2549
01:41:23,840 --> 01:41:26,480
that follow

2550
01:41:27,119 --> 01:41:28,880
now moving on for motivated individual

2551
01:41:28,880 --> 01:41:30,719
let's look at insiders so a motivated

2552
01:41:30,719 --> 01:41:32,960
individual potentially i'm thinking that

2553
01:41:32,960 --> 01:41:35,119
they're outside of our organization now

2554
01:41:35,119 --> 01:41:36,480
what happens if they're inside your

2555
01:41:36,480 --> 01:41:37,760
organization

2556
01:41:37,760 --> 01:41:39,760
well

2557
01:41:39,760 --> 01:41:41,679
bad things potentially i'd probably

2558
01:41:41,679 --> 01:41:43,199
prefer them to be outside but anyway it

2559
01:41:43,199 --> 01:41:44,880
doesn't matter um

2560
01:41:44,880 --> 01:41:47,119
it's not great but that's where we go

2561
01:41:47,119 --> 01:41:49,760
we can't control other people um

2562
01:41:49,760 --> 01:41:51,440
and how they feel so this might be

2563
01:41:51,440 --> 01:41:53,040
someone who's disgruntled maybe they've

2564
01:41:53,040 --> 01:41:54,320
seen some information to say that

2565
01:41:54,320 --> 01:41:56,719
they're actually earning 20 less than

2566
01:41:56,719 --> 01:41:58,159
everyone else on the same job or

2567
01:41:58,159 --> 01:41:59,600
something so all of a sudden they've got

2568
01:41:59,600 --> 01:42:01,840
a reason to feel a bit hard done by by

2569
01:42:01,840 --> 01:42:04,239
the business um they could also be

2570
01:42:04,239 --> 01:42:06,239
manipulated um

2571
01:42:06,239 --> 01:42:08,159
and again we'll look into deeper

2572
01:42:08,159 --> 01:42:10,320
why people might get manipulated but

2573
01:42:10,320 --> 01:42:11,679
equally think about over the last couple

2574
01:42:11,679 --> 01:42:13,679
of years think why we got these visual

2575
01:42:13,679 --> 01:42:16,080
conferences with covid during covet lots

2576
01:42:16,080 --> 01:42:17,679
of people use the internet as a way to

2577
01:42:17,679 --> 01:42:19,760
be able to connect to networks and share

2578
01:42:19,760 --> 01:42:22,000
personal information again and in places

2579
01:42:22,000 --> 01:42:22,960
where they

2580
01:42:22,960 --> 01:42:25,199
have trust

2581
01:42:25,199 --> 01:42:27,119
this information could also manipulate

2582
01:42:27,119 --> 01:42:28,719
people and that's what leads me on to

2583
01:42:28,719 --> 01:42:30,239
the next part about being organized

2584
01:42:30,239 --> 01:42:31,920
crime

2585
01:42:31,920 --> 01:42:34,480
so how can people be manipulated well um

2586
01:42:34,480 --> 01:42:36,159
it could be physical violence it could

2587
01:42:36,159 --> 01:42:37,679
literally be that

2588
01:42:37,679 --> 01:42:39,199
something's bad is gonna happen if you

2589
01:42:39,199 --> 01:42:40,560
don't do this for me

2590
01:42:40,560 --> 01:42:42,480
and that is very much a hollywood kind

2591
01:42:42,480 --> 01:42:44,719
of thought but the one that

2592
01:42:44,719 --> 01:42:47,199
i think is a lot harder to deal with is

2593
01:42:47,199 --> 01:42:49,440
to say well what happens if

2594
01:42:49,440 --> 01:42:51,040
say that there's a gofundme page that

2595
01:42:51,040 --> 01:42:53,119
you put in place for uh

2596
01:42:53,119 --> 01:42:54,800
a sick relative and you're trying to

2597
01:42:54,800 --> 01:42:56,960
raise some money for medical bills

2598
01:42:56,960 --> 01:42:58,560
what happens if your organized crime

2599
01:42:58,560 --> 01:43:01,119
person comes to you and says right

2600
01:43:01,119 --> 01:43:02,960
you need to have this amount i'll give

2601
01:43:02,960 --> 01:43:05,679
you that if you give me access to this

2602
01:43:05,679 --> 01:43:07,600
and we're very privileged to be able to

2603
01:43:07,600 --> 01:43:09,760
work in an industry where our salaries

2604
01:43:09,760 --> 01:43:12,159
are quite good but then

2605
01:43:12,159 --> 01:43:14,320
what happens if if it's at this moment

2606
01:43:14,320 --> 01:43:15,760
in time where you feel comfortable but

2607
01:43:15,760 --> 01:43:17,440
then all of a sudden you have to make

2608
01:43:17,440 --> 01:43:18,880
this decision

2609
01:43:18,880 --> 01:43:20,080
now

2610
01:43:20,080 --> 01:43:22,400
and the other point to stress here is

2611
01:43:22,400 --> 01:43:24,480
up until this point i've lived through

2612
01:43:24,480 --> 01:43:26,560
either two or three recessions i don't

2613
01:43:26,560 --> 01:43:28,400
know what's happening right now in the

2614
01:43:28,400 --> 01:43:31,440
world um i've lived through a pandemic

2615
01:43:31,440 --> 01:43:34,400
i've lived through a volcano that caused

2616
01:43:34,400 --> 01:43:36,159
air travel to cease

2617
01:43:36,159 --> 01:43:38,400
and i've also lived through leicester

2618
01:43:38,400 --> 01:43:41,040
city winning the premier league

2619
01:43:41,040 --> 01:43:43,040
none of these things i would expect to

2620
01:43:43,040 --> 01:43:45,040
like i would ex maybe possibly one of

2621
01:43:45,040 --> 01:43:47,040
these things i'd expect to happen but

2622
01:43:47,040 --> 01:43:48,480
not all of them

2623
01:43:48,480 --> 01:43:50,000
so even though right now you might feel

2624
01:43:50,000 --> 01:43:53,199
comfortable what happens in the future

2625
01:43:53,199 --> 01:43:54,000
so

2626
01:43:54,000 --> 01:43:55,840
i'd like to play a quick game here so

2627
01:43:55,840 --> 01:43:56,800
i'm going to call this one the

2628
01:43:56,800 --> 01:43:58,560
apprentice so

2629
01:43:58,560 --> 01:44:00,159
close your eyes and think that you're at

2630
01:44:00,159 --> 01:44:02,320
either a conference a gig or a sports

2631
01:44:02,320 --> 01:44:03,440
event

2632
01:44:03,440 --> 01:44:05,119
in person

2633
01:44:05,119 --> 01:44:07,119
now there could be 10 people 100 people

2634
01:44:07,119 --> 01:44:09,600
thousands or 100 000 people and just

2635
01:44:09,600 --> 01:44:11,679
look around you and now think of this as

2636
01:44:11,679 --> 01:44:15,360
your organization as where you work

2637
01:44:15,360 --> 01:44:16,960
so of all these people that work in the

2638
01:44:16,960 --> 01:44:18,560
organization i'm just going to give a

2639
01:44:18,560 --> 01:44:21,600
shout out to steve um steve if you could

2640
01:44:21,600 --> 01:44:23,760
raise your hand in this flood of people

2641
01:44:23,760 --> 01:44:26,080
um i sent you an email today steve

2642
01:44:26,080 --> 01:44:28,159
because i identified you as a c-level

2643
01:44:28,159 --> 01:44:30,320
exec thanks to some website where we all

2644
01:44:30,320 --> 01:44:31,920
share our careers

2645
01:44:31,920 --> 01:44:33,840
i emailed you your password because i

2646
01:44:33,840 --> 01:44:36,560
found your password um and not only did

2647
01:44:36,560 --> 01:44:38,400
i find your password but i used it to

2648
01:44:38,400 --> 01:44:40,320
access your machine and i've taken a

2649
01:44:40,320 --> 01:44:42,320
webcam video view which

2650
01:44:42,320 --> 01:44:43,840
i don't think is going to win any oscars

2651
01:44:43,840 --> 01:44:45,280
but i don't think you want anyone else

2652
01:44:45,280 --> 01:44:47,679
to see your performance so this doesn't

2653
01:44:47,679 --> 01:44:49,360
sound too good for steve right now and

2654
01:44:49,360 --> 01:44:50,800
i'm just trying to manipulate steve on

2655
01:44:50,800 --> 01:44:52,480
all the emotional levels just so that i

2656
01:44:52,480 --> 01:44:56,080
can get steve to do what i want to do

2657
01:44:56,480 --> 01:44:58,480
now this again this might cause you to

2658
01:44:58,480 --> 01:44:59,920
be like well that's funny because we

2659
01:44:59,920 --> 01:45:01,440
know that it's probably just from a

2660
01:45:01,440 --> 01:45:03,679
security breach exactly like so this

2661
01:45:03,679 --> 01:45:05,520
data might have been released from

2662
01:45:05,520 --> 01:45:07,520
elsewhere from another thing and they

2663
01:45:07,520 --> 01:45:08,960
just use the same password with that

2664
01:45:08,960 --> 01:45:10,239
email address

2665
01:45:10,239 --> 01:45:12,639
but it allows us leverage and so it's

2666
01:45:12,639 --> 01:45:14,159
important right here to educate your

2667
01:45:14,159 --> 01:45:16,800
team um on security so

2668
01:45:16,800 --> 01:45:18,719
show them have i been phoned explain to

2669
01:45:18,719 --> 01:45:20,080
them about what happens when these

2670
01:45:20,080 --> 01:45:22,159
things go okay

2671
01:45:22,159 --> 01:45:23,920
look towards password managers so that

2672
01:45:23,920 --> 01:45:25,199
they don't use the same password for

2673
01:45:25,199 --> 01:45:27,199
absolutely everything on the internet

2674
01:45:27,199 --> 01:45:29,199
but again give them the confidence that

2675
01:45:29,199 --> 01:45:30,960
they can come to you that they don't

2676
01:45:30,960 --> 01:45:32,320
need to have to be ashamed to come to

2677
01:45:32,320 --> 01:45:33,600
you to say they think something's gone

2678
01:45:33,600 --> 01:45:35,600
wrong

2679
01:45:35,600 --> 01:45:37,600
now back to our adversary matrix uh

2680
01:45:37,600 --> 01:45:39,119
let's have a look at the cloud service

2681
01:45:39,119 --> 01:45:40,719
insider so

2682
01:45:40,719 --> 01:45:42,400
when this isn't in your office anymore

2683
01:45:42,400 --> 01:45:44,159
this isn't within your organization but

2684
01:45:44,159 --> 01:45:45,440
thanks to the cloud we're renting

2685
01:45:45,440 --> 01:45:47,840
someone else's computer but this

2686
01:45:47,840 --> 01:45:49,679
computer does exist somewhere in the

2687
01:45:49,679 --> 01:45:50,639
world

2688
01:45:50,639 --> 01:45:52,719
um at a recent conference i was able to

2689
01:45:52,719 --> 01:45:54,560
touch the cloud because they brought a

2690
01:45:54,560 --> 01:45:57,360
cloud server with them

2691
01:45:57,360 --> 01:45:58,560
how can you trust that person who's

2692
01:45:58,560 --> 01:46:00,080
touching that cloud server how can you

2693
01:46:00,080 --> 01:46:01,679
trust a person who's employed by a third

2694
01:46:01,679 --> 01:46:03,520
party that you're dependent on to write

2695
01:46:03,520 --> 01:46:06,159
the code and that's all being signed and

2696
01:46:06,159 --> 01:46:07,440
processed how do we know whether it's

2697
01:46:07,440 --> 01:46:09,760
been checked how do we know these things

2698
01:46:09,760 --> 01:46:11,440
so that's also something else that we

2699
01:46:11,440 --> 01:46:13,119
could uh

2700
01:46:13,119 --> 01:46:15,040
have an issue with

2701
01:46:15,040 --> 01:46:17,440
now going on to our final game of who's

2702
01:46:17,440 --> 01:46:19,440
sat next to you anyway go back to

2703
01:46:19,440 --> 01:46:21,199
wherever you were in your mind palace uh

2704
01:46:21,199 --> 01:46:23,119
with all those people and now if you're

2705
01:46:23,119 --> 01:46:25,119
looking in that direction look the other

2706
01:46:25,119 --> 01:46:26,639
way and i think you'll be able to see

2707
01:46:26,639 --> 01:46:28,639
sofia is sat next to you right now

2708
01:46:28,639 --> 01:46:30,239
smiling back

2709
01:46:30,239 --> 01:46:31,840
you do know that sofia works for a

2710
01:46:31,840 --> 01:46:33,679
government agency with unlimited funds

2711
01:46:33,679 --> 01:46:35,600
towards offensive security don't you and

2712
01:46:35,600 --> 01:46:37,040
you also know that sophia isn't really

2713
01:46:37,040 --> 01:46:38,080
her

2714
01:46:38,080 --> 01:46:39,600
isn't their real name because that's an

2715
01:46:39,600 --> 01:46:41,360
identity that was produced by a

2716
01:46:41,360 --> 01:46:42,880
government for them

2717
01:46:42,880 --> 01:46:44,560
how do you manage that threat how do you

2718
01:46:44,560 --> 01:46:46,080
manage it when you've got a government

2719
01:46:46,080 --> 01:46:48,400
agency who has unlimited budget lots of

2720
01:46:48,400 --> 01:46:50,320
time and resource depend uh to spend on

2721
01:46:50,320 --> 01:46:52,560
new offensive techniques and um have

2722
01:46:52,560 --> 01:46:54,639
access to undisclosed information prior

2723
01:46:54,639 --> 01:46:56,880
to public knowledge

2724
01:46:56,880 --> 01:46:58,719
so we're going to try and do our best in

2725
01:46:58,719 --> 01:47:00,639
this so here is an example of a section

2726
01:47:00,639 --> 01:47:02,400
of the data flow diagram that we use

2727
01:47:02,400 --> 01:47:04,480
that we use in our full workshop for

2728
01:47:04,480 --> 01:47:06,880
fret modeling kubernetes a data flow

2729
01:47:06,880 --> 01:47:08,800
diagram should describe the complete set

2730
01:47:08,800 --> 01:47:11,360
of data the trust boundaries all user

2731
01:47:11,360 --> 01:47:13,920
roles all network interfaces

2732
01:47:13,920 --> 01:47:15,440
we should make it self-contained and

2733
01:47:15,440 --> 01:47:17,119
most importantly here it should be

2734
01:47:17,119 --> 01:47:18,960
accurate

2735
01:47:18,960 --> 01:47:20,320
to make this easier for others to

2736
01:47:20,320 --> 01:47:22,159
consume and contribute towards there can

2737
01:47:22,159 --> 01:47:23,920
be many levels that drill down further

2738
01:47:23,920 --> 01:47:26,000
into system components so in this

2739
01:47:26,000 --> 01:47:27,440
instance remember to drop the ladder for

2740
01:47:27,440 --> 01:47:30,639
others so they have the ability to climb

2741
01:47:30,639 --> 01:47:32,719
now here's another example of the cncf

2742
01:47:32,719 --> 01:47:34,719
financial services user group kubernetes

2743
01:47:34,719 --> 01:47:36,800
data flow diagram the link is within the

2744
01:47:36,800 --> 01:47:39,440
slides we've identified state flow with

2745
01:47:39,440 --> 01:47:41,280
the black arrows and the black arrows

2746
01:47:41,280 --> 01:47:43,040
are crossing a machine segregation

2747
01:47:43,040 --> 01:47:44,800
between nodes as can be seen with the

2748
01:47:44,800 --> 01:47:46,400
green boundaries

2749
01:47:46,400 --> 01:47:47,920
there is a lot of information here but

2750
01:47:47,920 --> 01:47:49,040
if you want to know more about these

2751
01:47:49,040 --> 01:47:52,719
then please follow the link to the repo

2752
01:47:53,119 --> 01:47:54,719
so how can attacker look for an entry

2753
01:47:54,719 --> 01:47:57,360
point well publicly publicly available

2754
01:47:57,360 --> 01:47:59,440
information is the easiest to root in

2755
01:47:59,440 --> 01:48:01,520
now rory is someone again that i and

2756
01:48:01,520 --> 01:48:03,679
many others look up to in the industry

2757
01:48:03,679 --> 01:48:05,520
he has a fantastic blog post about

2758
01:48:05,520 --> 01:48:08,000
finding publicly accessible clusters

2759
01:48:08,000 --> 01:48:09,440
you might think to yourself why would

2760
01:48:09,440 --> 01:48:10,880
someone want to have a publicly

2761
01:48:10,880 --> 01:48:13,760
accessible cluster well um as you might

2762
01:48:13,760 --> 01:48:15,440
have seen kubernetes is kind of a big

2763
01:48:15,440 --> 01:48:16,880
thing at the moment and there's still

2764
01:48:16,880 --> 01:48:18,159
people coming into this and still

2765
01:48:18,159 --> 01:48:19,840
getting started in learning

2766
01:48:19,840 --> 01:48:21,760
when i learn i usually make mistakes

2767
01:48:21,760 --> 01:48:24,880
unknowingly um but that is how i learn

2768
01:48:24,880 --> 01:48:27,040
and so on that basis this is why we need

2769
01:48:27,040 --> 01:48:28,480
a fret model again this is why we need

2770
01:48:28,480 --> 01:48:30,000
to try to figure out when we're putting

2771
01:48:30,000 --> 01:48:31,679
fingers in place what is the fret

2772
01:48:31,679 --> 01:48:34,560
associated with it

2773
01:48:35,040 --> 01:48:37,679
so now we'll go on to what can uh so now

2774
01:48:37,679 --> 01:48:39,119
that we know what we're building let's

2775
01:48:39,119 --> 01:48:40,960
have a look at what can go wrong so for

2776
01:48:40,960 --> 01:48:43,520
example the alignment of this header has

2777
01:48:43,520 --> 01:48:46,000
gone wrong

2778
01:48:46,000 --> 01:48:48,080
now this is where your experience is

2779
01:48:48,080 --> 01:48:50,080
required has anyone

2780
01:48:50,080 --> 01:48:52,800
have heard of a term uh

2781
01:48:52,800 --> 01:48:55,119
have you ever used term secret source uh

2782
01:48:55,119 --> 01:48:57,199
when building products

2783
01:48:57,199 --> 01:48:58,800
what happens when someone else finds out

2784
01:48:58,800 --> 01:49:00,719
about your secret source well it's no

2785
01:49:00,719 --> 01:49:02,719
longer secret anymore

2786
01:49:02,719 --> 01:49:04,639
if something doesn't look or feel right

2787
01:49:04,639 --> 01:49:06,560
now is the time to raise it

2788
01:49:06,560 --> 01:49:08,560
we can also use fret intelligence

2789
01:49:08,560 --> 01:49:11,280
sources such as these listed here

2790
01:49:11,280 --> 01:49:14,080
um and this is lots of people collating

2791
01:49:14,080 --> 01:49:15,920
information to help us out

2792
01:49:15,920 --> 01:49:16,800
and

2793
01:49:16,800 --> 01:49:18,239
as associated with what i feel with

2794
01:49:18,239 --> 01:49:20,560
cloud native um all these uh all these

2795
01:49:20,560 --> 01:49:22,719
uh intelligent sources are us standing

2796
01:49:22,719 --> 01:49:24,400
on the shoulders of giants

2797
01:49:24,400 --> 01:49:26,159
so this is these techniques are our

2798
01:49:26,159 --> 01:49:28,320
starting points and from there we use

2799
01:49:28,320 --> 01:49:30,239
modeling techniques such as stride and

2800
01:49:30,239 --> 01:49:32,480
attack trees to dive into our use case

2801
01:49:32,480 --> 01:49:34,239
detail

2802
01:49:34,239 --> 01:49:35,840
so let's just have a quick look at a

2803
01:49:35,840 --> 01:49:37,920
microsoft threat matrix for kubernetes

2804
01:49:37,920 --> 01:49:39,440
again we'll be touching on a few of

2805
01:49:39,440 --> 01:49:40,800
these but the main thing i would like

2806
01:49:40,800 --> 01:49:42,400
you just to be aware of here is is that

2807
01:49:42,400 --> 01:49:44,239
we got red and green

2808
01:49:44,239 --> 01:49:46,320
red is a depreciated technique and green

2809
01:49:46,320 --> 01:49:48,000
are new techniques

2810
01:49:48,000 --> 01:49:49,920
kubernetes is constantly evolving and we

2811
01:49:49,920 --> 01:49:53,199
need to evolve with it too

2812
01:49:53,360 --> 01:49:54,719
so we're going to talk through the

2813
01:49:54,719 --> 01:49:57,679
stride modeling technique now um i can

2814
01:49:57,679 --> 01:49:59,360
never really remember what sorry it

2815
01:49:59,360 --> 01:50:01,679
stands for off top of my head i i should

2816
01:50:01,679 --> 01:50:04,400
practice it more but what we what would

2817
01:50:04,400 --> 01:50:06,159
we stride we destroy the process for

2818
01:50:06,159 --> 01:50:09,040
data flows stores and actors and we want

2819
01:50:09,040 --> 01:50:11,760
to know what can go wrong

2820
01:50:11,760 --> 01:50:14,960
so s stands for spoofing how do you

2821
01:50:14,960 --> 01:50:16,560
actually know that i'm lewis how do you

2822
01:50:16,560 --> 01:50:17,760
know that i don't have a green screen

2823
01:50:17,760 --> 01:50:19,360
around me and that i'm not using like a

2824
01:50:19,360 --> 01:50:21,599
snap filter on my face

2825
01:50:21,599 --> 01:50:23,360
also one of my intentions in giving this

2826
01:50:23,360 --> 01:50:24,960
talk to you what

2827
01:50:24,960 --> 01:50:26,560
am i actually thinking about teaching

2828
01:50:26,560 --> 01:50:27,760
you about fret modeling or am i just

2829
01:50:27,760 --> 01:50:29,280
trying to push you into a direction to

2830
01:50:29,280 --> 01:50:30,639
do something else

2831
01:50:30,639 --> 01:50:32,480
but let's go to a banking for an example

2832
01:50:32,480 --> 01:50:34,080
and say that you got access to someone's

2833
01:50:34,080 --> 01:50:35,440
email address and you saw all the

2834
01:50:35,440 --> 01:50:37,440
invoices that they sent out you wrote a

2835
01:50:37,440 --> 01:50:39,760
little script and that says reply to say

2836
01:50:39,760 --> 01:50:41,280
sorry we just changed our bank account

2837
01:50:41,280 --> 01:50:42,800
details to this please can you pay the

2838
01:50:42,800 --> 01:50:44,960
invoice on this bank account

2839
01:50:44,960 --> 01:50:46,719
if someone receives that email they

2840
01:50:46,719 --> 01:50:49,040
don't know the difference

2841
01:50:49,040 --> 01:50:51,280
tampering um

2842
01:50:51,280 --> 01:50:53,599
who has access to what can we can

2843
01:50:53,599 --> 01:50:56,480
someone flip a bit um if i've got access

2844
01:50:56,480 --> 01:50:58,159
to a banking system can i increase

2845
01:50:58,159 --> 01:51:00,800
someone's credit um

2846
01:51:00,800 --> 01:51:02,719
and equally um

2847
01:51:02,719 --> 01:51:04,239
this we used this in an example a moment

2848
01:51:04,239 --> 01:51:06,080
ago with james and andy where andy was

2849
01:51:06,080 --> 01:51:07,920
able to change the amount of money that

2850
01:51:07,920 --> 01:51:10,639
he was sending

2851
01:51:10,639 --> 01:51:12,639
repudiation um

2852
01:51:12,639 --> 01:51:13,520
this is

2853
01:51:13,520 --> 01:51:15,280
my word against your word who are you

2854
01:51:15,280 --> 01:51:18,000
going to trust is our system logging uh

2855
01:51:18,000 --> 01:51:20,400
suggesting that it's business as usual

2856
01:51:20,400 --> 01:51:22,560
the modified request

2857
01:51:22,560 --> 01:51:24,080
that we did in our banking example was

2858
01:51:24,080 --> 01:51:26,080
done in transit and so if it's in

2859
01:51:26,080 --> 01:51:28,400
transit how do we know that this request

2860
01:51:28,400 --> 01:51:29,520
has been received and it hasn't been

2861
01:51:29,520 --> 01:51:31,119
manipulated

2862
01:51:31,119 --> 01:51:32,480
from our point of view everything was

2863
01:51:32,480 --> 01:51:34,560
fine and if we go back to the james and

2864
01:51:34,560 --> 01:51:36,320
andy example well i'll ask andy but

2865
01:51:36,320 --> 01:51:38,560
again how how can i trust andy um if

2866
01:51:38,560 --> 01:51:40,400
angie says well no i didn't receive any

2867
01:51:40,400 --> 01:51:43,440
funds how do i know that

2868
01:51:43,440 --> 01:51:45,760
i is for information disclosure so does

2869
01:51:45,760 --> 01:51:47,760
anyone want to put their credit card cv

2870
01:51:47,760 --> 01:51:49,520
number in the chat no because you don't

2871
01:51:49,520 --> 01:51:51,199
want to disclose that information

2872
01:51:51,199 --> 01:51:52,080
um

2873
01:51:52,080 --> 01:51:54,239
also just if if someone's left their

2874
01:51:54,239 --> 01:51:55,920
mobile phone unlocked on the table next

2875
01:51:55,920 --> 01:51:57,119
to you you could go through and have a

2876
01:51:57,119 --> 01:51:58,480
look through so much of their

2877
01:51:58,480 --> 01:52:00,239
information potentially or this could be

2878
01:52:00,239 --> 01:52:02,320
to say like an s3 bucket that's publicly

2879
01:52:02,320 --> 01:52:04,400
available

2880
01:52:04,400 --> 01:52:06,320
denial of service attack too much

2881
01:52:06,320 --> 01:52:07,920
information to process too many

2882
01:52:07,920 --> 01:52:09,840
questions all at once

2883
01:52:09,840 --> 01:52:12,159
if we do a denial of service onto an api

2884
01:52:12,159 --> 01:52:14,159
endpoint can the administrator get

2885
01:52:14,159 --> 01:52:15,599
information back from the kubernetes

2886
01:52:15,599 --> 01:52:17,119
cluster as to actually what's running

2887
01:52:17,119 --> 01:52:19,839
and what's happening

2888
01:52:21,119 --> 01:52:22,400
so finally we've got elevation of

2889
01:52:22,400 --> 01:52:24,719
privilege how do we get to the backstage

2890
01:52:24,719 --> 01:52:26,400
area do i just put on a different

2891
01:52:26,400 --> 01:52:28,080
lanyard to be able to pretend to be

2892
01:52:28,080 --> 01:52:29,199
something else

2893
01:52:29,199 --> 01:52:30,719
um

2894
01:52:30,719 --> 01:52:32,560
but then equally what if there's a

2895
01:52:32,560 --> 01:52:34,159
service account that i use does it give

2896
01:52:34,159 --> 01:52:36,320
me access to uh

2897
01:52:36,320 --> 01:52:38,159
higher self privileges

2898
01:52:38,159 --> 01:52:41,520
so we build from stride and we visualize

2899
01:52:41,520 --> 01:52:44,800
with attack trees um attack fees helps

2900
01:52:44,800 --> 01:52:46,560
to identify risks to our resources and

2901
01:52:46,560 --> 01:52:49,040
the likelihood of them happening um

2902
01:52:49,040 --> 01:52:50,239
we don't want to have too much

2903
01:52:50,239 --> 01:52:52,480
information though so focus on quality

2904
01:52:52,480 --> 01:52:54,560
not quantity at this stage and be

2905
01:52:54,560 --> 01:52:56,239
confident in delivering concise

2906
01:52:56,239 --> 01:52:58,400
documentation

2907
01:52:58,400 --> 01:53:00,159
so we've put this example together of

2908
01:53:00,159 --> 01:53:03,360
carrying a briefcase to a locker and

2909
01:53:03,360 --> 01:53:05,920
the light green are all nodes so these

2910
01:53:05,920 --> 01:53:08,239
are our options available to us the blue

2911
01:53:08,239 --> 01:53:11,119
would be and nodes so or means that any

2912
01:53:11,119 --> 01:53:13,119
other child elements and and means that

2913
01:53:13,119 --> 01:53:15,280
both childs would have or all children

2914
01:53:15,280 --> 01:53:17,280
would have to uh complete to be able to

2915
01:53:17,280 --> 01:53:19,679
access

2916
01:53:19,760 --> 01:53:21,760
now caddy shortridge has shown us how to

2917
01:53:21,760 --> 01:53:23,679
use graphics to build attack trees uh

2918
01:53:23,679 --> 01:53:25,840
deciduous is another option available to

2919
01:53:25,840 --> 01:53:28,320
code an attack tree and we have also

2920
01:53:28,320 --> 01:53:30,239
created an example available within this

2921
01:53:30,239 --> 01:53:32,719
git repo

2922
01:53:32,719 --> 01:53:34,000
so let's have a look at what can go

2923
01:53:34,000 --> 01:53:35,760
wrong in kubernetes so i'm going to

2924
01:53:35,760 --> 01:53:37,679
speed through this one now but try and

2925
01:53:37,679 --> 01:53:40,480
name this cube kubernetes attack so

2926
01:53:40,480 --> 01:53:42,560
looking at our wheel of misfortune what

2927
01:53:42,560 --> 01:53:43,760
can go wrong

2928
01:53:43,760 --> 01:53:47,599
so is there an r do i have an a

2929
01:53:47,599 --> 01:53:50,000
and do i have a c so at this point i'm

2930
01:53:50,000 --> 01:53:53,040
going to guess our back misconfiguration

2931
01:53:53,040 --> 01:53:54,960
now you might have seen a problem here i

2932
01:53:54,960 --> 01:53:56,480
didn't think about how long this

2933
01:53:56,480 --> 01:53:58,320
configuration was when i started this

2934
01:53:58,320 --> 01:54:00,480
but um i fixed it now just by a

2935
01:54:00,480 --> 01:54:03,280
misconfiguration on the end

2936
01:54:03,280 --> 01:54:04,719
now

2937
01:54:04,719 --> 01:54:06,080
that's one thing that can go wrong in

2938
01:54:06,080 --> 01:54:07,679
kubernetes but there is lots that we can

2939
01:54:07,679 --> 01:54:09,199
do so let's have a look at our workloads

2940
01:54:09,199 --> 01:54:11,119
so our parts we could have an uh rights

2941
01:54:11,119 --> 01:54:13,599
we could have a container breakout

2942
01:54:13,599 --> 01:54:15,599
file systems host mounts hostile

2943
01:54:15,599 --> 01:54:18,080
containers for container runtime itself

2944
01:54:18,080 --> 01:54:20,080
the configuration of our part

2945
01:54:20,080 --> 01:54:21,679
the part security context and the

2946
01:54:21,679 --> 01:54:24,639
service accounts associated with it

2947
01:54:24,639 --> 01:54:26,880
with networking we might have intrapart

2948
01:54:26,880 --> 01:54:29,440
issues we could have uh interpod uh

2949
01:54:29,440 --> 01:54:32,239
issues again um we have no workload

2950
01:54:32,239 --> 01:54:33,840
identity by default and we have no

2951
01:54:33,840 --> 01:54:37,199
network policy by default

2952
01:54:37,199 --> 01:54:39,199
storage we could have attacking volumes

2953
01:54:39,199 --> 01:54:41,520
um we have dangers of host mounts we

2954
01:54:41,520 --> 01:54:43,280
could also have no encryption at rest so

2955
01:54:43,280 --> 01:54:45,920
if we're using lcd well lcd being used

2956
01:54:45,920 --> 01:54:48,080
by the control plane to store kubernetes

2957
01:54:48,080 --> 01:54:49,360
state

2958
01:54:49,360 --> 01:54:51,360
also persistent storage to when run the

2959
01:54:51,360 --> 01:54:54,320
state of our workloads

2960
01:54:54,400 --> 01:54:57,840
i am so uh do we have a pivot to attack

2961
01:54:57,840 --> 01:55:00,320
the cloud api or pivot to attack the

2962
01:55:00,320 --> 01:55:02,719
kubernetes api or can we use i am to

2963
01:55:02,719 --> 01:55:05,599
exploit app workflows

2964
01:55:05,599 --> 01:55:07,520
so in summary lots can go wrong but

2965
01:55:07,520 --> 01:55:09,520
don't be scared just take each day as it

2966
01:55:09,520 --> 01:55:11,679
comes and push forward make a start in

2967
01:55:11,679 --> 01:55:15,040
it now and it will get better

2968
01:55:15,360 --> 01:55:18,159
so this is only a small subsection of an

2969
01:55:18,159 --> 01:55:20,320
attack tree for kubernetes um we can

2970
01:55:20,320 --> 01:55:22,560
review these attacks to see how well

2971
01:55:22,560 --> 01:55:24,560
they can be scoped do our attackers have

2972
01:55:24,560 --> 01:55:26,239
access to resources that can enable

2973
01:55:26,239 --> 01:55:27,119
these

2974
01:55:27,119 --> 01:55:29,520
um this is available in stemi on the

2975
01:55:29,520 --> 01:55:32,719
same repo

2976
01:55:32,719 --> 01:55:35,119
so now we know what can go wrong uh what

2977
01:55:35,119 --> 01:55:37,119
are we going to do about it

2978
01:55:37,119 --> 01:55:39,679
well we could do absolutely nothing and

2979
01:55:39,679 --> 01:55:41,199
i joke but if we didn't complete the

2980
01:55:41,199 --> 01:55:43,040
last step then you are doing absolutely

2981
01:55:43,040 --> 01:55:44,800
nothing but in becoming aware of the

2982
01:55:44,800 --> 01:55:46,719
risks you can determine your own threat

2983
01:55:46,719 --> 01:55:48,320
model

2984
01:55:48,320 --> 01:55:49,920
and we have all performed the personal

2985
01:55:49,920 --> 01:55:52,000
threat model and during covid you have

2986
01:55:52,000 --> 01:55:55,199
to make decisions as to are you

2987
01:55:55,199 --> 01:55:56,719
all those decisions about staying in

2988
01:55:56,719 --> 01:55:58,320
your house being away from others are

2989
01:55:58,320 --> 01:55:59,679
you willing to travel are you going to

2990
01:55:59,679 --> 01:56:00,960
do these things

2991
01:56:00,960 --> 01:56:02,560
you've already threat modeled so when

2992
01:56:02,560 --> 01:56:03,840
i'm talking about fret modeling now

2993
01:56:03,840 --> 01:56:05,440
don't be scared of it you're already

2994
01:56:05,440 --> 01:56:07,839
doing it

2995
01:56:08,000 --> 01:56:09,599
so we have our shared responsibility

2996
01:56:09,599 --> 01:56:11,199
model so this is a choice of where you

2997
01:56:11,199 --> 01:56:13,520
run your cluster and the effects of your

2998
01:56:13,520 --> 01:56:15,119
fret model so if you're running it as a

2999
01:56:15,119 --> 01:56:16,639
hosted service when your provider is

3000
01:56:16,639 --> 01:56:18,320
managing a number of controls if you're

3001
01:56:18,320 --> 01:56:19,679
running your own data center then you're

3002
01:56:19,679 --> 01:56:23,760
having to manage uh your control plane

3003
01:56:23,840 --> 01:56:26,239
so with risk management um

3004
01:56:26,239 --> 01:56:28,480
follow what marie condo does and uh just

3005
01:56:28,480 --> 01:56:30,960
murray conduit away if we can avoid it

3006
01:56:30,960 --> 01:56:32,400
uh get it out

3007
01:56:32,400 --> 01:56:34,080
if we can mitigate it then we can make

3008
01:56:34,080 --> 01:56:35,920
this better and this brings us joy so we

3009
01:56:35,920 --> 01:56:38,080
need to work harder for it we can also

3010
01:56:38,080 --> 01:56:40,159
accept it which is just well yeah this

3011
01:56:40,159 --> 01:56:42,400
isn't a this is this doesn't affect us

3012
01:56:42,400 --> 01:56:44,080
finally we can transfer this so we could

3013
01:56:44,080 --> 01:56:45,760
pass this to legal to deal with and i'm

3014
01:56:45,760 --> 01:56:49,280
sure that that will bring them joy

3015
01:56:49,679 --> 01:56:51,440
so we have our types of controls we have

3016
01:56:51,440 --> 01:56:53,520
preventative so shifting knowledge left

3017
01:56:53,520 --> 01:56:55,679
empowering others to have those

3018
01:56:55,679 --> 01:56:57,280
and we could also look at tools like

3019
01:56:57,280 --> 01:56:58,800
cubesack and oprah to provide

3020
01:56:58,800 --> 01:57:00,320
constructive feedback to people making

3021
01:57:00,320 --> 01:57:01,760
changes

3022
01:57:01,760 --> 01:57:04,239
detective so um we can export and

3023
01:57:04,239 --> 01:57:06,320
monitor logs tools like psyllium falco

3024
01:57:06,320 --> 01:57:08,560
or anything else and corrective

3025
01:57:08,560 --> 01:57:10,239
something is being triggered by a log

3026
01:57:10,239 --> 01:57:11,520
event

3027
01:57:11,520 --> 01:57:13,119
um for example

3028
01:57:13,119 --> 01:57:14,719
um if you've got a big red button on

3029
01:57:14,719 --> 01:57:16,080
your desk that when you hit it it just

3030
01:57:16,080 --> 01:57:17,440
kills everything that can be your

3031
01:57:17,440 --> 01:57:19,440
corrective measure just like pulling

3032
01:57:19,440 --> 01:57:21,679
the power cable out of the box

3033
01:57:21,679 --> 01:57:24,400
and just be careful uh with your

3034
01:57:24,400 --> 01:57:25,920
controls as well if you've got

3035
01:57:25,920 --> 01:57:27,280
all-school controls which aren't

3036
01:57:27,280 --> 01:57:29,119
following best practices nowadays such

3037
01:57:29,119 --> 01:57:31,760
as our high availability um

3038
01:57:31,760 --> 01:57:33,280
highly available means being highly

3039
01:57:33,280 --> 01:57:36,159
available so look towards get ups flux

3040
01:57:36,159 --> 01:57:37,679
ci ct

3041
01:57:37,679 --> 01:57:41,119
less manual and more automation

3042
01:57:41,199 --> 01:57:43,360
kubernetes and cloud i am is at the

3043
01:57:43,360 --> 01:57:45,520
center of cloud native security so re

3044
01:57:45,520 --> 01:57:47,199
review your permissions regularly use

3045
01:57:47,199 --> 01:57:49,040
management processes user management

3046
01:57:49,040 --> 01:57:51,440
processes are key review onboarding and

3047
01:57:51,440 --> 01:57:53,199
off-boarding processes for joiners

3048
01:57:53,199 --> 01:57:55,440
movers and levers or jml

3049
01:57:55,440 --> 01:57:58,159
implement strong access control policies

3050
01:57:58,159 --> 01:57:59,679
default kubernetes service accounts

3051
01:57:59,679 --> 01:58:01,360
should not be used create a dedicated

3052
01:58:01,360 --> 01:58:03,040
service account for every workload its

3053
01:58:03,040 --> 01:58:05,199
own workload identity workloads will

3054
01:58:05,199 --> 01:58:07,360
interact with kubernetes api over cloud

3055
01:58:07,360 --> 01:58:09,520
via a workload identity integration

3056
01:58:09,520 --> 01:58:11,760
cloud provider services can help so im

3057
01:58:11,760 --> 01:58:13,920
rules for service accounts in aws or

3058
01:58:13,920 --> 01:58:15,920
workload identity and gke

3059
01:58:15,920 --> 01:58:18,560
the irsa uses service account token

3060
01:58:18,560 --> 01:58:20,480
volume protections and this is just one

3061
01:58:20,480 --> 01:58:22,560
benefit of using managed offering and

3062
01:58:22,560 --> 01:58:24,800
for topic for cryptography strong

3063
01:58:24,800 --> 01:58:27,360
workload identities spire can be used

3064
01:58:27,360 --> 01:58:28,800
spire is a production ready

3065
01:58:28,800 --> 01:58:32,639
implementation of a spiffy's api

3066
01:58:32,639 --> 01:58:34,400
focus towards least privileged parts

3067
01:58:34,400 --> 01:58:36,480
make sure that we can't run things that

3068
01:58:36,480 --> 01:58:37,840
we don't want to

3069
01:58:37,840 --> 01:58:39,840
uh review what the workloads are being

3070
01:58:39,840 --> 01:58:42,239
submitted to the api and use ids to

3071
01:58:42,239 --> 01:58:44,480
report on suspicious behavior and

3072
01:58:44,480 --> 01:58:46,560
automated securing uh testing in your

3073
01:58:46,560 --> 01:58:49,440
pipelines

3074
01:58:49,440 --> 01:58:51,679
now has anyone talked about the supply

3075
01:58:51,679 --> 01:58:53,920
chain at this conference so far but this

3076
01:58:53,920 --> 01:58:56,400
slide is just my kind of hot take on it

3077
01:58:56,400 --> 01:58:58,800
but also look towards six store two um

3078
01:58:58,800 --> 01:59:00,800
luke hines is a fantastic individual

3079
01:59:00,800 --> 01:59:03,360
behind part of it um and he is one of

3080
01:59:03,360 --> 01:59:05,360
the people that i'm just so uh i've had

3081
01:59:05,360 --> 01:59:06,719
the pleasure to get to know over last

3082
01:59:06,719 --> 01:59:08,960
year

3083
01:59:09,280 --> 01:59:11,679
enforce network policy um who needs

3084
01:59:11,679 --> 01:59:14,000
access to the kubernetes api try don't

3085
01:59:14,000 --> 01:59:15,760
put it on the public internet if

3086
01:59:15,760 --> 01:59:17,840
possible uh check the capabilities of

3087
01:59:17,840 --> 01:59:19,840
your pods what do your pods actually

3088
01:59:19,840 --> 01:59:21,599
need um

3089
01:59:21,599 --> 01:59:23,440
anything that's public facing needs to

3090
01:59:23,440 --> 01:59:25,840
be locked down as well um

3091
01:59:25,840 --> 01:59:26,639
and

3092
01:59:26,639 --> 01:59:28,080
if it doesn't need to be any other

3093
01:59:28,080 --> 01:59:29,840
public and put as far away from public

3094
01:59:29,840 --> 01:59:31,840
as possible and communication with your

3095
01:59:31,840 --> 01:59:34,960
cluster is key too

3096
01:59:34,960 --> 01:59:36,960
manage your secrets with whatever makes

3097
01:59:36,960 --> 01:59:39,360
you happy um whatever it is just make

3098
01:59:39,360 --> 01:59:41,599
sure that you're managing them um a

3099
01:59:41,599 --> 01:59:42,960
mission control

3100
01:59:42,960 --> 01:59:45,520
to use a context of what's being shared

3101
01:59:45,520 --> 01:59:47,119
no one should be able to read what's in

3102
01:59:47,119 --> 01:59:49,760
you in my volume and no one can read

3103
01:59:49,760 --> 01:59:51,599
what's in my volume that is how i like

3104
01:59:51,599 --> 01:59:54,560
to have my volumes

3105
01:59:54,719 --> 01:59:56,719
so we have controls for the security

3106
01:59:56,719 --> 01:59:58,960
requirements i'm giving a talk at moment

3107
01:59:58,960 --> 02:00:01,199
and i understand that you're living in

3108
02:00:01,199 --> 02:00:03,199
your real life and we have struggles

3109
02:00:03,199 --> 02:00:04,719
from business as well and everything

3110
02:00:04,719 --> 02:00:06,800
else around us that we might not be able

3111
02:00:06,800 --> 02:00:09,360
to share or show so just do the best job

3112
02:00:09,360 --> 02:00:12,159
that you can prioritize risk and do what

3113
02:00:12,159 --> 02:00:14,719
you can

3114
02:00:15,040 --> 02:00:16,719
it's important to look back as well as

3115
02:00:16,719 --> 02:00:18,719
forward so have we achieved what we have

3116
02:00:18,719 --> 02:00:20,719
set out to do look to others for their

3117
02:00:20,719 --> 02:00:22,400
reviews is there something that you have

3118
02:00:22,400 --> 02:00:24,719
missed out testing testing testing which

3119
02:00:24,719 --> 02:00:26,239
we'll look at now in the next slide and

3120
02:00:26,239 --> 02:00:28,239
as time moves on our acceptable level

3121
02:00:28,239 --> 02:00:30,639
may change document decisions made now

3122
02:00:30,639 --> 02:00:34,480
so that you are consistent going forward

3123
02:00:34,480 --> 02:00:35,840
select security controls for

3124
02:00:35,840 --> 02:00:38,239
implementation map these controls onto

3125
02:00:38,239 --> 02:00:40,159
the attack trees this provides a direct

3126
02:00:40,159 --> 02:00:42,560
means of evaluating effectiveness visual

3127
02:00:42,560 --> 02:00:44,560
representations are easier to reason

3128
02:00:44,560 --> 02:00:46,880
about identify how many nodes and

3129
02:00:46,880 --> 02:00:48,320
branches of the attack tree are covered

3130
02:00:48,320 --> 02:00:50,639
by the mitigating controls this assesses

3131
02:00:50,639 --> 02:00:52,719
the resulting security of the system if

3132
02:00:52,719 --> 02:00:54,560
enough security controls are defined any

3133
02:00:54,560 --> 02:00:56,159
new attacks added to the tree should be

3134
02:00:56,159 --> 02:00:59,599
mitigated by existing controls

3135
02:00:59,599 --> 02:01:01,119
so in the skit repo you'll find an

3136
02:01:01,119 --> 02:01:03,520
example of using gus to test out a

3137
02:01:03,520 --> 02:01:06,239
security requirement of our cluster the

3138
02:01:06,239 --> 02:01:08,960
tldr is that if the test fails the

3139
02:01:08,960 --> 02:01:10,639
security requirement is not being met

3140
02:01:10,639 --> 02:01:12,560
and this requires a review

3141
02:01:12,560 --> 02:01:14,159
it allows your team to continue to

3142
02:01:14,159 --> 02:01:17,599
contribute code with confidence

3143
02:01:17,599 --> 02:01:18,960
now we're coming to the end and i

3144
02:01:18,960 --> 02:01:21,040
haven't spoken about wales so far i'm

3145
02:01:21,040 --> 02:01:23,119
proud about where i come from and i feel

3146
02:01:23,119 --> 02:01:24,320
like you should be right by where you

3147
02:01:24,320 --> 02:01:25,679
come from too

3148
02:01:25,679 --> 02:01:27,920
um i am a chapter leader for devs.com

3149
02:01:27,920 --> 02:01:31,760
wales and we are castle we are castles

3150
02:01:31,760 --> 02:01:34,639
we have so many castles in wales um and

3151
02:01:34,639 --> 02:01:36,800
i feel that castles are the og threat

3152
02:01:36,800 --> 02:01:38,239
model thing if you ever get the

3153
02:01:38,239 --> 02:01:39,840
opportunity to walk around the castle

3154
02:01:39,840 --> 02:01:41,360
this is it just like look at this and

3155
02:01:41,360 --> 02:01:43,280
just think about how they threat models

3156
02:01:43,280 --> 02:01:45,199
and how all this architecture is built

3157
02:01:45,199 --> 02:01:47,119
to keep people out

3158
02:01:47,119 --> 02:01:48,000
um

3159
02:01:48,000 --> 02:01:49,840
but to that as well i thought there's a

3160
02:01:49,840 --> 02:01:51,360
song from wales that's a good way to

3161
02:01:51,360 --> 02:01:53,599
leave this talk

3162
02:01:53,599 --> 02:01:56,320
it only takes one project to identify a

3163
02:01:56,320 --> 02:01:58,159
thousand threats and it only takes one

3164
02:01:58,159 --> 02:02:00,800
threat to burn a thousand projects

3165
02:02:00,800 --> 02:02:02,560
so on that i'd like to say thank you for

3166
02:02:02,560 --> 02:02:04,000
your time i hope you enjoyed the rest of

3167
02:02:04,000 --> 02:02:05,280
the day and i hope you enjoyed the rest

3168
02:02:05,280 --> 02:02:08,559
of the conference thank you

3169
02:02:09,760 --> 02:02:12,000
that was fantastic

3170
02:02:12,000 --> 02:02:15,599
uh louis if that is who you really are

3171
02:02:15,599 --> 02:02:17,520
by the way because now you got me i mean

3172
02:02:17,520 --> 02:02:19,360
i'm already a paranoid individual but

3173
02:02:19,360 --> 02:02:21,599
after this session i'm a bit more

3174
02:02:21,599 --> 02:02:24,320
paranoid thank you very much

3175
02:02:24,320 --> 02:02:25,760
it's so good that's

3176
02:02:25,760 --> 02:02:27,520
there's a lot of there's a group that

3177
02:02:27,520 --> 02:02:28,960
can help you with this from after my

3178
02:02:28,960 --> 02:02:31,520
talk so it's been set up and so on yeah

3179
02:02:31,520 --> 02:02:33,360
it's a there's a lot that goes on in

3180
02:02:33,360 --> 02:02:35,760
here so um at least you're outside of it

3181
02:02:35,760 --> 02:02:36,719
i guess

3182
02:02:36,719 --> 02:02:38,480
yes well one i want to thank you for

3183
02:02:38,480 --> 02:02:39,599
your message on mental health at the

3184
02:02:39,599 --> 02:02:41,920
beginning it means a lot i appreciate it

3185
02:02:41,920 --> 02:02:44,400
um and two yeah like this was uh

3186
02:02:44,400 --> 02:02:46,880
fantastic in terms of just making me

3187
02:02:46,880 --> 02:02:48,239
aware because i'm not i'm not very

3188
02:02:48,239 --> 02:02:49,599
knowledgeable in kubernetes but hearing

3189
02:02:49,599 --> 02:02:51,599
of all the different ways of thinking

3190
02:02:51,599 --> 02:02:53,679
about possible threats that are

3191
02:02:53,679 --> 02:02:55,760
available or could be happening in that

3192
02:02:55,760 --> 02:02:58,159
space let alone gets me thinking beyond

3193
02:02:58,159 --> 02:02:59,760
that too for other development practices

3194
02:02:59,760 --> 02:03:01,599
that i have in place for my own projects

3195
02:03:01,599 --> 02:03:03,679
or on a team and so forth so thank you

3196
02:03:03,679 --> 02:03:05,040
so much for that

3197
02:03:05,040 --> 02:03:06,719
um

3198
02:03:06,719 --> 02:03:08,560
yeah so one question we got from the

3199
02:03:08,560 --> 02:03:11,040
chat and that was from shirat i believe

3200
02:03:11,040 --> 02:03:13,040
that they had for you was from a risk

3201
02:03:13,040 --> 02:03:14,719
management lens

3202
02:03:14,719 --> 02:03:17,040
oops that went away from a risk

3203
02:03:17,040 --> 02:03:18,880
management lens how are you how are

3204
02:03:18,880 --> 02:03:22,480
threats different for risks

3205
02:03:22,960 --> 02:03:25,119
risk management lens how are threats

3206
02:03:25,119 --> 02:03:28,759
different for

3207
02:03:30,320 --> 02:03:34,800
great question and this is taking me off

3208
02:03:34,800 --> 02:03:35,760
it's

3209
02:03:35,760 --> 02:03:37,280
this is difficulty with wrap modeling

3210
02:03:37,280 --> 02:03:38,639
it's the context that we're putting it

3211
02:03:38,639 --> 02:03:40,719
in because we're trying to put process

3212
02:03:40,719 --> 02:03:42,960
into something that's being created and

3213
02:03:42,960 --> 02:03:44,239
i don't know if you guys would feel

3214
02:03:44,239 --> 02:03:45,679
differently about it so please feel free

3215
02:03:45,679 --> 02:03:48,960
to join in and the answer um the threats

3216
02:03:48,960 --> 02:03:51,040
that you have like

3217
02:03:51,040 --> 02:03:52,960
it might not incidentally be a threat it

3218
02:03:52,960 --> 02:03:54,800
could be that someone can uh jump onto

3219
02:03:54,800 --> 02:03:56,400
this box but then it's a case of well

3220
02:03:56,400 --> 02:03:57,760
actually we're fine with people jumping

3221
02:03:57,760 --> 02:03:58,960
onto the box if we're trying to use

3222
02:03:58,960 --> 02:04:00,560
canary tokens and we want to show off

3223
02:04:00,560 --> 02:04:02,000
our product we want people to actively

3224
02:04:02,000 --> 02:04:03,599
jump onto this box

3225
02:04:03,599 --> 02:04:05,840
um but then equally if you are a

3226
02:04:05,840 --> 02:04:08,320
multinational organization that

3227
02:04:08,320 --> 02:04:09,599
doesn't want anyone jumping anywhere

3228
02:04:09,599 --> 02:04:11,920
near their boss their boxes then that's

3229
02:04:11,920 --> 02:04:14,000
a huge threat and that rip threat is

3230
02:04:14,000 --> 02:04:16,800
identified as a risk to the business so

3231
02:04:16,800 --> 02:04:19,599
i hope that helps but um and again i

3232
02:04:19,599 --> 02:04:20,560
realize

3233
02:04:20,560 --> 02:04:22,079
i feel like i'm doing a bit of a british

3234
02:04:22,079 --> 02:04:23,840
politician thing here of not necessarily

3235
02:04:23,840 --> 02:04:25,440
answering a question that by answering

3236
02:04:25,440 --> 02:04:27,199
my own questions so i

3237
02:04:27,199 --> 02:04:29,440
i hope that helps

3238
02:04:29,440 --> 02:04:31,840
i think so i think so um and then i see

3239
02:04:31,840 --> 02:04:33,840
in in chat just referencing the the

3240
02:04:33,840 --> 02:04:35,280
closing of your talk zach curtis is

3241
02:04:35,280 --> 02:04:37,520
saying castles are the og of threat

3242
02:04:37,520 --> 02:04:39,280
modeling brilliant they like that that

3243
02:04:39,280 --> 02:04:41,119
line well done

3244
02:04:41,119 --> 02:04:43,040
well um

3245
02:04:43,040 --> 02:04:45,360
thank you for that as well i'm happy

3246
02:04:45,360 --> 02:04:47,360
with that when i said that by accident

3247
02:04:47,360 --> 02:04:48,639
one day and it was like oh actually they

3248
02:04:48,639 --> 02:04:49,679
are so

3249
02:04:49,679 --> 02:04:51,599
cool there you go perfect

3250
02:04:51,599 --> 02:04:52,800
eric did you have any other questions

3251
02:04:52,800 --> 02:04:54,079
that you saw that popped up or maybe

3252
02:04:54,079 --> 02:04:55,920
some of your own to share

3253
02:04:55,920 --> 02:04:57,920
no i just to follow on you what the your

3254
02:04:57,920 --> 02:04:59,280
answer to the question about threats and

3255
02:04:59,280 --> 02:05:01,040
risks i think it is a harder one to

3256
02:05:01,040 --> 02:05:02,880
answer because they are kind of tied

3257
02:05:02,880 --> 02:05:04,320
hand in hand

3258
02:05:04,320 --> 02:05:07,199
the way i always look at it is that

3259
02:05:07,199 --> 02:05:09,920
the threat is kind of the

3260
02:05:09,920 --> 02:05:12,079
hypothetical or even literal path to

3261
02:05:12,079 --> 02:05:13,199
which you

3262
02:05:13,199 --> 02:05:16,079
exploit a vulnerability or a risk right

3263
02:05:16,079 --> 02:05:16,960
so

3264
02:05:16,960 --> 02:05:19,119
it's kind of like the avenue by which

3265
02:05:19,119 --> 02:05:21,840
the risk is exploited is that

3266
02:05:21,840 --> 02:05:23,840
jive with you

3267
02:05:23,840 --> 02:05:25,520
yeah that drives with me

3268
02:05:25,520 --> 02:05:29,040
it's um yeah it's

3269
02:05:30,000 --> 02:05:33,199
it's always like i can't express when we

3270
02:05:33,199 --> 02:05:35,360
do fret modeling it's always when

3271
02:05:35,360 --> 02:05:37,280
no threat models are the same and this

3272
02:05:37,280 --> 02:05:38,719
is a point about having your voice heard

3273
02:05:38,719 --> 02:05:40,320
and this is

3274
02:05:40,320 --> 02:05:42,079
what i try to express within this talk

3275
02:05:42,079 --> 02:05:43,040
is that

3276
02:05:43,040 --> 02:05:45,040
just be confident in i remember first of

3277
02:05:45,040 --> 02:05:47,040
my threat modeled and i was terrified

3278
02:05:47,040 --> 02:05:48,719
that i was saying the wrong thing but

3279
02:05:48,719 --> 02:05:50,079
the first thing i said was really

3280
02:05:50,079 --> 02:05:51,360
valuable because there was another

3281
02:05:51,360 --> 02:05:53,199
perception of our system that no one

3282
02:05:53,199 --> 02:05:54,480
else had seen

3283
02:05:54,480 --> 02:05:56,239
and in doing so it's just having that

3284
02:05:56,239 --> 02:05:57,920
confidence just to raise your voice and

3285
02:05:57,920 --> 02:05:59,679
say right i think this is a potential

3286
02:05:59,679 --> 02:06:00,800
issue here

3287
02:06:00,800 --> 02:06:03,360
and and it comes back to that issue of

3288
02:06:03,360 --> 02:06:05,440
risk like the risk is is this for your

3289
02:06:05,440 --> 02:06:07,199
business or is this for a consumer or is

3290
02:06:07,199 --> 02:06:08,800
this just for a random person somewhere

3291
02:06:08,800 --> 02:06:10,000
who doesn't

3292
02:06:10,000 --> 02:06:11,440
because we have lots of trust the

3293
02:06:11,440 --> 02:06:13,440
internet is based on trust

3294
02:06:13,440 --> 02:06:15,440
and when you share your information

3295
02:06:15,440 --> 02:06:17,280
who's managing that and if it's you then

3296
02:06:17,280 --> 02:06:19,199
i hope you're doing a really good job so

3297
02:06:19,199 --> 02:06:21,440
yeah

3298
02:06:22,079 --> 02:06:24,800
excellent well louis thank you so much i

3299
02:06:24,800 --> 02:06:26,639
do again really appreciate the message

3300
02:06:26,639 --> 02:06:28,480
throughout the the presentation today it

3301
02:06:28,480 --> 02:06:30,960
was fantastic learned a lot and i want

3302
02:06:30,960 --> 02:06:32,639
to let you know that it brought me joy

3303
02:06:32,639 --> 02:06:34,480
just to stick with that marie condo

3304
02:06:34,480 --> 02:06:36,560
reference so thank you again and

3305
02:06:36,560 --> 02:06:38,079
appreciate having you here

3306
02:06:38,079 --> 02:06:39,440
well thank you both as well for your

3307
02:06:39,440 --> 02:06:41,760
stealing efforts today so hopefully next

3308
02:06:41,760 --> 02:06:43,920
time i get to see you soon in real life

3309
02:06:43,920 --> 02:06:48,079
sounds good see ya come on cheers guys

3310
02:06:48,079 --> 02:06:50,079
all right eric i think we're up to break

3311
02:06:50,079 --> 02:06:51,280
time right so that's where we get to

3312
02:06:51,280 --> 02:06:52,719
take a nap right

3313
02:06:52,719 --> 02:06:54,480
ah yes

3314
02:06:54,480 --> 02:06:55,840
good night

3315
02:06:55,840 --> 02:06:57,599
people going just watch us sleep a

3316
02:06:57,599 --> 02:06:58,960
little bit yeah that would be just

3317
02:06:58,960 --> 02:07:01,119
must-see tv right there

3318
02:07:01,119 --> 02:07:03,280
i don't know about you yeah just turn on

3319
02:07:03,280 --> 02:07:06,000
some lo-fi let people relax

3320
02:07:06,000 --> 02:07:07,280
but i think this is a good point for

3321
02:07:07,280 --> 02:07:09,440
people to take a break if you need to

3322
02:07:09,440 --> 02:07:10,320
um

3323
02:07:10,320 --> 02:07:12,480
actually i'm gonna throw eric for a loop

3324
02:07:12,480 --> 02:07:13,920
here all right i'm gonna throw everybody

3325
02:07:13,920 --> 02:07:14,960
for a loop here we're gonna do a little

3326
02:07:14,960 --> 02:07:16,560
stretch how about that everybody's

3327
02:07:16,560 --> 02:07:17,599
you've probably been i've been sitting

3328
02:07:17,599 --> 02:07:19,280
for a while barely got enough between

3329
02:07:19,280 --> 02:07:21,199
sessions other people watching probably

3330
02:07:21,199 --> 02:07:23,040
too so you could do this standing up or

3331
02:07:23,040 --> 02:07:24,400
sitting down i'll do it sitting down so

3332
02:07:24,400 --> 02:07:25,599
you can see me on camera but we're gonna

3333
02:07:25,599 --> 02:07:27,520
do a quick stretch shout out to allison

3334
02:07:27,520 --> 02:07:29,119
krug a former colleague of mine that

3335
02:07:29,119 --> 02:07:31,920
taught a bunch of us this uh so you can

3336
02:07:31,920 --> 02:07:33,840
put your arms out straight across they

3337
02:07:33,840 --> 02:07:36,320
got to be parallel to the floor okay

3338
02:07:36,320 --> 02:07:38,320
and then you're gonna do thumbs up

3339
02:07:38,320 --> 02:07:39,679
things are going good but they're gonna

3340
02:07:39,679 --> 02:07:41,520
go bad in a moment okay and you're gonna

3341
02:07:41,520 --> 02:07:42,880
start you're gonna pull your arms back

3342
02:07:42,880 --> 02:07:44,400
behind your back just a little bit

3343
02:07:44,400 --> 02:07:45,520
you'll feel a little tension in your

3344
02:07:45,520 --> 02:07:46,719
chest

3345
02:07:46,719 --> 02:07:49,440
okay thumbs up still and now slowly

3346
02:07:49,440 --> 02:07:51,360
rotate your thumbs down

3347
02:07:51,360 --> 02:07:53,520
oh yeah oh this is the thumbnail

3348
02:07:53,520 --> 02:07:55,679
somebody's going to post right here yeah

3349
02:07:55,679 --> 02:07:57,760
right there boom thumbs down but make

3350
02:07:57,760 --> 02:07:59,040
sure you're doing it like you know

3351
02:07:59,040 --> 02:08:01,199
clasping your fingers in there

3352
02:08:01,199 --> 02:08:03,119
yeah right i think you have like you

3353
02:08:03,119 --> 02:08:04,560
have to clasp your fingers in like

3354
02:08:04,560 --> 02:08:06,000
you're doing a thumbs up and then rotate

3355
02:08:06,000 --> 02:08:08,400
down you feel that feel it i hear pops

3356
02:08:08,400 --> 02:08:11,520
and cracks and

3357
02:08:11,520 --> 02:08:13,040
that's it eric's out of commission for

3358
02:08:13,040 --> 02:08:15,119
the rest of the stream my 50 year old

3359
02:08:15,119 --> 02:08:16,719
body doesn't want to do that all right

3360
02:08:16,719 --> 02:08:17,920
shake that and then the other one's for

3361
02:08:17,920 --> 02:08:19,360
carpal tunnel you just put your hands

3362
02:08:19,360 --> 02:08:20,960
back to back and push towards them and

3363
02:08:20,960 --> 02:08:22,239
bend at the wrist a little bit just hold

3364
02:08:22,239 --> 02:08:24,639
that for a few seconds you know a little

3365
02:08:24,639 --> 02:08:27,280
stretch of that tendon

3366
02:08:27,280 --> 02:08:28,960
or whatever it's called

3367
02:08:28,960 --> 02:08:30,960
and check that out all right cool

3368
02:08:30,960 --> 02:08:32,000
all right

3369
02:08:32,000 --> 02:08:34,320
you feel better i feel better i do

3370
02:08:34,320 --> 02:08:35,840
that's good how about you all in the

3371
02:08:35,840 --> 02:08:38,079
chat let's see anybody in the chat eric

3372
02:08:38,079 --> 02:08:39,760
is now a meme says zach curtis by the

3373
02:08:39,760 --> 02:08:40,530
way

3374
02:08:40,530 --> 02:08:43,920
[Laughter]

3375
02:08:43,920 --> 02:08:45,360
it's part of the joy of being on live

3376
02:08:45,360 --> 02:08:48,400
streams right yes it is it is all right

3377
02:08:48,400 --> 02:08:49,840
i think we have some housekeeping things

3378
02:08:49,840 --> 02:08:52,159
to to talk about during the break too

3379
02:08:52,159 --> 02:08:53,920
don't we do we

3380
02:08:53,920 --> 02:08:55,840
do we know

3381
02:08:55,840 --> 02:08:59,840
we do what i mean so stretching

3382
02:09:00,000 --> 02:09:02,000
well i think i thought we could go ahead

3383
02:09:02,000 --> 02:09:03,440
i was going to say why don't we put up

3384
02:09:03,440 --> 02:09:06,880
our graph here and thank our sponsors

3385
02:09:06,880 --> 02:09:08,000
oops

3386
02:09:08,000 --> 02:09:09,119
there we go

3387
02:09:09,119 --> 02:09:11,400
uh thank you all the great sponsors for

3388
02:09:11,400 --> 02:09:14,800
devsecond24 2022

3389
02:09:14,800 --> 02:09:18,639
and yes yes everybody give the applause

3390
02:09:18,639 --> 02:09:20,079
and um i think it's uh it's good to

3391
02:09:20,079 --> 02:09:21,280
mention also that

3392
02:09:21,280 --> 02:09:22,480
um

3393
02:09:22,480 --> 02:09:25,360
all proceeds from sponsors uh

3394
02:09:25,360 --> 02:09:27,440
during devsitcon 24

3395
02:09:27,440 --> 02:09:28,800
will benefit global charities every

3396
02:09:28,800 --> 02:09:30,400
penny is going to go to global charities

3397
02:09:30,400 --> 02:09:34,320
driving inclusiveness within technology

3398
02:09:34,320 --> 02:09:36,639
so we're aiming to support local orgs

3399
02:09:36,639 --> 02:09:37,520
across

3400
02:09:37,520 --> 02:09:39,520
you know globally across apj and the

3401
02:09:39,520 --> 02:09:40,880
americas

3402
02:09:40,880 --> 02:09:42,719
that are leading the movement to address

3403
02:09:42,719 --> 02:09:44,960
inequality in the tech sector and drive

3404
02:09:44,960 --> 02:09:47,040
inclusiveness and diversity

3405
02:09:47,040 --> 02:09:49,520
within our local communities so i just

3406
02:09:49,520 --> 02:09:51,760
wanted to point that out

3407
02:09:51,760 --> 02:09:53,679
and uh thank again all of the great

3408
02:09:53,679 --> 02:09:55,440
sponsors we have and be sure to visit

3409
02:09:55,440 --> 02:09:57,440
their booths i think every one of them

3410
02:09:57,440 --> 02:09:59,199
has some sort of freebie or giveaway

3411
02:09:59,199 --> 02:10:00,880
they're doing

3412
02:10:00,880 --> 02:10:02,960
i believe so yeah

3413
02:10:02,960 --> 02:10:04,639
doing some giveaways sponsor giveaways

3414
02:10:04,639 --> 02:10:06,960
are happening in the booths check them

3415
02:10:06,960 --> 02:10:08,639
out again that's over on hopkin if

3416
02:10:08,639 --> 02:10:09,920
you're watching on youtube just a heads

3417
02:10:09,920 --> 02:10:11,360
up on that if you want to get over into

3418
02:10:11,360 --> 02:10:14,079
hoppin you go to thedevsecond.com

3419
02:10:14,079 --> 02:10:16,480
website and it'll have a link to join

3420
02:10:16,480 --> 02:10:18,400
via that mechanism and you'll have

3421
02:10:18,400 --> 02:10:20,560
access to the event booth if you are on

3422
02:10:20,560 --> 02:10:23,679
hopkin there is an expo link on the left

3423
02:10:23,679 --> 02:10:26,079
hand side that you can go to to check

3424
02:10:26,079 --> 02:10:27,520
out and see

3425
02:10:27,520 --> 02:10:29,360
the booths that are available there and

3426
02:10:29,360 --> 02:10:30,560
some of the giveaways that they got

3427
02:10:30,560 --> 02:10:31,520
going on

3428
02:10:31,520 --> 02:10:35,199
thanks to our lovely lovely sponsors

3429
02:10:35,199 --> 02:10:38,079
what else do we got uh

3430
02:10:38,079 --> 02:10:40,400
so much so much well i think we should

3431
02:10:40,400 --> 02:10:42,239
remind folks about devsecond global

3432
02:10:42,239 --> 02:10:44,079
chapters especially since lewis was kind

3433
02:10:44,079 --> 02:10:45,920
of talking about the whales chapter we

3434
02:10:45,920 --> 02:10:47,840
have a bunch of different chapters don't

3435
02:10:47,840 --> 02:10:49,599
we

3436
02:10:49,599 --> 02:10:51,360
where are they at eric there they are

3437
02:10:51,360 --> 02:10:53,199
there it is yes

3438
02:10:53,199 --> 02:10:55,199
across 12 countries

3439
02:10:55,199 --> 02:10:57,679
13 chapters our north american chapter

3440
02:10:57,679 --> 02:10:59,920
is in virginia beach

3441
02:10:59,920 --> 02:11:01,920
and um

3442
02:11:01,920 --> 02:11:03,760
actually we'd love to actually grow our

3443
02:11:03,760 --> 02:11:06,639
north america presence uh and let me get

3444
02:11:06,639 --> 02:11:08,159
a screen share going here and i'll show

3445
02:11:08,159 --> 02:11:11,360
you how you could participate in that

3446
02:11:11,360 --> 02:11:12,960
share

3447
02:11:12,960 --> 02:11:14,719
come on where's my

3448
02:11:14,719 --> 02:11:17,119
screen

3449
02:11:17,760 --> 02:11:19,199
share the right screen

3450
02:11:19,199 --> 02:11:20,400
there we go so if you go to

3451
02:11:20,400 --> 02:11:23,400
devsecond.com

3452
02:11:23,520 --> 02:11:25,920
and go to community

3453
02:11:25,920 --> 02:11:28,320
get involved and scroll down past the

3454
02:11:28,320 --> 02:11:30,560
fold here you can apply today to start a

3455
02:11:30,560 --> 02:11:32,239
chapter if you're interested

3456
02:11:32,239 --> 02:11:33,840
and while you're here poke around if you

3457
02:11:33,840 --> 02:11:34,719
even if you don't want to start a

3458
02:11:34,719 --> 02:11:36,639
chapter um poke around here look around

3459
02:11:36,639 --> 02:11:38,800
see what you can uh volunteer and do

3460
02:11:38,800 --> 02:11:41,599
find events or jump in discord and start

3461
02:11:41,599 --> 02:11:44,320
chatting live with us anytime you want

3462
02:11:44,320 --> 02:11:45,679
excellent yes

3463
02:11:45,679 --> 02:11:47,679
all right i think that concludes the the

3464
02:11:47,679 --> 02:11:48,880
short break that we had there we're

3465
02:11:48,880 --> 02:11:50,960
going to jump into our next session

3466
02:11:50,960 --> 02:11:53,040
which is a lightning talk

3467
02:11:53,040 --> 02:11:54,719
and our next speaker

3468
02:11:54,719 --> 02:11:57,360
is laurent simon is a security engineer

3469
02:11:57,360 --> 02:11:59,360
in the google open source security team

3470
02:11:59,360 --> 02:12:01,199
he works on tooling for software

3471
02:12:01,199 --> 02:12:03,520
development life cycle and supply chain

3472
02:12:03,520 --> 02:12:05,360
integrity and will be talking to us

3473
02:12:05,360 --> 02:12:06,560
about assessing and improving the

3474
02:12:06,560 --> 02:12:08,560
security practices of open source

3475
02:12:08,560 --> 02:12:10,719
projects so without further ado let's

3476
02:12:10,719 --> 02:12:12,960
bring lauren on

3477
02:12:12,960 --> 02:12:15,520
hey there how you doing

3478
02:12:15,520 --> 02:12:18,480
hi i'm doing well how about you guys

3479
02:12:18,480 --> 02:12:21,199
doing well doing well thank you

3480
02:12:21,199 --> 02:12:23,040
i'm excited to hear about what you have

3481
02:12:23,040 --> 02:12:24,880
to share with us so eric and i are going

3482
02:12:24,880 --> 02:12:27,599
to jump off and let you take it away

3483
02:12:27,599 --> 02:12:30,480
okay cool thanks

3484
02:12:32,000 --> 02:12:33,280
all right

3485
02:12:33,280 --> 02:12:35,360
hi everyone so uh yeah thanks for the

3486
02:12:35,360 --> 02:12:36,400
intro

3487
02:12:36,400 --> 02:12:38,639
i'm laurent i'm a security engineer at

3488
02:12:38,639 --> 02:12:40,719
google and today i'll be talking about a

3489
02:12:40,719 --> 02:12:42,639
project called scorecard

3490
02:12:42,639 --> 02:12:44,560
which can help you assess and improve

3491
02:12:44,560 --> 02:12:48,480
the security of open source projects so

3492
02:12:48,480 --> 02:12:50,719
i work at google as a security engineer

3493
02:12:50,719 --> 02:12:52,639
i spend a lot of my time working with

3494
02:12:52,639 --> 02:12:54,320
the open ssf

3495
02:12:54,320 --> 02:12:56,320
on two of their main projects the

3496
02:12:56,320 --> 02:12:58,480
scorecard project which is the topic of

3497
02:12:58,480 --> 02:12:59,520
this talk

3498
02:12:59,520 --> 02:13:01,920
and the salsa project which is a

3499
02:13:01,920 --> 02:13:04,560
framework that helps secure your resil

3500
02:13:04,560 --> 02:13:07,679
your release pipeline

3501
02:13:07,679 --> 02:13:08,880
so not

3502
02:13:08,880 --> 02:13:10,480
i'm not sure everyone knows about the

3503
02:13:10,480 --> 02:13:12,880
open ssf so let me say a few words about

3504
02:13:12,880 --> 02:13:15,360
it the open ssf is the open source

3505
02:13:15,360 --> 02:13:16,960
security foundation

3506
02:13:16,960 --> 02:13:18,639
it's an organization where multiple

3507
02:13:18,639 --> 02:13:21,360
companies collaborate to help improve

3508
02:13:21,360 --> 02:13:24,000
the security of open source software

3509
02:13:24,000 --> 02:13:26,320
we do this by writing tools such as

3510
02:13:26,320 --> 02:13:29,280
scorecard we provide consulting perform

3511
02:13:29,280 --> 02:13:31,760
code audits and sometimes also publish

3512
02:13:31,760 --> 02:13:33,599
best practice documents

3513
02:13:33,599 --> 02:13:34,719
everything

3514
02:13:34,719 --> 02:13:37,360
in the openssf is is open

3515
02:13:37,360 --> 02:13:39,840
so we have public working groups slack

3516
02:13:39,840 --> 02:13:40,960
channels

3517
02:13:40,960 --> 02:13:42,960
bi-weekly meetings that are open for

3518
02:13:42,960 --> 02:13:45,119
everyone to join if you're interested

3519
02:13:45,119 --> 02:13:47,760
take a look at the openssf.org

3520
02:13:47,760 --> 02:13:51,440
and join join the conversation

3521
02:13:51,520 --> 02:13:52,639
all right so

3522
02:13:52,639 --> 02:13:54,480
as most of you may know most of the

3523
02:13:54,480 --> 02:13:56,320
third-party dependencies in modern

3524
02:13:56,320 --> 02:13:57,440
software

3525
02:13:57,440 --> 02:14:00,560
come from open source around 90 of them

3526
02:14:00,560 --> 02:14:03,040
and several critical pieces of software

3527
02:14:03,040 --> 02:14:04,159
we use

3528
02:14:04,159 --> 02:14:05,760
every day in production

3529
02:14:05,760 --> 02:14:08,800
such as kubernetes or open ssl come from

3530
02:14:08,800 --> 02:14:11,360
open source

3531
02:14:11,360 --> 02:14:13,679
however supply chain attacks are on the

3532
02:14:13,679 --> 02:14:16,719
rise and attackers are realizing that

3533
02:14:16,719 --> 02:14:19,360
it's much easier to attack the supply

3534
02:14:19,360 --> 02:14:22,079
chain than it is to find bugs in the

3535
02:14:22,079 --> 02:14:23,920
actual software

3536
02:14:23,920 --> 02:14:25,679
and over the past two years we've seen

3537
02:14:25,679 --> 02:14:28,079
significant rise in these attacks as

3538
02:14:28,079 --> 02:14:33,280
illustrated in this in this slide here

3539
02:14:34,320 --> 02:14:36,719
in this slide we have tried to visualize

3540
02:14:36,719 --> 02:14:38,840
the various components of the supply

3541
02:14:38,840 --> 02:14:41,520
chain and as you can see there are quite

3542
02:14:41,520 --> 02:14:43,520
a lot of places where an attacker could

3543
02:14:43,520 --> 02:14:46,719
try to target your project

3544
02:14:46,719 --> 02:14:48,800
starting by just sending malicious pull

3545
02:14:48,800 --> 02:14:52,000
requests to exploit an overprivileged c

3546
02:14:52,000 --> 02:14:53,679
i run where you run your test for

3547
02:14:53,679 --> 02:14:54,800
example

3548
02:14:54,800 --> 02:14:56,719
and i'll show a demo of this later in

3549
02:14:56,719 --> 02:14:58,719
this talk

3550
02:14:58,719 --> 02:15:00,560
an attacker could also compromise your

3551
02:15:00,560 --> 02:15:03,199
software source control system

3552
02:15:03,199 --> 02:15:05,360
which happened in the php attack a

3553
02:15:05,360 --> 02:15:07,520
couple of years ago

3554
02:15:07,520 --> 02:15:08,800
you could an attacker could also

3555
02:15:08,800 --> 02:15:10,960
compromise your build pipeline

3556
02:15:10,960 --> 02:15:13,199
that happened to solar wind

3557
02:15:13,199 --> 02:15:15,360
or an attacker could also try to

3558
02:15:15,360 --> 02:15:17,920
compromise package manager account

3559
02:15:17,920 --> 02:15:20,079
this happened about just two weeks ago

3560
02:15:20,079 --> 02:15:21,920
researchers showed that they could

3561
02:15:21,920 --> 02:15:24,159
register expired domains

3562
02:15:24,159 --> 02:15:27,280
and initiate reset password to take over

3563
02:15:27,280 --> 02:15:30,000
package manager accounts

3564
02:15:30,000 --> 02:15:32,320
and last but not least we see often

3565
02:15:32,320 --> 02:15:33,440
attacks

3566
02:15:33,440 --> 02:15:34,320
attacks

3567
02:15:34,320 --> 02:15:37,599
sorry attacks uh named typo squatting

3568
02:15:37,599 --> 02:15:40,400
where attackers registers

3569
02:15:40,400 --> 02:15:42,960
common names or look-alike names in the

3570
02:15:42,960 --> 02:15:45,280
hope of tricking users to install those

3571
02:15:45,280 --> 02:15:48,159
dependencies instead of the the genuine

3572
02:15:48,159 --> 02:15:50,480
dependencies

3573
02:15:50,480 --> 02:15:52,320
because of this

3574
02:15:52,320 --> 02:15:54,079
you know large

3575
02:15:54,079 --> 02:15:55,119
attack

3576
02:15:55,119 --> 02:15:56,560
attack surface

3577
02:15:56,560 --> 02:15:58,480
this is why the open ssf scorecard

3578
02:15:58,480 --> 02:16:02,079
project was created

3579
02:16:02,400 --> 02:16:05,760
in a nutshell scorecard is a tool that

3580
02:16:05,760 --> 02:16:08,560
assesses a number of important security

3581
02:16:08,560 --> 02:16:11,440
risks with a software development cycle

3582
02:16:11,440 --> 02:16:13,520
for projects that are natively developed

3583
02:16:13,520 --> 02:16:16,000
on github

3584
02:16:16,639 --> 02:16:18,560
scorecard can check whether you are

3585
02:16:18,560 --> 02:16:20,400
following good practices

3586
02:16:20,400 --> 02:16:22,560
for example are you using continuous

3587
02:16:22,560 --> 02:16:25,280
testing fuzzing static analysis

3588
02:16:25,280 --> 02:16:27,599
this is an important signal because it

3589
02:16:27,599 --> 02:16:30,560
reduces it reduces the chance of bugs

3590
02:16:30,560 --> 02:16:32,718
and it catches the catches them early in

3591
02:16:32,718 --> 02:16:35,200
the development cycle

3592
02:16:35,200 --> 02:16:37,359
scorecard will also check whether you

3593
02:16:37,359 --> 02:16:39,599
are updating your dependencies

3594
02:16:39,599 --> 02:16:42,080
or go also beyond that it will check

3595
02:16:42,080 --> 02:16:43,599
whether you have safe configuration

3596
02:16:43,599 --> 02:16:45,920
settings on github

3597
02:16:45,920 --> 02:16:48,000
one important setting is the so-called

3598
02:16:48,000 --> 02:16:50,558
branch protection setting which prevents

3599
02:16:50,558 --> 02:16:52,638
code changes from by malicious

3600
02:16:52,638 --> 02:16:54,160
developers

3601
02:16:54,160 --> 02:16:56,799
we have other checks such as the webhook

3602
02:16:56,799 --> 02:16:58,160
webhook check

3603
02:16:58,160 --> 02:17:00,478
which will verify whether you have

3604
02:17:00,478 --> 02:17:03,439
enabled authentication in your webhook

3605
02:17:03,439 --> 02:17:06,160
configuration

3606
02:17:06,398 --> 02:17:08,318
scorecard doesn't just look at good

3607
02:17:08,318 --> 02:17:11,359
practices it also warns about

3608
02:17:11,359 --> 02:17:12,718
empty patterns

3609
02:17:12,718 --> 02:17:15,519
for example if you have a secret which

3610
02:17:15,519 --> 02:17:17,280
is accessible to an untrusted pull

3611
02:17:17,280 --> 02:17:18,240
request

3612
02:17:18,240 --> 02:17:20,799
scorecard will warn you about that

3613
02:17:20,799 --> 02:17:23,760
scorecard will also warn you about

3614
02:17:23,760 --> 02:17:26,799
whether your ci runs or on github which

3615
02:17:26,799 --> 02:17:28,879
are called github workflows

3616
02:17:28,879 --> 02:17:30,638
it will warn you if they are if they are

3617
02:17:30,638 --> 02:17:32,160
over privileged

3618
02:17:32,160 --> 02:17:34,000
and this is really important because an

3619
02:17:34,000 --> 02:17:36,558
attacker could abuse those permissions

3620
02:17:36,558 --> 02:17:39,359
bypass code reviews and change your code

3621
02:17:39,359 --> 02:17:41,359
again i'll show a demo of this later in

3622
02:17:41,359 --> 02:17:43,840
the talk

3623
02:17:44,478 --> 02:17:46,558
there are two main use cases where we

3624
02:17:46,558 --> 02:17:49,439
think scorecard is beneficial

3625
02:17:49,439 --> 02:17:51,920
the first is to improve the security of

3626
02:17:51,920 --> 02:17:53,439
your own project

3627
02:17:53,439 --> 02:17:55,760
and it can help you reduce the risk that

3628
02:17:55,760 --> 02:17:57,359
your code will be tampered with by an

3629
02:17:57,359 --> 02:17:58,799
attacker

3630
02:17:58,799 --> 02:18:00,879
second you can use scorecard to assess

3631
02:18:00,879 --> 02:18:03,200
the risk of your dependencies

3632
02:18:03,200 --> 02:18:05,519
for example scorecard can warn you if

3633
02:18:05,519 --> 02:18:07,519
your dependencies appear to not be

3634
02:18:07,519 --> 02:18:08,718
maintained

3635
02:18:08,718 --> 02:18:11,599
and that is that is a signal which uh

3636
02:18:11,599 --> 02:18:13,679
tells you that the dependencies are

3637
02:18:13,679 --> 02:18:17,439
likely not to receive security updates

3638
02:18:17,439 --> 02:18:19,439
so let's see some examples

3639
02:18:19,439 --> 02:18:21,519
and let's start with how you can use

3640
02:18:21,519 --> 02:18:25,200
scorecard to assess your dependencies

3641
02:18:25,200 --> 02:18:27,200
so this is pretty simple all you have to

3642
02:18:27,200 --> 02:18:30,398
do is run the cli in this example we are

3643
02:18:30,398 --> 02:18:32,879
running a scorecard against a repo

3644
02:18:32,879 --> 02:18:33,760
called

3645
02:18:33,760 --> 02:18:36,840
sum slash repo minus

3646
02:18:36,840 --> 02:18:39,280
dependency scorecard will output some

3647
02:18:39,280 --> 02:18:41,519
warnings about security risks for

3648
02:18:41,519 --> 02:18:44,240
example the top warning indicates that

3649
02:18:44,240 --> 02:18:46,879
the project exposes a secret to

3650
02:18:46,879 --> 02:18:50,000
interested pull request

3651
02:18:50,799 --> 02:18:52,558
the second warning indicates that the

3652
02:18:52,558 --> 02:18:53,519
project

3653
02:18:53,519 --> 02:18:56,318
uses the default ci permission

3654
02:18:56,318 --> 02:18:58,799
uh which includes the ability

3655
02:18:58,799 --> 02:19:00,959
to push code directly to the to the

3656
02:19:00,959 --> 02:19:05,558
repository which is really dangerous

3657
02:19:06,160 --> 02:19:08,398
and this last warning indicates that the

3658
02:19:08,398 --> 02:19:10,318
project does not declare its

3659
02:19:10,318 --> 02:19:13,439
dependencies in an immutable way

3660
02:19:13,439 --> 02:19:15,040
so if the dependency is later

3661
02:19:15,040 --> 02:19:17,519
compromised and becomes malicious

3662
02:19:17,519 --> 02:19:19,280
your project would automatically

3663
02:19:19,280 --> 02:19:21,840
download this malicious dependency

3664
02:19:21,840 --> 02:19:24,160
and it could compromise the project or a

3665
02:19:24,160 --> 02:19:26,718
binary that you've compiled

3666
02:19:26,718 --> 02:19:28,718
this happened recently with the npm

3667
02:19:28,718 --> 02:19:31,759
caller package attack

3668
02:19:32,478 --> 02:19:34,879
if you are using go in your project the

3669
02:19:34,879 --> 02:19:36,280
official

3670
02:19:36,280 --> 02:19:39,040
pkg.good.dev website now integrates

3671
02:19:39,040 --> 02:19:40,799
better with scorecard

3672
02:19:40,799 --> 02:19:43,120
at the bottom right of the image you see

3673
02:19:43,120 --> 02:19:44,318
a link

3674
02:19:44,318 --> 02:19:46,799
and if you click on it it takes you to a

3675
02:19:46,799 --> 02:19:48,960
website called debs.dev

3676
02:19:48,960 --> 02:19:50,720
which shows you all the scorecard

3677
02:19:50,720 --> 02:19:52,800
results for a package

3678
02:19:52,800 --> 02:19:54,640
it gives you results for each of the

3679
02:19:54,640 --> 02:19:57,200
check and also an aggregate score

3680
02:19:57,200 --> 02:20:01,439
in this case it's 5.2 out of 10.

3681
02:20:01,439 --> 02:20:03,040
all right so now let's move on on how

3682
02:20:03,040 --> 02:20:06,240
you can use scorecard in your project uh

3683
02:20:06,240 --> 02:20:09,920
and install scorecard as a github action

3684
02:20:09,920 --> 02:20:11,920
so for this i need to share a different

3685
02:20:11,920 --> 02:20:15,800
tab so bear with me

3686
02:20:21,280 --> 02:20:22,479
one second

3687
02:20:22,479 --> 02:20:24,880
all right

3688
02:20:24,880 --> 02:20:27,840
all right so this is a project i created

3689
02:20:27,840 --> 02:20:30,720
a scorecard minus example

3690
02:20:30,720 --> 02:20:32,960
um so what you do if you want to install

3691
02:20:32,960 --> 02:20:34,720
scorecard you go to that security tab

3692
02:20:34,720 --> 02:20:36,319
here

3693
02:20:36,319 --> 02:20:38,000
all right and then you go to the left

3694
02:20:38,000 --> 02:20:41,040
code scanning alerts

3695
02:20:41,680 --> 02:20:43,200
i have already installed scorecard on

3696
02:20:43,200 --> 02:20:45,200
this repository so some alerts are

3697
02:20:45,200 --> 02:20:47,359
already populated but ignore this for a

3698
02:20:47,359 --> 02:20:48,479
second

3699
02:20:48,479 --> 02:20:49,680
i'll show you

3700
02:20:49,680 --> 02:20:51,040
we will go through some of them in a

3701
02:20:51,040 --> 02:20:52,160
second

3702
02:20:52,160 --> 02:20:53,439
if you want to install scroll card the

3703
02:20:53,439 --> 02:20:55,520
first time on the top right corner here

3704
02:20:55,520 --> 02:20:57,040
you have a button

3705
02:20:57,040 --> 02:20:58,720
add scanning tool

3706
02:20:58,720 --> 02:21:01,279
click on it

3707
02:21:02,399 --> 02:21:06,240
and here you can search for scorecard

3708
02:21:07,760 --> 02:21:11,560
and click configure

3709
02:21:13,120 --> 02:21:16,479
so this automatically populates the

3710
02:21:16,479 --> 02:21:19,040
workflow file for scorecard to run

3711
02:21:19,040 --> 02:21:20,960
and all you have to do is

3712
02:21:20,960 --> 02:21:23,439
push that to your repository

3713
02:21:23,439 --> 02:21:25,840
scorecard runs daily

3714
02:21:25,840 --> 02:21:28,240
every every day and also on every push

3715
02:21:28,240 --> 02:21:29,680
to the main branch

3716
02:21:29,680 --> 02:21:31,920
and as soon as scorecard runs you will

3717
02:21:31,920 --> 02:21:34,240
get alerts populated in the scanning

3718
02:21:34,240 --> 02:21:35,520
dashboard

3719
02:21:35,520 --> 02:21:37,200
that i showed earlier

3720
02:21:37,200 --> 02:21:40,240
something that i want to mention is that

3721
02:21:40,240 --> 02:21:42,800
scorecard takes a path token as an

3722
02:21:42,800 --> 02:21:44,720
optional input

3723
02:21:44,720 --> 02:21:46,880
you don't have to declare one but if you

3724
02:21:46,880 --> 02:21:48,240
don't

3725
02:21:48,240 --> 02:21:49,840
the branch protection check will be

3726
02:21:49,840 --> 02:21:52,479
disabled and this is due to a

3727
02:21:52,479 --> 02:21:55,120
limitation of the current github github

3728
02:21:55,120 --> 02:21:57,600
apis and we're working with github to

3729
02:21:57,600 --> 02:21:59,600
try to resolve this problem

3730
02:21:59,600 --> 02:22:02,000
so let's cancel the changes

3731
02:22:02,000 --> 02:22:05,600
and look at some of the results

3732
02:22:05,600 --> 02:22:07,120
scanning results

3733
02:22:07,120 --> 02:22:09,920
all right so for example if i click on

3734
02:22:09,920 --> 02:22:13,439
the fuzzing check

3735
02:22:13,439 --> 02:22:14,640
right here

3736
02:22:14,640 --> 02:22:16,880
you can see that scorecard is

3737
02:22:16,880 --> 02:22:18,800
complaining that the project is not

3738
02:22:18,800 --> 02:22:21,600
fuzzed which is which is correct

3739
02:22:21,600 --> 02:22:23,920
and there's other kind of

3740
02:22:23,920 --> 02:22:26,319
checks as you can see let's look at a

3741
02:22:26,319 --> 02:22:31,279
a critical result that scorecard

3742
02:22:31,680 --> 02:22:33,280
a critical alert

3743
02:22:33,280 --> 02:22:34,960
so here in this alert

3744
02:22:34,960 --> 02:22:37,040
scorecard is complaining and claiming

3745
02:22:37,040 --> 02:22:38,800
that there is a script injection

3746
02:22:38,800 --> 02:22:40,319
vulnerability

3747
02:22:40,319 --> 02:22:42,640
in this file pre-submit.yaml

3748
02:22:42,640 --> 02:22:45,520
due to this variable

3749
02:22:45,520 --> 02:22:47,040
all right so let's quick let's take a

3750
02:22:47,040 --> 02:22:50,720
look at the file

3751
02:22:50,720 --> 02:22:52,880
so roughly speaking what's happening

3752
02:22:52,880 --> 02:22:55,920
here is that this uh workflow is run on

3753
02:22:55,920 --> 02:22:58,560
every pull req every pull request

3754
02:22:58,560 --> 02:23:00,319
and it roughly does the following it

3755
02:23:00,319 --> 02:23:02,319
does a bunch of printing so it looks

3756
02:23:02,319 --> 02:23:04,479
pretty innocuous

3757
02:23:04,479 --> 02:23:05,920
but it turns out that this is actually a

3758
02:23:05,920 --> 02:23:07,520
vulnerable workflow

3759
02:23:07,520 --> 02:23:09,120
and to understand why

3760
02:23:09,120 --> 02:23:11,280
you have to know that when github runs

3761
02:23:11,280 --> 02:23:12,960
this script right here

3762
02:23:12,960 --> 02:23:15,840
it basically substitutes the variable

3763
02:23:15,840 --> 02:23:18,240
right here with the title of the pull

3764
02:23:18,240 --> 02:23:20,720
request provided by a net by a potential

3765
02:23:20,720 --> 02:23:21,920
attacker

3766
02:23:21,920 --> 02:23:24,800
this allows someone who sends a pull

3767
02:23:24,800 --> 02:23:28,880
request to gain remote code execution

3768
02:23:28,880 --> 02:23:31,200
so don't take my word for it let's just

3769
02:23:31,200 --> 02:23:33,840
demo it right now that we can actually

3770
02:23:33,840 --> 02:23:34,960
uh

3771
02:23:34,960 --> 02:23:37,040
get a remote code execution so as you

3772
02:23:37,040 --> 02:23:38,720
can see the last commit

3773
02:23:38,720 --> 02:23:40,800
on this repo is here from two hours ago

3774
02:23:40,800 --> 02:23:43,200
it's called updatetest.txt

3775
02:23:43,200 --> 02:23:44,840
so let's

3776
02:23:44,840 --> 02:23:47,600
um let's create a pull request real

3777
02:23:47,600 --> 02:23:49,760
quick

3778
02:23:49,760 --> 02:23:53,359
let's call it hello

3779
02:23:54,560 --> 02:23:58,119
create a pull request

3780
02:24:01,040 --> 02:24:03,600
all right and let's change the title

3781
02:24:03,600 --> 02:24:05,040
oops

3782
02:24:05,040 --> 02:24:06,080
this

3783
02:24:06,080 --> 02:24:08,560
second

3784
02:24:13,200 --> 02:24:15,359
all right i'm back okay so let's create

3785
02:24:15,359 --> 02:24:17,359
the pull request with this

3786
02:24:17,359 --> 02:24:20,399
weird looking title

3787
02:24:20,800 --> 02:24:22,399
all this is really doing is it's

3788
02:24:22,399 --> 02:24:24,640
escaping the double quote and then

3789
02:24:24,640 --> 02:24:26,640
pulling some content

3790
02:24:26,640 --> 02:24:29,200
and executing it all right

3791
02:24:29,200 --> 02:24:31,760
if we look at the actions

3792
02:24:31,760 --> 02:24:33,439
that are being you can see that the

3793
02:24:33,439 --> 02:24:36,399
pre-submit has kicked off it's being run

3794
02:24:36,399 --> 02:24:37,600
there's no interaction from the

3795
02:24:37,600 --> 02:24:39,120
maintainer

3796
02:24:39,120 --> 02:24:40,840
the job has

3797
02:24:40,840 --> 02:24:44,880
completed if we look at the

3798
02:24:44,880 --> 02:24:46,880
we can see that it it claimed devsec

3799
02:24:46,880 --> 02:24:50,000
concrete was here which was the

3800
02:24:50,000 --> 02:24:52,240
uh the title which is a word that was in

3801
02:24:52,240 --> 02:24:54,080
the title of the pull request right here

3802
02:24:54,080 --> 02:24:56,720
and we can verify that the

3803
02:24:56,720 --> 02:24:58,800
there's a new commit that just happened

3804
02:24:58,800 --> 02:25:00,399
um

3805
02:25:00,399 --> 02:25:02,160
which is uh basically the remote code

3806
02:25:02,160 --> 02:25:04,399
execution gave us access to push

3807
02:25:04,399 --> 02:25:06,479
directly to the to the main branch of

3808
02:25:06,479 --> 02:25:08,240
the repo

3809
02:25:08,240 --> 02:25:11,840
all right so let's go back to the slides

3810
02:25:20,640 --> 02:25:22,080
all right

3811
02:25:22,080 --> 02:25:24,080
so that that was that's the end of the

3812
02:25:24,080 --> 02:25:27,840
demo uh let me real quickly say uh a few

3813
02:25:27,840 --> 02:25:29,280
give you a few announcements we have

3814
02:25:29,280 --> 02:25:31,600
plenty of things coming up uh with the

3815
02:25:31,600 --> 02:25:33,840
scorecard project we have badges coming

3816
02:25:33,840 --> 02:25:36,080
up soon a website

3817
02:25:36,080 --> 02:25:38,160
we are also uh improving the scorecard

3818
02:25:38,160 --> 02:25:39,200
action

3819
02:25:39,200 --> 02:25:41,920
so that you can more easily view

3820
02:25:41,920 --> 02:25:44,319
the results for your dependencies

3821
02:25:44,319 --> 02:25:45,840
and also i'd like to give a shout out to

3822
02:25:45,840 --> 02:25:49,520
this project allstar which is an app

3823
02:25:49,520 --> 02:25:52,080
from the open ssf which which helps you

3824
02:25:52,080 --> 02:25:54,960
enforce policies at scale for scorecard

3825
02:25:54,960 --> 02:25:57,200
results

3826
02:25:57,200 --> 02:25:58,960
so uh thanks everyone that's the end of

3827
02:25:58,960 --> 02:26:00,560
my talk um

3828
02:26:00,560 --> 02:26:03,280
just a plug like the open sf community

3829
02:26:03,280 --> 02:26:05,280
is open and uh if you're interested in

3830
02:26:05,280 --> 02:26:07,040
joining the conversation and get

3831
02:26:07,040 --> 02:26:09,359
involved involved click the link on the

3832
02:26:09,359 --> 02:26:10,240
slide

3833
02:26:10,240 --> 02:26:12,640
thank you

3834
02:26:12,720 --> 02:26:14,640
wow that was really really eye-opening

3835
02:26:14,640 --> 02:26:16,000
laurent um

3836
02:26:16,000 --> 02:26:19,040
i had not seen that attack vector before

3837
02:26:19,040 --> 02:26:21,120
through github pr's and the titles of it

3838
02:26:21,120 --> 02:26:22,800
like that that that is super interesting

3839
02:26:22,800 --> 02:26:24,319
and thank you for uh bringing that to

3840
02:26:24,319 --> 02:26:25,840
everyone's attention there

3841
02:26:25,840 --> 02:26:29,520
eric david did we have any questions

3842
02:26:31,040 --> 02:26:33,120
i think we just got one from katherine

3843
02:26:33,120 --> 02:26:34,800
it says would i be able to enable

3844
02:26:34,800 --> 02:26:37,760
scorecard in git lab

3845
02:26:37,760 --> 02:26:39,280
yeah so we're working on it we don't

3846
02:26:39,280 --> 02:26:42,399
have support for it yet um

3847
02:26:42,399 --> 02:26:45,680
but uh yeah it's in the pipeline

3848
02:26:45,680 --> 02:26:47,520
we have prioritized github for now

3849
02:26:47,520 --> 02:26:49,040
because they have

3850
02:26:49,040 --> 02:26:51,680
more of the market share but yeah it's

3851
02:26:51,680 --> 02:26:53,920
in the pipeline

3852
02:26:53,920 --> 02:26:55,200
and if

3853
02:26:55,200 --> 02:26:57,120
anyone wants to help like put a request

3854
02:26:57,120 --> 02:26:58,399
i welcome

3855
02:26:58,399 --> 02:26:59,760
in this case probably a lot of pull

3856
02:26:59,760 --> 02:27:01,600
requests

3857
02:27:01,600 --> 02:27:03,680
excellent and again shout out to open

3858
02:27:03,680 --> 02:27:06,080
ssf for folks to check out and start

3859
02:27:06,080 --> 02:27:07,520
contributing and be a part of as well

3860
02:27:07,520 --> 02:27:09,920
thank you so much laurent and uh

3861
02:27:09,920 --> 02:27:11,680
appreciate you being here yeah thanks

3862
02:27:11,680 --> 02:27:13,439
for having me

3863
02:27:13,439 --> 02:27:16,479
see you bye everyone

3864
02:27:16,479 --> 02:27:18,319
all right eric who what do we have next

3865
02:27:18,319 --> 02:27:20,240
now i mean we are just back to back

3866
02:27:20,240 --> 02:27:22,640
rolling with these great jobs

3867
02:27:22,640 --> 02:27:25,600
yeah um okay so next up we have

3868
02:27:25,600 --> 02:27:26,880
mackenzie

3869
02:27:26,880 --> 02:27:29,359
uh who is i'm sorry

3870
02:27:29,359 --> 02:27:31,200
my notes are slow as a developer

3871
02:27:31,200 --> 02:27:33,520
advocate with a passion for devops and

3872
02:27:33,520 --> 02:27:35,840
code security co-founder and former cto

3873
02:27:35,840 --> 02:27:36,560
of

3874
02:27:36,560 --> 02:27:38,479
a health tech startup

3875
02:27:38,479 --> 02:27:40,319
and i'm not going to go any farther i'll

3876
02:27:40,319 --> 02:27:41,840
let him introduce himself more than that

3877
02:27:41,840 --> 02:27:43,760
i'm really excited we are going to be

3878
02:27:43,760 --> 02:27:46,240
talking about oh gosh he's got a long

3879
02:27:46,240 --> 02:27:48,960
title too exploiting exposed credentials

3880
02:27:48,960 --> 02:27:52,000
in 2022 how adversaries discover and

3881
02:27:52,000 --> 02:27:55,359
exploit leaked secrets

3882
02:27:55,359 --> 02:27:57,120
he leaks their secrets nobody would ever

3883
02:27:57,120 --> 02:27:59,520
commit to their github repository or

3884
02:27:59,520 --> 02:28:00,720
hash or

3885
02:28:00,720 --> 02:28:02,160
share it on a

3886
02:28:02,160 --> 02:28:04,399
live stream um

3887
02:28:04,399 --> 02:28:06,000
or anything like that i've never done

3888
02:28:06,000 --> 02:28:08,160
anything like that no no way all right

3889
02:28:08,160 --> 02:28:09,760
let's bring mckenzie on

3890
02:28:09,760 --> 02:28:12,479
hey mackenzie welcome hey guys how you

3891
02:28:12,479 --> 02:28:14,240
going

3892
02:28:14,240 --> 02:28:15,760
i'm well how are you

3893
02:28:15,760 --> 02:28:17,359
good good good just chuckling just

3894
02:28:17,359 --> 02:28:19,439
chuckling in the background

3895
02:28:19,439 --> 02:28:22,319
talking talking there but yeah no great

3896
02:28:22,319 --> 02:28:24,160
great great to be here

3897
02:28:24,160 --> 02:28:25,520
great to have you well without further

3898
02:28:25,520 --> 02:28:27,120
ado we'll get out of your way and let

3899
02:28:27,120 --> 02:28:29,760
you take it away

3900
02:28:30,319 --> 02:28:32,720
well excellent so as um as was just

3901
02:28:32,720 --> 02:28:35,520
being said um uh i have to work on

3902
02:28:35,520 --> 02:28:37,280
shortening my titles a little bit but i

3903
02:28:37,280 --> 02:28:39,200
always i'm just trying to get so much as

3904
02:28:39,200 --> 02:28:41,280
much as i can in there but we'll be

3905
02:28:41,280 --> 02:28:43,680
talking about exploiting uh secrets

3906
02:28:43,680 --> 02:28:45,359
exploiting credentials

3907
02:28:45,359 --> 02:28:47,600
uh what happens when you leak them how

3908
02:28:47,600 --> 02:28:49,760
secrets are leaked how adversaries find

3909
02:28:49,760 --> 02:28:53,040
them and and use them basically

3910
02:28:53,040 --> 02:28:56,240
to attack your organizations

3911
02:28:56,240 --> 02:28:58,800
so i i like to start i know most people

3912
02:28:58,800 --> 02:29:01,040
probably kind of know what secrets are

3913
02:29:01,040 --> 02:29:02,880
what digital authentication credentials

3914
02:29:02,880 --> 02:29:04,800
are but i just want to start at the

3915
02:29:04,800 --> 02:29:07,439
basics get everyone kind of up on the

3916
02:29:07,439 --> 02:29:08,720
same page

3917
02:29:08,720 --> 02:29:11,439
and uh then we can dive into some of the

3918
02:29:11,439 --> 02:29:13,280
more technical meat of the presentation

3919
02:29:13,280 --> 02:29:14,479
so let's start with like what are

3920
02:29:14,479 --> 02:29:17,040
secrets so secrets i'm typically

3921
02:29:17,040 --> 02:29:20,240
referring to uh things like api keys you

3922
02:29:20,240 --> 02:29:22,080
know your credential pairs the

3923
02:29:22,080 --> 02:29:23,680
credential pairs to your database could

3924
02:29:23,680 --> 02:29:25,920
be security certificates it could be a

3925
02:29:25,920 --> 02:29:27,840
whole range of things and the the key

3926
02:29:27,840 --> 02:29:29,200
that they all have in common is that

3927
02:29:29,200 --> 02:29:31,520
these are authentication strings right

3928
02:29:31,520 --> 02:29:35,040
we use these to authenticate ourselves

3929
02:29:35,040 --> 02:29:36,640
with um

3930
02:29:36,640 --> 02:29:39,600
other systems internal services external

3931
02:29:39,600 --> 02:29:40,800
services

3932
02:29:40,800 --> 02:29:44,399
sas tools so these are really the crown

3933
02:29:44,399 --> 02:29:46,240
jewels to your organization and

3934
02:29:46,240 --> 02:29:48,000
attackers really

3935
02:29:48,000 --> 02:29:50,800
want and also likely need these to be

3936
02:29:50,800 --> 02:29:53,280
able to get into your systems

3937
02:29:53,280 --> 02:29:55,359
they need they can use them to elevate

3938
02:29:55,359 --> 02:29:57,760
their privileges they can move use them

3939
02:29:57,760 --> 02:29:59,920
to what we call move laterally so

3940
02:29:59,920 --> 02:30:01,760
leapfrog into different different

3941
02:30:01,760 --> 02:30:03,840
services once they're inside so these

3942
02:30:03,840 --> 02:30:05,120
are really the crown jewels of your

3943
02:30:05,120 --> 02:30:07,280
organization and you really want to

3944
02:30:07,280 --> 02:30:09,439
protect them but we're at a bit of a

3945
02:30:09,439 --> 02:30:11,200
problem with secrets and that is that

3946
02:30:11,200 --> 02:30:14,000
they're both highly sensitive that we

3947
02:30:14,000 --> 02:30:15,600
need to protect

3948
02:30:15,600 --> 02:30:17,760
and we need to distribute them widely

3949
02:30:17,760 --> 02:30:20,160
because a lot of people need secrets to

3950
02:30:20,160 --> 02:30:22,560
be able to do their job

3951
02:30:22,560 --> 02:30:24,640
and this is a because of a pretty big

3952
02:30:24,640 --> 02:30:27,680
shift in how we build software today

3953
02:30:27,680 --> 02:30:28,560
because

3954
02:30:28,560 --> 02:30:30,000
a way back

3955
02:30:30,000 --> 02:30:31,439
way back when

3956
02:30:31,439 --> 02:30:33,520
we used to build these monolithic

3957
02:30:33,520 --> 02:30:36,319
applications these are things where

3958
02:30:36,319 --> 02:30:38,399
the software needed everything to run

3959
02:30:38,399 --> 02:30:39,920
was internal so everything that that

3960
02:30:39,920 --> 02:30:42,399
software needed to run was inside it but

3961
02:30:42,399 --> 02:30:44,720
now we can leverage lots of different

3962
02:30:44,720 --> 02:30:47,200
systems so the simplest example is maybe

3963
02:30:47,200 --> 02:30:48,720
a payment system right if you're

3964
02:30:48,720 --> 02:30:50,560
building some software and application

3965
02:30:50,560 --> 02:30:52,640
that needs to to process credit cards

3966
02:30:52,640 --> 02:30:54,560
for payment are you going to build that

3967
02:30:54,560 --> 02:30:56,479
all out yourself find out what the

3968
02:30:56,479 --> 02:30:58,240
financial regulations are or are you

3969
02:30:58,240 --> 02:31:00,080
just going to use stripe or paypal or

3970
02:31:00,080 --> 02:31:01,920
some other service

3971
02:31:01,920 --> 02:31:04,560
so we extrapolate this to a lot of areas

3972
02:31:04,560 --> 02:31:07,120
in our organizations that could be open

3973
02:31:07,120 --> 02:31:09,040
source components too that we're

3974
02:31:09,040 --> 02:31:11,200
building on but it can be sas platforms

3975
02:31:11,200 --> 02:31:13,840
it can be managed services can be cloud

3976
02:31:13,840 --> 02:31:16,080
infrastructure so this change has meant

3977
02:31:16,080 --> 02:31:17,359
that we need to handle a lot of these

3978
02:31:17,359 --> 02:31:18,960
secrets right and it means we need to

3979
02:31:18,960 --> 02:31:21,280
distribute them and create a huge number

3980
02:31:21,280 --> 02:31:23,760
of these in any given application

3981
02:31:23,760 --> 02:31:25,920
now the second problem is that code is

3982
02:31:25,920 --> 02:31:28,080
actually a really leaky asset i want to

3983
02:31:28,080 --> 02:31:30,000
give through some examples of kind of

3984
02:31:30,000 --> 02:31:32,240
how code has leaked into the public

3985
02:31:32,240 --> 02:31:33,280
realm

3986
02:31:33,280 --> 02:31:35,439
but basically we don't have adequate

3987
02:31:35,439 --> 02:31:37,200
protection around code and this is by

3988
02:31:37,200 --> 02:31:40,000
design and is important because you know

3989
02:31:40,000 --> 02:31:41,840
code is something that we collaborate on

3990
02:31:41,840 --> 02:31:43,600
and we need to be able to do that but it

3991
02:31:43,600 --> 02:31:45,920
means it's hard to protect so when we

3992
02:31:45,920 --> 02:31:48,640
get secrets inside our code it creates a

3993
02:31:48,640 --> 02:31:50,880
real problem and then the last kind of

3994
02:31:50,880 --> 02:31:55,120
piece to this fragile pyramid is is that

3995
02:31:55,120 --> 02:31:56,800
a software developers are under a lot of

3996
02:31:56,800 --> 02:31:58,800
pressure you know we're trying to get

3997
02:31:58,800 --> 02:32:00,880
our release cycles shorter we have lots

3998
02:32:00,880 --> 02:32:03,359
of competition uh we're building very

3999
02:32:03,359 --> 02:32:06,080
very quickly um so this all together

4000
02:32:06,080 --> 02:32:07,840
kind of combines this perfect storm for

4001
02:32:07,840 --> 02:32:08,640
these

4002
02:32:08,640 --> 02:32:10,880
secrets you know these crown jewels of

4003
02:32:10,880 --> 02:32:13,520
our organization to leak to kind of be

4004
02:32:13,520 --> 02:32:15,760
exploited by attackers

4005
02:32:15,760 --> 02:32:17,520
so just quickly we can give a pretty

4006
02:32:17,520 --> 02:32:19,600
good example of kind of how many of

4007
02:32:19,600 --> 02:32:21,439
these secrets are so let's say that

4008
02:32:21,439 --> 02:32:24,560
we're building an application and i used

4009
02:32:24,560 --> 02:32:27,280
the example about stripe before but we

4010
02:32:27,280 --> 02:32:28,560
can extrapolate this to lots of

4011
02:32:28,560 --> 02:32:30,479
different services right if we're

4012
02:32:30,479 --> 02:32:32,319
building the application in a django

4013
02:32:32,319 --> 02:32:34,319
framework or using django then we have

4014
02:32:34,319 --> 02:32:36,880
django keys that we need to manage

4015
02:32:36,880 --> 02:32:38,160
maybe we're connecting into twitter

4016
02:32:38,160 --> 02:32:40,160
maybe we're using octa as our thought

4017
02:32:40,160 --> 02:32:42,880
authentication maybe we're using algolia

4018
02:32:42,880 --> 02:32:44,960
as our search function inside our

4019
02:32:44,960 --> 02:32:46,960
application so all of these different

4020
02:32:46,960 --> 02:32:49,040
systems need to leverage secrets to be

4021
02:32:49,040 --> 02:32:50,800
able to connect to them and all of them

4022
02:32:50,800 --> 02:32:52,240
can contain a lot of sensitive

4023
02:32:52,240 --> 02:32:55,439
information or provide opportunities for

4024
02:32:55,439 --> 02:32:57,760
adversaries to be able to jump between

4025
02:32:57,760 --> 02:32:58,560
them

4026
02:32:58,560 --> 02:33:00,080
and then once we've built our

4027
02:33:00,080 --> 02:33:01,840
application right we're not done with

4028
02:33:01,840 --> 02:33:04,080
secrets yet because we need to host this

4029
02:33:04,080 --> 02:33:06,000
application we need to kind of make it

4030
02:33:06,000 --> 02:33:08,000
accessible so our infrastructure that we

4031
02:33:08,000 --> 02:33:10,560
use deals with secrets too maybe we're

4032
02:33:10,560 --> 02:33:13,600
hosting this on our aws cloud

4033
02:33:13,600 --> 02:33:16,000
and so now we need to deal with aws

4034
02:33:16,000 --> 02:33:18,479
credentials you know we have to manage

4035
02:33:18,479 --> 02:33:20,319
our code so we're dealing with git

4036
02:33:20,319 --> 02:33:22,479
credentials we have uh testing being

4037
02:33:22,479 --> 02:33:24,319
done in our ci cd pipelines when we're

4038
02:33:24,319 --> 02:33:26,080
deploying apps so we have credentials

4039
02:33:26,080 --> 02:33:27,359
for those and they can be really

4040
02:33:27,359 --> 02:33:30,000
sensitive i'll show an example of that

4041
02:33:30,000 --> 02:33:31,040
right so once we've built our

4042
02:33:31,040 --> 02:33:33,120
application and we have some inventory

4043
02:33:33,120 --> 02:33:34,800
infrastructure in place people can

4044
02:33:34,800 --> 02:33:36,800
access it right probably the marketing

4045
02:33:36,800 --> 02:33:38,319
teams the sales teams are going to want

4046
02:33:38,319 --> 02:33:40,479
integration so maybe we have salesforce

4047
02:33:40,479 --> 02:33:42,319
integrations graphene slack all these

4048
02:33:42,319 --> 02:33:44,399
other different areas uh so now we have

4049
02:33:44,399 --> 02:33:46,640
more secrets to to deal with and we

4050
02:33:46,640 --> 02:33:48,000
haven't even started talking about the

4051
02:33:48,000 --> 02:33:50,880
internal microsystems or microservices

4052
02:33:50,880 --> 02:33:52,880
that you're creating that also probably

4053
02:33:52,880 --> 02:33:55,600
leverage secrets for authentication but

4054
02:33:55,600 --> 02:33:57,439
aren't a named service like the other

4055
02:33:57,439 --> 02:33:59,920
ones on here so this is oversimplified

4056
02:33:59,920 --> 02:34:02,720
version but we can see that very quickly

4057
02:34:02,720 --> 02:34:05,040
we can end up with hundreds thousands of

4058
02:34:05,040 --> 02:34:07,040
these different services and then we can

4059
02:34:07,040 --> 02:34:09,200
end up with hundreds and thousands of

4060
02:34:09,200 --> 02:34:11,520
different credentials different secrets

4061
02:34:11,520 --> 02:34:14,160
that we need to access them so this is

4062
02:34:14,160 --> 02:34:16,960
largely kind of the problem of how many

4063
02:34:16,960 --> 02:34:19,200
secrets that we are dealing with as an

4064
02:34:19,200 --> 02:34:21,760
organization today

4065
02:34:21,760 --> 02:34:23,840
now the the last part of that component

4066
02:34:23,840 --> 02:34:26,000
is the unwanted distribution of these

4067
02:34:26,000 --> 02:34:28,319
secrets now they can kind of leak in a

4068
02:34:28,319 --> 02:34:30,160
lot of different ways but the number one

4069
02:34:30,160 --> 02:34:32,399
way that we lose track of these secrets

4070
02:34:32,399 --> 02:34:34,560
is through code

4071
02:34:34,560 --> 02:34:36,960
particularly our version control systems

4072
02:34:36,960 --> 02:34:39,439
so you can imagine a situation where a

4073
02:34:39,439 --> 02:34:41,760
secret gets hard-coded into source code

4074
02:34:41,760 --> 02:34:43,920
right developer is quickly trying to do

4075
02:34:43,920 --> 02:34:46,479
something maybe they uh they hard code a

4076
02:34:46,479 --> 02:34:48,000
credential to get something working

4077
02:34:48,000 --> 02:34:49,439
maybe they're intending to remove it

4078
02:34:49,439 --> 02:34:50,800
later before it goes on to the master

4079
02:34:50,800 --> 02:34:52,800
but it ends up in our source code it

4080
02:34:52,800 --> 02:34:55,120
ends up in our version control system

4081
02:34:55,120 --> 02:34:57,439
now immediately this is then cloned onto

4082
02:34:57,439 --> 02:34:59,520
multiple different developers machines

4083
02:34:59,520 --> 02:35:01,920
right so we've now lost track of where

4084
02:35:01,920 --> 02:35:03,840
that secrets ended up it's in our source

4085
02:35:03,840 --> 02:35:05,120
code plus it's on all the different

4086
02:35:05,120 --> 02:35:06,960
developers machines maybe it's been

4087
02:35:06,960 --> 02:35:09,439
copied into uh into some messaging

4088
02:35:09,439 --> 02:35:12,080
systems like slack

4089
02:35:12,080 --> 02:35:14,560
it's probably backed up into different

4090
02:35:14,560 --> 02:35:17,040
servers everywhere and it may even end

4091
02:35:17,040 --> 02:35:19,840
up in a running application or end up in

4092
02:35:19,840 --> 02:35:21,680
our deployment tools maybe in docker

4093
02:35:21,680 --> 02:35:22,720
images

4094
02:35:22,720 --> 02:35:25,920
and the key thing about this is that we

4095
02:35:25,920 --> 02:35:26,960
actually

4096
02:35:26,960 --> 02:35:30,880
have no visibility we have no idea where

4097
02:35:30,880 --> 02:35:33,280
the secret has ended up so we don't even

4098
02:35:33,280 --> 02:35:34,960
know that this secret has actually been

4099
02:35:34,960 --> 02:35:36,240
compromised we don't know that this

4100
02:35:36,240 --> 02:35:38,560
secret uh is in backups it's in

4101
02:35:38,560 --> 02:35:41,040
different developers machines we don't

4102
02:35:41,040 --> 02:35:43,359
know we can't restrict who has access to

4103
02:35:43,359 --> 02:35:46,000
it so we end up with a problem

4104
02:35:46,000 --> 02:35:48,720
that collectively we call secret sprawl

4105
02:35:48,720 --> 02:35:51,200
right and attackers really rely on this

4106
02:35:51,200 --> 02:35:54,000
concept of secret sprawl to be able to

4107
02:35:54,000 --> 02:35:56,399
kind of exploit these secrets and i have

4108
02:35:56,399 --> 02:35:58,160
a quick demo that i want to show you

4109
02:35:58,160 --> 02:35:59,359
here today

4110
02:35:59,359 --> 02:36:01,760
now uh they say you should never do live

4111
02:36:01,760 --> 02:36:03,200
demos but we're going to give it a go

4112
02:36:03,200 --> 02:36:05,280
and we'll hope for the best

4113
02:36:05,280 --> 02:36:07,280
usually you can rely on bad guys pretty

4114
02:36:07,280 --> 02:36:10,319
well so here i have a configuration file

4115
02:36:10,319 --> 02:36:12,800
a python configuration file in a in a

4116
02:36:12,800 --> 02:36:15,359
fake project and right here we have an

4117
02:36:15,359 --> 02:36:18,800
aws credential now this aws credential

4118
02:36:18,800 --> 02:36:20,160
isn't going to help you much if you want

4119
02:36:20,160 --> 02:36:22,720
to do some bitcoin mining but what this

4120
02:36:22,720 --> 02:36:24,720
is is a canary token

4121
02:36:24,720 --> 02:36:26,880
now lewis briefly spoke about canary

4122
02:36:26,880 --> 02:36:29,680
tokens in an earlier session here

4123
02:36:29,680 --> 02:36:31,680
but essentially what this is going to do

4124
02:36:31,680 --> 02:36:34,399
is every time someone tries to exploit

4125
02:36:34,399 --> 02:36:36,319
this credential they're going to let me

4126
02:36:36,319 --> 02:36:38,399
know it's going to notify me

4127
02:36:38,399 --> 02:36:39,760
and what i'm going to do is i'm going to

4128
02:36:39,760 --> 02:36:42,160
do the number one sin that you can do

4129
02:36:42,160 --> 02:36:43,840
when dealing with secrets and i'm going

4130
02:36:43,840 --> 02:36:47,439
to push this secret or this file

4131
02:36:47,439 --> 02:36:50,479
into a public git repository

4132
02:36:50,479 --> 02:36:54,000
so i'm just going to quickly do that

4133
02:36:54,160 --> 02:36:56,390
no mackenzie don't do that

4134
02:36:56,390 --> 02:36:58,720
[Laughter]

4135
02:36:58,720 --> 02:36:59,680
ah

4136
02:36:59,680 --> 02:37:02,399
it's done it's done now

4137
02:37:02,399 --> 02:37:05,040
now what i have here is i have uh on my

4138
02:37:05,040 --> 02:37:06,800
page i said this is a canary token

4139
02:37:06,800 --> 02:37:08,240
what's going to happen is this is going

4140
02:37:08,240 --> 02:37:10,399
to let me know every time someone tries

4141
02:37:10,399 --> 02:37:11,520
and access

4142
02:37:11,520 --> 02:37:14,960
that token and i have about

4143
02:37:14,960 --> 02:37:17,600
20 minutes left on this presentation and

4144
02:37:17,600 --> 02:37:19,120
i'm going to see at the end how many

4145
02:37:19,120 --> 02:37:20,960
people between now and in 20 minutes

4146
02:37:20,960 --> 02:37:24,080
have tried to access my aws credential

4147
02:37:24,080 --> 02:37:25,439
right and i want to do this for a couple

4148
02:37:25,439 --> 02:37:28,080
of reasons one is i want to show that

4149
02:37:28,080 --> 02:37:30,640
that this problem is so widespread but i

4150
02:37:30,640 --> 02:37:33,200
also want to show that actually source

4151
02:37:33,200 --> 02:37:35,439
code is being monitored and there's a

4152
02:37:35,439 --> 02:37:37,040
number of ways that attackers can do

4153
02:37:37,040 --> 02:37:38,720
this and we'll i'll talk about that in a

4154
02:37:38,720 --> 02:37:40,640
bit later

4155
02:37:40,640 --> 02:37:42,479
but now

4156
02:37:42,479 --> 02:37:45,600
let's have a look at some cases where

4157
02:37:45,600 --> 02:37:47,040
attackers have been able to exploit

4158
02:37:47,040 --> 02:37:49,120
these secrets in real life not just

4159
02:37:49,120 --> 02:37:50,960
hypothetical examples like the one we're

4160
02:37:50,960 --> 02:37:51,920
doing

4161
02:37:51,920 --> 02:37:54,080
so in uber uber actually had two

4162
02:37:54,080 --> 02:37:57,200
instances where the credentials were

4163
02:37:57,200 --> 02:38:00,720
were exploited now one was because an

4164
02:38:00,720 --> 02:38:03,200
employee of uber did exactly what i just

4165
02:38:03,200 --> 02:38:05,840
did they just pushed credentials in a

4166
02:38:05,840 --> 02:38:08,240
public personal git repository now the

4167
02:38:08,240 --> 02:38:11,040
key is that this was actually code for

4168
02:38:11,040 --> 02:38:12,160
uber

4169
02:38:12,160 --> 02:38:14,160
and i'm not sure what caused it perhaps

4170
02:38:14,160 --> 02:38:15,600
they got confused with repositories

4171
02:38:15,600 --> 02:38:17,760
perhaps they misconfigured their git

4172
02:38:17,760 --> 02:38:21,600
but this ended up publicly on that that

4173
02:38:21,600 --> 02:38:24,399
employee's personal github account

4174
02:38:24,399 --> 02:38:26,560
attackers found it and it gave access to

4175
02:38:26,560 --> 02:38:28,160
an amazon s3 bucket where they were able

4176
02:38:28,160 --> 02:38:31,040
to gain access to sensitive information

4177
02:38:31,040 --> 02:38:34,240
they also had another example where

4178
02:38:34,240 --> 02:38:36,080
in a private case where they had a

4179
02:38:36,080 --> 02:38:39,200
private git repository so not public

4180
02:38:39,200 --> 02:38:42,240
and inside this there was also amazon s3

4181
02:38:42,240 --> 02:38:44,080
buckets that were hard coded into the

4182
02:38:44,080 --> 02:38:46,080
source code so how did the attackers

4183
02:38:46,080 --> 02:38:47,920
find these well it was actually because

4184
02:38:47,920 --> 02:38:50,240
of poor password hygiene so these some

4185
02:38:50,240 --> 02:38:52,160
employees were using the same passwords

4186
02:38:52,160 --> 02:38:53,920
for multiple systems i think some of

4187
02:38:53,920 --> 02:38:55,840
those other systems were compromised and

4188
02:38:55,840 --> 02:38:57,280
then they use that password to gain

4189
02:38:57,280 --> 02:38:59,280
access to git repositories where they

4190
02:38:59,280 --> 02:39:01,359
found the sensitive information so this

4191
02:39:01,359 --> 02:39:03,280
illustrates kind of

4192
02:39:03,280 --> 02:39:05,280
quite well both the public and the

4193
02:39:05,280 --> 02:39:07,680
private aspect of not having secrets

4194
02:39:07,680 --> 02:39:10,640
inside your source code now another

4195
02:39:10,640 --> 02:39:12,240
example and probably one of my favorite

4196
02:39:12,240 --> 02:39:14,960
ones is that of code cov

4197
02:39:14,960 --> 02:39:17,760
so code called was compromised uh early

4198
02:39:17,760 --> 02:39:20,720
last year in a supply chain attack uh so

4199
02:39:20,720 --> 02:39:22,560
we we just heard from lauren about some

4200
02:39:22,560 --> 02:39:25,280
supply chain attacks so i want to talk

4201
02:39:25,280 --> 02:39:27,600
about the code cov supply chain tag so

4202
02:39:27,600 --> 02:39:29,120
firstly what is

4203
02:39:29,120 --> 02:39:32,800
code cov so code cov is a code coverage

4204
02:39:32,800 --> 02:39:36,000
tool basically what this tool does is it

4205
02:39:36,000 --> 02:39:38,720
tests how much of your code

4206
02:39:38,720 --> 02:39:40,800
is being tested by the other tools it

4207
02:39:40,800 --> 02:39:42,640
gives you a report of how much of your

4208
02:39:42,640 --> 02:39:44,800
code is being tested by other tools so

4209
02:39:44,800 --> 02:39:46,880
it does a very specific job it sits at

4210
02:39:46,880 --> 02:39:49,040
your ci cd pipeline personally i think

4211
02:39:49,040 --> 02:39:51,439
it's a great tool but this would be one

4212
02:39:51,439 --> 02:39:53,760
of multiple tools that you would have at

4213
02:39:53,760 --> 02:39:56,720
the time of their breach they had 20 000

4214
02:39:56,720 --> 02:39:59,040
users so it was a significant user base

4215
02:39:59,040 --> 02:40:01,680
and some large companies which i'll talk

4216
02:40:01,680 --> 02:40:04,640
about were using code cov

4217
02:40:04,640 --> 02:40:06,479
so what actually happened

4218
02:40:06,479 --> 02:40:09,680
so encode calls doc kind of public main

4219
02:40:09,680 --> 02:40:11,280
docker image so anyone could have

4220
02:40:11,280 --> 02:40:13,200
downloaded this people this is a docker

4221
02:40:13,200 --> 02:40:15,680
image that people were using to run code

4222
02:40:15,680 --> 02:40:18,479
cov inside this docker image there was a

4223
02:40:18,479 --> 02:40:22,000
plain text file a plain text credential

4224
02:40:22,000 --> 02:40:24,479
i should say this credential

4225
02:40:24,479 --> 02:40:28,240
gave access to their source code so it

4226
02:40:28,240 --> 02:40:31,200
gave access uh to yeah the ability for

4227
02:40:31,200 --> 02:40:32,479
them not only to be able to access the

4228
02:40:32,479 --> 02:40:34,319
source code for also be able to update

4229
02:40:34,319 --> 02:40:37,040
their source code so the attackers found

4230
02:40:37,040 --> 02:40:39,359
this plain text credential in again

4231
02:40:39,359 --> 02:40:41,680
their public docker image and once they

4232
02:40:41,680 --> 02:40:45,040
had that they were then able to inject

4233
02:40:45,040 --> 02:40:45,840
some

4234
02:40:45,840 --> 02:40:47,920
malicious code

4235
02:40:47,920 --> 02:40:50,479
into codecov's code base now they did it

4236
02:40:50,479 --> 02:40:52,560
in a batch uploaders file it was a

4237
02:40:52,560 --> 02:40:54,800
fairly ugly file it was thousands of

4238
02:40:54,800 --> 02:40:56,399
lines deep

4239
02:40:56,399 --> 02:40:59,279
and they injected just one line of code

4240
02:40:59,279 --> 02:41:01,040
and that line of code did something

4241
02:41:01,040 --> 02:41:02,640
quite specific

4242
02:41:02,640 --> 02:41:05,040
it basically said every time one of

4243
02:41:05,040 --> 02:41:08,080
kodkov's 20 000 customers is

4244
02:41:08,080 --> 02:41:10,240
is running it take all the environment

4245
02:41:10,240 --> 02:41:12,319
variables that are available and send

4246
02:41:12,319 --> 02:41:15,279
them to me send them to the attacker

4247
02:41:15,279 --> 02:41:17,359
so when you're testing your application

4248
02:41:17,359 --> 02:41:18,800
your application has to be able to build

4249
02:41:18,800 --> 02:41:20,720
it has to be able to run so you have

4250
02:41:20,720 --> 02:41:22,960
secrets in your environment variables

4251
02:41:22,960 --> 02:41:24,240
right you may have to access your

4252
02:41:24,240 --> 02:41:27,439
database your your systems now hopefully

4253
02:41:27,439 --> 02:41:29,279
hopefully you're using different

4254
02:41:29,279 --> 02:41:30,960
credentials to test than you are in

4255
02:41:30,960 --> 02:41:33,359
production but it's not always the case

4256
02:41:33,359 --> 02:41:34,880
and it's certainly not the case that

4257
02:41:34,880 --> 02:41:37,279
test credentials aren't always sensitive

4258
02:41:37,279 --> 02:41:39,600
because the adversaries were actually

4259
02:41:39,600 --> 02:41:41,600
after a specific credential

4260
02:41:41,600 --> 02:41:44,000
they were after the get credentials the

4261
02:41:44,000 --> 02:41:47,600
github tokens for these customers

4262
02:41:47,600 --> 02:41:49,359
because this was something that was in

4263
02:41:49,359 --> 02:41:51,040
the environment variables when code

4264
02:41:51,040 --> 02:41:52,880
calls was running so what were the

4265
02:41:52,880 --> 02:41:54,560
attackers able to do

4266
02:41:54,560 --> 02:41:56,960
they were able to move from kodkov's

4267
02:41:56,960 --> 02:41:59,680
docker image into their source code

4268
02:41:59,680 --> 02:42:00,960
turn their source code to their

4269
02:42:00,960 --> 02:42:02,880
application malicious and then move into

4270
02:42:02,880 --> 02:42:05,279
the private code repositories of

4271
02:42:05,279 --> 02:42:07,439
codecov's customers so who were these

4272
02:42:07,439 --> 02:42:09,359
customers these customers were people

4273
02:42:09,359 --> 02:42:12,319
like twilio monday.com

4274
02:42:12,319 --> 02:42:13,680
hashicorp

4275
02:42:13,680 --> 02:42:15,120
rapid7

4276
02:42:15,120 --> 02:42:17,439
large companies with great security

4277
02:42:17,439 --> 02:42:19,439
posture the attackers were able to

4278
02:42:19,439 --> 02:42:22,319
access the private source code of these

4279
02:42:22,319 --> 02:42:23,439
companies

4280
02:42:23,439 --> 02:42:25,279
and these companies the ones that i've

4281
02:42:25,279 --> 02:42:26,560
just named

4282
02:42:26,560 --> 02:42:29,279
had to report that not only was their

4283
02:42:29,279 --> 02:42:31,439
source code breached but actually they

4284
02:42:31,439 --> 02:42:33,680
had secrets in their source code now

4285
02:42:33,680 --> 02:42:36,640
that included hashicorp hashicorp is a

4286
02:42:36,640 --> 02:42:39,520
fantastic company they coined the phrase

4287
02:42:39,520 --> 02:42:41,439
secret sprawl and they build one of the

4288
02:42:41,439 --> 02:42:43,520
best secret management products out

4289
02:42:43,520 --> 02:42:46,399
there and even they had secrets in their

4290
02:42:46,399 --> 02:42:48,319
source code so i'm willing to bet

4291
02:42:48,319 --> 02:42:50,080
anything that if hashicorp has secrets

4292
02:42:50,080 --> 02:42:52,560
in their source code you probably do too

4293
02:42:52,560 --> 02:42:53,439
and

4294
02:42:53,439 --> 02:42:55,439
source code isn't impenetrable this is

4295
02:42:55,439 --> 02:42:57,600
one example how even if you do nothing

4296
02:42:57,600 --> 02:42:58,640
wrong

4297
02:42:58,640 --> 02:43:00,160
adversaries can

4298
02:43:00,160 --> 02:43:02,640
perhaps access your private source code

4299
02:43:02,640 --> 02:43:03,600
so

4300
02:43:03,600 --> 02:43:05,600
this is a great example of kind of that

4301
02:43:05,600 --> 02:43:07,040
supply chain

4302
02:43:07,040 --> 02:43:09,040
attack going on

4303
02:43:09,040 --> 02:43:10,560
now the other thing to think about with

4304
02:43:10,560 --> 02:43:12,479
private source code is that they don't

4305
02:43:12,479 --> 02:43:15,040
always remain private all right we have

4306
02:43:15,040 --> 02:43:17,760
hundreds of headlines about private

4307
02:43:17,760 --> 02:43:19,920
source code being made

4308
02:43:19,920 --> 02:43:21,439
public or as i like to call it

4309
02:43:21,439 --> 02:43:24,000
involuntarily open sourced

4310
02:43:24,000 --> 02:43:26,479
so we have a lot of examples about these

4311
02:43:26,479 --> 02:43:28,560
and this is another area where your

4312
02:43:28,560 --> 02:43:30,800
source code in and of itself can be a

4313
02:43:30,800 --> 02:43:32,160
vulnerability

4314
02:43:32,160 --> 02:43:34,640
and i really like to to kind of focus in

4315
02:43:34,640 --> 02:43:36,880
on that point because we know that our

4316
02:43:36,880 --> 02:43:39,279
application can have a vulnerability and

4317
02:43:39,279 --> 02:43:40,640
we know that that application can have a

4318
02:43:40,640 --> 02:43:42,399
vulnerability because of maybe something

4319
02:43:42,399 --> 02:43:44,800
we did in our source code but also our

4320
02:43:44,800 --> 02:43:47,200
source code in and of itself

4321
02:43:47,200 --> 02:43:48,640
can be

4322
02:43:48,640 --> 02:43:51,200
a threat can be vulnerable

4323
02:43:51,200 --> 02:43:53,200
so if we look at twitch twitch's source

4324
02:43:53,200 --> 02:43:56,479
code for example that last year in

4325
02:43:56,479 --> 02:43:58,160
october their source code was

4326
02:43:58,160 --> 02:44:01,520
involuntary open source via a torrent

4327
02:44:01,520 --> 02:44:03,760
we scanned twitch's source code and we

4328
02:44:03,760 --> 02:44:07,359
found over 6 000 secrets inside here now

4329
02:44:07,359 --> 02:44:09,439
that may sound like a lot but at the

4330
02:44:09,439 --> 02:44:11,680
scale of twitch it's actually pretty

4331
02:44:11,680 --> 02:44:14,000
standard in fact twitch beats the

4332
02:44:14,000 --> 02:44:15,520
industry standard of what we typically

4333
02:44:15,520 --> 02:44:17,520
would find in private source code for

4334
02:44:17,520 --> 02:44:19,760
secrets but that doesn't matter because

4335
02:44:19,760 --> 02:44:23,040
we still found 194 aws keys in twitch's

4336
02:44:23,040 --> 02:44:25,920
source code 69 twilio keys a bunch of

4337
02:44:25,920 --> 02:44:27,279
google keys

4338
02:44:27,279 --> 02:44:29,040
and a whole bunch of other really

4339
02:44:29,040 --> 02:44:30,560
sensitive information i have we have a

4340
02:44:30,560 --> 02:44:33,359
whole report on it if you're interested

4341
02:44:33,359 --> 02:44:35,279
but this just goes to so that private

4342
02:44:35,279 --> 02:44:37,040
source code doesn't always remain

4343
02:44:37,040 --> 02:44:38,720
private and when it does leak out

4344
02:44:38,720 --> 02:44:41,279
publicly it can leak out whole much more

4345
02:44:41,279 --> 02:44:43,520
than just your source code

4346
02:44:43,520 --> 02:44:45,680
now in my opinion the attackers in this

4347
02:44:45,680 --> 02:44:48,319
exact example actually did twitch a

4348
02:44:48,319 --> 02:44:50,560
favor they did twitch a favor because

4349
02:44:50,560 --> 02:44:52,560
they publicly announced that twitch's

4350
02:44:52,560 --> 02:44:55,200
source code has been breached had they

4351
02:44:55,200 --> 02:44:57,120
not done this then twitch may not have

4352
02:44:57,120 --> 02:44:59,680
known that all these secrets inside were

4353
02:44:59,680 --> 02:45:01,840
compromised because they were very

4354
02:45:01,840 --> 02:45:03,760
quickly able to rotate a lot of these

4355
02:45:03,760 --> 02:45:05,920
secrets so they were no longer a threat

4356
02:45:05,920 --> 02:45:08,240
but the attackers could have sold them

4357
02:45:08,240 --> 02:45:10,000
it happens regularly on the dark on the

4358
02:45:10,000 --> 02:45:12,080
dark web where you can sell credential

4359
02:45:12,080 --> 02:45:13,840
accesses into companies so it could have

4360
02:45:13,840 --> 02:45:15,200
been a whole bunch

4361
02:45:15,200 --> 02:45:16,080
worse

4362
02:45:16,080 --> 02:45:18,479
now another example is that of samsung

4363
02:45:18,479 --> 02:45:22,479
nvidia and microsoft now this year

4364
02:45:22,479 --> 02:45:24,240
a lot of source code from these

4365
02:45:24,240 --> 02:45:26,840
companies again great companies were

4366
02:45:26,840 --> 02:45:29,840
involuntarily open sourced and again

4367
02:45:29,840 --> 02:45:31,600
we were able to scan these and found

4368
02:45:31,600 --> 02:45:34,160
huge amounts of secrets inside of them

4369
02:45:34,160 --> 02:45:35,760
i'm just going to talk about a specific

4370
02:45:35,760 --> 02:45:38,399
type of secret in the case of nvidia and

4371
02:45:38,399 --> 02:45:41,439
that is that nvidia had their signing

4372
02:45:41,439 --> 02:45:44,399
keys inside their git repositories and

4373
02:45:44,399 --> 02:45:47,200
these signing keys were actually used to

4374
02:45:47,200 --> 02:45:49,600
sign malware intended for windows so

4375
02:45:49,600 --> 02:45:52,080
they were able to basically

4376
02:45:52,080 --> 02:45:53,680
authenticate

4377
02:45:53,680 --> 02:45:56,080
software that was actually malware and

4378
02:45:56,080 --> 02:45:57,840
it was accepted by windows machines

4379
02:45:57,840 --> 02:45:59,680
because of nvidia's signing keys they

4380
02:45:59,680 --> 02:46:02,000
were in their private repositories

4381
02:46:02,000 --> 02:46:04,720
now this breach is actually a result

4382
02:46:04,720 --> 02:46:07,840
from the lapsis group now we later found

4383
02:46:07,840 --> 02:46:09,840
out that lapses was a group of teenagers

4384
02:46:09,840 --> 02:46:11,520
so this leads you to the question how

4385
02:46:11,520 --> 02:46:13,279
did a group of teenagers

4386
02:46:13,279 --> 02:46:17,040
breach the private source code of some

4387
02:46:17,040 --> 02:46:18,720
incredible company samsung nvidia

4388
02:46:18,720 --> 02:46:20,960
microsoft are fantastic companies with

4389
02:46:20,960 --> 02:46:23,279
great security posture so how do they do

4390
02:46:23,279 --> 02:46:25,600
it well here's a screenshot from the

4391
02:46:25,600 --> 02:46:26,880
lapses

4392
02:46:26,880 --> 02:46:29,520
telegram channel basically saying that

4393
02:46:29,520 --> 02:46:32,080
they're after insiders they're trying to

4394
02:46:32,080 --> 02:46:33,920
recruit insiders specifically the

4395
02:46:33,920 --> 02:46:35,359
message says that we're recruiting

4396
02:46:35,359 --> 02:46:37,439
employees insiders at the following and

4397
02:46:37,439 --> 02:46:38,800
then they give a list of different

4398
02:46:38,800 --> 02:46:40,240
companies

4399
02:46:40,240 --> 02:46:42,960
so i want you to think now about your

4400
02:46:42,960 --> 02:46:45,920
source code and who has access to it so

4401
02:46:45,920 --> 02:46:47,359
when we're thinking about our secrets

4402
02:46:47,359 --> 02:46:49,279
i've said a lot it's my favorite phrase

4403
02:46:49,279 --> 02:46:50,880
that the crown jewels of your

4404
02:46:50,880 --> 02:46:53,200
organization right and as such most

4405
02:46:53,200 --> 02:46:54,399
companies will have great secrets

4406
02:46:54,399 --> 02:46:56,960
management they'll be tightly encrypted

4407
02:46:56,960 --> 02:46:58,800
the access to those secrets will be

4408
02:46:58,800 --> 02:47:00,479
tightly controlled

4409
02:47:00,479 --> 02:47:02,720
so not everyone should or would have

4410
02:47:02,720 --> 02:47:04,319
access to them in fact a select group of

4411
02:47:04,319 --> 02:47:05,920
people would have access to a select

4412
02:47:05,920 --> 02:47:08,000
certain group of credentials

4413
02:47:08,000 --> 02:47:09,680
but if these credentials end up inside

4414
02:47:09,680 --> 02:47:12,160
your source code now think about who has

4415
02:47:12,160 --> 02:47:13,920
access to your source code

4416
02:47:13,920 --> 02:47:15,359
your engineers obviously do your

4417
02:47:15,359 --> 02:47:16,720
developers

4418
02:47:16,720 --> 02:47:18,560
your product managers probably do your

4419
02:47:18,560 --> 02:47:21,120
team leaders do and even your interns

4420
02:47:21,120 --> 02:47:23,200
would so if someone's trying to access

4421
02:47:23,200 --> 02:47:24,880
your company should they try and attack

4422
02:47:24,880 --> 02:47:26,800
this the secrets management software

4423
02:47:26,800 --> 02:47:28,960
near impossible or do they try and find

4424
02:47:28,960 --> 02:47:31,200
a disgruntled employee an intern that's

4425
02:47:31,200 --> 02:47:33,040
had a bad day and give them a couple of

4426
02:47:33,040 --> 02:47:34,720
grand so that you can access their

4427
02:47:34,720 --> 02:47:37,120
private source code well that is exactly

4428
02:47:37,120 --> 02:47:39,920
how lapses was able to breach and find

4429
02:47:39,920 --> 02:47:42,479
secrets inside some of the largest

4430
02:47:42,479 --> 02:47:46,160
companies that we have

4431
02:47:46,240 --> 02:47:48,960
so i want to talk now um about a report

4432
02:47:48,960 --> 02:47:51,120
that will show kind of the scale of this

4433
02:47:51,120 --> 02:47:53,040
how big of a problem are leaked

4434
02:47:53,040 --> 02:47:55,600
credentials so each year um so i work

4435
02:47:55,600 --> 02:47:57,439
for get guardian we're a secret

4436
02:47:57,439 --> 02:47:59,279
detection company and each year we

4437
02:47:59,279 --> 02:48:00,960
release a report called the state of

4438
02:48:00,960 --> 02:48:02,560
secrets report

4439
02:48:02,560 --> 02:48:04,880
uh secret sprawl and this report looks

4440
02:48:04,880 --> 02:48:07,439
at a number of different areas and how

4441
02:48:07,439 --> 02:48:09,600
frequently we find secrets inside them

4442
02:48:09,600 --> 02:48:10,720
so we look at

4443
02:48:10,720 --> 02:48:12,000
secrets on

4444
02:48:12,000 --> 02:48:14,319
public places like public github

4445
02:48:14,319 --> 02:48:16,399
we look at secrets inside public docker

4446
02:48:16,399 --> 02:48:17,920
images so we talked about codecov and

4447
02:48:17,920 --> 02:48:19,520
their docker image and we also look at

4448
02:48:19,520 --> 02:48:21,439
secrets inside pro private code

4449
02:48:21,439 --> 02:48:23,439
repositories and then we publish these

4450
02:48:23,439 --> 02:48:25,920
results and what we found in the types

4451
02:48:25,920 --> 02:48:28,319
of secrets that we found

4452
02:48:28,319 --> 02:48:30,960
so if you want to know how many secrets

4453
02:48:30,960 --> 02:48:34,240
are exposed on github.com

4454
02:48:34,240 --> 02:48:37,200
6 million secrets were leaked last year

4455
02:48:37,200 --> 02:48:40,080
in 2021 so get guardian scans every

4456
02:48:40,080 --> 02:48:42,399
single commit made to github.com if you

4457
02:48:42,399 --> 02:48:44,880
pushed source code to github we scanned

4458
02:48:44,880 --> 02:48:47,840
it um so six million credentials we

4459
02:48:47,840 --> 02:48:50,080
found now this was from about 56 million

4460
02:48:50,080 --> 02:48:52,080
users now github claim they have 75

4461
02:48:52,080 --> 02:48:54,720
million users i'm sure they do but 56

4462
02:48:54,720 --> 02:48:57,600
million users actually pushed code to

4463
02:48:57,600 --> 02:49:00,160
github last year

4464
02:49:00,160 --> 02:49:03,359
so this is a huge volume of code it's

4465
02:49:03,359 --> 02:49:05,279
billions of commits

4466
02:49:05,279 --> 02:49:07,920
and six million credentials is

4467
02:49:07,920 --> 02:49:10,880
mind-blowing but it's not just us that

4468
02:49:10,880 --> 02:49:13,040
kind of realize this adversaries realize

4469
02:49:13,040 --> 02:49:15,120
this too and they actively monitor

4470
02:49:15,120 --> 02:49:17,840
places like github for secrets so at the

4471
02:49:17,840 --> 02:49:19,680
start of this talk i leaked a credential

4472
02:49:19,680 --> 02:49:21,359
on github.com

4473
02:49:21,359 --> 02:49:22,399
now

4474
02:49:22,399 --> 02:49:24,080
i linked that in my personal private

4475
02:49:24,080 --> 02:49:27,359
repository i'm not very active on github

4476
02:49:27,359 --> 02:49:29,120
lately so there's no reason why attacker

4477
02:49:29,120 --> 02:49:31,120
would be monitoring me but what actually

4478
02:49:31,120 --> 02:49:34,080
happens is that github has a public api

4479
02:49:34,080 --> 02:49:37,200
and this api updates regularly

4480
02:49:37,200 --> 02:49:39,520
so basically what happens on github is

4481
02:49:39,520 --> 02:49:42,560
not just public it's broadcast

4482
02:49:42,560 --> 02:49:44,720
so if you leak something it's being

4483
02:49:44,720 --> 02:49:47,520
broadcast to anyone and anyone can who

4484
02:49:47,520 --> 02:49:50,720
monitors the github api so that is why

4485
02:49:50,720 --> 02:49:52,319
i'm fairly confident at the end of this

4486
02:49:52,319 --> 02:49:54,000
talk i'll be able to show some people

4487
02:49:54,000 --> 02:49:54,960
that have tried to exploit the

4488
02:49:54,960 --> 02:49:56,960
credentials that i've lost but i'm not

4489
02:49:56,960 --> 02:49:59,120
alone six million credentials were

4490
02:49:59,120 --> 02:50:01,279
pushed to github last year so a

4491
02:50:01,279 --> 02:50:03,520
mind-blowing number so what type of

4492
02:50:03,520 --> 02:50:05,359
secrets were leaked well the main

4493
02:50:05,359 --> 02:50:07,680
category is what we call other so other

4494
02:50:07,680 --> 02:50:10,080
is basically secrets that we uh that

4495
02:50:10,080 --> 02:50:11,600
could could mean

4496
02:50:11,600 --> 02:50:13,120
could be access to lots of different

4497
02:50:13,120 --> 02:50:15,200
things they could be secrets being used

4498
02:50:15,200 --> 02:50:16,960
for internal services they could be

4499
02:50:16,960 --> 02:50:19,680
secrets uh it could be kind of private

4500
02:50:19,680 --> 02:50:21,760
keys or certificates that we don't

4501
02:50:21,760 --> 02:50:23,760
really know exactly what we do what they

4502
02:50:23,760 --> 02:50:25,680
do but we know that they're secrets

4503
02:50:25,680 --> 02:50:27,359
the second biggest category is data

4504
02:50:27,359 --> 02:50:29,840
storage so your database access

4505
02:50:29,840 --> 02:50:32,319
your amazon s3 buckets for example all

4506
02:50:32,319 --> 02:50:34,160
of these are highly highly sensitive

4507
02:50:34,160 --> 02:50:35,920
they can contain highly sensitive

4508
02:50:35,920 --> 02:50:37,840
information we shouldn't be hard coding

4509
02:50:37,840 --> 02:50:40,000
them into our source code we should be

4510
02:50:40,000 --> 02:50:41,520
handling them correctly putting them as

4511
02:50:41,520 --> 02:50:43,359
environment variables

4512
02:50:43,359 --> 02:50:46,479
but 21 of the keys that we found

4513
02:50:46,479 --> 02:50:48,399
you know over a million keys that we

4514
02:50:48,399 --> 02:50:50,640
found were actually giving access to

4515
02:50:50,640 --> 02:50:53,600
databases and data storage 15

4516
02:50:53,600 --> 02:50:55,439
so just under a million we're actually

4517
02:50:55,439 --> 02:50:57,200
to cloud providers you don't need to be

4518
02:50:57,200 --> 02:50:59,600
very imaginative to know

4519
02:50:59,600 --> 02:51:01,120
what you can do with a cloud provider

4520
02:51:01,120 --> 02:51:03,200
key you know you can set up bitcoin

4521
02:51:03,200 --> 02:51:04,720
mining if you're not very imaginative

4522
02:51:04,720 --> 02:51:06,960
you can launch ddos attacks you can

4523
02:51:06,960 --> 02:51:08,960
divert computing power or if you really

4524
02:51:08,960 --> 02:51:10,319
don't like someone you can just rack up

4525
02:51:10,319 --> 02:51:12,800
a huge bill by stringing together large

4526
02:51:12,800 --> 02:51:14,800
compute large computers

4527
02:51:14,800 --> 02:51:16,960
and running up kind of unimaginable

4528
02:51:16,960 --> 02:51:20,880
numbers so 15 over well nearly a million

4529
02:51:20,880 --> 02:51:22,800
keys last year that we found were for

4530
02:51:22,800 --> 02:51:25,040
cloud providers then we also have kind

4531
02:51:25,040 --> 02:51:26,560
of development tools and messaging

4532
02:51:26,560 --> 02:51:28,479
systems and version control platforms

4533
02:51:28,479 --> 02:51:30,479
and some other categories too you know

4534
02:51:30,479 --> 02:51:32,960
my favorite is messaging systems because

4535
02:51:32,960 --> 02:51:34,960
they're not very protected but it's very

4536
02:51:34,960 --> 02:51:36,800
easy to launch an internal phishing

4537
02:51:36,800 --> 02:51:38,640
campaign if you have keys that will give

4538
02:51:38,640 --> 02:51:40,880
you access to the internal

4539
02:51:40,880 --> 02:51:43,359
messaging systems

4540
02:51:43,359 --> 02:51:46,720
we found over 500 github tokens

4541
02:51:46,720 --> 02:51:48,640
in commit messages

4542
02:51:48,640 --> 02:51:50,399
so if you don't understand this if

4543
02:51:50,399 --> 02:51:51,680
you're not very familiar with git this

4544
02:51:51,680 --> 02:51:53,120
is basically putting your password to

4545
02:51:53,120 --> 02:51:55,040
your email in the subject line right so

4546
02:51:55,040 --> 02:51:56,240
you're adding a message to say what

4547
02:51:56,240 --> 02:51:57,520
you've changed and you're putting in

4548
02:51:57,520 --> 02:51:59,920
your your your github token so why is

4549
02:51:59,920 --> 02:52:01,680
this significant well it just shows that

4550
02:52:01,680 --> 02:52:03,760
there's still lots of ambiguity and

4551
02:52:03,760 --> 02:52:05,920
misunderstandings about how git works

4552
02:52:05,920 --> 02:52:07,279
people are obviously thinking that this

4553
02:52:07,279 --> 02:52:09,760
is how you authenticate themselves so

4554
02:52:09,760 --> 02:52:11,279
these people could have access to lots

4555
02:52:11,279 --> 02:52:12,880
of different information but they're

4556
02:52:12,880 --> 02:52:15,359
prone for big configuration errors or

4557
02:52:15,359 --> 02:52:17,840
even doing silly things like adding uh

4558
02:52:17,840 --> 02:52:20,000
message adding secrets into commit

4559
02:52:20,000 --> 02:52:21,760
messages

4560
02:52:21,760 --> 02:52:23,520
and just very quickly if we look at kind

4561
02:52:23,520 --> 02:52:25,600
of some of the cloud providers here we

4562
02:52:25,600 --> 02:52:27,920
can actually see that the ones with the

4563
02:52:27,920 --> 02:52:29,520
one secret that's on the right trend and

4564
02:52:29,520 --> 02:52:32,000
that's down is aws keys we're finding

4565
02:52:32,000 --> 02:52:34,240
less aws keys at the end of the year

4566
02:52:34,240 --> 02:52:36,080
than at the start so that's great and

4567
02:52:36,080 --> 02:52:38,160
this proves that we can actually make a

4568
02:52:38,160 --> 02:52:40,160
difference because aws has done a great

4569
02:52:40,160 --> 02:52:42,240
job in raising awareness around the fact

4570
02:52:42,240 --> 02:52:44,080
that their keys are actually sensitive

4571
02:52:44,080 --> 02:52:46,800
and shouldn't be made public

4572
02:52:46,800 --> 02:52:49,040
but at the same time we also have new

4573
02:52:49,040 --> 02:52:51,040
providers like planetscale and superbass

4574
02:52:51,040 --> 02:52:52,800
that have come onto the market and

4575
02:52:52,800 --> 02:52:54,319
already

4576
02:52:54,319 --> 02:52:55,920
even just a couple of months after

4577
02:52:55,920 --> 02:52:57,520
planet scale was kind of officially

4578
02:52:57,520 --> 02:52:59,680
launched we started finding secrets to

4579
02:52:59,680 --> 02:53:01,600
these providers uh

4580
02:53:01,600 --> 02:53:03,120
on public github so it proves that we

4581
02:53:03,120 --> 02:53:04,960
need to be really far ahead of the curve

4582
02:53:04,960 --> 02:53:06,560
you're going to try and prevent leaked

4583
02:53:06,560 --> 02:53:09,279
secrets um from kind of ending up in

4584
02:53:09,279 --> 02:53:11,439
public spaces

4585
02:53:11,439 --> 02:53:13,200
now the other area that we find secrets

4586
02:53:13,200 --> 02:53:15,279
that we talked about is inside public

4587
02:53:15,279 --> 02:53:18,000
docker images so this is docker hub so

4588
02:53:18,000 --> 02:53:19,760
dockerhub.com it's the largest place

4589
02:53:19,760 --> 02:53:22,319
that you can store your docker images

4590
02:53:22,319 --> 02:53:23,359
and there's

4591
02:53:23,359 --> 02:53:25,200
over 8 million

4592
02:53:25,200 --> 02:53:26,479
docker images that are currently

4593
02:53:26,479 --> 02:53:28,640
available on docker hub and this was

4594
02:53:28,640 --> 02:53:30,319
actually where you would download the

4595
02:53:30,319 --> 02:53:32,160
code called docker image

4596
02:53:32,160 --> 02:53:34,560
so we scanned uh

4597
02:53:34,560 --> 02:53:36,880
10 000 docker images to find out how

4598
02:53:36,880 --> 02:53:38,880
many of them had secrets and we found

4599
02:53:38,880 --> 02:53:41,520
that nearly five percent four point six

4600
02:53:41,520 --> 02:53:43,680
percent if you want to be predicted uh

4601
02:53:43,680 --> 02:53:46,399
contained at least one secret one

4602
02:53:46,399 --> 02:53:49,520
hard-coded plain text secret so we found

4603
02:53:49,520 --> 02:53:51,279
out of the ten thousand that we found we

4604
02:53:51,279 --> 02:53:52,880
found that we found a total of four

4605
02:53:52,880 --> 02:53:54,880
thousand secrets one thousand two

4606
02:53:54,880 --> 02:53:57,520
hundred of them were unique so there was

4607
02:53:57,520 --> 02:53:59,439
a there was quite a few secrets being

4608
02:53:59,439 --> 02:54:02,000
repeated inside those docker images but

4609
02:54:02,000 --> 02:54:04,640
again you know it can be very confusing

4610
02:54:04,640 --> 02:54:06,720
uh of kind of how to build

4611
02:54:06,720 --> 02:54:08,800
docker images we see a lot that people

4612
02:54:08,800 --> 02:54:10,800
add in a secret let's say to a package

4613
02:54:10,800 --> 02:54:12,800
manager so they can access it in their

4614
02:54:12,800 --> 02:54:16,000
docker file then they remove it later

4615
02:54:16,000 --> 02:54:17,520
because they know that it shouldn't be

4616
02:54:17,520 --> 02:54:19,760
there but actually you know like get you

4617
02:54:19,760 --> 02:54:21,600
can go back in history same with docker

4618
02:54:21,600 --> 02:54:23,279
you can go back in history when you

4619
02:54:23,279 --> 02:54:25,439
build something it's built in layers if

4620
02:54:25,439 --> 02:54:27,359
you add something in the first layer and

4621
02:54:27,359 --> 02:54:29,520
then put layers on top of it that secret

4622
02:54:29,520 --> 02:54:32,000
still exists so we found a huge amount

4623
02:54:32,000 --> 02:54:35,600
of secrets inside docker images

4624
02:54:35,600 --> 02:54:37,120
and the last area that i want to talk

4625
02:54:37,120 --> 02:54:39,520
about before we kind of go back to the

4626
02:54:39,520 --> 02:54:43,120
experiment is uh how frequently are

4627
02:54:43,120 --> 02:54:46,000
secrets in private repositories so

4628
02:54:46,000 --> 02:54:47,920
people have this false sense of security

4629
02:54:47,920 --> 02:54:49,760
around private repositories that because

4630
02:54:49,760 --> 02:54:52,319
it's behind some kind of authentication

4631
02:54:52,319 --> 02:54:54,160
that it's secure but we just proved that

4632
02:54:54,160 --> 02:54:56,000
source code is very leaky lots of

4633
02:54:56,000 --> 02:54:58,560
examples of involuntarily open sourced

4634
02:54:58,560 --> 02:54:59,920
source code

4635
02:54:59,920 --> 02:55:03,120
so how much do we typically find inside

4636
02:55:03,120 --> 02:55:05,840
uh private uh private source code so at

4637
02:55:05,840 --> 02:55:07,600
get guardian we took the average of our

4638
02:55:07,600 --> 02:55:10,160
larger customers so our larger customers

4639
02:55:10,160 --> 02:55:12,000
the average of them was a company with

4640
02:55:12,000 --> 02:55:16,560
about 400 developers so 400 engineers

4641
02:55:16,560 --> 02:55:18,880
uh it's a fairly sizable company now in

4642
02:55:18,880 --> 02:55:20,560
a company this side we found around

4643
02:55:20,560 --> 02:55:23,359
about 1 000 unique secrets

4644
02:55:23,359 --> 02:55:25,359
so that's huge so we look at twitch or

4645
02:55:25,359 --> 02:55:26,560
twitch is a whole lot larger than that

4646
02:55:26,560 --> 02:55:29,680
we found 6 000. it's pretty much on par

4647
02:55:29,680 --> 02:55:32,000
so it's a huge problem and you know

4648
02:55:32,000 --> 02:55:34,560
unfortunately attackers know this too

4649
02:55:34,560 --> 02:55:36,760
now each one of those

4650
02:55:36,760 --> 02:55:39,920
1050 secrets were actually repeated on

4651
02:55:39,920 --> 02:55:41,680
average 13 times throughout the git

4652
02:55:41,680 --> 02:55:44,080
history on different branches and in

4653
02:55:44,080 --> 02:55:45,439
different areas

4654
02:55:45,439 --> 02:55:47,120
so why is that significant well every

4655
02:55:47,120 --> 02:55:48,640
time you find a secret you have to

4656
02:55:48,640 --> 02:55:50,240
investigate it it doesn't matter if it's

4657
02:55:50,240 --> 02:55:51,920
the same secret because you're probably

4658
02:55:51,920 --> 02:55:53,920
not aware of that so if there's 13

4659
02:55:53,920 --> 02:55:55,760
there's 13 of the same secret it's going

4660
02:55:55,760 --> 02:55:58,240
to have to be investigated 13 times now

4661
02:55:58,240 --> 02:55:59,840
in a couple of 400 developers there's

4662
02:55:59,840 --> 02:56:02,160
typically four apsec engineers that

4663
02:56:02,160 --> 02:56:03,600
means that each one of those attic

4664
02:56:03,600 --> 02:56:06,160
engineers has to investigate

4665
02:56:06,160 --> 02:56:08,960
kind of communicate with the developer

4666
02:56:08,960 --> 02:56:12,880
rotate republish their keys

4667
02:56:12,880 --> 02:56:14,160
3

4668
02:56:14,160 --> 02:56:16,960
400 times a year

4669
02:56:16,960 --> 02:56:19,279
you know that's huge amounts if you did

4670
02:56:19,279 --> 02:56:21,120
that all day every day and nothing else

4671
02:56:21,120 --> 02:56:22,560
and didn't work holidays and weekends

4672
02:56:22,560 --> 02:56:23,600
you still wouldn't be able to get

4673
02:56:23,600 --> 02:56:25,680
through it so this is how big of a

4674
02:56:25,680 --> 02:56:27,680
problem that we have

4675
02:56:27,680 --> 02:56:30,399
and unlike us attackers have time on

4676
02:56:30,399 --> 02:56:32,160
their side they can they can sift

4677
02:56:32,160 --> 02:56:33,840
through that amount of information to

4678
02:56:33,840 --> 02:56:36,160
find that gem but we're under pressure

4679
02:56:36,160 --> 02:56:37,760
so this illustrates the importance that

4680
02:56:37,760 --> 02:56:39,680
not only do we need to be aware of this

4681
02:56:39,680 --> 02:56:41,439
problem but we also need education and

4682
02:56:41,439 --> 02:56:44,160
tools to be able to prevent it

4683
02:56:44,160 --> 02:56:46,640
so quickly you know why does this happen

4684
02:56:46,640 --> 02:56:48,800
well it happens for a number of reasons

4685
02:56:48,800 --> 02:56:50,160
we've talked about a few of them

4686
02:56:50,160 --> 02:56:52,240
misconfigured git repositories secrets

4687
02:56:52,240 --> 02:56:53,920
buried in the history you know we have

4688
02:56:53,920 --> 02:56:55,359
to understand that just because it's not

4689
02:56:55,359 --> 02:56:57,439
in our current version doesn't mean we

4690
02:56:57,439 --> 02:56:59,359
can't find it it could be on an obscure

4691
02:56:59,359 --> 02:57:01,680
branch secrets exposed in logs or

4692
02:57:01,680 --> 02:57:03,600
generated files

4693
02:57:03,600 --> 02:57:06,319
including sensitive files like env in

4694
02:57:06,319 --> 02:57:08,800
our repositories and also we're just

4695
02:57:08,800 --> 02:57:10,800
seeing a lot of people actively managing

4696
02:57:10,800 --> 02:57:12,800
secrets and git repositories not

4697
02:57:12,800 --> 02:57:15,040
understanding how big of a problem that

4698
02:57:15,040 --> 02:57:16,000
is

4699
02:57:16,000 --> 02:57:18,479
so let's have a look at our experiment

4700
02:57:18,479 --> 02:57:21,120
so about 20 minutes ago we leaked a

4701
02:57:21,120 --> 02:57:23,520
credential into github

4702
02:57:23,520 --> 02:57:25,680
public github github.com

4703
02:57:25,680 --> 02:57:26,560
this

4704
02:57:26,560 --> 02:57:28,319
is how many times

4705
02:57:28,319 --> 02:57:30,880
people have tried to exploit it since

4706
02:57:30,880 --> 02:57:32,800
i've been talking now i do want to

4707
02:57:32,800 --> 02:57:34,720
clarify a couple of things a lot of

4708
02:57:34,720 --> 02:57:36,640
these ip addresses will be the same

4709
02:57:36,640 --> 02:57:38,720
they'll be initially making a ping to

4710
02:57:38,720 --> 02:57:40,640
try and find uh

4711
02:57:40,640 --> 02:57:43,680
information so if we open up one of them

4712
02:57:43,680 --> 02:57:46,720
we can see that this is from germany

4713
02:57:46,720 --> 02:57:49,760
and they're trying to find the account

4714
02:57:49,760 --> 02:57:51,120
attributes

4715
02:57:51,120 --> 02:57:52,640
while other people will probably be

4716
02:57:52,640 --> 02:57:55,040
looking at different calls so here

4717
02:57:55,040 --> 02:57:56,080
they're trying to get the caller

4718
02:57:56,080 --> 02:57:58,160
identity so they're maybe initially

4719
02:57:58,160 --> 02:58:00,160
trying to find caller identities and

4720
02:58:00,160 --> 02:58:03,920
then get more information as they go but

4721
02:58:03,920 --> 02:58:06,080
a lot of these will be unique i see at

4722
02:58:06,080 --> 02:58:08,800
least three countries here so

4723
02:58:08,800 --> 02:58:11,200
in just 20 minutes

4724
02:58:11,200 --> 02:58:12,800
a whole bunch of

4725
02:58:12,800 --> 02:58:14,960
bots really have tried to exploit this

4726
02:58:14,960 --> 02:58:17,040
secret so this just goes to show that if

4727
02:58:17,040 --> 02:58:18,399
you leak a secret

4728
02:58:18,399 --> 02:58:21,359
even if you catch it quickly

4729
02:58:21,359 --> 02:58:23,040
even if you're aware of it and go back

4730
02:58:23,040 --> 02:58:24,319
and remediate it

4731
02:58:24,319 --> 02:58:26,960
people still probably have found it

4732
02:58:26,960 --> 02:58:28,720
now i'm running out of time i'm getting

4733
02:58:28,720 --> 02:58:30,399
to the end but i just want to make a

4734
02:58:30,399 --> 02:58:32,160
kind of a quick word before i close up

4735
02:58:32,160 --> 02:58:33,120
on

4736
02:58:33,120 --> 02:58:35,920
how to prevent this well we need to use

4737
02:58:35,920 --> 02:58:37,840
secrets management systems that was

4738
02:58:37,840 --> 02:58:38,880
something

4739
02:58:38,880 --> 02:58:40,800
that i think lewis brought up as well

4740
02:58:40,800 --> 02:58:42,479
when talking about kubernetes we need to

4741
02:58:42,479 --> 02:58:44,720
have good secrets management uh to be

4742
02:58:44,720 --> 02:58:46,720
able to prevent this

4743
02:58:46,720 --> 02:58:48,800
there's big tools like vaults there's

4744
02:58:48,800 --> 02:58:50,720
key management systems that you can use

4745
02:58:50,720 --> 02:58:52,800
if you're using you know cloud services

4746
02:58:52,800 --> 02:58:54,000
understand what tool is going to be

4747
02:58:54,000 --> 02:58:56,160
right to use and here's the key make

4748
02:58:56,160 --> 02:58:58,640
sure it's usable so you actually use it

4749
02:58:58,640 --> 02:59:00,160
never store secrets inside your git

4750
02:59:00,160 --> 02:59:02,240
repositories i know it's tempting i know

4751
02:59:02,240 --> 02:59:04,000
because it's a great way to share

4752
02:59:04,000 --> 02:59:05,600
important information with everyone but

4753
02:59:05,600 --> 02:59:07,680
we never should do it we have to make

4754
02:59:07,680 --> 02:59:08,880
sure that we're using environment

4755
02:59:08,880 --> 02:59:10,880
variables or other methods that we're

4756
02:59:10,880 --> 02:59:11,600
not

4757
02:59:11,600 --> 02:59:13,359
hard coded use short short-lived

4758
02:59:13,359 --> 02:59:15,359
credentials where possible or even

4759
02:59:15,359 --> 02:59:17,040
better dynamic credentials so that

4760
02:59:17,040 --> 02:59:19,920
they're being generated just in time

4761
02:59:19,920 --> 02:59:21,680
so this means that if a credential is

4762
02:59:21,680 --> 02:59:22,720
exposed

4763
02:59:22,720 --> 02:59:24,479
you've set up a policy or you've set up

4764
02:59:24,479 --> 02:59:26,560
a routine of rotating them so that it

4765
02:59:26,560 --> 02:59:29,279
will not be a threat anymore restrict

4766
02:59:29,279 --> 02:59:31,760
access the last one or the fourth one

4767
02:59:31,760 --> 02:59:34,160
restrict access to certain areas so that

4768
02:59:34,160 --> 02:59:36,000
even if a credential is leaked that

4769
02:59:36,000 --> 02:59:37,920
means that not anyone can use it they

4770
02:59:37,920 --> 02:59:40,240
have to be coming from a select ip or a

4771
02:59:40,240 --> 02:59:41,600
select area

4772
02:59:41,600 --> 02:59:43,600
um and then finally we need to add

4773
02:59:43,600 --> 02:59:45,279
automated secrets detection so there's

4774
02:59:45,279 --> 02:59:47,279
lots of different ways to detect secrets

4775
02:59:47,279 --> 02:59:50,240
get guardian is who i work for we have

4776
02:59:50,240 --> 02:59:51,840
automated sequence detection but we're

4777
02:59:51,840 --> 02:59:53,600
not the only ones there's open source

4778
02:59:53,600 --> 02:59:56,000
projects out there tool too of course i

4779
02:59:56,000 --> 02:59:57,600
think guardian's the best because i'm

4780
02:59:57,600 --> 02:59:58,880
biased

4781
02:59:58,880 --> 03:00:00,720
but the important thing is we need

4782
03:00:00,720 --> 03:00:02,640
visibility so whatever tool is going to

4783
03:00:02,640 --> 03:00:04,560
work for you then that should be the

4784
03:00:04,560 --> 03:00:05,520
tools

4785
03:00:05,520 --> 03:00:07,520
that we're using

4786
03:00:07,520 --> 03:00:09,120
so that's it

4787
03:00:09,120 --> 03:00:10,479
from me

4788
03:00:10,479 --> 03:00:12,080
uh if you want to learn more about the

4789
03:00:12,080 --> 03:00:14,399
research that i presented here's a

4790
03:00:14,399 --> 03:00:16,240
random qr code i promise it won't do

4791
03:00:16,240 --> 03:00:18,000
anything malicious

4792
03:00:18,000 --> 03:00:18,880
but

4793
03:00:18,880 --> 03:00:20,160
this will take you to a report called

4794
03:00:20,160 --> 03:00:22,880
the state of secret sprawl report it

4795
03:00:22,880 --> 03:00:24,800
will provide more information about what

4796
03:00:24,800 --> 03:00:26,080
i talked about so if you want to learn

4797
03:00:26,080 --> 03:00:28,960
more you can find out about that and i

4798
03:00:28,960 --> 03:00:30,960
have it linked down below or you can

4799
03:00:30,960 --> 03:00:33,680
follow me on my social media handles but

4800
03:00:33,680 --> 03:00:35,439
i would like to to thank everyone for

4801
03:00:35,439 --> 03:00:36,880
for putting this together and thanks for

4802
03:00:36,880 --> 03:00:38,399
paying attention uh it was really

4803
03:00:38,399 --> 03:00:40,640
fantastic to be able to present to to

4804
03:00:40,640 --> 03:00:41,920
all of you even though i can't see your

4805
03:00:41,920 --> 03:00:44,080
faces uh it's still great to have the

4806
03:00:44,080 --> 03:00:45,439
opportunity to be able to talk about

4807
03:00:45,439 --> 03:00:47,920
this uh to everyone so thank you

4808
03:00:47,920 --> 03:00:50,319
that was fantastic mackenzie and i'm

4809
03:00:50,319 --> 03:00:52,399
sorry but based on past sessions i don't

4810
03:00:52,399 --> 03:00:53,680
think i can really trust you to scan

4811
03:00:53,680 --> 03:00:57,200
that qr code and believe that it isn't

4812
03:00:57,200 --> 03:00:58,880
you know what i don't believe you but

4813
03:00:58,880 --> 03:01:01,120
you know the url is a little bit long i

4814
03:01:01,120 --> 03:01:02,000
think

4815
03:01:02,000 --> 03:01:04,319
i've always i i'm always amazed that

4816
03:01:04,319 --> 03:01:06,319
even in like security conferences people

4817
03:01:06,319 --> 03:01:08,240
will still scan it so you know i'm gonna

4818
03:01:08,240 --> 03:01:09,680
still put it up there to see what

4819
03:01:09,680 --> 03:01:10,560
happens

4820
03:01:10,560 --> 03:01:12,319
it is convenient but that's that's

4821
03:01:12,319 --> 03:01:13,920
sometimes how things go right when it's

4822
03:01:13,920 --> 03:01:15,840
convenient that's how you get caught

4823
03:01:15,840 --> 03:01:18,640
exactly exactly yeah so i had questions

4824
03:01:18,640 --> 03:01:21,200
coming up but you were always answering

4825
03:01:21,200 --> 03:01:23,040
them in your presentation so what

4826
03:01:23,040 --> 03:01:25,279
william props to you on that i guess the

4827
03:01:25,279 --> 03:01:27,840
only one i would ask that maybe i don't

4828
03:01:27,840 --> 03:01:29,520
know if this is really a question to be

4829
03:01:29,520 --> 03:01:30,800
asking because it's not necessarily

4830
03:01:30,800 --> 03:01:31,760
something that's going to solve the

4831
03:01:31,760 --> 03:01:33,120
problem but like are there any

4832
03:01:33,120 --> 03:01:34,399
consequences

4833
03:01:34,399 --> 03:01:36,319
for the folks that are doing malicious

4834
03:01:36,319 --> 03:01:38,560
things when they're exfiltrating the

4835
03:01:38,560 --> 03:01:39,840
they're getting these keys and that kind

4836
03:01:39,840 --> 03:01:41,359
of thing is there is there something

4837
03:01:41,359 --> 03:01:44,560
happening in the world right now to like

4838
03:01:44,560 --> 03:01:46,560
cause maybe deterrence for people from

4839
03:01:46,560 --> 03:01:48,640
doing something like this do you know

4840
03:01:48,640 --> 03:01:50,880
there's not really that many deterrents

4841
03:01:50,880 --> 03:01:53,840
for for for doing this because keys are

4842
03:01:53,840 --> 03:01:56,319
so widely used by different people it's

4843
03:01:56,319 --> 03:01:59,040
um you know it's it's hard to even know

4844
03:01:59,040 --> 03:02:00,640
who the attacker is so we can find out

4845
03:02:00,640 --> 03:02:02,720
their ip address but that's probably not

4846
03:02:02,720 --> 03:02:04,319
their computer that's probably a service

4847
03:02:04,319 --> 03:02:05,520
that they're using it's probably

4848
03:02:05,520 --> 03:02:07,359
confisca it's called the observated a

4849
03:02:07,359 --> 03:02:09,920
little bit so it's hard to track down

4850
03:02:09,920 --> 03:02:12,000
um so you know

4851
03:02:12,000 --> 03:02:13,600
it's

4852
03:02:13,600 --> 03:02:16,080
the onus unfortunately in security is on

4853
03:02:16,080 --> 03:02:16,960
us

4854
03:02:16,960 --> 03:02:19,040
and not the bad guys and uh hopefully

4855
03:02:19,040 --> 03:02:20,560
there will be a change in that but you

4856
03:02:20,560 --> 03:02:22,319
know just talk about how ridiculous

4857
03:02:22,319 --> 03:02:23,920
actually you know this problem is is

4858
03:02:23,920 --> 03:02:26,319
that there was a developer working for

4859
03:02:26,319 --> 03:02:29,279
dji that lead to credential that

4860
03:02:29,279 --> 03:02:31,040
developer right it was

4861
03:02:31,040 --> 03:02:33,040
an honest mistake and it happens to

4862
03:02:33,040 --> 03:02:34,800
everyone and most companies would never

4863
03:02:34,800 --> 03:02:36,560
do this most companies understand that

4864
03:02:36,560 --> 03:02:38,479
this happens but dji had some

4865
03:02:38,479 --> 03:02:40,160
reputational damage because of that and

4866
03:02:40,160 --> 03:02:42,319
then they then prosecuted their employee

4867
03:02:42,319 --> 03:02:44,160
that developer for leaking a secret

4868
03:02:44,160 --> 03:02:45,600
which is terrible

4869
03:02:45,600 --> 03:02:47,520
so you know we need to change the game a

4870
03:02:47,520 --> 03:02:50,160
bit uh we need to be able to have more

4871
03:02:50,160 --> 03:02:51,120
more

4872
03:02:51,120 --> 03:02:53,279
uh kind of consequences for that because

4873
03:02:53,279 --> 03:02:54,399
at the moment

4874
03:02:54,399 --> 03:02:56,160
we're focusing totally on on the wrong

4875
03:02:56,160 --> 03:02:58,560
things we're humans we're going to make

4876
03:02:58,560 --> 03:03:00,560
errors it's just how it is

4877
03:03:00,560 --> 03:03:02,399
yeah yeah absolutely

4878
03:03:02,399 --> 03:03:04,479
eric anything to add

4879
03:03:04,479 --> 03:03:06,319
oh my it's just like a fire hose of

4880
03:03:06,319 --> 03:03:08,560
information it was awesome

4881
03:03:08,560 --> 03:03:10,640
i was curious uh if maybe this is in

4882
03:03:10,640 --> 03:03:12,560
your report or or you have an opinion

4883
03:03:12,560 --> 03:03:13,920
what about things like sealed secrets

4884
03:03:13,920 --> 03:03:16,399
where you're encrypting your

4885
03:03:16,399 --> 03:03:18,399
secret data in git and then you're

4886
03:03:18,399 --> 03:03:20,399
having to decrypt it after the fact any

4887
03:03:20,399 --> 03:03:23,359
uh experience with that any any thoughts

4888
03:03:23,359 --> 03:03:24,240
so

4889
03:03:24,240 --> 03:03:25,920
you know like there's there's the

4890
03:03:25,920 --> 03:03:27,439
security line that you should take and

4891
03:03:27,439 --> 03:03:28,720
the security line that you should take

4892
03:03:28,720 --> 03:03:30,399
is that you should you shouldn't do that

4893
03:03:30,399 --> 03:03:33,120
because that sealed file so you're

4894
03:03:33,120 --> 03:03:34,479
encrypting it is still going to sprawl

4895
03:03:34,479 --> 03:03:36,640
everywhere and it's going to create risk

4896
03:03:36,640 --> 03:03:38,319
the security line is that you should use

4897
03:03:38,319 --> 03:03:39,840
something heavy and complicated like

4898
03:03:39,840 --> 03:03:41,279
vault and you should if you're a large

4899
03:03:41,279 --> 03:03:43,680
company i have a different opinion so i

4900
03:03:43,680 --> 03:03:45,760
have an opinion that we need to be using

4901
03:03:45,760 --> 03:03:47,359
secrets management but we need to use

4902
03:03:47,359 --> 03:03:48,960
appropriate secrets management for where

4903
03:03:48,960 --> 03:03:51,279
we where we are and the risk that we

4904
03:03:51,279 --> 03:03:52,080
have

4905
03:03:52,080 --> 03:03:54,399
so you know if you're a team if you're a

4906
03:03:54,399 --> 03:03:56,560
small team if you're working on some

4907
03:03:56,560 --> 03:03:59,600
some local projects you know i as long

4908
03:03:59,600 --> 03:04:02,240
as it's using good encryption it does

4909
03:04:02,240 --> 03:04:04,880
increase your risk because it sprawls

4910
03:04:04,880 --> 03:04:06,960
even though it's encrypted but if we can

4911
03:04:06,960 --> 03:04:08,800
rely on that encryption and we can make

4912
03:04:08,800 --> 03:04:11,120
sure that we don't uh leak those keys

4913
03:04:11,120 --> 03:04:13,359
then it can be a good solution if the

4914
03:04:13,359 --> 03:04:14,640
alternative is that you're just going to

4915
03:04:14,640 --> 03:04:16,560
share the secrets in plain text right

4916
03:04:16,560 --> 03:04:18,560
because secrets management can be so

4917
03:04:18,560 --> 03:04:21,040
heavy so i'm not sub against that if

4918
03:04:21,040 --> 03:04:23,520
it's appropriate for your

4919
03:04:23,520 --> 03:04:25,279
you know it is appropriate for what

4920
03:04:25,279 --> 03:04:27,680
you're doing if you're a large company

4921
03:04:27,680 --> 03:04:29,120
you shouldn't be doing that because

4922
03:04:29,120 --> 03:04:31,279
you're a target you should be using

4923
03:04:31,279 --> 03:04:33,920
these heavy great software but they're

4924
03:04:33,920 --> 03:04:35,439
they can be expensive they can be hard

4925
03:04:35,439 --> 03:04:36,399
to set up

4926
03:04:36,399 --> 03:04:38,640
um so yeah i mean i i kind of like i

4927
03:04:38,640 --> 03:04:40,399
kind of i kind of get that and i think

4928
03:04:40,399 --> 03:04:42,640
that because it can be so complicated i

4929
03:04:42,640 --> 03:04:45,760
mean that's infinitely better than uh

4930
03:04:45,760 --> 03:04:47,920
just storing them in plain text and get

4931
03:04:47,920 --> 03:04:50,560
so if that's if that's convenient for

4932
03:04:50,560 --> 03:04:52,240
you if you're actually going to use that

4933
03:04:52,240 --> 03:04:55,279
method then sure um that's that's that's

4934
03:04:55,279 --> 03:04:56,560
a step in the right direction and as

4935
03:04:56,560 --> 03:04:58,800
long as you grow with your maturity then

4936
03:04:58,800 --> 03:05:01,359
i think that's a fine first step but the

4937
03:05:01,359 --> 03:05:03,600
official line is no don't do that

4938
03:05:03,600 --> 03:05:04,640
just

4939
03:05:04,640 --> 03:05:05,330
just to cover

4940
03:05:05,330 --> 03:05:08,720
[Laughter]

4941
03:05:08,720 --> 03:05:09,920
all right one last question for you

4942
03:05:09,920 --> 03:05:11,359
mckenzie before we let you go and this

4943
03:05:11,359 --> 03:05:14,720
one comes from nicholas over on hoppin

4944
03:05:14,720 --> 03:05:17,040
they asked are there any tools suggested

4945
03:05:17,040 --> 03:05:18,720
for scanning git history and docker

4946
03:05:18,720 --> 03:05:21,840
images to list slash hash all found

4947
03:05:21,840 --> 03:05:22,880
secrets

4948
03:05:22,880 --> 03:05:24,640
to use during remediation and server

4949
03:05:24,640 --> 03:05:26,000
rotation

4950
03:05:26,000 --> 03:05:28,240
yeah yeah absolutely so i i work for get

4951
03:05:28,240 --> 03:05:29,920
guardian so we're a tool that does that

4952
03:05:29,920 --> 03:05:32,000
we're free for developers or anyone with

4953
03:05:32,000 --> 03:05:34,240
less than 25 developers in their team

4954
03:05:34,240 --> 03:05:36,399
we'll scan your entire history uh you'll

4955
03:05:36,399 --> 03:05:38,160
have a nice dashboard we also have some

4956
03:05:38,160 --> 03:05:41,120
open source tools for it so obviously uh

4957
03:05:41,120 --> 03:05:42,880
that's the that's the tool that i met

4958
03:05:42,880 --> 03:05:44,640
that i recommend and we can also scan

4959
03:05:44,640 --> 03:05:46,560
you know docker images and all these

4960
03:05:46,560 --> 03:05:48,960
areas so get guardian um

4961
03:05:48,960 --> 03:05:50,880
for sure but i always like to mention

4962
03:05:50,880 --> 03:05:53,200
some some other areas if you if you kind

4963
03:05:53,200 --> 03:05:54,640
of we're looking more at open source

4964
03:05:54,640 --> 03:05:56,080
projects there are some great open

4965
03:05:56,080 --> 03:05:59,359
source detection tools out there

4966
03:05:59,359 --> 03:06:00,880
you know they don't work in that large

4967
03:06:00,880 --> 03:06:02,720
scale enterprise things because they can

4968
03:06:02,720 --> 03:06:04,720
get pretty noisy but if you're just

4969
03:06:04,720 --> 03:06:06,720
wanting to experiment with with sequence

4970
03:06:06,720 --> 03:06:08,880
detection uh get guardians free but

4971
03:06:08,880 --> 03:06:10,720
there's also open source alternatives

4972
03:06:10,720 --> 03:06:13,200
out there um out there as well so if you

4973
03:06:13,200 --> 03:06:15,200
if you do a quick google search uh if

4974
03:06:15,200 --> 03:06:16,880
you look into it you'll find some great

4975
03:06:16,880 --> 03:06:19,439
options and ones that will fit into your

4976
03:06:19,439 --> 03:06:22,160
workflow i'm sure

4977
03:06:22,160 --> 03:06:24,160
excellent thank you for that answer as

4978
03:06:24,160 --> 03:06:25,920
well and thank you for a wonderful

4979
03:06:25,920 --> 03:06:27,359
session mackenzie we're going to let you

4980
03:06:27,359 --> 03:06:29,120
go have a good rest of your day and i

4981
03:06:29,120 --> 03:06:30,960
hope to see you around again soon

4982
03:06:30,960 --> 03:06:32,640
awesome thanks guys it was great to be

4983
03:06:32,640 --> 03:06:35,439
on par thank you

4984
03:06:35,680 --> 03:06:37,840
all right eric we're in break time we

4985
03:06:37,840 --> 03:06:39,279
cut into the break a little bit which i

4986
03:06:39,279 --> 03:06:41,120
think is fine it was great to have some

4987
03:06:41,120 --> 03:06:44,319
extra questions from folks and um

4988
03:06:44,319 --> 03:06:45,920
we got about five minute break folks

4989
03:06:45,920 --> 03:06:47,920
before the next session so feel free to

4990
03:06:47,920 --> 03:06:49,520
get up and do some more stretches if

4991
03:06:49,520 --> 03:06:51,200
you'd like in case you didn't fall over

4992
03:06:51,200 --> 03:06:53,200
i saw kyle before that that that last

4993
03:06:53,200 --> 03:06:55,359
stretch broke kyle and is now going to

4994
03:06:55,359 --> 03:06:58,319
be suing so apologies about that but if

4995
03:06:58,319 --> 03:06:59,920
you're still willing to do some more

4996
03:06:59,920 --> 03:07:02,000
stretches folks feel free to do that now

4997
03:07:02,000 --> 03:07:04,640
in addition i want to remind everybody

4998
03:07:04,640 --> 03:07:07,120
about something else that's going on

4999
03:07:07,120 --> 03:07:08,319
throughout this and that we have

5000
03:07:08,319 --> 03:07:12,319
nominations for the dev sec ops awards

5001
03:07:12,319 --> 03:07:14,960
did you know about that eric

5002
03:07:14,960 --> 03:07:17,920
i had heard about it you did okay good

5003
03:07:17,920 --> 03:07:20,479
we have a slide for that oh look at that

5004
03:07:20,479 --> 03:07:22,840
so you can go to devsecond.com

5005
03:07:22,840 --> 03:07:25,840
community slash awards and nominate

5006
03:07:25,840 --> 03:07:28,319
folks in the community that you think

5007
03:07:28,319 --> 03:07:31,040
should win that you believe fulfill the

5008
03:07:31,040 --> 03:07:32,560
the award categories we have here we

5009
03:07:32,560 --> 03:07:35,120
have inspiring devsecops individual

5010
03:07:35,120 --> 03:07:38,000
award of 2022 most effective devsecops

5011
03:07:38,000 --> 03:07:40,800
team of 2022 and last but not least

5012
03:07:40,800 --> 03:07:43,760
outstanding devsecops community of 2022.

5013
03:07:43,760 --> 03:07:44,560
so

5014
03:07:44,560 --> 03:07:46,720
feel free to head on over to that link

5015
03:07:46,720 --> 03:07:49,040
provide your nominations

5016
03:07:49,040 --> 03:07:49,760
to

5017
03:07:49,760 --> 03:07:51,840
through the form there and a winners

5018
03:07:51,840 --> 03:07:53,600
will be announced by the end of the year

5019
03:07:53,600 --> 03:07:55,439
i believe right that's what he said yeah

5020
03:07:55,439 --> 03:07:58,000
announced later in the year

5021
03:07:58,000 --> 03:08:00,560
so check that out that sounds like a fun

5022
03:08:00,560 --> 03:08:04,000
i'm excited to see who wins

5023
03:08:04,640 --> 03:08:06,800
any any uh any guesses on who it might

5024
03:08:06,800 --> 03:08:08,880
be eric are you gonna get the individual

5025
03:08:08,880 --> 03:08:10,160
one no

5026
03:08:10,160 --> 03:08:12,319
no

5027
03:08:12,640 --> 03:08:14,800
uh i find you inspiring eric so i'm just

5028
03:08:14,800 --> 03:08:15,840
gonna say

5029
03:08:15,840 --> 03:08:17,600
i i think you're worthy of

5030
03:08:17,600 --> 03:08:18,720
well it's because you know it's because

5031
03:08:18,720 --> 03:08:22,640
my orange shirt my rare orange sticker

5032
03:08:22,640 --> 03:08:23,920
yeah

5033
03:08:23,920 --> 03:08:25,359
you know it was interesting uh we've had

5034
03:08:25,359 --> 03:08:28,160
a couple people bring up the code cove

5035
03:08:28,160 --> 03:08:30,479
exploit and it reminded me

5036
03:08:30,479 --> 03:08:32,560
while you're over on decksetcon.com that

5037
03:08:32,560 --> 03:08:34,479
we have a podcast if you're not familiar

5038
03:08:34,479 --> 03:08:37,279
with it um we have a podcast

5039
03:08:37,279 --> 03:08:40,000
that um often is hosted by our sneaks

5040
03:08:40,000 --> 03:08:43,040
co-founder guy pajarni and if i get my

5041
03:08:43,040 --> 03:08:46,160
screen share going let me

5042
03:08:46,160 --> 03:08:46,960
show

5043
03:08:46,960 --> 03:08:49,120
we actually had a talk

5044
03:08:49,120 --> 03:08:51,120
can't talk and click at the same time

5045
03:08:51,120 --> 03:08:52,479
here

5046
03:08:52,479 --> 03:08:54,720
we had a podcast with the code cove crew

5047
03:08:54,720 --> 03:08:56,720
last year and i remember this one

5048
03:08:56,720 --> 03:08:58,240
because it was very interesting they're

5049
03:08:58,240 --> 03:09:00,319
very transparent but what transparent

5050
03:09:00,319 --> 03:09:03,040
about what happened and uh went through

5051
03:09:03,040 --> 03:09:05,200
it all in fact um

5052
03:09:05,200 --> 03:09:07,760
one of the great things about security

5053
03:09:07,760 --> 03:09:09,760
uh software security companies in this

5054
03:09:09,760 --> 03:09:11,920
in the supply chain arena they all seem

5055
03:09:11,920 --> 03:09:13,920
to be very willing to share when there

5056
03:09:13,920 --> 03:09:15,840
are stumbles and when there are things

5057
03:09:15,840 --> 03:09:17,920
that help us all learn there was another

5058
03:09:17,920 --> 03:09:19,680
issue where argo

5059
03:09:19,680 --> 03:09:22,000
um by self-promoting my own blog here

5060
03:09:22,000 --> 03:09:23,840
but um there's a link in here to their

5061
03:09:23,840 --> 03:09:25,040
blog

5062
03:09:25,040 --> 03:09:27,200
there it is um

5063
03:09:27,200 --> 03:09:29,840
argo had an issue cve

5064
03:09:29,840 --> 03:09:31,760
in their software and

5065
03:09:31,760 --> 03:09:33,600
i thought this was a great article they

5066
03:09:33,600 --> 03:09:34,560
go through

5067
03:09:34,560 --> 03:09:36,239
how it was found by the security

5068
03:09:36,239 --> 03:09:37,680
analysts that found it how they worked

5069
03:09:37,680 --> 03:09:39,120
with them and how having automation

5070
03:09:39,120 --> 03:09:40,640
around security

5071
03:09:40,640 --> 03:09:41,920
helped them to really deal with it

5072
03:09:41,920 --> 03:09:43,279
quickly

5073
03:09:43,279 --> 03:09:44,880
just really good examples of good

5074
03:09:44,880 --> 03:09:47,520
stewards of

5075
03:09:47,520 --> 03:09:49,040
what they have in the secure supply in

5076
03:09:49,040 --> 03:09:51,200
the supply chain arena

5077
03:09:51,200 --> 03:09:54,000
yeah and i recall argo uh having a talk

5078
03:09:54,000 --> 03:09:56,319
back at our big fix event too which was

5079
03:09:56,319 --> 03:09:58,640
fantastic as well

5080
03:09:58,640 --> 03:10:00,560
good good stuff good stuff all right

5081
03:10:00,560 --> 03:10:02,640
without further ado let's go ahead and

5082
03:10:02,640 --> 03:10:04,080
jump into our next session what do you

5083
03:10:04,080 --> 03:10:05,120
say eric

5084
03:10:05,120 --> 03:10:06,640
does that sound good to you all right so

5085
03:10:06,640 --> 03:10:07,359
next

5086
03:10:07,359 --> 03:10:09,520
next up we have robert and corey we're

5087
03:10:09,520 --> 03:10:11,439
gonna be talking about in a full session

5088
03:10:11,439 --> 03:10:13,520
this time about hacking and defending

5089
03:10:13,520 --> 03:10:15,279
apis i'm going to let them introduce

5090
03:10:15,279 --> 03:10:16,560
themselves because they have quite the

5091
03:10:16,560 --> 03:10:19,120
impressive backgrounds as well so let's

5092
03:10:19,120 --> 03:10:20,560
bring them on

5093
03:10:20,560 --> 03:10:22,319
rob and corey good to see you both how

5094
03:10:22,319 --> 03:10:23,920
are you doing good how are you guys

5095
03:10:23,920 --> 03:10:25,279
doing

5096
03:10:25,279 --> 03:10:27,600
doing well doing well

5097
03:10:27,600 --> 03:10:30,560
so you're gonna be talking to us

5098
03:10:30,800 --> 03:10:32,239
a little latency on the internet you

5099
03:10:32,239 --> 03:10:34,399
know

5100
03:10:36,080 --> 03:10:37,840
cory you're gonna say something

5101
03:10:37,840 --> 03:10:39,200
i guess i'll just go and introduce

5102
03:10:39,200 --> 03:10:41,680
myself my name is corey ball i'm a

5103
03:10:41,680 --> 03:10:43,520
senior manager of penetration testing

5104
03:10:43,520 --> 03:10:45,760
over at moss adams and i wrote the book

5105
03:10:45,760 --> 03:10:48,319
hacking apis with no starch press

5106
03:10:48,319 --> 03:10:51,600
the book is out with them now and then

5107
03:10:51,600 --> 03:10:54,080
the major retail release is a month from

5108
03:10:54,080 --> 03:10:55,120
today

5109
03:10:55,120 --> 03:10:57,600
nice awesome how about you rob i'm

5110
03:10:57,600 --> 03:11:00,160
robert wagner i'm a field ciso for a

5111
03:11:00,160 --> 03:11:02,399
company called fletch

5112
03:11:02,399 --> 03:11:05,200
they actually integrate with things like

5113
03:11:05,200 --> 03:11:06,720
sneak and

5114
03:11:06,720 --> 03:11:08,560
go use a natural language processor to

5115
03:11:08,560 --> 03:11:11,359
go reading through thousands of articles

5116
03:11:11,359 --> 03:11:14,080
and then see if any of them are relevant

5117
03:11:14,080 --> 03:11:17,680
to what you just found in sneak so

5118
03:11:17,680 --> 03:11:19,840
wow that's amazing nice so i think what

5119
03:11:19,840 --> 03:11:21,279
we're going to do is eric and i are

5120
03:11:21,279 --> 03:11:22,640
going to get out of the way and let you

5121
03:11:22,640 --> 03:11:25,520
both take it away from here sound good

5122
03:11:25,520 --> 03:11:29,720
sounds great all right

5123
03:11:36,479 --> 03:11:38,160
all right we're going to be talking

5124
03:11:38,160 --> 03:11:42,160
through hacking and defending apis

5125
03:11:42,160 --> 03:11:44,239
so just a quick little additional

5126
03:11:44,239 --> 03:11:46,239
background so i'm also a founder of hack

5127
03:11:46,239 --> 03:11:47,520
for kids we

5128
03:11:47,520 --> 03:11:49,359
are a charity that teaches kids about

5129
03:11:49,359 --> 03:11:51,600
internet safety security and ethics i'm

5130
03:11:51,600 --> 03:11:53,760
on the board of my issa

5131
03:11:53,760 --> 03:11:55,200
as you can tell i love dogs and

5132
03:11:55,200 --> 03:11:56,960
motorcycles and even taught a dog to

5133
03:11:56,960 --> 03:11:59,520
ride motorcycle with me

5134
03:11:59,520 --> 03:12:01,040
i

5135
03:12:01,040 --> 03:12:03,040
actually

5136
03:12:03,040 --> 03:12:04,800
spent about um

5137
03:12:04,800 --> 03:12:07,359
almost 20 years now in infosec as you

5138
03:12:07,359 --> 03:12:09,680
knew i uh i said i was a field cso at

5139
03:12:09,680 --> 03:12:11,760
fletch that means uh you know i acted in

5140
03:12:11,760 --> 03:12:13,680
advisory capacity for other companies to

5141
03:12:13,680 --> 03:12:15,600
improve their security regardless of the

5142
03:12:15,600 --> 03:12:17,760
using pledge but we do have a free tool

5143
03:12:17,760 --> 03:12:20,800
that you can actually use

5144
03:12:22,399 --> 03:12:24,800
and i'm corey ballstill uh the only

5145
03:12:24,800 --> 03:12:25,920
thing in addition to what i've said

5146
03:12:25,920 --> 03:12:27,920
already is that i'm an evangelist over

5147
03:12:27,920 --> 03:12:30,160
at happysec.ai

5148
03:12:30,160 --> 03:12:32,000
i helped spread the good word that they

5149
03:12:32,000 --> 03:12:35,279
have a tool that is excellent for

5150
03:12:35,279 --> 03:12:36,399
scanning

5151
03:12:36,399 --> 03:12:37,120
uh

5152
03:12:37,120 --> 03:12:39,279
web apis for vulnerabilities that's a

5153
03:12:39,279 --> 03:12:42,080
really cool scanner

5154
03:12:42,160 --> 03:12:44,080
all right this is an overview of the api

5155
03:12:44,080 --> 03:12:45,920
security top 10 this is what we're going

5156
03:12:45,920 --> 03:12:48,399
to be discussing today and we're going

5157
03:12:48,399 --> 03:12:49,600
to go into this

5158
03:12:49,600 --> 03:12:50,560
from

5159
03:12:50,560 --> 03:12:53,279
a red team perspective and robert as the

5160
03:12:53,279 --> 03:12:55,200
blue team perspective and just some of

5161
03:12:55,200 --> 03:12:56,880
the things that

5162
03:12:56,880 --> 03:12:59,439
i look for when i'm penetration testing

5163
03:12:59,439 --> 03:13:01,279
apis and

5164
03:13:01,279 --> 03:13:02,479
attacking them

5165
03:13:02,479 --> 03:13:04,239
robert will be discussing some of the

5166
03:13:04,239 --> 03:13:07,040
fixes that can be applied or

5167
03:13:07,040 --> 03:13:09,439
maybe a mindset that can be applied to

5168
03:13:09,439 --> 03:13:14,200
help remediate some of these findings

5169
03:13:15,120 --> 03:13:17,840
first up we have api one which is broken

5170
03:13:17,840 --> 03:13:20,319
object level authorization also known as

5171
03:13:20,319 --> 03:13:23,200
bola uh this is number one for a reason

5172
03:13:23,200 --> 03:13:25,920
it is the most prevalent vulnerability

5173
03:13:25,920 --> 03:13:29,359
that's out there with rest apis uh

5174
03:13:29,359 --> 03:13:31,600
both phones are present when an api

5175
03:13:31,600 --> 03:13:33,600
provider allows the consumer to access

5176
03:13:33,600 --> 03:13:35,359
resources that they should not have

5177
03:13:35,359 --> 03:13:37,200
authorization to access

5178
03:13:37,200 --> 03:13:40,960
so when i'm attacking an api typically

5179
03:13:40,960 --> 03:13:41,920
i'll

5180
03:13:41,920 --> 03:13:44,720
set up a user a account i'll go through

5181
03:13:44,720 --> 03:13:46,960
all of the actions that i can take as

5182
03:13:46,960 --> 03:13:48,239
that user

5183
03:13:48,239 --> 03:13:51,200
and then i will create a user b account

5184
03:13:51,200 --> 03:13:53,600
and go back through and try and find

5185
03:13:53,600 --> 03:13:55,600
user a's resources

5186
03:13:55,600 --> 03:13:57,600
so here are some typical

5187
03:13:57,600 --> 03:13:59,760
types of requests that you could see

5188
03:13:59,760 --> 03:14:02,239
where we're doing a get request for

5189
03:14:02,239 --> 03:14:03,760
resource one

5190
03:14:03,760 --> 03:14:05,680
or maybe a user

5191
03:14:05,680 --> 03:14:07,200
id number

5192
03:14:07,200 --> 03:14:09,520
or maybe a combination of something like

5193
03:14:09,520 --> 03:14:12,479
a user account number and then a company

5194
03:14:12,479 --> 03:14:13,760
name

5195
03:14:13,760 --> 03:14:16,080
and i'll just go through make all those

5196
03:14:16,080 --> 03:14:19,200
requests as user a

5197
03:14:19,359 --> 03:14:21,840
replace the token with user b's token

5198
03:14:21,840 --> 03:14:26,000
and go back in and see if i can get any

5199
03:14:26,000 --> 03:14:27,760
positive responses

5200
03:14:27,760 --> 03:14:30,720
for those same resources it's not the

5201
03:14:30,720 --> 03:14:34,160
fact here that the api provider is using

5202
03:14:34,160 --> 03:14:37,040
sequential ids for resources although

5203
03:14:37,040 --> 03:14:38,399
that makes it a lot easier for an

5204
03:14:38,399 --> 03:14:39,600
attacker

5205
03:14:39,600 --> 03:14:42,479
it's more of the fact that there are not

5206
03:14:42,479 --> 03:14:44,560
authorization checks going on on the

5207
03:14:44,560 --> 03:14:46,880
back end that are validating that i am

5208
03:14:46,880 --> 03:14:48,960
only accessing resources that i should

5209
03:14:48,960 --> 03:14:52,358
be able to access

5210
03:14:52,399 --> 03:14:55,600
and so uh as uh being a blue teamer my

5211
03:14:55,600 --> 03:14:58,640
whole life my my job has always been to

5212
03:14:58,640 --> 03:15:01,279
try and make corey's life as miserable

5213
03:15:01,279 --> 03:15:04,319
as possible right um and it's not easy

5214
03:15:04,319 --> 03:15:06,560
here with bola bola's not

5215
03:15:06,560 --> 03:15:08,800
easy to defend against a lot of people

5216
03:15:08,800 --> 03:15:11,040
confuse the difference between

5217
03:15:11,040 --> 03:15:14,160
authentication and authorization so just

5218
03:15:14,160 --> 03:15:15,520
because you have authentication maybe

5219
03:15:15,520 --> 03:15:17,520
you have an api gateway or something

5220
03:15:17,520 --> 03:15:19,600
maybe even your api firewall that

5221
03:15:19,600 --> 03:15:21,279
doesn't help here because once you're

5222
03:15:21,279 --> 03:15:24,000
logged in um you can start messing with

5223
03:15:24,000 --> 03:15:26,399
the parameters just like corey explained

5224
03:15:26,399 --> 03:15:28,960
so to defend against this first off you

5225
03:15:28,960 --> 03:15:30,800
need an access policy uh if you don't

5226
03:15:30,800 --> 03:15:32,319
have one already

5227
03:15:32,319 --> 03:15:34,239
and then you're going to have to design

5228
03:15:34,239 --> 03:15:36,800
authorization in the same way a domain

5229
03:15:36,800 --> 03:15:39,840
admin would design um uh you know

5230
03:15:39,840 --> 03:15:42,239
authentication within their uh their

5231
03:15:42,239 --> 03:15:44,720
realm so you're going to have to go down

5232
03:15:44,720 --> 03:15:47,840
literally to every attribute and make

5233
03:15:47,840 --> 03:15:49,680
sure that

5234
03:15:49,680 --> 03:15:52,960
groups then have the correct access

5235
03:15:52,960 --> 03:15:55,120
to those attributes right to those api

5236
03:15:55,120 --> 03:15:56,880
paths

5237
03:15:56,880 --> 03:15:58,319
then you're going to need to require

5238
03:15:58,319 --> 03:16:01,439
that all access be based on

5239
03:16:01,439 --> 03:16:03,760
that authorization and then deny

5240
03:16:03,760 --> 03:16:05,840
everything else now testing for this

5241
03:16:05,840 --> 03:16:07,760
isn't necessarily hard you can start

5242
03:16:07,760 --> 03:16:09,600
building those tests out in in something

5243
03:16:09,600 --> 03:16:12,399
like postman but if the if your testing

5244
03:16:12,399 --> 03:16:14,319
isn't automated it's gonna be time

5245
03:16:14,319 --> 03:16:15,920
consuming especially when you're looking

5246
03:16:15,920 --> 03:16:18,399
at thousands of endpoints so to start

5247
03:16:18,399 --> 03:16:20,319
looking at how potentially to test that

5248
03:16:20,319 --> 03:16:22,720
take a look at ospsvs

5249
03:16:22,720 --> 03:16:26,640
and nist 800 162. um they're not perfect

5250
03:16:26,640 --> 03:16:28,560
for this but they will give you some

5251
03:16:28,560 --> 03:16:31,760
great guidelines

5252
03:16:31,760 --> 03:16:34,720
api 2 is broken authentication

5253
03:16:34,720 --> 03:16:37,279
and this is a catch-all for all api

5254
03:16:37,279 --> 03:16:39,120
authentication related vulnerabilities

5255
03:16:39,120 --> 03:16:41,040
so i separate these out into two

5256
03:16:41,040 --> 03:16:43,359
categories which is like the classic

5257
03:16:43,359 --> 03:16:44,800
vulnerabilities

5258
03:16:44,800 --> 03:16:46,880
maybe something like no authentication

5259
03:16:46,880 --> 03:16:49,200
or a weak password policy

5260
03:16:49,200 --> 03:16:51,359
and then the

5261
03:16:51,359 --> 03:16:53,040
more relevant vulnerabilities specific

5262
03:16:53,040 --> 03:16:56,000
to api so weak json web tokens exposed

5263
03:16:56,000 --> 03:16:58,160
private keys

5264
03:16:58,160 --> 03:17:00,800
as an attacker what we're looking for

5265
03:17:00,800 --> 03:17:02,160
just like the last presentation we're

5266
03:17:02,160 --> 03:17:04,319
going through github repositories and

5267
03:17:04,319 --> 03:17:06,960
we're looking through

5268
03:17:06,960 --> 03:17:09,680
those for any exposed information

5269
03:17:09,680 --> 03:17:12,560
we're also looking at the api

5270
03:17:12,560 --> 03:17:14,800
from

5271
03:17:14,880 --> 03:17:17,279
using an attacker mindset so

5272
03:17:17,279 --> 03:17:19,040
if i'm requesting information from an

5273
03:17:19,040 --> 03:17:21,680
api that doesn't require authentication

5274
03:17:21,680 --> 03:17:23,680
is there any private information that i

5275
03:17:23,680 --> 03:17:25,359
can request from it if so there should

5276
03:17:25,359 --> 03:17:28,239
be authentication

5277
03:17:28,960 --> 03:17:33,399
yeah that about does it

5278
03:17:41,439 --> 03:17:44,720
robert hey yep rory i actually lost uh

5279
03:17:44,720 --> 03:17:46,399
uh the audio video there for a second

5280
03:17:46,399 --> 03:17:49,840
i'm back um so uh so even though we said

5281
03:17:49,840 --> 03:17:52,399
authorization is the most common that

5282
03:17:52,399 --> 03:17:54,000
doesn't mean you can get away with not

5283
03:17:54,000 --> 03:17:55,920
having authentication right it's good to

5284
03:17:55,920 --> 03:17:59,680
have get uh get a gateway set up um uh

5285
03:17:59,680 --> 03:18:02,800
this uh vector is all about the the

5286
03:18:02,800 --> 03:18:06,000
authentication flows so first thing

5287
03:18:06,000 --> 03:18:09,279
get mfa already if you don't have ffa in

5288
03:18:09,279 --> 03:18:12,000
your organization get it and put it

5289
03:18:12,000 --> 03:18:14,239
everywhere if if you buy nothing else

5290
03:18:14,239 --> 03:18:16,319
this year mfas

5291
03:18:16,319 --> 03:18:18,399
cures so many evils not just in this

5292
03:18:18,399 --> 03:18:22,399
space but so many security domains um if

5293
03:18:22,399 --> 03:18:24,640
uh just like encryption don't let your

5294
03:18:24,640 --> 03:18:27,200
devs roll their own off that never works

5295
03:18:27,200 --> 03:18:29,439
out well um there's plenty of libraries

5296
03:18:29,439 --> 03:18:32,160
that are already created remember that

5297
03:18:32,160 --> 03:18:33,840
we're talking about authentication flows

5298
03:18:33,840 --> 03:18:35,680
and that includes things like the i

5299
03:18:35,680 --> 03:18:38,399
forgot my password mechanism corey can

5300
03:18:38,399 --> 03:18:40,800
just as easily abuse that if you don't

5301
03:18:40,800 --> 03:18:43,680
have good checks there um oauth and api

5302
03:18:43,680 --> 03:18:46,080
keys are not going to prevent corey from

5303
03:18:46,080 --> 03:18:48,800
uh from executing this attack and when

5304
03:18:48,800 --> 03:18:50,800
you're not sure root first detect your

5305
03:18:50,800 --> 03:18:53,439
own systems see if you can get in in

5306
03:18:53,439 --> 03:18:55,680
various ways if you have the time if not

5307
03:18:55,680 --> 03:18:57,520
hire somebody to do it corey's really

5308
03:18:57,520 --> 03:19:00,239
good at doing that

5309
03:19:00,239 --> 03:19:03,200
api three is excessive data exposure so

5310
03:19:03,200 --> 03:19:06,080
excessive data exposure takes place when

5311
03:19:06,080 --> 03:19:07,520
a consumer

5312
03:19:07,520 --> 03:19:09,120
makes a request for

5313
03:19:09,120 --> 03:19:10,000
um

5314
03:19:10,000 --> 03:19:12,720
data from an api and the provider sends

5315
03:19:12,720 --> 03:19:15,920
the whole object back over and

5316
03:19:15,920 --> 03:19:18,720
they're counting on the consumer to

5317
03:19:18,720 --> 03:19:21,279
filter out the data themselves

5318
03:19:21,279 --> 03:19:23,680
rather than doing that on the provider

5319
03:19:23,680 --> 03:19:24,479
side

5320
03:19:24,479 --> 03:19:25,359
so

5321
03:19:25,359 --> 03:19:27,680
here

5322
03:19:27,680 --> 03:19:30,319
this is a typical request for maybe this

5323
03:19:30,319 --> 03:19:32,800
user's account and you would expect as a

5324
03:19:32,800 --> 03:19:36,080
response to get the id first name last

5325
03:19:36,080 --> 03:19:37,920
name maybe the privilege level of that

5326
03:19:37,920 --> 03:19:41,040
user but you wouldn't expect to also get

5327
03:19:41,040 --> 03:19:42,399
maybe the

5328
03:19:42,399 --> 03:19:44,399
representative or the administrator of

5329
03:19:44,399 --> 03:19:46,080
the account

5330
03:19:46,080 --> 03:19:48,399
their information along with that so

5331
03:19:48,399 --> 03:19:50,319
that's something that should be

5332
03:19:50,319 --> 03:19:52,000
filtered out before it's provided to the

5333
03:19:52,000 --> 03:19:53,760
consumer or the client

5334
03:19:53,760 --> 03:19:55,920
and

5335
03:19:55,920 --> 03:19:59,600
excessive data exposure is more about

5336
03:19:59,600 --> 03:20:02,080
what can be done with the data than it

5337
03:20:02,080 --> 03:20:04,160
is about sending too much

5338
03:20:04,160 --> 03:20:06,560
information so if you know if it also

5339
03:20:06,560 --> 03:20:08,720
included their address or something else

5340
03:20:08,720 --> 03:20:10,000
those are things that you would expect

5341
03:20:10,000 --> 03:20:13,520
to be with that user potentially

5342
03:20:13,520 --> 03:20:15,840
but this other information provides us

5343
03:20:15,840 --> 03:20:17,760
with an administrator's full name an

5344
03:20:17,760 --> 03:20:20,080
administrator's id number their email

5345
03:20:20,080 --> 03:20:22,000
address and the administrator's

5346
03:20:22,000 --> 03:20:23,920
multi-factor

5347
03:20:23,920 --> 03:20:26,319
status and we can see that's false so we

5348
03:20:26,319 --> 03:20:30,319
can leverage this in additional attacks

5349
03:20:30,319 --> 03:20:33,520
if we're going after

5350
03:20:33,520 --> 03:20:35,040
an api

5351
03:20:35,040 --> 03:20:37,760
admins our

5352
03:20:37,760 --> 03:20:40,239
targets that we're looking for and

5353
03:20:40,239 --> 03:20:41,359
knowing that one doesn't have

5354
03:20:41,359 --> 03:20:43,040
multi-factor authentication is going to

5355
03:20:43,040 --> 03:20:45,760
be great to attempt and compromise their

5356
03:20:45,760 --> 03:20:48,880
account or guess their password

5357
03:20:50,800 --> 03:20:53,200
oh so defenses here all about the

5358
03:20:53,200 --> 03:20:56,160
streams the data stream in this case uh

5359
03:20:56,160 --> 03:20:59,040
but um the this flaw usually comes about

5360
03:20:59,040 --> 03:21:00,640
because people wanted to get things done

5361
03:21:00,640 --> 03:21:02,239
quickly they wanted to make it work so

5362
03:21:02,239 --> 03:21:04,160
they'll do things like just send all the

5363
03:21:04,160 --> 03:21:06,479
data right so uh they might do something

5364
03:21:06,479 --> 03:21:08,399
like if you're requesting data from a

5365
03:21:08,399 --> 03:21:11,200
security cam uh this api instead of just

5366
03:21:11,200 --> 03:21:13,920
sending you the one camera it sends you

5367
03:21:13,920 --> 03:21:16,160
all the cameras and expects the client's

5368
03:21:16,160 --> 03:21:18,640
filter to filter that out that's bad you

5369
03:21:18,640 --> 03:21:20,399
know all aspects told us this forever

5370
03:21:20,399 --> 03:21:22,319
clients should never be allowed to

5371
03:21:22,319 --> 03:21:25,920
enforce any security policy ever not

5372
03:21:25,920 --> 03:21:27,040
ever

5373
03:21:27,040 --> 03:21:28,960
so do things like check for sequential

5374
03:21:28,960 --> 03:21:31,520
ids which can be guessed um make sure

5375
03:21:31,520 --> 03:21:33,680
that the data coming back

5376
03:21:33,680 --> 03:21:35,840
is not more than the user is authorized

5377
03:21:35,840 --> 03:21:38,880
for if the data has pii you're you now

5378
03:21:38,880 --> 03:21:41,120
have to take this to a lift

5379
03:21:41,120 --> 03:21:43,120
another level a higher level and

5380
03:21:43,120 --> 03:21:46,720
classify that data apply policy to that

5381
03:21:46,720 --> 03:21:49,200
um but always always always just be

5382
03:21:49,200 --> 03:21:51,359
thinking of concepts of least privilege

5383
03:21:51,359 --> 03:21:52,960
and provide that

5384
03:21:52,960 --> 03:21:55,279
for your access and teach the devs how

5385
03:21:55,279 --> 03:21:57,600
to think that way as well and then a lot

5386
03:21:57,600 --> 03:21:58,960
of evidence of these things happening

5387
03:21:58,960 --> 03:22:02,880
can be in the logs so check the logs

5388
03:22:03,840 --> 03:22:06,000
apf4 is lack of resources and rate

5389
03:22:06,000 --> 03:22:07,279
limiting

5390
03:22:07,279 --> 03:22:09,200
the api is not sufficiently protected

5391
03:22:09,200 --> 03:22:11,359
against excessive amounts of requests or

5392
03:22:11,359 --> 03:22:12,880
payload sizes

5393
03:22:12,880 --> 03:22:16,720
this can go a few different ways so

5394
03:22:16,720 --> 03:22:18,080
rate limiting

5395
03:22:18,080 --> 03:22:20,479
is one of the the key functions that's

5396
03:22:20,479 --> 03:22:22,560
used to monetize certain apis so

5397
03:22:22,560 --> 03:22:24,720
bypassing this restriction can have

5398
03:22:24,720 --> 03:22:27,200
financial impacts on that end and if one

5399
03:22:27,200 --> 03:22:29,680
user is able to bypass that rate limit

5400
03:22:29,680 --> 03:22:31,920
then you're sure that the

5401
03:22:31,920 --> 03:22:33,600
rest of the internet is quick to find

5402
03:22:33,600 --> 03:22:35,040
out as well

5403
03:22:35,040 --> 03:22:37,200
if the affected infrastructure doesn't

5404
03:22:37,200 --> 03:22:39,600
have enough resources then a certain

5405
03:22:39,600 --> 03:22:41,439
amount of requests could cause a denial

5406
03:22:41,439 --> 03:22:44,239
of service that's not too common

5407
03:22:44,239 --> 03:22:45,600
what's more common is that the

5408
03:22:45,600 --> 03:22:47,200
infrastructure would scale with the

5409
03:22:47,200 --> 03:22:48,399
amount of requests

5410
03:22:48,399 --> 03:22:49,600
and

5411
03:22:49,600 --> 03:22:52,479
uh having that just sort of run amok

5412
03:22:52,479 --> 03:22:53,279
uh

5413
03:22:53,279 --> 03:22:56,399
isn't a financially

5414
03:22:56,399 --> 03:22:58,000
sound decision

5415
03:22:58,000 --> 03:22:59,359
if there's something simple like rate

5416
03:22:59,359 --> 03:23:00,720
limiting that could be put in place to

5417
03:23:00,720 --> 03:23:03,279
prevent that sort of thing it should be

5418
03:23:03,279 --> 03:23:05,359
the other

5419
03:23:05,359 --> 03:23:08,399
aspect that is greatly affected by rate

5420
03:23:08,399 --> 03:23:10,479
limiting would be

5421
03:23:10,479 --> 03:23:12,720
to

5422
03:23:12,960 --> 03:23:15,520
reset a password or or use that

5423
03:23:15,520 --> 03:23:17,760
functionality within the api so if a

5424
03:23:17,760 --> 03:23:19,680
user is going to guess

5425
03:23:19,680 --> 03:23:22,560
the reset uh code

5426
03:23:22,560 --> 03:23:24,399
in something like this request

5427
03:23:24,399 --> 03:23:25,760
then

5428
03:23:25,760 --> 03:23:28,960
if it's four digits that could be

5429
03:23:28,960 --> 03:23:32,160
every potential

5430
03:23:32,160 --> 03:23:33,760
combination could be guessed in 10 000

5431
03:23:33,760 --> 03:23:34,720
requests

5432
03:23:34,720 --> 03:23:37,680
and if there's no rate limit then

5433
03:23:37,680 --> 03:23:39,200
you can just send over the 10 000

5434
03:23:39,200 --> 03:23:41,359
requests and successfully reset the

5435
03:23:41,359 --> 03:23:43,279
password if there are no other security

5436
03:23:43,279 --> 03:23:45,279
controls in place

5437
03:23:45,279 --> 03:23:46,640
but

5438
03:23:46,640 --> 03:23:48,960
if there is rate limiting in place and

5439
03:23:48,960 --> 03:23:50,160
it allows

5440
03:23:50,160 --> 03:23:53,040
maybe a 100 requests per minute then i

5441
03:23:53,040 --> 03:23:54,399
can just

5442
03:23:54,399 --> 03:23:56,960
send over 99 requests per minute until

5443
03:23:56,960 --> 03:23:59,600
i've guessed the code as well so the

5444
03:23:59,600 --> 03:24:01,600
rate limit has to be enforced it has to

5445
03:24:01,600 --> 03:24:02,960
be strict and there should be other

5446
03:24:02,960 --> 03:24:04,399
controls in place for something like a

5447
03:24:04,399 --> 03:24:06,880
password reset

5448
03:24:06,880 --> 03:24:08,640
there are also methods that can be used

5449
03:24:08,640 --> 03:24:11,600
to bypass the the rate limit altogether

5450
03:24:11,600 --> 03:24:13,920
as well and so here you see an example

5451
03:24:13,920 --> 03:24:15,359
of case switching

5452
03:24:15,359 --> 03:24:17,200
where i've just uh

5453
03:24:17,200 --> 03:24:19,600
put an uppercase a and an uppercase u

5454
03:24:19,600 --> 03:24:22,479
and that's still processed to go to that

5455
03:24:22,479 --> 03:24:27,120
endpoint and to guess that reset code

5456
03:24:27,120 --> 03:24:29,520
but it's not counted against me

5457
03:24:29,520 --> 03:24:31,279
on the rate limit and so if i could do

5458
03:24:31,279 --> 03:24:32,720
something simple

5459
03:24:32,720 --> 03:24:35,840
like case switching or adding a question

5460
03:24:35,840 --> 03:24:37,840
question mark or adding a null byte with

5461
03:24:37,840 --> 03:24:39,680
case switching then i'm going to use

5462
03:24:39,680 --> 03:24:42,479
that tactic in order to bypass any rate

5463
03:24:42,479 --> 03:24:44,399
limit restrictions to guess that reset

5464
03:24:44,399 --> 03:24:45,279
token

5465
03:24:45,279 --> 03:24:47,200
and that's a great example of how

5466
03:24:47,200 --> 03:24:48,880
hackers think right they're constantly

5467
03:24:48,880 --> 03:24:51,760
looking for hey if i just change this a

5468
03:24:51,760 --> 03:24:54,239
little bit can i get away with the evil

5469
03:24:54,239 --> 03:24:56,640
that i'm trying to uh to get away with

5470
03:24:56,640 --> 03:24:59,359
right and cory's very evil no uh the

5471
03:24:59,359 --> 03:25:01,439
good thing is is that for things like

5472
03:25:01,439 --> 03:25:04,479
this um there's plenty of ways to defend

5473
03:25:04,479 --> 03:25:07,359
against it and your sres are probably

5474
03:25:07,359 --> 03:25:09,920
aware of most of them docker has

5475
03:25:09,920 --> 03:25:11,520
built-in limiting functions there's

5476
03:25:11,520 --> 03:25:14,239
plenty of ways to throttle requests

5477
03:25:14,239 --> 03:25:16,960
responses the amount of data passed um

5478
03:25:16,960 --> 03:25:20,000
so put those in place and then on the

5479
03:25:20,000 --> 03:25:24,000
back end again logs are your friend um

5480
03:25:24,000 --> 03:25:26,560
in fact just about every logging tool

5481
03:25:26,560 --> 03:25:29,040
out there has some sort of

5482
03:25:29,040 --> 03:25:31,279
uh easy way and we're talking even the

5483
03:25:31,279 --> 03:25:32,640
free tools right you can get elk

5484
03:25:32,640 --> 03:25:35,439
whatever but standard deviation is easy

5485
03:25:35,439 --> 03:25:37,840
to compute in all of these tools

5486
03:25:37,840 --> 03:25:39,520
so just looking for something like plus

5487
03:25:39,520 --> 03:25:42,080
or minus well actually in this case plus

5488
03:25:42,080 --> 03:25:44,080
uh two standard deviations might give

5489
03:25:44,080 --> 03:25:46,080
you a heads up and if you really want to

5490
03:25:46,080 --> 03:25:48,160
get fancy and start using some

5491
03:25:48,160 --> 03:25:50,720
algorithms to start modeling that data

5492
03:25:50,720 --> 03:25:53,200
free tools like scipy or our project can

5493
03:25:53,200 --> 03:25:55,040
help you out when you're ready for that

5494
03:25:55,040 --> 03:25:57,680
next step

5495
03:25:58,720 --> 03:26:00,880
api 5 is broken function level

5496
03:26:00,880 --> 03:26:03,680
authorization also known as baffle

5497
03:26:03,680 --> 03:26:05,920
this is a similar vulnerability to bola

5498
03:26:05,920 --> 03:26:09,120
except instead of an authorization

5499
03:26:09,120 --> 03:26:11,680
problem with requesting resources it's

5500
03:26:11,680 --> 03:26:14,080
actually an authorization problem with

5501
03:26:14,080 --> 03:26:16,000
privileged actions

5502
03:26:16,000 --> 03:26:18,720
so in this instance here there's a put

5503
03:26:18,720 --> 03:26:21,439
request to update this account user a

5504
03:26:21,439 --> 03:26:23,920
should be able to update their account

5505
03:26:23,920 --> 03:26:27,520
and user b should not be able to

5506
03:26:27,520 --> 03:26:28,640
delete

5507
03:26:28,640 --> 03:26:32,720
uh user b's sorry user a's account if if

5508
03:26:32,720 --> 03:26:33,920
we're talking about something like a

5509
03:26:33,920 --> 03:26:35,680
fintech api

5510
03:26:35,680 --> 03:26:38,720
bola is where i could request

5511
03:26:38,720 --> 03:26:40,080
information

5512
03:26:40,080 --> 03:26:41,040
about

5513
03:26:41,040 --> 03:26:43,279
robert's account and get back

5514
03:26:43,279 --> 03:26:45,359
information maybe his account balance or

5515
03:26:45,359 --> 03:26:48,479
account id baffler is more about being

5516
03:26:48,479 --> 03:26:50,880
able to transfer robert's money into my

5517
03:26:50,880 --> 03:26:52,880
account not that you'd ever do that to

5518
03:26:52,880 --> 03:26:56,399
me um so yeah baffle is pretty bad uh

5519
03:26:56,399 --> 03:26:58,399
this is all about you know corey uh

5520
03:26:58,399 --> 03:27:00,800
being an imposter being being admin or

5521
03:27:00,800 --> 03:27:02,720
admin like when when you shouldn't be

5522
03:27:02,720 --> 03:27:05,120
and doing those actions so just like

5523
03:27:05,120 --> 03:27:08,319
bola we need to have an access policy to

5524
03:27:08,319 --> 03:27:10,960
help stop those imposters

5525
03:27:10,960 --> 03:27:13,279
again everything needs access needs to

5526
03:27:13,279 --> 03:27:14,720
be controlled right down to the

5527
03:27:14,720 --> 03:27:17,040
attribute level especially on things

5528
03:27:17,040 --> 03:27:18,080
like

5529
03:27:18,080 --> 03:27:19,600
money transfers

5530
03:27:19,600 --> 03:27:21,760
deny everything else

5531
03:27:21,760 --> 03:27:23,920
enforce only on the server side not the

5532
03:27:23,920 --> 03:27:26,640
client side same concepts apply here

5533
03:27:26,640 --> 03:27:28,560
test to make sure that's working you

5534
03:27:28,560 --> 03:27:30,720
know try to act like a hacker and do

5535
03:27:30,720 --> 03:27:32,319
things like corey just described where

5536
03:27:32,319 --> 03:27:34,000
you're doing transfers on somebody

5537
03:27:34,000 --> 03:27:35,680
else's account

5538
03:27:35,680 --> 03:27:38,720
and again logs for the win in this case

5539
03:27:38,720 --> 03:27:40,880
you might want to look for things that

5540
03:27:40,880 --> 03:27:42,479
are rare and most logging tools have the

5541
03:27:42,479 --> 03:27:43,920
concept of looking for things that are

5542
03:27:43,920 --> 03:27:45,439
rare basically you're going to be

5543
03:27:45,439 --> 03:27:47,840
looking for rare methods to an endpoint

5544
03:27:47,840 --> 03:27:50,479
or rare uh calls from a particular

5545
03:27:50,479 --> 03:27:52,960
account you won't prevent the attack but

5546
03:27:52,960 --> 03:27:54,399
at least you'll have some visibility

5547
03:27:54,399 --> 03:27:57,840
that things like that are happening

5548
03:27:58,319 --> 03:28:00,399
api 6 is mass assignment this is the

5549
03:28:00,399 --> 03:28:02,720
binding of consumer input to data models

5550
03:28:02,720 --> 03:28:04,800
without filtering properties

5551
03:28:04,800 --> 03:28:06,960
in other words a consumer can pass

5552
03:28:06,960 --> 03:28:09,680
additional parameters to an application

5553
03:28:09,680 --> 03:28:11,760
that are automatically added to the

5554
03:28:11,760 --> 03:28:13,279
internal object

5555
03:28:13,279 --> 03:28:15,760
this can take place if developers are

5556
03:28:15,760 --> 03:28:18,319
depending on obscurity as one of the

5557
03:28:18,319 --> 03:28:19,920
security controls

5558
03:28:19,920 --> 03:28:21,840
or if uh

5559
03:28:21,840 --> 03:28:24,160
you know the

5560
03:28:24,160 --> 03:28:27,520
user input isn't sanitized or filtered

5561
03:28:27,520 --> 03:28:29,920
we see this a lot with

5562
03:28:29,920 --> 03:28:32,239
account registration processes

5563
03:28:32,239 --> 03:28:34,640
and here you see an attack where a post

5564
03:28:34,640 --> 03:28:36,319
is being done to this account

5565
03:28:36,319 --> 03:28:37,680
registration

5566
03:28:37,680 --> 03:28:39,200
and typically

5567
03:28:39,200 --> 03:28:40,239
that

5568
03:28:40,239 --> 03:28:42,479
request would only have maybe username

5569
03:28:42,479 --> 03:28:44,640
and password and the email address of

5570
03:28:44,640 --> 03:28:46,239
the user

5571
03:28:46,239 --> 03:28:48,960
however the api provider does have some

5572
03:28:48,960 --> 03:28:51,359
process to create administrative users

5573
03:28:51,359 --> 03:28:52,880
and they are using

5574
03:28:52,880 --> 03:28:55,040
certain parameters to represent that

5575
03:28:55,040 --> 03:28:56,319
privilege level

5576
03:28:56,319 --> 03:28:58,319
so if the user input

5577
03:28:58,319 --> 03:29:01,439
isn't filtered out i could try and guess

5578
03:29:01,439 --> 03:29:03,040
what they're using on the back end for

5579
03:29:03,040 --> 03:29:04,960
that or maybe i could use

5580
03:29:04,960 --> 03:29:06,960
administrative documentation if that's

5581
03:29:06,960 --> 03:29:08,000
public

5582
03:29:08,000 --> 03:29:10,319
and

5583
03:29:10,560 --> 03:29:11,760
make a

5584
03:29:11,760 --> 03:29:14,399
focus my attack more on just the

5585
03:29:14,399 --> 03:29:17,120
typical parameters that are used

5586
03:29:17,120 --> 03:29:18,560
and i could just send those over in a

5587
03:29:18,560 --> 03:29:21,520
single request if there are restrictions

5588
03:29:21,520 --> 03:29:23,279
on the size of the request i could just

5589
03:29:23,279 --> 03:29:25,120
send over a bunch of requests trying to

5590
03:29:25,120 --> 03:29:27,600
guess you know admin true admin as one

5591
03:29:27,600 --> 03:29:29,760
is edmond true all these sorts of things

5592
03:29:29,760 --> 03:29:32,800
until i get some sort of

5593
03:29:32,840 --> 03:29:36,479
success so corey's just playing here

5594
03:29:36,479 --> 03:29:39,200
right he's looking for clues in in what

5595
03:29:39,200 --> 03:29:41,040
he sends and what he gets back from the

5596
03:29:41,040 --> 03:29:43,600
api that can tell him about properties

5597
03:29:43,600 --> 03:29:46,399
that he might be able to manipulate so

5598
03:29:46,399 --> 03:29:48,800
all the previous suggestions uh still

5599
03:29:48,800 --> 03:29:51,200
apply right um we're gonna again make

5600
03:29:51,200 --> 03:29:54,319
sure that uh authorization uh right down

5601
03:29:54,319 --> 03:29:58,080
uh to the to each api's level is is what

5602
03:29:58,080 --> 03:30:00,160
we're applying um

5603
03:30:00,160 --> 03:30:01,920
otherwise you know you're going to be

5604
03:30:01,920 --> 03:30:04,239
left with either disabling mass

5605
03:30:04,239 --> 03:30:06,239
assignment completely which would

5606
03:30:06,239 --> 03:30:08,399
probably break a a lot of things if

5607
03:30:08,399 --> 03:30:11,439
you're already set up to allow those or

5608
03:30:11,439 --> 03:30:12,960
really what you're going to have to do

5609
03:30:12,960 --> 03:30:15,520
is do exactly what i said go back

5610
03:30:15,520 --> 03:30:16,800
find out

5611
03:30:16,800 --> 03:30:20,239
each parameter and then restrict in

5612
03:30:20,239 --> 03:30:23,600
each api to only allow those kind of

5613
03:30:23,600 --> 03:30:25,359
things if you're authorized to take

5614
03:30:25,359 --> 03:30:26,720
those actions which is going to be the

5615
03:30:26,720 --> 03:30:30,039
better choice

5616
03:30:30,160 --> 03:30:33,040
api 7 is security misconfiguration this

5617
03:30:33,040 --> 03:30:35,840
is another catch all for

5618
03:30:35,840 --> 03:30:38,960
all generic security issues

5619
03:30:38,960 --> 03:30:41,279
uh when it when it comes to tooling

5620
03:30:41,279 --> 03:30:43,600
that's available out for

5621
03:30:43,600 --> 03:30:47,040
vulnerability scanning of uh

5622
03:30:47,040 --> 03:30:49,600
web applications and apis and

5623
03:30:49,600 --> 03:30:51,279
different systems out there

5624
03:30:51,279 --> 03:30:54,160
all of those are really good at catching

5625
03:30:54,160 --> 03:30:56,319
security misconfigurations uh when

5626
03:30:56,319 --> 03:30:57,840
they're set up generically they're not

5627
03:30:57,840 --> 03:30:59,680
so good at catching other

5628
03:30:59,680 --> 03:31:01,439
vulnerabilities on the os api security

5629
03:31:01,439 --> 03:31:02,960
top 10. so

5630
03:31:02,960 --> 03:31:04,880
a security scanner may be something like

5631
03:31:04,880 --> 03:31:07,840
quals or nessus or even

5632
03:31:07,840 --> 03:31:09,520
you know osp zap

5633
03:31:09,520 --> 03:31:12,160
or burp suite from a generic perspective

5634
03:31:12,160 --> 03:31:13,680
if you're just feeding it the web

5635
03:31:13,680 --> 03:31:16,560
application link or maybe even the url

5636
03:31:16,560 --> 03:31:17,920
to the api

5637
03:31:17,920 --> 03:31:20,399
then though it'll catch some things like

5638
03:31:20,399 --> 03:31:22,640
ssl related issues verbose error

5639
03:31:22,640 --> 03:31:24,800
messaging verbose

5640
03:31:24,800 --> 03:31:28,399
errors headers verbose headers um but

5641
03:31:28,399 --> 03:31:30,720
it's not going to catch a

5642
03:31:30,720 --> 03:31:32,160
bowl of vulnerabilities baffle

5643
03:31:32,160 --> 03:31:34,000
vulnerabilities without additional

5644
03:31:34,000 --> 03:31:35,520
configuration so

5645
03:31:35,520 --> 03:31:38,720
these are fairly straightforward to find

5646
03:31:38,720 --> 03:31:42,479
and take advantage of

5647
03:31:42,479 --> 03:31:44,880
and they've been around forever right we

5648
03:31:44,880 --> 03:31:46,720
we're all familiar with everything from

5649
03:31:46,720 --> 03:31:50,080
directory traversal uh to um to verbose

5650
03:31:50,080 --> 03:31:52,560
headers it's been around forever uh

5651
03:31:52,560 --> 03:31:55,120
corey loves it because for him it's uh

5652
03:31:55,120 --> 03:31:56,479
there's always an opportunity that

5653
03:31:56,479 --> 03:31:58,000
something's gonna go right for us

5654
03:31:58,000 --> 03:32:00,720
defenders this is really murphy's uh law

5655
03:32:00,720 --> 03:32:01,920
as far as

5656
03:32:01,920 --> 03:32:04,000
api security goes literally anything

5657
03:32:04,000 --> 03:32:06,160
that can go wrong will go wrong there's

5658
03:32:06,160 --> 03:32:08,720
no way to plan for everything but you

5659
03:32:08,720 --> 03:32:11,040
should have a plan right you should be

5660
03:32:11,040 --> 03:32:13,520
doing things like patching updating and

5661
03:32:13,520 --> 03:32:16,080
hardening but if you forget oops there

5662
03:32:16,080 --> 03:32:17,439
there's a way in for corey if he

5663
03:32:17,439 --> 03:32:20,560
discovers it um the the best way to

5664
03:32:20,560 --> 03:32:22,720
approach this is just like you do with

5665
03:32:22,720 --> 03:32:25,600
itops i.t security put into change

5666
03:32:25,600 --> 03:32:27,760
management program a compliance

5667
03:32:27,760 --> 03:32:30,479
framework yes all the boring stuff that

5668
03:32:30,479 --> 03:32:32,720
we all hate nobody wants to do but

5669
03:32:32,720 --> 03:32:34,960
you've got to do it and then enforce

5670
03:32:34,960 --> 03:32:38,160
those things uh at least you're

5671
03:32:38,160 --> 03:32:40,160
um limiting the amount of things that

5672
03:32:40,160 --> 03:32:42,960
can go wrong

5673
03:32:44,080 --> 03:32:46,800
speaking of being around forever

5674
03:32:46,800 --> 03:32:48,640
is all about injection

5675
03:32:48,640 --> 03:32:51,600
uh injection flaws that have been around

5676
03:32:51,600 --> 03:32:54,399
web apps for the past 20 plus years

5677
03:32:54,399 --> 03:32:57,520
were just ported over to apis so sql

5678
03:32:57,520 --> 03:32:59,600
injection is still around we also have

5679
03:32:59,600 --> 03:33:02,399
no sequel injection in the right uh

5680
03:33:02,399 --> 03:33:04,479
cases you could see cross-site scripting

5681
03:33:04,479 --> 03:33:06,800
where you're able to inject information

5682
03:33:06,800 --> 03:33:09,359
through the api into the web application

5683
03:33:09,359 --> 03:33:10,880
and then it's loaded with the web

5684
03:33:10,880 --> 03:33:13,680
browser and then executed also a system

5685
03:33:13,680 --> 03:33:15,040
command injection

5686
03:33:15,040 --> 03:33:17,279
uh the way we typically go after these

5687
03:33:17,279 --> 03:33:18,640
we're looking for

5688
03:33:18,640 --> 03:33:22,319
requests that allow user input and then

5689
03:33:22,319 --> 03:33:24,880
we're fuzzing the input that's allowed

5690
03:33:24,880 --> 03:33:26,560
to see

5691
03:33:26,560 --> 03:33:27,439
which

5692
03:33:27,439 --> 03:33:29,520
type of injection

5693
03:33:29,520 --> 03:33:32,000
is successful so if we send over a bunch

5694
03:33:32,000 --> 03:33:33,920
of sql injection attempts then we're

5695
03:33:33,920 --> 03:33:36,160
going to review the responses

5696
03:33:36,160 --> 03:33:38,720
to see if there's any indication

5697
03:33:38,720 --> 03:33:41,760
that a sql database is in use or there's

5698
03:33:41,760 --> 03:33:44,160
some sort of maybe delay in the response

5699
03:33:44,160 --> 03:33:46,319
if we're doing a blind sql attack and

5700
03:33:46,319 --> 03:33:48,160
then we'll we'll focus in the attack

5701
03:33:48,160 --> 03:33:50,319
more from there

5702
03:33:50,319 --> 03:33:53,760
so yeah seriously 20 years this has been

5703
03:33:53,760 --> 03:33:58,479
the bane of our existence sorry bad pun

5704
03:33:59,359 --> 03:34:02,319
we've tried so hard we tried when um web

5705
03:34:02,319 --> 03:34:04,720
apps first came out with all sorts of

5706
03:34:04,720 --> 03:34:07,200
ways we've tried to take care of this by

5707
03:34:07,200 --> 03:34:09,600
building perhaps libraries that devs can

5708
03:34:09,600 --> 03:34:11,439
cut and paste and it's still around

5709
03:34:11,439 --> 03:34:14,000
because nobody tends to those things but

5710
03:34:14,000 --> 03:34:16,080
for the first time in maybe 20 years

5711
03:34:16,080 --> 03:34:18,560
maybe we've got a chance right the cidc

5712
03:34:18,560 --> 03:34:20,960
pipeline can be instrumented and

5713
03:34:20,960 --> 03:34:23,680
automated in such a way that the devs

5714
03:34:23,680 --> 03:34:26,319
can run their own checks so the best way

5715
03:34:26,319 --> 03:34:28,239
to defend against this is to test early

5716
03:34:28,239 --> 03:34:31,439
test often create those tests and do it

5717
03:34:31,439 --> 03:34:34,399
during dev do it during test get it

5718
03:34:34,399 --> 03:34:37,279
before it makes into production automate

5719
03:34:37,279 --> 03:34:40,760
it if you can

5720
03:34:42,399 --> 03:34:45,680
api 9 is improper assets management

5721
03:34:45,680 --> 03:34:49,120
so uh with rest apis specifically

5722
03:34:49,120 --> 03:34:51,120
a lot of time versioning will be

5723
03:34:51,120 --> 03:34:54,080
included in the url so you'll see

5724
03:34:54,080 --> 03:34:56,160
targetname.com

5725
03:34:56,160 --> 03:34:59,439
api v1 v2 v3

5726
03:34:59,439 --> 03:35:01,840
uh this vulnerability is all about

5727
03:35:01,840 --> 03:35:05,200
unsupported versions of the api

5728
03:35:05,200 --> 03:35:08,560
in and of itself you're not gonna

5729
03:35:08,560 --> 03:35:11,920
be able to you know find out that

5730
03:35:11,920 --> 03:35:15,040
api one is still in use therefore

5731
03:35:15,040 --> 03:35:16,479
you've owned the whole

5732
03:35:16,479 --> 03:35:19,279
application but instead this is normally

5733
03:35:19,279 --> 03:35:21,279
an indication that

5734
03:35:21,279 --> 03:35:24,720
that version is not supported anymore

5735
03:35:24,720 --> 03:35:26,080
like an unsupported software

5736
03:35:26,080 --> 03:35:28,800
vulnerability so you have to find this

5737
03:35:28,800 --> 03:35:30,960
vulnerability which is often the gateway

5738
03:35:30,960 --> 03:35:32,800
to other vulnerabilities

5739
03:35:32,800 --> 03:35:35,439
if there is a test version or a uat

5740
03:35:35,439 --> 03:35:36,880
version that shouldn't be publicly

5741
03:35:36,880 --> 03:35:38,960
exposed then we're going to go back

5742
03:35:38,960 --> 03:35:41,680
through that version of the api and test

5743
03:35:41,680 --> 03:35:43,520
for the previous vulnerabilities we're

5744
03:35:43,520 --> 03:35:45,520
going to test those for ebola and baffle

5745
03:35:45,520 --> 03:35:46,880
and injection

5746
03:35:46,880 --> 03:35:48,000
we're also going to go through the

5747
03:35:48,000 --> 03:35:49,680
github repository to see you know is

5748
03:35:49,680 --> 03:35:51,760
there any public information available

5749
03:35:51,760 --> 03:35:54,720
about the current version of the api

5750
03:35:54,720 --> 03:35:56,000
maybe some of the issues that were

5751
03:35:56,000 --> 03:35:59,279
involved in the past version of api

5752
03:35:59,279 --> 03:36:02,160
with the great resignation

5753
03:36:02,160 --> 03:36:04,640
that's still going on and developers

5754
03:36:04,640 --> 03:36:06,399
switching careers and everything i think

5755
03:36:06,399 --> 03:36:08,399
this is one of the

5756
03:36:08,399 --> 03:36:11,120
vulnerabilities with apis that could be

5757
03:36:11,120 --> 03:36:14,880
overlooked and could be very important

5758
03:36:14,880 --> 03:36:16,479
for times to come

5759
03:36:16,479 --> 03:36:17,439
and

5760
03:36:17,439 --> 03:36:18,880
if you have that

5761
03:36:18,880 --> 03:36:20,479
developer that's

5762
03:36:20,479 --> 03:36:23,120
maybe responsible for an aspect of v1 or

5763
03:36:23,120 --> 03:36:25,840
v2 of the api and they're no longer with

5764
03:36:25,840 --> 03:36:28,000
the organization that's providing the

5765
03:36:28,000 --> 03:36:29,840
api then

5766
03:36:29,840 --> 03:36:31,680
the the rest of it could just move on

5767
03:36:31,680 --> 03:36:34,000
and progress and be updated while this

5768
03:36:34,000 --> 03:36:36,080
one version is no longer supported so

5769
03:36:36,080 --> 03:36:38,319
this is really important to make sure

5770
03:36:38,319 --> 03:36:40,080
that

5771
03:36:40,080 --> 03:36:43,760
the versioning is updated consistently

5772
03:36:43,760 --> 03:36:46,160
across the board and that previous

5773
03:36:46,160 --> 03:36:49,840
versions are no longer available

5774
03:36:49,920 --> 03:36:52,479
and really this is just asset management

5775
03:36:52,479 --> 03:36:54,319
all over again instead of instead of

5776
03:36:54,319 --> 03:36:56,319
your assets being servers that need to

5777
03:36:56,319 --> 03:36:58,560
be patched we're talking about apis

5778
03:36:58,560 --> 03:37:00,560
their versions and their endpoints right

5779
03:37:00,560 --> 03:37:02,399
so first thing you've got to document

5780
03:37:02,399 --> 03:37:04,720
your apis yes all of them i can't tell

5781
03:37:04,720 --> 03:37:06,160
you how many times corey and i have

5782
03:37:06,160 --> 03:37:09,040
talked to someone who doesn't have any

5783
03:37:09,040 --> 03:37:11,760
of their apis documented and and that's

5784
03:37:11,760 --> 03:37:14,239
that's just a recipe for disaster so

5785
03:37:14,239 --> 03:37:17,359
enumerate them katie paxton fear has an

5786
03:37:17,359 --> 03:37:19,279
awesome tutorial on how to use kite

5787
03:37:19,279 --> 03:37:22,080
runner it's a free tool that can go

5788
03:37:22,080 --> 03:37:25,279
through and enumerate your apis

5789
03:37:25,279 --> 03:37:26,560
check that out

5790
03:37:26,560 --> 03:37:28,479
implement robust change control and

5791
03:37:28,479 --> 03:37:30,399
asset management processes

5792
03:37:30,399 --> 03:37:33,200
again all of this can be automated right

5793
03:37:33,200 --> 03:37:35,120
in the ci cd pipeline this doesn't have

5794
03:37:35,120 --> 03:37:37,520
to be a burden on anybody you just have

5795
03:37:37,520 --> 03:37:39,600
to put the infrastructure and automation

5796
03:37:39,600 --> 03:37:42,000
in place

5797
03:37:42,640 --> 03:37:46,080
and just like any other os top 10 list

5798
03:37:46,080 --> 03:37:47,760
number 10 is insufficient logging and

5799
03:37:47,760 --> 03:37:49,520
monitoring without logging and

5800
03:37:49,520 --> 03:37:52,160
monitoring and alerting uh an attack can

5801
03:37:52,160 --> 03:37:55,040
run rap rampant and go unnoticed there

5802
03:37:55,040 --> 03:37:57,040
will be a little to no chance for

5803
03:37:57,040 --> 03:38:00,080
attribution and you won't know how they

5804
03:38:00,080 --> 03:38:03,040
compromise the api altogether

5805
03:38:03,040 --> 03:38:05,920
and seriously logging solves so many

5806
03:38:05,920 --> 03:38:07,600
problems it's second probably holding a

5807
03:38:07,600 --> 03:38:09,920
multi-factor you gotta do it you gotta

5808
03:38:09,920 --> 03:38:11,680
get your logs out there if you don't

5809
03:38:11,680 --> 03:38:13,600
start logging i'm just going to show up

5810
03:38:13,600 --> 03:38:15,600
at your place and actually make you walk

5811
03:38:15,600 --> 03:38:17,600
all over the legos using this

5812
03:38:17,600 --> 03:38:20,319
presentation barefoot no logging is easy

5813
03:38:20,319 --> 03:38:23,520
there's free tools just do it um and uh

5814
03:38:23,520 --> 03:38:25,120
and it'll solve well at least they'll

5815
03:38:25,120 --> 03:38:27,680
help defend against a lot of problems

5816
03:38:27,680 --> 03:38:29,680
um we've got about three minutes left

5817
03:38:29,680 --> 03:38:31,279
corey

5818
03:38:31,279 --> 03:38:34,080
oh okay cool uh so uh we can go ahead

5819
03:38:34,080 --> 03:38:36,560
and take uh questions i guess uh with uh

5820
03:38:36,560 --> 03:38:40,080
with the time we have um if uh

5821
03:38:40,080 --> 03:38:41,600
we skipped some stuff corey and i have

5822
03:38:41,600 --> 03:38:42,880
some other great suggestions but we

5823
03:38:42,880 --> 03:38:44,960
didn't have time here you can contact us

5824
03:38:44,960 --> 03:38:47,840
via our linkedin or uh twitter accounts

5825
03:38:47,840 --> 03:38:50,000
um and we'd be happy to do that we're

5826
03:38:50,000 --> 03:38:51,520
gonna make the deck available too aren't

5827
03:38:51,520 --> 03:38:54,080
we corey yeah that's right all right um

5828
03:38:54,080 --> 03:38:57,199
without any questions

5829
03:38:59,520 --> 03:39:02,000
well one uh excellent presentation

5830
03:39:02,000 --> 03:39:03,600
both of you and corey

5831
03:39:03,600 --> 03:39:06,080
rob appreciate that uh the different

5832
03:39:06,080 --> 03:39:07,600
perspectives you all were taken and

5833
03:39:07,600 --> 03:39:09,120
having that type of style to it was

5834
03:39:09,120 --> 03:39:11,279
really really um interesting and helpful

5835
03:39:11,279 --> 03:39:14,239
to get those that insight that way uh

5836
03:39:14,239 --> 03:39:16,319
especially for me that's fairly new to

5837
03:39:16,319 --> 03:39:17,600
some of the stuff that you're discussing

5838
03:39:17,600 --> 03:39:19,520
so cool yeah

5839
03:39:19,520 --> 03:39:21,840
um so far don't see any questions in the

5840
03:39:21,840 --> 03:39:24,160
chat just yet jesper just shared in the

5841
03:39:24,160 --> 03:39:26,720
chat saying great talk so

5842
03:39:26,720 --> 03:39:29,279
round of applause for you there um i did

5843
03:39:29,279 --> 03:39:31,840
like your your uh well lots of people

5844
03:39:31,840 --> 03:39:33,439
were calling out the references to final

5845
03:39:33,439 --> 03:39:35,790
fantasy the star wars

5846
03:39:35,790 --> 03:39:44,660
[Laughter]

5847
03:39:45,439 --> 03:39:47,359
yeah you know corey i really do i mean i

5848
03:39:47,359 --> 03:39:49,920
want to save time here uh you know for

5849
03:39:49,920 --> 03:39:51,520
questions about your actual presentation

5850
03:39:51,520 --> 03:39:52,800
but i'm super interested in the

5851
03:39:52,800 --> 03:39:54,319
background and your setup and stuff like

5852
03:39:54,319 --> 03:39:55,680
that so maybe i'll have to talk to you

5853
03:39:55,680 --> 03:39:58,479
offline uh and geek out over that stuff

5854
03:39:58,479 --> 03:39:59,840
but um

5855
03:39:59,840 --> 03:40:01,600
yeah so i guess

5856
03:40:01,600 --> 03:40:03,760
well one the question that kind of came

5857
03:40:03,760 --> 03:40:05,520
to mind for me at least and eric feel

5858
03:40:05,520 --> 03:40:07,040
free to pop in when you have a question

5859
03:40:07,040 --> 03:40:09,920
too um when you i think it was api eight

5860
03:40:09,920 --> 03:40:12,319
the injection one right and then rob

5861
03:40:12,319 --> 03:40:14,000
you're mentioning that it's like 20

5862
03:40:14,000 --> 03:40:17,199
years still do you i guess my question

5863
03:40:17,199 --> 03:40:18,960
to you is more of like a feeler kind of

5864
03:40:18,960 --> 03:40:20,640
thing do you feel that there's

5865
03:40:20,640 --> 03:40:22,960
ever going to be a a point in time where

5866
03:40:22,960 --> 03:40:24,640
it's not as prominent of an issue and

5867
03:40:24,640 --> 03:40:26,800
it's no longer this 20-year long 25

5868
03:40:26,800 --> 03:40:29,279
whatever it may be type of uh situation

5869
03:40:29,279 --> 03:40:31,040
that we're dealing with in this space

5870
03:40:31,040 --> 03:40:33,439
so to to yeah we'll never get rid of it

5871
03:40:33,439 --> 03:40:35,600
completely right but the the i think the

5872
03:40:35,600 --> 03:40:37,680
best way we can get there is to get

5873
03:40:37,680 --> 03:40:39,680
tools in the hands of the devs that

5874
03:40:39,680 --> 03:40:41,760
probably just built right into the build

5875
03:40:41,760 --> 03:40:43,520
right the build kicks off it

5876
03:40:43,520 --> 03:40:45,359
automatically calls a sequence that

5877
03:40:45,359 --> 03:40:48,800
tries to do some basic sql injection um

5878
03:40:48,800 --> 03:40:50,399
and check for all the low-hanging fruit

5879
03:40:50,399 --> 03:40:52,880
and then once they get the go-ahead

5880
03:40:52,880 --> 03:40:55,600
being able to just uh go to the next

5881
03:40:55,600 --> 03:40:59,040
step of their build in publication would

5882
03:40:59,040 --> 03:41:02,399
probably be the most efficient way to do

5883
03:41:02,399 --> 03:41:03,199
that

5884
03:41:03,199 --> 03:41:04,880
and that and take the time to teach the

5885
03:41:04,880 --> 03:41:06,640
devs like show them what a sql injection

5886
03:41:06,640 --> 03:41:08,880
looks like a lot of them have never seen

5887
03:41:08,880 --> 03:41:11,920
someone abuse their app with sql

5888
03:41:11,920 --> 03:41:13,279
injection right

5889
03:41:13,279 --> 03:41:15,040
yes you're preaching to the choir right

5890
03:41:15,040 --> 03:41:15,760
now

5891
03:41:15,760 --> 03:41:17,840
and past past roles that i've had the

5892
03:41:17,840 --> 03:41:19,600
our security team was very hesitant to

5893
03:41:19,600 --> 03:41:22,080
educate us as developers on like what it

5894
03:41:22,080 --> 03:41:23,359
is that we need to defend against and if

5895
03:41:23,359 --> 03:41:24,800
we don't see it how the heck can you

5896
03:41:24,800 --> 03:41:26,560
expect us to just blindly know what to

5897
03:41:26,560 --> 03:41:28,880
do so exactly security should be the

5898
03:41:28,880 --> 03:41:30,800
bridge here we need to take our devs out

5899
03:41:30,800 --> 03:41:33,199
for a couple of beers and uh and run

5900
03:41:33,199 --> 03:41:34,560
them through juice shop or something

5901
03:41:34,560 --> 03:41:36,640
like that and show them what happens for

5902
03:41:36,640 --> 03:41:39,040
sure eric anything to add from your end

5903
03:41:39,040 --> 03:41:40,880
no i was thinking about the injection

5904
03:41:40,880 --> 03:41:42,319
piece too and i was wondering maybe

5905
03:41:42,319 --> 03:41:43,760
there's something we can do around you

5906
03:41:43,760 --> 03:41:45,199
know what jonathan was talking about

5907
03:41:45,199 --> 03:41:48,319
with ci uh fuzz testing and have

5908
03:41:48,319 --> 03:41:50,640
automated injection you know are you are

5909
03:41:50,640 --> 03:41:52,319
you able to pass interpolation strings

5910
03:41:52,319 --> 03:41:53,760
in that you know to catch things like

5911
03:41:53,760 --> 03:41:56,000
what log4shell was doing and all that

5912
03:41:56,000 --> 03:41:57,600
kind of stuff a lot of stuff but you

5913
03:41:57,600 --> 03:41:59,359
know the one critical piece that i'm

5914
03:41:59,359 --> 03:42:00,720
gonna have to get with you offline rob

5915
03:42:00,720 --> 03:42:02,319
is how do you get your your dog to ride

5916
03:42:02,319 --> 03:42:04,560
a motorcycle

5917
03:42:04,560 --> 03:42:07,040
so i am quite an accomplished amateur

5918
03:42:07,040 --> 03:42:09,600
dog trainer i will be happy to step you

5919
03:42:09,600 --> 03:42:11,840
through that process it was it was a lot

5920
03:42:11,840 --> 03:42:13,920
of fun actually i had him riding in

5921
03:42:13,920 --> 03:42:16,239
about two weeks uh oh my god little

5922
03:42:16,239 --> 03:42:18,880
steps yeah that's amazing

5923
03:42:18,880 --> 03:42:20,720
fantastic fantastic well before i let

5924
03:42:20,720 --> 03:42:22,800
you go rob also i want to let you know

5925
03:42:22,800 --> 03:42:24,479
you can make me walk across legos all

5926
03:42:24,479 --> 03:42:26,880
day i am used to it i have kids so

5927
03:42:26,880 --> 03:42:29,279
that's nice

5928
03:42:29,279 --> 03:42:31,040
i'm sure eric you can attest to this oh

5929
03:42:31,040 --> 03:42:34,479
damn you're immune

5930
03:42:35,279 --> 03:42:38,000
corey rob thank you both so much really

5931
03:42:38,000 --> 03:42:39,760
excellent talk and uh hope to see you

5932
03:42:39,760 --> 03:42:42,000
around again sometime too awesome thank

5933
03:42:42,000 --> 03:42:43,359
you guys so much thanks for having us

5934
03:42:43,359 --> 03:42:44,720
it's been great

5935
03:42:44,720 --> 03:42:46,800
see you

5936
03:42:46,800 --> 03:42:48,560
all right let's jump right into the next

5937
03:42:48,560 --> 03:42:51,359
one see if we can get right back on time

5938
03:42:51,359 --> 03:42:53,040
a little bit here it's all my fault i

5939
03:42:53,040 --> 03:42:54,560
read the the run sheet wrong so i

5940
03:42:54,560 --> 03:42:56,720
apologize but without further ado who do

5941
03:42:56,720 --> 03:42:58,880
we have next eric you want to introduce

5942
03:42:58,880 --> 03:43:00,880
and i'm i am not going to ruin your last

5943
03:43:00,880 --> 03:43:03,120
name so i'll let you say it but uh he's

5944
03:43:03,120 --> 03:43:04,560
going to come talk to us about security

5945
03:43:04,560 --> 03:43:08,640
as code dev secop's approach um joseph's

5946
03:43:08,640 --> 03:43:11,760
with github security labs uh runs a

5947
03:43:11,760 --> 03:43:13,920
youtube series called security bytes

5948
03:43:13,920 --> 03:43:15,279
along with a bunch of other stuff that

5949
03:43:15,279 --> 03:43:17,199
i'll let him uh go over

5950
03:43:17,199 --> 03:43:18,319
all right

5951
03:43:18,319 --> 03:43:19,600
hey joseph hello everyone thanks for

5952
03:43:19,600 --> 03:43:21,920
having me

5953
03:43:22,160 --> 03:43:24,239
this session is gonna tie it very well

5954
03:43:24,239 --> 03:43:28,160
with what we're upset about a

5955
03:43:32,080 --> 03:43:34,720
hey i'm on the edge of my seat here oh

5956
03:43:34,720 --> 03:43:35,680
no

5957
03:43:35,680 --> 03:43:37,600
i think we lost them i thought it was me

5958
03:43:37,600 --> 03:43:38,800
at first

5959
03:43:38,800 --> 03:43:40,560
but then i saw you moving eric and i was

5960
03:43:40,560 --> 03:43:42,800
like okay it's not just me

5961
03:43:42,800 --> 03:43:45,520
well i guess we'll never find out

5962
03:43:45,520 --> 03:43:50,560
yeah this is uh the fun of live right so

5963
03:43:50,560 --> 03:43:52,640
the fun of live yeah so there you go

5964
03:43:52,640 --> 03:43:55,439
security as code um

5965
03:43:55,439 --> 03:43:58,319
you just disappear

5966
03:43:59,600 --> 03:44:01,279
all right let's see we'll see if we can

5967
03:44:01,279 --> 03:44:03,680
get joseph back

5968
03:44:03,680 --> 03:44:05,040
shortly here

5969
03:44:05,040 --> 03:44:07,040
but in the meantime while some

5970
03:44:07,040 --> 03:44:09,120
housekeeping uh we have a question on

5971
03:44:09,120 --> 03:44:11,199
youtube from alma corey's slide will be

5972
03:44:11,199 --> 03:44:13,439
shared yes rob and corey both mention

5973
03:44:13,439 --> 03:44:14,560
that they're going to be sharing it

5974
03:44:14,560 --> 03:44:16,399
probably on their twitters a reminder of

5975
03:44:16,399 --> 03:44:17,920
their twitter accounts

5976
03:44:17,920 --> 03:44:20,560
uh corey's at happy underscore hacker

5977
03:44:20,560 --> 03:44:23,199
that's h a p i underscore hacker on

5978
03:44:23,199 --> 03:44:26,880
twitter and rob is at mr underscore

5979
03:44:26,880 --> 03:44:27,960
minion

5980
03:44:27,960 --> 03:44:30,399
m-i-n-i-o-n so you can check out their

5981
03:44:30,399 --> 03:44:31,520
twitter accounts and i'm sure they'll

5982
03:44:31,520 --> 03:44:33,439
post it and share it over there

5983
03:44:33,439 --> 03:44:35,120
or the slides and i think most most

5984
03:44:35,120 --> 03:44:36,800
folks will and i guess that reminds me

5985
03:44:36,800 --> 03:44:38,239
as well these are all going to be these

5986
03:44:38,239 --> 03:44:39,920
are recorded not going to be recorded

5987
03:44:39,920 --> 03:44:42,479
they are recorded and they will be

5988
03:44:42,479 --> 03:44:45,120
edited up you can probably expect that

5989
03:44:45,120 --> 03:44:46,960
at the late latest towards the end of

5990
03:44:46,960 --> 03:44:48,239
the week and they'll be posted up on the

5991
03:44:48,239 --> 03:44:51,760
devsecond youtube account so be sure to

5992
03:44:51,760 --> 03:44:54,080
be subscribing over there devsec on

5993
03:44:54,080 --> 03:44:56,160
youtube to get all these sessions that

5994
03:44:56,160 --> 03:44:57,520
you can go back and reference and learn

5995
03:44:57,520 --> 03:44:59,760
more from them again all right i think

5996
03:44:59,760 --> 03:45:02,239
we have joseph back yes

5997
03:45:02,239 --> 03:45:05,199
yes we do hey how's it going again yeah

5998
03:45:05,199 --> 03:45:08,160
i'm here can you hear me yes yes you had

5999
03:45:08,160 --> 03:45:09,840
us on the edge of our seats joseph

6000
03:45:09,840 --> 03:45:11,279
you're like

6001
03:45:11,279 --> 03:45:13,040
you just left off at just right at the

6002
03:45:13,040 --> 03:45:14,720
opportune moment and i was like waiting

6003
03:45:14,720 --> 03:45:16,319
to hear what the answer was so i think

6004
03:45:16,319 --> 03:45:19,840
he might have froze not again

6005
03:45:21,359 --> 03:45:23,760
how does this keep happening

6006
03:45:23,760 --> 03:45:24,640
oh

6007
03:45:24,640 --> 03:45:26,399
the anticipation

6008
03:45:26,399 --> 03:45:29,439
is waiting for the buffer to

6009
03:45:29,439 --> 03:45:31,040
eric i think it's you

6010
03:45:31,040 --> 03:45:35,279
it's me oh well i guess i'll go no

6011
03:45:35,680 --> 03:45:40,840
don't you dare leave me i'm jinxing it

6012
03:45:40,880 --> 03:45:42,560
we'll see if we can get him uh i'm gonna

6013
03:45:42,560 --> 03:45:45,040
remove the frozen image of him like that

6014
03:45:45,040 --> 03:45:47,279
because it's always funny like for me

6015
03:45:47,279 --> 03:45:48,640
anytime that's happened to me it's like

6016
03:45:48,640 --> 03:45:50,319
always in the most awkward position i'll

6017
03:45:50,319 --> 03:45:51,279
be like

6018
03:45:51,279 --> 03:45:52,800
you know like and i'm just my face is

6019
03:45:52,800 --> 03:45:54,080
stuck like that and everybody gets to

6020
03:45:54,080 --> 03:45:55,040
just

6021
03:45:55,040 --> 03:45:56,960
laugh at my embarrassment

6022
03:45:56,960 --> 03:45:58,560
all right we've got you um there's a

6023
03:45:58,560 --> 03:46:00,960
charm joseph

6024
03:46:00,960 --> 03:46:03,120
as soon as we add him live it seems to

6025
03:46:03,120 --> 03:46:04,319
be freezing

6026
03:46:04,319 --> 03:46:05,120
yeah

6027
03:46:05,120 --> 03:46:08,239
that's weird

6028
03:46:08,239 --> 03:46:10,080
i'm gonna remove them again maybe

6029
03:46:10,080 --> 03:46:13,120
maybe it'll reset

6030
03:46:13,359 --> 03:46:14,319
wow

6031
03:46:14,319 --> 03:46:15,920
coming to you live

6032
03:46:15,920 --> 03:46:18,080
over the internet

6033
03:46:18,080 --> 03:46:21,080
uh

6034
03:46:22,800 --> 03:46:24,720
huh

6035
03:46:24,720 --> 03:46:27,439
all right we got him again okay let's go

6036
03:46:27,439 --> 03:46:28,479
okay

6037
03:46:28,479 --> 03:46:29,760
hi everybody

6038
03:46:29,760 --> 03:46:32,160
hey i'll try my screen now let's hope

6039
03:46:32,160 --> 03:46:34,800
everything's gonna be all right

6040
03:46:34,800 --> 03:46:36,640
don't see your screen just yet here it

6041
03:46:36,640 --> 03:46:37,680
comes all right

6042
03:46:37,680 --> 03:46:39,120
just go for it

6043
03:46:39,120 --> 03:46:40,880
run perspective okay welcome to my

6044
03:46:40,880 --> 03:46:42,399
session i'm jose from the github

6045
03:46:42,399 --> 03:46:44,000
security lab

6046
03:46:44,000 --> 03:46:45,600
um

6047
03:46:45,600 --> 03:46:47,359
thanks for the introduction indeed i

6048
03:46:47,359 --> 03:46:49,359
have my video series on youtube where i

6049
03:46:49,359 --> 03:46:51,439
try to educate developers on common

6050
03:46:51,439 --> 03:46:54,160
software backs on how to avoid them

6051
03:46:54,160 --> 03:46:56,800
this is because i see many people

6052
03:46:56,800 --> 03:46:57,760
like

6053
03:46:57,760 --> 03:47:00,160
on the security space trying to show how

6054
03:47:00,160 --> 03:47:02,720
they can benefit from bugs i try to show

6055
03:47:02,720 --> 03:47:05,359
common vulnerability patterns and how

6056
03:47:05,359 --> 03:47:07,760
this can be avoided

6057
03:47:07,760 --> 03:47:10,080
and this is part of the overall team

6058
03:47:10,080 --> 03:47:11,439
which is to

6059
03:47:11,439 --> 03:47:13,760
our mission is to secure the words

6060
03:47:13,760 --> 03:47:16,080
software that we all depend on which is

6061
03:47:16,080 --> 03:47:19,520
the open source so we try to inspire

6062
03:47:19,520 --> 03:47:21,439
the community to secure the open source

6063
03:47:21,439 --> 03:47:23,520
software and we do this through

6064
03:47:23,520 --> 03:47:24,800
different ways

6065
03:47:24,800 --> 03:47:27,199
uh one of them is through research

6066
03:47:27,199 --> 03:47:30,040
in the past 26 months we found

6067
03:47:30,040 --> 03:47:34,000
331 cvs by using something that i'm

6068
03:47:34,000 --> 03:47:36,239
going to show you now that ties really

6069
03:47:36,239 --> 03:47:38,160
well with what rob said in the previous

6070
03:47:38,160 --> 03:47:42,239
session on a way to integrate everything

6071
03:47:42,239 --> 03:47:44,319
into the build and try to avoid

6072
03:47:44,319 --> 03:47:47,279
injections and other attacks

6073
03:47:47,279 --> 03:47:49,680
let's start with a story

6074
03:47:49,680 --> 03:47:52,800
so 10 years ago when nasa sent curiosity

6075
03:47:52,800 --> 03:47:56,080
for the first time in mars

6076
03:47:56,080 --> 03:47:58,239
just before the rover opening the

6077
03:47:58,239 --> 03:48:00,720
parachute and start exploring mars

6078
03:48:00,720 --> 03:48:03,359
there was this idea from someone in the

6079
03:48:03,359 --> 03:48:06,560
team to code review for one last time

6080
03:48:06,560 --> 03:48:08,239
the code

6081
03:48:08,239 --> 03:48:10,800
for the parachute to open

6082
03:48:10,800 --> 03:48:12,960
and they notice a vulnerability so here

6083
03:48:12,960 --> 03:48:15,120
the vulnerability they spotted was that

6084
03:48:15,120 --> 03:48:17,279
in the signature of the function

6085
03:48:17,279 --> 03:48:19,279
there is an array that expects 12

6086
03:48:19,279 --> 03:48:22,000
elements but an array of three elements

6087
03:48:22,000 --> 03:48:24,399
is created in line seven

6088
03:48:24,399 --> 03:48:26,720
so this leads to random memory being

6089
03:48:26,720 --> 03:48:28,560
accessed in line two

6090
03:48:28,560 --> 03:48:30,319
which leads into random behavior and

6091
03:48:30,319 --> 03:48:33,199
potentially the crash of the rover

6092
03:48:33,199 --> 03:48:35,680
the smart thing that the nasa engineers

6093
03:48:35,680 --> 03:48:38,880
did was that they didn't just fix that

6094
03:48:38,880 --> 03:48:41,120
specific vulnerable instance of that

6095
03:48:41,120 --> 03:48:43,920
back but they wrote the generic query in

6096
03:48:43,920 --> 03:48:46,319
code ql which is the language i'm gonna

6097
03:48:46,319 --> 03:48:48,479
show you in our demo

6098
03:48:48,479 --> 03:48:50,960
to pick up instances what we call

6099
03:48:50,960 --> 03:48:53,920
variants of these vulnerabilities in

6100
03:48:53,920 --> 03:48:57,120
other places of the code

6101
03:48:57,120 --> 03:48:59,520
and when they run this query they found

6102
03:48:59,520 --> 03:49:02,000
30 other variants that they could lead

6103
03:49:02,000 --> 03:49:04,319
into the rover crashing into the surface

6104
03:49:04,319 --> 03:49:06,800
of mars

6105
03:49:06,800 --> 03:49:09,040
the smart thing that the nasa engineers

6106
03:49:09,040 --> 03:49:12,319
did a year ago was that

6107
03:49:12,319 --> 03:49:14,720
they shifted security left by

6108
03:49:14,720 --> 03:49:19,960
integrating cultural into the pipeline

6109
03:49:30,800 --> 03:49:33,760
team is using code ql and you can

6110
03:49:33,760 --> 03:49:35,760
benefit from this collective knowledge

6111
03:49:35,760 --> 03:49:38,640
that we've built over the years by just

6112
03:49:38,640 --> 03:49:40,880
turning code qr on which takes two or

6113
03:49:40,880 --> 03:49:43,279
three clicks and your open source repo

6114
03:49:43,279 --> 03:49:45,359
and if you are an enterprise you need to

6115
03:49:45,359 --> 03:49:48,560
purchase some licenses but today's

6116
03:49:48,560 --> 03:49:49,520
session

6117
03:49:49,520 --> 03:49:51,920
in this talk i aim to show you how you

6118
03:49:51,920 --> 03:49:54,720
can be an active user and how you can

6119
03:49:54,720 --> 03:49:56,000
use it

6120
03:49:56,000 --> 03:49:59,040
to tailor it in your code to tailor it

6121
03:49:59,040 --> 03:50:01,680
for your needs

6122
03:50:01,680 --> 03:50:03,680
this brings together

6123
03:50:03,680 --> 03:50:06,960
a security ascot which is a methodology

6124
03:50:06,960 --> 03:50:08,000
that

6125
03:50:08,000 --> 03:50:10,800
we got inspired for from the lessons

6126
03:50:10,800 --> 03:50:12,560
learned from devops and quality

6127
03:50:12,560 --> 03:50:14,479
assurance

6128
03:50:14,479 --> 03:50:17,120
devops was

6129
03:50:17,120 --> 03:50:18,960
was successful in our opinion because

6130
03:50:18,960 --> 03:50:22,960
historically developers didn't just

6131
03:50:22,960 --> 03:50:25,439
had to open tickets to infra teams they

6132
03:50:25,439 --> 03:50:27,600
had security in that they had infra in

6133
03:50:27,600 --> 03:50:30,840
their hands

6134
03:51:26,560 --> 03:51:29,279
looks like more technical difficulties

6135
03:51:29,279 --> 03:51:32,800
are plaguing us sorry folks

6136
03:51:32,800 --> 03:51:34,640
yeah let's give joseph just a couple

6137
03:51:34,640 --> 03:51:36,800
minutes to see if he

6138
03:51:36,800 --> 03:51:39,279
uh is able to reconnect and we'll go

6139
03:51:39,279 --> 03:51:41,439
from there

6140
03:51:41,439 --> 03:51:43,439
but uh yeah unfortunately we're getting

6141
03:51:43,439 --> 03:51:44,960
kind of plagued with some of these uh

6142
03:51:44,960 --> 03:51:47,840
technical difficulties today huh eric

6143
03:51:47,840 --> 03:51:49,760
it's i blame that internet thing it's

6144
03:51:49,760 --> 03:51:50,640
fad

6145
03:51:50,640 --> 03:51:53,120
oh man it's such a fad

6146
03:51:53,120 --> 03:51:55,279
all right joseph's back

6147
03:51:55,279 --> 03:51:57,439
i apologize for the connection i'm in a

6148
03:51:57,439 --> 03:52:00,160
hotel and we are developers berlin and

6149
03:52:00,160 --> 03:52:03,279
while it was reliable in green room now

6150
03:52:03,279 --> 03:52:04,800
it seems to

6151
03:52:04,800 --> 03:52:08,640
uh go away a bit so no worries

6152
03:52:08,640 --> 03:52:10,800
that i was just discussing with you

6153
03:52:10,800 --> 03:52:12,800
in under which security experts are

6154
03:52:12,800 --> 03:52:14,720
going to codify their knowledge and

6155
03:52:14,720 --> 03:52:16,319
provide it to developers in the

6156
03:52:16,319 --> 03:52:18,800
organization on their

6157
03:52:18,800 --> 03:52:21,359
executable readable form so that

6158
03:52:21,359 --> 03:52:24,000
developers can understand

6159
03:52:24,000 --> 03:52:26,800
what they are doing and can also

6160
03:52:26,800 --> 03:52:29,920
uh modify in order for security to be a

6161
03:52:29,920 --> 03:52:32,000
seamless observer of the day-to-day

6162
03:52:32,000 --> 03:52:35,600
devops instead of being a stopper so in

6163
03:52:35,600 --> 03:52:38,319
this way we expect developers

6164
03:52:38,319 --> 03:52:39,120
to

6165
03:52:39,120 --> 03:52:42,080
continue in their same speed and

6166
03:52:42,080 --> 03:52:44,800
security as code in gonna is gonna only

6167
03:52:44,800 --> 03:52:47,520
alert them when there are problems with

6168
03:52:47,520 --> 03:52:49,279
vulnerabilities

6169
03:52:49,279 --> 03:52:52,160
and in our demo we are gonna execute and

6170
03:52:52,160 --> 03:52:54,239
realize security as code by using

6171
03:52:54,239 --> 03:52:55,439
codetrail

6172
03:52:55,439 --> 03:52:58,720
which is a language under which someone

6173
03:52:58,720 --> 03:53:01,840
can query code as if it was data

6174
03:53:01,840 --> 03:53:04,720
by describing what we want to find

6175
03:53:04,720 --> 03:53:09,040
instead of how to find it code gel is

6176
03:53:09,040 --> 03:53:11,279
free for open source

6177
03:53:11,279 --> 03:53:14,080
and it supports languages right now such

6178
03:53:14,080 --> 03:53:16,479
as javascript java

6179
03:53:16,479 --> 03:53:21,120
go rust c c plus plus python

6180
03:53:21,120 --> 03:53:24,080
culture is declarative which means that

6181
03:53:24,080 --> 03:53:26,000
we are gonna we are going to describe

6182
03:53:26,000 --> 03:53:27,680
vulnerabilities

6183
03:53:27,680 --> 03:53:29,600
and is also logical

6184
03:53:29,600 --> 03:53:32,319
under which we can use operators like

6185
03:53:32,319 --> 03:53:34,319
and and or

6186
03:53:34,319 --> 03:53:35,600
to

6187
03:53:35,600 --> 03:53:37,120
form connections

6188
03:53:37,120 --> 03:53:38,640
so behind the scenes

6189
03:53:38,640 --> 03:53:41,040
uh the database the code base is

6190
03:53:41,040 --> 03:53:43,120
becoming a database a relational

6191
03:53:43,120 --> 03:53:45,279
database in the form of an abstract

6192
03:53:45,279 --> 03:53:47,680
syntax tree in order to find these

6193
03:53:47,680 --> 03:53:49,680
complex connections that can lead to

6194
03:53:49,680 --> 03:53:51,760
vulnerabilities

6195
03:53:51,760 --> 03:53:53,840
in our demo today we are gonna find an

6196
03:53:53,840 --> 03:53:56,160
sql injection that like rob said before

6197
03:53:56,160 --> 03:53:57,920
is a form of injection that exists for

6198
03:53:57,920 --> 03:53:59,600
20 years

6199
03:53:59,600 --> 03:54:03,040
um in the minimum screen for xkcd we can

6200
03:54:03,040 --> 03:54:05,520
see that there was no input sanitization

6201
03:54:05,520 --> 03:54:08,319
so behind the scenes the developer

6202
03:54:08,319 --> 03:54:11,199
was expecting the user to just provide a

6203
03:54:11,199 --> 03:54:13,359
student name like clear here but in

6204
03:54:13,359 --> 03:54:15,840
reality

6205
03:54:17,680 --> 03:54:20,479
students or creating an admin account

6206
03:54:20,479 --> 03:54:21,840
for a hacker

6207
03:54:21,840 --> 03:54:24,960
by just closing the quote and passing

6208
03:54:24,960 --> 03:54:28,160
another command through a semicolon

6209
03:54:28,160 --> 03:54:30,880
so the plan for today's demo is as

6210
03:54:30,880 --> 03:54:32,960
follows first of all we are gonna find

6211
03:54:32,960 --> 03:54:36,080
sources of vulnerabilities by describing

6212
03:54:36,080 --> 03:54:37,920
what we want to find

6213
03:54:37,920 --> 03:54:41,359
in the example from the xkcd the source

6214
03:54:41,359 --> 03:54:43,760
is where the student name is expected to

6215
03:54:43,760 --> 03:54:46,640
be going to the database

6216
03:54:46,640 --> 03:54:49,199
and sinks are places in the program

6217
03:54:49,199 --> 03:54:51,439
where the vulnerability is being

6218
03:54:51,439 --> 03:54:54,080
executed

6219
03:54:54,080 --> 03:54:56,800
the vulnerability only exists if there

6220
03:54:56,800 --> 03:55:00,000
is data flow from sources to things

6221
03:55:00,000 --> 03:55:02,080
otherwise if there's no data flow you

6222
03:55:02,080 --> 03:55:05,279
have an unexploitable flow

6223
03:55:05,279 --> 03:55:06,800
and we are going to do this through code

6224
03:55:06,800 --> 03:55:11,120
12 so i'm gonna switch to my demo now

6225
03:55:11,120 --> 03:55:13,040
where you can see first of all the

6226
03:55:13,040 --> 03:55:15,520
vulnerable the intentionally vulnerable

6227
03:55:15,520 --> 03:55:18,640
code base from the wasp

6228
03:55:18,640 --> 03:55:21,520
security shepherd in line 98 we have our

6229
03:55:21,520 --> 03:55:23,760
source which is a place in the program

6230
03:55:23,760 --> 03:55:25,840
where a username is being passed into

6231
03:55:25,840 --> 03:55:27,760
this vulnerable application think about

6232
03:55:27,760 --> 03:55:29,920
the normal android app where there's a

6233
03:55:29,920 --> 03:55:34,680
username and a password being asked

6234
03:56:08,479 --> 03:56:10,399
i think we might have lost joseph again

6235
03:56:10,399 --> 03:56:12,239
unfortunately the internet connection

6236
03:56:12,239 --> 03:56:14,399
where he's at is just not

6237
03:56:14,399 --> 03:56:17,199
proven to be stable and sustainable

6238
03:56:17,199 --> 03:56:18,720
right now i like the way lacy put it in

6239
03:56:18,720 --> 03:56:21,920
the chat we call them demo gremlins

6240
03:56:21,920 --> 03:56:23,600
what do you think about that eric i like

6241
03:56:23,600 --> 03:56:25,279
that

6242
03:56:25,279 --> 03:56:27,199
you're muted but hold on

6243
03:56:27,199 --> 03:56:30,160
i can't unmute you

6244
03:56:30,880 --> 03:56:32,239
i have other words for it that i can't

6245
03:56:32,239 --> 03:56:35,439
say on a family show but yeah

6246
03:56:35,520 --> 03:56:37,040
demo gremlins that's a good way to put

6247
03:56:37,040 --> 03:56:39,120
it so brian you're more familiar with

6248
03:56:39,120 --> 03:56:41,600
the platform than i am would it since we

6249
03:56:41,600 --> 03:56:44,319
have limited uh wi-fi where where

6250
03:56:44,319 --> 03:56:45,600
he is

6251
03:56:45,600 --> 03:56:47,439
can we do voice only with screen share

6252
03:56:47,439 --> 03:56:49,600
without the video would that maybe help

6253
03:56:49,600 --> 03:56:52,479
uh i don't yeah we could try that we

6254
03:56:52,479 --> 03:56:54,239
could give that a shot uh joseph i see

6255
03:56:54,239 --> 03:56:55,920
you're back be sure not to share the

6256
03:56:55,920 --> 03:56:57,840
stream yard uh

6257
03:56:57,840 --> 03:56:59,199
the link there that's on your screen

6258
03:56:59,199 --> 03:57:01,520
right now before we add you on there but

6259
03:57:01,520 --> 03:57:03,680
we can see you

6260
03:57:03,680 --> 03:57:04,880
okay

6261
03:57:04,880 --> 03:57:06,800
and then i'll add you back in here okay

6262
03:57:06,800 --> 03:57:08,479
let's try it that way now all right i

6263
03:57:08,479 --> 03:57:10,880
turned my camera off as well so i was

6264
03:57:10,880 --> 03:57:14,160
saying that here i imported java

6265
03:57:14,160 --> 03:57:16,080
standard library in order to benefit

6266
03:57:16,080 --> 03:57:18,239
from code reusability

6267
03:57:18,239 --> 03:57:20,479
uh the source of the vulnerability

6268
03:57:20,479 --> 03:57:21,760
is here

6269
03:57:21,760 --> 03:57:24,000
so it's where there are some trusted

6270
03:57:24,000 --> 03:57:26,880
user input getting into the database

6271
03:57:26,880 --> 03:57:29,680
and by this i want to access all methods

6272
03:57:29,680 --> 03:57:31,760
in the program first and then i want to

6273
03:57:31,760 --> 03:57:35,120
arrive in those methods that are

6274
03:57:35,120 --> 03:57:38,000
receiving untrusted user input

6275
03:57:38,000 --> 03:57:38,720
so

6276
03:57:38,720 --> 03:57:40,399
i'm not going to use the vr cloud at the

6277
03:57:40,399 --> 03:57:43,199
moment i'm just going to use

6278
03:57:43,199 --> 03:57:46,000
a from and the select so by this query

6279
03:57:46,000 --> 03:57:48,720
which looks like sql for now

6280
03:57:48,720 --> 03:57:51,279
i'm expecting in my screen to have all

6281
03:57:51,279 --> 03:57:53,199
the methods being accessed in the

6282
03:57:53,199 --> 03:57:54,479
program

6283
03:57:54,479 --> 03:57:56,800
so far so good but that's not so helpful

6284
03:57:56,800 --> 03:57:59,600
because i want to find those that are

6285
03:57:59,600 --> 03:58:02,160
the pain points

6286
03:58:02,160 --> 03:58:04,239
if you thread model you want to go to

6287
03:58:04,239 --> 03:58:06,399
those methods that are receiving

6288
03:58:06,399 --> 03:58:08,479
untrusted user input

6289
03:58:08,479 --> 03:58:11,199
and for this purpose i wanna reduce down

6290
03:58:11,199 --> 03:58:14,800
my results into just those that are

6291
03:58:14,800 --> 03:58:16,640
receiving untrusted user inputs

6292
03:58:16,640 --> 03:58:19,199
specifically the get text method

6293
03:58:19,199 --> 03:58:20,479
so here

6294
03:58:20,479 --> 03:58:24,560
if i come and i reduce it further

6295
03:58:24,560 --> 03:58:26,239
i will not be very specific with

6296
03:58:26,239 --> 03:58:29,040
codetrail

6297
03:58:29,040 --> 03:58:31,040
past qualified name

6298
03:58:31,040 --> 03:58:34,880
and i want to describe

6299
03:58:35,520 --> 03:58:38,000
those methods in the program

6300
03:58:38,000 --> 03:58:41,199
that are receiving untrusted user input

6301
03:58:41,199 --> 03:58:44,399
so this way we model the source of the

6302
03:58:44,399 --> 03:58:47,358
vulnerability

6303
03:58:50,560 --> 03:58:52,560
and if we run this query we expect to

6304
03:58:52,560 --> 03:58:54,239
have those methods that are receiving

6305
03:58:54,239 --> 03:58:56,640
untrusted user input we don't know yet

6306
03:58:56,640 --> 03:58:58,960
if they are vulnerable we are gonna find

6307
03:58:58,960 --> 03:59:00,319
later

6308
03:59:00,319 --> 03:59:03,279
now let's go back to the vulnerable

6309
03:59:03,279 --> 03:59:05,600
code

6310
03:59:06,080 --> 03:59:08,640
we need the sink of the vulnerability

6311
03:59:08,640 --> 03:59:10,720
which is a place in the program where

6312
03:59:10,720 --> 03:59:14,160
the malicious query is being executed

6313
03:59:14,160 --> 03:59:17,040
which is the raw query method but if we

6314
03:59:17,040 --> 03:59:19,279
want to be more specific to avoid false

6315
03:59:19,279 --> 03:59:20,640
positives

6316
03:59:20,640 --> 03:59:23,439
that is a main and the pressing pane for

6317
03:59:23,439 --> 03:59:26,880
security teams we want to find the first

6318
03:59:26,880 --> 03:59:28,160
argument

6319
03:59:28,160 --> 03:59:30,080
if the in the raw query method if that

6320
03:59:30,080 --> 03:59:32,640
first argument is being set

6321
03:59:32,640 --> 03:59:34,720
we know that we have

6322
03:59:34,720 --> 03:59:35,840
a sync

6323
03:59:35,840 --> 03:59:37,920
first of all i want to find all the

6324
03:59:37,920 --> 03:59:40,160
occurrences of the raw query method

6325
03:59:40,160 --> 03:59:42,319
which is here

6326
03:59:42,319 --> 03:59:46,000
but i want to find as i said just

6327
03:59:46,000 --> 03:59:48,479
if the first argument is being set

6328
03:59:48,479 --> 03:59:51,600
so i'm defining another variable and i'm

6329
03:59:51,600 --> 03:59:53,760
gonna

6330
03:59:53,760 --> 03:59:57,520
use a logical equal here to say

6331
03:59:57,520 --> 04:00:00,880
that i'm only interested in the first

6332
04:00:00,880 --> 04:00:03,680
argument of the raw query method if that

6333
04:00:03,680 --> 04:00:05,840
first argument in the row query method

6334
04:00:05,840 --> 04:00:07,199
is being set

6335
04:00:07,199 --> 04:00:09,199
i know that i have things of

6336
04:00:09,199 --> 04:00:10,800
vulnerabilities

6337
04:00:10,800 --> 04:00:14,319
so so far we found sources and sinks

6338
04:00:14,319 --> 04:00:17,040
what is missing as discussed in the plan

6339
04:00:17,040 --> 04:00:19,199
was the data flow

6340
04:00:19,199 --> 04:00:21,840
if there is flow between a source and

6341
04:00:21,840 --> 04:00:25,040
the sync we have confirmed sql injection

6342
04:00:25,040 --> 04:00:26,560
findings

6343
04:00:26,560 --> 04:00:29,199
i didn't write this code here this is a

6344
04:00:29,199 --> 04:00:30,880
ready-made template

6345
04:00:30,880 --> 04:00:33,199
maybe the nasa team wrote this maybe my

6346
04:00:33,199 --> 04:00:35,520
team wrote this what is important for

6347
04:00:35,520 --> 04:00:37,439
you is that you can do the same you can

6348
04:00:37,439 --> 04:00:40,399
benefit from templates and you can start

6349
04:00:40,399 --> 04:00:41,520
from

6350
04:00:41,520 --> 04:00:43,600
a point where you are using the

6351
04:00:43,600 --> 04:00:46,160
collective knowledge that we've built

6352
04:00:46,160 --> 04:00:48,319
over the past 10 years to model for

6353
04:00:48,319 --> 04:00:50,880
vulnerabilities so if i explain the code

6354
04:00:50,880 --> 04:00:51,840
here

6355
04:00:51,840 --> 04:00:53,920
at the top we have some metadata that

6356
04:00:53,920 --> 04:00:56,000
are going to help us in the modeling of

6357
04:00:56,000 --> 04:00:58,800
the sql injection vulnerability

6358
04:00:58,800 --> 04:01:00,800
here we are importing some libraries

6359
04:01:00,800 --> 04:01:02,800
that are going to help us with following

6360
04:01:02,800 --> 04:01:04,880
taint around the code

6361
04:01:04,880 --> 04:01:07,600
to see if the untrusted data flow passes

6362
04:01:07,600 --> 04:01:10,160
from specific points

6363
04:01:10,160 --> 04:01:12,720
and here we can see the class

6364
04:01:12,720 --> 04:01:13,760
keyword

6365
04:01:13,760 --> 04:01:15,760
and the extents which shows the real

6366
04:01:15,760 --> 04:01:17,520
power of code 12 which is an

6367
04:01:17,520 --> 04:01:20,520
object-oriented

6368
04:01:43,600 --> 04:01:46,800
here predicates are reusable functions

6369
04:01:46,800 --> 04:01:49,359
and are overridden in the template we

6370
04:01:49,359 --> 04:01:52,399
are going to use the code from before

6371
04:01:52,399 --> 04:01:53,439
here

6372
04:01:53,439 --> 04:01:56,399
we want to say to codeql that there

6373
04:01:56,399 --> 04:01:58,239
exists and i'm going to introduce

6374
04:01:58,239 --> 04:02:00,880
another keyword now this exists

6375
04:02:00,880 --> 04:02:04,000
there exists a method access we can call

6376
04:02:04,000 --> 04:02:05,520
it call

6377
04:02:05,520 --> 04:02:06,640
such that

6378
04:02:06,640 --> 04:02:09,840
when this method access

6379
04:02:09,840 --> 04:02:11,199
is

6380
04:02:11,199 --> 04:02:12,720
they get the method

6381
04:02:12,720 --> 04:02:15,359
we want to model a node

6382
04:02:15,359 --> 04:02:18,960
that this node which is an expression

6383
04:02:18,960 --> 04:02:20,880
is the source node

6384
04:02:20,880 --> 04:02:23,040
and when there's flow from the source

6385
04:02:23,040 --> 04:02:25,680
node to the sync node that we can model

6386
04:02:25,680 --> 04:02:27,359
in here as well

6387
04:02:27,359 --> 04:02:28,960
we can't say that

6388
04:02:28,960 --> 04:02:32,640
there's another method being accessed

6389
04:02:32,640 --> 04:02:33,680
call

6390
04:02:33,680 --> 04:02:36,000
this specific method is the raw query

6391
04:02:36,000 --> 04:02:37,439
method

6392
04:02:37,439 --> 04:02:40,000
and when the first argument is being set

6393
04:02:40,000 --> 04:02:41,199
we know

6394
04:02:41,199 --> 04:02:42,880
that there are some sql injection

6395
04:02:42,880 --> 04:02:45,040
vulnerability happening so

6396
04:02:45,040 --> 04:02:47,520
the true power of code to l is gonna be

6397
04:02:47,520 --> 04:02:49,520
shown when i run

6398
04:02:49,520 --> 04:02:52,479
this square here

6399
04:02:52,479 --> 04:02:55,199
if i run this i expect to come up

6400
04:02:55,199 --> 04:02:57,680
with confirmed findings

6401
04:02:57,680 --> 04:03:00,319
so as we can see on the right we have

6402
04:03:00,319 --> 04:03:03,199
two confirmed sql injection findings

6403
04:03:03,199 --> 04:03:05,840
first of all the first path is from the

6404
04:03:05,840 --> 04:03:09,040
get text method on the left

6405
04:03:09,040 --> 04:03:11,840
it then flows to the username that is

6406
04:03:11,840 --> 04:03:14,080
being checked on whether the username

6407
04:03:14,080 --> 04:03:17,520
exists in the database through the login

6408
04:03:17,520 --> 04:03:20,560
method here which is finally passed in

6409
04:03:20,560 --> 04:03:22,319
the query

6410
04:03:22,319 --> 04:03:23,840
but there's another path in the same

6411
04:03:23,840 --> 04:03:26,880
vulnerability which happens when this

6412
04:03:26,880 --> 04:03:28,800
same username

6413
04:03:28,800 --> 04:03:31,040
is checked from being false so i want

6414
04:03:31,040 --> 04:03:33,840
you to compare lines 102

6415
04:03:33,840 --> 04:03:35,000
and lines

6416
04:03:35,000 --> 04:03:36,720
116.

6417
04:03:36,720 --> 04:03:37,600
so

6418
04:03:37,600 --> 04:03:39,439
in my experience and in my team's

6419
04:03:39,439 --> 04:03:41,359
experience when

6420
04:03:41,359 --> 04:03:44,000
security professionals or people who do

6421
04:03:44,000 --> 04:03:45,680
code review

6422
04:03:45,680 --> 04:03:48,239
like developers are trying to find sql

6423
04:03:48,239 --> 04:03:50,000
injections or in general attractive

6424
04:03:50,000 --> 04:03:52,640
fixed vulnerabilities they often fail to

6425
04:03:52,640 --> 04:03:54,479
see every path

6426
04:03:54,479 --> 04:03:55,680
that

6427
04:03:55,680 --> 04:03:59,120
ml issues user input is passing by

6428
04:03:59,120 --> 04:04:01,680
and in this way we can find confirmed

6429
04:04:01,680 --> 04:04:04,479
findings of where untrusted user input

6430
04:04:04,479 --> 04:04:06,640
like the password here in another

6431
04:04:06,640 --> 04:04:08,560
instance of the vulnerabilities being

6432
04:04:08,560 --> 04:04:09,520
checked

6433
04:04:09,520 --> 04:04:11,920
for an authenticated user

6434
04:04:11,920 --> 04:04:14,080
being passed in the login method

6435
04:04:14,080 --> 04:04:16,479
before it's being executed and then you

6436
04:04:16,479 --> 04:04:19,279
have the same for the password

6437
04:04:19,279 --> 04:04:23,279
so um to summarize here because i was

6438
04:04:23,279 --> 04:04:25,199
being uh cut before

6439
04:04:25,199 --> 04:04:28,239
with code ql you can describe

6440
04:04:28,239 --> 04:04:30,560
what you want to find like for example i

6441
04:04:30,560 --> 04:04:32,880
described the pain point in my code

6442
04:04:32,880 --> 04:04:35,279
which is where untrusted user input gets

6443
04:04:35,279 --> 04:04:36,080
in

6444
04:04:36,080 --> 04:04:38,640
then i described where this input is

6445
04:04:38,640 --> 04:04:40,399
being executed

6446
04:04:40,399 --> 04:04:42,000
if ever

6447
04:04:42,000 --> 04:04:43,680
and this was the thing of the

6448
04:04:43,680 --> 04:04:46,720
vulnerability and i connected the two by

6449
04:04:46,720 --> 04:04:49,199
using a template which allows me to

6450
04:04:49,199 --> 04:04:52,160
write faster be more productive and in

6451
04:04:52,160 --> 04:04:54,560
general build on top of the collective

6452
04:04:54,560 --> 04:04:57,120
knowledge that

6453
04:04:57,120 --> 04:05:00,399
people in the past have used to build

6454
04:05:00,399 --> 04:05:02,720
with code 12.

6455
04:05:02,720 --> 04:05:05,439
so um

6456
04:05:05,439 --> 04:05:07,120
if you want to start your journey with

6457
04:05:07,120 --> 04:05:09,600
codeql like i said before it's free for

6458
04:05:09,600 --> 04:05:11,040
open source

6459
04:05:11,040 --> 04:05:14,000
and you can learn more by using the urls

6460
04:05:14,000 --> 04:05:15,520
here

6461
04:05:15,520 --> 04:05:16,960
and finally

6462
04:05:16,960 --> 04:05:19,439
my team has introduced what we call

6463
04:05:19,439 --> 04:05:22,479
community office hours where open source

6464
04:05:22,479 --> 04:05:24,800
maintainers can come to us and they can

6465
04:05:24,800 --> 04:05:27,279
discuss some of their security problems

6466
04:05:27,279 --> 04:05:29,439
or their security interface they often

6467
04:05:29,439 --> 04:05:31,520
come to us and they don't know what they

6468
04:05:31,520 --> 04:05:32,560
don't know

6469
04:05:32,560 --> 04:05:35,439
but through our conversation

6470
04:05:35,439 --> 04:05:37,520
we've seen people

6471
04:05:37,520 --> 04:05:40,160
in the open source world

6472
04:05:40,160 --> 04:05:43,439
maturing and improving their security

6473
04:05:43,439 --> 04:05:44,560
posture

6474
04:05:44,560 --> 04:05:46,080
so thanks for your time today i

6475
04:05:46,080 --> 04:05:48,319
apologize again for my connection um in

6476
04:05:48,319 --> 04:05:49,520
a hotel

6477
04:05:49,520 --> 04:05:50,800
in berlin

6478
04:05:50,800 --> 04:05:53,199
everything in testing was working

6479
04:05:53,199 --> 04:05:54,479
correctly

6480
04:05:54,479 --> 04:05:57,600
but the demos the demons of demons where

6481
04:05:57,600 --> 04:05:59,040
we asked there

6482
04:05:59,040 --> 04:06:01,279
um thanks for attending my session

6483
04:06:01,279 --> 04:06:03,439
thanks devsencon for having me if you

6484
04:06:03,439 --> 04:06:05,359
have more questions you can connect with

6485
04:06:05,359 --> 04:06:08,880
me at jk cso or follow my team at gh

6486
04:06:08,880 --> 04:06:11,359
security lab where we publish our

6487
04:06:11,359 --> 04:06:14,239
vulnerability research we publish free

6488
04:06:14,239 --> 04:06:17,279
slots for our community office hours and

6489
04:06:17,279 --> 04:06:20,960
we are also publish our educational

6490
04:06:20,960 --> 04:06:22,319
content

6491
04:06:22,319 --> 04:06:24,160
in order for you to learn more about

6492
04:06:24,160 --> 04:06:27,600
security and improve your

6493
04:06:27,600 --> 04:06:28,960
um

6494
04:06:28,960 --> 04:06:31,439
your code security so that we all avoid

6495
04:06:31,439 --> 04:06:33,680
vulnerabilities and we serve our mission

6496
04:06:33,680 --> 04:06:35,840
to secure the open source software that

6497
04:06:35,840 --> 04:06:38,800
we all depend on

6498
04:06:40,800 --> 04:06:42,479
no worries no worries don't don't feel

6499
04:06:42,479 --> 04:06:44,080
bad about the internet connectivity

6500
04:06:44,080 --> 04:06:46,479
issues these things happen man so i'm

6501
04:06:46,479 --> 04:06:47,920
sorry that it uh impacted the

6502
04:06:47,920 --> 04:06:49,600
presentation quite a bit

6503
04:06:49,600 --> 04:06:52,080
for you but uh glad we were able to get

6504
04:06:52,080 --> 04:06:54,800
get you through it

6505
04:06:54,800 --> 04:06:57,120
thanks so much i apologize again and i'm

6506
04:06:57,120 --> 04:06:58,960
more than happy to like summarize now

6507
04:06:58,960 --> 04:07:00,560
that the connection is more stay up

6508
04:07:00,560 --> 04:07:03,120
stable with my camera being off so in

6509
04:07:03,120 --> 04:07:05,600
this session everyone

6510
04:07:05,600 --> 04:07:07,920
we've seen how security teams like the

6511
04:07:07,920 --> 04:07:10,080
one of nasa have used what i've demod

6512
04:07:10,080 --> 04:07:12,720
which is called ql in order to secure

6513
04:07:12,720 --> 04:07:14,479
their code in two different decades in

6514
04:07:14,479 --> 04:07:16,160
two different eras of software

6515
04:07:16,160 --> 04:07:17,359
engineering

6516
04:07:17,359 --> 04:07:20,399
so in the past they've used it to pick

6517
04:07:20,399 --> 04:07:22,880
up specific problems very late in their

6518
04:07:22,880 --> 04:07:24,000
production

6519
04:07:24,000 --> 04:07:27,359
when their rover was just about to land

6520
04:07:27,359 --> 04:07:29,520
in the surface of mars and they had

6521
04:07:29,520 --> 04:07:30,960
their parachute

6522
04:07:30,960 --> 04:07:33,439
being unable to open but a year ago with

6523
04:07:33,439 --> 04:07:35,439
another over ingenuity they did

6524
04:07:35,439 --> 04:07:39,279
everything their way that we expect

6525
04:07:39,279 --> 04:07:42,720
teams to work nowadays devsecops

6526
04:07:42,720 --> 04:07:46,080
by using code2l in their pipelines

6527
04:07:46,080 --> 04:07:48,080
so through this example i then

6528
04:07:48,080 --> 04:07:50,239
introduced security as code which is a

6529
04:07:50,239 --> 04:07:52,479
methodology under which we expect

6530
04:07:52,479 --> 04:07:54,720
security professionals to qualify their

6531
04:07:54,720 --> 04:07:57,920
security knowledge so that developers

6532
04:07:57,920 --> 04:07:59,120
can read

6533
04:07:59,120 --> 04:08:00,560
understand

6534
04:08:00,560 --> 04:08:02,960
change it and in general benefit from

6535
04:08:02,960 --> 04:08:05,040
security culture where everyone is

6536
04:08:05,040 --> 04:08:07,199
aligned everybody's in this is on the

6537
04:08:07,199 --> 04:08:08,479
same line

6538
04:08:08,479 --> 04:08:11,920
then in the demo i've shown you how i

6539
04:08:11,920 --> 04:08:15,279
could model a query to pick up an sql

6540
04:08:15,279 --> 04:08:17,279
injection vulnerability

6541
04:08:17,279 --> 04:08:19,840
in all wasp securities effort

6542
04:08:19,840 --> 04:08:23,279
what i've done was to find sources by

6543
04:08:23,279 --> 04:08:25,840
describing how untrusted user input

6544
04:08:25,840 --> 04:08:29,439
looks then i've described things which i

6545
04:08:29,439 --> 04:08:32,880
described how a query being executed

6546
04:08:32,880 --> 04:08:35,680
looks in my code base it could be a

6547
04:08:35,680 --> 04:08:38,560
private code base it could be an open

6548
04:08:38,560 --> 04:08:41,199
source code base and then of model data

6549
04:08:41,199 --> 04:08:42,080
flow

6550
04:08:42,080 --> 04:08:44,880
if the untrusted user input essentially

6551
04:08:44,880 --> 04:08:47,040
ever flows to the point that is being

6552
04:08:47,040 --> 04:08:51,199
executed and by that code2l gave me all

6553
04:08:51,199 --> 04:08:54,319
the potential ways that the untrusted

6554
04:08:54,319 --> 04:08:56,720
user input could end up

6555
04:08:56,720 --> 04:09:00,560
into the sync ieee to being executed

6556
04:09:00,560 --> 04:09:03,279
while my demo was a bit basic with the

6557
04:09:03,279 --> 04:09:05,920
flow being in four places

6558
04:09:05,920 --> 04:09:09,040
real code enterprise code could have

6559
04:09:09,040 --> 04:09:12,239
dozens of areas where untrusted user

6560
04:09:12,239 --> 04:09:15,439
input flows from and to which makes

6561
04:09:15,439 --> 04:09:17,600
environment um

6562
04:09:17,600 --> 04:09:20,720
which makes hunting way more complicated

6563
04:09:20,720 --> 04:09:22,319
in this environment

6564
04:09:22,319 --> 04:09:25,720
and with code ql we've seen that

6565
04:09:25,720 --> 04:09:28,800
vulnerabilities that are considered for

6566
04:09:28,800 --> 04:09:30,399
false positives are indeed

6567
04:09:30,399 --> 04:09:32,000
vulnerabilities

6568
04:09:32,000 --> 04:09:35,120
so um some faqs i'm receiving a lot

6569
04:09:35,120 --> 04:09:36,880
since i have two more minutes here is

6570
04:09:36,880 --> 04:09:39,520
that oh so that's a sus tool yes indeed

6571
04:09:39,520 --> 04:09:40,960
it's a sas tool

6572
04:09:40,960 --> 04:09:43,920
it doesn't have the capability of dust

6573
04:09:43,920 --> 04:09:45,760
it doesn't run your code

6574
04:09:45,760 --> 04:09:47,520
it um

6575
04:09:47,520 --> 04:09:50,159
it builds an abstract syntax tree that

6576
04:09:50,159 --> 04:09:53,520
you are more than capable of exploring

6577
04:09:53,520 --> 04:09:55,760
every time you commit your code

6578
04:09:55,760 --> 04:09:58,640
and tries to find vulnerabilities

6579
04:09:58,640 --> 04:10:00,239
but you are benefiting from this

6580
04:10:00,239 --> 04:10:02,080
collective knowledge that we've built

6581
04:10:02,080 --> 04:10:04,159
over the past 10 years when nasa's

6582
04:10:04,159 --> 04:10:06,399
engineers build queries to secure their

6583
04:10:06,399 --> 04:10:08,720
code you are benefiting from them when

6584
04:10:08,720 --> 04:10:11,439
my team with the 331

6585
04:10:11,439 --> 04:10:14,000
cvs in the past 26 months

6586
04:10:14,000 --> 04:10:18,080
is writing um queries when back hunters

6587
04:10:18,080 --> 04:10:19,840
in our community

6588
04:10:19,840 --> 04:10:22,399
uh in which we are trying to bridge the

6589
04:10:22,399 --> 04:10:24,239
gap between security researchers and

6590
04:10:24,239 --> 04:10:26,880
developers are committing queries that

6591
04:10:26,880 --> 04:10:29,359
end up in our code base

6592
04:10:29,359 --> 04:10:31,359
you are benefiting from those queries

6593
04:10:31,359 --> 04:10:33,840
you are more than welcome to go to your

6594
04:10:33,840 --> 04:10:37,439
security tab in your github project and

6595
04:10:37,439 --> 04:10:40,080
click on security code scanning enable

6596
04:10:40,080 --> 04:10:42,159
codeql it's gonna take you two clicks

6597
04:10:42,159 --> 04:10:43,840
and you are gonna be a passive user

6598
04:10:43,840 --> 04:10:47,199
today's demo though was on how you can

6599
04:10:47,199 --> 04:10:50,000
be an active user on how you can be a

6600
04:10:50,000 --> 04:10:52,640
bit more tailored based on your specific

6601
04:10:52,640 --> 04:10:55,600
code and how you can build on top of all

6602
04:10:55,600 --> 04:10:58,399
these pre-existing queries to pick up

6603
04:10:58,399 --> 04:11:00,479
things that are specific you can be

6604
04:11:00,479 --> 04:11:02,960
generic by using keywords like any like

6605
04:11:02,960 --> 04:11:06,479
for example give me all the sources to

6606
04:11:06,479 --> 04:11:09,120
all the things and you don't need to be

6607
04:11:09,120 --> 04:11:11,680
as specific as i was in the demo so

6608
04:11:11,680 --> 04:11:14,880
code2l is a super powerful tool that

6609
04:11:14,880 --> 04:11:17,040
we've seen it can change

6610
04:11:17,040 --> 04:11:19,520
lives it can change the maturity in your

6611
04:11:19,520 --> 04:11:21,040
code and can definitely solve the

6612
04:11:21,040 --> 04:11:22,640
problems that the previous speakers

6613
04:11:22,640 --> 04:11:23,840
spoke about

6614
04:11:23,840 --> 04:11:26,640
like for example uh injections that rob

6615
04:11:26,640 --> 04:11:28,880
said that it's still a thing even 20

6616
04:11:28,880 --> 04:11:32,000
years later and he was asking for some

6617
04:11:32,000 --> 04:11:35,120
tools that could be picking up the low

6618
04:11:35,120 --> 04:11:37,439
hanging fruits in the build

6619
04:11:37,439 --> 04:11:39,439
process and with this i'm not happy to

6620
04:11:39,439 --> 04:11:41,439
receive questions from you and i hope

6621
04:11:41,439 --> 04:11:43,680
that i summarized the

6622
04:11:43,680 --> 04:11:45,680
action that might being

6623
04:11:45,680 --> 04:11:47,199
missed today

6624
04:11:47,199 --> 04:11:49,359
awesome stuff joseph thank you thank you

6625
04:11:49,359 --> 04:11:51,760
so much for that and uh i really do i

6626
04:11:51,760 --> 04:11:53,840
love that story about the the nasa part

6627
04:11:53,840 --> 04:11:56,640
of things and in there um so far no

6628
04:11:56,640 --> 04:11:57,760
questions in the chat right now but i

6629
04:11:57,760 --> 04:12:00,080
have one question for you that i find to

6630
04:12:00,080 --> 04:12:02,640
be potentially interesting is in that

6631
04:12:02,640 --> 04:12:04,479
sense of uh when people are being more

6632
04:12:04,479 --> 04:12:06,800
active in writing the the codeql code

6633
04:12:06,800 --> 04:12:09,840
themselves do you find potentially

6634
04:12:09,840 --> 04:12:11,680
or have you found folks potentially

6635
04:12:11,680 --> 04:12:13,439
using github copilot to help them with

6636
04:12:13,439 --> 04:12:15,760
that just yet that well

6637
04:12:15,760 --> 04:12:18,159
that's amazing that's a great question

6638
04:12:18,159 --> 04:12:20,159
so i need to tell you an insight about

6639
04:12:20,159 --> 04:12:22,640
that so like two weeks ago

6640
04:12:22,640 --> 04:12:25,359
uh i was trying to get some

6641
04:12:25,359 --> 04:12:27,520
let's say internal permission to speak

6642
04:12:27,520 --> 04:12:30,239
exactly about that because it's coming

6643
04:12:30,239 --> 04:12:31,120
so

6644
04:12:31,120 --> 04:12:31,840
uh

6645
04:12:31,840 --> 04:12:33,279
well then let's pause there let's pause

6646
04:12:33,279 --> 04:12:34,560
there because we also need to start

6647
04:12:34,560 --> 04:12:38,399
wrapping up too um okay

6648
04:12:38,560 --> 04:12:40,479
i just want to say that we are testing

6649
04:12:40,479 --> 04:12:42,880
co-pilot now to provide security

6650
04:12:42,880 --> 04:12:45,359
suggestions so that you can fix code

6651
04:12:45,359 --> 04:12:46,479
with less

6652
04:12:46,479 --> 04:12:48,319
let's keep it here that was a great

6653
04:12:48,319 --> 04:12:49,199
question

6654
04:12:49,199 --> 04:12:51,359
cool well thank you again so much joseph

6655
04:12:51,359 --> 04:12:52,720
glad we were able to get through all

6656
04:12:52,720 --> 04:12:55,279
those internet issues and uh appreciate

6657
04:12:55,279 --> 04:12:57,040
you being here have a good one thank you

6658
04:12:57,040 --> 04:12:58,880
too have a good one

6659
04:12:58,880 --> 04:13:01,198
thanks

6660
04:13:01,279 --> 04:13:03,680
all right i think that brings us to the

6661
04:13:03,680 --> 04:13:05,279
end unfortunately at the end of the day

6662
04:13:05,279 --> 04:13:07,439
already a little violin

6663
04:13:07,439 --> 04:13:10,399
to play the sad music for us because i'm

6664
04:13:10,399 --> 04:13:11,680
gonna have to part ways with you eric

6665
04:13:11,680 --> 04:13:12,960
i'm sorry

6666
04:13:12,960 --> 04:13:15,680
i've had enough of you ah well

6667
04:13:15,680 --> 04:13:17,120
we're gonna see each other in person

6668
04:13:17,120 --> 04:13:18,640
anybody anybody out there that's gonna

6669
04:13:18,640 --> 04:13:20,960
be in austin for open source summit

6670
04:13:20,960 --> 04:13:23,120
come see uh uh

6671
04:13:23,120 --> 04:13:25,040
brian and i and

6672
04:13:25,040 --> 04:13:26,319
a bunch of other people from our team

6673
04:13:26,319 --> 04:13:29,600
out there so be good to say hi

6674
04:13:29,600 --> 04:13:31,760
um i think you already mentioned

6675
04:13:31,760 --> 04:13:34,000
obviously this is live stream this this

6676
04:13:34,000 --> 04:13:36,000
long video is available immediately but

6677
04:13:36,000 --> 04:13:37,680
they're going to carve this thing up and

6678
04:13:37,680 --> 04:13:40,399
have all the individual sessions put out

6679
04:13:40,399 --> 04:13:41,279
there

6680
04:13:41,279 --> 04:13:43,840
by the end of the week

6681
04:13:43,840 --> 04:13:45,279
what else what else do you need to cover

6682
04:13:45,279 --> 04:13:49,120
before we reminder for the nominations

6683
04:13:49,120 --> 04:13:52,319
go to devsevcon.com community community

6684
04:13:52,319 --> 04:13:54,720
rewards to enter in your nominations for

6685
04:13:54,720 --> 04:13:55,920
the individual

6686
04:13:55,920 --> 04:13:57,840
excuse me a little indigestion there

6687
04:13:57,840 --> 04:14:00,319
individual uh inspiring individual dev

6688
04:14:00,319 --> 04:14:02,880
step cops team and community

6689
04:14:02,880 --> 04:14:04,640
members that you want to

6690
04:14:04,640 --> 04:14:06,239
submit to those three different award

6691
04:14:06,239 --> 04:14:08,800
categories that are there in addition to

6692
04:14:08,800 --> 04:14:10,880
that uh yes all the videos are going to

6693
04:14:10,880 --> 04:14:12,479
get chopped up

6694
04:14:12,479 --> 04:14:14,239
be sure if you're interested right we

6695
04:14:14,239 --> 04:14:15,359
showed i don't know if you still have

6696
04:14:15,359 --> 04:14:16,720
that slide available eric but i'll talk

6697
04:14:16,720 --> 04:14:18,239
through this in the meantime

6698
04:14:18,239 --> 04:14:20,560
we we have several chapters across the

6699
04:14:20,560 --> 04:14:22,880
globe 13 locations worldwide australia

6700
04:14:22,880 --> 04:14:24,880
canada france germany greece hungary

6701
04:14:24,880 --> 04:14:27,920
india netherlands switzerland london

6702
04:14:27,920 --> 04:14:30,800
virginia us wales and our global

6703
04:14:30,800 --> 04:14:33,279
community or devsecond chapters but if

6704
04:14:33,279 --> 04:14:35,120
you're interested in getting started

6705
04:14:35,120 --> 04:14:36,880
creating your own chapter in your region

6706
04:14:36,880 --> 04:14:38,800
of the world or getting feel free to get

6707
04:14:38,800 --> 04:14:40,159
be part of those existing ones but if

6708
04:14:40,159 --> 04:14:41,840
you want to start a new one you can find

6709
04:14:41,840 --> 04:14:43,279
out more information about how to do

6710
04:14:43,279 --> 04:14:46,399
that at devsecond.com

6711
04:14:46,399 --> 04:14:47,439
last

6712
04:14:47,439 --> 04:14:49,279
but not least actually no not last one

6713
04:14:49,279 --> 04:14:50,880
more thing if you want to keep in touch

6714
04:14:50,880 --> 04:14:52,399
i have conversations with folks in the

6715
04:14:52,399 --> 04:14:54,800
community the discord is a great place

6716
04:14:54,800 --> 04:14:56,720
to do that it's a great tool

6717
04:14:56,720 --> 04:14:58,880
uh to help you connect with other folks

6718
04:14:58,880 --> 04:15:00,880
that are focused in this in this area

6719
04:15:00,880 --> 04:15:04,159
security practitioners developers alike

6720
04:15:04,159 --> 04:15:05,520
all talking about and learning and

6721
04:15:05,520 --> 04:15:06,720
leveling up their skills when it comes

6722
04:15:06,720 --> 04:15:08,479
to developer security if you want to be

6723
04:15:08,479 --> 04:15:10,159
able to join in on there the invite to

6724
04:15:10,159 --> 04:15:13,439
that is also on devsecond.com you can

6725
04:15:13,439 --> 04:15:15,120
find that link there's a big purple

6726
04:15:15,120 --> 04:15:16,640
button that says join the community

6727
04:15:16,640 --> 04:15:18,000
there and that will bring you to the

6728
04:15:18,000 --> 04:15:19,520
link for the invite

6729
04:15:19,520 --> 04:15:20,319
for

6730
04:15:20,319 --> 04:15:23,359
access to the discord server now last

6731
04:15:23,359 --> 04:15:24,880
but not least eric

6732
04:15:24,880 --> 04:15:26,239
is we have to

6733
04:15:26,239 --> 04:15:28,159
we cannot leave and end things without

6734
04:15:28,159 --> 04:15:29,040
saying

6735
04:15:29,040 --> 04:15:31,040
big thank you and shout out to the fine

6736
04:15:31,040 --> 04:15:32,720
folks that helped put this event

6737
04:15:32,720 --> 04:15:34,000
together

6738
04:15:34,000 --> 04:15:37,199
for a full 24 hours long right

6739
04:15:37,199 --> 04:15:39,439
yes and we got to let everybody know in

6740
04:15:39,439 --> 04:15:41,279
fact i'm tempted to bring one of them on

6741
04:15:41,279 --> 04:15:42,399
stream right now but i don't know if

6742
04:15:42,399 --> 04:15:44,159
they'll appreciate that let's see if

6743
04:15:44,159 --> 04:15:45,439
they give me a little nod like yes

6744
04:15:45,439 --> 04:15:47,680
that's okay or no it's not okay okay no

6745
04:15:47,680 --> 04:15:50,000
all right so well shout out to sam

6746
04:15:50,000 --> 04:15:52,080
carrie nina

6747
04:15:52,080 --> 04:15:55,039
nora there you are

6748
04:15:55,359 --> 04:15:57,520
thank you for everything that you all do

6749
04:15:57,520 --> 04:16:00,560
crowd cheers

6750
04:16:00,560 --> 04:16:02,399
and nora and carrie who are in the green

6751
04:16:02,399 --> 04:16:03,359
room

6752
04:16:03,359 --> 04:16:06,319
yes yes yes

6753
04:16:06,319 --> 04:16:08,560
all right stop that wow that's a really

6754
04:16:08,560 --> 04:16:10,399
crazy crowd uh all the folks that were

6755
04:16:10,399 --> 04:16:12,000
helping behind the scenes too that were

6756
04:16:12,000 --> 04:16:14,000
helping with moderation in the chat and

6757
04:16:14,000 --> 04:16:15,520
just all the previous hosts and

6758
04:16:15,520 --> 04:16:17,840
presenters thank you all so much for

6759
04:16:17,840 --> 04:16:19,680
helping put on such a great event and

6760
04:16:19,680 --> 04:16:21,279
you all watching this thank you for

6761
04:16:21,279 --> 04:16:22,319
being here thank you for bringing up

6762
04:16:22,319 --> 04:16:24,479
great questions we hope you enjoyed it

6763
04:16:24,479 --> 04:16:26,399
and you got a lot of value out of these

6764
04:16:26,399 --> 04:16:29,040
amazing sessions and we'll see you next

6765
04:16:29,040 --> 04:16:29,920
time

6766
04:16:29,920 --> 04:16:32,560
bye everybody

6767
04:16:32,560 --> 04:16:33,760
bye-bye

6768
04:16:33,760 --> 04:16:34,960
we gotta close this out where's the

6769
04:16:34,960 --> 04:16:36,000
button

6770
04:16:36,000 --> 04:16:38,080
eric what are you doing

6771
04:16:38,080 --> 04:16:51,299
[Music]

6772
04:16:52,159 --> 04:16:54,239
you

