1
00:00:00,030 --> 00:00:04,770
welcome to this workshop on automating

2
00:00:02,220 --> 00:00:07,379
whatsapp my name is Simon Bennett's I'm

3
00:00:04,770 --> 00:00:09,210
the SAP project lead and I work for the

4
00:00:07,379 --> 00:00:10,530
Mozilla cloud security team I'm going to

5
00:00:09,210 --> 00:00:12,179
go through these first slides very

6
00:00:10,530 --> 00:00:14,549
quickly because I've already explained

7
00:00:12,179 --> 00:00:16,320
them to the audience here this for this

8
00:00:14,549 --> 00:00:17,340
particular workshop I'm going to talk

9
00:00:16,320 --> 00:00:19,050
about who this is for

10
00:00:17,340 --> 00:00:20,220
problems trying to solve what you can

11
00:00:19,050 --> 00:00:22,800
get out of this particular workshop

12
00:00:20,220 --> 00:00:24,000
quick introduction to zap a place where

13
00:00:22,800 --> 00:00:25,769
you can start and then I'm going to go

14
00:00:24,000 --> 00:00:28,980
into more details about doing some full

15
00:00:25,769 --> 00:00:30,990
scans this is for everyone who could be

16
00:00:28,980 --> 00:00:33,300
involved in automation now got a better

17
00:00:30,990 --> 00:00:36,089
idea of the makeup of the audience we've

18
00:00:33,300 --> 00:00:37,828
got a good mix of everyone here so we're

19
00:00:36,090 --> 00:00:39,540
trying to find security issues as soon

20
00:00:37,829 --> 00:00:41,460
as early as possible but we don't want

21
00:00:39,540 --> 00:00:42,960
to do those completely outside of the

22
00:00:41,460 --> 00:00:44,760
development you know there's the new

23
00:00:42,960 --> 00:00:46,800
devops pipeline we want developers to be

24
00:00:44,760 --> 00:00:48,000
involved as much as possible and we're

25
00:00:46,800 --> 00:00:49,890
not trying to find all possible

26
00:00:48,000 --> 00:00:51,420
vulnerabilities or to make the scanning

27
00:00:49,890 --> 00:00:52,710
system good for that automated scanning

28
00:00:51,420 --> 00:00:54,510
we'll find certain types of honor'

29
00:00:52,710 --> 00:00:57,059
ability very well another Z that won't

30
00:00:54,510 --> 00:00:58,710
find was not so good at so all it means

31
00:00:57,059 --> 00:01:00,269
for pen testers is hopefully they get to

32
00:00:58,710 --> 00:01:01,620
look for the more fun stuff and don't

33
00:01:00,270 --> 00:01:02,390
have to worry about the boring stuff as

34
00:01:01,620 --> 00:01:05,309
much

35
00:01:02,390 --> 00:01:07,500
so you've out of this term workshop you

36
00:01:05,309 --> 00:01:10,140
will get a quick way to quickly evaluate

37
00:01:07,500 --> 00:01:12,780
your applications and then I'll go into

38
00:01:10,140 --> 00:01:14,820
more op go through what you can do for

39
00:01:12,780 --> 00:01:17,580
more thorough scanning I will give you

40
00:01:14,820 --> 00:01:20,429
an introduction to zap API and I will be

41
00:01:17,580 --> 00:01:23,130
Dermott down stuff now it's only one

42
00:01:20,430 --> 00:01:24,689
hour so it's not really that we don't I

43
00:01:23,130 --> 00:01:26,100
don't really have a lot of time to let

44
00:01:24,689 --> 00:01:27,419
you kind of play around with loads of

45
00:01:26,100 --> 00:01:30,449
things but you can try things out and

46
00:01:27,420 --> 00:01:32,130
you can obviously hopefully the slides

47
00:01:30,450 --> 00:01:33,740
in this video be made public so you can

48
00:01:32,130 --> 00:01:35,699
try them again but when you're back home

49
00:01:33,740 --> 00:01:37,079
so yeah

50
00:01:35,700 --> 00:01:39,090
you now know what it's about if you if

51
00:01:37,079 --> 00:01:40,649
you're not looking for this then you can

52
00:01:39,090 --> 00:01:43,649
go and find something which is more

53
00:01:40,650 --> 00:01:45,149
interesting to you so some of you

54
00:01:43,649 --> 00:01:47,310
haven't used that before so I'm going to

55
00:01:45,149 --> 00:01:49,500
go through a quick introduction

56
00:01:47,310 --> 00:01:52,619
it is a tool finding vulnerabilities and

57
00:01:49,500 --> 00:01:55,590
web applications say easy to use there

58
00:01:52,619 --> 00:01:57,540
are some caveats we try to make it as

59
00:01:55,590 --> 00:01:59,310
easy to use as possible but web security

60
00:01:57,540 --> 00:02:02,939
scanning is kind of complicated and it's

61
00:01:59,310 --> 00:02:05,729
often very unintuitive so we buddies of

62
00:02:02,939 --> 00:02:08,128
uses something we try and we try hard to

63
00:02:05,729 --> 00:02:10,110
achieve that's particularly true of the

64
00:02:08,128 --> 00:02:12,269
UI obviously want to get into the Zap

65
00:02:10,110 --> 00:02:13,590
api it's a bit difficult difficult and

66
00:02:12,270 --> 00:02:14,010
we haven't really documented that as

67
00:02:13,590 --> 00:02:17,730
well as we

68
00:02:14,010 --> 00:02:19,290
done but most importantly the Apple very

69
00:02:17,730 --> 00:02:23,579
important thing is that it's completely

70
00:02:19,290 --> 00:02:25,500
free it's open-source and it will stay

71
00:02:23,580 --> 00:02:28,049
that way so we're not going to go pro it

72
00:02:25,500 --> 00:02:29,400
is no automatic project so the flagship

73
00:02:28,049 --> 00:02:31,170
projects you know what are the ones that

74
00:02:29,400 --> 00:02:34,230
are considered the most mature and most

75
00:02:31,170 --> 00:02:36,089
suitable for people to adopt it is ideal

76
00:02:34,230 --> 00:02:37,950
for beginners by background as a

77
00:02:36,090 --> 00:02:40,920
developer and actually started zap as a

78
00:02:37,950 --> 00:02:42,500
way to teach myself about security and

79
00:02:40,920 --> 00:02:45,599
it's still a very important focus to us

80
00:02:42,500 --> 00:02:47,280
but we're also zap is used by

81
00:02:45,599 --> 00:02:48,268
professional pen testers a lot as well

82
00:02:47,280 --> 00:02:50,660
so we're trying to cover the whole

83
00:02:48,269 --> 00:02:53,280
spectrum which makes it interesting and

84
00:02:50,660 --> 00:02:55,410
it is ideal for developers especially

85
00:02:53,280 --> 00:02:57,329
for automated security testing actually

86
00:02:55,410 --> 00:03:00,030
that's one of my focuses when I started

87
00:02:57,329 --> 00:03:02,609
work on zap and one of my real focuses

88
00:03:00,030 --> 00:03:04,620
at Mozilla is included in all the major

89
00:03:02,609 --> 00:03:05,970
- security distributions like Carly and

90
00:03:04,620 --> 00:03:08,160
the site called

91
00:03:05,970 --> 00:03:10,079
tools watch.org which tracks security

92
00:03:08,160 --> 00:03:12,900
tools and we've come we've been voted

93
00:03:10,079 --> 00:03:16,609
the tops open-source free security tool

94
00:03:12,900 --> 00:03:19,200
several years and past few years but

95
00:03:16,609 --> 00:03:21,030
there are no silver bullets in this

96
00:03:19,200 --> 00:03:26,160
industry and therefore zap isn't one of

97
00:03:21,030 --> 00:03:28,650
them some features so zap has a swing

98
00:03:26,160 --> 00:03:31,139
based UI which I'm now calling desktop

99
00:03:28,650 --> 00:03:33,569
mode and that's it Ben's is where it

100
00:03:31,139 --> 00:03:35,700
started off so it was a fork of a

101
00:03:33,569 --> 00:03:37,319
project called Parris so so you have a

102
00:03:35,700 --> 00:03:41,459
swing based you eyes designed to be a

103
00:03:37,319 --> 00:03:44,220
kind of single user interactive tool we

104
00:03:41,459 --> 00:03:46,260
have a comprehensive REST API rest ashay

105
00:03:44,220 --> 00:03:48,630
I so have a demon mode now so you don't

106
00:03:46,260 --> 00:03:51,060
have to run the UI we have a plug-in

107
00:03:48,630 --> 00:03:53,190
architecture that so we have what we

108
00:03:51,060 --> 00:03:55,470
call add-ons this is good because it

109
00:03:53,190 --> 00:03:58,620
means we can have we can extend that

110
00:03:55,470 --> 00:04:00,870
pins in different ways we have an online

111
00:03:58,620 --> 00:04:02,340
marketplace so we can have add-ons that

112
00:04:00,870 --> 00:04:04,590
we don't we think of kind of quite

113
00:04:02,340 --> 00:04:06,419
specialized and we don't have to include

114
00:04:04,590 --> 00:04:08,430
those from the standard install but then

115
00:04:06,419 --> 00:04:10,260
people can download them and it's called

116
00:04:08,430 --> 00:04:12,720
a marketplace but everything's free on

117
00:04:10,260 --> 00:04:14,668
there so the add-ons we have different

118
00:04:12,720 --> 00:04:16,620
qualities of them every add-on start to

119
00:04:14,669 --> 00:04:18,239
alpha quality because it's new then it

120
00:04:16,620 --> 00:04:19,978
doesn't matter if it's written by myself

121
00:04:18,238 --> 00:04:21,869
or one of the other sap core team it

122
00:04:19,978 --> 00:04:23,310
starts off of it as alpha and then once

123
00:04:21,870 --> 00:04:24,780
it goes through various gates and we're

124
00:04:23,310 --> 00:04:28,020
happy it goes to beta and then release

125
00:04:24,780 --> 00:04:30,869
quality the release bushes Apollonian

126
00:04:28,020 --> 00:04:32,669
clewd release an some beter quality

127
00:04:30,870 --> 00:04:38,039
add-ons for those usually pretty stable

128
00:04:32,669 --> 00:04:39,479
ones so we have a couple of spiders so

129
00:04:38,039 --> 00:04:41,909
we have a traditional spider which go

130
00:04:39,479 --> 00:04:43,229
which especially a crawler so go through

131
00:04:41,909 --> 00:04:45,030
the web pages and looks for all the

132
00:04:43,229 --> 00:04:46,889
links and follow those that's very

133
00:04:45,030 --> 00:04:48,650
effective for certain types of web

134
00:04:46,889 --> 00:04:51,870
applications and it's very fast

135
00:04:48,650 --> 00:04:54,568
unfortunately for at the JavaScript

136
00:04:51,870 --> 00:04:56,069
heavens absolute user makes heavy use of

137
00:04:54,569 --> 00:04:58,349
javascript it's not very effective

138
00:04:56,069 --> 00:05:00,150
therefore we have an ajax spider and

139
00:04:58,349 --> 00:05:02,190
that launches browsers using selenium

140
00:05:00,150 --> 00:05:04,068
and clicks on all the links that's much

141
00:05:02,190 --> 00:05:07,199
more effective when it takes longer

142
00:05:04,069 --> 00:05:09,240
we have passive and active scanning so

143
00:05:07,199 --> 00:05:10,770
passive scanning is where we just look

144
00:05:09,240 --> 00:05:12,539
at the requests and responses that go

145
00:05:10,770 --> 00:05:14,580
through Zapp and based on that we can

146
00:05:12,539 --> 00:05:17,310
identify certain security

147
00:05:14,580 --> 00:05:19,500
vulnerabilities or potential issues we

148
00:05:17,310 --> 00:05:21,060
also have active scanning and that does

149
00:05:19,500 --> 00:05:23,400
the nasty stuff that does the attacking

150
00:05:21,060 --> 00:05:25,830
and trying to find the more interesting

151
00:05:23,400 --> 00:05:28,919
things should we noted the passive

152
00:05:25,830 --> 00:05:30,870
scanning is completely safe and legal so

153
00:05:28,919 --> 00:05:32,818
you can do passive scanning on any site

154
00:05:30,870 --> 00:05:35,699
you like and we might do that in a bit

155
00:05:32,819 --> 00:05:37,590
it is highly configurable we know that I

156
00:05:35,699 --> 00:05:40,080
was security tool there are no there is

157
00:05:37,590 --> 00:05:41,580
no one-size-fits-all so try and make it

158
00:05:40,080 --> 00:05:43,650
as configurable as possible which is a

159
00:05:41,580 --> 00:05:46,050
at odds with trying to make it easier to

160
00:05:43,650 --> 00:05:47,880
easy to use we understand that so we

161
00:05:46,050 --> 00:05:49,889
have things like scan policies where you

162
00:05:47,880 --> 00:05:51,690
can actually can have very fine-grained

163
00:05:49,889 --> 00:05:53,130
control over exactly what types of

164
00:05:51,690 --> 00:05:59,180
things were you're looking for about

165
00:05:53,130 --> 00:05:59,180
those passive and active scans please

166
00:06:01,789 --> 00:06:04,789
yeah

167
00:06:09,570 --> 00:06:14,710
yeah to up that can repeat that the

168
00:06:12,160 --> 00:06:16,449
question was whether passive scanning is

169
00:06:14,710 --> 00:06:18,549
if it's safe does that mean active

170
00:06:16,449 --> 00:06:20,590
scanning is not safe and that is

171
00:06:18,550 --> 00:06:22,810
absolutely correct so passive scanning

172
00:06:20,590 --> 00:06:24,698
you're all you're doing is Zapp is

173
00:06:22,810 --> 00:06:26,080
acting as a proxy but particularly

174
00:06:24,699 --> 00:06:28,000
typically between your browser and the

175
00:06:26,080 --> 00:06:29,169
application and we can just look at

176
00:06:28,000 --> 00:06:31,180
what's going on and give you the

177
00:06:29,169 --> 00:06:33,639
mornings active scanning we're actually

178
00:06:31,180 --> 00:06:34,870
attacking the site in question so you

179
00:06:33,639 --> 00:06:37,030
should not do that unless you have

180
00:06:34,870 --> 00:06:39,310
permits lessons your own application or

181
00:06:37,030 --> 00:06:42,460
you have permission to do it so yeah

182
00:06:39,310 --> 00:06:44,830
thinking and one thing Zapp is highly

183
00:06:42,460 --> 00:06:48,130
scriptable so we have a scripting

184
00:06:44,830 --> 00:06:51,639
interface sort of question back about

185
00:06:48,130 --> 00:06:54,370
the scale policies can you edit them in

186
00:06:51,639 --> 00:06:57,490
the level that you know do specific

187
00:06:54,370 --> 00:07:02,860
payloads no we don't we don't go down to

188
00:06:57,490 --> 00:07:04,060
that level because if sap scans that

189
00:07:02,860 --> 00:07:05,470
they'll work the active scans will

190
00:07:04,060 --> 00:07:06,970
always work in different ways that

191
00:07:05,470 --> 00:07:08,380
they're actually finely tuned for

192
00:07:06,970 --> 00:07:10,270
whatever they're looking for so it's not

193
00:07:08,380 --> 00:07:12,190
a case of you have a set of payloads and

194
00:07:10,270 --> 00:07:13,990
you go what's the result it's it's more

195
00:07:12,190 --> 00:07:16,150
complicated than that so for example

196
00:07:13,990 --> 00:07:18,370
cross-site scripting the original Paris

197
00:07:16,150 --> 00:07:20,138
one did just chuck what looked like you

198
00:07:18,370 --> 00:07:21,639
know set a bad request and try to match

199
00:07:20,139 --> 00:07:23,080
up the responses we don't do that

200
00:07:21,639 --> 00:07:25,690
anymore what we do is we inject

201
00:07:23,080 --> 00:07:27,130
something a safe value in we see where

202
00:07:25,690 --> 00:07:29,590
it occurs where it's reflected in the

203
00:07:27,130 --> 00:07:31,750
page and then we target our attacks to

204
00:07:29,590 --> 00:07:32,919
those contexts within the webpage and we

205
00:07:31,750 --> 00:07:34,720
try and work out whether we've broken

206
00:07:32,919 --> 00:07:36,849
out of the context or not so we can

207
00:07:34,720 --> 00:07:40,930
actually control so we can get your

208
00:07:36,849 --> 00:07:42,099
script to run so if you you know you'd

209
00:07:40,930 --> 00:07:43,570
have to be actually really go in and

210
00:07:42,099 --> 00:07:46,389
edit the source it wouldn't be simple to

211
00:07:43,570 --> 00:07:49,330
just say yes this will can you exclude

212
00:07:46,389 --> 00:07:52,150
specific parameters on the application

213
00:07:49,330 --> 00:07:54,010
yes yeah so that's where we have a lot

214
00:07:52,150 --> 00:07:55,810
more flexibility and what you can say

215
00:07:54,010 --> 00:08:00,010
and what you want to attack so we've got

216
00:07:55,810 --> 00:08:02,260
a fine-grained control over that and the

217
00:08:00,010 --> 00:08:03,789
things app is highly scriptable so we

218
00:08:02,260 --> 00:08:05,770
actually have lots of different things

219
00:08:03,789 --> 00:08:07,510
where you can we can plug into against

220
00:08:05,770 --> 00:08:10,570
you write active scan rules as scripts

221
00:08:07,510 --> 00:08:11,949
and we try and make it where you can run

222
00:08:10,570 --> 00:08:15,669
scripts within zap and you have full

223
00:08:11,949 --> 00:08:17,800
control over all all this functionality

224
00:08:15,669 --> 00:08:18,969
and data available within zap we're open

225
00:08:17,800 --> 00:08:22,389
source so mean

226
00:08:18,969 --> 00:08:24,248
we can you can do whatever you like so

227
00:08:22,389 --> 00:08:26,709
there are different ways of using zap

228
00:08:24,249 --> 00:08:28,599
one of them we have an option for to use

229
00:08:26,709 --> 00:08:31,629
app as a point-and-shoot tool which is

230
00:08:28,599 --> 00:08:32,828
all very well okay works but it's not

231
00:08:31,629 --> 00:08:35,289
the most interesting anything you can do

232
00:08:32,828 --> 00:08:37,088
with it a small standard way is proxying

233
00:08:35,289 --> 00:08:39,039
your browser through zap and as you

234
00:08:37,089 --> 00:08:41,110
explore the application you then you you

235
00:08:39,039 --> 00:08:43,299
help zap understand it and then you can

236
00:08:41,110 --> 00:08:45,009
use scanning from that then we got

237
00:08:43,299 --> 00:08:46,810
manual pen testing with little manual

238
00:08:45,009 --> 00:08:48,550
tools within zap so the certain

239
00:08:46,810 --> 00:08:50,319
vulnerabilities I said we can automate

240
00:08:48,550 --> 00:08:52,000
the finding of but a lot of them it's

241
00:08:50,319 --> 00:08:53,819
much more interesting where the pen

242
00:08:52,000 --> 00:08:56,620
testers actually playing around and

243
00:08:53,819 --> 00:08:58,930
trying to deduce manually themselves

244
00:08:56,620 --> 00:09:00,670
whether they're problems or not and then

245
00:08:58,930 --> 00:09:02,439
the important one for this talk is

246
00:09:00,670 --> 00:09:05,050
automated security regression tests

247
00:09:02,439 --> 00:09:07,089
Peter I'll begin to more detail I've

248
00:09:05,050 --> 00:09:09,399
actually I used to zap the debugger

249
00:09:07,089 --> 00:09:11,009
quite a lot we've got some JavaScript

250
00:09:09,399 --> 00:09:13,480
library and you're interacting with the

251
00:09:11,009 --> 00:09:15,189
website Enoch Schwartz go you know

252
00:09:13,480 --> 00:09:17,110
there's we made a mistake or something

253
00:09:15,189 --> 00:09:18,399
you can use zap to intercept things and

254
00:09:17,110 --> 00:09:19,930
change things on the fly just to get

255
00:09:18,399 --> 00:09:22,000
something functionally working which is

256
00:09:19,930 --> 00:09:23,620
quite a fun thing to do and you can use

257
00:09:22,000 --> 00:09:24,970
it as part of a large security program

258
00:09:23,620 --> 00:09:27,069
there are a lot of other tools which use

259
00:09:24,970 --> 00:09:30,339
app we try and make it as easy as

260
00:09:27,069 --> 00:09:35,979
possible to embed zap into reusable by

261
00:09:30,339 --> 00:09:38,319
any other tool get on to houses installs

262
00:09:35,980 --> 00:09:41,290
app we have quite a few options we have

263
00:09:38,319 --> 00:09:43,899
installers for Windows Mac and Todd sip

264
00:09:41,290 --> 00:09:46,209
for Linux said it's included by

265
00:09:43,899 --> 00:09:47,850
destroying destroys like Carly but the

266
00:09:46,209 --> 00:09:49,930
one I want to stress here or make

267
00:09:47,850 --> 00:09:52,000
particular note of is the docker images

268
00:09:49,930 --> 00:09:54,519
I think for automation docker is is

269
00:09:52,000 --> 00:09:56,470
great I'm a big fan of it so we have two

270
00:09:54,519 --> 00:09:58,480
different docker images we have the

271
00:09:56,470 --> 00:10:00,519
stable version which is the most recent

272
00:09:58,480 --> 00:10:03,309
official version of ZAP which is

273
00:10:00,519 --> 00:10:07,509
currently two-five-zero we also have

274
00:10:03,309 --> 00:10:09,819
weekly we do a weekly release which is a

275
00:10:07,509 --> 00:10:12,250
Todd's it which now actually I think is

276
00:10:09,819 --> 00:10:13,420
a zip file which is cross-platform we

277
00:10:12,250 --> 00:10:15,639
just have to uninstall it now in stores

278
00:10:13,420 --> 00:10:18,250
there but we also have that as a docker

279
00:10:15,639 --> 00:10:20,589
image now despite the names the the

280
00:10:18,250 --> 00:10:22,120
weekly image is actually quite stable so

281
00:10:20,589 --> 00:10:24,910
we use the weekly image in our

282
00:10:22,120 --> 00:10:26,949
automation for in Mozilla and we do that

283
00:10:24,910 --> 00:10:28,300
for two reasons one it means I can kind

284
00:10:26,949 --> 00:10:29,920
of iterate through changes much more

285
00:10:28,300 --> 00:10:32,620
quickly I'd have to wait for full

286
00:10:29,920 --> 00:10:35,439
release and the other one is

287
00:10:32,620 --> 00:10:37,270
we the the scripts in Mozilla run like a

288
00:10:35,440 --> 00:10:39,310
one o'clock in the morning every morning

289
00:10:37,270 --> 00:10:41,439
so if something goes horribly wrong I'm

290
00:10:39,310 --> 00:10:44,079
one of the first people to know and I

291
00:10:41,440 --> 00:10:45,340
think there's been to a if there's a

292
00:10:44,080 --> 00:10:46,600
problem serious problem with a weekly

293
00:10:45,340 --> 00:10:48,340
release then we will fix it and

294
00:10:46,600 --> 00:10:50,890
re-release it and I think it's happened

295
00:10:48,340 --> 00:10:52,900
twice in the last two years so the week

296
00:10:50,890 --> 00:10:57,340
Louis is pretty stable so I wouldn't

297
00:10:52,900 --> 00:10:59,079
have a problem with you using that so

298
00:10:57,340 --> 00:11:00,520
what I'll do is give you a place to

299
00:10:59,080 --> 00:11:03,070
start and it's particularly for people

300
00:11:00,520 --> 00:11:05,410
who haven't got any security scanning

301
00:11:03,070 --> 00:11:07,570
automated scanning in it at the moment

302
00:11:05,410 --> 00:11:12,670
it is something called the baseline scan

303
00:11:07,570 --> 00:11:13,720
and this is safe and it runs quickly and

304
00:11:12,670 --> 00:11:15,550
by that I mean we know within a couple

305
00:11:13,720 --> 00:11:17,740
of minutes and that means you can

306
00:11:15,550 --> 00:11:18,969
integrate it in your continuous

307
00:11:17,740 --> 00:11:21,820
integration continuous deployment

308
00:11:18,970 --> 00:11:23,320
pipeline whether it might not be one

309
00:11:21,820 --> 00:11:24,130
moment one eons you on every commit we

310
00:11:23,320 --> 00:11:26,020
can certainly do it when you're

311
00:11:24,130 --> 00:11:31,000
promoting applications state staging or

312
00:11:26,020 --> 00:11:34,870
live and it is very easy to get started

313
00:11:31,000 --> 00:11:36,940
so I've got a couple of engineers can

314
00:11:34,870 --> 00:11:40,060
you read those yeah docker pull and

315
00:11:36,940 --> 00:11:41,770
docker run that's it so you don't it's

316
00:11:40,060 --> 00:11:45,790
very quick to do but it's also very

317
00:11:41,770 --> 00:11:47,410
configurable if necessary it uses doctor

318
00:11:45,790 --> 00:11:49,750
that's the only dependency so you don't

319
00:11:47,410 --> 00:11:52,060
have to install anything else and what

320
00:11:49,750 --> 00:11:53,920
it does is a time-limited spider of the

321
00:11:52,060 --> 00:11:58,209
target and but I mean it does the

322
00:11:53,920 --> 00:12:01,030
standard crawler by default for just one

323
00:11:58,210 --> 00:12:02,320
minute and we do that so we can we know

324
00:12:01,030 --> 00:12:03,760
it won't to find everything for large

325
00:12:02,320 --> 00:12:06,070
sites it just gives you kind of

326
00:12:03,760 --> 00:12:07,870
representative sample hopefully and all

327
00:12:06,070 --> 00:12:11,260
we do is passive scanning so that means

328
00:12:07,870 --> 00:12:12,940
it's not going to break anything and it

329
00:12:11,260 --> 00:12:15,610
will happen it'll work quickly which is

330
00:12:12,940 --> 00:12:18,400
what we want by default it will warn on

331
00:12:15,610 --> 00:12:20,680
all issues we can change that to ignore

332
00:12:18,400 --> 00:12:22,959
particular issues important as info or

333
00:12:20,680 --> 00:12:24,040
fail but I said it's very comfortable

334
00:12:22,960 --> 00:12:25,660
and you can include any exact

335
00:12:24,040 --> 00:12:27,550
command-line option there's some later

336
00:12:25,660 --> 00:12:32,250
which I can show you and you can also

337
00:12:27,550 --> 00:12:34,930
ignore particular URLs via Jex's as well

338
00:12:32,250 --> 00:12:37,240
it will fight it includes all of the

339
00:12:34,930 --> 00:12:39,219
release and beta passive scan rules so

340
00:12:37,240 --> 00:12:40,950
will find missing or incorrect security

341
00:12:39,220 --> 00:12:43,630
headers problems with cookies

342
00:12:40,950 --> 00:12:45,610
information disclose your missing CSF

343
00:12:43,630 --> 00:12:46,110
CSRF token things like that

344
00:12:45,610 --> 00:12:50,459
you can

345
00:12:46,110 --> 00:12:54,560
she include alpha passive scandals and

346
00:12:50,459 --> 00:12:58,069
this is where I start showing you things

347
00:12:54,560 --> 00:13:01,910
so I this is a Windows box and I've got

348
00:12:58,070 --> 00:13:04,320
dr. installed so what I'm going to do is

349
00:13:01,910 --> 00:13:05,640
rather than actually typed things I've

350
00:13:04,320 --> 00:13:10,110
got a load of things I'm going to paste

351
00:13:05,640 --> 00:13:13,829
in can you read that it's that big

352
00:13:10,110 --> 00:13:15,300
enough some nods around great so what

353
00:13:13,829 --> 00:13:17,189
I'm doing is I'm doing a docker run now

354
00:13:15,300 --> 00:13:19,439
the minus V you don't normally need to

355
00:13:17,190 --> 00:13:21,990
specify but that's so kind of this is a

356
00:13:19,440 --> 00:13:23,579
docker thing so I can attach the current

357
00:13:21,990 --> 00:13:25,050
working directory to the docker image so

358
00:13:23,579 --> 00:13:26,939
it can read read and write to it I'm

359
00:13:25,050 --> 00:13:31,890
doing that because I'm spy I'm

360
00:13:26,940 --> 00:13:34,019
specifying a - G parameter budget com2

361
00:13:31,890 --> 00:13:36,060
explaining it so all you really need to

362
00:13:34,019 --> 00:13:39,149
do is docker run Oh wasp docker

363
00:13:36,060 --> 00:13:42,209
zap - docker weekly is that baseline dot

364
00:13:39,149 --> 00:13:44,100
py so that's the baseline scan and a

365
00:13:42,209 --> 00:13:45,689
minus T is the target and what I've

366
00:13:44,100 --> 00:13:49,800
actually got is I've got the budget

367
00:13:45,690 --> 00:13:52,890
store which is that one there and I'm

368
00:13:49,800 --> 00:13:55,099
running that via in a docker container

369
00:13:52,890 --> 00:13:58,470
which in you won't be able to read that

370
00:13:55,100 --> 00:14:02,100
so if I so the might be I've got a - D

371
00:13:58,470 --> 00:14:04,610
parameter which is debug and a - G which

372
00:14:02,100 --> 00:14:07,649
is generating a configuration file so

373
00:14:04,610 --> 00:14:08,670
kick that off and because it's debug you

374
00:14:07,649 --> 00:14:11,640
can actually see it's using the latest

375
00:14:08,670 --> 00:14:14,490
weekly release and we're spy during the

376
00:14:11,640 --> 00:14:18,380
budget application now and there we go

377
00:14:14,490 --> 00:14:21,750
so what it tells you is that it's found

378
00:14:18,380 --> 00:14:24,029
total of 60 URLs and here all the rules

379
00:14:21,750 --> 00:14:28,050
that are passed and we're warning on

380
00:14:24,029 --> 00:14:30,230
everything else so what I've done is

381
00:14:28,050 --> 00:14:33,089
I've used the much G parameters to

382
00:14:30,230 --> 00:14:37,740
generate a configuration file so I'm

383
00:14:33,089 --> 00:14:41,750
going to vy budget kampf and then check

384
00:14:37,740 --> 00:14:41,750
out change alright right one so

385
00:14:46,130 --> 00:14:51,110
so it's different once people are

386
00:14:48,330 --> 00:14:51,110
staring at you

387
00:14:56,070 --> 00:15:04,990
oops I'm going to change the absence of

388
00:14:58,839 --> 00:15:06,760
CSRF Takens to fail and will change one

389
00:15:04,990 --> 00:15:07,290
of the other ones of something else good

390
00:15:06,760 --> 00:15:18,040
one

391
00:15:07,290 --> 00:15:24,300
loosely scoped cookie thank you yep and

392
00:15:18,040 --> 00:15:26,500
I'm going to change that to Noir and

393
00:15:24,300 --> 00:15:28,839
then I'm going to run the same thing

394
00:15:26,500 --> 00:15:31,029
again except instead of minus G I'm

395
00:15:28,839 --> 00:15:32,920
going to use minus C to say use that

396
00:15:31,029 --> 00:15:35,350
configuration file you can also use

397
00:15:32,920 --> 00:15:37,479
minus U of the URL if you want to have a

398
00:15:35,350 --> 00:15:39,760
set of these configuration files on a

399
00:15:37,480 --> 00:15:42,910
server somewhere and so it's going

400
00:15:39,760 --> 00:15:45,760
through again and so if you want to try

401
00:15:42,910 --> 00:15:47,380
this out you can try on some not on the

402
00:15:45,760 --> 00:15:49,480
network because things are going to go

403
00:15:47,380 --> 00:15:50,980
horribly wrong if I do that but if you

404
00:15:49,480 --> 00:15:54,250
want to try out against Google or Amazon

405
00:15:50,980 --> 00:15:56,380
feel free you can blame me and what we

406
00:15:54,250 --> 00:15:59,529
see here is we've actually got one fail

407
00:15:56,380 --> 00:16:02,770
and you can see it is ignored one of

408
00:15:59,529 --> 00:16:06,120
them in us actually should normally have

409
00:16:02,770 --> 00:16:08,949
given a better summary than that so

410
00:16:06,120 --> 00:16:11,380
there it seems to be some problems with

411
00:16:08,950 --> 00:16:13,390
the display on Windows so the last line

412
00:16:11,380 --> 00:16:15,790
should be kind of fail warned info

413
00:16:13,390 --> 00:16:18,580
ignore it seems to have kind of messed

414
00:16:15,790 --> 00:16:21,069
that up on Linux it works fine but of

415
00:16:18,580 --> 00:16:24,660
course it's a demo so things are going

416
00:16:21,070 --> 00:16:27,940
to go wrong but that basically shows you

417
00:16:24,660 --> 00:16:34,000
that you can run this very quickly and

418
00:16:27,940 --> 00:16:36,190
you can change it to two pass and fail

419
00:16:34,000 --> 00:16:38,200
exactly what you want so that so have a

420
00:16:36,190 --> 00:16:40,270
look through they run this against your

421
00:16:38,200 --> 00:16:41,980
applications you just need a one-line

422
00:16:40,270 --> 00:16:43,480
you can and then you can see right well

423
00:16:41,980 --> 00:16:45,760
these particular things we don't care

424
00:16:43,480 --> 00:16:47,980
about so mock miss ignore and these are

425
00:16:45,760 --> 00:16:50,500
the things we do really care about and

426
00:16:47,980 --> 00:16:52,839
fail it all passes you get a zero back

427
00:16:50,500 --> 00:16:54,190
if it warns I think Warren is one and

428
00:16:52,839 --> 00:16:56,709
fail as to something else like that

429
00:16:54,190 --> 00:16:59,350
where you can tell a difference so you

430
00:16:56,709 --> 00:17:02,469
can what we do within Mozilla is we have

431
00:16:59,350 --> 00:17:04,540
Jenkins and when we get such promoted

432
00:17:02,470 --> 00:17:07,630
from development to stage this runs and

433
00:17:04,540 --> 00:17:09,819
therefore we can see whether all of the

434
00:17:07,630 --> 00:17:11,950
mandatory controls it with better

435
00:17:09,819 --> 00:17:13,629
we're in place at the moment we're not

436
00:17:11,950 --> 00:17:15,580
we're just warning the developers we're

437
00:17:13,630 --> 00:17:19,060
not failing the deployment but at some

438
00:17:15,579 --> 00:17:20,379
point we'll switch over to fail it what

439
00:17:19,060 --> 00:17:23,169
I've done I've got some slides here show

440
00:17:20,380 --> 00:17:24,400
the usage in case the demos didn't work

441
00:17:23,170 --> 00:17:27,070
for whatever reason I'm not going to go

442
00:17:24,400 --> 00:17:28,780
through all of these options this is

443
00:17:27,069 --> 00:17:30,610
actually on the weekly release rather

444
00:17:28,780 --> 00:17:32,800
than the stable one so the more options

445
00:17:30,610 --> 00:17:35,379
here cuz I've been adding them but there

446
00:17:32,800 --> 00:17:37,870
is a - there's a top zap option so you

447
00:17:35,380 --> 00:17:39,510
can specify any zap command-line options

448
00:17:37,870 --> 00:17:41,530
which is kind of useful

449
00:17:39,510 --> 00:17:44,260
and there's the output which you've

450
00:17:41,530 --> 00:17:47,110
already seen with the kind of looks a

451
00:17:44,260 --> 00:17:49,330
bit better on there and what you can do

452
00:17:47,110 --> 00:17:51,969
is you can got example here running it

453
00:17:49,330 --> 00:17:53,590
running in circles CI which are you can

454
00:17:51,970 --> 00:17:56,710
have a look at when you get the slides

455
00:17:53,590 --> 00:18:00,250
later and that's a configuration file

456
00:17:56,710 --> 00:18:02,830
that I showed you so that's the baseline

457
00:18:00,250 --> 00:18:05,170
scan so it's nice and simple and it

458
00:18:02,830 --> 00:18:06,939
gives you that very quick kind of finger

459
00:18:05,170 --> 00:18:08,620
in the air feeling about the application

460
00:18:06,940 --> 00:18:10,540
and see where you got certain mandatory

461
00:18:08,620 --> 00:18:12,610
things in place it is not a complete

462
00:18:10,540 --> 00:18:14,170
scan it is you know you're limited to

463
00:18:12,610 --> 00:18:16,030
one minute which you can increase and

464
00:18:14,170 --> 00:18:18,610
you can use the aged expired as well as

465
00:18:16,030 --> 00:18:20,200
that if your site needs that it's not

466
00:18:18,610 --> 00:18:21,790
saying that your site has no

467
00:18:20,200 --> 00:18:23,680
vulnerabilities but it you know it's

468
00:18:21,790 --> 00:18:27,100
saying passes that kind of mandatory

469
00:18:23,680 --> 00:18:29,350
simple baseline so where can you go from

470
00:18:27,100 --> 00:18:32,110
there we've got some we're calling a

471
00:18:29,350 --> 00:18:34,360
mass baselines scan and what this does

472
00:18:32,110 --> 00:18:36,580
it kind of wraps around the baseline

473
00:18:34,360 --> 00:18:39,189
scan and it provides a simple dashboard

474
00:18:36,580 --> 00:18:41,740
shows you the detail results and shows

475
00:18:39,190 --> 00:18:44,590
the per service history and what we have

476
00:18:41,740 --> 00:18:46,720
is we have everything's on github so we

477
00:18:44,590 --> 00:18:48,220
have a Z a proxy organization and we

478
00:18:46,720 --> 00:18:50,260
have something called community scripts

479
00:18:48,220 --> 00:18:52,600
so here's where anyone can contribute

480
00:18:50,260 --> 00:18:54,730
scripts now they used to be just the

481
00:18:52,600 --> 00:18:56,439
ones that ran within zap but we've now

482
00:18:54,730 --> 00:18:58,780
got an API section so these are ones

483
00:18:56,440 --> 00:19:03,400
driving the SAP API and we've just added

484
00:18:58,780 --> 00:19:07,060
the mass baselines directory and what

485
00:19:03,400 --> 00:19:08,830
happens is these scripts will allow you

486
00:19:07,060 --> 00:19:12,280
to run the baseline against a whole set

487
00:19:08,830 --> 00:19:14,560
of your services and then it'll actually

488
00:19:12,280 --> 00:19:16,960
create a set of markdown files which can

489
00:19:14,560 --> 00:19:19,540
be you can push into your private docker

490
00:19:16,960 --> 00:19:22,720
repo and that's a all we do Mozilla so

491
00:19:19,540 --> 00:19:24,070
we have a summary which and this summary

492
00:19:22,720 --> 00:19:26,540
is on the

493
00:19:24,070 --> 00:19:29,620
community strips repos so just go to the

494
00:19:26,540 --> 00:19:31,790
Wiccan you'll find it and we have a a

495
00:19:29,620 --> 00:19:33,830
dashboard like this in Mozilla and we've

496
00:19:31,790 --> 00:19:36,710
got over 70 sites on there and you can

497
00:19:33,830 --> 00:19:41,419
see you get the kind of the read status

498
00:19:36,710 --> 00:19:43,100
for the green and orange fail pass and

499
00:19:41,420 --> 00:19:44,750
warn and you click on the history you

500
00:19:43,100 --> 00:19:46,820
can see the number of vulnerabilities

501
00:19:44,750 --> 00:19:48,410
you click on the status you actually get

502
00:19:46,820 --> 00:19:53,389
that output so you can see exactly which

503
00:19:48,410 --> 00:19:55,820
ones failed so that's the mass baseline

504
00:19:53,390 --> 00:19:57,890
scan so that gives you a couple of

505
00:19:55,820 --> 00:19:59,780
things you can do very quickly you don't

506
00:19:57,890 --> 00:20:01,640
have to have any great technology about

507
00:19:59,780 --> 00:20:02,960
that when things of the passive scan is

508
00:20:01,640 --> 00:20:04,760
that we actually have very few false

509
00:20:02,960 --> 00:20:06,980
positives and if you do have false

510
00:20:04,760 --> 00:20:08,270
positives let us know then you have some

511
00:20:06,980 --> 00:20:09,230
exceptions you want to figure out

512
00:20:08,270 --> 00:20:10,460
there's quite a few ways you can

513
00:20:09,230 --> 00:20:13,670
configure those out but I won't go

514
00:20:10,460 --> 00:20:16,010
through those quite just now once you've

515
00:20:13,670 --> 00:20:17,240
got that the more interesting thing is

516
00:20:16,010 --> 00:20:18,110
when you get to the full scans we're

517
00:20:17,240 --> 00:20:18,860
actually going to attack your

518
00:20:18,110 --> 00:20:21,409
applications

519
00:20:18,860 --> 00:20:24,649
we got various options for this we have

520
00:20:21,410 --> 00:20:26,600
a command line option which works but

521
00:20:24,650 --> 00:20:28,760
it's very simple and doesn't give you

522
00:20:26,600 --> 00:20:30,050
much flexibility there's a Jenkins

523
00:20:28,760 --> 00:20:31,760
plugin which I'll talk a little bit

524
00:20:30,050 --> 00:20:34,399
about and there's another set of scripts

525
00:20:31,760 --> 00:20:36,620
and then there's you can just start up

526
00:20:34,400 --> 00:20:39,350
zap in daemon mode and have full control

527
00:20:36,620 --> 00:20:41,239
over using the API we are also working

528
00:20:39,350 --> 00:20:44,449
on something called zaps a service or

529
00:20:41,240 --> 00:20:46,160
zas got nothing published yet but we

530
00:20:44,450 --> 00:20:47,510
just want to need to spend a bit more

531
00:20:46,160 --> 00:20:49,160
time honest but Avera wants to get

532
00:20:47,510 --> 00:20:50,870
involved in developing matter we're

533
00:20:49,160 --> 00:20:55,370
always on the lookout for people to help

534
00:20:50,870 --> 00:20:58,010
out so here's an example the quick-like

535
00:20:55,370 --> 00:21:01,820
command-line quick scan you just say zap

536
00:20:58,010 --> 00:21:03,860
tom sh or bat on windows - command -

537
00:21:01,820 --> 00:21:05,600
quick URL there's the target we need an

538
00:21:03,860 --> 00:21:08,840
optionally - quick progress so it will

539
00:21:05,600 --> 00:21:10,639
show you the little spinny things sure

540
00:21:08,840 --> 00:21:12,439
how far it's got and then it just dumps

541
00:21:10,640 --> 00:21:14,090
out the results to the command line by

542
00:21:12,440 --> 00:21:16,340
default and thinking save them to a file

543
00:21:14,090 --> 00:21:18,770
but that's kind of that's it and that's

544
00:21:16,340 --> 00:21:20,959
all I'm going to say about that there's

545
00:21:18,770 --> 00:21:23,120
a Jenkins plugin this is maintained by

546
00:21:20,960 --> 00:21:25,280
third-party so it's not from the sap

547
00:21:23,120 --> 00:21:26,719
core team it requires full SAP install I

548
00:21:25,280 --> 00:21:27,889
don't think they can use docker at the

549
00:21:26,720 --> 00:21:30,110
moment they might have changed that

550
00:21:27,890 --> 00:21:32,060
recently it does support authentication

551
00:21:30,110 --> 00:21:34,219
and support scan policies which is great

552
00:21:32,060 --> 00:21:36,110
I'd only says flexible as Drive the full

553
00:21:34,220 --> 00:21:37,460
API and got full control but the

554
00:21:36,110 --> 00:21:39,379
developers of this

555
00:21:37,460 --> 00:21:41,150
are on the Zap developer group and have

556
00:21:39,380 --> 00:21:42,710
been pretty responsive so if you have so

557
00:21:41,150 --> 00:21:45,800
if you have any problems you can contact

558
00:21:42,710 --> 00:21:47,120
them that way and so if you use Jenkins

559
00:21:45,800 --> 00:21:50,930
this could be a good option it's well

560
00:21:47,120 --> 00:21:54,770
worth having a look at this and recently

561
00:21:50,930 --> 00:21:57,320
a well-known travel company contributed

562
00:21:54,770 --> 00:21:59,210
the SDLC integration scripts which are

563
00:21:57,320 --> 00:22:01,010
really great so these are like a another

564
00:21:59,210 --> 00:22:02,600
step up from the baseline scan and I

565
00:22:01,010 --> 00:22:03,860
think they you can configure the rules

566
00:22:02,600 --> 00:22:06,080
and seem a similar way with that

567
00:22:03,860 --> 00:22:08,060
configuration file and so the supports

568
00:22:06,080 --> 00:22:10,159
spidering passive scanning and adaptive

569
00:22:08,060 --> 00:22:11,750
scanning it's sports authentication and

570
00:22:10,160 --> 00:22:14,390
they've got JIRA integration in there as

571
00:22:11,750 --> 00:22:16,040
well things pretty much Linux only you

572
00:22:14,390 --> 00:22:19,190
might be able to hack the scripts around

573
00:22:16,040 --> 00:22:21,050
to to work on Windows and does require a

574
00:22:19,190 --> 00:22:25,700
bit of file editing but it's it's well

575
00:22:21,050 --> 00:22:27,169
worth having a look at those now before

576
00:22:25,700 --> 00:22:29,180
I get into the into the depths of the

577
00:22:27,170 --> 00:22:32,570
API I'm going to mention some useful

578
00:22:29,180 --> 00:22:34,460
command-line options we have so ins that

579
00:22:32,570 --> 00:22:37,280
we're currently using an H SQL DB

580
00:22:34,460 --> 00:22:39,560
database and one thing it has a recovery

581
00:22:37,280 --> 00:22:41,149
log database recovery log which if

582
00:22:39,560 --> 00:22:43,429
you're working with a desktop tool is

583
00:22:41,150 --> 00:22:45,890
actually really good in case yeah yeah

584
00:22:43,430 --> 00:22:47,510
machine crashes or god forbid zap

585
00:22:45,890 --> 00:22:50,570
crashes you've still be able to recover

586
00:22:47,510 --> 00:22:52,820
all your work hopefully with automated

587
00:22:50,570 --> 00:22:53,990
scans that's probably less important you

588
00:22:52,820 --> 00:22:55,040
know it's something if something goes

589
00:22:53,990 --> 00:22:56,390
horribly wrong with automation you

590
00:22:55,040 --> 00:22:57,230
probably want to fix it to make sure

591
00:22:56,390 --> 00:23:00,740
that doesn't happen again

592
00:22:57,230 --> 00:23:02,330
and you can just rerun things so you

593
00:23:00,740 --> 00:23:05,150
probably don't need the recovery log and

594
00:23:02,330 --> 00:23:07,399
if you turn off it runs faster this is

595
00:23:05,150 --> 00:23:10,070
good so there's command-line option and

596
00:23:07,400 --> 00:23:12,410
the - config basically zap has a

597
00:23:10,070 --> 00:23:14,629
configuration file which is XML and you

598
00:23:12,410 --> 00:23:16,970
can set any of those options we just use

599
00:23:14,630 --> 00:23:18,650
dot notation for the XML equivalent and

600
00:23:16,970 --> 00:23:19,970
just - configure then you can set

601
00:23:18,650 --> 00:23:23,000
anything you like that you can set

602
00:23:19,970 --> 00:23:24,800
father UI we have an option to update

603
00:23:23,000 --> 00:23:28,730
all of the add-ons and this is pretty

604
00:23:24,800 --> 00:23:30,470
good because I mentioned zap has it has

605
00:23:28,730 --> 00:23:33,800
a plug-in architecture so we have a lot

606
00:23:30,470 --> 00:23:35,720
of add-ons actually a lot of the core

607
00:23:33,800 --> 00:23:37,610
features of zap are implemented as

608
00:23:35,720 --> 00:23:40,070
add-ons and we do that so that we can

609
00:23:37,610 --> 00:23:43,459
update them at any time we push out full

610
00:23:40,070 --> 00:23:45,560
releases two three four times a year but

611
00:23:43,460 --> 00:23:48,500
we can push out updates to add-ons at

612
00:23:45,560 --> 00:23:50,250
any point and all of the active and

613
00:23:48,500 --> 00:23:52,080
passive scan rules are implemented

614
00:23:50,250 --> 00:23:54,150
add ons which means we can publish new

615
00:23:52,080 --> 00:23:56,490
ones at any time so you can be scanning

616
00:23:54,150 --> 00:23:58,560
your application one week and you make

617
00:23:56,490 --> 00:23:59,940
no changes the application you scan it

618
00:23:58,560 --> 00:24:01,980
next week if you keep the up add-ons

619
00:23:59,940 --> 00:24:03,210
up-to-date then we might find some

620
00:24:01,980 --> 00:24:06,810
vulnerabilities we didn't find before

621
00:24:03,210 --> 00:24:08,370
because we've improved our rules and you

622
00:24:06,810 --> 00:24:09,840
want to install a non-default add-on

623
00:24:08,370 --> 00:24:11,699
particularly running so the dot fire

624
00:24:09,840 --> 00:24:13,620
docker you can just specify it for a by

625
00:24:11,700 --> 00:24:15,420
an - add-on install and then the add-on

626
00:24:13,620 --> 00:24:19,500
name you can specify as many of those as

627
00:24:15,420 --> 00:24:21,930
you want when you start zap you we now

628
00:24:19,500 --> 00:24:24,210
force you to get an API key it gets

629
00:24:21,930 --> 00:24:25,500
generated for you which is fine in

630
00:24:24,210 --> 00:24:28,140
desktop mode because you can just look

631
00:24:25,500 --> 00:24:29,730
look at the zap UI and see what is not

632
00:24:28,140 --> 00:24:31,260
so good in automation because it's hard

633
00:24:29,730 --> 00:24:32,940
to get hold off so what you want to do

634
00:24:31,260 --> 00:24:35,100
is you want to set the API key yourself

635
00:24:32,940 --> 00:24:36,450
to something suitably random unless

636
00:24:35,100 --> 00:24:38,100
you're in a safe environment in which

637
00:24:36,450 --> 00:24:39,870
case there's an option to disable it but

638
00:24:38,100 --> 00:24:44,959
do make sure you're in a safe

639
00:24:39,870 --> 00:24:44,959
environment swig of water

640
00:24:50,070 --> 00:24:54,360
so the rest of this talk is to be

641
00:24:52,470 --> 00:24:56,310
talking about these app API which is

642
00:24:54,360 --> 00:24:58,530
something which we I probably don't talk

643
00:24:56,310 --> 00:25:00,090
enough about and documented as well as

644
00:24:58,530 --> 00:25:02,040
maybe we could do so I'm going to give a

645
00:25:00,090 --> 00:25:04,110
quick introduction to the API I'm going

646
00:25:02,040 --> 00:25:06,030
to talk about exploring scanning

647
00:25:04,110 --> 00:25:08,760
reporting and then gotta get on to

648
00:25:06,030 --> 00:25:10,190
authenticating and and tuning so much

649
00:25:08,760 --> 00:25:14,970
time we got

650
00:25:10,190 --> 00:25:17,040
so the API is rest ish it only uses get

651
00:25:14,970 --> 00:25:18,750
requests which is actually quite useful

652
00:25:17,040 --> 00:25:21,240
as you'll see in a minute we have a

653
00:25:18,750 --> 00:25:23,910
standard format which is there and it

654
00:25:21,240 --> 00:25:26,370
does map very closely to the UI into the

655
00:25:23,910 --> 00:25:28,680
code and because of that it's actually

656
00:25:26,370 --> 00:25:31,709
very helpful to understand the SAP UI

657
00:25:28,680 --> 00:25:34,920
before delving into the API there is a

658
00:25:31,710 --> 00:25:36,000
basic web UI it's not very pretty but

659
00:25:34,920 --> 00:25:38,120
it's functional it's actually very

660
00:25:36,000 --> 00:25:40,650
useful particularly for demos like this

661
00:25:38,120 --> 00:25:42,810
and we have clients in a whole range of

662
00:25:40,650 --> 00:25:46,140
languages the ones the core team

663
00:25:42,810 --> 00:25:47,730
supporter maintainer Java and Python but

664
00:25:46,140 --> 00:25:50,430
other people have contributed a lot of

665
00:25:47,730 --> 00:25:52,140
other API tzer's clients as well and

666
00:25:50,430 --> 00:25:55,500
those those are all generated from the

667
00:25:52,140 --> 00:25:56,730
code so but if you want to if you need

668
00:25:55,500 --> 00:26:00,690
any other languages and want to help

669
00:25:56,730 --> 00:26:02,430
contribute then just get in touch and if

670
00:26:00,690 --> 00:26:06,750
you play around with the API

671
00:26:02,430 --> 00:26:09,180
protip use the desktop UI first and then

672
00:26:06,750 --> 00:26:10,770
if you've got a complex configuration

673
00:26:09,180 --> 00:26:12,930
particularly things like context and

674
00:26:10,770 --> 00:26:14,970
scan policies then it's best to

675
00:26:12,930 --> 00:26:16,710
configure them in the UI you can export

676
00:26:14,970 --> 00:26:18,450
those as files and you can import them

677
00:26:16,710 --> 00:26:21,330
via the API it's much quicker than

678
00:26:18,450 --> 00:26:23,790
trying to work out all the API calls so

679
00:26:21,330 --> 00:26:26,070
the app do that reproduce with the API

680
00:26:23,790 --> 00:26:34,700
UI if you want and finally convert to a

681
00:26:26,070 --> 00:26:43,280
script so time for demo so what I'll do

682
00:26:34,700 --> 00:26:45,720
is I have SAP running and I have the

683
00:26:43,280 --> 00:26:47,840
project store which is a deliberately

684
00:26:45,720 --> 00:26:50,550
vulnerable application I wrote ages ago

685
00:26:47,840 --> 00:26:53,370
some of you may have installed now if I

686
00:26:50,550 --> 00:26:56,340
just select one of these pages you'll

687
00:26:53,370 --> 00:26:59,070
see that we're proxying through zap so

688
00:26:56,340 --> 00:27:00,300
what am i using foxy proxy but all you

689
00:26:59,070 --> 00:27:02,490
have to do is you have to configure your

690
00:27:00,300 --> 00:27:03,779
browser to proxy through zap and you

691
00:27:02,490 --> 00:27:06,719
should also import

692
00:27:03,779 --> 00:27:09,359
the SAP root CA so we have a CA

693
00:27:06,719 --> 00:27:11,340
certificate in zap which get generated

694
00:27:09,359 --> 00:27:16,769
for every user and that means we can

695
00:27:11,340 --> 00:27:19,769
actually intercept tls/ssl configs which

696
00:27:16,769 --> 00:27:21,059
is a traffic which is very useful in

697
00:27:19,769 --> 00:27:23,460
this case I'm not using I'm just using

698
00:27:21,059 --> 00:27:26,789
HTTP role in HTTP as you can see I'm

699
00:27:23,460 --> 00:27:28,499
proxying Val's app and in zap you

700
00:27:26,789 --> 00:27:30,539
haven't seen it before we have the

701
00:27:28,499 --> 00:27:32,359
site's tree so you can see the structure

702
00:27:30,539 --> 00:27:34,889
of your application here you can see the

703
00:27:32,359 --> 00:27:36,389
different requests down here and if you

704
00:27:34,889 --> 00:27:37,889
look you can actually see that the

705
00:27:36,389 --> 00:27:40,109
requesting the details of the request

706
00:27:37,889 --> 00:27:42,959
and response now to explore an

707
00:27:40,109 --> 00:27:45,718
application what you can do you can do

708
00:27:42,960 --> 00:27:47,759
things like actually know what what I'm

709
00:27:45,719 --> 00:27:49,979
going to do now is first of all show you

710
00:27:47,759 --> 00:27:58,169
there's app API try and stick to the

711
00:27:49,979 --> 00:28:00,509
script so this is the repay so you just

712
00:27:58,169 --> 00:28:02,609
points the or browser directly to the

713
00:28:00,509 --> 00:28:05,429
host and port this app is listening on

714
00:28:02,609 --> 00:28:07,769
the first link is the local API and so

715
00:28:05,429 --> 00:28:09,629
these are all the components that the

716
00:28:07,769 --> 00:28:13,799
internal components within zap which

717
00:28:09,629 --> 00:28:17,639
support the API so one of the key ones

718
00:28:13,799 --> 00:28:20,339
is core so have a look at that and we

719
00:28:17,639 --> 00:28:22,738
have things called views views means you

720
00:28:20,339 --> 00:28:25,168
just see things we are actions which do

721
00:28:22,739 --> 00:28:27,659
things and we have others which return

722
00:28:25,169 --> 00:28:29,700
data within a non-standard format which

723
00:28:27,659 --> 00:28:33,690
I'll explain in a minute if you have a

724
00:28:29,700 --> 00:28:36,269
look at the sites then what you can do

725
00:28:33,690 --> 00:28:39,330
is you can choose your output format so

726
00:28:36,269 --> 00:28:41,549
we support Jason HTML XML JSON P is

727
00:28:39,330 --> 00:28:43,678
disabled unless you choose to enable it

728
00:28:41,549 --> 00:28:45,359
because it's kind of insecure but if you

729
00:28:43,679 --> 00:28:48,499
just do that sites you can see we've got

730
00:28:45,359 --> 00:28:52,320
one site in there which kind of

731
00:28:48,499 --> 00:28:55,139
maps to what you'll see with zap so

732
00:28:52,320 --> 00:28:59,279
we've got one site and if you want to

733
00:28:55,139 --> 00:29:02,508
have a look about in HTML then you can

734
00:28:59,279 --> 00:29:07,589
see it like that so I'll go back to the

735
00:29:02,509 --> 00:29:09,179
Jason version and we can do because we

736
00:29:07,589 --> 00:29:12,869
just won't get requests you can actually

737
00:29:09,179 --> 00:29:16,090
copy that and I've got a docker command

738
00:29:12,869 --> 00:29:19,600
line so I'm going to go curl

739
00:29:16,090 --> 00:29:23,740
and paste that URL in and we get the

740
00:29:19,600 --> 00:29:25,360
site so the a the API UI is a great way

741
00:29:23,740 --> 00:29:27,160
to try things out and then if you want

742
00:29:25,360 --> 00:29:30,010
to drive them directly from another tool

743
00:29:27,160 --> 00:29:32,880
or the angle the relevant client API you

744
00:29:30,010 --> 00:29:35,560
can just Drew drive the the API directly

745
00:29:32,880 --> 00:29:37,570
and you can work out whatever weird

746
00:29:35,560 --> 00:29:41,110
parameters you need and we can go back

747
00:29:37,570 --> 00:29:44,980
and we can see right what else we got we

748
00:29:41,110 --> 00:29:46,990
have this slightly the URLs so have a

749
00:29:44,980 --> 00:29:55,660
look at the URLs so we're going to find

750
00:29:46,990 --> 00:30:01,510
a few URLs we can copy that and there we

751
00:29:55,660 --> 00:30:04,960
got the URLs so it's this allows you to

752
00:30:01,510 --> 00:30:07,360
navigate your way around the API and try

753
00:30:04,960 --> 00:30:11,410
things out and hopefully we're using

754
00:30:07,360 --> 00:30:12,429
kind of similar terms so if anything to

755
00:30:11,410 --> 00:30:15,820
the context we'll probably in the

756
00:30:12,430 --> 00:30:18,910
context thing HTTP sessions scripts

757
00:30:15,820 --> 00:30:21,040
selenium spider basically the more you

758
00:30:18,910 --> 00:30:23,110
understand the UI the bed of these it

759
00:30:21,040 --> 00:30:30,639
will be to understand more how to drive

760
00:30:23,110 --> 00:30:32,500
the API hopefully so I want to give a

761
00:30:30,640 --> 00:30:34,510
very quick introduction to the Python

762
00:30:32,500 --> 00:30:36,970
API this is the API that I tend to use

763
00:30:34,510 --> 00:30:39,879
most of all you can install it for viral

764
00:30:36,970 --> 00:30:43,780
pip install and in script you want to

765
00:30:39,880 --> 00:30:45,580
import SAP v2 from zap v2 they need

766
00:30:43,780 --> 00:30:48,340
there's two ways these are both doing

767
00:30:45,580 --> 00:30:50,260
the same thing the initializing zap

768
00:30:48,340 --> 00:30:51,939
there the first one is with the default

769
00:30:50,260 --> 00:30:54,640
parameters but if you have you're not

770
00:30:51,940 --> 00:30:55,900
listening on the standard host or port

771
00:30:54,640 --> 00:30:58,390
then you might want to change that

772
00:30:55,900 --> 00:31:01,330
because budget by default listen listens

773
00:30:58,390 --> 00:31:04,060
on 8080 I tend to run zap on 8090 so I

774
00:31:01,330 --> 00:31:06,610
tend to use a second one and we've got a

775
00:31:04,060 --> 00:31:08,530
zapped URL open allows you to open a

776
00:31:06,610 --> 00:31:10,659
target and basically that request the

777
00:31:08,530 --> 00:31:13,960
URL proxies through his app so it's

778
00:31:10,660 --> 00:31:16,660
quite a good way to get started so with

779
00:31:13,960 --> 00:31:18,940
automation exploring is absolutely key

780
00:31:16,660 --> 00:31:20,650
the better you explore your application

781
00:31:18,940 --> 00:31:22,060
the more effective your active scanning

782
00:31:20,650 --> 00:31:24,010
will be if you don't explore it very

783
00:31:22,060 --> 00:31:26,679
well then that will seriously impact the

784
00:31:24,010 --> 00:31:30,050
vulnerabilities you can find various

785
00:31:26,680 --> 00:31:32,350
ways of exploring the way I think is

786
00:31:30,050 --> 00:31:34,639
- the best is if you have comprehensive

787
00:31:32,350 --> 00:31:36,280
regression or unit tests that use the

788
00:31:34,640 --> 00:31:38,960
browser will actually make use of

789
00:31:36,280 --> 00:31:41,540
network requests because you can proxy

790
00:31:38,960 --> 00:31:43,490
those through SAP so if you have the

791
00:31:41,540 --> 00:31:45,220
selenium tests or anything else which

792
00:31:43,490 --> 00:31:48,800
you which make real requests serial

793
00:31:45,220 --> 00:31:50,000
service then use those hopefully they

794
00:31:48,800 --> 00:31:51,830
will have you have got a comprehensive

795
00:31:50,000 --> 00:31:54,080
set then they will explain to zap how

796
00:31:51,830 --> 00:31:56,120
you expect the application to be driven

797
00:31:54,080 --> 00:31:57,980
and then that can use those and

798
00:31:56,120 --> 00:31:59,840
manipulate those requests and do some

799
00:31:57,980 --> 00:32:01,810
bad things but it means you're much more

800
00:31:59,840 --> 00:32:03,949
likely to explore the full amount of the

801
00:32:01,810 --> 00:32:07,010
application you know if you register a

802
00:32:03,950 --> 00:32:09,080
user if your application hopefully your

803
00:32:07,010 --> 00:32:10,760
aggression test will put in an email

804
00:32:09,080 --> 00:32:12,889
address so you won't get an error coming

805
00:32:10,760 --> 00:32:14,480
back saying or you might fail in cases

806
00:32:12,890 --> 00:32:16,430
we have some valid cases where you're

807
00:32:14,480 --> 00:32:18,380
using valid data which means app can

808
00:32:16,430 --> 00:32:21,560
actually put in some validated and some

809
00:32:18,380 --> 00:32:23,150
attacks if you don't have those or if

810
00:32:21,560 --> 00:32:24,919
they're not quite full enough or you

811
00:32:23,150 --> 00:32:26,810
just want to do it anyway you might want

812
00:32:24,920 --> 00:32:29,960
to use the spiders so spiders a good way

813
00:32:26,810 --> 00:32:32,000
to find things that your Russian tests

814
00:32:29,960 --> 00:32:33,470
don't cover and actually you can you can

815
00:32:32,000 --> 00:32:34,790
use these to find out the things that

816
00:32:33,470 --> 00:32:36,620
your aggression tests don't cover which

817
00:32:34,790 --> 00:32:38,389
can be useful we have the traditional

818
00:32:36,620 --> 00:32:40,370
spider as I mentioned before just goes

819
00:32:38,390 --> 00:32:42,110
through the links and we have the Ajax

820
00:32:40,370 --> 00:32:45,530
spider which can launch browsers to

821
00:32:42,110 --> 00:32:47,990
click on everything we also have an

822
00:32:45,530 --> 00:32:49,280
alpha add-on for supporting soap so we

823
00:32:47,990 --> 00:32:52,220
have a soap definition I'll actually

824
00:32:49,280 --> 00:32:55,040
pick that up and populate that in the

825
00:32:52,220 --> 00:33:00,170
site's tree and we have another Alfred

826
00:32:55,040 --> 00:33:03,980
on for importing mod security to dogs so

827
00:33:00,170 --> 00:33:10,100
let's have a look at the spider so we'll

828
00:33:03,980 --> 00:33:12,650
do first of all is all good to zap and

829
00:33:10,100 --> 00:33:15,110
I'll just show you with the UI right

830
00:33:12,650 --> 00:33:16,760
click everywhere there's so many options

831
00:33:15,110 --> 00:33:20,330
with that we try not to overload people

832
00:33:16,760 --> 00:33:22,250
and they actually see that there's loads

833
00:33:20,330 --> 00:33:23,899
more FLE we have lots more tabs here

834
00:33:22,250 --> 00:33:25,190
which you can do things we try and just

835
00:33:23,900 --> 00:33:28,520
show you the most obvious the ones

836
00:33:25,190 --> 00:33:30,110
you'll use all the time but basically

837
00:33:28,520 --> 00:33:32,540
yeah definitely right-click everywhere

838
00:33:30,110 --> 00:33:35,840
and here we got an attack option and

839
00:33:32,540 --> 00:33:37,220
spider and by default you don't get to

840
00:33:35,840 --> 00:33:39,169
see the Advanced tab you just get a

841
00:33:37,220 --> 00:33:41,240
starting point I haven't defined a

842
00:33:39,170 --> 00:33:42,560
context context in zap terms are like

843
00:33:41,240 --> 00:33:43,640
applications but they can be whatever

844
00:33:42,560 --> 00:33:46,100
you like

845
00:33:43,640 --> 00:33:47,840
of applications we haven't defined a

846
00:33:46,100 --> 00:33:50,270
context um to find any users so we can't

847
00:33:47,840 --> 00:33:51,530
use those by default you probably want

848
00:33:50,270 --> 00:33:53,660
to recurse but you might not

849
00:33:51,530 --> 00:33:55,850
and by recurse it means going through

850
00:33:53,660 --> 00:33:59,480
all the plan nodes underneath to find a

851
00:33:55,850 --> 00:34:00,949
starting point for the spider we don't

852
00:33:59,480 --> 00:34:02,660
want to just spider this subtree were

853
00:34:00,950 --> 00:34:04,760
happy to break out of it just on this

854
00:34:02,660 --> 00:34:07,640
site and if you look at Advanced Options

855
00:34:04,760 --> 00:34:09,679
we've got things like maximum children

856
00:34:07,640 --> 00:34:12,440
took full maximum duration things like

857
00:34:09,679 --> 00:34:14,929
that so I'm going to kick that off and

858
00:34:12,440 --> 00:34:18,710
you'll see happens very quickly down

859
00:34:14,929 --> 00:34:21,740
here it shows you all of the URLs and we

860
00:34:18,710 --> 00:34:23,600
get to see all of these new your URLs in

861
00:34:21,739 --> 00:34:26,359
the site's tree but that was just

862
00:34:23,600 --> 00:34:28,489
showing you how to do it from the UI

863
00:34:26,360 --> 00:34:32,570
what I wanted to do really want to do is

864
00:34:28,489 --> 00:34:34,399
show you the API so if we go to so the

865
00:34:32,570 --> 00:34:37,700
top-level we've got all the components

866
00:34:34,399 --> 00:34:39,109
with a spider component and go through

867
00:34:37,699 --> 00:34:41,960
all the views which we're not interested

868
00:34:39,110 --> 00:34:46,159
at this moment we have an option to scan

869
00:34:41,960 --> 00:34:52,060
and this has a URL better get this right

870
00:34:46,159 --> 00:34:52,060
so I will paste this in

871
00:34:58,420 --> 00:35:03,080
not gonna max children recurse we do

872
00:35:01,610 --> 00:35:06,230
want to recurse we're not going specify

873
00:35:03,080 --> 00:35:07,970
a Content context so max children II

874
00:35:06,230 --> 00:35:09,800
notice a lot of these terms are

875
00:35:07,970 --> 00:35:11,689
basically the same as you sit the UI we

876
00:35:09,800 --> 00:35:14,090
have got a full set of options advanced

877
00:35:11,690 --> 00:35:17,210
options like switch sure you can

878
00:35:14,090 --> 00:35:19,600
actually see that as well then when I

879
00:35:17,210 --> 00:35:21,710
kick this off you'll see the spider runs

880
00:35:19,600 --> 00:35:25,400
now you might have noticed we actually

881
00:35:21,710 --> 00:35:27,680
got this scan won back before the Scott

882
00:35:25,400 --> 00:35:30,770
spider finished so that is actually our

883
00:35:27,680 --> 00:35:35,230
scan ID if I go back what you'll see is

884
00:35:30,770 --> 00:35:37,850
one of the views we can see status and

885
00:35:35,230 --> 00:35:39,110
the scan idea is not mandatory because

886
00:35:37,850 --> 00:35:40,910
by default would give you the last one

887
00:35:39,110 --> 00:35:44,030
but you can specify it but if I just

888
00:35:40,910 --> 00:35:46,629
click on that you'll see state is 100%

889
00:35:44,030 --> 00:35:49,100
it was scan ID one so we can check

890
00:35:46,630 --> 00:35:53,020
particularly that one and we can check

891
00:35:49,100 --> 00:35:56,509
ID to just out of interest and we'll see

892
00:35:53,020 --> 00:36:00,290
that it doesn't exist so it's very

893
00:35:56,510 --> 00:36:02,390
similar running the AP of using the API

894
00:36:00,290 --> 00:36:03,920
to use in the UI but for anything that

895
00:36:02,390 --> 00:36:06,410
takes any length of time you won't get

896
00:36:03,920 --> 00:36:09,109
in you'll just get an ID which can they

897
00:36:06,410 --> 00:36:10,910
use on other requests and one thing if

898
00:36:09,109 --> 00:36:13,340
you ever have a look we can go down and

899
00:36:10,910 --> 00:36:18,109
see the results so let's have a look at

900
00:36:13,340 --> 00:36:20,960
the results for scan one and we'll have

901
00:36:18,109 --> 00:36:23,210
it as XML and there you go we can see

902
00:36:20,960 --> 00:36:28,550
all of the URLs that we found in that

903
00:36:23,210 --> 00:36:34,160
spider and the other thing I'm going to

904
00:36:28,550 --> 00:36:35,869
do is only go back and kick off the scan

905
00:36:34,160 --> 00:36:37,000
again just for the hell of it you'll see

906
00:36:35,869 --> 00:36:40,810
why in a minute

907
00:36:37,000 --> 00:36:40,810
so scan

908
00:36:45,180 --> 00:36:52,490
they're off and it's finished I'll copy

909
00:36:47,730 --> 00:36:59,760
that and I'll go to the command line and

910
00:36:52,490 --> 00:37:01,709
I will go curl paste that in and it's

911
00:36:59,760 --> 00:37:06,900
missing a parameter yeah ah because I

912
00:37:01,710 --> 00:37:13,109
forgot to put in quotes quote control V

913
00:37:06,900 --> 00:37:14,880
quote there we go so you can use the D

914
00:37:13,109 --> 00:37:18,750
you can play around with the UI then you

915
00:37:14,880 --> 00:37:20,700
can move to the HTM the web version of

916
00:37:18,750 --> 00:37:23,069
the a of the API controller that and

917
00:37:20,700 --> 00:37:24,990
they can copy and paste those URL so you

918
00:37:23,069 --> 00:37:32,579
just using get request is actually quite

919
00:37:24,990 --> 00:37:34,529
useful for that so if you want do the

920
00:37:32,579 --> 00:37:36,960
same kind of thing using the Python API

921
00:37:34,529 --> 00:37:40,020
the Python client you can see we've got

922
00:37:36,960 --> 00:37:41,670
a zap dot spider dot scan your target in

923
00:37:40,020 --> 00:37:42,869
this case we're sleeping for 5 seconds

924
00:37:41,670 --> 00:37:44,190
just give a chance to start

925
00:37:42,869 --> 00:37:45,869
they'll probably finish in that time and

926
00:37:44,190 --> 00:37:48,960
then what we're doing is we're looping

927
00:37:45,869 --> 00:37:51,569
around and polling the status waiting

928
00:37:48,960 --> 00:37:54,420
till it's got to 100% then we go yeah

929
00:37:51,569 --> 00:37:57,900
it's finished so very similar to what I

930
00:37:54,420 --> 00:38:00,390
was doing manually for the Ajax spider

931
00:37:57,900 --> 00:38:03,150
it's similar but not quite the same the

932
00:38:00,390 --> 00:38:05,009
Ajax spider doesn't have a percentage we

933
00:38:03,150 --> 00:38:06,299
can't get out of this out of selenium it

934
00:38:05,010 --> 00:38:07,470
just kind of clicks on things and

935
00:38:06,299 --> 00:38:10,710
doesn't tell us how far we've got

936
00:38:07,470 --> 00:38:11,970
through so with the Ajax spider it just

937
00:38:10,710 --> 00:38:12,420
tells you if it's running or it's

938
00:38:11,970 --> 00:38:15,419
stopped

939
00:38:12,420 --> 00:38:17,700
so instead of polling for working

940
00:38:15,420 --> 00:38:20,609
comparing 100 we say is it still running

941
00:38:17,700 --> 00:38:21,930
in which case carry on and I'm not going

942
00:38:20,609 --> 00:38:25,980
to demo this because they'll get loads

943
00:38:21,930 --> 00:38:28,230
of browser pop-ups and be a pain so

944
00:38:25,980 --> 00:38:30,539
passive scanning passive scanning

945
00:38:28,230 --> 00:38:32,940
happens all the time you can't you can't

946
00:38:30,539 --> 00:38:34,950
really turn it off if I we don't want to

947
00:38:32,940 --> 00:38:37,440
hopefully don't want to but one thing

948
00:38:34,950 --> 00:38:40,200
you'll find is if you do a spider a very

949
00:38:37,440 --> 00:38:41,880
big site you might find that the passive

950
00:38:40,200 --> 00:38:46,308
scanning actually takes a while to catch

951
00:38:41,880 --> 00:38:49,319
up so and what you can do is we have a

952
00:38:46,309 --> 00:38:53,150
you can poll to find out how far you've

953
00:38:49,319 --> 00:38:57,749
got so let's see if I can show you that

954
00:38:53,150 --> 00:39:01,989
so go back here and go to

955
00:38:57,749 --> 00:39:04,959
peace can and we've got results to scan

956
00:39:01,989 --> 00:39:14,710
and that'll tell 0 which is not

957
00:39:04,960 --> 00:39:19,170
surprising so go in and 0 now I'll just

958
00:39:14,710 --> 00:39:19,170
kick it off from here again

959
00:39:25,869 --> 00:39:32,690
120 I'm done so you can see that it's

960
00:39:30,739 --> 00:39:34,069
we're passively scanning the separate

961
00:39:32,690 --> 00:39:36,410
thread and we do that whether you're

962
00:39:34,069 --> 00:39:39,200
proxying or spidering like that we try

963
00:39:36,410 --> 00:39:40,729
and so it doesn't slow things down

964
00:39:39,200 --> 00:39:43,368
because it would slow you down when

965
00:39:40,729 --> 00:39:45,410
you're proxying but that means when you

966
00:39:43,369 --> 00:39:46,849
finish spidering you might not finish

967
00:39:45,410 --> 00:39:48,558
passes scanning in my and want to wait

968
00:39:46,849 --> 00:39:50,900
into that finished for site as small as

969
00:39:48,559 --> 00:39:52,969
that you see it's pretty quick if you've

970
00:39:50,900 --> 00:39:54,859
got a very large site and we have some

971
00:39:52,969 --> 00:39:56,779
large sites mozilla you will find that i

972
00:39:54,859 --> 00:39:58,670
can take quite a while not a huge amount

973
00:39:56,779 --> 00:40:01,130
of time compared with active scanning

974
00:39:58,670 --> 00:40:03,170
but you know might be a minute or so so

975
00:40:01,130 --> 00:40:06,400
if the big site is well worth waiting

976
00:40:03,170 --> 00:40:06,400
for the passive scanning to finish

977
00:40:08,140 --> 00:40:15,618
active scanning is similar to spidering

978
00:40:11,599 --> 00:40:18,170
so we do get a progress and it's very

979
00:40:15,619 --> 00:40:24,619
similar so it's a scan scan and I'll

980
00:40:18,170 --> 00:40:28,339
show you this so again from the UI we do

981
00:40:24,619 --> 00:40:29,989
attack active scan and without the

982
00:40:28,339 --> 00:40:32,749
Advanced Options you just give a

983
00:40:29,989 --> 00:40:34,940
starting point now I'm not actually

984
00:40:32,749 --> 00:40:36,499
going to kick this off but you can see

985
00:40:34,940 --> 00:40:41,380
we've got these lot of policy context

986
00:40:36,499 --> 00:40:51,680
user so what I want to do is go to the

987
00:40:41,380 --> 00:40:53,599
UI and show you the a scan and under the

988
00:40:51,680 --> 00:40:55,479
actions you will see we've got a couple

989
00:40:53,599 --> 00:40:58,670
of scan we got scan and scanners user

990
00:40:55,479 --> 00:41:01,578
I'm just going to scan and make sure I

991
00:40:58,670 --> 00:41:03,890
get the got a whole load of these are

992
00:41:01,579 --> 00:41:04,670
different ports on so it's worth getting

993
00:41:03,890 --> 00:41:10,009
the right one

994
00:41:04,670 --> 00:41:13,339
and we do want to recurse not in scope

995
00:41:10,009 --> 00:41:16,759
no policy no method no post data so

996
00:41:13,339 --> 00:41:20,150
there is snap and we kick off the scan

997
00:41:16,759 --> 00:41:22,880
and a PC and there with the active scan

998
00:41:20,150 --> 00:41:25,460
is running now what can do now this will

999
00:41:22,880 --> 00:41:29,839
take a bit longer so we can go in and we

1000
00:41:25,460 --> 00:41:32,180
can see right let's see the progress and

1001
00:41:29,839 --> 00:41:36,109
we can check and it's four percent now

1002
00:41:32,180 --> 00:41:38,149
five percent so we can just reload that

1003
00:41:36,109 --> 00:41:39,290
eight percent so see it's tracking the

1004
00:41:38,150 --> 00:41:41,150
UI so using the same day

1005
00:41:39,290 --> 00:41:43,400
- obviously so this is a very quick way

1006
00:41:41,150 --> 00:41:44,750
to do that and you'll find you can do

1007
00:41:43,400 --> 00:41:48,440
some fun things so you can have a look

1008
00:41:44,750 --> 00:41:49,730
down here and what was the if you look

1009
00:41:48,440 --> 00:41:53,030
here you can actually see the scan ID

1010
00:41:49,730 --> 00:41:57,710
that scan ID 0 and we can pause it so we

1011
00:41:53,030 --> 00:42:01,580
can go in and say pause 0 and that will

1012
00:41:57,710 --> 00:42:06,430
then pause it and we can go in and we

1013
00:42:01,580 --> 00:42:10,370
can if you want to resume it we can

1014
00:42:06,430 --> 00:42:13,279
resume so this is one of the reasons why

1015
00:42:10,370 --> 00:42:15,410
a lot of tools like buildings a pin

1016
00:42:13,280 --> 00:42:17,180
because you've got full control it's not

1017
00:42:15,410 --> 00:42:18,830
quite as much control you have by the UI

1018
00:42:17,180 --> 00:42:21,529
but we're kind of working on us we want

1019
00:42:18,830 --> 00:42:24,410
the one to be able to drive zap in any

1020
00:42:21,530 --> 00:42:26,810
way you want and it not matter how

1021
00:42:24,410 --> 00:42:29,990
you're doing it and we can also do

1022
00:42:26,810 --> 00:42:37,130
things I can stop the scan as well so

1023
00:42:29,990 --> 00:42:43,160
let's go scan stop zero and stop and you

1024
00:42:37,130 --> 00:42:46,250
can see it stopped so I see it's very

1025
00:42:43,160 --> 00:42:49,160
similar to driving the spider now the

1026
00:42:46,250 --> 00:42:52,580
reporting we have we can generate an

1027
00:42:49,160 --> 00:42:54,680
HTML report on XML report and actually

1028
00:42:52,580 --> 00:42:58,400
in the weekly version you can generate a

1029
00:42:54,680 --> 00:43:02,480
markdown report as well so just have a

1030
00:42:58,400 --> 00:43:07,340
look go here and this in this case it's

1031
00:43:02,480 --> 00:43:09,860
in the core and what happens is is that

1032
00:43:07,340 --> 00:43:11,600
the API returns obviously data

1033
00:43:09,860 --> 00:43:13,820
structures which get translated into

1034
00:43:11,600 --> 00:43:16,670
whatever you specify whether you specify

1035
00:43:13,820 --> 00:43:19,580
JSON or HTML or XML with the reports

1036
00:43:16,670 --> 00:43:21,460
they're generating HTML reports or XML

1037
00:43:19,580 --> 00:43:24,380
reports so they're not a standard format

1038
00:43:21,460 --> 00:43:25,400
for a SAP API which is why we count them

1039
00:43:24,380 --> 00:43:28,220
as others because they can return

1040
00:43:25,400 --> 00:43:30,200
anything so generate the HTML report and

1041
00:43:28,220 --> 00:43:31,970
there you go so the HTML report you can

1042
00:43:30,200 --> 00:43:34,310
see we've got a couple of cross-site

1043
00:43:31,970 --> 00:43:36,200
scripting vulnerabilities got SQL

1044
00:43:34,310 --> 00:43:43,250
injection so you can get out the same

1045
00:43:36,200 --> 00:43:44,750
report you can do via SAP but one thing

1046
00:43:43,250 --> 00:43:46,430
we'll find out the reports are kind of

1047
00:43:44,750 --> 00:43:48,350
let you know there might not give you

1048
00:43:46,430 --> 00:43:50,299
what you want so what you can you get

1049
00:43:48,350 --> 00:43:52,009
hold of the actual alerts so what we're

1050
00:43:50,300 --> 00:43:52,590
doing here is we're getting holds the

1051
00:43:52,010 --> 00:43:53,760
revert

1052
00:43:52,590 --> 00:43:56,760
and you might find you have a lot of

1053
00:43:53,760 --> 00:44:06,870
alerts so you can page through them so

1054
00:43:56,760 --> 00:44:11,070
we go back to here in the cool we can

1055
00:44:06,870 --> 00:44:13,440
see the alerts and I'm start at zero an

1056
00:44:11,070 --> 00:44:15,420
account of ten and that then gives me

1057
00:44:13,440 --> 00:44:18,810
the first ten alerts which isn't too

1058
00:44:15,420 --> 00:44:20,910
clear so I'll give it as HTML so that's

1059
00:44:18,810 --> 00:44:24,810
the first ten and then we'll start at

1060
00:44:20,910 --> 00:44:26,580
ten and we'll get the next turn so you

1061
00:44:24,810 --> 00:44:27,900
can page through them like that and then

1062
00:44:26,580 --> 00:44:30,930
you can do whatever you want with them

1063
00:44:27,900 --> 00:44:32,220
and that means that you know our reports

1064
00:44:30,930 --> 00:44:34,290
aren't the prettiest things in the world

1065
00:44:32,220 --> 00:44:35,819
and particularly want to integrate with

1066
00:44:34,290 --> 00:44:37,290
with your bug tracker or something

1067
00:44:35,820 --> 00:44:39,710
you'll want to pull those alerts back

1068
00:44:37,290 --> 00:44:42,600
and do whatever you want with them and

1069
00:44:39,710 --> 00:44:44,790
of course because you've kicked off zap

1070
00:44:42,600 --> 00:44:46,319
as a demon you will want to be able to

1071
00:44:44,790 --> 00:44:55,890
shut it down you can do that by the API

1072
00:44:46,320 --> 00:44:58,800
so any questions about the API since you

1073
00:44:55,890 --> 00:45:03,839
using only get requests if you're having

1074
00:44:58,800 --> 00:45:06,060
a very very big commander to give and

1075
00:45:03,840 --> 00:45:09,360
you ever run out from from valuable

1076
00:45:06,060 --> 00:45:10,980
characters yeah it can happen so we've

1077
00:45:09,360 --> 00:45:13,470
got a pull request outstanding for

1078
00:45:10,980 --> 00:45:15,090
supporting post requests as well it

1079
00:45:13,470 --> 00:45:17,430
doesn't it's only been up reported

1080
00:45:15,090 --> 00:45:19,290
recently most of the things particularly

1081
00:45:17,430 --> 00:45:21,060
doing something like loading context you

1082
00:45:19,290 --> 00:45:23,759
can do that for the API from a from a

1083
00:45:21,060 --> 00:45:26,220
file so I think one person's had a

1084
00:45:23,760 --> 00:45:36,030
problem with it and we will sort that

1085
00:45:26,220 --> 00:45:37,799
out and also for the ASX spider how do

1086
00:45:36,030 --> 00:45:42,120
you get around with browser and go but

1087
00:45:37,800 --> 00:45:44,340
ability I mean probably you you support

1088
00:45:42,120 --> 00:45:46,410
Firefox so you support whatever the

1089
00:45:44,340 --> 00:45:48,930
Firefox supports well let's have a look

1090
00:45:46,410 --> 00:45:52,859
at the options we have to look at the

1091
00:45:48,930 --> 00:45:55,230
options and go to selenium we'll see

1092
00:45:52,860 --> 00:45:58,410
you've got chromedriver IE driver

1093
00:45:55,230 --> 00:46:02,610
phantom Jas so we support all of those

1094
00:45:58,410 --> 00:46:06,000
and HTML unit as well and and this is

1095
00:46:02,610 --> 00:46:06,420
used by the spider yeah the HX spider

1096
00:46:06,000 --> 00:46:08,579
user

1097
00:46:06,420 --> 00:46:11,130
but we use it Ferb Dom XSS scanning as

1098
00:46:08,579 --> 00:46:13,740
well so we kind of split the a the

1099
00:46:11,130 --> 00:46:27,269
selenium part separate so can be used by

1100
00:46:13,740 --> 00:46:28,709
other add-ons yeah right so the question

1101
00:46:27,269 --> 00:46:30,299
was with is a support for headless mode

1102
00:46:28,710 --> 00:46:33,029
if you notice there the support for

1103
00:46:30,299 --> 00:46:36,150
phantom j/s that's the headless one and

1104
00:46:33,029 --> 00:46:39,089
also the one advantage of the Zapp

1105
00:46:36,150 --> 00:46:42,119
docker images is we use virtual frame

1106
00:46:39,089 --> 00:46:44,339
buffers so we actually we so we actually

1107
00:46:42,119 --> 00:46:46,829
launch the real instances of Firefox

1108
00:46:44,339 --> 00:46:48,180
which when I've tried phantom j/s and it

1109
00:46:46,829 --> 00:46:53,480
doesn't is not as effective as a real

1110
00:46:48,180 --> 00:46:53,480
browser so it is good to the real Brad

1111
00:46:55,309 --> 00:46:58,769
so when you want to create a scan you

1112
00:46:57,329 --> 00:47:00,950
get the scan ID which links that

1113
00:46:58,769 --> 00:47:04,078
particular this gun how do you link a

1114
00:47:00,950 --> 00:47:06,328
particular instance of proxying some

1115
00:47:04,079 --> 00:47:08,430
tests to a particular scan or do you

1116
00:47:06,329 --> 00:47:10,170
just have to use the latest version so I

1117
00:47:08,430 --> 00:47:12,868
have an endpoint and I run my test

1118
00:47:10,170 --> 00:47:14,039
against it can I assure that the scan

1119
00:47:12,869 --> 00:47:16,049
everyone is against that particular

1120
00:47:14,039 --> 00:47:17,430
proxy or is it just the latest version

1121
00:47:16,049 --> 00:47:22,319
of what's been proxy through that site

1122
00:47:17,430 --> 00:47:23,549
yeah it's if you want to do maybe you'd

1123
00:47:22,319 --> 00:47:25,470
probably want to launch different

1124
00:47:23,549 --> 00:47:28,470
version the instances of zap to do a

1125
00:47:25,470 --> 00:47:30,779
particular scan so zap is very much it's

1126
00:47:28,470 --> 00:47:33,299
still in kind of single user desktop

1127
00:47:30,779 --> 00:47:36,420
mode really I said saps the service will

1128
00:47:33,299 --> 00:47:40,230
will move away from that or wrap it but

1129
00:47:36,420 --> 00:47:41,549
at the moment yeah it's a it is probably

1130
00:47:40,230 --> 00:47:43,380
the latest version of those particular

1131
00:47:41,549 --> 00:47:45,359
potato requests but if you have a

1132
00:47:43,380 --> 00:47:47,519
particular desire to make sure it's this

1133
00:47:45,359 --> 00:47:48,869
particular set of your regression test

1134
00:47:47,519 --> 00:47:50,819
you're gonna be scanning just run those

1135
00:47:48,869 --> 00:47:52,859
just to the scan start a new session

1136
00:47:50,819 --> 00:47:55,049
which you can do by the API adaptive

1137
00:47:52,859 --> 00:47:57,990
brings up down if you don't want to you

1138
00:47:55,049 --> 00:48:00,589
might want to thank you I've got more

1139
00:47:57,990 --> 00:48:03,689
stuff to now thing is we've got to five

1140
00:48:00,589 --> 00:48:05,819
so I'm at a time but we did we had some

1141
00:48:03,690 --> 00:48:07,589
problems the beginning so is everyone

1142
00:48:05,819 --> 00:48:10,680
else is people happy to carry on but

1143
00:48:07,589 --> 00:48:12,390
anyone want me to carry on no normally

1144
00:48:10,680 --> 00:48:14,339
clops you people want to carry on okay

1145
00:48:12,390 --> 00:48:16,710
I'm happy to carry on if you want to get

1146
00:48:14,339 --> 00:48:18,058
out then feel free to leave but I've got

1147
00:48:16,710 --> 00:48:20,690
some more stuff to go through I'll try

1148
00:48:18,059 --> 00:48:20,690
and get through it quickly

1149
00:48:21,840 --> 00:48:26,530
so what I'm going to do now is

1150
00:48:24,040 --> 00:48:28,630
authentication because what we've done

1151
00:48:26,530 --> 00:48:30,820
now is we're scanning an application

1152
00:48:28,630 --> 00:48:32,890
with no authentication and if your

1153
00:48:30,820 --> 00:48:34,380
application has problems without any

1154
00:48:32,890 --> 00:48:36,819
authentication you've got real problems

1155
00:48:34,380 --> 00:48:38,050
it's usually kind of we find that the

1156
00:48:36,820 --> 00:48:39,520
more interesting things that the

1157
00:48:38,050 --> 00:48:41,680
application can do tends to be when

1158
00:48:39,520 --> 00:48:46,150
you're authenticated and authentication

1159
00:48:41,680 --> 00:48:48,160
is hard basic simple forms are we should

1160
00:48:46,150 --> 00:48:50,140
be able to handle straightforwardly we

1161
00:48:48,160 --> 00:48:51,730
have authentication scripts in theory

1162
00:48:50,140 --> 00:48:54,339
they can handle whatever you throw at it

1163
00:48:51,730 --> 00:48:57,280
I've actually managed to sort out a

1164
00:48:54,340 --> 00:48:59,260
script for browser ID which involves

1165
00:48:57,280 --> 00:49:01,360
launching real browsers and doing all

1166
00:48:59,260 --> 00:49:04,060
sorts of horrific stuff but it's not

1167
00:49:01,360 --> 00:49:07,120
easy if you have complex single sign-on

1168
00:49:04,060 --> 00:49:08,560
you may well want to have an alternative

1169
00:49:07,120 --> 00:49:11,170
Yanis in your development staging

1170
00:49:08,560 --> 00:49:12,970
environment you know you can if it's

1171
00:49:11,170 --> 00:49:15,520
really hard for your development for

1172
00:49:12,970 --> 00:49:16,720
your testing tools to test with your

1173
00:49:15,520 --> 00:49:18,280
single sign-on system

1174
00:49:16,720 --> 00:49:20,080
maybe you shouldn't use it when you're

1175
00:49:18,280 --> 00:49:22,390
testing shortly and when you go live

1176
00:49:20,080 --> 00:49:23,049
great but let's try and make it easy for

1177
00:49:22,390 --> 00:49:24,700
ourselves

1178
00:49:23,050 --> 00:49:26,080
don't make life difficult yourself you

1179
00:49:24,700 --> 00:49:28,240
know have another option we do that

1180
00:49:26,080 --> 00:49:30,370
Mozilla we have in staging we have sort

1181
00:49:28,240 --> 00:49:32,500
of special api's that we can call from

1182
00:49:30,370 --> 00:49:34,060
our scanning tools which won't be

1183
00:49:32,500 --> 00:49:37,300
available on live we test they're not

1184
00:49:34,060 --> 00:49:39,160
available live as well and protip use

1185
00:49:37,300 --> 00:49:44,110
the UI to set authentication up because

1186
00:49:39,160 --> 00:49:48,839
it's much easier and this is where I try

1187
00:49:44,110 --> 00:49:54,430
and do it live so as you'll see I'm

1188
00:49:48,840 --> 00:49:56,950
proxying through zap and I'm going to do

1189
00:49:54,430 --> 00:50:01,120
is I'm going to the budget store and one

1190
00:49:56,950 --> 00:50:02,500
thing we don't think of actually what

1191
00:50:01,120 --> 00:50:04,480
you need to do is you to register I

1192
00:50:02,500 --> 00:50:05,230
don't think I've registered easier so

1193
00:50:04,480 --> 00:50:08,800
I'll register

1194
00:50:05,230 --> 00:50:13,030
test it test comm test one two three

1195
00:50:08,800 --> 00:50:15,070
test one two three register that greater

1196
00:50:13,030 --> 00:50:16,720
registered now she loved me and which is

1197
00:50:15,070 --> 00:50:20,500
what a once in a log out I'm logged and

1198
00:50:16,720 --> 00:50:21,279
I'll log in again and test comm test one

1199
00:50:20,500 --> 00:50:24,160
two three

1200
00:50:21,280 --> 00:50:27,460
so I've manually logged in that now we

1201
00:50:24,160 --> 00:50:30,759
go to zap we will see that under the

1202
00:50:27,460 --> 00:50:33,670
history we can actually see the login

1203
00:50:30,760 --> 00:50:36,819
request we can see the request

1204
00:50:33,670 --> 00:50:39,849
test calm and password now in order to

1205
00:50:36,819 --> 00:50:41,319
do interesting things with anything we

1206
00:50:39,849 --> 00:50:42,640
typically want to add them to a context

1207
00:50:41,319 --> 00:50:44,230
we want to tell that that this is

1208
00:50:42,640 --> 00:50:46,150
something we're interested in so I'm

1209
00:50:44,230 --> 00:50:48,609
going to include it in a new context

1210
00:50:46,150 --> 00:50:50,230
which is there and we'll see we've got

1211
00:50:48,609 --> 00:50:52,299
this budget context and everything's got

1212
00:50:50,230 --> 00:50:54,640
a target application on this is

1213
00:50:52,299 --> 00:50:57,160
something we want to attack now if I

1214
00:50:54,640 --> 00:51:00,598
right click this request we will see

1215
00:50:57,160 --> 00:51:04,420
like an including I can flag as context

1216
00:51:00,599 --> 00:51:08,740
budget form based authentication login

1217
00:51:04,420 --> 00:51:10,930
request and it's small here but make

1218
00:51:08,740 --> 00:51:14,500
that bigger you'll see we've picked up

1219
00:51:10,930 --> 00:51:15,640
that there is post data we've picked a

1220
00:51:14,500 --> 00:51:17,799
couple of random parameters we've got

1221
00:51:15,640 --> 00:51:20,680
the wrong one so I'll change the

1222
00:51:17,799 --> 00:51:22,660
username and a one-stage we actually

1223
00:51:20,680 --> 00:51:23,950
picked up the user by default and for

1224
00:51:22,660 --> 00:51:25,690
some reason that's broken so I need to

1225
00:51:23,950 --> 00:51:31,689
put that inside and put in a test user

1226
00:51:25,690 --> 00:51:33,640
which is test at test.com and test one

1227
00:51:31,690 --> 00:51:38,440
two three and I'm not sure I got that

1228
00:51:33,640 --> 00:51:40,538
right sort right again I'll add that so

1229
00:51:38,440 --> 00:51:43,150
I've now told that how to authenticate

1230
00:51:40,539 --> 00:51:45,660
but it doesn't know when to authenticate

1231
00:51:43,150 --> 00:51:51,940
so we have a look at one of these

1232
00:51:45,660 --> 00:51:54,180
responses we go down here gifts using us

1233
00:51:51,940 --> 00:51:55,990
have a look at all CENTAC ated one

1234
00:51:54,180 --> 00:52:00,819
shouldn't matter as long as you've got

1235
00:51:55,990 --> 00:52:02,169
the so we got here this password a link

1236
00:52:00,819 --> 00:52:03,849
to your password and that's that's an

1237
00:52:02,170 --> 00:52:05,619
indication that we're logged in so I'm

1238
00:52:03,849 --> 00:52:09,000
going to right click that and I'm going

1239
00:52:05,619 --> 00:52:12,009
to flag as it flag as context budget

1240
00:52:09,000 --> 00:52:14,200
authentication logged in indicator so

1241
00:52:12,009 --> 00:52:17,170
now I've told SAP how to authenticate

1242
00:52:14,200 --> 00:52:19,359
the user to authenticate with and how to

1243
00:52:17,170 --> 00:52:21,009
tell we need to authenticate and so you

1244
00:52:19,359 --> 00:52:22,960
can just have as many users as you want

1245
00:52:21,009 --> 00:52:24,519
so if you got a load of diff different

1246
00:52:22,960 --> 00:52:28,059
test users particularly they can do

1247
00:52:24,519 --> 00:52:29,709
different things you want to do that so

1248
00:52:28,059 --> 00:52:31,720
all you'll see now is they've got an

1249
00:52:29,710 --> 00:52:35,319
icon up here which says forced user mode

1250
00:52:31,720 --> 00:52:36,519
it's disabled but that button is not

1251
00:52:35,319 --> 00:52:38,440
enabled if you haven't give us enough

1252
00:52:36,519 --> 00:52:41,439
information go back here I'm going to

1253
00:52:38,440 --> 00:52:43,329
log out and see them click around here

1254
00:52:41,440 --> 00:52:45,400
I'm logged out I'm now going to click on

1255
00:52:43,329 --> 00:52:47,650
the forced user mode if I click

1256
00:52:45,400 --> 00:52:53,080
somewhere now you'll see I'm logged in

1257
00:52:47,650 --> 00:52:55,270
so enforce user-mode zap nose okay tell

1258
00:52:53,080 --> 00:52:56,770
you know to have a look is it logged in

1259
00:52:55,270 --> 00:52:59,259
based on the indicators logged out or

1260
00:52:56,770 --> 00:53:02,590
logged in and if it's not then run the

1261
00:52:59,260 --> 00:53:04,840
then support specify that use the form

1262
00:53:02,590 --> 00:53:06,670
and week if you can't use form based

1263
00:53:04,840 --> 00:53:09,520
it's more complicated writer script you

1264
00:53:06,670 --> 00:53:11,620
can use script based as well so that's

1265
00:53:09,520 --> 00:53:14,020
kind of nice and what we find is we

1266
00:53:11,620 --> 00:53:17,560
right click here we now have options

1267
00:53:14,020 --> 00:53:19,030
when we active scan and spider we can

1268
00:53:17,560 --> 00:53:21,460
specify the context and we can specify

1269
00:53:19,030 --> 00:53:25,810
the user so we can actually say which

1270
00:53:21,460 --> 00:53:28,720
user to to scanners what I'm going to do

1271
00:53:25,810 --> 00:53:31,570
is I'm gonna export this because it's

1272
00:53:28,720 --> 00:53:34,180
much easier to do it this way so I'm

1273
00:53:31,570 --> 00:53:36,430
gonna exporting I'm gonna overwrite I'm

1274
00:53:34,180 --> 00:53:39,069
going to save that file and now I'm

1275
00:53:36,430 --> 00:53:40,330
going to delete the session so I'm going

1276
00:53:39,070 --> 00:53:43,150
to start a new session and I've got

1277
00:53:40,330 --> 00:53:47,440
nothing there and if I look here you'll

1278
00:53:43,150 --> 00:53:48,910
see right budgets there we got no

1279
00:53:47,440 --> 00:53:53,350
context we don't know anything about it

1280
00:53:48,910 --> 00:53:56,379
and I will now go to the API and we have

1281
00:53:53,350 --> 00:53:57,910
a special context option and I'm going

1282
00:53:56,380 --> 00:54:01,780
to say right we want to import the

1283
00:53:57,910 --> 00:54:04,089
context and the file is budget context

1284
00:54:01,780 --> 00:54:07,990
we've got a standard default place get

1285
00:54:04,090 --> 00:54:11,530
import it and you'll see we now have the

1286
00:54:07,990 --> 00:54:15,069
imported context and we should have all

1287
00:54:11,530 --> 00:54:17,410
of the authentic authentication

1288
00:54:15,070 --> 00:54:20,440
information set up and what I'm gonna

1289
00:54:17,410 --> 00:54:25,690
now do is I will just start scanning

1290
00:54:20,440 --> 00:54:27,550
from here tip scan and our scan as a

1291
00:54:25,690 --> 00:54:32,050
user I could do this by the API bit

1292
00:54:27,550 --> 00:54:34,540
quicker this way and I'll cancel out it

1293
00:54:32,050 --> 00:54:38,050
done that will be now pick any one of

1294
00:54:34,540 --> 00:54:44,590
these things let's find something which

1295
00:54:38,050 --> 00:54:46,570
does return a response and we can now

1296
00:54:44,590 --> 00:54:49,540
see that we are doing your thick or thin

1297
00:54:46,570 --> 00:54:51,570
skated scan as a particular user so this

1298
00:54:49,540 --> 00:54:54,340
shows you if you want to do

1299
00:54:51,570 --> 00:54:56,620
authenticated scans automated the best

1300
00:54:54,340 --> 00:54:58,060
way set them up by the API save your

1301
00:54:56,620 --> 00:55:00,310
context which has all the authentication

1302
00:54:58,060 --> 00:55:01,090
information and then you can load that

1303
00:55:00,310 --> 00:55:04,810
from the

1304
00:55:01,090 --> 00:55:07,020
di that I'll go through these very

1305
00:55:04,810 --> 00:55:09,009
quickly one of the things you'll find

1306
00:55:07,020 --> 00:55:11,050
automated scanning can take a long time

1307
00:55:09,010 --> 00:55:14,170
we've got loads of options for tuning

1308
00:55:11,050 --> 00:55:16,690
with this spider time loads compelling

1309
00:55:14,170 --> 00:55:18,070
zap when things are data-driven and a

1310
00:55:16,690 --> 00:55:20,620
lot of options around the active scan

1311
00:55:18,070 --> 00:55:23,200
rules we've got a lot of tuning as well

1312
00:55:20,620 --> 00:55:26,859
and we've got the stats so if you

1313
00:55:23,200 --> 00:55:29,049
actually have a look at the this option

1314
00:55:26,860 --> 00:55:32,500
here you will see you can actually see

1315
00:55:29,050 --> 00:55:36,070
how long a each of these took and those

1316
00:55:32,500 --> 00:55:37,600
killed but and you can get all access to

1317
00:55:36,070 --> 00:55:39,580
all that information from the API as

1318
00:55:37,600 --> 00:55:42,160
well which means you can actually see

1319
00:55:39,580 --> 00:55:44,470
how long things took and we also have

1320
00:55:42,160 --> 00:55:46,839
authentication stats which is now add-on

1321
00:55:44,470 --> 00:55:48,520
but one thing I found I was doing what I

1322
00:55:46,840 --> 00:55:51,400
thought with authenticating scans and

1323
00:55:48,520 --> 00:55:53,680
I'm suspicious kind of person I wanted

1324
00:55:51,400 --> 00:55:55,270
proof that really was authenticating and

1325
00:55:53,680 --> 00:55:56,649
doing what I was expecting so it'll

1326
00:55:55,270 --> 00:55:58,990
actually tell you how many of your

1327
00:55:56,650 --> 00:56:00,430
requests have the earth logged in or

1328
00:55:58,990 --> 00:56:02,259
earlier indicator the logged out

1329
00:56:00,430 --> 00:56:03,759
indicator have both indicators because

1330
00:56:02,260 --> 00:56:05,620
that's not a good sign don't have either

1331
00:56:03,760 --> 00:56:07,360
so get a whole load of stats which

1332
00:56:05,620 --> 00:56:09,130
should be able to tell you you know

1333
00:56:07,360 --> 00:56:11,890
whether these things are working we also

1334
00:56:09,130 --> 00:56:12,400
got stats D support and when it comes to

1335
00:56:11,890 --> 00:56:14,350
accuracy

1336
00:56:12,400 --> 00:56:16,390
we're very configurable as well I'm got

1337
00:56:14,350 --> 00:56:18,400
time to go into details but real

1338
00:56:16,390 --> 00:56:20,350
configuration you can actually tune some

1339
00:56:18,400 --> 00:56:22,510
of the rules very finely so things like

1340
00:56:20,350 --> 00:56:24,640
you can say which forms don't need anti

1341
00:56:22,510 --> 00:56:26,530
CSRF tokens and fun thing is you can

1342
00:56:24,640 --> 00:56:28,450
specify that that's stored in the app

1343
00:56:26,530 --> 00:56:30,670
config file which means you can specify

1344
00:56:28,450 --> 00:56:32,980
them using the - config on the command

1345
00:56:30,670 --> 00:56:35,230
line which means you can put those in

1346
00:56:32,980 --> 00:56:38,680
the baseline scan because we can supply

1347
00:56:35,230 --> 00:56:40,150
it support there's app config files if

1348
00:56:38,680 --> 00:56:42,940
you need any help we've got a getting

1349
00:56:40,150 --> 00:56:44,830
started guide there is a desktop help if

1350
00:56:42,940 --> 00:56:47,850
you go it's amazing how many people

1351
00:56:44,830 --> 00:56:50,440
don't we've got an invisible online

1352
00:56:47,850 --> 00:56:52,000
option menu option nobody sees it so

1353
00:56:50,440 --> 00:56:53,980
they don't know why it'll take you to

1354
00:56:52,000 --> 00:56:55,990
the SAP homepage and use a user group

1355
00:56:53,980 --> 00:57:02,950
the developer group FAQs we've got loads

1356
00:56:55,990 --> 00:57:05,529
of stuff there so so and we've got a I'm

1357
00:57:02,950 --> 00:57:08,080
on IRC quite a few others app core team

1358
00:57:05,530 --> 00:57:10,240
Ron I've seen mozilla.org website tools

1359
00:57:08,080 --> 00:57:13,120
usually European hours are best that's

1360
00:57:10,240 --> 00:57:14,509
okay for you guys so quick summary of

1361
00:57:13,120 --> 00:57:16,069
this workshop

1362
00:57:14,510 --> 00:57:18,110
the baseline scan which give you a very

1363
00:57:16,070 --> 00:57:20,150
quick security overview of your

1364
00:57:18,110 --> 00:57:22,280
individual applications got the mass

1365
00:57:20,150 --> 00:57:24,410
baseline can wrap that and give you a

1366
00:57:22,280 --> 00:57:26,090
dashboard if you want to go further than

1367
00:57:24,410 --> 00:57:29,149
that you won't start doing full zap

1368
00:57:26,090 --> 00:57:30,080
scans and to really find fun

1369
00:57:29,150 --> 00:57:32,480
vulnerabilities you want to

1370
00:57:30,080 --> 00:57:34,130
authenticated scans and if you need help

1371
00:57:32,480 --> 00:57:35,480
just ask on want to revive one of those

1372
00:57:34,130 --> 00:57:38,720
options because we try and help out

1373
00:57:35,480 --> 00:57:40,940
everyone as much as possible so now go

1374
00:57:38,720 --> 00:57:47,270
forth and automate SAP thank you very

1375
00:57:40,940 --> 00:57:49,340
much and if anyone's got any more

1376
00:57:47,270 --> 00:57:54,259
questions feel free to stick around or

1377
00:57:49,340 --> 00:57:56,450
wander off and enjoy oh and I've got

1378
00:57:54,260 --> 00:57:58,070
some as you stay to the end I've got

1379
00:57:56,450 --> 00:58:01,390
some zap stickers servi ones app

1380
00:57:58,070 --> 00:58:01,390
stickers come to the front

