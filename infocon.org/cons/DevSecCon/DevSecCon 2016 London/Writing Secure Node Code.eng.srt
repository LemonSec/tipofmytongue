1
00:00:01,730 --> 00:00:06,810
so hi everybody

2
00:00:04,200 --> 00:00:10,490
and I'll try to keep you entertained in

3
00:00:06,810 --> 00:00:13,049
this sort of coveted before lunch spot

4
00:00:10,490 --> 00:00:14,700
in the talk so I'm a guy I put John

5
00:00:13,049 --> 00:00:16,139
you're a guy pol and I'm here today to

6
00:00:14,700 --> 00:00:17,788
give you a talk that I sometimes called

7
00:00:16,139 --> 00:00:20,939
secure node code and sometimes call

8
00:00:17,789 --> 00:00:24,029
stranger danger which deals with some

9
00:00:20,939 --> 00:00:26,369
node specific advice around securing

10
00:00:24,029 --> 00:00:28,890
things in this echo system as well as a

11
00:00:26,369 --> 00:00:30,359
general theme or concept about

12
00:00:28,890 --> 00:00:34,200
vulnerabilities in open source packages

13
00:00:30,359 --> 00:00:35,850
so a little bit about me I started with

14
00:00:34,200 --> 00:00:37,530
security you know a daunting number of

15
00:00:35,850 --> 00:00:38,850
years ago now I'm showing my age a

16
00:00:37,530 --> 00:00:41,280
little bit about 20 years through the

17
00:00:38,850 --> 00:00:43,140
Israeli sort of cyber security army and

18
00:00:41,280 --> 00:00:45,600
that have been in apps like for a good

19
00:00:43,140 --> 00:00:47,280
sort of 17 years now I guess or 16 years

20
00:00:45,600 --> 00:00:48,780
working on apps shield naps can the

21
00:00:47,280 --> 00:00:51,690
first well firewall were up security

22
00:00:48,780 --> 00:00:54,420
scanners then I left security which is

23
00:00:51,690 --> 00:00:56,010
an initial move and started a

24
00:00:54,420 --> 00:00:57,750
performance startup called blaze which

25
00:00:56,010 --> 00:01:00,449
got acquired by Akamai you know CTO

26
00:00:57,750 --> 00:01:02,699
attack might for a few years and then

27
00:01:00,449 --> 00:01:04,559
have recently left that to found another

28
00:01:02,699 --> 00:01:09,298
startup called sneek which is where I am

29
00:01:04,559 --> 00:01:10,860
right now so open source is awesome

30
00:01:09,299 --> 00:01:12,630
right I think that's pretty well

31
00:01:10,860 --> 00:01:15,539
accepted let's share work when we

32
00:01:12,630 --> 00:01:16,949
created it lets us reuse the word from

33
00:01:15,540 --> 00:01:19,259
others and therefore focus on our core

34
00:01:16,950 --> 00:01:21,810
and makes us very productive and as a

35
00:01:19,259 --> 00:01:23,790
result open source has exploded the use

36
00:01:21,810 --> 00:01:25,409
of open source has gone from something

37
00:01:23,790 --> 00:01:27,360
that's more rebellious more sort of you

38
00:01:25,409 --> 00:01:29,610
know a few small entities except for

39
00:01:27,360 --> 00:01:31,229
maybe the major exceptions for Linux and

40
00:01:29,610 --> 00:01:33,270
the likes to things that is really

41
00:01:31,229 --> 00:01:34,590
prevalent across any organization

42
00:01:33,270 --> 00:01:36,360
including banks and the other is just

43
00:01:34,590 --> 00:01:39,840
about how much of it to use not whether

44
00:01:36,360 --> 00:01:41,340
you use it and unfortunately we get this

45
00:01:39,840 --> 00:01:42,450
constant reminders that the fact

46
00:01:41,340 --> 00:01:44,340
something is open-source there's not

47
00:01:42,450 --> 00:01:46,020
meaning secure that may or may not have

48
00:01:44,340 --> 00:01:47,430
been true earlier on that because it's

49
00:01:46,020 --> 00:01:50,070
open there's eyeballs on it and people

50
00:01:47,430 --> 00:01:51,240
scrutinize it but it definitely is

51
00:01:50,070 --> 00:01:53,008
insured today with the volume of

52
00:01:51,240 --> 00:01:54,509
activity that's going there it doesn't

53
00:01:53,009 --> 00:01:56,100
mean open source is insecure there's

54
00:01:54,509 --> 00:01:58,049
also the pros and cons but it definitely

55
00:01:56,100 --> 00:01:59,189
does not implicitly secure and again we

56
00:01:58,049 --> 00:02:00,899
get all these like brand name

57
00:01:59,189 --> 00:02:04,169
vulnerabilities designer vulnerabilities

58
00:02:00,899 --> 00:02:04,770
that help us reminder of it right like

59
00:02:04,170 --> 00:02:06,869
like

60
00:02:04,770 --> 00:02:08,728
heartbleed and shell shock and log jam I

61
00:02:06,869 --> 00:02:10,860
love this sort of CloudFlare animation

62
00:02:08,729 --> 00:02:13,650
there since the log and a jack that's

63
00:02:10,860 --> 00:02:14,010
kind of the best they can do and the the

64
00:02:13,650 --> 00:02:15,060
other thing

65
00:02:14,010 --> 00:02:17,010
that happens whether open source is that

66
00:02:15,060 --> 00:02:19,409
attackers are targeting open source it's

67
00:02:17,010 --> 00:02:21,470
a very lucrative target it's one

68
00:02:19,409 --> 00:02:24,599
vulnerability it has many victims it is

69
00:02:21,470 --> 00:02:25,950
everywhere so it's a very appealing one

70
00:02:24,599 --> 00:02:28,170
and therefore there's all sorts of stats

71
00:02:25,950 --> 00:02:31,140
but the majority of successful exploits

72
00:02:28,170 --> 00:02:33,540
are attributed to some form of unpatched

73
00:02:31,140 --> 00:02:36,599
servers or on updated open source

74
00:02:33,540 --> 00:02:37,828
components and there's a lot of

75
00:02:36,599 --> 00:02:41,099
conversations like the one we had

76
00:02:37,829 --> 00:02:43,739
earlier today from that on on how to

77
00:02:41,099 --> 00:02:45,720
handle this both on servers as well as

78
00:02:43,739 --> 00:02:48,510
on more modern environments like

79
00:02:45,720 --> 00:02:50,640
containers and also some studies show

80
00:02:48,510 --> 00:02:52,679
that it's a very real problem and that

81
00:02:50,640 --> 00:02:56,220
it's just continuing into this new world

82
00:02:52,680 --> 00:02:57,690
with binaries of containers where 30%

83
00:02:56,220 --> 00:02:59,849
this is one analysis again different

84
00:02:57,690 --> 00:03:01,200
views but definitely many of the

85
00:02:59,849 --> 00:03:02,488
containers out there and repositories

86
00:03:01,200 --> 00:03:05,700
contain these types of vulnerable

87
00:03:02,489 --> 00:03:07,980
binaries and alongside it although as

88
00:03:05,700 --> 00:03:09,388
we've just heard it's not easy there are

89
00:03:07,980 --> 00:03:11,190
at least some solutions there's a lot of

90
00:03:09,389 --> 00:03:13,019
conversations around how do you tackle

91
00:03:11,190 --> 00:03:14,670
that in terms of updates in terms of

92
00:03:13,019 --> 00:03:16,889
container security tools there's kind of

93
00:03:14,670 --> 00:03:19,410
growing chatter there but all of that is

94
00:03:16,889 --> 00:03:21,599
about open source binaries what about

95
00:03:19,410 --> 00:03:22,980
open source packages open source

96
00:03:21,599 --> 00:03:25,500
packages that get pulled into our code

97
00:03:22,980 --> 00:03:27,510
they're just as hacker friendly you know

98
00:03:25,500 --> 00:03:28,530
a lot of sort of usability taking into

99
00:03:27,510 --> 00:03:29,819
account there the vulnerabilities are

100
00:03:28,530 --> 00:03:31,169
already found for you you don't need to

101
00:03:29,819 --> 00:03:32,849
work it's just sort of there by the

102
00:03:31,169 --> 00:03:33,959
community you just need to write an

103
00:03:32,849 --> 00:03:36,418
exploit and it's kind of easy because

104
00:03:33,959 --> 00:03:37,799
you can download it to your system their

105
00:03:36,419 --> 00:03:38,940
every word millions and millions of

106
00:03:37,799 --> 00:03:40,739
downloads a month that's true for

107
00:03:38,940 --> 00:03:43,500
packages and binaries and they're hard

108
00:03:40,739 --> 00:03:44,669
to update in part because of dependency

109
00:03:43,500 --> 00:03:46,440
chain and this thing depends on the

110
00:03:44,669 --> 00:03:47,970
other and what's in memory so encode is

111
00:03:46,440 --> 00:03:49,489
you know what is the dependency

112
00:03:47,970 --> 00:03:52,949
component things are out of your reach

113
00:03:49,489 --> 00:03:54,209
and in part because of fear right we

114
00:03:52,949 --> 00:03:56,609
think that you might trigger some

115
00:03:54,209 --> 00:03:59,159
breakage some functional limit and then

116
00:03:56,609 --> 00:04:00,690
lastly it's sort of pulled in across the

117
00:03:59,159 --> 00:04:02,730
system in the case of binaries it

118
00:04:00,690 --> 00:04:04,530
servers everywhere in the case of code

119
00:04:02,730 --> 00:04:06,720
this is all these applications where any

120
00:04:04,530 --> 00:04:08,519
developer has the legitimate mandate to

121
00:04:06,720 --> 00:04:12,239
pull in another piece of package that

122
00:04:08,519 --> 00:04:13,409
sort of work efficiently so for the

123
00:04:12,239 --> 00:04:15,989
remainder of the talk we're gonna pick a

124
00:04:13,409 --> 00:04:18,120
node because it's fun and because I sort

125
00:04:15,989 --> 00:04:21,209
of have some tools to show on it but

126
00:04:18,120 --> 00:04:23,159
really this problem is is prevalent it's

127
00:04:21,209 --> 00:04:25,790
not just sort of a node problem so we

128
00:04:23,159 --> 00:04:28,340
didn't know the package repository for

129
00:04:25,790 --> 00:04:30,260
for open source packages is called NPM

130
00:04:28,340 --> 00:04:32,510
and it is awesome and it is growing at

131
00:04:30,260 --> 00:04:34,010
an amazing pace that forces me to update

132
00:04:32,510 --> 00:04:36,320
this slide every time I give a talk like

133
00:04:34,010 --> 00:04:38,570
this with some other staggering numbers

134
00:04:36,320 --> 00:04:41,330
like 6 billion downloads a month I mean

135
00:04:38,570 --> 00:04:42,950
that's a fairly impressive number and

136
00:04:41,330 --> 00:04:48,080
this is more than double what it was I

137
00:04:42,950 --> 00:04:49,130
guess about 9 or 10 months ago when when

138
00:04:48,080 --> 00:04:49,669
they just sort of started quoting these

139
00:04:49,130 --> 00:04:52,159
stats

140
00:04:49,670 --> 00:04:53,360
it also has over 65,000 publishers I

141
00:04:52,160 --> 00:04:55,340
think it's actually more like 70 or 80

142
00:04:53,360 --> 00:04:56,630
thousand right now which shows the

143
00:04:55,340 --> 00:04:59,840
strength of the community that's sort of

144
00:04:56,630 --> 00:05:02,150
pushing in this content and what that

145
00:04:59,840 --> 00:05:06,859
leads is to the situation where this is

146
00:05:02,150 --> 00:05:08,539
your app and this is your code and at

147
00:05:06,860 --> 00:05:11,570
first glance you must think you might

148
00:05:08,540 --> 00:05:12,740
think that this is a negative slide but

149
00:05:11,570 --> 00:05:15,219
actually think of it as a positive slide

150
00:05:12,740 --> 00:05:17,930
you can create all that orangish value

151
00:05:15,220 --> 00:05:19,430
with only that purplish level of effort

152
00:05:17,930 --> 00:05:21,260
that you need to do that they need to

153
00:05:19,430 --> 00:05:22,970
actually build in so it's a good thing

154
00:05:21,260 --> 00:05:25,670
it lets us run faster lets us be

155
00:05:22,970 --> 00:05:27,980
competitive be innovative but it's also

156
00:05:25,670 --> 00:05:29,300
a scary one right while on the

157
00:05:27,980 --> 00:05:30,980
functional side it says that javascript

158
00:05:29,300 --> 00:05:32,390
is one you know as many of the GS people

159
00:05:30,980 --> 00:05:34,010
like to say that again does through

160
00:05:32,390 --> 00:05:35,120
other environments from a security

161
00:05:34,010 --> 00:05:39,050
perspective each one of these

162
00:05:35,120 --> 00:05:40,130
dependencies is a security risk and when

163
00:05:39,050 --> 00:05:41,600
you stop to think about it there's a lot

164
00:05:40,130 --> 00:05:44,180
of daunting questions I mean do you even

165
00:05:41,600 --> 00:05:46,970
know which open source packages are you

166
00:05:44,180 --> 00:05:50,180
using do you know for every single one

167
00:05:46,970 --> 00:05:51,470
of them did it undergo the developers

168
00:05:50,180 --> 00:05:53,810
writing it have any sort of security

169
00:05:51,470 --> 00:05:55,820
expertise they did undergo any sort of

170
00:05:53,810 --> 00:05:57,230
security testing you know keep in mind

171
00:05:55,820 --> 00:05:59,120
that security tools are generally

172
00:05:57,230 --> 00:06:00,560
oriented at enterprises and many of

173
00:05:59,120 --> 00:06:02,810
these packages are written by one two

174
00:06:00,560 --> 00:06:04,850
three person teams written on a weekend

175
00:06:02,810 --> 00:06:06,110
and sometimes you know well-maintained

176
00:06:04,850 --> 00:06:08,540
for a period of time and then kind of

177
00:06:06,110 --> 00:06:10,220
neglected not sort of the same model as

178
00:06:08,540 --> 00:06:11,420
security assessments have been done and

179
00:06:10,220 --> 00:06:13,880
often times these people have no

180
00:06:11,420 --> 00:06:15,650
security expertise and maybe more

181
00:06:13,880 --> 00:06:17,990
practically do you know if they have

182
00:06:15,650 --> 00:06:19,849
known security bugs you know packages

183
00:06:17,990 --> 00:06:21,380
have bugs it's been known to happen and

184
00:06:19,850 --> 00:06:24,320
some of those are security flaws just

185
00:06:21,380 --> 00:06:26,030
like the binaries so it's sort of the

186
00:06:24,320 --> 00:06:28,430
the code part of what you're pulling and

187
00:06:26,030 --> 00:06:31,130
then the second concern there is the

188
00:06:28,430 --> 00:06:32,840
people part there's a lot of greatness

189
00:06:31,130 --> 00:06:34,490
again in the open source world that open

190
00:06:32,840 --> 00:06:36,080
source is written by people it's

191
00:06:34,490 --> 00:06:37,280
community people all the solutions and

192
00:06:36,080 --> 00:06:39,409
all the opportunities are about people

193
00:06:37,280 --> 00:06:41,179
and it's easy to forget that these peep

194
00:06:39,409 --> 00:06:43,308
or strangers you know we don't know who

195
00:06:41,179 --> 00:06:45,318
they are and yet we pull hundreds and

196
00:06:43,309 --> 00:06:47,539
thousands of packages written by tens of

197
00:06:45,319 --> 00:06:49,129
thousands of strangers from the internet

198
00:06:47,539 --> 00:06:51,378
and we run them in a financially

199
00:06:49,129 --> 00:06:55,179
sensitive environment based on at best

200
00:06:51,379 --> 00:06:58,009
minimal minimal scrutiny so it's scary

201
00:06:55,179 --> 00:06:59,739
and while we like to think that these

202
00:06:58,009 --> 00:07:03,169
are all like benevolent ponies

203
00:06:59,739 --> 00:07:04,909
definitely in the NPI microsystem we in

204
00:07:03,169 --> 00:07:06,498
this room know that they're not you know

205
00:07:04,909 --> 00:07:08,479
some of them may be the vast vast vast

206
00:07:06,499 --> 00:07:09,860
majority of them are but there are bad

207
00:07:08,479 --> 00:07:12,349
actors out there right there are people

208
00:07:09,860 --> 00:07:14,149
that are trying to do something bad and

209
00:07:12,349 --> 00:07:15,289
once again you know we don't really know

210
00:07:14,149 --> 00:07:16,729
those users we don't know if their

211
00:07:15,289 --> 00:07:18,979
malicious we don't know if they've been

212
00:07:16,729 --> 00:07:21,199
compromised know how well do they treat

213
00:07:18,979 --> 00:07:22,849
their development environments we've

214
00:07:21,199 --> 00:07:25,699
seen some examples on this on mobile

215
00:07:22,849 --> 00:07:27,319
development with Xcode ghost and recent

216
00:07:25,699 --> 00:07:28,909
former ability in the Play Store where

217
00:07:27,319 --> 00:07:31,369
developers were distribution vehicles

218
00:07:28,909 --> 00:07:33,589
for viruses these were pieces of malware

219
00:07:31,369 --> 00:07:35,949
that attacked developers of Xcode or

220
00:07:33,589 --> 00:07:38,869
Google Play of iOS or Google Play apps

221
00:07:35,949 --> 00:07:40,669
and injected malware when those apps

222
00:07:38,869 --> 00:07:42,860
were submitted into the App Store and

223
00:07:40,669 --> 00:07:44,990
the true victims are the true target for

224
00:07:42,860 --> 00:07:46,249
the attacker were the users but the

225
00:07:44,990 --> 00:07:47,779
developers were used that is a

226
00:07:46,249 --> 00:07:49,279
distribution vehicle it's a very

227
00:07:47,779 --> 00:07:51,649
efficient distribution vehicle and

228
00:07:49,279 --> 00:07:56,659
unfortunately a fairly hackable

229
00:07:51,649 --> 00:07:58,129
distribution vehicle today so this is a

230
00:07:56,659 --> 00:08:00,550
bit of a doom and gloom and it's a big

231
00:07:58,129 --> 00:08:02,959
problem and I think it has no single

232
00:08:00,550 --> 00:08:04,579
sort of silver bullet and it needs to be

233
00:08:02,959 --> 00:08:05,990
a bit of a community solution and

234
00:08:04,579 --> 00:08:07,759
there's a lot of conversations going on

235
00:08:05,990 --> 00:08:09,649
it for the rest of the talk I'd like to

236
00:08:07,759 --> 00:08:11,509
focus on what I think is the most

237
00:08:09,649 --> 00:08:13,489
concrete aspect of it that we can start

238
00:08:11,509 --> 00:08:15,969
doing in the open source packages world

239
00:08:13,489 --> 00:08:19,789
and that is no informer abilities right

240
00:08:15,969 --> 00:08:20,808
in the world of NPM about 14% of the NPM

241
00:08:19,789 --> 00:08:24,110
packages that are out there right now

242
00:08:20,809 --> 00:08:24,769
the latest versions carry unknown

243
00:08:24,110 --> 00:08:26,149
vulnerability

244
00:08:24,769 --> 00:08:28,610
either they have one in their own code

245
00:08:26,149 --> 00:08:31,459
or they pull in another package that has

246
00:08:28,610 --> 00:08:32,509
that vulnerability in it we it's Nick we

247
00:08:31,459 --> 00:08:35,870
deal with this and we see that about

248
00:08:32,509 --> 00:08:38,199
four and five node development shops

249
00:08:35,870 --> 00:08:41,029
when they go in and they starts to test

250
00:08:38,198 --> 00:08:42,889
their applications on first lines they

251
00:08:41,029 --> 00:08:44,720
find a vulnerable package at least one

252
00:08:42,889 --> 00:08:46,459
that they're using and in the majority

253
00:08:44,720 --> 00:08:48,110
of cases these are or in many of these

254
00:08:46,459 --> 00:08:52,279
cases these are very high severity

255
00:08:48,110 --> 00:08:53,240
issues this is this is like I'm not the

256
00:08:52,279 --> 00:08:54,649
only one talking about this

257
00:08:53,240 --> 00:08:56,300
opponent this has been mentioned by sona

258
00:08:54,649 --> 00:08:58,580
thai by various others you know can have

259
00:08:56,300 --> 00:09:01,130
a mandatory Josh Corman mentioned here

260
00:08:58,580 --> 00:09:02,570
he's not here is he's in spirits talking

261
00:09:01,130 --> 00:09:03,800
about calling this software supply chain

262
00:09:02,570 --> 00:09:05,899
you can kind of call it whatever you

263
00:09:03,800 --> 00:09:09,410
want but you know it needs to be

264
00:09:05,899 --> 00:09:11,180
addressed so I will ask two things first

265
00:09:09,410 --> 00:09:11,870
is how do we protect ourselves from

266
00:09:11,180 --> 00:09:14,149
these issues

267
00:09:11,870 --> 00:09:15,470
what processes should we adopt how are

268
00:09:14,149 --> 00:09:17,660
they different than open source binaries

269
00:09:15,470 --> 00:09:20,149
and then second from a code perspective

270
00:09:17,660 --> 00:09:21,260
I find that these vulnerable packages

271
00:09:20,149 --> 00:09:22,790
because they're so contained because

272
00:09:21,260 --> 00:09:24,380
these are real-world vulnerabilities

273
00:09:22,790 --> 00:09:26,930
they're actually a really great

274
00:09:24,380 --> 00:09:28,850
educational tool for developers in our

275
00:09:26,930 --> 00:09:30,529
systems to learn from these mistakes and

276
00:09:28,850 --> 00:09:31,640
understand how do they avoid making them

277
00:09:30,529 --> 00:09:35,089
and how do they address them when they

278
00:09:31,640 --> 00:09:36,709
happen in their own code so the

279
00:09:35,089 --> 00:09:39,230
remainder of my session is not going to

280
00:09:36,709 --> 00:09:41,270
be here but what I'm going to do is I'm

281
00:09:39,230 --> 00:09:42,620
going to try to kind of demonstrate a

282
00:09:41,270 --> 00:09:44,990
little bit why this is a real problem

283
00:09:42,620 --> 00:09:46,630
you should care about using a vulnerable

284
00:09:44,990 --> 00:09:48,950
application that we have called goof

285
00:09:46,630 --> 00:09:51,500
it's you know it's in JavaScript so it

286
00:09:48,950 --> 00:09:52,880
needs to be able to do MVC that's so it

287
00:09:51,500 --> 00:09:55,640
is and it allows you to do some

288
00:09:52,880 --> 00:09:58,270
important note-taking like call mom or

289
00:09:55,640 --> 00:10:02,870
you can highlight a few things like by

290
00:09:58,270 --> 00:10:04,339
year just sort of parentheses and and

291
00:10:02,870 --> 00:10:06,440
use that components you know it's a

292
00:10:04,339 --> 00:10:09,339
simple app and within a deduces a bunch

293
00:10:06,440 --> 00:10:12,620
of packages popular packages that are

294
00:10:09,339 --> 00:10:14,060
used in the recommended way so there's

295
00:10:12,620 --> 00:10:16,130
nothing I didn't sort of intentionally

296
00:10:14,060 --> 00:10:17,119
you know obscure this or messed up with

297
00:10:16,130 --> 00:10:18,770
this just to sort of make them

298
00:10:17,120 --> 00:10:21,200
vulnerable is more highlighted it's used

299
00:10:18,770 --> 00:10:23,630
in the naive in the standard way and

300
00:10:21,200 --> 00:10:24,800
we're gonna use kind of excuse here the

301
00:10:23,630 --> 00:10:26,750
plug we're just gonna use it for info

302
00:10:24,800 --> 00:10:28,670
we're gonna use sneak for it so this

303
00:10:26,750 --> 00:10:31,520
stick would allow us to sort of test the

304
00:10:28,670 --> 00:10:33,680
different repositories that we have in

305
00:10:31,520 --> 00:10:37,220
it all the different NPM packages and we

306
00:10:33,680 --> 00:10:38,479
will find this one here goof which we

307
00:10:37,220 --> 00:10:40,220
can see has a bunch of vulnerable

308
00:10:38,480 --> 00:10:42,829
components some high severity medium low

309
00:10:40,220 --> 00:10:44,870
severity and we'll we'll just sort of

310
00:10:42,829 --> 00:10:49,040
pick a handful of these going into the

311
00:10:44,870 --> 00:10:53,360
test report that you know again kind of

312
00:10:49,040 --> 00:10:55,819
try to show the the magnitude of why

313
00:10:53,360 --> 00:10:58,190
should you care about this so there's a

314
00:10:55,820 --> 00:11:00,140
bunch of vulnerabilities here and I'm

315
00:10:58,190 --> 00:11:04,130
going to pick on a very arbitrary set

316
00:11:00,140 --> 00:11:06,500
I'll start with SD SD is a package that

317
00:11:04,130 --> 00:11:07,130
was created by the author but by Isaac

318
00:11:06,500 --> 00:11:09,860
from and

319
00:11:07,130 --> 00:11:12,070
the guy runs NPM super capable developer

320
00:11:09,860 --> 00:11:14,300
and it has a directory listing

321
00:11:12,070 --> 00:11:16,520
vulnerability in it so let's just get

322
00:11:14,300 --> 00:11:17,930
warmed up a little bit we use st to

323
00:11:16,520 --> 00:11:20,150
serve static resources in our

324
00:11:17,930 --> 00:11:22,160
application so easily serve our CSS

325
00:11:20,150 --> 00:11:24,290
files our JavaScript files as well as

326
00:11:22,160 --> 00:11:26,270
our about page which is sort of

327
00:11:24,290 --> 00:11:29,599
highlight how awesome this application

328
00:11:26,270 --> 00:11:31,130
is so we can't really do any hacking in

329
00:11:29,600 --> 00:11:33,650
the browser because it normalizes paths

330
00:11:31,130 --> 00:11:38,870
for us so we're going to switch at this

331
00:11:33,650 --> 00:11:41,420
point - big enough start this and we'll

332
00:11:38,870 --> 00:11:44,570
sort of switch to curl and we'll fetch

333
00:11:41,420 --> 00:11:45,800
our little about page again just kind of

334
00:11:44,570 --> 00:11:47,240
getting warmed up and we know there's a

335
00:11:45,800 --> 00:11:51,229
directory traversal vulnerability here

336
00:11:47,240 --> 00:11:57,560
so what are we going to do suggestions

337
00:11:51,230 --> 00:11:59,270
no dot dot dot dot dot a bunch of these

338
00:11:57,560 --> 00:12:01,520
and maybe we'll kind of ask for the HC

339
00:11:59,270 --> 00:12:05,750
passwd file and the app is kind of

340
00:12:01,520 --> 00:12:08,000
running on a Roku and this will do

341
00:12:05,750 --> 00:12:10,310
nothing because actually you know this

342
00:12:08,000 --> 00:12:12,800
is a good package written with security

343
00:12:10,310 --> 00:12:14,780
in mind except you know like many pieces

344
00:12:12,800 --> 00:12:17,780
of code it has a bug so the dot dot is

345
00:12:14,780 --> 00:12:22,130
actually sanitized however if I did a

346
00:12:17,780 --> 00:12:22,490
different way to do dot for instance %

347
00:12:22,130 --> 00:12:25,070
to e

348
00:12:22,490 --> 00:12:27,200
your own encoded version of it things

349
00:12:25,070 --> 00:12:29,990
would not fare as well so again just

350
00:12:27,200 --> 00:12:37,310
kind of getting warmed up just to see am

351
00:12:29,990 --> 00:12:38,840
i doing this ok here and ah yeah there

352
00:12:37,310 --> 00:12:44,119
was a missing flash over here some live

353
00:12:38,840 --> 00:12:45,320
coding here like hacking uh wallah ok so

354
00:12:44,120 --> 00:12:48,560
just getting started a little bit

355
00:12:45,320 --> 00:12:51,230
there's actually a handful of vulnerable

356
00:12:48,560 --> 00:12:53,630
sort of static resource packages in in

357
00:12:51,230 --> 00:12:54,830
NPM right now that have these components

358
00:12:53,630 --> 00:12:56,870
and this is one of the top

359
00:12:54,830 --> 00:12:59,540
vulnerabilities that we see happen there

360
00:12:56,870 --> 00:13:01,730
which is sensitivity to encoding is just

361
00:12:59,540 --> 00:13:03,349
sort of not thinking through again not a

362
00:13:01,730 --> 00:13:05,240
lot of security consciousness seems like

363
00:13:03,350 --> 00:13:07,070
101 from a security perspective but many

364
00:13:05,240 --> 00:13:09,620
of this is not had a security

365
00:13:07,070 --> 00:13:12,110
perspective ok got start a little bit

366
00:13:09,620 --> 00:13:13,430
you know got our Heroku if you see

367
00:13:12,110 --> 00:13:16,100
passwd file which is not that useful

368
00:13:13,430 --> 00:13:19,819
these days anyway and let's sort of go

369
00:13:16,100 --> 00:13:20,930
on to a next one the next one is and the

370
00:13:19,820 --> 00:13:24,860
winner is

371
00:13:20,930 --> 00:13:26,180
marked anybody here happened to hear of

372
00:13:24,860 --> 00:13:28,010
marked alright is actually much more

373
00:13:26,180 --> 00:13:29,959
popular package so marked is a markdown

374
00:13:28,010 --> 00:13:32,480
parser and we use it to be able to

375
00:13:29,960 --> 00:13:34,220
highlight beer in our in our to do

376
00:13:32,480 --> 00:13:36,920
application which is important you must

377
00:13:34,220 --> 00:13:39,740
admit and it gets downloaded about two

378
00:13:36,920 --> 00:13:42,170
million times a month it's the top I

379
00:13:39,740 --> 00:13:46,970
believe in markdown parsing library in

380
00:13:42,170 --> 00:13:48,890
node and it has as we know now across

381
00:13:46,970 --> 00:13:53,899
the scripting vulnerability so what are

382
00:13:48,890 --> 00:14:00,649
we gonna do we're gonna do script script

383
00:13:53,899 --> 00:14:05,390
alert one script and nothing just like

384
00:14:00,649 --> 00:14:07,430
st marked has a very comprehensive

385
00:14:05,390 --> 00:14:09,740
sanitize function that's built into it

386
00:14:07,430 --> 00:14:11,060
now interestingly sanitize is off by

387
00:14:09,740 --> 00:14:13,070
default we turn it on in this

388
00:14:11,060 --> 00:14:14,479
application to sort of add the security

389
00:14:13,070 --> 00:14:17,089
feature but it's off by default

390
00:14:14,480 --> 00:14:19,100
similarly st allows directory listing by

391
00:14:17,089 --> 00:14:20,300
default so this is another sort of facet

392
00:14:19,100 --> 00:14:22,220
of security concerns you should think

393
00:14:20,300 --> 00:14:24,800
about with open source packages which is

394
00:14:22,220 --> 00:14:26,570
their insecurity faults ongoing

395
00:14:24,800 --> 00:14:27,740
conversations through binaries as well

396
00:14:26,570 --> 00:14:29,990
around whether that's a vulnerability

397
00:14:27,740 --> 00:14:33,380
per se or not but it definitely is a

398
00:14:29,990 --> 00:14:35,570
security consideration you should have

399
00:14:33,380 --> 00:14:37,370
and it's not well documented so we're

400
00:14:35,570 --> 00:14:38,510
still still struggling around whether we

401
00:14:37,370 --> 00:14:43,459
want to present these vulnerabilities

402
00:14:38,510 --> 00:14:46,130
but for now you know both marked and st

403
00:14:43,459 --> 00:14:48,349
don't have good security faults but

404
00:14:46,130 --> 00:14:49,370
anyways in this case we turned it on but

405
00:14:48,350 --> 00:14:52,480
it doesn't have you know this

406
00:14:49,370 --> 00:14:56,170
vulnerability any other suggestions for

407
00:14:52,480 --> 00:15:01,940
variants for cross-site scripting no

408
00:14:56,170 --> 00:15:03,229
some encoding so encoding how I'll start

409
00:15:01,940 --> 00:15:07,339
out I'll kind of do a little bit of a

410
00:15:03,230 --> 00:15:10,339
I'll get you started so you know marked

411
00:15:07,339 --> 00:15:12,350
caches HTML very well but this is a

412
00:15:10,339 --> 00:15:15,200
markdown format that would actually give

413
00:15:12,350 --> 00:15:17,570
me an alert or sort of a JavaScript link

414
00:15:15,200 --> 00:15:22,190
just part of that page so if I do this

415
00:15:17,570 --> 00:15:24,470
what will happened no that's it before

416
00:15:22,190 --> 00:15:25,970
lunch you're just too tired nothing

417
00:15:24,470 --> 00:15:28,339
because sanitize is actually very

418
00:15:25,970 --> 00:15:30,350
comprehensive and it catches those

419
00:15:28,339 --> 00:15:32,570
constants as well but once again this

420
00:15:30,350 --> 00:15:35,420
one has an encoding problem in it so how

421
00:15:32,570 --> 00:15:38,820
can i encode in HTML

422
00:15:35,420 --> 00:15:41,189
no I need more red team's here so I'm

423
00:15:38,820 --> 00:15:43,880
presented yeah exactly HTML entities so

424
00:15:41,190 --> 00:15:47,660
we can do something like this and

425
00:15:43,880 --> 00:15:47,660
something like this

426
00:15:48,230 --> 00:15:54,180
41 : and these are HTML entities so

427
00:15:52,980 --> 00:15:55,620
there are way to sort of represent to

428
00:15:54,180 --> 00:16:00,899
the browser to say this is actually a

429
00:15:55,620 --> 00:16:04,649
Colin if I do this then now I get

430
00:16:00,899 --> 00:16:06,420
nothing and this is maybe a point to say

431
00:16:04,649 --> 00:16:12,300
that crosses everything is hard to block

432
00:16:06,420 --> 00:16:13,469
and mark this actually has the sanitize

433
00:16:12,300 --> 00:16:15,959
function is actually really good

434
00:16:13,470 --> 00:16:18,240
according to the spec however browsers

435
00:16:15,959 --> 00:16:20,310
do not follow the spec as they should

436
00:16:18,240 --> 00:16:23,730
they're actually very very tolerant so

437
00:16:20,310 --> 00:16:25,619
if I go in here and I add this over here

438
00:16:23,730 --> 00:16:29,550
just some word the browser is gonna look

439
00:16:25,620 --> 00:16:32,010
at this string and say wow like I know

440
00:16:29,550 --> 00:16:33,060
it's not the spec but I kind of get what

441
00:16:32,010 --> 00:16:35,580
you were meaning you give me enough

442
00:16:33,060 --> 00:16:38,189
hints you know I will follow along and I

443
00:16:35,580 --> 00:16:38,880
will think of this as a Colin and if I

444
00:16:38,190 --> 00:16:42,480
do this

445
00:16:38,880 --> 00:16:44,370
voila we've got our coveted alerts which

446
00:16:42,480 --> 00:16:48,270
we just love so much in the world of

447
00:16:44,370 --> 00:16:49,410
security so you know these are the the

448
00:16:48,270 --> 00:16:51,089
reason I kind of go through this process

449
00:16:49,410 --> 00:16:52,529
and all these encoding is to say you

450
00:16:51,089 --> 00:16:54,839
know just put yourself a little bit in

451
00:16:52,529 --> 00:16:55,860
the mind of a newbie developer an

452
00:16:54,839 --> 00:16:57,600
experienced developer but not

453
00:16:55,860 --> 00:16:58,709
necessarily security conscious one just

454
00:16:57,600 --> 00:17:01,170
for thinking about all these scenarios

455
00:16:58,709 --> 00:17:03,449
is hard right it's not an obvious thing

456
00:17:01,170 --> 00:17:06,329
and we're consuming a ton of code from

457
00:17:03,450 --> 00:17:07,800
these environments I'll show a couple

458
00:17:06,329 --> 00:17:09,000
more examples and then I'll kind of

459
00:17:07,800 --> 00:17:11,669
switch a little bit more to solution

460
00:17:09,000 --> 00:17:13,109
mode because these these are all you

461
00:17:11,670 --> 00:17:14,790
know like if you're a red team you're

462
00:17:13,109 --> 00:17:15,688
not that thrilled by finding across that

463
00:17:14,790 --> 00:17:17,069
scripting and a directory traversal

464
00:17:15,689 --> 00:17:20,250
you're sort of looking for something

465
00:17:17,069 --> 00:17:21,720
more hardcore there's a couple of like

466
00:17:20,250 --> 00:17:23,550
remote command executions that are on

467
00:17:21,720 --> 00:17:27,270
the way to be published but I can show

468
00:17:23,550 --> 00:17:29,610
them quite yet so I'll show a couple of

469
00:17:27,270 --> 00:17:32,760
others that are more memory related so

470
00:17:29,610 --> 00:17:33,780
we talked about heartbleed before the

471
00:17:32,760 --> 00:17:36,300
next one durability I want to show you

472
00:17:33,780 --> 00:17:37,800
is on Mongoose has anybody here heard of

473
00:17:36,300 --> 00:17:40,080
Mongoose Mongoose is really quite

474
00:17:37,800 --> 00:17:42,120
popular so Mongoose is the way to access

475
00:17:40,080 --> 00:17:44,439
MongoDB which is the database or most

476
00:17:42,120 --> 00:17:46,508
popular database in the world of nodes

477
00:17:44,440 --> 00:17:48,490
and it has a moaner ability due to an

478
00:17:46,509 --> 00:17:51,029
object called buffer buffer is a very

479
00:17:48,490 --> 00:17:52,840
tricky objects in the world of node

480
00:17:51,029 --> 00:17:54,700
JavaScript developers typically don't

481
00:17:52,840 --> 00:17:57,279
think about memory but buffer allows

482
00:17:54,700 --> 00:17:58,750
them to actually create an object that

483
00:17:57,279 --> 00:18:00,850
holds just a bunch of allocated memory

484
00:17:58,750 --> 00:18:03,970
and it has two constructors it can take

485
00:18:00,850 --> 00:18:04,928
a string like this in which case it

486
00:18:03,970 --> 00:18:07,480
would just allocate that amount of

487
00:18:04,929 --> 00:18:10,000
memory into a buffer or it can take an

488
00:18:07,480 --> 00:18:12,130
integer and when it takes the integer it

489
00:18:10,000 --> 00:18:16,000
allocates that amount of memory except

490
00:18:12,130 --> 00:18:20,519
it doesn't zero it so at this point if

491
00:18:16,000 --> 00:18:22,539
I've received a piece of input if I've

492
00:18:20,519 --> 00:18:23,860
received kind of piece of integer and

493
00:18:22,539 --> 00:18:25,779
now I have this object and I somehow

494
00:18:23,860 --> 00:18:28,809
managed to get it back to me the

495
00:18:25,779 --> 00:18:30,850
attacker then I can now read heartbleed

496
00:18:28,809 --> 00:18:32,289
style server-side memory this is not

497
00:18:30,850 --> 00:18:34,389
from open SSL so the secrets will be

498
00:18:32,289 --> 00:18:36,580
different it'll be source code and code

499
00:18:34,389 --> 00:18:38,500
secrets versus necessarily the SSH keys

500
00:18:36,580 --> 00:18:39,668
but you know it'd still be too bad and

501
00:18:38,500 --> 00:18:41,649
actually depending on how you have your

502
00:18:39,669 --> 00:18:46,090
note it might even be the SSH keys the

503
00:18:41,649 --> 00:18:47,559
TLS keys I'm sorry so let's talk a

504
00:18:46,090 --> 00:18:49,418
little bit about how we how this happens

505
00:18:47,559 --> 00:18:51,610
here in buffer but this vulnerability

506
00:18:49,419 --> 00:18:55,899
buffer related vulnerabilities are now

507
00:18:51,610 --> 00:18:57,610
in some pretty major packages so whether

508
00:18:55,899 --> 00:18:59,320
in Mongoose they're in requests they're

509
00:18:57,610 --> 00:19:01,199
in WS just to give you a sense for what

510
00:18:59,320 --> 00:19:03,850
gets downloaded 17 million times a month

511
00:19:01,200 --> 00:19:05,500
and we did a quick can I get hub query

512
00:19:03,850 --> 00:19:07,928
cuz get a vessel some of its data in

513
00:19:05,500 --> 00:19:09,490
bigquery and very quickly found 10,000

514
00:19:07,929 --> 00:19:11,919
projects that use a vulnerable version

515
00:19:09,490 --> 00:19:14,409
of request directly so it's several

516
00:19:11,919 --> 00:19:18,519
people just don't think about it so in

517
00:19:14,409 --> 00:19:20,440
gouf we use buffer as the as the entity

518
00:19:18,519 --> 00:19:21,970
or the element that holds our notes here

519
00:19:20,440 --> 00:19:24,549
so we're gonna again switch to the

520
00:19:21,970 --> 00:19:29,080
command line a little bit here and I've

521
00:19:24,549 --> 00:19:32,519
got some aliases here to help me do it

522
00:19:29,080 --> 00:19:35,470
so you know just to kind of flow through

523
00:19:32,519 --> 00:19:37,929
I'm gonna do this echo content by beer

524
00:19:35,470 --> 00:19:39,879
and I'm gonna use HTTP pie just for

525
00:19:37,929 --> 00:19:45,100
syntax highlighting this is like curl

526
00:19:39,879 --> 00:19:47,259
but prettier so just sort of posts posts

527
00:19:45,100 --> 00:19:50,139
the the content and all we've done here

528
00:19:47,259 --> 00:19:52,080
really is switch to a curl a command

529
00:19:50,139 --> 00:19:55,719
that will just add the by beer over here

530
00:19:52,080 --> 00:19:57,580
but because this is node typically you

531
00:19:55,720 --> 00:19:59,100
can take input in another format any

532
00:19:57,580 --> 00:20:01,689
suggestions

533
00:19:59,100 --> 00:20:03,039
JSON everybody loves JSON in JavaScript

534
00:20:01,690 --> 00:20:07,360
you know it's so native it's so easy to

535
00:20:03,039 --> 00:20:09,610
work and super trivial to to to add so

536
00:20:07,360 --> 00:20:11,110
we can do the same thing and again just

537
00:20:09,610 --> 00:20:16,019
sort of sparing myself some typing here

538
00:20:11,110 --> 00:20:16,019
you can do the same thing using JSON

539
00:20:16,049 --> 00:20:20,230
just a little bit here and it's the same

540
00:20:18,820 --> 00:20:23,769
thing right I'm just gonna say fix the

541
00:20:20,230 --> 00:20:25,480
bike run this going here fix the bike

542
00:20:23,769 --> 00:20:26,980
right nothing all that spectacular but

543
00:20:25,480 --> 00:20:33,519
because this is Jason I can do another

544
00:20:26,980 --> 00:20:39,610
type of manipulation here it is so Jason

545
00:20:33,519 --> 00:20:43,929
I can do this which is just another

546
00:20:39,610 --> 00:20:45,039
string right if I just do this then I'll

547
00:20:43,929 --> 00:20:48,190
just get an 800 here

548
00:20:45,039 --> 00:20:50,740
but in Jason it actually typically gets

549
00:20:48,190 --> 00:20:53,559
translated to a JavaScript object so if

550
00:20:50,740 --> 00:20:56,549
I remove the quotes the inferring of the

551
00:20:53,559 --> 00:20:58,658
type would happen as part of the the

552
00:20:56,549 --> 00:20:59,710
processor and the parsing of the object

553
00:20:58,659 --> 00:21:01,299
so if I do this

554
00:20:59,710 --> 00:21:03,909
suddenly what I've passed is an integer

555
00:21:01,299 --> 00:21:05,350
or not a string and if I call this and

556
00:21:03,909 --> 00:21:09,519
this is just for convenience where I go

557
00:21:05,350 --> 00:21:11,049
back the the the note and if I go in

558
00:21:09,519 --> 00:21:12,639
here I'll see a bunch of binary data and

559
00:21:11,049 --> 00:21:14,080
if I do this enough times and you know

560
00:21:12,639 --> 00:21:16,928
there's no telling what happens in a in

561
00:21:14,080 --> 00:21:18,428
any specific set but and it was in

562
00:21:16,929 --> 00:21:20,169
fairness enough time I will get again

563
00:21:18,429 --> 00:21:23,049
the source code the different secrets

564
00:21:20,169 --> 00:21:25,059
from the code so this is this is very

565
00:21:23,049 --> 00:21:27,070
much a severe vulnerability and it

566
00:21:25,059 --> 00:21:29,500
happens in very popular components and

567
00:21:27,070 --> 00:21:31,120
you'd be amazed at how often they are

568
00:21:29,500 --> 00:21:32,230
not updated because from from a

569
00:21:31,120 --> 00:21:33,399
developer perspective there's not a lot

570
00:21:32,230 --> 00:21:35,139
of conversation there's not any

571
00:21:33,399 --> 00:21:37,750
conversation really about vulnerable

572
00:21:35,139 --> 00:21:40,959
packages and therefore people oftentimes

573
00:21:37,750 --> 00:21:42,340
some people are very upgrade biased like

574
00:21:40,960 --> 00:21:44,049
they wants to use the latest and

575
00:21:42,340 --> 00:21:45,639
greatest but there's a lot of also fear

576
00:21:44,049 --> 00:21:47,500
of upgrade because you don't want to go

577
00:21:45,639 --> 00:21:48,580
to break you want it to be deterministic

578
00:21:47,500 --> 00:21:50,440
you want to know that you can deploy

579
00:21:48,580 --> 00:21:52,240
this and it's the same version again

580
00:21:50,440 --> 00:21:56,110
so people are oftentimes very averse to

581
00:21:52,240 --> 00:21:57,759
upgrades so I'll show one more

582
00:21:56,110 --> 00:22:01,570
vulnerability because that is maybe a

583
00:21:57,759 --> 00:22:03,129
little bit more relevant to node and

584
00:22:01,570 --> 00:22:07,360
again I switch off I think I still have

585
00:22:03,129 --> 00:22:10,870
10 ish or seven minutes which is in MS

586
00:22:07,360 --> 00:22:12,020
and this is maybe one of maybe the most

587
00:22:10,870 --> 00:22:16,250
popular this

588
00:22:12,020 --> 00:22:18,170
the most kind of recurring type of

589
00:22:16,250 --> 00:22:20,390
vulnerability then we see in our system

590
00:22:18,170 --> 00:22:21,950
we mark it as low severity a little bit

591
00:22:20,390 --> 00:22:23,540
dubious and what it is is a regular

592
00:22:21,950 --> 00:22:27,080
expression D now service anybody here

593
00:22:23,540 --> 00:22:28,428
heard of redose some aware of it

594
00:22:27,080 --> 00:22:31,189
awareness of it like clearly already

595
00:22:28,429 --> 00:22:34,130
knows of dose of dental service and what

596
00:22:31,190 --> 00:22:35,360
happens is regular expressions are we

597
00:22:34,130 --> 00:22:39,320
don't think of them that way but they

598
00:22:35,360 --> 00:22:41,659
are algorithms and they take a nonlinear

599
00:22:39,320 --> 00:22:42,740
amount of time to process an input

600
00:22:41,660 --> 00:22:44,390
string depending on the regular

601
00:22:42,740 --> 00:22:47,090
expression that lack of linearity you

602
00:22:44,390 --> 00:22:48,110
might be you know a very steep curve or

603
00:22:47,090 --> 00:22:50,149
it might be a lighter one but it

604
00:22:48,110 --> 00:22:51,678
definitely is nonlinear so it means that

605
00:22:50,150 --> 00:22:53,690
every time you are running a regular

606
00:22:51,679 --> 00:22:55,550
expression if you're not containing the

607
00:22:53,690 --> 00:22:57,530
length of the strings that come in and

608
00:22:55,550 --> 00:22:59,450
sometimes even if you are you might

609
00:22:57,530 --> 00:23:02,420
actually make that thread very very busy

610
00:22:59,450 --> 00:23:04,400
for a long time this is this is a

611
00:23:02,420 --> 00:23:06,470
problem in every language because you

612
00:23:04,400 --> 00:23:08,059
can pretty easily occupy a thread and

613
00:23:06,470 --> 00:23:09,860
you can kind of get a server out of

614
00:23:08,059 --> 00:23:12,110
commission but it's especially bad in

615
00:23:09,860 --> 00:23:14,178
node because nodes claim to fame is that

616
00:23:12,110 --> 00:23:15,860
it's event based it doesn't scale on

617
00:23:14,179 --> 00:23:17,450
threads it scales on events a single

618
00:23:15,860 --> 00:23:19,459
thread can process a huge number of

619
00:23:17,450 --> 00:23:21,230
clients so even a massive production

620
00:23:19,460 --> 00:23:24,140
application in node typically doesn't

621
00:23:21,230 --> 00:23:27,980
have that many threads running and so in

622
00:23:24,140 --> 00:23:30,500
this case we use MS and redose happens

623
00:23:27,980 --> 00:23:32,420
just everywhere but we use a mess to say

624
00:23:30,500 --> 00:23:35,390
something like you know Cole mom in two

625
00:23:32,420 --> 00:23:36,740
hours and it would I understand ms is

626
00:23:35,390 --> 00:23:38,150
just a little package that takes strings

627
00:23:36,740 --> 00:23:39,920
like two hours and the likes and this is

628
00:23:38,150 --> 00:23:40,970
a very simple regular expression to

629
00:23:39,920 --> 00:23:46,400
convert those into the number of

630
00:23:40,970 --> 00:23:49,610
milliseconds but that would take so you

631
00:23:46,400 --> 00:23:51,740
know we we support this type of input

632
00:23:49,610 --> 00:23:53,510
but what can we do is an attackers if we

633
00:23:51,740 --> 00:23:54,920
anticipate or in fact we don't even need

634
00:23:53,510 --> 00:23:57,230
to guess because we might have seen the

635
00:23:54,920 --> 00:24:00,700
package online that it has a redox

636
00:23:57,230 --> 00:24:03,230
vulnerability what we're gonna try to do

637
00:24:00,700 --> 00:24:05,420
put in a lot of numbers put a very long

638
00:24:03,230 --> 00:24:07,429
string so I'm just gonna sort of skip

639
00:24:05,420 --> 00:24:10,730
the foreplay here and go straight to it

640
00:24:07,429 --> 00:24:15,110
which is I am going to just echo a long

641
00:24:10,730 --> 00:24:18,380
string here and what I've done is I've

642
00:24:15,110 --> 00:24:20,149
just printed 60,000 fives because if I

643
00:24:18,380 --> 00:24:22,610
did another zero then my Heroku build

644
00:24:20,150 --> 00:24:25,010
would skyrocket and I also made the

645
00:24:22,610 --> 00:24:25,610
string almost match the pattern because

646
00:24:25,010 --> 00:24:27,230
you know the

647
00:24:25,610 --> 00:24:30,260
just so much more fun to make the Rex

648
00:24:27,230 --> 00:24:32,090
run longer and if I do this what happens

649
00:24:30,260 --> 00:24:35,270
now is you know it takes a long time to

650
00:24:32,090 --> 00:24:36,290
run and more interestingly if I go here

651
00:24:35,270 --> 00:24:38,510
and a click

652
00:24:36,290 --> 00:24:41,389
alright type the application is not

653
00:24:38,510 --> 00:24:43,190
responsive and it didn't take much and

654
00:24:41,390 --> 00:24:44,660
if this was a massive application then I

655
00:24:43,190 --> 00:24:46,760
might run many of them and if this was a

656
00:24:44,660 --> 00:24:49,460
service application then this would just

657
00:24:46,760 --> 00:24:51,620
hike up a bill and you know clearly not

658
00:24:49,460 --> 00:24:53,480
a good model so those are just four of

659
00:24:51,620 --> 00:24:54,830
you know as you might imagine many many

660
00:24:53,480 --> 00:24:56,420
vulnerabilities but really the point I

661
00:24:54,830 --> 00:24:58,309
was saying here is these are real

662
00:24:56,420 --> 00:25:00,500
vulnerabilities these are not some you

663
00:24:58,309 --> 00:25:02,120
know make-believe sides you know this is

664
00:25:00,500 --> 00:25:05,120
the theoretical problem that happened we

665
00:25:02,120 --> 00:25:08,629
see this on real applications massive

666
00:25:05,120 --> 00:25:13,760
applications of large organizations so

667
00:25:08,630 --> 00:25:15,890
let's go back here a little bit so so

668
00:25:13,760 --> 00:25:17,720
with that in mind I'd like to talk a

669
00:25:15,890 --> 00:25:21,919
little bit oh actually you know what

670
00:25:17,720 --> 00:25:25,450
that's gonna stay here still talk a

671
00:25:21,919 --> 00:25:27,590
little bit about solutions so there are

672
00:25:25,450 --> 00:25:29,299
several steps that you want to do when

673
00:25:27,590 --> 00:25:31,428
you talk about addressing the solution

674
00:25:29,299 --> 00:25:32,840
first is is kind of acknowledging you

675
00:25:31,429 --> 00:25:35,960
have a problem so you want to find these

676
00:25:32,840 --> 00:25:37,370
problems you can use sneak for a node

677
00:25:35,960 --> 00:25:41,780
you can use that ole wasp dependency

678
00:25:37,370 --> 00:25:44,030
checker you can use victims to be in

679
00:25:41,780 --> 00:25:45,500
Python it's still a very new problem

680
00:25:44,030 --> 00:25:46,580
there's a shortage of tooling but you

681
00:25:45,500 --> 00:25:48,230
know you can kind of find the tool

682
00:25:46,580 --> 00:25:50,030
that's right for your environment then

683
00:25:48,230 --> 00:25:51,410
you want to fix them fixes generally

684
00:25:50,030 --> 00:25:55,639
happen through upgrades like they do for

685
00:25:51,410 --> 00:25:57,020
binaries and rarely you also have a

686
00:25:55,640 --> 00:25:59,090
patching mechanism like you do for

687
00:25:57,020 --> 00:26:00,950
automated updates like in the case of

688
00:25:59,090 --> 00:26:04,280
snake we build some of these patches for

689
00:26:00,950 --> 00:26:06,020
node in the case of Ruby the rails

690
00:26:04,280 --> 00:26:08,240
community sometimes offers some of these

691
00:26:06,020 --> 00:26:11,389
patches for rails itself so you can look

692
00:26:08,240 --> 00:26:13,070
those up and a lot of this needs to

693
00:26:11,390 --> 00:26:14,330
happen like I will posit that while you

694
00:26:13,070 --> 00:26:16,490
need to know about this problem and you

695
00:26:14,330 --> 00:26:17,540
need to understand it you don't want to

696
00:26:16,490 --> 00:26:19,100
tackle it yourself you don't want the

697
00:26:17,540 --> 00:26:20,178
security people to do this but as we've

698
00:26:19,100 --> 00:26:22,490
sort of talking about you want the

699
00:26:20,179 --> 00:26:24,799
developers to embrace this so when you

700
00:26:22,490 --> 00:26:26,390
think about whatever tool might have

701
00:26:24,799 --> 00:26:28,340
done we're here when you think about

702
00:26:26,390 --> 00:26:29,990
whatever tool that you've chosen to

703
00:26:28,340 --> 00:26:33,320
integrate you want to think about how do

704
00:26:29,990 --> 00:26:34,880
you want to pull those types of fixes

705
00:26:33,320 --> 00:26:36,800
those types of tests in and make them

706
00:26:34,880 --> 00:26:37,880
happen continuously so again I'll kind

707
00:26:36,800 --> 00:26:39,409
of show you how we do it here instinct

708
00:26:37,880 --> 00:26:42,140
which as we found the issues we

709
00:26:39,410 --> 00:26:44,090
fix them by submitting a fix PR so we

710
00:26:42,140 --> 00:26:45,410
find that that approach in general for

711
00:26:44,090 --> 00:26:47,330
whether its dependencies or other

712
00:26:45,410 --> 00:26:48,620
approach is useful you submit a pull

713
00:26:47,330 --> 00:26:50,120
request there's an actual change I think

714
00:26:48,620 --> 00:26:52,550
Matt mentioned that as well it's now

715
00:26:50,120 --> 00:26:54,080
being tracked people like closing pull

716
00:26:52,550 --> 00:26:55,850
requests they don't like accumulating a

717
00:26:54,080 --> 00:26:57,860
backlog of them and these have the

718
00:26:55,850 --> 00:26:59,510
necessary changes to to make the changes

719
00:26:57,860 --> 00:27:00,679
go away and then once you've sort of

720
00:26:59,510 --> 00:27:02,810
found the issues and you have fixed the

721
00:27:00,680 --> 00:27:04,970
issues and your vulnerability free you

722
00:27:02,810 --> 00:27:07,250
want to talk about two continuous things

723
00:27:04,970 --> 00:27:11,960
that you want to do the first is prevent

724
00:27:07,250 --> 00:27:13,250
you can add tests into the the pull

725
00:27:11,960 --> 00:27:15,590
request processor into your build

726
00:27:13,250 --> 00:27:18,290
process to catch whenever somebody adds

727
00:27:15,590 --> 00:27:20,120
a vulnerable package so you know github

728
00:27:18,290 --> 00:27:22,340
allows you to do things like this like a

729
00:27:20,120 --> 00:27:23,389
test in the in the pull request that

730
00:27:22,340 --> 00:27:25,490
just sort of says hey you've just added

731
00:27:23,390 --> 00:27:27,140
a vulnerable package or the equivalent

732
00:27:25,490 --> 00:27:28,640
of that is put in the build put some

733
00:27:27,140 --> 00:27:29,510
form of test action in the build so

734
00:27:28,640 --> 00:27:31,010
you're catching them when they happen

735
00:27:29,510 --> 00:27:34,000
and then the last step we talked about

736
00:27:31,010 --> 00:27:36,410
is respond and that's be able to track

737
00:27:34,000 --> 00:27:38,360
which dependencies you're using and then

738
00:27:36,410 --> 00:27:39,800
track vulnerabilities against them we

739
00:27:38,360 --> 00:27:41,270
have a little bit of an advantage here

740
00:27:39,800 --> 00:27:42,649
because unlike the world of binaries

741
00:27:41,270 --> 00:27:44,450
which is already very messy and we get a

742
00:27:42,650 --> 00:27:46,250
lot of these unnecessary items here we

743
00:27:44,450 --> 00:27:47,900
can try to build and focus our tools

744
00:27:46,250 --> 00:27:49,940
directly to the environments and the

745
00:27:47,900 --> 00:27:53,090
tools that we use again kind of in our

746
00:27:49,940 --> 00:27:55,760
world we do this via these proactive fix

747
00:27:53,090 --> 00:27:57,050
pr's fixed pull requests or when there's

748
00:27:55,760 --> 00:27:59,170
a new vulnerability we sort of submit

749
00:27:57,050 --> 00:28:01,820
one of those fix PRS and notifications

750
00:27:59,170 --> 00:28:02,930
you you can build these are again

751
00:28:01,820 --> 00:28:04,669
because of the loaner abilities are very

752
00:28:02,930 --> 00:28:06,260
tailored to a specific environment if

753
00:28:04,670 --> 00:28:08,540
you were to build automation around it

754
00:28:06,260 --> 00:28:09,740
you can be proactive but only the

755
00:28:08,540 --> 00:28:11,180
vulnerabilities that affect your

756
00:28:09,740 --> 00:28:18,200
applications just sort of test if they

757
00:28:11,180 --> 00:28:21,050
exist there so to recap

758
00:28:18,200 --> 00:28:22,940
kind of stepping out of that two types

759
00:28:21,050 --> 00:28:24,590
of takeaways first is maybe a little bit

760
00:28:22,940 --> 00:28:26,960
more specific maybe pass on sort of the

761
00:28:24,590 --> 00:28:28,520
core dev teams if they're not here which

762
00:28:26,960 --> 00:28:29,570
is there are some specific things in

763
00:28:28,520 --> 00:28:30,980
JavaScript that you might be able to

764
00:28:29,570 --> 00:28:32,389
learn from these and from the other

765
00:28:30,980 --> 00:28:34,610
vulnerabilities around how to do secure

766
00:28:32,390 --> 00:28:36,380
coding I've seen various shops actually

767
00:28:34,610 --> 00:28:38,060
start to use those as internal training

768
00:28:36,380 --> 00:28:40,640
as a way to sort of educate their

769
00:28:38,060 --> 00:28:43,669
developers around how would they what

770
00:28:40,640 --> 00:28:45,320
types of mistakes might happen not be

771
00:28:43,670 --> 00:28:47,870
offended by them because they happened

772
00:28:45,320 --> 00:28:50,060
to really good developers on really

773
00:28:47,870 --> 00:28:52,639
popular packages and see how they were

774
00:28:50,060 --> 00:28:54,980
addressed in the real world

775
00:28:52,640 --> 00:28:56,600
and then maybe my bigger takeaway is

776
00:28:54,980 --> 00:28:58,610
that we should think about open source

777
00:28:56,600 --> 00:29:00,260
packages sort of there that black is the

778
00:28:58,610 --> 00:29:02,179
new pink or whatever you know OSS

779
00:29:00,260 --> 00:29:03,710
package vulnerabilities in my mind are

780
00:29:02,180 --> 00:29:05,750
kind of the new on patch servers as the

781
00:29:03,710 --> 00:29:07,910
world especially with server lists and

782
00:29:05,750 --> 00:29:09,650
platform as-a-service moves into a world

783
00:29:07,910 --> 00:29:11,300
where we're trying to manage servers as

784
00:29:09,650 --> 00:29:16,100
you know as little as possible unless

785
00:29:11,300 --> 00:29:17,870
we're at Yelp then then the this concern

786
00:29:16,100 --> 00:29:20,000
like there's a lot of acknowledgement of

787
00:29:17,870 --> 00:29:21,379
the open source binary vulnerabilities

788
00:29:20,000 --> 00:29:24,110
and therefore a lot of these solutions

789
00:29:21,380 --> 00:29:25,550
and like ecosystem wide around how do we

790
00:29:24,110 --> 00:29:27,320
tackle them but there's really no

791
00:29:25,550 --> 00:29:29,000
conversation around open source packages

792
00:29:27,320 --> 00:29:31,159
and I think that just would make them

793
00:29:29,000 --> 00:29:32,540
the next easiest way for attackers in

794
00:29:31,160 --> 00:29:34,100
it's already a pretty easy one there

795
00:29:32,540 --> 00:29:35,750
there was a bit of a plug I've got a

796
00:29:34,100 --> 00:29:36,980
blog post I posted just a day about

797
00:29:35,750 --> 00:29:39,410
serverless security vulnerabilities

798
00:29:36,980 --> 00:29:41,630
welcome to join it so I would say for

799
00:29:39,410 --> 00:29:43,010
those ones similar workflow to maybe

800
00:29:41,630 --> 00:29:44,390
what you're hopefully doing for binaries

801
00:29:43,010 --> 00:29:46,100
you know define the issues you want to

802
00:29:44,390 --> 00:29:47,680
fix the issues via updates or patches

803
00:29:46,100 --> 00:29:49,850
when available you want to prevent

804
00:29:47,680 --> 00:29:51,470
vulnerable package don't don't

805
00:29:49,850 --> 00:29:52,879
accumulate this as a technical debt it's

806
00:29:51,470 --> 00:29:56,630
an opportunity to take on a new problem

807
00:29:52,880 --> 00:29:58,160
in a modern way and you want to respond

808
00:29:56,630 --> 00:30:00,190
quickly to new vulnerabilities before

809
00:29:58,160 --> 00:30:02,390
attackers get a chance to exploit them

810
00:30:00,190 --> 00:30:04,010
and I do want to stress that while I

811
00:30:02,390 --> 00:30:05,450
picked on node and at p.m. here this

812
00:30:04,010 --> 00:30:07,190
happens in Ruby gems it happens in

813
00:30:05,450 --> 00:30:10,400
mavens the stats and examples for every

814
00:30:07,190 --> 00:30:12,590
one of the environments so that's it

815
00:30:10,400 --> 00:30:13,370
open source is awesome but please enjoy

816
00:30:12,590 --> 00:30:16,389
it responsibly

817
00:30:13,370 --> 00:30:16,389
thank you

818
00:30:18,570 --> 00:30:26,189
I have time for questions I think it was

819
00:30:24,059 --> 00:30:30,590
supposed to be to 1250 so I have four

820
00:30:26,190 --> 00:30:30,590
minutes it's the mic floating around

821
00:30:39,950 --> 00:30:45,090
yeah I think the lack of maturity for

822
00:30:42,720 --> 00:30:46,590
vulnerabilities also happens in the sort

823
00:30:45,090 --> 00:30:49,168
of tracking of the vulnerability a

824
00:30:46,590 --> 00:30:50,610
little bit so for us we build we have an

825
00:30:49,169 --> 00:30:52,669
open source vulnerability database it's

826
00:30:50,610 --> 00:30:57,090
on stereo slash Volm and it's on github

827
00:30:52,669 --> 00:30:59,250
where where we kind of sniff github for

828
00:30:57,090 --> 00:31:00,959
security related activities two-thirds

829
00:30:59,250 --> 00:31:02,700
of the issues we inventory have no CVE

830
00:31:00,960 --> 00:31:04,789
people don't understand the need to

831
00:31:02,700 --> 00:31:06,960
report those so we have multiple sources

832
00:31:04,789 --> 00:31:09,090
some of it is around research but a lot

833
00:31:06,960 --> 00:31:11,070
of it is just tracking github activities

834
00:31:09,090 --> 00:31:12,779
and recently increasingly we're starting

835
00:31:11,070 --> 00:31:15,090
to get some reports from people that

836
00:31:12,779 --> 00:31:16,500
have identified something unfortunately

837
00:31:15,090 --> 00:31:19,470
too often after they've logged an issue

838
00:31:16,500 --> 00:31:21,059
they come to tell us and get them

839
00:31:19,470 --> 00:31:22,679
themselves they're also conscious of the

840
00:31:21,059 --> 00:31:24,389
fact that there's no way to privately

841
00:31:22,679 --> 00:31:25,590
report a security issue and they're

842
00:31:24,389 --> 00:31:28,019
considering what they could do around

843
00:31:25,590 --> 00:31:29,459
the platform to do those so we're sort

844
00:31:28,019 --> 00:31:36,059
of talking to them about helping provide

845
00:31:29,460 --> 00:31:42,450
some guidance yes yeah you can say and I

846
00:31:36,059 --> 00:31:45,330
can echo it back as well so how can we

847
00:31:42,450 --> 00:31:46,620
then tell if you know once you have a

848
00:31:45,330 --> 00:31:48,240
particular package it has

849
00:31:46,620 --> 00:31:49,799
vulnerabilities how can we tell if our

850
00:31:48,240 --> 00:31:52,769
code is actually using those particular

851
00:31:49,799 --> 00:31:54,149
methods do you get specific you know

852
00:31:52,769 --> 00:31:57,509
information about it's this particular

853
00:31:54,149 --> 00:31:59,370
usage or this particular API thing yeah

854
00:31:57,509 --> 00:32:02,039
no it's just so vulnerable components

855
00:31:59,370 --> 00:32:03,120
does not equal a vulnerable system and

856
00:32:02,039 --> 00:32:04,590
you need to check it

857
00:32:03,120 --> 00:32:06,959
I guess my thesis is that if you make

858
00:32:04,590 --> 00:32:08,250
fixing easier than assessing you might

859
00:32:06,960 --> 00:32:09,330
as well just get it out of the way and

860
00:32:08,250 --> 00:32:10,590
to an extent that's what happens with

861
00:32:09,330 --> 00:32:11,939
the binaries you don't like most of the

862
00:32:10,590 --> 00:32:13,408
time you don't spend the time even

863
00:32:11,940 --> 00:32:14,789
understanding what it is exactly that

864
00:32:13,409 --> 00:32:18,480
came in you're just trying to stay up to

865
00:32:14,789 --> 00:32:20,100
date and to an extent I think that's a

866
00:32:18,480 --> 00:32:22,049
more sane approach because you can't

867
00:32:20,100 --> 00:32:24,000
expect developers to have you can give

868
00:32:22,049 --> 00:32:24,929
kind of that guidelines around saying

869
00:32:24,000 --> 00:32:26,730
hey you want to address these

870
00:32:24,929 --> 00:32:28,860
vulnerabilities when you cannot address

871
00:32:26,730 --> 00:32:30,870
it sometimes using a that uses B that is

872
00:32:28,860 --> 00:32:32,060
C C has a vulnerability but you have no

873
00:32:30,870 --> 00:32:33,770
path like there is no

874
00:32:32,060 --> 00:32:36,290
in a way that would get you to a fixed

875
00:32:33,770 --> 00:32:37,580
version of C sometimes you can patch it

876
00:32:36,290 --> 00:32:39,200
but if you cannot patch it you cannot

877
00:32:37,580 --> 00:32:42,230
upgrade you have to have the

878
00:32:39,200 --> 00:32:43,760
conversation around assessment and

879
00:32:42,230 --> 00:32:46,430
clearly you should should log that you

880
00:32:43,760 --> 00:32:47,990
should track that over time but in most

881
00:32:46,430 --> 00:32:50,750
cases at least what we try to do is make

882
00:32:47,990 --> 00:32:53,690
it so easy to fix that it's easier to

883
00:32:50,750 --> 00:32:55,010
fix than it is to to to have that much

884
00:32:53,690 --> 00:32:56,150
more complicated conversation about

885
00:32:55,010 --> 00:32:58,220
whether your system is actually more

886
00:32:56,150 --> 00:33:00,290
neural that doesn't work very well when

887
00:32:58,220 --> 00:33:01,940
you have the the features themselves are

888
00:33:00,290 --> 00:33:04,879
the vulnerabilities right or dangerous

889
00:33:01,940 --> 00:33:07,250
functionality absolutely this is a slice

890
00:33:04,880 --> 00:33:08,780
of security that deals specifically with

891
00:33:07,250 --> 00:33:11,510
having vulnerable components once you

892
00:33:08,780 --> 00:33:13,490
have a vulnerable component to it you

893
00:33:11,510 --> 00:33:16,070
know that there are many paths to using

894
00:33:13,490 --> 00:33:18,530
that that specific component and those

895
00:33:16,070 --> 00:33:20,389
paths may change over time so I just

896
00:33:18,530 --> 00:33:21,710
think you know with the principles of

897
00:33:20,390 --> 00:33:23,570
defense-in-depth you basically would

898
00:33:21,710 --> 00:33:25,430
rather just avoid having the vulnerable

899
00:33:23,570 --> 00:33:27,980
component it's not going to address

900
00:33:25,430 --> 00:33:30,080
design vulnerabilities right now it

901
00:33:27,980 --> 00:33:31,340
doesn't yet capture insecurity faults so

902
00:33:30,080 --> 00:33:33,500
there's more to do there for sure I

903
00:33:31,340 --> 00:33:35,449
think it's great I think you know it

904
00:33:33,500 --> 00:33:37,420
already is a massive sign of maturity in

905
00:33:35,450 --> 00:33:39,890
a workflow when you can even use this

906
00:33:37,420 --> 00:33:41,840
most most dev workflows cannot even

907
00:33:39,890 --> 00:33:43,220
start to do great and I think that's a

908
00:33:41,840 --> 00:33:46,310
big thesis as well which is like we

909
00:33:43,220 --> 00:33:47,780
built and I think there's some nascent

910
00:33:46,310 --> 00:33:49,070
here but I think the way to approach is

911
00:33:47,780 --> 00:33:52,250
to think about how would you build the

912
00:33:49,070 --> 00:33:53,480
developer tooling set that would that

913
00:33:52,250 --> 00:33:54,590
would help address this problem is

914
00:33:53,480 --> 00:33:57,350
opposed to how do you build an audit

915
00:33:54,590 --> 00:33:58,820
tool someone who wrote a security like I

916
00:33:57,350 --> 00:34:00,679
static analysis tool that ran in the IDE

917
00:33:58,820 --> 00:34:03,169
and was called applicant developer

918
00:34:00,680 --> 00:34:05,240
edition and it was not it was an

919
00:34:03,170 --> 00:34:07,160
auditing solution that was very sort of

920
00:34:05,240 --> 00:34:09,139
InfoSec Orient's it was a great tool but

921
00:34:07,160 --> 00:34:11,330
it was not the developer tool in terms

922
00:34:09,139 --> 00:34:12,290
of workflow so you know personally like

923
00:34:11,330 --> 00:34:13,909
that snake we were trying to sort of

924
00:34:12,290 --> 00:34:15,590
build it from that mentality and I think

925
00:34:13,909 --> 00:34:17,449
anything you build homebrew you should

926
00:34:15,590 --> 00:34:19,460
start from the developer methodology and

927
00:34:17,449 --> 00:34:21,319
and figure out how do you fit into that

928
00:34:19,460 --> 00:34:25,699
versus you know like Elizabeth was also

929
00:34:21,320 --> 00:34:29,150
mention about earlier on other questions

930
00:34:25,699 --> 00:34:31,810
oh so I'll be here I'll let you go for

931
00:34:29,150 --> 00:34:31,810
much thank you

