1
00:00:00,570 --> 00:00:06,690
very good hi my name is Jacob we so far

2
00:00:04,319 --> 00:00:09,210
had some really cool talks the bar is

3
00:00:06,690 --> 00:00:13,769
actually raised pretty high and I will

4
00:00:09,210 --> 00:00:16,170
try to keep that standard so today we're

5
00:00:13,769 --> 00:00:19,920
going to talk about how to manage shared

6
00:00:16,170 --> 00:00:23,340
secrets using basic UNIX tools let me

7
00:00:19,920 --> 00:00:27,150
start with a question what are shared

8
00:00:23,340 --> 00:00:29,880
secrets shared secrets are basically all

9
00:00:27,150 --> 00:00:32,790
the secret things your team and your

10
00:00:29,880 --> 00:00:34,800
servers have to know most modern web

11
00:00:32,790 --> 00:00:38,489
applications integrate with different

12
00:00:34,800 --> 00:00:41,069
services one way or another it could be

13
00:00:38,489 --> 00:00:43,649
something like your database a third

14
00:00:41,070 --> 00:00:46,950
party API another service into you in

15
00:00:43,649 --> 00:00:49,559
your infrastructure and often enough you

16
00:00:46,950 --> 00:00:52,170
need something like credentials an API

17
00:00:49,559 --> 00:00:55,789
token or a certificate in order to be

18
00:00:52,170 --> 00:00:55,789
able to establish a trusted connection

19
00:00:55,940 --> 00:01:00,839
handling such secrets in a working team

20
00:00:58,260 --> 00:01:02,280
and during deployments can be actually

21
00:01:00,840 --> 00:01:05,400
quite challenging and sometimes even

22
00:01:02,280 --> 00:01:08,340
intimidating and it's even often a

23
00:01:05,400 --> 00:01:11,909
source of error or later on security

24
00:01:08,340 --> 00:01:14,340
breaches today we want to explore some

25
00:01:11,909 --> 00:01:17,970
directly applicable techniques that we

26
00:01:14,340 --> 00:01:23,400
can use to make that task a bit more

27
00:01:17,970 --> 00:01:25,530
easy so let's start right in there are

28
00:01:23,400 --> 00:01:29,369
several approaches for handling secrets

29
00:01:25,530 --> 00:01:34,770
in area application the oldest one I

30
00:01:29,369 --> 00:01:37,920
know and I admit I used it is having a

31
00:01:34,770 --> 00:01:39,270
constant in your source code and this

32
00:01:37,920 --> 00:01:41,600
immediately solves the problem of

33
00:01:39,270 --> 00:01:44,729
keeping secret information in sync right

34
00:01:41,600 --> 00:01:48,059
so in sync between your team members and

35
00:01:44,729 --> 00:01:49,408
your deployments whenever you need to

36
00:01:48,060 --> 00:01:53,340
change the password you can just change

37
00:01:49,409 --> 00:01:55,979
it first of all you can't really

38
00:01:53,340 --> 00:01:57,930
consider this a secure option for

39
00:01:55,979 --> 00:01:59,850
obvious reasons first of all everyone

40
00:01:57,930 --> 00:02:01,799
who gets access to the source code will

41
00:01:59,850 --> 00:02:05,158
also be able to read all your secrets

42
00:02:01,799 --> 00:02:10,259
and furthermore stuff like key rotation

43
00:02:05,159 --> 00:02:12,900
will become really tedious maybe because

44
00:02:10,258 --> 00:02:13,890
if you iterate password changes over

45
00:02:12,900 --> 00:02:15,960
time you

46
00:02:13,890 --> 00:02:19,470
to change your source code recommit your

47
00:02:15,960 --> 00:02:23,100
entire source code deploy it to change a

48
00:02:19,470 --> 00:02:24,870
secret and beside that it becomes really

49
00:02:23,100 --> 00:02:26,970
hard to deploy the same code to more

50
00:02:24,870 --> 00:02:31,050
than one location like staging and

51
00:02:26,970 --> 00:02:33,990
production and QA whatever so an evolved

52
00:02:31,050 --> 00:02:35,850
alternative to that may be a common

53
00:02:33,990 --> 00:02:38,040
alternative is to store the secrets you

54
00:02:35,850 --> 00:02:40,700
need and a configuration file that is

55
00:02:38,040 --> 00:02:43,350
not checked into version control and

56
00:02:40,700 --> 00:02:45,320
this solves the pending issue of having

57
00:02:43,350 --> 00:02:48,299
clear text secrets in your source code

58
00:02:45,320 --> 00:02:50,790
but it generates new challenges first of

59
00:02:48,300 --> 00:02:53,280
all the key takeaway from the previous

60
00:02:50,790 --> 00:02:56,549
slides it's now gone the synchronization

61
00:02:53,280 --> 00:02:58,470
does not come for free anymore if you

62
00:02:56,550 --> 00:02:59,910
change the mentioned password your team

63
00:02:58,470 --> 00:03:02,130
members and your servers they have to

64
00:02:59,910 --> 00:03:08,190
know so you need a channel to distribute

65
00:03:02,130 --> 00:03:10,140
that knowledge and beside that there's

66
00:03:08,190 --> 00:03:12,239
an unencrypted file on the file system

67
00:03:10,140 --> 00:03:14,040
of your servers maybe on the file system

68
00:03:12,239 --> 00:03:16,950
of your local machine contains your

69
00:03:14,040 --> 00:03:20,790
precious secrets fields kind of not so

70
00:03:16,950 --> 00:03:22,798
secure and in addition you get stuff

71
00:03:20,790 --> 00:03:25,320
like lockstep scenarios and deployment

72
00:03:22,799 --> 00:03:26,850
so you change a variable name in source

73
00:03:25,320 --> 00:03:28,739
code and in your configuration you have

74
00:03:26,850 --> 00:03:31,019
to make sure you deploy it at the same

75
00:03:28,739 --> 00:03:34,310
time stuff like this can give you

76
00:03:31,019 --> 00:03:37,410
problems so to completely eradicate

77
00:03:34,310 --> 00:03:39,720
reading secrets from file system in

78
00:03:37,410 --> 00:03:43,820
clear-text is using environment

79
00:03:39,720 --> 00:03:47,370
variables like 12 factor app for example

80
00:03:43,820 --> 00:03:48,750
suggests an approach like this will keep

81
00:03:47,370 --> 00:03:50,670
the tech secrets away from your

82
00:03:48,750 --> 00:03:53,160
committed source code and away from the

83
00:03:50,670 --> 00:03:56,970
file system at least of the deployment

84
00:03:53,160 --> 00:04:00,150
as such in addition to this configurable

85
00:03:56,970 --> 00:04:01,950
deploys get more easy you can just

86
00:04:00,150 --> 00:04:08,070
deploy setting different environment

87
00:04:01,950 --> 00:04:10,798
variables but it still leaves you the

88
00:04:08,070 --> 00:04:12,390
burden of finding a way to securely set

89
00:04:10,799 --> 00:04:15,060
these values and distribute them among

90
00:04:12,390 --> 00:04:17,969
your teams so in the end all three

91
00:04:15,060 --> 00:04:20,190
approaches I know doing this are kind of

92
00:04:17,970 --> 00:04:23,780
like a trade off either sync ability is

93
00:04:20,190 --> 00:04:23,780
super easy or not

94
00:04:26,340 --> 00:04:33,609
so this means we need some kind of a

95
00:04:28,840 --> 00:04:35,979
synchronized shared password store which

96
00:04:33,610 --> 00:04:40,539
is encrypted can be decrypted by all the

97
00:04:35,979 --> 00:04:44,560
team members individually and ideally

98
00:04:40,539 --> 00:04:50,370
without the use of a shared password to

99
00:04:44,560 --> 00:04:53,379
do so we will use two pretty nifty tools

100
00:04:50,370 --> 00:04:58,599
which while I give a brief introduction

101
00:04:53,379 --> 00:05:02,069
to the first one being GPT I think who

102
00:04:58,599 --> 00:05:05,319
here work with GPG on a regular basis

103
00:05:02,069 --> 00:05:08,099
okay so I will give a really short

104
00:05:05,319 --> 00:05:11,169
introduction what GPG is not too deep

105
00:05:08,099 --> 00:05:13,509
just the stuff we need to know first of

106
00:05:11,169 --> 00:05:15,639
all it stands for cool-blue privacy

107
00:05:13,509 --> 00:05:16,900
guard and it is basically an

108
00:05:15,639 --> 00:05:20,650
implementation of a public key

109
00:05:16,900 --> 00:05:22,419
infrastructure you may heard of it may

110
00:05:20,650 --> 00:05:24,039
have heard of it in the context of email

111
00:05:22,419 --> 00:05:26,289
encryption which is kind of like the

112
00:05:24,039 --> 00:05:31,419
most common use case for GPG as far as

113
00:05:26,289 --> 00:05:33,659
I'm concerned it basically works like

114
00:05:31,419 --> 00:05:36,310
this if you you created ubg certificate

115
00:05:33,659 --> 00:05:39,370
it will contain a correlating public and

116
00:05:36,310 --> 00:05:43,990
private key which is a symmetric key

117
00:05:39,370 --> 00:05:46,900
scheme in addition to that to these two

118
00:05:43,990 --> 00:05:49,629
keys the certificate will contain a gbg

119
00:05:46,900 --> 00:05:53,318
ID which is unique and you can use to it

120
00:05:49,629 --> 00:05:56,680
to refer to the certificate so this

121
00:05:53,319 --> 00:05:59,069
means if two or people all of the

122
00:05:56,680 --> 00:06:01,750
audience sent me their public keys I

123
00:05:59,069 --> 00:06:03,629
would be able to send them I could

124
00:06:01,750 --> 00:06:07,930
encrypt the file with the public key of

125
00:06:03,629 --> 00:06:10,599
one of the recipients and he would or

126
00:06:07,930 --> 00:06:12,699
she would be able to decrypt that file

127
00:06:10,599 --> 00:06:15,639
using the private key and I would use

128
00:06:12,699 --> 00:06:17,919
the GPT ID on my machine to reference

129
00:06:15,639 --> 00:06:19,750
which public key I want to use it's

130
00:06:17,919 --> 00:06:22,000
basically like a numeric representation

131
00:06:19,750 --> 00:06:25,300
of the name of the person who sent me

132
00:06:22,000 --> 00:06:27,879
the public key TPG has some more

133
00:06:25,300 --> 00:06:30,460
features like digital signatures which

134
00:06:27,879 --> 00:06:33,729
are not relevant for the examples we

135
00:06:30,460 --> 00:06:36,459
have to see so we stick to public

136
00:06:33,729 --> 00:06:37,659
private key crypto the second tool I

137
00:06:36,459 --> 00:06:43,900
want to talk about

138
00:06:37,660 --> 00:06:46,720
pass anybody no pass cool so the

139
00:06:43,900 --> 00:06:49,299
developers of past call it the standard

140
00:06:46,720 --> 00:06:53,140
UNIX password manager which is a very

141
00:06:49,300 --> 00:06:55,810
very bold statement so what they mean is

142
00:06:53,140 --> 00:06:58,360
it adheres to the UNIX principle which

143
00:06:55,810 --> 00:07:02,230
means it does one thing but it does it

144
00:06:58,360 --> 00:07:05,560
right and which again is a bold

145
00:07:02,230 --> 00:07:08,860
statement what it does is basically a

146
00:07:05,560 --> 00:07:11,440
convenience wrapper around GPT because

147
00:07:08,860 --> 00:07:14,560
whoever when if someone worked with GPG

148
00:07:11,440 --> 00:07:16,900
it can be kind of I would say complex to

149
00:07:14,560 --> 00:07:18,850
work with jpg I don't know any UNIX tool

150
00:07:16,900 --> 00:07:24,880
that has more command line flex than GPG

151
00:07:18,850 --> 00:07:26,070
it's yeah path gives you a convenience

152
00:07:24,880 --> 00:07:29,830
wrapper around jpg

153
00:07:26,070 --> 00:07:32,740
basically it allows you to encrypt

154
00:07:29,830 --> 00:07:34,990
secret information with either one or

155
00:07:32,740 --> 00:07:36,670
several public keys and all the

156
00:07:34,990 --> 00:07:38,910
information you encrypt will be stored

157
00:07:36,670 --> 00:07:42,400
as flat files in one directory and this

158
00:07:38,910 --> 00:07:45,850
directory can be shared using version

159
00:07:42,400 --> 00:07:47,890
control this effectively gives you

160
00:07:45,850 --> 00:07:50,380
something like an encrypted pool of

161
00:07:47,890 --> 00:07:53,650
information that is shareable but so

162
00:07:50,380 --> 00:07:57,909
secure without any well-known passwords

163
00:07:53,650 --> 00:07:59,950
of course and in case you're interested

164
00:07:57,910 --> 00:08:02,110
in checking out paths it's actually

165
00:07:59,950 --> 00:08:05,710
super easy to get you will can install

166
00:08:02,110 --> 00:08:07,919
it on on Mac using blue and I think all

167
00:08:05,710 --> 00:08:11,020
Linux distributions I know have it in

168
00:08:07,919 --> 00:08:14,650
their package manager you can just

169
00:08:11,020 --> 00:08:17,200
install it so let's go to an example

170
00:08:14,650 --> 00:08:21,010
application and bring parts and TPG in

171
00:08:17,200 --> 00:08:23,800
practice what we want to do is build a

172
00:08:21,010 --> 00:08:26,440
super simple JavaScript application that

173
00:08:23,800 --> 00:08:28,810
should display certain statistics about

174
00:08:26,440 --> 00:08:31,030
a github user may be private statistics

175
00:08:28,810 --> 00:08:33,669
so we need access to the API to the

176
00:08:31,030 --> 00:08:35,110
github API which is possible using a

177
00:08:33,669 --> 00:08:39,280
username and an access token you can

178
00:08:35,110 --> 00:08:40,570
generate for that username and these two

179
00:08:39,280 --> 00:08:42,760
things username and the access token

180
00:08:40,570 --> 00:08:45,970
will be the shared secrets we want to

181
00:08:42,760 --> 00:08:47,410
manage I'll take care of everything will

182
00:08:45,970 --> 00:08:50,560
be hosted on a platform as a service

183
00:08:47,410 --> 00:08:51,730
holster to simplify and streamline as

184
00:08:50,560 --> 00:08:53,319
much of the info

185
00:08:51,730 --> 00:08:54,339
structure as possible I think most

186
00:08:53,320 --> 00:08:57,940
people know what platform-as-a-service

187
00:08:54,339 --> 00:09:00,940
is like because we're like have like a

188
00:08:57,940 --> 00:09:04,480
DevOps background in case you don't it

189
00:09:00,940 --> 00:09:06,370
means you don't have to manage a

190
00:09:04,480 --> 00:09:09,279
bare-metal service or virtual machines

191
00:09:06,370 --> 00:09:11,110
on your own instead the deployment

192
00:09:09,279 --> 00:09:13,180
occurs on an application basis you

193
00:09:11,110 --> 00:09:14,800
basically submit your application which

194
00:09:13,180 --> 00:09:16,839
could be a JavaScript file a ruby file

195
00:09:14,800 --> 00:09:18,990
you just give it to the holster and he

196
00:09:16,839 --> 00:09:21,220
does anything everything else for you

197
00:09:18,990 --> 00:09:23,740
scaling load balancing and stuff like

198
00:09:21,220 --> 00:09:24,420
database integration is all taken care

199
00:09:23,740 --> 00:09:26,649
of

200
00:09:24,420 --> 00:09:28,540
the simplest platform is a Service

201
00:09:26,649 --> 00:09:32,699
holster I know is all I worked with is

202
00:09:28,540 --> 00:09:36,519
Heroku so we use a Roku for the example

203
00:09:32,699 --> 00:09:38,469
the application is such is not important

204
00:09:36,519 --> 00:09:40,329
what it does the important part is

205
00:09:38,470 --> 00:09:43,149
that's one file in the extra chairs

206
00:09:40,329 --> 00:09:45,880
contains an X press J server express to

207
00:09:43,149 --> 00:09:49,300
say HTTP framework for HTTP server

208
00:09:45,880 --> 00:09:52,810
framework for JavaScript and it uses two

209
00:09:49,300 --> 00:09:56,699
environment variables which are quite

210
00:09:52,810 --> 00:09:59,319
important these are the credentials we

211
00:09:56,699 --> 00:10:03,310
want to use to make API calls so the

212
00:09:59,319 --> 00:10:05,800
github API Heroku itself deploys using

213
00:10:03,310 --> 00:10:08,410
git so that thing I would check it into

214
00:10:05,800 --> 00:10:10,990
my git repository at the Heroku remote

215
00:10:08,410 --> 00:10:13,300
and we just push it to Heroku basically

216
00:10:10,990 --> 00:10:15,760
Heroku gives you a nice example on how

217
00:10:13,300 --> 00:10:18,699
to set up your Heroku project so that's

218
00:10:15,760 --> 00:10:21,370
like a one minute task and a principle

219
00:10:18,699 --> 00:10:22,750
that's literally everything you all you

220
00:10:21,370 --> 00:10:24,160
have to do to get the application

221
00:10:22,750 --> 00:10:29,079
running you could just now access it

222
00:10:24,160 --> 00:10:30,219
online but it will start because we're

223
00:10:29,079 --> 00:10:35,079
not setting the environment variables

224
00:10:30,220 --> 00:10:36,670
right so the Roku CLI command line

225
00:10:35,079 --> 00:10:39,459
interface gives us a way to set these

226
00:10:36,670 --> 00:10:43,479
environment variables which looks like

227
00:10:39,459 --> 00:10:44,859
this it's actually quite easy to just

228
00:10:43,480 --> 00:10:47,490
set them the application will restart

229
00:10:44,860 --> 00:10:52,260
and the environment variables will be

230
00:10:47,490 --> 00:10:56,350
persisted online in the application but

231
00:10:52,260 --> 00:10:59,079
to execute this command I would have to

232
00:10:56,350 --> 00:11:02,529
manually type these secrets at least the

233
00:10:59,079 --> 00:11:04,180
API token is pretty secret and that will

234
00:11:02,529 --> 00:11:06,090
be true for any person who wants to

235
00:11:04,180 --> 00:11:09,900
deploy the application

236
00:11:06,090 --> 00:11:14,710
so that's a doesn't really scale for

237
00:11:09,900 --> 00:11:17,079
even a one-person team so what we want

238
00:11:14,710 --> 00:11:18,280
again is a way to retrieve the secret

239
00:11:17,080 --> 00:11:20,920
information automatically during

240
00:11:18,280 --> 00:11:24,310
deployment so that this clear text stuff

241
00:11:20,920 --> 00:11:27,969
can go away so let's use paths to build

242
00:11:24,310 --> 00:11:30,180
a secret store as I mentioned before

243
00:11:27,970 --> 00:11:31,870
pass operates on a single directory and

244
00:11:30,180 --> 00:11:35,140
to get started

245
00:11:31,870 --> 00:11:38,380
you basically define the directory you

246
00:11:35,140 --> 00:11:40,330
want to work on and that's unfortunately

247
00:11:38,380 --> 00:11:41,800
the only way to configure the past

248
00:11:40,330 --> 00:11:44,100
directory is to set an environment

249
00:11:41,800 --> 00:11:47,890
variable but that's just by design

250
00:11:44,100 --> 00:11:50,440
you decide which GPG ID should be used

251
00:11:47,890 --> 00:11:52,510
for encryption could be several in that

252
00:11:50,440 --> 00:11:54,550
case for easy example a simple example

253
00:11:52,510 --> 00:11:58,630
it's just my GPG ID and that's actually

254
00:11:54,550 --> 00:12:01,569
my gbg ID and then you just call pass in

255
00:11:58,630 --> 00:12:04,210
it and you're done with it what this

256
00:12:01,570 --> 00:12:08,860
does is creates a secret store inside of

257
00:12:04,210 --> 00:12:11,680
the directory but what can we do with it

258
00:12:08,860 --> 00:12:13,630
so what we can do is we can add secret

259
00:12:11,680 --> 00:12:16,540
information pretty straightforward

260
00:12:13,630 --> 00:12:18,340
you would just call pass add give it a

261
00:12:16,540 --> 00:12:21,520
path which is basically a key or the

262
00:12:18,340 --> 00:12:25,990
identifier of your secret and it will

263
00:12:21,520 --> 00:12:28,150
ask you on standard in to type the

264
00:12:25,990 --> 00:12:34,900
secret twice so you don't have any typos

265
00:12:28,150 --> 00:12:37,000
and it will be stored encrypted li the

266
00:12:34,900 --> 00:12:39,760
other side is you want to retrieve the

267
00:12:37,000 --> 00:12:44,020
information again you can do that using

268
00:12:39,760 --> 00:12:46,750
a who would've guessed pass show pass

269
00:12:44,020 --> 00:12:49,030
show on the other hand will give you on

270
00:12:46,750 --> 00:12:51,760
standard out the secret you just added

271
00:12:49,030 --> 00:12:55,540
it will do the decryption on your

272
00:12:51,760 --> 00:12:57,430
machine of course only if you're in

273
00:12:55,540 --> 00:12:59,469
possession of the private key of the

274
00:12:57,430 --> 00:13:01,500
unlocked private key that is matching

275
00:12:59,470 --> 00:13:06,100
the GPT ID that was used for encryption

276
00:13:01,500 --> 00:13:07,990
for obvious reasons and the fact that

277
00:13:06,100 --> 00:13:10,240
it's printing the secret out on

278
00:13:07,990 --> 00:13:12,160
standardout is particularly interesting

279
00:13:10,240 --> 00:13:14,080
because it is a very very convenient

280
00:13:12,160 --> 00:13:17,689
thing if you want to use it inside of

281
00:13:14,080 --> 00:13:20,300
scripts we will come to that in a second

282
00:13:17,690 --> 00:13:25,790
if you would take a look into the secret

283
00:13:20,300 --> 00:13:28,550
directory is this one it would not

284
00:13:25,790 --> 00:13:31,900
contain much surprises you will have to

285
00:13:28,550 --> 00:13:34,849
dot jpg files these two which basically

286
00:13:31,900 --> 00:13:39,560
if you just look into them its it looks

287
00:13:34,850 --> 00:13:42,170
like raw white noise it is the GPG

288
00:13:39,560 --> 00:13:44,689
encrypted secret information you just

289
00:13:42,170 --> 00:13:50,180
added the only special thing is the dot

290
00:13:44,690 --> 00:13:54,860
jpg ID file which contains to use GPG

291
00:13:50,180 --> 00:13:57,620
ids so pass knows whenever you you call

292
00:13:54,860 --> 00:14:00,290
pass ad with which GPT IDs to encrypt

293
00:13:57,620 --> 00:14:04,850
and i think that it's very it's very

294
00:14:00,290 --> 00:14:06,410
nice to see how few magical elements are

295
00:14:04,850 --> 00:14:08,930
involved to get past running it's

296
00:14:06,410 --> 00:14:14,089
actually virtually no magical elements

297
00:14:08,930 --> 00:14:15,739
and all surprises in that directory you

298
00:14:14,090 --> 00:14:17,060
could even use different TBG ids for

299
00:14:15,740 --> 00:14:18,710
different sub directories so you could

300
00:14:17,060 --> 00:14:20,420
have a dot jpg ID file in that

301
00:14:18,710 --> 00:14:23,330
production subfolder and one in a

302
00:14:20,420 --> 00:14:27,770
development subfolder so you could with

303
00:14:23,330 --> 00:14:29,150
some a basic access ACL like concept

304
00:14:27,770 --> 00:14:30,620
that a few people can access the

305
00:14:29,150 --> 00:14:32,000
production secrets and all the

306
00:14:30,620 --> 00:14:34,730
developers can access they develop

307
00:14:32,000 --> 00:14:39,110
secrets if you're interested we can talk

308
00:14:34,730 --> 00:14:41,840
to me after the talk about that and of

309
00:14:39,110 --> 00:14:44,630
course you don't have to use bare metal

310
00:14:41,840 --> 00:14:46,760
tools like find to look into it you can

311
00:14:44,630 --> 00:14:50,000
just use pass LS and it will nicely

312
00:14:46,760 --> 00:14:52,280
print of the content inside of course

313
00:14:50,000 --> 00:14:58,610
only the structure not the content of

314
00:14:52,280 --> 00:15:00,980
the secret store but so far that's all

315
00:14:58,610 --> 00:15:03,410
pretty nice but how can we use that in

316
00:15:00,980 --> 00:15:03,740
the configuration example we've seen

317
00:15:03,410 --> 00:15:06,459
before

318
00:15:03,740 --> 00:15:12,620
well when you're on a shell you can

319
00:15:06,460 --> 00:15:15,110
easily use it like this so you read the

320
00:15:12,620 --> 00:15:17,740
values out of the secret store

321
00:15:15,110 --> 00:15:21,470
assignment variables and then you call

322
00:15:17,740 --> 00:15:24,590
come on conflicts that again but this

323
00:15:21,470 --> 00:15:27,710
time without knowing physically typing

324
00:15:24,590 --> 00:15:30,650
the secrets you want to use which is

325
00:15:27,710 --> 00:15:35,960
like the next step towards

326
00:15:30,650 --> 00:15:37,699
more secure chain of handling secrets so

327
00:15:35,960 --> 00:15:42,050
far we have accomplished a secret store

328
00:15:37,700 --> 00:15:44,150
in a single directory but it's only for

329
00:15:42,050 --> 00:15:47,780
one person right I initialize it with my

330
00:15:44,150 --> 00:15:50,810
GPG ID so it's not really like sharing

331
00:15:47,780 --> 00:15:54,110
involved with other people so we're not

332
00:15:50,810 --> 00:15:56,780
really done what we want is working with

333
00:15:54,110 --> 00:16:00,050
a team and when you talk about working

334
00:15:56,780 --> 00:16:03,439
with the team there are two key moments

335
00:16:00,050 --> 00:16:06,709
or two key to key moments in the light

336
00:16:03,440 --> 00:16:08,780
in the life of a team and they a call

337
00:16:06,710 --> 00:16:11,720
sometimes or refer to sometimes it's

338
00:16:08,780 --> 00:16:16,220
rolling on and rolling off rolling on

339
00:16:11,720 --> 00:16:20,110
means that an additional person joins

340
00:16:16,220 --> 00:16:23,240
the trusted circle of team members and

341
00:16:20,110 --> 00:16:25,900
this involves in general granting

342
00:16:23,240 --> 00:16:28,670
certain privileges to that person like

343
00:16:25,900 --> 00:16:30,530
access to secret information may be

344
00:16:28,670 --> 00:16:32,120
accessed parts of the deployment or

345
00:16:30,530 --> 00:16:34,630
access to the entire deployment

346
00:16:32,120 --> 00:16:37,490
infrastructure like all the things only

347
00:16:34,630 --> 00:16:42,380
people that are in the trusted circle of

348
00:16:37,490 --> 00:16:44,090
team members that are inside and on a

349
00:16:42,380 --> 00:16:45,950
side note it is really really good idea

350
00:16:44,090 --> 00:16:47,900
to have something like a role on

351
00:16:45,950 --> 00:16:50,780
security checklist we try to establish

352
00:16:47,900 --> 00:16:52,610
that this in most projects and it should

353
00:16:50,780 --> 00:16:55,040
contain like a standard procedure

354
00:16:52,610 --> 00:16:57,170
sounds a bit efficiently but it's not

355
00:16:55,040 --> 00:17:00,530
that official you will put stuff on this

356
00:16:57,170 --> 00:17:01,910
like are they the new you would go

357
00:17:00,530 --> 00:17:04,069
through this list whenever someone joins

358
00:17:01,910 --> 00:17:05,920
and you would would have stuff on it

359
00:17:04,069 --> 00:17:09,679
like are they using a password manager

360
00:17:05,920 --> 00:17:12,200
it's the hard drive encrypted are the

361
00:17:09,680 --> 00:17:13,640
SSH and GPG keys password protected

362
00:17:12,200 --> 00:17:16,400
stuff like this

363
00:17:13,640 --> 00:17:19,700
mostly sanity checks but they vastly

364
00:17:16,400 --> 00:17:24,380
improve the overall security inside of

365
00:17:19,700 --> 00:17:27,290
the team nevertheless when this person

366
00:17:24,380 --> 00:17:31,250
joins you want to give them access to

367
00:17:27,290 --> 00:17:33,620
the secret was passed that's actually

368
00:17:31,250 --> 00:17:37,550
quite easy so let's pretend two people

369
00:17:33,620 --> 00:17:39,830
join our team ADA and Ellen what I would

370
00:17:37,550 --> 00:17:41,270
do is I would get their public keys they

371
00:17:39,830 --> 00:17:43,070
could just send them to me or distribute

372
00:17:41,270 --> 00:17:45,570
them among the team

373
00:17:43,070 --> 00:17:48,389
which means when I have the public keys

374
00:17:45,570 --> 00:17:50,490
I have the DPT IDs and so I would just

375
00:17:48,390 --> 00:17:54,720
call pass in it again but this time with

376
00:17:50,490 --> 00:17:56,670
more gbg IDs I know it's still the same

377
00:17:54,720 --> 00:17:58,440
directory we used beforehand so what

378
00:17:56,670 --> 00:18:01,970
this will do is it will rien crypt

379
00:17:58,440 --> 00:18:05,250
everything inside of this directory if

380
00:18:01,970 --> 00:18:08,730
we will take a look into the GB GID file

381
00:18:05,250 --> 00:18:11,250
again it will now contain three GPG IDs

382
00:18:08,730 --> 00:18:14,610
instead of one what we have now achieved

383
00:18:11,250 --> 00:18:16,800
is that if I share this secrets

384
00:18:14,610 --> 00:18:19,080
directory with the new teammates they

385
00:18:16,800 --> 00:18:22,678
will be able to retrieve information out

386
00:18:19,080 --> 00:18:26,610
of it or add information to it that was

387
00:18:22,679 --> 00:18:27,750
actually not much work but it's a

388
00:18:26,610 --> 00:18:33,629
different story if you talk about

389
00:18:27,750 --> 00:18:36,660
rolling off rolling off is on a secret

390
00:18:33,630 --> 00:18:38,490
store access management not much more

391
00:18:36,660 --> 00:18:42,000
work you would have guessed you will

392
00:18:38,490 --> 00:18:45,120
just call so in this case Alan happen to

393
00:18:42,000 --> 00:18:47,550
remove two left leave our team so his

394
00:18:45,120 --> 00:18:52,469
gbg ID will be removed we will call pass

395
00:18:47,550 --> 00:18:55,428
in it again and he won't have access to

396
00:18:52,470 --> 00:18:58,230
the to the directory and the current

397
00:18:55,429 --> 00:19:02,610
point of time and that is important

398
00:18:58,230 --> 00:19:05,790
thing important note whenever someone

399
00:19:02,610 --> 00:19:09,689
leaves a team of course you can revoke

400
00:19:05,790 --> 00:19:11,399
access to the secret store but the

401
00:19:09,690 --> 00:19:13,410
leaving party is still in possession of

402
00:19:11,400 --> 00:19:16,230
the history of the secret store so

403
00:19:13,410 --> 00:19:21,140
technically they have still access to

404
00:19:16,230 --> 00:19:24,540
everything and what this implies is that

405
00:19:21,140 --> 00:19:27,929
whenever someone leaves your team you

406
00:19:24,540 --> 00:19:30,450
should focus on rotating all the secrets

407
00:19:27,929 --> 00:19:33,780
that were in use I know that is tedious

408
00:19:30,450 --> 00:19:36,600
and I've worked on projects where it

409
00:19:33,780 --> 00:19:38,879
didn't where we didn't do it because it

410
00:19:36,600 --> 00:19:41,129
was so much work given the overall

411
00:19:38,880 --> 00:19:43,230
legacy system architecture and that is a

412
00:19:41,130 --> 00:19:48,030
really really really bad thing to not do

413
00:19:43,230 --> 00:19:49,590
it oh I just skipped a slide so after

414
00:19:48,030 --> 00:19:51,780
you call pass in it again it's actually

415
00:19:49,590 --> 00:19:54,870
not that important that slide because

416
00:19:51,780 --> 00:19:56,440
you can guess what now in dodgy PG ID

417
00:19:54,870 --> 00:20:03,969
file

418
00:19:56,440 --> 00:20:07,180
right it's just one less GPT ID so the

419
00:20:03,970 --> 00:20:10,570
point I was making is part of the role

420
00:20:07,180 --> 00:20:13,450
of checklist after revoking access to

421
00:20:10,570 --> 00:20:15,159
the secret store should be rotating all

422
00:20:13,450 --> 00:20:18,400
these secrets because it's the only way

423
00:20:15,160 --> 00:20:21,190
to make sure that the leaving person can

424
00:20:18,400 --> 00:20:23,350
do no harm and that isn't even related

425
00:20:21,190 --> 00:20:25,390
to people intentionally want to do harm

426
00:20:23,350 --> 00:20:27,070
it's more like when I leave a project I

427
00:20:25,390 --> 00:20:29,140
may if the source code or my still on my

428
00:20:27,070 --> 00:20:30,189
hard drive and maybe some passwords but

429
00:20:29,140 --> 00:20:31,660
I don't care I'm not really on the

430
00:20:30,190 --> 00:20:33,700
project maybe I change employer or

431
00:20:31,660 --> 00:20:35,770
whatever so even if the person is not

432
00:20:33,700 --> 00:20:39,910
intentionally giving huh it's not

433
00:20:35,770 --> 00:20:41,860
intending to do harm then not being

434
00:20:39,910 --> 00:20:47,020
conscious about still having access can

435
00:20:41,860 --> 00:20:48,370
be really harmful but one thing that is

436
00:20:47,020 --> 00:20:51,190
important to note about the secret

437
00:20:48,370 --> 00:20:53,590
directory and that's what I experienced

438
00:20:51,190 --> 00:20:57,370
when you have all the secrets in one

439
00:20:53,590 --> 00:21:01,300
dedicated place like source code the

440
00:20:57,370 --> 00:21:04,030
rotation while still tedious can become

441
00:21:01,300 --> 00:21:06,040
slightly less tedious because there's

442
00:21:04,030 --> 00:21:08,170
one single source of truth for the

443
00:21:06,040 --> 00:21:15,159
secrets that are in use throughout your

444
00:21:08,170 --> 00:21:19,330
system so let me quickly recap what we

445
00:21:15,160 --> 00:21:21,520
have achieved so far we have built an

446
00:21:19,330 --> 00:21:24,730
encrypted secret store that is living

447
00:21:21,520 --> 00:21:26,770
inside of a single directory this

448
00:21:24,730 --> 00:21:28,780
directory can be distributed amongst

449
00:21:26,770 --> 00:21:31,660
your team members like regular source

450
00:21:28,780 --> 00:21:35,620
code for example by using your trusted

451
00:21:31,660 --> 00:21:38,440
version control system and this gives

452
00:21:35,620 --> 00:21:41,979
you an encrypted and versioned password

453
00:21:38,440 --> 00:21:44,830
password store because of the nature of

454
00:21:41,980 --> 00:21:46,810
pass the process of people joining or

455
00:21:44,830 --> 00:21:49,600
leaving the team becomes a streamlined

456
00:21:46,810 --> 00:21:52,990
as possible without compromising

457
00:21:49,600 --> 00:21:56,500
security and clear rotation can maybe

458
00:21:52,990 --> 00:21:56,920
become a bit less tedious so we write on

459
00:21:56,500 --> 00:21:58,420
time

460
00:21:56,920 --> 00:22:00,670
we have three minutes left for questions

461
00:21:58,420 --> 00:22:03,370
thank you very very much for your

462
00:22:00,670 --> 00:22:06,670
attention there is an online version of

463
00:22:03,370 --> 00:22:10,030
this talk which basically contains all

464
00:22:06,670 --> 00:22:10,630
the source code examples a few more

465
00:22:10,030 --> 00:22:12,780
links

466
00:22:10,630 --> 00:22:16,380
how to loosen start to start with GPG or

467
00:22:12,780 --> 00:22:18,520
how to get started with the Roku and

468
00:22:16,380 --> 00:22:32,080
that's all from my side thank you very

469
00:22:18,520 --> 00:22:34,930
much you still have like four minutes

470
00:22:32,080 --> 00:22:36,100
for questions so in case there's anybody

471
00:22:34,930 --> 00:22:38,260
interested to ask something

472
00:22:36,100 --> 00:22:59,860
there's someone waving can we get a

473
00:22:38,260 --> 00:23:01,570
microphone there Thanks hi really great

474
00:22:59,860 --> 00:23:03,610
talk thank you very much I just have one

475
00:23:01,570 --> 00:23:05,620
question how do you also pick up a bit

476
00:23:03,610 --> 00:23:09,159
how do you order this this is my

477
00:23:05,620 --> 00:23:11,709
question audit yeah can you audit who is

478
00:23:09,160 --> 00:23:16,150
accessing which secret at which time and

479
00:23:11,710 --> 00:23:18,670
why because the nature of it is a

480
00:23:16,150 --> 00:23:20,980
distributed it has a distributed nature

481
00:23:18,670 --> 00:23:24,910
when you lose something like it you

482
00:23:20,980 --> 00:23:27,790
cannot really audit access to the like

483
00:23:24,910 --> 00:23:31,450
reading access to the store but what you

484
00:23:27,790 --> 00:23:34,899
get is you have an cryptographically

485
00:23:31,450 --> 00:23:37,450
secure audit of writing access so when

486
00:23:34,900 --> 00:23:39,100
you use signed commits for example and

487
00:23:37,450 --> 00:23:42,220
get I can just speak for git because

488
00:23:39,100 --> 00:23:45,750
that's what we use for that you can

489
00:23:42,220 --> 00:23:49,390
really see and you can

490
00:23:45,750 --> 00:23:51,130
validate if a secret had been changed or

491
00:23:49,390 --> 00:23:54,370
how often it had been changed so you get

492
00:23:51,130 --> 00:23:56,050
an audit ability on that side but you're

493
00:23:54,370 --> 00:23:58,060
still distributing it among people so

494
00:23:56,050 --> 00:24:02,520
you don't really know when it is

495
00:23:58,060 --> 00:24:06,480
accessed for reading that's unfortunate

496
00:24:02,520 --> 00:24:06,480
Thanks any more questions

497
00:24:11,470 --> 00:24:15,909
okay then thank you very much

