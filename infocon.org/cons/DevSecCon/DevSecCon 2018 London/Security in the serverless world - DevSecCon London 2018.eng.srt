1
00:00:00,030 --> 00:00:06,569
hello guys good morning everyone

2
00:00:03,240 --> 00:00:10,410
no we're not see you guys here and let's

3
00:00:06,569 --> 00:00:11,910
talk about security and service but

4
00:00:10,410 --> 00:00:13,500
first let's talk about one thing that I

5
00:00:11,910 --> 00:00:18,930
want to talk about more than service and

6
00:00:13,500 --> 00:00:21,119
security myself so I'm a prison engineer

7
00:00:18,930 --> 00:00:23,369
at a company called has owned and since

8
00:00:21,119 --> 00:00:25,230
July I've also been one of the Amazon's

9
00:00:23,369 --> 00:00:26,730
service service hero which just means

10
00:00:25,230 --> 00:00:29,279
like a free ticket to reinvent this year

11
00:00:26,730 --> 00:00:31,740
which is pretty sweet and the zone we

12
00:00:29,279 --> 00:00:33,510
are a sports a streaming platform we do

13
00:00:31,740 --> 00:00:36,000
both live sports as well as sports on

14
00:00:33,510 --> 00:00:38,010
demand and right now we open in seven

15
00:00:36,000 --> 00:00:40,170
different countries we have about 6 or 7

16
00:00:38,010 --> 00:00:42,420
million subscribers globally you pay a

17
00:00:40,170 --> 00:00:44,219
monthly fee similar to Netflix hence why

18
00:00:42,420 --> 00:00:46,800
we often call ourselves the Netflix for

19
00:00:44,219 --> 00:00:48,480
sports a peak we get about a million

20
00:00:46,800 --> 00:00:49,739
concurrent users so there's some very

21
00:00:48,480 --> 00:00:52,260
interesting technical challenges there

22
00:00:49,739 --> 00:00:55,280
to support that kind of load that we

23
00:00:52,260 --> 00:00:57,210
have if we find a bit more about what

24
00:00:55,280 --> 00:00:58,800
excuse me what jobs we have available

25
00:00:57,210 --> 00:01:00,750
and what we're doing as a team you can

26
00:00:58,800 --> 00:01:02,760
follow us on Twitter as well as check

27
00:01:00,750 --> 00:01:04,140
our engineering zone to come because

28
00:01:02,760 --> 00:01:05,840
we're also hiring as well I'm pretty

29
00:01:04,140 --> 00:01:07,920
sure like everybody else here so

30
00:01:05,840 --> 00:01:10,650
personally I've been using a DBS for

31
00:01:07,920 --> 00:01:12,390
about almost 10 years now and in one of

32
00:01:10,650 --> 00:01:14,430
my previous companies I worked on a

33
00:01:12,390 --> 00:01:16,920
non-trivial service architecture whereby

34
00:01:14,430 --> 00:01:20,009
we migrated a social network to run

35
00:01:16,920 --> 00:01:21,659
pretty much entirely on service so along

36
00:01:20,009 --> 00:01:22,830
the way I'll learn a lot about all the

37
00:01:21,659 --> 00:01:24,570
different things you could have learn to

38
00:01:22,830 --> 00:01:27,060
make sure you can actually run your

39
00:01:24,570 --> 00:01:30,329
production workload on this new

40
00:01:27,060 --> 00:01:32,610
technology so when you go to a dreary

41
00:01:30,329 --> 00:01:34,350
posting this chart already in terms of

42
00:01:32,610 --> 00:01:37,380
the sheer responsibility model whereby

43
00:01:34,350 --> 00:01:39,470
what security Amazon takes care of and

44
00:01:37,380 --> 00:01:41,369
what security they steal your

45
00:01:39,470 --> 00:01:44,130
responsibilities and traditionally

46
00:01:41,369 --> 00:01:45,420
you're responsible for operating systems

47
00:01:44,130 --> 00:01:47,310
the networking and firewall

48
00:01:45,420 --> 00:01:49,500
configurations but of course when you go

49
00:01:47,310 --> 00:01:51,090
to serve less Amazon is taking alcohol

50
00:01:49,500 --> 00:01:53,040
is taking care of more of the

51
00:01:51,090 --> 00:01:55,259
infrastructure for you including the

52
00:01:53,040 --> 00:01:57,090
security around the operating system and

53
00:01:55,259 --> 00:01:59,070
networking and so on which to me is

54
00:01:57,090 --> 00:02:00,780
great news because as the application

55
00:01:59,070 --> 00:02:02,548
developer I just don't have time to

56
00:02:00,780 --> 00:02:06,090
constantly thinking about okay when

57
00:02:02,549 --> 00:02:07,829
should I update my venture patch my OS

58
00:02:06,090 --> 00:02:09,929
when's your update my firewall settings

59
00:02:07,829 --> 00:02:11,549
and so on and so forth and having Amazon

60
00:02:09,929 --> 00:02:13,410
do that for me just means that I care a

61
00:02:11,550 --> 00:02:16,620
lot better protection in which

62
00:02:13,410 --> 00:02:18,000
without doing anything myself so I also

63
00:02:16,620 --> 00:02:20,700
don't have to worry about attacks

64
00:02:18,000 --> 00:02:23,250
against the OS like they wanna cry or in

65
00:02:20,700 --> 00:02:25,350
fact when the whole whole thing went

66
00:02:23,250 --> 00:02:27,390
down with meltdown and Spectre and

67
00:02:25,350 --> 00:02:29,880
everybody else was busy passing their

68
00:02:27,390 --> 00:02:32,880
servers and machine images and whatnot

69
00:02:29,880 --> 00:02:34,500
all my functions got patched I even

70
00:02:32,880 --> 00:02:36,320
forgot about it and then the next day I

71
00:02:34,500 --> 00:02:38,640
go to Twitter and I see Chris mom's

72
00:02:36,320 --> 00:02:40,380
portal 3 say all with the lambda

73
00:02:38,640 --> 00:02:42,329
functions has been now patched for

74
00:02:40,380 --> 00:02:45,180
spectre and meltdown which is great

75
00:02:42,330 --> 00:02:47,250
again is it's always for actual things

76
00:02:45,180 --> 00:02:51,870
that gift from the provider we don't do

77
00:02:47,250 --> 00:02:53,760
anything myself however my code is still

78
00:02:51,870 --> 00:02:56,430
my responsibility along with all the

79
00:02:53,760 --> 00:03:00,630
dependencies that my code has and if you

80
00:02:56,430 --> 00:03:02,760
look at the last Hospital 10 list we got

81
00:03:00,630 --> 00:03:05,190
from last year pretty much everything

82
00:03:02,760 --> 00:03:06,600
she was saying at the top it's crazy how

83
00:03:05,190 --> 00:03:09,000
injection attack is still number one

84
00:03:06,600 --> 00:03:12,210
after ten years and when the guys from

85
00:03:09,000 --> 00:03:13,860
snake looked at the top 50 biggest data

86
00:03:12,210 --> 00:03:15,960
breaches that happen in 2016

87
00:03:13,860 --> 00:03:18,420
they found that a quarter of them was

88
00:03:15,960 --> 00:03:20,450
caused by applications using known

89
00:03:18,420 --> 00:03:22,769
losing components we've known

90
00:03:20,450 --> 00:03:24,869
vulnerabilities so these are things that

91
00:03:22,770 --> 00:03:29,580
can easily prevent just by updating your

92
00:03:24,870 --> 00:03:32,360
dependencies sorry Fifi the slides can

93
00:03:29,580 --> 00:03:34,740
be available afterwards anyway and

94
00:03:32,360 --> 00:03:36,510
another article will be another article

95
00:03:34,740 --> 00:03:39,330
they looked at the toppings

96
00:03:36,510 --> 00:03:40,950
some of the top thousand websites are

97
00:03:39,330 --> 00:03:43,700
based on Alexa ranking and found that

98
00:03:40,950 --> 00:03:46,649
almost 80% of them was using some

99
00:03:43,700 --> 00:03:48,810
libraries has known vulnerabilities and

100
00:03:46,650 --> 00:03:50,100
it's not surprising we looked at even

101
00:03:48,810 --> 00:03:52,770
some of the biggest the front-end

102
00:03:50,100 --> 00:03:54,540
frameworks are a Korean react has some

103
00:03:52,770 --> 00:03:56,610
vulnerabilities at some point in time of

104
00:03:54,540 --> 00:03:58,620
course they were patched in the later

105
00:03:56,610 --> 00:04:01,050
versions but then it's still up to you

106
00:03:58,620 --> 00:04:02,940
to make sure that you are using a later

107
00:04:01,050 --> 00:04:05,040
version that do not have those known

108
00:04:02,940 --> 00:04:08,130
vulnerabilities that people can attack

109
00:04:05,040 --> 00:04:09,959
you with and then there's also libraries

110
00:04:08,130 --> 00:04:14,720
like user agent which at one point I

111
00:04:09,959 --> 00:04:17,370
think had had a pretty - the regex is

112
00:04:14,720 --> 00:04:19,680
registered denial service attack as well

113
00:04:17,370 --> 00:04:20,940
and of course even when you go into

114
00:04:19,680 --> 00:04:22,440
surveillance even though you don't have

115
00:04:20,940 --> 00:04:24,660
the wipeout service anymore it doesn't

116
00:04:22,440 --> 00:04:26,880
mean that you are safe from the classic

117
00:04:24,660 --> 00:04:27,320
sequent judgment attacks so if a you

118
00:04:26,880 --> 00:04:31,159
saying

119
00:04:27,320 --> 00:04:32,960
say my sequel or Aurora or whatever kind

120
00:04:31,160 --> 00:04:34,880
of sequel database for me lambda

121
00:04:32,960 --> 00:04:36,710
function you see you need to worry about

122
00:04:34,880 --> 00:04:38,690
secret injection attacks you're sitting

123
00:04:36,710 --> 00:04:40,880
to sanitize the inputs and protect

124
00:04:38,690 --> 00:04:42,440
yourself accordingly and even when

125
00:04:40,880 --> 00:04:44,960
you're using those secret databases

126
00:04:42,440 --> 00:04:51,050
turns on a MongoDB you can still attack

127
00:04:44,960 --> 00:04:52,909
it using its query syntax and then so so

128
00:04:51,050 --> 00:04:54,200
the takeaway from there is that even

129
00:04:52,910 --> 00:04:55,550
though you're working with service you

130
00:04:54,200 --> 00:04:58,840
still need to think about all the same

131
00:04:55,550 --> 00:05:01,130
application level attacks as before and

132
00:04:58,840 --> 00:05:03,380
sequence action is still very much one

133
00:05:01,130 --> 00:05:06,740
of the easy things that you can take off

134
00:05:03,380 --> 00:05:08,990
and the graph qi has also been getting a

135
00:05:06,740 --> 00:05:10,700
lot of popularity over the years and I

136
00:05:08,990 --> 00:05:12,170
was three surprised as what I'm coming

137
00:05:10,700 --> 00:05:14,719
into graph here to find out that

138
00:05:12,170 --> 00:05:16,880
actually someone managed to do injection

139
00:05:14,720 --> 00:05:18,080
attack against graph queue as well which

140
00:05:16,880 --> 00:05:19,640
I guess when you think about it it's

141
00:05:18,080 --> 00:05:21,830
probably not all that surprising because

142
00:05:19,640 --> 00:05:24,020
ultimately your work your query it gets

143
00:05:21,830 --> 00:05:26,419
translated into some requests to a web

144
00:05:24,020 --> 00:05:29,659
server that executes some query against

145
00:05:26,420 --> 00:05:31,340
a sick sick old say sequel database so

146
00:05:29,660 --> 00:05:34,880
you can flick out how the transformation

147
00:05:31,340 --> 00:05:36,520
happens you can still inject attacks you

148
00:05:34,880 --> 00:05:40,100
can still get to injection attacks

149
00:05:36,520 --> 00:05:41,510
against the graph your endpoint and also

150
00:05:40,100 --> 00:05:46,660
found this server and I said literally

151
00:05:41,510 --> 00:05:49,280
article about how there was there was a

152
00:05:46,660 --> 00:05:51,910
CO injection for ompletely to run the

153
00:05:49,280 --> 00:05:53,960
libraries that the link team published

154
00:05:51,910 --> 00:05:56,780
so I guess you just can't trust anyone

155
00:05:53,960 --> 00:05:58,419
these days and of course that means you

156
00:05:56,780 --> 00:06:01,130
have to constantly update your

157
00:05:58,420 --> 00:06:03,020
dependencies and if you aren't really

158
00:06:01,130 --> 00:06:05,030
unlucky you're gonna pass out your

159
00:06:03,020 --> 00:06:06,770
application so your dependency to a

160
00:06:05,030 --> 00:06:08,840
version and you're gonna fix a whole

161
00:06:06,770 --> 00:06:10,609
bunch of depend upon abilities that you

162
00:06:08,840 --> 00:06:12,169
has and you're gonna find yourself in

163
00:06:10,610 --> 00:06:14,030
another world where by the later

164
00:06:12,170 --> 00:06:16,130
versions now has new vulnerabilities

165
00:06:14,030 --> 00:06:20,210
that so you have to constantly do this

166
00:06:16,130 --> 00:06:22,070
exercise and and if the I guess the

167
00:06:20,210 --> 00:06:23,630
moral of the story is that your

168
00:06:22,070 --> 00:06:25,730
application dependencies is probably a

169
00:06:23,630 --> 00:06:28,850
lot bigger attack service then you

170
00:06:25,730 --> 00:06:30,200
probably realize for starters you've got

171
00:06:28,850 --> 00:06:31,340
your own dependencies but that's just

172
00:06:30,200 --> 00:06:32,690
the tip of the iceberg

173
00:06:31,340 --> 00:06:34,640
because underneath that there's a whole

174
00:06:32,690 --> 00:06:37,160
of dependencies that your dependencies

175
00:06:34,640 --> 00:06:39,770
depend on if you just take a look at any

176
00:06:37,160 --> 00:06:41,150
number of popular packages with a noise

177
00:06:39,770 --> 00:06:43,490
know from the OGS

178
00:06:41,150 --> 00:06:46,159
for for Java you're gonna find the same

179
00:06:43,490 --> 00:06:49,250
thing where there's a very deep qi of

180
00:06:46,160 --> 00:06:55,400
dependency in fact it's so much so much

181
00:06:49,250 --> 00:06:57,170
so i love this and by the way that's we

182
00:06:55,400 --> 00:06:59,000
got a same name but that's not me and

183
00:06:57,170 --> 00:07:02,960
obviously she gets a lot more reaches in

184
00:06:59,000 --> 00:07:05,060
ID and of course I guess what I'm trying

185
00:07:02,960 --> 00:07:07,430
to say here is that we should use

186
00:07:05,060 --> 00:07:09,710
services i snack to try to automate this

187
00:07:07,430 --> 00:07:11,960
process of identifying of scanning our

188
00:07:09,710 --> 00:07:15,049
dependencies omission alerting us when

189
00:07:11,960 --> 00:07:17,630
we have known vulnerabilities in our

190
00:07:15,050 --> 00:07:19,430
dependencies including all the chances

191
00:07:17,630 --> 00:07:20,900
dependencies that we have as well I also

192
00:07:19,430 --> 00:07:22,460
noticed that kid has been doing this for

193
00:07:20,900 --> 00:07:24,710
a few months now so when you go to

194
00:07:22,460 --> 00:07:27,200
github repo you're satelli sends you a

195
00:07:24,710 --> 00:07:29,719
report of what known for the police are

196
00:07:27,200 --> 00:07:31,340
you have in your dependencies but the

197
00:07:29,720 --> 00:07:33,470
thing I find about patching application

198
00:07:31,340 --> 00:07:36,440
our dependencies compared to patching

199
00:07:33,470 --> 00:07:39,080
your OS is that when you get those

200
00:07:36,440 --> 00:07:41,570
security updates for your OS they tend

201
00:07:39,080 --> 00:07:43,430
to be self-contained and it's so nice

202
00:07:41,570 --> 00:07:45,349
and easy to apply but when it comes to

203
00:07:43,430 --> 00:07:48,830
application dependencies especially with

204
00:07:45,350 --> 00:07:50,720
frameworks oftentimes the normal

205
00:07:48,830 --> 00:07:52,580
abilities are only fixed in the latest

206
00:07:50,720 --> 00:07:54,890
version especially when you have major

207
00:07:52,580 --> 00:07:56,300
version updates so even you saying save

208
00:07:54,890 --> 00:07:58,460
version one of them the application

209
00:07:56,300 --> 00:08:00,500
framework and then there's no known

210
00:07:58,460 --> 00:08:03,380
vulnerabilities chances are if it's open

211
00:08:00,500 --> 00:08:05,620
source software then the fix is only a

212
00:08:03,380 --> 00:08:08,240
very point in version two which is not

213
00:08:05,620 --> 00:08:10,790
it's now is if which is often not an

214
00:08:08,240 --> 00:08:13,280
easy fix update because it's breaking

215
00:08:10,790 --> 00:08:14,900
changes and often involved API changes

216
00:08:13,280 --> 00:08:17,179
that you need to plan and integrate into

217
00:08:14,900 --> 00:08:22,450
your application as well as into could

218
00:08:17,180 --> 00:08:25,160
integrate with the rest of your team and

219
00:08:22,450 --> 00:08:28,520
your security chain is strong as the

220
00:08:25,160 --> 00:08:30,170
weakest link and when you look at for

221
00:08:28,520 --> 00:08:31,849
example if I look at one of my let

222
00:08:30,170 --> 00:08:34,370
anyone my functions so it's gonna depend

223
00:08:31,850 --> 00:08:36,350
on a bunch of libraries it's gonna have

224
00:08:34,370 --> 00:08:38,390
a bunch of users and it's also gonna run

225
00:08:36,350 --> 00:08:40,820
a two pair so all of that is taking care

226
00:08:38,390 --> 00:08:42,710
of by AWS and of course if you're

227
00:08:40,820 --> 00:08:44,390
working and watching a movie then I

228
00:08:42,710 --> 00:08:46,520
don't know why do you always do this but

229
00:08:44,390 --> 00:08:48,590
they always want to attack the physical

230
00:08:46,520 --> 00:08:52,310
infrastructure where the regarded by

231
00:08:48,590 --> 00:08:54,340
armed guards and they can know to you

232
00:08:52,310 --> 00:08:56,650
know do the Tom Cruise and the sneak

233
00:08:54,340 --> 00:08:57,910
and for some reason everybody knows all

234
00:08:56,650 --> 00:08:59,530
the systems that they've never seen

235
00:08:57,910 --> 00:09:01,959
before they know how things hacking

236
00:08:59,530 --> 00:09:04,150
Sally in two seconds and then they can

237
00:09:01,960 --> 00:09:07,090
walk away and just blow things up no

238
00:09:04,150 --> 00:09:11,410
punch a few guards and you know just

239
00:09:07,090 --> 00:09:13,180
look like a boss but that's an attacker

240
00:09:11,410 --> 00:09:14,650
of course I'm not gonna go anywhere near

241
00:09:13,180 --> 00:09:16,479
the physical infrastructure for one

242
00:09:14,650 --> 00:09:19,720
thing I'm gonna leave my bedroom you

243
00:09:16,480 --> 00:09:21,250
want to do that so especially when

244
00:09:19,720 --> 00:09:23,260
there's so many low hanging fruits I can

245
00:09:21,250 --> 00:09:26,020
just attack against your dependencies or

246
00:09:23,260 --> 00:09:27,760
against your application directly and of

247
00:09:26,020 --> 00:09:30,280
course we probably all know this that

248
00:09:27,760 --> 00:09:32,590
humans are often the weakest link in any

249
00:09:30,280 --> 00:09:34,540
security chain and I'm sure most of you

250
00:09:32,590 --> 00:09:36,160
have wor have seen that mr. Roberge we

251
00:09:34,540 --> 00:09:38,199
haven't go check it out there's only to

252
00:09:36,160 --> 00:09:41,770
see I think the three seasons now ice

253
00:09:38,200 --> 00:09:43,600
right and if you see all that most of

254
00:09:41,770 --> 00:09:45,640
the tactility in the show none of them

255
00:09:43,600 --> 00:09:47,140
are very technical in fact most of times

256
00:09:45,640 --> 00:09:49,600
they just do very simple social

257
00:09:47,140 --> 00:09:52,330
engineering against the universe or some

258
00:09:49,600 --> 00:09:55,360
application I've in one episode that

259
00:09:52,330 --> 00:09:57,100
dolly just dropped the USB key near

260
00:09:55,360 --> 00:09:59,590
police station and a policeman picked it

261
00:09:57,100 --> 00:10:02,500
up plug in his lab so a free USB and

262
00:09:59,590 --> 00:10:04,140
then you can run some code as soon as

263
00:10:02,500 --> 00:10:06,190
the USB key is plugged into the machine

264
00:10:04,140 --> 00:10:07,630
and of course you can attack the

265
00:10:06,190 --> 00:10:09,700
developers for the application as well

266
00:10:07,630 --> 00:10:11,470
maybe they are leaving the github

267
00:10:09,700 --> 00:10:13,690
credential somewhere in the public repo

268
00:10:11,470 --> 00:10:15,370
somehow so you can get if I can get into

269
00:10:13,690 --> 00:10:17,590
their account and you can ask us any

270
00:10:15,370 --> 00:10:19,600
software that they are responsible for

271
00:10:17,590 --> 00:10:22,660
including the ones that are potentially

272
00:10:19,600 --> 00:10:24,730
used in your organization and also they

273
00:10:22,660 --> 00:10:26,949
can also attack the authors for the

274
00:10:24,730 --> 00:10:29,170
dependencies that you use for your in

275
00:10:26,950 --> 00:10:30,730
yours inside your software so this

276
00:10:29,170 --> 00:10:33,490
happened last year and I think was

277
00:10:30,730 --> 00:10:34,300
amazing the security researcher was able

278
00:10:33,490 --> 00:10:37,780
to gain access

279
00:10:34,300 --> 00:10:40,030
publish assess to 14% of all packages on

280
00:10:37,780 --> 00:10:42,280
NPM at a time which included this some

281
00:10:40,030 --> 00:10:45,850
of the most popular packages that you

282
00:10:42,280 --> 00:10:47,260
find in the nodejs space so in total the

283
00:10:45,850 --> 00:10:49,150
packages that he was able to gain

284
00:10:47,260 --> 00:10:51,520
published assess he accounts for

285
00:10:49,150 --> 00:10:53,860
something like 20% of total number of

286
00:10:51,520 --> 00:10:58,140
downloads in MPM mount on a monthly

287
00:10:53,860 --> 00:11:00,490
basis so that is pretty scary in fact no

288
00:10:58,140 --> 00:11:02,170
this could have happened already we just

289
00:11:00,490 --> 00:11:04,000
didn't know about it is we're lucky that

290
00:11:02,170 --> 00:11:06,280
someone did this and tell us hey this

291
00:11:04,000 --> 00:11:08,400
massive gap in your security chain

292
00:11:06,280 --> 00:11:09,990
because the people that are writing the

293
00:11:08,400 --> 00:11:12,360
dependence writing the software that

294
00:11:09,990 --> 00:11:14,460
your software depends on is not doing a

295
00:11:12,360 --> 00:11:17,550
very good job in protecting their MPM

296
00:11:14,460 --> 00:11:20,430
the MPM accounts and the security

297
00:11:17,550 --> 00:11:21,930
researcher use basic methods is they're

298
00:11:20,430 --> 00:11:25,349
not used he didn't use anything crazy

299
00:11:21,930 --> 00:11:27,329
just simple proof force and using known

300
00:11:25,350 --> 00:11:30,600
the counter leaks okras your stuffing

301
00:11:27,330 --> 00:11:32,460
and sometimes even found the NPN

302
00:11:30,600 --> 00:11:38,040
credential just left hanging there in a

303
00:11:32,460 --> 00:11:39,960
public repo so and the Wender he when I

304
00:11:38,040 --> 00:11:42,360
read a summary another thing I found was

305
00:11:39,960 --> 00:11:44,040
this is crazy like a thousand people

306
00:11:42,360 --> 00:11:46,740
were using developers was using

307
00:11:44,040 --> 00:11:49,620
passwords like one two three he or her

308
00:11:46,740 --> 00:11:53,100
password I mean surely as developers we

309
00:11:49,620 --> 00:11:54,420
gotta know better than this right so

310
00:11:53,100 --> 00:11:57,090
it's really when you look at things

311
00:11:54,420 --> 00:12:00,060
deities it's really hard not not to feel

312
00:11:57,090 --> 00:12:01,530
let down and when you think about what

313
00:12:00,060 --> 00:12:03,630
actually goes on inside a secure

314
00:12:01,530 --> 00:12:06,060
environment for my lambda function hey

315
00:12:03,630 --> 00:12:08,220
guess what I've got a bunch of really

316
00:12:06,060 --> 00:12:10,290
useful environment variables in my

317
00:12:08,220 --> 00:12:12,300
node.js in my lambda execution

318
00:12:10,290 --> 00:12:15,959
environment including the Aetherius

319
00:12:12,300 --> 00:12:19,140
access key secret ptosis security token

320
00:12:15,960 --> 00:12:21,390
so all the information I need to get

321
00:12:19,140 --> 00:12:23,370
access to your a this account if I can

322
00:12:21,390 --> 00:12:25,500
get into your function so after about

323
00:12:23,370 --> 00:12:27,870
hey as an attacker how can I actually

324
00:12:25,500 --> 00:12:29,850
get into your function well it turns out

325
00:12:27,870 --> 00:12:31,590
if I just published a package that you

326
00:12:29,850 --> 00:12:33,420
may want to depend on so as an

327
00:12:31,590 --> 00:12:35,280
experiment I put something on an NPM

328
00:12:33,420 --> 00:12:38,910
with a name that you clearly should not

329
00:12:35,280 --> 00:12:43,650
download and to my surprise like a week

330
00:12:38,910 --> 00:12:45,839
later I would I want to them being

331
00:12:43,650 --> 00:12:49,340
packaged have found - over 20 downloads

332
00:12:45,840 --> 00:12:52,940
I got help us

333
00:12:49,340 --> 00:12:56,790
so as the part of experiment I set up my

334
00:12:52,940 --> 00:12:58,920
package is it's always doing is that the

335
00:12:56,790 --> 00:13:00,120
initialization time I'm gonna look I'm

336
00:12:58,920 --> 00:13:01,560
gonna scan everything that's in your

337
00:13:00,120 --> 00:13:04,020
environment variables and then I'm gonna

338
00:13:01,560 --> 00:13:07,199
publish to some endpoint our setup and

339
00:13:04,020 --> 00:13:09,449
then that in that endpoint it's just a

340
00:13:07,200 --> 00:13:11,160
simple API gateway with lambda I'm gonna

341
00:13:09,450 --> 00:13:13,950
look at what's coming and then if that

342
00:13:11,160 --> 00:13:15,689
pelo canst contains the it bus

343
00:13:13,950 --> 00:13:17,940
credentials great I'm gonna send a

344
00:13:15,690 --> 00:13:19,970
message to as an S so there I can get a

345
00:13:17,940 --> 00:13:22,350
notification through SNS to my email and

346
00:13:19,970 --> 00:13:23,940
the main fear here is I'm looking for

347
00:13:22,350 --> 00:13:25,710
just those guys potentially I can even

348
00:13:23,940 --> 00:13:31,950
look for database usernames and

349
00:13:25,710 --> 00:13:33,750
passwords and so on as well and so that

350
00:13:31,950 --> 00:13:36,600
works beautifully it took me like 15

351
00:13:33,750 --> 00:13:38,910
minutes to set up and I was able to use

352
00:13:36,600 --> 00:13:41,640
the credentials I remember myself to

353
00:13:38,910 --> 00:13:44,189
gain access to my my own a diverse

354
00:13:41,640 --> 00:13:48,449
account to list the contest I have in my

355
00:13:44,190 --> 00:13:51,750
s/3 s/3 pockets so that's not great

356
00:13:48,450 --> 00:13:54,630
that's way too easy and so a check ok

357
00:13:51,750 --> 00:13:56,280
can i what happens if it's a transit

358
00:13:54,630 --> 00:13:58,530
dependency so it's not something that I

359
00:13:56,280 --> 00:14:01,319
depend on directly so I put in the

360
00:13:58,530 --> 00:14:03,390
package there also with a rather ominous

361
00:14:01,320 --> 00:14:06,030
name again people just keep downloading

362
00:14:03,390 --> 00:14:08,640
this stuff I don't know why and then

363
00:14:06,030 --> 00:14:13,140
again it still worked so he's just oh my

364
00:14:08,640 --> 00:14:15,720
god it's too easy and the tensou and

365
00:14:13,140 --> 00:14:17,760
later on after I did this and publish

366
00:14:15,720 --> 00:14:19,260
the publisher approach this and then I

367
00:14:17,760 --> 00:14:21,330
found out like a week later

368
00:14:19,260 --> 00:14:23,760
something else happened you don't even

369
00:14:21,330 --> 00:14:25,950
need to compromising this in package we

370
00:14:23,760 --> 00:14:27,900
can also do is just apply simple social

371
00:14:25,950 --> 00:14:30,510
engine against developers and publish a

372
00:14:27,900 --> 00:14:33,120
package we have very similar name to

373
00:14:30,510 --> 00:14:35,340
legitimate ones so in this case someone

374
00:14:33,120 --> 00:14:37,650
published a bunch of my packages I think

375
00:14:35,340 --> 00:14:42,060
we underscore between two words instead

376
00:14:37,650 --> 00:14:44,370
of - and so this package was doing

377
00:14:42,060 --> 00:14:47,280
exactly what I was doing to scan your

378
00:14:44,370 --> 00:14:48,510
environment and sending to his own

379
00:14:47,280 --> 00:14:50,640
back-end of course the account got

380
00:14:48,510 --> 00:14:52,860
banned straight away and to be fair the

381
00:14:50,640 --> 00:14:57,240
attacker wasn't really subtle about what

382
00:14:52,860 --> 00:14:59,820
he's trying to do so well the clues out

383
00:14:57,240 --> 00:15:01,860
there and this and tensor wouldn't look

384
00:14:59,820 --> 00:15:03,960
me further with NPM and there's other

385
00:15:01,860 --> 00:15:06,180
scary stuff so it turns out when you can

386
00:15:03,960 --> 00:15:13,830
actually run NPM install script and do

387
00:15:06,180 --> 00:15:17,760
this so so I guess the in one sentence

388
00:15:13,830 --> 00:15:21,240
that life is her and this and then with

389
00:15:17,760 --> 00:15:22,680
NPM also found out that hey by ID for

390
00:15:21,240 --> 00:15:25,050
when you stole a package that this

391
00:15:22,680 --> 00:15:27,689
little kerosene and what it means is

392
00:15:25,050 --> 00:15:29,699
that when you run NPM you store I want

393
00:15:27,690 --> 00:15:31,680
to say your CI box is not gonna install

394
00:15:29,700 --> 00:15:33,930
that specific version but it's gonna

395
00:15:31,680 --> 00:15:35,579
install the most up-to-date version that

396
00:15:33,930 --> 00:15:36,209
is compatible with the constraints that

397
00:15:35,580 --> 00:15:37,890
you have

398
00:15:36,210 --> 00:15:40,860
so in this case I can actually still

399
00:15:37,890 --> 00:15:43,649
want version 1.1 point 0 even though in

400
00:15:40,860 --> 00:15:45,899
my local development when I'm working on

401
00:15:43,649 --> 00:15:47,970
my project I'm using version 1 locally

402
00:15:45,899 --> 00:15:50,370
but when it's guest build is using the

403
00:15:47,970 --> 00:15:52,050
latest comparable version which means in

404
00:15:50,370 --> 00:15:53,970
between me downloading the package

405
00:15:52,050 --> 00:15:55,859
locally and working and testing things

406
00:15:53,970 --> 00:15:57,390
they're all working fine to eat getting

407
00:15:55,860 --> 00:15:58,890
bill or my CI box

408
00:15:57,390 --> 00:16:01,050
someone could have published and

409
00:15:58,890 --> 00:16:03,360
compromised the package publish new

410
00:16:01,050 --> 00:16:05,040
version and then what I actually end up

411
00:16:03,360 --> 00:16:07,110
running in my production environment is

412
00:16:05,040 --> 00:16:08,520
different to what I have locally and I

413
00:16:07,110 --> 00:16:12,720
could be compromised without even

414
00:16:08,520 --> 00:16:16,680
knowing what I said

415
00:16:12,720 --> 00:16:19,410
so yes life is terrible before you

416
00:16:16,680 --> 00:16:21,420
coolest developer and so it's take away

417
00:16:19,410 --> 00:16:24,360
from that is you should definitely use

418
00:16:21,420 --> 00:16:26,040
NPM string wrap which or if you're using

419
00:16:24,360 --> 00:16:28,230
old version NPM just update to the

420
00:16:26,040 --> 00:16:30,270
latest version so nowadays NPM by

421
00:16:28,230 --> 00:16:32,640
default it has much more stricter

422
00:16:30,270 --> 00:16:35,730
requirements and you can be you can ask

423
00:16:32,640 --> 00:16:38,010
NPM to to use the specific version so

424
00:16:35,730 --> 00:16:39,600
that when you have run npm install you

425
00:16:38,010 --> 00:16:41,790
restore to that specific version as

426
00:16:39,600 --> 00:16:45,089
opposed to the latest compatible version

427
00:16:41,790 --> 00:16:47,010
and this of course this problem is not

428
00:16:45,089 --> 00:16:49,980
specific to you know it or we love to

429
00:16:47,010 --> 00:16:52,170
NPM I've worked with Java I work I work

430
00:16:49,980 --> 00:16:54,300
in the JVM world of work in the Tor

431
00:16:52,170 --> 00:16:55,199
network the same problem exists in all

432
00:16:54,300 --> 00:16:57,089
those environments

433
00:16:55,200 --> 00:16:59,339
in fact one of the nice things you have

434
00:16:57,089 --> 00:17:01,589
in nodejs is that all the dependencies

435
00:16:59,339 --> 00:17:03,240
are just text files out emulator you can

436
00:17:01,589 --> 00:17:04,920
look at yourself so if you think

437
00:17:03,240 --> 00:17:06,510
something dodgy is happening you can

438
00:17:04,920 --> 00:17:08,429
look at the file yourself it really easy

439
00:17:06,510 --> 00:17:10,949
to figure out what's going on we've

440
00:17:08,429 --> 00:17:14,790
combined with a static languages like

441
00:17:10,949 --> 00:17:17,970
Java Scala or C sharp or anything on

442
00:17:14,790 --> 00:17:20,520
runs Internet is all you get it's binary

443
00:17:17,970 --> 00:17:21,809
so now you take the extra effort to

444
00:17:20,520 --> 00:17:23,639
decompile there to actually figure out

445
00:17:21,809 --> 00:17:26,189
what the source code is actually doing

446
00:17:23,640 --> 00:17:27,870
so the it takes more effort for you to

447
00:17:26,189 --> 00:17:30,720
figure out what's going on inside those

448
00:17:27,869 --> 00:17:31,949
dependencies so now imagine the

449
00:17:30,720 --> 00:17:34,260
attackers when they gain to your

450
00:17:31,950 --> 00:17:35,250
environment our first line of defense is

451
00:17:34,260 --> 00:17:36,540
gone

452
00:17:35,250 --> 00:17:39,720
that's Merri if you've got a V PC in

453
00:17:36,540 --> 00:17:41,850
front of that what can we do so the next

454
00:17:39,720 --> 00:17:46,740
part of that if out are the next one our

455
00:17:41,850 --> 00:17:48,570
defense is our security list our IMS so

456
00:17:46,740 --> 00:17:49,960
in this case we need to control who can

457
00:17:48,570 --> 00:17:52,480
invoke our functions and all

458
00:17:49,960 --> 00:17:55,480
more importantly what can our functions

459
00:17:52,480 --> 00:17:57,279
asses so that's where the principle of

460
00:17:55,480 --> 00:17:58,960
least privilege is your best friend and

461
00:17:57,279 --> 00:18:01,389
one common mistakes are finding people

462
00:17:58,960 --> 00:18:02,379
make in the 80s is that okay you've got

463
00:18:01,389 --> 00:18:05,110
this salad where you got your

464
00:18:02,379 --> 00:18:07,658
public-facing for your problem PPC and

465
00:18:05,110 --> 00:18:09,639
you got your party PC and your internal

466
00:18:07,659 --> 00:18:11,529
services they're only intended to be

467
00:18:09,639 --> 00:18:14,649
caught by your own services in the

468
00:18:11,529 --> 00:18:17,230
public facing layer and you have some

469
00:18:14,649 --> 00:18:19,479
BBC peering maybe and then you assume

470
00:18:17,230 --> 00:18:22,179
that okay because nothing else can call

471
00:18:19,480 --> 00:18:24,639
these guys so we are safe we just need

472
00:18:22,179 --> 00:18:29,230
to put our protection around here inform

473
00:18:24,639 --> 00:18:31,689
the public be PC so anywhere here is the

474
00:18:29,230 --> 00:18:33,789
fully trusted this is it is this is the

475
00:18:31,690 --> 00:18:36,070
holy grail so as long as the attacker

476
00:18:33,789 --> 00:18:38,559
can gain here taking assets whatever we

477
00:18:36,070 --> 00:18:40,809
have on the other side as well so again

478
00:18:38,559 --> 00:18:42,730
if you're not careful if some amount

479
00:18:40,809 --> 00:18:44,619
gains through an injection attack course

480
00:18:42,730 --> 00:18:46,779
to one of your dependencies then all

481
00:18:44,619 --> 00:18:51,070
these networking protection you think

482
00:18:46,779 --> 00:18:52,659
you have means nothing and of course one

483
00:18:51,070 --> 00:18:54,399
thing we've seen more and more now is

484
00:18:52,659 --> 00:18:56,259
attacker stealing your 8 verse

485
00:18:54,399 --> 00:18:57,969
credentials because you don't care about

486
00:18:56,259 --> 00:19:00,970
a private data you have what I care

487
00:18:57,970 --> 00:19:02,470
about is getting some easy to time to do

488
00:19:00,970 --> 00:19:03,249
some Bitcoin mining and make some money

489
00:19:02,470 --> 00:19:04,960
that way

490
00:19:03,249 --> 00:19:06,369
and of course if not careful you're

491
00:19:04,960 --> 00:19:08,230
gonna wake up next morning I find a

492
00:19:06,369 --> 00:19:10,809
massive a diverse bill in your account

493
00:19:08,230 --> 00:19:14,220
which when I search for those similar

494
00:19:10,809 --> 00:19:16,600
also similar outages those similar

495
00:19:14,220 --> 00:19:19,059
incidents are found so many of them and

496
00:19:16,600 --> 00:19:21,219
in fact even in my small social circle I

497
00:19:19,059 --> 00:19:22,779
know of two large companies that has had

498
00:19:21,220 --> 00:19:25,299
this happened to them whereby the

499
00:19:22,779 --> 00:19:27,429
account score compromised and attackers

500
00:19:25,299 --> 00:19:29,710
used to rack up over a hundred thousand

501
00:19:27,429 --> 00:19:31,749
dollars worth of interest bill within a

502
00:19:29,710 --> 00:19:33,429
very short space of time of course in

503
00:19:31,749 --> 00:19:36,610
that case is their big customers to 80s

504
00:19:33,429 --> 00:19:38,200
and 80s agree to cover the cost but you

505
00:19:36,610 --> 00:19:39,309
had to be very lucky and also you just

506
00:19:38,200 --> 00:19:40,440
don't want to be in that situation in

507
00:19:39,309 --> 00:19:42,908
the first place

508
00:19:40,440 --> 00:19:44,769
and we've lambda functions even though

509
00:19:42,909 --> 00:19:47,289
everything is public all the time but

510
00:19:44,769 --> 00:19:49,869
you can re you can control who can who

511
00:19:47,289 --> 00:19:52,059
can invoke the function through I am so

512
00:19:49,869 --> 00:19:53,678
that's great so on the front we don't

513
00:19:52,059 --> 00:19:55,119
need to have other networking layers in

514
00:19:53,679 --> 00:19:57,490
front of that just to be sure that no

515
00:19:55,119 --> 00:19:59,559
one can get in but as we mentioned

516
00:19:57,490 --> 00:20:00,850
people can gain from a starbase through

517
00:19:59,559 --> 00:20:03,730
your dependencies through somehow

518
00:20:00,850 --> 00:20:06,040
assessing or compromising dependencies

519
00:20:03,730 --> 00:20:07,540
use or dependencies of your dependencies

520
00:20:06,040 --> 00:20:10,149
and they can steal the information

521
00:20:07,540 --> 00:20:12,550
formed through that those dependencies

522
00:20:10,150 --> 00:20:15,340
as I show you earlier so what can we do

523
00:20:12,550 --> 00:20:17,379
one of the guys starts in the server a

524
00:20:15,340 --> 00:20:19,270
security space pure sac they publish a

525
00:20:17,380 --> 00:20:21,190
free library that's important interested

526
00:20:19,270 --> 00:20:23,860
in toast by this really handsome man we

527
00:20:21,190 --> 00:20:25,540
should know him and we're part this free

528
00:20:23,860 --> 00:20:27,280
library you can down you can download

529
00:20:25,540 --> 00:20:29,260
for free and use in your packages that

530
00:20:27,280 --> 00:20:31,960
disables outbound internet connectivity

531
00:20:29,260 --> 00:20:34,090
by default so your function can still

532
00:20:31,960 --> 00:20:36,400
talk to a tree services but you can't

533
00:20:34,090 --> 00:20:38,679
talk to say arbitrary endpoint that the

534
00:20:36,400 --> 00:20:41,560
attacker set up and also it is able with

535
00:20:38,680 --> 00:20:43,390
other things like the ability to create

536
00:20:41,560 --> 00:20:44,830
the chart processes as well as the

537
00:20:43,390 --> 00:20:46,480
ability to read and write to the temp

538
00:20:44,830 --> 00:20:48,040
folder which is not something that you

539
00:20:46,480 --> 00:20:50,080
need to do most of the time anyway and

540
00:20:48,040 --> 00:20:51,940
all these options are configurable and

541
00:20:50,080 --> 00:20:55,800
one of things I've been doing in our as

542
00:20:51,940 --> 00:20:58,540
well is wrapping the configuration and

543
00:20:55,800 --> 00:21:00,610
for pure for this life for function

544
00:20:58,540 --> 00:21:02,500
shield into a middleware so there are

545
00:21:00,610 --> 00:21:04,240
contain distribute them a lot easier to

546
00:21:02,500 --> 00:21:06,340
the rest of my team so that they can

547
00:21:04,240 --> 00:21:08,740
very easily use

548
00:21:06,340 --> 00:21:09,970
incorporate this as as a default

549
00:21:08,740 --> 00:21:12,250
template for all the functions that

550
00:21:09,970 --> 00:21:14,380
working on so with this very simple

551
00:21:12,250 --> 00:21:17,350
thing I can then stop any unintended

552
00:21:14,380 --> 00:21:20,470
outbound Internet connectivity outbound

553
00:21:17,350 --> 00:21:21,730
connectivity from my functions and then

554
00:21:20,470 --> 00:21:24,100
the reason why if I don't want to use

555
00:21:21,730 --> 00:21:26,760
PPC with lambda at least right now is

556
00:21:24,100 --> 00:21:29,020
that when your your lambda function

557
00:21:26,760 --> 00:21:31,060
ultimately still runs on some form

558
00:21:29,020 --> 00:21:32,980
containers so when the new instance of

559
00:21:31,060 --> 00:21:35,080
that functions runs you have to go

560
00:21:32,980 --> 00:21:38,290
through this whole push up process

561
00:21:35,080 --> 00:21:41,530
including creating en eyes for your V PC

562
00:21:38,290 --> 00:21:44,020
and that process itself can easily add

563
00:21:41,530 --> 00:21:46,030
10 seconds your costar time this depends

564
00:21:44,020 --> 00:21:47,920
on a number of vectors number factors

565
00:21:46,030 --> 00:21:49,930
including how much memory you give you a

566
00:21:47,920 --> 00:21:52,000
function because the more memory keeps

567
00:21:49,930 --> 00:21:54,580
your function also means the more CPU

568
00:21:52,000 --> 00:21:57,100
cycles that is going to get as well so

569
00:21:54,580 --> 00:21:58,929
it does help but then still V PC alone

570
00:21:57,100 --> 00:22:01,899
you can add easy anything between Street

571
00:21:58,930 --> 00:22:03,840
is 10 seconds for my experience and as

572
00:22:01,900 --> 00:22:05,020
you mentioned even if you have EPC

573
00:22:03,840 --> 00:22:07,629
boundary

574
00:22:05,020 --> 00:22:10,150
it still doesn't it's still not it still

575
00:22:07,630 --> 00:22:12,430
means that anyone the compromise your

576
00:22:10,150 --> 00:22:12,760
functions somehow can see us as anything

577
00:22:12,430 --> 00:22:16,330
else

578
00:22:12,760 --> 00:22:17,620
that your function is able to so one of

579
00:22:16,330 --> 00:22:20,230
the other things that we should

580
00:22:17,620 --> 00:22:22,989
do is implement authentication but for

581
00:22:20,230 --> 00:22:25,450
internal services so that when your say

582
00:22:22,990 --> 00:22:27,070
user facing API to talk to some internal

583
00:22:25,450 --> 00:22:29,710
service that's only intended to be

584
00:22:27,070 --> 00:22:31,090
called by those user facing API is then

585
00:22:29,710 --> 00:22:33,430
make sure you also have authentication

586
00:22:31,090 --> 00:22:35,260
setup in that communication as well and

587
00:22:33,430 --> 00:22:36,880
when you're building api's with api

588
00:22:35,260 --> 00:22:39,309
gateway and lambda you can do this

589
00:22:36,880 --> 00:22:41,170
really easily api k way even though it's

590
00:22:39,309 --> 00:22:43,629
always public of course you can now also

591
00:22:41,170 --> 00:22:44,890
put them into VPC as well but it takes a

592
00:22:43,630 --> 00:22:48,670
lot of effort and it's not something

593
00:22:44,890 --> 00:22:50,170
that I tend to do normally and you can

594
00:22:48,670 --> 00:22:51,850
also implement your authentication

595
00:22:50,170 --> 00:22:54,010
authorization and authentication number

596
00:22:51,850 --> 00:22:55,959
different mechanisms for user facing API

597
00:22:54,010 --> 00:22:58,570
so I tend to use something like kognito

598
00:22:55,960 --> 00:23:01,510
or using custom functions that integrate

599
00:22:58,570 --> 00:23:04,510
with other providers like of zero but

600
00:23:01,510 --> 00:23:06,280
for internal API that tend to use I am

601
00:23:04,510 --> 00:23:09,250
so that anything that needs to talk to

602
00:23:06,280 --> 00:23:13,210
this API can I can control the access to

603
00:23:09,250 --> 00:23:15,580
Amazon's I am mechanism easily and if

604
00:23:13,210 --> 00:23:17,140
you are even building my API is with API

605
00:23:15,580 --> 00:23:19,480
gabion lambda using the service

606
00:23:17,140 --> 00:23:21,220
framework I can enable the authorization

607
00:23:19,480 --> 00:23:25,000
which is one line of code in my service

608
00:23:21,220 --> 00:23:26,740
Toriyama spec and then the fin ecology

609
00:23:25,000 --> 00:23:28,090
is make sure that you really minimize

610
00:23:26,740 --> 00:23:30,460
the amount of assets that your function

611
00:23:28,090 --> 00:23:35,169
has and this is where but you really

612
00:23:30,460 --> 00:23:38,140
want to have one one I am roper function

613
00:23:35,170 --> 00:23:40,510
and tailor that policy for that function

614
00:23:38,140 --> 00:23:44,620
to just that what their function needs

615
00:23:40,510 --> 00:23:46,990
and fortunately again some girls or guys

616
00:23:44,620 --> 00:23:48,550
work in the service security space

617
00:23:46,990 --> 00:23:52,059
publishing in the free library that you

618
00:23:48,550 --> 00:23:54,909
can use in this case it allows me to to

619
00:23:52,059 --> 00:23:57,220
use the service framework and specify an

620
00:23:54,910 --> 00:23:59,050
IM role for each my functions in this

621
00:23:57,220 --> 00:24:01,330
case if I call function that needs to

622
00:23:59,050 --> 00:24:04,178
get some object from the particular tree

623
00:24:01,330 --> 00:24:05,678
pocket and put the module into a

624
00:24:04,179 --> 00:24:07,660
different folder in the same pocket then

625
00:24:05,679 --> 00:24:10,240
I can provide I can specify very

626
00:24:07,660 --> 00:24:13,750
specific permissions for that particular

627
00:24:10,240 --> 00:24:17,500
function of course all of these require

628
00:24:13,750 --> 00:24:19,120
developer educate this plane and is easy

629
00:24:17,500 --> 00:24:20,320
to forget them so one of the things I've

630
00:24:19,120 --> 00:24:21,760
been trying to do in my current

631
00:24:20,320 --> 00:24:24,309
workplace is that was trying to build

632
00:24:21,760 --> 00:24:27,070
tools to make those Tomatoes adoption

633
00:24:24,309 --> 00:24:29,620
easier and you can do the right thing by

634
00:24:27,070 --> 00:24:31,330
default and some of the vendors in the

635
00:24:29,620 --> 00:24:32,739
service here in space like

636
00:24:31,330 --> 00:24:34,120
I've mentioned them already but then

637
00:24:32,740 --> 00:24:36,310
there's also a few other guys like with

638
00:24:34,120 --> 00:24:38,050
tech go there also peeling commercial

639
00:24:36,310 --> 00:24:40,389
tools there also does things like

640
00:24:38,050 --> 00:24:42,310
looking at skinning your code to see how

641
00:24:40,390 --> 00:24:44,620
you use in the 80s DK to talk to a

642
00:24:42,310 --> 00:24:46,450
diverse services and then compare that

643
00:24:44,620 --> 00:24:48,340
with the permissions that you actually

644
00:24:46,450 --> 00:24:49,900
given your function to see whether or

645
00:24:48,340 --> 00:24:51,639
not your functions are over permissions

646
00:24:49,900 --> 00:24:53,050
in this case you can really find out

647
00:24:51,640 --> 00:24:54,940
that hey that function has got

648
00:24:53,050 --> 00:24:56,710
permission to talk to Talam and DB even

649
00:24:54,940 --> 00:24:58,960
though in the code doesn't actually talk

650
00:24:56,710 --> 00:25:01,000
to them DBA oh so I should remove that

651
00:24:58,960 --> 00:25:03,280
permission and the earth they also tend

652
00:25:01,000 --> 00:25:04,900
to do active protection so scanning the

653
00:25:03,280 --> 00:25:06,850
invocation event for your function

654
00:25:04,900 --> 00:25:08,770
so even event coming in from API

655
00:25:06,850 --> 00:25:10,510
gateways your lambda and it looks like

656
00:25:08,770 --> 00:25:12,250
someone's trying to run a secret Russian

657
00:25:10,510 --> 00:25:15,250
attack then they get put a stop to the

658
00:25:12,250 --> 00:25:16,990
invocation right away and then there's

659
00:25:15,250 --> 00:25:19,000
also other companies like our seed and

660
00:25:16,990 --> 00:25:20,410
cloud zero that focus more on the serve

661
00:25:19,000 --> 00:25:26,500
with the pretty side of things from a

662
00:25:20,410 --> 00:25:29,260
high level and one of the things you

663
00:25:26,500 --> 00:25:31,750
also find with lambda is that you tend

664
00:25:29,260 --> 00:25:33,820
to write them in a stateless fashion for

665
00:25:31,750 --> 00:25:35,830
one thing you have no good you have you

666
00:25:33,820 --> 00:25:37,409
never much control over how many

667
00:25:35,830 --> 00:25:40,090
functions are running at a time and also

668
00:25:37,410 --> 00:25:42,490
how long that function lives on for so

669
00:25:40,090 --> 00:25:44,020
you want to typically write your

670
00:25:42,490 --> 00:25:45,670
function in a completely stateless way

671
00:25:44,020 --> 00:25:47,889
and then you end up using a lot of

672
00:25:45,670 --> 00:25:49,510
different they manage the services to

673
00:25:47,890 --> 00:25:51,340
manage the state that you have in your

674
00:25:49,510 --> 00:25:54,129
vacation including all kind of different

675
00:25:51,340 --> 00:25:55,659
databases as well as s3 and so on and so

676
00:25:54,130 --> 00:25:57,490
forth and you also want to make sure

677
00:25:55,660 --> 00:25:59,890
that at any sensitive data that you have

678
00:25:57,490 --> 00:26:03,520
no data by your customers they need to

679
00:25:59,890 --> 00:26:06,910
be secure encrypted at rest as well as

680
00:26:03,520 --> 00:26:08,860
in transit and of course with AWS you

681
00:26:06,910 --> 00:26:10,750
get a lot of goodness out of the box so

682
00:26:08,860 --> 00:26:12,550
many of their services provide service

683
00:26:10,750 --> 00:26:14,800
are encryption and but you do this you

684
00:26:12,550 --> 00:26:17,139
need to use it enable them yourself

685
00:26:14,800 --> 00:26:19,330
for example s3 supposed to manage

686
00:26:17,140 --> 00:26:22,990
encryption you view kms so there's some

687
00:26:19,330 --> 00:26:25,330
some some types of databases in RDS and

688
00:26:22,990 --> 00:26:27,670
the more recently Kinesis has also

689
00:26:25,330 --> 00:26:29,560
supports and Dunham's DBS one as well

690
00:26:27,670 --> 00:26:31,290
now supports a service our encryption

691
00:26:29,560 --> 00:26:34,600
out of the box

692
00:26:31,290 --> 00:26:36,490
so again important remember with lambda

693
00:26:34,600 --> 00:26:38,350
is one of the most important thing you

694
00:26:36,490 --> 00:26:40,630
can do from a security perspective is to

695
00:26:38,350 --> 00:26:43,209
make sure that you apply the you

696
00:26:40,630 --> 00:26:44,940
restrict what the function can do and

697
00:26:43,210 --> 00:26:46,680
also peep

698
00:26:44,940 --> 00:26:48,120
often talk about okay when you function

699
00:26:46,680 --> 00:26:49,830
no longer need it you should delete them

700
00:26:48,120 --> 00:26:52,229
because anything that hangs around your

701
00:26:49,830 --> 00:26:55,830
environment is still attack surface the

702
00:26:52,230 --> 00:26:57,600
sermon can explore can exploit and that

703
00:26:55,830 --> 00:26:59,250
is why she one of the best practice one

704
00:26:57,600 --> 00:27:02,010
of the advices from the best practice

705
00:26:59,250 --> 00:27:03,750
guy from the lambda documentation but

706
00:27:02,010 --> 00:27:06,030
what I found instead we especially of

707
00:27:03,750 --> 00:27:08,670
lambda is this a lot easier said than

708
00:27:06,030 --> 00:27:10,410
done so if you work in large companies

709
00:27:08,670 --> 00:27:11,730
chances are there's going to be so many

710
00:27:10,410 --> 00:27:13,710
different services scattered all over

711
00:27:11,730 --> 00:27:15,570
the place and it's often not easy to

712
00:27:13,710 --> 00:27:17,070
identify owners for those components

713
00:27:15,570 --> 00:27:18,720
especially as people move around the

714
00:27:17,070 --> 00:27:21,120
organization or they leave the company

715
00:27:18,720 --> 00:27:22,770
all together imagine you taking those

716
00:27:21,120 --> 00:27:25,500
service components now breaking it up

717
00:27:22,770 --> 00:27:27,510
into even more smaller units of

718
00:27:25,500 --> 00:27:29,070
deployments individual lambda functions

719
00:27:27,510 --> 00:27:31,290
so if you don't have a few ways to

720
00:27:29,070 --> 00:27:32,850
organize them in some way and to find

721
00:27:31,290 --> 00:27:34,920
out what functions are in your account

722
00:27:32,850 --> 00:27:36,780
and who are the owners which you can do

723
00:27:34,920 --> 00:27:39,630
through simple tagging it's a very

724
00:27:36,780 --> 00:27:41,160
simple technique to do that then chances

725
00:27:39,630 --> 00:27:43,320
are is really hard for you try to

726
00:27:41,160 --> 00:27:45,420
understand whether or not some function

727
00:27:43,320 --> 00:27:47,280
is actually being used he said you see

728
00:27:45,420 --> 00:27:49,320
not being used because it's only used

729
00:27:47,280 --> 00:27:51,690
for some failure cases that we just

730
00:27:49,320 --> 00:27:54,389
haven't seen yet what if is to do so the

731
00:27:51,690 --> 00:27:55,860
server recovers disaster recovery now we

732
00:27:54,390 --> 00:27:58,620
delete the function what happens when we

733
00:27:55,860 --> 00:28:00,449
do have a disaster so identifying those

734
00:27:58,620 --> 00:28:02,459
ownership so any video functions becomes

735
00:28:00,450 --> 00:28:05,640
it becomes a challenge especially for

736
00:28:02,460 --> 00:28:07,440
large organizations and we all sort of

737
00:28:05,640 --> 00:28:09,300
think about now service attacks still

738
00:28:07,440 --> 00:28:10,950
even though with lambda is super

739
00:28:09,300 --> 00:28:13,889
scalable I've heard a few times where

740
00:28:10,950 --> 00:28:15,300
someone being attacked someone has was

741
00:28:13,890 --> 00:28:17,550
the victim of it in our service attack

742
00:28:15,300 --> 00:28:20,129
but hey lambda just scared the order way

743
00:28:17,550 --> 00:28:22,020
to thousands of concurrent executions so

744
00:28:20,130 --> 00:28:23,580
the immense gets through it the proof

745
00:28:22,020 --> 00:28:25,500
falls through the whole thing a third

746
00:28:23,580 --> 00:28:28,139
attack but ended up costing the cost

747
00:28:25,500 --> 00:28:30,450
them a lot of money and all the level

748
00:28:28,140 --> 00:28:32,730
executions are not free if a using API

749
00:28:30,450 --> 00:28:34,830
gateway to exposure level functions if a

750
00:28:32,730 --> 00:28:37,440
cable service also not free in fact is

751
00:28:34,830 --> 00:28:39,540
quite expensive by comparison to lambda

752
00:28:37,440 --> 00:28:41,430
so it kind of I guess you kind of go

753
00:28:39,540 --> 00:28:43,830
back to the world of okay I can have to

754
00:28:41,430 --> 00:28:46,350
choose gonna become unavailable to some

755
00:28:43,830 --> 00:28:49,110
our customers when someone attacks me or

756
00:28:46,350 --> 00:28:54,209
have to brace the impact on my wallets

757
00:28:49,110 --> 00:28:56,040
so Amazon does have a double shield

758
00:28:54,210 --> 00:28:58,140
service but it doesn't protect you from

759
00:28:56,040 --> 00:29:02,040
your api's directly

760
00:28:58,140 --> 00:29:03,960
could have your API gateway nowadays you

761
00:29:02,040 --> 00:29:05,300
can use the regional custom domain name

762
00:29:03,960 --> 00:29:08,850
so that you can have your own

763
00:29:05,300 --> 00:29:11,100
transmission wishes now means that you

764
00:29:08,850 --> 00:29:12,449
can use Amazon's the web service which

765
00:29:11,100 --> 00:29:15,899
you can configure some of the rules

766
00:29:12,450 --> 00:29:18,270
around identifying spammy IP addresses

767
00:29:15,900 --> 00:29:20,490
and then block them so when it's just

768
00:29:18,270 --> 00:29:22,379
know when the one attacks coming from a

769
00:29:20,490 --> 00:29:23,970
single IP are just great when it's

770
00:29:22,380 --> 00:29:25,800
coming from a really distributed set of

771
00:29:23,970 --> 00:29:27,450
IP addresses I don't know how much does

772
00:29:25,800 --> 00:29:29,520
actually help you

773
00:29:27,450 --> 00:29:31,260
it was you advanced also if you pay a

774
00:29:29,520 --> 00:29:32,879
monthly fee it gives you some payments

775
00:29:31,260 --> 00:29:35,940
protection against Terminal Services

776
00:29:32,880 --> 00:29:39,210
that you incur when you're being

777
00:29:35,940 --> 00:29:40,830
attacked right now this is support

778
00:29:39,210 --> 00:29:42,660
doesn't cover the cost for lamda and a

779
00:29:40,830 --> 00:29:44,970
few other services and also with lambda

780
00:29:42,660 --> 00:29:46,890
you can think about when you have a

781
00:29:44,970 --> 00:29:48,240
Singh event sources because they've got

782
00:29:46,890 --> 00:29:51,060
retry out of the box

783
00:29:48,240 --> 00:29:52,860
so if someone is mismanaged she executes

784
00:29:51,060 --> 00:29:54,870
an attack against you that there's

785
00:29:52,860 --> 00:29:56,909
somehow triggers of all these retards in

786
00:29:54,870 --> 00:29:59,399
the background as well then you kind of

787
00:29:56,910 --> 00:30:00,570
become a double whammy on top of that in

788
00:29:59,400 --> 00:30:02,880
our service type they are executing

789
00:30:00,570 --> 00:30:04,860
already and you end up just end up

790
00:30:02,880 --> 00:30:07,140
costing you a lot of money as well so

791
00:30:04,860 --> 00:30:08,909
even with surveillance order scalability

792
00:30:07,140 --> 00:30:11,490
you get orders in the cost per

793
00:30:08,910 --> 00:30:12,870
invocation nicer pricing you get you see

794
00:30:11,490 --> 00:30:16,950
how to think about what happens when

795
00:30:12,870 --> 00:30:18,659
someone does attack you and we server we

796
00:30:16,950 --> 00:30:21,090
all know that at some point our servers

797
00:30:18,660 --> 00:30:23,820
gonna be infected by viruses or the

798
00:30:21,090 --> 00:30:25,409
place oh no server knows great news so

799
00:30:23,820 --> 00:30:27,240
one a nice benefit do you have with

800
00:30:25,410 --> 00:30:28,800
service is that you don't worry about

801
00:30:27,240 --> 00:30:31,560
having servers that live for very long

802
00:30:28,800 --> 00:30:33,120
time however your lambda functions

803
00:30:31,560 --> 00:30:34,409
themselves are still reduced the

804
00:30:33,120 --> 00:30:36,270
containers underneath your lambda

805
00:30:34,410 --> 00:30:39,330
function they are reused for performance

806
00:30:36,270 --> 00:30:41,040
reasons so every function also has got

807
00:30:39,330 --> 00:30:43,260
access to a temp folder and you

808
00:30:41,040 --> 00:30:44,790
definitely definitely avoid putting any

809
00:30:43,260 --> 00:30:46,680
sensitive data in that temp folder

810
00:30:44,790 --> 00:30:48,629
because that gets that gets

811
00:30:46,680 --> 00:30:50,670
persisted between containing vocation

812
00:30:48,630 --> 00:30:53,340
well while the containers is its life

813
00:30:50,670 --> 00:30:54,810
so anyone managed to execute an

814
00:30:53,340 --> 00:30:56,970
interesting attack against you they can

815
00:30:54,810 --> 00:30:59,580
also grab whatever from the temp folder

816
00:30:56,970 --> 00:31:00,990
just as easy they can they can scan it

817
00:30:59,580 --> 00:31:03,060
was in your environment

818
00:31:00,990 --> 00:31:05,010
so that's where libraries are function

819
00:31:03,060 --> 00:31:06,870
shield becomes also used for as well so

820
00:31:05,010 --> 00:31:08,490
that it automatically by default you

821
00:31:06,870 --> 00:31:10,500
disable the use of a temp folder

822
00:31:08,490 --> 00:31:12,690
altogether

823
00:31:10,500 --> 00:31:15,270
yep function shoot there I can check it

824
00:31:12,690 --> 00:31:18,059
out another thing I find we've love the

825
00:31:15,270 --> 00:31:20,629
tradition web frameworks is that it's

826
00:31:18,059 --> 00:31:24,000
easy to just leave directory in a

827
00:31:20,630 --> 00:31:26,580
directory browsing option on and then we

828
00:31:24,000 --> 00:31:30,179
found oh okay we can actually search go

829
00:31:26,580 --> 00:31:35,129
go and find the people's find all kind

830
00:31:30,179 --> 00:31:37,679
of wonderful things like I was it when I

831
00:31:35,130 --> 00:31:40,669
search for a secret database credentials

832
00:31:37,679 --> 00:31:44,039
app config and so on app config with

833
00:31:40,669 --> 00:31:46,710
credentials for the sequel databases in

834
00:31:44,039 --> 00:31:48,929
plain text all of that happens because

835
00:31:46,710 --> 00:31:50,730
someone says dentally left the directory

836
00:31:48,929 --> 00:31:52,590
listing option on when they're

837
00:31:50,730 --> 00:31:55,289
developing the web application and again

838
00:31:52,590 --> 00:31:56,760
is simple thing to smoothing to fix but

839
00:31:55,289 --> 00:31:58,679
when you're not have we're not thinking

840
00:31:56,760 --> 00:32:00,539
about it is those kind of mistakes in

841
00:31:58,679 --> 00:32:01,830
creeping and I also found the cases

842
00:32:00,539 --> 00:32:04,559
where you can actually search and find

843
00:32:01,830 --> 00:32:07,260
someone's secret dump right there in the

844
00:32:04,559 --> 00:32:08,940
in the blue folder so now that you don't

845
00:32:07,260 --> 00:32:09,690
have web frameworks it does that for you

846
00:32:08,940 --> 00:32:11,820
after the box

847
00:32:09,690 --> 00:32:13,020
it becomes directed listing becomes a

848
00:32:11,820 --> 00:32:15,330
feature that you have implement yourself

849
00:32:13,020 --> 00:32:16,980
so chances are once you're to think

850
00:32:15,330 --> 00:32:19,949
about it you actually need is you're

851
00:32:16,980 --> 00:32:22,049
probably not going to do it so I found

852
00:32:19,950 --> 00:32:23,429
we've landed at least I've never had to

853
00:32:22,049 --> 00:32:25,889
do anything along the lines of

854
00:32:23,429 --> 00:32:27,870
implementing Authority listing myself so

855
00:32:25,890 --> 00:32:30,030
I have noticed therefore have no chance

856
00:32:27,870 --> 00:32:31,918
of acidentally just exposing directory

857
00:32:30,030 --> 00:32:33,720
that contains important information that

858
00:32:31,919 --> 00:32:36,090
I have my function even though I still

859
00:32:33,720 --> 00:32:38,520
have to concern myself with okay making

860
00:32:36,090 --> 00:32:40,289
sure that I don't know when someone does

861
00:32:38,520 --> 00:32:42,179
manage to get into my function they

862
00:32:40,289 --> 00:32:43,860
don't they can leak information from my

863
00:32:42,179 --> 00:32:46,530
function including that I should code

864
00:32:43,860 --> 00:32:50,899
for my function as well and the last one

865
00:32:46,530 --> 00:32:54,149
atashi on just one time is Bitcoin

866
00:32:50,900 --> 00:32:56,190
Bitcoin mining I mentioned already now

867
00:32:54,150 --> 00:32:58,650
you gotta be really careful and guarding

868
00:32:56,190 --> 00:33:02,159
your 80s credentials this I think a

869
00:32:58,650 --> 00:33:03,630
couple of examples here whereby someone

870
00:33:02,159 --> 00:33:05,490
just accidentally put database

871
00:33:03,630 --> 00:33:08,070
credentials into public repo even for a

872
00:33:05,490 --> 00:33:10,440
few minutes and then they they found it

873
00:33:08,070 --> 00:33:12,090
okay even though they changed it push a

874
00:33:10,440 --> 00:33:14,280
new commit because all those coming

875
00:33:12,090 --> 00:33:16,439
histories are there forever so attackers

876
00:33:14,280 --> 00:33:18,450
can still scan them if I know for a fact

877
00:33:16,440 --> 00:33:22,740
that a depressed activist scans all

878
00:33:18,450 --> 00:33:24,300
public in up repos and they email you or

879
00:33:22,740 --> 00:33:26,700
they can touch you somehow when

880
00:33:24,300 --> 00:33:29,970
see there are active advocate NGOs in

881
00:33:26,700 --> 00:33:31,410
public repos in plain text but they're

882
00:33:29,970 --> 00:33:33,540
not the only ones doing they're not the

883
00:33:31,410 --> 00:33:36,990
only ones looking and in this prevent

884
00:33:33,540 --> 00:33:39,120
this particular article the the person

885
00:33:36,990 --> 00:33:41,220
left the ad was credential in plain text

886
00:33:39,120 --> 00:33:43,409
in the probably Papa assitant for about

887
00:33:41,220 --> 00:33:44,040
five minutes and even though he fixed it

888
00:33:43,410 --> 00:33:46,050
right away

889
00:33:44,040 --> 00:33:50,159
the attackers demand get that in time

890
00:33:46,050 --> 00:33:52,560
and get the kiosk with a diverse

891
00:33:50,160 --> 00:33:54,120
accounts so one of the things you could

892
00:33:52,560 --> 00:33:56,100
do when I was trying to find when I was

893
00:33:54,120 --> 00:33:58,489
searching for solutions is that you can

894
00:33:56,100 --> 00:34:00,929
hook into the gate you can hook into get

895
00:33:58,490 --> 00:34:05,430
pre-commit and run some script to check

896
00:34:00,930 --> 00:34:07,200
to scan your to to scan your scan your

897
00:34:05,430 --> 00:34:09,830
code and see that we you're not putting

898
00:34:07,200 --> 00:34:13,170
any 80's credentials in there by mistake

899
00:34:09,830 --> 00:34:15,090
and also with a the best you can set up

900
00:34:13,170 --> 00:34:17,720
you can set up monitoring so that if you

901
00:34:15,090 --> 00:34:20,910
know you only run infrastructure in say

902
00:34:17,719 --> 00:34:23,669
in the in Ireland so you want you can

903
00:34:20,909 --> 00:34:25,350
want to put alarms around any Easter

904
00:34:23,670 --> 00:34:27,630
activities in regions that you're not

905
00:34:25,350 --> 00:34:30,509
using from what some of the Idris guys

906
00:34:27,630 --> 00:34:32,580
help me I think Sao Paulo and Tokyo are

907
00:34:30,510 --> 00:34:34,500
the hotbed for attackers launching is

908
00:34:32,580 --> 00:34:36,449
two instances the Bitcoin mining because

909
00:34:34,500 --> 00:34:39,810
those are regions that not many people

910
00:34:36,449 --> 00:34:41,428
use so one of the things you could do in

911
00:34:39,810 --> 00:34:43,380
this case as well so I can set up a lamp

912
00:34:41,429 --> 00:34:46,620
billing in regions that you know you're

913
00:34:43,380 --> 00:34:48,110
not using along as well as other alarms

914
00:34:46,620 --> 00:34:51,900
that you have for those regions and

915
00:34:48,110 --> 00:34:54,690
finally you want to apply poke heads

916
00:34:51,900 --> 00:34:56,850
which is pattern for compartmentalizing

917
00:34:54,690 --> 00:34:59,550
leaks and it's also a pattern that's

918
00:34:56,850 --> 00:35:01,080
been made popular by the release a book

919
00:34:59,550 --> 00:35:03,450
by Michael Nygaard

920
00:35:01,080 --> 00:35:04,890
so in this case you want to make sure

921
00:35:03,450 --> 00:35:06,390
that your functions has got the least

922
00:35:04,890 --> 00:35:08,700
amount of privilege possible and also

923
00:35:06,390 --> 00:35:11,549
anslee them by per function so that each

924
00:35:08,700 --> 00:35:13,200
functions got its own policies and also

925
00:35:11,550 --> 00:35:15,300
you want to use separate accounts

926
00:35:13,200 --> 00:35:16,950
personally I like to have one a diverse

927
00:35:15,300 --> 00:35:18,540
account per team so that the team can

928
00:35:16,950 --> 00:35:20,609
own everything they have in their

929
00:35:18,540 --> 00:35:22,590
environments in terms of people to be in

930
00:35:20,610 --> 00:35:24,330
control of their own infrastructure but

931
00:35:22,590 --> 00:35:25,200
also it means that if one Inc account

932
00:35:24,330 --> 00:35:28,230
gets compromised

933
00:35:25,200 --> 00:35:30,509
not the attackers can only do Kok only

934
00:35:28,230 --> 00:35:31,770
can only access at worst whatever's in

935
00:35:30,510 --> 00:35:33,120
that particular account as opposed to

936
00:35:31,770 --> 00:35:36,320
everything they have in the entire

937
00:35:33,120 --> 00:35:38,000
organization so quick recap

938
00:35:36,320 --> 00:35:39,500
application dependencies it's a much

939
00:35:38,000 --> 00:35:42,170
bigger attack surface and you don't need

940
00:35:39,500 --> 00:35:44,420
probably realized and most of times just

941
00:35:42,170 --> 00:35:46,130
as relevant as before and we need to

942
00:35:44,420 --> 00:35:48,020
sanitize our inputs from our functions

943
00:35:46,130 --> 00:35:49,550
as well as the output and we want to

944
00:35:48,020 --> 00:35:52,340
apply the principle of least privilege

945
00:35:49,550 --> 00:35:54,830
to how we permission our functions then

946
00:35:52,340 --> 00:35:57,200
we want to use one I am role function

947
00:35:54,830 --> 00:35:59,900
and in with make sure that any data that

948
00:35:57,200 --> 00:36:01,910
we're using with for many services they

949
00:35:59,900 --> 00:36:04,070
are encrypted at rest as well as in

950
00:36:01,910 --> 00:36:05,240
transit and when you know a function is

951
00:36:04,070 --> 00:36:07,310
not definitely not being used anymore

952
00:36:05,240 --> 00:36:09,830
because you're the author you delete

953
00:36:07,310 --> 00:36:12,380
that function right away and to now

954
00:36:09,830 --> 00:36:14,210
service still still finger still back to

955
00:36:12,380 --> 00:36:16,190
that we consider and even though there

956
00:36:14,210 --> 00:36:17,780
is a double shield right now she'll be

957
00:36:16,190 --> 00:36:21,140
able sure balance doesn't cover the cost

958
00:36:17,780 --> 00:36:23,420
for lambda just yet and the servers it

959
00:36:21,140 --> 00:36:24,940
can be infested so no server means that

960
00:36:23,420 --> 00:36:27,530
we don't have to worry about having

961
00:36:24,940 --> 00:36:29,330
having lonely if the compromised service

962
00:36:27,530 --> 00:36:31,550
in our environment but we still gotta

963
00:36:29,330 --> 00:36:33,200
Karla our eatables credentials will arc

964
00:36:31,550 --> 00:36:35,780
here so that we don't end up being

965
00:36:33,200 --> 00:36:39,799
victim for some Bitcoin miner somewhere

966
00:36:35,780 --> 00:36:40,070
and finally put account use use account

967
00:36:39,800 --> 00:36:42,020
level

968
00:36:40,070 --> 00:36:44,720
isolation in your organization and

969
00:36:42,020 --> 00:36:46,700
remember that people know people you

970
00:36:44,720 --> 00:36:48,770
still the weakest link in your entire

971
00:36:46,700 --> 00:36:52,180
security chain so with that thank you

972
00:36:48,770 --> 00:36:52,180
very much guys for listening

973
00:36:58,030 --> 00:37:02,870
we've got like three minutes for

974
00:37:00,410 --> 00:37:04,520
questions but I'm gonna be around later

975
00:37:02,870 --> 00:37:06,109
for doing a break and lunch time so

976
00:37:04,520 --> 00:37:08,870
you've got any questions that come up I

977
00:37:06,110 --> 00:37:14,120
mean the holes I guess there any

978
00:37:08,870 --> 00:37:15,770
questions I guess that was all clear

979
00:37:14,120 --> 00:37:18,609
okay cool all right let's go to break

980
00:37:15,770 --> 00:37:18,610
and see ya

