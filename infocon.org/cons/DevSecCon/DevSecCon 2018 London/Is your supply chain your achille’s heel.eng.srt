1
00:00:00,000 --> 00:00:05,370
supply chain security and is that your

2
00:00:03,030 --> 00:00:07,020
Achilles heel in the organization I saw

3
00:00:05,370 --> 00:00:09,269
a tweet this morning Daniel you

4
00:00:07,020 --> 00:00:11,340
described that is you know the sleeping

5
00:00:09,269 --> 00:00:14,790
giant this is the thing that's going to

6
00:00:11,340 --> 00:00:15,750
start catching us out more so a little

7
00:00:14,790 --> 00:00:17,849
bit about myself

8
00:00:15,750 --> 00:00:19,198
I've got a background in building

9
00:00:17,850 --> 00:00:22,170
hardware and software but I've been

10
00:00:19,199 --> 00:00:24,510
dealing with supply chains myself for

11
00:00:22,170 --> 00:00:26,449
many years I've done absurd scaled in an

12
00:00:24,510 --> 00:00:28,800
enterprise I've worked in vendor land

13
00:00:26,449 --> 00:00:30,810
selling apps tech I'm currently a

14
00:00:28,800 --> 00:00:33,780
transformation consultant so if you need

15
00:00:30,810 --> 00:00:36,750
some transforming done I'm your guy I

16
00:00:33,780 --> 00:00:38,850
thought I was the veteran deficit kaan

17
00:00:36,750 --> 00:00:41,219
presenter I've been my third time doing

18
00:00:38,850 --> 00:00:43,460
this I think anybody here who's been

19
00:00:41,219 --> 00:00:47,070
here all four years

20
00:00:43,460 --> 00:00:48,719
other than Francois am and I'm

21
00:00:47,070 --> 00:00:50,370
interested in all things new and shiny

22
00:00:48,719 --> 00:00:52,050
so new tech and we're going to be

23
00:00:50,370 --> 00:00:55,440
talking quite a lot about and that in

24
00:00:52,050 --> 00:00:57,919
this talk so I have to acknowledge and

25
00:00:55,440 --> 00:01:01,769
thank a couple of collaborators on this

26
00:00:57,920 --> 00:01:02,879
Andy and Luke control plane people don't

27
00:01:01,770 --> 00:01:05,369
know control plane they're one of

28
00:01:02,879 --> 00:01:07,530
London's really hot cubed eddies

29
00:01:05,369 --> 00:01:09,350
consultancies that was really

30
00:01:07,530 --> 00:01:12,240
interesting for me as an old school

31
00:01:09,350 --> 00:01:14,390
abstract person who's done things the

32
00:01:12,240 --> 00:01:16,860
hard way the manual way to talk to

33
00:01:14,390 --> 00:01:18,689
people who doing Kuban Eddie's and

34
00:01:16,860 --> 00:01:20,490
getting some of the ideas from some of

35
00:01:18,689 --> 00:01:22,320
the technology near tech stack and

36
00:01:20,490 --> 00:01:24,839
seeing how I could retrofit some of the

37
00:01:22,320 --> 00:01:26,520
problems that we face doing AB sec the

38
00:01:24,840 --> 00:01:28,799
old way and that's kind of the theme of

39
00:01:26,520 --> 00:01:29,700
that talk and then also the technology

40
00:01:28,799 --> 00:01:32,579
that we're going to look at quite

41
00:01:29,700 --> 00:01:34,740
closely is in toto Santiago Torres has

42
00:01:32,579 --> 00:01:36,360
the the brainchild of that we're going

43
00:01:34,740 --> 00:01:38,240
to take quite a deep dive into in toto

44
00:01:36,360 --> 00:01:42,360
so those are just the two

45
00:01:38,240 --> 00:01:46,229
acknowledgments and thank-yous but I'm a

46
00:01:42,360 --> 00:01:48,060
hardware designer by a by trade and I've

47
00:01:46,229 --> 00:01:49,770
always when a built hardware I've always

48
00:01:48,060 --> 00:01:51,689
considered what am I putting into my

49
00:01:49,770 --> 00:01:53,009
hardware you know how am i building that

50
00:01:51,689 --> 00:01:55,289
hard way I've always been thinking about

51
00:01:53,009 --> 00:01:57,840
that supply chain if I get that supply

52
00:01:55,290 --> 00:02:00,149
chain wrong and I use a component that

53
00:01:57,840 --> 00:02:01,950
is defective or battery that's not rated

54
00:02:00,149 --> 00:02:05,420
correctly I could harm and I could

55
00:02:01,950 --> 00:02:07,340
damage individuals people right I'm

56
00:02:05,420 --> 00:02:09,479
concerned that the way that

57
00:02:07,340 --> 00:02:12,569
organisations developing software

58
00:02:09,479 --> 00:02:13,770
they're not considering the risks if you

59
00:02:12,569 --> 00:02:17,250
see my present

60
00:02:13,770 --> 00:02:19,860
before there's normally a cinema theme

61
00:02:17,250 --> 00:02:21,660
running through it this one I think the

62
00:02:19,860 --> 00:02:23,520
the genre that we're looking at is it

63
00:02:21,660 --> 00:02:25,770
horror or if they're substantially

64
00:02:23,520 --> 00:02:27,840
terrifying what is what is happening the

65
00:02:25,770 --> 00:02:32,730
threats that we are exposed to with

66
00:02:27,840 --> 00:02:35,130
unsecure software supply chains so two

67
00:02:32,730 --> 00:02:37,890
words two themes to think about and the

68
00:02:35,130 --> 00:02:40,440
first word is veracity veracity is truth

69
00:02:37,890 --> 00:02:42,600
so if you have you know what is the

70
00:02:40,440 --> 00:02:44,400
truth what can you trust right is

71
00:02:42,600 --> 00:02:46,590
something that you're building accurate

72
00:02:44,400 --> 00:02:47,880
now in that in terms of a supply chain

73
00:02:46,590 --> 00:02:50,790
if you think about if the supply chain

74
00:02:47,880 --> 00:02:53,370
your ferocity is if you say that you're

75
00:02:50,790 --> 00:02:55,230
testing your scanning code and your

76
00:02:53,370 --> 00:02:58,140
developers got a way to bypass those

77
00:02:55,230 --> 00:03:00,929
security security controls veracity is

78
00:02:58,140 --> 00:03:02,579
can you enforce those controls can you

79
00:03:00,930 --> 00:03:05,100
actually prove that you're secure

80
00:03:02,580 --> 00:03:06,630
security controls are being enforced so

81
00:03:05,100 --> 00:03:09,299
ferocity and the other word is

82
00:03:06,630 --> 00:03:11,280
provenance do you understand where your

83
00:03:09,300 --> 00:03:13,470
raw materials are coming from right how

84
00:03:11,280 --> 00:03:15,540
it is softly getting into your supply

85
00:03:13,470 --> 00:03:16,880
chain how is it propagating down their

86
00:03:15,540 --> 00:03:19,290
supply chain

87
00:03:16,880 --> 00:03:21,720
it's knowing the origins of your

88
00:03:19,290 --> 00:03:23,609
materials in that supply chain so those

89
00:03:21,720 --> 00:03:25,020
two two words provenance veracity we're

90
00:03:23,610 --> 00:03:28,110
going to come across those concepts as

91
00:03:25,020 --> 00:03:30,990
we talk through this as far as enforcing

92
00:03:28,110 --> 00:03:32,730
those two those two points provenance is

93
00:03:30,990 --> 00:03:34,740
much easier one to to kind of get your

94
00:03:32,730 --> 00:03:36,269
head around the problem space that's

95
00:03:34,740 --> 00:03:38,940
quite easy we know how to do software

96
00:03:36,270 --> 00:03:41,130
composition analysis proving that your

97
00:03:38,940 --> 00:03:44,730
supply chain is doing what you wanted to

98
00:03:41,130 --> 00:03:46,980
do that's a much harder problem let's

99
00:03:44,730 --> 00:03:48,780
look for some good examples of how

100
00:03:46,980 --> 00:03:50,760
people are solving write what we do we

101
00:03:48,780 --> 00:03:52,680
go looking for an analogy so let's have

102
00:03:50,760 --> 00:03:54,260
a look how big farmer surely they've

103
00:03:52,680 --> 00:03:56,400
understood the supply chain problem

104
00:03:54,260 --> 00:03:58,890
right that's in the interest we've been

105
00:03:56,400 --> 00:04:01,800
selling drugs in the in the market for

106
00:03:58,890 --> 00:04:03,209
for many many many decades and surely

107
00:04:01,800 --> 00:04:05,700
they've cracked this problem so I

108
00:04:03,210 --> 00:04:08,160
thought the FDA has highly regulated

109
00:04:05,700 --> 00:04:10,260
processes whereby people can introduce

110
00:04:08,160 --> 00:04:12,350
products into the market surely they've

111
00:04:10,260 --> 00:04:15,000
got their heads around this problem

112
00:04:12,350 --> 00:04:17,250
right does anybody remember the tylenol

113
00:04:15,000 --> 00:04:19,709
murders in the 80s right what people did

114
00:04:17,250 --> 00:04:21,810
is is somebody in Chicago went in and

115
00:04:19,709 --> 00:04:23,669
actually tampered with product that was

116
00:04:21,810 --> 00:04:25,950
sitting on shelves and laced it with

117
00:04:23,669 --> 00:04:27,659
cyanide killed five people in Chicago I

118
00:04:25,950 --> 00:04:29,849
mean that's a pretty

119
00:04:27,660 --> 00:04:32,850
example of your supply chain breaking

120
00:04:29,850 --> 00:04:34,560
down that's the security control the

121
00:04:32,850 --> 00:04:36,570
very sophisticated control and the right

122
00:04:34,560 --> 00:04:39,390
as you can see it's it's a temper proof

123
00:04:36,570 --> 00:04:43,070
seal on the product and that's why we

124
00:04:39,390 --> 00:04:46,469
have those those heels on on products

125
00:04:43,070 --> 00:04:49,260
I'd referenced having a career in

126
00:04:46,470 --> 00:04:52,890
electronics and started this many many

127
00:04:49,260 --> 00:04:54,990
years ago and there's a couple of ICS

128
00:04:52,890 --> 00:04:56,520
integrated circuits and have a look at

129
00:04:54,990 --> 00:04:59,070
the four digit codes on there

130
00:04:56,520 --> 00:05:01,590
those are date codes that's a two digit

131
00:04:59,070 --> 00:05:03,180
year code and a two-digit month code we

132
00:05:01,590 --> 00:05:05,609
look back the oldest one I've got there

133
00:05:03,180 --> 00:05:08,190
I think is 1975 that's from a Texas

134
00:05:05,610 --> 00:05:10,230
Instruments calculator and there's some

135
00:05:08,190 --> 00:05:13,410
slightly more modern chips on there but

136
00:05:10,230 --> 00:05:15,420
as far back as 1975 and further beyond

137
00:05:13,410 --> 00:05:17,130
that people had realized that they need

138
00:05:15,420 --> 00:05:20,760
to be understanding their supply chain

139
00:05:17,130 --> 00:05:22,940
right so the consumer electronics guys

140
00:05:20,760 --> 00:05:25,710
figured this out way back when

141
00:05:22,940 --> 00:05:27,990
so they dates them that they batch them

142
00:05:25,710 --> 00:05:29,880
to all components coming in to their

143
00:05:27,990 --> 00:05:31,200
supply chain and then what you do is you

144
00:05:29,880 --> 00:05:33,990
can imagine you build up a bill of

145
00:05:31,200 --> 00:05:36,180
material sitting on that so that anytime

146
00:05:33,990 --> 00:05:38,640
a piece of electronics is produced they

147
00:05:36,180 --> 00:05:41,730
can actually invent rise and catalogue

148
00:05:38,640 --> 00:05:43,830
that entire component they know where

149
00:05:41,730 --> 00:05:45,930
the RAM and that device came from they

150
00:05:43,830 --> 00:05:47,400
know where the memory and they can get a

151
00:05:45,930 --> 00:05:50,660
track of this so they've got a complete

152
00:05:47,400 --> 00:05:54,179
record they can do this at higher

153
00:05:50,660 --> 00:05:55,650
various sub assemblies and so that for a

154
00:05:54,180 --> 00:05:57,360
finished product because like a mobile

155
00:05:55,650 --> 00:05:59,190
phone they can work out all those

156
00:05:57,360 --> 00:06:00,930
individual components and they've all

157
00:05:59,190 --> 00:06:03,210
got tracking systems that track the

158
00:06:00,930 --> 00:06:04,919
materials through their factory so that

159
00:06:03,210 --> 00:06:07,049
means that we good with electronics

160
00:06:04,919 --> 00:06:10,159
front is never going to be a supplier

161
00:06:07,050 --> 00:06:12,750
and problem with with the new cracks

162
00:06:10,160 --> 00:06:15,150
alright and then you know there's news

163
00:06:12,750 --> 00:06:17,760
of this type of thing happening so how

164
00:06:15,150 --> 00:06:20,070
was this potential subversion how did

165
00:06:17,760 --> 00:06:22,050
the the the super micro motherboards

166
00:06:20,070 --> 00:06:24,690
what was the supply chain breach there

167
00:06:22,050 --> 00:06:26,880
that they're going fiddle with the raw

168
00:06:24,690 --> 00:06:28,050
materials they didn't they just

169
00:06:26,880 --> 00:06:30,000
literally walked through the front door

170
00:06:28,050 --> 00:06:33,270
of the factory with a big bag of cash

171
00:06:30,000 --> 00:06:35,220
and said get and change the way you do

172
00:06:33,270 --> 00:06:37,260
things and when that didn't work then

173
00:06:35,220 --> 00:06:40,200
there was you know threats of violence

174
00:06:37,260 --> 00:06:41,248
so even with a beautifully designed

175
00:06:40,200 --> 00:06:44,818
supply chain

176
00:06:41,249 --> 00:06:47,729
something that's very design but you

177
00:06:44,819 --> 00:06:51,329
know secure by design you can you can

178
00:06:47,729 --> 00:06:54,179
subvert that now that's pretty much my

179
00:06:51,329 --> 00:06:56,789
thoughts on that matter if that's the

180
00:06:54,179 --> 00:06:58,229
level of attack that we can you know

181
00:06:56,789 --> 00:07:00,929
that people can perpetrate and

182
00:06:58,229 --> 00:07:02,998
apparently not be undetected for a

183
00:07:00,929 --> 00:07:06,768
significant period of time and that's

184
00:07:02,999 --> 00:07:10,979
truly that's a truly terrifying thought

185
00:07:06,769 --> 00:07:13,379
so this is the Scranton parada moment of

186
00:07:10,979 --> 00:07:14,699
the thing we we go and make fun of other

187
00:07:13,379 --> 00:07:17,219
problems that people have had in the

188
00:07:14,699 --> 00:07:19,549
supply chains and in this stage I don't

189
00:07:17,219 --> 00:07:21,748
need to talk too much about this problem

190
00:07:19,549 --> 00:07:23,159
vulnerable components people just

191
00:07:21,749 --> 00:07:26,129
pulling stuff down off the internet

192
00:07:23,159 --> 00:07:27,569
using it as they see fit never patching

193
00:07:26,129 --> 00:07:29,519
it never looking at the vulnerability

194
00:07:27,569 --> 00:07:33,059
reports never knowing what software they

195
00:07:29,519 --> 00:07:35,729
using I could rant about this for past

196
00:07:33,059 --> 00:07:37,559
lunchtime and beyond that's a problem

197
00:07:35,729 --> 00:07:38,609
people are still aren't addressing that

198
00:07:37,559 --> 00:07:40,409
we're going to talk in a moment about

199
00:07:38,610 --> 00:07:44,009
the basic stuff that you need to be

200
00:07:40,409 --> 00:07:45,389
doing and getting right these are the

201
00:07:44,009 --> 00:07:47,759
weird things that happen right so we've

202
00:07:45,389 --> 00:07:50,759
got type escorting so node package

203
00:07:47,759 --> 00:07:52,529
manager that's an example of how easy it

204
00:07:50,759 --> 00:07:54,869
was for somebody to go and subvert that

205
00:07:52,529 --> 00:07:56,549
supply chain right the example here is

206
00:07:54,869 --> 00:07:59,459
there's a package cool what we call

207
00:07:56,549 --> 00:08:00,779
cross in with a hyphen in it and what

208
00:07:59,459 --> 00:08:03,419
they did is they just tracked something

209
00:08:00,779 --> 00:08:05,369
into a node package whatever the node

210
00:08:03,419 --> 00:08:07,198
thing is called I call cross send

211
00:08:05,369 --> 00:08:09,599
without the hyphen in it so what is an

212
00:08:07,199 --> 00:08:10,919
unsuspecting developer do they want to

213
00:08:09,599 --> 00:08:13,679
use this package that there's something

214
00:08:10,919 --> 00:08:16,349
magic they're going to type it in the

215
00:08:13,679 --> 00:08:18,299
node tool finds listing first they pull

216
00:08:16,349 --> 00:08:21,599
this thing in and by magic of some

217
00:08:18,299 --> 00:08:23,698
install scripts in node they run a post

218
00:08:21,599 --> 00:08:25,169
install script which then goes in leaks

219
00:08:23,699 --> 00:08:28,019
the entire environment variable and

220
00:08:25,169 --> 00:08:29,519
uploads that to the interweb and that's

221
00:08:28,019 --> 00:08:31,529
how easy that was to do net wind

222
00:08:29,519 --> 00:08:33,240
undetected for quite a significant

223
00:08:31,529 --> 00:08:34,919
amount of time before somebody actually

224
00:08:33,240 --> 00:08:36,750
had a good look into what those package

225
00:08:34,919 --> 00:08:38,490
managers are doing so what's the problem

226
00:08:36,750 --> 00:08:40,708
here we trusting something that we find

227
00:08:38,490 --> 00:08:42,360
on the Internet we wanting a convenience

228
00:08:40,708 --> 00:08:45,959
to be able to do something quickly and

229
00:08:42,360 --> 00:08:49,350
easily we use the phenomenal tools that

230
00:08:45,959 --> 00:08:51,508
we have the IDE s to just go hunt and

231
00:08:49,350 --> 00:08:53,639
find something and without thinking we

232
00:08:51,509 --> 00:08:54,690
go and use that and we open ourselves up

233
00:08:53,639 --> 00:08:57,629
to

234
00:08:54,690 --> 00:08:58,050
and all sorts of problems this is a real

235
00:08:57,629 --> 00:09:01,620
goody

236
00:08:58,050 --> 00:09:05,008
this one the CC Keener attack right so

237
00:09:01,620 --> 00:09:07,560
what happened here is CC cleaner windows

238
00:09:05,009 --> 00:09:09,810
utility thing very widely used I've used

239
00:09:07,560 --> 00:09:10,709
it in the past kind of everybody when

240
00:09:09,810 --> 00:09:12,689
they want to go and clean up their

241
00:09:10,709 --> 00:09:14,399
registry goes and downloads the thing

242
00:09:12,689 --> 00:09:16,620
from a trusted site you can always get

243
00:09:14,399 --> 00:09:19,649
to the original site you can find out

244
00:09:16,620 --> 00:09:21,750
that it's signed and certified by by the

245
00:09:19,649 --> 00:09:25,459
bender now the problem was there was an

246
00:09:21,750 --> 00:09:29,660
acquisition and an attacker found a

247
00:09:25,459 --> 00:09:32,008
access to one of the previous the

248
00:09:29,660 --> 00:09:34,319
previous companies machines found

249
00:09:32,009 --> 00:09:37,199
developer credentials got access to that

250
00:09:34,319 --> 00:09:39,449
machine from there they pivoted to the

251
00:09:37,199 --> 00:09:40,949
internal build network that compromised

252
00:09:39,449 --> 00:09:45,180
the build servers with a three-stage

253
00:09:40,949 --> 00:09:48,628
process and they managed to embed

254
00:09:45,180 --> 00:09:50,699
malware into the signed image alright so

255
00:09:48,629 --> 00:09:52,470
as a user you would go to encode at the

256
00:09:50,699 --> 00:09:54,540
website you would get the official image

257
00:09:52,470 --> 00:09:57,329
it was signed but that would be

258
00:09:54,540 --> 00:10:02,370
corrupted with Melvin and affected 2.7

259
00:09:57,329 --> 00:10:04,709
million users so yeah again that raises

260
00:10:02,370 --> 00:10:06,540
questions of what do you trust and the

261
00:10:04,709 --> 00:10:08,399
problem is we can look at this little

262
00:10:06,540 --> 00:10:10,529
problem in detail is you know beware of

263
00:10:08,399 --> 00:10:14,360
of trusting and signing something that

264
00:10:10,529 --> 00:10:14,360
you you can't you shouldn't be trusting

265
00:10:14,389 --> 00:10:20,220
talking you trust trust but verify now

266
00:10:17,339 --> 00:10:24,240
these are some practical things that

267
00:10:20,220 --> 00:10:26,220
I've seen in the wild you put security

268
00:10:24,240 --> 00:10:29,459
controls in show pipeline and developers

269
00:10:26,220 --> 00:10:31,350
start working with this pipeline and you

270
00:10:29,459 --> 00:10:32,880
see your security scans running and then

271
00:10:31,350 --> 00:10:34,829
after a while you suddenly think the

272
00:10:32,880 --> 00:10:36,120
scans are gone really quiet they don't

273
00:10:34,829 --> 00:10:37,949
realize that what your developers have

274
00:10:36,120 --> 00:10:40,019
done is they've got into their build

275
00:10:37,949 --> 00:10:41,880
pipeline and they've gone and optimized

276
00:10:40,019 --> 00:10:44,130
some of their security testing out at

277
00:10:41,880 --> 00:10:46,230
that part line the other things that

278
00:10:44,130 --> 00:10:48,509
they'll do is they'll figure write this

279
00:10:46,230 --> 00:10:51,240
testing is taking too long so J we will

280
00:10:48,509 --> 00:10:54,180
just test something else we'll just scan

281
00:10:51,240 --> 00:10:56,519
some test code so validate that what

282
00:10:54,180 --> 00:10:58,769
you're scanning is actually matching

283
00:10:56,519 --> 00:11:02,160
what you deploying to production and

284
00:10:58,769 --> 00:11:04,259
then also validate that the candidate

285
00:11:02,160 --> 00:11:05,759
image that you're scanning is actually

286
00:11:04,259 --> 00:11:07,079
representative at the app so if it's a

287
00:11:05,759 --> 00:11:07,720
web app make sure there's some kind of

288
00:11:07,079 --> 00:11:11,349
way

289
00:11:07,720 --> 00:11:12,399
element to it what else are people going

290
00:11:11,350 --> 00:11:13,930
to do they're going to go and build

291
00:11:12,399 --> 00:11:15,670
shadow infrastructure who's kind of

292
00:11:13,930 --> 00:11:18,459
bypassed so if you're going to control

293
00:11:15,670 --> 00:11:19,899
and regiment and you know police that

294
00:11:18,459 --> 00:11:23,018
supply chain what they'll do is they'll

295
00:11:19,899 --> 00:11:25,240
build a shadow bill chain that they own

296
00:11:23,019 --> 00:11:27,009
devising and then also work out how to

297
00:11:25,240 --> 00:11:29,829
go and snoop around and find when people

298
00:11:27,009 --> 00:11:31,779
are starting to starting the early

299
00:11:29,829 --> 00:11:34,599
stages of development so that you can

300
00:11:31,779 --> 00:11:38,410
get in you know before they before they

301
00:11:34,600 --> 00:11:41,529
get too creative with things and build

302
00:11:38,410 --> 00:11:43,420
pipelines then now and beyond so just

303
00:11:41,529 --> 00:11:45,279
going back talking back to my Hardware

304
00:11:43,420 --> 00:11:47,199
days so does anybody recognize these

305
00:11:45,279 --> 00:11:50,199
products has anybody used in cipher

306
00:11:47,199 --> 00:11:52,269
hardware security modules aren't very

307
00:11:50,199 --> 00:11:55,359
good I know there's somebody from tellus

308
00:11:52,269 --> 00:11:57,610
here today as well so these are the

309
00:11:55,360 --> 00:12:01,290
security modules that most the banks use

310
00:11:57,610 --> 00:12:05,230
to do key management to do public key

311
00:12:01,290 --> 00:12:07,480
acceleration they are the root crust

312
00:12:05,230 --> 00:12:09,970
source these things have the keys the

313
00:12:07,480 --> 00:12:13,870
crown jewels are embedded in in these

314
00:12:09,970 --> 00:12:15,670
devices now the the upgrade process that

315
00:12:13,870 --> 00:12:17,559
supply chain of that firmware that goes

316
00:12:15,670 --> 00:12:21,670
into those devices is them one of the

317
00:12:17,559 --> 00:12:23,980
most regimented and strict update

318
00:12:21,670 --> 00:12:26,649
processes that I've known so you know

319
00:12:23,980 --> 00:12:29,139
full details it kind of involves a team

320
00:12:26,649 --> 00:12:30,819
of eight or nine people they all have

321
00:12:29,139 --> 00:12:33,040
individual smart cards there's a

322
00:12:30,819 --> 00:12:34,809
ceremony and a process that goes on it

323
00:12:33,040 --> 00:12:37,000
is literally impossible for a rogue

324
00:12:34,809 --> 00:12:39,250
actor to come into that and subvert that

325
00:12:37,000 --> 00:12:41,740
filing process and that firmware upgrade

326
00:12:39,250 --> 00:12:43,930
process all right if in the instance of

327
00:12:41,740 --> 00:12:46,120
where credentials were lost island

328
00:12:43,930 --> 00:12:47,680
they're released slipping and not eating

329
00:12:46,120 --> 00:12:49,600
for somebody eating at the dog ate the

330
00:12:47,680 --> 00:12:51,219
smart card right so then they have to go

331
00:12:49,600 --> 00:12:53,980
through a whole ceremony to replace that

332
00:12:51,220 --> 00:12:57,189
so that's how strict that supply chain

333
00:12:53,980 --> 00:12:58,959
is right because of the potential impact

334
00:12:57,189 --> 00:13:00,550
of that supply chain being compromised

335
00:12:58,959 --> 00:13:03,670
right if somebody could put rogue

336
00:13:00,550 --> 00:13:06,990
firmware or you know Road payload onto

337
00:13:03,670 --> 00:13:09,729
that device and that is catastrophic

338
00:13:06,990 --> 00:13:13,689
it's not very DevOps friendly though

339
00:13:09,730 --> 00:13:15,240
that process so let's have a look what

340
00:13:13,689 --> 00:13:17,110
it's probably going to be the worst

341
00:13:15,240 --> 00:13:20,709
diagram that you're going to see at this

342
00:13:17,110 --> 00:13:21,279
conference hopefully a pipeline of sorts

343
00:13:20,709 --> 00:13:23,138
right

344
00:13:21,279 --> 00:13:25,329
got some stuff that we're pulling some

345
00:13:23,139 --> 00:13:27,699
source code from the internet we've got

346
00:13:25,329 --> 00:13:29,050
some sauce paired we've written we built

347
00:13:27,699 --> 00:13:31,899
some software we're doing a bit of

348
00:13:29,050 --> 00:13:33,699
security testing we're calling some all

349
00:13:31,899 --> 00:13:35,290
components of the Internet we've got

350
00:13:33,699 --> 00:13:38,709
maybe a change advisory board and we're

351
00:13:35,290 --> 00:13:40,689
pushing to production well that's fairly

352
00:13:38,709 --> 00:13:43,989
representative of a of a delivery

353
00:13:40,689 --> 00:13:46,809
pipeline now as we need to do things

354
00:13:43,990 --> 00:13:49,059
faster and there's an urgency to release

355
00:13:46,809 --> 00:13:50,259
more frequently what are we going to do

356
00:13:49,059 --> 00:13:52,509
we're going to do that we're going to

357
00:13:50,259 --> 00:13:54,459
take out all the controls that we we

358
00:13:52,509 --> 00:13:55,870
have put in place on that path line and

359
00:13:54,459 --> 00:13:59,290
we're going to start tuning those down

360
00:13:55,870 --> 00:14:02,019
and we're going to open ourselves up and

361
00:13:59,290 --> 00:14:03,939
I said this is a potential nightmare is

362
00:14:02,019 --> 00:14:05,430
we're going to just improve that

363
00:14:03,939 --> 00:14:08,529
pipeline of being able to deliver

364
00:14:05,430 --> 00:14:10,959
unknown quantities from the internet in

365
00:14:08,529 --> 00:14:12,999
source and binary form to our production

366
00:14:10,959 --> 00:14:15,339
instances that's what's going to happen

367
00:14:12,999 --> 00:14:19,930
now if you're a security person

368
00:14:15,339 --> 00:14:22,540
armed with this guy sorry don't forget

369
00:14:19,930 --> 00:14:25,120
to mention there's four references to

370
00:14:22,540 --> 00:14:27,309
films to horror movies in list if you

371
00:14:25,120 --> 00:14:29,250
can get all four please tweet me you'll

372
00:14:27,309 --> 00:14:31,839
get you've probably got the first three

373
00:14:29,250 --> 00:14:33,309
I'll be impressed if somebody gets the

374
00:14:31,839 --> 00:14:36,759
fourth one you have to wait to the end

375
00:14:33,309 --> 00:14:39,579
for that so supply chain basics so this

376
00:14:36,759 --> 00:14:41,259
is I presented exactly these same slides

377
00:14:39,579 --> 00:14:43,000
last year and I think at the time I said

378
00:14:41,259 --> 00:14:44,949
this is what you should be doing this as

379
00:14:43,000 --> 00:14:48,790
aspirational I'm prepared to save you

380
00:14:44,949 --> 00:14:51,550
not doing this now you're negligent if

381
00:14:48,790 --> 00:14:53,259
have a policy fopen source use if you

382
00:14:51,550 --> 00:14:55,300
don't have a policy your development

383
00:14:53,259 --> 00:14:56,529
teams are gonna are going to just think

384
00:14:55,300 --> 00:14:59,439
that they're free to use whatever they

385
00:14:56,529 --> 00:15:01,480
want have a policy be you know pragmatic

386
00:14:59,439 --> 00:15:03,660
about that realize that developers need

387
00:15:01,480 --> 00:15:07,290
open source components to be competitive

388
00:15:03,660 --> 00:15:10,059
but they've got to understand the risk

389
00:15:07,290 --> 00:15:11,949
provides some recommended architectures

390
00:15:10,059 --> 00:15:14,589
some recommended components things you

391
00:15:11,949 --> 00:15:16,120
know and can debt and can test and then

392
00:15:14,589 --> 00:15:18,160
make sure that your security team with

393
00:15:16,120 --> 00:15:20,850
whatever tooling they using know how to

394
00:15:18,160 --> 00:15:22,959
work with these open source components

395
00:15:20,850 --> 00:15:24,519
right if you don't have some kind of

396
00:15:22,959 --> 00:15:26,170
policy if you don't have this in place

397
00:15:24,519 --> 00:15:27,999
then people are going to just do

398
00:15:26,170 --> 00:15:29,949
whatever they they need to do and if you

399
00:15:27,999 --> 00:15:32,029
try and stop them doing that and they'll

400
00:15:29,949 --> 00:15:33,839
find ways to work around you

401
00:15:32,029 --> 00:15:36,299
then the other thing is to use

402
00:15:33,839 --> 00:15:37,739
technologies and there's sona topper

403
00:15:36,299 --> 00:15:41,160
downstairs right these excellent

404
00:15:37,739 --> 00:15:44,519
solutions for managing your repos for

405
00:15:41,160 --> 00:15:46,439
scanning and assessing your repos get a

406
00:15:44,519 --> 00:15:49,290
repository server and they get local

407
00:15:46,439 --> 00:15:51,089
cached instances on that get a blacklist

408
00:15:49,290 --> 00:15:52,498
of known bad components getting it an

409
00:15:51,089 --> 00:15:56,389
inventory of what components you're

410
00:15:52,499 --> 00:15:58,679
using when you find struts to whatever

411
00:15:56,389 --> 00:16:01,829
blacklist that get get that out of your

412
00:15:58,679 --> 00:16:03,238
organization whitelist good components

413
00:16:01,829 --> 00:16:07,799
ones that you approve that you would

414
00:16:03,239 --> 00:16:09,660
recommend to use be mindful and detect

415
00:16:07,799 --> 00:16:11,999
new components that come into your

416
00:16:09,660 --> 00:16:13,980
environment but if you don't know

417
00:16:11,999 --> 00:16:16,319
something have a way of dealing with

418
00:16:13,980 --> 00:16:18,929
that right until you can assess that

419
00:16:16,319 --> 00:16:20,699
maybe you quarantine it but but get on

420
00:16:18,929 --> 00:16:23,009
the case don't wait until something it

421
00:16:20,699 --> 00:16:25,290
gets breached before you go decide how

422
00:16:23,009 --> 00:16:27,359
to deal with it and then maybe you

423
00:16:25,290 --> 00:16:30,449
disable access you know in their case of

424
00:16:27,359 --> 00:16:33,089
that node example the fact that it's as

425
00:16:30,449 --> 00:16:35,339
easy as it is to do that and that's that

426
00:16:33,089 --> 00:16:37,889
to me is pretty pretty concerning so

427
00:16:35,339 --> 00:16:39,720
maybe depending on you know what your

428
00:16:37,889 --> 00:16:44,699
environment is maybe you do have to

429
00:16:39,720 --> 00:16:48,480
disable public access right the build

430
00:16:44,699 --> 00:16:50,309
pipeline itself now you know we we

431
00:16:48,480 --> 00:16:51,899
starting to crack the application

432
00:16:50,309 --> 00:16:53,790
security problem the application level

433
00:16:51,899 --> 00:16:57,839
the people are starting to learn hard to

434
00:16:53,790 --> 00:16:59,579
develop secure code and we pushing

435
00:16:57,839 --> 00:17:01,410
software into production more and more

436
00:16:59,579 --> 00:17:04,559
frequently and the one place that we're

437
00:17:01,410 --> 00:17:07,470
doing that is your full pipeline so for

438
00:17:04,559 --> 00:17:09,299
an attacker what the most high value

439
00:17:07,470 --> 00:17:11,970
pointed to attack and that's obliging

440
00:17:09,299 --> 00:17:16,589
right it's the it's the build path line

441
00:17:11,970 --> 00:17:21,029
itself all right now this is also a good

442
00:17:16,589 --> 00:17:23,698
one this is Jenkins that had a CD kind

443
00:17:21,029 --> 00:17:26,819
of some API thing that cost request

444
00:17:23,699 --> 00:17:29,720
forgery and what people were able to do

445
00:17:26,819 --> 00:17:35,779
is then actually to deploy on mass a

446
00:17:29,720 --> 00:17:38,279
Bitcoin miner and a rat into Jenkins and

447
00:17:35,779 --> 00:17:39,990
actually managed to mine three million

448
00:17:38,279 --> 00:17:43,020
dollars of

449
00:17:39,990 --> 00:17:44,280
value from that from that mind so that's

450
00:17:43,020 --> 00:17:46,320
that's that's a thing that was done

451
00:17:44,280 --> 00:17:49,860
quite easily obviously in that case it's

452
00:17:46,320 --> 00:17:51,659
a somewhat benign attack that was just

453
00:17:49,860 --> 00:17:53,010
doing something that imagine what they

454
00:17:51,660 --> 00:17:54,900
could have done to subvert the actual

455
00:17:53,010 --> 00:17:56,670
delivery of software on that right they

456
00:17:54,900 --> 00:18:00,059
had that level of access to that

457
00:17:56,670 --> 00:18:01,830
pipeline so a couple of obvious things

458
00:18:00,059 --> 00:18:03,690
that you should do in the the better the

459
00:18:01,830 --> 00:18:05,490
basic one here should be treat your part

460
00:18:03,690 --> 00:18:07,559
liners perhaps more critical in your

461
00:18:05,490 --> 00:18:10,340
production infrastructure that would be

462
00:18:07,559 --> 00:18:12,660
the summarize that slide in one line

463
00:18:10,340 --> 00:18:14,428
harden the host obviously patched them

464
00:18:12,660 --> 00:18:17,010
in that case that was in Jenkins were

465
00:18:14,429 --> 00:18:18,600
aware of this really early on and there

466
00:18:17,010 --> 00:18:20,160
were advisories about how severe this

467
00:18:18,600 --> 00:18:22,139
problem was but of course people don't

468
00:18:20,160 --> 00:18:24,840
go patch they build it's just a build

469
00:18:22,140 --> 00:18:27,000
machine right you know lock down those

470
00:18:24,840 --> 00:18:28,740
tools Jenkins I'm not picking on Jenkins

471
00:18:27,000 --> 00:18:30,240
there's it just happens to be the you

472
00:18:28,740 --> 00:18:32,940
know it's seventy five percent of the

473
00:18:30,240 --> 00:18:34,679
market it's it kind of wide open by

474
00:18:32,940 --> 00:18:37,920
default wide securities is pretty much

475
00:18:34,679 --> 00:18:39,809
disabled your config management tools

476
00:18:37,920 --> 00:18:41,670
and you know these things that we're

477
00:18:39,809 --> 00:18:44,129
going to have pretty key is vital

478
00:18:41,670 --> 00:18:45,330
essentials embedded secrets in them near

479
00:18:44,130 --> 00:18:47,280
your answerable scripts they probably

480
00:18:45,330 --> 00:18:49,500
got root passwords to things make sure

481
00:18:47,280 --> 00:18:52,500
you can you can get access to those

482
00:18:49,500 --> 00:18:55,110
things and then your application secrets

483
00:18:52,500 --> 00:18:57,080
credentials and keys make sure that

484
00:18:55,110 --> 00:19:00,600
you're controlling and protecting those

485
00:18:57,080 --> 00:19:02,189
as you automate more and more things in

486
00:19:00,600 --> 00:19:04,139
the pipeline you have to distribute

487
00:19:02,190 --> 00:19:09,870
those secrets more and more widely

488
00:19:04,140 --> 00:19:12,450
across that part line because consider

489
00:19:09,870 --> 00:19:14,729
who can access your repos right so could

490
00:19:12,450 --> 00:19:17,010
somebody go into your binary repo and

491
00:19:14,730 --> 00:19:19,020
swap out a component could somebody go

492
00:19:17,010 --> 00:19:20,129
into you and look at get in a second

493
00:19:19,020 --> 00:19:22,410
could somebody go into your git

494
00:19:20,130 --> 00:19:24,150
repository and go and change your

495
00:19:22,410 --> 00:19:28,410
commits do you know who's got access to

496
00:19:24,150 --> 00:19:31,110
your repos and then obviously the access

497
00:19:28,410 --> 00:19:32,460
controls to the pipeline itself the

498
00:19:31,110 --> 00:19:34,500
comments are made about treated as

499
00:19:32,460 --> 00:19:36,000
production infrastructure and then if

500
00:19:34,500 --> 00:19:37,559
you worried about people coming in and

501
00:19:36,000 --> 00:19:41,490
fiddling around with the pipeline and

502
00:19:37,559 --> 00:19:43,020
changing things building ephemeral got

503
00:19:41,490 --> 00:19:46,110
that one right ephemeral hardened

504
00:19:43,020 --> 00:19:47,940
pipeline build part line that you spin

505
00:19:46,110 --> 00:19:50,459
up build something and then you blow the

506
00:19:47,940 --> 00:19:52,020
pipeline away so there's no chance of a

507
00:19:50,460 --> 00:19:53,870
malicious actor coming in and changing

508
00:19:52,020 --> 00:19:56,120
their path line because what they

509
00:19:53,870 --> 00:19:58,040
anymore infrastructure as code you just

510
00:19:56,120 --> 00:20:00,469
build up the pipeline it's got all the

511
00:19:58,040 --> 00:20:02,840
security to embedded into it embedded

512
00:20:00,470 --> 00:20:08,360
into it and you just run a build and you

513
00:20:02,840 --> 00:20:12,250
blow the pipeline away right quite a bit

514
00:20:08,360 --> 00:20:15,020
of information on in toto now in toto is

515
00:20:12,250 --> 00:20:17,240
so its origins are the update framework

516
00:20:15,020 --> 00:20:19,010
this is a consortium project something

517
00:20:17,240 --> 00:20:21,590
mainly by a lot of the the little

518
00:20:19,010 --> 00:20:23,720
extenders and the idea was that just as

519
00:20:21,590 --> 00:20:25,990
you shouldn't write your own crypto you

520
00:20:23,720 --> 00:20:28,640
shouldn't write your own updater process

521
00:20:25,990 --> 00:20:30,770
right it's too complex of things tool

522
00:20:28,640 --> 00:20:33,410
you know one person to get right first

523
00:20:30,770 --> 00:20:34,970
time so build on a framework these

524
00:20:33,410 --> 00:20:37,250
people have dealt with many package

525
00:20:34,970 --> 00:20:39,200
management and package updating for a

526
00:20:37,250 --> 00:20:41,120
long time so it's a framework set of

527
00:20:39,200 --> 00:20:43,790
guidelines it's meant to be designed to

528
00:20:41,120 --> 00:20:46,699
be portable and at God's against the

529
00:20:43,790 --> 00:20:48,379
typical sort of scenarios replay an

530
00:20:46,700 --> 00:20:51,350
attacker who replays the same update

531
00:20:48,380 --> 00:20:53,420
file compromised versions things that

532
00:20:51,350 --> 00:20:55,280
are unsigned web signatures that don't

533
00:20:53,420 --> 00:20:58,330
match and it's a framework to deal with

534
00:20:55,280 --> 00:21:00,710
all of this if you sort of docker savvy

535
00:20:58,330 --> 00:21:03,020
notary if you've heard of notary notary

536
00:21:00,710 --> 00:21:06,559
is the docker implementation of the

537
00:21:03,020 --> 00:21:08,629
update framework so what is in toto so I

538
00:21:06,559 --> 00:21:10,639
really like that a problem statement

539
00:21:08,630 --> 00:21:13,550
they of what is the motivation why did

540
00:21:10,640 --> 00:21:16,220
Santiago come up with within toto and it

541
00:21:13,550 --> 00:21:17,540
was the fact that you putting too much

542
00:21:16,220 --> 00:21:20,059
trust in something that you shouldn't

543
00:21:17,540 --> 00:21:21,470
trust you are you're going at the very

544
00:21:20,059 --> 00:21:23,690
last point in your slapping on a

545
00:21:21,470 --> 00:21:25,400
signature and saying that's fine right

546
00:21:23,690 --> 00:21:26,840
well you haven't thought of your chain

547
00:21:25,400 --> 00:21:28,370
of cuz it's a chain of custody problem

548
00:21:26,840 --> 00:21:30,860
you haven't stepped through that now

549
00:21:28,370 --> 00:21:33,290
what in toto does is it allows you to

550
00:21:30,860 --> 00:21:35,570
specify what your recipe is for building

551
00:21:33,290 --> 00:21:38,870
a piece of software to have everything

552
00:21:35,570 --> 00:21:42,050
that acts along that in that recipe to

553
00:21:38,870 --> 00:21:43,428
have them sign that package so when you

554
00:21:42,050 --> 00:21:45,620
get a final release image you can

555
00:21:43,429 --> 00:21:47,960
formally mathematically verify that it's

556
00:21:45,620 --> 00:21:52,610
been constructed correctly the word

557
00:21:47,960 --> 00:21:55,250
veracity the goals to just end my turn

558
00:21:52,610 --> 00:21:58,010
into integrity authentication and

559
00:21:55,250 --> 00:22:00,410
auditability into the supply chain we've

560
00:21:58,010 --> 00:22:02,929
got we're going to talk about the three

561
00:22:00,410 --> 00:22:05,480
different actors in a second so the

562
00:22:02,929 --> 00:22:06,710
basic terminology what is in total it's

563
00:22:05,480 --> 00:22:11,150
a software framework the

564
00:22:06,710 --> 00:22:13,490
back instead of Python code it takes

565
00:22:11,150 --> 00:22:15,830
materials these are source files that

566
00:22:13,490 --> 00:22:18,500
are some manipulation produces a product

567
00:22:15,830 --> 00:22:22,460
a product might be a package and then

568
00:22:18,500 --> 00:22:24,470
what happens is an act a an actuary

569
00:22:22,460 --> 00:22:25,970
somebody acting on this will go and sign

570
00:22:24,470 --> 00:22:27,530
that image so if you're building a piece

571
00:22:25,970 --> 00:22:29,660
of code you will sign it you'll get

572
00:22:27,530 --> 00:22:31,430
what's called their link that's a little

573
00:22:29,660 --> 00:22:33,050
bit of metadata with a signature and

574
00:22:31,430 --> 00:22:34,580
then you can do what you want we'll have

575
00:22:33,050 --> 00:22:37,190
a look where you can go and put those

576
00:22:34,580 --> 00:22:38,870
those links and then the verification

577
00:22:37,190 --> 00:22:41,360
stage is the final step that just is

578
00:22:38,870 --> 00:22:46,550
this thing that we built does it match

579
00:22:41,360 --> 00:22:48,139
the recipe so we talked about the actors

580
00:22:46,550 --> 00:22:51,290
we've got what's called a project owner

581
00:22:48,140 --> 00:22:53,600
that's the person who is in god mode on

582
00:22:51,290 --> 00:22:55,340
this on this project and besides this is

583
00:22:53,600 --> 00:22:58,100
how you build it you need to do static

584
00:22:55,340 --> 00:23:00,790
code analysis you need to do a code

585
00:22:58,100 --> 00:23:04,010
inspection you need to verify that your

586
00:23:00,790 --> 00:23:05,810
your git commit saw our sound so you

587
00:23:04,010 --> 00:23:07,100
have a product owner who defines the

588
00:23:05,810 --> 00:23:09,260
kind of recipe for building this

589
00:23:07,100 --> 00:23:10,909
functionaries or any of those individual

590
00:23:09,260 --> 00:23:13,280
points where something gets acted upon

591
00:23:10,910 --> 00:23:16,550
so if you do a build stat point if you

592
00:23:13,280 --> 00:23:18,410
do a build of all that that stage is is

593
00:23:16,550 --> 00:23:20,149
where you're reading a build and then

594
00:23:18,410 --> 00:23:26,090
the client is where you you're testing

595
00:23:20,150 --> 00:23:27,830
that you're testing the validity not too

596
00:23:26,090 --> 00:23:30,520
much detail on this this is just how you

597
00:23:27,830 --> 00:23:33,770
define I mean it's it's tons of the mo

598
00:23:30,520 --> 00:23:35,210
how you how you specify water the step

599
00:23:33,770 --> 00:23:37,100
is you can see there's a little bit of a

600
00:23:35,210 --> 00:23:38,750
recipe there it says at this point you

601
00:23:37,100 --> 00:23:41,389
go and do a gift line and you do some

602
00:23:38,750 --> 00:23:43,790
stuff all right so you can build out

603
00:23:41,390 --> 00:23:44,990
what that recipe looks like the inspect

604
00:23:43,790 --> 00:23:47,420
stage is where you actually go in

605
00:23:44,990 --> 00:23:49,010
validate and verify that and again you

606
00:23:47,420 --> 00:23:51,050
would expect to have with certain

607
00:23:49,010 --> 00:23:52,820
materials would expect to get certain

608
00:23:51,050 --> 00:23:55,040
products right and what this

609
00:23:52,820 --> 00:23:58,340
verification stage does inspection stage

610
00:23:55,040 --> 00:23:59,840
it gives you a yes or no and that's all

611
00:23:58,340 --> 00:24:03,449
it does

612
00:23:59,840 --> 00:24:05,340
now the links are the actual data that's

613
00:24:03,450 --> 00:24:08,100
where you're going to sign the artifacts

614
00:24:05,340 --> 00:24:10,109
again as you'd expect so what they are

615
00:24:08,100 --> 00:24:13,918
and with some check sums against them

616
00:24:10,109 --> 00:24:16,109
and then as a digital signature right

617
00:24:13,919 --> 00:24:18,090
and in probably today's least impressive

618
00:24:16,109 --> 00:24:20,220
demo that's what it looked like when it

619
00:24:18,090 --> 00:24:22,499
runs so that's a build step it's a

620
00:24:20,220 --> 00:24:24,749
manual that begun onto the nc800 website

621
00:24:22,499 --> 00:24:26,070
you can just walk through this that's

622
00:24:24,749 --> 00:24:28,649
when the software passes all the

623
00:24:26,070 --> 00:24:30,689
verification right so you do all the

624
00:24:28,649 --> 00:24:32,309
steps and then what I what the demo does

625
00:24:30,690 --> 00:24:34,859
is it shows you somewhere along there

626
00:24:32,309 --> 00:24:36,149
you just inject something unknown into

627
00:24:34,859 --> 00:24:37,918
one of the parts and the source files

628
00:24:36,149 --> 00:24:40,529
along the way sort of an out-of-band

629
00:24:37,919 --> 00:24:42,869
process like an attack and then you

630
00:24:40,529 --> 00:24:44,999
verify and what will happen is you can

631
00:24:42,869 --> 00:24:46,949
see the Diagnostics there particular

632
00:24:44,999 --> 00:24:47,450
that that particular file was tampered

633
00:24:46,950 --> 00:24:54,499
with

634
00:24:47,450 --> 00:24:57,179
right so it is that simple the demo is a

635
00:24:54,499 --> 00:24:59,849
manual process here's an example of

636
00:24:57,179 --> 00:25:02,279
something in a Jenkins build stage where

637
00:24:59,849 --> 00:25:04,769
that the link which is the assigned

638
00:25:02,279 --> 00:25:07,169
metadata that's being injected and being

639
00:25:04,769 --> 00:25:08,909
written into reddits database so the

640
00:25:07,169 --> 00:25:11,070
idea is that you could put it in Toto

641
00:25:08,909 --> 00:25:12,509
into your pipeline and then there's

642
00:25:11,070 --> 00:25:14,428
software progresses through the pipeline

643
00:25:12,509 --> 00:25:17,009
you could just stamp each of the stages

644
00:25:14,429 --> 00:25:18,989
with a link that would get pumped into a

645
00:25:17,009 --> 00:25:21,509
database and then at the end you could

646
00:25:18,989 --> 00:25:26,669
go and verify then your signature chain

647
00:25:21,509 --> 00:25:29,359
sequence in your links tallies up it's

648
00:25:26,669 --> 00:25:31,379
one of the better periods of

649
00:25:29,359 --> 00:25:33,359
collaboration that I had this year was

650
00:25:31,379 --> 00:25:37,019
said with control plane and starting to

651
00:25:33,359 --> 00:25:39,019
talk about what people were doing in the

652
00:25:37,019 --> 00:25:41,879
cloud native / container space and

653
00:25:39,019 --> 00:25:44,159
seeing how people were doing things

654
00:25:41,879 --> 00:25:45,928
right by design there were when they

655
00:25:44,159 --> 00:25:48,509
were incorporating they were considering

656
00:25:45,929 --> 00:25:50,419
that their supply chain was and it was

657
00:25:48,509 --> 00:25:53,129
potentially going to be under attack I

658
00:25:50,419 --> 00:25:54,570
was going to do my own slide you kind of

659
00:25:53,129 --> 00:25:56,820
highlighting these problems and then I

660
00:25:54,570 --> 00:26:01,019
thought that part of Andy's just really

661
00:25:56,820 --> 00:26:02,549
nails the problems right - putting point

662
00:26:01,019 --> 00:26:04,619
solutions along their way and their

663
00:26:02,549 --> 00:26:06,658
pipeline on sufficient is you pick any

664
00:26:04,619 --> 00:26:08,428
of those points let's pick an obvious

665
00:26:06,659 --> 00:26:11,249
one right if you trust you'll get repo

666
00:26:08,429 --> 00:26:12,559
as your source of proof I can show you

667
00:26:11,249 --> 00:26:14,330
how to clone

668
00:26:12,559 --> 00:26:16,428
commit and to get alright so unless

669
00:26:14,330 --> 00:26:19,220
you've got some kind of good sign

670
00:26:16,429 --> 00:26:20,809
signing with PKI in place you know you

671
00:26:19,220 --> 00:26:23,570
you're trusting the wrong thing right

672
00:26:20,809 --> 00:26:26,240
upfront reproducible builds great idea

673
00:26:23,570 --> 00:26:27,889
right so if you take software you can

674
00:26:26,240 --> 00:26:30,049
reproduce your entire environment your

675
00:26:27,889 --> 00:26:31,340
tool chain and you can reproduce the

676
00:26:30,049 --> 00:26:34,279
same binary all the time

677
00:26:31,340 --> 00:26:36,230
but if you're getting incorrupt you're

678
00:26:34,279 --> 00:26:38,240
getting bad input into that you

679
00:26:36,230 --> 00:26:40,249
producing the same that output all the

680
00:26:38,240 --> 00:26:42,980
time right so that in its own isn't

681
00:26:40,249 --> 00:26:45,200
sufficient binary signing our friends

682
00:26:42,980 --> 00:26:46,580
it's easy clean and oh this one and if

683
00:26:45,200 --> 00:26:49,940
you sign something and that has already

684
00:26:46,580 --> 00:26:52,129
been submitted in your site your

685
00:26:49,940 --> 00:26:53,929
signatures meaningless and then

686
00:26:52,129 --> 00:26:56,269
verification if you're able to verify

687
00:26:53,929 --> 00:26:58,669
that you've done all these steps but you

688
00:26:56,269 --> 00:27:01,159
you are reliant on the trust of the

689
00:26:58,669 --> 00:27:03,740
proceeding stages so I think that you

690
00:27:01,159 --> 00:27:06,139
know it really nails the problem area so

691
00:27:03,740 --> 00:27:08,600
just putting one piece of technology one

692
00:27:06,139 --> 00:27:10,549
bit pod solution at any point there and

693
00:27:08,600 --> 00:27:14,059
then relying on their solving the

694
00:27:10,549 --> 00:27:18,039
veracity of the entire part line it's

695
00:27:14,059 --> 00:27:21,499
not the way to do it let's talk about

696
00:27:18,039 --> 00:27:24,350
trusting your git repos and Carlos and

697
00:27:21,499 --> 00:27:26,629
here today but so I have to admit that I

698
00:27:24,350 --> 00:27:30,019
wasn't aware quite how simple it is to

699
00:27:26,629 --> 00:27:32,719
have to spoof a git commit it's beyond

700
00:27:30,019 --> 00:27:34,369
trivial to do it and and people just

701
00:27:32,720 --> 00:27:36,200
assumed that Gators some what if

702
00:27:34,369 --> 00:27:37,820
somebody has checked in and they're the

703
00:27:36,200 --> 00:27:39,619
email address it's correct that's the

704
00:27:37,820 --> 00:27:42,049
you can trust their code and the git

705
00:27:39,619 --> 00:27:45,918
repo or it's pretty simple to to subvert

706
00:27:42,049 --> 00:27:47,269
that so use a new sign commits then

707
00:27:45,919 --> 00:27:48,440
you've got another problem of course now

708
00:27:47,269 --> 00:27:49,850
you've got the problem of how do you

709
00:27:48,440 --> 00:27:54,350
manage your where your key

710
00:27:49,850 --> 00:27:55,490
infrastructure the thing that I'm not

711
00:27:54,350 --> 00:27:57,408
going to go through every single point

712
00:27:55,490 --> 00:28:00,740
on the slide the thing that is exciting

713
00:27:57,409 --> 00:28:03,470
about this this is a candidate container

714
00:28:00,740 --> 00:28:05,559
delivery pipeline the thing that I like

715
00:28:03,470 --> 00:28:09,619
about this is that every point and their

716
00:28:05,559 --> 00:28:11,720
security or integrity of produced code

717
00:28:09,619 --> 00:28:13,639
is tight is considered as a very small

718
00:28:11,720 --> 00:28:14,899
citizen they thinking of the stuff up

719
00:28:13,639 --> 00:28:16,908
front it's not bolt on they're not

720
00:28:14,899 --> 00:28:18,469
coming and thinking we've got the

721
00:28:16,909 --> 00:28:20,480
problems with our with our base images

722
00:28:18,470 --> 00:28:22,159
right the base images you've got dhaka

723
00:28:20,480 --> 00:28:24,549
trusted registry you can go and pull it

724
00:28:22,159 --> 00:28:26,380
and known verified formally verified

725
00:28:24,549 --> 00:28:28,570
image of

726
00:28:26,380 --> 00:28:31,030
with hash right you can guarantee that

727
00:28:28,570 --> 00:28:35,590
what you're getting into that this hooks

728
00:28:31,030 --> 00:28:38,230
to be able to do static analysis and to

729
00:28:35,590 --> 00:28:41,080
do image and our analysis vulnerability

730
00:28:38,230 --> 00:28:44,440
scanning the config scanning hooks to be

731
00:28:41,080 --> 00:28:45,610
able to do all of that your deployments

732
00:28:44,440 --> 00:28:47,289
if you're going into Cuban Eddie's

733
00:28:45,610 --> 00:28:50,020
there's the concept of an admission

734
00:28:47,289 --> 00:28:51,220
controller and the idea of admission

735
00:28:50,020 --> 00:28:53,410
control is when you're going to put

736
00:28:51,220 --> 00:28:56,049
something onto a pod there's a hook that

737
00:28:53,410 --> 00:28:58,960
preempts and says but something's about

738
00:28:56,049 --> 00:29:00,639
to happen on your on your pod this is

739
00:28:58,960 --> 00:29:02,620
what's coming in what do you want to do

740
00:29:00,640 --> 00:29:04,270
with that you've got the point there to

741
00:29:02,620 --> 00:29:06,070
be able to reject that right so it's a

742
00:29:04,270 --> 00:29:08,230
it's a gating control in the very

743
00:29:06,070 --> 00:29:10,120
infrastructure but if you've ever tried

744
00:29:08,230 --> 00:29:12,610
to do any kind of gating in a production

745
00:29:10,120 --> 00:29:15,129
process right that's pretty hard to go

746
00:29:12,610 --> 00:29:16,990
retrofit that I think that the exciting

747
00:29:15,130 --> 00:29:18,520
thing to take home for me there's they

748
00:29:16,990 --> 00:29:20,230
thinking about these problems up front

749
00:29:18,520 --> 00:29:22,900
and they're coming up with some pretty

750
00:29:20,230 --> 00:29:25,320
good and pretty portable solutions to

751
00:29:22,900 --> 00:29:25,320
that as well

752
00:29:26,799 --> 00:29:30,400
pipeline metadata right so there's a

753
00:29:28,390 --> 00:29:32,799
whole bunch of your build system is

754
00:29:30,400 --> 00:29:34,570
admitted emitting a load of useful

755
00:29:32,799 --> 00:29:37,600
information along the way right who's

756
00:29:34,570 --> 00:29:39,010
acting on the on your code what

757
00:29:37,600 --> 00:29:41,559
dependencies are they using what

758
00:29:39,010 --> 00:29:43,750
versions you can veracity you connect

759
00:29:41,559 --> 00:29:45,250
you can prove that all your unit tests

760
00:29:43,750 --> 00:29:47,260
or your integration tests are brand

761
00:29:45,250 --> 00:29:50,020
right you could verify that as part of

762
00:29:47,260 --> 00:29:52,929
metadata and and of course your security

763
00:29:50,020 --> 00:29:55,570
data this data is being pumped out of

764
00:29:52,929 --> 00:29:57,700
the all these systems and if you could

765
00:29:55,570 --> 00:29:59,678
collate and collect that data you could

766
00:29:57,700 --> 00:30:01,690
use that as an order to tool or you

767
00:29:59,679 --> 00:30:04,090
could indeed use that as that admission

768
00:30:01,690 --> 00:30:07,270
controller now the way to do that

769
00:30:04,090 --> 00:30:07,780
there's a number of projects in this

770
00:30:07,270 --> 00:30:09,850
space

771
00:30:07,780 --> 00:30:11,799
Google gracias is probably the one that

772
00:30:09,850 --> 00:30:15,100
most people kind of latch on to it's one

773
00:30:11,799 --> 00:30:17,620
that many of the container security

774
00:30:15,100 --> 00:30:19,139
vendors acquire twist lock Blackduck

775
00:30:17,620 --> 00:30:21,428
have all got products that can push

776
00:30:19,140 --> 00:30:24,010
vulnerability information into graph yes

777
00:30:21,429 --> 00:30:26,100
what is graph is to glorify a database

778
00:30:24,010 --> 00:30:29,070
that stores vulnerability information

779
00:30:26,100 --> 00:30:32,139
you can attach metadata to it and

780
00:30:29,070 --> 00:30:35,408
artifacts and it allows you to build up

781
00:30:32,140 --> 00:30:38,500
a data store a lot of vulnerability

782
00:30:35,409 --> 00:30:39,960
information in your pipeline and then

783
00:30:38,500 --> 00:30:44,040
what you can do is you can going to quit

784
00:30:39,960 --> 00:30:46,260
that the metadata to build up a again a

785
00:30:44,040 --> 00:30:49,139
gauging control to get that yes/no

786
00:30:46,260 --> 00:30:51,270
Google have extended this project now to

787
00:30:49,140 --> 00:30:54,240
Google kritis I think it's called which

788
00:30:51,270 --> 00:30:57,540
is in the GCP and that drives the

789
00:30:54,240 --> 00:30:59,070
admission controller on on the Google

790
00:30:57,540 --> 00:31:00,510
cloud platform so they use that

791
00:30:59,070 --> 00:31:03,179
information that's being pulled out of

792
00:31:00,510 --> 00:31:08,400
the gravity estate abase to make a

793
00:31:03,180 --> 00:31:10,950
decision on yes or no that's a an

794
00:31:08,400 --> 00:31:13,050
example of what that looks like in in in

795
00:31:10,950 --> 00:31:14,760
action but as you can see each actor

796
00:31:13,050 --> 00:31:16,740
than their pipeline is pushing data

797
00:31:14,760 --> 00:31:18,780
intergral feeis and at various key

798
00:31:16,740 --> 00:31:25,320
points graph this has been queried to

799
00:31:18,780 --> 00:31:27,990
say can I go live with us right so

800
00:31:25,320 --> 00:31:30,960
looking ahead to taking what we learned

801
00:31:27,990 --> 00:31:33,620
about in toto and thinking about in this

802
00:31:30,960 --> 00:31:35,880
case we've got a cloud native pipeline

803
00:31:33,620 --> 00:31:38,219
we're taking software we've got a number

804
00:31:35,880 --> 00:31:41,580
of build stages but what we're doing is

805
00:31:38,220 --> 00:31:44,040
we're you're using in toto to monitor

806
00:31:41,580 --> 00:31:46,379
each of those build points and at each

807
00:31:44,040 --> 00:31:48,899
moment that a build or CR test or an

808
00:31:46,380 --> 00:31:51,870
image scan runs that is able to report

809
00:31:48,900 --> 00:31:54,690
back to Toto by the the link mechanism

810
00:31:51,870 --> 00:31:57,600
lighter it's able to go assign that

811
00:31:54,690 --> 00:31:59,550
activity and at the final stage the

812
00:31:57,600 --> 00:32:02,040
admission controller can go to in toto

813
00:31:59,550 --> 00:32:04,350
and say look here's the sequence of

814
00:32:02,040 --> 00:32:06,600
links or signatures that I've got does

815
00:32:04,350 --> 00:32:09,780
their tally with what that pipeline is

816
00:32:06,600 --> 00:32:11,909
supposed to look like well that's what

817
00:32:09,780 --> 00:32:16,050
the control plane have been doing in the

818
00:32:11,910 --> 00:32:20,940
Kuban ad space i've managed to make that

819
00:32:16,050 --> 00:32:23,070
diagram even more the an abomination

820
00:32:20,940 --> 00:32:25,110
that it was by adding what i think you

821
00:32:23,070 --> 00:32:27,060
could be doing with in toto in a

822
00:32:25,110 --> 00:32:30,389
pipeline so there what we've got is

823
00:32:27,060 --> 00:32:32,490
we've got a pipeline engineer whatever

824
00:32:30,390 --> 00:32:34,770
you want to call them whose architect

825
00:32:32,490 --> 00:32:37,110
that pipeline we've got our hooks into

826
00:32:34,770 --> 00:32:38,820
our software composition analysis we've

827
00:32:37,110 --> 00:32:42,330
got a hooks into our static code and

828
00:32:38,820 --> 00:32:43,950
then what we doing is we are at the

829
00:32:42,330 --> 00:32:47,100
point that we push to production we can

830
00:32:43,950 --> 00:32:48,600
go and ask in toto for review on that

831
00:32:47,100 --> 00:32:51,290
piece of code whether that's being built

832
00:32:48,600 --> 00:32:51,290
securely

833
00:32:51,590 --> 00:33:00,570
so in conclusion the ways to avoid the

834
00:32:58,950 --> 00:33:01,530
horrors of having your supply chain

835
00:33:00,570 --> 00:33:03,809
compromised

836
00:33:01,530 --> 00:33:05,940
I think the first the first one is

837
00:33:03,809 --> 00:33:07,980
practice basic hygiene and people a lot

838
00:33:05,940 --> 00:33:09,690
of people still on doing this those

839
00:33:07,980 --> 00:33:11,580
things about policy about doing

840
00:33:09,690 --> 00:33:13,740
composition analysis you know there's no

841
00:33:11,580 --> 00:33:15,899
reason not to be doing these the tools

842
00:33:13,740 --> 00:33:17,790
work the tools are you know not

843
00:33:15,900 --> 00:33:19,410
exorbitant expensive and they just have

844
00:33:17,790 --> 00:33:22,020
to be done if people are pulling in

845
00:33:19,410 --> 00:33:24,000
stuff from the internet and you need to

846
00:33:22,020 --> 00:33:28,379
be you need to be aware of what they

847
00:33:24,000 --> 00:33:31,140
want they using be careful of what you

848
00:33:28,380 --> 00:33:34,440
trust you know you can see how many how

849
00:33:31,140 --> 00:33:39,330
many examples that we've had 25 minutes

850
00:33:34,440 --> 00:33:42,000
so of where that trust chain can be can

851
00:33:39,330 --> 00:33:44,309
work against you if you trust to legally

852
00:33:42,000 --> 00:33:46,410
and then when you do tries to make sure

853
00:33:44,309 --> 00:33:48,030
that you're verifying my own trust is a

854
00:33:46,410 --> 00:33:50,130
good thing but make sure that you're

855
00:33:48,030 --> 00:33:53,820
doing sampling you doing some kind of

856
00:33:50,130 --> 00:33:55,470
proof process that's justifying the

857
00:33:53,820 --> 00:33:57,149
trust that you've shown and then

858
00:33:55,470 --> 00:33:59,760
understand the ways that you could be

859
00:33:57,150 --> 00:34:01,260
attacked most however good that supply

860
00:33:59,760 --> 00:34:03,600
chain and we take that example of the

861
00:34:01,260 --> 00:34:04,679
semiconductor manufacturers you know

862
00:34:03,600 --> 00:34:06,809
they thought they had that problem

863
00:34:04,679 --> 00:34:07,620
solved but they didn't understand that

864
00:34:06,809 --> 00:34:09,659
somebody's just going to walk through

865
00:34:07,620 --> 00:34:11,879
the front door of the factory with a big

866
00:34:09,659 --> 00:34:13,830
bag of money and that entire beautifully

867
00:34:11,879 --> 00:34:15,980
constructed supply chain just goes out

868
00:34:13,830 --> 00:34:15,980
the window

869
00:34:16,340 --> 00:34:22,440
new technologies in particular cloud

870
00:34:20,340 --> 00:34:24,690
native a lot of the things up a lot of

871
00:34:22,440 --> 00:34:27,119
the new tech specs are doing you know

872
00:34:24,690 --> 00:34:30,149
they're finding some very novel ways of

873
00:34:27,119 --> 00:34:33,330
solving problems that exist in and maybe

874
00:34:30,149 --> 00:34:36,480
the way that that we've been doing

875
00:34:33,330 --> 00:34:38,190
things so embrace those technologies a

876
00:34:36,480 --> 00:34:41,040
lot of these new things that are like in

877
00:34:38,190 --> 00:34:43,260
toto it's quite possible to back port

878
00:34:41,040 --> 00:34:45,389
that that way of working around a new

879
00:34:43,260 --> 00:34:46,830
and you may be more modern way of

880
00:34:45,389 --> 00:34:49,919
solving a problem that can be

881
00:34:46,830 --> 00:34:53,100
retrofitted quite easily to existing

882
00:34:49,918 --> 00:34:55,080
supply chain technologies so get your

883
00:34:53,100 --> 00:34:57,690
ideas get your inspiration from what

884
00:34:55,080 --> 00:34:59,400
what people in maybe in the car exciting

885
00:34:57,690 --> 00:35:01,619
on the cloud native thing have a look

886
00:34:59,400 --> 00:35:03,330
what what is breaking where these people

887
00:35:01,619 --> 00:35:04,640
are going and then see which of those

888
00:35:03,330 --> 00:35:09,400
those ideas you

889
00:35:04,640 --> 00:35:09,400
you can pull into your own problem space

890
00:35:09,760 --> 00:35:15,650
so hopefully that good luck with the

891
00:35:12,380 --> 00:35:17,270
with a pool film references give me a

892
00:35:15,650 --> 00:35:20,060
tweet on that if you want the slides

893
00:35:17,270 --> 00:35:22,040
they are there I think I might just need

894
00:35:20,060 --> 00:35:25,160
to pusher and update on that but they

895
00:35:22,040 --> 00:35:27,620
are is a PDF version of those slides so

896
00:35:25,160 --> 00:35:29,600
just before lunch we have five they're

897
00:35:27,620 --> 00:35:33,009
just on four minutes anybody has a

898
00:35:29,600 --> 00:35:33,009
question for me

899
00:35:33,790 --> 00:35:43,820
you question the guys okay in that case

900
00:35:41,960 --> 00:35:47,530
then let's break early for lunch

901
00:35:43,820 --> 00:35:47,530
oh and we're see you guys

