1
00:00:00,000 --> 00:00:06,029
and as a person who spent the last 15 or

2
00:00:03,419 --> 00:00:06,750
more years in doing essentially what is

3
00:00:06,029 --> 00:00:08,940
today called

4
00:00:06,750 --> 00:00:11,219
deficit cops I was always looking at

5
00:00:08,940 --> 00:00:14,209
simplifying things and especially when

6
00:00:11,219 --> 00:00:18,150
you are dealing with a pretty large

7
00:00:14,210 --> 00:00:21,210
project where you have tens or hundreds

8
00:00:18,150 --> 00:00:23,698
of servers especially deployed to the

9
00:00:21,210 --> 00:00:25,380
cloud sometimes there are and I'm sure

10
00:00:23,699 --> 00:00:28,170
you've seen this many times sometimes

11
00:00:25,380 --> 00:00:30,240
there are tasks that initially look kind

12
00:00:28,170 --> 00:00:32,460
of secondary so essentially like

13
00:00:30,240 --> 00:00:34,769
deploying transport encryption between

14
00:00:32,460 --> 00:00:37,469
servers between a database the

15
00:00:34,770 --> 00:00:41,040
application server on all the things

16
00:00:37,469 --> 00:00:42,989
that we are bugging the developers and

17
00:00:41,040 --> 00:00:45,750
architects during a penetration test

18
00:00:42,989 --> 00:00:49,169
during infrastructure vulnerability

19
00:00:45,750 --> 00:00:51,660
threat modeling and suddenly this kind

20
00:00:49,170 --> 00:00:53,219
of secondary tasks they start to grow up

21
00:00:51,660 --> 00:00:56,849
grow up grow up because when you start

22
00:00:53,219 --> 00:00:58,320
to deploy TLS between your database and

23
00:00:56,850 --> 00:01:02,129
application server you suddenly discover

24
00:00:58,320 --> 00:01:04,409
you have to setup the PKI infrastructure

25
00:01:02,129 --> 00:01:08,548
for that purpose and this presentation

26
00:01:04,409 --> 00:01:11,549
is exactly about how I dealt with this

27
00:01:08,549 --> 00:01:14,220
problem because indeed is frustrating

28
00:01:11,549 --> 00:01:17,790
and in most cases I've seen and I

29
00:01:14,220 --> 00:01:20,640
actually worked in this problem was

30
00:01:17,790 --> 00:01:22,680
delayed and this is why what essentially

31
00:01:20,640 --> 00:01:26,009
this slide is about we just you don't

32
00:01:22,680 --> 00:01:29,070
push this forever until we have to go

33
00:01:26,009 --> 00:01:32,430
through some kind of third-party

34
00:01:29,070 --> 00:01:35,008
compliance audit or penetration test and

35
00:01:32,430 --> 00:01:38,640
then in panic everyone is patching all

36
00:01:35,009 --> 00:01:41,159
this TLS connections between components

37
00:01:38,640 --> 00:01:42,720
just because you know we didn't really

38
00:01:41,159 --> 00:01:45,630
think about this before so I was

39
00:01:42,720 --> 00:01:47,908
wondering is it possible to kind of do

40
00:01:45,630 --> 00:01:50,399
something in a way that will be not so

41
00:01:47,909 --> 00:01:52,590
intrusive because TLS is definitely

42
00:01:50,399 --> 00:01:54,869
intrusive in this in this in this sense

43
00:01:52,590 --> 00:01:59,040
that's something that will be just there

44
00:01:54,869 --> 00:02:02,149
protecting your traffic but will not not

45
00:01:59,040 --> 00:02:05,310
really require so much work and this is

46
00:02:02,149 --> 00:02:07,500
essentially why I started doing this

47
00:02:05,310 --> 00:02:09,869
work and it seemed to work actually it

48
00:02:07,500 --> 00:02:12,540
was pretty good pretty good success and

49
00:02:09,869 --> 00:02:14,340
this actually originated from times like

50
00:02:12,540 --> 00:02:17,579
in light late

51
00:02:14,340 --> 00:02:22,470
90s and early 2000 when I was working

52
00:02:17,580 --> 00:02:25,560
for a company designing and IPSec

53
00:02:22,470 --> 00:02:28,379
encryption gateway for for sensitive

54
00:02:25,560 --> 00:02:29,910
traffic and it was using IPSec and I'll

55
00:02:28,379 --> 00:02:32,429
be talking about the protocol itself

56
00:02:29,910 --> 00:02:35,430
more but this is how I kind of was first

57
00:02:32,430 --> 00:02:37,530
contact I had with IP second this is how

58
00:02:35,430 --> 00:02:39,569
I knew it existed and I knew the

59
00:02:37,530 --> 00:02:41,099
internals which allowed me to do the

60
00:02:39,569 --> 00:02:44,849
thing I wanted to do now

61
00:02:41,099 --> 00:02:46,980
pretty easy so you know transport

62
00:02:44,849 --> 00:02:49,018
encryption we are on a security concern

63
00:02:46,980 --> 00:02:50,429
I don't need to explain it either why we

64
00:02:49,019 --> 00:02:53,700
need that but this is essentially what

65
00:02:50,430 --> 00:02:57,780
you see on a typical traffic between

66
00:02:53,700 --> 00:03:02,488
between a application server and they

67
00:02:57,780 --> 00:03:04,739
advise this particular traffic is it's

68
00:03:02,489 --> 00:03:07,019
from between a application server and

69
00:03:04,739 --> 00:03:08,340
something probably a casual request to

70
00:03:07,019 --> 00:03:10,910
read this this is from my application

71
00:03:08,340 --> 00:03:17,099
actually I just captured a real traffic

72
00:03:10,910 --> 00:03:18,510
to be easier this is you see here it's

73
00:03:17,099 --> 00:03:20,578
readies password

74
00:03:18,510 --> 00:03:22,260
it's from UAT so it's not really

75
00:03:20,579 --> 00:03:24,120
sensitive and I changed it afterwards

76
00:03:22,260 --> 00:03:27,000
but this is essentially what you can

77
00:03:24,120 --> 00:03:29,639
capture in the in a live traffic and

78
00:03:27,000 --> 00:03:32,639
this is again SQL query which I made

79
00:03:29,639 --> 00:03:37,349
that but you know this is not this is

80
00:03:32,639 --> 00:03:39,720
quite realistic so even especially if we

81
00:03:37,349 --> 00:03:42,000
have clout in some infrastructure

82
00:03:39,720 --> 00:03:44,489
because if you have your own servers

83
00:03:42,000 --> 00:03:46,019
inside your trusted network I mean who

84
00:03:44,489 --> 00:03:47,549
cares really because we are not really

85
00:03:46,019 --> 00:03:50,639
dealing with threats like someone

86
00:03:47,549 --> 00:03:52,260
plugging a sniffer probe into your local

87
00:03:50,639 --> 00:03:53,849
network but if we have cloud

88
00:03:52,260 --> 00:03:57,388
infrastructure we don't really have

89
00:03:53,849 --> 00:03:59,578
guarantees that the servers will be even

90
00:03:57,389 --> 00:04:01,500
if the same network segment not to

91
00:03:59,579 --> 00:04:04,319
mention that there will be actually in

92
00:04:01,500 --> 00:04:07,380
the same geographic data center so your

93
00:04:04,319 --> 00:04:10,858
traffic that you see two servers sitting

94
00:04:07,380 --> 00:04:13,260
in the same kind of group in a cloud

95
00:04:10,859 --> 00:04:15,389
environment they can be actually placed

96
00:04:13,260 --> 00:04:19,079
quite distant and your traffic maybe

97
00:04:15,389 --> 00:04:22,409
even running over over Internet so this

98
00:04:19,079 --> 00:04:24,390
is essentially why we are bothering

99
00:04:22,409 --> 00:04:27,630
ourselves about the transport security

100
00:04:24,390 --> 00:04:28,260
and what choices we have there's a lot

101
00:04:27,630 --> 00:04:31,050
of them I

102
00:04:28,260 --> 00:04:32,700
not talking about them in details but

103
00:04:31,050 --> 00:04:35,040
the parameters I was looking at is

104
00:04:32,700 --> 00:04:38,099
performance so is the true limb is this

105
00:04:35,040 --> 00:04:41,070
mechanism implemented in in the user

106
00:04:38,100 --> 00:04:43,740
mode so it's essentially a part of an

107
00:04:41,070 --> 00:04:46,110
application like we have positive SQL

108
00:04:43,740 --> 00:04:48,660
implements TLS it's partly it's using

109
00:04:46,110 --> 00:04:51,000
the open sets open SSL library it's all

110
00:04:48,660 --> 00:04:52,950
running in a user mode so essentially in

111
00:04:51,000 --> 00:04:55,470
the user Spain is in the in operating

112
00:04:52,950 --> 00:04:59,039
system or is it running in a kernel so

113
00:04:55,470 --> 00:05:01,770
IPSec and this is this is a huge

114
00:04:59,040 --> 00:05:03,420
advantage and it's very beneficial for

115
00:05:01,770 --> 00:05:06,060
the performance runs as part of the

116
00:05:03,420 --> 00:05:09,090
kernel essentially this is the only

117
00:05:06,060 --> 00:05:11,610
solution that are actually runs as part

118
00:05:09,090 --> 00:05:13,380
of the kernel the other one that I have

119
00:05:11,610 --> 00:05:16,860
recently found this wire guard which is

120
00:05:13,380 --> 00:05:18,719
a very interesting project that could be

121
00:05:16,860 --> 00:05:22,140
potentially replacement for IPSec in

122
00:05:18,720 --> 00:05:25,080
future that actually resolves plenty of

123
00:05:22,140 --> 00:05:27,780
its deficiencies unfortunately if you

124
00:05:25,080 --> 00:05:30,390
look at you know realistically if you

125
00:05:27,780 --> 00:05:33,869
start deploying this these things on a

126
00:05:30,390 --> 00:05:36,090
you know real world environment and you

127
00:05:33,870 --> 00:05:38,160
look at the distributions the Linux

128
00:05:36,090 --> 00:05:40,679
distributions that you have on clouds

129
00:05:38,160 --> 00:05:44,190
environment it's not always there it's

130
00:05:40,680 --> 00:05:46,320
available as a additional kernel modules

131
00:05:44,190 --> 00:05:49,610
which you have to compile in and this is

132
00:05:46,320 --> 00:05:53,430
a no-go almost such projects obviously

133
00:05:49,610 --> 00:05:56,630
with other projects like that you know

134
00:05:53,430 --> 00:06:00,600
there's a lot of open DVD a VPN think I

135
00:05:56,630 --> 00:06:02,190
won't be even going through them through

136
00:06:00,600 --> 00:06:04,260
them in detail but because we don't have

137
00:06:02,190 --> 00:06:08,130
much time but they all have deficiencies

138
00:06:04,260 --> 00:06:10,170
which for for you can ask me later on

139
00:06:08,130 --> 00:06:11,730
but there were bugs in them which kind

140
00:06:10,170 --> 00:06:15,090
of disqualified them from my point of

141
00:06:11,730 --> 00:06:20,090
view and TLS so essentially using

142
00:06:15,090 --> 00:06:22,650
built-in support for for TLS in

143
00:06:20,090 --> 00:06:25,530
databases in web applications servers

144
00:06:22,650 --> 00:06:30,090
etc this is the kind of main alternative

145
00:06:25,530 --> 00:06:33,390
that I'll be talking about and the main

146
00:06:30,090 --> 00:06:35,270
problem I have with the TLS is that when

147
00:06:33,390 --> 00:06:38,190
you are setting this up in a real

148
00:06:35,270 --> 00:06:40,200
application stack there are so many

149
00:06:38,190 --> 00:06:41,849
formats for configuring the TLS

150
00:06:40,200 --> 00:06:44,219
parameters because every applique

151
00:06:41,849 --> 00:06:46,889
has its own format and it's very very

152
00:06:44,219 --> 00:06:49,800
confusing even if you are using some

153
00:06:46,889 --> 00:06:52,229
kind of configuration management system

154
00:06:49,800 --> 00:06:53,849
and it's essentially error-prone so you

155
00:06:52,229 --> 00:06:56,429
can make mistakes and there are so many

156
00:06:53,849 --> 00:06:59,849
of them this this is my scale this is

157
00:06:56,429 --> 00:07:05,458
PostgreSQL Redis doesn't even bother

158
00:06:59,849 --> 00:07:06,360
about TLS this is couchdb this is

159
00:07:05,459 --> 00:07:12,749
welcome

160
00:07:06,360 --> 00:07:17,279
err lang this is rabbit mq this is hi 8h

161
00:07:12,749 --> 00:07:20,159
a proxy and then when you start again

162
00:07:17,279 --> 00:07:24,058
deploying the certificates it's an

163
00:07:20,159 --> 00:07:27,259
overkill really because the the hope ki

164
00:07:24,059 --> 00:07:29,969
infrastructure was designed for dealing

165
00:07:27,259 --> 00:07:31,830
completely problems that completely

166
00:07:29,969 --> 00:07:34,498
different scale the PKI infrastructure

167
00:07:31,830 --> 00:07:37,080
wasn't really designed to deal with

168
00:07:34,499 --> 00:07:40,139
encryption or authentication between ten

169
00:07:37,080 --> 00:07:43,139
servers on a cloud it was designed to

170
00:07:40,139 --> 00:07:47,189
deal with authentication of thousands or

171
00:07:43,139 --> 00:07:49,469
millions of entity on the untrusted

172
00:07:47,189 --> 00:07:52,979
Network like Internet so when we are

173
00:07:49,469 --> 00:07:54,719
trying to deploy the TLS certificates

174
00:07:52,979 --> 00:07:58,769
and I'm sure you've been through this

175
00:07:54,719 --> 00:08:01,589
pain many times it's real burden and and

176
00:07:58,769 --> 00:08:03,059
there is essentially so much things you

177
00:08:01,589 --> 00:08:05,789
have to do you have to be careful about

178
00:08:03,059 --> 00:08:08,009
deploying the certificates the the keys

179
00:08:05,789 --> 00:08:11,279
and everything it's just just annoying

180
00:08:08,009 --> 00:08:13,919
and then TLS protocol it gives you a lot

181
00:08:11,279 --> 00:08:16,649
of choices that this is all the

182
00:08:13,919 --> 00:08:19,169
configuration parameters for typical

183
00:08:16,649 --> 00:08:21,449
opens the cell you know the cell support

184
00:08:19,169 --> 00:08:24,179
there's some are strong some are weak

185
00:08:21,449 --> 00:08:26,519
some you can use some you cannot and

186
00:08:24,179 --> 00:08:30,508
essentially especially if you are trying

187
00:08:26,519 --> 00:08:31,889
to speak to an older implementation you

188
00:08:30,509 --> 00:08:34,829
may get this so essentially you are

189
00:08:31,889 --> 00:08:38,188
trying to be the best you know the best

190
00:08:34,828 --> 00:08:41,399
practices staying on the bleeding edge

191
00:08:38,188 --> 00:08:43,828
with encryption protocols but then you

192
00:08:41,399 --> 00:08:48,750
hit some old crap implementation a you

193
00:08:43,828 --> 00:08:53,059
have to support rc4 for example and then

194
00:08:48,750 --> 00:08:55,740
our services we just cannot work over

195
00:08:53,059 --> 00:08:59,550
TLS because TLS is

196
00:08:55,740 --> 00:09:01,649
CP and this services are like UDP or DNS

197
00:08:59,550 --> 00:09:05,310
or success local DNS they are just

198
00:09:01,649 --> 00:09:09,270
working on UDP by default and obviously

199
00:09:05,310 --> 00:09:11,819
you can implement syslog over TLS there

200
00:09:09,270 --> 00:09:14,520
are solutions for that and the same for

201
00:09:11,820 --> 00:09:17,160
DNS but this is again kind of squeezing

202
00:09:14,520 --> 00:09:22,430
trying to squeeze an existing solution

203
00:09:17,160 --> 00:09:26,459
like UDP with all its advantages into

204
00:09:22,430 --> 00:09:28,199
something else because the tool that you

205
00:09:26,459 --> 00:09:30,599
are using doesn't really support the

206
00:09:28,200 --> 00:09:33,180
original protocol so this is a this is

207
00:09:30,600 --> 00:09:35,580
the things I didn't like in TLS and this

208
00:09:33,180 --> 00:09:37,410
is essentially what I was trying to get

209
00:09:35,580 --> 00:09:40,740
rid of and on the other or the other

210
00:09:37,410 --> 00:09:46,079
hand IPSec is a protocol that has been

211
00:09:40,740 --> 00:09:50,399
with us for almost as long as SSL the

212
00:09:46,080 --> 00:09:53,279
first version was released in 95 the

213
00:09:50,399 --> 00:09:55,200
work on IPSec started much earlier it

214
00:09:53,279 --> 00:10:00,060
was like at least five or ten years

215
00:09:55,200 --> 00:10:03,230
before it was started by NSA and this

216
00:10:00,060 --> 00:10:07,319
obviously brings a lot of but

217
00:10:03,230 --> 00:10:10,529
associations but IPSec is one of the

218
00:10:07,320 --> 00:10:12,750
protocols that has been probably most

219
00:10:10,529 --> 00:10:16,649
audited over the time and as you can see

220
00:10:12,750 --> 00:10:19,649
there was so many releases of SSL and

221
00:10:16,649 --> 00:10:22,850
TLS all of them fixing really

222
00:10:19,649 --> 00:10:24,779
fundamental box and there was plenty of

223
00:10:22,850 --> 00:10:27,600
implementations vulnerabilities on the

224
00:10:24,779 --> 00:10:31,709
way as well on the other hand in the

225
00:10:27,600 --> 00:10:33,060
IPSec world not much changes there were

226
00:10:31,709 --> 00:10:35,670
a lot of changes there were many

227
00:10:33,060 --> 00:10:39,300
features being added like for example

228
00:10:35,670 --> 00:10:42,469
not traversal which still recovering

229
00:10:39,300 --> 00:10:45,270
like NAT traversal which originally

230
00:10:42,470 --> 00:10:47,459
wasn't supported by IPSec by the first

231
00:10:45,270 --> 00:10:49,920
releases but the changes were not so

232
00:10:47,459 --> 00:10:51,510
revolutionary and not so fundamental so

233
00:10:49,920 --> 00:10:54,029
you can see that the kind of

234
00:10:51,510 --> 00:10:56,279
cryptographic base of IPSec they were

235
00:10:54,029 --> 00:10:59,029
sound from the very beginning and this

236
00:10:56,279 --> 00:11:01,339
is a and there were much fewer

237
00:10:59,029 --> 00:11:04,079
implementation vulnerabilities as well

238
00:11:01,339 --> 00:11:06,449
so attacks like crime beasts and

239
00:11:04,079 --> 00:11:08,969
everything he just they just don't apply

240
00:11:06,449 --> 00:11:12,540
to IPSec and

241
00:11:08,970 --> 00:11:15,689
fortunately one thing happened with

242
00:11:12,540 --> 00:11:18,180
IPSec it's I'm trying to present IPSec

243
00:11:15,689 --> 00:11:20,370
is simple and it is really simple if you

244
00:11:18,180 --> 00:11:22,949
use it in a simple environment like

245
00:11:20,370 --> 00:11:23,370
simple scenario as I am trying to show

246
00:11:22,949 --> 00:11:25,920
you

247
00:11:23,370 --> 00:11:27,959
however IPSec is incredibly complicated

248
00:11:25,920 --> 00:11:32,849
especially because it's using very

249
00:11:27,959 --> 00:11:36,109
really weird terminology so the the RFC

250
00:11:32,850 --> 00:11:40,019
s for IPSec are full of really bizarre

251
00:11:36,110 --> 00:11:43,290
names like really simple things are

252
00:11:40,019 --> 00:11:44,879
called security associations etc etc

253
00:11:43,290 --> 00:11:47,579
it's a completely different language

254
00:11:44,879 --> 00:11:49,680
there was a kind of trend back there in

255
00:11:47,579 --> 00:11:51,000
90s that if you design a new security

256
00:11:49,680 --> 00:11:53,819
protocol you have to invent your own

257
00:11:51,000 --> 00:11:55,980
language and this was essentially the

258
00:11:53,819 --> 00:11:58,079
problem with with IPSec back then when I

259
00:11:55,980 --> 00:12:01,410
was reading the first documentation

260
00:11:58,079 --> 00:12:03,959
first time in 90s I was like really

261
00:12:01,410 --> 00:12:07,170
close to really getting crazy because it

262
00:12:03,959 --> 00:12:09,239
was it was really you have to reset your

263
00:12:07,170 --> 00:12:11,250
thinking completely and adapt to the

264
00:12:09,240 --> 00:12:14,189
language from the very beginning from

265
00:12:11,250 --> 00:12:16,379
the very basic concepts if you look at

266
00:12:14,189 --> 00:12:18,599
this you know in hints ID it's it's

267
00:12:16,379 --> 00:12:23,639
really easy and I will try to show is

268
00:12:18,600 --> 00:12:24,180
show it the Daisy part unfortunately by

269
00:12:23,639 --> 00:12:28,949
now

270
00:12:24,180 --> 00:12:31,739
IPSec is mostly known by probably VPN

271
00:12:28,949 --> 00:12:34,529
users Cisco users as a VPN protocol

272
00:12:31,740 --> 00:12:37,620
which is which was back then complete

273
00:12:34,529 --> 00:12:40,410
the secondary function for for IPSec the

274
00:12:37,620 --> 00:12:43,800
tunneling of other protocols because

275
00:12:40,410 --> 00:12:47,040
IPSec was intended to be used as the

276
00:12:43,800 --> 00:12:49,319
basic encryption protocol for end-to-end

277
00:12:47,040 --> 00:12:49,920
communication between all hosts on the

278
00:12:49,319 --> 00:12:52,378
Internet

279
00:12:49,920 --> 00:12:55,290
unfortunately for many reasons this kind

280
00:12:52,379 --> 00:12:59,699
of functionality was abandoned and we

281
00:12:55,290 --> 00:13:01,500
can only now use IPSec you know for

282
00:12:59,699 --> 00:13:05,008
functions like I'm just describing or

283
00:13:01,500 --> 00:13:07,439
for VPN purposes so essentially how does

284
00:13:05,009 --> 00:13:10,670
IPSec look like in real life

285
00:13:07,439 --> 00:13:13,379
so you get typical you notice a

286
00:13:10,670 --> 00:13:16,290
spaghetti of TCP connections between two

287
00:13:13,379 --> 00:13:19,920
servers when you enable IPSec between

288
00:13:16,290 --> 00:13:23,300
two Linux boxes you got all this nice

289
00:13:19,920 --> 00:13:25,439
and elegant ESP packets which is ESP

290
00:13:23,300 --> 00:13:27,300
encryption security payload which I'll

291
00:13:25,440 --> 00:13:29,250
be talking in detail in a second

292
00:13:27,300 --> 00:13:34,589
all is encrypted and you can actually

293
00:13:29,250 --> 00:13:41,040
look inside this is typical encrypted

294
00:13:34,589 --> 00:13:45,930
traffic and sorry in unlike in TLS you

295
00:13:41,040 --> 00:13:48,660
will not see the whole dumps of PK

296
00:13:45,930 --> 00:13:51,920
certificates in the traffic hostnames

297
00:13:48,660 --> 00:13:55,890
etc there's some exceptions for that but

298
00:13:51,920 --> 00:13:58,050
that's for special occasions the IPSec

299
00:13:55,890 --> 00:14:01,230
architecture it's really simple

300
00:13:58,050 --> 00:14:03,079
there is ESP encapsulation security

301
00:14:01,230 --> 00:14:05,490
protocol which is essentially the bulk

302
00:14:03,080 --> 00:14:10,770
workhorse that does encrypt the actual

303
00:14:05,490 --> 00:14:13,529
traffic it's an IP protocol and I'll

304
00:14:10,770 --> 00:14:16,380
explain on a network stack what it'll

305
00:14:13,529 --> 00:14:18,480
mean is it lives in a kernel space and

306
00:14:16,380 --> 00:14:20,399
once you configure it it will just

307
00:14:18,480 --> 00:14:22,470
encrypt all the traffic that you tell it

308
00:14:20,399 --> 00:14:27,060
to encrypt and that's relate you just

309
00:14:22,470 --> 00:14:29,459
forget about it it lives well below TCP

310
00:14:27,060 --> 00:14:30,899
or anything like that and then for

311
00:14:29,459 --> 00:14:33,180
keying for essentially actually

312
00:14:30,899 --> 00:14:36,360
establishing the authentic a ultimately

313
00:14:33,180 --> 00:14:39,779
authenticity of the communicating

314
00:14:36,360 --> 00:14:43,279
servers and for exchanging keys you got

315
00:14:39,779 --> 00:14:49,500
the Ikey internet key exchange protocol

316
00:14:43,279 --> 00:14:52,200
sorry which works on port 500 UDP it's

317
00:14:49,500 --> 00:14:55,800
no implementation wise it's implemented

318
00:14:52,200 --> 00:14:58,110
by a very small footprint reckon users

319
00:14:55,800 --> 00:15:02,160
paid this demon that just sits in the

320
00:14:58,110 --> 00:15:05,310
memory and talks to the other hosts so

321
00:15:02,160 --> 00:15:09,209
just kind of reiterating you got two

322
00:15:05,310 --> 00:15:12,119
hosts host one host to their got a lot

323
00:15:09,209 --> 00:15:15,029
of services they the services talk to

324
00:15:12,120 --> 00:15:17,579
each other they each of them establishes

325
00:15:15,029 --> 00:15:21,209
their own TCP connection then on the top

326
00:15:17,579 --> 00:15:23,729
of TCP they established TLS each of them

327
00:15:21,209 --> 00:15:26,520
uses their own session keys and

328
00:15:23,730 --> 00:15:32,520
everything each of them runs the quite

329
00:15:26,520 --> 00:15:34,650
expensive RSA or elliptic crypto

330
00:15:32,520 --> 00:15:36,329
exchange for their own connection and

331
00:15:34,650 --> 00:15:38,790
maintains their own State

332
00:15:36,329 --> 00:15:40,290
and there are services which do not want

333
00:15:38,790 --> 00:15:44,610
a list because they came up because they

334
00:15:40,290 --> 00:15:47,790
run on UDP for example in ESP IPSec buy

335
00:15:44,610 --> 00:15:51,360
stock you just establish one connection

336
00:15:47,790 --> 00:15:55,618
one ESP I don't want I don't say tallow

337
00:15:51,360 --> 00:15:58,559
because not a tunnel but one ESP kind of

338
00:15:55,619 --> 00:16:00,509
connection between the two hosts and you

339
00:15:58,559 --> 00:16:04,589
just forget about everything else all

340
00:16:00,509 --> 00:16:06,839
the host communicates using regular TCP

341
00:16:04,589 --> 00:16:09,410
or whatever the protocol they speak and

342
00:16:06,839 --> 00:16:11,910
that's it everything is encrypted by

343
00:16:09,410 --> 00:16:14,429
automatically so essentially if you look

344
00:16:11,910 --> 00:16:18,660
at the network stack this is IP header

345
00:16:14,429 --> 00:16:21,209
and then over the IP headers is the ESP

346
00:16:18,660 --> 00:16:23,488
header which essentially provides

347
00:16:21,209 --> 00:16:26,459
commonly contains some parameters like

348
00:16:23,489 --> 00:16:30,329
the encryption channel number and

349
00:16:26,459 --> 00:16:32,819
everything inside is encrypted on top of

350
00:16:30,329 --> 00:16:38,309
that sits TCP HTTP and whatever protocol

351
00:16:32,819 --> 00:16:40,979
you are you are using now going to how

352
00:16:38,309 --> 00:16:43,139
we configure this again this is looks

353
00:16:40,980 --> 00:16:48,660
very complicated but it's really really

354
00:16:43,139 --> 00:16:51,449
simple you got to kind of kernel

355
00:16:48,660 --> 00:16:54,269
structures that hold the data one is SPD

356
00:16:51,449 --> 00:16:57,079
security policy database and it contains

357
00:16:54,269 --> 00:16:59,970
statements which essentially says say

358
00:16:57,079 --> 00:17:04,769
you have to you must encrypt traffic

359
00:16:59,970 --> 00:17:07,139
from A to B you may encrypt and compress

360
00:17:04,769 --> 00:17:09,959
if possible the traffic from A to C and

361
00:17:07,138 --> 00:17:12,678
the traffic from A to G just goes in

362
00:17:09,959 --> 00:17:15,110
client X it's lived like a routing table

363
00:17:12,679 --> 00:17:18,299
except you don't point to the

364
00:17:15,109 --> 00:17:19,948
destinations you just show or tell the

365
00:17:18,299 --> 00:17:24,689
colonel what to do with the packet in

366
00:17:19,949 --> 00:17:28,199
terms of cryptographic transforms so the

367
00:17:24,689 --> 00:17:30,149
next structure in the kernel is security

368
00:17:28,199 --> 00:17:32,789
Association database which essentially

369
00:17:30,149 --> 00:17:36,928
says okay I need to I have to encrypt

370
00:17:32,789 --> 00:17:39,990
traffic from A to B so sad tells you how

371
00:17:36,929 --> 00:17:41,970
to do this precisely what key I use for

372
00:17:39,990 --> 00:17:45,450
encrypting traffic from A to B and

373
00:17:41,970 --> 00:17:47,940
because every security Association is

374
00:17:45,450 --> 00:17:48,760
one has only one direction from A to B

375
00:17:47,940 --> 00:17:51,310
you

376
00:17:48,760 --> 00:17:53,320
have to have encryption rule from B to a

377
00:17:51,310 --> 00:17:55,560
so you have two rules for every cost

378
00:17:53,320 --> 00:18:04,720
essentially that you want to speak to

379
00:17:55,560 --> 00:18:07,240
typically in modern Linux systems two

380
00:18:04,720 --> 00:18:09,220
algorithm algorithms will be implemented

381
00:18:07,240 --> 00:18:10,840
in most systems so this is the safe

382
00:18:09,220 --> 00:18:13,690
default which are pretty decent from

383
00:18:10,840 --> 00:18:16,540
security point of view the subtle also

384
00:18:13,690 --> 00:18:19,030
contain the unique kind of identifier

385
00:18:16,540 --> 00:18:22,030
for every connection and a ton of other

386
00:18:19,030 --> 00:18:24,430
parameters which are not really very

387
00:18:22,030 --> 00:18:29,530
important how you configure it there's

388
00:18:24,430 --> 00:18:31,570
one simple command IP X a forum policy

389
00:18:29,530 --> 00:18:35,220
which shows you this policy which

390
00:18:31,570 --> 00:18:40,770
essentially says this is a v6 address

391
00:18:35,220 --> 00:18:44,610
from this v6 address to this v6 address

392
00:18:40,770 --> 00:18:50,379
all traffic has to be encrypted using

393
00:18:44,610 --> 00:18:52,149
easy ESP in transport modes and okay

394
00:18:50,380 --> 00:18:54,010
this is not requirement this is a

395
00:18:52,150 --> 00:18:56,320
suggestion so they if you say use

396
00:18:54,010 --> 00:18:59,530
essentially means you can encrypt but

397
00:18:56,320 --> 00:19:02,169
don't have to there are two commands for

398
00:18:59,530 --> 00:19:05,410
that one which is kind of a newer new

399
00:19:02,170 --> 00:19:09,220
style this one is the old style provides

400
00:19:05,410 --> 00:19:11,560
slightly more information the same

401
00:19:09,220 --> 00:19:13,870
commands are used to look at the

402
00:19:11,560 --> 00:19:16,000
security Association database and here

403
00:19:13,870 --> 00:19:18,429
you actually can see the actual

404
00:19:16,000 --> 00:19:20,760
encryption keys this is this hex string

405
00:19:18,430 --> 00:19:23,650
is a Rakhi that you use for encryption

406
00:19:20,760 --> 00:19:26,770
for encrypting this traffic and you can

407
00:19:23,650 --> 00:19:30,070
see these two rules one is from this

408
00:19:26,770 --> 00:19:36,910
host let's say this is a 2b and again a

409
00:19:30,070 --> 00:19:39,280
reverse traffic from B to a how we

410
00:19:36,910 --> 00:19:41,530
configure it on a regular Linux system

411
00:19:39,280 --> 00:19:45,280
there is a file it is the IPSec tools

412
00:19:41,530 --> 00:19:47,080
count and I'm only showing this for you

413
00:19:45,280 --> 00:19:48,399
to know to understand how you configure

414
00:19:47,080 --> 00:19:50,830
how you can look at the configuration

415
00:19:48,400 --> 00:19:53,970
how you can experiment how you can edit

416
00:19:50,830 --> 00:19:57,780
it but normally you don't want to

417
00:19:53,970 --> 00:20:02,310
configure this by hand because it's just

418
00:19:57,780 --> 00:20:04,350
- I'll go into details later on but it's

419
00:20:02,310 --> 00:20:09,300
very repetitive process and it's prone

420
00:20:04,350 --> 00:20:12,540
to errors you just load this policy

421
00:20:09,300 --> 00:20:14,280
using the set key commands with and this

422
00:20:12,540 --> 00:20:16,409
is something that you essentially say so

423
00:20:14,280 --> 00:20:18,389
all these decisions traffic from A to B

424
00:20:16,410 --> 00:20:20,510
this is your decision you make the

425
00:20:18,390 --> 00:20:24,030
policy and you set this in the file

426
00:20:20,510 --> 00:20:25,920
while the actual encryption parameters

427
00:20:24,030 --> 00:20:28,470
they can be set in two ways one of them

428
00:20:25,920 --> 00:20:30,530
is manually so you just actually

429
00:20:28,470 --> 00:20:34,590
configure the wrong keys

430
00:20:30,530 --> 00:20:37,920
the other one is using the I key demon

431
00:20:34,590 --> 00:20:40,790
which is much easier and much safer form

432
00:20:37,920 --> 00:20:44,070
for many reasons

433
00:20:40,790 --> 00:20:46,560
normally the easiest way to use racoon

434
00:20:44,070 --> 00:20:50,370
the i key protocol is to use pre-shared

435
00:20:46,560 --> 00:20:52,919
keys and this is the great simplicity in

436
00:20:50,370 --> 00:20:54,840
using IPSec you don't no longer have to

437
00:20:52,920 --> 00:20:57,780
manage the whole PKI infrastructure you

438
00:20:54,840 --> 00:21:01,020
can just use regular pre-shared keys

439
00:20:57,780 --> 00:21:03,120
which you know are set in for every

440
00:21:01,020 --> 00:21:06,060
single pair of horses that communicate

441
00:21:03,120 --> 00:21:09,810
however if you have something like 100

442
00:21:06,060 --> 00:21:11,159
200 1000 hosts in this case the number

443
00:21:09,810 --> 00:21:14,210
of the pre-shared keys you have to

444
00:21:11,160 --> 00:21:16,800
manage and generate will be quite

445
00:21:14,210 --> 00:21:20,640
significant so in this is exactly where

446
00:21:16,800 --> 00:21:23,760
PK I can help actually and you just set

447
00:21:20,640 --> 00:21:26,160
up a PKI certification Authority and you

448
00:21:23,760 --> 00:21:30,930
just deploy the keys this is the scaling

449
00:21:26,160 --> 00:21:34,770
in this case maybe may just make more

450
00:21:30,930 --> 00:21:35,370
sense in this case the configuration

451
00:21:34,770 --> 00:21:40,530
file

452
00:21:35,370 --> 00:21:44,219
IPSec tools conf this is actual policy

453
00:21:40,530 --> 00:21:46,889
rule as you can see what it says

454
00:21:44,220 --> 00:21:51,120
essentially added to security policy

455
00:21:46,890 --> 00:21:53,370
from host a to host B any protocol this

456
00:21:51,120 --> 00:21:56,189
is out traffic so going from the host

457
00:21:53,370 --> 00:21:59,070
use IPSec encryption with ESP protocol

458
00:21:56,190 --> 00:22:01,530
and this is all it says what is also

459
00:21:59,070 --> 00:22:05,129
important at the end it says try to

460
00:22:01,530 --> 00:22:07,800
point it it says use it's an optional so

461
00:22:05,130 --> 00:22:10,980
if there is no encryption rules set for

462
00:22:07,800 --> 00:22:13,560
this - host you have you can send the

463
00:22:10,980 --> 00:22:16,500
traffic in in plain text

464
00:22:13,560 --> 00:22:18,929
which is a bit safer from from testing

465
00:22:16,500 --> 00:22:22,160
point of view but obviously not so good

466
00:22:18,930 --> 00:22:25,020
from confidentially to point of view

467
00:22:22,160 --> 00:22:27,180
racoon conf again I just wanted to show

468
00:22:25,020 --> 00:22:29,840
this as any you know a reference but

469
00:22:27,180 --> 00:22:32,340
there is nothing you need to

470
00:22:29,840 --> 00:22:38,699
significantly edit in this in this file

471
00:22:32,340 --> 00:22:41,550
it just set of rules that tell inform

472
00:22:38,700 --> 00:22:43,320
the raccoon what hosts it should be

473
00:22:41,550 --> 00:22:45,750
expected to talk to or receive

474
00:22:43,320 --> 00:22:48,899
connections from so what are the kind of

475
00:22:45,750 --> 00:22:54,000
house that we'll be trying to establish

476
00:22:48,900 --> 00:22:56,160
kids with us what you can do in SPD is

477
00:22:54,000 --> 00:22:58,530
much more than that is just very simple

478
00:22:56,160 --> 00:23:01,200
configuration you can exclude specific

479
00:22:58,530 --> 00:23:04,910
traffic from encryption you can drop

480
00:23:01,200 --> 00:23:08,670
traffic even you can do lot of things in

481
00:23:04,910 --> 00:23:12,690
in in security policy database it just

482
00:23:08,670 --> 00:23:15,360
advanced users actually one thing that

483
00:23:12,690 --> 00:23:18,120
is interesting and useful you can enable

484
00:23:15,360 --> 00:23:20,429
compression as well which is kind of you

485
00:23:18,120 --> 00:23:22,439
can stack this transformation so one

486
00:23:20,430 --> 00:23:24,540
transformation will maybe compression

487
00:23:22,440 --> 00:23:27,210
which is a completely transparent and

488
00:23:24,540 --> 00:23:28,920
doesn't provide any confidentiality and

489
00:23:27,210 --> 00:23:31,080
that on top of then on top of

490
00:23:28,920 --> 00:23:37,950
compression you encrypt the traffic you

491
00:23:31,080 --> 00:23:40,199
with ESP and the pre shirt keys just the

492
00:23:37,950 --> 00:23:42,360
hostname that you want to talk to and

493
00:23:40,200 --> 00:23:44,390
appreciate key for this host obviously

494
00:23:42,360 --> 00:23:46,620
on both ends you need to have the same

495
00:23:44,390 --> 00:23:50,610
pressure key and if this looks

496
00:23:46,620 --> 00:23:53,580
complicated I just wanted to show you

497
00:23:50,610 --> 00:23:57,510
this files so you don't really feel kind

498
00:23:53,580 --> 00:24:00,120
of surprised that they have very kind of

499
00:23:57,510 --> 00:24:02,580
unusual syntax in reality you don't

500
00:24:00,120 --> 00:24:05,100
really have to touch this this file ever

501
00:24:02,580 --> 00:24:06,419
file server because all this

502
00:24:05,100 --> 00:24:07,919
configuration may be generated

503
00:24:06,420 --> 00:24:10,920
automatically I will be showing this

504
00:24:07,920 --> 00:24:14,580
later on essentially what happens when

505
00:24:10,920 --> 00:24:16,620
you start this raccoon daemon

506
00:24:14,580 --> 00:24:19,470
this is a typical message it speaks to

507
00:24:16,620 --> 00:24:21,209
the other hosts establishes the keys and

508
00:24:19,470 --> 00:24:23,550
that's it and you can see this problem

509
00:24:21,210 --> 00:24:26,910
once a day because it will be wreaking

510
00:24:23,550 --> 00:24:28,560
the existing session keys automatically

511
00:24:26,910 --> 00:24:31,710
depending either on the traffic or the

512
00:24:28,560 --> 00:24:35,550
time that has passed what essentially

513
00:24:31,710 --> 00:24:37,770
happens in behind the scenes when you

514
00:24:35,550 --> 00:24:42,300
define the SPD the kernel will look at

515
00:24:37,770 --> 00:24:44,190
the SPD table and it will when it's this

516
00:24:42,300 --> 00:24:46,649
traffic that falls into the policies

517
00:24:44,190 --> 00:24:49,530
essentially we said we have to encrypt

518
00:24:46,650 --> 00:24:52,110
traffic to the hosts X and kernel sees

519
00:24:49,530 --> 00:24:55,080
the traffic out going to host X it will

520
00:24:52,110 --> 00:24:58,590
look into the S ad and look if there is

521
00:24:55,080 --> 00:25:00,659
any encryption rule encryption rules for

522
00:24:58,590 --> 00:25:02,939
this particular host if there are they

523
00:25:00,660 --> 00:25:05,640
will just send an encrypted if there are

524
00:25:02,940 --> 00:25:07,560
none it will speak to the raccoon daemon

525
00:25:05,640 --> 00:25:10,140
automatically and it will establish the

526
00:25:07,560 --> 00:25:15,000
keys there will be like two seconds

527
00:25:10,140 --> 00:25:17,100
delay approximately and then it will

528
00:25:15,000 --> 00:25:18,630
continue the traffic and again next

529
00:25:17,100 --> 00:25:22,610
Rikki Inc will be probably in a few

530
00:25:18,630 --> 00:25:26,130
hours so it's very very rare process

531
00:25:22,610 --> 00:25:28,709
what you need to open on the firewall is

532
00:25:26,130 --> 00:25:31,830
just two things protocol ESP which is

533
00:25:28,710 --> 00:25:36,450
protocol number 50 and for the I key

534
00:25:31,830 --> 00:25:39,710
protocol it's protocol port 500 on the

535
00:25:36,450 --> 00:25:44,880
for UDP protocol that's it

536
00:25:39,710 --> 00:25:47,280
syntax 4nf tables it's even simpler as I

537
00:25:44,880 --> 00:25:50,670
mentioned a raccoon will do Rikki Inc

538
00:25:47,280 --> 00:25:53,430
periodically for you so this is good

539
00:25:50,670 --> 00:25:56,520
from security point of view you don't

540
00:25:53,430 --> 00:25:58,320
have to worry it's just it's just built

541
00:25:56,520 --> 00:26:00,570
in as part of the protocol and I'm

542
00:25:58,320 --> 00:26:02,490
mentioning this because the IPSec

543
00:26:00,570 --> 00:26:04,290
connections are long term so essentially

544
00:26:02,490 --> 00:26:07,920
you can have an IPSec connection that

545
00:26:04,290 --> 00:26:10,020
will be lost for you know days or months

546
00:26:07,920 --> 00:26:13,680
you don't touch it it just refreshes

547
00:26:10,020 --> 00:26:18,870
itself automatically and you just don't

548
00:26:13,680 --> 00:26:20,520
have to really think about it the IP IP

549
00:26:18,870 --> 00:26:25,739
side compression IP comp

550
00:26:20,520 --> 00:26:27,510
I try to show you the difference if I if

551
00:26:25,740 --> 00:26:30,360
I'm hitting the right line essentially

552
00:26:27,510 --> 00:26:32,879
this is the traffic from def 0 so easily

553
00:26:30,360 --> 00:26:37,620
compressible traffic and you can see the

554
00:26:32,880 --> 00:26:40,650
size of the packet is hundred bytes so

555
00:26:37,620 --> 00:26:42,629
if you send our you random data

556
00:26:40,650 --> 00:26:47,160
which is not compressible at all the

557
00:26:42,630 --> 00:26:50,730
packet size is over 1,000 bytes

558
00:26:47,160 --> 00:26:52,590
essentially you have 10 times reduction

559
00:26:50,730 --> 00:26:54,840
in size if you are using compression on

560
00:26:52,590 --> 00:26:56,879
easily compressible string in this case

561
00:26:54,840 --> 00:26:58,620
so it's definitely worth using if you

562
00:26:56,880 --> 00:27:01,170
have a textual protocol like SQL for

563
00:26:58,620 --> 00:27:04,709
example for some protocol it will

564
00:27:01,170 --> 00:27:08,309
probably just increase the processor

565
00:27:04,710 --> 00:27:12,960
load without any benefit if something is

566
00:27:08,309 --> 00:27:14,550
not working and things may be not

567
00:27:12,960 --> 00:27:19,110
working these are the tools you want to

568
00:27:14,550 --> 00:27:20,879
use for debugging things the best friend

569
00:27:19,110 --> 00:27:23,280
is definitely TCP dump because you'll

570
00:27:20,880 --> 00:27:26,510
see whether the traffic is encrypted at

571
00:27:23,280 --> 00:27:30,840
all or not and what is really being sent

572
00:27:26,510 --> 00:27:35,400
between hosts typical problems that I

573
00:27:30,840 --> 00:27:37,770
have seen during configuration of IPSec

574
00:27:35,400 --> 00:27:42,090
between hosts it's essentially when you

575
00:27:37,770 --> 00:27:44,120
don't have entries in SPD which may be

576
00:27:42,090 --> 00:27:47,909
caused by syntax error in the

577
00:27:44,120 --> 00:27:50,820
configuration files there may be IP

578
00:27:47,910 --> 00:27:53,130
addresses that are mistaken so it will

579
00:27:50,820 --> 00:27:57,000
not catch the right host that you are

580
00:27:53,130 --> 00:27:58,830
trying to protect or the set key was not

581
00:27:57,000 --> 00:28:01,140
really cold after reboot and this is

582
00:27:58,830 --> 00:28:03,840
done different on different on various

583
00:28:01,140 --> 00:28:06,630
distributions which you may get a

584
00:28:03,840 --> 00:28:10,110
situation where either the traffic is

585
00:28:06,630 --> 00:28:12,300
unencrypted completely or you receive

586
00:28:10,110 --> 00:28:14,189
traffic that is encrypted and you are

587
00:28:12,300 --> 00:28:18,120
not expecting this because you have not

588
00:28:14,190 --> 00:28:20,910
set up the policy rules for that when

589
00:28:18,120 --> 00:28:23,100
the SI D is not populated which can be

590
00:28:20,910 --> 00:28:25,890
caused for example by the record demon

591
00:28:23,100 --> 00:28:29,040
demon not running at all or it failed to

592
00:28:25,890 --> 00:28:32,760
establish the you know the keys with the

593
00:28:29,040 --> 00:28:35,340
other host for many reasons or you have

594
00:28:32,760 --> 00:28:37,559
actual key mismatch you set one key on

595
00:28:35,340 --> 00:28:40,350
one host and another host you have set

596
00:28:37,559 --> 00:28:43,510
another key essentially you will also

597
00:28:40,350 --> 00:28:45,610
may see not traffic no traffic

598
00:28:43,510 --> 00:28:47,950
traffic encrypted traffic coming through

599
00:28:45,610 --> 00:28:52,139
your host but not being decrypted

600
00:28:47,950 --> 00:28:52,139
because the colonel cannot decrypt it

601
00:28:52,200 --> 00:28:57,130
other typical issues is essentially when

602
00:28:55,360 --> 00:29:00,250
you have not opened the ports on the

603
00:28:57,130 --> 00:29:02,470
firewall you will see different strange

604
00:29:00,250 --> 00:29:04,419
things like traffic is coming you can

605
00:29:02,470 --> 00:29:07,960
see encrypted packets everything is set

606
00:29:04,419 --> 00:29:09,639
up correctly in SA D and s P D but the

607
00:29:07,960 --> 00:29:11,740
traffic is not getting through very

608
00:29:09,639 --> 00:29:16,809
common reasons just not opened the right

609
00:29:11,740 --> 00:29:22,330
protocol on on the firewall another very

610
00:29:16,809 --> 00:29:23,860
common issue which I made a lot of spend

611
00:29:22,330 --> 00:29:26,710
a lot of time debugging when I made some

612
00:29:23,860 --> 00:29:28,209
mistakes is a symmetric symmetric

613
00:29:26,710 --> 00:29:30,610
mismatch so essentially you have

614
00:29:28,210 --> 00:29:33,880
configured IPSec on one host in require

615
00:29:30,610 --> 00:29:35,678
mode you have not configured it on

616
00:29:33,880 --> 00:29:40,600
another host or you have flushed it

617
00:29:35,679 --> 00:29:42,880
clean the tables in on one side and they

618
00:29:40,600 --> 00:29:45,549
still there are still there on the other

619
00:29:42,880 --> 00:29:48,460
car on the other side and essentially

620
00:29:45,549 --> 00:29:50,200
the kernel cannot make sense of it also

621
00:29:48,460 --> 00:29:52,960
if you use in to know more tunnel mode

622
00:29:50,200 --> 00:29:56,169
you may want to reduce the MTU because

623
00:29:52,960 --> 00:29:58,480
there is small overhead but again all

624
00:29:56,169 --> 00:30:03,279
these things are very rare and if you

625
00:29:58,480 --> 00:30:05,769
deploy this is this is you can also have

626
00:30:03,279 --> 00:30:09,789
some issues with raccoon but again as I

627
00:30:05,769 --> 00:30:12,789
mentioned before this problems are not

628
00:30:09,789 --> 00:30:14,830
really that common I spend a lot of time

629
00:30:12,789 --> 00:30:15,820
debugging them because I was writing

630
00:30:14,830 --> 00:30:20,889
this ansible

631
00:30:15,820 --> 00:30:23,080
role for for IPSec and because this

632
00:30:20,889 --> 00:30:25,299
IPSec configuration is repetitive it's

633
00:30:23,080 --> 00:30:28,570
not a problem with IPSec is just how you

634
00:30:25,299 --> 00:30:31,620
know the the whole process works

635
00:30:28,570 --> 00:30:35,639
it's very prone to mistakes to typos to

636
00:30:31,620 --> 00:30:39,279
misconfigured IP addresses etc it's very

637
00:30:35,639 --> 00:30:40,840
inconvenient to write it by hand so on

638
00:30:39,279 --> 00:30:42,970
the other hand it looks perfect like a

639
00:30:40,840 --> 00:30:44,350
perfect task for for configuration

640
00:30:42,970 --> 00:30:46,380
management like I'm stable and this is

641
00:30:44,350 --> 00:30:48,820
precisely why I have written this

642
00:30:46,380 --> 00:30:53,139
unstable role which is a variable and

643
00:30:48,820 --> 00:30:56,320
get happen on galaxy as well by setting

644
00:30:53,139 --> 00:30:57,549
a few simple parameters like the primary

645
00:30:56,320 --> 00:31:00,460
the one that is really

646
00:30:57,549 --> 00:31:02,679
Cerys the ipsec secret which is kind of

647
00:31:00,460 --> 00:31:07,029
your master secret that you use for all

648
00:31:02,679 --> 00:31:09,309
the all the other hosts you can

649
00:31:07,029 --> 00:31:13,029
automatically deploy its IP side to all

650
00:31:09,309 --> 00:31:17,049
group of servers like you have a group

651
00:31:13,029 --> 00:31:20,139
in your unstable inventory called IPSec

652
00:31:17,049 --> 00:31:21,489
you have ten hosts by just one run and

653
00:31:20,139 --> 00:31:23,830
if you have time I can actually show you

654
00:31:21,489 --> 00:31:25,690
this in action you can configure this

655
00:31:23,830 --> 00:31:29,949
house these 10 machines in a matter of

656
00:31:25,690 --> 00:31:31,899
of a minute to use IPSec immediately in

657
00:31:29,950 --> 00:31:36,249
transport mode very efficiently without

658
00:31:31,899 --> 00:31:38,109
any and any hassle there's a few options

659
00:31:36,249 --> 00:31:43,029
which are explained in the documentation

660
00:31:38,109 --> 00:31:45,879
there are rarely necessary what this

661
00:31:43,029 --> 00:31:47,649
unstable rule role really generates is

662
00:31:45,879 --> 00:31:50,408
this configuration file

663
00:31:47,649 --> 00:31:52,449
IPSec tools config which you can see

664
00:31:50,409 --> 00:31:54,960
writing this by hand is a nightmare

665
00:31:52,450 --> 00:31:57,309
because you have to remember about

666
00:31:54,960 --> 00:31:59,889
switching the directions of the tunnels

667
00:31:57,309 --> 00:32:02,710
you have to configure all these options

668
00:31:59,889 --> 00:32:05,709
etc ansible does all this for you and

669
00:32:02,710 --> 00:32:10,779
this is an ideal tool to do such a

670
00:32:05,710 --> 00:32:12,580
repetitive task in an efficient way the

671
00:32:10,779 --> 00:32:14,679
keys are generated probably that

672
00:32:12,580 --> 00:32:15,908
something if we are on a security

673
00:32:14,679 --> 00:32:19,989
conference that's something we should

674
00:32:15,909 --> 00:32:22,409
probably discuss in detail in a very

675
00:32:19,989 --> 00:32:25,090
simple way because we are working in a

676
00:32:22,409 --> 00:32:26,470
obviously we the best way of doing this

677
00:32:25,090 --> 00:32:29,289
would be to generate them in a

678
00:32:26,470 --> 00:32:31,659
completely random way however we are

679
00:32:29,289 --> 00:32:34,600
living in an unstable world environment

680
00:32:31,659 --> 00:32:37,480
here and every template has slightly

681
00:32:34,600 --> 00:32:39,189
limited the way of interacting with the

682
00:32:37,480 --> 00:32:42,100
others understanding the state of the

683
00:32:39,190 --> 00:32:44,830
other hosts so we are generating the

684
00:32:42,100 --> 00:32:47,529
case in a deterministic way but still

685
00:32:44,830 --> 00:32:51,428
though it's it's secure so essentially

686
00:32:47,529 --> 00:32:53,470
for Aiki so if you are just using the

687
00:32:51,429 --> 00:32:55,899
raccoon daemon the only thing the

688
00:32:53,470 --> 00:32:58,480
raccoon needs is a shared secret between

689
00:32:55,899 --> 00:33:01,570
two hosts and nothing else everything it

690
00:32:58,480 --> 00:33:05,679
will deal with automatically so we just

691
00:33:01,570 --> 00:33:10,060
take the secret concatenated with name

692
00:33:05,679 --> 00:33:13,030
of names of the two hosts that are

693
00:33:10,060 --> 00:33:15,280
kind of connecting and we hash it and

694
00:33:13,030 --> 00:33:17,700
that's it this is the the secret the

695
00:33:15,280 --> 00:33:20,800
secret obviously never leaves the

696
00:33:17,700 --> 00:33:22,510
deployment machine it's never present on

697
00:33:20,800 --> 00:33:27,760
the mast and on the target server is

698
00:33:22,510 --> 00:33:29,440
always there in a hushed form in a set

699
00:33:27,760 --> 00:33:31,629
key mode it's slightly more complicated

700
00:33:29,440 --> 00:33:33,820
because we have to actually generate the

701
00:33:31,630 --> 00:33:36,480
actual encryption keys there you know

702
00:33:33,820 --> 00:33:38,980
down to the hex string for

703
00:33:36,480 --> 00:33:40,930
authentication encryption and then we

704
00:33:38,980 --> 00:33:42,550
have to generate the identifier it's all

705
00:33:40,930 --> 00:33:49,660
manual so it's slightly more complicated

706
00:33:42,550 --> 00:33:53,409
but it is exactly the same principle so

707
00:33:49,660 --> 00:33:55,960
the good thing about using ansible for

708
00:33:53,410 --> 00:33:58,270
this purpose is the atomic the runs of

709
00:33:55,960 --> 00:34:01,690
our symbol labels our atomic so you know

710
00:33:58,270 --> 00:34:04,690
you won't end up in a situation where

711
00:34:01,690 --> 00:34:06,520
you have two hosts partially configured

712
00:34:04,690 --> 00:34:11,700
one of them is configured the other one

713
00:34:06,520 --> 00:34:14,139
is not if you run your ansible play

714
00:34:11,699 --> 00:34:17,469
completely and it will run successfully

715
00:34:14,139 --> 00:34:20,679
you'll always end up with ten hosts that

716
00:34:17,469 --> 00:34:22,810
are either without IPSec or with IPSec

717
00:34:20,679 --> 00:34:26,679
all of them they have the same

718
00:34:22,810 --> 00:34:30,610
configuration for IPSec enabled or

719
00:34:26,679 --> 00:34:34,600
completely disabled obviously because

720
00:34:30,610 --> 00:34:36,610
the kind of the master secret that we

721
00:34:34,600 --> 00:34:39,219
are keeping in our configuration

722
00:34:36,610 --> 00:34:40,750
variables on the deployment host is a

723
00:34:39,219 --> 00:34:43,929
secret and should we protect that

724
00:34:40,750 --> 00:34:45,969
obviously we should be using Hoshi Corp

725
00:34:43,929 --> 00:34:49,239
or unstable vault which is which I'm

726
00:34:45,969 --> 00:34:53,620
using personally or any other secret

727
00:34:49,239 --> 00:34:56,139
proper secret management solution and if

728
00:34:53,620 --> 00:34:58,569
you have any questions just feel free to

729
00:34:56,139 --> 00:35:06,370
shoot I'll try to demonstrate how he

730
00:34:58,570 --> 00:35:11,290
actually runs on a live environment so

731
00:35:06,370 --> 00:35:14,350
this is a this is a to Ubuntu boxes on

732
00:35:11,290 --> 00:35:19,900
cloud this is one of them has a sniffer

733
00:35:14,350 --> 00:35:22,900
running this is the same machine where I

734
00:35:19,900 --> 00:35:25,330
will open a server using netcat

735
00:35:22,900 --> 00:35:27,550
so I'll just move it to the top of the

736
00:35:25,330 --> 00:35:31,660
screen this is a net cut listening on

737
00:35:27,550 --> 00:35:34,900
port 3 1 3 3 7 and I don't remember what

738
00:35:31,660 --> 00:35:37,240
kind of police I have loaded on these

739
00:35:34,900 --> 00:35:40,950
machines right now but we can see this

740
00:35:37,240 --> 00:35:44,200
on sniffers essentially we are sending

741
00:35:40,950 --> 00:35:49,000
etc' pass password file to the other

742
00:35:44,200 --> 00:35:51,759
server and it's gone through very

743
00:35:49,000 --> 00:35:54,250
quickly and we have received actually

744
00:35:51,760 --> 00:35:57,460
what we received is a plaintext traffic

745
00:35:54,250 --> 00:36:00,280
so no policy is loaded at this moment oh

746
00:35:57,460 --> 00:36:03,640
this is probably better from the it's

747
00:36:00,280 --> 00:36:06,160
more you can see this slightly more this

748
00:36:03,640 --> 00:36:10,210
is regular tight TCP unencrypted all the

749
00:36:06,160 --> 00:36:13,750
packet internals are plainly visible we

750
00:36:10,210 --> 00:36:19,450
go to my deployment machine this is the

751
00:36:13,750 --> 00:36:22,930
previous run of the play and they file

752
00:36:19,450 --> 00:36:25,930
with the configuration configuration

753
00:36:22,930 --> 00:36:28,120
variables it's really the only option

754
00:36:25,930 --> 00:36:29,770
that is really necessary is IPSec secret

755
00:36:28,120 --> 00:36:32,580
and it's a long string as you can see it

756
00:36:29,770 --> 00:36:35,650
generated using opus open SSL rant it's

757
00:36:32,580 --> 00:36:38,590
completely random these options are not

758
00:36:35,650 --> 00:36:40,600
required I'm just using them so I can

759
00:36:38,590 --> 00:36:42,430
switch the modes different modes for the

760
00:36:40,600 --> 00:36:47,940
purpose of this presentation so if this

761
00:36:42,430 --> 00:36:51,430
right now the IPSec policy is disabled

762
00:36:47,940 --> 00:36:54,070
which is essentially kind of a automatic

763
00:36:51,430 --> 00:36:55,720
kill switch I will delete this line

764
00:36:54,070 --> 00:37:03,420
completely so the default configuration

765
00:36:55,720 --> 00:37:06,759
will be restored and it's running the

766
00:37:03,420 --> 00:37:08,740
there's a lot of steps being done in the

767
00:37:06,760 --> 00:37:10,810
in the beginning essentially installing

768
00:37:08,740 --> 00:37:13,209
all the ensuring all the packages are

769
00:37:10,810 --> 00:37:15,100
installed raccoon is installed IPSec

770
00:37:13,210 --> 00:37:19,900
tours are insulted cetera and it's all

771
00:37:15,100 --> 00:37:22,080
this what is really critical is this

772
00:37:19,900 --> 00:37:25,000
line this is where the actual

773
00:37:22,080 --> 00:37:27,900
configuration is being generated and if

774
00:37:25,000 --> 00:37:27,900
we go to the server

775
00:37:31,690 --> 00:37:39,530
this is what was just generated and you

776
00:37:34,400 --> 00:37:42,410
can see this is configuration for no the

777
00:37:39,530 --> 00:37:45,349
the actual encryption to encryption

778
00:37:42,410 --> 00:37:48,740
parameters and everything and we can

779
00:37:45,349 --> 00:37:50,839
have a look what I did the IPSec mode I

780
00:37:48,740 --> 00:37:54,229
have set is a manual King which is kind

781
00:37:50,839 --> 00:37:56,240
of more slightly more complicated from

782
00:37:54,230 --> 00:37:57,440
the configuration point of view but we

783
00:37:56,240 --> 00:38:00,020
don't really care because all these

784
00:37:57,440 --> 00:38:03,020
generated automatically and now we have

785
00:38:00,020 --> 00:38:09,470
seen for running we can rerun the server

786
00:38:03,020 --> 00:38:12,170
the net cut we sent the data and as you

787
00:38:09,470 --> 00:38:15,950
can see now it's all ESP packet so it's

788
00:38:12,170 --> 00:38:18,770
all encrypted and this will be

789
00:38:15,950 --> 00:38:21,529
continuing forever essentially and as

790
00:38:18,770 --> 00:38:24,560
long as the policies are enabled okay we

791
00:38:21,530 --> 00:38:26,810
can try to change it to even more

792
00:38:24,560 --> 00:38:30,859
default policy which is using raccoon

793
00:38:26,810 --> 00:38:33,500
raccoon daemon so we delete the IPSec

794
00:38:30,859 --> 00:38:38,598
mode parameter rerun the policy again

795
00:38:33,500 --> 00:38:41,210
sorry we run the plate again in the

796
00:38:38,599 --> 00:38:44,020
meantime I will rerun the server lets

797
00:38:41,210 --> 00:38:44,020
you look here

798
00:38:52,620 --> 00:38:59,410
there were more changes because now the

799
00:38:56,920 --> 00:39:01,690
play has actually not only configured

800
00:38:59,410 --> 00:39:06,490
the IPSec configuration but also racoon

801
00:39:01,690 --> 00:39:08,590
configuration so this is raccoon service

802
00:39:06,490 --> 00:39:12,430
racking pre-shared keys raccoon

803
00:39:08,590 --> 00:39:18,180
configuration etc and if we go to the

804
00:39:12,430 --> 00:39:23,080
other server now it has been sent and

805
00:39:18,180 --> 00:39:25,180
what you can see here is it's a KMP

806
00:39:23,080 --> 00:39:28,270
which is actually the older name for a

807
00:39:25,180 --> 00:39:32,589
key protocol so what has happened the

808
00:39:28,270 --> 00:39:35,080
protocol is currently running in user

809
00:39:32,590 --> 00:39:37,780
mode so no not there's no requirement to

810
00:39:35,080 --> 00:39:41,380
use encryption so if we scroll up we can

811
00:39:37,780 --> 00:39:44,470
see that that the actual file was sent

812
00:39:41,380 --> 00:39:46,930
using plaintext TCP and you can see this

813
00:39:44,470 --> 00:39:48,939
TCP the the plaintext packets here

814
00:39:46,930 --> 00:39:52,960
because we told it that we do not

815
00:39:48,940 --> 00:39:57,970
require encryption at this moment

816
00:39:52,960 --> 00:40:01,000
however if we send it next time it will

817
00:39:57,970 --> 00:40:05,290
be encrypted because during the first

818
00:40:01,000 --> 00:40:08,260
run there were no existing encryption

819
00:40:05,290 --> 00:40:10,270
configuration so the kernel said okay

820
00:40:08,260 --> 00:40:12,220
I'll tell the raccoon to establish the

821
00:40:10,270 --> 00:40:14,290
connection but because I was told I can

822
00:40:12,220 --> 00:40:16,720
send that file in unencrypted I'll just

823
00:40:14,290 --> 00:40:18,420
send it as soon as possible in the

824
00:40:16,720 --> 00:40:20,649
second round we already had an existing

825
00:40:18,420 --> 00:40:22,540
encryption configuration so it was just

826
00:40:20,650 --> 00:40:26,140
sent using this encryption configuration

827
00:40:22,540 --> 00:40:30,360
if we want to prevent any unencrypted

828
00:40:26,140 --> 00:40:35,879
traffic from running we would set IPSec

829
00:40:30,360 --> 00:40:35,880
policy require

830
00:40:42,890 --> 00:40:50,519
let's restore the server and because

831
00:40:49,079 --> 00:40:52,500
each run will flash all the

832
00:40:50,519 --> 00:40:57,209
configuration so we will be dealing with

833
00:40:52,500 --> 00:41:00,990
a fresh kind of fresh start in this case

834
00:40:57,210 --> 00:41:03,900
okay let's scroll a bit let's run it you

835
00:41:00,990 --> 00:41:06,359
see there is a slight delay about one or

836
00:41:03,900 --> 00:41:08,970
two six two seconds and this is where

837
00:41:06,359 --> 00:41:10,529
the kernel holds the TCP transfer

838
00:41:08,970 --> 00:41:13,019
because at the same time in parallel

839
00:41:10,529 --> 00:41:14,339
it's talking to raccoon raccoon is

840
00:41:13,019 --> 00:41:16,589
talking to the other house they are

841
00:41:14,339 --> 00:41:19,200
exchanging the case and once the

842
00:41:16,589 --> 00:41:21,569
configuration for encryption has been

843
00:41:19,200 --> 00:41:24,019
said the colonel goes on with sending

844
00:41:21,569 --> 00:41:27,329
the traffic and you can see this

845
00:41:24,019 --> 00:41:30,390
encrypted packets here and at this point

846
00:41:27,329 --> 00:41:34,529
you can send any traffic it can be UDP

847
00:41:30,390 --> 00:41:37,410
it can be TCP all kinds of exotic

848
00:41:34,529 --> 00:41:39,779
protocols that are not neither TCP or

849
00:41:37,410 --> 00:41:42,170
UDP everything will be encrypted

850
00:41:39,779 --> 00:41:44,730
essentially everything that you set a

851
00:41:42,170 --> 00:41:47,759
requirement for encryption you can you

852
00:41:44,730 --> 00:41:50,609
can make exceptions obviously so if you

853
00:41:47,759 --> 00:41:54,089
look at the unstable role by default it

854
00:41:50,609 --> 00:41:58,140
will exclude ICMP and it will also

855
00:41:54,089 --> 00:42:01,558
exclude SSH so you can SSH between the

856
00:41:58,140 --> 00:42:05,279
two boxes you know even if you miss

857
00:42:01,559 --> 00:42:05,640
configure the IPSec configuration that's

858
00:42:05,279 --> 00:42:08,119
it

859
00:42:05,640 --> 00:42:10,890
I'm using this solution on all my

860
00:42:08,119 --> 00:42:13,349
servers on my server farm for the last

861
00:42:10,890 --> 00:42:17,098
year or two and it's been just just

862
00:42:13,349 --> 00:42:18,839
there and that's it thank you very much

863
00:42:17,099 --> 00:42:23,839
I don't know if we have any time for the

864
00:42:18,839 --> 00:42:23,839
questions yeah

865
00:42:27,030 --> 00:42:30,770
if we got any questions

866
00:42:35,090 --> 00:42:39,670
I don't really see because there's the

867
00:42:37,070 --> 00:42:42,350
light is very strong

868
00:42:39,670 --> 00:42:44,300
yeah I'm not working guys those might be

869
00:42:42,350 --> 00:42:46,910
a dumb question but if you're encrypting

870
00:42:44,300 --> 00:42:49,520
all the traffic that can earlier do you

871
00:42:46,910 --> 00:42:51,589
have any kind of mechanism or facility

872
00:42:49,520 --> 00:42:53,390
for inspecting traffic as well if that's

873
00:42:51,590 --> 00:42:55,700
something you want to do wait for money

874
00:42:53,390 --> 00:42:57,890
oh yeah that's a that you passed a very

875
00:42:55,700 --> 00:42:59,029
important point how you make sure that

876
00:42:57,890 --> 00:43:01,580
you are actually encrypting their

877
00:42:59,030 --> 00:43:03,230
traffic because this is a very good

878
00:43:01,580 --> 00:43:06,500
point because I have seen situations

879
00:43:03,230 --> 00:43:09,350
where I deployed policies like that and

880
00:43:06,500 --> 00:43:11,150
then for a week I was certain that the

881
00:43:09,350 --> 00:43:14,480
traffic is running encrypted but it was

882
00:43:11,150 --> 00:43:18,410
not you can do this in many ways so one

883
00:43:14,480 --> 00:43:21,650
of the ways is just to set up firewall

884
00:43:18,410 --> 00:43:26,149
rules that will warn you about any TCP

885
00:43:21,650 --> 00:43:29,330
traffic or UDP traffic leaving your your

886
00:43:26,150 --> 00:43:33,320
machine essentially if you set up ESP

887
00:43:29,330 --> 00:43:35,810
there's no TCP or UDP traffic leaving

888
00:43:33,320 --> 00:43:37,690
your computer so it doesn't doesn't have

889
00:43:35,810 --> 00:43:39,980
to be blocking Kuril it can be just a

890
00:43:37,690 --> 00:43:41,960
logging cruel so you can see that there

891
00:43:39,980 --> 00:43:44,150
is some unencrypted traffic leaving the

892
00:43:41,960 --> 00:43:45,440
machine how many cents I was also

893
00:43:44,150 --> 00:43:50,450
thinking about it along the lines of

894
00:43:45,440 --> 00:43:52,610
like let's type of facilities where you

895
00:43:50,450 --> 00:43:54,169
want to inspect attack traffic for

896
00:43:52,610 --> 00:43:54,710
signatures or whatever else for

897
00:43:54,170 --> 00:43:59,150
intrusion

898
00:43:54,710 --> 00:44:02,810
oh you mean okay like ideas probes for

899
00:43:59,150 --> 00:44:06,410
yeah I mean to some extent you can

900
00:44:02,810 --> 00:44:08,720
because if you know the keys you can so

901
00:44:06,410 --> 00:44:10,850
in the manual manual encryption mode you

902
00:44:08,720 --> 00:44:13,540
can definitely decrypt the traffic you

903
00:44:10,850 --> 00:44:16,130
know their actual keys and if you run

904
00:44:13,540 --> 00:44:18,920
Wireshark for example Wireshark and I

905
00:44:16,130 --> 00:44:20,630
guess most of the commercial probes they

906
00:44:18,920 --> 00:44:24,110
also can decrypt the traffic if they

907
00:44:20,630 --> 00:44:25,940
know the keys otherwise I have not

908
00:44:24,110 --> 00:44:28,760
really thought about this I guess it

909
00:44:25,940 --> 00:44:31,630
you'd need a separate tab that sees the

910
00:44:28,760 --> 00:44:31,630
unencrypted traffic

911
00:44:34,060 --> 00:44:39,640
so I have another question yeah in a

912
00:44:37,570 --> 00:44:42,670
regular TLS setup I would have something

913
00:44:39,640 --> 00:44:46,029
like certificate revocation lists if got

914
00:44:42,670 --> 00:44:49,710
leaked what would be the equivalent here

915
00:44:46,030 --> 00:44:52,630
to I just run the ansible playbook again

916
00:44:49,710 --> 00:44:57,640
if one of my keys get compromised oh

917
00:44:52,630 --> 00:45:00,970
okay CR else well if you are using if

918
00:44:57,640 --> 00:45:03,790
you are using raccoon with TLS certs

919
00:45:00,970 --> 00:45:06,310
then you just use the regular serials

920
00:45:03,790 --> 00:45:08,860
you know I mean it's like if you if you

921
00:45:06,310 --> 00:45:11,049
run a pre-shared keys then essentially

922
00:45:08,860 --> 00:45:16,170
the solution will be just to rerun with

923
00:45:11,050 --> 00:45:16,170
change master I guess actually if you

924
00:45:16,860 --> 00:45:20,890
this would be only the case really I'm

925
00:45:19,150 --> 00:45:24,970
just thinking about scenario if you have

926
00:45:20,890 --> 00:45:28,000
someone who broke into your server one

927
00:45:24,970 --> 00:45:30,640
of the servers but even then they will

928
00:45:28,000 --> 00:45:33,070
be only able to see the traffic from

929
00:45:30,640 --> 00:45:34,960
this server they will be not able to see

930
00:45:33,070 --> 00:45:36,220
traffic between any other servers

931
00:45:34,960 --> 00:45:39,520
because they are using completely

932
00:45:36,220 --> 00:45:41,049
different keys so only the same then

933
00:45:39,520 --> 00:45:43,660
machine that was compromised would be

934
00:45:41,050 --> 00:45:45,100
compromised and if you are on the

935
00:45:43,660 --> 00:45:47,080
machine you got root you don't really

936
00:45:45,100 --> 00:45:50,350
need to decrypt ipsec to see the traffic

937
00:45:47,080 --> 00:45:52,900
right but you know in a general case I

938
00:45:50,350 --> 00:45:54,069
would say changing the master secret and

939
00:45:52,900 --> 00:45:56,620
we're running the role would be the

940
00:45:54,070 --> 00:46:05,130
solution it would be pretty quick okay

941
00:45:56,620 --> 00:46:10,989
thank you all right thank you very much

942
00:46:05,130 --> 00:46:10,989
[Applause]

