1
00:00:00,210 --> 00:00:05,100
right so my name's Liz I work for aqua

2
00:00:03,060 --> 00:00:07,199
security you might have met my

3
00:00:05,100 --> 00:00:09,120
colleagues Jane and Diego downstairs if

4
00:00:07,200 --> 00:00:10,170
you haven't already do go and say hi to

5
00:00:09,120 --> 00:00:13,739
them they're lovely

6
00:00:10,170 --> 00:00:16,320
and today I am going to talk about

7
00:00:13,740 --> 00:00:19,770
practical steps that you can take to

8
00:00:16,320 --> 00:00:22,170
secure containers throughout the CI CD

9
00:00:19,770 --> 00:00:23,789
process can I have a little show of

10
00:00:22,170 --> 00:00:27,480
hands for everybody who's using

11
00:00:23,789 --> 00:00:33,540
containers in production already pretty

12
00:00:27,480 --> 00:00:35,519
good number of you yeah okay so when we

13
00:00:33,540 --> 00:00:37,739
talk about containers and we're

14
00:00:35,520 --> 00:00:41,550
typically talking about containers under

15
00:00:37,739 --> 00:00:44,399
orchestration these days we have some

16
00:00:41,550 --> 00:00:46,919
number of servers and we're going to be

17
00:00:44,399 --> 00:00:49,350
deploying code somewhere on those

18
00:00:46,920 --> 00:00:51,059
servers but under orchestration we don't

19
00:00:49,350 --> 00:00:53,070
really get to control that anymore all

20
00:00:51,059 --> 00:00:56,280
we know is this container image is going

21
00:00:53,070 --> 00:00:59,190
to get instantiated somewhere in the

22
00:00:56,280 --> 00:01:00,660
deployment and there could be hundreds

23
00:00:59,190 --> 00:01:02,760
of different let's say they're

24
00:01:00,660 --> 00:01:04,589
microservices this kind of applies if

25
00:01:02,760 --> 00:01:06,479
they're not microservices but for a lot

26
00:01:04,589 --> 00:01:09,689
of people who are containers it goes

27
00:01:06,479 --> 00:01:11,310
hand in hand with micro-services so

28
00:01:09,689 --> 00:01:14,279
there are a lot of different container

29
00:01:11,310 --> 00:01:16,680
images and then each one of those could

30
00:01:14,280 --> 00:01:19,080
have several instances so we could very

31
00:01:16,680 --> 00:01:21,630
easily have thousands of containers

32
00:01:19,080 --> 00:01:26,039
running distributed across the cluster

33
00:01:21,630 --> 00:01:29,220
of machines and they tend to turn over

34
00:01:26,040 --> 00:01:31,619
pretty quickly data dog did a survey

35
00:01:29,220 --> 00:01:33,689
last year that said the average lifetime

36
00:01:31,619 --> 00:01:37,829
of a container in production is about

37
00:01:33,689 --> 00:01:39,990
half days which contrasts with about 23

38
00:01:37,829 --> 00:01:43,500
days for a virtual machine in the kind

39
00:01:39,990 --> 00:01:46,320
of traditional deployments so we've got

40
00:01:43,500 --> 00:01:47,880
all these containers running code and

41
00:01:46,320 --> 00:01:49,679
they don't last very long and we don't

42
00:01:47,880 --> 00:01:53,399
really get to control where they're

43
00:01:49,680 --> 00:01:56,159
running so if you're starting from the

44
00:01:53,399 --> 00:02:00,240
position of thinking about security from

45
00:01:56,159 --> 00:02:02,040
a traditional point of view it's no

46
00:02:00,240 --> 00:02:03,809
wonder that it kind of causes you some

47
00:02:02,040 --> 00:02:06,119
headaches to think well how am I going

48
00:02:03,810 --> 00:02:08,280
to secure all these container instances

49
00:02:06,119 --> 00:02:10,590
running all over the place for just a

50
00:02:08,280 --> 00:02:12,150
couple of days

51
00:02:10,590 --> 00:02:15,540
and if you feel like that you are very

52
00:02:12,150 --> 00:02:17,760
much not alone so this survey from last

53
00:02:15,540 --> 00:02:19,769
year it showed that the vast majority of

54
00:02:17,760 --> 00:02:21,470
people agreed that security was

55
00:02:19,769 --> 00:02:25,260
something that they were worried about

56
00:02:21,470 --> 00:02:27,090
when it came to deploying containers so

57
00:02:25,260 --> 00:02:29,790
there are lots and lots of things you

58
00:02:27,090 --> 00:02:33,500
can do to improve the security of your

59
00:02:29,790 --> 00:02:35,790
containers automation is your friend

60
00:02:33,500 --> 00:02:39,060
with all those thousands of instances

61
00:02:35,790 --> 00:02:41,129
you can't possibly really get on top of

62
00:02:39,060 --> 00:02:43,260
that manually so we're going to have to

63
00:02:41,129 --> 00:02:46,790
use automated tools we're going to have

64
00:02:43,260 --> 00:02:49,649
to think about security as part of the

65
00:02:46,790 --> 00:02:51,390
automation that we build into you know

66
00:02:49,650 --> 00:02:53,940
what we've been calling DevOps for a

67
00:02:51,390 --> 00:02:56,879
while now so what I'm going to do this

68
00:02:53,940 --> 00:02:58,620
afternoon is show you some practical

69
00:02:56,879 --> 00:03:02,849
things that we can do at each different

70
00:02:58,620 --> 00:03:05,010
stage of CI CD pipeline you might not

71
00:03:02,849 --> 00:03:06,988
want to do all of them you might want to

72
00:03:05,010 --> 00:03:08,340
do all of them some of them may or may

73
00:03:06,989 --> 00:03:10,769
not be appropriate for you but I hope

74
00:03:08,340 --> 00:03:12,890
that you'll find at least one thing that

75
00:03:10,769 --> 00:03:16,549
you can take away and put into your

76
00:03:12,890 --> 00:03:21,869
organization when you go back next week

77
00:03:16,549 --> 00:03:24,329
so super super simple portrayal of a CI

78
00:03:21,870 --> 00:03:25,799
CD pipeline we're writing software we're

79
00:03:24,329 --> 00:03:30,349
building it and then we deploy it

80
00:03:25,799 --> 00:03:33,359
somehow into a cloud of machines so

81
00:03:30,349 --> 00:03:35,250
we're going to look at code quality

82
00:03:33,359 --> 00:03:37,139
we're going to look at testing for

83
00:03:35,250 --> 00:03:39,660
security and we're going to look at

84
00:03:37,139 --> 00:03:43,440
vulnerability scanning and all of those

85
00:03:39,660 --> 00:03:46,470
kind of aspects will help us try to

86
00:03:43,440 --> 00:03:51,109
build and artifacts that as far as we

87
00:03:46,470 --> 00:03:53,609
can manage are free of security defects

88
00:03:51,109 --> 00:03:55,470
then we're going to look at the security

89
00:03:53,609 --> 00:03:58,040
the hosts we're going to run these

90
00:03:55,470 --> 00:04:00,389
containers on we're going to talk about

91
00:03:58,040 --> 00:04:03,510
policies and configuration for those

92
00:04:00,389 --> 00:04:06,090
images as we deploy them with the

93
00:04:03,510 --> 00:04:08,910
intention that what we're running is the

94
00:04:06,090 --> 00:04:12,150
code that we expected to run with the

95
00:04:08,910 --> 00:04:14,280
host configuration that we expected and

96
00:04:12,150 --> 00:04:16,769
then finally we'll look at what happens

97
00:04:14,280 --> 00:04:19,260
in runtime so once these containers are

98
00:04:16,769 --> 00:04:23,020
running some things we can do to either

99
00:04:19,260 --> 00:04:27,310
detect or prevent unexpected

100
00:04:23,020 --> 00:04:27,669
normally okay say we'll start with the

101
00:04:27,310 --> 00:04:30,520
beginning

102
00:04:27,669 --> 00:04:33,669
we'll start with writing code security

103
00:04:30,520 --> 00:04:35,859
starts with developers so I'm sure

104
00:04:33,669 --> 00:04:38,500
you're all familiar with Bobbie tables

105
00:04:35,860 --> 00:04:40,569
anybody not come across xkcd and and

106
00:04:38,500 --> 00:04:45,610
Bobbie tables it's probably one of the

107
00:04:40,569 --> 00:04:47,800
most famous of the xkcd cartoons and I

108
00:04:45,610 --> 00:04:51,009
did a talk with Justin Cormac from

109
00:04:47,800 --> 00:04:54,539
docker a few months ago and he built a

110
00:04:51,009 --> 00:04:58,560
demo of this so an implementation of

111
00:04:54,539 --> 00:05:03,550
exactly this Bobbie tables problem so

112
00:04:58,560 --> 00:05:05,710
I'm just going to bring up this is a

113
00:05:03,550 --> 00:05:09,750
really really simple web application and

114
00:05:05,710 --> 00:05:12,310
it database application rather sorry

115
00:05:09,750 --> 00:05:19,270
with a database of student information

116
00:05:12,310 --> 00:05:22,840
and I have the little command to run a

117
00:05:19,270 --> 00:05:26,680
query against this web server and query

118
00:05:22,840 --> 00:05:30,960
the database so I just run this and we

119
00:05:26,680 --> 00:05:34,990
find out that Robert is 23 years old and

120
00:05:30,960 --> 00:05:37,719
if we run it again as I'm sure you all

121
00:05:34,990 --> 00:05:41,259
realized not only did we query that

122
00:05:37,719 --> 00:05:43,479
Bobby was 23 years old but we also did a

123
00:05:41,259 --> 00:05:46,930
sequel injection and drop the students

124
00:05:43,479 --> 00:05:50,050
table so that sequel injection in action

125
00:05:46,930 --> 00:05:53,319
showing how you know we can end up

126
00:05:50,050 --> 00:05:56,740
losing valuable data if we don't write

127
00:05:53,319 --> 00:06:01,599
our code to protect against sequel

128
00:05:56,740 --> 00:06:04,509
injection so how can we tell what can we

129
00:06:01,599 --> 00:06:08,430
do to automate this we can use static

130
00:06:04,509 --> 00:06:13,389
analysis tools and if I look in my

131
00:06:08,430 --> 00:06:16,870
docker file for this and I've actually

132
00:06:13,389 --> 00:06:18,909
got a line here to run a tool called

133
00:06:16,870 --> 00:06:21,069
gasp it's a static analysis tool for

134
00:06:18,909 --> 00:06:23,620
golang there are all sorts of static

135
00:06:21,069 --> 00:06:25,599
analysis tools what I'm showing here

136
00:06:23,620 --> 00:06:31,149
though is that you can do this as part

137
00:06:25,599 --> 00:06:33,990
of your docker build step so if I run

138
00:06:31,149 --> 00:06:33,990
this build

139
00:06:34,990 --> 00:06:42,880
and at the point where it runs that

140
00:06:39,520 --> 00:06:46,659
static analysis tool it's going to fail

141
00:06:42,880 --> 00:06:50,440
it found the problem and it's failed

142
00:06:46,660 --> 00:06:53,640
that build so just by building that kind

143
00:06:50,440 --> 00:06:58,030
of tooling into the into the CI CD bills

144
00:06:53,640 --> 00:06:59,409
we can detect issues like that static

145
00:06:58,030 --> 00:07:02,260
analysis isn't going to find every

146
00:06:59,410 --> 00:07:04,630
single possible security defect in your

147
00:07:02,260 --> 00:07:07,380
code so maybe also think about things

148
00:07:04,630 --> 00:07:10,120
like code reviewing and peer reviewing

149
00:07:07,380 --> 00:07:11,560
but security does begin with developers

150
00:07:10,120 --> 00:07:14,080
and I think that's a kind of really good

151
00:07:11,560 --> 00:07:16,540
example of showing how everybody in the

152
00:07:14,080 --> 00:07:19,659
kind of dev and operations and security

153
00:07:16,540 --> 00:07:24,880
field need to work together to get

154
00:07:19,660 --> 00:07:26,740
secure code so the next step in our CCI

155
00:07:24,880 --> 00:07:31,050
CD pipeline after we've written some

156
00:07:26,740 --> 00:07:34,500
code is very often to test that code and

157
00:07:31,050 --> 00:07:37,870
testing doesn't have to just be for

158
00:07:34,500 --> 00:07:39,730
functional testing I'm going to show an

159
00:07:37,870 --> 00:07:41,830
example here of doing some security

160
00:07:39,730 --> 00:07:46,390
testing and in particular we're going to

161
00:07:41,830 --> 00:07:48,090
look at testing the encryption libraries

162
00:07:46,390 --> 00:07:50,770
being used by a particular application

163
00:07:48,090 --> 00:07:52,929
you might want to do this for regulatory

164
00:07:50,770 --> 00:07:55,539
reasons because everybody loves a bit of

165
00:07:52,930 --> 00:08:00,690
like EU regulations in a presentation

166
00:07:55,540 --> 00:08:02,980
right okay so if you have to do

167
00:08:00,690 --> 00:08:06,450
encryption and most of you probably do

168
00:08:02,980 --> 00:08:10,840
you could do something like this to test

169
00:08:06,450 --> 00:08:14,020
the SSL libraries that you're using I've

170
00:08:10,840 --> 00:08:16,479
got a docker compose file here that it

171
00:08:14,020 --> 00:08:21,430
just runs an engine X container but it

172
00:08:16,480 --> 00:08:24,580
also runs this test SSL container which

173
00:08:21,430 --> 00:08:28,530
is going to test the SSL connections or

174
00:08:24,580 --> 00:08:32,860
TLS connections that are offered by my

175
00:08:28,530 --> 00:08:35,978
nginx here so I can just bring up this

176
00:08:32,860 --> 00:08:38,560
docker compose it takes a little while

177
00:08:35,979 --> 00:08:43,270
here but it's going to try various

178
00:08:38,559 --> 00:08:44,349
different versions of SSL and tell us if

179
00:08:43,270 --> 00:08:46,569
there are any problem

180
00:08:44,350 --> 00:08:48,780
versions anything that perhaps we might

181
00:08:46,570 --> 00:08:53,320
want to update in this particular

182
00:08:48,780 --> 00:08:55,360
implementation talk amongst ourselves

183
00:08:53,320 --> 00:08:58,420
for a minute okay now it started to find

184
00:08:55,360 --> 00:09:00,460
so it's saying yeah SSL v2 is no longer

185
00:08:58,420 --> 00:09:05,770
considered secure but it's not offered

186
00:09:00,460 --> 00:09:08,670
so that's a good thing but SSL v3 which

187
00:09:05,770 --> 00:09:10,840
is also not really considered secure is

188
00:09:08,670 --> 00:09:12,959
also offered so this would be something

189
00:09:10,840 --> 00:09:15,220
we'd really want to update in this

190
00:09:12,960 --> 00:09:16,900
application and then we start seeing

191
00:09:15,220 --> 00:09:19,300
things like TLS which it's perfectly

192
00:09:16,900 --> 00:09:22,840
happy with this goes on and on for a few

193
00:09:19,300 --> 00:09:26,099
minutes the point being you can do

194
00:09:22,840 --> 00:09:28,240
security testing as part of your

195
00:09:26,100 --> 00:09:30,400
automated testing you could also do

196
00:09:28,240 --> 00:09:33,760
things like performance testing testing

197
00:09:30,400 --> 00:09:35,640
doesn't have to just be about functional

198
00:09:33,760 --> 00:09:40,060
testing

199
00:09:35,640 --> 00:09:42,640
okay so we've written our code we've

200
00:09:40,060 --> 00:09:46,390
tested our code and we want to build

201
00:09:42,640 --> 00:09:48,640
some container images and this is a

202
00:09:46,390 --> 00:09:51,430
really great point to do vulnerability

203
00:09:48,640 --> 00:09:55,090
scanning so put up your hands again if

204
00:09:51,430 --> 00:09:57,250
you are using containers okay and leave

205
00:09:55,090 --> 00:10:01,240
your hands up if you are scanning them

206
00:09:57,250 --> 00:10:03,100
for vulnerabilities okay those of you

207
00:10:01,240 --> 00:10:05,320
your hands up excellent work those of

208
00:10:03,100 --> 00:10:07,150
you who had your hands up and put them

209
00:10:05,320 --> 00:10:10,990
down again this is something I really

210
00:10:07,150 --> 00:10:14,770
think you should do so um vulnerability

211
00:10:10,990 --> 00:10:16,900
scanning is looking for known Seavey's

212
00:10:14,770 --> 00:10:18,340
known vulnerabilities in the

213
00:10:16,900 --> 00:10:20,860
dependencies that you're building into

214
00:10:18,340 --> 00:10:22,540
your container images and again you may

215
00:10:20,860 --> 00:10:26,830
need to do this for regulatory reasons

216
00:10:22,540 --> 00:10:30,130
so if you're having to be PCI compliant

217
00:10:26,830 --> 00:10:32,380
there are actually rules about having to

218
00:10:30,130 --> 00:10:34,540
rank the vulnerabilities in your code

219
00:10:32,380 --> 00:10:36,160
and having to patch I'm going to use the

220
00:10:34,540 --> 00:10:39,130
word patch because we'll come to that in

221
00:10:36,160 --> 00:10:41,319
a second but make sure that your the

222
00:10:39,130 --> 00:10:45,790
code you're running has the latest

223
00:10:41,320 --> 00:10:48,550
security patches applied even if you

224
00:10:45,790 --> 00:10:53,939
don't have to comply with things like

225
00:10:48,550 --> 00:10:56,829
PCI I the reality is most exploits are

226
00:10:53,940 --> 00:10:57,950
due to somebody running with some known

227
00:10:56,830 --> 00:10:59,510
vulnerability

228
00:10:57,950 --> 00:11:04,520
and then that known vulnerability being

229
00:10:59,510 --> 00:11:07,670
exploited hello Equifax so you really do

230
00:11:04,520 --> 00:11:10,460
want to have some kind of process making

231
00:11:07,670 --> 00:11:13,880
sure you're not you're not deploying

232
00:11:10,460 --> 00:11:16,580
code with known vulnerabilities so

233
00:11:13,880 --> 00:11:18,710
vulnerability scanning looks at the

234
00:11:16,580 --> 00:11:21,320
contents of your container image and

235
00:11:18,710 --> 00:11:25,640
looks at all the packages and says are

236
00:11:21,320 --> 00:11:28,220
there any known vulnerabilities by

237
00:11:25,640 --> 00:11:31,880
building into the CIC deep pipeline we

238
00:11:28,220 --> 00:11:35,200
can say let's fail that build if we find

239
00:11:31,880 --> 00:11:37,460
significant issues you also need to be

240
00:11:35,200 --> 00:11:39,920
doing vulnerability scanning on a

241
00:11:37,460 --> 00:11:43,730
regular basis because as I'm sure you

242
00:11:39,920 --> 00:11:46,550
all know new vulnerabilities get found

243
00:11:43,730 --> 00:11:49,520
in existing code in old code so you

244
00:11:46,550 --> 00:11:51,170
could have a library that you build into

245
00:11:49,520 --> 00:11:53,750
your images that you've depended on for

246
00:11:51,170 --> 00:11:55,430
three years and tomorrow somebody could

247
00:11:53,750 --> 00:11:59,210
find an important vulnerability in that

248
00:11:55,430 --> 00:12:05,449
so regular scanning is an important

249
00:11:59,210 --> 00:12:09,440
factor and then it's kind of obvious but

250
00:12:05,450 --> 00:12:12,020
your scanner can only scan the contents

251
00:12:09,440 --> 00:12:14,480
of the image that it's looking at so

252
00:12:12,020 --> 00:12:19,270
this takes us to a kind of anti pattern

253
00:12:14,480 --> 00:12:21,860
that hopefully none of you are doing so

254
00:12:19,270 --> 00:12:25,670
you should build your container images

255
00:12:21,860 --> 00:12:29,150
and then treat them as immutable when

256
00:12:25,670 --> 00:12:30,829
you run a container you really don't

257
00:12:29,150 --> 00:12:33,079
want that container to be going out and

258
00:12:30,830 --> 00:12:35,990
doing I don't know get install or

259
00:12:33,080 --> 00:12:37,880
something or even worse manually SSH

260
00:12:35,990 --> 00:12:40,130
into a container and installing some

261
00:12:37,880 --> 00:12:42,860
software you need to build the container

262
00:12:40,130 --> 00:12:44,810
image containing all of the software

263
00:12:42,860 --> 00:12:47,090
that it's going to run you need to

264
00:12:44,810 --> 00:12:49,910
install more software on it build a new

265
00:12:47,090 --> 00:12:52,520
image don't update the running container

266
00:12:49,910 --> 00:12:55,339
and the reason why you want to do this

267
00:12:52,520 --> 00:12:58,000
is so that you can effectively do

268
00:12:55,340 --> 00:13:02,060
vulnerability scanning you want image

269
00:12:58,000 --> 00:13:04,100
built scanned and then that is the

270
00:13:02,060 --> 00:13:07,339
software you run in that container you

271
00:13:04,100 --> 00:13:11,240
don't add to it

272
00:13:07,340 --> 00:13:12,650
so if you have a container somewhere and

273
00:13:11,240 --> 00:13:15,920
you've identified that it's got a

274
00:13:12,650 --> 00:13:19,790
vulnerability in it we need to rebuild

275
00:13:15,920 --> 00:13:22,520
their image concerned we and replace

276
00:13:19,790 --> 00:13:24,140
that container so have you all come

277
00:13:22,520 --> 00:13:25,939
across the term cat or not pet does

278
00:13:24,140 --> 00:13:30,350
anybody not come across the term cat or

279
00:13:25,940 --> 00:13:35,089
not pets okay one or two hands so very

280
00:13:30,350 --> 00:13:37,430
very quickly in the olden days we used

281
00:13:35,089 --> 00:13:39,140
to treat servers a bit like pets we gave

282
00:13:37,430 --> 00:13:40,719
them names and we looked after them and

283
00:13:39,140 --> 00:13:43,790
we kind of kept them fed and watered

284
00:13:40,720 --> 00:13:46,370
with containers you need to be treating

285
00:13:43,790 --> 00:13:49,040
them more like a herd of cattle one of

286
00:13:46,370 --> 00:13:51,950
them dies you can replace it but you're

287
00:13:49,040 --> 00:13:53,870
not emotionally attached so in exactly

288
00:13:51,950 --> 00:13:56,960
the same way if you find a container

289
00:13:53,870 --> 00:13:59,210
it's got a vulnerability in it kill the

290
00:13:56,960 --> 00:14:02,000
container rebuild the image redeploy it

291
00:13:59,210 --> 00:14:04,160
don't don't worry about like you know

292
00:14:02,000 --> 00:14:08,839
the livelihood of that container it's

293
00:14:04,160 --> 00:14:11,029
gone so I've talked about how I think

294
00:14:08,839 --> 00:14:14,270
you should really be doing vulnerability

295
00:14:11,029 --> 00:14:16,939
scanning and I'm gonna introduce micros

296
00:14:14,270 --> 00:14:20,120
micro scanner here which is a free

297
00:14:16,940 --> 00:14:22,160
version of the commercial vulnerability

298
00:14:20,120 --> 00:14:24,950
scanner that acqua provides so you can

299
00:14:22,160 --> 00:14:26,569
all go out and run micro scanner on

300
00:14:24,950 --> 00:14:30,050
Monday morning when you go back to the

301
00:14:26,570 --> 00:14:32,570
office and again like for static

302
00:14:30,050 --> 00:14:35,479
analysis tool that I showed we can build

303
00:14:32,570 --> 00:14:43,570
this into the docker build process and

304
00:14:35,480 --> 00:14:43,570
fail if we find a high severity issue so

305
00:14:44,410 --> 00:14:51,380
what have I got here right say I have a

306
00:14:49,160 --> 00:14:53,449
docker file this is actually exactly the

307
00:14:51,380 --> 00:14:58,490
same as what I just showed on the screen

308
00:14:53,450 --> 00:15:02,089
pretty much and I can build this there

309
00:14:58,490 --> 00:15:04,220
we go so as part of this build it's

310
00:15:02,089 --> 00:15:06,350
going to run Microsoft on basically I've

311
00:15:04,220 --> 00:15:09,560
taken a WordPress image I've copied the

312
00:15:06,350 --> 00:15:11,779
micro scanner executable into the the

313
00:15:09,560 --> 00:15:13,819
container image being built and then I'm

314
00:15:11,779 --> 00:15:16,430
running Microscan ER inside this

315
00:15:13,820 --> 00:15:18,170
container image and you have to register

316
00:15:16,430 --> 00:15:19,810
for a token that's that's what their

317
00:15:18,170 --> 00:15:21,430
token is

318
00:15:19,810 --> 00:15:25,029
and that just sort of prevents people

319
00:15:21,430 --> 00:15:28,540
from kind of abusively using this too

320
00:15:25,029 --> 00:15:31,150
much that goes to what we call our cyber

321
00:15:28,540 --> 00:15:33,069
center which is a big database of

322
00:15:31,150 --> 00:15:34,870
vulnerabilities so if fingerprints the

323
00:15:33,070 --> 00:15:37,900
contents of the image sends the

324
00:15:34,870 --> 00:15:42,339
fingerprints up to our cyber center aqua

325
00:15:37,900 --> 00:15:44,470
and gets back some results in this

326
00:15:42,339 --> 00:15:47,950
particular version I have asked for

327
00:15:44,470 --> 00:15:52,960
human readable HTML format output and

328
00:15:47,950 --> 00:15:54,970
I've written it into a file now that

329
00:15:52,960 --> 00:15:58,500
file at the end of the build

330
00:15:54,970 --> 00:16:01,660
that file is inside my container image

331
00:15:58,500 --> 00:16:05,350
so I need to instantiate my container so

332
00:16:01,660 --> 00:16:08,529
that I can get the file out and I have a

333
00:16:05,350 --> 00:16:13,089
little script to do that let's just show

334
00:16:08,529 --> 00:16:18,089
you that so I'm just going to create a

335
00:16:13,089 --> 00:16:21,610
version of the container and copy that

336
00:16:18,089 --> 00:16:24,280
HTML file out locally and then remove

337
00:16:21,610 --> 00:16:26,500
that container instance so I'm just

338
00:16:24,280 --> 00:16:31,510
going to do that and I need the ID of

339
00:16:26,500 --> 00:16:38,080
the container image I just built so

340
00:16:31,510 --> 00:16:40,600
hopefully yeah that's the HTML report

341
00:16:38,080 --> 00:16:44,980
that I've just built and we can open

342
00:16:40,600 --> 00:16:47,350
that and we basically see this

343
00:16:44,980 --> 00:16:49,510
particular instance of WordPress doesn't

344
00:16:47,350 --> 00:16:52,060
have anything too significant to worry

345
00:16:49,510 --> 00:16:56,260
about no high severity issues but there

346
00:16:52,060 --> 00:16:59,709
are some medium ones why can't I let's

347
00:16:56,260 --> 00:17:01,960
make that bigger yeah there's three

348
00:16:59,710 --> 00:17:04,300
medium severity issues and if we wanted

349
00:17:01,960 --> 00:17:05,890
to we could go and find out a little bit

350
00:17:04,300 --> 00:17:08,409
more information about those

351
00:17:05,890 --> 00:17:11,620
vulnerabilities and we could figure out

352
00:17:08,410 --> 00:17:14,110
either do we want to update do we need a

353
00:17:11,619 --> 00:17:18,969
patch is this something we prepare to

354
00:17:14,109 --> 00:17:20,349
live with either way we know how many

355
00:17:18,970 --> 00:17:23,160
vulnerabilities there are and how

356
00:17:20,349 --> 00:17:25,448
serious they are

357
00:17:23,160 --> 00:17:28,140
Micra scanner will just automatically

358
00:17:25,449 --> 00:17:30,850
fail if it finds a high severity

359
00:17:28,140 --> 00:17:33,550
vulnerability so that can stop your

360
00:17:30,850 --> 00:17:36,929
build process stop you creating an image

361
00:17:33,550 --> 00:17:39,370
with high severity vulnerabilities in it

362
00:17:36,930 --> 00:17:46,030
okay now I need to find where my

363
00:17:39,370 --> 00:17:51,149
presentation has gone somewhere I think

364
00:17:46,030 --> 00:17:51,149
it's in this window there it is right

365
00:17:51,780 --> 00:17:58,720
okay so if there's one thing that you do

366
00:17:54,880 --> 00:18:01,150
as a result of this talk it's using a

367
00:17:58,720 --> 00:18:03,160
vulnerability scanner and because there

368
00:18:01,150 --> 00:18:07,060
I think there are other free and open

369
00:18:03,160 --> 00:18:08,800
source tools available I obviously think

370
00:18:07,060 --> 00:18:11,470
this one is good because it uses a large

371
00:18:08,800 --> 00:18:13,320
commercial database of vulnerabilities

372
00:18:11,470 --> 00:18:16,030
so it's pretty comprehensive and

373
00:18:13,320 --> 00:18:21,960
hopefully you won't get too much in the

374
00:18:16,030 --> 00:18:24,399
way of false positives okay

375
00:18:21,960 --> 00:18:26,500
we've built some software we've built

376
00:18:24,400 --> 00:18:29,830
these container images and then we want

377
00:18:26,500 --> 00:18:31,780
to deploy them on some hosts and we need

378
00:18:29,830 --> 00:18:35,790
to make sure that those host machines

379
00:18:31,780 --> 00:18:38,230
are configured kind of appropriately and

380
00:18:35,790 --> 00:18:42,879
has everybody come across the center for

381
00:18:38,230 --> 00:18:45,990
internet security anybody not okay so

382
00:18:42,880 --> 00:18:51,310
they have some benchmarks that describe

383
00:18:45,990 --> 00:18:53,380
best practices for how to install and

384
00:18:51,310 --> 00:18:55,480
configure various pieces of software I

385
00:18:53,380 --> 00:18:57,370
think for containers the two most

386
00:18:55,480 --> 00:18:59,560
relevant ones are the docker benchmark

387
00:18:57,370 --> 00:19:00,850
and the Kiva Nettie's benchmark as it

388
00:18:59,560 --> 00:19:03,820
happens I'm a co-author on the

389
00:19:00,850 --> 00:19:09,429
kubernetes one and the idea here is that

390
00:19:03,820 --> 00:19:11,889
it's going to tell you what best

391
00:19:09,430 --> 00:19:14,020
practice configuration settings look

392
00:19:11,890 --> 00:19:16,720
like for all these different components

393
00:19:14,020 --> 00:19:19,180
you might not agree with all of them

394
00:19:16,720 --> 00:19:21,940
they might not all be correct for your

395
00:19:19,180 --> 00:19:24,550
particular environment so for example I

396
00:19:21,940 --> 00:19:26,410
was speaking to somebody a product

397
00:19:24,550 --> 00:19:29,860
manager from the Google cloud team and

398
00:19:26,410 --> 00:19:32,440
there are some recommendations in the

399
00:19:29,860 --> 00:19:34,260
CIS kubernetes benchmark that don't

400
00:19:32,440 --> 00:19:38,590
really make sense if you're running

401
00:19:34,260 --> 00:19:41,140
inside the Google kind of cloud with all

402
00:19:38,590 --> 00:19:44,949
the existing kind of networking controls

403
00:19:41,140 --> 00:19:47,110
that they have but as a starting point

404
00:19:44,950 --> 00:19:49,419
to make sure that your

405
00:19:47,110 --> 00:19:50,559
it's a good idea to test against these

406
00:19:49,419 --> 00:19:53,320
benchmarks and then if you're not

407
00:19:50,559 --> 00:19:55,149
compliant at least understand well is

408
00:19:53,320 --> 00:20:00,250
that because is there a good reason for

409
00:19:55,149 --> 00:20:01,750
that now there are kind of 200 odd pages

410
00:20:00,250 --> 00:20:04,990
of tests in the cave a Nettie's

411
00:20:01,750 --> 00:20:07,360
benchmark so we wrote an open source

412
00:20:04,990 --> 00:20:10,120
tool called key bench that can run

413
00:20:07,360 --> 00:20:13,840
through all of those different tools all

414
00:20:10,120 --> 00:20:16,600
those different tests and I have a demo

415
00:20:13,840 --> 00:20:20,408
of that can I have a show of hands if

416
00:20:16,600 --> 00:20:27,610
you're using kubernetes yeah a few of

417
00:20:20,409 --> 00:20:33,250
you okay so I should be able to run this

418
00:20:27,610 --> 00:20:35,580
is the right maybe it's this one yeah

419
00:20:33,250 --> 00:20:41,799
here we go

420
00:20:35,580 --> 00:20:46,809
so I could run cue bench on does this

421
00:20:41,799 --> 00:20:50,950
sometimes there we go right we've got

422
00:20:46,809 --> 00:20:53,379
some output so this is a single node

423
00:20:50,950 --> 00:20:55,809
kubernetes cluster running on my on a

424
00:20:53,380 --> 00:20:57,549
virtual machine on my laptop and there

425
00:20:55,809 --> 00:21:02,320
are a few things that it's found wrong I

426
00:20:57,549 --> 00:21:03,789
just ran the qiblah tests here and just

427
00:21:02,320 --> 00:21:04,990
looking at the first couple of things

428
00:21:03,789 --> 00:21:07,899
that have failed

429
00:21:04,990 --> 00:21:10,179
we've got allow privileged so you

430
00:21:07,899 --> 00:21:12,610
probably don't want to allow privilege

431
00:21:10,179 --> 00:21:14,470
containers to run in your deployment the

432
00:21:12,610 --> 00:21:18,879
recommendation is don't allow privilege

433
00:21:14,470 --> 00:21:22,120
containers and anonymous source so it

434
00:21:18,880 --> 00:21:24,789
would be a good idea in fact it's for

435
00:21:22,120 --> 00:21:27,820
the Cuba API it's a very bad idea to let

436
00:21:24,789 --> 00:21:32,350
people and on an anonymously collect to

437
00:21:27,820 --> 00:21:34,480
the Cuba API because that's basically

438
00:21:32,350 --> 00:21:37,000
like having root privileges anyone who

439
00:21:34,480 --> 00:21:40,659
can connect to the qiblah api can do

440
00:21:37,000 --> 00:21:43,559
anything they like if they're if

441
00:21:40,659 --> 00:21:46,330
anonymous author education is permitted

442
00:21:43,559 --> 00:21:51,580
so both of those things are currently

443
00:21:46,330 --> 00:21:54,908
wrong that's because I've set up my my

444
00:21:51,580 --> 00:21:56,960
cluster deliberately badly and if I look

445
00:21:54,909 --> 00:22:07,370
at the running

446
00:21:56,960 --> 00:22:10,010
keep let's say we can see that anonymous

447
00:22:07,370 --> 00:22:13,370
source is currently permitted so that's

448
00:22:10,010 --> 00:22:14,929
one of the things that we just picked up

449
00:22:13,370 --> 00:22:16,668
with cue bench we've also got allow

450
00:22:14,929 --> 00:22:18,799
privileged is permitted so those are

451
00:22:16,669 --> 00:22:21,620
balance settings that I've currently got

452
00:22:18,799 --> 00:22:26,350
running I can use key bench to detect

453
00:22:21,620 --> 00:22:30,860
those and flag them up for improvement

454
00:22:26,350 --> 00:22:32,689
so running tools like key bench can help

455
00:22:30,860 --> 00:22:35,539
you identify when you've got insecure

456
00:22:32,690 --> 00:22:37,250
settings and they can also you can run

457
00:22:35,539 --> 00:22:38,960
them on a regular basis to make sure

458
00:22:37,250 --> 00:22:41,630
that your host configuration isn't

459
00:22:38,960 --> 00:22:47,360
somehow drifting away from what it

460
00:22:41,630 --> 00:22:49,970
should be so we've got our software we

461
00:22:47,360 --> 00:22:53,889
want to deploy we've got some hosts now

462
00:22:49,970 --> 00:22:56,210
we're going to deploy that software and

463
00:22:53,890 --> 00:22:59,120
this is where you might want to have

464
00:22:56,210 --> 00:23:00,710
some image policies we want to make sure

465
00:22:59,120 --> 00:23:03,229
that we're only running the code that we

466
00:23:00,710 --> 00:23:07,159
wanted to build and we might also have

467
00:23:03,230 --> 00:23:08,590
some policies for ourselves around the

468
00:23:07,159 --> 00:23:13,580
permissions and privileges that

469
00:23:08,590 --> 00:23:17,209
containers are allowed to run with so in

470
00:23:13,580 --> 00:23:19,460
kubernetes there are admission control

471
00:23:17,210 --> 00:23:21,620
is that it can help you police what's

472
00:23:19,460 --> 00:23:23,720
allowed so we've kind of control what's

473
00:23:21,620 --> 00:23:26,510
allowed to be admitted it's your

474
00:23:23,720 --> 00:23:28,880
kubernetes cluster you can also use

475
00:23:26,510 --> 00:23:34,158
tools like aqua to make it easier to

476
00:23:28,880 --> 00:23:35,630
manage your image policies and really

477
00:23:34,159 --> 00:23:36,890
what they're doing whether it's

478
00:23:35,630 --> 00:23:40,250
admission controllers that you write

479
00:23:36,890 --> 00:23:43,190
yourself or a tool like a choir for some

480
00:23:40,250 --> 00:23:48,020
definition of bad images we don't let

481
00:23:43,190 --> 00:23:50,779
bad images run on your cluster so that

482
00:23:48,020 --> 00:23:54,070
could be looking at the output of the

483
00:23:50,779 --> 00:23:56,990
vulnerability scan did that image have

484
00:23:54,070 --> 00:23:59,000
high severity vulnerabilities in it or

485
00:23:56,990 --> 00:24:03,020
did it have particular vulnerabilities

486
00:23:59,000 --> 00:24:06,770
that we've blacklisted did the image get

487
00:24:03,020 --> 00:24:08,690
built on an approved base image a lot of

488
00:24:06,770 --> 00:24:12,170
organizations will have

489
00:24:08,690 --> 00:24:14,690
like a policy to say everyone who's

490
00:24:12,170 --> 00:24:17,930
writing in Python in our organization

491
00:24:14,690 --> 00:24:19,100
should use this space image and you

492
00:24:17,930 --> 00:24:21,170
might want to police that that's

493
00:24:19,100 --> 00:24:27,320
actually really the case and can do that

494
00:24:21,170 --> 00:24:31,250
with image policies it's a really bad

495
00:24:27,320 --> 00:24:34,550
idea to build credentials into your

496
00:24:31,250 --> 00:24:35,810
container images there's a lot of

497
00:24:34,550 --> 00:24:38,360
different ways in which those

498
00:24:35,810 --> 00:24:41,870
credentials might be obtained by

499
00:24:38,360 --> 00:24:44,479
somebody who really shouldn't so we very

500
00:24:41,870 --> 00:24:48,350
much advise that you don't put passwords

501
00:24:44,480 --> 00:24:49,910
tokens credentials directly into a

502
00:24:48,350 --> 00:24:52,990
container image and you might want to

503
00:24:49,910 --> 00:24:56,900
police that that is actually the case

504
00:24:52,990 --> 00:24:58,520
again with a some kind of scanning and

505
00:24:56,900 --> 00:25:01,150
then a policy to make sure you're not

506
00:24:58,520 --> 00:25:07,400
deploying any images with sensitive

507
00:25:01,150 --> 00:25:08,510
credentials in image provenance so I

508
00:25:07,400 --> 00:25:12,380
think Kahlan may have been speaking

509
00:25:08,510 --> 00:25:14,780
about this before lunch you need to know

510
00:25:12,380 --> 00:25:17,480
where your images came from you need to

511
00:25:14,780 --> 00:25:19,879
know that the image you deployed is the

512
00:25:17,480 --> 00:25:22,430
same as the image that you built and

513
00:25:19,880 --> 00:25:23,870
scanned earlier again there are various

514
00:25:22,430 --> 00:25:29,900
different tools to help you with this a

515
00:25:23,870 --> 00:25:32,449
query is one of those you may well want

516
00:25:29,900 --> 00:25:37,190
to stop people running containers as

517
00:25:32,450 --> 00:25:40,520
reads now when you run a container by

518
00:25:37,190 --> 00:25:42,890
default it's gonna be routes and routes

519
00:25:40,520 --> 00:25:45,500
inside the container again by default

520
00:25:42,890 --> 00:25:50,600
route inside the container is route on

521
00:25:45,500 --> 00:25:54,020
the host so as a layer of defense it's a

522
00:25:50,600 --> 00:25:56,240
good idea to specify an on route user if

523
00:25:54,020 --> 00:25:58,970
you possibly can so your container

524
00:25:56,240 --> 00:26:03,320
doesn't run as route unless it really

525
00:25:58,970 --> 00:26:06,410
needs to and you also might want to

526
00:26:03,320 --> 00:26:08,300
limit the privileges that containers are

527
00:26:06,410 --> 00:26:09,740
allowed to run as and again this you

528
00:26:08,300 --> 00:26:12,050
know making sure that you don't deploy a

529
00:26:09,740 --> 00:26:14,990
container unless it's going to run as a

530
00:26:12,050 --> 00:26:17,210
non route user making sure you're not

531
00:26:14,990 --> 00:26:19,370
allowed to deploy privileged images

532
00:26:17,210 --> 00:26:22,390
these are things that you can do at the

533
00:26:19,370 --> 00:26:27,979
admission control stage

534
00:26:22,390 --> 00:26:30,380
so just because a container says that it

535
00:26:27,980 --> 00:26:31,640
wants to have a particular privilege

536
00:26:30,380 --> 00:26:35,180
doesn't necessarily mean that's

537
00:26:31,640 --> 00:26:38,510
appropriate you might need to pay

538
00:26:35,180 --> 00:26:40,280
attention to the container images that

539
00:26:38,510 --> 00:26:43,190
are built and maybe question whether or

540
00:26:40,280 --> 00:26:45,379
not they really need to be root or

541
00:26:43,190 --> 00:26:48,290
whether or not they really need the

542
00:26:45,380 --> 00:26:51,070
privileges that they've been granted so

543
00:26:48,290 --> 00:26:53,690
I want to show you something that is a

544
00:26:51,070 --> 00:26:56,689
way that containers can escalate

545
00:26:53,690 --> 00:27:00,560
privileges kind of rather

546
00:26:56,690 --> 00:27:03,770
unintentionally so I am running as a

547
00:27:00,560 --> 00:27:10,669
user called vagrant at the moment and if

548
00:27:03,770 --> 00:27:14,840
I try to do something like let's try

549
00:27:10,670 --> 00:27:21,080
adding a user I am not allowed to add a

550
00:27:14,840 --> 00:27:23,959
user as fragrant now if I run a

551
00:27:21,080 --> 00:27:26,270
container I'm just running a normal

552
00:27:23,960 --> 00:27:30,800
engine X container and I'm going to run

553
00:27:26,270 --> 00:27:33,320
get a shell into it immediately and one

554
00:27:30,800 --> 00:27:37,990
of the first things you might see is it

555
00:27:33,320 --> 00:27:40,580
says I'm route and that is really route

556
00:27:37,990 --> 00:27:43,340
its route inside the container it is

557
00:27:40,580 --> 00:27:45,860
also route outside the container and I

558
00:27:43,340 --> 00:27:47,689
can check that that's the case by for

559
00:27:45,860 --> 00:27:52,570
example if I sleep for a little while

560
00:27:47,690 --> 00:27:58,220
inside the container and I look for the

561
00:27:52,570 --> 00:28:01,179
actually let's do look for any process

562
00:27:58,220 --> 00:28:02,960
is running sleep on the same machine

563
00:28:01,180 --> 00:28:06,080
there it is

564
00:28:02,960 --> 00:28:07,880
and it's route this it's route inside

565
00:28:06,080 --> 00:28:12,050
the container and it's route on the host

566
00:28:07,880 --> 00:28:13,070
they're one and the same thing now the

567
00:28:12,050 --> 00:28:16,610
other thing that I did when I started

568
00:28:13,070 --> 00:28:19,610
this container was I mounted the etc

569
00:28:16,610 --> 00:28:22,850
directory from the host into the

570
00:28:19,610 --> 00:28:28,969
container so it's accessible as /etc

571
00:28:22,850 --> 00:28:32,780
from inside the container so now I could

572
00:28:28,970 --> 00:28:34,429
do adding a user because I'm route and I

573
00:28:32,780 --> 00:28:42,950
have access to that's it

574
00:28:34,429 --> 00:28:48,440
and let's see if I can type in a

575
00:28:42,950 --> 00:28:51,259
password so I've created a user that I

576
00:28:48,440 --> 00:28:53,269
wasn't previously I have to do I just by

577
00:28:51,259 --> 00:28:57,350
virtue of running a container

578
00:28:53,269 --> 00:28:59,710
I have escalated my privileges to the

579
00:28:57,350 --> 00:29:09,559
point where I can create a new user

580
00:28:59,710 --> 00:29:11,779
so now if I I can now log in as that

581
00:29:09,559 --> 00:29:13,129
user that I've just created I wouldn't

582
00:29:11,779 --> 00:29:15,769
have been able to do that if I hadn't

583
00:29:13,129 --> 00:29:17,629
had a container and I wouldn't have been

584
00:29:15,769 --> 00:29:21,230
able to do it the real point where we

585
00:29:17,629 --> 00:29:24,678
leaked privilege or leaked something

586
00:29:21,230 --> 00:29:27,950
really important was by mounting /etc

587
00:29:24,679 --> 00:29:33,110
which is sensitive because it contains

588
00:29:27,950 --> 00:29:35,779
our password database so this is an

589
00:29:33,110 --> 00:29:40,490
example of why you need to be careful

590
00:29:35,779 --> 00:29:43,940
about things like buying mounts like

591
00:29:40,490 --> 00:29:46,279
this directory mounts and why if I

592
00:29:43,940 --> 00:29:47,570
wasn't running as root I wouldn't I

593
00:29:46,279 --> 00:29:48,860
still wouldn't have been able to do this

594
00:29:47,570 --> 00:29:53,210
because I wouldn't have had permission

595
00:29:48,860 --> 00:29:56,149
to create a new user so it's an example

596
00:29:53,210 --> 00:29:58,009
of how you may inadvertently have more

597
00:29:56,149 --> 00:29:59,840
privileges inside the containers that

598
00:29:58,009 --> 00:30:02,230
are running in your deployment than you

599
00:29:59,840 --> 00:30:02,230
realize

600
00:30:03,549 --> 00:30:08,119
minimizing the extent to which people

601
00:30:05,809 --> 00:30:11,690
can mint directories from the host into

602
00:30:08,119 --> 00:30:13,939
the container explicitly setting a non

603
00:30:11,690 --> 00:30:17,450
root user by using the user command in

604
00:30:13,940 --> 00:30:19,429
the docker file and at all costs don't

605
00:30:17,450 --> 00:30:21,649
set the privilege drag if you unless you

606
00:30:19,429 --> 00:30:24,769
really really know that you need the

607
00:30:21,649 --> 00:30:26,928
privilege drag don't set it you almost

608
00:30:24,769 --> 00:30:30,769
certainly don't need it and all of those

609
00:30:26,929 --> 00:30:33,789
things will help you minimize the extent

610
00:30:30,769 --> 00:30:38,110
to which your containers just

611
00:30:33,789 --> 00:30:38,110
automatically escalate privileges

612
00:30:39,330 --> 00:30:44,570
so the final step we've built our

613
00:30:42,030 --> 00:30:49,020
software we're running it on some hosts

614
00:30:44,570 --> 00:30:53,669
it's running now that we can start

615
00:30:49,020 --> 00:30:56,940
thinking about monitoring or observing

616
00:30:53,670 --> 00:30:58,770
that running software and checking

617
00:30:56,940 --> 00:31:03,780
whether it's behaving the way we expect

618
00:30:58,770 --> 00:31:06,030
it to behave so if we talk about micro

619
00:31:03,780 --> 00:31:08,580
service say for example we're talking

620
00:31:06,030 --> 00:31:11,340
about a product search micro service we

621
00:31:08,580 --> 00:31:13,260
can reason very easily about what it

622
00:31:11,340 --> 00:31:16,379
should be allowed to do product search

623
00:31:13,260 --> 00:31:19,740
should be allowed to make requests of a

624
00:31:16,380 --> 00:31:22,200
product database probably shouldn't be

625
00:31:19,740 --> 00:31:24,360
going to the external internet probably

626
00:31:22,200 --> 00:31:27,750
shouldn't be running I don't know

627
00:31:24,360 --> 00:31:30,780
commands like user ad for example so

628
00:31:27,750 --> 00:31:34,100
lots of things we can say any given

629
00:31:30,780 --> 00:31:37,470
micro service really shouldn't be doing

630
00:31:34,100 --> 00:31:41,730
you can use tools like can set calm or

631
00:31:37,470 --> 00:31:44,570
app armor also SELinux to restrict the

632
00:31:41,730 --> 00:31:49,320
behavior that a container is allowed to

633
00:31:44,570 --> 00:31:52,379
to do you can use you can apply a set

634
00:31:49,320 --> 00:31:55,580
comp or a palm a profile to any given

635
00:31:52,380 --> 00:31:57,990
running container so you might have a

636
00:31:55,580 --> 00:32:00,929
different profile for each different

637
00:31:57,990 --> 00:32:02,760
container or more commonly you might

638
00:32:00,930 --> 00:32:05,340
want to use the default docker profiles

639
00:32:02,760 --> 00:32:09,230
just result did a really great job of

640
00:32:05,340 --> 00:32:12,600
defining a default second profile that

641
00:32:09,230 --> 00:32:16,290
restricts the system calls that

642
00:32:12,600 --> 00:32:19,850
containers can use to a very sensible

643
00:32:16,290 --> 00:32:22,170
set of defaults that kind of allow

644
00:32:19,850 --> 00:32:25,050
ninety-nine point whatever percent of

645
00:32:22,170 --> 00:32:27,480
containers to operate as expected but

646
00:32:25,050 --> 00:32:29,540
prevent some crazy things that no

647
00:32:27,480 --> 00:32:32,760
container really has any business doing

648
00:32:29,540 --> 00:32:34,820
so the default docker profiles are a

649
00:32:32,760 --> 00:32:37,170
really sensible place to start

650
00:32:34,820 --> 00:32:38,790
particularly if you don't know better

651
00:32:37,170 --> 00:32:41,040
you know if you don't have a better

652
00:32:38,790 --> 00:32:44,100
profile in place these are these are

653
00:32:41,040 --> 00:32:44,790
good to use but if you're using

654
00:32:44,100 --> 00:32:47,340
kubernetes

655
00:32:44,790 --> 00:32:49,320
they don't automatically get applied

656
00:32:47,340 --> 00:32:52,169
which when I first found out was quite a

657
00:32:49,320 --> 00:32:53,200
surprise to me because but it was using

658
00:32:52,170 --> 00:32:55,840
docker as the runs

659
00:32:53,200 --> 00:32:57,700
so wouldn't it no it doesn't

660
00:32:55,840 --> 00:33:03,189
automatically pick them up you have to

661
00:32:57,700 --> 00:33:06,420
explicitly specify the docker set comp

662
00:33:03,190 --> 00:33:08,950
and apparmor profiles in annotations

663
00:33:06,420 --> 00:33:13,120
like I've done here in a pod security

664
00:33:08,950 --> 00:33:14,830
policy so this is another really small

665
00:33:13,120 --> 00:33:19,270
but useful thing that you might want to

666
00:33:14,830 --> 00:33:21,010
do if you're running kubernetes now you

667
00:33:19,270 --> 00:33:24,810
might want to take it a step further and

668
00:33:21,010 --> 00:33:27,660
use a tool like AK word that can limit

669
00:33:24,810 --> 00:33:32,010
container activity on a kind of more

670
00:33:27,660 --> 00:33:35,260
granular basis so we can restrict

671
00:33:32,010 --> 00:33:39,310
container to only running a certain set

672
00:33:35,260 --> 00:33:42,090
of executables maybe only running as a

673
00:33:39,310 --> 00:33:44,860
particular user ID or a set of user IDs

674
00:33:42,090 --> 00:33:47,350
knowing which network traffic should be

675
00:33:44,860 --> 00:33:50,199
permitted what what IP address is what

676
00:33:47,350 --> 00:33:53,740
DNS names what other services should

677
00:33:50,200 --> 00:33:56,890
that container be allowed to access now

678
00:33:53,740 --> 00:33:58,440
if a container does something out of the

679
00:33:56,890 --> 00:34:01,990
ordinary

680
00:33:58,440 --> 00:34:04,780
it could be a bug it could be malicious

681
00:34:01,990 --> 00:34:07,390
behavior it's almost certainly not

682
00:34:04,780 --> 00:34:09,009
something you want to but you you almost

683
00:34:07,390 --> 00:34:10,780
certainly want to know about it so

684
00:34:09,010 --> 00:34:12,460
getting a log for it is a good thing and

685
00:34:10,780 --> 00:34:18,370
perhaps you want to prevent it from

686
00:34:12,460 --> 00:34:22,330
happening all together so my last demo

687
00:34:18,370 --> 00:34:24,880
let's see whether or not I've got okay

688
00:34:22,330 --> 00:34:28,600
just got aqua running so I'm going to

689
00:34:24,880 --> 00:34:30,570
run an engine X container and that's

690
00:34:28,600 --> 00:34:36,239
running and I'm also going to show you

691
00:34:30,570 --> 00:34:40,860
so this is a bit of the Aqua console and

692
00:34:36,239 --> 00:34:44,109
I can see running containers there's my

693
00:34:40,860 --> 00:34:47,490
this is my nginx that I've just started

694
00:34:44,110 --> 00:34:49,179
running and it's running with a profile

695
00:34:47,489 --> 00:34:52,330
called nginx

696
00:34:49,179 --> 00:34:55,030
October 2018 and I can look at the

697
00:34:52,330 --> 00:34:59,980
settings for that it's currently in

698
00:34:55,030 --> 00:35:03,130
audit only mode and it's gonna say the

699
00:34:59,980 --> 00:35:06,970
only executable that I expect to be able

700
00:35:03,130 --> 00:35:09,460
to run is nginx nginx doesn't need to do

701
00:35:06,970 --> 00:35:13,770
anything else it just runs nginx so

702
00:35:09,460 --> 00:35:16,990
anything outside of that behavior is

703
00:35:13,770 --> 00:35:18,910
unexpected now I just ran it and got a

704
00:35:16,990 --> 00:35:20,189
shell into it so I could do things like

705
00:35:18,910 --> 00:35:23,529
Who am I

706
00:35:20,190 --> 00:35:26,230
maybe this the contents of the root

707
00:35:23,530 --> 00:35:28,210
directory probably not something that we

708
00:35:26,230 --> 00:35:31,450
want to see happening inside an engine X

709
00:35:28,210 --> 00:35:32,320
container in production if I go to my

710
00:35:31,450 --> 00:35:35,319
audit log

711
00:35:32,320 --> 00:35:38,260
it's basically spotted that there's the

712
00:35:35,320 --> 00:35:40,119
LS that I just ran maybe this will be

713
00:35:38,260 --> 00:35:45,160
that's also this is going to be the Who

714
00:35:40,119 --> 00:35:46,869
am I so we've detected unauthorized

715
00:35:45,160 --> 00:35:49,960
behaviors something unexpected something

716
00:35:46,869 --> 00:35:53,230
that was outside of the expected profile

717
00:35:49,960 --> 00:35:57,880
for engine X I could also go back to

718
00:35:53,230 --> 00:36:00,369
that profile I find the right one engine

719
00:35:57,880 --> 00:36:08,740
X October 2018 and put it into enforce

720
00:36:00,369 --> 00:36:10,359
mode and save it and now I'm going to

721
00:36:08,740 --> 00:36:11,919
get permission denied so we can actually

722
00:36:10,359 --> 00:36:15,069
lock it down and prevent anything

723
00:36:11,920 --> 00:36:19,450
outside of that expected behavior from

724
00:36:15,070 --> 00:36:24,460
being run in fact if I stop this

725
00:36:19,450 --> 00:36:26,439
container and try to restart it that's

726
00:36:24,460 --> 00:36:29,650
not allowed because I tried to run bash

727
00:36:26,440 --> 00:36:31,660
and that is not part of the expected

728
00:36:29,650 --> 00:36:34,000
profile and I've got it in enforce mode

729
00:36:31,660 --> 00:36:40,509
and if I go back to my audit log we

730
00:36:34,000 --> 00:36:44,470
should see some let's see what we've got

731
00:36:40,510 --> 00:36:46,810
here yeah there's the bash bash command

732
00:36:44,470 --> 00:36:49,839
being blocked so that's like a really

733
00:36:46,810 --> 00:36:52,990
powerful way of locking down behavior on

734
00:36:49,839 --> 00:36:54,369
a kind of on the basis of what container

735
00:36:52,990 --> 00:36:56,348
images running and if you want to know

736
00:36:54,369 --> 00:37:00,970
more about that please go see my

737
00:36:56,349 --> 00:37:04,119
colleagues downstairs so we've looked at

738
00:37:00,970 --> 00:37:08,169
something you can do at every stage of

739
00:37:04,119 --> 00:37:09,730
the CI CD pipeline we've looked at using

740
00:37:08,170 --> 00:37:13,210
things like static analysis and code

741
00:37:09,730 --> 00:37:15,369
review to review for security issues at

742
00:37:13,210 --> 00:37:18,830
code time we've talked about the

743
00:37:15,369 --> 00:37:21,380
possibility of security testing

744
00:37:18,830 --> 00:37:23,180
vulnerability scanning that is my like

745
00:37:21,380 --> 00:37:24,140
the single thing I want you to take away

746
00:37:23,180 --> 00:37:26,600
if you're not already doing

747
00:37:24,140 --> 00:37:30,910
vulnerability scanning that could really

748
00:37:26,600 --> 00:37:35,089
save your ass host configuration

749
00:37:30,910 --> 00:37:36,799
checking that your hosts are configured

750
00:37:35,090 --> 00:37:41,360
according to best practices and maybe

751
00:37:36,800 --> 00:37:45,250
using tools like cue bench making sure

752
00:37:41,360 --> 00:37:48,230
that you deploy containers with

753
00:37:45,250 --> 00:37:50,420
appropriate rules around them looking

754
00:37:48,230 --> 00:37:53,060
for things like minimizing privileges

755
00:37:50,420 --> 00:37:56,060
minimizing buying mounts and then

756
00:37:53,060 --> 00:37:59,000
finally things like set comm apparmor

757
00:37:56,060 --> 00:38:02,060
profiles or commercial tooling to help

758
00:37:59,000 --> 00:38:03,890
you ensure that containers only do what

759
00:38:02,060 --> 00:38:08,870
they are supposed to do and don't do

760
00:38:03,890 --> 00:38:11,839
anything unexpected I think that's

761
00:38:08,870 --> 00:38:18,410
pretty much sensible advice you might

762
00:38:11,840 --> 00:38:20,060
disagree up to you and finally I just

763
00:38:18,410 --> 00:38:22,700
like I was very excited because today

764
00:38:20,060 --> 00:38:25,310
was the first time I saw physical copies

765
00:38:22,700 --> 00:38:27,319
of my book that I've just recently

766
00:38:25,310 --> 00:38:31,040
co-authored with them michael has Andres

767
00:38:27,320 --> 00:38:33,560
from Red Hat so we still have a few more

768
00:38:31,040 --> 00:38:35,600
copies of it downstairs on that accra

769
00:38:33,560 --> 00:38:38,290
booth and you can also download it from

770
00:38:35,600 --> 00:38:41,779
the aqua site download an e copy

771
00:38:38,290 --> 00:38:43,850
and finally if you want to use any of

772
00:38:41,780 --> 00:38:47,000
those tools that I mentioned Michael

773
00:38:43,850 --> 00:38:50,330
Scott Anarchy bench they're available on

774
00:38:47,000 --> 00:38:52,400
github and you can find the demos that I

775
00:38:50,330 --> 00:38:55,220
ran some of them that were put together

776
00:38:52,400 --> 00:38:58,970
by Justin as I mentioned they're on this

777
00:38:55,220 --> 00:39:01,310
no meltdown github repo I think I've

778
00:38:58,970 --> 00:39:06,109
managed to stop with about 35 seconds

779
00:39:01,310 --> 00:39:08,450
left for a very very quick question or

780
00:39:06,110 --> 00:39:11,080
just 35 seconds of rapturous applause is

781
00:39:08,450 --> 00:39:11,080
also okay

782
00:39:15,450 --> 00:39:31,689
thank you one question maybe any

783
00:39:24,310 --> 00:39:32,940
questions okay okay

784
00:39:31,690 --> 00:39:38,380
thank you very much

785
00:39:32,940 --> 00:39:38,380
[Applause]

