1
00:00:00,030 --> 00:00:06,210
hi everyone and the presentation is

2
00:00:04,500 --> 00:00:08,910
going to be about securing a web

3
00:00:06,210 --> 00:00:13,080
application surprisingly the business

4
00:00:08,910 --> 00:00:15,690
security versus gos top 10 so I'm Jon

5
00:00:13,080 --> 00:00:17,759
batiste area I'm CTO and co-founder at

6
00:00:15,690 --> 00:00:22,009
screen prior screen

7
00:00:17,760 --> 00:00:25,619
I was pen tester worked on startups

8
00:00:22,010 --> 00:00:28,920
fortune 500 companies and then I worked

9
00:00:25,619 --> 00:00:31,830
five years at Apple River doing reverse

10
00:00:28,920 --> 00:00:34,640
engineering and the Apple ecosystem iOS

11
00:00:31,830 --> 00:00:37,410
Mac OS cryptography attacks and

12
00:00:34,640 --> 00:00:41,030
importantly helping developers write

13
00:00:37,410 --> 00:00:45,059
mercy geocodes so this presentation

14
00:00:41,030 --> 00:00:48,719
won't be focusing on the u.s. top 10

15
00:00:45,059 --> 00:00:51,690
right that's the title or what top 10

16
00:00:48,719 --> 00:00:54,000
versus business threats so you we all

17
00:00:51,690 --> 00:00:56,789
know and we are all quite aware of do

18
00:00:54,000 --> 00:00:59,309
ask top 10 here I'd like to focus and

19
00:00:56,789 --> 00:01:01,789
the other side of threats that are

20
00:00:59,309 --> 00:01:06,600
targeting more specifically businesses

21
00:01:01,789 --> 00:01:10,220
so let's take a step back and look at

22
00:01:06,600 --> 00:01:13,890
what applications look like 20 years ago

23
00:01:10,220 --> 00:01:18,360
you had almost no frameworks rubian

24
00:01:13,890 --> 00:01:21,930
right was not here you had no npm no pi

25
00:01:18,360 --> 00:01:25,560
PI or very early version of them it was

26
00:01:21,930 --> 00:01:27,600
it was only the beginning and and this

27
00:01:25,560 --> 00:01:29,460
the developers were writing a lot of

28
00:01:27,600 --> 00:01:32,539
things themselves right interfacing with

29
00:01:29,460 --> 00:01:35,130
the database themselves with the

30
00:01:32,540 --> 00:01:37,290
external services and a lot of things

31
00:01:35,130 --> 00:01:40,229
were written again and again by

32
00:01:37,290 --> 00:01:41,820
developers in each company obviously it

33
00:01:40,229 --> 00:01:44,729
was on top of the of the business logic

34
00:01:41,820 --> 00:01:48,869
that was the technical layer you needed

35
00:01:44,729 --> 00:01:49,470
to have Europe working then 2010 all

36
00:01:48,869 --> 00:01:53,040
right

37
00:01:49,470 --> 00:01:56,070
we now have Django Ruby on Rails things

38
00:01:53,040 --> 00:01:59,219
are much better because the developers

39
00:01:56,070 --> 00:02:01,439
can focus on writing business logic code

40
00:01:59,219 --> 00:02:03,530
right everything that we wrote

41
00:02:01,439 --> 00:02:05,969
previously interfacing with the database

42
00:02:03,530 --> 00:02:08,910
with the file system everything is

43
00:02:05,969 --> 00:02:12,510
person to frameworks the frameworks they

44
00:02:08,910 --> 00:02:13,660
are shared across all companies and so

45
00:02:12,510 --> 00:02:15,640
they benefit from the

46
00:02:13,660 --> 00:02:19,210
purity of the of the masses of

47
00:02:15,640 --> 00:02:21,309
organization using them right so all the

48
00:02:19,210 --> 00:02:23,650
single vulnerabilities you had in the

49
00:02:21,310 --> 00:02:25,900
Kusum code we were writing previously

50
00:02:23,650 --> 00:02:28,450
now the end of homeworks the from

51
00:02:25,900 --> 00:02:34,390
exertion so everything is quite better

52
00:02:28,450 --> 00:02:36,850
in terms of security and today the huge

53
00:02:34,390 --> 00:02:39,700
monoliths applications are gone

54
00:02:36,850 --> 00:02:41,739
we have applications that are relying on

55
00:02:39,700 --> 00:02:44,019
many other to discuss and to and to

56
00:02:41,740 --> 00:02:47,710
fulfill a user request right you have

57
00:02:44,020 --> 00:02:50,200
micro services or other services might

58
00:02:47,710 --> 00:02:53,140
be third-party services that we use to

59
00:02:50,200 --> 00:02:56,560
fulfill a request like generating a bill

60
00:02:53,140 --> 00:02:59,920
or some skating user extracting data

61
00:02:56,560 --> 00:03:02,890
from data like for all this kind of

62
00:02:59,920 --> 00:03:06,700
things we do not rely on a single

63
00:03:02,890 --> 00:03:09,220
monolithic applications so it's your

64
00:03:06,700 --> 00:03:11,950
business logic right each time you do

65
00:03:09,220 --> 00:03:13,620
something that is quite tight to your

66
00:03:11,950 --> 00:03:18,010
company it goes across several

67
00:03:13,620 --> 00:03:20,220
applications to fulfill user request so

68
00:03:18,010 --> 00:03:23,859
what's an attack against business logic

69
00:03:20,220 --> 00:03:27,870
it's performing an action like ordering

70
00:03:23,860 --> 00:03:32,470
a pizza or accessing confidential data

71
00:03:27,870 --> 00:03:37,480
like the list of your orders and sushi

72
00:03:32,470 --> 00:03:40,090
store or security action like changing

73
00:03:37,480 --> 00:03:41,290
your credit card and uber eats for

74
00:03:40,090 --> 00:03:43,570
instance I'm sorry a lot of this

75
00:03:41,290 --> 00:03:47,730
examples are a bad food and French

76
00:03:43,570 --> 00:03:50,140
that's that's how it works so this is

77
00:03:47,730 --> 00:03:51,519
business threads there are specific to

78
00:03:50,140 --> 00:03:54,549
you to your business all right

79
00:03:51,520 --> 00:03:57,670
as Domino's Pizza you won't have the

80
00:03:54,550 --> 00:04:02,590
same threats as you would as if you were

81
00:03:57,670 --> 00:04:05,140
truly or the fgf for instance so the

82
00:04:02,590 --> 00:04:07,600
protections against business threats

83
00:04:05,140 --> 00:04:10,299
they cannot be generic you don't have

84
00:04:07,600 --> 00:04:15,880
one for all you need to have ones that

85
00:04:10,300 --> 00:04:18,310
are specific to your business logic so

86
00:04:15,880 --> 00:04:21,250
let me ask you a question who in the

87
00:04:18,310 --> 00:04:26,900
room need to protect more than 10

88
00:04:21,250 --> 00:04:31,340
applications right more than 50

89
00:04:26,900 --> 00:04:37,940
positions mm-hmm more than 100

90
00:04:31,340 --> 00:04:38,810
applications 200 applications oh that's

91
00:04:37,940 --> 00:04:48,199
right okay okay

92
00:04:38,810 --> 00:04:53,150
500 okay so thousand okay tell me how

93
00:04:48,199 --> 00:04:57,259
much many okay that's not too many like

94
00:04:53,150 --> 00:05:00,198
your point of view all right who else

95
00:04:57,259 --> 00:05:07,100
more than thousand just to get a couple

96
00:05:00,199 --> 00:05:11,570
of figures yeah what's your what's your

97
00:05:07,100 --> 00:05:12,080
business sir yeah sorry financial

98
00:05:11,570 --> 00:05:13,430
services

99
00:05:12,080 --> 00:05:15,710
all right that's that's a lot of

100
00:05:13,430 --> 00:05:19,310
applications all right

101
00:05:15,710 --> 00:05:21,940
that's a lot so indeed companies have

102
00:05:19,310 --> 00:05:25,630
more and more applications and you have

103
00:05:21,940 --> 00:05:28,940
people in the companies that are here to

104
00:05:25,630 --> 00:05:31,010
improve and move these applications for

105
00:05:28,940 --> 00:05:33,830
were like like squads that are pushing

106
00:05:31,010 --> 00:05:37,159
could every how to to improve these

107
00:05:33,830 --> 00:05:39,260
applications you have new applications

108
00:05:37,160 --> 00:05:43,580
that are deploying maybe every day every

109
00:05:39,260 --> 00:05:46,010
week and each of these applications rely

110
00:05:43,580 --> 00:05:50,150
on another application to fulfill a

111
00:05:46,010 --> 00:05:51,530
business request so the protection and

112
00:05:50,150 --> 00:05:53,570
this is not possible at the network

113
00:05:51,530 --> 00:05:56,150
cleaver because we don't know what the

114
00:05:53,570 --> 00:06:01,490
application is doing that's like plain

115
00:05:56,150 --> 00:06:05,448
HTTP we cannot rely on other tools such

116
00:06:01,490 --> 00:06:07,580
as static analysis for instance dynamic

117
00:06:05,449 --> 00:06:09,680
testing you have to understand the

118
00:06:07,580 --> 00:06:13,400
business law the business logic in order

119
00:06:09,680 --> 00:06:17,270
to test for its security so the solution

120
00:06:13,400 --> 00:06:21,198
is to decentralize the security inside

121
00:06:17,270 --> 00:06:24,340
each application that's the closer to

122
00:06:21,199 --> 00:06:27,820
the business logic we can be and its

123
00:06:24,340 --> 00:06:30,888
application embed its own security logic

124
00:06:27,820 --> 00:06:33,830
so if user requests perform several

125
00:06:30,889 --> 00:06:37,460
actions to to fulfill something some of

126
00:06:33,830 --> 00:06:40,849
these actions are sensitive right if we

127
00:06:37,460 --> 00:06:44,719
lie inside the application we can react

128
00:06:40,850 --> 00:06:47,780
if these actions are abused very well

129
00:06:44,720 --> 00:06:50,960
how can we do it in practice you you

130
00:06:47,780 --> 00:06:53,359
have the picture right we want to sit

131
00:06:50,960 --> 00:06:58,219
next to the code to get valuable

132
00:06:53,360 --> 00:07:01,730
information so we need to collect events

133
00:06:58,220 --> 00:07:05,120
at Trenton the closest to the business

134
00:07:01,730 --> 00:07:09,890
logic so we need to build our toolbox to

135
00:07:05,120 --> 00:07:12,830
fulfill this so first item in our

136
00:07:09,890 --> 00:07:14,390
toolbox efficient that could be

137
00:07:12,830 --> 00:07:16,609
something extremely simple that we'll

138
00:07:14,390 --> 00:07:20,060
just take as argument the name of a

139
00:07:16,610 --> 00:07:22,520
business event and this function will

140
00:07:20,060 --> 00:07:26,030
send this business event to something

141
00:07:22,520 --> 00:07:28,669
all right but we want this function to

142
00:07:26,030 --> 00:07:34,669
be used everywhere we do like sensitive

143
00:07:28,670 --> 00:07:36,530
business calls in practice it means that

144
00:07:34,670 --> 00:07:38,480
in all of your applications we would

145
00:07:36,530 --> 00:07:41,539
like to know South Korean add this

146
00:07:38,480 --> 00:07:43,790
helper everywhere ok so each time there

147
00:07:41,540 --> 00:07:44,810
is a sensitive action performed on all

148
00:07:43,790 --> 00:07:47,870
your applications

149
00:07:44,810 --> 00:07:51,950
this action will trigger this helper

150
00:07:47,870 --> 00:07:53,930
that may record this information where

151
00:07:51,950 --> 00:07:58,460
do we record it that's the second item

152
00:07:53,930 --> 00:08:00,740
in our toolbox in an event stream it

153
00:07:58,460 --> 00:08:05,239
will start everything that is sent by

154
00:08:00,740 --> 00:08:07,870
our helper across all applications the

155
00:08:05,240 --> 00:08:11,450
third item in our toolbox is an event

156
00:08:07,870 --> 00:08:14,740
processing and analysis system so that's

157
00:08:11,450 --> 00:08:18,050
an engine that allows to crunch the data

158
00:08:14,740 --> 00:08:22,430
in order to detect security anomalies

159
00:08:18,050 --> 00:08:26,540
what's happening is usual general I want

160
00:08:22,430 --> 00:08:30,020
to know last but not least the fourth

161
00:08:26,540 --> 00:08:33,110
item in our toolbox is the response all

162
00:08:30,020 --> 00:08:36,228
right if we detect something we want to

163
00:08:33,110 --> 00:08:39,289
send the response maybe it will block

164
00:08:36,229 --> 00:08:42,710
the attacker to deny a given action I

165
00:08:39,289 --> 00:08:46,219
don't know but we want once we detected

166
00:08:42,710 --> 00:08:48,980
something to stop the attack so if we

167
00:08:46,220 --> 00:08:53,379
put this in motion it gives us the

168
00:08:48,980 --> 00:08:56,569
following overview right we have several

169
00:08:53,379 --> 00:08:59,959
two items in our toolbox we want to put

170
00:08:56,569 --> 00:09:02,269
together so I can start detecting like

171
00:08:59,959 --> 00:09:05,628
if the rate of the cruel to a given

172
00:09:02,269 --> 00:09:07,999
function like user token generation is

173
00:09:05,629 --> 00:09:10,369
usual then I won't respond

174
00:09:07,999 --> 00:09:13,029
I might lock the user account and maybe

175
00:09:10,369 --> 00:09:16,220
send a left like I want to send a web

176
00:09:13,029 --> 00:09:18,019
same thing if the count of the call to

177
00:09:16,220 --> 00:09:20,600
user impersonation is above I don't know

178
00:09:18,019 --> 00:09:22,610
ten over the last minute then same thing

179
00:09:20,600 --> 00:09:25,399
I want to write an exception maybe block

180
00:09:22,610 --> 00:09:31,999
the IP in the reverse proxy and call the

181
00:09:25,399 --> 00:09:34,459
pager so if you think of it what I'm

182
00:09:31,999 --> 00:09:37,009
proposing about security decentralizing

183
00:09:34,459 --> 00:09:39,949
security across all applications and

184
00:09:37,009 --> 00:09:43,569
getting closer to the business logic is

185
00:09:39,949 --> 00:09:47,589
the same as what we did with performance

186
00:09:43,569 --> 00:09:52,910
who knows you recognize this picture

187
00:09:47,589 --> 00:09:55,850
no one ever use this tool new relic so

188
00:09:52,910 --> 00:09:58,549
if you think of the state of performance

189
00:09:55,850 --> 00:10:01,399
like twenty years ago how did we measure

190
00:09:58,549 --> 00:10:03,470
performance of a web application we were

191
00:10:01,399 --> 00:10:06,350
lying in the reverse proxy in the load

192
00:10:03,470 --> 00:10:09,139
balancer and we were measuring like the

193
00:10:06,350 --> 00:10:11,299
full time used to process a page

194
00:10:09,139 --> 00:10:13,220
rendering all right this is 100

195
00:10:11,299 --> 00:10:16,509
millisecond that's too much and then how

196
00:10:13,220 --> 00:10:19,490
do you act on this it's not easy so

197
00:10:16,509 --> 00:10:21,829
tools that are lining inside the

198
00:10:19,490 --> 00:10:22,790
applications I've been getting more and

199
00:10:21,829 --> 00:10:25,219
more popularity

200
00:10:22,790 --> 00:10:27,559
that's tools such as New Relic or app

201
00:10:25,220 --> 00:10:29,600
dynamics and these tools as they lie

202
00:10:27,559 --> 00:10:32,600
inside the application they can tell you

203
00:10:29,600 --> 00:10:36,199
this database request took a lot of time

204
00:10:32,600 --> 00:10:39,309
this external service is behaving much

205
00:10:36,199 --> 00:10:41,449
slower than usual and so thanks to this

206
00:10:39,309 --> 00:10:44,118
visibility even by the fact that these

207
00:10:41,449 --> 00:10:46,399
things lie inside your application

208
00:10:44,119 --> 00:10:48,529
source code we can get a lot of

209
00:10:46,399 --> 00:10:51,199
information about this if you think of

210
00:10:48,529 --> 00:10:52,369
it it's even one of the pillar of the

211
00:10:51,199 --> 00:10:55,189
emergence of DevOps

212
00:10:52,369 --> 00:10:57,889
because thanks to tools like that apps

213
00:10:55,189 --> 00:11:00,139
and developers have been able to work

214
00:10:57,889 --> 00:11:02,540
together in order to improve how the

215
00:11:00,139 --> 00:11:06,140
database behaves or how the applications

216
00:11:02,540 --> 00:11:08,599
code behave to create the database

217
00:11:06,140 --> 00:11:11,150
and application security is taking the

218
00:11:08,600 --> 00:11:13,580
same path right from outside at the

219
00:11:11,150 --> 00:11:15,949
border of the network to inside the

220
00:11:13,580 --> 00:11:20,540
application the closer to the

221
00:11:15,950 --> 00:11:24,170
application run time we can be so how

222
00:11:20,540 --> 00:11:25,699
can we do this at scale tuning the

223
00:11:24,170 --> 00:11:28,520
source code of all of your applications

224
00:11:25,700 --> 00:11:31,280
is very good and on the paper but it's

225
00:11:28,520 --> 00:11:33,319
hard to do it at scale like who's

226
00:11:31,280 --> 00:11:34,400
working with developers that are doing

227
00:11:33,320 --> 00:11:40,760
two weeks

228
00:11:34,400 --> 00:11:44,420
Sprint's yeah two weeks it's a lot when

229
00:11:40,760 --> 00:11:48,770
attacks are minutes maybe hours it's not

230
00:11:44,420 --> 00:11:50,510
it's not the same time scale here so we

231
00:11:48,770 --> 00:11:52,250
don't know every place now our

232
00:11:50,510 --> 00:11:54,560
applications were the business logic

233
00:11:52,250 --> 00:11:56,900
lies because we have plenty of

234
00:11:54,560 --> 00:11:59,359
applications we have several teams it's

235
00:11:56,900 --> 00:12:03,230
not possible to know everything by heart

236
00:11:59,360 --> 00:12:05,210
and when you write code a lot of time

237
00:12:03,230 --> 00:12:07,790
one year after well you don't remember

238
00:12:05,210 --> 00:12:12,290
exactly what you wrote and how it used

239
00:12:07,790 --> 00:12:16,459
to work right so it's not trivial to to

240
00:12:12,290 --> 00:12:20,180
change the way we to remember how the

241
00:12:16,460 --> 00:12:22,550
applications behave exactly so on top of

242
00:12:20,180 --> 00:12:25,790
that we pass code all the time we deploy

243
00:12:22,550 --> 00:12:28,790
applications several times a day even

244
00:12:25,790 --> 00:12:31,430
the whole organization goal or

245
00:12:28,790 --> 00:12:33,170
engineering team goal is to make the

246
00:12:31,430 --> 00:12:36,890
developers walk faster because that's

247
00:12:33,170 --> 00:12:41,209
how we we make our company move faster

248
00:12:36,890 --> 00:12:43,100
right someone I know is saying every

249
00:12:41,210 --> 00:12:44,870
company is a group is a software company

250
00:12:43,100 --> 00:12:46,430
today and that's true most of the

251
00:12:44,870 --> 00:12:48,110
company you know that are big enough

252
00:12:46,430 --> 00:12:49,910
they have their own developers team

253
00:12:48,110 --> 00:12:52,100
right and it's a challenge every time to

254
00:12:49,910 --> 00:12:56,270
have this developers move as fast as

255
00:12:52,100 --> 00:12:58,730
possible so the application security

256
00:12:56,270 --> 00:13:01,010
teams cannot break this flow right the

257
00:12:58,730 --> 00:13:03,410
girl cannot be to slow down the

258
00:13:01,010 --> 00:13:06,500
developer sputtering them I need you to

259
00:13:03,410 --> 00:13:08,209
push this new helper each time you call

260
00:13:06,500 --> 00:13:10,430
a sensitive business function we know

261
00:13:08,210 --> 00:13:12,350
this won't work because when we embed a

262
00:13:10,430 --> 00:13:15,620
new developer you want to know that he

263
00:13:12,350 --> 00:13:18,440
needs to call this function because some

264
00:13:15,620 --> 00:13:19,640
time with fix things in a rush and we

265
00:13:18,440 --> 00:13:22,010
don't do it so

266
00:13:19,640 --> 00:13:24,830
this approach cannot work it's

267
00:13:22,010 --> 00:13:26,660
impossible to do this by hand the

268
00:13:24,830 --> 00:13:29,780
solution would be to automatically

269
00:13:26,660 --> 00:13:33,230
generate all of these events from the

270
00:13:29,780 --> 00:13:35,180
from the applications without involving

271
00:13:33,230 --> 00:13:38,050
the development teams the solution to

272
00:13:35,180 --> 00:13:42,199
this is called dynamic instrumentation

273
00:13:38,050 --> 00:13:44,420
so here is a program flow you have all

274
00:13:42,200 --> 00:13:46,310
seen this I guess that several functions

275
00:13:44,420 --> 00:13:48,699
calling each other one of these

276
00:13:46,310 --> 00:13:51,650
functions is called authenticate

277
00:13:48,700 --> 00:13:54,860
authenticate is the function we want to

278
00:13:51,650 --> 00:13:56,870
track it's sensitive it's doing a really

279
00:13:54,860 --> 00:14:00,860
something I want to try because it's a

280
00:13:56,870 --> 00:14:02,300
sensitive business function so I don't

281
00:14:00,860 --> 00:14:06,380
want to change the application source

282
00:14:02,300 --> 00:14:08,689
code how can I do this do you know any

283
00:14:06,380 --> 00:14:10,939
kind of software that is doing this you

284
00:14:08,690 --> 00:14:15,110
have all used it you have all installed

285
00:14:10,940 --> 00:14:17,270
it that's the antivirus when you

286
00:14:15,110 --> 00:14:19,610
instrument virus on a machine if you try

287
00:14:17,270 --> 00:14:22,010
to open a file then C virus will tell

288
00:14:19,610 --> 00:14:25,400
will forbid you to open it if it's

289
00:14:22,010 --> 00:14:27,710
corrupted right so how does it work

290
00:14:25,400 --> 00:14:30,530
you did not change the internal of

291
00:14:27,710 --> 00:14:33,170
European system to say now I want to use

292
00:14:30,530 --> 00:14:36,920
the entire iris the antivirus all by

293
00:14:33,170 --> 00:14:40,400
itself replaced like the windows open or

294
00:14:36,920 --> 00:14:42,650
read fusion like the Cisco write and

295
00:14:40,400 --> 00:14:45,980
distinction when it's replaced by don t

296
00:14:42,650 --> 00:14:49,790
virus open allows each and every program

297
00:14:45,980 --> 00:14:51,770
to behave as usual but it's time to

298
00:14:49,790 --> 00:14:54,079
program try to open a file that's the

299
00:14:51,770 --> 00:14:55,910
antivirus code that is triggered the

300
00:14:54,080 --> 00:14:58,340
antivirus can check the file if there's

301
00:14:55,910 --> 00:14:59,870
a virus on it if the file is safe the

302
00:14:58,340 --> 00:15:03,320
execution goes on right that's exactly

303
00:14:59,870 --> 00:15:06,530
the same as as this here the

304
00:15:03,320 --> 00:15:09,650
authenticate function we just fetch it

305
00:15:06,530 --> 00:15:12,110
replacing by our own and each time

306
00:15:09,650 --> 00:15:14,750
anything in the program is calling us

307
00:15:12,110 --> 00:15:17,570
indicate it will go through our own code

308
00:15:14,750 --> 00:15:21,070
that's called instrumentation but it's

309
00:15:17,570 --> 00:15:25,010
not dynamic in order to make it dynamic

310
00:15:21,070 --> 00:15:27,820
we need to have this not hard coded but

311
00:15:25,010 --> 00:15:29,730
dynamically fueled to the application

312
00:15:27,820 --> 00:15:33,610
like we

313
00:15:29,730 --> 00:15:36,819
hook any function one two three four

314
00:15:33,610 --> 00:15:39,100
here we would be able by asking remotely

315
00:15:36,819 --> 00:15:42,670
to the program please hook function four

316
00:15:39,100 --> 00:15:45,579
of five or six to add our own helper

317
00:15:42,670 --> 00:15:47,199
called each of this time so using

318
00:15:45,579 --> 00:15:50,410
dynamic instrumentation we can replace

319
00:15:47,199 --> 00:15:52,829
any function with our helper without

320
00:15:50,410 --> 00:15:57,550
impacting the developers

321
00:15:52,829 --> 00:16:00,128
does it work in practice in Ruby it's

322
00:15:57,550 --> 00:16:03,160
really simple because this language is

323
00:16:00,129 --> 00:16:05,019
highly dynamic it's reflective you have

324
00:16:03,160 --> 00:16:07,868
a lot of buildings that allow you to do

325
00:16:05,019 --> 00:16:09,939
so so this ten lines of code allow you

326
00:16:07,869 --> 00:16:11,619
to do dynamic instrumentation very

327
00:16:09,939 --> 00:16:14,230
easily in Ruby you just call this

328
00:16:11,619 --> 00:16:16,480
function defined here and it will

329
00:16:14,230 --> 00:16:19,329
replace the method

330
00:16:16,480 --> 00:16:21,670
you gave an argument and curl instead

331
00:16:19,329 --> 00:16:23,888
the hook that you placed okay when the

332
00:16:21,670 --> 00:16:26,319
hook is called then the original

333
00:16:23,889 --> 00:16:28,269
function is call and that's it we just

334
00:16:26,319 --> 00:16:31,149
copy the original function with a

335
00:16:28,269 --> 00:16:33,209
temporary name and we rename our hook

336
00:16:31,149 --> 00:16:36,339
with the name of the original function

337
00:16:33,209 --> 00:16:39,189
some may think it's crappy but it's one

338
00:16:36,339 --> 00:16:42,509
of the many things that make the Ruby

339
00:16:39,189 --> 00:16:46,689
language so dynamic and so flexible

340
00:16:42,509 --> 00:16:48,129
we've tried to do the same in Java here

341
00:16:46,689 --> 00:16:50,980
it's not the same story because you know

342
00:16:48,129 --> 00:16:54,670
Java it's compiled to bytecode that is

343
00:16:50,980 --> 00:16:56,439
analyzed and run by the by the JVM so we

344
00:16:54,670 --> 00:17:00,069
should do this you need to act the

345
00:16:56,439 --> 00:17:01,569
bytecode liver it's quite difficult to

346
00:17:00,069 --> 00:17:04,299
do with the standard library you have

347
00:17:01,569 --> 00:17:06,699
many many third-party libraries that

348
00:17:04,299 --> 00:17:09,549
allow you to do so one good example is

349
00:17:06,699 --> 00:17:13,809
byte body that's the logo and in the top

350
00:17:09,549 --> 00:17:16,629
right by body is an amazing library that

351
00:17:13,809 --> 00:17:21,520
allow you to build instrumentation in

352
00:17:16,630 --> 00:17:25,329
this way but still it ends with a

353
00:17:21,520 --> 00:17:28,059
bytecode manipulation and and changing

354
00:17:25,329 --> 00:17:29,770
the way the JVM understands the the

355
00:17:28,059 --> 00:17:34,450
compiled lashes so it's much more

356
00:17:29,770 --> 00:17:36,730
difficult in Java than than in Ruby but

357
00:17:34,450 --> 00:17:38,990
still doable and if you think of it

358
00:17:36,730 --> 00:17:40,730
that's a bit how you you could

359
00:17:38,990 --> 00:17:43,190
could do it for any language using like

360
00:17:40,730 --> 00:17:47,630
simple debugger and remotely attaching

361
00:17:43,190 --> 00:17:49,429
2d 2d applications so let's assume we

362
00:17:47,630 --> 00:17:52,250
have something like this for all of our

363
00:17:49,429 --> 00:17:55,670
applications we are inside the

364
00:17:52,250 --> 00:17:59,650
application so we can retrieve all the

365
00:17:55,670 --> 00:18:02,960
context we need like is the user

366
00:17:59,650 --> 00:18:05,660
authenticated here ok when I am tracking

367
00:18:02,960 --> 00:18:07,370
a specific call to a sensitive business

368
00:18:05,660 --> 00:18:11,360
function I can have this information

369
00:18:07,370 --> 00:18:13,399
since I'm inside the application I can

370
00:18:11,360 --> 00:18:15,620
get to some business information if

371
00:18:13,400 --> 00:18:18,050
someone is ordering a pizza I can get

372
00:18:15,620 --> 00:18:20,540
the pizza I did I can get the store ID

373
00:18:18,050 --> 00:18:23,360
but yes probably it's all in my in my

374
00:18:20,540 --> 00:18:26,240
code at this point I can also know the

375
00:18:23,360 --> 00:18:30,260
framework information is it right Strads

376
00:18:26,240 --> 00:18:32,630
not GS express whatever and I'm in a web

377
00:18:30,260 --> 00:18:35,390
application web application calls they

378
00:18:32,630 --> 00:18:37,400
are triggered by layer seven by an HTTP

379
00:18:35,390 --> 00:18:41,990
request incoming HTTP request so I could

380
00:18:37,400 --> 00:18:43,910
get any item of this HTTP request also I

381
00:18:41,990 --> 00:18:46,640
could know the previous service that was

382
00:18:43,910 --> 00:18:49,010
called if a micro service environment

383
00:18:46,640 --> 00:18:50,870
and maybe all the spanning information

384
00:18:49,010 --> 00:18:55,010
if that's something you pass application

385
00:18:50,870 --> 00:18:59,989
replication so the amount of thing we

386
00:18:55,010 --> 00:19:04,340
can have is quite a limited now that's

387
00:18:59,990 --> 00:19:07,070
well that's very good but if we want to

388
00:19:04,340 --> 00:19:10,490
do this at scale we need to convince the

389
00:19:07,070 --> 00:19:14,210
developers to use such library in their

390
00:19:10,490 --> 00:19:17,840
applications in order of to do this we

391
00:19:14,210 --> 00:19:20,480
need to have perfect reliability no

392
00:19:17,840 --> 00:19:21,980
performance hit that's not something

393
00:19:20,480 --> 00:19:26,090
that distributes so how could we do this

394
00:19:21,980 --> 00:19:28,880
a pattern that is quite choosing agent

395
00:19:26,090 --> 00:19:31,639
software would be to say okay we have a

396
00:19:28,880 --> 00:19:35,929
thread that is the run of thread we have

397
00:19:31,640 --> 00:19:40,760
a queue and it's time we process a user

398
00:19:35,929 --> 00:19:43,850
request we do like the least possible

399
00:19:40,760 --> 00:19:46,580
treatment in the request flow and so if

400
00:19:43,850 --> 00:19:49,399
we encounter a sensitive business

401
00:19:46,580 --> 00:19:51,110
function that is hooked with our helper

402
00:19:49,400 --> 00:19:52,940
this helper with only partial

403
00:19:51,110 --> 00:19:56,059
information in

404
00:19:52,940 --> 00:19:58,549
so that's very fast and later we can

405
00:19:56,059 --> 00:20:00,529
have our dedicated thread that is

406
00:19:58,549 --> 00:20:02,929
pulling the cue and so that's up to the

407
00:20:00,529 --> 00:20:06,589
JVM or to the Ruby interpreter or

408
00:20:02,929 --> 00:20:09,859
whatever to allocate time to this thread

409
00:20:06,589 --> 00:20:12,708
when the application is not like

410
00:20:09,859 --> 00:20:16,428
bottlenecking and cpu right so our

411
00:20:12,709 --> 00:20:18,349
thread is called each time the the VM

412
00:20:16,429 --> 00:20:21,200
decides there are there is time for it

413
00:20:18,349 --> 00:20:23,509
and the thread can easily and queue

414
00:20:21,200 --> 00:20:26,839
items from the queue and put them in the

415
00:20:23,509 --> 00:20:29,709
event stream that's how we could

416
00:20:26,839 --> 00:20:35,928
activate this for speed and reliability

417
00:20:29,709 --> 00:20:39,559
so at scale getting fast at scale how

418
00:20:35,929 --> 00:20:42,679
does it work we can imagine we have a

419
00:20:39,559 --> 00:20:45,678
single library that is perched in each

420
00:20:42,679 --> 00:20:46,570
and every of the applications a single

421
00:20:45,679 --> 00:20:48,919
library

422
00:20:46,570 --> 00:20:51,019
obviously I guess you don't have one

423
00:20:48,919 --> 00:20:53,359
only technology for all your

424
00:20:51,019 --> 00:20:55,429
applications especially people with more

425
00:20:53,359 --> 00:20:59,629
than a thousand applications so you need

426
00:20:55,429 --> 00:21:01,669
to have one library per technology this

427
00:20:59,629 --> 00:21:05,269
library could each time the application

428
00:21:01,669 --> 00:21:06,619
stacks for instance fetch the remote

429
00:21:05,269 --> 00:21:08,719
directories for instrumentation

430
00:21:06,619 --> 00:21:11,599
remember we said dynamic instrumentation

431
00:21:08,719 --> 00:21:14,179
we push the order from the outside so we

432
00:21:11,599 --> 00:21:16,759
could search these others on as a JSON

433
00:21:14,179 --> 00:21:18,709
file on an external server each time an

434
00:21:16,759 --> 00:21:20,719
application starts it fetch is this file

435
00:21:18,709 --> 00:21:24,649
and is able to instrument whatever it

436
00:21:20,719 --> 00:21:26,899
needs so it's time you update your JSON

437
00:21:24,649 --> 00:21:28,339
file we could imagine the application is

438
00:21:26,899 --> 00:21:31,549
spelling for it every minute or every

439
00:21:28,339 --> 00:21:34,070
hour and updating itself so very

440
00:21:31,549 --> 00:21:37,339
dynamically you can say all right now I

441
00:21:34,070 --> 00:21:39,468
want to hook this new function you put

442
00:21:37,339 --> 00:21:42,408
this in the instrumentation that JSON

443
00:21:39,469 --> 00:21:45,499
file and that's done the applications

444
00:21:42,409 --> 00:21:47,690
our instrument in this new function so

445
00:21:45,499 --> 00:21:50,209
it's time an instrumented function is

446
00:21:47,690 --> 00:21:54,709
called an event is registered in our

447
00:21:50,209 --> 00:21:56,690
event stream so based on this we could

448
00:21:54,709 --> 00:22:00,139
analyze many things like the volume of

449
00:21:56,690 --> 00:22:02,929
course the successive actions performed

450
00:22:00,139 --> 00:22:04,719
by the user by an IP we could detect

451
00:22:02,929 --> 00:22:06,880
unusual activity

452
00:22:04,720 --> 00:22:08,980
there are nominees in volume and

453
00:22:06,880 --> 00:22:10,960
proportions and obviously we could also

454
00:22:08,980 --> 00:22:15,190
check the logic flows all right if

455
00:22:10,960 --> 00:22:19,240
ordering a pizza needs to select a pizza

456
00:22:15,190 --> 00:22:21,340
first then select a shop then trigger

457
00:22:19,240 --> 00:22:24,159
the order and pay that's like four

458
00:22:21,340 --> 00:22:26,408
actions we know it all right if one of

459
00:22:24,159 --> 00:22:29,730
these action is not cool that could be

460
00:22:26,409 --> 00:22:31,990
an indicator that something is going on

461
00:22:29,730 --> 00:22:34,419
once we have detected something we want

462
00:22:31,990 --> 00:22:37,600
to respond we want to deny access to

463
00:22:34,419 --> 00:22:40,419
sensitive functions deny access to whole

464
00:22:37,600 --> 00:22:42,850
service certain account has read only a

465
00:22:40,419 --> 00:22:46,150
local user account maybe log the user

466
00:22:42,850 --> 00:22:48,070
out that's all actions we can do that

467
00:22:46,150 --> 00:22:50,230
are quite easy to do since we are

468
00:22:48,070 --> 00:22:54,700
already in the code so we could imagine

469
00:22:50,230 --> 00:22:57,330
that we have specific helpers in this

470
00:22:54,700 --> 00:23:01,750
library to help us perform likes

471
00:22:57,330 --> 00:23:03,820
business responses of course we could

472
00:23:01,750 --> 00:23:06,250
also do notifications like your pager

473
00:23:03,820 --> 00:23:11,168
for your web book or created zero a

474
00:23:06,250 --> 00:23:15,840
ticket for instance quick question is

475
00:23:11,169 --> 00:23:15,840
there anyone from Facebook in the room

476
00:23:16,710 --> 00:23:25,770
that's better so you know two or three

477
00:23:22,630 --> 00:23:28,419
weeks ago Facebook got 50 million

478
00:23:25,770 --> 00:23:32,049
accounts that have been leaked right and

479
00:23:28,419 --> 00:23:34,270
we learned last week I think that a lot

480
00:23:32,049 --> 00:23:38,639
of meta data have been stolen as well

481
00:23:34,270 --> 00:23:42,070
right so the the hack was quite terrible

482
00:23:38,640 --> 00:23:45,090
three things have made this hack

483
00:23:42,070 --> 00:23:48,939
possible in all of these three things

484
00:23:45,090 --> 00:23:50,860
none of them is from like G was stopped

485
00:23:48,940 --> 00:23:52,809
and none of them is a generic technical

486
00:23:50,860 --> 00:23:57,610
vulnerability they are all business

487
00:23:52,809 --> 00:24:00,970
logic issues that have been combined by

488
00:23:57,610 --> 00:24:03,219
the attacker the first one was I don't

489
00:24:00,970 --> 00:24:06,850
have a Facebook account in a security

490
00:24:03,220 --> 00:24:09,640
guy right but without any Facebook

491
00:24:06,850 --> 00:24:11,139
account I think I still endures the

492
00:24:09,640 --> 00:24:12,429
thing but if you think I'm doing

493
00:24:11,140 --> 00:24:16,270
something wrong I am saying something

494
00:24:12,429 --> 00:24:18,040
wrong just just tell me so when you post

495
00:24:16,270 --> 00:24:20,590
something on Facebook

496
00:24:18,040 --> 00:24:23,020
there is a view as function ok this

497
00:24:20,590 --> 00:24:25,929
restriction can allow you to check as

498
00:24:23,020 --> 00:24:28,150
your mother for instance that she will

499
00:24:25,930 --> 00:24:31,450
see the right things that you intend her

500
00:24:28,150 --> 00:24:33,940
to see when you pass something this

501
00:24:31,450 --> 00:24:36,340
function is supposed to be read-only

502
00:24:33,940 --> 00:24:39,060
because Facebook does not want you to

503
00:24:36,340 --> 00:24:44,409
push that on the behalf of your mother

504
00:24:39,060 --> 00:24:48,179
right first Berg this view as fiction

505
00:24:44,410 --> 00:24:51,370
was displaying upload form that we're

506
00:24:48,180 --> 00:24:55,270
allowing people to upload videos on the

507
00:24:51,370 --> 00:24:58,570
behalf of your mother second issue this

508
00:24:55,270 --> 00:25:00,700
video uploader was generating tokens

509
00:24:58,570 --> 00:25:04,149
that could be used on the facebook

510
00:25:00,700 --> 00:25:05,200
mobile API you new role but yeah that's

511
00:25:04,150 --> 00:25:10,300
a bug all right

512
00:25:05,200 --> 00:25:13,690
sorry sure the video uploader was

513
00:25:10,300 --> 00:25:16,149
generating token when used with the view

514
00:25:13,690 --> 00:25:20,670
as fiction that were not for you but for

515
00:25:16,150 --> 00:25:25,390
my mother your mother action so

516
00:25:20,670 --> 00:25:27,760
combining these three bugs allowed the

517
00:25:25,390 --> 00:25:31,750
users or the half the attackers in this

518
00:25:27,760 --> 00:25:34,510
case to generate token working in the

519
00:25:31,750 --> 00:25:35,830
facebook mobile API for any kind of user

520
00:25:34,510 --> 00:25:39,220
the manage to impersonate

521
00:25:35,830 --> 00:25:42,340
so that's how 50 million tokens got

522
00:25:39,220 --> 00:25:45,280
stolen so let's put ourselves in the in

523
00:25:42,340 --> 00:25:47,080
the Facebook security team and let's

524
00:25:45,280 --> 00:25:50,590
from the how they could have protected

525
00:25:47,080 --> 00:25:57,820
themselves against that using the tool

526
00:25:50,590 --> 00:26:00,669
box we just defined so view as and video

527
00:25:57,820 --> 00:26:05,560
uploader are most likely to user facing

528
00:26:00,670 --> 00:26:07,300
services an internal service would be

529
00:26:05,560 --> 00:26:08,980
the user token management right it's

530
00:26:07,300 --> 00:26:12,669
like the the thing that is dealing with

531
00:26:08,980 --> 00:26:16,060
the sonication at Facebook's scale the

532
00:26:12,670 --> 00:26:18,700
thing I would monitor if I had to

533
00:26:16,060 --> 00:26:20,200
protect this thing would be probably the

534
00:26:18,700 --> 00:26:22,420
view as function because you know

535
00:26:20,200 --> 00:26:24,610
impersonating a user even if it's

536
00:26:22,420 --> 00:26:25,980
supposed to be readily it's something

537
00:26:24,610 --> 00:26:29,500
that is quite sensitive

538
00:26:25,980 --> 00:26:31,480
second thing use of token management I

539
00:26:29,500 --> 00:26:33,970
think I would never have bothered

540
00:26:31,480 --> 00:26:38,290
to instrument the video upload r3i you a

541
00:26:33,970 --> 00:26:40,750
pledge video that's that's okay so how

542
00:26:38,290 --> 00:26:45,360
can we solve it with all the toolbox we

543
00:26:40,750 --> 00:26:49,180
we have now so I regard these two things

544
00:26:45,360 --> 00:26:51,909
generate impersonator user and generate

545
00:26:49,180 --> 00:26:54,760
two user token that I want to define

546
00:26:51,910 --> 00:26:57,160
rules to allow detective inner ability

547
00:26:54,760 --> 00:26:59,530
exploitation like fuser is calling the

548
00:26:57,160 --> 00:27:02,400
impersonation function too much or maybe

549
00:26:59,530 --> 00:27:05,290
if a user is Korean air 8 - can too much

550
00:27:02,400 --> 00:27:07,900
what is too much that's that's a good

551
00:27:05,290 --> 00:27:10,030
question but could be animal detection

552
00:27:07,900 --> 00:27:13,200
you you could use many many algorithm to

553
00:27:10,030 --> 00:27:16,750
detect and - and to generate too much

554
00:27:13,200 --> 00:27:18,910
function then I want to trigger the

555
00:27:16,750 --> 00:27:20,410
security responses to be applied so if I

556
00:27:18,910 --> 00:27:22,440
was working in the in the Facebook

557
00:27:20,410 --> 00:27:25,840
security team and I had to write this

558
00:27:22,440 --> 00:27:28,000
obviously I would not lock the user the

559
00:27:25,840 --> 00:27:30,550
day I deployed is right probably I would

560
00:27:28,000 --> 00:27:33,190
let have it run for a couple weeks and

561
00:27:30,550 --> 00:27:36,159
see how it behaves tagging the users for

562
00:27:33,190 --> 00:27:39,070
review and if the thing is seems to be

563
00:27:36,160 --> 00:27:42,100
working correctly then I would then use

564
00:27:39,070 --> 00:27:44,409
this functions like lock the user and

565
00:27:42,100 --> 00:27:46,840
probably tag the user for review because

566
00:27:44,410 --> 00:27:49,360
if we lock a user we are a b2c company

567
00:27:46,840 --> 00:27:53,399
we want to ensure that this user I've

568
00:27:49,360 --> 00:27:53,399
been locked in in a good way

569
00:27:53,580 --> 00:27:58,480
some tools that we could use to

570
00:27:56,290 --> 00:28:00,250
practically implement this the data

571
00:27:58,480 --> 00:28:03,130
streaming engines they are they are

572
00:28:00,250 --> 00:28:05,220
going mainstream nowadays you all know

573
00:28:03,130 --> 00:28:09,340
calf care probably you have the Google

574
00:28:05,220 --> 00:28:12,610
pub/sub AWS kinases all of this allow

575
00:28:09,340 --> 00:28:17,110
you to build highly performance data

576
00:28:12,610 --> 00:28:20,560
stream engines to to gather all these

577
00:28:17,110 --> 00:28:23,740
all these kind of events a numeric

578
00:28:20,560 --> 00:28:26,740
detection is the same I won't say it's

579
00:28:23,740 --> 00:28:30,130
trivial but it's doable and it's not you

580
00:28:26,740 --> 00:28:32,940
don't think like a PhD to do it are just

581
00:28:30,130 --> 00:28:36,790
not a pure gene in that machine learning

582
00:28:32,940 --> 00:28:38,410
on WS Genesis you have by default a lot

583
00:28:36,790 --> 00:28:41,110
of algorithm that all

584
00:28:38,410 --> 00:28:44,800
you to be like random forest animal

585
00:28:41,110 --> 00:28:50,260
detection and that are working and any

586
00:28:44,800 --> 00:28:52,720
decent set of data and then if we sum it

587
00:28:50,260 --> 00:28:55,470
up let's assume we are protecting the

588
00:28:52,720 --> 00:28:57,970
Facebook infrastructure right so we have

589
00:28:55,470 --> 00:28:59,980
instrumentation that JSON file that is

590
00:28:57,970 --> 00:29:02,650
describing all the functions we want to

591
00:28:59,980 --> 00:29:04,990
hook we have all of our infrastructure

592
00:29:02,650 --> 00:29:07,510
with many micro services that are all

593
00:29:04,990 --> 00:29:11,010
using the library I've defined

594
00:29:07,510 --> 00:29:13,240
previously and it's time this

595
00:29:11,010 --> 00:29:15,670
application starts the federal

596
00:29:13,240 --> 00:29:17,940
instrumentation file so they are hooking

597
00:29:15,670 --> 00:29:20,680
the functions we want them to monitor

598
00:29:17,940 --> 00:29:23,350
everything is perched to the event

599
00:29:20,680 --> 00:29:27,040
stream so in the case of this attack we

600
00:29:23,350 --> 00:29:31,050
would see like 50 million calls and a

601
00:29:27,040 --> 00:29:34,180
very short period of time on this API

602
00:29:31,050 --> 00:29:37,270
everything is sent to the event stream

603
00:29:34,180 --> 00:29:41,860
and we can process and analyze it to

604
00:29:37,270 --> 00:29:44,530
detect probably an anomaly a peach a

605
00:29:41,860 --> 00:29:47,530
huge peach in the usage of the things

606
00:29:44,530 --> 00:29:49,899
and that's it we can respond lock the

607
00:29:47,530 --> 00:29:54,970
user trigger any kind of security

608
00:29:49,900 --> 00:29:57,310
response we want this is illustrated in

609
00:29:54,970 --> 00:30:00,880
a quite simple open source project don't

610
00:29:57,310 --> 00:30:03,669
use it in production please but feel

611
00:30:00,880 --> 00:30:07,600
free to check it out you have all the

612
00:30:03,670 --> 00:30:12,250
basics you you might need to poke things

613
00:30:07,600 --> 00:30:14,169
than to try things out any questions I'd

614
00:30:12,250 --> 00:30:16,300
be happy to answer and I'll be around

615
00:30:14,170 --> 00:30:22,930
all day so feel free to reach out to me

616
00:30:16,300 --> 00:30:24,940
for anything any questions guys these

617
00:30:22,930 --> 00:30:28,600
business logic examples you gave are

618
00:30:24,940 --> 00:30:30,790
actually quite technical do you have any

619
00:30:28,600 --> 00:30:34,030
sort of work being done in the more

620
00:30:30,790 --> 00:30:37,389
functional or financial sort of business

621
00:30:34,030 --> 00:30:43,000
logic yeah so we protect for instance a

622
00:30:37,390 --> 00:30:46,100
lot of marketplaces and also kind of

623
00:30:43,000 --> 00:30:49,310
marketplace a lot of bit connections

624
00:30:46,100 --> 00:30:54,199
these are all highly targeted companies

625
00:30:49,310 --> 00:30:57,409
and the one pattern that is often seen

626
00:30:54,200 --> 00:30:59,780
by the Bitcoin exchanges is like you

627
00:30:57,410 --> 00:31:01,820
just sign up and you do a lot of

628
00:30:59,780 --> 00:31:03,230
payments coming from other users and

629
00:31:01,820 --> 00:31:06,679
that's the sign that something is going

630
00:31:03,230 --> 00:31:08,680
wrong other thing very popular attack

631
00:31:06,680 --> 00:31:11,590
against the Bitcoin exchanges is

632
00:31:08,680 --> 00:31:14,060
credential Stephanie right so I gather

633
00:31:11,590 --> 00:31:18,020
database of flicked passwords and I'm

634
00:31:14,060 --> 00:31:19,760
gonna try against all of your users for

635
00:31:18,020 --> 00:31:21,710
a combination of password working if I

636
00:31:19,760 --> 00:31:24,290
have one that is working then I will do

637
00:31:21,710 --> 00:31:27,800
a Bitcoin transaction to my public key

638
00:31:24,290 --> 00:31:30,139
okay and so if I detect this in a

639
00:31:27,800 --> 00:31:32,030
network exchange well it's it's not

640
00:31:30,140 --> 00:31:35,690
really a vulnerability it's like really

641
00:31:32,030 --> 00:31:38,030
a business logic issue and by using a

642
00:31:35,690 --> 00:31:39,800
similar or similar approach it's quite

643
00:31:38,030 --> 00:31:41,810
easy to detect and to and to protect

644
00:31:39,800 --> 00:31:42,970
against that for the marketplace is the

645
00:31:41,810 --> 00:31:46,159
same you have a lot of like

646
00:31:42,970 --> 00:31:47,630
money-laundering people like you

647
00:31:46,160 --> 00:31:49,610
marketplace hello people to sell

648
00:31:47,630 --> 00:31:52,090
t-shirts and other people to buy t-shirt

649
00:31:49,610 --> 00:31:55,399
if I want to launder money I can just

650
00:31:52,090 --> 00:31:57,260
fake selling a lot of t-shirts and

651
00:31:55,400 --> 00:31:59,000
buying them and then the other side and

652
00:31:57,260 --> 00:32:01,760
that that's that's a simple way to to

653
00:31:59,000 --> 00:32:03,590
turn under money so all of this yes are

654
00:32:01,760 --> 00:32:06,610
other examples of things you could

655
00:32:03,590 --> 00:32:06,610
detect with logic

656
00:32:10,500 --> 00:32:15,140
[Music]

657
00:32:13,100 --> 00:32:18,080
so I was just wondering you're talking

658
00:32:15,140 --> 00:32:21,110
about actually protecting the micro

659
00:32:18,080 --> 00:32:23,600
service architecture by providing sort

660
00:32:21,110 --> 00:32:27,740
of endpoint telemetry for the market

661
00:32:23,600 --> 00:32:30,020
services that exist in the stack what

662
00:32:27,740 --> 00:32:31,490
what differences would you say that that

663
00:32:30,020 --> 00:32:34,100
provides in your particular

664
00:32:31,490 --> 00:32:36,740
implementation versus something like app

665
00:32:34,100 --> 00:32:38,540
dynamics or as you were mentioning the

666
00:32:36,740 --> 00:32:43,160
you are the particular example that you

667
00:32:38,540 --> 00:32:45,530
were using before so up dynamics or new

668
00:32:43,160 --> 00:32:48,800
religion or things like this you write

669
00:32:45,530 --> 00:32:51,260
the line inside the code but they are

670
00:32:48,800 --> 00:32:55,780
not built in a situation minded way

671
00:32:51,260 --> 00:32:58,490
right they don't allow you to capture

672
00:32:55,780 --> 00:33:01,129
events remotely

673
00:32:58,490 --> 00:33:03,050
at the scale of a company yeah like New

674
00:33:01,130 --> 00:33:05,510
Relic insights for instance yes you can

675
00:33:03,050 --> 00:33:07,580
use it you have to instrument its place

676
00:33:05,510 --> 00:33:10,400
of your code where you want to send

677
00:33:07,580 --> 00:33:13,220
business metrics right it's working well

678
00:33:10,400 --> 00:33:16,070
to be like business analytics right the

679
00:33:13,220 --> 00:33:17,990
way it works you have like the business

680
00:33:16,070 --> 00:33:20,870
team that saying we really need these

681
00:33:17,990 --> 00:33:22,429
analytics and so you have the developers

682
00:33:20,870 --> 00:33:25,699
that are fed with these specifications

683
00:33:22,429 --> 00:33:27,950
and one sprint later or n sprint later

684
00:33:25,700 --> 00:33:31,730
depending on the power of the guys then

685
00:33:27,950 --> 00:33:34,970
the thing is really but it's it's

686
00:33:31,730 --> 00:33:37,070
working because these guys they have a

687
00:33:34,970 --> 00:33:40,640
strong interest in the company's

688
00:33:37,070 --> 00:33:44,720
business the security teams usually it's

689
00:33:40,640 --> 00:33:46,429
a bit less priority and if you want to

690
00:33:44,720 --> 00:33:48,020
do it at scale it's not enough to do it

691
00:33:46,429 --> 00:33:49,850
with one application you need to do it

692
00:33:48,020 --> 00:33:53,210
with all of your stack so you need a

693
00:33:49,850 --> 00:33:55,399
different tiding to do all this like the

694
00:33:53,210 --> 00:33:57,140
business which is one of the many things

695
00:33:55,400 --> 00:34:00,140
you have to deal with when you are an

696
00:33:57,140 --> 00:34:03,080
application security team the one thing

697
00:34:00,140 --> 00:34:04,580
I just would say is for example I get

698
00:34:03,080 --> 00:34:06,649
what you're saying is that maybe at

699
00:34:04,580 --> 00:34:08,779
scale you wouldn't be able to monitor

700
00:34:06,650 --> 00:34:10,190
all those endpoints or you wouldn't have

701
00:34:08,780 --> 00:34:11,929
to limit Rhian all those endpoints or

702
00:34:10,190 --> 00:34:13,940
something like that but at the end of

703
00:34:11,929 --> 00:34:16,000
the day I mean in our particular case we

704
00:34:13,940 --> 00:34:18,950
use app dynamics quite extensively and

705
00:34:16,000 --> 00:34:20,690
in a micro service architecture mostly

706
00:34:18,949 --> 00:34:22,819
in the modern way of doing micro

707
00:34:20,690 --> 00:34:25,970
services at least they're all just api's

708
00:34:22,820 --> 00:34:28,850
and Abdallah extras monitors those API

709
00:34:25,969 --> 00:34:30,949
endpoints and you could add some

710
00:34:28,850 --> 00:34:32,960
telemetry on for example calls per

711
00:34:30,949 --> 00:34:34,460
minutes on a particular endpoint any

712
00:34:32,960 --> 00:34:36,500
endpoint in your stack if that cause

713
00:34:34,460 --> 00:34:39,080
permanent metric spikes above a

714
00:34:36,500 --> 00:34:41,090
particular threshold send out some sort

715
00:34:39,080 --> 00:34:42,859
of email whatever the key in the case

716
00:34:41,090 --> 00:34:44,629
may be and there you go you kind of know

717
00:34:42,859 --> 00:34:47,330
that someone's hitting that particular

718
00:34:44,629 --> 00:34:48,589
vulnerable endpoint so what difference

719
00:34:47,330 --> 00:34:50,509
would you suggest that this

720
00:34:48,590 --> 00:34:53,720
implementation kind of odds against that

721
00:34:50,510 --> 00:34:57,830
well the the endpoint is quite as round

722
00:34:53,719 --> 00:35:00,709
again endpoint is like layer 7 HTTP it's

723
00:34:57,830 --> 00:35:03,950
not a given function so if you if you it

724
00:35:00,710 --> 00:35:06,410
means that it's time one developer will

725
00:35:03,950 --> 00:35:08,660
change like the the the way the

726
00:35:06,410 --> 00:35:10,910
application is behaving do endpoint will

727
00:35:08,660 --> 00:35:11,680
change but the business logic that lies

728
00:35:10,910 --> 00:35:15,910
deep

729
00:35:11,680 --> 00:35:18,368
could might be unchanged right I guess

730
00:35:15,910 --> 00:35:19,960
but so just on your Facebook example I

731
00:35:18,369 --> 00:35:23,260
don't mean to be argumentative about the

732
00:35:19,960 --> 00:35:25,450
way just with your Facebook example if I

733
00:35:23,260 --> 00:35:27,940
say upload video is a particular

734
00:35:25,450 --> 00:35:29,950
function that particular function will

735
00:35:27,940 --> 00:35:31,059
be tied to an endpoint realistically

736
00:35:29,950 --> 00:35:32,439
I mean the modern way of designing

737
00:35:31,059 --> 00:35:34,450
software I must say coming from a

738
00:35:32,440 --> 00:35:35,740
developer mindset the modern way of

739
00:35:34,450 --> 00:35:37,629
designing software is to make it as

740
00:35:35,740 --> 00:35:39,459
granular as possible far design an

741
00:35:37,630 --> 00:35:41,500
endpoint there's not going to be much

742
00:35:39,460 --> 00:35:44,200
curve behind that endpoint besides what

743
00:35:41,500 --> 00:35:46,000
it's designed to do so if I say design

744
00:35:44,200 --> 00:35:49,000
the endpoint that's for upload video or

745
00:35:46,000 --> 00:35:51,190
view as as you were saying no example if

746
00:35:49,000 --> 00:35:52,599
I monitor those two endpoints and I'll

747
00:35:51,190 --> 00:35:54,760
see that calls per minute goes up to

748
00:35:52,599 --> 00:35:59,260
600,000 I know that there's something

749
00:35:54,760 --> 00:36:00,940
wrong in my application yeah III agree

750
00:35:59,260 --> 00:36:04,119
that's like the best practices in

751
00:36:00,940 --> 00:36:06,640
software development yeah I think we are

752
00:36:04,119 --> 00:36:08,109
first of all not only defending

753
00:36:06,640 --> 00:36:10,740
applications that follow the best

754
00:36:08,109 --> 00:36:15,220
practices but that's that's one thing

755
00:36:10,740 --> 00:36:17,979
and yeah I agree that this might not

756
00:36:15,220 --> 00:36:20,339
work in in any case I'm not saying that

757
00:36:17,980 --> 00:36:22,930
this is like the solution to any kind of

758
00:36:20,339 --> 00:36:27,970
veneer abilities here don't don't get me

759
00:36:22,930 --> 00:36:29,680
wrong but I definitely agree that yes in

760
00:36:27,970 --> 00:36:31,689
some cases you could have a mapping

761
00:36:29,680 --> 00:36:33,640
between fission and endpoint yes that's

762
00:36:31,690 --> 00:36:38,079
that's possible and in this case maybe

763
00:36:33,640 --> 00:36:41,348
but still if you want to build the whole

764
00:36:38,079 --> 00:36:43,780
toolbox with dynamics how would you like

765
00:36:41,349 --> 00:36:46,480
a larger user or trigger situation

766
00:36:43,780 --> 00:36:49,030
response that's all things that need to

767
00:36:46,480 --> 00:36:50,500
to lie deep in the code as well no agree

768
00:36:49,030 --> 00:36:52,930
I mean that's not stuff that comes out

769
00:36:50,500 --> 00:36:57,569
the box that tanorexia definitely let's

770
00:36:52,930 --> 00:36:57,569
walk around but dynamics the great room

771
00:37:03,349 --> 00:37:06,660
well thank you very much thank you very

772
00:37:05,970 --> 00:37:12,310
much

773
00:37:06,660 --> 00:37:12,310
[Applause]

