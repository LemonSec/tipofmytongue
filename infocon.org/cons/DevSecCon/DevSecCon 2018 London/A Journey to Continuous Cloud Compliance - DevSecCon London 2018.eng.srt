1
00:00:00,000 --> 00:00:06,029
going to talk about my personal journey

2
00:00:02,730 --> 00:00:09,690
to continuous cloud compliance so who

3
00:00:06,029 --> 00:00:11,700
here has either implemented a continuous

4
00:00:09,690 --> 00:00:15,690
cloud compliant solution or is thinking

5
00:00:11,700 --> 00:00:17,340
about doing so quite a few and for those

6
00:00:15,690 --> 00:00:19,140
of you who haven't if you've got

7
00:00:17,340 --> 00:00:22,140
anything in the clouds maybe by the end

8
00:00:19,140 --> 00:00:29,759
of the talk you might decide to we'll

9
00:00:22,140 --> 00:00:31,980
see so I'm this is based on some of the

10
00:00:29,760 --> 00:00:36,270
work which I've done with a few

11
00:00:31,980 --> 00:00:40,230
different customers and in both cases

12
00:00:36,270 --> 00:00:41,460
actually I joined a DevOps team and in

13
00:00:40,230 --> 00:00:43,468
one particular case I'm thinking of I

14
00:00:41,460 --> 00:00:45,750
joined the DevOps team as their first

15
00:00:43,469 --> 00:00:47,879
really hands-on security architects this

16
00:00:45,750 --> 00:00:52,410
was for a reasonable-sized organization

17
00:00:47,879 --> 00:00:54,030
and there was already a sort of central

18
00:00:52,410 --> 00:00:56,398
security department but I was the first

19
00:00:54,030 --> 00:01:00,539
security engineer that actually became

20
00:00:56,399 --> 00:01:04,760
part of the DevOps team so I was going

21
00:01:00,539 --> 00:01:06,840
to every stand up and actually coding

22
00:01:04,760 --> 00:01:12,780
security features and making

23
00:01:06,840 --> 00:01:14,490
improvements so that's me smiling so I

24
00:01:12,780 --> 00:01:15,990
started off by being very polite and

25
00:01:14,490 --> 00:01:19,560
nice to everybody

26
00:01:15,990 --> 00:01:23,669
and as you can imagine it didn't really

27
00:01:19,560 --> 00:01:25,770
last that long so the sort of background

28
00:01:23,670 --> 00:01:27,799
was that when I came in there was

29
00:01:25,770 --> 00:01:31,350
already a production application in

30
00:01:27,799 --> 00:01:34,530
Amazon hosted in Amazon Web Services AWS

31
00:01:31,350 --> 00:01:38,579
and this was maintained and developed by

32
00:01:34,530 --> 00:01:46,500
around 30 to 40 DevOps and cloud ops

33
00:01:38,579 --> 00:01:49,439
engineers and as you might expect we use

34
00:01:46,500 --> 00:01:53,700
an agile development process two-week

35
00:01:49,439 --> 00:01:59,070
sprints every sprint there might be 30

36
00:01:53,700 --> 00:02:01,640
different stories most of the

37
00:01:59,070 --> 00:02:04,829
infrastructure was coded which was good

38
00:02:01,640 --> 00:02:10,860
however there was some manual

39
00:02:04,829 --> 00:02:13,829
configuration as well and my role was to

40
00:02:10,860 --> 00:02:16,440
encourage good security practice and

41
00:02:13,830 --> 00:02:21,300
helped to improve the security of the

42
00:02:16,440 --> 00:02:22,710
platform so when I joined I started off

43
00:02:21,300 --> 00:02:25,080
by thinking well what I should probably

44
00:02:22,710 --> 00:02:27,480
do is find out what the security

45
00:02:25,080 --> 00:02:32,190
requirements are not a bad place to

46
00:02:27,480 --> 00:02:34,590
start and I was told that I'd in any

47
00:02:32,190 --> 00:02:37,890
case I would have done this myself -

48
00:02:34,590 --> 00:02:40,950
that we needed to comply with the center

49
00:02:37,890 --> 00:02:43,799
for internet security Amazon Web

50
00:02:40,950 --> 00:02:46,619
Services Foundation benchmark which is a

51
00:02:43,800 --> 00:02:51,000
good place to stop have some of you

52
00:02:46,620 --> 00:02:52,890
familiar with with this yep good it's

53
00:02:51,000 --> 00:02:54,750
very good starting point for AWS

54
00:02:52,890 --> 00:02:58,019
security there are 43 controls across

55
00:02:54,750 --> 00:03:01,500
four domains and these include Identity

56
00:02:58,020 --> 00:03:03,959
and Access Management logging monitoring

57
00:03:01,500 --> 00:03:05,610
and networking and that's not to say

58
00:03:03,959 --> 00:03:08,459
that all you need to do to make your

59
00:03:05,610 --> 00:03:11,240
infrastructure secure is pass all those

60
00:03:08,459 --> 00:03:17,610
tests but it is a good starting point so

61
00:03:11,240 --> 00:03:19,500
I started off a bit naively logging into

62
00:03:17,610 --> 00:03:21,750
the console getting myself an account on

63
00:03:19,500 --> 00:03:24,360
the different accounts there was some

64
00:03:21,750 --> 00:03:26,940
separation between development and

65
00:03:24,360 --> 00:03:29,580
production which was good and I started

66
00:03:26,940 --> 00:03:32,340
off manually logging into the console

67
00:03:29,580 --> 00:03:36,630
and seeing what I could see and seeing

68
00:03:32,340 --> 00:03:41,220
then going through in a fairly manual

69
00:03:36,630 --> 00:03:45,299
way which of these controls are actually

70
00:03:41,220 --> 00:03:48,870
complied with and what I've found as you

71
00:03:45,300 --> 00:03:51,120
might not be surprised to hear was open

72
00:03:48,870 --> 00:03:53,450
security groups so security groups being

73
00:03:51,120 --> 00:03:57,930
their host-based firewalls around

74
00:03:53,450 --> 00:04:01,649
virtual machines in easy to open

75
00:03:57,930 --> 00:04:06,420
security groups with inbound from an e

76
00:04:01,650 --> 00:04:08,400
to ssh for instance which is bad from a

77
00:04:06,420 --> 00:04:10,458
security point of view dangerous

78
00:04:08,400 --> 00:04:15,540
identity and access management policies

79
00:04:10,459 --> 00:04:17,970
some was so miscoded that they could

80
00:04:15,540 --> 00:04:22,320
actually allow takeover of the account

81
00:04:17,970 --> 00:04:25,560
from any AWS account through a Mis

82
00:04:22,320 --> 00:04:30,670
coding of the assumed role

83
00:04:25,560 --> 00:04:33,700
public s3 buckets access keys not

84
00:04:30,670 --> 00:04:36,370
rotated the Center for Internet Security

85
00:04:33,700 --> 00:04:39,729
Foundation benchmarks says access key

86
00:04:36,370 --> 00:04:42,250
should be rotated every 90 days and they

87
00:04:39,730 --> 00:04:44,500
weren't being it's much easier as a

88
00:04:42,250 --> 00:04:50,190
DevOps engineer not to bother to rotate

89
00:04:44,500 --> 00:04:54,730
your access key and just leave it so

90
00:04:50,190 --> 00:04:55,900
what I quickly found well firstly our

91
00:04:54,730 --> 00:04:58,870
fix there are some things like to fix

92
00:04:55,900 --> 00:05:00,820
myself which I did and I asked people

93
00:04:58,870 --> 00:05:04,300
quite you know nicely and politely to

94
00:05:00,820 --> 00:05:06,460
fix things and I probably not a surprise

95
00:05:04,300 --> 00:05:09,460
to you that a few people did what I

96
00:05:06,460 --> 00:05:11,140
asked and some people said oh yes oh yes

97
00:05:09,460 --> 00:05:12,310
and then just didn't do anything and the

98
00:05:11,140 --> 00:05:14,710
others just told me they weren't

99
00:05:12,310 --> 00:05:17,320
interested and go away so not a big

100
00:05:14,710 --> 00:05:18,789
surprise so I thought and also the other

101
00:05:17,320 --> 00:05:21,520
thing with this manual review was that

102
00:05:18,790 --> 00:05:23,590
it I quickly realized after I did I did

103
00:05:21,520 --> 00:05:25,240
it for about a week and then I realized

104
00:05:23,590 --> 00:05:29,380
this is just not sustainable this is

105
00:05:25,240 --> 00:05:31,000
ridiculous because firstly it's too much

106
00:05:29,380 --> 00:05:32,890
work to go through all the different

107
00:05:31,000 --> 00:05:34,090
regions in all the different accounts

108
00:05:32,890 --> 00:05:36,909
and all the different things it's not

109
00:05:34,090 --> 00:05:38,619
going to work and secondly even if

110
00:05:36,910 --> 00:05:40,690
everything looks absolutely fine one

111
00:05:38,620 --> 00:05:45,370
days the next day somebody's going to do

112
00:05:40,690 --> 00:05:46,780
something that's not not secure so the

113
00:05:45,370 --> 00:05:49,780
first thing I realized is that this all

114
00:05:46,780 --> 00:05:51,340
needed to be automated and initially the

115
00:05:49,780 --> 00:05:53,020
discovery needs to be needed to be

116
00:05:51,340 --> 00:05:55,630
automated so that was the first thing I

117
00:05:53,020 --> 00:05:58,270
did so I thought well I don't want to do

118
00:05:55,630 --> 00:05:59,770
this myself and I'm gonna code it all

119
00:05:58,270 --> 00:06:01,840
myself so what is there out there I

120
00:05:59,770 --> 00:06:05,469
asked around had a look on github and

121
00:06:01,840 --> 00:06:08,190
came across NCC's Scout to tool so is

122
00:06:05,470 --> 00:06:11,400
there anybody here from NCC yep well

123
00:06:08,190 --> 00:06:13,600
thank you very much for putting a nice

124
00:06:11,400 --> 00:06:15,460
you might might not be new personally

125
00:06:13,600 --> 00:06:19,120
but thank you to MCC for putting a good

126
00:06:15,460 --> 00:06:21,659
tool you know on the you know open

127
00:06:19,120 --> 00:06:26,440
sourcing a good tool and also

128
00:06:21,660 --> 00:06:33,400
maintaining it so let's have a look at

129
00:06:26,440 --> 00:06:36,460
at this right so I'm going to just run

130
00:06:33,400 --> 00:06:38,289
the tool against one of my AWS accounts

131
00:06:36,460 --> 00:06:41,498
now because

132
00:06:38,289 --> 00:06:47,080
that tool so the tool is just a set of

133
00:06:41,499 --> 00:06:51,789
Python checks it requires a read-only

134
00:06:47,080 --> 00:06:53,830
account configured and to do the whole

135
00:06:51,789 --> 00:06:56,680
scan on all the different eight of your

136
00:06:53,830 --> 00:06:58,568
services in all the regions can take a

137
00:06:56,680 --> 00:07:02,710
while so I don't want to bore you with

138
00:06:58,569 --> 00:07:05,349
that so I'm just going to limit this to

139
00:07:02,710 --> 00:07:09,128
initially to one particular service so

140
00:07:05,349 --> 00:07:13,449
I'm going to specify that it's just one

141
00:07:09,129 --> 00:07:15,339
particular AWS account because in my aw

142
00:07:13,449 --> 00:07:18,430
escrow dentals file I've got several

143
00:07:15,339 --> 00:07:24,189
different profiles and I'm also good to

144
00:07:18,430 --> 00:07:26,050
specify oh thank you sorry about that I

145
00:07:24,189 --> 00:07:28,059
thought it was mirroring but it's

146
00:07:26,050 --> 00:07:30,099
actually a drag isn't it so thank you

147
00:07:28,059 --> 00:07:32,409
for letting me know but this is what I

148
00:07:30,099 --> 00:07:36,610
did just type this wasn't you know I did

149
00:07:32,409 --> 00:07:37,860
actually just type that right so right

150
00:07:36,610 --> 00:07:43,809
okay

151
00:07:37,860 --> 00:07:48,249
okay so right this is more challenging

152
00:07:43,809 --> 00:07:49,899
now so now I'm good to do service what I

153
00:07:48,249 --> 00:07:53,680
really want to do is mirror them if you

154
00:07:49,899 --> 00:07:54,909
can do that right so I'm only going to

155
00:07:53,680 --> 00:07:59,229
look at the Identity and Access

156
00:07:54,909 --> 00:08:01,360
Management Service so what they should

157
00:07:59,229 --> 00:08:02,949
do now I haven't tested it today so who

158
00:08:01,360 --> 00:08:05,189
knows what's going to happen is it

159
00:08:02,949 --> 00:08:07,509
should go into that particular account

160
00:08:05,189 --> 00:08:11,409
it should look at the various groups and

161
00:08:07,509 --> 00:08:16,930
users and then analyze that so I'm just

162
00:08:11,409 --> 00:08:20,469
going to type yes to override the files

163
00:08:16,930 --> 00:08:23,879
they had before so this is the results

164
00:08:20,469 --> 00:08:33,568
of a subset of that scan of the account

165
00:08:23,879 --> 00:08:38,740
and so sorry about this right here right

166
00:08:33,568 --> 00:08:40,448
so if I go down oh right huh would you

167
00:08:38,740 --> 00:08:42,669
mind just mirroring the screens for me

168
00:08:40,448 --> 00:08:45,508
instead thank you my just mirroring them

169
00:08:42,669 --> 00:08:45,509
instead of extending them

170
00:08:50,199 --> 00:08:55,240
technical you know little pause

171
00:08:58,970 --> 00:09:01,570
thank you

172
00:09:08,490 --> 00:09:17,850
excellent sure okay so this is the

173
00:09:14,250 --> 00:09:19,740
result of the of the scam so it's these

174
00:09:17,850 --> 00:09:20,760
are grayed out because I only chose to

175
00:09:19,740 --> 00:09:23,790
look at the identity and access

176
00:09:20,760 --> 00:09:25,500
management service however if I was to

177
00:09:23,790 --> 00:09:30,030
click in here I'll see the results of

178
00:09:25,500 --> 00:09:32,070
that particular scan so red is a

179
00:09:30,030 --> 00:09:36,569
complete failure of that particular

180
00:09:32,070 --> 00:09:39,120
control within the Scout to test and

181
00:09:36,570 --> 00:09:43,380
most of these do correspond to center

182
00:09:39,120 --> 00:09:46,830
for internet security benchmark controls

183
00:09:43,380 --> 00:09:49,080
green means good grey means not

184
00:09:46,830 --> 00:09:51,150
applicable and obviously amber means

185
00:09:49,080 --> 00:09:55,460
warning so you can see that this has

186
00:09:51,150 --> 00:09:57,840
picked up some useful information like

187
00:09:55,460 --> 00:10:00,030
lack of key rotation so if I was to

188
00:09:57,840 --> 00:10:05,910
click on one of these I can then find

189
00:10:00,030 --> 00:10:06,870
more detail so that was great and yeah

190
00:10:05,910 --> 00:10:12,600
I'll just show you another one as well

191
00:10:06,870 --> 00:10:14,070
actually so that particular test was

192
00:10:12,600 --> 00:10:15,780
looking at Identity and Access

193
00:10:14,070 --> 00:10:19,800
Management so let's just do another one

194
00:10:15,780 --> 00:10:21,480
a similar one looking at s3 buckets and

195
00:10:19,800 --> 00:10:27,530
see what we see so I'm going to limit

196
00:10:21,480 --> 00:10:33,030
this to s3 buckets only and oops sorry

197
00:10:27,530 --> 00:10:35,610
forgot to put the two Scout two should

198
00:10:33,030 --> 00:10:39,959
be better so this is looking actually in

199
00:10:35,610 --> 00:10:43,680
a different account at any s3 buckets s3

200
00:10:39,960 --> 00:10:48,090
being used for storage to see do these

201
00:10:43,680 --> 00:10:55,699
follow the standards and good practice

202
00:10:48,090 --> 00:10:55,700
generally so moving down to s3

203
00:10:58,810 --> 00:11:06,400
you can see that there's some problems

204
00:11:02,710 --> 00:11:07,900
here so for example get actions are

205
00:11:06,400 --> 00:11:09,520
authorized to all principals in other

206
00:11:07,900 --> 00:11:11,860
words its public and this is quite

207
00:11:09,520 --> 00:11:14,949
impressive actually because not out with

208
00:11:11,860 --> 00:11:17,200
s3 you could look at both there are two

209
00:11:14,950 --> 00:11:18,790
ways of controlling the access one is

210
00:11:17,200 --> 00:11:20,770
through access control lists the others

211
00:11:18,790 --> 00:11:22,569
threw a bucket policy and it is

212
00:11:20,770 --> 00:11:24,819
important to look at both and this

213
00:11:22,570 --> 00:11:28,870
particular test looks does actually look

214
00:11:24,820 --> 00:11:30,550
at the bucket policy which is good well

215
00:11:28,870 --> 00:11:32,860
it's good that it looks at it this is

216
00:11:30,550 --> 00:11:35,979
not a good bucket policy unless you want

217
00:11:32,860 --> 00:11:39,870
to make your your bucket completely you

218
00:11:35,980 --> 00:11:45,210
know completely read readable so that's

219
00:11:39,870 --> 00:11:52,350
one example there moving back to the

220
00:11:45,210 --> 00:11:55,690
PowerPoint I could then do regular

221
00:11:52,350 --> 00:11:58,300
automated scans which is good so now no

222
00:11:55,690 --> 00:12:04,240
longer had to manually look at the

223
00:11:58,300 --> 00:12:08,020
console however I then still had to ask

224
00:12:04,240 --> 00:12:12,220
people to do things so I'd say this is

225
00:12:08,020 --> 00:12:14,250
the list of people whose keys are older

226
00:12:12,220 --> 00:12:16,839
than 90 days can you rotate them please

227
00:12:14,250 --> 00:12:19,870
can you please reconfigure your security

228
00:12:16,839 --> 00:12:25,050
group to be more secure and as before

229
00:12:19,870 --> 00:12:30,610
the answer tended to be yeah okay or no

230
00:12:25,050 --> 00:12:33,609
so I realized that well this has helped

231
00:12:30,610 --> 00:12:36,940
with the detection and the automation it

232
00:12:33,610 --> 00:12:39,700
hadn't really completely solved the

233
00:12:36,940 --> 00:12:41,020
issue so I thought well what we need to

234
00:12:39,700 --> 00:12:43,030
do we've got the detection in place

235
00:12:41,020 --> 00:12:47,949
we've got some nice detection this could

236
00:12:43,030 --> 00:12:50,829
be automated to to be to run on a daily

237
00:12:47,950 --> 00:12:53,610
basis if I wanted to what we really need

238
00:12:50,830 --> 00:13:00,420
is to actually work on some prevention

239
00:12:53,610 --> 00:13:04,180
so obviously it'd be nice to be able to

240
00:13:00,420 --> 00:13:06,790
prevent and put in place certain rules

241
00:13:04,180 --> 00:13:10,900
for the whole AWS account or the whole

242
00:13:06,790 --> 00:13:12,420
is year subscription and nowadays and

243
00:13:10,900 --> 00:13:14,430
even to some extent back there

244
00:13:12,420 --> 00:13:15,420
particularly now there are some good

245
00:13:14,430 --> 00:13:17,819
tools to do this

246
00:13:15,420 --> 00:13:19,979
so with Azure there are zero policies

247
00:13:17,820 --> 00:13:22,829
and you can put in place certain

248
00:13:19,980 --> 00:13:25,519
policies that say for example you can

249
00:13:22,829 --> 00:13:28,069
only deploy resources in certain regions

250
00:13:25,519 --> 00:13:31,860
and then that applies to the whole

251
00:13:28,070 --> 00:13:33,570
subscription so that's very powerful and

252
00:13:31,860 --> 00:13:37,560
that prevents certain things happening

253
00:13:33,570 --> 00:13:40,170
with AWS we now have organizations AWS

254
00:13:37,560 --> 00:13:43,050
organizations and we now have service

255
00:13:40,170 --> 00:13:47,250
control policies so we can enforce

256
00:13:43,050 --> 00:13:49,560
certain policies on any subscription any

257
00:13:47,250 --> 00:13:51,649
account AWS account within that

258
00:13:49,560 --> 00:13:55,260
organization in a hierarchical way

259
00:13:51,649 --> 00:13:57,870
however even those even though we have

260
00:13:55,260 --> 00:14:00,959
got those there but they don't they

261
00:13:57,870 --> 00:14:03,660
won't cover all use cases that we might

262
00:14:00,959 --> 00:14:05,489
want and in any case at the time that

263
00:14:03,660 --> 00:14:08,880
this happened they weren't available so

264
00:14:05,490 --> 00:14:12,209
um I started off by writing some

265
00:14:08,880 --> 00:14:15,570
security tests in Python and integrated

266
00:14:12,209 --> 00:14:18,569
these to the CI CD pipeline so we had we

267
00:14:15,570 --> 00:14:23,339
were using a CI CT pipeline which is

268
00:14:18,570 --> 00:14:25,740
good and I put it I created some Python

269
00:14:23,339 --> 00:14:28,620
tests that weren't very complicated and

270
00:14:25,740 --> 00:14:30,930
we some were to check for unsafe

271
00:14:28,620 --> 00:14:32,760
security groups some was a check for

272
00:14:30,930 --> 00:14:36,359
identity and access management roles

273
00:14:32,760 --> 00:14:39,720
that were unsafe and you might think

274
00:14:36,360 --> 00:14:43,140
that that did the trick well it

275
00:14:39,720 --> 00:14:45,930
certainly helps however what I then

276
00:14:43,140 --> 00:14:48,689
realized was that not all repositories

277
00:14:45,930 --> 00:14:54,089
were actually integrated to the pipeline

278
00:14:48,690 --> 00:14:55,860
and worse than that some people were

279
00:14:54,089 --> 00:14:57,870
still doing things manually so there

280
00:14:55,860 --> 00:15:00,930
were still cases of people going into

281
00:14:57,870 --> 00:15:03,600
the AWS console and pressing click

282
00:15:00,930 --> 00:15:06,719
create virtual machine next next next

283
00:15:03,600 --> 00:15:08,610
and then you get a launch wizard and

284
00:15:06,720 --> 00:15:13,139
rich automatically has a security group

285
00:15:08,610 --> 00:15:16,829
of inbound from any so this helped and

286
00:15:13,139 --> 00:15:18,839
it helped to make sure that some unsafe

287
00:15:16,829 --> 00:15:21,750
practices didn't get into the main code

288
00:15:18,839 --> 00:15:24,600
base however it wasn't enough to make

289
00:15:21,750 --> 00:15:25,950
sure that the a SS accounts were

290
00:15:24,600 --> 00:15:30,890
actually

291
00:15:25,950 --> 00:15:35,100
you know well being well-maintained so

292
00:15:30,890 --> 00:15:36,750
I'll put in some prevention I'll put him

293
00:15:35,100 --> 00:15:39,720
some dissection put in some prevention

294
00:15:36,750 --> 00:15:43,830
and then what I then realized was that

295
00:15:39,720 --> 00:15:46,410
to actually really make more progress I

296
00:15:43,830 --> 00:15:50,640
needed to put in some automated

297
00:15:46,410 --> 00:15:55,170
remediation and enforcement so for this

298
00:15:50,640 --> 00:15:57,300
I used again I didn't want to write

299
00:15:55,170 --> 00:16:00,199
anything myself if I didn't have to look

300
00:15:57,300 --> 00:16:03,510
at what was out there and asked around

301
00:16:00,200 --> 00:16:05,700
came across Capital One's cloud

302
00:16:03,510 --> 00:16:09,900
custodian project so anybody here from

303
00:16:05,700 --> 00:16:11,370
capsule one yeah at least one or two so

304
00:16:09,900 --> 00:16:13,530
again thank you to Capital One for

305
00:16:11,370 --> 00:16:16,860
putting putting this open sourcing this

306
00:16:13,530 --> 00:16:18,500
and again and for maintaining it and I

307
00:16:16,860 --> 00:16:21,510
noticed that the most recent release

308
00:16:18,500 --> 00:16:23,220
appears havesome is year and Google

309
00:16:21,510 --> 00:16:24,960
Google Cloud functionality as well as

310
00:16:23,220 --> 00:16:29,850
AWS which is great haven't looked yet

311
00:16:24,960 --> 00:16:34,970
but you know that's it's good so um I

312
00:16:29,850 --> 00:16:34,970
put that in place so what I'll now do is

313
00:16:35,840 --> 00:16:42,570
I'll show you that so the technology

314
00:16:39,350 --> 00:16:50,640
used cloud custodian as I said from

315
00:16:42,570 --> 00:16:55,230
Capital One I also created additional

316
00:16:50,640 --> 00:16:58,080
lambda functions for notifications for

317
00:16:55,230 --> 00:17:01,110
customers notifications and then some of

318
00:16:58,080 --> 00:17:01,710
the example policies which I'm going to

319
00:17:01,110 --> 00:17:04,589
show you

320
00:17:01,710 --> 00:17:06,209
ah because this is a DevOps conference

321
00:17:04,589 --> 00:17:08,339
we're talking about security I'm going

322
00:17:06,209 --> 00:17:11,480
to show you the security related ones

323
00:17:08,339 --> 00:17:14,099
however it is important to note that

324
00:17:11,480 --> 00:17:18,329
that cloud custodian is not just a

325
00:17:14,099 --> 00:17:22,469
security project it's also very good for

326
00:17:18,329 --> 00:17:24,750
cost control as well the examples that

327
00:17:22,470 --> 00:17:26,730
we're going to look at are requiring a

328
00:17:24,750 --> 00:17:32,250
multi-factor authentication token for

329
00:17:26,730 --> 00:17:34,710
users enforcing access key rotation to

330
00:17:32,250 --> 00:17:38,970
comply with the requirement within this

331
00:17:34,710 --> 00:17:39,900
benchmark that every 90 days access keys

332
00:17:38,970 --> 00:17:44,580
are rotated

333
00:17:39,900 --> 00:17:48,960
and another example being solving the

334
00:17:44,580 --> 00:17:57,659
open there's security group rules so

335
00:17:48,960 --> 00:18:04,260
that is the aim so to give you an

336
00:17:57,660 --> 00:18:05,820
example of a cloud custodian policy the

337
00:18:04,260 --> 00:18:09,210
nice thing about it is that you could

338
00:18:05,820 --> 00:18:12,480
just define the what you want to happen

339
00:18:09,210 --> 00:18:15,450
in a very simple Yammer file so this is

340
00:18:12,480 --> 00:18:20,070
this particular policy is to delete an

341
00:18:15,450 --> 00:18:22,020
access key and it's saying that you want

342
00:18:20,070 --> 00:18:24,659
this to happen once a day in this

343
00:18:22,020 --> 00:18:26,580
particular case it's a scheduled task in

344
00:18:24,660 --> 00:18:29,040
some other cases for some other

345
00:18:26,580 --> 00:18:30,990
functions other policies you could say

346
00:18:29,040 --> 00:18:40,139
it's triggered by a different event like

347
00:18:30,990 --> 00:18:42,450
a config event and you want to look for

348
00:18:40,140 --> 00:18:45,510
an access key that's older than in this

349
00:18:42,450 --> 00:18:51,270
case a hundred days and if you find it

350
00:18:45,510 --> 00:18:55,950
remove the keys and then notify and bit

351
00:18:51,270 --> 00:18:57,240
further down there'll be a block or a

352
00:18:55,950 --> 00:18:58,920
couple of blocks saying where you want

353
00:18:57,240 --> 00:19:02,610
the notifications go so in this case

354
00:18:58,920 --> 00:19:05,040
email and slack so that's an example of

355
00:19:02,610 --> 00:19:09,659
policy that then through a simple

356
00:19:05,040 --> 00:19:13,139
command line deploys Yama file ab2

357
00:19:09,660 --> 00:19:16,470
deploys lambda functions assigns a

358
00:19:13,140 --> 00:19:19,890
identity access management role to that

359
00:19:16,470 --> 00:19:23,160
lambda function and then integrates with

360
00:19:19,890 --> 00:19:25,620
simple notification service so it takes

361
00:19:23,160 --> 00:19:27,810
a lot of the effort out of creating

362
00:19:25,620 --> 00:19:34,080
these these policies because that's

363
00:19:27,810 --> 00:19:36,770
already been done so let's see if this

364
00:19:34,080 --> 00:19:36,770
works

365
00:19:38,480 --> 00:19:47,840
so this is an AWS account and you can

366
00:19:45,560 --> 00:19:54,040
see here that there are some problems

367
00:19:47,840 --> 00:19:59,810
with access keys by looking at the

368
00:19:54,040 --> 00:20:04,820
bottom warning if we go into users you

369
00:19:59,810 --> 00:20:06,110
can see that some users haven't got what

370
00:20:04,820 --> 00:20:09,290
most of the users haven't got

371
00:20:06,110 --> 00:20:10,159
multifactor authentication enabled you

372
00:20:09,290 --> 00:20:13,520
can also see that there's different

373
00:20:10,160 --> 00:20:15,320
groups for different users and this for

374
00:20:13,520 --> 00:20:17,240
this particular demo I'm only looking at

375
00:20:15,320 --> 00:20:20,450
one particular group which is this

376
00:20:17,240 --> 00:20:25,910
custodian group this has just been to

377
00:20:20,450 --> 00:20:28,700
demonstrate to you so this it's

378
00:20:25,910 --> 00:20:31,220
currently set to the as you saw from the

379
00:20:28,700 --> 00:20:34,100
policies these policies are happen to

380
00:20:31,220 --> 00:20:36,440
have set them to run once a day so I'm

381
00:20:34,100 --> 00:20:38,090
going to trigger this manually just to

382
00:20:36,440 --> 00:20:40,070
simulate what happens once a day so

383
00:20:38,090 --> 00:20:42,820
interestingly I think the daily time

384
00:20:40,070 --> 00:20:45,560
this happens is actually around now but

385
00:20:42,820 --> 00:20:48,260
not for that really matters so I'm going

386
00:20:45,560 --> 00:20:50,149
to go to lamda oh and by the way I've

387
00:20:48,260 --> 00:20:52,160
worked with AWS for years and I only

388
00:20:50,150 --> 00:20:54,260
just discovered that you could you could

389
00:20:52,160 --> 00:20:56,150
pin these different services to the top

390
00:20:54,260 --> 00:20:57,980
and I was so pleased when I actually

391
00:20:56,150 --> 00:21:00,590
discovered that and I thought why didn't

392
00:20:57,980 --> 00:21:01,820
I realize that before it's really good

393
00:21:00,590 --> 00:21:03,889
so now I'm going to use it cuz I'm

394
00:21:01,820 --> 00:21:08,929
pleased with it so I'm going to click on

395
00:21:03,890 --> 00:21:12,260
lamda and what I'm going to do is go

396
00:21:08,930 --> 00:21:15,080
down to the policy that says that is the

397
00:21:12,260 --> 00:21:18,680
cloud custodian policy for warning about

398
00:21:15,080 --> 00:21:20,360
multi-factor authentication and I've

399
00:21:18,680 --> 00:21:24,380
just set up a scheduled test to simulate

400
00:21:20,360 --> 00:21:26,600
the cloud watch scheduled saw event of

401
00:21:24,380 --> 00:21:31,130
every once a day and I'm just going to

402
00:21:26,600 --> 00:21:32,750
click test so this should just you know

403
00:21:31,130 --> 00:21:36,470
kick it off manually so that we don't

404
00:21:32,750 --> 00:21:40,420
have to wait 24 hours and we'll see what

405
00:21:36,470 --> 00:21:42,460
happens always good doing live demos

406
00:21:40,420 --> 00:21:46,120
anything could happen

407
00:21:42,460 --> 00:21:46,120
well that's exceeded

408
00:21:46,550 --> 00:21:49,609
[Music]

409
00:21:50,220 --> 00:21:58,780
so we have received a slack notification

410
00:21:54,690 --> 00:22:02,400
so here it is so just receive the

411
00:21:58,780 --> 00:22:07,600
message so this message is to the whole

412
00:22:02,400 --> 00:22:11,020
channel in this case it's just me in the

413
00:22:07,600 --> 00:22:14,110
real case this was 40 people plus the

414
00:22:11,020 --> 00:22:15,910
manager and then it automatically finds

415
00:22:14,110 --> 00:22:17,979
out who the person is from their name

416
00:22:15,910 --> 00:22:20,170
and it says assign a multi-factor

417
00:22:17,980 --> 00:22:23,260
authentication sokham to your account

418
00:22:20,170 --> 00:22:26,020
now and also says which account because

419
00:22:23,260 --> 00:22:29,500
in a real case you'll have more than one

420
00:22:26,020 --> 00:22:30,879
account so what I found was suddenly

421
00:22:29,500 --> 00:22:32,370
people started doing what they were

422
00:22:30,880 --> 00:22:34,420
supposed to because when I just

423
00:22:32,370 --> 00:22:36,760
communicated with them one to one and

424
00:22:34,420 --> 00:22:38,830
said oh can you assign a multiple an MFA

425
00:22:36,760 --> 00:22:41,650
token oh yeah yeah and then they didn't

426
00:22:38,830 --> 00:22:44,320
do it this time they were embarrassed in

427
00:22:41,650 --> 00:22:46,540
front of their senior manager and very

428
00:22:44,320 --> 00:22:49,090
quickly did it and so that it didn't

429
00:22:46,540 --> 00:22:52,990
appear the next day so that was very

430
00:22:49,090 --> 00:22:58,320
effective so that's one let's try

431
00:22:52,990 --> 00:22:58,320
something else so we'll go back to

432
00:23:00,210 --> 00:23:05,170
another lambda function so one of the

433
00:23:03,340 --> 00:23:08,919
other tests that I've got set up here is

434
00:23:05,170 --> 00:23:13,390
warning about access keys being out of

435
00:23:08,920 --> 00:23:16,090
date again I've set it up to on a

436
00:23:13,390 --> 00:23:18,670
scheduled tasks to run once every 24

437
00:23:16,090 --> 00:23:22,899
hours so you don't have to wait 24 hours

438
00:23:18,670 --> 00:23:28,150
in this room I'm going to kick this off

439
00:23:22,900 --> 00:23:31,390
manually here we are so again I'm just

440
00:23:28,150 --> 00:23:40,960
going to go into this lambda function

441
00:23:31,390 --> 00:23:43,690
and I will trigger the task so what this

442
00:23:40,960 --> 00:23:46,150
will be doing is this will be according

443
00:23:43,690 --> 00:23:48,700
to the cloud custodian policy it will

444
00:23:46,150 --> 00:23:52,960
look through a Denton access management

445
00:23:48,700 --> 00:23:55,090
in this account and look at the filters

446
00:23:52,960 --> 00:23:56,380
so which groups and users to look at and

447
00:23:55,090 --> 00:23:58,179
then for those groups of users

448
00:23:56,380 --> 00:23:59,320
it'll be looking at the age of the

449
00:23:58,180 --> 00:24:02,260
access key

450
00:23:59,320 --> 00:24:09,790
and then making a decision as to what to

451
00:24:02,260 --> 00:24:11,740
do based on that age so we seem to have

452
00:24:09,790 --> 00:24:14,649
received another notification in slack

453
00:24:11,740 --> 00:24:17,290
and although I'm showing you in slack

454
00:24:14,650 --> 00:24:20,170
I do also get an email as well I just

455
00:24:17,290 --> 00:24:23,320
thought do slack it's more DevOps

456
00:24:20,170 --> 00:24:24,190
so you know so we do get this this

457
00:24:23,320 --> 00:24:26,560
morning as well

458
00:24:24,190 --> 00:24:30,040
rotate your access keys and delete old

459
00:24:26,560 --> 00:24:32,080
keys in the your AWS account keys older

460
00:24:30,040 --> 00:24:34,270
than 90 days will be deleted so that was

461
00:24:32,080 --> 00:24:36,879
one policy that's like the warning and

462
00:24:34,270 --> 00:24:41,889
then there's actually two more that I've

463
00:24:36,880 --> 00:24:44,680
got one which then disables it at 90

464
00:24:41,890 --> 00:24:48,190
this was an 80 days this one and then 90

465
00:24:44,680 --> 00:24:51,730
days it was disabled and then 100 days

466
00:24:48,190 --> 00:24:53,260
it was deleted and as with the other one

467
00:24:51,730 --> 00:24:55,120
I found this to be amazingly effective

468
00:24:53,260 --> 00:24:56,590
because especially is this actually

469
00:24:55,120 --> 00:24:58,000
disabled the keys I mean I did have to

470
00:24:56,590 --> 00:24:59,980
be careful with the filters because

471
00:24:58,000 --> 00:25:03,550
there were some keys that were being

472
00:24:59,980 --> 00:25:04,690
used by services which actually probably

473
00:25:03,550 --> 00:25:08,080
shouldn't have been and that's another

474
00:25:04,690 --> 00:25:09,940
story and I didn't want to accidentally

475
00:25:08,080 --> 00:25:11,350
break anything in production so I had to

476
00:25:09,940 --> 00:25:14,770
be pretty careful to make sure that I

477
00:25:11,350 --> 00:25:16,389
only captured the users however it was

478
00:25:14,770 --> 00:25:18,790
extremely effective because the keys

479
00:25:16,390 --> 00:25:20,980
actually got disabled and deleted so all

480
00:25:18,790 --> 00:25:25,000
of a sudden these DevOps fee foot guys

481
00:25:20,980 --> 00:25:27,280
who and they were guys who previously

482
00:25:25,000 --> 00:25:28,720
had mostly just completely ignored me

483
00:25:27,280 --> 00:25:30,820
and carried on doing what they wanted to

484
00:25:28,720 --> 00:25:31,900
do anyway they now start to do things

485
00:25:30,820 --> 00:25:33,939
like oh I'm going to write a little

486
00:25:31,900 --> 00:25:37,240
script to rotate my access key and share

487
00:25:33,940 --> 00:25:40,420
it on repositories and you know and so

488
00:25:37,240 --> 00:25:44,010
on so that was also very effective which

489
00:25:40,420 --> 00:25:47,650
was good so the next one to show you is

490
00:25:44,010 --> 00:25:49,390
the one of them one of the challenges

491
00:25:47,650 --> 00:25:57,070
that was hardest to get rid of was the

492
00:25:49,390 --> 00:26:02,230
open security groups so what I'm going

493
00:25:57,070 --> 00:26:04,270
to do now is as this event is being held

494
00:26:02,230 --> 00:26:06,540
in London I thought I'd set this one off

495
00:26:04,270 --> 00:26:06,540
in London

496
00:26:08,630 --> 00:26:21,150
so I'm going to go to ec2 and we're

497
00:26:16,140 --> 00:26:23,160
going to go to security groups and what

498
00:26:21,150 --> 00:26:27,870
I'll do now is create a new security

499
00:26:23,160 --> 00:26:39,180
group so I'll call this group dev SEC

500
00:26:27,870 --> 00:26:49,889
comm London and I'm going to put in a

501
00:26:39,180 --> 00:26:54,020
rule which says SSH from Annie is

502
00:26:49,890 --> 00:26:56,100
allowed this is what you should not do

503
00:26:54,020 --> 00:26:59,960
so here's the rule

504
00:26:56,100 --> 00:27:02,040
here's the group and here's the rule oh

505
00:26:59,960 --> 00:27:03,980
sorry I did all this should I meant to

506
00:27:02,040 --> 00:27:09,240
do let me edit that sorry about that

507
00:27:03,980 --> 00:27:11,270
let's just get this right that's what I

508
00:27:09,240 --> 00:27:15,240
wanted to do all right

509
00:27:11,270 --> 00:27:17,520
so SSH from any is allowed so this is

510
00:27:15,240 --> 00:27:20,580
what would be created with click click

511
00:27:17,520 --> 00:27:22,320
click next next next launch wizard or

512
00:27:20,580 --> 00:27:24,149
programmatically for somebody who

513
00:27:22,320 --> 00:27:27,629
doesn't want to bother to find out their

514
00:27:24,150 --> 00:27:31,230
own public IP address for a development

515
00:27:27,630 --> 00:27:34,590
project so we have this unsafe security

516
00:27:31,230 --> 00:27:39,810
group and we also have another cloud

517
00:27:34,590 --> 00:27:43,620
custodian policy that will correct this

518
00:27:39,810 --> 00:27:45,570
issue so again this one I've actually

519
00:27:43,620 --> 00:27:47,820
set up to run once per hour

520
00:27:45,570 --> 00:27:52,169
I could have set it up to be triggered

521
00:27:47,820 --> 00:27:54,120
from AWS config however when I tested it

522
00:27:52,170 --> 00:27:55,860
that didn't seem to make a lot of

523
00:27:54,120 --> 00:27:57,870
difference in time that wasn't

524
00:27:55,860 --> 00:27:59,340
necessarily immediate either so I've

525
00:27:57,870 --> 00:28:02,820
just set this up as a once per hour

526
00:27:59,340 --> 00:28:05,760
event and again I'm to say we don't have

527
00:28:02,820 --> 00:28:09,659
to wait up to an hour I've just set up a

528
00:28:05,760 --> 00:28:11,490
test event to simulate that so I'm

529
00:28:09,660 --> 00:28:15,920
running this function so this will be

530
00:28:11,490 --> 00:28:19,160
looking at all these good groups in the

531
00:28:15,920 --> 00:28:22,549
this particular region

532
00:28:19,160 --> 00:28:25,280
so let's see if that did anything so

533
00:28:22,549 --> 00:28:32,510
we'll go back to it easy to look at this

534
00:28:25,280 --> 00:28:37,480
security group so you could see the rule

535
00:28:32,510 --> 00:28:40,400
has been removed by cloud custodian and

536
00:28:37,480 --> 00:28:44,960
helpfully they've put a little tag in to

537
00:28:40,400 --> 00:28:48,429
say please restrict source addresses so

538
00:28:44,960 --> 00:28:48,429
you're putting - please I was being nice

539
00:28:58,480 --> 00:29:05,080
and we have got another notification in

540
00:29:00,790 --> 00:29:08,260
slack so this notification so using the

541
00:29:05,080 --> 00:29:11,530
warning suck color security group has

542
00:29:08,260 --> 00:29:15,040
been edited to remove a rule name is the

543
00:29:11,530 --> 00:29:18,850
account name of the security group and

544
00:29:15,040 --> 00:29:21,430
the security group ID so like with the

545
00:29:18,850 --> 00:29:26,490
access keys I found that to be extremely

546
00:29:21,430 --> 00:29:28,780
effective at changing behavior because

547
00:29:26,490 --> 00:29:32,470
firstly whatever they were doing stopped

548
00:29:28,780 --> 00:29:33,910
working and secondly again it tended to

549
00:29:32,470 --> 00:29:38,020
embarrass the people who were doing it

550
00:29:33,910 --> 00:29:45,630
so it was it was a very effective way

551
00:29:38,020 --> 00:29:45,629
forward so having done that

552
00:29:57,870 --> 00:30:02,309
I then thought well I better start

553
00:29:59,700 --> 00:30:04,559
looking at something else now so the

554
00:30:02,309 --> 00:30:09,420
next thing I started looking at was keys

555
00:30:04,559 --> 00:30:14,129
and secrets and that was a whole other

556
00:30:09,420 --> 00:30:18,420
problem so to start with I thought well

557
00:30:14,130 --> 00:30:19,770
let me do a few scans so as with

558
00:30:18,420 --> 00:30:22,260
everything else I didn't want to

559
00:30:19,770 --> 00:30:23,309
reinvent the wheel had a look at what

560
00:30:22,260 --> 00:30:26,790
was there on github

561
00:30:23,309 --> 00:30:29,850
asked around and came across get robbed

562
00:30:26,790 --> 00:30:30,620
I guess have several of you used get

563
00:30:29,850 --> 00:30:34,399
robbed

564
00:30:30,620 --> 00:30:37,489
okay well I'll show you get robbed

565
00:30:34,400 --> 00:30:45,270
so get robbed is an open source tool

566
00:30:37,490 --> 00:30:50,490
that is could be used to scan github

567
00:30:45,270 --> 00:30:53,610
repositories both public and private so

568
00:30:50,490 --> 00:30:57,600
to show you this I'm going to type get

569
00:30:53,610 --> 00:31:00,750
robbed analyze spelt

570
00:30:57,600 --> 00:31:04,980
the American Way and then the name of my

571
00:31:00,750 --> 00:31:08,520
organization selador so what this will

572
00:31:04,980 --> 00:31:13,530
do is this will look at this particular

573
00:31:08,520 --> 00:31:17,190
organization and then it will scan all

574
00:31:13,530 --> 00:31:20,910
the repositories and then look for signs

575
00:31:17,190 --> 00:31:24,870
of potential keys and passwords in

576
00:31:20,910 --> 00:31:28,770
repositories and then flag them up and

577
00:31:24,870 --> 00:31:35,030
what I should say is that I created for

578
00:31:28,770 --> 00:31:35,030
this demo I created a deliberately bad

579
00:31:35,840 --> 00:31:41,090
repository which I'll show you here

580
00:31:42,710 --> 00:31:49,080
called insecure so in this particular

581
00:31:46,290 --> 00:31:51,030
case it's quite a small repository so it

582
00:31:49,080 --> 00:31:52,320
wouldn't actually be hard to just go

583
00:31:51,030 --> 00:31:55,230
through manually and look at all the

584
00:31:52,320 --> 00:31:57,649
files but in a real example you could

585
00:31:55,230 --> 00:31:59,880
have hundreds or thousands of files

586
00:31:57,650 --> 00:32:02,550
which are just too cumbersome to look

587
00:31:59,880 --> 00:32:06,860
through look through manually so let's

588
00:32:02,550 --> 00:32:06,860
have a look at what came back

589
00:32:07,869 --> 00:32:15,649
so the stand which I've just done is

590
00:32:11,239 --> 00:32:20,379
shown here so you can see that a number

591
00:32:15,649 --> 00:32:27,199
of suspects items have been identified

592
00:32:20,379 --> 00:32:29,899
so as an example some AWS access keys so

593
00:32:27,200 --> 00:32:32,539
feel free to try these but as you

594
00:32:29,899 --> 00:32:35,988
wouldn't expect so what I did was to

595
00:32:32,539 --> 00:32:38,779
create an access key pair and then I did

596
00:32:35,989 --> 00:32:40,849
delete it before putting it up to the

597
00:32:38,779 --> 00:32:42,950
repository and I would say this is a

598
00:32:40,849 --> 00:32:44,689
real issue I mean I was at one of the

599
00:32:42,950 --> 00:32:47,929
organization's I work with so I was

600
00:32:44,690 --> 00:32:51,019
sitting in my desk about it 10:30 in the

601
00:32:47,929 --> 00:32:53,629
morning and got an email from Amazon

602
00:32:51,019 --> 00:32:57,139
saying you know your AWS account has

603
00:32:53,629 --> 00:33:00,529
been compromised this key has been found

604
00:32:57,139 --> 00:33:03,258
in public github so fortunately I was

605
00:33:00,529 --> 00:33:06,289
there and immediately read the email

606
00:33:03,259 --> 00:33:09,289
unfortunately immediately logged on and

607
00:33:06,289 --> 00:33:12,320
said to the AWS console found it and

608
00:33:09,289 --> 00:33:15,080
straightaway deleted it and then went

609
00:33:12,320 --> 00:33:17,210
ahead and checked everything and seemed

610
00:33:15,080 --> 00:33:19,218
not to have been compromised in that

611
00:33:17,210 --> 00:33:21,769
time it was also fortunately the dev

612
00:33:19,219 --> 00:33:23,629
account the DevOps person who did that

613
00:33:21,769 --> 00:33:25,249
was suitably embarrassed however I would

614
00:33:23,629 --> 00:33:26,718
say that this is a really easy thing to

615
00:33:25,249 --> 00:33:29,599
do so I wouldn't be too critical

616
00:33:26,719 --> 00:33:32,299
especially as I have done much the same

617
00:33:29,599 --> 00:33:36,950
thing myself to a private repository so

618
00:33:32,299 --> 00:33:41,509
I know how easy it is anyway access keys

619
00:33:36,950 --> 00:33:45,289
is is one example another example which

620
00:33:41,509 --> 00:33:48,499
I found to be quite common is RSA

621
00:33:45,289 --> 00:33:52,219
private keys see one might think well

622
00:33:48,499 --> 00:33:56,210
why do DevOps engineer's put keys into

623
00:33:52,219 --> 00:33:58,849
code or passwords well what we want to

624
00:33:56,210 --> 00:34:00,379
do as DevOps engine is is automate

625
00:33:58,849 --> 00:34:03,979
everything we don't want any manual

626
00:34:00,379 --> 00:34:07,039
processes and putting keys and

627
00:34:03,979 --> 00:34:08,809
certificates and passwords into a code

628
00:34:07,039 --> 00:34:10,819
repository is actually the easiest way

629
00:34:08,809 --> 00:34:12,889
of doing that it's not the best way we

630
00:34:10,819 --> 00:34:16,279
should be using tools like hasha Corp

631
00:34:12,889 --> 00:34:18,049
vault or AWS secrets or a zero key vault

632
00:34:16,279 --> 00:34:20,380
that's what we should be doing but

633
00:34:18,049 --> 00:34:22,179
that's that takes work and

634
00:34:20,380 --> 00:34:25,120
doesn't always happen which is why as

635
00:34:22,179 --> 00:34:26,679
def sec ops engineers we need to be to

636
00:34:25,120 --> 00:34:29,560
find ways of searching for these when

637
00:34:26,679 --> 00:34:30,819
they happen or putting in hooks to

638
00:34:29,560 --> 00:34:31,889
prevent this happening in the first

639
00:34:30,820 --> 00:34:42,160
place

640
00:34:31,889 --> 00:34:48,520
so that's keys and secrets so what I've

641
00:34:42,159 --> 00:34:49,839
ended was to think about well how can we

642
00:34:48,520 --> 00:34:55,840
put this together in a bit more of a

643
00:34:49,840 --> 00:34:58,270
framework and this is what I put

644
00:34:55,840 --> 00:35:00,130
together so there's three elements in my

645
00:34:58,270 --> 00:35:04,110
opinion from and based on my experience

646
00:35:00,130 --> 00:35:06,760
of a an effective continuous cloud

647
00:35:04,110 --> 00:35:09,910
compliance framework the first is

648
00:35:06,760 --> 00:35:13,120
prevention and Prevention can include

649
00:35:09,910 --> 00:35:16,060
policy as code so this could be Sarah

650
00:35:13,120 --> 00:35:18,040
forms Sentinel it could be a zero

651
00:35:16,060 --> 00:35:20,440
policies it could be service control

652
00:35:18,040 --> 00:35:22,870
policies in AWS through AWS

653
00:35:20,440 --> 00:35:24,610
organizations that's one method of

654
00:35:22,870 --> 00:35:27,100
prevention and that's the ideal method

655
00:35:24,610 --> 00:35:28,690
because it automatically applies to the

656
00:35:27,100 --> 00:35:31,060
whole AWS account or the whole

657
00:35:28,690 --> 00:35:35,230
subscription but that won't cover all of

658
00:35:31,060 --> 00:35:37,810
the use cases integrating tests to the C

659
00:35:35,230 --> 00:35:43,240
ICD pipeline is the next best thing

660
00:35:37,810 --> 00:35:48,190
because then a DevOps engineer can't

661
00:35:43,240 --> 00:35:50,919
merge his branch or her branch to master

662
00:35:48,190 --> 00:35:53,700
unless it passes the test and if there's

663
00:35:50,920 --> 00:35:56,020
testing there to enforce policies that's

664
00:35:53,700 --> 00:35:57,609
great because that's preventative so

665
00:35:56,020 --> 00:36:01,330
prevention is always the best approach

666
00:35:57,610 --> 00:36:03,700
but it's never going to necessarily be a

667
00:36:01,330 --> 00:36:05,950
hundred percent so detection is the nest

668
00:36:03,700 --> 00:36:08,470
next aspect and that's also important

669
00:36:05,950 --> 00:36:10,660
before automated order this can include

670
00:36:08,470 --> 00:36:12,160
infrastructure scans as well as

671
00:36:10,660 --> 00:36:14,350
application stands and should also

672
00:36:12,160 --> 00:36:17,109
include or could include a data

673
00:36:14,350 --> 00:36:20,799
discovery element like Amazon may see to

674
00:36:17,110 --> 00:36:21,850
look for items in s s3 buckets or indeed

675
00:36:20,800 --> 00:36:24,910
as I just showed you

676
00:36:21,850 --> 00:36:27,850
keys in credentials in either public or

677
00:36:24,910 --> 00:36:29,920
private code repositories and even

678
00:36:27,850 --> 00:36:32,470
prevention intersection isn't enough by

679
00:36:29,920 --> 00:36:33,970
itself in my opinion there has to be a

680
00:36:32,470 --> 00:36:40,089
remediation and

681
00:36:33,970 --> 00:36:42,819
forcement and aspect as well serverless

682
00:36:40,090 --> 00:36:45,010
functions are great for this so in the

683
00:36:42,820 --> 00:36:48,220
case of AWS that would be lambda with

684
00:36:45,010 --> 00:36:52,869
Azure that might be a zero functions or

685
00:36:48,220 --> 00:36:56,919
logic apps or partial run books so I

686
00:36:52,869 --> 00:36:59,380
think bringing those together all those

687
00:36:56,920 --> 00:37:02,080
elements are really essential for a

688
00:36:59,380 --> 00:37:04,330
comprehensive continuous cloud

689
00:37:02,080 --> 00:37:06,279
compliance framework I've shown you a

690
00:37:04,330 --> 00:37:08,980
whole lot of open source tools there are

691
00:37:06,280 --> 00:37:11,590
as well many vendors who work in this

692
00:37:08,980 --> 00:37:13,720
space and who have cloud solutions that

693
00:37:11,590 --> 00:37:16,030
do some of this and many of them are

694
00:37:13,720 --> 00:37:19,270
very good however I would just say that

695
00:37:16,030 --> 00:37:21,040
most of them will only really play in

696
00:37:19,270 --> 00:37:24,009
one or two of these areas effectively

697
00:37:21,040 --> 00:37:26,730
not all of them so a complete solution

698
00:37:24,010 --> 00:37:30,250
is likely to include several different

699
00:37:26,730 --> 00:37:32,800
technologies and approaches so that's

700
00:37:30,250 --> 00:37:37,390
all I have to say on this anybody who

701
00:37:32,800 --> 00:37:40,420
wants to contact me here my details I do

702
00:37:37,390 --> 00:37:43,379
a blog on cloud security and dev SEC ops

703
00:37:40,420 --> 00:37:43,380
which you can find on my website

704
00:37:43,740 --> 00:37:50,049
WK or also on LinkedIn and I'm the only

705
00:37:48,130 --> 00:37:51,820
full source of Berger who works in

706
00:37:50,050 --> 00:37:53,700
security at the moment so you won't have

707
00:37:51,820 --> 00:37:56,920
any trouble finding me feel free to

708
00:37:53,700 --> 00:37:58,930
connect so that's the end of my talk

709
00:37:56,920 --> 00:38:03,359
we've got four minutes left for any

710
00:37:58,930 --> 00:38:10,029
questions comments so yeah go ahead

711
00:38:03,359 --> 00:38:10,839
third row and France was running thank

712
00:38:10,030 --> 00:38:13,720
you very much

713
00:38:10,839 --> 00:38:15,070
in the example we're with the security

714
00:38:13,720 --> 00:38:17,529
group in row

715
00:38:15,070 --> 00:38:21,250
have you considered also attaching or

716
00:38:17,530 --> 00:38:25,510
using cloud trails to extract the user

717
00:38:21,250 --> 00:38:27,970
role or am user who actually created it

718
00:38:25,510 --> 00:38:31,119
or a role if you are using assuming or

719
00:38:27,970 --> 00:38:33,669
something to also post students like to

720
00:38:31,119 --> 00:38:35,730
address that this was happened because

721
00:38:33,670 --> 00:38:38,560
of this person or something like that

722
00:38:35,730 --> 00:38:40,060
yeah so yeah the question there was were

723
00:38:38,560 --> 00:38:42,580
we trying to identify who actually

724
00:38:40,060 --> 00:38:45,509
created the security group or did that

725
00:38:42,580 --> 00:38:47,319
action in the piece of work that I did

726
00:38:45,510 --> 00:38:49,720
we did

727
00:38:47,320 --> 00:38:53,230
actually include that however generally

728
00:38:49,720 --> 00:38:56,319
speaking we had a policy of including

729
00:38:53,230 --> 00:38:59,230
the environment name within the tags of

730
00:38:56,320 --> 00:39:00,940
the security group and sometimes within

731
00:38:59,230 --> 00:39:03,250
the name of the security group so that

732
00:39:00,940 --> 00:39:06,370
did help to identify you know who

733
00:39:03,250 --> 00:39:08,410
actually did that but effective tagging

734
00:39:06,370 --> 00:39:10,779
is also another method that can be done

735
00:39:08,410 --> 00:39:12,310
I mean it's definitely possible to do

736
00:39:10,780 --> 00:39:15,040
exactly what you said go back through

737
00:39:12,310 --> 00:39:16,690
cloud trail and identify who actually

738
00:39:15,040 --> 00:39:18,640
did that action it wouldn't be that hard

739
00:39:16,690 --> 00:39:20,770
and it wouldn't be that hard to automate

740
00:39:18,640 --> 00:39:22,750
it that wasn't a piece of work I

741
00:39:20,770 --> 00:39:25,380
actually did but it's a good idea it

742
00:39:22,750 --> 00:39:29,610
would be a good enhancement definitely

743
00:39:25,380 --> 00:39:29,610
any other questions okay

744
00:39:31,060 --> 00:39:37,799
don't think so so yeah we'll finish

745
00:39:34,690 --> 00:39:37,800
there thank you very much

746
00:39:42,740 --> 00:39:45,669
thank you very much

