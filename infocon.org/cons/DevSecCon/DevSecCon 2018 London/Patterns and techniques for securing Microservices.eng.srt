1
00:00:00,060 --> 00:00:04,439
so my name is Nick Smith I work for

2
00:00:02,610 --> 00:00:06,180
Tallis II security actually there are

3
00:00:04,440 --> 00:00:08,429
some pictures of our hardware security

4
00:00:06,180 --> 00:00:09,990
modules earlier I'm not going to be

5
00:00:08,429 --> 00:00:11,820
talking about encryption today as I

6
00:00:09,990 --> 00:00:14,670
normally would I'm going to talk about

7
00:00:11,820 --> 00:00:17,100
securing microservices specifically in

8
00:00:14,670 --> 00:00:18,420
the kubernetes context so some of the

9
00:00:17,100 --> 00:00:20,400
other work I do on path fatality

10
00:00:18,420 --> 00:00:22,680
security is I'm a member of something

11
00:00:20,400 --> 00:00:26,990
called the sto security working group

12
00:00:22,680 --> 00:00:29,580
SEO is a service mesh for kubernetes

13
00:00:26,990 --> 00:00:30,810
this is gonna be quite fast and we're

14
00:00:29,580 --> 00:00:32,940
not going to go into too much detail

15
00:00:30,810 --> 00:00:36,510
just because we've not got enough time

16
00:00:32,940 --> 00:00:37,829
so I like to start with the warning all

17
00:00:36,510 --> 00:00:39,269
the tools we talked about today and

18
00:00:37,829 --> 00:00:41,780
actually eight over the last two days

19
00:00:39,270 --> 00:00:43,260
they're not silver bullets kubernetes

20
00:00:41,780 --> 00:00:44,430
Sto

21
00:00:43,260 --> 00:00:45,780
all the other tools that we've spoken

22
00:00:44,430 --> 00:00:48,360
about aren't going to make your world

23
00:00:45,780 --> 00:00:50,879
better on their own you have to do a lot

24
00:00:48,360 --> 00:00:52,649
of the work yourself a lot of these

25
00:00:50,879 --> 00:00:54,989
measures are defense and depth and

26
00:00:52,649 --> 00:00:58,219
you've got to remember Security's all

27
00:00:54,989 --> 00:01:00,839
about context it's where you deploy your

28
00:00:58,219 --> 00:01:03,559
mitigations and you have to understand

29
00:01:00,840 --> 00:01:08,189
that your mitigations match your context

30
00:01:03,559 --> 00:01:09,899
ok so I think the last speaker asked how

31
00:01:08,189 --> 00:01:11,970
many people are using kubernetes how

32
00:01:09,900 --> 00:01:16,680
many are using kubernetes in production

33
00:01:11,970 --> 00:01:21,840
and is anyone using ISTE oh does anyone

34
00:01:16,680 --> 00:01:24,360
know what this do is fantastic right so

35
00:01:21,840 --> 00:01:26,790
let's have a very quick primer on what

36
00:01:24,360 --> 00:01:29,509
we think mark services are or from my

37
00:01:26,790 --> 00:01:31,680
opinion what mike services are so

38
00:01:29,509 --> 00:01:33,750
currently a lot of development is

39
00:01:31,680 --> 00:01:35,549
focused at Mike and there's a number of

40
00:01:33,750 --> 00:01:37,380
reasons for that so what's a Mike

41
00:01:35,549 --> 00:01:38,670
service it's something it sits alone it

42
00:01:37,380 --> 00:01:40,740
stands alone it's a small piece of

43
00:01:38,670 --> 00:01:46,619
functionality that has been derived from

44
00:01:40,740 --> 00:01:50,039
a bigger function a bigger service mark

45
00:01:46,619 --> 00:01:53,369
services tend to cooperate so to be able

46
00:01:50,040 --> 00:01:55,890
to use some part of a website it may be

47
00:01:53,369 --> 00:01:57,990
a number of Mike services cooperating to

48
00:01:55,890 --> 00:02:01,920
provide that functionality

49
00:01:57,990 --> 00:02:03,810
most modern mark services are being

50
00:02:01,920 --> 00:02:09,090
built on top of containers and on top of

51
00:02:03,810 --> 00:02:11,160
kubernetes like deployments now what is

52
00:02:09,090 --> 00:02:14,190
interesting about this is we can

53
00:02:11,160 --> 00:02:16,650
dynamically compose products

54
00:02:14,190 --> 00:02:19,490
services at runtime from a number of

55
00:02:16,650 --> 00:02:22,890
component parts additionally and

56
00:02:19,490 --> 00:02:24,990
interestingly from an operation

57
00:02:22,890 --> 00:02:27,359
standpoint it allows us to develop

58
00:02:24,990 --> 00:02:29,460
coding solutions in more autonomous

59
00:02:27,360 --> 00:02:32,070
fashion so what do we mean by that we

60
00:02:29,460 --> 00:02:36,680
mean we can have a number of agile teams

61
00:02:32,070 --> 00:02:42,420
each of which may own a set of Micra

62
00:02:36,680 --> 00:02:42,810
some higher function so that will sounds

63
00:02:42,420 --> 00:02:45,420
good

64
00:02:42,810 --> 00:02:49,290
but from a security perspective that

65
00:02:45,420 --> 00:02:52,709
brings some challenges so when we didn't

66
00:02:49,290 --> 00:02:55,560
compose our solution we start to lose

67
00:02:52,710 --> 00:02:57,750
the holistic view so how do we reason

68
00:02:55,560 --> 00:02:59,670
about the security of our solution as a

69
00:02:57,750 --> 00:03:02,670
whole because it's no good just

70
00:02:59,670 --> 00:03:04,410
understanding is each of my microcytic

71
00:03:02,670 --> 00:03:06,089
eur within the context they define

72
00:03:04,410 --> 00:03:10,230
there's a bigger context which is the

73
00:03:06,090 --> 00:03:12,570
context that they all live in the more

74
00:03:10,230 --> 00:03:14,760
so more mike services we have no more

75
00:03:12,570 --> 00:03:17,609
issues we were likely to see so we've

76
00:03:14,760 --> 00:03:20,519
gone from building monoliths to mazes

77
00:03:17,610 --> 00:03:23,640
so as an auditor or someone coming in to

78
00:03:20,520 --> 00:03:25,530
review the architecture or a system it

79
00:03:23,640 --> 00:03:28,049
can be very difficult to understand the

80
00:03:25,530 --> 00:03:29,610
security promises because no longer can

81
00:03:28,050 --> 00:03:32,040
we perform things like static analysis

82
00:03:29,610 --> 00:03:34,680
over a single executable what we have

83
00:03:32,040 --> 00:03:37,890
now is a number of transitions a network

84
00:03:34,680 --> 00:03:39,420
interface we're processing is done and

85
00:03:37,890 --> 00:03:43,018
that is much more difficult to

86
00:03:39,420 --> 00:03:44,910
understand and to reason about and when

87
00:03:43,019 --> 00:03:46,530
we have autonomous teams and when they

88
00:03:44,910 --> 00:03:48,900
have different goals they will use

89
00:03:46,530 --> 00:03:51,150
different technologies so my assumption

90
00:03:48,900 --> 00:03:53,660
is people who are running microcircuit

91
00:03:51,150 --> 00:03:56,010
you are using more than one set of

92
00:03:53,660 --> 00:03:57,630
technologies so you're probably not just

93
00:03:56,010 --> 00:04:00,450
the spring boot house you're probably

94
00:03:57,630 --> 00:04:03,390
spring and some some Python and maybe

95
00:04:00,450 --> 00:04:05,190
some go and that makes it again more

96
00:04:03,390 --> 00:04:07,470
difficult because no longer can we have

97
00:04:05,190 --> 00:04:09,750
rigorous policies to say this is how you

98
00:04:07,470 --> 00:04:12,630
must develop solutions because actually

99
00:04:09,750 --> 00:04:14,220
it's changing and we as a security

100
00:04:12,630 --> 00:04:17,370
community we need to be able to work

101
00:04:14,220 --> 00:04:19,440
with that so I've spoken about it's

102
00:04:17,370 --> 00:04:22,320
difficult to analyze the interactions

103
00:04:19,440 --> 00:04:24,210
and so we heard about this earlier but

104
00:04:22,320 --> 00:04:27,210
the facebook viewers exploit is a

105
00:04:24,210 --> 00:04:27,750
classic one so it's three bugs and the

106
00:04:27,210 --> 00:04:29,250
interesting

107
00:04:27,750 --> 00:04:31,230
about this is it was the complex

108
00:04:29,250 --> 00:04:34,110
interaction between them that allowed

109
00:04:31,230 --> 00:04:35,790
there to be a vulnerability and this is

110
00:04:34,110 --> 00:04:37,200
really hard to mitigate if you don't

111
00:04:35,790 --> 00:04:38,880
understand the system at this more

112
00:04:37,200 --> 00:04:43,409
holistic level and understand the

113
00:04:38,880 --> 00:04:45,150
interactions between your services so we

114
00:04:43,410 --> 00:04:47,700
know it's hard to do this and we know

115
00:04:45,150 --> 00:04:50,729
that the tools in this area are not as

116
00:04:47,700 --> 00:04:53,630
mature as perhaps if you're building

117
00:04:50,730 --> 00:04:55,530
more monolithic applications

118
00:04:53,630 --> 00:04:57,570
operationally it's very difficult

119
00:04:55,530 --> 00:04:59,969
because security people are

120
00:04:57,570 --> 00:05:02,520
traditionally seen as mitigators of

121
00:04:59,970 --> 00:05:06,840
process or progress rather which is one

122
00:05:02,520 --> 00:05:09,090
of my favorite terms and so we must work

123
00:05:06,840 --> 00:05:11,070
with organizations now to go faster and

124
00:05:09,090 --> 00:05:13,260
the only way we can do that is to build

125
00:05:11,070 --> 00:05:15,000
tools and this is why dev Sec ups is

126
00:05:13,260 --> 00:05:16,890
cool because we can build tools and get

127
00:05:15,000 --> 00:05:21,960
developers to use them and we can move

128
00:05:16,890 --> 00:05:26,039
security earlier into the lifecycle so

129
00:05:21,960 --> 00:05:28,380
with that being said security for micro

130
00:05:26,040 --> 00:05:31,440
services is no different land security

131
00:05:28,380 --> 00:05:34,040
has ever been there are three tenants of

132
00:05:31,440 --> 00:05:36,330
security which are the most fundamental

133
00:05:34,040 --> 00:05:38,130
authentication authorization and

134
00:05:36,330 --> 00:05:40,140
accounting although the last one I

135
00:05:38,130 --> 00:05:41,520
prefer to call auditing and I probably

136
00:05:40,140 --> 00:05:45,510
will call it auditing throughout the

137
00:05:41,520 --> 00:05:48,120
rest of the talk so its most basic level

138
00:05:45,510 --> 00:05:51,890
authentication is the identification of

139
00:05:48,120 --> 00:05:54,360
a human or a service it is what we build

140
00:05:51,890 --> 00:05:56,539
access control on top of it is the

141
00:05:54,360 --> 00:05:58,800
cornerstone of what we need to do

142
00:05:56,540 --> 00:06:02,910
authorization who can do what why when

143
00:05:58,800 --> 00:06:05,040
and where enough said an accounting what

144
00:06:02,910 --> 00:06:07,940
happened so accounting is the one that

145
00:06:05,040 --> 00:06:10,169
generally gets left behind but is as

146
00:06:07,940 --> 00:06:13,050
important now in security and especially

147
00:06:10,169 --> 00:06:17,070
in mike rizzo nothing so the ability to

148
00:06:13,050 --> 00:06:20,610
understand how big the exploit was how

149
00:06:17,070 --> 00:06:22,620
big is my exposure to this exploit

150
00:06:20,610 --> 00:06:24,540
because it once you've been exploited it

151
00:06:22,620 --> 00:06:26,880
is very important that you understand

152
00:06:24,540 --> 00:06:29,430
what the impact is it's no good just to

153
00:06:26,880 --> 00:06:31,530
say we've been exploited because with

154
00:06:29,430 --> 00:06:33,960
GDP our people are going to come and ask

155
00:06:31,530 --> 00:06:36,359
how many records have you lost so it's

156
00:06:33,960 --> 00:06:38,760
very important and so what we're going

157
00:06:36,360 --> 00:06:40,950
to look at is how we can innermark

158
00:06:38,760 --> 00:06:41,760
services world and with the security

159
00:06:40,950 --> 00:06:44,010
view of this

160
00:06:41,760 --> 00:06:46,950
how can we make this easier and the

161
00:06:44,010 --> 00:06:48,840
answer at the moment is becoming service

162
00:06:46,950 --> 00:06:50,370
meshes so we're going to talk a bit

163
00:06:48,840 --> 00:06:52,109
about that and specifically we're going

164
00:06:50,370 --> 00:06:54,720
to talk about sto other ones do exist

165
00:06:52,110 --> 00:06:56,340
otherwise to enforce these things do

166
00:06:54,720 --> 00:06:59,340
exist but we're going to talk about sto

167
00:06:56,340 --> 00:07:04,679
today because it is the de facto native

168
00:06:59,340 --> 00:07:06,690
kubernetes service mesh so what does the

169
00:07:04,680 --> 00:07:08,100
mesh mister deployment look like it

170
00:07:06,690 --> 00:07:11,550
looks like a childlike diagram on a

171
00:07:08,100 --> 00:07:15,620
PowerPoint slide so in a mesh this

172
00:07:11,550 --> 00:07:18,690
deployment uses connect to your system

173
00:07:15,620 --> 00:07:21,990
probably services deployed in containers

174
00:07:18,690 --> 00:07:23,430
and each container enforces policy and

175
00:07:21,990 --> 00:07:25,590
does things in different ways because

176
00:07:23,430 --> 00:07:28,140
we've got a Java container we've got a

177
00:07:25,590 --> 00:07:30,330
Python container we've got something

178
00:07:28,140 --> 00:07:34,320
else down here and someone was mad and

179
00:07:30,330 --> 00:07:35,849
wrote a container using C that makes it

180
00:07:34,320 --> 00:07:36,719
very difficult for us to reason about

181
00:07:35,850 --> 00:07:39,300
the security

182
00:07:36,720 --> 00:07:41,010
additionally we may have party services

183
00:07:39,300 --> 00:07:43,110
in here and they will have very very

184
00:07:41,010 --> 00:07:44,849
different ways of enforcing policy and

185
00:07:43,110 --> 00:07:48,120
defining policy so it makes it much more

186
00:07:44,850 --> 00:07:50,280
difficult so what we're looking for is a

187
00:07:48,120 --> 00:07:51,620
way to bring this all together and then

188
00:07:50,280 --> 00:07:53,729
we saw some talks earlier about

189
00:07:51,620 --> 00:07:56,120
instrumenting code and plate using

190
00:07:53,730 --> 00:07:58,200
frameworks and standards but actually

191
00:07:56,120 --> 00:08:00,030
enforcing standards across larger

192
00:07:58,200 --> 00:08:01,550
organisations is very difficult and it's

193
00:08:00,030 --> 00:08:06,450
not something we should strive to do

194
00:08:01,550 --> 00:08:10,500
what we should strive for is a mesh

195
00:08:06,450 --> 00:08:13,650
network so what is a service mesh the

196
00:08:10,500 --> 00:08:17,430
service mesh is essentially an SDN it's

197
00:08:13,650 --> 00:08:19,620
a software-defined network it is at the

198
00:08:17,430 --> 00:08:23,010
deployment of your service at the

199
00:08:19,620 --> 00:08:25,250
network level so layer 4 to 7 we there

200
00:08:23,010 --> 00:08:28,230
will be the injection of a sentry a

201
00:08:25,250 --> 00:08:30,120
transparent proxy but the difference

202
00:08:28,230 --> 00:08:32,789
here between say traditional api

203
00:08:30,120 --> 00:08:36,179
gateways such as in AWS is you will have

204
00:08:32,789 --> 00:08:38,039
a micro gateway per service and they

205
00:08:36,179 --> 00:08:39,719
will automatically be injected

206
00:08:38,039 --> 00:08:43,069
every time you spin up a container or

207
00:08:39,720 --> 00:08:45,600
service now at the point their span up

208
00:08:43,070 --> 00:08:49,800
policy can be injected into them and

209
00:08:45,600 --> 00:08:52,050
this policy defines how people are

210
00:08:49,800 --> 00:08:54,780
allowed or services are allowed to

211
00:08:52,050 --> 00:08:55,380
interact with service services that

212
00:08:54,780 --> 00:08:59,010
you're hosting

213
00:08:55,380 --> 00:09:01,800
inside your infrastructure and here we

214
00:08:59,010 --> 00:09:04,380
have we can have people who set policy

215
00:09:01,800 --> 00:09:08,310
and this can be teams and teams can set

216
00:09:04,380 --> 00:09:09,950
policy as code okay so it's quite an

217
00:09:08,310 --> 00:09:12,390
interesting concept

218
00:09:09,950 --> 00:09:16,950
but it's all based on software-defined

219
00:09:12,390 --> 00:09:20,730
Network now the nice thing about this

220
00:09:16,950 --> 00:09:23,850
model is scaling the policy in the

221
00:09:20,730 --> 00:09:26,790
Gateway enforcement so whilst we things

222
00:09:23,850 --> 00:09:27,990
like AWS is API gateway and various

223
00:09:26,790 --> 00:09:30,030
other versions that you can get from

224
00:09:27,990 --> 00:09:32,520
other cloud vendors it's quite a large

225
00:09:30,030 --> 00:09:34,350
monolithic solution this is far more

226
00:09:32,520 --> 00:09:36,090
fine-grained and actually these are very

227
00:09:34,350 --> 00:09:39,720
lightweight containers so they've reduce

228
00:09:36,090 --> 00:09:41,700
the time and the through and maintain

229
00:09:39,720 --> 00:09:42,960
your through per of your system because

230
00:09:41,700 --> 00:09:45,000
they're actually looking at a small

231
00:09:42,960 --> 00:09:51,300
subset of rules just for your service or

232
00:09:45,000 --> 00:09:54,600
container so in more detail what is this

233
00:09:51,300 --> 00:09:56,579
do so it's Theo as we've seen is

234
00:09:54,600 --> 00:09:58,710
software-defined network it's split

235
00:09:56,580 --> 00:10:02,190
between a control plane and the data

236
00:09:58,710 --> 00:10:05,160
plane the data plane is what sits in

237
00:10:02,190 --> 00:10:07,080
front of your service okay it's built

238
00:10:05,160 --> 00:10:10,610
out of a component called the invoice

239
00:10:07,080 --> 00:10:13,410
proxy which came out of the company lyft

240
00:10:10,610 --> 00:10:14,670
Google and IBM and pivotal and some

241
00:10:13,410 --> 00:10:17,400
other people have helped build this

242
00:10:14,670 --> 00:10:19,050
layer here which is the control plane in

243
00:10:17,400 --> 00:10:21,600
the control plane is what manages your

244
00:10:19,050 --> 00:10:23,130
security so in the control plane is

245
00:10:21,600 --> 00:10:25,920
where we set our policy for our service

246
00:10:23,130 --> 00:10:29,130
and this will be at the level of HTTP

247
00:10:25,920 --> 00:10:31,829
see HTTP and G RPC so we can describe

248
00:10:29,130 --> 00:10:33,600
this is my REST API and these are the

249
00:10:31,830 --> 00:10:36,360
policies that apply to these endpoints

250
00:10:33,600 --> 00:10:37,560
or in T RPC terms we can say these are

251
00:10:36,360 --> 00:10:39,980
the functions and these other people

252
00:10:37,560 --> 00:10:42,060
that are allowed to call these functions

253
00:10:39,980 --> 00:10:44,690
you get some additional security

254
00:10:42,060 --> 00:10:47,369
measures such as automatic TLS

255
00:10:44,690 --> 00:10:49,440
management so that all your services

256
00:10:47,370 --> 00:10:51,150
automatically authenticate with all your

257
00:10:49,440 --> 00:10:52,980
other services without you having to do

258
00:10:51,150 --> 00:10:54,780
anything you have no other solution

259
00:10:52,980 --> 00:10:57,270
there that you need to install by

260
00:10:54,780 --> 00:11:01,319
default all of your services will get an

261
00:10:57,270 --> 00:11:05,500
authentic TLS cert which will allow

262
00:11:01,320 --> 00:11:09,550
service to service authentication

263
00:11:05,500 --> 00:11:12,430
I guess the other interesting bit there

264
00:11:09,550 --> 00:11:15,060
to know is the telemetry part so also

265
00:11:12,430 --> 00:11:17,560
built into sto is the ability to monitor

266
00:11:15,060 --> 00:11:19,030
transparently all the requests that

267
00:11:17,560 --> 00:11:21,099
going in and out of your system and that

268
00:11:19,030 --> 00:11:22,569
can be hooked up to a number of other

269
00:11:21,100 --> 00:11:25,230
off-the-shelf solutions such as

270
00:11:22,570 --> 00:11:25,230
prometheus

271
00:11:34,329 --> 00:11:36,388
you

272
00:11:41,260 --> 00:11:49,569
they're with me right so let's go back

273
00:11:47,800 --> 00:11:51,790
to the three eizan authentication

274
00:11:49,570 --> 00:11:53,230
authorization and accounting they've not

275
00:11:51,790 --> 00:11:55,209
changed we've just changed the

276
00:11:53,230 --> 00:11:57,730
architecture so let's let's have a look

277
00:11:55,210 --> 00:12:00,430
a bit about what authentication means to

278
00:11:57,730 --> 00:12:03,910
a service mission modern web services so

279
00:12:00,430 --> 00:12:06,099
authentication is it's very basic vo I

280
00:12:03,910 --> 00:12:08,079
don't the unique identification of a

281
00:12:06,100 --> 00:12:11,890
human or service that's trying to access

282
00:12:08,080 --> 00:12:14,290
your system how services and humans

283
00:12:11,890 --> 00:12:17,170
authenticate is slightly different but

284
00:12:14,290 --> 00:12:19,689
generally it's a proof or a challenge

285
00:12:17,170 --> 00:12:23,500
which is swapped for a cryptographically

286
00:12:19,690 --> 00:12:26,380
signed token so generally I'm sure

287
00:12:23,500 --> 00:12:28,600
everybody in here is is using JSON web

288
00:12:26,380 --> 00:12:31,030
tokens to various expense and hates them

289
00:12:28,600 --> 00:12:34,930
in various different ways but they're

290
00:12:31,030 --> 00:12:36,490
quite simple to use so if we look at how

291
00:12:34,930 --> 00:12:38,079
humans authenticate it's generally

292
00:12:36,490 --> 00:12:40,690
through usernames and passwords and

293
00:12:38,080 --> 00:12:46,990
obviously everyone in here uses a second

294
00:12:40,690 --> 00:12:48,730
factor or not but that you use the

295
00:12:46,990 --> 00:12:52,210
second factors and passwords to exchange

296
00:12:48,730 --> 00:12:53,350
your identity for a scientist ershon and

297
00:12:52,210 --> 00:12:56,500
that's the same whether you're using

298
00:12:53,350 --> 00:12:58,690
sam'l or the newer authentication flow

299
00:12:56,500 --> 00:13:00,520
such as open ID Connect if you're

300
00:12:58,690 --> 00:13:02,560
building authentication going forwards

301
00:13:00,520 --> 00:13:05,860
please choose open ID connect not sam'l

302
00:13:02,560 --> 00:13:08,410
your life will be much better from a

303
00:13:05,860 --> 00:13:11,200
services point of view it's not really

304
00:13:08,410 --> 00:13:13,390
changed services have an identifier and

305
00:13:11,200 --> 00:13:15,100
they have a shared secret or a public or

306
00:13:13,390 --> 00:13:16,870
and private key which they can use to

307
00:13:15,100 --> 00:13:18,700
exchange for an identity token

308
00:13:16,870 --> 00:13:21,880
additionally those things like mutual

309
00:13:18,700 --> 00:13:23,080
TLS but we should probably try and steer

310
00:13:21,880 --> 00:13:26,680
away from that because it's harder to

311
00:13:23,080 --> 00:13:30,070
manage so from the service mesh point of

312
00:13:26,680 --> 00:13:33,370
view there's a pattern emerging how do

313
00:13:30,070 --> 00:13:35,920
we enforce authentication for all our

314
00:13:33,370 --> 00:13:37,600
services without having to put the code

315
00:13:35,920 --> 00:13:38,829
into every single one and to audit to

316
00:13:37,600 --> 00:13:40,690
make sure every single one of our

317
00:13:38,830 --> 00:13:42,430
services is checking authentication has

318
00:13:40,690 --> 00:13:44,320
happened and we can do that with

319
00:13:42,430 --> 00:13:46,180
transparent authentication so

320
00:13:44,320 --> 00:13:49,060
transparent authentication works like

321
00:13:46,180 --> 00:13:51,939
this the user tries to contact a service

322
00:13:49,060 --> 00:13:54,400
to perform an operation our century our

323
00:13:51,940 --> 00:13:55,260
service mesh intercepts that request our

324
00:13:54,400 --> 00:13:57,650
service mesh

325
00:13:55,260 --> 00:14:01,170
can then using the policy database

326
00:13:57,650 --> 00:14:03,360
identify what need whether a request

327
00:14:01,170 --> 00:14:05,099
needs to be authenticated or not by

328
00:14:03,360 --> 00:14:06,540
default everything should be

329
00:14:05,100 --> 00:14:08,940
authenticated and that you should have a

330
00:14:06,540 --> 00:14:10,140
whitelist for things that don't the

331
00:14:08,940 --> 00:14:12,150
important part there is the redline

332
00:14:10,140 --> 00:14:14,220
because that is where the decision is

333
00:14:12,150 --> 00:14:18,360
made of who needs to authenticate the

334
00:14:14,220 --> 00:14:20,220
service mesh then can say this user is

335
00:14:18,360 --> 00:14:22,920
not authenticated and redirect them to

336
00:14:20,220 --> 00:14:24,990
the correct authentication endpoint what

337
00:14:22,920 --> 00:14:27,300
that does is it stops the service having

338
00:14:24,990 --> 00:14:29,940
to deal with authentication and it means

339
00:14:27,300 --> 00:14:32,069
we can do authentication in a consistent

340
00:14:29,940 --> 00:14:33,990
way across all our micro services and

341
00:14:32,070 --> 00:14:35,850
we've taken that logic up out of the

342
00:14:33,990 --> 00:14:40,560
application layer and into our network

343
00:14:35,850 --> 00:14:42,270
layer the response from authenticating

344
00:14:40,560 --> 00:14:44,430
is generally a token as we've said and

345
00:14:42,270 --> 00:14:48,030
then when the user makes another request

346
00:14:44,430 --> 00:14:50,569
the Gateway can say okay does a token

347
00:14:48,030 --> 00:14:53,819
exist is it the correct token does it

348
00:14:50,570 --> 00:14:56,040
does it validate if it does request can

349
00:14:53,820 --> 00:14:58,620
go through so what this does is it

350
00:14:56,040 --> 00:15:00,569
solves a more holistic level how we

351
00:14:58,620 --> 00:15:06,420
authenticate and enforcing that policy

352
00:15:00,570 --> 00:15:08,640
for us the next the next leg of our

353
00:15:06,420 --> 00:15:11,939
three-legged stool for Security's

354
00:15:08,640 --> 00:15:15,689
authorization so authorization is the

355
00:15:11,940 --> 00:15:20,010
decision of whether a user or service

356
00:15:15,690 --> 00:15:23,010
can perform an operation so quite often

357
00:15:20,010 --> 00:15:25,680
people will take note of point two on

358
00:15:23,010 --> 00:15:27,870
this slide which is can somebody perform

359
00:15:25,680 --> 00:15:29,880
a request given some sort of context and

360
00:15:27,870 --> 00:15:32,310
that will be time policy some other

361
00:15:29,880 --> 00:15:34,439
input however and when we look at the

362
00:15:32,310 --> 00:15:36,540
Facebook example the Ferb on down is

363
00:15:34,440 --> 00:15:38,430
actually more important now because we

364
00:15:36,540 --> 00:15:40,920
can have services making requests on

365
00:15:38,430 --> 00:15:41,609
behalf of other services and other

366
00:15:40,920 --> 00:15:43,560
people

367
00:15:41,610 --> 00:15:46,260
so there's actually it's not just can

368
00:15:43,560 --> 00:15:49,050
service do this thing it's can service a

369
00:15:46,260 --> 00:15:51,300
call service be bearing in mind you

370
00:15:49,050 --> 00:15:54,810
Alice our user has made the original

371
00:15:51,300 --> 00:15:57,209
request so authorization can get quite

372
00:15:54,810 --> 00:15:59,189
difficult to manage now there's two

373
00:15:57,210 --> 00:16:02,280
types of authorization that we generally

374
00:15:59,190 --> 00:16:04,170
see in Web Services world and certainly

375
00:16:02,280 --> 00:16:05,970
in a mesh world what we think about

376
00:16:04,170 --> 00:16:08,310
there's the explicit upfront

377
00:16:05,970 --> 00:16:08,880
authorization so people who understand

378
00:16:08,310 --> 00:16:10,800
all

379
00:16:08,880 --> 00:16:12,810
or to or had to deal with it when it's

380
00:16:10,800 --> 00:16:17,099
to understand that this means things

381
00:16:12,810 --> 00:16:19,140
like how do I allow my CI engine to

382
00:16:17,100 --> 00:16:22,350
access my github account to perform

383
00:16:19,140 --> 00:16:24,540
tasks on my on my behalf

384
00:16:22,350 --> 00:16:27,450
then there's the just-in-time aspect

385
00:16:24,540 --> 00:16:29,819
which is given an identity can someone

386
00:16:27,450 --> 00:16:34,230
perform a task so let's look at those in

387
00:16:29,820 --> 00:16:36,330
slightly more detail so explicit

388
00:16:34,230 --> 00:16:39,330
authorization as I say is an oauth2 like

389
00:16:36,330 --> 00:16:42,960
model and we've seen the childlike

390
00:16:39,330 --> 00:16:45,450
picture to the side of the slide what

391
00:16:42,960 --> 00:16:48,140
this means it means that a usual service

392
00:16:45,450 --> 00:16:50,040
will request from some authority an

393
00:16:48,140 --> 00:16:53,250
assertion that they're allowed to

394
00:16:50,040 --> 00:16:56,520
perform a task before they request it of

395
00:16:53,250 --> 00:16:59,550
our actual service so this puts majek

396
00:16:56,520 --> 00:17:01,860
into the client that says I must

397
00:16:59,550 --> 00:17:05,159
authorize before I try and access a

398
00:17:01,860 --> 00:17:07,620
service now this is really good it works

399
00:17:05,160 --> 00:17:09,900
where you know there's a limited scope

400
00:17:07,619 --> 00:17:12,239
of authorization that your application

401
00:17:09,900 --> 00:17:15,959
needs before it goes to perform its

402
00:17:12,240 --> 00:17:19,740
tasks and you can see here that our

403
00:17:15,959 --> 00:17:22,050
service mesh can check that given a

404
00:17:19,740 --> 00:17:26,040
token in a request which is in

405
00:17:22,050 --> 00:17:28,860
previously issued does that token

406
00:17:26,040 --> 00:17:31,170
include all the necessary claims that

407
00:17:28,860 --> 00:17:38,219
we're expecting to allow authorization

408
00:17:31,170 --> 00:17:40,830
to occur so just-in-time authorization

409
00:17:38,220 --> 00:17:43,770
is slightly different and is slightly

410
00:17:40,830 --> 00:17:45,389
newer in some respects and is now being

411
00:17:43,770 --> 00:17:49,980
favored and you'll see a lot of it in

412
00:17:45,390 --> 00:17:52,800
the Google stack this is where instead

413
00:17:49,980 --> 00:17:55,680
of a user requiring an upfront decision

414
00:17:52,800 --> 00:17:58,260
about whether they can access a service

415
00:17:55,680 --> 00:17:59,700
or not based on their identity the

416
00:17:58,260 --> 00:18:02,250
service mesh will make a just-in-time

417
00:17:59,700 --> 00:18:04,260
decision so assuming a user is

418
00:18:02,250 --> 00:18:05,760
authenticated previously as we saw on a

419
00:18:04,260 --> 00:18:07,800
previous slide

420
00:18:05,760 --> 00:18:10,470
they will provide that identity token

421
00:18:07,800 --> 00:18:13,500
each time they make a request what the

422
00:18:10,470 --> 00:18:15,570
service mesh century can then do say can

423
00:18:13,500 --> 00:18:18,660
this person perform the task they're

424
00:18:15,570 --> 00:18:20,929
asking at this time and what that allows

425
00:18:18,660 --> 00:18:22,650
you to do is build far more dynamic

426
00:18:20,930 --> 00:18:24,780
authorization models and

427
00:18:22,650 --> 00:18:26,520
also allow far more entropy in your

428
00:18:24,780 --> 00:18:29,100
decisions because you don't have to

429
00:18:26,520 --> 00:18:31,889
allow or enforce upfront decisions

430
00:18:29,100 --> 00:18:33,840
so you just base it on identity and a

431
00:18:31,890 --> 00:18:36,990
current and the current context that can

432
00:18:33,840 --> 00:18:38,129
be identified so there are two slightly

433
00:18:36,990 --> 00:18:40,650
different models but it's quite

434
00:18:38,130 --> 00:18:42,900
interesting and to understand the tomb

435
00:18:40,650 --> 00:18:46,170
where where you might want to use them

436
00:18:42,900 --> 00:18:47,970
so if we compare them we see that

437
00:18:46,170 --> 00:18:50,760
explicit authorization is a really

438
00:18:47,970 --> 00:18:52,860
useful thing when we are asking an

439
00:18:50,760 --> 00:18:55,379
external entity whether we can perform a

440
00:18:52,860 --> 00:18:58,770
task or whether we try to allow a

441
00:18:55,380 --> 00:19:01,020
service to perform on our behalf

442
00:18:58,770 --> 00:19:02,370
we're just in time authorization is

443
00:19:01,020 --> 00:19:04,470
useful is when we've got far more

444
00:19:02,370 --> 00:19:08,040
dynamic context and where perhaps our

445
00:19:04,470 --> 00:19:09,840
application or climb doesn't know the

446
00:19:08,040 --> 00:19:12,240
scope of the authorization it will need

447
00:19:09,840 --> 00:19:14,790
throughout its lifetime both are valid

448
00:19:12,240 --> 00:19:18,900
approaches but they're subtly different

449
00:19:14,790 --> 00:19:22,139
in where you might want to apply them so

450
00:19:18,900 --> 00:19:25,320
final a in our three a's is accounting

451
00:19:22,140 --> 00:19:29,340
or auditing so accounting these what's

452
00:19:25,320 --> 00:19:31,200
been done and why this is the bit that's

453
00:19:29,340 --> 00:19:34,500
always missing from whenever you go and

454
00:19:31,200 --> 00:19:36,090
see vendors they will set up an audit

455
00:19:34,500 --> 00:19:37,680
trail but it'll just go into a bucket

456
00:19:36,090 --> 00:19:39,600
and never be seen again but actually

457
00:19:37,680 --> 00:19:41,070
that information is really useful you

458
00:19:39,600 --> 00:19:42,780
can use it to feed back into your

459
00:19:41,070 --> 00:19:45,060
pipeline for authorization decisions

460
00:19:42,780 --> 00:19:48,450
because it allows you to identify things

461
00:19:45,060 --> 00:19:50,220
like anomalies additionally you need to

462
00:19:48,450 --> 00:19:53,580
keep on top of it in case you ever do

463
00:19:50,220 --> 00:19:56,070
get breached it's fairly simple to

464
00:19:53,580 --> 00:19:57,570
understand but when we look at it from a

465
00:19:56,070 --> 00:19:58,710
service mesh point of view it's

466
00:19:57,570 --> 00:20:00,720
something that happens during the

467
00:19:58,710 --> 00:20:03,090
authorization and authentication schemes

468
00:20:00,720 --> 00:20:03,720
it's it automatically falls out what

469
00:20:03,090 --> 00:20:07,169
you're doing

470
00:20:03,720 --> 00:20:07,940
so when a request comes in the service

471
00:20:07,170 --> 00:20:11,610
gateway

472
00:20:07,940 --> 00:20:13,830
identifies authorization and will create

473
00:20:11,610 --> 00:20:15,780
your audit record for you automatically

474
00:20:13,830 --> 00:20:16,620
so again this is quite nice because this

475
00:20:15,780 --> 00:20:18,540
offloads

476
00:20:16,620 --> 00:20:20,310
a lot of this logic from the application

477
00:20:18,540 --> 00:20:24,149
and allows us to centralize and

478
00:20:20,310 --> 00:20:32,520
normalize this at the layer seven of the

479
00:20:24,150 --> 00:20:34,920
network stack so sto supports or will

480
00:20:32,520 --> 00:20:36,530
support in the next two releases all of

481
00:20:34,920 --> 00:20:39,750
these functions

482
00:20:36,530 --> 00:20:42,178
but the real interesting part is how sto

483
00:20:39,750 --> 00:20:44,640
is configured it is configured as code

484
00:20:42,179 --> 00:20:47,760
so it becomes source code so it becomes

485
00:20:44,640 --> 00:20:49,860
really useful and much more easy for our

486
00:20:47,760 --> 00:20:51,540
devs to use in their workflow because

487
00:20:49,860 --> 00:20:56,129
they can use the normal tools they

488
00:20:51,540 --> 00:20:57,600
always use they can review the policy

489
00:20:56,130 --> 00:21:00,720
that they define for their micro

490
00:20:57,600 --> 00:21:01,949
services they can understand the rest of

491
00:21:00,720 --> 00:21:03,770
the system because they can see the

492
00:21:01,950 --> 00:21:06,480
other the rest of the systems policy

493
00:21:03,770 --> 00:21:08,970
definition and we can manage it with

494
00:21:06,480 --> 00:21:12,210
normal tools so I don't know if anybody

495
00:21:08,970 --> 00:21:14,820
seen we've works get ups talks

496
00:21:12,210 --> 00:21:16,470
I don't anyone seen those if not you

497
00:21:14,820 --> 00:21:18,240
should you should watch them if people

498
00:21:16,470 --> 00:21:19,620
haven't seen those really interesting

499
00:21:18,240 --> 00:21:21,720
where you control your whole life cycle

500
00:21:19,620 --> 00:21:23,760
through gear and git commits absolutely

501
00:21:21,720 --> 00:21:25,350
fantastic but the other really

502
00:21:23,760 --> 00:21:27,750
interesting thing I think the next stage

503
00:21:25,350 --> 00:21:30,510
of everything will be the fact that

504
00:21:27,750 --> 00:21:32,309
these policies are possible and what

505
00:21:30,510 --> 00:21:35,160
that means is we can build tooling for

506
00:21:32,309 --> 00:21:38,730
them and so when we look back again at

507
00:21:35,160 --> 00:21:40,740
the Facebook examples Facebook was

508
00:21:38,730 --> 00:21:43,679
difficult to identify and to manage

509
00:21:40,740 --> 00:21:45,300
their exploit because it was difficult

510
00:21:43,679 --> 00:21:48,840
to see the interactions with their

511
00:21:45,300 --> 00:21:51,450
system because in sto and other

512
00:21:48,840 --> 00:21:53,610
frameworks we can define all of our

513
00:21:51,450 --> 00:21:56,040
policy as code we can actually enumerate

514
00:21:53,610 --> 00:21:58,139
all the possible scenarios and so we can

515
00:21:56,040 --> 00:21:59,700
identify anomalies upfront just by the

516
00:21:58,140 --> 00:22:02,100
configuration that's going into the

517
00:21:59,700 --> 00:22:03,990
database for our policy store so let's

518
00:22:02,100 --> 00:22:05,820
read that so really powerful thing

519
00:22:03,990 --> 00:22:11,970
that's coming along and will probably be

520
00:22:05,820 --> 00:22:16,740
here in the next few months configures

521
00:22:11,970 --> 00:22:19,380
code as well helps us to define what our

522
00:22:16,740 --> 00:22:22,380
system is and what it is doing and helps

523
00:22:19,380 --> 00:22:24,510
others to understand it so it allows

524
00:22:22,380 --> 00:22:27,330
developers to document on the go in a

525
00:22:24,510 --> 00:22:29,700
very lightweight fashion without forcing

526
00:22:27,330 --> 00:22:35,159
them into writing separate design

527
00:22:29,700 --> 00:22:36,990
documents or adding comments in their

528
00:22:35,160 --> 00:22:39,120
code which are then have them to be

529
00:22:36,990 --> 00:22:41,100
passed by complex tools it's just a

530
00:22:39,120 --> 00:22:44,610
really good and nice ways to help us

531
00:22:41,100 --> 00:22:46,309
manage security the other thing that we

532
00:22:44,610 --> 00:22:48,540
get with the service message is

533
00:22:46,309 --> 00:22:50,100
observability and what that really gives

534
00:22:48,540 --> 00:22:53,549
us as a security community

535
00:22:50,100 --> 00:22:55,678
the ability to make to reason about our

536
00:22:53,549 --> 00:22:58,980
system and to make macro level decisions

537
00:22:55,679 --> 00:23:02,220
so are we vulnerable to certain attacks

538
00:22:58,980 --> 00:23:03,870
it's much easier to identify that if we

539
00:23:02,220 --> 00:23:07,020
can observe the behavior of the running

540
00:23:03,870 --> 00:23:09,270
system okay and itself it allows us to

541
00:23:07,020 --> 00:23:11,070
self document our system and save time

542
00:23:09,270 --> 00:23:13,049
and these are the really interesting

543
00:23:11,070 --> 00:23:15,899
points of the service mesh is not so

544
00:23:13,049 --> 00:23:19,100
much how they're built but the

545
00:23:15,900 --> 00:23:23,789
capabilities they will give us in future

546
00:23:19,100 --> 00:23:27,120
so everyone loves reading yeah Milan the

547
00:23:23,789 --> 00:23:28,350
PowerPoint slides so I thought I'd show

548
00:23:27,120 --> 00:23:33,059
you an example of an authorization

549
00:23:28,350 --> 00:23:35,219
policy for sto so there's two concepts

550
00:23:33,059 --> 00:23:39,389
shown here sto works on an hour back

551
00:23:35,220 --> 00:23:41,460
model so role based access control the -

552
00:23:39,390 --> 00:23:43,919
yeah Mille entries at the top define

553
00:23:41,460 --> 00:23:45,780
roles so the one at the top an admin

554
00:23:43,919 --> 00:23:47,820
role the admin role can do everything

555
00:23:45,780 --> 00:23:49,350
with all services which is probably

556
00:23:47,820 --> 00:23:51,629
quite open you probably wouldn't want an

557
00:23:49,350 --> 00:23:53,309
admin role quite like that but the

558
00:23:51,630 --> 00:23:56,490
second one's more interesting so the

559
00:23:53,309 --> 00:23:59,309
second one identifies a single service

560
00:23:56,490 --> 00:24:03,659
and the methods the HTTP methods that

561
00:23:59,309 --> 00:24:06,090
are allowed to be executed on it and so

562
00:24:03,659 --> 00:24:08,580
it's specific to this service now this

563
00:24:06,090 --> 00:24:10,709
bottom section of the configuration here

564
00:24:08,580 --> 00:24:12,720
defines what is called a role binding so

565
00:24:10,710 --> 00:24:14,190
the role binding binds a role to set of

566
00:24:12,720 --> 00:24:16,770
principles a set of people set of

567
00:24:14,190 --> 00:24:18,390
services who can perform that role so we

568
00:24:16,770 --> 00:24:22,879
can see here that there's a number of

569
00:24:18,390 --> 00:24:26,850
subjects listed and we have user account

570
00:24:22,880 --> 00:24:27,390
service cam a and also user service

571
00:24:26,850 --> 00:24:32,399
account

572
00:24:27,390 --> 00:24:34,770
ingress which also has properties with

573
00:24:32,400 --> 00:24:38,640
claims in so these claims actually come

574
00:24:34,770 --> 00:24:41,158
from a JWT passed by the user onto this

575
00:24:38,640 --> 00:24:44,309
service and so what this means is that

576
00:24:41,159 --> 00:24:46,400
we can say this you through this service

577
00:24:44,309 --> 00:24:49,168
this user is allowed to perform the

578
00:24:46,400 --> 00:24:51,890
tasks defined in this role so what that

579
00:24:49,169 --> 00:24:55,830
gives us is much greater control over

580
00:24:51,890 --> 00:24:57,840
who can do what when and why and because

581
00:24:55,830 --> 00:25:02,639
it's yeah Mille we can pass it we can

582
00:24:57,840 --> 00:25:08,100
build tools and we can reason about so

583
00:25:02,640 --> 00:25:11,130
that was quick my final slide is really

584
00:25:08,100 --> 00:25:13,949
about the move towards mic services and

585
00:25:11,130 --> 00:25:15,930
as autonomous teams has presented a

586
00:25:13,950 --> 00:25:17,840
conundrum for us because previously

587
00:25:15,930 --> 00:25:20,130
whilst there would be big gates

588
00:25:17,840 --> 00:25:22,860
especially in big companies big gates in

589
00:25:20,130 --> 00:25:24,270
place to do security reviews to verify

590
00:25:22,860 --> 00:25:26,429
people are doing things in a consistent

591
00:25:24,270 --> 00:25:27,810
way that's no longer possible and

592
00:25:26,430 --> 00:25:29,850
shouldn't be how we're looking to build

593
00:25:27,810 --> 00:25:32,520
our systems in future what that does

594
00:25:29,850 --> 00:25:35,250
mean is we have impaired view of our

595
00:25:32,520 --> 00:25:37,020
system from a security perspective and

596
00:25:35,250 --> 00:25:40,530
it makes it very difficult for us to

597
00:25:37,020 --> 00:25:42,540
reason by moving towards the service

598
00:25:40,530 --> 00:25:45,090
mesh we can normalize some of this

599
00:25:42,540 --> 00:25:47,310
decision-making up a level out of the

600
00:25:45,090 --> 00:25:49,139
applications and we can then self

601
00:25:47,310 --> 00:25:51,350
document and understand our system

602
00:25:49,140 --> 00:25:51,350
better

603
00:25:51,500 --> 00:25:56,670
the configures code bit I think is the

604
00:25:54,660 --> 00:25:58,710
real takeaway from the whole and

605
00:25:56,670 --> 00:26:00,300
certainly my involvement with the SEO

606
00:25:58,710 --> 00:26:02,490
community this is where all the power

607
00:26:00,300 --> 00:26:05,850
comes because once you start managing

608
00:26:02,490 --> 00:26:08,880
your entire estate infrastructure policy

609
00:26:05,850 --> 00:26:10,290
source code everything is code

610
00:26:08,880 --> 00:26:12,060
everything's a text file that you can

611
00:26:10,290 --> 00:26:14,010
parse you can start to build really

612
00:26:12,060 --> 00:26:16,080
powerful tools and understand a lot more

613
00:26:14,010 --> 00:26:17,430
about your system so that if you're

614
00:26:16,080 --> 00:26:20,040
going to take one thing away from this

615
00:26:17,430 --> 00:26:22,110
whole talk is move in that direction if

616
00:26:20,040 --> 00:26:26,550
you haven't already and find tools that

617
00:26:22,110 --> 00:26:28,590
fit that model so that was mostly what I

618
00:26:26,550 --> 00:26:31,919
was gonna say today there's various

619
00:26:28,590 --> 00:26:34,590
links there which may or may not be

620
00:26:31,920 --> 00:26:37,490
interesting if anybody's interested in

621
00:26:34,590 --> 00:26:40,760
its do please come and talk to me

622
00:26:37,490 --> 00:26:49,550
otherwise thank you very much

623
00:26:40,760 --> 00:26:57,120
[Applause]

624
00:26:49,550 --> 00:26:59,780
questions I guess silence they want it's

625
00:26:57,120 --> 00:26:59,780
one Pakman there

626
00:27:04,460 --> 00:27:10,650
hello any thought hello

627
00:27:08,730 --> 00:27:14,280
any thoughts about how to get the

628
00:27:10,650 --> 00:27:16,440
configures code as close as possible to

629
00:27:14,280 --> 00:27:18,389
the application that you might be

630
00:27:16,440 --> 00:27:20,549
writing on the micro service or does it

631
00:27:18,390 --> 00:27:22,980
end up in a different repo

632
00:27:20,549 --> 00:27:24,720
no so I can only talk about how we're

633
00:27:22,980 --> 00:27:28,080
building our internal Marc services is

634
00:27:24,720 --> 00:27:30,240
that with our kubernetes deployments and

635
00:27:28,080 --> 00:27:31,889
our source code for a service they all

636
00:27:30,240 --> 00:27:35,100
live together including the policy

637
00:27:31,890 --> 00:27:36,480
definition so whilst the role binding

638
00:27:35,100 --> 00:27:38,280
doesn't live there so who can access

639
00:27:36,480 --> 00:27:41,100
what because that might change because

640
00:27:38,280 --> 00:27:42,750
we build products not services we keep

641
00:27:41,100 --> 00:27:44,250
all together and keep it all in one

642
00:27:42,750 --> 00:27:45,630
place so well that means is we can

643
00:27:44,250 --> 00:27:48,150
review everything together everything

644
00:27:45,630 --> 00:27:50,580
together in one source commit we can

645
00:27:48,150 --> 00:27:53,400
verify that the policy matches the code

646
00:27:50,580 --> 00:27:55,830
that we've written and whether it all

647
00:27:53,400 --> 00:27:57,059
makes sense and it also means it's far

648
00:27:55,830 --> 00:27:58,830
easier to manage from source code

649
00:27:57,059 --> 00:28:00,540
perspective because there's a single git

650
00:27:58,830 --> 00:28:02,370
commit instead of having separate

651
00:28:00,540 --> 00:28:04,590
repositories and then having to bring

652
00:28:02,370 --> 00:28:06,059
separate repositories together we put

653
00:28:04,590 --> 00:28:09,350
everything with the service so the

654
00:28:06,059 --> 00:28:09,350
policy lives with the service

655
00:28:17,780 --> 00:28:22,560
yeah most of the thing what you're

656
00:28:20,010 --> 00:28:24,480
talking about is not taking is it not

657
00:28:22,560 --> 00:28:27,990
taking care in the API manager like a

658
00:28:24,480 --> 00:28:31,650
double use or two or a PG maja PG and

659
00:28:27,990 --> 00:28:34,140
other stuff sorry thing what you're

660
00:28:31,650 --> 00:28:39,330
talking about isn't taken care in the

661
00:28:34,140 --> 00:28:44,460
double use or two API manager so from an

662
00:28:39,330 --> 00:28:46,889
API gateway external calls into your

663
00:28:44,460 --> 00:28:48,840
system are generally stops at the API

664
00:28:46,890 --> 00:28:50,790
gateway what this covers is internal

665
00:28:48,840 --> 00:28:52,800
calls as well so generally you wouldn't

666
00:28:50,790 --> 00:28:55,050
internally go out through an API gateway

667
00:28:52,800 --> 00:28:59,100
and back in so that and this is again is

668
00:28:55,050 --> 00:29:01,320
about using container native tools and

669
00:28:59,100 --> 00:29:03,179
so you can supply very fine-grained

670
00:29:01,320 --> 00:29:04,770
policies at the point at where they're

671
00:29:03,180 --> 00:29:06,510
gonna or as close to where they're going

672
00:29:04,770 --> 00:29:08,610
to be enforced without actually having

673
00:29:06,510 --> 00:29:10,320
to make code changes and especially if

674
00:29:08,610 --> 00:29:11,280
you've got a heterogeneous environment

675
00:29:10,320 --> 00:29:15,110
where you've got lots of different

676
00:29:11,280 --> 00:29:15,110
languages it's just a way to manage that

677
00:29:15,230 --> 00:29:18,380
anything else

678
00:29:22,220 --> 00:29:26,539
I think I might be the only person here

679
00:29:25,070 --> 00:29:28,189
that actually works on the Microsoft

680
00:29:26,539 --> 00:29:31,820
stack as everyone else is talking about

681
00:29:28,190 --> 00:29:34,820
Java and those sorts of things but so we

682
00:29:31,820 --> 00:29:36,559
predominantly using Azure and I just

683
00:29:34,820 --> 00:29:37,520
wanted to know from your experience of

684
00:29:36,559 --> 00:29:41,030
know what experience you have

685
00:29:37,520 --> 00:29:44,210
particularly with Azure but as your uses

686
00:29:41,030 --> 00:29:45,710
a technology called service fabric right

687
00:29:44,210 --> 00:29:47,270
in order to orchestrate its micro

688
00:29:45,710 --> 00:29:49,070
services what is the difference between

689
00:29:47,270 --> 00:29:51,740
the two I don't know anything about

690
00:29:49,070 --> 00:29:54,379
service fabric and I've never logged

691
00:29:51,740 --> 00:29:59,030
into my Azure account okay if that's

692
00:29:54,380 --> 00:30:00,830
helpful sorry okay no mics my

693
00:29:59,030 --> 00:30:03,168
expectation is with kubernetes moving

694
00:30:00,830 --> 00:30:04,850
into Azure which I know is happening you

695
00:30:03,169 --> 00:30:07,100
will end up with something you will end

696
00:30:04,850 --> 00:30:08,780
up with this teo or an equivalent in

697
00:30:07,100 --> 00:30:11,090
there that does the same thing I don't

698
00:30:08,780 --> 00:30:13,850
know what level service fabric applies

699
00:30:11,090 --> 00:30:16,340
but SEO is really about embedding in

700
00:30:13,850 --> 00:30:18,740
kubernetes all if you use pivotal Cloud

701
00:30:16,340 --> 00:30:20,449
Foundry it's Jerry's turning up there as

702
00:30:18,740 --> 00:30:22,970
well so pivots are a big proponent

703
00:30:20,450 --> 00:30:25,159
obvious tier I assume the one big

704
00:30:22,970 --> 00:30:27,350
advantage as well would be as you say

705
00:30:25,159 --> 00:30:29,030
this is kind of language and stack

706
00:30:27,350 --> 00:30:31,340
agnostic in terms of if you want to go

707
00:30:29,030 --> 00:30:33,500
Python go Java etc you can all

708
00:30:31,340 --> 00:30:34,699
orchestrate that as exactly and that's

709
00:30:33,500 --> 00:30:36,650
part of the reason that we've selected

710
00:30:34,700 --> 00:30:39,230
it and actually why we are contributing

711
00:30:36,650 --> 00:30:41,360
back to the open source is we understand

712
00:30:39,230 --> 00:30:44,120
we're going to have this heterogeneous

713
00:30:41,360 --> 00:30:46,158
environment where we don't really want

714
00:30:44,120 --> 00:30:47,959
our I think we've got that 25 scrum

715
00:30:46,159 --> 00:30:50,000
teams we we don't want to tell them to

716
00:30:47,960 --> 00:30:51,740
use you must use Java and this and

717
00:30:50,000 --> 00:30:54,289
spring boot because no one actually

718
00:30:51,740 --> 00:30:55,580
likes Java and spring booth but we want

719
00:30:54,289 --> 00:30:57,140
them to make the right decision based on

720
00:30:55,580 --> 00:30:58,760
what they're trying to achieve this is

721
00:30:57,140 --> 00:31:03,010
just a way to allow us to normalize

722
00:30:58,760 --> 00:31:03,010
certain decisions okay thank you

723
00:31:14,379 --> 00:31:19,370
hey just a question about sto I know you

724
00:31:17,539 --> 00:31:21,408
mentioned during the talk that there's a

725
00:31:19,370 --> 00:31:22,969
couple of features that were coming soon

726
00:31:21,409 --> 00:31:25,159
perhaps and at the beginning when there

727
00:31:22,970 --> 00:31:26,840
was a show of hands of who's using it in

728
00:31:25,159 --> 00:31:28,730
production I mean maybe I'm too close to

729
00:31:26,840 --> 00:31:31,428
the front but I couldn't see many from

730
00:31:28,730 --> 00:31:32,809
where I am know how mature is it is is

731
00:31:31,429 --> 00:31:37,909
it something which is ready to be rolled

732
00:31:32,809 --> 00:31:40,850
out in the 1.0 about three months ago so

733
00:31:37,909 --> 00:31:44,720
it's available a managed version is

734
00:31:40,850 --> 00:31:46,908
available on gtp so Google but it has

735
00:31:44,720 --> 00:31:52,009
literally just reached 1.0 so it's very

736
00:31:46,909 --> 00:31:54,259
early stage but the API is existing API

737
00:31:52,009 --> 00:31:56,090
sardine stable and it is deemed

738
00:31:54,259 --> 00:32:01,999
production quality so it is used by

739
00:31:56,090 --> 00:32:03,580
people like Google in turn I think

740
00:32:01,999 --> 00:32:11,290
that's it

741
00:32:03,580 --> 00:32:11,290
[Applause]

