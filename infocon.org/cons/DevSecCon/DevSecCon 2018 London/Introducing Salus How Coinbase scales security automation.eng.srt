1
00:00:00,000 --> 00:00:06,600
he recently open sourced we built it at

2
00:00:03,480 --> 00:00:08,099
coinbase and I think a lot of what has

3
00:00:06,600 --> 00:00:10,080
been said so far in the conference will

4
00:00:08,099 --> 00:00:12,240
actually resonate with this tool talking

5
00:00:10,080 --> 00:00:14,340
about ways to automate security and

6
00:00:12,240 --> 00:00:16,379
scalable operate across lots of services

7
00:00:14,340 --> 00:00:17,850
this is a tool that we built to help us

8
00:00:16,379 --> 00:00:19,949
do that because basically coinbase

9
00:00:17,850 --> 00:00:20,939
started expanding very quickly but we

10
00:00:19,949 --> 00:00:22,949
also have really big security

11
00:00:20,939 --> 00:00:24,570
requirements so this is why we built it

12
00:00:22,949 --> 00:00:26,880
and now that it's open-source I hope

13
00:00:24,570 --> 00:00:28,710
that this is something you can use you

14
00:00:26,880 --> 00:00:31,410
can fire it off today from your laptop

15
00:00:28,710 --> 00:00:34,380
during the presentation if you want so a

16
00:00:31,410 --> 00:00:36,899
bit about me quickly I work at coinbase

17
00:00:34,380 --> 00:00:38,579
on the security team and if you don't

18
00:00:36,899 --> 00:00:40,410
know what coinbase is it's a digital

19
00:00:38,579 --> 00:00:42,719
currency platform you can buy and sell

20
00:00:40,410 --> 00:00:44,669
things like Bitcoin and aetherium and

21
00:00:42,719 --> 00:00:46,559
other digital assets so we have an

22
00:00:44,670 --> 00:00:48,390
exchange and some fancy mobile apps and

23
00:00:46,559 --> 00:00:50,820
things like this and the security

24
00:00:48,390 --> 00:00:53,340
requirements a pretty large a coin base

25
00:00:50,820 --> 00:00:55,649
because we're sort of this big pot of

26
00:00:53,340 --> 00:00:57,270
gold sitting on the internet and a lot

27
00:00:55,649 --> 00:00:58,920
of the money is stored offline but we

28
00:00:57,270 --> 00:01:00,420
still have a fair bit of money online

29
00:00:58,920 --> 00:01:03,629
and so for financially motivated

30
00:01:00,420 --> 00:01:05,610
attackers that we're one of the largest

31
00:01:03,629 --> 00:01:07,649
bounties online I would say but at the

32
00:01:05,610 --> 00:01:10,229
same time we want to operate in a very

33
00:01:07,650 --> 00:01:12,930
agile development environment we want to

34
00:01:10,229 --> 00:01:14,610
deploy continuously and we we have lots

35
00:01:12,930 --> 00:01:16,530
of developers writing lots of code in

36
00:01:14,610 --> 00:01:19,140
lots of different languages and lots of

37
00:01:16,530 --> 00:01:21,360
services so security becomes a challenge

38
00:01:19,140 --> 00:01:22,979
of trying to be as preventative as

39
00:01:21,360 --> 00:01:29,039
possible and trying to enforce as many

40
00:01:22,979 --> 00:01:30,990
good checks in our pipeline so this this

41
00:01:29,040 --> 00:01:34,290
tool really came out of scaling as I

42
00:01:30,990 --> 00:01:35,520
said so as for some context I'll tell

43
00:01:34,290 --> 00:01:38,310
you sort of what happened with coinbase

44
00:01:35,520 --> 00:01:41,250
over the last few years so I started in

45
00:01:38,310 --> 00:01:43,530
June 2015 and my manager on my first day

46
00:01:41,250 --> 00:01:45,619
took me out for coffee and said I want

47
00:01:43,530 --> 00:01:49,079
100 percent of services that we deploy

48
00:01:45,619 --> 00:01:50,430
to have production that a deployed to

49
00:01:49,079 --> 00:01:53,009
production have scanning of some kind

50
00:01:50,430 --> 00:01:55,140
and back in those days we had one

51
00:01:53,009 --> 00:01:56,820
monolithic rails app so this was pretty

52
00:01:55,140 --> 00:01:59,100
easy I was like alright cool I have one

53
00:01:56,820 --> 00:02:01,350
thing to take care of the problem is

54
00:01:59,100 --> 00:02:02,548
that was here and then this is the

55
00:02:01,350 --> 00:02:05,100
number of services we started deploying

56
00:02:02,549 --> 00:02:07,049
over the next few years so this problem

57
00:02:05,100 --> 00:02:09,720
started started getting a bit out of

58
00:02:07,049 --> 00:02:13,680
hand and and this is why we built this

59
00:02:09,720 --> 00:02:15,269
tool so yeah a number of services and

60
00:02:13,680 --> 00:02:18,000
autograph doesn't really show up but

61
00:02:15,269 --> 00:02:20,159
these are all in different all in

62
00:02:18,000 --> 00:02:22,920
different languages and and on different

63
00:02:20,159 --> 00:02:24,420
frameworks and things like that so quick

64
00:02:22,920 --> 00:02:25,950
review of scanners I think a lot of you

65
00:02:24,420 --> 00:02:27,420
already know how security scanners work

66
00:02:25,950 --> 00:02:28,530
and many different types and I've learnt

67
00:02:27,420 --> 00:02:30,899
about some during this conference

68
00:02:28,530 --> 00:02:32,340
business which is great but I will

69
00:02:30,900 --> 00:02:34,049
quickly review security scanners and

70
00:02:32,340 --> 00:02:36,870
sort of what I expect out of them

71
00:02:34,049 --> 00:02:38,370
input-output wise some problems with

72
00:02:36,870 --> 00:02:39,450
security scanners that you might have

73
00:02:38,370 --> 00:02:41,370
when you're trying to deploy them at

74
00:02:39,450 --> 00:02:43,170
scale and then we'll talk about what

75
00:02:41,370 --> 00:02:46,590
Salas does how it solves this very

76
00:02:43,170 --> 00:02:49,018
problem and then I'll actually go into

77
00:02:46,590 --> 00:02:51,689
sort of I am also as I said it's like

78
00:02:49,019 --> 00:02:52,950
free you can run it directly you'll show

79
00:02:51,689 --> 00:02:54,750
you a command to run it in a moment you

80
00:02:52,950 --> 00:02:57,268
can run it on a repository you might

81
00:02:54,750 --> 00:02:58,950
have locally and then we'll talk about

82
00:02:57,269 --> 00:03:00,269
some of the cool things you can do with

83
00:02:58,950 --> 00:03:01,679
Salas how you can configure it how you

84
00:03:00,269 --> 00:03:04,019
can use it in your infrastructure and

85
00:03:01,680 --> 00:03:05,450
then always point to like the resources

86
00:03:04,019 --> 00:03:08,849
so you can check it out as well so

87
00:03:05,450 --> 00:03:10,230
software scanners very quickly I think

88
00:03:08,849 --> 00:03:12,510
of a scanner is just some piece of

89
00:03:10,230 --> 00:03:14,129
software that analyzes some other pieces

90
00:03:12,510 --> 00:03:15,689
of software it could be linting it could

91
00:03:14,129 --> 00:03:17,459
be looking for CVS could be doing all

92
00:03:15,689 --> 00:03:19,590
sorts of things so basically you have

93
00:03:17,459 --> 00:03:21,629
some source code that is ingested

94
00:03:19,590 --> 00:03:23,760
basically as an input the code is the

95
00:03:21,629 --> 00:03:25,649
input to the scanner it will pass or

96
00:03:23,760 --> 00:03:27,448
fail hopefully if it fails you it tells

97
00:03:25,650 --> 00:03:29,129
you what's wrong with your code and then

98
00:03:27,449 --> 00:03:30,750
you have a feedback loop where the

99
00:03:29,129 --> 00:03:32,459
failure message can go to the developer

100
00:03:30,750 --> 00:03:34,349
the developer can fix their pull request

101
00:03:32,459 --> 00:03:36,989
and then they can merge hopefully

102
00:03:34,349 --> 00:03:39,448
compliant code into into the master

103
00:03:36,989 --> 00:03:41,400
branch so a good example of this is in

104
00:03:39,449 --> 00:03:44,129
Ruby land there's a lot of Rivia

105
00:03:41,400 --> 00:03:47,129
coinbase so a lot of my example examples

106
00:03:44,129 --> 00:03:48,870
will be ruby based so lint is not

107
00:03:47,129 --> 00:03:51,418
necessarily security related but it's

108
00:03:48,870 --> 00:03:54,599
the type of scanner Rubick off is sort

109
00:03:51,419 --> 00:03:56,699
of the go-to ruby linty you take some

110
00:03:54,599 --> 00:03:58,918
piece of code this is actually some

111
00:03:56,699 --> 00:04:00,769
piece out of salus that's arbitrary you

112
00:03:58,919 --> 00:04:03,150
put this through birkoff it will say hey

113
00:04:00,769 --> 00:04:04,229
this string here should be frozen

114
00:04:03,150 --> 00:04:06,180
because you're treating it as a constant

115
00:04:04,229 --> 00:04:07,699
and it should be immutable go fix that

116
00:04:06,180 --> 00:04:10,079
and then you have that feedback loop

117
00:04:07,699 --> 00:04:12,959
we've talked a lot about CVE scanners

118
00:04:10,079 --> 00:04:14,280
another example would be again just in

119
00:04:12,959 --> 00:04:16,470
case you don't know what it is some

120
00:04:14,280 --> 00:04:18,810
documented vulnerability so CVE scanner

121
00:04:16,470 --> 00:04:20,250
looks at your dependencies bundler audit

122
00:04:18,810 --> 00:04:23,729
is the way to do this with ruby gems

123
00:04:20,250 --> 00:04:25,529
which is the libraries and really so you

124
00:04:23,729 --> 00:04:26,270
could say let's say we're including in

125
00:04:25,529 --> 00:04:28,639
our

126
00:04:26,270 --> 00:04:30,380
and now project activesupport three to

127
00:04:28,639 --> 00:04:32,360
ten blonde Laura we'll look at this

128
00:04:30,380 --> 00:04:35,240
thing and then find out hey there's this

129
00:04:32,360 --> 00:04:37,039
new invulnerability came out in 2015 you

130
00:04:35,240 --> 00:04:39,800
should upgrade this thing and again you

131
00:04:37,039 --> 00:04:41,000
have that feedback loop so these

132
00:04:39,800 --> 00:04:45,080
scanners are really good and I do

133
00:04:41,000 --> 00:04:47,630
recommend knowing which scanners are

134
00:04:45,080 --> 00:04:50,030
relevant to your frameworks and as Liz

135
00:04:47,630 --> 00:04:53,300
said two speeches ago this will probably

136
00:04:50,030 --> 00:04:56,000
save your ass one day so scanners are

137
00:04:53,300 --> 00:04:57,849
really important I think firstly CVE

138
00:04:56,000 --> 00:05:01,970
things scanners can be quite powerful

139
00:04:57,849 --> 00:05:03,889
every year Verizon does a big analysis

140
00:05:01,970 --> 00:05:05,000
of lots of breaches and they collect a

141
00:05:03,889 --> 00:05:09,770
lot of metrics on them and how they

142
00:05:05,000 --> 00:05:13,069
happened and in 2015 their statistic was

143
00:05:09,770 --> 00:05:16,370
that name and I 99.9% of exploited

144
00:05:13,069 --> 00:05:18,500
vulnerabilities were from CVS that were

145
00:05:16,370 --> 00:05:20,599
out for the for about a year before the

146
00:05:18,500 --> 00:05:23,000
actual exploit so just by cleaning up

147
00:05:20,599 --> 00:05:25,520
you'll stack from CBE's should probably

148
00:05:23,000 --> 00:05:27,710
prevent a lot of possible attacks and

149
00:05:25,520 --> 00:05:29,448
then in 2018 they basically said the

150
00:05:27,710 --> 00:05:31,729
same thing and for every year in between

151
00:05:29,449 --> 00:05:32,960
they just gave a list of tips this year

152
00:05:31,729 --> 00:05:35,599
but like one of the things they said is

153
00:05:32,960 --> 00:05:38,060
you know cyber criminals are just using

154
00:05:35,599 --> 00:05:40,250
new and vulnerabilities not just but I

155
00:05:38,060 --> 00:05:42,580
mean usually they are if it's a

156
00:05:40,250 --> 00:05:44,659
nation-state which is using zero-days

157
00:05:42,580 --> 00:05:47,659
you've got some bigger problems I would

158
00:05:44,659 --> 00:05:49,729
say and then so you can guard against

159
00:05:47,659 --> 00:05:51,590
these by upgrading so scanners for CPUs

160
00:05:49,729 --> 00:05:52,639
are very important other types of

161
00:05:51,590 --> 00:05:55,008
scanners they'll look for energy

162
00:05:52,639 --> 00:05:56,750
patterns so for example using eval in

163
00:05:55,009 --> 00:05:58,610
many different languages including Ruby

164
00:05:56,750 --> 00:06:01,610
if that's on user controlled input

165
00:05:58,610 --> 00:06:03,050
you'll get nasty e that's not good I

166
00:06:01,610 --> 00:06:04,699
also like scanners because they're not

167
00:06:03,050 --> 00:06:06,380
fatigued like humans especially when it

168
00:06:04,699 --> 00:06:07,610
comes to like ship time and everyone's

169
00:06:06,380 --> 00:06:10,340
trying to put pure crude really quickly

170
00:06:07,610 --> 00:06:12,889
scanner operates the same every time so

171
00:06:10,340 --> 00:06:14,090
that's that's very important you can run

172
00:06:12,889 --> 00:06:15,740
them on every build and you can run them

173
00:06:14,090 --> 00:06:17,869
around the clock this also ensures that

174
00:06:15,740 --> 00:06:19,849
you have some sort of baseline for the

175
00:06:17,870 --> 00:06:22,159
health of all your services at every

176
00:06:19,849 --> 00:06:24,110
point in time and the last thing to say

177
00:06:22,159 --> 00:06:26,360
is these are not silver bullets and I

178
00:06:24,110 --> 00:06:28,639
think the NIC the last speaker said this

179
00:06:26,360 --> 00:06:31,729
as well like you should probably use

180
00:06:28,639 --> 00:06:33,650
scanners in tandem with human reviews at

181
00:06:31,729 --> 00:06:34,849
least I would recommend that humans are

182
00:06:33,650 --> 00:06:38,239
very good at analyzing things like

183
00:06:34,849 --> 00:06:40,070
business logic or custom modules that a

184
00:06:38,240 --> 00:06:42,350
scanner might not

185
00:06:40,070 --> 00:06:46,520
pick up usually I would say especially

186
00:06:42,350 --> 00:06:47,750
the the the the non CV style security

187
00:06:46,520 --> 00:06:49,460
scanners the ones that are looking for

188
00:06:47,750 --> 00:06:51,380
sequel injections or remote code

189
00:06:49,460 --> 00:06:54,080
execution and stuff like this they send

190
00:06:51,380 --> 00:06:56,690
to work strongest for frameworks which

191
00:06:54,080 --> 00:06:59,030
are most rigid so for instance rails is

192
00:06:56,690 --> 00:07:00,530
a very rigid framework to build a web

193
00:06:59,030 --> 00:07:02,840
application there's like a rails way to

194
00:07:00,530 --> 00:07:05,210
do things and if you don't do it the

195
00:07:02,840 --> 00:07:08,719
rails way in a rails app you probably

196
00:07:05,210 --> 00:07:11,090
just waste a lot of time now rigidity is

197
00:07:08,720 --> 00:07:12,230
not good in all cases but for security

198
00:07:11,090 --> 00:07:15,140
it's actually really good because that

199
00:07:12,230 --> 00:07:16,790
means that president beef as he's no

200
00:07:15,140 --> 00:07:19,460
more known online can make the brakeman

201
00:07:16,790 --> 00:07:21,530
scanner which is incredibly powerful

202
00:07:19,460 --> 00:07:23,210
looking at how data pulses through an

203
00:07:21,530 --> 00:07:24,739
application and then working out if you

204
00:07:23,210 --> 00:07:26,659
have a remote code execution or if you

205
00:07:24,740 --> 00:07:30,170
have a sequel injection or anything like

206
00:07:26,660 --> 00:07:32,120
that so yeah it's it's worth knowing

207
00:07:30,170 --> 00:07:33,530
which scanners are available and rigid

208
00:07:32,120 --> 00:07:37,040
frameworks I think actually tend to do

209
00:07:33,530 --> 00:07:38,270
pretty well with scanners so how might

210
00:07:37,040 --> 00:07:41,060
you deploy a scanner you've decided

211
00:07:38,270 --> 00:07:41,900
scanning is really good how are you

212
00:07:41,060 --> 00:07:43,880
gonna run this thing in your

213
00:07:41,900 --> 00:07:48,590
infrastructure so the first thing you

214
00:07:43,880 --> 00:07:50,840
can do very easily but not very

215
00:07:48,590 --> 00:07:53,030
maintainable is to just run it on the

216
00:07:50,840 --> 00:07:55,909
repository so you download bundle audit

217
00:07:53,030 --> 00:07:57,619
locally you go to the repository that

218
00:07:55,910 --> 00:07:59,000
you want to just scan and you just run

219
00:07:57,620 --> 00:08:01,190
bundle audit check and it gives you

220
00:07:59,000 --> 00:08:02,510
output great so you can now as an

221
00:08:01,190 --> 00:08:04,969
individual scan each of your

222
00:08:02,510 --> 00:08:07,250
repositories the

223
00:08:04,970 --> 00:08:09,200
the issue with this is that you kind of

224
00:08:07,250 --> 00:08:11,540
have to do it manually every time the

225
00:08:09,200 --> 00:08:12,950
code changes so that sucks you could do

226
00:08:11,540 --> 00:08:15,080
this slightly better if it was a

227
00:08:12,950 --> 00:08:16,310
pre-commit hook maybe but then you have

228
00:08:15,080 --> 00:08:18,650
to control the development environment

229
00:08:16,310 --> 00:08:20,120
of all your developers and that's not

230
00:08:18,650 --> 00:08:21,469
good usually developers a very

231
00:08:20,120 --> 00:08:23,810
particular about their environments and

232
00:08:21,470 --> 00:08:25,760
I prefer at least of what culture where

233
00:08:23,810 --> 00:08:27,230
you can sort of have your own

234
00:08:25,760 --> 00:08:29,719
development environment use whatever you

235
00:08:27,230 --> 00:08:31,100
want and instead I think what's a better

236
00:08:29,720 --> 00:08:33,590
idea is to just put these scanners in

237
00:08:31,100 --> 00:08:37,010
the CI CD pipeline directly so I kind of

238
00:08:33,590 --> 00:08:38,750
think of you know you'll build up or the

239
00:08:37,010 --> 00:08:40,189
thing that runs all the tests internally

240
00:08:38,750 --> 00:08:41,360
as sort of like doing preflight checks

241
00:08:40,190 --> 00:08:42,919
before you put something in production

242
00:08:41,360 --> 00:08:44,000
so it's just like an aircraft who's

243
00:08:42,919 --> 00:08:47,449
checking all their flaps and their

244
00:08:44,000 --> 00:08:49,460
ailerons before they take off so instead

245
00:08:47,450 --> 00:08:51,440
what you can do is just run the actual

246
00:08:49,460 --> 00:08:52,700
scanner in this case rubric all the

247
00:08:51,440 --> 00:08:53,300
linty but it could be anything

248
00:08:52,700 --> 00:08:55,400
you could run

249
00:08:53,300 --> 00:08:58,280
in the test suite itself so this block

250
00:08:55,400 --> 00:09:00,980
of code here is something we used to use

251
00:08:58,280 --> 00:09:02,750
to run these scanners in the test Suites

252
00:09:00,980 --> 00:09:05,360
themselves to this code it looks kind of

253
00:09:02,750 --> 00:09:08,210
weird but it's it's a spec Ruby testing

254
00:09:05,360 --> 00:09:09,920
framework and you can execute anything

255
00:09:08,210 --> 00:09:11,120
in there including your security

256
00:09:09,920 --> 00:09:13,490
scanners so you could go around to every

257
00:09:11,120 --> 00:09:15,740
repository and just add a test which is

258
00:09:13,490 --> 00:09:17,630
like run the scanner and if the scanner

259
00:09:15,740 --> 00:09:19,640
fails fail a test suite and if the test

260
00:09:17,630 --> 00:09:21,110
suite fails then the build will fail and

261
00:09:19,640 --> 00:09:23,930
if the bill fails you probably shouldn't

262
00:09:21,110 --> 00:09:25,310
push it into production so this is a

263
00:09:23,930 --> 00:09:27,349
pretty good way to ensure that you have

264
00:09:25,310 --> 00:09:29,569
continuous monitoring on every pull

265
00:09:27,350 --> 00:09:31,880
request and so this worked for a while

266
00:09:29,570 --> 00:09:34,190
and basically we had a situation where

267
00:09:31,880 --> 00:09:37,550
you have a developer in all my slides

268
00:09:34,190 --> 00:09:40,250
developers are these fairies jessica's

269
00:09:37,550 --> 00:09:43,400
and so you have a developer they push

270
00:09:40,250 --> 00:09:45,320
the source control that thing gets run

271
00:09:43,400 --> 00:09:46,670
on a CI server so that you can run the

272
00:09:45,320 --> 00:09:49,010
test suite and that's where you can

273
00:09:46,670 --> 00:09:50,390
stick these security scanners and if

274
00:09:49,010 --> 00:09:51,560
there's a failure the developer will see

275
00:09:50,390 --> 00:09:53,360
it they'll fix their pull request and

276
00:09:51,560 --> 00:09:57,829
eventually that makes its way into the

277
00:09:53,360 --> 00:10:01,550
cloud cool so this pipeline works well

278
00:09:57,830 --> 00:10:03,650
or it did when we had one massive

279
00:10:01,550 --> 00:10:05,990
monolithic rails app and I had one

280
00:10:03,650 --> 00:10:07,640
codebase to look after the problem is

281
00:10:05,990 --> 00:10:09,320
that we started scaling and suddenly I

282
00:10:07,640 --> 00:10:11,120
had to replicate this block of code over

283
00:10:09,320 --> 00:10:12,950
and over and over again into lots of

284
00:10:11,120 --> 00:10:16,190
different repositories and to get this

285
00:10:12,950 --> 00:10:19,730
like 100% of services deployed having

286
00:10:16,190 --> 00:10:21,830
scanned metric work meant that this this

287
00:10:19,730 --> 00:10:23,030
started breaking down a lot because

288
00:10:21,830 --> 00:10:25,340
basically you ended up with a situation

289
00:10:23,030 --> 00:10:27,380
where you had if you had m scanners and

290
00:10:25,340 --> 00:10:29,270
n code bases you had to use m times n

291
00:10:27,380 --> 00:10:31,040
code blocks and anytime you wanted to

292
00:10:29,270 --> 00:10:33,110
change anything upgrade the scanner

293
00:10:31,040 --> 00:10:34,370
version test out a new scanner decide

294
00:10:33,110 --> 00:10:35,780
one scan is useless and you're going to

295
00:10:34,370 --> 00:10:38,300
replace it with something else you would

296
00:10:35,780 --> 00:10:41,020
have to make n times n code changes and

297
00:10:38,300 --> 00:10:43,310
this definitely did not scale so I

298
00:10:41,020 --> 00:10:45,740
wanted to avoid asking all the service

299
00:10:43,310 --> 00:10:47,300
owners to do this for me I didn't to

300
00:10:45,740 --> 00:10:48,770
have to just email the dev lists of

301
00:10:47,300 --> 00:10:50,839
every day and say like hey please update

302
00:10:48,770 --> 00:10:53,449
to this version of the scanner one

303
00:10:50,840 --> 00:10:55,850
because that's a lot of work teams that

304
00:10:53,450 --> 00:10:57,710
really I would expect the application

305
00:10:55,850 --> 00:10:59,120
security team to do but also there's

306
00:10:57,710 --> 00:11:00,470
sometimes a lot of context that's

307
00:10:59,120 --> 00:11:02,840
required to understand how the scanner

308
00:11:00,470 --> 00:11:04,790
works how to configure it correctly it's

309
00:11:02,840 --> 00:11:06,220
really easy to miss configure a lot of

310
00:11:04,790 --> 00:11:08,079
these scanners so that they

311
00:11:06,220 --> 00:11:09,670
I then just softly fail or they just

312
00:11:08,080 --> 00:11:13,150
don't actually scan what you think

313
00:11:09,670 --> 00:11:15,040
they're scanning so this this sort of

314
00:11:13,150 --> 00:11:18,010
just put a lot of burden on the

315
00:11:15,040 --> 00:11:19,300
application security team so I thought

316
00:11:18,010 --> 00:11:22,090
well I guess I'm gonna have to do this

317
00:11:19,300 --> 00:11:24,579
myself once we start a scanning scaling

318
00:11:22,090 --> 00:11:28,180
that's what I looked like it was not fun

319
00:11:24,580 --> 00:11:29,410
so thinking back to David wheeler this

320
00:11:28,180 --> 00:11:31,780
is probably one of my favorite quotes

321
00:11:29,410 --> 00:11:33,660
all problems in computer science can be

322
00:11:31,780 --> 00:11:35,740
solved by another level of indirection

323
00:11:33,660 --> 00:11:37,390
David wheeler was a professor of

324
00:11:35,740 --> 00:11:40,990
computer science I believe it Cambridge

325
00:11:37,390 --> 00:11:43,120
not far away I think the only case which

326
00:11:40,990 --> 00:11:45,700
this is not true for is too many problem

327
00:11:43,120 --> 00:11:48,070
too many levels of indirection which can

328
00:11:45,700 --> 00:11:51,160
actually be a problem sometimes so

329
00:11:48,070 --> 00:11:52,900
instead what we decided to do was we

330
00:11:51,160 --> 00:11:55,449
would build this thing called Salus and

331
00:11:52,900 --> 00:11:57,010
it would run all the scanners and

332
00:11:55,450 --> 00:11:58,840
configure them and work out what to do

333
00:11:57,010 --> 00:12:02,650
and instead each test suite would just

334
00:11:58,840 --> 00:12:05,200
run latest Salus and so you now replace

335
00:12:02,650 --> 00:12:07,900
this block of code with a big docker

336
00:12:05,200 --> 00:12:09,250
container instead and that is like now

337
00:12:07,900 --> 00:12:11,829
you'll point it to everything that you

338
00:12:09,250 --> 00:12:14,800
actually want to want to do so kind of

339
00:12:11,830 --> 00:12:16,510
like Nick was saying in the previous in

340
00:12:14,800 --> 00:12:17,380
the previous presentation at a level of

341
00:12:16,510 --> 00:12:20,050
indirection to take care of

342
00:12:17,380 --> 00:12:21,700
authentication in a global way well this

343
00:12:20,050 --> 00:12:27,520
is kind of doing that but doing it with

344
00:12:21,700 --> 00:12:29,770
security scanners instead so what

345
00:12:27,520 --> 00:12:32,199
exactly is Salus internally so as I said

346
00:12:29,770 --> 00:12:34,000
it's a big docker container and it has

347
00:12:32,200 --> 00:12:35,800
two components in it well many

348
00:12:34,000 --> 00:12:37,450
components but let's say - one is the

349
00:12:35,800 --> 00:12:39,760
Ruby application itself and this is just

350
00:12:37,450 --> 00:12:41,650
a small blob of code I mean just a bunch

351
00:12:39,760 --> 00:12:43,330
of files but it's a blob of code that

352
00:12:41,650 --> 00:12:45,459
will coordinate scanners it basically

353
00:12:43,330 --> 00:12:47,980
looks at the source code and decides is

354
00:12:45,460 --> 00:12:49,780
this a ruby app if yes maybe I should

355
00:12:47,980 --> 00:12:51,400
run this scanner is it a rails app if

356
00:12:49,780 --> 00:12:52,990
yes I should run the scanner is it a

357
00:12:51,400 --> 00:12:54,730
known app if yes i should run the scan

358
00:12:52,990 --> 00:12:56,260
and then it also has all the scanners

359
00:12:54,730 --> 00:12:58,990
installs for many different languages

360
00:12:56,260 --> 00:13:00,880
and on the right side i kind of have the

361
00:12:58,990 --> 00:13:02,620
repository sitting there so that's

362
00:13:00,880 --> 00:13:04,780
probably on the local filesystem of the

363
00:13:02,620 --> 00:13:07,060
CI server or wherever you you're running

364
00:13:04,780 --> 00:13:09,100
a test suite and you volume this thing

365
00:13:07,060 --> 00:13:12,069
into the container so that Salus can

366
00:13:09,100 --> 00:13:13,960
then actually analyze it so this is the

367
00:13:12,070 --> 00:13:16,900
magic command right here you could run

368
00:13:13,960 --> 00:13:19,690
this right now on a repository you might

369
00:13:16,900 --> 00:13:20,019
have locally and coinbase slash Salus on

370
00:13:19,690 --> 00:13:22,989
the end

371
00:13:20,019 --> 00:13:26,589
that is sitting on docker hub right now

372
00:13:22,989 --> 00:13:27,790
so you can pull it directly so I'll

373
00:13:26,589 --> 00:13:29,410
actually just run through this commanded

374
00:13:27,790 --> 00:13:31,269
because that basically explains how

375
00:13:29,410 --> 00:13:32,738
everything works so docker run that's

376
00:13:31,269 --> 00:13:35,319
like your one dependency that you need

377
00:13:32,739 --> 00:13:37,299
to run this thing you will need doc Oh -

378
00:13:35,319 --> 00:13:39,429
sorry I'm just because I don't this

379
00:13:37,299 --> 00:13:43,209
container is irrelevant after it runs so

380
00:13:39,429 --> 00:13:44,589
you can delete it - tea so that you

381
00:13:43,209 --> 00:13:47,529
attach a terminal and you can see the

382
00:13:44,589 --> 00:13:49,959
output that's probably useful this - V

383
00:13:47,529 --> 00:13:51,549
is important this is volume in the

384
00:13:49,959 --> 00:13:53,709
current directory that you're in

385
00:13:51,549 --> 00:13:57,730
presumably you went to the directory you

386
00:13:53,709 --> 00:14:00,488
want to scan and whom slash repo is just

387
00:13:57,730 --> 00:14:02,679
a magic path that's where Salas expects

388
00:14:00,489 --> 00:14:05,079
to see the source code it's going to

389
00:14:02,679 --> 00:14:07,238
scan and so you volume in the repository

390
00:14:05,079 --> 00:14:08,649
and then it just executes in the docker

391
00:14:07,239 --> 00:14:10,989
file for this thing this is an entry

392
00:14:08,649 --> 00:14:14,019
point which kicks off the the Salas Ruby

393
00:14:10,989 --> 00:14:16,329
application so once you run this thing

394
00:14:14,019 --> 00:14:18,129
you get some text output and it kind of

395
00:14:16,329 --> 00:14:20,559
looks like this so I ran Sallis on

396
00:14:18,129 --> 00:14:22,059
itself actually and it decided to run

397
00:14:20,559 --> 00:14:24,219
bundle audit because it has some Ruby

398
00:14:22,059 --> 00:14:25,929
dependencies it passed it also happens

399
00:14:24,220 --> 00:14:27,939
to have some node dependencies so that

400
00:14:25,929 --> 00:14:29,259
passed pattern search I'll go over that

401
00:14:27,939 --> 00:14:31,660
in a minute but that's basically like

402
00:14:29,259 --> 00:14:33,459
grapple looking for anti-patterns you

403
00:14:31,660 --> 00:14:35,920
can define an arbitrary list of reg X's

404
00:14:33,459 --> 00:14:37,359
and if it finds them it could fail the

405
00:14:35,920 --> 00:14:41,709
build or if it doesn't find them and you

406
00:14:37,360 --> 00:14:43,929
require them it can fail the build repo

407
00:14:41,709 --> 00:14:49,109
not empty so we had this interesting

408
00:14:43,929 --> 00:14:51,699
case where due to some rather complex

409
00:14:49,110 --> 00:14:54,189
infrastructure issues which I won't go

410
00:14:51,699 --> 00:14:56,319
into there was this point where we

411
00:14:54,189 --> 00:14:58,540
accidentally scanned nothing we vol 2

412
00:14:56,319 --> 00:15:00,878
nothing into the repository and so Salas

413
00:14:58,540 --> 00:15:03,069
just passed on every possible run

414
00:15:00,879 --> 00:15:05,529
because it found no errors because there

415
00:15:03,069 --> 00:15:06,759
was nothing to scan so this test

416
00:15:05,529 --> 00:15:09,549
literally just checks that you have at

417
00:15:06,759 --> 00:15:11,049
least one file to scan strong defaults

418
00:15:09,549 --> 00:15:12,970
is something we like in security scanner

419
00:15:11,049 --> 00:15:14,589
land so we put that in there just to

420
00:15:12,970 --> 00:15:16,689
make sure if you accidentally miss

421
00:15:14,589 --> 00:15:20,679
configure something Salas will throw an

422
00:15:16,689 --> 00:15:21,969
error and then the last two things I'll

423
00:15:20,679 --> 00:15:24,339
speak about that as well a bit later but

424
00:15:21,970 --> 00:15:25,989
we found it very useful to also report

425
00:15:24,339 --> 00:15:27,459
all the dependencies that a project is

426
00:15:25,989 --> 00:15:29,439
using and we have a way to ship that

427
00:15:27,459 --> 00:15:31,299
into our logging pipeline and this

428
00:15:29,439 --> 00:15:33,410
should be easy with Salas to do and your

429
00:15:31,299 --> 00:15:35,209
infrastructure as well and then as

430
00:15:33,410 --> 00:15:37,490
have talked about if you know all the

431
00:15:35,209 --> 00:15:39,258
dependencies that are running across all

432
00:15:37,490 --> 00:15:41,480
your services it's then very easy to go

433
00:15:39,259 --> 00:15:45,769
into incident response mode once you get

434
00:15:41,480 --> 00:15:48,199
CVE that comes out so sort of recap of

435
00:15:45,769 --> 00:15:50,480
what I was saying Ruby application we'll

436
00:15:48,199 --> 00:15:51,979
start by initializing configuration and

437
00:15:50,480 --> 00:15:53,240
there's a lot of fancy things you can do

438
00:15:51,980 --> 00:15:56,420
with it so I'll go over a few of them in

439
00:15:53,240 --> 00:15:58,939
a minute it loops through each of its

440
00:15:56,420 --> 00:16:00,079
scanners that it knows about is it

441
00:15:58,939 --> 00:16:02,689
appropriate to run the scanner

442
00:16:00,079 --> 00:16:04,489
if yes run the scanner it then compiles

443
00:16:02,689 --> 00:16:07,579
all of the outputs of these things and

444
00:16:04,490 --> 00:16:09,470
puts them into a report and this will go

445
00:16:07,579 --> 00:16:12,290
to stand it up by default but you can

446
00:16:09,470 --> 00:16:14,629
also post that report in multiple

447
00:16:12,290 --> 00:16:16,250
different formats to an HTTP endpoint if

448
00:16:14,629 --> 00:16:18,110
you want so if you have an internal log

449
00:16:16,250 --> 00:16:19,790
consumer in your infrastructure you can

450
00:16:18,110 --> 00:16:21,500
send all your sales reports there and

451
00:16:19,790 --> 00:16:22,969
then depending on what you're running

452
00:16:21,500 --> 00:16:24,769
let's say you're running elasticsearch

453
00:16:22,970 --> 00:16:27,860
or something it can conveniently index

454
00:16:24,769 --> 00:16:29,240
everything and keep it there so that in

455
00:16:27,860 --> 00:16:32,360
the future if you're like oh wow there's

456
00:16:29,240 --> 00:16:34,519
a new open SSL bug who's using open SSL

457
00:16:32,360 --> 00:16:36,110
you just query elasticsearch and you'll

458
00:16:34,519 --> 00:16:39,040
find your sales reports and it will tell

459
00:16:36,110 --> 00:16:42,980
you which services are running open SSL

460
00:16:39,040 --> 00:16:46,519
and useful for CI pipelines it will exit

461
00:16:42,980 --> 00:16:48,800
zero if any issues have found usually a

462
00:16:46,519 --> 00:16:50,240
test suite if it sees something exit

463
00:16:48,800 --> 00:16:54,109
zero will just fail the whole build so

464
00:16:50,240 --> 00:16:55,970
it's useful for that so remember this

465
00:16:54,110 --> 00:16:57,829
situation I said I had a lot of code

466
00:16:55,970 --> 00:17:00,290
changes to make and we were scaling too

467
00:16:57,829 --> 00:17:02,779
quickly and I couldn't keep up and I was

468
00:17:00,290 --> 00:17:04,428
not happy about that so now with Salus I

469
00:17:02,779 --> 00:17:06,500
make one code change I have an internal

470
00:17:04,429 --> 00:17:08,150
Salus that everyone pulls into their

471
00:17:06,500 --> 00:17:09,829
test suite if I want to update something

472
00:17:08,150 --> 00:17:12,589
or test something I just change that one

473
00:17:09,829 --> 00:17:14,510
code base build the new Salus push it up

474
00:17:12,589 --> 00:17:16,760
to the registry and then everyone pulls

475
00:17:14,510 --> 00:17:19,879
that down so this is kind of what it

476
00:17:16,760 --> 00:17:21,140
looks like now container registry or the

477
00:17:19,880 --> 00:17:23,809
thing that's hosting the configuration

478
00:17:21,140 --> 00:17:25,579
file I'm happy now because I can make

479
00:17:23,809 --> 00:17:27,678
one change and roll that a crowd roll

480
00:17:25,579 --> 00:17:30,950
that across the whole fleet kind of

481
00:17:27,679 --> 00:17:32,690
instantly so that's that's like there's

482
00:17:30,950 --> 00:17:35,510
no massive magic here like all the

483
00:17:32,690 --> 00:17:37,280
scanners and not all but most of the

484
00:17:35,510 --> 00:17:39,350
scanners inside of salus are just other

485
00:17:37,280 --> 00:17:41,590
open-source projects this thing is all

486
00:17:39,350 --> 00:17:43,750
about how you coordinate that at scale

487
00:17:41,590 --> 00:17:47,149
so

488
00:17:43,750 --> 00:17:49,100
oh and actually sort of as an example we

489
00:17:47,150 --> 00:17:50,870
happen to run circle CI internally at

490
00:17:49,100 --> 00:17:53,120
coin base but you might be running

491
00:17:50,870 --> 00:17:56,600
Travis or some sort of other building

492
00:17:53,120 --> 00:17:58,399
platform if you are using circle this is

493
00:17:56,600 --> 00:18:00,620
a small piece of what they had these

494
00:17:58,400 --> 00:18:02,600
concepts called workflows so this is

495
00:18:00,620 --> 00:18:04,429
literally all you have to add to your

496
00:18:02,600 --> 00:18:06,559
circle file to run Salus in your

497
00:18:04,430 --> 00:18:08,210
infrastructure you just check out the

498
00:18:06,559 --> 00:18:09,500
code and then you run it and then this

499
00:18:08,210 --> 00:18:12,290
will run in parallel with all your other

500
00:18:09,500 --> 00:18:16,640
tests and then on your pull request you

501
00:18:12,290 --> 00:18:20,059
just get some some some statuses so this

502
00:18:16,640 --> 00:18:21,440
is again Sallis running on Salus but for

503
00:18:20,059 --> 00:18:23,149
this particular instance circle had

504
00:18:21,440 --> 00:18:25,760
three things to do run the linty rum

505
00:18:23,150 --> 00:18:27,679
Salus and rama tests and then if

506
00:18:25,760 --> 00:18:28,910
something was to fail you could then

507
00:18:27,679 --> 00:18:30,890
look at the details link

508
00:18:28,910 --> 00:18:32,900
Souths would have output that can then

509
00:18:30,890 --> 00:18:35,570
tell the developer what to do and I

510
00:18:32,900 --> 00:18:36,800
remember there was actually one of the

511
00:18:35,570 --> 00:18:38,960
speakers I think the first bigger the

512
00:18:36,800 --> 00:18:41,178
conference talked about how a lot of the

513
00:18:38,960 --> 00:18:43,490
scanner outputs sometimes make not much

514
00:18:41,179 --> 00:18:45,380
sense so Salas is sometimes an

515
00:18:43,490 --> 00:18:47,000
opportunity to to shim that away from

516
00:18:45,380 --> 00:18:48,700
the developer and put your own language

517
00:18:47,000 --> 00:18:53,030
in there to sort of help them fix

518
00:18:48,700 --> 00:18:55,040
self-service their issues so are going

519
00:18:53,030 --> 00:18:56,600
to sales configuration because when we

520
00:18:55,040 --> 00:18:58,399
first started working on sows there are

521
00:18:56,600 --> 00:19:01,129
a lot of reasons why we couldn't roll it

522
00:18:58,400 --> 00:19:03,460
out across every codebase and that

523
00:19:01,130 --> 00:19:05,240
probably also applies to different

524
00:19:03,460 --> 00:19:08,929
infrastructure and different

525
00:19:05,240 --> 00:19:11,390
organizations so my hope is that the all

526
00:19:08,929 --> 00:19:13,340
the pieces of configuration that you can

527
00:19:11,390 --> 00:19:14,809
use make it possible to use in your

528
00:19:13,340 --> 00:19:18,350
infrastructure and especially across

529
00:19:14,809 --> 00:19:20,120
every repository so as I said the first

530
00:19:18,350 --> 00:19:21,860
thing that is important to realize about

531
00:19:20,120 --> 00:19:24,830
the configuration is you can turn on and

532
00:19:21,860 --> 00:19:26,540
off scanners so by default every scanner

533
00:19:24,830 --> 00:19:27,889
that it has it will just run it if it

534
00:19:26,540 --> 00:19:30,080
seems appropriate and these are the ones

535
00:19:27,890 --> 00:19:33,350
that are currently supported Liz just

536
00:19:30,080 --> 00:19:35,750
spoke about gas forego which is great

537
00:19:33,350 --> 00:19:37,730
I'm just learning about it now probably

538
00:19:35,750 --> 00:19:40,130
tomorrow I will make a poor request into

539
00:19:37,730 --> 00:19:43,450
Salas to put gas in there so that can be

540
00:19:40,130 --> 00:19:45,320
rolled across the whole fleet as well so

541
00:19:43,450 --> 00:19:48,530
here are the scanners that exist right

542
00:19:45,320 --> 00:19:50,720
now everything will run by default but

543
00:19:48,530 --> 00:19:51,830
you can say don't run this thing I don't

544
00:19:50,720 --> 00:19:53,660
think it's a good scanner or whatever

545
00:19:51,830 --> 00:19:56,300
you can also choose what will actually

546
00:19:53,660 --> 00:19:59,900
fail the build if one of the particular

547
00:19:56,300 --> 00:20:02,928
scanners will fail so the way you would

548
00:19:59,900 --> 00:20:05,929
do that oh yeah each scanner also has

549
00:20:02,929 --> 00:20:11,150
the same configuration well so you have

550
00:20:05,929 --> 00:20:14,990
a config flag making the docker command

551
00:20:11,150 --> 00:20:16,400
slightly more complex you can give the

552
00:20:14,990 --> 00:20:17,290
config flag and just point to a

553
00:20:16,400 --> 00:20:19,790
particular file

554
00:20:17,290 --> 00:20:22,250
Salas configuration is just the llamo

555
00:20:19,790 --> 00:20:26,330
file and this will tell you well you can

556
00:20:22,250 --> 00:20:28,340
tell it what to run you can also if you

557
00:20:26,330 --> 00:20:29,750
just have a saddle sitting in your

558
00:20:28,340 --> 00:20:31,220
repository it will automatically look

559
00:20:29,750 --> 00:20:33,320
for that so that's an easy way to do it

560
00:20:31,220 --> 00:20:34,820
and if for some reason you would like to

561
00:20:33,320 --> 00:20:38,540
use an environment variable you can use

562
00:20:34,820 --> 00:20:40,070
that as well so basically his like a

563
00:20:38,540 --> 00:20:41,629
block of llaman which could be valid

564
00:20:40,070 --> 00:20:43,550
South's configuration you could say

565
00:20:41,630 --> 00:20:46,790
active scanners I only want you to run

566
00:20:43,550 --> 00:20:48,409
patent search and NPM audit and the only

567
00:20:46,790 --> 00:20:50,030
thing I'm going to enforce is patent

568
00:20:48,410 --> 00:20:52,000
search so only if one of the reg X's

569
00:20:50,030 --> 00:20:54,830
that I looked for maybe it was

570
00:20:52,000 --> 00:20:56,450
dangerously set innerhtml in a react

571
00:20:54,830 --> 00:20:59,060
application or something if you find

572
00:20:56,450 --> 00:21:02,000
that thing then you can lead to a non

573
00:20:59,060 --> 00:21:04,280
zero exit status and if npm what it

574
00:21:02,000 --> 00:21:05,750
happens to fail then for some reason you

575
00:21:04,280 --> 00:21:07,670
probably should care about that failing

576
00:21:05,750 --> 00:21:12,730
but if for some reason you didn't it

577
00:21:07,670 --> 00:21:15,770
wouldn't be enforced here cool that was

578
00:21:12,730 --> 00:21:17,390
more for local configuration but how can

579
00:21:15,770 --> 00:21:19,730
you do global configurations so as i

580
00:21:17,390 --> 00:21:22,100
said we like to know that the entire

581
00:21:19,730 --> 00:21:23,300
organization is adhering to some sort of

582
00:21:22,100 --> 00:21:25,100
security policy and some sort of

583
00:21:23,300 --> 00:21:27,230
standard so what you can do is also just

584
00:21:25,100 --> 00:21:29,360
host this llamo file at some end point

585
00:21:27,230 --> 00:21:31,580
like we could just be an s3 bucket it

586
00:21:29,360 --> 00:21:33,590
could be anywhere and sales will

587
00:21:31,580 --> 00:21:35,540
actually just pull the thing down from

588
00:21:33,590 --> 00:21:37,340
that URL and then pass that

589
00:21:35,540 --> 00:21:38,960
configuration in use that so this is a

590
00:21:37,340 --> 00:21:40,939
really easy way to sort of start

591
00:21:38,960 --> 00:21:43,130
upgrading things across the fleet the

592
00:21:40,940 --> 00:21:44,780
configuration file can also host these

593
00:21:43,130 --> 00:21:46,340
these ray X's let's say that it's

594
00:21:44,780 --> 00:21:49,428
looking for when it runs the pattern

595
00:21:46,340 --> 00:21:50,780
search scan so if you decide it turns

596
00:21:49,429 --> 00:21:52,370
out that a lot of our developers are

597
00:21:50,780 --> 00:21:55,910
making this one mistake over and over

598
00:21:52,370 --> 00:21:56,709
again they keep using I don't know they

599
00:21:55,910 --> 00:22:00,740
keep using

600
00:21:56,710 --> 00:22:02,660
backticks in Ruby to shell out to CD

601
00:22:00,740 --> 00:22:05,060
instead of just using cheddar which is a

602
00:22:02,660 --> 00:22:06,230
native thing you could use in Ruby so

603
00:22:05,060 --> 00:22:08,030
we're good now going to look for back

604
00:22:06,230 --> 00:22:09,140
ticks and if we see that we're going to

605
00:22:08,030 --> 00:22:10,549
flag it

606
00:22:09,140 --> 00:22:12,440
and you can put in custom error message

607
00:22:10,549 --> 00:22:15,230
in there as well so the developer knows

608
00:22:12,440 --> 00:22:16,580
what's wrong so this is this is what's

609
00:22:15,230 --> 00:22:19,850
what's really useful about these global

610
00:22:16,580 --> 00:22:21,260
security policies it's also especially

611
00:22:19,850 --> 00:22:24,199
useful if you want to test out something

612
00:22:21,260 --> 00:22:26,900
new so you might say we want to try this

613
00:22:24,200 --> 00:22:28,730
backtick example I just sort of gave but

614
00:22:26,900 --> 00:22:30,410
we don't know if this is going to just

615
00:22:28,730 --> 00:22:31,340
fail every build and every developer

616
00:22:30,410 --> 00:22:32,929
will get very angry

617
00:22:31,340 --> 00:22:35,330
so something I'm always cautious about

618
00:22:32,929 --> 00:22:37,880
whenever I changed Alice's will this

619
00:22:35,330 --> 00:22:40,280
actually break a lot of bills and then

620
00:22:37,880 --> 00:22:41,929
surprise lots of developers that's never

621
00:22:40,280 --> 00:22:44,030
a good position for your security team

622
00:22:41,929 --> 00:22:45,230
to be in because you always want your

623
00:22:44,030 --> 00:22:46,820
security team to be liked by your

624
00:22:45,230 --> 00:22:49,429
developers developers as much as

625
00:22:46,820 --> 00:22:51,620
possible so what you can do is put

626
00:22:49,429 --> 00:22:53,270
something in soft mode you launch it on

627
00:22:51,620 --> 00:22:55,549
this global configuration and you say if

628
00:22:53,270 --> 00:22:56,990
you find this tell me about it and put

629
00:22:55,549 --> 00:22:59,389
it in the report but you can let the

630
00:22:56,990 --> 00:23:00,890
bills continue and then you can collect

631
00:22:59,390 --> 00:23:03,080
all the metrics and just see if any

632
00:23:00,890 --> 00:23:04,880
repositories are failing if they are you

633
00:23:03,080 --> 00:23:06,710
can work with the developers to fix them

634
00:23:04,880 --> 00:23:08,299
and then when everything is green you

635
00:23:06,710 --> 00:23:10,610
can make this an official and forced to

636
00:23:08,299 --> 00:23:15,260
check and go forward and now everyone is

637
00:23:10,610 --> 00:23:17,209
is at this higher level so what happens

638
00:23:15,260 --> 00:23:18,320
if you have a global security policy but

639
00:23:17,210 --> 00:23:20,360
then it turns out one of the

640
00:23:18,320 --> 00:23:21,889
repositories must have an exception and

641
00:23:20,360 --> 00:23:24,350
this tends to happen a lot so for

642
00:23:21,890 --> 00:23:26,780
instance you might say thou shalt not

643
00:23:24,350 --> 00:23:28,939
deploy if there is a CVE in one of your

644
00:23:26,780 --> 00:23:30,620
dependencies but then there's just one

645
00:23:28,940 --> 00:23:33,290
repository over here it needs this

646
00:23:30,620 --> 00:23:35,389
package and there's no patch for it but

647
00:23:33,290 --> 00:23:37,970
it does have a CVE and you have

648
00:23:35,390 --> 00:23:39,679
definitely worked out that you're using

649
00:23:37,970 --> 00:23:41,270
the package in such a way that your

650
00:23:39,679 --> 00:23:44,270
application won't be vulnerable even

651
00:23:41,270 --> 00:23:46,160
though that there's a CV either if this

652
00:23:44,270 --> 00:23:47,960
is the case or there's one of many other

653
00:23:46,160 --> 00:23:50,120
cases that leads to exceptions in the

654
00:23:47,960 --> 00:23:54,080
rules you can actually concatenate these

655
00:23:50,120 --> 00:23:56,120
configuration files so you can have the

656
00:23:54,080 --> 00:23:58,939
global security policy be passed first

657
00:23:56,120 --> 00:24:00,379
and then a local configuration file can

658
00:23:58,940 --> 00:24:02,270
go on top of that which can include

659
00:24:00,380 --> 00:24:04,130
exceptions or overwrite pieces of the

660
00:24:02,270 --> 00:24:06,290
previous configuration so that you can

661
00:24:04,130 --> 00:24:08,000
still have Salus on every repository but

662
00:24:06,290 --> 00:24:09,710
still allow for these sort of like local

663
00:24:08,000 --> 00:24:11,960
exceptions here and there where it's

664
00:24:09,710 --> 00:24:13,730
necessary so this is something we use a

665
00:24:11,960 --> 00:24:15,040
lot to make sure that we can still

666
00:24:13,730 --> 00:24:18,500
maintain a hundred percent

667
00:24:15,040 --> 00:24:19,879
Sallis coverage but compliance sometimes

668
00:24:18,500 --> 00:24:22,120
needs gaps in the policies where

669
00:24:19,880 --> 00:24:22,120
appropriate

670
00:24:23,100 --> 00:24:30,669
so a custom Salas the Salas that is open

671
00:24:27,760 --> 00:24:32,140
source has scanners which we thought

672
00:24:30,670 --> 00:24:35,080
would be useful to many organizations

673
00:24:32,140 --> 00:24:36,610
and as I said we hope to expand this

674
00:24:35,080 --> 00:24:38,530
over time but it doesn't have some

675
00:24:36,610 --> 00:24:39,939
scanners that we probably use internally

676
00:24:38,530 --> 00:24:42,010
at coinbase which are not useful for

677
00:24:39,940 --> 00:24:43,450
anyone else and there may be some things

678
00:24:42,010 --> 00:24:45,670
you want to check for internally as well

679
00:24:43,450 --> 00:24:48,280
which may be more complex than just

680
00:24:45,670 --> 00:24:50,500
looking for regular expression maybe in

681
00:24:48,280 --> 00:24:51,820
actual scan scanner that you're going to

682
00:24:50,500 --> 00:24:54,670
run or you've built internally or

683
00:24:51,820 --> 00:24:56,590
something like that so it's very easy to

684
00:24:54,670 --> 00:25:00,160
customize house as well you can build

685
00:24:56,590 --> 00:25:02,139
your own Salas container with a docker

686
00:25:00,160 --> 00:25:04,030
file with just two lines in it basically

687
00:25:02,140 --> 00:25:06,460
you just write from coin they sell us

688
00:25:04,030 --> 00:25:08,080
and so that's the actual container that

689
00:25:06,460 --> 00:25:09,910
you're gonna be inheriting from and then

690
00:25:08,080 --> 00:25:12,040
you can copy in some arbitrary list of

691
00:25:09,910 --> 00:25:14,410
scanner files that you've written so

692
00:25:12,040 --> 00:25:16,210
this could be an example of one an

693
00:25:14,410 --> 00:25:19,630
example here is let's say you want to

694
00:25:16,210 --> 00:25:21,730
check that every docker file pins the

695
00:25:19,630 --> 00:25:24,400
SHA or pins the container that inherits

696
00:25:21,730 --> 00:25:27,430
from you could write a small bit of Ruby

697
00:25:24,400 --> 00:25:29,080
to check this logic and then you can

698
00:25:27,430 --> 00:25:31,180
just build a new container with that and

699
00:25:29,080 --> 00:25:33,220
south's will pick up your Ruby file and

700
00:25:31,180 --> 00:25:35,320
just execute it as part of the container

701
00:25:33,220 --> 00:25:37,240
so that's that's pretty useful like all

702
00:25:35,320 --> 00:25:38,830
you have to implement is the run command

703
00:25:37,240 --> 00:25:41,950
and the should run question mark command

704
00:25:38,830 --> 00:25:43,780
and all method enough you guys so it's

705
00:25:41,950 --> 00:25:45,280
highly configurable which is useful so

706
00:25:43,780 --> 00:25:47,080
we we have the irken source version and

707
00:25:45,280 --> 00:25:49,389
then we run an internal version with

708
00:25:47,080 --> 00:25:53,260
some coin based specific logic in it and

709
00:25:49,390 --> 00:25:55,420
one inherits from the other so I talked

710
00:25:53,260 --> 00:25:58,210
about custom error messages this is the

711
00:25:55,420 --> 00:26:01,090
output from the CVE checker in ruby

712
00:25:58,210 --> 00:26:04,210
bundle audit now to me because I've been

713
00:26:01,090 --> 00:26:05,350
working in security for a while all of

714
00:26:04,210 --> 00:26:06,490
this makes sense to me and it probably

715
00:26:05,350 --> 00:26:07,959
makes sense to everyone into the room

716
00:26:06,490 --> 00:26:09,700
but I know that a lot of developers

717
00:26:07,960 --> 00:26:11,980
sometimes get this error message and

718
00:26:09,700 --> 00:26:14,470
they're like what does this mean like

719
00:26:11,980 --> 00:26:17,080
what is CVE why am I being linked to

720
00:26:14,470 --> 00:26:18,550
Google Groups and like denial-of-service

721
00:26:17,080 --> 00:26:21,580
I've heard of but I don't know what it

722
00:26:18,550 --> 00:26:23,800
is so you can also use Sal's to wrap

723
00:26:21,580 --> 00:26:25,600
these messages kind of nicely and then

724
00:26:23,800 --> 00:26:27,960
give them next steps so maybe give them

725
00:26:25,600 --> 00:26:30,219
points of contact that they can speak to

726
00:26:27,960 --> 00:26:31,840
which is something else you might use

727
00:26:30,220 --> 00:26:33,650
sales for maybe purely just for the

728
00:26:31,840 --> 00:26:35,750
messaging point of view

729
00:26:33,650 --> 00:26:39,470
I think the better the messaging the

730
00:26:35,750 --> 00:26:41,030
more self-service your your your

731
00:26:39,470 --> 00:26:42,710
security can be for developers which

732
00:26:41,030 --> 00:26:45,790
gives you more time I think as a

733
00:26:42,710 --> 00:26:49,190
security team to focus on other issues

734
00:26:45,790 --> 00:26:52,129
so let's talk about Salas reports so

735
00:26:49,190 --> 00:26:54,830
Salas is pretty from a boost in the

736
00:26:52,130 --> 00:26:56,900
amount of data it collects it will

737
00:26:54,830 --> 00:26:58,639
firstly collect which scanners passed

738
00:26:56,900 --> 00:26:59,240
and failed that's probably important to

739
00:26:58,640 --> 00:27:01,040
know

740
00:26:59,240 --> 00:27:03,770
it also looks will collect any reasons

741
00:27:01,040 --> 00:27:06,320
that it fails as I mentioned before it

742
00:27:03,770 --> 00:27:08,389
also collects all the dependencies or at

743
00:27:06,320 --> 00:27:09,830
least looks at the name and the version

744
00:27:08,390 --> 00:27:11,660
and the source of each dependency that's

745
00:27:09,830 --> 00:27:14,960
being pulled into a project so I think

746
00:27:11,660 --> 00:27:16,940
right now that works for go Python Ruby

747
00:27:14,960 --> 00:27:18,830
and node so it collects all these

748
00:27:16,940 --> 00:27:21,680
dependencies makes a big list out of

749
00:27:18,830 --> 00:27:23,510
them it also just the report will also

750
00:27:21,680 --> 00:27:25,970
include the configuration that sounds

751
00:27:23,510 --> 00:27:28,070
used and then you can also tell it where

752
00:27:25,970 --> 00:27:29,570
to send this report so maybe as part of

753
00:27:28,070 --> 00:27:31,970
your build pipeline you want to create a

754
00:27:29,570 --> 00:27:34,580
text file - as an artifact maybe this is

755
00:27:31,970 --> 00:27:36,530
useful for the developer to look at but

756
00:27:34,580 --> 00:27:39,860
then you can also post these reports to

757
00:27:36,530 --> 00:27:41,360
some arbitrary endpoint don't don't send

758
00:27:39,860 --> 00:27:43,820
to this endpoint this is a made-up

759
00:27:41,360 --> 00:27:45,979
endpoint internal dotnet I don't know

760
00:27:43,820 --> 00:27:48,830
who owns that domain they probably don't

761
00:27:45,980 --> 00:27:50,720
want to receive your sales report but

762
00:27:48,830 --> 00:27:52,189
you could probably have an internal log

763
00:27:50,720 --> 00:27:54,560
consumer that you can send this thing to

764
00:27:52,190 --> 00:27:55,940
and it's I mean you can specify the

765
00:27:54,560 --> 00:27:57,530
format as Jason that's probably what

766
00:27:55,940 --> 00:28:00,650
you've won if it's an API but it could

767
00:27:57,530 --> 00:28:02,960
be Amal or it could be text and then

768
00:28:00,650 --> 00:28:04,610
once you consume these logs you can

769
00:28:02,960 --> 00:28:06,920
start to do lots of fancy instant

770
00:28:04,610 --> 00:28:08,689
response with it so as I said reports

771
00:28:06,920 --> 00:28:12,080
like by default standard out will be

772
00:28:08,690 --> 00:28:15,590
printed the text file that might be used

773
00:28:12,080 --> 00:28:18,409
for a CI artifact and then this is good

774
00:28:15,590 --> 00:28:21,230
for remote consumption on the left you

775
00:28:18,410 --> 00:28:22,910
see a text blob which is maybe what the

776
00:28:21,230 --> 00:28:24,890
text Apple would look like and on the

777
00:28:22,910 --> 00:28:26,480
right side is just a piece of it's the

778
00:28:24,890 --> 00:28:28,610
equivalent report but just in JSON

779
00:28:26,480 --> 00:28:30,020
format and then the useful thing is once

780
00:28:28,610 --> 00:28:32,110
you ingest this thing into your log

781
00:28:30,020 --> 00:28:35,120
pipeline you can look at things like

782
00:28:32,110 --> 00:28:37,399
which dependencies are we using and so

783
00:28:35,120 --> 00:28:39,800
as I said so we run Kabana on top of our

784
00:28:37,400 --> 00:28:41,270
elasticsearch cluster and this allows us

785
00:28:39,800 --> 00:28:44,090
to easily query who's using what

786
00:28:41,270 --> 00:28:46,379
dependencies if a new CDE came out or if

787
00:28:44,090 --> 00:28:47,490
we worked out that

788
00:28:46,380 --> 00:28:49,289
maybe there's a new type of

789
00:28:47,490 --> 00:28:52,380
vulnerability in rails and only the

790
00:28:49,289 --> 00:28:54,059
latest version of break man happens to

791
00:28:52,380 --> 00:28:56,309
look for that vulnerability we can

792
00:28:54,059 --> 00:28:58,110
quickly query which rails applications

793
00:28:56,309 --> 00:28:59,340
are not using the latest Salus and

794
00:28:58,110 --> 00:29:01,019
haven't checked for this thing yet and

795
00:28:59,340 --> 00:29:03,928
then we can easily move into instant

796
00:29:01,019 --> 00:29:07,230
response mode so that's that's very

797
00:29:03,929 --> 00:29:09,929
helpful for those sorts of things so

798
00:29:07,230 --> 00:29:11,610
other resources you can look at we as I

799
00:29:09,929 --> 00:29:13,409
said we recently reckon sauce this thing

800
00:29:11,610 --> 00:29:17,070
you can go to coinbase slash Salus on

801
00:29:13,409 --> 00:29:19,409
github you can find it and as I said on

802
00:29:17,070 --> 00:29:23,730
taco hub the the thing is hosted so you

803
00:29:19,409 --> 00:29:25,080
could build it and run it and if your

804
00:29:23,730 --> 00:29:26,429
security conscious that's probably a

805
00:29:25,080 --> 00:29:29,250
better thing to do then just pulling it

806
00:29:26,429 --> 00:29:30,629
from docker hub because you're not

807
00:29:29,250 --> 00:29:32,850
really guaranteed of the supply chain

808
00:29:30,629 --> 00:29:34,469
there but if you want you can just pull

809
00:29:32,850 --> 00:29:35,908
it from docker hub or you can pull it

810
00:29:34,470 --> 00:29:37,980
from docker hub into a registry and then

811
00:29:35,909 --> 00:29:41,789
just pull that thing down that's

812
00:29:37,980 --> 00:29:44,059
probably the most secure practice and we

813
00:29:41,789 --> 00:29:47,059
recently launched blog post about I

814
00:29:44,059 --> 00:29:49,080
guess releasing this product you can

815
00:29:47,059 --> 00:29:51,120
read that blog post if you missed

816
00:29:49,080 --> 00:29:54,570
anything in my talk roughly the same

817
00:29:51,120 --> 00:29:56,518
information so a bit of a summary last

818
00:29:54,570 --> 00:29:58,889
Seles useful something you can inject

819
00:29:56,519 --> 00:30:01,379
into your CI pipeline if everyone just

820
00:29:58,889 --> 00:30:03,120
includes Salus once you can now roll

821
00:30:01,379 --> 00:30:04,709
things out across the whole fleet with a

822
00:30:03,120 --> 00:30:06,719
single configuration change or a single

823
00:30:04,710 --> 00:30:09,000
code change to the south's container

824
00:30:06,720 --> 00:30:10,799
which is very useful that keeps your

825
00:30:09,000 --> 00:30:12,570
security team happy and light and

826
00:30:10,799 --> 00:30:15,149
scalable and gives them lots of metrics

827
00:30:12,570 --> 00:30:16,230
and it also still ensures that you have

828
00:30:15,149 --> 00:30:17,580
that tight feedback loop with your

829
00:30:16,230 --> 00:30:19,440
developer and I think you can actually

830
00:30:17,580 --> 00:30:21,299
improve that feedback loop with your

831
00:30:19,440 --> 00:30:22,889
developer because you get the ability or

832
00:30:21,299 --> 00:30:24,690
you have the chance to inject custom

833
00:30:22,889 --> 00:30:28,019
messaging in there which can sometimes

834
00:30:24,690 --> 00:30:29,460
be very useful final note I just want to

835
00:30:28,019 --> 00:30:31,679
say thank you to the open source

836
00:30:29,460 --> 00:30:33,809
developers which make these scanners we

837
00:30:31,679 --> 00:30:36,600
leverage a lot of open source software

838
00:30:33,809 --> 00:30:39,960
in general I think most companies do but

839
00:30:36,600 --> 00:30:41,428
the amount of I say additional speed or

840
00:30:39,960 --> 00:30:43,830
comfort we get from these open source

841
00:30:41,429 --> 00:30:45,809
scanners is tremendous so huge shout-out

842
00:30:43,830 --> 00:30:47,158
to the people who make those things Ryan

843
00:30:45,809 --> 00:30:48,960
Adam and Slava helped me build this

844
00:30:47,159 --> 00:30:50,220
thing so I thank them a lot and deficit

845
00:30:48,960 --> 00:30:53,220
corner organisers for making such a

846
00:30:50,220 --> 00:30:54,480
great conference cool that was pretty

847
00:30:53,220 --> 00:30:57,980
fast I actually have nine minutes for

848
00:30:54,480 --> 00:30:57,980
questions anyone has anything

849
00:31:03,980 --> 00:31:14,560
any questions no sweetie yeah thanks so

850
00:31:13,399 --> 00:31:18,379
much

851
00:31:14,560 --> 00:31:18,379
[Applause]

