1
00:00:00,480 --> 00:00:03,959
I'm going to add our next speaker in and

2
00:00:03,959 --> 00:00:06,660
I'm going to go and try the pronouncing

3
00:00:06,660 --> 00:00:08,820
the Polish pronunciation here it's the

4
00:00:08,820 --> 00:00:10,099
bishek

5
00:00:10,099 --> 00:00:14,120
very nice awesome

6
00:00:15,420 --> 00:00:17,060
guys

7
00:00:17,060 --> 00:00:19,560
if you're a good friend that also works

8
00:00:19,560 --> 00:00:23,460
right yeah all English speakers uh

9
00:00:23,460 --> 00:00:25,140
please use just the first two letters

10
00:00:25,140 --> 00:00:26,400
I'm not gonna put you through

11
00:00:26,400 --> 00:00:30,140
pronouncing that on daily basis

12
00:00:30,140 --> 00:00:33,300
if you'd like to share your screen

13
00:00:33,300 --> 00:00:36,780
um sure you all set up and ready to go

14
00:00:36,780 --> 00:00:38,960
yep

15
00:00:38,960 --> 00:00:43,200
oh yeah let's choose this one and you

16
00:00:43,200 --> 00:00:46,079
should see my slides now

17
00:00:46,079 --> 00:00:48,600
yeah we got you there so let's uh let's

18
00:00:48,600 --> 00:00:51,120
back on and Lauren and I will uh move

19
00:00:51,120 --> 00:00:54,539
ourselves out and uh the floor is yours

20
00:00:54,539 --> 00:00:57,680
okay thank you

21
00:00:57,719 --> 00:00:59,879
yes I'm running code from the internet

22
00:00:59,879 --> 00:01:03,300
and what can you do about it

23
00:01:03,300 --> 00:01:06,540
um so imagine I offered you a string of

24
00:01:06,540 --> 00:01:09,780
text that pretty much looks like uh

25
00:01:09,780 --> 00:01:11,820
written in JavaScript would you put that

26
00:01:11,820 --> 00:01:14,820
in your application and run it

27
00:01:14,820 --> 00:01:18,479
yeah would you do that if I offered it

28
00:01:18,479 --> 00:01:20,640
as a tar gz file

29
00:01:20,640 --> 00:01:22,680
does that help

30
00:01:22,680 --> 00:01:25,619
I guess so because that's what an npm

31
00:01:25,619 --> 00:01:29,040
package is and everyone keeps uh chewing

32
00:01:29,040 --> 00:01:33,360
on them every day day in day out uh we

33
00:01:33,360 --> 00:01:35,700
do that a lot and I just wanted to make

34
00:01:35,700 --> 00:01:38,340
sure that you understand uh npm packages

35
00:01:38,340 --> 00:01:42,360
are just bits of code in atar gz file uh

36
00:01:42,360 --> 00:01:44,520
and these are inputs from the internet

37
00:01:44,520 --> 00:01:48,119
that everyone tells you to sanitize do

38
00:01:48,119 --> 00:01:50,399
you sanitize your npm packages

39
00:01:50,399 --> 00:01:51,180
um

40
00:01:51,180 --> 00:01:54,659
good question right probably don't uh

41
00:01:54,659 --> 00:01:57,180
we're just taking them and gobbling them

42
00:01:57,180 --> 00:01:59,939
up and don't get me wrong I do that as

43
00:01:59,939 --> 00:02:02,460
well and I love it I've been doing that

44
00:02:02,460 --> 00:02:05,759
for a while actually the this uh this

45
00:02:05,759 --> 00:02:07,380
animation a previous version of this

46
00:02:07,380 --> 00:02:08,639
animation

47
00:02:08,639 --> 00:02:10,560
um

48
00:02:10,560 --> 00:02:13,920
is something I showed uh uh a while back

49
00:02:13,920 --> 00:02:17,640
on a different snake event uh before I

50
00:02:17,640 --> 00:02:20,819
even joined lava mode uh and this talk

51
00:02:20,819 --> 00:02:23,940
is gonna mention lava mode so uh it's

52
00:02:23,940 --> 00:02:26,040
it's been a journey I first started

53
00:02:26,040 --> 00:02:29,160
looking into uh what bad can happen

54
00:02:29,160 --> 00:02:33,180
around 2015 uh and the number of bad

55
00:02:33,180 --> 00:02:34,440
things that can happen was just

56
00:02:34,440 --> 00:02:37,800
increasing so let's not focus on

57
00:02:37,800 --> 00:02:39,900
vulnerable dependencies this time let's

58
00:02:39,900 --> 00:02:43,260
focus on malicious dependencies uh there

59
00:02:43,260 --> 00:02:46,080
can be different types of malicious

60
00:02:46,080 --> 00:02:48,060
dependencies attacking you at different

61
00:02:48,060 --> 00:02:51,959
points of your obligations life cycle so

62
00:02:51,959 --> 00:02:56,220
uh let's now think about what bad things

63
00:02:56,220 --> 00:02:58,980
can happen either

64
00:02:58,980 --> 00:03:03,300
delayed slightly or right away

65
00:03:03,300 --> 00:03:06,540
um yeah story time this is going to be a

66
00:03:06,540 --> 00:03:09,060
story where you meet Dave who's a

67
00:03:09,060 --> 00:03:12,120
software engineer and you meet Anon

68
00:03:12,120 --> 00:03:16,220
who's a malicious hacker

69
00:03:16,500 --> 00:03:19,739
Dave has a project Dave decides to

70
00:03:19,739 --> 00:03:22,560
install some dependencies obviously

71
00:03:22,560 --> 00:03:25,739
um npm install yarn install

72
00:03:25,739 --> 00:03:29,400
uh yeah let's let's get them rolling

73
00:03:29,400 --> 00:03:33,900
Anon happens to control one of the

74
00:03:33,900 --> 00:03:35,400
packages somewhere deep in the

75
00:03:35,400 --> 00:03:38,400
dependency tree through some typo

76
00:03:38,400 --> 00:03:40,799
squatting maybe a maintainer of

77
00:03:40,799 --> 00:03:44,040
something vaguely useful uh installed a

78
00:03:44,040 --> 00:03:46,739
package that seems to be what they

79
00:03:46,739 --> 00:03:48,599
wanted but they kind of installed it and

80
00:03:48,599 --> 00:03:50,400
forgot it's not being used but it's

81
00:03:50,400 --> 00:03:52,319
there right

82
00:03:52,319 --> 00:03:56,099
so what would they think uh

83
00:03:56,099 --> 00:03:59,700
I'm not running that right uh

84
00:03:59,700 --> 00:04:02,220
I'm just running my application in my

85
00:04:02,220 --> 00:04:05,340
build I'm not running your package well

86
00:04:05,340 --> 00:04:08,519
that's what you think replies Anon

87
00:04:08,519 --> 00:04:09,720
because

88
00:04:09,720 --> 00:04:13,200
Anna knows about life cycle scripts

89
00:04:13,200 --> 00:04:14,640
right

90
00:04:14,640 --> 00:04:16,918
um and I guess everyone listening to

91
00:04:16,918 --> 00:04:18,899
this already knows where this is going

92
00:04:18,899 --> 00:04:21,418
about life cycle Scripts

93
00:04:21,418 --> 00:04:24,419
so then Dave decides to defend against

94
00:04:24,419 --> 00:04:28,620
uh post install by spawning a new

95
00:04:28,620 --> 00:04:29,940
container

96
00:04:29,940 --> 00:04:32,400
uh running installation there instead of

97
00:04:32,400 --> 00:04:35,100
the main CI process taking node modules

98
00:04:35,100 --> 00:04:37,680
and storing them somewhere and then

99
00:04:37,680 --> 00:04:40,560
destroying the container so Dave assumes

100
00:04:40,560 --> 00:04:43,979
now there's nothing the evil hacker can

101
00:04:43,979 --> 00:04:45,600
do

102
00:04:45,600 --> 00:04:48,419
well that's not what the evil hacker is

103
00:04:48,419 --> 00:04:52,500
thinking now so the evil hacker takes a

104
00:04:52,500 --> 00:04:55,560
post-install script and runs a bit more

105
00:04:55,560 --> 00:04:56,780
code

106
00:04:56,780 --> 00:05:00,300
that finds typescript and delivers a

107
00:05:00,300 --> 00:05:03,080
payload into the typescript compilers

108
00:05:03,080 --> 00:05:06,660
compiled sources and node modules and

109
00:05:06,660 --> 00:05:08,460
now when you transfer node modules away

110
00:05:08,460 --> 00:05:10,740
You're Still vulnerable because this

111
00:05:10,740 --> 00:05:13,560
typescript compiler turned evil this is

112
00:05:13,560 --> 00:05:15,600
what I've been showing uh way back so if

113
00:05:15,600 --> 00:05:17,340
you want a demo there's a demo of this

114
00:05:17,340 --> 00:05:20,699
uh check my earlier presentations

115
00:05:20,699 --> 00:05:21,360
um

116
00:05:21,360 --> 00:05:24,539
now this I hope you also know you can

117
00:05:24,539 --> 00:05:27,660
ignore scripts with npm and yarn uh you

118
00:05:27,660 --> 00:05:29,820
can ignore post install scripts and all

119
00:05:29,820 --> 00:05:31,620
the life cycle

120
00:05:31,620 --> 00:05:34,440
and then you end up with a dilemma so I

121
00:05:34,440 --> 00:05:36,419
have a dependency that really needs the

122
00:05:36,419 --> 00:05:38,699
lifecycle script what do I do then well

123
00:05:38,699 --> 00:05:42,120
I run npm rebuild B Crypt because bcrypt

124
00:05:42,120 --> 00:05:44,940
needs to be built for it to work in my

125
00:05:44,940 --> 00:05:47,160
application right

126
00:05:47,160 --> 00:05:51,120
and that's what Anon was counting

127
00:05:51,120 --> 00:05:53,520
that Dave would do

128
00:05:53,520 --> 00:05:56,280
because uh

129
00:05:56,280 --> 00:05:57,780
npm

130
00:05:57,780 --> 00:06:02,240
CLI and the rncli and other clis they

131
00:06:02,240 --> 00:06:05,940
trust packages to call themselves what

132
00:06:05,940 --> 00:06:08,340
they are actually called sometimes

133
00:06:08,340 --> 00:06:10,320
so you know it's kind of hard to replace

134
00:06:10,320 --> 00:06:13,259
bcrypt on npm but you don't have to

135
00:06:13,259 --> 00:06:15,660
replace it on npm you can replace it in

136
00:06:15,660 --> 00:06:17,820
your own packages dependencies with

137
00:06:17,820 --> 00:06:20,039
anything that doesn't go through

138
00:06:20,039 --> 00:06:23,940
scrutiny like abundant dependency

139
00:06:23,940 --> 00:06:26,520
oopsie

140
00:06:26,520 --> 00:06:29,340
Dave is surprised

141
00:06:29,340 --> 00:06:32,400
um what could Dave do in that situation

142
00:06:32,400 --> 00:06:35,520
other than exclaiming profanity

143
00:06:35,520 --> 00:06:39,000
um well Dave can uh look for a tool that

144
00:06:39,000 --> 00:06:40,139
could help him

145
00:06:40,139 --> 00:06:43,319
and that's where lavamote comes in

146
00:06:43,319 --> 00:06:47,880
um so lava modes uh helps you set up and

147
00:06:47,880 --> 00:06:50,880
drive your repository in a way that the

148
00:06:50,880 --> 00:06:54,720
scripts that Anon was using are no

149
00:06:54,720 --> 00:06:57,720
longer working so when you set up uh

150
00:06:57,720 --> 00:07:01,139
allow scripts you get npmrc with ignore

151
00:07:01,139 --> 00:07:05,039
scripts permanently enabled and then the

152
00:07:05,039 --> 00:07:08,280
auto generation command will give you

153
00:07:08,280 --> 00:07:10,139
policies that you can edit in your

154
00:07:10,139 --> 00:07:11,400
packet Json

155
00:07:11,400 --> 00:07:13,560
so we can see that there's a bunch of

156
00:07:13,560 --> 00:07:15,960
stuff in there and you can decide by

157
00:07:15,960 --> 00:07:17,880
setting them to true that you want this

158
00:07:17,880 --> 00:07:19,440
particular thing to work

159
00:07:19,440 --> 00:07:22,259
and the benefit of using allow scripts

160
00:07:22,259 --> 00:07:26,220
is that it differentiates packages

161
00:07:26,220 --> 00:07:29,520
so uh it will notice the difference

162
00:07:29,520 --> 00:07:32,160
between bcrypt and something deeply

163
00:07:32,160 --> 00:07:34,199
nested as a bundle dependency that

164
00:07:34,199 --> 00:07:36,840
happens to call itself decrypt and you

165
00:07:36,840 --> 00:07:38,400
will get two entries and you can decide

166
00:07:38,400 --> 00:07:40,500
which of them should work

167
00:07:40,500 --> 00:07:42,599
now

168
00:07:42,599 --> 00:07:46,319
that's not the end uh so if you've been

169
00:07:46,319 --> 00:07:47,580
following news

170
00:07:47,580 --> 00:07:51,180
and Annan was following news uh socket

171
00:07:51,180 --> 00:07:55,319
security published uh this new trick

172
00:07:55,319 --> 00:07:56,639
where

173
00:07:56,639 --> 00:07:59,819
you can decide that the command you

174
00:07:59,819 --> 00:08:02,400
expose from your package instead of

175
00:08:02,400 --> 00:08:05,759
being called like TSC for example which

176
00:08:05,759 --> 00:08:07,259
is common for a typescript right you

177
00:08:07,259 --> 00:08:10,319
should know that you can decide that the

178
00:08:10,319 --> 00:08:12,539
command you're exposing is called npm or

179
00:08:12,539 --> 00:08:17,160
node and that's going to resolve in the

180
00:08:17,160 --> 00:08:20,220
scripts you run from your packet Json

181
00:08:20,220 --> 00:08:23,220
right so when you do npm run lint

182
00:08:23,220 --> 00:08:25,620
with this evil package installed it's

183
00:08:25,620 --> 00:08:29,039
going to run the evil plots JS file that

184
00:08:29,039 --> 00:08:31,979
was named npm by the designer of the

185
00:08:31,979 --> 00:08:33,299
package

186
00:08:33,299 --> 00:08:36,120
well that's not good but

187
00:08:36,120 --> 00:08:38,940
if you continue reading uh the readme

188
00:08:38,940 --> 00:08:41,520
file on allow scripts you will notice

189
00:08:41,520 --> 00:08:45,240
that allow scripts is introducing an

190
00:08:45,240 --> 00:08:47,940
experimental feature where it can also

191
00:08:47,940 --> 00:08:51,779
control linking bins and not just the

192
00:08:51,779 --> 00:08:55,440
post install scripts so just a matter of

193
00:08:55,440 --> 00:08:59,100
a tiny change here and there to control

194
00:08:59,100 --> 00:09:01,860
that as well and if you want to demo

195
00:09:01,860 --> 00:09:05,399
there's a demo of that check out the

196
00:09:05,399 --> 00:09:09,300
original article from socket.dev

197
00:09:09,300 --> 00:09:13,860
all right so uh what now well Anon is

198
00:09:13,860 --> 00:09:16,140
upset because npm said it was a feature

199
00:09:16,140 --> 00:09:17,940
that they couldn't break and now people

200
00:09:17,940 --> 00:09:21,180
are breaking that feature and not

201
00:09:21,180 --> 00:09:22,800
allowing him to take over the

202
00:09:22,800 --> 00:09:24,360
repositories

203
00:09:24,360 --> 00:09:28,620
that's not good well that marks uh the

204
00:09:28,620 --> 00:09:31,560
end of the first chapter of our story so

205
00:09:31,560 --> 00:09:33,959
and in that moment

206
00:09:33,959 --> 00:09:38,399
we can say the installation process uh

207
00:09:38,399 --> 00:09:40,980
was protected

208
00:09:40,980 --> 00:09:42,959
um at least from the malicious scripts

209
00:09:42,959 --> 00:09:45,899
right there's a bunch of other things we

210
00:09:45,899 --> 00:09:48,300
could talk about but we won't uh let's

211
00:09:48,300 --> 00:09:51,480
focus on a more serious threat where

212
00:09:51,480 --> 00:09:54,300
Anon is going to put a bit more effort

213
00:09:54,300 --> 00:09:57,060
into getting into your dependencies and

214
00:09:57,060 --> 00:09:58,380
find

215
00:09:58,380 --> 00:10:00,839
something that you actually use

216
00:10:00,839 --> 00:10:03,180
that they can take over

217
00:10:03,180 --> 00:10:06,420
so now this gets more serious because

218
00:10:06,420 --> 00:10:09,000
you're running code so

219
00:10:09,000 --> 00:10:11,339
Anna introduces

220
00:10:11,339 --> 00:10:15,600
a bit of bad code into the package

221
00:10:15,600 --> 00:10:17,820
uh would you

222
00:10:17,820 --> 00:10:21,360
look into your node modules to find it

223
00:10:21,360 --> 00:10:24,720
well there's a bunch of tools uh not

224
00:10:24,720 --> 00:10:27,060
excluding Snick obviously Snick also

225
00:10:27,060 --> 00:10:29,640
does that uh that go through

226
00:10:29,640 --> 00:10:33,060
all of the code in your dependencies to

227
00:10:33,060 --> 00:10:36,018
find these things

228
00:10:38,120 --> 00:10:41,940
but I don't goes further and obfuscates

229
00:10:41,940 --> 00:10:44,100
the code well is this obfuscation good

230
00:10:44,100 --> 00:10:47,399
enough uh are you still reading well it

231
00:10:47,399 --> 00:10:50,600
still says https and GitHub token okay

232
00:10:50,600 --> 00:10:53,040
let's go further

233
00:10:53,040 --> 00:10:54,899
should I keep going I can keep going

234
00:10:54,899 --> 00:10:58,740
this is the same code but uh with the

235
00:10:58,740 --> 00:11:01,820
heavy obfuscation which is now 70

236
00:11:01,820 --> 00:11:05,279
kilobytes uh of just JavaScript and it

237
00:11:05,279 --> 00:11:09,540
runs uh if you try to de-obfuscate it it

238
00:11:09,540 --> 00:11:11,760
stops running so it's a bit harder to

239
00:11:11,760 --> 00:11:13,040
figure out

240
00:11:13,040 --> 00:11:14,880
and this

241
00:11:14,880 --> 00:11:18,240
is what people do there's packages like

242
00:11:18,240 --> 00:11:21,779
if you if you look up loafy gang uh one

243
00:11:21,779 --> 00:11:23,820
of the recent exploits

244
00:11:23,820 --> 00:11:26,820
they publish packages that are had four

245
00:11:26,820 --> 00:11:31,980
layers of obfuscation okay but

246
00:11:31,980 --> 00:11:35,519
yes there's an app for that uh

247
00:11:35,519 --> 00:11:38,519
well they've already found lava mode and

248
00:11:38,519 --> 00:11:41,220
allows Crypts uh it's just a tiny tool

249
00:11:41,220 --> 00:11:43,740
the main functionality of lava mode that

250
00:11:43,740 --> 00:11:45,540
I want to focus on here

251
00:11:45,540 --> 00:11:48,060
is runtime protections

252
00:11:48,060 --> 00:11:50,579
um so what you need to do is you need to

253
00:11:50,579 --> 00:11:54,180
generate a policy for your code

254
00:11:54,180 --> 00:11:57,240
running in this case let's look at a

255
00:11:57,240 --> 00:12:00,480
build script so we have build.js that we

256
00:12:00,480 --> 00:12:01,500
run

257
00:12:01,500 --> 00:12:03,959
and we now instead of doing node

258
00:12:03,959 --> 00:12:07,140
build.js do lava mode built JS and then

259
00:12:07,140 --> 00:12:08,940
we have a command for generating the

260
00:12:08,940 --> 00:12:10,260
policy

261
00:12:10,260 --> 00:12:11,940
and the policy kind of looks something

262
00:12:11,940 --> 00:12:13,880
like this this is a small section

263
00:12:13,880 --> 00:12:18,060
assuming uh the evil package was clear

264
00:12:18,060 --> 00:12:20,820
not obfuscated this is what you would

265
00:12:20,820 --> 00:12:23,820
see for that Evo package is code so we

266
00:12:23,820 --> 00:12:27,060
say uh request from https module from

267
00:12:27,060 --> 00:12:30,899
built-ins is used and process.n from

268
00:12:30,899 --> 00:12:35,220
globals is being used okay so now I can

269
00:12:35,220 --> 00:12:36,740
override anything

270
00:12:36,740 --> 00:12:40,200
by just saying false or if the package

271
00:12:40,200 --> 00:12:44,639
was obfuscated the initials can uh to

272
00:12:44,639 --> 00:12:48,240
generate the policy would not find the

273
00:12:48,240 --> 00:12:50,820
usage and what's great about what

274
00:12:50,820 --> 00:12:55,019
happens next is that we only read the

275
00:12:55,019 --> 00:12:59,279
code with some asts from lava mode when

276
00:12:59,279 --> 00:13:01,320
generating the policy but when the

277
00:13:01,320 --> 00:13:03,720
policy is applied

278
00:13:03,720 --> 00:13:04,980
well

279
00:13:04,980 --> 00:13:07,800
that happens on the level of the

280
00:13:07,800 --> 00:13:10,860
language itself so now when you run

281
00:13:10,860 --> 00:13:13,139
build

282
00:13:13,139 --> 00:13:15,540
you will get an error saying evil

283
00:13:15,540 --> 00:13:18,360
package requested https

284
00:13:18,360 --> 00:13:22,200
and that was not in the policy so

285
00:13:22,200 --> 00:13:26,760
require https we'll throw an error

286
00:13:26,760 --> 00:13:28,079
um if that's not the first thing

287
00:13:28,079 --> 00:13:30,120
happening well you might get a different

288
00:13:30,120 --> 00:13:32,279
error that says type error could not

289
00:13:32,279 --> 00:13:35,279
read end from undefined because you know

290
00:13:35,279 --> 00:13:38,160
what process is not one of the globals

291
00:13:38,160 --> 00:13:40,139
available to this particular package

292
00:13:40,139 --> 00:13:42,540
meanwhile everything else could have

293
00:13:42,540 --> 00:13:46,560
access to process and use it

294
00:13:46,560 --> 00:13:49,320
wait how how is this done that's

295
00:13:49,320 --> 00:13:52,500
impossible right uh every package has

296
00:13:52,500 --> 00:13:55,920
different globals well let's take a peek

297
00:13:55,920 --> 00:13:57,120
inside

298
00:13:57,120 --> 00:14:00,959
okay story's over now we get into what's

299
00:14:00,959 --> 00:14:02,600
behind lava mode

300
00:14:02,600 --> 00:14:06,240
and the main technology behind lava mode

301
00:14:06,240 --> 00:14:08,899
is cess uh short for secure ecmascript

302
00:14:08,899 --> 00:14:12,180
uh this is a tool that allows putting

303
00:14:12,180 --> 00:14:15,920
each package in its own compartment

304
00:14:15,920 --> 00:14:19,680
which is a box that lets you define how

305
00:14:19,680 --> 00:14:24,000
things are loaded and most of all which

306
00:14:24,000 --> 00:14:27,000
globals are going to be available

307
00:14:27,000 --> 00:14:29,820
so every compartment gets a different

308
00:14:29,820 --> 00:14:34,200
object to be their globals if we want to

309
00:14:34,200 --> 00:14:36,959
and the best thing is compartments are

310
00:14:36,959 --> 00:14:40,199
becoming part of the language so there's

311
00:14:40,199 --> 00:14:42,660
work in dc39 to put compartments into

312
00:14:42,660 --> 00:14:44,399
the language with all the functionality

313
00:14:44,399 --> 00:14:48,420
necessary uh for spinning them up

314
00:14:48,420 --> 00:14:49,019
um

315
00:14:49,019 --> 00:14:53,459
it's still early so yeah we won't be

316
00:14:53,459 --> 00:14:58,079
able to get an update on your browser or

317
00:14:58,079 --> 00:15:00,480
node.js tomorrow and get this feature

318
00:15:00,480 --> 00:15:03,959
but it's being worked on and it will get

319
00:15:03,959 --> 00:15:06,060
into the language eventually

320
00:15:06,060 --> 00:15:10,500
now SAS consists of three major things

321
00:15:10,500 --> 00:15:12,180
so there's compartment for scope

322
00:15:12,180 --> 00:15:14,699
isolation there's lockdown

323
00:15:14,699 --> 00:15:16,860
which

324
00:15:16,860 --> 00:15:20,639
makes your entire realm or as V8 people

325
00:15:20,639 --> 00:15:23,220
like to call it context secure this

326
00:15:23,220 --> 00:15:26,040
means no more prototype pollution

327
00:15:26,040 --> 00:15:27,779
attacks that you could use to escape

328
00:15:27,779 --> 00:15:32,040
your compartment and then Harden is for

329
00:15:32,040 --> 00:15:34,079
use with the actual program when you

330
00:15:34,079 --> 00:15:38,399
want an object from your program that

331
00:15:38,399 --> 00:15:41,820
you pass into a different piece of code

332
00:15:41,820 --> 00:15:44,880
that you don't trust to not be

333
00:15:44,880 --> 00:15:47,579
modifiable okay

334
00:15:47,579 --> 00:15:51,600
wait uh so JavaScript is being designed

335
00:15:51,600 --> 00:15:53,699
to be secure

336
00:15:53,699 --> 00:15:57,180
well no JavaScript is

337
00:15:57,180 --> 00:15:59,279
it just happens to be a good design for

338
00:15:59,279 --> 00:16:02,040
security uh because the language itself

339
00:16:02,040 --> 00:16:04,920
is standardized with ecmas tc389

340
00:16:04,920 --> 00:16:07,500
meanwhile all the powerful features are

341
00:16:07,500 --> 00:16:10,980
standardized elsewhere in w3c or in

342
00:16:10,980 --> 00:16:13,199
node.js working groups if you take

343
00:16:13,199 --> 00:16:15,480
Conway's law that says every

344
00:16:15,480 --> 00:16:17,279
organization is going to deliver

345
00:16:17,279 --> 00:16:20,880
software whose shape resembles the

346
00:16:20,880 --> 00:16:22,199
communication structure of that

347
00:16:22,199 --> 00:16:24,540
organization it means we get good

348
00:16:24,540 --> 00:16:26,519
separation between between the language

349
00:16:26,519 --> 00:16:31,079
and the apis so any powerful API is only

350
00:16:31,079 --> 00:16:32,880
reachable through scope

351
00:16:32,880 --> 00:16:35,720
or by requiring it

352
00:16:35,720 --> 00:16:38,399
and since compartment controls all of

353
00:16:38,399 --> 00:16:41,220
that we get hardened JavaScript as a

354
00:16:41,220 --> 00:16:42,360
result

355
00:16:42,360 --> 00:16:46,560
okay that was a lot recap time uh first

356
00:16:46,560 --> 00:16:48,899
install time protections with allow

357
00:16:48,899 --> 00:16:51,839
scripts you can install allow scripts in

358
00:16:51,839 --> 00:16:54,300
your repository run the two commands to

359
00:16:54,300 --> 00:16:56,940
configure it and you're protected from

360
00:16:56,940 --> 00:17:00,480
lifecycle scripts uh additional

361
00:17:00,480 --> 00:17:03,180
protections against bins that were

362
00:17:03,180 --> 00:17:05,939
rolling out about now runtime

363
00:17:05,939 --> 00:17:08,599
protections with lava mode and a policy

364
00:17:08,599 --> 00:17:10,559
introducing that is a bit more work

365
00:17:10,559 --> 00:17:12,419
because you need to refine your policy a

366
00:17:12,419 --> 00:17:13,559
bit

367
00:17:13,559 --> 00:17:17,640
um but this is super powerful and behind

368
00:17:17,640 --> 00:17:19,380
all of that there's hardened JavaScript

369
00:17:19,380 --> 00:17:22,919
with SAS also you can use SAS directly

370
00:17:22,919 --> 00:17:25,220
if you're building a tool or product

371
00:17:25,220 --> 00:17:28,919
where you want to run untrusted code and

372
00:17:28,919 --> 00:17:30,720
get the benefit from that without the

373
00:17:30,720 --> 00:17:31,580
risk

374
00:17:31,580 --> 00:17:34,320
and lava mode is protecting installation

375
00:17:34,320 --> 00:17:37,919
build and runtime of metamask which is

376
00:17:37,919 --> 00:17:41,280
being used by about 30 million people

377
00:17:41,280 --> 00:17:43,799
um and there is a

378
00:17:43,799 --> 00:17:46,860
future extension system for metamask

379
00:17:46,860 --> 00:17:50,880
that uses SAS directly to run someone

380
00:17:50,880 --> 00:17:54,120
else's functionality within metamask

381
00:17:54,120 --> 00:17:56,580
which is also interesting

382
00:17:56,580 --> 00:18:00,120
and that's based on guarantees that SAS

383
00:18:00,120 --> 00:18:01,799
gives us

384
00:18:01,799 --> 00:18:04,440
um it's already available you can use it

385
00:18:04,440 --> 00:18:06,000
you can play with it if you want to know

386
00:18:06,000 --> 00:18:09,179
more about SAS check out my earlier talk

387
00:18:09,179 --> 00:18:12,120
where I get into detail how it the

388
00:18:12,120 --> 00:18:14,880
current shim uh how it works right now

389
00:18:14,880 --> 00:18:17,520
and then you can uh

390
00:18:17,520 --> 00:18:20,340
look at Mark Miller's talk uh Mark

391
00:18:20,340 --> 00:18:24,360
Miller is the inventor of SAS uh and

392
00:18:24,360 --> 00:18:27,960
there's a lot more information about the

393
00:18:27,960 --> 00:18:30,240
the principle of How It's Working and

394
00:18:30,240 --> 00:18:33,059
why it's the way it is

395
00:18:33,059 --> 00:18:34,860
um and I'm offering to help you set up

396
00:18:34,860 --> 00:18:37,380
lava mode in your project so either scan

397
00:18:37,380 --> 00:18:40,500
this OR go to nagtor PL you can find a

398
00:18:40,500 --> 00:18:42,480
means to contact me there and I'm

399
00:18:42,480 --> 00:18:45,120
obviously joining Discord

400
00:18:45,120 --> 00:18:48,299
um yeah that's it

401
00:18:48,299 --> 00:18:51,559
thanks for watching

402
00:18:52,420 --> 00:18:53,880
[Music]

403
00:18:53,880 --> 00:18:56,460
awesome thank you very much this is your

404
00:18:56,460 --> 00:19:00,710
specialist field Duran so I'll uh hey

405
00:19:00,710 --> 00:19:02,179
[Music]

406
00:19:02,179 --> 00:19:04,559
pepper fun

407
00:19:04,559 --> 00:19:05,760
yep

408
00:19:05,760 --> 00:19:07,860
um so do we have questions or do you

409
00:19:07,860 --> 00:19:10,639
want to see a demo

410
00:19:11,340 --> 00:19:13,500
I personally thought that

411
00:19:13,500 --> 00:19:16,919
JavaScript was already secure but uh

412
00:19:16,919 --> 00:19:18,660
looks to see uh there's still some work

413
00:19:18,660 --> 00:19:20,960
to do

414
00:19:21,679 --> 00:19:24,419
uh so we've got lots of good good uh

415
00:19:24,419 --> 00:19:27,000
comments here great presentation I do

416
00:19:27,000 --> 00:19:28,980
have a question actually let's uh see if

417
00:19:28,980 --> 00:19:32,340
we can from uh from the is it secure to

418
00:19:32,340 --> 00:19:35,880
host passwords Within package.json

419
00:19:35,880 --> 00:19:37,620
I'm not sure whether that's a serious

420
00:19:37,620 --> 00:19:40,440
question or not but

421
00:19:40,440 --> 00:19:44,340
um it's always secure it's JavaScript

422
00:19:44,340 --> 00:19:46,740
well uh

423
00:19:46,740 --> 00:19:49,260
you shouldn't put your passwords uh

424
00:19:49,260 --> 00:19:51,179
anywhere that's accessible to anyone

425
00:19:51,179 --> 00:19:54,419
else uh and sends packet Json tends to

426
00:19:54,419 --> 00:19:57,059
be in a repository definitely not a good

427
00:19:57,059 --> 00:19:58,620
idea

428
00:19:58,620 --> 00:20:00,059
actually

429
00:20:00,059 --> 00:20:03,539
yeah great okay well I think we we're

430
00:20:03,539 --> 00:20:06,620
just about on time

