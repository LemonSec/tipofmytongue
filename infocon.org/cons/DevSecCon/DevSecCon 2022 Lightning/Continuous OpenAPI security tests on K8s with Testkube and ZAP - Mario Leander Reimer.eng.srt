1
00:00:00,000 --> 00:00:01,380
all right

2
00:00:01,380 --> 00:00:04,319
let's bring Mario on to screen like

3
00:00:04,319 --> 00:00:07,620
right away because we are

4
00:00:07,620 --> 00:00:10,260
already over time uh I'm Mario how are

5
00:00:10,260 --> 00:00:13,679
you hi hi good morning or a good lunch

6
00:00:13,679 --> 00:00:16,079
time or whatever I'm okay I'm a bit cold

7
00:00:16,079 --> 00:00:18,539
so I'm wearing a big hoodie and maybe I

8
00:00:18,539 --> 00:00:21,779
can get get some time in do you I see

9
00:00:21,779 --> 00:00:23,699
your your slides already here so let me

10
00:00:23,699 --> 00:00:25,800
put them on to the screen and we'll give

11
00:00:25,800 --> 00:00:27,599
you the show we give you the stage right

12
00:00:27,599 --> 00:00:31,080
away so yeah okay give me a second so

13
00:00:31,080 --> 00:00:33,920
here we go it was Christmas one let me

14
00:00:33,920 --> 00:00:36,719
yes we have them on and the show is

15
00:00:36,719 --> 00:00:38,760
yours go ahead no we don't that's

16
00:00:38,760 --> 00:00:41,839
Christmas ones isn't it

17
00:00:43,100 --> 00:00:45,480
who's pressing the buttons here I'm

18
00:00:45,480 --> 00:00:49,200
sorry twice go ahead so everything good

19
00:00:49,200 --> 00:00:51,600
right absolutely go ahead we have

20
00:00:51,600 --> 00:00:52,680
excellent

21
00:00:52,680 --> 00:00:54,840
so hi everyone

22
00:00:54,840 --> 00:00:57,899
um for the next let's say uh well 20

23
00:00:57,899 --> 00:01:00,059
minutes maybe it's only seven 17 minutes

24
00:01:00,059 --> 00:01:02,879
I'm going to talk about uh how you can

25
00:01:02,879 --> 00:01:04,860
continuously test the security tests

26
00:01:04,860 --> 00:01:08,700
your open API based microservices when

27
00:01:08,700 --> 00:01:10,799
they are deployed on kubernetes with a

28
00:01:10,799 --> 00:01:12,960
cool technology combo I think this is a

29
00:01:12,960 --> 00:01:15,000
really cool combo uh with a tool called

30
00:01:15,000 --> 00:01:17,400
test Cube that allows you to run the

31
00:01:17,400 --> 00:01:19,560
tests inside of your cluster and a

32
00:01:19,560 --> 00:01:21,540
two-called zap that's a zed attack proxy

33
00:01:21,540 --> 00:01:24,119
that is capable to run vulnerability

34
00:01:24,119 --> 00:01:26,400
scans so Dynamic scans

35
00:01:26,400 --> 00:01:29,220
um onto deployed microservices

36
00:01:29,220 --> 00:01:31,619
so quick intro myself my name is Leander

37
00:01:31,619 --> 00:01:33,600
principal software architect I work for

38
00:01:33,600 --> 00:01:36,119
a German company called kuabia our

39
00:01:36,119 --> 00:01:38,340
headquarters in Munich I'm sitting in

40
00:01:38,340 --> 00:01:40,740
the very south of Germany

41
00:01:40,740 --> 00:01:42,900
um almost you see down there those are

42
00:01:42,900 --> 00:01:45,240
the Alps uh it started snowing today so

43
00:01:45,240 --> 00:01:47,040
it's really cold right now in in this

44
00:01:47,040 --> 00:01:48,840
room where I'm sitting

45
00:01:48,840 --> 00:01:51,119
um I'm responsible for many many big

46
00:01:51,119 --> 00:01:52,259
projects

47
00:01:52,259 --> 00:01:54,000
um in our company for many customer

48
00:01:54,000 --> 00:01:55,740
projects we do individual software

49
00:01:55,740 --> 00:01:58,439
development for example for BMW so that

50
00:01:58,439 --> 00:02:00,720
large car manufacturer in Munich

51
00:02:00,720 --> 00:02:03,600
and well security is something that

52
00:02:03,600 --> 00:02:06,180
should be really important right in 2023

53
00:02:06,180 --> 00:02:08,880
we had uh quite a few incidents over the

54
00:02:08,880 --> 00:02:11,520
last months where it kind of struck us

55
00:02:11,520 --> 00:02:14,940
and we had to react really quickly but

56
00:02:14,940 --> 00:02:16,739
to tell you the truth

57
00:02:16,739 --> 00:02:19,379
even though we had those incidents I

58
00:02:19,379 --> 00:02:21,480
still think that you know holistic

59
00:02:21,480 --> 00:02:23,340
security and software development still

60
00:02:23,340 --> 00:02:25,020
seems to be a bit of a neglect

61
00:02:25,020 --> 00:02:27,060
non-functional requirement and many

62
00:02:27,060 --> 00:02:29,160
projects and many agile teams I do

63
00:02:29,160 --> 00:02:31,319
consultancy a lot I see a lot of

64
00:02:31,319 --> 00:02:34,260
customer projects out there and yes the

65
00:02:34,260 --> 00:02:36,599
developers are kind of aware that uh

66
00:02:36,599 --> 00:02:38,940
security is important but for some

67
00:02:38,940 --> 00:02:41,400
reason they don't do anything against it

68
00:02:41,400 --> 00:02:44,760
so let's try to find out why that maybe

69
00:02:44,760 --> 00:02:49,260
is the case and um well this slide you

70
00:02:49,260 --> 00:02:51,300
probably have seen or when other in

71
00:02:51,300 --> 00:02:54,959
other talks so there's a ISO Norm 25 010

72
00:02:54,959 --> 00:02:57,599
it's about software product quality and

73
00:02:57,599 --> 00:02:59,819
in that ISO Norm there are a lot of

74
00:02:59,819 --> 00:03:02,760
energy right maintainability efficiency

75
00:03:02,760 --> 00:03:05,160
functional suitability usability

76
00:03:05,160 --> 00:03:07,500
reliability portability compatibility

77
00:03:07,500 --> 00:03:09,840
and security and maybe a few other

78
00:03:09,840 --> 00:03:12,120
images already missing operability

79
00:03:12,120 --> 00:03:14,220
observability things like this right

80
00:03:14,220 --> 00:03:17,519
more modern LEDs so the thing is that

81
00:03:17,519 --> 00:03:20,220
security is unfortunately one of those

82
00:03:20,220 --> 00:03:22,379
several software product quality and

83
00:03:22,379 --> 00:03:25,080
well as a team and maybe as a product

84
00:03:25,080 --> 00:03:27,480
owner you always kind of have to decide

85
00:03:27,480 --> 00:03:30,360
which one is more important and for some

86
00:03:30,360 --> 00:03:32,700
reason right I don't want to judge that

87
00:03:32,700 --> 00:03:34,860
but you know many many product owners

88
00:03:34,860 --> 00:03:36,420
for example they think functional

89
00:03:36,420 --> 00:03:39,120
suitability is definitely more important

90
00:03:39,120 --> 00:03:41,519
right they want to have the the proper

91
00:03:41,519 --> 00:03:43,440
and correct and appropriate and complete

92
00:03:43,440 --> 00:03:45,360
software product and that's their main

93
00:03:45,360 --> 00:03:47,580
focus and if you would ask a software

94
00:03:47,580 --> 00:03:50,340
administrator or or you know an Ops

95
00:03:50,340 --> 00:03:52,260
person that may be reliability and

96
00:03:52,260 --> 00:03:54,780
deficiency is maybe in their Prime scope

97
00:03:54,780 --> 00:03:57,060
so I think it's usually dependent on who

98
00:03:57,060 --> 00:03:59,760
you ask which of those software

99
00:03:59,760 --> 00:04:02,220
qualities gets the most attention right

100
00:04:02,220 --> 00:04:04,799
and and security is kind of a feature

101
00:04:04,799 --> 00:04:06,720
right I mean security is also important

102
00:04:06,720 --> 00:04:08,159
for the product on and also for Ops

103
00:04:08,159 --> 00:04:08,940
people

104
00:04:08,940 --> 00:04:10,980
for some reason right this is a lot of

105
00:04:10,980 --> 00:04:12,780
work involved here you need to do a lot

106
00:04:12,780 --> 00:04:14,519
of testing you need to do a lot of

107
00:04:14,519 --> 00:04:16,019
security testing a lot of acceptance

108
00:04:16,019 --> 00:04:18,478
testing for the functional suitability

109
00:04:18,478 --> 00:04:19,918
um you know for reliability you maybe

110
00:04:19,918 --> 00:04:21,600
need to do chaos testing for

111
00:04:21,600 --> 00:04:23,580
maintainability uh you know you need to

112
00:04:23,580 --> 00:04:25,680
do software code quality testing

113
00:04:25,680 --> 00:04:28,020
um so this is a lot of work and well

114
00:04:28,020 --> 00:04:29,340
unfortunately

115
00:04:29,340 --> 00:04:31,620
um security usually comes a bit short

116
00:04:31,620 --> 00:04:34,380
and that is you know that is sad that is

117
00:04:34,380 --> 00:04:35,780
a tragedy

118
00:04:35,780 --> 00:04:39,120
then I'm I'm really sure you have

119
00:04:39,120 --> 00:04:40,440
probably read that book here the

120
00:04:40,440 --> 00:04:41,820
accelerate book

121
00:04:41,820 --> 00:04:44,400
um where they kind of argue that you

122
00:04:44,400 --> 00:04:46,020
know what you need to do for continuous

123
00:04:46,020 --> 00:04:48,180
delivery and on the right hand side you

124
00:04:48,180 --> 00:04:49,680
see all those benefits of continuous

125
00:04:49,680 --> 00:04:51,720
delivery low risk releases yes we all

126
00:04:51,720 --> 00:04:53,699
want them and and less rework and we

127
00:04:53,699 --> 00:04:55,320
want Happy teams because happy teams

128
00:04:55,320 --> 00:04:57,180
produce better products and we want fast

129
00:04:57,180 --> 00:04:58,800
time to Market and lower cost and have

130
00:04:58,800 --> 00:05:01,919
users in the end but as always said you

131
00:05:01,919 --> 00:05:04,500
know nothing is for free you have to do

132
00:05:04,500 --> 00:05:06,479
a lot of things to get there there are a

133
00:05:06,479 --> 00:05:07,860
lot of tools and techniques and

134
00:05:07,860 --> 00:05:09,720
Technologies and paradigms or whatever

135
00:05:09,720 --> 00:05:11,280
that

136
00:05:11,280 --> 00:05:12,560
genes

137
00:05:12,560 --> 00:05:15,780
need to cater for they they need to

138
00:05:15,780 --> 00:05:17,040
handle those things Loosely copied

139
00:05:17,040 --> 00:05:19,259
architectures AKA microservices they

140
00:05:19,259 --> 00:05:21,300
need to write maintainable code you meet

141
00:05:21,300 --> 00:05:24,000
empowered teams that is you know a topic

142
00:05:24,000 --> 00:05:26,460
on its own continuous security from day

143
00:05:26,460 --> 00:05:29,039
one it says in the book right um so you

144
00:05:29,039 --> 00:05:30,960
know it starts with the requirements the

145
00:05:30,960 --> 00:05:33,060
security requirements you need to do you

146
00:05:33,060 --> 00:05:34,860
know secure coding and you need to

147
00:05:34,860 --> 00:05:37,320
incorporate security into your you know

148
00:05:37,320 --> 00:05:38,580
daily

149
00:05:38,580 --> 00:05:41,100
um into this software product delivery

150
00:05:41,100 --> 00:05:42,300
um chain if you would like test

151
00:05:42,300 --> 00:05:43,680
automation is important continuous

152
00:05:43,680 --> 00:05:44,880
integration github's deployment

153
00:05:44,880 --> 00:05:46,440
automation modeling and learning is so

154
00:05:46,440 --> 00:05:49,259
much to do okay and I think a lot of the

155
00:05:49,259 --> 00:05:52,199
teams out there they're just overwhelmed

156
00:05:52,199 --> 00:05:54,180
um you know this this topic of cognitive

157
00:05:54,180 --> 00:05:56,340
load they're just overwhelmed with all

158
00:05:56,340 --> 00:05:58,919
the stuff they they have to do and you

159
00:05:58,919 --> 00:06:01,080
know the hard Parts usually are then the

160
00:06:01,080 --> 00:06:03,479
ones that are kind of properly neglected

161
00:06:03,479 --> 00:06:06,600
right and let's so let's see how we can

162
00:06:06,600 --> 00:06:08,580
kind of get out of this dilemma now what

163
00:06:08,580 --> 00:06:11,820
what many teams now do is what you they

164
00:06:11,820 --> 00:06:13,620
do to kind of automate things well the

165
00:06:13,620 --> 00:06:15,780
pipelines right we have those cicd

166
00:06:15,780 --> 00:06:17,940
pipelines I mean that is kind of an

167
00:06:17,940 --> 00:06:19,620
error on its own doing like two things

168
00:06:19,620 --> 00:06:21,300
CI something different to CD but

169
00:06:21,300 --> 00:06:22,800
nevertheless we always talk about CT

170
00:06:22,800 --> 00:06:24,720
pipelines and what I see out there is

171
00:06:24,720 --> 00:06:26,940
that many teams they start to build

172
00:06:26,940 --> 00:06:30,000
those monolithic kind of linear cicd

173
00:06:30,000 --> 00:06:31,860
pipeline but they're super sub-optimal

174
00:06:31,860 --> 00:06:34,560
and they will result in delay feedback

175
00:06:34,560 --> 00:06:36,840
and long release cycles and all those

176
00:06:36,840 --> 00:06:39,300
good tests right the security tests

177
00:06:39,300 --> 00:06:41,160
those Dynamic tests the performance

178
00:06:41,160 --> 00:06:43,259
tests uh the acceptance tests they're

179
00:06:43,259 --> 00:06:46,380
kind of super late in in those pipelines

180
00:06:46,380 --> 00:06:50,100
they are that usually reside in kind of

181
00:06:50,100 --> 00:06:52,500
you know flaky pipelines in long-running

182
00:06:52,500 --> 00:06:54,780
pipelines so what do people do well

183
00:06:54,780 --> 00:06:57,060
let's not integrate it into the pipeline

184
00:06:57,060 --> 00:06:59,940
let's take it out big promise we will do

185
00:06:59,940 --> 00:07:01,860
it at the end of the Sprint or at the

186
00:07:01,860 --> 00:07:03,180
end of the release there with your

187
00:07:03,180 --> 00:07:05,280
security test but yeah guess what then

188
00:07:05,280 --> 00:07:08,639
usually they are forgotten and um

189
00:07:08,639 --> 00:07:11,160
well they're not they're not random

190
00:07:11,160 --> 00:07:12,360
tests

191
00:07:12,360 --> 00:07:15,240
um so I had that idea so how can we

192
00:07:15,240 --> 00:07:17,520
improve on that if it's not such a good

193
00:07:17,520 --> 00:07:19,259
idea to put these into those those

194
00:07:19,259 --> 00:07:22,020
pipelines well let's see how we can kind

195
00:07:22,020 --> 00:07:24,720
of let those tests run and the the

196
00:07:24,720 --> 00:07:27,360
simple what question is why should we

197
00:07:27,360 --> 00:07:29,699
let those non-functional tests or in our

198
00:07:29,699 --> 00:07:32,580
case today the security test why why

199
00:07:32,580 --> 00:07:35,160
couldn't we run those continuously or

200
00:07:35,160 --> 00:07:37,199
maybe even triggered based on deployment

201
00:07:37,199 --> 00:07:40,020
events on the cluster itself so that my

202
00:07:40,020 --> 00:07:42,599
my cicd pipelines they don't have to run

203
00:07:42,599 --> 00:07:43,860
the tests

204
00:07:43,860 --> 00:07:45,660
um and instead it's the cluster itself

205
00:07:45,660 --> 00:07:48,300
that runs those tests always when things

206
00:07:48,300 --> 00:07:50,819
changes or maybe on a chrome basis maybe

207
00:07:50,819 --> 00:07:52,259
every two minutes maybe every five

208
00:07:52,259 --> 00:07:54,900
minutes so kind of continuously or as I

209
00:07:54,900 --> 00:07:57,120
said triggered by some event by the

210
00:07:57,120 --> 00:07:59,580
deployment event biobidops tool maybe or

211
00:07:59,580 --> 00:08:01,640
buy kubernetes itself

212
00:08:01,640 --> 00:08:02,639
[Music]

213
00:08:02,639 --> 00:08:03,479
um

214
00:08:03,479 --> 00:08:04,740
so

215
00:08:04,740 --> 00:08:06,960
um I want to introduce you to something

216
00:08:06,960 --> 00:08:09,060
what I call the the digital product

217
00:08:09,060 --> 00:08:11,460
assembly line right I I worked for the

218
00:08:11,460 --> 00:08:13,319
last 14 years in kind of different

219
00:08:13,319 --> 00:08:14,819
projects in the automotive concept

220
00:08:14,819 --> 00:08:16,380
context and if you've been in one of

221
00:08:16,380 --> 00:08:18,060
those factories everything is super

222
00:08:18,060 --> 00:08:20,759
automated right the chassis comes and

223
00:08:20,759 --> 00:08:23,280
then all those robot arms uh you know

224
00:08:23,280 --> 00:08:26,099
plug in the the engine and and the

225
00:08:26,099 --> 00:08:28,500
wiring and and they painted and you know

226
00:08:28,500 --> 00:08:30,180
the windows and all that and I think

227
00:08:30,180 --> 00:08:31,979
software engineering should be or you

228
00:08:31,979 --> 00:08:33,839
know software product development

229
00:08:33,839 --> 00:08:35,458
um digital software product development

230
00:08:35,458 --> 00:08:38,120
should be as automated as possible

231
00:08:38,120 --> 00:08:42,120
as as these Factory assembly lines

232
00:08:42,120 --> 00:08:45,000
uh so

233
00:08:45,000 --> 00:08:47,760
here's my page okay so let's speed

234
00:08:47,760 --> 00:08:50,760
things up um how would the conceptual

235
00:08:50,760 --> 00:08:52,320
architecture of such a product assembly

236
00:08:52,320 --> 00:08:54,420
might look like like this here is not

237
00:08:54,420 --> 00:08:56,459
something new hopefully right I mean we

238
00:08:56,459 --> 00:08:59,040
have devs they write code they push code

239
00:08:59,040 --> 00:09:01,320
uh into git repository then I have some

240
00:09:01,320 --> 00:09:02,820
form of CI pipeline you know maybe

241
00:09:02,820 --> 00:09:04,680
GitHub actions or maybe a good old

242
00:09:04,680 --> 00:09:06,480
Jenkins or something that does the

243
00:09:06,480 --> 00:09:08,580
checkout that then maybe you know or

244
00:09:08,580 --> 00:09:11,399
that does the build uh maybe with uh

245
00:09:11,399 --> 00:09:14,279
made for a Gradle in in a Java world uh

246
00:09:14,279 --> 00:09:15,779
you have some unit tests some early unit

247
00:09:15,779 --> 00:09:17,399
tests maybe have some early test

248
00:09:17,399 --> 00:09:19,560
container tests uh you you do some

249
00:09:19,560 --> 00:09:21,480
static code analysis maybe using

250
00:09:21,480 --> 00:09:24,180
zonercube uh at that stage you could

251
00:09:24,180 --> 00:09:26,459
already incorporate uh you know static

252
00:09:26,459 --> 00:09:28,980
security analysis tools there are lots

253
00:09:28,980 --> 00:09:30,480
and lots out there

254
00:09:30,480 --> 00:09:32,760
um at at the end you have done the final

255
00:09:32,760 --> 00:09:35,100
packaging phase where you package up all

256
00:09:35,100 --> 00:09:37,140
your artifacts that you just built um

257
00:09:37,140 --> 00:09:40,220
into a nice uh cuddly um Docker image

258
00:09:40,220 --> 00:09:43,680
and then the next phase is well you

259
00:09:43,680 --> 00:09:45,600
publish that document to some repository

260
00:09:45,600 --> 00:09:48,300
right get a packages or Amazon ECR or

261
00:09:48,300 --> 00:09:49,920
maybe a Nexus repository is something

262
00:09:49,920 --> 00:09:53,339
you like again here you could have some

263
00:09:53,339 --> 00:09:55,620
two already in place that maybe then

264
00:09:55,620 --> 00:09:58,440
already scanned the docker image for you

265
00:09:58,440 --> 00:10:00,240
know known vulnerabilities and all that

266
00:10:00,240 --> 00:10:02,040
right so fars are good nothing new

267
00:10:02,040 --> 00:10:03,240
probably

268
00:10:03,240 --> 00:10:06,120
then you have or you should have within

269
00:10:06,120 --> 00:10:08,279
the book you should have some good Ops

270
00:10:08,279 --> 00:10:11,040
um a workflow running so I either you

271
00:10:11,040 --> 00:10:13,200
prefer Argo or you prefer flux today I

272
00:10:13,200 --> 00:10:16,320
show you flux or I use flux flux will

273
00:10:16,320 --> 00:10:18,360
watch first up for github's repository

274
00:10:18,360 --> 00:10:20,700
to know what has changed what needs to

275
00:10:20,700 --> 00:10:22,860
be deployed on the cluster flux can also

276
00:10:22,860 --> 00:10:25,320
watch on the on the package repository

277
00:10:25,320 --> 00:10:28,380
when there is a new image flux will also

278
00:10:28,380 --> 00:10:30,959
already you know update those manifests

279
00:10:30,959 --> 00:10:33,300
and then finally deploy something to the

280
00:10:33,300 --> 00:10:35,399
cluster so now I have something deployed

281
00:10:35,399 --> 00:10:37,080
now I have that event I talked about

282
00:10:37,080 --> 00:10:40,019
before when I can now kick off those you

283
00:10:40,019 --> 00:10:42,120
know fancy performance tests or

284
00:10:42,120 --> 00:10:43,740
acceptance tests or in our case security

285
00:10:43,740 --> 00:10:45,899
test and this is basically what I will

286
00:10:45,899 --> 00:10:48,660
show you right now in in this whole demo

287
00:10:48,660 --> 00:10:51,300
and with a few details so I

288
00:10:51,300 --> 00:10:54,600
set before two tools two really cool

289
00:10:54,600 --> 00:10:57,480
tools they always that attack proxy

290
00:10:57,480 --> 00:11:00,959
called zap and test Cube so let's see

291
00:11:00,959 --> 00:11:04,260
now everything I show you uh is in that

292
00:11:04,260 --> 00:11:07,740
demo repository here which which is my

293
00:11:07,740 --> 00:11:10,620
my private GitHub repo um test cubesat

294
00:11:10,620 --> 00:11:13,800
demo 4K please feel free to use anything

295
00:11:13,800 --> 00:11:16,019
you like in there it's MIT license so

296
00:11:16,019 --> 00:11:19,800
you know copy it off you go

297
00:11:19,800 --> 00:11:22,740
so quickly overstep attack proxy uh well

298
00:11:22,740 --> 00:11:24,300
I think it's pretty widespread and it's

299
00:11:24,300 --> 00:11:26,220
well known it's an open source

300
00:11:26,220 --> 00:11:28,500
vulnerability scanner super good

301
00:11:28,500 --> 00:11:30,000
documentation International Community

302
00:11:30,000 --> 00:11:32,040
you know Vivid Community

303
00:11:32,040 --> 00:11:34,980
um still actively developed zap provides

304
00:11:34,980 --> 00:11:36,899
several modes of operations you have an

305
00:11:36,899 --> 00:11:38,640
intercepted proxy you can do active and

306
00:11:38,640 --> 00:11:40,680
passive scanning you can do an HTTP

307
00:11:40,680 --> 00:11:43,500
spider to kind of crawl a website you

308
00:11:43,500 --> 00:11:45,959
can uh use a Brute Force scanner a port

309
00:11:45,959 --> 00:11:49,800
scanner relevant for today is you can uh

310
00:11:49,800 --> 00:11:53,399
well scan and then attack open API V3

311
00:11:53,399 --> 00:11:56,339
endpoints so it'll rest endpoints it

312
00:11:56,339 --> 00:11:58,380
either has support for soap and graphql

313
00:11:58,380 --> 00:12:00,540
where soap is kind of the old style um

314
00:12:00,540 --> 00:12:02,640
graphql maybe the new style and also web

315
00:12:02,640 --> 00:12:05,399
servers what's really cool about zap it

316
00:12:05,399 --> 00:12:07,860
it has a really powerful API and a few

317
00:12:07,860 --> 00:12:10,860
tools that allow you to automate the

318
00:12:10,860 --> 00:12:12,600
security scanning right so that you

319
00:12:12,600 --> 00:12:14,579
don't have to click anything um so the

320
00:12:14,579 --> 00:12:17,040
automation is done by a few scripts in

321
00:12:17,040 --> 00:12:18,959
the one place and they also have a few

322
00:12:18,959 --> 00:12:20,700
language findings like a Java binding

323
00:12:20,700 --> 00:12:22,860
where you can

324
00:12:22,860 --> 00:12:24,720
programmatically

325
00:12:24,720 --> 00:12:27,000
now the cool thing for a containerized

326
00:12:27,000 --> 00:12:29,700
runtime environment is that zap provides

327
00:12:29,700 --> 00:12:31,740
everything provides an official Docker

328
00:12:31,740 --> 00:12:34,200
image that has everything baked in okay

329
00:12:34,200 --> 00:12:36,300
so you only need that one image and with

330
00:12:36,300 --> 00:12:38,339
that one image you can do API scanning

331
00:12:38,339 --> 00:12:40,260
you can do Baseline scanning you can do

332
00:12:40,260 --> 00:12:42,600
full scanning active and passive with

333
00:12:42,600 --> 00:12:44,279
Ajax scanning so in case you have kind

334
00:12:44,279 --> 00:12:46,260
of a web page but the API scanning is

335
00:12:46,260 --> 00:12:48,839
really relevant for today you even have

336
00:12:48,839 --> 00:12:51,480
a website UI if you want to have you

337
00:12:51,480 --> 00:12:52,260
know

338
00:12:52,260 --> 00:12:54,120
a fancy

339
00:12:54,120 --> 00:12:56,820
a fancy UI that you can click now let's

340
00:12:56,820 --> 00:12:59,339
quickly jump in one of those where is

341
00:12:59,339 --> 00:13:01,800
that UI I want to show you so this here

342
00:13:01,800 --> 00:13:04,560
is this here is kind of the the web

343
00:13:04,560 --> 00:13:08,100
swing UI I just talked about before so

344
00:13:08,100 --> 00:13:11,700
this is the basic zap UI you could also

345
00:13:11,700 --> 00:13:13,260
install locally on your desktop machine

346
00:13:13,260 --> 00:13:15,380
right basically it's a Java program

347
00:13:15,380 --> 00:13:18,899
but this now runs in the browser and the

348
00:13:18,899 --> 00:13:21,800
void UI

349
00:13:24,180 --> 00:13:27,300
hours ago into Google cloud and up here

350
00:13:27,300 --> 00:13:29,100
for example you have something called

351
00:13:29,100 --> 00:13:32,220
import open API definition from a URL

352
00:13:32,220 --> 00:13:34,980
and now let's see so that is the URL at

353
00:13:34,980 --> 00:13:36,959
the point in here and you see that's a

354
00:13:36,959 --> 00:13:38,459
microservice default service cluster

355
00:13:38,459 --> 00:13:42,380
local so that's the DNS name

356
00:13:42,480 --> 00:13:45,720
of a service inside my um my kubernetes

357
00:13:45,720 --> 00:13:48,060
cluster port 8080 opening

358
00:13:48,060 --> 00:13:50,220
by the open app API definition comes

359
00:13:50,220 --> 00:13:53,399
from and down here we override that one

360
00:13:53,399 --> 00:13:56,160
and just to show you this is then you

361
00:13:56,160 --> 00:13:57,959
press import and now he does the

362
00:13:57,959 --> 00:14:00,360
scanning and now um zap already

363
00:14:00,360 --> 00:14:03,600
discovered uh all the endpoints that my

364
00:14:03,600 --> 00:14:06,959
microservices offering okay and the I I

365
00:14:06,959 --> 00:14:09,420
know I show you this manually now but

366
00:14:09,420 --> 00:14:11,700
everything I do here can basically be

367
00:14:11,700 --> 00:14:13,440
automated okay so this is just to show

368
00:14:13,440 --> 00:14:16,139
you what I'm automating in like a

369
00:14:16,139 --> 00:14:17,880
minute time

370
00:14:17,880 --> 00:14:20,459
so here and basically what you can then

371
00:14:20,459 --> 00:14:22,860
now do is we can say attack at the scan

372
00:14:22,860 --> 00:14:26,459
and off you go start scanning and now uh

373
00:14:26,459 --> 00:14:28,560
zap will attack my microservice deployed

374
00:14:28,560 --> 00:14:29,399
uh

375
00:14:29,399 --> 00:14:31,500
in my cluster okay

376
00:14:31,500 --> 00:14:34,320
so let's see how we can kind of automate

377
00:14:34,320 --> 00:14:35,279
things

378
00:14:35,279 --> 00:14:36,360
um well

379
00:14:36,360 --> 00:14:40,019
option number one is uh we could program

380
00:14:40,019 --> 00:14:41,760
something and option number two is we

381
00:14:41,760 --> 00:14:44,100
could use a test Cube to kind of do the

382
00:14:44,100 --> 00:14:44,770
job for us

383
00:14:44,770 --> 00:14:47,160
[Music]

384
00:14:47,160 --> 00:14:50,040
so the automation just to be complete or

385
00:14:50,040 --> 00:14:52,680
this is for example a a Spock spec so

386
00:14:52,680 --> 00:14:55,800
everything I just showed you in the UI

387
00:14:55,800 --> 00:14:59,220
can basically be done using that way

388
00:14:59,220 --> 00:15:00,600
here

389
00:15:00,600 --> 00:15:02,820
so this is here I create a new Zeb

390
00:15:02,820 --> 00:15:07,320
session I say import URL and down here I

391
00:15:07,320 --> 00:15:09,720
say I want the API minimal scanning and

392
00:15:09,720 --> 00:15:12,240
then I scan each of the URLs discovered

393
00:15:12,240 --> 00:15:14,519
in the previous step so this is how you

394
00:15:14,519 --> 00:15:17,279
could kind of code your uh your your

395
00:15:17,279 --> 00:15:20,160
vulnerability scan using zap all you

396
00:15:20,160 --> 00:15:23,339
need is kind of uh there's either the

397
00:15:23,339 --> 00:15:25,320
the zap Daemon this is here the the

398
00:15:25,320 --> 00:15:28,260
docker image I just I told you before so

399
00:15:28,260 --> 00:15:30,000
this is kind of a headless even deployed

400
00:15:30,000 --> 00:15:33,240
where only the API is spun up and my my

401
00:15:33,240 --> 00:15:36,720
unit test or unit security test will

402
00:15:36,720 --> 00:15:39,120
then contact that Daemon and then the

403
00:15:39,120 --> 00:15:41,399
demon will kind of do the scanning and

404
00:15:41,399 --> 00:15:42,839
the attacking of the microservice

405
00:15:42,839 --> 00:15:45,240
deployed in the same cluster

406
00:15:45,240 --> 00:15:47,100
and that is kind of the deployment or

407
00:15:47,100 --> 00:15:48,720
the part of the UI I just showed you

408
00:15:48,720 --> 00:15:51,660
okay so it's a bit of kubernetes yaml no

409
00:15:51,660 --> 00:15:54,300
big deal deploy that to your cluster

410
00:15:54,300 --> 00:15:57,079
um you know off you go and

411
00:15:57,079 --> 00:15:59,699
you have zap running inside your cluster

412
00:15:59,699 --> 00:16:01,320
and you can automate it from the outside

413
00:16:01,320 --> 00:16:04,399
if you have kind of a unit test okay

414
00:16:04,399 --> 00:16:08,459
so okay get NS so this is here for

415
00:16:08,459 --> 00:16:10,980
example this is all the

416
00:16:10,980 --> 00:16:11,699
um

417
00:16:11,699 --> 00:16:13,740
all the namespaces on my cluster you see

418
00:16:13,740 --> 00:16:16,620
the zap stuff is deployed in zap and now

419
00:16:16,620 --> 00:16:18,420
you see here that namespace is called

420
00:16:18,420 --> 00:16:20,160
test Cube so let's quickly talk about

421
00:16:20,160 --> 00:16:21,959
test Cube what the hell is test Cube now

422
00:16:21,959 --> 00:16:23,040
well

423
00:16:23,040 --> 00:16:25,500
test queue now is kind of a cloud native

424
00:16:25,500 --> 00:16:27,959
testing framework for kubernetes okay so

425
00:16:27,959 --> 00:16:30,300
test tube integrates this test

426
00:16:30,300 --> 00:16:32,220
orchestration and the test execution

427
00:16:32,220 --> 00:16:34,800
into your kubernetes cluster okay and it

428
00:16:34,800 --> 00:16:37,320
takes it out of your cicd pipeline or

429
00:16:37,320 --> 00:16:38,940
the github's pipeline okay so we don't

430
00:16:38,940 --> 00:16:40,440
have any vendor login for test

431
00:16:40,440 --> 00:16:42,000
orchestration

432
00:16:42,000 --> 00:16:44,279
so test cube is completely decoupled

433
00:16:44,279 --> 00:16:45,839
from your Jenkins from your GitHub

434
00:16:45,839 --> 00:16:47,220
actions from your gitlab actions

435
00:16:47,220 --> 00:16:50,040
whatever CI system you use but the cool

436
00:16:50,040 --> 00:16:51,660
thing is that it kind of decouples the

437
00:16:51,660 --> 00:16:53,519
text test execution from the build

438
00:16:53,519 --> 00:16:55,560
process okay this is two things build

439
00:16:55,560 --> 00:16:57,360
process is one thing do one thing well

440
00:16:57,360 --> 00:16:59,639
and then comes the test execution it

441
00:16:59,639 --> 00:17:01,680
also enables your test Engineers if you

442
00:17:01,680 --> 00:17:03,779
have some to run specific tests whenever

443
00:17:03,779 --> 00:17:06,480
they need them now teskey makes it

444
00:17:06,480 --> 00:17:08,400
really easy to run those non-functional

445
00:17:08,400 --> 00:17:09,839
tests like you know load performance

446
00:17:09,839 --> 00:17:11,579
tests and security tests and compliance

447
00:17:11,579 --> 00:17:14,280
tests within your cluster okay and that

448
00:17:14,280 --> 00:17:16,140
is really cool in highly constrained

449
00:17:16,140 --> 00:17:18,240
environments where maybe the cluster is

450
00:17:18,240 --> 00:17:20,880
not even accessible from the outside

451
00:17:20,880 --> 00:17:23,939
so all you need to code is your test and

452
00:17:23,939 --> 00:17:25,260
then you tell test queue hey test group

453
00:17:25,260 --> 00:17:27,780
here is a Zep test or here's a k6 load

454
00:17:27,780 --> 00:17:29,520
test Please execute that whenever

455
00:17:29,520 --> 00:17:32,040
something changes in the cluster it's

456
00:17:32,040 --> 00:17:34,140
kind of a modular architecture and for

457
00:17:34,140 --> 00:17:36,000
each and every test it supports they

458
00:17:36,000 --> 00:17:37,740
have something a concept called the

459
00:17:37,740 --> 00:17:39,960
executor so what I Will Show You is kind

460
00:17:39,960 --> 00:17:41,460
of this here okay so that's kind of the

461
00:17:41,460 --> 00:17:43,200
demo architecture of the cluster I'm

462
00:17:43,200 --> 00:17:45,360
currently running so I have test Cube

463
00:17:45,360 --> 00:17:47,520
deployed inside my cluster inside a

464
00:17:47,520 --> 00:17:49,860
dedicated namespace in the cluster I did

465
00:17:49,860 --> 00:17:51,840
I deployed did the deployment using flux

466
00:17:51,840 --> 00:17:54,600
right so also the test tube deployment

467
00:17:54,600 --> 00:17:57,059
and lifecycle is managed via githubs

468
00:17:57,059 --> 00:17:59,520
it's a simple help charge you can deploy

469
00:17:59,520 --> 00:18:01,500
in a cluster then you have a nice fancy

470
00:18:01,500 --> 00:18:03,600
dashboard for example you have something

471
00:18:03,600 --> 00:18:05,220
called the API server that you can

472
00:18:05,220 --> 00:18:07,440
interact with as a developer using or

473
00:18:07,440 --> 00:18:10,200
the CLI for example you could also have

474
00:18:10,200 --> 00:18:12,600
a CI system to trigger the API server to

475
00:18:12,600 --> 00:18:14,640
you know start to start with the test

476
00:18:14,640 --> 00:18:16,140
phase

477
00:18:16,140 --> 00:18:18,360
the really important part are the

478
00:18:18,360 --> 00:18:20,640
executors right so for each and every

479
00:18:20,640 --> 00:18:23,280
certain test type you have a distinct

480
00:18:23,280 --> 00:18:25,799
executor like that executor or a Gradle

481
00:18:25,799 --> 00:18:28,559
execute or a six executor

482
00:18:28,559 --> 00:18:31,500
um and you declaratively define

483
00:18:31,500 --> 00:18:34,440
um your test so good old kubernetes

484
00:18:34,440 --> 00:18:36,780
style yaml obviously all those manifests

485
00:18:36,780 --> 00:18:40,140
can also be managed by adults uh so test

486
00:18:40,140 --> 00:18:42,179
is kind of the the smallest piece bit

487
00:18:42,179 --> 00:18:45,000
test and reference test sources a test

488
00:18:45,000 --> 00:18:46,140
source is something like a git

489
00:18:46,140 --> 00:18:48,000
repository for example you have test

490
00:18:48,000 --> 00:18:50,700
Suites test Suites aggregate individual

491
00:18:50,700 --> 00:18:52,320
tests and you have test triggers that

492
00:18:52,320 --> 00:18:54,240
kind of are then the glue whenever a

493
00:18:54,240 --> 00:18:55,740
deployment changes then run the

494
00:18:55,740 --> 00:18:58,380
following test so let's dive into that

495
00:18:58,380 --> 00:19:01,880
demo here a bit more

496
00:19:02,160 --> 00:19:05,160
so we kill exactly so we kill that one

497
00:19:05,160 --> 00:19:06,240
here

498
00:19:06,240 --> 00:19:08,400
um so what does a

499
00:19:08,400 --> 00:19:12,059
zap test look like the test Cube start

500
00:19:12,059 --> 00:19:13,980
so to just give you an idea

501
00:19:13,980 --> 00:19:16,620
so this here is basically

502
00:19:16,620 --> 00:19:18,299
tells hey

503
00:19:18,299 --> 00:19:21,000
the test Cube this is a test followed

504
00:19:21,000 --> 00:19:23,280
the following name the namespace test

505
00:19:23,280 --> 00:19:26,220
Cube type zap API and then here in the

506
00:19:26,220 --> 00:19:28,440
data what you need to specify is a few

507
00:19:28,440 --> 00:19:30,000
configuration parameters this is

508
00:19:30,000 --> 00:19:31,620
basically all the parameters you could

509
00:19:31,620 --> 00:19:35,220
set in the UI so maybe you remember and

510
00:19:35,220 --> 00:19:36,020
and

511
00:19:36,020 --> 00:19:39,440
this link I just inserted into this UI

512
00:19:39,440 --> 00:19:41,880
field this is basically all the

513
00:19:41,880 --> 00:19:43,860
configuration that the test needs in in

514
00:19:43,860 --> 00:19:46,159
here

515
00:19:46,320 --> 00:19:48,900
so what you can then do is for example

516
00:19:48,900 --> 00:19:52,980
you um so to create the test either you

517
00:19:52,980 --> 00:19:54,780
write that piece of yaml here and permit

518
00:19:54,780 --> 00:19:56,580
it to your github's workflow obviously

519
00:19:56,580 --> 00:19:59,100
there's a nice cool CLI you can you can

520
00:19:59,100 --> 00:20:00,660
you could also use

521
00:20:00,660 --> 00:20:03,419
um to do exactly the same let's see what

522
00:20:03,419 --> 00:20:05,640
we have that one down here for example

523
00:20:05,640 --> 00:20:08,280
for example you say so the CLI comes as

524
00:20:08,280 --> 00:20:10,380
a cube CDL plugin so you say Cube CDL

525
00:20:10,380 --> 00:20:13,559
test Cube create test third test two

526
00:20:13,559 --> 00:20:17,100
bam so that one is now created and if

527
00:20:17,100 --> 00:20:19,559
you would want to run that Z test then

528
00:20:19,559 --> 00:20:21,419
well basically what you could either do

529
00:20:21,419 --> 00:20:24,539
here down here is you say consider run

530
00:20:24,539 --> 00:20:26,520
test

531
00:20:26,520 --> 00:20:28,500
run test

532
00:20:28,500 --> 00:20:29,760
maybe that

533
00:20:29,760 --> 00:20:34,020
like that watch the API test and then um

534
00:20:34,020 --> 00:20:37,260
this will you know start running

535
00:20:37,260 --> 00:20:39,240
So that obviously now takes a while to

536
00:20:39,240 --> 00:20:40,980
spin up uh we only have two minutes left

537
00:20:40,980 --> 00:20:43,200
so I need to speed up a bit so it's

538
00:20:43,200 --> 00:20:45,299
super easy to kind of tell test Cube now

539
00:20:45,299 --> 00:20:46,380
Hey listen

540
00:20:46,380 --> 00:20:48,360
um with the following configuration

541
00:20:48,360 --> 00:20:50,280
um I'll do your testing and now comes

542
00:20:50,280 --> 00:20:52,919
the final tricky bit so this is this

543
00:20:52,919 --> 00:20:55,559
here okay so this is a so-called test

544
00:20:55,559 --> 00:20:58,260
trigger okay so this basically says

545
00:20:58,260 --> 00:21:00,840
Whenever there is a deployment in the

546
00:21:00,840 --> 00:21:03,120
namespace default that has the following

547
00:21:03,120 --> 00:21:05,520
labels like app microservice so this is

548
00:21:05,520 --> 00:21:08,039
my small Java based microservice in case

549
00:21:08,039 --> 00:21:10,860
of a modified event then please

550
00:21:10,860 --> 00:21:14,340
um run the following test with the name

551
00:21:14,340 --> 00:21:16,799
uh with the name we just specified so

552
00:21:16,799 --> 00:21:18,000
it's just

553
00:21:18,000 --> 00:21:18,840
um

554
00:21:18,840 --> 00:21:21,960
um we just change those names here so

555
00:21:21,960 --> 00:21:23,940
what we could do now is either apply

556
00:21:23,940 --> 00:21:26,460
that manually or have githubs apply this

557
00:21:26,460 --> 00:21:28,400
stuff as well so what we could do is

558
00:21:28,400 --> 00:21:33,960
Cube CTO apply minus F okay it's as test

559
00:21:33,960 --> 00:21:39,659
Cube and then we have the Zep API test

560
00:21:39,659 --> 00:21:41,220
trigger

561
00:21:41,220 --> 00:21:43,679
so now you know test you will watch for

562
00:21:43,679 --> 00:21:45,480
any any change events on my microservice

563
00:21:45,480 --> 00:21:47,400
and whenever my github's workflow on

564
00:21:47,400 --> 00:21:49,799
deploys or the those other pipelines

565
00:21:49,799 --> 00:21:52,559
deploy the microservice then testcube

566
00:21:52,559 --> 00:21:55,080
will automatically trigger the Zep tests

567
00:21:55,080 --> 00:21:57,659
once the uh the you know the deployment

568
00:21:57,659 --> 00:21:59,880
has changed so everything every time

569
00:21:59,880 --> 00:22:02,100
something changes um by like the test

570
00:22:02,100 --> 00:22:03,120
run

571
00:22:03,120 --> 00:22:05,460
that could is also about the possibility

572
00:22:05,460 --> 00:22:07,919
to let the test run using kind of a

573
00:22:07,919 --> 00:22:09,960
chrome uh

574
00:22:09,960 --> 00:22:12,780
a scheduled type type test

575
00:22:12,780 --> 00:22:14,100
right

576
00:22:14,100 --> 00:22:14,640
um

577
00:22:14,640 --> 00:22:18,240
so I hope you believe me that this is a

578
00:22:18,240 --> 00:22:20,460
cool Tech combo to kind of continuously

579
00:22:20,460 --> 00:22:22,799
let those you know perform well those

580
00:22:22,799 --> 00:22:23,940
penetration tests onto your

581
00:22:23,940 --> 00:22:25,559
microservices run continuously on your

582
00:22:25,559 --> 00:22:28,320
cluster and pull those out of the CI

583
00:22:28,320 --> 00:22:30,059
Pipelines

584
00:22:30,059 --> 00:22:31,860
let's do the work so that you don't have

585
00:22:31,860 --> 00:22:33,720
to do the work and that

586
00:22:33,720 --> 00:22:36,120
hopefully you should

587
00:22:36,120 --> 00:22:38,159
do a microservices out there for your

588
00:22:38,159 --> 00:22:42,299
customers all right that's it 20 20 Past

589
00:22:42,299 --> 00:22:44,640
One um thanks for your time

590
00:22:44,640 --> 00:22:47,340
awesome thank you Mario Land I really

591
00:22:47,340 --> 00:22:49,260
love that that's super cool

592
00:22:49,260 --> 00:22:51,059
um again we're slightly running behind

593
00:22:51,059 --> 00:22:53,760
again so uh if uh if folks have

594
00:22:53,760 --> 00:22:55,679
additional questions I'm sure you'll

595
00:22:55,679 --> 00:22:58,320
hang around in uh Discord for for a few

596
00:22:58,320 --> 00:23:00,480
minutes and uh and just see who's uh

597
00:23:00,480 --> 00:23:03,679
who's got questions for you

