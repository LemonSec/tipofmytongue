1
00:00:00,299 --> 00:00:02,879
all right well it looks like our next

2
00:00:02,879 --> 00:00:04,740
speaker is due to come on in just about

3
00:00:04,740 --> 00:00:06,720
60 seconds so we have to do sort of a

4
00:00:06,720 --> 00:00:09,660
quick intro uh Brian you want to jump in

5
00:00:09,660 --> 00:00:11,639
there and introduce our next amazing

6
00:00:11,639 --> 00:00:14,040
speaker yes we can I think it's a

7
00:00:14,040 --> 00:00:15,420
perfect segue because Shelby was talking

8
00:00:15,420 --> 00:00:17,039
about code signing a little bit and our

9
00:00:17,039 --> 00:00:18,000
next speaker's gonna be talking about

10
00:00:18,000 --> 00:00:20,400
code signing uh and how you can still

11
00:00:20,400 --> 00:00:22,500
get hacked after signing your software

12
00:00:22,500 --> 00:00:24,900
right so it's perfect for that but uh to

13
00:00:24,900 --> 00:00:27,300
to help set it up we have joining us to

14
00:00:27,300 --> 00:00:30,060
speak on this is gal who has 10 years of

15
00:00:30,060 --> 00:00:31,380
software development and cyber security

16
00:00:31,380 --> 00:00:33,660
experience gal's early career included

17
00:00:33,660 --> 00:00:35,100
software development for the Israel

18
00:00:35,100 --> 00:00:38,640
Israel Defense Forces Unit matzov and

19
00:00:38,640 --> 00:00:40,680
followed by rolls as a Linux kernel

20
00:00:40,680 --> 00:00:43,500
engineer at volume as volumes and a

21
00:00:43,500 --> 00:00:46,860
technical lead at infinidet uh this is

22
00:00:46,860 --> 00:00:48,360
like a like tongue twister for me trying

23
00:00:48,360 --> 00:00:49,440
to make sure I'm pronouncing these

24
00:00:49,440 --> 00:00:51,539
things well gal also came to legit

25
00:00:51,539 --> 00:00:53,640
security where he's at now as a security

26
00:00:53,640 --> 00:00:55,500
researcher and subject matter expert on

27
00:00:55,500 --> 00:00:57,960
software supply chain security and with

28
00:00:57,960 --> 00:01:00,840
that let's bring gal on to start next

29
00:01:00,840 --> 00:01:03,199
session

30
00:01:03,840 --> 00:01:06,479
welcome guys

31
00:01:06,479 --> 00:01:09,060
hey well great to see you thanks for

32
00:01:09,060 --> 00:01:11,040
coming by we all agree that

33
00:01:11,040 --> 00:01:14,520
thank you majority is an awesome name

34
00:01:14,520 --> 00:01:18,180
yes thanks yeah I love you too

35
00:01:18,180 --> 00:01:20,220
now will somebody come up with illegit

36
00:01:20,220 --> 00:01:23,820
security to encounter that that would be

37
00:01:23,820 --> 00:01:26,040
a problem yeah

38
00:01:26,040 --> 00:01:30,299
nice if they're dark web sister company

39
00:01:30,299 --> 00:01:32,520
well uh gal we're all looking forward to

40
00:01:32,520 --> 00:01:35,340
your talk so without further Ado uh the

41
00:01:35,340 --> 00:01:37,500
floor is yours good sir

42
00:01:37,500 --> 00:01:39,479
perfect thank you

43
00:01:39,479 --> 00:01:40,860
so

44
00:01:40,860 --> 00:01:44,640
yeah cool I guess start a presentation

45
00:01:44,640 --> 00:01:48,119
cool so yeah I'm gone and in legit I

46
00:01:48,119 --> 00:01:49,920
actually researched supply chain

47
00:01:49,920 --> 00:01:53,340
security and cicd pipelines and other

48
00:01:53,340 --> 00:01:56,640
sdrc assets and looking for risks and

49
00:01:56,640 --> 00:01:58,439
now we're going to talk about artifact

50
00:01:58,439 --> 00:02:01,200
poisoning in Docker Registries and we'll

51
00:02:01,200 --> 00:02:02,939
see why we can still get hacked even

52
00:02:02,939 --> 00:02:05,340
after you sign your software artifacts

53
00:02:05,340 --> 00:02:08,459
now we'll start with understanding why

54
00:02:08,459 --> 00:02:09,959
the registry is actually the weakest

55
00:02:09,959 --> 00:02:12,300
link in the pipeline and we'll see how

56
00:02:12,300 --> 00:02:14,520
the artifact poisoning go in the process

57
00:02:14,520 --> 00:02:16,620
then we'll see artifact signing

58
00:02:16,620 --> 00:02:18,540
assigning as a measure to protect

59
00:02:18,540 --> 00:02:20,640
against it and we'll see how to do it

60
00:02:20,640 --> 00:02:23,879
right which is not so trivial as one

61
00:02:23,879 --> 00:02:25,920
would expect then we'll see their

62
00:02:25,920 --> 00:02:27,840
Community adoption for the solution and

63
00:02:27,840 --> 00:02:30,060
the next step for you to take

64
00:02:30,060 --> 00:02:30,720
[Music]

65
00:02:30,720 --> 00:02:31,500
um

66
00:02:31,500 --> 00:02:34,020
to start let's meet the supply chain of

67
00:02:34,020 --> 00:02:35,520
Alice's Restaurant

68
00:02:35,520 --> 00:02:37,500
so in the kitchen we have the cooks

69
00:02:37,500 --> 00:02:40,140
using different ingredients and when

70
00:02:40,140 --> 00:02:42,300
they finish preparing the dish they can

71
00:02:42,300 --> 00:02:45,480
pass it to the Alice the chef which

72
00:02:45,480 --> 00:02:49,440
checks the dishes for code for sorry

73
00:02:49,440 --> 00:02:52,019
food quality issues or food poisoning

74
00:02:52,019 --> 00:02:55,440
and if everything is fine Alish can put

75
00:02:55,440 --> 00:02:58,140
the pasta on the serving bar where it

76
00:02:58,140 --> 00:03:00,120
waits and it waits for the waiter to

77
00:03:00,120 --> 00:03:02,099
pick it up and deliver it to the

78
00:03:02,099 --> 00:03:04,739
customer Boba now the waiter just takes

79
00:03:04,739 --> 00:03:06,300
it off the serving bar and delivers it

80
00:03:06,300 --> 00:03:08,819
to Bob and when Mallory our malicious

81
00:03:08,819 --> 00:03:12,000
actor decides to poison Bob and we need

82
00:03:12,000 --> 00:03:13,440
to ask ourselves where would Mallory

83
00:03:13,440 --> 00:03:15,500
decide to inject poison

84
00:03:15,500 --> 00:03:19,739
so the kitchen is a full of the crooks

85
00:03:19,739 --> 00:03:21,540
and and Alice and they check for the

86
00:03:21,540 --> 00:03:25,440
quality and the the natural place for

87
00:03:25,440 --> 00:03:27,300
Mallory to go would be the serving bar

88
00:03:27,300 --> 00:03:31,379
where no one is looking at the pasta And

89
00:03:31,379 --> 00:03:34,440
now when uh the pasta is poisoned the

90
00:03:34,440 --> 00:03:36,239
waiter just picks it up and delivers it

91
00:03:36,239 --> 00:03:39,840
to Bob and that's a bit of a problem and

92
00:03:39,840 --> 00:03:42,480
now like every other business owner in

93
00:03:42,480 --> 00:03:45,560
2022 Alice decides to go to the cloud

94
00:03:45,560 --> 00:03:48,299
and Alice's Restaurant is going digital

95
00:03:48,299 --> 00:03:50,760
and now instead of a kitchen we have the

96
00:03:50,760 --> 00:03:53,640
CM and we have different branches and

97
00:03:53,640 --> 00:03:55,860
when they are ready to merge they go

98
00:03:55,860 --> 00:03:58,140
into the main branch and in this process

99
00:03:58,140 --> 00:04:01,260
we have code reviews SAS dust and other

100
00:04:01,260 --> 00:04:04,379
tests to make sure that the quality of

101
00:04:04,379 --> 00:04:05,819
the code is fine there are no

102
00:04:05,819 --> 00:04:08,159
vulnerabilities and only if everything

103
00:04:08,159 --> 00:04:10,319
checks out then we can prepare the

104
00:04:10,319 --> 00:04:12,959
docker and push it to the registry in

105
00:04:12,959 --> 00:04:15,900
the registry restore the image and and

106
00:04:15,900 --> 00:04:18,478
it waits for the CD to pick it up to

107
00:04:18,478 --> 00:04:21,358
pull it actually and to deliver it to

108
00:04:21,358 --> 00:04:23,520
production and it could be either the

109
00:04:23,520 --> 00:04:25,680
cluster or a cloud environment or

110
00:04:25,680 --> 00:04:28,680
whatever environment you have and once

111
00:04:28,680 --> 00:04:31,620
again the natural place to inject the

112
00:04:31,620 --> 00:04:33,720
poison would be in the registry after

113
00:04:33,720 --> 00:04:36,060
all the checks are already passed and

114
00:04:36,060 --> 00:04:38,100
this time the attack would be to

115
00:04:38,100 --> 00:04:41,280
override the tag to point to a a

116
00:04:41,280 --> 00:04:43,320
different image a malicious one the

117
00:04:43,320 --> 00:04:46,620
attacker pushes and then once again the

118
00:04:46,620 --> 00:04:49,380
CD will just pull the image of the

119
00:04:49,380 --> 00:04:51,120
registry and deliver it directly to

120
00:04:51,120 --> 00:04:52,040
production

121
00:04:52,040 --> 00:04:55,199
now we have a problem and let's just see

122
00:04:55,199 --> 00:04:58,080
how that kind of process would look like

123
00:04:58,080 --> 00:05:00,000
from the code perspective

124
00:05:00,000 --> 00:05:02,400
so we have the original Docker file the

125
00:05:02,400 --> 00:05:04,860
the Alice users which is a simple hello

126
00:05:04,860 --> 00:05:07,139
world application on the other end the

127
00:05:07,139 --> 00:05:08,940
malicious Docker file is having some

128
00:05:08,940 --> 00:05:12,540
malicious code running inside it and

129
00:05:12,540 --> 00:05:14,699
actually the publishing process would be

130
00:05:14,699 --> 00:05:17,040
similar in both cases it would be a

131
00:05:17,040 --> 00:05:19,680
single a simple build where we also tag

132
00:05:19,680 --> 00:05:22,340
the image in this case the load and a

133
00:05:22,340 --> 00:05:25,440
v1.0 and then we push the image using

134
00:05:25,440 --> 00:05:28,320
the tag and on the other end of the CD

135
00:05:28,320 --> 00:05:31,259
and we'll simply use the image and tag

136
00:05:31,259 --> 00:05:35,520
to specify the image and deploy it now

137
00:05:35,520 --> 00:05:37,500
in order to understand that process

138
00:05:37,500 --> 00:05:39,840
let's ask ourselves How could a

139
00:05:39,840 --> 00:05:41,639
malicious actor actually get access to

140
00:05:41,639 --> 00:05:44,280
the registry so it could be more trivial

141
00:05:44,280 --> 00:05:46,139
than one would imagine it could be

142
00:05:46,139 --> 00:05:48,300
because of misconfigured systems such as

143
00:05:48,300 --> 00:05:50,820
the registry with an anonymous success

144
00:05:50,820 --> 00:05:53,759
allowed or just an unpatched version or

145
00:05:53,759 --> 00:05:55,080
otherwise it could be because of

146
00:05:55,080 --> 00:05:57,360
credentials compromise meaning

147
00:05:57,360 --> 00:06:00,600
credential slick or secretly call or

148
00:06:00,600 --> 00:06:02,220
otherwise it could be via social

149
00:06:02,220 --> 00:06:04,560
engineering phishing or and of an

150
00:06:04,560 --> 00:06:07,680
internal threat and now that we know how

151
00:06:07,680 --> 00:06:09,360
to get to the registry let's ask

152
00:06:09,360 --> 00:06:11,400
ourselves how to protect against the

153
00:06:11,400 --> 00:06:13,500
artifact poisoning

154
00:06:13,500 --> 00:06:16,560
so Verizon Bob the way to do it which

155
00:06:16,560 --> 00:06:18,780
are actually the CI and the CD would be

156
00:06:18,780 --> 00:06:21,539
to sign the image in the CI then upload

157
00:06:21,539 --> 00:06:24,240
that signature to the registry and in

158
00:06:24,240 --> 00:06:26,639
the CD we would verify the signature and

159
00:06:26,639 --> 00:06:28,680
only if the signature is valid and

160
00:06:28,680 --> 00:06:30,300
matches the image we will deploy the

161
00:06:30,300 --> 00:06:31,380
image

162
00:06:31,380 --> 00:06:34,860
now back to the pipeline we once again

163
00:06:34,860 --> 00:06:37,800
we push the image then we find it and

164
00:06:37,800 --> 00:06:40,919
only after signing it and the deployer

165
00:06:40,919 --> 00:06:43,139
would be able to verify the image and

166
00:06:43,139 --> 00:06:45,060
that and make sure that the signature

167
00:06:45,060 --> 00:06:46,919
matches and if everything checks out

168
00:06:46,919 --> 00:06:48,860
only then we can deploy to production

169
00:06:48,860 --> 00:06:52,500
how would we do that do it so as

170
00:06:52,500 --> 00:06:55,740
mentioned in the previous talk there is

171
00:06:55,740 --> 00:06:57,720
six to the rescue we can use projects

172
00:06:57,720 --> 00:07:00,060
such as 6o which is actually probably

173
00:07:00,060 --> 00:07:01,400
the most popular

174
00:07:01,400 --> 00:07:04,860
container signing project and it is open

175
00:07:04,860 --> 00:07:07,259
source and we can use it to both sign

176
00:07:07,259 --> 00:07:10,380
and verify the image and when it comes

177
00:07:10,380 --> 00:07:12,840
to call now on top of the build and push

178
00:07:12,840 --> 00:07:15,479
we also have cosine sine using the

179
00:07:15,479 --> 00:07:18,060
private key and specifying the image in

180
00:07:18,060 --> 00:07:20,460
the tag just like before and on the

181
00:07:20,460 --> 00:07:22,380
other end we have cosine verify using

182
00:07:22,380 --> 00:07:25,560
the public key to to verify the image

183
00:07:25,560 --> 00:07:28,139
and only if the verification succeed we

184
00:07:28,139 --> 00:07:30,840
would proceed to deployment

185
00:07:30,840 --> 00:07:34,020
now the thing is that there's still a

186
00:07:34,020 --> 00:07:36,539
problem here and to understand the

187
00:07:36,539 --> 00:07:39,120
problem we need to recall what is a tag

188
00:07:39,120 --> 00:07:42,900
so a tag is a label and that is used to

189
00:07:42,900 --> 00:07:45,000
describe the image and it's actually

190
00:07:45,000 --> 00:07:47,880
immutable reference to the image what it

191
00:07:47,880 --> 00:07:49,979
means is that anyone with right access

192
00:07:49,979 --> 00:07:52,800
to the registry can override any tag and

193
00:07:52,800 --> 00:07:55,080
make it point to any image in our case a

194
00:07:55,080 --> 00:07:58,740
malicious one on the other hand tags are

195
00:07:58,740 --> 00:08:01,199
what everyone loves to use it is Handy

196
00:08:01,199 --> 00:08:05,220
it is descriptive it is very useful and

197
00:08:05,220 --> 00:08:07,139
we do want to use text it is a

198
00:08:07,139 --> 00:08:08,880
convenient way to work with Docker

199
00:08:08,880 --> 00:08:11,400
images now unfortunately it is also the

200
00:08:11,400 --> 00:08:14,160
reason that this skin is compromised uh

201
00:08:14,160 --> 00:08:15,960
text open the door for the following

202
00:08:15,960 --> 00:08:17,880
race condition

203
00:08:17,880 --> 00:08:20,340
okay so what is the rice condition we

204
00:08:20,340 --> 00:08:22,680
have Mallory the malicious actor now

205
00:08:22,680 --> 00:08:25,740
instead of pushing it once Mallory uses

206
00:08:25,740 --> 00:08:28,500
a simple whileo and not only pushes the

207
00:08:28,500 --> 00:08:30,539
image continuously

208
00:08:30,539 --> 00:08:33,659
on the other end in the CI Alice would

209
00:08:33,659 --> 00:08:35,640
simply just with like we've seen before

210
00:08:35,640 --> 00:08:37,740
push the image once and then go and sign

211
00:08:37,740 --> 00:08:40,799
the image now because memory

212
00:08:40,799 --> 00:08:43,080
continuously pushes the image actually

213
00:08:43,080 --> 00:08:45,060
what would happen is that when we sign

214
00:08:45,060 --> 00:08:46,920
the image we'll sign the malicious one

215
00:08:46,920 --> 00:08:49,200
which is which is pushed after the

216
00:08:49,200 --> 00:08:51,480
original one so let's see how the race

217
00:08:51,480 --> 00:08:54,240
goes first we have Alice pushing the

218
00:08:54,240 --> 00:08:56,820
image like before then manually pushes

219
00:08:56,820 --> 00:08:58,740
the malicious one and overrides the tag

220
00:08:58,740 --> 00:09:01,560
to point to the malicious image now when

221
00:09:01,560 --> 00:09:04,920
alif finds the image or in our case the

222
00:09:04,920 --> 00:09:07,500
CI obviously then we sign the malicious

223
00:09:07,500 --> 00:09:10,380
image instead of the original one when

224
00:09:10,380 --> 00:09:13,200
we continue to the CD and try to verify

225
00:09:13,200 --> 00:09:14,700
the image we'll see that the signature

226
00:09:14,700 --> 00:09:17,040
is valid we actually sign it using the

227
00:09:17,040 --> 00:09:20,220
valid private key now because of that we

228
00:09:20,220 --> 00:09:21,899
would continue and actually run the

229
00:09:21,899 --> 00:09:24,120
malicious image in production

230
00:09:24,120 --> 00:09:27,180
so we've just lost the race and to

231
00:09:27,180 --> 00:09:28,620
understand how to deal with the program

232
00:09:28,620 --> 00:09:31,140
and how and how to solve it we need to

233
00:09:31,140 --> 00:09:34,200
now recall what is the Digest so a

234
00:09:34,200 --> 00:09:37,260
digest is an immutable Ash value and it

235
00:09:37,260 --> 00:09:39,300
corresponds to the content of the image

236
00:09:39,300 --> 00:09:42,920
so every image has a single us value

237
00:09:42,920 --> 00:09:46,800
corresponding to it and this digest hash

238
00:09:46,800 --> 00:09:48,180
value with the digest so it is

239
00:09:48,180 --> 00:09:52,080
associated to this specific image now

240
00:09:52,080 --> 00:09:54,779
the problem with digest is that they are

241
00:09:54,779 --> 00:09:57,540
long as you can see below and they are

242
00:09:57,540 --> 00:09:59,399
not handy they don't describe the image

243
00:09:59,399 --> 00:10:02,399
and the how to move from place to place

244
00:10:02,399 --> 00:10:04,740
and no one would want to specify them

245
00:10:04,740 --> 00:10:06,779
manually in different parts of the

246
00:10:06,779 --> 00:10:09,360
pipeline so hopefully we can find a

247
00:10:09,360 --> 00:10:11,580
solution to use digest but not to

248
00:10:11,580 --> 00:10:13,160
specify them manually

249
00:10:13,160 --> 00:10:16,019
and the reason we would want to just

250
00:10:16,019 --> 00:10:18,600
digest is because this way we can pin

251
00:10:18,600 --> 00:10:20,880
the specific version of the image that

252
00:10:20,880 --> 00:10:23,220
we want to use meaning we can use our

253
00:10:23,220 --> 00:10:25,380
original image and not being in doubt

254
00:10:25,380 --> 00:10:27,540
about whether the tag is now overridden

255
00:10:27,540 --> 00:10:30,779
by the malicious one and back to the

256
00:10:30,779 --> 00:10:33,480
code now instead of just pushing the

257
00:10:33,480 --> 00:10:36,540
image and let it forget about it we also

258
00:10:36,540 --> 00:10:38,519
take the output of the docker push

259
00:10:38,519 --> 00:10:41,640
command and this output also contains

260
00:10:41,640 --> 00:10:44,519
the digest of the freshly pushed image

261
00:10:44,519 --> 00:10:47,519
now from that output we will extract the

262
00:10:47,519 --> 00:10:50,160
digest and now when we want to sign the

263
00:10:50,160 --> 00:10:52,740
image we would use the digest to specify

264
00:10:52,740 --> 00:10:55,140
the image meaning that we can be certain

265
00:10:55,140 --> 00:10:57,720
that the image that we sign is actually

266
00:10:57,720 --> 00:10:59,839
the original one and not the one that

267
00:10:59,839 --> 00:11:02,220
not the one that might be overridden

268
00:11:02,220 --> 00:11:04,680
later on the other end of the process

269
00:11:04,680 --> 00:11:08,279
and we have the verify a command and

270
00:11:08,279 --> 00:11:10,320
from that output we can also extract

271
00:11:10,320 --> 00:11:12,779
once again the digest and when we deploy

272
00:11:12,779 --> 00:11:15,360
them and we would use the digest to

273
00:11:15,360 --> 00:11:17,399
specify which image we want to deploy

274
00:11:17,399 --> 00:11:20,040
now you can notice that when we verify

275
00:11:20,040 --> 00:11:24,480
it we actually use the tag but then we

276
00:11:24,480 --> 00:11:26,399
know that the ones the damage that we

277
00:11:26,399 --> 00:11:29,700
verified is the one that we got in the

278
00:11:29,700 --> 00:11:32,459
output and this is the one that we get

279
00:11:32,459 --> 00:11:35,220
in the digest now just something to

280
00:11:35,220 --> 00:11:37,800
notice here is that no point in the

281
00:11:37,800 --> 00:11:40,200
process neither neither in the signing

282
00:11:40,200 --> 00:11:42,300
or the verification we didn't actually

283
00:11:42,300 --> 00:11:44,940
specify the digest manually we still use

284
00:11:44,940 --> 00:11:47,240
tags like model like modern pipelines

285
00:11:47,240 --> 00:11:51,060
but we still got the digest when we

286
00:11:51,060 --> 00:11:52,800
needed to sign the image and to actually

287
00:11:52,800 --> 00:11:55,800
deploy it this way we get the the best

288
00:11:55,800 --> 00:11:58,500
from both Wars and when we go back to

289
00:11:58,500 --> 00:12:01,620
the prime pipeline to see how that go so

290
00:12:01,620 --> 00:12:04,380
once again Alice pushes the image and

291
00:12:04,380 --> 00:12:06,660
now we can see that it also as a digest

292
00:12:06,660 --> 00:12:10,140
Associated to it and now once again

293
00:12:10,140 --> 00:12:12,959
Mallory pushes the malicious image and

294
00:12:12,959 --> 00:12:16,140
makes the tag to point to the malicious

295
00:12:16,140 --> 00:12:17,180
image

296
00:12:17,180 --> 00:12:20,640
but the difference here is that now that

297
00:12:20,640 --> 00:12:22,920
we sign the image we actually find the

298
00:12:22,920 --> 00:12:24,540
original image because we specified

299
00:12:24,540 --> 00:12:27,420
using the digest and not the tag and

300
00:12:27,420 --> 00:12:29,640
what it means is that when we'll go to

301
00:12:29,640 --> 00:12:32,880
the CD and we need to verify the image

302
00:12:32,880 --> 00:12:35,399
and we do it using the tag as we've seen

303
00:12:35,399 --> 00:12:37,320
we'll see that there is no matching

304
00:12:37,320 --> 00:12:39,720
signature to that image because we

305
00:12:39,720 --> 00:12:42,300
didn't find the malicious image we only

306
00:12:42,300 --> 00:12:45,000
signed the original one now with that

307
00:12:45,000 --> 00:12:46,560
knowledge we can actually abort the

308
00:12:46,560 --> 00:12:48,720
deployment and prevent the malicious

309
00:12:48,720 --> 00:12:50,940
code from running in production

310
00:12:50,940 --> 00:12:54,480
okay so let's have just a quick summary

311
00:12:54,480 --> 00:12:57,240
of the different steps we went to

312
00:12:57,240 --> 00:12:59,820
at first we had no signing at all and

313
00:12:59,820 --> 00:13:01,620
meaning we could have artifact poisoning

314
00:13:01,620 --> 00:13:04,800
pretty easily and then we use tax which

315
00:13:04,800 --> 00:13:07,500
is probably the most intuitive way to

316
00:13:07,500 --> 00:13:10,680
use Dockers and we used it to sign the

317
00:13:10,680 --> 00:13:13,459
image but unfortunately as we've seen it

318
00:13:13,459 --> 00:13:16,019
enables us to it enables sexually

319
00:13:16,019 --> 00:13:18,720
demolition factor to use the rate

320
00:13:18,720 --> 00:13:21,420
condition to still poison the artifact

321
00:13:21,420 --> 00:13:24,779
finally we'll digest and this way we

322
00:13:24,779 --> 00:13:28,320
just shut the door on a memory and no

323
00:13:28,320 --> 00:13:32,060
artifact poisoning is allowed you

324
00:13:32,060 --> 00:13:36,200
okay so when we discovered this problem

325
00:13:36,200 --> 00:13:39,600
we then went went to the community and

326
00:13:39,600 --> 00:13:40,980
wanted to make sure that no one is

327
00:13:40,980 --> 00:13:44,459
impacted by that race condition so first

328
00:13:44,459 --> 00:13:46,980
first there is the fixed project and we

329
00:13:46,980 --> 00:13:48,779
went and reported the case to the

330
00:13:48,779 --> 00:13:50,720
project actually in the slack Channel

331
00:13:50,720 --> 00:13:54,540
and now when users use cosine to sign

332
00:13:54,540 --> 00:13:57,959
images using tags it would warn them and

333
00:13:57,959 --> 00:14:00,899
after a compatibility period the the

334
00:14:00,899 --> 00:14:04,320
support for containers signing using

335
00:14:04,320 --> 00:14:05,940
tags would be completely removed from

336
00:14:05,940 --> 00:14:09,300
cosine in addition we went to the goal

337
00:14:09,300 --> 00:14:12,480
is a project and we contributed a patch

338
00:14:12,480 --> 00:14:14,820
that makes sure to Output the digest of

339
00:14:14,820 --> 00:14:17,700
generated Docker images which means that

340
00:14:17,700 --> 00:14:19,800
now users can actually take the digest

341
00:14:19,800 --> 00:14:21,720
and use it to sign the images that they

342
00:14:21,720 --> 00:14:26,040
generate and finally we went to the

343
00:14:26,040 --> 00:14:28,380
Sansa project and make sure to update

344
00:14:28,380 --> 00:14:31,320
the documentation to also use the digest

345
00:14:31,320 --> 00:14:34,200
from the the release of a process and

346
00:14:34,200 --> 00:14:36,899
use it when for provenance generation in

347
00:14:36,899 --> 00:14:40,440
Sulfur now in addition to these two

348
00:14:40,440 --> 00:14:44,040
projects we also open the issues for the

349
00:14:44,040 --> 00:14:46,320
docker project and to make sure that

350
00:14:46,320 --> 00:14:47,880
this kind of phrase condition does not

351
00:14:47,880 --> 00:14:50,699
happen with Docker trust meaning that if

352
00:14:50,699 --> 00:14:53,699
anyone wants to sign a remote tag it

353
00:14:53,699 --> 00:14:55,680
would not be allowed and also with

354
00:14:55,680 --> 00:14:57,959
notary project which is pretty similar

355
00:14:57,959 --> 00:15:01,500
to six store in many aspects and we also

356
00:15:01,500 --> 00:15:05,220
open the issue and made sure not only to

357
00:15:05,220 --> 00:15:09,120
prevent and users about tax but also to

358
00:15:09,120 --> 00:15:12,060
update the documentation so user can be

359
00:15:12,060 --> 00:15:13,980
aware of the problem

360
00:15:13,980 --> 00:15:17,160
finally what should you do about it so

361
00:15:17,160 --> 00:15:18,959
first you need to keep a tight grip on

362
00:15:18,959 --> 00:15:20,820
your secrets and your access keys and to

363
00:15:20,820 --> 00:15:23,279
protect your Registries so the

364
00:15:23,279 --> 00:15:24,899
prerequisites that we had for that

365
00:15:24,899 --> 00:15:28,380
attack won't be met and but still even

366
00:15:28,380 --> 00:15:31,620
if you do that things might go wrong and

367
00:15:31,620 --> 00:15:34,320
secrets might leak so make sure to sign

368
00:15:34,320 --> 00:15:36,420
and to verify your artifact in your

369
00:15:36,420 --> 00:15:38,760
pipelines and make sure to do that

370
00:15:38,760 --> 00:15:42,360
correctly you can digest and no tags and

371
00:15:42,360 --> 00:15:45,540
finally I encourage you to be more aware

372
00:15:45,540 --> 00:15:47,399
of this kind of software supply chain

373
00:15:47,399 --> 00:15:48,500
security

374
00:15:48,500 --> 00:15:51,959
issues and risks and you can do it by

375
00:15:51,959 --> 00:15:54,240
listening to talks like and going to

376
00:15:54,240 --> 00:15:56,459
conferences like this one or reading

377
00:15:56,459 --> 00:15:58,800
more you can read more in our blog and

378
00:15:58,800 --> 00:16:01,199
there is a lot of content in the theater

379
00:16:01,199 --> 00:16:04,440
these days and finally I want to thank

380
00:16:04,440 --> 00:16:06,000
you for everything and I want to thank

381
00:16:06,000 --> 00:16:09,180
again devcircum for hosting me here and

382
00:16:09,180 --> 00:16:11,339
I hope you enjoyed it and let me know if

383
00:16:11,339 --> 00:16:13,940
you have any questions

384
00:16:18,300 --> 00:16:21,480
excellent excellent talk thank you y'all

385
00:16:21,480 --> 00:16:23,060
thank you

386
00:16:23,060 --> 00:16:26,639
all sound effect going it's it's a scary

387
00:16:26,639 --> 00:16:28,440
to think of all the different ways

388
00:16:28,440 --> 00:16:31,560
people can basically trick you into uh

389
00:16:31,560 --> 00:16:33,899
deploying malicious images it's pretty

390
00:16:33,899 --> 00:16:35,459
insane

391
00:16:35,459 --> 00:16:39,660
like we do we have any um is there any

392
00:16:39,660 --> 00:16:42,120
um occurrences that we know of where

393
00:16:42,120 --> 00:16:45,600
somebody accidentally signed a poison

394
00:16:45,600 --> 00:16:47,579
version and it got out into the wild the

395
00:16:47,579 --> 00:16:49,320
way that you described

396
00:16:49,320 --> 00:16:53,519
uh no so actually we haven't found such

397
00:16:53,519 --> 00:16:55,980
cases in the while obviously there are

398
00:16:55,980 --> 00:16:59,240
the infamous code code attack where

399
00:16:59,240 --> 00:17:01,740
artifact poisoning in resistive ready

400
00:17:01,740 --> 00:17:04,319
skills took place but we don't know this

401
00:17:04,319 --> 00:17:08,720
attack being taken advantage of

402
00:17:09,179 --> 00:17:11,640
got it yeah

403
00:17:11,640 --> 00:17:14,099
yeah it's a scary topic especially since

404
00:17:14,099 --> 00:17:15,720
you can really trick people into signing

405
00:17:15,720 --> 00:17:18,179
the malicious images as well which is I

406
00:17:18,179 --> 00:17:20,160
think something people don't expect it

407
00:17:20,160 --> 00:17:22,380
always seems to me so maybe I know you

408
00:17:22,380 --> 00:17:24,059
have a lot of background in this but it

409
00:17:24,059 --> 00:17:25,319
always seems interesting when you're

410
00:17:25,319 --> 00:17:27,599
talking about uh cryptographically

411
00:17:27,599 --> 00:17:29,820
signing things in general because I

412
00:17:29,820 --> 00:17:32,360
think most software developers view a

413
00:17:32,360 --> 00:17:34,320
cryptographic signature is essentially

414
00:17:34,320 --> 00:17:36,360
being infallible you know and I think

415
00:17:36,360 --> 00:17:37,679
the reality is there's so many different

416
00:17:37,679 --> 00:17:39,960
ways to abuse that or trick it

417
00:17:39,960 --> 00:17:41,460
um you know both in terms of code

418
00:17:41,460 --> 00:17:43,919
signing even when you're using gpg keys

419
00:17:43,919 --> 00:17:45,960
on GitHub to everything like artifact

420
00:17:45,960 --> 00:17:48,919
signing it's it's just scary out there

421
00:17:48,919 --> 00:17:52,080
employee in my opinion actually when you

422
00:17:52,080 --> 00:17:54,600
find a malicious image it's much worse

423
00:17:54,600 --> 00:17:57,080
because when you find things as you said

424
00:17:57,080 --> 00:18:00,539
one would trust it much more than a an

425
00:18:00,539 --> 00:18:02,760
unsigned image and then you would just

426
00:18:02,760 --> 00:18:05,940
deploy it directly to production and do

427
00:18:05,940 --> 00:18:07,980
much more dangerous stuff with it so

428
00:18:07,980 --> 00:18:09,240
yeah

429
00:18:09,240 --> 00:18:11,460
and there's no possibility for somebody

430
00:18:11,460 --> 00:18:14,400
to fake the the digest right it

431
00:18:14,400 --> 00:18:16,200
literally has to have the same exact

432
00:18:16,200 --> 00:18:21,360
contents of right so using like sha 256

433
00:18:21,360 --> 00:18:24,600
yeah so you get you get like two to the

434
00:18:24,600 --> 00:18:29,940
one to 128 so it's I mean it's

435
00:18:29,940 --> 00:18:32,400
practically impossible

436
00:18:32,400 --> 00:18:33,480
yeah

437
00:18:33,480 --> 00:18:35,760
unless they're using md5 with tons of

438
00:18:35,760 --> 00:18:37,559
collisions and stuff and just causing

439
00:18:37,559 --> 00:18:40,080
all sorts of Havoc everywhere yeah I use

440
00:18:40,080 --> 00:18:43,740
base64 encoding that's that's yeah I

441
00:18:43,740 --> 00:18:45,840
heard uh could you comment on this I

442
00:18:45,840 --> 00:18:47,760
heard rot 13 was the new best standard

443
00:18:47,760 --> 00:18:50,160
for modern encryption any commentary

444
00:18:50,160 --> 00:18:52,400
there

445
00:18:53,640 --> 00:18:57,080
please don't use Raw 13.

446
00:18:57,360 --> 00:18:59,039
some quick quick comments from the chat

447
00:18:59,039 --> 00:19:00,960
I see Gabriel over on hop and says props

448
00:19:00,960 --> 00:19:02,400
on the graphics use changes from the

449
00:19:02,400 --> 00:19:04,620
usual Alice Bob graphs on Wiki so there

450
00:19:04,620 --> 00:19:06,000
you go thumbs up on that and then

451
00:19:06,000 --> 00:19:07,740
somebody over on YouTube by the name of

452
00:19:07,740 --> 00:19:10,320
Micah Silverman says great talk doll so

453
00:19:10,320 --> 00:19:13,140
uh thanks there you go thanks so much

454
00:19:13,140 --> 00:19:15,720
Carl it was excellent yeah thanks for

455
00:19:15,720 --> 00:19:17,700
joining us very much for having me

456
00:19:17,700 --> 00:19:22,460
all right see ya okay bye-bye

457
00:19:23,580 --> 00:19:25,200
all right so Micah do you want to

458
00:19:25,200 --> 00:19:28,280
introduce our next speaker

