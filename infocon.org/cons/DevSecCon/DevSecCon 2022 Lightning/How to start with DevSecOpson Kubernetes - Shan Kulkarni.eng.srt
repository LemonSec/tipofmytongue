1
00:00:00,000 --> 00:00:01,979
and Surya if you wanted to do the honors

2
00:00:01,979 --> 00:00:04,560
of introducing our next guest yeah sure

3
00:00:04,560 --> 00:00:07,140
I'll be introducing two lightning talks

4
00:00:07,140 --> 00:00:09,720
at once uh so first we have shantana

5
00:00:09,720 --> 00:00:12,000
Kulkarni who's a cloud security engineer

6
00:00:12,000 --> 00:00:16,020
at CMD Solutions Australia uh he has

7
00:00:16,020 --> 00:00:18,240
strong hands-on experience in software

8
00:00:18,240 --> 00:00:20,640
and security engineering as well as

9
00:00:20,640 --> 00:00:22,500
building and running systems on

10
00:00:22,500 --> 00:00:26,100
kubernetes and AWS he's passionate about

11
00:00:26,100 --> 00:00:29,880
all things cloud devops and security and

12
00:00:29,880 --> 00:00:31,800
his talk is on how to start with

13
00:00:31,800 --> 00:00:34,920
devsecops on kubernetes it's a pretty

14
00:00:34,920 --> 00:00:36,680
interesting talk

15
00:00:36,680 --> 00:00:38,880
I think we'll be all right to just have

16
00:00:38,880 --> 00:00:40,559
the one introduction and nothing Randall

17
00:00:40,559 --> 00:00:42,239
you can do the one once um shantana

18
00:00:42,239 --> 00:00:45,019
finishes his talk

19
00:00:49,980 --> 00:00:53,520
okay hey hey Sean how are you hey hey

20
00:00:53,520 --> 00:00:56,100
she'll be good how are you thank you for

21
00:00:56,100 --> 00:00:57,660
joining us and we're looking forward to

22
00:00:57,660 --> 00:01:00,239
you know your talk about devsecoffs and

23
00:01:00,239 --> 00:01:02,399
kubernetes as well I think two topics

24
00:01:02,399 --> 00:01:03,359
that you know everyone's talking about

25
00:01:03,359 --> 00:01:05,339
and I think Humanities is you know hot

26
00:01:05,339 --> 00:01:08,340
no matter where you go so we will uh put

27
00:01:08,340 --> 00:01:10,920
your slides up here and um Surya and I

28
00:01:10,920 --> 00:01:12,119
will go to the backstage and let you

29
00:01:12,119 --> 00:01:13,439
take it away

30
00:01:13,439 --> 00:01:15,720
awesome uh can can my screen is my

31
00:01:15,720 --> 00:01:17,220
screen visible yeah

32
00:01:17,220 --> 00:01:20,179
yeah awesome cool

33
00:01:20,520 --> 00:01:22,080
all right cool I'm just gonna get

34
00:01:22,080 --> 00:01:24,180
started because I I can't see the um

35
00:01:24,180 --> 00:01:26,700
stream yard but um yeah hey everyone uh

36
00:01:26,700 --> 00:01:29,220
my name's Sean I'm a uh Cloud security

37
00:01:29,220 --> 00:01:31,500
consultant um do a lot of cloud security

38
00:01:31,500 --> 00:01:33,119
and platform engineering these days

39
00:01:33,119 --> 00:01:34,320
although it used to be a software

40
00:01:34,320 --> 00:01:36,659
engineer as well I'm working in AWS

41
00:01:36,659 --> 00:01:38,280
Consulting partner here in here in

42
00:01:38,280 --> 00:01:40,979
Sydney called CMD it's part of a broader

43
00:01:40,979 --> 00:01:43,079
Tech and consultancy group called mental

44
00:01:43,079 --> 00:01:44,100
group

45
00:01:44,100 --> 00:01:47,040
um and I'm also founding a devsecops

46
00:01:47,040 --> 00:01:49,439
orchestration uh platform called nullify

47
00:01:49,439 --> 00:01:53,460
on the side and um yeah I guess like the

48
00:01:53,460 --> 00:01:55,560
Genesis of this talk was

49
00:01:55,560 --> 00:01:56,939
um in my experience working with

50
00:01:56,939 --> 00:01:58,920
customers both you know from startups

51
00:01:58,920 --> 00:02:00,960
all the way to Enterprises

52
00:02:00,960 --> 00:02:02,579
um I really found that like container

53
00:02:02,579 --> 00:02:05,939
security is something that uh especially

54
00:02:05,939 --> 00:02:07,740
Greenfield customers have difficulty

55
00:02:07,740 --> 00:02:09,598
starting with so

56
00:02:09,598 --> 00:02:11,459
um maybe they're like experienced

57
00:02:11,459 --> 00:02:13,620
building containers like containerized

58
00:02:13,620 --> 00:02:15,780
workloads or maybe they've just started

59
00:02:15,780 --> 00:02:17,879
containerizing their workloads

60
00:02:17,879 --> 00:02:19,200
um and they're just getting started with

61
00:02:19,200 --> 00:02:21,000
building on kubernetes

62
00:02:21,000 --> 00:02:23,040
um overall like they're having a bit of

63
00:02:23,040 --> 00:02:24,900
difficulty in conceptualizing security

64
00:02:24,900 --> 00:02:28,200
and how to secure their kubernetes

65
00:02:28,200 --> 00:02:30,840
environments so yeah that's kind of um

66
00:02:30,840 --> 00:02:32,459
what I aim to

67
00:02:32,459 --> 00:02:34,440
give to everyone today is whether you're

68
00:02:34,440 --> 00:02:35,760
like a security engineer a cloud

69
00:02:35,760 --> 00:02:37,620
engineer or

70
00:02:37,620 --> 00:02:39,060
um even just like a software engineer

71
00:02:39,060 --> 00:02:41,459
how to start like a level 100 how to

72
00:02:41,459 --> 00:02:43,680
start thinking about container security

73
00:02:43,680 --> 00:02:46,560
and how to get started right away

74
00:02:46,560 --> 00:02:49,260
um cool so I guess this is a devsecops

75
00:02:49,260 --> 00:02:50,519
conference so I won't spend too much

76
00:02:50,519 --> 00:02:52,200
time defining what

77
00:02:52,200 --> 00:02:54,000
um the essence of Shifting left and and

78
00:02:54,000 --> 00:02:56,459
devsecops is obviously we all know that

79
00:02:56,459 --> 00:02:58,800
by um you know adding security testing

80
00:02:58,800 --> 00:03:02,040
earlier in the sdlc We Can Save A Lot on

81
00:03:02,040 --> 00:03:03,360
um both vulnerabilities and production

82
00:03:03,360 --> 00:03:05,220
as well as like productivity and

83
00:03:05,220 --> 00:03:07,560
increased productivity and reduce

84
00:03:07,560 --> 00:03:09,120
um developer friction when adding

85
00:03:09,120 --> 00:03:11,700
security testing to your to your

86
00:03:11,700 --> 00:03:14,220
environments

87
00:03:14,220 --> 00:03:16,260
um despite this like when I when I go

88
00:03:16,260 --> 00:03:18,000
and I work with customers

89
00:03:18,000 --> 00:03:19,379
um you know who are

90
00:03:19,379 --> 00:03:21,300
especially ones who are experiencing a

91
00:03:21,300 --> 00:03:22,500
lot of scale

92
00:03:22,500 --> 00:03:24,720
um you know like they have let's say 500

93
00:03:24,720 --> 00:03:26,159
Developers for everyone security

94
00:03:26,159 --> 00:03:29,220
engineer consistently uh observing this

95
00:03:29,220 --> 00:03:31,500
Builders the security ratio disparity

96
00:03:31,500 --> 00:03:34,379
which as I mentioned grows as the

97
00:03:34,379 --> 00:03:36,480
organization grows as well so like

98
00:03:36,480 --> 00:03:38,459
obviously devsecops is great but there

99
00:03:38,459 --> 00:03:40,980
Still Remains kind of persistent silos

100
00:03:40,980 --> 00:03:43,019
particularly between like Cloud Ops and

101
00:03:43,019 --> 00:03:45,000
secops teams as well as

102
00:03:45,000 --> 00:03:46,680
um you know the devops and appsec teams

103
00:03:46,680 --> 00:03:48,900
as well and ultimately what you get is

104
00:03:48,900 --> 00:03:51,420
uh just like these cultural silos that

105
00:03:51,420 --> 00:03:53,099
where the developers are doing their own

106
00:03:53,099 --> 00:03:55,560
thing the appsec teams are not really

107
00:03:55,560 --> 00:03:57,120
understanding how the devs are working

108
00:03:57,120 --> 00:04:00,720
and um the cloud Ops teams who are like

109
00:04:00,720 --> 00:04:03,000
working very much like async

110
00:04:03,000 --> 00:04:05,099
um and a bit out of sync with what the

111
00:04:05,099 --> 00:04:06,959
developer teams are building in terms of

112
00:04:06,959 --> 00:04:09,420
like Cloud infrastructure as well

113
00:04:09,420 --> 00:04:12,599
um so yeah like everyone is

114
00:04:12,599 --> 00:04:14,159
um kind of struggling to speak the same

115
00:04:14,159 --> 00:04:15,959
language and

116
00:04:15,959 --> 00:04:17,459
um while this is like a generic problem

117
00:04:17,459 --> 00:04:20,160
I think a really good symptom of this is

118
00:04:20,160 --> 00:04:21,839
container security or at least it

119
00:04:21,839 --> 00:04:23,160
becomes evident when you look at how

120
00:04:23,160 --> 00:04:24,840
container security is being approached

121
00:04:24,840 --> 00:04:28,380
in a lot of modern organizations so as

122
00:04:28,380 --> 00:04:30,300
we all know developers are now

123
00:04:30,300 --> 00:04:32,820
responsible for like securing their own

124
00:04:32,820 --> 00:04:34,259
code and infrastructure like this is a

125
00:04:34,259 --> 00:04:35,460
direct

126
00:04:35,460 --> 00:04:37,139
um I suppose implication of the cloud

127
00:04:37,139 --> 00:04:39,000
operating model everything is code

128
00:04:39,000 --> 00:04:42,300
everything is an API and seemingly

129
00:04:42,300 --> 00:04:44,520
overnight developers have had to own a

130
00:04:44,520 --> 00:04:46,979
lot more than just the security of their

131
00:04:46,979 --> 00:04:49,199
code like security of anything that they

132
00:04:49,199 --> 00:04:53,520
write infrastructure configs can then be

133
00:04:53,520 --> 00:04:55,259
um can then turn into a threat surface

134
00:04:55,259 --> 00:04:58,560
if it's if it's not secure so kind of

135
00:04:58,560 --> 00:05:01,199
given this if we drill down deeper into

136
00:05:01,199 --> 00:05:04,080
like how containers I suppose exemplify

137
00:05:04,080 --> 00:05:06,780
this change containers really change the

138
00:05:06,780 --> 00:05:08,639
application security model

139
00:05:08,639 --> 00:05:10,440
um you know we the way that we build

140
00:05:10,440 --> 00:05:12,180
containerized workloads is very

141
00:05:12,180 --> 00:05:14,400
different like we never patch container

142
00:05:14,400 --> 00:05:16,320
running containers in place we always

143
00:05:16,320 --> 00:05:19,380
like rebuild and redeploy and we also

144
00:05:19,380 --> 00:05:22,199
like rebuild retest and like redeploy as

145
00:05:22,199 --> 00:05:24,660
quickly as possible and they're often

146
00:05:24,660 --> 00:05:26,820
like short-lived ephemeral sometimes

147
00:05:26,820 --> 00:05:29,520
stateless workloads that are spun up and

148
00:05:29,520 --> 00:05:32,220
down like very rapidly so obviously like

149
00:05:32,220 --> 00:05:34,500
there's a bit of a sort of lag in

150
00:05:34,500 --> 00:05:36,979
between like how traditional security

151
00:05:36,979 --> 00:05:39,479
testing like methodologies and life

152
00:05:39,479 --> 00:05:40,800
cycles

153
00:05:40,800 --> 00:05:43,320
um are like evolving to like cater for

154
00:05:43,320 --> 00:05:46,259
new workflows particularly around

155
00:05:46,259 --> 00:05:48,360
um how developers are built and deployed

156
00:05:48,360 --> 00:05:49,800
at scale

157
00:05:49,800 --> 00:05:51,300
sorry how containers are built and

158
00:05:51,300 --> 00:05:52,979
deployed at scale

159
00:05:52,979 --> 00:05:54,360
um and if we kind of double click double

160
00:05:54,360 --> 00:05:56,100
click on this even further so the same

161
00:05:56,100 --> 00:05:57,840
way that containers change

162
00:05:57,840 --> 00:05:59,419
um the application security model

163
00:05:59,419 --> 00:06:01,500
kubernetes changes the operational

164
00:06:01,500 --> 00:06:03,479
security model so

165
00:06:03,479 --> 00:06:05,460
um you know we've gone from like static

166
00:06:05,460 --> 00:06:07,800
workloads and and um you know static IP

167
00:06:07,800 --> 00:06:10,199
addresses to like fully declarative

168
00:06:10,199 --> 00:06:11,580
Dynamic

169
00:06:11,580 --> 00:06:13,800
um and automated workloads which you

170
00:06:13,800 --> 00:06:16,320
know are deployed and spawned down spun

171
00:06:16,320 --> 00:06:19,380
up and spun down through an API server

172
00:06:19,380 --> 00:06:21,360
um application configs and deployments

173
00:06:21,360 --> 00:06:22,860
are managed in like completely different

174
00:06:22,860 --> 00:06:25,319
ways so I want I might want three

175
00:06:25,319 --> 00:06:26,699
replicas

176
00:06:26,699 --> 00:06:29,280
um on one particular deployment and then

177
00:06:29,280 --> 00:06:31,380
to scale up and down but then I don't

178
00:06:31,380 --> 00:06:33,060
know the IP addresses of that instance

179
00:06:33,060 --> 00:06:35,280
that has those deployments on that

180
00:06:35,280 --> 00:06:37,139
particular node containers can get

181
00:06:37,139 --> 00:06:39,060
deployed across nodes in your cluster

182
00:06:39,060 --> 00:06:41,160
and overall this makes reasoning about

183
00:06:41,160 --> 00:06:44,220
Security in uh kubernetes environments a

184
00:06:44,220 --> 00:06:46,080
little bit harder at least from a

185
00:06:46,080 --> 00:06:48,240
traditional kind of cyber security

186
00:06:48,240 --> 00:06:50,880
testing perspective and so for example

187
00:06:50,880 --> 00:06:52,380
you know working with large Enterprises

188
00:06:52,380 --> 00:06:54,620
particularly I see things where

189
00:06:54,620 --> 00:06:57,360
developer teams and devops teams are

190
00:06:57,360 --> 00:06:59,880
like having almost no contact with their

191
00:06:59,880 --> 00:07:02,220
security teams maybe like a once a year

192
00:07:02,220 --> 00:07:04,440
pen test and ultimately they're just

193
00:07:04,440 --> 00:07:05,940
like not understanding their security

194
00:07:05,940 --> 00:07:07,740
requirements and obligations around

195
00:07:07,740 --> 00:07:11,160
building secure containerized workloads

196
00:07:11,160 --> 00:07:13,940
um so yeah they're dynamic they require

197
00:07:13,940 --> 00:07:17,340
fully full automation to secure and

198
00:07:17,340 --> 00:07:19,080
because of this like because of the way

199
00:07:19,080 --> 00:07:20,720
that we reason about these workloads

200
00:07:20,720 --> 00:07:23,220
they're often opaque to like traditional

201
00:07:23,220 --> 00:07:25,500
security testing tools

202
00:07:25,500 --> 00:07:29,099
um and um and workflows as well so yeah

203
00:07:29,099 --> 00:07:30,599
can't reason about them from like a

204
00:07:30,599 --> 00:07:33,360
traditional cyber perspective and we

205
00:07:33,360 --> 00:07:35,340
need to we need to build in automation

206
00:07:35,340 --> 00:07:37,380
like as soon as as early as possible in

207
00:07:37,380 --> 00:07:40,319
the sdlc in order to secure um like

208
00:07:40,319 --> 00:07:42,240
systems like kubernetes which can get

209
00:07:42,240 --> 00:07:46,380
really really complex at scale to manage

210
00:07:46,380 --> 00:07:47,639
so

211
00:07:47,639 --> 00:07:49,919
um I don't know if if anyone else agrees

212
00:07:49,919 --> 00:07:52,199
with me when looking at this but

213
00:07:52,199 --> 00:07:53,940
um this looks pretty scary at a first

214
00:07:53,940 --> 00:07:55,800
glance this is the

215
00:07:55,800 --> 00:07:57,539
um this is a data flow diagram published

216
00:07:57,539 --> 00:08:00,960
by the cncf of a generic kubernetes

217
00:08:00,960 --> 00:08:03,120
cluster deployment so one control plane

218
00:08:03,120 --> 00:08:06,060
one deployment and three worker nodes so

219
00:08:06,060 --> 00:08:08,819
no multi-tenancy and nothing kind of

220
00:08:08,819 --> 00:08:10,919
particularly complex or difficult but

221
00:08:10,919 --> 00:08:14,340
you can see in even such a simple sample

222
00:08:14,340 --> 00:08:16,560
deployment of a kubernetes environment

223
00:08:16,560 --> 00:08:19,199
there's a lot of trust boundaries both

224
00:08:19,199 --> 00:08:22,259
at the container runtime as well as like

225
00:08:22,259 --> 00:08:24,000
the container orchestration layer as

226
00:08:24,000 --> 00:08:26,759
well so like it's not it's not hard to

227
00:08:26,759 --> 00:08:29,280
see why in a world that in a world where

228
00:08:29,280 --> 00:08:31,319
developers already see security as a

229
00:08:31,319 --> 00:08:33,899
blocker or as friction are finding even

230
00:08:33,899 --> 00:08:36,440
further difficulty in reasoning about

231
00:08:36,440 --> 00:08:38,700
securing their kubernetes workloads

232
00:08:38,700 --> 00:08:40,380
because like as you can see it's it's

233
00:08:40,380 --> 00:08:42,120
kind of a bit scary even for security

234
00:08:42,120 --> 00:08:45,080
teams to get started to get started with

235
00:08:45,080 --> 00:08:47,640
and so while there are kind of things

236
00:08:47,640 --> 00:08:50,760
like you know CIS benchmarks I know

237
00:08:50,760 --> 00:08:52,100
Microsoft

238
00:08:52,100 --> 00:08:54,540
published some nice threat models and

239
00:08:54,540 --> 00:08:56,760
you know kind of attack matrices and

240
00:08:56,760 --> 00:08:58,440
things like that on how to understand

241
00:08:58,440 --> 00:09:01,380
like where what to secure and how

242
00:09:01,380 --> 00:09:03,480
um overall it still becomes very like

243
00:09:03,480 --> 00:09:05,940
difficult it's still a very high barrier

244
00:09:05,940 --> 00:09:08,519
of adoption for the people building and

245
00:09:08,519 --> 00:09:10,440
operating these workloads to get started

246
00:09:10,440 --> 00:09:12,480
with thinking about how to secure them

247
00:09:12,480 --> 00:09:15,060
so there's some great projects in the

248
00:09:15,060 --> 00:09:16,860
space around like with control plane and

249
00:09:16,860 --> 00:09:20,880
deciduous around like attack trees and

250
00:09:20,880 --> 00:09:23,160
um you know automated and visualized

251
00:09:23,160 --> 00:09:25,800
attack trees using like graphviz to make

252
00:09:25,800 --> 00:09:27,600
to make it very clear like what an

253
00:09:27,600 --> 00:09:29,399
example attack path could be for a

254
00:09:29,399 --> 00:09:32,459
compromise like for a kubernetes exploit

255
00:09:32,459 --> 00:09:34,680
um and as I said like you know there's

256
00:09:34,680 --> 00:09:37,560
threat matrices published by some

257
00:09:37,560 --> 00:09:39,180
um really prominent like Frameworks and

258
00:09:39,180 --> 00:09:42,120
benchmarks out there but overall not

259
00:09:42,120 --> 00:09:44,580
very developer friendly bit opaque to

260
00:09:44,580 --> 00:09:46,980
get started with and obviously as this

261
00:09:46,980 --> 00:09:49,080
complexity grows like you have you know

262
00:09:49,080 --> 00:09:50,820
environments which have multiple

263
00:09:50,820 --> 00:09:53,779
clusters maybe a staging cluster or a

264
00:09:53,779 --> 00:09:56,940
production cluster maybe a organization

265
00:09:56,940 --> 00:09:59,160
is doing namespace as a service or even

266
00:09:59,160 --> 00:10:01,080
cluster as a service you can see it

267
00:10:01,080 --> 00:10:03,240
getting very out of hand quickly when

268
00:10:03,240 --> 00:10:04,740
starting to think about like how to get

269
00:10:04,740 --> 00:10:06,480
started with with securing your

270
00:10:06,480 --> 00:10:08,459
kubernetes cluster

271
00:10:08,459 --> 00:10:11,519
so I'm proposing a very simple almost

272
00:10:11,519 --> 00:10:13,560
like a level one threat model for

273
00:10:13,560 --> 00:10:17,040
kubernetes this is actually graciously

274
00:10:17,040 --> 00:10:19,680
appropriated from ronamosa's talk at Co

275
00:10:19,680 --> 00:10:22,080
icon New Zealand called kubernetes on

276
00:10:22,080 --> 00:10:24,180
hard mode and in that talk he Dives a

277
00:10:24,180 --> 00:10:25,560
lot deeper into multi-tenancy

278
00:10:25,560 --> 00:10:27,240
specifically but I really like this

279
00:10:27,240 --> 00:10:30,660
approach that the NSA and slicer

280
00:10:30,660 --> 00:10:33,000
published on the three main threat

281
00:10:33,000 --> 00:10:36,120
actors in uh when it comes to kubernetes

282
00:10:36,120 --> 00:10:38,459
clusters so the main reasons clusters

283
00:10:38,459 --> 00:10:40,620
are attacked for data theft and data

284
00:10:40,620 --> 00:10:43,200
compute theft so these days seeing a lot

285
00:10:43,200 --> 00:10:45,540
more crypto jacking and

286
00:10:45,540 --> 00:10:46,920
um you know if you're running let's say

287
00:10:46,920 --> 00:10:51,240
on EK eks a lot of ec2s ec2 instances

288
00:10:51,240 --> 00:10:52,920
um you know mining Bitcoin and things

289
00:10:52,920 --> 00:10:54,420
like that especially particularly in

290
00:10:54,420 --> 00:10:56,339
developer and staging environments where

291
00:10:56,339 --> 00:10:58,440
security controls are a little bit more

292
00:10:58,440 --> 00:11:01,320
lacking but as I said in the model the

293
00:11:01,320 --> 00:11:03,720
NSA identified three most likely sources

294
00:11:03,720 --> 00:11:05,540
of compromise for kubernetes clusters

295
00:11:05,540 --> 00:11:09,120
them being the supply chain so container

296
00:11:09,120 --> 00:11:11,399
images obviously your actual container

297
00:11:11,399 --> 00:11:14,040
runtime the underlying infrastructure

298
00:11:14,040 --> 00:11:15,680
that your kubernetes

299
00:11:15,680 --> 00:11:18,060
pods and deployments and cluster is

300
00:11:18,060 --> 00:11:21,180
running on the threat actors is the

301
00:11:21,180 --> 00:11:23,220
second one so bad actors someone out

302
00:11:23,220 --> 00:11:25,320
there performing remote exploits usually

303
00:11:25,320 --> 00:11:27,779
with stolen credentials but often

304
00:11:27,779 --> 00:11:28,980
sometimes just through like really

305
00:11:28,980 --> 00:11:31,200
really weird things like exposed API

306
00:11:31,200 --> 00:11:33,660
resources so I suppose recently there

307
00:11:33,660 --> 00:11:36,779
was a quite a High um a high profile

308
00:11:36,779 --> 00:11:39,959
breach with Tesla and also I believe

309
00:11:39,959 --> 00:11:41,579
Google separately where there was a

310
00:11:41,579 --> 00:11:43,560
kubernetes dashboard just like openly

311
00:11:43,560 --> 00:11:45,360
exposed to the internet which I thought

312
00:11:45,360 --> 00:11:46,680
was pretty funny and you can kind of

313
00:11:46,680 --> 00:11:49,800
from that see just how little thought is

314
00:11:49,800 --> 00:11:52,980
being put towards securing securing

315
00:11:52,980 --> 00:11:55,019
workloads as they're built

316
00:11:55,019 --> 00:11:56,880
um so yeah threat actors uh and this can

317
00:11:56,880 --> 00:11:58,560
be not just stolen credentials as I said

318
00:11:58,560 --> 00:11:59,519
but

319
00:11:59,519 --> 00:12:01,620
um exposed uh like data exfiltration

320
00:12:01,620 --> 00:12:04,399
through controlled plane resources so

321
00:12:04,399 --> 00:12:06,959
improperly secured API servers on

322
00:12:06,959 --> 00:12:09,120
kubernetes which you can then enumerate

323
00:12:09,120 --> 00:12:10,920
an actual trade data from around the

324
00:12:10,920 --> 00:12:12,360
container runtime

325
00:12:12,360 --> 00:12:14,459
um and I would actually also put like

326
00:12:14,459 --> 00:12:16,260
um you know Secrets found in containers

327
00:12:16,260 --> 00:12:17,760
through this as well because that's

328
00:12:17,760 --> 00:12:18,779
often

329
00:12:18,779 --> 00:12:21,480
um how privileges get escalated and

330
00:12:21,480 --> 00:12:24,540
exploits actually get crafted as well so

331
00:12:24,540 --> 00:12:26,100
everything like from a containerizer

332
00:12:26,100 --> 00:12:27,600
apps everything running in your data

333
00:12:27,600 --> 00:12:30,120
plane this is all fair game like it's

334
00:12:30,120 --> 00:12:32,579
that's exposed externally and then the

335
00:12:32,579 --> 00:12:33,959
third one which I think is thought about

336
00:12:33,959 --> 00:12:36,899
a little bit less is Insider threat so

337
00:12:36,899 --> 00:12:39,120
um you know we all know that head of SRE

338
00:12:39,120 --> 00:12:41,700
or Cloud Ops um someone who has full

339
00:12:41,700 --> 00:12:43,800
cluster admin users who are one

340
00:12:43,800 --> 00:12:46,920
privilege escalation away from root

341
00:12:46,920 --> 00:12:49,740
access to a node and even also like

342
00:12:49,740 --> 00:12:51,600
thinking about service providers so

343
00:12:51,600 --> 00:12:53,579
obviously like cloud service providers

344
00:12:53,579 --> 00:12:55,260
publish like shared responsibility

345
00:12:55,260 --> 00:12:57,120
models on like what they are responsible

346
00:12:57,120 --> 00:12:59,459
for securing and often anything below

347
00:12:59,459 --> 00:13:02,339
the infrastructure of your compute is

348
00:13:02,339 --> 00:13:04,440
abstracted away but you still have to

349
00:13:04,440 --> 00:13:05,880
remember like they have access to your

350
00:13:05,880 --> 00:13:08,700
cluster and your cluster runtime as well

351
00:13:08,700 --> 00:13:11,100
um so like even getting so starting with

352
00:13:11,100 --> 00:13:12,839
that threat model and then moving a bit

353
00:13:12,839 --> 00:13:14,639
further to like mapping those that

354
00:13:14,639 --> 00:13:17,399
threat model to some controls still not

355
00:13:17,399 --> 00:13:19,620
obvious I mean I I look I look at this

356
00:13:19,620 --> 00:13:22,440
which is from the cncf landscape for

357
00:13:22,440 --> 00:13:24,779
cloud native security and

358
00:13:24,779 --> 00:13:27,000
um so for cloud native um like the cloud

359
00:13:27,000 --> 00:13:28,680
native cncf landscape and you can see

360
00:13:28,680 --> 00:13:30,240
there's a lot of different tools in the

361
00:13:30,240 --> 00:13:33,420
space which often overlap and it's also

362
00:13:33,420 --> 00:13:36,000
not clear like right away which types of

363
00:13:36,000 --> 00:13:37,620
security testing should I be performing

364
00:13:37,620 --> 00:13:39,779
when should I be performing them who

365
00:13:39,779 --> 00:13:41,459
should be owning them

366
00:13:41,459 --> 00:13:43,260
um and who should be managing like these

367
00:13:43,260 --> 00:13:46,019
different tools at different stages so

368
00:13:46,019 --> 00:13:49,019
um yeah so starting with that uh threat

369
00:13:49,019 --> 00:13:51,000
model that I defined earlier mapping it

370
00:13:51,000 --> 00:13:54,180
to four very basic threat services so

371
00:13:54,180 --> 00:13:56,639
is the sliding at the very bottom

372
00:13:56,639 --> 00:13:57,720
um the code that you're actually

373
00:13:57,720 --> 00:13:59,459
building that gets built into your

374
00:13:59,459 --> 00:14:00,959
containers so

375
00:14:00,959 --> 00:14:03,300
um this is your application code as well

376
00:14:03,300 --> 00:14:05,160
as your infrastructure code that defines

377
00:14:05,160 --> 00:14:07,200
the cluster config but I'll get to that

378
00:14:07,200 --> 00:14:08,579
in a second but

379
00:14:08,579 --> 00:14:10,440
um focusing purely on the code of your

380
00:14:10,440 --> 00:14:11,940
actual workloads

381
00:14:11,940 --> 00:14:14,700
um this is everything that is built into

382
00:14:14,700 --> 00:14:16,579
those containers including dependencies

383
00:14:16,579 --> 00:14:19,560
libraries open source libraries that

384
00:14:19,560 --> 00:14:20,940
you're dependent on internal packages

385
00:14:20,940 --> 00:14:23,339
that you're publishing internally and

386
00:14:23,339 --> 00:14:24,899
any uh yeah any code that you're

387
00:14:24,899 --> 00:14:27,420
publishing internally as well obviously

388
00:14:27,420 --> 00:14:29,100
then the next layer up once this gets

389
00:14:29,100 --> 00:14:32,519
built into a Docker image or a oci image

390
00:14:32,519 --> 00:14:35,399
container image getting built into a

391
00:14:35,399 --> 00:14:38,760
some sort of artifact or build artifact

392
00:14:38,760 --> 00:14:40,740
that gets then run in the container

393
00:14:40,740 --> 00:14:43,740
runtime so obviously this threat surface

394
00:14:43,740 --> 00:14:46,440
is very much focused on like how are you

395
00:14:46,440 --> 00:14:48,360
making sure that that artifact is as

396
00:14:48,360 --> 00:14:49,980
secure as possible it's not containing

397
00:14:49,980 --> 00:14:51,660
hard-coded Secrets

398
00:14:51,660 --> 00:14:53,940
um and the auditability of the changes

399
00:14:53,940 --> 00:14:56,040
to that artifact is very well defined

400
00:14:56,040 --> 00:14:58,560
which I'll also get to in a second the

401
00:14:58,560 --> 00:15:00,839
next one up obviously is a cluster so

402
00:15:00,839 --> 00:15:03,000
started with the code the code gets

403
00:15:03,000 --> 00:15:04,920
built into a container the container

404
00:15:04,920 --> 00:15:06,440
will get deployed on your kubernetes

405
00:15:06,440 --> 00:15:10,079
control plane and this thread surface is

406
00:15:10,079 --> 00:15:12,240
mainly around making sure the

407
00:15:12,240 --> 00:15:13,740
configuration that defines your

408
00:15:13,740 --> 00:15:17,100
kubernetes cluster is not insecure by

409
00:15:17,100 --> 00:15:18,540
Design so you're not doing things like

410
00:15:18,540 --> 00:15:20,940
running containers as root and you're

411
00:15:20,940 --> 00:15:22,500
not doing things like having overly

412
00:15:22,500 --> 00:15:23,880
permissive service accounts in your

413
00:15:23,880 --> 00:15:25,920
kubernetes cluster as well and then the

414
00:15:25,920 --> 00:15:27,540
last layer up from this is the actual

415
00:15:27,540 --> 00:15:29,100
underlying infrastructure that your

416
00:15:29,100 --> 00:15:31,800
kubernetes cluster runs on so if you're

417
00:15:31,800 --> 00:15:33,240
running obviously like serverless

418
00:15:33,240 --> 00:15:35,940
kubernetes so let's say eks on fargate

419
00:15:35,940 --> 00:15:38,040
if you're on AWS or you're running like

420
00:15:38,040 --> 00:15:40,500
let's say like k-native or fission you

421
00:15:40,500 --> 00:15:41,579
probably don't have to worry about this

422
00:15:41,579 --> 00:15:43,620
because you're abstracting this away to

423
00:15:43,620 --> 00:15:44,820
the cloud provider's shared

424
00:15:44,820 --> 00:15:46,800
responsibility model but if you are

425
00:15:46,800 --> 00:15:48,060
managing like the underlying

426
00:15:48,060 --> 00:15:49,880
infrastructure of your kubernetes nodes

427
00:15:49,880 --> 00:15:52,800
this is an added piece of an added

428
00:15:52,800 --> 00:15:53,820
threat surface that you need to be

429
00:15:53,820 --> 00:15:56,040
really careful about locking down and

430
00:15:56,040 --> 00:15:58,620
making sure in the scenario of an

431
00:15:58,620 --> 00:16:00,779
attacker somehow managing to get like

432
00:16:00,779 --> 00:16:03,120
for example a container Escape crafting

433
00:16:03,120 --> 00:16:05,519
and executing a container Escape exploit

434
00:16:05,519 --> 00:16:07,860
making sure that the

435
00:16:07,860 --> 00:16:10,740
um the infrastructure the host runtime

436
00:16:10,740 --> 00:16:12,779
is locked down so they can't actually do

437
00:16:12,779 --> 00:16:14,699
anything even if they managed to escape

438
00:16:14,699 --> 00:16:17,399
the container on time into the host so

439
00:16:17,399 --> 00:16:19,620
yeah mapping those three um those three

440
00:16:19,620 --> 00:16:22,740
threats so insiders supply chain and uh

441
00:16:22,740 --> 00:16:25,380
Bad actors to threat surfaces code

442
00:16:25,380 --> 00:16:28,079
container cluster and cloud and now for

443
00:16:28,079 --> 00:16:30,420
each of them like is this this is a

444
00:16:30,420 --> 00:16:31,620
great place to start but how do we

445
00:16:31,620 --> 00:16:32,940
actually think about what security

446
00:16:32,940 --> 00:16:34,740
activities do I need to perform at each

447
00:16:34,740 --> 00:16:37,320
stage how do I perform them and what are

448
00:16:37,320 --> 00:16:38,639
the main things that I should be worried

449
00:16:38,639 --> 00:16:41,100
about or concerned about when I should

450
00:16:41,100 --> 00:16:44,100
be performing them so obviously starting

451
00:16:44,100 --> 00:16:47,519
with the first one um for code so

452
00:16:47,519 --> 00:16:49,920
um most common uh design pattern for

453
00:16:49,920 --> 00:16:52,259
this is an application code monorepo so

454
00:16:52,259 --> 00:16:54,300
you often have maybe micro Services

455
00:16:54,300 --> 00:16:56,579
which have subdirectories that build

456
00:16:56,579 --> 00:16:58,680
into a separate micro servers not always

457
00:16:58,680 --> 00:17:00,060
the case sometimes you have a separate

458
00:17:00,060 --> 00:17:02,399
repo for each microservice but

459
00:17:02,399 --> 00:17:03,540
um generally that's what I've that's

460
00:17:03,540 --> 00:17:05,819
what I've seen in the wild is you have

461
00:17:05,819 --> 00:17:08,579
one one repository which contains

462
00:17:08,579 --> 00:17:10,079
um the code that gets built into

463
00:17:10,079 --> 00:17:11,579
separate containers which runs in your

464
00:17:11,579 --> 00:17:14,040
kubernetes cluster again sometimes this

465
00:17:14,040 --> 00:17:15,959
can be contained in the same in the same

466
00:17:15,959 --> 00:17:18,599
repo with the kubernetes Manifest files

467
00:17:18,599 --> 00:17:21,179
that deploy these things into your

468
00:17:21,179 --> 00:17:23,880
cluster but just focusing right now on

469
00:17:23,880 --> 00:17:25,559
the application code

470
00:17:25,559 --> 00:17:28,260
um I guess the priorities here and the

471
00:17:28,260 --> 00:17:30,000
objectives here to make sure that you're

472
00:17:30,000 --> 00:17:32,520
failing as fast and as early in the stlc

473
00:17:32,520 --> 00:17:34,620
as possible so you're integrating very

474
00:17:34,620 --> 00:17:36,419
natively into developer workflows and

475
00:17:36,419 --> 00:17:38,280
code review processes

476
00:17:38,280 --> 00:17:40,440
um and you're making sure that the

477
00:17:40,440 --> 00:17:42,840
universal security gate for my merging

478
00:17:42,840 --> 00:17:44,400
into Master which is that code review

479
00:17:44,400 --> 00:17:47,039
process every time a PR is raised some

480
00:17:47,039 --> 00:17:49,799
sort of static code analysis or SAS is

481
00:17:49,799 --> 00:17:51,720
being performed at that particular stage

482
00:17:51,720 --> 00:17:54,419
so there's a lot of tools out there that

483
00:17:54,419 --> 00:17:56,880
perform this obviously snake nullify

484
00:17:56,880 --> 00:17:59,580
mend a lot of combination of Open Source

485
00:17:59,580 --> 00:18:01,200
and proprietary offerings out there that

486
00:18:01,200 --> 00:18:03,240
you can use to integrate into code

487
00:18:03,240 --> 00:18:06,720
review process to run SAS IDE plugins is

488
00:18:06,720 --> 00:18:08,700
another great way to do this stick

489
00:18:08,700 --> 00:18:10,440
obviously have a great offering in terms

490
00:18:10,440 --> 00:18:12,960
of how they uh you know how they

491
00:18:12,960 --> 00:18:15,960
integrate natively into into developer

492
00:18:15,960 --> 00:18:19,020
Ides me personally I feel like this is a

493
00:18:19,020 --> 00:18:20,520
little bit too hard basket for a lot of

494
00:18:20,520 --> 00:18:22,320
organizations especially when they are

495
00:18:22,320 --> 00:18:24,299
not standardizing the Ides that

496
00:18:24,299 --> 00:18:26,640
developers use so maybe some devs are on

497
00:18:26,640 --> 00:18:29,039
Vim some are on vs code so oftentimes

498
00:18:29,039 --> 00:18:30,299
you're safe is bad is to make sure

499
00:18:30,299 --> 00:18:32,640
you're running some sort of SAS and

500
00:18:32,640 --> 00:18:34,400
before you're merging into Master

501
00:18:34,400 --> 00:18:36,600
SCA is obviously another thing here you

502
00:18:36,600 --> 00:18:38,820
should be making sure that the packages

503
00:18:38,820 --> 00:18:41,400
before your container is built are not

504
00:18:41,400 --> 00:18:43,380
introducing any new vulnerabilities into

505
00:18:43,380 --> 00:18:45,419
that container into that container

506
00:18:45,419 --> 00:18:47,400
artifact so you can kind of see the flow

507
00:18:47,400 --> 00:18:49,380
here is every time an APR is committed

508
00:18:49,380 --> 00:18:52,380
whether using nullify or Snick run some

509
00:18:52,380 --> 00:18:53,940
sort of static code analysis on the pr

510
00:18:53,940 --> 00:18:55,799
check for common weaknesses and

511
00:18:55,799 --> 00:18:57,840
enumerations and then after it's been

512
00:18:57,840 --> 00:18:59,580
reviewed Merchant

513
00:18:59,580 --> 00:19:01,500
so now going to the next one the

514
00:19:01,500 --> 00:19:02,940
container is probably the one that

515
00:19:02,940 --> 00:19:05,039
people are the most kind of people talk

516
00:19:05,039 --> 00:19:06,539
the most about when they think about

517
00:19:06,539 --> 00:19:09,120
image scanning or like how do they make

518
00:19:09,120 --> 00:19:11,820
sure that the container images are not

519
00:19:11,820 --> 00:19:13,620
reaching their registry with any

520
00:19:13,620 --> 00:19:17,160
insecure components so here are the most

521
00:19:17,160 --> 00:19:19,020
common activity is obviously container

522
00:19:19,020 --> 00:19:21,360
image scanning so after you've run SAS

523
00:19:21,360 --> 00:19:22,919
on your application code and after

524
00:19:22,919 --> 00:19:25,140
you've built your Docker image making

525
00:19:25,140 --> 00:19:26,700
sure that you're scanning your container

526
00:19:26,700 --> 00:19:28,799
image to make sure that there's no

527
00:19:28,799 --> 00:19:31,440
vulnerabilities being introduced ideally

528
00:19:31,440 --> 00:19:33,120
you would do this before you merge in

529
00:19:33,120 --> 00:19:35,000
and publish it to your image registry

530
00:19:35,000 --> 00:19:37,740
but you can also set up scheduled scans

531
00:19:37,740 --> 00:19:39,900
on your image registry where every time

532
00:19:39,900 --> 00:19:41,820
an image gets pushed making sure it's

533
00:19:41,820 --> 00:19:43,679
being scanned and that scan results have

534
00:19:43,679 --> 00:19:45,900
somehow being surfaced back to the

535
00:19:45,900 --> 00:19:47,400
developer teams

536
00:19:47,400 --> 00:19:49,260
um so I won't talk too much more about

537
00:19:49,260 --> 00:19:50,820
that because I once I suppose pretty

538
00:19:50,820 --> 00:19:53,460
obvious but one thing I do see customers

539
00:19:53,460 --> 00:19:56,220
like avoid not fulfilling best practice

540
00:19:56,220 --> 00:19:57,679
with is

541
00:19:57,679 --> 00:20:00,120
immutable image tags which sounds a

542
00:20:00,120 --> 00:20:01,620
little bit trivial but it's very

543
00:20:01,620 --> 00:20:03,799
underrated wind that you can get around

544
00:20:03,799 --> 00:20:06,419
safeguarding yourself for potential

545
00:20:06,419 --> 00:20:08,640
Upstream supply chain attacks making

546
00:20:08,640 --> 00:20:10,740
sure that every time you build a Docker

547
00:20:10,740 --> 00:20:13,020
image tagging it with the commit hash of

548
00:20:13,020 --> 00:20:14,520
the pull request that built that awkward

549
00:20:14,520 --> 00:20:17,640
image this is both great for reliability

550
00:20:17,640 --> 00:20:20,039
and I suppose fault tolerance if you

551
00:20:20,039 --> 00:20:22,260
ever want to roll back to deployments

552
00:20:22,260 --> 00:20:23,700
which are stable in case you introduce

553
00:20:23,700 --> 00:20:26,400
breaking changes but more so it's very

554
00:20:26,400 --> 00:20:27,780
important when you want to reason about

555
00:20:27,780 --> 00:20:29,100
let's say if you're doing incident

556
00:20:29,100 --> 00:20:31,140
response or you want to reason about

557
00:20:31,140 --> 00:20:33,960
this the auditability of like how secure

558
00:20:33,960 --> 00:20:36,179
your Docker images are very hard to do

559
00:20:36,179 --> 00:20:37,500
that if you're constantly just

560
00:20:37,500 --> 00:20:39,600
overriding the latest tag every time

561
00:20:39,600 --> 00:20:41,340
you're push into your registry so making

562
00:20:41,340 --> 00:20:43,020
sure you have immutable image tags and

563
00:20:43,020 --> 00:20:44,820
then if you're mature enough going a

564
00:20:44,820 --> 00:20:46,740
step further than that even and actually

565
00:20:46,740 --> 00:20:49,380
signing your container images with the

566
00:20:49,380 --> 00:20:52,919
hash of the commit as well and then also

567
00:20:52,919 --> 00:20:54,840
Dynamic analysis so this is a bit more

568
00:20:54,840 --> 00:20:57,480
novel but if you if you're importing

569
00:20:57,480 --> 00:20:58,919
this is particularly if you're importing

570
00:20:58,919 --> 00:21:01,080
third party images particularly from

571
00:21:01,080 --> 00:21:03,840
vendors so when you perform SCA in the

572
00:21:03,840 --> 00:21:06,000
previous step you can probably scan your

573
00:21:06,000 --> 00:21:07,320
Docker files and make sure the base

574
00:21:07,320 --> 00:21:09,960
images you're importing are secure but

575
00:21:09,960 --> 00:21:11,700
sometimes you may have malware in

576
00:21:11,700 --> 00:21:13,919
third-party images that don't show up as

577
00:21:13,919 --> 00:21:16,080
cves so unless you're analyzing those

578
00:21:16,080 --> 00:21:19,080
images with for like malware signatures

579
00:21:19,080 --> 00:21:21,240
can be very hard to find out whether or

580
00:21:21,240 --> 00:21:23,360
not third-party images are actually

581
00:21:23,360 --> 00:21:27,120
doing suspect things at runtime so there

582
00:21:27,120 --> 00:21:29,340
are a few vendors out there Aqua

583
00:21:29,340 --> 00:21:31,200
particularly in systic but they're also

584
00:21:31,200 --> 00:21:33,120
open sourcing projects around Falco and

585
00:21:33,120 --> 00:21:36,000
Tracy which allow you to run ebpf based

586
00:21:36,000 --> 00:21:38,360
monitoring to actually make sure that

587
00:21:38,360 --> 00:21:40,980
the container images that you're either

588
00:21:40,980 --> 00:21:44,460
building from in your own images or that

589
00:21:44,460 --> 00:21:46,860
vendors or third-party projects are

590
00:21:46,860 --> 00:21:49,440
supplying to you don't contain contain

591
00:21:49,440 --> 00:21:51,780
malware that do things like make calls

592
00:21:51,780 --> 00:21:53,400
out to paste bins or try to pull in

593
00:21:53,400 --> 00:21:56,280
malicious packages at runtime so as a

594
00:21:56,280 --> 00:21:57,840
very low hanging fruit scan your images

595
00:21:57,840 --> 00:22:00,059
tag them but if you you're more

596
00:22:00,059 --> 00:22:01,799
concerned and if you have a very very

597
00:22:01,799 --> 00:22:04,020
large environment with lots and lots of

598
00:22:04,020 --> 00:22:05,820
third-party images make sure that

599
00:22:05,820 --> 00:22:07,260
they're locked down and perform some

600
00:22:07,260 --> 00:22:09,900
Dynamic threat analysis on them and make

601
00:22:09,900 --> 00:22:10,740
sure you make sure that they're not

602
00:22:10,740 --> 00:22:12,960
doing anything weird at runtime as well

603
00:22:12,960 --> 00:22:15,659
and then obviously like you lost the

604
00:22:15,659 --> 00:22:18,419
kubernetes Manifest repo so

605
00:22:18,419 --> 00:22:20,280
um right now up until this point like

606
00:22:20,280 --> 00:22:22,320
we've been focusing on all the code and

607
00:22:22,320 --> 00:22:23,880
all the components that get built into

608
00:22:23,880 --> 00:22:25,740
your containers but what about the

609
00:22:25,740 --> 00:22:27,659
configuration of those of the cluster

610
00:22:27,659 --> 00:22:29,820
itself so how do we make sure that we're

611
00:22:29,820 --> 00:22:31,500
stopping misconfigured or in securely

612
00:22:31,500 --> 00:22:33,360
configured resources from being deployed

613
00:22:33,360 --> 00:22:35,460
into production or staging clusters to

614
00:22:35,460 --> 00:22:37,799
begin with so again here the best thing

615
00:22:37,799 --> 00:22:40,440
to do is a very low hanging fruit is to

616
00:22:40,440 --> 00:22:42,600
perform static code analysis or sast on

617
00:22:42,600 --> 00:22:44,640
those IAC templates so plenty of

618
00:22:44,640 --> 00:22:46,740
different ways to do this checkup is

619
00:22:46,740 --> 00:22:50,039
great couplinter plenty of SAS tools out

620
00:22:50,039 --> 00:22:52,700
there that have really really nice rules

621
00:22:52,700 --> 00:22:55,440
for making sure that your kubernetes

622
00:22:55,440 --> 00:22:57,659
manifest files aren't doing insecure

623
00:22:57,659 --> 00:22:59,460
things so things like deploying

624
00:22:59,460 --> 00:23:01,740
containers as root and making sure your

625
00:23:01,740 --> 00:23:03,480
R back is really locked down making sure

626
00:23:03,480 --> 00:23:05,480
that service accounts aren't overly

627
00:23:05,480 --> 00:23:07,740
permissive as well and this is something

628
00:23:07,740 --> 00:23:10,860
that I see people overlooking and then

629
00:23:10,860 --> 00:23:13,200
when they then run point in time and

630
00:23:13,200 --> 00:23:15,179
maybe using cubescape or Coupe bench

631
00:23:15,179 --> 00:23:17,159
they find a lot of their resources are

632
00:23:17,159 --> 00:23:19,440
out of compliance or insecure they could

633
00:23:19,440 --> 00:23:20,880
have just picked that up and they spent

634
00:23:20,880 --> 00:23:22,140
time remediating it but they could have

635
00:23:22,140 --> 00:23:24,900
just picked it up before even deploying

636
00:23:24,900 --> 00:23:26,760
um you know those those manifest files

637
00:23:26,760 --> 00:23:29,159
into their production cluster so if you

638
00:23:29,159 --> 00:23:30,960
have some sort of give up setup if

639
00:23:30,960 --> 00:23:32,640
you're running Argo CD whether it's

640
00:23:32,640 --> 00:23:35,220
push-based or pool based deployment same

641
00:23:35,220 --> 00:23:37,500
concept as your application code SAS

642
00:23:37,500 --> 00:23:40,320
whenever you make a PR to change configs

643
00:23:40,320 --> 00:23:42,720
in your manifest files in in the yaml

644
00:23:42,720 --> 00:23:44,400
make sure some sort of some sort of

645
00:23:44,400 --> 00:23:46,500
static analyzer is running on them and

646
00:23:46,500 --> 00:23:47,880
then if you're more mature enough to

647
00:23:47,880 --> 00:23:49,799
have a staging production uh

648
00:23:49,799 --> 00:23:52,200
pre-production or staging cluster or

649
00:23:52,200 --> 00:23:53,580
namespace where you actually stage

650
00:23:53,580 --> 00:23:55,559
changes to run let's say integration

651
00:23:55,559 --> 00:23:57,840
tests against those workloads don't

652
00:23:57,840 --> 00:23:59,460
hesitate to actually run tools like

653
00:23:59,460 --> 00:24:01,860
Coupe bench or cube Hunter which

654
00:24:01,860 --> 00:24:03,539
actually run on live kubernetes

655
00:24:03,539 --> 00:24:05,580
deployments against your Cube API server

656
00:24:05,580 --> 00:24:07,380
and they give you benchmarks against

657
00:24:07,380 --> 00:24:09,419
things like the CIS kubernetes Benchmark

658
00:24:09,419 --> 00:24:11,659
or they actually find out through

659
00:24:11,659 --> 00:24:14,220
Breaking Me means so obviously don't do

660
00:24:14,220 --> 00:24:15,480
this against your production clusters

661
00:24:15,480 --> 00:24:17,880
whether or not you have any exposed

662
00:24:17,880 --> 00:24:19,799
vulnerabilities through the kubernetes

663
00:24:19,799 --> 00:24:23,880
API so I've seen some 10.0 cve scores of

664
00:24:23,880 --> 00:24:27,059
10.0 from things like istio or Envoy

665
00:24:27,059 --> 00:24:29,220
proxies you know things that you can

666
00:24:29,220 --> 00:24:31,380
pick up in pre-prodden staging if you're

667
00:24:31,380 --> 00:24:33,179
doing some things like cluster scanning

668
00:24:33,179 --> 00:24:34,559
and benchmarking using some of those

669
00:24:34,559 --> 00:24:35,820
tools

670
00:24:35,820 --> 00:24:37,679
um but yeah that's uh that's it so that

671
00:24:37,679 --> 00:24:40,440
was the last thread Surface after after

672
00:24:40,440 --> 00:24:44,159
container and um yeah I guess sorry one

673
00:24:44,159 --> 00:24:46,679
more is cloud which is the underlying

674
00:24:46,679 --> 00:24:48,720
workload so make sure that your

675
00:24:48,720 --> 00:24:50,400
underlying infrastructure that the

676
00:24:50,400 --> 00:24:52,020
kubernetes Clusters are running on so

677
00:24:52,020 --> 00:24:53,520
here make sure you're running SAS on all

678
00:24:53,520 --> 00:24:55,380
your infrastructure as code so whether

679
00:24:55,380 --> 00:24:56,580
you're running terraform or cloud

680
00:24:56,580 --> 00:24:58,440
formation make sure you're not having

681
00:24:58,440 --> 00:24:59,940
things like overly permissive security

682
00:24:59,940 --> 00:25:02,039
groups overly promises permissive IM

683
00:25:02,039 --> 00:25:05,039
policies same same concept as previously

684
00:25:05,039 --> 00:25:07,559
you usually have a combined repo with

685
00:25:07,559 --> 00:25:09,299
your manifest repo but if you don't if

686
00:25:09,299 --> 00:25:11,159
you have a separate repo make sure

687
00:25:11,159 --> 00:25:13,980
you're running IAC SAS like Chekov TF

688
00:25:13,980 --> 00:25:16,140
SEC or CFN nag and making sure you're

689
00:25:16,140 --> 00:25:18,240
not deploying any infrastructure as code

690
00:25:18,240 --> 00:25:20,520
that is insecure by default

691
00:25:20,520 --> 00:25:22,620
um yeah but that's it uh obviously reach

692
00:25:22,620 --> 00:25:24,960
out to me my Twitter handle is in my tag

693
00:25:24,960 --> 00:25:26,460
um obviously reach out to me on LinkedIn

694
00:25:26,460 --> 00:25:28,380
and if you want to find out more about

695
00:25:28,380 --> 00:25:30,000
um the software doing at nullify and

696
00:25:30,000 --> 00:25:32,159
orchestrating devsecops feel free to

697
00:25:32,159 --> 00:25:35,880
reach out as well and yeah thank you

698
00:25:35,880 --> 00:25:38,400
amazing thank you so much for that that

699
00:25:38,400 --> 00:25:39,600
was really really interesting and I

700
00:25:39,600 --> 00:25:41,640
think you know it's just again one of

701
00:25:41,640 --> 00:25:43,620
the things with lightning talks it's so

702
00:25:43,620 --> 00:25:45,659
hard to sort of capture everything you

703
00:25:45,659 --> 00:25:48,059
want to say in like 15-20 minutes so I

704
00:25:48,059 --> 00:25:49,799
think you've definitely given done a

705
00:25:49,799 --> 00:25:51,240
good job and I particularly liked you

706
00:25:51,240 --> 00:25:53,039
know how you start off with that really

707
00:25:53,039 --> 00:25:55,200
complex diagram and you gave a simple

708
00:25:55,200 --> 00:25:57,840
alternative because uh really like I

709
00:25:57,840 --> 00:26:00,179
think kubernetes is very very complex

710
00:26:00,179 --> 00:26:02,460
when you actually go to do it I think

711
00:26:02,460 --> 00:26:04,500
it's marketed sometimes as being a

712
00:26:04,500 --> 00:26:05,700
simple solution but when you actually

713
00:26:05,700 --> 00:26:07,260
have to implement it and there is a lot

714
00:26:07,260 --> 00:26:09,240
to it so I think you've given some

715
00:26:09,240 --> 00:26:10,380
really

716
00:26:10,380 --> 00:26:13,440
um great great advice over there

717
00:26:13,440 --> 00:26:15,059
um we may have to jump onto our next

718
00:26:15,059 --> 00:26:16,799
talk Channel thank you so much for the

719
00:26:16,799 --> 00:26:18,539
talk and you know you share his details

720
00:26:18,539 --> 00:26:20,460
if anyone does have any questions please

721
00:26:20,460 --> 00:26:22,860
ping him um on his uh details and I'm

722
00:26:22,860 --> 00:26:25,140
sure he can discuss all things devsecops

723
00:26:25,140 --> 00:26:27,600
and communities we do have our next

724
00:26:27,600 --> 00:26:29,460
speaker so um sorry is going to

725
00:26:29,460 --> 00:26:31,380
introduce thank you so much Shan thanks

726
00:26:31,380 --> 00:26:34,039
guys thanks Sean

