1
00:00:00,179 --> 00:00:03,060
let's get our next speakers in so let's

2
00:00:03,060 --> 00:00:07,319
welcome dolas and Anusha welcome Hey

3
00:00:07,319 --> 00:00:11,660
folks hello you are on screen

4
00:00:12,480 --> 00:00:16,020
all right I understand that you have we

5
00:00:16,020 --> 00:00:17,760
have two slide decks and I will start

6
00:00:17,760 --> 00:00:20,100
with those slight deck or those screen

7
00:00:20,100 --> 00:00:22,980
correct ciao so we already running out

8
00:00:22,980 --> 00:00:24,720
of time so I will not do some chit chat

9
00:00:24,720 --> 00:00:26,939
I will just give you the floor share the

10
00:00:26,939 --> 00:00:29,340
screen and YouTube go ahead and we will

11
00:00:29,340 --> 00:00:31,080
remove ourselves because you are way

12
00:00:31,080 --> 00:00:35,480
more interesting let's go ahead cheers

13
00:00:35,880 --> 00:00:37,200
okay

14
00:00:37,200 --> 00:00:39,840
so welcome everyone Welcome to our talk

15
00:00:39,840 --> 00:00:42,000
securing kubernetes manifest with cosine

16
00:00:42,000 --> 00:00:44,280
and giverno I am Anusha I am a technical

17
00:00:44,280 --> 00:00:46,860
product manager at nirmata

18
00:00:46,860 --> 00:00:48,780
hi everyone thank you for joining my

19
00:00:48,780 --> 00:00:50,100
name is dollars and I'm a customer

20
00:00:50,100 --> 00:00:53,280
success engineer in nirmata so today we

21
00:00:53,280 --> 00:00:55,260
are going to talk about how we can

22
00:00:55,260 --> 00:00:57,239
secure your kubernetes manifest with

23
00:00:57,239 --> 00:00:59,399
cosine and kuberno and these are a

24
00:00:59,399 --> 00:01:01,440
couple of the agendas or talk topics

25
00:01:01,440 --> 00:01:02,760
that we are going to cover in today's

26
00:01:02,760 --> 00:01:05,339
session to start with we will talk about

27
00:01:05,339 --> 00:01:07,200
what does a kubernetes CI series

28
00:01:07,200 --> 00:01:09,840
workflow looks like in uh in the

29
00:01:09,840 --> 00:01:12,780
kubernetes world or how different people

30
00:01:12,780 --> 00:01:14,880
are using cicd Pipeline with different

31
00:01:14,880 --> 00:01:17,400
tools and then why we need to sign

32
00:01:17,400 --> 00:01:19,860
anything where does signing and NFI

33
00:01:19,860 --> 00:01:22,860
verify fits an entire these Pipeline and

34
00:01:22,860 --> 00:01:25,439
how can we sign and verify the container

35
00:01:25,439 --> 00:01:27,180
image what are some of the projects and

36
00:01:27,180 --> 00:01:29,520
how they can help you along with that

37
00:01:29,520 --> 00:01:31,259
Anusha will talk about a little best

38
00:01:31,259 --> 00:01:33,119
practices and then we'll end up with the

39
00:01:33,119 --> 00:01:34,920
end of this presentation with a quick

40
00:01:34,920 --> 00:01:36,439
demo

41
00:01:36,439 --> 00:01:39,479
so uh starting with what does kubernetes

42
00:01:39,479 --> 00:01:42,000
cicd pipeline looks like you will see

43
00:01:42,000 --> 00:01:44,880
that this is what the cicd pipeline

44
00:01:44,880 --> 00:01:46,740
looks like today which is nothing but us

45
00:01:46,740 --> 00:01:48,540
nothing but a

46
00:01:48,540 --> 00:01:52,259
um different stages tools used so we um

47
00:01:52,259 --> 00:01:53,820
usually there are different tools that

48
00:01:53,820 --> 00:01:55,860
are being used at each level starting

49
00:01:55,860 --> 00:01:57,899
from storing the code in the repository

50
00:01:57,899 --> 00:02:00,000
to building and testing it and then

51
00:02:00,000 --> 00:02:02,579
these all codes or these all build

52
00:02:02,579 --> 00:02:04,259
things are then consumed by your

53
00:02:04,259 --> 00:02:06,420
consumer now with Advanced Technologies

54
00:02:06,420 --> 00:02:09,060
like containerization and kubernetes it

55
00:02:09,060 --> 00:02:11,220
makes it more complicated ensuring that

56
00:02:11,220 --> 00:02:12,599
you have the right security practice

57
00:02:12,599 --> 00:02:16,200
followed is often challenging so once we

58
00:02:16,200 --> 00:02:17,819
have this python which we are aware of

59
00:02:17,819 --> 00:02:20,400
how does it look what do you um why

60
00:02:20,400 --> 00:02:23,280
should we sign anything and why should

61
00:02:23,280 --> 00:02:25,920
we even assign anything in like if we

62
00:02:25,920 --> 00:02:27,420
think about this if you forget about the

63
00:02:27,420 --> 00:02:28,920
software for a moment and generally

64
00:02:28,920 --> 00:02:31,680
think about why we use signature we will

65
00:02:31,680 --> 00:02:33,840
know that how important it is and why it

66
00:02:33,840 --> 00:02:35,819
is so necessary to provide trust into

67
00:02:35,819 --> 00:02:39,239
any any process so which Narrows down to

68
00:02:39,239 --> 00:02:42,180
three things that is it signing anything

69
00:02:42,180 --> 00:02:44,459
provides authenticity so where you can

70
00:02:44,459 --> 00:02:46,200
make sure that whether the data or

71
00:02:46,200 --> 00:02:48,300
payload which you are pulling is coming

72
00:02:48,300 --> 00:02:49,920
from an authentic Source it gives you

73
00:02:49,920 --> 00:02:51,959
that trust to trust that okay the data

74
00:02:51,959 --> 00:02:54,060
is coming from an authentic Source it

75
00:02:54,060 --> 00:02:55,620
provides you Integrity where you can

76
00:02:55,620 --> 00:02:57,599
make sure that the data is not tampered

77
00:02:57,599 --> 00:03:00,120
in between and you can actually rely on

78
00:03:00,120 --> 00:03:02,220
the Integrity of it and finally you can

79
00:03:02,220 --> 00:03:04,319
make sure that once you have signed

80
00:03:04,319 --> 00:03:06,239
anything you can just not go back and

81
00:03:06,239 --> 00:03:07,860
you can change anything and come back so

82
00:03:07,860 --> 00:03:10,379
changes like that can be the updates or

83
00:03:10,379 --> 00:03:13,260
changes like that can be uh cannot

84
00:03:13,260 --> 00:03:15,659
happen once you sign anything

85
00:03:15,659 --> 00:03:17,940
and in today's Cloud native world where

86
00:03:17,940 --> 00:03:19,860
a simple unit to start with is we all

87
00:03:19,860 --> 00:03:21,959
start with building animate so all we do

88
00:03:21,959 --> 00:03:23,580
is first we start building an image

89
00:03:23,580 --> 00:03:26,220
where we have all the dependencies and

90
00:03:26,220 --> 00:03:28,620
several things we use to build that now

91
00:03:28,620 --> 00:03:30,720
when we are using that image in our

92
00:03:30,720 --> 00:03:33,200
kubernetes cluster we are not only

93
00:03:33,200 --> 00:03:35,760
depending or relying on that image but

94
00:03:35,760 --> 00:03:37,680
we are also trusting it and not only

95
00:03:37,680 --> 00:03:39,659
that image but we are also trusting the

96
00:03:39,659 --> 00:03:42,959
base image and all the code that it is

97
00:03:42,959 --> 00:03:45,180
included now how do you make sure that

98
00:03:45,180 --> 00:03:46,920
you the container image that you are

99
00:03:46,920 --> 00:03:50,099
running is authentic uh if you think

100
00:03:50,099 --> 00:03:52,080
that the right tag will be enough to

101
00:03:52,080 --> 00:03:53,640
make sure you are using the right image

102
00:03:53,640 --> 00:03:56,760
let me tell you it is relatively easy to

103
00:03:56,760 --> 00:03:58,920
override a container registry or trick

104
00:03:58,920 --> 00:04:01,019
the system to think it is using the

105
00:04:01,019 --> 00:04:04,260
right image whereas it is not so that's

106
00:04:04,260 --> 00:04:06,780
where signing an image and even uh

107
00:04:06,780 --> 00:04:09,540
signing a yaml uh and verifying the same

108
00:04:09,540 --> 00:04:11,519
will help with the help of some of the

109
00:04:11,519 --> 00:04:13,379
policies will help you to enable the

110
00:04:13,379 --> 00:04:15,959
right check at your security uh system

111
00:04:15,959 --> 00:04:19,079
or any at your entire cicd pipeline

112
00:04:19,079 --> 00:04:22,019
so we understand why we need to sign

113
00:04:22,019 --> 00:04:25,500
anything uh but how do you sign anything

114
00:04:25,500 --> 00:04:27,720
what are the different ways you can sign

115
00:04:27,720 --> 00:04:30,900
anything so what we can do is um the

116
00:04:30,900 --> 00:04:32,880
Publishers or the artifact Publishers

117
00:04:32,880 --> 00:04:34,979
can actually create a key pair and you

118
00:04:34,979 --> 00:04:37,919
can use a private key to sign your

119
00:04:37,919 --> 00:04:40,500
images you can then distribute a public

120
00:04:40,500 --> 00:04:43,080
key for your consumers and the consumers

121
00:04:43,080 --> 00:04:44,699
can use this public key and actually

122
00:04:44,699 --> 00:04:46,979
authenticate whether the signed image is

123
00:04:46,979 --> 00:04:49,979
verified or not now unfortunately when

124
00:04:49,979 --> 00:04:52,620
you add these pieces it's often hard to

125
00:04:52,620 --> 00:04:55,320
put together that we think it is so

126
00:04:55,320 --> 00:04:57,180
that's where six store helps sex store

127
00:04:57,180 --> 00:05:00,000
is a set of open source project for

128
00:05:00,000 --> 00:05:01,919
signing and verifying and protecting

129
00:05:01,919 --> 00:05:05,520
your software so where cosine is a sub

130
00:05:05,520 --> 00:05:07,740
project which is specially targeted as

131
00:05:07,740 --> 00:05:09,479
signing and verifying your container

132
00:05:09,479 --> 00:05:12,540
image it includes cosine project to sign

133
00:05:12,540 --> 00:05:15,000
image and verify image

134
00:05:15,000 --> 00:05:17,520
and it also encapsulates some of the

135
00:05:17,520 --> 00:05:19,979
Logics specific to yaml and image

136
00:05:19,979 --> 00:05:22,860
signing and verification so what you can

137
00:05:22,860 --> 00:05:25,320
do is or what what exactly if if you

138
00:05:25,320 --> 00:05:27,240
think about the cicd pipeline taking a

139
00:05:27,240 --> 00:05:28,800
step back going back into our previous

140
00:05:28,800 --> 00:05:30,960
conversation we've been having is what

141
00:05:30,960 --> 00:05:33,360
you can do is you can have see other

142
00:05:33,360 --> 00:05:37,620
cosine CLI to sign your images and

143
00:05:37,620 --> 00:05:39,300
um you can sign your images at the start

144
00:05:39,300 --> 00:05:41,160
of the pipeline and what you can do is

145
00:05:41,160 --> 00:05:43,080
you can have keyword node which is

146
00:05:43,080 --> 00:05:45,000
running in your kubernetes cluster which

147
00:05:45,000 --> 00:05:46,620
will verify this image and make sure

148
00:05:46,620 --> 00:05:49,020
that whatever the images are they are

149
00:05:49,020 --> 00:05:51,539
signed and it will also block the

150
00:05:51,539 --> 00:05:53,880
unauthenticated or unauthorized images

151
00:05:53,880 --> 00:05:55,740
and you can do this not only for the

152
00:05:55,740 --> 00:05:57,120
images you can also do it for the

153
00:05:57,120 --> 00:05:59,340
payloads you can do it for uh the

154
00:05:59,340 --> 00:06:01,380
approvals of the git commit you can also

155
00:06:01,380 --> 00:06:05,039
do it for they Manifesto um to to

156
00:06:05,039 --> 00:06:07,320
increase or enhance the

157
00:06:07,320 --> 00:06:09,060
security level

158
00:06:09,060 --> 00:06:11,600
so a little bit about

159
00:06:11,600 --> 00:06:14,220
is a kubernetes native policy engine

160
00:06:14,220 --> 00:06:16,860
it's uh the policies and reports that

161
00:06:16,860 --> 00:06:19,020
kibana deploys are kubernetes resources

162
00:06:19,020 --> 00:06:21,479
it runs as an admission controller and

163
00:06:21,479 --> 00:06:24,240
it also has a CLI so you can also use

164
00:06:24,240 --> 00:06:26,580
kubernetes CLI in your pipeline and you

165
00:06:26,580 --> 00:06:29,039
can verify all the deployment before you

166
00:06:29,039 --> 00:06:30,360
are deploying it on your kubernetes

167
00:06:30,360 --> 00:06:32,759
cluster and it also has a background

168
00:06:32,759 --> 00:06:36,240
scanner so you can actually scan all the

169
00:06:36,240 --> 00:06:37,800
um images that are actually that are

170
00:06:37,800 --> 00:06:40,080
running on your cluster so you can you

171
00:06:40,080 --> 00:06:42,060
can scan the background and it can give

172
00:06:42,060 --> 00:06:44,100
a no can create a report for you so you

173
00:06:44,100 --> 00:06:45,600
can actually see what exactly is

174
00:06:45,600 --> 00:06:47,100
happening what is failing what are the

175
00:06:47,100 --> 00:06:49,860
images that are sign and what are not uh

176
00:06:49,860 --> 00:06:51,780
using keyword no or using keyword no

177
00:06:51,780 --> 00:06:54,000
policies you can verify mutate and

178
00:06:54,000 --> 00:06:56,039
generate kubernetes resources so you can

179
00:06:56,039 --> 00:06:58,199
do couple of things couple of cool stuff

180
00:06:58,199 --> 00:07:00,660
using kubernetes um using keyword no

181
00:07:00,660 --> 00:07:02,940
policies and all of this is a simple

182
00:07:02,940 --> 00:07:04,740
yaml format so you don't have to learn

183
00:07:04,740 --> 00:07:06,060
anything or you don't have to learn a

184
00:07:06,060 --> 00:07:07,979
different language if you know yaml and

185
00:07:07,979 --> 00:07:09,539
a kubernetes a little bit about out

186
00:07:09,539 --> 00:07:11,880
conceptually you know how it works you

187
00:07:11,880 --> 00:07:13,319
should be good to write a policy from

188
00:07:13,319 --> 00:07:14,280
day one

189
00:07:14,280 --> 00:07:17,100
and uh to uh and specifically this is

190
00:07:17,100 --> 00:07:19,259
integrated with six door cosine for

191
00:07:19,259 --> 00:07:21,900
image and yaml verification which Anusha

192
00:07:21,900 --> 00:07:24,180
will later talk about and show you a

193
00:07:24,180 --> 00:07:26,520
policy how does it look and it becomes

194
00:07:26,520 --> 00:07:28,440
really easy to actually verify an image

195
00:07:28,440 --> 00:07:29,699
and you don't have to do a lot of things

196
00:07:29,699 --> 00:07:33,360
manually which which otherwise

197
00:07:33,360 --> 00:07:35,099
um is the case

198
00:07:35,099 --> 00:07:37,380
okay so

199
00:07:37,380 --> 00:07:39,660
um I think we are we are good with why

200
00:07:39,660 --> 00:07:41,940
we need it and how we can do that now

201
00:07:41,940 --> 00:07:43,919
Anusha will cover some of the best

202
00:07:43,919 --> 00:07:47,280
practices and demo you quickly how you

203
00:07:47,280 --> 00:07:49,979
can actually sign and verify image um in

204
00:07:49,979 --> 00:07:52,818
your in your cluster

205
00:07:58,699 --> 00:08:01,080
yeah that's what I wanted to say you're

206
00:08:01,080 --> 00:08:03,800
a mute but

207
00:08:04,319 --> 00:08:07,080
every time okay

208
00:08:07,080 --> 00:08:10,080
uh Sophia thank you um I'm going to

209
00:08:10,080 --> 00:08:11,880
cover a little bit on the best practices

210
00:08:11,880 --> 00:08:14,160
that is followed in the industry today

211
00:08:14,160 --> 00:08:16,740
uh so what does make every phase in the

212
00:08:16,740 --> 00:08:19,080
supply chain trustworthy so this image

213
00:08:19,080 --> 00:08:21,360
is taken from a paper that was published

214
00:08:21,360 --> 00:08:24,300
by the cncf tax security team this paper

215
00:08:24,300 --> 00:08:26,280
was published last year it's a good read

216
00:08:26,280 --> 00:08:28,620
so I've also included the reference link

217
00:08:28,620 --> 00:08:31,680
so do check it out I particularly like

218
00:08:31,680 --> 00:08:34,140
this image because it clearly tells us

219
00:08:34,140 --> 00:08:36,779
what is software supply chain it is

220
00:08:36,779 --> 00:08:38,458
analogous to our traditional supply

221
00:08:38,458 --> 00:08:40,919
chain wherein you know you have a

222
00:08:40,919 --> 00:08:42,659
factory wherein you manufacture things

223
00:08:42,659 --> 00:08:45,480
you package you process and then finally

224
00:08:45,480 --> 00:08:47,880
you ship it to the customer similarly in

225
00:08:47,880 --> 00:08:50,339
software uh we start with our source

226
00:08:50,339 --> 00:08:52,860
code that is whenever we write code we

227
00:08:52,860 --> 00:08:55,560
not just write new stuff we also import

228
00:08:55,560 --> 00:08:57,180
libraries so that those become our

229
00:08:57,180 --> 00:08:59,880
dependencies then we have build systems

230
00:08:59,880 --> 00:09:02,640
so if we have a Docker file we build a

231
00:09:02,640 --> 00:09:05,220
container image we create all our

232
00:09:05,220 --> 00:09:07,560
release manifests and then we either

233
00:09:07,560 --> 00:09:09,600
store it internally for internal

234
00:09:09,600 --> 00:09:11,640
consumption or over a network in

235
00:09:11,640 --> 00:09:14,279
different repositories and finally your

236
00:09:14,279 --> 00:09:16,820
consumer when you have to

237
00:09:16,820 --> 00:09:19,920
consume all these artifacts you pull it

238
00:09:19,920 --> 00:09:22,200
from the internet and you deploy it in

239
00:09:22,200 --> 00:09:24,240
your target environment this environment

240
00:09:24,240 --> 00:09:26,459
could be the public clouds or on-prem

241
00:09:26,459 --> 00:09:28,740
systems but you have to get all these

242
00:09:28,740 --> 00:09:31,620
artifacts from the pub publisher

243
00:09:31,620 --> 00:09:34,440
so each phase of this supply chain has

244
00:09:34,440 --> 00:09:37,200
to be secure so in the recent past all

245
00:09:37,200 --> 00:09:38,820
of the cyber attacks if they have taught

246
00:09:38,820 --> 00:09:41,100
us anything is that security should not

247
00:09:41,100 --> 00:09:43,500
be an afterthought security should be

248
00:09:43,500 --> 00:09:45,300
you know included right from your design

249
00:09:45,300 --> 00:09:48,000
phase to your writing the code to build

250
00:09:48,000 --> 00:09:50,580
systems and finally while deploying so

251
00:09:50,580 --> 00:09:52,320
it has to be part of each and every

252
00:09:52,320 --> 00:09:55,680
phase in this supply chain and also it

253
00:09:55,680 --> 00:09:57,779
is important that all of these steps are

254
00:09:57,779 --> 00:10:00,480
automated because it is not humanly

255
00:10:00,480 --> 00:10:03,120
possible for one person or one team to

256
00:10:03,120 --> 00:10:05,880
carry out all these steps that is where

257
00:10:05,880 --> 00:10:07,800
uh there are several open source tools

258
00:10:07,800 --> 00:10:10,800
which help in automating different

259
00:10:10,800 --> 00:10:13,680
stages of this supply chain and add

260
00:10:13,680 --> 00:10:15,959
security to each of these phases

261
00:10:15,959 --> 00:10:17,880
and in the demo today we are going to

262
00:10:17,880 --> 00:10:21,300
look at uh two popular open source tool

263
00:10:21,300 --> 00:10:23,820
like Dallas mentioned we are going to

264
00:10:23,820 --> 00:10:25,860
use cosine to sign our container image

265
00:10:25,860 --> 00:10:28,800
and then we are going to use keyword

266
00:10:28,800 --> 00:10:31,800
node to verify that the actually the

267
00:10:31,800 --> 00:10:33,420
signed image is what we are using in

268
00:10:33,420 --> 00:10:34,680
production

269
00:10:34,680 --> 00:10:38,339
so let's quickly jump to the demo

270
00:10:38,339 --> 00:10:40,140
I have a screen recording so that we

271
00:10:40,140 --> 00:10:43,080
don't uh you know run over time uh I'm

272
00:10:43,080 --> 00:10:46,339
going to walk you through this recording

273
00:10:46,730 --> 00:10:49,859
[Music]

274
00:10:50,160 --> 00:10:53,160
so I have a simple hello.py file that

275
00:10:53,160 --> 00:10:55,620
just says hello world and I have a

276
00:10:55,620 --> 00:10:58,140
Docker file that says copy this file and

277
00:10:58,140 --> 00:10:59,220
then

278
00:10:59,220 --> 00:11:00,899
execute the file

279
00:11:00,899 --> 00:11:03,180
so this is the cosine public key so this

280
00:11:03,180 --> 00:11:05,519
is the public key uh that dollars also

281
00:11:05,519 --> 00:11:08,100
mentioned that you need to uh

282
00:11:08,100 --> 00:11:10,560
distribute to your consumers so using

283
00:11:10,560 --> 00:11:12,600
this public key the consumer will verify

284
00:11:12,600 --> 00:11:16,320
that whatever was used to sign the image

285
00:11:16,320 --> 00:11:20,959
or an artifact is actually the same

286
00:11:21,180 --> 00:11:24,420
so we can generate uh Keys using cosine

287
00:11:24,420 --> 00:11:26,339
here locally have generated generate

288
00:11:26,339 --> 00:11:28,620
using the generate keypad command but

289
00:11:28,620 --> 00:11:30,360
you it is integrated with a lot of

290
00:11:30,360 --> 00:11:32,760
things you can use x509 certificates for

291
00:11:32,760 --> 00:11:35,940
signing you can use AWS KMS and a lot

292
00:11:35,940 --> 00:11:38,420
other things

293
00:11:39,660 --> 00:11:41,940
so this is the kivano policy so there

294
00:11:41,940 --> 00:11:43,500
are a few parts in this I'm going to

295
00:11:43,500 --> 00:11:44,640
explain about

296
00:11:44,640 --> 00:11:47,220
so this is a cluster policy it means

297
00:11:47,220 --> 00:11:49,200
this policy is applicable throughout

298
00:11:49,200 --> 00:11:50,640
your cluster irrespective of the

299
00:11:50,640 --> 00:11:51,839
namespace

300
00:11:51,839 --> 00:11:54,899
and we name this policy check image and

301
00:11:54,899 --> 00:11:56,399
the validation failure action is

302
00:11:56,399 --> 00:11:59,880
enforced it means uh if this if there's

303
00:11:59,880 --> 00:12:01,920
a policy violation the admission request

304
00:12:01,920 --> 00:12:04,800
is going to get rejected

305
00:12:04,800 --> 00:12:07,079
and then we have

306
00:12:07,079 --> 00:12:10,200
uh kinds that is this particular policy

307
00:12:10,200 --> 00:12:12,480
is applicable on resource kinds Bots and

308
00:12:12,480 --> 00:12:14,579
deployment kivano is a policy engine

309
00:12:14,579 --> 00:12:16,500
which acts as an admission controller so

310
00:12:16,500 --> 00:12:18,240
whenever you create a new pod or a

311
00:12:18,240 --> 00:12:20,579
deployment this admission controller

312
00:12:20,579 --> 00:12:23,100
sees that okay this policy is uh

313
00:12:23,100 --> 00:12:25,740
deployed and there's a new incoming

314
00:12:25,740 --> 00:12:29,579
border a deployment does it uh

315
00:12:29,579 --> 00:12:32,579
pass the policy or not if it passes it

316
00:12:32,579 --> 00:12:34,260
admits the request if it fails it

317
00:12:34,260 --> 00:12:36,360
rejects the request

318
00:12:36,360 --> 00:12:39,180
and then verify images is the key so

319
00:12:39,180 --> 00:12:42,060
here we are using a cosine for signing

320
00:12:42,060 --> 00:12:43,860
the images and keyword has integration

321
00:12:43,860 --> 00:12:46,320
with cosine and this is the particular

322
00:12:46,320 --> 00:12:47,880
key that you have to use in your policy

323
00:12:47,880 --> 00:12:50,220
verify images and then you give your

324
00:12:50,220 --> 00:12:52,440
image reference so here I have stored

325
00:12:52,440 --> 00:12:56,040
the image in my Docker Hub Repository

326
00:12:56,040 --> 00:12:58,320
and this is the public key so you have

327
00:12:58,320 --> 00:13:00,180
to tell your policy what is the public

328
00:13:00,180 --> 00:13:02,100
key to use and it is the same public key

329
00:13:02,100 --> 00:13:04,620
that was generated by the silent keypad

330
00:13:04,620 --> 00:13:06,600
generate command

331
00:13:06,600 --> 00:13:09,000
now let's look at a deployment file so

332
00:13:09,000 --> 00:13:10,920
this is your typical deployment file and

333
00:13:10,920 --> 00:13:12,839
the image that I'm going to deploy in

334
00:13:12,839 --> 00:13:17,600
the cluster is the desk icon demo image

335
00:13:22,139 --> 00:13:24,680
all right

336
00:13:25,860 --> 00:13:28,560
now that we have looked at all the files

337
00:13:28,560 --> 00:13:32,719
we will build and push this image

338
00:13:34,500 --> 00:13:37,160
so I'm pushing this to my local

339
00:13:37,160 --> 00:13:40,819
Docker Hub repo

340
00:13:42,120 --> 00:13:44,360
foreign

341
00:13:46,850 --> 00:13:51,360
[Music]

342
00:13:51,360 --> 00:13:53,700
so now let's just quickly verify we see

343
00:13:53,700 --> 00:13:55,800
that there is a con demo is indeed

344
00:13:55,800 --> 00:13:59,279
pushed with the tag one zero zero

345
00:13:59,279 --> 00:14:01,560
so now we have our setup ready but now

346
00:14:01,560 --> 00:14:03,660
we need a cluster for it so for the demo

347
00:14:03,660 --> 00:14:05,339
we are going to create a kind cluster

348
00:14:05,339 --> 00:14:07,380
and when the cluster is ready we will

349
00:14:07,380 --> 00:14:09,600
start deploying policies and see what

350
00:14:09,600 --> 00:14:11,779
happens

351
00:14:13,279 --> 00:14:17,240
so the notes are ready

352
00:14:17,880 --> 00:14:20,459
Kevin was also available as a handshot

353
00:14:20,459 --> 00:14:22,019
so for the demo we are going to use

354
00:14:22,019 --> 00:14:23,760
Helen chart for installing keyword new

355
00:14:23,760 --> 00:14:26,459
so you add the repo you update it and

356
00:14:26,459 --> 00:14:28,680
then finally do a Helm install you can

357
00:14:28,680 --> 00:14:31,380
see that I'm installing kivano in its

358
00:14:31,380 --> 00:14:33,120
own namespace here I know it's a good

359
00:14:33,120 --> 00:14:35,100
practice and setting the replica arm to

360
00:14:35,100 --> 00:14:36,420
three

361
00:14:36,420 --> 00:14:38,579
um so if you look at the pods in the

362
00:14:38,579 --> 00:14:39,959
kivano name space there should be three

363
00:14:39,959 --> 00:14:42,979
cable notebooks

364
00:14:44,519 --> 00:14:46,920
Yep they're initializing

365
00:14:46,920 --> 00:14:49,019
and once the cabinet pots are ready we

366
00:14:49,019 --> 00:14:53,240
are good to install the policies now

367
00:14:54,839 --> 00:14:57,000
so just a quick recap of what we are

368
00:14:57,000 --> 00:14:59,459
going to install so if we look at the

369
00:14:59,459 --> 00:15:02,100
check image policy so this is a cluster

370
00:15:02,100 --> 00:15:04,740
policy and it's a devsecondemo it's the

371
00:15:04,740 --> 00:15:07,500
correct image tag and it's an info

372
00:15:07,500 --> 00:15:09,720
section

373
00:15:09,720 --> 00:15:12,240
and the deployment just making sure we

374
00:15:12,240 --> 00:15:15,620
are using the same image

375
00:15:16,500 --> 00:15:18,300
now that all the pots are running we're

376
00:15:18,300 --> 00:15:20,279
going to install the policy in the

377
00:15:20,279 --> 00:15:22,639
cluster

378
00:15:24,480 --> 00:15:28,459
so you apply the policy ammo

379
00:15:28,800 --> 00:15:31,500
and now the setup is such that we have a

380
00:15:31,500 --> 00:15:33,120
kind cluster we have given my admission

381
00:15:33,120 --> 00:15:34,980
controller running and we have installed

382
00:15:34,980 --> 00:15:38,040
our policy uh but the image that we have

383
00:15:38,040 --> 00:15:40,380
pushed to Docker Hub doesn't have it's

384
00:15:40,380 --> 00:15:43,620
not signed so but in our deployment uh

385
00:15:43,620 --> 00:15:46,260
we are using the same devsecond demo 100

386
00:15:46,260 --> 00:15:49,380
tag but we have a cluster policy saying

387
00:15:49,380 --> 00:15:51,480
if the image is not signed you have to

388
00:15:51,480 --> 00:15:53,220
deny the request

389
00:15:53,220 --> 00:15:55,199
so let's try applying our deployment

390
00:15:55,199 --> 00:15:57,660
demo so typically all the deployment

391
00:15:57,660 --> 00:15:59,880
damage you in a production environment

392
00:15:59,880 --> 00:16:01,440
you create a different name space for

393
00:16:01,440 --> 00:16:03,540
that so we are going to apply this

394
00:16:03,540 --> 00:16:07,459
deployment to ml in a prod name space

395
00:16:09,360 --> 00:16:11,639
so as you can see

396
00:16:11,639 --> 00:16:13,519
um

397
00:16:13,519 --> 00:16:17,399
has denied the request and the message

398
00:16:17,399 --> 00:16:19,380
that we get is it failed to emit it

399
00:16:19,380 --> 00:16:21,600
failed to verify image because there are

400
00:16:21,600 --> 00:16:23,820
no matching signatures now we are going

401
00:16:23,820 --> 00:16:26,519
to fix this we are actually going to

402
00:16:26,519 --> 00:16:28,500
sign our image and then push the

403
00:16:28,500 --> 00:16:29,579
signature

404
00:16:29,579 --> 00:16:31,680
so remember the cosine dot k and

405
00:16:31,680 --> 00:16:34,019
cosine.pub that was generated

406
00:16:34,019 --> 00:16:35,760
so we're actually going to make use of

407
00:16:35,760 --> 00:16:38,779
cosine.key now

408
00:16:45,839 --> 00:16:49,199
so this is the command to sign uh your

409
00:16:49,199 --> 00:16:51,480
Docker images

410
00:16:51,480 --> 00:16:53,639
so you give the private key and then you

411
00:16:53,639 --> 00:16:54,420
give

412
00:16:54,420 --> 00:16:57,380
the image name

413
00:17:03,060 --> 00:17:06,599
so that's it it's a cosine sine command

414
00:17:06,599 --> 00:17:08,339
signs the container image and it also

415
00:17:08,339 --> 00:17:10,859
pushes the signature to your Docker

416
00:17:10,859 --> 00:17:13,199
Repository

417
00:17:13,199 --> 00:17:15,299
now we'll refresh this to verify the

418
00:17:15,299 --> 00:17:16,799
signature is also pushed to the OCR

419
00:17:16,799 --> 00:17:19,520
Repository

420
00:17:20,400 --> 00:17:22,260
yes

421
00:17:22,260 --> 00:17:25,260
now we'll go back and see uh try to

422
00:17:25,260 --> 00:17:28,140
apply the deployment yaml again now all

423
00:17:28,140 --> 00:17:31,020
the policies are matching we have a

424
00:17:31,020 --> 00:17:33,480
signature we are using the image that is

425
00:17:33,480 --> 00:17:38,179
signed so this should work

426
00:17:40,980 --> 00:17:44,640
yes we have a deployment that is created

427
00:17:44,640 --> 00:17:47,900
that is the demo I had

428
00:17:47,900 --> 00:17:51,240
I'm going to quickly switch back yes

429
00:17:51,240 --> 00:17:53,700
so yes so we saw that

430
00:17:53,700 --> 00:17:56,460
so uh doll is talked us through why

431
00:17:56,460 --> 00:17:58,200
securing images and manifests is

432
00:17:58,200 --> 00:18:01,500
important we looked at the six door

433
00:18:01,500 --> 00:18:04,500
project called cosine at a qrno which is

434
00:18:04,500 --> 00:18:06,660
a cncf incubating project even though

435
00:18:06,660 --> 00:18:08,039
these are two completely different

436
00:18:08,039 --> 00:18:10,980
projects and that is one of the benefits

437
00:18:10,980 --> 00:18:13,080
or advantages of Open Source is that all

438
00:18:13,080 --> 00:18:14,400
these different projects were used

439
00:18:14,400 --> 00:18:17,280
together they can provide very powerful

440
00:18:17,280 --> 00:18:18,360
features

441
00:18:18,360 --> 00:18:19,980
and

442
00:18:19,980 --> 00:18:21,419
um and how these tools actually

443
00:18:21,419 --> 00:18:23,400
complement to achieve a secure software

444
00:18:23,400 --> 00:18:25,020
supply chain and we also looked at some

445
00:18:25,020 --> 00:18:27,840
of the best practices

446
00:18:27,840 --> 00:18:29,400
um yeah and if you want to get started

447
00:18:29,400 --> 00:18:31,919
with either of these projects uh there

448
00:18:31,919 --> 00:18:35,460
are kuberno has a set of sample policies

449
00:18:35,460 --> 00:18:37,440
there are over 200 plus sample policies

450
00:18:37,440 --> 00:18:39,840
you can take a look and most and at

451
00:18:39,840 --> 00:18:42,360
least some of them should be readily

452
00:18:42,360 --> 00:18:45,059
usable for your production scenarios and

453
00:18:45,059 --> 00:18:46,679
if you have any questions you can join

454
00:18:46,679 --> 00:18:49,080
the kivarno slack channel uh we are on

455
00:18:49,080 --> 00:18:51,000
the kubernetes slack and also the CNC of

456
00:18:51,000 --> 00:18:53,640
slack also you can visit the six store

457
00:18:53,640 --> 00:18:56,820
uh official site to join the slack

458
00:18:56,820 --> 00:18:58,919
Channel and they have ton of good cool

459
00:18:58,919 --> 00:19:00,780
projects under the six door community

460
00:19:00,780 --> 00:19:02,520
and also

461
00:19:02,520 --> 00:19:04,260
um there's a very helpful slack Channel

462
00:19:04,260 --> 00:19:06,600
out there

463
00:19:06,600 --> 00:19:08,940
um yeah thank you

464
00:19:08,940 --> 00:19:11,400
all right thank you so much ladies this

465
00:19:11,400 --> 00:19:13,980
was amazing and thanks for the demo that

466
00:19:13,980 --> 00:19:16,080
was smooth I I need to I need to do that

467
00:19:16,080 --> 00:19:18,120
trick later on oh let me remove your

468
00:19:18,120 --> 00:19:19,919
screen right away oh I need to no

469
00:19:19,919 --> 00:19:21,480
worries I need to do that trick the wire

470
00:19:21,480 --> 00:19:23,820
why I just what I just record it and

471
00:19:23,820 --> 00:19:26,520
that nothing happens because yeah I'm

472
00:19:26,520 --> 00:19:28,500
sorry the Democrats are never in my

473
00:19:28,500 --> 00:19:31,200
favor so most of the time I screw up

474
00:19:31,200 --> 00:19:33,539
with live demos but uh thank you so much

475
00:19:33,539 --> 00:19:35,460
if you have any questions for both of

476
00:19:35,460 --> 00:19:37,200
these ladies uh or for one of these

477
00:19:37,200 --> 00:19:39,120
ladies uh please feel free to put them

478
00:19:39,120 --> 00:19:41,820
in Discord because we are running a bit

479
00:19:41,820 --> 00:19:44,220
over time and I want to bring up the

480
00:19:44,220 --> 00:19:46,860
next speaker so thank you thank you

481
00:19:46,860 --> 00:19:47,700
those

482
00:19:47,700 --> 00:19:51,200
um this was great thank you

