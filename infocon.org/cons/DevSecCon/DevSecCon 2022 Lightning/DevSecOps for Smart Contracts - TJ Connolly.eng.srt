1
00:00:00,000 --> 00:00:02,879
all right next up we have TJ Connolly

2
00:00:02,879 --> 00:00:05,040
who's an engineer at fireblocks TJ is an

3
00:00:05,040 --> 00:00:06,600
engineer and consultant with over 10

4
00:00:06,600 --> 00:00:07,980
years experience in the field of cyber

5
00:00:07,980 --> 00:00:09,360
security and software he's gonna be

6
00:00:09,360 --> 00:00:11,099
talking about devsec Ops for smart

7
00:00:11,099 --> 00:00:13,019
contracts without further Ado let's

8
00:00:13,019 --> 00:00:15,960
bring on TJ hey TJ

9
00:00:15,960 --> 00:00:18,300
perfect sounds great thanks

10
00:00:18,300 --> 00:00:20,039
um so for this talk today I'm going to

11
00:00:20,039 --> 00:00:22,140
be talking about uh devsecops

12
00:00:22,140 --> 00:00:24,539
specifically for smart contracts if

13
00:00:24,539 --> 00:00:25,980
you're not familiar with smart contracts

14
00:00:25,980 --> 00:00:27,180
are don't worry about the end of this

15
00:00:27,180 --> 00:00:29,699
talk you will uh and you'll start to

16
00:00:29,699 --> 00:00:33,059
understand and uh you know take into

17
00:00:33,059 --> 00:00:34,500
consideration some of the unique

18
00:00:34,500 --> 00:00:36,600
security concerns that you have to be

19
00:00:36,600 --> 00:00:38,700
aware of When developing smart contracts

20
00:00:38,700 --> 00:00:41,960
versus traditional you know software

21
00:00:41,960 --> 00:00:43,980
and so what are we going to cover today

22
00:00:43,980 --> 00:00:45,180
you know first off we're just going to

23
00:00:45,180 --> 00:00:48,120
help Define what is a smart contract uh

24
00:00:48,120 --> 00:00:50,399
what is the typical devops lifecycle of

25
00:00:50,399 --> 00:00:52,260
a smart contract once we've identified

26
00:00:52,260 --> 00:00:54,180
what is the devops life cycle then we're

27
00:00:54,180 --> 00:00:56,219
able to construct a secure

28
00:00:56,219 --> 00:00:58,079
implementation of that devops like cycle

29
00:00:58,079 --> 00:01:00,300
or devsecops

30
00:01:00,300 --> 00:01:00,960
um

31
00:01:00,960 --> 00:01:02,699
there's a lot of lessons again that we

32
00:01:02,699 --> 00:01:04,680
can learn from traditional devsecops and

33
00:01:04,680 --> 00:01:06,299
a lot of traditional tooling and

34
00:01:06,299 --> 00:01:08,640
processes that we can leverage but there

35
00:01:08,640 --> 00:01:10,260
are some very unique things that you

36
00:01:10,260 --> 00:01:11,520
need to take into consideration when

37
00:01:11,520 --> 00:01:13,439
doing these on on Smart contracts and

38
00:01:13,439 --> 00:01:16,020
blockchains and then lastly I'll present

39
00:01:16,020 --> 00:01:18,840
a high level framework on you know if

40
00:01:18,840 --> 00:01:21,540
you are looking to implement a uh you

41
00:01:21,540 --> 00:01:23,460
know smart contract development program

42
00:01:23,460 --> 00:01:25,560
how you can do so securely and some of

43
00:01:25,560 --> 00:01:27,659
the best uh and you know most widely

44
00:01:27,659 --> 00:01:30,659
used tools out there to do that

45
00:01:30,659 --> 00:01:32,820
so first off let's define what is a

46
00:01:32,820 --> 00:01:34,920
smart contract smart contract is a

47
00:01:34,920 --> 00:01:37,439
self-executing digital agreement uh

48
00:01:37,439 --> 00:01:39,540
effectively it enables two parties to

49
00:01:39,540 --> 00:01:42,180
exchange anything and a transparent and

50
00:01:42,180 --> 00:01:44,400
conflict-free way while avoiding the

51
00:01:44,400 --> 00:01:47,100
need for a specific trusted party so

52
00:01:47,100 --> 00:01:49,979
take for example you know uh uh you know

53
00:01:49,979 --> 00:01:52,259
you deposit money into your bank right

54
00:01:52,259 --> 00:01:54,420
you're trusting that your bank actually

55
00:01:54,420 --> 00:01:57,119
has that money right and when you go and

56
00:01:57,119 --> 00:01:58,740
you read your bank balance there on

57
00:01:58,740 --> 00:02:00,600
their website you're trusting that you

58
00:02:00,600 --> 00:02:02,460
know your physical cash is actually

59
00:02:02,460 --> 00:02:03,840
backed up there or it's at least

60
00:02:03,840 --> 00:02:06,020
redeemable in some some form of fashion

61
00:02:06,020 --> 00:02:09,119
uh smart contracts effectively eliminate

62
00:02:09,119 --> 00:02:11,340
the need for that trust in a

63
00:02:11,340 --> 00:02:14,940
counterparty the trust however gets you

64
00:02:14,940 --> 00:02:16,920
know transitioned from you know the bank

65
00:02:16,920 --> 00:02:19,260
or the centralized entity to a

66
00:02:19,260 --> 00:02:21,780
decentralized blockchain so that

67
00:02:21,780 --> 00:02:23,760
blockchain could be ethereum it could be

68
00:02:23,760 --> 00:02:25,800
Bitcoin it could be you know there's a

69
00:02:25,800 --> 00:02:27,360
number of smart contract platforms out

70
00:02:27,360 --> 00:02:29,459
there but effectively that's really what

71
00:02:29,459 --> 00:02:32,640
the you know the the trust assumption is

72
00:02:32,640 --> 00:02:33,900
that you're making there you're taking

73
00:02:33,900 --> 00:02:35,760
the trust away from the centralized

74
00:02:35,760 --> 00:02:37,680
entity and put it into the decentralized

75
00:02:37,680 --> 00:02:38,760
blockchain

76
00:02:38,760 --> 00:02:40,620
and so what is a smart contract it's

77
00:02:40,620 --> 00:02:42,540
effectively just a software program that

78
00:02:42,540 --> 00:02:45,300
you know is uh you know turn complete it

79
00:02:45,300 --> 00:02:46,680
has collection of code which are

80
00:02:46,680 --> 00:02:49,260
functions uh and data so the state of

81
00:02:49,260 --> 00:02:52,080
that application uh and they sit on that

82
00:02:52,080 --> 00:02:54,120
distributed Ledger that is a blockchain

83
00:02:54,120 --> 00:02:57,060
so you can contrast this to you know the

84
00:02:57,060 --> 00:02:59,580
traditional client server or SAS model

85
00:02:59,580 --> 00:03:02,519
uh where you know code and data is you

86
00:03:02,519 --> 00:03:05,040
know typically you know executed behind

87
00:03:05,040 --> 00:03:07,019
the scenes on a server somewhere and you

88
00:03:07,019 --> 00:03:08,879
as the end user you know you just see

89
00:03:08,879 --> 00:03:12,120
the browser or the mobile experience uh

90
00:03:12,120 --> 00:03:14,220
with smart contracts all of the business

91
00:03:14,220 --> 00:03:16,140
logic so all of the things that

92
00:03:16,140 --> 00:03:17,519
typically might have been done on the

93
00:03:17,519 --> 00:03:19,739
back end are now done in a publicly

94
00:03:19,739 --> 00:03:22,440
verifiable and transparent manner so if

95
00:03:22,440 --> 00:03:24,180
you interact with that smart contract

96
00:03:24,180 --> 00:03:25,920
everyone can see what that smart

97
00:03:25,920 --> 00:03:28,260
contract does and verify that it

98
00:03:28,260 --> 00:03:30,959
executes according to you know what we

99
00:03:30,959 --> 00:03:32,760
trust it does

100
00:03:32,760 --> 00:03:34,860
so you know there's a lot of positive

101
00:03:34,860 --> 00:03:36,840
attributes for smart contracts you know

102
00:03:36,840 --> 00:03:38,340
number one they're permission list by

103
00:03:38,340 --> 00:03:39,420
default

104
00:03:39,420 --> 00:03:40,920
um so that means that you know anyone

105
00:03:40,920 --> 00:03:42,599
can go and deploy a smart contract on

106
00:03:42,599 --> 00:03:44,879
some of these open blockchain networks

107
00:03:44,879 --> 00:03:47,280
um they're also composable uh so this is

108
00:03:47,280 --> 00:03:48,480
you know huge in terms of

109
00:03:48,480 --> 00:03:50,940
interoperability uh you can have a smart

110
00:03:50,940 --> 00:03:52,200
contract that calls another smart

111
00:03:52,200 --> 00:03:53,580
contract that calls another smart

112
00:03:53,580 --> 00:03:57,659
contract and it really opens up the use

113
00:03:57,659 --> 00:04:00,659
cases for interoperability between you

114
00:04:00,659 --> 00:04:02,640
know different applications so instead

115
00:04:02,640 --> 00:04:04,860
of uh application needing to have its

116
00:04:04,860 --> 00:04:07,560
own proprietary API and you know other

117
00:04:07,560 --> 00:04:09,120
tools to have to integrate with that

118
00:04:09,120 --> 00:04:11,760
proprietary API smart contracts all

119
00:04:11,760 --> 00:04:13,439
speak the same language they all speak

120
00:04:13,439 --> 00:04:16,380
the same API there's just unique kind of

121
00:04:16,380 --> 00:04:18,060
business logic things within the smart

122
00:04:18,060 --> 00:04:19,500
contract itself that you need to

123
00:04:19,500 --> 00:04:20,820
interact with

124
00:04:20,820 --> 00:04:22,979
and then uh you know the big one is

125
00:04:22,979 --> 00:04:24,660
really just you know it's true it's much

126
00:04:24,660 --> 00:04:26,340
more trustworthy so the interactions

127
00:04:26,340 --> 00:04:27,720
with that smart contract they're

128
00:04:27,720 --> 00:04:29,520
transparent they're traceable meaning

129
00:04:29,520 --> 00:04:31,440
that you know there's a ledger of Truth

130
00:04:31,440 --> 00:04:34,979
and it's uh you know without

131
00:04:34,979 --> 00:04:36,540
breaking the security of the network

132
00:04:36,540 --> 00:04:39,240
it's really traceable right so it's an

133
00:04:39,240 --> 00:04:41,040
audit Trail that's built in and who was

134
00:04:41,040 --> 00:04:42,419
who has interacted with that smart

135
00:04:42,419 --> 00:04:44,699
contract when and what did they do

136
00:04:44,699 --> 00:04:46,139
um and these are all very very you know

137
00:04:46,139 --> 00:04:48,000
positive attributes for for certain use

138
00:04:48,000 --> 00:04:49,020
cases

139
00:04:49,020 --> 00:04:50,580
uh that being said you know with

140
00:04:50,580 --> 00:04:52,919
anything there's always a trade-off so

141
00:04:52,919 --> 00:04:54,660
um you know this is could be considered

142
00:04:54,660 --> 00:04:57,720
a positive trade-off or a negative one

143
00:04:57,720 --> 00:04:59,040
but you know they're immutable by

144
00:04:59,040 --> 00:05:00,900
default what does that mean when you

145
00:05:00,900 --> 00:05:02,699
deploy a smart contract to a blockchain

146
00:05:02,699 --> 00:05:05,280
by default it can't be upgraded or

147
00:05:05,280 --> 00:05:07,800
updated right it's basically just you

148
00:05:07,800 --> 00:05:10,320
submit it you send it to a block on the

149
00:05:10,320 --> 00:05:12,180
blockchain it's now forever written to

150
00:05:12,180 --> 00:05:15,000
that block in the distributed Ledger and

151
00:05:15,000 --> 00:05:16,620
if you wanted to ever update that smart

152
00:05:16,620 --> 00:05:18,780
contract code you know by default you're

153
00:05:18,780 --> 00:05:20,699
not able to do that there's workarounds

154
00:05:20,699 --> 00:05:22,440
for that which we'll cover but but just

155
00:05:22,440 --> 00:05:23,820
you know important thing to keep in mind

156
00:05:23,820 --> 00:05:24,600
here

157
00:05:24,600 --> 00:05:26,820
the other uh you know kind of risk here

158
00:05:26,820 --> 00:05:29,699
is that uh once you start talking about

159
00:05:29,699 --> 00:05:32,460
applications like D5 decentralized

160
00:05:32,460 --> 00:05:35,340
Finance uh and you know transferring a

161
00:05:35,340 --> 00:05:37,979
value and economic value there is the

162
00:05:37,979 --> 00:05:40,500
potential for much more higher impact

163
00:05:40,500 --> 00:05:42,720
economic type security vulnerabilities

164
00:05:42,720 --> 00:05:45,180
So In traditional software you know when

165
00:05:45,180 --> 00:05:47,340
you're ingesting data you know the the

166
00:05:47,340 --> 00:05:49,259
worst case scenarios typically are I

167
00:05:49,259 --> 00:05:52,740
don't want to you know uh have remote

168
00:05:52,740 --> 00:05:56,220
code execution or I don't want to uh you

169
00:05:56,220 --> 00:05:59,160
know let let a hacker you know bypass

170
00:05:59,160 --> 00:06:01,560
authentication and authorization those

171
00:06:01,560 --> 00:06:03,180
concerns are still present with smart

172
00:06:03,180 --> 00:06:05,400
contracts uh and even accelerated so I

173
00:06:05,400 --> 00:06:07,979
would say but on top of those you also

174
00:06:07,979 --> 00:06:11,400
have this added cost of hey this is a

175
00:06:11,400 --> 00:06:13,620
public smart contract anyone can

176
00:06:13,620 --> 00:06:15,960
interact with it if there are

177
00:06:15,960 --> 00:06:17,880
vulnerabilities in it business logic

178
00:06:17,880 --> 00:06:20,460
vulnerabilities uh then they could be

179
00:06:20,460 --> 00:06:22,500
much more higher impact right so if it's

180
00:06:22,500 --> 00:06:24,539
a lending smart contract that lens out

181
00:06:24,539 --> 00:06:26,520
out you know crypto when you post

182
00:06:26,520 --> 00:06:29,639
collateral if that gets hacked you know

183
00:06:29,639 --> 00:06:31,380
that entire lending Market could be at

184
00:06:31,380 --> 00:06:32,880
risk so these are very unique security

185
00:06:32,880 --> 00:06:36,780
concerns specific to Smart contracts

186
00:06:36,780 --> 00:06:38,039
um and then the last two ones I just

187
00:06:38,039 --> 00:06:39,539
want to like there you know performance

188
00:06:39,539 --> 00:06:41,580
at the blockchain is still a slower

189
00:06:41,580 --> 00:06:43,139
database it's a slower centralized

190
00:06:43,139 --> 00:06:44,600
database so it's not going to be

191
00:06:44,600 --> 00:06:47,100
valuable for every single use case out

192
00:06:47,100 --> 00:06:50,100
there uh and again the trust here that

193
00:06:50,100 --> 00:06:52,319
you're uh assuming is that the

194
00:06:52,319 --> 00:06:54,180
blockchain that this smart contract is

195
00:06:54,180 --> 00:06:57,419
settling on uh and living on is secure

196
00:06:57,419 --> 00:06:59,460
and decentralized and can be looked to

197
00:06:59,460 --> 00:07:01,400
as the source of Truth

198
00:07:01,400 --> 00:07:04,979
so how do smart contracts work uh so a

199
00:07:04,979 --> 00:07:06,840
contract is deployed and managed by you

200
00:07:06,840 --> 00:07:09,780
know a human a developer you go you type

201
00:07:09,780 --> 00:07:11,400
your code and then you deploy it to the

202
00:07:11,400 --> 00:07:13,800
blockchain uh once that smart contract

203
00:07:13,800 --> 00:07:15,600
is deployed on the blockchain it exists

204
00:07:15,600 --> 00:07:17,940
there at a specific address and then

205
00:07:17,940 --> 00:07:19,979
anyone else on that blockchain as long

206
00:07:19,979 --> 00:07:22,139
as their permission to do so can then go

207
00:07:22,139 --> 00:07:24,539
ahead and view that smart contract and

208
00:07:24,539 --> 00:07:26,460
also interact with it

209
00:07:26,460 --> 00:07:28,259
so what can they do with interacting

210
00:07:28,259 --> 00:07:30,419
interaction they can transfer funds

211
00:07:30,419 --> 00:07:33,360
directly to it the smart contract can

212
00:07:33,360 --> 00:07:35,759
send funds out from the smart contract

213
00:07:35,759 --> 00:07:39,900
back to the users and also the the users

214
00:07:39,900 --> 00:07:42,060
can go and invoke specific functions or

215
00:07:42,060 --> 00:07:44,460
methods within that smart contract so

216
00:07:44,460 --> 00:07:48,300
for the lending example uh you know

217
00:07:48,300 --> 00:07:50,280
you know the high level contract is it's

218
00:07:50,280 --> 00:07:52,259
a lending smart contract one of the

219
00:07:52,259 --> 00:07:53,880
methods and functions there might be

220
00:07:53,880 --> 00:07:56,099
deposit right so you go and you deposit

221
00:07:56,099 --> 00:07:57,840
your collateral another one might be

222
00:07:57,840 --> 00:08:00,360
take out a loan and so you go and invoke

223
00:08:00,360 --> 00:08:02,940
that so they're all you know delineated

224
00:08:02,940 --> 00:08:05,039
just like regular software would be with

225
00:08:05,039 --> 00:08:07,319
methods and functions

226
00:08:07,319 --> 00:08:08,759
and so the important thing to understand

227
00:08:08,759 --> 00:08:11,039
here with blockchain why uh this is so

228
00:08:11,039 --> 00:08:12,900
unique versus regular software is that

229
00:08:12,900 --> 00:08:16,199
the ability for you as the developer to

230
00:08:16,199 --> 00:08:18,780
deploy that smart contract and then from

231
00:08:18,780 --> 00:08:21,419
there manage or interact with it as an

232
00:08:21,419 --> 00:08:23,280
end user that is a hundred percent

233
00:08:23,280 --> 00:08:26,039
dependent on the underlying uh

234
00:08:26,039 --> 00:08:27,479
authentication and authorization

235
00:08:27,479 --> 00:08:30,180
mechanisms of the blockchain itself and

236
00:08:30,180 --> 00:08:32,039
so this is all done through public key

237
00:08:32,039 --> 00:08:35,760
cryptography and digital signatures so

238
00:08:35,760 --> 00:08:37,679
this is what makes blockchain secure

239
00:08:37,679 --> 00:08:41,039
makes them available to be decentralized

240
00:08:41,039 --> 00:08:42,659
um and you know enforces security

241
00:08:42,659 --> 00:08:44,700
without uh you know giving up

242
00:08:44,700 --> 00:08:47,700
sacrificing some of those concerns and

243
00:08:47,700 --> 00:08:49,260
so what you're going to find is that

244
00:08:49,260 --> 00:08:51,060
access control when it comes to Smart

245
00:08:51,060 --> 00:08:53,700
contracts uh it's really the the the

246
00:08:53,700 --> 00:08:56,339
biggest uh the biggest issue it's

247
00:08:56,339 --> 00:08:57,720
critical to get that right and

248
00:08:57,720 --> 00:08:59,279
understand what are the threat vectors

249
00:08:59,279 --> 00:09:01,980
uh and how to you know design effective

250
00:09:01,980 --> 00:09:04,200
mitigations

251
00:09:04,200 --> 00:09:07,320
so let's walk through what a uh uh a

252
00:09:07,320 --> 00:09:10,500
typical smart contracts uh pipeline

253
00:09:10,500 --> 00:09:11,519
looks like

254
00:09:11,519 --> 00:09:13,380
so you know pretty similar to

255
00:09:13,380 --> 00:09:14,820
traditional software you have your

256
00:09:14,820 --> 00:09:16,399
source code that you develop

257
00:09:16,399 --> 00:09:19,260
mycontract.soul I'm going to refer to a

258
00:09:19,260 --> 00:09:21,120
lot of things in this presentation and

259
00:09:21,120 --> 00:09:24,240
the ethereum evm kind of World

260
00:09:24,240 --> 00:09:25,920
um ethereum is not the only blockchain

261
00:09:25,920 --> 00:09:27,959
out there that supports smart contracts

262
00:09:27,959 --> 00:09:30,540
there's many others uh but evm is

263
00:09:30,540 --> 00:09:32,459
definitely the most widely adopted and

264
00:09:32,459 --> 00:09:34,620
has probably the most advanced developer

265
00:09:34,620 --> 00:09:37,380
tooling so I think it's just a a good uh

266
00:09:37,380 --> 00:09:40,620
frame frame to to view this drill

267
00:09:40,620 --> 00:09:43,440
so you develop your source code you then

268
00:09:43,440 --> 00:09:45,120
send it to the compiler the compiler

269
00:09:45,120 --> 00:09:47,279
takes your source code it generates uh

270
00:09:47,279 --> 00:09:49,019
you know the the binary code from that

271
00:09:49,019 --> 00:09:51,660
so you see that there 0x21

272
00:09:51,660 --> 00:09:54,120
and then you go and you actually have to

273
00:09:54,120 --> 00:09:55,860
deploy that code that you've now

274
00:09:55,860 --> 00:09:58,260
compiled to the blockchain and you have

275
00:09:58,260 --> 00:10:00,660
to do that by writing it directly to the

276
00:10:00,660 --> 00:10:02,399
blockchain so in order to write to the

277
00:10:02,399 --> 00:10:04,320
blockchain you need an account on that

278
00:10:04,320 --> 00:10:06,779
blockchain you need to actually write it

279
00:10:06,779 --> 00:10:08,640
present that digital signature and

280
00:10:08,640 --> 00:10:10,560
deploy it

281
00:10:10,560 --> 00:10:12,660
what you should also do and this isn't

282
00:10:12,660 --> 00:10:14,700
always required but uh one of the big

283
00:10:14,700 --> 00:10:16,140
benefits of doing this on a public

284
00:10:16,140 --> 00:10:17,880
distributed Ledger is that you can

285
00:10:17,880 --> 00:10:20,580
verify that the source code that gets

286
00:10:20,580 --> 00:10:22,560
deployed to the blockchain actually

287
00:10:22,560 --> 00:10:25,140
meets the source code that was compiled

288
00:10:25,140 --> 00:10:28,260
right so what this means is that it if

289
00:10:28,260 --> 00:10:30,120
there was an attacker a man in the

290
00:10:30,120 --> 00:10:32,220
middle that's somehow some way you know

291
00:10:32,220 --> 00:10:34,500
was able to modify your code in between

292
00:10:34,500 --> 00:10:36,540
it being compiled and it being deployed

293
00:10:36,540 --> 00:10:39,060
to the blockchain uh that the source

294
00:10:39,060 --> 00:10:41,580
code verification step would catch that

295
00:10:41,580 --> 00:10:44,339
and invalidate it right so you know

296
00:10:44,339 --> 00:10:45,899
typical thing that you would do is you

297
00:10:45,899 --> 00:10:48,360
would okay compile your code deploy it

298
00:10:48,360 --> 00:10:50,220
and then you know verify that the code

299
00:10:50,220 --> 00:10:51,860
that was deployed at this address

300
00:10:51,860 --> 00:10:54,420
actually matches

301
00:10:54,420 --> 00:10:56,339
what you compiled

302
00:10:56,339 --> 00:10:57,420
um and then if it did you know you're

303
00:10:57,420 --> 00:10:58,920
good to go

304
00:10:58,920 --> 00:11:02,040
so once your application is deployed uh

305
00:11:02,040 --> 00:11:03,899
to the blockchain

306
00:11:03,899 --> 00:11:07,380
it could be a you know immutable block

307
00:11:07,380 --> 00:11:09,420
uh smart contract that doesn't doesn't

308
00:11:09,420 --> 00:11:12,839
change over time there's no uh functions

309
00:11:12,839 --> 00:11:14,640
that really need to be updated or it

310
00:11:14,640 --> 00:11:16,800
could be very you know kind of dynamic

311
00:11:16,800 --> 00:11:18,959
and you need to be able to have the

312
00:11:18,959 --> 00:11:21,060
ability to do ongoing Administration or

313
00:11:21,060 --> 00:11:22,860
other type of operations within that

314
00:11:22,860 --> 00:11:25,200
smart contract so a typical one that

315
00:11:25,200 --> 00:11:27,000
you'll you'll see is you know adding

316
00:11:27,000 --> 00:11:29,820
users or other addresses on the

317
00:11:29,820 --> 00:11:32,220
blockchain to an allow list for a deny

318
00:11:32,220 --> 00:11:32,880
list

319
00:11:32,880 --> 00:11:35,519
so how how are you able to do that it's

320
00:11:35,519 --> 00:11:37,500
all determined by the underlying Access

321
00:11:37,500 --> 00:11:40,440
Control mechanisms of the blockchain so

322
00:11:40,440 --> 00:11:42,420
this is very very important and what

323
00:11:42,420 --> 00:11:43,500
makes it even a little bit more

324
00:11:43,500 --> 00:11:45,720
confusing and challenging is that you

325
00:11:45,720 --> 00:11:48,120
have uh you know different layers of

326
00:11:48,120 --> 00:11:50,519
Access Control you have who can talk to

327
00:11:50,519 --> 00:11:52,500
the smart contract and who has ownership

328
00:11:52,500 --> 00:11:54,360
of a smart contract and can do things

329
00:11:54,360 --> 00:11:56,220
you know from a high level with a smart

330
00:11:56,220 --> 00:11:57,899
contract and then within the smart

331
00:11:57,899 --> 00:12:00,420
contract logic itself the business logic

332
00:12:00,420 --> 00:12:02,459
then you can also have additional Access

333
00:12:02,459 --> 00:12:04,620
Control layers uh depending on what

334
00:12:04,620 --> 00:12:06,480
you're trying to do

335
00:12:06,480 --> 00:12:08,279
uh and then lastly just want to talk

336
00:12:08,279 --> 00:12:11,060
about upgrades

337
00:12:11,640 --> 00:12:13,440
um can you guys see my screen still I

338
00:12:13,440 --> 00:12:15,920
think I might have

339
00:12:16,260 --> 00:12:18,839
oh we just lost it there DJ yeah sorry

340
00:12:18,839 --> 00:12:20,279
about that I think Daddy

341
00:12:20,279 --> 00:12:22,800
click the wrong button there we go

342
00:12:22,800 --> 00:12:24,899
so uh upgrades

343
00:12:24,899 --> 00:12:26,399
um by default like I said smart

344
00:12:26,399 --> 00:12:28,140
contracts are immutable but there are

345
00:12:28,140 --> 00:12:29,760
you do have the ability to you know

346
00:12:29,760 --> 00:12:31,079
through different design patterns

347
00:12:31,079 --> 00:12:34,320
specifically proxies where you deploy a

348
00:12:34,320 --> 00:12:37,620
front-end uh a proxy contract that

349
00:12:37,620 --> 00:12:40,019
effectively points to another contract

350
00:12:40,019 --> 00:12:41,880
where your business logic is actually

351
00:12:41,880 --> 00:12:44,100
going to occur in and the idea is that

352
00:12:44,100 --> 00:12:45,779
most of your updates and upgrades are

353
00:12:45,779 --> 00:12:47,160
going to be in the business logic side

354
00:12:47,160 --> 00:12:49,800
of things so what you do is you just

355
00:12:49,800 --> 00:12:52,200
with that proxy contract you can point

356
00:12:52,200 --> 00:12:55,079
to a new business logic smart contract

357
00:12:55,079 --> 00:12:57,120
whenever you need a you know deploy a

358
00:12:57,120 --> 00:12:59,480
new version

359
00:13:00,079 --> 00:13:02,339
so let's talk about you know the

360
00:13:02,339 --> 00:13:03,420
underlying authentication and

361
00:13:03,420 --> 00:13:05,100
authorization that's happening here so

362
00:13:05,100 --> 00:13:07,079
you know how is Access Control enforced

363
00:13:07,079 --> 00:13:08,880
by the blockchain and its public key

364
00:13:08,880 --> 00:13:10,980
cryptography so you know quick review of

365
00:13:10,980 --> 00:13:12,420
what that is

366
00:13:12,420 --> 00:13:15,000
um you know this is the combination of a

367
00:13:15,000 --> 00:13:18,000
public key and a private key that only

368
00:13:18,000 --> 00:13:20,339
Bob should know

369
00:13:20,339 --> 00:13:22,019
um you know at generation time he

370
00:13:22,019 --> 00:13:23,639
generates this you know typically within

371
00:13:23,639 --> 00:13:25,680
his crypto wallet

372
00:13:25,680 --> 00:13:27,240
um you know it provides a random seed

373
00:13:27,240 --> 00:13:29,639
this might be a 12 to 24 word passphrase

374
00:13:29,639 --> 00:13:32,100
or you know some random bytes But

375
00:13:32,100 --> 00:13:33,839
ultimately with that he gets you know

376
00:13:33,839 --> 00:13:35,220
two pieces of cryptographic information

377
00:13:35,220 --> 00:13:37,079
his public and private key deployed from

378
00:13:37,079 --> 00:13:40,380
that and so what he does to transact on

379
00:13:40,380 --> 00:13:42,060
the blockchain is it'll go and you know

380
00:13:42,060 --> 00:13:44,160
let's say he's trying to deploy you know

381
00:13:44,160 --> 00:13:45,180
his code

382
00:13:45,180 --> 00:13:47,760
what his wallet will do for him is it

383
00:13:47,760 --> 00:13:50,820
will produce a digital signature using

384
00:13:50,820 --> 00:13:53,820
both the public key the private key as

385
00:13:53,820 --> 00:13:55,440
well as the contents of the transaction

386
00:13:55,440 --> 00:13:58,320
and what that does is that authorizes

387
00:13:58,320 --> 00:14:00,899
that transaction on the blockchain so

388
00:14:00,899 --> 00:14:03,120
now the blockchain can say and knows

389
00:14:03,120 --> 00:14:07,019
that yes Bob uh has created the correct

390
00:14:07,019 --> 00:14:08,700
digital signature for this transaction

391
00:14:08,700 --> 00:14:13,139
he provided uh you know the correct

392
00:14:13,139 --> 00:14:14,940
public key that was also associated with

393
00:14:14,940 --> 00:14:16,740
it and we can then go and verify that

394
00:14:16,740 --> 00:14:18,839
Bob is actually who he says says he is

395
00:14:18,839 --> 00:14:21,120
because he has his private key

396
00:14:21,120 --> 00:14:22,860
um and you know we can go and execute

397
00:14:22,860 --> 00:14:25,500
this for him so now Bob owns this

398
00:14:25,500 --> 00:14:27,240
contract that is now deployed on the

399
00:14:27,240 --> 00:14:28,500
blockchain

400
00:14:28,500 --> 00:14:29,940
yeah

401
00:14:29,940 --> 00:14:32,339
now let's say for example Bob wanted to

402
00:14:32,339 --> 00:14:34,920
transfer ownership of this smart

403
00:14:34,920 --> 00:14:37,860
contract to Alice so Bob within his

404
00:14:37,860 --> 00:14:39,300
wallet again he's going to execute

405
00:14:39,300 --> 00:14:41,339
another transaction uh this transaction

406
00:14:41,339 --> 00:14:42,839
though is going to call you know a

407
00:14:42,839 --> 00:14:45,000
transfer ownership function and he's

408
00:14:45,000 --> 00:14:46,320
going to transfer ownership of his

409
00:14:46,320 --> 00:14:47,760
contract and he's going to send it to

410
00:14:47,760 --> 00:14:49,620
Alice Alice another user on the

411
00:14:49,620 --> 00:14:52,139
blockchain and so again his wallet's

412
00:14:52,139 --> 00:14:53,579
going to have to create a unique digital

413
00:14:53,579 --> 00:14:55,980
signature for this transaction that gets

414
00:14:55,980 --> 00:14:59,040
submitted and then now the the new world

415
00:14:59,040 --> 00:15:01,680
state of the blockchain is that instead

416
00:15:01,680 --> 00:15:03,600
of Bob owning the contract now Alice

417
00:15:03,600 --> 00:15:05,940
owns it and that's you know the the

418
00:15:05,940 --> 00:15:07,579
status quo moving forward

419
00:15:07,579 --> 00:15:09,600
so what you're going to see here is

420
00:15:09,600 --> 00:15:11,639
really wallet security is absolutely

421
00:15:11,639 --> 00:15:15,360
critical if you are storing your private

422
00:15:15,360 --> 00:15:17,760
keys in a insecure manner or using them

423
00:15:17,760 --> 00:15:20,160
operationally in insecure manner the

424
00:15:20,160 --> 00:15:21,600
entire security model kind of goes out

425
00:15:21,600 --> 00:15:23,279
the window so it's it's extremely

426
00:15:23,279 --> 00:15:26,399
critical to get that right

427
00:15:26,399 --> 00:15:30,959
so the other uh uh you know uh Factor

428
00:15:30,959 --> 00:15:32,820
around that who's is who is able to

429
00:15:32,820 --> 00:15:35,040
actually use those private keys so you

430
00:15:35,040 --> 00:15:36,660
know thinking about developers you know

431
00:15:36,660 --> 00:15:38,100
you're probably going to be using shared

432
00:15:38,100 --> 00:15:39,420
accounts here

433
00:15:39,420 --> 00:15:40,740
um so it's super important to have

434
00:15:40,740 --> 00:15:42,660
access control and who's able to do what

435
00:15:42,660 --> 00:15:45,240
so you know within your wallet you

436
00:15:45,240 --> 00:15:47,279
should have the ability to say all right

437
00:15:47,279 --> 00:15:49,260
this developer is able to deploy or

438
00:15:49,260 --> 00:15:51,240
update our smart contracts

439
00:15:51,240 --> 00:15:53,639
in different scenarios and in other

440
00:15:53,639 --> 00:15:56,820
scenarios uh you know what do we do do

441
00:15:56,820 --> 00:15:58,800
we block it and say hey that you know

442
00:15:58,800 --> 00:16:00,300
the developer you shouldn't be doing

443
00:16:00,300 --> 00:16:01,920
that that's anomalous that could be a

444
00:16:01,920 --> 00:16:03,420
security risk

445
00:16:03,420 --> 00:16:04,740
um do you have to go through multiple

446
00:16:04,740 --> 00:16:06,600
set of approvals or signatures for that

447
00:16:06,600 --> 00:16:08,459
so this is where the concept of things

448
00:16:08,459 --> 00:16:10,920
like multi-sig come in so instead of

449
00:16:10,920 --> 00:16:13,320
just saying one person Bob goes and

450
00:16:13,320 --> 00:16:16,019
approves this transaction uh Bob now has

451
00:16:16,019 --> 00:16:17,940
to get his transaction also approved and

452
00:16:17,940 --> 00:16:21,240
also signed uh By You Know M of n other

453
00:16:21,240 --> 00:16:23,639
individuals that he works with uh really

454
00:16:23,639 --> 00:16:25,800
to to provide checks and balances and

455
00:16:25,800 --> 00:16:27,480
also eliminate the single point of

456
00:16:27,480 --> 00:16:31,579
compromise of Bob's single private key

457
00:16:32,100 --> 00:16:33,600
um so you know this is going to protect

458
00:16:33,600 --> 00:16:35,940
really for you know anytime developer

459
00:16:35,940 --> 00:16:38,699
credentials are compromised or you know

460
00:16:38,699 --> 00:16:40,500
there's a nefarious Insider one of the

461
00:16:40,500 --> 00:16:42,300
developers tries to push a malicious

462
00:16:42,300 --> 00:16:45,120
upgrade to steal funds uh what if one of

463
00:16:45,120 --> 00:16:46,199
the developers you know worst case

464
00:16:46,199 --> 00:16:48,600
scenario is held at gunpoint

465
00:16:48,600 --> 00:16:50,459
um and really what your wallet

466
00:16:50,459 --> 00:16:51,839
infrastructure should have in your

467
00:16:51,839 --> 00:16:53,579
wallet capabilities here

468
00:16:53,579 --> 00:16:56,519
should have is the ability to have rules

469
00:16:56,519 --> 00:16:59,699
and controls that align to your business

470
00:16:59,699 --> 00:17:02,639
and effectively the known good uh

471
00:17:02,639 --> 00:17:04,919
Baseline of of

472
00:17:04,919 --> 00:17:07,079
um you know what your typical devops

473
00:17:07,079 --> 00:17:10,619
operations look like so your wallet

474
00:17:10,619 --> 00:17:13,559
should enforce that such that if there's

475
00:17:13,559 --> 00:17:15,780
something that's anomalous let's say you

476
00:17:15,780 --> 00:17:18,780
know Alice tries to go and uh you know

477
00:17:18,780 --> 00:17:22,020
provide an update or you know ads uh

478
00:17:22,020 --> 00:17:23,760
call a permission function within that

479
00:17:23,760 --> 00:17:25,679
smart contract

480
00:17:25,679 --> 00:17:27,179
um you should have logic and rules

481
00:17:27,179 --> 00:17:28,799
around that that say okay this is

482
00:17:28,799 --> 00:17:30,000
anomalous

483
00:17:30,000 --> 00:17:31,380
we're either going to go ahead and

484
00:17:31,380 --> 00:17:33,179
outright block that or we're going to

485
00:17:33,179 --> 00:17:35,880
say that maybe in some possible scenario

486
00:17:35,880 --> 00:17:37,440
Alice is doing this we just need

487
00:17:37,440 --> 00:17:39,120
additional eyes on this and manual

488
00:17:39,120 --> 00:17:40,919
review uh and make sure that you go

489
00:17:40,919 --> 00:17:43,200
ahead and do that and so all of this

490
00:17:43,200 --> 00:17:45,720
needs to be managed by your wallet

491
00:17:45,720 --> 00:17:48,419
because this is inherently where the

492
00:17:48,419 --> 00:17:50,400
security guarantees come from it all

493
00:17:50,400 --> 00:17:52,679
comes from the private keys and the

494
00:17:52,679 --> 00:17:55,080
digital signatures that handle the the

495
00:17:55,080 --> 00:17:56,520
authentication authorization on the

496
00:17:56,520 --> 00:17:57,419
blockchain

497
00:17:57,419 --> 00:17:59,039
I don't know

498
00:17:59,039 --> 00:18:01,440
so I'm going to leave you here with a a

499
00:18:01,440 --> 00:18:04,799
sample CI CD pipeline uh you know

500
00:18:04,799 --> 00:18:07,679
end-to-end for smart contract delivery

501
00:18:07,679 --> 00:18:09,299
um you're going to see you know similar

502
00:18:09,299 --> 00:18:12,539
Concepts here to traditional software

503
00:18:12,539 --> 00:18:14,280
um so you know in the code section here

504
00:18:14,280 --> 00:18:16,200
you obviously have your Ides Version

505
00:18:16,200 --> 00:18:18,840
Control on the build stage you have your

506
00:18:18,840 --> 00:18:21,539
compilers uh and your test phase you

507
00:18:21,539 --> 00:18:23,400
know one of the best and most important

508
00:18:23,400 --> 00:18:25,740
the preventions of security

509
00:18:25,740 --> 00:18:27,480
vulnerabilities and software is just

510
00:18:27,480 --> 00:18:30,780
good you know uh hygiene right unit

511
00:18:30,780 --> 00:18:32,520
testing making sure that your

512
00:18:32,520 --> 00:18:34,799
application performs as expected and and

513
00:18:34,799 --> 00:18:36,900
you know as intended

514
00:18:36,900 --> 00:18:38,640
some other you know unique

515
00:18:38,640 --> 00:18:40,559
considerations you know obviously static

516
00:18:40,559 --> 00:18:42,419
and dynamic analysis definitely apply

517
00:18:42,419 --> 00:18:44,640
here as well on the dynamic analysis

518
00:18:44,640 --> 00:18:47,940
front this is you know fuzzing uh formal

519
00:18:47,940 --> 00:18:50,280
verification so companies like sartora

520
00:18:50,280 --> 00:18:53,100
there uh formal verification although it

521
00:18:53,100 --> 00:18:55,140
can be used in traditional software it's

522
00:18:55,140 --> 00:18:57,720
uh because of the economic impact of

523
00:18:57,720 --> 00:18:59,340
security vulnerabilities and smart

524
00:18:59,340 --> 00:19:02,280
contracts formal verification is much

525
00:19:02,280 --> 00:19:04,020
more important much more critical to use

526
00:19:04,020 --> 00:19:06,840
uh when you're talking about you know uh

527
00:19:06,840 --> 00:19:10,919
the economic impact and smart contracts

528
00:19:10,919 --> 00:19:12,360
other tools that you're going to see

529
00:19:12,360 --> 00:19:14,400
here too you know third-party audits so

530
00:19:14,400 --> 00:19:16,380
you know going out getting a pen test or

531
00:19:16,380 --> 00:19:18,299
multiple pen tests and you know publicly

532
00:19:18,299 --> 00:19:20,700
releasing those uh and then also

533
00:19:20,700 --> 00:19:23,580
creating a bug Bounty program right uh

534
00:19:23,580 --> 00:19:25,080
this is very natural to how this

535
00:19:25,080 --> 00:19:26,760
software gets deployed anyways it's

536
00:19:26,760 --> 00:19:28,380
getting deployed in an open public

537
00:19:28,380 --> 00:19:30,480
system anyone can go and look look at it

538
00:19:30,480 --> 00:19:33,240
so you know for sure that the hackers

539
00:19:33,240 --> 00:19:34,860
are going to be looking at as well so

540
00:19:34,860 --> 00:19:36,179
you may as well provide them good

541
00:19:36,179 --> 00:19:38,520
incentives to come and you know report

542
00:19:38,520 --> 00:19:40,200
the vulnerabilities and get a reward

543
00:19:40,200 --> 00:19:43,320
versus going you know the blackout Pro

544
00:19:43,320 --> 00:19:45,720
for the deployment here go ahead super

545
00:19:45,720 --> 00:19:47,880
super sorry to interrupt man in an

546
00:19:47,880 --> 00:19:50,160
effort to try and uh stick closer to

547
00:19:50,160 --> 00:19:53,160
schedule if if there's a way people can

548
00:19:53,160 --> 00:19:54,419
uh get in touch with you to ask

549
00:19:54,419 --> 00:19:56,340
questions further on it's definitely

550
00:19:56,340 --> 00:19:58,620
super interesting I do want to hear more

551
00:19:58,620 --> 00:20:00,059
um but apologize based on the schedule

552
00:20:00,059 --> 00:20:02,039
to kind of cut you off a little bit here

553
00:20:02,039 --> 00:20:05,100
uh yeah no no no no ice

554
00:20:05,100 --> 00:20:06,260
yeah

555
00:20:06,260 --> 00:20:08,640
you can reach me on LinkedIn and on

556
00:20:08,640 --> 00:20:12,299
Twitter at TJ Conley okay cool yeah well

557
00:20:12,299 --> 00:20:14,039
thank you so much for presenting on this

558
00:20:14,039 --> 00:20:16,200
like I said it's an interesting space uh

559
00:20:16,200 --> 00:20:18,240
an interesting uh to see how security

560
00:20:18,240 --> 00:20:20,039
plays a role in it as well because and

561
00:20:20,039 --> 00:20:22,020
what implications it's there and I think

562
00:20:22,020 --> 00:20:22,980
he did a great job of at least

563
00:20:22,980 --> 00:20:25,260
introducing and bringing uh some insight

564
00:20:25,260 --> 00:20:28,080
into that for me so thank you so much DJ

565
00:20:28,080 --> 00:20:32,399
awesome thanks guys TJ

