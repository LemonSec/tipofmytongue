1
00:00:00,179 --> 00:00:03,360
so next up we have a topic on cloud

2
00:00:03,360 --> 00:00:05,100
governance with infrastructure as code

3
00:00:05,100 --> 00:00:07,919
with kyverno and cross plain and the

4
00:00:07,919 --> 00:00:10,200
speaker for that is dolis Dulles is a

5
00:00:10,200 --> 00:00:13,200
customer success engineer at nermata uh

6
00:00:13,200 --> 00:00:15,179
they manage production kubernetes

7
00:00:15,179 --> 00:00:18,180
clusters for namata and also works with

8
00:00:18,180 --> 00:00:19,859
customers for issues with their

9
00:00:19,859 --> 00:00:22,020
kubernetes deployments nullus is a

10
00:00:22,020 --> 00:00:23,420
certified kubernetes administrator

11
00:00:23,420 --> 00:00:25,500
certified kubernetes administrator

12
00:00:25,500 --> 00:00:28,560
developer and AWS solution architect

13
00:00:28,560 --> 00:00:31,080
certified and is currently pursuing a

14
00:00:31,080 --> 00:00:33,000
master's degree in computer science wow

15
00:00:33,000 --> 00:00:34,260
well a bunch of accolades they're

16
00:00:34,260 --> 00:00:36,000
amazing stuff and without further Ado

17
00:00:36,000 --> 00:00:38,880
let's bring on dolits

18
00:00:38,880 --> 00:00:42,620
hi everyone that's me

19
00:00:42,680 --> 00:00:45,360
thank you for having me

20
00:00:45,360 --> 00:00:47,280
really looking forward to your talk do

21
00:00:47,280 --> 00:00:48,960
you do you want to maybe talk the

22
00:00:48,960 --> 00:00:50,219
audience through real quick what you're

23
00:00:50,219 --> 00:00:52,200
going to be sharing and uh what you hope

24
00:00:52,200 --> 00:00:53,820
for them to get out of this

25
00:00:53,820 --> 00:00:56,820
yeah so today we're gonna talk about a

26
00:00:56,820 --> 00:00:58,199
little bit about what is cloud

27
00:00:58,199 --> 00:01:00,660
governance and what is IAC and then I'll

28
00:01:00,660 --> 00:01:02,879
talk about how cross played and keyword

29
00:01:02,879 --> 00:01:06,299
no can help us and is in all of these uh

30
00:01:06,299 --> 00:01:09,420
can provide Cloud governance um with the

31
00:01:09,420 --> 00:01:10,740
help of policies

32
00:01:10,740 --> 00:01:13,560
so yeah and I have a quick demo so maybe

33
00:01:13,560 --> 00:01:15,780
I can quickly show that what exactly I'm

34
00:01:15,780 --> 00:01:17,280
talking about because before a demo

35
00:01:17,280 --> 00:01:20,580
nobody understands what exactly it is

36
00:01:20,580 --> 00:01:23,040
sounds amazing well everyone who's

37
00:01:23,040 --> 00:01:24,780
watching be sure to drop your questions

38
00:01:24,780 --> 00:01:27,360
in the chat so we can relay it over and

39
00:01:27,360 --> 00:01:29,280
with that I think we're gonna let you

40
00:01:29,280 --> 00:01:30,659
take it over so thank you so much for

41
00:01:30,659 --> 00:01:31,979
being here and really looking forward to

42
00:01:31,979 --> 00:01:36,080
your presentation sure thank you

43
00:01:36,659 --> 00:01:40,200
okay so uh let I think I've already been

44
00:01:40,200 --> 00:01:42,600
introduced but I'll quickly just uh talk

45
00:01:42,600 --> 00:01:44,759
what about about me and then we'll talk

46
00:01:44,759 --> 00:01:47,340
about today's topic so my name is Dolly

47
00:01:47,340 --> 00:01:48,659
Sharma and I'm a customer success

48
00:01:48,659 --> 00:01:50,399
engineer in nirmata and today we're

49
00:01:50,399 --> 00:01:52,200
gonna talk about crowd governance with

50
00:01:52,200 --> 00:01:53,880
infrastructure as a code which is also

51
00:01:53,880 --> 00:01:56,700
called as IAC with giverno and cross

52
00:01:56,700 --> 00:01:59,520
play and these are some of the agendas

53
00:01:59,520 --> 00:02:01,140
that I have on the screen that we are

54
00:02:01,140 --> 00:02:03,000
going to cover today so we will start

55
00:02:03,000 --> 00:02:06,180
with what exactly is IAC and then why do

56
00:02:06,180 --> 00:02:07,619
we need IAC with their current

57
00:02:07,619 --> 00:02:09,899
challenges that we see and then how

58
00:02:09,899 --> 00:02:11,819
Cross Pin and kivano can help address

59
00:02:11,819 --> 00:02:13,560
those challenge or even why do we want

60
00:02:13,560 --> 00:02:15,599
to use that in the first place then I'll

61
00:02:15,599 --> 00:02:17,040
quickly give you a demo and then we'll

62
00:02:17,040 --> 00:02:18,540
wrap up the session

63
00:02:18,540 --> 00:02:22,620
so to start with let's talk about what

64
00:02:22,620 --> 00:02:25,739
is IAC so IEC is nothing but

65
00:02:25,739 --> 00:02:27,599
provisioning and managing the

66
00:02:27,599 --> 00:02:29,220
infrastructure through code that means

67
00:02:29,220 --> 00:02:32,160
it's just codifying everything and which

68
00:02:32,160 --> 00:02:34,800
looks good which is great but why do we

69
00:02:34,800 --> 00:02:38,160
need by IAC so with Legacy systems we

70
00:02:38,160 --> 00:02:39,900
have seen that administrators actually

71
00:02:39,900 --> 00:02:42,480
need to manually deploy and manage all

72
00:02:42,480 --> 00:02:44,160
the infrastructure along with the other

73
00:02:44,160 --> 00:02:46,560
dependencies which require some amount

74
00:02:46,560 --> 00:02:48,780
of time which requires resources and

75
00:02:48,780 --> 00:02:51,780
then it requires special skills now IEC

76
00:02:51,780 --> 00:02:54,300
uh this entire concept or approach

77
00:02:54,300 --> 00:02:56,760
reduces all the time and then all the

78
00:02:56,760 --> 00:02:58,260
time that we were doing things manually

79
00:02:58,260 --> 00:03:00,959
it actually automates that so now

80
00:03:00,959 --> 00:03:02,519
engineer don't have to do these things

81
00:03:02,519 --> 00:03:04,140
manually they can only Define the

82
00:03:04,140 --> 00:03:06,720
building blocks of the project where IEC

83
00:03:06,720 --> 00:03:09,480
can actually framework this and then it

84
00:03:09,480 --> 00:03:11,940
can do all the heavy lifting in order to

85
00:03:11,940 --> 00:03:13,739
create and shape the infrastructure the

86
00:03:13,739 --> 00:03:16,140
right way which allows a faster time for

87
00:03:16,140 --> 00:03:17,040
the market

88
00:03:17,040 --> 00:03:19,280
now this really

89
00:03:19,280 --> 00:03:21,840
States and it's very clear that it

90
00:03:21,840 --> 00:03:24,180
increases the speed of deployment but it

91
00:03:24,180 --> 00:03:26,580
also cancels out all the potential error

92
00:03:26,580 --> 00:03:27,959
when you're doing 10 things manually

93
00:03:27,959 --> 00:03:30,599
clicking here and there and then a cost

94
00:03:30,599 --> 00:03:32,940
it also reduces a lot of cost along with

95
00:03:32,940 --> 00:03:36,180
all of these now not only that but it

96
00:03:36,180 --> 00:03:38,159
also improves your consistency of

97
00:03:38,159 --> 00:03:39,959
infrastructure we all know that there

98
00:03:39,959 --> 00:03:42,120
are configuration drift that we see

99
00:03:42,120 --> 00:03:44,519
often due to mismatch between Dev and

100
00:03:44,519 --> 00:03:46,560
production and these can be due to many

101
00:03:46,560 --> 00:03:48,420
reasons this can be due to ad hoc

102
00:03:48,420 --> 00:03:50,580
changes or any updates and later on we

103
00:03:50,580 --> 00:03:52,260
realize that oh there is a rift that

104
00:03:52,260 --> 00:03:54,720
happened in our environment so IAC can

105
00:03:54,720 --> 00:03:56,700
address all of these and then it can

106
00:03:56,700 --> 00:03:58,680
improve these infrastructure consistency

107
00:03:58,680 --> 00:04:03,000
it eliminates all these gaps and once

108
00:04:03,000 --> 00:04:05,159
you have all your infrastructure set up

109
00:04:05,159 --> 00:04:07,379
in a form of code these code is

110
00:04:07,379 --> 00:04:10,080
auditable it's repeatable this approach

111
00:04:10,080 --> 00:04:12,239
will help you to scale down or even

112
00:04:12,239 --> 00:04:14,099
scale up your environment so think of a

113
00:04:14,099 --> 00:04:15,959
situation or a scenario where you want

114
00:04:15,959 --> 00:04:17,579
to scale down your demon bring it up in

115
00:04:17,579 --> 00:04:19,680
an entire different region IEC can help

116
00:04:19,680 --> 00:04:21,298
you do that you have a code and you can

117
00:04:21,298 --> 00:04:23,699
just scale it to n number of

118
00:04:23,699 --> 00:04:25,500
um in N number of region or actually

119
00:04:25,500 --> 00:04:27,840
bring it up in just one click so it

120
00:04:27,840 --> 00:04:29,699
gives you a good workflow transparency

121
00:04:29,699 --> 00:04:31,620
and a structural arrangement of actually

122
00:04:31,620 --> 00:04:34,199
provisioning your code which is pretty

123
00:04:34,199 --> 00:04:36,660
awesome and sounds good but what are the

124
00:04:36,660 --> 00:04:38,880
current challenges that we see today in

125
00:04:38,880 --> 00:04:40,259
IAC

126
00:04:40,259 --> 00:04:43,259
so IAC current challenges are that there

127
00:04:43,259 --> 00:04:45,720
are some security risk we see that are

128
00:04:45,720 --> 00:04:48,479
associated with IAC security risk like

129
00:04:48,479 --> 00:04:50,820
there can be misconfigurations there can

130
00:04:50,820 --> 00:04:52,680
be data exposures there can be access

131
00:04:52,680 --> 00:04:55,380
privilege that you are giving with the

132
00:04:55,380 --> 00:04:57,720
help of your code to the infrastructure

133
00:04:57,720 --> 00:04:59,580
or due to the development and then there

134
00:04:59,580 --> 00:05:01,680
can be compliance violations that which

135
00:05:01,680 --> 00:05:03,419
are not compliant according to your

136
00:05:03,419 --> 00:05:06,600
organization now while security team is

137
00:05:06,600 --> 00:05:09,060
looking to enable all of these check at

138
00:05:09,060 --> 00:05:11,220
different level they don't have the

139
00:05:11,220 --> 00:05:13,139
entire visibility in a developer's code

140
00:05:13,139 --> 00:05:15,780
now this becomes a really big challenge

141
00:05:15,780 --> 00:05:17,699
when you want to achieve this without

142
00:05:17,699 --> 00:05:20,820
Bridging the devops and a secops gap and

143
00:05:20,820 --> 00:05:22,560
this actually creates friction between

144
00:05:22,560 --> 00:05:24,660
the team and then there is coding

145
00:05:24,660 --> 00:05:27,000
dependencies we have so many tools out

146
00:05:27,000 --> 00:05:28,620
there which have different language they

147
00:05:28,620 --> 00:05:30,600
are written on you have to look for

148
00:05:30,600 --> 00:05:32,460
people who know those skills you have to

149
00:05:32,460 --> 00:05:35,039
build up a team and then it creates a

150
00:05:35,039 --> 00:05:36,539
over uh

151
00:05:36,539 --> 00:05:39,300
an extra task of actually managing all

152
00:05:39,300 --> 00:05:41,820
of that and then regardless of how

153
00:05:41,820 --> 00:05:44,400
consistent you want to make your

154
00:05:44,400 --> 00:05:45,900
infrastructure there is always

155
00:05:45,900 --> 00:05:47,639
configuration drift so you have to

156
00:05:47,639 --> 00:05:49,740
manually reconcile it which can cause

157
00:05:49,740 --> 00:05:51,539
different kind of issues like a mobile

158
00:05:51,539 --> 00:05:54,000
deadlock or maybe you have to have a

159
00:05:54,000 --> 00:05:55,199
Time window where you do this

160
00:05:55,199 --> 00:05:56,820
reconciliation memory and things like

161
00:05:56,820 --> 00:05:59,759
that so these are some of the challenges

162
00:05:59,759 --> 00:06:02,639
that we see in IAC today and how cross

163
00:06:02,639 --> 00:06:05,880
plane can help you address this is

164
00:06:05,880 --> 00:06:08,280
so cross plane actually uses kubernetes

165
00:06:08,280 --> 00:06:10,979
API which means that the team can

166
00:06:10,979 --> 00:06:12,900
orchestrate all of their infrastructure

167
00:06:12,900 --> 00:06:15,419
and Cloud using Cube cuddle so if you

168
00:06:15,419 --> 00:06:18,180
are using kubernetes or if um the team

169
00:06:18,180 --> 00:06:20,820
is aware about Cube CTL they can use the

170
00:06:20,820 --> 00:06:24,240
same Cube CTL CLI terminal using which

171
00:06:24,240 --> 00:06:26,759
they can provision their infrastructure

172
00:06:26,759 --> 00:06:28,319
using the same terminal they can

173
00:06:28,319 --> 00:06:29,880
actually provision their infrastructure

174
00:06:29,880 --> 00:06:32,639
and crossband can be implemented as a

175
00:06:32,639 --> 00:06:35,400
kubernetes add-on so now the cluster

176
00:06:35,400 --> 00:06:37,500
which is useful for your workload

177
00:06:37,500 --> 00:06:40,199
deployment can actually help to create

178
00:06:40,199 --> 00:06:42,419
and provision your infrastructure

179
00:06:42,419 --> 00:06:44,880
so also Crossman uses kubernetes

180
00:06:44,880 --> 00:06:46,800
declarative fashion so you don't have to

181
00:06:46,800 --> 00:06:48,539
do the manual reconciliation you just

182
00:06:48,539 --> 00:06:50,280
tell cross paint what you need what is

183
00:06:50,280 --> 00:06:51,960
the desired State and automatically

184
00:06:51,960 --> 00:06:54,180
reconcile that so all the time Windows

185
00:06:54,180 --> 00:06:56,460
all the deadlock challenges is something

186
00:06:56,460 --> 00:06:59,160
that you can cancel out and since all

187
00:06:59,160 --> 00:07:02,160
your configuration files are in a form

188
00:07:02,160 --> 00:07:04,680
of code you can actually Version Control

189
00:07:04,680 --> 00:07:06,539
them and once you watch start version

190
00:07:06,539 --> 00:07:09,120
controlling them you can track them you

191
00:07:09,120 --> 00:07:10,979
can manage them you can restore it back

192
00:07:10,979 --> 00:07:13,020
to any potential change not only that

193
00:07:13,020 --> 00:07:14,400
when you're troubleshooting or you're

194
00:07:14,400 --> 00:07:16,380
finding an issue it becomes really easy

195
00:07:16,380 --> 00:07:17,759
when it's everything is version

196
00:07:17,759 --> 00:07:19,500
controlled and you can actually roll

197
00:07:19,500 --> 00:07:21,000
back to the previous version whenever

198
00:07:21,000 --> 00:07:24,120
required and since cross plane uses

199
00:07:24,120 --> 00:07:25,620
standard yaml format to create

200
00:07:25,620 --> 00:07:27,780
infrastructure you actually do not

201
00:07:27,780 --> 00:07:30,780
require any language to learn and this

202
00:07:30,780 --> 00:07:32,940
can really be helpful if you want to

203
00:07:32,940 --> 00:07:34,680
provide provisioning of infrastructure

204
00:07:34,680 --> 00:07:38,160
as a cell service so for example a

205
00:07:38,160 --> 00:07:40,139
developer who is actually creating an

206
00:07:40,139 --> 00:07:41,699
application using the same yaml

207
00:07:41,699 --> 00:07:44,639
something Sim similar or some a similar

208
00:07:44,639 --> 00:07:46,800
yaml can also be used to create an ec2

209
00:07:46,800 --> 00:07:48,419
instance before he is actually deploying

210
00:07:48,419 --> 00:07:51,180
an application so now this reduces all

211
00:07:51,180 --> 00:07:53,520
the dependencies between team and now it

212
00:07:53,520 --> 00:07:55,440
can be actually used as a self-service

213
00:07:55,440 --> 00:07:56,520
model

214
00:07:56,520 --> 00:07:59,940
which is awesome but there are some of

215
00:07:59,940 --> 00:08:01,800
the security challenges that we talked

216
00:08:01,800 --> 00:08:03,539
about there are challenges like how do

217
00:08:03,539 --> 00:08:04,740
you make sure you have that perfect

218
00:08:04,740 --> 00:08:06,479
check how do you make sure that they are

219
00:08:06,479 --> 00:08:07,280
not

220
00:08:07,280 --> 00:08:09,660
privileges that you are providing while

221
00:08:09,660 --> 00:08:12,000
you're creating an easy to instance or

222
00:08:12,000 --> 00:08:13,680
how do you make sure that that

223
00:08:13,680 --> 00:08:15,599
particular infrastructure or the

224
00:08:15,599 --> 00:08:16,759
particular

225
00:08:16,759 --> 00:08:19,020
virtual machine is in a particular

226
00:08:19,020 --> 00:08:22,259
region has all the check has proper

227
00:08:22,259 --> 00:08:24,000
security groups and all those settings

228
00:08:24,000 --> 00:08:26,099
that you do if you are provisioning the

229
00:08:26,099 --> 00:08:28,379
infrastructure that's where kivano can

230
00:08:28,379 --> 00:08:31,560
help you have those checks enabled a

231
00:08:31,560 --> 00:08:34,080
little bit about keyword no so kivano

232
00:08:34,080 --> 00:08:36,479
means govern in Greek language it's a

233
00:08:36,479 --> 00:08:39,000
cncf incubated project and it is a

234
00:08:39,000 --> 00:08:42,120
kubernetes admission controller it is uh

235
00:08:42,120 --> 00:08:44,820
built for kubernetes so that means all

236
00:08:44,820 --> 00:08:46,560
the policies that you're deploying and

237
00:08:46,560 --> 00:08:49,380
all the uh application deployment which

238
00:08:49,380 --> 00:08:51,120
you're doing for keyword no is all

239
00:08:51,120 --> 00:08:53,880
kubernetes Native so writing a policy is

240
00:08:53,880 --> 00:08:56,339
a saml file it is as easy and as simple

241
00:08:56,339 --> 00:08:58,800
as you write or deploy a deployment file

242
00:08:58,800 --> 00:09:02,040
and using kuberno you can validate

243
00:09:02,040 --> 00:09:04,080
mutate and you can generate kubernetes

244
00:09:04,080 --> 00:09:06,600
resources so how does it work is you can

245
00:09:06,600 --> 00:09:08,459
actually write policies and you can

246
00:09:08,459 --> 00:09:09,839
write policies to validate your

247
00:09:09,839 --> 00:09:11,880
configuration and give or no can give

248
00:09:11,880 --> 00:09:13,680
you that checks according to that or

249
00:09:13,680 --> 00:09:15,180
then you or else you can mutate the

250
00:09:15,180 --> 00:09:17,339
existing kubernetes resources or you can

251
00:09:17,339 --> 00:09:18,779
generate new resources so you can

252
00:09:18,779 --> 00:09:21,180
provide all the triggers that Giver will

253
00:09:21,180 --> 00:09:22,620
check for and it can generate new

254
00:09:22,620 --> 00:09:24,600
resources that will give you a whole lot

255
00:09:24,600 --> 00:09:26,339
scope of doing a lot of automations

256
00:09:26,339 --> 00:09:30,180
around so which is good kivano is it

257
00:09:30,180 --> 00:09:32,279
does a lot of things crossbane helps you

258
00:09:32,279 --> 00:09:33,240
in

259
00:09:33,240 --> 00:09:35,940
um infrastructure as a code model but

260
00:09:35,940 --> 00:09:37,980
why do you use cross Pane and keyword

261
00:09:37,980 --> 00:09:40,080
how to use it and why to use it in the

262
00:09:40,080 --> 00:09:41,640
first place

263
00:09:41,640 --> 00:09:43,740
so Cleveland with cross plane why do you

264
00:09:43,740 --> 00:09:46,100
use it

265
00:09:46,200 --> 00:09:49,019
so it actually addresses the IAC

266
00:09:49,019 --> 00:09:51,180
security risk that we talked about which

267
00:09:51,180 --> 00:09:53,220
involves accessive privilege which

268
00:09:53,220 --> 00:09:55,920
involves compliance violations so what

269
00:09:55,920 --> 00:09:57,839
keyword node does is it enforce the

270
00:09:57,839 --> 00:09:59,760
guard rails by deploying those policies

271
00:09:59,760 --> 00:10:01,620
so now even though you're providing

272
00:10:01,620 --> 00:10:03,839
cross plane as a self-service you have

273
00:10:03,839 --> 00:10:06,660
all the proper check set up you have the

274
00:10:06,660 --> 00:10:08,399
visibility though enabling the

275
00:10:08,399 --> 00:10:10,440
self-service model and then you know

276
00:10:10,440 --> 00:10:12,540
exactly the security posture of your

277
00:10:12,540 --> 00:10:15,899
cluster so what kivano does is it scans

278
00:10:15,899 --> 00:10:17,760
all your deployment and then it provides

279
00:10:17,760 --> 00:10:19,980
a report for you that you can have an

280
00:10:19,980 --> 00:10:21,540
entire visibility of what are the

281
00:10:21,540 --> 00:10:23,220
vulnerabilities what are the violations

282
00:10:23,220 --> 00:10:25,320
that are happening from in accordance

283
00:10:25,320 --> 00:10:28,500
with your uh validating policies or all

284
00:10:28,500 --> 00:10:30,899
the policies that you have created it

285
00:10:30,899 --> 00:10:33,600
not only blocks or audit those it also

286
00:10:33,600 --> 00:10:36,240
provides guidance to the developer so

287
00:10:36,240 --> 00:10:38,880
um if one of the yaml or if one of the

288
00:10:38,880 --> 00:10:40,740
resource has been blocked by keyword no

289
00:10:40,740 --> 00:10:43,200
it actually tells why exactly is block

290
00:10:43,200 --> 00:10:45,360
so that the developer gets a guidance he

291
00:10:45,360 --> 00:10:47,100
can go back he can fix his yaml and then

292
00:10:47,100 --> 00:10:49,140
come back and then deploy it again and

293
00:10:49,140 --> 00:10:51,300
writing a policy equivalent is extremely

294
00:10:51,300 --> 00:10:53,160
easy so if you know kubernetes if you

295
00:10:53,160 --> 00:10:55,200
know Amazon tags you'll be able to write

296
00:10:55,200 --> 00:10:57,300
your own policy from day one

297
00:10:57,300 --> 00:10:59,519
fibono also can mutate things and it can

298
00:10:59,519 --> 00:11:01,380
also generate things so you can have

299
00:11:01,380 --> 00:11:04,079
cool and all those new use cases for

300
00:11:04,079 --> 00:11:06,420
automations in your infrastructure and

301
00:11:06,420 --> 00:11:08,579
also kiwano has a CLI that you can use

302
00:11:08,579 --> 00:11:10,620
in your cicd pipeline so now think of it

303
00:11:10,620 --> 00:11:12,240
that you are using IAC in your pipeline

304
00:11:12,240 --> 00:11:14,279
which is which is provisioning

305
00:11:14,279 --> 00:11:17,040
infrastructure and then kuberno CLI is

306
00:11:17,040 --> 00:11:19,260
using and validating all those

307
00:11:19,260 --> 00:11:20,880
infrastructure before it is even

308
00:11:20,880 --> 00:11:23,760
deploying to the cluster so that's

309
00:11:23,760 --> 00:11:26,160
that's that's how you can use kiverno

310
00:11:26,160 --> 00:11:28,920
with cross plane now enough of the

311
00:11:28,920 --> 00:11:31,260
talking I'll just bring up my screen and

312
00:11:31,260 --> 00:11:33,380
I'll quickly show you how does it look

313
00:11:33,380 --> 00:11:37,680
and what exactly I'm talking about

314
00:11:37,680 --> 00:11:39,839
okay so

315
00:11:39,839 --> 00:11:43,440
um just checking a little bit of mine

316
00:11:43,440 --> 00:11:45,240
so I have a couple of

317
00:11:45,240 --> 00:11:47,880
um yaml files over here I have a OneNote

318
00:11:47,880 --> 00:11:51,660
kind cluster and I have cross plane and

319
00:11:51,660 --> 00:11:54,120
keyword no already deployed in this

320
00:11:54,120 --> 00:11:56,160
cluster now what I'm going to do is I'm

321
00:11:56,160 --> 00:11:57,779
gonna show you what does an instance

322
00:11:57,779 --> 00:12:00,480
yaml file looks like Forex taking a step

323
00:12:00,480 --> 00:12:02,640
back how can you create a simple ec2

324
00:12:02,640 --> 00:12:05,760
instance in Cross plane so this is what

325
00:12:05,760 --> 00:12:07,980
a yaml looks like and this is a simple

326
00:12:07,980 --> 00:12:10,680
install dot instance yaml and if you'll

327
00:12:10,680 --> 00:12:14,399
see this is as a normal yaml and you

328
00:12:14,399 --> 00:12:16,560
have all your settings configured over

329
00:12:16,560 --> 00:12:19,140
here so you have your details of subnet

330
00:12:19,140 --> 00:12:21,420
your image ID you can add a lot of

331
00:12:21,420 --> 00:12:23,279
fields which are supported by Cross Pin

332
00:12:23,279 --> 00:12:27,000
and then creating a ec2 instances as

333
00:12:27,000 --> 00:12:28,680
simple as

334
00:12:28,680 --> 00:12:31,019
applying this yarn so once this is

335
00:12:31,019 --> 00:12:32,760
applied you will see that the instance

336
00:12:32,760 --> 00:12:34,800
will come up and then

337
00:12:34,800 --> 00:12:37,200
you will see that it is created now if

338
00:12:37,200 --> 00:12:39,779
you do Cube CTL get instance you will

339
00:12:39,779 --> 00:12:41,519
see that the instance is coming up and

340
00:12:41,519 --> 00:12:44,519
this is the ID that it gives you now if

341
00:12:44,519 --> 00:12:47,820
I can check the ID in my AWS which I'm

342
00:12:47,820 --> 00:12:50,519
doing on another screen

343
00:12:50,519 --> 00:12:52,320
you will see that this instance will be

344
00:12:52,320 --> 00:12:54,600
coming up and in a in some time it will

345
00:12:54,600 --> 00:12:56,040
be up and running

346
00:12:56,040 --> 00:12:59,160
now in a similar way you can also just

347
00:12:59,160 --> 00:13:01,260
so I can show you this is my instance

348
00:13:01,260 --> 00:13:03,959
and it is already started initializing

349
00:13:03,959 --> 00:13:06,240
so in a similar way you can also create

350
00:13:06,240 --> 00:13:09,660
S3 bucket and the I'm just going to

351
00:13:09,660 --> 00:13:12,500
delete this before

352
00:13:13,260 --> 00:13:15,720
in a simple way in a similar way you can

353
00:13:15,720 --> 00:13:19,500
also create an S3 bucket and the yaml

354
00:13:19,500 --> 00:13:21,240
for this is over here so you'll see here

355
00:13:21,240 --> 00:13:23,519
that this is a bucket uh Yemen looks

356
00:13:23,519 --> 00:13:25,920
like and this is I have I've specified

357
00:13:25,920 --> 00:13:28,019
my region over here as specified if you

358
00:13:28,019 --> 00:13:30,480
want to block Public Access and all the

359
00:13:30,480 --> 00:13:32,100
settings and all the configurations you

360
00:13:32,100 --> 00:13:33,420
do when you do it manually when you

361
00:13:33,420 --> 00:13:35,100
create an S3 bucket this is all possible

362
00:13:35,100 --> 00:13:37,320
by your yaml file so you can edit

363
00:13:37,320 --> 00:13:39,000
everything over here and you can you can

364
00:13:39,000 --> 00:13:40,500
watch and control it you can put it in

365
00:13:40,500 --> 00:13:42,839
GitHub you can share it you can audit

366
00:13:42,839 --> 00:13:44,459
this going back what what were the

367
00:13:44,459 --> 00:13:46,139
settings I configured it initially so

368
00:13:46,139 --> 00:13:47,880
all those things are possible when you

369
00:13:47,880 --> 00:13:50,220
start codifying all of all the things

370
00:13:50,220 --> 00:13:52,700
so this is how creation of

371
00:13:52,700 --> 00:13:55,139
infrastructure is easy now talking about

372
00:13:55,139 --> 00:13:57,480
the other side how do you make sure that

373
00:13:57,480 --> 00:13:59,459
the privilege are on point how do you

374
00:13:59,459 --> 00:14:00,899
make sure that this bucket which I'm

375
00:14:00,899 --> 00:14:03,240
creating is in a particular region or

376
00:14:03,240 --> 00:14:05,040
when we talk about Cloud it's all about

377
00:14:05,040 --> 00:14:07,079
cost and cost management so how do you

378
00:14:07,079 --> 00:14:08,279
make sure that when you're creating an

379
00:14:08,279 --> 00:14:11,100
easy to instance the instance type is

380
00:14:11,100 --> 00:14:12,839
exactly small nobody is just bringing up

381
00:14:12,839 --> 00:14:14,579
a big instance and just creating it and

382
00:14:14,579 --> 00:14:16,079
just you know your cost is spiked

383
00:14:16,079 --> 00:14:17,459
suddenly

384
00:14:17,459 --> 00:14:20,579
um so how you can do is you can create a

385
00:14:20,579 --> 00:14:21,899
keyword no policy and you can have

386
00:14:21,899 --> 00:14:24,600
proper checks at your instance

387
00:14:24,600 --> 00:14:27,360
provisioning and this is one of the

388
00:14:27,360 --> 00:14:30,360
policy I have so I'm just gonna I think

389
00:14:30,360 --> 00:14:32,760
I have it here already so I'm going to

390
00:14:32,760 --> 00:14:34,740
show you this one this is the policy I'm

391
00:14:34,740 --> 00:14:37,800
using so this is a keyword no policy and

392
00:14:37,800 --> 00:14:39,600
these are some of the annotations which

393
00:14:39,600 --> 00:14:41,880
I have the messages and just so that I

394
00:14:41,880 --> 00:14:43,620
know what policy what is this policy

395
00:14:43,620 --> 00:14:46,380
doing and then I have a validate

396
00:14:46,380 --> 00:14:49,440
uh this is a validate policy and I have

397
00:14:49,440 --> 00:14:51,720
it in enforce if I change this enforce

398
00:14:51,720 --> 00:14:53,459
to audit it's not going to block it but

399
00:14:53,459 --> 00:14:54,959
it's going to audit it so it will help

400
00:14:54,959 --> 00:14:57,420
you to know what exactly is happening in

401
00:14:57,420 --> 00:14:59,519
your cluster and this is a rule you can

402
00:14:59,519 --> 00:15:01,380
have a couple of them so these this is

403
00:15:01,380 --> 00:15:03,180
one of the rule that I'm I'm adding over

404
00:15:03,180 --> 00:15:05,279
here this rule is applicable to instance

405
00:15:05,279 --> 00:15:07,680
and it's going to validate with this

406
00:15:07,680 --> 00:15:09,600
pattern so this is my pattern and it's

407
00:15:09,600 --> 00:15:11,940
saying that okay the Pat the yaml should

408
00:15:11,940 --> 00:15:14,399
the instance resource should only have

409
00:15:14,399 --> 00:15:16,320
T3 medium this is the pattern it's going

410
00:15:16,320 --> 00:15:19,440
to validate from and if this is not P3

411
00:15:19,440 --> 00:15:21,480
medium it's going to block that giving a

412
00:15:21,480 --> 00:15:23,399
message to the developer saying that

413
00:15:23,399 --> 00:15:26,399
this is not allowed so that whoever is

414
00:15:26,399 --> 00:15:28,920
creating it knows why it is blocked in

415
00:15:28,920 --> 00:15:31,800
the first place so let's see how it

416
00:15:31,800 --> 00:15:34,620
looks like so I'm gonna just create this

417
00:15:34,620 --> 00:15:36,779
policy first I have pivoto running over

418
00:15:36,779 --> 00:15:38,880
here I have the entire setup but I can

419
00:15:38,880 --> 00:15:40,860
show you how it looks it's a single pod

420
00:15:40,860 --> 00:15:44,279
I'm running and everything is the entire

421
00:15:44,279 --> 00:15:47,160
setup is ready so

422
00:15:47,160 --> 00:15:52,019
I'm going to deploy this policy and

423
00:15:52,019 --> 00:15:54,240
if I see this policy is true it's an

424
00:15:54,240 --> 00:15:55,860
unfortunate perfect

425
00:15:55,860 --> 00:15:57,480
I'm just going to check if my instance

426
00:15:57,480 --> 00:16:01,800
is gone which is and I'm going to apply

427
00:16:01,800 --> 00:16:04,199
the instance yaml again which I did when

428
00:16:04,199 --> 00:16:05,820
I was creating an instance

429
00:16:05,820 --> 00:16:07,800
and the moment I do that it tells me

430
00:16:07,800 --> 00:16:09,839
that it's denying that request it's

431
00:16:09,839 --> 00:16:11,880
blocking this instance you cannot create

432
00:16:11,880 --> 00:16:14,459
this instance and the reason being is

433
00:16:14,459 --> 00:16:16,980
that my instance have a M1 medium which

434
00:16:16,980 --> 00:16:19,320
my policy doesn't like because I've

435
00:16:19,320 --> 00:16:22,380
clearly said that you should only use a

436
00:16:22,380 --> 00:16:25,079
T1 medium or two t t three medium

437
00:16:25,079 --> 00:16:27,540
something like that which is uh not M1

438
00:16:27,540 --> 00:16:29,459
medium of course so your instance type

439
00:16:29,459 --> 00:16:31,740
is wrong and it tells you exactly gives

440
00:16:31,740 --> 00:16:33,920
you a message that

441
00:16:33,920 --> 00:16:36,660
using any other instance type apart from

442
00:16:36,660 --> 00:16:38,699
this is not allowed so I can go back I

443
00:16:38,699 --> 00:16:41,279
can fix my Amazon apply it and there you

444
00:16:41,279 --> 00:16:42,120
go

445
00:16:42,120 --> 00:16:45,899
so yeah this was a short demo or quick

446
00:16:45,899 --> 00:16:49,440
demo of what it looks like now I'm gonna

447
00:16:49,440 --> 00:16:51,420
just go back and

448
00:16:51,420 --> 00:16:53,699
talk through the other set of things I

449
00:16:53,699 --> 00:16:56,240
wanted to cover

450
00:17:09,240 --> 00:17:12,599
okay so we we uh

451
00:17:12,599 --> 00:17:15,780
I think I'm shutting the wrong screen

452
00:17:15,780 --> 00:17:18,240
okay so we covered couple of things and

453
00:17:18,240 --> 00:17:20,819
what are the key takeaways that

454
00:17:20,819 --> 00:17:23,339
um that tells us that uh from the

455
00:17:23,339 --> 00:17:25,260
session what are the summary or the key

456
00:17:25,260 --> 00:17:27,780
takeaways that you want to we want to go

457
00:17:27,780 --> 00:17:31,200
away with first is that we need IAC IEC

458
00:17:31,200 --> 00:17:33,240
is wonderful at school it helps you to

459
00:17:33,240 --> 00:17:35,340
do a lot of wonderful and cool stuff but

460
00:17:35,340 --> 00:17:37,559
it has some of the challenges and it has

461
00:17:37,559 --> 00:17:38,940
some of the things that needs to be

462
00:17:38,940 --> 00:17:41,039
worked on first is that using right

463
00:17:41,039 --> 00:17:42,780
tools like crosswind will really help

464
00:17:42,780 --> 00:17:44,280
you it will help you because it doesn't

465
00:17:44,280 --> 00:17:46,200
have any dependencies of any code

466
00:17:46,200 --> 00:17:47,700
anybody can learn it the learning graph

467
00:17:47,700 --> 00:17:50,280
is really cool you can provide it as a

468
00:17:50,280 --> 00:17:52,080
self-service so that's that's pretty

469
00:17:52,080 --> 00:17:53,940
awesome and then the other side of that

470
00:17:53,940 --> 00:17:56,940
is the security side so using keyword

471
00:17:56,940 --> 00:17:59,580
node we can actually add those proper

472
00:17:59,580 --> 00:18:01,080
checks when you are creating an

473
00:18:01,080 --> 00:18:02,940
infrastructure and you can provide the

474
00:18:02,940 --> 00:18:04,380
infrastructure provisioning as a

475
00:18:04,380 --> 00:18:05,400
self-service

476
00:18:05,400 --> 00:18:08,100
so yeah this was some of the things that

477
00:18:08,100 --> 00:18:10,980
I wanted to cover short and sweet

478
00:18:10,980 --> 00:18:12,360
um if you want to know more about

479
00:18:12,360 --> 00:18:14,039
kuberno you can actually go and Kevin

480
00:18:14,039 --> 00:18:16,559
dot IO we have more than I don't know

481
00:18:16,559 --> 00:18:19,200
like 200 policies now and we have

482
00:18:19,200 --> 00:18:21,840
policies at for every type for every

483
00:18:21,840 --> 00:18:24,299
service of kubernetes uh you will see

484
00:18:24,299 --> 00:18:26,760
there and we have a channel in cncf and

485
00:18:26,760 --> 00:18:28,500
kubernetes so if you have anything and

486
00:18:28,500 --> 00:18:30,179
you're quite active there so if you have

487
00:18:30,179 --> 00:18:32,760
anything if you have any questions just

488
00:18:32,760 --> 00:18:35,100
uh put a message in the channel and we

489
00:18:35,100 --> 00:18:38,178
should be there to help you out

490
00:18:40,080 --> 00:18:42,960
okay so any questions if we have

491
00:18:42,960 --> 00:18:45,140
anything

492
00:18:46,020 --> 00:18:49,080
so first of all amazing talk

493
00:18:49,080 --> 00:18:51,480
um I I think we have a question just

494
00:18:51,480 --> 00:18:53,160
around what are some of the interesting

495
00:18:53,160 --> 00:18:55,320
production kubernetes issues you've seen

496
00:18:55,320 --> 00:18:57,299
at your job because it sounds like

497
00:18:57,299 --> 00:18:58,380
you're working with lots of different

498
00:18:58,380 --> 00:19:00,000
clusters there so what are some of the

499
00:19:00,000 --> 00:19:01,520
cool things you've run into

500
00:19:01,520 --> 00:19:04,500
so a lot of them I think

501
00:19:04,500 --> 00:19:05,760
um

502
00:19:05,760 --> 00:19:08,460
it's it's it depends I have run into a

503
00:19:08,460 --> 00:19:10,140
lot of security issues and we have run

504
00:19:10,140 --> 00:19:12,360
into a lot of networking issues issues

505
00:19:12,360 --> 00:19:15,000
like you know your worker group is not

506
00:19:15,000 --> 00:19:16,980
able to join your cluster because of the

507
00:19:16,980 --> 00:19:21,120
security groups so yeah a lot of issues

508
00:19:21,120 --> 00:19:22,200
that

509
00:19:22,200 --> 00:19:24,179
um you you think that it's it's a

510
00:19:24,179 --> 00:19:26,039
kubernetes problem but if you dig deeper

511
00:19:26,039 --> 00:19:28,020
it's more towards your security issues

512
00:19:28,020 --> 00:19:29,880
or your networking issues or Moto as a

513
00:19:29,880 --> 00:19:32,160
Linux issue so everything is related I

514
00:19:32,160 --> 00:19:33,960
would say uh it's it's just not

515
00:19:33,960 --> 00:19:37,080
kubernetes sometimes

516
00:19:37,080 --> 00:19:39,179
I I'm also really curious by the way if

517
00:19:39,179 --> 00:19:40,620
people are really interested in this and

518
00:19:40,620 --> 00:19:42,059
want to get more into kubernetes and

519
00:19:42,059 --> 00:19:43,320
doing security for all this stuff like

520
00:19:43,320 --> 00:19:44,640
do you have any good resources you

521
00:19:44,640 --> 00:19:46,980
recommend people go like either books or

522
00:19:46,980 --> 00:19:49,260
websites or blogs or people to follow on

523
00:19:49,260 --> 00:19:51,240
Twitter you know anything like that yeah

524
00:19:51,240 --> 00:19:55,260
so um I would say that we could um to

525
00:19:55,260 --> 00:19:57,539
know more about security and to know

526
00:19:57,539 --> 00:20:00,120
more about what kubernetes security is I

527
00:20:00,120 --> 00:20:01,980
usually started with understanding

528
00:20:01,980 --> 00:20:03,900
kubernetes basic security and CIS

529
00:20:03,900 --> 00:20:06,240
Benchmark what exactly it talks about

530
00:20:06,240 --> 00:20:08,340
and what exactly are the standards so

531
00:20:08,340 --> 00:20:09,600
that is something we should we should

532
00:20:09,600 --> 00:20:12,000
always have a look and something to keep

533
00:20:12,000 --> 00:20:13,679
in the back of our pocket the other

534
00:20:13,679 --> 00:20:15,900
things is we should start understanding

535
00:20:15,900 --> 00:20:17,760
and thinking about security at day one

536
00:20:17,760 --> 00:20:21,120
often I've seen that once anybody is in

537
00:20:21,120 --> 00:20:23,700
production they after up after they are

538
00:20:23,700 --> 00:20:25,140
in production line they start thinking

539
00:20:25,140 --> 00:20:27,179
about security which is not good because

540
00:20:27,179 --> 00:20:29,460
you're already live so uh something to

541
00:20:29,460 --> 00:20:31,380
start with at day one and then you can

542
00:20:31,380 --> 00:20:33,900
start thinking about proud to write a

543
00:20:33,900 --> 00:20:36,240
policies from day one how to uh at least

544
00:20:36,240 --> 00:20:38,280
have best practices and and PSP policies

545
00:20:38,280 --> 00:20:40,860
to start with and then later on you can

546
00:20:40,860 --> 00:20:42,240
Harden or you can you know make it more

547
00:20:42,240 --> 00:20:44,520
strict but to start with PSPs and to

548
00:20:44,520 --> 00:20:46,080
start with best practices that day one

549
00:20:46,080 --> 00:20:47,580
is something that I would suggest we can

550
00:20:47,580 --> 00:20:49,740
go in q100.io we can have a look at CS

551
00:20:49,740 --> 00:20:51,360
Benchmark and what are what all

552
00:20:51,360 --> 00:20:53,160
kubernetes actually suggest in their own

553
00:20:53,160 --> 00:20:54,960
documentations

554
00:20:54,960 --> 00:20:57,600
amazing well thank you so much for the

555
00:20:57,600 --> 00:20:59,280
presentation that was incredible I

556
00:20:59,280 --> 00:21:01,200
learned a lot myself so thank you for

557
00:21:01,200 --> 00:21:02,820
dropping some knowledge on on me over

558
00:21:02,820 --> 00:21:03,919
here

559
00:21:03,919 --> 00:21:06,780
same here I I'm not one that knows quite

560
00:21:06,780 --> 00:21:08,460
a bit about kubernetes and all that

561
00:21:08,460 --> 00:21:10,440
space but uh what you presented was

562
00:21:10,440 --> 00:21:12,660
understandable and I am particularly one

563
00:21:12,660 --> 00:21:14,460
to call out and mention that I like the

564
00:21:14,460 --> 00:21:16,620
developer experience was in mind where I

565
00:21:16,620 --> 00:21:18,539
can turn on that audit mode for instance

566
00:21:18,539 --> 00:21:20,580
or just reporting kind of mode and that

567
00:21:20,580 --> 00:21:23,280
way I can learn before I go any further

568
00:21:23,280 --> 00:21:25,080
beyond that so thanks thanks for

569
00:21:25,080 --> 00:21:27,120
pointing that out

570
00:21:27,120 --> 00:21:30,240
awesome and thank you for joining us

571
00:21:30,240 --> 00:21:32,840
having me

