1
00:00:00,840 --> 00:00:02,639
all right without further Ado let's

2
00:00:02,639 --> 00:00:05,279
introduce our next session uh next up

3
00:00:05,279 --> 00:00:07,259
we're gonna be talking about removing

4
00:00:07,259 --> 00:00:10,920
AWS policy review fatigue with automated

5
00:00:10,920 --> 00:00:14,340
terraform resource analysis and to help

6
00:00:14,340 --> 00:00:17,160
us learn more about that is Muhammad and

7
00:00:17,160 --> 00:00:20,100
Muhammad is has been working at Yelp in

8
00:00:20,100 --> 00:00:21,240
the infrastructure Security Department

9
00:00:21,240 --> 00:00:23,699
for a little over a year now uh they are

10
00:00:23,699 --> 00:00:26,160
also an intern that had an internship at

11
00:00:26,160 --> 00:00:27,539
the Department of National Defense

12
00:00:27,539 --> 00:00:30,420
Canada where Muhammad worked on software

13
00:00:30,420 --> 00:00:32,640
related to network security and so

14
00:00:32,640 --> 00:00:34,079
without further Ado let me bring on

15
00:00:34,079 --> 00:00:35,219
Muhammad

16
00:00:35,219 --> 00:00:39,739
hello and welcome hi thank you

17
00:00:41,100 --> 00:00:42,719
did we cover everything that we you

18
00:00:42,719 --> 00:00:44,760
would like to introduce you or do you

19
00:00:44,760 --> 00:00:45,960
want to just jump right into the talk

20
00:00:45,960 --> 00:00:47,820
yeah no that was that was a great

21
00:00:47,820 --> 00:00:49,379
introduction I think that's a good

22
00:00:49,379 --> 00:00:51,899
summary of my professional career and uh

23
00:00:51,899 --> 00:00:53,100
you know if there's any questions happy

24
00:00:53,100 --> 00:00:54,719
to answer them otherwise I'm ready to

25
00:00:54,719 --> 00:00:57,059
jump into the talk awesome sounds are

26
00:00:57,059 --> 00:00:58,800
you going to be sharing

27
00:00:58,800 --> 00:01:00,480
uh sorry to interrupt are you going to

28
00:01:00,480 --> 00:01:02,640
be sharing your screen because it's not

29
00:01:02,640 --> 00:01:05,640
currently there yes just one second

30
00:01:05,640 --> 00:01:07,799
getting still used to screenplay a

31
00:01:07,799 --> 00:01:10,560
little bit there yeah all right

32
00:01:10,560 --> 00:01:12,540
Perfect all right we'll take it away and

33
00:01:12,540 --> 00:01:14,280
thank you for joining us excellent cool

34
00:01:14,280 --> 00:01:16,560
thank you well hi everyone thank you so

35
00:01:16,560 --> 00:01:18,900
much for joining me today my name is

36
00:01:18,900 --> 00:01:21,360
Muhammad I'm a software engineer in the

37
00:01:21,360 --> 00:01:22,860
infrastructure security department at

38
00:01:22,860 --> 00:01:24,659
Yelp and today I'm going to be talking

39
00:01:24,659 --> 00:01:27,180
about removing AWS policy review fatigue

40
00:01:27,180 --> 00:01:28,680
with automated terraform resource

41
00:01:28,680 --> 00:01:32,840
analysis without further Ado let's begin

42
00:01:33,299 --> 00:01:35,520
it's a little bit more about who I am

43
00:01:35,520 --> 00:01:37,680
again I'm on York's infrasect team where

44
00:01:37,680 --> 00:01:40,320
we maintain design and Implement systems

45
00:01:40,320 --> 00:01:42,060
which ensure the security of the Alps

46
00:01:42,060 --> 00:01:44,759
info my job consists of AWS Cloud

47
00:01:44,759 --> 00:01:46,860
security work reviewing system proposals

48
00:01:46,860 --> 00:01:49,860
PRS from other teams and a lot more

49
00:01:49,860 --> 00:01:51,540
some of my hobbies are kickboxing

50
00:01:51,540 --> 00:01:53,700
content creation and reading you know I

51
00:01:53,700 --> 00:01:55,439
love working at Yelp because I get the

52
00:01:55,439 --> 00:01:56,880
time to pursue these interests outside

53
00:01:56,880 --> 00:02:00,299
of work which is very important to me

54
00:02:00,299 --> 00:02:02,880
and in this talk I'd like to First lay a

55
00:02:02,880 --> 00:02:05,219
foundation of the life of an intersect

56
00:02:05,219 --> 00:02:07,560
on call and talk about a few pain points

57
00:02:07,560 --> 00:02:08,520
here

58
00:02:08,520 --> 00:02:10,440
so the on-call is a week-long

59
00:02:10,440 --> 00:02:12,420
responsibility where we respond to a lot

60
00:02:12,420 --> 00:02:14,280
of different issues the one I'd like to

61
00:02:14,280 --> 00:02:17,720
focus on is code reviews

62
00:02:18,180 --> 00:02:20,040
so the on-call for infrasek is a

63
00:02:20,040 --> 00:02:21,540
required reviewer on many

64
00:02:21,540 --> 00:02:23,520
infrastructures code changes some of

65
00:02:23,520 --> 00:02:27,420
these include IM groups users roles S3

66
00:02:27,420 --> 00:02:29,099
buckets and more

67
00:02:29,099 --> 00:02:30,300
since we're the owner of these

68
00:02:30,300 --> 00:02:31,560
namespaces

69
00:02:31,560 --> 00:02:33,060
whenever other teams want to create

70
00:02:33,060 --> 00:02:35,180
changes to resources or create new

71
00:02:35,180 --> 00:02:37,980
resources in these name spaces they

72
00:02:37,980 --> 00:02:40,080
require us to review the PRS before they

73
00:02:40,080 --> 00:02:43,080
can merge their code until we review and

74
00:02:43,080 --> 00:02:45,180
approve the PRS they cannot merge their

75
00:02:45,180 --> 00:02:47,220
code so where the bottleneck in this

76
00:02:47,220 --> 00:02:49,700
workflow

77
00:02:49,980 --> 00:02:51,959
so here's a very very high level

78
00:02:51,959 --> 00:02:53,700
overview of what the previous workflow

79
00:02:53,700 --> 00:02:56,360
looked like for us so a user makes a PR

80
00:02:56,360 --> 00:02:59,220
and notably even in the case of no

81
00:02:59,220 --> 00:03:01,980
errors no errors no security issues they

82
00:03:01,980 --> 00:03:03,660
still have to wait for a security review

83
00:03:03,660 --> 00:03:06,920
which can take a long time

84
00:03:06,959 --> 00:03:08,940
the next pain point is the time

85
00:03:08,940 --> 00:03:11,879
investment from the on-calls perspective

86
00:03:11,879 --> 00:03:13,620
the on-call receives a lot of review

87
00:03:13,620 --> 00:03:15,900
requests mostly for benign changes which

88
00:03:15,900 --> 00:03:17,879
is a huge timestamp

89
00:03:17,879 --> 00:03:19,739
the complexity of policies leads to

90
00:03:19,739 --> 00:03:21,480
training new hires taking a long time

91
00:03:21,480 --> 00:03:23,879
but rocking complex policies takes a

92
00:03:23,879 --> 00:03:25,440
long time for the season reviewer as

93
00:03:25,440 --> 00:03:28,140
well so in the latter case while the

94
00:03:28,140 --> 00:03:29,459
season reviewer will be familiar with

95
00:03:29,459 --> 00:03:32,040
AWS policy semantics just the process of

96
00:03:32,040 --> 00:03:34,560
reviewing a long policy will take a long

97
00:03:34,560 --> 00:03:36,420
time

98
00:03:36,420 --> 00:03:38,459
all that can be summarized by saying IM

99
00:03:38,459 --> 00:03:42,900
policies can get very complex very fast

100
00:03:42,900 --> 00:03:44,400
and the next pain point I'd like to

101
00:03:44,400 --> 00:03:46,379
address is the frequency of these review

102
00:03:46,379 --> 00:03:47,519
requests

103
00:03:47,519 --> 00:03:49,379
this might look familiar to you if you

104
00:03:49,379 --> 00:03:51,780
had a setup similar to us where your

105
00:03:51,780 --> 00:03:53,519
team or yourself were a required

106
00:03:53,519 --> 00:03:55,920
reviewer before code could be merged

107
00:03:55,920 --> 00:03:57,900
basically the on-call becomes a

108
00:03:57,900 --> 00:04:00,239
full-time terraform engineer for the

109
00:04:00,239 --> 00:04:01,620
week of their shift

110
00:04:01,620 --> 00:04:04,319
to summarize reviewing policy changes is

111
00:04:04,319 --> 00:04:06,360
a Time sink and it is a fatiguing

112
00:04:06,360 --> 00:04:08,459
process due to the frequency

113
00:04:08,459 --> 00:04:10,680
furthermore human error and allowance

114
00:04:10,680 --> 00:04:12,840
configurations to slip through so this

115
00:04:12,840 --> 00:04:14,340
could be for example the new hire we

116
00:04:14,340 --> 00:04:16,260
talked about before they may not fully

117
00:04:16,260 --> 00:04:18,660
understand AWS policy semantics yet and

118
00:04:18,660 --> 00:04:20,579
approve a PRN error which had a security

119
00:04:20,579 --> 00:04:23,280
issue or it could be the seasoned

120
00:04:23,280 --> 00:04:25,080
reviewer who's so fatigued by their 10th

121
00:04:25,080 --> 00:04:26,940
review that they missed a security issue

122
00:04:26,940 --> 00:04:30,419
that they otherwise would not have

123
00:04:30,419 --> 00:04:31,800
so we've observed some of the pain

124
00:04:31,800 --> 00:04:33,660
points let's touch on the good and bad

125
00:04:33,660 --> 00:04:35,940
of the status quo

126
00:04:35,940 --> 00:04:37,680
so again this is where we were a few

127
00:04:37,680 --> 00:04:40,740
months ago we had a secure easy to

128
00:04:40,740 --> 00:04:42,060
understand and easy to implement

129
00:04:42,060 --> 00:04:43,199
workflow

130
00:04:43,199 --> 00:04:45,479
however this led to the on-call becoming

131
00:04:45,479 --> 00:04:47,220
a full-time PR reviewer for the week of

132
00:04:47,220 --> 00:04:48,720
their shift and due to the review

133
00:04:48,720 --> 00:04:50,880
fatigue and interruptions the on-calls

134
00:04:50,880 --> 00:04:52,139
engineering productivity was

135
00:04:52,139 --> 00:04:54,419
significantly lower it's hard to focus

136
00:04:54,419 --> 00:04:55,919
on engineering work when you have slack

137
00:04:55,919 --> 00:04:57,720
things for review requests every couple

138
00:04:57,720 --> 00:04:58,860
of minutes

139
00:04:58,860 --> 00:05:00,419
and this fatigue again may lead to

140
00:05:00,419 --> 00:05:02,580
approving a PR and error so the next

141
00:05:02,580 --> 00:05:05,400
question comes can we do better can we

142
00:05:05,400 --> 00:05:07,380
go from this slow and secure process to

143
00:05:07,380 --> 00:05:09,120
fast and secure

144
00:05:09,120 --> 00:05:11,460
and yes we can that's where automation

145
00:05:11,460 --> 00:05:13,380
or automated static resource analysis

146
00:05:13,380 --> 00:05:15,840
comes into play

147
00:05:15,840 --> 00:05:17,400
the first step in this is picking a

148
00:05:17,400 --> 00:05:19,080
static analysis tool and there are a lot

149
00:05:19,080 --> 00:05:20,580
of options in the open source community

150
00:05:20,580 --> 00:05:22,919
in the next few slides I'll touch on our

151
00:05:22,919 --> 00:05:24,780
requirements specifically and which tool

152
00:05:24,780 --> 00:05:26,460
we select

153
00:05:26,460 --> 00:05:28,620
so here's some of our requirements the

154
00:05:28,620 --> 00:05:30,479
tool needs to be easy to integrate at an

155
00:05:30,479 --> 00:05:31,680
early stage of the infrastructure as

156
00:05:31,680 --> 00:05:33,660
code Pipeline and a tool needs to

157
00:05:33,660 --> 00:05:35,160
provide an excellent user experience

158
00:05:35,160 --> 00:05:37,440
clearly reporting the errors back to the

159
00:05:37,440 --> 00:05:39,900
user in an easy to understand way

160
00:05:39,900 --> 00:05:42,120
given this and a few more requirements

161
00:05:42,120 --> 00:05:44,280
we went with regular

162
00:05:44,280 --> 00:05:46,199
now why is regular a good fit for Yelp

163
00:05:46,199 --> 00:05:47,940
well it offers plan file scanning

164
00:05:47,940 --> 00:05:50,039
capabilities it has built-in community

165
00:05:50,039 --> 00:05:52,020
community checks that cover a lot of

166
00:05:52,020 --> 00:05:54,060
problematic security issues which is a

167
00:05:54,060 --> 00:05:55,560
huge Time Saver for us since we don't

168
00:05:55,560 --> 00:05:58,020
have to write these checks ourselves

169
00:05:58,020 --> 00:06:00,360
rules are easy to write and test good

170
00:06:00,360 --> 00:06:02,460
test coverage is very important to us

171
00:06:02,460 --> 00:06:04,139
and there's the ability to suppress

172
00:06:04,139 --> 00:06:06,240
resource at a very very granular level

173
00:06:06,240 --> 00:06:08,940
level because of the way our terraform

174
00:06:08,940 --> 00:06:11,520
modules are set up this was a feature

175
00:06:11,520 --> 00:06:13,380
that we definitely needed and it was a

176
00:06:13,380 --> 00:06:15,780
hard requirement

177
00:06:15,780 --> 00:06:17,460
now let's talk about what the goal here

178
00:06:17,460 --> 00:06:18,419
is right

179
00:06:18,419 --> 00:06:20,820
the goal with integrating regular is to

180
00:06:20,820 --> 00:06:24,419
emulate a human review programmatically

181
00:06:24,419 --> 00:06:26,039
and let's touch on the state of iron for

182
00:06:26,039 --> 00:06:28,080
a little bit prior to integration

183
00:06:28,080 --> 00:06:30,360
in our info we use Atlantis which is a

184
00:06:30,360 --> 00:06:32,880
terraform PR automation tool this runs

185
00:06:32,880 --> 00:06:34,860
on an ec2 instance inside of a Docker

186
00:06:34,860 --> 00:06:36,360
container and it listens for GitHub

187
00:06:36,360 --> 00:06:37,440
events

188
00:06:37,440 --> 00:06:39,600
on certain GitHub events such as you

189
00:06:39,600 --> 00:06:41,759
know an explicit get up comment or a new

190
00:06:41,759 --> 00:06:44,520
commit Atlantis will plan and on certain

191
00:06:44,520 --> 00:06:46,740
GitHub events such as an explicit GitHub

192
00:06:46,740 --> 00:06:49,259
comment as well Atlantis will apply a

193
00:06:49,259 --> 00:06:51,000
plan is basically like a dry run so like

194
00:06:51,000 --> 00:06:52,860
a terraform plan where it shows you what

195
00:06:52,860 --> 00:06:55,500
changes will take place and apply will

196
00:06:55,500 --> 00:06:57,600
actually apply those changes

197
00:06:57,600 --> 00:07:00,419
Atlantis also offers custom workflows in

198
00:07:00,419 --> 00:07:01,860
which we can specify certain other

199
00:07:01,860 --> 00:07:03,660
actions to be taken during the plan or

200
00:07:03,660 --> 00:07:06,300
apply stage so for example we can say do

201
00:07:06,300 --> 00:07:08,759
the terraform plan but also run a python

202
00:07:08,759 --> 00:07:10,440
script at the same time

203
00:07:10,440 --> 00:07:12,600
in the next few slides I'll elaborate on

204
00:07:12,600 --> 00:07:14,100
the goal a little and then we'll touch

205
00:07:14,100 --> 00:07:16,319
on status checks displaying the output

206
00:07:16,319 --> 00:07:18,840
to the user handling false positives and

207
00:07:18,840 --> 00:07:20,759
preventing merging of critical security

208
00:07:20,759 --> 00:07:23,000
vulnerabilities

209
00:07:23,000 --> 00:07:26,160
so again to hone in on the goal the

210
00:07:26,160 --> 00:07:28,199
output for regular looks like this and

211
00:07:28,199 --> 00:07:30,120
our goal is to take this output display

212
00:07:30,120 --> 00:07:32,099
it to the user right in a way that's

213
00:07:32,099 --> 00:07:34,199
easy to understand if we can do that

214
00:07:34,199 --> 00:07:36,180
we've effectively programmatically

215
00:07:36,180 --> 00:07:39,300
emulated a human review

216
00:07:39,300 --> 00:07:40,860
this is an example of what a human

217
00:07:40,860 --> 00:07:42,479
reviewer would do so let's break it down

218
00:07:42,479 --> 00:07:43,800
even further

219
00:07:43,800 --> 00:07:45,300
what we're trying to do is we want to

220
00:07:45,300 --> 00:07:46,560
specify whether the pr should be

221
00:07:46,560 --> 00:07:49,139
approved or not point out clearly what

222
00:07:49,139 --> 00:07:51,000
can be approved in the pr

223
00:07:51,000 --> 00:07:52,800
consider the rare cases where broad

224
00:07:52,800 --> 00:07:54,660
actions may be needed like when a user

225
00:07:54,660 --> 00:07:56,759
wants to create an administrator policy

226
00:07:56,759 --> 00:07:59,099
and request changes on PR with critical

227
00:07:59,099 --> 00:08:01,500
security vulnerabilities this is what

228
00:08:01,500 --> 00:08:04,259
we've been able to do programmatically

229
00:08:04,259 --> 00:08:06,419
so the first step we're going to talk

230
00:08:06,419 --> 00:08:08,520
about is the status checks this is the

231
00:08:08,520 --> 00:08:10,440
human equivalent of approving or

232
00:08:10,440 --> 00:08:13,759
requesting changes on a PR

233
00:08:14,099 --> 00:08:16,500
so in the custom workflow we use a

234
00:08:16,500 --> 00:08:18,360
python script to run regular on the

235
00:08:18,360 --> 00:08:19,919
terraform plan file

236
00:08:19,919 --> 00:08:22,379
regular will then return a Json output

237
00:08:22,379 --> 00:08:24,300
which contains a bunch of information

238
00:08:24,300 --> 00:08:26,520
but notably it contains a number of

239
00:08:26,520 --> 00:08:28,440
successful checks and the number of

240
00:08:28,440 --> 00:08:29,699
failed checks

241
00:08:29,699 --> 00:08:32,399
we can then use this to infer whether

242
00:08:32,399 --> 00:08:34,500
the scan resulted in a plan in a success

243
00:08:34,500 --> 00:08:36,839
or a failure so if you know there was

244
00:08:36,839 --> 00:08:39,000
more than zero failures then you know

245
00:08:39,000 --> 00:08:40,440
we're going to report back a failing

246
00:08:40,440 --> 00:08:43,039
status check

247
00:08:43,140 --> 00:08:44,880
and posting a status check is very easy

248
00:08:44,880 --> 00:08:47,399
using pi GitHub now Pi GitHub does

249
00:08:47,399 --> 00:08:49,260
require a few arguments and we're able

250
00:08:49,260 --> 00:08:51,600
to get these arguments from the from

251
00:08:51,600 --> 00:08:54,000
Atlantis because Atlantis has a bunch of

252
00:08:54,000 --> 00:08:55,560
environment variables right out of the

253
00:08:55,560 --> 00:08:57,480
box that we can use some of the

254
00:08:57,480 --> 00:08:58,860
environment variables that we make use

255
00:08:58,860 --> 00:09:01,440
of are the SSA and the pull request

256
00:09:01,440 --> 00:09:03,240
number

257
00:09:03,240 --> 00:09:04,740
now here's an example of what the status

258
00:09:04,740 --> 00:09:06,660
checks look like so you know the first

259
00:09:06,660 --> 00:09:08,220
one is of course a passing status check

260
00:09:08,220 --> 00:09:10,140
and the second one shows a failing

261
00:09:10,140 --> 00:09:12,660
status check and this will make it very

262
00:09:12,660 --> 00:09:14,279
clear for the developer whether the pr

263
00:09:14,279 --> 00:09:16,200
is looking good or whether it requires

264
00:09:16,200 --> 00:09:18,420
some changes

265
00:09:18,420 --> 00:09:20,220
the next one I'd like to touch on is

266
00:09:20,220 --> 00:09:22,440
formatting output this is the human

267
00:09:22,440 --> 00:09:24,060
equivalent of hosting an easy to

268
00:09:24,060 --> 00:09:26,399
understand comment on the pr for the

269
00:09:26,399 --> 00:09:28,140
developer

270
00:09:28,140 --> 00:09:30,000
the main information we need for this is

271
00:09:30,000 --> 00:09:32,220
a failing rule ID a description of the

272
00:09:32,220 --> 00:09:34,260
rule the resource that is failing for

273
00:09:34,260 --> 00:09:36,839
the severity of the failure and the

274
00:09:36,839 --> 00:09:38,940
remediation duct we want to take all

275
00:09:38,940 --> 00:09:40,440
this information and then format it into

276
00:09:40,440 --> 00:09:42,480
a nice comment and we can again post it

277
00:09:42,480 --> 00:09:44,820
with pi GitHub we can get all this

278
00:09:44,820 --> 00:09:47,100
information very easily from the regular

279
00:09:47,100 --> 00:09:50,160
Json output

280
00:09:50,160 --> 00:09:51,899
and here's an example of what the

281
00:09:51,899 --> 00:09:53,940
comments look like in our workflow so

282
00:09:53,940 --> 00:09:56,160
this clearly points out the failing rule

283
00:09:56,160 --> 00:09:58,800
which resource it's failing for and it

284
00:09:58,800 --> 00:10:00,600
points to documentation which the user

285
00:10:00,600 --> 00:10:02,339
can reference to figure out how to fix

286
00:10:02,339 --> 00:10:04,800
the issue

287
00:10:04,800 --> 00:10:07,080
next I'd like to touch on custom rules

288
00:10:07,080 --> 00:10:09,180
this is the human equivalent of applying

289
00:10:09,180 --> 00:10:12,660
yelpie knowledge to the review

290
00:10:12,660 --> 00:10:14,880
so custom rules are rules we create for

291
00:10:14,880 --> 00:10:16,920
Yelp use cases now I mentioned before

292
00:10:16,920 --> 00:10:19,380
regular comes with some rules out of the

293
00:10:19,380 --> 00:10:22,680
box those are great and very useful and

294
00:10:22,680 --> 00:10:24,540
they are generic in the sense that

295
00:10:24,540 --> 00:10:26,100
they'll point out common security

296
00:10:26,100 --> 00:10:27,720
vulnerabilities so for example you know

297
00:10:27,720 --> 00:10:31,019
S3 buckets shouldn't be public or Star

298
00:10:31,019 --> 00:10:33,180
on Star actions should not be allowed

299
00:10:33,180 --> 00:10:35,880
but we need to be able to go further

300
00:10:35,880 --> 00:10:37,860
than that because for example we have

301
00:10:37,860 --> 00:10:40,260
custom policies in our AWS environment

302
00:10:40,260 --> 00:10:42,060
which are over privileged which we don't

303
00:10:42,060 --> 00:10:44,339
want to use in most scenarios so if a

304
00:10:44,339 --> 00:10:46,320
developer attaches that we want to point

305
00:10:46,320 --> 00:10:48,240
that out and say hey this policy should

306
00:10:48,240 --> 00:10:49,980
not be attached and that's what we're

307
00:10:49,980 --> 00:10:52,200
able to do with custom rules

308
00:10:52,200 --> 00:10:54,000
we host these rules in an internal

309
00:10:54,000 --> 00:10:56,160
repository when we clone the internal

310
00:10:56,160 --> 00:10:58,620
repository inside of the Atlantis Docker

311
00:10:58,620 --> 00:10:59,640
container

312
00:10:59,640 --> 00:11:01,800
now that's well and good but how can we

313
00:11:01,800 --> 00:11:03,420
reference these rules when we run

314
00:11:03,420 --> 00:11:05,459
regularly

315
00:11:05,459 --> 00:11:07,320
well we use the Atlantis pre-workflow

316
00:11:07,320 --> 00:11:09,300
hooks to clone the repository in the

317
00:11:09,300 --> 00:11:11,519
container from there we can use regular

318
00:11:11,519 --> 00:11:14,399
config files a config file basically

319
00:11:14,399 --> 00:11:17,399
allows us to specify all of our CLI

320
00:11:17,399 --> 00:11:19,079
Flags in one file so we don't have to

321
00:11:19,079 --> 00:11:21,600
have one long command and we always

322
00:11:21,600 --> 00:11:23,640
clone the repository in the exact same

323
00:11:23,640 --> 00:11:26,820
path inside the docker container now we

324
00:11:26,820 --> 00:11:28,620
can put that path inside of the config

325
00:11:28,620 --> 00:11:31,800
file reference the config file in our

326
00:11:31,800 --> 00:11:34,860
python code and now our custom rules are

327
00:11:34,860 --> 00:11:36,839
referenced

328
00:11:36,839 --> 00:11:39,720
next let's touch on waivers waivers are

329
00:11:39,720 --> 00:11:40,920
the human equivalent of taking

330
00:11:40,920 --> 00:11:44,160
calculated security risks

331
00:11:44,160 --> 00:11:46,560
so sometimes failing infrastructure as

332
00:11:46,560 --> 00:11:49,500
code changes are valid and required an

333
00:11:49,500 --> 00:11:50,940
example of this that's When an Admin

334
00:11:50,940 --> 00:11:53,279
policy is created or again a public S3

335
00:11:53,279 --> 00:11:55,440
bucket policy is created

336
00:11:55,440 --> 00:11:56,760
waivers are going to allow for the

337
00:11:56,760 --> 00:11:59,339
suppression of a rule for a resource and

338
00:11:59,339 --> 00:12:02,040
regular handers waivers with a Rego file

339
00:12:02,040 --> 00:12:04,620
now a slight issue here is a lot of

340
00:12:04,620 --> 00:12:06,959
developers are not familiar with Rego so

341
00:12:06,959 --> 00:12:09,120
we wanted to make this process easy and

342
00:12:09,120 --> 00:12:11,040
intuitive for developers of adding new

343
00:12:11,040 --> 00:12:13,680
waivers we did this by creating a yaml

344
00:12:13,680 --> 00:12:15,899
abstraction so developers only deal with

345
00:12:15,899 --> 00:12:18,720
a yaml file and then we have a hook that

346
00:12:18,720 --> 00:12:20,700
runs that converts that yaml file into

347
00:12:20,700 --> 00:12:23,459
Revit foreign

348
00:12:23,459 --> 00:12:25,980
so here's an example of this this is the

349
00:12:25,980 --> 00:12:27,480
yaml file that the developer would deal

350
00:12:27,480 --> 00:12:29,399
with so for example if a developer wants

351
00:12:29,399 --> 00:12:32,220
to suppress this rule ID FG underscore R

352
00:12:32,220 --> 00:12:34,680
triple zero two seven for their resource

353
00:12:34,680 --> 00:12:36,540
they would simply add their resource

354
00:12:36,540 --> 00:12:37,920
onto the list

355
00:12:37,920 --> 00:12:40,200
and then the hook will run and it will

356
00:12:40,200 --> 00:12:42,060
convert it to a Rego file which will

357
00:12:42,060 --> 00:12:45,260
look something like this

358
00:12:45,660 --> 00:12:47,579
now there's another benefit of waivers

359
00:12:47,579 --> 00:12:49,440
that I'd like to point out we now have

360
00:12:49,440 --> 00:12:51,540
documentation of each calculated

361
00:12:51,540 --> 00:12:53,639
security risk that we've taken

362
00:12:53,639 --> 00:12:56,579
initially we created 311 waivers in our

363
00:12:56,579 --> 00:12:58,500
infrastructure and we're very excited to

364
00:12:58,500 --> 00:13:01,139
get to work on fixing these all jokes

365
00:13:01,139 --> 00:13:03,000
aside it's much better to have this

366
00:13:03,000 --> 00:13:04,800
documentation than not

367
00:13:04,800 --> 00:13:07,560
again now we know all the security risks

368
00:13:07,560 --> 00:13:09,120
that we've taken and we can reference

369
00:13:09,120 --> 00:13:11,820
these say in some sort of periodic time

370
00:13:11,820 --> 00:13:13,620
period like three months or six months

371
00:13:13,620 --> 00:13:16,380
go back to the waivers and look at that

372
00:13:16,380 --> 00:13:19,380
risk and see if we still need it if not

373
00:13:19,380 --> 00:13:20,760
we're going to stop taking that security

374
00:13:20,760 --> 00:13:23,100
risk this is something we didn't used to

375
00:13:23,100 --> 00:13:24,839
do before if we took some temporary

376
00:13:24,839 --> 00:13:27,180
security risk it wasn't documented so it

377
00:13:27,180 --> 00:13:28,680
was on the developer or the security

378
00:13:28,680 --> 00:13:31,019
engineer to follow up on that and

379
00:13:31,019 --> 00:13:33,060
sometimes they would forget which meant

380
00:13:33,060 --> 00:13:34,680
that we had this security risk in our

381
00:13:34,680 --> 00:13:37,380
infrastructure for a long long time this

382
00:13:37,380 --> 00:13:40,079
is no longer the case

383
00:13:40,079 --> 00:13:42,060
the next part I'd like to touch on is

384
00:13:42,060 --> 00:13:43,019
preventing critical security

385
00:13:43,019 --> 00:13:44,760
vulnerabilities this is the human

386
00:13:44,760 --> 00:13:46,680
equivalent of doing a double take on a

387
00:13:46,680 --> 00:13:50,220
PR to likely request changes or get more

388
00:13:50,220 --> 00:13:52,019
context on it before we issue an

389
00:13:52,019 --> 00:13:54,380
approval

390
00:13:55,139 --> 00:13:57,420
so we block PRS with critical issues

391
00:13:57,420 --> 00:13:58,980
from being merged without security

392
00:13:58,980 --> 00:14:01,680
approval there's a very small subset of

393
00:14:01,680 --> 00:14:04,380
rules which we Mark as critical severity

394
00:14:04,380 --> 00:14:05,639
rules

395
00:14:05,639 --> 00:14:08,339
PRS with these issues cannot be merged

396
00:14:08,339 --> 00:14:10,260
and we brought developers from Shipping

397
00:14:10,260 --> 00:14:12,959
these by returning a non-zero exit code

398
00:14:12,959 --> 00:14:15,420
from the python script that non-zero

399
00:14:15,420 --> 00:14:17,339
exit code will lead to an unsuccessful

400
00:14:17,339 --> 00:14:20,100
Atlantis plan and Atlantis plan is a

401
00:14:20,100 --> 00:14:22,380
prerequisite for an Atlanta Supply since

402
00:14:22,380 --> 00:14:23,760
the developer will not be able to plan

403
00:14:23,760 --> 00:14:26,459
they will not be able to apply once they

404
00:14:26,459 --> 00:14:28,139
get security approval we can create a

405
00:14:28,139 --> 00:14:30,600
waiver for it and then the plan will go

406
00:14:30,600 --> 00:14:32,220
through successfully and they will be

407
00:14:32,220 --> 00:14:33,959
able to apply

408
00:14:33,959 --> 00:14:36,360
here's an example of this if a developer

409
00:14:36,360 --> 00:14:39,360
wants to create a star on Star policy

410
00:14:39,360 --> 00:14:41,519
the Atlantis plan step will fail notably

411
00:14:41,519 --> 00:14:44,399
that's the third stash or rather the

412
00:14:44,399 --> 00:14:46,740
second status check over here

413
00:14:46,740 --> 00:14:48,720
and in other words you shall now pass

414
00:14:48,720 --> 00:14:51,920
without Security review

415
00:14:52,019 --> 00:14:53,459
so let's talk about the life of the

416
00:14:53,459 --> 00:14:57,018
on-call post this integration

417
00:14:57,300 --> 00:14:59,579
now developers can get a security review

418
00:14:59,579 --> 00:15:02,220
on their PR as soon as they're created

419
00:15:02,220 --> 00:15:04,199
and for a sec is confident that critical

420
00:15:04,199 --> 00:15:06,240
security issues that we care about are

421
00:15:06,240 --> 00:15:08,459
not making their way into production

422
00:15:08,459 --> 00:15:10,500
and the infras icon call has a reduced

423
00:15:10,500 --> 00:15:12,959
workload in terms of PR reviews reducing

424
00:15:12,959 --> 00:15:15,060
review fatigue let's see this visually

425
00:15:15,060 --> 00:15:17,220
in the next slide to really emphasize

426
00:15:17,220 --> 00:15:21,079
where we've removed the bottleneck

427
00:15:21,180 --> 00:15:24,120
so in the updated workflow notably in

428
00:15:24,120 --> 00:15:26,760
the case of no errors the developer has

429
00:15:26,760 --> 00:15:29,220
the freedom to go ahead and merge and

430
00:15:29,220 --> 00:15:32,399
move forward with their workflow

431
00:15:32,399 --> 00:15:34,500
so a lot of progress has been made but

432
00:15:34,500 --> 00:15:37,199
some work remains

433
00:15:37,199 --> 00:15:38,940
while we've been able to reduce review

434
00:15:38,940 --> 00:15:40,740
fatigue we have not been able to remove

435
00:15:40,740 --> 00:15:42,660
the bottleneck completely

436
00:15:42,660 --> 00:15:44,880
ideally we only want the on-call to

437
00:15:44,880 --> 00:15:46,980
review PR's with serious security issues

438
00:15:46,980 --> 00:15:49,500
and this is what we strive for next

439
00:15:49,500 --> 00:15:51,540
another point to note is that rules may

440
00:15:51,540 --> 00:15:53,579
not be comprehensive enough to catch all

441
00:15:53,579 --> 00:15:56,579
nuanced bad practices especially as AWS

442
00:15:56,579 --> 00:15:59,160
services and features are updated

443
00:15:59,160 --> 00:16:00,779
this is a trade-off that we're willing

444
00:16:00,779 --> 00:16:04,579
to make for the increased productivity

445
00:16:05,279 --> 00:16:07,380
the benefits up until this point are

446
00:16:07,380 --> 00:16:08,940
increasing developer velocity and

447
00:16:08,940 --> 00:16:11,279
reducing Security reviews bottleneck the

448
00:16:11,279 --> 00:16:12,420
end goal is to take this one step

449
00:16:12,420 --> 00:16:14,579
further can we maximize developer

450
00:16:14,579 --> 00:16:16,680
velocity while maintaining security

451
00:16:16,680 --> 00:16:18,360
this would involve removing security

452
00:16:18,360 --> 00:16:19,860
reviewers from the critical path

453
00:16:19,860 --> 00:16:21,420
completely

454
00:16:21,420 --> 00:16:23,279
we think we can accomplish this though

455
00:16:23,279 --> 00:16:25,079
this will require more developer

456
00:16:25,079 --> 00:16:26,519
education on factors like lease

457
00:16:26,519 --> 00:16:28,620
privilege and increased custom rule

458
00:16:28,620 --> 00:16:30,540
coverage

459
00:16:30,540 --> 00:16:32,880
here are some references for some things

460
00:16:32,880 --> 00:16:36,899
I have used in these slides

461
00:16:36,899 --> 00:16:40,040
and I will take any questions

462
00:16:42,959 --> 00:16:45,779
uh excellent job there Muhammad and uh

463
00:16:45,779 --> 00:16:47,639
thank you so much for presenting all

464
00:16:47,639 --> 00:16:48,959
that

465
00:16:48,959 --> 00:16:50,759
um the first thing I wanted to we'll

466
00:16:50,759 --> 00:16:52,440
take questions for folks drop them in

467
00:16:52,440 --> 00:16:54,000
the chat we're monitoring that actively

468
00:16:54,000 --> 00:16:55,259
right now so if you have any questions

469
00:16:55,259 --> 00:16:56,880
for Muhammad based on this topic let us

470
00:16:56,880 --> 00:16:58,980
know be happy to get them asked on

471
00:16:58,980 --> 00:17:00,959
stream here but Mohammed the first thing

472
00:17:00,959 --> 00:17:04,140
I have to ask you is where do I go

473
00:17:04,140 --> 00:17:07,559
to leave a Yelp review for your talk

474
00:17:07,559 --> 00:17:10,740
thank you thank you that I mean you

475
00:17:10,740 --> 00:17:12,660
think that alone is enough I know some

476
00:17:12,660 --> 00:17:14,520
uh you know my manager and a few other

477
00:17:14,520 --> 00:17:15,839
people are watching right now so that

478
00:17:15,839 --> 00:17:18,000
alone uh means a lot I really appreciate

479
00:17:18,000 --> 00:17:20,099
that that was fantastic I'd give it five

480
00:17:20,099 --> 00:17:22,459
stars five stars thank you thank you

481
00:17:22,459 --> 00:17:25,319
sorry you'll be of you Brian you're very

482
00:17:25,319 --> 00:17:27,179
light yelpie of it yeah I like that you

483
00:17:27,179 --> 00:17:28,679
you had something in there I forget what

484
00:17:28,679 --> 00:17:30,840
I vaguely remember called yelpie right

485
00:17:30,840 --> 00:17:32,220
what was that about again yeah the

486
00:17:32,220 --> 00:17:34,320
custom rules the custom rules yeah that

487
00:17:34,320 --> 00:17:38,000
was a great name as well very yelpie

488
00:17:38,000 --> 00:17:41,400
I paraphrased what you said in your

489
00:17:41,400 --> 00:17:43,080
introduction Muhammad you said I like

490
00:17:43,080 --> 00:17:45,900
kickboxing content creation and reading

491
00:17:45,900 --> 00:17:47,700
and I said and I'm all done creating

492
00:17:47,700 --> 00:17:50,539
content and reading yeah

493
00:17:50,539 --> 00:17:53,940
I should have said that right

494
00:17:53,940 --> 00:17:57,660
nice nice so my question is thank you

495
00:17:57,660 --> 00:17:59,700
yes definitely my question for you

496
00:17:59,700 --> 00:18:01,620
Muhammad is how have you seen your

497
00:18:01,620 --> 00:18:03,840
development teams respond to these

498
00:18:03,840 --> 00:18:06,000
changes in the in the updates to their

499
00:18:06,000 --> 00:18:07,799
potential workflows have they responded

500
00:18:07,799 --> 00:18:09,480
positively to these changes what's been

501
00:18:09,480 --> 00:18:11,340
your experience with uh with all that

502
00:18:11,340 --> 00:18:14,100
yeah so far the experience has been very

503
00:18:14,100 --> 00:18:17,220
positive I think initially it's been a

504
00:18:17,220 --> 00:18:18,960
new workflow to follow so there are

505
00:18:18,960 --> 00:18:21,059
complexities with that for example with

506
00:18:21,059 --> 00:18:23,220
the waivers you know we realized that

507
00:18:23,220 --> 00:18:25,260
when we would ask developers to add

508
00:18:25,260 --> 00:18:27,120
waivers with the Rego file it was quite

509
00:18:27,120 --> 00:18:28,559
complex just because they were not

510
00:18:28,559 --> 00:18:30,240
familiar so then we had to add these

511
00:18:30,240 --> 00:18:31,980
abstractions so there's definitely been

512
00:18:31,980 --> 00:18:34,200
some Road bumps like that where this

513
00:18:34,200 --> 00:18:36,179
initial ramp up of the system has

514
00:18:36,179 --> 00:18:37,740
required a little bit more effort from

515
00:18:37,740 --> 00:18:39,960
the engineers perspective but at this

516
00:18:39,960 --> 00:18:41,220
point we're getting very positive

517
00:18:41,220 --> 00:18:43,620
feedback and I think the majority if not

518
00:18:43,620 --> 00:18:45,600
all the engineers are very excited to

519
00:18:45,600 --> 00:18:47,880
when we work on removing the bottleneck

520
00:18:47,880 --> 00:18:49,799
completely because it significantly

521
00:18:49,799 --> 00:18:52,020
increases their efficiency nice yeah

522
00:18:52,020 --> 00:18:52,980
because that's definitely one of the

523
00:18:52,980 --> 00:18:54,539
challenges with this you can you can as

524
00:18:54,539 --> 00:18:56,280
a security team put all these things in

525
00:18:56,280 --> 00:18:58,200
place but getting developers to actually

526
00:18:58,200 --> 00:19:00,419
adopt it into their workflow could uh

527
00:19:00,419 --> 00:19:02,700
you know make that for nothing right but

528
00:19:02,700 --> 00:19:03,600
that's good to hear that they're

529
00:19:03,600 --> 00:19:05,340
responding positively and that well in

530
00:19:05,340 --> 00:19:07,679
that way exactly exactly it's one of

531
00:19:07,679 --> 00:19:09,000
those rare win wins right because I

532
00:19:09,000 --> 00:19:10,740
think they were tired of waiting forever

533
00:19:10,740 --> 00:19:12,960
for reviews as well so this is one uh

534
00:19:12,960 --> 00:19:14,700
we're excited about and Engineering is

535
00:19:14,700 --> 00:19:16,380
very excited about as well yeah

536
00:19:16,380 --> 00:19:18,419
absolutely absolutely uh I have some

537
00:19:18,419 --> 00:19:19,620
more questions but I don't want to take

538
00:19:19,620 --> 00:19:21,000
up all the time so Eric Mica anything

539
00:19:21,000 --> 00:19:23,340
from you either of you I'll throw one

540
00:19:23,340 --> 00:19:25,559
out um I was curious when you have a PR

541
00:19:25,559 --> 00:19:27,660
that gets blocked say it's got it it's a

542
00:19:27,660 --> 00:19:30,179
critical or something happens what's the

543
00:19:30,179 --> 00:19:32,580
usual time to resolve on that is do you

544
00:19:32,580 --> 00:19:33,900
ever have ones that sit around for long

545
00:19:33,900 --> 00:19:35,580
enough to where it becomes irrelevant

546
00:19:35,580 --> 00:19:37,500
because the you know the the master

547
00:19:37,500 --> 00:19:39,299
Branch or whatever has moved forward or

548
00:19:39,299 --> 00:19:40,620
anything like that

549
00:19:40,620 --> 00:19:43,140
uh not at the moment so so far what has

550
00:19:43,140 --> 00:19:45,900
happened with the block is as soon as a

551
00:19:45,900 --> 00:19:47,460
developer hits a Block they'll reach out

552
00:19:47,460 --> 00:19:49,799
to us in the security Channel and they

553
00:19:49,799 --> 00:19:52,260
get a response usually within the hour

554
00:19:52,260 --> 00:19:55,140
and then we look at the VR review it um

555
00:19:55,140 --> 00:19:56,460
you know the latest we're talking is

556
00:19:56,460 --> 00:19:57,840
maybe three to four hours because

557
00:19:57,840 --> 00:19:59,400
sometimes the on point is handling some

558
00:19:59,400 --> 00:20:02,220
critical uh you know security issues but

559
00:20:02,220 --> 00:20:03,660
usually it's a really quick turnaround

560
00:20:03,660 --> 00:20:06,240
time great that sounds good

561
00:20:06,240 --> 00:20:08,039
that sounds as faster than I was

562
00:20:08,039 --> 00:20:09,900
expecting so that's awesome in here

563
00:20:09,900 --> 00:20:12,980
might get anything from your end

564
00:20:12,980 --> 00:20:15,539
no all good for now

565
00:20:15,539 --> 00:20:16,559
nice

566
00:20:16,559 --> 00:20:18,240
Muhammad one last question for you in

567
00:20:18,240 --> 00:20:20,039
terms of those uh waivers and maybe I

568
00:20:20,039 --> 00:20:21,539
misunderstood this part but is it

569
00:20:21,539 --> 00:20:24,660
possible for developers to just wave

570
00:20:24,660 --> 00:20:26,100
like all the restrictions on their end

571
00:20:26,100 --> 00:20:28,140
are you your team the infrastructure

572
00:20:28,140 --> 00:20:30,660
security team has full control over what

573
00:20:30,660 --> 00:20:33,960
can and cannot be waived yeah so what

574
00:20:33,960 --> 00:20:36,960
we've employed so far is we do have

575
00:20:36,960 --> 00:20:39,120
security team as our viewers on the

576
00:20:39,120 --> 00:20:41,039
waivers I think the directions that

577
00:20:41,039 --> 00:20:44,340
we're heading on is even with waivers we

578
00:20:44,340 --> 00:20:46,320
generally want to give developers more

579
00:20:46,320 --> 00:20:48,000
flexibility so if it's a waiver of

580
00:20:48,000 --> 00:20:50,820
medium or less severity we're going to

581
00:20:50,820 --> 00:20:53,160
try to you know not have us as reviewers

582
00:20:53,160 --> 00:20:55,380
and let developers push that through and

583
00:20:55,380 --> 00:20:56,640
then in the case of critical issues

584
00:20:56,640 --> 00:20:58,440
we'll still be reviewers at this point

585
00:20:58,440 --> 00:21:00,660
though we review all waivers

586
00:21:00,660 --> 00:21:02,160
okay cool

587
00:21:02,160 --> 00:21:04,679
all right I'm not seeing any more uh oh

588
00:21:04,679 --> 00:21:06,780
we have one in the chat from Muhammad as

589
00:21:06,780 --> 00:21:09,299
well I assume you can use custom rule to

590
00:21:09,299 --> 00:21:10,880
require resource or tag based

591
00:21:10,880 --> 00:21:13,500
authorization for specific AWS actions

592
00:21:13,500 --> 00:21:15,720
is that correct

593
00:21:15,720 --> 00:21:17,880
what was the question one more time you

594
00:21:17,880 --> 00:21:20,520
can use custom rules to require resource

595
00:21:20,520 --> 00:21:22,919
or tag-based authorization for specific

596
00:21:22,919 --> 00:21:27,720
AWS actions and he he uh expanded upon

597
00:21:27,720 --> 00:21:29,880
that meaning the policy should specify a

598
00:21:29,880 --> 00:21:32,400
resource or a tag in the condition

599
00:21:32,400 --> 00:21:34,500
yeah that that's 100 so if I've

600
00:21:34,500 --> 00:21:35,820
understood the question correctly that

601
00:21:35,820 --> 00:21:37,679
is 100 right so

602
00:21:37,679 --> 00:21:40,020
um the custom rule would need to specify

603
00:21:40,020 --> 00:21:41,100
that

604
00:21:41,100 --> 00:21:43,500
um so in the case of say and again I'm

605
00:21:43,500 --> 00:21:44,460
not sure if I've understood the question

606
00:21:44,460 --> 00:21:45,659
right so let me know if I get off track

607
00:21:45,659 --> 00:21:47,400
but in the case of say we're talking

608
00:21:47,400 --> 00:21:49,620
about a policy that's only specific to

609
00:21:49,620 --> 00:21:51,780
Yelp you know a custom policy the custom

610
00:21:51,780 --> 00:21:53,940
rule would need to specify that so it's

611
00:21:53,940 --> 00:21:56,039
hard coded basically in there right and

612
00:21:56,039 --> 00:21:57,840
that's also one reason why custom rules

613
00:21:57,840 --> 00:21:59,520
can't really be shared generically

614
00:21:59,520 --> 00:22:01,860
because while it's very useful to us to

615
00:22:01,860 --> 00:22:03,960
someone else using that rule um you know

616
00:22:03,960 --> 00:22:05,820
it wouldn't be very useful

617
00:22:05,820 --> 00:22:08,100
okay great thank you for feeling that

618
00:22:08,100 --> 00:22:09,480
one as well thank you for the question

619
00:22:09,480 --> 00:22:11,520
Mohammed in chat uh all right Muhammad

620
00:22:11,520 --> 00:22:13,559
thank you so much for being here and

621
00:22:13,559 --> 00:22:15,480
presenting this talk uh we appreciate

622
00:22:15,480 --> 00:22:16,559
having you and have a good rest of your

623
00:22:16,559 --> 00:22:18,600
day cool thank you for having me have a

624
00:22:18,600 --> 00:22:21,500
good day bye

