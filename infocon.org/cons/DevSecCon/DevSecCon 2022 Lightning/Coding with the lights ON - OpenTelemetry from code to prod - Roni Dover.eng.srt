1
00:00:04,339 --> 00:00:07,799
open Telemetry from code to prod without

2
00:00:07,799 --> 00:00:10,920
further Ado take it away Roni and thank

3
00:00:10,920 --> 00:00:12,840
you for being here bud

4
00:00:12,840 --> 00:00:14,519
perfect

5
00:00:14,519 --> 00:00:16,260
um great to be here thanks for having me

6
00:00:16,260 --> 00:00:18,539
uh and I'm extremely excited to be

7
00:00:18,539 --> 00:00:20,039
talking about

8
00:00:20,039 --> 00:00:22,320
um open Telemetry and

9
00:00:22,320 --> 00:00:24,660
um its use encoding which I think is is

10
00:00:24,660 --> 00:00:26,580
the more exciting part

11
00:00:26,580 --> 00:00:29,279
and the reason I'm so excited to be

12
00:00:29,279 --> 00:00:33,000
speaking about it is because how it is

13
00:00:33,000 --> 00:00:35,760
fundamentally changing the way that we

14
00:00:35,760 --> 00:00:38,579
write code and I'm extremely excited

15
00:00:38,579 --> 00:00:40,920
about these types of changes you know it

16
00:00:40,920 --> 00:00:42,719
happened back in the days maybe it was

17
00:00:42,719 --> 00:00:45,059
testing sometimes maybe it was event

18
00:00:45,059 --> 00:00:47,940
sourcing and some other design Partners

19
00:00:47,940 --> 00:00:50,219
where you really saw how people kind of

20
00:00:50,219 --> 00:00:51,899
started coding differently a little bit

21
00:00:51,899 --> 00:00:53,820
after they kind of realized the the

22
00:00:53,820 --> 00:00:56,699
concept and and what it could do

23
00:00:56,699 --> 00:00:59,399
um and in this case I'm extremely

24
00:00:59,399 --> 00:01:01,680
excited to see the kind of changes that

25
00:01:01,680 --> 00:01:04,860
open Telemetry is bringing uh just a few

26
00:01:04,860 --> 00:01:07,320
words about me I'm I'm a developer of

27
00:01:07,320 --> 00:01:08,880
many years

28
00:01:08,880 --> 00:01:12,000
um my personal tragedy is kind of the

29
00:01:12,000 --> 00:01:13,439
fact that I've oscillated between

30
00:01:13,439 --> 00:01:16,020
product management roles and development

31
00:01:16,020 --> 00:01:19,680
roles you know as a developer not really

32
00:01:19,680 --> 00:01:21,600
willing to develop without being

33
00:01:21,600 --> 00:01:24,060
involved kind of the design process and

34
00:01:24,060 --> 00:01:26,400
asking why and all of these things and

35
00:01:26,400 --> 00:01:29,580
as a product manager not really willing

36
00:01:29,580 --> 00:01:33,479
to relinquish code and coding so I've

37
00:01:33,479 --> 00:01:35,700
found a variety of ways to balance the

38
00:01:35,700 --> 00:01:38,220
two but

39
00:01:38,220 --> 00:01:41,340
wearing both hats uh was always

40
00:01:41,340 --> 00:01:44,460
extremely passionate about processes and

41
00:01:44,460 --> 00:01:46,500
how do we actually create a development

42
00:01:46,500 --> 00:01:48,119
process that works

43
00:01:48,119 --> 00:01:51,899
and it is this kind of

44
00:01:51,899 --> 00:01:55,680
um subject that I want to use maybe as a

45
00:01:55,680 --> 00:01:59,340
backdrop to to discuss why I think open

46
00:01:59,340 --> 00:02:01,979
Telemetry is so important so to do that

47
00:02:01,979 --> 00:02:04,320
I want to tell you a story a story of

48
00:02:04,320 --> 00:02:07,020
one of the developers in my team we're

49
00:02:07,020 --> 00:02:08,639
going to call him bill

50
00:02:08,639 --> 00:02:12,900
and bill has a very common task which is

51
00:02:12,900 --> 00:02:15,780
he needs to develop a feature let's say

52
00:02:15,780 --> 00:02:17,879
make a change to the data access layer

53
00:02:17,879 --> 00:02:19,560
or something like that

54
00:02:19,560 --> 00:02:20,099
um

55
00:02:20,099 --> 00:02:22,260
and he needs to take that feature all

56
00:02:22,260 --> 00:02:24,360
the way to production

57
00:02:24,360 --> 00:02:28,140
now Bill's job used to be very very

58
00:02:28,140 --> 00:02:32,160
simple 20 years ago when I was still a

59
00:02:32,160 --> 00:02:35,340
young developer that job included

60
00:02:35,340 --> 00:02:37,319
basically taking the feature developing

61
00:02:37,319 --> 00:02:39,840
it wrapping it up for real nice and then

62
00:02:39,840 --> 00:02:41,700
taking it across the hall to this

63
00:02:41,700 --> 00:02:44,340
department called QA letting them kind

64
00:02:44,340 --> 00:02:46,739
of take it from there of course there

65
00:02:46,739 --> 00:02:49,379
would be the the mandatory kind of

66
00:02:49,379 --> 00:02:51,720
debate about what's the bug what's a

67
00:02:51,720 --> 00:02:53,879
feature and all of that stuff but

68
00:02:53,879 --> 00:02:55,319
eventually the feature will just kind of

69
00:02:55,319 --> 00:02:58,140
roll on until it would someday reach

70
00:02:58,140 --> 00:02:59,700
production and then maybe a year later

71
00:02:59,700 --> 00:03:01,500
you would hear about a crippling bug

72
00:03:01,500 --> 00:03:03,780
that was plaguing everyone that maybe

73
00:03:03,780 --> 00:03:05,940
should have been fixed and and and that

74
00:03:05,940 --> 00:03:07,680
was basically your level of involvement

75
00:03:07,680 --> 00:03:09,840
and of course that changed and today

76
00:03:09,840 --> 00:03:12,780
kind of when Bill is rolling out a

77
00:03:12,780 --> 00:03:14,819
feature he's doing a lot right we're

78
00:03:14,819 --> 00:03:16,819
we're doing tests

79
00:03:16,819 --> 00:03:21,180
integration tests unit test bill is even

80
00:03:21,180 --> 00:03:23,159
worrying kind of about how to deploy the

81
00:03:23,159 --> 00:03:26,040
feature he knows how files and terraform

82
00:03:26,040 --> 00:03:28,140
and lots of other really exciting

83
00:03:28,140 --> 00:03:29,819
Technologies

84
00:03:29,819 --> 00:03:32,580
and he he really does kind of follow all

85
00:03:32,580 --> 00:03:34,680
of the best practices and he takes the

86
00:03:34,680 --> 00:03:37,379
feature all the way to production

87
00:03:37,379 --> 00:03:41,220
but the question is what happens next

88
00:03:41,220 --> 00:03:44,340
what happens after the feature gets

89
00:03:44,340 --> 00:03:46,200
rolled into production

90
00:03:46,200 --> 00:03:50,159
and what I would kind of expect and I

91
00:03:50,159 --> 00:03:51,599
always kind of

92
00:03:51,599 --> 00:03:55,080
asked Bill to do was well check whether

93
00:03:55,080 --> 00:03:58,620
your code actually works uh it seems you

94
00:03:58,620 --> 00:04:00,720
know I'm very evidence based in in the

95
00:04:00,720 --> 00:04:03,840
way that I approach development and

96
00:04:03,840 --> 00:04:06,239
um my Approach was always you know yeah

97
00:04:06,239 --> 00:04:09,180
you rolled out this amazing uh fix to

98
00:04:09,180 --> 00:04:11,040
the dial did it actually work did it

99
00:04:11,040 --> 00:04:13,319
make life better for everyone

100
00:04:13,319 --> 00:04:15,560
um are they using it you know I I

101
00:04:15,560 --> 00:04:18,839
witnessed not one but multiple instances

102
00:04:18,839 --> 00:04:21,060
really hoarse stories if you think about

103
00:04:21,060 --> 00:04:23,460
it like that where matriculously written

104
00:04:23,460 --> 00:04:26,460
code was just maybe one or two bad if

105
00:04:26,460 --> 00:04:28,380
statements away from actually getting

106
00:04:28,380 --> 00:04:31,259
executed so verifying that your code

107
00:04:31,259 --> 00:04:34,080
works it seems to me you know something

108
00:04:34,080 --> 00:04:38,460
that's very basic but somehow 99 of the

109
00:04:38,460 --> 00:04:40,139
time what would happen is that bill

110
00:04:40,139 --> 00:04:42,540
would just move on to the next feature

111
00:04:42,540 --> 00:04:45,780
and you know he's not really to blame it

112
00:04:45,780 --> 00:04:48,360
seems like he's not the only one uh

113
00:04:48,360 --> 00:04:50,100
there's there seemed to be a big bias

114
00:04:50,100 --> 00:04:52,199
towards moving on to the next feature

115
00:04:52,199 --> 00:04:53,820
and next feature

116
00:04:53,820 --> 00:04:57,000
um and this seemed to me uh to be kind

117
00:04:57,000 --> 00:04:59,639
of a fundamental problem and and the

118
00:04:59,639 --> 00:05:01,199
process

119
00:05:01,199 --> 00:05:03,000
um so I went back to the drawing board

120
00:05:03,000 --> 00:05:05,400
and I looked up the

121
00:05:05,400 --> 00:05:08,220
um devops infinite Loop you know by now

122
00:05:08,220 --> 00:05:11,419
completely overused

123
00:05:11,639 --> 00:05:13,800
um and the problem was kind of glaring

124
00:05:13,800 --> 00:05:15,900
at me right from this diagram this is

125
00:05:15,900 --> 00:05:18,180
the the diagram that I dug up a while

126
00:05:18,180 --> 00:05:19,259
back

127
00:05:19,259 --> 00:05:20,820
um it's it's still I think one of the

128
00:05:20,820 --> 00:05:22,500
first one that you'll you'll get if you

129
00:05:22,500 --> 00:05:25,259
search for it on on the internet

130
00:05:25,259 --> 00:05:25,919
um

131
00:05:25,919 --> 00:05:29,940
and and and the issue here is that you

132
00:05:29,940 --> 00:05:32,400
may notice there are so many tools

133
00:05:32,400 --> 00:05:34,800
mentioned here some of them related to

134
00:05:34,800 --> 00:05:36,419
build some of them ready to continuous

135
00:05:36,419 --> 00:05:38,220
integration deployment operations but

136
00:05:38,220 --> 00:05:40,080
there is one segment here

137
00:05:40,080 --> 00:05:42,960
that is almost a black hole in the

138
00:05:42,960 --> 00:05:45,000
middle of of the devops loop and that's

139
00:05:45,000 --> 00:05:47,340
the aeroback leading from production to

140
00:05:47,340 --> 00:05:50,160
Dev called continuous feedback now the

141
00:05:50,160 --> 00:05:51,900
author of this diagram for some reason

142
00:05:51,900 --> 00:05:54,479
sought to include sales forces the tool

143
00:05:54,479 --> 00:05:56,039
of choice there

144
00:05:56,039 --> 00:05:59,160
um and bizarre as that may be I think

145
00:05:59,160 --> 00:06:01,259
the more important thing to notice is

146
00:06:01,259 --> 00:06:03,720
that there there's an alarming lack of

147
00:06:03,720 --> 00:06:06,300
tools related to continuous feedback

148
00:06:06,300 --> 00:06:09,060
it's as if we've kind of given up on the

149
00:06:09,060 --> 00:06:11,940
concept of how do we take all of this

150
00:06:11,940 --> 00:06:14,520
awesome data that exists in production

151
00:06:14,520 --> 00:06:16,979
and make it into something that can be

152
00:06:16,979 --> 00:06:20,160
relevant in Dev

153
00:06:20,160 --> 00:06:21,660
um and if you think about it when we

154
00:06:21,660 --> 00:06:24,960
code there is ample feedback you know in

155
00:06:24,960 --> 00:06:27,840
our local Ides there is some limited

156
00:06:27,840 --> 00:06:29,520
feedback from test environment I say

157
00:06:29,520 --> 00:06:31,560
limited because it's it's more kind of

158
00:06:31,560 --> 00:06:33,960
black and white red and green is it

159
00:06:33,960 --> 00:06:36,120
passing is it failing not really

160
00:06:36,120 --> 00:06:38,880
qualitative but but it is feedback

161
00:06:38,880 --> 00:06:40,800
and then there is almost no feedback

162
00:06:40,800 --> 00:06:45,180
that we use kind of in a continuous way

163
00:06:45,180 --> 00:06:47,220
um when we develop

164
00:06:47,220 --> 00:06:49,500
so I thought to myself at that point

165
00:06:49,500 --> 00:06:52,259
well if only there was a way to give

166
00:06:52,259 --> 00:06:53,180
Bill

167
00:06:53,180 --> 00:06:56,280
immediate access to objective data about

168
00:06:56,280 --> 00:06:58,620
his code if only if that was a non-issue

169
00:06:58,620 --> 00:07:00,120
like you you rolled your code you want

170
00:07:00,120 --> 00:07:02,639
the data here it is and that's it

171
00:07:02,639 --> 00:07:04,919
um and I think that's a perfect gate uh

172
00:07:04,919 --> 00:07:08,940
segue to discuss open telemetry

173
00:07:08,940 --> 00:07:12,000
um now open Telemetry is a spec for

174
00:07:12,000 --> 00:07:13,740
observability

175
00:07:13,740 --> 00:07:16,259
and the reason in my mind that it's

176
00:07:16,259 --> 00:07:18,479
important is not because it's

177
00:07:18,479 --> 00:07:21,380
revolutionary or it's not

178
00:07:21,380 --> 00:07:23,639
technologically a breakthrough or

179
00:07:23,639 --> 00:07:25,139
something that does something completely

180
00:07:25,139 --> 00:07:26,639
different

181
00:07:26,639 --> 00:07:28,560
I think the reason open till Elementary

182
00:07:28,560 --> 00:07:33,000
is not just important but is a

183
00:07:33,000 --> 00:07:37,440
revolution is that everyone agrees on it

184
00:07:37,440 --> 00:07:39,240
and that has kind of never happened

185
00:07:39,240 --> 00:07:40,380
before

186
00:07:40,380 --> 00:07:44,340
so today if you look at open Telemetry

187
00:07:44,340 --> 00:07:46,380
you can see there is a big alignment

188
00:07:46,380 --> 00:07:49,139
around it in terms of commercial and

189
00:07:49,139 --> 00:07:51,539
non-commercial tools and that has two

190
00:07:51,539 --> 00:07:54,900
big and critical side effects

191
00:07:54,900 --> 00:07:59,639
first is that being open being free and

192
00:07:59,639 --> 00:08:02,220
being available to everyone

193
00:08:02,220 --> 00:08:05,220
it starts to grow its own ecosystem so

194
00:08:05,220 --> 00:08:07,080
there are a lot of tools that start kind

195
00:08:07,080 --> 00:08:09,840
of an open source libraries that start

196
00:08:09,840 --> 00:08:11,819
worrying about well there is all this

197
00:08:11,819 --> 00:08:13,740
amazing open Telemetry data how can we

198
00:08:13,740 --> 00:08:16,020
actually make it useful

199
00:08:16,020 --> 00:08:18,960
um and the second thing that happened is

200
00:08:18,960 --> 00:08:21,599
that it became widespread because now

201
00:08:21,599 --> 00:08:24,479
you know if I'm writing a library or a

202
00:08:24,479 --> 00:08:25,620
platform I don't need to worry about

203
00:08:25,620 --> 00:08:27,060
well am I going to include open

204
00:08:27,060 --> 00:08:28,860
Telemetry I'm going to include something

205
00:08:28,860 --> 00:08:30,539
else of course I'm going to include open

206
00:08:30,539 --> 00:08:34,440
Telemetry as an option to observe this

207
00:08:34,440 --> 00:08:37,559
code so as a result of that the

208
00:08:37,559 --> 00:08:39,599
experience of including it in the code

209
00:08:39,599 --> 00:08:41,520
has become kind of

210
00:08:41,520 --> 00:08:43,380
um turning the lights on kind of an

211
00:08:43,380 --> 00:08:45,480
experience rather than something more

212
00:08:45,480 --> 00:08:48,180
complex now to illustrate that I've

213
00:08:48,180 --> 00:08:49,980
written a sample application hope we

214
00:08:49,980 --> 00:08:51,839
have time to look at it in in a few

215
00:08:51,839 --> 00:08:53,580
minutes

216
00:08:53,580 --> 00:08:56,700
um and to I'm allergic to these very

217
00:08:56,700 --> 00:09:00,300
thin and uh kind of abstracted simple

218
00:09:00,300 --> 00:09:02,640
crud app so I I created

219
00:09:02,640 --> 00:09:04,380
um something with a bit more logic it

220
00:09:04,380 --> 00:09:08,040
uses rabbit it uses postgres a fast API

221
00:09:08,040 --> 00:09:09,480
service in this sense

222
00:09:09,480 --> 00:09:11,399
all of that is great

223
00:09:11,399 --> 00:09:13,440
um but what I was really looking for is

224
00:09:13,440 --> 00:09:16,620
well how easy it is to instrument

225
00:09:16,620 --> 00:09:19,680
and what I found out is that there is

226
00:09:19,680 --> 00:09:21,720
already as I mentioned before built-in

227
00:09:21,720 --> 00:09:23,459
instrumentation for all of these

228
00:09:23,459 --> 00:09:24,779
different

229
00:09:24,779 --> 00:09:29,160
um libraries and Technologies so just by

230
00:09:29,160 --> 00:09:31,380
turning things on basically including

231
00:09:31,380 --> 00:09:33,060
instrumenters and saying well instrument

232
00:09:33,060 --> 00:09:34,880
this instrument this instrument this

233
00:09:34,880 --> 00:09:38,339
without changing the code I was able to

234
00:09:38,339 --> 00:09:40,860
get a lot of data from the fast API

235
00:09:40,860 --> 00:09:42,959
server from rabbit from postgres and so

236
00:09:42,959 --> 00:09:47,339
on so from as bill again from coding in

237
00:09:47,339 --> 00:09:49,380
the dark essentially having no

238
00:09:49,380 --> 00:09:51,540
information except my own logs about

239
00:09:51,540 --> 00:09:53,880
what was going on all of a sudden I'm

240
00:09:53,880 --> 00:09:57,000
flooded with almost too much data

241
00:09:57,000 --> 00:10:00,360
and what kind of data is it so just uh

242
00:10:00,360 --> 00:10:03,959
maybe observability or tracing in 10

243
00:10:03,959 --> 00:10:05,220
seconds

244
00:10:05,220 --> 00:10:07,860
um two very important types of insights

245
00:10:07,860 --> 00:10:10,920
first is tracing tracing allows us to

246
00:10:10,920 --> 00:10:11,880
see

247
00:10:11,880 --> 00:10:14,459
um what goes on when a user go through a

248
00:10:14,459 --> 00:10:16,019
request so

249
00:10:16,019 --> 00:10:18,300
in this case uh it goes through the fast

250
00:10:18,300 --> 00:10:19,920
API server

251
00:10:19,920 --> 00:10:23,640
um does something rabbit mq kicks in a

252
00:10:23,640 --> 00:10:25,620
message is published there some some

253
00:10:25,620 --> 00:10:28,800
work or server consumes it uses postgres

254
00:10:28,800 --> 00:10:31,080
lots of processes are going processes

255
00:10:31,080 --> 00:10:33,600
are going on and we can view it as kind

256
00:10:33,600 --> 00:10:36,180
of one distributed trace and follow

257
00:10:36,180 --> 00:10:39,600
exactly what happened with that request

258
00:10:39,600 --> 00:10:41,100
um in addition to that there is another

259
00:10:41,100 --> 00:10:42,899
concept called spans which is basically

260
00:10:42,899 --> 00:10:45,300
an activity or a specific scope within

261
00:10:45,300 --> 00:10:48,660
that Trace so for example in a specific

262
00:10:48,660 --> 00:10:51,600
authentication request I'm handling the

263
00:10:51,600 --> 00:10:53,339
HTTP request and I'm checking permission

264
00:10:53,339 --> 00:10:55,380
validating with some sources each of

265
00:10:55,380 --> 00:10:59,279
these I can Define as its own scope and

266
00:10:59,279 --> 00:11:00,240
then

267
00:11:00,240 --> 00:11:02,579
maybe to contrast with logs I don't just

268
00:11:02,579 --> 00:11:04,560
get the message well this happened I

269
00:11:04,560 --> 00:11:06,360
understand the context who called it

270
00:11:06,360 --> 00:11:08,519
when did it start did it have any errors

271
00:11:08,519 --> 00:11:11,279
and everything is kind of put into

272
00:11:11,279 --> 00:11:13,800
context and I can really understand what

273
00:11:13,800 --> 00:11:17,640
actually happened so just to give you

274
00:11:17,640 --> 00:11:20,399
um an example of how that works I'm

275
00:11:20,399 --> 00:11:22,200
going to switch over to my other screen

276
00:11:22,200 --> 00:11:24,720
if you can share it

277
00:11:24,720 --> 00:11:29,160
um so here I have an API

278
00:11:29,160 --> 00:11:33,000
um for My Vault application that I

279
00:11:33,000 --> 00:11:35,820
created as an example

280
00:11:35,820 --> 00:11:39,600
um and I can trigger kind of let's say

281
00:11:39,600 --> 00:11:42,360
an appraised operation oh let's first

282
00:11:42,360 --> 00:11:44,839
log in

283
00:11:45,240 --> 00:11:47,760
was actually watching the Harry Potter

284
00:11:47,760 --> 00:11:49,860
movies with my kids at the time when I

285
00:11:49,860 --> 00:11:52,140
wrote this application so

286
00:11:52,140 --> 00:11:53,820
um I decided it's going to be a green

287
00:11:53,820 --> 00:11:55,800
goth filth API

288
00:11:55,800 --> 00:11:58,380
um so let's let's let's just trigger any

289
00:11:58,380 --> 00:12:01,140
operation here and then as I mentioned

290
00:12:01,140 --> 00:12:03,120
there are a lot of Open Source tools

291
00:12:03,120 --> 00:12:06,720
that kind of makes it very very easy and

292
00:12:06,720 --> 00:12:08,839
simple for us to actually

293
00:12:08,839 --> 00:12:11,940
make that data relevant so in this case

294
00:12:11,940 --> 00:12:13,380
I'm going to use something that's very

295
00:12:13,380 --> 00:12:16,079
popular called Jaeger very easy to set

296
00:12:16,079 --> 00:12:17,880
up

297
00:12:17,880 --> 00:12:21,660
so let's look at the tracing from this

298
00:12:21,660 --> 00:12:23,880
service so as you can see it's a

299
00:12:23,880 --> 00:12:25,019
distributed Trace it's actually

300
00:12:25,019 --> 00:12:26,700
including both the worker and the

301
00:12:26,700 --> 00:12:28,740
service and I can see exactly what

302
00:12:28,740 --> 00:12:31,320
happened and again take in mind that I

303
00:12:31,320 --> 00:12:33,720
minimal code changes were required and

304
00:12:33,720 --> 00:12:35,940
immediately I get so much data about

305
00:12:35,940 --> 00:12:39,720
what happened how much uh time each of

306
00:12:39,720 --> 00:12:43,320
these sections took and so on

307
00:12:43,320 --> 00:12:45,060
um so that's great

308
00:12:45,060 --> 00:12:48,420
um now the question is will you actually

309
00:12:48,420 --> 00:12:50,700
use it will Bill actually like if I

310
00:12:50,700 --> 00:12:52,860
provided this to bill is this what is

311
00:12:52,860 --> 00:12:55,459
needed to be effective

312
00:12:55,459 --> 00:13:00,120
and the answer unfortunately was no so

313
00:13:00,120 --> 00:13:02,120
providing this to my development team

314
00:13:02,120 --> 00:13:06,000
did not actually make them use that data

315
00:13:06,000 --> 00:13:08,579
and you know think about it yourself

316
00:13:08,579 --> 00:13:11,100
would would you use that in your

317
00:13:11,100 --> 00:13:12,660
day-to-day

318
00:13:12,660 --> 00:13:15,720
and that puzzled me until I kind of

319
00:13:15,720 --> 00:13:18,180
thought better of it and and and

320
00:13:18,180 --> 00:13:20,459
understood that there is one more

321
00:13:20,459 --> 00:13:22,380
component missing

322
00:13:22,380 --> 00:13:24,660
um and I was looking at tests as kind of

323
00:13:24,660 --> 00:13:28,079
a good kind of comparison so when we got

324
00:13:28,079 --> 00:13:29,700
started with tests we didn't say

325
00:13:29,700 --> 00:13:33,480
developers to developer as well just you

326
00:13:33,480 --> 00:13:36,420
know as you work I want you every now

327
00:13:36,420 --> 00:13:38,639
and then to just think and run some

328
00:13:38,639 --> 00:13:41,279
tests because you feel like it

329
00:13:41,279 --> 00:13:43,139
we made it continuous only when

330
00:13:43,139 --> 00:13:45,060
continuous integration was introduced

331
00:13:45,060 --> 00:13:48,779
did it become kind of a it's not even a

332
00:13:48,779 --> 00:13:50,279
question of course the desks are going

333
00:13:50,279 --> 00:13:52,019
to run and the same with continuous

334
00:13:52,019 --> 00:13:53,100
deployment and production right you

335
00:13:53,100 --> 00:13:54,240
don't think about well I'm going to

336
00:13:54,240 --> 00:13:56,279
deploy to production no you create if

337
00:13:56,279 --> 00:13:57,360
you're you if you're practicing

338
00:13:57,360 --> 00:13:59,519
continuous deployment you just create an

339
00:13:59,519 --> 00:14:01,440
awesome Pipeline and that just happens

340
00:14:01,440 --> 00:14:05,459
automatically so in the same way the

341
00:14:05,459 --> 00:14:08,820
expectation is for uh that feedback from

342
00:14:08,820 --> 00:14:10,380
production to be something that happens

343
00:14:10,380 --> 00:14:13,380
automatically not send developers to

344
00:14:13,380 --> 00:14:15,839
hunt around in dashboards but actually

345
00:14:15,839 --> 00:14:18,540
make that information something that

346
00:14:18,540 --> 00:14:21,420
becomes a part of what they see of their

347
00:14:21,420 --> 00:14:23,399
view as they're working

348
00:14:23,399 --> 00:14:25,079
and this is kind of where my own

349
00:14:25,079 --> 00:14:28,620
personal Journey with observability and

350
00:14:28,620 --> 00:14:30,600
what I call continuous feedback began

351
00:14:30,600 --> 00:14:33,180
because I kind of took it as as a

352
00:14:33,180 --> 00:14:35,100
personal project to see how I can create

353
00:14:35,100 --> 00:14:38,220
something that would allow developers to

354
00:14:38,220 --> 00:14:40,320
actually have that information as

355
00:14:40,320 --> 00:14:42,180
something that's continuously provided

356
00:14:42,180 --> 00:14:44,820
to them and exists within the scope of

357
00:14:44,820 --> 00:14:46,860
their work

358
00:14:46,860 --> 00:14:48,839
um so just to give you a glimpse of that

359
00:14:48,839 --> 00:14:51,660
I created a project called digma

360
00:14:51,660 --> 00:14:53,820
um and I just want to show you dig my

361
00:14:53,820 --> 00:14:55,500
nut for the sake of digma and there are

362
00:14:55,500 --> 00:14:56,579
other awesome projects that they're

363
00:14:56,579 --> 00:14:58,380
trying to do the same thing but to give

364
00:14:58,380 --> 00:15:00,720
you a vision of what I think development

365
00:15:00,720 --> 00:15:02,279
is becoming

366
00:15:02,279 --> 00:15:04,440
so over here we're looking at the code

367
00:15:04,440 --> 00:15:07,680
of that same authentication

368
00:15:07,680 --> 00:15:10,320
um for Gringotts that we were looking at

369
00:15:10,320 --> 00:15:11,820
before

370
00:15:11,820 --> 00:15:14,820
um only as you can see um yeah I'm right

371
00:15:14,820 --> 00:15:16,740
here in my IDE and there's absolutely

372
00:15:16,740 --> 00:15:18,360
nothing significant about this code

373
00:15:18,360 --> 00:15:19,860
except that it's already running in

374
00:15:19,860 --> 00:15:21,360
production and we've passed all of the

375
00:15:21,360 --> 00:15:24,420
tests I'm very confident in it but I

376
00:15:24,420 --> 00:15:27,060
don't really know right so what I'm

377
00:15:27,060 --> 00:15:29,940
going to do now is just turn on in this

378
00:15:29,940 --> 00:15:33,480
case continuous feedback via digma

379
00:15:33,480 --> 00:15:34,260
um

380
00:15:34,260 --> 00:15:37,019
and this will you look at exactly the

381
00:15:37,019 --> 00:15:39,120
same data that you saw before exactly

382
00:15:39,120 --> 00:15:40,620
the same data that we get from open

383
00:15:40,620 --> 00:15:42,720
Telemetry nothing new

384
00:15:42,720 --> 00:15:45,360
but it will come to conclusions about

385
00:15:45,360 --> 00:15:47,220
how this code works and immediately I

386
00:15:47,220 --> 00:15:49,079
see well there's some error hotspots

387
00:15:49,079 --> 00:15:52,320
here and I can see which exceptions they

388
00:15:52,320 --> 00:15:54,060
are and there's a suspected n plus one

389
00:15:54,060 --> 00:15:55,560
which for those of you are familiar with

390
00:15:55,560 --> 00:15:59,160
it is kind of an issue with uh queer too

391
00:15:59,160 --> 00:16:00,899
many queries due to bad modeling and I

392
00:16:00,899 --> 00:16:03,480
can see what is that uh query and that

393
00:16:03,480 --> 00:16:06,560
just becomes a part of my work just like

394
00:16:06,560 --> 00:16:10,320
intellisense or find usages or any other

395
00:16:10,320 --> 00:16:11,300
type

396
00:16:11,300 --> 00:16:16,139
of developer tool that I use just to

397
00:16:16,139 --> 00:16:18,060
develop that's automatic and that I

398
00:16:18,060 --> 00:16:19,680
stopped thinking about because it just

399
00:16:19,680 --> 00:16:22,980
became a natural part of how I code and

400
00:16:22,980 --> 00:16:24,899
this is where I see the future of open

401
00:16:24,899 --> 00:16:28,199
Telemetry not in dashboards not in some

402
00:16:28,199 --> 00:16:32,180
situation rooms or devops

403
00:16:32,180 --> 00:16:34,800
tools that developers don't glance at

404
00:16:34,800 --> 00:16:36,300
but it's something that has to be

405
00:16:36,300 --> 00:16:38,940
fundamentally tied in to how we write

406
00:16:38,940 --> 00:16:40,920
code

407
00:16:40,920 --> 00:16:43,380
um now if you're interested in learning

408
00:16:43,380 --> 00:16:48,240
more about that I did create a very cool

409
00:16:48,240 --> 00:16:48,980
um

410
00:16:48,980 --> 00:16:52,320
Resource page that I recommend that you

411
00:16:52,320 --> 00:16:56,600
go to it's at continuous feedback.org

412
00:16:56,600 --> 00:17:00,060
and if you go there you can see a bunch

413
00:17:00,060 --> 00:17:01,560
of resources I talked to some of the

414
00:17:01,560 --> 00:17:02,300
open

415
00:17:02,300 --> 00:17:04,679
source tools and basically how to get

416
00:17:04,679 --> 00:17:07,260
started my own contact details are there

417
00:17:07,260 --> 00:17:09,240
if you have any questions as well as a

418
00:17:09,240 --> 00:17:11,579
link to a slack group where we have some

419
00:17:11,579 --> 00:17:13,439
early practitioners sharing some of

420
00:17:13,439 --> 00:17:16,939
their experiences and tools

421
00:17:16,980 --> 00:17:19,319
um that's it thank you very much and I'd

422
00:17:19,319 --> 00:17:23,418
be very happy to answer any questions

423
00:17:25,679 --> 00:17:29,600
excellent stuff there thank you Roni

424
00:17:30,240 --> 00:17:32,340
um any questions that I haven't seen any

425
00:17:32,340 --> 00:17:34,260
questions in the chat just yet but Micah

426
00:17:34,260 --> 00:17:36,120
or Eric any questions from you either of

427
00:17:36,120 --> 00:17:38,039
you I'm busy looking at continuous

428
00:17:38,039 --> 00:17:41,460
feedback.org yes maybe uh maybe I'm

429
00:17:41,460 --> 00:17:44,760
related but did I see uh Board Game Geek

430
00:17:44,760 --> 00:17:47,340
in there meaning that you are a board

431
00:17:47,340 --> 00:17:52,760
game geek or do you use that website or

432
00:17:55,679 --> 00:17:58,500
it's both I I use that uh very good

433
00:17:58,500 --> 00:18:01,559
because I am a board game uh but yeah

434
00:18:01,559 --> 00:18:04,340
it's excellent

435
00:18:04,679 --> 00:18:07,039
I know that's the important questions

436
00:18:07,039 --> 00:18:09,660
yeah yeah sure

437
00:18:09,660 --> 00:18:12,600
and troll me that's what you do right

438
00:18:12,600 --> 00:18:15,419
um uh Ronnie though the the presentation

439
00:18:15,419 --> 00:18:17,039
was fantastic and it was quite

440
00:18:17,039 --> 00:18:18,840
interesting to me as a developer as well

441
00:18:18,840 --> 00:18:21,600
to get that type of um insight into my

442
00:18:21,600 --> 00:18:23,280
code and the fact that you went that

443
00:18:23,280 --> 00:18:26,280
step further of having it directly in my

444
00:18:26,280 --> 00:18:28,200
tool of choice that you know that way I

445
00:18:28,200 --> 00:18:29,760
don't have to switch context like like

446
00:18:29,760 --> 00:18:32,580
you you saw like but I'm telling you as

447
00:18:32,580 --> 00:18:33,840
well that like I can appreciate

448
00:18:33,840 --> 00:18:36,419
something like that uh to help keep me

449
00:18:36,419 --> 00:18:39,000
in the flow because even for me as a web

450
00:18:39,000 --> 00:18:40,380
developer switching from my development

451
00:18:40,380 --> 00:18:42,059
environment to like the browser to test

452
00:18:42,059 --> 00:18:46,320
things uh it can create some overhead uh

453
00:18:46,320 --> 00:18:48,299
and frustrations with that so great

454
00:18:48,299 --> 00:18:50,100
stuff cool stuff I'm excited to check it

455
00:18:50,100 --> 00:18:51,720
out a bit further after this

456
00:18:51,720 --> 00:18:53,280
yeah it's really cool because you're

457
00:18:53,280 --> 00:18:55,559
right like you said most people think

458
00:18:55,559 --> 00:18:58,260
observability they think oh logs and and

459
00:18:58,260 --> 00:19:01,260
traces and dashboards and single panes

460
00:19:01,260 --> 00:19:03,020
of glass and all the operational

461
00:19:03,020 --> 00:19:05,580
buzzwords but when you see what you can

462
00:19:05,580 --> 00:19:07,559
do with the structured data from a

463
00:19:07,559 --> 00:19:08,820
developer's point of view that's really

464
00:19:08,820 --> 00:19:11,280
cool and um very happy that you showed

465
00:19:11,280 --> 00:19:12,059
that

466
00:19:12,059 --> 00:19:14,100
yeah I'm saying there there's so much

467
00:19:14,100 --> 00:19:17,640
kind of advancement in the technology

468
00:19:17,640 --> 00:19:19,380
um and there's so much potential to

469
00:19:19,380 --> 00:19:22,320
actually use it uh it's just waiting to

470
00:19:22,320 --> 00:19:25,260
to be kind of harnessed

471
00:19:25,260 --> 00:19:27,299
um but it needs to be made accessible

472
00:19:27,299 --> 00:19:30,000
you know you can't expect developers to

473
00:19:30,000 --> 00:19:31,740
know statistics just to understand if

474
00:19:31,740 --> 00:19:33,780
there's been a performance degree or you

475
00:19:33,780 --> 00:19:36,360
can't expect them to look around in

476
00:19:36,360 --> 00:19:38,039
dashboards for trouble because what's

477
00:19:38,039 --> 00:19:40,140
their interest to do that it has to be

478
00:19:40,140 --> 00:19:41,340
something that's a bit more integrated

479
00:19:41,340 --> 00:19:45,840
with the kind of Dev process in general

480
00:19:45,840 --> 00:19:47,940
awesome stuff is that so I know you

481
00:19:47,940 --> 00:19:49,500
should continue to be great for people

482
00:19:49,500 --> 00:19:53,160
to oh sorry Brian go ahead I'll go ahead

483
00:19:53,160 --> 00:19:54,960
what's a good way for people to reach

484
00:19:54,960 --> 00:19:58,280
you Ronnie yeah so and continuously

485
00:19:58,280 --> 00:20:00,960
feedback.org my contact details are

486
00:20:00,960 --> 00:20:03,419
there as well my Twitter handle and some

487
00:20:03,419 --> 00:20:05,760
other City back so please

488
00:20:05,760 --> 00:20:08,539
um Reach Out

489
00:20:08,880 --> 00:20:11,280
great great minds think alike Micah that

490
00:20:11,280 --> 00:20:13,200
was what I was gonna ask so excellent

491
00:20:13,200 --> 00:20:15,299
stuff froni and uh thank you for helping

492
00:20:15,299 --> 00:20:18,120
us close out devsec on Lightning the

493
00:20:18,120 --> 00:20:20,640
Americas region with a fantastic uh

494
00:20:20,640 --> 00:20:22,679
final presentation

495
00:20:22,679 --> 00:20:27,020
perfect thank you guys thank you

