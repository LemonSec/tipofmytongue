1
00:00:00,120 --> 00:00:01,740
all right we're about ready to get

2
00:00:01,740 --> 00:00:03,480
started for the next one Micah do you

3
00:00:03,480 --> 00:00:05,460
want to do the introduction

4
00:00:05,460 --> 00:00:09,360
sure I would love to because uh not just

5
00:00:09,360 --> 00:00:11,760
because I know Mandy but I do know Mandy

6
00:00:11,760 --> 00:00:14,519
he's awesome so Mandy Hubbard is uh

7
00:00:14,519 --> 00:00:16,500
passionate about software quality good

8
00:00:16,500 --> 00:00:18,900
processes and great documentation

9
00:00:18,900 --> 00:00:20,760
he spent almost 20 years in QA

10
00:00:20,760 --> 00:00:22,260
leadership roles where she focused on

11
00:00:22,260 --> 00:00:24,119
ensuring the best experience for end

12
00:00:24,119 --> 00:00:25,140
users

13
00:00:25,140 --> 00:00:27,359
and when she discovered cicd she was

14
00:00:27,359 --> 00:00:28,859
immediately interested because she saw

15
00:00:28,859 --> 00:00:31,619
it as a way to expand software quality

16
00:00:31,619 --> 00:00:33,239
so

17
00:00:33,239 --> 00:00:34,620
um you know she wanted to create

18
00:00:34,620 --> 00:00:36,420
processes that made it easier for

19
00:00:36,420 --> 00:00:38,399
developers to run tests while also

20
00:00:38,399 --> 00:00:40,079
preventing developers from merging their

21
00:00:40,079 --> 00:00:42,239
code until tests were successful so we

22
00:00:42,239 --> 00:00:44,280
didn't like Mandy us developers we

23
00:00:44,280 --> 00:00:45,660
didn't like Mandy for a while but now we

24
00:00:45,660 --> 00:00:48,300
do now we do we love Mandy now but we

25
00:00:48,300 --> 00:00:50,760
didn't at first but now we do

26
00:00:50,760 --> 00:00:53,520
um but you know uh there was a time when

27
00:00:53,520 --> 00:00:55,440
developers were not too keen on you know

28
00:00:55,440 --> 00:00:57,480
test Suites running if you're old like

29
00:00:57,480 --> 00:00:59,879
me you remember those times

30
00:00:59,879 --> 00:01:03,180
um so I'm really excited to hear Mandy's

31
00:01:03,180 --> 00:01:05,580
session and uh let's bring her in to say

32
00:01:05,580 --> 00:01:06,840
hi

33
00:01:06,840 --> 00:01:09,619
hey Mandy welcome hello

34
00:01:09,619 --> 00:01:11,760
first request is that you unmute

35
00:01:11,760 --> 00:01:13,939
yourself

36
00:01:14,820 --> 00:01:18,199
it's just a requirement

37
00:01:18,439 --> 00:01:20,400
to see you everyone I feel like I'm

38
00:01:20,400 --> 00:01:22,799
amongst friends today

39
00:01:22,799 --> 00:01:25,380
you are for sure

40
00:01:25,380 --> 00:01:27,720
very cool so

41
00:01:27,720 --> 00:01:29,280
um what do you what are you talking

42
00:01:29,280 --> 00:01:30,840
about today I have it right in front of

43
00:01:30,840 --> 00:01:32,220
me but I'd love to hear you just do a

44
00:01:32,220 --> 00:01:35,579
little intro for your talk before we

45
00:01:35,579 --> 00:01:38,100
share our screen up there can you see my

46
00:01:38,100 --> 00:01:39,659
screen

47
00:01:39,659 --> 00:01:41,820
no not yet but we will don't worry okay

48
00:01:41,820 --> 00:01:43,439
cool just uh just chatting a little bit

49
00:01:43,439 --> 00:01:45,780
yeah today I'm going to talk to you

50
00:01:45,780 --> 00:01:48,119
about zero trust security and the zero

51
00:01:48,119 --> 00:01:50,640
trust security model specifically

52
00:01:50,640 --> 00:01:52,320
um how to utilize it to secure your

53
00:01:52,320 --> 00:01:54,780
kubernetes cluster how's that sound oh

54
00:01:54,780 --> 00:01:57,240
neat that sounds awesome

55
00:01:57,240 --> 00:02:00,420
good well uh when we uh we'll we'll take

56
00:02:00,420 --> 00:02:03,240
a step back and we'll add your screen

57
00:02:03,240 --> 00:02:05,880
there and take it away

58
00:02:05,880 --> 00:02:08,459
awesome thank you

59
00:02:08,459 --> 00:02:10,679
all right well thank you everyone for

60
00:02:10,679 --> 00:02:12,480
joining me today to talk about zero

61
00:02:12,480 --> 00:02:14,340
trust security

62
00:02:14,340 --> 00:02:17,160
um Micah did a great job introducing me

63
00:02:17,160 --> 00:02:19,500
but um for anyone just joining I'm Mandy

64
00:02:19,500 --> 00:02:22,319
Hubbard I live here in Austin Texas I've

65
00:02:22,319 --> 00:02:25,140
lived here since uh moving from Tupelo

66
00:02:25,140 --> 00:02:27,000
Mississippi right after high school to

67
00:02:27,000 --> 00:02:29,099
go to UT it's a super great place to

68
00:02:29,099 --> 00:02:32,040
live I have spent most of my career in

69
00:02:32,040 --> 00:02:33,239
QA roles

70
00:02:33,239 --> 00:02:35,700
um I really was focused on creating good

71
00:02:35,700 --> 00:02:38,040
experiences for end users at that time

72
00:02:38,040 --> 00:02:40,800
those were customers of our software

73
00:02:40,800 --> 00:02:42,920
um I pivoted into developer advocacy

74
00:02:42,920 --> 00:02:45,360
kind of taking that same passion for

75
00:02:45,360 --> 00:02:47,459
giving in use is the same experience but

76
00:02:47,459 --> 00:02:50,340
now my end users are developers and I

77
00:02:50,340 --> 00:02:53,459
work to help utilize um their feedback

78
00:02:53,459 --> 00:02:56,340
to create great products to facilitate

79
00:02:56,340 --> 00:02:58,260
good software development

80
00:02:58,260 --> 00:03:00,599
um like Micah said I am pretty much a CI

81
00:03:00,599 --> 00:03:03,780
CD nerd I didn't know it existed

82
00:03:03,780 --> 00:03:06,120
um back in my early QA days and once I

83
00:03:06,120 --> 00:03:09,060
found it I was immediately in love it

84
00:03:09,060 --> 00:03:11,220
was love at first sight uh because

85
00:03:11,220 --> 00:03:14,280
without a solid CI CD pipeline quality

86
00:03:14,280 --> 00:03:16,319
code doesn't really matter because we

87
00:03:16,319 --> 00:03:18,480
can't ensure that the right bits get to

88
00:03:18,480 --> 00:03:21,120
the end user so I'm really interested in

89
00:03:21,120 --> 00:03:25,260
cicd I'm currently a senior software um

90
00:03:25,260 --> 00:03:28,019
senior software developer I'm currently

91
00:03:28,019 --> 00:03:31,159
a senior developer advocate for

92
00:03:31,159 --> 00:03:34,319
architect.io architect is a dependency

93
00:03:34,319 --> 00:03:37,080
aware deployment platform for deploying

94
00:03:37,080 --> 00:03:39,239
your applications to kubernetes to

95
00:03:39,239 --> 00:03:41,159
handle the dependencies and we can

96
00:03:41,159 --> 00:03:43,379
deploy to your external kubernetes

97
00:03:43,379 --> 00:03:46,680
clusters or you can deploy to a free

98
00:03:46,680 --> 00:03:49,019
preview environment in the architect

99
00:03:49,019 --> 00:03:51,000
Community Cloud which is really cool for

100
00:03:51,000 --> 00:03:53,159
being able able to get early feedback

101
00:03:53,159 --> 00:03:55,319
and do iterative development and so on

102
00:03:55,319 --> 00:03:57,360
so if you get a chance I'd love it if

103
00:03:57,360 --> 00:03:59,340
you headed over to architect.io and

104
00:03:59,340 --> 00:04:01,319
signed up for a free account check it

105
00:04:01,319 --> 00:04:03,959
out and um let me know let me know what

106
00:04:03,959 --> 00:04:05,280
you think

107
00:04:05,280 --> 00:04:07,799
um so yeah I like I like developing

108
00:04:07,799 --> 00:04:10,080
software I like quality I like processes

109
00:04:10,080 --> 00:04:13,200
but I do have some more human interest

110
00:04:13,200 --> 00:04:16,440
um I really like cats especially my cat

111
00:04:16,440 --> 00:04:18,839
Theo who will make a visit later if

112
00:04:18,839 --> 00:04:20,699
you're paying attention

113
00:04:20,699 --> 00:04:22,800
um I also really like crystals and

114
00:04:22,800 --> 00:04:26,100
astrology and Kundalini Yoga and a bunch

115
00:04:26,100 --> 00:04:28,199
of kind of woo-woo stuff that I think

116
00:04:28,199 --> 00:04:30,660
rounds out my technical edges pretty

117
00:04:30,660 --> 00:04:32,880
nicely but today we're going to talk

118
00:04:32,880 --> 00:04:36,360
about zero trust security we'll talk

119
00:04:36,360 --> 00:04:38,880
about the zero zero trust security model

120
00:04:38,880 --> 00:04:41,940
which will lead us into talking about

121
00:04:41,940 --> 00:04:44,460
the kubernetes security model so you can

122
00:04:44,460 --> 00:04:47,280
understand how the network works by

123
00:04:47,280 --> 00:04:48,240
default

124
00:04:48,240 --> 00:04:51,060
we'll pivot into a brief introduction of

125
00:04:51,060 --> 00:04:52,740
kubernetes services so you can

126
00:04:52,740 --> 00:04:55,020
understand how to use them to facilitate

127
00:04:55,020 --> 00:04:57,300
zero trust security

128
00:04:57,300 --> 00:04:59,520
um that will lead us into

129
00:04:59,520 --> 00:05:01,680
kubernetes Network policies which is the

130
00:05:01,680 --> 00:05:02,759
Highlight

131
00:05:02,759 --> 00:05:05,040
um of this talk is understanding how to

132
00:05:05,040 --> 00:05:07,440
use those to secure your network and

133
00:05:07,440 --> 00:05:08,699
then we'll walk through a really simple

134
00:05:08,699 --> 00:05:11,340
example so you can get an idea of the

135
00:05:11,340 --> 00:05:13,500
types of policies that you would want to

136
00:05:13,500 --> 00:05:15,840
implement in your old cluster

137
00:05:15,840 --> 00:05:19,740
so let's start with the zero zero trust

138
00:05:19,740 --> 00:05:21,120
security model

139
00:05:21,120 --> 00:05:23,699
because the zero trust network is simply

140
00:05:23,699 --> 00:05:25,979
a network that operates according to the

141
00:05:25,979 --> 00:05:28,199
zero trust security model

142
00:05:28,199 --> 00:05:30,060
um now the zero trust security model has

143
00:05:30,060 --> 00:05:31,680
been around for a long time I think I

144
00:05:31,680 --> 00:05:35,220
initially saw 2005 but when I continued

145
00:05:35,220 --> 00:05:37,199
doing some digging

146
00:05:37,199 --> 00:05:40,199
um it's actually first was first uh

147
00:05:40,199 --> 00:05:42,300
established in the early 90s if you can

148
00:05:42,300 --> 00:05:46,320
believe that but it's really a Hot Topic

149
00:05:46,320 --> 00:05:48,419
in software development these days in

150
00:05:48,419 --> 00:05:50,940
fact in January of this year the White

151
00:05:50,940 --> 00:05:53,220
House actually issued a memorandum

152
00:05:53,220 --> 00:05:55,440
specifying its own zero trust security

153
00:05:55,440 --> 00:05:58,139
architecture for any federal

154
00:05:58,139 --> 00:06:01,020
applications and it stated that it's

155
00:06:01,020 --> 00:06:03,720
going to begin requiring agencies to

156
00:06:03,720 --> 00:06:05,759
meet certain cyber security standards by

157
00:06:05,759 --> 00:06:08,639
the end of fiscal year 2024 so zero

158
00:06:08,639 --> 00:06:12,120
trust security is really at its peak

159
00:06:12,120 --> 00:06:17,240
but what is zero trust security it is

160
00:06:17,699 --> 00:06:20,880
thank you it's a philosophy a model an

161
00:06:20,880 --> 00:06:23,880
ideal and a goal it's not a prescriptive

162
00:06:23,880 --> 00:06:27,120
set of actions but it's more of a North

163
00:06:27,120 --> 00:06:29,160
star to aim for in setting up your

164
00:06:29,160 --> 00:06:30,900
security policies

165
00:06:30,900 --> 00:06:33,000
um it could be implemented in various

166
00:06:33,000 --> 00:06:35,100
ways using various tools but at its

167
00:06:35,100 --> 00:06:38,520
heart it is a trust no one approach to

168
00:06:38,520 --> 00:06:39,840
security

169
00:06:39,840 --> 00:06:43,020
and one of the main tenets of the zero

170
00:06:43,020 --> 00:06:46,139
trust model is that there is no safe

171
00:06:46,139 --> 00:06:48,539
network security uh no save Network

172
00:06:48,539 --> 00:06:51,479
perimeter you know back in the day when

173
00:06:51,479 --> 00:06:54,000
we talked about networks we to use the

174
00:06:54,000 --> 00:06:56,400
old castle and mode analogy where remote

175
00:06:56,400 --> 00:07:00,720
is your VPN and if you could get across

176
00:07:00,720 --> 00:07:03,000
the moat then you had the keys to the

177
00:07:03,000 --> 00:07:05,220
castle and as long as the drawbridge was

178
00:07:05,220 --> 00:07:07,259
raised you were safe because you had

179
00:07:07,259 --> 00:07:10,139
remote or your VPN well with zero trust

180
00:07:10,139 --> 00:07:12,780
security there really is no network

181
00:07:12,780 --> 00:07:15,060
perimeter that is safe if you think

182
00:07:15,060 --> 00:07:17,580
about it with cloud computing you may

183
00:07:17,580 --> 00:07:19,800
have resources in different Cloud

184
00:07:19,800 --> 00:07:21,720
environments hosted by different vendors

185
00:07:21,720 --> 00:07:23,520
some of your resources may still be

186
00:07:23,520 --> 00:07:25,440
on-prem and they all need to communicate

187
00:07:25,440 --> 00:07:27,360
in a safe way so you really have a lot

188
00:07:27,360 --> 00:07:29,280
less control over your network perimeter

189
00:07:29,280 --> 00:07:33,599
than you did back with you know the

190
00:07:33,599 --> 00:07:35,039
security models that we were used to

191
00:07:35,039 --> 00:07:37,020
before Cloud came into the picture

192
00:07:37,020 --> 00:07:39,240
and um but we're going to stick with the

193
00:07:39,240 --> 00:07:42,780
CL the castle emote uh analogy to

194
00:07:42,780 --> 00:07:44,699
explain zero trust security a little bit

195
00:07:44,699 --> 00:07:45,840
further

196
00:07:45,840 --> 00:07:48,060
um with zero security imagine that you

197
00:07:48,060 --> 00:07:50,759
do manage to get across the mo whatever

198
00:07:50,759 --> 00:07:53,039
security mechanisms are in place all

199
00:07:53,039 --> 00:07:56,699
you'll find is a locked castle with a

200
00:07:56,699 --> 00:07:58,380
huge iron door that you can penetrate

201
00:07:58,380 --> 00:08:00,720
and if you were to penetrate it you

202
00:08:00,720 --> 00:08:02,099
would simply find a bunch of other

203
00:08:02,099 --> 00:08:05,039
locked doors and the best stuff would be

204
00:08:05,039 --> 00:08:06,780
kept behind doors that you didn't even

205
00:08:06,780 --> 00:08:08,280
know about you know a bunch of secret

206
00:08:08,280 --> 00:08:09,840
doors

207
00:08:09,840 --> 00:08:12,720
um because uh a big tenet of zero trust

208
00:08:12,720 --> 00:08:15,419
security is unlisted IP addresses and

209
00:08:15,419 --> 00:08:17,880
undiscoverable services I.E these doors

210
00:08:17,880 --> 00:08:19,500
you don't know about

211
00:08:19,500 --> 00:08:22,099
um the less we advertise our resources

212
00:08:22,099 --> 00:08:26,039
uh the less likely an attacker is to

213
00:08:26,039 --> 00:08:28,740
find a way into the network

214
00:08:28,740 --> 00:08:30,479
um you know on the same note like you

215
00:08:30,479 --> 00:08:33,299
don't want to advertise your resources

216
00:08:33,299 --> 00:08:34,860
that hold your private data if an

217
00:08:34,860 --> 00:08:36,360
attacker doesn't know it exists then

218
00:08:36,360 --> 00:08:39,240
they can't really go after it so that's

219
00:08:39,240 --> 00:08:41,520
why we lock things down and only

220
00:08:41,520 --> 00:08:43,320
services that need to know about other

221
00:08:43,320 --> 00:08:46,140
services have that information it's not

222
00:08:46,140 --> 00:08:48,899
just publicly available

223
00:08:48,899 --> 00:08:51,360
another important concept with zero

224
00:08:51,360 --> 00:08:55,080
trust networking is that resources that

225
00:08:55,080 --> 00:08:56,519
need to communicate with each other will

226
00:08:56,519 --> 00:08:58,620
need to reconnect and re-verify

227
00:08:58,620 --> 00:09:00,899
frequently so it's not enough just to

228
00:09:00,899 --> 00:09:02,820
create an initial connection and then

229
00:09:02,820 --> 00:09:05,040
run indefinitely

230
00:09:05,040 --> 00:09:07,500
um though there will be periodic read

231
00:09:07,500 --> 00:09:11,040
reconnected re-verify efforts so that if

232
00:09:11,040 --> 00:09:12,899
someone does infiltrate a particular

233
00:09:12,899 --> 00:09:15,300
resource they don't automatically get

234
00:09:15,300 --> 00:09:17,519
access to every other resource that it

235
00:09:17,519 --> 00:09:20,279
has access to because there will be a

236
00:09:20,279 --> 00:09:22,140
reconnect and we verify process that an

237
00:09:22,140 --> 00:09:26,720
attacker won't be able to get through

238
00:09:26,760 --> 00:09:30,360
um so zero to security really focuses on

239
00:09:30,360 --> 00:09:33,360
the uh principle of least privilege

240
00:09:33,360 --> 00:09:35,040
which just simply means that your

241
00:09:35,040 --> 00:09:38,100
resources should have the absolute Bare

242
00:09:38,100 --> 00:09:40,140
Bones minimum privilege information is

243
00:09:40,140 --> 00:09:42,540
necessary to do their jobs there was a

244
00:09:42,540 --> 00:09:45,300
time when we gave resources access to

245
00:09:45,300 --> 00:09:47,279
all of our resource all other resources

246
00:09:47,279 --> 00:09:49,080
just in case they needed it it really

247
00:09:49,080 --> 00:09:51,420
made development easy because you know

248
00:09:51,420 --> 00:09:53,279
he needed to consume resources they were

249
00:09:53,279 --> 00:09:55,320
available to you to work with and you

250
00:09:55,320 --> 00:09:56,459
didn't have to set up a bunch of

251
00:09:56,459 --> 00:09:58,320
security protocols during your

252
00:09:58,320 --> 00:10:00,540
development process but once you get to

253
00:10:00,540 --> 00:10:01,680
production

254
00:10:01,680 --> 00:10:04,320
each of your resources needs to be

255
00:10:04,320 --> 00:10:07,680
locked down and you take a real um you

256
00:10:07,680 --> 00:10:09,060
know intentional approach to which

257
00:10:09,060 --> 00:10:10,260
permissions that you give those

258
00:10:10,260 --> 00:10:12,720
resources again so that if an attacker

259
00:10:12,720 --> 00:10:14,279
does gain access

260
00:10:14,279 --> 00:10:16,740
they don't have the ability to move

261
00:10:16,740 --> 00:10:18,360
laterally through your network and

262
00:10:18,360 --> 00:10:21,959
compromise all your resources

263
00:10:21,959 --> 00:10:24,240
and then finally a really big tenant of

264
00:10:24,240 --> 00:10:27,180
zero zero trust security is that you

265
00:10:27,180 --> 00:10:29,399
should transmit your security Telemetry

266
00:10:29,399 --> 00:10:32,339
data to a logging system so that you

267
00:10:32,339 --> 00:10:34,620
have it available in the event of a

268
00:10:34,620 --> 00:10:37,380
breach it's first of all going to be a

269
00:10:37,380 --> 00:10:39,180
way you can identify that a breach

270
00:10:39,180 --> 00:10:42,300
occurred and then it will also allow you

271
00:10:42,300 --> 00:10:45,600
to quickly find the root cause of the of

272
00:10:45,600 --> 00:10:47,519
the breach find that vulnerability and

273
00:10:47,519 --> 00:10:49,860
shut it down quickly without this

274
00:10:49,860 --> 00:10:52,019
Telemetry data you may not know that a

275
00:10:52,019 --> 00:10:53,940
breach has occurred until you know

276
00:10:53,940 --> 00:10:55,980
there's a much larger consequence from

277
00:10:55,980 --> 00:10:57,420
the attacker down the line so it's

278
00:10:57,420 --> 00:10:58,800
really important that you log your

279
00:10:58,800 --> 00:11:01,560
security Telemetry and use that

280
00:11:01,560 --> 00:11:03,959
Telemetry regularly to ensure that your

281
00:11:03,959 --> 00:11:06,480
network is secure that there aren't

282
00:11:06,480 --> 00:11:08,339
unknown attackers

283
00:11:08,339 --> 00:11:10,260
right so that's the zero test security

284
00:11:10,260 --> 00:11:13,079
model that we use when we Implement a

285
00:11:13,079 --> 00:11:15,300
zero trust security network

286
00:11:15,300 --> 00:11:18,360
so now let's step into a quick talk

287
00:11:18,360 --> 00:11:21,300
about the kubernetes network model

288
00:11:21,300 --> 00:11:24,000
um once you understand how networking is

289
00:11:24,000 --> 00:11:26,399
set up in kubernetes by default you can

290
00:11:26,399 --> 00:11:27,899
understand why it's so important to be

291
00:11:27,899 --> 00:11:30,540
intentional about your network security

292
00:11:30,540 --> 00:11:33,240
um first and foremost all containers in

293
00:11:33,240 --> 00:11:35,519
the kubernetes cluster can communicate

294
00:11:35,519 --> 00:11:38,339
with each other even across nodes as you

295
00:11:38,339 --> 00:11:40,140
know your cluster is going to consist of

296
00:11:40,140 --> 00:11:43,380
various nodes and on those nodes you

297
00:11:43,380 --> 00:11:45,920
have pods which then run your containers

298
00:11:45,920 --> 00:11:51,060
and without an explicit Network policy

299
00:11:51,060 --> 00:11:53,760
on your kubernetes cluster all of those

300
00:11:53,760 --> 00:11:54,899
pods are going to be able to speak with

301
00:11:54,899 --> 00:11:56,459
one another all the containers are going

302
00:11:56,459 --> 00:11:58,440
to be able to speak with one another and

303
00:11:58,440 --> 00:12:00,360
they're going to be accessible by the

304
00:12:00,360 --> 00:12:02,279
outside world

305
00:12:02,279 --> 00:12:04,740
so all connections to and from your pods

306
00:12:04,740 --> 00:12:06,720
are wide open to all traffic which is

307
00:12:06,720 --> 00:12:08,820
definitely not a secure way to run an

308
00:12:08,820 --> 00:12:10,320
application

309
00:12:10,320 --> 00:12:13,620
Additionally the way that you would

310
00:12:13,620 --> 00:12:15,779
communicate with those pods and

311
00:12:15,779 --> 00:12:17,399
containers and the way that they could

312
00:12:17,399 --> 00:12:20,640
communicate with one another is with an

313
00:12:20,640 --> 00:12:23,459
external IP address but since pods by

314
00:12:23,459 --> 00:12:25,560
their very nature or volatile that's not

315
00:12:25,560 --> 00:12:29,279
a stable way to um to access resources

316
00:12:29,279 --> 00:12:32,519
in your application stack so that leads

317
00:12:32,519 --> 00:12:34,019
us into

318
00:12:34,019 --> 00:12:37,380
a quick chat about kubernetes services

319
00:12:37,380 --> 00:12:39,720
so kubernetes service

320
00:12:39,720 --> 00:12:42,720
is an abstraction that represents a

321
00:12:42,720 --> 00:12:45,959
logical set of PODS whereas the external

322
00:12:45,959 --> 00:12:49,019
IP address is tied to a particular

323
00:12:49,019 --> 00:12:51,839
instance of a pod at runtime that's

324
00:12:51,839 --> 00:12:54,839
going to change a service is kind of

325
00:12:54,839 --> 00:12:57,240
like a pointer to whatever pod or pods

326
00:12:57,240 --> 00:13:00,240
happen to be running at runtime

327
00:13:00,240 --> 00:13:02,339
and this is going to act as a single

328
00:13:02,339 --> 00:13:04,680
entity to the outside world and what's

329
00:13:04,680 --> 00:13:06,540
also cool about using Services is that

330
00:13:06,540 --> 00:13:08,760
it acts as a single entity to your

331
00:13:08,760 --> 00:13:11,459
developers so developers typically

332
00:13:11,459 --> 00:13:12,600
aren't

333
00:13:12,600 --> 00:13:14,820
um as enmeshed in you know Network

334
00:13:14,820 --> 00:13:16,740
protocols and understanding low-level

335
00:13:16,740 --> 00:13:19,980
networking Concepts just by interest

336
00:13:19,980 --> 00:13:22,079
um but when you use a kubernetes service

337
00:13:22,079 --> 00:13:25,019
you can really distill your application

338
00:13:25,019 --> 00:13:27,420
components and the way that they run in

339
00:13:27,420 --> 00:13:30,300
your kubernetes cluster down to a set of

340
00:13:30,300 --> 00:13:32,820
boxes that really look very similar to

341
00:13:32,820 --> 00:13:35,519
your architecture diagram and then

342
00:13:35,519 --> 00:13:38,040
developers can look at the set of

343
00:13:38,040 --> 00:13:41,220
services and very easily know what sort

344
00:13:41,220 --> 00:13:42,779
of communication to set up between those

345
00:13:42,779 --> 00:13:44,160
because that's the way they architected

346
00:13:44,160 --> 00:13:45,779
the application

347
00:13:45,779 --> 00:13:48,120
um so with the kubernetes service you've

348
00:13:48,120 --> 00:13:50,700
got a reliable point of entry from for

349
00:13:50,700 --> 00:13:52,980
the outside world and also between

350
00:13:52,980 --> 00:13:55,680
Services running in your cluster

351
00:13:55,680 --> 00:13:57,660
and then they're going to live until

352
00:13:57,660 --> 00:14:00,300
they're explicitly destroyed so even if

353
00:14:00,300 --> 00:14:02,639
your pods aren't running you're still

354
00:14:02,639 --> 00:14:04,920
going to have uh the notion of a service

355
00:14:04,920 --> 00:14:07,079
until you explicitly destroy that

356
00:14:07,079 --> 00:14:08,339
service

357
00:14:08,339 --> 00:14:10,019
um and so that'll stay alive and you can

358
00:14:10,019 --> 00:14:12,779
bring in pods as you wish but that

359
00:14:12,779 --> 00:14:16,160
service is going to be a constant

360
00:14:16,320 --> 00:14:19,440
so we've talked about the zero trust

361
00:14:19,440 --> 00:14:20,700
security model

362
00:14:20,700 --> 00:14:22,620
and a little bit about

363
00:14:22,620 --> 00:14:26,399
kubernetes Network that's set up by

364
00:14:26,399 --> 00:14:28,139
default when you have a cluster a new

365
00:14:28,139 --> 00:14:30,120
cluster and then we touched a little bit

366
00:14:30,120 --> 00:14:33,420
on kubernetes Services what the benefits

367
00:14:33,420 --> 00:14:35,639
are and why you would want to use them

368
00:14:35,639 --> 00:14:38,399
so now let's jump into

369
00:14:38,399 --> 00:14:40,560
kubernetes Network policies

370
00:14:40,560 --> 00:14:42,720
so kubernetes Network policies are how

371
00:14:42,720 --> 00:14:44,760
we're actually going to specify the

372
00:14:44,760 --> 00:14:46,920
connectivity between the different

373
00:14:46,920 --> 00:14:48,720
Services specified in your application

374
00:14:48,720 --> 00:14:49,680
stack

375
00:14:49,680 --> 00:14:52,019
you're going to use kubernetes Network

376
00:14:52,019 --> 00:14:54,959
policies to specify your Ingress and

377
00:14:54,959 --> 00:14:58,079
egress rules between your services and

378
00:14:58,079 --> 00:15:00,120
the outside world and between the

379
00:15:00,120 --> 00:15:01,920
individual services that comprise your

380
00:15:01,920 --> 00:15:03,600
application stack

381
00:15:03,600 --> 00:15:05,100
um as I'm sure you're familiar with

382
00:15:05,100 --> 00:15:07,860
Ingress refers to traffic coming into a

383
00:15:07,860 --> 00:15:10,260
pod and egress is the traffic going

384
00:15:10,260 --> 00:15:12,959
outbound from the pi now you can

385
00:15:12,959 --> 00:15:15,600
certainly configure your egress rules

386
00:15:15,600 --> 00:15:18,000
very granularly as well

387
00:15:18,000 --> 00:15:20,459
um it's not as necessary unless you're

388
00:15:20,459 --> 00:15:23,339
running a very tight application like

389
00:15:23,339 --> 00:15:25,560
Financial systems are something with

390
00:15:25,560 --> 00:15:27,600
very sensitive data for the purpose of

391
00:15:27,600 --> 00:15:28,920
this conversation we're going to focus

392
00:15:28,920 --> 00:15:31,920
on Ingress but know that you do also use

393
00:15:31,920 --> 00:15:34,260
kubernetes Network policies to configure

394
00:15:34,260 --> 00:15:37,019
your egress rules and also that they

395
00:15:37,019 --> 00:15:39,060
must be configured separately for each

396
00:15:39,060 --> 00:15:41,760
service so in other words it's not a

397
00:15:41,760 --> 00:15:44,279
bi-directional communication you have to

398
00:15:44,279 --> 00:15:47,220
specify what traffic is allowed into a

399
00:15:47,220 --> 00:15:49,320
particular service as well as what

400
00:15:49,320 --> 00:15:52,019
traffic is allowed out from a particular

401
00:15:52,019 --> 00:15:54,240
service and there are multiple ways to

402
00:15:54,240 --> 00:15:57,120
specify which traffic is allowed to and

403
00:15:57,120 --> 00:15:58,560
from

404
00:15:58,560 --> 00:16:00,420
um here are a couple

405
00:16:00,420 --> 00:16:02,060
um here on the slide you can use

406
00:16:02,060 --> 00:16:05,399
namespaces IP blocks um you can use

407
00:16:05,399 --> 00:16:07,139
labels

408
00:16:07,139 --> 00:16:09,959
um you can even lock it down by protocol

409
00:16:09,959 --> 00:16:12,899
and Port so that even if the traffic is

410
00:16:12,899 --> 00:16:14,699
coming from a trusted resource if it's

411
00:16:14,699 --> 00:16:16,740
coming on the wrong port or it's their

412
00:16:16,740 --> 00:16:18,839
own protocol it's not something that

413
00:16:18,839 --> 00:16:21,240
your you know service is expecting

414
00:16:21,240 --> 00:16:22,680
there's no reason to receive that

415
00:16:22,680 --> 00:16:24,600
traffic and it would deny access to that

416
00:16:24,600 --> 00:16:25,980
traffic so you get really granular

417
00:16:25,980 --> 00:16:29,880
control over what traffic is allowed in

418
00:16:29,880 --> 00:16:33,180
and out of the pods in your kubernetes

419
00:16:33,180 --> 00:16:36,839
cluster now um the cool thing is that

420
00:16:36,839 --> 00:16:39,060
the way you set up kubernetes Network

421
00:16:39,060 --> 00:16:41,940
policies is by specifying them in a yaml

422
00:16:41,940 --> 00:16:45,240
file again this makes networking network

423
00:16:45,240 --> 00:16:46,920
security so much more accessible to

424
00:16:46,920 --> 00:16:49,079
developers because developers know yaml

425
00:16:49,079 --> 00:16:51,300
that's a familiar language as long as

426
00:16:51,300 --> 00:16:53,160
you you know take a look at the spec and

427
00:16:53,160 --> 00:16:55,079
see what's required and a developer can

428
00:16:55,079 --> 00:16:58,440
very easily put together a kubernetes

429
00:16:58,440 --> 00:17:00,560
network policy manifest using yaml

430
00:17:00,560 --> 00:17:03,620
versus having to understand low-level

431
00:17:03,620 --> 00:17:07,260
networking protocols and stuff like that

432
00:17:07,260 --> 00:17:10,439
so once you have created this yaml file

433
00:17:10,439 --> 00:17:12,240
you'll apply it to your kubernetes

434
00:17:12,240 --> 00:17:15,540
cluster using the kubernetes API

435
00:17:15,540 --> 00:17:17,760
um so you may think I configured my

436
00:17:17,760 --> 00:17:19,619
Ingress and egress rules I've locked it

437
00:17:19,619 --> 00:17:22,079
down by protocol and port and really

438
00:17:22,079 --> 00:17:24,059
satisfied with it I'm ready to go I've

439
00:17:24,059 --> 00:17:26,160
applied it to my kubernetes cluster

440
00:17:26,160 --> 00:17:27,839
but you might be surprised to learn that

441
00:17:27,839 --> 00:17:29,280
if you apply it to your kubernetes

442
00:17:29,280 --> 00:17:31,080
cluster it's not going to do anything at

443
00:17:31,080 --> 00:17:33,500
all until you

444
00:17:33,500 --> 00:17:37,080
enforce it using a network policy plugin

445
00:17:37,080 --> 00:17:38,820
so a network policy plugin is

446
00:17:38,820 --> 00:17:40,980
responsible for actually enforcing those

447
00:17:40,980 --> 00:17:42,960
rules that you applied to your

448
00:17:42,960 --> 00:17:45,480
kubernetes cluster via your manifest

449
00:17:45,480 --> 00:17:48,480
file and typically Network policy

450
00:17:48,480 --> 00:17:50,820
plugins conform to The Container network

451
00:17:50,820 --> 00:17:53,880
interface or cni spec and what this

452
00:17:53,880 --> 00:17:56,760
allows is um well first of all cni

453
00:17:56,760 --> 00:17:59,760
provides a a bunch of libraries that

454
00:17:59,760 --> 00:18:02,820
facilitate development of the plugins

455
00:18:02,820 --> 00:18:05,280
um so that makes it able to be very

456
00:18:05,280 --> 00:18:09,900
feature-rich but also cni really aims to

457
00:18:09,900 --> 00:18:12,660
make container networking plugable if

458
00:18:12,660 --> 00:18:15,179
you use a plug-in that conforms to the

459
00:18:15,179 --> 00:18:18,419
cni spec it's going to work not only in

460
00:18:18,419 --> 00:18:20,520
your kubernetes cluster but if you were

461
00:18:20,520 --> 00:18:24,679
to move to say Amazon ECS or um

462
00:18:24,679 --> 00:18:27,240
openshift or Cloud Foundry or some other

463
00:18:27,240 --> 00:18:30,000
container runtime environment these

464
00:18:30,000 --> 00:18:32,160
plugins are going to support most

465
00:18:32,160 --> 00:18:33,840
well-known container runtime

466
00:18:33,840 --> 00:18:35,580
environments as well which prevents you

467
00:18:35,580 --> 00:18:37,740
from being you know locked into it a

468
00:18:37,740 --> 00:18:39,900
single runtime environment

469
00:18:39,900 --> 00:18:42,900
um so plugins are installed on your

470
00:18:42,900 --> 00:18:46,260
cluster and you'll want to look at what

471
00:18:46,260 --> 00:18:48,120
plugins come install by default at

472
00:18:48,120 --> 00:18:50,940
architect we use two plugins called

473
00:18:50,940 --> 00:18:53,640
Calico and psyllium and we found that

474
00:18:53,640 --> 00:18:55,799
for most of the public Cloud providers

475
00:18:55,799 --> 00:18:58,020
those are already available but there's

476
00:18:58,020 --> 00:19:00,539
some cases where you may have some other

477
00:19:00,539 --> 00:19:03,179
default plug-in installed that year on

478
00:19:03,179 --> 00:19:04,500
your cluster that you'll need to

479
00:19:04,500 --> 00:19:05,940
actually uninstall before you can

480
00:19:05,940 --> 00:19:07,799
successfully install these and of course

481
00:19:07,799 --> 00:19:10,260
you'll want to reference the spec for

482
00:19:10,260 --> 00:19:13,260
the particular plugins to you know set

483
00:19:13,260 --> 00:19:14,820
up your gamble file to take advantage of

484
00:19:14,820 --> 00:19:16,919
their features and you'll likely want to

485
00:19:16,919 --> 00:19:19,200
use more than one plug-in because they

486
00:19:19,200 --> 00:19:21,240
each plugin kind of has

487
00:19:21,240 --> 00:19:24,240
um some specialty that it um that it

488
00:19:24,240 --> 00:19:26,280
offers and so you can use a combination

489
00:19:26,280 --> 00:19:28,620
of plugins to get a really rich feature

490
00:19:28,620 --> 00:19:31,440
set for configuring Network policies

491
00:19:31,440 --> 00:19:34,080
okay so now we've talked about

492
00:19:34,080 --> 00:19:36,240
kubernetes Network policies hopefully

493
00:19:36,240 --> 00:19:39,900
you have an idea of how to specify them

494
00:19:39,900 --> 00:19:42,960
and have an understanding of you know

495
00:19:42,960 --> 00:19:44,880
the types of network policies you could

496
00:19:44,880 --> 00:19:47,460
use to enforce those I'm sorry the

497
00:19:47,460 --> 00:19:49,080
network plugins you could use to enforce

498
00:19:49,080 --> 00:19:50,520
those policies

499
00:19:50,520 --> 00:19:53,120
um let's just take a look at a simple

500
00:19:53,120 --> 00:19:57,240
kubernetes Network policy Manifest this

501
00:19:57,240 --> 00:20:00,240
manifest is used to deny all Ingress

502
00:20:00,240 --> 00:20:04,260
Ingress traffic to all pods it's um you

503
00:20:04,260 --> 00:20:06,120
know simple yaml probably looks familiar

504
00:20:06,120 --> 00:20:08,340
to all of you and then

505
00:20:08,340 --> 00:20:10,200
um this one is a little bit more

506
00:20:10,200 --> 00:20:13,020
involved this one breaks it down first

507
00:20:13,020 --> 00:20:15,260
of all it's got Ingress and egress rules

508
00:20:15,260 --> 00:20:20,460
and it specifies an IP block it uses

509
00:20:20,460 --> 00:20:22,500
protocols and ports

510
00:20:22,500 --> 00:20:26,039
um to give a real granular approach to

511
00:20:26,039 --> 00:20:28,320
network security

512
00:20:28,320 --> 00:20:30,360
so that's what it looks like

513
00:20:30,360 --> 00:20:32,340
um that's how that's the meat of

514
00:20:32,340 --> 00:20:34,140
kubernetes network policy right there in

515
00:20:34,140 --> 00:20:35,220
that file

516
00:20:35,220 --> 00:20:38,400
so now that you have an idea of you know

517
00:20:38,400 --> 00:20:39,780
what's going on on your network by

518
00:20:39,780 --> 00:20:43,140
default what you need to do to secure it

519
00:20:43,140 --> 00:20:45,419
um you know about policies and plugins

520
00:20:45,419 --> 00:20:47,520
and a little bit about services to help

521
00:20:47,520 --> 00:20:49,559
facilitate this

522
00:20:49,559 --> 00:20:51,299
you're probably wondering but what

523
00:20:51,299 --> 00:20:53,460
policies do I specify and that's a

524
00:20:53,460 --> 00:20:55,799
really good question but like most

525
00:20:55,799 --> 00:20:57,600
questions in software development the

526
00:20:57,600 --> 00:21:00,059
answer is it depends it obviously is

527
00:21:00,059 --> 00:21:01,860
going to depend on your application

528
00:21:01,860 --> 00:21:04,020
stack what sort of communication you

529
00:21:04,020 --> 00:21:06,299
need between resources what sort of

530
00:21:06,299 --> 00:21:08,700
communication you're going to allow from

531
00:21:08,700 --> 00:21:11,039
the external environment but for the

532
00:21:11,039 --> 00:21:13,919
sake of this conversation let's take a

533
00:21:13,919 --> 00:21:16,380
really simple application stack I'm sure

534
00:21:16,380 --> 00:21:17,760
we're all familiar with applications

535
00:21:17,760 --> 00:21:20,820
that consist of a front-end an API in a

536
00:21:20,820 --> 00:21:22,320
database and I want you to take a minute

537
00:21:22,320 --> 00:21:24,539
and look at this diagram and think of

538
00:21:24,539 --> 00:21:26,160
these as

539
00:21:26,160 --> 00:21:28,020
um these are all Individual kubernetes

540
00:21:28,020 --> 00:21:29,760
Services obviously not the internet

541
00:21:29,760 --> 00:21:32,100
that's our outside world but front-end

542
00:21:32,100 --> 00:21:34,260
API and database represent kubernetes

543
00:21:34,260 --> 00:21:37,320
services for the components in our

544
00:21:37,320 --> 00:21:40,919
application stack and this represents

545
00:21:40,919 --> 00:21:43,260
what connectivity looks like in a

546
00:21:43,260 --> 00:21:45,659
kubernetes network cluster by default

547
00:21:45,659 --> 00:21:48,659
and before you apply any policies you've

548
00:21:48,659 --> 00:21:49,799
got complete bi-directional

549
00:21:49,799 --> 00:21:52,740
communication with external users and

550
00:21:52,740 --> 00:21:54,900
the individual services within your

551
00:21:54,900 --> 00:21:56,820
application stack and you have full

552
00:21:56,820 --> 00:21:59,100
bi-directional communication between The

553
00:21:59,100 --> 00:22:01,440
Individual Services in your application

554
00:22:01,440 --> 00:22:02,580
stack

555
00:22:02,580 --> 00:22:04,440
so the first policy you would want to

556
00:22:04,440 --> 00:22:07,799
apply is a deny all Ingress policy which

557
00:22:07,799 --> 00:22:10,980
we saw manifest for in an earlier slide

558
00:22:10,980 --> 00:22:12,960
first thing you do is you just lock

559
00:22:12,960 --> 00:22:15,679
everything down tight and then you begin

560
00:22:15,679 --> 00:22:19,679
opening up access as needed

561
00:22:19,679 --> 00:22:23,100
and the next thing that we recommend is

562
00:22:23,100 --> 00:22:26,700
that you use an API Gateway an API

563
00:22:26,700 --> 00:22:28,860
Gateway is going to serve as the entry

564
00:22:28,860 --> 00:22:31,679
point into your applications tag it will

565
00:22:31,679 --> 00:22:33,860
intercept traffic from the outside world

566
00:22:33,860 --> 00:22:36,120
perform some authentication and

567
00:22:36,120 --> 00:22:38,039
authorization which is out of scope for

568
00:22:38,039 --> 00:22:39,900
this conversation but obviously a huge

569
00:22:39,900 --> 00:22:42,299
part of network security and then it

570
00:22:42,299 --> 00:22:44,820
will decide where to send the traffic so

571
00:22:44,820 --> 00:22:46,860
the first uh or the next rule you'll

572
00:22:46,860 --> 00:22:50,100
need to add to your network policies is

573
00:22:50,100 --> 00:22:53,039
um a rule that allows Ingress into your

574
00:22:53,039 --> 00:22:56,100
API Gateway from the outside Network or

575
00:22:56,100 --> 00:22:57,120
the internet

576
00:22:57,120 --> 00:22:59,280
and then that Gateway is going to send

577
00:22:59,280 --> 00:23:01,020
traffic into your application stack

578
00:23:01,020 --> 00:23:03,480
that's obviously going to be your

579
00:23:03,480 --> 00:23:05,520
front-end application

580
00:23:05,520 --> 00:23:07,860
um and so there'll be an Ingress rule

581
00:23:07,860 --> 00:23:10,740
that allows traffic to flow into your

582
00:23:10,740 --> 00:23:12,720
front-end application your front-end

583
00:23:12,720 --> 00:23:15,960
application will then need to send

584
00:23:15,960 --> 00:23:19,020
requests to your API and the API will

585
00:23:19,020 --> 00:23:21,559
need to communicate with your database

586
00:23:21,559 --> 00:23:26,280
to get data from and send data to uh

587
00:23:26,280 --> 00:23:28,500
back in database for storage

588
00:23:28,500 --> 00:23:30,000
so

589
00:23:30,000 --> 00:23:33,059
um this is a diagram of a really simple

590
00:23:33,059 --> 00:23:35,520
application stack and the network

591
00:23:35,520 --> 00:23:37,620
connectivity you would want to set up

592
00:23:37,620 --> 00:23:39,960
with kubernetes network policies

593
00:23:39,960 --> 00:23:42,480
um so what you you don't see is any

594
00:23:42,480 --> 00:23:44,760
communication with the individual

595
00:23:44,760 --> 00:23:47,039
services and the outside Network or any

596
00:23:47,039 --> 00:23:49,380
communication between say your front-end

597
00:23:49,380 --> 00:23:51,539
and your database or your database and

598
00:23:51,539 --> 00:23:53,100
your API Gateway because it's not

599
00:23:53,100 --> 00:23:55,380
necessary so if someone were to

600
00:23:55,380 --> 00:23:57,780
infiltrate

601
00:23:57,780 --> 00:24:00,720
um your API they could only send traffic

602
00:24:00,720 --> 00:24:02,580
to your database they couldn't send

603
00:24:02,580 --> 00:24:04,500
traffic to your front end and vice versa

604
00:24:04,500 --> 00:24:06,900
so this is an example of following that

605
00:24:06,900 --> 00:24:08,880
privilege that principle of least

606
00:24:08,880 --> 00:24:11,520
privilege where we give the bare minimum

607
00:24:11,520 --> 00:24:14,580
access necessary to perform the job here

608
00:24:14,580 --> 00:24:16,799
um and this is something that's going to

609
00:24:16,799 --> 00:24:18,240
look really familiar to your developers

610
00:24:18,240 --> 00:24:19,860
because when they plan their

611
00:24:19,860 --> 00:24:21,480
applications it's a bunch of boxes and

612
00:24:21,480 --> 00:24:22,919
arrows and when they plan their network

613
00:24:22,919 --> 00:24:24,659
security using kubernetes network

614
00:24:24,659 --> 00:24:26,700
policies it's a bunch of boxes and

615
00:24:26,700 --> 00:24:29,520
arrows it's really accessible and it

616
00:24:29,520 --> 00:24:31,980
allows you to start thinking about your

617
00:24:31,980 --> 00:24:34,020
network security very early on in the

618
00:24:34,020 --> 00:24:36,240
development life cycle

619
00:24:36,240 --> 00:24:39,900
all right so that's it we did it

620
00:24:39,900 --> 00:24:42,600
um we've briefly touched on the zero

621
00:24:42,600 --> 00:24:45,480
trust security model we chatted about

622
00:24:45,480 --> 00:24:47,720
the network the kubernetes network model

623
00:24:47,720 --> 00:24:50,880
we spoke about kubernetes services and

624
00:24:50,880 --> 00:24:53,460
then we talked about kubernetes Network

625
00:24:53,460 --> 00:24:55,799
policies that's all you need to know to

626
00:24:55,799 --> 00:24:57,480
get started with zero trust networking

627
00:24:57,480 --> 00:24:59,880
obviously that's absolutely unsure zero

628
00:24:59,880 --> 00:25:01,559
trust networking has a lot of components

629
00:25:01,559 --> 00:25:04,080
and we focus on this small subset of

630
00:25:04,080 --> 00:25:05,940
kubernetes network policies and what I

631
00:25:05,940 --> 00:25:07,260
hope is that this has piqued your

632
00:25:07,260 --> 00:25:09,299
interest and giving you some really

633
00:25:09,299 --> 00:25:12,240
accessible information to go and start

634
00:25:12,240 --> 00:25:14,520
looking at implementing security using

635
00:25:14,520 --> 00:25:17,940
this model on your own so

636
00:25:17,940 --> 00:25:20,880
as promised Theo's here to thank you for

637
00:25:20,880 --> 00:25:22,799
hanging out with us today we hope you

638
00:25:22,799 --> 00:25:24,419
learned something and if you have any

639
00:25:24,419 --> 00:25:25,799
questions

640
00:25:25,799 --> 00:25:28,799
um I'll be around for a bit after uh the

641
00:25:28,799 --> 00:25:31,080
presentation we've got chat and then

642
00:25:31,080 --> 00:25:32,700
after this broadcast I'm always

643
00:25:32,700 --> 00:25:34,919
available find me on Twitter send me

644
00:25:34,919 --> 00:25:37,440
questions if I've got answers I'll send

645
00:25:37,440 --> 00:25:38,940
them your way if not I really love to

646
00:25:38,940 --> 00:25:41,100
learn with you and start exploring more

647
00:25:41,100 --> 00:25:43,200
about zero trust networking all right

648
00:25:43,200 --> 00:25:44,460
thanks everyone

649
00:25:44,460 --> 00:25:46,559
excellent thanks so much Mandy that was

650
00:25:46,559 --> 00:25:48,299
a great presentation and uh yeah we'll

651
00:25:48,299 --> 00:25:50,760
we'll push questions into the chat for

652
00:25:50,760 --> 00:25:52,620
folks to ask you there if you if you

653
00:25:52,620 --> 00:25:53,700
don't mind checking that out when you

654
00:25:53,700 --> 00:25:56,100
get a chance not a problem I'll do that

655
00:25:56,100 --> 00:25:59,480
have a good one

