1
00:00:00,000 --> 00:00:02,029
Oh

2
00:00:03,630 --> 00:00:09,309
and hello and some you can hear me okay

3
00:00:09,309 --> 00:00:12,349
yep all clear excellent and thanks

4
00:00:12,349 --> 00:00:14,480
everyone for bearing with us well we had

5
00:00:14,480 --> 00:00:16,609
a minor technical issue ads at the start

6
00:00:16,609 --> 00:00:19,490
of the call and welcome everyone to the

7
00:00:19,490 --> 00:00:22,189
latest edition of what's now known as my

8
00:00:22,189 --> 00:00:24,590
devstack ops virtual session my district

9
00:00:24,590 --> 00:00:27,289
box is a inclusive community that

10
00:00:27,289 --> 00:00:29,000
educates and enables developers in

11
00:00:29,000 --> 00:00:31,250
application security so coming up today

12
00:00:31,250 --> 00:00:32,900
we have some belen from author who's

13
00:00:32,900 --> 00:00:34,339
gonna be talking about authenticating

14
00:00:34,339 --> 00:00:36,260
your single page apps using JSON web

15
00:00:36,260 --> 00:00:39,019
tokens and before we dive into the

16
00:00:39,019 --> 00:00:40,940
session just a quick intro about myself

17
00:00:40,940 --> 00:00:42,620
for those of you meeting for the first

18
00:00:42,620 --> 00:00:45,140
time so my name is Oliver Byrne and I'm

19
00:00:45,140 --> 00:00:47,030
a community manager here at sleek so

20
00:00:47,030 --> 00:00:49,760
working with my fellow humans and

21
00:00:49,760 --> 00:00:51,920
hepburn on the community team and I'm

22
00:00:51,920 --> 00:00:52,430
here to help

23
00:00:52,430 --> 00:00:54,379
when the session smoothly hopefully with

24
00:00:54,379 --> 00:00:56,930
no more technical issues and also to

25
00:00:56,930 --> 00:00:58,879
coordinate any questions for Sam as they

26
00:00:58,879 --> 00:01:01,280
come in and you can feel free to drop

27
00:01:01,280 --> 00:01:02,989
any questions into our live session

28
00:01:02,989 --> 00:01:05,990
Channel myself Sam Sam have been are in

29
00:01:05,990 --> 00:01:07,220
that tunnel ready to pick up your

30
00:01:07,220 --> 00:01:09,500
questions as we go on we'd love your

31
00:01:09,500 --> 00:01:11,450
feedback as we go through you know so

32
00:01:11,450 --> 00:01:12,950
during the session post session so we

33
00:01:12,950 --> 00:01:14,450
can continue to improve the sessions

34
00:01:14,450 --> 00:01:16,099
that we bring to you you can certainly

35
00:01:16,099 --> 00:01:17,929
find us on twitter by searching for my

36
00:01:17,929 --> 00:01:19,849
dev site so i'm giving us a follow and

37
00:01:19,849 --> 00:01:22,250
you can also join our slack community if

38
00:01:22,250 --> 00:01:23,929
you're listening to this they're at

39
00:01:23,929 --> 00:01:25,819
their youtube or on our website and you

40
00:01:25,819 --> 00:01:28,759
can find that link on my dev suck-ups io

41
00:01:28,759 --> 00:01:30,920
I was like community is actually the

42
00:01:30,920 --> 00:01:32,060
best place to interact with all my

43
00:01:32,060 --> 00:01:34,459
speakers just to collect all of our post

44
00:01:34,459 --> 00:01:38,149
session resources slides any links that

45
00:01:38,149 --> 00:01:40,429
we share from our speakers we also have

46
00:01:40,429 --> 00:01:42,200
lots of fellow community members so we

47
00:01:42,200 --> 00:01:45,020
put on 2,000 members which is fantastic

48
00:01:45,020 --> 00:01:48,050
and then once you join the community you

49
00:01:48,050 --> 00:01:49,130
can orden you can join our future

50
00:01:49,130 --> 00:01:50,630
sessions by joining the live sessions

51
00:01:50,630 --> 00:01:52,489
Channel and asking any questions during

52
00:01:52,489 --> 00:01:55,759
any of our future sessions once the

53
00:01:55,759 --> 00:01:56,450
session is over

54
00:01:56,450 --> 00:01:58,039
you can re-watch the session on our

55
00:01:58,039 --> 00:01:59,899
website and CVN if you're listening to

56
00:01:59,899 --> 00:02:01,310
this post session you can listen to a

57
00:02:01,310 --> 00:02:03,679
website or directly to our youtube

58
00:02:03,679 --> 00:02:06,649
channel and just let you know that my

59
00:02:06,649 --> 00:02:08,179
dev sai baba's he brought to you by

60
00:02:08,179 --> 00:02:10,280
sneak and our aim for this community is

61
00:02:10,280 --> 00:02:11,840
to create a vending neutral space to

62
00:02:11,840 --> 00:02:13,459
share knowledge and best practices

63
00:02:13,459 --> 00:02:16,069
related to software security so that's

64
00:02:16,069 --> 00:02:17,840
the intro we're here we are now I'm

65
00:02:17,840 --> 00:02:19,730
going to hand it over to Sam Bell who's

66
00:02:19,730 --> 00:02:21,530
going to introduce himself and take us

67
00:02:21,530 --> 00:02:26,750
the rest so some over to you well let's

68
00:02:26,750 --> 00:02:29,330
go let me quickly share my screen so you

69
00:02:29,330 --> 00:02:33,860
can see the slides I prepared should be

70
00:02:33,860 --> 00:02:35,209
all good to go

71
00:02:35,209 --> 00:02:36,910
can you confirm it you can see my slides

72
00:02:36,910 --> 00:02:40,190
yeah I can see your slides right perfect

73
00:02:40,190 --> 00:02:43,790
so like like like I mentioned in the

74
00:02:43,790 --> 00:02:45,050
introduction I'm going to be talking a

75
00:02:45,050 --> 00:02:47,900
bit about JSON web tokens and how to use

76
00:02:47,900 --> 00:02:49,130
them together with single page

77
00:02:49,130 --> 00:02:51,080
applications because these kind of

78
00:02:51,080 --> 00:02:52,730
applications we've been building for a

79
00:02:52,730 --> 00:02:55,730
while but they post a certain set of

80
00:02:55,730 --> 00:02:57,230
problems when you're dealing with

81
00:02:57,230 --> 00:02:59,300
authentication and how to do how to deal

82
00:02:59,300 --> 00:03:01,640
with them in a secure way um but let me

83
00:03:01,640 --> 00:03:03,920
quickly introduce myself my name is Sam

84
00:03:03,920 --> 00:03:05,000
Bell and I'm a developer advocate

85
00:03:05,000 --> 00:03:07,310
engineer at alpha 0 you can have a read

86
00:03:07,310 --> 00:03:08,720
of files here before that's perfectly

87
00:03:08,720 --> 00:03:10,760
fine we're an identity service provider

88
00:03:10,760 --> 00:03:12,560
which basically means that we try to

89
00:03:12,560 --> 00:03:14,180
make it as easy as possible for anybody

90
00:03:14,180 --> 00:03:16,100
to implement a secure authentication

91
00:03:16,100 --> 00:03:17,989
flow so you can focus on building your

92
00:03:17,989 --> 00:03:20,120
actual products I'm a Google developer

93
00:03:20,120 --> 00:03:22,459
expert and I organize a few meetups one

94
00:03:22,459 --> 00:03:23,720
in Belgium and also the identity

95
00:03:23,720 --> 00:03:25,640
security meetup among them and if you

96
00:03:25,640 --> 00:03:27,079
want to find me on the internet some

97
00:03:27,079 --> 00:03:30,140
bigger is usually my username so what's

98
00:03:30,140 --> 00:03:31,519
going to be what I'm going to be talking

99
00:03:31,519 --> 00:03:33,739
about in this session today I'm going to

100
00:03:33,739 --> 00:03:34,519
start off with some traditional

101
00:03:34,519 --> 00:03:36,620
education or at least what I consider

102
00:03:36,620 --> 00:03:38,690
some traditional authentication we're

103
00:03:38,690 --> 00:03:40,250
going to have a look at tokens and try

104
00:03:40,250 --> 00:03:41,690
and go to try to explain what they are

105
00:03:41,690 --> 00:03:44,360
and lastly we'll go to have a look at

106
00:03:44,360 --> 00:03:46,700
token-based authentication so

107
00:03:46,700 --> 00:03:49,070
traditional authentication in the most

108
00:03:49,070 --> 00:03:50,510
traditional scenario you have a user

109
00:03:50,510 --> 00:03:52,730
who's using a browser to visit their web

110
00:03:52,730 --> 00:03:54,530
sites and the browser is going to your

111
00:03:54,530 --> 00:03:57,320
request to a pack and a server and any

112
00:03:57,320 --> 00:03:58,940
time you use a clicks on a page the

113
00:03:58,940 --> 00:04:00,980
process come to the request and refresh

114
00:04:00,980 --> 00:04:03,680
the page and load that new page until

115
00:04:03,680 --> 00:04:06,280
the user goes to a web page that has

116
00:04:06,280 --> 00:04:08,930
protected for which he or she needs to

117
00:04:08,930 --> 00:04:11,840
login so users going to enter their

118
00:04:11,840 --> 00:04:13,579
credentials username password most of

119
00:04:13,579 --> 00:04:15,829
the time and to the browser account

120
00:04:15,829 --> 00:04:17,390
descends to the back end if you have a

121
00:04:17,390 --> 00:04:18,769
user which is stood for these

122
00:04:18,769 --> 00:04:21,709
credentials and their fellows then we're

123
00:04:21,709 --> 00:04:23,630
just going to return the page and the

124
00:04:23,630 --> 00:04:27,440
browser is going to render that page and

125
00:04:27,440 --> 00:04:29,270
usually because we don't want the user

126
00:04:29,270 --> 00:04:32,050
to login with every new page request

127
00:04:32,050 --> 00:04:37,990
that we do we also send a session cookie

128
00:04:37,990 --> 00:04:39,970
and basically this session cookies come

129
00:04:39,970 --> 00:04:42,550
to be sent with every subsequent request

130
00:04:42,550 --> 00:04:44,789
me go to a protected page or resource

131
00:04:44,789 --> 00:04:46,870
just so that the user doesn't have to

132
00:04:46,870 --> 00:04:48,909
login with every page like I mentioned

133
00:04:48,909 --> 00:04:52,720
before so what are the difference

134
00:04:52,720 --> 00:04:54,729
between a traditional web app like and

135
00:04:54,729 --> 00:04:56,409
the one that just explains where all the

136
00:04:56,409 --> 00:04:58,509
heavy lifting is on on the back end and

137
00:04:58,509 --> 00:04:59,979
where we use a cookie based approach and

138
00:04:59,979 --> 00:05:01,930
sick of based on vacations in your kind

139
00:05:01,930 --> 00:05:03,909
of applications on the web which use all

140
00:05:03,909 --> 00:05:05,349
of channel scripts often with these

141
00:05:05,349 --> 00:05:07,300
frameworks like angular or reactive you

142
00:05:07,300 --> 00:05:10,020
what all of you wants a traditional

143
00:05:10,020 --> 00:05:12,819
architecture is usually the browser does

144
00:05:12,819 --> 00:05:14,560
a rendering and the backend is all of

145
00:05:14,560 --> 00:05:17,560
the logic this can be a surgeon API this

146
00:05:17,560 --> 00:05:19,840
can be a bunch of api's but most of the

147
00:05:19,840 --> 00:05:22,090
logic is happening on the API or on the

148
00:05:22,090 --> 00:05:23,889
backends and the browser just render

149
00:05:23,889 --> 00:05:27,069
stuff when it needs to render stuff and

150
00:05:27,069 --> 00:05:29,469
while a single page architecture often

151
00:05:29,469 --> 00:05:31,210
can have a bunch of different services

152
00:05:31,210 --> 00:05:35,110
that do it a certain thing like giving

153
00:05:35,110 --> 00:05:37,539
some data from an API some user related

154
00:05:37,539 --> 00:05:39,789
data maybe handle some payments but the

155
00:05:39,789 --> 00:05:41,740
browser's going to do a bit more than

156
00:05:41,740 --> 00:05:43,810
just rendering content it's also going

157
00:05:43,810 --> 00:05:46,000
to have a lot of logic in JavaScript in

158
00:05:46,000 --> 00:05:49,000
the front end and we often have an

159
00:05:49,000 --> 00:05:51,099
architecture something like this you

160
00:05:51,099 --> 00:05:53,560
might have a mobile app a desktop app a

161
00:05:53,560 --> 00:05:55,840
web app a whole different area of apps

162
00:05:55,840 --> 00:05:57,789
and they all need to authenticate with a

163
00:05:57,789 --> 00:06:01,090
sort of API or api's but as we've seen

164
00:06:01,090 --> 00:06:03,909
in the example of the traditional web

165
00:06:03,909 --> 00:06:06,159
app we use a cookie to remember if we're

166
00:06:06,159 --> 00:06:08,349
locked in or not but cookies are

167
00:06:08,349 --> 00:06:10,360
something that it's what is only used by

168
00:06:10,360 --> 00:06:12,490
the web so it would be nice if we could

169
00:06:12,490 --> 00:06:14,409
use a more or less similar way to

170
00:06:14,409 --> 00:06:17,020
remember authentication state for mobile

171
00:06:17,020 --> 00:06:20,110
desktop web whatever you whatever kind

172
00:06:20,110 --> 00:06:23,949
of app you're using so what are some of

173
00:06:23,949 --> 00:06:25,270
the problems with the traditional cookie

174
00:06:25,270 --> 00:06:28,630
based approach cookies on like horse and

175
00:06:28,630 --> 00:06:31,870
I assume anybody who's watching this

176
00:06:31,870 --> 00:06:33,759
this session will agree with me nobody

177
00:06:33,759 --> 00:06:35,349
likes course if you were into a course

178
00:06:35,349 --> 00:06:37,120
problem the first thing you do is if I

179
00:06:37,120 --> 00:06:39,250
really type in I have a course problem I

180
00:06:39,250 --> 00:06:40,389
just read on Stack Overflow

181
00:06:40,389 --> 00:06:42,909
well this is what your problem is just

182
00:06:42,909 --> 00:06:45,080
like us cookies on my course a cookie

183
00:06:45,080 --> 00:06:47,449
being issued by another origin cannot be

184
00:06:47,449 --> 00:06:49,939
leased by a different origin also

185
00:06:49,939 --> 00:06:52,520
cookies require States because inside of

186
00:06:52,520 --> 00:06:54,259
these cookies most of the time we have a

187
00:06:54,259 --> 00:06:56,629
session ID which is just a pointer to an

188
00:06:56,629 --> 00:06:59,030
ID in a database which contains maybe

189
00:06:59,030 --> 00:07:01,340
some data but if the cookie or if the

190
00:07:01,340 --> 00:07:02,990
self if the session itself still tell

191
00:07:02,990 --> 00:07:04,849
it's a date and end date and expiry

192
00:07:04,849 --> 00:07:07,340
dates and this means that we need to

193
00:07:07,340 --> 00:07:11,419
store this in our database my cookies on

194
00:07:11,419 --> 00:07:13,840
phloem you cannot pass a cookie from one

195
00:07:13,840 --> 00:07:16,639
back into another back here among API to

196
00:07:16,639 --> 00:07:18,740
another API so you'll have to create

197
00:07:18,740 --> 00:07:20,419
them up a bunch of cookies if you're

198
00:07:20,419 --> 00:07:22,699
using multiple api's which can be

199
00:07:22,699 --> 00:07:27,289
annoying for example if you want to do a

200
00:07:27,289 --> 00:07:28,969
request to your main API but it needs

201
00:07:28,969 --> 00:07:31,610
some authentication or some account data

202
00:07:31,610 --> 00:07:34,460
like you're I don't know profile picture

203
00:07:34,460 --> 00:07:36,289
you cannot just use a cookie generated

204
00:07:36,289 --> 00:07:39,949
by the first one on the second so what's

205
00:07:39,949 --> 00:07:40,810
the solution

206
00:07:40,810 --> 00:07:42,740
maybe it's token-based authentication

207
00:07:42,740 --> 00:07:46,159
we'll see in this in the session if we

208
00:07:46,159 --> 00:07:47,719
can use second based authentication you

209
00:07:47,719 --> 00:07:49,370
just solve some of these issues that

210
00:07:49,370 --> 00:07:52,909
I've just explained but first what is a

211
00:07:52,909 --> 00:07:55,699
cookie or what is a token I'm sorry to

212
00:07:55,699 --> 00:07:57,909
me a token is a unique identifier

213
00:07:57,909 --> 00:08:00,319
representing something as long as you

214
00:08:00,319 --> 00:08:02,150
can take this token and get some meaning

215
00:08:02,150 --> 00:08:05,349
out of it to me that's a valid token

216
00:08:05,349 --> 00:08:07,610
there are a bunch of different kinds of

217
00:08:07,610 --> 00:08:10,310
tokens maybe you've come across a nexus

218
00:08:10,310 --> 00:08:12,860
token before an access token is usually

219
00:08:12,860 --> 00:08:15,620
used with api's to prove that you've

220
00:08:15,620 --> 00:08:18,020
access to do a certain action or to get

221
00:08:18,020 --> 00:08:20,900
certain data from that API maybe you've

222
00:08:20,900 --> 00:08:23,180
used an ID token before I mean an ID

223
00:08:23,180 --> 00:08:26,389
token is usually used to handle identity

224
00:08:26,389 --> 00:08:28,460
and related information when you log in

225
00:08:28,460 --> 00:08:30,080
through the open ID connect framework

226
00:08:30,080 --> 00:08:32,448
for example you can ask for an ID token

227
00:08:32,448 --> 00:08:33,679
which will contain some more information

228
00:08:33,679 --> 00:08:34,849
about the person that's just

229
00:08:34,849 --> 00:08:37,789
authenticated maybe you've heard of

230
00:08:37,789 --> 00:08:40,729
refresh tokens they're very powerful and

231
00:08:40,729 --> 00:08:42,589
they cause a lot of problems especially

232
00:08:42,589 --> 00:08:45,079
single page applications so we're going

233
00:08:45,079 --> 00:08:46,790
to be talking about this a bit later but

234
00:08:46,790 --> 00:08:48,019
basically what they allow you to do is

235
00:08:48,019 --> 00:08:49,940
they allow you to request a new access

236
00:08:49,940 --> 00:08:51,920
token if your previous access token has

237
00:08:51,920 --> 00:08:55,250
expired and they're often in the form of

238
00:08:55,250 --> 00:08:57,020
an opaque string in the form of a UUID

239
00:08:57,020 --> 00:08:58,260
this means that

240
00:08:58,260 --> 00:09:00,150
in itself this token doesn't have any

241
00:09:00,150 --> 00:09:03,030
meaning but by looking up the the UUID

242
00:09:03,030 --> 00:09:04,620
in your database you might get some

243
00:09:04,620 --> 00:09:06,600
meaning like the expiry date but it

244
00:09:06,600 --> 00:09:08,610
doesn't have to be just a string comes

245
00:09:08,610 --> 00:09:10,020
to be something like XML if you're

246
00:09:10,020 --> 00:09:12,360
working with the sewol these tokens

247
00:09:12,360 --> 00:09:16,200
several tokens are always XML or it

248
00:09:16,200 --> 00:09:18,660
could be a JSON web token and I

249
00:09:18,660 --> 00:09:20,670
mentioned in the introduction this is

250
00:09:20,670 --> 00:09:22,050
something that we're going to be focused

251
00:09:22,050 --> 00:09:25,500
on focusing on today at all so you reuse

252
00:09:25,500 --> 00:09:27,270
them as much as possible just because

253
00:09:27,270 --> 00:09:30,240
you like him they're very powerful and

254
00:09:30,240 --> 00:09:31,740
if you've never seen a JSON of talking

255
00:09:31,740 --> 00:09:35,760
before this is a JSON web token and you

256
00:09:35,760 --> 00:09:37,980
might see that this token is made up out

257
00:09:37,980 --> 00:09:40,050
of three different parts the top part in

258
00:09:40,050 --> 00:09:42,930
red the metal body in purple and the

259
00:09:42,930 --> 00:09:45,300
bottom part in blue and they are

260
00:09:45,300 --> 00:09:48,510
separated by the two dots in blank and

261
00:09:48,510 --> 00:09:50,610
this is something specific or typical

262
00:09:50,610 --> 00:09:52,380
imitation of tokens they will only

263
00:09:52,380 --> 00:09:54,930
always contain these three parts with

264
00:09:54,930 --> 00:09:57,450
the two dots to separate them so if you

265
00:09:57,450 --> 00:10:01,260
look at the first one we see the web

266
00:10:01,260 --> 00:10:03,030
part in red and this one is called the

267
00:10:03,030 --> 00:10:05,010
Heather and what this is is basically

268
00:10:05,010 --> 00:10:08,250
just a base64 encoded JSON object so if

269
00:10:08,250 --> 00:10:10,920
you would decode this base64 we can get

270
00:10:10,920 --> 00:10:12,720
something like this and the header image

271
00:10:12,720 --> 00:10:14,310
is the web token we'll give you some

272
00:10:14,310 --> 00:10:15,960
more information about the token itself

273
00:10:15,960 --> 00:10:18,030
the type it suggests and I'm talking

274
00:10:18,030 --> 00:10:19,440
obviously because we're working which is

275
00:10:19,440 --> 00:10:21,810
about tokens but also which algorithm we

276
00:10:21,810 --> 00:10:24,060
use to sign this token and we will see

277
00:10:24,060 --> 00:10:25,950
what a signature is later but basically

278
00:10:25,950 --> 00:10:27,840
it tells us already if you want to use

279
00:10:27,840 --> 00:10:29,310
this token you have to know how to

280
00:10:29,310 --> 00:10:32,010
handle this algorithm in this case a s 2

281
00:10:32,010 --> 00:10:36,360
HS 2 5 6 then the second part and the

282
00:10:36,360 --> 00:10:38,670
most beefier part the biggest part of a

283
00:10:38,670 --> 00:10:40,680
JSON web token is the payload it's

284
00:10:40,680 --> 00:10:43,500
always the middle part and again this is

285
00:10:43,500 --> 00:10:45,780
some basics before encoded Chasen if you

286
00:10:45,780 --> 00:10:48,480
want decode this you might see something

287
00:10:48,480 --> 00:10:50,700
like this and what the payload is

288
00:10:50,700 --> 00:10:53,100
basically it's a bunch of information

289
00:10:53,100 --> 00:10:56,010
that is useful to the person or service

290
00:10:56,010 --> 00:10:58,110
that is going to consume this token if

291
00:10:58,110 --> 00:10:59,640
it's an ID token it will contain some

292
00:10:59,640 --> 00:11:01,560
information about that entity if it's an

293
00:11:01,560 --> 00:11:03,300
access token it contains information

294
00:11:03,300 --> 00:11:06,900
about the API that is meant to use with

295
00:11:06,900 --> 00:11:08,670
I mean it can contain a bunch of things

296
00:11:08,670 --> 00:11:11,130
like subject which is often the user ID

297
00:11:11,130 --> 00:11:13,800
some information about the user like a

298
00:11:13,800 --> 00:11:15,990
given a family name an issue that dates

299
00:11:15,990 --> 00:11:18,450
and also something very powerful it can

300
00:11:18,450 --> 00:11:21,660
contain an expiry date so no need to

301
00:11:21,660 --> 00:11:23,070
save this somewhere in the database

302
00:11:23,070 --> 00:11:25,800
separately it just left open can contain

303
00:11:25,800 --> 00:11:28,740
whether or not it has its expired inside

304
00:11:28,740 --> 00:11:31,170
of the target inside of the payload so

305
00:11:31,170 --> 00:11:32,640
by just looking at this expiry date and

306
00:11:32,640 --> 00:11:35,220
the X part here at the bottom we can

307
00:11:35,220 --> 00:11:36,720
already see if the token is still

308
00:11:36,720 --> 00:11:40,230
balanced in terms of expiry dates and

309
00:11:40,230 --> 00:11:41,820
there's a bunch of different claims you

310
00:11:41,820 --> 00:11:43,710
can put in the payload the claim is just

311
00:11:43,710 --> 00:11:48,060
a valid Chasen key value pair and the

312
00:11:48,060 --> 00:11:49,500
first one I reserved claims these are

313
00:11:49,500 --> 00:11:51,740
just key value pairs that have been

314
00:11:51,740 --> 00:11:54,090
standardized by the JSON web token spec

315
00:11:54,090 --> 00:11:56,340
things like subject issuer issue that

316
00:11:56,340 --> 00:11:58,110
date and expiry dates there's a few

317
00:11:58,110 --> 00:12:00,090
others but these are the most important

318
00:12:00,090 --> 00:12:02,190
ones and they come from the Chasen lab

319
00:12:02,190 --> 00:12:05,460
spec the second type you have is public

320
00:12:05,460 --> 00:12:07,740
claims and these are not really

321
00:12:07,740 --> 00:12:09,780
standardized by the JSON web token spec

322
00:12:09,780 --> 00:12:12,600
but there is a whole list of public

323
00:12:12,600 --> 00:12:16,230
claims published on the INR websites as

324
00:12:16,230 --> 00:12:19,200
you can see here which contain a whole

325
00:12:19,200 --> 00:12:20,790
bunch of claims which are often used

326
00:12:20,790 --> 00:12:22,620
with API is just for API

327
00:12:22,620 --> 00:12:25,020
interoperability so if you create an API

328
00:12:25,020 --> 00:12:27,480
that issues Jason up tokens and I grade

329
00:12:27,480 --> 00:12:30,600
one we can all call a given name a given

330
00:12:30,600 --> 00:12:32,250
name instead of a first name just so you

331
00:12:32,250 --> 00:12:33,660
know what to expect the same goes for

332
00:12:33,660 --> 00:12:35,640
family name so people might call it the

333
00:12:35,640 --> 00:12:37,470
last name but if we created all of them

334
00:12:37,470 --> 00:12:40,230
all of detail of token issuing api's and

335
00:12:40,230 --> 00:12:42,630
consuming api's are going to assume that

336
00:12:42,630 --> 00:12:44,820
it's family name it makes it a bit more

337
00:12:44,820 --> 00:12:49,410
easier and then the last name or the

338
00:12:49,410 --> 00:12:51,420
last earth type of claims is private

339
00:12:51,420 --> 00:12:53,460
claims and this is basically any type of

340
00:12:53,460 --> 00:12:55,740
claim that is of use but that is useful

341
00:12:55,740 --> 00:12:58,710
to you as long as it's valid Jason you

342
00:12:58,710 --> 00:13:01,830
can put it in here keep in mind that

343
00:13:01,830 --> 00:13:04,050
this is just a basic C 4 encoded JSON

344
00:13:04,050 --> 00:13:07,250
object so I've never put something

345
00:13:07,250 --> 00:13:09,720
privacy sensitive or something imported

346
00:13:09,720 --> 00:13:10,920
in here like a credit card number

347
00:13:10,920 --> 00:13:12,680
because everybody can just be coach

348
00:13:12,680 --> 00:13:19,890
base64 like I said also try to keep your

349
00:13:19,890 --> 00:13:21,630
payload as small as possible because

350
00:13:21,630 --> 00:13:23,070
we're going to be sending this token

351
00:13:23,070 --> 00:13:23,980
with each

352
00:13:23,980 --> 00:13:25,000
Qwest that we're going to do in the

353
00:13:25,000 --> 00:13:26,860
future or at least each request to it

354
00:13:26,860 --> 00:13:29,680
protect endpoints so not smaller the

355
00:13:29,680 --> 00:13:31,540
payload the smaller token is going to be

356
00:13:31,540 --> 00:13:36,370
in the end then lastly the third part

357
00:13:36,370 --> 00:13:38,230
the last part is going to be our

358
00:13:38,230 --> 00:13:41,260
signature and what the signature

359
00:13:41,260 --> 00:13:43,150
basically what it is it's basically you

360
00:13:43,150 --> 00:13:45,580
take your header you take your payload

361
00:13:45,580 --> 00:13:47,770
and you run into a signal to signing

362
00:13:47,770 --> 00:13:49,090
algorithm there's a whole bunch of them

363
00:13:49,090 --> 00:13:51,970
and this in stage in this instance we're

364
00:13:51,970 --> 00:13:55,120
going to use hmm-hm x sha-256 or

365
00:13:55,120 --> 00:13:57,040
whatever you pronounce that so you take

366
00:13:57,040 --> 00:13:58,750
your header you take your payload and

367
00:13:58,750 --> 00:14:00,130
you take your secret because this

368
00:14:00,130 --> 00:14:02,200
assignment method works based on a

369
00:14:02,200 --> 00:14:04,750
shared secrets your audits and in the

370
00:14:04,750 --> 00:14:06,550
end you get a signature this means that

371
00:14:06,550 --> 00:14:08,200
any time something changes in your

372
00:14:08,200 --> 00:14:09,610
header or something changes in your

373
00:14:09,610 --> 00:14:12,180
payloads your signature will also change

374
00:14:12,180 --> 00:14:15,520
this means that we can verify HSN I'm

375
00:14:15,520 --> 00:14:17,650
token because as soon as somebody tries

376
00:14:17,650 --> 00:14:19,180
to tamper with the content of the

377
00:14:19,180 --> 00:14:21,100
payload or the confident header the

378
00:14:21,100 --> 00:14:22,810
signature will not match anymore and we

379
00:14:22,810 --> 00:14:24,640
can know that somebody tried to do

380
00:14:24,640 --> 00:14:28,080
something which we don't want them to do

381
00:14:28,080 --> 00:14:31,120
usually you use a better key than your

382
00:14:31,120 --> 00:14:35,620
super secret key something random so if

383
00:14:35,620 --> 00:14:37,630
you try this out we have a JSON object

384
00:14:37,630 --> 00:14:40,270
which is going to be our header we take

385
00:14:40,270 --> 00:14:42,160
the basis for of that then we have a

386
00:14:42,160 --> 00:14:46,450
payload with some basic data take the

387
00:14:46,450 --> 00:14:48,460
bit take the basics for this and then

388
00:14:48,460 --> 00:14:50,490
run both of these through a signing

389
00:14:50,490 --> 00:14:53,640
algorithm that uses secret as the secret

390
00:14:53,640 --> 00:14:56,920
and we just concatenate the three parts

391
00:14:56,920 --> 00:14:59,980
we get a JSON web token so if we copy

392
00:14:59,980 --> 00:15:02,830
this and go to Jason wrapped up in the

393
00:15:02,830 --> 00:15:04,540
layout I'll talk about this later a bit

394
00:15:04,540 --> 00:15:06,370
but basically this contains a debugger

395
00:15:06,370 --> 00:15:08,950
that lets you debug just not tokens and

396
00:15:08,950 --> 00:15:11,590
if you paste it in here you'll see that

397
00:15:11,590 --> 00:15:13,510
we have our contents there's a space

398
00:15:13,510 --> 00:15:15,640
missing here because I didn't look see

399
00:15:15,640 --> 00:15:18,340
but you can see the contents I can also

400
00:15:18,340 --> 00:15:19,930
see that the signature is enveloped

401
00:15:19,930 --> 00:15:21,700
because we're assuming that our secret

402
00:15:21,700 --> 00:15:25,690
is going to be your 2 5 256 bit key if

403
00:15:25,690 --> 00:15:27,400
you just change this to secrets and

404
00:15:27,400 --> 00:15:29,770
paste it in again our signature is

405
00:15:29,770 --> 00:15:32,260
verified because we used secret as our

406
00:15:32,260 --> 00:15:36,900
secret to sign its JSON web token

407
00:15:37,500 --> 00:15:40,000
some real-world examples because talking

408
00:15:40,000 --> 00:15:41,620
about tokens it's a bit abstract that we

409
00:15:41,620 --> 00:15:43,449
want to see the tokens how we're going

410
00:15:43,449 --> 00:15:45,670
to use them in the real world an access

411
00:15:45,670 --> 00:15:47,740
token again these are the tokens that we

412
00:15:47,740 --> 00:15:50,410
are usually used to access a protected

413
00:15:50,410 --> 00:15:53,500
API resource or to do it a an action on

414
00:15:53,500 --> 00:15:56,560
a protected API endpoints sorry we are

415
00:15:56,560 --> 00:15:58,149
going to contain some information useful

416
00:15:58,149 --> 00:16:01,120
to an API who issued D token for example

417
00:16:01,120 --> 00:16:03,220
your authorization server which user

418
00:16:03,220 --> 00:16:05,560
we're dealing with and which audience

419
00:16:05,560 --> 00:16:07,750
which API scan consume this token if you

420
00:16:07,750 --> 00:16:10,240
are working with an API that's not in

421
00:16:10,240 --> 00:16:12,370
this audience array you might want to

422
00:16:12,370 --> 00:16:14,290
recheck that token it shouldn't data

423
00:16:14,290 --> 00:16:16,750
expiry dates and also the Scopes which

424
00:16:16,750 --> 00:16:18,639
actions is this user allowed to do and

425
00:16:18,639 --> 00:16:21,730
is it allowed to use this endpoint that

426
00:16:21,730 --> 00:16:24,220
is trying to use at this moment so this

427
00:16:24,220 --> 00:16:26,350
is all data concerning in the use of

428
00:16:26,350 --> 00:16:30,009
api's and I think token will contain

429
00:16:30,009 --> 00:16:31,420
some information about the identity of

430
00:16:31,420 --> 00:16:33,910
the user as we said before it's going to

431
00:16:33,910 --> 00:16:36,459
be issued so when a user is going to

432
00:16:36,459 --> 00:16:38,350
authenticate so we can see some

433
00:16:38,350 --> 00:16:39,880
information about the enemy like the

434
00:16:39,880 --> 00:16:44,920
nickname a picture maybe and again user

435
00:16:44,920 --> 00:16:49,209
ID audience whatever it should at date

436
00:16:49,209 --> 00:16:51,639
and expiry days so we always include the

437
00:16:51,639 --> 00:16:53,769
expiry dates just so we want to so we

438
00:16:53,769 --> 00:16:56,339
can check every to talkin is still valid

439
00:16:56,339 --> 00:16:59,139
and just love tokens are part of the

440
00:16:59,139 --> 00:17:01,149
jose specification if you've never used

441
00:17:01,149 --> 00:17:02,680
if you've never heard of this it's

442
00:17:02,680 --> 00:17:04,480
basically a specification that specifies

443
00:17:04,480 --> 00:17:07,750
a few frameworks or a few things that

444
00:17:07,750 --> 00:17:10,630
are jason and that help you to education

445
00:17:10,630 --> 00:17:13,299
and encryption on the web and it stands

446
00:17:13,299 --> 00:17:16,290
for JSON object signing and encryption

447
00:17:16,290 --> 00:17:19,119
so we've seen JSON web token there's

448
00:17:19,119 --> 00:17:21,790
also a Chasen web King JSON signature

449
00:17:21,790 --> 00:17:23,919
and jason encryption these are all

450
00:17:23,919 --> 00:17:28,290
standards in this how is this standards

451
00:17:28,590 --> 00:17:31,720
let's see what the question is what's

452
00:17:31,720 --> 00:17:33,280
the best gesture way to use just map

453
00:17:33,280 --> 00:17:36,059
token in a protected way against XSS and

454
00:17:36,059 --> 00:17:39,460
CSRF this is a bit of a longer question

455
00:17:39,460 --> 00:17:41,650
so going to charge you answer this one

456
00:17:41,650 --> 00:17:48,710
at the end of the talk moving on

457
00:17:48,710 --> 00:17:50,680
the Pope until now we've seen a

458
00:17:50,680 --> 00:17:52,700
signature that is based on a secret

459
00:17:52,700 --> 00:17:54,890
which is called asymmetrical algorithm

460
00:17:54,890 --> 00:17:56,960
but you can also use a symmetrical

461
00:17:56,960 --> 00:18:00,140
algorithms like the ones here at the

462
00:18:00,140 --> 00:18:02,270
bottom they all rely on a private key to

463
00:18:02,270 --> 00:18:03,980
create a signature and a public key to

464
00:18:03,980 --> 00:18:07,580
verify the signature and if you want to

465
00:18:07,580 --> 00:18:11,930
use one of these algorithms you want to

466
00:18:11,930 --> 00:18:13,880
be able to share the public key so

467
00:18:13,880 --> 00:18:17,180
people can verify these signatures based

468
00:18:17,180 --> 00:18:21,350
on that public key we're going to use

469
00:18:21,350 --> 00:18:23,360
adjust map key for this because that's

470
00:18:23,360 --> 00:18:24,830
one of these things we have an auto belt

471
00:18:24,830 --> 00:18:27,590
in the horsey specification and it might

472
00:18:27,590 --> 00:18:29,630
look something like this it basically is

473
00:18:29,630 --> 00:18:32,810
an array of public keys and it contains

474
00:18:32,810 --> 00:18:34,580
some JSON which tells us all the

475
00:18:34,580 --> 00:18:36,560
information we needs to work with this

476
00:18:36,560 --> 00:18:42,580
public key if you're using the Open ID

477
00:18:42,580 --> 00:18:45,500
specification they are often exposed in

478
00:18:45,500 --> 00:18:47,450
this dot well-known slash open any

479
00:18:47,450 --> 00:18:50,090
configuration if you look at it it might

480
00:18:50,090 --> 00:18:51,590
look something like this so it contains

481
00:18:51,590 --> 00:18:53,750
a bunch of public information about your

482
00:18:53,750 --> 00:18:56,330
authorization server and one of them is

483
00:18:56,330 --> 00:18:58,430
a checkable eks you arrive if you click

484
00:18:58,430 --> 00:19:00,770
on it it's you can see that this is full

485
00:19:00,770 --> 00:19:02,900
of public keys that is available to

486
00:19:02,900 --> 00:19:04,940
validate the chase effectiveness that I

487
00:19:04,940 --> 00:19:08,030
will be issuing so you can share this

488
00:19:08,030 --> 00:19:10,100
with anybody that needs to notice since

489
00:19:10,100 --> 00:19:12,050
it's a NASA medical algorithm you can

490
00:19:12,050 --> 00:19:13,940
only validate keys with this public key

491
00:19:13,940 --> 00:19:15,890
you cannot create a new key because you

492
00:19:15,890 --> 00:19:17,630
need to private key for that and that

493
00:19:17,630 --> 00:19:19,520
private key obviously we're going to

494
00:19:19,520 --> 00:19:21,190
keep private

495
00:19:21,190 --> 00:19:25,400
so don't well known /w I change wks for

496
00:19:25,400 --> 00:19:27,590
Chase and is often the the place to find

497
00:19:27,590 --> 00:19:30,680
these public keys so let's make a little

498
00:19:30,680 --> 00:19:33,860
comparison on the right you have a

499
00:19:33,860 --> 00:19:35,780
Belgian passports in four languages

500
00:19:35,780 --> 00:19:37,130
because we like to make it a bit more

501
00:19:37,130 --> 00:19:39,590
difficult but what it says is I'm a

502
00:19:39,590 --> 00:19:41,750
password password issued by the kingdom

503
00:19:41,750 --> 00:19:43,610
of Belgium and I'm from the European

504
00:19:43,610 --> 00:19:45,530
Union and basically you can compare this

505
00:19:45,530 --> 00:19:47,180
to the heatheravan JSON web token

506
00:19:47,180 --> 00:19:49,880
because the passwords on the from it

507
00:19:49,880 --> 00:19:51,740
says what it is and Heather OHS web

508
00:19:51,740 --> 00:19:54,200
token also just mentions koala days I'm

509
00:19:54,200 --> 00:19:57,380
a JSON web token and you can use this

510
00:19:57,380 --> 00:20:00,260
algorithm to verify my signature if you

511
00:20:00,260 --> 00:20:02,390
open the password you might see some

512
00:20:02,390 --> 00:20:04,400
about myself my picture my name is her

513
00:20:04,400 --> 00:20:07,400
name the expiry of the passport and the

514
00:20:07,400 --> 00:20:09,230
same can be true for Jason of token if

515
00:20:09,230 --> 00:20:10,610
you look inside the payload you might

516
00:20:10,610 --> 00:20:12,920
find some information that's related to

517
00:20:12,920 --> 00:20:15,170
the identity if it's a tiny token and as

518
00:20:15,170 --> 00:20:18,590
well an expiry date then of course most

519
00:20:18,590 --> 00:20:21,050
passports have some ways of determining

520
00:20:21,050 --> 00:20:23,360
if it's a valid passport yes or no some

521
00:20:23,360 --> 00:20:25,550
UV marks or some ID some fingerprints

522
00:20:25,550 --> 00:20:27,950
stuff or whatever and the same is for a

523
00:20:27,950 --> 00:20:30,680
JSON web token it has a signature that

524
00:20:30,680 --> 00:20:33,290
lets you pollinate the token so he can

525
00:20:33,290 --> 00:20:36,070
be sure that nobody tried to attempt to

526
00:20:36,070 --> 00:20:38,360
change something in the payload or the

527
00:20:38,360 --> 00:20:41,690
Heather so basically a chestnut token is

528
00:20:41,690 --> 00:20:45,770
a passwords on the web so let's see one

529
00:20:45,770 --> 00:20:50,870
in action so I have this little web app

530
00:20:50,870 --> 00:20:52,970
here in front of me and it has two

531
00:20:52,970 --> 00:20:55,940
buttons one to show you dog pictures and

532
00:20:55,940 --> 00:20:57,380
every time I click on it I get a random

533
00:20:57,380 --> 00:21:00,050
talk picture which is nice it also has

534
00:21:00,050 --> 00:21:02,030
another button that will do the same for

535
00:21:02,030 --> 00:21:04,300
cats but anybody who knows

536
00:21:04,300 --> 00:21:06,620
the cat knows that cats are a bit

537
00:21:06,620 --> 00:21:08,600
they're a bit more difficult to work

538
00:21:08,600 --> 00:21:10,760
with them dogs so to show you get

539
00:21:10,760 --> 00:21:13,670
pictures you need to be authenticated if

540
00:21:13,670 --> 00:21:16,700
you click on the login button and you're

541
00:21:16,700 --> 00:21:21,650
sending Kate with Google just because

542
00:21:21,650 --> 00:21:22,160
it's easy

543
00:21:22,160 --> 00:21:25,580
we know authenticated successfully and a

544
00:21:25,580 --> 00:21:27,410
few things as have happens the first

545
00:21:27,410 --> 00:21:29,030
thing we can see is that we now have my

546
00:21:29,030 --> 00:21:30,590
username and my picture already

547
00:21:30,590 --> 00:21:33,200
displayed on the right top sides this is

548
00:21:33,200 --> 00:21:34,700
because when we are medicated and our

549
00:21:34,700 --> 00:21:36,800
authentication was successful we issued

550
00:21:36,800 --> 00:21:38,570
a tiny token which contains the

551
00:21:38,570 --> 00:21:40,040
information about the identity of the

552
00:21:40,040 --> 00:21:42,710
person that's authenticated successfully

553
00:21:42,710 --> 00:21:44,510
and we can then use that ID token and

554
00:21:44,510 --> 00:21:47,150
show the data inside of a token but we

555
00:21:47,150 --> 00:21:49,670
didn't only issue an ID token we also

556
00:21:49,670 --> 00:21:52,670
issued an access token so we can show

557
00:21:52,670 --> 00:21:55,670
cat pictures so now with every quest -

558
00:21:55,670 --> 00:21:58,100
or back-end or API for it get picture

559
00:21:58,100 --> 00:22:00,260
we're going to send along the access

560
00:22:00,260 --> 00:22:03,950
token as well if you look at this from

561
00:22:03,950 --> 00:22:06,410
an API perspective we have in a very

562
00:22:06,410 --> 00:22:09,260
simplified version we have an

563
00:22:09,260 --> 00:22:10,520
authorization or authentication

564
00:22:10,520 --> 00:22:15,170
endpoints and if we run this

565
00:22:15,170 --> 00:22:18,280
oops I'm sorry I click to stop sharing

566
00:22:18,280 --> 00:22:21,980
but instead of Lee so let's try that

567
00:22:21,980 --> 00:22:26,330
again let me move this if you click this

568
00:22:26,330 --> 00:22:28,280
and and username and password are

569
00:22:28,280 --> 00:22:31,220
correct we will be issued a JSON web

570
00:22:31,220 --> 00:22:34,700
token let's copy this for later if you

571
00:22:34,700 --> 00:22:36,260
want to request in your dog picture we

572
00:22:36,260 --> 00:22:37,610
just click on it and since the dog

573
00:22:37,610 --> 00:22:40,880
picture endpoint is public we can just

574
00:22:40,880 --> 00:22:42,559
request our pictures as many as we want

575
00:22:42,559 --> 00:22:44,630
and then if you want to get a cat

576
00:22:44,630 --> 00:22:46,670
picture we'll see that once we tried to

577
00:22:46,670 --> 00:22:48,710
request it we get an error stating no

578
00:22:48,710 --> 00:22:51,710
authorization token was found so we'll

579
00:22:51,710 --> 00:22:53,660
have to send along is a very topical and

580
00:22:53,660 --> 00:22:56,059
if I paste in the one we just requested

581
00:22:56,059 --> 00:22:58,820
it should work and it does we can

582
00:22:58,820 --> 00:23:02,480
request cat pictures but like I said

583
00:23:02,480 --> 00:23:04,400
chestnut tokens they they already

584
00:23:04,400 --> 00:23:06,500
contain some information inside of them

585
00:23:06,500 --> 00:23:07,940
concerning the validity if they are

586
00:23:07,940 --> 00:23:10,130
expired or not for example and they also

587
00:23:10,130 --> 00:23:12,290
have this signature that determines if

588
00:23:12,290 --> 00:23:14,750
somebody tried to tamper with them so if

589
00:23:14,750 --> 00:23:18,350
he would copy an expired system I'm

590
00:23:18,350 --> 00:23:20,540
talking to try to pass that one without

591
00:23:20,540 --> 00:23:22,400
doing any extra requests as soon as we

592
00:23:22,400 --> 00:23:23,840
try to use this one we're going to look

593
00:23:23,840 --> 00:23:26,090
inside of a token and see that the JSON

594
00:23:26,090 --> 00:23:28,250
web token it's not valid anymore because

595
00:23:28,250 --> 00:23:31,160
the expiry date is in the past and the

596
00:23:31,160 --> 00:23:35,840
same goes for HSN web token which of

597
00:23:35,840 --> 00:23:39,350
which the signature doesn't match the

598
00:23:39,350 --> 00:23:41,210
content of the payload and the Heather

599
00:23:41,210 --> 00:23:43,070
so once we try to use one of those

600
00:23:43,070 --> 00:23:45,140
tokens we can see that it's invalid

601
00:23:45,140 --> 00:23:46,940
signature and we will not accept it as

602
00:23:46,940 --> 00:23:49,419
well so without doing any extra requests

603
00:23:49,419 --> 00:23:53,510
we were able to recheck tokens on based

604
00:23:53,510 --> 00:23:55,309
on the expiry dates based on the

605
00:23:55,309 --> 00:23:58,370
signature you could also reject them

606
00:23:58,370 --> 00:24:00,440
based on scopes for example if your user

607
00:24:00,440 --> 00:24:02,030
is not allowed to access certain

608
00:24:02,030 --> 00:24:08,750
endpoints and some other things if you

609
00:24:08,750 --> 00:24:10,280
want to know more chaste love token

610
00:24:10,280 --> 00:24:12,110
denial which is the website I showed

611
00:24:12,110 --> 00:24:14,990
earlier which contains his debugger it's

612
00:24:14,990 --> 00:24:17,059
it's built and maintained by or zero

613
00:24:17,059 --> 00:24:21,860
just as a disclaimer and we do not do

614
00:24:21,860 --> 00:24:23,300
anything with them we don't send them to

615
00:24:23,300 --> 00:24:24,860
a back-end it's all done on the front

616
00:24:24,860 --> 00:24:26,540
end so you can safely paste your Jason

617
00:24:26,540 --> 00:24:27,150
up Tommy

618
00:24:27,150 --> 00:24:29,820
not some a pyramid scheme that tries to

619
00:24:29,820 --> 00:24:33,300
steal your takis it also contains a

620
00:24:33,300 --> 00:24:35,970
bunch of libraries in a lot of different

621
00:24:35,970 --> 00:24:38,880
languages just so it can make your life

622
00:24:38,880 --> 00:24:40,470
a bit easier working with Jason of

623
00:24:40,470 --> 00:24:41,880
tokens you don't have to do all of my

624
00:24:41,880 --> 00:24:45,110
validation logic yourself

625
00:24:45,110 --> 00:24:47,400
there's also JSON web token handbook

626
00:24:47,400 --> 00:24:49,740
it's it's an e-book which we reach the

627
00:24:49,740 --> 00:24:52,200
roads and it goes very in-depth into

628
00:24:52,200 --> 00:24:54,030
everything Jason map token if you really

629
00:24:54,030 --> 00:24:55,470
want to know all the dirty secrets and

630
00:24:55,470 --> 00:24:57,480
all the dirty details I suggest you read

631
00:24:57,480 --> 00:24:59,550
this it's it's very interesting if you

632
00:24:59,550 --> 00:25:01,679
want to know it all but this goes beyond

633
00:25:01,679 --> 00:25:04,890
the basic usage of Jason web tokens so

634
00:25:04,890 --> 00:25:06,390
are there some downsides to chase some

635
00:25:06,390 --> 00:25:08,580
web tokens of course is a downside to

636
00:25:08,580 --> 00:25:11,670
anything in validation of token is a bit

637
00:25:11,670 --> 00:25:13,350
harder because interesting talking

638
00:25:13,350 --> 00:25:15,000
contains all of the information inside

639
00:25:15,000 --> 00:25:15,690
of it

640
00:25:15,690 --> 00:25:17,370
it contains expiry date it contains

641
00:25:17,370 --> 00:25:19,710
scopes or whatever as soon as you issue

642
00:25:19,710 --> 00:25:22,380
a Jason up token it's out there it's

643
00:25:22,380 --> 00:25:25,950
felt until the token becomes invalid so

644
00:25:25,950 --> 00:25:28,050
if you want to revoke one becomes a bit

645
00:25:28,050 --> 00:25:30,210
harder this is usually done with a

646
00:25:30,210 --> 00:25:31,770
blacklist or whitelist so you're going

647
00:25:31,770 --> 00:25:33,240
to check that like a whitelist first

648
00:25:33,240 --> 00:25:35,840
before you're going to validate a token

649
00:25:35,840 --> 00:25:39,720
which is a bit more annoying if you want

650
00:25:39,720 --> 00:25:42,360
to do that also if you leave your secret

651
00:25:42,360 --> 00:25:44,880
or your private keys that can be a

652
00:25:44,880 --> 00:25:46,170
headache because it means that everybody

653
00:25:46,170 --> 00:25:49,650
can just create address web tokens for

654
00:25:49,650 --> 00:25:52,200
your API or services and we don't want

655
00:25:52,200 --> 00:25:54,059
that that's why it's called secrets and

656
00:25:54,059 --> 00:25:55,559
private keys able to keep them very

657
00:25:55,559 --> 00:25:57,480
secure somewhere where we know that

658
00:25:57,480 --> 00:26:00,780
they're safe and again don't put any

659
00:26:00,780 --> 00:26:02,700
sensitive data NHSN I'm talking because

660
00:26:02,700 --> 00:26:06,090
it's just a 64 and we can go to big sis

661
00:26:06,090 --> 00:26:07,800
bay 64 encoded comm

662
00:26:07,800 --> 00:26:09,990
or whatever website exists and paste it

663
00:26:09,990 --> 00:26:11,520
in there and see what's in the JSON web

664
00:26:11,520 --> 00:26:15,210
tokens so we've seen what it is a love

665
00:26:15,210 --> 00:26:17,220
token is let's see how we can use them

666
00:26:17,220 --> 00:26:20,610
with a token based approach and with

667
00:26:20,610 --> 00:26:22,950
single based applications so again the

668
00:26:22,950 --> 00:26:24,780
same examples in the beginning user

669
00:26:24,780 --> 00:26:27,290
browser back-end API whatever you have

670
00:26:27,290 --> 00:26:30,900
the user just requests pages until it

671
00:26:30,900 --> 00:26:33,179
hits eight protect API endpoints and

672
00:26:33,179 --> 00:26:35,160
it's going to try to authenticate with

673
00:26:35,160 --> 00:26:37,290
its username password its credentials if

674
00:26:37,290 --> 00:26:40,240
they match we're going to send back

675
00:26:40,240 --> 00:26:43,030
and access token and instead of a cookie

676
00:26:43,030 --> 00:26:44,590
which we saw the beginning we're going

677
00:26:44,590 --> 00:26:48,100
to send back an access token stored

678
00:26:48,100 --> 00:26:50,680
somewhere in memory and every time we

679
00:26:50,680 --> 00:26:52,360
want to request it it protected API

680
00:26:52,360 --> 00:26:54,280
endpoint after that we're going to send

681
00:26:54,280 --> 00:26:56,500
along the access token to prove that we

682
00:26:56,500 --> 00:26:59,740
have access to that API endpoints and

683
00:26:59,740 --> 00:27:01,990
once we have access we can just just get

684
00:27:01,990 --> 00:27:06,550
back all the data we need adjacent or in

685
00:27:06,550 --> 00:27:09,040
JavaScript it's can look something like

686
00:27:09,040 --> 00:27:11,050
this and the important part is that you

687
00:27:11,050 --> 00:27:14,410
set the authorization header to bear and

688
00:27:14,410 --> 00:27:17,050
the adjacent token just so your API can

689
00:27:17,050 --> 00:27:20,290
find the token and see if it's valid for

690
00:27:20,290 --> 00:27:24,400
that API or not and there's a few

691
00:27:24,400 --> 00:27:25,870
frameworks that deal with token-based

692
00:27:25,870 --> 00:27:27,640
authentication on the web the most

693
00:27:27,640 --> 00:27:30,670
famous one is off and if you look at the

694
00:27:30,670 --> 00:27:33,880
the definition of all it's all stupid or

695
00:27:33,880 --> 00:27:35,200
is a protocol that allows the user to

696
00:27:35,200 --> 00:27:37,440
grant limited access to their resources

697
00:27:37,440 --> 00:27:39,820
and that's that's the most important

698
00:27:39,820 --> 00:27:41,830
part of the specification that allows

699
00:27:41,830 --> 00:27:43,660
you to grant limited access to the

700
00:27:43,660 --> 00:27:46,000
resources which means that you can grant

701
00:27:46,000 --> 00:27:47,830
access to certain parts of an API

702
00:27:47,830 --> 00:27:50,200
instead of the whole parts instead of

703
00:27:50,200 --> 00:27:52,630
the whole API and the other important

704
00:27:52,630 --> 00:27:54,850
part of this is that it's used to grant

705
00:27:54,850 --> 00:27:56,650
access but it's not used to authenticate

706
00:27:56,650 --> 00:27:59,410
it's not used or it should not be used

707
00:27:59,410 --> 00:28:04,960
to handle identity so for example if you

708
00:28:04,960 --> 00:28:06,670
want to import gmail contacts into your

709
00:28:06,670 --> 00:28:08,650
application you're going to use off to

710
00:28:08,650 --> 00:28:11,380
access Gmail can I please get access to

711
00:28:11,380 --> 00:28:14,530
the context of this user and can I

712
00:28:14,530 --> 00:28:16,420
please just copy them to my application

713
00:28:16,420 --> 00:28:18,880
but you're not going to request access

714
00:28:18,880 --> 00:28:20,860
to Gmail itself or to the identity of

715
00:28:20,860 --> 00:28:23,530
your gmail user just your complex in

716
00:28:23,530 --> 00:28:26,500
this example and the other side is open

717
00:28:26,500 --> 00:28:30,100
and it connects which by its definition

718
00:28:30,100 --> 00:28:32,140
open and in connect was created as an

719
00:28:32,140 --> 00:28:34,780
identity layer from off to point out so

720
00:28:34,780 --> 00:28:37,260
if we take everything from off all the

721
00:28:37,260 --> 00:28:40,000
everything that's specified and just add

722
00:28:40,000 --> 00:28:41,950
an identity layer on top of that we have

723
00:28:41,950 --> 00:28:44,680
open ID correct open ID Connect

724
00:28:44,680 --> 00:28:47,440
weather and this you can use for example

725
00:28:47,440 --> 00:28:49,390
log in with Google because when you log

726
00:28:49,390 --> 00:28:52,030
in with Google you're going to ask some

727
00:28:52,030 --> 00:28:53,389
information about the identity or

728
00:28:53,389 --> 00:28:55,399
your Google user and not you're not

729
00:28:55,399 --> 00:28:57,139
going to ask can I please copy all of

730
00:28:57,139 --> 00:28:59,320
your contacts you just wanted some

731
00:28:59,320 --> 00:29:02,479
identity related information you could

732
00:29:02,479 --> 00:29:04,039
ask for more information like copying

733
00:29:04,039 --> 00:29:06,499
the contacts as well open and you can I

734
00:29:06,499 --> 00:29:08,450
can do that since it's just a layer on

735
00:29:08,450 --> 00:29:10,909
top of earth so it has everything that

736
00:29:10,909 --> 00:29:15,049
earth can do and then some if you look

737
00:29:15,049 --> 00:29:17,629
at this in a any in an example I split

738
00:29:17,629 --> 00:29:19,309
my authorization server from the rest of

739
00:29:19,309 --> 00:29:21,289
my API just because it's easier to

740
00:29:21,289 --> 00:29:23,690
explain like this so when a user wants

741
00:29:23,690 --> 00:29:26,029
to login we sent the credential still

742
00:29:26,029 --> 00:29:28,339
authorization server and if they're if

743
00:29:28,339 --> 00:29:30,979
they're valid we send back the access

744
00:29:30,979 --> 00:29:32,869
token and we can also send back an ID

745
00:29:32,869 --> 00:29:34,929
token and if you really want to a

746
00:29:34,929 --> 00:29:38,149
refresh token as well and we say from

747
00:29:38,149 --> 00:29:39,679
somewhere in memory and every time we

748
00:29:39,679 --> 00:29:42,559
want to do a request or API which is to

749
00:29:42,559 --> 00:29:44,809
agree to a protected API endpoint we

750
00:29:44,809 --> 00:29:47,779
come to send along the access token we

751
00:29:47,779 --> 00:29:49,609
might use the ID token to show some

752
00:29:49,609 --> 00:29:52,070
identity related information on our web

753
00:29:52,070 --> 00:29:55,669
app and if the token is hard you get

754
00:29:55,669 --> 00:29:58,489
your data back but I've mentioned before

755
00:29:58,489 --> 00:30:00,349
a few times that we save them in memory

756
00:30:00,349 --> 00:30:02,570
and I deliberately say in memory and not

757
00:30:02,570 --> 00:30:05,389
somewhere and local storage or in index

758
00:30:05,389 --> 00:30:09,679
DB or whatever because if you store them

759
00:30:09,679 --> 00:30:11,299
somewhere persistently they become my

760
00:30:11,299 --> 00:30:13,749
targets or become very vulnerable for

761
00:30:13,749 --> 00:30:17,379
exercising tags and we don't want that

762
00:30:17,379 --> 00:30:20,450
so if we start them somewhere in memory

763
00:30:20,450 --> 00:30:22,459
this means that the user has to log in

764
00:30:22,459 --> 00:30:24,349
with every visit because the tokens will

765
00:30:24,349 --> 00:30:25,940
be gone as soon as the user refreshes

766
00:30:25,940 --> 00:30:27,979
your page or if it goes away from your

767
00:30:27,979 --> 00:30:29,749
web app and it comes back on our data

768
00:30:29,749 --> 00:30:32,659
points it doesn't mean that the

769
00:30:32,659 --> 00:30:33,889
beginning of the logon flow remains the

770
00:30:33,889 --> 00:30:36,320
same as in the previous example we can't

771
00:30:36,320 --> 00:30:38,119
or tokens back or access token or any

772
00:30:38,119 --> 00:30:41,719
token and very maybe your refresh token

773
00:30:41,719 --> 00:30:43,729
and together windows or authorization

774
00:30:43,729 --> 00:30:46,359
server will also issue a session cookie

775
00:30:46,359 --> 00:30:50,539
and then with each next visit we will

776
00:30:50,539 --> 00:30:52,700
just send the session cookie first or

777
00:30:52,700 --> 00:30:54,409
authorization server if the session

778
00:30:54,409 --> 00:30:57,019
inside of that cookie is still valid the

779
00:30:57,019 --> 00:30:58,820
authorization server will fetch we'll

780
00:30:58,820 --> 00:31:00,919
return the token so he needs and we can

781
00:31:00,919 --> 00:31:04,009
do the rest of her of her business that

782
00:31:04,009 --> 00:31:06,269
we want to do with all of you tokens

783
00:31:06,269 --> 00:31:08,879
we go to save this cookie or the

784
00:31:08,879 --> 00:31:10,739
browsers go to save this cookie and as

785
00:31:10,739 --> 00:31:12,119
soon as you bootstrap your single page

786
00:31:12,119 --> 00:31:13,799
application you're going to send this to

787
00:31:13,799 --> 00:31:15,749
your authorization server often in an

788
00:31:15,749 --> 00:31:17,369
iframe in the background it's called a

789
00:31:17,369 --> 00:31:19,169
silent request and if the session is

790
00:31:19,169 --> 00:31:21,119
still valid in my cookie you get your

791
00:31:21,119 --> 00:31:22,529
tokens which means that you fetch new

792
00:31:22,529 --> 00:31:24,450
tokens with each refresher or with each

793
00:31:24,450 --> 00:31:26,399
new visits which also means that you can

794
00:31:26,399 --> 00:31:28,259
rotate your tokens that you can issue a

795
00:31:28,259 --> 00:31:31,440
new tolerance which each with each new

796
00:31:31,440 --> 00:31:33,119
visit which makes it a bit more secure

797
00:31:33,119 --> 00:31:34,979
and you don't have to store your tokens

798
00:31:34,979 --> 00:31:36,869
are persistently like local storage or

799
00:31:36,869 --> 00:31:38,539
session storage or in xep

800
00:31:38,539 --> 00:31:41,279
so they are less vulnerable for XSS

801
00:31:41,279 --> 00:31:44,899
attacks and then you can use your tokens

802
00:31:44,899 --> 00:31:47,639
this example use the earth implicit form

803
00:31:47,639 --> 00:31:50,549
which is the most used or the floor for

804
00:31:50,549 --> 00:31:53,789
single based applications but there's a

805
00:31:53,789 --> 00:31:55,769
few things that are not so great about

806
00:31:55,769 --> 00:31:59,039
this talk about this flow they have been

807
00:31:59,039 --> 00:32:01,409
sufficient with a regular validation

808
00:32:01,409 --> 00:32:04,769
they can be credentials by the referer

809
00:32:04,769 --> 00:32:08,609
header they might expose your tokens or

810
00:32:08,609 --> 00:32:11,249
your your access token in the browser

811
00:32:11,249 --> 00:32:13,079
history and they might be favorable for

812
00:32:13,079 --> 00:32:16,889
token injection most of these have been

813
00:32:16,889 --> 00:32:19,049
solved by some workarounds like

814
00:32:19,049 --> 00:32:20,159
insufficient to redirect your

815
00:32:20,159 --> 00:32:22,049
invalidation you can enforce a strict

816
00:32:22,049 --> 00:32:23,789
match between yet redirect your I

817
00:32:23,789 --> 00:32:26,969
requested a trendline and one previously

818
00:32:26,969 --> 00:32:28,649
gesture because usually when you want to

819
00:32:28,649 --> 00:32:30,959
work with off or open ID connect your

820
00:32:30,959 --> 00:32:32,639
come to which history clients which

821
00:32:32,639 --> 00:32:35,089
lives on a certain your I so only

822
00:32:35,089 --> 00:32:37,950
clients from that URI can fetch tokens

823
00:32:37,950 --> 00:32:40,889
or can request new tokens potential

824
00:32:40,889 --> 00:32:43,529
leakage can be solved by your fur policy

825
00:32:43,529 --> 00:32:47,909
Heather and the broader history leaking

826
00:32:47,909 --> 00:32:49,529
you're talking about history can also be

827
00:32:49,529 --> 00:32:52,709
solved most at a time by use any form

828
00:32:52,709 --> 00:32:54,509
post response modes that's not always

829
00:32:54,509 --> 00:32:56,609
possible single page applications but it

830
00:32:56,609 --> 00:32:58,139
might be you might be able to solve it

831
00:32:58,139 --> 00:33:00,479
with it but because of these

832
00:33:00,479 --> 00:33:02,519
vulnerabilities the IETF which is the

833
00:33:02,519 --> 00:33:03,950
internet Engineering Task Force

834
00:33:03,950 --> 00:33:06,029
published a new best practices document

835
00:33:06,029 --> 00:33:08,549
stating that you to try to avoid the

836
00:33:08,549 --> 00:33:11,899
implicit form and go to a new flow

837
00:33:11,899 --> 00:33:14,429
called the other authorization code with

838
00:33:14,429 --> 00:33:16,919
proof key for code exchange pixie very

839
00:33:16,919 --> 00:33:18,419
short flow which

840
00:33:18,419 --> 00:33:20,159
a bit more complicated but Seoul's most

841
00:33:20,159 --> 00:33:22,379
or all of these issues that the implicit

842
00:33:22,379 --> 00:33:24,929
flow has if you want to read more about

843
00:33:24,929 --> 00:33:29,100
the whys of why the IDF advises to use a

844
00:33:29,100 --> 00:33:30,739
pixie flow you can find it in this URL

845
00:33:30,739 --> 00:33:33,330
or at this blog post that we wrote which

846
00:33:33,330 --> 00:33:34,859
explains what's wrong with your business

847
00:33:34,859 --> 00:33:39,749
flow in a very readable way so if you

848
00:33:39,749 --> 00:33:43,639
look at the pixie flow for a minute or

849
00:33:43,639 --> 00:33:46,679
example the setup is still the same

850
00:33:46,679 --> 00:33:48,539
River browser we have our two API is one

851
00:33:48,539 --> 00:33:50,549
for authorization and authentication and

852
00:33:50,549 --> 00:33:51,929
the other one for just all the rather

853
00:33:51,929 --> 00:33:54,960
regular other stuff but when we send or

854
00:33:54,960 --> 00:33:56,429
where we redirect to authorization

855
00:33:56,429 --> 00:33:58,080
server to enter the user credentials

856
00:33:58,080 --> 00:34:00,119
username and password we're not only

857
00:34:00,119 --> 00:34:02,159
going to do the redirect and that user

858
00:34:02,159 --> 00:34:04,350
enter the credentials on the page we're

859
00:34:04,350 --> 00:34:06,779
also going to send a code challenge to

860
00:34:06,779 --> 00:34:09,960
that page and once the user has entered

861
00:34:09,960 --> 00:34:12,359
their credentials it's going to send us

862
00:34:12,359 --> 00:34:15,619
back a code which we then can use to

863
00:34:15,619 --> 00:34:18,989
create a code verifier and we send the

864
00:34:18,989 --> 00:34:20,699
code back with the code verify that your

865
00:34:20,699 --> 00:34:22,980
authorization server so together with

866
00:34:22,980 --> 00:34:25,109
this first code challenge this code and

867
00:34:25,109 --> 00:34:27,359
the code or verifier of our

868
00:34:27,359 --> 00:34:29,369
authorization server can be sure that it

869
00:34:29,369 --> 00:34:31,500
was the same client that initiated the

870
00:34:31,500 --> 00:34:33,359
request that is going to receive the

871
00:34:33,359 --> 00:34:40,949
tokens in the ends so a little note

872
00:34:40,949 --> 00:34:44,569
about access tokens as JSON web tokens

873
00:34:44,569 --> 00:34:47,819
or often open ID connect do not specify

874
00:34:47,819 --> 00:34:49,889
what format an access token should be

875
00:34:49,889 --> 00:34:52,020
they do not have to be just web targets

876
00:34:52,020 --> 00:34:54,629
they can be anything a lot of people

877
00:34:54,629 --> 00:34:57,660
just use opaque UID strings as access

878
00:34:57,660 --> 00:34:59,670
tokens and that's perfectly fine

879
00:34:59,670 --> 00:35:01,589
there is however an int after I have to

880
00:35:01,589 --> 00:35:04,470
standardize the way you can use Jason

881
00:35:04,470 --> 00:35:08,460
app Toby's as access tokens and if you

882
00:35:08,460 --> 00:35:10,770
would look at that it would look a bit

883
00:35:10,770 --> 00:35:13,040
similar like the ones I showed before

884
00:35:13,040 --> 00:35:16,799
type will be excess token bus Jason I'm

885
00:35:16,799 --> 00:35:18,180
talking and it basically tries to

886
00:35:18,180 --> 00:35:20,520
standardize all of the contents inside

887
00:35:20,520 --> 00:35:22,799
of the payload so if you want to use

888
00:35:22,799 --> 00:35:24,599
just web tokens as an access token it

889
00:35:24,599 --> 00:35:26,400
might be good to look at the standards

890
00:35:26,400 --> 00:35:28,680
or just draft or standards because it

891
00:35:28,680 --> 00:35:29,430
might become

892
00:35:29,430 --> 00:35:33,150
in the future if however you're working

893
00:35:33,150 --> 00:35:35,280
with ID tokens they're always going to

894
00:35:35,280 --> 00:35:37,349
be HSN app token because they open and

895
00:35:37,349 --> 00:35:39,720
you can expect specifies that I think

896
00:35:39,720 --> 00:35:43,559
token is going to be HSN app token

897
00:35:43,559 --> 00:35:45,059
mainly because it contains some

898
00:35:45,059 --> 00:35:46,589
information about yet entities so we

899
00:35:46,589 --> 00:35:48,720
want to have a form of token that can

900
00:35:48,720 --> 00:35:51,480
contains a payload like a JSON web token

901
00:35:51,480 --> 00:35:55,410
and then a note about refresh tokens and

902
00:35:55,410 --> 00:35:58,559
single page applications in a refresh

903
00:35:58,559 --> 00:36:02,369
token allows you to request a new access

904
00:36:02,369 --> 00:36:04,109
token if your access token is expired

905
00:36:04,109 --> 00:36:07,680
and this is something very powerful but

906
00:36:07,680 --> 00:36:09,510
because single page applications have a

907
00:36:09,510 --> 00:36:12,000
lot of logic on the front end they

908
00:36:12,000 --> 00:36:14,579
become a bit more vulnerable to attacks

909
00:36:14,579 --> 00:36:16,800
XSS attacks and whatever so if it

910
00:36:16,800 --> 00:36:18,569
refresh token would get stolen

911
00:36:18,569 --> 00:36:20,940
that would be dramatic and the chances

912
00:36:20,940 --> 00:36:22,740
of them getting stolen are a bit higher

913
00:36:22,740 --> 00:36:24,839
with single page applications compared

914
00:36:24,839 --> 00:36:27,900
to other kinds of applications so if you

915
00:36:27,900 --> 00:36:29,730
want to use refresh tokens in the

916
00:36:29,730 --> 00:36:31,470
front-end you should try to avoid it

917
00:36:31,470 --> 00:36:33,420
unless a system of refresh token

918
00:36:33,420 --> 00:36:35,339
rotation or sender constrains is in

919
00:36:35,339 --> 00:36:37,500
place and what this means is unless you

920
00:36:37,500 --> 00:36:39,750
rotate your refresh tokens every time

921
00:36:39,750 --> 00:36:41,490
they use you use your refresh hope you

922
00:36:41,490 --> 00:36:43,470
come to issue a new token or maybe you

923
00:36:43,470 --> 00:36:44,460
can do this also on a time-based

924
00:36:44,460 --> 00:36:46,770
approach or if you can with sender

925
00:36:46,770 --> 00:36:48,240
constraint which is something

926
00:36:48,240 --> 00:36:50,400
theoretically possible but there's no

927
00:36:50,400 --> 00:36:52,349
real way of doing this yet some people

928
00:36:52,349 --> 00:36:54,210
are thinking about how to do this and

929
00:36:54,210 --> 00:36:56,970
this means that you can tie a token to a

930
00:36:56,970 --> 00:36:59,809
sender and a receiver to the sender

931
00:36:59,809 --> 00:37:03,260
mostly that's not really possible yet

932
00:37:03,260 --> 00:37:06,180
refresh token rotation is possible but

933
00:37:06,180 --> 00:37:08,460
my advice would be to avoid using

934
00:37:08,460 --> 00:37:11,069
refresh tokens in the front end and use

935
00:37:11,069 --> 00:37:14,190
a way like this silent request I showed

936
00:37:14,190 --> 00:37:17,280
earlier to fetch new tokens on every

937
00:37:17,280 --> 00:37:21,359
refresh or every new revisits so this is

938
00:37:21,359 --> 00:37:23,880
a proof of purchase all for course you

939
00:37:23,880 --> 00:37:25,980
can wonder yourself if you think this

940
00:37:25,980 --> 00:37:30,240
disappered solves for course and my my

941
00:37:30,240 --> 00:37:31,770
answer to that question would be yes

942
00:37:31,770 --> 00:37:34,730
because a token is not issued based on a

943
00:37:34,730 --> 00:37:37,410
common origin a token that's been issued

944
00:37:37,410 --> 00:37:39,510
by a certain server can be used by

945
00:37:39,510 --> 00:37:40,940
another server other or

946
00:37:40,940 --> 00:37:43,010
other domain as long as the other party

947
00:37:43,010 --> 00:37:45,290
also knows how to validate that token so

948
00:37:45,290 --> 00:37:47,150
if it has access to the public key or

949
00:37:47,150 --> 00:37:49,730
the shared secrets it can validate the

950
00:37:49,730 --> 00:37:51,109
signature and can look inside of the

951
00:37:51,109 --> 00:37:53,920
token and determine if it's still valid

952
00:37:53,920 --> 00:37:57,200
the same thing goes for a flow you can

953
00:37:57,200 --> 00:37:58,670
pass along targets from one server to

954
00:37:58,670 --> 00:38:00,380
the other is this usually not done

955
00:38:00,380 --> 00:38:01,819
you're usually going to exchange it with

956
00:38:01,819 --> 00:38:04,400
token endpoints for a new token but in

957
00:38:04,400 --> 00:38:06,260
theory you can just pass among tokens

958
00:38:06,260 --> 00:38:09,500
from a PRT API as long as all of your

959
00:38:09,500 --> 00:38:11,599
api's know how to validate that token

960
00:38:11,599 --> 00:38:14,859
and this is a part of keeping States

961
00:38:14,859 --> 00:38:17,720
interior does solve that problem because

962
00:38:17,720 --> 00:38:19,550
they just have token contains all the

963
00:38:19,550 --> 00:38:21,950
information you need about you need to

964
00:38:21,950 --> 00:38:23,839
verify the token but if you want to do

965
00:38:23,839 --> 00:38:26,119
some more things like keeping a

966
00:38:26,119 --> 00:38:28,280
blacklist or whitelist of invalidated

967
00:38:28,280 --> 00:38:30,770
tokens or if you want to do the silent

968
00:38:30,770 --> 00:38:32,119
approach for which you're going to issue

969
00:38:32,119 --> 00:38:35,599
a session cookie anyway you might have

970
00:38:35,599 --> 00:38:39,079
to keep in a state after all so let's

971
00:38:39,079 --> 00:38:39,940
summarize

972
00:38:39,940 --> 00:38:42,020
using session cookies is hard to think

973
00:38:42,020 --> 00:38:45,260
of mesh applications mostly because we

974
00:38:45,260 --> 00:38:47,119
work with different origins we often

975
00:38:47,119 --> 00:38:48,770
have multiple API endpoints you might

976
00:38:48,770 --> 00:38:50,960
have some external API eyes as well and

977
00:38:50,960 --> 00:38:53,390
this gives us some course issues for

978
00:38:53,390 --> 00:38:55,819
issues and we might have to keep some

979
00:38:55,819 --> 00:38:58,280
states which we've seen just now that

980
00:38:58,280 --> 00:39:00,200
you might also have to do wastage of

981
00:39:00,200 --> 00:39:02,720
tokens but anyway it's a bit harder

982
00:39:02,720 --> 00:39:05,450
stateless authentication is possible if

983
00:39:05,450 --> 00:39:06,800
you're not doing it like there's a

984
00:39:06,800 --> 00:39:09,319
whitelist or the silence requests

985
00:39:09,319 --> 00:39:11,900
approach and Jason web tokens consists

986
00:39:11,900 --> 00:39:13,700
out of three parts the header which

987
00:39:13,700 --> 00:39:15,079
contains some information about the

988
00:39:15,079 --> 00:39:17,420
token itself the payload which contains

989
00:39:17,420 --> 00:39:19,760
all of the other information that your

990
00:39:19,760 --> 00:39:22,460
API or service is going to need to in

991
00:39:22,460 --> 00:39:25,250
order to work with this token and the

992
00:39:25,250 --> 00:39:28,670
signature which lets you verify the

993
00:39:28,670 --> 00:39:31,329
content of that header and that payload

994
00:39:31,329 --> 00:39:33,560
if you wanna know more Jason up to

995
00:39:33,560 --> 00:39:35,930
condole IO the blog post I mentioned

996
00:39:35,930 --> 00:39:38,060
before my new blog is full of other

997
00:39:38,060 --> 00:39:41,150
interesting material as well if you want

998
00:39:41,150 --> 00:39:42,859
to find these slides again I chase

999
00:39:42,859 --> 00:39:44,540
enough tokens on some big enough tech

1000
00:39:44,540 --> 00:39:47,690
but there will be this link will also be

1001
00:39:47,690 --> 00:39:50,050
shared later

1002
00:39:50,050 --> 00:39:53,120
that being said thank you

1003
00:39:53,120 --> 00:39:55,550
and if you have any questions I will try

1004
00:39:55,550 --> 00:39:59,950
to answer them and there was one before

1005
00:40:00,610 --> 00:40:03,620
what's the best suggested way to use

1006
00:40:03,620 --> 00:40:05,420
JSON web tokens in a protected way

1007
00:40:05,420 --> 00:40:09,530
against XSS and CSRF attacks so the

1008
00:40:09,530 --> 00:40:12,650
answer to that is already mentioned in

1009
00:40:12,650 --> 00:40:14,870
my session I think don't store them

1010
00:40:14,870 --> 00:40:17,570
somewhere persistently this will protect

1011
00:40:17,570 --> 00:40:22,040
you against XSS because you will not be

1012
00:40:22,040 --> 00:40:24,860
able to steal them as easily as you are

1013
00:40:24,860 --> 00:40:26,690
when they're stored on local storage or

1014
00:40:26,690 --> 00:40:29,570
whatever and CSRF is not really related

1015
00:40:29,570 --> 00:40:34,340
to tokens so that's not really something

1016
00:40:34,340 --> 00:40:38,510
I can answer with like an excerpt me are

1017
00:40:38,510 --> 00:40:46,130
there any other questions so thankful

1018
00:40:46,130 --> 00:40:48,530
awesome it was a great session very very

1019
00:40:48,530 --> 00:40:50,810
useful hope everyone enjoyed it and if

1020
00:40:50,810 --> 00:40:52,190
anyone does have any question you can

1021
00:40:52,190 --> 00:40:55,760
feel free to post them into these live

1022
00:40:55,760 --> 00:40:57,110
sessions channel now otherwise we can

1023
00:40:57,110 --> 00:40:59,750
claim that after the session and just

1024
00:40:59,750 --> 00:41:01,370
let everybody know who is listening

1025
00:41:01,370 --> 00:41:04,250
along either by the website on YouTube

1026
00:41:04,250 --> 00:41:06,200
or listening to the recording after the

1027
00:41:06,200 --> 00:41:07,520
links that you've seen during the

1028
00:41:07,520 --> 00:41:09,410
session today we will share into our

1029
00:41:09,410 --> 00:41:10,790
slack community so the best way to

1030
00:41:10,790 --> 00:41:12,410
access them is to become a member if

1031
00:41:12,410 --> 00:41:14,750
you're already not part of the community

1032
00:41:14,750 --> 00:41:19,250
and as we come towards the end of the

1033
00:41:19,250 --> 00:41:21,500
session I just want to say some huge

1034
00:41:21,500 --> 00:41:23,630
thanks to you for taking us through

1035
00:41:23,630 --> 00:41:25,400
today and we hope it won't be the last

1036
00:41:25,400 --> 00:41:28,340
time that you join us for a live session

1037
00:41:28,340 --> 00:41:31,130
we'll see you again hopefully and to

1038
00:41:31,130 --> 00:41:33,230
everyone listening and just to let you

1039
00:41:33,230 --> 00:41:35,420
know that we have one more virtual

1040
00:41:35,420 --> 00:41:37,760
session lined up for this year and as we

1041
00:41:37,760 --> 00:41:39,860
say hi to the sounds cat that we can see

1042
00:41:39,860 --> 00:41:42,020
making a guest appearance on screen

1043
00:41:42,020 --> 00:41:45,470
which she surveys also and we have one

1044
00:41:45,470 --> 00:41:47,000
more session which is on the 19th of

1045
00:41:47,000 --> 00:41:48,530
December and I'll actually be a panel

1046
00:41:48,530 --> 00:41:50,750
discussion on practical dev so folks we

1047
00:41:50,750 --> 00:41:53,420
have a great line of people on our panel

1048
00:41:53,420 --> 00:41:55,850
so you can check out our website my dev

1049
00:41:55,850 --> 00:41:57,620
suck-ups diode for all the details on

1050
00:41:57,620 --> 00:41:59,660
who be part of that particular session

1051
00:41:59,660 --> 00:42:02,630
and in the meantime Sam thanks once

1052
00:42:02,630 --> 00:42:04,850
again for joining us today if everyone

1053
00:42:04,850 --> 00:42:06,860
if you enjoyed this session if you know

1054
00:42:06,860 --> 00:42:07,880
do you think you would benefit from

1055
00:42:07,880 --> 00:42:09,860
listening want a please share the

1056
00:42:09,860 --> 00:42:11,450
recording motion that works the

1057
00:42:11,450 --> 00:42:12,860
recording will be up on the website

1058
00:42:12,860 --> 00:42:15,680
and just to show a while and with that

1059
00:42:15,680 --> 00:42:17,900
said we can we can close the session

1060
00:42:17,900 --> 00:42:19,370
today so thanks again sound thanks

1061
00:42:19,370 --> 00:42:20,960
everyone who's listening for your time I

1062
00:42:20,960 --> 00:42:22,460
will see you again next time

1063
00:42:22,460 --> 00:42:25,480
thanks everyone

