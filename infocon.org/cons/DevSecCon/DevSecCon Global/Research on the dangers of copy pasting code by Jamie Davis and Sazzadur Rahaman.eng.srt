1
00:00:09,260 --> 00:00:12,269
hello everyone and welcome to another

2
00:00:12,269 --> 00:00:14,849
edition of the secure developer and for

3
00:00:14,849 --> 00:00:16,049
those of you if it's your first time

4
00:00:16,049 --> 00:00:18,690
joining us we are a community that been

5
00:00:18,690 --> 00:00:19,949
able to educate some the mobile

6
00:00:19,949 --> 00:00:21,600
developers and application security

7
00:00:21,600 --> 00:00:24,150
so please well welcome I'm doing today

8
00:00:24,150 --> 00:00:26,010
by Jamie and Saad and they're going to

9
00:00:26,010 --> 00:00:27,840
be talking about research on the dangers

10
00:00:27,840 --> 00:00:29,849
of copy pasting code before we get

11
00:00:29,849 --> 00:00:32,700
started I'm Sam and a few little

12
00:00:32,700 --> 00:00:36,239
housekeeping rules if you are watching

13
00:00:36,239 --> 00:00:38,129
this from YouTube and aren't on our

14
00:00:38,129 --> 00:00:39,870
selectional if you hit over to be secure

15
00:00:39,870 --> 00:00:42,270
to benefit calm and you'll find details

16
00:00:42,270 --> 00:00:43,500
to join our slack that's actually where

17
00:00:43,500 --> 00:00:45,690
you can ask our speakers questions today

18
00:00:45,690 --> 00:00:47,610
so please go ahead and do that if you're

19
00:00:47,610 --> 00:00:49,620
also watching the recorded session after

20
00:00:49,620 --> 00:00:51,570
and set up a live session you can still

21
00:00:51,570 --> 00:00:53,340
join the slack and get your questions in

22
00:00:53,340 --> 00:00:55,770
there and if Jamiel size isn't available

23
00:00:55,770 --> 00:00:57,180
to answer we can always make sure that

24
00:00:57,180 --> 00:00:59,219
someone is so please always always join

25
00:00:59,219 --> 00:01:02,609
us in the slack and the other thing is

26
00:01:02,609 --> 00:01:04,049
obviously that everything is recorded so

27
00:01:04,049 --> 00:01:05,729
all our power stations are on the

28
00:01:05,729 --> 00:01:07,260
security benefit comments so please have

29
00:01:07,260 --> 00:01:08,939
a look at us but that's enough for me

30
00:01:08,939 --> 00:01:12,299
and any questions feedback and ideas on

31
00:01:12,299 --> 00:01:14,520
sessions you can find me on twitter as

32
00:01:14,520 --> 00:01:18,000
oil or on a spec or on the website and

33
00:01:18,000 --> 00:01:19,680
that's it for me so I'm gonna hand over

34
00:01:19,680 --> 00:01:21,600
now to Jamie inside and we're gonna get

35
00:01:21,600 --> 00:01:23,310
started hello and welcome please pick a

36
00:01:23,310 --> 00:01:26,880
developer I Sam nice to be here

37
00:01:26,880 --> 00:01:29,630
yeah hi nice to be here so this is

38
00:01:29,630 --> 00:01:31,009
lovely

39
00:01:31,009 --> 00:01:33,450
if you're just listening to audio this

40
00:01:33,450 --> 00:01:36,090
is the voice of Jamie and it's out the

41
00:01:36,090 --> 00:01:41,310
door you can't call me sad perfect let's

42
00:01:41,310 --> 00:01:45,149
give out I'll leave it to you okay so we

43
00:01:45,149 --> 00:01:47,460
are here to talk about the dangers of

44
00:01:47,460 --> 00:01:50,159
copy pasting code off of the internet or

45
00:01:50,159 --> 00:01:52,140
someone else's code base and into your

46
00:01:52,140 --> 00:01:55,470
own code base now you can sort of think

47
00:01:55,470 --> 00:01:57,899
in general about all the ways that that

48
00:01:57,899 --> 00:02:00,509
might go wrong but we are to PhD

49
00:02:00,509 --> 00:02:02,340
students and our research is on two

50
00:02:02,340 --> 00:02:04,140
particular ways that things can go wrong

51
00:02:04,140 --> 00:02:07,409
so my work is about what can happen when

52
00:02:07,409 --> 00:02:09,508
you do this with a regular expression or

53
00:02:09,508 --> 00:02:10,229
regex

54
00:02:10,229 --> 00:02:13,920
yeah and my work is only

55
00:02:13,920 --> 00:02:17,660
how things can go bad if you copy codes

56
00:02:17,660 --> 00:02:21,330
for example from creepily specifically

57
00:02:21,330 --> 00:02:25,230
cryptographic codes into your code base

58
00:02:25,230 --> 00:02:29,040
and how that can go wrong so we've both

59
00:02:29,040 --> 00:02:32,220
done some empirical work which means we

60
00:02:32,220 --> 00:02:34,170
went out and measured stuff in terms of

61
00:02:34,170 --> 00:02:36,690
what real software looks like we usually

62
00:02:36,690 --> 00:02:39,060
hold things off of github and you know

63
00:02:39,060 --> 00:02:40,319
pull things off of github

64
00:02:40,319 --> 00:02:45,180
yeah also from github and I for us we

65
00:02:45,180 --> 00:02:48,030
actually scanned lots of top-tier

66
00:02:48,030 --> 00:02:50,670
projects from a party and we sha King

67
00:02:50,670 --> 00:02:54,000
Lee saw that the story is similar it's

68
00:02:54,000 --> 00:02:58,260
it's similar as someone who are doing

69
00:02:58,260 --> 00:03:07,470
things nobody knows how yeah and we do

70
00:03:07,470 --> 00:03:10,380
understand that developers might loss of

71
00:03:10,380 --> 00:03:11,670
the time have different sort of

72
00:03:11,670 --> 00:03:13,860
constraint like time there they have

73
00:03:13,860 --> 00:03:16,110
limited time budget and deadline and

74
00:03:16,110 --> 00:03:21,690
that can also press them to tempt them

75
00:03:21,690 --> 00:03:24,000
to copy something directly from internet

76
00:03:24,000 --> 00:03:26,670
but we all know that that can go wrong

77
00:03:26,670 --> 00:03:28,170
sure I mean we're not saying code reuse

78
00:03:28,170 --> 00:03:31,799
is bad yeah but it probably helpful to

79
00:03:31,799 --> 00:03:33,420
talk specifically about what can go

80
00:03:33,420 --> 00:03:34,950
wrong when you're reusing different

81
00:03:34,950 --> 00:03:37,170
kinds of code snippets yeah so there's

82
00:03:37,170 --> 00:03:38,790
interesting bugs that can emerge what do

83
00:03:38,790 --> 00:03:39,739
you do this with a regular expression

84
00:03:39,739 --> 00:03:41,730
and there's also some very interesting

85
00:03:41,730 --> 00:03:44,160
issues that I don't even with a the

86
00:03:44,160 --> 00:03:46,980
crypt of the snow-tivator we both also

87
00:03:46,980 --> 00:03:49,470
look dead Stack Overflow right yeah we

88
00:03:49,470 --> 00:03:51,510
all know where we get code snippets to

89
00:03:51,510 --> 00:03:57,870
reuse as the thing so in spec or fluey

90
00:03:57,870 --> 00:04:01,620
we observed few interesting stuff so we

91
00:04:01,620 --> 00:04:04,109
sort of the main problem is most of the

92
00:04:04,109 --> 00:04:06,420
time developers actually look for

93
00:04:06,420 --> 00:04:10,109
functional codes not the secure code so

94
00:04:10,109 --> 00:04:12,060
so like I'm a developer and I'm trying

95
00:04:12,060 --> 00:04:14,730
to get HTTPS configured on my website

96
00:04:14,730 --> 00:04:17,459
yeah things like that so some somehow

97
00:04:17,459 --> 00:04:19,320
you messed up with your configurations

98
00:04:19,320 --> 00:04:23,039
and all of a sudden you see exceptions

99
00:04:23,039 --> 00:04:27,540
like beds SSL certificate then you do

100
00:04:27,540 --> 00:04:29,820
google search and look for how I can

101
00:04:29,820 --> 00:04:32,490
easily fix that thing I have an idea

102
00:04:32,490 --> 00:04:34,650
what if I just stopped checking for the

103
00:04:34,650 --> 00:04:39,900
certificate the way the currently it's

104
00:04:39,900 --> 00:04:42,330
worked in Stack Overflow you will see

105
00:04:42,330 --> 00:04:45,990
that answers to the most popular answers

106
00:04:45,990 --> 00:04:49,020
to these kind of questions actually so

107
00:04:49,020 --> 00:04:51,720
just to keep these certificate

108
00:04:51,720 --> 00:04:54,480
validation or verification really I mean

109
00:04:54,480 --> 00:04:55,950
how many outputs are we talking here

110
00:04:55,950 --> 00:05:00,420
it's like so one one answer I saw that

111
00:05:00,420 --> 00:05:03,150
foreign aid that skipping certificates

112
00:05:03,150 --> 00:05:06,300
was an accepted answer and there were 96

113
00:05:06,300 --> 00:05:09,510
of course to the public oh yeah well I

114
00:05:09,510 --> 00:05:11,160
met it made the code run and stuff so

115
00:05:11,160 --> 00:05:15,480
yeah yes there's the pier and it seems

116
00:05:15,480 --> 00:05:18,750
that this this is really love also loved

117
00:05:18,750 --> 00:05:21,810
by the developer and that's what the

118
00:05:21,810 --> 00:05:25,590
most scary part yeah well it's hard once

119
00:05:25,590 --> 00:05:28,170
your code is running I mean it's the

120
00:05:28,170 --> 00:05:30,210
security aspects of it become a little

121
00:05:30,210 --> 00:05:32,400
bit invisible yeah I'm a developer's

122
00:05:32,400 --> 00:05:34,080
perspective you're often just saying is

123
00:05:34,080 --> 00:05:35,880
the website working can people visit my

124
00:05:35,880 --> 00:05:37,740
content can people buy my stuff

125
00:05:37,740 --> 00:05:39,720
yeah and you're not necessarily thinking

126
00:05:39,720 --> 00:05:41,670
is it secure because it's running right

127
00:05:41,670 --> 00:05:44,760
yeah and another interesting aspect we

128
00:05:44,760 --> 00:05:49,590
found from our studies like around 96%

129
00:05:49,590 --> 00:05:53,400
of the libraries that are being used in

130
00:05:53,400 --> 00:05:57,860
Android was kind of offers this kind of

131
00:05:57,860 --> 00:06:01,020
bogus code base line you can skip things

132
00:06:01,020 --> 00:06:02,190
easily okay

133
00:06:02,190 --> 00:06:04,590
one thing that Java follows is open

134
00:06:04,590 --> 00:06:07,140
closed principle like all these class

135
00:06:07,140 --> 00:06:09,840
are open for extension so interestingly

136
00:06:09,840 --> 00:06:12,980
you can extend a secure plus to make it

137
00:06:12,980 --> 00:06:16,830
insecure and Moses like workarounds are

138
00:06:16,830 --> 00:06:19,890
exact it's a lot of lot of these

139
00:06:19,890 --> 00:06:22,530
libraries also offered this kind of X ok

140
00:06:22,530 --> 00:06:26,190
so that's why developers have always

141
00:06:26,190 --> 00:06:28,860
have been good at that you've got a

142
00:06:28,860 --> 00:06:31,530
streamlined way exactly get the curve

143
00:06:31,530 --> 00:06:33,930
running but be insecure yeah okay and if

144
00:06:33,930 --> 00:06:36,660
you don't know it better you happy yeah

145
00:06:36,660 --> 00:06:39,150
for some straightforward insecure codes

146
00:06:39,150 --> 00:06:41,159
what Google does is now

147
00:06:41,159 --> 00:06:45,139
you pay they actively take screen for

148
00:06:45,139 --> 00:06:47,360
straightforward cases that that are

149
00:06:47,360 --> 00:06:51,089
easily detectable so now but there are

150
00:06:51,089 --> 00:06:54,059
lots of not so straightforward cases

151
00:06:54,059 --> 00:06:56,610
that they can share their details so

152
00:06:56,610 --> 00:06:58,860
steel well the situation is kind of

153
00:06:58,860 --> 00:07:01,649
similar for regex is actually I don't

154
00:07:01,649 --> 00:07:03,599
know if you know much about red Nexus as

155
00:07:03,599 --> 00:07:06,269
a dairy yeah I think I know that's a box

156
00:07:06,269 --> 00:07:10,830
to me yeah I don't have any option not

157
00:07:10,830 --> 00:07:13,529
to yeah so we've actually in my research

158
00:07:13,529 --> 00:07:15,179
we've talked to a couple hundred

159
00:07:15,179 --> 00:07:18,029
software engineers both within a single

160
00:07:18,029 --> 00:07:19,559
company we talked to about a hundred at

161
00:07:19,559 --> 00:07:22,110
a large international media company and

162
00:07:22,110 --> 00:07:24,599
we talked to about 150 developers from

163
00:07:24,599 --> 00:07:25,649
all over the place

164
00:07:25,649 --> 00:07:29,459
and we asked them you know what do you

165
00:07:29,459 --> 00:07:31,289
think about reg X's and when you're

166
00:07:31,289 --> 00:07:32,669
writing a regex how do you go about

167
00:07:32,669 --> 00:07:35,189
doing that and they think I mean they

168
00:07:35,189 --> 00:07:37,199
said in conclusion basically red x's are

169
00:07:37,199 --> 00:07:38,490
really hard and we don't know how to do

170
00:07:38,490 --> 00:07:40,889
them but they also said and we think

171
00:07:40,889 --> 00:07:43,289
that they're really valuable I mean

172
00:07:43,289 --> 00:07:44,429
they're all over the place there's

173
00:07:44,429 --> 00:07:46,379
empirical evidence that something like

174
00:07:46,379 --> 00:07:48,509
30 to 50 percent of most software

175
00:07:48,509 --> 00:07:50,339
projects have a regular expression in

176
00:07:50,339 --> 00:07:52,559
them and why because they're a great way

177
00:07:52,559 --> 00:07:55,019
to slice and dice drinks so they're just

178
00:07:55,019 --> 00:07:58,019
really convenient tool but developers

179
00:07:58,019 --> 00:07:59,999
say the notation is really hard to read

180
00:07:59,999 --> 00:08:02,249
beyond there is a jokes that they're

181
00:08:02,249 --> 00:08:04,709
sort of like a write once read never

182
00:08:04,709 --> 00:08:07,199
kind of thing and you just you know you

183
00:08:07,199 --> 00:08:08,999
you hope that when there's a bug in your

184
00:08:08,999 --> 00:08:10,649
code it's not the red X because then you

185
00:08:10,649 --> 00:08:11,849
have to figure out how the red lights

186
00:08:11,849 --> 00:08:16,050
works so one thing I when I was

187
00:08:16,050 --> 00:08:18,689
developed for one thing I saw that most

188
00:08:18,689 --> 00:08:22,050
of the developer saw see red X as a

189
00:08:22,050 --> 00:08:24,749
magic tool hmm like you have a problem

190
00:08:24,749 --> 00:08:27,929
you just want to solve it at reg X is

191
00:08:27,929 --> 00:08:29,879
the right way to do that okay because

192
00:08:29,879 --> 00:08:32,188
you don't most of the time you don't

193
00:08:32,188 --> 00:08:35,429
know what's going on but magically you

194
00:08:35,429 --> 00:08:38,849
give the test cases and it passed it

195
00:08:38,849 --> 00:08:43,169
versus it's a helical so that's what and

196
00:08:43,169 --> 00:08:45,300
one thing I saw and I saw one

197
00:08:45,300 --> 00:08:46,649
interesting question in Stack Overflow

198
00:08:46,649 --> 00:08:51,809
like they want to parts HTML website

199
00:08:51,809 --> 00:08:54,640
using red man you could I guess you

200
00:08:54,640 --> 00:08:57,190
redick's for that yeah but the thing is

201
00:08:57,190 --> 00:09:00,520
you cannot do everything using this oh

202
00:09:00,520 --> 00:09:02,380
you gotta be careful with that actually

203
00:09:02,380 --> 00:09:03,850
my exes are extraordinarily powerful

204
00:09:03,850 --> 00:09:06,970
yeah yeah that's that's heavy yeah

205
00:09:06,970 --> 00:09:13,080
having saved that so you cannot just

206
00:09:13,080 --> 00:09:16,840
build a language parser using just only

207
00:09:16,840 --> 00:09:19,540
lets you totally can I think it can be

208
00:09:19,540 --> 00:09:21,010
done

209
00:09:21,010 --> 00:09:24,070
certain regular expression engines we

210
00:09:24,070 --> 00:09:25,990
are sufficiently sophisticated and they

211
00:09:25,990 --> 00:09:28,030
give you a rich enough tool tool kit

212
00:09:28,030 --> 00:09:30,700
mm-hm that you can actually do wildly

213
00:09:30,700 --> 00:09:32,500
expressive parsing with a regular

214
00:09:32,500 --> 00:09:34,080
expression alright they're not the

215
00:09:34,080 --> 00:09:36,520
automata theory reg X's if you've ever

216
00:09:36,520 --> 00:09:38,290
taken an automata Theory class that's

217
00:09:38,290 --> 00:09:39,970
not the Reg X's we're talking about in

218
00:09:39,970 --> 00:09:41,970
production right we're talking about

219
00:09:41,970 --> 00:09:44,470
wildly expressive things that can do all

220
00:09:44,470 --> 00:09:48,160
sorts of mysterious magic that's why

221
00:09:48,160 --> 00:09:52,050
it's so hard I'm still not I mean yeah

222
00:09:52,320 --> 00:09:55,410
so you said you work professionally yeah

223
00:09:55,410 --> 00:09:59,050
around I think she and a half years okay

224
00:09:59,050 --> 00:10:02,290
is that how you got into crypto well

225
00:10:02,290 --> 00:10:05,610
that's a funny story to share so when I

226
00:10:05,610 --> 00:10:08,860
worked as a professional in payment card

227
00:10:08,860 --> 00:10:12,850
industry and I saw that lots of the time

228
00:10:12,850 --> 00:10:14,770
most of these vulnerabilities and all

229
00:10:14,770 --> 00:10:19,360
those stuffs actually so you you already

230
00:10:19,360 --> 00:10:21,970
have the crypto protocols and all those

231
00:10:21,970 --> 00:10:24,940
stuff for you at your disposal but the

232
00:10:24,940 --> 00:10:27,190
main problem the general developers do

233
00:10:27,190 --> 00:10:31,390
do not really reinvent or implements

234
00:10:31,390 --> 00:10:33,730
anything related to crypto what they do

235
00:10:33,730 --> 00:10:36,280
is they actually use those those kind of

236
00:10:36,280 --> 00:10:37,750
share we all know units foster right

237
00:10:37,750 --> 00:10:41,500
right yeah so most of the time we see

238
00:10:41,500 --> 00:10:45,730
that even if you don't have enough

239
00:10:45,730 --> 00:10:49,060
security background you can mess up with

240
00:10:49,060 --> 00:10:52,780
that tool so for example we all know

241
00:10:52,780 --> 00:10:56,160
that any cryptographic protocol cannot

242
00:10:56,160 --> 00:11:00,370
guarantee you absolute security the code

243
00:11:00,370 --> 00:11:04,360
of a system is secured within each

244
00:11:04,360 --> 00:11:08,560
threat model right so you have to know

245
00:11:08,560 --> 00:11:11,260
the threat model that this cryptography

246
00:11:11,260 --> 00:11:13,570
protocol or primitive offers all right

247
00:11:13,570 --> 00:11:16,090
if you step outside the threat model all

248
00:11:16,090 --> 00:11:17,920
of a sudden you are in being secure so

249
00:11:17,920 --> 00:11:21,520
okay so I mean tell me honestly when you

250
00:11:21,520 --> 00:11:23,380
said you worked as a professional in the

251
00:11:23,380 --> 00:11:25,210
payment card industry yeah did you have

252
00:11:25,210 --> 00:11:27,760
a right and secure crypto in secure code

253
00:11:27,760 --> 00:11:32,110
I think the thing is I might try some

254
00:11:32,110 --> 00:11:36,630
yeah but the thing is I always look for

255
00:11:36,630 --> 00:11:40,360
so when I started writing code say for

256
00:11:40,360 --> 00:11:44,530
example for hash for hashing things for

257
00:11:44,530 --> 00:11:49,000
example when you do print injection you

258
00:11:49,000 --> 00:11:51,190
have to generate cryptogram so I have

259
00:11:51,190 --> 00:11:56,770
one nature when I learn something I

260
00:11:56,770 --> 00:11:59,680
actually try to learn from the ground

261
00:11:59,680 --> 00:12:01,990
it's very responsible of you yeah so

262
00:12:01,990 --> 00:12:05,410
what I did I even had to learn a

263
00:12:05,410 --> 00:12:07,990
symmetric crypto how RSA works and all

264
00:12:07,990 --> 00:12:11,800
those stuff and I learned about blatem

265
00:12:11,800 --> 00:12:15,400
baahar padding padding Oracle attacks

266
00:12:15,400 --> 00:12:17,980
and all those stuff like long Xia and

267
00:12:17,980 --> 00:12:20,170
all those term and then I started

268
00:12:20,170 --> 00:12:23,050
writing code okay for myself I think not

269
00:12:23,050 --> 00:12:25,090
everybody has that much time to get

270
00:12:25,090 --> 00:12:29,290
there yeah I can tell yeah most of the

271
00:12:29,290 --> 00:12:31,570
time we have we also had to work on

272
00:12:31,570 --> 00:12:34,090
tracing deadlines yeah so it can be hard

273
00:12:34,090 --> 00:12:36,310
so it's kind of a similar story for me I

274
00:12:36,310 --> 00:12:38,800
got into regular expressions because I

275
00:12:38,800 --> 00:12:40,600
spent a couple years at IBM before come

276
00:12:40,600 --> 00:12:42,820
to grad school and I was a software

277
00:12:42,820 --> 00:12:46,680
tester at IBM and one of my Jobs was to

278
00:12:46,680 --> 00:12:49,270
confirm that the command-line interface

279
00:12:49,270 --> 00:12:51,340
for our product worked properly for

280
00:12:51,340 --> 00:12:53,380
anything and to check if a command-line

281
00:12:53,380 --> 00:12:55,270
interface is working properly one good

282
00:12:55,270 --> 00:12:56,560
thing to do is confirm that it's

283
00:12:56,560 --> 00:12:58,060
spitting out the right output

284
00:12:58,060 --> 00:13:00,040
well guess what regular expressions are

285
00:13:00,040 --> 00:13:01,930
a great way to check that the output is

286
00:13:01,930 --> 00:13:05,050
what it's supposed to be so I probably

287
00:13:05,050 --> 00:13:07,000
wrote a couple hundred maybe a thousand

288
00:13:07,000 --> 00:13:08,830
regular expressions here's why I mean

289
00:13:08,830 --> 00:13:11,320
why I love them right no but I saw all

290
00:13:11,320 --> 00:13:14,260
these issues that I was having with reg

291
00:13:14,260 --> 00:13:16,090
X's even though I worked with them every

292
00:13:16,090 --> 00:13:19,090
day for years and I saw issues that my

293
00:13:19,090 --> 00:13:20,740
co-workers had when they were looking at

294
00:13:20,740 --> 00:13:22,390
my reg ex is and they were like we can't

295
00:13:22,390 --> 00:13:24,160
read this and there's something wrong

296
00:13:24,160 --> 00:13:25,750
here and we don't understand what it is

297
00:13:25,750 --> 00:13:29,980
right it's just yeah dick 6-part in oh I

298
00:13:29,980 --> 00:13:31,750
was the ready I mean I read the whole

299
00:13:31,750 --> 00:13:33,850
Perl book that camel thing I read all

300
00:13:33,850 --> 00:13:35,110
2,000 pages of it

301
00:13:35,110 --> 00:13:36,640
I read Friedel's book on you know I

302
00:13:36,640 --> 00:13:38,380
really wanted to get them right I heard

303
00:13:38,380 --> 00:13:40,960
stories like most of the companies and

304
00:13:40,960 --> 00:13:44,680
most of the team had their own expert

305
00:13:44,680 --> 00:13:48,130
yes and other developers go to that

306
00:13:48,130 --> 00:13:49,870
first well then I mean it's funny you

307
00:13:49,870 --> 00:13:51,610
say that we actually when we were

308
00:13:51,610 --> 00:13:53,290
talking to all these developers they

309
00:13:53,290 --> 00:13:55,810
said that they said you know when we

310
00:13:55,810 --> 00:13:57,490
have redick's questions there's this one

311
00:13:57,490 --> 00:13:59,350
person on our team and we just call them

312
00:13:59,350 --> 00:14:00,820
over and say please tell us what is

313
00:14:00,820 --> 00:14:03,220
wrong with this mysterious you know

314
00:14:03,220 --> 00:14:05,890
syntactic nightmare there's something

315
00:14:05,890 --> 00:14:07,060
wrong we don't know what it is you're

316
00:14:07,060 --> 00:14:08,920
the expert fix it so we called them in

317
00:14:08,920 --> 00:14:10,960
that paper of regex wizards all right

318
00:14:10,960 --> 00:14:12,610
because they were the only person in

319
00:14:12,610 --> 00:14:20,380
there any clay probably a big plenty hat

320
00:14:20,380 --> 00:14:21,700
though you know where it's very magic

321
00:14:21,700 --> 00:14:25,170
wand cetera I can you know anything yeah

322
00:14:25,170 --> 00:14:29,560
so you said that as a as a professional

323
00:14:29,560 --> 00:14:30,940
developer you never made any crypto

324
00:14:30,940 --> 00:14:39,490
errors yeah not consciously but in your

325
00:14:39,490 --> 00:14:41,650
research you have been looking at crypto

326
00:14:41,650 --> 00:14:43,870
errors yeah so can you give kind of an

327
00:14:43,870 --> 00:14:46,570
example of a common error that you've

328
00:14:46,570 --> 00:14:49,240
encountered yeah that's yeah I actually

329
00:14:49,240 --> 00:14:52,300
have several examples that we actually

330
00:14:52,300 --> 00:14:55,600
see in a while one common thing we saw

331
00:14:55,600 --> 00:14:58,810
that most most of the people but they do

332
00:14:58,810 --> 00:15:01,300
say for example you want to transfer

333
00:15:01,300 --> 00:15:03,100
data from mobile application to your

334
00:15:03,100 --> 00:15:07,870
server but what you want is your data to

335
00:15:07,870 --> 00:15:09,640
be encrypted so that anyone in the

336
00:15:09,640 --> 00:15:11,710
network cannot see

337
00:15:11,710 --> 00:15:15,970
so what you can do is you can you do it

338
00:15:15,970 --> 00:15:17,980
encryption right right so I'm gonna

339
00:15:17,980 --> 00:15:19,570
Google right I'll be here and develop

340
00:15:19,570 --> 00:15:21,040
because I don't know Eric so I'm gonna

341
00:15:21,040 --> 00:15:23,800
Google I need to transfer data from a

342
00:15:23,800 --> 00:15:26,680
mobile app yeah so what people do is

343
00:15:26,680 --> 00:15:28,360
generally you will use for example

344
00:15:28,360 --> 00:15:31,420
symmetric key encryption but the thing

345
00:15:31,420 --> 00:15:36,339
is if your cryptographic keys hard-coded

346
00:15:36,339 --> 00:15:39,100
in the app and all of a sudden if anyone

347
00:15:39,100 --> 00:15:42,160
look into the app code or a binary

348
00:15:42,160 --> 00:15:44,440
because you have to deliver or upload it

349
00:15:44,440 --> 00:15:49,890
to the Google say if any if anyone just

350
00:15:49,890 --> 00:15:53,110
scan your code or looking to this source

351
00:15:53,110 --> 00:15:55,720
code or a binary they will discover that

352
00:15:55,720 --> 00:15:58,510
key so then within that moment your

353
00:15:58,510 --> 00:16:01,570
whole script operation of all in your

354
00:16:01,570 --> 00:16:04,920
Security's project so you said that the

355
00:16:04,920 --> 00:16:07,180
problem is usually some disconnect

356
00:16:07,180 --> 00:16:10,120
between what the crypto was designed for

357
00:16:10,120 --> 00:16:12,130
and what functions it's making and how

358
00:16:12,130 --> 00:16:14,320
it's being deployed exactly so the thing

359
00:16:14,320 --> 00:16:18,970
is when you step outside the threat

360
00:16:18,970 --> 00:16:20,680
model you are insecure so for a

361
00:16:20,680 --> 00:16:23,620
symmetric crypto the threat model is you

362
00:16:23,620 --> 00:16:26,440
cannot tell what the keys ok but if I

363
00:16:26,440 --> 00:16:28,930
encoded that key into my software and

364
00:16:28,930 --> 00:16:31,480
then ship that software to anybody in

365
00:16:31,480 --> 00:16:34,060
the Google Play Store yeah they can just

366
00:16:34,060 --> 00:16:36,070
kind of exactly use off-the-shelf they

367
00:16:36,070 --> 00:16:38,290
actually find the community key

368
00:16:38,290 --> 00:16:40,959
so one thing is that another thing what

369
00:16:40,959 --> 00:16:47,020
we saw is the certificate validation is

370
00:16:47,020 --> 00:16:50,170
keeping certificate validation so for

371
00:16:50,170 --> 00:16:54,250
example so you won so you have web

372
00:16:54,250 --> 00:16:55,990
application I actually did this once I

373
00:16:55,990 --> 00:16:58,990
think so I have a website yeah and it

374
00:16:58,990 --> 00:17:02,410
uses HTTP yeah and I kept getting errors

375
00:17:02,410 --> 00:17:05,679
and I think I disabled certificate

376
00:17:05,679 --> 00:17:07,689
checking I was googling EndNote it was a

377
00:17:07,689 --> 00:17:10,660
node.js app I don't really know what I

378
00:17:10,660 --> 00:17:13,150
did and what the implications are you

379
00:17:13,150 --> 00:17:15,309
can tell me yeah so the pings

380
00:17:15,309 --> 00:17:19,559
the thing is when you disable the

381
00:17:19,559 --> 00:17:22,660
certificate validation hostname ticking

382
00:17:22,660 --> 00:17:23,949
it was like an environment variable I

383
00:17:23,949 --> 00:17:25,579
set with like ignore

384
00:17:25,579 --> 00:17:30,340
yeah why don't ya whenever

385
00:17:30,890 --> 00:17:33,230
whenever you do things like that there

386
00:17:33,230 --> 00:17:36,590
is no point of using HTTP well I wanted

387
00:17:36,590 --> 00:17:38,500
to be able to visit the website wish

388
00:17:38,500 --> 00:17:41,750
yes yeah yes I was getting a warning

389
00:17:41,750 --> 00:17:43,550
from the security staff about exactly

390
00:17:43,550 --> 00:17:47,390
you just disable the world yeah yeah so

391
00:17:47,390 --> 00:17:49,730
it's not secured yeah okay can you tell

392
00:17:49,730 --> 00:17:52,340
me like I don't really know what happens

393
00:17:52,340 --> 00:17:53,990
when I disable the certificate checking

394
00:17:53,990 --> 00:17:55,910
I know my website works and I visited on

395
00:17:55,910 --> 00:17:59,930
my phone but the thing is anyone so one

396
00:17:59,930 --> 00:18:01,910
thing is when you disable the

397
00:18:01,910 --> 00:18:06,560
certificate valid it be taking any one

398
00:18:06,560 --> 00:18:09,230
man in the middle can actually present

399
00:18:09,230 --> 00:18:11,740
their own certificate and emitted as

400
00:18:11,740 --> 00:18:15,800
Jamie Davis okay and then what will

401
00:18:15,800 --> 00:18:18,230
happen is your server will because you

402
00:18:18,230 --> 00:18:20,330
disabled the certificate validation edit

403
00:18:20,330 --> 00:18:23,060
that yeah so the server will not be will

404
00:18:23,060 --> 00:18:25,100
not even check whether this is real

405
00:18:25,100 --> 00:18:26,270
Jamie or not

406
00:18:26,270 --> 00:18:29,570
so this affect me as the owner of the

407
00:18:29,570 --> 00:18:33,290
minute you're the users means connecting

408
00:18:33,290 --> 00:18:35,990
to your server are being affected so a

409
00:18:35,990 --> 00:18:39,230
client goes to connect a HTTP colon my

410
00:18:39,230 --> 00:18:42,410
thing yeah and because I've disabled the

411
00:18:42,410 --> 00:18:44,870
certificate checks yeah it can hide your

412
00:18:44,870 --> 00:18:50,450
reputation if anyone just scoop the

413
00:18:50,450 --> 00:18:52,910
content that you want to show and they

414
00:18:52,910 --> 00:18:54,680
just inject their own okay

415
00:18:54,680 --> 00:18:57,290
so anybody can pretend to be my website

416
00:18:57,290 --> 00:18:59,270
yeah all right that's not good I should

417
00:18:59,270 --> 00:18:59,810
fix that

418
00:18:59,810 --> 00:19:03,350
yeah maybe we should okay so that's two

419
00:19:03,350 --> 00:19:05,720
examples I have the impression you

420
00:19:05,720 --> 00:19:07,250
chucked off about a lot more in your

421
00:19:07,250 --> 00:19:10,070
work yeah so there there are some other

422
00:19:10,070 --> 00:19:12,710
cases those are not straightforward as

423
00:19:12,710 --> 00:19:15,440
these these are but there are other

424
00:19:15,440 --> 00:19:18,880
cases like some of the times when you

425
00:19:18,880 --> 00:19:23,510
for integrity checking sometimes we use

426
00:19:23,510 --> 00:19:26,750
hash if strengthen cryptographic hash

427
00:19:26,750 --> 00:19:29,630
hash function so the funny thing about

428
00:19:29,630 --> 00:19:33,280
cryptography is when the computing power

429
00:19:33,280 --> 00:19:36,790
gets better some of those cryptographic

430
00:19:36,790 --> 00:19:38,710
primitives get

431
00:19:38,710 --> 00:19:43,050
insecure with time so say for example if

432
00:19:43,050 --> 00:19:47,830
you used md5 ten years back yeah it

433
00:19:47,830 --> 00:19:51,940
might it might be okay but today if you

434
00:19:51,940 --> 00:19:55,360
use md5 or sha-1 it's not okay yeah I

435
00:19:55,360 --> 00:19:56,980
guess those things were proposed like in

436
00:19:56,980 --> 00:19:59,050
the 70s I feel like exactly story of

437
00:19:59,050 --> 00:20:03,580
hash functions exactly so we saw lots of

438
00:20:03,580 --> 00:20:07,140
code base that still uses even in before

439
00:20:07,140 --> 00:20:10,630
everyone heard about things things like

440
00:20:10,630 --> 00:20:13,510
that and also not to mention md5 and

441
00:20:13,510 --> 00:20:16,060
sha-1 all kind of stuff and also there

442
00:20:16,060 --> 00:20:19,120
are insecure symmetric crypto primitives

443
00:20:19,120 --> 00:20:23,470
like we even NIH T discouraged this to

444
00:20:23,470 --> 00:20:28,000
use Blowfish there's this kind of tiptoe

445
00:20:28,000 --> 00:20:30,280
graphic community but we steal lots of

446
00:20:30,280 --> 00:20:33,730
them out there and even for a symmetric

447
00:20:33,730 --> 00:20:38,080
crypto if you use say for example RS

448
00:20:38,080 --> 00:20:41,710
8000 24 bits or even 512 bits you are

449
00:20:41,710 --> 00:20:46,090
insecure as hell so something you've got

450
00:20:46,090 --> 00:20:47,530
a big list of all the ways you can

451
00:20:47,530 --> 00:20:49,300
script yeah so is it like an

452
00:20:49,300 --> 00:20:52,870
exhaustive list or this or any type

453
00:20:52,870 --> 00:20:56,110
thing yeah but the thing is there are

454
00:20:56,110 --> 00:21:00,940
always new for it's it's really crazy to

455
00:21:00,940 --> 00:21:03,040
come up with an exhaustive list so what

456
00:21:03,040 --> 00:21:06,550
we did is we took some represent example

457
00:21:06,550 --> 00:21:09,160
than we see in the while and we combined

458
00:21:09,160 --> 00:21:11,860
at least up I think 16 type of misses

459
00:21:11,860 --> 00:21:15,360
you can see this and we went from there

460
00:21:15,360 --> 00:21:19,570
so having this list I just sort of open

461
00:21:19,570 --> 00:21:21,640
up my codebase and look at all the

462
00:21:21,640 --> 00:21:23,620
crypto calls and then compared to your

463
00:21:23,620 --> 00:21:25,800
list that sounds sort of labor-intensive

464
00:21:25,800 --> 00:21:30,070
yeah so what we did is we build an

465
00:21:30,070 --> 00:21:32,800
automated tool that can yeah that can

466
00:21:32,800 --> 00:21:35,290
detect all these sixteen type of

467
00:21:35,290 --> 00:21:37,600
cryptographic misuse automatically so

468
00:21:37,600 --> 00:21:40,060
when you are diverting to code you can

469
00:21:40,060 --> 00:21:43,510
at the same time use our tool to check

470
00:21:43,510 --> 00:21:46,090
what sort of cryptographic misuse you

471
00:21:46,090 --> 00:21:48,910
have in your code so that I think that

472
00:21:48,910 --> 00:21:51,610
can be useful too

473
00:21:51,610 --> 00:21:53,620
the developing community and we also

474
00:21:53,620 --> 00:21:55,360
pencils that too I mean we all know

475
00:21:55,360 --> 00:21:57,460
about research code yeah I get sort of a

476
00:21:57,460 --> 00:22:01,710
hot burning mess and like doesn't work I

477
00:22:01,710 --> 00:22:05,950
can guarantee it works if it doesn't

478
00:22:05,950 --> 00:22:10,500
work you just can create a pull request

479
00:22:10,500 --> 00:22:14,800
yeah I guarantee that I'll see ya

480
00:22:14,800 --> 00:22:17,590
so when you say you know it works how do

481
00:22:17,590 --> 00:22:21,070
you know it works because we extensively

482
00:22:21,070 --> 00:22:26,080
tested it we ran our tool on 46 open

483
00:22:26,080 --> 00:22:29,140
source Apache project okay Apache the

484
00:22:29,140 --> 00:22:31,060
like the folks behind spark in the do

485
00:22:31,060 --> 00:22:35,350
yeah so we we ran our code on my Apache

486
00:22:35,350 --> 00:22:40,420
Hadoop Apache spark and a party office

487
00:22:40,420 --> 00:22:43,750
and some appetit Ranger and by Aldo huge

488
00:22:43,750 --> 00:22:45,910
here yeah it's for me

489
00:22:45,910 --> 00:22:47,830
did they have any it's sort of the

490
00:22:47,830 --> 00:22:49,890
burning question that they have and you

491
00:22:49,890 --> 00:22:55,120
yeah I'll come back we also we also ran

492
00:22:55,120 --> 00:22:58,090
our tool on I think more than 6,000

493
00:22:58,090 --> 00:22:59,980
Android you're busy

494
00:22:59,980 --> 00:23:04,060
yeah and then and we also manually

495
00:23:04,060 --> 00:23:08,110
checked the output apart to like how its

496
00:23:08,110 --> 00:23:13,240
performing and if the I think the

497
00:23:13,240 --> 00:23:18,490
accuracy is over 90% so we are really

498
00:23:18,490 --> 00:23:20,530
proud of of the tools can you give me

499
00:23:20,530 --> 00:23:22,780
like some sense of how the tool works

500
00:23:22,780 --> 00:23:24,850
under the hood right somehow I'm taking

501
00:23:24,850 --> 00:23:26,260
your tool and pointing it at my code

502
00:23:26,260 --> 00:23:28,060
base yeah it's figuring out that I've

503
00:23:28,060 --> 00:23:30,130
hard coded keys or that my you know my

504
00:23:30,130 --> 00:23:32,950
ciphers not doesn't have enough bits or

505
00:23:32,950 --> 00:23:34,210
so on but yeah what sort of the

506
00:23:34,210 --> 00:23:36,640
technology underneath that so the thing

507
00:23:36,640 --> 00:23:42,250
is we used data flow analysis like we

508
00:23:42,250 --> 00:23:45,520
know that the kind of cryptographic API

509
00:23:45,520 --> 00:23:49,690
you use or for all these cryptographic

510
00:23:49,690 --> 00:23:51,310
vulnerabilities we know that

511
00:23:51,310 --> 00:23:53,500
cryptographic API so there is there like

512
00:23:53,500 --> 00:23:55,540
a set of crypto API is you're targeting

513
00:23:55,540 --> 00:23:58,360
yeah so for Java fortunately for Java

514
00:23:58,360 --> 00:24:00,970
and Android these cryptographic API is

515
00:24:00,970 --> 00:24:02,890
our standard okay it counts with the

516
00:24:02,890 --> 00:24:03,960
stand so anybody

517
00:24:03,960 --> 00:24:05,340
krypter and the code is gonna be calling

518
00:24:05,340 --> 00:24:08,100
calling this kind like a spring security

519
00:24:08,100 --> 00:24:11,340
or something this is actually Java

520
00:24:11,340 --> 00:24:14,850
cryptographic extension but AC okay the

521
00:24:14,850 --> 00:24:16,800
API is from the end also there are some

522
00:24:16,800 --> 00:24:20,130
s20 on this API okay so people will use

523
00:24:20,130 --> 00:24:22,140
those chicken kind of parse a code base

524
00:24:22,140 --> 00:24:24,060
and then find the function calls to be

525
00:24:24,060 --> 00:24:27,540
not actually first yeah we look for

526
00:24:27,540 --> 00:24:32,910
these API and then we run static

527
00:24:32,910 --> 00:24:35,730
analysis like data flow analysis to see

528
00:24:35,730 --> 00:24:38,940
the function points that we are

529
00:24:38,940 --> 00:24:42,180
targeting how these function points are

530
00:24:42,180 --> 00:24:45,560
being influenced from the code or even

531
00:24:45,560 --> 00:24:49,740
we also targeted like how things might

532
00:24:49,740 --> 00:24:53,720
go when anyone passes some argument from

533
00:24:53,720 --> 00:24:56,100
configuration files and things like that

534
00:24:56,100 --> 00:25:01,890
so if I've just got like a this in your

535
00:25:01,890 --> 00:25:03,930
Android app the you talked about a

536
00:25:03,930 --> 00:25:05,520
symmetric key problem where they're just

537
00:25:05,520 --> 00:25:07,470
kind of hard-coded the key yeah there's

538
00:25:07,470 --> 00:25:09,090
a function call where the first argument

539
00:25:09,090 --> 00:25:11,340
is the keys play a string that's like

540
00:25:11,340 --> 00:25:13,590
this is my secret key yeah that seems

541
00:25:13,590 --> 00:25:15,660
like it's really easy to find yeah

542
00:25:15,660 --> 00:25:17,820
can you when it's you know declared in a

543
00:25:17,820 --> 00:25:20,010
variable somewhere else or B exactly for

544
00:25:20,010 --> 00:25:22,650
the thing is most of the time we see

545
00:25:22,650 --> 00:25:26,370
that it's by number five or six so a

546
00:25:26,370 --> 00:25:28,410
function called a define yeah hard to

547
00:25:28,410 --> 00:25:31,350
find out some of the times if you do

548
00:25:31,350 --> 00:25:33,390
straightforward parsing or things like

549
00:25:33,390 --> 00:25:36,390
that you might end up with lots of false

550
00:25:36,390 --> 00:25:39,360
positives so that's the main challenging

551
00:25:39,360 --> 00:25:41,790
part of doing or building static

552
00:25:41,790 --> 00:25:45,360
analysis tools so for example when we

553
00:25:45,360 --> 00:25:48,450
created just vanilla program analysis

554
00:25:48,450 --> 00:25:52,740
tool around 70% of the elders were false

555
00:25:52,740 --> 00:25:55,620
false that's not a useful exactly so

556
00:25:55,620 --> 00:25:57,920
that's why straightforward parsing or

557
00:25:57,920 --> 00:26:00,630
anything like that even state forward

558
00:26:00,630 --> 00:26:04,800
data so you advance some new techniques

559
00:26:04,800 --> 00:26:07,620
exactly but the upshot of all this is

560
00:26:07,620 --> 00:26:09,210
that I can plug in your tool and you'll

561
00:26:09,210 --> 00:26:11,640
find the words yeah okay can you tell me

562
00:26:11,640 --> 00:26:17,460
about yeah so in so I in

563
00:26:17,460 --> 00:26:21,360
this part we found things like so I put

564
00:26:21,360 --> 00:26:24,390
this part had some cord

565
00:26:24,390 --> 00:26:26,700
this is spark like the data analysis

566
00:26:26,700 --> 00:26:29,190
sitting low okay everybody's using area

567
00:26:29,190 --> 00:26:31,110
just like a million blog post and how to

568
00:26:31,110 --> 00:26:34,080
get started yeah okay so in they all

569
00:26:34,080 --> 00:26:37,460
they also have some sort of web-based

570
00:26:37,460 --> 00:26:41,010
apps that you can within your network

571
00:26:41,010 --> 00:26:43,920
you might want to use that to use some

572
00:26:43,920 --> 00:26:46,470
of those services okay and we saw that

573
00:26:46,470 --> 00:26:49,610
in that part

574
00:26:49,610 --> 00:26:54,810
they also disabled some of the city well

575
00:26:54,810 --> 00:26:56,460
they throw exceptions right it's hard to

576
00:26:56,460 --> 00:27:01,680
get that yeah so after when I

577
00:27:01,680 --> 00:27:03,960
communicated with them they actually

578
00:27:03,960 --> 00:27:10,680
told that so this thing that seems like

579
00:27:10,680 --> 00:27:12,630
sort of a naive of course you shouldn't

580
00:27:12,630 --> 00:27:14,370
disable the certificates I mean I admit

581
00:27:14,370 --> 00:27:16,410
that I did that myself but not like in a

582
00:27:16,410 --> 00:27:18,270
serious project it was like a toy thing

583
00:27:18,270 --> 00:27:20,460
outside together but even like I'm

584
00:27:20,460 --> 00:27:23,670
sparked is well became is yeah I think

585
00:27:23,670 --> 00:27:26,580
part of the reason why they did these or

586
00:27:26,580 --> 00:27:28,980
supported this feature this wasn't I

587
00:27:28,980 --> 00:27:32,400
think enable by default but in if anyone

588
00:27:32,400 --> 00:27:35,040
wants they can enable your IT staff

589
00:27:35,040 --> 00:27:37,830
often cells we need you to be using HTTP

590
00:27:37,830 --> 00:27:40,350
so for most of the Apache project we see

591
00:27:40,350 --> 00:27:43,860
that even if they're secure by default

592
00:27:43,860 --> 00:27:46,700
they offer this insecure code so that

593
00:27:46,700 --> 00:27:50,180
whenever you install those codes in your

594
00:27:50,180 --> 00:27:54,390
own machine if you face for example you

595
00:27:54,390 --> 00:27:57,360
cannot properly set up a study pas you

596
00:27:57,360 --> 00:27:59,100
can you can be double things like that

597
00:27:59,100 --> 00:28:02,090
so they offer those kind of insecure

598
00:28:02,090 --> 00:28:05,610
cords at your disposal now can enable

599
00:28:05,610 --> 00:28:08,010
those features firm anytime you give me

600
00:28:08,010 --> 00:28:13,700
a loaded gun and you can see yourself so

601
00:28:13,700 --> 00:28:17,610
when so when we communicated these type

602
00:28:17,610 --> 00:28:20,760
of problems with apathy so they actually

603
00:28:20,760 --> 00:28:23,430
defended themselves by this way if a

604
00:28:23,430 --> 00:28:25,860
user in a both these insecure codes

605
00:28:25,860 --> 00:28:27,870
they're actually shooting there well

606
00:28:27,870 --> 00:28:29,340
yeah but if you don't tell us they're

607
00:28:29,340 --> 00:28:31,470
insecure that's hardly an excuse

608
00:28:31,470 --> 00:28:35,720
yeah huh that's wild

609
00:28:36,450 --> 00:28:38,510
you

610
00:28:38,920 --> 00:28:42,640
it's so we saw kind of similar things

611
00:28:42,640 --> 00:28:46,210
with regular expressions the issues were

612
00:28:46,210 --> 00:28:49,750
I think there's sort of philosophically

613
00:28:49,750 --> 00:28:51,580
a lot of overlap yeah

614
00:28:51,580 --> 00:28:53,890
cryptographic primitives and regular

615
00:28:53,890 --> 00:28:55,930
expressions are both kind of these black

616
00:28:55,930 --> 00:28:58,810
box things yeah if you as mr. Cole and

617
00:28:58,810 --> 00:29:00,520
you google on Stack Overflow and hope

618
00:29:00,520 --> 00:29:01,300
for the best

619
00:29:01,300 --> 00:29:04,840
oh you said before we go into reg X's

620
00:29:04,840 --> 00:29:07,240
you said that you found issues in real

621
00:29:07,240 --> 00:29:09,280
stuff in real life the Java projects

622
00:29:09,280 --> 00:29:12,040
using your tool yeah and you also kind

623
00:29:12,040 --> 00:29:14,260
of implied that on Stack Overflow maybe

624
00:29:14,260 --> 00:29:15,940
you would be copy pasting code that

625
00:29:15,940 --> 00:29:18,280
would be not so good yeah it's that the

626
00:29:18,280 --> 00:29:20,740
case like if I google for how do i do

627
00:29:20,740 --> 00:29:23,020
certificate stuff and go look at those

628
00:29:23,020 --> 00:29:24,310
code snippets of the snippets

629
00:29:24,310 --> 00:29:27,730
problematic yeah so you read yeah so in

630
00:29:27,730 --> 00:29:30,220
Stack Overflow prison you look for

631
00:29:30,220 --> 00:29:33,640
answer you will see lots of integer code

632
00:29:33,640 --> 00:29:38,170
snippets so generally what our instincts

633
00:29:38,170 --> 00:29:41,860
are like we see the up verbs if we know

634
00:29:41,860 --> 00:29:44,980
it so if we see lots of up words in one

635
00:29:44,980 --> 00:29:46,930
question we don't even think about the

636
00:29:46,930 --> 00:29:49,780
security and anything else if what we do

637
00:29:49,780 --> 00:29:52,000
is we just copy the code snippet and

638
00:29:52,000 --> 00:29:56,260
paste it in our idea and just click the

639
00:29:56,260 --> 00:29:58,150
Run button whether you got some that if

640
00:29:58,150 --> 00:30:01,270
a fixture green exactly so that's the

641
00:30:01,270 --> 00:30:04,200
problem then my recommendations are like

642
00:30:04,200 --> 00:30:09,790
just don't copy codes blindly also look

643
00:30:09,790 --> 00:30:11,610
for the problems you want to solve

644
00:30:11,610 --> 00:30:14,110
whether they're they are solving those

645
00:30:14,110 --> 00:30:15,910
problems or they are bringing new

646
00:30:15,910 --> 00:30:19,180
problems okay so has anybody actually

647
00:30:19,180 --> 00:30:20,980
gone and looked at all those crypto

648
00:30:20,980 --> 00:30:22,930
snippets on Stack Overflow like if you

649
00:30:22,930 --> 00:30:25,150
have some sense of you know yeah I think

650
00:30:25,150 --> 00:30:27,730
some of the time your job all early 95%

651
00:30:27,730 --> 00:30:30,970
of them are awesome in in our group we

652
00:30:30,970 --> 00:30:36,870
we actually studied that around 2017

653
00:30:36,870 --> 00:30:42,820
summer and we we actually saw that lots

654
00:30:42,820 --> 00:30:45,970
of those I think most of the Popular's

655
00:30:45,970 --> 00:30:50,800
methods are actually in some way or

656
00:30:50,800 --> 00:30:52,550
another

657
00:30:52,550 --> 00:30:54,290
they are functional they're functional

658
00:30:54,290 --> 00:31:00,800
yeah well what a mess what a mess so in

659
00:31:00,800 --> 00:31:02,540
my past time I also answer questions

660
00:31:02,540 --> 00:31:06,380
instead of do you yeah so whenever I see

661
00:31:06,380 --> 00:31:08,420
a mean ticker cords or things like that

662
00:31:08,420 --> 00:31:13,160
I at least comment there with and I also

663
00:31:13,160 --> 00:31:18,440
sometimes try to edit the answer with a

664
00:31:18,440 --> 00:31:22,960
disclaimer this might also comment

665
00:31:22,960 --> 00:31:27,260
underneath the answer yes and what kind

666
00:31:27,260 --> 00:31:29,270
of into Corning I know a lot about this

667
00:31:29,270 --> 00:31:33,290
terrible offense this can all be is can

668
00:31:33,290 --> 00:31:35,990
also backfire you for example we saw

669
00:31:35,990 --> 00:31:38,660
things like if anyone with no reputation

670
00:31:38,660 --> 00:31:44,090
in Stack Overflow try to comment this

671
00:31:44,090 --> 00:31:47,570
kind of things some of the committee

672
00:31:47,570 --> 00:31:51,530
members might also react bad now here

673
00:31:51,530 --> 00:31:54,350
but fortunately I also had enough you

674
00:31:54,350 --> 00:31:56,929
know I see so you kind of inside the

675
00:31:56,929 --> 00:31:59,600
Stack Overflow moderation system no need

676
00:31:59,600 --> 00:32:01,550
to have enough reputation however that's

677
00:32:01,550 --> 00:32:03,590
acquired so that people will take your

678
00:32:03,590 --> 00:32:07,010
opinion it's like you're getting a PhD

679
00:32:07,010 --> 00:32:08,360
in security you think they would just

680
00:32:08,360 --> 00:32:10,309
listen to you but you actually need to

681
00:32:10,309 --> 00:32:12,740
sort of earn credit inside the community

682
00:32:12,740 --> 00:32:15,620
this is also a good thing right yeah it

683
00:32:15,620 --> 00:32:17,900
takes years to build a reputation and I

684
00:32:17,900 --> 00:32:18,950
guess like it but things that you

685
00:32:18,950 --> 00:32:20,900
thousand are false I mean it seems like

686
00:32:20,900 --> 00:32:22,670
a lot of people enjoyed it so it should

687
00:32:22,670 --> 00:32:24,410
take a lot of reputation and other term

688
00:32:24,410 --> 00:32:28,280
the thing is if if you are reported in

689
00:32:28,280 --> 00:32:30,950
say for example Java code how you can

690
00:32:30,950 --> 00:32:34,160
write our maintainable code you got most

691
00:32:34,160 --> 00:32:36,890
of these reputation that's from that you

692
00:32:36,890 --> 00:32:39,980
it's really hard to tell whether your

693
00:32:39,980 --> 00:32:42,440
advices on how to use crypto is a good

694
00:32:42,440 --> 00:32:44,090
yeah that's fair maybe my advice is just

695
00:32:44,090 --> 00:32:45,559
how to get capture the stuff for any

696
00:32:45,559 --> 00:32:48,710
exceptions yeah so the reputation on

697
00:32:48,710 --> 00:32:50,480
Stack Overflow isn't tied to your

698
00:32:50,480 --> 00:32:53,090
particular skill set they said the

699
00:32:53,090 --> 00:32:55,070
problems come on oh that's interesting

700
00:32:55,070 --> 00:32:58,880
so we see simpler things with regular

701
00:32:58,880 --> 00:33:00,530
expressions no it's probably not

702
00:33:00,530 --> 00:33:02,480
surprising it's a crazy black box of

703
00:33:02,480 --> 00:33:04,160
course there's weird stuff that can go

704
00:33:04,160 --> 00:33:05,900
wrong

705
00:33:05,900 --> 00:33:08,480
and they said that we talked to about

706
00:33:08,480 --> 00:33:11,390
300 software engineers and my research

707
00:33:11,390 --> 00:33:14,990
and like I said they said regex it's our

708
00:33:14,990 --> 00:33:17,150
heart and when in doubt they'll tend to

709
00:33:17,150 --> 00:33:19,190
copy/paste stuff thank you and in fact

710
00:33:19,190 --> 00:33:20,600
we have this great quote from one of the

711
00:33:20,600 --> 00:33:23,570
participants they said if it's a common

712
00:33:23,570 --> 00:33:24,260
regex

713
00:33:24,260 --> 00:33:26,480
I'll just Google and try to reuse it off

714
00:33:26,480 --> 00:33:29,179
Stack Overflow and they even say that

715
00:33:29,179 --> 00:33:30,770
when they're reusing arete dicks they'll

716
00:33:30,770 --> 00:33:32,900
skip validation sometimes they'll say

717
00:33:32,900 --> 00:33:35,299
well if I'm using a red X from Stack

718
00:33:35,299 --> 00:33:37,120
Overflow with half a million up votes

719
00:33:37,120 --> 00:33:40,100
Who am I to say it's bad so it is Kathy

720
00:33:40,100 --> 00:33:43,549
and paste it into my code which is you

721
00:33:43,549 --> 00:33:45,260
know exactly like crypto is the same

722
00:33:45,260 --> 00:33:46,460
thing there are all these sort of hidden

723
00:33:46,460 --> 00:33:49,010
gotchas with regular expressions and if

724
00:33:49,010 --> 00:33:51,620
you aren't an expert and it'll kind of

725
00:33:51,620 --> 00:33:53,090
work and you'll maybe even write a test

726
00:33:53,090 --> 00:33:55,309
case and it'll work fine but there's

727
00:33:55,309 --> 00:33:57,470
sort of problems I have a cohesion yeah

728
00:33:57,470 --> 00:33:57,830
go ahead

729
00:33:57,830 --> 00:34:01,580
so if I have the edges that's written

730
00:34:01,580 --> 00:34:04,640
for Java yeah will that work for Ruby

731
00:34:04,640 --> 00:34:06,169
for example well that's sort of the fun

732
00:34:06,169 --> 00:34:08,540
bit right when you google regular

733
00:34:08,540 --> 00:34:10,909
expressions for XYZ you know whatever it

734
00:34:10,909 --> 00:34:12,800
is I need to parse a credit card number

735
00:34:12,800 --> 00:34:14,960
right so people use reg exits we've done

736
00:34:14,960 --> 00:34:15,980
other studies where we're trying to

737
00:34:15,980 --> 00:34:18,440
figure out what they're for and they're

738
00:34:18,440 --> 00:34:20,389
very commonly applied for form

739
00:34:20,389 --> 00:34:22,849
validation right on the client side you

740
00:34:22,849 --> 00:34:25,190
go to type in a phone number and you

741
00:34:25,190 --> 00:34:26,719
want to give a fake phone number so

742
00:34:26,719 --> 00:34:27,830
you're like I don't know one two three

743
00:34:27,830 --> 00:34:29,839
four or five and it'll often say this is

744
00:34:29,839 --> 00:34:31,489
an invalid phone number or you type in a

745
00:34:31,489 --> 00:34:33,349
credit card number and you check the box

746
00:34:33,349 --> 00:34:35,418
that says it's a visa but you make a

747
00:34:35,418 --> 00:34:37,639
typo and there's something that says

748
00:34:37,639 --> 00:34:39,889
this is not a valid phone number this is

749
00:34:39,889 --> 00:34:41,839
not a valid credit card number this

750
00:34:41,839 --> 00:34:44,149
isn't a valid email I see often that

751
00:34:44,149 --> 00:34:45,980
thing is a regular expression yeah and

752
00:34:45,980 --> 00:34:47,839
so they use them on the client side and

753
00:34:47,839 --> 00:34:48,949
they're like let me check the farms

754
00:34:48,949 --> 00:34:50,119
right and then on the server side

755
00:34:50,119 --> 00:34:51,649
they'll copy and paste the regex to the

756
00:34:51,649 --> 00:34:53,270
server side you know and reapply the

757
00:34:53,270 --> 00:34:54,589
check because you know you can always

758
00:34:54,589 --> 00:34:56,300
bypass client side stuff if you're

759
00:34:56,300 --> 00:34:58,190
malicious so you want to double checking

760
00:34:58,190 --> 00:35:00,200
up on things yeah and often the server

761
00:35:00,200 --> 00:35:01,250
side code base it's in a different

762
00:35:01,250 --> 00:35:02,810
language my client sides always

763
00:35:02,810 --> 00:35:05,450
JavaScript the server size off in Java

764
00:35:05,450 --> 00:35:07,460
sometimes it's Ruby sometimes it's

765
00:35:07,460 --> 00:35:09,859
occasionally it's Python if you were

766
00:35:09,859 --> 00:35:12,050
into nodejs it might be a JavaScript so

767
00:35:12,050 --> 00:35:13,700
then it's the same thing but even when

768
00:35:13,700 --> 00:35:16,430
you're changing JavaScript from say

769
00:35:16,430 --> 00:35:19,580
chrome to no it's a different regex

770
00:35:19,580 --> 00:35:23,240
Yeah right the chrome okay Chrome's

771
00:35:23,240 --> 00:35:25,010
about example Firefox has a different

772
00:35:25,010 --> 00:35:26,960
range extension right from a notebook

773
00:35:26,960 --> 00:35:29,720
use the v8 JavaScript engine so there

774
00:35:29,720 --> 00:35:32,480
the red X is it going to be the same so

775
00:35:32,480 --> 00:35:34,580
you have this sort of idea that red X is

776
00:35:34,580 --> 00:35:36,230
for this universal language

777
00:35:36,230 --> 00:35:39,110
mm-hm and you want to copy and paste

778
00:35:39,110 --> 00:35:41,210
your red X's from your client side

779
00:35:41,210 --> 00:35:42,890
JavaScript code to your server-side Java

780
00:35:42,890 --> 00:35:44,620
code your server said Ruby on Rails

781
00:35:44,620 --> 00:35:47,390
machinery and you want to Google hey I

782
00:35:47,390 --> 00:35:49,220
need a red X for phone numbers hey

783
00:35:49,220 --> 00:35:50,870
there's a hit I don't really care what

784
00:35:50,870 --> 00:35:52,370
language it's for because it's gonna

785
00:35:52,370 --> 00:35:54,080
work in my programming language the same

786
00:35:54,080 --> 00:35:56,870
way yeah so we all have this kind of

787
00:35:56,870 --> 00:35:59,090
this kind of conception and I'll

788
00:35:59,090 --> 00:36:00,890
actually be so bold as to call it a

789
00:36:00,890 --> 00:36:03,320
misconception that regular expressions

790
00:36:03,320 --> 00:36:04,880
will work the same across programming

791
00:36:04,880 --> 00:36:09,400
languages so I I don't remember I

792
00:36:09,400 --> 00:36:11,750
validated in the client site well it

793
00:36:11,750 --> 00:36:15,640
turns out that you should have done that

794
00:36:17,410 --> 00:36:19,700
so if you if you go look at all the

795
00:36:19,700 --> 00:36:21,230
documentation for the different

796
00:36:21,230 --> 00:36:23,000
programming languages in every language

797
00:36:23,000 --> 00:36:24,980
has a red X library built into it this

798
00:36:24,980 --> 00:36:28,970
one in PHP JavaScript Perl Ruby Python C

799
00:36:28,970 --> 00:36:30,350
sharp go rest

800
00:36:30,350 --> 00:36:32,210
everybody's got a red text engine yeah

801
00:36:32,210 --> 00:36:33,740
and they all have red X engines because

802
00:36:33,740 --> 00:36:35,660
they're so darn useful right developers

803
00:36:35,660 --> 00:36:38,420
need to manipulate strings and read X's

804
00:36:38,420 --> 00:36:39,740
are sort of the power tool for that

805
00:36:39,740 --> 00:36:43,280
purpose mm-hmm but if you go look at the

806
00:36:43,280 --> 00:36:45,140
documentation for the rhetoric system

807
00:36:45,140 --> 00:36:47,050
the different programming languages and

808
00:36:47,050 --> 00:36:50,270
you spend a long time doing this right

809
00:36:50,270 --> 00:36:52,010
at the surface level it all looks about

810
00:36:52,010 --> 00:36:54,350
the same but you know ABC next to each

811
00:36:54,350 --> 00:36:56,300
other you get a star you can have a plus

812
00:36:56,300 --> 00:36:58,190
you can group stuff with parentheses

813
00:36:58,190 --> 00:37:01,010
yeah sort of surface level the syntax is

814
00:37:01,010 --> 00:37:03,620
very similar but if you keep reading and

815
00:37:03,620 --> 00:37:05,120
I'll tell you that you have to read for

816
00:37:05,120 --> 00:37:06,890
a while because I'm an hour's reading

817
00:37:06,890 --> 00:37:15,050
this documentation fascinating if you

818
00:37:15,050 --> 00:37:16,310
keep reading the docs you'll eventually

819
00:37:16,310 --> 00:37:17,840
find that there are some weird

820
00:37:17,840 --> 00:37:19,760
inconsistencies and these

821
00:37:19,760 --> 00:37:22,820
inconsistencies are of two forms the

822
00:37:22,820 --> 00:37:26,510
first form is where maybe three forms

823
00:37:26,510 --> 00:37:28,670
sometimes a programming language does

824
00:37:28,670 --> 00:37:30,470
not support the same features as another

825
00:37:30,470 --> 00:37:33,530
program in English right so in

826
00:37:33,530 --> 00:37:35,420
javascript you've got the ability to

827
00:37:35,420 --> 00:37:38,900
make a back reference fancy extended

828
00:37:38,900 --> 00:37:40,970
feature you don't have that power in

829
00:37:40,970 --> 00:37:43,670
Western go yeah so if you're looking for

830
00:37:43,670 --> 00:37:46,220
a back reference in Western go you you

831
00:37:46,220 --> 00:37:48,980
just won't find in the docs no it's not

832
00:37:48,980 --> 00:37:50,570
documented that it's not there so you

833
00:37:50,570 --> 00:37:51,620
have to kind of know what you're looking

834
00:37:51,620 --> 00:37:53,570
for but if you copy and paste a regex

835
00:37:53,570 --> 00:37:55,580
for Stack Overflow that has a back

836
00:37:55,580 --> 00:37:56,570
reference hmm

837
00:37:56,570 --> 00:37:59,060
into rust code or go code it won't work

838
00:37:59,060 --> 00:38:00,500
you'll get a compilation error

839
00:38:00,500 --> 00:38:02,450
hold that thought though because in rust

840
00:38:02,450 --> 00:38:04,130
you won't get a compilation error and

841
00:38:04,130 --> 00:38:05,780
must still get really weird behavior

842
00:38:05,780 --> 00:38:08,840
instead it's not so this is one thing

843
00:38:08,840 --> 00:38:10,490
where the features not supported yeah

844
00:38:10,490 --> 00:38:11,690
all right then there's this other class

845
00:38:11,690 --> 00:38:15,140
of issues where the feature is supported

846
00:38:15,140 --> 00:38:17,650
but the it means a different thing

847
00:38:17,650 --> 00:38:20,270
alright so in Ruby ban can be

848
00:38:20,270 --> 00:38:20,930
devastating

849
00:38:20,930 --> 00:38:22,700
oh it can be also very hard to debug

850
00:38:22,700 --> 00:38:25,010
because you never used to like pearl reg

851
00:38:25,010 --> 00:38:27,020
X's and you're writing a regex in Ruby

852
00:38:27,020 --> 00:38:29,630
this notation meant one thing in Perl

853
00:38:29,630 --> 00:38:31,130
and it means a different thing in Ruby

854
00:38:31,130 --> 00:38:34,220
so good luck triggering that I actually

855
00:38:34,220 --> 00:38:36,680
saw this great example recently of a red

856
00:38:36,680 --> 00:38:39,520
X in JavaScript that used a backslash H

857
00:38:39,520 --> 00:38:43,160
which in I think Ruby means a horizontal

858
00:38:43,160 --> 00:38:47,990
whitespace and in JavaScript means the

859
00:38:47,990 --> 00:38:50,060
literal character H anything so this

860
00:38:50,060 --> 00:38:51,890
this is rhetorics in JavaScript that

861
00:38:51,890 --> 00:38:54,530
does not match horizontal whitespace it

862
00:38:54,530 --> 00:38:56,990
matches the character H and it had been

863
00:38:56,990 --> 00:38:58,820
in the code base for years because it

864
00:38:58,820 --> 00:39:00,590
was sort of an untested part of the

865
00:39:00,590 --> 00:39:03,200
regex and I asked the developer I said

866
00:39:03,200 --> 00:39:04,670
you know this is not right and and they

867
00:39:04,670 --> 00:39:07,550
said oh I don't really know how they got

868
00:39:07,550 --> 00:39:09,290
there I guess I was thinking about Ruby

869
00:39:09,290 --> 00:39:11,330
that day right it's just very hard to

870
00:39:11,330 --> 00:39:12,830
keep all these variations straight in

871
00:39:12,830 --> 00:39:14,960
your head so that's another example of

872
00:39:14,960 --> 00:39:17,630
sort of a semantic inconsistency where

873
00:39:17,630 --> 00:39:19,850
there's this notation but it doesn't

874
00:39:19,850 --> 00:39:21,020
mean quite the same thing that we're

875
00:39:21,020 --> 00:39:23,120
used to and sometimes it's obvious right

876
00:39:23,120 --> 00:39:25,190
okay it matches an H versus horizontal

877
00:39:25,190 --> 00:39:27,710
whitespace but sometimes it's actually

878
00:39:27,710 --> 00:39:33,560
sort of bizarre in there are these these

879
00:39:33,560 --> 00:39:35,690
things you can sort of put parentheses

880
00:39:35,690 --> 00:39:37,400
inside each other and you can put stars

881
00:39:37,400 --> 00:39:38,930
and pluses in there too if you want to

882
00:39:38,930 --> 00:39:40,640
things can get a little hairy and you

883
00:39:40,640 --> 00:39:42,470
can actually create very short minimal

884
00:39:42,470 --> 00:39:45,620
examples of regex like nested a plus

885
00:39:45,620 --> 00:39:46,430
where the plus on

886
00:39:46,430 --> 00:39:48,500
outside where we'll actually behave

887
00:39:48,500 --> 00:39:50,180
slightly differently in two different

888
00:39:50,180 --> 00:39:52,309
programming languages and it's not

889
00:39:52,309 --> 00:39:54,380
documented anywhere right they both say

890
00:39:54,380 --> 00:39:55,910
this is what a-plus does and this is

891
00:39:55,910 --> 00:39:57,859
what a star does but when you start

892
00:39:57,859 --> 00:39:59,660
talking about the interactions of these

893
00:39:59,660 --> 00:40:01,400
features the documentation quickly

894
00:40:01,400 --> 00:40:03,260
becomes very silent right there's just

895
00:40:03,260 --> 00:40:05,839
crickets it's like we hope that no one

896
00:40:05,839 --> 00:40:07,549
ever tries this and we're not willing to

897
00:40:07,549 --> 00:40:10,579
document the actual behavior there have

898
00:40:10,579 --> 00:40:12,109
been some efforts at reject

899
00:40:12,109 --> 00:40:13,730
standardization right so there's a

900
00:40:13,730 --> 00:40:16,400
couple different POSIX specs and there's

901
00:40:16,400 --> 00:40:19,369
the Perl compatible regex spec pcre

902
00:40:19,369 --> 00:40:21,440
no one has really sort of gone gung-ho

903
00:40:21,440 --> 00:40:23,809
in adopting these everybody says we kind

904
00:40:23,809 --> 00:40:27,650
of follow the POSIX pcre spec we're not

905
00:40:27,650 --> 00:40:30,140
willing to like sign that and blood or

906
00:40:30,140 --> 00:40:32,690
anything but in general it's going to

907
00:40:32,690 --> 00:40:34,730
look about the same and so when things

908
00:40:34,730 --> 00:40:36,470
look about the same developers have this

909
00:40:36,470 --> 00:40:38,089
impression that they'll behave the same

910
00:40:38,089 --> 00:40:40,520
that's not really the case yeah so we

911
00:40:40,520 --> 00:40:42,170
actually ran an experiment right so in

912
00:40:42,170 --> 00:40:43,940
addition to reading documentation for

913
00:40:43,940 --> 00:40:45,710
many hours which I assure you was very

914
00:40:45,710 --> 00:40:50,240
fun we also downloaded about two hundred

915
00:40:50,240 --> 00:40:52,309
thousand projects of github in eight

916
00:40:52,309 --> 00:40:53,930
different programming languages well and

917
00:40:53,930 --> 00:40:55,640
we extracted all the reg X's from that

918
00:40:55,640 --> 00:40:58,010
which gave some large score yeah we gave

919
00:40:58,010 --> 00:41:00,380
about half a million so if you happen to

920
00:41:00,380 --> 00:41:03,579
need a regex I have half a million yeah

921
00:41:03,579 --> 00:41:05,960
so we pulled out these reg X's from all

922
00:41:05,960 --> 00:41:07,520
these different projects and then we

923
00:41:07,520 --> 00:41:09,410
said well now we have a giant collection

924
00:41:09,410 --> 00:41:12,829
of reg X's do they behave the same so we

925
00:41:12,829 --> 00:41:14,420
took these input generators from a

926
00:41:14,420 --> 00:41:15,740
couple different places

927
00:41:15,740 --> 00:41:17,809
Microsoft has an imp regenerator for

928
00:41:17,809 --> 00:41:19,220
redexes is a few different academic

929
00:41:19,220 --> 00:41:21,680
teams who've got input generators but

930
00:41:21,680 --> 00:41:23,750
basically it's you know given this reg X

931
00:41:23,750 --> 00:41:24,380
pattern

932
00:41:24,380 --> 00:41:25,849
give me some strings that are

933
00:41:25,849 --> 00:41:27,200
interesting and some of them will match

934
00:41:27,200 --> 00:41:28,640
the pattern and some of them will not

935
00:41:28,640 --> 00:41:30,529
match the pattern in different ways yeah

936
00:41:30,529 --> 00:41:33,170
so I built you know about 2,000 inputs

937
00:41:33,170 --> 00:41:34,880
for each of these half-a-million red x's

938
00:41:34,880 --> 00:41:36,589
we're talking about you know a lot of

939
00:41:36,589 --> 00:41:37,970
computational power here I use the

940
00:41:37,970 --> 00:41:41,869
supercomputer it took a couple days but

941
00:41:41,869 --> 00:41:43,339
you generate you know a lot of these

942
00:41:43,339 --> 00:41:45,859
things on your 10 notes for my Acer

943
00:41:45,859 --> 00:41:48,020
cycle yeah I used took several terabytes

944
00:41:48,020 --> 00:41:53,059
a ram i anyway you generate all these

945
00:41:53,059 --> 00:41:54,500
things and then you're like well I have

946
00:41:54,500 --> 00:41:57,349
this input for a pattern write a regex

947
00:41:57,349 --> 00:42:00,069
and I got the regex out of JavaScript

948
00:42:00,069 --> 00:42:02,109
now let's see if I copy and paste this

949
00:42:02,109 --> 00:42:04,329
red X from JavaScript into Python exact

950
00:42:04,329 --> 00:42:05,969
same regex mm-hmm

951
00:42:05,969 --> 00:42:08,890
exact same input let's check out the

952
00:42:08,890 --> 00:42:11,109
behaviors the same yeah and it turns out

953
00:42:11,109 --> 00:42:12,400
that about 10 percent of the time the

954
00:42:12,400 --> 00:42:14,739
behavior will be different right so we

955
00:42:14,739 --> 00:42:17,079
have half a million red x's on 50,000 of

956
00:42:17,079 --> 00:42:19,329
them there is some pair of languages

957
00:42:19,329 --> 00:42:21,459
where there's some input that they'll

958
00:42:21,459 --> 00:42:24,039
behave differently on which is like

959
00:42:24,039 --> 00:42:25,869
bizarre to me that it's that high of a

960
00:42:25,869 --> 00:42:28,180
proportion we actually kind of broke it

961
00:42:28,180 --> 00:42:30,130
down into sort of what's the root cause

962
00:42:30,130 --> 00:42:31,809
here and some of these things are

963
00:42:31,809 --> 00:42:33,160
documented right so it's like this

964
00:42:33,160 --> 00:42:35,259
backslash H of white space or a little

965
00:42:35,259 --> 00:42:38,229
roll H you can find that in the docs if

966
00:42:38,229 --> 00:42:39,549
you look hard enough and you know what

967
00:42:39,549 --> 00:42:41,619
you're looking for others that these

968
00:42:41,619 --> 00:42:43,180
things are not documented right so

969
00:42:43,180 --> 00:42:44,469
there's literally no way to find this

970
00:42:44,469 --> 00:42:47,559
out other than some sort of ancestral

971
00:42:47,559 --> 00:42:50,349
tradition about how red x's work or

972
00:42:50,349 --> 00:42:52,390
trying this experiment yourself at home

973
00:42:52,390 --> 00:42:55,089
which ironed it for you do you have any

974
00:42:55,089 --> 00:42:57,219
recommendations of how you can write

975
00:42:57,219 --> 00:43:00,940
good reject or what you should look for

976
00:43:00,940 --> 00:43:03,219
or what you should have work well when

977
00:43:03,219 --> 00:43:05,920
you are writing latex I think when in

978
00:43:05,920 --> 00:43:08,589
doubt open up the regex manual for your

979
00:43:08,589 --> 00:43:12,910
programming language so we we talked to

980
00:43:12,910 --> 00:43:14,940
300 different software engineers and

981
00:43:14,940 --> 00:43:17,979
maybe 20% of them said that when they

982
00:43:17,979 --> 00:43:19,690
write a regex they actually pull up the

983
00:43:19,690 --> 00:43:21,160
manual and confirm it's working properly

984
00:43:21,160 --> 00:43:26,829
how many pages of the POSIX spec runs to

985
00:43:26,829 --> 00:43:28,089
like a hundred pages because it's a

986
00:43:28,089 --> 00:43:30,339
POSIX spec so it's just a ridiculous

987
00:43:30,339 --> 00:43:32,739
standard but the Python documentation

988
00:43:32,739 --> 00:43:36,309
for example is not too bad no maybe 10

989
00:43:36,309 --> 00:43:38,140
pages or so but you can usually you know

990
00:43:38,140 --> 00:43:39,640
control us to find the feature you're

991
00:43:39,640 --> 00:43:41,499
looking for but there's really no

992
00:43:41,499 --> 00:43:43,749
substitute for double-checking that

993
00:43:43,749 --> 00:43:45,549
every piece of this reg X does what you

994
00:43:45,549 --> 00:43:47,319
think it does and there's some online

995
00:43:47,319 --> 00:43:49,660
tools for reg X's that have like little

996
00:43:49,660 --> 00:43:51,160
cheat sheets built in explaining what

997
00:43:51,160 --> 00:43:53,049
the syntax does but they're not always

998
00:43:53,049 --> 00:43:53,709
accurate

999
00:43:53,709 --> 00:43:55,449
mmm because that assumes something about

1000
00:43:55,449 --> 00:43:57,549
what programming manager so you just

1001
00:43:57,549 --> 00:43:59,559
want to be many recipes of the developer

1002
00:43:59,559 --> 00:44:02,799
memory well so I said about 20% actually

1003
00:44:02,799 --> 00:44:03,940
referenced the manual in the day-to-day

1004
00:44:03,940 --> 00:44:06,609
the other 80% hope for the best

1005
00:44:06,609 --> 00:44:07,989
all right they said that we they said

1006
00:44:07,989 --> 00:44:09,339
you know we we just kind of hope this

1007
00:44:09,339 --> 00:44:12,099
works and we write test cases so this is

1008
00:44:12,099 --> 00:44:13,370
this fun thing about

1009
00:44:13,370 --> 00:44:15,110
cases and reg exes there was a paper

1010
00:44:15,110 --> 00:44:17,450
last year from a group at NC State

1011
00:44:17,450 --> 00:44:19,730
yeah and they ran a bunch of Java

1012
00:44:19,730 --> 00:44:21,680
programs they downloaded a couple

1013
00:44:21,680 --> 00:44:23,660
thousand Java projects and random test

1014
00:44:23,660 --> 00:44:25,700
Suites and they pulled out all the Reg

1015
00:44:25,700 --> 00:44:28,430
X's and all the inputs for those reg X's

1016
00:44:28,430 --> 00:44:31,850
and you can kind of think of the input

1017
00:44:31,850 --> 00:44:36,460
for the reg ex as like a test case and

1018
00:44:36,460 --> 00:44:38,870
you can think of the reg ex as like a

1019
00:44:38,870 --> 00:44:41,450
little program and if you think about

1020
00:44:41,450 --> 00:44:43,100
the Redax as a little program you didn't

1021
00:44:43,100 --> 00:44:44,150
want to say well what about the code

1022
00:44:44,150 --> 00:44:46,070
coverage from my main program here and

1023
00:44:46,070 --> 00:44:47,570
all these inputs from the test suite or

1024
00:44:47,570 --> 00:44:49,670
basically test cases for the lines of

1025
00:44:49,670 --> 00:44:53,360
code your little reg X and the folks at

1026
00:44:53,360 --> 00:44:56,030
NC State said the code coverage is

1027
00:44:56,030 --> 00:44:59,900
terrible so like the line coverage is

1028
00:44:59,900 --> 00:45:01,430
fine in the product but you're getting

1029
00:45:01,430 --> 00:45:03,410
input to that line and evaluating the

1030
00:45:03,410 --> 00:45:03,920
regex

1031
00:45:03,920 --> 00:45:05,690
but the red X matches tons of different

1032
00:45:05,690 --> 00:45:08,540
stuff yeah and if you look at it as an

1033
00:45:08,540 --> 00:45:11,000
atomic on only about 50% or less is

1034
00:45:11,000 --> 00:45:12,770
actually getting covered by those tested

1035
00:45:12,770 --> 00:45:14,480
points I think that also makes sense

1036
00:45:14,480 --> 00:45:17,890
right it's really hard to generate all

1037
00:45:17,890 --> 00:45:20,960
Yui or in a constrained environment it

1038
00:45:20,960 --> 00:45:22,640
is hard yeah you should do it anyway

1039
00:45:22,640 --> 00:45:24,410
yeah all right so when you copy and

1040
00:45:24,410 --> 00:45:26,240
paste rent X's off a stack or perform to

1041
00:45:26,240 --> 00:45:29,630
your code base so for example when I had

1042
00:45:29,630 --> 00:45:35,260
two maps email for okay I always go to

1043
00:45:35,260 --> 00:45:39,230
and copy the one would have the number

1044
00:45:39,230 --> 00:45:41,630
of so it's a little tricky there is that

1045
00:45:41,630 --> 00:45:43,160
when you're copying it into your code

1046
00:45:43,160 --> 00:45:45,410
base yeah if the language doesn't match

1047
00:45:45,410 --> 00:45:47,840
yeah the programming language then it

1048
00:45:47,840 --> 00:45:49,400
may not have quite the same behavior

1049
00:45:49,400 --> 00:45:50,990
that you were expecting yeah and this

1050
00:45:50,990 --> 00:45:52,280
can lead to all sorts of exciting

1051
00:45:52,280 --> 00:45:54,470
problems all the way up to like SQL

1052
00:45:54,470 --> 00:45:56,570
injection attacks depending on exactly

1053
00:45:56,570 --> 00:45:58,430
how different the behavior is in the

1054
00:45:58,430 --> 00:46:01,610
destination but that's all about program

1055
00:46:01,610 --> 00:46:02,930
correctness you know there's this whole

1056
00:46:02,930 --> 00:46:05,090
other aspect of regular expressions that

1057
00:46:05,090 --> 00:46:06,740
can be problematic and that is their

1058
00:46:06,740 --> 00:46:09,380
performance I think so we think of

1059
00:46:09,380 --> 00:46:11,210
regular expressions is a fairly fast

1060
00:46:11,210 --> 00:46:13,220
thing because we feed them strings and

1061
00:46:13,220 --> 00:46:14,450
they feed back a match and we're like

1062
00:46:14,450 --> 00:46:16,520
cool it match did enough for me I'm

1063
00:46:16,520 --> 00:46:19,220
gonna spend five seconds handling this

1064
00:46:19,220 --> 00:46:20,600
client request and what's 10

1065
00:46:20,600 --> 00:46:23,570
milliseconds doing the regex match but

1066
00:46:23,570 --> 00:46:25,520
it turns out that in most programming

1067
00:46:25,520 --> 00:46:26,670
languages

1068
00:46:26,670 --> 00:46:29,880
the average case performance for regex

1069
00:46:29,880 --> 00:46:32,460
is fast it's 90 or in the input you give

1070
00:46:32,460 --> 00:46:34,890
it but the worst case performance for

1071
00:46:34,890 --> 00:46:37,079
regex can be as bad as exponential in

1072
00:46:37,079 --> 00:46:38,940
the length of the input so what does

1073
00:46:38,940 --> 00:46:40,289
that mean it means that there's some reg

1074
00:46:40,289 --> 00:46:42,119
X is out there you give them a hundred

1075
00:46:42,119 --> 00:46:43,829
characters and they'll take a hundred

1076
00:46:43,829 --> 00:46:45,839
years to finish the evaluation as

1077
00:46:45,839 --> 00:46:48,869
exponential is really bad word there's a

1078
00:46:48,869 --> 00:46:49,740
whole bunch of other ones that are

1079
00:46:49,740 --> 00:46:52,200
polynomial so it's also a bad word it

1080
00:46:52,200 --> 00:46:54,180
means I give it ten thousand characters

1081
00:46:54,180 --> 00:46:55,799
and it'll take a couple years to solve

1082
00:46:55,799 --> 00:46:58,380
that I mean it's a lot better than a

1083
00:46:58,380 --> 00:47:02,220
million years but if if I can get ten

1084
00:47:02,220 --> 00:47:04,019
thousand care malicious characters

1085
00:47:04,019 --> 00:47:06,420
through your web form to this reg X now

1086
00:47:06,420 --> 00:47:07,740
your server is going to spend years

1087
00:47:07,740 --> 00:47:09,240
operating under half of this one

1088
00:47:09,240 --> 00:47:11,490
malicious client I can really bite

1089
00:47:11,490 --> 00:47:13,619
Chapman yeah we actually went out of

1090
00:47:13,619 --> 00:47:15,839
measuring of course why we went out and

1091
00:47:15,839 --> 00:47:17,880
collected a bunch of reg X's and checked

1092
00:47:17,880 --> 00:47:21,720
what they did yeah and so first most

1093
00:47:21,720 --> 00:47:23,220
programming languages have this

1094
00:47:23,220 --> 00:47:26,190
worst-case behavior problem in

1095
00:47:26,190 --> 00:47:28,109
everything but rest and go you can get

1096
00:47:28,109 --> 00:47:30,119
at least polynomial time mm-hm and

1097
00:47:30,119 --> 00:47:32,670
everything but rest go in PHP you can

1098
00:47:32,670 --> 00:47:34,710
get exponential time so but I think

1099
00:47:34,710 --> 00:47:36,299
programming languages five out of eight

1100
00:47:36,299 --> 00:47:38,599
exponential worst-case behavior very bad

1101
00:47:38,599 --> 00:47:41,039
one I have a polynomial worst case

1102
00:47:41,039 --> 00:47:42,539
behavior and two questions though are

1103
00:47:42,539 --> 00:47:45,359
pretty good be careful about the right

1104
00:47:45,359 --> 00:47:48,450
excited behavior and you might think

1105
00:47:48,450 --> 00:47:49,950
that no one would really write a regex

1106
00:47:49,950 --> 00:47:53,279
like this in practice but we've checked

1107
00:47:53,279 --> 00:47:56,039
that too it turns out that about 10% of

1108
00:47:56,039 --> 00:47:58,289
the red x's that people write exhibit

1109
00:47:58,289 --> 00:48:00,269
super linear behavior right there are

1110
00:48:00,269 --> 00:48:02,819
the polynomial or worse which is a scary

1111
00:48:02,819 --> 00:48:04,859
number because these red x's appear in

1112
00:48:04,859 --> 00:48:07,109
some interesting places so as part of

1113
00:48:07,109 --> 00:48:09,240
that research we found super linear reg

1114
00:48:09,240 --> 00:48:11,130
X's that could be denial-of-service full

1115
00:48:11,130 --> 00:48:12,779
nerd uh letís right if you're running a

1116
00:48:12,779 --> 00:48:14,279
web server and stone gives you a bad

1117
00:48:14,279 --> 00:48:15,960
input and you take a year to process it

1118
00:48:15,960 --> 00:48:17,519
you're burning a lot of compute power

1119
00:48:17,519 --> 00:48:20,039
handling an attack right that's a dos

1120
00:48:20,039 --> 00:48:22,500
vectored how do you think you can tackle

1121
00:48:22,500 --> 00:48:25,109
these really good station denial of

1122
00:48:25,109 --> 00:48:28,440
service attack should these defenses

1123
00:48:28,440 --> 00:48:32,490
come from the pledges engines or should

1124
00:48:32,490 --> 00:48:35,609
developers fix or know what type of

1125
00:48:35,609 --> 00:48:37,440
bridges they're doing that's a great

1126
00:48:37,440 --> 00:48:39,630
question so you

1127
00:48:39,630 --> 00:48:41,010
you have a couple different options and

1128
00:48:41,010 --> 00:48:42,840
we've actually seen all of these happen

1129
00:48:42,840 --> 00:48:45,660
right so in in this empirical project we

1130
00:48:45,660 --> 00:48:47,370
found a bunch of vulnerable reg X's and

1131
00:48:47,370 --> 00:48:49,320
we emailed the developers emailed about

1132
00:48:49,320 --> 00:48:52,320
200 devs and said hey this reg X could

1133
00:48:52,320 --> 00:48:54,420
go haywire you might want to fix it yeah

1134
00:48:54,420 --> 00:48:56,400
and we looked at how they fixed it so

1135
00:48:56,400 --> 00:48:58,920
some of them say well it's polynomial so

1136
00:48:58,920 --> 00:49:00,180
I'll just make sure the inputs not too

1137
00:49:00,180 --> 00:49:02,220
long and that'll be totally fine right

1138
00:49:02,220 --> 00:49:04,170
it's gonna be polynomial but it's

1139
00:49:04,170 --> 00:49:07,500
bounded at a millisecond so no biggie

1140
00:49:07,500 --> 00:49:09,870
other developers will revise the regex

1141
00:49:09,870 --> 00:49:11,640
so they'll take the Redax and they'll

1142
00:49:11,640 --> 00:49:13,470
try to rewrite it so that it'll still

1143
00:49:13,470 --> 00:49:15,060
match more or less the same string set

1144
00:49:15,060 --> 00:49:17,580
but it won't have this sort of super

1145
00:49:17,580 --> 00:49:19,770
linear behavior afterwards okay they're

1146
00:49:19,770 --> 00:49:21,540
not always perfect at that yeah this is

1147
00:49:21,540 --> 00:49:23,250
a tricky problem and loose people make

1148
00:49:23,250 --> 00:49:26,550
mistakes we actually found some red X's

1149
00:49:26,550 --> 00:49:29,040
that had previously been repaired that

1150
00:49:29,040 --> 00:49:30,360
we're still vulnerable just in a

1151
00:49:30,360 --> 00:49:32,970
different way and then another option at

1152
00:49:32,970 --> 00:49:34,920
the application level you can bring in a

1153
00:49:34,920 --> 00:49:37,080
different regex engine so Google has

1154
00:49:37,080 --> 00:49:39,420
this red X engine called re - and

1155
00:49:39,420 --> 00:49:40,500
they've got bindings and all the

1156
00:49:40,500 --> 00:49:41,730
different programming languages you

1157
00:49:41,730 --> 00:49:43,740
typically use you can actually add that

1158
00:49:43,740 --> 00:49:46,020
as a dependency to your project and feed

1159
00:49:46,020 --> 00:49:48,090
your red x's to that now this has its

1160
00:49:48,090 --> 00:49:49,710
own problems right if you have these

1161
00:49:49,710 --> 00:49:52,100
portability issues between red X engines

1162
00:49:52,100 --> 00:49:54,240
you're gonna need to be very careful

1163
00:49:54,240 --> 00:49:55,950
about confirming that the red X behaves

1164
00:49:55,950 --> 00:49:58,410
exactly the same way as it used to and

1165
00:49:58,410 --> 00:50:00,750
if your test suite is inadequate good

1166
00:50:00,750 --> 00:50:02,100
luck with that right you'll need to beef

1167
00:50:02,100 --> 00:50:03,780
up your test suite before you take that

1168
00:50:03,780 --> 00:50:06,420
route another option which is available

1169
00:50:06,420 --> 00:50:09,030
is to change the red X engine itself and

1170
00:50:09,030 --> 00:50:10,530
that's actually where I'm kind of going

1171
00:50:10,530 --> 00:50:12,570
and my future research is now that we

1172
00:50:12,570 --> 00:50:14,010
know that this problem is out there and

1173
00:50:14,010 --> 00:50:16,800
effects lots of applications can we sort

1174
00:50:16,800 --> 00:50:18,450
of systematically fix it so we just

1175
00:50:18,450 --> 00:50:20,700
never have to worry about this again and

1176
00:50:20,700 --> 00:50:23,220
I think we can rest and go have tried

1177
00:50:23,220 --> 00:50:24,510
one approach and I'm proposing a

1178
00:50:24,510 --> 00:50:26,210
different approach that I think will be

1179
00:50:26,210 --> 00:50:27,720
appropriate for lots of different

1180
00:50:27,720 --> 00:50:30,830
programming languages

1181
00:50:32,020 --> 00:50:34,240
so Sam we can keep talking but if there

1182
00:50:34,240 --> 00:50:35,740
are questions out there we would be

1183
00:50:35,740 --> 00:50:37,990
happy to answer specific thoughts from

1184
00:50:37,990 --> 00:50:39,790
folks um

1185
00:50:39,790 --> 00:50:41,380
they know specific questions at the

1186
00:50:41,380 --> 00:50:44,160
moment seems everyone's captivated by

1187
00:50:44,160 --> 00:50:46,270
the great conversation between the two

1188
00:50:46,270 --> 00:50:49,420
of you I've definitely enjoyed it so we

1189
00:50:49,420 --> 00:50:50,980
can we've got a few minutes to carry on

1190
00:50:50,980 --> 00:50:53,380
and I mean do another shout out to

1191
00:50:53,380 --> 00:50:54,340
anyone listening who does have a

1192
00:50:54,340 --> 00:50:55,869
question please feel free to pop it in

1193
00:50:55,869 --> 00:50:59,230
these slack but yeah at the moment no

1194
00:50:59,230 --> 00:51:02,070
questions from areand

1195
00:51:04,270 --> 00:51:06,950
so senator I have a question for you

1196
00:51:06,950 --> 00:51:17,900
then okay what's it like for you to be a

1197
00:51:17,900 --> 00:51:21,200
security researcher right you're sort of

1198
00:51:21,200 --> 00:51:22,880
deep in the muck of how these

1199
00:51:22,880 --> 00:51:25,400
cryptographic protocols work and over in

1200
00:51:25,400 --> 00:51:28,069
the real world there are lots of folks

1201
00:51:28,069 --> 00:51:29,299
who don't really know how these things

1202
00:51:29,299 --> 00:51:31,039
work and there is something for the best

1203
00:51:31,039 --> 00:51:33,079
and it seems like there may be sort of a

1204
00:51:33,079 --> 00:51:34,849
disconnect between the research

1205
00:51:34,849 --> 00:51:36,230
community and the practice community

1206
00:51:36,230 --> 00:51:38,930
yeah so what kind of a burden that you

1207
00:51:38,930 --> 00:51:41,030
carry as a researcher and how do you try

1208
00:51:41,030 --> 00:51:43,640
to bridge that gap I think it's the

1209
00:51:43,640 --> 00:51:48,579
roller coaster right and what we see is

1210
00:51:48,579 --> 00:51:51,440
there are there lots of the thing as a

1211
00:51:51,440 --> 00:51:54,200
researcher we care about but we

1212
00:51:54,200 --> 00:51:57,230
sometimes get really hard time to convey

1213
00:51:57,230 --> 00:52:00,799
our message to the developer so that

1214
00:52:00,799 --> 00:52:03,980
that part sometimes can be frustrating

1215
00:52:03,980 --> 00:52:07,730
but we eventually after few years you

1216
00:52:07,730 --> 00:52:10,750
will learn how you can deal with that so

1217
00:52:10,750 --> 00:52:13,880
currently the motto of my research is to

1218
00:52:13,880 --> 00:52:17,930
make whatever so I think the liabilities

1219
00:52:17,930 --> 00:52:19,819
from both it is from the research

1220
00:52:19,819 --> 00:52:21,500
community and also from the developer

1221
00:52:21,500 --> 00:52:23,990
coverage from the research community of

1222
00:52:23,990 --> 00:52:27,079
what we do is we work on an interesting

1223
00:52:27,079 --> 00:52:30,619
project and we publish a paper and after

1224
00:52:30,619 --> 00:52:35,000
sometimes we really forget that the we

1225
00:52:35,000 --> 00:52:40,130
we actually conducted the study or deep

1226
00:52:40,130 --> 00:52:42,230
the research form for the betterment of

1227
00:52:42,230 --> 00:52:44,480
the developer you just kind of get stuck

1228
00:52:44,480 --> 00:52:46,069
yeah inciting problem when you figure

1229
00:52:46,069 --> 00:52:48,020
out why exactly and after some time what

1230
00:52:48,020 --> 00:52:50,869
we do is we just forget about that the

1231
00:52:50,869 --> 00:52:55,750
main problem is if you don't pursue your

1232
00:52:55,750 --> 00:52:59,750
the problem or pursue the problem in

1233
00:52:59,750 --> 00:53:05,079
depth if you don't spend some effort to

1234
00:53:05,079 --> 00:53:08,059
deliver that to the developer it will

1235
00:53:08,059 --> 00:53:10,869
it's really hard for the developer to

1236
00:53:10,869 --> 00:53:13,849
adopt what you are proposing or what you

1237
00:53:13,849 --> 00:53:16,790
want to want them to use yeah kind of

1238
00:53:16,790 --> 00:53:19,850
our experience yeah I did a little bit

1239
00:53:19,850 --> 00:53:21,890
of work on nodejs when I was starting

1240
00:53:21,890 --> 00:53:25,550
out as a researcher and I felt very much

1241
00:53:25,550 --> 00:53:28,370
like an outsider in that community right

1242
00:53:28,370 --> 00:53:29,870
it's this huge active developer

1243
00:53:29,870 --> 00:53:31,700
community and I'm just a researcher and

1244
00:53:31,700 --> 00:53:33,980
I make myself heard with suggestions I

1245
00:53:33,980 --> 00:53:38,090
also failed similars similar thing when

1246
00:53:38,090 --> 00:53:42,560
I started communicating with you know

1247
00:53:42,560 --> 00:53:46,240
it's like initially it was pretty

1248
00:53:46,240 --> 00:53:47,840
disheartening

1249
00:53:47,840 --> 00:53:51,470
because from my point of view I wasn't

1250
00:53:51,470 --> 00:53:54,290
no notice just a PhD student I

1251
00:53:54,290 --> 00:53:56,630
discovered some issues and really

1252
00:53:56,630 --> 00:54:00,320
excited to report them so but from there

1253
00:54:00,320 --> 00:54:06,200
and it's it's like I wasn't that much

1254
00:54:06,200 --> 00:54:08,660
well counsel yeah initially that might

1255
00:54:08,660 --> 00:54:11,780
be discerning but he eventually will

1256
00:54:11,780 --> 00:54:15,220
learn that that's the way it was yeah

1257
00:54:15,220 --> 00:54:18,620
nobody's on on the other ones shoot I

1258
00:54:18,620 --> 00:54:21,110
had a similar experience so I found

1259
00:54:21,110 --> 00:54:23,300
regex vulnerabilities and the core

1260
00:54:23,300 --> 00:54:25,670
libraries of Python and Noah and I you

1261
00:54:25,670 --> 00:54:28,130
know I got out my computer that day with

1262
00:54:28,130 --> 00:54:30,110
great trepidation and typing on security

1263
00:54:30,110 --> 00:54:32,690
at python.org yeah hello

1264
00:54:32,690 --> 00:54:34,250
I think I found a security you're like I

1265
00:54:34,250 --> 00:54:35,510
can't believe there's a security

1266
00:54:35,510 --> 00:54:38,360
vulnerability you know you check the

1267
00:54:38,360 --> 00:54:40,760
email ten times and someone else a door

1268
00:54:40,760 --> 00:54:42,410
look stupid does this make sense

1269
00:54:42,410 --> 00:54:44,630
you finally send it and I was actually I

1270
00:54:44,630 --> 00:54:46,790
mean maybe the Apache gets pushed back

1271
00:54:46,790 --> 00:54:49,010
on you a little bit but the Python and

1272
00:54:49,010 --> 00:54:50,540
known core maintainers were really

1273
00:54:50,540 --> 00:54:52,880
generous and they said no either most of

1274
00:54:52,880 --> 00:54:56,000
the Apache project was really easy and I

1275
00:54:56,000 --> 00:54:57,620
really learned quite a lot by

1276
00:54:57,620 --> 00:55:00,110
interacting with them it's really it

1277
00:55:00,110 --> 00:55:03,170
wasn't on I think it's great to see

1278
00:55:03,170 --> 00:55:05,800
researchers

1279
00:55:06,720 --> 00:55:09,160
invest enough in the community that

1280
00:55:09,160 --> 00:55:10,930
they're trying to solve problems for

1281
00:55:10,930 --> 00:55:12,579
yeah that they can really sort of

1282
00:55:12,579 --> 00:55:14,319
understand all the pros and cons of the

1283
00:55:14,319 --> 00:55:16,539
approaches that they're taking you can

1284
00:55:16,539 --> 00:55:18,940
naively say oh well all your replicas

1285
00:55:18,940 --> 00:55:20,049
are problematic and you should throw

1286
00:55:20,049 --> 00:55:21,339
them away but they're you know from a

1287
00:55:21,339 --> 00:55:22,630
software engineering perspective we're

1288
00:55:22,630 --> 00:55:25,480
not going to do that but it takes a good

1289
00:55:25,480 --> 00:55:27,519
investment from researchers to really

1290
00:55:27,519 --> 00:55:29,650
understand the context that the problems

1291
00:55:29,650 --> 00:55:32,289
that they're tackling live in so that

1292
00:55:32,289 --> 00:55:34,359
they can really give appropriate advice

1293
00:55:34,359 --> 00:55:36,519
and kind of see the whole picture yeah

1294
00:55:36,519 --> 00:55:39,339
and it's also important from the

1295
00:55:39,339 --> 00:55:41,950
researcher perspective to make the

1296
00:55:41,950 --> 00:55:44,529
committee understand the problem if they

1297
00:55:44,529 --> 00:55:47,079
don't know then yeah if they don't know

1298
00:55:47,079 --> 00:55:50,440
they don't really care yeah so so my

1299
00:55:50,440 --> 00:55:53,890
motto is to whatever I do I tend to

1300
00:55:53,890 --> 00:55:56,380
democratize the research to market yeah

1301
00:55:56,380 --> 00:55:58,749
so that researcher other researchers can

1302
00:55:58,749 --> 00:56:03,640
work on it and I also travel most of the

1303
00:56:03,640 --> 00:56:07,150
solutions more practical so that

1304
00:56:07,150 --> 00:56:09,700
developers can also directly use my

1305
00:56:09,700 --> 00:56:12,480
source outcome

1306
00:56:13,670 --> 00:56:17,520
so I have a question for you

1307
00:56:17,520 --> 00:56:19,830
where developer focus community so

1308
00:56:19,830 --> 00:56:21,240
hopefully we have quite a few developers

1309
00:56:21,240 --> 00:56:23,010
that will be watching this over the time

1310
00:56:23,010 --> 00:56:25,320
is if they would like one little thing

1311
00:56:25,320 --> 00:56:28,350
they could do to that you think would

1312
00:56:28,350 --> 00:56:29,970
help sort of bridge this gap between the

1313
00:56:29,970 --> 00:56:31,380
researcher and the developer and and

1314
00:56:31,380 --> 00:56:33,540
make it a nice more sort of inclusive

1315
00:56:33,540 --> 00:56:34,830
space where you can reach out and ask

1316
00:56:34,830 --> 00:56:36,210
those questions I understand you know

1317
00:56:36,210 --> 00:56:37,350
the environment they're working on is

1318
00:56:37,350 --> 00:56:38,970
that one little thing that you'd be like

1319
00:56:38,970 --> 00:56:42,930
please can we do this or not this if you

1320
00:56:42,930 --> 00:56:44,340
could speak just here to benefits right

1321
00:56:44,340 --> 00:56:48,990
now and I think one if you ask for one

1322
00:56:48,990 --> 00:56:52,250
advise outset just keep your eyes open

1323
00:56:52,250 --> 00:56:56,280
whenever you are you think you are doing

1324
00:56:56,280 --> 00:57:00,740
something that might impact the security

1325
00:57:00,740 --> 00:57:03,650
keep your eyes open

1326
00:57:03,650 --> 00:57:06,360
whenever you are doing that constant

1327
00:57:06,360 --> 00:57:09,990
vigilance yeah that's the only way to go

1328
00:57:09,990 --> 00:57:13,830
keep your eye on the prize yeah actually

1329
00:57:13,830 --> 00:57:16,230
I think that oh we actually have a

1330
00:57:16,230 --> 00:57:17,970
question perfect time because there's

1331
00:57:17,970 --> 00:57:20,790
not to wrap up but Rick would like would

1332
00:57:20,790 --> 00:57:23,040
you recommend any Ajax checkers on the

1333
00:57:23,040 --> 00:57:24,690
wave for those not using a rigid

1334
00:57:24,690 --> 00:57:28,890
detector model modern so I am actually

1335
00:57:28,890 --> 00:57:31,710
the maintainer of the safe regex module

1336
00:57:31,710 --> 00:57:36,540
on NPM which is not perfect but I'm

1337
00:57:36,540 --> 00:57:41,030
improving it that's the link to that and

1338
00:57:41,030 --> 00:57:45,540
I've put a more sophisticated set of

1339
00:57:45,540 --> 00:57:47,610
tools into this other project called vom

1340
00:57:47,610 --> 00:57:50,340
regex detector and essentially what that

1341
00:57:50,340 --> 00:57:52,350
is is sort of a nice one-stop shop to

1342
00:57:52,350 --> 00:57:54,600
wrap around a bunch of different

1343
00:57:54,600 --> 00:57:56,940
academic tools right there are these

1344
00:57:56,940 --> 00:57:58,830
mathematicians who have made fancy tools

1345
00:57:58,830 --> 00:58:00,360
to analyze heretics mathematics

1346
00:58:00,360 --> 00:58:03,210
mathematically yeah and I've taken their

1347
00:58:03,210 --> 00:58:04,890
software and put a nice user interface

1348
00:58:04,890 --> 00:58:07,710
on top of it and the tools all have

1349
00:58:07,710 --> 00:58:09,270
different pros and cons so I kind of

1350
00:58:09,270 --> 00:58:10,770
worried all of them and then say alright

1351
00:58:10,770 --> 00:58:13,850
this is what the group has decided about

1352
00:58:13,850 --> 00:58:16,890
there's also a dynamic aspect to that so

1353
00:58:16,890 --> 00:58:18,780
once they reach an opinion you can then

1354
00:58:18,780 --> 00:58:20,370
validate that it's correct in your

1355
00:58:20,370 --> 00:58:22,230
programming language that that

1356
00:58:22,230 --> 00:58:24,150
vulnerable sector suite will support a

1357
00:58:24,150 --> 00:58:25,920
programming language checks

1358
00:58:25,920 --> 00:58:29,940
I would welcome or if anyone wants more

1359
00:58:29,940 --> 00:58:34,170
programming but those both work say

1360
00:58:34,170 --> 00:58:35,880
Frederick's is okay it'll get better in

1361
00:58:35,880 --> 00:58:36,989
a couple months

1362
00:58:36,989 --> 00:58:39,029
politics detector is the state of the

1363
00:58:39,029 --> 00:58:40,829
art pretty much in terms of checking reg

1364
00:58:40,829 --> 00:58:43,950
exits thank you so much well

1365
00:58:43,950 --> 00:58:45,119
unfortunately that's all we have time

1366
00:58:45,119 --> 00:58:47,729
for today but I'm sure everyone

1367
00:58:47,729 --> 00:58:49,920
listening enjoyed it as much as I did so

1368
00:58:49,920 --> 00:58:52,170
a huge thank you again hopefully it's

1369
00:58:52,170 --> 00:58:53,249
the first time we're having you on the

1370
00:58:53,249 --> 00:58:54,839
show but hopefully not the last time I

1371
00:58:54,839 --> 00:58:56,729
think there's definitely a lot we can we

1372
00:58:56,729 --> 00:58:58,380
can do together so again thank you so

1373
00:58:58,380 --> 00:59:02,489
much and for anyone listening a next

1374
00:59:02,489 --> 00:59:04,920
session will be in two weeks time and

1375
00:59:04,920 --> 00:59:06,719
we're going to be talking about building

1376
00:59:06,719 --> 00:59:09,989
secure react applications with Ron and

1377
00:59:09,989 --> 00:59:12,749
Jim from many code and so please join us

1378
00:59:12,749 --> 00:59:16,680
for that and yep we have time for again

1379
00:59:16,680 --> 00:59:18,420
if you enjoy the plea share everything

1380
00:59:18,420 --> 00:59:20,489
will be on the website in a few minutes

1381
00:59:20,489 --> 00:59:23,069
I just have to get it there and and

1382
00:59:23,069 --> 00:59:24,719
thank you again and have a lovely

1383
00:59:24,719 --> 00:59:26,940
morning evening lunch time wherever you

1384
00:59:26,940 --> 00:59:28,549
are in the world

1385
00:59:28,549 --> 00:59:35,449
good bye to you

1386
00:59:36,150 --> 00:59:38,210
you

