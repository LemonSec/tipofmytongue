1
00:00:04,370 --> 00:00:07,470
hello hi everyone and welcome to another

2
00:00:07,470 --> 00:00:09,570
episode of the secure developer if it's

3
00:00:09,570 --> 00:00:10,950
your first time with us we are an

4
00:00:10,950 --> 00:00:12,719
inclusive community that Able's to

5
00:00:12,719 --> 00:00:14,700
educate and enable developers and

6
00:00:14,700 --> 00:00:16,740
application security I'm joined today by

7
00:00:16,740 --> 00:00:18,779
Jimmy Messer and he's going to be

8
00:00:18,779 --> 00:00:20,970
talking about the state of Cuban netti

9
00:00:20,970 --> 00:00:22,590
security but before we get started

10
00:00:22,590 --> 00:00:25,560
quickly once you choose myself I am Sam

11
00:00:25,560 --> 00:00:27,269
HIPPA and I'm the community manager that

12
00:00:27,269 --> 00:00:28,920
we can have the seeds to make this all

13
00:00:28,920 --> 00:00:29,369
happen

14
00:00:29,369 --> 00:00:32,369
so any questions feedback session ideas

15
00:00:32,369 --> 00:00:36,030
topics please let me know tweet jump up

16
00:00:36,030 --> 00:00:38,250
to the slack and ping us on the website

17
00:00:38,250 --> 00:00:39,480
which is the secure definitive it'll

18
00:00:39,480 --> 00:00:42,629
come and the Twitter is an optimist and

19
00:00:42,629 --> 00:00:44,280
the slack is actually the best way and

20
00:00:44,280 --> 00:00:46,200
to engage with Jimmy today so if you're

21
00:00:46,200 --> 00:00:47,730
not part of the slacker but if you jump

22
00:00:47,730 --> 00:00:50,219
on to be secure develop at home and go

23
00:00:50,219 --> 00:00:52,350
to join slack and you'll be able to

24
00:00:52,350 --> 00:00:54,600
check with you on live sessions channel

25
00:00:54,600 --> 00:00:56,879
and get your questions across to him and

26
00:00:56,879 --> 00:00:59,670
one other bit of housekeeping is in the

27
00:00:59,670 --> 00:01:00,870
bottom right hand corner you'll see a

28
00:01:00,870 --> 00:01:02,579
little cog if you can up your resolution

29
00:01:02,579 --> 00:01:03,870
that's this way of watching the live

30
00:01:03,870 --> 00:01:06,840
stream today and a huge thank you to you

31
00:01:06,840 --> 00:01:10,439
and the team of sneek for powering those

32
00:01:10,439 --> 00:01:12,270
communities who are able to have a

33
00:01:12,270 --> 00:01:13,530
bigger digital community with your

34
00:01:13,530 --> 00:01:16,110
backing so huge thanks for them and but

35
00:01:16,110 --> 00:01:17,970
other than that that's enough for me I'm

36
00:01:17,970 --> 00:01:19,950
actually gonna hand over to me so Jimmy

37
00:01:19,950 --> 00:01:24,150
welcome to you awesome thank you Sam

38
00:01:24,150 --> 00:01:27,000
hello everyone I I'm in I'm in the slack

39
00:01:27,000 --> 00:01:30,210
I'm here we're ready to roll again my

40
00:01:30,210 --> 00:01:31,979
name is Jimmy and I'll get to that in a

41
00:01:31,979 --> 00:01:33,750
second and we are going to talk about

42
00:01:33,750 --> 00:01:37,229
the state of kubernetes security here's

43
00:01:37,229 --> 00:01:39,750
a lovely picture of our of our State of

44
00:01:39,750 --> 00:01:41,579
the Union address here in the United

45
00:01:41,579 --> 00:01:44,280
States not a current one I have some new

46
00:01:44,280 --> 00:01:47,060
stuff to go over today if anybody's ever

47
00:01:47,060 --> 00:01:49,470
attended a webinar of mine or a training

48
00:01:49,470 --> 00:01:51,060
or anything like that this will be a

49
00:01:51,060 --> 00:01:53,490
little bit of a new format just for the

50
00:01:53,490 --> 00:01:55,530
secure developer so I'm really excited

51
00:01:55,530 --> 00:01:58,170
to be here I've been ready for this for

52
00:01:58,170 --> 00:02:01,380
like two months so let's do this so

53
00:02:01,380 --> 00:02:04,140
again I'm Jimmy hi I'm in the chat we're

54
00:02:04,140 --> 00:02:08,310
live let's do this I work at a few

55
00:02:08,310 --> 00:02:10,020
companies I'm an independent consultant

56
00:02:10,020 --> 00:02:12,930
mainly working on some kubernetes

57
00:02:12,930 --> 00:02:13,750
security

58
00:02:13,750 --> 00:02:16,450
products as well as training so if

59
00:02:16,450 --> 00:02:18,580
here's my one marketing thing if you

60
00:02:18,580 --> 00:02:20,710
want me to come on-site

61
00:02:20,710 --> 00:02:24,220
and teach at your organization for one

62
00:02:24,220 --> 00:02:27,040
to three days specifically on kubernetes

63
00:02:27,040 --> 00:02:29,470
security I do that and I do a lot of

64
00:02:29,470 --> 00:02:32,830
other kubernetes stuff I'm not sure how

65
00:02:32,830 --> 00:02:35,140
I totally fell into this kubernetes

66
00:02:35,140 --> 00:02:38,080
space but I've been doing security for

67
00:02:38,080 --> 00:02:40,870
about 11 years and kubernetes security

68
00:02:40,870 --> 00:02:43,080
specifically for like three which is

69
00:02:43,080 --> 00:02:45,160
basically like dog years

70
00:02:45,160 --> 00:02:47,320
it's just 21 years of kubernetes

71
00:02:47,320 --> 00:02:50,590
security no I'm just kidding so today we

72
00:02:50,590 --> 00:02:53,830
are going to spend the next hour talking

73
00:02:53,830 --> 00:02:56,830
about all sorts of things right

74
00:02:56,830 --> 00:02:59,860
pertaining to kubernetes number one

75
00:02:59,860 --> 00:03:01,450
we're gonna start with what our

76
00:03:01,450 --> 00:03:04,150
containers right how do they fit into

77
00:03:04,150 --> 00:03:07,030
this ecosystem it's often overlooked

78
00:03:07,030 --> 00:03:10,989
that container security needs to be kind

79
00:03:10,989 --> 00:03:14,280
of at Ground Zero of what's going on in

80
00:03:14,280 --> 00:03:16,720
inside your kubernetes cluster because

81
00:03:16,720 --> 00:03:18,790
as we all know or maybe we all don't

82
00:03:18,790 --> 00:03:19,030
know

83
00:03:19,030 --> 00:03:21,459
we'll find out that kubernetes relies on

84
00:03:21,459 --> 00:03:25,630
containers to operate in to provision

85
00:03:25,630 --> 00:03:27,340
workloads so we're gonna spend some time

86
00:03:27,340 --> 00:03:30,070
on containers and what that means and

87
00:03:30,070 --> 00:03:31,570
how they fit into kubernetes as a

88
00:03:31,570 --> 00:03:33,970
greater or Orchestrator then we're gonna

89
00:03:33,970 --> 00:03:36,400
talk about kubernetes itself right this

90
00:03:36,400 --> 00:03:39,220
is the hottest buzzword of 2018 and 2019

91
00:03:39,220 --> 00:03:42,220
and probably even more so next year

92
00:03:42,220 --> 00:03:45,010
right so kubernetes is on top of mind

93
00:03:45,010 --> 00:03:47,709
everywhere so what is it why do I care

94
00:03:47,709 --> 00:03:50,680
as a security professional this is the

95
00:03:50,680 --> 00:03:53,620
secure developer podcast and screen

96
00:03:53,620 --> 00:03:56,470
share so as a developer like what does

97
00:03:56,470 --> 00:03:58,540
kubernetes mean to you right we're not

98
00:03:58,540 --> 00:04:00,910
gonna spend too much time on a deep dive

99
00:04:00,910 --> 00:04:02,380
we don't have all the time in the world

100
00:04:02,380 --> 00:04:04,239
but we're at least gonna scratch the

101
00:04:04,239 --> 00:04:07,150
surface of why we use this thing and

102
00:04:07,150 --> 00:04:09,670
what it was built for and then how do we

103
00:04:09,670 --> 00:04:12,280
start considering security around it

104
00:04:12,280 --> 00:04:14,489
right because as we'll discover

105
00:04:14,489 --> 00:04:17,680
kubernetes is not actually secure by

106
00:04:17,680 --> 00:04:20,160
default contrary to popular belief

107
00:04:20,160 --> 00:04:23,080
unfortunately that is not the case and

108
00:04:23,080 --> 00:04:27,000
then a little brief kubernetes

109
00:04:27,000 --> 00:04:29,310
self-assessment I'm calling it this is

110
00:04:29,310 --> 00:04:31,890
kind of a new hodgepodge of things that

111
00:04:31,890 --> 00:04:34,740
if you take this slide that probably has

112
00:04:34,740 --> 00:04:36,870
way too many way too many words and

113
00:04:36,870 --> 00:04:39,270
lines on it and you sit for a day or

114
00:04:39,270 --> 00:04:41,550
over lunch or something and kind of

115
00:04:41,550 --> 00:04:43,680
assess your own kubernetes environment

116
00:04:43,680 --> 00:04:46,080
and make sure you know how to answer the

117
00:04:46,080 --> 00:04:48,990
questions that are being presented as

118
00:04:48,990 --> 00:04:50,850
part of this little mini self-assessment

119
00:04:50,850 --> 00:04:52,890
and then we're gonna discuss the future

120
00:04:52,890 --> 00:04:56,160
of kubernetes security somewhat briefly

121
00:04:56,160 --> 00:04:58,590
just kind of my thoughts on where things

122
00:04:58,590 --> 00:05:01,080
are going as we roll out into a mature

123
00:05:01,080 --> 00:05:04,770
stable open-source project what's

124
00:05:04,770 --> 00:05:07,470
happening right who's working on what

125
00:05:07,470 --> 00:05:10,130
and what are we actually doing to make

126
00:05:10,130 --> 00:05:13,250
systems more resilient and I do have my

127
00:05:13,250 --> 00:05:16,350
kubernetes shirt on today because this

128
00:05:16,350 --> 00:05:18,300
is basically represents a kubernetes

129
00:05:18,300 --> 00:05:22,140
cluster a magical unicorn and lots of

130
00:05:22,140 --> 00:05:24,870
rainbows and a castle so that's what

131
00:05:24,870 --> 00:05:26,460
we're gonna talk about for the remainder

132
00:05:26,460 --> 00:05:28,770
of the day right so let's start with

133
00:05:28,770 --> 00:05:30,990
containers as I mentioned this is the

134
00:05:30,990 --> 00:05:34,169
fundamental building block of kubernetes

135
00:05:34,169 --> 00:05:36,300
right we don't really run kubernetes or

136
00:05:36,300 --> 00:05:38,669
deploy workloads or applications or

137
00:05:38,669 --> 00:05:40,950
micro services inside of kubernetes

138
00:05:40,950 --> 00:05:43,770
without using containers this isn't

139
00:05:43,770 --> 00:05:46,560
docker specific by any means but if I do

140
00:05:46,560 --> 00:05:49,530
use docker in my demo or say the word

141
00:05:49,530 --> 00:05:52,080
docker that's interchangeable with with

142
00:05:52,080 --> 00:05:53,700
other container build systems and

143
00:05:53,700 --> 00:05:55,770
container runtimes it's just the most

144
00:05:55,770 --> 00:05:59,700
popular so at its core there's another

145
00:05:59,700 --> 00:06:01,500
castle right containers are an

146
00:06:01,500 --> 00:06:04,260
application layer construct and this

147
00:06:04,260 --> 00:06:06,120
application layer construct relies on a

148
00:06:06,120 --> 00:06:08,550
shared kernel this is a really important

149
00:06:08,550 --> 00:06:11,190
notion before we dive into the nitty

150
00:06:11,190 --> 00:06:13,770
gritty security defense mechanisms and

151
00:06:13,770 --> 00:06:16,320
and kind of the attack scenarios inside

152
00:06:16,320 --> 00:06:18,180
of kubernetes we have to understand that

153
00:06:18,180 --> 00:06:20,640
we're operating in a shared environment

154
00:06:20,640 --> 00:06:23,130
right those of us who are familiar with

155
00:06:23,130 --> 00:06:26,160
virtual machines this isn't really a

156
00:06:26,160 --> 00:06:28,650
virtual machine right we're not talking

157
00:06:28,650 --> 00:06:30,270
about a lightweight virtual machine

158
00:06:30,270 --> 00:06:32,690
again this is kind of a hot take

159
00:06:32,690 --> 00:06:35,640
compared to what some folks will call

160
00:06:35,640 --> 00:06:37,320
containers but I don't like that

161
00:06:37,320 --> 00:06:39,599
terminology because it doesn't really

162
00:06:39,599 --> 00:06:40,569
get to the core

163
00:06:40,569 --> 00:06:42,729
of what we're trying to secure right if

164
00:06:42,729 --> 00:06:45,939
we're familiar with a virtual machine on

165
00:06:45,939 --> 00:06:49,059
the left here we see a host operating

166
00:06:49,059 --> 00:06:50,860
system running on bare metal

167
00:06:50,860 --> 00:06:53,919
infrastructure with its own hypervisor

168
00:06:53,919 --> 00:06:56,879
layer right and that hypervisor layer is

169
00:06:56,879 --> 00:06:59,259
software but it provides a very strong

170
00:06:59,259 --> 00:07:03,309
isolation and and lets you isolate and

171
00:07:03,309 --> 00:07:05,319
and separate different guest operating

172
00:07:05,319 --> 00:07:07,569
systems on that same piece of

173
00:07:07,569 --> 00:07:10,539
infrastructure so this model here gives

174
00:07:10,539 --> 00:07:12,639
you three separate kernels right three

175
00:07:12,639 --> 00:07:15,939
full-blown guest operating systems and

176
00:07:15,939 --> 00:07:18,729
that's vastly different than our

177
00:07:18,729 --> 00:07:21,610
container infrastructure right well here

178
00:07:21,610 --> 00:07:24,249
instead of having three separate kernels

179
00:07:24,249 --> 00:07:26,740
for example on this one piece of

180
00:07:26,740 --> 00:07:28,389
infrastructure call it a server or

181
00:07:28,389 --> 00:07:31,779
laptop we're going to share that host

182
00:07:31,779 --> 00:07:33,580
operating system and we're gonna apply

183
00:07:33,580 --> 00:07:35,589
this layer called a container runtime

184
00:07:35,589 --> 00:07:37,899
right that is what we know of as docker

185
00:07:37,899 --> 00:07:40,809
that is what we know of as cryo or pod

186
00:07:40,809 --> 00:07:43,240
man or anything that's going to act as

187
00:07:43,240 --> 00:07:45,519
our container runtime and that container

188
00:07:45,519 --> 00:07:47,860
runtime is responsible for communicating

189
00:07:47,860 --> 00:07:50,169
to the host operating systems kernel

190
00:07:50,169 --> 00:07:52,089
kind of the brains and meat of the

191
00:07:52,089 --> 00:07:56,680
operation as far as any sort of system

192
00:07:56,680 --> 00:08:00,430
level calls go so instead of packaging

193
00:08:00,430 --> 00:08:02,439
up our application in a guest operating

194
00:08:02,439 --> 00:08:04,599
system with its own kernel which could

195
00:08:04,599 --> 00:08:08,259
be a very large sort of of endeavor and

196
00:08:08,259 --> 00:08:11,019
and slow and and and it doesn't spin up

197
00:08:11,019 --> 00:08:14,110
very quickly this is our ec2 model we

198
00:08:14,110 --> 00:08:16,180
just have our application binaries and

199
00:08:16,180 --> 00:08:17,740
libraries and all the things that our

200
00:08:17,740 --> 00:08:20,409
application needs to run right so if

201
00:08:20,409 --> 00:08:22,689
you've ever used docker some of the

202
00:08:22,689 --> 00:08:25,809
commands docker run docker pool docker

203
00:08:25,809 --> 00:08:28,869
PS you're communicating not with your

204
00:08:28,869 --> 00:08:30,459
own operating system which is why I

205
00:08:30,459 --> 00:08:33,250
don't like the term lightweight virtual

206
00:08:33,250 --> 00:08:35,559
machine they may look and feel like a

207
00:08:35,559 --> 00:08:38,529
virtual machine when you exec into a

208
00:08:38,529 --> 00:08:40,419
running container but it is not a

209
00:08:40,419 --> 00:08:42,339
virtual machine right you there's a lot

210
00:08:42,339 --> 00:08:44,339
of things going on under the hood

211
00:08:44,339 --> 00:08:47,199
including namespaces and C groups and

212
00:08:47,199 --> 00:08:50,589
this is a kernel level isolation for a

213
00:08:50,589 --> 00:08:52,660
given process so we're really trying to

214
00:08:52,660 --> 00:08:53,690
prevent

215
00:08:53,690 --> 00:08:57,230
process a from talking to or seeing that

216
00:08:57,230 --> 00:09:00,200
process be even exists right but we have

217
00:09:00,200 --> 00:09:02,660
the same host operating system the same

218
00:09:02,660 --> 00:09:05,990
kernel so containers really rely on a

219
00:09:05,990 --> 00:09:08,570
number of different technologies even

220
00:09:08,570 --> 00:09:11,630
beyond namespaces and cgroups but we're

221
00:09:11,630 --> 00:09:14,390
looking at a complex web of isolation

222
00:09:14,390 --> 00:09:16,670
that gives us this this kind of

223
00:09:16,670 --> 00:09:18,710
environment that we call home right this

224
00:09:18,710 --> 00:09:20,510
is our application runs this is where

225
00:09:20,510 --> 00:09:23,180
our go binary or our Ruby on Rails

226
00:09:23,180 --> 00:09:25,520
application is deployed to and it's the

227
00:09:25,520 --> 00:09:28,250
unit of operation in kubernetes right

228
00:09:28,250 --> 00:09:30,140
it's how we deploy applications into

229
00:09:30,140 --> 00:09:31,370
what's called a pod which I'll talk

230
00:09:31,370 --> 00:09:33,710
about here soon

231
00:09:33,710 --> 00:09:37,040
so I've heard the analogy kind of

232
00:09:37,040 --> 00:09:40,850
containers are akin to a apartment

233
00:09:40,850 --> 00:09:43,580
complex right and virtual machines are

234
00:09:43,580 --> 00:09:45,410
are similar to having your own

235
00:09:45,410 --> 00:09:47,450
standalone house right if you have your

236
00:09:47,450 --> 00:09:49,430
own house you can build a fence you can

237
00:09:49,430 --> 00:09:51,560
change your walks you can put gates over

238
00:09:51,560 --> 00:09:55,100
your windows you can get a Doberman and

239
00:09:55,100 --> 00:09:57,020
have it guarding your house and you're

240
00:09:57,020 --> 00:09:59,420
in control of the security to some

241
00:09:59,420 --> 00:10:02,570
degree of that physical structure but an

242
00:10:02,570 --> 00:10:04,310
apartment complex is a little different

243
00:10:04,310 --> 00:10:05,510
right and this is kind of what a

244
00:10:05,510 --> 00:10:07,400
kubernetes cluster looks like and it has

245
00:10:07,400 --> 00:10:10,940
a doorman it has an HVAC system that's

246
00:10:10,940 --> 00:10:13,400
shared it has fire escapes it has all

247
00:10:13,400 --> 00:10:15,620
sorts of things that are pretty much out

248
00:10:15,620 --> 00:10:17,540
of your control that are Security

249
00:10:17,540 --> 00:10:20,810
boundaries and you can live in an

250
00:10:20,810 --> 00:10:23,300
apartment complex that has very hardened

251
00:10:23,300 --> 00:10:24,980
security or you can live in one that has

252
00:10:24,980 --> 00:10:28,850
none and hopefully after today we're

253
00:10:28,850 --> 00:10:30,320
going to look at our kubernetes clusters

254
00:10:30,320 --> 00:10:33,140
as being an apartment complex that we'd

255
00:10:33,140 --> 00:10:35,270
like to live in right a secure apartment

256
00:10:35,270 --> 00:10:39,910
complex so one of the hot topics today

257
00:10:39,910 --> 00:10:42,980
is container breakout right this is a

258
00:10:42,980 --> 00:10:46,670
very kind of fancy term but and we hear

259
00:10:46,670 --> 00:10:48,500
about it here and there on hacker one

260
00:10:48,500 --> 00:10:50,540
reports and on Twitter and things like

261
00:10:50,540 --> 00:10:52,850
that but it's it's the problem that's

262
00:10:52,850 --> 00:10:55,130
plaguing container management systems

263
00:10:55,130 --> 00:10:57,589
and container orchestration systems such

264
00:10:57,589 --> 00:10:59,630
as kubernetes or a container breakout is

265
00:10:59,630 --> 00:11:01,820
when we have defeated some of those

266
00:11:01,820 --> 00:11:05,110
isolation mechanisms it's when the

267
00:11:05,110 --> 00:11:06,630
configurations or Mis

268
00:11:06,630 --> 00:11:09,090
configurations of that running container

269
00:11:09,090 --> 00:11:12,030
allow for an attacker via a web

270
00:11:12,030 --> 00:11:14,580
application vulnerability or some sort

271
00:11:14,580 --> 00:11:17,040
of other Mis configuration in the

272
00:11:17,040 --> 00:11:18,330
kubernetes control plane

273
00:11:18,330 --> 00:11:20,630
it gives that particular attacker

274
00:11:20,630 --> 00:11:23,100
additional privileges right and you've

275
00:11:23,100 --> 00:11:26,310
bypassed what is built in to the running

276
00:11:26,310 --> 00:11:28,560
container and now you can do some stuff

277
00:11:28,560 --> 00:11:30,930
on the host right that's the big concern

278
00:11:30,930 --> 00:11:32,850
is when we take a running container

279
00:11:32,850 --> 00:11:35,250
which we have this perceived boundary

280
00:11:35,250 --> 00:11:37,350
right it has the word contained in it so

281
00:11:37,350 --> 00:11:40,170
we want to believe and think and hope

282
00:11:40,170 --> 00:11:42,750
that it's actually secure but it might

283
00:11:42,750 --> 00:11:44,730
not be right there are ways to set up

284
00:11:44,730 --> 00:11:46,650
kubernetes and other container

285
00:11:46,650 --> 00:11:48,800
orchestration systems that could lead to

286
00:11:48,800 --> 00:11:51,870
container breakout like ending up on the

287
00:11:51,870 --> 00:11:54,690
host as root that's a big deal that's

288
00:11:54,690 --> 00:11:57,540
exactly what we want to avoid and that's

289
00:11:57,540 --> 00:11:59,250
what we're gonna cover for the most part

290
00:11:59,250 --> 00:12:01,440
today right how to not set up your

291
00:12:01,440 --> 00:12:03,750
kubernetes cluster to allow those sorts

292
00:12:03,750 --> 00:12:06,900
of things and containers by default

293
00:12:06,900 --> 00:12:10,080
don't always contain right we have a lot

294
00:12:10,080 --> 00:12:12,360
of flexibility in how we deploy these

295
00:12:12,360 --> 00:12:14,910
things and run our applications inside

296
00:12:14,910 --> 00:12:16,680
of kubernetes but just containers

297
00:12:16,680 --> 00:12:19,410
specifically so in these all translate

298
00:12:19,410 --> 00:12:21,570
one to one for the most part to

299
00:12:21,570 --> 00:12:23,460
kubernetes configurations right so I

300
00:12:23,460 --> 00:12:25,950
don't let out diving into kubernetes

301
00:12:25,950 --> 00:12:28,260
first and without understanding these

302
00:12:28,260 --> 00:12:32,130
container kind of MIS configurations and

303
00:12:32,130 --> 00:12:34,650
different ways to get containers up and

304
00:12:34,650 --> 00:12:36,720
running we're not going to understand

305
00:12:36,720 --> 00:12:38,430
what's going on in kubernetes so we can

306
00:12:38,430 --> 00:12:40,170
do things like mounting volumes and

307
00:12:40,170 --> 00:12:42,320
directories right this is really common

308
00:12:42,320 --> 00:12:45,090
oftentimes your service needs some data

309
00:12:45,090 --> 00:12:48,150
or shares data with you know a volume

310
00:12:48,150 --> 00:12:50,550
that other micro services can actually

311
00:12:50,550 --> 00:12:52,830
write to that data as well and

312
00:12:52,830 --> 00:12:55,100
oftentimes containers can mount

313
00:12:55,100 --> 00:12:57,240
directories from the host operating

314
00:12:57,240 --> 00:12:59,730
system itself those can be read or they

315
00:12:59,730 --> 00:13:01,560
can be read write and it depends and

316
00:13:01,560 --> 00:13:03,180
those have vastly different security

317
00:13:03,180 --> 00:13:06,720
ramifications we can disable security

318
00:13:06,720 --> 00:13:10,050
features right so this is often referred

319
00:13:10,050 --> 00:13:12,480
to as the privileged mode so when we

320
00:13:12,480 --> 00:13:14,670
talk about privileged containers we're

321
00:13:14,670 --> 00:13:16,410
talking about containers that are not

322
00:13:16,410 --> 00:13:18,360
containers at all right there they

323
00:13:18,360 --> 00:13:20,140
basically just tore down the

324
00:13:20,140 --> 00:13:22,360
injuries through a single flag than all

325
00:13:22,360 --> 00:13:24,670
the all the containers including docker

326
00:13:24,670 --> 00:13:27,820
the container runtimes offered to us and

327
00:13:27,820 --> 00:13:29,620
we have bypassed those things so we

328
00:13:29,620 --> 00:13:31,090
really want to avoid that and we're

329
00:13:31,090 --> 00:13:32,470
gonna see how that manifests in

330
00:13:32,470 --> 00:13:35,980
kubernetes as well containers can run as

331
00:13:35,980 --> 00:13:37,870
root or they can run as other users and

332
00:13:37,870 --> 00:13:40,060
typically root is bad right we don't

333
00:13:40,060 --> 00:13:41,860
always need to run our applications as

334
00:13:41,860 --> 00:13:44,020
root and we didn't do that in the past

335
00:13:44,020 --> 00:13:46,000
but we're now we're doing it because

336
00:13:46,000 --> 00:13:48,520
that's the easy way out and that's kind

337
00:13:48,520 --> 00:13:51,400
of the default for a lot of publicly

338
00:13:51,400 --> 00:13:53,830
available container images and we can

339
00:13:53,830 --> 00:13:56,230
share the hostname space right so if if

340
00:13:56,230 --> 00:13:58,480
if we're rude on the host we're not

341
00:13:58,480 --> 00:14:00,220
really a container so that's kind of a

342
00:14:00,220 --> 00:14:02,050
really bad thing or you're not using

343
00:14:02,050 --> 00:14:03,700
containers in the right way if you're

344
00:14:03,700 --> 00:14:06,520
using the hosts namespace so we have

345
00:14:06,520 --> 00:14:10,200
exploits right exploits zero-days

346
00:14:10,200 --> 00:14:13,360
attacks against the kernel itself to

347
00:14:13,360 --> 00:14:16,210
actually to actually go look for

348
00:14:16,210 --> 00:14:18,630
vulnerability and escalate privileges

349
00:14:18,630 --> 00:14:22,300
from a running container that may run as

350
00:14:22,300 --> 00:14:24,430
rude or may have privileged mode etc and

351
00:14:24,430 --> 00:14:26,740
break out of that container so if you've

352
00:14:26,740 --> 00:14:28,360
been following the news at all in

353
00:14:28,360 --> 00:14:31,150
container security run seed right run

354
00:14:31,150 --> 00:14:34,090
see as you can see here it powers lots

355
00:14:34,090 --> 00:14:36,850
of things the underlying container run

356
00:14:36,850 --> 00:14:40,180
time at a very low level almost talking

357
00:14:40,180 --> 00:14:42,640
directly to the kernel of docker cryo

358
00:14:42,640 --> 00:14:45,940
container d kubernetes etc etc so if you

359
00:14:45,940 --> 00:14:49,090
are running containers as your container

360
00:14:49,090 --> 00:14:51,700
as root and you were had this vulnerable

361
00:14:51,700 --> 00:14:54,610
version of run C container breakout to

362
00:14:54,610 --> 00:14:58,210
the host operating system was not that

363
00:14:58,210 --> 00:15:00,760
difficult so this was kind of a hurry up

364
00:15:00,760 --> 00:15:03,700
and patch oh my god this is scary moment

365
00:15:03,700 --> 00:15:06,160
in the world of you know public cloud

366
00:15:06,160 --> 00:15:08,470
providers and manage kubernetes services

367
00:15:08,470 --> 00:15:11,050
right because this is setting you up for

368
00:15:11,050 --> 00:15:15,010
disaster dangerous mount points see if

369
00:15:15,010 --> 00:15:18,910
we have any questions not yet dangerous

370
00:15:18,910 --> 00:15:21,730
mount points so we have the ability to

371
00:15:21,730 --> 00:15:25,270
mount in directories and from the host

372
00:15:25,270 --> 00:15:28,840
and shared volumes and and EBS volumes

373
00:15:28,840 --> 00:15:30,520
and all sorts of things inside of this

374
00:15:30,520 --> 00:15:32,769
running container also as that

375
00:15:32,769 --> 00:15:36,790
translated kubernetes but a common thing

376
00:15:36,790 --> 00:15:38,679
for some reason is to mount the docker

377
00:15:38,679 --> 00:15:41,529
socket right docker suck and we're not

378
00:15:41,529 --> 00:15:43,029
going to go into this in too much detail

379
00:15:43,029 --> 00:15:46,929
I'd recommend checking out a talk from

380
00:15:46,929 --> 00:15:51,009
Ian Coldwater and Duffy Duffy Coleman at

381
00:15:51,009 --> 00:15:54,160
blackhat this past this year

382
00:15:54,160 --> 00:15:57,670
it's called I can't remember the name of

383
00:15:57,670 --> 00:16:00,699
it something host host but it they had a

384
00:16:00,699 --> 00:16:02,769
great talk on mounting docker socket the

385
00:16:02,769 --> 00:16:05,589
ramifications of that and those sorts of

386
00:16:05,589 --> 00:16:07,360
reef write mounts and what kind of

387
00:16:07,360 --> 00:16:10,089
problems can persist to help you you

388
00:16:10,089 --> 00:16:11,739
know perform this type of container

389
00:16:11,739 --> 00:16:15,699
breakout attack so containers typically

390
00:16:15,699 --> 00:16:17,049
restrict the number of Linux

391
00:16:17,049 --> 00:16:18,730
capabilities that are granted to it

392
00:16:18,730 --> 00:16:19,899
right that's the whole point of

393
00:16:19,899 --> 00:16:22,929
containers that's why we use them and

394
00:16:22,929 --> 00:16:25,059
over the years that's gotten pretty good

395
00:16:25,059 --> 00:16:27,959
right that's been a fairly

396
00:16:27,959 --> 00:16:30,639
battle-hardened and tested sort of thing

397
00:16:30,639 --> 00:16:32,199
where it's like this container can only

398
00:16:32,199 --> 00:16:34,449
do certain things to the Linux kernel

399
00:16:34,449 --> 00:16:37,059
right but privileged containers throw

400
00:16:37,059 --> 00:16:39,879
that completely out the window and allow

401
00:16:39,879 --> 00:16:42,509
you to actually have dangerous

402
00:16:42,509 --> 00:16:45,839
capabilities to the container itself so

403
00:16:45,839 --> 00:16:49,389
really quickly I just wanted to show you

404
00:16:49,389 --> 00:16:51,670
the difference between a privileged

405
00:16:51,670 --> 00:16:53,769
container and docker and a non

406
00:16:53,769 --> 00:16:55,600
privileged container and we're gonna use

407
00:16:55,600 --> 00:16:57,610
cap SH to do this this is kind of a

408
00:16:57,610 --> 00:16:59,679
classic container security demo but it

409
00:16:59,679 --> 00:17:03,999
really kind of drives home the the what

410
00:17:03,999 --> 00:17:07,929
one single flag can do to your security

411
00:17:07,929 --> 00:17:11,260
capabilities right of your container so

412
00:17:11,260 --> 00:17:14,559
here I have a docker run command and I'm

413
00:17:14,559 --> 00:17:17,260
using the image of Alpine latest it

414
00:17:17,260 --> 00:17:18,970
doesn't really matter for this demo and

415
00:17:18,970 --> 00:17:24,099
I'm going to use I'm gonna install lid

416
00:17:24,099 --> 00:17:27,039
cap and cap SH and we're gonna run this

417
00:17:27,039 --> 00:17:29,620
command and see what capabilities using

418
00:17:29,620 --> 00:17:33,210
cap SH that this particular

419
00:17:33,210 --> 00:17:34,419
non-privileged

420
00:17:34,419 --> 00:17:37,240
running container has and it's this is

421
00:17:37,240 --> 00:17:40,570
standard container privileges right and

422
00:17:40,570 --> 00:17:42,669
it's all right here right here's our

423
00:17:42,669 --> 00:17:46,570
list so if I were to let's see if I

424
00:17:46,570 --> 00:17:46,780
could

425
00:17:46,780 --> 00:17:50,140
you just actually and test this but and

426
00:17:50,140 --> 00:17:53,890
I'll make this bigger in a second and if

427
00:17:53,890 --> 00:17:55,720
I run this as privileged and we'll just

428
00:17:55,720 --> 00:17:57,430
look at these side by side let me zoom

429
00:17:57,430 --> 00:18:01,690
in a little bit you're gonna see the

430
00:18:01,690 --> 00:18:03,730
privileges just by running this

431
00:18:03,730 --> 00:18:06,940
different command that is docker run

432
00:18:06,940 --> 00:18:09,640
bash - privilege and again I know this

433
00:18:09,640 --> 00:18:11,890
is a kubernetes talk but this translates

434
00:18:11,890 --> 00:18:14,200
directly into a kubernetes configuration

435
00:18:14,200 --> 00:18:16,840
that is often overlooked and adds a lot

436
00:18:16,840 --> 00:18:20,440
of attack surface right so if we look at

437
00:18:20,440 --> 00:18:22,570
the difference in the capabilities on

438
00:18:22,570 --> 00:18:24,280
the linux kernel right and there are

439
00:18:24,280 --> 00:18:26,110
hundreds of these things right and if

440
00:18:26,110 --> 00:18:28,900
you look at what a non privilege

441
00:18:28,900 --> 00:18:31,060
container has it's fairly minimal and

442
00:18:31,060 --> 00:18:32,470
we're not gonna we're definitely not

443
00:18:32,470 --> 00:18:33,430
going to go through all these

444
00:18:33,430 --> 00:18:36,990
capabilities but there is one that I

445
00:18:36,990 --> 00:18:40,030
want to talk about and it's cap net

446
00:18:40,030 --> 00:18:43,990
admin and there's one more rule but

447
00:18:43,990 --> 00:18:45,910
we'll talk about this so this is kind of

448
00:18:45,910 --> 00:18:48,670
a catch-all privilege that this this

449
00:18:48,670 --> 00:18:50,770
running container has now that lets you

450
00:18:50,770 --> 00:18:53,080
do scary things like bind to host ports

451
00:18:53,080 --> 00:18:55,990
mount volumes do all sorts of scary

452
00:18:55,990 --> 00:18:58,450
stuff on the host itself so when you run

453
00:18:58,450 --> 00:19:01,420
this - bash privileged flag you are

454
00:19:01,420 --> 00:19:04,330
basically throwing all of the security

455
00:19:04,330 --> 00:19:06,310
controls out the window yeah it still

456
00:19:06,310 --> 00:19:07,840
looks like a container and because it's

457
00:19:07,840 --> 00:19:09,940
using docker to build the container but

458
00:19:09,940 --> 00:19:12,310
you can do all of the bad things that

459
00:19:12,310 --> 00:19:14,200
you would on a host running as root

460
00:19:14,200 --> 00:19:17,110
right so we want to avoid the privilege

461
00:19:17,110 --> 00:19:21,040
flag if at all possible let's hope this

462
00:19:21,040 --> 00:19:26,920
comes back okay it did and again we're

463
00:19:26,920 --> 00:19:28,420
talking about containers but we'll see

464
00:19:28,420 --> 00:19:30,910
what the privilege mode of a pod looks

465
00:19:30,910 --> 00:19:34,120
like as well and kubernetes so image

466
00:19:34,120 --> 00:19:36,400
integrity I don't spend that much time

467
00:19:36,400 --> 00:19:38,830
on this anymore I don't have a ton of

468
00:19:38,830 --> 00:19:41,980
sympathy for people who pull third-party

469
00:19:41,980 --> 00:19:44,200
code straight from the internet and run

470
00:19:44,200 --> 00:19:46,300
it in their production AWS or cloud

471
00:19:46,300 --> 00:19:49,410
accounts I this has been a problem for

472
00:19:49,410 --> 00:19:51,760
basically since the beginning of modern

473
00:19:51,760 --> 00:19:53,800
software development and now it's still

474
00:19:53,800 --> 00:19:55,990
a problem as we move towards

475
00:19:55,990 --> 00:19:57,820
containerized environments right we have

476
00:19:57,820 --> 00:19:58,220
these

477
00:19:58,220 --> 00:20:00,830
these public image registries or any

478
00:20:00,830 --> 00:20:02,720
image registry right and the integrity

479
00:20:02,720 --> 00:20:04,640
of that image matters a lot you're

480
00:20:04,640 --> 00:20:08,000
pulling all sorts of packages and

481
00:20:08,000 --> 00:20:10,370
binaries and libraries and configuration

482
00:20:10,370 --> 00:20:12,230
into your environment and running it and

483
00:20:12,230 --> 00:20:14,300
those could be tainted they could have

484
00:20:14,300 --> 00:20:16,460
backdoors there could be bugs there

485
00:20:16,460 --> 00:20:18,770
could be vulnerable third-party packages

486
00:20:18,770 --> 00:20:20,810
snick can help us with that right ghost

487
00:20:20,810 --> 00:20:24,080
nick and so we need to be really careful

488
00:20:24,080 --> 00:20:26,240
with this right and this is kind of the

489
00:20:26,240 --> 00:20:28,220
hilarious one that happened last year

490
00:20:28,220 --> 00:20:32,150
people were pulling a very popular and

491
00:20:32,150 --> 00:20:36,590
public docker image from the docker hub

492
00:20:36,590 --> 00:20:38,570
into their environments and it was

493
00:20:38,570 --> 00:20:40,580
mining cryptocurrency they made 90,000

494
00:20:40,580 --> 00:20:43,640
US dollars and that's ridiculous right

495
00:20:43,640 --> 00:20:45,530
we shouldn't be doing this but it's

496
00:20:45,530 --> 00:20:48,770
still a huge problem and it will persist

497
00:20:48,770 --> 00:20:50,990
forever and always because the easy way

498
00:20:50,990 --> 00:20:52,940
out is to pull images that you haven't

499
00:20:52,940 --> 00:20:55,640
actually validated enough on that let's

500
00:20:55,640 --> 00:21:00,650
dive into kubernetes right any questions

501
00:21:00,650 --> 00:21:01,250
so far

502
00:21:01,250 --> 00:21:03,470
I'm kind of flying along because I want

503
00:21:03,470 --> 00:21:05,510
to cover lots and lots of things and

504
00:21:05,510 --> 00:21:08,450
leave a little bit of time for Q&A and

505
00:21:08,450 --> 00:21:10,400
this is this is the meat of it right

506
00:21:10,400 --> 00:21:12,710
containers are what we need to run

507
00:21:12,710 --> 00:21:15,890
inside of kubernetes I thought this

508
00:21:15,890 --> 00:21:18,110
image was very telling of what

509
00:21:18,110 --> 00:21:19,970
kubernetes looks like that's

510
00:21:19,970 --> 00:21:21,950
misconfigured right it's a bunch of

511
00:21:21,950 --> 00:21:24,200
containers about to topple over into the

512
00:21:24,200 --> 00:21:28,100
ocean and we're gonna discuss briefly

513
00:21:28,100 --> 00:21:30,050
what Cooper Nettie's is what it does why

514
00:21:30,050 --> 00:21:33,050
I why you should care and then kind of

515
00:21:33,050 --> 00:21:34,940
what are the defenses like we have these

516
00:21:34,940 --> 00:21:37,990
container certain container

517
00:21:37,990 --> 00:21:40,100
configurations that we can set and

518
00:21:40,100 --> 00:21:42,410
create but how does that even like make

519
00:21:42,410 --> 00:21:44,450
its way into kubernetes or anything in

520
00:21:44,450 --> 00:21:46,310
that that path is a little murky

521
00:21:46,310 --> 00:21:50,930
sometimes so at its core kubernetes is

522
00:21:50,930 --> 00:21:53,570
an open source platform just built to

523
00:21:53,570 --> 00:21:55,250
take what you have as a running

524
00:21:55,250 --> 00:21:58,180
container or a docker image and actually

525
00:21:58,180 --> 00:22:00,470
send it out into the world right it's

526
00:22:00,470 --> 00:22:02,990
for deploying your service your

527
00:22:02,990 --> 00:22:05,060
application your back-end web hook

528
00:22:05,060 --> 00:22:06,680
whatever it is that's running in a

529
00:22:06,680 --> 00:22:08,960
container and get it actually

530
00:22:08,960 --> 00:22:11,840
provisioned on to some compute some

531
00:22:11,840 --> 00:22:13,730
commercial machines typically so it

532
00:22:13,730 --> 00:22:15,279
handles things like scaling and

533
00:22:15,279 --> 00:22:18,020
orchestration so what does that mean

534
00:22:18,020 --> 00:22:20,299
scaling means I can have one container

535
00:22:20,299 --> 00:22:23,690
inside of a pod running or I can have 50

536
00:22:23,690 --> 00:22:25,460
of those pods at any given time and it's

537
00:22:25,460 --> 00:22:28,250
very elastic so once you kind of

538
00:22:28,250 --> 00:22:30,799
provision your workload on to the

539
00:22:30,799 --> 00:22:33,200
cluster kubernetes is going to be how

540
00:22:33,200 --> 00:22:37,010
you kind of puppeteer your your fleet of

541
00:22:37,010 --> 00:22:38,929
containers your different services and

542
00:22:38,929 --> 00:22:41,510
micro services and deployments and all

543
00:22:41,510 --> 00:22:43,400
the things that make your application do

544
00:22:43,400 --> 00:22:47,870
what it does it's extremely honest I

545
00:22:47,870 --> 00:22:50,059
know it's extremely flexible right so

546
00:22:50,059 --> 00:22:52,820
the flexibility is what gives kubernetes

547
00:22:52,820 --> 00:22:57,110
this kind of lore to be number one API

548
00:22:57,110 --> 00:23:00,260
driven and number two deployed pretty

549
00:23:00,260 --> 00:23:02,270
much anywhere and using any type of

550
00:23:02,270 --> 00:23:04,309
workload so we're starting to see

551
00:23:04,309 --> 00:23:07,220
kubernetes at the edge seeing kubernetes

552
00:23:07,220 --> 00:23:10,700
and IOT devices probably it's running in

553
00:23:10,700 --> 00:23:13,700
vehicles right I would wager and Tesla

554
00:23:13,700 --> 00:23:16,309
uses kubernetes to collect a lot of its

555
00:23:16,309 --> 00:23:18,890
data and process data coming from its

556
00:23:18,890 --> 00:23:22,340
vehicles so it is very very flexible

557
00:23:22,340 --> 00:23:24,500
with the type of workloads that that can

558
00:23:24,500 --> 00:23:28,039
run on it no questions so far

559
00:23:28,039 --> 00:23:30,549
everybody's at kubernetes experts so

560
00:23:30,549 --> 00:23:34,070
we're gonna just breeze through a little

561
00:23:34,070 --> 00:23:36,590
bit of a little bit of intro still and

562
00:23:36,590 --> 00:23:39,080
then we'll dive into the state of the

563
00:23:39,080 --> 00:23:41,929
security pieces of kubernetes x at 9:30

564
00:23:41,929 --> 00:23:44,059
okay almost 9:30 so um

565
00:23:44,059 --> 00:23:46,820
so in short kubernetes is kind of a pile

566
00:23:46,820 --> 00:23:48,919
of Linux goop right it's it's a lot of

567
00:23:48,919 --> 00:23:52,010
things going on under the hood that are

568
00:23:52,010 --> 00:23:55,100
in Britain and go and and basically

569
00:23:55,100 --> 00:23:58,789
Linux kernel primitives and features of

570
00:23:58,789 --> 00:24:01,250
the Linux kernel itself such as IP

571
00:24:01,250 --> 00:24:04,700
tables etc and and that are combined

572
00:24:04,700 --> 00:24:07,010
together to become this system right

573
00:24:07,010 --> 00:24:09,830
it's it's it's a distributed system in a

574
00:24:09,830 --> 00:24:11,750
sense but it's a lot of things that are

575
00:24:11,750 --> 00:24:14,770
written by third parties code written

576
00:24:14,770 --> 00:24:17,960
many many years ago and it is come

577
00:24:17,960 --> 00:24:20,929
together to give you this very clean

578
00:24:20,929 --> 00:24:23,780
easy to use API and what's called the

579
00:24:23,780 --> 00:24:25,850
control plane to manage

580
00:24:25,850 --> 00:24:27,710
your workloads in your fleet of running

581
00:24:27,710 --> 00:24:29,540
containers essentially in the form of

582
00:24:29,540 --> 00:24:33,230
pods so I thought kubernetes is secure

583
00:24:33,230 --> 00:24:35,690
by default right Google kind of made

584
00:24:35,690 --> 00:24:37,880
this thing and open sourced it and

585
00:24:37,880 --> 00:24:41,000
everyone talks about it but it's not

586
00:24:41,000 --> 00:24:42,860
right so that's kind of the thing I want

587
00:24:42,860 --> 00:24:44,870
to drive home the defaults of kubernetes

588
00:24:44,870 --> 00:24:48,230
are not secure there is hardly even this

589
00:24:48,230 --> 00:24:52,630
notion of a default kubernetes kind of

590
00:24:52,630 --> 00:24:55,280
system anymore right that you can deploy

591
00:24:55,280 --> 00:24:57,440
kubernetes a ton of different ways

592
00:24:57,440 --> 00:24:59,770
there's there's many many bootstrappers

593
00:24:59,770 --> 00:25:04,580
cube atom cops cubic corn etc etc and

594
00:25:04,580 --> 00:25:06,470
there's also managed kubernetes and then

595
00:25:06,470 --> 00:25:08,510
you can roll your own Caretti so there's

596
00:25:08,510 --> 00:25:11,420
hardly even this like one-stop shop to

597
00:25:11,420 --> 00:25:13,280
say this is kubernetes and there's

598
00:25:13,280 --> 00:25:14,690
different versions and different

599
00:25:14,690 --> 00:25:16,790
components and now we're seeing forks of

600
00:25:16,790 --> 00:25:19,190
kubernetes as well so it is a living

601
00:25:19,190 --> 00:25:23,300
breathing organism so kubernetes as a

602
00:25:23,300 --> 00:25:25,820
project has always optimized for

603
00:25:25,820 --> 00:25:28,000
flexibility right and extend ability

604
00:25:28,000 --> 00:25:30,410
over security and that's not to say

605
00:25:30,410 --> 00:25:33,500
security was ignored it just didn't

606
00:25:33,500 --> 00:25:37,670
become part of the the ethos early on as

607
00:25:37,670 --> 00:25:40,550
kubernetes became popular as most

608
00:25:40,550 --> 00:25:42,680
open-source projects are right so it's

609
00:25:42,680 --> 00:25:44,660
just code that people are trying to get

610
00:25:44,660 --> 00:25:46,880
running and it evolved over the years

611
00:25:46,880 --> 00:25:49,190
and bolted on security with a lot of

612
00:25:49,190 --> 00:25:51,950
major releases and to me that's okay

613
00:25:51,950 --> 00:25:54,080
right we have to understand what

614
00:25:54,080 --> 00:25:56,630
kubernetes is what it isn't and that all

615
00:25:56,630 --> 00:25:59,180
the knobs and and and levers you need to

616
00:25:59,180 --> 00:26:01,400
pull as a security professional to make

617
00:26:01,400 --> 00:26:03,740
sure that this is like a secure sane

618
00:26:03,740 --> 00:26:07,060
system to be running your production

619
00:26:07,060 --> 00:26:11,510
customer workloads again security is

620
00:26:11,510 --> 00:26:14,840
never done in Coober kubernetes because

621
00:26:14,840 --> 00:26:16,520
it's a living breathing system right you

622
00:26:16,520 --> 00:26:18,590
can't just take a snapshot once once a

623
00:26:18,590 --> 00:26:21,890
quarter and and scan your cluster and be

624
00:26:21,890 --> 00:26:24,080
like well I think I'm good now I'm just

625
00:26:24,080 --> 00:26:25,850
gonna do this again next quarter because

626
00:26:25,850 --> 00:26:28,490
the auditors told me to it's never done

627
00:26:28,490 --> 00:26:31,370
it's a continuous thing because the way

628
00:26:31,370 --> 00:26:34,220
kubernetes shifted our SDLC and how we

629
00:26:34,220 --> 00:26:36,350
do continuous delivery and continuous

630
00:26:36,350 --> 00:26:39,290
deployment has vastly changed this

631
00:26:39,290 --> 00:26:41,030
Oh system right we have all these

632
00:26:41,030 --> 00:26:42,470
components that are automatically

633
00:26:42,470 --> 00:26:44,120
updating we have new workloads being

634
00:26:44,120 --> 00:26:45,950
provisioned we have nodes coming and

635
00:26:45,950 --> 00:26:48,500
going through auto-scaling beats so it's

636
00:26:48,500 --> 00:26:51,740
a very interesting topic but it's it's

637
00:26:51,740 --> 00:26:54,440
not static by any means and we'll see

638
00:26:54,440 --> 00:26:55,310
how in a minute

639
00:26:55,310 --> 00:26:58,100
so to kick things off with the kind of

640
00:26:58,100 --> 00:27:00,340
what can go wrong sort of scenarios

641
00:27:00,340 --> 00:27:02,480
inside of kubernetes we'll start with

642
00:27:02,480 --> 00:27:05,330
the easiest one that I hope nobody falls

643
00:27:05,330 --> 00:27:08,870
prey to this is a this was Tesla's

644
00:27:08,870 --> 00:27:11,060
kubernetes dashboard exposed to the

645
00:27:11,060 --> 00:27:13,580
Internet in 2017 and I know it's like

646
00:27:13,580 --> 00:27:17,000
you know basically forever ago and them

647
00:27:17,000 --> 00:27:19,550
in the land of kubernetes but still it's

648
00:27:19,550 --> 00:27:23,360
it's a thing that happens and they were

649
00:27:23,360 --> 00:27:26,750
storing AWS access keys and secret

650
00:27:26,750 --> 00:27:29,150
access keys inside of kubernetes secrets

651
00:27:29,150 --> 00:27:31,280
which are accessible by the dashboard

652
00:27:31,280 --> 00:27:33,200
depending on how you have your role

653
00:27:33,200 --> 00:27:35,660
based access control setup so this is a

654
00:27:35,660 --> 00:27:37,520
problem number one because if you

655
00:27:37,520 --> 00:27:39,530
stumble across this on the internet and

656
00:27:39,530 --> 00:27:42,290
discover these keys load them up in your

657
00:27:42,290 --> 00:27:45,080
AWS CLI locally somebody was able to

658
00:27:45,080 --> 00:27:47,380
actually access Tesla's

659
00:27:47,380 --> 00:27:50,000
AWS infrastructure and start mining

660
00:27:50,000 --> 00:27:53,330
cryptocurrency so dashboards be very

661
00:27:53,330 --> 00:27:55,610
wary of and not just the kubernetes

662
00:27:55,610 --> 00:27:58,460
dashboard there's lots and lots of

663
00:27:58,460 --> 00:28:01,160
dashboard plugins and third-party

664
00:28:01,160 --> 00:28:03,890
components coming out almost weekly at

665
00:28:03,890 --> 00:28:06,080
this point and you have to really read

666
00:28:06,080 --> 00:28:08,270
their configuration right you can't just

667
00:28:08,270 --> 00:28:11,660
say cube Patrol create dash F random

668
00:28:11,660 --> 00:28:14,330
yeah mol file and spin these things up

669
00:28:14,330 --> 00:28:15,530
because you could be creating public

670
00:28:15,530 --> 00:28:17,030
load balancers they could have

671
00:28:17,030 --> 00:28:19,430
horrendous our back policies and they

672
00:28:19,430 --> 00:28:21,590
could just be doing bad security right

673
00:28:21,590 --> 00:28:22,880
and if you don't need this dashboard

674
00:28:22,880 --> 00:28:24,950
exposed to the internet which nobody

675
00:28:24,950 --> 00:28:27,770
really does just eliminate it right

676
00:28:27,770 --> 00:28:29,390
these dashboards aren't even that useful

677
00:28:29,390 --> 00:28:33,320
and just run them internally another

678
00:28:33,320 --> 00:28:36,980
kind of more intricate sort of problem

679
00:28:36,980 --> 00:28:38,810
that we're gonna see a lot lots and lots

680
00:28:38,810 --> 00:28:41,330
of in the future with the web

681
00:28:41,330 --> 00:28:43,610
application vulnerabilities such as SS

682
00:28:43,610 --> 00:28:45,770
RF right server side request forgery

683
00:28:45,770 --> 00:28:47,990
which a lot of us here on the secure

684
00:28:47,990 --> 00:28:49,550
developer are probably familiar with

685
00:28:49,550 --> 00:28:53,250
right SS RF leads to different

686
00:28:53,250 --> 00:28:55,860
major problems in containerized and

687
00:28:55,860 --> 00:28:59,990
cloud environments right so this is from

688
00:28:59,990 --> 00:29:03,480
Shopify they have a web app kind of tool

689
00:29:03,480 --> 00:29:05,940
thing called exchange and somebody found

690
00:29:05,940 --> 00:29:09,030
SS RF in it yeah that might not be that

691
00:29:09,030 --> 00:29:11,549
big of a deal maybe it is but they were

692
00:29:11,549 --> 00:29:14,900
able to use that to basically grab

693
00:29:14,900 --> 00:29:18,720
cubelet credentials cubelet certificates

694
00:29:18,720 --> 00:29:20,789
which is a component running inside of

695
00:29:20,789 --> 00:29:23,250
kubernetes that communicates to and from

696
00:29:23,250 --> 00:29:25,230
the API server it's very privileged and

697
00:29:25,230 --> 00:29:28,230
they could grab that certificate replay

698
00:29:28,230 --> 00:29:30,870
it and basically just become cluster

699
00:29:30,870 --> 00:29:33,990
admin and start running their own Q

700
00:29:33,990 --> 00:29:35,880
control commands on the kubernetes

701
00:29:35,880 --> 00:29:37,860
cluster so if your application is

702
00:29:37,860 --> 00:29:40,289
vulnerable to SS RF which we should at

703
00:29:40,289 --> 00:29:42,780
this point kind of assume that may

704
00:29:42,780 --> 00:29:45,840
happen right nobody you know we don't

705
00:29:45,840 --> 00:29:47,789
have perfect application security yet

706
00:29:47,789 --> 00:29:52,559
and it happens so if s s RF occurs on a

707
00:29:52,559 --> 00:29:54,090
running container inside of your

708
00:29:54,090 --> 00:29:56,429
kubernetes cluster in a pod and that pod

709
00:29:56,429 --> 00:29:58,710
can reach out and do bad things to

710
00:29:58,710 --> 00:30:01,080
internal IP addresses or the AWS

711
00:30:01,080 --> 00:30:03,840
metadata endpoint or do it so important

712
00:30:03,840 --> 00:30:05,610
of the entire Cooper heddes environment

713
00:30:05,610 --> 00:30:07,950
bad stuffs gonna happen right the blast

714
00:30:07,950 --> 00:30:09,720
radius becomes quite large in that

715
00:30:09,720 --> 00:30:14,820
scenario I suggest that you kind of read

716
00:30:14,820 --> 00:30:19,320
this as a how-to guide of you know I

717
00:30:19,320 --> 00:30:21,750
hate to say what not to do because this

718
00:30:21,750 --> 00:30:24,380
is this took a lot of guts to kind of of

719
00:30:24,380 --> 00:30:27,480
publish and show the world of like what

720
00:30:27,480 --> 00:30:31,049
happened but there's a lot of Defense's

721
00:30:31,049 --> 00:30:32,760
that we're missing and then they you

722
00:30:32,760 --> 00:30:35,669
know JW player engineering decided to do

723
00:30:35,669 --> 00:30:38,820
a full step-by-step play-by-play kind of

724
00:30:38,820 --> 00:30:40,980
how to fix that how it may fix the major

725
00:30:40,980 --> 00:30:42,960
problem in their kubernetes cluster so

726
00:30:42,960 --> 00:30:45,600
we're not going to go over this now for

727
00:30:45,600 --> 00:30:48,440
sake of time but it goes step by step

728
00:30:48,440 --> 00:30:51,860
containers they basically installed a

729
00:30:51,860 --> 00:30:55,950
monitoring a monitoring third-party

730
00:30:55,950 --> 00:30:57,960
plug-in called weave weave works and

731
00:30:57,960 --> 00:31:00,600
that particular plugin had elevated

732
00:31:00,600 --> 00:31:02,640
privileges it was a privileged pod

733
00:31:02,640 --> 00:31:05,309
running inside the cluster and it also

734
00:31:05,309 --> 00:31:07,380
ran as root and it also mounted

735
00:31:07,380 --> 00:31:09,570
the doctor socket it also did a lot of

736
00:31:09,570 --> 00:31:12,030
bad things and they had no idea right

737
00:31:12,030 --> 00:31:14,160
because they just installed this thing

738
00:31:14,160 --> 00:31:15,840
that somebody pointed them to a github

739
00:31:15,840 --> 00:31:17,670
repository for and they paid some money

740
00:31:17,670 --> 00:31:21,180
to do it and it was all systems go until

741
00:31:21,180 --> 00:31:23,340
it wasn't right there was a public IP

742
00:31:23,340 --> 00:31:25,380
address with a dashboard sitting there

743
00:31:25,380 --> 00:31:28,260
and that dashboard had a little terminal

744
00:31:28,260 --> 00:31:30,480
little shell and that shell gave

745
00:31:30,480 --> 00:31:33,000
attackers from the internet full access

746
00:31:33,000 --> 00:31:35,670
into the cluster not only to the running

747
00:31:35,670 --> 00:31:37,800
container to the host operating system

748
00:31:37,800 --> 00:31:40,770
as root so obviously bad things are

749
00:31:40,770 --> 00:31:42,990
going to happen when you have a public

750
00:31:42,990 --> 00:31:45,830
IP address that's this vulnerable so

751
00:31:45,830 --> 00:31:48,810
check it out it's extremely enlightening

752
00:31:48,810 --> 00:31:51,810
I use it in my classes as like the final

753
00:31:51,810 --> 00:31:53,790
play-by-play of like here's what we

754
00:31:53,790 --> 00:31:56,820
learned and here's um you know what we

755
00:31:56,820 --> 00:31:58,170
learned how we could have protected

756
00:31:58,170 --> 00:32:00,710
against this

757
00:32:01,160 --> 00:32:06,210
so here's we have CVEs right we have

758
00:32:06,210 --> 00:32:10,710
sort of kubernetes showing up in in all

759
00:32:10,710 --> 00:32:13,380
the main channels that we kind of

760
00:32:13,380 --> 00:32:15,690
subscribe to as security professionals

761
00:32:15,690 --> 00:32:21,440
to to patch right so CVE 2018

762
00:32:21,440 --> 00:32:26,100
100 200 or - 105 that this is a great

763
00:32:26,100 --> 00:32:30,930
deep dive right in cold water again cube

764
00:32:30,930 --> 00:32:32,850
con lash or acute con Europe this year

765
00:32:32,850 --> 00:32:35,940
did a deep dive into the CVE but when

766
00:32:35,940 --> 00:32:38,460
things go bad in kubernetes it usually

767
00:32:38,460 --> 00:32:40,679
has to do with privilege escalation or

768
00:32:40,679 --> 00:32:43,890
some sort of remote code execution and

769
00:32:43,890 --> 00:32:46,770
it's it's usually critical right or high

770
00:32:46,770 --> 00:32:49,170
it's it's there's we're seeing a lot of

771
00:32:49,170 --> 00:32:51,120
these come up because it is such a

772
00:32:51,120 --> 00:32:53,730
complicated system so please subscribe

773
00:32:53,730 --> 00:32:55,110
to these bulletins if you're running

774
00:32:55,110 --> 00:32:57,960
kubernetes internally and and keep up to

775
00:32:57,960 --> 00:32:59,670
date with this because they're pushing

776
00:32:59,670 --> 00:33:02,520
out fixes relatively quickly but if

777
00:33:02,520 --> 00:33:03,870
you're not running manage kubernetes

778
00:33:03,870 --> 00:33:06,030
it's on you to go to go patch your

779
00:33:06,030 --> 00:33:08,790
version of kubernetes no questions yet

780
00:33:08,790 --> 00:33:12,570
so real quick this is kind of a hodge

781
00:33:12,570 --> 00:33:15,929
podge Cooper Nettie's threat model for

782
00:33:15,929 --> 00:33:17,940
sure not a formal microsoft threat model

783
00:33:17,940 --> 00:33:20,160
by any means but this is just to go over

784
00:33:20,160 --> 00:33:23,070
kind of you know and i know i didn't

785
00:33:23,070 --> 00:33:25,320
talk about like what kubernetes is from

786
00:33:25,320 --> 00:33:27,240
a detailed perspective that would take

787
00:33:27,240 --> 00:33:30,809
over an hour itself but i think it's

788
00:33:30,809 --> 00:33:31,800
more important to go over what the

789
00:33:31,800 --> 00:33:33,929
threat model is at least for for just

790
00:33:33,929 --> 00:33:35,850
trying to convey this information get it

791
00:33:35,850 --> 00:33:38,809
out there and this is my third model

792
00:33:38,809 --> 00:33:42,210
definitely not yours and this is not

793
00:33:42,210 --> 00:33:44,190
gonna cover all the things right so just

794
00:33:44,190 --> 00:33:47,330
keep this as kind of back in the napkin

795
00:33:47,330 --> 00:33:50,550
sort of threat model of kubernetes that

796
00:33:50,550 --> 00:33:52,920
came from my head so number one we have

797
00:33:52,920 --> 00:33:55,740
user compromised and insider threats

798
00:33:55,740 --> 00:33:57,809
right there's maybe a cluster admin

799
00:33:57,809 --> 00:33:59,790
account compromised the end of the day

800
00:33:59,790 --> 00:34:01,500
we're storing credentials in what's

801
00:34:01,500 --> 00:34:04,170
called a cube config file how do you get

802
00:34:04,170 --> 00:34:06,300
those credentials out are is is you have

803
00:34:06,300 --> 00:34:09,239
MFA in place house authentication

804
00:34:09,239 --> 00:34:12,239
happening who has cluster admin are your

805
00:34:12,239 --> 00:34:14,370
administrators the entire ng

806
00:34:14,370 --> 00:34:16,920
nearing work will that be bad right and

807
00:34:16,920 --> 00:34:19,380
are people checking these credentials

808
00:34:19,380 --> 00:34:22,230
and to get are you rotating credentials

809
00:34:22,230 --> 00:34:24,239
all sorts of things can happen with

810
00:34:24,239 --> 00:34:26,489
cluster admin account compromise right

811
00:34:26,489 --> 00:34:28,230
onboarding and off-boarding basic

812
00:34:28,230 --> 00:34:31,920
security hygiene 101 rogue employee hard

813
00:34:31,920 --> 00:34:33,630
thing to defend against we're going to

814
00:34:33,630 --> 00:34:34,949
talk about our back and that's kind of

815
00:34:34,949 --> 00:34:37,380
our our way we we limit the scope of

816
00:34:37,380 --> 00:34:39,360
what can happen there and and then that

817
00:34:39,360 --> 00:34:41,070
just added this but build system

818
00:34:41,070 --> 00:34:43,380
compromised right so kubernetes isn't

819
00:34:43,380 --> 00:34:45,840
really its own standalone unit it's

820
00:34:45,840 --> 00:34:49,230
usually tied very very intricately into

821
00:34:49,230 --> 00:34:52,770
build systems jenkins or other kind of

822
00:34:52,770 --> 00:34:55,290
runners or CI CD build pipelines that

823
00:34:55,290 --> 00:34:57,920
are off doing works work for you in

824
00:34:57,920 --> 00:35:01,230
automatically deploying your your pods

825
00:35:01,230 --> 00:35:03,360
or any of your cooper days workloads

826
00:35:03,360 --> 00:35:05,850
into the cluster so those built systems

827
00:35:05,850 --> 00:35:08,190
have access to the image they have

828
00:35:08,190 --> 00:35:10,020
access to secrets generally they have

829
00:35:10,020 --> 00:35:12,810
access to the kubernetes api vs service

830
00:35:12,810 --> 00:35:14,760
account token they are basically a

831
00:35:14,760 --> 00:35:17,490
privilege user so if you can taint that

832
00:35:17,490 --> 00:35:19,770
build pipeline you have then compromised

833
00:35:19,770 --> 00:35:22,190
the kubernetes cluster potentially

834
00:35:22,190 --> 00:35:24,270
application vulnerabilities right just

835
00:35:24,270 --> 00:35:25,440
because you're running these things

836
00:35:25,440 --> 00:35:27,750
called containers that does not mean

837
00:35:27,750 --> 00:35:30,210
you're you're off the hook for doing

838
00:35:30,210 --> 00:35:32,640
your app SEC work right authentication

839
00:35:32,640 --> 00:35:35,400
authorization of the app but also could

840
00:35:35,400 --> 00:35:37,940
the kubernetes components cryptography

841
00:35:37,940 --> 00:35:40,500
don't roll your own use industry best

842
00:35:40,500 --> 00:35:44,880
best practices etc etc app and API vulns

843
00:35:44,880 --> 00:35:48,570
right RCE remote code execution and SS

844
00:35:48,570 --> 00:35:50,880
RF are gonna be the big ones in

845
00:35:50,880 --> 00:35:53,100
kubernetes that we're gonna see manifest

846
00:35:53,100 --> 00:35:55,710
and escalate to cluster compromise or

847
00:35:55,710 --> 00:35:58,050
even cloud account compromise and then

848
00:35:58,050 --> 00:36:00,510
insecure third-party components we're

849
00:36:00,510 --> 00:36:02,910
pulling in other people's crap I mean

850
00:36:02,910 --> 00:36:05,280
code into our applications and our

851
00:36:05,280 --> 00:36:08,070
clusters and running it obviously bad

852
00:36:08,070 --> 00:36:08,910
things can happen

853
00:36:08,910 --> 00:36:11,310
you snick again they're gonna help you

854
00:36:11,310 --> 00:36:14,280
with that so on to network and

855
00:36:14,280 --> 00:36:17,180
infrastructure kubernetes networking is

856
00:36:17,180 --> 00:36:19,530
detailed it's intricate it's got a lot

857
00:36:19,530 --> 00:36:20,190
going on

858
00:36:20,190 --> 00:36:22,170
we didn't dive into that that's another

859
00:36:22,170 --> 00:36:25,110
our talk that we're either using IP

860
00:36:25,110 --> 00:36:28,160
tables or at CD or

861
00:36:28,160 --> 00:36:30,860
other mechanisms inside a kubernetes to

862
00:36:30,860 --> 00:36:33,590
actually handle how pod talks to the

863
00:36:33,590 --> 00:36:35,690
outside world and how pods talk to pods

864
00:36:35,690 --> 00:36:38,270
if we can compromise those things or

865
00:36:38,270 --> 00:36:41,480
kind of do some sniffing style attacks

866
00:36:41,480 --> 00:36:44,090
we can read traffic in plain text right

867
00:36:44,090 --> 00:36:47,990
and I don't have a slide on on service

868
00:36:47,990 --> 00:36:51,020
mesh and it's worth a mention I didn't

869
00:36:51,020 --> 00:36:54,050
put it here because I again this is

870
00:36:54,050 --> 00:36:55,730
typically a two-day class so I'm trying

871
00:36:55,730 --> 00:36:58,220
to really cruise through as much as

872
00:36:58,220 --> 00:37:00,560
possible but a service mesh is gonna

873
00:37:00,560 --> 00:37:03,020
help you here to an extent right it's

874
00:37:03,020 --> 00:37:05,750
gonna give you mutual TLS authentication

875
00:37:05,750 --> 00:37:08,690
and encryption inside of the cluster we

876
00:37:08,690 --> 00:37:12,680
have options such as is do oh I got our

877
00:37:12,680 --> 00:37:14,930
first comment from Alex octant is a

878
00:37:14,930 --> 00:37:16,670
fairly good replacement for the cube

879
00:37:16,670 --> 00:37:18,890
dashboard runs locally and uses your

880
00:37:18,890 --> 00:37:20,540
cube control permissions to show data

881
00:37:20,540 --> 00:37:23,750
octant is is a replacement for the cube

882
00:37:23,750 --> 00:37:27,590
dashboard that is absolutely correct in

883
00:37:27,590 --> 00:37:29,000
your second comment but I've never found

884
00:37:29,000 --> 00:37:30,800
those dashboards very useful that was

885
00:37:30,800 --> 00:37:32,020
actually gonna be what I was gonna say

886
00:37:32,020 --> 00:37:34,670
use whatever you want for a dashboard

887
00:37:34,670 --> 00:37:36,560
but don't be silly and open it to the

888
00:37:36,560 --> 00:37:39,470
Internet and definitely be very mindful

889
00:37:39,470 --> 00:37:41,660
of the capabilities that it has right so

890
00:37:41,660 --> 00:37:44,990
use octant if you want it's a thing and

891
00:37:44,990 --> 00:37:46,970
so as the queue Bernays dashboard and so

892
00:37:46,970 --> 00:37:49,550
so are the many many other dashboards

893
00:37:49,550 --> 00:37:53,960
that are out there kernel and OS system

894
00:37:53,960 --> 00:37:55,760
vulnerabilities right the end of the day

895
00:37:55,760 --> 00:37:58,100
your kubernetes cluster is just running

896
00:37:58,100 --> 00:38:00,200
on a collection of virtual machines

897
00:38:00,200 --> 00:38:02,000
those virtual machines are running Linux

898
00:38:02,000 --> 00:38:04,550
right some version of Linux operating

899
00:38:04,550 --> 00:38:06,890
system so you need all the standard

900
00:38:06,890 --> 00:38:09,620
hardening that you had before in place

901
00:38:09,620 --> 00:38:12,260
to make sure your cluster doesn't get

902
00:38:12,260 --> 00:38:14,690
owned through regular attacks that we've

903
00:38:14,690 --> 00:38:16,970
known about for a long time right

904
00:38:16,970 --> 00:38:19,250
container breakout and unauthorized

905
00:38:19,250 --> 00:38:21,290
access to the control plane those are

906
00:38:21,290 --> 00:38:24,100
the bad things that can happen so

907
00:38:24,100 --> 00:38:27,260
container breakout is is is preventable

908
00:38:27,260 --> 00:38:30,110
to a degree right in my ideal world I

909
00:38:30,110 --> 00:38:32,210
would have a cluster that's hardened to

910
00:38:32,210 --> 00:38:34,250
the extent where I don't I wouldn't

911
00:38:34,250 --> 00:38:36,590
really care if I could run some sort of

912
00:38:36,590 --> 00:38:41,090
completely misconfigured vulnerable

913
00:38:41,090 --> 00:38:43,490
full container right I have controls in

914
00:38:43,490 --> 00:38:46,520
place in layers of controls that are

915
00:38:46,520 --> 00:38:48,320
going to stop container breakout from

916
00:38:48,320 --> 00:38:51,470
ever occurring denial-of-service alright

917
00:38:51,470 --> 00:38:52,910
this certainly doesn't go away in

918
00:38:52,910 --> 00:38:55,550
kubernetes and kubernetes has become

919
00:38:55,550 --> 00:38:59,360
this very very ripe cryptocurrency kind

920
00:38:59,360 --> 00:39:02,120
of malware target because it is so

921
00:39:02,120 --> 00:39:04,370
elastic right it is such a great

922
00:39:04,370 --> 00:39:06,740
platform for cryptocurrency to be mined

923
00:39:06,740 --> 00:39:10,550
on its auto scaling and horizontal pata

924
00:39:10,550 --> 00:39:12,890
auto scaling vertical pod auto scaling

925
00:39:12,890 --> 00:39:14,150
all these things really help

926
00:39:14,150 --> 00:39:16,880
cryptocurrency miners work so watch out

927
00:39:16,880 --> 00:39:20,060
for a certain container or a certain

928
00:39:20,060 --> 00:39:22,880
process on a on a virtual machine you

929
00:39:22,880 --> 00:39:26,120
know eating up too much CPU or hogging

930
00:39:26,120 --> 00:39:29,030
resources this is gonna lead to crash or

931
00:39:29,030 --> 00:39:31,610
worse financial exhaustion right if you

932
00:39:31,610 --> 00:39:33,110
have auto scaling on your manage

933
00:39:33,110 --> 00:39:34,760
kubernetes clusters enabled and you

934
00:39:34,760 --> 00:39:38,180
allow your clusters to scale to a

935
00:39:38,180 --> 00:39:40,760
hundred nodes and somebody does that and

936
00:39:40,760 --> 00:39:42,020
it automatically scales you're gonna

937
00:39:42,020 --> 00:39:44,120
spend a lot of money and then again

938
00:39:44,120 --> 00:39:47,030
image pipeline right the image pipeline

939
00:39:47,030 --> 00:39:48,830
matters a lot the integrity of it

940
00:39:48,830 --> 00:39:50,930
matters and the lack of vulnerabilities

941
00:39:50,930 --> 00:39:52,460
is key right we don't want to be pushing

942
00:39:52,460 --> 00:39:56,090
images into our into our cluster that's

943
00:39:56,090 --> 00:39:58,160
that's riddled with critical CVS and

944
00:39:58,160 --> 00:40:00,920
things like that and then you know end

945
00:40:00,920 --> 00:40:03,020
of the day it comes down to miss

946
00:40:03,020 --> 00:40:05,060
configuration being kind of our top

947
00:40:05,060 --> 00:40:07,790
problem it's either you know lack of

948
00:40:07,790 --> 00:40:10,480
understanding increased complexity

949
00:40:10,480 --> 00:40:13,490
disparate teams early adopter whatever

950
00:40:13,490 --> 00:40:16,670
the reason is miss configuration just

951
00:40:16,670 --> 00:40:20,600
happens right open ports things you put

952
00:40:20,600 --> 00:40:22,700
in place for testing that never got

953
00:40:22,700 --> 00:40:26,510
removed maybe you had some cluster admin

954
00:40:26,510 --> 00:40:28,880
our back policies for everybody and

955
00:40:28,880 --> 00:40:29,840
you're like well I'm gonna fix that

956
00:40:29,840 --> 00:40:31,580
later right well the person who said

957
00:40:31,580 --> 00:40:32,780
they're gonna fix it later it doesn't

958
00:40:32,780 --> 00:40:34,340
work with the company anymore and this

959
00:40:34,340 --> 00:40:36,530
is just how we do things that's really

960
00:40:36,530 --> 00:40:38,720
really common and it's unfortunate

961
00:40:38,720 --> 00:40:40,990
because you're just opening yourself up

962
00:40:40,990 --> 00:40:44,510
for for actually imminent doom

963
00:40:44,510 --> 00:40:46,730
so passwords passphrases don't check

964
00:40:46,730 --> 00:40:49,010
them in to get all the things we've

965
00:40:49,010 --> 00:40:51,290
we've learned about we know about use

966
00:40:51,290 --> 00:40:54,050
MFA use strong authentication don't use

967
00:40:54,050 --> 00:40:54,870
basic H

968
00:40:54,870 --> 00:40:57,180
to be basic off you know really lean on

969
00:40:57,180 --> 00:41:00,180
your SSO mechanisms and your OID seee

970
00:41:00,180 --> 00:41:02,250
and your OAuth 2 mechanisms you've

971
00:41:02,250 --> 00:41:03,900
already built and from a corporate

972
00:41:03,900 --> 00:41:06,120
perspective and there's probably a way

973
00:41:06,120 --> 00:41:07,590
to plug it in the kubernetes and just

974
00:41:07,590 --> 00:41:09,510
forget about it right Network

975
00:41:09,510 --> 00:41:12,290
segmentation so don't have publicly

976
00:41:12,290 --> 00:41:15,450
public IP address is tied to your entire

977
00:41:15,450 --> 00:41:17,310
kubernetes cluster all right that could

978
00:41:17,310 --> 00:41:19,350
definitely open you up to some problems

979
00:41:19,350 --> 00:41:22,170
and just you need to at least have that

980
00:41:22,170 --> 00:41:24,810
that base knowledge of like should our

981
00:41:24,810 --> 00:41:27,090
cluster be in this V PC should we have V

982
00:41:27,090 --> 00:41:30,300
PC pureeing across what can access that

983
00:41:30,300 --> 00:41:31,950
the dev and test cluster versus

984
00:41:31,950 --> 00:41:34,140
production there's all those decisions

985
00:41:34,140 --> 00:41:36,420
that need to be made early on in there

986
00:41:36,420 --> 00:41:41,430
in your journey so in short we really

987
00:41:41,430 --> 00:41:43,110
want to limit our blast radius right and

988
00:41:43,110 --> 00:41:44,490
what do I mean when I say blast radius

989
00:41:44,490 --> 00:41:47,880
if and when bad event occurs what are

990
00:41:47,880 --> 00:41:50,490
the what are the kind of like how can

991
00:41:50,490 --> 00:41:52,760
that spiral hell how can that really

992
00:41:52,760 --> 00:41:55,110
extend itself to other parts of the

993
00:41:55,110 --> 00:41:56,970
environment in the system right so if

994
00:41:56,970 --> 00:41:59,280
I'm vulnerable to SSR death in my in my

995
00:41:59,280 --> 00:42:03,450
API and way deep in the backend should I

996
00:42:03,450 --> 00:42:05,670
like is that gonna lead to cluster

997
00:42:05,670 --> 00:42:11,400
compromised is that going to lead to AWS

998
00:42:11,400 --> 00:42:13,230
account compromised because that's

999
00:42:13,230 --> 00:42:14,820
what's happening right we this configure

1000
00:42:14,820 --> 00:42:18,480
things so badly that you know one web

1001
00:42:18,480 --> 00:42:21,660
app phone spreads itself out to totally

1002
00:42:21,660 --> 00:42:24,900
grabbing secrets and taking over an

1003
00:42:24,900 --> 00:42:29,100
entire cloud account so somebody said

1004
00:42:29,100 --> 00:42:30,780
would you mind to share some of your

1005
00:42:30,780 --> 00:42:32,490
real life experience as an incident or

1006
00:42:32,490 --> 00:42:33,870
miss configuration in production

1007
00:42:33,870 --> 00:42:37,380
environment I will at the end if I have

1008
00:42:37,380 --> 00:42:39,030
a chance and if I don't have a chance

1009
00:42:39,030 --> 00:42:43,140
hit me up on Twitter at Jim Nesta and we

1010
00:42:43,140 --> 00:42:45,240
can chat about that as well

1011
00:42:45,240 --> 00:42:47,730
I've actually worked on I've probably

1012
00:42:47,730 --> 00:42:50,760
worked with 30 different large

1013
00:42:50,760 --> 00:42:53,100
production clusters to a degree with

1014
00:42:53,100 --> 00:42:56,100
problems with with lots of miss

1015
00:42:56,100 --> 00:42:59,220
configurations so I have some some very

1016
00:42:59,220 --> 00:43:01,410
highly redacted war stories I can share

1017
00:43:01,410 --> 00:43:05,580
there as well so this is from a ebook

1018
00:43:05,580 --> 00:43:07,380
called operating kubernetes clusters and

1019
00:43:07,380 --> 00:43:08,820
applications safely

1020
00:43:08,820 --> 00:43:11,310
kind of just gives this visual

1021
00:43:11,310 --> 00:43:13,020
representation of like what could go

1022
00:43:13,020 --> 00:43:15,270
wrong right so here we have our cluster

1023
00:43:15,270 --> 00:43:18,420
or cluster has nodes Etsy D is our data

1024
00:43:18,420 --> 00:43:20,310
storage mechanism where we store secrets

1025
00:43:20,310 --> 00:43:21,870
and all of our configuration for

1026
00:43:21,870 --> 00:43:24,840
kubernetes access to that could be bad

1027
00:43:24,840 --> 00:43:27,600
right if you can access at CD from a web

1028
00:43:27,600 --> 00:43:29,330
application that's running in a

1029
00:43:29,330 --> 00:43:33,540
container and inside of a pod bad things

1030
00:43:33,540 --> 00:43:34,950
can happen especially if you're stealing

1031
00:43:34,950 --> 00:43:37,380
secrets there at CD also needs to be

1032
00:43:37,380 --> 00:43:39,510
part of your BCD our plan right your

1033
00:43:39,510 --> 00:43:41,430
business continuity disaster recovery

1034
00:43:41,430 --> 00:43:43,950
plan so it should be backed up it should

1035
00:43:43,950 --> 00:43:45,990
be you know all of the all the snapshots

1036
00:43:45,990 --> 00:43:48,840
should be sent elsewhere sed is kind of

1037
00:43:48,840 --> 00:43:50,970
this like very central important piece

1038
00:43:50,970 --> 00:43:54,630
of kubernetes and then we have the

1039
00:43:54,630 --> 00:43:59,330
couplet API container escape to the host

1040
00:43:59,330 --> 00:44:02,370
injecting traffic access to the VMS miss

1041
00:44:02,370 --> 00:44:05,550
configuration etc etc okay I don't have

1042
00:44:05,550 --> 00:44:07,710
time to dive into all these and if you

1043
00:44:07,710 --> 00:44:11,190
want to talk further or attend one of my

1044
00:44:11,190 --> 00:44:13,590
classes and I didn't mention I'll be

1045
00:44:13,590 --> 00:44:17,010
giving a hour okay give me a workshop

1046
00:44:17,010 --> 00:44:20,040
that cube con this year on this kind of

1047
00:44:20,040 --> 00:44:23,610
stuff hands-on kind of with a few other

1048
00:44:23,610 --> 00:44:26,190
folks highly respected folks in the

1049
00:44:26,190 --> 00:44:29,460
industry on basically attack defense

1050
00:44:29,460 --> 00:44:32,130
style kubernetes in a big room at coop

1051
00:44:32,130 --> 00:44:34,170
con I'm really excited so that's in San

1052
00:44:34,170 --> 00:44:36,600
Diego in November check it out

1053
00:44:36,600 --> 00:44:39,150
defenses right what can we do like

1054
00:44:39,150 --> 00:44:41,910
sounds like we're in a cluster because

1055
00:44:41,910 --> 00:44:44,430
we are and how do we start kind of

1056
00:44:44,430 --> 00:44:48,060
layering defenses on top of these these

1057
00:44:48,060 --> 00:44:49,410
kubernetes environments and cloud

1058
00:44:49,410 --> 00:44:50,070
environments

1059
00:44:50,070 --> 00:44:54,390
oh man of 15 minutes all right let's see

1060
00:44:54,390 --> 00:44:55,710
if we could get through this we're just

1061
00:44:55,710 --> 00:44:57,870
gonna scratch the surface of these

1062
00:44:57,870 --> 00:45:01,860
because they are big hefty topics number

1063
00:45:01,860 --> 00:45:04,310
one our back role based access control

1064
00:45:04,310 --> 00:45:08,250
this is really how we start applying the

1065
00:45:08,250 --> 00:45:09,660
principle of least privilege we'll look

1066
00:45:09,660 --> 00:45:11,970
at that container and pod permissions

1067
00:45:11,970 --> 00:45:13,830
what can a container do that's running

1068
00:45:13,830 --> 00:45:16,170
in the pot and how do we kind of stop

1069
00:45:16,170 --> 00:45:18,300
that through use of through the use of

1070
00:45:18,300 --> 00:45:20,610
pod security policies dynamic admission

1071
00:45:20,610 --> 00:45:23,829
control an open policy agent

1072
00:45:23,829 --> 00:45:26,230
sandboxing how do we run really

1073
00:45:26,230 --> 00:45:28,690
untrusted workloads inside of our

1074
00:45:28,690 --> 00:45:30,730
cluster and even limit what kind of

1075
00:45:30,730 --> 00:45:33,670
access it has to the Linux kernel even

1076
00:45:33,670 --> 00:45:37,720
more right thank you Sam yes that is the

1077
00:45:37,720 --> 00:45:40,359
tutorial at cube con and then note

1078
00:45:40,359 --> 00:45:42,640
protection it's kind of more more than

1079
00:45:42,640 --> 00:45:44,290
boring stuff but really really important

1080
00:45:44,290 --> 00:45:45,819
ok let's go

1081
00:45:45,819 --> 00:45:48,220
role-based access control this is how

1082
00:45:48,220 --> 00:45:49,720
we're going to regulate access to

1083
00:45:49,720 --> 00:45:52,119
resources this isn't authentication

1084
00:45:52,119 --> 00:45:54,369
this is authorization so we're not going

1085
00:45:54,369 --> 00:45:56,369
to discuss authentication because

1086
00:45:56,369 --> 00:45:59,530
there's too many options and everyone

1087
00:45:59,530 --> 00:46:01,000
does it different and there's a billion

1088
00:46:01,000 --> 00:46:03,250
plugins and that's a different

1089
00:46:03,250 --> 00:46:04,780
discussion but we'll talk about our back

1090
00:46:04,780 --> 00:46:08,470
because it's the thing I see work most

1091
00:46:08,470 --> 00:46:10,869
of out in the world in the wild of

1092
00:46:10,869 --> 00:46:13,150
people think they have it right but it's

1093
00:46:13,150 --> 00:46:15,069
not right it's easy to get wrong and

1094
00:46:15,069 --> 00:46:17,440
it's hard to audit so at its core our

1095
00:46:17,440 --> 00:46:20,859
back ties a user somebody had a keyboard

1096
00:46:20,859 --> 00:46:24,010
or a service account to API of resources

1097
00:46:24,010 --> 00:46:26,800
and allows that particular user or

1098
00:46:26,800 --> 00:46:28,690
service account to perform operations

1099
00:46:28,690 --> 00:46:31,690
get less the lead patch those are HTTP

1100
00:46:31,690 --> 00:46:34,780
verbs right so an our back policy is

1101
00:46:34,780 --> 00:46:36,940
just a collection of all these things

1102
00:46:36,940 --> 00:46:40,510
it's like me as Jimmy can perform delete

1103
00:46:40,510 --> 00:46:44,290
and list on the resources of secrets and

1104
00:46:44,290 --> 00:46:46,240
pots right that would be an Arabic

1105
00:46:46,240 --> 00:46:49,119
policy in plain kind of meta programming

1106
00:46:49,119 --> 00:46:52,059
English so what do they look like we

1107
00:46:52,059 --> 00:46:54,069
have roles and we have cluster roles a

1108
00:46:54,069 --> 00:46:56,710
role is where we define the allow list

1109
00:46:56,710 --> 00:46:58,930
right this is a role called pod reader

1110
00:46:58,930 --> 00:47:00,760
and this is tied to a namespace of

1111
00:47:00,760 --> 00:47:02,890
development roles are always tied to a

1112
00:47:02,890 --> 00:47:05,500
namespace for the most part they should

1113
00:47:05,500 --> 00:47:09,069
be and we have resources and verbs so

1114
00:47:09,069 --> 00:47:11,109
what we're dealing with in kubernetes if

1115
00:47:11,109 --> 00:47:13,119
you're new to kubernetes is Yambol so

1116
00:47:13,119 --> 00:47:15,069
that's what we're that's just the new

1117
00:47:15,069 --> 00:47:18,099
language of choice right now the hot job

1118
00:47:18,099 --> 00:47:20,260
on LinkedIn is like a senior or Yambol

1119
00:47:20,260 --> 00:47:22,299
engineer right that's all we care about

1120
00:47:22,299 --> 00:47:24,520
now is the animal I'm just kidding well

1121
00:47:24,520 --> 00:47:25,839
there actually is a couple roles like

1122
00:47:25,839 --> 00:47:29,020
that but so this allows you to this

1123
00:47:29,020 --> 00:47:32,020
allows the individuals or service

1124
00:47:32,020 --> 00:47:34,720
accounts or groups tied to this role

1125
00:47:34,720 --> 00:47:36,310
through the users of a role

1126
00:47:36,310 --> 00:47:38,290
we'll see in a minute to get in less

1127
00:47:38,290 --> 00:47:42,370
pots right not rocket science and that's

1128
00:47:42,370 --> 00:47:44,860
all we're gonna dive into as far as how

1129
00:47:44,860 --> 00:47:45,940
this is structured

1130
00:47:45,940 --> 00:47:47,950
just keep note that there are roles

1131
00:47:47,950 --> 00:47:50,590
cluster roles role bindings which take

1132
00:47:50,590 --> 00:47:53,980
that user that's right here and binds it

1133
00:47:53,980 --> 00:47:56,230
to this role and cluster role bindings

1134
00:47:56,230 --> 00:47:58,450
and you as an operator need to build

1135
00:47:58,450 --> 00:48:00,070
these as an administrator and the

1136
00:48:00,070 --> 00:48:01,780
security team better be involved right

1137
00:48:01,780 --> 00:48:04,450
you need to take a lot of time to sit

1138
00:48:04,450 --> 00:48:07,090
down and think like okay like yes we

1139
00:48:07,090 --> 00:48:09,100
have cluster admin so that's easy we

1140
00:48:09,100 --> 00:48:10,870
give them elevated privileges we put

1141
00:48:10,870 --> 00:48:12,910
them on a pedestal they have to do all

1142
00:48:12,910 --> 00:48:14,680
the things in the cluster but how do we

1143
00:48:14,680 --> 00:48:17,800
scope this down for a service account

1144
00:48:17,800 --> 00:48:19,810
rent that token and Jenkins that only

1145
00:48:19,810 --> 00:48:21,490
has to do certain things to get its job

1146
00:48:21,490 --> 00:48:24,010
done and how do we scope it down for a

1147
00:48:24,010 --> 00:48:26,770
developer right who needs flexibility

1148
00:48:26,770 --> 00:48:28,390
and freedom in the cluster but not too

1149
00:48:28,390 --> 00:48:30,670
much that they can cause harm this is

1150
00:48:30,670 --> 00:48:33,790
really helping with that kind of rogue

1151
00:48:33,790 --> 00:48:36,700
insider miss configuration sort of part

1152
00:48:36,700 --> 00:48:37,990
of the threat model right and getting

1153
00:48:37,990 --> 00:48:41,710
these right is hard and I'm gonna maybe

1154
00:48:41,710 --> 00:48:44,170
Sam will remind me I have a list called

1155
00:48:44,170 --> 00:48:46,360
awesome kubernetes security and github

1156
00:48:46,360 --> 00:48:49,960
that has a lot of tools pertaining to

1157
00:48:49,960 --> 00:48:54,220
our back that help you visualize and

1158
00:48:54,220 --> 00:48:55,960
hawed it this sort of thing but they're

1159
00:48:55,960 --> 00:48:58,600
not bulletproof so this is this takes a

1160
00:48:58,600 --> 00:49:01,270
deep understanding so our back is good

1161
00:49:01,270 --> 00:49:03,940
we need to use it and containers can

1162
00:49:03,940 --> 00:49:06,070
request elevated privileges right our

1163
00:49:06,070 --> 00:49:07,930
container itself running inside of a pod

1164
00:49:07,930 --> 00:49:10,330
can run as root it can also mount

1165
00:49:10,330 --> 00:49:12,010
sensitive volumes such as the root

1166
00:49:12,010 --> 00:49:14,650
volume we can request access to ports on

1167
00:49:14,650 --> 00:49:16,780
the host the container can run the

1168
00:49:16,780 --> 00:49:18,970
privilege flag right it's it's all the

1169
00:49:18,970 --> 00:49:21,160
same docker stuff and kubernetes just

1170
00:49:21,160 --> 00:49:24,610
surfaces that up through yeah mo so the

1171
00:49:24,610 --> 00:49:26,560
one that we need to look out for is

1172
00:49:26,560 --> 00:49:28,720
privilege mode right it's in our pod

1173
00:49:28,720 --> 00:49:32,500
specification and if we allow our

1174
00:49:32,500 --> 00:49:34,720
kubernetes cluster to run privilege pods

1175
00:49:34,720 --> 00:49:36,730
we are saying I don't care about

1176
00:49:36,730 --> 00:49:40,300
security I'm just gonna basically break

1177
00:49:40,300 --> 00:49:41,980
down the walls of what we had as a

1178
00:49:41,980 --> 00:49:43,810
running container and run this as

1179
00:49:43,810 --> 00:49:45,550
privileged mode you're gonna see a lot

1180
00:49:45,550 --> 00:49:49,120
of monitoring alerting and network kind

1181
00:49:49,120 --> 00:49:49,770
of over

1182
00:49:49,770 --> 00:49:53,880
pods requesting this if you trust it go

1183
00:49:53,880 --> 00:49:55,620
ahead right but you better know that

1184
00:49:55,620 --> 00:49:57,600
you're running privileged pods and that

1185
00:49:57,600 --> 00:50:00,090
it's a that is part of your threat model

1186
00:50:00,090 --> 00:50:03,270
right so how do we defend against that

1187
00:50:03,270 --> 00:50:05,880
how do we say as a cluster admin hey or

1188
00:50:05,880 --> 00:50:08,100
as a security bro like I don't want this

1189
00:50:08,100 --> 00:50:10,230
stuff running in my cluster I never I

1190
00:50:10,230 --> 00:50:13,590
just want a firewall off so we use a one

1191
00:50:13,590 --> 00:50:16,050
of three things one is upon security

1192
00:50:16,050 --> 00:50:21,300
policy this gives you the ability to yes

1193
00:50:21,300 --> 00:50:22,950
I will get the list for you Sam this

1194
00:50:22,950 --> 00:50:25,050
gives you the ability to block some of

1195
00:50:25,050 --> 00:50:27,660
these very risky behaviors at the front

1196
00:50:27,660 --> 00:50:29,220
door it's called an omission controller

1197
00:50:29,220 --> 00:50:32,250
so it happens at the API server so we're

1198
00:50:32,250 --> 00:50:34,230
authenticated we're authorized and then

1199
00:50:34,230 --> 00:50:35,910
we have admission control and pod

1200
00:50:35,910 --> 00:50:38,160
security policy is one of those and we

1201
00:50:38,160 --> 00:50:40,170
build the security requirements it's a

1202
00:50:40,170 --> 00:50:42,330
cluster wide resource so we don't really

1203
00:50:42,330 --> 00:50:44,730
apply these to namespaces it's applied

1204
00:50:44,730 --> 00:50:46,890
to the entire cluster so here we have a

1205
00:50:46,890 --> 00:50:49,800
pod security policy that helps us block

1206
00:50:49,800 --> 00:50:52,080
the privilege any privilege pods that

1207
00:50:52,080 --> 00:50:54,540
are incoming into our clusters so this

1208
00:50:54,540 --> 00:50:57,000
is kind of pre-flight pre-deployment

1209
00:50:57,000 --> 00:50:59,420
this doesn't go out and search for

1210
00:50:59,420 --> 00:51:02,130
certain pods that are violating policies

1211
00:51:02,130 --> 00:51:03,720
it's just gonna go out just gonna stop

1212
00:51:03,720 --> 00:51:05,280
it at the front door and we're gonna

1213
00:51:05,280 --> 00:51:08,280
whitelist a couple volumes as well so

1214
00:51:08,280 --> 00:51:09,870
I'm not gonna spend too much more time

1215
00:51:09,870 --> 00:51:13,260
on that what we're seeing people shift

1216
00:51:13,260 --> 00:51:15,480
to is what's called dynamic admission

1217
00:51:15,480 --> 00:51:17,250
control pod security policies are fairly

1218
00:51:17,250 --> 00:51:19,260
static we have a list of things that we

1219
00:51:19,260 --> 00:51:21,540
allow or don't allow and those are

1220
00:51:21,540 --> 00:51:24,030
supported by kubernetes or not in

1221
00:51:24,030 --> 00:51:25,470
dynamic admission control lets us

1222
00:51:25,470 --> 00:51:28,470
totally customize what we're gonna do in

1223
00:51:28,470 --> 00:51:30,030
the form of emission control we'll call

1224
00:51:30,030 --> 00:51:32,910
this our pod firewall if you will so

1225
00:51:32,910 --> 00:51:34,500
we're gonna intercept two requests

1226
00:51:34,500 --> 00:51:36,930
coming into the cluster check for

1227
00:51:36,930 --> 00:51:39,750
certain configuration that we allow or

1228
00:51:39,750 --> 00:51:41,730
don't allow or want to add configuration

1229
00:51:41,730 --> 00:51:44,940
and then we either block allow or modify

1230
00:51:44,940 --> 00:51:47,370
and submit that to the cluster itself so

1231
00:51:47,370 --> 00:51:49,260
this is kind of the future of doing

1232
00:51:49,260 --> 00:51:51,390
kubernetes security in my opinion right

1233
00:51:51,390 --> 00:51:53,280
pas security policies are great they

1234
00:51:53,280 --> 00:51:55,050
work out of the box but these take a

1235
00:51:55,050 --> 00:51:56,550
little more work but they're gonna give

1236
00:51:56,550 --> 00:51:59,610
you way more flexibility so if we want

1237
00:51:59,610 --> 00:52:02,520
to do something like yeah last 10

1238
00:52:02,520 --> 00:52:03,900
minutes

1239
00:52:03,900 --> 00:52:08,430
danai so this is a example from Kelsey

1240
00:52:08,430 --> 00:52:11,820
Hightower this will reject pods that use

1241
00:52:11,820 --> 00:52:14,220
environment variables that's not we

1242
00:52:14,220 --> 00:52:15,780
can't do that with pod security policies

1243
00:52:15,780 --> 00:52:17,610
but we can with these custom and mission

1244
00:52:17,610 --> 00:52:21,740
webhooks and even further to add to that

1245
00:52:21,740 --> 00:52:24,210
without going deep into the weeds of

1246
00:52:24,210 --> 00:52:27,090
what OPA is and does open policy agent

1247
00:52:27,090 --> 00:52:30,570
is gonna help us kind of do this cluster

1248
00:52:30,570 --> 00:52:34,170
wide and across multiple clusters to

1249
00:52:34,170 --> 00:52:37,860
basically apply security policies with a

1250
00:52:37,860 --> 00:52:41,490
standard language and I'd suggest if

1251
00:52:41,490 --> 00:52:43,440
you're interested in this and really

1252
00:52:43,440 --> 00:52:46,530
getting in the nitty-gritty of OPA and

1253
00:52:46,530 --> 00:52:48,840
and what it does for security check out

1254
00:52:48,840 --> 00:52:51,480
the project gatekeeper it's a policy

1255
00:52:51,480 --> 00:52:54,150
controller so it performs a web hook in

1256
00:52:54,150 --> 00:52:55,830
the form of admission control to run a

1257
00:52:55,830 --> 00:52:58,110
bunch of checks based off of what you've

1258
00:52:58,110 --> 00:53:01,050
given it and you can either deny or

1259
00:53:01,050 --> 00:53:03,420
allow those requests or you can mutate

1260
00:53:03,420 --> 00:53:04,950
those requests they're coming to your

1261
00:53:04,950 --> 00:53:08,460
cluster some examples would be I hate I

1262
00:53:08,460 --> 00:53:10,380
only allow pods that have specific

1263
00:53:10,380 --> 00:53:13,700
labels into this cluster or namespace

1264
00:53:13,700 --> 00:53:16,560
gatekeeper allows audits of violations

1265
00:53:16,560 --> 00:53:18,870
of policy as well into a running cluster

1266
00:53:18,870 --> 00:53:22,050
which is really cool and maybe you want

1267
00:53:22,050 --> 00:53:24,330
namespaces to have a label with an owner

1268
00:53:24,330 --> 00:53:27,990
right that's for cost or for either any

1269
00:53:27,990 --> 00:53:30,690
sort of reason that a dev team needs to

1270
00:53:30,690 --> 00:53:31,950
put a label on their particular

1271
00:53:31,950 --> 00:53:35,190
namespace or if you require that your

1272
00:53:35,190 --> 00:53:37,440
containers have resource limits hey I

1273
00:53:37,440 --> 00:53:41,100
only allow containers with 250 Meg's of

1274
00:53:41,100 --> 00:53:45,480
deal of RAM or CPU units whatever it is

1275
00:53:45,480 --> 00:53:48,120
I'm gonna stop that if you don't have

1276
00:53:48,120 --> 00:53:50,220
limits defined that are within my

1277
00:53:50,220 --> 00:53:51,750
parameters so this is what we're

1278
00:53:51,750 --> 00:53:54,680
security people should be focusing right

1279
00:53:54,680 --> 00:53:57,780
so again the easiest of this always

1280
00:53:57,780 --> 00:53:59,460
ensure images come from a known good

1281
00:53:59,460 --> 00:54:02,430
source right use snick to scan your

1282
00:54:02,430 --> 00:54:04,920
container images and and there are other

1283
00:54:04,920 --> 00:54:06,630
tools out there but they're all they're

1284
00:54:06,630 --> 00:54:10,020
all horrible right you snick I'm just

1285
00:54:10,020 --> 00:54:12,120
kidding but verify that image is good

1286
00:54:12,120 --> 00:54:14,490
right doesn't have vulnerabilities due

1287
00:54:14,490 --> 00:54:16,650
integrity checking yeah

1288
00:54:16,650 --> 00:54:18,839
is appropriate here right you can

1289
00:54:18,839 --> 00:54:21,119
cryptographic cryptographically check

1290
00:54:21,119 --> 00:54:23,369
the validity of that image right before

1291
00:54:23,369 --> 00:54:25,200
it's about to be provisioned into the

1292
00:54:25,200 --> 00:54:29,609
cluster check out tools such as G visor

1293
00:54:29,609 --> 00:54:32,069
and cata containers to really start to

1294
00:54:32,069 --> 00:54:35,279
Sam sandbox containers in a pod even

1295
00:54:35,279 --> 00:54:37,410
further this will act as a shim in

1296
00:54:37,410 --> 00:54:39,150
between your running container and the

1297
00:54:39,150 --> 00:54:41,039
Linux kernel and it's gonna even

1298
00:54:41,039 --> 00:54:43,319
restrict what it can do further and give

1299
00:54:43,319 --> 00:54:46,650
you a lot of a lot of serious protection

1300
00:54:46,650 --> 00:54:50,609
there at a cost to to performance but if

1301
00:54:50,609 --> 00:54:52,500
you're running untrusted workloads you

1302
00:54:52,500 --> 00:54:54,119
have to you have to be in the know of

1303
00:54:54,119 --> 00:54:57,180
these kind of projects and patch your

1304
00:54:57,180 --> 00:54:59,869
stuff right under the hood OS hardening

1305
00:54:59,869 --> 00:55:03,809
hardened images ids/ips all the security

1306
00:55:03,809 --> 00:55:05,730
stuff we've been doing forever and

1307
00:55:05,730 --> 00:55:07,799
always doesn't go away

1308
00:55:07,799 --> 00:55:11,190
they're just VMs so kubernetes can be

1309
00:55:11,190 --> 00:55:14,430
secure but hopefully after this complete

1310
00:55:14,430 --> 00:55:17,940
and utter firehose of information it's

1311
00:55:17,940 --> 00:55:19,710
not the default these are these are

1312
00:55:19,710 --> 00:55:21,539
levers you choose to pull and knobs you

1313
00:55:21,539 --> 00:55:23,880
choose to turn and if you turn them the

1314
00:55:23,880 --> 00:55:25,740
wrong way you may not even know that

1315
00:55:25,740 --> 00:55:27,390
you're opening yourself up to attack

1316
00:55:27,390 --> 00:55:31,109
take home assignment to you if you're

1317
00:55:31,109 --> 00:55:32,460
running kubernetes again I told you

1318
00:55:32,460 --> 00:55:34,260
there'd be a lot of a lot of words here

1319
00:55:34,260 --> 00:55:36,750
this kept growing ask yourself these

1320
00:55:36,750 --> 00:55:38,970
questions right can containers run as

1321
00:55:38,970 --> 00:55:40,980
root what volumes are allowed to be

1322
00:55:40,980 --> 00:55:43,770
mounted is it read is it read or is it

1323
00:55:43,770 --> 00:55:46,950
read and write can I've run pods in

1324
00:55:46,950 --> 00:55:48,960
privilege mode what policies do I have

1325
00:55:48,960 --> 00:55:51,089
in place to have any policies blocking

1326
00:55:51,089 --> 00:55:52,650
this kind of stuff how do I do

1327
00:55:52,650 --> 00:55:54,690
authentication step through that flow

1328
00:55:54,690 --> 00:55:57,630
make sure that the the the individuals

1329
00:55:57,630 --> 00:55:59,240
who have access should have access

1330
00:55:59,240 --> 00:56:01,230
on-boarding and off-boarding procedures

1331
00:56:01,230 --> 00:56:04,380
work as expected do you have our back

1332
00:56:04,380 --> 00:56:07,680
and is it isn't locked down to to really

1333
00:56:07,680 --> 00:56:09,000
apply the principle of least privilege

1334
00:56:09,000 --> 00:56:11,670
where a secrets stored are they in NTD

1335
00:56:11,670 --> 00:56:13,260
is that encrypted how are you

1336
00:56:13,260 --> 00:56:14,819
bootstrapping secrets can you rotate

1337
00:56:14,819 --> 00:56:17,460
them can you revoke them where your

1338
00:56:17,460 --> 00:56:18,750
image is even coming from are you

1339
00:56:18,750 --> 00:56:21,510
allowing images from the internet if so

1340
00:56:21,510 --> 00:56:24,750
why do you have network security being

1341
00:56:24,750 --> 00:56:26,549
enforced right how do you audit these

1342
00:56:26,549 --> 00:56:28,770
rules can all the pods in a given

1343
00:56:28,770 --> 00:56:30,500
cluster talk to every other

1344
00:56:30,500 --> 00:56:32,329
well that's probably not what you want

1345
00:56:32,329 --> 00:56:34,010
right so you need to look into something

1346
00:56:34,010 --> 00:56:36,859
like a service mesh or network policies

1347
00:56:36,859 --> 00:56:39,170
that we didn't even talk about today are

1348
00:56:39,170 --> 00:56:40,849
your hosts hardened right

1349
00:56:40,849 --> 00:56:43,819
don't forget your hosts and are you

1350
00:56:43,819 --> 00:56:46,339
using kubernetes audit logs right no one

1351
00:56:46,339 --> 00:56:47,990
uses these but they're awesome these are

1352
00:56:47,990 --> 00:56:50,299
these logs that are given to you for

1353
00:56:50,299 --> 00:56:52,160
free by the API server they have all

1354
00:56:52,160 --> 00:56:54,740
sorts of security goodness built in in

1355
00:56:54,740 --> 00:56:56,869
the form of HTTP requests and responses

1356
00:56:56,869 --> 00:56:59,089
you know you know pipe them out to

1357
00:56:59,089 --> 00:57:02,089
Splunk or elk or somewhere and setup

1358
00:57:02,089 --> 00:57:04,490
that as part of your sin right your

1359
00:57:04,490 --> 00:57:06,500
event monitoring solution

1360
00:57:06,500 --> 00:57:09,650
do you have ingress Azure public IP

1361
00:57:09,650 --> 00:57:11,089
addresses that you didn't know about

1362
00:57:11,089 --> 00:57:13,849
well that's a problem if you have an SS

1363
00:57:13,849 --> 00:57:16,609
RF bug what happens right what happens

1364
00:57:16,609 --> 00:57:19,069
if that gets exploited can you get your

1365
00:57:19,069 --> 00:57:21,380
keys to the kingdom have you done a

1366
00:57:21,380 --> 00:57:24,769
threat model sit down and have a have a

1367
00:57:24,769 --> 00:57:27,559
beverage after work and talk about your

1368
00:57:27,559 --> 00:57:29,420
kubernetes deployment right like what

1369
00:57:29,420 --> 00:57:30,769
does it mean do a threat model it

1370
00:57:30,769 --> 00:57:33,440
doesn't have to be crazy formal and are

1371
00:57:33,440 --> 00:57:35,569
you pulling in third-party components

1372
00:57:35,569 --> 00:57:38,089
right you probably are do you trust them

1373
00:57:38,089 --> 00:57:39,829
have you read the are back policies have

1374
00:57:39,829 --> 00:57:41,779
you read are what secrets they're

1375
00:57:41,779 --> 00:57:42,710
storing

1376
00:57:42,710 --> 00:57:44,930
are there web app phones in those

1377
00:57:44,930 --> 00:57:46,670
products right so those are all the

1378
00:57:46,670 --> 00:57:49,569
questions that make this quite difficult

1379
00:57:49,569 --> 00:57:53,000
this is a really fun yeah from Duffy

1380
00:57:53,000 --> 00:57:54,769
Cooley I said Coleman earlier but Duffy

1381
00:57:54,769 --> 00:57:59,000
Cooley this is a one line container

1382
00:57:59,000 --> 00:58:01,369
breakout on a running kubernetes cluster

1383
00:58:01,369 --> 00:58:03,410
and if you don't have any of those

1384
00:58:03,410 --> 00:58:05,509
protections in place you become root on

1385
00:58:05,509 --> 00:58:07,400
the host operating system on the node

1386
00:58:07,400 --> 00:58:10,789
itself if you run this beware of blind

1387
00:58:10,789 --> 00:58:12,529
spots right there are too many blind

1388
00:58:12,529 --> 00:58:14,720
spots to enumerate here in this talk but

1389
00:58:14,720 --> 00:58:17,630
there are so many and there they're just

1390
00:58:17,630 --> 00:58:20,539
going to keep growing and we're all

1391
00:58:20,539 --> 00:58:23,420
beginners at kubernetes right I talk

1392
00:58:23,420 --> 00:58:25,069
about this stuff I have for a long time

1393
00:58:25,069 --> 00:58:28,190
and new things come out every day right

1394
00:58:28,190 --> 00:58:29,930
somebody mentions a new tool or a new

1395
00:58:29,930 --> 00:58:31,880
piece of the API or something going on

1396
00:58:31,880 --> 00:58:33,740
in the cluster that I just have to go

1397
00:58:33,740 --> 00:58:36,109
read up so we're all beginners in this

1398
00:58:36,109 --> 00:58:38,569
cloud native journey so we have to adapt

1399
00:58:38,569 --> 00:58:41,390
and evolve obviously and give back the

1400
00:58:41,390 --> 00:58:43,460
community in kubernetes is very very

1401
00:58:43,460 --> 00:58:44,000
warm

1402
00:58:44,000 --> 00:58:48,020
inviting for the most part and if we

1403
00:58:48,020 --> 00:58:51,020
need security people right I I wish I

1404
00:58:51,020 --> 00:58:52,880
gave back more that's why I'm here and

1405
00:58:52,880 --> 00:58:54,140
that's why I do a lot of conferences and

1406
00:58:54,140 --> 00:58:55,970
things but that we need security

1407
00:58:55,970 --> 00:58:57,950
representation and folks looking at this

1408
00:58:57,950 --> 00:59:01,190
stuff in detail and the future so

1409
00:59:01,190 --> 00:59:03,260
flexibility will still you know

1410
00:59:03,260 --> 00:59:05,119
overpower security and that's our

1411
00:59:05,119 --> 00:59:07,550
reality we have to embrace it so we have

1412
00:59:07,550 --> 00:59:09,349
to choose our own adventure

1413
00:59:09,349 --> 00:59:11,420
there will be more tools coming out

1414
00:59:11,420 --> 00:59:13,760
those are good but I'm not sure the

1415
00:59:13,760 --> 00:59:16,160
tools are gonna solve all our problems

1416
00:59:16,160 --> 00:59:18,470
tighter cloud integrations this will

1417
00:59:18,470 --> 00:59:20,330
happen it is happening use managed

1418
00:59:20,330 --> 00:59:22,820
kubernetes and gke it's very different

1419
00:59:22,820 --> 00:59:25,250
than rolling your own kubernetes and you

1420
00:59:25,250 --> 00:59:27,530
get some serious security benefit when

1421
00:59:27,530 --> 00:59:29,270
you start really tying into the cloud

1422
00:59:29,270 --> 00:59:30,550
but is that what you want

1423
00:59:30,550 --> 00:59:34,390
maturity is already seeing a big uptick

1424
00:59:34,390 --> 00:59:36,800
you know the big kind of security

1425
00:59:36,800 --> 00:59:39,560
problems are somewhat addressed in

1426
00:59:39,560 --> 00:59:41,180
kubernetes now it's up to us to make

1427
00:59:41,180 --> 00:59:44,930
those more mature and as we get better

1428
00:59:44,930 --> 00:59:47,930
obviously our adversaries will learn and

1429
00:59:47,930 --> 00:59:49,910
get better as well and kubernetes will

1430
00:59:49,910 --> 00:59:53,570
become more of a target so some practice

1431
00:59:53,570 --> 00:59:56,270
I have a very very early project called

1432
00:59:56,270 --> 00:59:58,280
cute goat it's a vulnerable kubernetes

1433
00:59:58,280 --> 01:00:00,170
cluster I'll paste a couple links also

1434
01:00:00,170 --> 01:00:03,190
into the slack of some resources but

1435
01:00:03,190 --> 01:00:05,270
there's lots of goat things you're a

1436
01:00:05,270 --> 01:00:07,670
goat things that help you test against

1437
01:00:07,670 --> 01:00:11,000
the kubernetes intentionally insecure

1438
01:00:11,000 --> 01:00:15,080
kubernetes environments hmm okay so hit

1439
01:00:15,080 --> 01:00:18,109
me up at Jim nest on Twitter Jimmy at ke

1440
01:00:18,109 --> 01:00:21,710
saath kaam it's been a pleasure I hope

1441
01:00:21,710 --> 01:00:23,359
that wasn't too fast I can't believe I

1442
01:00:23,359 --> 01:00:25,820
made it to the end thank you very much

1443
01:00:25,820 --> 01:00:28,220
and I hope to see you all around so

1444
01:00:28,220 --> 01:00:31,070
don't don't be shy and reach out if you

1445
01:00:31,070 --> 01:00:32,839
have any questions whatsoever sorry I

1446
01:00:32,839 --> 01:00:34,780
didn't get to your question earlier um

1447
01:00:34,780 --> 01:00:38,089
we could talk on chat later and I made

1448
01:00:38,089 --> 01:00:40,430
it 10:01 with him

1449
01:00:40,430 --> 01:00:42,800
well done and thank you so much Jimmy

1450
01:00:42,800 --> 01:00:44,359
that was amazing and I'm sure everyone

1451
01:00:44,359 --> 01:00:46,609
who is listening and enjoyed it as well

1452
01:00:46,609 --> 01:00:48,980
so huge thank you hopefully it won't be

1453
01:00:48,980 --> 01:00:50,750
the last time we have you on the skier

1454
01:00:50,750 --> 01:00:55,099
developer but a great first time right

1455
01:00:55,099 --> 01:00:57,250
so for everyone just

1456
01:00:57,250 --> 01:00:59,690
and maybe you listening to this post

1457
01:00:59,690 --> 01:01:01,940
live session please if you have any

1458
01:01:01,940 --> 01:01:03,440
questions from Toby he's part of our

1459
01:01:03,440 --> 01:01:05,630
select group so feel free to pop your

1460
01:01:05,630 --> 01:01:08,600
questions in at any point even if it's

1461
01:01:08,600 --> 01:01:11,060
the month or two in the future and I'm

1462
01:01:11,060 --> 01:01:12,620
sure you'll be happy to answer those as

1463
01:01:12,620 --> 01:01:14,870
well as on Twitter and a few other

1464
01:01:14,870 --> 01:01:17,330
places but thank you again if you

1465
01:01:17,330 --> 01:01:20,390
enjoyed it please share retweet tell the

1466
01:01:20,390 --> 01:01:22,100
world about it and as I said before if

1467
01:01:22,100 --> 01:01:23,210
there's anything you want to hear about

1468
01:01:23,210 --> 01:01:25,400
let me know this community is for you

1469
01:01:25,400 --> 01:01:28,640
not for me in other words me but let me

1470
01:01:28,640 --> 01:01:30,290
know we can find great speakers for you

1471
01:01:30,290 --> 01:01:31,880
our next section was actually sessions

1472
01:01:31,880 --> 01:01:33,650
actually in two weeks it's on the 10th

1473
01:01:33,650 --> 01:01:35,660
October I'm going to be talking about

1474
01:01:35,660 --> 01:01:38,720
automatic least privilege in AWS with

1475
01:01:38,720 --> 01:01:41,210
Travis McPeak from Netflix so please

1476
01:01:41,210 --> 01:01:44,300
join us for that and other than that I

1477
01:01:44,300 --> 01:01:46,850
hope you had a great day evening morning

1478
01:01:46,850 --> 01:01:48,380
wherever you are in the world and we'll

1479
01:01:48,380 --> 01:01:51,050
see you all again soon thanks again

1480
01:01:51,050 --> 01:01:55,210
Jimmy all right yep bye everyone

