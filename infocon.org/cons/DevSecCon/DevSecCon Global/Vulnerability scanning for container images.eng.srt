1
00:00:01,429 --> 00:00:05,839
great I think we live hi everyone and

2
00:00:05,839 --> 00:00:08,670
welcome to my dev shake ups if you're

3
00:00:08,670 --> 00:00:10,320
the you camp for the first time we're an

4
00:00:10,320 --> 00:00:12,389
inclusive community that aims to educate

5
00:00:12,389 --> 00:00:14,130
San enable developers and application

6
00:00:14,130 --> 00:00:15,990
security and today I'm joined by the

7
00:00:15,990 --> 00:00:18,750
lovely Liz rice who is the VP of open

8
00:00:18,750 --> 00:00:20,160
source engineering and container

9
00:00:20,160 --> 00:00:22,080
security specialist at aqua security so

10
00:00:22,080 --> 00:00:24,420
Highness hello thank you very much Sam

11
00:00:24,420 --> 00:00:25,830
and hi everyone

12
00:00:25,830 --> 00:00:29,250
same thing so and Liz will be talking

13
00:00:29,250 --> 00:00:30,689
about vulnerability scanning and

14
00:00:30,689 --> 00:00:32,279
container images but before we get

15
00:00:32,279 --> 00:00:33,390
started with that just want to introduce

16
00:00:33,390 --> 00:00:35,309
myself anyone that doesn't know me my

17
00:00:35,309 --> 00:00:36,600
name is Sam and I'm the community

18
00:00:36,600 --> 00:00:39,210
manager care and I also be on the slack

19
00:00:39,210 --> 00:00:40,379
channel if anyone's a member of that

20
00:00:40,379 --> 00:00:42,090
feeding questions across Tiller's so

21
00:00:42,090 --> 00:00:44,309
please keep your your in your questions

22
00:00:44,309 --> 00:00:47,460
and then we get the concert and anything

23
00:00:47,460 --> 00:00:49,110
you'd like to see in terms of sessions

24
00:00:49,110 --> 00:00:51,870
please feel free to tweet me dear me on

25
00:00:51,870 --> 00:00:54,420
on slack or email me those communities

26
00:00:54,420 --> 00:00:56,100
definitely for you I know most of us are

27
00:00:56,100 --> 00:00:57,780
currently on house arrest somewhere in

28
00:00:57,780 --> 00:01:03,149
the world link so a bit more time on my

29
00:01:03,149 --> 00:01:04,349
hands so please let me know if there's

30
00:01:04,349 --> 00:01:05,430
something you'd like to see in the next

31
00:01:05,430 --> 00:01:08,189
few weeks and selects actually the best

32
00:01:08,189 --> 00:01:09,479
place to interact today so if you're not

33
00:01:09,479 --> 00:01:11,369
a member if you pop on to my grave sick

34
00:01:11,369 --> 00:01:13,409
ops or IO you can find the link there

35
00:01:13,409 --> 00:01:15,150
join the slack and we're currently all

36
00:01:15,150 --> 00:01:17,580
chatting on the live sessions channel

37
00:01:17,580 --> 00:01:21,210
and you can also pop on that website to

38
00:01:21,210 --> 00:01:23,070
find all our previous sessions rewatch

39
00:01:23,070 --> 00:01:26,310
Liz the session today and obviously find

40
00:01:26,310 --> 00:01:29,970
all the contact details for us my

41
00:01:29,970 --> 00:01:31,740
district offices actually am supported

42
00:01:31,740 --> 00:01:33,240
and brought to you by sneaked their aim

43
00:01:33,240 --> 00:01:35,100
is to create a vendor-neutral community

44
00:01:35,100 --> 00:01:37,259
and to share knowledge a best practice

45
00:01:37,259 --> 00:01:39,869
so a huge thanks to them but that's

46
00:01:39,869 --> 00:01:41,369
enough for me I'm gonna hand over to Lou

47
00:01:41,369 --> 00:01:42,780
Solon's thank you so much again for

48
00:01:42,780 --> 00:01:45,869
being here thank you so much and hi

49
00:01:45,869 --> 00:01:47,850
everyone from your homes around the

50
00:01:47,850 --> 00:01:51,180
world I'm just gonna try and share my

51
00:01:51,180 --> 00:01:54,030
slides this works a second ago when we

52
00:01:54,030 --> 00:01:57,180
did a tech check so I think that looks

53
00:01:57,180 --> 00:01:59,540
like it's good yeah yeah your love life

54
00:01:59,540 --> 00:02:00,659
excellent

55
00:02:00,659 --> 00:02:03,479
yes so as Sam said and thank you very

56
00:02:03,479 --> 00:02:05,939
much Sam for the intro and if you do

57
00:02:05,939 --> 00:02:07,799
have any questions do you throw them

58
00:02:07,799 --> 00:02:09,810
into that snack Channel I really like

59
00:02:09,810 --> 00:02:11,530
interactive sessions event

60
00:02:11,530 --> 00:02:13,180
love you questions as we go along it's

61
00:02:13,180 --> 00:02:16,810
great yes so my name is Miss Rice I work

62
00:02:16,810 --> 00:02:18,310
with a company called aqua security

63
00:02:18,310 --> 00:02:21,280
where we help enterprises we have a

64
00:02:21,280 --> 00:02:23,530
platform for securing their cloud native

65
00:02:23,530 --> 00:02:26,770
deployments and one of the really

66
00:02:26,770 --> 00:02:29,790
important parts about securing your

67
00:02:29,790 --> 00:02:32,500
containerized or cloud native deployment

68
00:02:32,500 --> 00:02:35,410
is to make sure you're not running

69
00:02:35,410 --> 00:02:37,900
containers that contain known

70
00:02:37,900 --> 00:02:39,910
vulnerabilities so that's really what

71
00:02:39,910 --> 00:02:41,980
I'm going to concentrate on today I'm

72
00:02:41,980 --> 00:02:44,290
gonna talk a bit about what a

73
00:02:44,290 --> 00:02:46,959
vulnerability czar and a bit about how

74
00:02:46,959 --> 00:02:50,110
abilities scanners work and why they're

75
00:02:50,110 --> 00:02:52,120
so important and what I hope is that by

76
00:02:52,120 --> 00:02:54,550
the end of today's session you'll all be

77
00:02:54,550 --> 00:02:56,530
if you don't already have it you will be

78
00:02:56,530 --> 00:03:00,100
adding image scanning into your CI CD

79
00:03:00,100 --> 00:03:02,950
pipelines into your workflows because

80
00:03:02,950 --> 00:03:05,739
it's pretty easy to add and you get a

81
00:03:05,739 --> 00:03:09,340
big security benefit out of it all right

82
00:03:09,340 --> 00:03:17,260
so did I skip ok ok so what am I talking

83
00:03:17,260 --> 00:03:18,850
about when I talk about vulnerabilities

84
00:03:18,850 --> 00:03:23,230
this is all about floors bugs some kind

85
00:03:23,230 --> 00:03:25,360
of issue within the code that an

86
00:03:25,360 --> 00:03:29,500
attacker can exploit and cause something

87
00:03:29,500 --> 00:03:31,630
bad to happen potentially inside your

88
00:03:31,630 --> 00:03:36,790
system you have heard of some of these

89
00:03:36,790 --> 00:03:38,920
vulnerabilities some of the really

90
00:03:38,920 --> 00:03:41,230
really critical ones get so kind of

91
00:03:41,230 --> 00:03:44,380
famous they get their own logos so

92
00:03:44,380 --> 00:03:46,299
things like meltdown shellshock

93
00:03:46,299 --> 00:03:50,500
heartbleed and dirty cow you've probably

94
00:03:50,500 --> 00:03:52,959
heard of them if you've you know had any

95
00:03:52,959 --> 00:03:56,519
kind of involvement in software security

96
00:03:56,519 --> 00:03:59,470
but these are really just you know the

97
00:03:59,470 --> 00:04:02,640
tip of the iceberg these are the kind of

98
00:04:02,640 --> 00:04:06,390
bayon face and justin bieber's of the

99
00:04:06,390 --> 00:04:09,579
vulnerability world there are thousands

100
00:04:09,579 --> 00:04:11,769
of less well-known

101
00:04:11,769 --> 00:04:13,890
and probably less critical

102
00:04:13,890 --> 00:04:15,790
vulnerabilities that get discovered

103
00:04:15,790 --> 00:04:20,589
every year every one of these

104
00:04:20,589 --> 00:04:23,409
vulnerabilities gets given an identifier

105
00:04:23,409 --> 00:04:25,060
called a CVA

106
00:04:25,060 --> 00:04:27,730
so CVE stands for common vulnerabilities

107
00:04:27,730 --> 00:04:30,070
and exposures and see we have this

108
00:04:30,070 --> 00:04:33,940
lovely logo that I think 1994 is called

109
00:04:33,940 --> 00:04:36,220
and asked for it back but it's still

110
00:04:36,220 --> 00:04:40,960
that's the logo and so when the

111
00:04:40,960 --> 00:04:44,110
researcher finds a vulnerability in a

112
00:04:44,110 --> 00:04:46,690
piece of software they basically

113
00:04:46,690 --> 00:04:49,480
register that vulnerability and it gets

114
00:04:49,480 --> 00:04:53,020
this unique identifier and information

115
00:04:53,020 --> 00:04:56,130
about that vulnerability stored in a

116
00:04:56,130 --> 00:04:58,720
list called the national vulnerability

117
00:04:58,720 --> 00:05:01,750
database so you might hear the term CVE

118
00:05:01,750 --> 00:05:04,419
and NVD in the context of software

119
00:05:04,419 --> 00:05:09,550
vulnerabilities and the NVD lists has an

120
00:05:09,550 --> 00:05:12,220
entry for each of these vulnerabilities

121
00:05:12,220 --> 00:05:15,610
each of these CVS and the entry will

122
00:05:15,610 --> 00:05:19,510
tell you basically what is this this

123
00:05:19,510 --> 00:05:22,060
exploit what was it all about and what

124
00:05:22,060 --> 00:05:26,590
software packages does it affect so

125
00:05:26,590 --> 00:05:29,140
here's an example of a sort of extract

126
00:05:29,140 --> 00:05:30,880
for this is for the heartbleed

127
00:05:30,880 --> 00:05:33,640
vulnerability and it's telling us that

128
00:05:33,640 --> 00:05:37,300
this particular vulnerability will

129
00:05:37,300 --> 00:05:40,090
affect you if you're using the open ssl

130
00:05:40,090 --> 00:05:42,400
package and all of these different

131
00:05:42,400 --> 00:05:44,830
versions basically 1:01 all the way

132
00:05:44,830 --> 00:05:47,950
through to a 1 0 a 2 B 2 1 so all of

133
00:05:47,950 --> 00:05:50,729
those versions were affected if you're

134
00:05:50,729 --> 00:05:53,550
running with this version of open SSL

135
00:05:53,550 --> 00:05:57,669
you are in some danger because you've

136
00:05:57,669 --> 00:06:00,340
got this heartbleed exploit and an

137
00:06:00,340 --> 00:06:02,760
attacker could potentially take upon an

138
00:06:02,760 --> 00:06:04,930
advantage of that vulnerability in your

139
00:06:04,930 --> 00:06:09,910
system so we use vulnerability scanners

140
00:06:09,910 --> 00:06:11,890
to try to establish whether or not these

141
00:06:11,890 --> 00:06:15,580
vulnerabilities exist in in our system

142
00:06:15,580 --> 00:06:17,710
so that we can do something about it we

143
00:06:17,710 --> 00:06:19,770
can we can address those vulnerabilities

144
00:06:19,770 --> 00:06:21,940
there are lots of different types of

145
00:06:21,940 --> 00:06:25,120
vulnerability scanners and that term

146
00:06:25,120 --> 00:06:28,479
includes things like port scanning but

147
00:06:28,479 --> 00:06:30,130
really what I'm gonna talk about today

148
00:06:30,130 --> 00:06:33,310
I'm just gonna focus on looking for

149
00:06:33,310 --> 00:06:36,159
known vulnerabilities once a CBE

150
00:06:36,159 --> 00:06:38,560
identifiers in

151
00:06:38,560 --> 00:06:41,840
software packages installed in container

152
00:06:41,840 --> 00:06:42,380
images

153
00:06:42,380 --> 00:06:47,990
I said known vulnerabilities and those

154
00:06:47,990 --> 00:06:49,790
are the ones that have these CV

155
00:06:49,790 --> 00:06:52,850
identifiers assigned to them of course

156
00:06:52,850 --> 00:06:54,920
there could also be unknown

157
00:06:54,920 --> 00:06:56,870
vulnerabilities by which that you know

158
00:06:56,870 --> 00:06:59,660
they haven't been published there is no

159
00:06:59,660 --> 00:07:03,670
CVE maybe those are flaws in your own

160
00:07:03,670 --> 00:07:06,560
application code as a an enterprise

161
00:07:06,560 --> 00:07:09,440
operating application code you could

162
00:07:09,440 --> 00:07:12,680
have your own unique set of software

163
00:07:12,680 --> 00:07:15,170
bugs in your unique software and maybe

164
00:07:15,170 --> 00:07:18,230
those flaws could be taken advantage of

165
00:07:18,230 --> 00:07:21,080
by an attacker those are essentially

166
00:07:21,080 --> 00:07:24,740
unknown to any vulnerability scanner so

167
00:07:24,740 --> 00:07:26,630
the scanners that I'm talking about

168
00:07:26,630 --> 00:07:30,710
today it's no one's we're really

169
00:07:30,710 --> 00:07:32,570
interested in but of course the known

170
00:07:32,570 --> 00:07:34,640
ones are the ones that attackers know

171
00:07:34,640 --> 00:07:37,820
about - so they're the ones that squits

172
00:07:37,820 --> 00:07:39,650
you know on the Internet are constantly

173
00:07:39,650 --> 00:07:44,360
trying to take advantage of so these

174
00:07:44,360 --> 00:07:47,930
known vulnerabilities it's basically you

175
00:07:47,930 --> 00:07:49,490
can have a scanner that will identify

176
00:07:49,490 --> 00:07:51,740
whether or not you're running with these

177
00:07:51,740 --> 00:07:53,960
packages that contain known

178
00:07:53,960 --> 00:07:58,540
vulnerabilities there are also tools for

179
00:07:58,540 --> 00:08:00,320
looking for these unknown

180
00:08:00,320 --> 00:08:02,240
vulnerabilities so things like fuzzers

181
00:08:02,240 --> 00:08:07,040
Oh what tools here they're they're

182
00:08:07,040 --> 00:08:09,110
designed to look for these unknown

183
00:08:09,110 --> 00:08:11,600
vulnerabilities or to attempt to do the

184
00:08:11,600 --> 00:08:15,940
kind of things that maybe might be

185
00:08:15,940 --> 00:08:18,230
permitted because of an unknown

186
00:08:18,230 --> 00:08:20,840
vulnerability the known ones are

187
00:08:20,840 --> 00:08:23,620
specifically looking for known

188
00:08:23,620 --> 00:08:27,170
vulnerable packages there's a handful of

189
00:08:27,170 --> 00:08:29,270
different ones I've listed there this

190
00:08:29,270 --> 00:08:31,130
there are many more vulnerability

191
00:08:31,130 --> 00:08:32,960
scanners out there I'll talk a bit about

192
00:08:32,960 --> 00:08:34,280
the kind of things you might want to

193
00:08:34,280 --> 00:08:37,250
look for in in different vulnerability

194
00:08:37,250 --> 00:08:38,870
scanners some of them are open source

195
00:08:38,870 --> 00:08:41,360
some of them are commercial that the

196
00:08:41,360 --> 00:08:43,570
choice is yours

197
00:08:43,570 --> 00:08:46,850
so really what we're doing when we have

198
00:08:46,850 --> 00:08:50,230
a container image that we want to scan

199
00:08:50,230 --> 00:08:51,779
imagine that image

200
00:08:51,779 --> 00:08:54,959
stored in its image registry I'm going

201
00:08:54,959 --> 00:08:57,779
to extract that image and run it in a

202
00:08:57,779 --> 00:09:00,240
deployment somewhere and it would be a

203
00:09:00,240 --> 00:09:02,790
very good idea that if that image has us

204
00:09:02,790 --> 00:09:05,610
has a vulnerability in it before we

205
00:09:05,610 --> 00:09:09,779
deploy it we want to be able to check

206
00:09:09,779 --> 00:09:12,689
for that and stop it from running we

207
00:09:12,689 --> 00:09:15,300
also want to know that if a new

208
00:09:15,300 --> 00:09:17,970
vulnerability gets uncovered because

209
00:09:17,970 --> 00:09:20,339
phoner abilities can be found new

210
00:09:20,339 --> 00:09:22,110
vulnerabilities might be identified in

211
00:09:22,110 --> 00:09:26,220
existing code then we need to know which

212
00:09:26,220 --> 00:09:28,110
of our running containers have that

213
00:09:28,110 --> 00:09:30,990
vulnerability so we might have already

214
00:09:30,990 --> 00:09:33,149
deployed that container it's already

215
00:09:33,149 --> 00:09:34,800
we've got containers running with that

216
00:09:34,800 --> 00:09:36,990
vulnerability we need to be able to

217
00:09:36,990 --> 00:09:40,019
identify those stop them and replace

218
00:09:40,019 --> 00:09:42,420
them with a new version of the image it

219
00:09:42,420 --> 00:09:45,209
doesn't have that vulnerability so we

220
00:09:45,209 --> 00:09:47,040
would typically want to have a scanning

221
00:09:47,040 --> 00:09:48,809
step every time we get in an image out

222
00:09:48,809 --> 00:09:50,819
the registry just make sure that it's or

223
00:09:50,819 --> 00:09:52,949
at least on a regular basis make sure

224
00:09:52,949 --> 00:09:55,410
that that image does not have known

225
00:09:55,410 --> 00:09:58,439
vulnerabilities if we find one we need

226
00:09:58,439 --> 00:10:01,259
to replace that container with a version

227
00:10:01,259 --> 00:10:08,699
that doesn't have that issue so this

228
00:10:08,699 --> 00:10:11,129
vulnerability scanning step it's going

229
00:10:11,129 --> 00:10:13,889
to look inside the container image find

230
00:10:13,889 --> 00:10:15,660
out which software packages are

231
00:10:15,660 --> 00:10:17,730
contained in that image so packages like

232
00:10:17,730 --> 00:10:21,689
open SSL look at the version of that

233
00:10:21,689 --> 00:10:24,660
package check whether or not that

234
00:10:24,660 --> 00:10:27,240
version of that package has a name

235
00:10:27,240 --> 00:10:30,000
vulnerability and if it does it will

236
00:10:30,000 --> 00:10:32,550
report that vulnerability and that

237
00:10:32,550 --> 00:10:34,019
sounds super easy right because we've

238
00:10:34,019 --> 00:10:36,360
got a vulnerability database we can look

239
00:10:36,360 --> 00:10:37,800
inside the container image for these

240
00:10:37,800 --> 00:10:39,629
packages we should just be able to

241
00:10:39,629 --> 00:10:41,519
compare the two so why is this a big

242
00:10:41,519 --> 00:10:43,829
deal why is this hard we'll talk about

243
00:10:43,829 --> 00:10:47,569
that it all comes down to the fact that

244
00:10:47,569 --> 00:10:50,429
there are different distributions that

245
00:10:50,429 --> 00:10:52,589
handle different software packages in

246
00:10:52,589 --> 00:10:58,769
different ways so for most of us we're

247
00:10:58,769 --> 00:11:01,769
talking about Linux containers windows

248
00:11:01,769 --> 00:11:02,560
containers is

249
00:11:02,560 --> 00:11:05,380
thing but for most of us were really

250
00:11:05,380 --> 00:11:08,250
talking about images based on Linux and

251
00:11:08,250 --> 00:11:10,680
those images can use different

252
00:11:10,680 --> 00:11:14,410
distributions of Linux so the Linux

253
00:11:14,410 --> 00:11:16,930
kernel is one thing there are different

254
00:11:16,930 --> 00:11:18,790
versions of it but it's essentially one

255
00:11:18,790 --> 00:11:24,610
product that gets released but there are

256
00:11:24,610 --> 00:11:26,830
lots of different distributions built on

257
00:11:26,830 --> 00:11:30,310
top of that kernel so lots of us you

258
00:11:30,310 --> 00:11:31,630
know will have come across these

259
00:11:31,630 --> 00:11:34,420
different versions like Ubuntu or Suzy

260
00:11:34,420 --> 00:11:36,760
Linux or maybe Amazon Linux if you're

261
00:11:36,760 --> 00:11:43,750
using the Amazon ec2 machines there are

262
00:11:43,750 --> 00:11:45,640
many different I don't know how many

263
00:11:45,640 --> 00:11:47,200
probably dozens of different

264
00:11:47,200 --> 00:11:51,750
distributions of Linux out there and

265
00:11:51,750 --> 00:11:54,040
they they have these different

266
00:11:54,040 --> 00:11:55,779
components that they bring together and

267
00:11:55,779 --> 00:11:57,100
they also have different philosophies

268
00:11:57,100 --> 00:12:00,490
about how they manage the distribution

269
00:12:00,490 --> 00:12:03,660
and that affects the way that

270
00:12:03,660 --> 00:12:08,260
vulnerabilities get found so for example

271
00:12:08,260 --> 00:12:11,170
and here's a selection of a few

272
00:12:11,170 --> 00:12:14,740
different Linux distributions they have

273
00:12:14,740 --> 00:12:16,990
different gooeys they might have

274
00:12:16,990 --> 00:12:20,130
different default shells installed

275
00:12:20,130 --> 00:12:23,370
importantly for us they have different

276
00:12:23,370 --> 00:12:26,290
default package managers the package

277
00:12:26,290 --> 00:12:28,510
manager makes a difference to how we

278
00:12:28,510 --> 00:12:30,940
handle these vulnerabilities because

279
00:12:30,940 --> 00:12:32,560
we're looking for vulnerabilities in

280
00:12:32,560 --> 00:12:35,140
software packages installed by these

281
00:12:35,140 --> 00:12:37,720
package managers so doesn't really

282
00:12:37,720 --> 00:12:39,190
matter what all the individual details

283
00:12:39,190 --> 00:12:42,810
in this table are the point is that they

284
00:12:42,810 --> 00:12:46,260
distribute different components and

285
00:12:46,260 --> 00:12:48,760
particularly in that last line we talked

286
00:12:48,760 --> 00:12:50,740
about the release model they have

287
00:12:50,740 --> 00:12:52,510
different philosophies about how

288
00:12:52,510 --> 00:12:57,220
frequently they all do updates whether

289
00:12:57,220 --> 00:13:00,279
or not they do package updates

290
00:13:00,279 --> 00:13:02,380
frequently or wait for us a major

291
00:13:02,380 --> 00:13:04,750
release app on a known schedule every

292
00:13:04,750 --> 00:13:09,870
three months or every six months and

293
00:13:09,870 --> 00:13:12,730
these container images that we have

294
00:13:12,730 --> 00:13:15,939
could be based on different

295
00:13:15,939 --> 00:13:18,849
provisions you know so EU a lot of us

296
00:13:18,849 --> 00:13:20,709
might be running on a host machine that

297
00:13:20,709 --> 00:13:23,859
runs one or a set of host machines that

298
00:13:23,859 --> 00:13:26,109
run one distribution of Linux but the

299
00:13:26,109 --> 00:13:27,999
container images could be running

300
00:13:27,999 --> 00:13:31,119
different distributions alpine is a

301
00:13:31,119 --> 00:13:32,709
great example is that relatively

302
00:13:32,709 --> 00:13:34,839
stripped-down distribution so a lot of

303
00:13:34,839 --> 00:13:38,229
container images are based on alpine the

304
00:13:38,229 --> 00:13:40,720
packages that are installed into those

305
00:13:40,720 --> 00:13:43,829
container images are probably using

306
00:13:43,829 --> 00:13:48,279
Alpine package management called apk and

307
00:13:48,279 --> 00:13:52,299
they will follow those apk distributions

308
00:13:52,299 --> 00:13:54,970
of packages and those are handled quite

309
00:13:54,970 --> 00:13:57,009
differently from the way that let us say

310
00:13:57,009 --> 00:14:00,369
Debian handles packages and updates to

311
00:14:00,369 --> 00:14:04,389
packages so let's drill down a little

312
00:14:04,389 --> 00:14:06,549
bit more into these different approaches

313
00:14:06,549 --> 00:14:11,379
to handling software packages let's say

314
00:14:11,379 --> 00:14:13,329
there is some software package that were

315
00:14:13,329 --> 00:14:14,829
interested in maybe we could be talking

316
00:14:14,829 --> 00:14:17,589
about open SSL that I had in my example

317
00:14:17,589 --> 00:14:20,039
before or we could be talking about

318
00:14:20,039 --> 00:14:22,419
essentially any package that you might

319
00:14:22,419 --> 00:14:26,769
install with a package manager and those

320
00:14:26,769 --> 00:14:29,439
packages they probably come from some

321
00:14:29,439 --> 00:14:32,439
source code written by some developers

322
00:14:32,439 --> 00:14:34,929
who may have no particular relationship

323
00:14:34,929 --> 00:14:39,179
with a particular Linux distribution

324
00:14:39,179 --> 00:14:42,970
those developers create a binary

325
00:14:42,970 --> 00:14:45,459
distribution they work on that code and

326
00:14:45,459 --> 00:14:48,639
they release that code but there's often

327
00:14:48,639 --> 00:14:52,919
going to be a version of those packages

328
00:14:52,919 --> 00:14:55,779
developed for different Linux

329
00:14:55,779 --> 00:14:57,639
distributions I'm just noticed that for

330
00:14:57,639 --> 00:15:00,999
some reason my arrow has an arrow that

331
00:15:00,999 --> 00:15:03,399
has shifted up on this slide so should

332
00:15:03,399 --> 00:15:05,169
be an area between compiled and packaged

333
00:15:05,169 --> 00:15:09,729
and package repository so the

334
00:15:09,729 --> 00:15:13,779
distribution maintainer x' will take

335
00:15:13,779 --> 00:15:17,529
that source code now they might take the

336
00:15:17,529 --> 00:15:19,059
binary distribution but oftentimes

337
00:15:19,059 --> 00:15:22,329
they'll take the source code compile it

338
00:15:22,329 --> 00:15:24,039
themselves package it up in the

339
00:15:24,039 --> 00:15:28,109
particular package management for their

340
00:15:28,540 --> 00:15:33,790
for their distribution and they'll store

341
00:15:33,790 --> 00:15:36,940
it in a repository so these different

342
00:15:36,940 --> 00:15:39,240
distributions have their own different

343
00:15:39,240 --> 00:15:44,140
package repositories and they may do

344
00:15:44,140 --> 00:15:47,140
different things they may take different

345
00:15:47,140 --> 00:15:50,380
choices as they build those packages and

346
00:15:50,380 --> 00:15:51,870
put them in their different package

347
00:15:51,870 --> 00:15:55,920
repositories so for example a

348
00:15:55,920 --> 00:15:58,000
distribution the distribution maintainer

349
00:15:58,000 --> 00:16:00,970
might decide to enable or disable

350
00:16:00,970 --> 00:16:03,670
particular features in the package they

351
00:16:03,670 --> 00:16:05,530
might decide that they're going to link

352
00:16:05,530 --> 00:16:07,900
with those packages based on certain

353
00:16:07,900 --> 00:16:10,240
releases of underlying dependency

354
00:16:10,240 --> 00:16:14,620
libraries they might repackage these

355
00:16:14,620 --> 00:16:18,490
packages all together and then we get

356
00:16:18,490 --> 00:16:19,510
into the things that are really

357
00:16:19,510 --> 00:16:21,160
important to us from our vulnerability

358
00:16:21,160 --> 00:16:23,530
perspective which is how they handle

359
00:16:23,530 --> 00:16:29,260
patches and bug fixes so the upstream

360
00:16:29,260 --> 00:16:32,560
developers are making changes and fixes

361
00:16:32,560 --> 00:16:35,530
to their software and some set of those

362
00:16:35,530 --> 00:16:38,340
changes and fixes will be to fix

363
00:16:38,340 --> 00:16:40,960
software vulnerabilities so if a

364
00:16:40,960 --> 00:16:44,850
researcher finds a vulnerability they

365
00:16:44,850 --> 00:16:47,500
disclose it to the developers and the

366
00:16:47,500 --> 00:16:51,340
developers create a fix to to patch that

367
00:16:51,340 --> 00:16:53,380
that vulnerability so basically render

368
00:16:53,380 --> 00:16:57,820
that vulnerability non-existent so

369
00:16:57,820 --> 00:17:00,220
somewhere there's a code change or a set

370
00:17:00,220 --> 00:17:03,190
of code changes in some software that

371
00:17:03,190 --> 00:17:05,380
needs to be built into that package just

372
00:17:05,380 --> 00:17:09,490
to remove the vulnerability the

373
00:17:09,490 --> 00:17:13,210
distribution already has a package with

374
00:17:13,210 --> 00:17:14,740
the vulnerability and now they have to

375
00:17:14,740 --> 00:17:16,240
decide how they're going to handle that

376
00:17:16,240 --> 00:17:18,670
fix and for example are they going to

377
00:17:18,670 --> 00:17:21,069
cherry-pick just that fix are they going

378
00:17:21,069 --> 00:17:23,200
to take a new release of that package

379
00:17:23,200 --> 00:17:26,859
and that's kind of up to the

380
00:17:26,859 --> 00:17:30,300
distribution maintainer x' to decide how

381
00:17:30,300 --> 00:17:34,390
they're going to handle that and I just

382
00:17:34,390 --> 00:17:36,790
saw a really great question coming in

383
00:17:36,790 --> 00:17:39,070
I've got the the slack in front of me

384
00:17:39,070 --> 00:17:40,600
and I just saw the question saying is

385
00:17:40,600 --> 00:17:40,860
there

386
00:17:40,860 --> 00:17:42,570
a website that announces the new

387
00:17:42,570 --> 00:17:46,020
vulnerabilities and their severity so I

388
00:17:46,020 --> 00:17:50,600
will show in shortly about how there are

389
00:17:50,600 --> 00:17:53,850
distribution specific websites or

390
00:17:53,850 --> 00:17:58,650
sources and there are also there is the

391
00:17:58,650 --> 00:18:01,440
MVD so that NVD website which has

392
00:18:01,440 --> 00:18:03,799
updates every time there are new

393
00:18:03,799 --> 00:18:06,080
vulnerabilities

394
00:18:06,080 --> 00:18:09,299
sometimes the nvd and the distributions

395
00:18:09,299 --> 00:18:11,370
don't even agree on what the severity is

396
00:18:11,370 --> 00:18:16,230
so that's interesting so depending on

397
00:18:16,230 --> 00:18:19,070
which distribution you're using the

398
00:18:19,070 --> 00:18:21,450
updated version of the package you get

399
00:18:21,450 --> 00:18:25,410
with a fix for a vulnerability might be

400
00:18:25,410 --> 00:18:27,540
it might be a whole new release or it

401
00:18:27,540 --> 00:18:30,390
might be a patch and different

402
00:18:30,390 --> 00:18:32,910
distributions might create different

403
00:18:32,910 --> 00:18:34,500
patches to address the same

404
00:18:34,500 --> 00:18:39,240
vulnerability so for example taking

405
00:18:39,240 --> 00:18:42,540
Debian they very much focus on stability

406
00:18:42,540 --> 00:18:46,200
they release infrequently and they try

407
00:18:46,200 --> 00:18:50,090
to take the minimal amount of change for

408
00:18:50,090 --> 00:18:53,940
required to to patch security issues so

409
00:18:53,940 --> 00:18:57,660
that as a general philosophy they they

410
00:18:57,660 --> 00:19:00,840
were rarely if ever update a package to

411
00:19:00,840 --> 00:19:03,210
its latest version its latest operating

412
00:19:03,210 --> 00:19:05,340
version to address a vulnerability they

413
00:19:05,340 --> 00:19:07,740
would rather just apply the patch

414
00:19:07,740 --> 00:19:09,330
cherry-pick the patch for that

415
00:19:09,330 --> 00:19:11,910
particular issue and they might need to

416
00:19:11,910 --> 00:19:15,720
do some back porting to apply that fix

417
00:19:15,720 --> 00:19:19,110
to older versions that they're still

418
00:19:19,110 --> 00:19:21,870
supporting

419
00:19:21,870 --> 00:19:26,710
so you need to know whether or not your

420
00:19:26,710 --> 00:19:30,160
package has that patch in order to know

421
00:19:30,160 --> 00:19:32,940
whether it's got that vulnerability

422
00:19:32,940 --> 00:19:36,120
we'll take an example here this is

423
00:19:36,120 --> 00:19:37,990
doesn't really matter what the

424
00:19:37,990 --> 00:19:41,410
vulnerability is here but oh I've gone

425
00:19:41,410 --> 00:19:44,049
skip to trot forward by moving my mouse

426
00:19:44,049 --> 00:19:45,160
all right there we go

427
00:19:45,160 --> 00:19:50,190
and so this particular vulnerability in

428
00:19:50,190 --> 00:19:55,590
a varnish HTTP cache package and it

429
00:19:55,590 --> 00:19:58,929
exists according to the NVD it exists in

430
00:19:58,929 --> 00:20:02,860
all the versions between I think it's

431
00:20:02,860 --> 00:20:04,450
actually the enemy will tell us it was

432
00:20:04,450 --> 00:20:10,840
between $4 0.0 and 5.2 so actually

433
00:20:10,840 --> 00:20:12,039
there's conflicting information on that

434
00:20:12,039 --> 00:20:15,610
slide so I'm I'm doubting myself now but

435
00:20:15,610 --> 00:20:18,190
one of those things is true I live

436
00:20:18,190 --> 00:20:24,010
between 4.1 and 5.2 or 4.0 and 5.2 okay

437
00:20:24,010 --> 00:20:27,970
so that's what the NVD says that's the

438
00:20:27,970 --> 00:20:30,010
essentially based on the upstream

439
00:20:30,010 --> 00:20:32,860
version of the package and now let's

440
00:20:32,860 --> 00:20:35,159
look at what Debian say about the same

441
00:20:35,159 --> 00:20:42,640
issue so this is the what they would say

442
00:20:42,640 --> 00:20:45,700
the it's the Debian security advisory

443
00:20:45,700 --> 00:20:48,720
about this particular and vulnerability

444
00:20:48,720 --> 00:20:50,919
so the question that came up earlier

445
00:20:50,919 --> 00:20:53,530
about the website that announces these

446
00:20:53,530 --> 00:20:56,470
new vulnerabilities this is the

447
00:20:56,470 --> 00:21:00,250
distribution specific website for Debian

448
00:21:00,250 --> 00:21:05,919
what's an extract from and what it's

449
00:21:05,919 --> 00:21:09,370
saying is for the versions of the

450
00:21:09,370 --> 00:21:11,559
varnish package that Debian we're

451
00:21:11,559 --> 00:21:13,270
maintaining at the point that I took

452
00:21:13,270 --> 00:21:17,289
this screenshot they apply patches to

453
00:21:17,289 --> 00:21:21,250
each of those versions so 3.0.2 4.0.2

454
00:21:21,250 --> 00:21:26,380
and v dot 0 dot 0 and you would have

455
00:21:26,380 --> 00:21:29,140
expected from the information on the

456
00:21:29,140 --> 00:21:33,580
previous slide that v dot 0 dot 0 would

457
00:21:33,580 --> 00:21:35,360
be a vulnerable

458
00:21:35,360 --> 00:21:38,510
if all you looked at was the NVD

459
00:21:38,510 --> 00:21:40,480
information and you looked at that

460
00:21:40,480 --> 00:21:43,190
package version number you'd probably

461
00:21:43,190 --> 00:21:45,380
think it was vulnerable you have to have

462
00:21:45,380 --> 00:21:48,440
come and looked at this distribution

463
00:21:48,440 --> 00:21:50,570
information so know that I know if

464
00:21:50,570 --> 00:21:52,700
you've got this patch it's okay this is

465
00:21:52,700 --> 00:21:57,200
a fixed version so the scanner your

466
00:21:57,200 --> 00:21:59,180
vulnerability scanner would need to be

467
00:21:59,180 --> 00:22:01,790
looking at this information source as

468
00:22:01,790 --> 00:22:04,910
well as the NVD if it was scanning a

469
00:22:04,910 --> 00:22:07,780
Debian image

470
00:22:08,090 --> 00:22:12,410
another example is Alpine here so and

471
00:22:12,410 --> 00:22:14,720
I'm getting I'm gonna have to try and

472
00:22:14,720 --> 00:22:17,540
move my mouse to something is obscuring

473
00:22:17,540 --> 00:22:20,480
my screen and they need to okay

474
00:22:20,480 --> 00:22:26,540
apologies for the baton and there we go

475
00:22:26,540 --> 00:22:32,210
right so this particular release of the

476
00:22:32,210 --> 00:22:40,150
busybox package in Alpine there's a few

477
00:22:40,150 --> 00:22:43,970
high severity and medium severity ulnar

478
00:22:43,970 --> 00:22:46,460
abilities in that particular release

479
00:22:46,460 --> 00:22:55,730
1.20 7.2 if you look at the this is the

480
00:22:55,730 --> 00:22:59,990
kind of build record that the contents

481
00:22:59,990 --> 00:23:03,410
of what the Alpine distribution put into

482
00:23:03,410 --> 00:23:08,390
busybox 1.20 7.2 and it actually has

483
00:23:08,390 --> 00:23:10,400
these patches for the known

484
00:23:10,400 --> 00:23:13,880
vulnerabilities applied so for example

485
00:23:13,880 --> 00:23:16,760
the first on that list is CDE twenty

486
00:23:16,760 --> 00:23:20,840
seventeen sixteen five four four if I go

487
00:23:20,840 --> 00:23:22,280
back and look at the previous one that's

488
00:23:22,280 --> 00:23:26,210
the top one in my list so this

489
00:23:26,210 --> 00:23:28,580
vulnerability exists in the base image

490
00:23:28,580 --> 00:23:32,900
for one door 27.2 but the Alpine

491
00:23:32,900 --> 00:23:35,630
maintainer applied a patch in order to

492
00:23:35,630 --> 00:23:38,120
fix that particular vulnerability and

493
00:23:38,120 --> 00:23:42,470
the other two on that previous list what

494
00:23:42,470 --> 00:23:45,470
we can also see from this alpine record

495
00:23:45,470 --> 00:23:48,410
of what went into their busybox package

496
00:23:48,410 --> 00:23:54,140
is another set of patches that for

497
00:23:54,140 --> 00:23:56,060
whatever reason from probably very good

498
00:23:56,060 --> 00:23:58,340
reasons that our point maintained is

499
00:23:58,340 --> 00:24:02,900
made to that particular package they

500
00:24:02,900 --> 00:24:04,490
could be great they can be perfect

501
00:24:04,490 --> 00:24:07,370
patches they can be flawless but there's

502
00:24:07,370 --> 00:24:09,970
there's no way of knowing and there's no

503
00:24:09,970 --> 00:24:12,880
because those patches are not known to

504
00:24:12,880 --> 00:24:18,710
nvd there's no way for the nvd record to

505
00:24:18,710 --> 00:24:21,200
reflect any vulnerabilities that might

506
00:24:21,200 --> 00:24:23,210
be in that patch you'd have to rely on

507
00:24:23,210 --> 00:24:25,160
the Alpine maintainer sharing

508
00:24:25,160 --> 00:24:28,430
information about any vulnerabilities in

509
00:24:28,430 --> 00:24:30,680
that kind of Alpine specific set of

510
00:24:30,680 --> 00:24:33,950
patches and of course these records are

511
00:24:33,950 --> 00:24:35,720
happening for all the thousands of

512
00:24:35,720 --> 00:24:38,270
different packages that exist you know

513
00:24:38,270 --> 00:24:40,040
in the world and all the different

514
00:24:40,040 --> 00:24:43,460
variant variations of those packages for

515
00:24:43,460 --> 00:24:45,620
different distributions there's a lot of

516
00:24:45,620 --> 00:24:48,920
information out there required to do

517
00:24:48,920 --> 00:24:53,480
vulnerability scanning and I've just

518
00:24:53,480 --> 00:24:55,370
been talking about these package moment

519
00:24:55,370 --> 00:24:57,440
these packages that get installed by a

520
00:24:57,440 --> 00:25:01,190
system package manager like a PT or a PK

521
00:25:01,190 --> 00:25:06,380
you're young there are specific to the

522
00:25:06,380 --> 00:25:11,380
Linux distribution and for a lot of

523
00:25:11,380 --> 00:25:14,780
container image scanners that's that's

524
00:25:14,780 --> 00:25:18,290
all they'll scan for and that's a lot

525
00:25:18,290 --> 00:25:23,050
but this is where the majority of

526
00:25:23,050 --> 00:25:26,360
serious software vulnerabilities come

527
00:25:26,360 --> 00:25:29,620
through these operating system packages

528
00:25:29,620 --> 00:25:32,180
there are two other places in which

529
00:25:32,180 --> 00:25:35,570
software can get sort of installed into

530
00:25:35,570 --> 00:25:38,180
your into your container or onto a

531
00:25:38,180 --> 00:25:42,320
server comes of that language specific

532
00:25:42,320 --> 00:25:45,380
or application package managers so for

533
00:25:45,380 --> 00:25:47,450
example for node if you're writing in

534
00:25:47,450 --> 00:25:49,610
node E might be installing dependencies

535
00:25:49,610 --> 00:25:52,280
with NPM if you're writing in Python you

536
00:25:52,280 --> 00:25:55,250
might be installing dependencies using

537
00:25:55,250 --> 00:25:58,310
pet and there can be software

538
00:25:58,310 --> 00:26:01,480
vulnerabilities in

539
00:26:01,549 --> 00:26:04,009
in those dependencies as well any

540
00:26:04,009 --> 00:26:06,259
software could have an exploitable flaw

541
00:26:06,259 --> 00:26:06,799
in it

542
00:26:06,799 --> 00:26:11,090
theoretically so some image scanners

543
00:26:11,090 --> 00:26:13,940
will also look at security advisories

544
00:26:13,940 --> 00:26:17,720
related to these application packages

545
00:26:17,720 --> 00:26:19,549
the programming language specific

546
00:26:19,549 --> 00:26:26,259
packages the third set of ways that

547
00:26:26,259 --> 00:26:29,350
software can get into your container is

548
00:26:29,350 --> 00:26:32,330
what I've called herself installation so

549
00:26:32,330 --> 00:26:34,700
some other manual way of getting

550
00:26:34,700 --> 00:26:36,919
software into you into a container into

551
00:26:36,919 --> 00:26:40,190
container image or into a server for

552
00:26:40,190 --> 00:26:42,559
example manually copying files or

553
00:26:42,559 --> 00:26:46,279
running make those things much harder to

554
00:26:46,279 --> 00:26:48,100
scan certainly won't come under the

555
00:26:48,100 --> 00:26:53,720
class of known vulnerabilities but when

556
00:26:53,720 --> 00:26:55,570
we talk about container image scanners

557
00:26:55,570 --> 00:26:59,029
generally speaking they will cover item

558
00:26:59,029 --> 00:27:01,239
one here's their system packages and

559
00:27:01,239 --> 00:27:03,230
sometimes they will also cover

560
00:27:03,230 --> 00:27:05,330
application packages such as I didn't

561
00:27:05,330 --> 00:27:10,309
see here all right so I think I've we'll

562
00:27:10,309 --> 00:27:13,940
talk a little bit more about scanners so

563
00:27:13,940 --> 00:27:16,970
what are we looking for in a scanner go

564
00:27:16,970 --> 00:27:18,230
ahead of myself I thought it was going

565
00:27:18,230 --> 00:27:19,970
to show you some actual scan results

566
00:27:19,970 --> 00:27:24,109
there and when you're picking an image

567
00:27:24,109 --> 00:27:26,809
scanner there are many of them out there

568
00:27:26,809 --> 00:27:29,899
and as I said before some of them I can

569
00:27:29,899 --> 00:27:33,609
saw some of them are commercial and I

570
00:27:33,609 --> 00:27:35,720
wanted to just kind of run through some

571
00:27:35,720 --> 00:27:37,309
of the things that you want to look for

572
00:27:37,309 --> 00:27:39,730
in an image scanner

573
00:27:39,730 --> 00:27:44,149
kind of an obvious thing is that you

574
00:27:44,149 --> 00:27:48,220
wanted to detect a vulnerability x' and

575
00:27:48,220 --> 00:27:51,980
depending on which linux distributions

576
00:27:51,980 --> 00:27:53,779
you're using and which programming

577
00:27:53,779 --> 00:27:56,149
languages you're using you want to make

578
00:27:56,149 --> 00:27:58,309
sure you've got support for those in the

579
00:27:58,309 --> 00:28:00,259
image scanner that you're using if your

580
00:28:00,259 --> 00:28:03,529
scanner doesn't look at let's take

581
00:28:03,529 --> 00:28:06,619
debian as an example if you're using

582
00:28:06,619 --> 00:28:09,470
Debian based container images you need

583
00:28:09,470 --> 00:28:10,970
to make sure your scanner supports that

584
00:28:10,970 --> 00:28:13,429
I think they all do but maybe if you'll

585
00:28:13,429 --> 00:28:14,480
be using something a bit

586
00:28:14,480 --> 00:28:17,810
esoteric check that your scanner

587
00:28:17,810 --> 00:28:20,690
supports all the base images that you're

588
00:28:20,690 --> 00:28:25,790
using you also want to look for high

589
00:28:25,790 --> 00:28:28,190
accuracy so one of the complaints that

590
00:28:28,190 --> 00:28:32,840
people make about vulnerability scanning

591
00:28:32,840 --> 00:28:35,510
is that because you get you've got lots

592
00:28:35,510 --> 00:28:37,310
and lots of images and there are lots

593
00:28:37,310 --> 00:28:39,290
and lots of packages in those images and

594
00:28:39,290 --> 00:28:41,180
there are lots of potential

595
00:28:41,180 --> 00:28:44,180
vulnerabilities in all of those packages

596
00:28:44,180 --> 00:28:46,250
you can end up with a giant set of

597
00:28:46,250 --> 00:28:50,570
results and it can be hard to manage it

598
00:28:50,570 --> 00:28:52,220
could be hard to understand whether some

599
00:28:52,220 --> 00:28:57,860
of those are false positives it can be a

600
00:28:57,860 --> 00:28:59,900
bit of a flood of information so you

601
00:28:59,900 --> 00:29:02,710
really want to have accurate scanning

602
00:29:02,710 --> 00:29:06,350
make sure that it is pulling data from

603
00:29:06,350 --> 00:29:09,230
the from the relevant security

604
00:29:09,230 --> 00:29:14,360
advisories sometimes upstream software

605
00:29:14,360 --> 00:29:15,740
vendors will also have security

606
00:29:15,740 --> 00:29:19,190
advisories there are lots of different

607
00:29:19,190 --> 00:29:21,860
sources and generally speaking the more

608
00:29:21,860 --> 00:29:24,620
sources the more accurate and the less

609
00:29:24,620 --> 00:29:25,970
likely you are to have these false

610
00:29:25,970 --> 00:29:30,290
positives you might also want to be

611
00:29:30,290 --> 00:29:32,870
looking for automating this pros walk

612
00:29:32,870 --> 00:29:34,820
you I hope you will be looking to

613
00:29:34,820 --> 00:29:37,700
automate this process so you want tools

614
00:29:37,700 --> 00:29:39,920
that you can embed that integrate with

615
00:29:39,920 --> 00:29:41,960
the other systems other parts of the

616
00:29:41,960 --> 00:29:44,270
system you're using so for example

617
00:29:44,270 --> 00:29:48,260
whatever CI CD pipeline you're using you

618
00:29:48,260 --> 00:29:52,090
might want to scan the images in your

619
00:29:52,090 --> 00:29:55,280
image registry automatically and the

620
00:29:55,280 --> 00:29:56,990
different scanners will have different

621
00:29:56,990 --> 00:29:59,720
integrations with different tools a

622
00:29:59,720 --> 00:30:02,840
couple of things I wanted to just

623
00:30:02,840 --> 00:30:05,990
highlight here when you're running a CI

624
00:30:05,990 --> 00:30:09,110
see deep pipeline something like Travis

625
00:30:09,110 --> 00:30:12,950
for example as a general rule you get a

626
00:30:12,950 --> 00:30:16,700
new instance of probably a container

627
00:30:16,700 --> 00:30:18,890
possibly a virtual machine probably a

628
00:30:18,890 --> 00:30:23,060
container to run your your build and

629
00:30:23,060 --> 00:30:26,720
your tests within and you get that new

630
00:30:26,720 --> 00:30:27,539
instance ever

631
00:30:27,539 --> 00:30:30,359
every time some of them support caching

632
00:30:30,359 --> 00:30:32,489
others don't

633
00:30:32,489 --> 00:30:36,600
a lot of scanners have some kind of

634
00:30:36,600 --> 00:30:38,879
vulnerability database information that

635
00:30:38,879 --> 00:30:40,200
they will download so you're either

636
00:30:40,200 --> 00:30:42,749
going to download a database locally or

637
00:30:42,749 --> 00:30:45,659
you're going to check a database in some

638
00:30:45,659 --> 00:30:47,249
kind of client-server model because

639
00:30:47,249 --> 00:30:49,470
you've got to check against all that

640
00:30:49,470 --> 00:30:52,859
data about all those vulnerabilities if

641
00:30:52,859 --> 00:30:55,919
it's a local database if the database is

642
00:30:55,919 --> 00:30:59,970
pulled locally you want that database to

643
00:30:59,970 --> 00:31:02,279
be small because otherwise every time

644
00:31:02,279 --> 00:31:05,460
you run cic deep pipeline if it doesn't

645
00:31:05,460 --> 00:31:07,229
have caching it's got to pull that whole

646
00:31:07,229 --> 00:31:11,009
database again so some tools will have

647
00:31:11,009 --> 00:31:14,419
like an optimized version of the

648
00:31:14,419 --> 00:31:17,970
database so that you can somebody's

649
00:31:17,970 --> 00:31:20,970
faster download basically in CI CD some

650
00:31:20,970 --> 00:31:23,099
pipelines do have the ability to cache

651
00:31:23,099 --> 00:31:26,210
some information so you can keep that

652
00:31:26,210 --> 00:31:27,979
that database

653
00:31:27,979 --> 00:31:33,509
cached but updated another interesting

654
00:31:33,509 --> 00:31:37,859
point is whether your scanner relies on

655
00:31:37,859 --> 00:31:40,440
having something like docker present to

656
00:31:40,440 --> 00:31:43,109
pull the image for you or whether it can

657
00:31:43,109 --> 00:31:46,830
pull the image by itself this is kind of

658
00:31:46,830 --> 00:31:50,460
a almost a sort of preference thing

659
00:31:50,460 --> 00:31:53,759
really it's quite nice to have a scanner

660
00:31:53,759 --> 00:31:56,249
that you can run stand alone without a

661
00:31:56,249 --> 00:31:59,429
dependency on other on having docker

662
00:31:59,429 --> 00:32:02,039
installed or having other tools like

663
00:32:02,039 --> 00:32:07,710
scope you installed and having tools

664
00:32:07,710 --> 00:32:09,599
that are easy to install and use I think

665
00:32:09,599 --> 00:32:12,239
we'd all rather to use tools that are

666
00:32:12,239 --> 00:32:15,720
easy to install and use and then the

667
00:32:15,720 --> 00:32:18,929
last set of things is additional

668
00:32:18,929 --> 00:32:23,309
features and now some of these things so

669
00:32:23,309 --> 00:32:26,999
for example malware the feeds that the

670
00:32:26,999 --> 00:32:28,889
data feeds that a scan would use to

671
00:32:28,889 --> 00:32:32,820
identify malware I think that the most

672
00:32:32,820 --> 00:32:35,159
if not all are commercial so you're

673
00:32:35,159 --> 00:32:38,989
unlikely to see malware scanning in many

674
00:32:38,989 --> 00:32:41,340
free to use tools because

675
00:32:41,340 --> 00:32:44,720
somebody's gotta pay for that datasource

676
00:32:44,720 --> 00:32:47,910
other functionality that you might see

677
00:32:47,910 --> 00:32:50,520
in some scanners is the ability to scan

678
00:32:50,520 --> 00:32:53,580
for sensitive data like passwords and

679
00:32:53,580 --> 00:32:56,190
tokens or the ability to scan windows

680
00:32:56,190 --> 00:32:59,970
containers as well as Linux containers

681
00:32:59,970 --> 00:33:04,050
and I just saw another a couple of

682
00:33:04,050 --> 00:33:06,090
actually big questions here which is

683
00:33:06,090 --> 00:33:08,430
basically how can you check these these

684
00:33:08,430 --> 00:33:10,050
things these characteristics of

685
00:33:10,050 --> 00:33:12,300
different scanners and I think one is

686
00:33:12,300 --> 00:33:15,120
like read the documentation if you know

687
00:33:15,120 --> 00:33:17,580
that you're using particular programming

688
00:33:17,580 --> 00:33:19,140
languages or particular Linux

689
00:33:19,140 --> 00:33:21,510
distributions you know have been looking

690
00:33:21,510 --> 00:33:23,280
the documentation for support for those

691
00:33:23,280 --> 00:33:25,830
scanners some scanners will publish what

692
00:33:25,830 --> 00:33:27,890
different sources they're using or what

693
00:33:27,890 --> 00:33:31,740
distributions they support and another

694
00:33:31,740 --> 00:33:34,140
great question is is it worthwhile using

695
00:33:34,140 --> 00:33:38,130
multiple scanners really great question

696
00:33:38,130 --> 00:33:41,400
because at one level yes because you're

697
00:33:41,400 --> 00:33:44,420
going to be more likely to identify

698
00:33:44,420 --> 00:33:47,820
vulnerabilities you're less likely it's

699
00:33:47,820 --> 00:33:49,650
always possible that she's kind of

700
00:33:49,650 --> 00:33:52,980
walnuts and vulnerabilities the downside

701
00:33:52,980 --> 00:33:55,320
is you're gonna have to figure out which

702
00:33:55,320 --> 00:33:58,680
set of results is correct and correct

703
00:33:58,680 --> 00:34:02,070
turns out to be really hard like when I

704
00:34:02,070 --> 00:34:03,810
first started in software I thought that

705
00:34:03,810 --> 00:34:05,400
you know software things were generally

706
00:34:05,400 --> 00:34:06,660
you know they worked or they didn't work

707
00:34:06,660 --> 00:34:08,460
things are fixed on they're broken

708
00:34:08,460 --> 00:34:10,889
turns out there's a whole gray area with

709
00:34:10,889 --> 00:34:16,320
vulnerabilities so for example the MPD

710
00:34:16,320 --> 00:34:18,330
may say that a particular vulnerability

711
00:34:18,330 --> 00:34:21,060
a particular vulnerability is high

712
00:34:21,060 --> 00:34:24,330
severity classified it that way and a

713
00:34:24,330 --> 00:34:27,409
particular distribution might say

714
00:34:27,409 --> 00:34:29,969
because of some mitigating factor

715
00:34:29,969 --> 00:34:32,010
because of some other characteristic of

716
00:34:32,010 --> 00:34:35,310
their system it's not so severe on their

717
00:34:35,310 --> 00:34:40,080
platform so are you'd think as a general

718
00:34:40,080 --> 00:34:41,460
rule I would tend to say the

719
00:34:41,460 --> 00:34:44,010
distribution is probably correct that

720
00:34:44,010 --> 00:34:45,210
you know they take these things

721
00:34:45,210 --> 00:34:48,719
seriously they want to have the correct

722
00:34:48,719 --> 00:34:51,219
assessment of vulnerabilities but

723
00:34:51,219 --> 00:34:53,560
you know philosophically what do I take

724
00:34:53,560 --> 00:34:56,469
the most severe result or do I take the

725
00:34:56,469 --> 00:35:01,390
distribution results it's it's kind of a

726
00:35:01,390 --> 00:35:05,770
philosophical choice you do also get

727
00:35:05,770 --> 00:35:10,540
this knowledge of which version got the

728
00:35:10,540 --> 00:35:18,190
patch applied and so some sometimes the

729
00:35:18,190 --> 00:35:19,960
version numbering is not as consistent

730
00:35:19,960 --> 00:35:22,030
as you would hope so

731
00:35:22,030 --> 00:35:25,000
sometimes packages get released you know

732
00:35:25,000 --> 00:35:28,359
not in semantic version order

733
00:35:28,359 --> 00:35:30,280
incorrectly and then you have this

734
00:35:30,280 --> 00:35:33,369
problem of whether or not a version is

735
00:35:33,369 --> 00:35:34,930
vulnerable or not and you can't

736
00:35:34,930 --> 00:35:36,130
necessarily just do a sort of

737
00:35:36,130 --> 00:35:38,349
mathematical check on the version number

738
00:35:38,349 --> 00:35:43,710
and using multiple scanners I think I

739
00:35:43,710 --> 00:35:46,750
would hope that most scanners if they

740
00:35:46,750 --> 00:35:48,960
are pulling from the correct sources

741
00:35:48,960 --> 00:35:54,730
would be would be pretty accurate pretty

742
00:35:54,730 --> 00:35:57,160
they would pretty much agree on the

743
00:35:57,160 --> 00:35:59,500
really important like critical high

744
00:35:59,500 --> 00:36:01,540
severity vulnerabilities it would be an

745
00:36:01,540 --> 00:36:04,440
interesting test to compare the team oh

746
00:36:04,440 --> 00:36:08,800
one of the interesting some anecdote I

747
00:36:08,800 --> 00:36:11,970
suppose about these different sources

748
00:36:11,970 --> 00:36:15,460
Alpine the Alpine Linux distribution a

749
00:36:15,460 --> 00:36:18,640
few months ago changed the way their

750
00:36:18,640 --> 00:36:22,500
publishing their security advisories and

751
00:36:22,859 --> 00:36:28,020
hmm I know because I my company works

752
00:36:28,020 --> 00:36:30,280
produces this open-source tool called

753
00:36:30,280 --> 00:36:34,390
trivy you know we updated it to use the

754
00:36:34,390 --> 00:36:37,480
new source but we know that there are

755
00:36:37,480 --> 00:36:39,160
some other scanners who have not updated

756
00:36:39,160 --> 00:36:42,599
to use the new source yet and so their

757
00:36:42,599 --> 00:36:45,820
data is you know now several months out

758
00:36:45,820 --> 00:36:50,890
of date so it's kind of a an interesting

759
00:36:50,890 --> 00:36:53,109
test I would definitely say try testing

760
00:36:53,109 --> 00:36:56,500
for some more recent vulnerabilities and

761
00:36:56,500 --> 00:36:59,940
see whether you get the right results

762
00:37:02,220 --> 00:37:04,390
I'll come back to that question later

763
00:37:04,390 --> 00:37:05,740
actually I think there's one last

764
00:37:05,740 --> 00:37:08,860
question come up okay so I wanted to do

765
00:37:08,860 --> 00:37:10,810
a quick demo I'm actually just going to

766
00:37:10,810 --> 00:37:14,560
use the screenshot just to sort of save

767
00:37:14,560 --> 00:37:19,120
a bit of time here so trivy which I just

768
00:37:19,120 --> 00:37:21,210
mentioned and this is the open source

769
00:37:21,210 --> 00:37:25,560
tool that that I my team and I work on

770
00:37:25,560 --> 00:37:28,990
called trivy and we do try to make it

771
00:37:28,990 --> 00:37:32,380
really easy to install and use so you

772
00:37:32,380 --> 00:37:33,730
can install it using things like

773
00:37:33,730 --> 00:37:35,500
homebrew if you want to put it on your

774
00:37:35,500 --> 00:37:38,560
Mac we have installations for a lot of

775
00:37:38,560 --> 00:37:41,320
the major package managers so you can

776
00:37:41,320 --> 00:37:44,310
just install it from using yeah more apt

777
00:37:44,310 --> 00:37:46,990
whatever your package manager of choice

778
00:37:46,990 --> 00:37:51,220
is and basically you just run trivy and

779
00:37:51,220 --> 00:37:53,500
the name of your image and that's all

780
00:37:53,500 --> 00:37:56,050
you need to do some scanners will

781
00:37:56,050 --> 00:37:57,580
require you to install a variety of

782
00:37:57,580 --> 00:37:59,230
different components we try to make it

783
00:37:59,230 --> 00:38:03,490
as simple as possible and this is an

784
00:38:03,490 --> 00:38:05,680
example of some results so here I

785
00:38:05,680 --> 00:38:07,600
actually took this earlier as you can

786
00:38:07,600 --> 00:38:09,700
see earlier today you can see from the

787
00:38:09,700 --> 00:38:10,780
timestamp

788
00:38:10,780 --> 00:38:14,200
I ran shipping it against an old version

789
00:38:14,200 --> 00:38:17,410
of Alpine that I knew even in that base

790
00:38:17,410 --> 00:38:20,440
image it has some known vulnerabilities

791
00:38:20,440 --> 00:38:25,150
in some of the packages installed and

792
00:38:25,150 --> 00:38:29,020
you can see the kind of information

793
00:38:29,020 --> 00:38:31,080
you're looking for from a scanner so

794
00:38:31,080 --> 00:38:36,520
first of all how many issues there are

795
00:38:36,520 --> 00:38:38,650
and what severity they are so you might

796
00:38:38,650 --> 00:38:40,090
choose to have a very simple rule that

797
00:38:40,090 --> 00:38:44,490
says if this has any high severity or

798
00:38:44,490 --> 00:38:47,890
critical vulnerabilities I don't want to

799
00:38:47,890 --> 00:38:50,140
deploy it or you might have more

800
00:38:50,140 --> 00:38:53,080
sophisticated rules that say well in

801
00:38:53,080 --> 00:38:57,100
general I don't want to deploy any high

802
00:38:57,100 --> 00:38:58,780
severity vulnerabilities but perhaps

803
00:38:58,780 --> 00:39:01,150
I've got like some white listed ones

804
00:39:01,150 --> 00:39:03,210
that I know I'm gonna have to live with

805
00:39:03,210 --> 00:39:06,550
for some period of time but generally

806
00:39:06,550 --> 00:39:09,490
speaking as a rule of thumb not

807
00:39:09,490 --> 00:39:11,590
deploying any high or critical severity

808
00:39:11,590 --> 00:39:13,240
vulnerabilities would be

809
00:39:13,240 --> 00:39:18,310
really good to baseline policy so if he

810
00:39:18,310 --> 00:39:20,890
saw a result like this you would not

811
00:39:20,890 --> 00:39:23,050
want to deploy this image and you would

812
00:39:23,050 --> 00:39:26,380
not want to deploy an image based on

813
00:39:26,380 --> 00:39:31,360
this version of Alpine and other thing

814
00:39:31,360 --> 00:39:33,490
to point out is it's showing you what

815
00:39:33,490 --> 00:39:36,210
version is installed into this image and

816
00:39:36,210 --> 00:39:40,420
it showing you what version needs to be

817
00:39:40,420 --> 00:39:44,230
installed in order to get the while to

818
00:39:44,230 --> 00:39:49,210
remove the vulnerability running the

819
00:39:49,210 --> 00:39:53,110
same thing over Alpine latest now I left

820
00:39:53,110 --> 00:39:56,380
in this warning so scanning using the

821
00:39:56,380 --> 00:39:59,860
latest tag is a little bit you know I

822
00:39:59,860 --> 00:40:01,450
wouldn't necessarily recommend it

823
00:40:01,450 --> 00:40:04,990
because it's a little bit of a detour

824
00:40:04,990 --> 00:40:08,740
but that latest tag changes right every

825
00:40:08,740 --> 00:40:11,440
time you rebuild a new version the image

826
00:40:11,440 --> 00:40:12,880
and push it and make it the latest

827
00:40:12,880 --> 00:40:17,580
version it means that somebody else is

828
00:40:17,580 --> 00:40:20,500
what you can't rely on Alpine latest

829
00:40:20,500 --> 00:40:22,630
meaning a particular version of Alpine

830
00:40:22,630 --> 00:40:27,490
and in the context of a scanner if we're

831
00:40:27,490 --> 00:40:30,520
caching the results which we do in the

832
00:40:30,520 --> 00:40:32,170
case of tribbey

833
00:40:32,170 --> 00:40:34,030
if you catch those results for some

834
00:40:34,030 --> 00:40:38,830
amount of time it doesn't necessarily

835
00:40:38,830 --> 00:40:43,210
know that the tag has changed so if I

836
00:40:43,210 --> 00:40:46,390
were to rerun that trivial pine latest

837
00:40:46,390 --> 00:40:49,510
command it go up his the results I had

838
00:40:49,510 --> 00:40:52,150
from before without necessarily knowing

839
00:40:52,150 --> 00:40:55,359
that the the latest version was actually

840
00:40:55,359 --> 00:40:59,230
a different might have been changed in

841
00:40:59,230 --> 00:41:02,080
the meantime but the good news here is

842
00:41:02,080 --> 00:41:04,630
that in this latest version three dollar

843
00:41:04,630 --> 00:41:07,230
and all three of today there are no

844
00:41:07,230 --> 00:41:12,090
vulnerabilities which is pretty awesome

845
00:41:12,330 --> 00:41:15,609
so I wanted to just wrap up a little bit

846
00:41:15,609 --> 00:41:19,090
by talking a bit about incorporating the

847
00:41:19,090 --> 00:41:22,480
scanning into your pipelines into your

848
00:41:22,480 --> 00:41:24,460
workflows I mean this is there circles

849
00:41:24,460 --> 00:41:26,370
right you want to automate this

850
00:41:26,370 --> 00:41:28,560
don't want to be running it day in day

851
00:41:28,560 --> 00:41:30,750
out on your command line that would be

852
00:41:30,750 --> 00:41:34,110
really dull so you can do that you can

853
00:41:34,110 --> 00:41:36,000
be running these scans on your developer

854
00:41:36,000 --> 00:41:37,790
laptop

855
00:41:37,790 --> 00:41:40,260
do you want to be incorporating this

856
00:41:40,260 --> 00:41:43,080
into your automated build into your CI

857
00:41:43,080 --> 00:41:47,640
process somehow and you might for

858
00:41:47,640 --> 00:41:50,940
example fail the build if you find a

859
00:41:50,940 --> 00:41:53,520
high severity vulnerability so that the

860
00:41:53,520 --> 00:41:57,720
developer can straightaway update the

861
00:41:57,720 --> 00:42:00,210
versions of they're using in the build

862
00:42:00,210 --> 00:42:03,570
so that rebuild it with up-to-date

863
00:42:03,570 --> 00:42:07,730
patched versions of all the packages you

864
00:42:07,730 --> 00:42:11,220
might also want to regularly scan the

865
00:42:11,220 --> 00:42:14,700
images that exist in your image registry

866
00:42:14,700 --> 00:42:17,160
and this comes back to what I mentioned

867
00:42:17,160 --> 00:42:21,720
before about researchers finding new

868
00:42:21,720 --> 00:42:25,680
vulnerabilities in existing code so your

869
00:42:25,680 --> 00:42:28,520
images sitting in your registry

870
00:42:28,520 --> 00:42:31,170
completely unchanged maybe haven't maybe

871
00:42:31,170 --> 00:42:33,000
some of those images haven't changed for

872
00:42:33,000 --> 00:42:35,940
weeks or months software hasn't changed

873
00:42:35,940 --> 00:42:38,670
but our knowledge of vulnerabilities has

874
00:42:38,670 --> 00:42:41,340
changed so you might now find new

875
00:42:41,340 --> 00:42:44,660
vulnerabilities when you rescan

876
00:42:44,660 --> 00:42:47,760
so having scanned it might for example

877
00:42:47,760 --> 00:42:50,400
want to scan on a regular basis you

878
00:42:50,400 --> 00:42:53,130
might also want to scan as you pull any

879
00:42:53,130 --> 00:42:55,830
accounts with the registry I mentioned

880
00:42:55,830 --> 00:42:57,600
this earlier on and make sure that you

881
00:42:57,600 --> 00:43:01,800
don't admit images if they have high

882
00:43:01,800 --> 00:43:05,040
severity vulnerabilities or you could

883
00:43:05,040 --> 00:43:06,930
have more sophisticated admission

884
00:43:06,930 --> 00:43:08,430
control rules that look at exactly

885
00:43:08,430 --> 00:43:17,100
what's what's in the report okay so if

886
00:43:17,100 --> 00:43:19,680
you want to incorporate something like

887
00:43:19,680 --> 00:43:24,240
trivy into CI CD pipeline it's it's

888
00:43:24,240 --> 00:43:25,610
pretty trivial

889
00:43:25,610 --> 00:43:29,850
it's called trivially it's trivial one

890
00:43:29,850 --> 00:43:32,070
of the things that we may be a little

891
00:43:32,070 --> 00:43:35,310
gotcha is that you have to specify want

892
00:43:35,310 --> 00:43:40,049
to fail the CI pipeline based on its

893
00:43:40,049 --> 00:43:43,559
the severity and abilities you can use

894
00:43:43,559 --> 00:43:46,650
this batch - exit code parameter so the

895
00:43:46,650 --> 00:43:49,529
basic saying for example in the first

896
00:43:49,529 --> 00:43:53,459
example if you find a high severity or

897
00:43:53,459 --> 00:43:56,579
critical severity vulnerability use the

898
00:43:56,579 --> 00:44:00,449
exit code 1 and in general and non zero

899
00:44:00,449 --> 00:44:05,459
exit code would fail a CI tool and

900
00:44:05,459 --> 00:44:07,439
there's a couple of other options that

901
00:44:07,439 --> 00:44:09,420
we recommend to basically not show

902
00:44:09,420 --> 00:44:15,179
progress bar if it's downloading the the

903
00:44:15,179 --> 00:44:16,529
database it would normally show a

904
00:44:16,529 --> 00:44:17,999
progress bar but that would be pointless

905
00:44:17,999 --> 00:44:21,329
in the CI a automated system and to

906
00:44:21,329 --> 00:44:24,599
automatically refresh the database so

907
00:44:24,599 --> 00:44:28,319
just a few examples to show that it's a

908
00:44:28,319 --> 00:44:30,929
simple thing to add something like trivy

909
00:44:30,929 --> 00:44:35,279
into your pipeline and you know this

910
00:44:35,279 --> 00:44:37,410
kind of stack would also be true for

911
00:44:37,410 --> 00:44:40,679
other kinds of scanners a some scanners

912
00:44:40,679 --> 00:44:42,749
are more complex and require additional

913
00:44:42,749 --> 00:44:45,900
components other scanners are also kind

914
00:44:45,900 --> 00:44:48,150
of single line commands that you could

915
00:44:48,150 --> 00:44:53,160
integrate should you want to okay say I

916
00:44:53,160 --> 00:44:54,959
know there's a couple of questions but I

917
00:44:54,959 --> 00:44:56,969
thought I just sort of finished up by

918
00:44:56,969 --> 00:44:58,920
saying if you take anything away from

919
00:44:58,920 --> 00:45:02,069
this talk I would like to encourage you

920
00:45:02,069 --> 00:45:05,910
to scan your images because if you are

921
00:45:05,910 --> 00:45:07,109
running with those high severity

922
00:45:07,109 --> 00:45:09,719
vulnerabilities somebody will find them

923
00:45:09,719 --> 00:45:11,369
if you know if you're running it on an

924
00:45:11,369 --> 00:45:14,369
internet-connected application someone

925
00:45:14,369 --> 00:45:15,929
will exploit them if they're high or

926
00:45:15,929 --> 00:45:19,049
critical sororities and it's easy to

927
00:45:19,049 --> 00:45:20,819
incorporate this into your CI CD

928
00:45:20,819 --> 00:45:23,759
pipeline if there's one thing you do to

929
00:45:23,759 --> 00:45:26,609
secure your container deployment well I

930
00:45:26,609 --> 00:45:28,380
mean you know aside from doing things

931
00:45:28,380 --> 00:45:31,789
like not I don't know putting your admin

932
00:45:31,789 --> 00:45:34,289
dashboard on on the internet or

933
00:45:34,289 --> 00:45:38,039
something but in general this is really

934
00:45:38,039 --> 00:45:40,769
easy to do it's a huge bang per buck for

935
00:45:40,769 --> 00:45:43,259
container s deployment so I've really

936
00:45:43,259 --> 00:45:46,019
encourage you to add a scanner into your

937
00:45:46,019 --> 00:45:48,509
pipeline okay I think there were also a

938
00:45:48,509 --> 00:45:49,769
couple of questions and I'm slightly

939
00:45:49,769 --> 00:45:51,630
lost tracks they sound maybe you can

940
00:45:51,630 --> 00:45:53,029
help me

941
00:45:53,029 --> 00:45:57,679
find which questions perfect of course I

942
00:45:57,679 --> 00:46:00,859
can well um we had one actually specific

943
00:46:00,859 --> 00:46:05,539
to trivia about databases and which ones

944
00:46:05,539 --> 00:46:07,640
you guys were scanning but let me also

945
00:46:07,640 --> 00:46:11,569
make sure that we don't leave out so we

946
00:46:11,569 --> 00:46:12,890
had someone asking about how

947
00:46:12,890 --> 00:46:15,039
vulnerability scanners help in scanning

948
00:46:15,039 --> 00:46:17,390
third-party libraries which are not part

949
00:46:17,390 --> 00:46:20,959
of the base docker image right yes and I

950
00:46:20,959 --> 00:46:23,689
may have because I used an Alpine base

951
00:46:23,689 --> 00:46:25,640
image that may have been slightly

952
00:46:25,640 --> 00:46:28,999
confusing so yeah in a container image

953
00:46:28,999 --> 00:46:31,999
you have you start with the base image

954
00:46:31,999 --> 00:46:35,019
and you can think of it as a layer and

955
00:46:35,019 --> 00:46:39,199
then your docker file as you as you

956
00:46:39,199 --> 00:46:40,969
build the image based on a docker file

957
00:46:40,969 --> 00:46:42,679
each instruction in that docker file

958
00:46:42,679 --> 00:46:47,630
adds a new layer so your container image

959
00:46:47,630 --> 00:46:50,150
actually comes delivered to you when you

960
00:46:50,150 --> 00:46:51,890
when you pull it out of the registry it

961
00:46:51,890 --> 00:46:54,890
has these separate layers and then they

962
00:46:54,890 --> 00:46:57,739
get unpacked and merged into the image

963
00:46:57,739 --> 00:47:02,269
that you actually run say it's some

964
00:47:02,269 --> 00:47:05,859
really interesting things happening so

965
00:47:05,859 --> 00:47:08,779
first of all you can think about do you

966
00:47:08,779 --> 00:47:12,349
just scan the combined image the thing

967
00:47:12,349 --> 00:47:16,369
that you're gonna run when you unpack

968
00:47:16,369 --> 00:47:18,199
that image that's the set of software

969
00:47:18,199 --> 00:47:20,299
you're gonna run or do you also want to

970
00:47:20,299 --> 00:47:22,669
scan the individual layers one of the

971
00:47:22,669 --> 00:47:24,229
reasons why that's quite interesting is

972
00:47:24,229 --> 00:47:26,749
because one layer can add a

973
00:47:26,749 --> 00:47:28,669
vulnerability and another subsequent

974
00:47:28,669 --> 00:47:31,249
layer can take it away again and so for

975
00:47:31,249 --> 00:47:34,390
example you could have a layer that runs

976
00:47:34,390 --> 00:47:40,029
let's say app get install some image and

977
00:47:40,029 --> 00:47:44,089
maybe that sorry some package and maybe

978
00:47:44,089 --> 00:47:45,859
that package has a vulnerability in it

979
00:47:45,859 --> 00:47:50,299
you'd have a another command later that

980
00:47:50,299 --> 00:47:54,189
does a get install right get update to

981
00:47:54,189 --> 00:47:56,539
install a newer version of the same

982
00:47:56,539 --> 00:48:01,369
package so the result is an image that

983
00:48:01,369 --> 00:48:03,890
doesn't have that vulnerability but if

984
00:48:03,890 --> 00:48:05,390
you look at the individual layers it

985
00:48:05,390 --> 00:48:06,500
does

986
00:48:06,500 --> 00:48:11,060
you might want to you might want to

987
00:48:11,060 --> 00:48:15,890
remove those older layers kind of partly

988
00:48:15,890 --> 00:48:18,020
out of just being on the safe side and

989
00:48:18,020 --> 00:48:22,490
partly because well particularly if we

990
00:48:22,490 --> 00:48:23,450
were thinking about things like

991
00:48:23,450 --> 00:48:25,660
sensitive data things like passwords

992
00:48:25,660 --> 00:48:28,070
although they're not in the container

993
00:48:28,070 --> 00:48:32,000
image as it gets run you could inspect

994
00:48:32,000 --> 00:48:33,590
those individual layers and find that

995
00:48:33,590 --> 00:48:38,270
sensitive data okay I hope that so and

996
00:48:38,270 --> 00:48:40,580
how the vulnerability is kind of helping

997
00:48:40,580 --> 00:48:42,080
scanning third libraries which aren't

998
00:48:42,080 --> 00:48:44,630
part of a stalker image I think they

999
00:48:44,630 --> 00:48:47,120
should all be looking at either all the

1000
00:48:47,120 --> 00:48:50,800
individual layers or the overall sort of

1001
00:48:50,800 --> 00:48:54,050
unpacked version of of those all the

1002
00:48:54,050 --> 00:48:58,210
layers and what they'll do is they will

1003
00:48:58,210 --> 00:49:01,400
essentially you've got a file system and

1004
00:49:01,400 --> 00:49:03,470
it will look to see what the package

1005
00:49:03,470 --> 00:49:05,750
manager in that file system says is

1006
00:49:05,750 --> 00:49:07,480
installed what packages are installed

1007
00:49:07,480 --> 00:49:13,220
typically sounds good I think all the

1008
00:49:13,220 --> 00:49:14,480
other questions that came through you

1009
00:49:14,480 --> 00:49:16,550
kind of either answered or alluded to in

1010
00:49:16,550 --> 00:49:23,270
your actual session so I think that is a

1011
00:49:23,270 --> 00:49:24,710
rapid end if anyone does have any

1012
00:49:24,710 --> 00:49:27,460
further questions please feel free to

1013
00:49:27,460 --> 00:49:30,200
obviously jump into the slack community

1014
00:49:30,200 --> 00:49:32,990
and liz is a member there and she'll be

1015
00:49:32,990 --> 00:49:34,220
able to answer questions and obviously

1016
00:49:34,220 --> 00:49:35,480
we have abundance of knowledge within

1017
00:49:35,480 --> 00:49:39,050
that community and so if this is not

1018
00:49:39,050 --> 00:49:40,400
available there's obviously a lot of

1019
00:49:40,400 --> 00:49:42,800
people to join the discussion and NSS so

1020
00:49:42,800 --> 00:49:44,240
if you're watching this post live

1021
00:49:44,240 --> 00:49:47,060
session and your questions can always be

1022
00:49:47,060 --> 00:49:49,310
answered in there and kind of living

1023
00:49:49,310 --> 00:49:51,020
breathing content but again thank you so

1024
00:49:51,020 --> 00:49:52,730
much those really excited to have you on

1025
00:49:52,730 --> 00:50:01,610
the show and our first sort of a few

1026
00:50:01,610 --> 00:50:03,200
people asked me if I've been affixed

1027
00:50:03,200 --> 00:50:04,820
well I've always been virtual so it

1028
00:50:04,820 --> 00:50:06,380
works really well and but I hope

1029
00:50:06,380 --> 00:50:09,140
everyone has enjoyed that and again

1030
00:50:09,140 --> 00:50:11,060
it'll be live on the website in a few

1031
00:50:11,060 --> 00:50:13,310
minutes and as well as on YouTube and

1032
00:50:13,310 --> 00:50:15,230
our next session if not soon will be on

1033
00:50:15,230 --> 00:50:16,730
the 2nd of April really looking forward

1034
00:50:16,730 --> 00:50:19,460
to that one and but again if you enjoyed

1035
00:50:19,460 --> 00:50:20,060
it please

1036
00:50:20,060 --> 00:50:22,250
tell your friends your families you know

1037
00:50:22,250 --> 00:50:24,560
wasn't real pets enjoyed it too and

1038
00:50:24,560 --> 00:50:26,330
again thank you so much less but that is

1039
00:50:26,330 --> 00:50:28,850
a wrap thank you having me and bye

1040
00:50:28,850 --> 00:50:31,839
everyone stay safe

