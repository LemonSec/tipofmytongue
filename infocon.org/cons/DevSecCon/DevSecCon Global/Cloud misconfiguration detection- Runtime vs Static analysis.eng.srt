1
00:00:01,720 --> 00:00:03,650
[Music]

2
00:00:03,650 --> 00:00:07,049
hi hi everyone and hello and welcome to

3
00:00:07,049 --> 00:00:09,179
the my dev ops community for those of

4
00:00:09,179 --> 00:00:10,469
you who are joining us at the first time

5
00:00:10,469 --> 00:00:13,349
when inclusive community that educates

6
00:00:13,349 --> 00:00:14,969
and enables developers in application

7
00:00:14,969 --> 00:00:17,160
security today I'm really lucky to be

8
00:00:17,160 --> 00:00:19,500
joined by Barak and who is the CTO and

9
00:00:19,500 --> 00:00:21,720
co-founder of bridge crew and he's going

10
00:00:21,720 --> 00:00:23,369
to be talking about cloud figure

11
00:00:23,369 --> 00:00:25,740
configuration detection in runtimes with

12
00:00:25,740 --> 00:00:27,269
static analysis so I'm really excited

13
00:00:27,269 --> 00:00:30,599
and before we say hello to break I can

14
00:00:30,599 --> 00:00:32,520
introduce myself so my name is Sam so

15
00:00:32,520 --> 00:00:33,690
those of you don't know me and I'm the

16
00:00:33,690 --> 00:00:36,660
community manager here and so any

17
00:00:36,660 --> 00:00:38,700
incisions you'd like to see any feedback

18
00:00:38,700 --> 00:00:40,050
if you'd like to be a speaker on one of

19
00:00:40,050 --> 00:00:42,390
our episodes please get in touch you can

20
00:00:42,390 --> 00:00:45,090
do that at my dev save opslaan IO or on

21
00:00:45,090 --> 00:00:47,850
our slack community and flex actually

22
00:00:47,850 --> 00:00:49,230
the best way to interact with our

23
00:00:49,230 --> 00:00:50,579
speaker today so if you're not part of

24
00:00:50,579 --> 00:00:52,020
the community if you jump onto the

25
00:00:52,020 --> 00:00:54,539
website my dev sick ops dot IO and

26
00:00:54,539 --> 00:00:56,370
you'll get the link to the slack and

27
00:00:56,370 --> 00:00:58,260
join live sessions and I'll be feeding

28
00:00:58,260 --> 00:00:59,879
those questions live across degrak

29
00:00:59,879 --> 00:01:01,829
during the session and if you're

30
00:01:01,829 --> 00:01:03,329
watching this pre-recorded at a later

31
00:01:03,329 --> 00:01:05,369
date he is a member of the community so

32
00:01:05,369 --> 00:01:06,900
please feel free to pop those questions

33
00:01:06,900 --> 00:01:09,570
in whenever they arise and will either

34
00:01:09,570 --> 00:01:11,010
get a monster by him or one of our other

35
00:01:11,010 --> 00:01:14,490
community members and say I'm really

36
00:01:14,490 --> 00:01:16,770
excited to have him here my dev sick ops

37
00:01:16,770 --> 00:01:18,150
is actually brought to you by sneak

38
00:01:18,150 --> 00:01:21,330
sneak into crate Abe in a neutral space

39
00:01:21,330 --> 00:01:23,040
to share knowledge and best practices

40
00:01:23,040 --> 00:01:25,439
related to software security so huge

41
00:01:25,439 --> 00:01:27,540
thanks to them and but I think that's

42
00:01:27,540 --> 00:01:30,020
enough for me so hi welcome

43
00:01:30,020 --> 00:01:33,979
hi Sam thank you thank you for having me

44
00:01:33,979 --> 00:01:39,210
I'm very excited it's a it's a pleasure

45
00:01:39,210 --> 00:01:41,070
to have you ever see being a community

46
00:01:41,070 --> 00:01:42,299
man for quite some time so I'm quite

47
00:01:42,299 --> 00:01:44,759
excited just for this session yep

48
00:01:44,759 --> 00:01:49,320
all right let's kick it off just share

49
00:01:49,320 --> 00:01:54,570
my screen right can you see my screen I

50
00:01:54,570 --> 00:02:00,060
can all right okay so thanks Sam welcome

51
00:02:00,060 --> 00:02:02,909
everybody and today we're gonna talk

52
00:02:02,909 --> 00:02:05,729
about some code miss configs

53
00:02:05,729 --> 00:02:07,920
we try to focus on miss configs

54
00:02:07,920 --> 00:02:10,258
operating in the public cloud providers

55
00:02:10,258 --> 00:02:13,920
like AWS GCP in Azure and this car

56
00:02:13,920 --> 00:02:16,410
some practical ways to stop them using

57
00:02:16,410 --> 00:02:18,720
both runtime analysis and static

58
00:02:18,720 --> 00:02:21,390
analysis and compared it to different

59
00:02:21,390 --> 00:02:25,400
approaches so a few words about myself

60
00:02:25,400 --> 00:02:29,280
my background in case it's the first

61
00:02:29,280 --> 00:02:31,890
time that we were meeting it is for the

62
00:02:31,890 --> 00:02:34,500
most of you so I'm the CTO and

63
00:02:34,500 --> 00:02:36,300
co-founder of a cloud security startup

64
00:02:36,300 --> 00:02:38,489
named rich crew that was founded around

65
00:02:38,489 --> 00:02:42,030
a year ago and our goal is to make cloud

66
00:02:42,030 --> 00:02:44,400
security a much simpler but that's for

67
00:02:44,400 --> 00:02:47,040
in another talk in bridge crew I'm

68
00:02:47,040 --> 00:02:49,260
involved with a few open source projects

69
00:02:49,260 --> 00:02:52,319
around AWS security terraform security

70
00:02:52,319 --> 00:02:55,500
and GCP that I Erica maintain or

71
00:02:55,500 --> 00:02:58,980
continuously contribute to and in my

72
00:02:58,980 --> 00:03:02,310
previous roles I used to create machine

73
00:03:02,310 --> 00:03:06,260
learning algorithms over data science of

74
00:03:06,260 --> 00:03:11,340
Oeste de and network data and if any of

75
00:03:11,340 --> 00:03:13,709
those areas interest you you can ping me

76
00:03:13,709 --> 00:03:16,110
on Twitter so see these projects on

77
00:03:16,110 --> 00:03:20,790
slack or or on github if you look for me

78
00:03:20,790 --> 00:03:25,769
in Twitter its Rochester common case so

79
00:03:25,769 --> 00:03:28,820
what's on the agenda for today we

80
00:03:28,820 --> 00:03:33,180
prepared some very interesting topics

81
00:03:33,180 --> 00:03:35,790
lined up I will start with some basic

82
00:03:35,790 --> 00:03:37,200
settings to get familiar with the

83
00:03:37,200 --> 00:03:40,010
different terms and terminology of the

84
00:03:40,010 --> 00:03:44,100
AWS configuration capabilities and then

85
00:03:44,100 --> 00:03:46,859
we will see the common areas between

86
00:03:46,859 --> 00:03:49,350
runtime and build time or static

87
00:03:49,350 --> 00:03:51,299
analysis of cloud configuration and we

88
00:03:51,299 --> 00:03:54,480
will cover the basic concepts and then

89
00:03:54,480 --> 00:03:56,370
we run through a demo of each one of

90
00:03:56,370 --> 00:03:59,819
those with real open source tools on a

91
00:03:59,819 --> 00:04:02,700
live environment that I prepared before

92
00:04:02,700 --> 00:04:04,609
this session

93
00:04:04,609 --> 00:04:09,780
let's start by where do we were closed

94
00:04:09,780 --> 00:04:13,220
does those bad configurations come from

95
00:04:13,220 --> 00:04:16,738
we are all part of a movement we're all

96
00:04:16,738 --> 00:04:19,410
part of the agile movement and DevOps

97
00:04:19,410 --> 00:04:21,600
movement today the dev circus movement

98
00:04:21,600 --> 00:04:24,630
and as part of this movement we do not

99
00:04:24,630 --> 00:04:25,169
operate

100
00:04:25,169 --> 00:04:27,030
the same way we used to two or three

101
00:04:27,030 --> 00:04:32,569
years back when we are building a new

102
00:04:32,569 --> 00:04:36,930
AWS application usually we'll say should

103
00:04:36,930 --> 00:04:40,289
we build a service or buy one or use an

104
00:04:40,289 --> 00:04:43,050
open-source one as someone that manages

105
00:04:43,050 --> 00:04:45,930
the security engineering team I always

106
00:04:45,930 --> 00:04:48,360
tell my engineers to use an existing

107
00:04:48,360 --> 00:04:51,689
template either an open-source template

108
00:04:51,689 --> 00:04:55,199
or one that can be acquired in the

109
00:04:55,199 --> 00:04:57,419
reason I'm doing that is because I want

110
00:04:57,419 --> 00:04:59,520
us to be focused on the heavy lifting

111
00:04:59,520 --> 00:05:02,340
that is required for our own application

112
00:05:02,340 --> 00:05:05,729
and I want us to move as fast as

113
00:05:05,729 --> 00:05:09,270
possible and grow or up like crazy from

114
00:05:09,270 --> 00:05:11,909
scale-out capabilities customer value

115
00:05:11,909 --> 00:05:14,039
new features and all of those areas

116
00:05:14,039 --> 00:05:18,270
so being in this mindset of acquiring

117
00:05:18,270 --> 00:05:21,180
new services from a managed service like

118
00:05:21,180 --> 00:05:24,960
it AWS for example acquiring an AWS

119
00:05:24,960 --> 00:05:27,150
elastic search or using a default

120
00:05:27,150 --> 00:05:32,370
encryption capability of AWS it gives

121
00:05:32,370 --> 00:05:34,229
you me a ton of capabilities to move

122
00:05:34,229 --> 00:05:37,680
fast but on the other hand it I'm

123
00:05:37,680 --> 00:05:39,930
importing a lot of risks and in

124
00:05:39,930 --> 00:05:42,229
different shapes or forms of

125
00:05:42,229 --> 00:05:44,430
configurations that I can help mistakes

126
00:05:44,430 --> 00:05:46,560
on and so it's not created this service

127
00:05:46,560 --> 00:05:50,479
myself so where does those

128
00:05:50,479 --> 00:05:53,909
configurations come from they are coming

129
00:05:53,909 --> 00:05:56,370
from the different public registries

130
00:05:56,370 --> 00:05:59,479
those can be the AWS CloudFormation

131
00:05:59,479 --> 00:06:02,580
registry the terraform public registry

132
00:06:02,580 --> 00:06:06,180
github open source for process projects

133
00:06:06,180 --> 00:06:07,439
with therefore more CloudFormation

134
00:06:07,439 --> 00:06:10,529
registries or just do-it-yourself

135
00:06:10,529 --> 00:06:14,789
products so all of those different

136
00:06:14,789 --> 00:06:16,919
templates that come from those common

137
00:06:16,919 --> 00:06:20,729
registries are usually containing boiler

138
00:06:20,729 --> 00:06:23,939
pray plate and blueprint of all your

139
00:06:23,939 --> 00:06:27,389
environment will look like they do not

140
00:06:27,389 --> 00:06:30,270
have any business logic internally they

141
00:06:30,270 --> 00:06:32,399
are just the logic to provision new

142
00:06:32,399 --> 00:06:35,650
resources under your account

143
00:06:35,650 --> 00:06:39,639
their goal is to help you build fast a

144
00:06:39,639 --> 00:06:42,130
common infrastructure with the least

145
00:06:42,130 --> 00:06:44,169
amount of work and effort that is

146
00:06:44,169 --> 00:06:47,919
required from you the result is that you

147
00:06:47,919 --> 00:06:50,199
will not be familiar with the

148
00:06:50,199 --> 00:06:53,020
configuration or where is it coming from

149
00:06:53,020 --> 00:06:55,240
but even if you build the templates

150
00:06:55,240 --> 00:06:57,820
yourself often it's being deployed by

151
00:06:57,820 --> 00:06:59,530
different teams and you are not always

152
00:06:59,530 --> 00:07:01,419
aware of the different configurations

153
00:07:01,419 --> 00:07:04,110
that is been created inside your own

154
00:07:04,110 --> 00:07:10,080
engineering powerhouse so what do we do

155
00:07:10,080 --> 00:07:13,240
before we start with a fancy tech around

156
00:07:13,240 --> 00:07:15,160
how we solve this problem let's try to

157
00:07:15,160 --> 00:07:17,710
understand who owns it inside the

158
00:07:17,710 --> 00:07:22,180
organization what we're seeing working

159
00:07:22,180 --> 00:07:24,430
with different security engineering team

160
00:07:24,430 --> 00:07:28,289
what I've seen in my past roles is

161
00:07:28,289 --> 00:07:31,630
basically three different approaches the

162
00:07:31,630 --> 00:07:35,259
first one is just to be afraid to help

163
00:07:35,259 --> 00:07:40,000
the cloud adoption and since a lot of

164
00:07:40,000 --> 00:07:43,090
security teams are yet to be familiar

165
00:07:43,090 --> 00:07:46,120
with a non air-gap environment they're

166
00:07:46,120 --> 00:07:49,060
just taking the time to learn so they're

167
00:07:49,060 --> 00:07:51,639
halting the cloud adoption it's not the

168
00:07:51,639 --> 00:07:55,030
best way to solve the problem by just

169
00:07:55,030 --> 00:07:58,210
avoiding it the other way is just to

170
00:07:58,210 --> 00:08:01,599
redraw all the controls and saying

171
00:08:01,599 --> 00:08:03,820
everything that is important should be

172
00:08:03,820 --> 00:08:06,250
on Prem and everything that is not

173
00:08:06,250 --> 00:08:08,740
important or not mission-critical can be

174
00:08:08,740 --> 00:08:11,440
on the cloud but things can get leaked

175
00:08:11,440 --> 00:08:14,669
and also there are tons of risk where an

176
00:08:14,669 --> 00:08:17,770
access key can be obtained by a

177
00:08:17,770 --> 00:08:20,889
malicious user and can be used to to

178
00:08:20,889 --> 00:08:23,820
acquire resources under your account and

179
00:08:23,820 --> 00:08:27,280
the third is that just to shift all of

180
00:08:27,280 --> 00:08:30,669
the responsibilities of those cloud

181
00:08:30,669 --> 00:08:33,909
configurations back from the security

182
00:08:33,909 --> 00:08:38,440
team into the engineering team so what

183
00:08:38,440 --> 00:08:41,409
we were seeing mostly on on younger and

184
00:08:41,409 --> 00:08:44,950
cloud native shops is a clear motion

185
00:08:44,950 --> 00:08:47,290
where infrastructure development is

186
00:08:47,290 --> 00:08:49,540
moving from security team

187
00:08:49,540 --> 00:08:52,440
into the hands of cloud architects and

188
00:08:52,440 --> 00:08:55,750
application developers we're seeing that

189
00:08:55,750 --> 00:08:57,670
most of the cloud native organization

190
00:08:57,670 --> 00:09:00,910
moving from centralized team that our

191
00:09:00,910 --> 00:09:03,100
threat oriented and our mainly around

192
00:09:03,100 --> 00:09:05,290
security into decentralized

193
00:09:05,290 --> 00:09:07,540
responsibility models where security

194
00:09:07,540 --> 00:09:10,180
responsibility is shifting back to the

195
00:09:10,180 --> 00:09:13,930
developers just like QA is catered to

196
00:09:13,930 --> 00:09:16,180
the in nowadays across different teams

197
00:09:16,180 --> 00:09:19,089
and it's not a whole big team and DevOps

198
00:09:19,089 --> 00:09:21,009
is the same scattered across the

199
00:09:21,009 --> 00:09:24,670
different paths or or squads the same we

200
00:09:24,670 --> 00:09:27,339
can say for these security operations in

201
00:09:27,339 --> 00:09:29,529
the cloud those responsibilities are

202
00:09:29,529 --> 00:09:32,380
moving into the developers and s eries

203
00:09:32,380 --> 00:09:36,100
and DevOps engineers before this change

204
00:09:36,100 --> 00:09:38,740
started to happen it really came down to

205
00:09:38,740 --> 00:09:40,600
the developers who have gotten very used

206
00:09:40,600 --> 00:09:42,579
to deploying new application inside

207
00:09:42,579 --> 00:09:46,569
other centers to have the awareness that

208
00:09:46,569 --> 00:09:49,029
they are in an air-gapped environment in

209
00:09:49,029 --> 00:09:51,519
on-premise environment they had like

210
00:09:51,519 --> 00:09:54,250
firewalls and lofts and things to

211
00:09:54,250 --> 00:09:57,610
protect them and they always had the

212
00:09:57,610 --> 00:09:59,949
security team to hold the keys to the

213
00:09:59,949 --> 00:10:03,480
kingdom and watch their back they know

214
00:10:03,480 --> 00:10:06,910
that they can count on another team and

215
00:10:06,910 --> 00:10:08,920
their responsibility is not theirs in

216
00:10:08,920 --> 00:10:11,560
the public cloud that's all change it

217
00:10:11,560 --> 00:10:14,380
doesn't exist the same way developers

218
00:10:14,380 --> 00:10:17,370
have don't have someone who's

219
00:10:17,370 --> 00:10:20,670
babysitting them or watching their back

220
00:10:20,670 --> 00:10:23,170
they don't always have someone to

221
00:10:23,170 --> 00:10:25,240
consult with and the process looks

222
00:10:25,240 --> 00:10:28,600
complete completely different and really

223
00:10:28,600 --> 00:10:32,439
it comes down to a cultural shift that

224
00:10:32,439 --> 00:10:37,720
needs to happen so let's talk about the

225
00:10:37,720 --> 00:10:39,579
actual configuration errors were seeing

226
00:10:39,579 --> 00:10:42,550
out in the air in the world there is an

227
00:10:42,550 --> 00:10:45,550
awesome research by Palo Alto unit 42

228
00:10:45,550 --> 00:10:49,720
guys they actually took 200,000

229
00:10:49,720 --> 00:10:52,149
different templates that those can be

230
00:10:52,149 --> 00:10:54,850
tear film templates kubernetes cloud

231
00:10:54,850 --> 00:10:58,959
formation templates and what they try to

232
00:10:58,959 --> 00:11:02,910
do is to understand are those ten

233
00:11:02,910 --> 00:11:05,970
in secured it what they found out is

234
00:11:05,970 --> 00:11:10,010
that actually 43% of the cloud databases

235
00:11:10,010 --> 00:11:12,810
mentioned on those templates does not

236
00:11:12,810 --> 00:11:15,240
have any encryption enabled which is a

237
00:11:15,240 --> 00:11:17,040
huge amount of databases without

238
00:11:17,040 --> 00:11:20,370
encryption and 76% of the cloud

239
00:11:20,370 --> 00:11:23,850
workloads had SSH port exposed to the

240
00:11:23,850 --> 00:11:25,650
entire world

241
00:11:25,650 --> 00:11:30,450
so those common msconfig are actually in

242
00:11:30,450 --> 00:11:33,030
the open source already if you will use

243
00:11:33,030 --> 00:11:34,950
an open source template you might be

244
00:11:34,950 --> 00:11:38,130
exposed to a specific risk and

245
00:11:38,130 --> 00:11:40,290
specifically my personal favorite is

246
00:11:40,290 --> 00:11:42,900
fighting hard-coded access keys over

247
00:11:42,900 --> 00:11:46,590
github we're seeing a lot of constant

248
00:11:46,590 --> 00:11:48,900
customers and a lot of AWS environments

249
00:11:48,900 --> 00:11:53,400
that are getting crypto mining actions

250
00:11:53,400 --> 00:11:55,800
from access keys that are just there in

251
00:11:55,800 --> 00:12:03,240
the wild so so let's conclude the first

252
00:12:03,240 --> 00:12:06,570
setup phase developer are awesome and

253
00:12:06,570 --> 00:12:09,810
they want to move fast they build things

254
00:12:09,810 --> 00:12:12,330
super fast and it enables our cloud

255
00:12:12,330 --> 00:12:15,710
native company to grow and grow and

256
00:12:15,710 --> 00:12:20,610
scale out by the business needs the

257
00:12:20,610 --> 00:12:21,900
third thing is there are a lot of

258
00:12:21,900 --> 00:12:24,120
boilerplate and templates that you can

259
00:12:24,120 --> 00:12:25,980
get from the internet from the different

260
00:12:25,980 --> 00:12:29,190
registries and one thing to keep in mind

261
00:12:29,190 --> 00:12:32,190
is that developers are not aware of the

262
00:12:32,190 --> 00:12:34,890
end result of MIS configs that might

263
00:12:34,890 --> 00:12:37,680
come in from an open source template

264
00:12:37,680 --> 00:12:42,330
project so where do we start handling

265
00:12:42,330 --> 00:12:44,850
those different templates and those

266
00:12:44,850 --> 00:12:49,770
different is configs so what we would

267
00:12:49,770 --> 00:12:52,050
like to do in this session is to set up

268
00:12:52,050 --> 00:12:54,750
our own detection capability using open

269
00:12:54,750 --> 00:12:59,330
source tool our goal is to defend our

270
00:12:59,330 --> 00:13:03,660
organization and we want to defend our

271
00:13:03,660 --> 00:13:06,000
data that we hold because this data is

272
00:13:06,000 --> 00:13:08,010
probably belongs to our customers and

273
00:13:08,010 --> 00:13:10,620
our goal is also to do that at scale

274
00:13:10,620 --> 00:13:13,170
it's very hard to do it's very simple to

275
00:13:13,170 --> 00:13:14,950
do it over for example

276
00:13:14,950 --> 00:13:18,100
one bucket or one AWS account but to

277
00:13:18,100 --> 00:13:20,170
actually do that on an engineering team

278
00:13:20,170 --> 00:13:24,580
that is on a fairly amount size it

279
00:13:24,580 --> 00:13:26,440
requires some automations that we'll

280
00:13:26,440 --> 00:13:30,520
walk through how to do that the good

281
00:13:30,520 --> 00:13:34,000
news about trying to build a stack that

282
00:13:34,000 --> 00:13:36,370
is about finding vulnerabilities on

283
00:13:36,370 --> 00:13:39,370
msconfig in the cloud is that there is a

284
00:13:39,370 --> 00:13:42,220
ton of content and pre-baked open source

285
00:13:42,220 --> 00:13:45,520
tools that can give you a sum value from

286
00:13:45,520 --> 00:13:50,560
the first second so let's start with the

287
00:13:50,560 --> 00:13:52,840
first approach which is run time

288
00:13:52,840 --> 00:13:55,930
detection or run time analysis of cloud

289
00:13:55,930 --> 00:13:58,060
configuration we're talking about

290
00:13:58,060 --> 00:14:00,250
tracking all configuration that are

291
00:14:00,250 --> 00:14:03,400
happening conclude provider console that

292
00:14:03,400 --> 00:14:08,440
can be AWS console web UI or api's or

293
00:14:08,440 --> 00:14:12,160
even the Python SDKs anything that is

294
00:14:12,160 --> 00:14:14,920
cloud provider comes in that section

295
00:14:14,920 --> 00:14:18,880
which is API based or event based or

296
00:14:18,880 --> 00:14:22,300
runtime based we're saying two main

297
00:14:22,300 --> 00:14:26,760
approaches to runtime detection one is

298
00:14:26,760 --> 00:14:30,220
event based analysis or activity based

299
00:14:30,220 --> 00:14:32,920
analysis this is a classic security use

300
00:14:32,920 --> 00:14:34,810
case where you take the different

301
00:14:34,810 --> 00:14:37,900
activity logs from the environment throw

302
00:14:37,900 --> 00:14:40,360
them through a log aggregator which is

303
00:14:40,360 --> 00:14:43,450
usually called the same query and boom

304
00:14:43,450 --> 00:14:45,580
you have your detection capability you

305
00:14:45,580 --> 00:14:48,370
can search for over privileged activity

306
00:14:48,370 --> 00:14:51,400
you can identify manual changes in I am

307
00:14:51,400 --> 00:14:53,920
you can find and use the networking

308
00:14:53,920 --> 00:14:56,020
configuration and you can alert other

309
00:14:56,020 --> 00:14:58,720
malicious activity this is called

310
00:14:58,720 --> 00:15:01,890
activity based or event based detection

311
00:15:01,890 --> 00:15:05,800
the second approach is where cloud

312
00:15:05,800 --> 00:15:08,470
providers are in an entirely different

313
00:15:08,470 --> 00:15:12,180
ballgame than the on premise providers

314
00:15:12,180 --> 00:15:14,800
most of the cloud providers have their

315
00:15:14,800 --> 00:15:20,500
mode of being API first and since they

316
00:15:20,500 --> 00:15:23,290
have an API to query every every

317
00:15:23,290 --> 00:15:25,930
different configuration it's been very

318
00:15:25,930 --> 00:15:27,610
interesting to see how much they take

319
00:15:27,610 --> 00:15:28,180
Frankie

320
00:15:28,180 --> 00:15:31,420
abilities you can do or you can create

321
00:15:31,420 --> 00:15:35,170
from API polling only our favorite

322
00:15:35,170 --> 00:15:37,690
security projects are actual a clever

323
00:15:37,690 --> 00:15:41,610
combination between activity data and

324
00:15:41,610 --> 00:15:44,800
API data those enables you to create

325
00:15:44,800 --> 00:15:47,380
some kind of like lightweight CMDB and

326
00:15:47,380 --> 00:15:50,080
query it for different risk and the

327
00:15:50,080 --> 00:15:51,670
projects that you can see here that are

328
00:15:51,670 --> 00:15:55,270
doing both is actually the one that is

329
00:15:55,270 --> 00:15:58,360
called cloud custodian which does both

330
00:15:58,360 --> 00:16:01,690
event or activity based detections and

331
00:16:01,690 --> 00:16:03,850
it even has some enforcement

332
00:16:03,850 --> 00:16:07,620
capabilities and it also has API polling

333
00:16:07,620 --> 00:16:13,330
capabilities so let's let's drill down

334
00:16:13,330 --> 00:16:17,589
on on the event based so good examples

335
00:16:17,589 --> 00:16:20,160
of projects that are doing that is

336
00:16:20,160 --> 00:16:22,630
elasticsearch the open source open

337
00:16:22,630 --> 00:16:25,420
distro has some alerting capabilities

338
00:16:25,420 --> 00:16:28,480
and the same for stream alert those

339
00:16:28,480 --> 00:16:31,029
projects help you to capture the

340
00:16:31,029 --> 00:16:32,920
relevant log data from the cloud

341
00:16:32,920 --> 00:16:37,089
provider different API or dates or RDS

342
00:16:37,089 --> 00:16:41,620
or queries database changes it helps you

343
00:16:41,620 --> 00:16:43,959
to contextualize using different

344
00:16:43,959 --> 00:16:47,200
enrichments and filter the different

345
00:16:47,200 --> 00:16:48,870
noise you can see in those activities

346
00:16:48,870 --> 00:16:52,810
and identify the msconfig that happened

347
00:16:52,810 --> 00:16:55,029
in that environment

348
00:16:55,029 --> 00:16:58,540
one thing we I like to do is to white

349
00:16:58,540 --> 00:17:02,080
like whitelist a baseline of familiar

350
00:17:02,080 --> 00:17:04,990
activity that is okay and is good to

351
00:17:04,990 --> 00:17:07,270
happen for example there from changes in

352
00:17:07,270 --> 00:17:10,089
my environment are usually not anomalous

353
00:17:10,089 --> 00:17:14,829
if if the pipeline is secured and human

354
00:17:14,829 --> 00:17:17,260
based activity is stuff that in

355
00:17:17,260 --> 00:17:18,910
production account our stuff that I

356
00:17:18,910 --> 00:17:22,089
would like to get an alarm on and are

357
00:17:22,089 --> 00:17:24,040
also there are the classic stuff of

358
00:17:24,040 --> 00:17:29,140
correlating malicious IPs and ire stuff

359
00:17:29,140 --> 00:17:33,010
malicious files but those are also being

360
00:17:33,010 --> 00:17:35,110
handled by the cloud providers using a

361
00:17:35,110 --> 00:17:38,420
managed service like garbage

362
00:17:38,420 --> 00:17:40,549
as for the second approach there is an

363
00:17:40,549 --> 00:17:43,490
awesome tool called Prowler it's

364
00:17:43,490 --> 00:17:46,130
actually one of my favorites and the

365
00:17:46,130 --> 00:17:49,400
reasons is because it has tons of

366
00:17:49,400 --> 00:17:52,460
content over 100 different detection

367
00:17:52,460 --> 00:17:56,240
capabilities both of best practices and

368
00:17:56,240 --> 00:18:00,370
compliance like PCI checks and HIPAA and

369
00:18:00,370 --> 00:18:04,309
CIA s benchmark so it has tons of

370
00:18:04,309 --> 00:18:07,700
content it's it's very easy to install

371
00:18:07,700 --> 00:18:11,240
and set up and it can run securely from

372
00:18:11,240 --> 00:18:14,780
anywhere and what it does is to map the

373
00:18:14,780 --> 00:18:17,270
critical configuration and identify the

374
00:18:17,270 --> 00:18:20,299
desired state you can trigger it using a

375
00:18:20,299 --> 00:18:23,049
schedule routine to do a continuous

376
00:18:23,049 --> 00:18:25,340
verification of your cloud configuration

377
00:18:25,340 --> 00:18:28,190
and the end result is an alert or

378
00:18:28,190 --> 00:18:30,169
identification of an issue that you

379
00:18:30,169 --> 00:18:34,790
should take a look at so let's take a

380
00:18:34,790 --> 00:18:36,980
look on how should we deploy a tool like

381
00:18:36,980 --> 00:18:40,460
Prowler on a prod environment and then

382
00:18:40,460 --> 00:18:42,410
we'll go through a quick terminal

383
00:18:42,410 --> 00:18:45,230
session where I deployed Prowler on my

384
00:18:45,230 --> 00:18:47,960
endpoint on my laptop and we will query

385
00:18:47,960 --> 00:18:50,630
a demo environment and take over the

386
00:18:50,630 --> 00:18:54,140
there is take a look over the results so

387
00:18:54,140 --> 00:18:57,740
on the left side but I have is my source

388
00:18:57,740 --> 00:19:01,160
account which is can be my production

389
00:19:01,160 --> 00:19:06,490
account it has some databases I Emeril's

390
00:19:06,490 --> 00:19:13,090
easy to instances and s3 buckets and

391
00:19:13,090 --> 00:19:15,919
what I want to do is to have a security

392
00:19:15,919 --> 00:19:19,340
account that queries it for the

393
00:19:19,340 --> 00:19:21,950
different miss configs so I've decided

394
00:19:21,950 --> 00:19:25,130
to deploy Prowler on an EC s cluster as

395
00:19:25,130 --> 00:19:27,440
a docker container and query the

396
00:19:27,440 --> 00:19:30,410
different resources over time and I have

397
00:19:30,410 --> 00:19:34,309
a cloud trigger that just do that

398
00:19:34,309 --> 00:19:37,070
scheduling there on an hourly basis on

399
00:19:37,070 --> 00:19:39,530
every time Prowler detects for example

400
00:19:39,530 --> 00:19:42,049
an open s3 bucket to the world I will

401
00:19:42,049 --> 00:19:43,880
get an alarm for that and trigger

402
00:19:43,880 --> 00:19:46,160
mediation action like making it private

403
00:19:46,160 --> 00:19:51,590
or encrypting it so let's go through

404
00:19:51,590 --> 00:20:06,350
quick demo of prowler alright so what I

405
00:20:06,350 --> 00:20:10,610
did before is to create an environment

406
00:20:10,610 --> 00:20:14,270
with a public s3 bucket the environment

407
00:20:14,270 --> 00:20:16,970
profile in my AWS credential is named

408
00:20:16,970 --> 00:20:21,020
prod and I'm it is deployed on u.s. East

409
00:20:21,020 --> 00:20:23,809
one and what I will check is this check

410
00:20:23,809 --> 00:20:27,860
that looks for public s3 buckets that

411
00:20:27,860 --> 00:20:31,100
are open to the world okay good it

412
00:20:31,100 --> 00:20:35,000
already find two buckets one there is a

413
00:20:35,000 --> 00:20:38,539
public one called Acme my dev sack cops

414
00:20:38,539 --> 00:20:41,299
data this bucket is public and exposed

415
00:20:41,299 --> 00:20:43,880
to everybody from the internet for real

416
00:20:43,880 --> 00:20:48,200
in one private one which is good now

417
00:20:48,200 --> 00:20:52,880
we'll give a try to another check that

418
00:20:52,880 --> 00:20:57,460
is nice and we will try to look for

419
00:20:57,460 --> 00:21:00,230
plain text access keys but as we've

420
00:21:00,230 --> 00:21:04,070
discussed are in the area of crypto

421
00:21:04,070 --> 00:21:07,909
mining risk so what we are doing here is

422
00:21:07,909 --> 00:21:10,850
querying each and every ec2 instance in

423
00:21:10,850 --> 00:21:13,130
the environment and we're looking on the

424
00:21:13,130 --> 00:21:15,500
user data the provisioning code of each

425
00:21:15,500 --> 00:21:18,950
ec2 these data can be shared if you are

426
00:21:18,950 --> 00:21:23,480
doing some api's or provisioning logic

427
00:21:23,480 --> 00:21:25,309
is public and you've taken some of that

428
00:21:25,309 --> 00:21:27,320
from the internet or if you have cross

429
00:21:27,320 --> 00:21:30,010
account rules with other third parties

430
00:21:30,010 --> 00:21:33,230
so what we've seen here is that we have

431
00:21:33,230 --> 00:21:36,320
a potential secret that can be a and SSL

432
00:21:36,320 --> 00:21:40,580
key that can be an access key or any or

433
00:21:40,580 --> 00:21:44,360
database connection string in this AWS

434
00:21:44,360 --> 00:21:47,360
instance let's try to figure out how

435
00:21:47,360 --> 00:21:51,140
this secret looks like so secrets are

436
00:21:51,140 --> 00:21:56,960
written are encoded in byte 64 so will

437
00:21:56,960 --> 00:21:59,630
decode though those and we will see that

438
00:21:59,630 --> 00:22:03,860
we have here access keys on plaintext on

439
00:22:03,860 --> 00:22:05,389
this specific

440
00:22:05,389 --> 00:22:09,320
instance detecting those means that now

441
00:22:09,320 --> 00:22:12,709
as an action I need to deactivate those

442
00:22:12,709 --> 00:22:16,820
keys and make sure that non pieces of my

443
00:22:16,820 --> 00:22:20,209
code are using those keys and that it is

444
00:22:20,209 --> 00:22:26,149
not committed to my git repository all

445
00:22:26,149 --> 00:22:30,289
right so that was cool we created an

446
00:22:30,289 --> 00:22:33,109
environment and we've detected in public

447
00:22:33,109 --> 00:22:36,559
history bucket and some hard-coded

448
00:22:36,559 --> 00:22:40,879
access keys and it seems like the

449
00:22:40,879 --> 00:22:43,129
problem is solved right but actually

450
00:22:43,129 --> 00:22:46,759
it's it's really not enough I can we

451
00:22:46,759 --> 00:22:49,969
take hundreds of buckets that are a lack

452
00:22:49,969 --> 00:22:53,779
of encryptions or hundreds of RDS

453
00:22:53,779 --> 00:22:57,289
instances that requires logging but the

454
00:22:57,289 --> 00:22:59,419
thing is is that on the mind on the next

455
00:22:59,419 --> 00:23:02,359
morning after remaining remediating

456
00:23:02,359 --> 00:23:04,609
those either manually or using script I

457
00:23:04,609 --> 00:23:07,070
will get those configuration overridden

458
00:23:07,070 --> 00:23:09,339
again and the reason is because

459
00:23:09,339 --> 00:23:12,619
continuous deployment exists we have the

460
00:23:12,619 --> 00:23:14,629
answerable switch that re running and

461
00:23:14,629 --> 00:23:16,299
overriding our infrastructure

462
00:23:16,299 --> 00:23:18,529
configuration and the same can happen

463
00:23:18,529 --> 00:23:21,589
for terraform CloudFormation chef or

464
00:23:21,589 --> 00:23:26,059
others so it's becoming an endless chase

465
00:23:26,059 --> 00:23:29,599
between security to the developers that

466
00:23:29,599 --> 00:23:31,339
are overriding using continuous

467
00:23:31,339 --> 00:23:33,859
deployment the different AWS

468
00:23:33,859 --> 00:23:36,200
configurations using the infrastructure

469
00:23:36,200 --> 00:23:40,249
code so so what it means is instead of

470
00:23:40,249 --> 00:23:43,629
focusing on the production environment

471
00:23:43,629 --> 00:23:46,190
analysis there on time analysis we

472
00:23:46,190 --> 00:23:49,339
should try to focus our tests of

473
00:23:49,339 --> 00:23:51,909
security on the telephone plans and

474
00:23:51,909 --> 00:23:56,690
Confirmation stacks to find the msconfig

475
00:23:56,690 --> 00:23:59,589
before they hit the production account

476
00:23:59,589 --> 00:24:03,289
this is why we've decided to open source

477
00:24:03,289 --> 00:24:06,859
a project named Chekhov so Chekhov is a

478
00:24:06,859 --> 00:24:09,379
static analysis tool that looks for

479
00:24:09,379 --> 00:24:12,229
msconfig in infrastructure code it's

480
00:24:12,229 --> 00:24:14,359
looking for msconfig in terraform code

481
00:24:14,359 --> 00:24:17,209
and in CloudFormation code it's

482
00:24:17,209 --> 00:24:18,860
completely open source it's Apache

483
00:24:18,860 --> 00:24:23,000
licensed just as Prowler and it enables

484
00:24:23,000 --> 00:24:25,640
an automatic review of your or your

485
00:24:25,640 --> 00:24:29,179
infrastructure code as you add more and

486
00:24:29,179 --> 00:24:32,360
more cloud resources to it it comes with

487
00:24:32,360 --> 00:24:36,260
100 different built-in checks and it has

488
00:24:36,260 --> 00:24:38,809
the capability to ignore checks or to

489
00:24:38,809 --> 00:24:41,330
add some extensions and some CIC the

490
00:24:41,330 --> 00:24:44,750
integrations by the way if anyone wants

491
00:24:44,750 --> 00:24:46,790
to contribute you're more than welcome

492
00:24:46,790 --> 00:24:50,660
to are tons of tasks and more checks

493
00:24:50,660 --> 00:24:52,280
that we would like to add to different

494
00:24:52,280 --> 00:24:55,850
providers so how would you use a static

495
00:24:55,850 --> 00:24:59,600
analyzer like check out you will trigger

496
00:24:59,600 --> 00:25:03,530
an event from a change request a pull

497
00:25:03,530 --> 00:25:06,169
request that contains a cow a code

498
00:25:06,169 --> 00:25:10,910
change on every resource that is being

499
00:25:10,910 --> 00:25:13,190
added or modified in detail from code of

500
00:25:13,190 --> 00:25:15,470
the environment you will trigger check

501
00:25:15,470 --> 00:25:18,340
the code to run its infrastructure tests

502
00:25:18,340 --> 00:25:21,500
after reviewing the telephone code check

503
00:25:21,500 --> 00:25:24,470
out Mike approve or reject the change

504
00:25:24,470 --> 00:25:28,280
request and from their github or your CV

505
00:25:28,280 --> 00:25:31,130
our CIO CD system can trigger a

506
00:25:31,130 --> 00:25:33,740
deployment of your terraform code and

507
00:25:33,740 --> 00:25:36,679
this terraform code can after it has a

508
00:25:36,679 --> 00:25:39,470
secure infrastructure written in it can

509
00:25:39,470 --> 00:25:42,650
apply the different resources on your

510
00:25:42,650 --> 00:25:49,190
AWS account so let's start with the with

511
00:25:49,190 --> 00:25:55,730
an example let's bring Jacobi so I have

512
00:25:55,730 --> 00:25:59,410
here a project with terraform directory

513
00:25:59,410 --> 00:26:03,080
with the same resources that I created

514
00:26:03,080 --> 00:26:07,280
the Prowler detective so let's go and

515
00:26:07,280 --> 00:26:10,669
take a look on the s3 templates so

516
00:26:10,669 --> 00:26:12,770
terraform is a declarative language that

517
00:26:12,770 --> 00:26:16,160
allows me to declare how I want resource

518
00:26:16,160 --> 00:26:18,890
to be provisioned so over here I declare

519
00:26:18,890 --> 00:26:20,690
that I want an s3 bucket to be

520
00:26:20,690 --> 00:26:23,750
provisioned named data which is the one

521
00:26:23,750 --> 00:26:26,390
that was exposed and I want it to be

522
00:26:26,390 --> 00:26:29,210
public which is a very bad practice to

523
00:26:29,210 --> 00:26:31,070
do but it can happen because

524
00:26:31,070 --> 00:26:32,720
any engineer can write any configuration

525
00:26:32,720 --> 00:26:34,759
that is like and there is no enforcement

526
00:26:34,759 --> 00:26:37,789
about it and I have some more buckets

527
00:26:37,789 --> 00:26:41,269
with different configurations on and I

528
00:26:41,269 --> 00:26:45,220
have another terraform template of ec2

529
00:26:45,220 --> 00:26:48,830
instances and over here I've created an

530
00:26:48,830 --> 00:26:52,759
ec2 from a dynamic ami with a dynamic

531
00:26:52,759 --> 00:26:56,029
security group but with user data that

532
00:26:56,029 --> 00:26:58,039
contains hard code those hard coded

533
00:26:58,039 --> 00:27:01,340
access skins that we've seen before so

534
00:27:01,340 --> 00:27:04,340
let's see and those resources are yet to

535
00:27:04,340 --> 00:27:05,960
be provisioned let's see if we can

536
00:27:05,960 --> 00:27:08,240
detect them without applying them or

537
00:27:08,240 --> 00:27:11,059
deploying them into the environment so

538
00:27:11,059 --> 00:27:15,019
to do that we will just install checker

539
00:27:15,019 --> 00:27:18,080
which is very simple it's tough install

540
00:27:18,080 --> 00:27:21,350
check out I have it already installed so

541
00:27:21,350 --> 00:27:24,830
what we will do is we'll run check out -

542
00:27:24,830 --> 00:27:28,970
directory terraform and from that point

543
00:27:28,970 --> 00:27:31,850
what it will do is to scan the code in

544
00:27:31,850 --> 00:27:35,000
the directory and what it found is like

545
00:27:35,000 --> 00:27:39,289
a ton of issues in the environment so it

546
00:27:39,289 --> 00:27:44,179
had 25 checks and 12 passed tracks so we

547
00:27:44,179 --> 00:27:45,679
can see that I have a bucket of

548
00:27:45,679 --> 00:27:48,230
financial data that is not public that's

549
00:27:48,230 --> 00:27:51,139
good but what about the others so I can

550
00:27:51,139 --> 00:27:53,330
see that I have buckets without

551
00:27:53,330 --> 00:27:55,220
encryption addressed without logging

552
00:27:55,220 --> 00:28:00,710
enabled and also we can find here the

553
00:28:00,710 --> 00:28:04,490
ec2 instance that had those hard-coded

554
00:28:04,490 --> 00:28:11,330
access keys so it's it looks like we're

555
00:28:11,330 --> 00:28:12,620
good to go

556
00:28:12,620 --> 00:28:16,909
we can let checkup run on our CI CD

557
00:28:16,909 --> 00:28:20,570
pipeline and prevent code from being

558
00:28:20,570 --> 00:28:24,259
deployed into the environment with the

559
00:28:24,259 --> 00:28:27,409
sensitive data or miss configurations in

560
00:28:27,409 --> 00:28:31,549
the cloud but is that really really

561
00:28:31,549 --> 00:28:36,679
enough and the answer is still no we

562
00:28:36,679 --> 00:28:39,950
want to be to make it more automated we

563
00:28:39,950 --> 00:28:42,409
want to make it more distributed across

564
00:28:42,409 --> 00:28:45,080
the team so how

565
00:28:45,080 --> 00:28:48,710
I scan my infrastructure without

566
00:28:48,710 --> 00:28:53,540
provisioning it to AWS while I'm

567
00:28:53,540 --> 00:28:58,070
developing it so the answer here is just

568
00:28:58,070 --> 00:29:01,490
like you would want like to have a code

569
00:29:01,490 --> 00:29:05,030
to pass without filters without looking

570
00:29:05,030 --> 00:29:08,330
pretty or being maintainable you can use

571
00:29:08,330 --> 00:29:11,900
the same approach on the static analyzer

572
00:29:11,900 --> 00:29:15,080
so let's go back to that repository

573
00:29:15,080 --> 00:29:18,050
where I have this such perform file and

574
00:29:18,050 --> 00:29:20,720
take a look on what I've done

575
00:29:20,720 --> 00:29:23,360
if I've done any get changes locally any

576
00:29:23,360 --> 00:29:25,490
file changes that I'd like to commit and

577
00:29:25,490 --> 00:29:26,300
the answer is yes

578
00:29:26,300 --> 00:29:29,290
I created those files is easy to file

579
00:29:29,290 --> 00:29:32,120
with with some msconfig and

580
00:29:32,120 --> 00:29:34,550
vulnerabilities but it is still not

581
00:29:34,550 --> 00:29:37,610
committed to my source code so let's try

582
00:29:37,610 --> 00:29:39,800
to commit that before that before

583
00:29:39,800 --> 00:29:42,140
committing that file we will see that I

584
00:29:42,140 --> 00:29:46,700
have I have defined pre-commit hook over

585
00:29:46,700 --> 00:29:50,540
here and what this pre-commit hook looks

586
00:29:50,540 --> 00:29:55,250
like it's fetches the check of tool from

587
00:29:55,250 --> 00:29:58,070
the git repository it's taking the

588
00:29:58,070 --> 00:30:01,550
master release and it's always running

589
00:30:01,550 --> 00:30:04,490
on every commit now what I will try to

590
00:30:04,490 --> 00:30:07,250
do is to commit the changes that I've

591
00:30:07,250 --> 00:30:10,520
just created so we'll type in git commit

592
00:30:10,520 --> 00:30:14,450
and we get the check about put on each

593
00:30:14,450 --> 00:30:19,330
failed commit and if we will go and me

594
00:30:19,330 --> 00:30:23,000
you can see that it is on a fail starts

595
00:30:23,000 --> 00:30:26,810
in about exit code so not only that the

596
00:30:26,810 --> 00:30:29,680
CI CD pipeline will block any deployment

597
00:30:29,680 --> 00:30:33,050
of bad configuration from arriving to

598
00:30:33,050 --> 00:30:35,930
prod it will even prevent me from doing

599
00:30:35,930 --> 00:30:41,680
that locally on my endpoint on my lap so

600
00:30:41,680 --> 00:30:47,060
that's cool it was blocked so how does

601
00:30:47,060 --> 00:30:49,670
that look like on a large engineering

602
00:30:49,670 --> 00:30:52,880
team scale you will probably would like

603
00:30:52,880 --> 00:30:55,340
to integrate that with your CI CD tools

604
00:30:55,340 --> 00:30:58,190
like Jenkins and the way it would look

605
00:30:58,190 --> 00:30:58,990
like is just

606
00:30:58,990 --> 00:31:00,730
like this example you will have like

607
00:31:00,730 --> 00:31:03,700
failed builds and partial partially it

608
00:31:03,700 --> 00:31:05,620
depends on on the threshold that you

609
00:31:05,620 --> 00:31:10,510
define partially failed builds that was

610
00:31:10,510 --> 00:31:13,480
blocked from being deployed using the

611
00:31:13,480 --> 00:31:17,590
static analyzer and if you would like to

612
00:31:17,590 --> 00:31:19,990
build a trend graph you can see that

613
00:31:19,990 --> 00:31:22,210
your team is getting better in building

614
00:31:22,210 --> 00:31:25,090
a security infrastructure over here we

615
00:31:25,090 --> 00:31:29,320
can see that we had a ton of red checks

616
00:31:29,320 --> 00:31:32,410
which means bad bad configs on the

617
00:31:32,410 --> 00:31:33,820
environment but we can see that our

618
00:31:33,820 --> 00:31:36,220
engineering team is being educated over

619
00:31:36,220 --> 00:31:40,770
time and getting the configuration right

620
00:31:42,370 --> 00:31:45,610
so check out is fairly new it exists for

621
00:31:45,610 --> 00:31:48,210
three months but it already has over

622
00:31:48,210 --> 00:31:51,160
100,000 downloads and it is kind of

623
00:31:51,160 --> 00:31:53,740
battle tested in very large companies

624
00:31:53,740 --> 00:31:56,830
and it is again completely open source

625
00:31:56,830 --> 00:31:58,690
and you are highly welcome to use it and

626
00:31:58,690 --> 00:32:02,980
contribute it to it so feel free to give

627
00:32:02,980 --> 00:32:07,570
it a try so let's take a look again on

628
00:32:07,570 --> 00:32:09,550
the two different approaches and

629
00:32:09,550 --> 00:32:12,280
compared it to so we had Prowler which

630
00:32:12,280 --> 00:32:15,040
does API calling for runtime analysis of

631
00:32:15,040 --> 00:32:17,290
the account and check out that mid

632
00:32:17,290 --> 00:32:21,550
static analysis so Prowler is usually

633
00:32:21,550 --> 00:32:25,000
maintained by central team which is the

634
00:32:25,000 --> 00:32:27,790
security team or production team it's

635
00:32:27,790 --> 00:32:29,320
usually part of the production

636
00:32:29,320 --> 00:32:32,200
monitoring and it is scalable across

637
00:32:32,200 --> 00:32:34,030
multiple accounts if you have multiple

638
00:32:34,030 --> 00:32:36,520
of goals you can have cross accounts

639
00:32:36,520 --> 00:32:39,190
roles from the security account to the

640
00:32:39,190 --> 00:32:41,800
all of your different projects and

641
00:32:41,800 --> 00:32:44,530
environments the good another good thing

642
00:32:44,530 --> 00:32:47,050
about it is that is aware of the runtime

643
00:32:47,050 --> 00:32:49,420
behavior meaning if someone will do a

644
00:32:49,420 --> 00:32:52,240
change on me on production like an admin

645
00:32:52,240 --> 00:32:54,580
will change a configuration not through

646
00:32:54,580 --> 00:32:58,270
a code Prowler we detect that it takes

647
00:32:58,270 --> 00:33:00,100
several minutes to identify the change

648
00:33:00,100 --> 00:33:05,730
because it's relying on a scheduled

649
00:33:05,730 --> 00:33:09,040
mechanism and it depends on your

650
00:33:09,040 --> 00:33:12,160
scheduling and it addresses compliance

651
00:33:12,160 --> 00:33:12,730
security

652
00:33:12,730 --> 00:33:15,850
teens and esterase which are which is

653
00:33:15,850 --> 00:33:18,100
good but it's largely a small part of

654
00:33:18,100 --> 00:33:22,240
your engineering team for static

655
00:33:22,240 --> 00:33:24,760
configuration analysis the good thing

656
00:33:24,760 --> 00:33:27,669
about it it is distributed by design in

657
00:33:27,669 --> 00:33:29,770
the engineering team using the

658
00:33:29,770 --> 00:33:32,020
pre-commit hooks it can be part of your

659
00:33:32,020 --> 00:33:35,169
CI CD pipeline you can run it down as

660
00:33:35,169 --> 00:33:38,080
much git repositories as you'd like one

661
00:33:38,080 --> 00:33:40,690
downside of it is that if someone some

662
00:33:40,690 --> 00:33:44,049
admin will make a production change and

663
00:33:44,049 --> 00:33:46,270
not a code change the static analyzer

664
00:33:46,270 --> 00:33:49,480
would never know that but it's really

665
00:33:49,480 --> 00:33:52,510
fast tech seconds to identify and the

666
00:33:52,510 --> 00:33:54,970
address of it is as we mentioned is the

667
00:33:54,970 --> 00:33:58,570
developers so if you want to build like

668
00:33:58,570 --> 00:34:02,559
a secure program a security program for

669
00:34:02,559 --> 00:34:05,470
your cloud infrastructure what should

670
00:34:05,470 --> 00:34:06,790
you do

671
00:34:06,790 --> 00:34:09,310
we've talked about both runtime and

672
00:34:09,310 --> 00:34:12,699
build time analysis what's the best

673
00:34:12,699 --> 00:34:15,460
choice so actually the answer is that

674
00:34:15,460 --> 00:34:19,690
you should do both and the way you would

675
00:34:19,690 --> 00:34:23,109
do that is integrating probably checkup

676
00:34:23,109 --> 00:34:27,179
or other tools like OPA and ta check on

677
00:34:27,179 --> 00:34:30,730
the build time meaning on each for

678
00:34:30,730 --> 00:34:31,750
request you will scan your

679
00:34:31,750 --> 00:34:35,649
infrastructure code and on run time you

680
00:34:35,649 --> 00:34:37,000
will have your production team or

681
00:34:37,000 --> 00:34:39,580
security team monitoring your cloud

682
00:34:39,580 --> 00:34:42,840
account for every manual possible change

683
00:34:42,840 --> 00:34:48,940
all right cool any questions

684
00:34:48,940 --> 00:34:50,859
perfect yes we actually have one and

685
00:34:50,859 --> 00:34:54,909
come in another one as well and we'd

686
00:34:54,909 --> 00:34:57,100
like to know if you have any examples of

687
00:34:57,100 --> 00:34:58,840
Tara for more cloud configuration

688
00:34:58,840 --> 00:35:00,609
templates that people can play with if

689
00:35:00,609 --> 00:35:04,080
they haven't really done any sort of

690
00:35:04,080 --> 00:35:08,710
alright so if it's about taking an

691
00:35:08,710 --> 00:35:11,320
existing template there is a website

692
00:35:11,320 --> 00:35:14,320
called registry the terraform dot io

693
00:35:14,320 --> 00:35:16,540
it's the official terror from registry

694
00:35:16,540 --> 00:35:18,130
you could take and play with templates

695
00:35:18,130 --> 00:35:21,760
from there and if it's about a

696
00:35:21,760 --> 00:35:24,520
vulnerable terraform there are a bunch

697
00:35:24,520 --> 00:35:26,530
of examples in block

698
00:35:26,530 --> 00:35:29,550
and we're gonna publish one soon for

699
00:35:29,550 --> 00:35:33,600
researching and security best practices

700
00:35:33,600 --> 00:35:36,880
amazing it was about vulnerability so we

701
00:35:36,880 --> 00:35:40,360
willl it no no and we also wanted to

702
00:35:40,360 --> 00:35:46,030
know if I've actually read this question

703
00:35:46,030 --> 00:35:50,200
apologies ok so does he have to send a

704
00:35:50,200 --> 00:35:52,600
prowler on a different AWS account or

705
00:35:52,600 --> 00:35:55,180
can he have it in the same AWS account

706
00:35:55,180 --> 00:35:58,180
what do you advise for prowler so you

707
00:35:58,180 --> 00:36:00,640
can set up Prowler everywhere you can do

708
00:36:00,640 --> 00:36:03,840
it on the laptop like I need on my demo

709
00:36:03,840 --> 00:36:07,090
but actually AWS recommends to have a

710
00:36:07,090 --> 00:36:09,400
security centralized account having all

711
00:36:09,400 --> 00:36:11,500
of the logs going through that account

712
00:36:11,500 --> 00:36:14,530
and have a centralized security security

713
00:36:14,530 --> 00:36:18,700
hub application but you can deploy it on

714
00:36:18,700 --> 00:36:21,430
on your end point on your AWS account

715
00:36:21,430 --> 00:36:25,480
without cross the controls or or on a

716
00:36:25,480 --> 00:36:27,310
separate account I would recommend a

717
00:36:27,310 --> 00:36:30,520
separate one for easier management ok

718
00:36:30,520 --> 00:36:31,210
perfect

719
00:36:31,210 --> 00:36:33,940
it's very useful cool I think that is

720
00:36:33,940 --> 00:36:35,620
all the questions that we have coming

721
00:36:35,620 --> 00:36:38,290
through would give it a few more seconds

722
00:36:38,290 --> 00:36:41,710
for anyone who hasn't sent you any

723
00:36:41,710 --> 00:36:43,390
questions but thank you again so much

724
00:36:43,390 --> 00:36:45,730
Barack for for the session definitely

725
00:36:45,730 --> 00:36:48,640
was venting and I try to get those links

726
00:36:48,640 --> 00:36:50,320
you're talking about across unto you and

727
00:36:50,320 --> 00:36:52,600
slack for anyone following through but

728
00:36:52,600 --> 00:36:55,600
will also get them on the show notes on

729
00:36:55,600 --> 00:36:58,810
the website so anything that we must any

730
00:36:58,810 --> 00:37:01,630
of these sort of registries and things I

731
00:37:01,630 --> 00:37:03,720
get we will link to in the show notes

732
00:37:03,720 --> 00:37:06,160
but again thank you so so much we really

733
00:37:06,160 --> 00:37:07,570
enjoyed having you and I hope that we

734
00:37:07,570 --> 00:37:10,570
have you again soon all right thank you

735
00:37:10,570 --> 00:37:12,730
stay safe everybody yeah

736
00:37:12,730 --> 00:37:17,740
and for those of you interested from a

737
00:37:17,740 --> 00:37:20,640
next session is in two weeks time and

738
00:37:20,640 --> 00:37:22,930
hope you can join us for that if you

739
00:37:22,930 --> 00:37:26,140
enjoyed today's session please share

740
00:37:26,140 --> 00:37:28,270
with your friends or colleagues and get

741
00:37:28,270 --> 00:37:30,010
involved if you'd like to see any

742
00:37:30,010 --> 00:37:31,900
specific topics and this community is

743
00:37:31,900 --> 00:37:33,910
definitely for you so pay me a message

744
00:37:33,910 --> 00:37:36,160
and we will find a speaker to cover

745
00:37:36,160 --> 00:37:38,380
those sessions and if you all speak as I

746
00:37:38,380 --> 00:37:39,400
said we're always looking for new

747
00:37:39,400 --> 00:37:40,420
speakers to get in

748
00:37:40,420 --> 00:37:42,400
touch and you can find us on my data

749
00:37:42,400 --> 00:37:45,370
crop surveyor and and we will see you

750
00:37:45,370 --> 00:37:47,920
again next in two weeks time so thanks

751
00:37:47,920 --> 00:37:50,130
again

