1
00:00:01,710 --> 00:00:05,440
hello hi everyone and welcome to a nice

2
00:00:05,440 --> 00:00:07,839
secure developer we're really excited

3
00:00:07,839 --> 00:00:09,730
today we're joined by Eric Johnson and

4
00:00:09,730 --> 00:00:11,260
he's going to be talking about their

5
00:00:11,260 --> 00:00:13,180
basic apps and possibly back with

6
00:00:13,180 --> 00:00:15,969
security unit testers if I get started

7
00:00:15,969 --> 00:00:17,349
for those of you if this is your first

8
00:00:17,349 --> 00:00:18,880
session I'd like some shoes myself or

9
00:00:18,880 --> 00:00:21,339
anomic my name is Sam Hepburn and I'm

10
00:00:21,339 --> 00:00:23,859
the community manager here and the human

11
00:00:23,859 --> 00:00:25,269
that is working behind the scenes to

12
00:00:25,269 --> 00:00:27,970
hopefully make all of this and work so

13
00:00:27,970 --> 00:00:30,579
if you have any feedback questions topic

14
00:00:30,579 --> 00:00:31,839
suggestions anything like that you can

15
00:00:31,839 --> 00:00:33,640
find me on the slack on Twitter please

16
00:00:33,640 --> 00:00:36,399
reach out I'd love to hear from you

17
00:00:36,399 --> 00:00:38,440
I mentioning selects likes actually the

18
00:00:38,440 --> 00:00:40,359
best place to interact with Eric today

19
00:00:40,359 --> 00:00:43,059
and our speakers in the future so if you

20
00:00:43,059 --> 00:00:45,219
haven't already and if you're watching

21
00:00:45,219 --> 00:00:46,719
this from our website you can just see

22
00:00:46,719 --> 00:00:48,280
there's a slack icon at the bottom of

23
00:00:48,280 --> 00:00:51,190
the page if not jump on to the secure

24
00:00:51,190 --> 00:00:53,710
developer com go join our you be able to

25
00:00:53,710 --> 00:00:55,329
join in this leg and if you jump onto

26
00:00:55,329 --> 00:00:57,250
live sessions that's where we'll be

27
00:00:57,250 --> 00:00:58,929
facilitating all the discussions and the

28
00:00:58,929 --> 00:01:01,030
questions and I can get them over to

29
00:01:01,030 --> 00:01:03,190
Eric the last thing I was wants to

30
00:01:03,190 --> 00:01:06,190
mention was if you click on the COG on

31
00:01:06,190 --> 00:01:08,020
your screen and there'll be a resolution

32
00:01:08,020 --> 00:01:09,310
button if you could just turn your

33
00:01:09,310 --> 00:01:11,710
resolution up to maximum that's the best

34
00:01:11,710 --> 00:01:15,340
way to watch the session today the skill

35
00:01:15,340 --> 00:01:16,510
developers action brought to you by a

36
00:01:16,510 --> 00:01:18,070
company called snake our aim is to

37
00:01:18,070 --> 00:01:20,470
create it in a neutral space to share

38
00:01:20,470 --> 00:01:22,360
knowledge and best practices about

39
00:01:22,360 --> 00:01:24,700
software security and so huge thanks to

40
00:01:24,700 --> 00:01:26,980
them but that's enough for me I really

41
00:01:26,980 --> 00:01:28,900
want to introduce you to Eric and get

42
00:01:28,900 --> 00:01:33,010
started so over to you Eric all right

43
00:01:33,010 --> 00:01:34,810
Sam thanks for having me on and

44
00:01:34,810 --> 00:01:36,940
organizing this whole thing we know how

45
00:01:36,940 --> 00:01:40,570
much work goes into that so kudos to you

46
00:01:40,570 --> 00:01:42,160
and the folks over at snake for setting

47
00:01:42,160 --> 00:01:45,880
this up I for the most part was planning

48
00:01:45,880 --> 00:01:48,040
on just going through a few slides and

49
00:01:48,040 --> 00:01:50,020
maybe doing potentially some demos if

50
00:01:50,020 --> 00:01:52,630
we've got time at the end so all kind of

51
00:01:52,630 --> 00:01:55,270
wave and introduce myself to everyone

52
00:01:55,270 --> 00:01:57,310
that's hopped on here so my name is Eric

53
00:01:57,310 --> 00:02:00,700
Johnson I have been in the application

54
00:02:00,700 --> 00:02:03,700
security space for I hate to admit it

55
00:02:03,700 --> 00:02:07,000
but over 15 years at this point it's

56
00:02:07,000 --> 00:02:09,219
been quite a journey I came out of

57
00:02:09,219 --> 00:02:11,140
actually a development background so for

58
00:02:11,140 --> 00:02:13,329
those of you that are doing full-time

59
00:02:13,329 --> 00:02:14,080
develop

60
00:02:14,080 --> 00:02:17,380
I feel your pain from the security side

61
00:02:17,380 --> 00:02:20,350
I played that game for several years for

62
00:02:20,350 --> 00:02:23,050
a large financial institution based here

63
00:02:23,050 --> 00:02:25,420
in the US so I'm located in the state of

64
00:02:25,420 --> 00:02:28,360
Iowa in the US which is kind of north

65
00:02:28,360 --> 00:02:31,840
Midwest where probably maybe an 8 to 10

66
00:02:31,840 --> 00:02:34,000
hour drive from the Canada border so we

67
00:02:34,000 --> 00:02:37,930
get a decent amount of snow and rain and

68
00:02:37,930 --> 00:02:41,350
it's our spring here so it is sitting at

69
00:02:41,350 --> 00:02:44,050
a nice chilly probably five to ten

70
00:02:44,050 --> 00:02:45,700
degrees Celsius I would say at this

71
00:02:45,700 --> 00:02:48,700
point with the wind whipping around and

72
00:02:48,700 --> 00:02:50,620
I'm seeing things below through my

73
00:02:50,620 --> 00:02:53,830
backyard and the window out here so from

74
00:02:53,830 --> 00:02:57,490
the dev side I slowly transitioned from

75
00:02:57,490 --> 00:03:01,720
dev to SEC just because we in the time

76
00:03:01,720 --> 00:03:03,430
frame we're writing all this code it's

77
00:03:03,430 --> 00:03:05,080
the very first Oh wasp

78
00:03:05,080 --> 00:03:08,620
top ten list comes out in 2003 and you

79
00:03:08,620 --> 00:03:09,850
know we've been writing code and just

80
00:03:09,850 --> 00:03:11,380
slamming it out on the internet for

81
00:03:11,380 --> 00:03:14,380
years and suddenly folks are kind of

82
00:03:14,380 --> 00:03:15,580
looking at this list saying you know

83
00:03:15,580 --> 00:03:17,380
there might be some problems and some of

84
00:03:17,380 --> 00:03:19,120
our systems related to these you know

85
00:03:19,120 --> 00:03:21,660
bad patterns that we've seen out there

86
00:03:21,660 --> 00:03:24,459
so we started centralizing kind of

87
00:03:24,459 --> 00:03:26,620
security functionality and getting

88
00:03:26,620 --> 00:03:28,900
libraries put together to perform crypto

89
00:03:28,900 --> 00:03:30,970
and do validation and encoding and a lot

90
00:03:30,970 --> 00:03:33,550
of the things I'm sure that other folks

91
00:03:33,550 --> 00:03:36,880
on this podcast have talked about and as

92
00:03:36,880 --> 00:03:41,739
part of that we came into a team that

93
00:03:41,739 --> 00:03:44,260
was kind of overseeing a lot of security

94
00:03:44,260 --> 00:03:46,780
where we actually started doing full

95
00:03:46,780 --> 00:03:49,060
static code analysis scans of all source

96
00:03:49,060 --> 00:03:52,720
code software composition analysis which

97
00:03:52,720 --> 00:03:55,030
I'm sure Sam is very well familiar with

98
00:03:55,030 --> 00:03:57,040
you know that was like many many years

99
00:03:57,040 --> 00:03:59,680
down the road until we jumped into that

100
00:03:59,680 --> 00:04:01,870
realm so I spent a lot of time as an

101
00:04:01,870 --> 00:04:03,790
auditor on a new team looking at all

102
00:04:03,790 --> 00:04:06,190
code that reached the internet for our

103
00:04:06,190 --> 00:04:08,590
organization so if it's got our data if

104
00:04:08,590 --> 00:04:12,250
it's got our kind of even or logo in a

105
00:04:12,250 --> 00:04:14,650
sense from a reputational standpoint we

106
00:04:14,650 --> 00:04:16,720
got to come in and do full audits of

107
00:04:16,720 --> 00:04:18,880
those systems read through all of the

108
00:04:18,880 --> 00:04:21,730
vendors source code and kind of sniff

109
00:04:21,730 --> 00:04:23,620
out a lot of these secrets and kind of

110
00:04:23,620 --> 00:04:25,660
technical debt that they hid underneath

111
00:04:25,660 --> 00:04:27,370
the systems

112
00:04:27,370 --> 00:04:29,139
get a risk assessment for you know what

113
00:04:29,139 --> 00:04:32,860
risk are we taking on as a bank by

114
00:04:32,860 --> 00:04:34,540
onboarding this vendor and doing work

115
00:04:34,540 --> 00:04:39,220
with them so 10 years of corporate OPSEC

116
00:04:39,220 --> 00:04:42,130
life later I kind of spun off into my

117
00:04:42,130 --> 00:04:44,650
own small consulting company doing this

118
00:04:44,650 --> 00:04:46,110
for small to medium sized businesses

119
00:04:46,110 --> 00:04:49,720
branched out of course cloud DevOps and

120
00:04:49,720 --> 00:04:51,490
a lot of the more modern tooling that

121
00:04:51,490 --> 00:04:54,270
we're seeing into the picture is

122
00:04:54,270 --> 00:04:58,560
exploding into the world so overall my

123
00:04:58,560 --> 00:05:02,289
goal has been both mostly focused on dev

124
00:05:02,289 --> 00:05:05,020
psych ops static analysis from a modern

125
00:05:05,020 --> 00:05:07,479
perspective getting results to engineers

126
00:05:07,479 --> 00:05:09,370
quicker and wiring it into build

127
00:05:09,370 --> 00:05:11,199
pipelines and we'll talk about a lot of

128
00:05:11,199 --> 00:05:13,320
that throughout the course of the

129
00:05:13,320 --> 00:05:16,510
session today so let me at this point

130
00:05:16,510 --> 00:05:19,539
switch over to the slides I'll get you

131
00:05:19,539 --> 00:05:22,690
my contact info and officially announce

132
00:05:22,690 --> 00:05:24,460
kind of what in the world are we

133
00:05:24,460 --> 00:05:28,090
actually going to do today so let's swap

134
00:05:28,090 --> 00:05:31,470
over to our screen here hopefully and

135
00:05:31,470 --> 00:05:34,960
Sam stop me if the screen share you know

136
00:05:34,960 --> 00:05:36,880
messed up or if the audio goes out or

137
00:05:36,880 --> 00:05:40,240
anything like that all right

138
00:05:40,240 --> 00:05:43,479
rock on rock out and now I can slouch in

139
00:05:43,479 --> 00:05:45,789
my chair because the the video has gone

140
00:05:45,789 --> 00:05:48,340
away so yeah this is my time to relax

141
00:05:48,340 --> 00:05:51,099
today's topic really this is this piece

142
00:05:51,099 --> 00:05:53,229
of dev sec ops that is just doesn't

143
00:05:53,229 --> 00:05:56,440
really get a lot of publicity in my

144
00:05:56,440 --> 00:05:57,820
opinion it's something that you know

145
00:05:57,820 --> 00:05:59,800
we've done forever in the dev space that

146
00:05:59,800 --> 00:06:02,889
security folks just fail to really take

147
00:06:02,889 --> 00:06:05,229
advantage of so I I call it faster

148
00:06:05,229 --> 00:06:07,860
feedback with security unit testing

149
00:06:07,860 --> 00:06:12,820
here's the official intro slide so let

150
00:06:12,820 --> 00:06:15,250
me get back to here this summarizes

151
00:06:15,250 --> 00:06:17,289
pretty much everything I just told you

152
00:06:17,289 --> 00:06:19,090
my current company that I'm working with

153
00:06:19,090 --> 00:06:21,970
is Puma security we've got a modern

154
00:06:21,970 --> 00:06:24,160
static analysis tool called Puma scan

155
00:06:24,160 --> 00:06:27,400
that fits into the dev psych ops mix by

156
00:06:27,400 --> 00:06:29,139
it's basically giving you spell check

157
00:06:29,139 --> 00:06:32,500
warnings in visual studios you write bad

158
00:06:32,500 --> 00:06:35,590
code my contact info is on the slide

159
00:06:35,590 --> 00:06:39,070
here so I just joined the secure

160
00:06:39,070 --> 00:06:40,690
developer slack Channel too so you can

161
00:06:40,690 --> 00:06:41,220
find me

162
00:06:41,220 --> 00:06:43,530
they're a TM John 20 which matches my

163
00:06:43,530 --> 00:06:46,200
twitter handle email address on the

164
00:06:46,200 --> 00:06:48,570
slide let's go ahead and pop into the

165
00:06:48,570 --> 00:06:51,360
agenda here I've got kind of five key

166
00:06:51,360 --> 00:06:53,490
sections to the topics that we'll talk

167
00:06:53,490 --> 00:06:56,250
about today really the first section is

168
00:06:56,250 --> 00:06:58,440
no it's just mentioned dev sec ops

169
00:06:58,440 --> 00:07:00,810
because that's like the cool you know

170
00:07:00,810 --> 00:07:03,030
key hipster word that everybody likes to

171
00:07:03,030 --> 00:07:05,790
use for just security in development and

172
00:07:05,790 --> 00:07:08,040
operations and then we'll get into unit

173
00:07:08,040 --> 00:07:10,860
testing converting that to security unit

174
00:07:10,860 --> 00:07:13,230
testing we'll talk about Eve evil user

175
00:07:13,230 --> 00:07:14,520
stories which is kind of a really fun

176
00:07:14,520 --> 00:07:16,470
game that I like to play with engineers

177
00:07:16,470 --> 00:07:18,600
and then I'll kind of show you how to

178
00:07:18,600 --> 00:07:21,600
just wire that into a very simple build

179
00:07:21,600 --> 00:07:23,790
pipeline to get quick feedback in your

180
00:07:23,790 --> 00:07:27,030
development spaces so let's start with

181
00:07:27,030 --> 00:07:31,500
the dev tech ops or SEC dev ops or dev

182
00:07:31,500 --> 00:07:34,380
ops SEC or rugged dev Ops is another

183
00:07:34,380 --> 00:07:36,720
word for it in my complete honest

184
00:07:36,720 --> 00:07:38,880
opinion I like to just call it sound

185
00:07:38,880 --> 00:07:42,000
fundamental secure engineering is how I

186
00:07:42,000 --> 00:07:44,370
would describe it this is kind of a

187
00:07:44,370 --> 00:07:47,220
loaded term and this meme and I have no

188
00:07:47,220 --> 00:07:49,169
idea who created this so if you know who

189
00:07:49,169 --> 00:07:49,530
did it

190
00:07:49,530 --> 00:07:52,650
give them my kudos but I love it because

191
00:07:52,650 --> 00:07:54,660
it's a combination of all these crazy

192
00:07:54,660 --> 00:07:58,050
things built up into one awesome picture

193
00:07:58,050 --> 00:08:01,110
which is a horse a unicorn somehow

194
00:08:01,110 --> 00:08:02,790
there's a fire-breathing dragon in here

195
00:08:02,790 --> 00:08:04,050
there's a cat with a nine millimeter

196
00:08:04,050 --> 00:08:06,720
gold gun sitting there and it really

197
00:08:06,720 --> 00:08:09,930
summarizes all of the different goals

198
00:08:09,930 --> 00:08:11,790
and principles and parties that are

199
00:08:11,790 --> 00:08:15,300
involved just in DevOps in general so

200
00:08:15,300 --> 00:08:18,450
where's the security piece in the first

201
00:08:18,450 --> 00:08:20,660
bullet kind of summarizes it oftentimes

202
00:08:20,660 --> 00:08:22,890
traditional security they don't really

203
00:08:22,890 --> 00:08:23,790
like us very much

204
00:08:23,790 --> 00:08:26,760
we'd like to say no to things and slow

205
00:08:26,760 --> 00:08:29,730
the organization down and not really

206
00:08:29,730 --> 00:08:33,000
help enable organizations to move faster

207
00:08:33,000 --> 00:08:34,979
so it's really getting over that barrier

208
00:08:34,979 --> 00:08:38,760
in making security a first-class problem

209
00:08:38,760 --> 00:08:42,330
in the entire lifecycle from a deaf

210
00:08:42,330 --> 00:08:44,640
perspective we think of apps X so you'll

211
00:08:44,640 --> 00:08:46,500
if you have somebody that you know comes

212
00:08:46,500 --> 00:08:48,810
on from olaf's you know Jim was on here

213
00:08:48,810 --> 00:08:51,060
I believe and I noticed tanya was also

214
00:08:51,060 --> 00:08:52,520
in the history you know

215
00:08:52,520 --> 00:08:54,080
you talk to them they're all about you

216
00:08:54,080 --> 00:08:56,270
know apps tech app sex app sex

217
00:08:56,270 --> 00:08:58,190
that's what def SEC Ops means to them

218
00:08:58,190 --> 00:09:01,670
and from a deaf perspective yes but you

219
00:09:01,670 --> 00:09:03,770
think about operations you know the

220
00:09:03,770 --> 00:09:05,330
folks that are actually building your

221
00:09:05,330 --> 00:09:07,250
environments out provisioning servers

222
00:09:07,250 --> 00:09:09,170
building out your gold images your gold

223
00:09:09,170 --> 00:09:11,660
docker images building out of your cloud

224
00:09:11,660 --> 00:09:14,720
networks apps Tech doesn't really apply

225
00:09:14,720 --> 00:09:17,600
to those spaces but the concepts

226
00:09:17,600 --> 00:09:20,270
completely carry over you know they

227
00:09:20,270 --> 00:09:22,930
might have unit tests that actually run

228
00:09:22,930 --> 00:09:26,270
against an operational infrastructure so

229
00:09:26,270 --> 00:09:27,770
instead of just running let's test my

230
00:09:27,770 --> 00:09:29,780
java code or my PHP code now you're

231
00:09:29,780 --> 00:09:31,640
actually testing puppet chef and ansible

232
00:09:31,640 --> 00:09:33,860
code to make sure that versions of

233
00:09:33,860 --> 00:09:36,200
packages and ssh configurations and

234
00:09:36,200 --> 00:09:38,360
those hardened CIS baselines make sure

235
00:09:38,360 --> 00:09:40,310
that they actually meet your

236
00:09:40,310 --> 00:09:42,710
requirements before you create some gold

237
00:09:42,710 --> 00:09:46,610
docker image or some gold you know sent

238
00:09:46,610 --> 00:09:49,130
off seven box and as your engineering

239
00:09:49,130 --> 00:09:52,100
teams roll into that mix if the

240
00:09:52,100 --> 00:09:54,290
operations team is secure and moving as

241
00:09:54,290 --> 00:09:57,800
quickly as Devas that's when we're

242
00:09:57,800 --> 00:09:59,510
really able to move quickly as an

243
00:09:59,510 --> 00:10:02,780
organization and more agile so overall

244
00:10:02,780 --> 00:10:05,420
security just has to work with dev and

245
00:10:05,420 --> 00:10:09,620
ops and SEC again compliance audit legal

246
00:10:09,620 --> 00:10:12,170
they all come into the mix so that is

247
00:10:12,170 --> 00:10:14,540
really the power behind it the cool

248
00:10:14,540 --> 00:10:17,900
thing is that dev in the process behind

249
00:10:17,900 --> 00:10:21,890
it which you already know and love you

250
00:10:21,890 --> 00:10:24,050
understand the entire end-to-end process

251
00:10:24,050 --> 00:10:27,980
so it's kind of fun free resources I

252
00:10:27,980 --> 00:10:29,240
always like to throw this out there

253
00:10:29,240 --> 00:10:30,890
whenever I'm talking about secure dev

254
00:10:30,890 --> 00:10:33,380
ops in any fashion I do a lot of work

255
00:10:33,380 --> 00:10:34,940
with the SANS Institute which is a

256
00:10:34,940 --> 00:10:38,540
InfoSec training company I help manage

257
00:10:38,540 --> 00:10:40,820
their dev SEC ops curriculum which is

258
00:10:40,820 --> 00:10:42,410
just a loaded term we can really talk

259
00:10:42,410 --> 00:10:44,720
about anything but there's a poster that

260
00:10:44,720 --> 00:10:48,380
you can download myself in Jim Burge who

261
00:10:48,380 --> 00:10:50,330
has written a lot of really good debit

262
00:10:50,330 --> 00:10:52,310
dev ops SEC books out there he's got a

263
00:10:52,310 --> 00:10:55,820
free e-book on a riley's he's part of

264
00:10:55,820 --> 00:10:58,460
the agile app sec book that you can pick

265
00:10:58,460 --> 00:10:59,270
up as well

266
00:10:59,270 --> 00:11:01,850
Frank Kim is another co-author Ben Allen

267
00:11:01,850 --> 00:11:04,640
as a co-author of some of the courseware

268
00:11:04,640 --> 00:11:06,350
that we've run this

269
00:11:06,350 --> 00:11:07,700
poster was created by the four of us

270
00:11:07,700 --> 00:11:11,120
plus Ben Hagen also ory Siegel for pure

271
00:11:11,120 --> 00:11:13,550
set contributed it's got a ton of

272
00:11:13,550 --> 00:11:15,050
information on it but along the

273
00:11:15,050 --> 00:11:16,790
right-hand side you can see that we've

274
00:11:16,790 --> 00:11:18,920
got this secured DevOps tool chain which

275
00:11:18,920 --> 00:11:21,080
has our phases of pre commit commit

276
00:11:21,080 --> 00:11:23,810
acceptance production and operations and

277
00:11:23,810 --> 00:11:26,480
just about every single open-source tool

278
00:11:26,480 --> 00:11:28,700
that we're aware of that you could use

279
00:11:28,700 --> 00:11:32,750
to actually build out a dev sec ops tool

280
00:11:32,750 --> 00:11:35,440
chain at about a zero dollar cost so

281
00:11:35,440 --> 00:11:37,700
that's something that you know we update

282
00:11:37,700 --> 00:11:40,070
this once a year and add new tools and

283
00:11:40,070 --> 00:11:42,200
take other things off that's a great

284
00:11:42,200 --> 00:11:44,210
resource for just seeing what's involved

285
00:11:44,210 --> 00:11:48,980
there Ben Hagen and a cloud in security

286
00:11:48,980 --> 00:11:51,020
summit last year released kind of his

287
00:11:51,020 --> 00:11:53,540
version of the cloud security top ten so

288
00:11:53,540 --> 00:11:56,510
it's kind of a really popular here's top

289
00:11:56,510 --> 00:11:58,340
10 things to think about as you're

290
00:11:58,340 --> 00:12:00,170
building out cloud resources in the

291
00:12:00,170 --> 00:12:02,570
structure we've also got these server

292
00:12:02,570 --> 00:12:04,430
list security top ten which was

293
00:12:04,430 --> 00:12:07,100
commissioned by or a seagull from pure

294
00:12:07,100 --> 00:12:09,880
sec it's now I believe in official wasp

295
00:12:09,880 --> 00:12:14,000
project so that is in beta I believe so

296
00:12:14,000 --> 00:12:15,320
as you're moving down functions as a

297
00:12:15,320 --> 00:12:18,110
service you can take a look at his top

298
00:12:18,110 --> 00:12:20,270
ten list and kind of see what are the

299
00:12:20,270 --> 00:12:21,740
bad things that can go on in the world

300
00:12:21,740 --> 00:12:23,810
of functions and functions security and

301
00:12:23,810 --> 00:12:26,300
things like that so great resource out

302
00:12:26,300 --> 00:12:28,790
there feel free to drop that short urls

303
00:12:28,790 --> 00:12:30,890
up on the top of the slide there if

304
00:12:30,890 --> 00:12:32,660
you've got questions about that feel

305
00:12:32,660 --> 00:12:36,080
free to reach out the last thing that I

306
00:12:36,080 --> 00:12:38,870
will mention before we dig into one of

307
00:12:38,870 --> 00:12:41,390
the 20 controls that you're seeing on

308
00:12:41,390 --> 00:12:44,270
this slide is this is the big picture if

309
00:12:44,270 --> 00:12:47,180
you're doing dev ops SEC and cloud

310
00:12:47,180 --> 00:12:49,940
there's about 20 different critical

311
00:12:49,940 --> 00:12:52,220
security controls is what I call them

312
00:12:52,220 --> 00:12:55,490
that you should wire into your intent

313
00:12:55,490 --> 00:12:57,860
picture of what security should look

314
00:12:57,860 --> 00:13:00,830
like in this ecosystem today

315
00:13:00,830 --> 00:13:03,080
we're picking on one of these which is

316
00:13:03,080 --> 00:13:06,680
in the second column the second one down

317
00:13:06,680 --> 00:13:08,840
security unit tests which is one of my

318
00:13:08,840 --> 00:13:11,420
favorite features actually inside of

319
00:13:11,420 --> 00:13:13,010
this whole critical security controls

320
00:13:13,010 --> 00:13:16,520
list it actually starts in the pre

321
00:13:16,520 --> 00:13:18,830
commit phase you know and pre-commit

322
00:13:18,830 --> 00:13:19,600
just from a

323
00:13:19,600 --> 00:13:21,399
definition standpoint these are all the

324
00:13:21,399 --> 00:13:23,589
things you can do before you've actually

325
00:13:23,589 --> 00:13:26,440
written code so the first thing you can

326
00:13:26,440 --> 00:13:28,269
do before you write in real code and

327
00:13:28,269 --> 00:13:31,690
this gets into test-driven development a

328
00:13:31,690 --> 00:13:34,000
little bit is write failing and passing

329
00:13:34,000 --> 00:13:35,709
test cases to make sure that your code

330
00:13:35,709 --> 00:13:37,149
is actually going to function the way

331
00:13:37,149 --> 00:13:40,990
that you hope it will when you implement

332
00:13:40,990 --> 00:13:44,949
whatever this feature is so this is step

333
00:13:44,949 --> 00:13:48,009
one mature systems and those that are in

334
00:13:48,009 --> 00:13:49,870
test-driven development shops they

335
00:13:49,870 --> 00:13:52,060
they've done this forever and the whole

336
00:13:52,060 --> 00:13:54,310
idea is to exercise your entire code

337
00:13:54,310 --> 00:13:55,930
base through unit tests typically

338
00:13:55,930 --> 00:13:58,810
thousands of these things exist and your

339
00:13:58,810 --> 00:14:00,519
code coverage is kind of measured on you

340
00:14:00,519 --> 00:14:02,290
know how much of your code did you test

341
00:14:02,290 --> 00:14:05,079
them that process engineers love these

342
00:14:05,079 --> 00:14:07,060
they're pretty easy to write they're

343
00:14:07,060 --> 00:14:08,500
pretty easy to change

344
00:14:08,500 --> 00:14:11,649
they typically execute quickly and you

345
00:14:11,649 --> 00:14:13,630
can execute them in your code editors

346
00:14:13,630 --> 00:14:15,220
and in your continuous integration

347
00:14:15,220 --> 00:14:16,269
pipelines

348
00:14:16,269 --> 00:14:18,430
and all of you that are listening to

349
00:14:18,430 --> 00:14:20,079
this saying oh my gosh this is supposed

350
00:14:20,079 --> 00:14:22,089
to be about security right engineers

351
00:14:22,089 --> 00:14:24,759
have done this forever the big piece of

352
00:14:24,759 --> 00:14:26,920
this is that last bullet that

353
00:14:26,920 --> 00:14:28,990
legitimately just says this is rarely

354
00:14:28,990 --> 00:14:33,130
utilized as a security controls so my

355
00:14:33,130 --> 00:14:34,930
entire goal for this discussion is to

356
00:14:34,930 --> 00:14:38,649
shift your thinking towards how can i

357
00:14:38,649 --> 00:14:42,040
leverage unit tests to actually find bad

358
00:14:42,040 --> 00:14:45,310
code inside of your organization or your

359
00:14:45,310 --> 00:14:48,639
system or whatever it be lots of

360
00:14:48,639 --> 00:14:52,149
different tools here now in the demos

361
00:14:52,149 --> 00:14:54,279
I'm using X unit because most of the

362
00:14:54,279 --> 00:14:55,870
code that we write in our organization

363
00:14:55,870 --> 00:14:58,689
is focused on the dotnet ecosystem

364
00:14:58,689 --> 00:15:01,180
dotnet core is our current platform that

365
00:15:01,180 --> 00:15:03,610
we love because it's cross-platform and

366
00:15:03,610 --> 00:15:07,060
it's very nimble and easy to use X unit

367
00:15:07,060 --> 00:15:09,370
powers that if you're using Java J unit

368
00:15:09,370 --> 00:15:11,889
mocha for node r-spec for Ruby Python

369
00:15:11,889 --> 00:15:14,589
it's got PI unit there's also many many

370
00:15:14,589 --> 00:15:16,720
many more options than what's on the

371
00:15:16,720 --> 00:15:19,420
slide the goal is whatever your

372
00:15:19,420 --> 00:15:21,040
framework is whatever you're using pick

373
00:15:21,040 --> 00:15:23,800
one and as the meme says the testing is

374
00:15:23,800 --> 00:15:25,689
coming so we start writing these things

375
00:15:25,689 --> 00:15:28,500
out now let's take a look at one example

376
00:15:28,500 --> 00:15:32,050
now this is an X unit test case the most

377
00:15:32,050 --> 00:15:33,100
important lines

378
00:15:33,100 --> 00:15:35,440
line one on line two this is my favorite

379
00:15:35,440 --> 00:15:38,770
part of X unit in the X unit world you

380
00:15:38,770 --> 00:15:41,440
can actually create test Suites in an

381
00:15:41,440 --> 00:15:43,480
instance by just creating this theory

382
00:15:43,480 --> 00:15:47,050
that says okay the in line data elements

383
00:15:47,050 --> 00:15:48,970
that follow it so it could be line two

384
00:15:48,970 --> 00:15:50,650
three four five and six could all pass

385
00:15:50,650 --> 00:15:54,580
in different arguments now in this happy

386
00:15:54,580 --> 00:15:57,010
path login this is kind of what most

387
00:15:57,010 --> 00:15:59,200
engineers will actually do by default

388
00:15:59,200 --> 00:16:02,650
let's test the login functionality and

389
00:16:02,650 --> 00:16:05,200
in this example we've got some user with

390
00:16:05,200 --> 00:16:07,570
their super secret password and we're

391
00:16:07,570 --> 00:16:09,880
just checking the status code of 200 and

392
00:16:09,880 --> 00:16:11,560
saying yes you should be issued an

393
00:16:11,560 --> 00:16:14,290
authentication token so that's the happy

394
00:16:14,290 --> 00:16:17,110
path we're expecting the login to

395
00:16:17,110 --> 00:16:18,940
succeed and that's important to note

396
00:16:18,940 --> 00:16:22,570
that we're only testing the positive

397
00:16:22,570 --> 00:16:25,300
test result we'll get into kind of the

398
00:16:25,300 --> 00:16:27,100
evil side of the house in the next

399
00:16:27,100 --> 00:16:30,310
section to execute this test depends on

400
00:16:30,310 --> 00:16:31,870
your framework but in our example here

401
00:16:31,870 --> 00:16:34,030
dotnet tests and that's going to just

402
00:16:34,030 --> 00:16:36,160
kick off all these test cases and then

403
00:16:36,160 --> 00:16:38,350
you get here's how many passed here's

404
00:16:38,350 --> 00:16:40,270
how many failed so that's kind of the

405
00:16:40,270 --> 00:16:43,480
unit testing 101 section here we will

406
00:16:43,480 --> 00:16:45,460
continue to extend this and this is

407
00:16:45,460 --> 00:16:48,670
where it kind of gets exciting how could

408
00:16:48,670 --> 00:16:51,390
we leverage those to better security and

409
00:16:51,390 --> 00:16:53,440
hopefully the wheels are spinning in

410
00:16:53,440 --> 00:16:54,280
your head and you're thinking wow I

411
00:16:54,280 --> 00:16:57,520
could actually perform a lot of security

412
00:16:57,520 --> 00:16:59,440
testing just leveraging the unit test

413
00:16:59,440 --> 00:17:01,930
that maybe already exists inside of an

414
00:17:01,930 --> 00:17:04,300
application because I'm weird and that's

415
00:17:04,300 --> 00:17:07,420
immediately what I think of when I see

416
00:17:07,420 --> 00:17:09,160
unit tests written I'm just adding in

417
00:17:09,160 --> 00:17:11,380
sprinkling negative test cases all over

418
00:17:11,380 --> 00:17:17,050
the place where can this be useful how

419
00:17:17,050 --> 00:17:19,240
many of you and I'm saying this

420
00:17:19,240 --> 00:17:21,339
expecting lots of you to raise their

421
00:17:21,339 --> 00:17:24,240
hands have run some sort of a

422
00:17:24,240 --> 00:17:28,930
non-targeted maybe just generic scanner

423
00:17:28,930 --> 00:17:31,210
against your system it could be

424
00:17:31,210 --> 00:17:33,850
something as basic as a wasp zap just

425
00:17:33,850 --> 00:17:36,790
running a zap scan against the system or

426
00:17:36,790 --> 00:17:39,070
running some sort of static code

427
00:17:39,070 --> 00:17:41,320
analysis tool that looks for bad

428
00:17:41,320 --> 00:17:43,390
patterns they all have rule patterns and

429
00:17:43,390 --> 00:17:46,210
I build static analysis tools now pretty

430
00:17:46,210 --> 00:17:46,480
much

431
00:17:46,480 --> 00:17:48,549
day in and day out and I would never say

432
00:17:48,549 --> 00:17:51,790
that it is as accurate as it could be or

433
00:17:51,790 --> 00:17:53,860
should be they all have lots and lots of

434
00:17:53,860 --> 00:17:55,840
false positives they all have lots and

435
00:17:55,840 --> 00:17:59,169
lots of false negatives how many tools

436
00:17:59,169 --> 00:18:02,169
out there or software components do you

437
00:18:02,169 --> 00:18:04,900
know that sell and make lots and lots of

438
00:18:04,900 --> 00:18:07,750
money when they have almost a 90 percent

439
00:18:07,750 --> 00:18:11,290
failure rate just something to think

440
00:18:11,290 --> 00:18:12,090
about

441
00:18:12,090 --> 00:18:15,070
all of the false negatives that occur in

442
00:18:15,070 --> 00:18:18,429
these tools can easily be discovered by

443
00:18:18,429 --> 00:18:20,650
writing custom security unit tests that

444
00:18:20,650 --> 00:18:23,350
go along with your more normal unit

445
00:18:23,350 --> 00:18:25,510
tests so here's where we start to make

446
00:18:25,510 --> 00:18:28,480
the transition engineers by default we

447
00:18:28,480 --> 00:18:30,640
like to test the happy path that's what

448
00:18:30,640 --> 00:18:33,190
I call it the happy path has that login

449
00:18:33,190 --> 00:18:34,960
method you just looked at did we

450
00:18:34,960 --> 00:18:38,230
successfully login info SEC teams on the

451
00:18:38,230 --> 00:18:39,880
other hand you know they're kind of the

452
00:18:39,880 --> 00:18:42,130
weird people right they're the ones that

453
00:18:42,130 --> 00:18:44,470
say oh what can I do to this screen to

454
00:18:44,470 --> 00:18:46,750
attack it so if you're on a login page

455
00:18:46,750 --> 00:18:49,660
and you're an attacker what do you do to

456
00:18:49,660 --> 00:18:52,809
attack that thing you're probably going

457
00:18:52,809 --> 00:18:55,540
to pick some common account like admin

458
00:18:55,540 --> 00:18:57,100
for example that's usually the first

459
00:18:57,100 --> 00:18:58,690
thing I test is you know what can I

460
00:18:58,690 --> 00:19:02,650
login is admin admin now what you can do

461
00:19:02,650 --> 00:19:04,600
is work together with InfoSec to think

462
00:19:04,600 --> 00:19:08,679
up new test cases and to say you know we

463
00:19:08,679 --> 00:19:11,590
just tested the happy path login what if

464
00:19:11,590 --> 00:19:14,260
we added another case to that where we

465
00:19:14,260 --> 00:19:17,440
said can I log in as admin admin and it

466
00:19:17,440 --> 00:19:22,450
always returns a failed 400 or 401 or

467
00:19:22,450 --> 00:19:25,240
403 result whatever your system does and

468
00:19:25,240 --> 00:19:28,080
never ever actually logs the attacker in

469
00:19:28,080 --> 00:19:30,840
can I take a user account and log in

470
00:19:30,840 --> 00:19:33,520
unsuccessfully five times and actually

471
00:19:33,520 --> 00:19:38,350
make sure that my lockout policy is

472
00:19:38,350 --> 00:19:40,830
being enforced so by working together

473
00:19:40,830 --> 00:19:43,960
you can build a ton of custom security

474
00:19:43,960 --> 00:19:48,190
controls for a system where do you get

475
00:19:48,190 --> 00:19:50,470
started I've got three resources three

476
00:19:50,470 --> 00:19:53,429
tools on the slide and for anyone that's

477
00:19:53,429 --> 00:19:56,260
hoping to grab a copy of this I can post

478
00:19:56,260 --> 00:19:58,659
these PDFs you know on my blog or I can

479
00:19:58,659 --> 00:20:00,010
pass them over to Sam and she

480
00:20:00,010 --> 00:20:01,690
pop them up on the podcast or you know

481
00:20:01,690 --> 00:20:03,190
wherever people host these things so you

482
00:20:03,190 --> 00:20:05,110
can always get back to these but step

483
00:20:05,110 --> 00:20:07,150
number one this is a Noah's project the

484
00:20:07,150 --> 00:20:08,490
application security verification

485
00:20:08,490 --> 00:20:11,380
standards provide a great resource for

486
00:20:11,380 --> 00:20:14,080
just thinking of evil negative test

487
00:20:14,080 --> 00:20:15,910
cases for you to drop into your systems

488
00:20:15,910 --> 00:20:17,740
so that's kind of step one it's a quick

489
00:20:17,740 --> 00:20:19,420
read and it's honestly something that

490
00:20:19,420 --> 00:20:21,090
most engineers and the organization's

491
00:20:21,090 --> 00:20:23,470
should probably have to read before

492
00:20:23,470 --> 00:20:25,210
they're working on sensitive systems

493
00:20:25,210 --> 00:20:28,660
anyway and then we take that to the next

494
00:20:28,660 --> 00:20:31,180
step now there's a Twitter personality

495
00:20:31,180 --> 00:20:33,820
her twitter handle is at mrs. why is why

496
00:20:33,820 --> 00:20:39,100
on her blog she posted this user

497
00:20:39,100 --> 00:20:41,440
security stories blog post that had this

498
00:20:41,440 --> 00:20:43,750
PDF and what it was it took the

499
00:20:43,750 --> 00:20:45,070
applications security verification

500
00:20:45,070 --> 00:20:47,440
standards and it turned them in the evil

501
00:20:47,440 --> 00:20:49,840
users security stories and abuse cases

502
00:20:49,840 --> 00:20:53,680
I saw the blog and I think Dennis Cruz

503
00:20:53,680 --> 00:20:55,630
who I believe was also out in the London

504
00:20:55,630 --> 00:20:57,810
area is what area as well

505
00:20:57,810 --> 00:21:00,850
dropped in and looked at this thing one

506
00:21:00,850 --> 00:21:03,100
day and I kind of sent Dennis a message

507
00:21:03,100 --> 00:21:04,810
and said you know it would be really

508
00:21:04,810 --> 00:21:06,970
cool as if we could convert this to

509
00:21:06,970 --> 00:21:09,310
markdown and actually put it in a git

510
00:21:09,310 --> 00:21:11,890
repo so folks like yourself could fork

511
00:21:11,890 --> 00:21:15,220
it clone it customize it even merge in

512
00:21:15,220 --> 00:21:18,280
their own custom user security stories

513
00:21:18,280 --> 00:21:21,390
so we did that the markdown is now in a

514
00:21:21,390 --> 00:21:24,490
github repository called evil or user

515
00:21:24,490 --> 00:21:26,680
security stories so you can go check

516
00:21:26,680 --> 00:21:28,510
that out and that gives you a lot of

517
00:21:28,510 --> 00:21:31,990
stories to kind of think of to then

518
00:21:31,990 --> 00:21:34,390
implement security base unit tests off

519
00:21:34,390 --> 00:21:36,970
of I like to mention another tool called

520
00:21:36,970 --> 00:21:41,050
sputter that is written by Seth law he's

521
00:21:41,050 --> 00:21:43,480
one of the co-hosts over on the absolute

522
00:21:43,480 --> 00:21:46,330
apps icon cast which is another great

523
00:21:46,330 --> 00:21:48,760
podcast just for more resources related

524
00:21:48,760 --> 00:21:50,170
to the things that you're finding on the

525
00:21:50,170 --> 00:21:54,040
secure developer so Seth and Ken both do

526
00:21:54,040 --> 00:21:56,290
a great job of getting lots of speakers

527
00:21:56,290 --> 00:21:59,230
on their set that a talk at blackhat

528
00:21:59,230 --> 00:22:02,800
back in 2017 out at the blackhat Asia

529
00:22:02,800 --> 00:22:05,980
where he went into a lot of what sputter

530
00:22:05,980 --> 00:22:08,980
does and how to use it but in a very

531
00:22:08,980 --> 00:22:12,539
short sentence it is a payload unit

532
00:22:12,539 --> 00:22:16,690
repository so if you want different evil

533
00:22:16,690 --> 00:22:18,549
sequel injection characters that maybe

534
00:22:18,549 --> 00:22:20,200
you can just write a quick unit-tests

535
00:22:20,200 --> 00:22:22,299
who kind of fuzz an endpoint without

536
00:22:22,299 --> 00:22:24,309
running a full-out static or dynamic

537
00:22:24,309 --> 00:22:27,309
analyzer against it you can just drop in

538
00:22:27,309 --> 00:22:29,830
six tests with six characters and see if

539
00:22:29,830 --> 00:22:33,100
any 500 results come back to slowly

540
00:22:33,100 --> 00:22:35,200
introduce kind of fuzzing even into your

541
00:22:35,200 --> 00:22:38,049
unit testing so it's a great repository

542
00:22:38,049 --> 00:22:40,389
for seeing the types of things that

543
00:22:40,389 --> 00:22:43,600
we're talking about so building the test

544
00:22:43,600 --> 00:22:45,490
suite we've gone through the resources

545
00:22:45,490 --> 00:22:47,289
to build the abuse cases the user

546
00:22:47,289 --> 00:22:50,519
stories right your user stories into

547
00:22:50,519 --> 00:22:53,200
security stories and then start writing

548
00:22:53,200 --> 00:22:54,999
code this is where it gets easy

549
00:22:54,999 --> 00:22:56,980
the engineers say all right well I know

550
00:22:56,980 --> 00:22:59,919
what the evil test cases are let's start

551
00:22:59,919 --> 00:23:03,129
writing those into code and then we make

552
00:23:03,129 --> 00:23:05,470
sure that they never work and now you've

553
00:23:05,470 --> 00:23:07,059
got defense ability built into your

554
00:23:07,059 --> 00:23:10,419
system this runs on every release

555
00:23:10,419 --> 00:23:12,100
essentially in your build pipeline if

556
00:23:12,100 --> 00:23:13,149
you set it up that way

557
00:23:13,149 --> 00:23:16,720
starts to harden your coverage from a

558
00:23:16,720 --> 00:23:18,249
security perspective what I would

559
00:23:18,249 --> 00:23:21,249
recommend is focus on high-risk code

560
00:23:21,249 --> 00:23:25,210
first if you don't have any of these we

561
00:23:25,210 --> 00:23:27,039
start with high-risk code business logic

562
00:23:27,039 --> 00:23:29,289
flaws the types of things that scanners

563
00:23:29,289 --> 00:23:33,909
historically suck at finding so from a

564
00:23:33,909 --> 00:23:35,440
business logic perspective assume you've

565
00:23:35,440 --> 00:23:37,960
got some file download in point no

566
00:23:37,960 --> 00:23:40,240
scanner is ever going to locate the fact

567
00:23:40,240 --> 00:23:42,730
that Eric should not be able to log in

568
00:23:42,730 --> 00:23:45,159
and download Sam's account statement for

569
00:23:45,159 --> 00:23:47,830
example so scanners aren't going to find

570
00:23:47,830 --> 00:23:49,600
that they don't know contextually if

571
00:23:49,600 --> 00:23:51,220
that shooter should not be allowed this

572
00:23:51,220 --> 00:23:53,289
is where unit tests are powerful because

573
00:23:53,289 --> 00:23:54,970
you can write a unit test that logs in

574
00:23:54,970 --> 00:23:57,730
as user a and then tries to download a

575
00:23:57,730 --> 00:23:59,889
file from user B's account and that

576
00:23:59,889 --> 00:24:02,409
should always return a 403 and if it

577
00:24:02,409 --> 00:24:05,350
doesn't you've got a gaping security

578
00:24:05,350 --> 00:24:07,119
hole there so those are the sorts of

579
00:24:07,119 --> 00:24:09,159
things that we can start thinking about

580
00:24:09,159 --> 00:24:13,029
the term high risk code someone always

581
00:24:13,029 --> 00:24:14,649
says Eric what in the world is high risk

582
00:24:14,649 --> 00:24:17,200
code and my response is always very

583
00:24:17,200 --> 00:24:19,600
vague and I say well it could be

584
00:24:19,600 --> 00:24:21,820
anything it's what's important to your

585
00:24:21,820 --> 00:24:23,350
organization from a security perspective

586
00:24:23,350 --> 00:24:25,779
I through lots of examples on this slide

587
00:24:25,779 --> 00:24:26,809
that you can look

588
00:24:26,809 --> 00:24:29,690
Khanh overall if it's doing with users

589
00:24:29,690 --> 00:24:31,159
logging in logging out

590
00:24:31,159 --> 00:24:33,679
changing account values accessing

591
00:24:33,679 --> 00:24:36,019
important sensitive documents anything

592
00:24:36,019 --> 00:24:38,090
in the OAuth top ten such as output

593
00:24:38,090 --> 00:24:40,970
encoding input validation your security

594
00:24:40,970 --> 00:24:43,789
unit tests themselves if they're being

595
00:24:43,789 --> 00:24:46,039
used from a compliance perspective to

596
00:24:46,039 --> 00:24:49,460
maybe enforce policies that's high risk

597
00:24:49,460 --> 00:24:50,960
code because what if an engineer just

598
00:24:50,960 --> 00:24:53,779
shuts those off suddenly we're out of

599
00:24:53,779 --> 00:24:55,669
compliance because the test is no longer

600
00:24:55,669 --> 00:24:58,399
running anything related to crypto

601
00:24:58,399 --> 00:25:00,200
hopefully it just screams that's high

602
00:25:00,200 --> 00:25:01,669
risk code you want to know when that

603
00:25:01,669 --> 00:25:04,610
stuff changes infrastructure code if

604
00:25:04,610 --> 00:25:05,960
you're building a cloud infrastructure

605
00:25:05,960 --> 00:25:08,809
in templates such as ansible or cloud

606
00:25:08,809 --> 00:25:12,049
formation or terraform etc that's as

607
00:25:12,049 --> 00:25:13,039
high risk as it gets

608
00:25:13,039 --> 00:25:15,649
and then also your pipeline definitions

609
00:25:15,649 --> 00:25:17,149
the things that are actually running

610
00:25:17,149 --> 00:25:19,820
these kind of security controls and your

611
00:25:19,820 --> 00:25:21,249
day-in and day-out

612
00:25:21,249 --> 00:25:24,259
pipelines you can't turn those off right

613
00:25:24,259 --> 00:25:27,230
otherwise we've kind of undone the

614
00:25:27,230 --> 00:25:29,179
security controls we put in place so

615
00:25:29,179 --> 00:25:30,950
those are just candidates the list is

616
00:25:30,950 --> 00:25:32,929
not all-inclusive just things to think

617
00:25:32,929 --> 00:25:37,899
about as we get into the next story here

618
00:25:37,899 --> 00:25:40,369
let's look at some examples of evil user

619
00:25:40,369 --> 00:25:42,980
stories this is just to kind of get the

620
00:25:42,980 --> 00:25:47,149
wheels turning in your head so circling

621
00:25:47,149 --> 00:25:49,190
all the way back to that happy path of

622
00:25:49,190 --> 00:25:51,559
login that we thought of how hard is it

623
00:25:51,559 --> 00:25:54,889
to rerun that test case with a evil

624
00:25:54,889 --> 00:25:56,570
users of current security story that

625
00:25:56,570 --> 00:26:00,769
says failed logins should not be allowed

626
00:26:00,769 --> 00:26:03,860
to occur for common admin accounts so

627
00:26:03,860 --> 00:26:05,690
this says I should not be able to gain

628
00:26:05,690 --> 00:26:08,539
root access logging in with admin and

629
00:26:08,539 --> 00:26:10,460
admin not that we would ever ship a

630
00:26:10,460 --> 00:26:12,590
system with admin admin as the default

631
00:26:12,590 --> 00:26:14,419
username and password that's never

632
00:26:14,419 --> 00:26:17,360
happened in real life and I know that

633
00:26:17,360 --> 00:26:19,700
the screen share or the webcam is off

634
00:26:19,700 --> 00:26:21,980
but I there's a big sarcasm blob around

635
00:26:21,980 --> 00:26:23,960
that comment I don't know how many times

636
00:26:23,960 --> 00:26:26,090
we've seen that in the news and this is

637
00:26:26,090 --> 00:26:27,649
line threes all you're looking at here

638
00:26:27,649 --> 00:26:30,259
one line of code at a unit test could

639
00:26:30,259 --> 00:26:32,809
make sure that we should never be able

640
00:26:32,809 --> 00:26:35,000
to log in as this system as admin and

641
00:26:35,000 --> 00:26:36,799
admin so you've got

642
00:26:36,799 --> 00:26:39,169
here's a username here's a password the

643
00:26:39,169 --> 00:26:40,340
status code is

644
00:26:40,340 --> 00:26:43,100
saying it has to always return a 400 in

645
00:26:43,100 --> 00:26:45,710
the JWT that comes back should always be

646
00:26:45,710 --> 00:26:47,779
Noah we should never get valid cribs

647
00:26:47,779 --> 00:26:52,490
with admin and admin that's how simple

648
00:26:52,490 --> 00:26:54,590
it is to implement that security unit

649
00:26:54,590 --> 00:26:57,440
test one line of code now we don't have

650
00:26:57,440 --> 00:26:59,120
to worry about admin and admin anymore

651
00:26:59,120 --> 00:27:01,330
and you just keep playing the game

652
00:27:01,330 --> 00:27:06,400
as an attacker I shouldn't be able to

653
00:27:06,400 --> 00:27:09,289
vertically escalate my privileges this

654
00:27:09,289 --> 00:27:11,210
is another item that's really difficult

655
00:27:11,210 --> 00:27:14,450
for just canned dynamic and static

656
00:27:14,450 --> 00:27:16,220
analysis tools to locate so let's say

657
00:27:16,220 --> 00:27:19,730
you've got some role or some principle

658
00:27:19,730 --> 00:27:21,470
that's allowed to approve invoices and

659
00:27:21,470 --> 00:27:22,960
payments that come in from customers

660
00:27:22,960 --> 00:27:26,690
this may be taken from a system that I

661
00:27:26,690 --> 00:27:29,090
operate in on a regular basis and this

662
00:27:29,090 --> 00:27:31,340
is one of our unit tests in there you've

663
00:27:31,340 --> 00:27:33,500
got the quote admin account or the

664
00:27:33,500 --> 00:27:36,399
privileged account logging in online to

665
00:27:36,399 --> 00:27:39,230
approving some invoice the status code

666
00:27:39,230 --> 00:27:40,880
should always be 200 that's the happy

667
00:27:40,880 --> 00:27:43,730
path so think about your negative test

668
00:27:43,730 --> 00:27:47,330
case the lower level user so we'll pick

669
00:27:47,330 --> 00:27:48,950
on Sam again because she set this whole

670
00:27:48,950 --> 00:27:50,840
thing up so we can log in with Sam and

671
00:27:50,840 --> 00:27:54,230
her super-secret password in Sam's

672
00:27:54,230 --> 00:27:56,630
response should always be a 403 she

673
00:27:56,630 --> 00:27:58,070
doesn't have the entitlement or the

674
00:27:58,070 --> 00:27:59,480
privilege to actually approve that

675
00:27:59,480 --> 00:28:01,820
invoice now you've covered vertical

676
00:28:01,820 --> 00:28:03,940
access control in a unit test that

677
00:28:03,940 --> 00:28:06,049
endpoint will never be vulnerable to

678
00:28:06,049 --> 00:28:08,360
that sort of an escalation attack we

679
00:28:08,360 --> 00:28:10,600
know that the entitlement check is there

680
00:28:10,600 --> 00:28:13,250
we'll keep playing here's my file

681
00:28:13,250 --> 00:28:15,679
download example it's like I knew this

682
00:28:15,679 --> 00:28:16,970
was coming when I gave that as an

683
00:28:16,970 --> 00:28:20,120
example earlier so let's take a look at

684
00:28:20,120 --> 00:28:21,770
this you've got again the super-secret

685
00:28:21,770 --> 00:28:23,779
admin logging in there in this case

686
00:28:23,779 --> 00:28:26,450
we're trying to actually you know go in

687
00:28:26,450 --> 00:28:29,539
and download some file for example let's

688
00:28:29,539 --> 00:28:31,909
check vertical access control and we'll

689
00:28:31,909 --> 00:28:35,419
make sure again 403 has to come back so

690
00:28:35,419 --> 00:28:38,690
these sorts of vertical and horizontal

691
00:28:38,690 --> 00:28:42,320
checks can easily be done here let's

692
00:28:42,320 --> 00:28:44,149
take a look at a this is from Seth's

693
00:28:44,149 --> 00:28:46,549
payload repository now this is giving

694
00:28:46,549 --> 00:28:47,950
you the kind of some next-level stuff

695
00:28:47,950 --> 00:28:50,450
sequel injection we got other ways to

696
00:28:50,450 --> 00:28:52,429
find this my whole point is that you can

697
00:28:52,429 --> 00:28:54,590
send evil data to your sister

698
00:28:54,590 --> 00:28:58,200
using these same sort of techniques so

699
00:28:58,200 --> 00:28:59,639
if you don't have the time and your

700
00:28:59,639 --> 00:29:02,279
build pipeline to scan for sequel

701
00:29:02,279 --> 00:29:03,869
injection with a dynamic scanner let's

702
00:29:03,869 --> 00:29:05,820
just say it takes too long if you deploy

703
00:29:05,820 --> 00:29:09,119
code 50 times a day you don't have the

704
00:29:09,119 --> 00:29:11,129
ability to run a scanner that takes

705
00:29:11,129 --> 00:29:12,960
three hours to complete inside of your

706
00:29:12,960 --> 00:29:15,899
automated pipelines this runs very

707
00:29:15,899 --> 00:29:18,629
quickly what we can do is say let's send

708
00:29:18,629 --> 00:29:20,730
in a request here now this is actually

709
00:29:20,730 --> 00:29:25,350
passing in some sort of evil value for

710
00:29:25,350 --> 00:29:28,999
that payload and we'll put in a space

711
00:29:28,999 --> 00:29:32,399
parentheses a tick mark a hash tag the

712
00:29:32,399 --> 00:29:34,110
common sorts of characters that might

713
00:29:34,110 --> 00:29:36,269
get in here and actually cause a 500

714
00:29:36,269 --> 00:29:38,789
response to come back if it's vulnerable

715
00:29:38,789 --> 00:29:41,249
to sequel injection if we make sure that

716
00:29:41,249 --> 00:29:44,450
it always just returns the 404 not found

717
00:29:44,450 --> 00:29:46,590
now you're starting to actually do some

718
00:29:46,590 --> 00:29:50,029
fuzzing in here which is kind of fun

719
00:29:50,330 --> 00:29:53,159
tygris code changes this is my favorite

720
00:29:53,159 --> 00:29:55,470
you remember those high-risk files I

721
00:29:55,470 --> 00:29:56,490
showed you worth dealing with

722
00:29:56,490 --> 00:29:59,309
authentication authorization monitoring

723
00:29:59,309 --> 00:30:02,190
those four changes in dev SEC ops is

724
00:30:02,190 --> 00:30:04,379
huge because you need to be able to stop

725
00:30:04,379 --> 00:30:06,840
a bill and stop a team from moving

726
00:30:06,840 --> 00:30:09,779
quickly if they modify some file that

727
00:30:09,779 --> 00:30:12,119
might be very important to invoke a

728
00:30:12,119 --> 00:30:15,110
security review so in our example here

729
00:30:15,110 --> 00:30:17,610
we've got this account controller on

730
00:30:17,610 --> 00:30:20,190
line two and we've got this checksum

731
00:30:20,190 --> 00:30:21,720
associated with it the only

732
00:30:21,720 --> 00:30:24,029
responsibility of this unit test is to

733
00:30:24,029 --> 00:30:26,850
just verify that the file has not been

734
00:30:26,850 --> 00:30:29,100
changed so if we haven't touched it the

735
00:30:29,100 --> 00:30:31,169
checksum is the same the unit test moves

736
00:30:31,169 --> 00:30:33,600
along if I come in here and change the

737
00:30:33,600 --> 00:30:35,970
account controller the pipeline's going

738
00:30:35,970 --> 00:30:39,869
to stop in it in the real world I would

739
00:30:39,869 --> 00:30:41,759
have another line under 15 that maybe

740
00:30:41,759 --> 00:30:43,860
sends off a slack notification to the

741
00:30:43,860 --> 00:30:47,190
security team to alert them if one of

742
00:30:47,190 --> 00:30:48,990
these files is modified so that can

743
00:30:48,990 --> 00:30:51,299
easily open up kind of a security review

744
00:30:51,299 --> 00:30:53,789
we can do a differential on that pull

745
00:30:53,789 --> 00:30:56,519
request for example and make sure that

746
00:30:56,519 --> 00:30:58,139
the code is secure make sure it's what

747
00:30:58,139 --> 00:31:00,690
we want it to be and then we can come in

748
00:31:00,690 --> 00:31:02,369
and adjust this checksum and then the

749
00:31:02,369 --> 00:31:03,929
build pipeline will just pick up and

750
00:31:03,929 --> 00:31:05,490
start running again after we've done the

751
00:31:05,490 --> 00:31:09,529
review on that high risk

752
00:31:10,020 --> 00:31:12,159
hopefully your I don't know I've gone

753
00:31:12,159 --> 00:31:14,620
through this relatively quickly but it's

754
00:31:14,620 --> 00:31:16,270
really just a bunch of negative test

755
00:31:16,270 --> 00:31:18,130
cases that we can wire into the system

756
00:31:18,130 --> 00:31:21,309
to get us to the point where engineers

757
00:31:21,309 --> 00:31:23,230
can run that pre-commit and then we

758
00:31:23,230 --> 00:31:25,960
start building it into our continuous

759
00:31:25,960 --> 00:31:30,340
integration pipelines so this is where

760
00:31:30,340 --> 00:31:32,230
we start to have more fun right now we

761
00:31:32,230 --> 00:31:34,270
can automate this once the code is there

762
00:31:34,270 --> 00:31:36,490
and I've got some examples set up so

763
00:31:36,490 --> 00:31:38,710
after we go through this quick section I

764
00:31:38,710 --> 00:31:40,840
can kind of pop up you know vs code in a

765
00:31:40,840 --> 00:31:42,309
Jenkins box if you want to take a look

766
00:31:42,309 --> 00:31:43,570
at that or if you have lots of fun

767
00:31:43,570 --> 00:31:46,059
questions we can kind of go through that

768
00:31:46,059 --> 00:31:49,090
same anything that is pressing on the

769
00:31:49,090 --> 00:31:50,559
board right now that we should pause and

770
00:31:50,559 --> 00:31:54,970
maybe take a look at at the moment no I

771
00:31:54,970 --> 00:31:58,210
think we're good to carry on but as Eric

772
00:31:58,210 --> 00:32:00,250
said any sort of questions please pop

773
00:32:00,250 --> 00:32:01,539
them in there and I will get them over

774
00:32:01,539 --> 00:32:04,659
to him but so far so good so let's go up

775
00:32:04,659 --> 00:32:08,649
all right rock on in this moment this is

776
00:32:08,649 --> 00:32:09,940
where we take all of our hard work

777
00:32:09,940 --> 00:32:12,460
pre-commit and we know that we can run

778
00:32:12,460 --> 00:32:14,799
it locally and we're going to take that

779
00:32:14,799 --> 00:32:18,010
and kind of move it out into our build

780
00:32:18,010 --> 00:32:20,590
pipelines so up to this point let me

781
00:32:20,590 --> 00:32:22,059
actually just pause here and I'll kind

782
00:32:22,059 --> 00:32:25,270
of switch the screen share over to some

783
00:32:25,270 --> 00:32:27,190
examples that should look pretty

784
00:32:27,190 --> 00:32:29,289
familiar to you after what we just

785
00:32:29,289 --> 00:32:33,010
talked about so here's a theory here's

786
00:32:33,010 --> 00:32:36,850
some inline data on line 43 44 and 45

787
00:32:36,850 --> 00:32:40,149
and what I've got set up and I just ran

788
00:32:40,149 --> 00:32:41,740
the dotnet test so you can see in the

789
00:32:41,740 --> 00:32:44,020
terminal down here we've got eight

790
00:32:44,020 --> 00:32:46,539
passing test cases and two ER failing so

791
00:32:46,539 --> 00:32:48,820
the engineers at this point know hey

792
00:32:48,820 --> 00:32:50,559
we've got some things that we need to

793
00:32:50,559 --> 00:32:54,520
fit so let me actually get rid of line

794
00:32:54,520 --> 00:32:58,179
45 and we'll bring in the actual real

795
00:32:58,179 --> 00:33:01,450
security unit test case here so now

796
00:33:01,450 --> 00:33:02,620
we're making sure and this could be

797
00:33:02,620 --> 00:33:04,270
Sam's account it could be whatever

798
00:33:04,270 --> 00:33:06,039
you're just playing with that might be

799
00:33:06,039 --> 00:33:08,289
that super secret account and we're

800
00:33:08,289 --> 00:33:10,750
saying look the admin should never be

801
00:33:10,750 --> 00:33:12,520
able to log in with a password of admin

802
00:33:12,520 --> 00:33:14,669
notice we've got the 400 bad request

803
00:33:14,669 --> 00:33:17,380
status code that we're expecting the JWT

804
00:33:17,380 --> 00:33:19,510
falls basically is saying that this

805
00:33:19,510 --> 00:33:19,830
should

806
00:33:19,830 --> 00:33:25,049
never be issuing a valid JWT so if we

807
00:33:25,049 --> 00:33:28,470
run our dotnet test method here with

808
00:33:28,470 --> 00:33:31,440
against our new code what we can do is

809
00:33:31,440 --> 00:33:34,460
actually validate yes we should start

810
00:33:34,460 --> 00:33:37,860
passing this negative test case again so

811
00:33:37,860 --> 00:33:39,600
we still have one additional one that

812
00:33:39,600 --> 00:33:41,640
I'll talk about here in a moment now

813
00:33:41,640 --> 00:33:43,740
we've run our test case notice now we've

814
00:33:43,740 --> 00:33:47,460
got ten official tests nine or passing

815
00:33:47,460 --> 00:33:49,710
we're still failing one of them which is

816
00:33:49,710 --> 00:33:51,690
our high-risk code change so I put in a

817
00:33:51,690 --> 00:33:54,360
bad hash here so if I scroll up through

818
00:33:54,360 --> 00:33:57,750
this input let's take a look it says the

819
00:33:57,750 --> 00:34:01,019
expected result was this hash but the

820
00:34:01,019 --> 00:34:03,929
real result was this ADF hash so let's

821
00:34:03,929 --> 00:34:06,090
copy that we'll go into our high-risk

822
00:34:06,090 --> 00:34:09,179
code test here and zip over to our hash

823
00:34:09,179 --> 00:34:12,179
value and update this so pretend in the

824
00:34:12,179 --> 00:34:14,159
real world I just did the security

825
00:34:14,159 --> 00:34:15,810
review on the authentication controller

826
00:34:15,810 --> 00:34:18,359
I checked out the changes made sure that

827
00:34:18,359 --> 00:34:20,760
maybe one of the interns or somebody

828
00:34:20,760 --> 00:34:22,500
that doesn't really understand the login

829
00:34:22,500 --> 00:34:25,260
logout functionality very well didn't do

830
00:34:25,260 --> 00:34:26,520
something that was going to compromise

831
00:34:26,520 --> 00:34:28,349
us from a security perspective I'm

832
00:34:28,349 --> 00:34:30,149
comfortable with the new contents of the

833
00:34:30,149 --> 00:34:33,750
file I just update this test case run it

834
00:34:33,750 --> 00:34:37,168
again we'll let this kick through and in

835
00:34:37,168 --> 00:34:40,139
theory if all is well we should have

836
00:34:40,139 --> 00:34:43,230
clean results at this point so we can

837
00:34:43,230 --> 00:34:47,219
let this go notice now we've got ten

838
00:34:47,219 --> 00:34:50,070
tests ten or passing we validated all of

839
00:34:50,070 --> 00:34:52,530
this is good in our build pipeline

840
00:34:52,530 --> 00:34:55,080
engineers at this point we're

841
00:34:55,080 --> 00:34:57,089
comfortable with the security review so

842
00:34:57,089 --> 00:34:58,500
I'll put a committed here security

843
00:34:58,500 --> 00:35:03,380
review fixed failing security unit tests

844
00:35:03,380 --> 00:35:06,089
type at all that's one of the bad parts

845
00:35:06,089 --> 00:35:08,369
of doing demos is that typing is just on

846
00:35:08,369 --> 00:35:11,550
display for everybody so we've committed

847
00:35:11,550 --> 00:35:14,750
that let's push this out to our

848
00:35:14,750 --> 00:35:20,520
repository and now our code changes are

849
00:35:20,520 --> 00:35:22,560
staged up for a pipeline to take over

850
00:35:22,560 --> 00:35:24,839
and this kind of gets into the auto side

851
00:35:24,839 --> 00:35:27,359
so we validated everything locally we

852
00:35:27,359 --> 00:35:28,830
trust our engineers to do the right

853
00:35:28,830 --> 00:35:32,890
thing you need an audit trail that says

854
00:35:32,890 --> 00:35:35,200
we are doing this regularly and that's

855
00:35:35,200 --> 00:35:37,209
where it gets into the continuous

856
00:35:37,209 --> 00:35:41,440
integration piece of the house so let's

857
00:35:41,440 --> 00:35:43,779
take a look at this this is a

858
00:35:43,779 --> 00:35:45,400
prerequisite for doing anything I'm

859
00:35:45,400 --> 00:35:48,190
going to describe coming up you need to

860
00:35:48,190 --> 00:35:50,440
actually have tests and you need to

861
00:35:50,440 --> 00:35:52,209
execute them inside of your build

862
00:35:52,209 --> 00:35:54,339
pipeline so that commit I just made

863
00:35:54,339 --> 00:35:56,650
triggers the automated pipeline will

864
00:35:56,650 --> 00:35:58,450
reacts to keep the unit tests which is

865
00:35:58,450 --> 00:36:01,599
going to give fast feedback to engineers

866
00:36:01,599 --> 00:36:04,119
and the security folks if you have

867
00:36:04,119 --> 00:36:06,069
certain security unit tests and they've

868
00:36:06,069 --> 00:36:08,049
got them logically organized in some

869
00:36:08,049 --> 00:36:10,809
sort of a namespace or a package you can

870
00:36:10,809 --> 00:36:12,849
easily query those out and just notify

871
00:36:12,849 --> 00:36:15,190
security specifically if any of these

872
00:36:15,190 --> 00:36:17,739
fail what you end up with is just

873
00:36:17,739 --> 00:36:19,809
continuous security compliance this is

874
00:36:19,809 --> 00:36:21,729
where your auditors will look at these

875
00:36:21,729 --> 00:36:23,589
reports your security teams looking at

876
00:36:23,589 --> 00:36:25,599
the reports engineers you know you're

877
00:36:25,599 --> 00:36:27,219
always looking at your unit test reports

878
00:36:27,219 --> 00:36:29,709
because if you break one of these or if

879
00:36:29,709 --> 00:36:31,479
you fail one of these you know you've

880
00:36:31,479 --> 00:36:32,950
broke the build and you have to go buy

881
00:36:32,950 --> 00:36:34,690
beer at happy hour on Friday for the

882
00:36:34,690 --> 00:36:36,039
rest of the dev team at least that's how

883
00:36:36,039 --> 00:36:38,140
we play the game here in our

884
00:36:38,140 --> 00:36:40,420
organization so nobody wants to fail the

885
00:36:40,420 --> 00:36:44,769
pipeline generating the results will

886
00:36:44,769 --> 00:36:46,569
take that dotnet test command we need

887
00:36:46,569 --> 00:36:49,749
data the pipeline has to operate on some

888
00:36:49,749 --> 00:36:52,479
sort of results so we can output it to

889
00:36:52,479 --> 00:36:54,969
this TRX logger in this ecosystem could

890
00:36:54,969 --> 00:36:57,549
be j unit could be x unit whatever the

891
00:36:57,549 --> 00:36:59,440
format is we need it in a format that

892
00:36:59,440 --> 00:37:02,440
the pipeline can't parse digest and make

893
00:37:02,440 --> 00:37:04,119
intelligent decisions based on the

894
00:37:04,119 --> 00:37:07,420
results so as we run the logger we'll

895
00:37:07,420 --> 00:37:09,579
get this XML file looks similar to this

896
00:37:09,579 --> 00:37:11,559
so you've got here's how many tests

897
00:37:11,559 --> 00:37:13,029
here's somebody passed here's how many

898
00:37:13,029 --> 00:37:15,699
failed and then the pipeline can parse

899
00:37:15,699 --> 00:37:18,759
that now I'm taking this to the next

900
00:37:18,759 --> 00:37:20,559
level all of my build systems

901
00:37:20,559 --> 00:37:23,709
essentially operate inside of containers

902
00:37:23,709 --> 00:37:26,619
so I use docker to just run a job and

903
00:37:26,619 --> 00:37:27,969
then the container just dies it goes

904
00:37:27,969 --> 00:37:29,739
away so I don't have to operate build

905
00:37:29,739 --> 00:37:32,890
servers standing up and running 24/7 so

906
00:37:32,890 --> 00:37:35,019
this is a docker file that's taking the

907
00:37:35,019 --> 00:37:37,449
docker image copying that's the source

908
00:37:37,449 --> 00:37:39,099
code and the test code into the

909
00:37:39,099 --> 00:37:41,859
container running a build on it and then

910
00:37:41,859 --> 00:37:43,839
the very last line that entry point that

911
00:37:43,839 --> 00:37:45,819
is the dotnet

912
00:37:45,819 --> 00:37:48,190
set the logger to output the XML file

913
00:37:48,190 --> 00:37:50,619
and I can show you this in the pipeline

914
00:37:50,619 --> 00:37:53,890
here in a moment I go into our pipeline

915
00:37:53,890 --> 00:37:56,229
which I'm using Jenkins in this demo you

916
00:37:56,229 --> 00:37:57,729
could use anything you could use

917
00:37:57,729 --> 00:37:59,709
teamcity you could use circle you could

918
00:37:59,709 --> 00:38:03,599
use Azure DevOps Jenkins I typically use

919
00:38:03,599 --> 00:38:06,009
because it's free it's open source it's

920
00:38:06,009 --> 00:38:07,869
one of the most popular CI systems on

921
00:38:07,869 --> 00:38:09,999
the planet from a plugins perspective

922
00:38:09,999 --> 00:38:12,160
and I just execute a couple shell

923
00:38:12,160 --> 00:38:14,619
commands to do a docker run use that

924
00:38:14,619 --> 00:38:17,410
image run my test Suites and now I've

925
00:38:17,410 --> 00:38:19,719
got an XML file sitting there that I can

926
00:38:19,719 --> 00:38:23,229
parse in the post build phase we grab

927
00:38:23,229 --> 00:38:26,109
that TRX file and we know it's an MS

928
00:38:26,109 --> 00:38:27,759
test file and we'll just set a threshold

929
00:38:27,759 --> 00:38:30,880
say if any of these fail the pipeline

930
00:38:30,880 --> 00:38:33,819
has to stop so we're getting into just

931
00:38:33,819 --> 00:38:35,289
standard more devops but we're

932
00:38:35,289 --> 00:38:37,269
implementing all of our security unit

933
00:38:37,269 --> 00:38:40,599
tests that have been built in that pre

934
00:38:40,599 --> 00:38:41,799
commit phase so now we're kind of

935
00:38:41,799 --> 00:38:44,920
integrating dev and security and ops all

936
00:38:44,920 --> 00:38:47,529
into the same process here the end

937
00:38:47,529 --> 00:38:49,690
result that's what all of our hard work

938
00:38:49,690 --> 00:38:52,869
does so looking at the test results we

939
00:38:52,869 --> 00:38:55,059
got this API we know the unit tests are

940
00:38:55,059 --> 00:38:58,630
failing in the screenshot we're in that

941
00:38:58,630 --> 00:39:00,069
default state I just showed you we've

942
00:39:00,069 --> 00:39:03,930
got ten total tests two were failing

943
00:39:03,930 --> 00:39:06,729
notice that we are red we have to fix

944
00:39:06,729 --> 00:39:09,849
that so in the graph to the right you

945
00:39:09,849 --> 00:39:11,829
can see trending and all the fun things

946
00:39:11,829 --> 00:39:14,680
that are going along with that now we

947
00:39:14,680 --> 00:39:17,289
can actually kind of take a look at what

948
00:39:17,289 --> 00:39:19,569
this is doing in our more fixed

949
00:39:19,569 --> 00:39:21,729
environment so I will pick this build

950
00:39:21,729 --> 00:39:24,579
off again we can kind of let this run in

951
00:39:24,579 --> 00:39:28,269
in theory if the the demo dragons are

952
00:39:28,269 --> 00:39:30,309
going to work with me instead of against

953
00:39:30,309 --> 00:39:33,729
me we should see the unit tests go from

954
00:39:33,729 --> 00:39:36,069
ten and two failures to ten and zero

955
00:39:36,069 --> 00:39:39,279
failures my on poor scan by the way

956
00:39:39,279 --> 00:39:41,319
that's running next which is completely

957
00:39:41,319 --> 00:39:43,269
unrelated to this topic and it's more of

958
00:39:43,269 --> 00:39:44,949
a container secure you scanner is going

959
00:39:44,949 --> 00:39:46,900
to fail miserably so we should at least

960
00:39:46,900 --> 00:39:51,069
get past our unit test step and see the

961
00:39:51,069 --> 00:39:54,269
trending moving in the right direction

962
00:39:54,269 --> 00:39:58,749
so that is the pipeline doing its thing

963
00:39:58,749 --> 00:39:59,840
we'll let this pause

964
00:39:59,840 --> 00:40:01,340
for a moment and then I'll kind of just

965
00:40:01,340 --> 00:40:03,890
explore this and we can kind of open it

966
00:40:03,890 --> 00:40:06,920
up for questions let's do this while

967
00:40:06,920 --> 00:40:08,780
that's running instead of waiting for it

968
00:40:08,780 --> 00:40:11,510
keys to success this is my summary slide

969
00:40:11,510 --> 00:40:14,330
so that means that we are officially to

970
00:40:14,330 --> 00:40:17,270
the end of what I am planning on talking

971
00:40:17,270 --> 00:40:21,080
about today security teams in general

972
00:40:21,080 --> 00:40:23,270
this is just me working with Apps Tech

973
00:40:23,270 --> 00:40:25,610
and InfoSec teams for a long time often

974
00:40:25,610 --> 00:40:29,090
don't view unit testing as a powerful

975
00:40:29,090 --> 00:40:31,700
security control my number one takeaway

976
00:40:31,700 --> 00:40:34,490
for you as devs in this space is to stop

977
00:40:34,490 --> 00:40:37,820
paying for these glorified super

978
00:40:37,820 --> 00:40:40,520
expensive scanners to find problems and

979
00:40:40,520 --> 00:40:43,510
spending tons and tons of resources

980
00:40:43,510 --> 00:40:47,300
customizing them to make them work and

981
00:40:47,300 --> 00:40:49,510
instead you can just write really

982
00:40:49,510 --> 00:40:52,550
effective security base unit tests to

983
00:40:52,550 --> 00:40:54,590
find those same low-hanging fruits that

984
00:40:54,590 --> 00:40:58,880
usually show up in your scans that's the

985
00:40:58,880 --> 00:41:00,500
biggest takeaway for dev in this

986
00:41:00,500 --> 00:41:03,380
ecosystem software engineers are great

987
00:41:03,380 --> 00:41:06,380
at these work with InfoSec you know take

988
00:41:06,380 --> 00:41:08,240
the security team or the engineers out

989
00:41:08,240 --> 00:41:10,220
to lunch for example and just talk about

990
00:41:10,220 --> 00:41:12,620
abuse cases for a bit figure out what

991
00:41:12,620 --> 00:41:14,360
you need then wire them into your

992
00:41:14,360 --> 00:41:16,190
security scanners start monitoring your

993
00:41:16,190 --> 00:41:18,620
high-risk code for changes and leverage

994
00:41:18,620 --> 00:41:21,590
unit tests to do that so overall that's

995
00:41:21,590 --> 00:41:23,990
kind of leaky bullets the key takeaways

996
00:41:23,990 --> 00:41:28,340
from today at this point I'll leave it

997
00:41:28,340 --> 00:41:31,070
on the summary slide and let's see if

998
00:41:31,070 --> 00:41:33,770
our pipeline works let's see hey look at

999
00:41:33,770 --> 00:41:37,970
that so now we've got 10 test cases zero

1000
00:41:37,970 --> 00:41:40,130
of them are failing now I mentioned the

1001
00:41:40,130 --> 00:41:41,540
on course can look fail that's for a

1002
00:41:41,540 --> 00:41:43,250
different topic for a different case and

1003
00:41:43,250 --> 00:41:45,200
we'll maybe continue this game later at

1004
00:41:45,200 --> 00:41:47,000
some other point in time and talk about

1005
00:41:47,000 --> 00:41:49,880
containers or any other component

1006
00:41:49,880 --> 00:41:51,770
analysis scans that are out there but

1007
00:41:51,770 --> 00:41:53,630
let's look at our trending here notice

1008
00:41:53,630 --> 00:41:55,280
our chart looks much better that we went

1009
00:41:55,280 --> 00:41:57,500
from one failing to two failing the most

1010
00:41:57,500 --> 00:41:59,660
recent bill nobody's failing everybody's

1011
00:41:59,660 --> 00:42:02,270
happy you can always get the report

1012
00:42:02,270 --> 00:42:04,100
artifacts out of your build pipelines as

1013
00:42:04,100 --> 00:42:07,220
well auditors love this stuff when you

1014
00:42:07,220 --> 00:42:09,350
can prove that security is always being

1015
00:42:09,350 --> 00:42:11,870
achieved in this ecosystem

1016
00:42:11,870 --> 00:42:14,300
the Jenkins task is here I'm happy to

1017
00:42:14,300 --> 00:42:16,340
send this information over to anyone

1018
00:42:16,340 --> 00:42:18,920
that wants to see it but as you can see

1019
00:42:18,920 --> 00:42:20,930
as I scroll down here the docker

1020
00:42:20,930 --> 00:42:22,670
commands I showed on the slide pretty

1021
00:42:22,670 --> 00:42:23,540
much verbatim

1022
00:42:23,540 --> 00:42:26,060
we're just doing a docker run running

1023
00:42:26,060 --> 00:42:28,010
that unit tests here's the post build

1024
00:42:28,010 --> 00:42:30,380
action that processes those results and

1025
00:42:30,380 --> 00:42:33,170
gives us the data so that's kind of just

1026
00:42:33,170 --> 00:42:35,720
some Jenkins kung-fu in a nutshell for

1027
00:42:35,720 --> 00:42:37,250
any of you that haven't got to play the

1028
00:42:37,250 --> 00:42:39,650
DevOps game yet I'm happy to answer

1029
00:42:39,650 --> 00:42:42,560
questions about really any of the above

1030
00:42:42,560 --> 00:42:46,550
at this point I'll leave the slide up on

1031
00:42:46,550 --> 00:42:48,950
the screen and Sam I guess at this point

1032
00:42:48,950 --> 00:42:51,290
I'll let you open it up for just chatter

1033
00:42:51,290 --> 00:42:54,610
and whatever anybody wants to discuss

1034
00:42:54,610 --> 00:42:56,960
amazing thank you Eric I think we have a

1035
00:42:56,960 --> 00:42:58,340
question coming through I see someone's

1036
00:42:58,340 --> 00:42:59,660
hopping away but let's give them a

1037
00:42:59,660 --> 00:43:02,090
minute and if anyone is missing don't

1038
00:43:02,090 --> 00:43:03,710
forget to jump into the live session

1039
00:43:03,710 --> 00:43:05,150
channel on the SAC and we can answer

1040
00:43:05,150 --> 00:43:07,370
those and I know you mentioned you have

1041
00:43:07,370 --> 00:43:08,810
quite a few resources if you want to

1042
00:43:08,810 --> 00:43:10,400
send them to me we can put them in these

1043
00:43:10,400 --> 00:43:13,760
show notes of the session as well on the

1044
00:43:13,760 --> 00:43:17,120
website Eric and then a member access

1045
00:43:17,120 --> 00:43:19,220
all those sort of all that information

1046
00:43:19,220 --> 00:43:21,140
but yeah a really really great talk

1047
00:43:21,140 --> 00:43:23,090
let's see if this question has come

1048
00:43:23,090 --> 00:43:24,170
through that's good my few more minutes

1049
00:43:24,170 --> 00:43:26,990
you know who you are typing away if you

1050
00:43:26,990 --> 00:43:28,550
want to push Intel be able to see your

1051
00:43:28,550 --> 00:43:42,010
question but thank you here we go so

1052
00:43:42,010 --> 00:43:45,700
and I'm gonna butcher this name I'm very

1053
00:43:45,700 --> 00:43:48,340
very sorry about that but soy mayor I

1054
00:43:48,340 --> 00:43:50,170
would like to know how you can use a

1055
00:43:50,170 --> 00:43:54,300
spurt am I saying that right it's better

1056
00:43:54,300 --> 00:43:57,130
she creates let's add in a sequel

1057
00:43:57,130 --> 00:44:00,570
injection payload from our test cases oh

1058
00:44:00,570 --> 00:44:02,950
that's a great question so sputter

1059
00:44:02,950 --> 00:44:05,680
itself and incest talk if you go out to

1060
00:44:05,680 --> 00:44:07,510
the blackhat archives to take a peek at

1061
00:44:07,510 --> 00:44:07,720
that

1062
00:44:07,720 --> 00:44:11,740
he's got test runners builds into it for

1063
00:44:11,740 --> 00:44:14,020
I know he's gonna slap me for not

1064
00:44:14,020 --> 00:44:15,490
getting this right but I know spring

1065
00:44:15,490 --> 00:44:17,590
boots in there I know dotnet cores in

1066
00:44:17,590 --> 00:44:20,380
there a pretty sure Python is in there

1067
00:44:20,380 --> 00:44:23,230
and I want to say baby ruby but don't

1068
00:44:23,230 --> 00:44:24,460
quote me on it just check out the

1069
00:44:24,460 --> 00:44:27,580
repository and the idea is that you

1070
00:44:27,580 --> 00:44:30,400
create this definition file so you can

1071
00:44:30,400 --> 00:44:32,290
create here's the list of all the

1072
00:44:32,290 --> 00:44:34,450
endpoints I want you to go out and fuzz

1073
00:44:34,450 --> 00:44:37,360
in a sense for me so you can say okay

1074
00:44:37,360 --> 00:44:40,300
here's this slash API slash you know you

1075
00:44:40,300 --> 00:44:42,010
know get accounts in point or whatever

1076
00:44:42,010 --> 00:44:45,550
and you define all the parameters and in

1077
00:44:45,550 --> 00:44:47,170
your config file you just set that up

1078
00:44:47,170 --> 00:44:50,410
that's it what sputter will do is when

1079
00:44:50,410 --> 00:44:52,390
you execute it it's a Python script and

1080
00:44:52,390 --> 00:44:54,040
you can run it from your CI builds as

1081
00:44:54,040 --> 00:44:57,220
well it goes in and it tests all of the

1082
00:44:57,220 --> 00:44:59,170
endpoints and all the parameters in your

1083
00:44:59,170 --> 00:45:01,740
configuration file for the various

1084
00:45:01,740 --> 00:45:04,240
sequel injection payloads cross-site

1085
00:45:04,240 --> 00:45:06,100
scripting payloads I believe you've got

1086
00:45:06,100 --> 00:45:08,650
like XPath and LDAP and he's got he's

1087
00:45:08,650 --> 00:45:11,830
really just short concise 5 to 10

1088
00:45:11,830 --> 00:45:14,650
character payload lists inside of the

1089
00:45:14,650 --> 00:45:17,260
framework so you don't really have to do

1090
00:45:17,260 --> 00:45:20,590
anything except define the endpoints in

1091
00:45:20,590 --> 00:45:23,380
your config file and then add that job

1092
00:45:23,380 --> 00:45:25,900
into your build process it takes care of

1093
00:45:25,900 --> 00:45:27,880
the fuzzing seth has predefined all the

1094
00:45:27,880 --> 00:45:29,710
payloads for you so you don't really

1095
00:45:29,710 --> 00:45:31,480
have to know a lot I mean you should

1096
00:45:31,480 --> 00:45:33,220
read the payload lists I would highly

1097
00:45:33,220 --> 00:45:35,590
encourage you to do that so you know

1098
00:45:35,590 --> 00:45:37,750
what it's looking for but all you have

1099
00:45:37,750 --> 00:45:40,000
to do is just defined in a sense kind of

1100
00:45:40,000 --> 00:45:43,810
a swagger API style configuration and it

1101
00:45:43,810 --> 00:45:45,190
does the heavy lifting and the scanning

1102
00:45:45,190 --> 00:45:47,380
for you and tells you about anything bad

1103
00:45:47,380 --> 00:45:51,270
that may have resulted from the scam

1104
00:45:51,450 --> 00:45:54,180
amazing thank you so much Eric

1105
00:45:54,180 --> 00:45:56,200
we don't have any other questions on the

1106
00:45:56,200 --> 00:45:57,730
selection at the moment but as I

1107
00:45:57,730 --> 00:45:59,440
mentioned before if anyone does have any

1108
00:45:59,440 --> 00:46:01,120
questions pop it on there Eric is also

1109
00:46:01,120 --> 00:46:03,580
now in our select group and he said here

1110
00:46:03,580 --> 00:46:06,760
am John 20 and but if you put in there I

1111
00:46:06,760 --> 00:46:08,260
can take him in and please if you're

1112
00:46:08,260 --> 00:46:09,850
watching this at a later date

1113
00:46:09,850 --> 00:46:11,650
and have questions I'm sure Eric

1114
00:46:11,650 --> 00:46:13,480
wouldn't mind answering them as they

1115
00:46:13,480 --> 00:46:15,310
come in so if you're not watching live

1116
00:46:15,310 --> 00:46:17,290
now and you watch it later please pop

1117
00:46:17,290 --> 00:46:20,140
your your questions in there and we can

1118
00:46:20,140 --> 00:46:22,120
get them answered but again thank you so

1119
00:46:22,120 --> 00:46:25,120
much Eric for your time today I hope you

1120
00:46:25,120 --> 00:46:27,130
this is not the last time we have you on

1121
00:46:27,130 --> 00:46:28,210
and it seems like there are some

1122
00:46:28,210 --> 00:46:30,100
follow-on sessions that could be had so

1123
00:46:30,100 --> 00:46:33,600
thank you very much thank you

1124
00:46:33,600 --> 00:46:37,710
perfect if anyone that is listening and

1125
00:46:37,710 --> 00:46:40,450
the session will go live on the secure

1126
00:46:40,450 --> 00:46:41,980
they're going to put their comm and any

1127
00:46:41,980 --> 00:46:44,050
minute now I just have put it up and so

1128
00:46:44,050 --> 00:46:45,430
you can rewatch shirts share it with

1129
00:46:45,430 --> 00:46:49,390
friends and rewind and go back to any of

1130
00:46:49,390 --> 00:46:51,580
sort of those and references that Eric

1131
00:46:51,580 --> 00:46:53,910
mentioned but as I said we'll also put a

1132
00:46:53,910 --> 00:46:56,770
resources folder with all of the

1133
00:46:56,770 --> 00:46:59,890
documents if you enjoyed this as I said

1134
00:46:59,890 --> 00:47:02,620
please share we're trying to be great

1135
00:47:02,620 --> 00:47:04,180
community and get everyone to know about

1136
00:47:04,180 --> 00:47:06,520
it and give me any feedback and next

1137
00:47:06,520 --> 00:47:08,980
session will be in two weeks time and it

1138
00:47:08,980 --> 00:47:11,020
will be led by Sam Newman he's going to

1139
00:47:11,020 --> 00:47:13,000
be more urging microservices security

1140
00:47:13,000 --> 00:47:17,170
talk on insecure transit so please have

1141
00:47:17,170 --> 00:47:18,400
a look out for that but I will remind

1142
00:47:18,400 --> 00:47:20,620
you about it nothing two weeks time but

1143
00:47:20,620 --> 00:47:22,240
that's all for today a huge thank you

1144
00:47:22,240 --> 00:47:25,720
again to Eric and have a good evening or

1145
00:47:25,720 --> 00:47:27,610
day or morning or wherever you are a

1146
00:47:27,610 --> 00:47:29,970
good time

