1
00:00:06,890 --> 00:00:10,050
okay I mean we are live Fletcher

2
00:00:10,050 --> 00:00:12,960
so I welcome thanks for joining us on

3
00:00:12,960 --> 00:00:17,520
the list of today's episode of the skill

4
00:00:17,520 --> 00:00:19,380
developer so then hello to everybody

5
00:00:19,380 --> 00:00:22,439
who's joining us and sat in the live

6
00:00:22,439 --> 00:00:26,369
session so firstly it may be the first

7
00:00:26,369 --> 00:00:28,019
time a lot of people at seeing me my

8
00:00:28,019 --> 00:00:31,380
face so my name is Oliver Byrne

9
00:00:31,380 --> 00:00:33,480
I'm a community manager with sneaks what

10
00:00:33,480 --> 00:00:36,360
new well about a month into into working

11
00:00:36,360 --> 00:00:39,090
with company I'm working with some

12
00:00:39,090 --> 00:00:41,989
hepburn many of you will know already so

13
00:00:41,989 --> 00:00:45,660
today's session is about modern app

14
00:00:45,660 --> 00:00:48,239
subcultures so we have with us today we

15
00:00:48,239 --> 00:00:49,770
have Fletcher Heiser who is the founder

16
00:00:49,770 --> 00:00:52,649
and CEO of ponta - Oh calm so hello and

17
00:00:52,649 --> 00:00:57,480
welcome to the session and so before we

18
00:00:57,480 --> 00:01:00,539
dive into today's content we just want

19
00:01:00,539 --> 00:01:02,399
to make a quick note that we always are

20
00:01:02,399 --> 00:01:03,989
working feedback on how we've run these

21
00:01:03,989 --> 00:01:06,360
sessions so whether you want to give us

22
00:01:06,360 --> 00:01:08,880
feedback across the slack community or

23
00:01:08,880 --> 00:01:10,140
you can find us on twitter by searching

24
00:01:10,140 --> 00:01:12,240
for the secure developer we're always

25
00:01:12,240 --> 00:01:13,979
interested in how we run these sessions

26
00:01:13,979 --> 00:01:16,439
the content speakers to make sure that

27
00:01:16,439 --> 00:01:18,479
it's of the most value to everyone so

28
00:01:18,479 --> 00:01:20,130
any suggestions and feedback people have

29
00:01:20,130 --> 00:01:22,200
will always welcome to those across the

30
00:01:22,200 --> 00:01:25,320
avenues I'm for today's session for

31
00:01:25,320 --> 00:01:27,060
those people who are actually watching

32
00:01:27,060 --> 00:01:28,650
us on YouTube through the live stream

33
00:01:28,650 --> 00:01:30,720
and if you're not in the slack community

34
00:01:30,720 --> 00:01:32,700
and we always encourage you to join us

35
00:01:32,700 --> 00:01:34,920
and you can find the link on our website

36
00:01:34,920 --> 00:01:36,360
and that is the best place to ask

37
00:01:36,360 --> 00:01:37,799
questions during the session over

38
00:01:37,799 --> 00:01:40,170
session our speaker Fletcher is actually

39
00:01:40,170 --> 00:01:42,119
in the slack community and be able to

40
00:01:42,119 --> 00:01:43,790
answer the questions that you have

41
00:01:43,790 --> 00:01:46,229
either to data during our that we have

42
00:01:46,229 --> 00:01:49,530
with us or procession and once the

43
00:01:49,530 --> 00:01:51,810
session is over for anyone you'd be able

44
00:01:51,810 --> 00:01:53,130
to watch the recording on our web site

45
00:01:53,130 --> 00:01:54,899
you can share it with your friends

46
00:01:54,899 --> 00:01:56,630
colleagues or shouldn't networks and

47
00:01:56,630 --> 00:01:59,250
just the final note that the SKA

48
00:01:59,250 --> 00:02:01,590
developer is brought to you by sleep so

49
00:02:01,590 --> 00:02:03,299
our aim is to create a vending neutral

50
00:02:03,299 --> 00:02:04,770
space so I wouldn't share knowledge and

51
00:02:04,770 --> 00:02:06,869
best practices related to security

52
00:02:06,869 --> 00:02:10,080
software so that's the intro from me and

53
00:02:10,080 --> 00:02:11,790
so without further ado I'm going to hand

54
00:02:11,790 --> 00:02:13,200
over to Fletcher who's going to take

55
00:02:13,200 --> 00:02:14,819
this

56
00:02:14,819 --> 00:02:17,319
thanks so much Oliver thanks for having

57
00:02:17,319 --> 00:02:19,870
me I've really enjoyed watching and

58
00:02:19,870 --> 00:02:21,810
listening to the secure developer so

59
00:02:21,810 --> 00:02:24,130
hopefully I can continue the trend with

60
00:02:24,130 --> 00:02:25,930
some interesting relevant content for

61
00:02:25,930 --> 00:02:29,739
you guys let me see I'm going to share

62
00:02:29,739 --> 00:02:34,920
my screen and go over into slides here

63
00:02:34,920 --> 00:02:37,260
hello

64
00:02:37,260 --> 00:02:41,050
cool we're going to be doing going over

65
00:02:41,050 --> 00:02:44,709
some modern app sack topics today I will

66
00:02:44,709 --> 00:02:47,410
be in slack over here as well so feel

67
00:02:47,410 --> 00:02:51,160
free to chime in with any questions or

68
00:02:51,160 --> 00:02:53,500
any additions that you might have many

69
00:02:53,500 --> 00:02:56,019
of you are likely going to be experts in

70
00:02:56,019 --> 00:02:57,670
some of these subtopics that we're going

71
00:02:57,670 --> 00:03:01,030
through so feel free to to adds to what

72
00:03:01,030 --> 00:03:03,190
we're going over this will be a really

73
00:03:03,190 --> 00:03:05,739
quick list of lots of different things

74
00:03:05,739 --> 00:03:08,440
and my hope is this you know many of

75
00:03:08,440 --> 00:03:10,840
them will be familiar that's there might

76
00:03:10,840 --> 00:03:12,790
be some nice reminders in there as well

77
00:03:12,790 --> 00:03:16,359
as some new topics for for all of you

78
00:03:16,359 --> 00:03:19,459
also you know will likely not go for an

79
00:03:19,459 --> 00:03:22,249
entire hour so happy to have discussion

80
00:03:22,249 --> 00:03:26,200
in slack or afterwards you know sort of

81
00:03:26,200 --> 00:03:28,760
continuation from from questions from

82
00:03:28,760 --> 00:03:33,109
within slack cool hello

83
00:03:33,109 --> 00:03:35,359
really quick background wise I am

84
00:03:35,359 --> 00:03:38,090
Fletcher my company is hunter too I get

85
00:03:38,090 --> 00:03:39,709
called hunter a lot that's fine you can

86
00:03:39,709 --> 00:03:42,739
call me whatever you like really quick

87
00:03:42,739 --> 00:03:45,230
about 102 so I am a developer by

88
00:03:45,230 --> 00:03:48,290
training has gotten more into security

89
00:03:48,290 --> 00:03:51,379
over the years given lots of pen tests

90
00:03:51,379 --> 00:03:52,819
over the years which is where a lot of

91
00:03:52,819 --> 00:03:56,030
these findings are coming from the sort

92
00:03:56,030 --> 00:03:58,219
of first hand in the industry what we're

93
00:03:58,219 --> 00:03:59,989
actually seeing when when

94
00:03:59,989 --> 00:04:03,109
vulnerabilities turn up hunter 2 focuses

95
00:04:03,109 --> 00:04:05,180
on training developers in writing secure

96
00:04:05,180 --> 00:04:06,909
code so we typically work with companies

97
00:04:06,909 --> 00:04:09,709
and giving interactive labs to the to

98
00:04:09,709 --> 00:04:12,709
their teams so the engineers get to hack

99
00:04:12,709 --> 00:04:14,629
Mull neural applications and then get to

100
00:04:14,629 --> 00:04:16,910
practice patching them back up will

101
00:04:16,910 --> 00:04:18,978
include a quick link at the end and

102
00:04:18,978 --> 00:04:21,139
slack as well but we just released 100

103
00:04:21,139 --> 00:04:24,409
to community so that's basically the the

104
00:04:24,409 --> 00:04:26,900
version for individuals you can just

105
00:04:26,900 --> 00:04:28,520
sign up for free and try out some labs

106
00:04:28,520 --> 00:04:31,159
and we've released a few that's are

107
00:04:31,159 --> 00:04:32,870
pretty relevant to some of these topics

108
00:04:32,870 --> 00:04:35,750
that's you can can poke around and later

109
00:04:35,750 --> 00:04:41,870
on as well so without further ado many

110
00:04:41,870 --> 00:04:43,580
of you have probably heard of the wasp

111
00:04:43,580 --> 00:04:46,639
patent before industry standard most

112
00:04:46,639 --> 00:04:50,389
common sets what most common risks to

113
00:04:50,389 --> 00:04:54,590
applications sequel injection cross-site

114
00:04:54,590 --> 00:04:57,500
scripting all that goodness and for the

115
00:04:57,500 --> 00:04:59,690
most part they haven't changed a whole

116
00:04:59,690 --> 00:05:02,960
lot over the years so you know we're

117
00:05:02,960 --> 00:05:04,340
going to be revisiting them with a

118
00:05:04,340 --> 00:05:08,289
slightly different lens as to what is

119
00:05:08,289 --> 00:05:11,240
what we're seeing out of the OWASP top

120
00:05:11,240 --> 00:05:15,050
10 or potentially outside of the that is

121
00:05:15,050 --> 00:05:17,570
most relevant to a modern web developer

122
00:05:17,570 --> 00:05:19,789
who might be using new technologies but

123
00:05:19,789 --> 00:05:22,370
still falling prey to things like sequel

124
00:05:22,370 --> 00:05:23,960
injection and cross-site scripting so

125
00:05:23,960 --> 00:05:27,260
how is that even possible so I'm calling

126
00:05:27,260 --> 00:05:29,630
this the gotcha top 9

127
00:05:29,630 --> 00:05:32,960
so this is not a scientific process but

128
00:05:32,960 --> 00:05:35,870
just generally some some thoughts from

129
00:05:35,870 --> 00:05:38,630
what we've seen in the industry and from

130
00:05:38,630 --> 00:05:42,740
modern web apps but first some

131
00:05:42,740 --> 00:05:46,370
motivation so why do we care about this

132
00:05:46,370 --> 00:05:49,010
and why does it happen

133
00:05:49,010 --> 00:05:52,570
first off rush deadlines you know we all

134
00:05:52,570 --> 00:05:54,560
write code that sometimes we're not

135
00:05:54,560 --> 00:05:56,210
proud of because we have to get it done

136
00:05:56,210 --> 00:05:58,190
and if that's the incentive you know you

137
00:05:58,190 --> 00:06:00,770
can certainly push out something that

138
00:06:00,770 --> 00:06:03,100
you might have known a little bit better

139
00:06:03,100 --> 00:06:05,870
there's the mysterious fix for a

140
00:06:05,870 --> 00:06:08,870
mysterious bug we've all been in that

141
00:06:08,870 --> 00:06:11,600
situation of something's not working and

142
00:06:11,600 --> 00:06:14,480
my local developments but if I set this

143
00:06:14,480 --> 00:06:15,710
flag differently

144
00:06:15,710 --> 00:06:17,990
it all works I've combined that with the

145
00:06:17,990 --> 00:06:20,420
rush deadline I might just set that flag

146
00:06:20,420 --> 00:06:23,210
and go about my day without taking the

147
00:06:23,210 --> 00:06:26,720
time to go in and figure out maybe based

148
00:06:26,720 --> 00:06:30,080
on some hidden and not very clear

149
00:06:30,080 --> 00:06:32,150
documentation what that flag does and

150
00:06:32,150 --> 00:06:34,880
why it might not be a great idea to flip

151
00:06:34,880 --> 00:06:37,550
it sometimes we just don't know better

152
00:06:37,550 --> 00:06:39,830
most of the time you know we we don't

153
00:06:39,830 --> 00:06:43,430
cover security and standard computer

154
00:06:43,430 --> 00:06:45,980
science a lot of web app development a

155
00:06:45,980 --> 00:06:49,520
lot of the time so it's kind of up to us

156
00:06:49,520 --> 00:06:52,130
to to sharpen our skills or hopefully up

157
00:06:52,130 --> 00:06:53,930
to our employers to help us with that

158
00:06:53,930 --> 00:06:56,560
training but that doesn't always happen

159
00:06:56,560 --> 00:06:59,030
sometimes it does and we think we know

160
00:06:59,030 --> 00:07:01,070
better and a lot of that comes often

161
00:07:01,070 --> 00:07:03,890
from poor training you know if you're

162
00:07:03,890 --> 00:07:07,220
made to watch a really outdated video on

163
00:07:07,220 --> 00:07:09,500
here sequel injection then they show you

164
00:07:09,500 --> 00:07:11,930
a bunch of crafty stuff and PHP and you

165
00:07:11,930 --> 00:07:14,480
go yeah but I'm a django developer I

166
00:07:14,480 --> 00:07:16,970
don't need to worry about that turns out

167
00:07:16,970 --> 00:07:19,040
you do maybe less so or maybe in

168
00:07:19,040 --> 00:07:21,950
different ways but we could all stand to

169
00:07:21,950 --> 00:07:25,000
be more familiar with these topics

170
00:07:25,000 --> 00:07:27,200
sometimes we just don't think it matters

171
00:07:27,200 --> 00:07:30,170
or we aren't incentivized to care you

172
00:07:30,170 --> 00:07:32,240
know this this also has to come from our

173
00:07:32,240 --> 00:07:35,260
management and from our whoever is

174
00:07:35,260 --> 00:07:39,410
guiding us in writing this code if they

175
00:07:39,410 --> 00:07:41,210
don't care about security maybe down the

176
00:07:41,210 --> 00:07:43,190
line we don't either and so

177
00:07:43,190 --> 00:07:44,510
you know that that has to be a team

178
00:07:44,510 --> 00:07:47,810
effort across the board sometimes

179
00:07:47,810 --> 00:07:50,140
requirements are just misunderstood or

180
00:07:50,140 --> 00:07:52,910
miscommunicated I'd like to believe

181
00:07:52,910 --> 00:07:56,360
that's where a lot of these issues with

182
00:07:56,360 --> 00:07:59,210
password sign ons and Account walkouts

183
00:07:59,210 --> 00:08:02,300
things like that come up that are very

184
00:08:02,300 --> 00:08:05,180
much meant for extra security but the

185
00:08:05,180 --> 00:08:07,100
end up sometimes doing the opposite or

186
00:08:07,100 --> 00:08:10,430
just very much inconveniencing users you

187
00:08:10,430 --> 00:08:13,130
know actual user requirements get lost

188
00:08:13,130 --> 00:08:16,820
along the way or miscommunicated and

189
00:08:16,820 --> 00:08:20,450
finally the cult of the new tool so you

190
00:08:20,450 --> 00:08:22,670
know I want to try out this brand new

191
00:08:22,670 --> 00:08:25,100
thing combine that with my my rush

192
00:08:25,100 --> 00:08:27,050
deadline now I really don't know better

193
00:08:27,050 --> 00:08:28,610
because there isn't much documentation

194
00:08:28,610 --> 00:08:30,980
on it there's not much community

195
00:08:30,980 --> 00:08:33,169
consensus on how to use this new

196
00:08:33,169 --> 00:08:36,080
framework or a library and so I end up

197
00:08:36,080 --> 00:08:38,080
writing really insecure code because

198
00:08:38,080 --> 00:08:41,390
there's just not a path for me yet and

199
00:08:41,390 --> 00:08:48,200
so it's it's harder to do correctly cool

200
00:08:48,200 --> 00:08:50,810
so without further ado the the gotcha

201
00:08:50,810 --> 00:08:54,200
top nine ish or so and again feel free

202
00:08:54,200 --> 00:08:57,880
to weigh in on slack you know if I

203
00:08:57,880 --> 00:09:00,800
likewise get anything wrong you know I

204
00:09:00,800 --> 00:09:04,220
might miss speak on something or if you

205
00:09:04,220 --> 00:09:07,490
just have especially a way you've seen

206
00:09:07,490 --> 00:09:10,010
one of these issues come up in the real

207
00:09:10,010 --> 00:09:12,350
worlds that you're able to share I would

208
00:09:12,350 --> 00:09:15,700
love to hear some of those stories so

209
00:09:15,700 --> 00:09:18,200
we'll start out with security headers

210
00:09:18,200 --> 00:09:22,220
these are basically for every request

211
00:09:22,220 --> 00:09:25,460
every response you know these have these

212
00:09:25,460 --> 00:09:27,260
headers that tell about - the response

213
00:09:27,260 --> 00:09:31,490
before probably a body there are certain

214
00:09:31,490 --> 00:09:33,410
headers that are security headers

215
00:09:33,410 --> 00:09:35,060
because they're very specific to

216
00:09:35,060 --> 00:09:37,850
security in terms of how the request is

217
00:09:37,850 --> 00:09:41,780
handled typically by the browser so we

218
00:09:41,780 --> 00:09:44,270
have a list here of you know ones that

219
00:09:44,270 --> 00:09:47,210
should commonly be included but are

220
00:09:47,210 --> 00:09:49,220
pretty rarely included actually and

221
00:09:49,220 --> 00:09:51,620
there are a couple sites where you can

222
00:09:51,620 --> 00:09:56,060
easily test what what security headers

223
00:09:56,060 --> 00:09:57,260
are being included

224
00:09:57,260 --> 00:10:00,709
in a site can't think of the names often

225
00:10:00,709 --> 00:10:02,510
top of my head but but they're easy to

226
00:10:02,510 --> 00:10:07,430
find things like excess excess that's

227
00:10:07,430 --> 00:10:11,860
really hard to say X excess protection

228
00:10:11,860 --> 00:10:15,110
pretty self-explanatory meant to prevent

229
00:10:15,110 --> 00:10:18,079
against cross-site scripting there are

230
00:10:18,079 --> 00:10:21,560
very few reasons not to include that as

231
00:10:21,560 --> 00:10:24,050
just an extra preventative measure some

232
00:10:24,050 --> 00:10:29,769
defense in depth for for your responses

233
00:10:29,769 --> 00:10:33,380
X frame options so this is you know I

234
00:10:33,380 --> 00:10:36,500
against things like allowing your site

235
00:10:36,500 --> 00:10:40,130
to be iframed inside of another website

236
00:10:40,130 --> 00:10:43,250
and so someone could put your login page

237
00:10:43,250 --> 00:10:45,620
inside of their page and perform a

238
00:10:45,620 --> 00:10:47,870
phishing attack or you know something

239
00:10:47,870 --> 00:10:51,649
see search related these are really easy

240
00:10:51,649 --> 00:10:54,709
to add some web frameworks actually

241
00:10:54,709 --> 00:10:58,490
start adding relevance settings by

242
00:10:58,490 --> 00:11:01,519
default they're to turn them on but they

243
00:11:01,519 --> 00:11:04,100
can't always guess at what you meant or

244
00:11:04,100 --> 00:11:08,000
how much walking down you might require

245
00:11:08,000 --> 00:11:10,240
for your application maybe you do need

246
00:11:10,240 --> 00:11:13,040
an application or some sort of service

247
00:11:13,040 --> 00:11:14,269
to be iframes

248
00:11:14,269 --> 00:11:16,690
you know allowed on a particular domain

249
00:11:16,690 --> 00:11:19,579
make sure that you whitelist that one

250
00:11:19,579 --> 00:11:24,170
but don't go too far so you know a nice

251
00:11:24,170 --> 00:11:27,800
little check mark you know check lists

252
00:11:27,800 --> 00:11:29,600
to make sure that you're including these

253
00:11:29,600 --> 00:11:31,220
kinds of security headers right out of

254
00:11:31,220 --> 00:11:34,040
the gate another one content type

255
00:11:34,040 --> 00:11:38,209
options so this is around specifically

256
00:11:38,209 --> 00:11:40,790
Internet Explorer most of the time I'm

257
00:11:40,790 --> 00:11:43,010
guessing at the contents of a file I'm

258
00:11:43,010 --> 00:11:44,660
guessing at its type based on its

259
00:11:44,660 --> 00:11:47,690
content rather so for instance this ends

260
00:11:47,690 --> 00:11:49,910
up happening where you upload something

261
00:11:49,910 --> 00:11:51,890
you say it's an image but it's actually

262
00:11:51,890 --> 00:11:54,760
just JavaScript code and then a browser

263
00:11:54,760 --> 00:11:56,930
typically not modern browsers these days

264
00:11:56,930 --> 00:11:59,870
but potentially will hopefully guess

265
00:11:59,870 --> 00:12:02,000
that that is in fact JavaScript code and

266
00:12:02,000 --> 00:12:04,370
run it for you or an HTML page and run

267
00:12:04,370 --> 00:12:08,180
the code in it we have a couple others

268
00:12:08,180 --> 00:12:10,180
listed here straight

269
00:12:10,180 --> 00:12:13,330
and support security which you know can

270
00:12:13,330 --> 00:12:16,570
be a bit of a foot gun if you get it

271
00:12:16,570 --> 00:12:18,610
wrong and it turns out you wanted to

272
00:12:18,610 --> 00:12:22,270
load some content over HTTP it's really

273
00:12:22,270 --> 00:12:24,990
hard to take back that option that is

274
00:12:24,990 --> 00:12:28,290
essentially trying to enforce HTTPS

275
00:12:28,290 --> 00:12:29,620
likewise

276
00:12:29,620 --> 00:12:32,950
content security policy is not new

277
00:12:32,950 --> 00:12:36,029
technology but being newly used and

278
00:12:36,029 --> 00:12:39,100
definitely we're seeing a big uptick in

279
00:12:39,100 --> 00:12:43,600
usage for CSP the difficulty there is

280
00:12:43,600 --> 00:12:47,260
setting rules correctly this is another

281
00:12:47,260 --> 00:12:49,080
way of preventing cross-site scripting

282
00:12:49,080 --> 00:12:52,360
and you can get very granular with what

283
00:12:52,360 --> 00:12:55,290
kinds of images what kinds of even CSS

284
00:12:55,290 --> 00:12:58,750
where scripts are allowed to be run from

285
00:12:58,750 --> 00:13:01,899
different domains and so forth the

286
00:13:01,899 --> 00:13:04,060
difficulty there especially for a matter

287
00:13:04,060 --> 00:13:06,399
of modern web app that's taking in lots

288
00:13:06,399 --> 00:13:09,820
of third-party services is you end up

289
00:13:09,820 --> 00:13:12,610
saying you know we think we have a

290
00:13:12,610 --> 00:13:14,410
pretty good idea of all the things we

291
00:13:14,410 --> 00:13:17,380
need and then your marketing team works

292
00:13:17,380 --> 00:13:19,209
through a different channel and adds in

293
00:13:19,209 --> 00:13:21,459
another third-party tracking widget that

294
00:13:21,459 --> 00:13:23,260
you did want to whitelist but you ended

295
00:13:23,260 --> 00:13:24,540
up breaking part of the site

296
00:13:24,540 --> 00:13:28,990
accidentally so CSP has a reporting

297
00:13:28,990 --> 00:13:31,779
version in which you can essentially say

298
00:13:31,779 --> 00:13:35,080
here's what we would have blocked highly

299
00:13:35,080 --> 00:13:37,300
recommend basically doing dry runs of

300
00:13:37,300 --> 00:13:39,339
anything you're setting up through CSP

301
00:13:39,339 --> 00:13:42,850
first and for each of these topics we're

302
00:13:42,850 --> 00:13:45,880
gonna go over some some good points and

303
00:13:45,880 --> 00:13:48,510
bad points about modern web frameworks

304
00:13:48,510 --> 00:13:53,130
now a lot of my own backgrounds is in

305
00:13:53,130 --> 00:13:58,660
Python nodejs you know more of the tech

306
00:13:58,660 --> 00:14:01,209
along those lines so you won't see as

307
00:14:01,209 --> 00:14:04,390
much from net from Java things like that

308
00:14:04,390 --> 00:14:06,579
but these are true across the board for

309
00:14:06,579 --> 00:14:11,079
any major framework one gotcha is a lot

310
00:14:11,079 --> 00:14:12,730
of framework give themselves away so

311
00:14:12,730 --> 00:14:16,329
node Express as an example has a nice X

312
00:14:16,329 --> 00:14:18,370
powered by Express header that it adds

313
00:14:18,370 --> 00:14:22,420
to every request adds a little bit of

314
00:14:22,420 --> 00:14:24,190
overhead that's not a huge deal

315
00:14:24,190 --> 00:14:26,470
but it's also giving an attacker extra

316
00:14:26,470 --> 00:14:28,509
information about what kind of store

317
00:14:28,509 --> 00:14:31,810
you're running and it's not really

318
00:14:31,810 --> 00:14:33,699
providing any useful information to the

319
00:14:33,699 --> 00:14:36,610
end-user so no reason to include it you

320
00:14:36,610 --> 00:14:38,829
might as well not make a an attackers

321
00:14:38,829 --> 00:14:40,680
job easier

322
00:14:40,680 --> 00:14:43,420
one tool that I recommend there is

323
00:14:43,420 --> 00:14:47,290
helmet is so highly recommend if you're

324
00:14:47,290 --> 00:14:49,509
using node and expressed helmet jeaious

325
00:14:49,509 --> 00:14:51,959
has a lot of great defaults that

326
00:14:51,959 --> 00:14:53,829
probably should have been the defaults

327
00:14:53,829 --> 00:14:56,019
to start out with to help secure your

328
00:14:56,019 --> 00:14:59,250
app especially around security headers

329
00:14:59,250 --> 00:15:01,600
rails in particular does a great job

330
00:15:01,600 --> 00:15:03,819
when it comes to security headers just

331
00:15:03,819 --> 00:15:05,560
in terms of the kinds of defaults that

332
00:15:05,560 --> 00:15:08,199
sets now that doesn't mean that you're

333
00:15:08,199 --> 00:15:10,480
definitely secured by default all the

334
00:15:10,480 --> 00:15:11,769
time when you start a rails project

335
00:15:11,769 --> 00:15:14,939
because it can't guess it's that every

336
00:15:14,939 --> 00:15:17,319
feature that you're using for instance

337
00:15:17,319 --> 00:15:22,600
but you'll be on good footing there a

338
00:15:22,600 --> 00:15:24,160
little bit about the host header in

339
00:15:24,160 --> 00:15:26,769
particular so the host header says hey

340
00:15:26,769 --> 00:15:30,040
I'm coming from this domain as with

341
00:15:30,040 --> 00:15:33,100
anything else in life and programming

342
00:15:33,100 --> 00:15:35,259
don't rely on user provided input and

343
00:15:35,259 --> 00:15:37,600
the host header is essentially user

344
00:15:37,600 --> 00:15:40,420
provided input so that means it can be

345
00:15:40,420 --> 00:15:42,730
faked which can lead to all sorts of

346
00:15:42,730 --> 00:15:43,089
issues

347
00:15:43,089 --> 00:15:46,449
Caeser web cache poisoning one that

348
00:15:46,449 --> 00:15:48,550
comes up really commonly is password

349
00:15:48,550 --> 00:15:50,889
reset poisoning through there where

350
00:15:50,889 --> 00:15:53,589
someone could send a phishing attack and

351
00:15:53,589 --> 00:15:56,829
send out a password reset request but

352
00:15:56,829 --> 00:15:59,829
they're actually sending you back to

353
00:15:59,829 --> 00:16:02,529
their own attacker domain and so you put

354
00:16:02,529 --> 00:16:04,029
in your current password along with

355
00:16:04,029 --> 00:16:06,089
attempting to change your password and

356
00:16:06,089 --> 00:16:10,870
they have your credentials terms of

357
00:16:10,870 --> 00:16:14,110
framework gotchas Django specifically

358
00:16:14,110 --> 00:16:16,120
but other web frameworks that have

359
00:16:16,120 --> 00:16:19,089
similar includes allowed hosts and and

360
00:16:19,089 --> 00:16:21,339
some other standard configuration

361
00:16:21,339 --> 00:16:23,920
settings there we see this really really

362
00:16:23,920 --> 00:16:26,740
commonly that's I think what probably

363
00:16:26,740 --> 00:16:29,529
happens is in local developments things

364
00:16:29,529 --> 00:16:32,139
aren't working to go back to the

365
00:16:32,139 --> 00:16:35,589
mysterious fixes for mysterious bugs but

366
00:16:35,589 --> 00:16:37,889
you find out maybe after some stack

367
00:16:37,889 --> 00:16:40,259
overflow driven developments that's if

368
00:16:40,259 --> 00:16:42,239
you put a star in allowed hosts things

369
00:16:42,239 --> 00:16:46,529
work and you know that's great so let's

370
00:16:46,529 --> 00:16:48,389
leave it that way and you might end up

371
00:16:48,389 --> 00:16:49,980
pushing out that code and now you've

372
00:16:49,980 --> 00:16:53,579
completely disabled any of the security

373
00:16:53,579 --> 00:16:56,100
that comes along with having a whitelist

374
00:16:56,100 --> 00:16:59,009
of allowed hosts so that's the sort of

375
00:16:59,009 --> 00:17:00,769
thing that we see happen a lot with

376
00:17:00,769 --> 00:17:03,809
changes between production versus local

377
00:17:03,809 --> 00:17:06,599
development or things that could be a

378
00:17:06,599 --> 00:17:09,329
little extra time consuming for setting

379
00:17:09,329 --> 00:17:11,490
up and local development make sure that

380
00:17:11,490 --> 00:17:12,539
you're not working around those

381
00:17:12,539 --> 00:17:18,359
protections even accidentally for most

382
00:17:18,359 --> 00:17:22,589
herbs so a few different ways this can

383
00:17:22,589 --> 00:17:26,939
come up turning off debug mode you know

384
00:17:26,939 --> 00:17:29,309
we obviously never include debug mode

385
00:17:29,309 --> 00:17:31,110
but this is another that that happens a

386
00:17:31,110 --> 00:17:33,419
lot for local developments code gets

387
00:17:33,419 --> 00:17:35,010
pushed out and then you're in production

388
00:17:35,010 --> 00:17:40,049
with with debug mode on likewise and

389
00:17:40,049 --> 00:17:42,690
this is especially true for team to

390
00:17:42,690 --> 00:17:44,460
working in services you know micro

391
00:17:44,460 --> 00:17:47,639
services across different parts of an

392
00:17:47,639 --> 00:17:50,340
application and of a platform with lots

393
00:17:50,340 --> 00:17:52,889
of different teams working on on lots of

394
00:17:52,889 --> 00:17:55,649
different pieces of code and API is you

395
00:17:55,649 --> 00:17:57,149
want to be very helpful and so you

396
00:17:57,149 --> 00:17:59,970
provide lots of detailed information in

397
00:17:59,970 --> 00:18:03,000
your areas that might not be a front-end

398
00:18:03,000 --> 00:18:05,399
to you and to the next team that might

399
00:18:05,399 --> 00:18:08,760
be oh we need to turn the arrow to the

400
00:18:08,760 --> 00:18:10,830
user to let them know what's happened

401
00:18:10,830 --> 00:18:14,490
and so through this sort of game of

402
00:18:14,490 --> 00:18:16,590
telephone you end up providing lots of

403
00:18:16,590 --> 00:18:19,500
backend details to an attacker who has

404
00:18:19,500 --> 00:18:22,679
managed to cause an error in your API as

405
00:18:22,679 --> 00:18:25,799
an example so that's the sort of defense

406
00:18:25,799 --> 00:18:27,809
in depth as well but I mentioned where

407
00:18:27,809 --> 00:18:31,230
you need to make sure that you're

408
00:18:31,230 --> 00:18:33,889
protecting your service adequately

409
00:18:33,889 --> 00:18:36,389
assuming that you might not know where

410
00:18:36,389 --> 00:18:38,929
that information is headed afterward

411
00:18:38,929 --> 00:18:41,159
another really common one is code

412
00:18:41,159 --> 00:18:43,620
comments so the first thing I ever do if

413
00:18:43,620 --> 00:18:45,960
I'm helping out with a pen test or just

414
00:18:45,960 --> 00:18:48,450
looking over someone site is I will go

415
00:18:48,450 --> 00:18:51,330
into the console look for code comments

416
00:18:51,330 --> 00:18:55,520
in typically client-side JavaScript

417
00:18:55,520 --> 00:18:58,170
anything commented out that's a function

418
00:18:58,170 --> 00:18:59,910
that wasn't quite working or maybe it

419
00:18:59,910 --> 00:19:02,400
was supposed to be run only locally or

420
00:19:02,400 --> 00:19:05,400
in debug likewise you can look for two

421
00:19:05,400 --> 00:19:07,940
dudes or even just profanity sometimes

422
00:19:07,940 --> 00:19:11,790
to see what might be something that a

423
00:19:11,790 --> 00:19:15,140
developer left in and shouldn't have

424
00:19:15,140 --> 00:19:17,310
this is the sort of thing that you know

425
00:19:17,310 --> 00:19:19,920
you can make sure to ideally strip out

426
00:19:19,920 --> 00:19:22,500
as part of your pipeline and going to

427
00:19:22,500 --> 00:19:24,330
production no reason to have those

428
00:19:24,330 --> 00:19:27,360
comments left over for a production

429
00:19:27,360 --> 00:19:31,020
application a few specific framework

430
00:19:31,020 --> 00:19:33,570
gotchas Django rest framework which is

431
00:19:33,570 --> 00:19:36,630
used for API is in Python apps very

432
00:19:36,630 --> 00:19:39,270
frequently has a really great browsable

433
00:19:39,270 --> 00:19:41,310
interface that is fantastic for

434
00:19:41,310 --> 00:19:43,080
developments and fantastic four

435
00:19:43,080 --> 00:19:44,670
attackers trying to figure out your

436
00:19:44,670 --> 00:19:47,880
endpoints and how to abuse your API so

437
00:19:47,880 --> 00:19:49,500
make sure that that is turned off in

438
00:19:49,500 --> 00:19:54,990
production flask gives stack traces the

439
00:19:54,990 --> 00:19:58,110
give a console and so you know if you

440
00:19:58,110 --> 00:20:00,990
think of oh maybe we leaked a little bit

441
00:20:00,990 --> 00:20:02,970
of information here it's probably not

442
00:20:02,970 --> 00:20:05,670
the end of the world you can get remote

443
00:20:05,670 --> 00:20:07,560
code execution just from having that

444
00:20:07,560 --> 00:20:09,810
nice error page I believe in newer

445
00:20:09,810 --> 00:20:11,520
versions of Wax the flask you have to

446
00:20:11,520 --> 00:20:14,430
have a PIN number to access it something

447
00:20:14,430 --> 00:20:17,970
like that but just to say you know it

448
00:20:17,970 --> 00:20:21,590
might be a little bit more damning than

449
00:20:21,590 --> 00:20:25,020
just releasing an error code another

450
00:20:25,020 --> 00:20:27,180
thing that happens frequently is a stack

451
00:20:27,180 --> 00:20:30,390
trace will show surrounding code so you

452
00:20:30,390 --> 00:20:32,670
might see something where for instance

453
00:20:32,670 --> 00:20:34,830
the secret key is hard-coded just above

454
00:20:34,830 --> 00:20:37,650
the function the crashed and so that

455
00:20:37,650 --> 00:20:39,960
gets returned in your error message lots

456
00:20:39,960 --> 00:20:42,110
of ways that these can can go wrong

457
00:20:42,110 --> 00:20:44,550
unexpectedly

458
00:20:44,550 --> 00:20:47,880
likewise rails Ruby reveals all of the

459
00:20:47,880 --> 00:20:50,370
routes available to you in debug mode so

460
00:20:50,370 --> 00:20:52,710
again a really great way for it to help

461
00:20:52,710 --> 00:20:55,920
out in local development and to help out

462
00:20:55,920 --> 00:20:58,770
an attacker saying here's every possible

463
00:20:58,770 --> 00:21:02,720
route I tried maybe try one of these

464
00:21:05,179 --> 00:21:09,200
good old sequel injection Bobbie tables

465
00:21:09,200 --> 00:21:11,850
still happening still one of the the

466
00:21:11,850 --> 00:21:16,530
most common issues and the advice is

467
00:21:16,530 --> 00:21:20,130
still use the Orem this one is not too

468
00:21:20,130 --> 00:21:23,460
fancy but you know every modern web

469
00:21:23,460 --> 00:21:27,059
framework comes with some sort of ORM

470
00:21:27,059 --> 00:21:28,860
some some way to interact with your

471
00:21:28,860 --> 00:21:31,170
models without writing writing raw

472
00:21:31,170 --> 00:21:34,110
sequel code I think what what ends up

473
00:21:34,110 --> 00:21:36,420
happening here is either folks are new

474
00:21:36,420 --> 00:21:38,550
to a tool and so they find a lot of

475
00:21:38,550 --> 00:21:41,790
things like introductory tutorials that

476
00:21:41,790 --> 00:21:44,340
start with raw sequel because it looks

477
00:21:44,340 --> 00:21:47,760
easier and more common or someone has

478
00:21:47,760 --> 00:21:50,190
used sequel before but is not used in

479
00:21:50,190 --> 00:21:53,400
Ora for for that particular language or

480
00:21:53,400 --> 00:21:56,790
sometimes you want extra speed and you

481
00:21:56,790 --> 00:21:59,100
think that maybe you're right that the

482
00:21:59,100 --> 00:22:01,260
raw sequel will slightly improve your

483
00:22:01,260 --> 00:22:03,840
performance there but it's not not worth

484
00:22:03,840 --> 00:22:06,780
it's never worth any possible reasoning

485
00:22:06,780 --> 00:22:09,330
to to write that rusty cool so what if I

486
00:22:09,330 --> 00:22:13,440
want to no no we were just trying out

487
00:22:13,440 --> 00:22:15,300
and let me see if I can do this really

488
00:22:15,300 --> 00:22:21,929
quick as a live example as a let's say

489
00:22:21,929 --> 00:22:26,130
developer new to rails if I wanted to

490
00:22:26,130 --> 00:22:28,830
find out an example of how to do a

491
00:22:28,830 --> 00:22:31,890
select statement and sequel because I'm

492
00:22:31,890 --> 00:22:34,920
on a rush deadline I'm on a new tool I'm

493
00:22:34,920 --> 00:22:40,500
feeling lucky let's just go here and I

494
00:22:40,500 --> 00:22:42,870
ended up with a Stack Overflow post okay

495
00:22:42,870 --> 00:22:45,210
as active four months ago it's viewed

496
00:22:45,210 --> 00:22:48,660
you know quarter of a million times this

497
00:22:48,660 --> 00:22:51,360
guy wants to do something that's faster

498
00:22:51,360 --> 00:22:52,500
so it sounds good

499
00:22:52,500 --> 00:22:54,929
we'll go to the select all that's got

500
00:22:54,929 --> 00:22:56,580
almost four hundred up votes in a nice

501
00:22:56,580 --> 00:22:59,130
screen check you can do this great let

502
00:22:59,130 --> 00:23:01,650
me copy and paste that and go back to my

503
00:23:01,650 --> 00:23:04,080
app and now this is a little unfair to

504
00:23:04,080 --> 00:23:06,120
Rails because they have great

505
00:23:06,120 --> 00:23:08,250
documentation and warnings all over the

506
00:23:08,250 --> 00:23:11,330
place of not to do exactly those things

507
00:23:11,330 --> 00:23:13,620
but it's easy to fall into those traps

508
00:23:13,620 --> 00:23:16,500
still so you know there's there's a lot

509
00:23:16,500 --> 00:23:18,570
of not necessarily missing

510
00:23:18,570 --> 00:23:21,149
but it's easy to not be fully informed

511
00:23:21,149 --> 00:23:23,880
if you're just taking a quick look

512
00:23:23,880 --> 00:23:28,370
through things like why is no sequel

513
00:23:28,370 --> 00:23:32,490
this is a sort of MongoDB example the

514
00:23:32,490 --> 00:23:36,899
equivalent of apostrophe - - if you have

515
00:23:36,899 --> 00:23:39,450
sort of a greater than nothing that is

516
00:23:39,450 --> 00:23:42,929
also always true in no sequel query and

517
00:23:42,929 --> 00:23:45,600
so you know a lot of folks will end up

518
00:23:45,600 --> 00:23:48,059
thinking oh it's not sequel I'm not

519
00:23:48,059 --> 00:23:50,399
going to be able to inject things you

520
00:23:50,399 --> 00:23:52,620
can inject good into just about anywhere

521
00:23:52,620 --> 00:23:57,570
if you you take that raw input and so

522
00:23:57,570 --> 00:23:59,909
that's still a problem this is becoming

523
00:23:59,909 --> 00:24:01,649
more and more common those folks move to

524
00:24:01,649 --> 00:24:06,590
things like for further databases

525
00:24:09,169 --> 00:24:14,070
yeah we've covered this cross-site

526
00:24:14,070 --> 00:24:17,490
scripting one of our favorites don't

527
00:24:17,490 --> 00:24:19,799
pass HTML the templates this is also

528
00:24:19,799 --> 00:24:21,240
pretty standard stuff that hasn't

529
00:24:21,240 --> 00:24:23,970
changed although the methods by which we

530
00:24:23,970 --> 00:24:27,120
do so have sometimes changed as we we

531
00:24:27,120 --> 00:24:29,279
get more and more layers of client-side

532
00:24:29,279 --> 00:24:32,100
JavaScript stuff happening and so it

533
00:24:32,100 --> 00:24:34,139
gets more and more complex when we say

534
00:24:34,139 --> 00:24:36,779
passing HTML the templates what that

535
00:24:36,779 --> 00:24:38,909
actually means and what the inputs are

536
00:24:38,909 --> 00:24:43,350
going where the standard advice is

537
00:24:43,350 --> 00:24:46,889
Santaquin sanitize inputs early where

538
00:24:46,889 --> 00:24:48,960
that could go wrong as an example from

539
00:24:48,960 --> 00:24:51,480
from what we've seen is for instance

540
00:24:51,480 --> 00:24:53,730
perhaps you're rendering markdown based

541
00:24:53,730 --> 00:24:55,769
on some user inputs which is already a

542
00:24:55,769 --> 00:24:57,110
dangerous idea

543
00:24:57,110 --> 00:25:00,600
you might sanitize which then changes

544
00:25:00,600 --> 00:25:03,629
user inputs and then pass it through a

545
00:25:03,629 --> 00:25:05,370
renderer which changes it changes user

546
00:25:05,370 --> 00:25:07,850
input again and so a smart attacker

547
00:25:07,850 --> 00:25:10,529
possibly can layer you can use your

548
00:25:10,529 --> 00:25:14,100
layers of changes and sanitization to

549
00:25:14,100 --> 00:25:17,159
make their way through your filters so

550
00:25:17,159 --> 00:25:18,840
just be very careful about the business

551
00:25:18,840 --> 00:25:21,120
logic behind how you're treating that

552
00:25:21,120 --> 00:25:24,740
kind of user this is a great one for

553
00:25:24,740 --> 00:25:28,340
adding linter warnings just in terms of

554
00:25:28,340 --> 00:25:31,289
unsafe function calls or function calls

555
00:25:31,289 --> 00:25:32,370
that you probably

556
00:25:32,370 --> 00:25:34,920
didn't mean to or should have a very

557
00:25:34,920 --> 00:25:40,070
good clear reason to call for instance

558
00:25:40,070 --> 00:25:44,040
the unfortunately named safe and mark

559
00:25:44,040 --> 00:25:44,700
safe

560
00:25:44,700 --> 00:25:48,270
Jenko functions are not safe we've seen

561
00:25:48,270 --> 00:25:49,920
a lot of developers who think oh if I

562
00:25:49,920 --> 00:25:51,660
wrap this and safe it will be safe which

563
00:25:51,660 --> 00:25:54,690
is very reasonable you're in fact

564
00:25:54,690 --> 00:25:57,240
marking that you believe this is safe

565
00:25:57,240 --> 00:25:59,910
input and so you can wrap it in there to

566
00:25:59,910 --> 00:26:03,740
make sure that it's treated as raw HTML

567
00:26:03,740 --> 00:26:07,080
react I believe did a great job with

568
00:26:07,080 --> 00:26:09,420
finally calling this dangerously set

569
00:26:09,420 --> 00:26:13,890
inner HTML pretty verbose and yet we

570
00:26:13,890 --> 00:26:17,910
still see folks who are calling that for

571
00:26:17,910 --> 00:26:21,090
whatever reason to set dangerous unsafe

572
00:26:21,090 --> 00:26:25,980
inner HTML not quite sure the reason

573
00:26:25,980 --> 00:26:29,280
there it's definitely more rarer but you

574
00:26:29,280 --> 00:26:31,950
know something that's we can can

575
00:26:31,950 --> 00:26:35,370
continue to aim to improve on with new

576
00:26:35,370 --> 00:26:37,290
technology and new frameworks coming out

577
00:26:37,290 --> 00:26:38,370
I think we're heading in the right

578
00:26:38,370 --> 00:26:40,410
direction and we're seeing fewer of

579
00:26:40,410 --> 00:26:41,630
those issues with things like

580
00:26:41,630 --> 00:26:49,170
dangerously set xxe so this is a new one

581
00:26:49,170 --> 00:26:51,900
when it comes to the latest OS top ten

582
00:26:51,900 --> 00:26:55,760
categories this is XML entity injection

583
00:26:55,760 --> 00:26:58,440
and from the apps that we work with most

584
00:26:58,440 --> 00:27:02,730
often we're seeing Jason rather than XML

585
00:27:02,730 --> 00:27:05,550
and you don't always have that luxury of

586
00:27:05,550 --> 00:27:08,760
not using XML but ideally that's a good

587
00:27:08,760 --> 00:27:12,870
way to go when possible just using Jason

588
00:27:12,870 --> 00:27:14,850
again it's kind of like just using no

589
00:27:14,850 --> 00:27:15,420
sequel

590
00:27:15,420 --> 00:27:17,309
you're not safe by default we've

591
00:27:17,309 --> 00:27:21,870
actually in that the community labs duo

592
00:27:21,870 --> 00:27:25,200
helps publish a lab on Jason injection

593
00:27:25,200 --> 00:27:27,720
specifically it's the demonstrate how

594
00:27:27,720 --> 00:27:30,720
that's possible as well so anytime

595
00:27:30,720 --> 00:27:34,260
you're using user inputs it can be

596
00:27:34,260 --> 00:27:38,130
potentially injected XML injections are

597
00:27:38,130 --> 00:27:42,320
really one that just won't go away for

598
00:27:42,320 --> 00:27:45,120
very unfortunate reasons

599
00:27:45,120 --> 00:27:46,880
first off we're seeing more and more

600
00:27:46,880 --> 00:27:50,100
parsing libraries over time there's this

601
00:27:50,100 --> 00:27:53,640
explosion of if you look at CVS related

602
00:27:53,640 --> 00:27:57,210
to parsing and to XML and other related

603
00:27:57,210 --> 00:27:59,310
topics you'll just see this exponential

604
00:27:59,310 --> 00:28:01,860
graph and you're sure those there's more

605
00:28:01,860 --> 00:28:07,770
code every month regardless you know NPM

606
00:28:07,770 --> 00:28:09,860
is a lot of this where everyone is

607
00:28:09,860 --> 00:28:12,480
through reinventing this the small wheel

608
00:28:12,480 --> 00:28:16,590
for their particular use case but each

609
00:28:16,590 --> 00:28:18,510
new developer is running across the same

610
00:28:18,510 --> 00:28:20,310
bug and I'm falling for it the first

611
00:28:20,310 --> 00:28:20,910
time around

612
00:28:20,910 --> 00:28:25,230
at least L XML which is the underlying I

613
00:28:25,230 --> 00:28:28,740
believe C library and the most all of

614
00:28:28,740 --> 00:28:31,920
these parsers are based on sets resolve

615
00:28:31,920 --> 00:28:35,820
entities to true and that is how XML

616
00:28:35,820 --> 00:28:38,300
injection happens essentially as you

617
00:28:38,300 --> 00:28:41,940
insert an entity which relates to a file

618
00:28:41,940 --> 00:28:44,360
that could be a file on the server and

619
00:28:44,360 --> 00:28:47,460
it happily interpolates here is the

620
00:28:47,460 --> 00:28:51,080
actual contents of that file for you a

621
00:28:51,080 --> 00:28:54,630
lot of package is relying on how XML

622
00:28:54,630 --> 00:28:59,490
then say no ants equals true or rather

623
00:28:59,490 --> 00:29:01,350
if you set no ant equals true you would

624
00:29:01,350 --> 00:29:04,050
probably as everyone does the first time

625
00:29:04,050 --> 00:29:07,230
think that means no entities make that

626
00:29:07,230 --> 00:29:09,810
true and now you're protected but it

627
00:29:09,810 --> 00:29:13,110
actually means there won't be external

628
00:29:13,110 --> 00:29:15,630
entities because will interpret them for

629
00:29:15,630 --> 00:29:18,720
you or will will substitute them for you

630
00:29:18,720 --> 00:29:22,080
with the contents so the configuration

631
00:29:22,080 --> 00:29:24,120
is the exact opposite of what you'd

632
00:29:24,120 --> 00:29:25,560
expect and if you didn't read the

633
00:29:25,560 --> 00:29:28,290
documentation carefully a lot of folks

634
00:29:28,290 --> 00:29:30,120
will end up setting no end equals true

635
00:29:30,120 --> 00:29:32,520
even if they know about this attack and

636
00:29:32,520 --> 00:29:37,129
are trying to prevent it specifically

637
00:29:37,880 --> 00:29:41,130
check and slack really quick looks like

638
00:29:41,130 --> 00:29:44,010
no no questions quite yet but feel free

639
00:29:44,010 --> 00:29:46,500
to weigh in with with any questions or

640
00:29:46,500 --> 00:29:50,990
further thoughts as well Caeser

641
00:29:50,990 --> 00:29:55,200
cross-site request forgery see search

642
00:29:55,200 --> 00:29:57,840
tokens random tokens that ensure that

643
00:29:57,840 --> 00:29:59,100
you cannot

644
00:29:59,100 --> 00:30:01,200
use a forum request a second time

645
00:30:01,200 --> 00:30:05,190
essentially use them there's this is a

646
00:30:05,190 --> 00:30:07,920
case where you know again I've I've

647
00:30:07,920 --> 00:30:10,350
heard of C surf we're protected because

648
00:30:10,350 --> 00:30:12,510
I use whatever particular framework that

649
00:30:12,510 --> 00:30:15,080
includes Caesars protection by default

650
00:30:15,080 --> 00:30:18,060
that's true if you actually use the see

651
00:30:18,060 --> 00:30:22,290
search tokens so consider depending on

652
00:30:22,290 --> 00:30:24,750
on your setup including them on every

653
00:30:24,750 --> 00:30:27,900
form or by default on on every you know

654
00:30:27,900 --> 00:30:31,800
overarching layout template page so you

655
00:30:31,800 --> 00:30:34,050
know if possible you you never forget

656
00:30:34,050 --> 00:30:38,070
because it's always there already what

657
00:30:38,070 --> 00:30:40,020
I'd love to see and maybe someone can

658
00:30:40,020 --> 00:30:41,940
help write this this middleware I don't

659
00:30:41,940 --> 00:30:43,230
think I've seen this in any web

660
00:30:43,230 --> 00:30:46,410
frameworks at least some warnings when

661
00:30:46,410 --> 00:30:50,130
you don't include a see circuit open you

662
00:30:50,130 --> 00:30:52,350
know they can't always a framework can't

663
00:30:52,350 --> 00:30:54,500
always guess what you intended and

664
00:30:54,500 --> 00:30:57,000
probably shouldn't be preventing you

665
00:30:57,000 --> 00:30:59,460
from doing certain things automatically

666
00:30:59,460 --> 00:31:02,190
but you know if there is caesar

667
00:31:02,190 --> 00:31:04,080
protection it'd be great to know if you

668
00:31:04,080 --> 00:31:06,870
missed a bit there and then you have one

669
00:31:06,870 --> 00:31:09,570
particular insecure form or insecure

670
00:31:09,570 --> 00:31:13,790
post in a sea of automatically protected

671
00:31:13,790 --> 00:31:15,600
with caesar's deferens

672
00:31:15,600 --> 00:31:18,420
so we'd love to see some some motion

673
00:31:18,420 --> 00:31:19,950
there but in the meantime they're easy

674
00:31:19,950 --> 00:31:22,530
to forget so consider just adding by

675
00:31:22,530 --> 00:31:27,180
default a bit on authentication and

676
00:31:27,180 --> 00:31:28,620
authorization will just plow through

677
00:31:28,620 --> 00:31:32,070
some topics here use strong password

678
00:31:32,070 --> 00:31:35,550
hashes we don't see this too frequently

679
00:31:35,550 --> 00:31:39,210
but we'll get to and I'll I'll spoil the

680
00:31:39,210 --> 00:31:44,090
surprise here class login as an example

681
00:31:44,090 --> 00:31:47,160
users poor encryption by default the

682
00:31:47,160 --> 00:31:48,840
users sha-1 which has been broken for

683
00:31:48,840 --> 00:31:51,480
quite some time there are some other

684
00:31:51,480 --> 00:31:53,970
very commonly used libraries that

685
00:31:53,970 --> 00:31:56,310
actually don't choose strong password

686
00:31:56,310 --> 00:31:58,650
hashes for whatever reason so that's

687
00:31:58,650 --> 00:32:00,570
another case I've always checked the

688
00:32:00,570 --> 00:32:02,850
documentation around password hashing

689
00:32:02,850 --> 00:32:05,030
and make sure that you're only selecting

690
00:32:05,030 --> 00:32:07,500
secure options you don't even have

691
00:32:07,500 --> 00:32:12,840
something that can default to a lesser

692
00:32:12,840 --> 00:32:17,010
a less secure version in some way if you

693
00:32:17,010 --> 00:32:18,539
know a user tries to force it in that

694
00:32:18,539 --> 00:32:22,350
direction and review business logic very

695
00:32:22,350 --> 00:32:25,110
carefully here so this is I would say

696
00:32:25,110 --> 00:32:27,860
one of the most common areas where

697
00:32:27,860 --> 00:32:32,010
applications will see them fall prey to

698
00:32:32,010 --> 00:32:33,950
some sort of business logic

699
00:32:33,950 --> 00:32:38,659
vulnerabilities weakness is there where

700
00:32:38,659 --> 00:32:41,610
it's often that the there are a lot of

701
00:32:41,610 --> 00:32:43,890
related features around password resets

702
00:32:43,890 --> 00:32:47,279
around user lockout around sign up

703
00:32:47,279 --> 00:32:49,919
versus log n vs. go off log in versus

704
00:32:49,919 --> 00:32:53,820
who knows what else and so you end up

705
00:32:53,820 --> 00:32:55,980
testing the happy paths you end up

706
00:32:55,980 --> 00:32:58,230
saying well what if a user deleted their

707
00:32:58,230 --> 00:33:00,270
account but then sign back up but then

708
00:33:00,270 --> 00:33:02,250
did this and then did that and those are

709
00:33:02,250 --> 00:33:04,020
all important to test of course because

710
00:33:04,020 --> 00:33:05,309
all your users will hit them

711
00:33:05,309 --> 00:33:07,740
that's what else could an attacker do

712
00:33:07,740 --> 00:33:09,299
with all of that what if an attacker

713
00:33:09,299 --> 00:33:12,659
tried to reset another users password a

714
00:33:12,659 --> 00:33:15,110
lot of those also also come down too

715
00:33:15,110 --> 00:33:18,029
often business trade-offs versus

716
00:33:18,029 --> 00:33:21,090
security things like how quickly do I

717
00:33:21,090 --> 00:33:24,049
want to walk out a user account after

718
00:33:24,049 --> 00:33:28,049
incorrect attempts for instance does

719
00:33:28,049 --> 00:33:29,789
that mean that an attacker could lock

720
00:33:29,789 --> 00:33:32,850
out lots of user accounts you know so

721
00:33:32,850 --> 00:33:33,809
there's there are always those

722
00:33:33,809 --> 00:33:36,390
trade-offs there as well

723
00:33:36,390 --> 00:33:41,250
a couple other mentions specific to you

724
00:33:41,250 --> 00:33:43,409
know framework settings cookie

725
00:33:43,409 --> 00:33:46,559
expirations by default most often your

726
00:33:46,559 --> 00:33:50,549
cookies will never expire for for most

727
00:33:50,549 --> 00:33:54,120
every modern web framework and you could

728
00:33:54,120 --> 00:33:55,529
argue whether that's the right decision

729
00:33:55,529 --> 00:33:58,080
I'd say you know it might be very

730
00:33:58,080 --> 00:34:00,240
unexpected to find that you have a

731
00:34:00,240 --> 00:34:02,899
cookie expiration that you didn't set

732
00:34:02,899 --> 00:34:05,520
might be better to have to explicitly

733
00:34:05,520 --> 00:34:08,399
set one but I think it probably comes as

734
00:34:08,399 --> 00:34:11,460
a surprise afterward to a lot of folks

735
00:34:11,460 --> 00:34:14,159
of our sessions never expire we should

736
00:34:14,159 --> 00:34:16,560
add that in so another piece to add to

737
00:34:16,560 --> 00:34:18,119
the checklist as you're you're setting

738
00:34:18,119 --> 00:34:22,070
up any new service or application

739
00:34:22,339 --> 00:34:25,710
cookies also allow for HTTP only and

740
00:34:25,710 --> 00:34:26,850
secure flags

741
00:34:26,850 --> 00:34:30,239
the secure flag says send us over HTTP

742
00:34:30,239 --> 00:34:33,780
only it often doesn't get set again

743
00:34:33,780 --> 00:34:37,560
because you might not be developing for

744
00:34:37,560 --> 00:34:42,300
HTTP locally and so setting it breaks it

745
00:34:42,300 --> 00:34:44,580
and so you you said that default or

746
00:34:44,580 --> 00:34:46,889
don't set that at all when that would be

747
00:34:46,889 --> 00:34:49,770
a great case for setting it specifically

748
00:34:49,770 --> 00:34:51,989
in production or getting a local

749
00:34:51,989 --> 00:34:54,570
environment that more accurately mirrors

750
00:34:54,570 --> 00:34:58,950
what will happen in production HTTP only

751
00:34:58,950 --> 00:35:01,140
essentially says don't send us this

752
00:35:01,140 --> 00:35:04,410
cookie through JavaScript requests only

753
00:35:04,410 --> 00:35:07,730
through FTP only to HTTP requests

754
00:35:07,730 --> 00:35:10,380
very few reasons why you would ever

755
00:35:10,380 --> 00:35:14,090
legitimately want to send it to a

756
00:35:14,090 --> 00:35:18,000
javascript request and most of them are

757
00:35:18,000 --> 00:35:20,450
attackers trying to use things like

758
00:35:20,450 --> 00:35:23,070
stored cross-site scripting to get its

759
00:35:23,070 --> 00:35:26,340
user cookies so a very good idea to set

760
00:35:26,340 --> 00:35:28,650
that one by default but it frequently is

761
00:35:28,650 --> 00:35:34,800
not in most frameworks known

762
00:35:34,800 --> 00:35:37,920
vulnerabilities this one is is also I

763
00:35:37,920 --> 00:35:40,950
believe new to the latest Oh F top 10

764
00:35:40,950 --> 00:35:45,420
list and is certainly exploding in terms

765
00:35:45,420 --> 00:35:48,120
of usage and you know why we're seeing

766
00:35:48,120 --> 00:35:49,890
companies like Nick having a lot of

767
00:35:49,890 --> 00:35:53,000
success there's a lot of open source

768
00:35:53,000 --> 00:35:58,740
going on now so PI pi NPM etc everyone

769
00:35:58,740 --> 00:36:01,800
is using more tools of other other

770
00:36:01,800 --> 00:36:03,680
developers other groups all the time

771
00:36:03,680 --> 00:36:06,810
that's great it's also dangerous you're

772
00:36:06,810 --> 00:36:08,970
you're widening your attack surface to

773
00:36:08,970 --> 00:36:10,830
everyone else's could potentially as

774
00:36:10,830 --> 00:36:14,760
well so use some tools use some services

775
00:36:14,760 --> 00:36:17,460
to help warn and prevents and automate

776
00:36:17,460 --> 00:36:20,880
that you have scan your code frequently

777
00:36:20,880 --> 00:36:23,750
for for those kinds of vulnerabilities

778
00:36:23,750 --> 00:36:26,300
Python has safety there are things like

779
00:36:26,300 --> 00:36:29,700
NPM audits that are automatically built

780
00:36:29,700 --> 00:36:32,580
in as you install packages now and give

781
00:36:32,580 --> 00:36:35,550
you nice big read warnings when known

782
00:36:35,550 --> 00:36:38,730
errors have have happened so make sure

783
00:36:38,730 --> 00:36:40,240
that you pay attention to those

784
00:36:40,240 --> 00:36:44,140
and take heed of those warnings again

785
00:36:44,140 --> 00:36:47,050
when you get to rush development and

786
00:36:47,050 --> 00:36:49,290
just need to get something out the door

787
00:36:49,290 --> 00:36:51,490
that's the moment when you're going to

788
00:36:51,490 --> 00:36:55,390
say I don't think that medium level

789
00:36:55,390 --> 00:36:59,440
severity risk is all that bad we'll

790
00:36:59,440 --> 00:37:02,619
research it later and then later comes

791
00:37:02,619 --> 00:37:05,020
and it never happens and you you get

792
00:37:05,020 --> 00:37:06,550
stuck on an older and older version it

793
00:37:06,550 --> 00:37:08,470
gets harder and harder to upgrade

794
00:37:08,470 --> 00:37:12,220
whatever that library was based on maybe

795
00:37:12,220 --> 00:37:15,400
some breaking changes so I would highly

796
00:37:15,400 --> 00:37:18,280
highly recommend setting out rules for

797
00:37:18,280 --> 00:37:21,310
yourself ahead of time set of policies

798
00:37:21,310 --> 00:37:25,150
around when to consider and when to

799
00:37:25,150 --> 00:37:27,930
force of the upgrading of external code

800
00:37:27,930 --> 00:37:30,880
for instance every time we see something

801
00:37:30,880 --> 00:37:35,109
that is of critical severity that's

802
00:37:35,109 --> 00:37:37,450
that's a showstopper we cannot push that

803
00:37:37,450 --> 00:37:41,170
code to production every time we see one

804
00:37:41,170 --> 00:37:43,119
or more mediums we're going to

805
00:37:43,119 --> 00:37:46,540
investigate this make sure that there's

806
00:37:46,540 --> 00:37:50,349
not a current known attack surface given

807
00:37:50,349 --> 00:37:52,960
our code and then over the next X days

808
00:37:52,960 --> 00:37:54,520
or weeks we're going to make sure to

809
00:37:54,520 --> 00:37:57,550
continue to upgrade those those

810
00:37:57,550 --> 00:38:01,270
vulnerable packages without those rules

811
00:38:01,270 --> 00:38:03,160
in place ahead of time you'll you'll

812
00:38:03,160 --> 00:38:05,920
never get around to help out with with

813
00:38:05,920 --> 00:38:08,589
updating those packages so this can help

814
00:38:08,589 --> 00:38:12,299
to prioritize it when the time comes

815
00:38:12,490 --> 00:38:15,869
framework caches I listed NPM just as a

816
00:38:15,869 --> 00:38:21,880
general set of vulnerabilities NPM is

817
00:38:21,880 --> 00:38:24,520
great but along with other libraries not

818
00:38:24,520 --> 00:38:27,430
to just point the finger there anyone

819
00:38:27,430 --> 00:38:29,619
can publish anything and so you really

820
00:38:29,619 --> 00:38:31,839
have to do your diligence and say what

821
00:38:31,839 --> 00:38:34,150
are open issues is the community the

822
00:38:34,150 --> 00:38:37,119
wider community using this library as

823
00:38:37,119 --> 00:38:38,940
I've been around a while and

824
00:38:38,940 --> 00:38:41,200
battle-hardened as I've been thoroughly

825
00:38:41,200 --> 00:38:42,670
tested

826
00:38:42,670 --> 00:38:44,500
is it currently maintained or has it

827
00:38:44,500 --> 00:38:45,940
just sat around for a couple years

828
00:38:45,940 --> 00:38:49,570
potentially you know collecting some

829
00:38:49,570 --> 00:38:52,770
dangerous cobwebs another thing that

830
00:38:52,770 --> 00:38:55,380
happen is look-alike libraries someone

831
00:38:55,380 --> 00:39:00,150
might similar to you know if I I tried

832
00:39:00,150 --> 00:39:04,230
to get Google Co we're probably not that

833
00:39:04,230 --> 00:39:06,690
one at this point but something similar

834
00:39:06,690 --> 00:39:10,320
someone might say oh this is Express

835
00:39:10,320 --> 00:39:13,080
rate limit except there's rate limit one

836
00:39:13,080 --> 00:39:15,300
word and it does something that looks

837
00:39:15,300 --> 00:39:17,190
like the right thing but it also steals

838
00:39:17,190 --> 00:39:19,830
a bunch of user data so you have to be

839
00:39:19,830 --> 00:39:21,750
very careful about how about these sorts

840
00:39:21,750 --> 00:39:25,500
of vulnerable packages that can creep in

841
00:39:25,500 --> 00:39:29,850
as essentially sometimes they do the

842
00:39:29,850 --> 00:39:32,340
right thing even and so it looks like

843
00:39:32,340 --> 00:39:35,400
you're getting something for nothing but

844
00:39:35,400 --> 00:39:36,840
it turns out that they also have a

845
00:39:36,840 --> 00:39:38,610
nefarious purpose buried in there so

846
00:39:38,610 --> 00:39:43,500
make sure to do your research some other

847
00:39:43,500 --> 00:39:45,690
ways to shoot yourself in the foot and a

848
00:39:45,690 --> 00:39:50,160
quick rundown of other things that

849
00:39:50,160 --> 00:39:53,130
didn't quite merits a category but we've

850
00:39:53,130 --> 00:39:56,520
seen a whole lot of setting poor pasture

851
00:39:56,520 --> 00:39:59,010
requirements which often means setting

852
00:39:59,010 --> 00:40:00,660
no password requirements this is another

853
00:40:00,660 --> 00:40:03,480
thing that's most modern web frameworks

854
00:40:03,480 --> 00:40:05,370
are not going to help you with they

855
00:40:05,370 --> 00:40:08,370
might help choose a secure hashing

856
00:40:08,370 --> 00:40:10,770
mechanism by default they might help

857
00:40:10,770 --> 00:40:13,590
with a lot of pieces like that but it's

858
00:40:13,590 --> 00:40:15,960
up to you for instance to say at least

859
00:40:15,960 --> 00:40:18,360
eight characters or ideally let's check

860
00:40:18,360 --> 00:40:20,460
against a common list and make sure that

861
00:40:20,460 --> 00:40:23,520
we don't accept that if you have

862
00:40:23,520 --> 00:40:25,380
fantastic security and all your users

863
00:40:25,380 --> 00:40:26,600
are choosing password as their password

864
00:40:26,600 --> 00:40:31,770
you don't have great security HTTP and

865
00:40:31,770 --> 00:40:34,160
incorrect redirects we see this a lot of

866
00:40:34,160 --> 00:40:37,350
folks setting up HTTPS but then not

867
00:40:37,350 --> 00:40:39,450
enforcing it we're not redirecting to it

868
00:40:39,450 --> 00:40:42,870
properly and so this can lead to a lot

869
00:40:42,870 --> 00:40:47,870
of fishing over still available HTTP

870
00:40:47,870 --> 00:40:50,640
poor DevOps maybe all the code is great

871
00:40:50,640 --> 00:40:55,260
but you sets Amazon Web Services

872
00:40:55,260 --> 00:40:58,470
permission to be wide open and someone

873
00:40:58,470 --> 00:41:01,320
can curl into your service or do

874
00:41:01,320 --> 00:41:03,290
whatever they like to your s3 buckets

875
00:41:03,290 --> 00:41:06,420
you know one more area that's the

876
00:41:06,420 --> 00:41:09,480
get to be often fully responsible for

877
00:41:09,480 --> 00:41:13,680
without a lot of hands-on training open

878
00:41:13,680 --> 00:41:19,339
redirects redirecting to another site

879
00:41:19,339 --> 00:41:22,260
this is another one where you might be

880
00:41:22,260 --> 00:41:24,720
attempting through some feature

881
00:41:24,720 --> 00:41:26,760
maybe it's the password reset as an

882
00:41:26,760 --> 00:41:29,730
example to redirect to internal links

883
00:41:29,730 --> 00:41:32,609
only but you're not checking whether

884
00:41:32,609 --> 00:41:34,410
those are just relative and so you end

885
00:41:34,410 --> 00:41:36,240
up redirecting to an attacker site

886
00:41:36,240 --> 00:41:39,900
that's part of a phishing attack reverse

887
00:41:39,900 --> 00:41:42,619
tab nabbing related and a whole lot less

888
00:41:42,619 --> 00:41:47,970
frequently talked about it's not super

889
00:41:47,970 --> 00:41:51,420
common but if you are including links

890
00:41:51,420 --> 00:41:55,049
out to external sources most common way

891
00:41:55,049 --> 00:41:57,599
to do that is to have targeting pools

892
00:41:57,599 --> 00:42:00,150
blank and you send someone out to a new

893
00:42:00,150 --> 00:42:02,339
tab when they click on that and go to a

894
00:42:02,339 --> 00:42:06,059
resource though the difficulty there if

895
00:42:06,059 --> 00:42:08,490
you're not careful about where you're

896
00:42:08,490 --> 00:42:11,220
sending folks maybe these are user

897
00:42:11,220 --> 00:42:16,049
supplied new links if you do not set the

898
00:42:16,049 --> 00:42:19,200
right attributes on that that that link

899
00:42:19,200 --> 00:42:23,119
etre a little-known fact unfortunately

900
00:42:23,119 --> 00:42:27,510
but that's child tab that's child window

901
00:42:27,510 --> 00:42:31,410
can access and modify the parent which

902
00:42:31,410 --> 00:42:34,049
means someone goes to that new link they

903
00:42:34,049 --> 00:42:35,940
go over they take a look they come back

904
00:42:35,940 --> 00:42:38,579
to your site that your site location is

905
00:42:38,579 --> 00:42:40,559
actually changed to look like maybe a

906
00:42:40,559 --> 00:42:42,780
phishing site that's on a similar domain

907
00:42:42,780 --> 00:42:44,849
and looks like your site but isn't at

908
00:42:44,849 --> 00:42:45,990
all

909
00:42:45,990 --> 00:42:49,190
so there are it's something like

910
00:42:49,190 --> 00:42:52,790
relation no opener and we go through the

911
00:42:52,790 --> 00:42:56,549
the details in the link there and we'll

912
00:42:56,549 --> 00:42:58,109
provide these slides at the end as well

913
00:42:58,109 --> 00:42:59,640
but make sure that you're always setting

914
00:42:59,640 --> 00:43:02,609
those again for any sort of external

915
00:43:02,609 --> 00:43:06,690
links that you're providing likewise if

916
00:43:06,690 --> 00:43:08,190
you thought that they were trustworthy

917
00:43:08,190 --> 00:43:12,540
if now an external partner gets hacked

918
00:43:12,540 --> 00:43:15,630
that could potentially open you up to

919
00:43:15,630 --> 00:43:19,040
new vulnerability as well

920
00:43:20,900 --> 00:43:23,730
just checking it slack okay no turns out

921
00:43:23,730 --> 00:43:26,970
cool another one that we see really

922
00:43:26,970 --> 00:43:29,730
commonly is passing sensitive data to

923
00:43:29,730 --> 00:43:33,869
third-party services very frequently if

924
00:43:33,869 --> 00:43:36,390
you're using full story or other sort of

925
00:43:36,390 --> 00:43:39,720
analytics trackers they try to do a

926
00:43:39,720 --> 00:43:42,510
pretty good job of scrubbing out things

927
00:43:42,510 --> 00:43:45,540
like password fields automatically but

928
00:43:45,540 --> 00:43:46,980
aren't going to catch everything

929
00:43:46,980 --> 00:43:48,540
especially if you're using lots of

930
00:43:48,540 --> 00:43:51,660
custom named attributes and in your your

931
00:43:51,660 --> 00:43:55,400
fancy react out so make sure that

932
00:43:55,400 --> 00:43:57,750
whenever you're collecting user data

933
00:43:57,750 --> 00:43:59,940
you're not unintentionally siphoning

934
00:43:59,940 --> 00:44:02,089
that off too you have sensitive data

935
00:44:02,089 --> 00:44:06,230
often places you you shouldn't be and

936
00:44:06,230 --> 00:44:09,089
keep in mind there's there's only

937
00:44:09,089 --> 00:44:12,900
limited security that you can put in

938
00:44:12,900 --> 00:44:15,000
place for this but whenever you provide

939
00:44:15,000 --> 00:44:18,690
an input field of any sort chances are a

940
00:44:18,690 --> 00:44:20,760
user will eventually enter their

941
00:44:20,760 --> 00:44:23,970
password into that field so just a thing

942
00:44:23,970 --> 00:44:25,530
to be aware of and another reason to

943
00:44:25,530 --> 00:44:28,170
have good security overall even if you

944
00:44:28,170 --> 00:44:29,910
don't think that it's for a particularly

945
00:44:29,910 --> 00:44:32,130
sensitive use case you will end up

946
00:44:32,130 --> 00:44:36,230
dealing with sensitive a quest one that

947
00:44:36,230 --> 00:44:39,060
frequently comes up is metadata after

948
00:44:39,060 --> 00:44:43,890
media files so often for helping an

949
00:44:43,890 --> 00:44:46,440
attacker you get a foothold for phishing

950
00:44:46,440 --> 00:44:48,810
attempts if you're doing things like

951
00:44:48,810 --> 00:44:53,069
uploading internal docs or PDFs or

952
00:44:53,069 --> 00:44:56,069
things like that maybe even images the

953
00:44:56,069 --> 00:44:58,829
metadata might be able to say you know

954
00:44:58,829 --> 00:45:01,200
here's who created this file or here's

955
00:45:01,200 --> 00:45:02,940
the old version of Windows that they're

956
00:45:02,940 --> 00:45:06,270
running at your company internally so

957
00:45:06,270 --> 00:45:07,619
make sure that you're scrubbing metadata

958
00:45:07,619 --> 00:45:10,109
out of anything that gets uploaded as

959
00:45:10,109 --> 00:45:13,740
well that might be revealing in

960
00:45:13,740 --> 00:45:14,910
unexpected ways

961
00:45:14,910 --> 00:45:24,030
a whole section on read the docs so a

962
00:45:24,030 --> 00:45:27,930
lot of the suggestions here can come

963
00:45:27,930 --> 00:45:31,650
down to review configurations review

964
00:45:31,650 --> 00:45:34,109
documentation be careful about what your

965
00:45:34,109 --> 00:45:37,170
including in your application review

966
00:45:37,170 --> 00:45:39,420
defaults and and I've fallen prey to

967
00:45:39,420 --> 00:45:40,950
this as well that's when you're just

968
00:45:40,950 --> 00:45:42,839
trying out one of three or four

969
00:45:42,839 --> 00:45:44,579
different solutions you just want to see

970
00:45:44,579 --> 00:45:45,720
if it works

971
00:45:45,720 --> 00:45:48,420
you copy in that tutorial code and it's

972
00:45:48,420 --> 00:45:51,480
been hours and finally the feature is

973
00:45:51,480 --> 00:45:52,769
doing what you want the feature to do

974
00:45:52,769 --> 00:45:56,489
quick commit it before you do that make

975
00:45:56,489 --> 00:45:59,640
sure that what you just copy pasted is a

976
00:45:59,640 --> 00:46:01,829
sensible set of defaults and that isn't

977
00:46:01,829 --> 00:46:04,410
introducing any serious security

978
00:46:04,410 --> 00:46:08,220
vulnerabilities often a lot of templates

979
00:46:08,220 --> 00:46:11,849
in in modern web frameworks will provide

980
00:46:11,849 --> 00:46:14,519
a lot of default keys and default

981
00:46:14,519 --> 00:46:18,450
settings things like secret keys for the

982
00:46:18,450 --> 00:46:20,759
application obviously shouldn't be

983
00:46:20,759 --> 00:46:23,369
changed there are often lots of warnings

984
00:46:23,369 --> 00:46:25,170
and changed this code comments around

985
00:46:25,170 --> 00:46:29,430
those but again if you get the quick

986
00:46:29,430 --> 00:46:34,079
quick create my my template it might be

987
00:46:34,079 --> 00:46:36,210
very easy to just hop over to the next

988
00:46:36,210 --> 00:46:39,749
step without reviewing these are the

989
00:46:39,749 --> 00:46:41,640
additional steps that you manually still

990
00:46:41,640 --> 00:46:44,759
need to take if you want some scary

991
00:46:44,759 --> 00:46:46,890
results just take a look on on github

992
00:46:46,890 --> 00:46:49,440
and search for you know any of the the

993
00:46:49,440 --> 00:46:52,619
standard secret keys that come with a

994
00:46:52,619 --> 00:46:56,839
lot of standard templates or or you know

995
00:46:56,839 --> 00:46:59,160
framework generation tools out of the

996
00:46:59,160 --> 00:47:01,739
box and you'll come up with a whole lot

997
00:47:01,739 --> 00:47:04,230
of results in applications that often

998
00:47:04,230 --> 00:47:05,700
really shouldn't have those defaults

999
00:47:05,700 --> 00:47:11,190
still there so setting up a prevention

1000
00:47:11,190 --> 00:47:13,980
checklist and here's a quick cheat sheet

1001
00:47:13,980 --> 00:47:16,920
summary of a lot of these pieces the

1002
00:47:16,920 --> 00:47:18,960
first step in the checklist is have your

1003
00:47:18,960 --> 00:47:22,019
own checklist if you just take someone

1004
00:47:22,019 --> 00:47:25,140
else's and it turns out even 30 percent

1005
00:47:25,140 --> 00:47:26,869
of that isn't relevant to your use case

1006
00:47:26,869 --> 00:47:29,220
you're going to start ignoring more and

1007
00:47:29,220 --> 00:47:31,980
more of it and so that's that's part of

1008
00:47:31,980 --> 00:47:33,299
why we did a little bit of everything

1009
00:47:33,299 --> 00:47:36,660
here you can pick and choose what are

1010
00:47:36,660 --> 00:47:39,599
the most relevant pieces here and figure

1011
00:47:39,599 --> 00:47:42,089
out for yourself for your team for your

1012
00:47:42,089 --> 00:47:44,940
application what is the most relevant

1013
00:47:44,940 --> 00:47:47,579
checklist here and especially as

1014
00:47:47,579 --> 00:47:50,219
you go through a new application you can

1015
00:47:50,219 --> 00:47:51,869
go through that production checklist did

1016
00:47:51,869 --> 00:47:53,999
I turn off debug that I reset the secret

1017
00:47:53,999 --> 00:47:56,880
key did I do all of these things that's

1018
00:47:56,880 --> 00:47:59,430
you know maybe you only do once every

1019
00:47:59,430 --> 00:48:02,430
few months or once a year and so it's

1020
00:48:02,430 --> 00:48:06,329
easy to skip over those afterward use

1021
00:48:06,329 --> 00:48:09,630
the ORM of course no snow a sequel no

1022
00:48:09,630 --> 00:48:11,339
exceptions

1023
00:48:11,339 --> 00:48:13,140
we didn't even talk about threat

1024
00:48:13,140 --> 00:48:15,479
modeling but I think there's there's a

1025
00:48:15,479 --> 00:48:20,420
lot of you know a lot of benefit to

1026
00:48:20,420 --> 00:48:23,729
think like an attacker and so have you

1027
00:48:23,729 --> 00:48:25,140
missed anything obvious when you're

1028
00:48:25,140 --> 00:48:27,269
talking about that password reset

1029
00:48:27,269 --> 00:48:29,940
feature you know you went through all

1030
00:48:29,940 --> 00:48:32,339
the use cases for a user but what if you

1031
00:48:32,339 --> 00:48:33,749
were in a furious what if you were

1032
00:48:33,749 --> 00:48:36,509
trying to abuse that function what could

1033
00:48:36,509 --> 00:48:40,380
you do about it and especially for your

1034
00:48:40,380 --> 00:48:44,959
particular application product company

1035
00:48:44,959 --> 00:48:48,630
you know your even your industry who

1036
00:48:48,630 --> 00:48:50,729
would you and expect an attacker to be

1037
00:48:50,729 --> 00:48:54,539
what information would they be after and

1038
00:48:54,539 --> 00:48:56,640
what what motivations might they have

1039
00:48:56,640 --> 00:48:59,549
and then that can help you think about

1040
00:48:59,549 --> 00:49:02,009
what are these these kinds of vectors we

1041
00:49:02,009 --> 00:49:04,920
should be paying attention to if you're

1042
00:49:04,920 --> 00:49:07,979
using open source make scanning of some

1043
00:49:07,979 --> 00:49:11,190
sort part of your pipeline part of your

1044
00:49:11,190 --> 00:49:13,619
production pipeline read the docs of

1045
00:49:13,619 --> 00:49:15,690
course always reads default

1046
00:49:15,690 --> 00:49:19,049
configurations read through how

1047
00:49:19,049 --> 00:49:20,880
something works read through open issues

1048
00:49:20,880 --> 00:49:25,049
as well and review best practices pretty

1049
00:49:25,049 --> 00:49:27,569
much every modern web framework has some

1050
00:49:27,569 --> 00:49:29,400
sort of reference page at this point for

1051
00:49:29,400 --> 00:49:31,949
best practices in security and for the

1052
00:49:31,949 --> 00:49:33,779
decisions that that framework is made

1053
00:49:33,779 --> 00:49:37,109
for you so even if you know you are an

1054
00:49:37,109 --> 00:49:40,739
expert Jango death especially when

1055
00:49:40,739 --> 00:49:42,209
you're setting up a new Jango service

1056
00:49:42,209 --> 00:49:44,369
it's great to go over that security

1057
00:49:44,369 --> 00:49:46,979
topic page I'm just make sure that you

1058
00:49:46,979 --> 00:49:48,660
haven't missed any parts maybe you're

1059
00:49:48,660 --> 00:49:49,799
working with some new functionality

1060
00:49:49,799 --> 00:49:52,190
there

1061
00:49:52,490 --> 00:49:57,140
cool that is it thank you and if you go

1062
00:49:57,140 --> 00:50:00,890
to doctor to calm / SEC dev as in the

1063
00:50:00,890 --> 00:50:04,010
secure developer that will redirect you

1064
00:50:04,010 --> 00:50:06,020
to these slides so you can access these

1065
00:50:06,020 --> 00:50:08,330
whenever you'd like we'll throw that and

1066
00:50:08,330 --> 00:50:09,650
slack

1067
00:50:09,650 --> 00:50:13,400
likewise feel free to go to community

1068
00:50:13,400 --> 00:50:15,830
hunter to calm to sign up for those open

1069
00:50:15,830 --> 00:50:18,140
labs just to try out some stuff

1070
00:50:18,140 --> 00:50:22,790
firsthand let me double check it doesn't

1071
00:50:22,790 --> 00:50:24,290
look like any questions right now but

1072
00:50:24,290 --> 00:50:26,990
I'll be in slack afterward and obviously

1073
00:50:26,990 --> 00:50:30,770
feel free to email me anytime so this

1074
00:50:30,770 --> 00:51:15,310
was helpful and thank you so much next

1075
00:51:15,310 --> 00:51:17,390
thanks very much everyone for your time

1076
00:51:17,390 --> 00:51:19,880
today and like I say we will post the

1077
00:51:19,880 --> 00:51:21,890
links of such as dis mentioned in the

1078
00:51:21,890 --> 00:51:23,930
channel so you can access the slides and

1079
00:51:23,930 --> 00:51:25,700
resources there we've gone through today

1080
00:51:25,700 --> 00:51:28,609
and and with that said we'll then we'll

1081
00:51:28,609 --> 00:51:30,260
close the session there and thanks very

1082
00:51:30,260 --> 00:51:31,520
much everyone and enjoy the rest of you

1083
00:51:31,520 --> 00:51:32,540
and thank you again

1084
00:51:32,540 --> 00:51:35,420
it's a pleasure thanks Elvis have a

1085
00:51:35,420 --> 00:51:37,960
great mind everyone

