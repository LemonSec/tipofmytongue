1
00:00:02,300 --> 00:00:05,490
hello everyone and welcome to the secure

2
00:00:05,490 --> 00:00:07,860
developer I'm Sam for those of you don't

3
00:00:07,860 --> 00:00:09,269
know me and I'm to see the community

4
00:00:09,269 --> 00:00:12,030
manager here and at the GSD and I'm

5
00:00:12,030 --> 00:00:14,880
joined today by Matt rebel and Simon

6
00:00:14,880 --> 00:00:17,940
maple to talk to you about ten ways to

7
00:00:17,940 --> 00:00:19,949
secure your spring week application so

8
00:00:19,949 --> 00:00:22,440
really excited to have them here but

9
00:00:22,440 --> 00:00:23,490
before I hand over to them just a few

10
00:00:23,490 --> 00:00:25,560
some housekeeping and things if you

11
00:00:25,560 --> 00:00:27,480
aren't on the slack channel yet it's the

12
00:00:27,480 --> 00:00:30,090
best place to ask questions so if you're

13
00:00:30,090 --> 00:00:32,159
watching this from the TSD website just

14
00:00:32,159 --> 00:00:33,540
scroll down to the bottom and there's a

15
00:00:33,540 --> 00:00:35,460
link otherwise if you jump onto the

16
00:00:35,460 --> 00:00:38,309
secure developer.com and there'll be a

17
00:00:38,309 --> 00:00:39,989
link to the slack and if you join live

18
00:00:39,989 --> 00:00:42,120
sessions you can ask those questions if

19
00:00:42,120 --> 00:00:43,770
you're not watching us live and you're

20
00:00:43,770 --> 00:00:45,960
watching us after and you can still jump

21
00:00:45,960 --> 00:00:47,309
onto that and answer questions and we

22
00:00:47,309 --> 00:00:49,530
can back to the speakers so please keep

23
00:00:49,530 --> 00:00:51,410
those missions coming even post event

24
00:00:51,410 --> 00:00:54,239
and last but not least if you just go to

25
00:00:54,239 --> 00:00:56,610
the cog on the bottom of your screen if

26
00:00:56,610 --> 00:00:58,320
you click that and up your resolution

27
00:00:58,320 --> 00:01:00,750
it's the best way to view today we're

28
00:01:00,750 --> 00:01:02,940
supported by sneek they are the company

29
00:01:02,940 --> 00:01:04,349
behind this we're really happy to have

30
00:01:04,349 --> 00:01:06,719
them involved but as I said it is a

31
00:01:06,719 --> 00:01:09,090
vendor-neutral community and application

32
00:01:09,090 --> 00:01:10,679
screening I hope you enjoy it so that's

33
00:01:10,679 --> 00:01:11,490
enough for me

34
00:01:11,490 --> 00:01:14,329
I'm gonna hand over to Matt and Simon

35
00:01:14,329 --> 00:01:17,609
over to you guys all right thank you

36
00:01:17,609 --> 00:01:22,049
very much share my screen here hopefully

37
00:01:22,049 --> 00:01:24,869
we'll get the inception kind of you

38
00:01:24,869 --> 00:01:32,249
going ok can you see my slides yeah

39
00:01:32,249 --> 00:01:34,590
looks good all right so this

40
00:01:34,590 --> 00:01:37,109
presentation is 10 excellent ways to

41
00:01:37,109 --> 00:01:39,329
secure your spring boot application and

42
00:01:39,329 --> 00:01:42,450
Simon and I actually wrote this or a

43
00:01:42,450 --> 00:01:45,090
blog post about it way back in July of

44
00:01:45,090 --> 00:01:47,520
last year but the good news is

45
00:01:47,520 --> 00:01:49,319
everything's actually stayed up to date

46
00:01:49,319 --> 00:01:52,259
and there hasn't been a whole lot of new

47
00:01:52,259 --> 00:01:54,119
activity in this space so these

48
00:01:54,119 --> 00:01:56,549
recommendations are still very relevant

49
00:01:56,549 --> 00:01:59,669
and we also have a link at the bottom to

50
00:01:59,669 --> 00:02:03,149
to the blog post there and so we'll

51
00:02:03,149 --> 00:02:05,520
begin do you remember where we wrote

52
00:02:05,520 --> 00:02:08,360
this month yeah we wrote it at jaikrit

53
00:02:08,360 --> 00:02:11,540
this is this is one of the hardest

54
00:02:11,540 --> 00:02:13,500
conferences to get your company to pay

55
00:02:13,500 --> 00:02:14,520
for to get you

56
00:02:14,520 --> 00:02:16,200
because you say I'm gonna go to creep

57
00:02:16,200 --> 00:02:18,720
for a week and learn some stuff but

58
00:02:18,720 --> 00:02:20,970
there's no schedule and I don't know

59
00:02:20,970 --> 00:02:22,080
who's really going to be there but

60
00:02:22,080 --> 00:02:23,700
please pay for me to go and it's

61
00:02:23,700 --> 00:02:26,100
actually an amazing conference right and

62
00:02:26,100 --> 00:02:27,750
it's just it's an awesome environment

63
00:02:27,750 --> 00:02:29,520
because first of all you're in Crete

64
00:02:29,520 --> 00:02:31,530
it's warm and beautiful and second of

65
00:02:31,530 --> 00:02:33,120
all there's tons of really knowledgeable

66
00:02:33,120 --> 00:02:34,800
people there and I think Simon and I

67
00:02:34,800 --> 00:02:36,600
actually wrote this blog post in just a

68
00:02:36,600 --> 00:02:38,250
few hours so it was one of my most

69
00:02:38,250 --> 00:02:40,440
productive moments so you can always go

70
00:02:40,440 --> 00:02:41,850
to your company with that and say hey I

71
00:02:41,850 --> 00:02:43,230
heard that Matt rave was really

72
00:02:43,230 --> 00:02:45,510
productive at Jake Reed so maybe I can

73
00:02:45,510 --> 00:02:47,490
be too I also wrote an amazing cheat

74
00:02:47,490 --> 00:02:49,320
sheet on the beach looking over the

75
00:02:49,320 --> 00:02:51,590
beautiful chrétien waters with the the

76
00:02:51,590 --> 00:02:55,680
the current chairman of of Maven Robert

77
00:02:55,680 --> 00:02:58,320
Salter so yeah absolutely go there not

78
00:02:58,320 --> 00:02:59,400
for the what for the beaches but

79
00:02:59,400 --> 00:03:01,620
obviously for the great content right

80
00:03:01,620 --> 00:03:05,550
for the productivity so the first one is

81
00:03:05,550 --> 00:03:08,670
that might be somewhat obvious but it is

82
00:03:08,670 --> 00:03:12,390
use HTTPS in production and you might

83
00:03:12,390 --> 00:03:17,010
know this as SSL but SSL is actually the

84
00:03:17,010 --> 00:03:20,100
deprecated name TLS is the official name

85
00:03:20,100 --> 00:03:22,170
for HTTPS it's called transport layer

86
00:03:22,170 --> 00:03:23,970
security and it's basically a

87
00:03:23,970 --> 00:03:25,410
cryptographic protocol that provides

88
00:03:25,410 --> 00:03:27,780
secure communication over a computer

89
00:03:27,780 --> 00:03:29,520
network its primary goal is to ensure

90
00:03:29,520 --> 00:03:31,560
privacy and data integrity between

91
00:03:31,560 --> 00:03:33,090
computer applications so obviously a

92
00:03:33,090 --> 00:03:35,910
good thing to have and as of July 24

93
00:03:35,910 --> 00:03:38,820
2018 just a week before Simon and I

94
00:03:38,820 --> 00:03:41,459
published our original post Google

95
00:03:41,459 --> 00:03:43,980
Chrome now labels HTTP sites is not

96
00:03:43,980 --> 00:03:46,050
secure so it actually shows up in the

97
00:03:46,050 --> 00:03:49,050
browser address bar and so we basically

98
00:03:49,050 --> 00:03:52,830
recommend use HTTPS Everywhere and a lot

99
00:03:52,830 --> 00:03:54,600
of the reason for this is because let's

100
00:03:54,600 --> 00:03:57,120
encrypt offers the free HTTPS

101
00:03:57,120 --> 00:03:59,940
certificates it's no longer a pain in

102
00:03:59,940 --> 00:04:02,160
the butt or a costly thing to actually

103
00:04:02,160 --> 00:04:04,530
get SSL certificates it used to be

104
00:04:04,530 --> 00:04:07,290
something that you had to pay you know

105
00:04:07,290 --> 00:04:08,580
hundreds of dollars for and if you

106
00:04:08,580 --> 00:04:10,260
wanted a wildcard certificate there was

107
00:04:10,260 --> 00:04:12,239
thousands of dollars so you can use cert

108
00:04:12,239 --> 00:04:14,850
bots to generate certificates you can

109
00:04:14,850 --> 00:04:17,070
use mixer which is a project on github

110
00:04:17,070 --> 00:04:18,870
that allows you to create localhost

111
00:04:18,870 --> 00:04:20,459
certificates and it works really nicely

112
00:04:20,459 --> 00:04:22,620
a lot of times it's a pain to do

113
00:04:22,620 --> 00:04:24,090
localhost certificates because they

114
00:04:24,090 --> 00:04:25,770
don't add them to your keychain your

115
00:04:25,770 --> 00:04:27,390
browser shows an error so it makes hurt

116
00:04:27,390 --> 00:04:28,050
it actually gets

117
00:04:28,050 --> 00:04:29,940
on that and then there's also a spring

118
00:04:29,940 --> 00:04:32,849
boot starter acne project that automates

119
00:04:32,849 --> 00:04:35,550
the getting of certificates so acne

120
00:04:35,550 --> 00:04:36,990
stands for automatic certificate

121
00:04:36,990 --> 00:04:38,280
management environment let's encrypt

122
00:04:38,280 --> 00:04:40,319
support set and you can basically have a

123
00:04:40,319 --> 00:04:42,150
cron job that gets you new certificates

124
00:04:42,150 --> 00:04:45,810
all the time and so to force HTTPS with

125
00:04:45,810 --> 00:04:47,759
spring security it's actually pretty

126
00:04:47,759 --> 00:04:49,319
easy spring security is obviously the

127
00:04:49,319 --> 00:04:51,060
default security mechanism in spring

128
00:04:51,060 --> 00:04:53,580
booth you can configure it like this if

129
00:04:53,580 --> 00:04:55,470
you extend web security configure a DAP

130
00:04:55,470 --> 00:04:57,389
tur and you just say hey it requires

131
00:04:57,389 --> 00:05:00,030
this channel and it requires secure for

132
00:05:00,030 --> 00:05:02,759
any requests so that's great but if

133
00:05:02,759 --> 00:05:04,830
you're in development you might not want

134
00:05:04,830 --> 00:05:06,870
to use HTTPS because you didn't want to

135
00:05:06,870 --> 00:05:08,159
install make sure tor something like

136
00:05:08,159 --> 00:05:11,099
that so another way to do it is just to

137
00:05:11,099 --> 00:05:12,629
do it for production so if you're using

138
00:05:12,629 --> 00:05:14,310
something like Heroku or Cloud Foundry

139
00:05:14,310 --> 00:05:16,650
or most other cloud providers they'll

140
00:05:16,650 --> 00:05:19,050
have an exported proto header that you

141
00:05:19,050 --> 00:05:21,719
can read and if that exists then you'll

142
00:05:21,719 --> 00:05:24,449
require secure so you can still use you

143
00:05:24,449 --> 00:05:27,659
know HTTP and development and HTTPS in

144
00:05:27,659 --> 00:05:34,289
production awesome and if we hop over to

145
00:05:34,289 --> 00:05:36,900
my screen now I'm gonna share as well

146
00:05:36,900 --> 00:05:39,300
and hopefully you can see that the main

147
00:05:39,300 --> 00:05:42,509
screen where are we telling you 10 tips

148
00:05:42,509 --> 00:05:45,029
to basically prevent people hacking from

149
00:05:45,029 --> 00:05:47,069
your sites and that kind of seems a

150
00:05:47,069 --> 00:05:49,199
little bit you know hard on the on the

151
00:05:49,199 --> 00:05:50,849
on the attackers because we're taking

152
00:05:50,849 --> 00:05:52,560
things taking these wonderful hacks away

153
00:05:52,560 --> 00:05:54,300
from them so what we're also going to

154
00:05:54,300 --> 00:05:56,310
offer you is a number of life hacks in

155
00:05:56,310 --> 00:06:00,629
return so Matt you know when you have

156
00:06:00,629 --> 00:06:02,789
kids you really want nightlights right

157
00:06:02,789 --> 00:06:04,680
to stop them being scared at night right

158
00:06:04,680 --> 00:06:06,509
because you know when kids wake up and

159
00:06:06,509 --> 00:06:09,120
they're at night when it's pitch black

160
00:06:09,120 --> 00:06:11,520
it can be a little bit scary for them so

161
00:06:11,520 --> 00:06:14,490
here's a big life hack for your map when

162
00:06:14,490 --> 00:06:17,909
you have old kind of like dolls or old

163
00:06:17,909 --> 00:06:20,129
teddies and things like that and rather

164
00:06:20,129 --> 00:06:22,349
than just throw them away one thing you

165
00:06:22,349 --> 00:06:25,770
can do is if you take their head off you

166
00:06:25,770 --> 00:06:27,870
can put a light bulb in the head and

167
00:06:27,870 --> 00:06:30,330
make an amazing nightlight and a

168
00:06:30,330 --> 00:06:34,020
nightlight like this isn't just free but

169
00:06:34,020 --> 00:06:36,120
it'll also prevent your children from

170
00:06:36,120 --> 00:06:37,949
being scared at night how bids there

171
00:06:37,949 --> 00:06:41,010
that's great so you have young children

172
00:06:41,010 --> 00:06:43,170
I do I have a three-year-old and I have

173
00:06:43,170 --> 00:06:44,730
a seven-year-old and this works just

174
00:06:44,730 --> 00:06:46,890
fine for them so I think they would love

175
00:06:46,890 --> 00:06:48,780
it and I have teenagers that actually

176
00:06:48,780 --> 00:06:50,430
have a dark side so I think they would

177
00:06:50,430 --> 00:06:52,440
like puff out there we go

178
00:06:52,440 --> 00:06:54,510
so there's the first life hat now we go

179
00:06:54,510 --> 00:06:55,950
over to the other ways you can actually

180
00:06:55,950 --> 00:06:57,690
remove the hacks from your environment

181
00:06:57,690 --> 00:06:58,620
so we're going to talk about scanning

182
00:06:58,620 --> 00:07:00,960
your dependencies for vulnerabilities

183
00:07:00,960 --> 00:07:02,550
and of course this has made no more

184
00:07:02,550 --> 00:07:04,800
clear than the Equifax breach which

185
00:07:04,800 --> 00:07:07,980
happened a not too long ago actually in

186
00:07:07,980 --> 00:07:11,430
fact back in 2017 now this is obviously

187
00:07:11,430 --> 00:07:12,720
made headlines and everyone knows about

188
00:07:12,720 --> 00:07:16,020
this and the and it actually sparked a

189
00:07:16,020 --> 00:07:17,370
lot of companies interest in the fact

190
00:07:17,370 --> 00:07:19,410
that they need to protect themselves to

191
00:07:19,410 --> 00:07:21,600
prevent them being breached like this as

192
00:07:21,600 --> 00:07:22,920
well but I don't want to talk about the

193
00:07:22,920 --> 00:07:24,210
company necessary I want to talk about

194
00:07:24,210 --> 00:07:27,780
the the the packages the libraries the

195
00:07:27,780 --> 00:07:29,670
frameworks the dependencies essentially

196
00:07:29,670 --> 00:07:31,680
that are behind the scenes behind the

197
00:07:31,680 --> 00:07:33,630
websites that were actually hacked in

198
00:07:33,630 --> 00:07:35,190
the first place and in the case of

199
00:07:35,190 --> 00:07:36,600
Equifax this was done with the java

200
00:07:36,600 --> 00:07:39,300
struts to vulnerability we'll brought

201
00:07:39,300 --> 00:07:41,460
driver struts that dependency which had

202
00:07:41,460 --> 00:07:44,550
a vulnerability in it now when we think

203
00:07:44,550 --> 00:07:46,650
about your application how your

204
00:07:46,650 --> 00:07:48,330
applications composed your code is

205
00:07:48,330 --> 00:07:50,130
actually very very small your

206
00:07:50,130 --> 00:07:51,540
application is very large the

207
00:07:51,540 --> 00:07:53,820
application you deploy so the code you

208
00:07:53,820 --> 00:07:57,180
write in your browser in your IDE can

209
00:07:57,180 --> 00:07:58,980
you know just be a short number of lines

210
00:07:58,980 --> 00:08:01,200
but you only need to pull in a small

211
00:08:01,200 --> 00:08:03,360
number of dependencies and then have

212
00:08:03,360 --> 00:08:05,040
your transitive dependencies being

213
00:08:05,040 --> 00:08:06,840
pulled in but for your applications very

214
00:08:06,840 --> 00:08:09,210
very large so Matt I'm gonna ask you a

215
00:08:09,210 --> 00:08:10,590
couple of questions here with this serve

216
00:08:10,590 --> 00:08:13,200
this example is just 19 lines of code

217
00:08:13,200 --> 00:08:15,270
right and this is a small application

218
00:08:15,270 --> 00:08:19,380
that we fetch and store a file into

219
00:08:19,380 --> 00:08:21,960
Amazon's s3 how's your node these days

220
00:08:21,960 --> 00:08:23,640
sir mouthing this is node I'm not sure

221
00:08:23,640 --> 00:08:29,310
maybe JavaScript I've got some knowledge

222
00:08:29,310 --> 00:08:32,940
yeah we got it right so two direct

223
00:08:32,940 --> 00:08:34,919
dependencies that we have here in this

224
00:08:34,919 --> 00:08:36,360
bar that you can see at the very top on

225
00:08:36,360 --> 00:08:37,770
the left how many are in direct

226
00:08:37,770 --> 00:08:39,720
dependencies transitive dependencies do

227
00:08:39,720 --> 00:08:41,429
you reckon we're gonna happen here I'm

228
00:08:41,429 --> 00:08:43,919
gonna go with 4,000 4,000 right you're I

229
00:08:43,919 --> 00:08:45,510
didn't realize you were so knowledgeable

230
00:08:45,510 --> 00:08:48,270
about NPM actually you know there's the

231
00:08:48,270 --> 00:08:49,170
other day as well

232
00:08:49,170 --> 00:08:50,850
NPM

233
00:08:50,850 --> 00:08:55,380
reached the 1 million package mark for 1

234
00:08:55,380 --> 00:08:56,880
million index packages that's pretty

235
00:08:56,880 --> 00:08:59,220
insane but this one just shy of four

236
00:08:59,220 --> 00:09:02,160
thousand 19 dependencies in total so 19

237
00:09:02,160 --> 00:09:04,260
lines of code 19 dependencies you have

238
00:09:04,260 --> 00:09:05,790
any idea Matt how many lines of code

239
00:09:05,790 --> 00:09:10,260
were actually shipping it mmm

240
00:09:10,260 --> 00:09:12,840
I've run count lines of code c-loc on

241
00:09:12,840 --> 00:09:16,470
many note projects and boy it's a lot so

242
00:09:16,470 --> 00:09:18,960
I'm gonna go with let's say 200,000

243
00:09:18,960 --> 00:09:22,080
bang-on pretty much 200,000 lines of

244
00:09:22,080 --> 00:09:23,850
coke there's an amazing guess so what

245
00:09:23,850 --> 00:09:25,440
we're actually looking at here is 19

246
00:09:25,440 --> 00:09:26,880
lines of code that developer sees but

247
00:09:26,880 --> 00:09:28,830
almost 200,000 lines of code a is

248
00:09:28,830 --> 00:09:31,080
deployed and where we think about the

249
00:09:31,080 --> 00:09:32,460
vulnerabilities that are going to exist

250
00:09:32,460 --> 00:09:34,590
they exist both in directed in directs

251
00:09:34,590 --> 00:09:36,780
of course but mostly in indirect because

252
00:09:36,780 --> 00:09:39,030
the dependency tree that exists behind

253
00:09:39,030 --> 00:09:41,070
about is is you know going to be much

254
00:09:41,070 --> 00:09:42,630
much greater so what I want to do is I

255
00:09:42,630 --> 00:09:44,310
want to show you a very quick demo I'm a

256
00:09:44,310 --> 00:09:46,410
developer advocate for Schmitt myself so

257
00:09:46,410 --> 00:09:48,090
the demo I'm going to use is going to be

258
00:09:48,090 --> 00:09:49,710
using snick but of course there are

259
00:09:49,710 --> 00:09:51,030
other tools that you can use as well

260
00:09:51,030 --> 00:09:52,950
that do this just as easily I'm not

261
00:09:52,950 --> 00:09:54,810
going to show you anything which is paid

262
00:09:54,810 --> 00:09:56,310
service everything I show you is going

263
00:09:56,310 --> 00:09:58,740
to be entirely free on a freemium tier

264
00:09:58,740 --> 00:10:01,350
that you can use today so I'm going to

265
00:10:01,350 --> 00:10:05,190
go across to my browser here I am logged

266
00:10:05,190 --> 00:10:08,100
in with with the into this next night

267
00:10:08,100 --> 00:10:11,580
snick site that's Nick - IO I've logged

268
00:10:11,580 --> 00:10:13,140
in with my github credential so I can

269
00:10:13,140 --> 00:10:15,660
click on github here I'm going to open

270
00:10:15,660 --> 00:10:20,010
up one of my repositories in github and

271
00:10:20,010 --> 00:10:21,900
the repository I'm gonna open here is

272
00:10:21,900 --> 00:10:23,790
let's say zips little goof now this is a

273
00:10:23,790 --> 00:10:25,680
nice repo because it actually has the

274
00:10:25,680 --> 00:10:28,380
name of the vulnerability in the in the

275
00:10:28,380 --> 00:10:30,060
repo name itself which is kind of nice

276
00:10:30,060 --> 00:10:31,500
what this is going to do is it's going

277
00:10:31,500 --> 00:10:33,390
to import this in fact it's already done

278
00:10:33,390 --> 00:10:35,460
this I can view this product and I can

279
00:10:35,460 --> 00:10:38,580
see not only the dependency tree that is

280
00:10:38,580 --> 00:10:40,440
behind this server behind this

281
00:10:40,440 --> 00:10:42,750
application and this includes direct

282
00:10:42,750 --> 00:10:45,330
dependencies like spring boot and also

283
00:10:45,330 --> 00:10:46,980
the vulnerabilities that exist in the

284
00:10:46,980 --> 00:10:49,380
transitive so I can see some like

285
00:10:49,380 --> 00:10:51,600
hibernate and some like aspectj and

286
00:10:51,600 --> 00:10:54,090
other things like that if I wanted to go

287
00:10:54,090 --> 00:10:56,550
to my issues I can see more information

288
00:10:56,550 --> 00:10:58,230
and more detail about each of these and

289
00:10:58,230 --> 00:11:01,520
even this is for example a zip slip

290
00:11:01,520 --> 00:11:03,990
vulnerability I can even fix this just

291
00:11:03,990 --> 00:11:04,649
by clicking

292
00:11:04,649 --> 00:11:08,339
through and then pushing my poor request

293
00:11:08,339 --> 00:11:10,889
for this specific vulnerability back to

294
00:11:10,889 --> 00:11:12,959
github so I import it through github and

295
00:11:12,959 --> 00:11:15,240
I can push the fix the automatic

296
00:11:15,240 --> 00:11:17,129
remediation back to get home what this

297
00:11:17,129 --> 00:11:18,629
is what this is gonna do is it's gonna

298
00:11:18,629 --> 00:11:20,970
pull us up to the minimum version that

299
00:11:20,970 --> 00:11:25,129
you require so from 112 up to 113 now

300
00:11:25,129 --> 00:11:27,929
when we think about vulnerabilities and

301
00:11:27,929 --> 00:11:30,480
what what vulnerabilities you can expose

302
00:11:30,480 --> 00:11:32,189
I'm going to show you one vulnerability

303
00:11:32,189 --> 00:11:34,649
in an application that we have here this

304
00:11:34,649 --> 00:11:36,509
is just going to be a spring goof

305
00:11:36,509 --> 00:11:39,209
application this is a spring boot

306
00:11:39,209 --> 00:11:41,399
application it's a grocery list

307
00:11:41,399 --> 00:11:43,980
essentially and it has a repository so

308
00:11:43,980 --> 00:11:45,420
this is going to be using sprint data

309
00:11:45,420 --> 00:11:47,639
and my I can show you a couple of other

310
00:11:47,639 --> 00:11:49,920
other files here we have an item this is

311
00:11:49,920 --> 00:11:51,899
my domain objects which is a grocery

312
00:11:51,899 --> 00:11:53,429
item and I can also show you the

313
00:11:53,429 --> 00:11:55,170
repository which is just a basic crud

314
00:11:55,170 --> 00:11:56,670
repository for those of you who are

315
00:11:56,670 --> 00:11:58,079
familiar with spring data you'll you'll

316
00:11:58,079 --> 00:11:59,970
recognize this but what I'm actually

317
00:11:59,970 --> 00:12:02,550
exposing as well is this repository rest

318
00:12:02,550 --> 00:12:04,709
resource and this is exposing my my data

319
00:12:04,709 --> 00:12:08,790
my my domain object models with with

320
00:12:08,790 --> 00:12:11,579
restful api s-- so if I come here I can

321
00:12:11,579 --> 00:12:14,579
actually say let's go to my items API

322
00:12:14,579 --> 00:12:17,309
and I can see some information here so

323
00:12:17,309 --> 00:12:20,639
we can get beans at 50p milker $1 9 and

324
00:12:20,639 --> 00:12:23,160
so forth if I wanted to as this is just

325
00:12:23,160 --> 00:12:25,649
Jason I can look at one specific version

326
00:12:25,649 --> 00:12:28,589
of that now with this API when I'm with

327
00:12:28,589 --> 00:12:31,980
this this restful api what i'm gonna do

328
00:12:31,980 --> 00:12:35,040
now is i'm to this and a quick curl and

329
00:12:35,040 --> 00:12:37,199
this curl is going to use spurring the

330
00:12:37,199 --> 00:12:39,749
spel spring execution expression

331
00:12:39,749 --> 00:12:41,670
language under the covers and what it's

332
00:12:41,670 --> 00:12:43,170
going to do is it's gonna exploit a

333
00:12:43,170 --> 00:12:45,480
vulnerability called spring break by

334
00:12:45,480 --> 00:12:51,660
grabbing the run time by executing with

335
00:12:51,660 --> 00:12:55,379
that runtime the et Cie a cat of the et

336
00:12:55,379 --> 00:12:57,689
Cie password and then grabbing the out

337
00:12:57,689 --> 00:12:59,910
 screaming sending that back to my

338
00:12:59,910 --> 00:13:02,490
to my console and i'm just going to be

339
00:13:02,490 --> 00:13:04,829
hitting this one API here as soon as I

340
00:13:04,829 --> 00:13:06,480
hit that you can see all of a sudden

341
00:13:06,480 --> 00:13:07,769
we've got an exploit and this is the

342
00:13:07,769 --> 00:13:11,660
e.t.c password on file here so

343
00:13:11,660 --> 00:13:13,970
that was one example of an exploit and

344
00:13:13,970 --> 00:13:15,860
of course the with this exploit the

345
00:13:15,860 --> 00:13:18,230
simplest way of trying to fix this is by

346
00:13:18,230 --> 00:13:22,550
moving up to a version of the your

347
00:13:22,550 --> 00:13:24,440
dependency that has the fix for that

348
00:13:24,440 --> 00:13:26,449
runtime so let's talk about how we can

349
00:13:26,449 --> 00:13:28,009
upgrade to latest releases as well

350
00:13:28,009 --> 00:13:30,110
because what I showed you is using a

351
00:13:30,110 --> 00:13:33,440
tool that will allow you to move up to

352
00:13:33,440 --> 00:13:35,660
the closest release to the one you are

353
00:13:35,660 --> 00:13:39,410
on to avoid vulnerabilities avoid

354
00:13:39,410 --> 00:13:40,940
vulnerabilities in your current versions

355
00:13:40,940 --> 00:13:42,410
another way of doing something like this

356
00:13:42,410 --> 00:13:44,120
is to upgrade to the latest releases and

357
00:13:44,120 --> 00:13:46,639
try and maintain being on that latest

358
00:13:46,639 --> 00:13:48,829
release now if used to go to spring dot

359
00:13:48,829 --> 00:13:50,649
start sorry start spring dot IO

360
00:13:50,649 --> 00:13:53,089
Jocelyn's second favorite place on the

361
00:13:53,089 --> 00:13:55,550
Internet apart from production you can

362
00:13:55,550 --> 00:13:57,290
see that you can essentially create your

363
00:13:57,290 --> 00:13:59,269
application here and what this will do

364
00:13:59,269 --> 00:14:00,949
is it will put you on the latest

365
00:14:00,949 --> 00:14:02,990
versions of not just your direct

366
00:14:02,990 --> 00:14:04,490
dependencies but the transitive

367
00:14:04,490 --> 00:14:06,139
dependencies that get pulled in as well

368
00:14:06,139 --> 00:14:07,880
so as soon as you create your

369
00:14:07,880 --> 00:14:09,230
application you know you're gonna be on

370
00:14:09,230 --> 00:14:11,449
the latest versions so the question is

371
00:14:11,449 --> 00:14:12,680
then how do you stay on the latest

372
00:14:12,680 --> 00:14:14,930
versions and also how well do you know

373
00:14:14,930 --> 00:14:17,630
your dependency if if there are you know

374
00:14:17,630 --> 00:14:19,970
downstream transitive vulgar bilities

375
00:14:19,970 --> 00:14:21,620
how well do you know your direct

376
00:14:21,620 --> 00:14:23,540
dependencies are going to be pulling in

377
00:14:23,540 --> 00:14:25,459
the fixed version of your transitive so

378
00:14:25,459 --> 00:14:26,959
it's very important to understand that

379
00:14:26,959 --> 00:14:29,689
the health of your dependencies and you

380
00:14:29,689 --> 00:14:31,639
know how often they are updates so there

381
00:14:31,639 --> 00:14:33,860
are a few things here we can look at we

382
00:14:33,860 --> 00:14:35,990
can look at if you're using NPM for

383
00:14:35,990 --> 00:14:37,880
example you can use the NPM check

384
00:14:37,880 --> 00:14:41,380
updates command which will look at the

385
00:14:41,380 --> 00:14:44,120
the node modules that you have and see

386
00:14:44,120 --> 00:14:45,500
what versions you're currently running

387
00:14:45,500 --> 00:14:47,540
on what is the latest version very very

388
00:14:47,540 --> 00:14:49,639
similar with maven here using the

389
00:14:49,639 --> 00:14:52,160
display dependency updates and also with

390
00:14:52,160 --> 00:14:54,949
with Gradle as well you can see which

391
00:14:54,949 --> 00:14:56,990
versions you are currently running on

392
00:14:56,990 --> 00:14:58,430
which versions you need to you need to

393
00:14:58,430 --> 00:15:01,160
jump up to so that's the way of keeping

394
00:15:01,160 --> 00:15:02,870
up to date sometimes that's not possible

395
00:15:02,870 --> 00:15:06,800
and it's better to switch to a model

396
00:15:06,800 --> 00:15:09,079
whereby you upgrade just when you just

397
00:15:09,079 --> 00:15:10,970
when you need to with security for some

398
00:15:10,970 --> 00:15:12,709
newer apps that you're updating quite

399
00:15:12,709 --> 00:15:15,350
regularly this is more of a possibility

400
00:15:15,350 --> 00:15:20,240
for you so Matt let's talk about what

401
00:15:20,240 --> 00:15:21,649
happens when you've either got a lovely

402
00:15:21,649 --> 00:15:24,559
loaf of bread or you've got maybe a

403
00:15:24,559 --> 00:15:25,310
bagel

404
00:15:25,310 --> 00:15:26,630
or something like that you're trying to

405
00:15:26,630 --> 00:15:28,040
cut it in half you're trying to cut it

406
00:15:28,040 --> 00:15:30,290
bang-on so that it's completely level

407
00:15:30,290 --> 00:15:31,970
then you hate it when it's an angle

408
00:15:31,970 --> 00:15:35,420
right now yeah well I can imagine with

409
00:15:35,420 --> 00:15:36,290
bagels

410
00:15:36,290 --> 00:15:38,840
you know bagels come with this amazing

411
00:15:38,840 --> 00:15:40,880
life hack and they come with this this

412
00:15:40,880 --> 00:15:43,010
area that you can actually stabilize the

413
00:15:43,010 --> 00:15:45,470
whole bagel as you cut it so you know

414
00:15:45,470 --> 00:15:48,230
with this hole you can cut your bagel

415
00:15:48,230 --> 00:15:50,660
completely flat every single time you

416
00:15:50,660 --> 00:15:53,450
will never have a slanted bagel amazing

417
00:15:53,450 --> 00:15:55,580
life hack typically work once or twice

418
00:15:55,580 --> 00:15:57,620
before before you realize perhaps a

419
00:15:57,620 --> 00:15:59,540
better way but this is an amazing life

420
00:15:59,540 --> 00:16:01,779
hack Matt you tell me how that goes

421
00:16:01,779 --> 00:16:04,670
my son loves bagel so after try that

422
00:16:04,670 --> 00:16:06,640
next week

423
00:16:06,640 --> 00:16:12,260
all right back to me ah let's see make

424
00:16:12,260 --> 00:16:15,500
sure I'm screen sharing here don't give

425
00:16:15,500 --> 00:16:17,710
it away

426
00:16:30,420 --> 00:16:34,560
so you might have heard of CSRF that

427
00:16:34,560 --> 00:16:36,420
stands for Christ's cross-site request

428
00:16:36,420 --> 00:16:38,850
forgery and it's basically an attack

429
00:16:38,850 --> 00:16:41,850
where a user can execute unwanted

430
00:16:41,850 --> 00:16:43,500
actions in an application they're logged

431
00:16:43,500 --> 00:16:46,170
into this typically happens by using

432
00:16:46,170 --> 00:16:48,420
like an embedded gif or something like

433
00:16:48,420 --> 00:16:52,350
that and in getting a cookie from a site

434
00:16:52,350 --> 00:16:54,240
and then using that cookie to actually

435
00:16:54,240 --> 00:16:57,120
send back the request and do you know

436
00:16:57,120 --> 00:16:59,339
bad things to your application so if the

437
00:16:59,339 --> 00:17:01,620
user is a normal user a successful

438
00:17:01,620 --> 00:17:03,449
attack and involved like state changing

439
00:17:03,449 --> 00:17:05,849
requests like transferring funds or

440
00:17:05,849 --> 00:17:07,439
maybe changing their email address which

441
00:17:07,439 --> 00:17:09,419
obviously can be dangerous and if the

442
00:17:09,419 --> 00:17:11,579
user has elevated formations as CSRF

443
00:17:11,579 --> 00:17:13,140
attack and a compromised the entire

444
00:17:13,140 --> 00:17:15,209
application so a lot of people think

445
00:17:15,209 --> 00:17:17,429
that you know CSRF isn't a big deal like

446
00:17:17,429 --> 00:17:20,130
so what i would like to introduce my dog

447
00:17:20,130 --> 00:17:22,140
to you his name is Sagan and he's a

448
00:17:22,140 --> 00:17:23,549
border collie so he wants me to throw

449
00:17:23,549 --> 00:17:24,929
the frisbee right now usually I'm

450
00:17:24,929 --> 00:17:27,240
working here all the day and quiet and

451
00:17:27,240 --> 00:17:28,500
he doesn't even care but as soon as I

452
00:17:28,500 --> 00:17:30,390
start talking he's into it so if I

453
00:17:30,390 --> 00:17:31,500
locked him out of the room he would be

454
00:17:31,500 --> 00:17:33,419
scratching at the door so sorry for the

455
00:17:33,419 --> 00:17:34,860
barks everyone's wrong he's kind of like

456
00:17:34,860 --> 00:17:36,780
a csrs attack happening right now

457
00:17:36,780 --> 00:17:40,919
but basically I'm the bad thing that can

458
00:17:40,919 --> 00:17:42,750
happen with CSRF like imagine if someone

459
00:17:42,750 --> 00:17:45,090
actually gets your email address and

460
00:17:45,090 --> 00:17:46,799
changes your email address most people

461
00:17:46,799 --> 00:17:49,169
think like what's the big deal like but

462
00:17:49,169 --> 00:17:51,179
if they go to your bank and they put in

463
00:17:51,179 --> 00:17:53,100
that email address and they say you know

464
00:17:53,100 --> 00:17:55,290
forgot password and it sends it to that

465
00:17:55,290 --> 00:17:56,640
one then they can get your bank and then

466
00:17:56,640 --> 00:17:58,380
boy that's a big deal because they can

467
00:17:58,380 --> 00:18:01,110
get all your funds so with spring boot

468
00:18:01,110 --> 00:18:04,110
and spring security there is a way to

469
00:18:04,110 --> 00:18:06,450
actually do it and spring security

470
00:18:06,450 --> 00:18:08,520
actually as CSRF support arm by default

471
00:18:08,520 --> 00:18:10,320
so if you don't want it you have to do

472
00:18:10,320 --> 00:18:14,309
HTTP dot CSRF dot disabled and then if

473
00:18:14,309 --> 00:18:16,020
you're using spring MBC's form tag or

474
00:18:16,020 --> 00:18:18,780
time leaf and enable web security it'll

475
00:18:18,780 --> 00:18:20,940
automatically be added as a hidden input

476
00:18:20,940 --> 00:18:23,130
field and if you're using a JavaScript

477
00:18:23,130 --> 00:18:25,410
framework like react or angular you'll

478
00:18:25,410 --> 00:18:26,940
actually have to do a little more work

479
00:18:26,940 --> 00:18:28,549
so this shows what that looks like

480
00:18:28,549 --> 00:18:31,140
you'll have a token repository and then

481
00:18:31,140 --> 00:18:34,559
you'll set that it's with HTTP only as

482
00:18:34,559 --> 00:18:37,770
false because HTTP only is true is on by

483
00:18:37,770 --> 00:18:39,630
default and if you're using a JavaScript

484
00:18:39,630 --> 00:18:41,340
application you want to be able to read

485
00:18:41,340 --> 00:18:43,480
the cookie and then send it back as a

486
00:18:43,480 --> 00:18:45,340
as a header so if you're using angular

487
00:18:45,340 --> 00:18:47,890
and you specify this in your spring

488
00:18:47,890 --> 00:18:50,380
security configuration everything will

489
00:18:50,380 --> 00:18:52,900
happen automatically like it's smart

490
00:18:52,900 --> 00:18:56,440
enough to read an X s RF token cookie

491
00:18:56,440 --> 00:19:00,100
and send it back as an X X s RF token

492
00:19:00,100 --> 00:19:02,230
header if used in react you have to do a

493
00:19:02,230 --> 00:19:04,690
little bit of that work to yourself but

494
00:19:04,690 --> 00:19:07,780
that's all that works the other thing

495
00:19:07,780 --> 00:19:09,310
that is probably one of the best things

496
00:19:09,310 --> 00:19:10,930
you can do is a content security policy

497
00:19:10,930 --> 00:19:12,820
so what I found is a lot of developers

498
00:19:12,820 --> 00:19:14,530
don't know about this and you can

499
00:19:14,530 --> 00:19:16,360
actually do a lot of this work at your

500
00:19:16,360 --> 00:19:18,400
web server so you don't actually need to

501
00:19:18,400 --> 00:19:21,670
do it on your actual application you can

502
00:19:21,670 --> 00:19:23,650
do it at the web server level so a

503
00:19:23,650 --> 00:19:25,690
content security policy is an added

504
00:19:25,690 --> 00:19:26,860
layer of security that basically

505
00:19:26,860 --> 00:19:29,290
mitigates cross-site scripting and data

506
00:19:29,290 --> 00:19:30,790
injection attacks so what you can do

507
00:19:30,790 --> 00:19:32,860
with the content security policy is say

508
00:19:32,860 --> 00:19:35,320
hey only these websites can actually

509
00:19:35,320 --> 00:19:37,960
have scripts that load into my site and

510
00:19:37,960 --> 00:19:41,530
so you can just have your scripts for

511
00:19:41,530 --> 00:19:42,820
instance the other thing that I've seen

512
00:19:42,820 --> 00:19:46,300
is every application is secure until it

513
00:19:46,300 --> 00:19:48,130
goes to production and marketing gets

514
00:19:48,130 --> 00:19:51,880
involved so that's one thing to be aware

515
00:19:51,880 --> 00:19:54,340
of the default spring security headers

516
00:19:54,340 --> 00:19:56,200
that are sent are these ones so you can

517
00:19:56,200 --> 00:19:59,140
see cache control expires security

518
00:19:59,140 --> 00:20:01,750
transport and x-ray options and all that

519
00:20:01,750 --> 00:20:03,880
and then if you want to do

520
00:20:03,880 --> 00:20:05,740
CSP in your actual spring boot

521
00:20:05,740 --> 00:20:07,480
application here's how you might do that

522
00:20:07,480 --> 00:20:09,610
you can say scripts or self so if

523
00:20:09,610 --> 00:20:11,020
there's any scripts that come from this

524
00:20:11,020 --> 00:20:13,240
application those are fine and then if

525
00:20:13,240 --> 00:20:15,010
you want to embed Twitter or something

526
00:20:15,010 --> 00:20:16,210
like that then you would have to have

527
00:20:16,210 --> 00:20:19,330
those as well and once you've done that

528
00:20:19,330 --> 00:20:21,310
you can verify it with security headers

529
00:20:21,310 --> 00:20:23,260
comm which is a website that will

530
00:20:23,260 --> 00:20:25,240
actually go through and see all your

531
00:20:25,240 --> 00:20:27,100
different headers and if they're set

532
00:20:27,100 --> 00:20:28,930
properly and if you have a content

533
00:20:28,930 --> 00:20:31,260
security policy as part of that and then

534
00:20:31,260 --> 00:20:33,820
we wrote a blog post or a colleague of

535
00:20:33,820 --> 00:20:35,920
mine did on how to have better website

536
00:20:35,920 --> 00:20:37,900
security and how to get you know an A+

537
00:20:37,900 --> 00:20:39,730
rating on those security headers so you

538
00:20:39,730 --> 00:20:41,740
can see this is actually from his site

539
00:20:41,740 --> 00:20:44,200
and he started out with the D and so

540
00:20:44,200 --> 00:20:50,110
that's pretty neat now we have another

541
00:20:50,110 --> 00:20:52,679
life pack

542
00:20:53,880 --> 00:20:55,830
you absolutely have another life back so

543
00:20:55,830 --> 00:20:58,620
Matt your coffee drinker or tea drinker

544
00:20:58,620 --> 00:21:01,230
I actually like them both but I've been

545
00:21:01,230 --> 00:21:04,550
drinking more tea lately okay right so

546
00:21:04,550 --> 00:21:07,530
what do you do Matt if you're one a cup

547
00:21:07,530 --> 00:21:09,930
of tea want a cup of coffee but all the

548
00:21:09,930 --> 00:21:16,290
mugs are completely used mmm use a beer

549
00:21:16,290 --> 00:21:18,120
mug that's a that's a good one I've got

550
00:21:18,120 --> 00:21:19,530
a better one for you there Matt rather

551
00:21:19,530 --> 00:21:20,790
than use a beer mug then you'll have

552
00:21:20,790 --> 00:21:23,760
more to wash up right this is kinda like

553
00:21:23,760 --> 00:21:26,670
peppermint tea let me let me share my

554
00:21:26,670 --> 00:21:28,650
screen and I'll show you I'll show you

555
00:21:28,650 --> 00:21:29,490
what I'm talking about

556
00:21:29,490 --> 00:21:31,710
so the worst thing for me and this is

557
00:21:31,710 --> 00:21:33,230
great for students as well of course

558
00:21:33,230 --> 00:21:37,230
when we when we have hope you can see my

559
00:21:37,230 --> 00:21:39,270
screen now hopefully right so when we

560
00:21:39,270 --> 00:21:42,120
have a cup of tea or when we have a

561
00:21:42,120 --> 00:21:43,680
coffee that we want to we want to make

562
00:21:43,680 --> 00:21:45,840
and we don't have this cup the best

563
00:21:45,840 --> 00:21:47,130
thing we can do is rather than have

564
00:21:47,130 --> 00:21:50,070
peppermint tea have pepper tea okay so

565
00:21:50,070 --> 00:21:51,900
what we have here is a nice cup of tea

566
00:21:51,900 --> 00:21:54,450
that we can enjoy plus you can eat the

567
00:21:54,450 --> 00:21:56,520
cup afterwards and it's very very

568
00:21:56,520 --> 00:21:58,680
healthy for you say this is a great life

569
00:21:58,680 --> 00:22:00,990
hack saves you time doesn't make you

570
00:22:00,990 --> 00:22:03,480
wash up plus it gives you something one

571
00:22:03,480 --> 00:22:04,770
of probably one of your five a day

572
00:22:04,770 --> 00:22:06,720
afterwards so great life hack for you

573
00:22:06,720 --> 00:22:09,300
there and if you like spicy tea then it

574
00:22:09,300 --> 00:22:11,010
works great right exactly you can have a

575
00:22:11,010 --> 00:22:12,300
chili pepper as well and that's a

576
00:22:12,300 --> 00:22:14,790
shorter like a shot of tea maybe for the

577
00:22:14,790 --> 00:22:17,190
smaller ones but and this is like for a

578
00:22:17,190 --> 00:22:18,720
bell pepper it's kind of like a longer

579
00:22:18,720 --> 00:22:20,190
drink so you got you've got choices of

580
00:22:20,190 --> 00:22:20,900
course

581
00:22:20,900 --> 00:22:23,520
so number Stix this is back to you right

582
00:22:23,520 --> 00:22:29,700
Matt yep open ID connect is a great way

583
00:22:29,700 --> 00:22:33,180
to do authentication and for me it was

584
00:22:33,180 --> 00:22:34,290
one of those things where I was a

585
00:22:34,290 --> 00:22:35,910
consultant for 20 years before I joined

586
00:22:35,910 --> 00:22:39,180
octa which obviously has Open ID Connect

587
00:22:39,180 --> 00:22:42,870
as one of our products and I would often

588
00:22:42,870 --> 00:22:45,120
develop applications that just had the

589
00:22:45,120 --> 00:22:47,370
users in the application and it wasn't a

590
00:22:47,370 --> 00:22:48,840
big deal and you know I worked for many

591
00:22:48,840 --> 00:22:51,510
corporations that did this and what I

592
00:22:51,510 --> 00:22:53,480
realized was as an Enterprise Architect

593
00:22:53,480 --> 00:22:55,800
what you really want to do is share your

594
00:22:55,800 --> 00:22:57,720
users and you don't really want to have

595
00:22:57,720 --> 00:22:59,940
each application deal with passwords or

596
00:22:59,940 --> 00:23:01,710
user management or anything like that so

597
00:23:01,710 --> 00:23:04,410
open ID Connect kind of adds that

598
00:23:04,410 --> 00:23:06,930
ability and how it works and how it came

599
00:23:06,930 --> 00:23:07,680
about

600
00:23:07,680 --> 00:23:09,420
was it started with I don't know if you

601
00:23:09,420 --> 00:23:11,520
used yelp.com or maybe you know

602
00:23:11,520 --> 00:23:14,340
linkedin.com way back in 2005 but they

603
00:23:14,340 --> 00:23:16,650
used to actually prompt you to put in

604
00:23:16,650 --> 00:23:18,390
like your Gmail username and password

605
00:23:18,390 --> 00:23:21,870
and if you did that then basically they

606
00:23:21,870 --> 00:23:23,790
would have your password and then they

607
00:23:23,790 --> 00:23:25,020
would use it to get your contact

608
00:23:25,020 --> 00:23:26,850
information and and do all kinds of

609
00:23:26,850 --> 00:23:29,490
stuff like that and spam all your you

610
00:23:29,490 --> 00:23:31,710
know contacts and so open ID connects

611
00:23:31,710 --> 00:23:34,250
came about to actually allow you to

612
00:23:34,250 --> 00:23:37,770
redirect to a provider like Gmail that

613
00:23:37,770 --> 00:23:39,720
has your information and then give

614
00:23:39,720 --> 00:23:41,250
someone permission to get to your

615
00:23:41,250 --> 00:23:43,350
contacts and so this is how the whole

616
00:23:43,350 --> 00:23:45,990
flow looks but if you use like sign in

617
00:23:45,990 --> 00:23:48,210
with Facebook or sign in with Google

618
00:23:48,210 --> 00:23:50,340
you've used open ID Connect and you

619
00:23:50,340 --> 00:23:52,200
might have heard the more familiar term

620
00:23:52,200 --> 00:23:55,620
called OAuth 2 and O auth 2 does the

621
00:23:55,620 --> 00:23:57,120
same thing but it doesn't include any

622
00:23:57,120 --> 00:23:59,160
identity information so there's no way

623
00:23:59,160 --> 00:24:00,810
of telling who the user is all you know

624
00:24:00,810 --> 00:24:04,080
is that they have access to data and so

625
00:24:04,080 --> 00:24:06,210
open ID Connect basically makes that

626
00:24:06,210 --> 00:24:08,640
very easy it was developed by Google and

627
00:24:08,640 --> 00:24:10,710
Microsoft and many of the big players to

628
00:24:10,710 --> 00:24:12,720
actually allow this type of thing and

629
00:24:12,720 --> 00:24:13,530
anyone can use it

630
00:24:13,530 --> 00:24:15,450
the cool thing as a developers if you're

631
00:24:15,450 --> 00:24:18,600
coding to it then it'll work with any

632
00:24:18,600 --> 00:24:20,130
provider so you could use Google you

633
00:24:20,130 --> 00:24:22,080
could use octave you could use Facebook

634
00:24:22,080 --> 00:24:24,540
and you're not really tying your code to

635
00:24:24,540 --> 00:24:26,790
any particular provider so with spring

636
00:24:26,790 --> 00:24:29,610
security they've added oh I DC support

637
00:24:29,610 --> 00:24:32,760
in 5.1 and you can see what the

638
00:24:32,760 --> 00:24:35,010
configuration looks like here you'll

639
00:24:35,010 --> 00:24:37,530
basically register it with a company

640
00:24:37,530 --> 00:24:39,750
like octo or github and from that you'll

641
00:24:39,750 --> 00:24:41,430
get a client ID and a client secret and

642
00:24:41,430 --> 00:24:44,370
so what we call identity providers is

643
00:24:44,370 --> 00:24:47,250
kind of like the DMV for your car if you

644
00:24:47,250 --> 00:24:48,900
take your car in and get a new license

645
00:24:48,900 --> 00:24:50,700
plate this is the same sort of thing

646
00:24:50,700 --> 00:24:51,660
where you need to register your

647
00:24:51,660 --> 00:24:53,610
application and then you'll have an

648
00:24:53,610 --> 00:24:56,010
issuer URL that gets all the information

649
00:24:56,010 --> 00:24:58,680
for the specific end points that spring

650
00:24:58,680 --> 00:25:00,900
security needs to talk to and so I'm

651
00:25:00,900 --> 00:25:02,850
gonna do a quick demo and just show you

652
00:25:02,850 --> 00:25:06,750
how this code works here so I'll go to

653
00:25:06,750 --> 00:25:10,230
my ID you know did you notice earlier

654
00:25:10,230 --> 00:25:12,630
that as soon as you said Yelp your dog

655
00:25:12,630 --> 00:25:18,000
barked I took this is a fan yeah right

656
00:25:18,000 --> 00:25:19,140
right

657
00:25:19,140 --> 00:25:25,140
so here's a simple application so a full

658
00:25:25,140 --> 00:25:28,380
screen this and I don't know if any of

659
00:25:28,380 --> 00:25:33,030
you used SDK man but SDK man allows you

660
00:25:33,030 --> 00:25:35,910
to basically pick your Java versions so

661
00:25:35,910 --> 00:25:38,250
we have Java 12 we have Java 11 all

662
00:25:38,250 --> 00:25:40,710
these different things if I look at my

663
00:25:40,710 --> 00:25:43,680
current Java version I'm using Java 12

664
00:25:43,680 --> 00:25:46,650
and so it also allows you to install a

665
00:25:46,650 --> 00:25:48,870
spring boot and with spring booth you

666
00:25:48,870 --> 00:25:52,140
can actually run scripts like this so

667
00:25:52,140 --> 00:25:53,610
this you just grab from the groovy

668
00:25:53,610 --> 00:25:55,890
community to pull in the spring boot

669
00:25:55,890 --> 00:25:58,290
starter a lot to client we create a rest

670
00:25:58,290 --> 00:26:00,270
controller and then we print out the

671
00:26:00,270 --> 00:26:03,750
user's name so if I do Spring Run hello

672
00:26:03,750 --> 00:26:08,280
Ruby it'll start it up and pull in all

673
00:26:08,280 --> 00:26:09,660
the spring boot and I didn't even need

674
00:26:09,660 --> 00:26:14,100
to write a pom.xml or a Gradle file and

675
00:26:14,100 --> 00:26:16,920
so once that's up and running I can open

676
00:26:16,920 --> 00:26:21,090
up the browser see we'll try so far

677
00:26:21,090 --> 00:26:24,840
right here i get the full screen gone so

678
00:26:24,840 --> 00:26:32,700
it's not gonna let me hold on so we do

679
00:26:32,700 --> 00:26:36,810
localhost 8080 and it'll basically

680
00:26:36,810 --> 00:26:38,820
redirect me to octa since i configure

681
00:26:38,820 --> 00:26:42,420
that and i log in and it comes back and

682
00:26:42,420 --> 00:26:44,880
you'll see it says hello to that strange

683
00:26:44,880 --> 00:26:47,490
number and so I also printed out the

684
00:26:47,490 --> 00:26:48,990
user here that comes from the Java

685
00:26:48,990 --> 00:26:50,970
security principle and you'll notice it

686
00:26:50,970 --> 00:26:52,470
has a whole bunch of other information

687
00:26:52,470 --> 00:26:55,590
in it like preferred username and name

688
00:26:55,590 --> 00:26:59,720
right here but it's in a user attributes

689
00:26:59,720 --> 00:27:05,820
clause so if I do user dot user

690
00:27:05,820 --> 00:27:09,450
I think it's user attributes well the

691
00:27:09,450 --> 00:27:10,830
cool thing is you can actually look it

692
00:27:10,830 --> 00:27:13,740
up on this class right here this Olaf to

693
00:27:13,740 --> 00:27:16,440
authentication token so this is what

694
00:27:16,440 --> 00:27:19,500
spring security is implementing that

695
00:27:19,500 --> 00:27:22,890
principle with so if we look at that we

696
00:27:22,890 --> 00:27:24,600
can see that it's got a get principal

697
00:27:24,600 --> 00:27:26,760
and then if we get that principal it's

698
00:27:26,760 --> 00:27:28,860
an oauth2 user and then that has

699
00:27:28,860 --> 00:27:31,080
attributes so we'll go ahead and say

700
00:27:31,080 --> 00:27:32,210
user

701
00:27:32,210 --> 00:27:39,390
principal attributes name let's try that

702
00:27:39,390 --> 00:27:42,800
so we will have to restart the server

703
00:27:46,250 --> 00:27:49,830
and then it's implementing and using

704
00:27:49,830 --> 00:27:52,050
single sign-on so I never signed out so

705
00:27:52,050 --> 00:27:54,240
I just refresh and it's going to talk to

706
00:27:54,240 --> 00:27:56,160
the server and come back and give me my

707
00:27:56,160 --> 00:27:58,080
proper name so it's a great way to get

708
00:27:58,080 --> 00:28:00,630
identity information from spring

709
00:28:00,630 --> 00:28:02,640
security and you'll notice this is all I

710
00:28:02,640 --> 00:28:04,590
need to configure for octa I did go and

711
00:28:04,590 --> 00:28:06,330
register that before this session but

712
00:28:06,330 --> 00:28:08,130
it's pretty easy to do you just create a

713
00:28:08,130 --> 00:28:09,750
new application you select type of web

714
00:28:09,750 --> 00:28:11,670
you give it a name and then it spits out

715
00:28:11,670 --> 00:28:13,290
all this information for you the client

716
00:28:13,290 --> 00:28:15,480
ID and the client secret and if you want

717
00:28:15,480 --> 00:28:17,880
to use Octus plug-in there's also a

718
00:28:17,880 --> 00:28:20,340
different starter you can use and a more

719
00:28:20,340 --> 00:28:24,090
concise bit of configuration so we also

720
00:28:24,090 --> 00:28:25,980
do audience validation when we do that

721
00:28:25,980 --> 00:28:28,920
and we do some more groups mapping for

722
00:28:28,920 --> 00:28:30,990
the granted authorities that spring

723
00:28:30,990 --> 00:28:41,790
security doesn't do by default so this

724
00:28:41,790 --> 00:28:43,290
also works with spring web flex the

725
00:28:43,290 --> 00:28:44,790
configuration doesn't change a whole lot

726
00:28:44,790 --> 00:28:46,950
at all so if you've ever used spring mud

727
00:28:46,950 --> 00:28:49,260
flux you can use it with open ID connect

728
00:28:49,260 --> 00:28:51,510
and just to let you know there is an

729
00:28:51,510 --> 00:28:53,820
actual issue with spring security 5.1

730
00:28:53,820 --> 00:28:56,640
with refresh tokens but it only exists

731
00:28:56,640 --> 00:28:58,130
with spring MVC so if you're using

732
00:28:58,130 --> 00:29:01,440
spring web flex the Refresh tokens will

733
00:29:01,440 --> 00:29:03,660
happen automatically there's access

734
00:29:03,660 --> 00:29:05,490
tokens and refresh tokens and open ID

735
00:29:05,490 --> 00:29:07,710
connect and OAuth and refresh tokens are

736
00:29:07,710 --> 00:29:09,810
used to get new access tokens so access

737
00:29:09,810 --> 00:29:11,760
tokens typically only last you know a

738
00:29:11,760 --> 00:29:13,530
minute five minutes maybe an hour and

739
00:29:13,530 --> 00:29:15,840
refresh tokens last days and weeks and

740
00:29:15,840 --> 00:29:17,940
so with the refresh token spring

741
00:29:17,940 --> 00:29:19,320
security will automatically give you a

742
00:29:19,320 --> 00:29:21,330
new access token if your access token is

743
00:29:21,330 --> 00:29:24,120
expired but just so you know that's not

744
00:29:24,120 --> 00:29:26,250
quite implemented in spring security 5.1

745
00:29:26,250 --> 00:29:29,760
it will be in 5.2 and it also works with

746
00:29:29,760 --> 00:29:33,450
J hipster so I coded all the open ID

747
00:29:33,450 --> 00:29:35,220
connects support in J hipster it works

748
00:29:35,220 --> 00:29:36,900
with key click by default and you can

749
00:29:36,900 --> 00:29:38,940
switch it to octa just by changing a few

750
00:29:38,940 --> 00:29:40,320
properties you could probably switch to

751
00:29:40,320 --> 00:29:43,940
another open ID Connect provider as well

752
00:29:43,940 --> 00:29:45,820
so back to you

753
00:29:45,820 --> 00:29:48,460
okay and actually before we jump forward

754
00:29:48,460 --> 00:29:50,379
a little bit further we've got a few

755
00:29:50,379 --> 00:29:53,499
questions so some of the some questions

756
00:29:53,499 --> 00:29:56,139
from some of the earlier points

757
00:29:56,139 --> 00:30:01,299
Pavel Parma asks I'm curious if they if

758
00:30:01,299 --> 00:30:04,899
we recommend check HTTP in spring or on

759
00:30:04,899 --> 00:30:07,979
the web server like Ingenix or apache

760
00:30:07,979 --> 00:30:10,600
above the application the java

761
00:30:10,600 --> 00:30:12,190
application or servlet container so

762
00:30:12,190 --> 00:30:13,929
would you say one or the other or

763
00:30:13,929 --> 00:30:17,499
perhaps both um obviously if you can do

764
00:30:17,499 --> 00:30:19,149
both that's gonna be the most secure but

765
00:30:19,149 --> 00:30:21,609
people used to be worried about HTTPS

766
00:30:21,609 --> 00:30:23,529
actually slowing things down and I don't

767
00:30:23,529 --> 00:30:25,359
believe that as true anymore because

768
00:30:25,359 --> 00:30:27,849
computers have gotten so fast but

769
00:30:27,849 --> 00:30:29,499
absolutely if you have a web server in

770
00:30:29,499 --> 00:30:31,599
front of your spring security server you

771
00:30:31,599 --> 00:30:34,389
can do it there as well but if someone

772
00:30:34,389 --> 00:30:36,159
if there's a loophole and they can get

773
00:30:36,159 --> 00:30:37,539
around that web server and still into

774
00:30:37,539 --> 00:30:39,220
your application then you're gonna want

775
00:30:39,220 --> 00:30:41,710
that secure oh so another question for

776
00:30:41,710 --> 00:30:46,299
Manfred can spring boot CSRF security

777
00:30:46,299 --> 00:30:53,259
work without a session I'm gonna say no

778
00:30:53,259 --> 00:30:57,220
but that's a guess not quite sure this

779
00:30:57,220 --> 00:30:58,929
is like this is like he wants to be a

780
00:30:58,929 --> 00:31:01,239
millionaire so so how confident are you

781
00:31:01,239 --> 00:31:03,879
Matt would you say sixty percent ninety

782
00:31:03,879 --> 00:31:06,489
seven oh my go eighty percent the other

783
00:31:06,489 --> 00:31:09,759
thing is kind of related as is Jonathan

784
00:31:09,759 --> 00:31:11,769
acacia nor JWT authentication people

785
00:31:11,769 --> 00:31:13,749
think that you know hey I can use spring

786
00:31:13,749 --> 00:31:15,609
but-- and i can use java indication and

787
00:31:15,609 --> 00:31:19,299
now my application doesn't require state

788
00:31:19,299 --> 00:31:22,570
and this is true but now you're putting

789
00:31:22,570 --> 00:31:24,249
a lot of information and all that

790
00:31:24,249 --> 00:31:26,830
session handling that used to work for

791
00:31:26,830 --> 00:31:28,869
you by default into a JWT and you're

792
00:31:28,869 --> 00:31:31,059
kind of managing that yourself so I do

793
00:31:31,059 --> 00:31:34,559
have a colleague Randal Beggs that

794
00:31:34,559 --> 00:31:37,749
argues against J WTS for session

795
00:31:37,749 --> 00:31:39,309
management and just used whatever

796
00:31:39,309 --> 00:31:41,529
session management you already have J

797
00:31:41,529 --> 00:31:42,999
WTS are great but they shouldn't be used

798
00:31:42,999 --> 00:31:44,830
for session management so it's similar

799
00:31:44,830 --> 00:31:46,899
in the sense of if you really want to

800
00:31:46,899 --> 00:31:49,809
scale typically sessions aren't really

801
00:31:49,809 --> 00:31:51,789
your problem it's probably the session

802
00:31:51,789 --> 00:31:54,519
implementation in spring has a spring

803
00:31:54,519 --> 00:31:56,859
session project that actually does a lot

804
00:31:56,859 --> 00:31:58,809
to get around that or you can use Redis

805
00:31:58,809 --> 00:31:59,520
for cash

806
00:31:59,520 --> 00:32:01,770
for your session cash and there's

807
00:32:01,770 --> 00:32:03,270
there's great ways to scale and still

808
00:32:03,270 --> 00:32:06,810
use sessions okay awesome right so we're

809
00:32:06,810 --> 00:32:08,130
gonna jump forward hopefully you're

810
00:32:08,130 --> 00:32:09,420
seeing my screen now I'm going to talk

811
00:32:09,420 --> 00:32:11,190
about we can talk about managing

812
00:32:11,190 --> 00:32:12,600
passwords so if you have an application

813
00:32:12,600 --> 00:32:15,090
whereby you need to do any password

814
00:32:15,090 --> 00:32:17,400
manipulation you really need to use

815
00:32:17,400 --> 00:32:18,930
password hashing there's no there's not

816
00:32:18,930 --> 00:32:20,250
even there's not even a question about

817
00:32:20,250 --> 00:32:21,570
this you need to be using password

818
00:32:21,570 --> 00:32:23,460
hashing so what is hashing well it's

819
00:32:23,460 --> 00:32:25,980
it's you know the ability to when you

820
00:32:25,980 --> 00:32:27,570
have a when you have a string password

821
00:32:27,570 --> 00:32:29,760
to convert it into an unreadable string

822
00:32:29,760 --> 00:32:32,790
so that if someone does hack you or when

823
00:32:32,790 --> 00:32:35,010
someone hacks you you that you know this

824
00:32:35,010 --> 00:32:36,900
the set of characters that you have

825
00:32:36,900 --> 00:32:39,840
stored someone's secret is impossible to

826
00:32:39,840 --> 00:32:42,330
read in a in a way with that they can

827
00:32:42,330 --> 00:32:43,980
actually use those characters to log in

828
00:32:43,980 --> 00:32:46,800
as you it's also impossible to to

829
00:32:46,800 --> 00:32:48,210
convert back and these are what is known

830
00:32:48,210 --> 00:32:51,450
as hashes so the flow that someone would

831
00:32:51,450 --> 00:32:52,920
go through as they as they go to your

832
00:32:52,920 --> 00:32:54,810
site will be for the first time they

833
00:32:54,810 --> 00:32:56,460
would obviously create an account they

834
00:32:56,460 --> 00:32:58,410
would pass an account they would pass a

835
00:32:58,410 --> 00:33:00,330
username the password now the password

836
00:33:00,330 --> 00:33:03,930
that is is taken will be hashed and that

837
00:33:03,930 --> 00:33:05,910
password but then the hashed password

838
00:33:05,910 --> 00:33:08,430
would then be stored the password which

839
00:33:08,430 --> 00:33:10,470
is going to be sent in in you know that

840
00:33:10,470 --> 00:33:12,900
the plaintext password as it were that

841
00:33:12,900 --> 00:33:15,180
should never hit the disk they there's -

842
00:33:15,180 --> 00:33:17,070
if you'd never be any persistence of any

843
00:33:17,070 --> 00:33:21,120
plaintext password on your site so the

844
00:33:21,120 --> 00:33:23,820
next time that a user attempts to log in

845
00:33:23,820 --> 00:33:26,190
they will pass in their password again

846
00:33:26,190 --> 00:33:28,800
and the same hash process will occur and

847
00:33:28,800 --> 00:33:31,410
it's the hashed password which is

848
00:33:31,410 --> 00:33:33,360
checked against the hashed password

849
00:33:33,360 --> 00:33:36,810
which we have stored now if those two

850
00:33:36,810 --> 00:33:40,080
hashes are the same then you'll log in

851
00:33:40,080 --> 00:33:41,970
everything will be good if those are not

852
00:33:41,970 --> 00:33:43,560
the same then you'll go through your

853
00:33:43,560 --> 00:33:45,840
normal error handling and send someone

854
00:33:45,840 --> 00:33:48,690
to you know ask maybe a couple more

855
00:33:48,690 --> 00:33:51,600
times to log in that's but that's what

856
00:33:51,600 --> 00:33:53,760
password hashing it so so what is what

857
00:33:53,760 --> 00:33:55,080
is it actually what is what are the

858
00:33:55,080 --> 00:33:57,720
rules of password hashing well first of

859
00:33:57,720 --> 00:33:58,800
all they need to be deterministic

860
00:33:58,800 --> 00:34:01,200
obviously because if you if you hash the

861
00:34:01,200 --> 00:34:03,840
first time you want if you get given the

862
00:34:03,840 --> 00:34:06,540
same password to provide the same hash

863
00:34:06,540 --> 00:34:08,850
for that password so that you can

864
00:34:08,850 --> 00:34:10,860
actually then you can come

865
00:34:10,860 --> 00:34:13,290
terror against your your stored hashed

866
00:34:13,290 --> 00:34:15,449
versions as many times as you hash the

867
00:34:15,449 --> 00:34:17,580
secure developer here TSD you should get

868
00:34:17,580 --> 00:34:19,770
the same hash value and irrespective how

869
00:34:19,770 --> 00:34:23,250
long that that that the string is that

870
00:34:23,250 --> 00:34:24,630
we're trying to hash you're gonna get

871
00:34:24,630 --> 00:34:27,420
the same length hash for that so it's

872
00:34:27,420 --> 00:34:29,250
deterministic plus one of the things

873
00:34:29,250 --> 00:34:31,290
that should be is one way so in other

874
00:34:31,290 --> 00:34:32,670
words if you have a string that we're

875
00:34:32,670 --> 00:34:35,070
gonna hash that'll get you to your

876
00:34:35,070 --> 00:34:37,469
hashed value but you can't unhatched

877
00:34:37,469 --> 00:34:39,510
back to your original password it's a

878
00:34:39,510 --> 00:34:41,969
one-way function as a result if someone

879
00:34:41,969 --> 00:34:44,880
were to get the hashes or a list of

880
00:34:44,880 --> 00:34:46,440
hashes the way that they would actually

881
00:34:46,440 --> 00:34:48,330
try and work out which passwords would

882
00:34:48,330 --> 00:34:50,429
stored in that hash would to be to try

883
00:34:50,429 --> 00:34:54,989
and hash normal you know to plaintext to

884
00:34:54,989 --> 00:34:58,530
try and get to a state which you have

885
00:34:58,530 --> 00:35:01,710
matches to that hash in your stored

886
00:35:01,710 --> 00:35:04,620
database now obviously that can be

887
00:35:04,620 --> 00:35:06,660
depending on which hashing algorithms

888
00:35:06,660 --> 00:35:07,740
you're going to be using that can be

889
00:35:07,740 --> 00:35:09,780
easier or harder there are also things

890
00:35:09,780 --> 00:35:11,250
like salting which will allow you to

891
00:35:11,250 --> 00:35:14,610
pass in random strings to your to your

892
00:35:14,610 --> 00:35:16,980
password before hashing and it gives you

893
00:35:16,980 --> 00:35:19,860
extra additional layers or you know that

894
00:35:19,860 --> 00:35:21,720
will actually allow you to make it

895
00:35:21,720 --> 00:35:23,280
harder for someone to work out what they

896
00:35:23,280 --> 00:35:25,860
are but it's a one-way function you get

897
00:35:25,860 --> 00:35:27,210
to a hash you can't go back to the

898
00:35:27,210 --> 00:35:29,550
original value and if someone for

899
00:35:29,550 --> 00:35:31,530
example you know you see on Twitter all

900
00:35:31,530 --> 00:35:34,170
the time a number of people who call out

901
00:35:34,170 --> 00:35:37,080
companies for sending them back their

902
00:35:37,080 --> 00:35:39,180
password they should never have that the

903
00:35:39,180 --> 00:35:40,470
only way they would have your password

904
00:35:40,470 --> 00:35:42,510
in the clear is if they're storing it in

905
00:35:42,510 --> 00:35:44,970
the clear if someone has taken a hash

906
00:35:44,970 --> 00:35:47,040
from you they can't give you your

907
00:35:47,040 --> 00:35:49,200
password back because not even they come

908
00:35:49,200 --> 00:35:52,110
Kurn can go from that hash back to the

909
00:35:52,110 --> 00:35:54,870
original password it shouldn't also be

910
00:35:54,870 --> 00:35:56,730
predictable and what I mean by this is

911
00:35:56,730 --> 00:35:59,490
here we have four hashes TSD zero one

912
00:35:59,490 --> 00:36:01,710
two and three there are completely

913
00:36:01,710 --> 00:36:03,930
different even though the difference in

914
00:36:03,930 --> 00:36:05,790
the in the text in the actual password

915
00:36:05,790 --> 00:36:07,380
which we're pushing in here is just

916
00:36:07,380 --> 00:36:09,600
altering that fourth character they're

917
00:36:09,600 --> 00:36:10,650
completely different they're not

918
00:36:10,650 --> 00:36:12,180
virtually the same and then we just

919
00:36:12,180 --> 00:36:13,740
change the last few characters so

920
00:36:13,740 --> 00:36:17,610
they're completely non predictable and

921
00:36:17,610 --> 00:36:19,530
the other thing is obviously we need a

922
00:36:19,530 --> 00:36:23,040
one-to-one mapping so if we have a first

923
00:36:23,040 --> 00:36:24,640
hash which gives us

924
00:36:24,640 --> 00:36:28,359
hash value back we can't hash another

925
00:36:28,359 --> 00:36:30,549
another password and get to that same

926
00:36:30,549 --> 00:36:31,119
hash

927
00:36:31,119 --> 00:36:32,980
they are unique mappings between one

928
00:36:32,980 --> 00:36:35,859
password in one hash so what does this

929
00:36:35,859 --> 00:36:37,240
mean to spring we have our spring

930
00:36:37,240 --> 00:36:39,400
application what we can do is we have

931
00:36:39,400 --> 00:36:42,849
these these encoders that exist in

932
00:36:42,849 --> 00:36:44,799
spring that we can make use of here what

933
00:36:44,799 --> 00:36:46,180
we're doing is we just create a spring

934
00:36:46,180 --> 00:36:48,519
being around a password encoder and as

935
00:36:48,519 --> 00:36:50,650
part of that password encoder we

936
00:36:50,650 --> 00:36:52,869
determine what kind of encoding we want

937
00:36:52,869 --> 00:36:54,670
and in this case we're using decrypt I

938
00:36:54,670 --> 00:36:56,859
think in the original blog some of the

939
00:36:56,859 --> 00:36:57,220
aughts

940
00:36:57,220 --> 00:37:00,210
some of the the members of the

941
00:37:00,210 --> 00:37:03,160
cryptography team in in octa suggests

942
00:37:03,160 --> 00:37:06,130
also using s crypt for passwords i think

943
00:37:06,130 --> 00:37:07,809
that was one of the one of the

944
00:37:07,809 --> 00:37:09,670
recommended ways and that's you can also

945
00:37:09,670 --> 00:37:11,680
do that with spring but here we just

946
00:37:11,680 --> 00:37:13,930
have this beam and with this beam now of

947
00:37:13,930 --> 00:37:16,839
course we can inject into into a regular

948
00:37:16,839 --> 00:37:19,390
field our password encoder and now at

949
00:37:19,390 --> 00:37:21,160
this point we simply just need to encode

950
00:37:21,160 --> 00:37:23,529
using that password encoder whatever

951
00:37:23,529 --> 00:37:25,180
stream we have and that will provide us

952
00:37:25,180 --> 00:37:28,269
with an encoded string afterwards so

953
00:37:28,269 --> 00:37:30,279
this is a very very easy way with

954
00:37:30,279 --> 00:37:32,200
annotations in our own code we can hash

955
00:37:32,200 --> 00:37:34,599
passwords and as a result we don't have

956
00:37:34,599 --> 00:37:36,819
we don't we never store that plaintext

957
00:37:36,819 --> 00:37:38,740
password we only ever stored that hashed

958
00:37:38,740 --> 00:37:42,190
value and actually spring boot makes it

959
00:37:42,190 --> 00:37:45,069
so you have to specify some sort of

960
00:37:45,069 --> 00:37:47,440
hashing algorithm like yeah if you

961
00:37:47,440 --> 00:37:49,569
specify like in a properties file or

962
00:37:49,569 --> 00:37:52,480
anything like that mm-hmm yep good a

963
00:37:52,480 --> 00:37:55,059
good addition so let's move on to

964
00:37:55,059 --> 00:37:56,680
another life hack now Matt don't you

965
00:37:56,680 --> 00:37:59,380
just hate it when you're inviting people

966
00:37:59,380 --> 00:38:01,630
around you know your friends have got an

967
00:38:01,630 --> 00:38:04,809
awesome pasta holder right you know this

968
00:38:04,809 --> 00:38:06,730
is this is we are and you know that the

969
00:38:06,730 --> 00:38:09,309
21st century now people have these first

970
00:38:09,309 --> 00:38:11,319
world problems about what pasta holder

971
00:38:11,319 --> 00:38:12,940
to have how about this this will give

972
00:38:12,940 --> 00:38:15,549
you up this is a pasta holder which you

973
00:38:15,549 --> 00:38:17,920
know is gonna change every single time

974
00:38:17,920 --> 00:38:19,390
someone comes around to your house and

975
00:38:19,390 --> 00:38:21,940
it's gonna surprise any visitor even

976
00:38:21,940 --> 00:38:24,609
even its hylians who have seen all pasta

977
00:38:24,609 --> 00:38:27,490
holders now this pasta holder not only

978
00:38:27,490 --> 00:38:30,160
will you enjoy the pasta but it's a

979
00:38:30,160 --> 00:38:31,809
great game actually trying to find where

980
00:38:31,809 --> 00:38:33,880
your pasta is in the kitchen at that

981
00:38:33,880 --> 00:38:35,410
very point this is one of the most

982
00:38:35,410 --> 00:38:37,119
exciting things that your dinner guests

983
00:38:37,119 --> 00:38:38,020
will ever have

984
00:38:38,020 --> 00:38:41,200
great pasta holder and also if you run

985
00:38:41,200 --> 00:38:43,810
if you ever buy too much pasta then this

986
00:38:43,810 --> 00:38:46,000
great pasta holder is just the perfect

987
00:38:46,000 --> 00:38:48,280
shape to eat that pasta eat any pasta

988
00:38:48,280 --> 00:38:50,020
that you have cooked too much which is a

989
00:38:50,020 --> 00:38:51,700
great thing as well right how good slack

990
00:38:51,700 --> 00:38:53,920
and it looks the justa belen side so if

991
00:38:53,920 --> 00:38:55,480
you have just a little bit or a lot it

992
00:38:55,480 --> 00:38:57,910
can you know kind of conform absolutely

993
00:38:57,910 --> 00:38:59,170
yeah and you could actually buy these

994
00:38:59,170 --> 00:39:00,820
pasture holders in different sizes and

995
00:39:00,820 --> 00:39:03,700
obviously as your family grows the the

996
00:39:03,700 --> 00:39:05,620
snack that the pasta holder will will

997
00:39:05,620 --> 00:39:07,420
naturally grow in length as well so you

998
00:39:07,420 --> 00:39:10,000
could yeah there are extreme extremely

999
00:39:10,000 --> 00:39:11,470
large pasture holders you can buy in

1000
00:39:11,470 --> 00:39:13,780
this in this range so yeah definitely a

1001
00:39:13,780 --> 00:39:16,360
good life hack they're nice so let's

1002
00:39:16,360 --> 00:39:20,920
talk about secrets and secrets is this

1003
00:39:20,920 --> 00:39:22,510
is this is one of the things that you

1004
00:39:22,510 --> 00:39:23,860
know with the tools we have and the

1005
00:39:23,860 --> 00:39:26,140
speed at which we can start pushing not

1006
00:39:26,140 --> 00:39:27,970
just code to repositories but you know

1007
00:39:27,970 --> 00:39:29,830
pushing things to production it's very

1008
00:39:29,830 --> 00:39:32,170
easy to slip our secrets now if we go to

1009
00:39:32,170 --> 00:39:34,570
github and just do a simple a simple

1010
00:39:34,570 --> 00:39:35,830
view and you can see on the top left

1011
00:39:35,830 --> 00:39:37,780
here I've just searched for removed

1012
00:39:37,780 --> 00:39:40,150
password one of the things we will we

1013
00:39:40,150 --> 00:39:41,710
see a couple of things here first of all

1014
00:39:41,710 --> 00:39:47,050
we see we see 335,000 commits whereby

1015
00:39:47,050 --> 00:39:49,510
people in their commit messages have

1016
00:39:49,510 --> 00:39:51,730
actually said that they are removing a

1017
00:39:51,730 --> 00:39:54,520
password now that's pretty good because

1018
00:39:54,520 --> 00:39:56,260
from an attackers point of view because

1019
00:39:56,260 --> 00:39:57,970
guess what one of the great things that

1020
00:39:57,970 --> 00:39:59,800
github and git has is this wonderful

1021
00:39:59,800 --> 00:40:01,840
commit history that'll show us the

1022
00:40:01,840 --> 00:40:04,630
changes that have been made to files and

1023
00:40:04,630 --> 00:40:06,970
when you change passwords and things

1024
00:40:06,970 --> 00:40:09,040
like that guess what we can see the new

1025
00:40:09,040 --> 00:40:11,020
password we can see the old password and

1026
00:40:11,020 --> 00:40:12,460
and you know this is one of the things

1027
00:40:12,460 --> 00:40:15,220
that not only is it crazy that we can

1028
00:40:15,220 --> 00:40:17,620
see this many but there's also a number

1029
00:40:17,620 --> 00:40:19,810
of people who have changed secrets who

1030
00:40:19,810 --> 00:40:21,400
haven't been as blatant in the commit

1031
00:40:21,400 --> 00:40:23,380
message so you know that there is an

1032
00:40:23,380 --> 00:40:25,810
extreme amount of sensitive data in the

1033
00:40:25,810 --> 00:40:28,300
wild which is very accessible using some

1034
00:40:28,300 --> 00:40:30,580
of the development team development

1035
00:40:30,580 --> 00:40:32,890
tools which make a development easier as

1036
00:40:32,890 --> 00:40:33,720
well

1037
00:40:33,720 --> 00:40:35,950
now there are tools that can help us

1038
00:40:35,950 --> 00:40:37,630
with this and tools that can help us

1039
00:40:37,630 --> 00:40:39,430
automatically as well and the first one

1040
00:40:39,430 --> 00:40:40,540
I'm going to show you here is something

1041
00:40:40,540 --> 00:40:42,970
called git secrets now git secrets

1042
00:40:42,970 --> 00:40:44,680
actually prevents you by checking things

1043
00:40:44,680 --> 00:40:46,030
like your commits and things like that

1044
00:40:46,030 --> 00:40:48,790
it looks for patterns it looks for

1045
00:40:48,790 --> 00:40:51,010
credentials it looks for passwords those

1046
00:40:51,010 --> 00:40:51,850
kind of things

1047
00:40:51,850 --> 00:40:54,220
and we'll you can get it to block your

1048
00:40:54,220 --> 00:40:56,680
commits based on whether it thinks it

1049
00:40:56,680 --> 00:41:00,160
has found secrets or not so this is a

1050
00:41:00,160 --> 00:41:01,960
great way of actually auditing you know

1051
00:41:01,960 --> 00:41:04,390
checking and every commit and so forth

1052
00:41:04,390 --> 00:41:07,120
our our code there are also other things

1053
00:41:07,120 --> 00:41:08,950
like there's another one called get

1054
00:41:08,950 --> 00:41:10,180
robbed but I think there's get truffle

1055
00:41:10,180 --> 00:41:11,680
as well which are great ways whereby you

1056
00:41:11,680 --> 00:41:15,100
can download your entire clone your

1057
00:41:15,100 --> 00:41:17,050
entire get repo run it across your git

1058
00:41:17,050 --> 00:41:19,150
repo it'll look at your code and look at

1059
00:41:19,150 --> 00:41:20,860
all your previous commits and so forth

1060
00:41:20,860 --> 00:41:22,540
so there are some great tools out there

1061
00:41:22,540 --> 00:41:24,970
which you can audit your code bases and

1062
00:41:24,970 --> 00:41:27,190
find secrets that you can that you can

1063
00:41:27,190 --> 00:41:29,110
remove and remember when you remove

1064
00:41:29,110 --> 00:41:31,630
secrets make sure you entirely burn

1065
00:41:31,630 --> 00:41:33,880
those secrets and also update your your

1066
00:41:33,880 --> 00:41:36,670
commit histories now when we're thinking

1067
00:41:36,670 --> 00:41:39,070
about what we do in code we can of

1068
00:41:39,070 --> 00:41:40,660
course use vaults and of course hashey

1069
00:41:40,660 --> 00:41:42,940
corp have the you know great volts as

1070
00:41:42,940 --> 00:41:44,620
well but we're going to talk about

1071
00:41:44,620 --> 00:41:47,010
sprint volt here which actually backs

1072
00:41:47,010 --> 00:41:49,540
hashey hashing volt is is in the

1073
00:41:49,540 --> 00:41:50,950
background as well

1074
00:41:50,950 --> 00:41:53,890
so spring volt here we just add it as a

1075
00:41:53,890 --> 00:41:55,570
dependency and as a result we can

1076
00:41:55,570 --> 00:41:57,730
actually then start accessing it by

1077
00:41:57,730 --> 00:42:01,210
annotations again simply by passing in a

1078
00:42:01,210 --> 00:42:03,550
value here and it'll automatically

1079
00:42:03,550 --> 00:42:05,710
inject the values from the vault into

1080
00:42:05,710 --> 00:42:07,270
our password so we don't necessarily

1081
00:42:07,270 --> 00:42:11,800
need any any significant secrets in in

1082
00:42:11,800 --> 00:42:13,120
code and things like that because it's

1083
00:42:13,120 --> 00:42:17,350
all later done at runtime so secrets

1084
00:42:17,350 --> 00:42:19,240
very very easy to leak into our existing

1085
00:42:19,240 --> 00:42:21,970
developer tools very easy to leak into

1086
00:42:21,970 --> 00:42:24,370
into production make sure you use volts

1087
00:42:24,370 --> 00:42:26,650
make sure you use tools during your

1088
00:42:26,650 --> 00:42:28,780
commits during your early very very

1089
00:42:28,780 --> 00:42:30,520
early stages to make sure you never

1090
00:42:30,520 --> 00:42:32,950
actually push those secrets anywhere in

1091
00:42:32,950 --> 00:42:36,430
which people can can access them so

1092
00:42:36,430 --> 00:42:38,200
moving on to testing your applications

1093
00:42:38,200 --> 00:42:39,940
with a waspers app and this is able to

1094
00:42:39,940 --> 00:42:42,760
you map so you actually pointed out an

1095
00:42:42,760 --> 00:42:46,860
anti-pattern in in my last oh i DC

1096
00:42:46,860 --> 00:42:50,560
mechanism because i am actually using

1097
00:42:50,560 --> 00:42:54,040
secrets in my code so if we looked at uh

1098
00:42:54,040 --> 00:42:57,070
if we looked at the code here you'll see

1099
00:42:57,070 --> 00:42:59,560
I have an octo to issuer in the client

1100
00:42:59,560 --> 00:43:01,120
ID and the client secret the client ID

1101
00:43:01,120 --> 00:43:02,650
is like a license-plate number it's not

1102
00:43:02,650 --> 00:43:04,300
a big deal but the client secret kind of

1103
00:43:04,300 --> 00:43:04,869
is so

1104
00:43:04,869 --> 00:43:07,119
I'm actually showing a bad practice here

1105
00:43:07,119 --> 00:43:08,589
but one of the things that I would

1106
00:43:08,589 --> 00:43:10,359
recommend for instance if you're if

1107
00:43:10,359 --> 00:43:12,670
you're using the octo starter instead of

1108
00:43:12,670 --> 00:43:13,989
the spring boot one is you can actually

1109
00:43:13,989 --> 00:43:22,660
do things like octa Roth to write issuer

1110
00:43:22,660 --> 00:43:27,460
or client secret like that and then run

1111
00:43:27,460 --> 00:43:30,640
like spring you'd set it to you know foo

1112
00:43:30,640 --> 00:43:35,619
and then run Spring Run hello or if

1113
00:43:35,619 --> 00:43:37,690
you're doing NBN or Gradle or anything

1114
00:43:37,690 --> 00:43:38,170
like that

1115
00:43:38,170 --> 00:43:39,940
on you can do it the same way or you can

1116
00:43:39,940 --> 00:43:41,440
set them as environment variables and

1117
00:43:41,440 --> 00:43:43,269
then you won't actually be storing them

1118
00:43:43,269 --> 00:43:45,190
in source control so that's one of the

1119
00:43:45,190 --> 00:43:46,839
things that we do with J hipster we use

1120
00:43:46,839 --> 00:43:48,369
key cloak by default and they're just

1121
00:43:48,369 --> 00:43:51,309
you know easy passwords to guess but

1122
00:43:51,309 --> 00:43:54,099
then when we actually recommend using

1123
00:43:54,099 --> 00:43:56,079
octa we tell people that hey you might

1124
00:43:56,079 --> 00:43:57,190
want to actually use these as

1125
00:43:57,190 --> 00:43:58,479
environment variables don't actually

1126
00:43:58,479 --> 00:44:00,759
store them in your source code but store

1127
00:44:00,759 --> 00:44:01,869
the key book ones in there because

1128
00:44:01,869 --> 00:44:03,489
everyone's using those and it's not a

1129
00:44:03,489 --> 00:44:07,299
big deal it's just a demo so wast Zac is

1130
00:44:07,299 --> 00:44:10,359
that the security tool that performs

1131
00:44:10,359 --> 00:44:12,910
penetration testing against your live

1132
00:44:12,910 --> 00:44:15,279
application at runtime so it's very

1133
00:44:15,279 --> 00:44:17,140
popular it's got over 5,000 stars on

1134
00:44:17,140 --> 00:44:19,509
github and it's open source and it

1135
00:44:19,509 --> 00:44:21,160
basically has two approaches so you can

1136
00:44:21,160 --> 00:44:24,640
do a spider scan or an active scan so

1137
00:44:24,640 --> 00:44:26,619
with the spider scan you basically give

1138
00:44:26,619 --> 00:44:29,349
it a seed of URLs and an active scan

1139
00:44:29,349 --> 00:44:31,420
actually records a set and plays it back

1140
00:44:31,420 --> 00:44:33,609
I'm scanning for known vulnerabilities

1141
00:44:33,609 --> 00:44:37,269
so this is a result of a scan that I did

1142
00:44:37,269 --> 00:44:40,239
way back eight years ago on I think it

1143
00:44:40,239 --> 00:44:41,650
wasn't a spring boot app but it was a

1144
00:44:41,650 --> 00:44:43,869
spring app might have been my a fuse

1145
00:44:43,869 --> 00:44:45,819
project but it showed a number of

1146
00:44:45,819 --> 00:44:47,499
vulnerabilities that could happen and

1147
00:44:47,499 --> 00:44:49,779
also gives you ways to actually shut

1148
00:44:49,779 --> 00:44:52,059
those down so the cool thing about the

1149
00:44:52,059 --> 00:44:53,769
active scan is typically what you do is

1150
00:44:53,769 --> 00:44:56,469
you fire up a web browser and you point

1151
00:44:56,469 --> 00:44:59,079
it to I think it's port 9000 and that's

1152
00:44:59,079 --> 00:45:01,989
where wasp said attack proxy or zap has

1153
00:45:01,989 --> 00:45:05,200
a proxy running to record everything so

1154
00:45:05,200 --> 00:45:07,479
you do a session you log in and so it's

1155
00:45:07,479 --> 00:45:08,799
going to know you're using a password

1156
00:45:08,799 --> 00:45:10,930
obviously which is good for it to know

1157
00:45:10,930 --> 00:45:13,150
because if it can't login then you know

1158
00:45:13,150 --> 00:45:14,890
there's not that much it can early test

1159
00:45:14,890 --> 00:45:17,109
so it logs in and it does a whole bunch

1160
00:45:17,109 --> 00:45:18,580
of stuff with your forms

1161
00:45:18,580 --> 00:45:20,830
tries to input all kinds of invalid data

1162
00:45:20,830 --> 00:45:23,320
and do script attacks and you know

1163
00:45:23,320 --> 00:45:25,210
sequel injection and things like that

1164
00:45:25,210 --> 00:45:26,650
and then it spits out a report at the

1165
00:45:26,650 --> 00:45:29,380
end so very nice to use I wrote a blog

1166
00:45:29,380 --> 00:45:30,700
post on it but I'm not going to share

1167
00:45:30,700 --> 00:45:32,920
here because that's way back in 2011

1168
00:45:32,920 --> 00:45:36,160
that I did it but uh I haven't tried it

1169
00:45:36,160 --> 00:45:39,550
on any new modern apps that use like an

1170
00:45:39,550 --> 00:45:41,350
angular front-end or react front-end but

1171
00:45:41,350 --> 00:45:42,700
I imagine it would work just as well

1172
00:45:42,700 --> 00:45:44,740
because a lot of it's on the back end in

1173
00:45:44,740 --> 00:45:46,990
the sense of you know can hit a URL and

1174
00:45:46,990 --> 00:45:48,520
see all the files in a directory and

1175
00:45:48,520 --> 00:45:50,140
things like that and that's not really

1176
00:45:50,140 --> 00:45:51,580
gonna happen so much on the front end

1177
00:45:51,580 --> 00:45:53,980
but you know HTTP only flags for cookies

1178
00:45:53,980 --> 00:45:55,780
are going to be very important and you

1179
00:45:55,780 --> 00:45:57,430
know not doing password auto-completion

1180
00:45:57,430 --> 00:45:59,770
so you can learn more about it on its

1181
00:45:59,770 --> 00:46:01,930
website which obviously that you know

1182
00:46:01,930 --> 00:46:04,240
that URL isn't great so just Google or

1183
00:46:04,240 --> 00:46:04,600
wasp

1184
00:46:04,600 --> 00:46:07,660
zap it's also on github and there's a

1185
00:46:07,660 --> 00:46:11,790
project on Twitter that you can follow

1186
00:46:11,790 --> 00:46:14,770
so boiling-water I think I saw this one

1187
00:46:14,770 --> 00:46:17,380
this is one of my favorite so yeah this

1188
00:46:17,380 --> 00:46:18,970
is this is a really important one

1189
00:46:18,970 --> 00:46:20,290
actually and one that a lot of people

1190
00:46:20,290 --> 00:46:21,430
can learn from so Matt we've already

1191
00:46:21,430 --> 00:46:23,830
talked about the pasta right with we now

1192
00:46:23,830 --> 00:46:27,430
have have sinner guests the amazement on

1193
00:46:27,430 --> 00:46:29,530
their face at this amazing pasta holder

1194
00:46:29,530 --> 00:46:32,200
some of them may have even got close

1195
00:46:32,200 --> 00:46:33,880
enough to measure the amount of pasta

1196
00:46:33,880 --> 00:46:35,410
they want we don't want to leave them

1197
00:46:35,410 --> 00:46:37,240
hanging we don't want to leave them in a

1198
00:46:37,240 --> 00:46:38,740
state where they have to then wait for

1199
00:46:38,740 --> 00:46:42,460
the host to cook their dinner for 30

1200
00:46:42,460 --> 00:46:44,530
minutes 40 minutes we want out we want

1201
00:46:44,530 --> 00:46:46,390
to better entertain them so the last

1202
00:46:46,390 --> 00:46:48,550
thing we want to do is boil spend a lot

1203
00:46:48,550 --> 00:46:50,890
of time boiling water for our pasta now

1204
00:46:50,890 --> 00:46:52,450
this is an amazing life hack because

1205
00:46:52,450 --> 00:46:54,010
what we can do here is we can save a lot

1206
00:46:54,010 --> 00:46:56,920
of time by boiling our water in advance

1207
00:46:56,920 --> 00:46:59,500
okay and obviously to keep that fresh we

1208
00:46:59,500 --> 00:47:01,570
can we can put it in the freezer and

1209
00:47:01,570 --> 00:47:03,670
then all we need to do is just simply

1210
00:47:03,670 --> 00:47:06,700
reheat this water as and when our guests

1211
00:47:06,700 --> 00:47:09,160
come around so as you can see here I've

1212
00:47:09,160 --> 00:47:12,040
got loads of boiling water already just

1213
00:47:12,040 --> 00:47:13,960
to use straight away from my for my

1214
00:47:13,960 --> 00:47:16,180
guests it'll leave them it'll leave them

1215
00:47:16,180 --> 00:47:18,160
thinking how you cook this pasta so

1216
00:47:18,160 --> 00:47:20,530
quick so Matt this is an amazing life

1217
00:47:20,530 --> 00:47:21,040
hack

1218
00:47:21,040 --> 00:47:22,900
that we both need to really do more of

1219
00:47:22,900 --> 00:47:25,300
it's probably good for like students in

1220
00:47:25,300 --> 00:47:26,680
the university too because they'll

1221
00:47:26,680 --> 00:47:29,380
believe it yeah I what do you mean you

1222
00:47:29,380 --> 00:47:31,500
mean this isn't a life hack

1223
00:47:31,500 --> 00:47:34,420
all right okay cool cool me too me too

1224
00:47:34,420 --> 00:47:36,550
okay that was our laughs last life hack

1225
00:47:36,550 --> 00:47:38,230
you make some of you may be very pleased

1226
00:47:38,230 --> 00:47:39,910
to hear we're also going to show you our

1227
00:47:39,910 --> 00:47:42,970
last tip as to how you can make your

1228
00:47:42,970 --> 00:47:44,530
your applications more secure and this

1229
00:47:44,530 --> 00:47:46,960
is really a good housekeeping tip and I

1230
00:47:46,960 --> 00:47:48,640
think when we do code reviews there's a

1231
00:47:48,640 --> 00:47:51,700
big correlation between the size of the

1232
00:47:51,700 --> 00:47:53,590
amount of code you're pushing into your

1233
00:47:53,590 --> 00:47:56,200
commits and the number of the number of

1234
00:47:56,200 --> 00:47:58,150
comments that you'll actually get back

1235
00:47:58,150 --> 00:48:00,310
if it's a small code review then

1236
00:48:00,310 --> 00:48:02,590
everyone will be arguing about about a

1237
00:48:02,590 --> 00:48:04,630
comment or about the naming of your

1238
00:48:04,630 --> 00:48:06,370
method if it's a code review where

1239
00:48:06,370 --> 00:48:07,690
someone's pushed in about a hundred

1240
00:48:07,690 --> 00:48:10,210
files most likely you'll get very very

1241
00:48:10,210 --> 00:48:12,280
few comments maybe a couple of people

1242
00:48:12,280 --> 00:48:14,350
will just will just say yeah this looks

1243
00:48:14,350 --> 00:48:16,480
good to me within two minutes of you

1244
00:48:16,480 --> 00:48:19,030
asking for it for an approval so what do

1245
00:48:19,030 --> 00:48:21,400
we need to do in our code reviews to

1246
00:48:21,400 --> 00:48:23,320
actually perform a security code review

1247
00:48:23,320 --> 00:48:25,510
one thing I would say is you should

1248
00:48:25,510 --> 00:48:28,990
recognize and understand which files

1249
00:48:28,990 --> 00:48:32,080
which specific areas of your application

1250
00:48:32,080 --> 00:48:35,500
are very sensitive to security issues

1251
00:48:35,500 --> 00:48:38,500
and as a result make sure that you have

1252
00:48:38,500 --> 00:48:40,030
the right people when changes are made

1253
00:48:40,030 --> 00:48:41,830
to these files have the right people

1254
00:48:41,830 --> 00:48:44,440
look at those look at the changes to

1255
00:48:44,440 --> 00:48:47,050
those files for code reviews third

1256
00:48:47,050 --> 00:48:49,210
general developers doing code reviews I

1257
00:48:49,210 --> 00:48:50,500
think there are a whole bunch of

1258
00:48:50,500 --> 00:48:53,230
different tips that we can provide on at

1259
00:48:53,230 --> 00:48:55,360
least different areas that we need to to

1260
00:48:55,360 --> 00:48:58,000
look at to make sure that we're not

1261
00:48:58,000 --> 00:49:00,250
making basic mistakes so you know a

1262
00:49:00,250 --> 00:49:01,300
number of these are not going to go

1263
00:49:01,300 --> 00:49:03,040
through every single one of these but

1264
00:49:03,040 --> 00:49:04,990
this is a nice list and in fact I'm

1265
00:49:04,990 --> 00:49:06,880
going to this is this is going to be my

1266
00:49:06,880 --> 00:49:08,020
top ten I'm gonna be doing a cheat sheet

1267
00:49:08,020 --> 00:49:10,750
soon so do check out the snick blog for

1268
00:49:10,750 --> 00:49:12,580
more information on these but I can go

1269
00:49:12,580 --> 00:49:14,050
through a couple of them first of all

1270
00:49:14,050 --> 00:49:15,340
and this is probably one of the most

1271
00:49:15,340 --> 00:49:17,080
important is around validating

1272
00:49:17,080 --> 00:49:20,110
third-party info and this is this is

1273
00:49:20,110 --> 00:49:22,150
important because we basically need to

1274
00:49:22,150 --> 00:49:23,890
make sure that we don't trust anyone

1275
00:49:23,890 --> 00:49:26,230
don't even think about the golden path

1276
00:49:26,230 --> 00:49:27,790
think about an attack of doing something

1277
00:49:27,790 --> 00:49:29,650
passing you information that you don't

1278
00:49:29,650 --> 00:49:33,220
expect what's your code gonna do this is

1279
00:49:33,220 --> 00:49:34,540
this is really really important making

1280
00:49:34,540 --> 00:49:35,650
sure that we understand what is

1281
00:49:35,650 --> 00:49:37,390
third-party data that what is

1282
00:49:37,390 --> 00:49:39,880
third-party input and also then making

1283
00:49:39,880 --> 00:49:42,190
sure we we validate correctly we've

1284
00:49:42,190 --> 00:49:43,840
talked about not storing credentials as

1285
00:49:43,840 --> 00:49:45,230
code config this is a good one

1286
00:49:45,230 --> 00:49:48,440
to review in code review as well we've

1287
00:49:48,440 --> 00:49:49,970
talked about number three as well making

1288
00:49:49,970 --> 00:49:51,080
sure we don't introduce new

1289
00:49:51,080 --> 00:49:52,730
vulnerabilities and when we with

1290
00:49:52,730 --> 00:49:55,310
security vulnerabilities when we pull

1291
00:49:55,310 --> 00:49:57,020
everything down to a level whereby our

1292
00:49:57,020 --> 00:50:00,290
application has a baseline or a snapshot

1293
00:50:00,290 --> 00:50:01,970
of security vulnerabilities that we are

1294
00:50:01,970 --> 00:50:03,890
not comfortable necessarily but that we

1295
00:50:03,890 --> 00:50:06,440
know exists and that you know we've done

1296
00:50:06,440 --> 00:50:08,390
risk assessments on that the biggest

1297
00:50:08,390 --> 00:50:09,560
thing that we need to do is make sure we

1298
00:50:09,560 --> 00:50:11,900
don't regress so commit by commit pull

1299
00:50:11,900 --> 00:50:13,520
request by pull request how do we make

1300
00:50:13,520 --> 00:50:14,660
sure we don't pull in new

1301
00:50:14,660 --> 00:50:16,220
vulnerabilities or new license issues

1302
00:50:16,220 --> 00:50:18,200
and and you know using snick or other

1303
00:50:18,200 --> 00:50:20,210
tools this is a great way of being able

1304
00:50:20,210 --> 00:50:23,619
to automate that authentication and also

1305
00:50:23,619 --> 00:50:25,790
enforcing lease privilege so making sure

1306
00:50:25,790 --> 00:50:27,800
you know people aren't just

1307
00:50:27,800 --> 00:50:30,619
authenticated on inbound requests that

1308
00:50:30,619 --> 00:50:32,180
are authorized and using the least

1309
00:50:32,180 --> 00:50:34,490
privilege in other words when you have

1310
00:50:34,490 --> 00:50:37,190
users make sure that you give them just

1311
00:50:37,190 --> 00:50:39,590
the information just the just the access

1312
00:50:39,590 --> 00:50:41,060
and their and and the privileges they

1313
00:50:41,060 --> 00:50:42,890
require to do what they need to do

1314
00:50:42,890 --> 00:50:45,890
that's very very important as well

1315
00:50:45,890 --> 00:50:47,420
a couple of others obviously we have

1316
00:50:47,420 --> 00:50:49,640
handling sensitive data so you know how

1317
00:50:49,640 --> 00:50:50,900
do what do we do with that how do we

1318
00:50:50,900 --> 00:50:53,150
store it make sure we don't log things

1319
00:50:53,150 --> 00:50:55,310
make sure if we're transmitting do it do

1320
00:50:55,310 --> 00:50:58,369
it you know in a secure way one other

1321
00:50:58,369 --> 00:50:59,930
thing here is about protecting against

1322
00:50:59,930 --> 00:51:01,340
well-known attacks

1323
00:51:01,340 --> 00:51:03,020
well-known attacks like cross-site

1324
00:51:03,020 --> 00:51:05,060
scripting for example we know we know

1325
00:51:05,060 --> 00:51:07,369
the type of characters with cross-site

1326
00:51:07,369 --> 00:51:09,020
scripting that we you know we need to

1327
00:51:09,020 --> 00:51:11,330
avoid for example angle brackets

1328
00:51:11,330 --> 00:51:14,210
ampersand a single quote double quote we

1329
00:51:14,210 --> 00:51:15,800
need to make sure that we are we're

1330
00:51:15,800 --> 00:51:17,270
making you know that we exclude these

1331
00:51:17,270 --> 00:51:19,850
kind of characters or even better

1332
00:51:19,850 --> 00:51:21,680
whitelist which characters we will

1333
00:51:21,680 --> 00:51:24,020
accept as input this comes down to again

1334
00:51:24,020 --> 00:51:26,600
validating third party input and of

1335
00:51:26,600 --> 00:51:27,770
course tacitly testing as well

1336
00:51:27,770 --> 00:51:29,900
statically testing your own source code

1337
00:51:29,900 --> 00:51:31,640
as well as the dependencies that are

1338
00:51:31,640 --> 00:51:33,500
coming in so making sure you don't

1339
00:51:33,500 --> 00:51:35,119
introduce security vulnerabilities into

1340
00:51:35,119 --> 00:51:36,950
your code of course there are tools as

1341
00:51:36,950 --> 00:51:38,720
well that you can do that and automate

1342
00:51:38,720 --> 00:51:40,220
that on pull request or to make that on

1343
00:51:40,220 --> 00:51:42,500
commits as well you will likely get more

1344
00:51:42,500 --> 00:51:45,470
false positives in this kind of area but

1345
00:51:45,470 --> 00:51:47,960
it's definitely an area that we that we

1346
00:51:47,960 --> 00:51:52,520
need to spend time on as well and that's

1347
00:51:52,520 --> 00:51:54,980
it Matt we've done all ten all right so

1348
00:51:54,980 --> 00:51:57,530
that's the the summary of everything I

1349
00:51:57,530 --> 00:51:59,330
do have I do have a couple

1350
00:51:59,330 --> 00:52:02,840
bonus ones though so not only you know

1351
00:52:02,840 --> 00:52:05,300
don't allow your lack of security to be

1352
00:52:05,300 --> 00:52:07,310
disturbing but my company actually has a

1353
00:52:07,310 --> 00:52:12,590
great t-shirt that says I find your lack

1354
00:52:12,590 --> 00:52:14,180
of security disturbing so these are

1355
00:52:14,180 --> 00:52:17,390
these are great to wear in airports if

1356
00:52:17,390 --> 00:52:22,400
you travel a lot TSA gives you a smirk

1357
00:52:22,400 --> 00:52:23,750
every once in a while I recently

1358
00:52:23,750 --> 00:52:27,440
traveled to Barcelona last week and no

1359
00:52:27,440 --> 00:52:29,660
one even smiled so sometimes they just

1360
00:52:29,660 --> 00:52:31,850
don't get it but you've been have you

1361
00:52:31,850 --> 00:52:33,140
ever been to Israel

1362
00:52:33,140 --> 00:52:37,520
I have not right so they always people

1363
00:52:37,520 --> 00:52:40,430
in security airports in Israel I'll tell

1364
00:52:40,430 --> 00:52:42,350
you now this is a good light and an

1365
00:52:42,350 --> 00:52:44,990
additional a bonus life hack they have

1366
00:52:44,990 --> 00:52:48,170
the most amazing sense of humor so when

1367
00:52:48,170 --> 00:52:50,180
you next go to Israel through security

1368
00:52:50,180 --> 00:52:52,760
lines do make sure that the way this

1369
00:52:52,760 --> 00:52:58,250
ship feeling it's a bad idea it story

1370
00:52:58,250 --> 00:53:00,620
I'm going to point out the thing we

1371
00:53:00,620 --> 00:53:03,350
didn't mention was uh was this cheat

1372
00:53:03,350 --> 00:53:05,630
sheet that Simon made which is based on

1373
00:53:05,630 --> 00:53:07,370
our blog post and you know same thing as

1374
00:53:07,370 --> 00:53:09,380
this presentation so if you want it just

1375
00:53:09,380 --> 00:53:10,970
in a PDF that you can hang on your wall

1376
00:53:10,970 --> 00:53:13,820
print out this will give you a great way

1377
00:53:13,820 --> 00:53:17,930
to do that and otherwise you know thanks

1378
00:53:17,930 --> 00:53:21,740
for attending follow us on Twitter SJ

1379
00:53:21,740 --> 00:53:24,680
maple and M Rabil will upload this

1380
00:53:24,680 --> 00:53:26,510
presentation probably to the secure

1381
00:53:26,510 --> 00:53:27,800
developer so you'll be able to download

1382
00:53:27,800 --> 00:53:29,780
it there and now we'll take any

1383
00:53:29,780 --> 00:53:32,780
additional questions awesome so we have

1384
00:53:32,780 --> 00:53:35,510
one from sunny saying what do you mean

1385
00:53:35,510 --> 00:53:38,060
by identified invalidate third party do

1386
00:53:38,060 --> 00:53:39,890
you mean need to understand what is

1387
00:53:39,890 --> 00:53:41,120
using it or something else so what I

1388
00:53:41,120 --> 00:53:43,400
what I'm really talking about here let

1389
00:53:43,400 --> 00:53:49,430
me under my screen so what I'm what I'm

1390
00:53:49,430 --> 00:53:51,140
talking about here really is when we

1391
00:53:51,140 --> 00:53:54,380
think about when we think about as an

1392
00:53:54,380 --> 00:53:57,530
application we have informational input

1393
00:53:57,530 --> 00:53:59,510
that is coming in from perhaps other

1394
00:53:59,510 --> 00:54:02,060
services from our own processes as well

1395
00:54:02,060 --> 00:54:05,960
as things that come in from a user or or

1396
00:54:05,960 --> 00:54:07,910
another service which is a third-party

1397
00:54:07,910 --> 00:54:10,670
service to us and any as soon as we get

1398
00:54:10,670 --> 00:54:13,010
any information either from a third part

1399
00:54:13,010 --> 00:54:15,620
service or an end-user we have to treat

1400
00:54:15,620 --> 00:54:18,110
that that that information that input a

1401
00:54:18,110 --> 00:54:19,880
text whatever it is that file are

1402
00:54:19,880 --> 00:54:22,730
suspicious information we have to test

1403
00:54:22,730 --> 00:54:24,620
it we have to validate that it exists

1404
00:54:24,620 --> 00:54:28,160
within the the boundaries of that you

1405
00:54:28,160 --> 00:54:30,080
know in our data that we that we require

1406
00:54:30,080 --> 00:54:32,420
for our application let me give you an

1407
00:54:32,420 --> 00:54:34,280
example if I were to and this is

1408
00:54:34,280 --> 00:54:37,220
actually a zip slip example if I were to

1409
00:54:37,220 --> 00:54:38,630
if we have time I could maybe do a demo

1410
00:54:38,630 --> 00:54:41,720
but if we if we if I am an application

1411
00:54:41,720 --> 00:54:44,420
that takes a zip file as a as an input

1412
00:54:44,420 --> 00:54:47,210
and I extract that zip file there is

1413
00:54:47,210 --> 00:54:49,670
nothing stopping me in fact let me let

1414
00:54:49,670 --> 00:54:51,440
me if I share my screen I can do it very

1415
00:54:51,440 --> 00:54:53,330
but I see it how quick I can do this

1416
00:54:53,330 --> 00:54:59,270
demo in this zip file let me see where

1417
00:54:59,270 --> 00:55:00,980
this zip file exists that's probably

1418
00:55:00,980 --> 00:55:11,300
gonna be in here well this this idea of

1419
00:55:11,300 --> 00:55:12,800
a demo seems such a good idea at the

1420
00:55:12,800 --> 00:55:18,890
time man okay in here if I was to jar -

1421
00:55:18,890 --> 00:55:25,940
T V F the zip slip dot zip file this is

1422
00:55:25,940 --> 00:55:27,650
just a this could be an input from a

1423
00:55:27,650 --> 00:55:29,630
third-party third-party developer right

1424
00:55:29,630 --> 00:55:32,030
if I was to run that you get two files

1425
00:55:32,030 --> 00:55:33,590
you get a good dot text which can be

1426
00:55:33,590 --> 00:55:35,290
expressed which can be expanded

1427
00:55:35,290 --> 00:55:37,400
extracted and it will exist in the in

1428
00:55:37,400 --> 00:55:39,890
the file that my application wants to

1429
00:55:39,890 --> 00:55:41,000
put it in this could be a public

1430
00:55:41,000 --> 00:55:43,340
directory for example however my second

1431
00:55:43,340 --> 00:55:45,380
file has a whole bunch of has a whole

1432
00:55:45,380 --> 00:55:46,820
bunch of directory traversal

1433
00:55:46,820 --> 00:55:48,470
so what this file actually will do and

1434
00:55:48,470 --> 00:55:50,420
this is this is that this is an example

1435
00:55:50,420 --> 00:55:53,360
hack that will work on Heroku it'll go

1436
00:55:53,360 --> 00:55:55,760
right back to my root directory and it

1437
00:55:55,760 --> 00:55:57,710
will it will drop this native to ascii

1438
00:55:57,710 --> 00:56:00,560
jdk script it'll overwrite this native

1439
00:56:00,560 --> 00:56:02,690
to ASCII jdk script and if i just cut

1440
00:56:02,690 --> 00:56:04,190
this you'll actually just see it's just

1441
00:56:04,190 --> 00:56:07,670
a gotcha text but when i if i didn't

1442
00:56:07,670 --> 00:56:09,830
validate this third-party input that

1443
00:56:09,830 --> 00:56:13,130
there is no directory traversal for

1444
00:56:13,130 --> 00:56:15,950
example here then i'm just treating this

1445
00:56:15,950 --> 00:56:18,920
in this user input as good input and

1446
00:56:18,920 --> 00:56:20,570
this is where potential security issues

1447
00:56:20,570 --> 00:56:23,090
occur so in in code reviews and this is

1448
00:56:23,090 --> 00:56:25,190
you know just the same for if we if we

1449
00:56:25,190 --> 00:56:26,500
take input from a web

1450
00:56:26,500 --> 00:56:28,960
for example I am we're running this

1451
00:56:28,960 --> 00:56:30,970
you're executing some sequel how do we

1452
00:56:30,970 --> 00:56:31,930
know we're not doing sequel injection

1453
00:56:31,930 --> 00:56:33,130
how do we know there's maybe no

1454
00:56:33,130 --> 00:56:34,600
cross-site scripting and stuff like that

1455
00:56:34,600 --> 00:56:36,970
so whenever we look at any kind of third

1456
00:56:36,970 --> 00:56:39,520
party input from a user from an external

1457
00:56:39,520 --> 00:56:41,740
service for example make sure we check

1458
00:56:41,740 --> 00:56:43,780
that it's in the right format and there

1459
00:56:43,780 --> 00:56:46,540
there is no chance that someone or we

1460
00:56:46,540 --> 00:56:47,890
limit the chances that someone can

1461
00:56:47,890 --> 00:56:49,600
potentially be used there in a dangerous

1462
00:56:49,600 --> 00:56:52,810
way to us and I would say that in the

1463
00:56:52,810 --> 00:56:55,210
java community we can probably do better

1464
00:56:55,210 --> 00:56:58,300
I have heard dotnet core actually does

1465
00:56:58,300 --> 00:57:00,850
validation by default mm-hmm for

1466
00:57:00,850 --> 00:57:02,650
instance HTML characters and stuff like

1467
00:57:02,650 --> 00:57:04,060
that and strips them out you have to

1468
00:57:04,060 --> 00:57:07,090
turn it off and you can do that with

1469
00:57:07,090 --> 00:57:09,010
spring MVC and like you know it's

1470
00:57:09,010 --> 00:57:11,380
validation techniques but not by default

1471
00:57:11,380 --> 00:57:15,280
right so yeah yeah it very much depends

1472
00:57:15,280 --> 00:57:17,410
I think Python does this - does this by

1473
00:57:17,410 --> 00:57:18,670
default as well with the directory

1474
00:57:18,670 --> 00:57:21,790
traversal on a zip file is this Nick

1475
00:57:21,790 --> 00:57:23,980
security team that found this to be very

1476
00:57:23,980 --> 00:57:25,840
very prominent across Java and the one

1477
00:57:25,840 --> 00:57:27,370
of the reasons is is because there

1478
00:57:27,370 --> 00:57:29,200
wasn't a Java and there aren't some

1479
00:57:29,200 --> 00:57:30,940
libraries some core libraries that do a

1480
00:57:30,940 --> 00:57:33,130
lot of these basic functions for us so

1481
00:57:33,130 --> 00:57:35,890
you end up you end up with developers

1482
00:57:35,890 --> 00:57:37,900
writing this by themselves and actually

1483
00:57:37,900 --> 00:57:40,150
not validating what comes through right

1484
00:57:40,150 --> 00:57:44,650
I don't think there's any other

1485
00:57:44,650 --> 00:57:47,740
questions Sam I need no I think I think

1486
00:57:47,740 --> 00:57:50,800
that's it so thank you both of you very

1487
00:57:50,800 --> 00:57:53,710
very much for getting involved I am if

1488
00:57:53,710 --> 00:57:55,660
no one knows anything about securing

1489
00:57:55,660 --> 00:57:57,010
screen booth I think the life hacks

1490
00:57:57,010 --> 00:58:00,220
alone are you know ones to live by I

1491
00:58:00,220 --> 00:58:01,630
always have a problem with the hot water

1492
00:58:01,630 --> 00:58:03,280
so definitely do that when I get home

1493
00:58:03,280 --> 00:58:06,730
and the dolls the dolls lights they're

1494
00:58:06,730 --> 00:58:08,950
simply wonderful for a child to wake up

1495
00:58:08,950 --> 00:58:10,420
to it actually my sister visiting with

1496
00:58:10,420 --> 00:58:12,280
the kids soon so definitely tough but

1497
00:58:12,280 --> 00:58:14,140
they don't really other really surprise

1498
00:58:14,140 --> 00:58:17,350
them but thank you both I'm hopefully

1499
00:58:17,350 --> 00:58:20,080
will have you both on here again and as

1500
00:58:20,080 --> 00:58:22,840
I both Simon mentioned in a few minutes

1501
00:58:22,840 --> 00:58:25,000
this will be live on the website and the

1502
00:58:25,000 --> 00:58:26,650
power station so you can go back rewatch

1503
00:58:26,650 --> 00:58:29,350
share with your friends you've got any

1504
00:58:29,350 --> 00:58:30,700
more questions post them on the slack

1505
00:58:30,700 --> 00:58:32,710
will get them answered for you Edwards

1506
00:58:32,710 --> 00:58:35,520
that Simon and Matt are select members

1507
00:58:35,520 --> 00:58:39,520
and then on the 20th of June

1508
00:58:39,520 --> 00:58:41,200
next event and it's going to be the new

1509
00:58:41,200 --> 00:58:43,660
ways of the sick ops with james wicket

1510
00:58:43,660 --> 00:58:46,360
and so please join us for that all the

1511
00:58:46,360 --> 00:58:48,700
information is on the cicada better calm

1512
00:58:48,700 --> 00:58:50,770
but other than that that's all for me I

1513
00:58:50,770 --> 00:58:52,270
hope you enjoyed it and hope people see

1514
00:58:52,270 --> 00:58:53,590
you again soon and thank you both of you

1515
00:58:53,590 --> 00:58:58,980
again thank you very much Cheers

