1
00:00:03,230 --> 00:00:05,609
this is a society of creative

2
00:00:05,609 --> 00:00:08,250
anachronism tournament on that crossbar

3
00:00:08,250 --> 00:00:09,630
on just in case you're like what is that

4
00:00:09,630 --> 00:00:11,900
Jim

5
00:00:12,049 --> 00:00:15,360
okay so thanks for clicking show their

6
00:00:15,360 --> 00:00:18,050
ad Jim so hi everyone and welcome to

7
00:00:18,050 --> 00:00:21,180
what was previously known as the secure

8
00:00:21,180 --> 00:00:24,240
developer podcast we now have a new name

9
00:00:24,240 --> 00:00:26,369
of Mike dev suck-ups and we have

10
00:00:26,369 --> 00:00:28,170
information on our website about rebrand

11
00:00:28,170 --> 00:00:29,820
so you can add there to check out

12
00:00:29,820 --> 00:00:31,859
exactly what that means my name is

13
00:00:31,859 --> 00:00:33,570
Oliver I'm one of the community managers

14
00:00:33,570 --> 00:00:35,910
at sneaked and we help deliver these

15
00:00:35,910 --> 00:00:38,460
sessions every two weeks and today we're

16
00:00:38,460 --> 00:00:41,010
joined by Jim Monaco and Ron Paris both

17
00:00:41,010 --> 00:00:42,690
from Monaco we're gonna talk us through

18
00:00:42,690 --> 00:00:45,210
building secure reacts applications

19
00:00:45,210 --> 00:00:47,820
I'm would love your feedback as we go

20
00:00:47,820 --> 00:00:49,800
through this session as well so we are

21
00:00:49,800 --> 00:00:52,469
currently in our slack in live sessions

22
00:00:52,469 --> 00:00:54,390
channel so as we get go through this

23
00:00:54,390 --> 00:00:55,410
session if anyone has any questions

24
00:00:55,410 --> 00:00:57,510
please feel free to ask them as we go

25
00:00:57,510 --> 00:01:00,059
through and we will pass them on to to

26
00:01:00,059 --> 00:01:02,520
Jim and to run and the slack channel is

27
00:01:02,520 --> 00:01:04,650
actually the best place to interact with

28
00:01:04,650 --> 00:01:06,090
our speakers as well so during the

29
00:01:06,090 --> 00:01:07,920
session after the session as well so you

30
00:01:07,920 --> 00:01:09,330
can feel free if you're listening to

31
00:01:09,330 --> 00:01:11,580
this as a recording or any questions

32
00:01:11,580 --> 00:01:13,470
come out come to you afterwards you can

33
00:01:13,470 --> 00:01:15,299
feel free to post those in the slack

34
00:01:15,299 --> 00:01:17,130
community I wanna make sure that I get -

35
00:01:17,130 --> 00:01:20,009
did you answer on so once the session is

36
00:01:20,009 --> 00:01:21,299
over the recording will be posted on our

37
00:01:21,299 --> 00:01:22,799
website which you'll be able to check

38
00:01:22,799 --> 00:01:25,710
out at any time and I think that's

39
00:01:25,710 --> 00:01:26,909
enough for me at this stage I'm gonna

40
00:01:26,909 --> 00:01:29,250
hand over to Jim and so everyone and

41
00:01:29,250 --> 00:01:30,750
they're gonna take us through today's

42
00:01:30,750 --> 00:01:34,140
session hi everybody my name is Jim

43
00:01:34,140 --> 00:01:35,759
Annika I'm really happy to be here on

44
00:01:35,759 --> 00:01:39,390
this not a podcast not a webinar live

45
00:01:39,390 --> 00:01:41,159
it's a live session let's start with

46
00:01:41,159 --> 00:01:42,780
just getting that scare terminology

47
00:01:42,780 --> 00:01:43,680
right we're on the lives

48
00:01:43,680 --> 00:01:45,750
is it a virtual session or a virtual

49
00:01:45,750 --> 00:01:48,409
live session I already fixed it up

50
00:01:48,409 --> 00:01:50,280
that's a good question we call that a

51
00:01:50,280 --> 00:01:53,520
virtual session very why I already I'm

52
00:01:53,520 --> 00:01:55,229
just sorry my marketing terminology bit

53
00:01:55,229 --> 00:01:57,810
off it's a virtual virtual session and

54
00:01:57,810 --> 00:02:00,119
we virtual session but we're live -

55
00:02:00,119 --> 00:02:03,210
we're live right now yet you know it

56
00:02:03,210 --> 00:02:06,450
it's it's my great pleasure to also

57
00:02:06,450 --> 00:02:08,369
introduced Ron Paris again I've known

58
00:02:08,369 --> 00:02:11,819
Ron since 2013 we used to work together

59
00:02:11,819 --> 00:02:14,100
at white hat security which is

60
00:02:14,100 --> 00:02:16,530
where we met back in the day Ron is one

61
00:02:16,530 --> 00:02:18,540
of my favorite researchers in the

62
00:02:18,540 --> 00:02:21,390
application security space specifically

63
00:02:21,390 --> 00:02:23,400
he does a lot but specifically his work

64
00:02:23,400 --> 00:02:25,980
around JavaScript security is some of

65
00:02:25,980 --> 00:02:27,720
the best I've seen and you know what

66
00:02:27,720 --> 00:02:29,100
there's a lot of us who make a lot of

67
00:02:29,100 --> 00:02:31,350
noise in the industry but it's often I

68
00:02:31,350 --> 00:02:33,870
think the folks behind the scenes really

69
00:02:33,870 --> 00:02:36,390
doing the hard work who are some of the

70
00:02:36,390 --> 00:02:38,550
really best contributors and I'm I see

71
00:02:38,550 --> 00:02:40,290
Ron is one of those people how you doing

72
00:02:40,290 --> 00:02:42,690
Ron up to it well Jim that is true we

73
00:02:42,690 --> 00:02:44,940
did be 2013 during our brief stint over

74
00:02:44,940 --> 00:02:47,880
at white hat security great company that

75
00:02:47,880 --> 00:02:49,710
was you were doing

76
00:02:49,710 --> 00:02:51,810
200 Olas meetings a year right yeah

77
00:02:51,810 --> 00:02:52,980
something well it was a fascinating

78
00:02:52,980 --> 00:02:56,250
experience a lot of travel and I did

79
00:02:56,250 --> 00:02:58,980
love the experience there now that now

80
00:02:58,980 --> 00:03:01,830
that it's sold my stock is cashed out I

81
00:03:01,830 --> 00:03:07,080
could say it was a circus holy I can't

82
00:03:07,080 --> 00:03:11,100
say that I'm not part of that circuses

83
00:03:11,100 --> 00:03:13,530
are fun places and a lot of like a lot

84
00:03:13,530 --> 00:03:15,960
of very skilled professionals are needed

85
00:03:15,960 --> 00:03:20,670
at the circus so drunk Ron Ron Paris

86
00:03:20,670 --> 00:03:23,310
does not endorse that comment he does

87
00:03:23,310 --> 00:03:26,820
not endorse that comment so we start

88
00:03:26,820 --> 00:03:28,290
talking about react security Jim I

89
00:03:28,290 --> 00:03:30,630
remember in 2015 you had already done

90
00:03:30,630 --> 00:03:31,980
some early research and maybe even

91
00:03:31,980 --> 00:03:34,200
provided some guidance to developers on

92
00:03:34,200 --> 00:03:37,650
on how to get a ride with react 2015

93
00:03:37,650 --> 00:03:39,660
there was not a lot of people talking

94
00:03:39,660 --> 00:03:41,220
about react security and it was

95
00:03:41,220 --> 00:03:43,620
beginning to grow exponentially in terms

96
00:03:43,620 --> 00:03:45,810
of use so all right and there was a few

97
00:03:45,810 --> 00:03:47,850
people chatting about it on Twitter and

98
00:03:47,850 --> 00:03:50,490
a few people posting blog posts and I

99
00:03:50,490 --> 00:03:53,250
was collecting the information from like

100
00:03:53,250 --> 00:03:54,930
seven or eight different people who

101
00:03:54,930 --> 00:03:57,600
posted little bits about it collected it

102
00:03:57,600 --> 00:03:59,520
and began to add it to my course where

103
00:03:59,520 --> 00:04:01,440
with references and began and I pushed

104
00:04:01,440 --> 00:04:05,070
out like a brief guide on react security

105
00:04:05,070 --> 00:04:08,880
back in 2015 and I know JavaScript but I

106
00:04:08,880 --> 00:04:10,890
don't know JavaScript at the level of

107
00:04:10,890 --> 00:04:12,420
like closures and some of the more

108
00:04:12,420 --> 00:04:14,280
advanced techniques I'm like when you're

109
00:04:14,280 --> 00:04:16,950
jQuery JavaScript guys right I spent

110
00:04:16,950 --> 00:04:19,620
years doing it and so I remember when

111
00:04:19,620 --> 00:04:23,310
you looked at my research and I remember

112
00:04:23,310 --> 00:04:26,220
correctly I I hired you to like look at

113
00:04:26,220 --> 00:04:27,840
the research and extend it

114
00:04:27,840 --> 00:04:30,300
I know they think that was a November of

115
00:04:30,300 --> 00:04:32,910
2017 yeah I think you had given me your

116
00:04:32,910 --> 00:04:34,380
early research and I looked it over and

117
00:04:34,380 --> 00:04:35,790
it all looked like you know high-quality

118
00:04:35,790 --> 00:04:37,919
stuff good guidance and I think what was

119
00:04:37,919 --> 00:04:39,120
happening around then was that most

120
00:04:39,120 --> 00:04:40,800
folks were still writing angular so

121
00:04:40,800 --> 00:04:42,630
angular one was still very popular and

122
00:04:42,630 --> 00:04:45,090
react was the Challenger and I think

123
00:04:45,090 --> 00:04:47,880
back in 2017 November so two years ago

124
00:04:47,880 --> 00:04:49,410
you pinged me and said hey would you

125
00:04:49,410 --> 00:04:51,030
mind for mana code just doing a deep

126
00:04:51,030 --> 00:04:52,979
dive on the react security stuff and

127
00:04:52,979 --> 00:04:54,750
then I think I spent the next six eight

128
00:04:54,750 --> 00:04:56,970
months really digging in and figuring

129
00:04:56,970 --> 00:04:58,800
out what it takes to write a react

130
00:04:58,800 --> 00:05:00,870
application and take its threats and

131
00:05:00,870 --> 00:05:03,870
attack surface into account and and we

132
00:05:03,870 --> 00:05:07,650
were gonna give a talk at apps like DC

133
00:05:07,650 --> 00:05:09,990
and when I saw your presentation I was

134
00:05:09,990 --> 00:05:12,570
like holy cow you've taken this research

135
00:05:12,570 --> 00:05:16,020
to its like logical conclusions so far

136
00:05:16,020 --> 00:05:17,940
ahead that is starting to get beyond my

137
00:05:17,940 --> 00:05:19,770
abilities like again I did all my

138
00:05:19,770 --> 00:05:22,020
JavaScript development in an era where

139
00:05:22,020 --> 00:05:24,510
jQuery reigned supreme I wrote a lot of

140
00:05:24,510 --> 00:05:27,479
JavaScript but that didn't require a lot

141
00:05:27,479 --> 00:05:29,370
of the advanced powerful features of

142
00:05:29,370 --> 00:05:31,020
JavaScript that I think are now

143
00:05:31,020 --> 00:05:33,690
necessary in modern development and this

144
00:05:33,690 --> 00:05:35,340
is where were you jump in this is where

145
00:05:35,340 --> 00:05:37,500
you took over and really extended that

146
00:05:37,500 --> 00:05:39,570
research to the max I heard a lot of

147
00:05:39,570 --> 00:05:41,850
people comment on your DC talk and they

148
00:05:41,850 --> 00:05:45,060
were like that was amazing and there's

149
00:05:45,060 --> 00:05:47,400
like hat to talk I didn't understand so

150
00:05:47,400 --> 00:05:50,160
I think and then he explained why it's

151
00:05:50,160 --> 00:05:51,870
not because it wasn't a good talk it was

152
00:05:51,870 --> 00:05:54,060
because a lot of us in the security

153
00:05:54,060 --> 00:05:56,460
industry are thinking Jake we're

154
00:05:56,460 --> 00:05:58,860
thinking jQuery level JavaScript there's

155
00:05:58,860 --> 00:06:00,419
not a lot of people that I know in the

156
00:06:00,419 --> 00:06:02,490
industry who really understand

157
00:06:02,490 --> 00:06:05,430
JavaScript at the level that's needed

158
00:06:05,430 --> 00:06:08,220
for like modern node and modern reacting

159
00:06:08,220 --> 00:06:09,780
angular development that's a that's a

160
00:06:09,780 --> 00:06:12,960
small number of people so yeah it's

161
00:06:12,960 --> 00:06:15,330
definitely taken a jump and that

162
00:06:15,330 --> 00:06:17,460
JavaScript syntax I mean with the update

163
00:06:17,460 --> 00:06:19,919
2015 in particular the JavaScript

164
00:06:19,919 --> 00:06:22,169
standard doubled in the number of

165
00:06:22,169 --> 00:06:23,639
language features so the size of the

166
00:06:23,639 --> 00:06:25,440
standard if you printed it out would be

167
00:06:25,440 --> 00:06:27,570
double in size so what at that point a

168
00:06:27,570 --> 00:06:29,160
lot of language features were introduced

169
00:06:29,160 --> 00:06:31,050
and I feel like you know security pros

170
00:06:31,050 --> 00:06:32,940
and apps like folks might not have had

171
00:06:32,940 --> 00:06:35,220
the time to dig in to those new features

172
00:06:35,220 --> 00:06:36,599
of JavaScript but I think now here in

173
00:06:36,599 --> 00:06:39,620
2019 I heard something like 70% of

174
00:06:39,620 --> 00:06:41,680
JavaScript developers use real

175
00:06:41,680 --> 00:06:44,380
currently in some capacity so this is

176
00:06:44,380 --> 00:06:45,880
this library is really taken over so I

177
00:06:45,880 --> 00:06:47,410
think it's good that we provide some

178
00:06:47,410 --> 00:06:49,449
guidance to folks writing react and also

179
00:06:49,449 --> 00:06:51,250
folks that are you know taking care of a

180
00:06:51,250 --> 00:06:52,840
react application from an aspect point

181
00:06:52,840 --> 00:06:54,370
of view or just interested in maybe

182
00:06:54,370 --> 00:06:56,080
doing some automations around security I

183
00:06:56,080 --> 00:06:57,550
agree so this is a good time to talk

184
00:06:57,550 --> 00:06:59,830
about all this talk about your employer

185
00:06:59,830 --> 00:07:02,770
on this on this virtual session sure

186
00:07:02,770 --> 00:07:04,960
yeah no I mean I do training in mana

187
00:07:04,960 --> 00:07:06,039
code I've been doing that for a few

188
00:07:06,039 --> 00:07:07,360
years and enjoying it do a little

189
00:07:07,360 --> 00:07:09,400
research for mana code I'm currently

190
00:07:09,400 --> 00:07:11,979
working for NPM as a security engineer

191
00:07:11,979 --> 00:07:15,639
so NPM as some of you might know they

192
00:07:15,639 --> 00:07:16,930
they have a lot of the world's

193
00:07:16,930 --> 00:07:18,820
JavaScript modules and those end up

194
00:07:18,820 --> 00:07:20,410
getting downloaded and used and they

195
00:07:20,410 --> 00:07:22,389
also provide security tooling such as

196
00:07:22,389 --> 00:07:24,400
nvm audit that we'll give you I'll talk

197
00:07:24,400 --> 00:07:25,630
a little bit later about kind of how

198
00:07:25,630 --> 00:07:29,050
that fits in I know sneak also has some

199
00:07:29,050 --> 00:07:30,789
tooling around the same kind of use

200
00:07:30,789 --> 00:07:33,430
cases plus more so I think we're both

201
00:07:33,430 --> 00:07:35,080
allies in this you know finding and

202
00:07:35,080 --> 00:07:36,430
reporting of vulnerabilities and helping

203
00:07:36,430 --> 00:07:39,580
people automate security I agree so my

204
00:07:39,580 --> 00:07:42,190
my question for you is like how many

205
00:07:42,190 --> 00:07:46,900
modules in NPM are react components like

206
00:07:46,900 --> 00:07:48,430
if I want to download a third-party

207
00:07:48,430 --> 00:07:50,320
react component and use it within my

208
00:07:50,320 --> 00:07:52,300
react app I know that react has this big

209
00:07:52,300 --> 00:07:55,210
third-party library ecosystem how many

210
00:07:55,210 --> 00:08:01,138
like how many modules are an NPM yeah

211
00:08:02,940 --> 00:08:05,409
okay so let's take one step back why are

212
00:08:05,409 --> 00:08:06,970
you why are we writing react code right

213
00:08:06,970 --> 00:08:08,710
what's the primary task that racks

214
00:08:08,710 --> 00:08:10,960
helping us with the primary task is it's

215
00:08:10,960 --> 00:08:13,030
gonna do Dom updates so state of our

216
00:08:13,030 --> 00:08:14,650
application changes on the front end and

217
00:08:14,650 --> 00:08:16,479
we want to change the Dom to reflect

218
00:08:16,479 --> 00:08:18,729
that new state and like you said jQuery

219
00:08:18,729 --> 00:08:20,199
was often used for this in the past you

220
00:08:20,199 --> 00:08:22,599
would use jQuery code if jquery had a

221
00:08:22,599 --> 00:08:24,220
slogan that would be fine something and

222
00:08:24,220 --> 00:08:25,870
do something to it so you just kind of

223
00:08:25,870 --> 00:08:27,400
always manipulating the Dom in different

224
00:08:27,400 --> 00:08:29,349
ways but we react as is a unidirectional

225
00:08:29,349 --> 00:08:31,780
data flow model where updates happen in

226
00:08:31,780 --> 00:08:33,729
a very specific way and from a security

227
00:08:33,729 --> 00:08:35,380
point of view that's important because

228
00:08:35,380 --> 00:08:37,708
it means that if you use react correctly

229
00:08:37,708 --> 00:08:39,729
you shouldn't have to think about

230
00:08:39,729 --> 00:08:41,740
security concerns every time you go to

231
00:08:41,740 --> 00:08:43,690
update a piece of the dog they hopefully

232
00:08:43,690 --> 00:08:45,970
react has some safeguards built in that

233
00:08:45,970 --> 00:08:47,709
will prevent you from kind of coming off

234
00:08:47,709 --> 00:08:49,870
the rails so remember when you ping me

235
00:08:49,870 --> 00:08:51,700
back in twenty twenty seventeen know

236
00:08:51,700 --> 00:08:52,959
about writing some research on react I

237
00:08:52,959 --> 00:08:54,780
thought isn't this a done deal

238
00:08:54,780 --> 00:08:57,180
I mean isn't this salt what what's there

239
00:08:57,180 --> 00:08:59,040
to talk about and then when I tell get a

240
00:08:59,040 --> 00:09:00,420
little more into these ecosystem you're

241
00:09:00,420 --> 00:09:01,890
talking about and it's sixty five

242
00:09:01,890 --> 00:09:04,770
thousand modules that I found on up on

243
00:09:04,770 --> 00:09:08,220
the NPM registry I'd say that it's not a

244
00:09:08,220 --> 00:09:10,260
salt problem for various reasons we kind

245
00:09:10,260 --> 00:09:14,220
of break those down a lot of the use of

246
00:09:14,220 --> 00:09:16,680
jQuery in my air development we were

247
00:09:16,680 --> 00:09:18,810
doing asynchronous work with it with the

248
00:09:18,810 --> 00:09:21,510
Dom we were mostly making a page request

249
00:09:21,510 --> 00:09:24,570
pulling down a page and jQuery would let

250
00:09:24,570 --> 00:09:26,580
us manipulate the Dom but not in an

251
00:09:26,580 --> 00:09:28,430
asynchronous way it was more of like

252
00:09:28,430 --> 00:09:31,680
styling and some fancy components we

253
00:09:31,680 --> 00:09:33,720
couldn't get in basic forms but it

254
00:09:33,720 --> 00:09:36,360
wasn't a lot of like live updating the

255
00:09:36,360 --> 00:09:39,450
Dom through like Ajax JSON round trips

256
00:09:39,450 --> 00:09:41,490
that's not a lot of what jQuery was used

257
00:09:41,490 --> 00:09:43,320
for at least am i our development I know

258
00:09:43,320 --> 00:09:46,050
and as that became in vogue in the last

259
00:09:46,050 --> 00:09:48,330
couple of years jQuery we're gonna break

260
00:09:48,330 --> 00:09:49,770
apart it's not I don't think it's the

261
00:09:49,770 --> 00:09:51,990
best library for that and this is where

262
00:09:51,990 --> 00:09:54,150
the angular is the views and of course

263
00:09:54,150 --> 00:09:56,220
the reacts real I think shine the most

264
00:09:56,220 --> 00:09:58,320
is when you're building a complex UI

265
00:09:58,320 --> 00:10:02,130
with a lot of like Ajax live data

266
00:10:02,130 --> 00:10:04,830
updates that's where you almost need

267
00:10:04,830 --> 00:10:07,140
something like react I would dare say

268
00:10:07,140 --> 00:10:09,300
that you know absolutely absolutely and

269
00:10:09,300 --> 00:10:11,070
that you know if we take a step back and

270
00:10:11,070 --> 00:10:11,970
think about the security implications

271
00:10:11,970 --> 00:10:14,250
you know I remember watching so they

272
00:10:14,250 --> 00:10:17,220
talk to you Georg I you know in 2013 12

273
00:10:17,220 --> 00:10:19,110
and you talked a lot about cross-site

274
00:10:19,110 --> 00:10:21,150
scripting and and defense and mitigation

275
00:10:21,150 --> 00:10:23,250
and a lot of it was around a server-side

276
00:10:23,250 --> 00:10:26,220
rendered templates right and how to get

277
00:10:26,220 --> 00:10:28,170
it right and whether you're pulling

278
00:10:28,170 --> 00:10:29,430
something out of a database and you're

279
00:10:29,430 --> 00:10:30,810
generating a page on the server side

280
00:10:30,810 --> 00:10:31,830
you're about to send it over to the

281
00:10:31,830 --> 00:10:33,990
client that was kind of the way to apps

282
00:10:33,990 --> 00:10:35,610
for being built back then and reacts

283
00:10:35,610 --> 00:10:37,560
part of this modern era where you get a

284
00:10:37,560 --> 00:10:39,780
big bundle of JavaScript HTML CSS and

285
00:10:39,780 --> 00:10:42,240
then the react code is responsible for

286
00:10:42,240 --> 00:10:44,160
making these requests asynchronously and

287
00:10:44,160 --> 00:10:46,050
pull it in whatever JSON and then

288
00:10:46,050 --> 00:10:48,330
redrawing parts of the Dom based on user

289
00:10:48,330 --> 00:10:49,980
interactions so things have definitely

290
00:10:49,980 --> 00:10:51,720
shifted in it and that's gives you a tax

291
00:10:51,720 --> 00:10:54,810
surface right that's a pretty big attack

292
00:10:54,810 --> 00:10:57,150
surface you're now dealing with dynamic

293
00:10:57,150 --> 00:10:59,010
data entering the Dom you're doing live

294
00:10:59,010 --> 00:11:01,650
Dom updates reacting to user events and

295
00:11:01,650 --> 00:11:05,940
more and this really does change how to

296
00:11:05,940 --> 00:11:08,040
deal with the main vulnerability we care

297
00:11:08,040 --> 00:11:08,610
about

298
00:11:08,610 --> 00:11:11,010
world's cross-site scripting and so the

299
00:11:11,010 --> 00:11:13,260
advice we gave about cross-site

300
00:11:13,260 --> 00:11:15,180
scripting even just a few years ago even

301
00:11:15,180 --> 00:11:19,290
the dom-based xss advice we gave its a

302
00:11:19,290 --> 00:11:20,970
whole different ball of wax as we move

303
00:11:20,970 --> 00:11:22,440
into these modern frameworks now the

304
00:11:22,440 --> 00:11:24,660
knowledge to really build secure user

305
00:11:24,660 --> 00:11:27,269
interfaces has become specialized you

306
00:11:27,269 --> 00:11:30,120
have to really understand react and Dom

307
00:11:30,120 --> 00:11:33,600
XSS and and JavaScript to be able to

308
00:11:33,600 --> 00:11:35,430
build secure react application so in

309
00:11:35,430 --> 00:11:37,680
some way I think it's easier to build a

310
00:11:37,680 --> 00:11:40,290
secure user interface on the web in some

311
00:11:40,290 --> 00:11:43,100
ways it's a lot more specific and and

312
00:11:43,100 --> 00:11:44,970
challenging in some ways we're gonna

313
00:11:44,970 --> 00:11:48,510
talk about in this yeah yeah not a

314
00:11:48,510 --> 00:11:50,760
webinar but virtual session during this

315
00:11:50,760 --> 00:11:53,459
virtual session yeah I remember when I

316
00:11:53,459 --> 00:11:54,990
was asked to do this research for Hanako

317
00:11:54,990 --> 00:11:56,550
the net result was that was a report

318
00:11:56,550 --> 00:11:58,700
that was shared with corporations and

319
00:11:58,700 --> 00:12:01,579
customers of Hanako and partners and I

320
00:12:01,579 --> 00:12:04,110
remember that they said I had a relevant

321
00:12:04,110 --> 00:12:06,630
research that showed vulnerabilities

322
00:12:06,630 --> 00:12:09,029
that were already found in the ecosystem

323
00:12:09,029 --> 00:12:10,380
and then I could talk through example

324
00:12:10,380 --> 00:12:11,850
code and I said okay no problem let's go

325
00:12:11,850 --> 00:12:14,399
grab a few reactor bones from the public

326
00:12:14,399 --> 00:12:14,820
database

327
00:12:14,820 --> 00:12:16,560
you know we a component library holds

328
00:12:16,560 --> 00:12:18,600
and I'll analyze them and you know and

329
00:12:18,600 --> 00:12:20,760
jump in but what I realized is that

330
00:12:20,760 --> 00:12:22,470
there weren't that many reported

331
00:12:22,470 --> 00:12:24,870
vulnerabilities so you had 65,000

332
00:12:24,870 --> 00:12:27,720
modules but the number of reported

333
00:12:27,720 --> 00:12:30,360
vulnerabilities at that time we really

334
00:12:30,360 --> 00:12:32,310
only had one that I was able to point to

335
00:12:32,310 --> 00:12:35,250
in the NPM registry database that's yeah

336
00:12:35,250 --> 00:12:37,380
and you know of course the man who found

337
00:12:37,380 --> 00:12:39,990
it Adam Baldwin who's always five years

338
00:12:39,990 --> 00:12:41,579
ahead of everything so he was already

339
00:12:41,579 --> 00:12:43,050
thinking about it and already moved on

340
00:12:43,050 --> 00:12:44,490
by the time the rest of us even knew

341
00:12:44,490 --> 00:12:46,290
this would be a problem react security

342
00:12:46,290 --> 00:12:50,760
but I went in I found 66% of all the

343
00:12:50,760 --> 00:12:52,140
component library vulnerabilities in

344
00:12:52,140 --> 00:12:52,920
2018

345
00:12:52,920 --> 00:12:55,740
all right also how many was that man

346
00:12:55,740 --> 00:12:58,740
don't steal my punchline I found I'm 40%

347
00:12:58,740 --> 00:13:01,680
I found all 40% of all react component

348
00:13:01,680 --> 00:13:04,050
library vulnerabilities since 2016 and I

349
00:13:04,050 --> 00:13:06,690
found 100% accorded the NPM database of

350
00:13:06,690 --> 00:13:08,370
the cross-site scripting

351
00:13:08,370 --> 00:13:09,980
react component library vulnerabilities

352
00:13:09,980 --> 00:13:12,930
he of all time these are the component

353
00:13:12,930 --> 00:13:14,730
libraries not not the react you know

354
00:13:14,730 --> 00:13:17,880
library itself I'm with ya and to do

355
00:13:17,880 --> 00:13:19,740
that I had to fight a grand total of two

356
00:13:19,740 --> 00:13:22,370
vulnerabilities and

357
00:13:22,370 --> 00:13:26,370
so why fine wait can you give me that

358
00:13:26,370 --> 00:13:30,060
that whole like every time I hear this I

359
00:13:30,060 --> 00:13:33,030
can feel my head wanting to explode can

360
00:13:33,030 --> 00:13:34,650
you sum this up one more time for me

361
00:13:34,650 --> 00:13:35,100
please

362
00:13:35,100 --> 00:13:36,750
I'll make it easier for you so since

363
00:13:36,750 --> 00:13:39,120
since there are 65,000 modules out there

364
00:13:39,120 --> 00:13:41,190
in the ecosystem and according to NPMs

365
00:13:41,190 --> 00:13:44,840
advisories there's only five known

366
00:13:44,840 --> 00:13:46,530
vulnerabilities in all of these

367
00:13:46,530 --> 00:13:49,530
libraries and I wouldn't looked at some

368
00:13:49,530 --> 00:13:51,450
of the 65,000 libraries as part of the

369
00:13:51,450 --> 00:13:53,040
research I did for me on the code and I

370
00:13:53,040 --> 00:13:54,480
was just tripping over kölner abilities

371
00:13:54,480 --> 00:13:55,830
I mean I was literally the first thing I

372
00:13:55,830 --> 00:13:57,840
opened pop five minutes in here's a

373
00:13:57,840 --> 00:13:59,340
cross-site scripting open another

374
00:13:59,340 --> 00:14:00,900
library ten minutes in boom there's a

375
00:14:00,900 --> 00:14:03,270
cross-site scripting so ret component

376
00:14:03,270 --> 00:14:05,250
libraries often contain vulnerabilities

377
00:14:05,250 --> 00:14:06,870
I think they're just not being audited

378
00:14:06,870 --> 00:14:08,610
we don't have a lot of folks out there

379
00:14:08,610 --> 00:14:11,070
helping us look for vulnerabilities in

380
00:14:11,070 --> 00:14:12,240
these libraries hopefully this virtual

381
00:14:12,240 --> 00:14:14,490
session spurred some researchers who are

382
00:14:14,490 --> 00:14:16,200
interested in maybe get a few CDs on the

383
00:14:16,200 --> 00:14:18,930
resume or participating in one of these

384
00:14:18,930 --> 00:14:20,400
bug bounty programs like the notes'

385
00:14:20,400 --> 00:14:22,650
foundation ecosystem workgroup runs a

386
00:14:22,650 --> 00:14:24,060
bounty and if you find these

387
00:14:24,060 --> 00:14:25,590
vulnerabilities and report them you know

388
00:14:25,590 --> 00:14:27,540
you're you might be eligible for a CBE

389
00:14:27,540 --> 00:14:30,420
but then maybe even get some credit and

390
00:14:30,420 --> 00:14:31,680
potentially there's a high download

391
00:14:31,680 --> 00:14:33,840
library you you could be eligible for

392
00:14:33,840 --> 00:14:37,770
bounty pay so I would say that like your

393
00:14:37,770 --> 00:14:39,300
biggest concern when using react is

394
00:14:39,300 --> 00:14:41,550
probably the library itself so does

395
00:14:41,550 --> 00:14:43,350
react the library itself contain

396
00:14:43,350 --> 00:14:45,480
vulnerabilities and in the history of

397
00:14:45,480 --> 00:14:47,960
the react library it's only had three

398
00:14:47,960 --> 00:14:51,240
vulnerabilities but it's both it's a

399
00:14:51,240 --> 00:14:54,150
pretty impressive one was in 2013 uh it

400
00:14:54,150 --> 00:14:55,680
was a it was an attribute creation

401
00:14:55,680 --> 00:14:57,210
vulnerability was cross-site scripting

402
00:14:57,210 --> 00:15:03,480
via attribute creation what raised my

403
00:15:03,480 --> 00:15:06,240
crossbow so someone's like last time I

404
00:15:06,240 --> 00:15:08,880
was on this virtual session I threatened

405
00:15:08,880 --> 00:15:10,800
Simon one of the lead Java guys there

406
00:15:10,800 --> 00:15:12,660
with the with the machete throughout the

407
00:15:12,660 --> 00:15:14,640
podcast because he need to be kept in

408
00:15:14,640 --> 00:15:17,370
line you know Oliver is very respectful

409
00:15:17,370 --> 00:15:20,100
but I just I know these sneak guys and I

410
00:15:20,100 --> 00:15:21,660
always got to bring a weapon with me and

411
00:15:21,660 --> 00:15:23,190
so I brought crossbow to represent

412
00:15:23,190 --> 00:15:26,160
cross-site scripting so so Oliver keep

413
00:15:26,160 --> 00:15:27,750
in line is what I'm trying to say don't

414
00:15:27,750 --> 00:15:29,580
make me use this and somebody asked me

415
00:15:29,580 --> 00:15:30,720
on the live session are you bringing

416
00:15:30,720 --> 00:15:32,040
tonight I'm like I'm not gonna bring a

417
00:15:32,040 --> 00:15:33,630
knife that's terrible I'm bringing a

418
00:15:33,630 --> 00:15:34,440
crossbow

419
00:15:34,440 --> 00:15:35,870
this is my society cream

420
00:15:35,870 --> 00:15:37,460
dozens across well here never promise

421
00:15:37,460 --> 00:15:39,260
for you Rigo whoa

422
00:15:39,260 --> 00:15:42,170
well it's stuck into the wall oh my god

423
00:15:42,170 --> 00:15:44,870
check this out here be in here no no

424
00:15:44,870 --> 00:15:46,700
there there's my crew I gotta show you

425
00:15:46,700 --> 00:15:48,680
this because my girlfriend's gonna kick

426
00:15:48,680 --> 00:15:51,770
my butt when she sees this that that is

427
00:15:51,770 --> 00:15:54,770
what I just did I just kind of shot at

428
00:15:54,770 --> 00:15:57,050
the wall oh wow let's go back to work

429
00:15:57,050 --> 00:16:00,050
Ron think about something pretty

430
00:16:00,050 --> 00:16:01,520
exciting I can tell Oliver wanted to

431
00:16:01,520 --> 00:16:04,390
know more cheeseballs in the other

432
00:16:04,390 --> 00:16:05,630
codebase

433
00:16:05,630 --> 00:16:08,510
luckily I'm renting let's move on there

434
00:16:08,510 --> 00:16:10,010
was also a cross-site scripting

435
00:16:10,010 --> 00:16:13,120
vulnerability in the react library and

436
00:16:13,120 --> 00:16:15,740
there was one in react Dom as well so

437
00:16:15,740 --> 00:16:18,529
all three of the vulnerabilities in the

438
00:16:18,529 --> 00:16:19,880
react library itself have all been

439
00:16:19,880 --> 00:16:21,320
related to cross-site scripting zombies

440
00:16:21,320 --> 00:16:23,029
cross-site scripting server-side

441
00:16:23,029 --> 00:16:26,270
rendered code related cross-site

442
00:16:26,270 --> 00:16:28,190
scripting and then zombies cross-site

443
00:16:28,190 --> 00:16:30,560
scripting so I'd say that if you're

444
00:16:30,560 --> 00:16:32,000
using the react library you probably

445
00:16:32,000 --> 00:16:34,790
just want to stay up-to-date and there's

446
00:16:34,790 --> 00:16:36,230
a chance that there will be another

447
00:16:36,230 --> 00:16:38,420
process scripting in in the react core

448
00:16:38,420 --> 00:16:40,010
library but they don't have them very

449
00:16:40,010 --> 00:16:42,770
often now when it comes to your code

450
00:16:42,770 --> 00:16:46,490
like what can you do to avoid cross-site

451
00:16:46,490 --> 00:16:48,110
scripting vulnerabilities I think maybe

452
00:16:48,110 --> 00:16:49,430
a little bit of screen share here kind

453
00:16:49,430 --> 00:16:51,260
of shows a CO example while Jim does

454
00:16:51,260 --> 00:16:55,130
archery practice let me yeah I'm back

455
00:16:55,130 --> 00:16:57,410
Ron I'm back okay we're cool session

456
00:16:57,410 --> 00:17:00,290
cross-site scripting and react ecosystem

457
00:17:00,290 --> 00:17:04,599
I'm more focused now morpho okay

458
00:17:11,530 --> 00:17:13,849
yeah I'm ready for I'm ready for a sneak

459
00:17:13,849 --> 00:17:15,890
poster no Alfred I'm probably gonna get

460
00:17:15,890 --> 00:17:18,589
like a contractor get some you gotta get

461
00:17:18,589 --> 00:17:22,369
some fixing there yeah that's bleep I

462
00:17:22,369 --> 00:17:25,699
really didn't think through my Cosmo

463
00:17:25,699 --> 00:17:28,400
demonstration it's like a safety it's a

464
00:17:28,400 --> 00:17:32,690
safety bolt didn't didn't provide the

465
00:17:32,690 --> 00:17:34,940
safety I was expecting very much like we

466
00:17:34,940 --> 00:17:37,040
see in the world of application security

467
00:17:37,040 --> 00:17:38,690
and modern framers as we're about to

468
00:17:38,690 --> 00:17:41,000
talk about that's really the metaphor

469
00:17:41,000 --> 00:17:42,740
I'm trying to get across here

470
00:17:42,740 --> 00:17:45,429
wow so Oliver Jim can you see my screen

471
00:17:45,429 --> 00:17:47,990
do you see this built-in exit

472
00:17:47,990 --> 00:17:51,260
defense line no life how do I do why not

473
00:17:51,260 --> 00:17:55,420
I just see Ron how come I don't see it

474
00:17:55,420 --> 00:17:58,190
I'm not sure do you see it Oliver it's a

475
00:17:58,190 --> 00:18:01,280
filthy XSS defense at the top yep I can

476
00:18:01,280 --> 00:18:01,910
see the screen

477
00:18:01,910 --> 00:18:03,710
what matters is what matters let's do

478
00:18:03,710 --> 00:18:06,260
this so here we got react component and

479
00:18:06,260 --> 00:18:09,410
we're defining a new app component and

480
00:18:09,410 --> 00:18:11,960
it's got some markup here they kinda

481
00:18:11,960 --> 00:18:13,670
looks like HTML do you know this stuff

482
00:18:13,670 --> 00:18:15,620
is Jim it looks like HTML but it's

483
00:18:15,620 --> 00:18:18,290
inside of your JavaScript you know is he

484
00:18:18,290 --> 00:18:20,090
talking JSX or something or yeah this

485
00:18:20,090 --> 00:18:20,900
are JSX

486
00:18:20,900 --> 00:18:23,210
yeah we got some geo sex here so j sx is

487
00:18:23,210 --> 00:18:25,610
own sort of looks like a markup language

488
00:18:25,610 --> 00:18:27,110
did you author in your javascript files

489
00:18:27,110 --> 00:18:29,960
that gets transpiled to javascript it

490
00:18:29,960 --> 00:18:31,640
will run in the browser so in this case

491
00:18:31,640 --> 00:18:34,910
like these divs this div with the class

492
00:18:34,910 --> 00:18:36,260
name equal to app that will get

493
00:18:36,260 --> 00:18:38,360
transpiled under the hood to something

494
00:18:38,360 --> 00:18:41,809
like crate element in the react library

495
00:18:41,809 --> 00:18:43,700
and that class name will get passed in

496
00:18:43,700 --> 00:18:45,950
as part of an object and the property

497
00:18:45,950 --> 00:18:48,320
will be equal to the class name and then

498
00:18:48,320 --> 00:18:49,700
its value will be equal to that string

499
00:18:49,700 --> 00:18:51,350
so what you're looking at it looks like

500
00:18:51,350 --> 00:18:53,240
HTML this like she could transpile into

501
00:18:53,240 --> 00:18:55,640
something that runs in your browser as

502
00:18:55,640 --> 00:18:58,340
javascript and so like i said the

503
00:18:58,340 --> 00:18:59,750
primary thing that react does is it

504
00:18:59,750 --> 00:19:02,090
renders dawn so what this is gonna do is

505
00:19:02,090 --> 00:19:04,070
it's gonna render a div and then in that

506
00:19:04,070 --> 00:19:06,590
div it's gonna place some text content

507
00:19:06,590 --> 00:19:09,230
here that text content looks again like

508
00:19:09,230 --> 00:19:11,059
some markup but you can see it's in

509
00:19:11,059 --> 00:19:13,040
quotes and if we intend as a programmer

510
00:19:13,040 --> 00:19:15,140
for it to be a string is this vulnerable

511
00:19:15,140 --> 00:19:16,760
to cross-site scripting Jim there's no

512
00:19:16,760 --> 00:19:19,340
way an example this is this is where JSX

513
00:19:19,340 --> 00:19:21,200
shines is where this is why a lot of

514
00:19:21,200 --> 00:19:23,720
react folks say that you can't have XSS

515
00:19:23,720 --> 00:19:25,910
and react is because whenever you're

516
00:19:25,910 --> 00:19:29,210
putting any kind of content between two

517
00:19:29,210 --> 00:19:31,210
mustaches it's gonna do contextual

518
00:19:31,210 --> 00:19:33,770
contextual output escaping it like like

519
00:19:33,770 --> 00:19:36,080
you see in the bottom example it's it

520
00:19:36,080 --> 00:19:37,610
we're converting like the left hand

521
00:19:37,610 --> 00:19:40,850
symbol to the HTML entity and purse and

522
00:19:40,850 --> 00:19:43,550
lt semicolon which means it's gonna

523
00:19:43,550 --> 00:19:45,800
display the attack gonna display the

524
00:19:45,800 --> 00:19:48,380
markup or the JavaScript but it's not

525
00:19:48,380 --> 00:19:50,960
gonna execute it in the browser when it

526
00:19:50,960 --> 00:19:52,630
gets displayed so this is the main

527
00:19:52,630 --> 00:19:54,830
defense when it comes to cross-site

528
00:19:54,830 --> 00:19:57,770
scripting output escaping and ron we

529
00:19:57,770 --> 00:19:59,330
talked about this for over a decade

530
00:19:59,330 --> 00:20:00,960
maybe we have and i

531
00:20:00,960 --> 00:20:02,850
- joy here you talk about it I remember

532
00:20:02,850 --> 00:20:04,740
the first time I ever had to listen to a

533
00:20:04,740 --> 00:20:07,230
live have to listen to a speech you were

534
00:20:07,230 --> 00:20:08,760
giving at UCLA

535
00:20:08,760 --> 00:20:10,440
they told me at Whitehead they said hey

536
00:20:10,440 --> 00:20:11,909
you got to go meet Jim Manik oh he's

537
00:20:11,909 --> 00:20:13,289
giving a speech and you've gotta sit

538
00:20:13,289 --> 00:20:14,669
there watch it and then afterwards you

539
00:20:14,669 --> 00:20:15,899
guys are taking a meeting together and

540
00:20:15,899 --> 00:20:18,090
so I said well how long's the speech and

541
00:20:18,090 --> 00:20:21,870
he says be four hours long this is gonna

542
00:20:21,870 --> 00:20:23,730
be the worst day of my life he's gonna

543
00:20:23,730 --> 00:20:25,080
be talking about because I already know

544
00:20:25,080 --> 00:20:28,200
for four hours I said the audience I

545
00:20:28,200 --> 00:20:30,480
didn't look at my watch once so you talk

546
00:20:30,480 --> 00:20:32,190
about contextual escaping as much as you

547
00:20:32,190 --> 00:20:34,620
watch him I'm very honored glad to hear

548
00:20:34,620 --> 00:20:36,480
you talk about it well it's amazing in

549
00:20:36,480 --> 00:20:37,649
the last couple of years we've seen

550
00:20:37,649 --> 00:20:40,500
frameworks like some frameworks like

551
00:20:40,500 --> 00:20:42,870
old-school Java Java Java server page

552
00:20:42,870 --> 00:20:44,970
some of their default components will do

553
00:20:44,970 --> 00:20:47,279
some escaping but in the modern era we

554
00:20:47,279 --> 00:20:49,320
see things like go templates which does

555
00:20:49,320 --> 00:20:51,630
contextual output escaping react and

556
00:20:51,630 --> 00:20:53,880
angular and even view as modern

557
00:20:53,880 --> 00:20:55,409
JavaScript frameworks that do this

558
00:20:55,409 --> 00:20:58,470
escaping so and a lot of other modern

559
00:20:58,470 --> 00:21:00,899
template even server-side templates will

560
00:21:00,899 --> 00:21:03,059
do this stuff automatically this is a

561
00:21:03,059 --> 00:21:05,549
big improvement in the world of XSS

562
00:21:05,549 --> 00:21:07,679
defense when building web user

563
00:21:07,679 --> 00:21:10,620
interfaces but as you know it's not you

564
00:21:10,620 --> 00:21:12,960
know just because you escaped data in

565
00:21:12,960 --> 00:21:15,240
certain context doesn't mean you get

566
00:21:15,240 --> 00:21:19,200
perfect yeah yeah I love this example

567
00:21:19,200 --> 00:21:21,419
because we have an example of we're

568
00:21:21,419 --> 00:21:25,529
putting untrusted data in a URL context

569
00:21:25,529 --> 00:21:29,299
and even when it's escaped properly a

570
00:21:29,299 --> 00:21:32,610
JavaScript URL is a common way to bypass

571
00:21:32,610 --> 00:21:35,130
this particular piece of code and as a

572
00:21:35,130 --> 00:21:36,690
quick note and please go back and re

573
00:21:36,690 --> 00:21:39,240
explain this again as a quick note the

574
00:21:39,240 --> 00:21:41,070
the Google researchers like the people

575
00:21:41,070 --> 00:21:42,360
who write trusts too tight Chris

576
00:21:42,360 --> 00:21:45,270
Kristoff and and some of the other folks

577
00:21:45,270 --> 00:21:47,250
who are at CSP Mike Samuels still

578
00:21:47,250 --> 00:21:49,950
working on the standard I think it's

579
00:21:49,950 --> 00:21:52,260
Chris Kristoff is the lead guy we're

580
00:21:52,260 --> 00:21:54,210
doing trusted types and I'm not sure

581
00:21:54,210 --> 00:21:56,669
who's working on CSP that's a w3c

582
00:21:56,669 --> 00:21:58,529
standard now but I know that Michael

583
00:21:58,529 --> 00:22:01,169
spagnolo and Lucas why show bomb for

584
00:22:01,169 --> 00:22:03,690
Google they pushed out several talks on

585
00:22:03,690 --> 00:22:07,169
how to implement CSP in the real world

586
00:22:07,169 --> 00:22:09,360
and their data is some of the best I've

587
00:22:09,360 --> 00:22:11,130
ever seen so I'm a big fan of these

588
00:22:11,130 --> 00:22:12,779
three and I really think the leaders in

589
00:22:12,779 --> 00:22:14,760
this of content security policy

590
00:22:14,760 --> 00:22:16,890
I call Lucas why sure mom and Michael

591
00:22:16,890 --> 00:22:19,290
Spagna yolo top top-tier guys because

592
00:22:19,290 --> 00:22:21,210
they're not just building the standard

593
00:22:21,210 --> 00:22:23,970
they're deploying it everywhere and all

594
00:22:23,970 --> 00:22:25,470
these different properties and

595
00:22:25,470 --> 00:22:27,720
understand the nuances of bypassing it

596
00:22:27,720 --> 00:22:29,340
with these gentlemen have told me is

597
00:22:29,340 --> 00:22:31,830
that one-third of successful attacks

598
00:22:31,830 --> 00:22:34,559
that that breakthrough Google properties

599
00:22:34,559 --> 00:22:37,200
are because of JavaScript URLs so I

600
00:22:37,200 --> 00:22:39,059
don't want to even though this is one

601
00:22:39,059 --> 00:22:41,910
example how to bypass react I don't want

602
00:22:41,910 --> 00:22:45,030
to minimize how important of a bypass

603
00:22:45,030 --> 00:22:47,309
this is it's one of the most popular

604
00:22:47,309 --> 00:22:50,480
ways to get XSS into a web application

605
00:22:50,480 --> 00:22:53,520
of some kind I mean yeah react is all

606
00:22:53,520 --> 00:22:55,200
about updating the Dom so they know

607
00:22:55,200 --> 00:22:56,640
about this threat they know about

608
00:22:56,640 --> 00:22:58,169
JavaScript URLs I know from the

609
00:22:58,169 --> 00:22:59,700
beginning they made a decision to allow

610
00:22:59,700 --> 00:23:01,290
them and it was a conscious decision

611
00:23:01,290 --> 00:23:03,179
they just accepted that people want to

612
00:23:03,179 --> 00:23:04,950
be able to do this but like you're

613
00:23:04,950 --> 00:23:06,660
saying you know Google's struggling with

614
00:23:06,660 --> 00:23:07,950
this they've built these technologies

615
00:23:07,950 --> 00:23:09,840
like trusted types content security

616
00:23:09,840 --> 00:23:12,030
policy dad defense-in-depth

617
00:23:12,030 --> 00:23:13,140
because they know this kind of stuff

618
00:23:13,140 --> 00:23:15,270
slips through either because a library

619
00:23:15,270 --> 00:23:17,309
author intends for it to slip through or

620
00:23:17,309 --> 00:23:18,600
because it's accidental and gets

621
00:23:18,600 --> 00:23:20,580
introduced into the dog so those those

622
00:23:20,580 --> 00:23:22,290
other technologies like trusted types

623
00:23:22,290 --> 00:23:24,330
and content security policy we're taking

624
00:23:24,330 --> 00:23:26,100
a look at when you just assume that

625
00:23:26,100 --> 00:23:27,840
somebody could possibly bypass a

626
00:23:27,840 --> 00:23:30,120
mechanism or in this case you know the

627
00:23:30,120 --> 00:23:32,040
library mediators just just allow it and

628
00:23:32,040 --> 00:23:34,169
to be fair coming coming soon to

629
00:23:34,169 --> 00:23:36,360
reactions the PR has already landed

630
00:23:36,360 --> 00:23:38,610
they already warning users are already

631
00:23:38,610 --> 00:23:42,000
warning users in development mode about

632
00:23:42,000 --> 00:23:44,190
JavaScript URLs and then in the future

633
00:23:44,190 --> 00:23:46,380
they might be actively blocking Java

634
00:23:46,380 --> 00:23:48,510
cert URL so they're super on top of this

635
00:23:48,510 --> 00:23:51,090
the react team is they just have left it

636
00:23:51,090 --> 00:23:52,380
there because it's sort of these weird

637
00:23:52,380 --> 00:23:54,450
intent functionality things and that's

638
00:23:54,450 --> 00:23:55,590
that's a big struggle we have with

639
00:23:55,590 --> 00:23:57,059
libraries in general right now I work in

640
00:23:57,059 --> 00:23:59,160
that security work group for the nodejs

641
00:23:59,160 --> 00:24:01,890
foundation do an ecosystem triage on

642
00:24:01,890 --> 00:24:03,600
modules or have vulnerabilities in the

643
00:24:03,600 --> 00:24:05,850
ecosystem and a lot of the times when a

644
00:24:05,850 --> 00:24:07,500
bull devotee gets reported the maintain

645
00:24:07,500 --> 00:24:08,970
your library will say hey that's

646
00:24:08,970 --> 00:24:10,830
intended right are you showing something

647
00:24:10,830 --> 00:24:11,910
like this you're like hey this is a

648
00:24:11,910 --> 00:24:14,070
bypass obviously the react team doesn't

649
00:24:14,070 --> 00:24:16,169
see it that way they think that's not a

650
00:24:16,169 --> 00:24:19,020
bypass that's intended and I think

651
00:24:19,020 --> 00:24:21,330
that's a controversial stance because if

652
00:24:21,330 --> 00:24:23,520
you look at the angular framework this

653
00:24:23,520 --> 00:24:26,309
is protected automatically view is like

654
00:24:26,309 --> 00:24:27,900
we don't care about it I don't know if

655
00:24:27,900 --> 00:24:28,660
that's true

656
00:24:28,660 --> 00:24:30,850
you does not defend against this and the

657
00:24:30,850 --> 00:24:33,010
next version of react there's gonna be a

658
00:24:33,010 --> 00:24:35,140
way for this to be to be handled

659
00:24:35,140 --> 00:24:37,630
automatically by the framework so I know

660
00:24:37,630 --> 00:24:39,280
that the react team in the past have

661
00:24:39,280 --> 00:24:41,740
said like oh it's not our problem this

662
00:24:41,740 --> 00:24:43,780
way it's supposed to work but other

663
00:24:43,780 --> 00:24:45,550
modern frameworks including I believe

664
00:24:45,550 --> 00:24:47,920
the next version of react is gonna deal

665
00:24:47,920 --> 00:24:50,410
with dis automatically I believe right

666
00:24:50,410 --> 00:24:52,360
yeah well I have a code sample later if

667
00:24:52,360 --> 00:24:55,000
you take a peek at this is how I'll jump

668
00:24:55,000 --> 00:24:56,020
there now why not

669
00:24:56,020 --> 00:24:58,120
it's job well this is how they're

670
00:24:58,120 --> 00:25:00,280
planning to deal with it I'm is this I

671
00:25:00,280 --> 00:25:01,870
was a good way to deal with the

672
00:25:01,870 --> 00:25:04,750
JavaScript protocol URL no this is what

673
00:25:04,750 --> 00:25:07,600
we're looking at here Jim a big freaking

674
00:25:07,600 --> 00:25:09,580
regular expression that made me sick to

675
00:25:09,580 --> 00:25:11,290
my stomach I'm not trying to make fun of

676
00:25:11,290 --> 00:25:12,820
the react team I know they're working

677
00:25:12,820 --> 00:25:15,460
hard but this is the absolute eponym

678
00:25:15,460 --> 00:25:17,650
sane way wrong way to handle this

679
00:25:17,650 --> 00:25:19,660
problem this is not acceptable you know

680
00:25:19,660 --> 00:25:21,850
I recently heard that if I used to say a

681
00:25:21,850 --> 00:25:23,920
joke about regex that if you have a

682
00:25:23,920 --> 00:25:25,660
problem you solve earth regex I heard

683
00:25:25,660 --> 00:25:27,550
then you've got two problems yeah

684
00:25:27,550 --> 00:25:28,990
exactly they knew what I heard is that

685
00:25:28,990 --> 00:25:32,800
the plural of regex is regrets yeah but

686
00:25:32,800 --> 00:25:33,910
this one what's the other problem

687
00:25:33,910 --> 00:25:35,350
besides being a regex we have to use

688
00:25:35,350 --> 00:25:37,480
regex I'm just joking but what's the

689
00:25:37,480 --> 00:25:38,980
what's the problem of this approach I

690
00:25:38,980 --> 00:25:42,820
mean this is not well that what I the

691
00:25:42,820 --> 00:25:46,870
tried-and-true way to handle validate

692
00:25:46,870 --> 00:25:48,520
this is essentially an input validation

693
00:25:48,520 --> 00:25:50,740
problem someone's gonna submit a piece

694
00:25:50,740 --> 00:25:53,290
of content that we add to a URL context

695
00:25:53,290 --> 00:25:55,540
and I want to restrict certain kinds of

696
00:25:55,540 --> 00:25:57,910
content and allow other kinds of URL

697
00:25:57,910 --> 00:26:00,520
content this is not whitelist validation

698
00:26:00,520 --> 00:26:03,010
this is looking to find malicious

699
00:26:03,010 --> 00:26:05,260
activity and block it where I believe

700
00:26:05,260 --> 00:26:08,590
the way to really do this is to use the

701
00:26:08,590 --> 00:26:12,010
URL class and define which protocols are

702
00:26:12,010 --> 00:26:16,180
acceptable HTTP and HTTPS frankly that's

703
00:26:16,180 --> 00:26:18,250
it make it configurable if you want and

704
00:26:18,250 --> 00:26:20,770
any other protocol gets rejected this is

705
00:26:20,770 --> 00:26:24,400
a real simple and clean way of blocking

706
00:26:24,400 --> 00:26:27,160
these bypasses and without having to

707
00:26:27,160 --> 00:26:29,040
have this very unmaintainable

708
00:26:29,040 --> 00:26:32,080
performance unfriendly blob of regex

709
00:26:32,080 --> 00:26:34,060
that no one fully understands it's just

710
00:26:34,060 --> 00:26:36,340
not yeah you know I tried this at my

711
00:26:36,340 --> 00:26:37,750
house you know my kids they're small

712
00:26:37,750 --> 00:26:40,180
I've got two small kids and I don't go

713
00:26:40,180 --> 00:26:41,510
to police station every morning

714
00:26:41,510 --> 00:26:43,190
and print out the wanted posters you

715
00:26:43,190 --> 00:26:44,780
know and I would bring them home and

716
00:26:44,780 --> 00:26:46,549
show over the kids and I'd say hey if

717
00:26:46,549 --> 00:26:47,929
any of these bad people come to the door

718
00:26:47,929 --> 00:26:49,700
don't let them in but otherwise let

719
00:26:49,700 --> 00:26:52,220
everyone else into the house and I said

720
00:26:52,220 --> 00:26:57,740
you know show the kids pictures of you

721
00:26:57,740 --> 00:26:59,150
know people in the family that we trust

722
00:26:59,150 --> 00:27:01,940
and only allow those so I think it'd

723
00:27:01,940 --> 00:27:03,410
allow list is probably the way you want

724
00:27:03,410 --> 00:27:04,700
to go you probably don't want to have a

725
00:27:04,700 --> 00:27:06,890
denial it's like this case and by the

726
00:27:06,890 --> 00:27:09,020
way I can bypass this with the data URL

727
00:27:09,020 --> 00:27:10,970
done i bypassed this and I got XSS

728
00:27:10,970 --> 00:27:12,230
through a URL context that's the other

729
00:27:12,230 --> 00:27:12,740
problem

730
00:27:12,740 --> 00:27:15,200
it only solves the JavaScript protocol

731
00:27:15,200 --> 00:27:17,540
problem but you can execute untrusted

732
00:27:17,540 --> 00:27:20,150
script through data the data scheme or

733
00:27:20,150 --> 00:27:21,890
data protocol I know I don't know where

734
00:27:21,890 --> 00:27:23,299
this is a fly maybe they handle that

735
00:27:23,299 --> 00:27:24,679
case but what do you but what you're

736
00:27:24,679 --> 00:27:26,240
saying is you're tempting someone to

737
00:27:26,240 --> 00:27:28,780
find a bypass and we know folks

738
00:27:28,780 --> 00:27:30,380
especially the folks that are working

739
00:27:30,380 --> 00:27:32,600
you know with cure 53 and others they're

740
00:27:32,600 --> 00:27:34,280
going to find a bypass especially for

741
00:27:34,280 --> 00:27:36,110
something like this I think so

742
00:27:36,110 --> 00:27:40,100
do you do you have a copy of that code

743
00:27:40,100 --> 00:27:42,169
that the rate in the secure react

744
00:27:42,169 --> 00:27:45,740
component back in the day uh I might

745
00:27:45,740 --> 00:27:47,540
have it around I'll link it in my blog

746
00:27:47,540 --> 00:27:49,460
it's in my blogs all link it in the show

747
00:27:49,460 --> 00:27:52,490
notes let's charge on let's turn around

748
00:27:52,490 --> 00:27:53,360
this is awesome

749
00:27:53,360 --> 00:27:56,240
so let me let me pop back over here real

750
00:27:56,240 --> 00:28:00,950
quick so you're probably thinking well

751
00:28:00,950 --> 00:28:03,980
what do you straight it does escaping

752
00:28:03,980 --> 00:28:05,480
but like sometimes when you write

753
00:28:05,480 --> 00:28:07,160
application it's like you actually want

754
00:28:07,160 --> 00:28:10,280
to inject yeah some kind of HTML

755
00:28:10,280 --> 00:28:12,020
directly into the dog this comes up

756
00:28:12,020 --> 00:28:14,480
right that's kind of living dangerously

757
00:28:14,480 --> 00:28:16,400
if you ask me but it is an important

758
00:28:16,400 --> 00:28:18,530
thing you have to do right yeah so like

759
00:28:18,530 --> 00:28:20,330
what's what's the current best practice

760
00:28:20,330 --> 00:28:22,520
if I have a chunk of markup and I needed

761
00:28:22,520 --> 00:28:24,230
to stick it into the Dom if you're in

762
00:28:24,230 --> 00:28:25,790
this situation Jim back in the day what

763
00:28:25,790 --> 00:28:27,200
do you do with that markup before you go

764
00:28:27,200 --> 00:28:29,559
and put in an inner HTML or something

765
00:28:29,559 --> 00:28:33,320
back in the day as the input hit the

766
00:28:33,320 --> 00:28:36,320
server we would server-side as a

767
00:28:36,320 --> 00:28:40,940
validation routine run that HTML or user

768
00:28:40,940 --> 00:28:43,450
authored input through a server-side

769
00:28:43,450 --> 00:28:45,260
HTML sanitizer

770
00:28:45,260 --> 00:28:47,600
one of the bit and the Java ecosystem

771
00:28:47,600 --> 00:28:49,520
there was none back in the day so that's

772
00:28:49,520 --> 00:28:51,590
where Michael Samuelle from Google wrote

773
00:28:51,590 --> 00:28:55,130
the Oh wash java HTML sanitizer

774
00:28:55,130 --> 00:28:57,950
the PHP world there's the HTML purifier

775
00:28:57,950 --> 00:29:01,040
class Ruby on Rails has an HTML native

776
00:29:01,040 --> 00:29:03,620
class that does this Java also has the J

777
00:29:03,620 --> 00:29:07,730
soup project that does this Python has

778
00:29:07,730 --> 00:29:10,040
the bleach project which does is all

779
00:29:10,040 --> 00:29:11,660
from memory so these are all the

780
00:29:11,660 --> 00:29:15,980
different server-side HTML stanning

781
00:29:15,980 --> 00:29:19,040
libraries out there all of them have

782
00:29:19,040 --> 00:29:21,200
been bypassed because this problem is so

783
00:29:21,200 --> 00:29:25,010
bleeping complex give me a chunk of a

784
00:29:25,010 --> 00:29:29,120
chunk of HTML and and let's provide some

785
00:29:29,120 --> 00:29:30,470
assurance that it doesn't contain

786
00:29:30,470 --> 00:29:33,830
malicious JavaScript and this is and yet

787
00:29:33,830 --> 00:29:36,470
still support all my complicated HTML

788
00:29:36,470 --> 00:29:39,110
input this is a really brutal problem

789
00:29:39,110 --> 00:29:41,150
and and I think a lot of people even

790
00:29:41,150 --> 00:29:43,310
believe doing it server-side is not the

791
00:29:43,310 --> 00:29:46,520
right place so just a few years ago this

792
00:29:46,520 --> 00:29:48,380
is where mario Heidrich and the careful

793
00:29:48,380 --> 00:29:50,630
III team shows up and they they broke

794
00:29:50,630 --> 00:29:54,860
the library you know Dom purify and and

795
00:29:54,860 --> 00:29:57,470
so now react shows up a couple years ago

796
00:29:57,470 --> 00:29:59,870
and they just did not address this

797
00:29:59,870 --> 00:30:01,820
problem they said if you want to live

798
00:30:01,820 --> 00:30:04,940
dangerously then use dangerously set

799
00:30:04,940 --> 00:30:08,150
inner HTML and we will let you add

800
00:30:08,150 --> 00:30:09,950
whatever markup you want directly to the

801
00:30:09,950 --> 00:30:12,980
Dom and this is insane it's and I think

802
00:30:12,980 --> 00:30:15,370
it's bad that the framework itself

803
00:30:15,370 --> 00:30:18,350
doesn't address this but what they did

804
00:30:18,350 --> 00:30:20,750
do to their credit at react they named

805
00:30:20,750 --> 00:30:23,630
this dis attribute dangerously so we

806
00:30:23,630 --> 00:30:26,270
know we're doing something foolhardy but

807
00:30:26,270 --> 00:30:28,700
if you look at angular I'm not a big fan

808
00:30:28,700 --> 00:30:30,350
of angular I don't like the the

809
00:30:30,350 --> 00:30:32,480
complexity of it I prefer react but

810
00:30:32,480 --> 00:30:35,360
angular has a built in HTML Fannett Iser

811
00:30:35,360 --> 00:30:37,310
I just say it's HTML and they'll

812
00:30:37,310 --> 00:30:38,990
sanitize it automatically using a

813
00:30:38,990 --> 00:30:41,900
similar tool we react when I say a

814
00:30:41,900 --> 00:30:45,470
dangerously set inner HTML it's raw

815
00:30:45,470 --> 00:30:47,900
editing the Dom with markup and there's

816
00:30:47,900 --> 00:30:51,290
no control built-in to react to help me

817
00:30:51,290 --> 00:30:52,850
solve this security problem

818
00:30:52,850 --> 00:30:54,680
I think that's disappointing I'd like

819
00:30:54,680 --> 00:30:55,820
where yeah so I would say like this

820
00:30:55,820 --> 00:30:57,050
thing right here is an escape hatch

821
00:30:57,050 --> 00:30:59,240
that's how I look at it this is a patch

822
00:30:59,240 --> 00:31:00,980
I'm a developer I don't what I'm doing

823
00:31:00,980 --> 00:31:02,510
I'm trying to get the Dom I want to make

824
00:31:02,510 --> 00:31:04,880
changes I need to get in there and do it

825
00:31:04,880 --> 00:31:05,870
I know what I'm doing

826
00:31:05,870 --> 00:31:08,059
use this particular escape hatch and

827
00:31:08,059 --> 00:31:09,830
like you said the react team named it

828
00:31:09,830 --> 00:31:11,540
dangerously said so it's obvious to

829
00:31:11,540 --> 00:31:12,440
other development you're doing some

830
00:31:12,440 --> 00:31:14,420
dangerous so if you if you had to do

831
00:31:14,420 --> 00:31:15,770
this gym and you had to put this stuff

832
00:31:15,770 --> 00:31:17,240
in you're using dangerous either you

833
00:31:17,240 --> 00:31:18,620
know what's the control

834
00:31:18,620 --> 00:31:19,970
I should be implementing here what

835
00:31:19,970 --> 00:31:21,470
library should be using to deal with

836
00:31:21,470 --> 00:31:24,020
this string the the library that has

837
00:31:24,020 --> 00:31:28,570
dominated client-side JavaScript based

838
00:31:28,570 --> 00:31:32,870
HTML sanitization is a library from the

839
00:31:32,870 --> 00:31:35,930
Cure 53 team called Dom purify this

840
00:31:35,930 --> 00:31:38,360
library is so important that's going to

841
00:31:38,360 --> 00:31:40,160
be added to the next version of Atma

842
00:31:40,160 --> 00:31:43,160
script it's used on Google's homepage at

843
00:31:43,160 --> 00:31:46,040
google.com and it is I think one of the

844
00:31:46,040 --> 00:31:48,500
most important security libraries in the

845
00:31:48,500 --> 00:31:50,600
JavaScript ecosystem because we do this

846
00:31:50,600 --> 00:31:52,730
stuff all the time and like when I go

847
00:31:52,730 --> 00:31:54,940
back to old jQuery stuff it's little

848
00:31:54,940 --> 00:31:58,460
riddled with XSS and I can use Dom

849
00:31:58,460 --> 00:32:02,270
purify to to plug all of those escape

850
00:32:02,270 --> 00:32:05,510
hatches and add an HTML sanitizer to

851
00:32:05,510 --> 00:32:08,660
make XSS even on my legacy JavaScript

852
00:32:08,660 --> 00:32:11,240
filth fix all that stuff as well so this

853
00:32:11,240 --> 00:32:14,030
is a there's no library to modern

854
00:32:14,030 --> 00:32:15,980
JavaScript development Dom you know the

855
00:32:15,980 --> 00:32:17,690
approach has changed under the hood

856
00:32:17,690 --> 00:32:20,120
recently but I know pretty pretty

857
00:32:20,120 --> 00:32:21,830
recently there was a there was an

858
00:32:21,830 --> 00:32:24,710
article on live over flows podcast on

859
00:32:24,710 --> 00:32:27,530
rubber duck somebody had a bypass in

860
00:32:27,530 --> 00:32:29,870
this approach so they're on Google home

861
00:32:29,870 --> 00:32:31,550
page in their search box you could put a

862
00:32:31,550 --> 00:32:33,470
certain input and now would result in a

863
00:32:33,470 --> 00:32:35,059
cross-site scripting vulnerability when

864
00:32:35,059 --> 00:32:36,380
they did Dom manipulation and it's

865
00:32:36,380 --> 00:32:39,200
because of the way that Dom purify works

866
00:32:39,200 --> 00:32:40,700
I think it's similar the way that Google

867
00:32:40,700 --> 00:32:43,280
mechanism works which is it creates a

868
00:32:43,280 --> 00:32:45,710
template tag I believe and then it puts

869
00:32:45,710 --> 00:32:48,020
the the content in that template tag and

870
00:32:48,020 --> 00:32:50,330
builds up a DOM and then it sanitizes

871
00:32:50,330 --> 00:32:52,850
and removes based on a white list of

872
00:32:52,850 --> 00:32:54,320
allowed elements and attributes it

873
00:32:54,320 --> 00:32:56,179
removes all the dangerous stuff and then

874
00:32:56,179 --> 00:32:58,429
it takes the output of that Don fragment

875
00:32:58,429 --> 00:33:00,320
and then turns back into a string and an

876
00:33:00,320 --> 00:33:02,960
inner HTML is that back into your Dom so

877
00:33:02,960 --> 00:33:05,960
there it's sound the ideas sound the

878
00:33:05,960 --> 00:33:07,429
problem was there's a slight difference

879
00:33:07,429 --> 00:33:09,260
between the way that no script tags were

880
00:33:09,260 --> 00:33:11,780
handled in an element tag versus how

881
00:33:11,780 --> 00:33:13,250
they're handled in a live dog and that

882
00:33:13,250 --> 00:33:13,850
little time

883
00:33:13,850 --> 00:33:15,530
difference but something attackers could

884
00:33:15,530 --> 00:33:17,630
exploit so even Google is dealing with

885
00:33:17,630 --> 00:33:19,820
cross-site scripting zombies cross-site

886
00:33:19,820 --> 00:33:21,740
scripting because of these types of

887
00:33:21,740 --> 00:33:23,960
issues in even the best in the world are

888
00:33:23,960 --> 00:33:26,240
there still bypasses so I endorsed that

889
00:33:26,240 --> 00:33:28,760
video this is from orange Desai on live

890
00:33:28,760 --> 00:33:31,220
overflow just do a quick search on

891
00:33:31,220 --> 00:33:34,250
unlike google.com bypassed live overflow

892
00:33:34,250 --> 00:33:37,340
Dom purify and it's and it's it's Dom

893
00:33:37,340 --> 00:33:39,530
purify and Google sanitizer basically

894
00:33:39,530 --> 00:33:43,100
the same thing and and yeah that bypass

895
00:33:43,100 --> 00:33:45,530
was sophisticated and amazing but if to

896
00:33:45,530 --> 00:33:47,720
your point improves that even when you

897
00:33:47,720 --> 00:33:49,640
use the best practice of an HTML

898
00:33:49,640 --> 00:33:51,950
sanitizer client-side or server-side

899
00:33:51,950 --> 00:33:54,530
you've got to keep those libraries up to

900
00:33:54,530 --> 00:33:56,870
date there's bypasses in them on a

901
00:33:56,870 --> 00:33:58,789
fairly regular basis cuz it's a hard

902
00:33:58,789 --> 00:34:00,830
problem to solve a really hard problem

903
00:34:00,830 --> 00:34:02,870
cell and you're probably thinking like

904
00:34:02,870 --> 00:34:05,299
ok dangerous editor HTML that's not

905
00:34:05,299 --> 00:34:06,950
something people often use right I mean

906
00:34:06,950 --> 00:34:08,690
react is all about updating the Dom why

907
00:34:08,690 --> 00:34:10,190
do I need to jump out through an escape

908
00:34:10,190 --> 00:34:12,619
hatch and like grab some random part of

909
00:34:12,619 --> 00:34:14,750
the Dom and update it so you've moved

910
00:34:14,750 --> 00:34:17,359
the single action this is one of the

911
00:34:17,359 --> 00:34:20,960
most widely talked about and used

912
00:34:20,960 --> 00:34:23,000
messaging apps especially in the

913
00:34:23,000 --> 00:34:25,609
security industry their claim is it's

914
00:34:25,609 --> 00:34:27,909
doing it's doing some of the best

915
00:34:27,909 --> 00:34:31,340
message communication a transport

916
00:34:31,340 --> 00:34:33,230
security that's possible with today's

917
00:34:33,230 --> 00:34:34,940
cryptographic technology so it's a

918
00:34:34,940 --> 00:34:36,980
really I'm sure it's a great tool and a

919
00:34:36,980 --> 00:34:38,179
cryptography is great and that's the

920
00:34:38,179 --> 00:34:39,080
hard thing about our industry right

921
00:34:39,080 --> 00:34:40,790
we're flaw finders so it's hard to talk

922
00:34:40,790 --> 00:34:41,989
about things without talking about some

923
00:34:41,989 --> 00:34:43,730
of the flaws what a great engineering

924
00:34:43,730 --> 00:34:45,619
work probably happened there but you

925
00:34:45,619 --> 00:34:47,210
know this is a difficult problem that

926
00:34:47,210 --> 00:34:48,739
teams grapple with which is how do you

927
00:34:48,739 --> 00:34:51,560
update that you know the contents of the

928
00:34:51,560 --> 00:34:53,869
DOM and this was the approach that sicko

929
00:34:53,869 --> 00:34:55,460
lab took they've now patched it but they

930
00:34:55,460 --> 00:34:57,740
were using react and they were taking

931
00:34:57,740 --> 00:34:59,630
the text if they received from the other

932
00:34:59,630 --> 00:35:01,400
party so you're getting a message on

933
00:35:01,400 --> 00:35:03,350
signal and secure communication platform

934
00:35:03,350 --> 00:35:05,090
you're getting a message and they're

935
00:35:05,090 --> 00:35:06,470
taking that message and they're taking

936
00:35:06,470 --> 00:35:08,540
the text of that message and inserting

937
00:35:08,540 --> 00:35:10,369
it directly into dangerously senator HDL

938
00:35:10,369 --> 00:35:12,170
that's that's a big deal and these are

939
00:35:12,170 --> 00:35:15,580
like a very security knowledgeable team

940
00:35:15,580 --> 00:35:17,780
with some of the best best

941
00:35:17,780 --> 00:35:19,520
cryptographers I know on the planet in

942
00:35:19,520 --> 00:35:22,490
terms of the work they're doing and they

943
00:35:22,490 --> 00:35:24,050
made so it's hard right you end up in

944
00:35:24,050 --> 00:35:25,339
these situations room we thought over to

945
00:35:25,339 --> 00:35:26,760
these escape hatches

946
00:35:26,760 --> 00:35:28,140
you go to do it and you try to do the

947
00:35:28,140 --> 00:35:29,370
right thing but in some cases you don't

948
00:35:29,370 --> 00:35:31,080
have all the controls in place so when

949
00:35:31,080 --> 00:35:32,490
you're using dangerously senator HTML

950
00:35:32,490 --> 00:35:34,050
will talk about you know using a linter

951
00:35:34,050 --> 00:35:36,180
to catch the usage but really these

952
00:35:36,180 --> 00:35:38,760
escape hatches truly are the way that

953
00:35:38,760 --> 00:35:39,960
you're going to get this this dog based

954
00:35:39,960 --> 00:35:40,980
cross-site scripting into your

955
00:35:40,980 --> 00:35:42,600
application you know when you and I

956
00:35:42,600 --> 00:35:44,520
think about this to me is is easy I'm

957
00:35:44,520 --> 00:35:46,050
never gonna use a dangerous sink I used

958
00:35:46,050 --> 00:35:48,030
some kind of sanitizing or escaping but

959
00:35:48,030 --> 00:35:50,220
you and I have stared at just the app

960
00:35:50,220 --> 00:35:53,070
set problem for like a decade now to the

961
00:35:53,070 --> 00:35:54,900
average developer even secure developers

962
00:35:54,900 --> 00:35:56,550
are worried about functionality dates

963
00:35:56,550 --> 00:35:58,590
they're worried about competing in the

964
00:35:58,590 --> 00:36:01,530
market and like security is one of a you

965
00:36:01,530 --> 00:36:03,210
know a dozen or more concerns on their

966
00:36:03,210 --> 00:36:05,730
mind this is my like only concern how do

967
00:36:05,730 --> 00:36:08,610
I teach secure coding and but I gotta

968
00:36:08,610 --> 00:36:10,050
realize that but even though it may seem

969
00:36:10,050 --> 00:36:12,180
like an easy problem South to me that's

970
00:36:12,180 --> 00:36:13,920
not the reality in the world of

971
00:36:13,920 --> 00:36:16,200
development we got to respect that yeah

972
00:36:16,200 --> 00:36:17,730
I mean in this case what would be the

973
00:36:17,730 --> 00:36:19,170
right approach I mean I think would be

974
00:36:19,170 --> 00:36:20,910
if you have to use the Angels II said in

975
00:36:20,910 --> 00:36:22,830
our HTML which hopefully you don't oh

976
00:36:22,830 --> 00:36:24,990
wait you find another way then you

977
00:36:24,990 --> 00:36:26,610
probably should be using tom purify and

978
00:36:26,610 --> 00:36:28,980
if you're then using dom purify there

979
00:36:28,980 --> 00:36:30,750
might be a bypass so you probably want

980
00:36:30,750 --> 00:36:32,520
content security policy and trusted

981
00:36:32,520 --> 00:36:34,830
types layer on top I agree and frankly

982
00:36:34,830 --> 00:36:37,310
what I do is I like to do server-side

983
00:36:37,310 --> 00:36:40,770
sanitization in one library put that in

984
00:36:40,770 --> 00:36:44,310
my database return that to JSON and then

985
00:36:44,310 --> 00:36:48,810
use Dom purify so and turn on CSP so if

986
00:36:48,810 --> 00:36:50,220
you gotta bypass my stuff you gotta

987
00:36:50,220 --> 00:36:52,380
bypass my server-side sanitizer Dom

988
00:36:52,380 --> 00:36:56,790
purify and bypass CSP and trusted types

989
00:36:56,790 --> 00:36:58,890
will back will back up any sink I don't

990
00:36:58,890 --> 00:37:00,360
define but I'll usually to find a

991
00:37:00,360 --> 00:37:02,550
dangerous sink to be Dom purify

992
00:37:02,550 --> 00:37:04,440
so again if you're using a good CSP

993
00:37:04,440 --> 00:37:07,020
policy doing server-side sanitization

994
00:37:07,020 --> 00:37:09,300
and client-side sanitization there's

995
00:37:09,300 --> 00:37:10,740
three layers that need to be bypassed

996
00:37:10,740 --> 00:37:12,870
and of course keep your freaking

997
00:37:12,870 --> 00:37:16,290
libraries like righteously up to date on

998
00:37:16,290 --> 00:37:18,810
a regular basis now we're talking secure

999
00:37:18,810 --> 00:37:21,000
software my pink yeah so if we think

1000
00:37:21,000 --> 00:37:22,770
about the Jersey senator HTML if you had

1001
00:37:22,770 --> 00:37:24,330
a guest Jim at the top what a hundred

1002
00:37:24,330 --> 00:37:26,310
react component libraries as far as

1003
00:37:26,310 --> 00:37:28,200
download goes these are using

1004
00:37:28,200 --> 00:37:29,760
dangerously cetera HTML you think I

1005
00:37:29,760 --> 00:37:33,720
talked to I did I'm gonna guess I'm a

1006
00:37:33,720 --> 00:37:35,700
bit more jaded in this world and I see

1007
00:37:35,700 --> 00:37:38,370
how often it's used I'm gonna say 40%

1008
00:37:38,370 --> 00:37:39,579
40%

1009
00:37:39,579 --> 00:37:42,009
percent okay it's making a scale percent

1010
00:37:42,009 --> 00:37:45,039
it's 12 percent 12 percent of these

1011
00:37:45,039 --> 00:37:46,690
libraries need to use this escape hatch

1012
00:37:46,690 --> 00:37:49,420
so the top under it 12 of them are using

1013
00:37:49,420 --> 00:37:50,380
this escape hatch

1014
00:37:50,380 --> 00:37:52,479
right how what kind of living is that to

1015
00:37:52,479 --> 00:37:53,799
you Ron what kind of living is that

1016
00:37:53,799 --> 00:37:58,839
that's living like heavy crossbow bolts

1017
00:37:58,839 --> 00:38:01,599
through the wall of my rental I just did

1018
00:38:01,599 --> 00:38:04,420
that and it's not a joke so I was trying

1019
00:38:04,420 --> 00:38:06,729
to Democrats crypting I brought a knife

1020
00:38:06,729 --> 00:38:10,719
last time machete to threaten Simon

1021
00:38:10,719 --> 00:38:13,089
Oliver you know Simon right he's always

1022
00:38:13,089 --> 00:38:15,160
out of line he got away with knife at

1023
00:38:15,160 --> 00:38:16,420
him to keep in line are you right am i

1024
00:38:16,420 --> 00:38:17,289
right

1025
00:38:17,289 --> 00:38:20,469
no come on no Clement so I brought a

1026
00:38:20,469 --> 00:38:22,809
crossbow to keep Oliver in line but

1027
00:38:22,809 --> 00:38:24,700
Oliver is very respectful gentleman as

1028
00:38:24,700 --> 00:38:27,519
we can tell so like I was demonstrating

1029
00:38:27,519 --> 00:38:29,200
my this is from the Society of creative

1030
00:38:29,200 --> 00:38:31,059
anachronism I'm old man I don't do

1031
00:38:31,059 --> 00:38:32,920
upfront battle I do I shoot at people

1032
00:38:32,920 --> 00:38:35,079
from far than I run away right away and

1033
00:38:35,079 --> 00:38:36,640
they shoot crossbow bolts at them so I

1034
00:38:36,640 --> 00:38:38,349
was demonstrating the crossbow this is

1035
00:38:38,349 --> 00:38:40,989
like old-school medieval crossbow with a

1036
00:38:40,989 --> 00:38:43,690
manual crank and a manual and that's a

1037
00:38:43,690 --> 00:38:45,819
real crossbow meant to hit people hard

1038
00:38:45,819 --> 00:38:48,609
and I used a safety arrow at the tip and

1039
00:38:48,609 --> 00:38:50,920
I said without thinking I shot it at the

1040
00:38:50,920 --> 00:38:53,349
wall so I'm like it's safety arrow and

1041
00:38:53,349 --> 00:38:56,019
Ron here's here's my here's my this is

1042
00:38:56,019 --> 00:38:57,160
my rental I'm gonna have to get this

1043
00:38:57,160 --> 00:38:59,199
fixed don't worry lean I'm gonna fix

1044
00:38:59,199 --> 00:39:00,849
this it's my landlady she's like you did

1045
00:39:00,849 --> 00:39:03,039
what to my house so I put a little hole

1046
00:39:03,039 --> 00:39:04,390
in there I'm gonna keep it in there and

1047
00:39:04,390 --> 00:39:06,009
remind myself to fix it this is one of

1048
00:39:06,009 --> 00:39:07,719
the advantages of a virtual session over

1049
00:39:07,719 --> 00:39:09,699
a podcast you know you know what kind of

1050
00:39:09,699 --> 00:39:11,739
content Oliver this would work on a

1051
00:39:11,739 --> 00:39:13,420
podcast right you're on the bus when you

1052
00:39:13,420 --> 00:39:15,160
send to this you can't see the bowl you

1053
00:39:15,160 --> 00:39:17,199
can't see the whole wall not a webinar

1054
00:39:17,199 --> 00:39:19,359
webinars are stuff Iran this wouldn't

1055
00:39:19,359 --> 00:39:20,709
work webinars to stuff that you can work

1056
00:39:20,709 --> 00:39:22,150
out a webinar here it's not a live

1057
00:39:22,150 --> 00:39:24,099
session that's improper terminology it

1058
00:39:24,099 --> 00:39:27,309
is a what Ron it is a build live session

1059
00:39:27,309 --> 00:39:29,680
no no it's not a live session it's a

1060
00:39:29,680 --> 00:39:32,049
virtual session it's a virtual live set

1061
00:39:32,049 --> 00:39:34,690
virtual I think it's virtual session it

1062
00:39:34,690 --> 00:39:37,660
happens to be live sorry this is live so

1063
00:39:37,660 --> 00:39:42,180
back to back to react I'm yeah okay so

1064
00:39:42,180 --> 00:39:44,289
that's the story right they knew senator

1065
00:39:44,289 --> 00:39:46,779
HTML do the right thing but you know

1066
00:39:46,779 --> 00:39:48,519
what's interesting is there's another

1067
00:39:48,519 --> 00:39:50,619
way to get access to the Dom when you're

1068
00:39:50,619 --> 00:39:51,849
using a react library and I think this

1069
00:39:51,849 --> 00:39:52,880
is where we're going to kind of walk

1070
00:39:52,880 --> 00:39:54,050
away from some of the guidance that

1071
00:39:54,050 --> 00:39:55,820
people have been seen since 2015 and

1072
00:39:55,820 --> 00:39:57,290
start to talk about some of the more

1073
00:39:57,290 --> 00:39:59,560
modern attack surfaces being discovered

1074
00:39:59,560 --> 00:40:02,660
so for example did you know Jim that RF

1075
00:40:02,660 --> 00:40:04,550
will give you direct Dom access in react

1076
00:40:04,550 --> 00:40:07,430
I knew you bring a herd of that I knew

1077
00:40:07,430 --> 00:40:09,950
refs I knew props and types roll and

1078
00:40:09,950 --> 00:40:12,050
crate component I didn't know about tell

1079
00:40:12,050 --> 00:40:13,190
me about this rest up

1080
00:40:13,190 --> 00:40:15,620
that's rest up is new to me what's so

1081
00:40:15,620 --> 00:40:17,870
riffs are like it's a concept of react

1082
00:40:17,870 --> 00:40:19,880
where you want to during some part of

1083
00:40:19,880 --> 00:40:21,380
the lifecycle of your a component get

1084
00:40:21,380 --> 00:40:23,780
direct access to the Dom and here's an

1085
00:40:23,780 --> 00:40:25,040
example what you might want to do you

1086
00:40:25,040 --> 00:40:26,840
might want to like when it renders the

1087
00:40:26,840 --> 00:40:28,550
component you just want to like take the

1088
00:40:28,550 --> 00:40:31,370
focus and put it the browser focus on

1089
00:40:31,370 --> 00:40:33,380
the input field that's benign right

1090
00:40:33,380 --> 00:40:34,460
you're just focusing an input field

1091
00:40:34,460 --> 00:40:35,330
that's doesn't have a security

1092
00:40:35,330 --> 00:40:37,250
vulnerability but where the starts to

1093
00:40:37,250 --> 00:40:39,530
get crazy is I was looking at some open

1094
00:40:39,530 --> 00:40:41,480
source code recently and I saw somebody

1095
00:40:41,480 --> 00:40:45,110
doing this with RF they're planning your

1096
00:40:45,110 --> 00:40:46,610
read or something and they're saving

1097
00:40:46,610 --> 00:40:49,310
access save ref this nut element equals

1098
00:40:49,310 --> 00:40:50,630
the current element so this is the

1099
00:40:50,630 --> 00:40:52,130
currently rendered element but this is

1100
00:40:52,130 --> 00:40:55,190
its Dom direct Dom API access and then

1101
00:40:55,190 --> 00:40:56,810
they're saying the current element that

1102
00:40:56,810 --> 00:40:58,580
were rendering react let's run this

1103
00:40:58,580 --> 00:41:00,470
parse link which is an auto linker

1104
00:41:00,470 --> 00:41:03,620
library that takes user input and finds

1105
00:41:03,620 --> 00:41:04,850
potential links and it's like if you

1106
00:41:04,850 --> 00:41:06,230
have a phone number or something looks

1107
00:41:06,230 --> 00:41:08,210
get an email address or URL it turns it

1108
00:41:08,210 --> 00:41:09,950
into markup so let's have this thing

1109
00:41:09,950 --> 00:41:11,570
auto generate some markup and then let's

1110
00:41:11,570 --> 00:41:13,910
jam that into the inner HTML property of

1111
00:41:13,910 --> 00:41:16,670
the element we're about to render so

1112
00:41:16,670 --> 00:41:18,800
inner HTML as you know that's a script

1113
00:41:18,800 --> 00:41:20,900
sync so anything that comes out of this

1114
00:41:20,900 --> 00:41:24,080
pars link this props text this is going

1115
00:41:24,080 --> 00:41:25,970
to be directly inserted into the Dom and

1116
00:41:25,970 --> 00:41:27,680
bypass any security controls that react

1117
00:41:27,680 --> 00:41:30,470
as in place couple our stott link to one

1118
00:41:30,470 --> 00:41:32,570
more time I know how that does everyone

1119
00:41:32,570 --> 00:41:34,940
you're grabbing a prop that they tend to

1120
00:41:34,940 --> 00:41:36,860
not get auto escape and said this is

1121
00:41:36,860 --> 00:41:38,630
dangerous this is a third-party library

1122
00:41:38,630 --> 00:41:40,730
this pars dot link this is a third-party

1123
00:41:40,730 --> 00:41:42,830
library that's an auto linker and what

1124
00:41:42,830 --> 00:41:45,080
auto linkers do is you give them text

1125
00:41:45,080 --> 00:41:48,320
and then they give you back text plus

1126
00:41:48,320 --> 00:41:50,420
markup so essentially like let's say I'm

1127
00:41:50,420 --> 00:41:52,520
typing to you on slack and I say hey go

1128
00:41:52,520 --> 00:41:54,860
check out Google Calm it will take that

1129
00:41:54,860 --> 00:41:56,930
text and then it'll take the google.com

1130
00:41:56,930 --> 00:41:58,850
part and turn that into an anchor tag

1131
00:41:58,850 --> 00:42:01,220
and set its href e equal to google.com

1132
00:42:01,220 --> 00:42:03,170
it'll do all that work for me but

1133
00:42:03,170 --> 00:42:05,349
typically these automakers

1134
00:42:05,349 --> 00:42:07,839
they don't do a CV so if I typed to you

1135
00:42:07,839 --> 00:42:09,999
and I put you know a script tag or some

1136
00:42:09,999 --> 00:42:12,369
other malicious content in the input

1137
00:42:12,369 --> 00:42:13,779
that I'm sending to you the auto linker

1138
00:42:13,779 --> 00:42:15,579
will pass that markup straight through

1139
00:42:15,579 --> 00:42:18,400
and won't apply any escaping I imagine I

1140
00:42:18,400 --> 00:42:19,989
can get JavaScript URLs through this

1141
00:42:19,989 --> 00:42:21,549
other linker as well you can straight up

1142
00:42:21,549 --> 00:42:23,950
to image source equals x on alert type

1143
00:42:23,950 --> 00:42:26,769
oh I got scripting yeah you can use that

1144
00:42:26,769 --> 00:42:28,900
cuz it's decided so they're not doing

1145
00:42:28,900 --> 00:42:31,329
escaping for the different the different

1146
00:42:31,329 --> 00:42:36,009
the URL and the display sync yeah so I

1147
00:42:36,009 --> 00:42:37,539
can look at mine too I mean I'm sure

1148
00:42:37,539 --> 00:42:38,979
your hands start sweating right you're

1149
00:42:38,979 --> 00:42:40,630
taking something this stuff props up

1150
00:42:40,630 --> 00:42:42,640
text okay that should be text we got

1151
00:42:42,640 --> 00:42:44,049
from the user and then I'm gonna

1152
00:42:44,049 --> 00:42:45,700
directly assert that indicator H to you

1153
00:42:45,700 --> 00:42:47,259
about somewhere within my react

1154
00:42:47,259 --> 00:42:49,380
component that makes me nervous like I

1155
00:42:49,380 --> 00:42:51,249
shouldn't be doing that I know what that

1156
00:42:51,249 --> 00:42:53,049
we wrapping the output a parse link and

1157
00:42:53,049 --> 00:42:54,369
it you know gone purify again or

1158
00:42:54,369 --> 00:42:56,109
something like that to escape the

1159
00:42:56,109 --> 00:42:59,319
content so I think that this is a scary

1160
00:42:59,319 --> 00:43:02,499
this is a scary usage of refs and I

1161
00:43:02,499 --> 00:43:05,430
would looked at the module ecosystem and

1162
00:43:05,430 --> 00:43:09,130
61% of the top 100 modules or 61 of them

1163
00:43:09,130 --> 00:43:12,999
are using refs so refs are ultra common

1164
00:43:12,999 --> 00:43:14,859
where you know only a few people are

1165
00:43:14,859 --> 00:43:17,349
using you know datacenter HTML refs or

1166
00:43:17,349 --> 00:43:19,359
ultra prevalent so this really increases

1167
00:43:19,359 --> 00:43:21,160
your attack surface so here a map SEC

1168
00:43:21,160 --> 00:43:23,140
team and your are currently linting for

1169
00:43:23,140 --> 00:43:25,180
dangerously senator HTML you might want

1170
00:43:25,180 --> 00:43:27,130
to address to that list a lot of the use

1171
00:43:27,130 --> 00:43:28,989
it might be benign but some of it might

1172
00:43:28,989 --> 00:43:30,849
be just a stuff that's crazy

1173
00:43:30,849 --> 00:43:33,999
I'm sorry run just to interrupt we just

1174
00:43:33,999 --> 00:43:36,009
have a saw in the chapters ask if you

1175
00:43:36,009 --> 00:43:37,799
can go back into presentation mode

1176
00:43:37,799 --> 00:43:45,609
circuit thank you so much better yeah

1177
00:43:45,609 --> 00:43:48,779
yeah that's great thank you

1178
00:43:51,530 --> 00:43:53,910
[Music]

1179
00:43:53,910 --> 00:43:56,499
yeah Jim so I think that in this case

1180
00:43:56,499 --> 00:43:58,749
like what would the defense be here if

1181
00:43:58,749 --> 00:44:00,069
you're going to be using refs like this

1182
00:44:00,069 --> 00:44:01,930
you're gonna be doing interests EML my

1183
00:44:01,930 --> 00:44:04,210
first reaction is when I'm doing link

1184
00:44:04,210 --> 00:44:06,849
creation see III I don't want to just

1185
00:44:06,849 --> 00:44:09,279
dump purify this I'd rather use a parse

1186
00:44:09,279 --> 00:44:12,460
dot link that had security built in that

1187
00:44:12,460 --> 00:44:14,259
it did actually be escaping at the

1188
00:44:14,259 --> 00:44:17,109
attribute level that did entity escaping

1189
00:44:17,109 --> 00:44:19,600
at the display data level of an anchor

1190
00:44:19,600 --> 00:44:22,450
or similar and would and would do

1191
00:44:22,450 --> 00:44:24,760
weightless validation on URL type to

1192
00:44:24,760 --> 00:44:28,240
make sure it was like HTTP or HTTPS only

1193
00:44:28,240 --> 00:44:30,370
and every other protocol get dropped so

1194
00:44:30,370 --> 00:44:32,980
ideally I would like that solve at the

1195
00:44:32,980 --> 00:44:35,440
at though at the link creator and then

1196
00:44:35,440 --> 00:44:37,450
as an extra layer I can send that link

1197
00:44:37,450 --> 00:44:39,250
and do Dom purify and that should all

1198
00:44:39,250 --> 00:44:41,920
get through just fine so I personally

1199
00:44:41,920 --> 00:44:44,070
want to solve that at two levels and

1200
00:44:44,070 --> 00:44:48,400
okay for even better as a diffusing your

1201
00:44:48,400 --> 00:44:50,500
HTML to assemble the URL

1202
00:44:50,500 --> 00:44:52,810
programmatically Dave sinks would be

1203
00:44:52,810 --> 00:44:54,210
another way of doing it

1204
00:44:54,210 --> 00:44:57,460
sure so that hopefully I mean I wish

1205
00:44:57,460 --> 00:44:58,750
that was the end of the story I think I

1206
00:44:58,750 --> 00:45:00,070
wish it was dangerous he said a ninja to

1207
00:45:00,070 --> 00:45:01,360
melon rafts and that was it

1208
00:45:01,360 --> 00:45:03,700
for for attack surface but it turns out

1209
00:45:03,700 --> 00:45:05,530
that this still exists in react which is

1210
00:45:05,530 --> 00:45:08,230
this fine Dom noticed an escape hatch so

1211
00:45:08,230 --> 00:45:09,610
what this thing does is it gives you

1212
00:45:09,610 --> 00:45:11,620
direct access to a particular component

1213
00:45:11,620 --> 00:45:13,960
in the Dom so if you have this going on

1214
00:45:13,960 --> 00:45:15,670
anywhere in your in your react

1215
00:45:15,670 --> 00:45:17,620
components you're back to Street Tom

1216
00:45:17,620 --> 00:45:18,910
access you're back to having to worry

1217
00:45:18,910 --> 00:45:20,200
about all the different seats and all

1218
00:45:20,200 --> 00:45:22,990
the different escaping issues and I

1219
00:45:22,990 --> 00:45:25,540
thought yeah go ahead is this really

1220
00:45:25,540 --> 00:45:27,550
needed in JavaScript development is this

1221
00:45:27,550 --> 00:45:30,010
like a programmer being lazy or is this

1222
00:45:30,010 --> 00:45:31,960
really critical to react development I

1223
00:45:31,960 --> 00:45:33,460
think goes back to what you were talking

1224
00:45:33,460 --> 00:45:35,140
about which is a lot of people are

1225
00:45:35,140 --> 00:45:37,060
coming from jQuery and they're used to

1226
00:45:37,060 --> 00:45:39,070
having direct on access and I've even

1227
00:45:39,070 --> 00:45:40,840
seen react components that contain both

1228
00:45:40,840 --> 00:45:43,330
jQuery code and react code so they've

1229
00:45:43,330 --> 00:45:44,890
got some react going on and then they've

1230
00:45:44,890 --> 00:45:46,660
got some crazy escape hatch stuff going

1231
00:45:46,660 --> 00:45:48,340
on and they're jumping in there a jQuery

1232
00:45:48,340 --> 00:45:49,930
because it's like use the tools you know

1233
00:45:49,930 --> 00:45:51,700
I mean be great if everybody understood

1234
00:45:51,700 --> 00:45:53,950
idiomatic react used hooks or whatever

1235
00:45:53,950 --> 00:45:56,260
the latest pattern was but realistically

1236
00:45:56,260 --> 00:45:57,730
if you're gonna get the job done with

1237
00:45:57,730 --> 00:45:59,410
what they know how to use and sometimes

1238
00:45:59,410 --> 00:46:00,700
they don't have to do direct Dom access

1239
00:46:00,700 --> 00:46:01,960
that's how they only get the job done

1240
00:46:01,960 --> 00:46:03,070
they're gonna look for these escape

1241
00:46:03,070 --> 00:46:05,380
hatches I got you so I was doing some

1242
00:46:05,380 --> 00:46:07,330
searches on on github and I found

1243
00:46:07,330 --> 00:46:09,970
there's 18,000 results for find Dom node

1244
00:46:09,970 --> 00:46:12,340
in the open source world and look at the

1245
00:46:12,340 --> 00:46:14,530
first example in here they're going Rick

1246
00:46:14,530 --> 00:46:17,290
find it all no I feel pain just looking

1247
00:46:17,290 --> 00:46:19,120
at that that's really bad immediately

1248
00:46:19,120 --> 00:46:20,770
they're starting to concatenate you know

1249
00:46:20,770 --> 00:46:23,140
spam class I mean these are static

1250
00:46:23,140 --> 00:46:25,060
streams so they're not vulnerable but I

1251
00:46:25,060 --> 00:46:26,890
see as a code smell this makes me

1252
00:46:26,890 --> 00:46:27,400
nervous

1253
00:46:27,400 --> 00:46:29,350
you've got people grabbing directly the

1254
00:46:29,350 --> 00:46:30,790
Dom and immediately looking for inner

1255
00:46:30,790 --> 00:46:31,970
HTML and

1256
00:46:31,970 --> 00:46:34,550
things into it this is potential to have

1257
00:46:34,550 --> 00:46:37,030
cross-site scripting vulnerabilities

1258
00:46:37,030 --> 00:46:39,859
it's also performance unfriendly from UI

1259
00:46:39,859 --> 00:46:41,359
performance you're way better doing

1260
00:46:41,359 --> 00:46:43,460
programmatic creation of components

1261
00:46:43,460 --> 00:46:45,530
rather than slamming markup into the Dom

1262
00:46:45,530 --> 00:46:47,420
it's like this is it's not just a I

1263
00:46:47,420 --> 00:46:49,700
think bad design but I also think it's

1264
00:46:49,700 --> 00:46:51,470
bad performance if you really care about

1265
00:46:51,470 --> 00:46:59,270
client-side performance yeah well this

1266
00:46:59,270 --> 00:47:01,490
one is this is the number of react

1267
00:47:01,490 --> 00:47:04,700
packages ecosystem packages and a number

1268
00:47:04,700 --> 00:47:06,980
of reported vulnerabilities so we got

1269
00:47:06,980 --> 00:47:10,730
the dark purple here do you think we're

1270
00:47:10,730 --> 00:47:12,380
staying on top of these these these

1271
00:47:12,380 --> 00:47:14,240
vulnerabilities or find them and report

1272
00:47:14,240 --> 00:47:17,300
them well you gotta zoom in you gotta

1273
00:47:17,300 --> 00:47:19,430
zoom in you see it if there's a there's

1274
00:47:19,430 --> 00:47:22,640
there is a line here it's almost like

1275
00:47:22,640 --> 00:47:24,700
it's almost the same colors Oliver's

1276
00:47:24,700 --> 00:47:28,940
jacket their sweater yeah so so we're

1277
00:47:28,940 --> 00:47:31,430
sealing vulnerabilities in the react

1278
00:47:31,430 --> 00:47:34,640
ecosystem are underreported right so we

1279
00:47:34,640 --> 00:47:37,580
could use help with this I found I found

1280
00:47:37,580 --> 00:47:39,410
some vulnerabilities myself like I

1281
00:47:39,410 --> 00:47:41,000
mentioned and they're not hard to find

1282
00:47:41,000 --> 00:47:42,530
they're relatively easy to find like

1283
00:47:42,530 --> 00:47:43,940
here's an example of one that I found

1284
00:47:43,940 --> 00:47:46,849
it's a react SVG library so it's gonna

1285
00:47:46,849 --> 00:47:48,680
take an SVG and it's gonna jam it

1286
00:47:48,680 --> 00:47:50,960
directly to the Dom for you and it says

1287
00:47:50,960 --> 00:47:53,750
that any SVG content that contains a

1288
00:47:53,750 --> 00:47:57,050
script is never going to be run that's

1289
00:47:57,050 --> 00:47:58,490
the contract you're in the documentation

1290
00:47:58,490 --> 00:48:00,950
it says you use this library you give me

1291
00:48:00,950 --> 00:48:03,320
an SVG that SVG since its X c'mon XML

1292
00:48:03,320 --> 00:48:05,330
can have a script tag I'm gonna jam that

1293
00:48:05,330 --> 00:48:07,369
into the DOM and I'm gonna probably use

1294
00:48:07,369 --> 00:48:08,839
dangerously set in our HTML but you're

1295
00:48:08,839 --> 00:48:10,730
good because those scripts are never

1296
00:48:10,730 --> 00:48:13,099
gonna execute and then I went looked at

1297
00:48:13,099 --> 00:48:15,440
the source code what is the source code

1298
00:48:15,440 --> 00:48:16,790
down here the bottom saying we're gonna

1299
00:48:16,790 --> 00:48:17,900
do Jim do you see anything about

1300
00:48:17,900 --> 00:48:19,369
evaluating of scripts there in a source

1301
00:48:19,369 --> 00:48:23,630
code it says eval scripts once I feel

1302
00:48:23,630 --> 00:48:25,089
like this is different than never right

1303
00:48:25,089 --> 00:48:28,099
like very very different like if it is

1304
00:48:28,099 --> 00:48:29,240
an important distinction

1305
00:48:29,240 --> 00:48:31,700
looks like Ron I would never ever do

1306
00:48:31,700 --> 00:48:32,300
that ever

1307
00:48:32,300 --> 00:48:39,020
well maybe just once but I really I

1308
00:48:39,020 --> 00:48:40,339
would never ever

1309
00:48:40,339 --> 00:48:42,650
shoot my crossbow in the house well I

1310
00:48:42,650 --> 00:48:44,509
just do it once a day I feel like that's

1311
00:48:44,509 --> 00:48:46,549
different right I would never ever hire

1312
00:48:46,549 --> 00:48:48,200
anybody else to work on an online

1313
00:48:48,200 --> 00:48:58,069
product for myself maybe just once okay

1314
00:48:58,069 --> 00:49:01,489
I now get the difference between never

1315
00:49:01,489 --> 00:49:04,309
and once I really get it now

1316
00:49:04,309 --> 00:49:06,229
sorry I made notes here and it's not

1317
00:49:06,229 --> 00:49:07,670
configured in a way it wasn't I wasn't

1318
00:49:07,670 --> 00:49:08,930
necessarily going to present slides

1319
00:49:08,930 --> 00:49:10,819
today cuz I I wasn't sure if this was

1320
00:49:10,819 --> 00:49:14,140
gonna be in a podcast format but here's

1321
00:49:14,140 --> 00:49:17,390
your this is a I know I know that but

1322
00:49:17,390 --> 00:49:20,569
okay so react mark markdown here's

1323
00:49:20,569 --> 00:49:21,920
another library this is a really common

1324
00:49:21,920 --> 00:49:23,450
attack circus in react do you want to

1325
00:49:23,450 --> 00:49:24,739
take some markdown and they want to

1326
00:49:24,739 --> 00:49:26,059
convert it and then you want to take the

1327
00:49:26,059 --> 00:49:28,400
output the HTML and put into the Dom but

1328
00:49:28,400 --> 00:49:29,599
one of the things that people don't know

1329
00:49:29,599 --> 00:49:31,489
about markdown is they think that

1330
00:49:31,489 --> 00:49:34,579
markdown is like not related to HTML but

1331
00:49:34,579 --> 00:49:36,769
it turns out that markdown is a superset

1332
00:49:36,769 --> 00:49:40,249
of HTML so all valid HTML is valid

1333
00:49:40,249 --> 00:49:42,499
markdown so if you pass markdown through

1334
00:49:42,499 --> 00:49:45,219
a parser it's gonna come out markdown

1335
00:49:45,219 --> 00:49:48,259
the new elements plus the old elements

1336
00:49:48,259 --> 00:49:49,969
that were passed in and so for this

1337
00:49:49,969 --> 00:49:52,369
reason every place that you go and take

1338
00:49:52,369 --> 00:49:53,930
markdown output and go and put it in the

1339
00:49:53,930 --> 00:49:55,549
Dom you have to do sanitization

1340
00:49:55,549 --> 00:49:58,219
and in this case markdown preview says

1341
00:49:58,219 --> 00:50:01,009
here at the top this is in their example

1342
00:50:01,009 --> 00:50:02,660
code it says that the sanitized option

1343
00:50:02,660 --> 00:50:05,329
is equal to true so we're all good from

1344
00:50:05,329 --> 00:50:06,319
that point of view they're gonna turn on

1345
00:50:06,319 --> 00:50:08,809
the sanitizer in the underlying markdown

1346
00:50:08,809 --> 00:50:10,999
library they're using a conversion but

1347
00:50:10,999 --> 00:50:12,380
then if we dig a little deeper into

1348
00:50:12,380 --> 00:50:13,759
their source code we find this weird

1349
00:50:13,759 --> 00:50:15,640
fragment at the bottom these four lines

1350
00:50:15,640 --> 00:50:18,950
and what this thing is doing is it's

1351
00:50:18,950 --> 00:50:21,559
creating a new renderer and then it's

1352
00:50:21,559 --> 00:50:24,170
doing some overriding of the renderers

1353
00:50:24,170 --> 00:50:26,509
functionality for when it encounters

1354
00:50:26,509 --> 00:50:29,089
links so anytime it encounters an anchor

1355
00:50:29,089 --> 00:50:31,369
tag during the conversion instead of

1356
00:50:31,369 --> 00:50:33,079
running it's a normal sanitization code

1357
00:50:33,079 --> 00:50:35,809
it's gonna do this stuff one of those

1358
00:50:35,809 --> 00:50:38,960
plus symbols when you I see plus symbols

1359
00:50:38,960 --> 00:50:39,829
they freak me out

1360
00:50:39,829 --> 00:50:42,349
are they string concatenation right this

1361
00:50:42,349 --> 00:50:43,849
is string concatenation right so we're

1362
00:50:43,849 --> 00:50:45,589
gonna be taking user input and doing a

1363
00:50:45,589 --> 00:50:47,569
little string concatenation well often

1364
00:50:47,569 --> 00:50:49,789
does that lien cross-site scripting like

1365
00:50:49,789 --> 00:50:51,469
every single time you know that means

1366
00:50:51,469 --> 00:50:53,540
like tripping

1367
00:50:53,540 --> 00:50:56,240
you Manuel escaping at this level this

1368
00:50:56,240 --> 00:50:58,010
is important on a bigger level a lot of

1369
00:50:58,010 --> 00:50:59,630
people have told me well don't do HTML

1370
00:50:59,630 --> 00:51:02,510
sanitization just use markdown and this

1371
00:51:02,510 --> 00:51:04,610
problem goes away and it does not there

1372
00:51:04,610 --> 00:51:07,040
are so many implementation flaws I can

1373
00:51:07,040 --> 00:51:08,870
still get certain kinds of script

1374
00:51:08,870 --> 00:51:11,000
attacks through markdown conversion so

1375
00:51:11,000 --> 00:51:14,210
markdown does not solve this problem of

1376
00:51:14,210 --> 00:51:17,540
how to let a user submit rich text to

1377
00:51:17,540 --> 00:51:19,460
some kind of application it's got tons

1378
00:51:19,460 --> 00:51:21,530
of problems like we're looking at right

1379
00:51:21,530 --> 00:51:23,390
here yeah so this one's just going to

1380
00:51:23,390 --> 00:51:25,070
take whatever href you gave it and

1381
00:51:25,070 --> 00:51:27,290
concatenate it in right in the middle of

1382
00:51:27,290 --> 00:51:29,480
this anchor tag it's building so as you

1383
00:51:29,480 --> 00:51:32,060
know if your href value is set equal to

1384
00:51:32,060 --> 00:51:35,090
I don't know a closing double quote and

1385
00:51:35,090 --> 00:51:37,580
then close this tag and then start a new

1386
00:51:37,580 --> 00:51:40,310
tag of any kind of tag you want that

1387
00:51:40,310 --> 00:51:41,870
will insert trips to the Dom look at the

1388
00:51:41,870 --> 00:51:44,240
image in tag with a on-air attribute or

1389
00:51:44,240 --> 00:51:45,980
whatever you've got cross-site scripting

1390
00:51:45,980 --> 00:51:50,000
here we could fix this if we again ran

1391
00:51:50,000 --> 00:51:52,190
the H ref variable through an attribute

1392
00:51:52,190 --> 00:51:53,840
escaping function which it does exist in

1393
00:51:53,840 --> 00:51:56,950
JavaScript and then run that through a

1394
00:51:56,950 --> 00:51:59,930
URL protocol parser which make sure it

1395
00:51:59,930 --> 00:52:02,510
was only a legal scheme like HTTP or HBS

1396
00:52:02,510 --> 00:52:05,930
we could lock this down but this is this

1397
00:52:05,930 --> 00:52:07,340
is dangerous code that I would not

1398
00:52:07,340 --> 00:52:09,800
expect to see in a markdown conversion

1399
00:52:09,800 --> 00:52:12,110
library at all in again these two bones

1400
00:52:12,110 --> 00:52:13,400
I actually found about six

1401
00:52:13,400 --> 00:52:14,660
vulnerabilities when I was doing the

1402
00:52:14,660 --> 00:52:16,340
research for you back in 2017 and I

1403
00:52:16,340 --> 00:52:18,470
reported them through various reporting

1404
00:52:18,470 --> 00:52:19,850
channels and these were the two that got

1405
00:52:19,850 --> 00:52:21,920
kind of remediated or at least

1406
00:52:21,920 --> 00:52:23,840
acknowledged by the maintainer x' the

1407
00:52:23,840 --> 00:52:25,640
other ones went into this weird voyeur

1408
00:52:25,640 --> 00:52:27,740
you're just kind of waiting for a reply

1409
00:52:27,740 --> 00:52:29,180
from the maintainer and you haven't

1410
00:52:29,180 --> 00:52:31,940
publicly disclosed in they kind of you

1411
00:52:31,940 --> 00:52:34,010
know so there's still in some in limbo

1412
00:52:34,010 --> 00:52:35,870
right and I found these vulnerabilities

1413
00:52:35,870 --> 00:52:38,420
you know in a couple of afternoons and I

1414
00:52:38,420 --> 00:52:39,650
think that if more people were looking

1415
00:52:39,650 --> 00:52:42,860
at these 65,000 modules we'd be able to

1416
00:52:42,860 --> 00:52:44,390
uncover a lot more vulnerabilities so I

1417
00:52:44,390 --> 00:52:45,950
hope that by showing these examples of

1418
00:52:45,950 --> 00:52:48,470
how simple these vulnerabilities are to

1419
00:52:48,470 --> 00:52:50,960
find that so folks that are obviously

1420
00:52:50,960 --> 00:52:52,160
better researchers than I am that's

1421
00:52:52,160 --> 00:52:53,600
actually not my you know exploit

1422
00:52:53,600 --> 00:52:55,520
research is not my background but if

1423
00:52:55,520 --> 00:52:57,830
your copybook yeah yeah there's really

1424
00:52:57,830 --> 00:52:59,420
really talented people to know how to do

1425
00:52:59,420 --> 00:53:01,210
this stuff and also they don't hack me

1426
00:53:01,210 --> 00:53:03,950
and I think that you know they could go

1427
00:53:03,950 --> 00:53:05,120
in look at these libraries and they can

1428
00:53:05,120 --> 00:53:06,180
dig it uncover probably

1429
00:53:06,180 --> 00:53:07,730
hundreds and hundreds of older abilities

1430
00:53:07,730 --> 00:53:10,770
and I there are some tools out there

1431
00:53:10,770 --> 00:53:12,810
they're trying to help us with this for

1432
00:53:12,810 --> 00:53:14,850
example I know that github recently

1433
00:53:14,850 --> 00:53:18,120
released a tool around their ecosystem

1434
00:53:18,120 --> 00:53:21,180
security module uses code QL it's based

1435
00:53:21,180 --> 00:53:24,090
on sembly they can do analysis of a

1436
00:53:24,090 --> 00:53:25,770
single project if you write a rule a

1437
00:53:25,770 --> 00:53:27,870
rule checker and it's code ql language

1438
00:53:27,870 --> 00:53:29,550
you could you can analyze a single

1439
00:53:29,550 --> 00:53:31,860
repository for a flaw and then you could

1440
00:53:31,860 --> 00:53:34,020
upload that code ql in some way to to

1441
00:53:34,020 --> 00:53:35,910
github and then they'll run it across

1442
00:53:35,910 --> 00:53:37,950
more code bases and moldboard bounties

1443
00:53:37,950 --> 00:53:39,060
so the idea is that you're not just

1444
00:53:39,060 --> 00:53:41,310
finding one offs you're finding patterns

1445
00:53:41,310 --> 00:53:42,900
and then you're writing something in a

1446
00:53:42,900 --> 00:53:45,090
pattern language like a linter or code

1447
00:53:45,090 --> 00:53:46,890
QL it's gonna catch things across the

1448
00:53:46,890 --> 00:53:49,710
entire ecosystem and these guys are to

1449
00:53:49,710 --> 00:53:51,870
see they're developing in a platform for

1450
00:53:51,870 --> 00:53:53,460
this as well I've worked with them a

1451
00:53:53,460 --> 00:53:55,710
little bit in the beta period for their

1452
00:53:55,710 --> 00:53:57,450
platform and this thing gives you the

1453
00:53:57,450 --> 00:54:00,030
ability to run analysis using rule sets

1454
00:54:00,030 --> 00:54:02,670
like es lint type rule sets across a

1455
00:54:02,670 --> 00:54:06,720
large group of NPM modules so the idea

1456
00:54:06,720 --> 00:54:08,100
being that you know you'll just find one

1457
00:54:08,100 --> 00:54:09,630
mole when you're looking for something

1458
00:54:09,630 --> 00:54:11,550
but you find class of phones and then

1459
00:54:11,550 --> 00:54:13,440
that runs across the ecosystem of

1460
00:54:13,440 --> 00:54:16,080
modules and uncovers you know all the

1461
00:54:16,080 --> 00:54:20,370
instances of that type I know that you

1462
00:54:20,370 --> 00:54:22,290
did some some early work on like static

1463
00:54:22,290 --> 00:54:24,000
code analysis engines Jim this is like

1464
00:54:24,000 --> 00:54:25,770
generally the idea right you you write a

1465
00:54:25,770 --> 00:54:28,440
check and then from there that that runs

1466
00:54:28,440 --> 00:54:30,150
across your whole codebase right you're

1467
00:54:30,150 --> 00:54:31,710
basically taking you're grabbing the

1468
00:54:31,710 --> 00:54:33,600
code converting it to some kind of

1469
00:54:33,600 --> 00:54:35,550
abstract syntax tree and then running

1470
00:54:35,550 --> 00:54:38,280
linters or rules throughout that tree to

1471
00:54:38,280 --> 00:54:41,280
discover it to discover obvious motor

1472
00:54:41,280 --> 00:54:42,480
ability problems usually you're not

1473
00:54:42,480 --> 00:54:44,040
doing it correctly against the source

1474
00:54:44,040 --> 00:54:46,320
but against like like some kind of

1475
00:54:46,320 --> 00:54:48,000
compiled version of it so it's a

1476
00:54:48,000 --> 00:54:50,550
standardized form but all the same stuff

1477
00:54:50,550 --> 00:54:52,710
and like the real work of static

1478
00:54:52,710 --> 00:54:55,380
analysis is not the conversion to some

1479
00:54:55,380 --> 00:54:57,780
to some format like an ast the real the

1480
00:54:57,780 --> 00:55:01,320
real work is building this huge library

1481
00:55:01,320 --> 00:55:03,510
of linters and rules to find these

1482
00:55:03,510 --> 00:55:06,020
problems and that requires very

1483
00:55:06,020 --> 00:55:08,340
specialized knowledge it's really hard

1484
00:55:08,340 --> 00:55:10,320
to get researchers to write rules of

1485
00:55:10,320 --> 00:55:12,270
this of this nature this is yeah I think

1486
00:55:12,270 --> 00:55:14,310
what a lot of these are absolute teams

1487
00:55:14,310 --> 00:55:15,570
that I know with reactives have been

1488
00:55:15,570 --> 00:55:17,730
doing is they can't find a static code

1489
00:55:17,730 --> 00:55:19,920
analysis tool that can fire up their

1490
00:55:19,920 --> 00:55:22,740
and do the flow analysis and the source

1491
00:55:22,740 --> 00:55:24,599
the sink and put the teens in and all

1492
00:55:24,599 --> 00:55:26,819
this complex stuff instead they're just

1493
00:55:26,819 --> 00:55:28,859
writing really simple linters and so

1494
00:55:28,859 --> 00:55:31,380
this is kind of like this is kind of the

1495
00:55:31,380 --> 00:55:34,200
bread and butter of dedsec ops or apps

1496
00:55:34,200 --> 00:55:36,569
like automation as Jim calls it or you

1497
00:55:36,569 --> 00:55:37,920
just call it automation right Jim that's

1498
00:55:37,920 --> 00:55:38,849
what we're talking about we're talking

1499
00:55:38,849 --> 00:55:41,579
like a CI CD right continues Henry

1500
00:55:41,579 --> 00:55:43,980
continues development is called I go

1501
00:55:43,980 --> 00:55:46,769
term automate Security checks is really

1502
00:55:46,769 --> 00:55:48,809
what developers actually understand the

1503
00:55:48,809 --> 00:55:50,640
most of my experience let's automate

1504
00:55:50,640 --> 00:55:52,740
those security checks so I think you

1505
00:55:52,740 --> 00:55:55,410
know whenever I tell a group to an

1506
00:55:55,410 --> 00:55:56,849
absent crew hey maybe you should be

1507
00:55:56,849 --> 00:55:58,650
linting for dangerously set innerhtml

1508
00:55:58,650 --> 00:56:01,319
usage of props or deserialization of

1509
00:56:01,319 --> 00:56:03,359
state they say like I can't block the

1510
00:56:03,359 --> 00:56:05,010
bill right I can't put the stuff into

1511
00:56:05,010 --> 00:56:06,269
our pipelines because it will block the

1512
00:56:06,269 --> 00:56:08,299
bill but the more sophisticated teams

1513
00:56:08,299 --> 00:56:10,260
they just send these results to

1514
00:56:10,260 --> 00:56:10,950
themselves

1515
00:56:10,950 --> 00:56:12,359
you don't necessary to block the build

1516
00:56:12,359 --> 00:56:14,069
and tell the developer about it if you

1517
00:56:14,069 --> 00:56:16,470
have a small app SEC team or even just a

1518
00:56:16,470 --> 00:56:18,089
security focused person on the

1519
00:56:18,089 --> 00:56:19,619
development team you can send these

1520
00:56:19,619 --> 00:56:20,849
alerts to them and they can kind of

1521
00:56:20,849 --> 00:56:23,190
triage handle them out of Pam so just

1522
00:56:23,190 --> 00:56:24,390
because these kind of checks

1523
00:56:24,390 --> 00:56:26,309
occasionally produce a false positive I

1524
00:56:26,309 --> 00:56:27,660
don't think that's a reason to just

1525
00:56:27,660 --> 00:56:29,490
completely discount using it winters I

1526
00:56:29,490 --> 00:56:31,200
mean ideally linters will will not

1527
00:56:31,200 --> 00:56:34,349
contain false positives but these are

1528
00:56:34,349 --> 00:56:36,839
super effective it's so simple to write

1529
00:56:36,839 --> 00:56:39,359
these it's it doesn't require the

1530
00:56:39,359 --> 00:56:41,309
complexity that we see instead of

1531
00:56:41,309 --> 00:56:43,589
Canales development it's something we

1532
00:56:43,589 --> 00:56:45,809
can build into the pipeline easily and

1533
00:56:45,809 --> 00:56:46,740
it's something that a lot of developers

1534
00:56:46,740 --> 00:56:48,750
are familiar with working on so even if

1535
00:56:48,750 --> 00:56:50,849
we're we can use them at the app SEC

1536
00:56:50,849 --> 00:56:53,369
level but we can creep these linters up

1537
00:56:53,369 --> 00:56:55,710
in developers ID in developers world I

1538
00:56:55,710 --> 00:56:58,109
think a lot more naturally than trying

1539
00:56:58,109 --> 00:56:59,609
to get them to use static analysis as

1540
00:56:59,609 --> 00:57:00,809
part of their daily build so this is

1541
00:57:00,809 --> 00:57:02,609
something very powerful in my opinion

1542
00:57:02,609 --> 00:57:03,809
and we're I know we're sort of getting

1543
00:57:03,809 --> 00:57:05,490
to the end of the hour here but I'll

1544
00:57:05,490 --> 00:57:07,500
link the I'll link some good winters and

1545
00:57:07,500 --> 00:57:09,420
the show notes that I use for react and

1546
00:57:09,420 --> 00:57:10,980
I would also like to mention like when

1547
00:57:10,980 --> 00:57:13,200
you're selecting react component

1548
00:57:13,200 --> 00:57:14,579
libraries there's some indicators like

1549
00:57:14,579 --> 00:57:17,789
low download count no readme lots of PRS

1550
00:57:17,789 --> 00:57:20,160
open lots of issues open in the repo and

1551
00:57:20,160 --> 00:57:23,970
I think gentleman at Steve wrote like

1552
00:57:23,970 --> 00:57:27,720
NPM module called NPQ Liron Hall wrote

1553
00:57:27,720 --> 00:57:29,549
this module and it actually quality

1554
00:57:29,549 --> 00:57:30,950
checks your mom

1555
00:57:30,950 --> 00:57:33,410
for you in an automated way so you could

1556
00:57:33,410 --> 00:57:35,900
basically type that command or alias and

1557
00:57:35,900 --> 00:57:37,700
PM to that command and when you do the

1558
00:57:37,700 --> 00:57:39,380
install you get a report back tells you

1559
00:57:39,380 --> 00:57:41,450
about the quality to module it'll

1560
00:57:41,450 --> 00:57:42,980
actually prompt you about whether or not

1561
00:57:42,980 --> 00:57:44,990
you want to install it so if you really

1562
00:57:44,990 --> 00:57:46,339
want your developers to be you know

1563
00:57:46,339 --> 00:57:47,660
taking a double consideration about

1564
00:57:47,660 --> 00:57:49,099
without to install a component from the

1565
00:57:49,099 --> 00:57:51,770
ecosystem possibly npq could be a

1566
00:57:51,770 --> 00:57:54,829
solution to that I think that you know

1567
00:57:54,829 --> 00:57:56,359
obviously you want to run things like

1568
00:57:56,359 --> 00:57:59,059
NPM audit we all run into gme install we

1569
00:57:59,059 --> 00:58:00,920
know that npm audit gives us findings

1570
00:58:00,920 --> 00:58:02,839
I know sneak has some similar tooling

1571
00:58:02,839 --> 00:58:04,549
around finding of vulnerabilities the

1572
00:58:04,549 --> 00:58:07,250
ecosystem but you know we really need

1573
00:58:07,250 --> 00:58:08,089
those well devotees they've been

1574
00:58:08,089 --> 00:58:10,640
reported in order for them to show up in

1575
00:58:10,640 --> 00:58:12,470
those scans so you can't you can't find

1576
00:58:12,470 --> 00:58:14,210
out about a vulnerability if no one's

1577
00:58:14,210 --> 00:58:15,740
reported it in this case you react you

1578
00:58:15,740 --> 00:58:17,329
only got five reported vulnerabilities

1579
00:58:17,329 --> 00:58:19,760
so the effectiveness of running you know

1580
00:58:19,760 --> 00:58:21,290
any audit tools gonna be kind of low

1581
00:58:21,290 --> 00:58:24,260
right if it's based on you know known

1582
00:58:24,260 --> 00:58:26,809
vulnerabilities we need the researchers

1583
00:58:26,809 --> 00:58:29,180
to do a lot more work of the JavaScript

1584
00:58:29,180 --> 00:58:31,880
ecosystem so our tooling is going to be

1585
00:58:31,880 --> 00:58:33,290
more effective basically is what you're

1586
00:58:33,290 --> 00:58:35,329
saying and I feel that way I mean I feel

1587
00:58:35,329 --> 00:58:36,920
like you know you can have a great tool

1588
00:58:36,920 --> 00:58:39,619
like NPM audit or sneaks audit tool but

1589
00:58:39,619 --> 00:58:41,210
if there's only five vulnerabilities in

1590
00:58:41,210 --> 00:58:43,160
the database or eight or ten or whatever

1591
00:58:43,160 --> 00:58:44,960
it is out of the sixty five thousand

1592
00:58:44,960 --> 00:58:47,180
yeah it's not gonna be that effective I

1593
00:58:47,180 --> 00:58:49,220
think the real solution run is that any

1594
00:58:49,220 --> 00:58:51,049
JavaScript developer who has a new

1595
00:58:51,049 --> 00:58:52,970
library to NPM should be banned from

1596
00:58:52,970 --> 00:58:55,670
development for at least a year no no

1597
00:58:55,670 --> 00:58:57,260
that's not that's not fair that says

1598
00:58:57,260 --> 00:58:59,059
they're mine just ignore that for a

1599
00:58:59,059 --> 00:59:00,950
moment and what I guess one final note

1600
00:59:00,950 --> 00:59:02,299
that something is happening the react

1601
00:59:02,299 --> 00:59:04,250
ecosystem is the next GS library is

1602
00:59:04,250 --> 00:59:06,200
becoming very popular I think that next

1603
00:59:06,200 --> 00:59:08,450
j/s it allows you to do server-side and

1604
00:59:08,450 --> 00:59:10,790
client-side rendering just like react

1605
00:59:10,790 --> 00:59:12,109
does but it promotes server-side

1606
00:59:12,109 --> 00:59:13,910
rendering and they've created some

1607
00:59:13,910 --> 00:59:15,410
lifecycle books that run server-side

1608
00:59:15,410 --> 00:59:17,059
which means that now your react

1609
00:59:17,059 --> 00:59:18,559
component libraries also contain

1610
00:59:18,559 --> 00:59:20,270
server-side culpability yeah we're

1611
00:59:20,270 --> 00:59:20,839
starting to see

1612
00:59:20,839 --> 00:59:22,460
react components that do like direct

1613
00:59:22,460 --> 00:59:25,220
direct SQL access on the server side or

1614
00:59:25,220 --> 00:59:28,369
do command line calls so if you're

1615
00:59:28,369 --> 00:59:29,809
currently you know give it some lenders

1616
00:59:29,809 --> 00:59:31,040
in place you're doing some security

1617
00:59:31,040 --> 00:59:33,349
automation for react and you are

1618
00:59:33,349 --> 00:59:34,130
thinking about client-side

1619
00:59:34,130 --> 00:59:35,630
vulnerabilities which historically in

1620
00:59:35,630 --> 00:59:37,280
the problem with react components it

1621
00:59:37,280 --> 00:59:39,049
might be worth taking a look and seeing

1622
00:59:39,049 --> 00:59:42,290
if you also are horrible to some server

1623
00:59:42,290 --> 00:59:44,120
side well they're companies

1624
00:59:44,120 --> 00:59:47,300
comes your react opponents that's I

1625
00:59:47,300 --> 00:59:48,500
think those are the thoughts I had to

1626
00:59:48,500 --> 00:59:50,360
share today I know it didn't close to

1627
00:59:50,360 --> 00:59:53,080
time here do you have anything else guys

1628
00:59:53,080 --> 00:59:54,920
Ron I'm really impressed with your

1629
00:59:54,920 --> 00:59:56,360
research you really are one of the the

1630
00:59:56,360 --> 00:59:58,190
deepest react security thinkers I know

1631
00:59:58,190 --> 01:00:01,330
of period and keep up the great work and

1632
01:00:01,330 --> 01:00:03,410
I'm just really grateful that you took

1633
01:00:03,410 --> 01:00:05,810
time to do this do this not a podcast or

1634
01:00:05,810 --> 01:00:07,700
a webinar but a virtual session with us

1635
01:00:07,700 --> 01:00:10,070
you're awesome Ron thank you so much no

1636
01:00:10,070 --> 01:00:11,540
thank you Jim and thanks Oliver for

1637
01:00:11,540 --> 01:00:12,950
hosting us and Sam I know she's around

1638
01:00:12,950 --> 01:00:14,810
the corner so thank you very much for

1639
01:00:14,810 --> 01:00:17,480
doing this thank you so much guys again

1640
01:00:17,480 --> 01:00:19,400
a great and it's very entertaining

1641
01:00:19,400 --> 01:00:21,350
session Jim I hope you don't get in too

1642
01:00:21,350 --> 01:00:25,010
much trouble he knows of a good

1643
01:00:25,010 --> 01:00:27,260
contractor in the northern Northern

1644
01:00:27,260 --> 01:00:29,920
Virginia area please contact me at Jim

1645
01:00:29,920 --> 01:00:31,850
Atlanta co.com

1646
01:00:31,850 --> 01:00:34,220
looking for a contractor who can fix a

1647
01:00:34,220 --> 01:00:37,160
little hole in the wall I know it can be

1648
01:00:37,160 --> 01:00:39,980
done so you know the same contractor let

1649
01:00:39,980 --> 01:00:41,900
me know please again yeah feel free to

1650
01:00:41,900 --> 01:00:44,450
drop any recommendations in the flight

1651
01:00:44,450 --> 01:00:45,590
channels and we'll pass them along so

1652
01:00:45,590 --> 01:00:49,430
Jim so thanks everyone who's joined us

1653
01:00:49,430 --> 01:00:51,110
live today and again if you're listening

1654
01:00:51,110 --> 01:00:52,850
to the recording as well thanks for

1655
01:00:52,850 --> 01:00:55,340
listening along and the next session

1656
01:00:55,340 --> 01:00:57,650
that we have is in two weeks time same

1657
01:00:57,650 --> 01:01:00,530
time as this session and it will be with

1658
01:01:00,530 --> 01:01:01,610
developer advocate

1659
01:01:01,610 --> 01:01:03,290
Sam Balan from author who's going to be

1660
01:01:03,290 --> 01:01:05,540
talking about authenticating single page

1661
01:01:05,540 --> 01:01:08,000
apps using JSON web tokens so hold on

1662
01:01:08,000 --> 01:01:09,500
there will be a another very

1663
01:01:09,500 --> 01:01:11,690
entertaining session and the recording

1664
01:01:11,690 --> 01:01:14,180
will be up on my deaf Cyclops that IO

1665
01:01:14,180 --> 01:01:17,090
very shortly and once again if anyone

1666
01:01:17,090 --> 01:01:18,530
has any questions after this session

1667
01:01:18,530 --> 01:01:20,540
please feel free to drop them into slack

1668
01:01:20,540 --> 01:01:23,000
both Jim and Ron are in there you can

1669
01:01:23,000 --> 01:01:24,380
feel free to tag them or we can pass

1670
01:01:24,380 --> 01:01:27,080
them along to you and with that we're

1671
01:01:27,080 --> 01:01:28,580
going to say thanks everyone for

1672
01:01:28,580 --> 01:01:30,140
attending the sessions day and we hope

1673
01:01:30,140 --> 01:01:31,730
you all have a good rest of the day

1674
01:01:31,730 --> 01:01:32,720
wherever you might be

1675
01:01:32,720 --> 01:01:34,580
Thank You Marie I will see you again

1676
01:01:34,580 --> 01:01:38,140
soon thanks guys

