1
00:00:02,560 --> 00:00:05,680
hello I think we're live

2
00:00:05,680 --> 00:00:09,440
welcome to this week's the secure

3
00:00:09,440 --> 00:00:12,380
developer I'm really happy to have

4
00:00:12,380 --> 00:00:14,990
people joining us I'm excited for this

5
00:00:14,990 --> 00:00:17,990
event again we're the secure developer

6
00:00:17,990 --> 00:00:20,810
it's an inclusive communicate community

7
00:00:20,810 --> 00:00:23,240
that educates and enables developers in

8
00:00:23,240 --> 00:00:26,449
application security coming up we're

9
00:00:26,449 --> 00:00:28,070
gonna be joined by shreya r-rahmani

10
00:00:28,070 --> 00:00:32,598
talking about using s s octopus but

11
00:00:32,598 --> 00:00:38,270
before I dive into that I wanted to take

12
00:00:38,270 --> 00:00:40,550
a quick second to introduce myself my

13
00:00:40,550 --> 00:00:42,410
name is Hayley dumb braver and I'm

14
00:00:42,410 --> 00:00:44,989
subbing in for Sam this week I also work

15
00:00:44,989 --> 00:00:47,030
at sneaked on their developer relations

16
00:00:47,030 --> 00:00:50,629
team as a developer advocate I'm running

17
00:00:50,629 --> 00:00:52,250
the session today from my home in San

18
00:00:52,250 --> 00:00:54,230
Diego California and our guest today is

19
00:00:54,230 --> 00:00:57,320
also a Southern Californian we're trying

20
00:00:57,320 --> 00:00:59,690
to improve this community so we value

21
00:00:59,690 --> 00:01:01,969
your feedback you can find us on twitter

22
00:01:01,969 --> 00:01:05,720
at the secure dev all lowercase one word

23
00:01:05,720 --> 00:01:08,990
or on our slack groovy the slot group is

24
00:01:08,990 --> 00:01:11,450
also where you can interact with our

25
00:01:11,450 --> 00:01:13,580
speakers and fellow community members if

26
00:01:13,580 --> 00:01:15,560
you haven't already signed up you can

27
00:01:15,560 --> 00:01:17,810
find the link on our website the secure

28
00:01:17,810 --> 00:01:20,960
developer comm and by joining the live

29
00:01:20,960 --> 00:01:22,700
sessions channel we'll be able to

30
00:01:22,700 --> 00:01:24,680
facilitate your questions to shreya

31
00:01:24,680 --> 00:01:27,320
during the session once the session is

32
00:01:27,320 --> 00:01:30,380
over you'll be able to rewatch it on our

33
00:01:30,380 --> 00:01:32,810
website share with friends colleagues or

34
00:01:32,810 --> 00:01:35,750
hopefully both the secure developer is

35
00:01:35,750 --> 00:01:38,030
brought to you by snake but our aim is

36
00:01:38,030 --> 00:01:40,100
really to create a vendor neutral space

37
00:01:40,100 --> 00:01:42,650
to share knowledge and best practices

38
00:01:42,650 --> 00:01:46,149
related to software security all right

39
00:01:46,149 --> 00:01:49,490
well I think that's enough for me

40
00:01:49,490 --> 00:01:52,189
and I'm going to turn it over to shreya

41
00:01:52,189 --> 00:01:55,070
welcome to the secure developer thanks

42
00:01:55,070 --> 00:01:59,420
excited excited to be on this ok I'm

43
00:01:59,420 --> 00:02:03,140
gonna get started so I'm gonna go

44
00:02:03,140 --> 00:02:06,020
through what I think could be considered

45
00:02:06,020 --> 00:02:07,670
a common growth pattern for

46
00:02:07,670 --> 00:02:10,459
organizations so the year is 2010 and

47
00:02:10,459 --> 00:02:13,700
this is pack feed pack feed is a new

48
00:02:13,700 --> 00:02:14,360
week

49
00:02:14,360 --> 00:02:18,300
independent digital media company pack

50
00:02:18,300 --> 00:02:20,370
feed is most known for its articles

51
00:02:20,370 --> 00:02:22,800
usually in the form of informative lists

52
00:02:22,800 --> 00:02:26,100
like 21 ways to lose a ghost and the

53
00:02:26,100 --> 00:02:28,170
technical team can be small and lean

54
00:02:28,170 --> 00:02:30,390
with just this one business initiative

55
00:02:30,390 --> 00:02:32,250
all of the source code for the website

56
00:02:32,250 --> 00:02:34,310
is stored in a monolithic repository a

57
00:02:34,310 --> 00:02:37,710
couple years later PAC feed grows to

58
00:02:37,710 --> 00:02:40,530
support other types of media content

59
00:02:40,530 --> 00:02:43,140
it's now known for producing its viral

60
00:02:43,140 --> 00:02:47,100
videos a lot of them about cats with its

61
00:02:47,100 --> 00:02:49,140
growth in two different types of content

62
00:02:49,140 --> 00:02:51,240
PAC feeds technical team has tripled in

63
00:02:51,240 --> 00:02:53,250
size over the year to be able to support

64
00:02:53,250 --> 00:02:55,650
the content team adding more business

65
00:02:55,650 --> 00:02:57,840
logic to pack food has become cumbersome

66
00:02:57,840 --> 00:03:00,840
as growth continues deploying any change

67
00:03:00,840 --> 00:03:02,520
big or small requires so much

68
00:03:02,520 --> 00:03:04,560
coordination between developers it could

69
00:03:04,560 --> 00:03:06,030
be comparable to anarchy

70
00:03:06,030 --> 00:03:09,090
so something needs to change so they

71
00:03:09,090 --> 00:03:12,750
turn to micro services and pack for you

72
00:03:12,750 --> 00:03:14,160
to split out into multiple micro

73
00:03:14,160 --> 00:03:15,960
services that make up the different

74
00:03:15,960 --> 00:03:17,370
parts of the system and interact with

75
00:03:17,370 --> 00:03:20,880
each other in a variety of ways

76
00:03:20,880 --> 00:03:23,130
so then PAC feed grows to support even

77
00:03:23,130 --> 00:03:25,140
more types of media content they are now

78
00:03:25,140 --> 00:03:26,370
known for their award-winning

79
00:03:26,370 --> 00:03:29,010
investigative journalism team and their

80
00:03:29,010 --> 00:03:31,140
brands like tasty which are videos to

81
00:03:31,140 --> 00:03:34,530
make cooking more accessible with this

82
00:03:34,530 --> 00:03:37,260
media expansion pack feeds technical

83
00:03:37,260 --> 00:03:40,110
team grows its responsibility is to make

84
00:03:40,110 --> 00:03:42,360
sure this content is accessible and

85
00:03:42,360 --> 00:03:44,670
discoverable across a wide variety of

86
00:03:44,670 --> 00:03:47,400
platforms from PAC book to PAC tube to

87
00:03:47,400 --> 00:03:50,250
its own pack for you platform with the

88
00:03:50,250 --> 00:03:52,170
move to a micro servers architecture

89
00:03:52,170 --> 00:03:53,940
it's easier to build these services

90
00:03:53,940 --> 00:03:56,519
which is great and then there becomes a

91
00:03:56,519 --> 00:03:58,620
necessity to create internal tools for

92
00:03:58,620 --> 00:04:00,600
employees and tech and other parts of

93
00:04:00,600 --> 00:04:02,280
the business organization to aid their

94
00:04:02,280 --> 00:04:04,620
workflows and with the creation of

95
00:04:04,620 --> 00:04:08,120
internal tools introduces a new question

96
00:04:08,120 --> 00:04:11,010
how do we secure our services so that

97
00:04:11,010 --> 00:04:13,140
only employees who are authorized to

98
00:04:13,140 --> 00:04:15,360
access these tools can access them and

99
00:04:15,360 --> 00:04:16,918
today that's what I'd like to talk to

100
00:04:16,918 --> 00:04:20,100
you about so hi my name is shreya and I

101
00:04:20,100 --> 00:04:22,470
work at BuzzFeed which might have a few

102
00:04:22,470 --> 00:04:24,510
similarities the problems that PAC feed

103
00:04:24,510 --> 00:04:27,960
had I work on the infrastructure team

104
00:04:27,960 --> 00:04:30,300
specifically on developer tooling to

105
00:04:30,300 --> 00:04:31,950
make it easy for developers to build

106
00:04:31,950 --> 00:04:34,620
secure scalable services and one tool

107
00:04:34,620 --> 00:04:36,390
that I worked on is something that we

108
00:04:36,390 --> 00:04:38,760
use to solve the problem of securing

109
00:04:38,760 --> 00:04:43,140
internal services so I'm gonna start

110
00:04:43,140 --> 00:04:44,580
with some background on our

111
00:04:44,580 --> 00:04:47,220
infrastructure and the evolution of off

112
00:04:47,220 --> 00:04:49,080
at BuzzFeed I'll go through the

113
00:04:49,080 --> 00:04:50,490
different types of off that we

114
00:04:50,490 --> 00:04:52,380
considered and what we initially went

115
00:04:52,380 --> 00:04:54,030
with before we started to feel some

116
00:04:54,030 --> 00:04:55,229
scaling problems

117
00:04:55,229 --> 00:04:57,660
this evolution ultimately led us to

118
00:04:57,660 --> 00:05:00,260
build our own solution the SS octopus

119
00:05:00,260 --> 00:05:02,850
and I'm going to go through the

120
00:05:02,850 --> 00:05:04,680
different parts of SSO and what that

121
00:05:04,680 --> 00:05:07,110
user experience looks like SSO was

122
00:05:07,110 --> 00:05:09,180
recently open source so finally I'd also

123
00:05:09,180 --> 00:05:11,430
like to talk about why and how we ended

124
00:05:11,430 --> 00:05:13,110
up going through that open source and

125
00:05:13,110 --> 00:05:14,789
I'm gonna touch a little bit on how we

126
00:05:14,789 --> 00:05:16,620
approached maintaining this open source

127
00:05:16,620 --> 00:05:20,610
project so let's start with how we

128
00:05:20,610 --> 00:05:22,770
historically approached at BuzzFeed and

129
00:05:22,770 --> 00:05:25,229
the auth infrastructure problems we

130
00:05:25,229 --> 00:05:27,599
faced as we continued to grow into the

131
00:05:27,599 --> 00:05:31,710
organization we are today suppose we'd

132
00:05:31,710 --> 00:05:33,419
reached a point where it was apparent

133
00:05:33,419 --> 00:05:34,740
that it would need to be able to build

134
00:05:34,740 --> 00:05:36,870
fast to be able to support its business

135
00:05:36,870 --> 00:05:39,419
growth in order to do so we invested

136
00:05:39,419 --> 00:05:40,740
time and building scalable

137
00:05:40,740 --> 00:05:43,410
infrastructure the first big improvement

138
00:05:43,410 --> 00:05:44,729
to our infrastructure was the

139
00:05:44,729 --> 00:05:47,130
introduction of a homegrown tool to

140
00:05:47,130 --> 00:05:49,320
standardize the way we deploy and test

141
00:05:49,320 --> 00:05:50,669
our services called

142
00:05:50,669 --> 00:05:54,479
rig and this is what rig looks like rig

143
00:05:54,479 --> 00:05:56,340
is a platform our engineer is used to

144
00:05:56,340 --> 00:05:58,950
create an opinionated we're closed for

145
00:05:58,950 --> 00:06:01,169
creating deploying and testing services

146
00:06:01,169 --> 00:06:04,590
it leverages containerization and is

147
00:06:04,590 --> 00:06:07,800
built on docker and Amazon ECS so user

148
00:06:07,800 --> 00:06:09,960
can push a change to the source code to

149
00:06:09,960 --> 00:06:12,539
the mono repo on github and then a

150
00:06:12,539 --> 00:06:14,760
docker image is built and stored in

151
00:06:14,760 --> 00:06:17,610
Amazon ECS and then the service with the

152
00:06:17,610 --> 00:06:19,169
built image can be deployed from a

153
00:06:19,169 --> 00:06:21,630
separate UI that we call deploy UI on

154
00:06:21,630 --> 00:06:23,870
stage in production environments and

155
00:06:23,870 --> 00:06:26,820
having rig made creating new

156
00:06:26,820 --> 00:06:29,370
applications easy and allows developers

157
00:06:29,370 --> 00:06:31,020
to be able to focus more of their

158
00:06:31,020 --> 00:06:34,460
efforts on actually developing software

159
00:06:34,460 --> 00:06:37,169
so reg was developed with some goals in

160
00:06:37,169 --> 00:06:38,699
mind and these same goals have

161
00:06:38,699 --> 00:06:40,289
influenced the way that we

162
00:06:40,289 --> 00:06:42,180
a lot of our infrastructure and

163
00:06:42,180 --> 00:06:44,939
developer tools we want the tools we

164
00:06:44,939 --> 00:06:47,129
create to provide consistency across the

165
00:06:47,129 --> 00:06:48,990
org having consistency on our

166
00:06:48,990 --> 00:06:51,059
infrastructure allows for unified

167
00:06:51,059 --> 00:06:52,830
developer workflows that we can document

168
00:06:52,830 --> 00:06:54,689
and make it easy to onboard new

169
00:06:54,689 --> 00:06:56,969
developers and make it easy for mobility

170
00:06:56,969 --> 00:07:00,059
across teams from an operational

171
00:07:00,059 --> 00:07:02,460
standpoint we want our infrastructure

172
00:07:02,460 --> 00:07:04,469
engineers to have a simple experience

173
00:07:04,469 --> 00:07:06,629
automating as much of this workflow as

174
00:07:06,629 --> 00:07:09,240
possible and from a security standpoint

175
00:07:09,240 --> 00:07:10,830
we want access control to our

176
00:07:10,830 --> 00:07:12,779
infrastructure to be as granular as

177
00:07:12,779 --> 00:07:14,999
possible so that only those who need

178
00:07:14,999 --> 00:07:18,119
access have access and lastly we want

179
00:07:18,119 --> 00:07:20,309
the experience for developers using

180
00:07:20,309 --> 00:07:22,199
these tools to be as pleasant as

181
00:07:22,199 --> 00:07:25,349
possible so going through our goals with

182
00:07:25,349 --> 00:07:28,289
rig we get consistency in our deployment

183
00:07:28,289 --> 00:07:30,930
workflow across all services managing

184
00:07:30,930 --> 00:07:32,399
and operating this infrastructure is

185
00:07:32,399 --> 00:07:34,139
much easier because it's automated

186
00:07:34,139 --> 00:07:36,629
we have granular access control with

187
00:07:36,629 --> 00:07:38,309
different keyrings for your provisions

188
00:07:38,309 --> 00:07:40,680
on deploying services and developers are

189
00:07:40,680 --> 00:07:42,180
happier because they can deploy their

190
00:07:42,180 --> 00:07:44,219
code themselves get built and tested

191
00:07:44,219 --> 00:07:47,129
results faster and be overall more

192
00:07:47,129 --> 00:07:51,059
productive developers and with rig we

193
00:07:51,059 --> 00:07:53,039
were able to build even faster and this

194
00:07:53,039 --> 00:07:55,110
is a bit of a breakdown of the current

195
00:07:55,110 --> 00:07:57,569
state of our tech ecosystem we have

196
00:07:57,569 --> 00:08:00,269
around 600 micro services that can be

197
00:08:00,269 --> 00:08:03,059
broken down into around 250 UI services

198
00:08:03,059 --> 00:08:06,479
150 API services and 150 key reader

199
00:08:06,479 --> 00:08:10,559
services so let's focus on these 250 UI

200
00:08:10,559 --> 00:08:13,379
services these are front-end internal

201
00:08:13,379 --> 00:08:15,749
tools like a UI for deploying services

202
00:08:15,749 --> 00:08:18,269
or a tool for video producers to be able

203
00:08:18,269 --> 00:08:20,879
to upload and edit their videos and this

204
00:08:20,879 --> 00:08:23,969
means they need to be secured which

205
00:08:23,969 --> 00:08:25,379
brings us back to this question how do

206
00:08:25,379 --> 00:08:26,209
we do that

207
00:08:26,209 --> 00:08:28,830
we've considered a few auth options

208
00:08:28,830 --> 00:08:30,599
against our infrastructure goals with

209
00:08:30,599 --> 00:08:33,299
the ideal solution being something that

210
00:08:33,299 --> 00:08:36,568
checked all the boxes the first option

211
00:08:36,568 --> 00:08:38,370
that seemed like a reasonable choice as

212
00:08:38,370 --> 00:08:40,948
a VPN many organizations have their

213
00:08:40,948 --> 00:08:43,169
employees connect to a VPN to be able to

214
00:08:43,169 --> 00:08:45,149
access whatever services they need to

215
00:08:45,149 --> 00:08:48,269
within the private network but in terms

216
00:08:48,269 --> 00:08:50,519
of infrastructure goals a VPN didn't

217
00:08:50,519 --> 00:08:52,700
seem like the best option

218
00:08:52,700 --> 00:08:54,530
it may provide consistency in our

219
00:08:54,530 --> 00:08:57,350
infrastructure but I also I'm sure many

220
00:08:57,350 --> 00:08:59,030
of us know how annoying it is to have to

221
00:08:59,030 --> 00:09:00,680
connect to a VPN when we're not in the

222
00:09:00,680 --> 00:09:02,750
private network let alone have to set up

223
00:09:02,750 --> 00:09:03,980
and maintain and monitor the

224
00:09:03,980 --> 00:09:06,710
infrastructure for one we'd also still

225
00:09:06,710 --> 00:09:08,660
need to have an additional solution to a

226
00:09:08,660 --> 00:09:11,360
granular access control as a VPN would

227
00:09:11,360 --> 00:09:14,350
not give that test on its own

228
00:09:14,350 --> 00:09:17,540
another option was to punt on coming up

229
00:09:17,540 --> 00:09:19,490
with a unified way to secure our

230
00:09:19,490 --> 00:09:21,710
services and allow service owners to

231
00:09:21,710 --> 00:09:23,180
bake that into their applications

232
00:09:23,180 --> 00:09:25,550
however they might see fit but this

233
00:09:25,550 --> 00:09:27,050
inconsistency was something that we did

234
00:09:27,050 --> 00:09:29,690
not want instead of solving the problem

235
00:09:29,690 --> 00:09:31,790
with one solution managed by one team

236
00:09:31,790 --> 00:09:34,250
every developer would need to learn how

237
00:09:34,250 --> 00:09:36,140
to solve authentication which is

238
00:09:36,140 --> 00:09:37,400
something that's hard to get right and

239
00:09:37,400 --> 00:09:39,500
this would inhibit developers from being

240
00:09:39,500 --> 00:09:41,750
able to focus on building applications

241
00:09:41,750 --> 00:09:44,110
to serve the business needs

242
00:09:44,110 --> 00:09:46,070
operationally from a security

243
00:09:46,070 --> 00:09:48,080
observability perspective we would have

244
00:09:48,080 --> 00:09:50,840
no insight into how secure our services

245
00:09:50,840 --> 00:09:53,450
were and there could be granular access

246
00:09:53,450 --> 00:09:54,710
control but it would be up to the

247
00:09:54,710 --> 00:09:57,160
service owners and this would make

248
00:09:57,160 --> 00:09:59,060
authentication a frustrating

249
00:09:59,060 --> 00:10:01,580
roadblock for developers definitely not

250
00:10:01,580 --> 00:10:05,420
happy and so our last option we

251
00:10:05,420 --> 00:10:07,010
considered was something called an

252
00:10:07,010 --> 00:10:09,620
identity or where proxy and this comes

253
00:10:09,620 --> 00:10:11,870
from Google's beyond Corp philosophy

254
00:10:11,870 --> 00:10:14,120
based on the principles of zero trust

255
00:10:14,120 --> 00:10:16,730
networks what are all these things you

256
00:10:16,730 --> 00:10:20,420
may ask well let's go back almost a

257
00:10:20,420 --> 00:10:23,600
decade ago to early 2010 where sneaky

258
00:10:23,600 --> 00:10:25,460
panda the elder would gang and the

259
00:10:25,460 --> 00:10:27,500
Beijing group are suspects in a series

260
00:10:27,500 --> 00:10:30,640
of cyber attacks dubbed Operation Arora

261
00:10:30,640 --> 00:10:33,260
these attacks compromised the networks

262
00:10:33,260 --> 00:10:36,200
of 30 companies including Yahoo Adobe

263
00:10:36,200 --> 00:10:38,600
Morgan Stanley and Google to steal their

264
00:10:38,600 --> 00:10:41,090
data Google was actually the only

265
00:10:41,090 --> 00:10:43,250
company to disclose this breach in a

266
00:10:43,250 --> 00:10:44,930
blog post that was written that was

267
00:10:44,930 --> 00:10:48,590
released in January of 2010 as an

268
00:10:48,590 --> 00:10:50,270
interesting aside to this they mentioned

269
00:10:50,270 --> 00:10:52,190
in their blog post that they had

270
00:10:52,190 --> 00:10:54,380
evidence to suggest that the attack was

271
00:10:54,380 --> 00:10:56,390
to access the gmail accounts of Chinese

272
00:10:56,390 --> 00:10:58,820
activists and this is what led them to

273
00:10:58,820 --> 00:11:01,220
cease their operations in China and why

274
00:11:01,220 --> 00:11:03,920
is this all relevant you may ask well

275
00:11:03,920 --> 00:11:06,800
this was this event was the impetus

276
00:11:06,800 --> 00:11:09,440
for an industry-wide shift on our

277
00:11:09,440 --> 00:11:12,380
approach to security moving from a model

278
00:11:12,380 --> 00:11:14,899
of relying purely on a very secure

279
00:11:14,899 --> 00:11:17,360
perimeter to a more distributed and

280
00:11:17,360 --> 00:11:19,760
granular form of security and it was

281
00:11:19,760 --> 00:11:21,769
during this time that the philosophy of

282
00:11:21,769 --> 00:11:25,220
zero trust networks came to be so

283
00:11:25,220 --> 00:11:27,230
basically if sneaky panda were able to

284
00:11:27,230 --> 00:11:28,670
figure out a way to get past the

285
00:11:28,670 --> 00:11:31,310
perimeter in this network either because

286
00:11:31,310 --> 00:11:34,970
of an unreliable VPN provider stealing

287
00:11:34,970 --> 00:11:36,800
pac-man's credentials or a poor

288
00:11:36,800 --> 00:11:38,570
encryption algorithm on a security

289
00:11:38,570 --> 00:11:41,870
protocol the whole network would be

290
00:11:41,870 --> 00:11:43,459
vulnerable to attack

291
00:11:43,459 --> 00:11:46,490
once sneaky panda was able to get past

292
00:11:46,490 --> 00:11:50,120
the perimeter base security and this is

293
00:11:50,120 --> 00:11:52,220
what zero trust networks aimed to

294
00:11:52,220 --> 00:11:55,870
prevent based on three tenets

295
00:11:55,870 --> 00:11:59,120
so first network locality is not

296
00:11:59,120 --> 00:12:01,070
sufficient for deciding trust in a

297
00:12:01,070 --> 00:12:03,410
network we should assume that the

298
00:12:03,410 --> 00:12:06,440
network is hostile and that external

299
00:12:06,440 --> 00:12:08,600
internal threats exist on the network at

300
00:12:08,600 --> 00:12:10,250
all times

301
00:12:10,250 --> 00:12:13,459
second every device user a network flow

302
00:12:13,459 --> 00:12:15,589
should be authenticated and authorized

303
00:12:15,589 --> 00:12:18,250
meaning granular access control and

304
00:12:18,250 --> 00:12:21,320
lastly policies must be dynamic and

305
00:12:21,320 --> 00:12:23,209
calculated from as many sources as

306
00:12:23,209 --> 00:12:26,089
possible so having good monitoring and

307
00:12:26,089 --> 00:12:29,170
flexibility in the system is important

308
00:12:29,170 --> 00:12:32,149
so using this philosophy Google created

309
00:12:32,149 --> 00:12:34,279
there beyond court philosophy which is

310
00:12:34,279 --> 00:12:35,930
defined in a white paper that was

311
00:12:35,930 --> 00:12:37,940
written in December of 2014

312
00:12:37,940 --> 00:12:40,160
and from this white paper came the

313
00:12:40,160 --> 00:12:42,500
concept of an identity aware proxy which

314
00:12:42,500 --> 00:12:44,839
is considered a building block towards a

315
00:12:44,839 --> 00:12:48,079
beyond core architecture model and so

316
00:12:48,079 --> 00:12:49,880
the purpose of ended idea where proxy is

317
00:12:49,880 --> 00:12:51,560
to shift authentication and access

318
00:12:51,560 --> 00:12:53,890
control to be something that's based on

319
00:12:53,890 --> 00:12:56,570
use a user's identity rather than what

320
00:12:56,570 --> 00:12:59,209
network the user is in and doing this by

321
00:12:59,209 --> 00:13:01,190
having a proxy service that sits between

322
00:13:01,190 --> 00:13:04,130
the user and the upstream it then uses a

323
00:13:04,130 --> 00:13:06,980
third-party provider like Google to

324
00:13:06,980 --> 00:13:08,630
authenticate and authorize the user

325
00:13:08,630 --> 00:13:12,079
trying to log into the service and so

326
00:13:12,079 --> 00:13:14,000
with this kind of model of sneaky panda

327
00:13:14,000 --> 00:13:16,820
gets into the network they still can't

328
00:13:16,820 --> 00:13:18,890
get access to any service within the

329
00:13:18,890 --> 00:13:19,610
network

330
00:13:19,610 --> 00:13:22,220
secured by the identity aware proxy

331
00:13:22,220 --> 00:13:24,070
without having the users credentials

332
00:13:24,070 --> 00:13:27,140
with granular access control if sneaky

333
00:13:27,140 --> 00:13:29,930
panda gets pac-man's credentials and MFA

334
00:13:29,930 --> 00:13:33,590
then only the services that pac-man has

335
00:13:33,590 --> 00:13:36,020
access to would be vulnerable critical

336
00:13:36,020 --> 00:13:38,410
services would hopefully be protected as

337
00:13:38,410 --> 00:13:40,880
admin only access and then would be

338
00:13:40,880 --> 00:13:44,480
inaccessible to sneaky panda and so this

339
00:13:44,480 --> 00:13:46,460
was everything we wanted consistent easy

340
00:13:46,460 --> 00:13:49,190
to maintain granular access control low

341
00:13:49,190 --> 00:13:51,680
developer setup overhead we just needed

342
00:13:51,680 --> 00:13:53,960
to figure out what implementation of an

343
00:13:53,960 --> 00:13:56,240
it anywhere proxy we wanted to use so

344
00:13:56,240 --> 00:13:58,580
like any good developers we look to open

345
00:13:58,580 --> 00:14:01,760
source and the implementation we looked

346
00:14:01,760 --> 00:14:03,920
at came in the form of a go binary from

347
00:14:03,920 --> 00:14:07,160
bitly called OAuth to proxy so each

348
00:14:07,160 --> 00:14:09,470
service would have an auth proxy that

349
00:14:09,470 --> 00:14:11,510
would sit in front of it and it would

350
00:14:11,510 --> 00:14:13,820
run the raw to proxy binary with the

351
00:14:13,820 --> 00:14:17,060
appropriate configurations and this was

352
00:14:17,060 --> 00:14:19,040
great for a while when we only had a few

353
00:14:19,040 --> 00:14:21,740
user facing services but soon we started

354
00:14:21,740 --> 00:14:24,200
to question its scalability as more user

355
00:14:24,200 --> 00:14:26,780
facing services therefore more off proxy

356
00:14:26,780 --> 00:14:29,960
services were created and so we started

357
00:14:29,960 --> 00:14:32,240
to see some scaling problems felt all

358
00:14:32,240 --> 00:14:35,480
around that were felt all around so to

359
00:14:35,480 --> 00:14:37,760
start the user is accessing the services

360
00:14:37,760 --> 00:14:40,280
behind OSU proxy would have a

361
00:14:40,280 --> 00:14:42,830
frustrating experience so many of our

362
00:14:42,830 --> 00:14:44,960
users use multiple tools in our micro

363
00:14:44,960 --> 00:14:47,480
service ecosystem for example a video

364
00:14:47,480 --> 00:14:49,520
producer might use one tool to upload

365
00:14:49,520 --> 00:14:51,620
and package their videos another one to

366
00:14:51,620 --> 00:14:53,060
see when they'd be published to the

367
00:14:53,060 --> 00:14:55,430
appropriate platforms and another one to

368
00:14:55,430 --> 00:14:59,360
see statistics and on how their video

369
00:14:59,360 --> 00:15:02,510
did and so since each service had its

370
00:15:02,510 --> 00:15:04,820
own OSU proxy service sitting in front

371
00:15:04,820 --> 00:15:06,950
of it it meant having to log in with

372
00:15:06,950 --> 00:15:08,300
Google for every single service

373
00:15:08,300 --> 00:15:11,120
individually and this was not only

374
00:15:11,120 --> 00:15:12,800
frustrating because users would have to

375
00:15:12,800 --> 00:15:14,330
click through to sign into every new

376
00:15:14,330 --> 00:15:16,880
service it also enforced bad security

377
00:15:16,880 --> 00:15:18,950
practices as users would blindly click

378
00:15:18,950 --> 00:15:20,690
through the OAuth proxy without actually

379
00:15:20,690 --> 00:15:22,070
checking that they were using the

380
00:15:22,070 --> 00:15:24,880
credentials for the correct services and

381
00:15:24,880 --> 00:15:27,800
developers and operators also felt some

382
00:15:27,800 --> 00:15:31,010
scaling problems for developers creating

383
00:15:31,010 --> 00:15:32,870
a new service the process of ADD

384
00:15:32,870 --> 00:15:35,720
Osment copying over a boilerplate Roth

385
00:15:35,720 --> 00:15:37,790
tree proxy service and modifying the

386
00:15:37,790 --> 00:15:39,920
config values and to most developers

387
00:15:39,920 --> 00:15:41,450
what these configurations meant was

388
00:15:41,450 --> 00:15:43,279
confusing and completely opaque to them

389
00:15:43,279 --> 00:15:45,950
and maintaining these other two proxy

390
00:15:45,950 --> 00:15:48,470
services was frustrating as well for

391
00:15:48,470 --> 00:15:49,700
example when there was a critical

392
00:15:49,700 --> 00:15:53,529
security fix for oauth2 proxy and meant

393
00:15:53,529 --> 00:15:55,790
updating our services meant updating

394
00:15:55,790 --> 00:15:58,520
every single os/2 proxy service and this

395
00:15:58,520 --> 00:16:00,080
is not only tedious to our in for

396
00:16:00,080 --> 00:16:02,450
engineers maintaining the service it

397
00:16:02,450 --> 00:16:04,820
also created a larger surface area for

398
00:16:04,820 --> 00:16:08,839
the potential of an attack and so with

399
00:16:08,839 --> 00:16:12,290
that we realized even though we realized

400
00:16:12,290 --> 00:16:13,940
even though we got consistency and

401
00:16:13,940 --> 00:16:16,460
granular access control doing anything

402
00:16:16,460 --> 00:16:18,650
with the oauth2 proxy services

403
00:16:18,650 --> 00:16:21,350
themselves was a pain so we decided to

404
00:16:21,350 --> 00:16:24,320
build something new and so in coming up

405
00:16:24,320 --> 00:16:26,510
with our new auth solution we did not

406
00:16:26,510 --> 00:16:28,760
want to stray too far from what we

407
00:16:28,760 --> 00:16:31,610
already had and we decided to use the

408
00:16:31,610 --> 00:16:34,310
logic of oauth2 proxy to create the SS

409
00:16:34,310 --> 00:16:37,700
octopus aka SSO our single sign-on

410
00:16:37,700 --> 00:16:43,240
version of OAuth 2 proxy so what is SSO

411
00:16:43,240 --> 00:16:48,500
well this is SSO SSO is an

412
00:16:48,500 --> 00:16:50,660
implementation of an established

413
00:16:50,660 --> 00:16:52,610
standard protocol called the cast

414
00:16:52,610 --> 00:16:54,500
protocol which stands for centralized

415
00:16:54,500 --> 00:16:57,740
authentication service it consists of a

416
00:16:57,740 --> 00:16:59,660
cast server which is responsible for

417
00:16:59,660 --> 00:17:01,700
authenticating users and granting access

418
00:17:01,700 --> 00:17:04,849
to the services and a cast client which

419
00:17:04,849 --> 00:17:06,800
protects the service and uses the cast

420
00:17:06,800 --> 00:17:09,109
server to retrieve the identity of the

421
00:17:09,109 --> 00:17:09,640
user

422
00:17:09,640 --> 00:17:12,170
SSO has these two binaries the cast

423
00:17:12,170 --> 00:17:14,809
server is SSL auth on the cast client is

424
00:17:14,809 --> 00:17:18,140
SSO proxy and this is a sample off flow

425
00:17:18,140 --> 00:17:21,020
of SSO I'm going to go through the

426
00:17:21,020 --> 00:17:23,260
different parts of this flow right now

427
00:17:23,260 --> 00:17:27,170
so first there's SSO proxy it acts as an

428
00:17:27,170 --> 00:17:29,660
identity aware proxy for the upstream

429
00:17:29,660 --> 00:17:31,700
sitting between them and the user it

430
00:17:31,700 --> 00:17:34,580
stores a short live session cookie that

431
00:17:34,580 --> 00:17:36,860
refreshes every minute or so with SSL

432
00:17:36,860 --> 00:17:38,990
off and this refresh is done behind the

433
00:17:38,990 --> 00:17:39,670
scenes

434
00:17:39,670 --> 00:17:43,880
and then there's SS OAuth which acts as

435
00:17:43,880 --> 00:17:46,310
an auth provider for SSO proxy

436
00:17:46,310 --> 00:17:48,800
and uses a third-party provider like

437
00:17:48,800 --> 00:17:50,810
Google to authenticate the user it

438
00:17:50,810 --> 00:17:53,450
stores the users identity information in

439
00:17:53,450 --> 00:17:55,790
a long-lived cookie session that lasts

440
00:17:55,790 --> 00:17:58,100
about 15 days and when the session

441
00:17:58,100 --> 00:18:00,710
cookie expires the user is directed to a

442
00:18:00,710 --> 00:18:02,630
sign-in page and then signs in with

443
00:18:02,630 --> 00:18:06,050
Google again and this is because the

444
00:18:06,050 --> 00:18:08,960
third-party auth provider is the source

445
00:18:08,960 --> 00:18:11,210
of truth on information about the user

446
00:18:11,210 --> 00:18:13,670
it provides the user identity

447
00:18:13,670 --> 00:18:16,040
information - SSO auth which in turn

448
00:18:16,040 --> 00:18:20,000
provides it - SSO proxy we use Google as

449
00:18:20,000 --> 00:18:22,730
our provider but and we're working with

450
00:18:22,730 --> 00:18:25,100
the community to support other providers

451
00:18:25,100 --> 00:18:28,120
we have some pull requests out for octa

452
00:18:28,120 --> 00:18:29,960
actually think it's already merged in

453
00:18:29,960 --> 00:18:35,540
and github in Azure ad the up streams

454
00:18:35,540 --> 00:18:37,700
are the services that are protected by

455
00:18:37,700 --> 00:18:41,390
SSO they're defined in a yamo

456
00:18:41,390 --> 00:18:44,090
configuration file because we want it to

457
00:18:44,090 --> 00:18:47,180
get on the animal bit bandwagon as well

458
00:18:47,180 --> 00:18:49,880
developers can add their service to the

459
00:18:49,880 --> 00:18:51,890
shared yamo file which starts off with a

460
00:18:51,890 --> 00:18:53,690
mapping of the internal service address

461
00:18:53,690 --> 00:18:56,960
- SSO fiesta proxy address and then they

462
00:18:56,960 --> 00:18:58,700
can add options for things like allowed

463
00:18:58,700 --> 00:19:01,670
groups which allows for group space

464
00:19:01,670 --> 00:19:05,390
authorization or request timeouts they

465
00:19:05,390 --> 00:19:07,520
can also set up overrides for addresses

466
00:19:07,520 --> 00:19:09,770
to allow for a better user experience so

467
00:19:09,770 --> 00:19:13,130
that a user can go to PAC landcom rather

468
00:19:13,130 --> 00:19:14,690
than having to go to PAC land

469
00:19:14,690 --> 00:19:20,540
SSO pac-world IO and so this is the new

470
00:19:20,540 --> 00:19:22,370
user experience for someone logging into

471
00:19:22,370 --> 00:19:24,940
to services this is a service that

472
00:19:24,940 --> 00:19:27,080
developers aren't developers use all the

473
00:19:27,080 --> 00:19:29,630
time so it's our deploy UI service so I

474
00:19:29,630 --> 00:19:32,690
log into our deploy usurp UI service to

475
00:19:32,690 --> 00:19:35,420
begin with and I get directed to log in

476
00:19:35,420 --> 00:19:39,710
with Google after signing in with Google

477
00:19:39,710 --> 00:19:43,250
I get directed to the deploy UI page and

478
00:19:43,250 --> 00:19:44,480
then can go ahead and deploy some

479
00:19:44,480 --> 00:19:48,350
services now say I want to check my

480
00:19:48,350 --> 00:19:53,120
service that I just deployed I'm gonna

481
00:19:53,120 --> 00:19:56,570
open a tab and go to HTTP been a sample

482
00:19:56,570 --> 00:19:59,149
service we have behind SSO

483
00:19:59,149 --> 00:20:02,450
this time I'm immediately redirected to

484
00:20:02,450 --> 00:20:05,919
http even without having to login again

485
00:20:05,919 --> 00:20:09,109
SSO proxy refreshes every minute so if

486
00:20:09,109 --> 00:20:11,690
my account were to get hacked by sneaky

487
00:20:11,690 --> 00:20:14,539
panda by the time I am done with this

488
00:20:14,539 --> 00:20:16,700
talk it could be locked down and nor I

489
00:20:16,700 --> 00:20:18,950
nor a sneaky panda would be able to

490
00:20:18,950 --> 00:20:22,029
access either service

491
00:20:22,029 --> 00:20:25,219
so having SSO and production checked all

492
00:20:25,219 --> 00:20:28,309
the boxes for infrastructure goals with

493
00:20:28,309 --> 00:20:30,229
centralized us operating our

494
00:20:30,229 --> 00:20:32,989
infrastructure is a much simpler

495
00:20:32,989 --> 00:20:35,659
streamlined process rather than having

496
00:20:35,659 --> 00:20:37,639
to maintain hundreds of individual off

497
00:20:37,639 --> 00:20:40,159
proxies our infrastructure engineers

498
00:20:40,159 --> 00:20:42,679
only need to focus on one codebase to

499
00:20:42,679 --> 00:20:44,599
have those changes be reflected in all

500
00:20:44,599 --> 00:20:46,639
of our services and this has made it

501
00:20:46,639 --> 00:20:48,830
easier to fix bugs add better monitoring

502
00:20:48,830 --> 00:20:52,759
metrics audit our services without

503
00:20:52,759 --> 00:20:54,019
having to grunt for days and days and

504
00:20:54,019 --> 00:20:56,570
generally be more flexible with changes

505
00:20:56,570 --> 00:20:58,999
to our system it allows us to be

506
00:20:58,999 --> 00:21:02,330
provider agnostic as well and leverage

507
00:21:02,330 --> 00:21:04,190
features of Google's off like to a PHA

508
00:21:04,190 --> 00:21:06,559
without having to implement these things

509
00:21:06,559 --> 00:21:10,009
ourselves and so SEO has been in

510
00:21:10,009 --> 00:21:12,259
production for a few years and we have

511
00:21:12,259 --> 00:21:14,749
hundreds of services behind it after a

512
00:21:14,749 --> 00:21:16,489
couple of years of having this in

513
00:21:16,489 --> 00:21:18,589
production we made the decision to open

514
00:21:18,589 --> 00:21:21,799
source and this decision was not taken

515
00:21:21,799 --> 00:21:24,499
lightly open sourcing security is scary

516
00:21:24,499 --> 00:21:26,299
you don't want to be giving away the

517
00:21:26,299 --> 00:21:29,029
keys to your kingdom we realized though

518
00:21:29,029 --> 00:21:31,460
that open sourcing SSO shows the lock to

519
00:21:31,460 --> 00:21:34,159
our kingdom without giving the keys but

520
00:21:34,159 --> 00:21:36,109
still we have any justifications to make

521
00:21:36,109 --> 00:21:37,820
before deciding to open source

522
00:21:37,820 --> 00:21:43,369
SSO so why did we open source SSO first

523
00:21:43,369 --> 00:21:45,859
SSI was born out of an open source

524
00:21:45,859 --> 00:21:48,440
project and it only seemed natural to

525
00:21:48,440 --> 00:21:51,049
give back to the community we understood

526
00:21:51,049 --> 00:21:52,969
from talking to folks in similar roles

527
00:21:52,969 --> 00:21:54,799
at other companies that the need for

528
00:21:54,799 --> 00:21:57,830
centralized auth was a common problem

529
00:21:57,830 --> 00:22:00,889
among platform engineering teams we

530
00:22:00,889 --> 00:22:02,330
learned that many teams had built out

531
00:22:02,330 --> 00:22:04,099
their own solutions internally because

532
00:22:04,099 --> 00:22:06,440
there was no ideal open source solution

533
00:22:06,440 --> 00:22:08,210
at the time and so we hoped to work

534
00:22:08,210 --> 00:22:12,279
together in the open to tackle this

535
00:22:12,350 --> 00:22:14,150
additionally we we knew empirically that

536
00:22:14,150 --> 00:22:17,210
watts to proxy from which SSO was

537
00:22:17,210 --> 00:22:18,860
originally folks has a large and active

538
00:22:18,860 --> 00:22:20,960
community of users so we felt confident

539
00:22:20,960 --> 00:22:22,940
that we could achieve similar traction

540
00:22:22,940 --> 00:22:26,060
with SSO and finally we believed that

541
00:22:26,060 --> 00:22:28,430
granting access to our code would help

542
00:22:28,430 --> 00:22:31,640
secure improve our security practices as

543
00:22:31,640 --> 00:22:33,590
and discussed in the next section

544
00:22:33,590 --> 00:22:36,230
security and compass of encompasses a

545
00:22:36,230 --> 00:22:38,930
variety of risk factors you can't

546
00:22:38,930 --> 00:22:41,390
prepare for and we know that it's very

547
00:22:41,390 --> 00:22:43,040
difficult to get right and that

548
00:22:43,040 --> 00:22:45,200
transparency would shine a light on our

549
00:22:45,200 --> 00:22:48,890
security footprint so when thinking

550
00:22:48,890 --> 00:22:50,690
about how we were going to execute this

551
00:22:50,690 --> 00:22:53,060
open source we made sure to consider

552
00:22:53,060 --> 00:22:54,680
what makes an open source project

553
00:22:54,680 --> 00:22:57,020
successful and what we could do to

554
00:22:57,020 --> 00:22:59,000
mitigate the risks surrounding open

555
00:22:59,000 --> 00:23:00,860
sourcing a significant piece of our

556
00:23:00,860 --> 00:23:06,110
security infrastructure so to start we

557
00:23:06,110 --> 00:23:07,640
made sure that we had substantial

558
00:23:07,640 --> 00:23:09,980
documentation to make getting started

559
00:23:09,980 --> 00:23:13,040
with SSO as easy as possible we focused

560
00:23:13,040 --> 00:23:14,570
a lot of our effort on a QuickStart

561
00:23:14,570 --> 00:23:16,910
guide to lessen the barrier for entry to

562
00:23:16,910 --> 00:23:19,490
use this project we think that having

563
00:23:19,490 --> 00:23:21,140
this QuickStart guide was a major part

564
00:23:21,140 --> 00:23:22,880
in its success for getting people to

565
00:23:22,880 --> 00:23:26,630
start contributing and using SSO another

566
00:23:26,630 --> 00:23:28,700
thing we decided was important to do is

567
00:23:28,700 --> 00:23:30,440
change the name of our project the

568
00:23:30,440 --> 00:23:32,480
original name was actually cop which

569
00:23:32,480 --> 00:23:35,300
tuned for centralized Roth proxy and we

570
00:23:35,300 --> 00:23:36,980
didn't think this was a suitable name

571
00:23:36,980 --> 00:23:39,470
and there were two reasons for this name

572
00:23:39,470 --> 00:23:42,110
change so first we wanted to step away

573
00:23:42,110 --> 00:23:44,180
from this acronym because we wanted the

574
00:23:44,180 --> 00:23:45,350
name of the tool to be something that

575
00:23:45,350 --> 00:23:47,510
was inclusive of all communities that

576
00:23:47,510 --> 00:23:49,540
might want to use this open-source tool

577
00:23:49,540 --> 00:23:52,160
we also thought that for the future of

578
00:23:52,160 --> 00:23:53,960
the project rebranding would allow us to

579
00:23:53,960 --> 00:23:58,580
expand past Roth so I actually started

580
00:23:58,580 --> 00:24:01,210
by pulling a bunch of engineering

581
00:24:01,210 --> 00:24:03,800
engineers on naming suggestions and got

582
00:24:03,800 --> 00:24:06,970
some really interesting suggestions

583
00:24:06,970 --> 00:24:11,870
octopus yeah but in the end we actually

584
00:24:11,870 --> 00:24:15,290
decided to keep it something that was

585
00:24:15,290 --> 00:24:20,870
simple and self-defining so in addition

586
00:24:20,870 --> 00:24:22,670
to these refactoring documentation

587
00:24:22,670 --> 00:24:25,850
changes when beginning the open source

588
00:24:25,850 --> 00:24:28,010
project we have larger conversations

589
00:24:28,010 --> 00:24:30,860
around what risks we were taking by open

590
00:24:30,860 --> 00:24:32,870
sourcing SSO and what we could do to

591
00:24:32,870 --> 00:24:35,960
mitigate these risks and so we decided

592
00:24:35,960 --> 00:24:37,460
to take a three pronged approach to

593
00:24:37,460 --> 00:24:40,550
auditing the security of our project one

594
00:24:40,550 --> 00:24:42,650
tool that we take advantage of many of

595
00:24:42,650 --> 00:24:44,600
our different parts of our code base is

596
00:24:44,600 --> 00:24:46,790
a third party bug bounty program called

597
00:24:46,790 --> 00:24:49,610
hacker one it allows us to pay for

598
00:24:49,610 --> 00:24:51,440
security vulnerabilities found by

599
00:24:51,440 --> 00:24:54,200
security experts and since having since

600
00:24:54,200 --> 00:24:55,940
the start of having SSO and production

601
00:24:55,940 --> 00:24:58,930
we've been using hacker one for SSO

602
00:24:58,930 --> 00:25:02,000
before open sourcing we actually

603
00:25:02,000 --> 00:25:04,130
contacted a few known hackers and gave

604
00:25:04,130 --> 00:25:06,380
them access to the code to see if they

605
00:25:06,380 --> 00:25:08,030
could find any more vulnerabilities

606
00:25:08,030 --> 00:25:12,160
having the two side-by-side we also

607
00:25:12,160 --> 00:25:14,960
hired a third party consultant to

608
00:25:14,960 --> 00:25:18,170
pentest SSO and provide code review we

609
00:25:18,170 --> 00:25:20,450
vetted a few companies based on costs in

610
00:25:20,450 --> 00:25:22,100
their process and decided on one that

611
00:25:22,100 --> 00:25:23,720
would work for us and gave him access

612
00:25:23,720 --> 00:25:27,290
for a one-week code review well

613
00:25:27,290 --> 00:25:29,960
nothing significant came up from that we

614
00:25:29,960 --> 00:25:32,140
were happy that we had the peace of mind

615
00:25:32,140 --> 00:25:36,250
of getting us review done and lastly we

616
00:25:36,250 --> 00:25:39,530
have an in-house security consultant who

617
00:25:39,530 --> 00:25:41,570
did an architectural review of SSO and

618
00:25:41,570 --> 00:25:44,240
found something interesting

619
00:25:44,240 --> 00:25:47,090
surrounding the way that we encrypt our

620
00:25:47,090 --> 00:25:50,720
session states and cookies so some

621
00:25:50,720 --> 00:25:53,240
background we encrypt our session states

622
00:25:53,240 --> 00:25:55,670
which contain the user email and access

623
00:25:55,670 --> 00:25:58,220
the user's email access and refresh

624
00:25:58,220 --> 00:26:00,500
tokens generated by the third party

625
00:26:00,500 --> 00:26:03,530
provider we store this encrypted session

626
00:26:03,530 --> 00:26:07,580
state in cookies on SSL off and SSO

627
00:26:07,580 --> 00:26:09,590
proxy which is what powers this whole

628
00:26:09,590 --> 00:26:14,420
off flow and we previously used a s GCM

629
00:26:14,420 --> 00:26:18,280
encryption but our security architecture

630
00:26:18,280 --> 00:26:21,230
consultant informed us that this type of

631
00:26:21,230 --> 00:26:23,300
encryption is not resistance to an

632
00:26:23,300 --> 00:26:26,090
attack called a nonce reuse misuse

633
00:26:26,090 --> 00:26:29,330
attack if a knots or a number used once

634
00:26:29,330 --> 00:26:31,760
is reused the X ORS

635
00:26:31,760 --> 00:26:34,280
the plaintext messages are elite so

636
00:26:34,280 --> 00:26:36,590
sneaky panda can see your token and

637
00:26:36,590 --> 00:26:40,310
hijack your off session not good there's

638
00:26:40,310 --> 00:26:43,190
a different type of encryption algorithm

639
00:26:43,190 --> 00:26:44,330
called and called

640
00:26:44,330 --> 00:26:47,570
AES SIV that has nonce frees misuse

641
00:26:47,570 --> 00:26:50,240
resistance and luckily ciphers with this

642
00:26:50,240 --> 00:26:51,680
type of resistance don't fail

643
00:26:51,680 --> 00:26:54,260
catastrophically when the nonce is

644
00:26:54,260 --> 00:26:56,210
reused the only information that these

645
00:26:56,210 --> 00:26:58,280
ciphers leak is that if the same message

646
00:26:58,280 --> 00:27:01,280
is encrypted with the same nonce twice

647
00:27:01,280 --> 00:27:03,920
under the same key you obtain the same

648
00:27:03,920 --> 00:27:06,980
ciphertext samanid I'm going with an

649
00:27:06,980 --> 00:27:09,050
open source package called miscreant

650
00:27:09,050 --> 00:27:12,020
that implements a yes SIV and this was a

651
00:27:12,020 --> 00:27:13,790
great learning experience on security

652
00:27:13,790 --> 00:27:16,040
best practices and made us feel more

653
00:27:16,040 --> 00:27:18,590
confident going forward with this open

654
00:27:18,590 --> 00:27:22,090
source so after going through this

655
00:27:22,090 --> 00:27:24,620
security audit process we felt more

656
00:27:24,620 --> 00:27:27,260
prepared but beyond preparedness

657
00:27:27,260 --> 00:27:28,880
understanding that security is never

658
00:27:28,880 --> 00:27:32,210
completely done was crucial our team has

659
00:27:32,210 --> 00:27:33,950
a learning and growth mindset about all

660
00:27:33,950 --> 00:27:35,330
of our work and that includes

661
00:27:35,330 --> 00:27:37,400
acknowledging that unknown unknowns

662
00:27:37,400 --> 00:27:39,380
exist and that we're going to have to

663
00:27:39,380 --> 00:27:40,580
continuously adapt

664
00:27:40,580 --> 00:27:43,400
nothing is ever 100% guaranteed to be

665
00:27:43,400 --> 00:27:45,410
secure but careful planning and good

666
00:27:45,410 --> 00:27:47,510
communication and clear expectations

667
00:27:47,510 --> 00:27:50,680
allowed us to assuage our initial fears

668
00:27:50,680 --> 00:27:53,150
so then we finally open source SSO and

669
00:27:53,150 --> 00:27:54,070
it went really well

670
00:27:54,070 --> 00:27:56,180
we're really proud of it and everyone

671
00:27:56,180 --> 00:27:57,980
who's worked on it the open source

672
00:27:57,980 --> 00:28:01,130
process has been really beneficial so

673
00:28:01,130 --> 00:28:03,320
while it will at all often seems like

674
00:28:03,320 --> 00:28:05,930
open sourcing internal security projects

675
00:28:05,930 --> 00:28:08,060
involves more risk than reward we've had

676
00:28:08,060 --> 00:28:11,210
a very very positive experience and then

677
00:28:11,210 --> 00:28:12,620
after the open source happened we

678
00:28:12,620 --> 00:28:14,180
recognized that there was a lot of work

679
00:28:14,180 --> 00:28:15,890
to be done to maintain the project and

680
00:28:15,890 --> 00:28:18,230
we made this a priority for our team to

681
00:28:18,230 --> 00:28:22,580
make maintaining SSO sustainable we took

682
00:28:22,580 --> 00:28:26,060
a few approaches so first we created a

683
00:28:26,060 --> 00:28:27,800
maintainer z-- working group that meets

684
00:28:27,800 --> 00:28:30,320
weekly it's made up of people from the

685
00:28:30,320 --> 00:28:32,630
infra teams other stakeholders and those

686
00:28:32,630 --> 00:28:34,790
who are just interested in learn and go

687
00:28:34,790 --> 00:28:38,870
head going or contributing to SSL in our

688
00:28:38,870 --> 00:28:41,030
meetings we discuss all issues and pull

689
00:28:41,030 --> 00:28:43,010
requests that come up and sometimes do

690
00:28:43,010 --> 00:28:44,570
knowledge shares on new and existing

691
00:28:44,570 --> 00:28:48,560
features and from this working group we

692
00:28:48,560 --> 00:28:50,300
also came up with an on-call rotation

693
00:28:50,300 --> 00:28:52,340
that rotates through members of the

694
00:28:52,340 --> 00:28:52,730
group

695
00:28:52,730 --> 00:28:54,620
we established internal SLA is for

696
00:28:54,620 --> 00:28:56,510
responding to issues and pull requests

697
00:28:56,510 --> 00:29:01,430
and during this time that we establish

698
00:29:01,430 --> 00:29:04,120
these SLA s we also made sure to have a

699
00:29:04,120 --> 00:29:06,320
external contributing doc with

700
00:29:06,320 --> 00:29:07,940
guidelines on how to contribute to the

701
00:29:07,940 --> 00:29:11,780
repository our contributing guide

702
00:29:11,780 --> 00:29:13,700
includes a link to the code of conduct

703
00:29:13,700 --> 00:29:16,010
and step-by-step instructions on how to

704
00:29:16,010 --> 00:29:18,710
get started contributing our goal again

705
00:29:18,710 --> 00:29:20,360
is to figure out ways to lessen the

706
00:29:20,360 --> 00:29:22,100
barrier for entry to be able to

707
00:29:22,100 --> 00:29:25,040
contribute and use SSO we try to be

708
00:29:25,040 --> 00:29:26,840
clear about what we will and will not

709
00:29:26,840 --> 00:29:28,880
accept on issues and pull requests and

710
00:29:28,880 --> 00:29:31,670
try to lean try our best to lean towards

711
00:29:31,670 --> 00:29:35,450
an optimistic merging policy this term

712
00:29:35,450 --> 00:29:38,030
was coined by Peter Hinton's and

713
00:29:38,030 --> 00:29:40,160
essentially says that it's better to

714
00:29:40,160 --> 00:29:42,170
accept and merge all pull requests that

715
00:29:42,170 --> 00:29:44,000
come in a timely manner

716
00:29:44,000 --> 00:29:48,410
come in a timely matter this can be

717
00:29:48,410 --> 00:29:50,540
difficult especially when maintaining a

718
00:29:50,540 --> 00:29:52,040
critical piece of our security

719
00:29:52,040 --> 00:29:53,750
infrastructure so we tend to fall

720
00:29:53,750 --> 00:29:56,090
somewhere in the middle of that and a

721
00:29:56,090 --> 00:29:58,610
rigid merging policy or a pessimistic

722
00:29:58,610 --> 00:30:01,670
merging policy we want to make sure that

723
00:30:01,670 --> 00:30:03,050
contributors know that they're making a

724
00:30:03,050 --> 00:30:04,610
difference contributing which will

725
00:30:04,610 --> 00:30:06,260
hopefully encourage them to continue to

726
00:30:06,260 --> 00:30:09,010
do so so yeah I'm maintaining an

727
00:30:09,010 --> 00:30:11,300
open-source project is a lot of work and

728
00:30:11,300 --> 00:30:14,810
required us to invest time and energy

729
00:30:14,810 --> 00:30:16,190
and approaches to make it sustainable

730
00:30:16,190 --> 00:30:19,340
and in the end knowing that the work

731
00:30:19,340 --> 00:30:21,410
that we put into it maintaining the

732
00:30:21,410 --> 00:30:24,170
project has made people's lives even a

733
00:30:24,170 --> 00:30:27,770
little bit better is worth it and so

734
00:30:27,770 --> 00:30:28,880
that's a little bit about how we

735
00:30:28,880 --> 00:30:31,070
approach security infrastructure and why

736
00:30:31,070 --> 00:30:33,380
and how we ended up building an open

737
00:30:33,380 --> 00:30:36,050
source solution for microcircuits auth

738
00:30:36,050 --> 00:30:40,460
at BuzzFeed with the SS octopus PAC feed

739
00:30:40,460 --> 00:30:42,410
is able to have a centralized solution

740
00:30:42,410 --> 00:30:44,600
to micro service auth following best

741
00:30:44,600 --> 00:30:46,580
infrastructure practices and making sure

742
00:30:46,580 --> 00:30:48,890
that only authorized users can access

743
00:30:48,890 --> 00:30:51,710
the tools that they need to if you'd

744
00:30:51,710 --> 00:30:53,690
like to try out so so it's open source

745
00:30:53,690 --> 00:30:55,550
and we work on actively maintaining

746
00:30:55,550 --> 00:30:57,710
their repository and we love and if

747
00:30:57,710 --> 00:30:59,419
back in the form of issues or pull

748
00:30:59,419 --> 00:31:12,169
requests thanks thanks so much TRAI I'm

749
00:31:12,169 --> 00:31:17,240
going to open up questions now and I'm

750
00:31:17,240 --> 00:31:21,140
not seeing too many in the channel so I

751
00:31:21,140 --> 00:31:25,370
have a few of my own and as we go if

752
00:31:25,370 --> 00:31:29,299
anyone out there is in the slack Channel

753
00:31:29,299 --> 00:31:31,970
they could drop a question or two in it

754
00:31:31,970 --> 00:31:33,950
that would be lovely

755
00:31:33,950 --> 00:31:42,620
so my first question is what what what

756
00:31:42,620 --> 00:31:51,730
advice would you give to a team that is

757
00:31:51,730 --> 00:31:56,649
trying to go through the process of

758
00:31:56,860 --> 00:32:01,279
scaling their authentication going

759
00:32:01,279 --> 00:32:05,500
through a similar process like what are

760
00:32:05,500 --> 00:32:08,179
lessons learned that you would have told

761
00:32:08,179 --> 00:32:15,049
your previous self I guess that's a good

762
00:32:15,049 --> 00:32:24,140
question I think one thing that was kind

763
00:32:24,140 --> 00:32:25,580
of useful to think about when we were

764
00:32:25,580 --> 00:32:29,750
first building out SSO was that we were

765
00:32:29,750 --> 00:32:33,700
trying to we ended up using like reusing

766
00:32:33,700 --> 00:32:36,380
watts to proxy to build it and I think

767
00:32:36,380 --> 00:32:37,880
that was really well because we had

768
00:32:37,880 --> 00:32:39,890
something to start with and we weren't

769
00:32:39,890 --> 00:32:43,520
changing the way that we did it with

770
00:32:43,520 --> 00:32:46,700
microservice auth too much and I think

771
00:32:46,700 --> 00:32:48,320
it was useful to have that kind of

772
00:32:48,320 --> 00:32:49,130
starting point

773
00:32:49,130 --> 00:32:56,230
ya know that make sense so we have a

774
00:32:56,230 --> 00:32:59,529
number of people in our community

775
00:32:59,529 --> 00:33:01,640
ranging from people who have been

776
00:33:01,640 --> 00:33:05,240
thinking about security for a long time

777
00:33:05,240 --> 00:33:10,210
and people who are kind of new to it

778
00:33:10,280 --> 00:33:14,419
what would you say to someone to

779
00:33:14,419 --> 00:33:18,799
developer who is just starting to learn

780
00:33:18,799 --> 00:33:24,110
security do you have any like advice for

781
00:33:24,110 --> 00:33:27,950
a beginner yeah I still feel like a

782
00:33:27,950 --> 00:33:32,030
beginner security personally but

783
00:33:32,030 --> 00:33:34,250
something that was really interesting to

784
00:33:34,250 --> 00:33:37,610
me was we did like a reading group on

785
00:33:37,610 --> 00:33:40,039
when we were trying to learn more about

786
00:33:40,039 --> 00:33:43,299
a yes sieve when when we learned that

787
00:33:43,299 --> 00:33:45,770
the way that we were encrypting or our

788
00:33:45,770 --> 00:33:49,070
session States was was insecure in a

789
00:33:49,070 --> 00:33:50,990
certain way we had like a reading group

790
00:33:50,990 --> 00:33:53,510
and we learned we read the RFC together

791
00:33:53,510 --> 00:33:56,179
and tried to understand more about it I

792
00:33:56,179 --> 00:33:58,360
think collaborating with other people is

793
00:33:58,360 --> 00:34:02,480
really helpful because it you they ask

794
00:34:02,480 --> 00:34:03,830
really good questions and you kind of

795
00:34:03,830 --> 00:34:05,929
learn about it together and I think

796
00:34:05,929 --> 00:34:07,309
learning about things together is always

797
00:34:07,309 --> 00:34:09,590
more fun than like sitting alone and

798
00:34:09,590 --> 00:34:12,800
trying to read something that might not

799
00:34:12,800 --> 00:34:14,810
make a lot of sense yeah

800
00:34:14,810 --> 00:34:18,199
now if that makes sense I I agree that

801
00:34:18,199 --> 00:34:21,859
is a good step uh let's see

802
00:34:21,859 --> 00:34:28,250
is there anything you hope or I guess is

803
00:34:28,250 --> 00:34:30,168
there anything you can share about what

804
00:34:30,168 --> 00:34:33,770
you would like to see an SS octopus in

805
00:34:33,770 --> 00:34:37,219
the future or are there like upcoming

806
00:34:37,219 --> 00:34:40,399
their next steps yeah

807
00:34:40,399 --> 00:34:44,570
we're currently working on supporting

808
00:34:44,570 --> 00:34:48,530
octa as a provider so I think we're it's

809
00:34:48,530 --> 00:34:51,320
it's slowly it coming together which is

810
00:34:51,320 --> 00:34:53,000
really exciting and I think having other

811
00:34:53,000 --> 00:34:58,609
providers and supporting other providers

812
00:34:58,609 --> 00:35:02,300
would be really cool ya know it does

813
00:35:02,300 --> 00:35:10,250
sound good so I think it's really neat

814
00:35:10,250 --> 00:35:16,010
that BuzzFeed open sourced this and you

815
00:35:16,010 --> 00:35:20,420
did talk a bit about some of the things

816
00:35:20,420 --> 00:35:23,310
you did leaving

817
00:35:23,310 --> 00:35:26,040
just doing so to make sure your bases

818
00:35:26,040 --> 00:35:29,180
were covered and and that kind of thing

819
00:35:29,180 --> 00:35:36,270
was it hard to get like management on

820
00:35:36,270 --> 00:35:40,740
board with this or or like any

821
00:35:40,740 --> 00:35:42,450
higher-ups did you get pushed back at

822
00:35:42,450 --> 00:35:46,350
all or anything like that I not not

823
00:35:46,350 --> 00:35:48,330
really no I think it was actually

824
00:35:48,330 --> 00:35:51,420
encouraged by management to do this I

825
00:35:51,420 --> 00:35:55,020
think a lot of people saw the value of

826
00:35:55,020 --> 00:35:57,630
open of getting into the open source

827
00:35:57,630 --> 00:36:02,430
community even if just to have our name

828
00:36:02,430 --> 00:36:06,300
out there and to yeah I think it was it

829
00:36:06,300 --> 00:36:07,920
was a pretty smooth process for the most

830
00:36:07,920 --> 00:36:10,230
part in terms of getting prioritization

831
00:36:10,230 --> 00:36:13,440
for it that's great what would you say

832
00:36:13,440 --> 00:36:16,080
was the biggest benefit of open sourcing

833
00:36:16,080 --> 00:36:20,100
this project mmm I think the biggest

834
00:36:20,100 --> 00:36:27,780
benefit was I understanding our security

835
00:36:27,780 --> 00:36:28,980
footprint was really interesting just

836
00:36:28,980 --> 00:36:31,440
being able to to have that kind of learn

837
00:36:31,440 --> 00:36:33,900
how to have that kind of community and

838
00:36:33,900 --> 00:36:40,290
and and like it's been really it's been

839
00:36:40,290 --> 00:36:42,240
really cool to have people from the

840
00:36:42,240 --> 00:36:45,300
outside community use so and contribute

841
00:36:45,300 --> 00:36:48,270
to it and submit pull requests and

842
00:36:48,270 --> 00:36:51,480
issues and I think it's been really

843
00:36:51,480 --> 00:36:54,270
great to just be able to work on it in

844
00:36:54,270 --> 00:36:56,670
the open rather than just working on it

845
00:36:56,670 --> 00:37:01,580
as a small team no that's great yeah

846
00:37:01,580 --> 00:37:11,940
very cool let me see I think have a

847
00:37:11,940 --> 00:37:13,980
couple more questions if you have time

848
00:37:13,980 --> 00:37:21,380
yeah sure okay well so

849
00:37:25,610 --> 00:37:35,010
what um now let's just say or how big is

850
00:37:35,010 --> 00:37:37,260
your team how many people are

851
00:37:37,260 --> 00:37:40,710
responsible for us is so-so

852
00:37:40,710 --> 00:37:44,760
our infrastructure team is I think

853
00:37:44,760 --> 00:37:51,710
around 10 people there are three people

854
00:37:51,710 --> 00:37:55,200
four I think so we also have our SSO

855
00:37:55,200 --> 00:37:57,240
maintainer is group and that's around I

856
00:37:57,240 --> 00:38:01,320
want to say like six people okay um

857
00:38:01,320 --> 00:38:06,000
and yeah yeah and then I think in terms

858
00:38:06,000 --> 00:38:10,440
of people who are responsible for SSO we

859
00:38:10,440 --> 00:38:12,240
have a smaller subset of the

860
00:38:12,240 --> 00:38:14,940
infrastructure team that works on it

861
00:38:14,940 --> 00:38:15,450
yeah

862
00:38:15,450 --> 00:38:20,040
okay and you said that you have kind of

863
00:38:20,040 --> 00:38:21,990
an on-call rotation going on it's not

864
00:38:21,990 --> 00:38:24,720
true yeah yeah yeah

865
00:38:24,720 --> 00:38:27,810
so is that process any different from

866
00:38:27,810 --> 00:38:31,620
how you might handle an on-call rotation

867
00:38:31,620 --> 00:38:36,290
for a non open-sourced thing or is it

868
00:38:36,290 --> 00:38:38,730
it's a little different

869
00:38:38,730 --> 00:38:44,340
um it's it's mainly just for the open

870
00:38:44,340 --> 00:38:46,530
source for for managing the open source

871
00:38:46,530 --> 00:38:51,810
project so it's triaging pull requests

872
00:38:51,810 --> 00:38:53,730
that come in and making sure that we

873
00:38:53,730 --> 00:38:58,760
answer them within a day's time and

874
00:38:58,760 --> 00:39:00,930
figuring out if there are any you know

875
00:39:00,930 --> 00:39:03,510
issues that come in that are that seem

876
00:39:03,510 --> 00:39:05,370
like they're more critically they're

877
00:39:05,370 --> 00:39:13,770
that critical and I that less of like of

878
00:39:13,770 --> 00:39:18,900
how we use SSO in BuzzFeed and more

879
00:39:18,900 --> 00:39:22,080
about how like how the maintaining the

880
00:39:22,080 --> 00:39:25,650
actual project okay yeah that makes

881
00:39:25,650 --> 00:39:27,740
sense

882
00:39:29,150 --> 00:39:36,330
do you have anything that that you want

883
00:39:36,330 --> 00:39:37,790
to plug

884
00:39:37,790 --> 00:39:41,520
see your Twitter handle there anything

885
00:39:41,520 --> 00:39:44,160
upcoming for your team or yourself that

886
00:39:44,160 --> 00:39:47,460
you'd like to share well I'm going to be

887
00:39:47,460 --> 00:39:48,990
giving a talk very similar to this

888
00:39:48,990 --> 00:39:53,610
entity so oh that's great so yeah other

889
00:39:53,610 --> 00:39:58,170
than that I don't think I have any

890
00:39:58,170 --> 00:40:01,260
opening slug yeah that's okay I like to

891
00:40:01,260 --> 00:40:09,150
ask um all right if there is one thing

892
00:40:09,150 --> 00:40:12,420
that you would hope people take away

893
00:40:12,420 --> 00:40:13,590
from your talk

894
00:40:13,590 --> 00:40:20,090
what would you say that would be I think

895
00:40:20,090 --> 00:40:36,290
I would say that that you know I guess a

896
00:40:36,290 --> 00:40:40,350
lot of a lot of thoughts can be more

897
00:40:40,350 --> 00:40:41,870
than one

898
00:40:41,870 --> 00:40:45,750
well that like that I guess in terms of

899
00:40:45,750 --> 00:40:47,940
open sourcing I think it's I think it's

900
00:40:47,940 --> 00:40:49,800
really great to be involved in the open

901
00:40:49,800 --> 00:40:53,780
source community in terms of

902
00:40:53,780 --> 00:40:55,860
microservice off like I mean it would be

903
00:40:55,860 --> 00:40:59,010
great if if anyone wants to try out SSO

904
00:40:59,010 --> 00:41:01,170
or use it that's great but it's also I

905
00:41:01,170 --> 00:41:04,280
think it's it's great to think about

906
00:41:04,280 --> 00:41:11,370
using it like how I guess scaling one

907
00:41:11,370 --> 00:41:13,260
thing yes it's interesting it's been

908
00:41:13,260 --> 00:41:15,120
really interesting to see how off has

909
00:41:15,120 --> 00:41:17,430
scaled at BuzzFeed and that's yeah I

910
00:41:17,430 --> 00:41:19,370
just need to see at other organizations

911
00:41:19,370 --> 00:41:24,300
mm-hmm yeah no that makes sense um all

912
00:41:24,300 --> 00:41:29,790
right well I'm gonna wrap up but thank

913
00:41:29,790 --> 00:41:32,700
you so much for coming

914
00:41:32,700 --> 00:41:35,160
anyone who's out there listening and -

915
00:41:35,160 --> 00:41:37,770
shreya we really appreciate you joining

916
00:41:37,770 --> 00:41:41,930
us today this is really interesting and

917
00:41:41,930 --> 00:41:47,940
we hope that it won't be the last time

918
00:41:47,940 --> 00:41:50,670
we see you around and

919
00:41:50,670 --> 00:41:53,390
I just really like this it'll be

920
00:41:53,390 --> 00:41:57,329
available to be sure or the video will

921
00:41:57,329 --> 00:42:00,960
be available to be shared later I have a

922
00:42:00,960 --> 00:42:03,829
few things to do to get that published

923
00:42:03,829 --> 00:42:07,529
but um feel free to share in your

924
00:42:07,529 --> 00:42:10,410
network with your friends coworkers

925
00:42:10,410 --> 00:42:13,529
that kind of thing our next session will

926
00:42:13,529 --> 00:42:16,230
be in two weeks on the 6th of June and

927
00:42:16,230 --> 00:42:18,779
we're going to be discussing ten

928
00:42:18,779 --> 00:42:21,180
excellent ways to secure your spring

929
00:42:21,180 --> 00:42:24,119
boot application with simon maple and

930
00:42:24,119 --> 00:42:28,559
matt rable you can register and get your

931
00:42:28,559 --> 00:42:31,499
tickets on our website the secure

932
00:42:31,499 --> 00:42:32,640
developer com

933
00:42:32,640 --> 00:42:36,210
in the meantime I hope you enjoyed this

934
00:42:36,210 --> 00:42:39,059
session and please remember to share the

935
00:42:39,059 --> 00:42:41,999
video and invite others to join our

936
00:42:41,999 --> 00:42:47,598
community thanks to everybody take care

