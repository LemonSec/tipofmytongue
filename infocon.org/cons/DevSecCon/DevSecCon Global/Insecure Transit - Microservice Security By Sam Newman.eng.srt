1
00:00:03,359 --> 00:00:06,069
hello everyone and welcome to the secure

2
00:00:06,069 --> 00:00:07,180
developer

3
00:00:07,180 --> 00:00:08,559
I'm really excited today for those of

4
00:00:08,559 --> 00:00:09,730
you don't know we're an inclusive

5
00:00:09,730 --> 00:00:12,610
community that aims to educate and

6
00:00:12,610 --> 00:00:14,110
enable developers and applications

7
00:00:14,110 --> 00:00:16,720
security I am joined by Sam Newman today

8
00:00:16,720 --> 00:00:18,040
and he'll be talking about insecure

9
00:00:18,040 --> 00:00:19,900
transit micro service security but

10
00:00:19,900 --> 00:00:21,220
before we get started on that I quickly

11
00:00:21,220 --> 00:00:22,480
want to introduce myself

12
00:00:22,480 --> 00:00:24,430
so my name's say I'm hip burn and I'm

13
00:00:24,430 --> 00:00:26,079
the community manager here and I work

14
00:00:26,079 --> 00:00:27,640
behind the scenes to hopefully make all

15
00:00:27,640 --> 00:00:30,550
of this happen I'm also joined by my

16
00:00:30,550 --> 00:00:32,200
colleague Brian who will be helping to

17
00:00:32,200 --> 00:00:34,120
facilitate questions today so say hi

18
00:00:34,120 --> 00:00:34,539
Brian

19
00:00:34,539 --> 00:00:38,250
I hear him again if you have questions

20
00:00:38,250 --> 00:00:40,690
please put them up and select channel

21
00:00:40,690 --> 00:00:43,329
we've got this live session Channel we

22
00:00:43,329 --> 00:00:45,699
put them up there and we will feed them

23
00:00:45,699 --> 00:00:48,999
back to Sam at an appropriate time so he

24
00:00:48,999 --> 00:00:51,370
can just focus on his presentation feel

25
00:00:51,370 --> 00:00:53,019
free to ask anything and feel free to

26
00:00:53,019 --> 00:00:54,550
comment on any questions that are

27
00:00:54,550 --> 00:00:55,359
already there

28
00:00:55,359 --> 00:00:58,960
just use it perfect thanks Brian thinks

29
00:00:58,960 --> 00:01:00,579
all the helps a CEO so as Brian said

30
00:01:00,579 --> 00:01:02,649
slack is the best way to interact with

31
00:01:02,649 --> 00:01:04,449
our speaker today so if you haven't

32
00:01:04,449 --> 00:01:06,310
joined the slack you can either jump

33
00:01:06,310 --> 00:01:08,409
onto the secure developer comm or if

34
00:01:08,409 --> 00:01:09,850
you're ready on the site at the bottom

35
00:01:09,850 --> 00:01:11,290
of the live streaming screen you'll see

36
00:01:11,290 --> 00:01:13,450
the link there and then as you say join

37
00:01:13,450 --> 00:01:15,850
the live sessions Channel and you can

38
00:01:15,850 --> 00:01:18,189
ask all your questions in there we also

39
00:01:18,189 --> 00:01:19,840
love feedback so if you like today's

40
00:01:19,840 --> 00:01:21,310
session or you want to see any future

41
00:01:21,310 --> 00:01:24,280
sessions and jam on the slack or the

42
00:01:24,280 --> 00:01:26,520
Twitter or the website and let us know

43
00:01:26,520 --> 00:01:28,540
the other thing to mention is the best

44
00:01:28,540 --> 00:01:31,240
way is if you go to the settings cog on

45
00:01:31,240 --> 00:01:32,890
the bottom right hand corner and turn

46
00:01:32,890 --> 00:01:35,860
your resolution to max that's the best

47
00:01:35,860 --> 00:01:38,860
way to view today's session and the

48
00:01:38,860 --> 00:01:40,240
secure developer is brought to you by

49
00:01:40,240 --> 00:01:42,430
sneek the aim is to create a vendor

50
00:01:42,430 --> 00:01:44,109
neutral space to share knowledge and

51
00:01:44,109 --> 00:01:46,210
best practices related to software

52
00:01:46,210 --> 00:01:49,600
security so our thanks to them and but

53
00:01:49,600 --> 00:01:51,399
that is enough for me without further

54
00:01:51,399 --> 00:01:54,340
ado I'd love to hand over to them and to

55
00:01:54,340 --> 00:01:57,479
get over decisions so over to you

56
00:01:57,479 --> 00:02:00,609
thanks so much good morning good

57
00:02:00,609 --> 00:02:03,219
afternoon everybody is the afternoon

58
00:02:03,219 --> 00:02:05,289
here it sort of the evening here I'll be

59
00:02:05,289 --> 00:02:06,399
honest with you I know it's different

60
00:02:06,399 --> 00:02:07,960
times all over the world

61
00:02:07,960 --> 00:02:09,400
but thank you very much for coming along

62
00:02:09,400 --> 00:02:11,090
today too

63
00:02:11,090 --> 00:02:14,630
- I guess listen to me rant on about

64
00:02:14,630 --> 00:02:17,120
micro server security so what we'll get

65
00:02:17,120 --> 00:02:20,950
started so we'll be doing sessions

66
00:02:20,950 --> 00:02:23,000
questions at the end but please ask

67
00:02:23,000 --> 00:02:26,900
questions as we go just get my screen

68
00:02:26,900 --> 00:02:28,280
sharing working this is always the fun

69
00:02:28,280 --> 00:02:30,019
moment when you just make you realize

70
00:02:30,019 --> 00:02:33,950
that the shows want to work so I'm just

71
00:02:33,950 --> 00:02:36,170
going to hope that these screen sharing

72
00:02:36,170 --> 00:02:37,630
is coming up okay

73
00:02:37,630 --> 00:02:39,830
so yeah this talks called in secured

74
00:02:39,830 --> 00:02:42,920
transit and it's really all about micro

75
00:02:42,920 --> 00:02:45,170
server security aspects associated with

76
00:02:45,170 --> 00:02:45,980
it and we going to be talking

77
00:02:45,980 --> 00:02:47,840
specifically about some micro service

78
00:02:47,840 --> 00:02:50,630
aspects around transport security which

79
00:02:50,630 --> 00:02:52,610
is part of title but also some more

80
00:02:52,610 --> 00:02:54,560
fundamental basics of application

81
00:02:54,560 --> 00:02:56,750
security that it can become quite could

82
00:02:56,750 --> 00:02:59,170
be a bit more challenging in the in a

83
00:02:59,170 --> 00:03:02,150
micro service environment just bit of

84
00:03:02,150 --> 00:03:02,690
background

85
00:03:02,690 --> 00:03:04,400
my name is seventeen and I wrote a book

86
00:03:04,400 --> 00:03:06,560
on my career's ago I mean currently in

87
00:03:06,560 --> 00:03:08,860
the process of writing a new book called

88
00:03:08,860 --> 00:03:11,180
monitor micro services which an early

89
00:03:11,180 --> 00:03:12,650
access of that is already available I

90
00:03:12,650 --> 00:03:16,100
also run my own consultancy so I do

91
00:03:16,100 --> 00:03:18,200
training advisor in consultants and sort

92
00:03:18,200 --> 00:03:20,390
of advise you work really on micro

93
00:03:20,390 --> 00:03:23,239
services continuous delivery those sorts

94
00:03:23,239 --> 00:03:24,560
of things I think it's pretty worth

95
00:03:24,560 --> 00:03:26,090
reflecting on the fact that I am NOT a

96
00:03:26,090 --> 00:03:28,959
security expert I'm what I describe as a

97
00:03:28,959 --> 00:03:31,519
conscious incompetent I'm somebody who

98
00:03:31,519 --> 00:03:33,079
knows that I don't know much I'm trying

99
00:03:33,079 --> 00:03:35,269
to educate myself I come at this very

100
00:03:35,269 --> 00:03:36,790
much from the point of view of a

101
00:03:36,790 --> 00:03:39,980
developer trying to learn more about

102
00:03:39,980 --> 00:03:41,959
these things if you don't know more

103
00:03:41,959 --> 00:03:44,269
about any of the work that I do in my

104
00:03:44,269 --> 00:03:45,859
day job feel free to go over to my

105
00:03:45,859 --> 00:03:47,540
website which is fairly easy to find on

106
00:03:47,540 --> 00:03:49,310
the internet that the reason I became

107
00:03:49,310 --> 00:03:52,459
sort of interested in in application

108
00:03:52,459 --> 00:03:54,200
security was sort of twofold the first

109
00:03:54,200 --> 00:03:55,730
hand I was looking at these

110
00:03:55,730 --> 00:03:57,850
architectures is Marcus OS architectures

111
00:03:57,850 --> 00:04:00,590
trying to think about different ways of

112
00:04:00,590 --> 00:04:02,120
building systems different ways of

113
00:04:02,120 --> 00:04:04,010
helping people ship software effectively

114
00:04:04,010 --> 00:04:06,230
and those architectures were causing

115
00:04:06,230 --> 00:04:08,329
more challenges and a scope of in the

116
00:04:08,329 --> 00:04:10,310
face of application security concerns

117
00:04:10,310 --> 00:04:12,530
and also creating opportunities to to be

118
00:04:12,530 --> 00:04:14,750
fair but this is also sort of happy at

119
00:04:14,750 --> 00:04:16,399
the same time that we are all becoming a

120
00:04:16,399 --> 00:04:18,918
bit more aware of the impact of things

121
00:04:18,918 --> 00:04:24,229
like data breaches we've probably many

122
00:04:24,229 --> 00:04:25,070
of you may be familiar

123
00:04:25,070 --> 00:04:27,230
things like large Equifax breach we're

124
00:04:27,230 --> 00:04:30,950
almost 150 million Americans had their

125
00:04:30,950 --> 00:04:33,440
information effectively compromised a

126
00:04:33,440 --> 00:04:37,010
credit scoring agency we've got bugs and

127
00:04:37,010 --> 00:04:39,920
defects and issues now that occur in not

128
00:04:39,920 --> 00:04:41,570
just in our software in our application

129
00:04:41,570 --> 00:04:44,090
dependencies but also actually in the

130
00:04:44,090 --> 00:04:46,550
actual design chipsets of our software

131
00:04:46,550 --> 00:04:48,650
you know we're now getting patches for

132
00:04:48,650 --> 00:04:50,690
our computer chips we're getting patches

133
00:04:50,690 --> 00:04:52,490
for our motherboards now things that

134
00:04:52,490 --> 00:04:55,190
meltdown inspector those those sort of

135
00:04:55,190 --> 00:04:57,800
concerns came to the floor and so this

136
00:04:57,800 --> 00:04:59,660
sort of it becomes quite interesting now

137
00:04:59,660 --> 00:05:01,190
because we've sort of got this world

138
00:05:01,190 --> 00:05:03,470
where we think in terms of delivery

139
00:05:03,470 --> 00:05:07,490
focus of design develop test shipped

140
00:05:07,490 --> 00:05:09,200
loop in a way we're thinking about

141
00:05:09,200 --> 00:05:11,000
trying to bring design thinking into how

142
00:05:11,000 --> 00:05:13,430
we chip software we're doing testing as

143
00:05:13,430 --> 00:05:14,870
part of our delivery our development

144
00:05:14,870 --> 00:05:16,370
cycle we're trying to think about

145
00:05:16,370 --> 00:05:17,840
shipping our software as frequently as

146
00:05:17,840 --> 00:05:20,150
possible and bringing more operations

147
00:05:20,150 --> 00:05:23,150
type work into the work done by our

148
00:05:23,150 --> 00:05:27,410
teams but increasingly we sort of and

149
00:05:27,410 --> 00:05:28,580
this is a great way because increasingly

150
00:05:28,580 --> 00:05:29,960
we're sort of trying to make our think

151
00:05:29,960 --> 00:05:31,250
of our software delivery cycle

152
00:05:31,250 --> 00:05:33,710
holistically but we sort of still treat

153
00:05:33,710 --> 00:05:35,270
a little bit security like it's off to

154
00:05:35,270 --> 00:05:37,760
one side like while Security's too hard

155
00:05:37,760 --> 00:05:39,680
for me to do I'm just gonna have to get

156
00:05:39,680 --> 00:05:41,510
in some special experts you really

157
00:05:41,510 --> 00:05:43,190
understand security because I just don't

158
00:05:43,190 --> 00:05:45,440
you know but this is where where we are

159
00:05:45,440 --> 00:05:48,020
I think now we're securities maybe where

160
00:05:48,020 --> 00:05:49,640
we were say ten or fifteen years ago

161
00:05:49,640 --> 00:05:52,040
when it came to thinking about things

162
00:05:52,040 --> 00:05:55,490
like application testing we used to not

163
00:05:55,490 --> 00:05:57,560
test our owner code as developers we

164
00:05:57,560 --> 00:05:59,840
used to abdicate responsibility to that

165
00:05:59,840 --> 00:06:01,730
to other people we would have a team of

166
00:06:01,730 --> 00:06:04,160
testers test our systems for us in the

167
00:06:04,160 --> 00:06:05,990
same way as nowadays I think we'd sort

168
00:06:05,990 --> 00:06:07,850
of well many of us anyway say okay

169
00:06:07,850 --> 00:06:09,920
security is not really my concern and I

170
00:06:09,920 --> 00:06:11,570
think that's not the case I think you

171
00:06:11,570 --> 00:06:14,420
may still want experts experts who

172
00:06:14,420 --> 00:06:16,220
understand the field of security really

173
00:06:16,220 --> 00:06:18,290
well but there's a lot to be said for

174
00:06:18,290 --> 00:06:20,930
you doing a knowing just enough security

175
00:06:20,930 --> 00:06:23,360
and that's kind of where I come at this

176
00:06:23,360 --> 00:06:25,580
I try I'm trying to share what I think

177
00:06:25,580 --> 00:06:28,100
is enough security concerns you to think

178
00:06:28,100 --> 00:06:30,230
about and you might need help

179
00:06:30,230 --> 00:06:31,910
implementing some of these ideas from

180
00:06:31,910 --> 00:06:34,190
experts who do know these areas really

181
00:06:34,190 --> 00:06:35,930
really well but for a lot of the stuff

182
00:06:35,930 --> 00:06:37,610
I'm going to share I don't think you do

183
00:06:37,610 --> 00:06:38,390
I think and I

184
00:06:38,390 --> 00:06:39,770
for a lot of the stuff I'm going to

185
00:06:39,770 --> 00:06:41,210
share this is the kind of thing you need

186
00:06:41,210 --> 00:06:42,800
to build into how you think about

187
00:06:42,800 --> 00:06:45,020
developing your systems and developing

188
00:06:45,020 --> 00:06:47,810
your architecture so when it comes to

189
00:06:47,810 --> 00:06:49,820
microservices we kind of have this

190
00:06:49,820 --> 00:06:52,460
interesting challenge regarding security

191
00:06:52,460 --> 00:06:54,320
because we always draw them is he's nice

192
00:06:54,320 --> 00:06:57,890
sort of isolated deployable units these

193
00:06:57,890 --> 00:06:59,840
separate processes typically or maybe

194
00:06:59,840 --> 00:07:01,040
even functions if you're going all

195
00:07:01,040 --> 00:07:03,380
serviced on us which immediately creates

196
00:07:03,380 --> 00:07:04,940
some interesting opportunities when it

197
00:07:04,940 --> 00:07:07,820
comes to thinking about security of our

198
00:07:07,820 --> 00:07:10,100
system processing security of our data

199
00:07:10,100 --> 00:07:12,380
because unlike say a monolithic system

200
00:07:12,380 --> 00:07:14,660
where all of our data is stored in one

201
00:07:14,660 --> 00:07:17,750
place we sort of where we have that sort

202
00:07:17,750 --> 00:07:20,690
of that fundamental issue which is if

203
00:07:20,690 --> 00:07:23,360
our more ethic system is breached if

204
00:07:23,360 --> 00:07:24,800
someone gets hold of our monolithic

205
00:07:24,800 --> 00:07:26,330
database they've got access to all of

206
00:07:26,330 --> 00:07:28,700
our data and exploit the works against

207
00:07:28,700 --> 00:07:30,980
our process our single muriatic

208
00:07:30,980 --> 00:07:33,110
processor system sort of cracks open the

209
00:07:33,110 --> 00:07:35,060
whole system and everything becomes

210
00:07:35,060 --> 00:07:38,660
available to a malicious party like was

211
00:07:38,660 --> 00:07:40,880
one innocent mistake could open up

212
00:07:40,880 --> 00:07:42,500
everything with a microservice

213
00:07:42,500 --> 00:07:45,470
architecture we have that unit I thought

214
00:07:45,470 --> 00:07:48,590
they option to more isolate up different

215
00:07:48,590 --> 00:07:51,200
processing and the option to isolate our

216
00:07:51,200 --> 00:07:53,870
data in fact when I talk about market

217
00:07:53,870 --> 00:07:55,640
service architecture I typically talk

218
00:07:55,640 --> 00:07:57,740
about the fact that micro services owned

219
00:07:57,740 --> 00:07:58,850
their own data

220
00:07:58,850 --> 00:08:01,280
we don't have a monolithic schema we

221
00:08:01,280 --> 00:08:03,350
break data storage down into its

222
00:08:03,350 --> 00:08:06,050
constituent parts and so microservices

223
00:08:06,050 --> 00:08:07,700
owned their own data

224
00:08:07,700 --> 00:08:11,330
what that means is that those concerns

225
00:08:11,330 --> 00:08:13,880
about data being breached or data being

226
00:08:13,880 --> 00:08:14,510
accessed

227
00:08:14,510 --> 00:08:17,000
we've got more isolation around those

228
00:08:17,000 --> 00:08:18,950
things this can be quite useful actually

229
00:08:18,950 --> 00:08:20,240
if you think about things like the GDP

230
00:08:20,240 --> 00:08:22,190
are with the GDP are one of your main

231
00:08:22,190 --> 00:08:24,410
concerns is where is personally

232
00:08:24,410 --> 00:08:28,100
identifiable information now you know

233
00:08:28,100 --> 00:08:29,480
some people would argue well if I have a

234
00:08:29,480 --> 00:08:31,250
monolithic schema and all my data's

235
00:08:31,250 --> 00:08:33,770
there I know it's all there but with a

236
00:08:33,770 --> 00:08:35,210
micro service architecture you might

237
00:08:35,210 --> 00:08:37,549
have 10 15 20 databases but you might be

238
00:08:37,549 --> 00:08:40,340
able to say actually I know personally

239
00:08:40,340 --> 00:08:42,860
identifiable information only hits three

240
00:08:42,860 --> 00:08:44,690
of those databases and so immediately

241
00:08:44,690 --> 00:08:46,760
you limit the scope of the system that

242
00:08:46,760 --> 00:08:48,980
you have to worry about when it comes to

243
00:08:48,980 --> 00:08:50,210
thinking about auditing and compliance

244
00:08:50,210 --> 00:08:52,940
across a whole host of issues

245
00:08:52,940 --> 00:08:55,860
likewise having multiple services gives

246
00:08:55,860 --> 00:08:57,990
you the opportunity to four-four sort of

247
00:08:57,990 --> 00:08:59,430
increased defense-in-depth

248
00:08:59,430 --> 00:09:02,070
you have multiple parameters at which to

249
00:09:02,070 --> 00:09:06,020
defend your system placing in monitoring

250
00:09:06,020 --> 00:09:07,860
applications putting instead of

251
00:09:07,860 --> 00:09:11,100
different application firewalls maybe

252
00:09:11,100 --> 00:09:12,300
you could do things around say

253
00:09:12,300 --> 00:09:14,190
networking relationship sentence should

254
00:09:14,190 --> 00:09:16,320
have you know virtualized stuff defined

255
00:09:16,320 --> 00:09:18,780
networks to isolate unit to compute and

256
00:09:18,780 --> 00:09:20,370
everything else whereas with a

257
00:09:20,370 --> 00:09:21,930
monolithic system you sort of have that

258
00:09:21,930 --> 00:09:24,810
single parameter issue you have more

259
00:09:24,810 --> 00:09:26,640
reduced platers at where you can protect

260
00:09:26,640 --> 00:09:29,070
and defend your application and so on

261
00:09:29,070 --> 00:09:30,600
the one hand in micro service

262
00:09:30,600 --> 00:09:32,280
architecture because this unit is

263
00:09:32,280 --> 00:09:34,260
property of isolation between those

264
00:09:34,260 --> 00:09:36,090
running processes because of this

265
00:09:36,090 --> 00:09:38,670
property of isolation in terms of data

266
00:09:38,670 --> 00:09:42,060
storage we kind of we could think about

267
00:09:42,060 --> 00:09:44,250
building applications which are more

268
00:09:44,250 --> 00:09:46,650
resilient to attack from a malicious

269
00:09:46,650 --> 00:09:49,710
party and we're also a breach may have

270
00:09:49,710 --> 00:09:51,750
limited impact or more limited impact

271
00:09:51,750 --> 00:09:55,470
than a monolithic system and that's true

272
00:09:55,470 --> 00:10:00,060
in a way James Lewis it has a fond of

273
00:10:00,060 --> 00:10:01,680
saying that micro service architectures

274
00:10:01,680 --> 00:10:03,720
buy you options mic service

275
00:10:03,720 --> 00:10:05,280
architectures come with a degree of

276
00:10:05,280 --> 00:10:06,780
complexity but in exchange that

277
00:10:06,780 --> 00:10:09,180
complexity you get some great options in

278
00:10:09,180 --> 00:10:11,970
terms of how to in this example as I

279
00:10:11,970 --> 00:10:13,650
solve your security concerns in

280
00:10:13,650 --> 00:10:16,200
different ways but there is additional

281
00:10:16,200 --> 00:10:18,020
complexity you don't get that for free

282
00:10:18,020 --> 00:10:20,640
micro services give you the opportunity

283
00:10:20,640 --> 00:10:23,310
to build more secure software but out of

284
00:10:23,310 --> 00:10:25,980
the box it they may actually create more

285
00:10:25,980 --> 00:10:28,140
problems in the air security because

286
00:10:28,140 --> 00:10:30,960
fundamentally there are more processes

287
00:10:30,960 --> 00:10:32,730
that are running those processes are

288
00:10:32,730 --> 00:10:34,350
communicating with each other over

289
00:10:34,350 --> 00:10:36,840
networks information that used to flow

290
00:10:36,840 --> 00:10:39,960
within a single process system is now

291
00:10:39,960 --> 00:10:41,790
flowing over networks we start having to

292
00:10:41,790 --> 00:10:43,140
think about network security

293
00:10:43,140 --> 00:10:45,210
you also have effectively a larger

294
00:10:45,210 --> 00:10:47,100
attack surface area we have more

295
00:10:47,100 --> 00:10:50,190
processes running and you know a weak

296
00:10:50,190 --> 00:10:53,040
spot a weak process somewhere you know

297
00:10:53,040 --> 00:10:55,050
an unpatched vulnerabilities that you've

298
00:10:55,050 --> 00:10:58,170
forgotten about or you could open up an

299
00:10:58,170 --> 00:11:00,450
opportunity for an external party to

300
00:11:00,450 --> 00:11:02,310
gain access to your system and so you

301
00:11:02,310 --> 00:11:04,350
have more places at which your

302
00:11:04,350 --> 00:11:06,020
application needs to be defied

303
00:11:06,020 --> 00:11:07,760
and protected and patched and everything

304
00:11:07,760 --> 00:11:09,740
else so there is a sort of yin and yang

305
00:11:09,740 --> 00:11:14,060
type thing it comes application security

306
00:11:14,060 --> 00:11:16,790
and micro services and sort of my bottom

307
00:11:16,790 --> 00:11:18,740
line with it has always been if you're

308
00:11:18,740 --> 00:11:20,540
smart and savvy I think you can build

309
00:11:20,540 --> 00:11:23,209
more secure applications using micro

310
00:11:23,209 --> 00:11:25,190
services but it doesn't come for free

311
00:11:25,190 --> 00:11:27,800
and I think a team which is more naive

312
00:11:27,800 --> 00:11:30,620
or less experienced when it comes to

313
00:11:30,620 --> 00:11:32,540
thinking about application security is

314
00:11:32,540 --> 00:11:34,250
likely going to end up with an

315
00:11:34,250 --> 00:11:36,350
application architecture which has more

316
00:11:36,350 --> 00:11:39,200
issues in the security space and that's

317
00:11:39,200 --> 00:11:40,459
partly what I'm going to try to help

318
00:11:40,459 --> 00:11:42,290
offset here and give you sort of what

319
00:11:42,290 --> 00:11:43,970
are just enough security things you need

320
00:11:43,970 --> 00:11:45,230
to think about for a micro service

321
00:11:45,230 --> 00:11:46,790
architecture point of view we're gonna

322
00:11:46,790 --> 00:11:47,930
go through some simple stuff we'll go

323
00:11:47,930 --> 00:11:48,980
into some more advanced stuff towards

324
00:11:48,980 --> 00:11:50,660
the end of the talk but we are going to

325
00:11:50,660 --> 00:11:54,890
start with some basics and I think I'm

326
00:11:54,890 --> 00:11:58,339
sort of I actually think as human beings

327
00:11:58,339 --> 00:12:00,170
we're not fantastic actually at

328
00:12:00,170 --> 00:12:02,600
assessing risk I think when it comes to

329
00:12:02,600 --> 00:12:04,339
security certainly when it comes things

330
00:12:04,339 --> 00:12:06,260
like application security of micro

331
00:12:06,260 --> 00:12:07,940
service architectures people immediately

332
00:12:07,940 --> 00:12:10,820
want to start talking about tokens

333
00:12:10,820 --> 00:12:13,100
confused deputy problems secret stores

334
00:12:13,100 --> 00:12:15,020
and all these sorts of things and the

335
00:12:15,020 --> 00:12:16,550
reality is that's not always the place

336
00:12:16,550 --> 00:12:18,620
to start there's actually loads of good

337
00:12:18,620 --> 00:12:21,560
data out there talking about what kind

338
00:12:21,560 --> 00:12:25,279
of mechanisms to people use to attack

339
00:12:25,279 --> 00:12:28,880
systems and one such study which I quite

340
00:12:28,880 --> 00:12:29,329
like

341
00:12:29,329 --> 00:12:32,060
is the Verizon data breach report the

342
00:12:32,060 --> 00:12:33,740
Verizon data breach report is put out

343
00:12:33,740 --> 00:12:35,540
every year this is actually taken from

344
00:12:35,540 --> 00:12:37,520
the 2017 editions so I haven't updated

345
00:12:37,520 --> 00:12:41,180
this further the 2019 version is now yet

346
00:12:41,180 --> 00:12:42,829
a 2018 years I haven't updated it for

347
00:12:42,829 --> 00:12:44,540
that slide and this was actually

348
00:12:44,540 --> 00:12:46,399
analysis looking at Verizon customers

349
00:12:46,399 --> 00:12:50,420
and they found that 81 percent of all

350
00:12:50,420 --> 00:12:53,450
the data breaches they looked at were

351
00:12:53,450 --> 00:12:55,220
sort of one of the attack vectors used

352
00:12:55,220 --> 00:12:58,160
by the malicious parties was basically a

353
00:12:58,160 --> 00:13:01,339
passwords being hacked and or stolen so

354
00:13:01,339 --> 00:13:03,770
a mix of social engineering easy to

355
00:13:03,770 --> 00:13:05,690
guess password stuff like that so the

356
00:13:05,690 --> 00:13:07,579
vast majority of their data breaches

357
00:13:07,579 --> 00:13:10,550
gaining access to stolen credentials or

358
00:13:10,550 --> 00:13:13,490
hacking weak credentials was a big part

359
00:13:13,490 --> 00:13:15,589
of how those external parties gains

360
00:13:15,589 --> 00:13:17,790
access these systems

361
00:13:17,790 --> 00:13:20,260
and this is sort of this is actually

362
00:13:20,260 --> 00:13:22,270
quite depressing in a way but also a

363
00:13:22,270 --> 00:13:24,490
good thing because actually doing better

364
00:13:24,490 --> 00:13:26,650
passwords is something that everyone can

365
00:13:26,650 --> 00:13:28,870
do but a lot of people don't actually

366
00:13:28,870 --> 00:13:31,540
know what the good advice is for

367
00:13:31,540 --> 00:13:33,970
passwords and some of the advice from

368
00:13:33,970 --> 00:13:35,830
security experts it can be a little bit

369
00:13:35,830 --> 00:13:38,020
contradictory for some if you don't know

370
00:13:38,020 --> 00:13:39,810
a bit more about how to think about

371
00:13:39,810 --> 00:13:42,640
managing passwords in a proper secure

372
00:13:42,640 --> 00:13:43,029
way

373
00:13:43,029 --> 00:13:45,070
Troy hunts got an excellent post on this

374
00:13:45,070 --> 00:13:47,170
subject and he's basically summarizing a

375
00:13:47,170 --> 00:13:49,839
lot of the information that comes out of

376
00:13:49,839 --> 00:13:52,690
nist in the US and the UK's national

377
00:13:52,690 --> 00:13:54,610
cybersecurity Center there's loads of

378
00:13:54,610 --> 00:13:56,440
great tips sort of come out of both of

379
00:13:56,440 --> 00:13:58,380
those government agencies

380
00:13:58,380 --> 00:14:01,480
recommendations and Troy is a very good

381
00:14:01,480 --> 00:14:03,400
job of sort of summarizing some of them

382
00:14:03,400 --> 00:14:04,480
I'm gonna run for you a few of them

383
00:14:04,480 --> 00:14:05,770
because I think some of these are quite

384
00:14:05,770 --> 00:14:08,080
interesting some of this stuff in here

385
00:14:08,080 --> 00:14:10,540
is quite basic right which is longer is

386
00:14:10,540 --> 00:14:12,730
stronger having a long password is

387
00:14:12,730 --> 00:14:14,230
better than having a short password

388
00:14:14,230 --> 00:14:16,990
longer passwords create more entropy and

389
00:14:16,990 --> 00:14:19,300
are therefore harder for somebody to

390
00:14:19,300 --> 00:14:22,060
hack the next thing that gets

391
00:14:22,060 --> 00:14:23,290
interesting is this that we should

392
00:14:23,290 --> 00:14:25,690
eliminate complex character composition

393
00:14:25,690 --> 00:14:28,330
rules now this actually for some people

394
00:14:28,330 --> 00:14:29,950
is of quite surprising but we've all

395
00:14:29,950 --> 00:14:32,230
been sort of stumped by really annoying

396
00:14:32,230 --> 00:14:33,760
complicated rules about coming up the

397
00:14:33,760 --> 00:14:36,760
passwords now the argument around having

398
00:14:36,760 --> 00:14:38,560
complex character competition rules is

399
00:14:38,560 --> 00:14:40,390
it's one way of increasing the entropy

400
00:14:40,390 --> 00:14:42,850
of the password but what it ends up

401
00:14:42,850 --> 00:14:45,100
doing when they're this complicated is

402
00:14:45,100 --> 00:14:47,350
people end up coming up with mnemonics

403
00:14:47,350 --> 00:14:49,270
that make these passwords very easy to

404
00:14:49,270 --> 00:14:51,820
guess and therefore much more prone to

405
00:14:51,820 --> 00:14:54,220
things like dictionary hack attacks for

406
00:14:54,220 --> 00:14:56,230
example you might say you've got to use

407
00:14:56,230 --> 00:14:58,300
a capital letter you've got two symbols

408
00:14:58,300 --> 00:15:00,130
you've got to use numbers and someone

409
00:15:00,130 --> 00:15:02,380
does capital P at symbol

410
00:15:02,380 --> 00:15:06,610
55 W 0 Rd which is in every dictionary

411
00:15:06,610 --> 00:15:09,610
file used in hacks yet breach attacks

412
00:15:09,610 --> 00:15:12,070
out there so when you have a complex

413
00:15:12,070 --> 00:15:14,170
composite character composition rules as

414
00:15:14,170 --> 00:15:17,589
your way of generating entropy you end

415
00:15:17,589 --> 00:15:19,930
up with people picking passwords which

416
00:15:19,930 --> 00:15:22,870
are very easy to actually be hacked and

417
00:15:22,870 --> 00:15:24,670
actually if you just let people use

418
00:15:24,670 --> 00:15:26,470
normal text but allowed them to do

419
00:15:26,470 --> 00:15:28,450
longer passwords you'd probably get the

420
00:15:28,450 --> 00:15:31,059
entropy you needed I

421
00:15:31,059 --> 00:15:32,979
the obvious thing is embrace password

422
00:15:32,979 --> 00:15:35,259
managers you should make it easy for

423
00:15:35,259 --> 00:15:37,689
yours for your users to make use

424
00:15:37,689 --> 00:15:39,339
password managers there's still some

425
00:15:39,339 --> 00:15:41,799
main there's some very kind of highly

426
00:15:41,799 --> 00:15:44,109
visible public facing websites and

427
00:15:44,109 --> 00:15:46,419
signup systems we still do not allow

428
00:15:46,419 --> 00:15:49,209
pasting of passwords which effectively

429
00:15:49,209 --> 00:15:50,769
stops password matches being used and

430
00:15:50,769 --> 00:15:52,629
that's really unforgivable in this day

431
00:15:52,629 --> 00:15:54,759
and age but you should be using password

432
00:15:54,759 --> 00:15:56,619
manager yourself and using unique

433
00:15:56,619 --> 00:15:58,479
passwords for every single service you

434
00:15:58,479 --> 00:16:00,609
use for your personal stuff and your

435
00:16:00,609 --> 00:16:03,309
work stuff as well and I was just having

436
00:16:03,309 --> 00:16:05,799
separate password vaults for your

437
00:16:05,799 --> 00:16:08,889
company and personal use this is a

438
00:16:08,889 --> 00:16:11,339
really interesting one do not mandate

439
00:16:11,339 --> 00:16:15,069
password changes for your users the

440
00:16:15,069 --> 00:16:18,029
reason for this is because people

441
00:16:18,029 --> 00:16:20,949
training your customers for phishing

442
00:16:20,949 --> 00:16:22,899
attacks if they if you're constantly

443
00:16:22,899 --> 00:16:25,629
bombarding them with requests to change

444
00:16:25,629 --> 00:16:27,579
their password and their so you're say

445
00:16:27,579 --> 00:16:30,699
doing it every three months or every six

446
00:16:30,699 --> 00:16:33,279
months then what happens is people just

447
00:16:33,279 --> 00:16:35,499
get bored oh I've got another password

448
00:16:35,499 --> 00:16:36,939
change I've got another password change

449
00:16:36,939 --> 00:16:38,439
oh I've got another password change and

450
00:16:38,439 --> 00:16:40,509
before you realize it actually they're

451
00:16:40,509 --> 00:16:41,879
filling in their password information

452
00:16:41,879 --> 00:16:44,409
into fake pages that have been sent to

453
00:16:44,409 --> 00:16:46,119
them so actually you're training people

454
00:16:46,119 --> 00:16:48,129
to be more susceptible to social

455
00:16:48,129 --> 00:16:49,119
engineering

456
00:16:49,119 --> 00:16:51,549
if you mandate password changes it is

457
00:16:51,549 --> 00:16:53,859
much much more sensible to block

458
00:16:53,859 --> 00:16:57,429
previously briefed passwords and there

459
00:16:57,429 --> 00:16:59,049
are systems out there like have I been

460
00:16:59,049 --> 00:16:59,619
poned

461
00:16:59,619 --> 00:17:02,139
which contain it's a basis of known rich

462
00:17:02,139 --> 00:17:04,059
passwords and it's very easy now

463
00:17:04,059 --> 00:17:05,829
actually to automate the process of

464
00:17:05,829 --> 00:17:09,099
identifying when these passwords may

465
00:17:09,099 --> 00:17:10,509
have been breached and telling people to

466
00:17:10,509 --> 00:17:12,878
upgrade or change those passwords and

467
00:17:12,878 --> 00:17:13,868
that's something that happens to me in a

468
00:17:13,868 --> 00:17:16,299
few sites now I get emails saying we

469
00:17:16,299 --> 00:17:17,829
think this part of maybe could you

470
00:17:17,829 --> 00:17:20,589
please change it and I'll much prefer

471
00:17:20,589 --> 00:17:22,388
that approach and always mandating that

472
00:17:22,388 --> 00:17:25,148
I change those things and that goes for

473
00:17:25,148 --> 00:17:27,449
something internal credentials as well

474
00:17:27,449 --> 00:17:29,590
some of you as an example of what can go

475
00:17:29,590 --> 00:17:31,419
wrong some of you I said that's actually

476
00:17:31,419 --> 00:17:32,769
probably none of you have ever heard of

477
00:17:32,769 --> 00:17:35,110
this company code spaces code spaces

478
00:17:35,110 --> 00:17:36,759
through a company that provided secure

479
00:17:36,759 --> 00:17:38,830
source code hosting they built and ran

480
00:17:38,830 --> 00:17:44,169
their system on Amazon on AWS and so

481
00:17:44,169 --> 00:17:45,100
just to

482
00:17:45,100 --> 00:17:47,770
sort of be really clear they provided

483
00:17:47,770 --> 00:17:50,440
secure source code hosting as a as a

484
00:17:50,440 --> 00:17:53,800
service and somebody got hold of the

485
00:17:53,800 --> 00:17:55,540
root amazon credentials so the root

486
00:17:55,540 --> 00:17:57,760
logging account there I don't think ever

487
00:17:57,760 --> 00:18:00,210
found out if this was an ex-employee or

488
00:18:00,210 --> 00:18:02,590
just someone who gained somebody just

489
00:18:02,590 --> 00:18:04,210
sort of hacked the credentials whatever

490
00:18:04,210 --> 00:18:05,860
but they used that and deleted the

491
00:18:05,860 --> 00:18:08,710
entire public production system for

492
00:18:08,710 --> 00:18:12,520
Coast bases unfortunately all of the

493
00:18:12,520 --> 00:18:14,410
backups for this site were also on the

494
00:18:14,410 --> 00:18:16,660
same Amazon account as was all the

495
00:18:16,660 --> 00:18:18,220
source code for the system so nothing

496
00:18:18,220 --> 00:18:19,540
can be rebuilt the basic that wiped the

497
00:18:19,540 --> 00:18:21,100
whole company out and space about five

498
00:18:21,100 --> 00:18:23,260
minutes it's a couple of things in here

499
00:18:23,260 --> 00:18:25,030
firstly you know don't leave your route

500
00:18:25,030 --> 00:18:27,160
Amazon credentials lying around secondly

501
00:18:27,160 --> 00:18:28,660
you can limit the scope of these

502
00:18:28,660 --> 00:18:30,250
credentials so if you had a separate

503
00:18:30,250 --> 00:18:31,690
account for your development purposes

504
00:18:31,690 --> 00:18:34,210
versus production a separate account for

505
00:18:34,210 --> 00:18:36,250
your backups even if someone does get

506
00:18:36,250 --> 00:18:37,810
hold of you root hours and credentials

507
00:18:37,810 --> 00:18:39,600
there's limits to what they can do

508
00:18:39,600 --> 00:18:42,370
actually this is a common problem where

509
00:18:42,370 --> 00:18:44,530
people will have API keys that they

510
00:18:44,530 --> 00:18:46,990
might have for programmatic access to

511
00:18:46,990 --> 00:18:48,640
cloud services they're often in

512
00:18:48,640 --> 00:18:50,830
configuration files because people are

513
00:18:50,830 --> 00:18:52,390
using those as part of automated

514
00:18:52,390 --> 00:18:53,470
processes they're running from their

515
00:18:53,470 --> 00:18:55,810
laptops the problem is that people can

516
00:18:55,810 --> 00:18:58,690
sometimes accidentally check these API

517
00:18:58,690 --> 00:19:00,610
credentials in there are software

518
00:19:00,610 --> 00:19:03,430
actually that you can use to scan sort

519
00:19:03,430 --> 00:19:06,340
of git repos looking for what look like

520
00:19:06,340 --> 00:19:08,890
API credentials have been checked in so

521
00:19:08,890 --> 00:19:10,570
get robbed is something I've used inside

522
00:19:10,570 --> 00:19:12,970
organizations before to do this I know

523
00:19:12,970 --> 00:19:15,070
that Amazon themselves certainly also

524
00:19:15,070 --> 00:19:17,860
scan public facing git repos looking for

525
00:19:17,860 --> 00:19:19,870
things that look like ours an API keys

526
00:19:19,870 --> 00:19:21,670
in alerting the owners so just be okay

527
00:19:21,670 --> 00:19:25,570
just be aware of that one of the way

528
00:19:25,570 --> 00:19:27,960
that you limit the impact of things like

529
00:19:27,960 --> 00:19:30,700
apps and API credentials falling into

530
00:19:30,700 --> 00:19:32,800
the wrong hands is effectively building

531
00:19:32,800 --> 00:19:33,880
in a system where those things are

532
00:19:33,880 --> 00:19:36,550
rotated on a regular basis there's a bit

533
00:19:36,550 --> 00:19:38,140
different from you know that your human

534
00:19:38,140 --> 00:19:40,750
being passwords you're thinking hear

535
00:19:40,750 --> 00:19:42,730
more about your programmatic credentials

536
00:19:42,730 --> 00:19:45,910
things used by other programs so think

537
00:19:45,910 --> 00:19:47,950
about your Amazon API keys which there's

538
00:19:47,950 --> 00:19:49,570
a lot of organizations now have a system

539
00:19:49,570 --> 00:19:51,730
whereby when you get you actually have

540
00:19:51,730 --> 00:19:53,530
to request that was an API key that you

541
00:19:53,530 --> 00:19:55,360
and that's only valid for a short period

542
00:19:55,360 --> 00:19:58,480
of time maybe half an hour so you can do

543
00:19:58,480 --> 00:20:01,330
directory federation the idea being if

544
00:20:01,330 --> 00:20:03,760
you leave those API keys they get

545
00:20:03,760 --> 00:20:05,410
checked in and they get found by

546
00:20:05,410 --> 00:20:06,250
somebody else

547
00:20:06,250 --> 00:20:07,480
they've already been revoked because

548
00:20:07,480 --> 00:20:08,980
they're getting revoked constantly on

549
00:20:08,980 --> 00:20:11,500
maybe a a 30 minute or 45 minute basis

550
00:20:11,500 --> 00:20:13,840
that's a great idea for these sort of

551
00:20:13,840 --> 00:20:16,780
more programmatic credentials but it

552
00:20:16,780 --> 00:20:18,340
also becomes a kind of a bit of a puzzle

553
00:20:18,340 --> 00:20:20,110
when we start thinking about micro

554
00:20:20,110 --> 00:20:21,970
service architectures because there are

555
00:20:21,970 --> 00:20:23,350
actually lots of credentials that we

556
00:20:23,350 --> 00:20:25,690
want are running services to have access

557
00:20:25,690 --> 00:20:27,760
to so the question is well how do they

558
00:20:27,760 --> 00:20:30,220
get there secret you know effective net

559
00:20:30,220 --> 00:20:33,220
secrets and and how do we handle revoke

560
00:20:33,220 --> 00:20:36,480
a Schnoor rotation of those credentials

561
00:20:36,480 --> 00:20:38,860
because there's the shared secrets could

562
00:20:38,860 --> 00:20:42,010
be things like API keys these could be

563
00:20:42,010 --> 00:20:45,730
keys for validating jot tokens you could

564
00:20:45,730 --> 00:20:47,260
even be thinking of things like you know

565
00:20:47,260 --> 00:20:48,850
your client-side certificate management

566
00:20:48,850 --> 00:20:51,600
but even something as basic actually as

567
00:20:51,600 --> 00:20:54,130
credentials for accessing databases you

568
00:20:54,130 --> 00:20:56,290
know here my shipping service needs to

569
00:20:56,290 --> 00:20:58,510
talk to its database to do that it's

570
00:20:58,510 --> 00:20:59,230
gonna need some authorization

571
00:20:59,230 --> 00:21:01,540
credentials it's going to need I use

572
00:21:01,540 --> 00:21:03,910
them in password and you know normally

573
00:21:03,910 --> 00:21:05,890
we would provide these user and password

574
00:21:05,890 --> 00:21:08,590
by putting them into a text file that is

575
00:21:08,590 --> 00:21:10,150
available to the running shipping

576
00:21:10,150 --> 00:21:12,429
process the shipping process reads that

577
00:21:12,429 --> 00:21:16,059
information out as a public certainly a

578
00:21:16,059 --> 00:21:19,059
runtime and they can use that to access

579
00:21:19,059 --> 00:21:21,760
the database to get its data of course

580
00:21:21,760 --> 00:21:23,500
if that text files F lying around people

581
00:21:23,500 --> 00:21:24,940
can get hold of those credentials which

582
00:21:24,940 --> 00:21:26,710
could be a problem

583
00:21:26,710 --> 00:21:28,270
and so we've got a couple of issues it's

584
00:21:28,270 --> 00:21:30,700
like well I've got these text files now

585
00:21:30,700 --> 00:21:32,169
but now I've got lots of lots of text

586
00:21:32,169 --> 00:21:35,049
files and these text file I look there's

587
00:21:35,049 --> 00:21:36,160
this other thing with microservice

588
00:21:36,160 --> 00:21:38,230
architectures which is that quite often

589
00:21:38,230 --> 00:21:40,150
you build a micro service and it just

590
00:21:40,150 --> 00:21:41,890
works and it doesn't need to be changed

591
00:21:41,890 --> 00:21:43,360
for six months or a year so how do you

592
00:21:43,360 --> 00:21:46,960
handle revoking credentials of a service

593
00:21:46,960 --> 00:21:49,120
which is just out there and running you

594
00:21:49,120 --> 00:21:50,890
know do you have to now redeploy the

595
00:21:50,890 --> 00:21:52,330
service to really put the configuration

596
00:21:52,330 --> 00:21:54,070
do you have to come up with some kind of

597
00:21:54,070 --> 00:21:55,690
centralized management system for your

598
00:21:55,690 --> 00:21:57,250
configuration value so you can update

599
00:21:57,250 --> 00:21:59,650
these values but then how does that work

600
00:21:59,650 --> 00:22:01,299
when we've got things like secrets that

601
00:22:01,299 --> 00:22:03,340
you don't really want in in plain text

602
00:22:03,340 --> 00:22:05,950
and this is where tools secret stores

603
00:22:05,950 --> 00:22:07,360
come into play and they can be really

604
00:22:07,360 --> 00:22:08,919
useful for Microsoft arc attackers

605
00:22:08,919 --> 00:22:10,960
because they can help solve the problem

606
00:22:10,960 --> 00:22:12,370
of distributing

607
00:22:12,370 --> 00:22:14,950
secrets to large number of processes but

608
00:22:14,950 --> 00:22:17,530
also handling revocation or rotation of

609
00:22:17,530 --> 00:22:19,300
those credentials are on an ongoing

610
00:22:19,300 --> 00:22:21,300
basis

611
00:22:21,300 --> 00:22:23,830
mostly all the cloud wealth and big

612
00:22:23,830 --> 00:22:25,660
cloud vendors have some support for this

613
00:22:25,660 --> 00:22:26,650
you've got things like a TMS key

614
00:22:26,650 --> 00:22:28,600
measurement service and parameter store

615
00:22:28,600 --> 00:22:30,070
and those sorts of things I'm a ws for

616
00:22:30,070 --> 00:22:33,430
example I'm a big fan of vault from

617
00:22:33,430 --> 00:22:35,980
hashey Corp so this is a really powerful

618
00:22:35,980 --> 00:22:37,660
tool there's many many different things

619
00:22:37,660 --> 00:22:39,790
but I'm gonna focus on kind of its its

620
00:22:39,790 --> 00:22:42,100
core use in a way and this is something

621
00:22:42,100 --> 00:22:43,930
that you are free to deploy you're

622
00:22:43,930 --> 00:22:46,210
saying you put yourself it works really

623
00:22:46,210 --> 00:22:48,100
well on systems that run out of a

624
00:22:48,100 --> 00:22:49,540
kubernetes it works really well terms

625
00:22:49,540 --> 00:22:52,090
that don't use kubernetes you can kind

626
00:22:52,090 --> 00:22:53,920
of it's like a dedicated open-source

627
00:22:53,920 --> 00:22:55,450
secret store you can deploy and run the

628
00:22:55,450 --> 00:22:56,920
system it's a really really interesting

629
00:22:56,920 --> 00:23:00,250
powerful tool one of the things it does

630
00:23:00,250 --> 00:23:02,290
it's really smart is its able to issue

631
00:23:02,290 --> 00:23:04,240
time limited credentials it supports

632
00:23:04,240 --> 00:23:06,550
different backends so your application

633
00:23:06,550 --> 00:23:09,910
can go and say can I have they use them

634
00:23:09,910 --> 00:23:12,550
and password for my database and vault

635
00:23:12,550 --> 00:23:15,520
can actually speak and pull here to

636
00:23:15,520 --> 00:23:18,190
Postgres on your behalf and generate

637
00:23:18,190 --> 00:23:20,920
on-the-fly a user name and database

638
00:23:20,920 --> 00:23:23,320
credential just for that application and

639
00:23:23,320 --> 00:23:25,059
specifically just for instance of the

640
00:23:25,059 --> 00:23:27,490
application as you're limiting who has

641
00:23:27,490 --> 00:23:29,679
access those credentials and you can

642
00:23:29,679 --> 00:23:31,690
also it'll also handle automatic

643
00:23:31,690 --> 00:23:33,880
revocation of those so fort has support

644
00:23:33,880 --> 00:23:35,679
for different kinds of backends and of

645
00:23:35,679 --> 00:23:37,540
course volt can do that just as well for

646
00:23:37,540 --> 00:23:39,220
human beings there's anything else and

647
00:23:39,220 --> 00:23:41,350
so I've used volt for issuing time noted

648
00:23:41,350 --> 00:23:43,870
Amazon API keys as an alternative to

649
00:23:43,870 --> 00:23:44,950
something like Active Directory

650
00:23:44,950 --> 00:23:47,230
Federation so that's nice and if the

651
00:23:47,230 --> 00:23:48,670
application wants to speak directly to

652
00:23:48,670 --> 00:23:50,020
volt and you can certainly have your

653
00:23:50,020 --> 00:23:52,780
application be programmed to talk to

654
00:23:52,780 --> 00:23:56,800
volt the Reiki virus API the kind of but

655
00:23:56,800 --> 00:23:58,480
that's that means your application sort

656
00:23:58,480 --> 00:24:00,760
of has to be changed to talk to volt and

657
00:24:00,760 --> 00:24:02,590
that's a that's about a bunch of work

658
00:24:02,590 --> 00:24:04,840
and that's actually where a sort of

659
00:24:04,840 --> 00:24:07,540
relate a related project company that's

660
00:24:07,540 --> 00:24:09,700
a project called console template what

661
00:24:09,700 --> 00:24:11,920
console template does is it allows you

662
00:24:11,920 --> 00:24:14,590
to update the content of text files

663
00:24:14,590 --> 00:24:17,020
based on what's either in console which

664
00:24:17,020 --> 00:24:19,000
is Hasek up so it's scary tool or and

665
00:24:19,000 --> 00:24:21,970
also in volt so this means is you can

666
00:24:21,970 --> 00:24:23,380
have a configuration file so here's an

667
00:24:23,380 --> 00:24:26,020
example the configuration file where I'm

668
00:24:26,020 --> 00:24:31,060
specifying where my sort of post quiz

669
00:24:31,060 --> 00:24:33,370
instances and what volt will do is it

670
00:24:33,370 --> 00:24:35,860
can dynamically update that text file

671
00:24:35,860 --> 00:24:38,500
for me as the values in my secret store

672
00:24:38,500 --> 00:24:41,170
change so my running application doesn't

673
00:24:41,170 --> 00:24:43,270
now need to know about volt it just

674
00:24:43,270 --> 00:24:44,770
needs to know about where is that text

675
00:24:44,770 --> 00:24:46,720
file and be able to reread that text

676
00:24:46,720 --> 00:24:48,910
file when it changes and that's pretty

677
00:24:48,910 --> 00:24:50,200
lovely now because I've got all this

678
00:24:50,200 --> 00:24:51,670
stuff if I can read from a configuration

679
00:24:51,670 --> 00:24:54,250
file and if I can install volt I can now

680
00:24:54,250 --> 00:24:56,050
have volt dynamic change those

681
00:24:56,050 --> 00:24:57,910
credentials revoke those credentials

682
00:24:57,910 --> 00:24:59,890
that's needed as long as my application

683
00:24:59,890 --> 00:25:02,260
can reread those text files I'm good to

684
00:25:02,260 --> 00:25:03,490
go

685
00:25:03,490 --> 00:25:04,960
let's look at some other sort of sort of

686
00:25:04,960 --> 00:25:06,640
things I've put in the basic but

687
00:25:06,640 --> 00:25:08,350
difficult with mocha services world and

688
00:25:08,350 --> 00:25:10,720
that's things like patching so is

689
00:25:10,720 --> 00:25:12,550
another study from 2016 we're going a

690
00:25:12,550 --> 00:25:15,160
bit further back here it's a study done

691
00:25:15,160 --> 00:25:18,430
by Forbes from BMC they've found in 44%

692
00:25:18,430 --> 00:25:20,490
of all security breaches they looked at

693
00:25:20,490 --> 00:25:23,800
basically the vulnerabilities that were

694
00:25:23,800 --> 00:25:27,060
sort of used as part of that breach

695
00:25:27,060 --> 00:25:29,350
those vulnerabilities were already known

696
00:25:29,350 --> 00:25:31,540
and fixers were already available for

697
00:25:31,540 --> 00:25:33,970
them in other words you saw a problem

698
00:25:33,970 --> 00:25:35,520
like zombies leaving the back door open

699
00:25:35,520 --> 00:25:37,810
rather than closing that back all you

700
00:25:37,810 --> 00:25:39,910
carry on then someone gets into the back

701
00:25:39,910 --> 00:25:41,860
door and still who yourself it's like

702
00:25:41,860 --> 00:25:43,570
well if we close the back to earlier

703
00:25:43,570 --> 00:25:45,970
this wouldn't have happened as a really

704
00:25:45,970 --> 00:25:48,340
great recent example of this kind of

705
00:25:48,340 --> 00:25:50,830
phenomenon we can come back to Equifax

706
00:25:50,830 --> 00:25:52,630
so Equifax is a very serious breach

707
00:25:52,630 --> 00:25:55,360
because Equifax fundamentally is a

708
00:25:55,360 --> 00:25:58,030
credit scoring agency so they have to

709
00:25:58,030 --> 00:26:00,370
have a lot of information about their

710
00:26:00,370 --> 00:26:02,320
customers in order to assess their

711
00:26:02,320 --> 00:26:03,190
creditworthiness

712
00:26:03,190 --> 00:26:04,870
when that data there was therefore

713
00:26:04,870 --> 00:26:07,090
breached there was lots of very valuable

714
00:26:07,090 --> 00:26:09,220
information in that talking about things

715
00:26:09,220 --> 00:26:11,170
like you know well just talking about

716
00:26:11,170 --> 00:26:13,180
basic things that we already know people

717
00:26:13,180 --> 00:26:15,280
stole them about us like you know all

718
00:26:15,280 --> 00:26:17,530
right yeah I email addresses and our

719
00:26:17,530 --> 00:26:19,180
date of birth we're talking Social

720
00:26:19,180 --> 00:26:21,310
Security numbers here bank details all

721
00:26:21,310 --> 00:26:22,690
the addresses you've lived in all this

722
00:26:22,690 --> 00:26:25,210
is huge amounts of information and that

723
00:26:25,210 --> 00:26:26,440
that you know you don't get that back

724
00:26:26,440 --> 00:26:28,840
right so this is a big big big serious

725
00:26:28,840 --> 00:26:30,520
deal now it turned out in this

726
00:26:30,520 --> 00:26:33,010
particular situation that the there was

727
00:26:33,010 --> 00:26:35,620
a vulnerability in a web application

728
00:26:35,620 --> 00:26:38,890
library that the Equifax team were using

729
00:26:38,890 --> 00:26:40,000
so they were using

730
00:26:40,000 --> 00:26:42,010
a web application a Java web app

731
00:26:42,010 --> 00:26:44,950
framework called struts and a

732
00:26:44,950 --> 00:26:46,690
variability was detected in struts

733
00:26:46,690 --> 00:26:49,660
here's the CVE entry for it

734
00:26:49,660 --> 00:26:51,490
and you can see here that when you go to

735
00:26:51,490 --> 00:26:53,200
the cv database you can see they have

736
00:26:53,200 --> 00:26:55,450
these little impact scores as the CBS s

737
00:26:55,450 --> 00:26:58,000
severity score and we can see that this

738
00:26:58,000 --> 00:27:00,400
particular vulnerability in struts has a

739
00:27:00,400 --> 00:27:06,430
base score of 10 so 10 is critical now

740
00:27:06,430 --> 00:27:07,870
did the key thing to understand here is

741
00:27:07,870 --> 00:27:10,870
that this score of 10 is not out of 100

742
00:27:10,870 --> 00:27:13,660
or out of a thousand it's out of 10 and

743
00:27:13,660 --> 00:27:15,700
10 is not the good into the scale this

744
00:27:15,700 --> 00:27:17,410
is about as bad as it could possibly be

745
00:27:17,410 --> 00:27:20,500
this vulnerability that's not good the

746
00:27:20,500 --> 00:27:22,870
vulnerability was actually reported to

747
00:27:22,870 --> 00:27:26,200
people in March 2017 so basically

748
00:27:26,200 --> 00:27:28,650
researchers found this vulnerability and

749
00:27:28,650 --> 00:27:31,660
reported this vulnerability too and

750
00:27:31,660 --> 00:27:34,390
basically so reported it publicly at the

751
00:27:34,390 --> 00:27:36,400
same time the patches were made

752
00:27:36,400 --> 00:27:38,530
available it's quite a common practice

753
00:27:38,530 --> 00:27:39,940
but you have major fun abilities like

754
00:27:39,940 --> 00:27:41,830
this because basically behind the scenes

755
00:27:41,830 --> 00:27:44,050
what's happening is someone's found this

756
00:27:44,050 --> 00:27:45,700
defects they've gotten spoken to the

757
00:27:45,700 --> 00:27:47,440
people who maintain his software said

758
00:27:47,440 --> 00:27:49,510
look this sleep bad let's get some

759
00:27:49,510 --> 00:27:51,610
patches out so people can fix this

760
00:27:51,610 --> 00:27:53,890
problem and then to make sure people do

761
00:27:53,890 --> 00:27:56,170
actually apply the patches they report

762
00:27:56,170 --> 00:27:58,690
information about the bug as well so you

763
00:27:58,690 --> 00:28:01,360
have a real reason to do the upgrades so

764
00:28:01,360 --> 00:28:03,370
it's a very common patent this so the

765
00:28:03,370 --> 00:28:05,740
bugs was announced it's massively nasty

766
00:28:05,740 --> 00:28:07,960
bug at the same time as the patches are

767
00:28:07,960 --> 00:28:09,880
available that's good stuff that's

768
00:28:09,880 --> 00:28:12,130
really really good stuff actually says

769
00:28:12,130 --> 00:28:14,590
7th of March these patches are available

770
00:28:14,590 --> 00:28:15,880
now let's talk about what we know about

771
00:28:15,880 --> 00:28:18,580
Equifax so we know that the breach when

772
00:28:18,580 --> 00:28:21,100
all this data was stolen this happened

773
00:28:21,100 --> 00:28:24,940
sometime between mid May and July of

774
00:28:24,940 --> 00:28:28,480
that year of 2017 this was a graphics

775
00:28:28,480 --> 00:28:31,660
are not quite sure when it happened in

776
00:28:31,660 --> 00:28:33,280
that window bit somewhere in that window

777
00:28:33,280 --> 00:28:35,800
now they spotted this problem in July

778
00:28:35,800 --> 00:28:39,400
29th ok so if it happened in mid-may

779
00:28:39,400 --> 00:28:40,990
there's quite a long time until they

780
00:28:40,990 --> 00:28:43,030
noticed it not great

781
00:28:43,030 --> 00:28:45,670
what's also not great is that although

782
00:28:45,670 --> 00:28:48,190
they spotted it internally this breach

783
00:28:48,190 --> 00:28:51,100
on the 29th of July they didn't actually

784
00:28:51,100 --> 00:28:54,020
report it until September the 7th

785
00:28:54,020 --> 00:28:57,580
which is is as you can see a massive gap

786
00:28:57,580 --> 00:29:00,080
it's interesting that there are no

787
00:29:00,080 --> 00:29:01,820
mandatory data breach reporting

788
00:29:01,820 --> 00:29:03,740
requirements in the u.s. there are now

789
00:29:03,740 --> 00:29:06,080
in the EU I believe it's part of the GD

790
00:29:06,080 --> 00:29:09,740
P R and I'm a big fan of mandatory you

791
00:29:09,740 --> 00:29:11,330
know if you're if you lose your

792
00:29:11,330 --> 00:29:13,100
customers data you have to tell them

793
00:29:13,100 --> 00:29:15,470
right the fact that this is not an

794
00:29:15,470 --> 00:29:17,120
option that you have the option not to

795
00:29:17,120 --> 00:29:17,690
tell them

796
00:29:17,690 --> 00:29:19,730
that's pretty unforgiveable there's also

797
00:29:19,730 --> 00:29:21,050
something else interesting between you

798
00:29:21,050 --> 00:29:22,820
to date is between July 29th and

799
00:29:22,820 --> 00:29:26,000
September 7th some equifax executives

800
00:29:26,000 --> 00:29:28,490
did offload some of their stock which I

801
00:29:28,490 --> 00:29:30,800
know has got the got the interest of the

802
00:29:30,800 --> 00:29:32,390
Securities and Exchange Commission as

803
00:29:32,390 --> 00:29:34,040
well because there's potential insider

804
00:29:34,040 --> 00:29:37,370
trading concerns there of course so we

805
00:29:37,370 --> 00:29:40,010
know that by the time they discovered

806
00:29:40,010 --> 00:29:43,460
the breach the patch had been available

807
00:29:43,460 --> 00:29:45,830
for at least two months so if the breach

808
00:29:45,830 --> 00:29:47,720
had happened in mid-may they at least a

809
00:29:47,720 --> 00:29:49,070
two month window before they could have

810
00:29:49,070 --> 00:29:51,650
updated that and fixed that it could

811
00:29:51,650 --> 00:29:52,700
have been as long as four months they

812
00:29:52,700 --> 00:29:54,020
could have had it up to four months to

813
00:29:54,020 --> 00:29:55,460
apply that patch to stop this problem

814
00:29:55,460 --> 00:30:00,530
stone-dead so two to four months so I'd

815
00:30:00,530 --> 00:30:02,270
be kind of I can't see you all of

816
00:30:02,270 --> 00:30:03,679
watching all over the world but let me

817
00:30:03,679 --> 00:30:05,150
ask the question about how many of you

818
00:30:05,150 --> 00:30:09,260
are confident that you patch all of your

819
00:30:09,260 --> 00:30:10,970
systems every two every two to four

820
00:30:10,970 --> 00:30:13,010
months that within a two to four month

821
00:30:13,010 --> 00:30:14,809
window all of the software you run on

822
00:30:14,809 --> 00:30:16,520
has applied all of his patches and is up

823
00:30:16,520 --> 00:30:18,470
to date with the latest known

824
00:30:18,470 --> 00:30:22,250
vulnerability fixes and I think it's

825
00:30:22,250 --> 00:30:23,540
often I get other people saying yes I'm

826
00:30:23,540 --> 00:30:25,010
actually pretty confident about that but

827
00:30:25,010 --> 00:30:26,690
when you start diving a bit deeper into

828
00:30:26,690 --> 00:30:28,910
Mike receive a security stack so you

829
00:30:28,910 --> 00:30:30,530
think about the common deployment stack

830
00:30:30,530 --> 00:30:32,840
from access architecture it's a little

831
00:30:32,840 --> 00:30:35,179
bit of a complex affair there's lots of

832
00:30:35,179 --> 00:30:36,770
layers and layers and layers and things

833
00:30:36,770 --> 00:30:39,170
nesting going on you know we think about

834
00:30:39,170 --> 00:30:40,940
we've got our underlying Hardware on top

835
00:30:40,940 --> 00:30:43,520
of our underlying hardware we have our

836
00:30:43,520 --> 00:30:45,410
operating systems and top of our

837
00:30:45,410 --> 00:30:47,420
operating systems we we will run our

838
00:30:47,420 --> 00:30:48,740
hypervisor this is whether our

839
00:30:48,740 --> 00:30:49,910
virtualization kicks in the

840
00:30:49,910 --> 00:30:52,580
virtualization or maintain separate VMs

841
00:30:52,580 --> 00:30:55,070
this would be it's at this point this is

842
00:30:55,070 --> 00:30:56,540
sort of what you would have if you were

843
00:30:56,540 --> 00:30:58,640
say running the managed virtual machines

844
00:30:58,640 --> 00:31:02,390
on AWS or Azure or Google or within your

845
00:31:02,390 --> 00:31:04,610
own data centers of course virtual

846
00:31:04,610 --> 00:31:07,580
machines are very very 2010

847
00:31:07,580 --> 00:31:09,200
now everyone's using containers so we

848
00:31:09,200 --> 00:31:11,660
probably got some container library like

849
00:31:11,660 --> 00:31:13,910
docker on top of docker we've now got a

850
00:31:13,910 --> 00:31:15,410
container operating system running

851
00:31:15,410 --> 00:31:17,540
inside your container image on top of

852
00:31:17,540 --> 00:31:19,580
your container operating system you've

853
00:31:19,580 --> 00:31:22,340
got your application running on top of

854
00:31:22,340 --> 00:31:26,660
there as well so this is a is the sort

855
00:31:26,660 --> 00:31:28,070
of stack that you would expect to see

856
00:31:28,070 --> 00:31:32,000
with a modern a sort of micro service

857
00:31:32,000 --> 00:31:33,800
application stack running on the

858
00:31:33,800 --> 00:31:38,120
containerized platform with and

859
00:31:38,120 --> 00:31:40,010
virtualization and that's normally how

860
00:31:40,010 --> 00:31:41,390
these things are done it's very rare

861
00:31:41,390 --> 00:31:42,890
that people run dr2 it's straight on

862
00:31:42,890 --> 00:31:44,660
bare metal they normally run inside

863
00:31:44,660 --> 00:31:48,350
virtualized machines so every single

864
00:31:48,350 --> 00:31:51,080
layer here needs patching every single

865
00:31:51,080 --> 00:31:52,730
layer and we know our Hardware nees

866
00:31:52,730 --> 00:31:54,350
patching the more remember aspects are

867
00:31:54,350 --> 00:31:58,010
in meltdown right so given that if this

868
00:31:58,010 --> 00:31:59,360
is what your application stack looks

869
00:31:59,360 --> 00:32:01,040
like it is what your diploma stack looks

870
00:32:01,040 --> 00:32:02,630
like how many people are wondering out

871
00:32:02,630 --> 00:32:05,090
there are still confident that you're

872
00:32:05,090 --> 00:32:06,530
applying those patches every two to four

873
00:32:06,530 --> 00:32:09,470
months the issue is is that there's lots

874
00:32:09,470 --> 00:32:10,520
of different layers those layers are

875
00:32:10,520 --> 00:32:11,930
owned by different people you don't have

876
00:32:11,930 --> 00:32:13,640
visibility and so who's doing what and

877
00:32:13,640 --> 00:32:15,050
it's like it's confusing so it's like

878
00:32:15,050 --> 00:32:16,520
well okay so how can we solve these

879
00:32:16,520 --> 00:32:19,040
problems well the first thing is just go

880
00:32:19,040 --> 00:32:21,140
on the cloud you know a public cloud

881
00:32:21,140 --> 00:32:24,040
right go to the sewer go to Google go to

882
00:32:24,040 --> 00:32:27,320
Amazon because even just if we think

883
00:32:27,320 --> 00:32:28,820
just for the managed virtual machine

884
00:32:28,820 --> 00:32:31,220
point of view the cloud provider is

885
00:32:31,220 --> 00:32:33,050
gonna handle patching the hardware the

886
00:32:33,050 --> 00:32:34,820
operating system the hypervisors for you

887
00:32:34,820 --> 00:32:37,010
done you do not need to worry about that

888
00:32:37,010 --> 00:32:39,500
and actually if you're using the VMS

889
00:32:39,500 --> 00:32:41,330
they give you you can also to an extent

890
00:32:41,330 --> 00:32:44,870
they'll do that for you as well we know

891
00:32:44,870 --> 00:32:46,310
for example that wood inspector and

892
00:32:46,310 --> 00:32:48,290
meltdown bugs patches were made

893
00:32:48,290 --> 00:32:50,300
available for all the cloud vendors had

894
00:32:50,300 --> 00:32:52,310
rolled those out within a week and we

895
00:32:52,310 --> 00:32:53,480
could tell that because all of our

896
00:32:53,480 --> 00:32:57,680
machines got 30% slower so offload the

897
00:32:57,680 --> 00:32:59,780
requirements I don't mean to offend any

898
00:32:59,780 --> 00:33:02,150
of you but it's highly likely that the

899
00:33:02,150 --> 00:33:03,770
big three public cloud vendors do a

900
00:33:03,770 --> 00:33:06,350
significantly better job of managing

901
00:33:06,350 --> 00:33:08,920
fleets of virtual machines than you do

902
00:33:08,920 --> 00:33:11,390
they provide their services they run

903
00:33:11,390 --> 00:33:13,130
them at scale they have a huge amount of

904
00:33:13,130 --> 00:33:15,230
expertise and looking after these things

905
00:33:15,230 --> 00:33:16,760
and so you just offload a bunch of these

906
00:33:16,760 --> 00:33:18,680
concerns so a nice thing about the

907
00:33:18,680 --> 00:33:21,539
public cloud if you go to a clouds

908
00:33:21,539 --> 00:33:23,129
Vidor and rather than going with virtual

909
00:33:23,129 --> 00:33:24,389
machines you instead going from maybe

910
00:33:24,389 --> 00:33:27,419
one of their managed kubernetes or

911
00:33:27,419 --> 00:33:30,210
container platforms options so you might

912
00:33:30,210 --> 00:33:32,899
be going to say a managed Cloud Foundry

913
00:33:32,899 --> 00:33:36,690
kubernetes ECS even more of that

914
00:33:36,690 --> 00:33:38,669
deployment stack is being handled for

915
00:33:38,669 --> 00:33:40,409
you from a point of view of patching

916
00:33:40,409 --> 00:33:42,749
everything else and increasingly for

917
00:33:42,749 --> 00:33:44,489
people on public cloud platforms is the

918
00:33:44,489 --> 00:33:47,190
direction they're going in kubernetes as

919
00:33:47,190 --> 00:33:48,419
well doesn't mean you have to run your

920
00:33:48,419 --> 00:33:51,629
own kubernetes of course that still

921
00:33:51,629 --> 00:33:53,070
leaves some of the things under our

922
00:33:53,070 --> 00:33:53,970
control

923
00:33:53,970 --> 00:33:56,369
typically the container operating system

924
00:33:56,369 --> 00:33:58,769
that runs inside of a container image

925
00:33:58,769 --> 00:34:00,840
and the application that your

926
00:34:00,840 --> 00:34:03,419
application is running inside that

927
00:34:03,419 --> 00:34:04,950
container image world that's still your

928
00:34:04,950 --> 00:34:07,109
responsibility to look after unless

929
00:34:07,109 --> 00:34:08,399
you're maybe picking an even higher

930
00:34:08,399 --> 00:34:10,409
level abstraction if you're maybe

931
00:34:10,409 --> 00:34:12,480
picking says servlets deployments back

932
00:34:12,480 --> 00:34:14,460
for example you might be deploying

933
00:34:14,460 --> 00:34:16,770
application code onto a managed runtime

934
00:34:16,770 --> 00:34:18,629
which in turn is running on top of

935
00:34:18,629 --> 00:34:21,179
managed container so using say is your

936
00:34:21,179 --> 00:34:24,418
cloud functions a bit of lambda again

937
00:34:24,418 --> 00:34:26,520
there's even an even smaller scope of

938
00:34:26,520 --> 00:34:28,829
what you have to worry about but you

939
00:34:28,829 --> 00:34:29,668
still have to worry about your

940
00:34:29,668 --> 00:34:31,918
application code and importantly just as

941
00:34:31,918 --> 00:34:34,429
Equifax did you have to think about

942
00:34:34,429 --> 00:34:36,449
vulnerabilities in your third-party

943
00:34:36,449 --> 00:34:40,379
library dependencies too so what are our

944
00:34:40,379 --> 00:34:42,089
solutions out there well there are tools

945
00:34:42,089 --> 00:34:43,859
out there for scanning for

946
00:34:43,859 --> 00:34:45,659
vulnerabilities and containers some of

947
00:34:45,659 --> 00:34:47,040
you may have heard of things like Claire

948
00:34:47,040 --> 00:34:48,899
which has been around for a while Claire

949
00:34:48,899 --> 00:34:52,609
has some limitations I've certainly seen

950
00:34:52,609 --> 00:34:54,780
issues with it running taking quite long

951
00:34:54,780 --> 00:34:56,190
times and runs and pick up all that is

952
00:34:56,190 --> 00:34:57,720
this it's a good starting point for

953
00:34:57,720 --> 00:34:59,940
looking at some vulnerabilities and

954
00:34:59,940 --> 00:35:02,069
application containers but there are

955
00:35:02,069 --> 00:35:04,349
more modern effective solutions out

956
00:35:04,349 --> 00:35:06,119
there for container based vulnerability

957
00:35:06,119 --> 00:35:08,730
detection and more active scanning and

958
00:35:08,730 --> 00:35:11,309
monitoring in production systems and I'd

959
00:35:11,309 --> 00:35:12,809
be looking at things like a cure for

960
00:35:12,809 --> 00:35:14,790
those sorts of things because you know

961
00:35:14,790 --> 00:35:17,190
you can take a you know the latest and

962
00:35:17,190 --> 00:35:20,160
greatest ubuntu container operating

963
00:35:20,160 --> 00:35:22,230
system to run inside your container

964
00:35:22,230 --> 00:35:24,720
image which is not a lot people do that

965
00:35:24,720 --> 00:35:26,520
anymore it's quite big but you pick the

966
00:35:26,520 --> 00:35:28,770
latest Alpine right and it's got no

967
00:35:28,770 --> 00:35:29,940
vulnerabilities it's brand new it's been

968
00:35:29,940 --> 00:35:31,380
patched it's updated and you deploy it

969
00:35:31,380 --> 00:35:33,329
and you deploy it onto a service and you

970
00:35:33,329 --> 00:35:34,410
don't touch that service it

971
00:35:34,410 --> 00:35:36,180
but guess what that service has not been

972
00:35:36,180 --> 00:35:37,920
patched for six months do you know that

973
00:35:37,920 --> 00:35:39,990
are you aware of what vulnerabilities

974
00:35:39,990 --> 00:35:41,490
might be running either inside that's

975
00:35:41,490 --> 00:35:42,480
not the system because you haven't

976
00:35:42,480 --> 00:35:44,370
touched it for so long this is where

977
00:35:44,370 --> 00:35:46,500
things like aqua can really help when it

978
00:35:46,500 --> 00:35:49,560
comes to application dependencies this

979
00:35:49,560 --> 00:35:52,710
is where I really really likes Nick and

980
00:35:52,710 --> 00:35:56,040
then snicker actually sponsoring is the

981
00:35:56,040 --> 00:35:58,440
secure developer workers work as well so

982
00:35:58,440 --> 00:36:01,560
so thanks very much for that I I'm doing

983
00:36:01,560 --> 00:36:03,330
this talk for free I call really likes

984
00:36:03,330 --> 00:36:05,340
Nick right I'd do it yeah I do get paid

985
00:36:05,340 --> 00:36:09,480
right snicks does a fantastic job of

986
00:36:09,480 --> 00:36:11,250
monitoring your application dependencies

987
00:36:11,250 --> 00:36:13,770
and it will send you an email saying

988
00:36:13,770 --> 00:36:15,270
your dependencies have known

989
00:36:15,270 --> 00:36:16,980
vulnerabilities in them here's a pull

990
00:36:16,980 --> 00:36:18,720
request to fix a dependency so you can

991
00:36:18,720 --> 00:36:20,580
get laces and greatest versions I also

992
00:36:20,580 --> 00:36:22,080
like the fact you can build it into your

993
00:36:22,080 --> 00:36:24,120
CI workflows as well so your builds will

994
00:36:24,120 --> 00:36:26,480
fail if you're depending on third-party

995
00:36:26,480 --> 00:36:29,700
vulnerabilities that would and so you

996
00:36:29,700 --> 00:36:31,020
can't deploy a new version of your

997
00:36:31,020 --> 00:36:32,210
software you've addressed those issues

998
00:36:32,210 --> 00:36:34,410
it's something like this could have

999
00:36:34,410 --> 00:36:35,970
saved that equifax an awful lot of money

1000
00:36:35,970 --> 00:36:38,700
so for me it's sort of a sneak or

1001
00:36:38,700 --> 00:36:40,620
similar type at all is a no-brainer

1002
00:36:40,620 --> 00:36:42,810
there are alternatives stick out there

1003
00:36:42,810 --> 00:36:45,360
most of them tend to be quite specific

1004
00:36:45,360 --> 00:36:48,030
for certain technology stacks so I've

1005
00:36:48,030 --> 00:36:49,590
use NPM check in the past for example

1006
00:36:49,590 --> 00:36:51,540
that's from that very gnarly just

1007
00:36:51,540 --> 00:36:54,240
looking at sort of mode and we're snick

1008
00:36:54,240 --> 00:36:55,620
has support for lots different

1009
00:36:55,620 --> 00:36:59,340
application stacks so this is this is

1010
00:36:59,340 --> 00:37:00,930
sort of table stacks of stuff right this

1011
00:37:00,930 --> 00:37:03,860
is just why wouldn't you have ongoing

1012
00:37:03,860 --> 00:37:06,180
checking if your patch levels just built

1013
00:37:06,180 --> 00:37:08,550
in your CI process that just seemed like

1014
00:37:08,550 --> 00:37:10,920
a really easy obvious thing to do we

1015
00:37:10,920 --> 00:37:13,260
expect live daily feedback of the

1016
00:37:13,260 --> 00:37:14,400
quality of our software from a

1017
00:37:14,400 --> 00:37:15,690
functional point of view by running

1018
00:37:15,690 --> 00:37:18,510
tests here on our local machines CI when

1019
00:37:18,510 --> 00:37:20,700
we check in why can't we have the same

1020
00:37:20,700 --> 00:37:23,010
things with things like snake and aqua

1021
00:37:23,010 --> 00:37:25,230
for our you know our you know our

1022
00:37:25,230 --> 00:37:28,290
microsomia deployments as well so that's

1023
00:37:28,290 --> 00:37:30,690
that's good thing right from micro

1024
00:37:30,690 --> 00:37:32,490
summit stacks is getting a bit more

1025
00:37:32,490 --> 00:37:35,550
active monitoring and also automated and

1026
00:37:35,550 --> 00:37:37,860
automatable tools in that chain both

1027
00:37:37,860 --> 00:37:40,950
aqua and snicker very easy to integrate

1028
00:37:40,950 --> 00:37:43,490
into sort of modern developer workflows

1029
00:37:43,490 --> 00:37:46,170
I'd also say at this stage that that

1030
00:37:46,170 --> 00:37:47,940
doing some kind of threat modeling is

1031
00:37:47,940 --> 00:37:48,660
really quite

1032
00:37:48,660 --> 00:37:51,480
Orton I've sort of pointed at more

1033
00:37:51,480 --> 00:37:53,490
general places where you might want to

1034
00:37:53,490 --> 00:37:55,470
think about vulnerabilities in your

1035
00:37:55,470 --> 00:37:57,150
system password patching things like

1036
00:37:57,150 --> 00:37:58,500
that and that's because I just don't

1037
00:37:58,500 --> 00:38:00,539
know brain stuff you should look at when

1038
00:38:00,539 --> 00:38:01,920
you start when people start getting to

1039
00:38:01,920 --> 00:38:03,569
that next level of okay what next do I

1040
00:38:03,569 --> 00:38:04,079
worry about

1041
00:38:04,079 --> 00:38:06,710
it's often important to do some sort of

1042
00:38:06,710 --> 00:38:09,750
take a step back and think a bit more

1043
00:38:09,750 --> 00:38:11,849
broadly about the threats that you are

1044
00:38:11,849 --> 00:38:14,789
most worried about a threat modeling

1045
00:38:14,789 --> 00:38:16,589
exercise something using something like

1046
00:38:16,589 --> 00:38:19,670
the stride or dread threat modeling

1047
00:38:19,670 --> 00:38:22,079
systems would be a really good way of

1048
00:38:22,079 --> 00:38:23,339
you sort of taking an objective

1049
00:38:23,339 --> 00:38:24,900
assessment about where your

1050
00:38:24,900 --> 00:38:27,809
vulnerabilities actually are because

1051
00:38:27,809 --> 00:38:30,990
again I think as developers we all too

1052
00:38:30,990 --> 00:38:32,490
often jump for the shiny stuff rather

1053
00:38:32,490 --> 00:38:33,780
than actually thinking about you know

1054
00:38:33,780 --> 00:38:35,990
where we're actually most vulnerable

1055
00:38:35,990 --> 00:38:38,250
Microsoft actually have some really nice

1056
00:38:38,250 --> 00:38:39,930
documentation all about its process over

1057
00:38:39,930 --> 00:38:41,730
the secure development site security

1058
00:38:41,730 --> 00:38:43,680
development lifecycle website I'm not

1059
00:38:43,680 --> 00:38:45,329
suggesting you embrace that whole

1060
00:38:45,329 --> 00:38:47,069
process wholesale it's still a little

1061
00:38:47,069 --> 00:38:49,680
bit waterfall II I think in a way for my

1062
00:38:49,680 --> 00:38:51,059
mileage but there's some great

1063
00:38:51,059 --> 00:38:52,829
information in here and there's study

1064
00:38:52,829 --> 00:38:54,390
practices you can pull into your process

1065
00:38:54,390 --> 00:38:56,549
and again actually this is one area

1066
00:38:56,549 --> 00:38:58,440
where if you've not done threat mailing

1067
00:38:58,440 --> 00:39:00,690
before this might be a good use of an

1068
00:39:00,690 --> 00:39:02,940
external consultant get somebody in to

1069
00:39:02,940 --> 00:39:04,079
spend a couple of weeks with you do a

1070
00:39:04,079 --> 00:39:06,150
threat model for your system that could

1071
00:39:06,150 --> 00:39:07,079
be something you don't have to do very

1072
00:39:07,079 --> 00:39:08,490
often maybe you have to do it every

1073
00:39:08,490 --> 00:39:10,500
couple years but just to update your

1074
00:39:10,500 --> 00:39:11,819
thinking about what you're worried about

1075
00:39:11,819 --> 00:39:13,920
coming out of a threat modeling exercise

1076
00:39:13,920 --> 00:39:15,510
you then you'd expect to see a

1077
00:39:15,510 --> 00:39:17,220
prioritized list of things you need to

1078
00:39:17,220 --> 00:39:21,150
fix as an organization so take some

1079
00:39:21,150 --> 00:39:28,260
water okay so I start talking about some

1080
00:39:28,260 --> 00:39:30,720
of the more tricky issues in micro

1081
00:39:30,720 --> 00:39:33,299
service application security and that

1082
00:39:33,299 --> 00:39:34,549
was going to pick up a very simple

1083
00:39:34,549 --> 00:39:38,730
architecture here as our example system

1084
00:39:38,730 --> 00:39:41,819
this is music Corp a new version of

1085
00:39:41,819 --> 00:39:43,140
Music Corp some of you may have watched

1086
00:39:43,140 --> 00:39:44,400
on the talks I've done and I've always

1087
00:39:44,400 --> 00:39:46,410
used this example of a website to sell

1088
00:39:46,410 --> 00:39:48,869
CDs online and you can tell how long

1089
00:39:48,869 --> 00:39:50,220
I've been using it for because we're

1090
00:39:50,220 --> 00:39:52,319
selling CDs online so we were very

1091
00:39:52,319 --> 00:39:54,869
simple just at the I'll be exposing for

1092
00:39:54,869 --> 00:39:56,970
services here this dotted box is our

1093
00:39:56,970 --> 00:39:59,270
perimeter we have external clients

1094
00:39:59,270 --> 00:40:01,870
native web application

1095
00:40:01,870 --> 00:40:03,880
and a mobile application of talk to our

1096
00:40:03,880 --> 00:40:05,950
system we also have sort of external

1097
00:40:05,950 --> 00:40:08,200
dependencies on third parties that we

1098
00:40:08,200 --> 00:40:10,470
talk to in the public Internet

1099
00:40:10,470 --> 00:40:12,400
those one of the first things that you

1100
00:40:12,400 --> 00:40:14,560
start worrying about is the transport

1101
00:40:14,560 --> 00:40:16,930
securities these arrows as we touched on

1102
00:40:16,930 --> 00:40:19,270
at the beginning information that with a

1103
00:40:19,270 --> 00:40:21,040
monolithic system would flow within a

1104
00:40:21,040 --> 00:40:23,170
single process is now flood throwing

1105
00:40:23,170 --> 00:40:25,450
over networks and is therefore much more

1106
00:40:25,450 --> 00:40:29,830
open to attack or being viewed or

1107
00:40:29,830 --> 00:40:34,300
manipulated by by external parties so we

1108
00:40:34,300 --> 00:40:35,770
start thinking about transport security

1109
00:40:35,770 --> 00:40:37,540
network or service environment it's kind

1110
00:40:37,540 --> 00:40:39,130
of four things we're looking for really

1111
00:40:39,130 --> 00:40:42,010
firstly you know can people see the data

1112
00:40:42,010 --> 00:40:45,160
as it flows secondly can they manipulate

1113
00:40:45,160 --> 00:40:47,500
the data thirdly how can we restrict

1114
00:40:47,500 --> 00:40:49,510
access to the endpoints in the first

1115
00:40:49,510 --> 00:40:53,680
place and lastly can we stop people

1116
00:40:53,680 --> 00:40:56,080
pretending to be endpoints importuning

1117
00:40:56,080 --> 00:40:59,290
to be services yeah typically people

1118
00:40:59,290 --> 00:41:00,970
worry sort of more about the top three

1119
00:41:00,970 --> 00:41:03,130
but the fourth one is something that you

1120
00:41:03,130 --> 00:41:05,290
do need to give some thought to although

1121
00:41:05,290 --> 00:41:08,200
often the things we do like HTTP for

1122
00:41:08,200 --> 00:41:10,030
example solve impersonation of endpoints

1123
00:41:10,030 --> 00:41:12,040
talk about that actually book about

1124
00:41:12,040 --> 00:41:16,330
HTTPS Everywhere so and by HTTPS

1125
00:41:16,330 --> 00:41:18,400
Everywhere what you mean specifically is

1126
00:41:18,400 --> 00:41:20,950
the HTTP protocol in conjunction with

1127
00:41:20,950 --> 00:41:25,960
something like TLS so even you know HTTP

1128
00:41:25,960 --> 00:41:28,810
devote Thanksgiving is a very common

1129
00:41:28,810 --> 00:41:30,790
well supported protocol it's a very

1130
00:41:30,790 --> 00:41:32,890
common protocol for people being

1131
00:41:32,890 --> 00:41:34,920
synchro's communication between services

1132
00:41:34,920 --> 00:41:37,930
and because of the great tool support is

1133
00:41:37,930 --> 00:41:40,420
often a good starting point again some

1134
00:41:40,420 --> 00:41:42,520
people consider this table stakes for

1135
00:41:42,520 --> 00:41:45,820
this little stuff what do we get from

1136
00:41:45,820 --> 00:41:47,470
something that HTTP and TLS well the

1137
00:41:47,470 --> 00:41:49,200
first thing is we get server guarantees

1138
00:41:49,200 --> 00:41:51,460
so when we communicate with a server

1139
00:41:51,460 --> 00:41:54,820
over HTTP if we're validating the

1140
00:41:54,820 --> 00:41:56,320
certificates and you should validate

1141
00:41:56,320 --> 00:41:57,760
your certificates as a client of course

1142
00:41:57,760 --> 00:42:01,150
we get guarantee that the server we are

1143
00:42:01,150 --> 00:42:02,890
talking to is who this learner claims to

1144
00:42:02,890 --> 00:42:04,720
be so this stops impersonation of

1145
00:42:04,720 --> 00:42:06,520
endpoints we also get guarantees that

1146
00:42:06,520 --> 00:42:08,080
payload we receive has not been

1147
00:42:08,080 --> 00:42:09,460
manipulated who's stopping things like

1148
00:42:09,460 --> 00:42:12,100
man the middle attacks assuming we're

1149
00:42:12,100 --> 00:42:15,220
not terminating the HTTP along the way

1150
00:42:15,220 --> 00:42:16,780
we don't necessarily though get any

1151
00:42:16,780 --> 00:42:19,150
guarantees around the clients so we're

1152
00:42:19,150 --> 00:42:21,730
not actually restricting access to end

1153
00:42:21,730 --> 00:42:26,650
points with just normal HTTP but

1154
00:42:26,650 --> 00:42:28,330
certificate manager and that the the

1155
00:42:28,330 --> 00:42:29,890
pushback has always been with this stuff

1156
00:42:29,890 --> 00:42:30,310
as well

1157
00:42:30,310 --> 00:42:32,170
managing certificates is always painful

1158
00:42:32,170 --> 00:42:34,390
and this is a really weak excuse

1159
00:42:34,390 --> 00:42:36,220
nowadays I mean for public facing

1160
00:42:36,220 --> 00:42:37,810
services is really a non-issue with

1161
00:42:37,810 --> 00:42:39,880
things like let's encrypt which people

1162
00:42:39,880 --> 00:42:41,109
weren't really crazy about their

1163
00:42:41,109 --> 00:42:43,510
singlets or as greats it's free and free

1164
00:42:43,510 --> 00:42:46,390
was never the issue free was never the

1165
00:42:46,390 --> 00:42:48,070
blocker for people hiring running HTTPS

1166
00:42:48,070 --> 00:42:50,470
because it wasn't the $25 certificate

1167
00:42:50,470 --> 00:42:51,730
from weight that was putting you off

1168
00:42:51,730 --> 00:42:53,560
implementing this stuff right it was the

1169
00:42:53,560 --> 00:42:55,840
fact it's all manual let's encrypt

1170
00:42:55,840 --> 00:42:57,640
automated stuff and that's great

1171
00:42:57,640 --> 00:43:00,490
Automation is really important here all

1172
00:43:00,490 --> 00:43:02,020
of the cloud providers again Amazon

1173
00:43:02,020 --> 00:43:03,940
Google and Microsoft all make it easy

1174
00:43:03,940 --> 00:43:06,280
for you to generate certificates in fact

1175
00:43:06,280 --> 00:43:07,570
they do that for free for you as well

1176
00:43:07,570 --> 00:43:09,790
it's fully automated as part of this for

1177
00:43:09,790 --> 00:43:11,680
development kits there's no real excuse

1178
00:43:11,680 --> 00:43:14,170
for not doing this anymore so again this

1179
00:43:14,170 --> 00:43:15,940
is basic level stuff server-side

1180
00:43:15,940 --> 00:43:17,680
certificates for HTTP based

1181
00:43:17,680 --> 00:43:20,740
communication just makes sense and it

1182
00:43:20,740 --> 00:43:22,540
helps us in terms of observation of data

1183
00:43:22,540 --> 00:43:25,630
it's not it's being manipulated it

1184
00:43:25,630 --> 00:43:27,580
doesn't necessarily strict access to

1185
00:43:27,580 --> 00:43:30,490
endpoints it does stop endpoints being

1186
00:43:30,490 --> 00:43:33,160
impersonated I'm so actually out the box

1187
00:43:33,160 --> 00:43:35,200
or something pretty easy for a very

1188
00:43:35,200 --> 00:43:37,599
commonly used protocol it's a probably

1189
00:43:37,599 --> 00:43:39,070
just a sensible choice to use everywhere

1190
00:43:39,070 --> 00:43:41,020
within your perimeter and also of course

1191
00:43:41,020 --> 00:43:46,540
for all public facing access as well now

1192
00:43:46,540 --> 00:43:48,910
you can make this even better by

1193
00:43:48,910 --> 00:43:51,490
implementing what's called mutual TLS so

1194
00:43:51,490 --> 00:43:54,040
mutual TLS is where not only do you have

1195
00:43:54,040 --> 00:43:56,109
effectively know the server has a

1196
00:43:56,109 --> 00:43:58,839
certificate that represent the server I

1197
00:43:58,839 --> 00:44:01,869
claim to be we also now require the

1198
00:44:01,869 --> 00:44:03,880
client has its own certificate as well

1199
00:44:03,880 --> 00:44:07,410
so that you the client can basically

1200
00:44:07,410 --> 00:44:09,250
authenticate itself with the server

1201
00:44:09,250 --> 00:44:11,470
effectively see you you establish

1202
00:44:11,470 --> 00:44:13,300
effective it's a graphic degree of trust

1203
00:44:13,300 --> 00:44:15,220
at this point so this point we have

1204
00:44:15,220 --> 00:44:17,770
client and server guarantees now again

1205
00:44:17,770 --> 00:44:19,810
the push back here with mutual TLS is

1206
00:44:19,810 --> 00:44:21,849
that certificate management is painful

1207
00:44:21,849 --> 00:44:23,950
for client sites difficult as well and

1208
00:44:23,950 --> 00:44:26,589
this is not as clear-cut to solve but

1209
00:44:26,589 --> 00:44:28,359
again there are good solutions now for

1210
00:44:28,359 --> 00:44:29,230
solving

1211
00:44:29,230 --> 00:44:30,970
certificate management again the public

1212
00:44:30,970 --> 00:44:33,040
cloud vent vendors have got I've got

1213
00:44:33,040 --> 00:44:35,109
you've got a really good story here you

1214
00:44:35,109 --> 00:44:37,060
have got things like as your client size

1215
00:44:37,060 --> 00:44:40,030
difficult management for example where

1216
00:44:40,030 --> 00:44:42,330
you can do stuff like setting up a

1217
00:44:42,330 --> 00:44:45,490
mutual TLS termination inside the API

1218
00:44:45,490 --> 00:44:48,220
gateways that as you have to make your

1219
00:44:48,220 --> 00:44:50,140
application code much simpler you can do

1220
00:44:50,140 --> 00:44:52,000
very similar things with the API gateway

1221
00:44:52,000 --> 00:44:54,700
on Amazon as well again it's free

1222
00:44:54,700 --> 00:44:57,130
configuration work so I'm a public cloud

1223
00:44:57,130 --> 00:44:59,920
vendor this is a pretty easy stuff to do

1224
00:44:59,920 --> 00:45:01,810
if you're all running this stuff

1225
00:45:01,810 --> 00:45:03,700
yourself on your own infrastructure this

1226
00:45:03,700 --> 00:45:05,470
might be a bit more complicated although

1227
00:45:05,470 --> 00:45:07,150
there are now solutions for people

1228
00:45:07,150 --> 00:45:08,230
around to other things like kubernetes

1229
00:45:08,230 --> 00:45:10,119
this is where a lot of people would use

1230
00:45:10,119 --> 00:45:13,540
a service measurement like it's do if we

1231
00:45:13,540 --> 00:45:15,100
have time we'll come back and talk about

1232
00:45:15,100 --> 00:45:17,440
so as meshes as well so mutual TLS

1233
00:45:17,440 --> 00:45:20,020
observational data thick manipulation of

1234
00:45:20,020 --> 00:45:21,940
data tik we've stopped that we're fixing

1235
00:45:21,940 --> 00:45:24,190
access to endpoints great we'd stop that

1236
00:45:24,190 --> 00:45:26,590
and impersonation of endpoints great we

1237
00:45:26,590 --> 00:45:29,080
stopped that as well and I you know this

1238
00:45:29,080 --> 00:45:32,619
it even if mutual TLS is painful in your

1239
00:45:32,619 --> 00:45:34,810
context there are some situations where

1240
00:45:34,810 --> 00:45:37,990
still worth doing for example in this

1241
00:45:37,990 --> 00:45:39,510
situation here I wouldn't necessarily

1242
00:45:39,510 --> 00:45:42,310
require mutual TLS for my client devices

1243
00:45:42,310 --> 00:45:44,080
because client devices we use a

1244
00:45:44,080 --> 00:45:46,000
different means of authentication

1245
00:45:46,000 --> 00:45:47,470
effects we have the user bring their

1246
00:45:47,470 --> 00:45:49,060
identity to establish trust we don't

1247
00:45:49,060 --> 00:45:51,220
need client-side certificates here but

1248
00:45:51,220 --> 00:45:52,720
if I was talking to say an external

1249
00:45:52,720 --> 00:45:55,540
trusted party over the public Internet

1250
00:45:55,540 --> 00:45:57,310
where I've got my service talking to

1251
00:45:57,310 --> 00:45:59,800
their service we might establish mutual

1252
00:45:59,800 --> 00:46:02,320
TLS then that situation potentially

1253
00:46:02,320 --> 00:46:05,160
using some kind of Bastion host maybe

1254
00:46:05,160 --> 00:46:07,660
but anyway that you know in that

1255
00:46:07,660 --> 00:46:09,910
situation even if it was painful it

1256
00:46:09,910 --> 00:46:11,260
would still might be worth doing if I'm

1257
00:46:11,260 --> 00:46:13,000
in these situations but you can limit

1258
00:46:13,000 --> 00:46:14,560
where your usage into those areas

1259
00:46:14,560 --> 00:46:15,880
because something may be motivated stood

1260
00:46:15,880 --> 00:46:18,040
at a-- but of course as you can automate

1261
00:46:18,040 --> 00:46:20,050
it again it makes perfect sense to

1262
00:46:20,050 --> 00:46:22,630
establish within your perimeter now of

1263
00:46:22,630 --> 00:46:24,250
course this is great but i've talked

1264
00:46:24,250 --> 00:46:26,080
about so far but i've talks about HTTP

1265
00:46:26,080 --> 00:46:28,109
what if you're picking other protocols

1266
00:46:28,109 --> 00:46:30,160
well actually if you running over to by

1267
00:46:30,160 --> 00:46:31,690
HTTP

1268
00:46:31,690 --> 00:46:34,660
even so a lot of RPC now runs over HTTP

1269
00:46:34,660 --> 00:46:36,609
if you think about something like g RPC

1270
00:46:36,609 --> 00:46:38,680
now of course if you are picking some

1271
00:46:38,680 --> 00:46:40,390
kind of synchronous protocol that

1272
00:46:40,390 --> 00:46:42,710
doesn't use HTTP unlike transport

1273
00:46:42,710 --> 00:46:44,090
you're just gonna have to look up what

1274
00:46:44,090 --> 00:46:45,890
the equivalent is for your technology

1275
00:46:45,890 --> 00:46:49,130
stack of choice although G RPC is very

1276
00:46:49,130 --> 00:46:51,440
widely used now as an RPC alternative

1277
00:46:51,440 --> 00:46:54,350
and that works under proposed GP 2 of

1278
00:46:54,350 --> 00:46:57,050
course many people do communication in

1279
00:46:57,050 --> 00:46:59,120
an asynchronous fashion perhaps for our

1280
00:46:59,120 --> 00:47:01,010
message broker like calf girl or rabbit

1281
00:47:01,010 --> 00:47:03,620
in those situations look up understand

1282
00:47:03,620 --> 00:47:05,780
what those message broker technologies

1283
00:47:05,780 --> 00:47:08,840
provide in this area both rabbir and

1284
00:47:08,840 --> 00:47:11,570
Kafka have very robust support from

1285
00:47:11,570 --> 00:47:13,670
protecting your data in transit and even

1286
00:47:13,670 --> 00:47:14,900
doing things like role based access

1287
00:47:14,900 --> 00:47:17,150
control to the topics making sure that

1288
00:47:17,150 --> 00:47:18,710
only certain services can see certain

1289
00:47:18,710 --> 00:47:21,080
topics and those sorts of things so do

1290
00:47:21,080 --> 00:47:22,700
take a look at the documentation for

1291
00:47:22,700 --> 00:47:24,770
that I think if you implement things

1292
00:47:24,770 --> 00:47:26,360
like to get us on rabbit you have to

1293
00:47:26,360 --> 00:47:27,530
sell a couple of modules but I don't

1294
00:47:27,530 --> 00:47:28,700
think it's a lot of work if you're

1295
00:47:28,700 --> 00:47:30,350
already managing your own rabbit

1296
00:47:30,350 --> 00:47:34,070
clusters so that's great so so far what

1297
00:47:34,070 --> 00:47:35,360
we've talked about is sort of almost

1298
00:47:35,360 --> 00:47:38,150
transport authentication in a way we've

1299
00:47:38,150 --> 00:47:40,190
we've clarified clients on identity

1300
00:47:40,190 --> 00:47:42,190
clients identity being the server

1301
00:47:42,190 --> 00:47:45,890
talking to another server so we we've

1302
00:47:45,890 --> 00:47:48,530
suicided see you know the user certainly

1303
00:47:48,530 --> 00:47:51,020
think use services and the music web

1304
00:47:51,020 --> 00:47:52,730
shop into the music web shop claims to

1305
00:47:52,730 --> 00:47:55,040
be as we've effectively have got at this

1306
00:47:55,040 --> 00:47:57,800
point service to service authentication

1307
00:47:57,800 --> 00:48:00,020
so authentication is who are you right

1308
00:48:00,020 --> 00:48:03,440
of course the more pressing issue is is

1309
00:48:03,440 --> 00:48:05,120
human beings in this system because

1310
00:48:05,120 --> 00:48:08,170
things get a bit confused and confusing

1311
00:48:08,170 --> 00:48:10,310
especially when we operate in a world

1312
00:48:10,310 --> 00:48:12,650
where with services we might have other

1313
00:48:12,650 --> 00:48:16,460
services calling other services and then

1314
00:48:16,460 --> 00:48:18,590
who's calling what on behalf of who

1315
00:48:18,590 --> 00:48:22,370
becomes kind of interesting let's take a

1316
00:48:22,370 --> 00:48:23,660
looks at it so the first things first

1317
00:48:23,660 --> 00:48:26,960
how we handle user authentication human

1318
00:48:26,960 --> 00:48:28,910
being authentication primary doesn't

1319
00:48:28,910 --> 00:48:30,950
actually changed that much I think many

1320
00:48:30,950 --> 00:48:32,450
of you are probably already doing this

1321
00:48:32,450 --> 00:48:33,830
using some kind of authentication

1322
00:48:33,830 --> 00:48:36,620
gateway where requests that come in from

1323
00:48:36,620 --> 00:48:38,420
upstream clients if they're not

1324
00:48:38,420 --> 00:48:39,290
authenticated

1325
00:48:39,290 --> 00:48:41,540
they get redirected via authentication

1326
00:48:41,540 --> 00:48:43,580
flow to make sure they're logged in and

1327
00:48:43,580 --> 00:48:45,350
once they're logged in you've got some

1328
00:48:45,350 --> 00:48:47,420
the requests that come in will have some

1329
00:48:47,420 --> 00:48:50,240
kind of identifier so that we know those

1330
00:48:50,240 --> 00:48:52,790
requests are coming from user devices

1331
00:48:52,790 --> 00:48:55,460
that have been authenticated we put that

1332
00:48:55,460 --> 00:48:56,220
in

1333
00:48:56,220 --> 00:48:58,050
some sort of gateway and that means from

1334
00:48:58,050 --> 00:48:59,820
the little perimeter point of view your

1335
00:48:59,820 --> 00:49:02,730
services can kind of assume at that

1336
00:49:02,730 --> 00:49:04,530
point that the human beings have already

1337
00:49:04,530 --> 00:49:06,020
been asked to authenticate themselves

1338
00:49:06,020 --> 00:49:08,880
but of course as we know authentication

1339
00:49:08,880 --> 00:49:11,490
is only half of it we also have to think

1340
00:49:11,490 --> 00:49:13,460
about authorization

1341
00:49:13,460 --> 00:49:17,099
okay so authentication is you are who

1342
00:49:17,099 --> 00:49:19,349
you say you are authorization is what

1343
00:49:19,349 --> 00:49:21,720
are you actually allowed to do just

1344
00:49:21,720 --> 00:49:25,230
walking through a very complex is hi I'm

1345
00:49:25,230 --> 00:49:28,080
Bob can I access my my profile page the

1346
00:49:28,080 --> 00:49:29,820
off gateway doesn't even let Bob see

1347
00:49:29,820 --> 00:49:31,470
that it just redirects in automatically

1348
00:49:31,470 --> 00:49:34,080
and say like I jug in B frog perform it

1349
00:49:34,080 --> 00:49:35,640
requests go to anything else

1350
00:49:35,640 --> 00:49:40,710
Bob provides his credentials he does yes

1351
00:49:40,710 --> 00:49:42,660
I am I am Bob here's all my details it

1352
00:49:42,660 --> 00:49:46,080
logs in and then I had the the call gets

1353
00:49:46,080 --> 00:49:47,550
redirected to the music web shop which

1354
00:49:47,550 --> 00:49:49,470
renders a lovely page with all of Bob's

1355
00:49:49,470 --> 00:49:52,980
details in and Bob's happy now of course

1356
00:49:52,980 --> 00:49:55,050
a micro service environment and Mike's

1357
00:49:55,050 --> 00:49:57,930
this architecture the music web shop may

1358
00:49:57,930 --> 00:50:00,060
not actually be doing all the work what

1359
00:50:00,060 --> 00:50:01,470
the music web shop my I should be doing

1360
00:50:01,470 --> 00:50:03,240
is actually delegating to other services

1361
00:50:03,240 --> 00:50:05,040
the request to get the information needs

1362
00:50:05,040 --> 00:50:08,339
for example in a situation here what I'm

1363
00:50:08,339 --> 00:50:11,070
trying to do is render my profile page I

1364
00:50:11,070 --> 00:50:14,130
want to see Bob's profile page so I make

1365
00:50:14,130 --> 00:50:16,320
that call the off gateway let's I call

1366
00:50:16,320 --> 00:50:17,760
go through because Bob has been logged

1367
00:50:17,760 --> 00:50:20,400
in the music web shop says we'll hang on

1368
00:50:20,400 --> 00:50:21,839
a minute I don't actually under where

1369
00:50:21,839 --> 00:50:23,910
they were page for you that's great but

1370
00:50:23,910 --> 00:50:25,589
the user information that needs to go in

1371
00:50:25,589 --> 00:50:27,450
that page is actually that's in

1372
00:50:27,450 --> 00:50:28,890
different service as a downstream

1373
00:50:28,890 --> 00:50:30,089
service so I'm gonna make a call

1374
00:50:30,089 --> 00:50:32,070
downstream so the user service our user

1375
00:50:32,070 --> 00:50:35,430
service can have Bob's details now at

1376
00:50:35,430 --> 00:50:37,320
this point we're gonna see what may be

1377
00:50:37,320 --> 00:50:39,150
doing sent like mutual TLS or some sort

1378
00:50:39,150 --> 00:50:42,420
of h-back based all scheme but the user

1379
00:50:42,420 --> 00:50:44,190
service has established a degree of

1380
00:50:44,190 --> 00:50:46,410
trust with the music webshop and so at

1381
00:50:46,410 --> 00:50:48,510
this point the user service can say yes

1382
00:50:48,510 --> 00:50:50,940
I know this request has come from a

1383
00:50:50,940 --> 00:50:53,220
known client that client best bit is the

1384
00:50:53,220 --> 00:50:55,800
music webshop and at this point we're

1385
00:50:55,800 --> 00:50:57,810
implementing what we could effectively

1386
00:50:57,810 --> 00:51:01,589
implicit trust where once identified who

1387
00:51:01,589 --> 00:51:03,510
the music webshop is I said yes they

1388
00:51:03,510 --> 00:51:06,630
really are a service I of course I'm

1389
00:51:06,630 --> 00:51:08,160
gonna trust a request coming for you

1390
00:51:08,160 --> 00:51:09,870
because you wouldn't ask me to do

1391
00:51:09,870 --> 00:51:12,030
you think that I should do as use so

1392
00:51:12,030 --> 00:51:15,750
it's you gets Bob's details lo sum up

1393
00:51:15,750 --> 00:51:17,820
his database and sends them back and it

1394
00:51:17,820 --> 00:51:20,280
responds music web shop the music takes

1395
00:51:20,280 --> 00:51:22,440
Bob's details puts into a nice HTML page

1396
00:51:22,440 --> 00:51:25,230
renders that and sends that back up to

1397
00:51:25,230 --> 00:51:28,020
the client device now at the moment

1398
00:51:28,020 --> 00:51:29,880
nothing's gone wrong bob has art of

1399
00:51:29,880 --> 00:51:31,440
Bob's information bob is allowed to see

1400
00:51:31,440 --> 00:51:33,480
Bob's information so Bob sees Bob's

1401
00:51:33,480 --> 00:51:35,310
information the world's a happy place

1402
00:51:35,310 --> 00:51:39,240
but bob is always up to no good and he

1403
00:51:39,240 --> 00:51:40,920
starts thinking he says well look that's

1404
00:51:40,920 --> 00:51:43,470
my user name there in the URL so what if

1405
00:51:43,470 --> 00:51:45,540
I just changed the name Bob to the name

1406
00:51:45,540 --> 00:51:48,060
Alice so of course the off gateway at

1407
00:51:48,060 --> 00:51:49,830
this point just lets the request go

1408
00:51:49,830 --> 00:51:51,450
through because I'm logged in so of

1409
00:51:51,450 --> 00:51:53,700
course off you go I go to the music web

1410
00:51:53,700 --> 00:51:55,650
shop and say can I have Alice's details

1411
00:51:55,650 --> 00:51:57,870
as details the music web shop says I

1412
00:51:57,870 --> 00:52:00,690
don't handle user details I'm going to

1413
00:52:00,690 --> 00:52:02,160
go and fetch the information I need from

1414
00:52:02,160 --> 00:52:04,470
the user service so the call goes into

1415
00:52:04,470 --> 00:52:05,790
the user services says can I have

1416
00:52:05,790 --> 00:52:08,360
Alice's details the user service says

1417
00:52:08,360 --> 00:52:11,010
well you're the music webshop I trust

1418
00:52:11,010 --> 00:52:11,460
you

1419
00:52:11,460 --> 00:52:13,950
so here's Alice's details for you and I

1420
00:52:13,950 --> 00:52:15,630
said details are passed back up to the

1421
00:52:15,630 --> 00:52:17,820
client device and now we sort of have a

1422
00:52:17,820 --> 00:52:20,580
problem because it doesn't really in

1423
00:52:20,580 --> 00:52:23,310
this week's assumed that Bob should only

1424
00:52:23,310 --> 00:52:25,980
be able to see Bob's details but no one

1425
00:52:25,980 --> 00:52:28,590
has actually validated if what bob is

1426
00:52:28,590 --> 00:52:30,480
allowed to see and enforce that we have

1427
00:52:30,480 --> 00:52:33,390
no authorization it's arguable but what

1428
00:52:33,390 --> 00:52:34,740
would that effectively got here is

1429
00:52:34,740 --> 00:52:36,510
what's called the confused deputy

1430
00:52:36,510 --> 00:52:39,120
problem and the confused deputy problem

1431
00:52:39,120 --> 00:52:42,900
occurs when basically you trick in an

1432
00:52:42,900 --> 00:52:45,240
intermediate party into making requests

1433
00:52:45,240 --> 00:52:48,030
it shouldn't ask so the music web shop

1434
00:52:48,030 --> 00:52:49,530
and the user service together have

1435
00:52:49,530 --> 00:52:51,870
implicit trust the user service trusts

1436
00:52:51,870 --> 00:52:53,250
the music web shop when it makes

1437
00:52:53,250 --> 00:52:56,070
requests and we are and we've got the

1438
00:52:56,070 --> 00:52:57,720
music web shop to make a request on our

1439
00:52:57,720 --> 00:53:00,720
behalf and and that's kind of the

1440
00:53:00,720 --> 00:53:03,480
problem here so one option is to apply

1441
00:53:03,480 --> 00:53:06,060
some kind of authorization upstream and

1442
00:53:06,060 --> 00:53:09,720
so that we would validate the okay Bob

1443
00:53:09,720 --> 00:53:12,150
is asking for Alice's information so

1444
00:53:12,150 --> 00:53:13,740
something upstream it could be our off

1445
00:53:13,740 --> 00:53:15,630
gateway it could be the music web shop

1446
00:53:15,630 --> 00:53:16,920
would say well hang on I'm not going to

1447
00:53:16,920 --> 00:53:17,670
let that happen

1448
00:53:17,670 --> 00:53:19,950
because you shouldn't be able to see

1449
00:53:19,950 --> 00:53:21,630
Alice's details usually I see your own

1450
00:53:21,630 --> 00:53:22,680
detail

1451
00:53:22,680 --> 00:53:25,020
the problem with this is it's hard to

1452
00:53:25,020 --> 00:53:27,720
know how to map and request coming in

1453
00:53:27,720 --> 00:53:29,940
with the capabilities that request is

1454
00:53:29,940 --> 00:53:32,400
asking for what I mean by this is the

1455
00:53:32,400 --> 00:53:35,310
user service is from whose handles all

1456
00:53:35,310 --> 00:53:37,050
the functionality associated with user

1457
00:53:37,050 --> 00:53:39,960
information but we're affecting upstream

1458
00:53:39,960 --> 00:53:42,570
services to know what a downstream

1459
00:53:42,570 --> 00:53:45,330
service provides and provide

1460
00:53:45,330 --> 00:53:48,750
authorization controls so the upstream

1461
00:53:48,750 --> 00:53:51,510
stuff has to have all the smarts about

1462
00:53:51,510 --> 00:53:54,300
what users are allowed to do but the

1463
00:53:54,300 --> 00:53:56,490
capabilities is from a control access to

1464
00:53:56,490 --> 00:53:58,680
are actually implemented in downstream

1465
00:53:58,680 --> 00:54:01,020
services this was a bit weird to me a

1466
00:54:01,020 --> 00:54:03,300
big part of microcircuit externally

1467
00:54:03,300 --> 00:54:04,500
create these independently deployable

1468
00:54:04,500 --> 00:54:06,750
services that something capsulate with

1469
00:54:06,750 --> 00:54:07,890
their functionalities we can deploy

1470
00:54:07,890 --> 00:54:10,530
things quickly but now whenever I deploy

1471
00:54:10,530 --> 00:54:12,570
a new capability in a service I've also

1472
00:54:12,570 --> 00:54:14,400
got to reconfigure something up streets

1473
00:54:14,400 --> 00:54:16,320
and handle authentication as the

1474
00:54:16,320 --> 00:54:19,500
authorization doesn't feel right it

1475
00:54:19,500 --> 00:54:23,040
would be much better if the service that

1476
00:54:23,040 --> 00:54:25,140
is being asked to do something it's able

1477
00:54:25,140 --> 00:54:27,180
to make its own choice about whether or

1478
00:54:27,180 --> 00:54:29,400
not allows that to happen but for that

1479
00:54:29,400 --> 00:54:31,440
to happen effective for us to do

1480
00:54:31,440 --> 00:54:34,800
authorization downstream the downstream

1481
00:54:34,800 --> 00:54:37,260
service needs context of who made the

1482
00:54:37,260 --> 00:54:39,810
request and at the moment that context

1483
00:54:39,810 --> 00:54:42,630
is being lost what we want to happen is

1484
00:54:42,630 --> 00:54:46,770
when Bob asked for Alice's details the

1485
00:54:46,770 --> 00:54:49,320
music webshop parses that call on the

1486
00:54:49,320 --> 00:54:51,150
user the Service says no you can't

1487
00:54:51,150 --> 00:54:53,640
because I know you're Bob but for that

1488
00:54:53,640 --> 00:54:55,710
to work the user service needs to know

1489
00:54:55,710 --> 00:54:58,350
who Bob is this is actually where people

1490
00:54:58,350 --> 00:55:00,540
start using jot tokens so in the jot

1491
00:55:00,540 --> 00:55:02,550
token you can take adjacent payload like

1492
00:55:02,550 --> 00:55:05,310
this and basically encrypt it into it

1493
00:55:05,310 --> 00:55:06,810
use a cryptographic hash to come up with

1494
00:55:06,810 --> 00:55:09,570
her with a hashed form of that JSON

1495
00:55:09,570 --> 00:55:11,130
payload looks like this the first line

1496
00:55:11,130 --> 00:55:15,930
is the the header then as the body is

1497
00:55:15,930 --> 00:55:17,730
that purple bit and the bit the bottom

1498
00:55:17,730 --> 00:55:19,770
there is the signature and so you

1499
00:55:19,770 --> 00:55:21,270
basically take this information and you

1500
00:55:21,270 --> 00:55:27,300
basically encrypt it pub me and this

1501
00:55:27,300 --> 00:55:28,890
could then be passed as a header

1502
00:55:28,890 --> 00:55:31,830
downstream and people can't look inside

1503
00:55:31,830 --> 00:55:33,450
this and this I've got the appropriate

1504
00:55:33,450 --> 00:55:35,190
keys and so you can send us information

1505
00:55:35,190 --> 00:55:36,359
even I

1506
00:55:36,359 --> 00:55:39,509
HTP wanted to know like we should do

1507
00:55:39,509 --> 00:55:41,759
that because you still vulnerable to

1508
00:55:41,759 --> 00:55:44,400
things like a state established theft

1509
00:55:44,400 --> 00:55:47,539
here so the way this would work would be

1510
00:55:47,539 --> 00:55:50,609
Bob logs in and when they log in they

1511
00:55:50,609 --> 00:55:52,920
may be using sir cookie two reps at the

1512
00:55:52,920 --> 00:55:54,569
feather logged in or an eye off token

1513
00:55:54,569 --> 00:55:56,670
you off gate missus okay great Bob you

1514
00:55:56,670 --> 00:55:57,690
were logged in so I'm gonna allow

1515
00:55:57,690 --> 00:56:00,089
sequester go on to counter music webshop

1516
00:56:00,089 --> 00:56:01,829
and so what the earth gateway would

1517
00:56:01,829 --> 00:56:03,809
typically do here is it would generate a

1518
00:56:03,809 --> 00:56:06,660
matching jot token for the scope of this

1519
00:56:06,660 --> 00:56:10,440
request and so this allows you to put

1520
00:56:10,440 --> 00:56:12,390
sort of information inside that token

1521
00:56:12,390 --> 00:56:14,999
that you may not want to allow your

1522
00:56:14,999 --> 00:56:17,430
client device have access to and also

1523
00:56:17,430 --> 00:56:18,930
allows you to limit the scope this job

1524
00:56:18,930 --> 00:56:20,640
token so and it could be really simple

1525
00:56:20,640 --> 00:56:22,890
so in this example here it might just be

1526
00:56:22,890 --> 00:56:26,069
a jot token it says the user is Bob and

1527
00:56:26,069 --> 00:56:28,799
so that's in the header and that header

1528
00:56:28,799 --> 00:56:30,660
gets passed on to music webshop the

1529
00:56:30,660 --> 00:56:32,489
music webshops it just passes that long

1530
00:56:32,489 --> 00:56:34,799
to user service these are service gets

1531
00:56:34,799 --> 00:56:38,249
this stuff encrypted token it has the

1532
00:56:38,249 --> 00:56:39,569
ability to validate that this is a valid

1533
00:56:39,569 --> 00:56:41,789
token and decrypt it and actually look

1534
00:56:41,789 --> 00:56:43,680
at the values thanks and it can do that

1535
00:56:43,680 --> 00:56:45,989
all out-of-band because you know that's

1536
00:56:45,989 --> 00:56:49,680
sort of how magic API key stuff works no

1537
00:56:49,680 --> 00:56:51,660
additional round trips required to look

1538
00:56:51,660 --> 00:56:54,059
at the payload so it says actually

1539
00:56:54,059 --> 00:56:56,099
that's weird because you're making the

1540
00:56:56,099 --> 00:56:58,019
request for Alice but your Bob and my

1541
00:56:58,019 --> 00:57:00,059
logic in the user service says you

1542
00:57:00,059 --> 00:57:02,009
should only be able to ask for data when

1543
00:57:02,009 --> 00:57:05,099
it's your data and so no you can't do

1544
00:57:05,099 --> 00:57:07,230
that so key thing is the tokens

1545
00:57:07,230 --> 00:57:08,910
validated in the user service so we know

1546
00:57:08,910 --> 00:57:11,099
it's not being faked it doesn't need an

1547
00:57:11,099 --> 00:57:12,900
additional round trip and you could of

1548
00:57:12,900 --> 00:57:14,970
course put additional information into

1549
00:57:14,970 --> 00:57:16,650
these tokens you could put things like

1550
00:57:16,650 --> 00:57:19,259
groups in there as well so maybe your

1551
00:57:19,259 --> 00:57:21,359
logic says you can only access your

1552
00:57:21,359 --> 00:57:22,950
information unless you in the admin

1553
00:57:22,950 --> 00:57:25,739
group just like we you can with cookies

1554
00:57:25,739 --> 00:57:30,269
you can have sort of time to lives for

1555
00:57:30,269 --> 00:57:33,480
these tokens as well and if these are

1556
00:57:33,480 --> 00:57:34,950
only request scoped those templates

1557
00:57:34,950 --> 00:57:36,269
could be really quite short be like a

1558
00:57:36,269 --> 00:57:37,890
minute or two you still need to be

1559
00:57:37,890 --> 00:57:40,230
careful that if you jot tokens are

1560
00:57:40,230 --> 00:57:42,779
someone gets hold your token they might

1561
00:57:42,779 --> 00:57:44,910
be able to do things with it although if

1562
00:57:44,910 --> 00:57:46,589
you're only issuing tokens within your

1563
00:57:46,589 --> 00:57:48,150
perimeter that limits the impact the

1564
00:57:48,150 --> 00:57:50,280
value of that whereas if you're leaking

1565
00:57:50,280 --> 00:57:52,950
tokens out to client devices you sort of

1566
00:57:52,950 --> 00:57:54,930
expose yourself potentially to some of

1567
00:57:54,930 --> 00:57:56,550
the same sorts of problems that occur

1568
00:57:56,550 --> 00:57:59,880
when people send cookies over so just

1569
00:57:59,880 --> 00:58:04,170
plain old HTTP we're running a little

1570
00:58:04,170 --> 00:58:06,090
bit late on time because I'm rambling

1571
00:58:06,090 --> 00:58:07,860
but I wanted to very quickly before we

1572
00:58:07,860 --> 00:58:09,960
finish talk briefly about things called

1573
00:58:09,960 --> 00:58:11,850
service meshes and you may have heard of

1574
00:58:11,850 --> 00:58:13,200
things are so it's messy like linka D

1575
00:58:13,200 --> 00:58:16,860
and s do and these are potentially a

1576
00:58:16,860 --> 00:58:20,970
some sort of a new type of middleware

1577
00:58:20,970 --> 00:58:22,680
for Marc service architectures that

1578
00:58:22,680 --> 00:58:25,020
could solve a bunch of the common

1579
00:58:25,020 --> 00:58:28,740
security concerns that we have and I

1580
00:58:28,740 --> 00:58:30,240
mean they were developed is effectively

1581
00:58:30,240 --> 00:58:32,130
as middleware for synchronous server to

1582
00:58:32,130 --> 00:58:34,320
service communication to handle common

1583
00:58:34,320 --> 00:58:37,830
concerns like tracing service balancing

1584
00:58:37,830 --> 00:58:39,450
and service discovery authorization

1585
00:58:39,450 --> 00:58:41,400
authentication connection resilience and

1586
00:58:41,400 --> 00:58:45,600
retry and so that was and so part of

1587
00:58:45,600 --> 00:58:47,700
what they can solve is things like

1588
00:58:47,700 --> 00:58:51,000
managing mutual TLS the way they work in

1589
00:58:51,000 --> 00:58:52,650
practice is kind of quite interesting it

1590
00:58:52,650 --> 00:58:53,880
depends there's even deploy models I

1591
00:58:53,880 --> 00:58:55,920
mean I'm actually out outlining kind of

1592
00:58:55,920 --> 00:58:57,360
an old-school to color model his is sort

1593
00:58:57,360 --> 00:58:59,430
of how Lincoln evasion version 1 works

1594
00:58:59,430 --> 00:59:00,720
but the way you can think of it's

1595
00:59:00,720 --> 00:59:02,190
conceptually you know you've got all the

1596
00:59:02,190 --> 00:59:03,870
instances your service running on a

1597
00:59:03,870 --> 00:59:06,480
machine and whenever they wanted to talk

1598
00:59:06,480 --> 00:59:08,190
to another machine they go via the

1599
00:59:08,190 --> 00:59:10,950
service measures this is the proxy model

1600
00:59:10,950 --> 00:59:12,780
this is a link a deviation one word and

1601
00:59:12,780 --> 00:59:15,450
that proxy can actually mediate all

1602
00:59:15,450 --> 00:59:17,070
communication between services that it

1603
00:59:17,070 --> 00:59:19,800
can do things like it could validate

1604
00:59:19,800 --> 00:59:23,010
tokens it could handle a mutual TLS

1605
00:59:23,010 --> 00:59:24,750
termination and those sorts of things on

1606
00:59:24,750 --> 00:59:26,550
your behalf and then you have like a

1607
00:59:26,550 --> 00:59:28,620
control plane on top so they get funding

1608
00:59:28,620 --> 00:59:31,500
to get funding create a proxy and then

1609
00:59:31,500 --> 00:59:33,300
have a thing called a control plane and

1610
00:59:33,300 --> 00:59:34,710
you'll get those of funding from a VC

1611
00:59:34,710 --> 00:59:38,220
firm is great and so different deploy

1612
00:59:38,220 --> 00:59:39,990
models out there most of the world's now

1613
00:59:39,990 --> 00:59:41,130
drifting towards what some people call

1614
00:59:41,130 --> 00:59:43,320
the sidecar model and this is sort of

1615
00:59:43,320 --> 00:59:46,350
where things like link a diversion to

1616
00:59:46,350 --> 00:59:49,020
which is be called conduit and sta are

1617
00:59:49,020 --> 00:59:51,090
now working so if you think about it

1618
00:59:51,090 --> 00:59:53,430
it's like it's like a because it's

1619
00:59:53,430 --> 00:59:55,050
middleware for synchro's communication

1620
00:59:55,050 --> 00:59:58,350
it handles a bunch of common concerns so

1621
00:59:58,350 --> 00:59:59,610
you can handle things like load

1622
00:59:59,610 --> 01:00:01,650
balancing traffic routing so it's good

1623
01:00:01,650 --> 01:00:02,760
for canary is actually really useful

1624
01:00:02,760 --> 01:00:04,310
Canaries

1625
01:00:04,310 --> 01:00:06,240
traffic the low balance he's kind of

1626
01:00:06,240 --> 01:00:07,410
interesting because of weights it's an

1627
01:00:07,410 --> 01:00:09,720
approach in the networking stack it can

1628
01:00:09,720 --> 01:00:14,060
it can handle load balancing of HTTP to

1629
01:00:14,060 --> 01:00:16,140
different interesting ways which makes

1630
01:00:16,140 --> 01:00:18,330
sense for things like G RPC service

1631
01:00:18,330 --> 01:00:20,550
discovery and again different types of

1632
01:00:20,550 --> 01:00:22,080
service discovery like I can give you

1633
01:00:22,080 --> 01:00:24,390
this all the same issues you trading and

1634
01:00:24,390 --> 01:00:26,310
in our case security so things like

1635
01:00:26,310 --> 01:00:29,730
mutual TLS now I would say is that the

1636
01:00:29,730 --> 01:00:31,800
service mesh world I think the concept

1637
01:00:31,800 --> 01:00:34,320
of service meshes it's fantastic I would

1638
01:00:34,320 --> 01:00:38,220
say although we've got mature service

1639
01:00:38,220 --> 01:00:40,230
meshes out there they're mature in the

1640
01:00:40,230 --> 01:00:42,090
sense that you know that we have a 1.0

1641
01:00:42,090 --> 01:00:44,190
of kubernetes but the where people are

1642
01:00:44,190 --> 01:00:46,050
still iterating from the core concepts

1643
01:00:46,050 --> 01:00:48,600
and so I think in the same way that we

1644
01:00:48,600 --> 01:00:50,880
had a 1.0 of kubernetes but kubernetes

1645
01:00:50,880 --> 01:00:53,730
kept coming up with new abstractions

1646
01:00:53,730 --> 01:00:55,890
that we worked with that were do you

1647
01:00:55,890 --> 01:00:57,660
have to keep on top of I think we'll

1648
01:00:57,660 --> 01:01:00,240
still be seeing the same things as tools

1649
01:01:00,240 --> 01:01:05,160
like as things like sto bed down I'd

1650
01:01:05,160 --> 01:01:06,870
also say that there's a lot of

1651
01:01:06,870 --> 01:01:08,190
competition in this space I think the

1652
01:01:08,190 --> 01:01:10,470
idea is great I don't think it's

1653
01:01:10,470 --> 01:01:12,600
necessary the clear winner there's also

1654
01:01:12,600 --> 01:01:14,970
some gray areas here you're thinking

1655
01:01:14,970 --> 01:01:18,680
about tools like you know ambassador or

1656
01:01:18,680 --> 01:01:21,720
or Kong which sees some more and more

1657
01:01:21,720 --> 01:01:23,580
South gateway there's no reason why they

1658
01:01:23,580 --> 01:01:26,430
can't also be used for east-west in a

1659
01:01:26,430 --> 01:01:29,280
service context so my general advice to

1660
01:01:29,280 --> 01:01:31,380
teams has been if you're interested in

1661
01:01:31,380 --> 01:01:33,480
the service mesh maybe wait six months

1662
01:01:33,480 --> 01:01:36,480
just let things stabilize a bit if you

1663
01:01:36,480 --> 01:01:38,100
really really really want one sure go

1664
01:01:38,100 --> 01:01:39,540
for it now but just bear in mind you

1665
01:01:39,540 --> 01:01:41,010
might want to change your mind in the

1666
01:01:41,010 --> 01:01:41,990
year and pick a different implementation

1667
01:01:41,990 --> 01:01:44,640
I've been giving the advice to people to

1668
01:01:44,640 --> 01:01:46,200
wait six months for service measure the

1669
01:01:46,200 --> 01:01:48,270
last two and a half years by the way so

1670
01:01:48,270 --> 01:01:50,340
it's taking who I office whole area to

1671
01:01:50,340 --> 01:01:53,010
stabilize we've gone through a lot so

1672
01:01:53,010 --> 01:01:54,810
just to summarize we've talked briefly

1673
01:01:54,810 --> 01:01:56,760
about patching and passwords this is

1674
01:01:56,760 --> 01:01:59,160
basic stuff but it's easy to get right

1675
01:01:59,160 --> 01:02:02,070
and easy to get wrong as well and these

1676
01:02:02,070 --> 01:02:03,030
things could be especially problematic

1677
01:02:03,030 --> 01:02:04,830
in mark so it's architectures because

1678
01:02:04,830 --> 01:02:05,850
there's so many different places to

1679
01:02:05,850 --> 01:02:07,770
handle these secrets this is where you

1680
01:02:07,770 --> 01:02:09,450
might want to think about secret store

1681
01:02:09,450 --> 01:02:10,890
we talked about different types of

1682
01:02:10,890 --> 01:02:13,290
Transport Security and how we think

1683
01:02:13,290 --> 01:02:15,960
about authorization in those contexts

1684
01:02:15,960 --> 01:02:17,570
and finally at service

1685
01:02:17,570 --> 01:02:20,450
mesh's I do have some other information

1686
01:02:20,450 --> 01:02:23,450
on security stuff on my website I've got

1687
01:02:23,450 --> 01:02:24,980
like a three-hour tutorial it goes into

1688
01:02:24,980 --> 01:02:26,360
a lot more detail on this that's

1689
01:02:26,360 --> 01:02:28,100
available you can find information my

1690
01:02:28,100 --> 01:02:31,280
website and i've also got recordings of

1691
01:02:31,280 --> 01:02:32,630
other videos that are all freely

1692
01:02:32,630 --> 01:02:34,430
available i have on my website as well

1693
01:02:34,430 --> 01:02:37,400
so thank you very much for listening now

1694
01:02:37,400 --> 01:02:38,840
we are going to have time and i'll cut

1695
01:02:38,840 --> 01:02:40,520
over to some questions i hope have been

1696
01:02:40,520 --> 01:02:44,990
coming in on slack yes there are some

1697
01:02:44,990 --> 01:02:46,510
questions we do not have a lot of time

1698
01:02:46,510 --> 01:02:49,130
because well we want to find this into

1699
01:02:49,130 --> 01:02:51,770
an hour but one of them questions that

1700
01:02:51,770 --> 01:02:54,860
came in was your Manchin batch

1701
01:02:54,860 --> 01:02:57,710
management and dependency strategies and

1702
01:02:57,710 --> 01:02:59,540
a question that came in is what's your

1703
01:02:59,540 --> 01:03:01,850
vetting process for including a new

1704
01:03:01,850 --> 01:03:07,520
dependency into a project initially Paul

1705
01:03:07,520 --> 01:03:08,810
this comes down to your threat model

1706
01:03:08,810 --> 01:03:10,880
I've been in some organizations for

1707
01:03:10,880 --> 01:03:13,180
example that are extremely conservative

1708
01:03:13,180 --> 01:03:16,070
where to even be able to add a new DH

1709
01:03:16,070 --> 01:03:18,710
you know new open source library to your

1710
01:03:18,710 --> 01:03:20,750
maven file you'd have to get a central

1711
01:03:20,750 --> 01:03:24,050
team sign it off and so a lot of

1712
01:03:24,050 --> 01:03:25,730
organizations actually enforce that

1713
01:03:25,730 --> 01:03:27,620
based on what dependencies are allowed

1714
01:03:27,620 --> 01:03:30,260
from that point of view to be honest

1715
01:03:30,260 --> 01:03:33,260
with you I I tend to go to trusted

1716
01:03:33,260 --> 01:03:36,350
sources is it a mature project is it an

1717
01:03:36,350 --> 01:03:39,440
actively maintained project most

1718
01:03:39,440 --> 01:03:41,390
organizations I've worked in they tend

1719
01:03:41,390 --> 01:03:43,130
to allow developers to include stuff and

1720
01:03:43,130 --> 01:03:44,240
then they'll have a security person

1721
01:03:44,240 --> 01:03:46,250
checking every now and then but I think

1722
01:03:46,250 --> 01:03:47,810
it's for each organization to come up

1723
01:03:47,810 --> 01:03:51,020
with its own zone its own sort of

1724
01:03:51,020 --> 01:03:53,270
happiness level different organizations

1725
01:03:53,270 --> 01:03:54,980
have different tolerances for this kind

1726
01:03:54,980 --> 01:03:58,430
of stuff but my own checklist is is the

1727
01:03:58,430 --> 01:03:59,660
project something that seems to be

1728
01:03:59,660 --> 01:04:02,060
actively maintained are people actively

1729
01:04:02,060 --> 01:04:04,520
closing tickets is there a history of

1730
01:04:04,520 --> 01:04:06,230
new releases coming out is there a

1731
01:04:06,230 --> 01:04:08,960
history tickets being closed and then

1732
01:04:08,960 --> 01:04:09,770
it's good enough for me

1733
01:04:09,770 --> 01:04:14,120
normally do you normally scan on your

1734
01:04:14,120 --> 01:04:17,750
local machine for vulnerabilities in a

1735
01:04:17,750 --> 01:04:19,520
dependency that you want to include in

1736
01:04:19,520 --> 01:04:23,300
your system well normally would I be

1737
01:04:23,300 --> 01:04:24,860
looking for is you know I normally use

1738
01:04:24,860 --> 01:04:26,450
something like snick or the equivalent

1739
01:04:26,450 --> 01:04:28,820
on my system and so I'm hoping that

1740
01:04:28,820 --> 01:04:30,470
those tools are being picked up as part

1741
01:04:30,470 --> 01:04:31,310
of theirs

1742
01:04:31,310 --> 01:04:32,990
tools and so I'll typically be

1743
01:04:32,990 --> 01:04:35,420
offloading that to somebody else I mean

1744
01:04:35,420 --> 01:04:37,580
obviously when you first include those

1745
01:04:37,580 --> 01:04:39,860
those libraries you typically end up

1746
01:04:39,860 --> 01:04:41,540
getting the latest release anyway which

1747
01:04:41,540 --> 01:04:44,210
sort of help so you're typically not

1748
01:04:44,210 --> 01:04:45,950
picking up sometimes five years you're

1749
01:04:45,950 --> 01:04:47,690
going to get the latest point release

1750
01:04:47,690 --> 01:04:50,600
right but at that point I'd be hoping

1751
01:04:50,600 --> 01:04:52,160
that snicks is gonna pick that up for me

1752
01:04:52,160 --> 01:04:55,370
going forward and then what's your view

1753
01:04:55,370 --> 01:04:57,770
on how do you manage the Ben sees that

1754
01:04:57,770 --> 01:05:00,800
were once edit but are obsolete because

1755
01:05:00,800 --> 01:05:03,170
well features features are not there

1756
01:05:03,170 --> 01:05:05,120
anymore or I'm not used anymore and

1757
01:05:05,120 --> 01:05:07,310
people end up with me for instance prom

1758
01:05:07,310 --> 01:05:11,090
files with dependencies that are yeah

1759
01:05:11,090 --> 01:05:13,550
not useful anymore

1760
01:05:13,550 --> 01:05:15,470
well I mean you could pick a language

1761
01:05:15,470 --> 01:05:17,000
that have tree shaped at your tree

1762
01:05:17,000 --> 01:05:18,350
shaking which would solve that problem

1763
01:05:18,350 --> 01:05:20,710
for you right there are some modern

1764
01:05:20,710 --> 01:05:22,850
computer programs out there that will

1765
01:05:22,850 --> 01:05:27,980
actually actually move code have access

1766
01:05:27,980 --> 01:05:31,070
those coding systems a lot of this is

1767
01:05:31,070 --> 01:05:32,360
about I mean there is there is something

1768
01:05:32,360 --> 01:05:34,190
to be said for a function that isn't

1769
01:05:34,190 --> 01:05:36,770
being usually moving it a lot of people

1770
01:05:36,770 --> 01:05:38,960
do monitoring of function of features

1771
01:05:38,960 --> 01:05:41,240
they ship to say are people happy with

1772
01:05:41,240 --> 01:05:43,850
this feature I think more teams need to

1773
01:05:43,850 --> 01:05:45,890
act to be saying no one is using this

1774
01:05:45,890 --> 01:05:48,680
feature and delete it and get rid of

1775
01:05:48,680 --> 01:05:50,660
those things I think also if you start

1776
01:05:50,660 --> 01:05:52,220
seeing vulnerabilities coming up on

1777
01:05:52,220 --> 01:05:53,720
libraries and there aren't fixes are not

1778
01:05:53,720 --> 01:05:55,760
coming in we're taking you too long you

1779
01:05:55,760 --> 01:05:57,380
may need to rewrite parts of a system to

1780
01:05:57,380 --> 01:05:59,450
port that functionality you know the

1781
01:05:59,450 --> 01:06:01,520
yeah more parcel is a yeah more parser

1782
01:06:01,520 --> 01:06:03,200
the yeah more parsley are using is

1783
01:06:03,200 --> 01:06:06,110
rubbish no one's updating it okay we'll

1784
01:06:06,110 --> 01:06:07,850
get a new yama parser

1785
01:06:07,850 --> 01:06:10,430
the key thing of course is you don't

1786
01:06:10,430 --> 01:06:12,410
even have the ability to prioritize that

1787
01:06:12,410 --> 01:06:13,910
work if you don't know it's a problem

1788
01:06:13,910 --> 01:06:15,770
and you're not gonna notice a problem

1789
01:06:15,770 --> 01:06:17,300
this you got something to scanning it

1790
01:06:17,300 --> 01:06:18,700
for you

1791
01:06:18,700 --> 01:06:21,530
all right these were the questions that

1792
01:06:21,530 --> 01:06:23,390
were from the live session so I will

1793
01:06:23,390 --> 01:06:27,080
hand you over to Sam cool thank you so

1794
01:06:27,080 --> 01:06:29,450
much both Brian and Sam Sam that session

1795
01:06:29,450 --> 01:06:32,060
was amazing I know we ran a bit over but

1796
01:06:32,060 --> 01:06:34,010
I hope that everyone watching and doing

1797
01:06:34,010 --> 01:06:35,900
as much as that I did and and found

1798
01:06:35,900 --> 01:06:37,690
useful so thank you very very much

1799
01:06:37,690 --> 01:06:40,990
cool thanks for having me guys and

1800
01:06:40,990 --> 01:06:42,890
obviously hope it's not the last time

1801
01:06:42,890 --> 01:06:46,340
that we have you on the security of

1802
01:06:46,340 --> 01:06:48,080
so if anyone watching that potentially

1803
01:06:48,080 --> 01:06:50,570
wants to re-watch the section as I said

1804
01:06:50,570 --> 01:06:53,330
once we stop live-streaming it'll go on

1805
01:06:53,330 --> 01:06:55,550
to the secure developer com if you just

1806
01:06:55,550 --> 01:06:57,740
click on past sessions you'll be able to

1807
01:06:57,740 --> 01:07:00,160
find all our power stations as well as

1808
01:07:00,160 --> 01:07:02,660
links to the podcast that's been going

1809
01:07:02,660 --> 01:07:04,280
for a couple of years and with some

1810
01:07:04,280 --> 01:07:07,220
great interviews there and please share

1811
01:07:07,220 --> 01:07:09,110
and get involved and as I said if you've

1812
01:07:09,110 --> 01:07:10,490
got anything that you'd like to hear on

1813
01:07:10,490 --> 01:07:11,810
reach out to me on slack or the website

1814
01:07:11,810 --> 01:07:13,880
and we can look to put those sessions on

1815
01:07:13,880 --> 01:07:16,430
in the future a next session is in two

1816
01:07:16,430 --> 01:07:18,800
weeks and it's going to be a guy per

1817
01:07:18,800 --> 01:07:20,660
Johnny from sneaked and he'll be talking

1818
01:07:20,660 --> 01:07:22,640
about the three phases of the dev stick

1819
01:07:22,640 --> 01:07:24,710
ops so please join us for that you can

1820
01:07:24,710 --> 01:07:26,330
find all the information and sign up on

1821
01:07:26,330 --> 01:07:29,720
the website but that's it for now again

1822
01:07:29,720 --> 01:07:31,880
thank you so much Sam and Brian for

1823
01:07:31,880 --> 01:07:33,530
getting involved I hope everyone has a

1824
01:07:33,530 --> 01:07:36,170
lovely day evening lunch time wherever

1825
01:07:36,170 --> 01:07:37,940
you are in the world and and we'll see

1826
01:07:37,940 --> 01:07:39,460
you again in two weeks

1827
01:07:39,460 --> 01:07:43,510
cool thank you thank you

