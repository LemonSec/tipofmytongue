1
00:00:00,000 --> 00:00:02,340
I think we are life yes we are that's

2
00:00:02,340 --> 00:00:05,190
amazing thank you again for for watching

3
00:00:05,190 --> 00:00:09,960
my deficit cops life sessions welcome

4
00:00:09,960 --> 00:00:10,530
again

5
00:00:10,530 --> 00:00:12,809
welcome to might've stack ops and - a

6
00:00:12,809 --> 00:00:16,170
cops is a all-inclusive community that

7
00:00:16,170 --> 00:00:19,260
wants to educate people about security

8
00:00:19,260 --> 00:00:23,670
right so today we have Francesca boiler

9
00:00:23,670 --> 00:00:32,940
on and she will be talking about one one

10
00:00:32,940 --> 00:00:36,590
second because now I hear myself so

11
00:00:36,590 --> 00:00:39,450
again we have come for Francesca and she

12
00:00:39,450 --> 00:00:41,690
will be talking about web application

13
00:00:41,690 --> 00:00:44,309
firewalls Francesca is an architect for

14
00:00:44,309 --> 00:00:47,700
puzzle ITC and a security enthusiast she

15
00:00:47,700 --> 00:00:51,059
will she is in cybersecurity for over 10

16
00:00:51,059 --> 00:00:54,750
years if I'm not mistaken she has a

17
00:00:54,750 --> 00:00:57,149
background in in web application

18
00:00:57,149 --> 00:00:58,590
firewalls that's why she says she's

19
00:00:58,590 --> 00:01:00,660
gonna talk about it she was a co

20
00:01:00,660 --> 00:01:03,329
developer on the OAuth mods security

21
00:01:03,329 --> 00:01:05,729
cool rule set if I'm if I'm correctly

22
00:01:05,729 --> 00:01:08,460
informed and currently she is part of

23
00:01:08,460 --> 00:01:12,180
the OS deaths lot def swap team which

24
00:01:12,180 --> 00:01:14,460
integrates CRS interview continuous

25
00:01:14,460 --> 00:01:17,189
integration pipelines but before we dive

26
00:01:17,189 --> 00:01:19,290
into all of that let me introduce myself

27
00:01:19,290 --> 00:01:21,479
my name is brian brian from here

28
00:01:21,479 --> 00:01:23,280
normally you see sam heparin over here

29
00:01:23,280 --> 00:01:25,950
but i will be taking over this live

30
00:01:25,950 --> 00:01:28,619
session I'm one of the developer

31
00:01:28,619 --> 00:01:30,240
advocates for sneak and one of the

32
00:01:30,240 --> 00:01:32,759
humans behind the whole - tech ops

33
00:01:32,759 --> 00:01:35,670
community so again welcome we love your

34
00:01:35,670 --> 00:01:37,380
feedback and if you have feedback you

35
00:01:37,380 --> 00:01:39,990
can ping us on Twitter or you can go to

36
00:01:39,990 --> 00:01:42,990
the slack the slack is the best way to

37
00:01:42,990 --> 00:01:44,490
connect with us and if you have

38
00:01:44,490 --> 00:01:47,220
questions during this their during this

39
00:01:47,220 --> 00:01:49,649
talk please go to the select you can

40
00:01:49,649 --> 00:01:52,590
find the slack on my deaf stack up Co

41
00:01:52,590 --> 00:01:54,210
you can find a link over there if you're

42
00:01:54,210 --> 00:01:57,930
on if you're not yet enrolled if you're

43
00:01:57,930 --> 00:01:59,549
there and you have questions go to the

44
00:01:59,549 --> 00:02:01,890
live session Channel and I will be the

45
00:02:01,890 --> 00:02:04,649
proxy between Francesca and myself and

46
00:02:04,649 --> 00:02:07,259
you to make sure that all the questions

47
00:02:07,259 --> 00:02:10,280
will be there at an appropriate time

48
00:02:10,280 --> 00:02:13,290
probably at the end of the talk so if

49
00:02:13,290 --> 00:02:13,950
you come up with

50
00:02:13,950 --> 00:02:16,770
questions please put them in the live

51
00:02:16,770 --> 00:02:21,480
channel even if you have questions

52
00:02:21,480 --> 00:02:23,099
afterwards I mean this session will be

53
00:02:23,099 --> 00:02:25,620
published right after we're done and if

54
00:02:25,620 --> 00:02:27,360
you have questions please post them in

55
00:02:27,360 --> 00:02:29,310
the in the live channel and we will try

56
00:02:29,310 --> 00:02:30,989
to redirect them or answer them and

57
00:02:30,989 --> 00:02:33,450
answer them ourselves if we're possible

58
00:02:33,450 --> 00:02:36,180
but I saw Francesca is also on this lack

59
00:02:36,180 --> 00:02:38,190
so much she might be able to answer them

60
00:02:38,190 --> 00:02:39,709
as well

61
00:02:39,709 --> 00:02:42,569
last thing I need to tell you is - a

62
00:02:42,569 --> 00:02:45,989
cups is brought to you by sneak sneak is

63
00:02:45,989 --> 00:02:48,120
our main sponsor but we try to create a

64
00:02:48,120 --> 00:02:50,400
vendor neutral space to share knowledge

65
00:02:50,400 --> 00:02:52,829
and best practices that are related to

66
00:02:52,829 --> 00:02:55,170
software security alright that's enough

67
00:02:55,170 --> 00:02:58,860
for me for now I will I will now I'll

68
00:02:58,860 --> 00:03:02,250
give the word to Francisca and welcome

69
00:03:02,250 --> 00:03:04,709
welcome - I think your first might have

70
00:03:04,709 --> 00:03:09,750
second session yeah it is all right well

71
00:03:09,750 --> 00:03:11,970
I would say the floor is yours give it a

72
00:03:11,970 --> 00:03:19,109
go okay I will share my screen and here

73
00:03:19,109 --> 00:03:22,650
are my slide so today we will talk about

74
00:03:22,650 --> 00:03:25,590
web application firewalls and are they

75
00:03:25,590 --> 00:03:29,670
friends of your DevOps pipeline and I

76
00:03:29,670 --> 00:03:31,530
want to spread the word about the

77
00:03:31,530 --> 00:03:34,109
application firewalls because I like web

78
00:03:34,109 --> 00:03:36,989
application firewalls are not and I also

79
00:03:36,989 --> 00:03:39,720
want to make web applications I was a

80
00:03:39,720 --> 00:03:45,120
part of DevOps and the first time I told

81
00:03:45,120 --> 00:03:47,850
the developer about this idea he replied

82
00:03:47,850 --> 00:03:52,139
yes that is exactly what we need and he

83
00:03:52,139 --> 00:03:54,750
said to me because it was just last week

84
00:03:54,750 --> 00:03:57,569
when your Web Application Firewall broke

85
00:03:57,569 --> 00:04:00,569
our application of the migration well

86
00:04:00,569 --> 00:04:04,470
that hurts but they have a well-tested

87
00:04:04,470 --> 00:04:06,989
platform but the wife was not part of

88
00:04:06,989 --> 00:04:09,000
the tests it was only added to

89
00:04:09,000 --> 00:04:11,760
production and unfortunately the

90
00:04:11,760 --> 00:04:16,339
application was no longer reachable and

91
00:04:16,339 --> 00:04:19,289
it was an operator that added to last

92
00:04:19,289 --> 00:04:21,120
production but this could have happened

93
00:04:21,120 --> 00:04:23,820
to me too and I think this could have

94
00:04:23,820 --> 00:04:26,370
happened to any one of us so this

95
00:04:26,370 --> 00:04:27,330
example

96
00:04:27,330 --> 00:04:29,220
this story shows that we make a

97
00:04:29,220 --> 00:04:32,310
fundamental mistake with web application

98
00:04:32,310 --> 00:04:40,110
firewalls in production so this is me my

99
00:04:40,110 --> 00:04:42,629
name is Francisco Bueller and I'm an

100
00:04:42,629 --> 00:04:46,080
architect I work at puzzle ITC Swiss and

101
00:04:46,080 --> 00:04:49,259
German company and of course I add

102
00:04:49,259 --> 00:04:54,060
laughs wherever I can and in my spare

103
00:04:54,060 --> 00:04:57,090
time I'm a core developer of life rules

104
00:04:57,090 --> 00:05:00,840
and I help improve and extend tio asked

105
00:05:00,840 --> 00:05:04,860
what security Cora said and I'm also a

106
00:05:04,860 --> 00:05:07,319
team member of the OWASP Tesla project

107
00:05:07,319 --> 00:05:09,930
and of course I added a wife to this

108
00:05:09,930 --> 00:05:13,229
project too and in today's session we

109
00:05:13,229 --> 00:05:17,039
will see des Pixies CRS module that's

110
00:05:17,039 --> 00:05:19,680
one of the modules and we will see this

111
00:05:19,680 --> 00:05:28,139
pipeline in a demo later so first of all

112
00:05:28,139 --> 00:05:29,909
let me explain what a Web Application

113
00:05:29,909 --> 00:05:33,990
Firewall is and then I will introduce

114
00:05:33,990 --> 00:05:37,340
mod security and TOS modsecurity

115
00:05:37,340 --> 00:05:41,219
charoset and then in comes the

116
00:05:41,219 --> 00:05:43,500
integration of a wife in a DevOps

117
00:05:43,500 --> 00:05:47,130
pipeline and at the end I would like to

118
00:05:47,130 --> 00:05:49,650
give you a brief overview of mob

119
00:05:49,650 --> 00:05:55,520
security and the charoset and parcel ITC

120
00:05:56,810 --> 00:05:59,879
so what is the Web Application Firewall

121
00:05:59,879 --> 00:06:03,779
I think most of you know what a wife is

122
00:06:03,779 --> 00:06:06,539
but so that you're all talking about the

123
00:06:06,539 --> 00:06:07,409
same thing

124
00:06:07,409 --> 00:06:11,250
a web application firewall is the first

125
00:06:11,250 --> 00:06:13,860
line of defense against web application

126
00:06:13,860 --> 00:06:16,919
attacks we see a skull injection

127
00:06:16,919 --> 00:06:21,029
cross-site scripting and so on we also

128
00:06:21,029 --> 00:06:23,610
know that know them as table hospital 10

129
00:06:23,610 --> 00:06:27,449
and the web application firewall works

130
00:06:27,449 --> 00:06:31,560
on a higher application layer and not on

131
00:06:31,560 --> 00:06:34,560
the TCP or IP layer like a traditional

132
00:06:34,560 --> 00:06:38,460
firewall and to answer a question right

133
00:06:38,460 --> 00:06:41,129
from the start no a wife

134
00:06:41,129 --> 00:06:43,139
mean that you don't have to write secure

135
00:06:43,139 --> 00:06:46,619
code it's meant a safety net in front of

136
00:06:46,619 --> 00:06:49,349
your application because you can never

137
00:06:49,349 --> 00:06:53,189
trust your code 100% or you don't have

138
00:06:53,189 --> 00:06:57,809
control over the application and the

139
00:06:57,809 --> 00:07:01,439
wife does not stop every attack but it

140
00:07:01,439 --> 00:07:04,110
makes it harder to exploit an existing

141
00:07:04,110 --> 00:07:07,789
vulnerability in the web application and

142
00:07:07,789 --> 00:07:11,580
it also offers you with HTTP traffic

143
00:07:11,580 --> 00:07:14,699
monitoring and logging so you get deep

144
00:07:14,699 --> 00:07:21,269
insight into the traffic this is a

145
00:07:21,269 --> 00:07:23,399
picture we don't want to see when we

146
00:07:23,399 --> 00:07:26,909
work with a web application right and my

147
00:07:26,909 --> 00:07:29,909
experience with developers and operators

148
00:07:29,909 --> 00:07:32,759
is that they sometimes fear web

149
00:07:32,759 --> 00:07:35,909
application firewalls because they can

150
00:07:35,909 --> 00:07:38,369
also block legitimate traffic and this

151
00:07:38,369 --> 00:07:40,529
means that the user cannot use the

152
00:07:40,529 --> 00:07:45,809
application properly and I think this

153
00:07:45,809 --> 00:07:47,579
problem is even worse in a DevOps

154
00:07:47,579 --> 00:07:49,589
culture where everything is fully

155
00:07:49,589 --> 00:07:52,979
automated and well tested and at the end

156
00:07:52,979 --> 00:07:55,889
we add after production and that's too

157
00:07:55,889 --> 00:07:58,709
late because it's too late to find and

158
00:07:58,709 --> 00:08:03,209
fix the problems what happens now the

159
00:08:03,209 --> 00:08:05,219
operator will switch off the Web

160
00:08:05,219 --> 00:08:07,860
Application Firewall because the user

161
00:08:07,860 --> 00:08:11,300
cannot use the application and

162
00:08:11,300 --> 00:08:14,639
unfortunately once it goes live the

163
00:08:14,639 --> 00:08:16,709
operator doesn't want to touch the wife

164
00:08:16,709 --> 00:08:19,349
anymore because it finally works and he

165
00:08:19,349 --> 00:08:22,979
is happy or she is happy they have a lot

166
00:08:22,979 --> 00:08:25,860
of other work to do and yes security is

167
00:08:25,860 --> 00:08:28,259
boring and does not always have top

168
00:08:28,259 --> 00:08:31,919
priority so they plan to tune the wife

169
00:08:31,919 --> 00:08:34,529
and maybe switch it on when they have

170
00:08:34,529 --> 00:08:38,309
more time but yeah to be honest this

171
00:08:38,309 --> 00:08:42,779
time maybe never comes and I think this

172
00:08:42,779 --> 00:08:45,569
is really annoying and I even has an

173
00:08:45,569 --> 00:08:47,610
etiquette of web application firewalls

174
00:08:47,610 --> 00:08:53,750
fully understand the operator so I think

175
00:08:53,750 --> 00:08:54,960
we need

176
00:08:54,960 --> 00:08:57,150
the better process to get us into

177
00:08:57,150 --> 00:09:03,180
production but what if we add a web

178
00:09:03,180 --> 00:09:05,790
application firewall to early stage of

179
00:09:05,790 --> 00:09:08,490
the DevOps process and not at the end of

180
00:09:08,490 --> 00:09:13,920
production if we have already automated

181
00:09:13,920 --> 00:09:16,380
application tests we should add a wife

182
00:09:16,380 --> 00:09:19,590
to these tests and this seems obvious

183
00:09:19,590 --> 00:09:24,570
and so often automation is the key of

184
00:09:24,570 --> 00:09:28,410
course and I will come back to that in a

185
00:09:28,410 --> 00:09:32,790
moment but first let me head over to mod

186
00:09:32,790 --> 00:09:36,300
security and corals because not

187
00:09:36,300 --> 00:09:40,290
Security's one such laughs it's a very

188
00:09:40,290 --> 00:09:42,540
popular and widespread web application

189
00:09:42,540 --> 00:09:44,910
firewall I think a lot of you already

190
00:09:44,910 --> 00:09:48,660
know mob security it's available as

191
00:09:48,660 --> 00:09:54,060
nginx Apache or is module and it's open

192
00:09:54,060 --> 00:09:57,600
source and free and now a mod security

193
00:09:57,600 --> 00:10:00,840
provides the engine and the engine needs

194
00:10:00,840 --> 00:10:05,280
rules to do its job it needs patterns to

195
00:10:05,280 --> 00:10:09,720
compare with the HTTP traffic and here

196
00:10:09,720 --> 00:10:13,830
is where he always Montecristi kernels

197
00:10:13,830 --> 00:10:16,710
that comes in it's an open source

198
00:10:16,710 --> 00:10:19,290
project - and it provides rules for mod

199
00:10:19,290 --> 00:10:23,190
security it provides you with a standard

200
00:10:23,190 --> 00:10:26,340
rule sent to fight against these web

201
00:10:26,340 --> 00:10:30,000
application attacks and these rules

202
00:10:30,000 --> 00:10:32,820
mainly consist of regular expressions

203
00:10:32,820 --> 00:10:35,760
which look for a pattern and it's a set

204
00:10:35,760 --> 00:10:39,540
of generic blacklisting rules and here

205
00:10:39,540 --> 00:10:42,270
we see the really cool poster of the

206
00:10:42,270 --> 00:10:45,540
chorus at version 3 and since this

207
00:10:45,540 --> 00:10:48,240
version it's easy to configure and to

208
00:10:48,240 --> 00:10:50,340
run it's no longer only for work

209
00:10:50,340 --> 00:10:54,780
experience and also the amount of false

210
00:10:54,780 --> 00:10:57,500
positives was reduced massively

211
00:10:57,500 --> 00:11:02,880
so we no longer have to fear much of

212
00:11:02,880 --> 00:11:07,440
false positives but we from the charoset

213
00:11:07,440 --> 00:11:08,730
are in

214
00:11:08,730 --> 00:11:11,430
trust in receiving feedback so if you

215
00:11:11,430 --> 00:11:13,170
have a false positive

216
00:11:13,170 --> 00:11:15,480
please let us know and help us improve

217
00:11:15,480 --> 00:11:16,290
the ruleset

218
00:11:16,290 --> 00:11:21,720
and by the way we released 3.2 in last

219
00:11:21,720 --> 00:11:28,019
September it only takes three steps to

220
00:11:28,019 --> 00:11:31,649
install these corals it and here we see

221
00:11:31,649 --> 00:11:33,959
the installation on nginx

222
00:11:33,959 --> 00:11:37,139
of course not security has to be

223
00:11:37,139 --> 00:11:39,480
installed and then you clone the git

224
00:11:39,480 --> 00:11:42,680
repository or your download zip file you

225
00:11:42,680 --> 00:11:46,230
copy the example configuration file to

226
00:11:46,230 --> 00:11:50,070
your CRS the double cons and you include

227
00:11:50,070 --> 00:11:52,740
the CRF set up the cones and all the

228
00:11:52,740 --> 00:11:54,899
rules files into your auntie NICs

229
00:11:54,899 --> 00:11:58,320
configuration and that's all and then

230
00:11:58,320 --> 00:12:01,529
you have a default installation and it

231
00:12:01,529 --> 00:12:04,620
provides you with basic security and we

232
00:12:04,620 --> 00:12:06,329
say that in the default installation

233
00:12:06,329 --> 00:12:10,380
about 80% of web attacks are covered for

234
00:12:10,380 --> 00:12:19,019
you the charoset has rules that inspect

235
00:12:19,019 --> 00:12:23,010
incoming HTTP requests for common web

236
00:12:23,010 --> 00:12:26,490
attacks as we see on the word cloud most

237
00:12:26,490 --> 00:12:28,260
of the rules are written against Oscar

238
00:12:28,260 --> 00:12:31,980
injection cross-site scripting for

239
00:12:31,980 --> 00:12:35,670
protocol enforcement but there are a lot

240
00:12:35,670 --> 00:12:41,569
more attacks that will be blocked and

241
00:12:41,569 --> 00:12:44,579
here we see an example of a malicious

242
00:12:44,579 --> 00:12:48,420
request someone tries to get an e TC

243
00:12:48,420 --> 00:12:51,149
shadow from the web service file system

244
00:12:51,149 --> 00:12:53,819
and this request

245
00:12:53,819 --> 00:12:57,660
triggers three charoset rules first the

246
00:12:57,660 --> 00:13:00,660
corrals that detects the path timer so

247
00:13:00,660 --> 00:13:03,569
it detects that someone tries to go back

248
00:13:03,569 --> 00:13:08,040
in the file system and it also detects

249
00:13:08,040 --> 00:13:10,949
that someone tries to access a local OS

250
00:13:10,949 --> 00:13:15,720
file and it also identifies a TC shadow

251
00:13:15,720 --> 00:13:18,120
as the common sequence found in shell

252
00:13:18,120 --> 00:13:20,640
command so this request would be blocked

253
00:13:20,640 --> 00:13:23,270
by the chorus

254
00:13:23,270 --> 00:13:28,380
an outgoing responses are examined too

255
00:13:28,380 --> 00:13:30,690
and here we are looking for data

256
00:13:30,690 --> 00:13:33,810
leakages and stack traces which should

257
00:13:33,810 --> 00:13:38,280
not be returned to user and again we see

258
00:13:38,280 --> 00:13:39,930
that most of the rules are written

259
00:13:39,930 --> 00:13:41,670
against as well

260
00:13:41,670 --> 00:13:46,350
data leakages and stack traces because

261
00:13:46,350 --> 00:13:49,860
this is bad right this is an example of

262
00:13:49,860 --> 00:13:52,560
a non block Pascal stack trace and you

263
00:13:52,560 --> 00:13:55,590
don't want to show this area to user or

264
00:13:55,590 --> 00:13:58,980
an attacker it is closed very sensitive

265
00:13:58,980 --> 00:14:02,430
information and the colonel said could

266
00:14:02,430 --> 00:14:08,670
block such a response for you so this

267
00:14:08,670 --> 00:14:11,520
all sounds very good and reasonable and

268
00:14:11,520 --> 00:14:13,620
I think everyone wants to have a wife

269
00:14:13,620 --> 00:14:17,580
right now I hope so but the problem here

270
00:14:17,580 --> 00:14:20,910
is the real world because sometimes also

271
00:14:20,910 --> 00:14:24,000
a legitimate request from a legitimate

272
00:14:24,000 --> 00:14:27,900
user triggers a false positive triggers

273
00:14:27,900 --> 00:14:30,570
a call center and we call them false

274
00:14:30,570 --> 00:14:34,950
positives and one example is an address

275
00:14:34,950 --> 00:14:39,600
to address 100 Union Street triggered an

276
00:14:39,600 --> 00:14:42,990
after injection area because of the

277
00:14:42,990 --> 00:14:45,840
dead-end combination of the digits and T

278
00:14:45,840 --> 00:14:49,500
Union because it looks a bit like a

279
00:14:49,500 --> 00:14:54,540
NASCAR injection and it's not enough

280
00:14:54,540 --> 00:14:57,120
that triggered because this false

281
00:14:57,120 --> 00:15:00,030
positive has been reported and has been

282
00:15:00,030 --> 00:15:03,060
resolved by the quarrels at team so it

283
00:15:03,060 --> 00:15:09,660
no longer concerns you but what do we do

284
00:15:09,660 --> 00:15:12,510
when we have false positive of course we

285
00:15:12,510 --> 00:15:14,880
have to have the right tools to fight

286
00:15:14,880 --> 00:15:18,600
against false positives if you have one

287
00:15:18,600 --> 00:15:21,510
have a look at the mode security lock

288
00:15:21,510 --> 00:15:25,230
and then you fix your application if

289
00:15:25,230 --> 00:15:27,810
this is possible and necessary

290
00:15:27,810 --> 00:15:31,530
I'm typical false positives I often see

291
00:15:31,530 --> 00:15:35,790
are in argument names arguments

292
00:15:35,790 --> 00:15:39,020
cookies or cookie names if for example

293
00:15:39,020 --> 00:15:42,360
special characters were used or random

294
00:15:42,360 --> 00:15:47,400
strings or you open an issue on the

295
00:15:47,400 --> 00:15:50,460
github corrals at projects as I already

296
00:15:50,460 --> 00:15:52,650
said we don't want to have any false

297
00:15:52,650 --> 00:15:55,200
positives especially in the default

298
00:15:55,200 --> 00:15:57,990
dental installation so please let us

299
00:15:57,990 --> 00:16:00,750
know if we have to improve the rule for

300
00:16:00,750 --> 00:16:05,460
all or if you think it only affects you

301
00:16:05,460 --> 00:16:08,250
and your application you can do much

302
00:16:08,250 --> 00:16:10,800
security tuning and this means that you

303
00:16:10,800 --> 00:16:14,120
partially disabled or exclude a rule and

304
00:16:14,120 --> 00:16:17,310
there are very good tutorials written by

305
00:16:17,310 --> 00:16:20,370
Christian Fellini on how to - not

306
00:16:20,370 --> 00:16:23,400
security and they can be found at net

307
00:16:23,400 --> 00:16:33,090
natal calm so now in comes the new idea

308
00:16:33,090 --> 00:16:35,910
the integration of a wife in a DevOps

309
00:16:35,910 --> 00:16:39,270
pipeline because we don't want to do

310
00:16:39,270 --> 00:16:43,700
just DevOps let's make motsek develops

311
00:16:43,700 --> 00:16:47,610
so let's insert the wife early into the

312
00:16:47,610 --> 00:16:50,400
deployment pipeline and to the

313
00:16:50,400 --> 00:16:53,220
application test without but also with

314
00:16:53,220 --> 00:16:56,310
the wife right away and all tests have

315
00:16:56,310 --> 00:16:59,420
to succeed without ant way the wife and

316
00:16:59,420 --> 00:17:03,210
in addition no corals a true should be

317
00:17:03,210 --> 00:17:07,109
triggered by the tests and those tests

318
00:17:07,109 --> 00:17:10,079
give the developers early feedback so he

319
00:17:10,079 --> 00:17:12,770
gets the chance to fail early and fast

320
00:17:12,770 --> 00:17:15,420
and we don't want to fix this issue

321
00:17:15,420 --> 00:17:17,910
later in production when it hurts we

322
00:17:17,910 --> 00:17:19,920
want to fix it now when you still know

323
00:17:19,920 --> 00:17:21,930
what we have just checked into the

324
00:17:21,930 --> 00:17:26,790
repository and each commit were pushed

325
00:17:26,790 --> 00:17:28,800
into the repository triggers a

326
00:17:28,800 --> 00:17:31,530
continuous integration run that starts

327
00:17:31,530 --> 00:17:34,590
the application starts the web and runs

328
00:17:34,590 --> 00:17:38,900
the application test through the web and

329
00:17:38,900 --> 00:17:42,540
we always want to have our application

330
00:17:42,540 --> 00:17:45,150
in a deployable and runnable state with

331
00:17:45,150 --> 00:17:48,150
the wife in front of it so we know that

332
00:17:48,150 --> 00:17:49,540
the legitimate

333
00:17:49,540 --> 00:17:52,360
of the application will not trigger a

334
00:17:52,360 --> 00:17:56,350
coral SATs rule and I think an

335
00:17:56,350 --> 00:17:59,920
application should go to release if it's

336
00:17:59,920 --> 00:18:02,320
fully tested with a wife in front of it

337
00:18:02,320 --> 00:18:06,850
and I think this is really great we

338
00:18:06,850 --> 00:18:08,800
don't have to fear production issues

339
00:18:08,800 --> 00:18:11,380
later and we just want to have more

340
00:18:11,380 --> 00:18:15,940
security and now let me explain a

341
00:18:15,940 --> 00:18:18,930
possible setup normally we have

342
00:18:18,930 --> 00:18:22,000
application tests that run against an

343
00:18:22,000 --> 00:18:25,600
application and in this example to write

344
00:18:25,600 --> 00:18:27,790
the application test I use test cafe

345
00:18:27,790 --> 00:18:33,600
it's an open source and 20 web test tool

346
00:18:34,179 --> 00:18:37,299
and we can also work with another tool

347
00:18:37,299 --> 00:18:39,730
here selenium is very popular for

348
00:18:39,730 --> 00:18:42,730
example so normally we have application

349
00:18:42,730 --> 00:18:45,070
tests that run against an application

350
00:18:45,070 --> 00:18:47,889
and as a result the application tests

351
00:18:47,889 --> 00:18:51,399
should be green and now I do the same

352
00:18:51,399 --> 00:18:56,080
test again but this time with a wife in

353
00:18:56,080 --> 00:18:58,659
front of it and this means we started

354
00:18:58,659 --> 00:19:02,080
third docker containing now and as a

355
00:19:02,080 --> 00:19:07,149
result I still accept us that TM expect

356
00:19:07,149 --> 00:19:09,360
that the application tests are green are

357
00:19:09,360 --> 00:19:13,149
successful and in addition I expect that

358
00:19:13,149 --> 00:19:16,149
the mod security lock is empty so that

359
00:19:16,149 --> 00:19:18,909
no core no set rule was triggered by two

360
00:19:18,909 --> 00:19:26,799
tests and let me show you now on how I

361
00:19:26,799 --> 00:19:30,039
implemented this on circle CI and in

362
00:19:30,039 --> 00:19:31,899
this demo I've made an application

363
00:19:31,899 --> 00:19:36,220
change that I commit and push into my

364
00:19:36,220 --> 00:19:38,470
repository and on the right side we see

365
00:19:38,470 --> 00:19:44,139
that circle CI starts to run the first

366
00:19:44,139 --> 00:19:48,519
steps are not so important but then the

367
00:19:48,519 --> 00:19:53,369
application is started in a container

368
00:20:01,200 --> 00:20:05,190
and now the avars modsecurity Carlos

369
00:20:05,190 --> 00:20:08,639
that container is pulled and started as

370
00:20:08,639 --> 00:20:16,740
well and now we run the application

371
00:20:16,740 --> 00:20:20,700
tests first the tests are run against

372
00:20:20,700 --> 00:20:23,510
TCP port of the application container

373
00:20:23,510 --> 00:20:26,340
because I want to be sure that the

374
00:20:26,340 --> 00:20:28,380
application tests and the application

375
00:20:28,380 --> 00:20:32,610
itself are ok and for this demo I've

376
00:20:32,610 --> 00:20:36,990
written four tests but is only a short

377
00:20:36,990 --> 00:20:40,230
test I register a user in the web

378
00:20:40,230 --> 00:20:47,850
application I login a user I search for

379
00:20:47,850 --> 00:20:50,010
a string in the applications search box

380
00:20:50,010 --> 00:20:56,669
and I log out again and now I do the

381
00:20:56,669 --> 00:20:59,039
same tests again but this time again

382
00:20:59,039 --> 00:21:01,470
statistically part of the corals that

383
00:21:01,470 --> 00:21:05,610
contain this means I still test my

384
00:21:05,610 --> 00:21:08,100
application but through the corals and

385
00:21:08,100 --> 00:21:10,980
containers through the corrosion and I

386
00:21:10,980 --> 00:21:13,590
do the same test again I register a user

387
00:21:13,590 --> 00:21:19,769
I login the user I search for a string

388
00:21:19,769 --> 00:21:22,799
in the application search box and I log

389
00:21:22,799 --> 00:21:27,570
out the user and now I do a test with a

390
00:21:27,570 --> 00:21:30,179
militia string because I want to be sure

391
00:21:30,179 --> 00:21:34,200
that my wife would block and at the end

392
00:21:34,200 --> 00:21:37,519
I checked results

393
00:21:46,010 --> 00:21:50,279
and in this example two tests triggered

394
00:21:50,279 --> 00:21:53,700
a chorus a true Minot security log is

395
00:21:53,700 --> 00:21:56,760
not empty because I didn't want to show

396
00:21:56,760 --> 00:21:59,730
the puppy path and this means that I now

397
00:21:59,730 --> 00:22:03,270
should go and look at a mod security log

398
00:22:03,270 --> 00:22:09,480
and the message here is only if every of

399
00:22:09,480 --> 00:22:13,200
these steps is green if successful the

400
00:22:13,200 --> 00:22:20,309
application could go to production so

401
00:22:20,309 --> 00:22:22,860
all these docker containers are pulled

402
00:22:22,860 --> 00:22:25,289
and started and the application tests

403
00:22:25,289 --> 00:22:28,440
are run very quickly and this means that

404
00:22:28,440 --> 00:22:31,500
the developer can fast feedback after a

405
00:22:31,500 --> 00:22:36,299
commit into the closet or E and we don't

406
00:22:36,299 --> 00:22:39,510
lose much time here but we get a lot of

407
00:22:39,510 --> 00:22:46,799
extra security as I already mentioned

408
00:22:46,799 --> 00:22:49,890
the charoset is very easy to install but

409
00:22:49,890 --> 00:22:52,470
it's even easier of course if you use it

410
00:22:52,470 --> 00:22:56,070
in a docker container and your fish slow

411
00:22:56,070 --> 00:23:00,270
a small security docker image has an

412
00:23:00,270 --> 00:23:02,760
Apache or a reverse proxy configuration

413
00:23:02,760 --> 00:23:07,500
and configurable CRS variables that you

414
00:23:07,500 --> 00:23:11,309
can give during startup and in this way

415
00:23:11,309 --> 00:23:17,279
the Carlos set could can even be added

416
00:23:17,279 --> 00:23:21,679
easier or can be added very easy to your

417
00:23:21,679 --> 00:23:30,029
continuous integration tests so we also

418
00:23:30,029 --> 00:23:32,970
use mod security and the charoset

419
00:23:32,970 --> 00:23:39,539
spotlight hissing and we also the do

420
00:23:39,539 --> 00:23:45,299
these automated testing pipelines not in

421
00:23:45,299 --> 00:23:48,659
all projects yet but in some and here

422
00:23:48,659 --> 00:23:52,380
we'll see an example of amyl an example

423
00:23:52,380 --> 00:23:56,520
of a Jenkins pipeline and here we run

424
00:23:56,520 --> 00:23:59,049
integration tests through the core

425
00:23:59,049 --> 00:24:01,419
rooster to the application and this

426
00:24:01,419 --> 00:24:03,879
means that we changed the endpoint of

427
00:24:03,879 --> 00:24:06,999
the integration from of the integration

428
00:24:06,999 --> 00:24:11,320
tests from the application to the web in

429
00:24:11,320 --> 00:24:13,590
front of it

430
00:24:13,590 --> 00:24:19,480
and after some months of experience we

431
00:24:19,480 --> 00:24:22,269
can say that we do not always fully

432
00:24:22,269 --> 00:24:26,320
trust the tests we sometimes still use

433
00:24:26,320 --> 00:24:31,239
production Lots because the test

434
00:24:31,239 --> 00:24:34,269
coverage has to be good to catch all

435
00:24:34,269 --> 00:24:37,269
possible false positives during the test

436
00:24:37,269 --> 00:24:40,210
though is sometimes still let the

437
00:24:40,210 --> 00:24:43,330
wireframe in production and we still

438
00:24:43,330 --> 00:24:48,100
need some logs and what I can also say

439
00:24:48,100 --> 00:24:50,859
is that sometimes the test tools also

440
00:24:50,859 --> 00:24:54,580
trigger false positives and I very often

441
00:24:54,580 --> 00:24:57,429
see that they do not set request status

442
00:24:57,429 --> 00:25:02,499
properly and what I particularly like is

443
00:25:02,499 --> 00:25:05,739
that developers are very open to web

444
00:25:05,739 --> 00:25:08,739
application firewalls but they may also

445
00:25:08,739 --> 00:25:12,609
need help and one of the challenges is

446
00:25:12,609 --> 00:25:15,609
that they have to have the wife in mind

447
00:25:15,609 --> 00:25:19,320
when something doesn't work anymore and

448
00:25:19,320 --> 00:25:22,960
sometimes also error messages of a wife

449
00:25:22,960 --> 00:25:25,359
are not very easy to understand for

450
00:25:25,359 --> 00:25:31,649
everyone so we need to help them and

451
00:25:31,649 --> 00:25:34,840
also already mentioned I want to spread

452
00:25:34,840 --> 00:25:38,049
the use of web application firewalls and

453
00:25:38,049 --> 00:25:40,720
how can I achieve this with

454
00:25:40,720 --> 00:25:45,789
infrastructure as code and at parcel we

455
00:25:45,789 --> 00:25:49,210
use Red Hat openshift openshift is a

456
00:25:49,210 --> 00:25:52,869
community's distribution and I wrote the

457
00:25:52,869 --> 00:25:55,600
template to add worth to a project with

458
00:25:55,600 --> 00:25:58,509
only one command and the goal of this

459
00:25:58,509 --> 00:26:01,739
template is to have a running graph

460
00:26:01,739 --> 00:26:05,580
inside of the project

461
00:26:08,450 --> 00:26:13,360
and why did I write this template well

462
00:26:13,360 --> 00:26:16,190
the developers they don't have a need

463
00:26:16,190 --> 00:26:19,280
for web application firewalls but they

464
00:26:19,280 --> 00:26:22,400
are interested so I have to make it easy

465
00:26:22,400 --> 00:26:24,350
for them to add a web application

466
00:26:24,350 --> 00:26:27,770
firewall to their project and I do this

467
00:26:27,770 --> 00:26:31,970
with documentation a template and as

468
00:26:31,970 --> 00:26:38,780
little effort as possible and after some

469
00:26:38,780 --> 00:26:43,720
month we also discovered challenges

470
00:26:43,720 --> 00:26:47,300
adding a wife to one project is one

471
00:26:47,300 --> 00:26:50,450
thing but running last for an entire

472
00:26:50,450 --> 00:26:54,320
company is another and the proper update

473
00:26:54,320 --> 00:27:02,030
process is also required and a polite TC

474
00:27:02,030 --> 00:27:04,970
we love open source software and that's

475
00:27:04,970 --> 00:27:08,090
why we also contribute and publish a lot

476
00:27:08,090 --> 00:27:13,460
and I also open sourced our laughs image

477
00:27:13,460 --> 00:27:17,360
and open chef template at github under

478
00:27:17,360 --> 00:27:21,320
the organization puzzle and now you say

479
00:27:21,320 --> 00:27:23,900
maybe oh that's bad because they don't

480
00:27:23,900 --> 00:27:26,780
use open ships but it's not because we

481
00:27:26,780 --> 00:27:29,650
also published kubernetes tell'em charts

482
00:27:29,650 --> 00:27:33,260
so feel free to test it and tilt it for

483
00:27:33,260 --> 00:27:36,200
your company and as always contributions

484
00:27:36,200 --> 00:27:40,480
and feedback is very welcome

485
00:27:42,910 --> 00:27:46,730
so to answer my first question yes I

486
00:27:46,730 --> 00:27:49,460
think a wife in your devotee

487
00:27:49,460 --> 00:27:53,090
did in your DevOps pipeline and in

488
00:27:53,090 --> 00:27:57,500
production of course is your friend you

489
00:27:57,500 --> 00:27:59,870
get an additional layer of Defense in

490
00:27:59,870 --> 00:28:03,380
front of the web application you get a

491
00:28:03,380 --> 00:28:06,950
logging and monitoring mechanism you

492
00:28:06,950 --> 00:28:09,680
also get the ability to do water

493
00:28:09,680 --> 00:28:12,440
patching in front of your web

494
00:28:12,440 --> 00:28:15,680
application because mod security rules

495
00:28:15,680 --> 00:28:18,560
are also faster to write than fixing the

496
00:28:18,560 --> 00:28:21,170
application and it's all open sourced

497
00:28:21,170 --> 00:28:21,830
and free

498
00:28:21,830 --> 00:28:24,919
so I think everyone is happy to develop

499
00:28:24,919 --> 00:28:27,289
recipe because we don't break his

500
00:28:27,289 --> 00:28:28,700
application anymore

501
00:28:28,700 --> 00:28:32,059
the operator is happy because we don't

502
00:28:32,059 --> 00:28:34,759
have issues and production and of course

503
00:28:34,759 --> 00:28:37,190
the security engineer is happy because

504
00:28:37,190 --> 00:28:42,710
we have a wife in place and I would also

505
00:28:42,710 --> 00:28:46,159
like to give you a feeling at kernel

506
00:28:46,159 --> 00:28:48,379
centered or do you find all the

507
00:28:48,379 --> 00:28:50,559
information about the choral set and

508
00:28:50,559 --> 00:28:53,840
also blog posts about this topic and

509
00:28:53,840 --> 00:28:57,409
other topics and at puzzles on CH you

510
00:28:57,409 --> 00:29:00,049
also find blog posts about this topic in

511
00:29:00,049 --> 00:29:03,700
chairman and also other blog posts and

512
00:29:03,700 --> 00:29:07,279
the official always modsecurity corals

513
00:29:07,279 --> 00:29:09,440
that container can be found at docker

514
00:29:09,440 --> 00:29:14,269
hub and we published our chant of paste

515
00:29:14,269 --> 00:29:18,200
laughs at choir and the organization

516
00:29:18,200 --> 00:29:23,809
puzzle ITC and the source of this wave

517
00:29:23,809 --> 00:29:27,830
image the open ship template and also

518
00:29:27,830 --> 00:29:30,019
the kubernetes hell chart can be found

519
00:29:30,019 --> 00:29:33,580
at github on the organization person and

520
00:29:33,580 --> 00:29:37,580
the demo we have seen is the pixie CRS

521
00:29:37,580 --> 00:29:42,019
pipeline of the Elwha special project

522
00:29:42,019 --> 00:29:45,169
and we also plan to publish other

523
00:29:45,169 --> 00:29:49,940
pipelines yet to spread threat the use

524
00:29:49,940 --> 00:29:53,450
of web application firewalls and of

525
00:29:53,450 --> 00:29:56,059
course our mod security concept project

526
00:29:56,059 --> 00:29:59,059
can be found at github as well under the

527
00:29:59,059 --> 00:30:07,309
organization spider labs so give it a

528
00:30:07,309 --> 00:30:09,710
try and this is really a cool thing you

529
00:30:09,710 --> 00:30:12,799
just need to insert the wife early into

530
00:30:12,799 --> 00:30:15,019
the deployment pipeline and give the

531
00:30:15,019 --> 00:30:18,710
developers early feedback and I hope

532
00:30:18,710 --> 00:30:22,909
that every one of you will now add a

533
00:30:22,909 --> 00:30:27,679
wife to production and to a pipeline as

534
00:30:27,679 --> 00:30:31,690
well so yep that's it

535
00:30:31,690 --> 00:30:34,950
thank you very much

536
00:30:34,950 --> 00:30:37,110
all right Francisca thank you that was

537
00:30:37,110 --> 00:30:39,169
amazing

538
00:30:39,300 --> 00:30:41,670
first of all I want to ask a personal

539
00:30:41,670 --> 00:30:42,300
question

540
00:30:42,300 --> 00:30:44,840
like say you do not have a

541
00:30:44,840 --> 00:30:46,200
watering-place

542
00:30:46,200 --> 00:30:49,860
for now what would you say is the first

543
00:30:49,860 --> 00:30:53,160
step to - for a developer to start with

544
00:30:53,160 --> 00:30:56,940
say from tomorrow morning you want to

545
00:30:56,940 --> 00:31:00,960
add other worth No okay so you you put

546
00:31:00,960 --> 00:31:04,710
it into your project you start off and

547
00:31:04,710 --> 00:31:08,700
as I said if you have tests you can

548
00:31:08,700 --> 00:31:12,630
point these tests to your wife and maybe

549
00:31:12,630 --> 00:31:14,490
you also you already have false

550
00:31:14,490 --> 00:31:16,800
positives so you already have errors in

551
00:31:16,800 --> 00:31:22,380
your luck so you can do them and if you

552
00:31:22,380 --> 00:31:24,960
don't have tests you can write them or

553
00:31:24,960 --> 00:31:27,420
if you don't want to write them and you

554
00:31:27,420 --> 00:31:31,620
don't have any tests you can just add

555
00:31:31,620 --> 00:31:35,460
the wife or not security Carlos said

556
00:31:35,460 --> 00:31:38,400
with a high limit so that it doesn't

557
00:31:38,400 --> 00:31:42,720
block requests you can have a look at

558
00:31:42,720 --> 00:31:45,540
the locks and then tune your wife and

559
00:31:45,540 --> 00:31:49,110
slowly bring down the limits so that the

560
00:31:49,110 --> 00:31:57,360
wife gets into a blocking state okay

561
00:31:57,360 --> 00:32:01,560
other question is it also I mean you

562
00:32:01,560 --> 00:32:04,050
were explaining that there are darker

563
00:32:04,050 --> 00:32:06,810
images available is it also I mean you

564
00:32:06,810 --> 00:32:08,730
can do this in your pipeline but you can

565
00:32:08,730 --> 00:32:11,370
get even earlier feedback to get it on

566
00:32:11,370 --> 00:32:12,360
your local machine

567
00:32:12,360 --> 00:32:14,670
I mean is that a good practice to do

568
00:32:14,670 --> 00:32:16,110
that with friends is one of the darker

569
00:32:16,110 --> 00:32:17,970
images and test it on your local machine

570
00:32:17,970 --> 00:32:19,590
that way before you actually push it

571
00:32:19,590 --> 00:32:23,820
into your get pipeline yeah I think an

572
00:32:23,820 --> 00:32:26,670
important point here is that you you do

573
00:32:26,670 --> 00:32:30,030
some kind of automation yeah maybe you

574
00:32:30,030 --> 00:32:32,430
don't want to do this by hand or man who

575
00:32:32,430 --> 00:32:35,760
but yes of course if you if you have

576
00:32:35,760 --> 00:32:38,490
some automation of tests on your laptop

577
00:32:38,490 --> 00:32:42,180
if you if you change the code and if you

578
00:32:42,180 --> 00:32:45,120
have some test you can also add to the

579
00:32:45,120 --> 00:32:48,060
wife there if you yeah you sit with a

580
00:32:48,060 --> 00:32:48,750
doctor

581
00:32:48,750 --> 00:32:53,190
yes all right like that that's right

582
00:32:53,190 --> 00:32:58,680
going I have a question from from Rick

583
00:32:58,680 --> 00:32:59,910
over here ie

584
00:32:59,910 --> 00:33:02,880
asked would you recommend other modules

585
00:33:02,880 --> 00:33:06,930
to use with my security CRS as part of

586
00:33:06,930 --> 00:33:13,020
your web container what is meant by

587
00:33:13,020 --> 00:33:17,130
other modules I am not completely sure

588
00:33:17,130 --> 00:33:19,650
but are there well let's let's

589
00:33:19,650 --> 00:33:22,920
generalize the question besides besides

590
00:33:22,920 --> 00:33:25,890
love like okay you have to take care of

591
00:33:25,890 --> 00:33:28,770
your own own security inside your your

592
00:33:28,770 --> 00:33:30,960
applications there aren't other things

593
00:33:30,960 --> 00:33:34,230
you you suggest to use except for awhile

594
00:33:34,230 --> 00:33:38,790
okay yeah so maybe if you build an

595
00:33:38,790 --> 00:33:41,910
application you you if you have an

596
00:33:41,910 --> 00:33:53,420
application of course you can also and

597
00:33:53,420 --> 00:33:57,170
it's also important that you you try

598
00:33:57,170 --> 00:34:02,400
that you that you put some security

599
00:34:02,400 --> 00:34:05,010
tests into your building into your build

600
00:34:05,010 --> 00:34:08,129
pipeline if you choose some code

601
00:34:08,129 --> 00:34:10,679
analysis for example or you do

602
00:34:10,679 --> 00:34:13,860
dependency checks of your application

603
00:34:13,860 --> 00:34:15,870
that's also important it's also

604
00:34:15,870 --> 00:34:19,739
important to secure the the web

605
00:34:19,739 --> 00:34:22,168
application behind the wife as I said

606
00:34:22,168 --> 00:34:24,870
it's not it's not if you use a web

607
00:34:24,870 --> 00:34:26,909
application firewalls you're safe you

608
00:34:26,909 --> 00:34:29,129
don't have to do any security checks

609
00:34:29,129 --> 00:34:32,040
anymore it's still important that you

610
00:34:32,040 --> 00:34:36,510
have a secure web application and that

611
00:34:36,510 --> 00:34:39,120
you have secure code and yeah it's if

612
00:34:39,120 --> 00:34:40,980
you have multiple layer of defense

613
00:34:40,980 --> 00:34:43,879
that's even better

614
00:34:43,879 --> 00:34:49,290
it also question like like how about the

615
00:34:49,290 --> 00:34:53,219
use of mod evasive for instance I don't

616
00:34:53,219 --> 00:34:55,520
know this is module I'm sorry

617
00:34:55,520 --> 00:34:59,660
no worries should happen so I mean

618
00:35:01,190 --> 00:35:04,460
worried about that

619
00:35:04,620 --> 00:35:07,830
oh yeah one other question I I

620
00:35:07,830 --> 00:35:11,340
personally have is with a waffle you can

621
00:35:11,340 --> 00:35:14,250
block certain requests towards your your

622
00:35:14,250 --> 00:35:20,060
application is it possible or or

623
00:35:20,060 --> 00:35:22,200
preferable to get a B - the longing of

624
00:35:22,200 --> 00:35:23,730
that because I would be interested for

625
00:35:23,730 --> 00:35:25,290
instance like which ones are blocked

626
00:35:25,290 --> 00:35:27,750
because our I do I have a lot of

627
00:35:27,750 --> 00:35:31,400
requests on for instance path reversal

628
00:35:31,400 --> 00:35:35,250
examples or sequel injection examples to

629
00:35:35,250 --> 00:35:39,000
get alerted by that is that is that is

630
00:35:39,000 --> 00:35:41,190
that is that a general practice or how

631
00:35:41,190 --> 00:35:45,590
do you think about that I mean yeah

632
00:35:45,590 --> 00:35:48,300
exactly one of the problems you you now

633
00:35:48,300 --> 00:35:50,490
have two slopes now and what do you do

634
00:35:50,490 --> 00:35:51,300
with these logs

635
00:35:51,300 --> 00:35:55,010
exactly exactly one to monitor them and

636
00:35:55,010 --> 00:35:58,620
we are still yeah we'll we are still at

637
00:35:58,620 --> 00:36:00,510
the beginning and we are still working

638
00:36:00,510 --> 00:36:05,600
on this but what we are doing now is we

639
00:36:05,690 --> 00:36:11,600
monitor dis lots of course and we we do

640
00:36:11,600 --> 00:36:16,050
we have thresholds we don't want to to

641
00:36:16,050 --> 00:36:19,680
alert every 403 forbidden because yeah

642
00:36:19,680 --> 00:36:22,830
it's false if it's an attack and we are

643
00:36:22,830 --> 00:36:25,680
still figuring out where do we want to

644
00:36:25,680 --> 00:36:30,120
to make the threshold when do we want to

645
00:36:30,120 --> 00:36:33,510
alert when it's an attack and yeah it's

646
00:36:33,510 --> 00:36:38,090
very difficult to say this to have this

647
00:36:38,090 --> 00:36:40,680
thresholds for every application so it's

648
00:36:40,680 --> 00:36:43,830
yeah it depends a lot and we are still

649
00:36:43,830 --> 00:36:46,380
working on these shows and on this

650
00:36:46,380 --> 00:36:50,130
monitoring I can I can imagine I mean

651
00:36:50,130 --> 00:36:53,160
your example with the Union word is also

652
00:36:53,160 --> 00:36:55,560
a false positive you do not want to get

653
00:36:55,560 --> 00:36:59,460
alerted instantly by yeah well just just

654
00:36:59,460 --> 00:37:01,050
one single hit but you want to make sure

655
00:37:01,050 --> 00:37:04,820
that it's a reasonable amount of then

656
00:37:04,820 --> 00:37:08,760
yeah if you have a lot of 403 forbidden

657
00:37:08,760 --> 00:37:11,790
areas then maybe you have an application

658
00:37:11,790 --> 00:37:16,120
change that was not told to the aware

659
00:37:16,120 --> 00:37:18,010
so that a lot of false positives

660
00:37:18,010 --> 00:37:20,470
triggered but it can also be an attack

661
00:37:20,470 --> 00:37:24,070
so yeah you have to alert it and and

662
00:37:24,070 --> 00:37:27,220
then have a look at it and decide if

663
00:37:27,220 --> 00:37:28,840
it's an attack or it's just an

664
00:37:28,840 --> 00:37:30,640
application change that triggers a lot

665
00:37:30,640 --> 00:37:34,540
of false positives another question over

666
00:37:34,540 --> 00:37:37,090
here is can the core rule set be

667
00:37:37,090 --> 00:37:40,660
customized further for instance the

668
00:37:40,660 --> 00:37:42,850
development T if the development team

669
00:37:42,850 --> 00:37:45,610
can do that to benefits the need of an

670
00:37:45,610 --> 00:37:47,440
application is there an easy way to do

671
00:37:47,440 --> 00:37:50,110
that or when to start with that I think

672
00:37:50,110 --> 00:37:54,640
you mentioned some of this but if you

673
00:37:54,640 --> 00:38:02,620
have say a MongoDB database behind your

674
00:38:02,620 --> 00:38:08,279
web application you can maybe switch

675
00:38:08,430 --> 00:38:13,300
injection rules or my ethical injection

676
00:38:13,300 --> 00:38:18,490
or if you want you can of course you can

677
00:38:18,490 --> 00:38:20,980
always run the entire Carlos set that's

678
00:38:20,980 --> 00:38:23,740
what we do now but you can also switch

679
00:38:23,740 --> 00:38:27,070
off part of of the course and if you

680
00:38:27,070 --> 00:38:31,090
think I don't need PHP rules because I

681
00:38:31,090 --> 00:38:34,350
don't have a PHP application yes you can

682
00:38:34,350 --> 00:38:41,380
can vary so it's quite easy to to

683
00:38:41,380 --> 00:38:44,620
include and exclude rules accordingly

684
00:38:44,620 --> 00:38:48,490
that it fits your personal preference or

685
00:38:48,490 --> 00:38:55,630
your personal application but yeah we do

686
00:38:55,630 --> 00:38:59,260
not we always run the full and horrible

687
00:38:59,260 --> 00:39:02,530
sense all right not yet maybe maybe if

688
00:39:02,530 --> 00:39:05,170
we have performance problems or if we

689
00:39:05,170 --> 00:39:07,870
have other problems maybe we begin to to

690
00:39:07,870 --> 00:39:12,430
exclude rules yeah you're asking you

691
00:39:12,430 --> 00:39:14,260
were telling that the walk is actually

692
00:39:14,260 --> 00:39:16,090
like the first layer of defense before

693
00:39:16,090 --> 00:39:19,330
you get into your application how would

694
00:39:19,330 --> 00:39:21,400
you suggest if you have like a bunch of

695
00:39:21,400 --> 00:39:24,640
applications do you use one wife or do

696
00:39:24,640 --> 00:39:27,670
you use multiple wife's depending on the

697
00:39:27,670 --> 00:39:29,650
Preferences of different

698
00:39:29,650 --> 00:39:34,990
locations what is your view on that we

699
00:39:34,990 --> 00:39:37,990
always we have a lot of applications and

700
00:39:37,990 --> 00:39:40,869
we have them in separate projects or

701
00:39:40,869 --> 00:39:46,599
name if we are talking about open ship

702
00:39:46,599 --> 00:39:48,730
for example and of course there we have

703
00:39:48,730 --> 00:39:52,240
a wife for each of the projects or if

704
00:39:52,240 --> 00:39:55,500
each of the applications and if we have

705
00:39:55,500 --> 00:40:00,640
multiple applications we put one wife in

706
00:40:00,640 --> 00:40:04,720
front of it yeah we can do both maybe

707
00:40:04,720 --> 00:40:08,380
the rule writing is a bit easier if you

708
00:40:08,380 --> 00:40:11,730
have one web application firewall per

709
00:40:11,730 --> 00:40:16,569
application yeah I guess it also depends

710
00:40:16,569 --> 00:40:18,730
on your architecture and things like if

711
00:40:18,730 --> 00:40:21,279
you have a lot of for instance micro or

712
00:40:21,279 --> 00:40:23,470
nano services that it might be useful to

713
00:40:23,470 --> 00:40:25,839
have one block and if you have some

714
00:40:25,839 --> 00:40:28,750
bigger applications that it might be

715
00:40:28,750 --> 00:40:30,640
useful to have a wolf each so that's

716
00:40:30,640 --> 00:40:33,760
dependable on depending on your way you

717
00:40:33,760 --> 00:40:37,319
how you design your application right

718
00:40:38,880 --> 00:40:42,400
all right so I want to leave it at that

719
00:40:42,400 --> 00:40:45,089
and I want to thank you for your

720
00:40:45,089 --> 00:40:48,760
presentation first of all I think it's

721
00:40:48,760 --> 00:40:52,119
very useful I didn't look that much into

722
00:40:52,119 --> 00:40:54,819
well before I I was attending this one

723
00:40:54,819 --> 00:40:58,359
and so I think it it is very useful for

724
00:40:58,359 --> 00:41:00,460
for people to to use it and to integrate

725
00:41:00,460 --> 00:41:03,160
it that easy like your example how do

726
00:41:03,160 --> 00:41:05,559
you did it work with circle CI it

727
00:41:05,559 --> 00:41:09,190
triggers me that okay it's just as easy

728
00:41:09,190 --> 00:41:11,799
if it's just as easy as that why not

729
00:41:11,799 --> 00:41:16,299
just use it straight away right so thank

730
00:41:16,299 --> 00:41:20,470
you for that for that explanation we

731
00:41:20,470 --> 00:41:22,720
have some other things coming up I mean

732
00:41:22,720 --> 00:41:25,900
we've got more events coming up so the

733
00:41:25,900 --> 00:41:28,630
let's the next event will be at February

734
00:41:28,630 --> 00:41:31,869
20 and it will be how to implement

735
00:41:31,869 --> 00:41:34,480
deaths a-cups in ink run across the

736
00:41:34,480 --> 00:41:39,599
entire organization so - how to how to

737
00:41:39,599 --> 00:41:42,520
get there there's a cop's mindset and

738
00:41:42,520 --> 00:41:43,420
that that

739
00:41:43,420 --> 00:41:47,650
i D across the whole organization it's a

740
00:41:47,650 --> 00:41:52,049
webinar by an idea budgetary if I am

741
00:41:52,049 --> 00:41:53,950
hopefully I do mispronounce the name

742
00:41:53,950 --> 00:41:56,140
because I'm very good at mispronouncing

743
00:41:56,140 --> 00:41:58,240
names I'm sorry for that but tune in

744
00:41:58,240 --> 00:42:02,559
next time February 20 at 5:00 p.m. GMT

745
00:42:02,559 --> 00:42:05,609
we will have them have a new one again

746
00:42:05,609 --> 00:42:08,470
thanks for Cisco so far for for your

747
00:42:08,470 --> 00:42:10,030
excellent presentation this will be

748
00:42:10,030 --> 00:42:13,359
online like instantly after I I close

749
00:42:13,359 --> 00:42:15,880
this one down and for all of you out

750
00:42:15,880 --> 00:42:17,829
there thank you for watching and

751
00:42:17,829 --> 00:42:21,329
hopefully see you later

752
00:42:21,329 --> 00:42:25,140
thank you for having me

