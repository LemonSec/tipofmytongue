1
00:00:15,560 --> 00:00:19,710
hello and welcome to secure developer

2
00:00:19,710 --> 00:00:21,060
I'm really excited

3
00:00:21,060 --> 00:00:23,460
and say a new products I think actually

4
00:00:23,460 --> 00:00:24,720
enjoy me I think she's need to be

5
00:00:24,720 --> 00:00:39,780
talking about something really bright so

6
00:00:39,780 --> 00:00:42,180
really enjoy it my name is Sam and I'm

7
00:00:42,180 --> 00:00:45,480
like she has an education he do she's my

8
00:00:45,480 --> 00:00:46,440
competition

9
00:00:46,440 --> 00:00:51,600
he's known and we have a selection also

10
00:00:51,600 --> 00:00:53,370
if you have any questions he's hopping

11
00:00:53,370 --> 00:00:55,289
on our spec channel to be secure

12
00:00:55,289 --> 00:01:00,449
defenses calm if you're going home and

13
00:01:00,449 --> 00:01:09,530
they're going on to the vaccinations and

14
00:01:09,530 --> 00:01:18,210
it's not gonna be like yeah hi so first

15
00:01:18,210 --> 00:01:19,650
of all thank you for having me

16
00:01:19,650 --> 00:01:26,009
and I guess I should start yes

17
00:01:26,009 --> 00:01:29,070
so let me share the screen can you

18
00:01:29,070 --> 00:01:33,890
contribute on with everything words yeah

19
00:01:33,890 --> 00:01:35,759
yeah that's nice

20
00:01:35,759 --> 00:01:39,750
so I'm gonna talk about the things like

21
00:01:39,750 --> 00:01:42,600
how to implement the deficit ops in Asia

22
00:01:42,600 --> 00:01:47,070
so all my talk is going to be around the

23
00:01:47,070 --> 00:01:49,560
Asia as a cold and how we develop and

24
00:01:49,560 --> 00:01:54,990
put the technology solutions in the

25
00:01:54,990 --> 00:01:59,180
cloud so let me introduce myself and

26
00:01:59,180 --> 00:02:01,920
like I mentioned my name is Victor Lee I

27
00:02:01,920 --> 00:02:05,009
do work for the Microsoft my official

28
00:02:05,009 --> 00:02:07,710
title is cloud solution architect mostly

29
00:02:07,710 --> 00:02:11,520
spending the time working on the cloud

30
00:02:11,520 --> 00:02:13,940
security application security so

31
00:02:13,940 --> 00:02:17,300
helping talk customers and to plan

32
00:02:17,300 --> 00:02:19,940
architect and deploy solutions securely

33
00:02:19,940 --> 00:02:22,490
to the age for thought in the free time

34
00:02:22,490 --> 00:02:24,920
as you can see I do spend a lot of time

35
00:02:24,920 --> 00:02:29,330
in hiking or driving the motorcycle so I

36
00:02:29,330 --> 00:02:31,910
believe it's kind of bit related to the

37
00:02:31,910 --> 00:02:35,210
extreme and you know and the things but

38
00:02:35,210 --> 00:02:37,970
first of all let me show you some

39
00:02:37,970 --> 00:02:41,800
numbers and I bet you may have seen them

40
00:02:41,800 --> 00:02:45,260
so this correlation represents like as

41
00:02:45,260 --> 00:02:49,280
you can see there is a 110 and one which

42
00:02:49,280 --> 00:02:53,000
represents the real situation what you

43
00:02:53,000 --> 00:02:54,800
can see in the mostly in the

44
00:02:54,800 --> 00:02:57,110
organizations when we have 100

45
00:02:57,110 --> 00:03:00,170
developers 10 operation guys and if you

46
00:03:00,170 --> 00:03:03,440
get luck we have one security person who

47
00:03:03,440 --> 00:03:05,560
is d-link we have the security and

48
00:03:05,560 --> 00:03:08,920
helping the ops guys and the devs guys

49
00:03:08,920 --> 00:03:13,070
to make the solutions secure and it

50
00:03:13,070 --> 00:03:14,900
mostly it happens like in the way like

51
00:03:14,900 --> 00:03:18,020
we usually shows up before the release

52
00:03:18,020 --> 00:03:20,090
and we are saying like hey that's time

53
00:03:20,090 --> 00:03:22,760
for the pen test and I need to check or

54
00:03:22,760 --> 00:03:24,650
we need to hired some outsource company

55
00:03:24,650 --> 00:03:27,730
who's gonna check the security state and

56
00:03:27,730 --> 00:03:32,209
it gonna end up while I whip the waiting

57
00:03:32,209 --> 00:03:34,520
for the two weeks or be a bit more while

58
00:03:34,520 --> 00:03:36,830
all the security checks are done and

59
00:03:36,830 --> 00:03:41,090
then you start to delay the release so

60
00:03:41,090 --> 00:03:43,250
maybe it worked very well with the devil

61
00:03:43,250 --> 00:03:45,350
we have the waterfall model but then

62
00:03:45,350 --> 00:03:48,950
came the dev ops and when comes to the

63
00:03:48,950 --> 00:03:51,260
dev ops were a lot of the definitions

64
00:03:51,260 --> 00:03:57,110
and there are a lot of things we take

65
00:03:57,110 --> 00:04:00,680
the depth but for today I'm gonna show

66
00:04:00,680 --> 00:04:03,260
the definite definition what we are

67
00:04:03,260 --> 00:04:05,840
really using in the Microsoft which

68
00:04:05,840 --> 00:04:08,900
states that the dev Ops is the union of

69
00:04:08,900 --> 00:04:11,120
people process and technology to enable

70
00:04:11,120 --> 00:04:13,970
continuous delivery of value to your end

71
00:04:13,970 --> 00:04:17,089
users it may sounds nice but from the

72
00:04:17,089 --> 00:04:19,339
security perspective for me as having

73
00:04:19,339 --> 00:04:20,988
the background in the security around

74
00:04:20,988 --> 00:04:25,550
like 15 years almost the first time I

75
00:04:25,550 --> 00:04:27,830
saw the dev ops it was bit like the name

76
00:04:27,830 --> 00:04:29,720
nightmare-like okay now you're gonna

77
00:04:29,720 --> 00:04:32,870
deliver the release even more often even

78
00:04:32,870 --> 00:04:35,180
more faster how I'm gonna deal with it

79
00:04:35,180 --> 00:04:38,000
how I'm gonna help you to implement the

80
00:04:38,000 --> 00:04:40,969
security in the proper way in such short

81
00:04:40,969 --> 00:04:45,560
time amount of the time so it was bit

82
00:04:45,560 --> 00:04:47,419
scary and at the beginning I was a bit

83
00:04:47,419 --> 00:04:49,969
skeptical but the more I learned about

84
00:04:49,969 --> 00:04:52,729
the DevOps practices the more understood

85
00:04:52,729 --> 00:04:56,300
how it works I realized that this is

86
00:04:56,300 --> 00:04:58,460
actually the good thing from all of

87
00:04:58,460 --> 00:05:00,289
these free perspectives like from the

88
00:05:00,289 --> 00:05:02,539
people processing the technology because

89
00:05:02,539 --> 00:05:05,000
what we can do we can inject the

90
00:05:05,000 --> 00:05:07,639
security in the DevOps and this is how

91
00:05:07,639 --> 00:05:11,780
we how we got actually this I don't want

92
00:05:11,780 --> 00:05:13,759
to say the buzzword like the dev cycles

93
00:05:13,759 --> 00:05:17,919
but the the terminology is for today but

94
00:05:17,919 --> 00:05:20,810
there are a lot of the activities what

95
00:05:20,810 --> 00:05:22,219
we can do when it comes to the

96
00:05:22,219 --> 00:05:25,279
implementing security in the DevOps but

97
00:05:25,279 --> 00:05:27,650
as for today I will mostly would like to

98
00:05:27,650 --> 00:05:30,949
focus on one think what we got and what

99
00:05:30,949 --> 00:05:35,719
is like one of the biggest and DevOps

100
00:05:35,719 --> 00:05:37,759
or I should say the popular thing in the

101
00:05:37,759 --> 00:05:41,810
DevOps is automation and which gonna be

102
00:05:41,810 --> 00:05:45,409
more scope of today's talk because the

103
00:05:45,409 --> 00:05:49,099
good thing about the automation is why

104
00:05:49,099 --> 00:05:52,039
not automate security then so why not

105
00:05:52,039 --> 00:05:54,110
automate the security practices and

106
00:05:54,110 --> 00:05:56,779
implement them in the in the DevOps in

107
00:05:56,779 --> 00:06:01,039
the CI CD pipeline and and get a lot of

108
00:06:01,039 --> 00:06:03,400
the things what we used to do maybe

109
00:06:03,400 --> 00:06:06,889
manually or by outsourcing or at the end

110
00:06:06,889 --> 00:06:09,500
of the development lifecycle inside of

111
00:06:09,500 --> 00:06:12,560
our development process by following the

112
00:06:12,560 --> 00:06:15,469
same approach as all DevOps adopted by

113
00:06:15,469 --> 00:06:19,699
automating so then of course there is a

114
00:06:19,699 --> 00:06:22,819
question like okay that may sound really

115
00:06:22,819 --> 00:06:24,940
nice but where should I start

116
00:06:24,940 --> 00:06:27,589
so when I'm dealing with the different

117
00:06:27,589 --> 00:06:30,440
customers I have realized that it's

118
00:06:30,440 --> 00:06:32,960
always better to come up with well kind

119
00:06:32,960 --> 00:06:35,959
of the patterns because we are human

120
00:06:35,959 --> 00:06:38,089
sometimes we'd love to have the recipes

121
00:06:38,089 --> 00:06:41,560
well what to follow so

122
00:06:41,560 --> 00:06:45,110
if you are not familiar with the

123
00:06:45,110 --> 00:06:47,780
security or you have the limited

124
00:06:47,780 --> 00:06:50,360
resource of the security persons you can

125
00:06:50,360 --> 00:06:53,120
do the at least few patterns you can

126
00:06:53,120 --> 00:06:56,720
start at least somewhere and I'm gonna

127
00:06:56,720 --> 00:07:00,140
try to show some of them and I can say

128
00:07:00,140 --> 00:07:02,570
that by implementing at least these

129
00:07:02,570 --> 00:07:05,600
patterns you can reduce not maybe for

130
00:07:05,600 --> 00:07:07,460
the whole but even for more than the

131
00:07:07,460 --> 00:07:09,950
health of the security problems when it

132
00:07:09,950 --> 00:07:12,800
comes to the security flaws in the

133
00:07:12,800 --> 00:07:15,560
application security flaws in the

134
00:07:15,560 --> 00:07:21,680
infrastructure part so the long had the

135
00:07:21,680 --> 00:07:24,110
low-hanging fruit is infrastructure

136
00:07:24,110 --> 00:07:26,750
usually when comes to the security the

137
00:07:26,750 --> 00:07:30,440
easiest part is to start with the ops

138
00:07:30,440 --> 00:07:33,560
side literally with the infrastructure

139
00:07:33,560 --> 00:07:37,160
and there are several best practices

140
00:07:37,160 --> 00:07:38,810
when it comes to the cloud

141
00:07:38,810 --> 00:07:40,940
infrastructure and particularly like

142
00:07:40,940 --> 00:07:43,970
Asia what you can do immediately when

143
00:07:43,970 --> 00:07:46,940
you start to plan how your all your

144
00:07:46,940 --> 00:07:49,460
cloud hosting is gonna look like how

145
00:07:49,460 --> 00:07:53,240
you're gonna spend the like resources

146
00:07:53,240 --> 00:07:55,220
how you're gonna plan the resources and

147
00:07:55,220 --> 00:07:57,560
how you deploy couldn't deploy the

148
00:07:57,560 --> 00:08:01,130
resources in in Asia and one one of them

149
00:08:01,130 --> 00:08:06,050
is what we say usually is and what I

150
00:08:06,050 --> 00:08:08,780
suggest also always is that when you

151
00:08:08,780 --> 00:08:12,140
plan your Asia environment think about

152
00:08:12,140 --> 00:08:15,260
them subscription paired environment and

153
00:08:15,260 --> 00:08:18,050
paired project that means that if you

154
00:08:18,050 --> 00:08:20,360
look back on their own premises we used

155
00:08:20,360 --> 00:08:23,210
to have like themes a zones

156
00:08:23,210 --> 00:08:28,220
internal zones and front end zones and

157
00:08:28,220 --> 00:08:30,560
we always used to have the dev test

158
00:08:30,560 --> 00:08:32,809
environments in the production martens

159
00:08:32,809 --> 00:08:35,929
the same thing should be transferred and

160
00:08:35,929 --> 00:08:39,679
or reused also in the cloud so in Asian

161
00:08:39,679 --> 00:08:43,039
case if you have for example the project

162
00:08:43,039 --> 00:08:46,510
what you're developing think about that

163
00:08:46,510 --> 00:08:49,580
subscription should go for the project

164
00:08:49,580 --> 00:08:53,810
and the second subscription is like for

165
00:08:53,810 --> 00:08:55,370
the development in warden

166
00:08:55,370 --> 00:08:58,490
the first is for the production then

167
00:08:58,490 --> 00:09:01,760
another thing when comes to the cloud

168
00:09:01,760 --> 00:09:04,220
all the developers we immediately start

169
00:09:04,220 --> 00:09:06,890
to build the CIC deep pipelines and push

170
00:09:06,890 --> 00:09:10,580
the code towards the cloud environment

171
00:09:10,580 --> 00:09:14,660
and only after mostly we could find out

172
00:09:14,660 --> 00:09:16,700
that we may be over spend the resources

173
00:09:16,700 --> 00:09:20,930
like it caused the big costs or it

174
00:09:20,930 --> 00:09:25,070
introduced some widely wide openings

175
00:09:25,070 --> 00:09:27,710
like for example some retail machines

176
00:09:27,710 --> 00:09:30,740
with the public eye piece or the

177
00:09:30,740 --> 00:09:35,900
non-protected web services and so on not

178
00:09:35,900 --> 00:09:38,240
to stop that development what you can do

179
00:09:38,240 --> 00:09:40,810
you can apply the policies to control

180
00:09:40,810 --> 00:09:43,340
transparently and proactively that means

181
00:09:43,340 --> 00:09:46,880
that in Asia there's a the pink which is

182
00:09:46,880 --> 00:09:49,190
called Asia policies and I'm gonna show

183
00:09:49,190 --> 00:09:51,530
in the demo some nice examples which

184
00:09:51,530 --> 00:09:54,590
allows you immediately and explicitly to

185
00:09:54,590 --> 00:09:57,670
deny or to monitor like all the

186
00:09:57,670 --> 00:10:00,890
resources which are deployed into the

187
00:10:00,890 --> 00:10:05,450
Asia so for example let's take the

188
00:10:05,450 --> 00:10:09,050
compliance part that working and being

189
00:10:09,050 --> 00:10:11,720
in the European and for for example we

190
00:10:11,720 --> 00:10:14,180
know what the data protection is quite

191
00:10:14,180 --> 00:10:19,040
huge area and it states that the all the

192
00:10:19,040 --> 00:10:21,710
personal data should stay in yields owns

193
00:10:21,710 --> 00:10:24,290
so what you can do you can apply the

194
00:10:24,290 --> 00:10:26,350
policies which literally denies

195
00:10:26,350 --> 00:10:30,680
deployment of the resources outside of

196
00:10:30,680 --> 00:10:33,890
the Europe Union like which allows only

197
00:10:33,890 --> 00:10:36,980
to deploy to the north or the best data

198
00:10:36,980 --> 00:10:41,420
centers of the Asia another thing and

199
00:10:41,420 --> 00:10:44,900
missus like I continuously always say

200
00:10:44,900 --> 00:10:48,620
there is a huge work done when it comes

201
00:10:48,620 --> 00:10:50,570
to the security and the special when it

202
00:10:50,570 --> 00:10:52,940
comes to the Asia and that thing is

203
00:10:52,940 --> 00:10:55,460
called Security Center that's a central

204
00:10:55,460 --> 00:10:59,560
place where you can see status of

205
00:10:59,560 --> 00:11:02,240
security for the each resource deployed

206
00:11:02,240 --> 00:11:06,050
in Asia so even not being the security

207
00:11:06,050 --> 00:11:09,200
expert what you can do you can see

208
00:11:09,200 --> 00:11:12,350
if there are some problems or there are

209
00:11:12,350 --> 00:11:14,870
some resources deployed we have the

210
00:11:14,870 --> 00:11:16,940
potential compliance of the security

211
00:11:16,940 --> 00:11:19,730
risk so that's why to be able to

212
00:11:19,730 --> 00:11:23,180
understand your security posture you

213
00:11:23,180 --> 00:11:24,769
would like to enable that security

214
00:11:24,769 --> 00:11:27,139
center from the day one when you started

215
00:11:27,139 --> 00:11:30,550
to use of the cloud environment and

216
00:11:30,550 --> 00:11:33,050
keeping the ice and see what everything

217
00:11:33,050 --> 00:11:35,779
works and everything is like at least

218
00:11:35,779 --> 00:11:41,180
having proper security level working

219
00:11:41,180 --> 00:11:43,279
with the cloud when usually we start to

220
00:11:43,279 --> 00:11:45,740
explore the cloud resources of course we

221
00:11:45,740 --> 00:11:48,800
do it for the portal by clicking but

222
00:11:48,800 --> 00:11:51,079
this is not the way how we go when it

223
00:11:51,079 --> 00:11:52,370
comes to the production and the

224
00:11:52,370 --> 00:11:56,420
infrastructure is a code is is the way

225
00:11:56,420 --> 00:11:58,459
how we should how the ops guys should

226
00:11:58,459 --> 00:12:00,410
deploy the resources in the cloud

227
00:12:00,410 --> 00:12:04,399
environment because it doesn't give only

228
00:12:04,399 --> 00:12:08,029
the feeling like of the way how to

229
00:12:08,029 --> 00:12:10,060
control the security because if

230
00:12:10,060 --> 00:12:13,579
infrastructure is as a code I can treat

231
00:12:13,579 --> 00:12:15,800
it in the same way as I'm treating that

232
00:12:15,800 --> 00:12:18,350
as an application I can check the same

233
00:12:18,350 --> 00:12:21,110
mistakes or like you know the mistakes

234
00:12:21,110 --> 00:12:24,890
in infrastructure just by looking the

235
00:12:24,890 --> 00:12:27,880
code but there are other reasons like

236
00:12:27,880 --> 00:12:31,910
consistency and time savings imagine

237
00:12:31,910 --> 00:12:34,630
like if you have deleted by accident

238
00:12:34,630 --> 00:12:37,610
some of the resource and creating the

239
00:12:37,610 --> 00:12:40,160
same resource for the portal is going to

240
00:12:40,160 --> 00:12:41,870
take the time if you have the

241
00:12:41,870 --> 00:12:44,089
infrastructure is a code it's gonna roll

242
00:12:44,089 --> 00:12:46,220
up immediately like it the gun is it's

243
00:12:46,220 --> 00:12:49,339
going to take 10-15 minutes and and the

244
00:12:49,339 --> 00:12:53,300
environment is always consistent and the

245
00:12:53,300 --> 00:12:55,399
same code you are using for the

246
00:12:55,399 --> 00:12:57,199
development environment or for the

247
00:12:57,199 --> 00:13:04,250
production yes so the next thing is what

248
00:13:04,250 --> 00:13:07,760
usually I advise is the production only

249
00:13:07,760 --> 00:13:11,449
for the CI CD pipelines so there there

250
00:13:11,449 --> 00:13:13,430
is no strong reason why we should have

251
00:13:13,430 --> 00:13:16,850
the right to access the production

252
00:13:16,850 --> 00:13:18,019
environment like the production

253
00:13:18,019 --> 00:13:21,319
subscription manually and for the portal

254
00:13:21,319 --> 00:13:23,270
all the things should be

255
00:13:23,270 --> 00:13:26,300
for the CR City pipelines so you are

256
00:13:26,300 --> 00:13:28,520
delivering the cold you're delivering

257
00:13:28,520 --> 00:13:30,649
the infrastructure in the consulate way

258
00:13:30,649 --> 00:13:33,050
and you always know what this is like

259
00:13:33,050 --> 00:13:35,660
the consistent and all the security

260
00:13:35,660 --> 00:13:38,720
things are control it and have checked

261
00:13:38,720 --> 00:13:41,810
during CIC D pipeline during the build

262
00:13:41,810 --> 00:13:45,500
and release and this is where it becomes

263
00:13:45,500 --> 00:13:48,500
like the main thing flight because in

264
00:13:48,500 --> 00:13:50,630
the devops world and especially in the

265
00:13:50,630 --> 00:13:52,940
cloud world the CIC the pipeline is a

266
00:13:52,940 --> 00:13:55,820
heart of the security this is where you

267
00:13:55,820 --> 00:13:59,630
can spend more time of focusing what

268
00:13:59,630 --> 00:14:02,000
type of the security actions what type

269
00:14:02,000 --> 00:14:04,310
of the security initiatives should be

270
00:14:04,310 --> 00:14:07,610
deployed to prevent vulnerable code or

271
00:14:07,610 --> 00:14:10,120
even to prevent non-compliant

272
00:14:10,120 --> 00:14:13,760
infrastructure but before jumping into

273
00:14:13,760 --> 00:14:16,850
the developer part let's look more on on

274
00:14:16,850 --> 00:14:19,459
the Finks from the obstacle part another

275
00:14:19,459 --> 00:14:23,360
thing like I mentioned the policies this

276
00:14:23,360 --> 00:14:26,870
is where you can build the what is

277
00:14:26,870 --> 00:14:29,899
called like the Asian garden and so what

278
00:14:29,899 --> 00:14:32,810
you can do when you are deploying the

279
00:14:32,810 --> 00:14:35,329
policies think about them as a bouncer

280
00:14:35,329 --> 00:14:37,459
in front of the door so it doesn't

281
00:14:37,459 --> 00:14:39,920
matter how you're deploying the

282
00:14:39,920 --> 00:14:42,079
resources either through the portal of

283
00:14:42,079 --> 00:14:45,770
roses si si Alli or for the api's all

284
00:14:45,770 --> 00:14:48,980
the requests towards the resources goes

285
00:14:48,980 --> 00:14:51,290
for the policy engine even if you have

286
00:14:51,290 --> 00:14:54,910
not applied any and any certain policy

287
00:14:54,910 --> 00:14:57,980
it's still the policy engine is still

288
00:14:57,980 --> 00:15:00,770
there so it's kind of the filtering if I

289
00:15:00,770 --> 00:15:02,990
have applied for example the policy but

290
00:15:02,990 --> 00:15:05,870
no resource should be deployed with the

291
00:15:05,870 --> 00:15:08,660
or let me lick formally the VM should

292
00:15:08,660 --> 00:15:10,430
not be deployed with the public resource

293
00:15:10,430 --> 00:15:12,980
every of the public IP it doesn't matter

294
00:15:12,980 --> 00:15:15,680
if it if I'm trying to do is for the

295
00:15:15,680 --> 00:15:18,500
portal or for the seal or a CLI it's not

296
00:15:18,500 --> 00:15:20,990
gonna work because all the requests are

297
00:15:20,990 --> 00:15:23,500
always gonna go from the policy engine

298
00:15:23,500 --> 00:15:27,050
another nice thing is what is called a

299
00:15:27,050 --> 00:15:31,160
jerk blueprints so if you follow the

300
00:15:31,160 --> 00:15:34,970
advice of having the project per

301
00:15:34,970 --> 00:15:37,529
subscription and environment person

302
00:15:37,529 --> 00:15:41,579
scription if you end up having like 2030

303
00:15:41,579 --> 00:15:44,790
projects and even more it can become big

304
00:15:44,790 --> 00:15:48,120
pain to prepare every time to create the

305
00:15:48,120 --> 00:15:51,029
subscription with the some consistent

306
00:15:51,029 --> 00:15:54,329
settings like we've the same policies we

307
00:15:54,329 --> 00:15:57,870
have the same deployed resources like

308
00:15:57,870 --> 00:16:00,870
the networking or the workspaces for the

309
00:16:00,870 --> 00:16:03,689
log management and so on this is where

310
00:16:03,689 --> 00:16:06,360
the blueprints can help you because what

311
00:16:06,360 --> 00:16:08,699
we do you've evolved malade in the

312
00:16:08,699 --> 00:16:11,430
blueprints the policy definitions it you

313
00:16:11,430 --> 00:16:14,459
also define in the blueprints who is

314
00:16:14,459 --> 00:16:16,410
always gonna have an access to that

315
00:16:16,410 --> 00:16:20,100
subscription and you also are able to

316
00:16:20,100 --> 00:16:23,160
define what resources should be created

317
00:16:23,160 --> 00:16:25,199
when I'm creating the subscription and

318
00:16:25,199 --> 00:16:28,199
then you're just applying that blueprint

319
00:16:28,199 --> 00:16:32,449
on the particular management group and

320
00:16:32,449 --> 00:16:35,579
the management groups are the logical

321
00:16:35,579 --> 00:16:42,509
boxes which helps you to help like to

322
00:16:42,509 --> 00:16:46,019
grow your subscriptions according some

323
00:16:46,019 --> 00:16:48,660
pattern like in this case we can see I

324
00:16:48,660 --> 00:16:51,959
have groped my different subscriptions

325
00:16:51,959 --> 00:16:54,329
based on the production or pre

326
00:16:54,329 --> 00:16:56,250
production environment which means that

327
00:16:56,250 --> 00:16:58,800
I can apply different set of the

328
00:16:58,800 --> 00:17:00,600
policies and different set of the rules

329
00:17:00,600 --> 00:17:03,990
on each of that group and they will be

330
00:17:03,990 --> 00:17:08,849
always strictly follow it and if you

331
00:17:08,849 --> 00:17:11,069
have applied this as a blueprint that

332
00:17:11,069 --> 00:17:12,359
means if I will trade the new

333
00:17:12,359 --> 00:17:14,459
subscription and will place it inside of

334
00:17:14,459 --> 00:17:17,520
that logical box all the blueprint

335
00:17:17,520 --> 00:17:20,189
things will be applied immediately and

336
00:17:20,189 --> 00:17:22,530
the resources will be created the

337
00:17:22,530 --> 00:17:25,380
policies applied and properly users will

338
00:17:25,380 --> 00:17:28,199
be added so this is what you can do

339
00:17:28,199 --> 00:17:30,870
being is like on infrastructure side

340
00:17:30,870 --> 00:17:34,520
being as an ops die immediately just to

341
00:17:34,520 --> 00:17:40,289
be sure that developers gonna deploy and

342
00:17:40,289 --> 00:17:44,460
use the resources in more safe and

343
00:17:44,460 --> 00:17:46,679
compliant way in the compliant in terms

344
00:17:46,679 --> 00:17:49,280
of your organization or York like you no

345
00:17:49,280 --> 00:17:51,090
need

346
00:17:51,090 --> 00:17:54,659
and it's gonna help you to protect and

347
00:17:54,659 --> 00:17:56,669
give more freedom for the developers to

348
00:17:56,669 --> 00:17:59,519
do wave work literally the develop and

349
00:17:59,519 --> 00:18:02,129
the continued continuously delivered the

350
00:18:02,129 --> 00:18:04,529
new version of their application so that

351
00:18:04,529 --> 00:18:06,720
means that the developer needs start to

352
00:18:06,720 --> 00:18:09,980
focus on the application security and

353
00:18:09,980 --> 00:18:13,740
let's see what we can do is being as a

354
00:18:13,740 --> 00:18:17,639
developers this is simplified the

355
00:18:17,639 --> 00:18:20,429
lifecycle I would say or the way how we

356
00:18:20,429 --> 00:18:23,850
deliver solution I can say that this is

357
00:18:23,850 --> 00:18:28,289
more idolised maybe you can not deliver

358
00:18:28,289 --> 00:18:32,070
me but that's a most common pattern so

359
00:18:32,070 --> 00:18:35,039
how we deliver the solution usually we

360
00:18:35,039 --> 00:18:38,279
develop the solution then we commit that

361
00:18:38,279 --> 00:18:43,279
to the repo that which triggers our

362
00:18:43,279 --> 00:18:46,320
build pipeline so this is where we work

363
00:18:46,320 --> 00:18:49,080
with the continuous integration and if

364
00:18:49,080 --> 00:18:52,019
the build runs successfully if all the

365
00:18:52,019 --> 00:18:56,450
unit tests are done we push that to them

366
00:18:56,450 --> 00:18:59,460
one of our environments so the first

367
00:18:59,460 --> 00:19:01,409
step could be like the production and

368
00:19:01,409 --> 00:19:05,879
then there sorry not don't push to the

369
00:19:05,879 --> 00:19:08,249
production immediately I mean like the

370
00:19:08,249 --> 00:19:10,590
first is always the dev dev environment

371
00:19:10,590 --> 00:19:12,360
and when we push the dev environment

372
00:19:12,360 --> 00:19:16,350
here we test everything goes as is it

373
00:19:16,350 --> 00:19:16,769
planned

374
00:19:16,769 --> 00:19:18,869
the futures works we go to the

375
00:19:18,869 --> 00:19:22,409
production we operate we go to the

376
00:19:22,409 --> 00:19:26,159
operational mode so this is like

377
00:19:26,159 --> 00:19:28,350
simplified way of application lifecycle

378
00:19:28,350 --> 00:19:31,619
management and actually what we can do

379
00:19:31,619 --> 00:19:35,249
we can deliver or inject the security on

380
00:19:35,249 --> 00:19:39,539
each of step of that development let's

381
00:19:39,539 --> 00:19:42,409
see on the some of the practices and

382
00:19:42,409 --> 00:19:46,490
let's get back to the pre commit or on

383
00:19:46,490 --> 00:19:50,460
step when we are just developing

384
00:19:50,460 --> 00:19:54,119
solution there are plenty of the things

385
00:19:54,119 --> 00:19:56,490
what you can do when it comes to the

386
00:19:56,490 --> 00:19:58,830
security you can start with the threat

387
00:19:58,830 --> 00:20:03,809
modeling so the flight model income is I

388
00:20:03,809 --> 00:20:04,920
like to say

389
00:20:04,920 --> 00:20:07,230
it or I like to describe it in really

390
00:20:07,230 --> 00:20:10,260
simplified way especially for the teams

391
00:20:10,260 --> 00:20:13,590
who never done the fret modeling or the

392
00:20:13,590 --> 00:20:15,090
teams can never work with the security

393
00:20:15,090 --> 00:20:20,610
on that what you do or when you get the

394
00:20:20,610 --> 00:20:23,100
list of your planned features what

395
00:20:23,100 --> 00:20:25,470
you're gonna develop you just grope the

396
00:20:25,470 --> 00:20:28,290
to your team sit down and make the

397
00:20:28,290 --> 00:20:31,440
whiteboard session like and try to think

398
00:20:31,440 --> 00:20:34,320
about ethic vectors like okay if I'm in

399
00:20:34,320 --> 00:20:38,700
the attacker how would I try to abuse

400
00:20:38,700 --> 00:20:41,520
that new particular feature and you

401
00:20:41,520 --> 00:20:43,980
write down these potential attack

402
00:20:43,980 --> 00:20:47,070
vectors and you start to write

403
00:20:47,070 --> 00:20:49,340
immediately down what type of the

404
00:20:49,340 --> 00:20:51,770
protection steps you would like to make

405
00:20:51,770 --> 00:20:54,990
to be able to protect or like you know

406
00:20:54,990 --> 00:20:57,720
to avoid that fret and this is what is

407
00:20:57,720 --> 00:21:00,000
called like in regular simplified terms

408
00:21:00,000 --> 00:21:02,400
this is what is flat modeling of course

409
00:21:02,400 --> 00:21:04,710
there are plenty of threat modeling

410
00:21:04,710 --> 00:21:08,330
frameworks available on the market

411
00:21:08,330 --> 00:21:11,700
open-source solutions commercials but I

412
00:21:11,700 --> 00:21:13,800
never suggest to start with the two I

413
00:21:13,800 --> 00:21:15,720
always suggest to start with some

414
00:21:15,720 --> 00:21:18,630
cultural thing of just getting at least

415
00:21:18,630 --> 00:21:21,990
some basic habit to implement the threat

416
00:21:21,990 --> 00:21:25,710
modeling next step when you start to

417
00:21:25,710 --> 00:21:28,710
develop the code is good to have some

418
00:21:28,710 --> 00:21:31,170
either a security plugins which follows

419
00:21:31,170 --> 00:21:34,290
your code and checks if something what

420
00:21:34,290 --> 00:21:36,990
your type int lock is potentially having

421
00:21:36,990 --> 00:21:40,170
security issues like maybe you are

422
00:21:40,170 --> 00:21:44,300
immediately hard-coding in the code some

423
00:21:44,300 --> 00:21:47,100
credentials or you're writing the

424
00:21:47,100 --> 00:21:48,570
function which is going to have the

425
00:21:48,570 --> 00:21:51,300
sequel injection and so such things and

426
00:21:51,300 --> 00:21:55,260
it gonna warn you in EDM immediately so

427
00:21:55,260 --> 00:21:57,990
you could just look on that and fix

428
00:21:57,990 --> 00:22:00,840
while you're typing the code another

429
00:22:00,840 --> 00:22:03,720
thing is like okay now we are ready like

430
00:22:03,720 --> 00:22:06,450
you know to go to the and push our code

431
00:22:06,450 --> 00:22:10,410
to the repository you can make the

432
00:22:10,410 --> 00:22:12,210
pre-commit hook especially like when it

433
00:22:12,210 --> 00:22:14,640
comes to the github so before your code

434
00:22:14,640 --> 00:22:18,330
gets checked in its get checked

435
00:22:18,330 --> 00:22:21,239
for example for your coding standards

436
00:22:21,239 --> 00:22:24,570
which may include some security coding

437
00:22:24,570 --> 00:22:27,209
standards - or it also can check that

438
00:22:27,209 --> 00:22:29,129
you are not trying to push the

439
00:22:29,129 --> 00:22:32,609
credentials inside the code towards the

440
00:22:32,609 --> 00:22:37,379
repository another practice actually

441
00:22:37,379 --> 00:22:39,570
these last two practices are more

442
00:22:39,570 --> 00:22:42,059
focusing on on the human side on our

443
00:22:42,059 --> 00:22:45,450
habits so the good teams usually are

444
00:22:45,450 --> 00:22:48,179
having the coding standards the very

445
00:22:48,179 --> 00:22:51,299
hallway code they are we have their

446
00:22:51,299 --> 00:22:55,200
agreements how they should formulate the

447
00:22:55,200 --> 00:22:57,809
functions how I should nail what these

448
00:22:57,809 --> 00:23:00,149
naming conventions and so on so what you

449
00:23:00,149 --> 00:23:02,339
can do you can help if you're like the

450
00:23:02,339 --> 00:23:04,950
security person or in the security in

451
00:23:04,950 --> 00:23:07,619
the development team you can just inject

452
00:23:07,619 --> 00:23:11,249
some also security lines like by stating

453
00:23:11,249 --> 00:23:13,649
what is okay and what is not a case of

454
00:23:13,649 --> 00:23:16,669
having the code and the peer review is

455
00:23:16,669 --> 00:23:23,700
really strong and good habit yeah it is

456
00:23:23,700 --> 00:23:26,190
it is like not like it's I would say

457
00:23:26,190 --> 00:23:27,419
it's mandatory even on the big

458
00:23:27,419 --> 00:23:31,320
organizations like Netflix Amazon

459
00:23:31,320 --> 00:23:35,639
Microsoft Etsy all of those companies we

460
00:23:35,639 --> 00:23:38,129
do the peer reviews and special now when

461
00:23:38,129 --> 00:23:39,809
you can just apply with the pull request

462
00:23:39,809 --> 00:23:43,440
you can explicitly state but someone

463
00:23:43,440 --> 00:23:45,239
needs to look on the code because

464
00:23:45,239 --> 00:23:48,539
sometimes it's easier to catch someone's

465
00:23:48,539 --> 00:23:51,269
else mistake or miss miss configuration

466
00:23:51,269 --> 00:23:54,209
or some miss a small mistake in the code

467
00:23:54,209 --> 00:23:57,450
when our eyes gets blurry when we watch

468
00:23:57,450 --> 00:24:00,269
our own code so this is like really good

469
00:24:00,269 --> 00:24:04,649
practice and then when we have committed

470
00:24:04,649 --> 00:24:07,469
the code and the code is in the repo and

471
00:24:07,469 --> 00:24:09,269
the build is happening you can apply

472
00:24:09,269 --> 00:24:11,759
some automation stuff so the good

473
00:24:11,759 --> 00:24:14,009
practice as we know when we are starting

474
00:24:14,009 --> 00:24:16,200
when we are running after the quality

475
00:24:16,200 --> 00:24:19,079
which is huge part of the DevOps we

476
00:24:19,079 --> 00:24:22,109
provide the unit tests so we should also

477
00:24:22,109 --> 00:24:24,359
think about the security unit tests in

478
00:24:24,359 --> 00:24:26,759
the same way as we write the classical

479
00:24:26,759 --> 00:24:31,049
unit tests why not to have the security

480
00:24:31,049 --> 00:24:32,039
you

481
00:24:32,039 --> 00:24:34,200
of stories and why not later to

482
00:24:34,200 --> 00:24:37,409
transform em in all of the tests what we

483
00:24:37,409 --> 00:24:44,249
do is a classical test so then what you

484
00:24:44,249 --> 00:24:47,820
can do is to have static code analysis

485
00:24:47,820 --> 00:24:51,769
tool which can follow and check your

486
00:24:51,769 --> 00:24:55,169
code in the repository and see if there

487
00:24:55,169 --> 00:24:57,509
are still some security vulnerabilities

488
00:24:57,509 --> 00:25:01,350
our potential security flows from my

489
00:25:01,350 --> 00:25:03,389
experience I can say that implementing

490
00:25:03,389 --> 00:25:06,119
this is a static code analysis tool is

491
00:25:06,119 --> 00:25:09,960
like installing and getting the finger

492
00:25:09,960 --> 00:25:13,349
running takes maybe the few weeks but

493
00:25:13,349 --> 00:25:15,659
getting the habit for the developers to

494
00:25:15,659 --> 00:25:18,869
use it it takes bit more because it's it

495
00:25:18,869 --> 00:25:22,440
again it's a it's a human factor so you

496
00:25:22,440 --> 00:25:24,899
know usually when I'm working I'm

497
00:25:24,899 --> 00:25:27,239
spending much time people the developers

498
00:25:27,239 --> 00:25:31,799
getting that habit to use and not to

499
00:25:31,799 --> 00:25:33,570
ignore the new parts from their static

500
00:25:33,570 --> 00:25:36,769
code analysis tools the last but not

501
00:25:36,769 --> 00:25:40,679
they are not like less important is a

502
00:25:40,679 --> 00:25:43,229
dependency management in today's world

503
00:25:43,229 --> 00:25:46,049
when we developed we developed a lot the

504
00:25:46,049 --> 00:25:48,629
things by using first party libraries

505
00:25:48,629 --> 00:25:50,519
and especially when it comes to the open

506
00:25:50,519 --> 00:25:52,919
source libraries and usually when I

507
00:25:52,919 --> 00:25:54,690
start to work with the development teams

508
00:25:54,690 --> 00:25:57,379
I'm asking them do you have some

509
00:25:57,379 --> 00:26:00,479
lifecycle for your libraries for your

510
00:26:00,479 --> 00:26:02,759
packages how do you do the updates how

511
00:26:02,759 --> 00:26:04,889
you're sure with that library what you

512
00:26:04,889 --> 00:26:07,649
have included is still used in your code

513
00:26:07,649 --> 00:26:10,320
and is needed because you rely on the

514
00:26:10,320 --> 00:26:13,979
own security for the code which is

515
00:26:13,979 --> 00:26:16,889
written by the third party but by the

516
00:26:16,889 --> 00:26:20,039
open community you you don't know how

517
00:26:20,039 --> 00:26:24,029
secure it is so if I would choose one

518
00:26:24,029 --> 00:26:25,979
practice from all of these free I would

519
00:26:25,979 --> 00:26:27,809
start definitely bigger the dependency

520
00:26:27,809 --> 00:26:30,629
management and by integrating in the

521
00:26:30,629 --> 00:26:33,059
pipeline the practice is to check also

522
00:26:33,059 --> 00:26:36,239
the first party libraries and of course

523
00:26:36,239 --> 00:26:39,119
when we deliver the solution to the at

524
00:26:39,119 --> 00:26:41,580
least dev stage what we can do we can

525
00:26:41,580 --> 00:26:43,830
focus on the infrastructure as a code so

526
00:26:43,830 --> 00:26:45,920
we can send our

527
00:26:45,920 --> 00:26:48,650
structure is now as a code we can apply

528
00:26:48,650 --> 00:26:50,810
the same patterns what we apply for the

529
00:26:50,810 --> 00:26:55,040
code by the tools so who are able to

530
00:26:55,040 --> 00:26:57,320
check infrastructure the code syntax and

531
00:26:57,320 --> 00:26:59,510
predict and see potential miss

532
00:26:59,510 --> 00:27:02,120
configurations of the infrastructure we

533
00:27:02,120 --> 00:27:04,160
can apply different security scanning

534
00:27:04,160 --> 00:27:07,210
tools and especially in today's world

535
00:27:07,210 --> 00:27:10,880
when we are using for example containers

536
00:27:10,880 --> 00:27:14,390
and them and the docker and all of that

537
00:27:14,390 --> 00:27:16,670
stuff stuff kubernetes became so popular

538
00:27:16,670 --> 00:27:18,500
what you can do you can apply the

539
00:27:18,500 --> 00:27:21,290
security scanning towards the container

540
00:27:21,290 --> 00:27:23,750
represent arrays you can check the cloud

541
00:27:23,750 --> 00:27:26,410
configuration and there are of course

542
00:27:26,410 --> 00:27:29,480
bigger all place the security acceptance

543
00:27:29,480 --> 00:27:31,430
testing in the same way as we do with

544
00:27:31,430 --> 00:27:33,470
the classical acceptance test think we

545
00:27:33,470 --> 00:27:36,760
need to focus on the security side of

546
00:27:36,760 --> 00:27:39,280
the solution too

547
00:27:39,280 --> 00:27:42,500
and when we are in the production we

548
00:27:42,500 --> 00:27:44,360
still can repeat some of the things what

549
00:27:44,360 --> 00:27:47,600
we have looked during the DEF and during

550
00:27:47,600 --> 00:27:49,610
the release because like I mentioned

551
00:27:49,610 --> 00:27:52,340
even there is a good practice not to

552
00:27:52,340 --> 00:27:54,740
give the access to the production but go

553
00:27:54,740 --> 00:27:57,650
for the pipeline there are still human

554
00:27:57,650 --> 00:28:00,050
mistakes happens or there is like you

555
00:28:00,050 --> 00:28:02,300
know critical bug and we tend to fix

556
00:28:02,300 --> 00:28:05,510
based on the production directly so it's

557
00:28:05,510 --> 00:28:07,730
worth to recheck the configuration again

558
00:28:07,730 --> 00:28:11,210
and still even if you speak about the

559
00:28:11,210 --> 00:28:13,130
devops world even if we speak about the

560
00:28:13,130 --> 00:28:14,510
continuous integration continuous

561
00:28:14,510 --> 00:28:18,680
delivery when we push release like quite

562
00:28:18,680 --> 00:28:23,120
often very well should be decision made

563
00:28:23,120 --> 00:28:24,680
when you would like to have the

564
00:28:24,680 --> 00:28:27,020
penetration testing because it is really

565
00:28:27,020 --> 00:28:28,850
important part sometimes if you are

566
00:28:28,850 --> 00:28:33,650
delivering Craiglist sensitive or the

567
00:28:33,650 --> 00:28:36,290
the new product maybe it's worth to stop

568
00:28:36,290 --> 00:28:37,970
for the two weeks and have the proper

569
00:28:37,970 --> 00:28:40,550
penetration testing to be sure but you

570
00:28:40,550 --> 00:28:42,080
have not missed anything while

571
00:28:42,080 --> 00:28:45,230
implementing all other practices in your

572
00:28:45,230 --> 00:28:48,980
pipeline in your development and of

573
00:28:48,980 --> 00:28:52,030
course when comes to the operations the

574
00:28:52,030 --> 00:28:55,850
critical part is monitoring and this is

575
00:28:55,850 --> 00:28:58,340
what I like in the DevOps DevOps is all

576
00:28:58,340 --> 00:28:59,559
about

577
00:28:59,559 --> 00:29:01,629
monitoring collecting telemetry and

578
00:29:01,629 --> 00:29:03,820
getting the feedback and learning and

579
00:29:03,820 --> 00:29:07,269
seeing how application behaves how it's

580
00:29:07,269 --> 00:29:09,970
used by collecting creased data we also

581
00:29:09,970 --> 00:29:13,480
can see if that application is overused

582
00:29:13,480 --> 00:29:16,950
misused or use nothing the proper way so

583
00:29:16,950 --> 00:29:20,350
I would say like if you don't have the

584
00:29:20,350 --> 00:29:22,480
monitoring or the monitoring is our

585
00:29:22,480 --> 00:29:24,999
customers that's not a monitoring then

586
00:29:24,999 --> 00:29:26,379
you can't say that you have done

587
00:29:26,379 --> 00:29:28,860
everything when it comes to the security

588
00:29:28,860 --> 00:29:31,600
another like last thing what I always

589
00:29:31,600 --> 00:29:35,950
try to to speak is is about the

590
00:29:35,950 --> 00:29:38,740
blameless post-mortems because it is

591
00:29:38,740 --> 00:29:42,009
really important to grow up the culture

592
00:29:42,009 --> 00:29:44,980
in the team of no fear of speaking and

593
00:29:44,980 --> 00:29:48,850
no prayer from old mistakes agile and

594
00:29:48,850 --> 00:29:51,820
the DevOps we always hear about fail

595
00:29:51,820 --> 00:29:54,759
fast learn fast approach and I believe

596
00:29:54,759 --> 00:29:56,529
at some point it should be also applied

597
00:29:56,529 --> 00:29:59,049
on the security it doesn't mean what we

598
00:29:59,049 --> 00:30:01,480
need like you know intentionally failing

599
00:30:01,480 --> 00:30:06,039
the security but we tend to have the

600
00:30:06,039 --> 00:30:07,840
mistakes and it's not possible to build

601
00:30:07,840 --> 00:30:11,740
the security like and on 100% nobody can

602
00:30:11,740 --> 00:30:12,129
do this

603
00:30:12,129 --> 00:30:15,100
but that's the most important is if you

604
00:30:15,100 --> 00:30:18,809
got the security incident is to learn

605
00:30:18,809 --> 00:30:22,450
what was the root cause how to fix how

606
00:30:22,450 --> 00:30:24,580
you react it because this is a really

607
00:30:24,580 --> 00:30:27,009
good lesson and it helps you to prepare

608
00:30:27,009 --> 00:30:30,610
and be prepared for such cases if we're

609
00:30:30,610 --> 00:30:33,909
going to happen in the in the future ok

610
00:30:33,909 --> 00:30:37,509
as you can see I focuses a lot like and

611
00:30:37,509 --> 00:30:42,299
I spoke about different practices but

612
00:30:42,299 --> 00:30:45,940
teams resources is limited in our like

613
00:30:45,940 --> 00:30:47,679
you know talk is also limited I would

614
00:30:47,679 --> 00:30:49,840
like to focus on some of the things what

615
00:30:49,840 --> 00:30:52,899
you can do immediately after the talk we

616
00:30:52,899 --> 00:30:56,559
we bought huge pain in your team even

617
00:30:56,559 --> 00:30:58,899
not having the secure security on the

618
00:30:58,899 --> 00:31:04,590
board so there are few things we since

619
00:31:04,590 --> 00:31:08,889
particular example where I'm using like

620
00:31:08,889 --> 00:31:12,190
the Asia and I'm using the age of DevOps

621
00:31:12,190 --> 00:31:13,480
which used to be known

622
00:31:13,480 --> 00:31:18,040
VSDs or TFS on the premises and I'm

623
00:31:18,040 --> 00:31:19,929
having like the development so as you

624
00:31:19,929 --> 00:31:22,809
can see I have dropped the subscriptions

625
00:31:22,809 --> 00:31:24,490
I do have the development subscription

626
00:31:24,490 --> 00:31:25,660
and I do have the key a stage

627
00:31:25,660 --> 00:31:27,220
subscription and the production

628
00:31:27,220 --> 00:31:29,590
subscription I have applied Asia

629
00:31:29,590 --> 00:31:32,650
policies and the management go so I I

630
00:31:32,650 --> 00:31:34,299
have the some confidence level

631
00:31:34,299 --> 00:31:36,940
confidence level but my policies at

632
00:31:36,940 --> 00:31:39,070
least are following on the subscription

633
00:31:39,070 --> 00:31:42,790
and we Google our development lifecycle

634
00:31:42,790 --> 00:31:46,000
is something like this so you develop

635
00:31:46,000 --> 00:31:48,580
the code you create the separate branch

636
00:31:48,580 --> 00:31:51,460
like the develop branch you push your

637
00:31:51,460 --> 00:31:53,530
code to the develop branch which string

638
00:31:53,530 --> 00:31:56,650
your CI seeding pipeline and if

639
00:31:56,650 --> 00:31:58,840
everything is fine it goes to the

640
00:31:58,840 --> 00:32:01,600
development subscription and if we are

641
00:32:01,600 --> 00:32:04,480
happy and we see with the functionality

642
00:32:04,480 --> 00:32:07,059
over the future what we have delivered

643
00:32:07,059 --> 00:32:11,020
it works we take and merge it to the

644
00:32:11,020 --> 00:32:13,720
master branch which again triggers the

645
00:32:13,720 --> 00:32:16,960
same CCD pipeline but it goes in this

646
00:32:16,960 --> 00:32:19,480
case to different environments like the

647
00:32:19,480 --> 00:32:22,440
QA storage yes the stage subscription

648
00:32:22,440 --> 00:32:26,049
where the business or like the users can

649
00:32:26,049 --> 00:32:28,030
test it it depends what the release

650
00:32:28,030 --> 00:32:31,000
management flow you have and then if

651
00:32:31,000 --> 00:32:32,950
everything fine we go to the production

652
00:32:32,950 --> 00:32:35,590
and so this is one of like you know the

653
00:32:35,590 --> 00:32:37,900
common ways could be delivered the

654
00:32:37,900 --> 00:32:40,030
software and this is like which is bash

655
00:32:40,030 --> 00:32:43,900
all know people sum of two examples so

656
00:32:43,900 --> 00:32:46,120
what you can do you already can apply

657
00:32:46,120 --> 00:32:48,160
some of the tools and I gave the

658
00:32:48,160 --> 00:32:51,190
examples so when when it comes to the

659
00:32:51,190 --> 00:32:55,780
Visual Studio code or any editor either

660
00:32:55,780 --> 00:32:57,820
unless you're thinking I'm using note

661
00:32:57,820 --> 00:32:59,950
but you have a lot of the choices when

662
00:32:59,950 --> 00:33:02,559
it comes to the extensions what you can

663
00:33:02,559 --> 00:33:05,770
install which can help you to check the

664
00:33:05,770 --> 00:33:07,919
security while you're developing and

665
00:33:07,919 --> 00:33:10,900
then there are other things what you can

666
00:33:10,900 --> 00:33:14,559
apply in CI CD pipeline and you can

667
00:33:14,559 --> 00:33:17,950
implement this in in this case in Asia

668
00:33:17,950 --> 00:33:19,210
tariffs pipelines

669
00:33:19,210 --> 00:33:23,140
and V which is like the set of the

670
00:33:23,140 --> 00:33:25,900
toolkits what you can apply on the

671
00:33:25,900 --> 00:33:27,100
subscription level

672
00:33:27,100 --> 00:33:29,110
and some of them actually the most of em

673
00:33:29,110 --> 00:33:32,880
comes with with no cost for do so so and

674
00:33:32,880 --> 00:33:34,960
there are plenty good of the

675
00:33:34,960 --> 00:33:38,559
documentation which helps a lot to

676
00:33:38,559 --> 00:33:41,409
implement even you're not the security

677
00:33:41,409 --> 00:33:44,500
expert or that not your subject matter

678
00:33:44,500 --> 00:33:48,610
expertise okay I think it's enough for

679
00:33:48,610 --> 00:33:52,450
the talking in theory let me show you

680
00:33:52,450 --> 00:34:00,070
some example and see okay I think I hope

681
00:34:00,070 --> 00:34:02,769
you can you're able to see my screen so

682
00:34:02,769 --> 00:34:06,399
this is the a chakra DevOps and I have

683
00:34:06,399 --> 00:34:11,109
created some build pipeline what I'm

684
00:34:11,109 --> 00:34:14,319
doing I'm deploying the solution which

685
00:34:14,319 --> 00:34:17,980
is called like web gold by the way if

686
00:34:17,980 --> 00:34:21,668
you're interested in the learning about

687
00:34:21,668 --> 00:34:24,399
the web vulnerabilities at the bat gold

688
00:34:24,399 --> 00:34:27,429
is the most vulnerable solution so this

689
00:34:27,429 --> 00:34:30,760
is developed by the elvis community to

690
00:34:30,760 --> 00:34:35,349
learn how to find and how to protect

691
00:34:35,349 --> 00:34:40,409
from the auto stop 10 security flaws and

692
00:34:40,409 --> 00:34:43,000
while i did i have deployed the back

693
00:34:43,000 --> 00:34:47,980
code as a container in my ACI so eager

694
00:34:47,980 --> 00:34:51,250
container instances and i'm storing the

695
00:34:51,250 --> 00:35:04,290
correct yes sorry just so meta mean yeah

696
00:35:12,240 --> 00:35:20,530
how does it work yeah so i have deployed

697
00:35:20,530 --> 00:35:23,470
this application with the intention

698
00:35:23,470 --> 00:35:25,270
because i need to find some security

699
00:35:25,270 --> 00:35:28,210
vulnerabilities and it is hosted like i

700
00:35:28,210 --> 00:35:32,170
mentioned in container instances and the

701
00:35:32,170 --> 00:35:35,609
container itself is stored in a

702
00:35:35,609 --> 00:35:39,250
container registry and i'm delivering

703
00:35:39,250 --> 00:35:41,020
that solution that

704
00:35:41,020 --> 00:35:45,160
also I'm delivering that solution to the

705
00:35:45,160 --> 00:35:47,380
pipeline and as you can see I have

706
00:35:47,380 --> 00:35:51,880
applied the different security tools

707
00:35:51,880 --> 00:35:57,670
already ear in my pipeline so on the

708
00:35:57,670 --> 00:36:00,580
build pipeline I have separated several

709
00:36:00,580 --> 00:36:03,730
stages the first stage I would like

710
00:36:03,730 --> 00:36:06,990
immediately when the code gets to the

711
00:36:06,990 --> 00:36:10,570
repository and the build pipeline is

712
00:36:10,570 --> 00:36:12,640
triggered I would like to check for the

713
00:36:12,640 --> 00:36:15,369
credentials I don't want to see the

714
00:36:15,369 --> 00:36:18,520
credentials in the inner code so what

715
00:36:18,520 --> 00:36:20,650
I'm doing I'm running the credential

716
00:36:20,650 --> 00:36:27,900
scanner extension which is me move so

717
00:36:27,900 --> 00:36:32,740
right scan so this is like the free

718
00:36:32,740 --> 00:36:34,990
extension what you can get on the

719
00:36:34,990 --> 00:36:39,580
marketplace poor not this one let's take

720
00:36:39,580 --> 00:36:42,940
this one what you can get from the suite

721
00:36:42,940 --> 00:36:44,560
which is called Microsoft security code

722
00:36:44,560 --> 00:36:48,430
analysis that suite contains at least

723
00:36:48,430 --> 00:36:51,609
yes six tools for the different things

724
00:36:51,609 --> 00:36:54,010
like the credential scanner Bane scheme

725
00:36:54,010 --> 00:36:57,700
des Ling Rosalind analyzer which helps

726
00:36:57,700 --> 00:37:00,640
you to check the security while you're

727
00:37:00,640 --> 00:37:02,470
like building the code and you're

728
00:37:02,470 --> 00:37:06,160
working with the code and that extension

729
00:37:06,160 --> 00:37:08,140
is in the private preview but if you're

730
00:37:08,140 --> 00:37:10,180
using the alias your dev ops you can

731
00:37:10,180 --> 00:37:13,300
just sign up and get it for free and we

732
00:37:13,300 --> 00:37:15,880
what we did we we share the tools what

733
00:37:15,880 --> 00:37:18,070
we are using when we are building our

734
00:37:18,070 --> 00:37:22,420
product so what I'm doing I'm running

735
00:37:22,420 --> 00:37:25,869
the credential scanner and since let's

736
00:37:25,869 --> 00:37:28,599
pretend I I have no idea how to

737
00:37:28,599 --> 00:37:30,550
configure I'm good to go with the

738
00:37:30,550 --> 00:37:32,800
defaults the only thing what I need to

739
00:37:32,800 --> 00:37:35,410
do is to give the scanning folder which

740
00:37:35,410 --> 00:37:38,140
particularly I would like to scan for

741
00:37:38,140 --> 00:37:40,210
the potential credential so in this case

742
00:37:40,210 --> 00:37:43,210
I'm giving the source of the resources

743
00:37:43,210 --> 00:37:46,380
directory so that the main repository

744
00:37:46,380 --> 00:37:50,200
which is located here if you look the

745
00:37:50,200 --> 00:37:54,670
code itself now let's see so

746
00:37:54,670 --> 00:37:57,339
I'm giving that Java code for the

747
00:37:57,339 --> 00:38:00,930
scanning or although all these files

748
00:38:00,930 --> 00:38:04,089
then the next step what I'm doing like

749
00:38:04,089 --> 00:38:07,029
of course I would like while I'm

750
00:38:07,029 --> 00:38:08,829
building the code I would like to check

751
00:38:08,829 --> 00:38:11,980
the third-party libraries and you can do

752
00:38:11,980 --> 00:38:13,750
receive the different extensions from

753
00:38:13,750 --> 00:38:17,019
different companies like snack white

754
00:38:17,019 --> 00:38:21,700
source sonarqube and in this particular

755
00:38:21,700 --> 00:38:25,529
case I just grabbed the free extension

756
00:38:25,529 --> 00:38:29,470
which is available on the market which

757
00:38:29,470 --> 00:38:34,269
scans the libraries and open-source

758
00:38:34,269 --> 00:38:37,000
libraries what I'm trying to speak and

759
00:38:37,000 --> 00:38:40,690
the skin and zoom at the same time it

760
00:38:40,690 --> 00:38:44,019
scans for the libraries for the security

761
00:38:44,019 --> 00:38:48,970
and for the licensing part okay so see

762
00:38:48,970 --> 00:38:51,700
you sound good to know good to go but

763
00:38:51,700 --> 00:38:53,559
now I remember what I'm dealing with the

764
00:38:53,559 --> 00:38:55,990
containers which means that potentially

765
00:38:55,990 --> 00:39:00,130
maybe something could be developed or

766
00:39:00,130 --> 00:39:03,029
the container could be developed

767
00:39:03,029 --> 00:39:06,009
configured in the way but I don't feel

768
00:39:06,009 --> 00:39:09,640
being acceptable so what I can do I can

769
00:39:09,640 --> 00:39:13,509
actually when I'm placing my container

770
00:39:13,509 --> 00:39:17,279
while on the build stage I can check the

771
00:39:17,279 --> 00:39:21,039
container repository for and check that

772
00:39:21,039 --> 00:39:22,390
particular container for the

773
00:39:22,390 --> 00:39:24,670
vulnerabilities or even more for the

774
00:39:24,670 --> 00:39:28,000
sample my security policies like for

775
00:39:28,000 --> 00:39:30,819
example I don't want to have the

776
00:39:30,819 --> 00:39:34,000
container which is going to have SSH

777
00:39:34,000 --> 00:39:38,470
port or the Lebanese or or them I would

778
00:39:38,470 --> 00:39:41,980
say the tools installed in the container

779
00:39:41,980 --> 00:39:46,299
for wet I'm I'm using the Paint Pot is

780
00:39:46,299 --> 00:39:50,589
called anchor particularly I'm focusing

781
00:39:50,589 --> 00:39:53,890
on the open source solution so what I'm

782
00:39:53,890 --> 00:39:58,329
doing I have implemented that anchor and

783
00:39:58,329 --> 00:40:00,730
I'm running that in a case in my

784
00:40:00,730 --> 00:40:02,980
separate subscription which is dedicated

785
00:40:02,980 --> 00:40:06,549
only for the security where I'm

786
00:40:06,549 --> 00:40:08,320
maintaining all the different security

787
00:40:08,320 --> 00:40:11,110
pickles and giving the access to the

788
00:40:11,110 --> 00:40:16,050
anchor to run to and check my container

789
00:40:16,050 --> 00:40:19,870
towards security vulnerabilities and

790
00:40:19,870 --> 00:40:21,850
additionally for the some policy

791
00:40:21,850 --> 00:40:24,280
violations like like I mentioned that I

792
00:40:24,280 --> 00:40:27,690
don't want to have the particular

793
00:40:27,690 --> 00:40:31,420
services running on my container so I

794
00:40:31,420 --> 00:40:36,010
edit the steps as you can see the steps

795
00:40:36,010 --> 00:40:39,730
is basically the best task which runs

796
00:40:39,730 --> 00:40:42,820
and the scans image from my repository

797
00:40:42,820 --> 00:40:48,700
and creates the report create the report

798
00:40:48,700 --> 00:40:50,440
we've the vulnerabilities in the JSON

799
00:40:50,440 --> 00:40:53,380
format so these are the steps what I can

800
00:40:53,380 --> 00:40:56,800
do immediately on while being on the

801
00:40:56,800 --> 00:40:58,660
build pipeline and if you're gonna look

802
00:40:58,660 --> 00:41:02,200
on the some of the results let's see for

803
00:41:02,200 --> 00:41:04,570
example for the credential scanning when

804
00:41:04,570 --> 00:41:09,060
you have run credential scanning you

805
00:41:09,060 --> 00:41:12,820
immediately can check the and see if

806
00:41:12,820 --> 00:41:15,100
there are some matches and as you can

807
00:41:15,100 --> 00:41:17,320
see I have identified that some of the

808
00:41:17,320 --> 00:41:20,890
files are contained or containing the

809
00:41:20,890 --> 00:41:26,380
plain text it passwords or connection

810
00:41:26,380 --> 00:41:30,760
strings of course it may not be helpful

811
00:41:30,760 --> 00:41:33,910
to have it here in in console log what

812
00:41:33,910 --> 00:41:35,890
you can do you can just add additional

813
00:41:35,890 --> 00:41:39,160
step which creates the report in the

814
00:41:39,160 --> 00:41:42,190
format of the CIA CVS for example and

815
00:41:42,190 --> 00:41:45,310
then you can analyze and just check it

816
00:41:45,310 --> 00:41:47,950
you even can break the pipeline and I

817
00:41:47,950 --> 00:41:50,560
will show one example how you can break

818
00:41:50,560 --> 00:41:52,660
the pipeline if their security is not

819
00:41:52,660 --> 00:41:57,790
combined the when we have done the built

820
00:41:57,790 --> 00:42:00,400
and we have pushed our web goat I also

821
00:42:00,400 --> 00:42:06,550
run the my anchor so I have checked the

822
00:42:06,550 --> 00:42:11,140
vulnerabilities in container by the

823
00:42:11,140 --> 00:42:14,320
anchor to and I'm getting the JSON

824
00:42:14,320 --> 00:42:17,530
result and let me see some of examples

825
00:42:17,530 --> 00:42:21,700
what I got and let me zoom it

826
00:42:21,700 --> 00:42:30,880
can yes so as you can see this is

827
00:42:30,880 --> 00:42:33,700
particular JSON format which states what

828
00:42:33,700 --> 00:42:36,310
type of the vulnerability I have in my

829
00:42:36,310 --> 00:42:38,200
container on what I need to pay the

830
00:42:38,200 --> 00:42:41,200
attention and also additionally I get

831
00:42:41,200 --> 00:42:44,470
the explanation what things

832
00:42:44,470 --> 00:42:47,530
what what what the CBA is behind that

833
00:42:47,530 --> 00:42:49,660
vulnerability so I can just follow the

834
00:42:49,660 --> 00:42:51,360
link and learn more

835
00:42:51,360 --> 00:42:54,400
additionally like I mentioned I can also

836
00:42:54,400 --> 00:42:58,420
follow the my policy in genes and let me

837
00:42:58,420 --> 00:42:59,010
see

838
00:42:59,010 --> 00:43:03,550
but I do have for this example but I'm

839
00:43:03,550 --> 00:43:05,920
running like the I'm trying to create

840
00:43:05,920 --> 00:43:07,540
the service which cannot run for the

841
00:43:07,540 --> 00:43:11,140
ports 22 even we have agreed but all our

842
00:43:11,140 --> 00:43:14,290
docker images should not have it I can

843
00:43:14,290 --> 00:43:16,600
always to check and then decline this

844
00:43:16,600 --> 00:43:21,610
type of the devil deployment so and the

845
00:43:21,610 --> 00:43:24,850
last thing that I hadn't looked that was

846
00:43:24,850 --> 00:43:29,050
so the libraries when we run when we run

847
00:43:29,050 --> 00:43:34,120
our build pipeline we also get the

848
00:43:34,120 --> 00:43:37,240
report an old libraries so what we can

849
00:43:37,240 --> 00:43:39,370
do we can immediately to check if our

850
00:43:39,370 --> 00:43:41,500
first party open source libraries are

851
00:43:41,500 --> 00:43:45,820
having some vulnerabilities or there are

852
00:43:45,820 --> 00:43:50,170
some non update appropriate licenses

853
00:43:50,170 --> 00:43:52,480
because I think if you are developing

854
00:43:52,480 --> 00:43:54,160
some commercial tool and you're

855
00:43:54,160 --> 00:43:56,560
including some more open source library

856
00:43:56,560 --> 00:44:00,340
which contains which is licensed under

857
00:44:00,340 --> 00:44:02,620
the license which requires here to open

858
00:44:02,620 --> 00:44:04,120
source this is not something but you

859
00:44:04,120 --> 00:44:08,470
would like to see in a in your

860
00:44:08,470 --> 00:44:14,620
production right so when I went the when

861
00:44:14,620 --> 00:44:20,020
I went to them let me see I just how can

862
00:44:20,020 --> 00:44:23,830
I get rid of it sorry like bit annoying

863
00:44:23,830 --> 00:44:29,590
yes yes then I went to the production as

864
00:44:29,590 --> 00:44:32,520
you can see in my case I don't have

865
00:44:32,520 --> 00:44:35,530
infrastructure as a code but

866
00:44:35,530 --> 00:44:37,450
I can do I can still check my

867
00:44:37,450 --> 00:44:41,130
infrastructure if it's contained some

868
00:44:41,130 --> 00:44:43,930
well like you know more infrastructure

869
00:44:43,930 --> 00:44:45,940
and non-compliance or the security who

870
00:44:45,940 --> 00:44:48,940
flows and I can do this by the extension

871
00:44:48,940 --> 00:44:52,960
which is part of secure devops kit or

872
00:44:52,960 --> 00:44:57,550
the practices secure practices for the

873
00:44:57,550 --> 00:44:59,620
Asia and particularly the extension

874
00:44:59,620 --> 00:45:05,830
which helps you to check all your

875
00:45:05,830 --> 00:45:08,530
infrastructure according to the some of

876
00:45:08,530 --> 00:45:12,280
best practices or what we suggest and

877
00:45:12,280 --> 00:45:14,980
when comes to the Asia and what you do

878
00:45:14,980 --> 00:45:18,430
you get immediately like the report when

879
00:45:18,430 --> 00:45:20,380
you are delivering or when you're

880
00:45:20,380 --> 00:45:22,630
creating your release pipeline you

881
00:45:22,630 --> 00:45:24,790
immediately can even break your release

882
00:45:24,790 --> 00:45:27,640
and say like hey what you can try to

883
00:45:27,640 --> 00:45:31,180
deploy as infrastructure is having some

884
00:45:31,180 --> 00:45:35,730
security vulnerabilities or

885
00:45:35,730 --> 00:45:38,680
misconfigurations what we believe is not

886
00:45:38,680 --> 00:45:41,160
appropriate like let's take for example

887
00:45:41,160 --> 00:45:46,500
there are some things let's see

888
00:45:46,500 --> 00:45:50,020
regarding to the key world or

889
00:45:50,020 --> 00:45:52,900
particularly even now there are some

890
00:45:52,900 --> 00:45:55,090
practices include that when it comes to

891
00:45:55,090 --> 00:45:57,730
the container registry so with

892
00:45:57,730 --> 00:46:00,040
suggestions what you can use immediately

893
00:46:00,040 --> 00:46:03,240
even you're not like the security expert

894
00:46:03,240 --> 00:46:05,920
you will get it twist as an output in

895
00:46:05,920 --> 00:46:09,580
your pipeline okay this is like around

896
00:46:09,580 --> 00:46:11,950
the pipeline itself and if you are

897
00:46:11,950 --> 00:46:13,900
curious how to deploy or how to create

898
00:46:13,900 --> 00:46:18,040
that actually I wrote the article or I

899
00:46:18,040 --> 00:46:20,520
have published it we saw on my github

900
00:46:20,520 --> 00:46:23,470
and then you can just take your time and

901
00:46:23,470 --> 00:46:26,290
play around and see how it can can be

902
00:46:26,290 --> 00:46:28,090
implemented so there are step-by-step

903
00:46:28,090 --> 00:46:30,670
instructions and I really appreciate if

904
00:46:30,670 --> 00:46:32,680
you will give if you will give some

905
00:46:32,680 --> 00:46:37,090
feedback in a way I'm working all the

906
00:46:37,090 --> 00:46:40,000
time on that and I'm gonna improve the

907
00:46:40,000 --> 00:46:45,040
documentation too so when we are in the

908
00:46:45,040 --> 00:46:47,230
production the first thing like I

909
00:46:47,230 --> 00:46:49,420
mentioned where you would like to focus

910
00:46:49,420 --> 00:46:51,040
comes to the asia and the cloud

911
00:46:51,040 --> 00:46:54,730
practices is the security center and it

912
00:46:54,730 --> 00:46:57,130
deserves its own stage because i can

913
00:46:57,130 --> 00:46:59,020
talk about the security center itself

914
00:46:59,020 --> 00:47:01,750
like not one hour but let me show the

915
00:47:01,750 --> 00:47:05,589
some most common features or what you

916
00:47:05,589 --> 00:47:09,460
could pay attention immediately so what

917
00:47:09,460 --> 00:47:13,089
you can see is you can get security hi

918
00:47:13,089 --> 00:47:15,960
again like you can see the compliance or

919
00:47:15,960 --> 00:47:20,280
security state of your resources like

920
00:47:20,280 --> 00:47:26,980
VMS or even like cloud services or the

921
00:47:26,980 --> 00:47:30,480
application services what type of the

922
00:47:30,480 --> 00:47:33,579
recommendations they are having like how

923
00:47:33,579 --> 00:47:37,180
we can improve the security state and

924
00:47:37,180 --> 00:47:40,599
some of them actually allows you to fix

925
00:47:40,599 --> 00:47:42,849
the security vulnerability or the

926
00:47:42,849 --> 00:47:44,980
security recommendation why we've the

927
00:47:44,980 --> 00:47:47,579
one-click remediation click and

928
00:47:47,579 --> 00:47:50,470
currently we also have introduced in the

929
00:47:50,470 --> 00:47:55,480
preview the same security view for the

930
00:47:55,480 --> 00:47:57,579
container so you even can look on the

931
00:47:57,579 --> 00:48:00,309
container suggestion what is wrong

932
00:48:00,309 --> 00:48:02,940
what type of this security

933
00:48:02,940 --> 00:48:04,390
misconfigurations

934
00:48:04,390 --> 00:48:10,420
are in europe in your container stuff

935
00:48:10,420 --> 00:48:13,059
what shall be applied the nice thing is

936
00:48:13,059 --> 00:48:15,520
that it covers not only the application

937
00:48:15,520 --> 00:48:18,089
it covers also infrastructure part and

938
00:48:18,089 --> 00:48:21,400
to make i guess a bit more fun there's a

939
00:48:21,400 --> 00:48:23,740
thing which is called secure score or i

940
00:48:23,740 --> 00:48:26,049
would like to say bit more of element of

941
00:48:26,049 --> 00:48:28,630
the gamification which allows you to see

942
00:48:28,630 --> 00:48:31,950
what type of the practices or the what

943
00:48:31,950 --> 00:48:35,700
security vulnerability is prioritized

944
00:48:35,700 --> 00:48:40,119
what you need to fix immediately to get

945
00:48:40,119 --> 00:48:43,059
your security state even better like

946
00:48:43,059 --> 00:48:45,700
with one-click you need to fix three of

947
00:48:45,700 --> 00:48:49,569
them for example in this case like you

948
00:48:49,569 --> 00:48:51,130
have the web application which is

949
00:48:51,130 --> 00:48:54,190
deployed on the classical HTTP and you

950
00:48:54,190 --> 00:48:57,040
can fix it and your secure score is

951
00:48:57,040 --> 00:49:01,450
going to improve immediately and also

952
00:49:01,450 --> 00:49:03,250
there are some other

953
00:49:03,250 --> 00:49:06,460
things like when it comes to the

954
00:49:06,460 --> 00:49:09,550
policies you can apply a lot of

955
00:49:09,550 --> 00:49:11,230
different policies and maybe sometimes

956
00:49:11,230 --> 00:49:13,420
you don't know where to start and there

957
00:49:13,420 --> 00:49:15,280
are different policies which are like

958
00:49:15,280 --> 00:49:17,970
what we have developed as a group of

959
00:49:17,970 --> 00:49:22,090
policies according to the most common

960
00:49:22,090 --> 00:49:24,310
standards like security standards like

961
00:49:24,310 --> 00:49:27,640
ISO two thousand two seven zero zero one

962
00:49:27,640 --> 00:49:30,190
so what you can do you can apply that

963
00:49:30,190 --> 00:49:34,090
policy set and you can see how compliant

964
00:49:34,090 --> 00:49:34,720
you are

965
00:49:34,720 --> 00:49:39,190
according to be so regulatory the risk

966
00:49:39,190 --> 00:49:41,980
particularly so two seven zero zero one

967
00:49:41,980 --> 00:49:45,670
and what actions you need to apply on

968
00:49:45,670 --> 00:49:49,750
your cloud resources immediately to fix

969
00:49:49,750 --> 00:49:54,790
on compliance yes

970
00:49:54,790 --> 00:49:57,490
that's kind of bit really short in on

971
00:49:57,490 --> 00:49:59,590
the security because there are a lot of

972
00:49:59,590 --> 00:50:02,290
more very more functionality but usually

973
00:50:02,290 --> 00:50:03,880
when I worked with the development teams

974
00:50:03,880 --> 00:50:07,150
I said like just you know enable it

975
00:50:07,150 --> 00:50:10,210
maybe not so like you can start people

976
00:50:10,210 --> 00:50:13,690
with the basic level at least you're

977
00:50:13,690 --> 00:50:16,540
gonna see and you have feeling what is

978
00:50:16,540 --> 00:50:18,790
happening with your resources in Asia

979
00:50:18,790 --> 00:50:20,050
what is happening creep your

980
00:50:20,050 --> 00:50:22,060
subscription what the things you need to

981
00:50:22,060 --> 00:50:26,380
fix and actually to get them better

982
00:50:26,380 --> 00:50:30,940
security it's kind of a bit of magic

983
00:50:30,940 --> 00:50:32,770
like you know you feel as being security

984
00:50:32,770 --> 00:50:34,840
expert just by watching what what do you

985
00:50:34,840 --> 00:50:39,670
see on the screen yeah that that was a

986
00:50:39,670 --> 00:50:44,080
bit short intro or I would say the demo

987
00:50:44,080 --> 00:50:47,170
like I mentioned that article

988
00:50:47,170 --> 00:50:49,300
particularly you can read and follow on

989
00:50:49,300 --> 00:50:52,030
your own pace and try to implement some

990
00:50:52,030 --> 00:50:54,790
of these extensions if you are using the

991
00:50:54,790 --> 00:50:55,360
Asia

992
00:50:55,360 --> 00:50:59,260
DevOps pipelines if there are other CI

993
00:50:59,260 --> 00:51:02,800
CD pipelines what you are using the same

994
00:51:02,800 --> 00:51:05,680
practices what I have showed on one

995
00:51:05,680 --> 00:51:13,720
inform first slide yes repeat one not

996
00:51:13,720 --> 00:51:16,970
one these ones or you can implement

997
00:51:16,970 --> 00:51:19,520
on it doesn't matter what type of the

998
00:51:19,520 --> 00:51:22,250
tools you're having like you know so

999
00:51:22,250 --> 00:51:24,320
it's it's quite critical to understand

1000
00:51:24,320 --> 00:51:29,510
these practices and yes so there are so

1001
00:51:29,510 --> 00:51:33,020
many hot takes and like I mentioned

1002
00:51:33,020 --> 00:51:35,450
after this session if you're dealing

1003
00:51:35,450 --> 00:51:37,970
with the usual cloud and booth

1004
00:51:37,970 --> 00:51:39,800
subscriptions the first thing what you

1005
00:51:39,800 --> 00:51:43,250
can do is you can start with dividing

1006
00:51:43,250 --> 00:51:46,790
your projects and the environments per

1007
00:51:46,790 --> 00:51:49,580
subscriptions apply some basic policies

1008
00:51:49,580 --> 00:51:53,119
like at least if you don't know which of

1009
00:51:53,119 --> 00:51:56,119
them to start applying you can drop grab

1010
00:51:56,119 --> 00:51:58,810
the set what is provided in media in

1011
00:51:58,810 --> 00:52:02,359
Asia with the suggestions and of course

1012
00:52:02,359 --> 00:52:06,430
enable the Security Center think about

1013
00:52:06,430 --> 00:52:10,630
this easy s key extension I showed

1014
00:52:10,630 --> 00:52:13,310
extension which is focusing on already

1015
00:52:13,310 --> 00:52:16,849
deployed environment but if you are

1016
00:52:16,849 --> 00:52:19,220
dealing grief Ireland templates you can

1017
00:52:19,220 --> 00:52:22,099
apply the step which is called ACS key

1018
00:52:22,099 --> 00:52:25,160
RM template checker and it's going to

1019
00:52:25,160 --> 00:52:27,380
check the template and will give the

1020
00:52:27,380 --> 00:52:29,540
same output what we have seen in the

1021
00:52:29,540 --> 00:52:32,540
release pipeline but or a quorum based

1022
00:52:32,540 --> 00:52:36,619
on your template configuration then you

1023
00:52:36,619 --> 00:52:39,349
your plow when the next step is I would

1024
00:52:39,349 --> 00:52:40,910
suggest always to think about the

1025
00:52:40,910 --> 00:52:45,920
third-party libraries so choose the tool

1026
00:52:45,920 --> 00:52:49,460
which is going to check the security of

1027
00:52:49,460 --> 00:52:52,010
the third-party libraries and the

1028
00:52:52,010 --> 00:52:55,000
packages and if you are curious about

1029
00:52:55,000 --> 00:52:58,250
different type of security code analysis

1030
00:52:58,250 --> 00:53:01,400
tools there are for free you just stood

1031
00:53:01,400 --> 00:53:03,770
only thing what you need to do is to

1032
00:53:03,770 --> 00:53:06,619
sign up and give the name of your tabs

1033
00:53:06,619 --> 00:53:08,210
organization and you will get those

1034
00:53:08,210 --> 00:53:11,300
extensions and you will be able to apply

1035
00:53:11,300 --> 00:53:13,810
them as it steps in your CI CD pipeline

1036
00:53:13,810 --> 00:53:17,480
of course there are a lot of different

1037
00:53:17,480 --> 00:53:20,599
solutions available on the market and

1038
00:53:20,599 --> 00:53:22,550
when comes to the open source I really

1039
00:53:22,550 --> 00:53:25,930
like secure DevOps tol chain posture

1040
00:53:25,930 --> 00:53:29,300
created by the Suns which gives some

1041
00:53:29,300 --> 00:53:30,190
observable

1042
00:53:30,190 --> 00:53:34,660
and it has the list of all the tools

1043
00:53:34,660 --> 00:53:38,020
what you can use and does matter which

1044
00:53:38,020 --> 00:53:43,660
cloud either it's Amazon or pick it

1045
00:53:43,660 --> 00:53:46,030
gives you like some of the examples of

1046
00:53:46,030 --> 00:53:48,850
open source tools or the cloud practices

1047
00:53:48,850 --> 00:53:52,080
but you can like apply on each of the

1048
00:53:52,080 --> 00:53:57,670
development step step there are the

1049
00:53:57,670 --> 00:54:01,110
resources and I'm gonna share the slides

1050
00:54:01,110 --> 00:54:04,660
on my github so you can take the time

1051
00:54:04,660 --> 00:54:08,410
and look and read about resources about

1052
00:54:08,410 --> 00:54:11,410
with practices and if you have more

1053
00:54:11,410 --> 00:54:13,480
questions you can just follow me on the

1054
00:54:13,480 --> 00:54:16,900
Twitter and ask me directly or look at

1055
00:54:16,900 --> 00:54:20,200
my github and give some feedback

1056
00:54:20,200 --> 00:54:25,960
use the documentation and yes provide

1057
00:54:25,960 --> 00:54:28,150
some like you know like I mentioned the

1058
00:54:28,150 --> 00:54:33,010
feedback okay I think I used almost all

1059
00:54:33,010 --> 00:54:35,200
my time and I left some minutes for the

1060
00:54:35,200 --> 00:55:01,270
questions okay let me see like I'm just

1061
00:55:01,270 --> 00:55:07,360
trying to find yeah I see their security

1062
00:55:07,360 --> 00:55:08,650
plugins yeah I see it

1063
00:55:08,650 --> 00:55:12,580
so what comes to my mind oh it depends

1064
00:55:12,580 --> 00:55:15,370
which it is you're using there are a lot

1065
00:55:15,370 --> 00:55:17,890
of the for the visual studio and for the

1066
00:55:17,890 --> 00:55:22,270
eclipse when it comes to the code it's

1067
00:55:22,270 --> 00:55:25,690
still less being scheme what is coming

1068
00:55:25,690 --> 00:55:28,030
in my mind immediately but I can collect

1069
00:55:28,030 --> 00:55:30,640
the list and add in in my resources in

1070
00:55:30,640 --> 00:55:33,000
the slide

1071
00:55:46,310 --> 00:55:51,780
thank you so much I really appreciate it

1072
00:55:51,780 --> 00:55:53,420
might be your last

1073
00:55:53,420 --> 00:55:57,119
and supposedly listening if you put the

1074
00:55:57,119 --> 00:55:58,850
emotions of you watching this place like

1075
00:55:58,850 --> 00:56:01,250
easily the school of the Christian

1076
00:56:01,250 --> 00:56:06,300
theology Victoria one simply another

1077
00:56:06,300 --> 00:56:08,490
minor ilumination every three weeks I

1078
00:56:08,490 --> 00:56:12,150
mix it with clinic law and in Johnson

1079
00:56:12,150 --> 00:56:22,320
and obviously it was acquitted even

1080
00:56:22,320 --> 00:56:24,480
forget leaves or an answer to be a great

1081
00:56:24,480 --> 00:56:26,330
session

1082
00:56:26,330 --> 00:56:32,270
and put it in our educators become

1083
00:56:32,270 --> 00:56:34,970
plumbers have hope you enjoyed that and

1084
00:56:34,970 --> 00:56:38,040
thank you so much we will see you all

1085
00:56:38,040 --> 00:56:40,070
again

