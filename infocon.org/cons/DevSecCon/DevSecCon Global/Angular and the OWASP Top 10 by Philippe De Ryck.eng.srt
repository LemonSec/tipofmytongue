1
00:00:03,360 --> 00:00:05,859
hello and welcome to another session of

2
00:00:05,859 --> 00:00:08,740
the sukkah developer I'm so excited to

3
00:00:08,740 --> 00:00:09,700
be here for those of you who don't know

4
00:00:09,700 --> 00:00:11,650
who we are an inclusive community that

5
00:00:11,650 --> 00:00:13,299
educates and enables developers and

6
00:00:13,299 --> 00:00:15,789
application security today I am joined

7
00:00:15,789 --> 00:00:17,560
by a thread and he's gonna be talking

8
00:00:17,560 --> 00:00:20,470
about angular and I was topped in but

9
00:00:20,470 --> 00:00:21,700
before we get started for those of you

10
00:00:21,700 --> 00:00:23,320
don't know me my name is Sam and I'm the

11
00:00:23,320 --> 00:00:25,270
community manager and yeah so if you

12
00:00:25,270 --> 00:00:27,490
have any questions and many topic ideas

13
00:00:27,490 --> 00:00:30,430
feedback please be me on Twitter on our

14
00:00:30,430 --> 00:00:32,829
select channel and/or get pod of us on

15
00:00:32,829 --> 00:00:35,219
the website speed secured available comm

16
00:00:35,219 --> 00:00:37,239
selects actually the best place to

17
00:00:37,239 --> 00:00:39,339
interact with phillipe today so if you

18
00:00:39,339 --> 00:00:42,370
have any questions about musician please

19
00:00:42,370 --> 00:00:45,429
jump onto the website click on slack and

20
00:00:45,429 --> 00:00:48,399
join the live sessions channel and you

21
00:00:48,399 --> 00:00:50,890
can ask questions or at me to him just

22
00:00:50,890 --> 00:00:52,749
like a meter if you're watching the

23
00:00:52,749 --> 00:00:55,449
session and after we've gone my keys for

24
00:00:55,449 --> 00:00:56,829
creatures still jump into the channel

25
00:00:56,829 --> 00:00:58,690
ask questions and Felipe's remember the

26
00:00:58,690 --> 00:01:00,339
end so you can ask your answer question

27
00:01:00,339 --> 00:01:03,639
as they come through and the last thing

28
00:01:03,639 --> 00:01:06,220
it just to mind is there's a little cog

29
00:01:06,220 --> 00:01:07,390
at the bottom right hand corner of your

30
00:01:07,390 --> 00:01:09,280
screen if you put your resolution up to

31
00:01:09,280 --> 00:01:11,290
maximum that's where Julie today's

32
00:01:11,290 --> 00:01:13,480
session but other than that that's

33
00:01:13,480 --> 00:01:15,580
enough for me I'm gonna hand it to you

34
00:01:15,580 --> 00:01:17,680
and I hope you enjoyed the session so -

35
00:01:17,680 --> 00:01:20,860
asleep sorry welcome to the together I

36
00:01:20,860 --> 00:01:23,080
thank you for the very kind introduction

37
00:01:23,080 --> 00:01:26,320
and hi to everyone listening in now or

38
00:01:26,320 --> 00:01:26,950
later

39
00:01:26,950 --> 00:01:30,130
so let's get started this by sharing the

40
00:01:30,130 --> 00:01:32,050
screen here so everything's good you

41
00:01:32,050 --> 00:01:34,870
should see that title slide and you're

42
00:01:34,870 --> 00:01:37,720
all ready to go all right

43
00:01:37,720 --> 00:01:42,430
so today let's this and today we're

44
00:01:42,430 --> 00:01:44,890
gonna talk about angular and Neos top 10

45
00:01:44,890 --> 00:01:47,350
so Sam has told me that apparently there

46
00:01:47,350 --> 00:01:48,580
have been a couple of questions about

47
00:01:48,580 --> 00:01:51,850
security angular and JavaScript and I

48
00:01:51,850 --> 00:01:54,520
actually picked a few topics from the OS

49
00:01:54,520 --> 00:01:57,280
button to talk about here today before

50
00:01:57,280 --> 00:01:59,170
we start maybe maybe a small word about

51
00:01:59,170 --> 00:02:01,620
it or stop them so the most of them is

52
00:02:01,620 --> 00:02:04,000
top 10 of the most dangerous web

53
00:02:04,000 --> 00:02:05,380
security vulnerabilities that are

54
00:02:05,380 --> 00:02:07,630
present in web applications it's built

55
00:02:07,630 --> 00:02:09,190
by Aspen OS with this nonprofit

56
00:02:09,190 --> 00:02:11,590
organization with the single goal of

57
00:02:11,590 --> 00:02:13,330
improving the current state of security

58
00:02:13,330 --> 00:02:15,580
it started out as application security

59
00:02:15,580 --> 00:02:16,319
but

60
00:02:16,319 --> 00:02:18,349
they broaden their scope into

61
00:02:18,349 --> 00:02:20,790
essentially a software security mobile

62
00:02:20,790 --> 00:02:22,709
security container security and all

63
00:02:22,709 --> 00:02:25,379
these things it's mostly a volunteer

64
00:02:25,379 --> 00:02:26,549
organization so a lot of people are

65
00:02:26,549 --> 00:02:28,170
involved volunteering their expertise

66
00:02:28,170 --> 00:02:30,450
their knowledge and essentially trying

67
00:02:30,450 --> 00:02:33,450
to build useful resources and tools and

68
00:02:33,450 --> 00:02:35,640
whatnot for unit one of their most

69
00:02:35,640 --> 00:02:38,280
profound documents is the OWASP top 10

70
00:02:38,280 --> 00:02:40,019
which is something they release every

71
00:02:40,019 --> 00:02:42,209
couple years and essentially and it's

72
00:02:42,209 --> 00:02:44,310
the best awareness document available

73
00:02:44,310 --> 00:02:44,639
out there

74
00:02:44,639 --> 00:02:46,260
almost everybody involved with job

75
00:02:46,260 --> 00:02:48,510
security is somewhat familiar with you

76
00:02:48,510 --> 00:02:51,090
or stop them and here you can see that

77
00:02:51,090 --> 00:02:53,819
the event from 2017 which is the most

78
00:02:53,819 --> 00:02:55,980
recent edition and you can see if you

79
00:02:55,980 --> 00:02:57,299
know a bit about security you can see

80
00:02:57,299 --> 00:02:59,430
some familiar things like injection that

81
00:02:59,430 --> 00:03:02,030
points to something sequel injection

82
00:03:02,030 --> 00:03:04,379
command injection are the traditional

83
00:03:04,379 --> 00:03:06,120
security vulnerabilities these are very

84
00:03:06,120 --> 00:03:08,730
very dangerous they're definitely listed

85
00:03:08,730 --> 00:03:11,549
number one of course you have a few

86
00:03:11,549 --> 00:03:12,720
other things as well I'm not gonna go

87
00:03:12,720 --> 00:03:15,000
over the entire list but if you look

88
00:03:15,000 --> 00:03:16,889
deeper into this document if you find

89
00:03:16,889 --> 00:03:19,049
that online you'll be able to see

90
00:03:19,049 --> 00:03:21,000
there's like a one pager every one of

91
00:03:21,000 --> 00:03:22,859
these vulnerabilities explains like what

92
00:03:22,859 --> 00:03:24,299
is the problem while dangerous is it how

93
00:03:24,299 --> 00:03:26,760
is exploited and how can you find it in

94
00:03:26,760 --> 00:03:28,560
your application and more important more

95
00:03:28,560 --> 00:03:31,260
most importantly how can you fix depth

96
00:03:31,260 --> 00:03:33,180
in your application that's essentially

97
00:03:33,180 --> 00:03:35,819
what it is about what I'm going to talk

98
00:03:35,819 --> 00:03:38,250
about today is how does apply to angular

99
00:03:38,250 --> 00:03:39,690
applications you can imagine that

100
00:03:39,690 --> 00:03:41,340
angular applications usually don't

101
00:03:41,340 --> 00:03:42,479
really suffer from sequel injection

102
00:03:42,479 --> 00:03:44,609
that's sort of your back-end problem but

103
00:03:44,609 --> 00:03:47,579
not necessarily from that problem so

104
00:03:47,579 --> 00:03:48,840
what I actually want to talk about

105
00:03:48,840 --> 00:03:51,540
before we dive into the issues is how

106
00:03:51,540 --> 00:03:52,739
angular applications are different

107
00:03:52,739 --> 00:03:54,629
especially from traditional web

108
00:03:54,629 --> 00:03:56,579
applications so in a traditional web

109
00:03:56,579 --> 00:03:58,859
application you used to have everything

110
00:03:58,859 --> 00:04:01,349
on a server side the server gets the

111
00:04:01,349 --> 00:04:02,849
requests the some processing it

112
00:04:02,849 --> 00:04:04,680
generates a page and sends it back to

113
00:04:04,680 --> 00:04:06,840
the browser and that's a body in an

114
00:04:06,840 --> 00:04:08,849
angular environment you these things

115
00:04:08,849 --> 00:04:10,379
kind of change because now we will no

116
00:04:10,379 --> 00:04:12,239
longer have server sample you still

117
00:04:12,239 --> 00:04:13,889
insert some processing but now you have

118
00:04:13,889 --> 00:04:15,419
an actual application running in the

119
00:04:15,419 --> 00:04:17,608
front it's not just a web page anymore

120
00:04:17,608 --> 00:04:19,108
so what you see here is the

121
00:04:19,108 --> 00:04:21,120
bootstrapping activates where angular is

122
00:04:21,120 --> 00:04:23,159
actually being loaded from a server the

123
00:04:23,159 --> 00:04:25,020
static web server and it will

124
00:04:25,020 --> 00:04:26,820
essentially be loaded into the browser

125
00:04:26,820 --> 00:04:29,070
these are traditional browser gates

126
00:04:29,070 --> 00:04:30,020
requests

127
00:04:30,020 --> 00:04:31,550
navigate to the website it's going to

128
00:04:31,550 --> 00:04:33,590
load some HTML Javascript and bootstrap

129
00:04:33,590 --> 00:04:36,259
the angular application once that is

130
00:04:36,259 --> 00:04:38,000
done typically an angular application is

131
00:04:38,000 --> 00:04:39,470
going to communicate with me yeah so

132
00:04:39,470 --> 00:04:41,659
there is still a back-end but it's kind

133
00:04:41,659 --> 00:04:44,180
of separated because the API no longer

134
00:04:44,180 --> 00:04:47,030
service pages it simply usually returns

135
00:04:47,030 --> 00:04:48,889
JSON data was kind of return anything

136
00:04:48,889 --> 00:04:51,620
you kind of want so this is under your

137
00:04:51,620 --> 00:04:53,120
control you built the client until the

138
00:04:53,120 --> 00:04:55,310
API and you can choose whatever format

139
00:04:55,310 --> 00:04:56,930
you want to choose that Jason is

140
00:04:56,930 --> 00:04:59,870
actually very common and this this split

141
00:04:59,870 --> 00:05:01,190
in the appointment is something that we

142
00:05:01,190 --> 00:05:03,530
don't see in or seen less often in

143
00:05:03,530 --> 00:05:05,240
traditional applications but you see

144
00:05:05,240 --> 00:05:07,069
that in all modern JavaScript

145
00:05:07,069 --> 00:05:08,419
applications so you have this with

146
00:05:08,419 --> 00:05:09,919
angular we have inserted to react you

147
00:05:09,919 --> 00:05:13,039
and amber and all the other ones as well

148
00:05:13,039 --> 00:05:15,590
so this is definitely a big important

149
00:05:15,590 --> 00:05:17,270
difference and I'm gonna come back to

150
00:05:17,270 --> 00:05:18,919
this slide a few times throughout the

151
00:05:18,919 --> 00:05:20,750
presentation to show you why this

152
00:05:20,750 --> 00:05:22,520
actually matters and why certain things

153
00:05:22,520 --> 00:05:25,250
have changed significantly one of the

154
00:05:25,250 --> 00:05:27,110
important changes for example is

155
00:05:27,110 --> 00:05:29,509
security notice here the headers are a

156
00:05:29,509 --> 00:05:31,550
mechanism to tell the browser to behave

157
00:05:31,550 --> 00:05:33,919
in certain ways and this used to be a

158
00:05:33,919 --> 00:05:36,199
per page setting for your application or

159
00:05:36,199 --> 00:05:38,599
a program main setting you simply set it

160
00:05:38,599 --> 00:05:40,759
on the server and you're done now these

161
00:05:40,759 --> 00:05:42,169
kind of things these headers will be

162
00:05:42,169 --> 00:05:44,509
applied on the angular application so

163
00:05:44,509 --> 00:05:46,190
it's called a single page application

164
00:05:46,190 --> 00:05:47,840
because you actually load a single page

165
00:05:47,840 --> 00:05:50,029
which run JavaScript and that JavaScript

166
00:05:50,029 --> 00:05:52,250
will embody your entire application so

167
00:05:52,250 --> 00:05:54,770
we'll see a few examples of why that

168
00:05:54,770 --> 00:05:58,490
matters later in the popular so that's

169
00:05:58,490 --> 00:06:00,289
essentially the the deployments in the

170
00:06:00,289 --> 00:06:02,870
setup scene to allow us to talk about

171
00:06:02,870 --> 00:06:05,960
the most of them so we have here the

172
00:06:05,960 --> 00:06:07,550
overview of the top 10s we had before

173
00:06:07,550 --> 00:06:10,310
this is just a general way of looking at

174
00:06:10,310 --> 00:06:13,009
things mainly in a generic web

175
00:06:13,009 --> 00:06:15,380
application and buyer so injection yes

176
00:06:15,380 --> 00:06:17,690
still number one not necessarily for

177
00:06:17,690 --> 00:06:19,279
angular but it can be for traditional

178
00:06:19,279 --> 00:06:20,930
applications and also for the AP is

179
00:06:20,930 --> 00:06:23,000
begging angular applications of course

180
00:06:23,000 --> 00:06:26,569
when angular applications and taking the

181
00:06:26,569 --> 00:06:27,680
Liberty to reorder

182
00:06:27,680 --> 00:06:30,500
top five of it at the top ten of it and

183
00:06:30,500 --> 00:06:32,300
I think that the top five you see on the

184
00:06:32,300 --> 00:06:34,669
left here actually matter quite a bit in

185
00:06:34,669 --> 00:06:38,539
angular so I mean I've put one on top

186
00:06:38,539 --> 00:06:39,949
which is using components and on

187
00:06:39,949 --> 00:06:42,050
probabilities I think that is going to

188
00:06:42,050 --> 00:06:43,670
that is one of the major

189
00:06:43,670 --> 00:06:45,950
we face today and it's going to be a

190
00:06:45,950 --> 00:06:47,630
significant problem in the future as

191
00:06:47,630 --> 00:06:49,010
well and there's a couple of other

192
00:06:49,010 --> 00:06:51,140
things I'm gonna talk about three today

193
00:06:51,140 --> 00:06:53,000
we only have an hour and there's so much

194
00:06:53,000 --> 00:06:54,620
to say about all these things so instead

195
00:06:54,620 --> 00:06:57,410
of giving you like one slide on every

196
00:06:57,410 --> 00:06:59,480
topic I'm gonna actually try to go into

197
00:06:59,480 --> 00:07:01,670
a bit of detail on these three main

198
00:07:01,670 --> 00:07:04,070
topics I'm gonna start with since they

199
00:07:04,070 --> 00:07:07,400
did exposure which is in my personal top

200
00:07:07,400 --> 00:07:09,890
10 here our top five the least important

201
00:07:09,890 --> 00:07:11,930
I'm going to build up try to talk to

202
00:07:11,930 --> 00:07:13,250
make sure and what sticks around until

203
00:07:13,250 --> 00:07:16,190
the end to make sure you have helping

204
00:07:16,190 --> 00:07:18,770
all the information so let's start there

205
00:07:18,770 --> 00:07:21,380
since the big exporter is essentially an

206
00:07:21,380 --> 00:07:24,080
item where you might expose sensitive

207
00:07:24,080 --> 00:07:26,420
data to people that are not supposed to

208
00:07:26,420 --> 00:07:28,760
see and the primary problem in web

209
00:07:28,760 --> 00:07:30,830
applications there is transport is use

210
00:07:30,830 --> 00:07:33,230
of HTTP which is really really really

211
00:07:33,230 --> 00:07:35,540
important so I promised to come back to

212
00:07:35,540 --> 00:07:38,510
this picture and talk about how it's

213
00:07:38,510 --> 00:07:40,550
actually matters in angular

214
00:07:40,550 --> 00:07:42,590
so for HTTP this means that you're gonna

215
00:07:42,590 --> 00:07:45,110
apply it's just on your channel really

216
00:07:45,110 --> 00:07:46,940
low to angular application obviously you

217
00:07:46,940 --> 00:07:48,860
want to load your HTML and JavaScript in

218
00:07:48,860 --> 00:07:50,270
your way so you're gonna need some

219
00:07:50,270 --> 00:07:52,010
yes there and you're also going to mean

220
00:07:52,010 --> 00:07:55,790
some HTTP in the backend on the API so

221
00:07:55,790 --> 00:08:00,320
let's talk about HTS for for a bit one

222
00:08:00,320 --> 00:08:02,150
of the things you should know up front

223
00:08:02,150 --> 00:08:04,520
is that HTTP has gotten a lot better

224
00:08:04,520 --> 00:08:06,500
than it used to be so many people will

225
00:08:06,500 --> 00:08:08,870
say that HTS is slow expensive and

226
00:08:08,870 --> 00:08:10,940
neither to configure and so on well I

227
00:08:10,940 --> 00:08:13,130
good news today we have let's encrypt

228
00:08:13,130 --> 00:08:14,960
and let's encrypt it's a free automated

229
00:08:14,960 --> 00:08:17,900
and open in a special essentially what

230
00:08:17,900 --> 00:08:19,310
they do is they offer you three

231
00:08:19,310 --> 00:08:21,140
certificates you can easily use to

232
00:08:21,140 --> 00:08:23,060
deploy any console application they have

233
00:08:23,060 --> 00:08:24,620
automated the whole process and they

234
00:08:24,620 --> 00:08:26,120
have essentially taken the fame of

235
00:08:26,120 --> 00:08:28,250
managing certificates and completely

236
00:08:28,250 --> 00:08:30,200
away one of the awesome things is they

237
00:08:30,200 --> 00:08:31,820
have a tool you can install called cert

238
00:08:31,820 --> 00:08:33,679
but and once you request a certificate

239
00:08:33,679 --> 00:08:35,780
with a cert but what it actually does is

240
00:08:35,780 --> 00:08:37,820
it installs an automatic cron job to

241
00:08:37,820 --> 00:08:39,289
renew that certificate when it's about

242
00:08:39,289 --> 00:08:41,479
to expire and it does this Texas every

243
00:08:41,479 --> 00:08:42,890
week so you don't no longer have to

244
00:08:42,890 --> 00:08:46,040
worry about all of that yourself there

245
00:08:46,040 --> 00:08:48,290
are some rumors online Atlas encrypts

246
00:08:48,290 --> 00:08:49,910
it's free so you get that you paid for

247
00:08:49,910 --> 00:08:52,070
in it's crap and this and that and all

248
00:08:52,070 --> 00:08:55,940
mostly these are usually or mostly non

249
00:08:55,940 --> 00:08:56,540
relevant

250
00:08:56,540 --> 00:08:57,590
so let's encrypt

251
00:08:57,590 --> 00:08:59,360
is really good what they offer it's

252
00:08:59,360 --> 00:09:01,760
absolutely awesome it is backed by a non

253
00:09:01,760 --> 00:09:03,410
profit which is again backed by a lot of

254
00:09:03,410 --> 00:09:05,330
commercial companies and it's definitely

255
00:09:05,330 --> 00:09:07,160
highly recommended to use and I

256
00:09:07,160 --> 00:09:08,810
personally use it myself

257
00:09:08,810 --> 00:09:11,450
as well so that's the basics right yes

258
00:09:11,450 --> 00:09:13,730
let's talk about how to use it in your

259
00:09:13,730 --> 00:09:17,300
application and she wanna load your

260
00:09:17,300 --> 00:09:19,160
application or even if you user wants to

261
00:09:19,160 --> 00:09:20,810
load your application there particularly

262
00:09:20,810 --> 00:09:22,160
I'm not going to go to the HTTPS version

263
00:09:22,160 --> 00:09:24,110
they're typically not gonna type HTTP

264
00:09:24,110 --> 00:09:26,510
colon slash slash rest a greater comb or

265
00:09:26,510 --> 00:09:28,340
whatever application you're building no

266
00:09:28,340 --> 00:09:30,200
user is going to type restaurateur

267
00:09:30,200 --> 00:09:31,940
common-law physical more Twitter

268
00:09:31,940 --> 00:09:34,520
upcoming holiday I mean that happens the

269
00:09:34,520 --> 00:09:36,980
browser actually sends an HTTP rivers so

270
00:09:36,980 --> 00:09:39,230
the browser does not use HDS by default

271
00:09:39,230 --> 00:09:40,850
because if it doesn't work then it's

272
00:09:40,850 --> 00:09:42,860
gonna create very nasty errors so the

273
00:09:42,860 --> 00:09:45,500
browser cannot rely or expect that to

274
00:09:45,500 --> 00:09:47,540
happen from to be so the first request

275
00:09:47,540 --> 00:09:50,390
is going to be HTTP which is unprotected

276
00:09:50,390 --> 00:09:52,880
unsecure and definitely dangerous if you

277
00:09:52,880 --> 00:09:54,890
send that on the network so what the

278
00:09:54,890 --> 00:09:57,530
server needs to do especially the front

279
00:09:57,530 --> 00:09:59,450
end server your server needs to send a

280
00:09:59,450 --> 00:10:01,910
redirect and service will send you a 301

281
00:10:01,910 --> 00:10:03,950
which essentially means this resource

282
00:10:03,950 --> 00:10:06,620
has moved probably to a new location and

283
00:10:06,620 --> 00:10:08,360
it's going to give you a new URL which

284
00:10:08,360 --> 00:10:10,130
is essentially the old fear of starting

285
00:10:10,130 --> 00:10:13,070
with HTTPS instead of HTTP and that is

286
00:10:13,070 --> 00:10:15,860
something every web server that is using

287
00:10:15,860 --> 00:10:18,110
or departing h2 yesterday has to do to

288
00:10:18,110 --> 00:10:19,850
ensure that it's in areas like this work

289
00:10:19,850 --> 00:10:21,890
in the process to ensure this route

290
00:10:21,890 --> 00:10:24,020
either a domain name that it actually

291
00:10:24,020 --> 00:10:26,630
resolves into the HTTP page eventually

292
00:10:26,630 --> 00:10:29,210
just by taking these additional steps

293
00:10:29,210 --> 00:10:31,370
and that's what's going on here this is

294
00:10:31,370 --> 00:10:33,440
if you remember the image from before

295
00:10:33,440 --> 00:10:35,270
this is what you need to do on that the

296
00:10:35,270 --> 00:10:38,120
server serving the HTML and JavaScript

297
00:10:38,120 --> 00:10:40,640
from your angular application however if

298
00:10:40,640 --> 00:10:42,980
you are also serving it guys somewhere

299
00:10:42,980 --> 00:10:44,870
else there the story becomes a bit

300
00:10:44,870 --> 00:10:46,190
different because when you have an API

301
00:10:46,190 --> 00:10:48,320
there's no redirect process going on

302
00:10:48,320 --> 00:10:50,510
there's nobody going to access your API

303
00:10:50,510 --> 00:10:52,250
in this case by typing API the

304
00:10:52,250 --> 00:10:53,780
transcript don't because your

305
00:10:53,780 --> 00:10:55,910
application is going to exit Vidya when

306
00:10:55,910 --> 00:10:58,460
the application accesses that API it's

307
00:10:58,460 --> 00:10:59,870
going to use the develop the API

308
00:10:59,870 --> 00:11:01,370
endpoint that US developer have

309
00:11:01,370 --> 00:11:03,500
specified so essentially what you can do

310
00:11:03,500 --> 00:11:06,110
is you can tell the browser to use HTTP

311
00:11:06,110 --> 00:11:09,110
up front and essentially the browser

312
00:11:09,110 --> 00:11:10,430
will do that and there will be no

313
00:11:10,430 --> 00:11:11,240
redirect

314
00:11:11,240 --> 00:11:13,730
so one of the takeaways you can get away

315
00:11:13,730 --> 00:11:15,019
from this slide that I'm gonna show you

316
00:11:15,019 --> 00:11:17,600
know if you later on as well is that the

317
00:11:17,600 --> 00:11:19,759
front-facing server-to-server having but

318
00:11:19,759 --> 00:11:21,559
requests needs that we direct that's

319
00:11:21,559 --> 00:11:23,689
very very crucial to ensure everybody

320
00:11:23,689 --> 00:11:25,040
ends up at the age to get this version

321
00:11:25,040 --> 00:11:27,949
but your api so if they're deployed on a

322
00:11:27,949 --> 00:11:30,110
different host if they're deployed on a

323
00:11:30,110 --> 00:11:32,779
different host name so to say it can

324
00:11:32,779 --> 00:11:34,639
just support hitch yes and there's no

325
00:11:34,639 --> 00:11:36,709
need to support HTTP and the whole

326
00:11:36,709 --> 00:11:39,199
redirect mechanism that's already a

327
00:11:39,199 --> 00:11:41,779
first difference that we see in angular

328
00:11:41,779 --> 00:11:44,179
based or API defect applications

329
00:11:44,179 --> 00:11:46,629
compared to traditional web applications

330
00:11:46,629 --> 00:11:50,809
of course the boring HDX is kind of

331
00:11:50,809 --> 00:11:52,429
well-known it's something that everybody

332
00:11:52,429 --> 00:11:55,790
is should be aware that this is actually

333
00:11:55,790 --> 00:11:57,800
highly recommended and mandatory for

334
00:11:57,800 --> 00:12:00,860
modern laptop babies however before why

335
00:12:00,860 --> 00:12:02,569
HTTP alone it's not going to get you

336
00:12:02,569 --> 00:12:02,899
there

337
00:12:02,899 --> 00:12:06,230
so in this article from 2016 it states

338
00:12:06,230 --> 00:12:08,660
that 95 percent of HTTP servers are

339
00:12:08,660 --> 00:12:10,730
still vulnerable to memory little

340
00:12:10,730 --> 00:12:12,589
attacks and try to it kind of trivial

341
00:12:12,589 --> 00:12:14,420
there's tools available to each really

342
00:12:14,420 --> 00:12:16,639
execute those effects of course because

343
00:12:16,639 --> 00:12:18,980
at 16 that's like ages ago in internet

344
00:12:18,980 --> 00:12:23,720
time today or at least second quarter of

345
00:12:23,720 --> 00:12:24,589
2019

346
00:12:24,589 --> 00:12:29,059
that number was still 78% so imagine 70%

347
00:12:29,059 --> 00:12:31,279
of the servers out there offering HTTPS

348
00:12:31,279 --> 00:12:33,170
doing actually a good job in offering it

349
00:12:33,170 --> 00:12:35,449
yes haven't gone the extra mile of

350
00:12:35,449 --> 00:12:37,819
making sure that our HTTPS deployment is

351
00:12:37,819 --> 00:12:40,009
fully secure and that's kind of a

352
00:12:40,009 --> 00:12:42,949
problem and to fix that you need to add

353
00:12:42,949 --> 00:12:45,199
additional security measures to rate it

354
00:12:45,199 --> 00:12:47,689
psst point and these additional security

355
00:12:47,689 --> 00:12:50,329
measures matter to counter one specific

356
00:12:50,329 --> 00:12:52,339
type of attack which is kind of dangers

357
00:12:52,339 --> 00:12:54,170
and that's called SSL strip and have a

358
00:12:54,170 --> 00:12:56,299
small scenario of what SSL stripping

359
00:12:56,299 --> 00:12:58,999
actually looks like so in an SSO

360
00:12:58,999 --> 00:13:02,240
scripting attack the attacker is trying

361
00:13:02,240 --> 00:13:04,519
to attack or it's going to attack on the

362
00:13:04,519 --> 00:13:07,490
network level but imagine if you travel

363
00:13:07,490 --> 00:13:09,379
a lot you probably visit a lot of

364
00:13:09,379 --> 00:13:11,929
strange Wi-Fi networks in airports or in

365
00:13:11,929 --> 00:13:13,549
hotels or all of those things and you

366
00:13:13,549 --> 00:13:14,899
honestly have no idea what's happening

367
00:13:14,899 --> 00:13:17,869
on these networks and that's kind of

368
00:13:17,869 --> 00:13:19,879
unfortunate and it might be that some of

369
00:13:19,879 --> 00:13:22,790
it is messing with that traffic and if

370
00:13:22,790 --> 00:13:24,860
that's the case they can execute it as

371
00:13:24,860 --> 00:13:26,180
stroking effect really easy and here's

372
00:13:26,180 --> 00:13:28,550
how that would work so you have the

373
00:13:28,550 --> 00:13:30,140
browser on the left and you want to

374
00:13:30,140 --> 00:13:32,300
contact the server on the right which is

375
00:13:32,300 --> 00:13:34,100
just the web server supporting H yes

376
00:13:34,100 --> 00:13:37,130
doing what it is supposed to do so

377
00:13:37,130 --> 00:13:38,810
here's what an SSL stripping scenario

378
00:13:38,810 --> 00:13:40,730
looks like the grass was gonna send that

379
00:13:40,730 --> 00:13:43,130
request on you type rest agreed come and

380
00:13:43,130 --> 00:13:44,510
the Browse looks like oh I don't know

381
00:13:44,510 --> 00:13:46,670
this website but hey let's see where

382
00:13:46,670 --> 00:13:48,680
this goes and it sends out an initial

383
00:13:48,680 --> 00:13:52,160
HTTP request feedback right before the

384
00:13:52,160 --> 00:13:54,050
attacker is living on the network I

385
00:13:54,050 --> 00:13:55,250
think of controls in that word it can

386
00:13:55,250 --> 00:13:57,020
easily attack you can easily intercept

387
00:13:57,020 --> 00:13:59,420
that request and decides how to handle

388
00:13:59,420 --> 00:14:00,650
that and you see it's like a this is an

389
00:14:00,650 --> 00:14:02,720
HP River so let's let's see where this

390
00:14:02,720 --> 00:14:04,610
takes us and the effector sends out a

391
00:14:04,610 --> 00:14:06,950
new request to see what actually happens

392
00:14:06,950 --> 00:14:08,870
to that because and it's gonna go to the

393
00:14:08,870 --> 00:14:10,430
web server the actual web server and

394
00:14:10,430 --> 00:14:11,930
that web server is going to say like

395
00:14:11,930 --> 00:14:14,870
yeah that's all fine HTTP whatever but I

396
00:14:14,870 --> 00:14:16,460
actually need to do this HTTP thing

397
00:14:16,460 --> 00:14:18,050
because you know this redirect mechanism

398
00:14:18,050 --> 00:14:20,240
I'm actually gonna apply that I'm gonna

399
00:14:20,240 --> 00:14:22,910
make sure that this actually works in

400
00:14:22,910 --> 00:14:24,830
practice and he's gonna redirect on the

401
00:14:24,830 --> 00:14:26,210
attacker it's gonna follow that redirect

402
00:14:26,210 --> 00:14:29,180
and it's going to load the paste HTML

403
00:14:29,180 --> 00:14:31,490
page following from that news box that's

404
00:14:31,490 --> 00:14:33,620
the page being served by the web server

405
00:14:33,620 --> 00:14:35,870
and expected to be seen in the browser

406
00:14:35,870 --> 00:14:37,610
so what's gonna happen now is the

407
00:14:37,610 --> 00:14:39,160
attacker is really sneaky and he's gonna

408
00:14:39,160 --> 00:14:41,540
take that HTML response and is gonna

409
00:14:41,540 --> 00:14:43,520
rewrite that and it's gonna look for

410
00:14:43,520 --> 00:14:45,740
every URL in that page is gonna rewrite

411
00:14:45,740 --> 00:14:49,010
every occurrence HPS h to be so

412
00:14:49,010 --> 00:14:51,020
restaurant way to come certain arranged

413
00:14:51,020 --> 00:14:53,090
yes the tiger now changes every year old

414
00:14:53,090 --> 00:14:55,700
h-2b and sends a response back to the

415
00:14:55,700 --> 00:14:57,560
browser and that's essentially as is all

416
00:14:57,560 --> 00:14:59,270
stupid the attacker has done is he has

417
00:14:59,270 --> 00:15:02,210
intercepted the initial request touch

418
00:15:02,210 --> 00:15:04,760
the pager rage yes and then we load the

419
00:15:04,760 --> 00:15:06,710
whole page to make sure that HTTP was

420
00:15:06,710 --> 00:15:09,200
not in the loop and that the browser is

421
00:15:09,200 --> 00:15:12,590
serving or showing HTTP so what happens

422
00:15:12,590 --> 00:15:14,570
now is when you submit data think about

423
00:15:14,570 --> 00:15:17,630
filling out a login form entering some

424
00:15:17,630 --> 00:15:19,370
personal information whatever everything

425
00:15:19,370 --> 00:15:21,020
is going to be over HP and the effector

426
00:15:21,020 --> 00:15:22,640
is going to be in the middle which would

427
00:15:22,640 --> 00:15:25,250
not be possible when HTS was actually

428
00:15:25,250 --> 00:15:26,480
used between the browser and the server

429
00:15:26,480 --> 00:15:28,940
which never got to happen in this image

430
00:15:28,940 --> 00:15:30,770
now of course the attacker can modify

431
00:15:30,770 --> 00:15:33,020
the data can steal the data whatever

432
00:15:33,020 --> 00:15:35,900
gets a response back rewrite the entire

433
00:15:35,900 --> 00:15:37,980
response again and send

434
00:15:37,980 --> 00:15:40,410
like browser and that's essentially as

435
00:15:40,410 --> 00:15:42,660
it all stripping and this seems like a

436
00:15:42,660 --> 00:15:44,490
very complicated setup that there's

437
00:15:44,490 --> 00:15:47,190
tools available well as is all scripted

438
00:15:47,190 --> 00:15:48,810
you actually can simply run as a proxy

439
00:15:48,810 --> 00:15:51,270
which does all of this for you it's not

440
00:15:51,270 --> 00:15:53,730
the fastest code but actually gets the

441
00:15:53,730 --> 00:15:56,130
job done and it will really easily fool

442
00:15:56,130 --> 00:15:58,290
people who are not actively looking for

443
00:15:58,290 --> 00:16:00,570
the work I can over and over again and

444
00:16:00,570 --> 00:16:02,400
even if you're looking for don't watch

445
00:16:02,400 --> 00:16:04,980
it you're gonna replace it and look I

446
00:16:04,980 --> 00:16:06,690
can DIF that back under the lock sort of

447
00:16:06,690 --> 00:16:08,040
work you'll be still be there just in

448
00:16:08,040 --> 00:16:09,870
the wrong place which might be enough to

449
00:16:09,870 --> 00:16:13,650
fool non-technical users the real danger

450
00:16:13,650 --> 00:16:15,360
of this attack quarter-note the problem

451
00:16:15,360 --> 00:16:17,130
here is that as far as the server is

452
00:16:17,130 --> 00:16:18,750
concerned everything is totally fine

453
00:16:18,750 --> 00:16:21,720
because the server has a secure

454
00:16:21,720 --> 00:16:23,490
connection the server saw Nitschke

455
00:16:23,490 --> 00:16:25,620
request sent a redirect waged yes and

456
00:16:25,620 --> 00:16:27,690
actually everything seems to be totally

457
00:16:27,690 --> 00:16:29,640
fine from that point on and the browser

458
00:16:29,640 --> 00:16:31,950
is not to concern either the browser

459
00:16:31,950 --> 00:16:33,990
send out the request and gotten HTML

460
00:16:33,990 --> 00:16:35,850
page in return and actually chose a page

461
00:16:35,850 --> 00:16:38,100
and both the brass is normally thrilled

462
00:16:38,100 --> 00:16:39,780
with that because today the browser's

463
00:16:39,780 --> 00:16:41,940
from mark aside that's not secure the

464
00:16:41,940 --> 00:16:43,170
pets have added because the browser

465
00:16:43,170 --> 00:16:45,060
doesn't complain the browser doesn't

466
00:16:45,060 --> 00:16:46,590
know that the page was supposed to be

467
00:16:46,590 --> 00:16:49,260
served over HTTPS and essentially this

468
00:16:49,260 --> 00:16:52,050
causes a problem and that's what the

469
00:16:52,050 --> 00:16:53,520
article I showed you before was about

470
00:16:53,520 --> 00:16:56,220
about these men and women but it's not

471
00:16:56,220 --> 00:16:58,260
against the HTTP protocol itself it's

472
00:16:58,260 --> 00:17:01,080
against the setup phase the HBO redirect

473
00:17:01,080 --> 00:17:03,990
from HP HP is that's essentially what is

474
00:17:03,990 --> 00:17:04,949
causing the problem

475
00:17:04,949 --> 00:17:07,230
and that's why these are many servers

476
00:17:07,230 --> 00:17:11,160
are home alright so that's the problem

477
00:17:11,160 --> 00:17:13,230
that's the setup what's the solution why

478
00:17:13,230 --> 00:17:15,449
are only 78% of service vulnerable

479
00:17:15,449 --> 00:17:17,520
because the other ones deploy the

480
00:17:17,520 --> 00:17:19,260
countermeasure called strict Transport

481
00:17:19,260 --> 00:17:21,720
Security and strict Transport Security

482
00:17:21,720 --> 00:17:24,599
are HTTP strict Transport Security is a

483
00:17:24,599 --> 00:17:26,579
countermeasure where the server tells

484
00:17:26,579 --> 00:17:29,340
the browser hey I wanted to remember one

485
00:17:29,340 --> 00:17:32,340
thing from now on I'm gonna use HTTPS

486
00:17:32,340 --> 00:17:34,650
and only HTTPS and I want you to

487
00:17:34,650 --> 00:17:36,720
remember that for this value of max age

488
00:17:36,720 --> 00:17:38,790
so essentially what the server is

489
00:17:38,790 --> 00:17:40,350
telling the browser in in this instance

490
00:17:40,350 --> 00:17:42,390
this is a response tether on an HTTP

491
00:17:42,390 --> 00:17:45,360
response for the next year this is one

492
00:17:45,360 --> 00:17:47,580
year in seconds for the next year I want

493
00:17:47,580 --> 00:17:49,110
you to remember that whenever you send a

494
00:17:49,110 --> 00:17:50,880
request to my domain to rescue a tow

495
00:17:50,880 --> 00:17:51,930
from that

496
00:17:51,930 --> 00:17:54,420
yes so I don't care if the user types

497
00:17:54,420 --> 00:17:56,450
rest of me to come or even H to be

498
00:17:56,450 --> 00:17:58,860
rescued come or you follow a link with

499
00:17:58,860 --> 00:18:01,650
its pyramid calm or whatever I'm telling

500
00:18:01,650 --> 00:18:03,750
you if you should use HTTPS and the

501
00:18:03,750 --> 00:18:06,420
browser will actually honor that that's

502
00:18:06,420 --> 00:18:09,570
a request and we'll send only HTTP

503
00:18:09,570 --> 00:18:12,210
traffic to resolute come from that point

504
00:18:12,210 --> 00:18:14,280
on and this policy remains valid for

505
00:18:14,280 --> 00:18:15,720
years in the past we remember that for a

506
00:18:15,720 --> 00:18:16,080
year

507
00:18:16,080 --> 00:18:17,730
so whenever new is it goes back if you

508
00:18:17,730 --> 00:18:19,620
go back next week brush was still gonna

509
00:18:19,620 --> 00:18:20,850
know that and it's going to see the new

510
00:18:20,850 --> 00:18:22,020
header instead of remember it for

511
00:18:22,020 --> 00:18:24,840
another year and so on and so on of

512
00:18:24,840 --> 00:18:27,060
course he boring this big there's a few

513
00:18:27,060 --> 00:18:28,440
things to take into account but all

514
00:18:28,440 --> 00:18:29,580
about this is a very very

515
00:18:29,580 --> 00:18:31,010
straightforward mechanism to deploy

516
00:18:31,010 --> 00:18:34,380
especially if you already have its yes

517
00:18:34,380 --> 00:18:36,840
enabled and only use aged yes except for

518
00:18:36,840 --> 00:18:40,130
the redirect this has zero impact on the

519
00:18:40,130 --> 00:18:42,090
application that's running there because

520
00:18:42,090 --> 00:18:43,890
everything is already - yes so why not

521
00:18:43,890 --> 00:18:45,330
get rid of that we'd have it all

522
00:18:45,330 --> 00:18:48,570
together and this is something likely

523
00:18:48,570 --> 00:18:51,090
not many people know about and a lot of

524
00:18:51,090 --> 00:18:53,700
people should know about because if you

525
00:18:53,700 --> 00:18:55,500
are and everyone with boys this

526
00:18:55,500 --> 00:18:57,960
mechanism the number of vulnerable HTTP

527
00:18:57,960 --> 00:19:00,270
servers would go down significantly so I

528
00:19:00,270 --> 00:19:02,100
would eat lima trilled if i have to

529
00:19:02,100 --> 00:19:03,600
update the slides in about a year and

530
00:19:03,600 --> 00:19:05,640
the number would go down from 78 to like

531
00:19:05,640 --> 00:19:08,250
50 or 40 or 30 percent that would be

532
00:19:08,250 --> 00:19:11,430
absolutely amazing so make this your

533
00:19:11,430 --> 00:19:13,440
personal address to make me happy with

534
00:19:13,440 --> 00:19:18,360
that that one thing all right so it's PS

535
00:19:18,360 --> 00:19:20,520
there's a lot more to be said on the

536
00:19:20,520 --> 00:19:22,260
topic I'm not gonna go into detail on

537
00:19:22,260 --> 00:19:24,360
protocols and version numbers and

538
00:19:24,360 --> 00:19:26,580
ciphers and all of them for that I'm

539
00:19:26,580 --> 00:19:29,940
going to refer you to this SSL service

540
00:19:29,940 --> 00:19:32,160
so this is a free tool built for koalas

541
00:19:32,160 --> 00:19:35,970
and actually scans a live age yes sir

542
00:19:35,970 --> 00:19:37,770
and it will tell you how good you're

543
00:19:37,770 --> 00:19:40,170
doing so if you get an A+ you're all

544
00:19:40,170 --> 00:19:42,360
good you have everything set up

545
00:19:42,360 --> 00:19:44,670
correctly if you get something less than

546
00:19:44,670 --> 00:19:46,860
an A+ you have some work to do to make

547
00:19:46,860 --> 00:19:49,020
this actually happen you can see here

548
00:19:49,020 --> 00:19:50,550
that it mentions at the bottom it says

549
00:19:50,550 --> 00:19:54,000
like this yes strict right sorry HP's

550
00:19:54,000 --> 00:19:55,890
three consulate security is enabled next

551
00:19:55,890 --> 00:19:58,140
we need that unable to get an A+ score

552
00:19:58,140 --> 00:20:01,080
on your website this is from my website

553
00:20:01,080 --> 00:20:02,460
by the way and I can take zero credit

554
00:20:02,460 --> 00:20:04,140
for this because the hosting provider

555
00:20:04,140 --> 00:20:05,250
where I'm host

556
00:20:05,250 --> 00:20:07,590
website has set up things correctly this

557
00:20:07,590 --> 00:20:09,870
is not something I have done myself but

558
00:20:09,870 --> 00:20:11,100
of course if you're running your own

559
00:20:11,100 --> 00:20:13,290
server this is absolutely amazing to

560
00:20:13,290 --> 00:20:16,970
make sure everything is set up correctly

561
00:20:16,970 --> 00:20:18,570
all right

562
00:20:18,570 --> 00:20:20,850
brings me to a first overview slide so

563
00:20:20,850 --> 00:20:23,160
I'm gonna have three parts in this

564
00:20:23,160 --> 00:20:25,320
presentation and the first overview is

565
00:20:25,320 --> 00:20:26,820
that you should have HTS support

566
00:20:26,820 --> 00:20:29,040
everywhere even internally essentially

567
00:20:29,040 --> 00:20:30,600
every connection in your own your

568
00:20:30,600 --> 00:20:34,020
application should use HTTP this is very

569
00:20:34,020 --> 00:20:36,750
very important there's a lot of problems

570
00:20:36,750 --> 00:20:38,580
if you don't and there's a lot of things

571
00:20:38,580 --> 00:20:40,170
you should not assume to be safe and a

572
00:20:40,170 --> 00:20:42,870
network is definitely one of them verify

573
00:20:42,870 --> 00:20:44,970
your HP is important as it all served us

574
00:20:44,970 --> 00:20:45,840
very useful

575
00:20:45,840 --> 00:20:48,360
there's also offline tools you can find

576
00:20:48,360 --> 00:20:50,070
to do something similar there's I think

577
00:20:50,070 --> 00:20:52,500
as all best Bhalla age that's does

578
00:20:52,500 --> 00:20:54,360
something similar which you can run in

579
00:20:54,360 --> 00:20:55,740
an internal environment where there's no

580
00:20:55,740 --> 00:20:57,870
public internet access for them so that

581
00:20:57,870 --> 00:21:01,020
might be very useful to know as well and

582
00:21:01,020 --> 00:21:03,690
then finally deploy HSTs to ensure that

583
00:21:03,690 --> 00:21:06,450
all traffic is H yes read a bit about

584
00:21:06,450 --> 00:21:09,060
the other features of HSTs you can make

585
00:21:09,060 --> 00:21:10,590
it even more strict you'll apply to

586
00:21:10,590 --> 00:21:12,420
every subdomain and things like that as

587
00:21:12,420 --> 00:21:15,360
well but there's some three key things

588
00:21:15,360 --> 00:21:17,370
you need to take into account there so I

589
00:21:17,370 --> 00:21:19,200
don't have to totally have time to go

590
00:21:19,200 --> 00:21:22,860
into detail on those topics but again if

591
00:21:22,860 --> 00:21:24,180
you have any specific questions about

592
00:21:24,180 --> 00:21:26,940
this feel free to ask them at the end of

593
00:21:26,940 --> 00:21:29,520
the talk I'll be around for some Q&A as

594
00:21:29,520 --> 00:21:31,890
well and you can also reach out to me on

595
00:21:31,890 --> 00:21:34,050
public channels and you have to answer

596
00:21:34,050 --> 00:21:35,280
questions there as well

597
00:21:35,280 --> 00:21:44,250
all right back to our over the image you

598
00:21:44,250 --> 00:21:46,680
talked about angular yeah sorry yeah I

599
00:21:46,680 --> 00:21:48,330
meant for front application so let's

600
00:21:48,330 --> 00:21:51,030
talk about the actual comment here so

601
00:21:51,030 --> 00:21:52,710
the angular application is static box

602
00:21:52,710 --> 00:21:54,960
you compile your angular app what we're

603
00:21:54,960 --> 00:21:56,520
talking about angular 2 plus here which

604
00:21:56,520 --> 00:21:59,280
is has been around long enough so most

605
00:21:59,280 --> 00:22:00,720
people are actually using angular for

606
00:22:00,720 --> 00:22:03,360
hopefully seven or eight by now but

607
00:22:03,360 --> 00:22:05,310
essentially the modern is a new version

608
00:22:05,310 --> 00:22:07,710
of angle when you will be boy angular

609
00:22:07,710 --> 00:22:09,300
you're building all of this into a

610
00:22:09,300 --> 00:22:11,070
static a set of files you have an HTML

611
00:22:11,070 --> 00:22:12,810
files and JavaScript stuff since is that

612
00:22:12,810 --> 00:22:14,250
stuff and you've done that on that

613
00:22:14,250 --> 00:22:16,890
aesthetic up server some API is in a

614
00:22:16,890 --> 00:22:19,290
search case Anita or XML

615
00:22:19,290 --> 00:22:22,530
you really hate Jason I'm not sure why

616
00:22:22,530 --> 00:22:24,720
because it smells worse but you get the

617
00:22:24,720 --> 00:22:27,740
idea have an API would somebody duck

618
00:22:27,740 --> 00:22:29,700
remember this is totally different from

619
00:22:29,700 --> 00:22:31,770
traditional notifications and that means

620
00:22:31,770 --> 00:22:33,300
that in a traditional web application

621
00:22:33,300 --> 00:22:34,830
you're building it to note pages on the

622
00:22:34,830 --> 00:22:37,140
server over a normal yen and really

623
00:22:37,140 --> 00:22:38,940
putting data into those pages the server

624
00:22:38,940 --> 00:22:41,130
used to have to provide cross-site

625
00:22:41,130 --> 00:22:43,560
scripting defenses now that

626
00:22:43,560 --> 00:22:45,570
responsibility moves to the client which

627
00:22:45,570 --> 00:22:47,400
seems very strange that the client will

628
00:22:47,400 --> 00:22:48,540
have to protect against cross-site

629
00:22:48,540 --> 00:22:50,580
scripting actually this makes a lot more

630
00:22:50,580 --> 00:22:52,620
sense because the server has always

631
00:22:52,620 --> 00:22:54,720
struggled to providing proper access

632
00:22:54,720 --> 00:22:56,790
defenses because the server easily gets

633
00:22:56,790 --> 00:22:57,960
confused about what's going to happen

634
00:22:57,960 --> 00:22:59,100
browsers

635
00:22:59,100 --> 00:23:00,990
sometimes do weird things and that

636
00:23:00,990 --> 00:23:03,720
causes all kinds of problem at insa

637
00:23:03,720 --> 00:23:05,820
narratives so now that moves to the

638
00:23:05,820 --> 00:23:07,140
client and why does it move to the

639
00:23:07,140 --> 00:23:09,180
client because angular is a static

640
00:23:09,180 --> 00:23:10,380
application it's a real application

641
00:23:10,380 --> 00:23:12,750
running in the browser and that means

642
00:23:12,750 --> 00:23:14,760
that your static files you see here on

643
00:23:14,760 --> 00:23:16,890
the Left are actually stuff that looks

644
00:23:16,890 --> 00:23:18,420
like this well it's going to be compiled

645
00:23:18,420 --> 00:23:20,400
certainly a lot less pretty but you kind

646
00:23:20,400 --> 00:23:22,110
of get the idea we're building an

647
00:23:22,110 --> 00:23:23,700
angular application with templates

648
00:23:23,700 --> 00:23:26,010
really kind of defining the structure of

649
00:23:26,010 --> 00:23:27,570
what the pages are gonna like up front

650
00:23:27,570 --> 00:23:30,030
without any actual data this is a

651
00:23:30,030 --> 00:23:32,100
template from the rescue application one

652
00:23:32,100 --> 00:23:35,220
of my training applications which shows

653
00:23:35,220 --> 00:23:37,800
you restaurant reviews I can see your

654
00:23:37,800 --> 00:23:39,840
business off code there's no actual data

655
00:23:39,840 --> 00:23:41,490
in there there's just a couple of

656
00:23:41,490 --> 00:23:43,320
variables like regional title and

657
00:23:43,320 --> 00:23:45,390
musical rating and all of those things

658
00:23:45,390 --> 00:23:47,670
those are placeholders to put actual

659
00:23:47,670 --> 00:23:49,680
data in once the application is running

660
00:23:49,680 --> 00:23:51,750
and where does the data come from it

661
00:23:51,750 --> 00:23:54,180
comes from adjacent API in this case so

662
00:23:54,180 --> 00:23:56,160
here you have a very simple JSON API

663
00:23:56,160 --> 00:23:58,980
which would return one video which is

664
00:23:58,980 --> 00:24:00,870
apparently not very good about this one

665
00:24:00,870 --> 00:24:02,670
particular restaurant it's all fictional

666
00:24:02,670 --> 00:24:04,500
so don't worry it's not about a new

667
00:24:04,500 --> 00:24:06,390
restaurant you'll need to double do it

668
00:24:06,390 --> 00:24:08,220
if you go out to eat in Paris I can't

669
00:24:08,220 --> 00:24:11,760
promise that but it's a food and let's

670
00:24:11,760 --> 00:24:15,750
focus on the actual mechanism see what's

671
00:24:15,750 --> 00:24:17,310
happening security-wise what is saying

672
00:24:17,310 --> 00:24:20,250
look as well let's let's filter out one

673
00:24:20,250 --> 00:24:22,200
specific example if you if you have some

674
00:24:22,200 --> 00:24:23,520
angular code where your binding they

675
00:24:23,520 --> 00:24:25,350
tend to attempt you're putting a

676
00:24:25,350 --> 00:24:27,960
variable into a template at runtime this

677
00:24:27,960 --> 00:24:29,130
is what its gonna look like this is

678
00:24:29,130 --> 00:24:31,050
called interpolation yeah double curly

679
00:24:31,050 --> 00:24:33,299
braces and essentially you put

680
00:24:33,299 --> 00:24:35,909
in there and if this is your variable

681
00:24:35,909 --> 00:24:39,269
you might realize that something not so

682
00:24:39,269 --> 00:24:40,700
good is probably about to happen

683
00:24:40,700 --> 00:24:42,629
somebody has provided through some

684
00:24:42,629 --> 00:24:44,909
untrusted data a review a title

685
00:24:44,909 --> 00:24:46,289
something like that and it says hello

686
00:24:46,289 --> 00:24:49,169
and then an image tag with a source of a

687
00:24:49,169 --> 00:24:51,450
non-existing file in the course and he's

688
00:24:51,450 --> 00:24:53,789
probably not gonna be you and then it

689
00:24:53,789 --> 00:24:55,139
says like oh my god if you can't find

690
00:24:55,139 --> 00:24:56,759
this file you have this own error

691
00:24:56,759 --> 00:24:58,860
handler that I expect you to exit it

692
00:24:58,860 --> 00:25:01,470
says alert 1 which is the least scary

693
00:25:01,470 --> 00:25:02,730
cross-site scripting attack vector you

694
00:25:02,730 --> 00:25:05,519
can ever find and so that kind of

695
00:25:05,519 --> 00:25:07,109
undersell the problem with it works

696
00:25:07,109 --> 00:25:08,429
really well to show you on the

697
00:25:08,429 --> 00:25:11,100
PowerPoint slide in reality the attacker

698
00:25:11,100 --> 00:25:12,119
is going to provide you some malicious

699
00:25:12,119 --> 00:25:14,220
code and the attacker has the ability to

700
00:25:14,220 --> 00:25:16,470
do whatever he wants the moment this

701
00:25:16,470 --> 00:25:18,509
code is alert one executes that's the

702
00:25:18,509 --> 00:25:20,369
moment data you can insert advanced

703
00:25:20,369 --> 00:25:22,529
payloads and that advanced payload is

704
00:25:22,529 --> 00:25:24,539
going to execute in the context of the

705
00:25:24,539 --> 00:25:26,519
angular application essentially this

706
00:25:26,519 --> 00:25:28,440
means of the attacker at that point can

707
00:25:28,440 --> 00:25:30,450
make the application to whatever the

708
00:25:30,450 --> 00:25:32,340
attacker wants send requests change

709
00:25:32,340 --> 00:25:34,889
divide steal credit card information

710
00:25:34,889 --> 00:25:37,499
which is a very popular technologies all

711
00:25:37,499 --> 00:25:41,519
of that is definitely possible so what's

712
00:25:41,519 --> 00:25:43,259
gonna happen here if we actually execute

713
00:25:43,259 --> 00:25:45,210
this in an angular application well we

714
00:25:45,210 --> 00:25:48,029
bind that variable but a variable it's

715
00:25:48,029 --> 00:25:50,039
gonna be put into the page and you will

716
00:25:50,039 --> 00:25:52,259
see something like this it's not gonna

717
00:25:52,259 --> 00:25:52,739
be pretty

718
00:25:52,739 --> 00:25:54,389
but the most important things are

719
00:25:54,389 --> 00:25:55,950
realized here it's not gonna execute

720
00:25:55,950 --> 00:25:58,590
this will not trigger the execution of

721
00:25:58,590 --> 00:26:00,480
the alert 1 the script code because

722
00:26:00,480 --> 00:26:02,879
anger is smarter than that and you're

723
00:26:02,879 --> 00:26:05,039
actually he knows that this is a kind of

724
00:26:05,039 --> 00:26:06,179
a dangerous pattern and putting

725
00:26:06,179 --> 00:26:07,739
adversity that to the page it looks like

726
00:26:07,739 --> 00:26:09,149
whoa this is going to result in

727
00:26:09,149 --> 00:26:10,799
cross-site scripting and it

728
00:26:10,799 --> 00:26:12,480
automatically decides I'm putting that

729
00:26:12,480 --> 00:26:15,359
stuff into an HTML complex between HTML

730
00:26:15,359 --> 00:26:16,649
elements so I'm going to make sure to

731
00:26:16,649 --> 00:26:19,019
the browser does not see this s code but

732
00:26:19,019 --> 00:26:21,539
see this ceases as data so this is

733
00:26:21,539 --> 00:26:23,399
called strict contextual escaping an

734
00:26:23,399 --> 00:26:24,840
angular world angular does this

735
00:26:24,840 --> 00:26:27,179
automatically angular has done this

736
00:26:27,179 --> 00:26:29,159
automatically since forever no one had

737
00:26:29,159 --> 00:26:31,409
the same thing angular 2 does it and the

738
00:26:31,409 --> 00:26:32,999
other frameworks do it as well react

739
00:26:32,999 --> 00:26:34,739
does it as well and who does it an ember

740
00:26:34,739 --> 00:26:36,989
they all know about these things and

741
00:26:36,989 --> 00:26:38,850
they can easily apply these protections

742
00:26:38,850 --> 00:26:41,730
ultimate which is good because it used

743
00:26:41,730 --> 00:26:43,350
to be a manual effort by the developer

744
00:26:43,350 --> 00:26:45,330
in server-side regeneration and how

745
00:26:45,330 --> 00:26:46,770
angular just does it

746
00:26:46,770 --> 00:26:48,780
magically but lots of magic but

747
00:26:48,780 --> 00:26:51,179
automatically by itself and that is

748
00:26:51,179 --> 00:26:52,080
pretty cool

749
00:26:52,080 --> 00:26:56,400
as a developer however in this case you

750
00:26:56,400 --> 00:26:57,510
probably don't want it image there

751
00:26:57,510 --> 00:26:59,220
that's good but if there would be

752
00:26:59,220 --> 00:27:01,500
something 9 HTML what if we would allow

753
00:27:01,500 --> 00:27:04,440
the user to use some bold or italic tags

754
00:27:04,440 --> 00:27:06,870
in their review this is not going to

755
00:27:06,870 --> 00:27:08,160
look very pretty because it's going to

756
00:27:08,160 --> 00:27:10,890
show everything encoded as HTML elements

757
00:27:10,890 --> 00:27:13,080
which is probably gonna piss off all the

758
00:27:13,080 --> 00:27:16,380
users like we want to use H naught X but

759
00:27:16,380 --> 00:27:18,270
again and we can use a different

760
00:27:18,270 --> 00:27:20,520
mechanism so let's move on to example

761
00:27:20,520 --> 00:27:23,160
number two here we have a way to bind

762
00:27:23,160 --> 00:27:25,679
this to inner HTML so what we can do now

763
00:27:25,679 --> 00:27:27,059
is we can tell dangle or no and I don't

764
00:27:27,059 --> 00:27:29,040
say go to stuff actually want you to put

765
00:27:29,040 --> 00:27:31,650
that data as HTML inside that it and

766
00:27:31,650 --> 00:27:34,620
that's what we do here which mean square

767
00:27:34,620 --> 00:27:36,390
brackets and then inner HTML property

768
00:27:36,390 --> 00:27:38,570
and we find that variable name together

769
00:27:38,570 --> 00:27:41,910
so here's our input again you can see

770
00:27:41,910 --> 00:27:43,890
that nice meaty hello bowl now to make

771
00:27:43,890 --> 00:27:46,590
sure we can see the effectiveness and we

772
00:27:46,590 --> 00:27:48,809
have our same image tag of our

773
00:27:48,809 --> 00:27:51,270
non-existing Millikan's my on error

774
00:27:51,270 --> 00:27:53,910
alert handle and if you put this into

775
00:27:53,910 --> 00:27:56,520
the page this is what's going to happen

776
00:27:56,520 --> 00:27:58,559
so essentially angular is going to

777
00:27:58,559 --> 00:28:00,059
render this you can see the hello is

778
00:28:00,059 --> 00:28:01,380
polled the question mark it's not

779
00:28:01,380 --> 00:28:02,790
because it's outside the both legs so

780
00:28:02,790 --> 00:28:04,800
the both legs are there you can see the

781
00:28:04,800 --> 00:28:07,559
image tags are there but there's no papa

782
00:28:07,559 --> 00:28:10,650
where's my work on that's essentially a

783
00:28:10,650 --> 00:28:12,450
good thing because angler again knows

784
00:28:12,450 --> 00:28:14,100
what you're doing angular it's like wait

785
00:28:14,100 --> 00:28:16,260
a minute you're putting stuff inside

786
00:28:16,260 --> 00:28:19,140
inner HTML and that's eventually gonna

787
00:28:19,140 --> 00:28:21,840
execute script code so that is really

788
00:28:21,840 --> 00:28:22,679
really dangerous

789
00:28:22,679 --> 00:28:24,600
and then angular 1 angular used to

790
00:28:24,600 --> 00:28:26,400
refuse to do that thing was like no I

791
00:28:26,400 --> 00:28:28,350
will not do that and it will give you

792
00:28:28,350 --> 00:28:29,730
like a very big warning saying this

793
00:28:29,730 --> 00:28:32,100
really really insecure and you should

794
00:28:32,100 --> 00:28:33,720
find a better way of doing that the

795
00:28:33,720 --> 00:28:35,700
tango or to anger since like you know

796
00:28:35,700 --> 00:28:37,830
what I know what you intend to do I know

797
00:28:37,830 --> 00:28:39,660
you intend to put some data in there and

798
00:28:39,660 --> 00:28:40,890
you want something on code so that's

799
00:28:40,890 --> 00:28:41,640
totally fine

800
00:28:41,640 --> 00:28:43,700
let me sanitize this for you and

801
00:28:43,700 --> 00:28:46,080
sanitization essentially means angular

802
00:28:46,080 --> 00:28:47,730
is gonna look at that date that is going

803
00:28:47,730 --> 00:28:49,830
to decide what is safe to be in there

804
00:28:49,830 --> 00:28:51,780
and what is not safe and it's gonna look

805
00:28:51,780 --> 00:28:53,850
at the poll like like both yeah that's

806
00:28:53,850 --> 00:28:55,350
totally fine muffin basket

807
00:28:55,350 --> 00:28:58,080
images well images are pretty cool so

808
00:28:58,080 --> 00:28:59,580
sometimes we actually want images so

809
00:28:59,580 --> 00:29:01,530
Charlotte lets a lot of images and

810
00:29:01,530 --> 00:29:02,580
that's going to look at every attribute

811
00:29:02,580 --> 00:29:04,740
of that image that one has our scene yes

812
00:29:04,740 --> 00:29:06,660
I know what this thing is so as RC you

813
00:29:06,660 --> 00:29:08,790
that unicorns of PNG that's totally fine

814
00:29:08,790 --> 00:29:10,860
and it's going to look at on error in a

815
00:29:10,860 --> 00:29:12,930
Cell fat wall I know about this on-air

816
00:29:12,930 --> 00:29:15,150
thing but I at least know it's not safe

817
00:29:15,150 --> 00:29:17,730
to be put into a page so I'm gonna take

818
00:29:17,730 --> 00:29:19,500
out that dangerous attribute and I'm

819
00:29:19,500 --> 00:29:21,180
going to leave everything else untouched

820
00:29:21,180 --> 00:29:22,980
that's sanitization that's what's

821
00:29:22,980 --> 00:29:25,430
happening here and this is on by default

822
00:29:25,430 --> 00:29:27,870
this means that as a developer if you

823
00:29:27,870 --> 00:29:29,430
write code like this angular is like

824
00:29:29,430 --> 00:29:31,320
I've got your back I'm gonna protect you

825
00:29:31,320 --> 00:29:33,380
against cross-site scripting and that is

826
00:29:33,380 --> 00:29:36,600
absolutely amazing and honestly angular

827
00:29:36,600 --> 00:29:38,550
is the only JavaScript family that I

828
00:29:38,550 --> 00:29:40,410
know that it does this the other ones do

829
00:29:40,410 --> 00:29:42,420
not offer this out of the box they

830
00:29:42,420 --> 00:29:43,920
require you to do come through some

831
00:29:43,920 --> 00:29:46,200
extra hoops to include a sanitizer here

832
00:29:46,200 --> 00:29:47,880
on and pushed their data through there

833
00:29:47,880 --> 00:29:49,800
to make sure it's safe and an angular it

834
00:29:49,800 --> 00:29:53,280
just happens so we commit to a very nice

835
00:29:53,280 --> 00:29:54,810
over you here what you need to do to

836
00:29:54,810 --> 00:29:56,810
avoid cross of scripting and angular and

837
00:29:56,810 --> 00:29:59,430
advice number one is get out of the way

838
00:29:59,430 --> 00:30:01,860
essentially let angular do whatever it

839
00:30:01,860 --> 00:30:03,570
does because angular is really good at

840
00:30:03,570 --> 00:30:05,700
doing these things and it should really

841
00:30:05,700 --> 00:30:07,770
really allow angular to handle these

842
00:30:07,770 --> 00:30:09,900
things for you so if you do things the

843
00:30:09,900 --> 00:30:12,690
proper angular way angular has you're

844
00:30:12,690 --> 00:30:14,370
right and this holds for more than

845
00:30:14,370 --> 00:30:16,650
simply bind it to inner HTML and

846
00:30:16,650 --> 00:30:17,940
interpolation because here's another

847
00:30:17,940 --> 00:30:20,970
example of putting a JavaScript URL

848
00:30:20,970 --> 00:30:27,440
inside inside a link and this is a

849
00:30:27,440 --> 00:30:29,940
mistake in a code example my apologies

850
00:30:29,940 --> 00:30:33,030
I'm gonna fix that in a PDF help put

851
00:30:33,030 --> 00:30:33,690
online

852
00:30:33,690 --> 00:30:37,650
that's a copy-paste error of mine but

853
00:30:37,650 --> 00:30:39,570
essentially the result is correct that

854
00:30:39,570 --> 00:30:41,670
the yellow box if this would have an

855
00:30:41,670 --> 00:30:42,810
angular code upfront

856
00:30:42,810 --> 00:30:45,660
the yellow box would be the result of

857
00:30:45,660 --> 00:30:48,180
pushing a dangerous URL into an

858
00:30:48,180 --> 00:30:49,860
eight-track attribute so essentially

859
00:30:49,860 --> 00:30:51,960
what's gonna happen there is that angle

860
00:30:51,960 --> 00:30:54,060
will detect like hey I'm putting a value

861
00:30:54,060 --> 00:30:56,490
in an address of a link and if you give

862
00:30:56,490 --> 00:30:58,380
it a JavaScript URL that's potentially

863
00:30:58,380 --> 00:31:00,240
very dangerous so what I'm gonna do is

864
00:31:00,240 --> 00:31:01,650
I'm going to ensure that this will not

865
00:31:01,650 --> 00:31:03,870
happen and again angler protects you in

866
00:31:03,870 --> 00:31:05,910
this case if you're not automatically

867
00:31:05,910 --> 00:31:07,320
fix need also it's gonna give you a

868
00:31:07,320 --> 00:31:09,220
warning but hey I'm with you

869
00:31:09,220 --> 00:31:12,520
put this value in that variable and it

870
00:31:12,520 --> 00:31:16,270
fixes this for you again angular has

871
00:31:16,270 --> 00:31:18,250
your back as long as you do things the

872
00:31:18,250 --> 00:31:19,840
angular way which is binding to the

873
00:31:19,840 --> 00:31:22,299
square brackets a traffic ticket

874
00:31:22,299 --> 00:31:23,880
but again I'm going to fix that slide

875
00:31:23,880 --> 00:31:26,020
right after the talk so if you download

876
00:31:26,020 --> 00:31:28,480
PDF later tonight you can you know have

877
00:31:28,480 --> 00:31:33,240
the proper code snippet be number one or

878
00:31:33,240 --> 00:31:35,260
consideration number one get out of the

879
00:31:35,260 --> 00:31:36,870
way letting go do what it does best

880
00:31:36,870 --> 00:31:39,370
there's a few more is four in total so

881
00:31:39,370 --> 00:31:41,830
the second one is don't use a function

882
00:31:41,830 --> 00:31:43,120
or a set of functions called

883
00:31:43,120 --> 00:31:46,840
bypass security trust HTML or trust URL

884
00:31:46,840 --> 00:31:49,059
or whatever that's a really really

885
00:31:49,059 --> 00:31:50,950
really important thing and fortunately

886
00:31:50,950 --> 00:31:53,350
the Delta functions bypass security so

887
00:31:53,350 --> 00:31:55,030
here's what that means in practice if

888
00:31:55,030 --> 00:31:56,350
you want to find something in your HTML

889
00:31:56,350 --> 00:31:58,600
you can put it through a function called

890
00:31:58,600 --> 00:32:01,650
bypass security first and if you do this

891
00:32:01,650 --> 00:32:04,090
you are in trouble because when you do

892
00:32:04,090 --> 00:32:05,830
this and with our example from before

893
00:32:05,830 --> 00:32:07,720
that is going to happen but essentially

894
00:32:07,720 --> 00:32:10,150
this is a very big problem that's why

895
00:32:10,150 --> 00:32:12,280
it's called bypass security simply tells

896
00:32:12,280 --> 00:32:15,010
angular this value is saved you can put

897
00:32:15,010 --> 00:32:16,570
it inside the page without having to

898
00:32:16,570 --> 00:32:17,980
worry about whatever is going to happen

899
00:32:17,980 --> 00:32:20,140
again so don't sanitize it just trust me

900
00:32:20,140 --> 00:32:22,929
I'm good and this is not how you

901
00:32:22,929 --> 00:32:24,280
supposed to use that function this

902
00:32:24,280 --> 00:32:26,080
function is intended to be used with

903
00:32:26,080 --> 00:32:28,299
static data only if you wanna put a

904
00:32:28,299 --> 00:32:30,240
snippet of HTML directly into the page

905
00:32:30,240 --> 00:32:32,169
but you have to read in that snippet

906
00:32:32,169 --> 00:32:35,169
yourself development time that's gonna

907
00:32:35,169 --> 00:32:37,150
be a user legitimate use case to use a

908
00:32:37,150 --> 00:32:39,130
function but should never ever use that

909
00:32:39,130 --> 00:32:41,409
function for anything untrusted anything

910
00:32:41,409 --> 00:32:42,940
you don't know what the data actually

911
00:32:42,940 --> 00:32:44,530
contains because this is going to open

912
00:32:44,530 --> 00:32:45,880
your application up to cross-site

913
00:32:45,880 --> 00:32:46,360
scripting

914
00:32:46,360 --> 00:32:49,600
it's a wide-open fallibility and the

915
00:32:49,600 --> 00:32:51,250
reason they call this bypass security is

916
00:32:51,250 --> 00:32:53,169
because an angular 1 or simply called

917
00:32:53,169 --> 00:32:56,049
trust HTML or trust s HTML and it

918
00:32:56,049 --> 00:32:57,850
confused some people some people were

919
00:32:57,850 --> 00:32:59,080
confused about the fact that it actually

920
00:32:59,080 --> 00:33:01,750
didn't trust while being sanitized or do

921
00:33:01,750 --> 00:33:03,520
anything to the data it simply marked it

922
00:33:03,520 --> 00:33:05,740
safe and that's why they explicitly said

923
00:33:05,740 --> 00:33:07,720
let's call bypass security so if you see

924
00:33:07,720 --> 00:33:09,190
this on stackoverflow and some it tells

925
00:33:09,190 --> 00:33:11,169
you this is for security you now know

926
00:33:11,169 --> 00:33:13,059
like you leave like a security you know

927
00:33:13,059 --> 00:33:14,950
it's not gonna be for security and you

928
00:33:14,950 --> 00:33:16,059
need to read the compeition

929
00:33:16,059 --> 00:33:18,490
about what's going on so don't use these

930
00:33:18,490 --> 00:33:20,590
function untrusted data and again you're

931
00:33:20,590 --> 00:33:22,490
good to go

932
00:33:22,490 --> 00:33:26,960
I turn the tree let angular do what it

933
00:33:26,960 --> 00:33:28,640
does but make sure angular has the

934
00:33:28,640 --> 00:33:30,620
ability to do that so if you are

935
00:33:30,620 --> 00:33:32,960
starting to use dominate the execute

936
00:33:32,960 --> 00:33:34,970
access elements directly in the browser

937
00:33:34,970 --> 00:33:36,680
without going through the angular if I

938
00:33:36,680 --> 00:33:38,120
said of course angular will not be in

939
00:33:38,120 --> 00:33:39,410
the mix angle will not be able to

940
00:33:39,410 --> 00:33:41,300
protect you same thing for third-party

941
00:33:41,300 --> 00:33:42,920
libraries if you are using things like

942
00:33:42,920 --> 00:33:44,840
jQuery alongside angular and you put

943
00:33:44,840 --> 00:33:46,970
some stuff into the page the jQuery

944
00:33:46,970 --> 00:33:49,070
functions is that angular angle will not

945
00:33:49,070 --> 00:33:50,480
be able to do it you'll be able to

946
00:33:50,480 --> 00:33:52,070
protect you because I know it's simply

947
00:33:52,070 --> 00:33:54,590
not in them so don't do that it's a very

948
00:33:54,590 --> 00:33:56,180
very important consideration again and

949
00:33:56,180 --> 00:33:58,250
don't mix angular with other things

950
00:33:58,250 --> 00:33:59,870
because angular needs to be in the loop

951
00:33:59,870 --> 00:34:03,080
to be able to protected and the final

952
00:34:03,080 --> 00:34:05,720
thing is avoid even user control over

953
00:34:05,720 --> 00:34:07,880
resource URL and that's kind of a tricky

954
00:34:07,880 --> 00:34:10,460
problem and that's one area or angular

955
00:34:10,460 --> 00:34:12,409
can not automatically protect you

956
00:34:12,409 --> 00:34:14,090
because angular does not know the

957
00:34:14,090 --> 00:34:16,429
intentions of your application does not

958
00:34:16,429 --> 00:34:18,469
know what's going to happen and one

959
00:34:18,469 --> 00:34:20,600
example I have one slide on the small

960
00:34:20,600 --> 00:34:23,600
side and one example is an iframe so

961
00:34:23,600 --> 00:34:25,100
what's good have is you can have an

962
00:34:25,100 --> 00:34:27,139
iframe with a resource that needs to be

963
00:34:27,139 --> 00:34:28,969
loaded and you can define that resource

964
00:34:28,969 --> 00:34:30,440
in the variables you can say like hey

965
00:34:30,440 --> 00:34:32,210
there's this variable called my frame

966
00:34:32,210 --> 00:34:33,739
URL and I'm gonna put that into the

967
00:34:33,739 --> 00:34:35,870
source attribute and we are good to go

968
00:34:35,870 --> 00:34:38,690
and if you give that legitimate he wrote

969
00:34:38,690 --> 00:34:40,429
something on YouTube maybe this live

970
00:34:40,429 --> 00:34:43,010
stream I also don't know what video I

971
00:34:43,010 --> 00:34:45,770
use there so a nice surprise you see

972
00:34:45,770 --> 00:34:48,920
whatever that leaf points to but that

973
00:34:48,920 --> 00:34:52,330
might be one way of doing it of course

974
00:34:52,330 --> 00:34:55,130
if this is if this variable is about to

975
00:34:55,130 --> 00:34:56,600
follow the user nothing stops the user

976
00:34:56,600 --> 00:34:58,310
from giving you an evil hero like hey

977
00:34:58,310 --> 00:35:00,290
load something from evil example film

978
00:35:00,290 --> 00:35:03,050
which can be got knows what that kind of

979
00:35:03,050 --> 00:35:05,240
video so the user might use this to

980
00:35:05,240 --> 00:35:07,310
redraw your fitness for its own which is

981
00:35:07,310 --> 00:35:10,040
not something and in this case angler

982
00:35:10,040 --> 00:35:11,630
actually doesn't know where you want to

983
00:35:11,630 --> 00:35:13,130
lock resource from how would I know

984
00:35:13,130 --> 00:35:14,660
whether YouTube is allowed or not maybe

985
00:35:14,660 --> 00:35:16,310
you actually hate YouTube and you only

986
00:35:16,310 --> 00:35:18,230
wanna include Vimeo links that might be

987
00:35:18,230 --> 00:35:20,210
absolutely legitimate for your

988
00:35:20,210 --> 00:35:22,100
application who knows so in this case

989
00:35:22,100 --> 00:35:24,110
angler cannot automatically cipher keys

990
00:35:24,110 --> 00:35:26,030
is safe or not and anyways when you give

991
00:35:26,030 --> 00:35:27,890
him an error we must be like you know no

992
00:35:27,890 --> 00:35:31,280
I am NOT going to put this value in the

993
00:35:31,280 --> 00:35:33,800
Dom because I know this is unsafe it's a

994
00:35:33,800 --> 00:35:35,720
resource hero complex I have no idea

995
00:35:35,720 --> 00:35:36,320
what you actually

996
00:35:36,320 --> 00:35:38,180
time to do but I'm not going to do that

997
00:35:38,180 --> 00:35:40,460
for you and that's essentially what

998
00:35:40,460 --> 00:35:42,740
happens here this means that if you

999
00:35:42,740 --> 00:35:44,540
actually need this feature you'll have

1000
00:35:44,540 --> 00:35:46,970
to do some work yourself this the only

1001
00:35:46,970 --> 00:35:48,710
place where you have to do that if

1002
00:35:48,710 --> 00:35:50,140
you're building angular applications

1003
00:35:50,140 --> 00:35:52,700
honestly the best thing you can do there

1004
00:35:52,700 --> 00:35:54,890
is not to give the user full control

1005
00:35:54,890 --> 00:35:57,230
over its URL there's no reason you

1006
00:35:57,230 --> 00:35:58,130
should specify

1007
00:35:58,130 --> 00:36:00,500
HPS course let's let you to that we need

1008
00:36:00,500 --> 00:36:02,780
something something if you know you want

1009
00:36:02,780 --> 00:36:04,550
to include a YouTube video so what you

1010
00:36:04,550 --> 00:36:07,160
can do there simply build something like

1011
00:36:07,160 --> 00:36:09,380
this build a function that says get

1012
00:36:09,380 --> 00:36:11,120
youtube video and it takes an input

1013
00:36:11,120 --> 00:36:13,850
string as input and it outputs a safe

1014
00:36:13,850 --> 00:36:15,230
resource here I'll let you connect we

1015
00:36:15,230 --> 00:36:17,330
use what you can do here's instead of

1016
00:36:17,330 --> 00:36:19,100
even if user full control over if you

1017
00:36:19,100 --> 00:36:20,990
are simply given control over the

1018
00:36:20,990 --> 00:36:22,760
identifier and you fix everything else

1019
00:36:22,760 --> 00:36:25,070
so in case you wanna add that stuff here

1020
00:36:25,070 --> 00:36:26,960
you load it from YouTube function but

1021
00:36:26,960 --> 00:36:29,720
and we simply append the input to that

1022
00:36:29,720 --> 00:36:32,990
and make sure we can put it into the

1023
00:36:32,990 --> 00:36:35,840
page we also to make sure this is

1024
00:36:35,840 --> 00:36:37,310
something I always recommend you better

1025
00:36:37,310 --> 00:36:39,290
keep safe and sorry we also run it

1026
00:36:39,290 --> 00:36:40,730
through the sanitizer for euros to

1027
00:36:40,730 --> 00:36:43,400
ensure that there's no strange things

1028
00:36:43,400 --> 00:36:45,410
happen to ensure that the Euro will not

1029
00:36:45,410 --> 00:36:47,120
trigger the execution of JavaScript or

1030
00:36:47,120 --> 00:36:49,310
something like that this is this case

1031
00:36:49,310 --> 00:36:52,520
probably not necessary because you fix

1032
00:36:52,520 --> 00:36:54,530
the host but it never hurts to make sure

1033
00:36:54,530 --> 00:36:56,420
angler has the ability to perfectly

1034
00:36:56,420 --> 00:36:59,000
there and slow but this is the only

1035
00:36:59,000 --> 00:37:00,800
piece of code you have to write we make

1036
00:37:00,800 --> 00:37:03,650
you source your own sport of course in

1037
00:37:03,650 --> 00:37:05,270
more advanced scenarios if you have a

1038
00:37:05,270 --> 00:37:06,770
lot of horses you want to allow you're

1039
00:37:06,770 --> 00:37:08,450
gonna have to do some URL matching I'm

1040
00:37:08,450 --> 00:37:10,040
not gonna go into that here it's a very

1041
00:37:10,040 --> 00:37:12,400
complex topic something that's often

1042
00:37:12,400 --> 00:37:16,280
wrong but also there we have to take

1043
00:37:16,280 --> 00:37:19,850
care to make all of this work but

1044
00:37:19,850 --> 00:37:22,160
overall angular is pretty good at

1045
00:37:22,160 --> 00:37:23,690
protecting you and I'm going to do is

1046
00:37:23,690 --> 00:37:25,520
actually even better because it comes to

1047
00:37:25,520 --> 00:37:28,100
the mode of AoE which is ahead of time

1048
00:37:28,100 --> 00:37:29,870
compilation and ad of time compilation

1049
00:37:29,870 --> 00:37:32,150
compiles the templates into JavaScript

1050
00:37:32,150 --> 00:37:33,890
code before pushing them to the browser

1051
00:37:33,890 --> 00:37:35,570
we do this at the dumb time when there's

1052
00:37:35,570 --> 00:37:38,780
no data to avoid certain subtle effects

1053
00:37:38,780 --> 00:37:41,420
like template injection which are a bit

1054
00:37:41,420 --> 00:37:43,370
too advanced to talk about but what you

1055
00:37:43,370 --> 00:37:45,440
should know is you should use a or D for

1056
00:37:45,440 --> 00:37:46,880
all your angular applications because

1057
00:37:46,880 --> 00:37:48,890
not only is it more secure it's also

1058
00:37:48,890 --> 00:37:50,220
insanely fast

1059
00:37:50,220 --> 00:37:51,660
as well so this is highly recommended

1060
00:37:51,660 --> 00:37:54,180
and again that's something a lot of

1061
00:37:54,180 --> 00:37:56,160
frameworks are doing when they are being

1062
00:37:56,160 --> 00:37:58,980
compiled before they are deployed and

1063
00:37:58,980 --> 00:38:01,580
that brings us to the overview here

1064
00:38:01,580 --> 00:38:04,349
cross-site scripting is automatically

1065
00:38:04,349 --> 00:38:06,660
handled by angular which is awesome the

1066
00:38:06,660 --> 00:38:08,460
only thing you need to do is to do

1067
00:38:08,460 --> 00:38:11,760
things the angular rate don't use bypass

1068
00:38:11,760 --> 00:38:14,310
security whatever functions make sure

1069
00:38:14,310 --> 00:38:15,720
your knees are zeros are safe and

1070
00:38:15,720 --> 00:38:17,880
evenings ahead of time compilation and

1071
00:38:17,880 --> 00:38:20,160
essentially you are good to go and that

1072
00:38:20,160 --> 00:38:22,950
is one of the reasons I really really

1073
00:38:22,950 --> 00:38:24,930
like angular because it does so much for

1074
00:38:24,930 --> 00:38:27,300
you out of the box with regards to

1075
00:38:27,300 --> 00:38:30,930
cross-site scripting all right for the

1076
00:38:30,930 --> 00:38:32,690
final topic I will talk a bit about

1077
00:38:32,690 --> 00:38:40,490
javascript lately there have been some

1078
00:38:40,490 --> 00:38:43,740
challenges with JavaScript and we've

1079
00:38:43,740 --> 00:38:46,380
seen these news stories about hangers

1080
00:38:46,380 --> 00:38:47,880
affecting companies like British Airways

1081
00:38:47,880 --> 00:38:50,369
or Ticketmaster or whatever and these

1082
00:38:50,369 --> 00:38:51,900
group of attackers fell from each car

1083
00:38:51,900 --> 00:38:54,470
because it started with Magento and they

1084
00:38:54,470 --> 00:38:56,520
targeted the cart page where you can

1085
00:38:56,520 --> 00:38:57,630
actually grab credit card information

1086
00:38:57,630 --> 00:38:59,280
that essentially their entire goal is

1087
00:38:59,280 --> 00:39:01,109
stealing as much credit card information

1088
00:39:01,109 --> 00:39:04,170
as possible why am I talking about this

1089
00:39:04,170 --> 00:39:07,080
because it's actually a pretty important

1090
00:39:07,080 --> 00:39:09,210
attack effective not only because

1091
00:39:09,210 --> 00:39:10,560
there's a lot of data that can be stolen

1092
00:39:10,560 --> 00:39:12,270
through JavaScript but because it's

1093
00:39:12,270 --> 00:39:13,619
really hard to defend against attacks

1094
00:39:13,619 --> 00:39:16,650
like it's because they they are clean

1095
00:39:16,650 --> 00:39:19,320
they are quite sneaky so in the British

1096
00:39:19,320 --> 00:39:21,240
Airways games they the attackers added

1097
00:39:21,240 --> 00:39:23,760
22 lines of code to the library hosted

1098
00:39:23,760 --> 00:39:26,369
on a server somewhere running at which

1099
00:39:26,369 --> 00:39:29,670
errors is 22 lines of code for enough to

1100
00:39:29,670 --> 00:39:32,099
steal millions of people's credit card

1101
00:39:32,099 --> 00:39:34,530
information which resulted in major data

1102
00:39:34,530 --> 00:39:37,970
breach and big fine and all of that and

1103
00:39:37,970 --> 00:39:40,650
know this would have been preventable

1104
00:39:40,650 --> 00:39:43,560
because the code that's Bill Garrett

1105
00:39:43,560 --> 00:39:46,290
Swasey was kind of static code it hadn't

1106
00:39:46,290 --> 00:39:49,920
been changed though since 2012 and then

1107
00:39:49,920 --> 00:39:52,140
somebody changed in 2018 I have

1108
00:39:52,140 --> 00:39:53,820
different lines of code and caused a

1109
00:39:53,820 --> 00:39:56,099
major drop so what could a great book

1110
00:39:56,099 --> 00:39:58,290
sir what could British Aires have done

1111
00:39:58,290 --> 00:40:01,920
here it could have applied something got

1112
00:40:01,920 --> 00:40:03,200
some priests or something

1113
00:40:03,200 --> 00:40:05,510
so when you load a file from an external

1114
00:40:05,510 --> 00:40:07,339
server from a CDN or one of your

1115
00:40:07,339 --> 00:40:09,319
external servers doesn't matter when you

1116
00:40:09,319 --> 00:40:11,270
loaded the only thing you have is a

1117
00:40:11,270 --> 00:40:13,490
family you can tell the server I want

1118
00:40:13,490 --> 00:40:15,500
this particular JavaScript file but you

1119
00:40:15,500 --> 00:40:16,940
have no idea of what you're getting

1120
00:40:16,940 --> 00:40:18,500
you're getting whatever the server has

1121
00:40:18,500 --> 00:40:19,970
there maybe it's that original file

1122
00:40:19,970 --> 00:40:22,250
maybe it's file containing malware but

1123
00:40:22,250 --> 00:40:24,589
you honestly have no clue and whenever

1124
00:40:24,589 --> 00:40:26,270
it's included it kind of runs in your

1125
00:40:26,270 --> 00:40:28,490
application and to do with after once in

1126
00:40:28,490 --> 00:40:31,670
angular this would happen for every file

1127
00:40:31,670 --> 00:40:33,829
you include for example in your index of

1128
00:40:33,829 --> 00:40:35,390
HTML if you pull in some additional

1129
00:40:35,390 --> 00:40:38,270
libraries some UI tool some bootstrap or

1130
00:40:38,270 --> 00:40:40,730
whatever you're pulling that in from CDN

1131
00:40:40,730 --> 00:40:42,619
and you have no idea what you're getting

1132
00:40:42,619 --> 00:40:45,619
what you can do since for a couple of

1133
00:40:45,619 --> 00:40:47,270
years now is you can use something

1134
00:40:47,270 --> 00:40:48,650
called submit this or something

1135
00:40:48,650 --> 00:40:50,690
and one comes out is an ADD and

1136
00:40:50,690 --> 00:40:52,250
integrity attribute to the script F

1137
00:40:52,250 --> 00:40:54,020
whiskey the integrity attribute contains

1138
00:40:54,020 --> 00:40:56,270
the checksum of the file and you tell

1139
00:40:56,270 --> 00:40:57,710
the browser hey browser I actually

1140
00:40:57,710 --> 00:41:01,160
expect a file with contents that have

1141
00:41:01,160 --> 00:41:03,319
this checksum so whenever Grasim loads

1142
00:41:03,319 --> 00:41:05,750
the file data file on the CDN being

1143
00:41:05,750 --> 00:41:07,309
served is malicious it will not have

1144
00:41:07,309 --> 00:41:09,109
that checksum because you will not have

1145
00:41:09,109 --> 00:41:11,540
use that specific checksum so it

1146
00:41:11,540 --> 00:41:13,160
wouldn't detect that it is not in same

1147
00:41:13,160 --> 00:41:15,170
file and it will actually use below that

1148
00:41:15,170 --> 00:41:17,900
file so let me put this in the 33 terms

1149
00:41:17,900 --> 00:41:19,609
in the rich areas case what they could

1150
00:41:19,609 --> 00:41:20,690
have done as they could have loaded

1151
00:41:20,690 --> 00:41:22,040
their libraries it can take off yet

1152
00:41:22,040 --> 00:41:24,650
enabled it would at least checksum so

1153
00:41:24,650 --> 00:41:26,299
many broken to that server change that

1154
00:41:26,299 --> 00:41:27,680
file and the graph so we can say like

1155
00:41:27,680 --> 00:41:29,530
screw that I'm not loading that file

1156
00:41:29,530 --> 00:41:31,849
because that file has a different

1157
00:41:31,849 --> 00:41:33,589
checksum so this is not what I want to

1158
00:41:33,589 --> 00:41:35,290
do so no I will not do that

1159
00:41:35,290 --> 00:41:37,760
of course it's only really works well

1160
00:41:37,760 --> 00:41:39,710
for static language for things that

1161
00:41:39,710 --> 00:41:40,730
don't change all the time

1162
00:41:40,730 --> 00:41:42,230
because the moment you actually want to

1163
00:41:42,230 --> 00:41:43,309
change something it's going to break

1164
00:41:43,309 --> 00:41:45,349
every application that's using the

1165
00:41:45,349 --> 00:41:46,970
checksum but for a file that hasn't

1166
00:41:46,970 --> 00:41:49,460
changed in six years honestly if you use

1167
00:41:49,460 --> 00:41:51,020
proper version that you develop in the

1168
00:41:51,020 --> 00:41:52,339
problem and this should have been

1169
00:41:52,339 --> 00:41:56,599
deployed to fix that issue right here of

1170
00:41:56,599 --> 00:41:58,910
course I also know that angular

1171
00:41:58,910 --> 00:42:01,250
applications do not use too many script

1172
00:42:01,250 --> 00:42:03,049
inclusions anymore this used to be kind

1173
00:42:03,049 --> 00:42:04,670
of common in angular 1 applications but

1174
00:42:04,670 --> 00:42:06,770
in angular 2 a lot of things are added

1175
00:42:06,770 --> 00:42:08,960
at Build time it builds components and

1176
00:42:08,960 --> 00:42:11,059
we use dependencies and actually ways

1177
00:42:11,059 --> 00:42:14,869
that our application of those it turns

1178
00:42:14,869 --> 00:42:17,059
out that in a modern application

1179
00:42:17,059 --> 00:42:21,079
over 97% of code are dependencies but

1180
00:42:21,079 --> 00:42:22,429
essentially if you're building an

1181
00:42:22,429 --> 00:42:24,489
angular application you're pulling in

1182
00:42:24,489 --> 00:42:26,599
97% of code is going to be stuff you're

1183
00:42:26,599 --> 00:42:28,789
pulling from the internet from basically

1184
00:42:28,789 --> 00:42:32,839
God knows where and this seems like a

1185
00:42:32,839 --> 00:42:36,259
lot but shorten 97% is it really really

1186
00:42:36,259 --> 00:42:38,659
dead babies it's not that bad rightful I

1187
00:42:38,659 --> 00:42:41,569
can we run the numbers for angular so

1188
00:42:41,569 --> 00:42:43,759
what I did is I started a new angular

1189
00:42:43,759 --> 00:42:46,849
application using angular CLI ngu with a

1190
00:42:46,849 --> 00:42:48,469
clean application I'm gonna ask you some

1191
00:42:48,469 --> 00:42:50,469
questions like do you want routing sure

1192
00:42:50,469 --> 00:42:53,359
sure I wanna use style sheets let's use

1193
00:42:53,359 --> 00:42:57,199
sass for that and off we go and it's

1194
00:42:57,199 --> 00:42:58,159
gonna take a lot it's empty I'm

1195
00:42:58,159 --> 00:42:59,299
installing the background since you have

1196
00:42:59,299 --> 00:43:01,579
to take a while but after about 30

1197
00:43:01,579 --> 00:43:03,499
seconds it's gonna come back and tell

1198
00:43:03,499 --> 00:43:07,999
you that it added 1169 packages the

1199
00:43:07,999 --> 00:43:09,890
bootstrap you're seeing simple angular

1200
00:43:09,890 --> 00:43:11,569
application so now you're actually

1201
00:43:11,569 --> 00:43:14,559
running code from 1030 contributors

1202
00:43:14,559 --> 00:43:17,029
that's only people publishing NPM

1203
00:43:17,029 --> 00:43:19,069
packages it's not the actual we both

1204
00:43:19,069 --> 00:43:22,039
contributors that's kind of sickening to

1205
00:43:22,039 --> 00:43:24,559
be even that doesn't tell me very much

1206
00:43:24,559 --> 00:43:27,559
like a thousand packages river how bad

1207
00:43:27,559 --> 00:43:27,919
is that

1208
00:43:27,919 --> 00:43:30,079
music scope if you install another NPM

1209
00:43:30,079 --> 00:43:31,459
module you can actually count the lines

1210
00:43:31,459 --> 00:43:33,469
of code rippling and for these angular

1211
00:43:33,469 --> 00:43:35,119
dependencies for the node module for

1212
00:43:35,119 --> 00:43:37,130
wood for between annual project they're

1213
00:43:37,130 --> 00:43:38,689
pulling in two million three hundred

1214
00:43:38,689 --> 00:43:42,199
thirty six thousand lines of code and to

1215
00:43:42,199 --> 00:43:44,390
put it into complex you as developer at

1216
00:43:44,390 --> 00:43:45,439
this moment have written

1217
00:43:45,439 --> 00:43:47,390
zero of lines of code and your

1218
00:43:47,390 --> 00:43:49,039
application is already two million lines

1219
00:43:49,039 --> 00:43:50,869
of code that you're using as a

1220
00:43:50,869 --> 00:43:55,369
dependency and that is a major shift in

1221
00:43:55,369 --> 00:43:57,529
how we build applications and that is

1222
00:43:57,529 --> 00:43:59,749
something to be really scared of

1223
00:43:59,749 --> 00:44:01,969
actually I'm not saying it's by

1224
00:44:01,969 --> 00:44:03,829
definition bad because these libraries

1225
00:44:03,829 --> 00:44:06,019
are all good fail and enable you to do

1226
00:44:06,019 --> 00:44:07,369
these things but there's a lot of things

1227
00:44:07,369 --> 00:44:08,869
that can go wrong when you start

1228
00:44:08,869 --> 00:44:11,269
building applications like this it's

1229
00:44:11,269 --> 00:44:14,900
only one example from 2018 a library

1230
00:44:14,900 --> 00:44:17,029
hosted on NPM two million installations

1231
00:44:17,029 --> 00:44:18,799
and it contains all of a sudden it

1232
00:44:18,799 --> 00:44:20,900
contains a backdoor and his story

1233
00:44:20,900 --> 00:44:23,439
actually

1234
00:44:23,769 --> 00:44:25,969
family because essentially what happened

1235
00:44:25,969 --> 00:44:28,369
is there was this there was a developer

1236
00:44:28,369 --> 00:44:30,099
that actually talked lightweight running

1237
00:44:30,099 --> 00:44:32,410
maybe other people need to smoke any

1238
00:44:32,410 --> 00:44:34,479
publishing some have Gary and other

1239
00:44:34,479 --> 00:44:36,099
people actually didn't need it and start

1240
00:44:36,099 --> 00:44:38,049
using it and it's simply a lot of people

1241
00:44:38,049 --> 00:44:40,359
who really have utilized it but this

1242
00:44:40,359 --> 00:44:41,799
developer moved on he started doing

1243
00:44:41,799 --> 00:44:43,329
other things he never used a lot we

1244
00:44:43,329 --> 00:44:45,849
again so eventually he kind of let it

1245
00:44:45,849 --> 00:44:47,769
fade away like I'm not maintaining this

1246
00:44:47,769 --> 00:44:49,630
actively anymore I'm sure whatever it's

1247
00:44:49,630 --> 00:44:51,489
still there some people use it and then

1248
00:44:51,489 --> 00:44:53,739
another user comes along and asks like

1249
00:44:53,739 --> 00:44:56,229
hey I'm actually really enjoying this

1250
00:44:56,229 --> 00:44:57,400
lightly and I have some ideas for

1251
00:44:57,400 --> 00:45:00,130
updates and can help main thing that we

1252
00:45:00,130 --> 00:45:02,190
do you want that you want my help and

1253
00:45:02,190 --> 00:45:04,630
developers like yeah of course of course

1254
00:45:04,630 --> 00:45:07,089
it's open source yes I want help and he

1255
00:45:07,089 --> 00:45:09,670
gave the other user access to the source

1256
00:45:09,670 --> 00:45:11,229
code repo so he could actually start

1257
00:45:11,229 --> 00:45:13,720
contributing and maintaining that

1258
00:45:13,720 --> 00:45:15,880
lightly turns out this other user

1259
00:45:15,880 --> 00:45:17,349
pediment doesn't have very good

1260
00:45:17,349 --> 00:45:20,529
intentions and the actually pushed out

1261
00:45:20,529 --> 00:45:23,170
of malware opportunists and this is the

1262
00:45:23,170 --> 00:45:24,640
story blew up a lot of people right oh

1263
00:45:24,640 --> 00:45:26,109
my god how is this possible and this is

1264
00:45:26,109 --> 00:45:28,749
ridiculous and all of them and honestly

1265
00:45:28,749 --> 00:45:31,150
if you're using software to build your

1266
00:45:31,150 --> 00:45:32,799
applications and you were relying on

1267
00:45:32,799 --> 00:45:35,410
fall in the near face products then I

1268
00:45:35,410 --> 00:45:36,670
don't think you should be pissed at

1269
00:45:36,670 --> 00:45:38,229
those people for doing the best that

1270
00:45:38,229 --> 00:45:39,880
they can with their time they're all

1271
00:45:39,880 --> 00:45:41,589
volunteers this guy to build that

1272
00:45:41,589 --> 00:45:42,759
library in his free time

1273
00:45:42,759 --> 00:45:44,289
and what's mandating that in its crew

1274
00:45:44,289 --> 00:45:47,589
time so don't blame developers for that

1275
00:45:47,589 --> 00:45:49,450
that's one thing but this shows a bigger

1276
00:45:49,450 --> 00:45:50,589
problem and this shows that this

1277
00:45:50,589 --> 00:45:53,019
ecosystem is very little and it shows

1278
00:45:53,019 --> 00:45:55,569
that people actually actively try to

1279
00:45:55,569 --> 00:45:59,019
amuse them and it's getting worse so you

1280
00:45:59,019 --> 00:46:01,779
have these these attacks are rather

1281
00:46:01,779 --> 00:46:04,509
silly they're very basic

1282
00:46:04,509 --> 00:46:06,309
they're very easy to detect often and

1283
00:46:06,309 --> 00:46:07,719
they just try to hit as many

1284
00:46:07,719 --> 00:46:09,969
applications as possible probably

1285
00:46:09,969 --> 00:46:12,369
stealing something rather less less

1286
00:46:12,369 --> 00:46:14,829
useful information but recently and this

1287
00:46:14,829 --> 00:46:16,960
is from from about a month ago but a

1288
00:46:16,960 --> 00:46:18,880
month and a half ago you've seen other

1289
00:46:18,880 --> 00:46:21,069
cases where people are starting to

1290
00:46:21,069 --> 00:46:22,809
launch targeted thanks against specific

1291
00:46:22,809 --> 00:46:25,119
applications and here's a story that

1292
00:46:25,119 --> 00:46:26,469
shouldn't really scare the hell out of

1293
00:46:26,469 --> 00:46:29,950
you this is a story from an application

1294
00:46:29,950 --> 00:46:33,219
called the gamma wallet it's a crypto

1295
00:46:33,219 --> 00:46:34,779
currency wallet where you can keep a

1296
00:46:34,779 --> 00:46:37,599
track of your cryptocurrencies which

1297
00:46:37,599 --> 00:46:39,339
might go on a crazy right I honestly

1298
00:46:39,339 --> 00:46:41,650
thumbs all of it that close me but you I

1299
00:46:41,650 --> 00:46:44,069
feel doing that you actually know

1300
00:46:44,069 --> 00:46:46,239
what happened here is that a hacker this

1301
00:46:46,239 --> 00:46:47,920
was an open-source application hosted on

1302
00:46:47,920 --> 00:46:50,380
github and would see it and heckard in

1303
00:46:50,380 --> 00:46:53,109
this case acting as a good guy suggested

1304
00:46:53,109 --> 00:46:55,209
to add some features like hey wouldn't

1305
00:46:55,209 --> 00:46:56,619
it be cool it's an electron app it's

1306
00:46:56,619 --> 00:46:58,119
running on a desktop wouldn't be cool if

1307
00:46:58,119 --> 00:46:59,739
you had like neat with notifications if

1308
00:46:59,739 --> 00:47:01,479
you could integrate it to Mac OS or

1309
00:47:01,479 --> 00:47:03,130
Windows or whatever and show some actual

1310
00:47:03,130 --> 00:47:05,739
notification system so near that place

1311
00:47:05,739 --> 00:47:08,469
thing and we make the energy builders of

1312
00:47:08,469 --> 00:47:09,489
the application what yeah that's

1313
00:47:09,489 --> 00:47:11,709
actually really awesome so why don't you

1314
00:47:11,709 --> 00:47:13,809
build that and send us a bullet list and

1315
00:47:13,809 --> 00:47:15,940
the effect was like cool yeah I'm gonna

1316
00:47:15,940 --> 00:47:18,579
do that and he came back a couple of

1317
00:47:18,579 --> 00:47:19,979
days later like a week and a half later

1318
00:47:19,979 --> 00:47:22,509
he published the packets on NPM called

1319
00:47:22,509 --> 00:47:24,699
electron notify made it but actually did

1320
00:47:24,699 --> 00:47:25,390
exactly that

1321
00:47:25,390 --> 00:47:28,569
it essentially use the native OS hooks

1322
00:47:28,569 --> 00:47:30,759
to show some modifications talk little

1323
00:47:30,759 --> 00:47:33,219
did code everybody feel happy he pushed

1324
00:47:33,219 --> 00:47:35,259
out that pull request and they actually

1325
00:47:35,259 --> 00:47:37,119
integrated that into each application

1326
00:47:37,119 --> 00:47:40,029
March 8th this is two weeks after he

1327
00:47:40,029 --> 00:47:41,829
hang up the post to work on that here's

1328
00:47:41,829 --> 00:47:44,140
a pull request that's definitely a quick

1329
00:47:44,140 --> 00:47:45,640
turnaround time and everybody's even

1330
00:47:45,640 --> 00:47:48,609
happy seen the work publish it nothing

1331
00:47:48,609 --> 00:47:50,469
malicious to seven yet this is a

1332
00:47:50,469 --> 00:47:52,630
legitimate open source contribution by

1333
00:47:52,630 --> 00:47:56,019
its own someone on the engine and then

1334
00:47:56,019 --> 00:47:58,059
this package electron modified native

1335
00:47:58,059 --> 00:48:00,160
which is maintained by the attacker in

1336
00:48:00,160 --> 00:48:02,469
this case during collisions all of a

1337
00:48:02,469 --> 00:48:05,709
sudden it contains a piece of malicious

1338
00:48:05,709 --> 00:48:09,190
code now which is problematic but that's

1339
00:48:09,190 --> 00:48:11,739
how people manage after a while the

1340
00:48:11,739 --> 00:48:13,779
application pushes out a new version it

1341
00:48:13,779 --> 00:48:15,489
updates the dependencies a pool in the

1342
00:48:15,489 --> 00:48:16,930
new version of electron dot find native

1343
00:48:16,930 --> 00:48:19,509
and they're now running malware on the

1344
00:48:19,509 --> 00:48:22,109
actual application and the malware was

1345
00:48:22,109 --> 00:48:24,819
stealing the seeds to access your crypto

1346
00:48:24,819 --> 00:48:26,349
currency wallet and sending them to a

1347
00:48:26,349 --> 00:48:28,150
public server somewhere but it can be

1348
00:48:28,150 --> 00:48:29,709
collected and the attacker was just

1349
00:48:29,709 --> 00:48:31,690
sitting and waiting until he got as many

1350
00:48:31,690 --> 00:48:35,289
links to as many words as possible in

1351
00:48:35,289 --> 00:48:37,779
the meantime the MPM security actually

1352
00:48:37,779 --> 00:48:39,940
noticed something weird was going on but

1353
00:48:39,940 --> 00:48:41,890
he noticed that there was this malicious

1354
00:48:41,890 --> 00:48:43,869
update of the electing automated package

1355
00:48:43,869 --> 00:48:45,969
and they were like oh this is this is a

1356
00:48:45,969 --> 00:48:47,440
problem and they notified the company

1357
00:48:47,440 --> 00:48:49,299
about that like say like hey there's

1358
00:48:49,299 --> 00:48:50,680
something weird going on and they looked

1359
00:48:50,680 --> 00:48:53,559
into it and essentially I'm the kind of

1360
00:48:53,559 --> 00:48:55,390
panic because they're like they realized

1361
00:48:55,390 --> 00:48:56,930
what the model is doing the real axis

1362
00:48:56,930 --> 00:48:58,670
somebody was actively stealing access to

1363
00:48:58,670 --> 00:49:00,349
people's wallets I was about to steal

1364
00:49:00,349 --> 00:49:02,839
all of that money that's when they said

1365
00:49:02,839 --> 00:49:04,550
like you know what let's seal it

1366
00:49:04,550 --> 00:49:05,180
ourselves

1367
00:49:05,180 --> 00:49:06,920
and they actually exported the

1368
00:49:06,920 --> 00:49:08,450
vulnerability the attacker created to

1369
00:49:08,450 --> 00:49:10,460
steal everybody's money and put it in a

1370
00:49:10,460 --> 00:49:13,010
safe location so essentially they stole

1371
00:49:13,010 --> 00:49:14,450
from themselves they put it away and

1372
00:49:14,450 --> 00:49:15,829
they come back to YouTube to say like

1373
00:49:15,829 --> 00:49:17,990
yeah we kind of had this problem you

1374
00:49:17,990 --> 00:49:19,670
were about to get robbed essentially but

1375
00:49:19,670 --> 00:49:22,819
we took care of it we fixed it and we

1376
00:49:22,819 --> 00:49:24,650
have your money in a safe location you

1377
00:49:24,650 --> 00:49:27,559
can reclaim your wallet using this and

1378
00:49:27,559 --> 00:49:29,540
this procedure and off you go but this

1379
00:49:29,540 --> 00:49:31,250
is this shows a very dangerous pattern

1380
00:49:31,250 --> 00:49:33,260
this shows that essentially people who

1381
00:49:33,260 --> 00:49:35,420
are targeting real application speeds

1382
00:49:35,420 --> 00:49:37,819
but the night looking code and I'm

1383
00:49:37,819 --> 00:49:39,829
afterwards favored one of the nicest

1384
00:49:39,829 --> 00:49:41,510
malicious which is going to be really

1385
00:49:41,510 --> 00:49:43,849
hard to detect and in this effect it was

1386
00:49:43,849 --> 00:49:45,200
like a one-step this was a direct

1387
00:49:45,200 --> 00:49:47,720
dependency of the code mouth but what if

1388
00:49:47,720 --> 00:49:49,369
the attacker would have created a tree

1389
00:49:49,369 --> 00:49:51,349
with like three or four different steps

1390
00:49:51,349 --> 00:49:53,000
before the malicious package we have to

1391
00:49:53,000 --> 00:49:54,559
discover that would have been a major

1392
00:49:54,559 --> 00:49:57,740
problem and as application developers

1393
00:49:57,740 --> 00:50:00,040
this is really hard to defend against

1394
00:50:00,040 --> 00:50:02,809
because there's no checks on the whole

1395
00:50:02,809 --> 00:50:05,359
system there's no way to know when a

1396
00:50:05,359 --> 00:50:07,490
package turns malicious unless somebody

1397
00:50:07,490 --> 00:50:09,530
actually looks at it and decides like

1398
00:50:09,530 --> 00:50:11,150
whoa what the hell is this which in this

1399
00:50:11,150 --> 00:50:12,890
case was the NPM security team so they

1400
00:50:12,890 --> 00:50:15,079
do scan a lot of packages and they do

1401
00:50:15,079 --> 00:50:16,579
try to detect its many of these problems

1402
00:50:16,579 --> 00:50:18,260
and they can and in this case they

1403
00:50:18,260 --> 00:50:20,569
actually did found the problem and the

1404
00:50:20,569 --> 00:50:22,790
moment is found you know about it

1405
00:50:22,790 --> 00:50:24,140
because the moments these things are

1406
00:50:24,140 --> 00:50:27,230
found they are little published and

1407
00:50:27,230 --> 00:50:29,780
reported so we have tools like github

1408
00:50:29,780 --> 00:50:31,369
integrated dependency graph and can

1409
00:50:31,369 --> 00:50:33,170
actually make this work so github

1410
00:50:33,170 --> 00:50:34,700
connect you scan your packages in tell

1411
00:50:34,700 --> 00:50:37,160
you I paid you have a vulnerability in

1412
00:50:37,160 --> 00:50:40,849
your go and plus I mentioned the wasp in

1413
00:50:40,849 --> 00:50:42,470
the beginning from both of them for us

1414
00:50:42,470 --> 00:50:44,569
it has a similar tool called fancy check

1415
00:50:44,569 --> 00:50:45,770
which supports a couple of other

1416
00:50:45,770 --> 00:50:47,839
languages which can do very similar

1417
00:50:47,839 --> 00:50:50,299
things messy Sam is kind of getting

1418
00:50:50,299 --> 00:50:53,599
anxious now but don't worry Gus Nick the

1419
00:50:53,599 --> 00:50:55,730
host of this very nice live session

1420
00:50:55,730 --> 00:50:58,040
actually has a very great tool that does

1421
00:50:58,040 --> 00:51:00,770
things like that as well and they they

1422
00:51:00,770 --> 00:51:02,329
integrate very nicely really good people

1423
00:51:02,329 --> 00:51:04,700
I'm actually using their tool myself and

1424
00:51:04,700 --> 00:51:07,940
I'm definitely like that's the process

1425
00:51:07,940 --> 00:51:09,809
as well but yes

1426
00:51:09,809 --> 00:51:11,549
this the only way we can defend against

1427
00:51:11,549 --> 00:51:13,199
these kind things is by scanning for

1428
00:51:13,199 --> 00:51:15,599
known probabilities things people other

1429
00:51:15,599 --> 00:51:17,069
people have discovered and have

1430
00:51:17,069 --> 00:51:18,779
pre-ordered yes they're in the database

1431
00:51:18,779 --> 00:51:20,670
and they can be discovered and they you

1432
00:51:20,670 --> 00:51:22,319
can get notifications like hey you

1433
00:51:22,319 --> 00:51:23,369
actually haven't called a building you

1434
00:51:23,369 --> 00:51:24,689
probably want to fix their application

1435
00:51:24,689 --> 00:51:27,150
but for unknown vulnerabilities at the

1436
00:51:27,150 --> 00:51:29,459
moment there's no good solution yet and

1437
00:51:29,459 --> 00:51:32,130
this is one of the drawbacks of what

1438
00:51:32,130 --> 00:51:33,209
we're doing today and definitely

1439
00:51:33,209 --> 00:51:35,189
something that will become more and more

1440
00:51:35,189 --> 00:51:37,049
important in the next six to twelve

1441
00:51:37,049 --> 00:51:39,719
months that willing to do this take you

1442
00:51:39,719 --> 00:51:42,209
in so if you're dealing this is for me

1443
00:51:42,209 --> 00:51:44,189
this is number four mobility number one

1444
00:51:44,189 --> 00:51:46,890
because so many people are unaware of

1445
00:51:46,890 --> 00:51:48,839
this happening and you need to have the

1446
00:51:48,839 --> 00:51:51,180
proper processes in place if you're

1447
00:51:51,180 --> 00:51:52,799
including external javascript files this

1448
00:51:52,799 --> 00:51:54,599
means sub resource integrity is going to

1449
00:51:54,599 --> 00:51:57,150
save your ass one day so please use and

1450
00:51:57,150 --> 00:51:59,430
avoid it you need to set up dependency

1451
00:51:59,430 --> 00:52:00,900
checking for your applications for all

1452
00:52:00,900 --> 00:52:02,489
of them you need to get emails

1453
00:52:02,489 --> 00:52:03,900
immediately as a vulnerabilities

1454
00:52:03,900 --> 00:52:06,089
discovered and they also said you like

1455
00:52:06,089 --> 00:52:07,829
weekly reminders if you don't fix it

1456
00:52:07,829 --> 00:52:09,749
immediately and they keep harassing you

1457
00:52:09,749 --> 00:52:11,789
essentially until you do which is

1458
00:52:11,789 --> 00:52:14,400
actually what you want and finally you

1459
00:52:14,400 --> 00:52:17,309
need to have cycles to actually work on

1460
00:52:17,309 --> 00:52:18,900
this you need to be able to update your

1461
00:52:18,900 --> 00:52:20,640
applications immediately and many

1462
00:52:20,640 --> 00:52:22,380
companies are getting more and more

1463
00:52:22,380 --> 00:52:24,390
strict in that so many companies have

1464
00:52:24,390 --> 00:52:26,309
internal policies that say it's like hey

1465
00:52:26,309 --> 00:52:27,299
we need to be able to update

1466
00:52:27,299 --> 00:52:29,459
applications within 24 hours in case

1467
00:52:29,459 --> 00:52:31,799
some of these things get money that gets

1468
00:52:31,799 --> 00:52:34,559
public because this is really important

1469
00:52:34,559 --> 00:52:38,849
and honestly doing so in 24 hours is not

1470
00:52:38,849 --> 00:52:40,739
something you easily get done is it

1471
00:52:40,739 --> 00:52:42,299
something at the plan for up front you

1472
00:52:42,299 --> 00:52:43,859
have to decide who is responsible for

1473
00:52:43,859 --> 00:52:45,929
doing that and how you are going to

1474
00:52:45,929 --> 00:52:48,569
address these things in public but you

1475
00:52:48,569 --> 00:52:49,799
need to start worrying about that

1476
00:52:49,799 --> 00:52:51,420
because these effects are getting more

1477
00:52:51,420 --> 00:52:53,069
and more frequent and protected

1478
00:52:53,069 --> 00:52:54,689
protecting against enemies absolutely

1479
00:52:54,689 --> 00:52:57,509
absolutely necessary and that brings me

1480
00:52:57,509 --> 00:52:59,819
back to the slide I showed you in the

1481
00:52:59,819 --> 00:53:01,319
beginning so using components when you

1482
00:53:01,319 --> 00:53:02,789
don't know module this is definitely

1483
00:53:02,789 --> 00:53:06,119
number one if you ask me things like

1484
00:53:06,119 --> 00:53:07,799
authentication are also very very

1485
00:53:07,799 --> 00:53:10,920
important this is insanely complex topic

1486
00:53:10,920 --> 00:53:12,269
because there's so many options so many

1487
00:53:12,269 --> 00:53:14,130
trade-offs and especially if you cool it

1488
00:53:14,130 --> 00:53:17,069
a lot or I do see things get really

1489
00:53:17,069 --> 00:53:19,529
complex unity cross-site scripting and

1490
00:53:19,529 --> 00:53:20,969
angular is actually pretty good because

1491
00:53:20,969 --> 00:53:22,259
angular has you covered

1492
00:53:22,259 --> 00:53:24,100
it's a very important problem I

1493
00:53:24,100 --> 00:53:25,630
still need to know about the things not

1494
00:53:25,630 --> 00:53:27,400
to do and if you're using something else

1495
00:53:27,400 --> 00:53:29,890
on angular and listening in books great

1496
00:53:29,890 --> 00:53:31,260
work to admire a bit more effort for

1497
00:53:31,260 --> 00:53:33,520
incentivization part but they have the

1498
00:53:33,520 --> 00:53:38,740
encoding part access control

1499
00:53:38,740 --> 00:53:41,140
that's listen here it's not a problem

1500
00:53:41,140 --> 00:53:42,880
responsible you cannot do that on the

1501
00:53:42,880 --> 00:53:45,670
front end at all but it's about it

1502
00:53:45,670 --> 00:53:47,770
includes how to manage sessions or state

1503
00:53:47,770 --> 00:53:49,570
or I want to handle that so that that

1504
00:53:49,570 --> 00:53:51,910
hood plays a role again very complicated

1505
00:53:51,910 --> 00:53:53,230
if you start doing things with jobs

1506
00:53:53,230 --> 00:53:56,590
which might not work in ways like this

1507
00:53:56,590 --> 00:53:58,720
paperwork and finally sensitive lead

1508
00:53:58,720 --> 00:54:01,420
exposure we talked about HTTP which is

1509
00:54:01,420 --> 00:54:03,930
one if you're storing it on the client

1510
00:54:03,930 --> 00:54:06,190
definitely think about the sensitivity

1511
00:54:06,190 --> 00:54:07,990
of that they that think about encrypting

1512
00:54:07,990 --> 00:54:10,510
that data if necessary and things like

1513
00:54:10,510 --> 00:54:13,330
yeah and the other ones are relevant but

1514
00:54:13,330 --> 00:54:16,180
more back-end responsibilities then from

1515
00:54:16,180 --> 00:54:18,280
the response code it's once the order

1516
00:54:18,280 --> 00:54:22,750
here all right so let me wrap this up by

1517
00:54:22,750 --> 00:54:25,540
pointing you to a resource I'd build the

1518
00:54:25,540 --> 00:54:27,330
beauty cheat sheets for angular

1519
00:54:27,330 --> 00:54:29,440
specifically so angler and it was the

1520
00:54:29,440 --> 00:54:31,270
plan is in there with some details some

1521
00:54:31,270 --> 00:54:32,890
things to look out for your application

1522
00:54:32,890 --> 00:54:35,350
states to avoid there's a cheat sheet on

1523
00:54:35,350 --> 00:54:37,090
JSON web tokens as well if you're

1524
00:54:37,090 --> 00:54:39,160
working with that you should be aware of

1525
00:54:39,160 --> 00:54:41,440
those and there's a treaty on how to

1526
00:54:41,440 --> 00:54:43,570
keep data in a browser some patterns you

1527
00:54:43,570 --> 00:54:44,920
can use these are free

1528
00:54:44,920 --> 00:54:46,690
there's a sign-up form so you can get

1529
00:54:46,690 --> 00:54:48,190
updates of the two sheets which I push

1530
00:54:48,190 --> 00:54:51,340
out every few months but of course it's

1531
00:54:51,340 --> 00:54:53,260
also a link you need to sign up button

1532
00:54:53,260 --> 00:54:54,850
if you don't want to share your email

1533
00:54:54,850 --> 00:54:56,710
address that's totally fine let's grab

1534
00:54:56,710 --> 00:54:58,840
the GT and just come check it every

1535
00:54:58,840 --> 00:55:00,550
couple of months for an update so you

1536
00:55:00,550 --> 00:55:03,250
always have the latest for you and with

1537
00:55:03,250 --> 00:55:06,310
that I'm actually gonna shut up now for

1538
00:55:06,310 --> 00:55:08,290
a few seconds so you can follow me on

1539
00:55:08,290 --> 00:55:10,900
Twitter I do tweet about security so

1540
00:55:10,900 --> 00:55:12,880
that's going to be really useful with a

1541
00:55:12,880 --> 00:55:14,740
lot of useful resources that pass by so

1542
00:55:14,740 --> 00:55:17,380
you attacks some news that's going on

1543
00:55:17,380 --> 00:55:19,420
you'll feel the connector me on LinkedIn

1544
00:55:19,420 --> 00:55:20,890
or reach out to email if you have any

1545
00:55:20,890 --> 00:55:23,170
questions you're looking for training

1546
00:55:23,170 --> 00:55:25,270
specifically on modern applications feel

1547
00:55:25,270 --> 00:55:28,060
free to reach out to me as well and if

1548
00:55:28,060 --> 00:55:29,380
you have any questions I think we have

1549
00:55:29,380 --> 00:55:33,780
some time to answer those now right son

1550
00:55:34,080 --> 00:55:38,050
so yesterday so we've had quite a little

1551
00:55:38,050 --> 00:55:41,530
bit of chatter on the structure today

1552
00:55:41,530 --> 00:55:44,830
and so the questions being asked I think

1553
00:55:44,830 --> 00:55:46,180
some of them to cover that as you're

1554
00:55:46,180 --> 00:55:51,190
going through and I've got one about

1555
00:55:51,190 --> 00:55:52,810
your name how often do you get called

1556
00:55:52,810 --> 00:55:54,760
Philippe instead of Philippe and running

1557
00:55:54,760 --> 00:55:58,390
under bed on the way yes the name is

1558
00:55:58,390 --> 00:56:00,010
actually based on the friend

1559
00:56:00,010 --> 00:56:03,460
it's a French name so yeah I'm totally

1560
00:56:03,460 --> 00:56:08,530
you still suffering so one of the

1561
00:56:08,530 --> 00:56:10,780
questions that came in was actually

1562
00:56:10,780 --> 00:56:12,070
about sort of jobs for climbers in

1563
00:56:12,070 --> 00:56:15,339
general and it was from age and whatever

1564
00:56:15,339 --> 00:56:18,280
of many men and you would like to know

1565
00:56:18,280 --> 00:56:20,560
if and you know react or any other

1566
00:56:20,560 --> 00:56:21,970
JavaScript framework which one is the

1567
00:56:21,970 --> 00:56:24,099
safer in terms of and sort of

1568
00:56:24,099 --> 00:56:25,480
vulnerabilities and security and

1569
00:56:25,480 --> 00:56:29,349
mistakes within but that's a good pretty

1570
00:56:29,349 --> 00:56:32,170
good question I honestly I'm not really

1571
00:56:32,170 --> 00:56:34,359
aware of any major security holes in any

1572
00:56:34,359 --> 00:56:36,520
of these trailers so they're they're

1573
00:56:36,520 --> 00:56:38,980
built by it by good people like thieves

1574
00:56:38,980 --> 00:56:41,080
they're very actively maintained and

1575
00:56:41,080 --> 00:56:42,970
there hasn't been like oh my god the

1576
00:56:42,970 --> 00:56:45,580
houses in fire case that hasn't happened

1577
00:56:45,580 --> 00:56:47,560
yet so honestly I think that's pretty

1578
00:56:47,560 --> 00:56:50,530
good I personally like angler lists not

1579
00:56:50,530 --> 00:56:52,330
necessarily because they have these less

1580
00:56:52,330 --> 00:56:54,310
vulnerabilities but because they do more

1581
00:56:54,310 --> 00:56:56,619
out-of-the-box and they actually handle

1582
00:56:56,619 --> 00:56:58,930
more security so they're very active in

1583
00:56:58,930 --> 00:57:01,359
that but other than that I have to have

1584
00:57:01,359 --> 00:57:04,330
a little major from abilities in the

1585
00:57:04,330 --> 00:57:07,000
libraries itself there has been one case

1586
00:57:07,000 --> 00:57:12,250
in a reactor an addition to react the

1587
00:57:12,250 --> 00:57:12,849
redox

1588
00:57:12,849 --> 00:57:15,220
library had a vulnerable code snippet on

1589
00:57:15,220 --> 00:57:17,260
their website for a while which actually

1590
00:57:17,260 --> 00:57:19,900
did had a cross a scripting Pomodoro

1591
00:57:19,900 --> 00:57:23,200
ah that did happen but that not fix this

1592
00:57:23,200 --> 00:57:26,320
well and you don't notify about that as

1593
00:57:26,320 --> 00:57:28,330
well one of the other question was

1594
00:57:28,330 --> 00:57:30,010
actually around to you remember or know

1595
00:57:30,010 --> 00:57:31,510
of any security vulnerabilities in

1596
00:57:31,510 --> 00:57:35,020
angular so that question as well yeah

1597
00:57:35,020 --> 00:57:37,599
exactly so in angular 1 they try to add

1598
00:57:37,599 --> 00:57:38,950
additional security features which

1599
00:57:38,950 --> 00:57:41,140
turned out to be very hard to get right

1600
00:57:41,140 --> 00:57:42,790
so they've took that out again but I

1601
00:57:42,790 --> 00:57:45,430
wouldn't count those availability so no

1602
00:57:45,430 --> 00:57:47,610
today these frameworks are actually

1603
00:57:47,610 --> 00:57:50,290
amazing and then we have one from and

1604
00:57:50,290 --> 00:57:51,730
Kitty and she'd like to know if you have

1605
00:57:51,730 --> 00:57:53,590
any good security tool recommendations

1606
00:57:53,590 --> 00:57:55,150
for capturing sort of low-hanging fruit

1607
00:57:55,150 --> 00:57:57,930
with modern JavaScript applications oh

1608
00:57:57,930 --> 00:58:01,860
that's a that's a good question so um

1609
00:58:01,860 --> 00:58:03,460
honestly I don't have too much

1610
00:58:03,460 --> 00:58:06,010
experience with the commercial tools but

1611
00:58:06,010 --> 00:58:08,620
based on some discussions from a couple

1612
00:58:08,620 --> 00:58:10,630
of months ago it seems that most

1613
00:58:10,630 --> 00:58:12,490
commercial code scanning tools or

1614
00:58:12,490 --> 00:58:14,830
somewhere that are not really that great

1615
00:58:14,830 --> 00:58:16,900
at detecting problems in these

1616
00:58:16,900 --> 00:58:19,840
JavaScript applications they might be

1617
00:58:19,840 --> 00:58:21,370
able to find some of the cross-site

1618
00:58:21,370 --> 00:58:22,950
scripting go model is because they are

1619
00:58:22,950 --> 00:58:25,690
fairly straightforward to detecting code

1620
00:58:25,690 --> 00:58:27,580
and you also have some linking rules

1621
00:58:27,580 --> 00:58:30,550
available which can use to scan people

1622
00:58:30,550 --> 00:58:32,590
to easily scan your code for occurrences

1623
00:58:32,590 --> 00:58:34,840
of these dangerous felons but the

1624
00:58:34,840 --> 00:58:36,400
problem with these things is determining

1625
00:58:36,400 --> 00:58:37,990
whether it's a problem or not because

1626
00:58:37,990 --> 00:58:39,370
you can easily stop to bypass security

1627
00:58:39,370 --> 00:58:41,470
trust a to the malfunctions but it

1628
00:58:41,470 --> 00:58:42,850
depends on what you feed in there

1629
00:58:42,850 --> 00:58:44,980
whether it's a problem or not and that's

1630
00:58:44,980 --> 00:58:46,690
I guess something that many pools

1631
00:58:46,690 --> 00:58:48,910
struggling right I definitely hope this

1632
00:58:48,910 --> 00:58:51,870
will improve in coming

1633
00:59:06,250 --> 00:59:08,500
okay that that's actually a very

1634
00:59:08,500 --> 00:59:09,970
interesting thing yes there are a couple

1635
00:59:09,970 --> 00:59:10,930
of things you need to know about

1636
00:59:10,930 --> 00:59:14,080
hangover 1 first of all um later finally

1637
00:59:14,080 --> 00:59:16,119
the curly braces is still covered so

1638
00:59:16,119 --> 00:59:18,190
they have that fully covered it will

1639
00:59:18,190 --> 00:59:23,109
automatically apply this encoding unless

1640
00:59:23,109 --> 00:59:24,700
you turn it up so in angular 2 there's

1641
00:59:24,700 --> 00:59:26,230
no way to turn up an angle at 1 that was

1642
00:59:26,230 --> 00:59:27,010
a way to disable

1643
00:59:27,010 --> 00:59:28,869
SCD it's called streets contextual

1644
00:59:28,869 --> 00:59:30,670
escaping so you need to make sure you

1645
00:59:30,670 --> 00:59:32,859
did not turn it off that's number one

1646
00:59:32,859 --> 00:59:35,020
number two is sanitization is not

1647
00:59:35,020 --> 00:59:37,180
applied automatically and if you try to

1648
00:59:37,180 --> 00:59:38,830
bind to innerhtml

1649
00:59:38,830 --> 00:59:41,349
with ng by the HTML that is it will

1650
00:59:41,349 --> 00:59:43,599
throw an error and the most important

1651
00:59:43,599 --> 00:59:44,890
thing you need to realize the fix that

1652
00:59:44,890 --> 00:59:46,570
error list you have to includes the self

1653
00:59:46,570 --> 00:59:49,960
at every other fix is bogus you can find

1654
00:59:49,960 --> 00:59:51,369
Stack Overflow of course to tell you to

1655
00:59:51,369 --> 00:59:53,770
use this trust as HTML function which

1656
00:59:53,770 --> 00:59:55,570
simply outputs anything you give it

1657
00:59:55,570 --> 00:59:57,580
including malicious code so you can

1658
00:59:57,580 --> 01:00:00,790
never ever use that but if you add the

1659
01:00:00,790 --> 01:00:03,280
mg sin x to your module imports you're

1660
01:00:03,280 --> 01:00:05,230
also covered because that will enable

1661
01:00:05,230 --> 01:00:06,730
the sanitizer here from that point on

1662
01:00:06,730 --> 01:00:08,560
angle will sell facts for you I will be

1663
01:00:08,560 --> 01:00:11,680
that pretty girl thing we need to be

1664
01:00:11,680 --> 01:00:13,349
worried about its template injection

1665
01:00:13,349 --> 01:00:15,839
because angular 1 is not pre-compiled

1666
01:00:15,839 --> 01:00:18,970
and because of that somebody might be

1667
01:00:18,970 --> 01:00:20,710
able to inject template code before

1668
01:00:20,710 --> 01:00:23,890
angular runs so some people combine

1669
01:00:23,890 --> 01:00:25,839
angular with asp.net for example and if

1670
01:00:25,839 --> 01:00:27,460
your eight-speed on that page outputs

1671
01:00:27,460 --> 01:00:29,380
something untrusted which can include

1672
01:00:29,380 --> 01:00:31,390
angular code which is totally safe as a

1673
01:00:31,390 --> 01:00:33,790
service parts a service concern but once

1674
01:00:33,790 --> 01:00:35,500
angular ceases when it's bootstrapping

1675
01:00:35,500 --> 01:00:37,150
it's like oh I knew your code that's for

1676
01:00:37,150 --> 01:00:39,910
me and has the ability to execute that

1677
01:00:39,910 --> 01:00:41,859
code but if you're using angular 1 and

1678
01:00:41,859 --> 01:00:44,770
aesthetically completely static and you

1679
01:00:44,770 --> 01:00:47,380
do not use the order by filter for

1680
01:00:47,380 --> 01:00:50,380
tables then you're also not going to

1681
01:00:50,380 --> 01:00:52,510
suffer from template injection as well

1682
01:00:52,510 --> 01:00:54,490
but these things are actually both

1683
01:00:54,490 --> 01:00:56,080
document herbs and it's one of these

1684
01:00:56,080 --> 01:00:57,310
things I've talked about they try to

1685
01:00:57,310 --> 01:00:57,970
prevent

1686
01:00:57,970 --> 01:00:59,470
template injection attacks in angular

1687
01:00:59,470 --> 01:01:01,750
but that turned out to be too complex

1688
01:01:01,750 --> 01:01:04,630
and they decide an angle of 1.6 do not

1689
01:01:04,630 --> 01:01:06,700
offer that anymore because it was a

1690
01:01:06,700 --> 01:01:08,589
nightmare and easily and it could be

1691
01:01:08,589 --> 01:01:10,780
bypassed so if you google for angular

1692
01:01:10,780 --> 01:01:12,070
expressions and works you're going to

1693
01:01:12,070 --> 01:01:14,349
find definitely some articles that cover

1694
01:01:14,349 --> 01:01:17,080
that and if you order I shoot me a tweet

1695
01:01:17,080 --> 01:01:18,490
and I'll definitely send you some things

1696
01:01:18,490 --> 01:01:19,880
you can

1697
01:01:19,880 --> 01:01:23,150
on these things like perfect we can also

1698
01:01:23,150 --> 01:01:24,499
put some of those links on the show next

1699
01:01:24,499 --> 01:01:27,259
everyone I think that was all the

1700
01:01:27,259 --> 01:01:30,819
questions we had there is someone typing

1701
01:01:32,920 --> 01:01:36,529
but we'll get those oh just lots of

1702
01:01:36,529 --> 01:01:38,269
thank you so thank you so so much

1703
01:01:38,269 --> 01:01:39,920
I hope your mom enjoyed them and thank

1704
01:01:39,920 --> 01:01:42,650
you again Philip for being involved we

1705
01:01:42,650 --> 01:01:44,569
hope it's not the last time we have you

1706
01:01:44,569 --> 01:01:47,839
on the secure developer I hope you have

1707
01:01:47,839 --> 01:01:49,099
you again soon but I hope everyone

1708
01:01:49,099 --> 01:01:51,769
enjoyed that as I mentioned before if

1709
01:01:51,769 --> 01:01:54,499
you would like to rewatch the station or

1710
01:01:54,499 --> 01:01:55,729
anything like that you can find the

1711
01:01:55,729 --> 01:01:57,559
recorded version on each secure

1712
01:01:57,559 --> 01:01:59,630
developer.com and please unless they

1713
01:01:59,630 --> 01:02:02,660
jump into the slack Channel and keep

1714
01:02:02,660 --> 01:02:03,799
those questions coming in and we'll get

1715
01:02:03,799 --> 01:02:05,239
them answered if you haven't watch this

1716
01:02:05,239 --> 01:02:07,160
libelous it's coming more questions will

1717
01:02:07,160 --> 01:02:10,099
come to you our next session will be in

1718
01:02:10,099 --> 01:02:11,539
two weeks time on the first of August

1719
01:02:11,539 --> 01:02:12,920
and we're going to be talking about

1720
01:02:12,920 --> 01:02:15,710
implementing their setups in Azura with

1721
01:02:15,710 --> 01:02:18,499
Victoria and so he's again John this

1722
01:02:18,499 --> 01:02:20,420
website get your tickets for that and in

1723
01:02:20,420 --> 01:02:23,210
the meantime I hope you enjoy that we do

1724
01:02:23,210 --> 01:02:25,819
have if you're aren't aware a podcast

1725
01:02:25,819 --> 01:02:27,469
that comes out every two weeks and

1726
01:02:27,469 --> 01:02:28,880
there's some great sessions on that with

1727
01:02:28,880 --> 01:02:30,979
it some great hosts so do give it a

1728
01:02:30,979 --> 01:02:33,259
listen and thanks again to you can see

1729
01:02:33,259 --> 01:02:35,479
Matt's neat and for supporting and

1730
01:02:35,479 --> 01:02:37,910
powering and this community really is

1731
01:02:37,910 --> 01:02:41,059
appreciated so everyone has a great day

1732
01:02:41,059 --> 01:02:42,559
wherever you are in the world and we'll

1733
01:02:42,559 --> 01:02:44,450
see you again thank you again for

1734
01:02:44,450 --> 01:02:46,729
joining us what's my pleasure thanks for

1735
01:02:46,729 --> 01:02:47,359
having me

1736
01:02:47,359 --> 01:02:51,848
no problem Elena

