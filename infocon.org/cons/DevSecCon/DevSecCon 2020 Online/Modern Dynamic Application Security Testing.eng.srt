1
00:00:00,000 --> 00:00:01,500
one of the use this 15 minutes just to

2
00:00:01,500 --> 00:00:03,480
kind of give a quick overview of some of

3
00:00:03,480 --> 00:00:05,100
the thoughts that we have is stack talk

4
00:00:05,100 --> 00:00:07,290
about modern dynamic application

5
00:00:07,290 --> 00:00:09,030
security testing why we started the

6
00:00:09,030 --> 00:00:11,070
company and quickly run through some

7
00:00:11,070 --> 00:00:12,870
slides that are screenshots of the

8
00:00:12,870 --> 00:00:15,179
product we've only got 15 minutes so I

9
00:00:15,179 --> 00:00:19,800
want to jump into it first of all I'm

10
00:00:19,800 --> 00:00:22,080
Scott Gerlach as you may have seen or

11
00:00:22,080 --> 00:00:24,199
heard many many times today apparently

12
00:00:24,199 --> 00:00:28,050
I'm a CSO and co-founder at stock hawk

13
00:00:28,050 --> 00:00:31,109
I was a CISO at SendGrid for about three

14
00:00:31,109 --> 00:00:33,750
years senior security architect at

15
00:00:33,750 --> 00:00:36,420
GoDaddy I worked ago day for about nine

16
00:00:36,420 --> 00:00:37,950
years

17
00:00:37,950 --> 00:00:41,219
husband dad Brewer horrible golfer etc

18
00:00:41,219 --> 00:00:43,920
etc there's some contact information if

19
00:00:43,920 --> 00:00:45,480
you want to get a hold of me later my

20
00:00:45,480 --> 00:00:50,489
twitter handle and my linkedin a little

21
00:00:50,489 --> 00:00:52,649
bit about stack hawk stack hawk was

22
00:00:52,649 --> 00:00:55,620
founded by two members formerly of

23
00:00:55,620 --> 00:00:57,660
victor ops so really plugged into that

24
00:00:57,660 --> 00:01:02,280
to that DevOps transformations that's

25
00:01:02,280 --> 00:01:04,860
been going on and then myself from

26
00:01:04,860 --> 00:01:05,339
SendGrid

27
00:01:05,339 --> 00:01:08,369
and kind of why we wanted to start this

28
00:01:08,369 --> 00:01:11,760
company quickly I've run app sec at

29
00:01:11,760 --> 00:01:15,119
multiple organizations different facets

30
00:01:15,119 --> 00:01:17,790
from being the person that's in charge

31
00:01:17,790 --> 00:01:19,650
of app sec to being the person that's in

32
00:01:19,650 --> 00:01:22,020
charge of the people that are doing app

33
00:01:22,020 --> 00:01:25,380
sec all the way down to running tools

34
00:01:25,380 --> 00:01:29,040
myself it's always it's always a tricky

35
00:01:29,040 --> 00:01:32,159
tricky gamut to run because of the

36
00:01:32,159 --> 00:01:34,140
difficulties of understanding and

37
00:01:34,140 --> 00:01:35,909
application and making the application

38
00:01:35,909 --> 00:01:39,869
security tool work and using zap we're

39
00:01:39,869 --> 00:01:41,490
using burp we're using any of the

40
00:01:41,490 --> 00:01:46,369
commercial vendor stuff wrapped 7 etc

41
00:01:46,369 --> 00:01:48,869
but we always wanted to avoid that

42
00:01:48,869 --> 00:01:51,090
language dependency thing that happens

43
00:01:51,090 --> 00:01:52,890
with static code analysis and it's

44
00:01:52,890 --> 00:01:55,590
getting better Sangren was very much a

45
00:01:55,590 --> 00:01:59,759
go centric shop so you know there at the

46
00:01:59,759 --> 00:02:01,170
time there wasn't a lot of static code

47
00:02:01,170 --> 00:02:03,030
analysis for go so we searched and

48
00:02:03,030 --> 00:02:05,840
searched and searched for dynamic

49
00:02:05,840 --> 00:02:08,068
dynamic analysis tools to be able to

50
00:02:08,068 --> 00:02:10,080
test the running app because we knew if

51
00:02:10,080 --> 00:02:12,780
we could find anything with a running

52
00:02:12,780 --> 00:02:13,770
test

53
00:02:13,770 --> 00:02:15,990
testing the running app then for certain

54
00:02:15,990 --> 00:02:17,190
those were things that we should be

55
00:02:17,190 --> 00:02:19,290
fixing some of the times in those static

56
00:02:19,290 --> 00:02:21,660
code analysis tools you get some stuff

57
00:02:21,660 --> 00:02:23,310
that's that's telling you about a

58
00:02:23,310 --> 00:02:25,110
problem but it's not actually exposed or

59
00:02:25,110 --> 00:02:26,850
it's hard to tell if it's exposed in the

60
00:02:26,850 --> 00:02:31,110
product all of these things have been

61
00:02:31,110 --> 00:02:32,850
super hard to learn as I mentioned even

62
00:02:32,850 --> 00:02:34,830
for people's people whose job it is to

63
00:02:34,830 --> 00:02:37,080
learn how to run those tools so if

64
00:02:37,080 --> 00:02:40,590
you're not using a burp or a zap on the

65
00:02:40,590 --> 00:02:43,170
daily basis like you're in there four to

66
00:02:43,170 --> 00:02:45,210
six hours that they understand how it

67
00:02:45,210 --> 00:02:47,100
works backwards and forwards all day

68
00:02:47,100 --> 00:02:49,440
every day it's super hard to figure out

69
00:02:49,440 --> 00:02:51,390
it's super hard to get started it's

70
00:02:51,390 --> 00:02:52,680
super hard to know what you're supposed

71
00:02:52,680 --> 00:02:55,050
to do next there's a lot of people that

72
00:02:55,050 --> 00:02:56,910
get paid good money to do that on the

73
00:02:56,910 --> 00:02:59,250
pen testing side and on the apps tech

74
00:02:59,250 --> 00:03:02,880
side but none of this is even a thing if

75
00:03:02,880 --> 00:03:04,590
you haven't paid the security tax and by

76
00:03:04,590 --> 00:03:06,570
security tax we mean you haven't

77
00:03:06,570 --> 00:03:10,170
invested in a security department per se

78
00:03:10,170 --> 00:03:13,910
you may have a tool here or a tool here

79
00:03:13,910 --> 00:03:17,640
that's giving you some information but

80
00:03:17,640 --> 00:03:19,860
it's kind of a little bit disjointed and

81
00:03:19,860 --> 00:03:21,780
it's hard to understand what to fix and

82
00:03:21,780 --> 00:03:24,330
and how to go about it that's sort of

83
00:03:24,330 --> 00:03:27,600
the security tax so what we decided to

84
00:03:27,600 --> 00:03:29,580
do is try to move the starting line we

85
00:03:29,580 --> 00:03:32,490
want to move where companies can start

86
00:03:32,490 --> 00:03:34,700
and how often how early they can start

87
00:03:34,700 --> 00:03:37,980
and give developers the tools and

88
00:03:37,980 --> 00:03:41,190
information and power to find and fix

89
00:03:41,190 --> 00:03:42,930
those security bugs before they get into

90
00:03:42,930 --> 00:03:44,790
production so we want to give that to

91
00:03:44,790 --> 00:03:47,190
them on the local desktop in the CI CD

92
00:03:47,190 --> 00:03:49,440
pipeline in staging and then obviously

93
00:03:49,440 --> 00:03:53,220
in production if they want to but lower

94
00:03:53,220 --> 00:03:55,380
that security poverty line where you can

95
00:03:55,380 --> 00:03:57,210
get into some kind of an app sect

96
00:03:57,210 --> 00:03:59,940
program for a reasonable amount of money

97
00:03:59,940 --> 00:04:02,430
and and spread the load across the

98
00:04:02,430 --> 00:04:04,140
development environment the people that

99
00:04:04,140 --> 00:04:05,870
already know how the applications work

100
00:04:05,870 --> 00:04:08,430
to try to try to make that a more

101
00:04:08,430 --> 00:04:12,360
successful thing within the company real

102
00:04:12,360 --> 00:04:14,910
quickly the apps tech problem app sec as

103
00:04:14,910 --> 00:04:17,790
we've been talking over and over

104
00:04:17,790 --> 00:04:19,529
throughout this conference really good

105
00:04:19,529 --> 00:04:22,440
in theory those static code analysis

106
00:04:22,440 --> 00:04:24,390
tools are good they're they're sometimes

107
00:04:24,390 --> 00:04:26,630
noisy and they often lack

108
00:04:26,630 --> 00:04:28,130
application context what's it actually

109
00:04:28,130 --> 00:04:30,380
doing with the pieces of code that it's

110
00:04:30,380 --> 00:04:33,400
analyzing language-dependent

111
00:04:33,400 --> 00:04:36,770
again making sure that the language that

112
00:04:36,770 --> 00:04:38,480
you are using is supported by these

113
00:04:38,480 --> 00:04:41,210
tools is often can get you into trouble

114
00:04:41,210 --> 00:04:43,790
sometimes and don't even get me started

115
00:04:43,790 --> 00:04:45,560
on IDE support where people are like

116
00:04:45,560 --> 00:04:47,510
does it have a plugin for eclipse

117
00:04:47,510 --> 00:04:49,910
because we've totally standardized on

118
00:04:49,910 --> 00:04:51,200
eclipse throughout the entire

119
00:04:51,200 --> 00:04:54,920
organization maybe one or two places

120
00:04:54,920 --> 00:04:57,350
ever haven't done that dynamic code

121
00:04:57,350 --> 00:04:59,030
analysis it's better at actual app

122
00:04:59,030 --> 00:05:03,770
context still can be somewhat noisy but

123
00:05:03,770 --> 00:05:05,840
super hard to use really hard to figure

124
00:05:05,840 --> 00:05:08,840
out how to get it to go in most of the

125
00:05:08,840 --> 00:05:11,150
implementations today and then you've

126
00:05:11,150 --> 00:05:14,660
got your rasp I asked laughs tools that

127
00:05:14,660 --> 00:05:16,580
are sort of instrument inside the code

128
00:05:16,580 --> 00:05:19,460
or protect the code and they they really

129
00:05:19,460 --> 00:05:22,280
work best when they're in production or

130
00:05:22,280 --> 00:05:26,150
in a really really strong test suite so

131
00:05:26,150 --> 00:05:29,360
if you don't test routes and paths and

132
00:05:29,360 --> 00:05:31,550
inputs and outputs then those things

133
00:05:31,550 --> 00:05:34,730
can't find them so sort of you're saying

134
00:05:34,730 --> 00:05:37,250
I'm gonna push this into production if

135
00:05:37,250 --> 00:05:39,080
someone finds something nasty out there

136
00:05:39,080 --> 00:05:41,860
this should help me protect against it

137
00:05:41,860 --> 00:05:44,390
now I think all three of these things

138
00:05:44,390 --> 00:05:47,990
are really really strong whole holistic

139
00:05:47,990 --> 00:05:51,170
app set program where you choose to

140
00:05:51,170 --> 00:05:54,080
start I hope dynamic analysis but that's

141
00:05:54,080 --> 00:05:57,680
just me I would probably go dynamic

142
00:05:57,680 --> 00:06:01,460
static and then rasp biased laughs in

143
00:06:01,460 --> 00:06:03,380
the order of investment that I would

144
00:06:03,380 --> 00:06:09,290
work work on personally apps tech is

145
00:06:09,290 --> 00:06:11,780
super hard to scale so even if you have

146
00:06:11,780 --> 00:06:14,090
an app set program and you have a person

147
00:06:14,090 --> 00:06:17,090
that is really good at testing app sack

148
00:06:17,090 --> 00:06:19,630
and has built really great developer

149
00:06:19,630 --> 00:06:22,430
relationships and when they find a thing

150
00:06:22,430 --> 00:06:24,320
to fix and they give the developer the

151
00:06:24,320 --> 00:06:26,630
engineering team a ticket and that gets

152
00:06:26,630 --> 00:06:28,730
received really well it's super hard to

153
00:06:28,730 --> 00:06:31,640
find one more of those persons it's

154
00:06:31,640 --> 00:06:34,490
super hard to get that into the hands of

155
00:06:34,490 --> 00:06:36,229
a large organization it can kind of

156
00:06:36,229 --> 00:06:38,960
scale when you're sort of small but you

157
00:06:38,960 --> 00:06:42,290
know once you get past about 20-25

158
00:06:42,290 --> 00:06:44,870
engineers it gets really really tough to

159
00:06:44,870 --> 00:06:46,690
be involved in all those conversations

160
00:06:46,690 --> 00:06:49,130
test all the software changes that are

161
00:06:49,130 --> 00:06:52,550
being made and get that information back

162
00:06:52,550 --> 00:06:54,410
to those engineers and the feedback loop

163
00:06:54,410 --> 00:06:56,090
that makes sense that's not super

164
00:06:56,090 --> 00:06:59,270
delayed there's also no real try and by

165
00:06:59,270 --> 00:07:01,790
for a bunch of these products they're

166
00:07:01,790 --> 00:07:03,590
all kind of hidden behind that security

167
00:07:03,590 --> 00:07:06,520
paywall of contact us for a demo and

168
00:07:06,520 --> 00:07:09,440
ultimately it ends up spending a lot of

169
00:07:09,440 --> 00:07:12,320
money so that's that's kind of setting

170
00:07:12,320 --> 00:07:14,930
up what we wanted to chart at tackle as

171
00:07:14,930 --> 00:07:17,930
problem solving for customers at Stack

172
00:07:17,930 --> 00:07:20,180
Hawk I want to run through really

173
00:07:20,180 --> 00:07:22,160
quickly some screenshots of kind of how

174
00:07:22,160 --> 00:07:25,490
the product works and hopefully you get

175
00:07:25,490 --> 00:07:27,289
a sense of how we're trying to cater to

176
00:07:27,289 --> 00:07:29,660
developers so that developers can take

177
00:07:29,660 --> 00:07:33,050
on this load of configuring applications

178
00:07:33,050 --> 00:07:34,490
and then having them scanned all the

179
00:07:34,490 --> 00:07:37,039
time when they're going through CI CD or

180
00:07:37,039 --> 00:07:40,130
they're developing new features so the

181
00:07:40,130 --> 00:07:42,950
very first thing we have excuse me the

182
00:07:42,950 --> 00:07:45,169
very first thing we have is stack hoc is

183
00:07:45,169 --> 00:07:47,180
configured via a mol file that lives in

184
00:07:47,180 --> 00:07:49,460
the codebase with the application so

185
00:07:49,460 --> 00:07:54,010
however your codebase is organized we

186
00:07:54,010 --> 00:07:56,690
enable you to create this configuration

187
00:07:56,690 --> 00:07:59,150
file that tells us some basic

188
00:07:59,150 --> 00:08:00,890
information about the app where to find

189
00:08:00,890 --> 00:08:03,530
it while it's running how to log into it

190
00:08:03,530 --> 00:08:05,930
if it's got authentication what paths to

191
00:08:05,930 --> 00:08:08,479
not scan some other a handful of other

192
00:08:08,479 --> 00:08:10,820
information that could that file should

193
00:08:10,820 --> 00:08:13,310
live with the application code so that

194
00:08:13,310 --> 00:08:15,710
it's easily repeatable by anyone in the

195
00:08:15,710 --> 00:08:17,810
engineering department CI CD can take

196
00:08:17,810 --> 00:08:20,330
that information instrumented and run

197
00:08:20,330 --> 00:08:22,490
scans as you're doing pull requests or

198
00:08:22,490 --> 00:08:25,880
merge requests or commits to master or

199
00:08:25,880 --> 00:08:29,150
however you do your flow you can also

200
00:08:29,150 --> 00:08:31,940
run it as you're developing in localhost

201
00:08:31,940 --> 00:08:34,549
mode because this file is sitting there

202
00:08:34,549 --> 00:08:36,770
as part of the CSV just invoking a

203
00:08:36,770 --> 00:08:38,659
simple docker command will kick off a

204
00:08:38,659 --> 00:08:42,080
scan using this information and start

205
00:08:42,080 --> 00:08:46,490
scanning the app which looks very much

206
00:08:46,490 --> 00:08:49,820
like this a simple docker command really

207
00:08:49,820 --> 00:08:52,579
a streamlined output that is just hey

208
00:08:52,579 --> 00:08:53,540
how many URLs

209
00:08:53,540 --> 00:08:54,800
that I find because that's a really good

210
00:08:54,800 --> 00:08:57,350
indication of am i finding the entire

211
00:08:57,350 --> 00:08:59,990
app am I getting myself logged in those

212
00:08:59,990 --> 00:09:01,790
kinds of things and then a really good

213
00:09:01,790 --> 00:09:03,709
summary of some of the findings that

214
00:09:03,709 --> 00:09:05,329
come out of this and this particular one

215
00:09:05,329 --> 00:09:06,560
you can see we've got a cross-site

216
00:09:06,560 --> 00:09:08,990
scripting thing here on one of the paths

217
00:09:08,990 --> 00:09:13,459
for my test application and then at the

218
00:09:13,459 --> 00:09:15,529
bottom of the screen output it will

219
00:09:15,529 --> 00:09:17,300
actually dump you give you a direct link

220
00:09:17,300 --> 00:09:20,269
into the stack hoc portal that will get

221
00:09:20,269 --> 00:09:24,500
you into the scans pages what that sort

222
00:09:24,500 --> 00:09:27,139
of looks like is this this is just a

223
00:09:27,139 --> 00:09:29,449
list of running scans over time you can

224
00:09:29,449 --> 00:09:31,490
see I've been scanning a lot of my

225
00:09:31,490 --> 00:09:34,009
vulnerable django app over and over and

226
00:09:34,009 --> 00:09:36,920
over in many different environments get

227
00:09:36,920 --> 00:09:38,720
a good summary of the paths that I found

228
00:09:38,720 --> 00:09:41,329
any of the high medium low that I've

229
00:09:41,329 --> 00:09:44,839
I've newly found all of my triage items

230
00:09:44,839 --> 00:09:46,850
so things that I don't want to do

231
00:09:46,850 --> 00:09:49,279
anything with or I have promoted to a

232
00:09:49,279 --> 00:09:51,500
ticket or are false positives the

233
00:09:51,500 --> 00:09:53,209
scanner the command line scanner the

234
00:09:53,209 --> 00:09:55,100
docker scanner and this portal will

235
00:09:55,100 --> 00:09:56,990
continue to honor those things over time

236
00:09:56,990 --> 00:09:58,639
we'll still find them as long as they

237
00:09:58,639 --> 00:10:00,680
exist we'll still to attach notes to

238
00:10:00,680 --> 00:10:04,250
them over time and you can see over and

239
00:10:04,250 --> 00:10:05,930
over and over what's going on with these

240
00:10:05,930 --> 00:10:08,360
scans should they run into problems or

241
00:10:08,360 --> 00:10:11,810
break or any of that stuff clicking into

242
00:10:11,810 --> 00:10:13,459
the end of one of those rows gets you

243
00:10:13,459 --> 00:10:15,440
into the details of this stuff so in

244
00:10:15,440 --> 00:10:17,899
here you can see we completed this scan

245
00:10:17,899 --> 00:10:20,360
this morning it took 22 minutes to run

246
00:10:20,360 --> 00:10:23,540
this was actually in get lab so part of

247
00:10:23,540 --> 00:10:25,670
what I've got set up for this test app

248
00:10:25,670 --> 00:10:29,209
is doing some running again lab we found

249
00:10:29,209 --> 00:10:32,240
that one high which is that cross-site

250
00:10:32,240 --> 00:10:34,519
scripting reflected and then some cookie

251
00:10:34,519 --> 00:10:37,760
stuff anti CSRF tokens x content type

252
00:10:37,760 --> 00:10:40,069
and a 500 that is getting thrown in

253
00:10:40,069 --> 00:10:42,279
there that maybe we don't want to have

254
00:10:42,279 --> 00:10:44,899
we can then from there click into what

255
00:10:44,899 --> 00:10:47,000
that one of those looks like and we can

256
00:10:47,000 --> 00:10:48,139
click on the cross site scripting

257
00:10:48,139 --> 00:10:51,290
reflected here gives you a really good

258
00:10:51,290 --> 00:10:53,839
overview of what the problem is on

259
00:10:53,839 --> 00:10:57,860
cross-site scripting as well as where

260
00:10:57,860 --> 00:10:59,630
you can find the responses and the

261
00:10:59,630 --> 00:11:02,149
requests to be able to recreate these

262
00:11:02,149 --> 00:11:04,100
kinds of things so you've got the

263
00:11:04,100 --> 00:11:06,319
response or the request field here which

264
00:11:06,319 --> 00:11:07,310
highlights the string

265
00:11:07,310 --> 00:11:09,590
that triggered the alert then we've also

266
00:11:09,590 --> 00:11:12,410
got that recreate button that gives you

267
00:11:12,410 --> 00:11:13,610
a good curl command to be able to

268
00:11:13,610 --> 00:11:17,120
recreate the the attack or the test for

269
00:11:17,120 --> 00:11:19,100
lack of a better term the the test in

270
00:11:19,100 --> 00:11:20,720
local host mode so you can kind of put

271
00:11:20,720 --> 00:11:23,600
the the code in debug mode and follow it

272
00:11:23,600 --> 00:11:25,640
through to see where that input or

273
00:11:25,640 --> 00:11:29,120
output is getting mishandled again

274
00:11:29,120 --> 00:11:30,800
there's you've got the notes here so

275
00:11:30,800 --> 00:11:33,110
that you can say have I've promoted this

276
00:11:33,110 --> 00:11:34,190
to a ticket we're going to fix this

277
00:11:34,190 --> 00:11:36,830
here's our JIRA ticket and then it'll

278
00:11:36,830 --> 00:11:38,630
continue to follow that but it will stop

279
00:11:38,630 --> 00:11:41,839
breaking stuff or will stop exiting

280
00:11:41,839 --> 00:11:48,140
non-0 as as it were the other statuses

281
00:11:48,140 --> 00:11:50,690
you you have right now are assigned so

282
00:11:50,690 --> 00:11:51,980
that's the ticket we're working on a

283
00:11:51,980 --> 00:11:53,779
JIRA integration right now so you can

284
00:11:53,779 --> 00:11:56,600
push ticket information false positive

285
00:11:56,600 --> 00:11:58,550
and risk accepted I think it's super

286
00:11:58,550 --> 00:12:00,260
interesting that risk accepted is in

287
00:12:00,260 --> 00:12:02,330
here is that's often left out and it

288
00:12:02,330 --> 00:12:04,670
kind of forces you to go I'm gonna

289
00:12:04,670 --> 00:12:07,220
assign this to a ticket and put it into

290
00:12:07,220 --> 00:12:09,860
a backlog that I don't want to touch but

291
00:12:09,860 --> 00:12:11,360
it sort of looks like you're gonna fix

292
00:12:11,360 --> 00:12:15,440
it versus a false positive where the the

293
00:12:15,440 --> 00:12:17,810
test did not actually succeed which is

294
00:12:17,810 --> 00:12:20,180
not what that actually is so risk

295
00:12:20,180 --> 00:12:22,640
accepted is is what companies should be

296
00:12:22,640 --> 00:12:24,530
doing on some things and being able to

297
00:12:24,530 --> 00:12:27,730
have the assignment there is really good

298
00:12:27,730 --> 00:12:30,770
that was a super quick run-through of

299
00:12:30,770 --> 00:12:32,810
the stack Hawk platform if you want to

300
00:12:32,810 --> 00:12:35,000
check this out some more talk to us

301
00:12:35,000 --> 00:12:37,839
please come by our vendor booth in the

302
00:12:37,839 --> 00:12:40,970
in the conference here chat with me chat

303
00:12:40,970 --> 00:12:43,310
with joni chat with ryan would be happy

304
00:12:43,310 --> 00:12:44,810
to run you through a demo get you an

305
00:12:44,810 --> 00:12:46,250
account setup if you want to test it

306
00:12:46,250 --> 00:12:48,710
there's a ton of really good useful

307
00:12:48,710 --> 00:12:50,870
links here created an account our open

308
00:12:50,870 --> 00:12:52,910
beta the the platform is open for you to

309
00:12:52,910 --> 00:12:55,580
use right now and it's free and all the

310
00:12:55,580 --> 00:12:56,990
people that are on the open beta get a

311
00:12:56,990 --> 00:13:00,350
sweetheart deal just saying really good

312
00:13:00,350 --> 00:13:02,930
videos I think because I'm in am about

313
00:13:02,930 --> 00:13:04,580
getting started and how to configure the

314
00:13:04,580 --> 00:13:06,980
yamo file good blog post about how to

315
00:13:06,980 --> 00:13:08,959
scan the damn vulnerable web app if you

316
00:13:08,959 --> 00:13:10,400
just want to test something really quick

317
00:13:10,400 --> 00:13:12,560
and then if you want to go look at my

318
00:13:12,560 --> 00:13:15,380
other thought leadership stuff about why

319
00:13:15,380 --> 00:13:16,970
it does struggle with app sick and how

320
00:13:16,970 --> 00:13:18,770
to make it easier which is a much longer

321
00:13:18,770 --> 00:13:20,209
presentation that I had to be able to

322
00:13:20,209 --> 00:13:20,880
fit into 50

323
00:13:20,880 --> 00:13:22,470
minutes you can check that out on

324
00:13:22,470 --> 00:13:25,400
YouTube it's from all the talks talked

325
00:13:25,400 --> 00:13:29,070
about a month ago I think that's all

326
00:13:29,070 --> 00:13:30,990
I've got for you I got the 3-minute

327
00:13:30,990 --> 00:13:33,000
warning saying hopefully I'm on time

328
00:13:33,000 --> 00:13:35,390
still

