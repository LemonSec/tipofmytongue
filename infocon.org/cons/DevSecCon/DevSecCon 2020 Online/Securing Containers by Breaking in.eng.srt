1
00:00:00,000 --> 00:00:01,410
I'm gonna kick off a time because I know

2
00:00:01,410 --> 00:00:02,580
I haven't got too much time so we're

3
00:00:02,580 --> 00:00:04,140
gonna talk about securing containers by

4
00:00:04,140 --> 00:00:05,700
breaking in and during this session is

5
00:00:05,700 --> 00:00:07,560
15 minutes I'm going to talk to you

6
00:00:07,560 --> 00:00:09,690
about seven best practices that will

7
00:00:09,690 --> 00:00:11,190
help you secure your container images

8
00:00:11,190 --> 00:00:12,900
and will hopefully also have time for

9
00:00:12,900 --> 00:00:15,630
two life hacks so let's jump in I'm the

10
00:00:15,630 --> 00:00:17,340
VP of developer relations and community

11
00:00:17,340 --> 00:00:18,930
at snick I've been here about two years

12
00:00:18,930 --> 00:00:21,029
we're hiring at their royal team as well

13
00:00:21,029 --> 00:00:22,650
so if you're interested in containers

14
00:00:22,650 --> 00:00:24,449
and things like that do contact me and

15
00:00:24,449 --> 00:00:26,029
well that will go from there

16
00:00:26,029 --> 00:00:28,769
so number one one of seven prefer

17
00:00:28,769 --> 00:00:31,230
mineral based images why because based

18
00:00:31,230 --> 00:00:33,420
images and parent images container lots

19
00:00:33,420 --> 00:00:35,870
of vulnerabilities this is the top ten

20
00:00:35,870 --> 00:00:38,790
most downloaded images from document you

21
00:00:38,790 --> 00:00:40,500
can see the vast number of images that

22
00:00:40,500 --> 00:00:43,440
contain 30 or more honor abilities it is

23
00:00:43,440 --> 00:00:44,940
absolutely critical to choose the right

24
00:00:44,940 --> 00:00:47,219
base image as we will inherit all of the

25
00:00:47,219 --> 00:00:48,840
vulnerabilities that pull in from them

26
00:00:48,840 --> 00:00:51,390
they're number two least privileged user

27
00:00:51,390 --> 00:00:53,460
the principle of least privilege is very

28
00:00:53,460 --> 00:00:55,469
very important in security if a hacker

29
00:00:55,469 --> 00:00:57,239
comes in you don't want them to adopt

30
00:00:57,239 --> 00:00:59,670
all root privileges and so forth now if

31
00:00:59,670 --> 00:01:01,770
you don't have a user directive in your

32
00:01:01,770 --> 00:01:03,239
in your daughter file you will

33
00:01:03,239 --> 00:01:06,119
automatically provide route to any

34
00:01:06,119 --> 00:01:08,070
attacker that breaks in and uses that

35
00:01:08,070 --> 00:01:10,229
process as a result what we want to do

36
00:01:10,229 --> 00:01:13,229
here is create a new group this group

37
00:01:13,229 --> 00:01:15,750
also has an eye user add it's two bit

38
00:01:15,750 --> 00:01:17,759
this user won't have a password a home

39
00:01:17,759 --> 00:01:19,799
directory a shell it provides a user

40
00:01:19,799 --> 00:01:21,840
with least privileges that we need to

41
00:01:21,840 --> 00:01:24,150
run our app very important number three

42
00:01:24,150 --> 00:01:26,850
sign and verify images to mitigate

43
00:01:26,850 --> 00:01:28,680
man-in-the-middle attacks if we don't

44
00:01:28,680 --> 00:01:30,720
sign an image or if we try and pull down

45
00:01:30,720 --> 00:01:32,280
an image that isn't signed there is a

46
00:01:32,280 --> 00:01:34,590
very very small there's no way of

47
00:01:34,590 --> 00:01:36,869
actually verifying that image that we

48
00:01:36,869 --> 00:01:39,329
are consuming is the same image that the

49
00:01:39,329 --> 00:01:41,820
producer uploaded to that repository so

50
00:01:41,820 --> 00:01:43,680
it's extremely important to test

51
00:01:43,680 --> 00:01:46,200
signatures how do we do that well first

52
00:01:46,200 --> 00:01:47,790
of all we can use docker certified

53
00:01:47,790 --> 00:01:50,399
images which are signed images secondly

54
00:01:50,399 --> 00:01:52,799
we can also do something called notary

55
00:01:52,799 --> 00:01:54,509
which is a docker tool and it allows us

56
00:01:54,509 --> 00:01:57,030
first of all to sign images and secondly

57
00:01:57,030 --> 00:01:59,070
it will block us from running an image

58
00:01:59,070 --> 00:02:01,049
if the signature of that image is not

59
00:02:01,049 --> 00:02:03,630
valid here is the dots very very pretty

60
00:02:03,630 --> 00:02:05,719
much straightforward to use

61
00:02:05,719 --> 00:02:08,128
there are a couple of you know select

62
00:02:08,128 --> 00:02:09,869
things around this but there's a v2

63
00:02:09,869 --> 00:02:11,940
coming out as Liz rice mentioned on the

64
00:02:11,940 --> 00:02:13,760
main stage so doctor notaries

65
00:02:13,760 --> 00:02:16,730
tool to help you sign your images now

66
00:02:16,730 --> 00:02:17,360
before

67
00:02:17,360 --> 00:02:20,060
find fix and monitor for open source of

68
00:02:20,060 --> 00:02:21,739
vulnerabilities in the platform in the

69
00:02:21,739 --> 00:02:22,640
operating system

70
00:02:22,640 --> 00:02:25,069
so who does this well on a recent survey

71
00:02:25,069 --> 00:02:26,900
that we did last year we can see that

72
00:02:26,900 --> 00:02:29,689
half the people one in two people do not

73
00:02:29,689 --> 00:02:31,909
stand dr. images for open source

74
00:02:31,909 --> 00:02:33,860
vulnerabilities we would like to push a

75
00:02:33,860 --> 00:02:35,540
lot of that as early as possible so

76
00:02:35,540 --> 00:02:37,700
during the boatmen at Build time in

77
00:02:37,700 --> 00:02:39,680
production periodically during audits

78
00:02:39,680 --> 00:02:41,180
doesn't really fit that DevOps

79
00:02:41,180 --> 00:02:43,430
constantly pushing to a production but

80
00:02:43,430 --> 00:02:45,980
really we want to test this all the time

81
00:02:45,980 --> 00:02:48,319
as early as possible and through well

82
00:02:48,319 --> 00:02:51,019
and constantly as well as monitoring so

83
00:02:51,019 --> 00:02:53,180
how can we do that well this is a mix

84
00:02:53,180 --> 00:02:55,040
pancit or you can do it slick you can

85
00:02:55,040 --> 00:02:56,840
just run snick test and snikt test will

86
00:02:56,840 --> 00:02:59,150
automatically scan that image and

87
00:02:59,150 --> 00:03:00,590
automatically tell you about all the

88
00:03:00,590 --> 00:03:02,049
vulnerabilities that exist in your

89
00:03:02,049 --> 00:03:04,040
application units right in your in your

90
00:03:04,040 --> 00:03:06,440
docker image how about in deployed

91
00:03:06,440 --> 00:03:07,819
containers so containers that are

92
00:03:07,819 --> 00:03:09,950
already live in in production how do you

93
00:03:09,950 --> 00:03:12,379
find about new vulnerabilities well most

94
00:03:12,379 --> 00:03:14,989
people not most people close to 1 & 2 so

95
00:03:14,989 --> 00:03:16,940
they probably won't find out about new

96
00:03:16,940 --> 00:03:19,069
vulnerabilities some people use styling

97
00:03:19,069 --> 00:03:20,959
tools awesome some people use their

98
00:03:20,959 --> 00:03:23,090
security team that's great some people

99
00:03:23,090 --> 00:03:25,280
crack the public databases that sounds a

100
00:03:25,280 --> 00:03:28,010
bit tiring but the key here is almost

101
00:03:28,010 --> 00:03:30,650
one in two people don't even think about

102
00:03:30,650 --> 00:03:32,599
new vulnerabilities that come into their

103
00:03:32,599 --> 00:03:34,970
production environments so one thing we

104
00:03:34,970 --> 00:03:36,410
can do here is something called a snip

105
00:03:36,410 --> 00:03:38,629
monitor and snip monitor will constantly

106
00:03:38,629 --> 00:03:40,639
test daily about a look at your images

107
00:03:40,639 --> 00:03:42,919
and it will tell you and inform you when

108
00:03:42,919 --> 00:03:44,449
you have new vulnerabilities so it'll

109
00:03:44,449 --> 00:03:46,400
tell you straight away as and when these

110
00:03:46,400 --> 00:03:48,769
new vulnerabilities hit now we're gonna

111
00:03:48,769 --> 00:03:51,560
do some live hacking so here is a here

112
00:03:51,560 --> 00:03:53,389
as a package called image magics many of

113
00:03:53,389 --> 00:03:54,500
you will have heard this this is in a

114
00:03:54,500 --> 00:03:56,900
debian instance and this is an improper

115
00:03:56,900 --> 00:03:59,000
that error input validation so input

116
00:03:59,000 --> 00:04:01,400
validation were all familiar about how

117
00:04:01,400 --> 00:04:03,379
if we don't trust if we choke if we

118
00:04:03,379 --> 00:04:05,720
trust our input too much when it's from

119
00:04:05,720 --> 00:04:07,430
a third party we can get into some

120
00:04:07,430 --> 00:04:08,599
significant trouble

121
00:04:08,599 --> 00:04:10,819
so let's go terminal and actually hack

122
00:04:10,819 --> 00:04:13,430
this I'm going to start off by going

123
00:04:13,430 --> 00:04:16,519
straight to a browser and I'm going to

124
00:04:16,519 --> 00:04:18,470
show you a quick application that I've

125
00:04:18,470 --> 00:04:20,298
got running here and this is a very

126
00:04:20,298 --> 00:04:22,700
straightforward application is a node

127
00:04:22,700 --> 00:04:24,320
application it uses image magic in the

128
00:04:24,320 --> 00:04:26,330
background and what I can do is I can

129
00:04:26,330 --> 00:04:27,680
pick a file so why don't

130
00:04:27,680 --> 00:04:30,889
I grabbed I don't know let's grab let's

131
00:04:30,889 --> 00:04:32,930
see what we have something something fun

132
00:04:32,930 --> 00:04:34,580
how about this one this is my little

133
00:04:34,580 --> 00:04:35,750
puppy Bella

134
00:04:35,750 --> 00:04:38,389
running on Briella and I'm going to

135
00:04:38,389 --> 00:04:39,650
resize that and what that's gonna do is

136
00:04:39,650 --> 00:04:41,180
it's gonna take that image and it's

137
00:04:41,180 --> 00:04:43,160
gonna turn it into a Twitter ideal photo

138
00:04:43,160 --> 00:04:44,270
size so there we go

139
00:04:44,270 --> 00:04:46,490
I can have my Boop nose as my Twitter

140
00:04:46,490 --> 00:04:49,220
image that's great but what if I want to

141
00:04:49,220 --> 00:04:51,620
choose a file that was malicious now let

142
00:04:51,620 --> 00:04:53,479
me just show you let me go to a terminal

143
00:04:53,479 --> 00:04:55,520
in fact I'm going to tell you this is

144
00:04:55,520 --> 00:04:57,139
the this is the blocker application

145
00:04:57,139 --> 00:05:00,020
running on localhost 3 1 1 2 and I can

146
00:05:00,020 --> 00:05:02,930
show you in my exploits folder I've got

147
00:05:02,930 --> 00:05:04,520
a number of files here and I'm going to

148
00:05:04,520 --> 00:05:06,139
use input validation which is going to

149
00:05:06,139 --> 00:05:08,870
lead me to a remote code execution I now

150
00:05:08,870 --> 00:05:12,199
show you exactly how that looks so if I

151
00:05:12,199 --> 00:05:14,479
count RTE one we will see as part of

152
00:05:14,479 --> 00:05:16,610
this JPEG creation what we're doing is

153
00:05:16,610 --> 00:05:19,669
we're passing in a URL but bang we break

154
00:05:19,669 --> 00:05:22,190
out straightaway and we perform an or

155
00:05:22,190 --> 00:05:25,520
and then we try and touch a file RCE one

156
00:05:25,520 --> 00:05:28,250
so this is effectively poor input that

157
00:05:28,250 --> 00:05:31,039
is breaking out and executing this touch

158
00:05:31,039 --> 00:05:33,500
command on my remote docker machine let

159
00:05:33,500 --> 00:05:36,260
me quickly jump over jump in into my

160
00:05:36,260 --> 00:05:38,870
docker instance I'm here in my docket

161
00:05:38,870 --> 00:05:41,840
instance you can't see any RCE one but

162
00:05:41,840 --> 00:05:43,760
as soon as I go back over to my browser

163
00:05:43,760 --> 00:05:47,900
and I choose that while RCE one let me

164
00:05:47,900 --> 00:05:51,159
quickly go and grab that file

165
00:05:51,159 --> 00:05:56,180
Celie here we go in my exploits

166
00:05:56,180 --> 00:05:59,060
directory RTE one I'm gonna click resize

167
00:05:59,060 --> 00:06:00,860
on that man we don't actually get

168
00:06:00,860 --> 00:06:02,479
anything why do not get anything because

169
00:06:02,479 --> 00:06:05,180
what this is doing is it's running back

170
00:06:05,180 --> 00:06:08,449
it's run that command inside and if I do

171
00:06:08,449 --> 00:06:10,669
an LS there we go we have a remote code

172
00:06:10,669 --> 00:06:12,860
execution and it's touched that file ok

173
00:06:12,860 --> 00:06:14,240
let's do something a little bit more

174
00:06:14,240 --> 00:06:17,419
interesting let's run our ce2 so let me

175
00:06:17,419 --> 00:06:21,080
cut that oil RC e to jpg we can simply

176
00:06:21,080 --> 00:06:22,009
be something a little bit more

177
00:06:22,009 --> 00:06:23,720
interesting this time using the image

178
00:06:23,720 --> 00:06:25,970
over command we're going to perform a

179
00:06:25,970 --> 00:06:29,000
double you get and we're going to find

180
00:06:29,000 --> 00:06:31,610
this our SH file we're going to pipe

181
00:06:31,610 --> 00:06:34,009
that into its own file from the contents

182
00:06:34,009 --> 00:06:35,690
and we're gonna bash that file so this

183
00:06:35,690 --> 00:06:37,610
is a script that we're going to run so

184
00:06:37,610 --> 00:06:39,770
first things first what we need to do is

185
00:06:39,770 --> 00:06:41,360
we need to let's have a

186
00:06:41,360 --> 00:06:44,780
look actually inside this other Sh so

187
00:06:44,780 --> 00:06:48,169
let's me hat the are like SH and we can

188
00:06:48,169 --> 00:06:50,060
see what we're gonna do is a further W

189
00:06:50,060 --> 00:06:51,710
get when this is executed in the docker

190
00:06:51,710 --> 00:06:53,330
instance we're going to do a double you

191
00:06:53,330 --> 00:06:56,150
get we're gonna pull a net cat okay from

192
00:06:56,150 --> 00:06:59,360
my local host at Port 5,000 we're going

193
00:06:59,360 --> 00:07:00,590
to extract that we're gonna cause bigger

194
00:07:00,590 --> 00:07:01,909
and we're going to make it and then

195
00:07:01,909 --> 00:07:03,620
we're gonna run net cat which is going

196
00:07:03,620 --> 00:07:06,289
to cause a connection back to my machine

197
00:07:06,289 --> 00:07:09,740
on port 31 first one so first thing I

198
00:07:09,740 --> 00:07:12,710
need to do is serve this directory from

199
00:07:12,710 --> 00:07:15,080
my local machine so I am now serving

200
00:07:15,080 --> 00:07:17,719
this directory so this is on my laptop

201
00:07:17,719 --> 00:07:20,029
and this r dot SAT is going to be pulled

202
00:07:20,029 --> 00:07:22,129
from my laptop over to the doctor

203
00:07:22,129 --> 00:07:24,139
instance that docker image that's why

204
00:07:24,139 --> 00:07:26,180
that docker instance is going to execute

205
00:07:26,180 --> 00:07:29,270
this file and pull this net cap from my

206
00:07:29,270 --> 00:07:32,210
local machine over to it extract it run

207
00:07:32,210 --> 00:07:34,340
it and then it's gonna try and connect

208
00:07:34,340 --> 00:07:36,259
to my local machine on a net cat

209
00:07:36,259 --> 00:07:39,590
instance so let me run netcat here we go

210
00:07:39,590 --> 00:07:42,830
net cat and as a listener 31:31 there's

211
00:07:42,830 --> 00:07:44,900
my listener running right we're all set

212
00:07:44,900 --> 00:07:49,669
up let's go back let's resize our te to

213
00:07:49,669 --> 00:07:54,289
now and let's watch this happen our ce2

214
00:07:54,289 --> 00:07:58,009
okay resize nothing's happening and

215
00:07:58,009 --> 00:07:59,960
that's because if I come back to my

216
00:07:59,960 --> 00:08:04,580
application here and I do an LS here we

217
00:08:04,580 --> 00:08:07,159
can see on my Gawker side I do I take

218
00:08:07,159 --> 00:08:09,259
has been downloaded net cat has been

219
00:08:09,259 --> 00:08:11,990
downloaded is this working if I do an LS

220
00:08:11,990 --> 00:08:14,000
on my local machine in this netcat

221
00:08:14,000 --> 00:08:16,159
listener bang we get the NS or that

222
00:08:16,159 --> 00:08:17,839
local machine what else can I do

223
00:08:17,839 --> 00:08:21,800
maybe yeah whoops maybe a PS minus EF PS

224
00:08:21,800 --> 00:08:29,449
minus EF let's cat my etc' password this

225
00:08:29,449 --> 00:08:30,889
doesn't have a user so I'm running as

226
00:08:30,889 --> 00:08:32,929
root I have a root permissions a great

227
00:08:32,929 --> 00:08:35,809
hack okay next up let's jump back how am

228
00:08:35,809 --> 00:08:38,120
i doing for time 8 minutes and 30

229
00:08:38,120 --> 00:08:40,610
seconds this is awesome okay so let's

230
00:08:40,610 --> 00:08:43,929
jump straight back over to keynote and

231
00:08:43,929 --> 00:08:47,390
get going in there so number 5 user

232
00:08:47,390 --> 00:08:49,339
linty linters are awesome whether you're

233
00:08:49,339 --> 00:08:50,779
a developer doing application work

234
00:08:50,779 --> 00:08:52,579
whether you're a developer you know

235
00:08:52,579 --> 00:08:54,589
creating a docker file lint is a great a

236
00:08:54,589 --> 00:08:54,980
proof

237
00:08:54,980 --> 00:08:56,870
for they allow you to follow a set of

238
00:08:56,870 --> 00:08:59,990
rules and effectively police all the

239
00:08:59,990 --> 00:09:01,699
developers that tried to put code in

240
00:09:01,699 --> 00:09:03,440
find mistakes and allow them to fix

241
00:09:03,440 --> 00:09:03,980
early

242
00:09:03,980 --> 00:09:06,350
it's about quick feedback loops and the

243
00:09:06,350 --> 00:09:08,510
minister's excellent for that for pay

244
00:09:08,510 --> 00:09:10,820
donut it's a great linker that allows

245
00:09:10,820 --> 00:09:12,079
you to find and fix

246
00:09:12,079 --> 00:09:14,899
obviously issues in your docker file as

247
00:09:14,899 --> 00:09:16,970
early as you're writing them so here we

248
00:09:16,970 --> 00:09:18,470
can see things like using copy instead

249
00:09:18,470 --> 00:09:20,269
of add for added security there are a

250
00:09:20,269 --> 00:09:23,180
bunch of things that we can add in into

251
00:09:23,180 --> 00:09:25,430
our docker file potentially that are not

252
00:09:25,430 --> 00:09:27,709
or maybe even not adding into our docker

253
00:09:27,709 --> 00:09:30,980
file we should suppose defaults that are

254
00:09:30,980 --> 00:09:32,750
insecure hey Dolan we'll pick this up

255
00:09:32,750 --> 00:09:34,850
for us and it will help us fix them now

256
00:09:34,850 --> 00:09:37,360
the sixth find fix and monitor

257
00:09:37,360 --> 00:09:39,889
occasionally in your application your

258
00:09:39,889 --> 00:09:42,050
open source vulnerabilities again really

259
00:09:42,050 --> 00:09:43,399
really key because your application is

260
00:09:43,399 --> 00:09:45,260
running in your container doesn't matter

261
00:09:45,260 --> 00:09:46,970
how secure your container is if your

262
00:09:46,970 --> 00:09:49,670
application is wide open so when we

263
00:09:49,670 --> 00:09:50,959
think about your application you have a

264
00:09:50,959 --> 00:09:52,610
small amount of code typically and what

265
00:09:52,610 --> 00:09:54,500
you deploy is much much bigger because

266
00:09:54,500 --> 00:09:56,510
you're pulling in dependencies that are

267
00:09:56,510 --> 00:09:59,209
open source and you can see the number

268
00:09:59,209 --> 00:10:01,190
of different owner abilities can exist

269
00:10:01,190 --> 00:10:03,920
in direct as well as direct and here we

270
00:10:03,920 --> 00:10:06,260
can see the largest number is in

271
00:10:06,260 --> 00:10:08,120
indirect on I believe this is very much

272
00:10:08,120 --> 00:10:10,399
because of the number of indirect

273
00:10:10,399 --> 00:10:11,899
dependencies that are pulled in

274
00:10:11,899 --> 00:10:14,420
particularly on on ecosystems like NPM

275
00:10:14,420 --> 00:10:17,990
so let's show you that okay right I'm

276
00:10:17,990 --> 00:10:22,069
going to jump into my my goof

277
00:10:22,069 --> 00:10:23,810
application which is again running in a

278
00:10:23,810 --> 00:10:26,209
container this is a to do application so

279
00:10:26,209 --> 00:10:28,279
I can do things like buy some milk and

280
00:10:28,279 --> 00:10:30,139
it appears there I have an about page

281
00:10:30,139 --> 00:10:32,300
which is being served from my public

282
00:10:32,300 --> 00:10:33,050
directory

283
00:10:33,050 --> 00:10:35,149
now I've already scanned this in snick

284
00:10:35,149 --> 00:10:36,260
and everything that I'm going to show

285
00:10:36,260 --> 00:10:38,389
you today instead is entirely free and

286
00:10:38,389 --> 00:10:40,399
you can run with this on a freemium plan

287
00:10:40,399 --> 00:10:42,980
so I have scanned this directly from

288
00:10:42,980 --> 00:10:45,319
github I can see I've searched on a

289
00:10:45,319 --> 00:10:46,970
directory traversal this is a module

290
00:10:46,970 --> 00:10:49,610
called st which exists in my application

291
00:10:49,610 --> 00:10:52,310
now this is very very easy to fix I'm

292
00:10:52,310 --> 00:10:54,980
currently on 0 to 4 it's fixed in 0 to 5

293
00:10:54,980 --> 00:10:57,380
I can just fix this vulnerability by

294
00:10:57,380 --> 00:10:59,540
clicking this button because we scan

295
00:10:59,540 --> 00:11:00,589
this from github

296
00:11:00,589 --> 00:11:02,269
this is going to automatically send a

297
00:11:02,269 --> 00:11:04,640
pull request directly back to github and

298
00:11:04,640 --> 00:11:05,959
it will pull you up to the minimum

299
00:11:05,959 --> 00:11:08,000
version were required to eliminate that

300
00:11:08,000 --> 00:11:08,510
vulnerable

301
00:11:08,510 --> 00:11:10,699
without pushing so far that there's

302
00:11:10,699 --> 00:11:12,320
going to be you know some migration

303
00:11:12,320 --> 00:11:14,060
problem and here I can show you the foil

304
00:11:14,060 --> 00:11:16,010
change it very simply just pushes you up

305
00:11:16,010 --> 00:11:18,620
from 0 to 4 0 to 5 very very

306
00:11:18,620 --> 00:11:20,120
straightforward it'll also do this for

307
00:11:20,120 --> 00:11:22,160
indirect because it will upgrade with

308
00:11:22,160 --> 00:11:24,230
your direct dependencies to pull in your

309
00:11:24,230 --> 00:11:26,209
transitive dependencies at the right

310
00:11:26,209 --> 00:11:28,160
version but we haven't merged this

311
00:11:28,160 --> 00:11:31,070
so let's actually pack this application

312
00:11:31,070 --> 00:11:32,959
we're gonna hack it because we can see

313
00:11:32,959 --> 00:11:34,699
this is being served by the public

314
00:11:34,699 --> 00:11:37,670
directory so let's grab this and in fact

315
00:11:37,670 --> 00:11:43,639
let me grab this item here ok in this

316
00:11:43,639 --> 00:11:45,620
item what we're gonna do is we're gonna

317
00:11:45,620 --> 00:11:48,079
hack this by very very simply let's

318
00:11:48,079 --> 00:11:50,540
cancel that by very very simply calling

319
00:11:50,540 --> 00:11:52,910
that same command and we can see how

320
00:11:52,910 --> 00:11:54,589
versatile our application is it looks

321
00:11:54,589 --> 00:11:56,269
just as amazing here as it did in the

322
00:11:56,269 --> 00:11:57,680
browser but we're gonna do some throw

323
00:11:57,680 --> 00:11:59,690
red Creek traversal that means breaking

324
00:11:59,690 --> 00:12:02,510
out breaking out a folder that we are in

325
00:12:02,510 --> 00:12:04,430
that any perhaps should go to somewhere

326
00:12:04,430 --> 00:12:06,139
else what we shouldn't be so breaking

327
00:12:06,139 --> 00:12:07,730
out the public by perhaps doing a dot

328
00:12:07,730 --> 00:12:10,519
dot slash in this case st is a good

329
00:12:10,519 --> 00:12:13,100
library that recognizes what a directory

330
00:12:13,100 --> 00:12:14,500
traversal is so we're actually

331
00:12:14,500 --> 00:12:16,670
redirected to the home page because its

332
00:12:16,670 --> 00:12:18,050
senses we're doing directory traversal

333
00:12:18,050 --> 00:12:21,350
however if I instead of doing a bust URL

334
00:12:21,350 --> 00:12:23,930
encode this two percent to eat a sense

335
00:12:23,930 --> 00:12:26,810
to eat we can see this your encoding

336
00:12:26,810 --> 00:12:29,449
isn't picked up by BST library and as a

337
00:12:29,449 --> 00:12:31,069
result we've broken out of this public

338
00:12:31,069 --> 00:12:33,319
directory so what can we do now well now

339
00:12:33,319 --> 00:12:34,910
we have access maybe let's have a look

340
00:12:34,910 --> 00:12:37,370
at the package jason bang package and i

341
00:12:37,370 --> 00:12:38,930
can see all my other direct dependencies

342
00:12:38,930 --> 00:12:41,029
i can break into that perhaps maybe i

343
00:12:41,029 --> 00:12:44,569
can have a look at the app j/s there we

344
00:12:44,569 --> 00:12:46,819
go some source code for me maybe what i

345
00:12:46,819 --> 00:12:49,160
want to do is go back as far as i want

346
00:12:49,160 --> 00:12:50,990
to go all the way to the root directory

347
00:12:50,990 --> 00:12:54,110
let's go all the way back and then

348
00:12:54,110 --> 00:12:55,760
perhaps at this point let's have a look

349
00:12:55,760 --> 00:12:58,699
at the UTC password because i think how

350
00:12:58,699 --> 00:13:00,350
to use our directive so i have root

351
00:13:00,350 --> 00:13:02,630
access to this system okay this is a

352
00:13:02,630 --> 00:13:06,980
great or an interesting exploit to an st

353
00:13:06,980 --> 00:13:11,720
library which is fixed in 0.25 so let's

354
00:13:11,720 --> 00:13:14,480
come back and actually show you one

355
00:13:14,480 --> 00:13:15,620
other thing before we finish off the

356
00:13:15,620 --> 00:13:17,750
presentation and that is what we can do

357
00:13:17,750 --> 00:13:19,880
in smick to also look at your base

358
00:13:19,880 --> 00:13:21,740
images I mentioned about base images

359
00:13:21,740 --> 00:13:22,250
this is a

360
00:13:22,250 --> 00:13:24,320
dan which we ran through docker hub so

361
00:13:24,320 --> 00:13:25,550
we just connected it to docker hub

362
00:13:25,550 --> 00:13:27,680
pointed it to a docker file and you can

363
00:13:27,680 --> 00:13:29,930
see straight away that this is telling

364
00:13:29,930 --> 00:13:32,180
us which version of our of our image

365
00:13:32,180 --> 00:13:34,190
we're currently on the number of

366
00:13:34,190 --> 00:13:36,320
vulnerabilities the severity breakdown

367
00:13:36,320 --> 00:13:38,000
of those vulnerabilities we can have a

368
00:13:38,000 --> 00:13:40,340
look at what base image minor upgrade we

369
00:13:40,340 --> 00:13:42,260
could do as well as a major upgrade and

370
00:13:42,260 --> 00:13:45,200
a number of alternative images as well

371
00:13:45,200 --> 00:13:47,780
as saying how many vulnerabilities you

372
00:13:47,780 --> 00:13:49,430
will get in each of these and the

373
00:13:49,430 --> 00:13:51,200
breakdown so you can massively drop the

374
00:13:51,200 --> 00:13:52,580
number of vulnerabilities including the

375
00:13:52,580 --> 00:13:55,250
severity here very very rapidly just by

376
00:13:55,250 --> 00:13:58,010
making a smart switch and develop a

377
00:13:58,010 --> 00:13:59,900
first security is about being actionable

378
00:13:59,900 --> 00:14:03,470
okay an actionable tool is one that

379
00:14:03,470 --> 00:14:04,910
provides you with those with those

380
00:14:04,910 --> 00:14:06,470
remediations gives you the information

381
00:14:06,470 --> 00:14:09,140
and of the fix not just the information

382
00:14:09,140 --> 00:14:11,930
okay I have one minute left so let me

383
00:14:11,930 --> 00:14:16,160
jump back to my slides and I have a

384
00:14:16,160 --> 00:14:18,500
couple of slides left yes Sam didn't

385
00:14:18,500 --> 00:14:19,490
believe me when I said I was going to do

386
00:14:19,490 --> 00:14:24,500
20 odd slides and and two to two hacks

387
00:14:24,500 --> 00:14:28,300
in in in 2015 minutes but this final

388
00:14:28,300 --> 00:14:30,230
hint I'm going to give you in the last

389
00:14:30,230 --> 00:14:32,510
30 seconds is to use multistage build

390
00:14:32,510 --> 00:14:34,760
for small and secure images what does

391
00:14:34,760 --> 00:14:36,530
this mean well we don't necessarily have

392
00:14:36,530 --> 00:14:38,570
to push to production the very first

393
00:14:38,570 --> 00:14:40,280
build that we have perhaps if we use it

394
00:14:40,280 --> 00:14:42,050
going on or maybe Java we might have a

395
00:14:42,050 --> 00:14:44,450
big image with dev dependencies where we

396
00:14:44,450 --> 00:14:46,670
compile where we build our application

397
00:14:46,670 --> 00:14:48,470
and run tests and everything we don't

398
00:14:48,470 --> 00:14:50,540
want to go to production with all of

399
00:14:50,540 --> 00:14:52,430
those packages we want a smaller image

400
00:14:52,430 --> 00:14:55,610
that we is a thin image that has just an

401
00:14:55,610 --> 00:14:58,010
just the libraries required to run not

402
00:14:58,010 --> 00:14:59,839
necessarily built and that is what a

403
00:14:59,839 --> 00:15:03,080
this kind of image will provide us with

404
00:15:03,080 --> 00:15:05,600
this multistage image there's my summary

405
00:15:05,600 --> 00:15:08,330
seven options if you want to know more

406
00:15:08,330 --> 00:15:10,760
about anything I've said or snick

407
00:15:10,760 --> 00:15:13,550
security scanning for packages in

408
00:15:13,550 --> 00:15:15,860
libraries as well as containers why

409
00:15:15,860 --> 00:15:17,300
don't you pop by the snick booth and

410
00:15:17,300 --> 00:15:19,280
I'll be there and we can chat and it

411
00:15:19,280 --> 00:15:21,530
will be good thank you very much and I

412
00:15:21,530 --> 00:15:23,480
hope that was balsam in 15-second 15

413
00:15:23,480 --> 00:15:25,750
minutes

