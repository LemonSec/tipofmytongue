1
00:00:00,030 --> 00:00:04,049
excellent okay so thank thank you very

2
00:00:04,049 --> 00:00:08,670
much for joining this session about how

3
00:00:08,670 --> 00:00:12,500
to verify for security early and often

4
00:00:12,500 --> 00:00:15,179
so in many organizations the testing for

5
00:00:15,179 --> 00:00:17,850
security usually is done as as can then

6
00:00:17,850 --> 00:00:20,460
fix approach security teams are answers

7
00:00:20,460 --> 00:00:22,560
caning to will conduct some pen test

8
00:00:22,560 --> 00:00:24,449
that trashes the results and then

9
00:00:24,449 --> 00:00:26,279
presents the development team with a

10
00:00:26,279 --> 00:00:29,070
long list of vulnerabilities this is

11
00:00:29,070 --> 00:00:31,380
usually offered referred to as the

12
00:00:31,380 --> 00:00:33,630
hamster wheel of pain the question is

13
00:00:33,630 --> 00:00:36,420
can we do something else better and this

14
00:00:36,420 --> 00:00:38,219
is what we will explore as part of this

15
00:00:38,219 --> 00:00:41,700
presentation where we will start the

16
00:00:41,700 --> 00:00:44,280
discussion by talking about quality and

17
00:00:44,280 --> 00:00:46,350
one of the most cut the one of the

18
00:00:46,350 --> 00:00:49,739
companies that is best known for its

19
00:00:49,739 --> 00:00:55,050
quality bill introduced is Toyota Total

20
00:00:55,050 --> 00:00:57,390
Quality Control in Toyota is achieved

21
00:00:57,390 --> 00:01:01,469
using two principles the quality is

22
00:01:01,469 --> 00:01:04,349
built at every stage and the quality is

23
00:01:04,349 --> 00:01:07,680
continuously continually improved to

24
00:01:07,680 --> 00:01:10,799
achieve this total quality control H and

25
00:01:10,799 --> 00:01:14,790
every member that works within the

26
00:01:14,790 --> 00:01:16,799
company must ensure that only the best

27
00:01:16,799 --> 00:01:18,750
work is then passed on to the next

28
00:01:18,750 --> 00:01:22,860
process no defects no matter how small

29
00:01:22,860 --> 00:01:24,750
they are allowed to move down the

30
00:01:24,750 --> 00:01:27,500
manufacturing line so rather than having

31
00:01:27,500 --> 00:01:31,159
the inspection at the end of the

32
00:01:31,159 --> 00:01:34,020
manufacturing line third that relies on

33
00:01:34,020 --> 00:01:36,720
each individual to be an inspector to

34
00:01:36,720 --> 00:01:39,420
shoot only the best quality for thus is

35
00:01:39,420 --> 00:01:40,140
passed

36
00:01:40,140 --> 00:01:42,000
further down onto the production line

37
00:01:42,000 --> 00:01:44,460
each member is responsible for the

38
00:01:44,460 --> 00:01:46,770
quality of its own work and aims never

39
00:01:46,770 --> 00:01:48,930
to pass poor quality to the next stage

40
00:01:48,930 --> 00:01:52,079
in the process if anything unusual is

41
00:01:52,079 --> 00:01:54,299
noticed then the member can trigger an

42
00:01:54,299 --> 00:01:57,180
alert by pulling the and on cord and

43
00:01:57,180 --> 00:02:00,659
this is a cord which runs alongside the

44
00:02:00,659 --> 00:02:03,560
production line for the whole length

45
00:02:03,560 --> 00:02:06,210
this stops the production line allows

46
00:02:06,210 --> 00:02:08,459
time to investigate before continuing

47
00:02:08,459 --> 00:02:12,930
when this is told then a team leader

48
00:02:12,930 --> 00:02:13,870
will purse

49
00:02:13,870 --> 00:02:16,629
go and see the issue at the respective

50
00:02:16,629 --> 00:02:20,530
station and thank the operator for

51
00:02:20,530 --> 00:02:22,450
stopping a defect from going down the

52
00:02:22,450 --> 00:02:24,580
manufacturing line and that's the magic

53
00:02:24,580 --> 00:02:27,400
ingredient any Toyota employer is fully

54
00:02:27,400 --> 00:02:30,129
empowered and actually expected to pull

55
00:02:30,129 --> 00:02:35,410
the unde on court every time they see or

56
00:02:35,410 --> 00:02:39,549
are aware of a defect when first

57
00:02:39,549 --> 00:02:41,200
discovered by Western manufacturing

58
00:02:41,200 --> 00:02:43,720
companies the anthem court approach was

59
00:02:43,720 --> 00:02:44,980
horrifying

60
00:02:44,980 --> 00:02:48,430
how can you alright anyone on the

61
00:02:48,430 --> 00:02:51,880
factory floor to stop a multi-million

62
00:02:51,880 --> 00:02:55,000
dollars production line this was not

63
00:02:55,000 --> 00:02:59,140
this was the kind of freedom the Western

64
00:02:59,140 --> 00:03:01,090
senior executives were not used to

65
00:03:01,090 --> 00:03:05,319
giving and this was the mechanism that

66
00:03:05,319 --> 00:03:07,120
actually empowered everyone within the

67
00:03:07,120 --> 00:03:09,190
company to stop defects and then fix

68
00:03:09,190 --> 00:03:12,690
them before reaching the customers and

69
00:03:12,690 --> 00:03:16,989
this proven success story has actually

70
00:03:16,989 --> 00:03:20,260
has been later being taken over by the

71
00:03:20,260 --> 00:03:22,000
company probably not more most

72
00:03:22,000 --> 00:03:27,430
noticeable is the Amazon a little bit

73
00:03:27,430 --> 00:03:29,230
about myself my name is Katie Anton and

74
00:03:29,230 --> 00:03:30,489
I come from a software development

75
00:03:30,489 --> 00:03:34,959
background I'm also a while either

76
00:03:34,959 --> 00:03:37,150
running couple of cause projects in the

77
00:03:37,150 --> 00:03:39,069
chapter and I currently work as

78
00:03:39,069 --> 00:03:41,139
application security consultant at a

79
00:03:41,139 --> 00:03:44,169
Varrick code and this is where I work

80
00:03:44,169 --> 00:03:46,150
with development teams architects and

81
00:03:46,150 --> 00:03:49,870
help them to correctly remediate the

82
00:03:49,870 --> 00:03:51,700
security vulnerabilities that have might

83
00:03:51,700 --> 00:03:56,169
have been identified by various tools so

84
00:03:56,169 --> 00:03:58,180
the software development cycle consists

85
00:03:58,180 --> 00:04:00,099
of some basic cycles are the

86
00:04:00,099 --> 00:04:03,280
requirements for the simplicity of this

87
00:04:03,280 --> 00:04:05,319
presentation are just considered the

88
00:04:05,319 --> 00:04:06,790
requirements and designing the same

89
00:04:06,790 --> 00:04:08,889
thing there are more thing that can be

90
00:04:08,889 --> 00:04:11,739
added at the design stage but not within

91
00:04:11,739 --> 00:04:16,029
this one this presentation then once the

92
00:04:16,029 --> 00:04:17,950
requirements have been identified then

93
00:04:17,950 --> 00:04:20,829
we have to implement the specific piece

94
00:04:20,829 --> 00:04:24,219
of functionality coding then we have

95
00:04:24,219 --> 00:04:26,469
testing to verify that the code is about

96
00:04:26,469 --> 00:04:27,760
is being what it's about

97
00:04:27,760 --> 00:04:29,890
to do and then deployment when the

98
00:04:29,890 --> 00:04:32,140
software is packaged and deployed in

99
00:04:32,140 --> 00:04:36,010
production great so let's start with the

100
00:04:36,010 --> 00:04:38,110
requirements because one of the problem

101
00:04:38,110 --> 00:04:39,370
is how can you think of security

102
00:04:39,370 --> 00:04:42,160
requirement it might be a little bit

103
00:04:42,160 --> 00:04:44,590
tricky especially for non security

104
00:04:44,590 --> 00:04:49,360
people thankfully there is an ASP

105
00:04:49,360 --> 00:04:53,140
project for this which is great to use

106
00:04:53,140 --> 00:04:56,130
it as a for guidance and this is the AWS

107
00:04:56,130 --> 00:04:57,730
application security verification

108
00:04:57,730 --> 00:05:00,850
standard or for short SPS it's a

109
00:05:00,850 --> 00:05:03,160
comprehensive project it has 14

110
00:05:03,160 --> 00:05:05,350
categories security verification

111
00:05:05,350 --> 00:05:08,680
requirements split on three levels as I

112
00:05:08,680 --> 00:05:11,920
say that's for example someone wants to

113
00:05:11,920 --> 00:05:15,070
you implement new functionality or

114
00:05:15,070 --> 00:05:17,380
refactoring so for example

115
00:05:17,380 --> 00:05:19,150
authentication and this is one of the

116
00:05:19,150 --> 00:05:21,400
requirements from the latest version of

117
00:05:21,400 --> 00:05:24,760
the SDS we should verify the application

118
00:05:24,760 --> 00:05:26,740
generates a new session token all user

119
00:05:26,740 --> 00:05:33,880
indicator authentication to consider

120
00:05:33,880 --> 00:05:36,070
this requirement into the software

121
00:05:36,070 --> 00:05:38,620
development what we can do is is to use

122
00:05:38,620 --> 00:05:41,920
user stories these are theory focuses on

123
00:05:41,920 --> 00:05:45,340
the perspective of the end user and

124
00:05:45,340 --> 00:05:47,530
describes the functionality based on

125
00:05:47,530 --> 00:05:49,960
what the user wants the system to do for

126
00:05:49,960 --> 00:05:53,740
them for this we can use use cases and

127
00:05:53,740 --> 00:05:56,710
this is a way to actually say as a user

128
00:05:56,710 --> 00:06:00,870
I want to do X Y Z in order to achieve a

129
00:06:00,870 --> 00:06:05,170
goal this is one way but we can also use

130
00:06:05,170 --> 00:06:07,510
this particular one to think from a

131
00:06:07,510 --> 00:06:09,700
tackers point of view and that's where

132
00:06:09,700 --> 00:06:12,760
we can put our black hat on in this case

133
00:06:12,760 --> 00:06:15,280
they are called misuse cases abuse or

134
00:06:15,280 --> 00:06:17,770
misuse cases and this is what where we

135
00:06:17,770 --> 00:06:19,420
can think of as an attacker

136
00:06:19,420 --> 00:06:22,270
I want my system to not be able to do x

137
00:06:22,270 --> 00:06:26,470
y&z in order to compromise steal

138
00:06:26,470 --> 00:06:29,100
information disable any key function

139
00:06:29,100 --> 00:06:33,010
moving back to our requirement so this

140
00:06:33,010 --> 00:06:35,140
would translate the initial requirement

141
00:06:35,140 --> 00:06:38,200
does it picked will translate into a use

142
00:06:38,200 --> 00:06:40,510
case

143
00:06:40,510 --> 00:06:43,060
an abuse case and both of them can be

144
00:06:43,060 --> 00:06:46,660
then used to be converted in unit tech

145
00:06:46,660 --> 00:06:48,910
the respective unit tests and functional

146
00:06:48,910 --> 00:06:53,080
tests so let's say that we have

147
00:06:53,080 --> 00:06:55,210
identified now the requirements and we

148
00:06:55,210 --> 00:06:56,830
are moving into the development this is

149
00:06:56,830 --> 00:06:58,870
the part where a developer will start

150
00:06:58,870 --> 00:07:01,690
implementing the required code changes

151
00:07:01,690 --> 00:07:02,860
into the so called

152
00:07:02,860 --> 00:07:04,480
feature branch this is kind of a

153
00:07:04,480 --> 00:07:06,130
standard into the software development

154
00:07:06,130 --> 00:07:10,540
cycle at this stage when the developer

155
00:07:10,540 --> 00:07:17,860
works in its home code what he can use

156
00:07:17,860 --> 00:07:23,620
or she can use is to ensure that first

157
00:07:23,620 --> 00:07:28,600
of all the software will have those

158
00:07:28,600 --> 00:07:30,490
requirements that we have identified at

159
00:07:30,490 --> 00:07:33,250
the requirement stage and to implement

160
00:07:33,250 --> 00:07:36,610
any unit tests that can be derived from

161
00:07:36,610 --> 00:07:40,390
that security requirement also this is a

162
00:07:40,390 --> 00:07:43,210
great place to actually have some secure

163
00:07:43,210 --> 00:07:46,120
coding and use the development for the

164
00:07:46,120 --> 00:07:49,110
development secure coding some great a

165
00:07:49,110 --> 00:07:53,110
great loss project is the Osprey series

166
00:07:53,110 --> 00:07:56,230
what this house gives you specific

167
00:07:56,230 --> 00:07:59,440
guidance for a wide range of life

168
00:07:59,440 --> 00:08:02,850
languages and the white range of

169
00:08:02,850 --> 00:08:07,660
security vulnerabilities and also the

170
00:08:07,660 --> 00:08:11,350
this at this stage when writing the code

171
00:08:11,350 --> 00:08:13,780
another tool that you can use is to use

172
00:08:13,780 --> 00:08:20,080
an ID security plugin to actually help

173
00:08:20,080 --> 00:08:24,790
scan law that code that has been

174
00:08:24,790 --> 00:08:26,200
developed for that particular

175
00:08:26,200 --> 00:08:27,700
functionality so that's another way to

176
00:08:27,700 --> 00:08:30,820
test for security to verify for security

177
00:08:30,820 --> 00:08:33,159
while you are still in your ID from the

178
00:08:33,159 --> 00:08:35,830
comfort of your ID there is intelligent

179
00:08:35,830 --> 00:08:38,979
eclipse visuals through your ever fancy

180
00:08:38,979 --> 00:08:41,309
IDE you want

181
00:08:41,309 --> 00:08:46,300
so at requirement after the code has

182
00:08:46,300 --> 00:08:50,440
been done it comes the point when this

183
00:08:50,440 --> 00:08:53,730
new development is merged

184
00:08:53,730 --> 00:08:58,139
into the code this is another good point

185
00:08:58,139 --> 00:09:00,779
for security verification and for this

186
00:09:00,779 --> 00:09:03,899
can be used bog standard peer code

187
00:09:03,899 --> 00:09:07,079
review if it is implemented where the

188
00:09:07,079 --> 00:09:12,360
team is trained to take into account

189
00:09:12,360 --> 00:09:15,959
various security standards there as well

190
00:09:15,959 --> 00:09:21,810
various security coding basics this is a

191
00:09:21,810 --> 00:09:25,800
good way as well to share the security

192
00:09:25,800 --> 00:09:28,709
knowledge within the team and another

193
00:09:28,709 --> 00:09:34,019
point to verify for security so we can

194
00:09:34,019 --> 00:09:36,630
start from the requirement and this is

195
00:09:36,630 --> 00:09:40,440
where we can use the ass as BS to

196
00:09:40,440 --> 00:09:43,170
identify the security requirements for

197
00:09:43,170 --> 00:09:45,510
the piece of software functionality we

198
00:09:45,510 --> 00:09:49,560
want to develop refactor there during

199
00:09:49,560 --> 00:09:54,019
the coding the implementation we can

200
00:09:54,019 --> 00:09:58,079
start identifying the unit tests from

201
00:09:58,079 --> 00:10:02,130
the edge this requirement applies secure

202
00:10:02,130 --> 00:10:05,670
coding and have helped us a guidance the

203
00:10:05,670 --> 00:10:10,319
ostrich's sheets and verify for security

204
00:10:10,319 --> 00:10:16,019
using IDE plugin to help you test your

205
00:10:16,019 --> 00:10:18,899
code in the comfort of your own ID and

206
00:10:18,899 --> 00:10:22,230
again have the peer review as an extract

207
00:10:22,230 --> 00:10:27,029
point of checking for security once the

208
00:10:27,029 --> 00:10:31,800
code now has been into the main

209
00:10:31,800 --> 00:10:35,010
development branch or master we can

210
00:10:35,010 --> 00:10:42,089
actually trigger at this point test and

211
00:10:42,089 --> 00:10:44,190
the first that can be used are the

212
00:10:44,190 --> 00:10:46,529
functional tests which have been derived

213
00:10:46,529 --> 00:10:49,500
from the SPS requirements but also can

214
00:10:49,500 --> 00:10:53,190
trigger for example source code analyses

215
00:10:53,190 --> 00:10:56,490
assess to verify for the security of the

216
00:10:56,490 --> 00:10:59,519
entire code and when we deploy we

217
00:10:59,519 --> 00:11:02,339
prepare the code to be deployed in

218
00:11:02,339 --> 00:11:04,730
production

219
00:11:05,480 --> 00:11:09,940
this is the point where you now are

220
00:11:09,940 --> 00:11:12,530
creating your release candidate branch

221
00:11:12,530 --> 00:11:15,290
and then this is when you start testing

222
00:11:15,290 --> 00:11:17,540
of what is the code that will actually

223
00:11:17,540 --> 00:11:20,600
go in production and at this point you

224
00:11:20,600 --> 00:11:22,070
can actually you can have the entire

225
00:11:22,070 --> 00:11:25,930
suite of functional tests including the

226
00:11:25,930 --> 00:11:28,870
easiest ones that have been derived

227
00:11:28,870 --> 00:11:31,250
sawdust but these are not the only one

228
00:11:31,250 --> 00:11:34,580
and you can actually have other tools

229
00:11:34,580 --> 00:11:40,520
you can automate some of these you can

230
00:11:40,520 --> 00:11:43,520
also happen at raishin testing if that

231
00:11:43,520 --> 00:11:45,530
will suit your cycle although the

232
00:11:45,530 --> 00:11:47,780
penetration tests are manual so they're

233
00:11:47,780 --> 00:11:50,420
more that can be done at this stage but

234
00:11:50,420 --> 00:11:53,110
this is just a suggestion

235
00:11:53,110 --> 00:11:58,600
great so hopefully in this very short

236
00:11:58,600 --> 00:12:01,100
presentation I have give you an

237
00:12:01,100 --> 00:12:05,000
understanding give the points and high

238
00:12:05,000 --> 00:12:07,850
level of what we use at each of the

239
00:12:07,850 --> 00:12:10,000
stages of the software development cycle

240
00:12:10,000 --> 00:12:13,910
in order to verify for security from the

241
00:12:13,910 --> 00:12:17,110
beginning from the requirements place

242
00:12:17,110 --> 00:12:21,980
alert they can be in the ICD 5 line but

243
00:12:21,980 --> 00:12:24,980
also can be humans like like during the

244
00:12:24,980 --> 00:12:27,670
peer code review

