1
00:00:00,000 --> 00:00:01,650
so my name is Justin Massey I'm a

2
00:00:01,650 --> 00:00:03,840
product manager for data dog

3
00:00:03,840 --> 00:00:06,210
and rather than dive into the demo the

4
00:00:06,210 --> 00:00:07,379
data dog product or talked too much

5
00:00:07,379 --> 00:00:09,450
about it we have a sponsor booth for

6
00:00:09,450 --> 00:00:11,160
that you can check out that but let's

7
00:00:11,160 --> 00:00:15,269
dive deep into audit logs I work on our

8
00:00:15,269 --> 00:00:17,100
threats about threat detection product

9
00:00:17,100 --> 00:00:20,220
and I I work with a lot of our customers

10
00:00:20,220 --> 00:00:22,800
I looked to them about their application

11
00:00:22,800 --> 00:00:25,920
logs and best practices and I've worked

12
00:00:25,920 --> 00:00:28,289
on many different environments before

13
00:00:28,289 --> 00:00:30,689
and the application logs always seem to

14
00:00:30,689 --> 00:00:33,420
be lacking some information so one thing

15
00:00:33,420 --> 00:00:35,010
we want to do with these application

16
00:00:35,010 --> 00:00:36,870
logs is we want to do analytics on them

17
00:00:36,870 --> 00:00:40,559
and analytics we have like our analytics

18
00:00:40,559 --> 00:00:42,329
on the right-hand side and our actual

19
00:00:42,329 --> 00:00:44,789
logs on the left-hand side now these are

20
00:00:44,789 --> 00:00:46,770
all of our authentication events so

21
00:00:46,770 --> 00:00:51,420
imagine you wanted to detect a an

22
00:00:51,420 --> 00:00:53,460
outlier and you see that this outlier

23
00:00:53,460 --> 00:00:57,690
this user admin has more is it has more

24
00:00:57,690 --> 00:00:59,520
failed logins than the rest if you

25
00:00:59,520 --> 00:01:01,739
wanted to drill down to this specific

26
00:01:01,739 --> 00:01:03,960
user you want to be able to ask

27
00:01:03,960 --> 00:01:06,450
questions about that why and you may

28
00:01:06,450 --> 00:01:08,070
want to drill down to a specific IP

29
00:01:08,070 --> 00:01:09,869
address and you want to take a look at

30
00:01:09,869 --> 00:01:12,150
that now you want to you you've now

31
00:01:12,150 --> 00:01:13,950
quickly drilled down you can see all of

32
00:01:13,950 --> 00:01:17,100
this information regarding this specific

33
00:01:17,100 --> 00:01:19,799
audit blog but first to get here you

34
00:01:19,799 --> 00:01:21,900
have to have your audit logs in a good

35
00:01:21,900 --> 00:01:24,840
condition the next thing you want to do

36
00:01:24,840 --> 00:01:26,430
on these audit logs is you want to do

37
00:01:26,430 --> 00:01:28,470
threat detection on them you're going to

38
00:01:28,470 --> 00:01:30,270
want to look at they sim audit logs and

39
00:01:30,270 --> 00:01:34,020
ensure for this example you may be

40
00:01:34,020 --> 00:01:35,579
wanting to detect it like a potential

41
00:01:35,579 --> 00:01:39,150
potential brute-force attack now another

42
00:01:39,150 --> 00:01:42,509
thing that you use your audit logs for

43
00:01:42,509 --> 00:01:45,149
is customers ask for them and then when

44
00:01:45,149 --> 00:01:47,130
they're asking for them it's typically

45
00:01:47,130 --> 00:01:49,710
not at a good situation your audit the

46
00:01:49,710 --> 00:01:51,540
customers are asking for those auto logs

47
00:01:51,540 --> 00:01:52,860
because something else in the

48
00:01:52,860 --> 00:01:55,079
environment is going going on maybe they

49
00:01:55,079 --> 00:01:56,520
have a security incident and they are

50
00:01:56,520 --> 00:01:58,439
investigating so you want to be able to

51
00:01:58,439 --> 00:02:00,240
return these audit logs in a quick

52
00:02:00,240 --> 00:02:04,049
manner next after the customers ask for

53
00:02:04,049 --> 00:02:05,969
them they're going to ask you to delete

54
00:02:05,969 --> 00:02:07,740
them so this is the right to be

55
00:02:07,740 --> 00:02:10,590
forgotten so you want your audit logs in

56
00:02:10,590 --> 00:02:12,709
a good format where you can quickly

57
00:02:12,709 --> 00:02:13,850
delete

58
00:02:13,850 --> 00:02:16,310
when the customers have requested that

59
00:02:16,310 --> 00:02:21,950
so yes what's the problem well I've

60
00:02:21,950 --> 00:02:25,190
logged into many different applications

61
00:02:25,190 --> 00:02:26,480
when I'm starting a new job and I've

62
00:02:26,480 --> 00:02:28,240
taken a look at our application logs and

63
00:02:28,240 --> 00:02:31,040
something like this happens you see John

64
00:02:31,040 --> 00:02:33,860
Doe logs in and it doesn't necessarily

65
00:02:33,860 --> 00:02:37,250
say what IP address it was from the next

66
00:02:37,250 --> 00:02:39,170
one is a login from that's likely

67
00:02:39,170 --> 00:02:42,950
addressed but what user just did it then

68
00:02:42,950 --> 00:02:44,870
you have password reset was cents it to

69
00:02:44,870 --> 00:02:46,400
who you're not answering all the

70
00:02:46,400 --> 00:02:48,530
questions here and even though that this

71
00:02:48,530 --> 00:02:51,170
John Doe logged in and this failed login

72
00:02:51,170 --> 00:02:53,000
these proposed the communication events

73
00:02:53,000 --> 00:02:54,590
where the outcome may have been

74
00:02:54,590 --> 00:02:56,330
successful or unsuccessful there are

75
00:02:56,330 --> 00:02:59,120
very similar logs but you're not showing

76
00:02:59,120 --> 00:03:02,860
that and it's going to be very hard to

77
00:03:02,860 --> 00:03:05,980
present this in an analytical way or

78
00:03:05,980 --> 00:03:08,060
search for these logs once they're

79
00:03:08,060 --> 00:03:11,330
stored so if you want to do things like

80
00:03:11,330 --> 00:03:14,210
show your top audit logs you need a

81
00:03:14,210 --> 00:03:17,780
better format so how do we talk to

82
00:03:17,780 --> 00:03:20,330
developers about these audit logs what

83
00:03:20,330 --> 00:03:23,510
what can we suggest well I'm gonna pose

84
00:03:23,510 --> 00:03:25,630
some very very very basic questions we

85
00:03:25,630 --> 00:03:27,770
want to know who is doing something

86
00:03:27,770 --> 00:03:31,040
typically this is a user what is that

87
00:03:31,040 --> 00:03:34,160
user doing where is that occurring from

88
00:03:34,160 --> 00:03:38,510
maybe that's what an IP address when did

89
00:03:38,510 --> 00:03:39,550
it occur

90
00:03:39,550 --> 00:03:43,190
why so you may don't always be able to

91
00:03:43,190 --> 00:03:44,510
answer the question of why why did John

92
00:03:44,510 --> 00:03:47,240
do login I don't know but if your audit

93
00:03:47,240 --> 00:03:51,680
logs said we lock this user out because

94
00:03:51,680 --> 00:03:54,170
the user failed to login five times

95
00:03:54,170 --> 00:03:56,210
that's your reason why but you may not

96
00:03:56,210 --> 00:03:59,600
have a Y for every single log so we take

97
00:03:59,600 --> 00:04:02,140
this example log we have the timestamp

98
00:04:02,140 --> 00:04:06,770
John Doe logged in from 1.2.3.4 with

99
00:04:06,770 --> 00:04:09,140
OAuth so this gives us a little bit more

100
00:04:09,140 --> 00:04:10,970
information it asks it answers all of

101
00:04:10,970 --> 00:04:14,840
those questions however your developers

102
00:04:14,840 --> 00:04:16,820
may have done this for OAuth but for

103
00:04:16,820 --> 00:04:18,500
something like sam'l the format may have

104
00:04:18,500 --> 00:04:21,048
changed even though the login was still

105
00:04:21,048 --> 00:04:23,479
a login it was just a different type so

106
00:04:23,479 --> 00:04:25,700
being able to search these it makes it

107
00:04:25,700 --> 00:04:26,889
very difficult

108
00:04:26,889 --> 00:04:29,050
so I'm gonna pose that we use a little

109
00:04:29,050 --> 00:04:31,719
bit more structured format what if we

110
00:04:31,719 --> 00:04:34,900
said user equals John Doe and we've used

111
00:04:34,900 --> 00:04:37,689
the equal as a delimiter and we've put

112
00:04:37,689 --> 00:04:40,259
quotations around that users name and

113
00:04:40,259 --> 00:04:42,430
we've said that the event is an

114
00:04:42,430 --> 00:04:44,620
authentication event the outcome of that

115
00:04:44,620 --> 00:04:47,590
event was successful so we answered to

116
00:04:47,590 --> 00:04:49,389
what questions here what was the event

117
00:04:49,389 --> 00:04:52,029
and what was the outcome now we have an

118
00:04:52,029 --> 00:04:55,360
IP address where they logged in from the

119
00:04:55,360 --> 00:04:58,840
type of authentication and the type type

120
00:04:58,840 --> 00:05:00,580
people's on it we've appended this audit

121
00:05:00,580 --> 00:05:02,110
so that we can quickly search to search

122
00:05:02,110 --> 00:05:03,759
and filter down to all of our audit

123
00:05:03,759 --> 00:05:07,330
events now a machine can easily read

124
00:05:07,330 --> 00:05:11,379
this you're seeing this imagine if you

125
00:05:11,379 --> 00:05:16,300
had a grok parser or some sort of reg X

126
00:05:16,300 --> 00:05:18,520
you can quickly filter down these key

127
00:05:18,520 --> 00:05:19,960
value pairs and you get something that

128
00:05:19,960 --> 00:05:22,990
looks like this user John Doe event and

129
00:05:22,990 --> 00:05:25,509
then you can see how much easier it is

130
00:05:25,509 --> 00:05:27,879
to gather that information about what

131
00:05:27,879 --> 00:05:30,490
the specific event was and graph this

132
00:05:30,490 --> 00:05:33,669
and display this and whatever way you're

133
00:05:33,669 --> 00:05:36,969
doing your log management now how do you

134
00:05:36,969 --> 00:05:38,080
get there

135
00:05:38,080 --> 00:05:40,000
you want some sort of central audit log

136
00:05:40,000 --> 00:05:43,730
function this is a very basic function

137
00:05:43,730 --> 00:05:44,909
[Music]

138
00:05:44,909 --> 00:05:48,509
pseudocode looks something like python

139
00:05:48,509 --> 00:05:50,439
it takes in a couple of different

140
00:05:50,439 --> 00:05:52,120
attributes it would take in the request

141
00:05:52,120 --> 00:05:56,259
object the event and the outcome now

142
00:05:56,259 --> 00:05:58,149
you'll see that the first thing I do in

143
00:05:58,149 --> 00:06:01,240
the outcome is I put it allow list here

144
00:06:01,240 --> 00:06:04,120
for success in failure and the success

145
00:06:04,120 --> 00:06:06,879
and failure I do this because there's

146
00:06:06,879 --> 00:06:08,649
many different ways to say success you

147
00:06:08,649 --> 00:06:11,199
can say success successful or failure

148
00:06:11,199 --> 00:06:13,389
you can say fail failed failure that

149
00:06:13,389 --> 00:06:15,069
there's a lot of different ways to say

150
00:06:15,069 --> 00:06:16,839
this so we just put a little allow list

151
00:06:16,839 --> 00:06:19,330
here and require that they are in this

152
00:06:19,330 --> 00:06:23,259
list the next thing we do is we put it

153
00:06:23,259 --> 00:06:25,330
in that exact format and we're gonna let

154
00:06:25,330 --> 00:06:28,360
the let the logger handle the timestamp

155
00:06:28,360 --> 00:06:32,740
format so once you have this centralized

156
00:06:32,740 --> 00:06:34,569
audit function I want you to monitor it

157
00:06:34,569 --> 00:06:37,690
and what I mean by monitor is if there

158
00:06:37,690 --> 00:06:39,789
are changes to this file maybe this is

159
00:06:39,789 --> 00:06:40,870
just in like

160
00:06:40,870 --> 00:06:42,940
if this was like say it's like lager pie

161
00:06:42,940 --> 00:06:45,490
if there's ever a change to this file

162
00:06:45,490 --> 00:06:47,440
you should know so whether that's

163
00:06:47,440 --> 00:06:49,870
setting a code owners file in github or

164
00:06:49,870 --> 00:06:52,570
having something in a CI check please

165
00:06:52,570 --> 00:06:55,720
monitor make sure that it's when it has

166
00:06:55,720 --> 00:06:56,470
changed

167
00:06:56,470 --> 00:07:00,669
you are aware of that change so a couple

168
00:07:00,669 --> 00:07:03,460
things to keep in mind when you're

169
00:07:03,460 --> 00:07:05,560
talking about users may be you may be

170
00:07:05,560 --> 00:07:07,030
asking the question you know was this

171
00:07:07,030 --> 00:07:09,880
request from an API key or was it from a

172
00:07:09,880 --> 00:07:12,580
browser session or what happens if the

173
00:07:12,580 --> 00:07:16,900
user has five API keys and I need to one

174
00:07:16,900 --> 00:07:19,180
of these API keys is compromised so I

175
00:07:19,180 --> 00:07:20,590
need to know which one was the one

176
00:07:20,590 --> 00:07:24,400
making the request so you should take us

177
00:07:24,400 --> 00:07:26,020
in mind when adding this into your log

178
00:07:26,020 --> 00:07:29,229
file next thing I want to talk about is

179
00:07:29,229 --> 00:07:32,229
IP issues I've seen many many logs where

180
00:07:32,229 --> 00:07:34,120
they are in the wrong where they're

181
00:07:34,120 --> 00:07:36,070
logging the wrong IP address and

182
00:07:36,070 --> 00:07:38,530
typically this happens in HTTP logs due

183
00:07:38,530 --> 00:07:40,300
to the improper use of x-forwarded-for

184
00:07:40,300 --> 00:07:43,870
headers you take a look at this if John

185
00:07:43,870 --> 00:07:46,260
Doe makes a request to a web application

186
00:07:46,260 --> 00:07:49,600
through a load balancer you may be

187
00:07:49,600 --> 00:07:52,270
getting the IP address of the load

188
00:07:52,270 --> 00:07:54,039
balancer and logging that into your

189
00:07:54,039 --> 00:07:56,260
application looks that is not good that

190
00:07:56,260 --> 00:07:59,320
is not what you want you want the

191
00:07:59,320 --> 00:08:03,460
original IP address of John Doe so

192
00:08:03,460 --> 00:08:06,039
please please please make sure if your

193
00:08:06,039 --> 00:08:07,720
web application should only be external

194
00:08:07,720 --> 00:08:09,789
to external applications maybe you can

195
00:08:09,789 --> 00:08:14,530
make sure that the IP address matches an

196
00:08:14,530 --> 00:08:17,680
external IP address format next thing I

197
00:08:17,680 --> 00:08:20,110
want to talk about are joints if you

198
00:08:20,110 --> 00:08:21,580
take that same scenario where you have a

199
00:08:21,580 --> 00:08:24,100
load balancer in a web application you

200
00:08:24,100 --> 00:08:26,139
may want to gather other information

201
00:08:26,139 --> 00:08:28,780
from that initial request in your web

202
00:08:28,780 --> 00:08:30,880
application log you may not have the

203
00:08:30,880 --> 00:08:32,890
user agent but you want to know that

204
00:08:32,890 --> 00:08:35,320
user agent information how do you gather

205
00:08:35,320 --> 00:08:37,929
that information well if you don't have

206
00:08:37,929 --> 00:08:40,120
an ID to join them together it's not

207
00:08:40,120 --> 00:08:41,169
going to be possible

208
00:08:41,169 --> 00:08:45,550
so I recommend adding a some sort of

209
00:08:45,550 --> 00:08:47,470
request ID in here so you can trace it

210
00:08:47,470 --> 00:08:49,750
through the entire application stack and

211
00:08:49,750 --> 00:08:51,910
that should be logged in all the all the

212
00:08:51,910 --> 00:08:53,800
logs so that you can quickly filter down

213
00:08:53,800 --> 00:08:54,750
and see every

214
00:08:54,750 --> 00:09:00,600
single every every single log that was

215
00:09:00,600 --> 00:09:04,590
associated with that request so next

216
00:09:04,590 --> 00:09:05,580
thing I want to talk about are some

217
00:09:05,580 --> 00:09:08,660
considerations with which events to log

218
00:09:08,660 --> 00:09:11,550
when we're talking about API we commonly

219
00:09:11,550 --> 00:09:14,100
talked about crud create reads updates

220
00:09:14,100 --> 00:09:16,530
deletes one of these is not like the

221
00:09:16,530 --> 00:09:20,610
other reads reads are non state changing

222
00:09:20,610 --> 00:09:23,780
API calls however they should be logged

223
00:09:23,780 --> 00:09:27,090
but you're going to have a large number

224
00:09:27,090 --> 00:09:29,220
of reads very very likely you're gonna

225
00:09:29,220 --> 00:09:31,620
have a high number of reads so you may

226
00:09:31,620 --> 00:09:34,710
need to consider the storage of the

227
00:09:34,710 --> 00:09:37,020
reads differently than the stateful

228
00:09:37,020 --> 00:09:39,420
configurations now don't know don't

229
00:09:39,420 --> 00:09:40,680
think you don't have to log the reads

230
00:09:40,680 --> 00:09:42,660
you should log the reads because you're

231
00:09:42,660 --> 00:09:44,250
going to need say the data breach

232
00:09:44,250 --> 00:09:47,570
happens and you want to identify what

233
00:09:47,570 --> 00:09:50,190
content was accessed you want those

234
00:09:50,190 --> 00:09:54,420
reads so what should you monitor for

235
00:09:54,420 --> 00:09:57,330
this is just a when you're when you're

236
00:09:57,330 --> 00:09:58,500
figuring out what's a log you need to

237
00:09:58,500 --> 00:09:59,910
think about like what exactly are you

238
00:09:59,910 --> 00:10:01,920
monitoring for and if you're in security

239
00:10:01,920 --> 00:10:03,510
it's not only security use cases

240
00:10:03,510 --> 00:10:05,520
there's also operational use cases you

241
00:10:05,520 --> 00:10:07,440
need to ask so just think about this

242
00:10:07,440 --> 00:10:09,240
write down exactly what you want to

243
00:10:09,240 --> 00:10:11,339
monitor for and make sure that those

244
00:10:11,339 --> 00:10:15,870
events make it into the logs a couple of

245
00:10:15,870 --> 00:10:17,820
things extra things to ponder is how

246
00:10:17,820 --> 00:10:19,770
you're storing your audit logs you know

247
00:10:19,770 --> 00:10:21,330
are you storing these on disk and then

248
00:10:21,330 --> 00:10:24,089
replicating them to you know some

249
00:10:24,089 --> 00:10:28,560
offline or like s3 are you making sure

250
00:10:28,560 --> 00:10:32,190
that these can only be like read once

251
00:10:32,190 --> 00:10:34,770
right many like how are you storing

252
00:10:34,770 --> 00:10:38,310
these audit logs how do you handle those

253
00:10:38,310 --> 00:10:40,830
deletion request I mentioned earlier if

254
00:10:40,830 --> 00:10:44,580
you have logged that information and in

255
00:10:44,580 --> 00:10:46,950
a nice format it maybe is going to make

256
00:10:46,950 --> 00:10:48,810
your life a lot easier to run a script

257
00:10:48,810 --> 00:10:50,730
and delete that content that has to be

258
00:10:50,730 --> 00:10:55,890
deleted with that that's that's all the

259
00:10:55,890 --> 00:11:00,710
talk today Sam I'll hand it back to you

