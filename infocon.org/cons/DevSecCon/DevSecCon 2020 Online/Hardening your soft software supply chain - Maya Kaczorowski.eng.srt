1
00:00:00,000 --> 00:00:02,340
so as you know groups I mentioned I'm I

2
00:00:02,340 --> 00:00:04,110
am a product manager I could help I work

3
00:00:04,110 --> 00:00:06,350
on software supply chain security and

4
00:00:06,350 --> 00:00:09,150
today we'll be covering software supply

5
00:00:09,150 --> 00:00:10,530
chain vulnerabilities first we'll talk

6
00:00:10,530 --> 00:00:11,969
about what is how software supply chain

7
00:00:11,969 --> 00:00:13,519
is if you're unfamiliar with that term

8
00:00:13,519 --> 00:00:15,990
well dive right in and cover known

9
00:00:15,990 --> 00:00:17,699
compromises and specifically we'll cover

10
00:00:17,699 --> 00:00:19,800
common kinds of attacks where they're

11
00:00:19,800 --> 00:00:22,199
likely to happen specific examples that

12
00:00:22,199 --> 00:00:23,070
have occurred in the last couple of

13
00:00:23,070 --> 00:00:25,140
years and then that'll let us understand

14
00:00:25,140 --> 00:00:27,300
how and why these attacks happen then

15
00:00:27,300 --> 00:00:28,920
we'll discuss how to determine your

16
00:00:28,920 --> 00:00:32,159
dependencies track metadata for those

17
00:00:32,159 --> 00:00:33,719
and be notified of new security patches

18
00:00:33,719 --> 00:00:35,340
that you should apply including best

19
00:00:35,340 --> 00:00:36,570
practices to make this easier on your

20
00:00:36,570 --> 00:00:38,550
dev team this includes not only your

21
00:00:38,550 --> 00:00:40,170
dependencies also like good security

22
00:00:40,170 --> 00:00:42,030
hygiene like connecting code reviews for

23
00:00:42,030 --> 00:00:44,070
your environment and if you're not a

24
00:00:44,070 --> 00:00:45,420
developer we'll also cover what you can

25
00:00:45,420 --> 00:00:47,250
do to help report and fix issues and

26
00:00:47,250 --> 00:00:48,870
open source code to increase security

27
00:00:48,870 --> 00:00:53,399
and Trust so let's get started so first

28
00:00:53,399 --> 00:00:56,879
what's a software supply chain well it's

29
00:00:56,879 --> 00:00:58,469
everything that goes into your software

30
00:00:58,469 --> 00:01:00,090
and where it comes from who wrote it

31
00:01:00,090 --> 00:01:02,430
when it was contributed how it's been

32
00:01:02,430 --> 00:01:04,409
reviewed for security issues any known

33
00:01:04,409 --> 00:01:06,240
vulnerabilities supported versions

34
00:01:06,240 --> 00:01:09,210
license information if applicable and

35
00:01:09,210 --> 00:01:10,560
just everything really it's everything

36
00:01:10,560 --> 00:01:11,790
you could want to know but the software

37
00:01:11,790 --> 00:01:13,110
that you're running to help you

38
00:01:13,110 --> 00:01:15,060
determine your risk profile so then a

39
00:01:15,060 --> 00:01:16,200
software supply chain is anything that

40
00:01:16,200 --> 00:01:18,720
goes into or affects your code from

41
00:01:18,720 --> 00:01:20,850
development through your CI CD pipeline

42
00:01:20,850 --> 00:01:22,650
until it gets deployed into production

43
00:01:22,650 --> 00:01:25,110
and why does the software supply chain

44
00:01:25,110 --> 00:01:26,400
matter as a concept

45
00:01:26,400 --> 00:01:28,590
well software dependencies are pervasive

46
00:01:28,590 --> 00:01:30,570
so it's normal for your projects to use

47
00:01:30,570 --> 00:01:32,130
hundreds or even thousands of

48
00:01:32,130 --> 00:01:34,110
open-source dependencies that you didn't

49
00:01:34,110 --> 00:01:36,450
write yourself industry data suggests

50
00:01:36,450 --> 00:01:39,060
that anywhere from 85 to 97% of

51
00:01:39,060 --> 00:01:40,710
enterprise code bases come from open

52
00:01:40,710 --> 00:01:43,920
source but that you depend on as part of

53
00:01:43,920 --> 00:01:46,110
your software so if any one of these

54
00:01:46,110 --> 00:01:48,329
dependencies has a vulnerability then

55
00:01:48,329 --> 00:01:49,320
chances are that you have a

56
00:01:49,320 --> 00:01:51,420
vulnerability as well being able to

57
00:01:51,420 --> 00:01:52,710
leverage the work of thousands of

58
00:01:52,710 --> 00:01:54,570
open-source developers means that

59
00:01:54,570 --> 00:01:56,310
thousands of strangers effectively have

60
00:01:56,310 --> 00:01:58,979
commit access to your production code so

61
00:01:58,979 --> 00:02:00,329
an innocent mistake or a malicious

62
00:02:00,329 --> 00:02:02,280
attack to your supply chain affects you

63
00:02:02,280 --> 00:02:04,259
deeply now when we talk about

64
00:02:04,259 --> 00:02:06,659
dependencies what's scary isn't as much

65
00:02:06,659 --> 00:02:08,098
your internal dependencies that you

66
00:02:08,098 --> 00:02:09,598
develop yourself because hopefully you

67
00:02:09,598 --> 00:02:11,730
have controls in place for those what is

68
00:02:11,730 --> 00:02:13,200
scary though are the third-party

69
00:02:13,200 --> 00:02:13,760
dependence

70
00:02:13,760 --> 00:02:14,989
that you have externally like

71
00:02:14,989 --> 00:02:16,189
open-source code that your developers

72
00:02:16,189 --> 00:02:19,370
put in so I just love this quote you

73
00:02:19,370 --> 00:02:21,349
know every time people install go get or

74
00:02:21,349 --> 00:02:23,030
maven fetch something you're doing the

75
00:02:23,030 --> 00:02:24,170
equivalent of plugging in a thumb drive

76
00:02:24,170 --> 00:02:25,760
that you found on the sidewalk inter

77
00:02:25,760 --> 00:02:27,379
production server this is just so

78
00:02:27,379 --> 00:02:29,659
poignantly correct when you pull in an

79
00:02:29,659 --> 00:02:31,129
external dependency you don't really

80
00:02:31,129 --> 00:02:33,230
know what you're getting it's not really

81
00:02:33,230 --> 00:02:34,760
any better than you know what we all

82
00:02:34,760 --> 00:02:36,079
know is a bad thing to do which is

83
00:02:36,079 --> 00:02:37,730
plugging in a USB Drive that you found

84
00:02:37,730 --> 00:02:39,500
on the sidewalk we all know not to do

85
00:02:39,500 --> 00:02:41,959
that um but you should still be pulling

86
00:02:41,959 --> 00:02:43,129
code from open source right we don't

87
00:02:43,129 --> 00:02:44,359
want you to stop using that source we

88
00:02:44,359 --> 00:02:46,069
don't wanna make that harder so how do

89
00:02:46,069 --> 00:02:48,430
we do so safely

90
00:02:48,430 --> 00:02:51,379
well the issue in supply chain security

91
00:02:51,379 --> 00:02:54,139
is unpatched software it's not your use

92
00:02:54,139 --> 00:02:56,299
of open source and it's not specifically

93
00:02:56,299 --> 00:02:58,400
you know big flashy software supply

94
00:02:58,400 --> 00:02:59,599
chain compromises so we'll talk about

95
00:02:59,599 --> 00:03:01,940
that in a sec think about it this way if

96
00:03:01,940 --> 00:03:03,349
a component in your code base is open

97
00:03:03,349 --> 00:03:04,549
source and like we said it's quite

98
00:03:04,549 --> 00:03:07,310
likely that it is then any if any one of

99
00:03:07,310 --> 00:03:08,750
those dependencies have vulnerabilities

100
00:03:08,750 --> 00:03:11,599
you are potentially affecting how can

101
00:03:11,599 --> 00:03:13,250
you actually address that issue well

102
00:03:13,250 --> 00:03:14,690
thankfully people are pretty good at

103
00:03:14,690 --> 00:03:16,489
actually providing patches for open

104
00:03:16,489 --> 00:03:18,590
source software and it's estimated that

105
00:03:18,590 --> 00:03:20,750
85% of vulnerabilities and open source

106
00:03:20,750 --> 00:03:22,910
are disclosed with a patch already

107
00:03:22,910 --> 00:03:24,620
available so then it's your job to

108
00:03:24,620 --> 00:03:27,440
deploy that patch to be successful you

109
00:03:27,440 --> 00:03:28,879
need to know what dependencies you use

110
00:03:28,879 --> 00:03:30,769
know about the vulnerabilities and those

111
00:03:30,769 --> 00:03:32,989
dependencies patch them and then get

112
00:03:32,989 --> 00:03:34,879
back to work and then when there's a new

113
00:03:34,879 --> 00:03:36,319
vulnerability you want to be quick to

114
00:03:36,319 --> 00:03:38,989
discover it and react to it at the same

115
00:03:38,989 --> 00:03:40,609
time we hear from developers and

116
00:03:40,609 --> 00:03:42,379
security teams that today you find this

117
00:03:42,379 --> 00:03:44,540
heart 52% of developers say you go even

118
00:03:44,540 --> 00:03:45,709
further and they would say they find it

119
00:03:45,709 --> 00:03:47,480
painful to update vulnerable components

120
00:03:47,480 --> 00:03:49,250
so that's where we should focus we

121
00:03:49,250 --> 00:03:51,370
should

122
00:03:51,550 --> 00:03:53,740
focus on making the updating of

123
00:03:53,740 --> 00:03:55,000
vulnerable components easy and

124
00:03:55,000 --> 00:03:58,480
automatable now like I said this is the

125
00:03:58,480 --> 00:04:00,040
issue unpatched software is the issue

126
00:04:00,040 --> 00:04:01,420
it's not your use of open source it's

127
00:04:01,420 --> 00:04:02,650
not the compromises that are happening

128
00:04:02,650 --> 00:04:04,450
but those are so interesting right we'd

129
00:04:04,450 --> 00:04:06,040
love to talk about supply chain con - so

130
00:04:06,040 --> 00:04:07,960
actually let's let's you know rewind and

131
00:04:07,960 --> 00:04:10,630
start there because I I just love these

132
00:04:10,630 --> 00:04:13,690
stories are so fascinating so looking at

133
00:04:13,690 --> 00:04:14,920
supply chain attacks they're not really

134
00:04:14,920 --> 00:04:15,940
different than any other kind of

135
00:04:15,940 --> 00:04:17,079
security attacks and you might have

136
00:04:17,079 --> 00:04:18,579
heard Security tax broken into three

137
00:04:18,579 --> 00:04:20,680
components who the attacker is like a

138
00:04:20,680 --> 00:04:21,910
script kitty a competitor or

139
00:04:21,910 --> 00:04:24,460
nation-state how the attack is conducted

140
00:04:24,460 --> 00:04:26,820
or what the attack is attempting to do

141
00:04:26,820 --> 00:04:29,680
it's a supply chain attack in itself

142
00:04:29,680 --> 00:04:31,630
isn't usually the end goal it's usually

143
00:04:31,630 --> 00:04:33,670
a step towards something else and almost

144
00:04:33,670 --> 00:04:35,020
anyone can actually conduct such an

145
00:04:35,020 --> 00:04:36,430
attack like we said because anyone can

146
00:04:36,430 --> 00:04:39,130
commit to open source projects so a

147
00:04:39,130 --> 00:04:40,690
focus on the how what happens to

148
00:04:40,690 --> 00:04:42,340
infiltrate your supply chain and the

149
00:04:42,340 --> 00:04:43,960
what that the attack is eliminate to get

150
00:04:43,960 --> 00:04:46,180
up there are several methods to attack

151
00:04:46,180 --> 00:04:48,130
your supply chain today inserting

152
00:04:48,130 --> 00:04:49,390
malicious code directly into a

153
00:04:49,390 --> 00:04:51,280
dependency this could be a purposeful

154
00:04:51,280 --> 00:04:53,530
backdoor known malware or a known

155
00:04:53,530 --> 00:04:55,360
vulnerability or you've been introducing

156
00:04:55,360 --> 00:04:57,160
a new dependency this is walking in

157
00:04:57,160 --> 00:04:58,660
through the front door to then introduce

158
00:04:58,660 --> 00:05:01,570
a backdoor compromising a build tool

159
00:05:01,570 --> 00:05:03,040
infrastructure tool or another piece of

160
00:05:03,040 --> 00:05:04,960
the CI CD development pipeline which

161
00:05:04,960 --> 00:05:06,280
again could be another supply chain

162
00:05:06,280 --> 00:05:09,280
attack compromising signing keys to make

163
00:05:09,280 --> 00:05:10,840
it seem like an unknown package came

164
00:05:10,840 --> 00:05:13,419
from a known trusted source because who

165
00:05:13,419 --> 00:05:16,240
verifies those signatures anyways

166
00:05:16,240 --> 00:05:18,640
compromising a package manager to effect

167
00:05:18,640 --> 00:05:20,410
several artifacts being distributed as

168
00:05:20,410 --> 00:05:22,960
part of that supply chain we say the

169
00:05:22,960 --> 00:05:24,730
package manager here but it could really

170
00:05:24,730 --> 00:05:26,500
be anything that's used for software

171
00:05:26,500 --> 00:05:27,940
distribution including like a website

172
00:05:27,940 --> 00:05:29,320
used for software updates or a server

173
00:05:29,320 --> 00:05:31,540
that a piece of our calls back to you to

174
00:05:31,540 --> 00:05:34,060
get updated versions compromised

175
00:05:34,060 --> 00:05:35,680
vulnerability reporting so this is man

176
00:05:35,680 --> 00:05:37,450
in the middling the Security Act

177
00:05:37,450 --> 00:05:39,850
reporting address getting into bug

178
00:05:39,850 --> 00:05:41,530
reports on a bug bounty site for example

179
00:05:41,530 --> 00:05:43,960
or even getting a fix on to fix or

180
00:05:43,960 --> 00:05:45,460
disclose your mailing list for a project

181
00:05:45,460 --> 00:05:47,169
ahead of time this would allow a

182
00:05:47,169 --> 00:05:48,700
malicious actor to find out about a

183
00:05:48,700 --> 00:05:50,320
known vulnerability before it's widely

184
00:05:50,320 --> 00:05:53,350
announced and patched account takeover

185
00:05:53,350 --> 00:05:55,000
of a maintainer this could be a fake

186
00:05:55,000 --> 00:05:56,710
commits and then depending on how

187
00:05:56,710 --> 00:05:58,060
signing keys are managed this might also

188
00:05:58,060 --> 00:06:00,160
be you know part of that attack in

189
00:06:00,160 --> 00:06:01,750
addition to compromising what a

190
00:06:01,750 --> 00:06:04,150
maintainer can publish without even

191
00:06:04,150 --> 00:06:05,320
going that far this could also

192
00:06:05,320 --> 00:06:06,430
include something like compromising

193
00:06:06,430 --> 00:06:08,320
manners email write to intercept book

194
00:06:08,320 --> 00:06:09,400
reports like we also mentioned earlier

195
00:06:09,400 --> 00:06:12,760
and project takeover especially with

196
00:06:12,760 --> 00:06:15,190
Mantid projects typos squatting to get

197
00:06:15,190 --> 00:06:16,420
users to accidentally pull in your

198
00:06:16,420 --> 00:06:18,220
project as a dependency when you miss

199
00:06:18,220 --> 00:06:19,690
type something so putting in the

200
00:06:19,690 --> 00:06:22,300
incorrect name for for a for an NPM

201
00:06:22,300 --> 00:06:23,200
package for example

202
00:06:23,200 --> 00:06:25,390
and lastly deletion these are all have

203
00:06:25,390 --> 00:06:27,280
good methods of attacking your supply

204
00:06:27,280 --> 00:06:28,810
chain but they have a couple of

205
00:06:28,810 --> 00:06:31,270
different aims or goals and spoiler

206
00:06:31,270 --> 00:06:31,720
alert

207
00:06:31,720 --> 00:06:33,430
you know like other attacks in security

208
00:06:33,430 --> 00:06:35,740
the ultimate motivation is almost always

209
00:06:35,740 --> 00:06:37,840
money so they might be trying to

210
00:06:37,840 --> 00:06:39,010
introduce a backdoor into your

211
00:06:39,010 --> 00:06:40,930
environment that would be like targeting

212
00:06:40,930 --> 00:06:42,400
users of a particular operating system

213
00:06:42,400 --> 00:06:44,290
for example or in a particular region or

214
00:06:44,290 --> 00:06:46,060
a particular company or they might just

215
00:06:46,060 --> 00:06:47,500
you know that backdoor must be a wide

216
00:06:47,500 --> 00:06:49,390
swath by attackers to see what they can

217
00:06:49,390 --> 00:06:51,340
get they might be trying to introduce

218
00:06:51,340 --> 00:06:53,520
malware for example to collect logins

219
00:06:53,520 --> 00:06:56,080
but the easiest way to make to make

220
00:06:56,080 --> 00:06:57,250
malware these days and to make money

221
00:06:57,250 --> 00:06:58,480
these days I should say from malware

222
00:06:58,480 --> 00:07:02,320
it's cryptocurrency mining so abusing

223
00:07:02,320 --> 00:07:04,450
any extra compute to mine the trendy

224
00:07:04,450 --> 00:07:06,790
cryptocurrency of the day traditional

225
00:07:06,790 --> 00:07:09,390
botnets also fall in this category and

226
00:07:09,390 --> 00:07:11,560
service disruption so this could be for

227
00:07:11,560 --> 00:07:13,630
example to take a service offline so

228
00:07:13,630 --> 00:07:15,190
like I said because if some of these

229
00:07:15,190 --> 00:07:16,480
examples are really fascinating let's

230
00:07:16,480 --> 00:07:18,400
spend some time digging into how will we

231
00:07:18,400 --> 00:07:20,020
actually see the methods and the goals

232
00:07:20,020 --> 00:07:21,340
that we see being used in the industry

233
00:07:21,340 --> 00:07:24,370
today for for real events so first we're

234
00:07:24,370 --> 00:07:28,570
gonna look at his event stream event

235
00:07:28,570 --> 00:07:30,610
stream is a widely used nodejs library

236
00:07:30,610 --> 00:07:32,650
available via npm and when I say widely

237
00:07:32,650 --> 00:07:34,300
used we're talking two million-plus

238
00:07:34,300 --> 00:07:37,630
weekly downloads so what happened well

239
00:07:37,630 --> 00:07:40,300
in the fall of 2018 a user write nine

240
00:07:40,300 --> 00:07:41,950
control volunteered you take over event

241
00:07:41,950 --> 00:07:43,390
stream on github it's a widely used

242
00:07:43,390 --> 00:07:44,980
package like I said but also not

243
00:07:44,980 --> 00:07:46,690
particularly well supported so the

244
00:07:46,690 --> 00:07:48,940
author welcomed the extra help and even

245
00:07:48,940 --> 00:07:50,710
gave the newcomer publishing rights I

246
00:07:50,710 --> 00:07:52,570
want to emphasize that the authors not

247
00:07:52,570 --> 00:07:53,740
to blame here because we should have

248
00:07:53,740 --> 00:07:55,240
better ways to support these developers

249
00:07:55,240 --> 00:07:56,380
and also very hard trust of our

250
00:07:56,380 --> 00:07:58,750
ecosystem so they wrote a negative issue

251
00:07:58,750 --> 00:08:00,940
you know he emailed me and he said he

252
00:08:00,940 --> 00:08:02,830
wanted to maintain the module so I give

253
00:08:02,830 --> 00:08:04,570
it to him I don't get anything from

254
00:08:04,570 --> 00:08:05,980
maintaining this module and I don't even

255
00:08:05,980 --> 00:08:07,980
use it anymore and haven't for years and

256
00:08:07,980 --> 00:08:10,840
then on September 9th right nine control

257
00:08:10,840 --> 00:08:12,220
that's the new user added a new

258
00:08:12,220 --> 00:08:13,840
dependency to event stream called a flat

259
00:08:13,840 --> 00:08:16,240
map stream a week later on September

260
00:08:16,240 --> 00:08:18,130
16th they rewrote the code to no longer

261
00:08:18,130 --> 00:08:18,889
require that

262
00:08:18,889 --> 00:08:20,900
tendency and try to remove it that

263
00:08:20,900 --> 00:08:22,430
change was made in the codebase but

264
00:08:22,430 --> 00:08:24,620
crucially wasn't pushed through to where

265
00:08:24,620 --> 00:08:26,210
the libraries actually host mmm p.m. not

266
00:08:26,210 --> 00:08:27,860
through to the published package and

267
00:08:27,860 --> 00:08:30,529
then on October 5th another user a huge

268
00:08:30,529 --> 00:08:32,149
glass added malware it's a flat map

269
00:08:32,149 --> 00:08:35,328
stream so then anyone who used event

270
00:08:35,328 --> 00:08:37,159
stream and pulled in the latest version

271
00:08:37,159 --> 00:08:38,750
of flat map stream would receive this

272
00:08:38,750 --> 00:08:39,110
malware

273
00:08:39,110 --> 00:08:41,208
this was discovered in late in November

274
00:08:41,208 --> 00:08:43,729
2018 meaning this dependency and malware

275
00:08:43,729 --> 00:08:45,380
was running for almost two months before

276
00:08:45,380 --> 00:08:47,839
it was discovered now fortunately this

277
00:08:47,839 --> 00:08:50,420
wasn't actually you know that bad it was

278
00:08:50,420 --> 00:08:52,220
bad that we didn't find it sooner but it

279
00:08:52,220 --> 00:08:54,050
was highly targeted the malware looked

280
00:08:54,050 --> 00:08:55,910
to see if the host was a developer for a

281
00:08:55,910 --> 00:08:57,920
particular kind of cryptocurrency wallet

282
00:08:57,920 --> 00:09:01,010
the - copay wallet and if it was then it

283
00:09:01,010 --> 00:09:03,320
asserted inserted additional code to be

284
00:09:03,320 --> 00:09:04,279
distributed to end users

285
00:09:04,279 --> 00:09:06,829
this code scanned user deposits to see

286
00:09:06,829 --> 00:09:08,570
if their Bitcoin or Bitcoin cash

287
00:09:08,570 --> 00:09:10,399
deposits were over a certain amount and

288
00:09:10,399 --> 00:09:13,459
if they were captured passwords and -

289
00:09:13,459 --> 00:09:15,829
for send those to remote address the

290
00:09:15,829 --> 00:09:17,209
malware made it into a handful of

291
00:09:17,209 --> 00:09:20,149
releases of - copay unfortunately it's

292
00:09:20,149 --> 00:09:21,649
not clear how much Bitcoin and going

293
00:09:21,649 --> 00:09:23,390
cash was stolen if any as a result of

294
00:09:23,390 --> 00:09:28,880
this another example es lint I love this

295
00:09:28,880 --> 00:09:30,470
example as it's a supply chain attack

296
00:09:30,470 --> 00:09:32,240
that was trying to make more software

297
00:09:32,240 --> 00:09:33,529
supply chain attacks happen so sort of

298
00:09:33,529 --> 00:09:35,990
like a meta attack on the morning of

299
00:09:35,990 --> 00:09:39,290
July 12 2018 new versions of two of the

300
00:09:39,290 --> 00:09:41,149
components of es Flint or publish on PM

301
00:09:41,149 --> 00:09:43,670
within an hour of the publication a user

302
00:09:43,670 --> 00:09:45,769
filed a bug against the project and the

303
00:09:45,769 --> 00:09:47,899
malicious packages were unpublished so

304
00:09:47,899 --> 00:09:49,610
all told they were up for less than four

305
00:09:49,610 --> 00:09:52,329
hours and a few hours later new

306
00:09:52,329 --> 00:09:55,160
uncompromised versions were published so

307
00:09:55,160 --> 00:09:57,350
what happened a maintainer of the eslint

308
00:09:57,350 --> 00:09:58,970
reuse their password elsewhere and

309
00:09:58,970 --> 00:10:00,560
didn't have to if they enabled so

310
00:10:00,560 --> 00:10:02,990
attackers used credential stuffing to

311
00:10:02,990 --> 00:10:04,430
generate auth tokens for their account

312
00:10:04,430 --> 00:10:07,010
and start publishing new packages the

313
00:10:07,010 --> 00:10:08,870
malicious versions of es lint would try

314
00:10:08,870 --> 00:10:11,390
to connect to download an execute code

315
00:10:11,390 --> 00:10:13,670
found on paste bin that captured the NPM

316
00:10:13,670 --> 00:10:15,680
RC file which is typically where NPM

317
00:10:15,680 --> 00:10:17,870
auth tokens for publishing packages are

318
00:10:17,870 --> 00:10:20,510
stored so by compromising one NPM

319
00:10:20,510 --> 00:10:21,589
package they were hoping to get

320
00:10:21,589 --> 00:10:24,410
credentials to compromise lots more and

321
00:10:24,410 --> 00:10:25,339
PM packages

322
00:10:25,339 --> 00:10:28,220
now since this malware was trying to

323
00:10:28,220 --> 00:10:30,110
capture NPM credentials the response to

324
00:10:30,110 --> 00:10:31,430
this issue had to be wider than just

325
00:10:31,430 --> 00:10:32,300
this one pack

326
00:10:32,300 --> 00:10:34,220
in fact NPM took the action to revoke

327
00:10:34,220 --> 00:10:36,980
all access tokens generated before the

328
00:10:36,980 --> 00:10:39,380
incident that includes private packages

329
00:10:39,380 --> 00:10:41,990
that's a lot of potential users affected

330
00:10:41,990 --> 00:10:43,490
by the cleanup of this incident even

331
00:10:43,490 --> 00:10:45,110
though was determined that only a very

332
00:10:45,110 --> 00:10:47,360
small number of packages and users were

333
00:10:47,360 --> 00:10:50,120
effective so this is actually an

334
00:10:50,120 --> 00:10:51,440
interesting counter example to some of

335
00:10:51,440 --> 00:10:52,700
the advice I'm gonna give later which is

336
00:10:52,700 --> 00:10:54,200
as much as I want you to automatically

337
00:10:54,200 --> 00:10:56,000
upgrade all of your dependencies this is

338
00:10:56,000 --> 00:10:56,960
a great example of where this would

339
00:10:56,960 --> 00:10:58,670
actually would have been bad for the

340
00:10:58,670 --> 00:11:00,140
downstream packages you should make it

341
00:11:00,140 --> 00:11:01,940
as easy as possible to upgrade but

342
00:11:01,940 --> 00:11:03,590
ideally a human is still in the loop

343
00:11:03,590 --> 00:11:05,030
especially for publishing a new version

344
00:11:05,030 --> 00:11:07,250
right using a lock file also forces the

345
00:11:07,250 --> 00:11:08,810
explicit enough of knowledge of any new

346
00:11:08,810 --> 00:11:09,980
versions that you want to use in your

347
00:11:09,980 --> 00:11:12,410
environment let's look at another

348
00:11:12,410 --> 00:11:15,410
example webmin women is a web app for

349
00:11:15,410 --> 00:11:17,180
managing eunuch servers like those

350
00:11:17,180 --> 00:11:20,990
running Linux or open BSD in August 2019

351
00:11:20,990 --> 00:11:23,030
it was revealed by a researcher at Def

352
00:11:23,030 --> 00:11:25,400
Con that webmin had had a backdoor

353
00:11:25,400 --> 00:11:27,320
allowing for unauthenticated remote code

354
00:11:27,320 --> 00:11:30,830
execution this allowed any for earlier

355
00:11:30,830 --> 00:11:32,900
versions any authenticated access and

356
00:11:32,900 --> 00:11:35,480
then in later versions only nothing had

357
00:11:35,480 --> 00:11:36,920
access that the Installer had actually

358
00:11:36,920 --> 00:11:39,230
changed this authentication to flag to

359
00:11:39,230 --> 00:11:41,270
allow for for a user of the expired

360
00:11:41,270 --> 00:11:43,700
passwords to reset their passwords the

361
00:11:43,700 --> 00:11:44,990
attackers also tried to trim that flag

362
00:11:44,990 --> 00:11:46,910
by default in in the main in the main

363
00:11:46,910 --> 00:11:49,070
branch this was disclosed by researcher

364
00:11:49,070 --> 00:11:50,270
as a zero-day without previously

365
00:11:50,270 --> 00:11:51,560
notifying the project of the valve of

366
00:11:51,560 --> 00:11:53,600
the vulnerability the backdoor was

367
00:11:53,600 --> 00:11:55,700
inserted as part of the build process so

368
00:11:55,700 --> 00:11:57,140
interestingly the attackers only

369
00:11:57,140 --> 00:11:58,600
compromised some of the distribution

370
00:11:58,600 --> 00:12:01,370
with valid webmin and user main code on

371
00:12:01,370 --> 00:12:03,410
github but backdoor packages only on

372
00:12:03,410 --> 00:12:05,780
SourceForge the maintainer x' didn't

373
00:12:05,780 --> 00:12:08,450
clarify how this came to be and this

374
00:12:08,450 --> 00:12:10,160
remained for multiple versions of webmin

375
00:12:10,160 --> 00:12:11,300
with back toward versions being

376
00:12:11,300 --> 00:12:12,770
compromised and distributed for over a

377
00:12:12,770 --> 00:12:13,190
year

378
00:12:13,190 --> 00:12:14,960
luckily with the build servers first

379
00:12:14,960 --> 00:12:18,200
compromised in April 2018 unfortunately

380
00:12:18,200 --> 00:12:19,760
the maintainer has even moved to a new

381
00:12:19,760 --> 00:12:21,050
build infrastructure in September of

382
00:12:21,050 --> 00:12:23,900
2018 and copied over backups that had

383
00:12:23,900 --> 00:12:26,690
the backdoor included so thankfully they

384
00:12:26,690 --> 00:12:28,520
were able to fix the issue by rebuilding

385
00:12:28,520 --> 00:12:30,350
from source but the lesson here is built

386
00:12:30,350 --> 00:12:31,820
from checked in source code that you

387
00:12:31,820 --> 00:12:33,470
have for example on github not from a

388
00:12:33,470 --> 00:12:36,610
local directory that you might have and

389
00:12:36,610 --> 00:12:39,320
one more example here docker one two

390
00:12:39,320 --> 00:12:41,630
three three two one in May of 2018

391
00:12:41,630 --> 00:12:43,760
several malicious images were discovered

392
00:12:43,760 --> 00:12:45,279
on docker hub Chrome tech found

393
00:12:45,279 --> 00:12:47,560
17 images with play names like doctor 1

394
00:12:47,560 --> 00:12:50,680
2 3 3 2 1 which contained malware the

395
00:12:50,680 --> 00:12:52,720
doctor 1 2 3 3 2 1 registry was created

396
00:12:52,720 --> 00:12:55,509
in May 2017 a year earlier malar is

397
00:12:55,509 --> 00:12:58,120
added in the summer of 2017 the

398
00:12:58,120 --> 00:12:59,470
community was actually pretty good at

399
00:12:59,470 --> 00:13:01,060
discovering these issues with complaints

400
00:13:01,060 --> 00:13:02,889
made to docker hub in the fall of 2017

401
00:13:02,889 --> 00:13:04,720
however nothing happened in these images

402
00:13:04,720 --> 00:13:07,269
stayed up publishing you know continued

403
00:13:07,269 --> 00:13:09,999
new versions for Dannette was able to

404
00:13:09,999 --> 00:13:11,259
link these images to a cryptocurrency

405
00:13:11,259 --> 00:13:13,779
mining botnet definitively in early of

406
00:13:13,779 --> 00:13:16,300
May 2018 and the images were promptly

407
00:13:16,300 --> 00:13:18,399
removed from docker hub so in that time

408
00:13:18,399 --> 00:13:20,800
period of you know almost a year the 17

409
00:13:20,800 --> 00:13:22,180
images in the registry were downloaded

410
00:13:22,180 --> 00:13:25,209
over 5 million times these images

411
00:13:25,209 --> 00:13:26,529
contain some malware from mining

412
00:13:26,529 --> 00:13:28,120
cryptocurrency locally which in this

413
00:13:28,120 --> 00:13:30,160
case was monaro and sending it to a

414
00:13:30,160 --> 00:13:32,110
remote server it's estimated that over

415
00:13:32,110 --> 00:13:35,199
ninety thousand US dollars in manera was

416
00:13:35,199 --> 00:13:37,149
mined in by these images in that time

417
00:13:37,149 --> 00:13:39,129
period so given that this was basically

418
00:13:39,129 --> 00:13:41,649
a toy library or they're only depending

419
00:13:41,649 --> 00:13:43,329
on users testing these images out by

420
00:13:43,329 --> 00:13:44,529
accident or you know accidentally

421
00:13:44,529 --> 00:13:46,149
downloading them that's still a lot of

422
00:13:46,149 --> 00:13:48,040
money right and gives an attacker of how

423
00:13:48,040 --> 00:13:49,629
quickly their malware could be detected

424
00:13:49,629 --> 00:13:51,670
and how it be handled I wouldn't be

425
00:13:51,670 --> 00:13:56,100
surprised if this was a attacker POC and

426
00:13:56,100 --> 00:13:58,269
looking across the board you know the

427
00:13:58,269 --> 00:14:00,189
examples that I gave are not all of the

428
00:14:00,189 --> 00:14:01,750
examples that we know of and this ain't

429
00:14:01,750 --> 00:14:03,160
even this isn't a complete overview but

430
00:14:03,160 --> 00:14:04,600
just a reminder in case you didn't

431
00:14:04,600 --> 00:14:06,160
realize we've been seeing attacks on the

432
00:14:06,160 --> 00:14:07,750
software supply chain for a long time

433
00:14:07,750 --> 00:14:10,209
since at least 2015 and there are a lot

434
00:14:10,209 --> 00:14:11,290
more examples that I could have been

435
00:14:11,290 --> 00:14:12,670
listening I could have listed here this

436
00:14:12,670 --> 00:14:15,189
is just a select few of those attacks

437
00:14:15,189 --> 00:14:18,220
that we've seen so now that i've scared

438
00:14:18,220 --> 00:14:20,949
you lets you know mentally go back to

439
00:14:20,949 --> 00:14:22,449
what i said at the very beginning the

440
00:14:22,449 --> 00:14:25,300
issue isn't you know compromises you're

441
00:14:25,300 --> 00:14:28,569
not going to be targeted by by some some

442
00:14:28,569 --> 00:14:30,429
very specific you know nation-state

443
00:14:30,429 --> 00:14:32,319
attacker again unless you have good

444
00:14:32,319 --> 00:14:33,519
reason to think you're gonna be targeted

445
00:14:33,519 --> 00:14:35,110
in which case yes you very much very

446
00:14:35,110 --> 00:14:36,879
well might be but the the average

447
00:14:36,879 --> 00:14:38,439
developer the average shop the average

448
00:14:38,439 --> 00:14:40,509
enterprise user is should should be

449
00:14:40,509 --> 00:14:42,279
concerned about patching software right

450
00:14:42,279 --> 00:14:44,319
it's not how much open-source code

451
00:14:44,319 --> 00:14:45,639
you're using keep doing that

452
00:14:45,639 --> 00:14:49,179
it's not compromises because it's highly

453
00:14:49,179 --> 00:14:51,459
unlikely it's forgetting to patch your

454
00:14:51,459 --> 00:14:53,199
soft words forgetting to pass jenkins or

455
00:14:53,199 --> 00:14:54,399
WordPress or whatever it happens to be

456
00:14:54,399 --> 00:14:55,870
and then leaving a back door open for

457
00:14:55,870 --> 00:14:58,809
users sorry a bug or a bug door or back

458
00:14:58,809 --> 00:14:59,200
door

459
00:14:59,200 --> 00:15:02,470
open for attackers so like I said let's

460
00:15:02,470 --> 00:15:03,430
go back to the real issue where we

461
00:15:03,430 --> 00:15:05,200
should be focusing making patching

462
00:15:05,200 --> 00:15:08,110
vulnerability is easy and automated now

463
00:15:08,110 --> 00:15:09,460
to improve the security of the supply

464
00:15:09,460 --> 00:15:11,710
chain we need multiple sets of users to

465
00:15:11,710 --> 00:15:13,090
collaborate we need to make sure that

466
00:15:13,090 --> 00:15:14,380
the tools that we have in place for all

467
00:15:14,380 --> 00:15:17,410
users that they work for all users for

468
00:15:17,410 --> 00:15:18,850
developers and includes enterprise

469
00:15:18,850 --> 00:15:20,800
security teams for maintainer zand for

470
00:15:20,800 --> 00:15:23,410
security researchers so what are each of

471
00:15:23,410 --> 00:15:27,730
these sets of users care about for

472
00:15:27,730 --> 00:15:29,860
developers as we said earlier you want

473
00:15:29,860 --> 00:15:31,240
to make sure that your software is safe

474
00:15:31,240 --> 00:15:33,160
and then get back to development to be

475
00:15:33,160 --> 00:15:34,630
successful in addressing supply chain

476
00:15:34,630 --> 00:15:36,340
risks you need to know your environment

477
00:15:36,340 --> 00:15:39,010
that is what dependencies you use manage

478
00:15:39,010 --> 00:15:40,600
your dependencies that is know about

479
00:15:40,600 --> 00:15:41,860
vulnerabilities and those dependencies

480
00:15:41,860 --> 00:15:44,320
and patch them and monitor any changes

481
00:15:44,320 --> 00:15:46,600
so that you can address them promptly we

482
00:15:46,600 --> 00:15:48,430
use a new vulnerability you want to be

483
00:15:48,430 --> 00:15:50,890
quick to discover it and react to it if

484
00:15:50,890 --> 00:15:53,410
you're a maintainer you want to address

485
00:15:53,410 --> 00:15:55,090
any newly discovered vulnerabilities in

486
00:15:55,090 --> 00:15:56,440
your environment and let downstream

487
00:15:56,440 --> 00:15:58,450
consumers know about a fix or what they

488
00:15:58,450 --> 00:16:00,310
need to do to protect themselves when

489
00:16:00,310 --> 00:16:01,780
there's a new vulnerability you want to

490
00:16:01,780 --> 00:16:03,610
quickly develop a fix and then disclose

491
00:16:03,610 --> 00:16:06,310
it and for security researchers you want

492
00:16:06,310 --> 00:16:07,690
to find new issues and report what you

493
00:16:07,690 --> 00:16:09,250
found to help maintain your enterprises

494
00:16:09,250 --> 00:16:11,470
fix our products so let's talk about

495
00:16:11,470 --> 00:16:14,250
developers first if you're a developer

496
00:16:14,250 --> 00:16:16,570
what should you be doing to secure your

497
00:16:16,570 --> 00:16:18,820
software supply chain this is kind of

498
00:16:18,820 --> 00:16:21,070
going to be boring advice like flossing

499
00:16:21,070 --> 00:16:23,380
or washing your hands for 20 seconds but

500
00:16:23,380 --> 00:16:24,700
you really know that you should be doing

501
00:16:24,700 --> 00:16:27,130
it so first know what's in your

502
00:16:27,130 --> 00:16:28,750
environment figure out what your

503
00:16:28,750 --> 00:16:30,550
dependencies are now that can be kind of

504
00:16:30,550 --> 00:16:32,770
hard there are several tools commonly

505
00:16:32,770 --> 00:16:34,690
known as software composition analysis

506
00:16:34,690 --> 00:16:37,180
or SCA tools to help you do this the

507
00:16:37,180 --> 00:16:38,380
look of the dependencies that you have

508
00:16:38,380 --> 00:16:40,630
in a build or a manifest file and create

509
00:16:40,630 --> 00:16:41,800
a graph of what's actually in your

510
00:16:41,800 --> 00:16:44,050
environment if you're a developer to

511
00:16:44,050 --> 00:16:45,700
package please explicitly declare your

512
00:16:45,700 --> 00:16:47,650
dependencies you know consider using a

513
00:16:47,650 --> 00:16:49,660
lock file and keeping it updated to help

514
00:16:49,660 --> 00:16:52,030
with this if you have restrictions on

515
00:16:52,030 --> 00:16:55,270
what can be in your environment this is

516
00:16:55,270 --> 00:16:56,530
also when you'll want to analyze those

517
00:16:56,530 --> 00:16:59,170
for example your team might not want to

518
00:16:59,170 --> 00:17:01,480
use certain licenses or you might find

519
00:17:01,480 --> 00:17:03,040
an unwelcome surprise and a dependency

520
00:17:03,040 --> 00:17:05,020
you didn't know it's there it's like the

521
00:17:05,020 --> 00:17:06,910
trope of when a company says oh we don't

522
00:17:06,910 --> 00:17:08,500
use that service like of course not like

523
00:17:08,500 --> 00:17:09,640
what are you talking about and like yeah

524
00:17:09,640 --> 00:17:11,439
yeah you do you know just like giving

525
00:17:11,439 --> 00:17:12,619
your developers a credit card

526
00:17:12,619 --> 00:17:16,160
meant that you actually were using the

527
00:17:16,160 --> 00:17:17,329
cloud and didn't realize it

528
00:17:17,329 --> 00:17:18,650
giving your developers access to the

529
00:17:18,650 --> 00:17:20,240
Internet means I used you use open

530
00:17:20,240 --> 00:17:21,650
source you just don't realize it

531
00:17:21,650 --> 00:17:24,890
but it's a good thing next and this is a

532
00:17:24,890 --> 00:17:27,260
step that everyone is too lazy to do but

533
00:17:27,260 --> 00:17:29,600
remove your unnecessary dependencies you

534
00:17:29,600 --> 00:17:31,610
don't have to patch something that you

535
00:17:31,610 --> 00:17:33,710
don't have so for example in containers

536
00:17:33,710 --> 00:17:35,690
use a scratch or a minimal base image

537
00:17:35,690 --> 00:17:41,870
and automate security updates if you

538
00:17:41,870 --> 00:17:45,080
should have skipped sites there no I

539
00:17:45,080 --> 00:17:47,740
should know I'm sorry

540
00:17:50,050 --> 00:17:51,710
apologies and getting lost in my own

541
00:17:51,710 --> 00:17:53,360
slides yep

542
00:17:53,360 --> 00:17:56,630
automate security updates uh nope nope

543
00:17:56,630 --> 00:17:59,179
I'm gonna skip ahead I'm sorry yeah so

544
00:17:59,179 --> 00:18:00,800
like I said earlier making sure that the

545
00:18:00,800 --> 00:18:01,640
dependencies that you have in your

546
00:18:01,640 --> 00:18:02,840
environment that you're managing them

547
00:18:02,840 --> 00:18:04,400
reviewing them updating them and

548
00:18:04,400 --> 00:18:05,420
removing them if you don't need them

549
00:18:05,420 --> 00:18:05,750
anymore

550
00:18:05,750 --> 00:18:07,460
so if a vongole discovered like we said

551
00:18:07,460 --> 00:18:10,520
determine if you're affected this is why

552
00:18:10,520 --> 00:18:11,990
having that inventory of what's new

553
00:18:11,990 --> 00:18:14,270
around it's actually so important you

554
00:18:14,270 --> 00:18:16,100
know being able to answer your C so when

555
00:18:16,100 --> 00:18:17,420
they ask you if you're affected by a new

556
00:18:17,420 --> 00:18:19,370
zero days is priceless that's amazing

557
00:18:19,370 --> 00:18:21,800
and if you are affected not just by zero

558
00:18:21,800 --> 00:18:23,210
days but any security patches then

559
00:18:23,210 --> 00:18:25,550
update here's where I was before

560
00:18:25,550 --> 00:18:27,860
automate this if you can to

561
00:18:27,860 --> 00:18:29,630
automatically pull in security fixes for

562
00:18:29,630 --> 00:18:31,910
your code this is so so so important and

563
00:18:31,910 --> 00:18:33,620
if you take one to do away from this

564
00:18:33,620 --> 00:18:36,110
talk it's this automated voice was found

565
00:18:36,110 --> 00:18:38,900
then in their latest state of open

566
00:18:38,900 --> 00:18:40,910
source of ulnar abilities report 85

567
00:18:40,910 --> 00:18:42,290
percent of opens first vulnerabilities

568
00:18:42,290 --> 00:18:43,520
have a fix already available at

569
00:18:43,520 --> 00:18:45,350
disclosure so then what you need to do

570
00:18:45,350 --> 00:18:48,050
is apply them and you know you can fix

571
00:18:48,050 --> 00:18:50,990
things so much faster and save developer

572
00:18:50,990 --> 00:18:52,760
time with automation we have a free good

573
00:18:52,760 --> 00:18:53,900
enough feature called the Penta bot

574
00:18:53,900 --> 00:18:55,790
which automatically sends you a PR to

575
00:18:55,790 --> 00:18:57,020
update you a patched version of a

576
00:18:57,020 --> 00:18:59,360
dependency when a security issue is

577
00:18:59,360 --> 00:19:01,429
found and for repos that have depend

578
00:19:01,429 --> 00:19:03,200
about security updates enabled the mean

579
00:19:03,200 --> 00:19:06,410
time to repair MTTR is only 40 days now

580
00:19:06,410 --> 00:19:07,910
fortunately or unfortunately I can't

581
00:19:07,910 --> 00:19:09,320
actually compare this to repos that

582
00:19:09,320 --> 00:19:11,030
don't have these feature enabled on

583
00:19:11,030 --> 00:19:12,260
github because we respect your privacy

584
00:19:12,260 --> 00:19:14,059
and so if you don't turn the feature on

585
00:19:14,059 --> 00:19:14,960
that we don't know about your

586
00:19:14,960 --> 00:19:16,820
vulnerabilities so I have to compare two

587
00:19:16,820 --> 00:19:18,350
industry metrics and the industry says

588
00:19:18,350 --> 00:19:19,610
that this take currently takes months

589
00:19:19,610 --> 00:19:21,590
right so I know type says that MTTR for

590
00:19:21,590 --> 00:19:23,390
time to from full disclosure to patching

591
00:19:23,390 --> 00:19:26,300
a project is 180 days and sneak finds

592
00:19:26,300 --> 00:19:26,990
this for opens or

593
00:19:26,990 --> 00:19:28,520
projects to be more than two years so

594
00:19:28,520 --> 00:19:30,590
getting this down to 40 days using

595
00:19:30,590 --> 00:19:34,460
automation is a huge improvement now if

596
00:19:34,460 --> 00:19:35,900
your testing isn't good enough that you

597
00:19:35,900 --> 00:19:37,429
actually feel confident doing that using

598
00:19:37,429 --> 00:19:39,590
automation then plate then just make

599
00:19:39,590 --> 00:19:40,550
sure you're up to date with what's going

600
00:19:40,550 --> 00:19:41,990
on pay close attention to security

601
00:19:41,990 --> 00:19:44,120
advisory emails or alerts or Twitter or

602
00:19:44,120 --> 00:19:46,010
however you get your latest you know

603
00:19:46,010 --> 00:19:48,260
vulnerability information and really

604
00:19:48,260 --> 00:19:50,210
importantly here know that you can patch

605
00:19:50,210 --> 00:19:52,309
write testing this out in making sure

606
00:19:52,309 --> 00:19:53,990
you can actually apply a patch quickly

607
00:19:53,990 --> 00:19:56,360
is a great way to spend some time during

608
00:19:56,360 --> 00:19:59,540
quarantine what else should be doing to

609
00:19:59,540 --> 00:20:01,070
manage your dependencies review any

610
00:20:01,070 --> 00:20:02,630
changes to your environment that is as

611
00:20:02,630 --> 00:20:04,190
part of a new PR check what's being

612
00:20:04,190 --> 00:20:05,660
added to environment in terms of new

613
00:20:05,660 --> 00:20:07,070
dependencies and specifically any

614
00:20:07,070 --> 00:20:09,500
vulnerabilities in those and the last

615
00:20:09,500 --> 00:20:11,030
step that I mentioned earlier apologies

616
00:20:11,030 --> 00:20:12,800
that everyone is truly easy to do but

617
00:20:12,800 --> 00:20:14,720
remove unnecessary dependencies you

618
00:20:14,720 --> 00:20:15,890
don't have to patch something that you

619
00:20:15,890 --> 00:20:17,870
don't have so for you know like I said

620
00:20:17,870 --> 00:20:19,340
for container scratch or minimal base

621
00:20:19,340 --> 00:20:20,590
images

622
00:20:20,590 --> 00:20:24,140
lastly verify if and when you can what's

623
00:20:24,140 --> 00:20:25,400
in your supply chain and how you're

624
00:20:25,400 --> 00:20:27,320
managing it so audit what's actually in

625
00:20:27,320 --> 00:20:29,059
your environment again to make sure the

626
00:20:29,059 --> 00:20:30,290
controls and tools that we talked about

627
00:20:30,290 --> 00:20:32,660
are actually working especially if

628
00:20:32,660 --> 00:20:34,400
you're part of a big company audit and

629
00:20:34,400 --> 00:20:36,590
monitor your performance how quickly are

630
00:20:36,590 --> 00:20:37,850
you able to address newly discovered

631
00:20:37,850 --> 00:20:40,220
vulnerabilities scan your code and

632
00:20:40,220 --> 00:20:42,679
packages for known vulnerabilities run

633
00:20:42,679 --> 00:20:44,540
tools like NPM audit to verify your

634
00:20:44,540 --> 00:20:46,820
packages before you pull them check the

635
00:20:46,820 --> 00:20:48,410
checksums you know of what you're

636
00:20:48,410 --> 00:20:49,550
actually pulling to verify that these

637
00:20:49,550 --> 00:20:50,929
are what you expected I know nobody's

638
00:20:50,929 --> 00:20:52,730
doing that so please please do that and

639
00:20:52,730 --> 00:20:54,590
if you have resources to connect more

640
00:20:54,590 --> 00:20:57,020
thorough audits please do and if it's

641
00:20:57,020 --> 00:20:58,340
applicable you know publish the results

642
00:20:58,340 --> 00:20:59,960
in a way that's respectful to the

643
00:20:59,960 --> 00:21:01,730
maintainer say hey we we did a security

644
00:21:01,730 --> 00:21:02,900
audit here's what concerns us in our

645
00:21:02,900 --> 00:21:04,340
environment maybe talk talk to the folks

646
00:21:04,340 --> 00:21:06,200
engage them help them just like we want

647
00:21:06,200 --> 00:21:07,940
to help open-source by a contributing

648
00:21:07,940 --> 00:21:08,960
code we also want to help open-source

649
00:21:08,960 --> 00:21:12,080
become more secure and lastly apply

650
00:21:12,080 --> 00:21:14,179
policies to enforce new issues from

651
00:21:14,179 --> 00:21:15,679
being introduced and what you'd like

652
00:21:15,679 --> 00:21:17,900
your environment to do you know for

653
00:21:17,900 --> 00:21:19,370
example do you want to review your

654
00:21:19,370 --> 00:21:21,410
packages on a regular basis and remove

655
00:21:21,410 --> 00:21:23,270
those that are too old do you want to

656
00:21:23,270 --> 00:21:24,830
only introduce dependencies that have

657
00:21:24,830 --> 00:21:26,530
been vetted by a particular team

658
00:21:26,530 --> 00:21:29,809
whatever you wish to do take that long

659
00:21:29,809 --> 00:21:32,059
slow step of moving from audit to

660
00:21:32,059 --> 00:21:34,100
enforcement working with the developers

661
00:21:34,100 --> 00:21:35,960
in your organization so you don't slow

662
00:21:35,960 --> 00:21:37,669
them down by making these changes right

663
00:21:37,669 --> 00:21:39,830
automation here again is key to making

664
00:21:39,830 --> 00:21:40,669
this possible

665
00:21:40,669 --> 00:21:42,109
so overall like I said it's really

666
00:21:42,109 --> 00:21:45,289
boring advice for developers remove what

667
00:21:45,289 --> 00:21:46,639
you don't need patch what you do and

668
00:21:46,639 --> 00:21:48,080
just do a regularly

669
00:21:48,080 --> 00:21:51,379
just patch patch patch and on github

670
00:21:51,379 --> 00:21:52,669
there's a bunch of free features you can

671
00:21:52,669 --> 00:21:53,989
take advantage of to address some of the

672
00:21:53,989 --> 00:21:55,970
steps I just mentioned open-source users

673
00:21:55,970 --> 00:21:58,210
please enable these please use these

674
00:21:58,210 --> 00:22:00,529
dependency graph identifies all upstream

675
00:22:00,529 --> 00:22:01,909
dependencies in public downstream

676
00:22:01,909 --> 00:22:04,340
dependence of repository package items

677
00:22:04,340 --> 00:22:05,779
are automatically added when you add a

678
00:22:05,779 --> 00:22:07,700
new dependency depending on alerts

679
00:22:07,700 --> 00:22:09,679
notifies you of repositories affected by

680
00:22:09,679 --> 00:22:11,929
a newly discovered vulnerability depend

681
00:22:11,929 --> 00:22:13,309
about security updates will send you a

682
00:22:13,309 --> 00:22:15,109
pull request to update dependency to the

683
00:22:15,109 --> 00:22:16,639
minimum version that resolves a known

684
00:22:16,639 --> 00:22:18,649
vulnerability and lastly depend about

685
00:22:18,649 --> 00:22:19,850
version updates updates your

686
00:22:19,850 --> 00:22:22,279
dependencies on a regular basis keeping

687
00:22:22,279 --> 00:22:23,480
them up to date even when there isn't a

688
00:22:23,480 --> 00:22:25,220
new vulnerability by checking for new

689
00:22:25,220 --> 00:22:27,109
versions on a configured schedule so

690
00:22:27,109 --> 00:22:29,029
these are all on four public repos by

691
00:22:29,029 --> 00:22:31,190
default they're all free

692
00:22:31,190 --> 00:22:32,809
and you can enable them for private or

693
00:22:32,809 --> 00:22:35,499
post repos as well for free so please do

694
00:22:35,499 --> 00:22:39,440
now if you're a maintainer and your

695
00:22:39,440 --> 00:22:40,489
project has a newly discovered

696
00:22:40,489 --> 00:22:41,840
vulnerability you're gonna want to

697
00:22:41,840 --> 00:22:43,549
address it and communicate what's going

698
00:22:43,549 --> 00:22:45,649
on as transparently as possible to the

699
00:22:45,649 --> 00:22:48,470
community first you need to be made

700
00:22:48,470 --> 00:22:50,929
aware of a new security issue this might

701
00:22:50,929 --> 00:22:52,309
be someone on your project

702
00:22:52,309 --> 00:22:54,769
finding a security flaw or an external

703
00:22:54,769 --> 00:22:56,869
researcher reporting an issue take

704
00:22:56,869 --> 00:22:59,480
reports seriously triage them to test if

705
00:22:59,480 --> 00:23:00,999
they're valid and respond promptly

706
00:23:00,999 --> 00:23:02,539
including with any follow up

707
00:23:02,539 --> 00:23:03,850
clarification that you might need

708
00:23:03,850 --> 00:23:06,320
keeping that regular constant stream of

709
00:23:06,320 --> 00:23:07,850
communication going between you and

710
00:23:07,850 --> 00:23:09,710
security research is really key so that

711
00:23:09,710 --> 00:23:11,210
they feel like they can come to you and

712
00:23:11,210 --> 00:23:13,039
actually report what's going on and make

713
00:23:13,039 --> 00:23:14,119
sure that you're addressing it right

714
00:23:14,119 --> 00:23:16,730
security researchers get upset when they

715
00:23:16,730 --> 00:23:19,399
try to do the right thing and don't get

716
00:23:19,399 --> 00:23:22,789
a response next develop a fix for the

717
00:23:22,789 --> 00:23:23,059
issue

718
00:23:23,059 --> 00:23:25,549
ideally privately if the fix isn't

719
00:23:25,549 --> 00:23:27,049
available then determine if there's any

720
00:23:27,049 --> 00:23:28,730
possible mitigations that a downstream

721
00:23:28,730 --> 00:23:30,169
user could take to address this

722
00:23:30,169 --> 00:23:33,259
particular bug release the fix and make

723
00:23:33,259 --> 00:23:34,759
it clear as part of your release process

724
00:23:34,759 --> 00:23:36,320
that this addresses a security

725
00:23:36,320 --> 00:23:37,700
vulnerability like don't just say you

726
00:23:37,700 --> 00:23:40,100
know update for whatever you like this

727
00:23:40,100 --> 00:23:41,749
addresses this bug and here's what it

728
00:23:41,749 --> 00:23:43,070
you know here's the known behavior like

729
00:23:43,070 --> 00:23:44,419
that's really helpful for people helping

730
00:23:44,419 --> 00:23:46,369
to prioritize when they want to actually

731
00:23:46,369 --> 00:23:48,320
make that that push that change in their

732
00:23:48,320 --> 00:23:50,239
environment and make sure the fix is

733
00:23:50,239 --> 00:23:52,039
available for any effected currently

734
00:23:52,039 --> 00:23:53,539
supported versions of your project so if

735
00:23:53,539 --> 00:23:54,440
your project has the

736
00:23:54,440 --> 00:23:56,889
three latest versions that supported

737
00:23:56,889 --> 00:23:58,759
make sure the fix applies to all of

738
00:23:58,759 --> 00:24:02,059
those and as part of that release notify

739
00:24:02,059 --> 00:24:04,759
your users if that's you know that's the

740
00:24:04,759 --> 00:24:06,320
entire release process and that's fine

741
00:24:06,320 --> 00:24:08,750
if you have a mailing list this is a

742
00:24:08,750 --> 00:24:10,850
good time make you spit it's better for

743
00:24:10,850 --> 00:24:11,840
people to be aware that there is a

744
00:24:11,840 --> 00:24:13,940
security issue in your project than not

745
00:24:13,940 --> 00:24:15,769
so I would err on the side of over

746
00:24:15,769 --> 00:24:17,269
communicating that you're that you're

747
00:24:17,269 --> 00:24:19,600
addressing an issue in your environment

748
00:24:19,600 --> 00:24:21,440
again if your project is hosted on

749
00:24:21,440 --> 00:24:22,789
github there's a couple of features we

750
00:24:22,789 --> 00:24:25,129
have to make this easier for you you can

751
00:24:25,129 --> 00:24:26,840
create security advisories to disclose

752
00:24:26,840 --> 00:24:29,269
new vulnerabilities in your project when

753
00:24:29,269 --> 00:24:30,620
you find a new vulnerability in your

754
00:24:30,620 --> 00:24:32,750
project create a private Fork to discuss

755
00:24:32,750 --> 00:24:34,580
and fix the issue and then publish

756
00:24:34,580 --> 00:24:36,049
information in a security advisory

757
00:24:36,049 --> 00:24:38,269
that's part of your repo as soon as

758
00:24:38,269 --> 00:24:39,889
you're ready to go public if applicable

759
00:24:39,889 --> 00:24:42,350
maintainer can request a CBE directly

760
00:24:42,350 --> 00:24:43,700
from github for their vulnerability and

761
00:24:43,700 --> 00:24:45,919
those are published to github is

762
00:24:45,919 --> 00:24:48,590
advisory database and again all of these

763
00:24:48,590 --> 00:24:50,629
features are free use them for open

764
00:24:50,629 --> 00:24:53,269
source please and then lastly even if

765
00:24:53,269 --> 00:24:54,769
there's you know nothing wrong with your

766
00:24:54,769 --> 00:24:55,789
project right now I know a security

767
00:24:55,789 --> 00:24:56,990
issue to be concerned about please

768
00:24:56,990 --> 00:24:59,539
please please update the security MD the

769
00:24:59,539 --> 00:25:01,850
security metadata file for your free

770
00:25:01,850 --> 00:25:03,440
repo with information on how to contact

771
00:25:03,440 --> 00:25:05,960
your project to reportable mobility so

772
00:25:05,960 --> 00:25:07,279
like I said let me tell you that you

773
00:25:07,279 --> 00:25:08,539
know the number one pain point of

774
00:25:08,539 --> 00:25:10,759
security researchers today it's having

775
00:25:10,759 --> 00:25:13,039
information trying to report it not

776
00:25:13,039 --> 00:25:14,840
knowing who to go to not getting a

777
00:25:14,840 --> 00:25:17,330
response to their to the reporting so

778
00:25:17,330 --> 00:25:19,250
many researchers that I know which hosts

779
00:25:19,250 --> 00:25:21,500
to go public with a zero-day which is

780
00:25:21,500 --> 00:25:22,519
you know a vulnerability that doesn't

781
00:25:22,519 --> 00:25:23,659
have a patch available it's because they

782
00:25:23,659 --> 00:25:25,669
tried to contact maintained errs and got

783
00:25:25,669 --> 00:25:28,309
no response so please update this info

784
00:25:28,309 --> 00:25:30,230
and know that if something does happen

785
00:25:30,230 --> 00:25:33,320
and developer a researcher can can find

786
00:25:33,320 --> 00:25:34,429
how to contact you as part of that

787
00:25:34,429 --> 00:25:36,980
information and if you do find their

788
00:25:36,980 --> 00:25:38,509
vulnerability then what should you do if

789
00:25:38,509 --> 00:25:39,740
you're you know a security researcher

790
00:25:39,740 --> 00:25:41,870
someone else you know please report it

791
00:25:41,870 --> 00:25:43,639
to the project's maintainer privately

792
00:25:43,639 --> 00:25:45,649
check the project's instructions see if

793
00:25:45,649 --> 00:25:46,940
there's a contact email or try the

794
00:25:46,940 --> 00:25:48,740
project security MD file like I just

795
00:25:48,740 --> 00:25:50,840
mentioned if they have one poke around

796
00:25:50,840 --> 00:25:52,120
on Twitter or poke around on

797
00:25:52,120 --> 00:25:54,110
documentation whatever you can find to

798
00:25:54,110 --> 00:25:57,080
find the right contact point here again

799
00:25:57,080 --> 00:25:58,879
if you're if you're on github

800
00:25:58,879 --> 00:26:01,759
we provide code QL as a free tool to you

801
00:26:01,759 --> 00:26:02,960
to create vulnerabilities across

802
00:26:02,960 --> 00:26:05,480
open-source projects and then refer to

803
00:26:05,480 --> 00:26:06,860
the security metadata file that we just

804
00:26:06,860 --> 00:26:08,720
have talked about to report information

805
00:26:08,720 --> 00:26:11,610
so then putting it all together what

806
00:26:11,610 --> 00:26:13,260
should you be doing in your environment

807
00:26:13,260 --> 00:26:15,750
today if you're a developer know what's

808
00:26:15,750 --> 00:26:17,670
in your environment you know figure out

809
00:26:17,670 --> 00:26:19,320
your dependencies are understand your

810
00:26:19,320 --> 00:26:22,440
risks manage your dependencies or update

811
00:26:22,440 --> 00:26:23,610
them remove things that you don't need

812
00:26:23,610 --> 00:26:25,650
etc and then monitor your your supply

813
00:26:25,650 --> 00:26:27,630
chain to audit and then enforce policies

814
00:26:27,630 --> 00:26:28,890
for what you'd like your environment to

815
00:26:28,890 --> 00:26:31,500
look like if you remain tainer make sure

816
00:26:31,500 --> 00:26:33,870
to use tools and and respond to incoming

817
00:26:33,870 --> 00:26:37,050
reports of security researchers develop

818
00:26:37,050 --> 00:26:39,210
fixes make sure you support although the

819
00:26:39,210 --> 00:26:40,500
necessary versions you need to support

820
00:26:40,500 --> 00:26:42,900
and then release and notify your users

821
00:26:42,900 --> 00:26:44,429
very importantly the businesses security

822
00:26:44,429 --> 00:26:46,559
release and if your security researcher

823
00:26:46,559 --> 00:26:48,750
please report the vulnerability please

824
00:26:48,750 --> 00:26:50,940
check the security MD file to see how to

825
00:26:50,940 --> 00:26:54,540
report that vulnerability and you know

826
00:26:54,540 --> 00:26:57,050
do so do so to the maintainer strengthen

827
00:26:57,050 --> 00:27:01,380
great so if you'd like to learn a bit

828
00:27:01,380 --> 00:27:02,580
more about some of the topics we talked

829
00:27:02,580 --> 00:27:03,630
about today so the supply chain

830
00:27:03,630 --> 00:27:06,030
compromise this from earlier that quote

831
00:27:06,030 --> 00:27:07,980
from Dan and then some of the free

832
00:27:07,980 --> 00:27:09,300
github security features I talked about

833
00:27:09,300 --> 00:27:10,950
that we'd really love you for you to

834
00:27:10,950 --> 00:27:12,780
enable and start patching dependencies

835
00:27:12,780 --> 00:27:13,980
in your projects check out some of the

836
00:27:13,980 --> 00:27:22,650
links here all right we have a few

837
00:27:22,650 --> 00:27:26,250
questions in just ten minutes

838
00:27:26,250 --> 00:27:28,830
let's we've got a number of questions

839
00:27:28,830 --> 00:27:30,780
actually already already in that in the

840
00:27:30,780 --> 00:27:33,270
chats we can go through some of these so

841
00:27:33,270 --> 00:27:35,460
Ned Stokes never you've been you've been

842
00:27:35,460 --> 00:27:37,890
up quite a long time now you've been a

843
00:27:37,890 --> 00:27:39,960
quite a few sessions I've noticed they

844
00:27:39,960 --> 00:27:43,679
never asks how do you see supply chain

845
00:27:43,679 --> 00:27:46,590
provenance developing eg in koto or

846
00:27:46,590 --> 00:27:49,950
graphics yeah there's a couple different

847
00:27:49,950 --> 00:27:52,110
projects there so in toto in Griffiths

848
00:27:52,110 --> 00:27:53,880
or two that you talked about in Toto's

849
00:27:53,880 --> 00:27:56,100
really about signing all the elements

850
00:27:56,100 --> 00:27:57,690
that go into your supply chain it

851
00:27:57,690 --> 00:27:59,970
provides kind of a generic spec graph a

852
00:27:59,970 --> 00:28:02,010
s is specifically around signing

853
00:28:02,010 --> 00:28:03,690
container images that you have in a

854
00:28:03,690 --> 00:28:05,850
container registry for example to have

855
00:28:05,850 --> 00:28:08,580
known metadata like for example it came

856
00:28:08,580 --> 00:28:10,080
out of this bill server or whatever it

857
00:28:10,080 --> 00:28:12,420
happens to be um I think what we need

858
00:28:12,420 --> 00:28:13,710
and some of the efforts in the other

859
00:28:13,710 --> 00:28:15,300
efforts are going on this space is a

860
00:28:15,300 --> 00:28:18,990
broader spec so queer faces container

861
00:28:18,990 --> 00:28:20,520
specific that isn't container specific

862
00:28:20,520 --> 00:28:22,230
and so there's a couple efforts going

863
00:28:22,230 --> 00:28:26,190
there's s PDX there's the OMG 3t working

864
00:28:26,190 --> 00:28:28,560
group there's a couple other efforts

865
00:28:28,560 --> 00:28:30,030
going on to figure out how we want to

866
00:28:30,030 --> 00:28:32,430
define a spec for software Bill of

867
00:28:32,430 --> 00:28:34,770
Materials is the phrase that the term of

868
00:28:34,770 --> 00:28:37,710
art being used and some of that would

869
00:28:37,710 --> 00:28:39,630
include some of the provenance

870
00:28:39,630 --> 00:28:40,890
origination stuff that you're mentioning

871
00:28:40,890 --> 00:28:43,080
like that's possible within todo purpose

872
00:28:43,080 --> 00:28:45,240
so the idea the goal the goal of what

873
00:28:45,240 --> 00:28:47,330
we're aiming for is being able to see

874
00:28:47,330 --> 00:28:49,470
you know with a particular package that

875
00:28:49,470 --> 00:28:51,720
you consume for example what repo that

876
00:28:51,720 --> 00:28:53,520
package came from how it was built who

877
00:28:53,520 --> 00:28:55,590
built it etc who contributed to that

878
00:28:55,590 --> 00:28:57,240
repo like having all of that information

879
00:28:57,240 --> 00:28:59,550
that you can consume at the end to

880
00:28:59,550 --> 00:29:00,690
decide whether or not to pull that

881
00:29:00,690 --> 00:29:03,210
package is the goal we are still very

882
00:29:03,210 --> 00:29:04,710
very far away from that reality today

883
00:29:04,710 --> 00:29:06,390
but some of the work around software

884
00:29:06,390 --> 00:29:08,520
build materials specs is the way to go

885
00:29:08,520 --> 00:29:12,360
there another question from coming from

886
00:29:12,360 --> 00:29:13,110
Andrew Hawley

887
00:29:13,110 --> 00:29:17,490
Andrew asks so for software composition

888
00:29:17,490 --> 00:29:20,640
architecture style tools what are your

889
00:29:20,640 --> 00:29:22,830
thoughts on open source of CA tools

890
00:29:22,830 --> 00:29:26,280
versus commercial tools I think it

891
00:29:26,280 --> 00:29:27,540
really depends what you're using them

892
00:29:27,540 --> 00:29:29,640
for and what you're like your project

893
00:29:29,640 --> 00:29:31,430
etc if you're an open source project

894
00:29:31,430 --> 00:29:34,380
there's some great open source free SCA

895
00:29:34,380 --> 00:29:35,790
tools out there and I would argue that's

896
00:29:35,790 --> 00:29:38,550
probably good enough for your open

897
00:29:38,550 --> 00:29:40,670
source project if you're a small company

898
00:29:40,670 --> 00:29:43,110
probably the same if you're a larger

899
00:29:43,110 --> 00:29:44,640
company typically we are looking for

900
00:29:44,640 --> 00:29:46,230
some other features and your SEO tools

901
00:29:46,230 --> 00:29:48,000
so some of the things I see people ask

902
00:29:48,000 --> 00:29:49,290
for things around like license

903
00:29:49,290 --> 00:29:51,090
compliance for example tell me that I

904
00:29:51,090 --> 00:29:53,340
don't have any copyleft licenses right

905
00:29:53,340 --> 00:29:55,830
I'm an open source project that doesn't

906
00:29:55,830 --> 00:29:58,320
really bother me but um you know a large

907
00:29:58,320 --> 00:30:00,720
bank I really want to make sure that I

908
00:30:00,720 --> 00:30:01,710
don't have anything like that in my

909
00:30:01,710 --> 00:30:03,480
environment and so in that case people

910
00:30:03,480 --> 00:30:05,010
go towards commercial tools to find some

911
00:30:05,010 --> 00:30:11,000
of those that functionality how much

912
00:30:11,000 --> 00:30:14,310
more ice asks because the reason teams

913
00:30:14,310 --> 00:30:17,100
are no longer willing to report security

914
00:30:17,100 --> 00:30:20,610
for those two users yeah I wonder if

915
00:30:20,610 --> 00:30:22,710
you're asking about security researchers

916
00:30:22,710 --> 00:30:25,740
two projects or from security like

917
00:30:25,740 --> 00:30:27,420
within a company security teams two

918
00:30:27,420 --> 00:30:28,950
developers I think I see both of those

919
00:30:28,950 --> 00:30:30,510
as painting as being pain points in

920
00:30:30,510 --> 00:30:32,850
different ways so for security T

921
00:30:32,850 --> 00:30:35,550
security researchers - two projects for

922
00:30:35,550 --> 00:30:35,850
exam

923
00:30:35,850 --> 00:30:41,549
all the the main pain I hear is just not

924
00:30:41,549 --> 00:30:44,010
knowing where to go I think security

925
00:30:44,010 --> 00:30:45,809
researchers if you ask there's there's a

926
00:30:45,809 --> 00:30:46,980
really good report by hacker one's

927
00:30:46,980 --> 00:30:48,809
called the I think it's the hacker

928
00:30:48,809 --> 00:30:50,250
report I think it's called and one of

929
00:30:50,250 --> 00:30:52,169
the questions they ask is why do you

930
00:30:52,169 --> 00:30:54,600
look for for bugs and software and it's

931
00:30:54,600 --> 00:30:56,850
like because I love the product because

932
00:30:56,850 --> 00:30:59,340
I want to help the company so I think a

933
00:30:59,340 --> 00:31:01,260
lot of people think that you know oh

934
00:31:01,260 --> 00:31:02,970
this researchers being really mean and

935
00:31:02,970 --> 00:31:04,260
they found a you know a zero day my

936
00:31:04,260 --> 00:31:05,610
project and they're being really hard

937
00:31:05,610 --> 00:31:07,080
and you know reporting it to me and

938
00:31:07,080 --> 00:31:08,570
they're demanding all these things like

939
00:31:08,570 --> 00:31:11,669
they're trying to help you most of the

940
00:31:11,669 --> 00:31:13,110
time right most of the time and trying

941
00:31:13,110 --> 00:31:15,000
to help you so making it really easy for

942
00:31:15,000 --> 00:31:16,140
them to help you is really what you're

943
00:31:16,140 --> 00:31:18,480
what you're looking to do here now if I

944
00:31:18,480 --> 00:31:20,010
if I take your question in a slightly

945
00:31:20,010 --> 00:31:23,700
different way which is you know why are

946
00:31:23,700 --> 00:31:25,950
within within a company how come

947
00:31:25,950 --> 00:31:27,480
security has a hard time talking to

948
00:31:27,480 --> 00:31:28,650
death right that's the whole like dev

949
00:31:28,650 --> 00:31:31,400
said cops mentality um

950
00:31:31,400 --> 00:31:33,960
historically very siloed organizations

951
00:31:33,960 --> 00:31:36,450
you know historically security seen as a

952
00:31:36,450 --> 00:31:38,100
gatekeeper seen as the last thing you

953
00:31:38,100 --> 00:31:39,450
need to get approval for before you can

954
00:31:39,450 --> 00:31:41,280
ship the production scene is slowing you

955
00:31:41,280 --> 00:31:42,750
down see knows I'm sure there's been a

956
00:31:42,750 --> 00:31:45,390
ton of talks today on DISA cops and what

957
00:31:45,390 --> 00:31:47,880
and what that means and how to make that

958
00:31:47,880 --> 00:31:50,880
better the the main the main issue that

959
00:31:50,880 --> 00:31:53,070
I would see there is security teams

960
00:31:53,070 --> 00:31:55,860
being feeling like they can't report

961
00:31:55,860 --> 00:31:57,150
something because they don't want to

962
00:31:57,150 --> 00:31:58,740
slow down developers and likewise

963
00:31:58,740 --> 00:32:01,799
developers feeling like they can't ship

964
00:32:01,799 --> 00:32:03,210
something cuz they don't want to anger

965
00:32:03,210 --> 00:32:05,610
security and so just kind of like any

966
00:32:05,610 --> 00:32:07,679
you know bad situation like talk it out

967
00:32:07,679 --> 00:32:09,419
maybe maybe meaning and seeing what your

968
00:32:09,419 --> 00:32:10,919
actual requirements are and why why

969
00:32:10,919 --> 00:32:12,360
you're doing what you're doing will help

970
00:32:12,360 --> 00:32:13,770
you figure out how to how to solve that

971
00:32:13,770 --> 00:32:15,320
environment

972
00:32:15,320 --> 00:32:17,490
we the interesting question just coming

973
00:32:17,490 --> 00:32:20,340
from Brandon and I'm gonna kind of add

974
00:32:20,340 --> 00:32:21,659
something to this question as well so

975
00:32:21,659 --> 00:32:23,669
the question is what can't we automate

976
00:32:23,669 --> 00:32:25,409
in app spec and I get to the secondary

977
00:32:25,409 --> 00:32:28,440
question today is one we do automate

978
00:32:28,440 --> 00:32:30,510
something what happens when we can't add

979
00:32:30,510 --> 00:32:34,169
that into a into a reasonable reasonable

980
00:32:34,169 --> 00:32:35,909
speed so that it affects that kind of

981
00:32:35,909 --> 00:32:39,150
like CI CD delivery yeah there's a lot

982
00:32:39,150 --> 00:32:41,940
of things that can be automated and the

983
00:32:41,940 --> 00:32:43,470
like to get to world were a lot more

984
00:32:43,470 --> 00:32:46,909
things are automated um I think they're

985
00:32:46,909 --> 00:32:49,950
the big the big issue

986
00:32:49,950 --> 00:32:52,759
we're gonna run into as a security

987
00:32:52,759 --> 00:32:55,470
industry for patch management for some

988
00:32:55,470 --> 00:32:56,399
of the stuff I was talking about today

989
00:32:56,399 --> 00:32:57,539
patching your dependencies in the next

990
00:32:57,539 --> 00:33:00,659
couple years is gonna be testing you can

991
00:33:00,659 --> 00:33:02,460
automate stuff as long as you know that

992
00:33:02,460 --> 00:33:04,440
you can check you can run your tests and

993
00:33:04,440 --> 00:33:05,669
see that they don't fail and then you

994
00:33:05,669 --> 00:33:07,200
can you know build and deploy and all

995
00:33:07,200 --> 00:33:08,580
that stuff like my magic happens right

996
00:33:08,580 --> 00:33:10,769
but if you don't have good tests in

997
00:33:10,769 --> 00:33:13,799
place then automation doesn't really

998
00:33:13,799 --> 00:33:15,809
help you because you don't actually know

999
00:33:15,809 --> 00:33:17,370
if anything's anything's change your

1000
00:33:17,370 --> 00:33:19,409
broken mirror environment I think the

1001
00:33:19,409 --> 00:33:21,360
the other the other current angle on

1002
00:33:21,360 --> 00:33:23,250
this is a little bit over I mentioned

1003
00:33:23,250 --> 00:33:24,690
earlier with like es lint as an example

1004
00:33:24,690 --> 00:33:29,519
which is had you automated that it would

1005
00:33:29,519 --> 00:33:32,100
have been much worse you would have you

1006
00:33:32,100 --> 00:33:33,389
know picked up something bad and

1007
00:33:33,389 --> 00:33:35,039
deployed it's your environment and and

1008
00:33:35,039 --> 00:33:38,070
not known the eventually that could have

1009
00:33:38,070 --> 00:33:41,100
been much bigger to the industry so I

1010
00:33:41,100 --> 00:33:43,289
think I think the the lesson there is

1011
00:33:43,289 --> 00:33:46,100
for now we still need humans in the loop

1012
00:33:46,100 --> 00:33:49,110
for a lot of this stuff to do some to do

1013
00:33:49,110 --> 00:33:51,179
some nominal security review to do some

1014
00:33:51,179 --> 00:33:52,919
you know understanding of whether or not

1015
00:33:52,919 --> 00:33:53,940
this actually needs in your environment

1016
00:33:53,940 --> 00:33:57,570
etc ideally in a couple of years we'll

1017
00:33:57,570 --> 00:33:58,980
be able to have enough data enough

1018
00:33:58,980 --> 00:34:01,230
information that flows downstream like I

1019
00:34:01,230 --> 00:34:02,220
said from something like a software

1020
00:34:02,220 --> 00:34:05,190
developer materials that will know if

1021
00:34:05,190 --> 00:34:07,679
something looks really fishy but we're

1022
00:34:07,679 --> 00:34:09,239
not there yet we're really not there yet

1023
00:34:09,239 --> 00:34:13,619
and so you know automate and then the

1024
00:34:13,619 --> 00:34:14,609
riskiest thing that happened your

1025
00:34:14,609 --> 00:34:16,020
environment please still have a human in

1026
00:34:16,020 --> 00:34:17,310
the loop checking what's going on right

1027
00:34:17,310 --> 00:34:19,918
automation should be around saving your

1028
00:34:19,918 --> 00:34:22,109
security team time not eliminating your

1029
00:34:22,109 --> 00:34:24,770
security team

