1
00:00:01,310 --> 00:00:04,680
so our next speaker is a solution

2
00:00:04,680 --> 00:00:09,170
architect at octopus deploy he says he

3
00:00:09,170 --> 00:00:11,940
he specializes in project rescued

4
00:00:11,940 --> 00:00:14,549
governance and development methodologies

5
00:00:14,549 --> 00:00:16,680
he's a fan of high quality code I think

6
00:00:16,680 --> 00:00:19,020
we all are alright hopefully all our

7
00:00:19,020 --> 00:00:22,740
maybe that's why we're here but so for

8
00:00:22,740 --> 00:00:25,320
our next session let me introduce Andrew

9
00:00:25,320 --> 00:00:29,330
Harcourt Andrew the floor is yours

10
00:00:29,330 --> 00:00:32,369
Thank You Alyssa hi everybody hi from

11
00:00:32,369 --> 00:00:34,260
from sunny Brisbane it's one of the few

12
00:00:34,260 --> 00:00:35,969
places in the world where you can get

13
00:00:35,969 --> 00:00:38,579
sunburned in the middle of winter so

14
00:00:38,579 --> 00:00:41,370
firstly yeah thank you to to all of the

15
00:00:41,370 --> 00:00:43,530
organizers you've done a fantastic job

16
00:00:43,530 --> 00:00:45,270
in putting this this event on especially

17
00:00:45,270 --> 00:00:47,700
given the very difficult circumstances

18
00:00:47,700 --> 00:00:50,430
thank you to the sponsors and obviously

19
00:00:50,430 --> 00:00:52,289
thank you to the attendees for turning

20
00:00:52,289 --> 00:00:54,030
up even virtually turning up thank you

21
00:00:54,030 --> 00:00:56,850
it's wonderful to have you here so a

22
00:00:56,850 --> 00:00:59,430
little bit about me so I met a doctor

23
00:00:59,430 --> 00:01:01,590
push deploy at present I've spent a lot

24
00:01:01,590 --> 00:01:03,629
of time I've been coding since I was

25
00:01:03,629 --> 00:01:05,129
about five years old and that's getting

26
00:01:05,129 --> 00:01:07,049
far too long a time to talk about now

27
00:01:07,049 --> 00:01:09,810
before octopus I was that thought works

28
00:01:09,810 --> 00:01:11,909
as a principal consultant there I spent

29
00:01:11,909 --> 00:01:13,619
some time and rediff I and then before

30
00:01:13,619 --> 00:01:15,659
that in a different part of my life once

31
00:01:15,659 --> 00:01:18,180
upon a time I was a pen tester this was

32
00:01:18,180 --> 00:01:19,740
back in the days before meterpreter was

33
00:01:19,740 --> 00:01:21,570
a thing I am assured that the world has

34
00:01:21,570 --> 00:01:26,250
moved on so let's get started

35
00:01:26,250 --> 00:01:28,350
with quick overview so I want to talk a

36
00:01:28,350 --> 00:01:30,479
little bit about doing the right thing

37
00:01:30,479 --> 00:01:33,570
so this talk is about treating security

38
00:01:33,570 --> 00:01:35,670
as a first-class concern in our domain

39
00:01:35,670 --> 00:01:37,380
model but I want to talk about why that

40
00:01:37,380 --> 00:01:39,720
doesn't happen so why is doing the right

41
00:01:39,720 --> 00:01:41,280
things are difficult we're gonna talk

42
00:01:41,280 --> 00:01:42,720
the meat of this talk is about security

43
00:01:42,720 --> 00:01:45,299
modeling in our domain how a rich domain

44
00:01:45,299 --> 00:01:48,600
model is actually going to help us model

45
00:01:48,600 --> 00:01:50,700
our security and be able to test our

46
00:01:50,700 --> 00:01:53,070
security constraints and we'll cover a

47
00:01:53,070 --> 00:01:55,409
little bit about infrastructure not so

48
00:01:55,409 --> 00:01:57,299
much for as the focus of this talk but

49
00:01:57,299 --> 00:02:00,180
as how this plays nicely together first

50
00:02:00,180 --> 00:02:02,130
things first though I wanted to ask a

51
00:02:02,130 --> 00:02:04,619
question and that means I'm on it I'm

52
00:02:04,619 --> 00:02:06,540
monitoring the the briella stream so

53
00:02:06,540 --> 00:02:08,068
please pipe up in the comments if you

54
00:02:08,068 --> 00:02:10,470
can or a to ask who went for ride today

55
00:02:10,470 --> 00:02:12,870
who rode their bicycle or went for a run

56
00:02:12,870 --> 00:02:13,690
or

57
00:02:13,690 --> 00:02:15,820
some exercise of any sort and I'll be

58
00:02:15,820 --> 00:02:19,000
the first to confess that I didn't my

59
00:02:19,000 --> 00:02:20,890
bike stayed on its rack this morning I

60
00:02:20,890 --> 00:02:24,160
haven't done my push-ups and the reason

61
00:02:24,160 --> 00:02:26,350
for that was that I was getting ready

62
00:02:26,350 --> 00:02:28,360
for you know presenting at this

63
00:02:28,360 --> 00:02:29,620
conference um

64
00:02:29,620 --> 00:02:32,950
that's no real surprise enough

65
00:02:32,950 --> 00:02:34,960
vegetables this week now we all know

66
00:02:34,960 --> 00:02:36,220
this is good for us right come on who is

67
00:02:36,220 --> 00:02:37,810
it you know each of veggies right he was

68
00:02:37,810 --> 00:02:39,220
drunk enough water who's got enough

69
00:02:39,220 --> 00:02:41,520
sleep why not

70
00:02:41,520 --> 00:02:45,790
and whose Patch doll their service be

71
00:02:45,790 --> 00:02:46,300
honest

72
00:02:46,300 --> 00:02:48,250
who's patched everything this week who

73
00:02:48,250 --> 00:02:50,740
can genuinely say someone went for

74
00:02:50,740 --> 00:02:52,120
Thomas Thomas Griffiths went for a run

75
00:02:52,120 --> 00:02:55,420
congratulations one person so whose

76
00:02:55,420 --> 00:02:56,920
Patch doll their servers this week and

77
00:02:56,920 --> 00:02:58,600
I've graded earlier dependencies and

78
00:02:58,600 --> 00:03:01,630
actually released it to production right

79
00:03:01,630 --> 00:03:04,990
and why not because some of us have but

80
00:03:04,990 --> 00:03:06,430
I'm willing to bet more than a cookie

81
00:03:06,430 --> 00:03:09,310
but most of us haven't so why is this

82
00:03:09,310 --> 00:03:09,760
hard

83
00:03:09,760 --> 00:03:11,470
why is doing the right things so

84
00:03:11,470 --> 00:03:13,330
difficult and how can we make it easier

85
00:03:13,330 --> 00:03:16,870
to do the right thing so when we're

86
00:03:16,870 --> 00:03:18,310
talking about writing secure code

87
00:03:18,310 --> 00:03:19,630
obviously not creating vulnerabilities

88
00:03:19,630 --> 00:03:22,510
in the first place is a good thing but

89
00:03:22,510 --> 00:03:24,760
it's not always easy to do that I just

90
00:03:24,760 --> 00:03:26,320
don't write books right that's that's

91
00:03:26,320 --> 00:03:29,350
easy everyone says that but what if it's

92
00:03:29,350 --> 00:03:31,570
hard to reason about the the rules and

93
00:03:31,570 --> 00:03:34,660
then let's assume that when we are okay

94
00:03:34,660 --> 00:03:36,370
fine so we found a vulnerability we've

95
00:03:36,370 --> 00:03:38,530
identified it at least which is great I

96
00:03:38,530 --> 00:03:40,239
guess you've given the thing exists we'd

97
00:03:40,239 --> 00:03:43,810
rather know about it than not and we've

98
00:03:43,810 --> 00:03:46,000
probably even fixed it or what if we

99
00:03:46,000 --> 00:03:48,430
can't ship how are we confident that we

100
00:03:48,430 --> 00:03:49,690
haven't broken in or the functionality

101
00:03:49,690 --> 00:03:53,830
and where this comes to is well writing

102
00:03:53,830 --> 00:03:56,340
good tests means writing safer code but

103
00:03:56,340 --> 00:03:59,140
what if it's hard to write those good

104
00:03:59,140 --> 00:04:01,209
tests and some of the things that we do

105
00:04:01,209 --> 00:04:03,220
in the name of infrastructure automation

106
00:04:03,220 --> 00:04:06,489
or in the name of security make it hard

107
00:04:06,489 --> 00:04:11,550
to write good tests writing good tests

108
00:04:11,550 --> 00:04:14,050
really is dependent I mean obviously you

109
00:04:14,050 --> 00:04:15,010
have to write a nice card on the

110
00:04:15,010 --> 00:04:16,570
beginning you have to write testable

111
00:04:16,570 --> 00:04:19,630
code but writing good tests you need to

112
00:04:19,630 --> 00:04:22,900
be able to run them easily and when we

113
00:04:22,900 --> 00:04:25,270
look at where tests run it's a pretty

114
00:04:25,270 --> 00:04:26,340
good indicator of

115
00:04:26,340 --> 00:04:28,470
how difficult it is to write them in the

116
00:04:28,470 --> 00:04:31,169
first place and remember the more

117
00:04:31,169 --> 00:04:33,600
difficult it is the less likely if

118
00:04:33,600 --> 00:04:36,150
people are to write them well or to run

119
00:04:36,150 --> 00:04:38,760
them or to care now if I can run all of

120
00:04:38,760 --> 00:04:40,229
my tests for the entire application

121
00:04:40,229 --> 00:04:42,570
suite on a single dev workstation and

122
00:04:42,570 --> 00:04:43,889
there are their workstations that can do

123
00:04:43,889 --> 00:04:46,199
that unless your Google it's pretty

124
00:04:46,199 --> 00:04:48,060
simple to just run all other cysts have

125
00:04:48,060 --> 00:04:49,620
it give us an answer in a few seconds

126
00:04:49,620 --> 00:04:51,210
maybe a few tens of seconds if it's a

127
00:04:51,210 --> 00:04:54,000
large application suite and I've got an

128
00:04:54,000 --> 00:04:55,830
answer that I'm comfortable with my

129
00:04:55,830 --> 00:04:57,510
tests are green we're all good I'm happy

130
00:04:57,510 --> 00:04:59,220
to write this I'm happy to ship it all

131
00:04:59,220 --> 00:05:02,460
right if we need to yes let's start

132
00:05:02,460 --> 00:05:03,960
introducing some dependencies though

133
00:05:03,960 --> 00:05:05,940
let's say well I can run locally on a

134
00:05:05,940 --> 00:05:07,169
workstation but it needs a database

135
00:05:07,169 --> 00:05:08,520
which means we're either running up

136
00:05:08,520 --> 00:05:10,530
sequel server if we're old-school or we

137
00:05:10,530 --> 00:05:12,300
docker compose up the universe and we

138
00:05:12,300 --> 00:05:14,250
run something up on whatever local you

139
00:05:14,250 --> 00:05:16,320
your favorite database platform we run

140
00:05:16,320 --> 00:05:18,360
it in memory database yet but it's not

141
00:05:18,360 --> 00:05:20,789
as easy I'm still gonna do it because

142
00:05:20,789 --> 00:05:22,530
I'm a good engineer but it's not as easy

143
00:05:22,530 --> 00:05:23,880
it just adds a little bit of friction

144
00:05:23,880 --> 00:05:25,500
and maybe that little bit of friction is

145
00:05:25,500 --> 00:05:29,310
ok but then we look at like a maybe I

146
00:05:29,310 --> 00:05:30,900
need to run a new cube control applied a

147
00:05:30,900 --> 00:05:32,700
share for actually that wasn't working

148
00:05:32,700 --> 00:05:33,539
they're gonna do a whole bunch of

149
00:05:33,539 --> 00:05:34,889
substitutions so now I'm trying to

150
00:05:34,889 --> 00:05:36,780
install helm charts locally just to run

151
00:05:36,780 --> 00:05:39,330
all these tests on mini cube and that

152
00:05:39,330 --> 00:05:41,430
we're getting into the realms of this is

153
00:05:41,430 --> 00:05:44,010
getting to be a bit of a chore if we

154
00:05:44,010 --> 00:05:46,349
look at the other end of the spectrum ok

155
00:05:46,349 --> 00:05:48,090
now I have to do a git push just to run

156
00:05:48,090 --> 00:05:51,419
some tests on a build agent or worse

157
00:05:51,419 --> 00:05:55,620
you mean the dev ops team is going to

158
00:05:55,620 --> 00:05:58,169
run my tests for me or by the testing

159
00:05:58,169 --> 00:05:59,789
team which is a separate group of people

160
00:05:59,789 --> 00:06:01,020
who live in a different building on a

161
00:06:01,020 --> 00:06:02,669
different floor and they probably think

162
00:06:02,669 --> 00:06:04,590
that I live in a cave and I probably

163
00:06:04,590 --> 00:06:06,060
think that they live under a rock and

164
00:06:06,060 --> 00:06:07,860
know just know this isn't gonna happen

165
00:06:07,860 --> 00:06:10,110
we're not gonna have good tests if it's

166
00:06:10,110 --> 00:06:11,880
too hard to run them no one's going to

167
00:06:11,880 --> 00:06:14,160
bother to write them so why does that

168
00:06:14,160 --> 00:06:18,360
matter well the problem is that when we

169
00:06:18,360 --> 00:06:20,970
talk about composing our application

170
00:06:20,970 --> 00:06:24,660
Suites we tend to try to plug components

171
00:06:24,660 --> 00:06:26,490
off the shelf and this is a good thing

172
00:06:26,490 --> 00:06:28,260
if you're rolling your own

173
00:06:28,260 --> 00:06:32,490
authentication framework you might that

174
00:06:32,490 --> 00:06:33,720
might be your core business but

175
00:06:33,720 --> 00:06:36,630
otherwise you're probably doing it wrong

176
00:06:36,630 --> 00:06:38,640
likewise if you're putting logic in your

177
00:06:38,640 --> 00:06:40,090
API gateways that's

178
00:06:40,090 --> 00:06:42,250
probably not the right place for it the

179
00:06:42,250 --> 00:06:44,260
difficulty is that everywhere we

180
00:06:44,260 --> 00:06:46,870
outsource logic we also make it more

181
00:06:46,870 --> 00:06:50,290
complex to test if I can test a

182
00:06:50,290 --> 00:06:52,449
self-contained a little component then

183
00:06:52,449 --> 00:06:54,160
I'm gonna be a whole lot more confident

184
00:06:54,160 --> 00:06:56,050
than if I have to spool up an instance

185
00:06:56,050 --> 00:06:58,060
of an API gateway or a firewall or a

186
00:06:58,060 --> 00:07:00,490
this or about so when we're outsourcing

187
00:07:00,490 --> 00:07:02,380
we need to be very very careful about

188
00:07:02,380 --> 00:07:04,780
what we choose to outsource and what we

189
00:07:04,780 --> 00:07:07,990
don't as a fundamental principle you

190
00:07:07,990 --> 00:07:09,940
outsource only your periphery you're out

191
00:07:09,940 --> 00:07:11,740
you outsource the commodities you don't

192
00:07:11,740 --> 00:07:13,210
outsource the core of what you do

193
00:07:13,210 --> 00:07:16,270
unfortunately that will contrast quite

194
00:07:16,270 --> 00:07:18,340
starkly with the messaging that you'll

195
00:07:18,340 --> 00:07:19,870
get from Enterprise middleware vendors

196
00:07:19,870 --> 00:07:21,760
who want to sell you everything where

197
00:07:21,760 --> 00:07:24,639
you end up with you clever pipes and

198
00:07:24,639 --> 00:07:26,650
dumb endpoints rather than the the

199
00:07:26,650 --> 00:07:28,990
converse so we want to give some thought

200
00:07:28,990 --> 00:07:33,010
to what is sensible to outsource so I'm

201
00:07:33,010 --> 00:07:34,570
gonna play a little game first it's

202
00:07:34,570 --> 00:07:37,450
called spot the bug all right now this

203
00:07:37,450 --> 00:07:39,280
bug it doesn't currently appear in the

204
00:07:39,280 --> 00:07:41,350
office I was top ten but it usually

205
00:07:41,350 --> 00:07:43,150
makes appearances here and there you'll

206
00:07:43,150 --> 00:07:45,940
spot it pretty easily and I will promise

207
00:07:45,940 --> 00:07:47,860
to send some in Brisbane Australia I

208
00:07:47,860 --> 00:07:49,630
will promise to send you a Byron Bay

209
00:07:49,630 --> 00:07:51,669
cookie in the mail physically to the

210
00:07:51,669 --> 00:07:53,410
first person who can put a chat put a

211
00:07:53,410 --> 00:07:55,060
message into the chat telling me what

212
00:07:55,060 --> 00:07:58,990
this bug is so welcome to our cafe we're

213
00:07:58,990 --> 00:08:01,120
giving away coffee it's awesome

214
00:08:01,120 --> 00:08:03,580
unfortunately this is a virtual virtual

215
00:08:03,580 --> 00:08:05,979
conference so this is virtual coffee how

216
00:08:05,979 --> 00:08:07,930
incremental cost of goods sold is zero

217
00:08:07,930 --> 00:08:10,120
nonetheless welcome to the second cafe

218
00:08:10,120 --> 00:08:13,810
24 let's have a look at this so this is

219
00:08:13,810 --> 00:08:16,630
a little out but I spun up earlier it's

220
00:08:16,630 --> 00:08:18,490
our free little cafe application and

221
00:08:18,490 --> 00:08:20,860
it's got some woeful security holes of

222
00:08:20,860 --> 00:08:22,479
them some are deliberate some of those

223
00:08:22,479 --> 00:08:25,510
just to put the scaffolding there so

224
00:08:25,510 --> 00:08:26,710
what we're gonna do I'm logged in is

225
00:08:26,710 --> 00:08:27,970
Andrew at the moment but you can see

226
00:08:27,970 --> 00:08:28,780
there's no password there's no

227
00:08:28,780 --> 00:08:29,830
authentication that doesn't really

228
00:08:29,830 --> 00:08:31,750
matter what's the bug I'm gonna login as

229
00:08:31,750 --> 00:08:34,779
Andrew and I'm going to go to my orders

230
00:08:34,779 --> 00:08:36,549
collection this is my order history so

231
00:08:36,549 --> 00:08:37,750
let's have a look at my order history

232
00:08:37,750 --> 00:08:39,159
and you can see that I haven't drunk all

233
00:08:39,159 --> 00:08:40,900
that much coffee today I've ordered a

234
00:08:40,900 --> 00:08:42,490
flat white with one sugar and I'm gonna

235
00:08:42,490 --> 00:08:45,400
view it's details that's your cue spot

236
00:08:45,400 --> 00:08:49,810
the bug now I'm gonna copy that URL I'm

237
00:08:49,810 --> 00:08:51,130
gonna go back to the home page and I'm

238
00:08:51,130 --> 00:08:52,630
gonna log in as Damien and your new

239
00:08:52,630 --> 00:08:53,500
convenien by the way

240
00:08:53,500 --> 00:08:55,240
just three mates they'll likely heckle

241
00:08:55,240 --> 00:08:56,620
each other a little bit but nobody here

242
00:08:56,620 --> 00:09:00,220
is malicious nonetheless there are two

243
00:09:00,220 --> 00:09:01,690
my orders in it that's actually a good

244
00:09:01,690 --> 00:09:03,850
catch but it's not the bug these are

245
00:09:03,850 --> 00:09:06,400
cues that one and two are cues for me so

246
00:09:06,400 --> 00:09:08,110
I know which one is which this one is

247
00:09:08,110 --> 00:09:09,730
the not secure one this is the slightly

248
00:09:09,730 --> 00:09:12,130
more secure one good catch though good

249
00:09:12,130 --> 00:09:13,930
attempt floor is still open have a go

250
00:09:13,930 --> 00:09:16,540
what's the bug so I'm gonna log in as

251
00:09:16,540 --> 00:09:19,180
Damian no that's not the bad guy that

252
00:09:19,180 --> 00:09:20,980
you can see that I've changed I'm now in

253
00:09:20,980 --> 00:09:23,050
my user context as Damian and if I go to

254
00:09:23,050 --> 00:09:25,480
Damian's order collection we can see the

255
00:09:25,480 --> 00:09:27,400
Damian's coffee order is the extra shot

256
00:09:27,400 --> 00:09:29,650
flat white and we can view it's details

257
00:09:29,650 --> 00:09:31,840
and we can see okay so this is I'm in

258
00:09:31,840 --> 00:09:33,430
logged in as Damian this is an order for

259
00:09:33,430 --> 00:09:35,500
Damian and there's an extra shot right

260
00:09:35,500 --> 00:09:38,110
there session invalidation good guess

261
00:09:38,110 --> 00:09:39,640
what I'm looking for you're spotted in a

262
00:09:39,640 --> 00:09:42,670
second as soon as I go to the address

263
00:09:42,670 --> 00:09:45,240
bar what's gonna happen when I hit paste

264
00:09:45,240 --> 00:09:48,280
I'm gonna paste that previous URL in I'm

265
00:09:48,280 --> 00:09:52,540
gonna hit into oops logged in as Damian

266
00:09:52,540 --> 00:09:54,760
I can see in order to Andrew we've got a

267
00:09:54,760 --> 00:09:58,150
direct object access bug how did that

268
00:09:58,150 --> 00:10:01,540
happen am I an idiot when I wrote this

269
00:10:01,540 --> 00:10:04,330
thing what was I thinking what I was

270
00:10:04,330 --> 00:10:06,250
thinking and I'm gonna bring up the code

271
00:10:06,250 --> 00:10:07,750
for a second now don't freak out it's

272
00:10:07,750 --> 00:10:10,839
just code it's not an alien this is the

273
00:10:10,839 --> 00:10:13,980
code this is the code that has the bug

274
00:10:13,980 --> 00:10:16,300
you are correct your guess is that you

275
00:10:16,300 --> 00:10:17,680
can go to another person's account you

276
00:10:17,680 --> 00:10:19,690
can't go to their account but you can go

277
00:10:19,690 --> 00:10:21,580
to things that are owned by them and the

278
00:10:21,580 --> 00:10:23,410
reason for that is because I've got a

279
00:10:23,410 --> 00:10:26,380
weak anemic domain model here and you

280
00:10:26,380 --> 00:10:27,820
can see this right we're taking an order

281
00:10:27,820 --> 00:10:29,350
ID as a route parameter we're

282
00:10:29,350 --> 00:10:30,970
materializing that directly from an

283
00:10:30,970 --> 00:10:32,290
order repository and then we're just

284
00:10:32,290 --> 00:10:33,670
mapping that to our view model and we're

285
00:10:33,670 --> 00:10:34,780
putting it straight on to the screen

286
00:10:34,780 --> 00:10:36,310
we're not even checking for who owns

287
00:10:36,310 --> 00:10:41,680
this order whoops but be honest who's

288
00:10:41,680 --> 00:10:43,830
never ever ever written code like this I

289
00:10:43,830 --> 00:10:46,000
was thinking about my next coffee I

290
00:10:46,000 --> 00:10:48,520
didn't have it and you can see that our

291
00:10:48,520 --> 00:10:50,440
code to a resharper is actually even

292
00:10:50,440 --> 00:10:52,030
telling us hey you've got this logged in

293
00:10:52,030 --> 00:10:55,020
customer thing that you are not using

294
00:10:55,020 --> 00:10:57,550
maybe you want to deal with this bug is

295
00:10:57,550 --> 00:10:58,810
an actually session management this will

296
00:10:58,810 --> 00:11:00,520
work even if it's nobody if we're logged

297
00:11:00,520 --> 00:11:01,900
in with absolutely nobody this will

298
00:11:01,900 --> 00:11:05,170
still work so let's have a look at what

299
00:11:05,170 --> 00:11:07,080
this code could have looked like in

300
00:11:07,080 --> 00:11:09,330
so let's flick back to this gun and have

301
00:11:09,330 --> 00:11:12,990
a look here so here's our bug it's

302
00:11:12,990 --> 00:11:14,760
direct object access I can paste in a

303
00:11:14,760 --> 00:11:16,740
URL and I can access stuff now we've got

304
00:11:16,740 --> 00:11:18,270
one saving grace which is that it's a

305
00:11:18,270 --> 00:11:19,860
gooood so it's a little bit harder to

306
00:11:19,860 --> 00:11:22,790
inspect but it's still not that hard and

307
00:11:22,790 --> 00:11:25,470
here's our bug I've taken a dependency

308
00:11:25,470 --> 00:11:27,150
on an order repository and I've gone and

309
00:11:27,150 --> 00:11:29,880
fetched that however if we tweaked that

310
00:11:29,880 --> 00:11:32,940
very slightly what we could have done is

311
00:11:32,940 --> 00:11:35,100
we could have used our RM and our rich

312
00:11:35,100 --> 00:11:37,320
domain model to help us out here we

313
00:11:37,320 --> 00:11:38,940
could have said rather than just grant

314
00:11:38,940 --> 00:11:40,500
going straight to the orders repository

315
00:11:40,500 --> 00:11:42,330
what we're gonna do is we're still gonna

316
00:11:42,330 --> 00:11:44,700
take the order ID from our out parameter

317
00:11:44,700 --> 00:11:46,710
but then what we're going to do is we're

318
00:11:46,710 --> 00:11:48,830
going to resolve the logged in customer

319
00:11:48,830 --> 00:11:51,570
we are then going to go from the

320
00:11:51,570 --> 00:11:54,870
customer via their orders collection to

321
00:11:54,870 --> 00:11:56,910
get that order ID now if this order

322
00:11:56,910 --> 00:11:59,220
doesn't live in that customer's orders

323
00:11:59,220 --> 00:12:01,830
collection it doesn't exist we get a 404

324
00:12:01,830 --> 00:12:04,140
instead so if I go to the slightly

325
00:12:04,140 --> 00:12:06,330
different implementation which is going

326
00:12:06,330 --> 00:12:08,400
to do that what we'll end up with is a

327
00:12:08,400 --> 00:12:11,160
404 pretty graceless for it for but it's

328
00:12:11,160 --> 00:12:14,190
a 404 happy days obviously we've dressed

329
00:12:14,190 --> 00:12:15,750
that up a lot more nicely but there we

330
00:12:15,750 --> 00:12:17,900
go

331
00:12:18,170 --> 00:12:20,430
Richard the my domain model would have

332
00:12:20,430 --> 00:12:24,349
saved us even in this elementary manner

333
00:12:24,530 --> 00:12:27,030
so let's talk about domain modeling and

334
00:12:27,030 --> 00:12:28,980
let's talk about rich domain models and

335
00:12:28,980 --> 00:12:32,970
how they can help us I'm gonna make a

336
00:12:32,970 --> 00:12:35,100
couple of non-contentious statements and

337
00:12:35,100 --> 00:12:36,660
then people are going to freak out so

338
00:12:36,660 --> 00:12:38,850
you just watch so a couple of principles

339
00:12:38,850 --> 00:12:41,400
if there's a thing there should probably

340
00:12:41,400 --> 00:12:44,340
be a class for that thing this is our

341
00:12:44,340 --> 00:12:46,530
ope 101 if there's a thing called a

342
00:12:46,530 --> 00:12:48,480
customer then there should probably be a

343
00:12:48,480 --> 00:12:50,010
customer class and if there's a thing

344
00:12:50,010 --> 00:12:51,180
called an order then there should

345
00:12:51,180 --> 00:12:55,710
probably be an order class likewise if

346
00:12:55,710 --> 00:12:57,420
there's an action there should probably

347
00:12:57,420 --> 00:13:00,540
be a method that represents that action

348
00:13:00,540 --> 00:13:03,960
so something can do a place order and so

349
00:13:03,960 --> 00:13:05,760
what we'll end up with is something like

350
00:13:05,760 --> 00:13:07,400
this

351
00:13:07,400 --> 00:13:10,230
we have an order class we have an order

352
00:13:10,230 --> 00:13:15,480
placing service and wait what so like a

353
00:13:15,480 --> 00:13:17,400
wild order just appears out of nowhere

354
00:13:17,400 --> 00:13:20,930
oh well I mean yeah I guess so

355
00:13:20,930 --> 00:13:24,330
now this is terrible code and if you

356
00:13:24,330 --> 00:13:25,980
were thinking actually this doesn't look

357
00:13:25,980 --> 00:13:28,020
too bad it looks neat and tidy that's

358
00:13:28,020 --> 00:13:30,540
actually part of the problem this code

359
00:13:30,540 --> 00:13:34,920
is terrible it's dangerous and it's even

360
00:13:34,920 --> 00:13:36,750
more dangerous because it looks neat

361
00:13:36,750 --> 00:13:38,940
well formatted code can still be

362
00:13:38,940 --> 00:13:40,730
terrible code what's wrong with this

363
00:13:40,730 --> 00:13:43,560
well we've got a bunch of things one the

364
00:13:43,560 --> 00:13:45,600
domain model is completely anemic our

365
00:13:45,600 --> 00:13:47,550
order class can just be manipulated it's

366
00:13:47,550 --> 00:13:49,830
basically nothing but a dumb state bag

367
00:13:49,830 --> 00:13:52,950
um the second thing is that things can

368
00:13:52,950 --> 00:13:57,500
be done to that object by everyone

369
00:13:57,500 --> 00:14:00,990
whenever and we don't really know what's

370
00:14:00,990 --> 00:14:02,340
been done to the thing we can never

371
00:14:02,340 --> 00:14:04,410
assume it's valid we can't really trust

372
00:14:04,410 --> 00:14:05,730
it and what that means is that we tend

373
00:14:05,730 --> 00:14:06,990
to outsource a whole lot of our

374
00:14:06,990 --> 00:14:08,550
precondition checks this is terrible

375
00:14:08,550 --> 00:14:10,080
don't do it this way please don't do it

376
00:14:10,080 --> 00:14:13,620
to yourself so the principle that's

377
00:14:13,620 --> 00:14:15,300
gonna be a little bit contentious even

378
00:14:15,300 --> 00:14:17,790
though it shouldn't be is whoever does

379
00:14:17,790 --> 00:14:19,620
the thing should are in the action

380
00:14:19,620 --> 00:14:22,320
rather than an order placing service we

381
00:14:22,320 --> 00:14:24,150
want to have a place or a method on our

382
00:14:24,150 --> 00:14:26,400
customer now we'll probably still have

383
00:14:26,400 --> 00:14:28,230
some kind of order placement service but

384
00:14:28,230 --> 00:14:29,790
what it's going to be responsible for is

385
00:14:29,790 --> 00:14:31,560
resolving our customer and telling it to

386
00:14:31,560 --> 00:14:33,540
do a thing giving it the dependencies

387
00:14:33,540 --> 00:14:34,800
that it needs if it needs anything

388
00:14:34,800 --> 00:14:36,240
giving it the information it needs to

389
00:14:36,240 --> 00:14:38,040
make its decision and then telling it to

390
00:14:38,040 --> 00:14:42,780
do that thing so the reason for that is

391
00:14:42,780 --> 00:14:45,090
that the things that have actions

392
00:14:45,090 --> 00:14:48,210
performed on them must consent to having

393
00:14:48,210 --> 00:14:50,670
those actions performed so if we look at

394
00:14:50,670 --> 00:14:53,430
a really really simple cafe model right

395
00:14:53,430 --> 00:14:55,500
we've got our customer and our customer

396
00:14:55,500 --> 00:14:57,390
has some orders so it has some behaviors

397
00:14:57,390 --> 00:14:58,980
and in this case our customers behavior

398
00:14:58,980 --> 00:15:00,510
is place order and we're gonna place an

399
00:15:00,510 --> 00:15:03,060
order with a barista all right so our

400
00:15:03,060 --> 00:15:04,530
customers gonna make up an order hire

401
00:15:04,530 --> 00:15:06,720
like whatever my current order is please

402
00:15:06,720 --> 00:15:08,820
and I'm gonna call berries to accept

403
00:15:08,820 --> 00:15:11,460
this order now this is mimicking what

404
00:15:11,460 --> 00:15:13,590
happens in real life in real life you

405
00:15:13,590 --> 00:15:15,240
walk in the cafe and order doesn't just

406
00:15:15,240 --> 00:15:17,880
magically appear you communicate with

407
00:15:17,880 --> 00:15:19,350
someone and acting in the system

408
00:15:19,350 --> 00:15:21,270
communicates with another acting actor

409
00:15:21,270 --> 00:15:23,490
in the system both of them have to agree

410
00:15:23,490 --> 00:15:24,900
on what's going to happen so in this

411
00:15:24,900 --> 00:15:26,370
case when we look over at our barista

412
00:15:26,370 --> 00:15:29,040
class what we can see is that the

413
00:15:29,040 --> 00:15:30,990
barista has an accept method which takes

414
00:15:30,990 --> 00:15:33,180
an order and a customer and the barista

415
00:15:33,180 --> 00:15:34,140
can say

416
00:15:34,140 --> 00:15:37,560
no now this is really really important

417
00:15:37,560 --> 00:15:39,570
for security as well as for our domain

418
00:15:39,570 --> 00:15:41,730
logic so it's an internal method it's

419
00:15:41,730 --> 00:15:43,560
not a public method so we can't just

420
00:15:43,560 --> 00:15:46,529
call it from outside but if we have a

421
00:15:46,529 --> 00:15:48,120
look at the precondition checks what we

422
00:15:48,120 --> 00:15:50,130
can see is that the barista can refuse

423
00:15:50,130 --> 00:15:52,290
for any reason they like as long as it's

424
00:15:52,290 --> 00:15:54,120
valid and lawful so if the purser is on

425
00:15:54,120 --> 00:15:56,040
their lunch break no I'm not making me a

426
00:15:56,040 --> 00:15:58,589
coffee I'm busy right likewise if you're

427
00:15:58,589 --> 00:16:00,540
just a rude customer then you're not

428
00:16:00,540 --> 00:16:02,010
welcome here no I'm not making you

429
00:16:02,010 --> 00:16:05,490
coffee go away but assuming that the

430
00:16:05,490 --> 00:16:07,560
barista is actually not on their lunch

431
00:16:07,560 --> 00:16:10,170
break and that I'm a polite customer and

432
00:16:10,170 --> 00:16:11,610
given that I like my local cafe of

433
00:16:11,610 --> 00:16:12,630
course I'm going to be polite to them

434
00:16:12,630 --> 00:16:14,519
giving them a good cast good person on

435
00:16:14,519 --> 00:16:16,560
hopefully I'll be polite regardless but

436
00:16:16,560 --> 00:16:18,180
the barista is going to check their

437
00:16:18,180 --> 00:16:19,860
preconditions and if they're happy and

438
00:16:19,860 --> 00:16:21,390
they will consent they will perform the

439
00:16:21,390 --> 00:16:22,620
actions they will undergo the state

440
00:16:22,620 --> 00:16:27,720
change we're all good so what does this

441
00:16:27,720 --> 00:16:32,190
have to do with security well what we

442
00:16:32,190 --> 00:16:34,620
can do is we can prevent actions from

443
00:16:34,620 --> 00:16:36,600
happening unless everybody involved

444
00:16:36,600 --> 00:16:38,820
every party involved consents to that

445
00:16:38,820 --> 00:16:41,880
action happening consent given or

446
00:16:41,880 --> 00:16:44,399
withheld for various reasons and rich

447
00:16:44,399 --> 00:16:46,079
domain models can actually have a

448
00:16:46,079 --> 00:16:47,760
meaningful opinion if we've just got a

449
00:16:47,760 --> 00:16:49,440
dumb state bag it doesn't know if it's

450
00:16:49,440 --> 00:16:51,690
legal to do a particular operation but

451
00:16:51,690 --> 00:16:53,459
if we have entities that have State and

452
00:16:53,459 --> 00:16:55,709
behavior then they can say look I'm

453
00:16:55,709 --> 00:16:58,140
willing to perform that action or not or

454
00:16:58,140 --> 00:17:00,690
even I'm willing to let you read that

455
00:17:00,690 --> 00:17:03,990
information or not this isn't just a

456
00:17:03,990 --> 00:17:06,990
change control mechanism this is also a

457
00:17:06,990 --> 00:17:13,109
read control mechanism so if we're going

458
00:17:13,109 --> 00:17:15,569
to put a whole bunch of logic onto our

459
00:17:15,569 --> 00:17:17,280
customer so for this instance I've only

460
00:17:17,280 --> 00:17:19,230
got a place order method but if we're

461
00:17:19,230 --> 00:17:21,030
actually going to try to shoehorn all of

462
00:17:21,030 --> 00:17:23,160
this logic into a single customer class

463
00:17:23,160 --> 00:17:24,809
isn't that going to be a disaster

464
00:17:24,809 --> 00:17:26,790
well I mean yeah we'll end up with a

465
00:17:26,790 --> 00:17:28,559
data object customer class and that's a

466
00:17:28,559 --> 00:17:29,970
very bad thing don't do it

467
00:17:29,970 --> 00:17:31,980
however what we've just discovered

468
00:17:31,980 --> 00:17:33,390
though is we've actually got a domain

469
00:17:33,390 --> 00:17:35,549
modeling problem we've got a context

470
00:17:35,549 --> 00:17:37,169
boundary problem our customer is

471
00:17:37,169 --> 00:17:39,240
operating in different contexts at

472
00:17:39,240 --> 00:17:41,040
different times and we need to represent

473
00:17:41,040 --> 00:17:43,620
that in different ways so if we look at

474
00:17:43,620 --> 00:17:44,850
some of the methods on this customer

475
00:17:44,850 --> 00:17:46,350
let's see if we can group some so we've

476
00:17:46,350 --> 00:17:47,910
got a place order we've got a sign up

477
00:17:47,910 --> 00:17:50,700
we've got cancel our account yeah they

478
00:17:50,700 --> 00:17:52,050
can request an extra shot that's

479
00:17:52,050 --> 00:17:53,820
probably something to do with placing an

480
00:17:53,820 --> 00:17:55,860
order tipping might be or it might not

481
00:17:55,860 --> 00:18:00,750
be making a complaint no asking for the

482
00:18:00,750 --> 00:18:02,460
key to the restroom different context

483
00:18:02,460 --> 00:18:04,470
likewise although in Australia visiting

484
00:18:04,470 --> 00:18:05,820
the restroom and stealing toilet paper

485
00:18:05,820 --> 00:18:07,340
was actually a thing

486
00:18:07,340 --> 00:18:09,360
apologies world if we will do better

487
00:18:09,360 --> 00:18:12,990
than that likewise sneezing six months

488
00:18:12,990 --> 00:18:14,130
ago we wouldn't have carrier for

489
00:18:14,130 --> 00:18:16,350
customers needs now we really do care if

490
00:18:16,350 --> 00:18:17,700
a customer keep sneezing somewhere

491
00:18:17,700 --> 00:18:18,840
that's saying something that we might

492
00:18:18,840 --> 00:18:21,420
want to pay attention to but all of

493
00:18:21,420 --> 00:18:23,010
these actions tend to be done in

494
00:18:23,010 --> 00:18:24,930
different contexts so what we want to do

495
00:18:24,930 --> 00:18:27,660
is we want to look at introducing some

496
00:18:27,660 --> 00:18:29,910
role-based classes for some of our

497
00:18:29,910 --> 00:18:31,950
customers some of our actors in the

498
00:18:31,950 --> 00:18:34,290
system can be the same physical entity

499
00:18:34,290 --> 00:18:36,240
but modelled in different ways in

500
00:18:36,240 --> 00:18:39,090
different contexts and what this allows

501
00:18:39,090 --> 00:18:41,880
us to do is start codifying some of our

502
00:18:41,880 --> 00:18:44,250
constraints around our domain to some

503
00:18:44,250 --> 00:18:45,780
muhammad's points earlier we can

504
00:18:45,780 --> 00:18:47,130
automate some of our compliance

505
00:18:47,130 --> 00:18:48,660
constraints by doing this just by

506
00:18:48,660 --> 00:18:50,730
writing tests around who can do what

507
00:18:50,730 --> 00:18:53,130
under what circumstances and we can also

508
00:18:53,130 --> 00:18:55,230
document those via the tests that we

509
00:18:55,230 --> 00:18:58,710
write so if we start splitting out some

510
00:18:58,710 --> 00:19:01,170
of the actions into role based classes

511
00:19:01,170 --> 00:19:03,240
then we can say things like well rather

512
00:19:03,240 --> 00:19:04,710
than this customer can do a thing a

513
00:19:04,710 --> 00:19:07,260
loyalty club member can redeem a reward

514
00:19:07,260 --> 00:19:10,500
and a complainant can make a complaint

515
00:19:10,500 --> 00:19:13,140
yes they might actually be a customer

516
00:19:13,140 --> 00:19:14,880
sidenote don't use inheritance use

517
00:19:14,880 --> 00:19:16,260
composition or object graph traversal

518
00:19:16,260 --> 00:19:19,650
but they're the same physical entity

519
00:19:19,650 --> 00:19:21,750
being modeled in a different way for a

520
00:19:21,750 --> 00:19:23,550
different context and that's perfectly

521
00:19:23,550 --> 00:19:28,950
okay so the question that immediately

522
00:19:28,950 --> 00:19:31,380
pops up is isn't this just like role

523
00:19:31,380 --> 00:19:33,510
based access control and your Enterprise

524
00:19:33,510 --> 00:19:34,980
middleware vendors will be jumping up

525
00:19:34,980 --> 00:19:36,000
and down and saying hey but this is

526
00:19:36,000 --> 00:19:37,290
exactly what you should use an api

527
00:19:37,290 --> 00:19:39,330
gateway for or you know what we've got

528
00:19:39,330 --> 00:19:41,100
an enterprise service bus that's just

529
00:19:41,100 --> 00:19:42,900
for you that will do all of this for you

530
00:19:42,900 --> 00:19:44,370
magically so you don't have to worry

531
00:19:44,370 --> 00:19:46,830
about it and they'd like you to believe

532
00:19:46,830 --> 00:19:48,420
that and some of them themselves do

533
00:19:48,420 --> 00:19:50,160
believe it and there are good cases to

534
00:19:50,160 --> 00:19:51,720
be made for using Enterprise middleware

535
00:19:51,720 --> 00:19:54,270
in some cases like this but let's give

536
00:19:54,270 --> 00:19:57,780
some thought to this if we just state a

537
00:19:57,780 --> 00:20:00,270
really simple constraint only a loyalty

538
00:20:00,270 --> 00:20:01,049
card member

539
00:20:01,049 --> 00:20:03,450
redeem rewards that looks pretty okay

540
00:20:03,450 --> 00:20:05,669
right you've got a roll royalty Club

541
00:20:05,669 --> 00:20:07,739
member and you've got an action can do

542
00:20:07,739 --> 00:20:09,690
that yeah no worries let's take a

543
00:20:09,690 --> 00:20:12,659
slightly more serious example only a

544
00:20:12,659 --> 00:20:16,619
doctor can review a patient's chart yeah

545
00:20:16,619 --> 00:20:19,110
fair enough all right now in reality

546
00:20:19,110 --> 00:20:20,580
there'll be other people who can read

547
00:20:20,580 --> 00:20:22,259
you a review a patient's chart but let's

548
00:20:22,259 --> 00:20:23,489
say for the sake of argument that we

549
00:20:23,489 --> 00:20:25,289
have a roll doctor we have a roll

550
00:20:25,289 --> 00:20:27,929
patient and doctors can view patients

551
00:20:27,929 --> 00:20:30,779
charts except that the that's not how

552
00:20:30,779 --> 00:20:35,249
the real world works the real world gets

553
00:20:35,249 --> 00:20:38,999
a little bit more messy if we say only a

554
00:20:38,999 --> 00:20:40,859
doctor may review of patient's chart but

555
00:20:40,859 --> 00:20:42,359
only when that doctor is treating that

556
00:20:42,359 --> 00:20:44,970
patient yeah well okay we could probably

557
00:20:44,970 --> 00:20:46,830
model that by just adding them to a

558
00:20:46,830 --> 00:20:49,320
security rule we do have a bit of a

559
00:20:49,320 --> 00:20:51,059
cross products problem though because

560
00:20:51,059 --> 00:20:53,340
we're going to have security groups for

561
00:20:53,340 --> 00:20:55,919
an intersection of doctor and patient or

562
00:20:55,919 --> 00:20:57,749
maybe we make some assumptions about

563
00:20:57,749 --> 00:20:59,279
well this patient is attending that

564
00:20:59,279 --> 00:21:01,080
hospital so all of the doctors at this

565
00:21:01,080 --> 00:21:04,230
hospital can go yeah we can still do

566
00:21:04,230 --> 00:21:09,989
this within our back system yeah oh okay

567
00:21:09,989 --> 00:21:12,480
this gets a little bit harder so only a

568
00:21:12,480 --> 00:21:13,889
doctor can review a patient's chart but

569
00:21:13,889 --> 00:21:15,239
only while a doctor's treating that

570
00:21:15,239 --> 00:21:17,600
patient or for three months afterwards

571
00:21:17,600 --> 00:21:19,769
but that's still not how the real world

572
00:21:19,769 --> 00:21:24,659
works is it we all notice this is a

573
00:21:24,659 --> 00:21:26,249
whole lot more like the way the real

574
00:21:26,249 --> 00:21:28,259
world works and all of a sudden we are

575
00:21:28,259 --> 00:21:31,409
way beyond access control list we are

576
00:21:31,409 --> 00:21:33,989
way beyond being able to outsource this

577
00:21:33,989 --> 00:21:37,320
to anything like an API gateway we can

578
00:21:37,320 --> 00:21:39,840
try but what's gonna happen is our API

579
00:21:39,840 --> 00:21:41,309
gateway is gonna have to learn a whole

580
00:21:41,309 --> 00:21:43,739
lot about our domain which means our API

581
00:21:43,739 --> 00:21:47,309
gateway gets smart so now we've got a

582
00:21:47,309 --> 00:21:50,159
smart pipe and a snobbish endpoint where

583
00:21:50,159 --> 00:21:53,220
do our tests run well to run all of our

584
00:21:53,220 --> 00:21:56,009
tests now we have to spool up everything

585
00:21:56,009 --> 00:21:57,629
we've got to spool up an API gateway

586
00:21:57,629 --> 00:21:59,190
with all of the smart logic in it as

587
00:21:59,190 --> 00:22:01,200
well as our application which has still

588
00:22:01,200 --> 00:22:03,690
got some smart logic in it now this

589
00:22:03,690 --> 00:22:05,279
means we're probably not going to be

590
00:22:05,279 --> 00:22:06,419
able to run it on a developer

591
00:22:06,419 --> 00:22:08,100
workstation and the developers in the

592
00:22:08,100 --> 00:22:09,779
audience are looking at this guy oh man

593
00:22:09,779 --> 00:22:11,279
you just made me sign it - as you're at

594
00:22:11,279 --> 00:22:13,090
the AWS console and you're not

595
00:22:13,090 --> 00:22:17,920
anymore so that might be the end of it

596
00:22:17,920 --> 00:22:20,980
but it's actually not it gets even more

597
00:22:20,980 --> 00:22:22,450
complicated than that

598
00:22:22,450 --> 00:22:24,700
we've got really really really

599
00:22:24,700 --> 00:22:26,890
complicated business rules about who can

600
00:22:26,890 --> 00:22:29,890
do what when under what circumstances

601
00:22:29,890 --> 00:22:31,930
what the exceptions are and then we've

602
00:22:31,930 --> 00:22:33,970
gotta write all this down in a coda file

603
00:22:33,970 --> 00:22:36,070
way we've got to be able to honor our

604
00:22:36,070 --> 00:22:38,110
compliance obligations by saying hey

605
00:22:38,110 --> 00:22:40,810
these are the rules that we applied at

606
00:22:40,810 --> 00:22:43,000
this particular time to give this person

607
00:22:43,000 --> 00:22:44,860
access to perform that action to the

608
00:22:44,860 --> 00:22:47,530
subject and so on right we're not in our

609
00:22:47,530 --> 00:22:49,690
back territory anymore here this is not

610
00:22:49,690 --> 00:22:52,030
going to work we need out the main logic

611
00:22:52,030 --> 00:22:53,920
to be responsible for answering these

612
00:22:53,920 --> 00:22:58,380
queries and providing these constraints

613
00:22:58,440 --> 00:23:00,550
so if we look at something like what we

614
00:23:00,550 --> 00:23:03,040
can do is we can say well you know if

615
00:23:03,040 --> 00:23:04,540
you're one of these things and you can

616
00:23:04,540 --> 00:23:06,190
do these circle like you can perform

617
00:23:06,190 --> 00:23:07,210
these actions under those circumstances

618
00:23:07,210 --> 00:23:08,770
we can use something like the guard

619
00:23:08,770 --> 00:23:09,730
pattern it's not particularly

620
00:23:09,730 --> 00:23:11,980
complicated we can say well a loyalty

621
00:23:11,980 --> 00:23:14,590
club member can only do a thing if their

622
00:23:14,590 --> 00:23:16,300
memberships current they might need a

623
00:23:16,300 --> 00:23:18,820
reward point balance we can put a guard

624
00:23:18,820 --> 00:23:20,980
method on to our domain objects that

625
00:23:20,980 --> 00:23:23,460
allows us to give really complex

626
00:23:23,460 --> 00:23:26,470
high-quality reasons why an action may

627
00:23:26,470 --> 00:23:29,470
not be performed this is really really

628
00:23:29,470 --> 00:23:32,290
going to be helpful but the fundamental

629
00:23:32,290 --> 00:23:33,820
principle here is that I can write a

630
00:23:33,820 --> 00:23:35,800
test for this and this can run in

631
00:23:35,800 --> 00:23:38,260
process in RAM on a single machine it'll

632
00:23:38,260 --> 00:23:40,570
run quickly it's easy to reason about

633
00:23:40,570 --> 00:23:42,790
and if I get it wrong I'm much more

634
00:23:42,790 --> 00:23:44,440
likely to care about it because I'm much

635
00:23:44,440 --> 00:23:46,720
more likely to be able to fix it if I

636
00:23:46,720 --> 00:23:48,370
push this to a build pipeline and I have

637
00:23:48,370 --> 00:23:50,740
to wait for an hour or day or month

638
00:23:50,740 --> 00:23:53,740
I'm never gonna care so if we need

639
00:23:53,740 --> 00:23:54,670
something slightly more sophisticated

640
00:23:54,670 --> 00:23:56,350
let's have a look at the guard pattern

641
00:23:56,350 --> 00:24:02,770
which we can do in a minute but the

642
00:24:02,770 --> 00:24:05,800
fundamental principle here though is the

643
00:24:05,800 --> 00:24:09,130
logic has to hold up if I don't like I

644
00:24:09,130 --> 00:24:10,480
don't have to break into your system

645
00:24:10,480 --> 00:24:12,580
right I don't have to wander in and take

646
00:24:12,580 --> 00:24:13,990
your database I don't have to look for a

647
00:24:13,990 --> 00:24:15,610
mote code execution exploits I don't

648
00:24:15,610 --> 00:24:17,230
have to do any of the proper blackhat

649
00:24:17,230 --> 00:24:19,150
stuff if your system just gives the data

650
00:24:19,150 --> 00:24:22,150
away we want to put logical constraints

651
00:24:22,150 --> 00:24:24,910
in so that we can say these things are

652
00:24:24,910 --> 00:24:26,230
only permissible under those

653
00:24:26,230 --> 00:24:26,900
circumstances

654
00:24:26,900 --> 00:24:29,060
and our domain logic which will test

655
00:24:29,060 --> 00:24:31,220
that for us will hold those constraints

656
00:24:31,220 --> 00:24:36,490
to be true however there is a flip side

657
00:24:36,520 --> 00:24:38,570
and this is where I put on my black

658
00:24:38,570 --> 00:24:40,430
hoodie and say well I don't have to

659
00:24:40,430 --> 00:24:42,290
break a logic if I can't just drop

660
00:24:42,290 --> 00:24:43,970
meterpreter in one of your boxes and X

661
00:24:43,970 --> 00:24:46,060
fill your entire database

662
00:24:46,060 --> 00:24:48,290
so this is where infrastructure comes

663
00:24:48,290 --> 00:24:52,040
into play now we're not going to talk

664
00:24:52,040 --> 00:24:53,990
too much in depth about infrastructure

665
00:24:53,990 --> 00:24:55,340
security we've got a bunch of other

666
00:24:55,340 --> 00:24:56,390
speakers who are going to do a much

667
00:24:56,390 --> 00:24:58,790
better job than than I will on that I do

668
00:24:58,790 --> 00:25:00,470
want to say there are a few things about

669
00:25:00,470 --> 00:25:03,110
how our domain modeling and security

670
00:25:03,110 --> 00:25:04,490
principles can play nicely with

671
00:25:04,490 --> 00:25:10,070
infrastructure security so let's say for

672
00:25:10,070 --> 00:25:12,080
instance that we have found a

673
00:25:12,080 --> 00:25:14,450
vulnerability we're gonna have a bad day

674
00:25:14,450 --> 00:25:17,030
no matter what we're already having a

675
00:25:17,030 --> 00:25:18,500
bad day right there's a CVE

676
00:25:18,500 --> 00:25:20,690
it's been released we've discovered that

677
00:25:20,690 --> 00:25:22,520
somebody else has got a remote code

678
00:25:22,520 --> 00:25:24,890
execution exploit and it's in our

679
00:25:24,890 --> 00:25:27,860
systems right now we've got to do

680
00:25:27,860 --> 00:25:29,690
something what can we do okay well

681
00:25:29,690 --> 00:25:32,300
clearly we should patch it can we patch

682
00:25:32,300 --> 00:25:35,450
it do we know have we patched it do we

683
00:25:35,450 --> 00:25:38,990
know okay now if this is in our

684
00:25:38,990 --> 00:25:40,880
infrastructure what we should be able to

685
00:25:40,880 --> 00:25:42,290
say for instance there's a remote code

686
00:25:42,290 --> 00:25:43,790
execution in the Linux kernel because

687
00:25:43,790 --> 00:25:46,720
that it never happens um

688
00:25:46,720 --> 00:25:48,560
Windows kernel may be that it never

689
00:25:48,560 --> 00:25:50,420
happen either that's why you're on all

690
00:25:50,420 --> 00:25:51,530
your docket containers on the next

691
00:25:51,530 --> 00:25:54,530
people side no um but nonetheless what

692
00:25:54,530 --> 00:25:56,330
we can do though is we can just patch

693
00:25:56,330 --> 00:25:58,040
the operating system right and we can

694
00:25:58,040 --> 00:26:01,700
redeploy all of our stuff except that if

695
00:26:01,700 --> 00:26:04,160
we have a really convoluted test suite

696
00:26:04,160 --> 00:26:05,630
to run then I'm preaching to the choir

697
00:26:05,630 --> 00:26:07,070
here we know that that's going to be

698
00:26:07,070 --> 00:26:09,080
really difficult we have to spin up an

699
00:26:09,080 --> 00:26:11,870
entire you VPC we have to run all of our

700
00:26:11,870 --> 00:26:13,820
infrastructure just to run this little

701
00:26:13,820 --> 00:26:15,290
regression suite when that code hasn't

702
00:26:15,290 --> 00:26:17,090
even necessarily changed infrastructure

703
00:26:17,090 --> 00:26:18,830
as code is going to help but if we're

704
00:26:18,830 --> 00:26:20,510
still not confident that our tests are

705
00:26:20,510 --> 00:26:21,650
going to catch anything that we've

706
00:26:21,650 --> 00:26:23,930
broken then we can't really ship this

707
00:26:23,930 --> 00:26:26,390
thing so we need our domain logic to be

708
00:26:26,390 --> 00:26:28,940
rock-solid so that we can then say look

709
00:26:28,940 --> 00:26:32,000
if the tests pass we're confident that

710
00:26:32,000 --> 00:26:33,710
this thing is able to be shipped to

711
00:26:33,710 --> 00:26:35,420
production we know that we haven't

712
00:26:35,420 --> 00:26:37,760
introduced any logic errors into our

713
00:26:37,760 --> 00:26:39,560
business domain we we know that our

714
00:26:39,560 --> 00:26:40,740
security model is

715
00:26:40,740 --> 00:26:42,899
fine and it's helping us out and our API

716
00:26:42,899 --> 00:26:44,370
gateway is just going to be shuttling

717
00:26:44,370 --> 00:26:45,690
packets backward and forward and doing

718
00:26:45,690 --> 00:26:47,220
some elementary checks on our fourth

719
00:26:47,220 --> 00:26:50,159
tokens which means we can safely upgrade

720
00:26:50,159 --> 00:26:52,590
an infrastructure right we can just bump

721
00:26:52,590 --> 00:26:54,360
our base ami image we can do all of

722
00:26:54,360 --> 00:26:55,860
those things that with otherwise look at

723
00:26:55,860 --> 00:26:58,380
and go oh geez my service hasn't be

724
00:26:58,380 --> 00:26:59,490
patching in three years

725
00:26:59,490 --> 00:27:01,260
they're probably vulnerable but no one's

726
00:27:01,260 --> 00:27:02,940
noticed yet right maybe no one will

727
00:27:02,940 --> 00:27:07,950
continue to notice infrastructure

728
00:27:07,950 --> 00:27:10,679
infrastructure changes are scary because

729
00:27:10,679 --> 00:27:12,330
our app might break but if our app is

730
00:27:12,330 --> 00:27:14,580
confidently able to be tested our apps

731
00:27:14,580 --> 00:27:16,620
not going to break but nobody here knows

732
00:27:16,620 --> 00:27:18,870
how to do that do we surely there's a

733
00:27:18,870 --> 00:27:20,250
community of people who know how to do

734
00:27:20,250 --> 00:27:22,380
this somewhere maybe one day we'll find

735
00:27:22,380 --> 00:27:28,919
them so I'm going to throw it open for a

736
00:27:28,919 --> 00:27:31,110
QA this kind of talk normally prompts a

737
00:27:31,110 --> 00:27:32,820
whole lot more questions than the normal

738
00:27:32,820 --> 00:27:34,380
especially around things like ohms and

739
00:27:34,380 --> 00:27:35,789
in Plus Ones and God objects and so on

740
00:27:35,789 --> 00:27:36,929
so I tend to leave a little bit more

741
00:27:36,929 --> 00:27:39,120
time for questions in these kinds of

742
00:27:39,120 --> 00:27:41,340
talks but if you do only take one thing

743
00:27:41,340 --> 00:27:43,380
away from this talk other than a meter

744
00:27:43,380 --> 00:27:47,880
for coffee should be this if the main

745
00:27:47,880 --> 00:27:50,130
model needs to be the final arbiter of

746
00:27:50,130 --> 00:27:53,070
who can perform an action when and the

747
00:27:53,070 --> 00:27:54,870
conditions everything else is an

748
00:27:54,870 --> 00:27:57,330
optimization it doesn't mean that it's a

749
00:27:57,330 --> 00:27:59,309
bad optimization it doesn't mean you

750
00:27:59,309 --> 00:28:01,230
shouldn't do it absolutely you should be

751
00:28:01,230 --> 00:28:03,210
checking API tokens at your API gateway

752
00:28:03,210 --> 00:28:04,980
you should just be saying look if

753
00:28:04,980 --> 00:28:05,940
they're authenticated then they're

754
00:28:05,940 --> 00:28:07,590
allowed to call this thing maybe if they

755
00:28:07,590 --> 00:28:08,970
were authenticated and they can do this

756
00:28:08,970 --> 00:28:10,590
thing or in their at that role then they

757
00:28:10,590 --> 00:28:13,080
can do this thing but you know what I'm

758
00:28:13,080 --> 00:28:15,029
just gonna pass on the fact that I know

759
00:28:15,029 --> 00:28:16,860
who they are and what roles they're in

760
00:28:16,860 --> 00:28:19,169
and a set of claims and everything else

761
00:28:19,169 --> 00:28:21,179
can be taken care of by the application

762
00:28:21,179 --> 00:28:23,510
which has its logic which can be tested

763
00:28:23,510 --> 00:28:24,659
optimation

764
00:28:24,659 --> 00:28:27,690
optimizations aren't bad they're very

765
00:28:27,690 --> 00:28:29,940
good they're very necessary but don't

766
00:28:29,940 --> 00:28:32,130
rely on them for the correctness of our

767
00:28:32,130 --> 00:28:34,230
application everything else is an

768
00:28:34,230 --> 00:28:36,330
optimization yet the main model has to

769
00:28:36,330 --> 00:28:39,240
be the guiding principle the one final

770
00:28:39,240 --> 00:28:43,770
determinant of who can do what when the

771
00:28:43,770 --> 00:28:45,570
second single thing I'd like you to take

772
00:28:45,570 --> 00:28:47,610
away from this talk is that under

773
00:28:47,610 --> 00:28:47,970
pressure

774
00:28:47,970 --> 00:28:49,799
good people do things that are familiar

775
00:28:49,799 --> 00:28:52,110
and easy not unfamiliar and difficult if

776
00:28:52,110 --> 00:28:53,820
you make it easy to write good tests if

777
00:28:53,820 --> 00:28:54,179
you make

778
00:28:54,179 --> 00:28:57,029
to run good tests good people were right

779
00:28:57,029 --> 00:28:59,129
and run good tests they will give you

780
00:28:59,129 --> 00:29:01,889
reliable outcomes if you make it really

781
00:29:01,889 --> 00:29:03,840
difficult to release something if you

782
00:29:03,840 --> 00:29:05,759
make it really really difficult to test

783
00:29:05,759 --> 00:29:07,740
something if you make them sign into two

784
00:29:07,740 --> 00:29:09,869
different cloud consoles just to figure

785
00:29:09,869 --> 00:29:11,519
out which API gateway gave them this

786
00:29:11,519 --> 00:29:13,139
weird token that's a little bit broken

787
00:29:13,139 --> 00:29:15,029
they're not going to want to do it we

788
00:29:15,029 --> 00:29:17,369
want to make the pit of success broad

789
00:29:17,369 --> 00:29:20,279
and deep so that people easily fall into

790
00:29:20,279 --> 00:29:24,210
it make the right thing to do the easy

791
00:29:24,210 --> 00:29:26,389
thing to do everybody wins

792
00:29:26,389 --> 00:29:29,039
on that note thank you I'm gonna throw

793
00:29:29,039 --> 00:29:30,389
the floor open to questions I saw a

794
00:29:30,389 --> 00:29:32,669
couple of notes earlier so questions

795
00:29:32,669 --> 00:29:36,529
nobody's asking me about n plus ones yet

796
00:29:42,379 --> 00:29:44,850
so just a reminder for your questions

797
00:29:44,850 --> 00:29:47,129
throw them out there into the chat with

798
00:29:47,129 --> 00:29:49,470
umbrella and Andrew will be more than

799
00:29:49,470 --> 00:29:51,299
happy to take those questions from you

800
00:29:51,299 --> 00:29:52,919
we have a few minutes here to take

801
00:29:52,919 --> 00:29:54,480
questions so if you've got something to

802
00:29:54,480 --> 00:30:00,210
ask please throw that into the chat so

803
00:30:00,210 --> 00:30:02,279
in so while we're waiting for questions

804
00:30:02,279 --> 00:30:03,570
to come in I see that there's one that's

805
00:30:03,570 --> 00:30:05,460
arrived already while we're waiting for

806
00:30:05,460 --> 00:30:07,080
questions to come in what I might do is

807
00:30:07,080 --> 00:30:08,970
I flick over to some of the terrible

808
00:30:08,970 --> 00:30:11,639
code that I wrote and we can have a look

809
00:30:11,639 --> 00:30:14,639
at some of the logic so in this case

810
00:30:14,639 --> 00:30:17,580
what we've got is a customer class

811
00:30:17,580 --> 00:30:20,990
that's not particularly sophisticated

812
00:30:21,379 --> 00:30:23,340
but you can see that they've actually

813
00:30:23,340 --> 00:30:25,919
got the beginnings of some state and

814
00:30:25,919 --> 00:30:30,450
some behavior here now I'm relying on in

815
00:30:30,450 --> 00:30:33,210
this case I've made up RM in.net land

816
00:30:33,210 --> 00:30:34,470
obviously would probably use something

817
00:30:34,470 --> 00:30:37,080
like entity framework I'm using Java or

818
00:30:37,080 --> 00:30:38,700
Cullen land you'd probably still be

819
00:30:38,700 --> 00:30:41,070
using hibernate you can use a whole

820
00:30:41,070 --> 00:30:42,149
bunch of these it doesn't really matter

821
00:30:42,149 --> 00:30:44,240
what we're looking for though is

822
00:30:44,240 --> 00:30:46,649
persistence ignorance being our friend

823
00:30:46,649 --> 00:30:49,350
rather than our enemy the the problem

824
00:30:49,350 --> 00:30:50,940
that we usually see when people begin

825
00:30:50,940 --> 00:30:54,090
and bringing in an ORM is something like

826
00:30:54,090 --> 00:30:55,919
order collections and we've seen an

827
00:30:55,919 --> 00:30:57,419
example of that a little bit earlier so

828
00:30:57,419 --> 00:31:00,720
if I grab one of the tests here what we

829
00:31:00,720 --> 00:31:02,879
can see is we're asserting in this

830
00:31:02,879 --> 00:31:04,619
particular test when a customer signs

831
00:31:04,619 --> 00:31:06,240
out they start an order so when a

832
00:31:06,240 --> 00:31:07,860
customer places an order

833
00:31:07,860 --> 00:31:11,309
customer orders should contain order now

834
00:31:11,309 --> 00:31:14,670
DBAs are likely to freak when you show

835
00:31:14,670 --> 00:31:16,620
them this kind of code because what

836
00:31:16,620 --> 00:31:19,320
you're saying to them is I'm going to

837
00:31:19,320 --> 00:31:21,210
materialize one record followed by a

838
00:31:21,210 --> 00:31:22,740
thousand records because I'm going to

839
00:31:22,740 --> 00:31:24,270
materialize this entire waters

840
00:31:24,270 --> 00:31:27,750
collection it's really important to note

841
00:31:27,750 --> 00:31:30,840
two things here one the database is

842
00:31:30,840 --> 00:31:32,549
subservient to our domain model the

843
00:31:32,549 --> 00:31:35,070
database is an implementation detail of

844
00:31:35,070 --> 00:31:36,840
what we're trying to do which is model

845
00:31:36,840 --> 00:31:39,450
the real world - oh Aram's are not like

846
00:31:39,450 --> 00:31:41,340
they were in the early 2000s our rooms

847
00:31:41,340 --> 00:31:43,650
are actually pretty good an ORM given a

848
00:31:43,650 --> 00:31:44,970
query like this or given an expression

849
00:31:44,970 --> 00:31:47,460
like this is going to issue maybe -

850
00:31:47,460 --> 00:31:50,910
probably one queries probably only one

851
00:31:50,910 --> 00:31:53,490
in the case of VF it's likely to be -

852
00:31:53,490 --> 00:31:54,840
it's going to fetch this and then it's

853
00:31:54,840 --> 00:31:56,580
going to fetch all of these and we want

854
00:31:56,580 --> 00:31:58,140
the details of these it's still going to

855
00:31:58,140 --> 00:32:00,120
be going to just do a left join even if

856
00:32:00,120 --> 00:32:01,950
we pull in the order line items so we

857
00:32:01,950 --> 00:32:03,840
need to rely on our own rooms treat the

858
00:32:03,840 --> 00:32:11,100
tools as our friend not as our enemy one

859
00:32:11,100 --> 00:32:12,750
of the other considerations that we were

860
00:32:12,750 --> 00:32:15,840
looking at and this is a sneaky one this

861
00:32:15,840 --> 00:32:17,340
bites people a lot I'm gonna flick back

862
00:32:17,340 --> 00:32:20,280
to one of these which is the guard

863
00:32:20,280 --> 00:32:22,980
pattern and specifically now somebody

864
00:32:22,980 --> 00:32:24,210
would already have spotted this a little

865
00:32:24,210 --> 00:32:26,010
bit earlier put it in the chat if you

866
00:32:26,010 --> 00:32:29,580
have can I pay for my order with points

867
00:32:29,580 --> 00:32:30,840
and the first question the first

868
00:32:30,840 --> 00:32:33,360
precondition we're checking here is well

869
00:32:33,360 --> 00:32:36,090
is their membership current now what's

870
00:32:36,090 --> 00:32:40,130
the problem with the word current

871
00:32:40,130 --> 00:32:42,540
because pretty much immediately anybody

872
00:32:42,540 --> 00:32:44,370
who's written any code anywhere in the

873
00:32:44,370 --> 00:32:45,990
system the cross has time zones they're

874
00:32:45,990 --> 00:32:47,250
going to go are we don't know what time

875
00:32:47,250 --> 00:32:49,650
it is alright we need to know what time

876
00:32:49,650 --> 00:32:51,750
it is that introduces the concept of a

877
00:32:51,750 --> 00:32:53,760
service we need to know what time it is

878
00:32:53,760 --> 00:32:56,000
because we could call this method today

879
00:32:56,000 --> 00:32:58,799
and we could call it tomorrow and it may

880
00:32:58,799 --> 00:33:01,230
well be correct in giving us different

881
00:33:01,230 --> 00:33:04,470
answers so that's easy right all we do

882
00:33:04,470 --> 00:33:06,000
well in membership is currents just a

883
00:33:06,000 --> 00:33:08,070
dumb property right we can just hydrate

884
00:33:08,070 --> 00:33:10,410
the records from the database window

885
00:33:10,410 --> 00:33:14,040
membership lapses and then we can update

886
00:33:14,040 --> 00:33:15,450
them all and say well now it's not

887
00:33:15,450 --> 00:33:17,970
current anymore and

888
00:33:17,970 --> 00:33:19,740
it could do that but we're hoping to

889
00:33:19,740 --> 00:33:21,210
have more than a handful of customers

890
00:33:21,210 --> 00:33:22,470
and that's going to get really expensive

891
00:33:22,470 --> 00:33:24,090
if you've got a decent size - customer

892
00:33:24,090 --> 00:33:27,450
base so what we can do instead is we can

893
00:33:27,450 --> 00:33:29,400
introduce the concept of providing a

894
00:33:29,400 --> 00:33:32,370
domain service to an entity at the point

895
00:33:32,370 --> 00:33:34,350
in time when it actually needs it to get

896
00:33:34,350 --> 00:33:36,990
an answer so in this case you're can I

897
00:33:36,990 --> 00:33:38,790
pay for an order with points here's the

898
00:33:38,790 --> 00:33:41,580
order by the way the time is this

899
00:33:41,580 --> 00:33:44,790
o'clock is my membership current can we

900
00:33:44,790 --> 00:33:46,260
pay it what's the points balance and so

901
00:33:46,260 --> 00:33:49,140
on where we end up is we actually end up

902
00:33:49,140 --> 00:33:51,450
passing some relatively trivial services

903
00:33:51,450 --> 00:33:53,640
into some of our methods or we run our

904
00:33:53,640 --> 00:33:55,800
domain services earlier so for instance

905
00:33:55,800 --> 00:33:57,630
we have a clock service and then we just

906
00:33:57,630 --> 00:33:59,670
pass in the result so if we pass in it

907
00:33:59,670 --> 00:34:01,140
so if we grab our clock service and then

908
00:34:01,140 --> 00:34:02,400
we say okay hey o'clock what time is it

909
00:34:02,400 --> 00:34:05,220
okay cool now loyalty program member can

910
00:34:05,220 --> 00:34:06,360
you pay for an order with points and

911
00:34:06,360 --> 00:34:08,400
given that the time is bla what that

912
00:34:08,400 --> 00:34:10,409
allows us to do is keep up components

913
00:34:10,409 --> 00:34:12,480
very very functional we can keep our

914
00:34:12,480 --> 00:34:15,719
guard methods effectively stateless and

915
00:34:15,719 --> 00:34:17,639
services they don't need services they

916
00:34:17,639 --> 00:34:19,199
just get pure inputs and get pure

917
00:34:19,199 --> 00:34:22,880
outputs so that's one of the normal

918
00:34:22,880 --> 00:34:25,380
issues that we tend to see with code

919
00:34:25,380 --> 00:34:27,630
like this and where people tend to go

920
00:34:27,630 --> 00:34:29,639
wrong is they inject services into the

921
00:34:29,639 --> 00:34:31,110
domain entities and then they hold on to

922
00:34:31,110 --> 00:34:32,790
them for a very long time so what you

923
00:34:32,790 --> 00:34:34,530
end up with is trying to serialize a

924
00:34:34,530 --> 00:34:36,510
database connection or you end up with

925
00:34:36,510 --> 00:34:38,130
object disposed exceptions or in the

926
00:34:38,130 --> 00:34:39,900
case of C++ you and at with segmentation

927
00:34:39,900 --> 00:34:41,340
faults because you try to dereference a

928
00:34:41,340 --> 00:34:43,170
point that's now been cleaned up so

929
00:34:43,170 --> 00:34:45,239
maybe you don't do it that way but this

930
00:34:45,239 --> 00:34:48,150
pattern does have a lot of value one of

931
00:34:48,150 --> 00:34:50,370
the things that we tend to find though

932
00:34:50,370 --> 00:34:53,730
is that when we start thinking in our

933
00:34:53,730 --> 00:34:58,140
terms we realized just how difficult a

934
00:34:58,140 --> 00:35:00,210
job we've created for ourselves by

935
00:35:00,210 --> 00:35:02,280
extracting so much of this logic into

936
00:35:02,280 --> 00:35:04,260
services but previously we thought were

937
00:35:04,260 --> 00:35:06,360
well factored when we've pushed all this

938
00:35:06,360 --> 00:35:09,060
logic to outside now we're in all sorts

939
00:35:09,060 --> 00:35:11,370
of strife because all of a sudden we're

940
00:35:11,370 --> 00:35:13,050
bossing these entities around from

941
00:35:13,050 --> 00:35:14,640
outside but they're starting to have

942
00:35:14,640 --> 00:35:16,230
opinions about whether they're actually

943
00:35:16,230 --> 00:35:17,730
willing to want to take those kinds of

944
00:35:17,730 --> 00:35:19,530
actions themselves so we end up with

945
00:35:19,530 --> 00:35:21,570
this kind of one foot in either camp

946
00:35:21,570 --> 00:35:23,670
territory where in some cases we've got

947
00:35:23,670 --> 00:35:26,040
services doing manipulation and in other

948
00:35:26,040 --> 00:35:27,630
cases we've got the entities doing the

949
00:35:27,630 --> 00:35:28,320
manipulation

950
00:35:28,320 --> 00:35:31,200
themselves that's normal it's actually

951
00:35:31,200 --> 00:35:33,810
not as bad as you think often times it's

952
00:35:33,810 --> 00:35:35,190
actually pretty easy to start

953
00:35:35,190 --> 00:35:36,900
refactoring a codebase to this kind of

954
00:35:36,900 --> 00:35:43,230
pattern and it pays off in spades so I'm

955
00:35:43,230 --> 00:35:44,550
gonna leave it there if there are no

956
00:35:44,550 --> 00:35:45,930
more questions coming through the chat

957
00:35:45,930 --> 00:35:48,120
then we'll call it a day you must've

958
00:35:48,120 --> 00:35:49,920
done that good a job nobody's got any

959
00:35:49,920 --> 00:35:51,450
additional questions you explained it

960
00:35:51,450 --> 00:35:53,550
that well I guess either that or

961
00:35:53,550 --> 00:35:55,020
everybody's just gone to sleep because I

962
00:35:55,020 --> 00:36:00,990
was boring awesome well thank you so

963
00:36:00,990 --> 00:36:02,550
much Andrew really appreciate you being

964
00:36:02,550 --> 00:36:05,300
here with us

