1
00:00:00,030 --> 00:00:02,879
so hi everyone and welcome to a quick

2
00:00:02,879 --> 00:00:04,410
session about the infrastructure as code

3
00:00:04,410 --> 00:00:07,500
security my name is Brook Foster I'm a

4
00:00:07,500 --> 00:00:09,450
CEO and co-founder at breach crew a

5
00:00:09,450 --> 00:00:12,389
cloud security startup that has both a

6
00:00:12,389 --> 00:00:15,210
very large open source projects and a

7
00:00:15,210 --> 00:00:17,580
great platform that solves some of the

8
00:00:17,580 --> 00:00:19,550
issues that we've talked about today and

9
00:00:19,550 --> 00:00:23,970
about cloud msconfig if any of those

10
00:00:23,970 --> 00:00:26,699
open source projects around AWS security

11
00:00:26,699 --> 00:00:28,500
terraform Confirmation kubernetes and

12
00:00:28,500 --> 00:00:31,679
GCT security are in interest for you

13
00:00:31,679 --> 00:00:33,630
please feel free to reach out to Twitter

14
00:00:33,630 --> 00:00:36,890
its Barack's Oster camelcase

15
00:00:36,890 --> 00:00:39,690
all right so let's take a bit step back

16
00:00:39,690 --> 00:00:42,090
and think what was infrastructure

17
00:00:42,090 --> 00:00:45,210
security a few years ago so back in the

18
00:00:45,210 --> 00:00:48,420
90s it probably has been these old

19
00:00:48,420 --> 00:00:50,789
firewalls with knobs and switches and

20
00:00:50,789 --> 00:00:52,710
people that were responsible on the

21
00:00:52,710 --> 00:00:54,930
security of the perimeter or actually

22
00:00:54,930 --> 00:00:56,699
the people that brought it into the data

23
00:00:56,699 --> 00:01:00,149
center like took the Heavyweight server

24
00:01:00,149 --> 00:01:03,210
plugged in and the way for them to many

25
00:01:03,210 --> 00:01:05,489
security is actually to play play with

26
00:01:05,489 --> 00:01:09,510
it one generation after that came the II

27
00:01:09,510 --> 00:01:12,240
management console of the firewall that

28
00:01:12,240 --> 00:01:15,689
gave the IT professionals an idea of how

29
00:01:15,689 --> 00:01:18,840
to manage the network and how to manage

30
00:01:18,840 --> 00:01:21,030
the different configurations of it and

31
00:01:21,030 --> 00:01:24,360
it was really centralized within the IT

32
00:01:24,360 --> 00:01:27,450
or security team to hold the keys to the

33
00:01:27,450 --> 00:01:31,290
kingdom which is the data center a few

34
00:01:31,290 --> 00:01:34,320
years after or nowadays or at the past

35
00:01:34,320 --> 00:01:36,960
two or three years we are not seeing

36
00:01:36,960 --> 00:01:39,960
those kind of infrastructure as much as

37
00:01:39,960 --> 00:01:41,850
we've seen in the past we're not seeing

38
00:01:41,850 --> 00:01:43,890
those centralized team that manages

39
00:01:43,890 --> 00:01:47,460
security within IT boxes what we are

40
00:01:47,460 --> 00:01:50,030
seeing is a decentralized solution of

41
00:01:50,030 --> 00:01:53,460
managing firewalls for example or

42
00:01:53,460 --> 00:01:56,219
infrastructure generally using API calls

43
00:01:56,219 --> 00:01:58,799
like the security groups or file manager

44
00:01:58,799 --> 00:02:01,950
of the AWS cloud and this is really a

45
00:02:01,950 --> 00:02:05,520
huge transformations because instead of

46
00:02:05,520 --> 00:02:09,179
doing a manual work with a dedicated no

47
00:02:09,179 --> 00:02:12,450
switches or dashboards we can now stand

48
00:02:12,450 --> 00:02:13,740
up a new firewall

49
00:02:13,740 --> 00:02:17,100
with just seven lines of code so over

50
00:02:17,100 --> 00:02:20,760
here we have an example of a terraform

51
00:02:20,760 --> 00:02:22,380
block therefore means an infrastructure

52
00:02:22,380 --> 00:02:25,620
is code language that helps us defines a

53
00:02:25,620 --> 00:02:30,150
firewall with the port of tls/ssl open

54
00:02:30,150 --> 00:02:33,030
to the entire world which is usually set

55
00:02:33,030 --> 00:02:36,900
save for web servers and it doesn't look

56
00:02:36,900 --> 00:02:42,480
the same like it used to be so terraform

57
00:02:42,480 --> 00:02:45,030
is one of those infrastructure as code

58
00:02:45,030 --> 00:02:47,850
languages that gives us the flexibility

59
00:02:47,850 --> 00:02:51,090
of creating new resources by the

60
00:02:51,090 --> 00:02:53,550
throughput that we have on our business

61
00:02:53,550 --> 00:02:57,540
it is part platform agnostic it has the

62
00:02:57,540 --> 00:02:59,310
ability to manage a state and keep

63
00:02:59,310 --> 00:03:02,010
history contracted the changes in your

64
00:03:02,010 --> 00:03:03,870
environment and essentially version

65
00:03:03,870 --> 00:03:06,030
control your infrastructure your

66
00:03:06,030 --> 00:03:09,420
architecture using code and he says a

67
00:03:09,420 --> 00:03:12,120
lot of upsides in terms of productivity

68
00:03:12,120 --> 00:03:15,870
you can now move some of the workload

69
00:03:15,870 --> 00:03:17,460
that was only centralized in the

70
00:03:17,460 --> 00:03:19,950
security team into the developers teams

71
00:03:19,950 --> 00:03:21,660
and application teams and cloud

72
00:03:21,660 --> 00:03:24,060
engineering teams and what we were

73
00:03:24,060 --> 00:03:26,790
seeing today is more and more

74
00:03:26,790 --> 00:03:28,970
infrastructure is called languages

75
00:03:28,970 --> 00:03:32,040
exists for different use cases so we

76
00:03:32,040 --> 00:03:34,170
have terraform for infrastructure

77
00:03:34,170 --> 00:03:36,720
provisioning we have cloud formation and

78
00:03:36,720 --> 00:03:39,660
erm that does exactly that but only for

79
00:03:39,660 --> 00:03:40,890
AWS raju

80
00:03:40,890 --> 00:03:43,020
we have kubernetes which is a great

81
00:03:43,020 --> 00:03:45,350
orchestration framework for containers

82
00:03:45,350 --> 00:03:47,730
unstable for OS management and

83
00:03:47,730 --> 00:03:50,310
serverless for lambda functions and as

84
00:03:50,310 --> 00:03:53,130
your functions and puppet for some bare

85
00:03:53,130 --> 00:03:57,060
metal configuration changes and it is

86
00:03:57,060 --> 00:03:58,890
really great because you can stand up a

87
00:03:58,890 --> 00:04:01,380
whole datacenter a whole production

88
00:04:01,380 --> 00:04:03,630
environment in just a few lines of code

89
00:04:03,630 --> 00:04:06,270
and minutes of deployments it lets us

90
00:04:06,270 --> 00:04:10,050
much much faster and be sexualized

91
00:04:10,050 --> 00:04:12,270
around business logic and really have a

92
00:04:12,270 --> 00:04:13,890
great solution to how to scale that

93
00:04:13,890 --> 00:04:16,730
business logic but when there is amid

94
00:04:16,730 --> 00:04:20,070
the issue with this configuration is

95
00:04:20,070 --> 00:04:24,270
called frameworks is is that it might

96
00:04:24,270 --> 00:04:28,240
bring with them some on recognized risks

97
00:04:28,240 --> 00:04:32,040
and it's not because those frameworks

98
00:04:32,040 --> 00:04:34,690
creates a risk is because people are

99
00:04:34,690 --> 00:04:36,850
writing more and more code more and more

100
00:04:36,850 --> 00:04:40,150
configurations and they are not always

101
00:04:40,150 --> 00:04:42,550
aware of miss configuration that are

102
00:04:42,550 --> 00:04:45,400
inside those codes so where would you

103
00:04:45,400 --> 00:04:47,770
find those these configs in those

104
00:04:47,770 --> 00:04:49,979
infrastructure frameworks

105
00:04:49,979 --> 00:04:53,490
probably at the open source or even

106
00:04:53,490 --> 00:04:56,020
internally you have repositories or the

107
00:04:56,020 --> 00:04:57,910
terraformer histories or blog posts

108
00:04:57,910 --> 00:05:01,030
people are writing these boiler plates

109
00:05:01,030 --> 00:05:03,910
step boiler plate templates to provision

110
00:05:03,910 --> 00:05:06,460
a new web server for example or a new

111
00:05:06,460 --> 00:05:09,870
database but they often might forget

112
00:05:09,870 --> 00:05:12,760
maybe because of lack of knowledge maybe

113
00:05:12,760 --> 00:05:16,330
because they didn't pay attention or did

114
00:05:16,330 --> 00:05:19,620
have the capacity to review that code

115
00:05:19,620 --> 00:05:24,340
they are not putting the best practices

116
00:05:24,340 --> 00:05:26,740
of security into those configuration

117
00:05:26,740 --> 00:05:30,789
frameworks so let's take a look on a

118
00:05:30,789 --> 00:05:33,370
small research that we've done inside

119
00:05:33,370 --> 00:05:36,210
bridge so in bridge who we've scanned

120
00:05:36,210 --> 00:05:39,300
randomly 1000 and 800 different

121
00:05:39,300 --> 00:05:41,919
terraform modules from the open source

122
00:05:41,919 --> 00:05:45,220
and what we found is that 48% of those

123
00:05:45,220 --> 00:05:48,310
were misko peer meaning had some kind of

124
00:05:48,310 --> 00:05:51,190
security risks like unencrypted

125
00:05:51,190 --> 00:05:53,650
databases or reports to the world and we

126
00:05:53,650 --> 00:05:55,830
will see some of those examples

127
00:05:55,830 --> 00:05:59,919
well 52 were configured correctly it's

128
00:05:59,919 --> 00:06:03,760
still a lot of misconfigured modules in

129
00:06:03,760 --> 00:06:05,830
the open source and how many downloads

130
00:06:05,830 --> 00:06:08,530
did those misconfigured modules had over

131
00:06:08,530 --> 00:06:11,560
10 million that means that over time we

132
00:06:11,560 --> 00:06:16,599
had 10 million provision resources in

133
00:06:16,599 --> 00:06:18,880
the public clouds that were

134
00:06:18,880 --> 00:06:21,120
misconfigured at some point in time

135
00:06:21,120 --> 00:06:24,160
while it does not really mean that don't

136
00:06:24,160 --> 00:06:25,840
specifically were necessarily

137
00:06:25,840 --> 00:06:29,680
exploitable it is still a huge risk to

138
00:06:29,680 --> 00:06:32,349
bring into your cloud environment either

139
00:06:32,349 --> 00:06:34,300
when using open source models or

140
00:06:34,300 --> 00:06:37,960
creating your own and what are the kinds

141
00:06:37,960 --> 00:06:40,780
of miss configurations are so most of

142
00:06:40,780 --> 00:06:41,289
them

143
00:06:41,289 --> 00:06:43,779
and the top top one issue is the lack of

144
00:06:43,779 --> 00:06:46,149
logging and auditing and that means that

145
00:06:46,149 --> 00:06:48,909
your security team really lacks the

146
00:06:48,909 --> 00:06:50,889
visibility to the infrastructure that is

147
00:06:50,889 --> 00:06:53,289
in the cloud backup and recovery is

148
00:06:53,289 --> 00:06:55,569
really a reliability issue of what will

149
00:06:55,569 --> 00:06:57,869
happen in case something that happens an

150
00:06:57,869 --> 00:07:01,930
encryption obviously nowadays it's

151
00:07:01,930 --> 00:07:03,399
really easy to encrypt

152
00:07:03,399 --> 00:07:05,050
each and every resource we've managed

153
00:07:05,050 --> 00:07:09,569
services like AWS kms and cmk or even

154
00:07:09,569 --> 00:07:12,339
solutions like hash the corpse of all

155
00:07:12,339 --> 00:07:15,249
the treaty is easy and quite cheap to

156
00:07:15,249 --> 00:07:17,110
manage encryption of data that we are

157
00:07:17,110 --> 00:07:19,119
not saying that implemented as a default

158
00:07:19,119 --> 00:07:22,439
on each and every open source model and

159
00:07:22,439 --> 00:07:24,939
there are obviously issues with

160
00:07:24,939 --> 00:07:27,219
kubernetes networking and other

161
00:07:27,219 --> 00:07:30,309
privileged I am roles and how does that

162
00:07:30,309 --> 00:07:32,709
look over time what we're seeing here is

163
00:07:32,709 --> 00:07:34,839
that every few months the pace of

164
00:07:34,839 --> 00:07:37,719
contributing new models is going up and

165
00:07:37,719 --> 00:07:40,059
up and this is great it gives us as

166
00:07:40,059 --> 00:07:42,099
developers more and more power and more

167
00:07:42,099 --> 00:07:43,959
and more pre-made

168
00:07:43,959 --> 00:07:45,459
cookbooks of how to create new

169
00:07:45,459 --> 00:07:48,879
infrastructure the issue that is that

170
00:07:48,879 --> 00:07:51,789
over time the number of misconfigured

171
00:07:51,789 --> 00:07:57,539
models is also rising in a huge space so

172
00:07:57,539 --> 00:07:59,889
what we see here is that we had like a

173
00:07:59,889 --> 00:08:03,580
very few new modules contributed every

174
00:08:03,580 --> 00:08:07,180
month and at the passing month the pace

175
00:08:07,180 --> 00:08:10,959
is like a hockey stick and this is June

176
00:08:10,959 --> 00:08:14,499
which is still not completed and what

177
00:08:14,499 --> 00:08:17,019
happened during Kabat we had a huge

178
00:08:17,019 --> 00:08:18,909
spike probably because of productivity

179
00:08:18,909 --> 00:08:21,430
and everybody are at home we had a huge

180
00:08:21,430 --> 00:08:24,279
spike of new misconfigured modules in

181
00:08:24,279 --> 00:08:28,059
the open source so how can we solve

182
00:08:28,059 --> 00:08:30,519
those misconfigurations detect them and

183
00:08:30,519 --> 00:08:33,339
fix them this is why we started breach

184
00:08:33,339 --> 00:08:36,458
through which you can track every change

185
00:08:36,458 --> 00:08:39,250
in your infrastructure code from the

186
00:08:39,250 --> 00:08:41,049
change request that you've created in

187
00:08:41,049 --> 00:08:43,299
your get have a beef Club account to a

188
00:08:43,299 --> 00:08:46,839
scan a fix and then only after the fix

189
00:08:46,839 --> 00:08:48,850
is being applied or a scan is being

190
00:08:48,850 --> 00:08:50,949
approved and not rejected due to

191
00:08:50,949 --> 00:08:54,500
security reasons any resources

192
00:08:54,500 --> 00:08:56,660
set of resources can be provisioned into

193
00:08:56,660 --> 00:09:00,020
your cloud environment from there rich

194
00:09:00,020 --> 00:09:03,130
who will keep and continue to monitor

195
00:09:03,130 --> 00:09:06,230
your production environment for any

196
00:09:06,230 --> 00:09:07,910
configuration changes that are either

197
00:09:07,910 --> 00:09:09,620
being done use the infrastructure code

198
00:09:09,620 --> 00:09:12,410
or manually by an admin that has access

199
00:09:12,410 --> 00:09:17,060
directly to that AWS console how does

200
00:09:17,060 --> 00:09:18,980
that look like on the developers app

201
00:09:18,980 --> 00:09:22,460
here we can see a pull request that has

202
00:09:22,460 --> 00:09:25,370
an annotation that bridge web made a

203
00:09:25,370 --> 00:09:27,950
bridge crew action on github on the

204
00:09:27,950 --> 00:09:30,530
security group and it has the the

205
00:09:30,530 --> 00:09:34,580
annotation that port 22 means SSH is

206
00:09:34,580 --> 00:09:36,320
open to the entire world and that should

207
00:09:36,320 --> 00:09:38,930
be actually fixed and the pro requests

208
00:09:38,930 --> 00:09:40,910
of this developer that created a new web

209
00:09:40,910 --> 00:09:43,580
server in telephone have failed due to

210
00:09:43,580 --> 00:09:48,050
security checks that did not pass how

211
00:09:48,050 --> 00:09:51,860
can we solve that at scale so let's see

212
00:09:51,860 --> 00:09:54,590
let's think that we have those thousands

213
00:09:54,590 --> 00:09:57,350
of lines of infrastructure code but

214
00:09:57,350 --> 00:09:59,390
bridge we can help with is automated

215
00:09:59,390 --> 00:10:01,760
pull request that detects bad

216
00:10:01,760 --> 00:10:03,850
configurations and bad practices and

217
00:10:03,850 --> 00:10:06,620
pushes the fixes to your github with

218
00:10:06,620 --> 00:10:08,450
neopor requests that fixes this

219
00:10:08,450 --> 00:10:10,670
infrastructure so we're here you can see

220
00:10:10,670 --> 00:10:13,640
in DB instance that had didn't had

221
00:10:13,640 --> 00:10:16,190
encrypted encryption turned on and it's

222
00:10:16,190 --> 00:10:18,860
just getting turned on automatically and

223
00:10:18,860 --> 00:10:22,100
opens up a new request sabri tree is

224
00:10:22,100 --> 00:10:24,560
really about detection and fix of

225
00:10:24,560 --> 00:10:28,010
infrastructure in the public clouds if

226
00:10:28,010 --> 00:10:29,750
you'd like to learn more about which

227
00:10:29,750 --> 00:10:31,910
group you can start for free at bridge

228
00:10:31,910 --> 00:10:34,339
crew dot io if you'd like to take a look

229
00:10:34,339 --> 00:10:36,110
on our open source tools that are about

230
00:10:36,110 --> 00:10:38,690
static analysis of infrastructure code

231
00:10:38,690 --> 00:10:40,760
and runtime analysis of infrastructure

232
00:10:40,760 --> 00:10:43,820
code case visitor github page it github

233
00:10:43,820 --> 00:10:46,310
/ bridge crew io and you can read more

234
00:10:46,310 --> 00:10:48,560
about it that's what bridge crew dot IO

235
00:10:48,560 --> 00:10:50,900
if you have any other questions please

236
00:10:50,900 --> 00:10:52,760
feel free to direct message me at

237
00:10:52,760 --> 00:10:55,000
Twitter it's varrick's Oster camelcase

238
00:10:55,000 --> 00:10:58,210
thank you

